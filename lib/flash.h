#ifndef FLASH_H
#define FLASH_H
///////////////////////////////////////////////////////////////////////////////
/////////////////////////GDNS_226_FlashOperation.h/////////////////////////////
//////////////////////////////////ver 2.0//////////////////////////////////////
/////////////////////////////last editor:T Kawai///////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//#define DEBUG
//////////////////////////////port select//////////////////////////////////////
#ifdef DEBUG
   #define DEBUG_PORT pc
#endif
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//////////////////////////////define SPI STREAM////////////////////////////////
#define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
#define FLASH_STREAM1 SMF_STREAM
#define FLASH_STREAM2 SMF_STREAM // dont use
#define FLASH_STREAM3 SMF_STREAM // dont use
typedef enum spi_stream{
   SPI_0,
   SPI_1,
   SPI_2,
   SPI_3,
}SpiStreamId;
///////////////////////////////////////////////////////////////////////////////
//////////////////////////////define Model name////////////////////////////////
#define MT25QL128ABA 0x00     //Mission Flash
#define MT25QL01GBBB 0x01     //SMF,CF
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////define structure member/////////////////////////////
typedef struct select_stream_to_flash{
   SpiStreamId spi_stream_id;
   unsigned int8 flash_model;
   int16 cs_pin;
}Flash;

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////    values    //////////////////////////////////////

Flash mis_fm = {SPI_0, MT25QL128ABA, SPI0_CS};
Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////function List///////////////////////////////////////
//higher all spi csPINs
void flash_setting(Flash flash_stream);
///////////////////////////////////////////////////////////////////////////////
//bit[7:2]status register control bit,bit[1]write enable bit T:ennable F:disable,bit[0]write in progress bit T:busy F:ready
int8 status_register(Flash flash_stream);
///////////////////////////////////////////////////////////////////////////////
//T:Flash id read successfully(connect OK),F:Flash id read failed
int8 read_id(Flash flash_stream);
///////////////////////////////////////////////////////////////////////////////
//64kByte erase
void sector_erase(Flash flash_stream, unsigned int32 sector_address);
///////////////////////////////////////////////////////////////////////////////
//32kByte erase
void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);                                 
///////////////////////////////////////////////////////////////////////////////
//4kByte erase
void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);                                  
///////////////////////////////////////////////////////////////////////////////
//read 1 Byte data
int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
///////////////////////////////////////////////////////////////////////////////
//read multi Bytes data(max 128 MByte) and store to "read_data"
void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);        
///////////////////////////////////////////////////////////////////////////////
//write 1 Byte data to flash
void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
///////////////////////////////////////////////////////////////////////////////
//write multi Bytes data(max256 Byte) in "write_data" to flash
void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);               
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
////////////////////end of GDNS_226_FlashOperation.h///////////////////////////
#include "./src/flash.c"

#endif

