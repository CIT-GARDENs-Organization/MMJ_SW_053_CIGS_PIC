CCS PCH C Compiler, Version 5.104, 57077               21-9-25 13:36

               Filename:   build\mmj_cigs_main.lst

               ROM used:   70722 bytes (54%)
                           Largest free fragment is 60310
               RAM used:   549 (15%) at main() level
                           3040 (85%) worst case
               Stack used: 9 locations (8 in main + 1 for interrupts)
               Stack size: 31

*
00000:  NOP   
00002:  GOTO   10DAC
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  F9D.0
0005E:  GOTO   0068
00062:  BTFSC  F9E.0
00064:  GOTO   019A
00068:  BTFSS  F61.5
0006A:  GOTO   0074
0006E:  BTFSC  FA6.5
00070:  GOTO   0202
00074:  MOVFF  0E,00
00078:  MOVFF  0F,01
0007C:  MOVFF  10,02
00080:  MOVFF  11,03
00084:  MOVFF  0C,FE9
00088:  MOVFF  07,FEA
0008C:  BSF    07.7
0008E:  MOVFF  08,FE1
00092:  MOVFF  09,FE2
00096:  MOVFF  0A,FD9
0009A:  MOVFF  0B,FDA
0009E:  MOVFF  12,FF3
000A2:  MOVFF  13,FF4
000A6:  MOVFF  14,FFA
000AA:  MOVFF  15,FF5
000AE:  MOVFF  16,FF6
000B2:  MOVFF  17,FF7
000B6:  MOVFF  18,FF8
000BA:  MOVFF  19,FFB
000BE:  MOVF   04,W
000C0:  MOVFF  06,FE0
000C4:  MOVFF  05,FD8
000C8:  RETFIE 0
.................... #include "mmj_cigs_main.h"  // ルート直下のヘッダー
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... #opt 0 // 0 = no optimization
.................... 
.................... //==============================================================================
.................... // CCS C 最適化構造: ヘッダー分散 + .cファイル統合
.................... //==============================================================================
.................... 
.................... // レベル1: システム設定
.................... #include "hal/mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
000CA:  CLRF   FF7
000CC:  ADDLW  DE
000CE:  MOVWF  FF6
000D0:  MOVLW  00
000D2:  ADDWFC FF7,F
000D4:  MOVLW  00
000D6:  MOVWF  FF8
000D8:  TBLRD*+
000DA:  MOVF   FF5,W
000DC:  RETURN 0
000DE:  DATA 00,00
000E0:  DATA AA,06
000E2:  DATA FF,0F
000E4:  DATA AA,06
000E6:  DATA 00,10
000E8:  DATA 00,00
000EA:  DATA 00,10
000EC:  DATA AA,06
000EE:  DATA FF,1F
000F0:  DATA AA,06
000F2:  DATA 00,00
000F4:  DATA 14,00
000F6:  DATA 00,20
000F8:  DATA AA,06
000FA:  DATA FF,1F
000FC:  DATA B4,06
000FE:  DATA 00,00
00100:  DATA 14,00
00102:  DATA 00,20
00104:  DATA B4,06
00106:  DATA FF,1F
00108:  DATA BE,06
0010A:  DATA 00,00
0010C:  DATA 0A,00
0010E:  DATA 00,20
00110:  DATA BE,06
00112:  DATA FF,2F
00114:  DATA FE,06
00116:  DATA 00,00
00118:  DATA 40,00
0011A:  DATA 00,30
0011C:  DATA FE,06
0011E:  DATA FF,2F
00120:  DATA 08,07
00122:  DATA 00,00
00124:  DATA 0A,00
00126:  DATA 00,30
00128:  DATA 08,07
0012A:  DATA FF,3F
0012C:  DATA 48,07
0012E:  DATA 00,00
00130:  DATA 40,00
00132:  CLRF   FF7
00134:  ADDLW  46
00136:  MOVWF  FF6
00138:  MOVLW  01
0013A:  ADDWFC FF7,F
0013C:  MOVLW  00
0013E:  MOVWF  FF8
00140:  TBLRD*+
00142:  MOVF   FF5,W
00144:  RETURN 0
00146:  DATA 00,00
00148:  DATA 00,00
0014A:  DATA FF,0F
0014C:  DATA 00,00
0014E:  DATA 00,10
00150:  DATA 00,00
00152:  DATA 00,00
00154:  DATA 01,00
00156:  DATA FF,0F
00158:  DATA 14,00
0015A:  DATA 00,00
0015C:  DATA 14,00
0015E:  DATA 00,10
00160:  DATA 28,00
00162:  DATA FF,0F
00164:  DATA 32,00
00166:  DATA 00,00
00168:  DATA 14,00
0016A:  DATA 00,10
0016C:  DATA 72,00
0016E:  DATA FF,0F
00170:  DATA 7C,00
00172:  DATA 00,00
00174:  DATA 0A,00
00176:  DATA 00,10
00178:  DATA 7C,00
0017A:  DATA FF,0F
0017C:  DATA BC,00
0017E:  DATA 00,00
00180:  DATA 40,00
00182:  DATA 00,10
00184:  DATA 72,00
00186:  DATA FF,0F
00188:  DATA 7C,00
0018A:  DATA 00,00
0018C:  DATA 0A,00
0018E:  DATA 00,10
00190:  DATA 7C,00
00192:  DATA FF,0F
00194:  DATA BC,00
00196:  DATA 00,00
00198:  DATA 40,00
*
001BA:  DATA 54,69
001BC:  DATA 6D,65
001BE:  DATA 72,20
001C0:  DATA 49,6E
001C2:  DATA 69,74
001C4:  DATA 69,61
001C6:  DATA 6C,69
001C8:  DATA 7A,65
001CA:  DATA 0D,0A
001CC:  DATA 00,00
001CE:  DATA 09,43
001D0:  DATA 6F,6D
001D2:  DATA 70,6C
001D4:  DATA 65,74
001D6:  DATA 65,0D
001D8:  DATA 0A,00
*
0024A:  DATA 55,41
0024C:  DATA 52,54
0024E:  DATA 20,49
00250:  DATA 6E,69
00252:  DATA 74,69
00254:  DATA 61,6C
00256:  DATA 69,7A
00258:  DATA 65,0D
0025A:  DATA 0A,00
0025C:  DATA 09,43
0025E:  DATA 6F,6D
00260:  DATA 70,6C
00262:  DATA 65,74
00264:  DATA 65,0D
00266:  DATA 0A,00
00268:  DATA 41,44
0026A:  DATA 37,34
0026C:  DATA 39,30
0026E:  DATA 20,49
00270:  DATA 6E,69
00272:  DATA 74,69
00274:  DATA 61,6C
00276:  DATA 69,7A
00278:  DATA 65,0D
0027A:  DATA 0A,00
0027C:  DATA 09,43
0027E:  DATA 6F,6E
00280:  DATA 6E,65
00282:  DATA 63,74
00284:  DATA 20,65
00286:  DATA 72,72
00288:  DATA 6F,72
0028A:  DATA 21,0D
0028C:  DATA 0A,00
0028E:  DATA 09,43
00290:  DATA 6F,6E
00292:  DATA 6E,65
00294:  DATA 63,74
00296:  DATA 20,73
00298:  DATA 75,63
0029A:  DATA 63,65
0029C:  DATA 73,73
0029E:  DATA 66,75
002A0:  DATA 6C,0D
002A2:  DATA 0A,00
002A4:  DATA 09,43
002A6:  DATA 6F,6D
002A8:  DATA 70,6C
002AA:  DATA 65,74
002AC:  DATA 65,0D
002AE:  DATA 0A,00
002B0:  DATA 4D,43
002B2:  DATA 50,34
002B4:  DATA 39,30
002B6:  DATA 31,20
002B8:  DATA 49,6E
002BA:  DATA 69,74
002BC:  DATA 69,61
002BE:  DATA 6C,69
002C0:  DATA 7A,65
002C2:  DATA 0D,0A
002C4:  DATA 00,00
002C6:  DATA 09,5B
002C8:  DATA 44,41
002CA:  DATA 43,20
002CC:  DATA 50,6F
002CE:  DATA 72,74
002D0:  DATA 20,31
002D2:  DATA 5D,20
002D4:  DATA 43,6F
002D6:  DATA 6E,6E
002D8:  DATA 65,63
002DA:  DATA 74,20
002DC:  DATA 65,72
002DE:  DATA 72,6F
002E0:  DATA 72,21
002E2:  DATA 0D,0A
002E4:  DATA 00,00
002E6:  DATA 09,5B
002E8:  DATA 44,41
002EA:  DATA 43,20
002EC:  DATA 50,6F
002EE:  DATA 72,74
002F0:  DATA 20,31
002F2:  DATA 5D,20
002F4:  DATA 43,6F
002F6:  DATA 6E,6E
002F8:  DATA 65,63
002FA:  DATA 74,20
002FC:  DATA 73,75
002FE:  DATA 63,63
00300:  DATA 65,73
00302:  DATA 73,66
00304:  DATA 75,6C
00306:  DATA 0D,0A
00308:  DATA 00,00
0030A:  DATA 09,5B
0030C:  DATA 44,41
0030E:  DATA 43,20
00310:  DATA 50,6F
00312:  DATA 72,74
00314:  DATA 20,32
00316:  DATA 5D,20
00318:  DATA 43,6F
0031A:  DATA 6E,6E
0031C:  DATA 65,63
0031E:  DATA 74,20
00320:  DATA 65,72
00322:  DATA 72,6F
00324:  DATA 72,21
00326:  DATA 0D,0A
00328:  DATA 00,00
0032A:  DATA 09,5B
0032C:  DATA 44,41
0032E:  DATA 43,20
00330:  DATA 50,6F
00332:  DATA 72,74
00334:  DATA 20,32
00336:  DATA 5D,20
00338:  DATA 43,6F
0033A:  DATA 6E,6E
0033C:  DATA 65,63
0033E:  DATA 74,20
00340:  DATA 73,75
00342:  DATA 63,63
00344:  DATA 65,73
00346:  DATA 73,66
00348:  DATA 75,6C
0034A:  DATA 0D,0A
0034C:  DATA 00,00
0034E:  DATA 09,43
00350:  DATA 6F,6D
00352:  DATA 70,6C
00354:  DATA 65,74
00356:  DATA 65,0D
00358:  DATA 0A,00
0035A:  DATA 45,6E
0035C:  DATA 71,75
0035E:  DATA 65,75
00360:  DATA 65,20
00362:  DATA 46,6C
00364:  DATA 61,73
00366:  DATA 68,20
00368:  DATA 4F,70
0036A:  DATA 65,72
0036C:  DATA 61,74
0036E:  DATA 69,6F
00370:  DATA 6E,0D
00372:  DATA 0A,00
00374:  DATA 46,6C
00376:  DATA 61,73
00378:  DATA 68,20
0037A:  DATA 71,75
0037C:  DATA 65,75
0037E:  DATA 65,20
00380:  DATA 69,73
00382:  DATA 20,66
00384:  DATA 75,6C
00386:  DATA 6C,21
00388:  DATA 21,21
0038A:  DATA 0D,0A
0038C:  DATA 00,00
0038E:  DATA 46,6C
00390:  DATA 61,73
00392:  DATA 68,20
00394:  DATA 71,75
00396:  DATA 65,75
00398:  DATA 65,20
0039A:  DATA 69,73
0039C:  DATA 20,65
0039E:  DATA 6D,70
003A0:  DATA 74,79
003A2:  DATA 0D,0A
003A4:  DATA 00,00
003A6:  DATA 0D,0A
003A8:  DATA 53,74
003AA:  DATA 61,72
003AC:  DATA 74,20
003AE:  DATA 6D,61
003B0:  DATA 6B,65
003B2:  DATA 5F,72
003B4:  DATA 65,63
003B6:  DATA 65,69
003B8:  DATA 76,65
003BA:  DATA 5F,63
003BC:  DATA 6F,6D
003BE:  DATA 6D,61
003C0:  DATA 6E,64
003C2:  DATA 0D,0A
003C4:  DATA 00,00
003C6:  DATA 09,5B
003C8:  DATA 42,4F
003CA:  DATA 53,53
003CC:  DATA 5D,20
003CE:  DATA 3E,3E
003D0:  DATA 3E,20
003D2:  DATA 00,00
003D4:  DATA 45,6E
003D6:  DATA 64,20
003D8:  DATA 6D,61
003DA:  DATA 6B,65
003DC:  DATA 5F,72
003DE:  DATA 65,63
003E0:  DATA 69,76
003E2:  DATA 65,5F
003E4:  DATA 63,6F
003E6:  DATA 6D,6D
003E8:  DATA 61,6E
003EA:  DATA 64,0D
003EC:  DATA 0A,0D
003EE:  DATA 0A,00
003F0:  DATA 73,69
003F2:  DATA 67,6E
003F4:  DATA 61,6C
003F6:  DATA 20,65
003F8:  DATA 6E,64
003FA:  DATA 20,77
003FC:  DATA 69,74
003FE:  DATA 68,20
00400:  DATA 53,46
00402:  DATA 44,0D
00404:  DATA 0A,00
00406:  DATA 64,6F
00408:  DATA 6E,27
0040A:  DATA 74,20
0040C:  DATA 66,69
0040E:  DATA 6E,64
00410:  DATA 20,53
00412:  DATA 46,44
00414:  DATA 0D,0A
00416:  DATA 00,00
00418:  DATA 09,2D
0041A:  DATA 3E,20
0041C:  DATA 49,6E
0041E:  DATA 76,61
00420:  DATA 6C,69
00422:  DATA 64,20
00424:  DATA 46,72
00426:  DATA 61,6D
00428:  DATA 65,20
0042A:  DATA 49,44
0042C:  DATA 20,72
0042E:  DATA 65,63
00430:  DATA 65,69
00432:  DATA 76,65
00434:  DATA 64,3A
00436:  DATA 20,25
00438:  DATA 58,0D
0043A:  DATA 0A,00
0043C:  DATA 09,2D
0043E:  DATA 3E,20
00440:  DATA 43,52
00442:  DATA 43,20
00444:  DATA 65,72
00446:  DATA 72,6F
00448:  DATA 72,21
0044A:  DATA 0D,0A
0044C:  DATA 00,00
0044E:  DATA 09,09
00450:  DATA 2D,3E
00452:  DATA 20,72
00454:  DATA 65,63
00456:  DATA 65,69
00458:  DATA 76,65
0045A:  DATA 64,20
0045C:  DATA 43,52
0045E:  DATA 43,3A
00460:  DATA 20,25
00462:  DATA 58,0D
00464:  DATA 0A,00
00466:  DATA 09,09
00468:  DATA 20,20
0046A:  DATA 20,63
0046C:  DATA 6F,6C
0046E:  DATA 6C,65
00470:  DATA 63,74
00472:  DATA 20,43
00474:  DATA 52,43
00476:  DATA 20,3A
00478:  DATA 20,25
0047A:  DATA 58,0D
0047C:  DATA 0A,00
0047E:  DATA 09,2D
00480:  DATA 3E,20
00482:  DATA 49,6E
00484:  DATA 76,61
00486:  DATA 6C,69
00488:  DATA 64,20
0048A:  DATA 64,65
0048C:  DATA 76,69
0048E:  DATA 63,65
00490:  DATA 20,49
00492:  DATA 44,20
00494:  DATA 72,65
00496:  DATA 63,65
00498:  DATA 69,76
0049A:  DATA 65,64
0049C:  DATA 0D,0A
0049E:  DATA 00,00
004A0:  DATA 09,09
004A2:  DATA 2D,3E
004A4:  DATA 20,72
004A6:  DATA 65,63
004A8:  DATA 65,69
004AA:  DATA 76,65
004AC:  DATA 64,3A
004AE:  DATA 20,20
004B0:  DATA 20,20
004B2:  DATA 20,25
004B4:  DATA 58,0D
004B6:  DATA 0A,00
004B8:  DATA 09,09
004BA:  DATA 20,20
004BC:  DATA 20,4D
004BE:  DATA 79,20
004C0:  DATA 64,65
004C2:  DATA 76,69
004C4:  DATA 63,65
004C6:  DATA 20,49
004C8:  DATA 44,3A
004CA:  DATA 20,25
004CC:  DATA 58,0D
004CE:  DATA 0A,00
004D0:  DATA 09,5B
004D2:  DATA 42,4F
004D4:  DATA 53,53
004D6:  DATA 5D,20
004D8:  DATA 3C,3C
004DA:  DATA 3C,20
004DC:  DATA 00,00
004DE:  DATA 53,74
004E0:  DATA 61,72
004E2:  DATA 74,20
004E4:  DATA 53,4D
004E6:  DATA 46,20
004E8:  DATA 75,73
004EA:  DATA 69,6E
004EC:  DATA 67,20
004EE:  DATA 72,65
004F0:  DATA 71,65
004F2:  DATA 73,74
004F4:  DATA 20,73
004F6:  DATA 65,61
004F8:  DATA 71,75
004FA:  DATA 65,6E
004FC:  DATA 63,65
004FE:  DATA 0D,0A
00500:  DATA 00,00
00502:  DATA 45,72
00504:  DATA 72,6F
00506:  DATA 72,21
00508:  DATA 20,52
0050A:  DATA 65,63
0050C:  DATA 65,69
0050E:  DATA 76,69
00510:  DATA 6E,67
00512:  DATA 20,63
00514:  DATA 6F,6D
00516:  DATA 6D,61
00518:  DATA 6E,64
0051A:  DATA 20,69
0051C:  DATA 6E,63
0051E:  DATA 6F,6E
00520:  DATA 73,69
00522:  DATA 73,74
00524:  DATA 65,6E
00526:  DATA 74,20
00528:  DATA 77,69
0052A:  DATA 74,68
0052C:  DATA 20,74
0052E:  DATA 68,65
00530:  DATA 20,64
00532:  DATA 65,73
00534:  DATA 69,67
00536:  DATA 6E,0D
00538:  DATA 0A,00
0053A:  DATA 53,4D
0053C:  DATA 46,20
0053E:  DATA 75,73
00540:  DATA 65,20
00542:  DATA 72,65
00544:  DATA 71,75
00546:  DATA 65,73
00548:  DATA 74,20
0054A:  DATA 61,6C
0054C:  DATA 6C,6F
0054E:  DATA 77,65
00550:  DATA 64,0D
00552:  DATA 0A,00
00554:  DATA 53,4D
00556:  DATA 46,20
00558:  DATA 75,73
0055A:  DATA 65,20
0055C:  DATA 72,65
0055E:  DATA 71,75
00560:  DATA 65,73
00562:  DATA 74,20
00564:  DATA 64,65
00566:  DATA 6E,79
00568:  DATA 65,64
0056A:  DATA 0D,0A
0056C:  DATA 00,00
0056E:  DATA 52,65
00570:  DATA 74,72
00572:  DATA 79,20
00574:  DATA 72,65
00576:  DATA 71,75
00578:  DATA 65,73
0057A:  DATA 74,20
0057C:  DATA 74,6F
0057E:  DATA 20,42
00580:  DATA 4F,53
00582:  DATA 53,20
00584:  DATA 50,49
00586:  DATA 43,0D
00588:  DATA 0A,00
0058A:  DATA 45,72
0058C:  DATA 72,6F
0058E:  DATA 72,21
00590:  DATA 20,52
00592:  DATA 65,63
00594:  DATA 65,69
00596:  DATA 76,69
00598:  DATA 6E,67
0059A:  DATA 20,63
0059C:  DATA 6F,6D
0059E:  DATA 6D,61
005A0:  DATA 6E,64
005A2:  DATA 20,69
005A4:  DATA 6E,63
005A6:  DATA 6F,6E
005A8:  DATA 73,69
005AA:  DATA 73,74
005AC:  DATA 65,6E
005AE:  DATA 74,20
005B0:  DATA 77,69
005B2:  DATA 74,68
005B4:  DATA 20,74
005B6:  DATA 68,65
005B8:  DATA 20,64
005BA:  DATA 65,73
005BC:  DATA 69,67
005BE:  DATA 6E,0D
005C0:  DATA 0A,00
005C2:  DATA 45,6E
005C4:  DATA 64,20
005C6:  DATA 53,4D
005C8:  DATA 46,20
005CA:  DATA 75,73
005CC:  DATA 69,6E
005CE:  DATA 67,20
005D0:  DATA 72,65
005D2:  DATA 71,65
005D4:  DATA 73,74
005D6:  DATA 20,73
005D8:  DATA 65,61
005DA:  DATA 71,75
005DC:  DATA 65,6E
005DE:  DATA 63,65
005E0:  DATA 0D,0A
005E2:  DATA 00,00
005E4:  DATA 56,6F
005E6:  DATA 6C,74
005E8:  DATA 31,2C
005EA:  DATA 43,75
005EC:  DATA 72,72
005EE:  DATA 31,2C
005F0:  DATA 56,6F
005F2:  DATA 6C,74
005F4:  DATA 32,2C
005F6:  DATA 43,75
005F8:  DATA 72,72
005FA:  DATA 32,0D
005FC:  DATA 0A,00
005FE:  DATA 73,77
00600:  DATA 65,65
00602:  DATA 70,20
00604:  DATA 73,74
00606:  DATA 65,70
00608:  DATA 20,3A
0060A:  DATA 20,25
0060C:  DATA 30,34
0060E:  DATA 4C,58
00610:  DATA 0D,0A
00612:  DATA 00,00
00614:  DATA 0D,0A
00616:  DATA 70,6F
00618:  DATA 72,74
0061A:  DATA 31,0D
0061C:  DATA 0A,00
0061E:  DATA 0D,0A
00620:  DATA 70,6F
00622:  DATA 72,74
00624:  DATA 32,0D
00626:  DATA 0A,00
00628:  DATA 5B,50
0062A:  DATA 49,43
0062C:  DATA 4C,4F
0062E:  DATA 47,5D
00630:  DATA 20,3A
00632:  DATA 20,00
00634:  DATA 53,4D
00636:  DATA 46,20
00638:  DATA 44,61
0063A:  DATA 74,61
0063C:  DATA 20,54
0063E:  DATA 61,62
00640:  DATA 6C,65
00642:  DATA 20,49
00644:  DATA 6E,69
00646:  DATA 74,69
00648:  DATA 61,6C
0064A:  DATA 69,7A
0064C:  DATA 65,0D
0064E:  DATA 0A,00
00650:  DATA 43,52
00652:  DATA 43,20
00654:  DATA 76,65
00656:  DATA 72,69
00658:  DATA 66,69
0065A:  DATA 63,61
0065C:  DATA 74,69
0065E:  DATA 6F,6E
00660:  DATA 20,70
00662:  DATA 61,73
00664:  DATA 73,65
00666:  DATA 64,20
00668:  DATA 6F,6E
0066A:  DATA 20,61
0066C:  DATA 74,74
0066E:  DATA 65,6D
00670:  DATA 70,74
00672:  DATA 20,25
00674:  DATA 64,0D
00676:  DATA 0A,00
00678:  DATA 43,52
0067A:  DATA 43,20
0067C:  DATA 76,65
0067E:  DATA 72,69
00680:  DATA 66,69
00682:  DATA 63,61
00684:  DATA 74,69
00686:  DATA 6F,6E
00688:  DATA 20,66
0068A:  DATA 61,69
0068C:  DATA 6C,65
0068E:  DATA 64,20
00690:  DATA 61,66
00692:  DATA 74,65
00694:  DATA 72,20
00696:  DATA 25,64
00698:  DATA 20,61
0069A:  DATA 74,74
0069C:  DATA 65,6D
0069E:  DATA 70,74
006A0:  DATA 73,0D
006A2:  DATA 0A,00
006A4:  DATA 43,52
006A6:  DATA 43,20
006A8:  DATA 76,65
006AA:  DATA 72,69
006AC:  DATA 66,69
006AE:  DATA 63,61
006B0:  DATA 74,69
006B2:  DATA 6F,6E
006B4:  DATA 20,70
006B6:  DATA 61,73
006B8:  DATA 73,65
006BA:  DATA 64,20
006BC:  DATA 6F,6E
006BE:  DATA 20,61
006C0:  DATA 74,74
006C2:  DATA 65,6D
006C4:  DATA 70,74
006C6:  DATA 20,25
006C8:  DATA 64,0D
006CA:  DATA 0A,00
006CC:  DATA 45,72
006CE:  DATA 72,6F
006D0:  DATA 72,3A
006D2:  DATA 20,43
006D4:  DATA 52,43
006D6:  DATA 20,76
006D8:  DATA 65,72
006DA:  DATA 69,66
006DC:  DATA 69,63
006DE:  DATA 61,74
006E0:  DATA 69,6F
006E2:  DATA 6E,20
006E4:  DATA 66,61
006E6:  DATA 69,6C
006E8:  DATA 65,64
006EA:  DATA 20,61
006EC:  DATA 66,74
006EE:  DATA 65,72
006F0:  DATA 20,25
006F2:  DATA 64,20
006F4:  DATA 61,74
006F6:  DATA 74,65
006F8:  DATA 6D,70
006FA:  DATA 74,73
006FC:  DATA 0D,0A
006FE:  DATA 00,00
00700:  DATA 0D,0A
00702:  DATA 5B,53
00704:  DATA 4D,46
00706:  DATA 20,43
00708:  DATA 6F,75
0070A:  DATA 6E,74
0070C:  DATA 65,72
0070E:  DATA 20,53
00710:  DATA 74,61
00712:  DATA 74,75
00714:  DATA 73,5D
00716:  DATA 0D,0A
00718:  DATA 00,00
0071A:  DATA 50,49
0071C:  DATA 43,4C
0071E:  DATA 4F,47
00720:  DATA 20,20
00722:  DATA 20,20
00724:  DATA 20,3A
00726:  DATA 20,55
00728:  DATA 73,65
0072A:  DATA 64,3D
0072C:  DATA 25,6C
0072E:  DATA 75,2C
00730:  DATA 20,55
00732:  DATA 6E,63
00734:  DATA 6F,70
00736:  DATA 69,65
00738:  DATA 64,3D
0073A:  DATA 25,75
0073C:  DATA 0D,0A
0073E:  DATA 00,00
00740:  DATA 45,4E
00742:  DATA 56,49
00744:  DATA 52,4F
00746:  DATA 20,20
00748:  DATA 20,20
0074A:  DATA 20,3A
0074C:  DATA 20,55
0074E:  DATA 73,65
00750:  DATA 64,3D
00752:  DATA 25,6C
00754:  DATA 75,2C
00756:  DATA 20,55
00758:  DATA 6E,63
0075A:  DATA 6F,70
0075C:  DATA 69,65
0075E:  DATA 64,3D
00760:  DATA 25,75
00762:  DATA 0D,0A
00764:  DATA 00,00
00766:  DATA 49,56
00768:  DATA 31,5F
0076A:  DATA 48,45
0076C:  DATA 41,44
0076E:  DATA 45,52
00770:  DATA 20,3A
00772:  DATA 20,55
00774:  DATA 73,65
00776:  DATA 64,3D
00778:  DATA 25,6C
0077A:  DATA 75,2C
0077C:  DATA 20,55
0077E:  DATA 6E,63
00780:  DATA 6F,70
00782:  DATA 69,65
00784:  DATA 64,3D
00786:  DATA 25,75
00788:  DATA 0D,0A
0078A:  DATA 00,00
0078C:  DATA 49,56
0078E:  DATA 31,5F
00790:  DATA 44,41
00792:  DATA 54,41
00794:  DATA 20,20
00796:  DATA 20,3A
00798:  DATA 20,55
0079A:  DATA 73,65
0079C:  DATA 64,3D
0079E:  DATA 25,6C
007A0:  DATA 75,2C
007A2:  DATA 20,55
007A4:  DATA 6E,63
007A6:  DATA 6F,70
007A8:  DATA 69,65
007AA:  DATA 64,3D
007AC:  DATA 25,75
007AE:  DATA 0D,0A
007B0:  DATA 00,00
007B2:  DATA 49,56
007B4:  DATA 32,5F
007B6:  DATA 48,45
007B8:  DATA 41,44
007BA:  DATA 45,52
007BC:  DATA 20,3A
007BE:  DATA 20,55
007C0:  DATA 73,65
007C2:  DATA 64,3D
007C4:  DATA 25,6C
007C6:  DATA 75,2C
007C8:  DATA 20,55
007CA:  DATA 6E,63
007CC:  DATA 6F,70
007CE:  DATA 69,65
007D0:  DATA 64,3D
007D2:  DATA 25,75
007D4:  DATA 0D,0A
007D6:  DATA 00,00
007D8:  DATA 49,56
007DA:  DATA 32,5F
007DC:  DATA 44,41
007DE:  DATA 54,41
007E0:  DATA 20,20
007E2:  DATA 20,3A
007E4:  DATA 20,55
007E6:  DATA 73,65
007E8:  DATA 64,3D
007EA:  DATA 25,6C
007EC:  DATA 75,2C
007EE:  DATA 20,55
007F0:  DATA 6E,63
007F2:  DATA 6F,70
007F4:  DATA 69,65
007F6:  DATA 64,3D
007F8:  DATA 25,75
007FA:  DATA 0D,0A
007FC:  DATA 00,00
007FE:  DATA 2D,2D
00800:  DATA 2D,2D
00802:  DATA 2D,2D
00804:  DATA 2D,2D
00806:  DATA 2D,2D
00808:  DATA 2D,2D
0080A:  DATA 2D,2D
0080C:  DATA 2D,2D
0080E:  DATA 2D,2D
00810:  DATA 2D,2D
00812:  DATA 2D,2D
00814:  DATA 2D,2D
00816:  DATA 2D,2D
00818:  DATA 2D,2D
0081A:  DATA 2D,2D
0081C:  DATA 0D,0A
0081E:  DATA 0D,0A
00820:  DATA 00,00
00822:  DATA 0D,0A
00824:  DATA 5F,5F
00826:  DATA 5F,5F
00828:  DATA 5F,5F
0082A:  DATA 5F,5F
0082C:  DATA 5F,5F
0082E:  DATA 5F,5F
00830:  DATA 5F,5F
00832:  DATA 5F,5F
00834:  DATA 5F,5F
00836:  DATA 5F,5F
00838:  DATA 5F,5F
0083A:  DATA 5F,5F
0083C:  DATA 5F,5F
0083E:  DATA 5F,5F
00840:  DATA 5F,5F
00842:  DATA 5F,0D
00844:  DATA 0A,00
00846:  DATA 5F,5F
00848:  DATA 5F,5F
0084A:  DATA 5F,5F
0084C:  DATA 5F,5F
0084E:  DATA 5F,53
00850:  DATA 74,61
00852:  DATA 72,74
00854:  DATA 20,63
00856:  DATA 6F,70
00858:  DATA 79,5F
0085A:  DATA 64,61
0085C:  DATA 74,61
0085E:  DATA 5F,5F
00860:  DATA 5F,5F
00862:  DATA 5F,5F
00864:  DATA 5F,5F
00866:  DATA 5F,0D
00868:  DATA 0A,00
0086A:  DATA 45,72
0086C:  DATA 72,6F
0086E:  DATA 72,3A
00870:  DATA 20,4D
00872:  DATA 49,53
00874:  DATA 20,46
00876:  DATA 4D,20
00878:  DATA 69,73
0087A:  DATA 20,6E
0087C:  DATA 6F,74
0087E:  DATA 20,63
00880:  DATA 6F,6E
00882:  DATA 6E,65
00884:  DATA 63,74
00886:  DATA 65,64
00888:  DATA 0D,0A
0088A:  DATA 00,00
0088C:  DATA 45,72
0088E:  DATA 72,6F
00890:  DATA 72,3A
00892:  DATA 20,53
00894:  DATA 4D,46
00896:  DATA 20,69
00898:  DATA 73,20
0089A:  DATA 6E,6F
0089C:  DATA 74,20
0089E:  DATA 63,6F
008A0:  DATA 6E,6E
008A2:  DATA 65,63
008A4:  DATA 74,65
008A6:  DATA 64,0D
008A8:  DATA 0A,00
008AA:  DATA 5B,53
008AC:  DATA 4D,46
008AE:  DATA 20,41
008B0:  DATA 44,44
008B2:  DATA 52,45
008B4:  DATA 53,53
008B6:  DATA 5D,0D
008B8:  DATA 0A,00
008BA:  DATA 09,2D
008BC:  DATA 2D,2D
008BE:  DATA 2D,2D
008C0:  DATA 2D,2D
008C2:  DATA 2D,2D
008C4:  DATA 2D,2D
008C6:  DATA 2D,09
008C8:  DATA 2D,2D
008CA:  DATA 2D,2D
008CC:  DATA 2D,2D
008CE:  DATA 2D,2D
008D0:  DATA 2D,2D
008D2:  DATA 2D,2D
008D4:  DATA 2D,09
008D6:  DATA 2D,2D
008D8:  DATA 2D,2D
008DA:  DATA 2D,2D
008DC:  DATA 2D,2D
008DE:  DATA 2D,2D
008E0:  DATA 2D,2D
008E2:  DATA 2D,0D
008E4:  DATA 0A,00
008E6:  DATA 09,53
008E8:  DATA 54,41
008EA:  DATA 52,54
008EC:  DATA 09,30
008EE:  DATA 78,25
008F0:  DATA 30,38
008F2:  DATA 4C,58
008F4:  DATA 0D,0A
008F6:  DATA 00,00
008F8:  DATA 09,45
008FA:  DATA 4E,44
008FC:  DATA 09,30
008FE:  DATA 78,25
00900:  DATA 30,38
00902:  DATA 4C,58
00904:  DATA 0D,0A
00906:  DATA 00,00
00908:  DATA 09,55
0090A:  DATA 53,45
0090C:  DATA 44,09
0090E:  DATA 30,78
00910:  DATA 25,30
00912:  DATA 38,4C
00914:  DATA 58,0D
00916:  DATA 0A,00
00918:  DATA 09,4E
0091A:  DATA 45,58
0091C:  DATA 54,09
0091E:  DATA 30,78
00920:  DATA 25,30
00922:  DATA 38,4C
00924:  DATA 58,0D
00926:  DATA 0A,00
00928:  DATA 5B,4D
0092A:  DATA 49,53
0092C:  DATA 46,20
0092E:  DATA 41,44
00930:  DATA 44,52
00932:  DATA 45,53
00934:  DATA 53,5D
00936:  DATA 0D,0A
00938:  DATA 00,00
0093A:  DATA 09,2D
0093C:  DATA 2D,2D
0093E:  DATA 2D,2D
00940:  DATA 2D,2D
00942:  DATA 2D,2D
00944:  DATA 2D,2D
00946:  DATA 2D,09
00948:  DATA 2D,2D
0094A:  DATA 2D,2D
0094C:  DATA 2D,2D
0094E:  DATA 2D,2D
00950:  DATA 2D,2D
00952:  DATA 2D,2D
00954:  DATA 2D,09
00956:  DATA 2D,2D
00958:  DATA 2D,2D
0095A:  DATA 2D,2D
0095C:  DATA 2D,2D
0095E:  DATA 2D,2D
00960:  DATA 2D,2D
00962:  DATA 2D,0D
00964:  DATA 0A,00
00966:  DATA 09,53
00968:  DATA 54,41
0096A:  DATA 52,54
0096C:  DATA 09,30
0096E:  DATA 78,25
00970:  DATA 30,38
00972:  DATA 4C,58
00974:  DATA 0D,0A
00976:  DATA 00,00
00978:  DATA 09,45
0097A:  DATA 4E,44
0097C:  DATA 09,30
0097E:  DATA 78,25
00980:  DATA 30,38
00982:  DATA 4C,58
00984:  DATA 0D,0A
00986:  DATA 00,00
00988:  DATA 09,53
0098A:  DATA 52,43
0098C:  DATA 09,30
0098E:  DATA 78,25
00990:  DATA 30,38
00992:  DATA 4C,58
00994:  DATA 0D,0A
00996:  DATA 00,00
00998:  DATA 09,53
0099A:  DATA 49,5A
0099C:  DATA 45,09
0099E:  DATA 30,78
009A0:  DATA 25,30
009A2:  DATA 38,4C
009A4:  DATA 58,0D
009A6:  DATA 0A,00
009A8:  DATA 09,2D
009AA:  DATA 2D,2D
009AC:  DATA 2D,2D
009AE:  DATA 2D,2D
009B0:  DATA 2D,2D
009B2:  DATA 2D,2D
009B4:  DATA 2D,09
009B6:  DATA 2D,2D
009B8:  DATA 2D,2D
009BA:  DATA 2D,2D
009BC:  DATA 2D,2D
009BE:  DATA 2D,2D
009C0:  DATA 2D,2D
009C2:  DATA 2D,09
009C4:  DATA 2D,2D
009C6:  DATA 2D,2D
009C8:  DATA 2D,2D
009CA:  DATA 2D,2D
009CC:  DATA 2D,2D
009CE:  DATA 2D,2D
009D0:  DATA 2D,0D
009D2:  DATA 0A,00
009D4:  DATA 52,65
009D6:  DATA 6D,61
009D8:  DATA 69,6E
009DA:  DATA 69,6E
009DC:  DATA 67,20
009DE:  DATA 73,69
009E0:  DATA 7A,65
009E2:  DATA 20,74
009E4:  DATA 6F,20
009E6:  DATA 77,72
009E8:  DATA 69,74
009EA:  DATA 65,3A
009EC:  DATA 20,25
009EE:  DATA 6C,75
009F0:  DATA 20,62
009F2:  DATA 79,74
009F4:  DATA 65,73
009F6:  DATA 0D,0A
009F8:  DATA 00,00
009FA:  DATA 4D,49
009FC:  DATA 53,46
009FE:  DATA 20,44
00A00:  DATA 41,54
00A02:  DATA 41,0D
00A04:  DATA 0A,00
00A06:  DATA 0D,0A
00A08:  DATA 5F,5F
00A0A:  DATA 5F,5F
00A0C:  DATA 5F,5F
00A0E:  DATA 5F,5F
00A10:  DATA 5F,45
00A12:  DATA 6E,64
00A14:  DATA 20,63
00A16:  DATA 6F,70
00A18:  DATA 79,5F
00A1A:  DATA 64,61
00A1C:  DATA 74,61
00A1E:  DATA 5F,5F
00A20:  DATA 5F,5F
00A22:  DATA 5F,5F
00A24:  DATA 5F,5F
00A26:  DATA 5F,5F
00A28:  DATA 0D,0A
00A2A:  DATA 00,00
00A2C:  DATA 5F,5F
00A2E:  DATA 5F,5F
00A30:  DATA 5F,5F
00A32:  DATA 5F,5F
00A34:  DATA 5F,5F
00A36:  DATA 5F,5F
00A38:  DATA 5F,5F
00A3A:  DATA 5F,5F
00A3C:  DATA 5F,5F
00A3E:  DATA 5F,5F
00A40:  DATA 5F,5F
00A42:  DATA 5F,5F
00A44:  DATA 5F,5F
00A46:  DATA 5F,5F
00A48:  DATA 5F,5F
00A4A:  DATA 5F,0D
00A4C:  DATA 0A,0D
00A4E:  DATA 0A,00
00A50:  DATA 0D,0A
00A52:  DATA 5F,5F
00A54:  DATA 5F,5F
00A56:  DATA 5F,5F
00A58:  DATA 5F,5F
00A5A:  DATA 5F,5F
00A5C:  DATA 5F,5F
00A5E:  DATA 5F,5F
00A60:  DATA 5F,5F
00A62:  DATA 5F,5F
00A64:  DATA 5F,5F
00A66:  DATA 0D,0A
00A68:  DATA 00,00
00A6A:  DATA 5F,5F
00A6C:  DATA 5F,53
00A6E:  DATA 74,61
00A70:  DATA 72,74
00A72:  DATA 20,53
00A74:  DATA 4D,46
00A76:  DATA 20,52
00A78:  DATA 65,61
00A7A:  DATA 64,5F
00A7C:  DATA 5F,5F
00A7E:  DATA 5F,0D
00A80:  DATA 0A,00
00A82:  DATA 45,72
00A84:  DATA 72,6F
00A86:  DATA 72,3A
00A88:  DATA 20,52
00A8A:  DATA 65,61
00A8C:  DATA 64,20
00A8E:  DATA 61,64
00A90:  DATA 64,72
00A92:  DATA 65,73
00A94:  DATA 73,20
00A96:  DATA 30,78
00A98:  DATA 25,30
00A9A:  DATA 38,4C
00A9C:  DATA 58,20
00A9E:  DATA 6F,75
00AA0:  DATA 74,20
00AA2:  DATA 6F,66
00AA4:  DATA 20,53
00AA6:  DATA 4D,46
00AA8:  DATA 20,6D
00AAA:  DATA 69,73
00AAC:  DATA 73,69
00AAE:  DATA 6F,6E
00AB0:  DATA 20,72
00AB2:  DATA 61,6E
00AB4:  DATA 67,65
00AB6:  DATA 20,5B
00AB8:  DATA 30,78
00ABA:  DATA 25,30
00ABC:  DATA 38,4C
00ABE:  DATA 58,20
00AC0:  DATA 2D,20
00AC2:  DATA 30,78
00AC4:  DATA 25,30
00AC6:  DATA 38,4C
00AC8:  DATA 58,29
00ACA:  DATA 0D,0A
00ACC:  DATA 00,00
00ACE:  DATA 57,61
00AD0:  DATA 72,6E
00AD2:  DATA 3A,20
00AD4:  DATA 41,64
00AD6:  DATA 6A,75
00AD8:  DATA 73,74
00ADA:  DATA 20,72
00ADC:  DATA 65,61
00ADE:  DATA 64,20
00AE0:  DATA 73,69
00AE2:  DATA 7A,65
00AE4:  DATA 20,66
00AE6:  DATA 72,6F
00AE8:  DATA 6D,20
00AEA:  DATA 25,6C
00AEC:  DATA 75,20
00AEE:  DATA 74,6F
00AF0:  DATA 20,25
00AF2:  DATA 6C,75
00AF4:  DATA 20,28
00AF6:  DATA 6D,69
00AF8:  DATA 73,73
00AFA:  DATA 69,6F
00AFC:  DATA 6E,20
00AFE:  DATA 65,6E
00B00:  DATA 64,29
00B02:  DATA 0D,0A
00B04:  DATA 00,00
00B06:  DATA 49,6E
00B08:  DATA 66,6F
00B0A:  DATA 3A,20
00B0C:  DATA 4E,6F
00B0E:  DATA 74,68
00B10:  DATA 69,6E
00B12:  DATA 67,20
00B14:  DATA 74,6F
00B16:  DATA 20,72
00B18:  DATA 65,61
00B1A:  DATA 64,20
00B1C:  DATA 28,73
00B1E:  DATA 69,7A
00B20:  DATA 65,3D
00B22:  DATA 30,29
00B24:  DATA 0D,0A
00B26:  DATA 00,00
00B28:  DATA 49,6E
00B2A:  DATA 20,53
00B2C:  DATA 4D,46
00B2E:  DATA 20,52
00B30:  DATA 65,61
00B32:  DATA 64,20
00B34:  DATA 73,6F
00B36:  DATA 75,72
00B38:  DATA 63,65
00B3A:  DATA 20,64
00B3C:  DATA 61,74
00B3E:  DATA 61,20
00B40:  DATA 61,64
00B42:  DATA 64,72
00B44:  DATA 65,73
00B46:  DATA 73,3A
00B48:  DATA 20,25
00B4A:  DATA 4C,58
00B4C:  DATA 0D,0A
00B4E:  DATA 00,00
00B50:  DATA 49,6E
00B52:  DATA 20,53
00B54:  DATA 4D,46
00B56:  DATA 20,52
00B58:  DATA 65,61
00B5A:  DATA 64,20
00B5C:  DATA 64,61
00B5E:  DATA 74,61
00B60:  DATA 20,73
00B62:  DATA 69,7A
00B64:  DATA 65,20
00B66:  DATA 20,20
00B68:  DATA 20,20
00B6A:  DATA 20,20
00B6C:  DATA 20,20
00B6E:  DATA 20,3A
00B70:  DATA 20,25
00B72:  DATA 6C,75
00B74:  DATA 20,28
00B76:  DATA 30,78
00B78:  DATA 25,6C
00B7A:  DATA 78,29
00B7C:  DATA 0D,0A
00B7E:  DATA 0D,0A
00B80:  DATA 00,00
00B82:  DATA 45,72
00B84:  DATA 72,6F
00B86:  DATA 72,3A
00B88:  DATA 20,53
00B8A:  DATA 4D,46
00B8C:  DATA 20,69
00B8E:  DATA 73,20
00B90:  DATA 6E,6F
00B92:  DATA 74,20
00B94:  DATA 63,6F
00B96:  DATA 6E,6E
00B98:  DATA 65,63
00B9A:  DATA 74,65
00B9C:  DATA 64,0D
00B9E:  DATA 0A,00
00BA0:  DATA 52,45
00BA2:  DATA 41,44
00BA4:  DATA 20,44
00BA6:  DATA 41,54
00BA8:  DATA 41,20
00BAA:  DATA 46,52
00BAC:  DATA 4F,4D
00BAE:  DATA 20,53
00BB0:  DATA 4D,46
00BB2:  DATA 2E,2E
00BB4:  DATA 2E,0D
00BB6:  DATA 0A,00
00BB8:  DATA 0D,0A
00BBA:  DATA 5F,5F
00BBC:  DATA 5F,45
00BBE:  DATA 6E,64
00BC0:  DATA 20,53
00BC2:  DATA 4D,46
00BC4:  DATA 20,52
00BC6:  DATA 65,61
00BC8:  DATA 64,5F
00BCA:  DATA 5F,5F
00BCC:  DATA 5F,0D
00BCE:  DATA 0A,00
00BD0:  DATA 5F,5F
00BD2:  DATA 5F,5F
00BD4:  DATA 5F,5F
00BD6:  DATA 5F,5F
00BD8:  DATA 5F,5F
00BDA:  DATA 5F,5F
00BDC:  DATA 5F,5F
00BDE:  DATA 5F,5F
00BE0:  DATA 5F,5F
00BE2:  DATA 5F,5F
00BE4:  DATA 0D,0A
00BE6:  DATA 0D,0A
00BE8:  DATA 00,00
00BEA:  DATA 0D,0A
00BEC:  DATA 5F,5F
00BEE:  DATA 5F,5F
00BF0:  DATA 5F,5F
00BF2:  DATA 5F,5F
00BF4:  DATA 5F,5F
00BF6:  DATA 5F,5F
00BF8:  DATA 5F,5F
00BFA:  DATA 5F,5F
00BFC:  DATA 5F,5F
00BFE:  DATA 5F,5F
00C00:  DATA 0D,0A
00C02:  DATA 00,00
00C04:  DATA 5F,5F
00C06:  DATA 5F,53
00C08:  DATA 74,61
00C0A:  DATA 72,74
00C0C:  DATA 20,73
00C0E:  DATA 6D,66
00C10:  DATA 5F,65
00C12:  DATA 72,61
00C14:  DATA 73,65
00C16:  DATA 5F,5F
00C18:  DATA 5F,5F
00C1A:  DATA 0D,0A
00C1C:  DATA 00,00
00C1E:  DATA 5B,53
00C20:  DATA 4D,46
00C22:  DATA 5D,20
00C24:  DATA 45,72
00C26:  DATA 61,73
00C28:  DATA 65,20
00C2A:  DATA 61,64
00C2C:  DATA 64,72
00C2E:  DATA 65,73
00C30:  DATA 73,20
00C32:  DATA 20,20
00C34:  DATA 3A,20
00C36:  DATA 25,4C
00C38:  DATA 58,0D
00C3A:  DATA 0A,00
00C3C:  DATA 5B,53
00C3E:  DATA 4D,46
00C40:  DATA 5D,20
00C42:  DATA 45,72
00C44:  DATA 61,73
00C46:  DATA 65,20
00C48:  DATA 64,61
00C4A:  DATA 74,61
00C4C:  DATA 20,73
00C4E:  DATA 69,7A
00C50:  DATA 65,20
00C52:  DATA 3A,20
00C54:  DATA 25,6C
00C56:  DATA 75,20
00C58:  DATA 28,30
00C5A:  DATA 78,25
00C5C:  DATA 6C,78
00C5E:  DATA 29,0D
00C60:  DATA 0A,0D
00C62:  DATA 0A,00
00C64:  DATA 45,72
00C66:  DATA 72,6F
00C68:  DATA 72,3A
00C6A:  DATA 20,53
00C6C:  DATA 4D,46
00C6E:  DATA 20,69
00C70:  DATA 73,20
00C72:  DATA 6E,6F
00C74:  DATA 74,20
00C76:  DATA 63,6F
00C78:  DATA 6E,6E
00C7A:  DATA 65,63
00C7C:  DATA 74,65
00C7E:  DATA 64,0D
00C80:  DATA 0A,00
00C82:  DATA 45,72
00C84:  DATA 72,6F
00C86:  DATA 72,3A
00C88:  DATA 20,45
00C8A:  DATA 72,61
00C8C:  DATA 73,65
00C8E:  DATA 20,73
00C90:  DATA 6F,75
00C92:  DATA 72,63
00C94:  DATA 65,20
00C96:  DATA 61,64
00C98:  DATA 64,72
00C9A:  DATA 65,73
00C9C:  DATA 73,20
00C9E:  DATA 30,78
00CA0:  DATA 25,4C
00CA2:  DATA 58,20
00CA4:  DATA 69,73
00CA6:  DATA 20,6F
00CA8:  DATA 75,74
00CAA:  DATA 73,69
00CAC:  DATA 64,65
00CAE:  DATA 20,6D
00CB0:  DATA 69,73
00CB2:  DATA 73,69
00CB4:  DATA 6F,6E
00CB6:  DATA 20,72
00CB8:  DATA 61,6E
00CBA:  DATA 67,65
00CBC:  DATA 20,5B
00CBE:  DATA 30,78
00CC0:  DATA 25,4C
00CC2:  DATA 58,20
00CC4:  DATA 2D,20
00CC6:  DATA 30,78
00CC8:  DATA 25,4C
00CCA:  DATA 58,5D
00CCC:  DATA 0D,0A
00CCE:  DATA 00,00
00CD0:  DATA 45,72
00CD2:  DATA 72,6F
00CD4:  DATA 72,3A
00CD6:  DATA 20,45
00CD8:  DATA 72,61
00CDA:  DATA 73,65
00CDC:  DATA 20,6F
00CDE:  DATA 70,65
00CE0:  DATA 72,61
00CE2:  DATA 74,69
00CE4:  DATA 6F,6E
00CE6:  DATA 20,77
00CE8:  DATA 6F,75
00CEA:  DATA 6C,64
00CEC:  DATA 20,65
00CEE:  DATA 78,63
00CF0:  DATA 65,65
00CF2:  DATA 64,20
00CF4:  DATA 6D,69
00CF6:  DATA 73,73
00CF8:  DATA 69,6F
00CFA:  DATA 6E,20
00CFC:  DATA 65,6E
00CFE:  DATA 64,20
00D00:  DATA 61,64
00D02:  DATA 64,72
00D04:  DATA 65,73
00D06:  DATA 73,20
00D08:  DATA 30,78
00D0A:  DATA 25,4C
00D0C:  DATA 58,0D
00D0E:  DATA 0A,00
00D10:  DATA 4C,69
00D12:  DATA 6D,69
00D14:  DATA 74,69
00D16:  DATA 6E,67
00D18:  DATA 20,65
00D1A:  DATA 72,61
00D1C:  DATA 73,65
00D1E:  DATA 20,73
00D20:  DATA 69,7A
00D22:  DATA 65,20
00D24:  DATA 74,6F
00D26:  DATA 20,73
00D28:  DATA 74,61
00D2A:  DATA 79,20
00D2C:  DATA 77,69
00D2E:  DATA 74,68
00D30:  DATA 69,6E
00D32:  DATA 20,6D
00D34:  DATA 69,73
00D36:  DATA 73,69
00D38:  DATA 6F,6E
00D3A:  DATA 20,62
00D3C:  DATA 6F,75
00D3E:  DATA 6E,64
00D40:  DATA 73,0D
00D42:  DATA 0A,00
00D44:  DATA 45,72
00D46:  DATA 61,73
00D48:  DATA 65,20
00D4A:  DATA 6F,70
00D4C:  DATA 65,72
00D4E:  DATA 61,74
00D50:  DATA 69,6F
00D52:  DATA 6E,20
00D54:  DATA 76,61
00D56:  DATA 6C,69
00D58:  DATA 64,61
00D5A:  DATA 74,65
00D5C:  DATA 64,20
00D5E:  DATA 77,69
00D60:  DATA 74,68
00D62:  DATA 69,6E
00D64:  DATA 20,6D
00D66:  DATA 69,73
00D68:  DATA 73,69
00D6A:  DATA 6F,6E
00D6C:  DATA 20,72
00D6E:  DATA 61,6E
00D70:  DATA 67,65
00D72:  DATA 0D,0A
00D74:  DATA 00,00
00D76:  DATA 45,72
00D78:  DATA 61,73
00D7A:  DATA 65,64
00D7C:  DATA 20,25
00D7E:  DATA 6C,75
00D80:  DATA 20,62
00D82:  DATA 79,74
00D84:  DATA 65,73
00D86:  DATA 20,28
00D88:  DATA 61,6C
00D8A:  DATA 69,67
00D8C:  DATA 6E,65
00D8E:  DATA 64,29
00D90:  DATA 0D,0A
00D92:  DATA 00,00
00D94:  DATA 0D,0A
00D96:  DATA 5F,5F
00D98:  DATA 5F,45
00D9A:  DATA 6E,64
00D9C:  DATA 20,73
00D9E:  DATA 6D,66
00DA0:  DATA 5F,65
00DA2:  DATA 72,61
00DA4:  DATA 73,65
00DA6:  DATA 5F,5F
00DA8:  DATA 5F,5F
00DAA:  DATA 0D,0A
00DAC:  DATA 00,00
00DAE:  DATA 5F,5F
00DB0:  DATA 5F,5F
00DB2:  DATA 5F,5F
00DB4:  DATA 5F,5F
00DB6:  DATA 5F,5F
00DB8:  DATA 5F,5F
00DBA:  DATA 5F,5F
00DBC:  DATA 5F,5F
00DBE:  DATA 5F,5F
00DC0:  DATA 5F,5F
00DC2:  DATA 0D,0A
00DC4:  DATA 0D,0A
00DC6:  DATA 00,00
00DC8:  DATA 45,72
00DCA:  DATA 72,6F
00DCC:  DATA 72,3A
00DCE:  DATA 20,55
00DD0:  DATA 6E,6B
00DD2:  DATA 6E,6F
00DD4:  DATA 77,6E
00DD6:  DATA 20,6D
00DD8:  DATA 69,73
00DDA:  DATA 73,69
00DDC:  DATA 6F,6E
00DDE:  DATA 5F,69
00DE0:  DATA 64,3A
00DE2:  DATA 20,25
00DE4:  DATA 30,32
00DE6:  DATA 58,0D
00DE8:  DATA 0A,00
00DEA:  DATA 55,70
00DEC:  DATA 64,61
00DEE:  DATA 74,65
00DF0:  DATA 64,20
00DF2:  DATA 70,61
00DF4:  DATA 72,74
00DF6:  DATA 69,74
00DF8:  DATA 69,6F
00DFA:  DATA 6E,20
00DFC:  DATA 66,6F
00DFE:  DATA 72,20
00E00:  DATA 6D,69
00E02:  DATA 73,73
00E04:  DATA 69,6F
00E06:  DATA 6E,5F
00E08:  DATA 69,64
00E0A:  DATA 20,25
00E0C:  DATA 30,32
00E0E:  DATA 58,3A
00E10:  DATA 20,75
00E12:  DATA 73,65
00E14:  DATA 64,5F
00E16:  DATA 73,69
00E18:  DATA 7A,65
00E1A:  DATA 3D,25
00E1C:  DATA 6C,64
00E1E:  DATA 2C,20
00E20:  DATA 6C,6F
00E22:  DATA 6F,70
00E24:  DATA 5F,63
00E26:  DATA 6F,75
00E28:  DATA 6E,74
00E2A:  DATA 65,72
00E2C:  DATA 3D,25
00E2E:  DATA 6C,64
00E30:  DATA 0D,0A
00E32:  DATA 00,00
00E34:  DATA 5B,4D
00E36:  DATA 49,53
00E38:  DATA 46,5D
00E3A:  DATA 20,6D
00E3C:  DATA 69,73
00E3E:  DATA 73,69
00E40:  DATA 6F,6E
00E42:  DATA 20,25
00E44:  DATA 75,20
00E46:  DATA 75,6E
00E48:  DATA 63,6F
00E4A:  DATA 70,69
00E4C:  DATA 65,64
00E4E:  DATA 5F,63
00E50:  DATA 6F,75
00E52:  DATA 6E,74
00E54:  DATA 65,72
00E56:  DATA 20,25
00E58:  DATA 30,38
00E5A:  DATA 4C,58
00E5C:  DATA 20,2D
00E5E:  DATA 3E,20
00E60:  DATA 25,30
00E62:  DATA 38,4C
00E64:  DATA 58,20
00E66:  DATA 28,2D
00E68:  DATA 25,6C
00E6A:  DATA 75,29
00E6C:  DATA 0D,0A
00E6E:  DATA 00,00
00E70:  DATA 5B,4D
00E72:  DATA 49,53
00E74:  DATA 46,5D
00E76:  DATA 20,75
00E78:  DATA 70,64
00E7A:  DATA 61,74
00E7C:  DATA 65,5F
00E7E:  DATA 6D,69
00E80:  DATA 73,66
00E82:  DATA 5F,63
00E84:  DATA 6F,75
00E86:  DATA 6E,74
00E88:  DATA 65,72
00E8A:  DATA 73,3A
00E8C:  DATA 20,6D
00E8E:  DATA 69,73
00E90:  DATA 73,69
00E92:  DATA 6F,6E
00E94:  DATA 20,25
00E96:  DATA 75,20
00E98:  DATA 6E,6F
00E9A:  DATA 74,20
00E9C:  DATA 68,61
00E9E:  DATA 6E,64
00EA0:  DATA 6C,65
00EA2:  DATA 64,0D
00EA4:  DATA 0A,00
00EA6:  DATA 5B,4D
00EA8:  DATA 49,53
00EAA:  DATA 46,5D
00EAC:  DATA 20,6D
00EAE:  DATA 69,73
00EB0:  DATA 73,69
00EB2:  DATA 6F,6E
00EB4:  DATA 20,25
00EB6:  DATA 75,20
00EB8:  DATA 75,6E
00EBA:  DATA 63,6F
00EBC:  DATA 70,69
00EBE:  DATA 65,64
00EC0:  DATA 5F,63
00EC2:  DATA 6F,75
00EC4:  DATA 6E,74
00EC6:  DATA 65,72
00EC8:  DATA 20,72
00ECA:  DATA 65,73
00ECC:  DATA 65,74
00ECE:  DATA 0D,0A
00ED0:  DATA 00,00
00ED2:  DATA 5B,4D
00ED4:  DATA 49,53
00ED6:  DATA 46,5D
00ED8:  DATA 20,6D
00EDA:  DATA 69,73
00EDC:  DATA 73,69
00EDE:  DATA 6F,6E
00EE0:  DATA 20,25
00EE2:  DATA 75,20
00EE4:  DATA 73,74
00EE6:  DATA 61,74
00EE8:  DATA 75,73
00EEA:  DATA 3A,20
00EEC:  DATA 75,73
00EEE:  DATA 65,64
00EF0:  DATA 3D,30
00EF2:  DATA 78,25
00EF4:  DATA 30,38
00EF6:  DATA 4C,58
00EF8:  DATA 20,75
00EFA:  DATA 6E,63
00EFC:  DATA 6F,70
00EFE:  DATA 69,65
00F00:  DATA 64,3D
00F02:  DATA 30,78
00F04:  DATA 25,30
00F06:  DATA 38,4C
00F08:  DATA 58,20
00F0A:  DATA 72,31
00F0C:  DATA 3D,30
00F0E:  DATA 78,25
00F10:  DATA 30,32
00F12:  DATA 58,20
00F14:  DATA 72,32
00F16:  DATA 3D,30
00F18:  DATA 78,25
00F1A:  DATA 30,32
00F1C:  DATA 58,0D
00F1E:  DATA 0A,00
00F20:  DATA 5B,4D
00F22:  DATA 49,53
00F24:  DATA 46,5D
00F26:  DATA 20,70
00F28:  DATA 72,69
00F2A:  DATA 6E,74
00F2C:  DATA 20,73
00F2E:  DATA 74,61
00F30:  DATA 74,75
00F32:  DATA 73,3A
00F34:  DATA 20,6D
00F36:  DATA 69,73
00F38:  DATA 73,69
00F3A:  DATA 6F,6E
00F3C:  DATA 20,25
00F3E:  DATA 75,20
00F40:  DATA 6E,6F
00F42:  DATA 74,20
00F44:  DATA 68,61
00F46:  DATA 6E,64
00F48:  DATA 6C,65
00F4A:  DATA 64,0D
00F4C:  DATA 0A,00
00F4E:  DATA 4D,49
00F50:  DATA 53,53
00F52:  DATA 49,4F
00F54:  DATA 4E,20
00F56:  DATA 46,4C
00F58:  DATA 41,53
00F5A:  DATA 48,20
00F5C:  DATA 49,6E
00F5E:  DATA 69,74
00F60:  DATA 69,61
00F62:  DATA 6C,69
00F64:  DATA 7A,65
00F66:  DATA 0D,0A
00F68:  DATA 00,00
00F6A:  DATA 09,5B
00F6C:  DATA 4D,49
00F6E:  DATA 53,20
00F70:  DATA 46,4D
00F72:  DATA 5D,20
00F74:  DATA 43,6F
00F76:  DATA 6E,6E
00F78:  DATA 65,63
00F7A:  DATA 74,65
00F7C:  DATA 64,0D
00F7E:  DATA 0A,00
00F80:  DATA 09,5B
00F82:  DATA 4D,49
00F84:  DATA 53,20
00F86:  DATA 46,4D
00F88:  DATA 5D,20
00F8A:  DATA 4E,6F
00F8C:  DATA 74,20
00F8E:  DATA 43,6F
00F90:  DATA 6E,6E
00F92:  DATA 65,63
00F94:  DATA 74,65
00F96:  DATA 64,0D
00F98:  DATA 0A,00
00F9A:  DATA 09,5B
00F9C:  DATA 53,4D
00F9E:  DATA 46,5D
00FA0:  DATA 20,43
00FA2:  DATA 6F,6E
00FA4:  DATA 6E,65
00FA6:  DATA 63,74
00FA8:  DATA 65,64
00FAA:  DATA 0D,0A
00FAC:  DATA 00,00
00FAE:  DATA 09,5B
00FB0:  DATA 53,4D
00FB2:  DATA 46,5D
00FB4:  DATA 20,4E
00FB6:  DATA 6F,74
00FB8:  DATA 20,43
00FBA:  DATA 6F,6E
00FBC:  DATA 6E,65
00FBE:  DATA 63,74
00FC0:  DATA 65,64
00FC2:  DATA 0D,0A
00FC4:  DATA 00,00
00FC6:  DATA 09,5B
00FC8:  DATA 4D,49
00FCA:  DATA 53,20
00FCC:  DATA 46,4D
00FCE:  DATA 5D,20
00FD0:  DATA 43,52
00FD2:  DATA 43,20
00FD4:  DATA 65,72
00FD6:  DATA 72,6F
00FD8:  DATA 72,20
00FDA:  DATA 2D,3E
00FDC:  DATA 20,69
00FDE:  DATA 6E,69
00FE0:  DATA 74,69
00FE2:  DATA 61,6C
00FE4:  DATA 69,7A
00FE6:  DATA 65,20
00FE8:  DATA 63,6F
00FEA:  DATA 75,6E
00FEC:  DATA 74,65
00FEE:  DATA 72,73
00FF0:  DATA 0D,0A
00FF2:  DATA 00,00
00FF4:  DATA 09,43
00FF6:  DATA 6F,6D
00FF8:  DATA 70,6C
00FFA:  DATA 65,74
00FFC:  DATA 65,0D
00FFE:  DATA 0A,00
01000:  DATA 09,46
01002:  DATA 69,65
01004:  DATA 6C,64
01006:  DATA 09,09
01008:  DATA 43,6F
0100A:  DATA 75,6E
0100C:  DATA 74,65
0100E:  DATA 72,4E
01010:  DATA 61,6D
01012:  DATA 65,09
01014:  DATA 56,61
01016:  DATA 6C,75
01018:  DATA 65,0D
0101A:  DATA 0A,00
0101C:  DATA 09,2D
0101E:  DATA 2D,2D
01020:  DATA 2D,2D
01022:  DATA 2D,2D
01024:  DATA 2D,2D
01026:  DATA 2D,2D
01028:  DATA 2D,09
0102A:  DATA 2D,2D
0102C:  DATA 2D,2D
0102E:  DATA 2D,2D
01030:  DATA 2D,2D
01032:  DATA 2D,2D
01034:  DATA 2D,2D
01036:  DATA 2D,09
01038:  DATA 2D,2D
0103A:  DATA 2D,2D
0103C:  DATA 2D,2D
0103E:  DATA 2D,2D
01040:  DATA 2D,2D
01042:  DATA 2D,2D
01044:  DATA 2D,0D
01046:  DATA 0A,00
01048:  DATA 09,50
0104A:  DATA 49,43
0104C:  DATA 4C,4F
0104E:  DATA 47,09
01050:  DATA 09,55
01052:  DATA 73,65
01054:  DATA 64,09
01056:  DATA 09,30
01058:  DATA 78,25
0105A:  DATA 30,38
0105C:  DATA 4C,58
0105E:  DATA 0D,0A
01060:  DATA 00,00
01062:  DATA 09,09
01064:  DATA 09,55
01066:  DATA 6E,63
01068:  DATA 6F,70
0106A:  DATA 79,65
0106C:  DATA 64,09
0106E:  DATA 30,78
01070:  DATA 25,30
01072:  DATA 38,4C
01074:  DATA 58,0D
01076:  DATA 0A,00
01078:  DATA 09,09
0107A:  DATA 09,52
0107C:  DATA 65,73
0107E:  DATA 65,72
01080:  DATA 76,65
01082:  DATA 09,09
01084:  DATA 30,78
01086:  DATA 25,30
01088:  DATA 32,58
0108A:  DATA 2F,20
0108C:  DATA 30,78
0108E:  DATA 25,30
01090:  DATA 32,58
01092:  DATA 0D,0A
01094:  DATA 00,00
01096:  DATA 09,45
01098:  DATA 4E,56
0109A:  DATA 49,52
0109C:  DATA 4F,09
0109E:  DATA 09,55
010A0:  DATA 73,65
010A2:  DATA 64,09
010A4:  DATA 09,30
010A6:  DATA 78,25
010A8:  DATA 30,38
010AA:  DATA 4C,58
010AC:  DATA 0D,0A
010AE:  DATA 00,00
010B0:  DATA 09,09
010B2:  DATA 09,55
010B4:  DATA 6E,63
010B6:  DATA 6F,70
010B8:  DATA 79,65
010BA:  DATA 64,09
010BC:  DATA 30,78
010BE:  DATA 25,30
010C0:  DATA 38,4C
010C2:  DATA 58,0D
010C4:  DATA 0A,00
010C6:  DATA 09,09
010C8:  DATA 09,52
010CA:  DATA 65,73
010CC:  DATA 65,72
010CE:  DATA 76,65
010D0:  DATA 09,09
010D2:  DATA 30,78
010D4:  DATA 25,30
010D6:  DATA 32,58
010D8:  DATA 2F,20
010DA:  DATA 30,78
010DC:  DATA 25,30
010DE:  DATA 32,58
010E0:  DATA 0D,0A
010E2:  DATA 00,00
010E4:  DATA 09,49
010E6:  DATA 56,31
010E8:  DATA 20,48
010EA:  DATA 45,41
010EC:  DATA 44,45
010EE:  DATA 52,09
010F0:  DATA 55,73
010F2:  DATA 65,64
010F4:  DATA 09,09
010F6:  DATA 30,78
010F8:  DATA 25,30
010FA:  DATA 38,4C
010FC:  DATA 58,0D
010FE:  DATA 0A,00
01100:  DATA 09,09
01102:  DATA 09,55
01104:  DATA 6E,63
01106:  DATA 6F,70
01108:  DATA 79,65
0110A:  DATA 64,09
0110C:  DATA 30,78
0110E:  DATA 25,30
01110:  DATA 38,4C
01112:  DATA 58,0D
01114:  DATA 0A,00
01116:  DATA 09,09
01118:  DATA 09,52
0111A:  DATA 65,73
0111C:  DATA 65,72
0111E:  DATA 76,65
01120:  DATA 09,09
01122:  DATA 30,78
01124:  DATA 25,30
01126:  DATA 32,58
01128:  DATA 2F,20
0112A:  DATA 30,78
0112C:  DATA 25,30
0112E:  DATA 32,58
01130:  DATA 0D,0A
01132:  DATA 00,00
01134:  DATA 09,49
01136:  DATA 56,31
01138:  DATA 20,44
0113A:  DATA 41,54
0113C:  DATA 41,09
0113E:  DATA 55,73
01140:  DATA 65,64
01142:  DATA 09,09
01144:  DATA 30,78
01146:  DATA 25,30
01148:  DATA 38,4C
0114A:  DATA 58,0D
0114C:  DATA 0A,00
0114E:  DATA 09,09
01150:  DATA 09,55
01152:  DATA 6E,63
01154:  DATA 6F,70
01156:  DATA 79,65
01158:  DATA 64,09
0115A:  DATA 30,78
0115C:  DATA 25,30
0115E:  DATA 38,4C
01160:  DATA 58,0D
01162:  DATA 0A,00
01164:  DATA 09,09
01166:  DATA 09,52
01168:  DATA 65,73
0116A:  DATA 65,72
0116C:  DATA 76,65
0116E:  DATA 09,09
01170:  DATA 30,78
01172:  DATA 25,30
01174:  DATA 32,58
01176:  DATA 2F,20
01178:  DATA 30,78
0117A:  DATA 25,30
0117C:  DATA 32,58
0117E:  DATA 0D,0A
01180:  DATA 00,00
01182:  DATA 09,49
01184:  DATA 56,32
01186:  DATA 20,48
01188:  DATA 45,41
0118A:  DATA 44,45
0118C:  DATA 52,09
0118E:  DATA 55,73
01190:  DATA 65,64
01192:  DATA 09,09
01194:  DATA 30,78
01196:  DATA 25,30
01198:  DATA 38,4C
0119A:  DATA 58,0D
0119C:  DATA 0A,00
0119E:  DATA 09,09
011A0:  DATA 09,55
011A2:  DATA 6E,63
011A4:  DATA 6F,70
011A6:  DATA 79,65
011A8:  DATA 64,09
011AA:  DATA 30,78
011AC:  DATA 25,30
011AE:  DATA 38,4C
011B0:  DATA 58,0D
011B2:  DATA 0A,00
011B4:  DATA 09,09
011B6:  DATA 09,52
011B8:  DATA 65,73
011BA:  DATA 65,72
011BC:  DATA 76,65
011BE:  DATA 09,09
011C0:  DATA 30,78
011C2:  DATA 25,30
011C4:  DATA 32,58
011C6:  DATA 2F,20
011C8:  DATA 30,78
011CA:  DATA 25,30
011CC:  DATA 32,58
011CE:  DATA 0D,0A
011D0:  DATA 00,00
011D2:  DATA 09,49
011D4:  DATA 56,32
011D6:  DATA 20,44
011D8:  DATA 41,54
011DA:  DATA 41,09
011DC:  DATA 55,73
011DE:  DATA 65,64
011E0:  DATA 09,09
011E2:  DATA 30,78
011E4:  DATA 25,30
011E6:  DATA 38,4C
011E8:  DATA 58,0D
011EA:  DATA 0A,00
011EC:  DATA 09,09
011EE:  DATA 09,55
011F0:  DATA 6E,63
011F2:  DATA 6F,70
011F4:  DATA 79,65
011F6:  DATA 64,09
011F8:  DATA 30,78
011FA:  DATA 25,30
011FC:  DATA 38,4C
011FE:  DATA 58,0D
01200:  DATA 0A,00
01202:  DATA 09,09
01204:  DATA 09,52
01206:  DATA 65,73
01208:  DATA 65,72
0120A:  DATA 76,65
0120C:  DATA 09,09
0120E:  DATA 30,78
01210:  DATA 25,30
01212:  DATA 32,58
01214:  DATA 2F,20
01216:  DATA 30,78
01218:  DATA 25,30
0121A:  DATA 32,58
0121C:  DATA 0D,0A
0121E:  DATA 00,00
01220:  DATA 09,2D
01222:  DATA 2D,2D
01224:  DATA 2D,2D
01226:  DATA 2D,2D
01228:  DATA 2D,2D
0122A:  DATA 2D,2D
0122C:  DATA 2D,09
0122E:  DATA 2D,2D
01230:  DATA 2D,2D
01232:  DATA 2D,2D
01234:  DATA 2D,2D
01236:  DATA 2D,2D
01238:  DATA 2D,2D
0123A:  DATA 2D,09
0123C:  DATA 2D,2D
0123E:  DATA 2D,2D
01240:  DATA 2D,2D
01242:  DATA 2D,2D
01244:  DATA 2D,2D
01246:  DATA 2D,2D
01248:  DATA 2D,0D
0124A:  DATA 0A,00
0124C:  DATA 41,44
0124E:  DATA 44,52
01250:  DATA 45,53
01252:  DATA 53,20
01254:  DATA 30,78
01256:  DATA 25,30
01258:  DATA 38,4C
0125A:  DATA 58,20
0125C:  DATA 44,41
0125E:  DATA 54,41
01260:  DATA 20,00
01262:  DATA 43,52
01264:  DATA 43,20
01266:  DATA 76,65
01268:  DATA 72,69
0126A:  DATA 66,69
0126C:  DATA 63,61
0126E:  DATA 74,69
01270:  DATA 6F,6E
01272:  DATA 20,70
01274:  DATA 61,73
01276:  DATA 73,65
01278:  DATA 64,20
0127A:  DATA 6F,6E
0127C:  DATA 20,61
0127E:  DATA 74,74
01280:  DATA 65,6D
01282:  DATA 70,74
01284:  DATA 20,25
01286:  DATA 64,0D
01288:  DATA 0A,00
0128A:  DATA 45,72
0128C:  DATA 72,6F
0128E:  DATA 72,3A
01290:  DATA 20,43
01292:  DATA 52,43
01294:  DATA 20,76
01296:  DATA 65,72
01298:  DATA 69,66
0129A:  DATA 69,63
0129C:  DATA 61,74
0129E:  DATA 69,6F
012A0:  DATA 6E,20
012A2:  DATA 66,61
012A4:  DATA 69,6C
012A6:  DATA 65,64
012A8:  DATA 20,61
012AA:  DATA 66,74
012AC:  DATA 65,72
012AE:  DATA 20,25
012B0:  DATA 64,20
012B2:  DATA 61,74
012B4:  DATA 74,65
012B6:  DATA 6D,70
012B8:  DATA 74,73
012BA:  DATA 0D,0A
012BC:  DATA 00,00
012BE:  DATA 0D,0A
012C0:  DATA 5F,5F
012C2:  DATA 5F,5F
012C4:  DATA 5F,5F
012C6:  DATA 5F,5F
012C8:  DATA 5F,5F
012CA:  DATA 5F,5F
012CC:  DATA 5F,5F
012CE:  DATA 5F,5F
012D0:  DATA 5F,5F
012D2:  DATA 5F,5F
012D4:  DATA 5F,5F
012D6:  DATA 5F,5F
012D8:  DATA 5F,5F
012DA:  DATA 5F,5F
012DC:  DATA 5F,5F
012DE:  DATA 0D,0A
012E0:  DATA 5F,5F
012E2:  DATA 5F,5F
012E4:  DATA 5F,53
012E6:  DATA 74,61
012E8:  DATA 72,74
012EA:  DATA 20,65
012EC:  DATA 78,65
012EE:  DATA 63,75
012F0:  DATA 74,65
012F2:  DATA 5F,6D
012F4:  DATA 69,73
012F6:  DATA 73,69
012F8:  DATA 6F,6E
012FA:  DATA 5F,5F
012FC:  DATA 5F,5F
012FE:  DATA 5F,0D
01300:  DATA 0A,0D
01302:  DATA 0A,00
01304:  DATA 43,6F
01306:  DATA 6D,6D
01308:  DATA 61,6E
0130A:  DATA 64,20
0130C:  DATA 49,44
0130E:  DATA 3A,20
01310:  DATA 25,58
01312:  DATA 0D,0A
01314:  DATA 0D,0A
01316:  DATA 00,00
01318:  DATA 09,09
0131A:  DATA 2D,3E
0131C:  DATA 20,49
0131E:  DATA 6E,76
01320:  DATA 61,6C
01322:  DATA 69,64
01324:  DATA 20,43
01326:  DATA 4D,44
01328:  DATA 20,49
0132A:  DATA 44,21
0132C:  DATA 0D,0A
0132E:  DATA 00,00
01330:  DATA 0D,0A
01332:  DATA 5F,5F
01334:  DATA 5F,5F
01336:  DATA 5F,5F
01338:  DATA 45,6E
0133A:  DATA 64,20
0133C:  DATA 65,78
0133E:  DATA 65,63
01340:  DATA 75,74
01342:  DATA 65,5F
01344:  DATA 6D,69
01346:  DATA 73,73
01348:  DATA 69,6F
0134A:  DATA 6E,5F
0134C:  DATA 5F,5F
0134E:  DATA 5F,5F
01350:  DATA 5F,0D
01352:  DATA 0A,5F
01354:  DATA 5F,5F
01356:  DATA 5F,5F
01358:  DATA 5F,5F
0135A:  DATA 5F,5F
0135C:  DATA 5F,5F
0135E:  DATA 5F,5F
01360:  DATA 5F,5F
01362:  DATA 5F,5F
01364:  DATA 5F,5F
01366:  DATA 5F,5F
01368:  DATA 5F,5F
0136A:  DATA 5F,5F
0136C:  DATA 5F,5F
0136E:  DATA 5F,5F
01370:  DATA 5F,5F
01372:  DATA 0D,0A
01374:  DATA 00,00
01376:  DATA 53,74
01378:  DATA 61,72
0137A:  DATA 74,20
0137C:  DATA 65,78
0137E:  DATA 65,63
01380:  DATA 75,74
01382:  DATA 65,5F
01384:  DATA 63,6F
01386:  DATA 6D,6D
01388:  DATA 61,6E
0138A:  DATA 64,0D
0138C:  DATA 0A,00
0138E:  DATA 09,2D
01390:  DATA 3E,20
01392:  DATA 55,70
01394:  DATA 6C,69
01396:  DATA 6E,6B
01398:  DATA 20,63
0139A:  DATA 6F,6D
0139C:  DATA 6D,61
0139E:  DATA 6E,64
013A0:  DATA 0D,0A
013A2:  DATA 00,00
013A4:  DATA 09,20
013A6:  DATA 20,20
013A8:  DATA 54,72
013AA:  DATA 61,6E
013AC:  DATA 73,6D
013AE:  DATA 69,74
013B0:  DATA 20,41
013B2:  DATA 63,6B
013B4:  DATA 6E,6F
013B6:  DATA 6C,65
013B8:  DATA 67,64
013BA:  DATA 65,0D
013BC:  DATA 0A,00
013BE:  DATA 09,2D
013C0:  DATA 3E,20
013C2:  DATA 53,74
013C4:  DATA 61,74
013C6:  DATA 75,73
013C8:  DATA 20,63
013CA:  DATA 68,65
013CC:  DATA 63,6B
013CE:  DATA 0D,0A
013D0:  DATA 00,00
013D2:  DATA 09,20
013D4:  DATA 20,20
013D6:  DATA 54,72
013D8:  DATA 61,6E
013DA:  DATA 73,6D
013DC:  DATA 69,74
013DE:  DATA 20,4D
013E0:  DATA 49,53
013E2:  DATA 20,4D
013E4:  DATA 43,55
013E6:  DATA 20,53
013E8:  DATA 74,61
013EA:  DATA 74,75
013EC:  DATA 73,0D
013EE:  DATA 0A,00
013F0:  DATA 66,69
013F2:  DATA 6E,69
013F4:  DATA 73,68
013F6:  DATA 65,64
013F8:  DATA 20,69
013FA:  DATA 6E,20
013FC:  DATA 73,74
013FE:  DATA 61,74
01400:  DATA 75,73
01402:  DATA 5F,63
01404:  DATA 68,65
01406:  DATA 63,6B
01408:  DATA 0D,0A
0140A:  DATA 00,00
0140C:  DATA 09,2D
0140E:  DATA 3E,20
01410:  DATA 53,4D
01412:  DATA 46,20
01414:  DATA 61,76
01416:  DATA 61,69
01418:  DATA 6C,61
0141A:  DATA 62,6C
0141C:  DATA 65,20
0141E:  DATA 63,68
01420:  DATA 65,63
01422:  DATA 6B,0D
01424:  DATA 0A,00
01426:  DATA 09,20
01428:  DATA 20,20
0142A:  DATA 54,72
0142C:  DATA 61,6E
0142E:  DATA 73,6D
01430:  DATA 69,74
01432:  DATA 20,41
01434:  DATA 63,6B
01436:  DATA 6E,6F
01438:  DATA 77,6C
0143A:  DATA 65,64
0143C:  DATA 67,65
0143E:  DATA 6D,65
01440:  DATA 6E,74
01442:  DATA 0D,0A
01444:  DATA 00,00
01446:  DATA 09,09
01448:  DATA 2D,3E
0144A:  DATA 20,64
0144C:  DATA 65,6E
0144E:  DATA 69,65
01450:  DATA 64,0D
01452:  DATA 0A,00
01454:  DATA 09,09
01456:  DATA 2D,3E
01458:  DATA 20,61
0145A:  DATA 6C,6C
0145C:  DATA 6F,77
0145E:  DATA 65,64
01460:  DATA 0D,0A
01462:  DATA 00,00
01464:  DATA 09,09
01466:  DATA 2D,3E
01468:  DATA 20,44
0146A:  DATA 65,71
0146C:  DATA 75,65
0146E:  DATA 75,65
01470:  DATA 64,3A
01472:  DATA 20,66
01474:  DATA 75,6E
01476:  DATA 63,3D
01478:  DATA 25,75
0147A:  DATA 20,6D
0147C:  DATA 69,73
0147E:  DATA 73,69
01480:  DATA 6F,6E
01482:  DATA 3D,25
01484:  DATA 75,20
01486:  DATA 73,69
01488:  DATA 7A,65
0148A:  DATA 3D,25
0148C:  DATA 6C,64
0148E:  DATA 20,61
01490:  DATA 64,64
01492:  DATA 72,3D
01494:  DATA 25,6C
01496:  DATA 64,0D
01498:  DATA 0A,00
0149A:  DATA 09,09
0149C:  DATA 20,20
0149E:  DATA 20,55
014A0:  DATA 6E,6B
014A2:  DATA 6E,6F
014A4:  DATA 77,6E
014A6:  DATA 20,66
014A8:  DATA 75,6E
014AA:  DATA 63,5F
014AC:  DATA 74,79
014AE:  DATA 70,65
014B0:  DATA 3D,25
014B2:  DATA 75,0D
014B4:  DATA 0A,00
014B6:  DATA 09,09
014B8:  DATA 2D,3E
014BA:  DATA 20,43
014BC:  DATA 6F,6D
014BE:  DATA 70,6C
014C0:  DATA 65,74
014C2:  DATA 65,64
014C4:  DATA 20,25
014C6:  DATA 75,20
014C8:  DATA 6F,70
014CA:  DATA 65,72
014CC:  DATA 61,74
014CE:  DATA 69,6F
014D0:  DATA 6E,73
014D2:  DATA 0D,0A
014D4:  DATA 00,00
014D6:  DATA 53,74
014D8:  DATA 61,72
014DA:  DATA 74,20
014DC:  DATA 4D,4F
014DE:  DATA 44,45
014E0:  DATA 20,4D
014E2:  DATA 45,41
014E4:  DATA 53,20
014E6:  DATA 49,56
014E8:  DATA 0D,0A
014EA:  DATA 00,00
014EC:  DATA 09,53
014EE:  DATA 6C,65
014F0:  DATA 65,70
014F2:  DATA 54,69
014F4:  DATA 6D,65
014F6:  DATA 3A,20
014F8:  DATA 20,20
014FA:  DATA 20,20
014FC:  DATA 20,20
014FE:  DATA 20,25
01500:  DATA 30,34
01502:  DATA 4C,58
01504:  DATA 0D,0A
01506:  DATA 00,00
01508:  DATA 09,43
0150A:  DATA 75,72
0150C:  DATA 72,65
0150E:  DATA 6E,74
01510:  DATA 54,68
01512:  DATA 72,65
01514:  DATA 73,68
01516:  DATA 6F,6C
01518:  DATA 64,3A
0151A:  DATA 20,25
0151C:  DATA 30,34
0151E:  DATA 4C,58
01520:  DATA 0D,0A
01522:  DATA 00,00
01524:  DATA 09,50
01526:  DATA 44,54
01528:  DATA 68,72
0152A:  DATA 65,73
0152C:  DATA 68,6F
0152E:  DATA 6C,64
01530:  DATA 3A,20
01532:  DATA 20,20
01534:  DATA 20,20
01536:  DATA 20,25
01538:  DATA 30,34
0153A:  DATA 4C,58
0153C:  DATA 0D,0A
0153E:  DATA 00,00
01540:  DATA 09,43
01542:  DATA 75,72
01544:  DATA 72,65
01546:  DATA 6E,74
01548:  DATA 4C,69
0154A:  DATA 6D,69
0154C:  DATA 74,3A
0154E:  DATA 20,20
01550:  DATA 20,20
01552:  DATA 20,25
01554:  DATA 30,34
01556:  DATA 4C,58
01558:  DATA 0D,0A
0155A:  DATA 00,00
0155C:  DATA 09,4D
0155E:  DATA 65,61
01560:  DATA 73,75
01562:  DATA 72,65
01564:  DATA 6D,65
01566:  DATA 6E,74
01568:  DATA 54,69
0156A:  DATA 6D,65
0156C:  DATA 3A,20
0156E:  DATA 20,25
01570:  DATA 30,34
01572:  DATA 4C,58
01574:  DATA 0D,0A
01576:  DATA 00,00
01578:  DATA 45,6E
0157A:  DATA 71,75
0157C:  DATA 65,75
0157E:  DATA 65,20
01580:  DATA 46,6C
01582:  DATA 61,73
01584:  DATA 68,20
01586:  DATA 4F,70
01588:  DATA 65,72
0158A:  DATA 61,74
0158C:  DATA 69,6F
0158E:  DATA 6E,0D
01590:  DATA 0A,00
01592:  DATA 4D,69
01594:  DATA 73,73
01596:  DATA 69,6F
01598:  DATA 6E,20
0159A:  DATA 49,44
0159C:  DATA 3A,20
0159E:  DATA 20,20
015A0:  DATA 25,30
015A2:  DATA 32,58
015A4:  DATA 0D,0A
015A6:  DATA 00,00
015A8:  DATA 46,75
015AA:  DATA 6E,63
015AC:  DATA 74,69
015AE:  DATA 6F,6E
015B0:  DATA 20,54
015B2:  DATA 79,70
015B4:  DATA 65,3A
015B6:  DATA 25,30
015B8:  DATA 32,58
015BA:  DATA 0D,0A
015BC:  DATA 00,00
015BE:  DATA 57,72
015C0:  DATA 69,74
015C2:  DATA 65,20
015C4:  DATA 4D,6F
015C6:  DATA 64,65
015C8:  DATA 3A,20
015CA:  DATA 20,20
015CC:  DATA 25,30
015CE:  DATA 32,58
015D0:  DATA 0D,0A
015D2:  DATA 00,00
015D4:  DATA 53,6F
015D6:  DATA 75,72
015D8:  DATA 63,65
015DA:  DATA 20,54
015DC:  DATA 79,70
015DE:  DATA 65,3A
015E0:  DATA 20,20
015E2:  DATA 25,30
015E4:  DATA 32,58
015E6:  DATA 0D,0A
015E8:  DATA 00,00
015EA:  DATA 53,74
015EC:  DATA 61,72
015EE:  DATA 74,20
015F0:  DATA 41,64
015F2:  DATA 64,72
015F4:  DATA 65,73
015F6:  DATA 73,3A
015F8:  DATA 25,30
015FA:  DATA 34,58
015FC:  DATA 0D,0A
015FE:  DATA 00,00
01600:  DATA 53,69
01602:  DATA 7A,65
01604:  DATA 3A,20
01606:  DATA 20,20
01608:  DATA 20,20
0160A:  DATA 20,20
0160C:  DATA 20,20
0160E:  DATA 25,30
01610:  DATA 34,58
01612:  DATA 0D,0A
01614:  DATA 00,00
01616:  DATA 45,6E
01618:  DATA 64,20
0161A:  DATA 4D,4F
0161C:  DATA 44,45
0161E:  DATA 20,4D
01620:  DATA 45,41
01622:  DATA 53,20
01624:  DATA 49,56
01626:  DATA 20,6D
01628:  DATA 69,73
0162A:  DATA 73,69
0162C:  DATA 6F,6E
0162E:  DATA 0D,0A
01630:  DATA 00,00
01632:  DATA 53,74
01634:  DATA 61,72
01636:  DATA 74,20
01638:  DATA 4D,4F
0163A:  DATA 44,45
0163C:  DATA 20,49
0163E:  DATA 56,20
01640:  DATA 44,45
01642:  DATA 42,55
01644:  DATA 47,0D
01646:  DATA 0A,00
01648:  DATA 09,49
0164A:  DATA 44,3A
0164C:  DATA 20,25
0164E:  DATA 30,32
01650:  DATA 58,0D
01652:  DATA 0A,00
01654:  DATA 09,53
01656:  DATA 6C,65
01658:  DATA 65,70
0165A:  DATA 54,69
0165C:  DATA 6D,65
0165E:  DATA 3A,20
01660:  DATA 20,20
01662:  DATA 20,20
01664:  DATA 20,20
01666:  DATA 20,30
01668:  DATA 78,25
0166A:  DATA 30,34
0166C:  DATA 58,0D
0166E:  DATA 0A,00
01670:  DATA 09,4C
01672:  DATA 6F,67
01674:  DATA 43,75
01676:  DATA 72,72
01678:  DATA 54,68
0167A:  DATA 72,65
0167C:  DATA 73,68
0167E:  DATA 6F,6C
01680:  DATA 64,3A
01682:  DATA 20,30
01684:  DATA 78,25
01686:  DATA 30,34
01688:  DATA 58,0D
0168A:  DATA 0A,00
0168C:  DATA 09,50
0168E:  DATA 44,54
01690:  DATA 68,72
01692:  DATA 65,73
01694:  DATA 68,6F
01696:  DATA 6C,64
01698:  DATA 3A,20
0169A:  DATA 20,20
0169C:  DATA 20,20
0169E:  DATA 20,30
016A0:  DATA 78,25
016A2:  DATA 30,34
016A4:  DATA 58,0D
016A6:  DATA 0A,00
016A8:  DATA 09,43
016AA:  DATA 75,72
016AC:  DATA 72,65
016AE:  DATA 6E,74
016B0:  DATA 4C,69
016B2:  DATA 6D,69
016B4:  DATA 74,3A
016B6:  DATA 20,20
016B8:  DATA 20,20
016BA:  DATA 20,30
016BC:  DATA 78,25
016BE:  DATA 30,34
016C0:  DATA 58,0D
016C2:  DATA 0A,00
016C4:  DATA 09,4D
016C6:  DATA 65,61
016C8:  DATA 73,75
016CA:  DATA 72,65
016CC:  DATA 6D,65
016CE:  DATA 6E,74
016D0:  DATA 54,69
016D2:  DATA 6D,65
016D4:  DATA 3A,20
016D6:  DATA 20,30
016D8:  DATA 78,25
016DA:  DATA 30,34
016DC:  DATA 58,0D
016DE:  DATA 0A,00
016E0:  DATA 5B,49
016E2:  DATA 56,44
016E4:  DATA 42,47
016E6:  DATA 5D,20
016E8:  DATA 45,6E
016EA:  DATA 64,20
016EC:  DATA 4D,4F
016EE:  DATA 44,45
016F0:  DATA 20,49
016F2:  DATA 56,20
016F4:  DATA 44,45
016F6:  DATA 42,55
016F8:  DATA 47,0D
016FA:  DATA 0A,00
016FC:  DATA 74,65
016FE:  DATA 6D,70
01700:  DATA 5F,74
01702:  DATA 6F,70
01704:  DATA 2C,20
01706:  DATA 74,65
01708:  DATA 6D,70
0170A:  DATA 5F,62
0170C:  DATA 6F,74
0170E:  DATA 2C,20
01710:  DATA 74,65
01712:  DATA 6D,70
01714:  DATA 5F,6D
01716:  DATA 69,73
01718:  DATA 37,2C
0171A:  DATA 20,70
0171C:  DATA 64,0D
0171E:  DATA 0A,00
01720:  DATA 30,78
01722:  DATA 25,30
01724:  DATA 34,4C
01726:  DATA 58,2C
01728:  DATA 20,30
0172A:  DATA 78,25
0172C:  DATA 30,34
0172E:  DATA 4C,58
01730:  DATA 2C,20
01732:  DATA 30,78
01734:  DATA 25,30
01736:  DATA 34,4C
01738:  DATA 58,2C
0173A:  DATA 20,30
0173C:  DATA 78,25
0173E:  DATA 30,34
01740:  DATA 4C,58
01742:  DATA 0D,0A
01744:  DATA 00,00
01746:  DATA 53,74
01748:  DATA 61,72
0174A:  DATA 74,20
0174C:  DATA 4D,4F
0174E:  DATA 44,45
01750:  DATA 20,4D
01752:  DATA 45,41
01754:  DATA 53,20
01756:  DATA 45,4E
01758:  DATA 56,20
0175A:  DATA 44,45
0175C:  DATA 42,55
0175E:  DATA 47,0D
01760:  DATA 0A,00
01762:  DATA 45,6E
01764:  DATA 64,20
01766:  DATA 4D,4F
01768:  DATA 44,45
0176A:  DATA 20,4D
0176C:  DATA 45,41
0176E:  DATA 53,20
01770:  DATA 45,4E
01772:  DATA 56,20
01774:  DATA 44,45
01776:  DATA 42,55
01778:  DATA 47,0D
0177A:  DATA 0A,00
0177C:  DATA 53,74
0177E:  DATA 61,72
01780:  DATA 74,20
01782:  DATA 46,6C
01784:  DATA 61,73
01786:  DATA 68,20
01788:  DATA 45,72
0178A:  DATA 61,73
0178C:  DATA 65,20
0178E:  DATA 41,6C
01790:  DATA 6C,0D
01792:  DATA 0A,00
01794:  DATA 45,6E
01796:  DATA 64,20
01798:  DATA 46,6C
0179A:  DATA 61,73
0179C:  DATA 68,20
0179E:  DATA 45,72
017A0:  DATA 61,73
017A2:  DATA 65,20
017A4:  DATA 41,6C
017A6:  DATA 6C,0D
017A8:  DATA 0A,00
017AA:  DATA 53,74
017AC:  DATA 61,72
017AE:  DATA 74,20
017B0:  DATA 46,6C
017B2:  DATA 61,73
017B4:  DATA 68,20
017B6:  DATA 45,72
017B8:  DATA 61,73
017BA:  DATA 65,20
017BC:  DATA 31,20
017BE:  DATA 53,65
017C0:  DATA 63,74
017C2:  DATA 6F,72
017C4:  DATA 0D,0A
017C6:  DATA 00,00
017C8:  DATA 09,53
017CA:  DATA 65,63
017CC:  DATA 74,6F
017CE:  DATA 72,20
017D0:  DATA 41,64
017D2:  DATA 64,72
017D4:  DATA 65,73
017D6:  DATA 73,3A
017D8:  DATA 20,30
017DA:  DATA 78,25
017DC:  DATA 30,38
017DE:  DATA 4C,58
017E0:  DATA 0D,0A
017E2:  DATA 00,00
017E4:  DATA 45,6E
017E6:  DATA 64,20
017E8:  DATA 46,6C
017EA:  DATA 61,73
017EC:  DATA 68,20
017EE:  DATA 45,72
017F0:  DATA 61,73
017F2:  DATA 65,20
017F4:  DATA 31,20
017F6:  DATA 53,65
017F8:  DATA 63,74
017FA:  DATA 6F,72
017FC:  DATA 0D,0A
017FE:  DATA 00,00
01800:  DATA 53,74
01802:  DATA 61,72
01804:  DATA 74,20
01806:  DATA 46,6C
01808:  DATA 61,73
0180A:  DATA 68,20
0180C:  DATA 45,72
0180E:  DATA 61,73
01810:  DATA 65,20
01812:  DATA 34,6B
01814:  DATA 42,79
01816:  DATA 74,65
01818:  DATA 20,53
0181A:  DATA 75,62
0181C:  DATA 73,65
0181E:  DATA 63,74
01820:  DATA 6F,72
01822:  DATA 0D,0A
01824:  DATA 00,00
01826:  DATA 09,53
01828:  DATA 75,62
0182A:  DATA 73,65
0182C:  DATA 63,74
0182E:  DATA 6F,72
01830:  DATA 20,41
01832:  DATA 64,64
01834:  DATA 72,65
01836:  DATA 73,73
01838:  DATA 3A,20
0183A:  DATA 30,78
0183C:  DATA 25,30
0183E:  DATA 38,4C
01840:  DATA 58,0D
01842:  DATA 0A,00
01844:  DATA 45,6E
01846:  DATA 64,20
01848:  DATA 46,6C
0184A:  DATA 61,73
0184C:  DATA 68,20
0184E:  DATA 45,72
01850:  DATA 61,73
01852:  DATA 65,20
01854:  DATA 34,6B
01856:  DATA 42,79
01858:  DATA 74,65
0185A:  DATA 20,53
0185C:  DATA 75,62
0185E:  DATA 73,65
01860:  DATA 63,74
01862:  DATA 6F,72
01864:  DATA 0D,0A
01866:  DATA 00,00
01868:  DATA 53,74
0186A:  DATA 61,72
0186C:  DATA 74,20
0186E:  DATA 46,6C
01870:  DATA 61,73
01872:  DATA 68,20
01874:  DATA 45,72
01876:  DATA 61,73
01878:  DATA 65,20
0187A:  DATA 36,34
0187C:  DATA 6B,42
0187E:  DATA 79,74
01880:  DATA 65,20
01882:  DATA 53,75
01884:  DATA 62,73
01886:  DATA 65,63
01888:  DATA 74,6F
0188A:  DATA 72,0D
0188C:  DATA 0A,00
0188E:  DATA 09,53
01890:  DATA 75,62
01892:  DATA 73,65
01894:  DATA 63,74
01896:  DATA 6F,72
01898:  DATA 20,41
0189A:  DATA 64,64
0189C:  DATA 72,65
0189E:  DATA 73,73
018A0:  DATA 3A,20
018A2:  DATA 30,78
018A4:  DATA 25,30
018A6:  DATA 38,4C
018A8:  DATA 58,0D
018AA:  DATA 0A,00
018AC:  DATA 45,6E
018AE:  DATA 64,20
018B0:  DATA 46,6C
018B2:  DATA 61,73
018B4:  DATA 68,20
018B6:  DATA 45,72
018B8:  DATA 61,73
018BA:  DATA 65,20
018BC:  DATA 36,34
018BE:  DATA 6B,42
018C0:  DATA 79,74
018C2:  DATA 65,20
018C4:  DATA 53,75
018C6:  DATA 62,73
018C8:  DATA 65,63
018CA:  DATA 74,6F
018CC:  DATA 72,0D
018CE:  DATA 0A,00
018D0:  DATA 53,74
018D2:  DATA 61,72
018D4:  DATA 74,20
018D6:  DATA 46,6C
018D8:  DATA 61,73
018DA:  DATA 68,20
018DC:  DATA 57,72
018DE:  DATA 69,74
018E0:  DATA 65,20
018E2:  DATA 44,65
018E4:  DATA 6D,6F
018E6:  DATA 0D,0A
018E8:  DATA 00,00
018EA:  DATA 09,4D
018EC:  DATA 4F,44
018EE:  DATA 45,20
018F0:  DATA 20,20
018F2:  DATA 20,20
018F4:  DATA 3A,20
018F6:  DATA 25,30
018F8:  DATA 32,58
018FA:  DATA 0D,0A
018FC:  DATA 00,00
018FE:  DATA 09,41
01900:  DATA 64,64
01902:  DATA 72,65
01904:  DATA 73,73
01906:  DATA 20,20
01908:  DATA 3A,20
0190A:  DATA 30,78
0190C:  DATA 25,30
0190E:  DATA 38,4C
01910:  DATA 58,0D
01912:  DATA 0A,00
01914:  DATA 09,50
01916:  DATA 61,63
01918:  DATA 6B,65
0191A:  DATA 74,4E
0191C:  DATA 75,6D
0191E:  DATA 3A,20
01920:  DATA 30,78
01922:  DATA 25,30
01924:  DATA 34,4C
01926:  DATA 58,0D
01928:  DATA 0A,00
0192A:  DATA 57,72
0192C:  DATA 69,74
0192E:  DATA 65,20
01930:  DATA 44,61
01932:  DATA 74,61
01934:  DATA 0D,0A
01936:  DATA 00,00
01938:  DATA 0D,0A
0193A:  DATA 5B,46
0193C:  DATA 4C,41
0193E:  DATA 53,48
01940:  DATA 5D,20
01942:  DATA 57,72
01944:  DATA 69,74
01946:  DATA 65,20
01948:  DATA 61,64
0194A:  DATA 64,72
0194C:  DATA 65,73
0194E:  DATA 73,20
01950:  DATA 30,78
01952:  DATA 25,30
01954:  DATA 38,4C
01956:  DATA 58,20
01958:  DATA 65,78
0195A:  DATA 63,65
0195C:  DATA 65,64
0195E:  DATA 73,20
01960:  DATA 64,65
01962:  DATA 76,69
01964:  DATA 63,65
01966:  DATA 20,65
01968:  DATA 6E,64
0196A:  DATA 20,30
0196C:  DATA 78,25
0196E:  DATA 30,38
01970:  DATA 4C,58
01972:  DATA 20,2D
01974:  DATA 3E,20
01976:  DATA 61,62
01978:  DATA 6F,72
0197A:  DATA 74,0D
0197C:  DATA 0A,00
0197E:  DATA 0D,0A
01980:  DATA 5B,46
01982:  DATA 4C,41
01984:  DATA 53,48
01986:  DATA 5D,20
01988:  DATA 52,65
0198A:  DATA 61,63
0198C:  DATA 68,65
0198E:  DATA 64,20
01990:  DATA 65,6E
01992:  DATA 64,2E
01994:  DATA 20,50
01996:  DATA 61,72
01998:  DATA 74,69
0199A:  DATA 61,6C
0199C:  DATA 20,77
0199E:  DATA 72,69
019A0:  DATA 74,65
019A2:  DATA 20,25
019A4:  DATA 6C,75
019A6:  DATA 20,62
019A8:  DATA 79,74
019AA:  DATA 65,73
019AC:  DATA 20,28
019AE:  DATA 70,61
019B0:  DATA 63,6B
019B2:  DATA 65,74
019B4:  DATA 20,74
019B6:  DATA 72,75
019B8:  DATA 6E,63
019BA:  DATA 61,74
019BC:  DATA 65,64
019BE:  DATA 29,2E
019C0:  DATA 0D,0A
019C2:  DATA 00,00
019C4:  DATA 45,6E
019C6:  DATA 64,20
019C8:  DATA 46,6C
019CA:  DATA 61,73
019CC:  DATA 68,20
019CE:  DATA 57,72
019D0:  DATA 69,74
019D2:  DATA 65,20
019D4:  DATA 44,65
019D6:  DATA 6D,6F
019D8:  DATA 0D,0A
019DA:  DATA 00,00
019DC:  DATA 53,74
019DE:  DATA 61,72
019E0:  DATA 74,20
019E2:  DATA 46,6C
019E4:  DATA 61,73
019E6:  DATA 68,20
019E8:  DATA 57,72
019EA:  DATA 69,74
019EC:  DATA 65,20
019EE:  DATA 34,6B
019F0:  DATA 42,79
019F2:  DATA 74,65
019F4:  DATA 20,53
019F6:  DATA 75,62
019F8:  DATA 73,65
019FA:  DATA 63,74
019FC:  DATA 6F,72
019FE:  DATA 0D,0A
01A00:  DATA 00,00
01A02:  DATA 45,6E
01A04:  DATA 64,20
01A06:  DATA 46,6C
01A08:  DATA 61,73
01A0A:  DATA 68,20
01A0C:  DATA 57,72
01A0E:  DATA 69,74
01A10:  DATA 65,20
01A12:  DATA 34,6B
01A14:  DATA 42,79
01A16:  DATA 74,65
01A18:  DATA 20,53
01A1A:  DATA 75,62
01A1C:  DATA 73,65
01A1E:  DATA 63,74
01A20:  DATA 6F,72
01A22:  DATA 0D,0A
01A24:  DATA 00,00
01A26:  DATA 53,74
01A28:  DATA 61,72
01A2A:  DATA 74,20
01A2C:  DATA 46,6C
01A2E:  DATA 61,73
01A30:  DATA 68,20
01A32:  DATA 52,65
01A34:  DATA 61,64
01A36:  DATA 0D,0A
01A38:  DATA 00,00
01A3A:  DATA 09,4D
01A3C:  DATA 4F,44
01A3E:  DATA 45,20
01A40:  DATA 20,20
01A42:  DATA 20,20
01A44:  DATA 3A,20
01A46:  DATA 25,30
01A48:  DATA 32,58
01A4A:  DATA 0D,0A
01A4C:  DATA 00,00
01A4E:  DATA 09,41
01A50:  DATA 64,64
01A52:  DATA 72,65
01A54:  DATA 73,73
01A56:  DATA 20,20
01A58:  DATA 3A,20
01A5A:  DATA 30,78
01A5C:  DATA 25,30
01A5E:  DATA 38,4C
01A60:  DATA 58,0D
01A62:  DATA 0A,00
01A64:  DATA 09,50
01A66:  DATA 61,63
01A68:  DATA 6B,65
01A6A:  DATA 74,4E
01A6C:  DATA 75,6D
01A6E:  DATA 3A,20
01A70:  DATA 30,78
01A72:  DATA 25,30
01A74:  DATA 34,4C
01A76:  DATA 58,0D
01A78:  DATA 0A,00
01A7A:  DATA 52,45
01A7C:  DATA 41,44
01A7E:  DATA 20,44
01A80:  DATA 41,54
01A82:  DATA 41,0D
01A84:  DATA 0A,00
01A86:  DATA 4D,69
01A88:  DATA 73,73
01A8A:  DATA 69,6F
01A8C:  DATA 6E,20
01A8E:  DATA 46,6C
01A90:  DATA 61,73
01A92:  DATA 68,20
01A94:  DATA 69,73
01A96:  DATA 20,6E
01A98:  DATA 6F,74
01A9A:  DATA 20,63
01A9C:  DATA 6F,6E
01A9E:  DATA 6E,65
01AA0:  DATA 63,74
01AA2:  DATA 65,64
01AA4:  DATA 0D,0A
01AA6:  DATA 00,00
01AA8:  DATA 5B,46
01AAA:  DATA 4C,41
01AAC:  DATA 53,48
01AAE:  DATA 5D,20
01AB0:  DATA 52,65
01AB2:  DATA 61,64
01AB4:  DATA 20,61
01AB6:  DATA 64,64
01AB8:  DATA 72,65
01ABA:  DATA 73,73
01ABC:  DATA 20,30
01ABE:  DATA 78,25
01AC0:  DATA 30,38
01AC2:  DATA 4C,58
01AC4:  DATA 20,65
01AC6:  DATA 78,63
01AC8:  DATA 65,65
01ACA:  DATA 64,73
01ACC:  DATA 20,64
01ACE:  DATA 65,76
01AD0:  DATA 69,63
01AD2:  DATA 65,20
01AD4:  DATA 65,6E
01AD6:  DATA 64,20
01AD8:  DATA 30,78
01ADA:  DATA 25,30
01ADC:  DATA 38,4C
01ADE:  DATA 58,20
01AE0:  DATA 2D,3E
01AE2:  DATA 20,73
01AE4:  DATA 74,6F
01AE6:  DATA 70,0D
01AE8:  DATA 0A,00
01AEA:  DATA 5B,46
01AEC:  DATA 4C,41
01AEE:  DATA 53,48
01AF0:  DATA 5D,20
01AF2:  DATA 45,6E
01AF4:  DATA 64,20
01AF6:  DATA 72,65
01AF8:  DATA 61,63
01AFA:  DATA 68,65
01AFC:  DATA 64,2E
01AFE:  DATA 20,50
01B00:  DATA 61,72
01B02:  DATA 74,69
01B04:  DATA 61,6C
01B06:  DATA 20,72
01B08:  DATA 65,61
01B0A:  DATA 64,20
01B0C:  DATA 25,6C
01B0E:  DATA 75,20
01B10:  DATA 62,79
01B12:  DATA 74,65
01B14:  DATA 73,2E
01B16:  DATA 0D,0A
01B18:  DATA 00,00
01B1A:  DATA 45,6E
01B1C:  DATA 64,20
01B1E:  DATA 46,6C
01B20:  DATA 61,73
01B22:  DATA 68,20
01B24:  DATA 52,65
01B26:  DATA 61,64
01B28:  DATA 0D,0A
01B2A:  DATA 00,00
01B2C:  DATA 53,74
01B2E:  DATA 61,72
01B30:  DATA 74,20
01B32:  DATA 46,6C
01B34:  DATA 61,73
01B36:  DATA 68,20
01B38:  DATA 52,65
01B3A:  DATA 61,64
01B3C:  DATA 20,41
01B3E:  DATA 64,64
01B40:  DATA 72,65
01B42:  DATA 73,73
01B44:  DATA 0D,0A
01B46:  DATA 00,00
01B48:  DATA 52,65
01B4A:  DATA 61,64
01B4C:  DATA 20,44
01B4E:  DATA 61,74
01B50:  DATA 61,3A
01B52:  DATA 20,25
01B54:  DATA 30,32
01B56:  DATA 58,20
01B58:  DATA 25,30
01B5A:  DATA 32,58
01B5C:  DATA 20,25
01B5E:  DATA 30,32
01B60:  DATA 58,20
01B62:  DATA 25,30
01B64:  DATA 32,58
01B66:  DATA 0D,0A
01B68:  DATA 00,00
01B6A:  DATA 45,6E
01B6C:  DATA 64,20
01B6E:  DATA 46,6C
01B70:  DATA 61,73
01B72:  DATA 68,20
01B74:  DATA 52,65
01B76:  DATA 61,64
01B78:  DATA 20,41
01B7A:  DATA 64,64
01B7C:  DATA 72,65
01B7E:  DATA 73,73
01B80:  DATA 0D,0A
01B82:  DATA 00,00
01B84:  DATA 53,74
01B86:  DATA 61,72
01B88:  DATA 74,20
01B8A:  DATA 46,6C
01B8C:  DATA 61,73
01B8E:  DATA 68,20
01B90:  DATA 45,72
01B92:  DATA 61,73
01B94:  DATA 65,20
01B96:  DATA 61,6E
01B98:  DATA 64,20
01B9A:  DATA 52,65
01B9C:  DATA 73,65
01B9E:  DATA 74,0D
01BA0:  DATA 0A,00
01BA2:  DATA 45,6E
01BA4:  DATA 64,20
01BA6:  DATA 46,6C
01BA8:  DATA 61,73
01BAA:  DATA 68,20
01BAC:  DATA 45,72
01BAE:  DATA 61,73
01BB0:  DATA 65,20
01BB2:  DATA 61,6E
01BB4:  DATA 64,20
01BB6:  DATA 52,65
01BB8:  DATA 73,65
01BBA:  DATA 74,0D
01BBC:  DATA 0A,00
01BBE:  DATA 53,74
01BC0:  DATA 61,72
01BC2:  DATA 74,20
01BC4:  DATA 46,6C
01BC6:  DATA 61,73
01BC8:  DATA 68,20
01BCA:  DATA 53,4D
01BCC:  DATA 46,20
01BCE:  DATA 43,6F
01BD0:  DATA 70,79
01BD2:  DATA 0D,0A
01BD4:  DATA 00,00
01BD6:  DATA 45,6E
01BD8:  DATA 64,20
01BDA:  DATA 46,6C
01BDC:  DATA 61,73
01BDE:  DATA 68,20
01BE0:  DATA 53,4D
01BE2:  DATA 46,20
01BE4:  DATA 43,6F
01BE6:  DATA 70,79
01BE8:  DATA 0D,0A
01BEA:  DATA 00,00
01BEC:  DATA 53,74
01BEE:  DATA 61,72
01BF0:  DATA 74,20
01BF2:  DATA 46,6C
01BF4:  DATA 61,73
01BF6:  DATA 68,20
01BF8:  DATA 53,4D
01BFA:  DATA 46,20
01BFC:  DATA 52,65
01BFE:  DATA 61,64
01C00:  DATA 0D,0A
01C02:  DATA 00,00
01C04:  DATA 09,41
01C06:  DATA 64,64
01C08:  DATA 72,65
01C0A:  DATA 73,73
01C0C:  DATA 20,20
01C0E:  DATA 3A,20
01C10:  DATA 30,78
01C12:  DATA 25,30
01C14:  DATA 38,4C
01C16:  DATA 58,0D
01C18:  DATA 0A,00
01C1A:  DATA 09,50
01C1C:  DATA 61,63
01C1E:  DATA 6B,65
01C20:  DATA 74,4E
01C22:  DATA 75,6D
01C24:  DATA 3A,20
01C26:  DATA 30,78
01C28:  DATA 25,30
01C2A:  DATA 34,4C
01C2C:  DATA 58,0D
01C2E:  DATA 0A,00
01C30:  DATA 52,65
01C32:  DATA 61,64
01C34:  DATA 20,44
01C36:  DATA 61,74
01C38:  DATA 61,0D
01C3A:  DATA 0A,00
01C3C:  DATA 52,65
01C3E:  DATA 6D,61
01C40:  DATA 69,6E
01C42:  DATA 69,6E
01C44:  DATA 67,20
01C46:  DATA 70,61
01C48:  DATA 63,6B
01C4A:  DATA 65,74
01C4C:  DATA 73,20
01C4E:  DATA 74,6F
01C50:  DATA 20,72
01C52:  DATA 65,61
01C54:  DATA 64,3A
01C56:  DATA 20,25
01C58:  DATA 6C,75
01C5A:  DATA 0D,0A
01C5C:  DATA 00,00
01C5E:  DATA 0D,0A
01C60:  DATA 45,6E
01C62:  DATA 64,20
01C64:  DATA 46,6C
01C66:  DATA 61,73
01C68:  DATA 68,20
01C6A:  DATA 53,4D
01C6C:  DATA 46,20
01C6E:  DATA 52,65
01C70:  DATA 61,64
01C72:  DATA 0D,0A
01C74:  DATA 00,00
01C76:  DATA 53,74
01C78:  DATA 61,72
01C7A:  DATA 74,20
01C7C:  DATA 46,6C
01C7E:  DATA 61,73
01C80:  DATA 68,20
01C82:  DATA 53,4D
01C84:  DATA 46,20
01C86:  DATA 45,72
01C88:  DATA 61,73
01C8A:  DATA 65,0D
01C8C:  DATA 0A,00
01C8E:  DATA 45,6E
01C90:  DATA 64,20
01C92:  DATA 46,6C
01C94:  DATA 61,73
01C96:  DATA 68,20
01C98:  DATA 53,4D
01C9A:  DATA 46,20
01C9C:  DATA 45,72
01C9E:  DATA 61,73
01CA0:  DATA 65,0D
01CA2:  DATA 0A,00
01CA4:  DATA 53,74
01CA6:  DATA 61,72
01CA8:  DATA 74,20
01CAA:  DATA 46,6C
01CAC:  DATA 61,73
01CAE:  DATA 68,20
01CB0:  DATA 41,64
01CB2:  DATA 64,72
01CB4:  DATA 65,73
01CB6:  DATA 73,20
01CB8:  DATA 52,65
01CBA:  DATA 73,65
01CBC:  DATA 74,0D
01CBE:  DATA 0A,00
01CC0:  DATA 45,6E
01CC2:  DATA 64,20
01CC4:  DATA 46,6C
01CC6:  DATA 61,73
01CC8:  DATA 68,20
01CCA:  DATA 41,64
01CCC:  DATA 64,72
01CCE:  DATA 65,73
01CD0:  DATA 73,20
01CD2:  DATA 52,65
01CD4:  DATA 73,65
01CD6:  DATA 74,0D
01CD8:  DATA 0A,00
01CDA:  DATA 53,4D
01CDC:  DATA 46,20
01CDE:  DATA 69,73
01CE0:  DATA 20,6E
01CE2:  DATA 6F,74
01CE4:  DATA 20,63
01CE6:  DATA 6F,6E
01CE8:  DATA 6E,65
01CEA:  DATA 63,74
01CEC:  DATA 65,64
01CEE:  DATA 0D,0A
01CF0:  DATA 00,00
01CF2:  DATA 53,74
01CF4:  DATA 61,72
01CF6:  DATA 74,20
01CF8:  DATA 46,6C
01CFA:  DATA 61,73
01CFC:  DATA 68,20
01CFE:  DATA 53,4D
01D00:  DATA 46,20
01D02:  DATA 52,65
01D04:  DATA 61,64
01D06:  DATA 20,46
01D08:  DATA 6F,72
01D0A:  DATA 63,65
01D0C:  DATA 0D,0A
01D0E:  DATA 00,00
01D10:  DATA 09,41
01D12:  DATA 64,64
01D14:  DATA 72,65
01D16:  DATA 73,73
01D18:  DATA 20,20
01D1A:  DATA 3A,20
01D1C:  DATA 30,78
01D1E:  DATA 25,30
01D20:  DATA 38,4C
01D22:  DATA 58,0D
01D24:  DATA 0A,00
01D26:  DATA 09,50
01D28:  DATA 61,63
01D2A:  DATA 6B,65
01D2C:  DATA 74,4E
01D2E:  DATA 75,6D
01D30:  DATA 3A,20
01D32:  DATA 30,78
01D34:  DATA 25,30
01D36:  DATA 34,4C
01D38:  DATA 58,0D
01D3A:  DATA 0A,00
01D3C:  DATA 72,65
01D3E:  DATA 61,64
01D40:  DATA 20,64
01D42:  DATA 61,74
01D44:  DATA 61,0D
01D46:  DATA 0A,00
01D48:  DATA 0D,0A
01D4A:  DATA 45,6E
01D4C:  DATA 64,20
01D4E:  DATA 46,6C
01D50:  DATA 61,73
01D52:  DATA 68,20
01D54:  DATA 53,4D
01D56:  DATA 46,20
01D58:  DATA 52,65
01D5A:  DATA 61,64
01D5C:  DATA 20,46
01D5E:  DATA 6F,72
01D60:  DATA 63,65
01D62:  DATA 0D,0A
01D64:  DATA 00,00
01D66:  DATA 53,74
01D68:  DATA 61,72
01D6A:  DATA 74,20
01D6C:  DATA 53,4D
01D6E:  DATA 46,20
01D70:  DATA 45,72
01D72:  DATA 61,73
01D74:  DATA 65,20
01D76:  DATA 41,6C
01D78:  DATA 6C,0D
01D7A:  DATA 0A,00
01D7C:  DATA 45,6E
01D7E:  DATA 64,20
01D80:  DATA 53,4D
01D82:  DATA 46,20
01D84:  DATA 45,72
01D86:  DATA 61,73
01D88:  DATA 65,20
01D8A:  DATA 41,6C
01D8C:  DATA 6C,0D
01D8E:  DATA 0A,00
01D90:  DATA 53,74
01D92:  DATA 61,72
01D94:  DATA 74,20
01D96:  DATA 53,4D
01D98:  DATA 46,20
01D9A:  DATA 52,65
01D9C:  DATA 73,65
01D9E:  DATA 74,0D
01DA0:  DATA 0A,00
01DA2:  DATA 45,6E
01DA4:  DATA 64,20
01DA6:  DATA 53,4D
01DA8:  DATA 46,20
01DAA:  DATA 52,65
01DAC:  DATA 73,65
01DAE:  DATA 74,0D
01DB0:  DATA 0A,00
01DB2:  DATA 0D,0A
01DB4:  DATA 0D,0A
01DB6:  DATA 0D,0A
01DB8:  DATA 3D,3D
01DBA:  DATA 3D,3D
01DBC:  DATA 3D,3D
01DBE:  DATA 3D,3D
01DC0:  DATA 3D,3D
01DC2:  DATA 3D,3D
01DC4:  DATA 3D,3D
01DC6:  DATA 3D,3D
01DC8:  DATA 3D,3D
01DCA:  DATA 3D,3D
01DCC:  DATA 3D,3D
01DCE:  DATA 3D,3D
01DD0:  DATA 3D,3D
01DD2:  DATA 3D,3D
01DD4:  DATA 3D,3D
01DD6:  DATA 3D,3D
01DD8:  DATA 3D,3D
01DDA:  DATA 3D,3D
01DDC:  DATA 3D,3D
01DDE:  DATA 3D,3D
01DE0:  DATA 3D,3D
01DE2:  DATA 3D,3D
01DE4:  DATA 3D,3D
01DE6:  DATA 3D,3D
01DE8:  DATA 3D,3D
01DEA:  DATA 3D,3D
01DEC:  DATA 3D,3D
01DEE:  DATA 3D,3D
01DF0:  DATA 3D,3D
01DF2:  DATA 3D,3D
01DF4:  DATA 0D,0A
01DF6:  DATA 00,00
01DF8:  DATA 54,68
01DFA:  DATA 69,73
01DFC:  DATA 20,69
01DFE:  DATA 73,20
01E00:  DATA 4D,4F
01E02:  DATA 4D,49
01E04:  DATA 4A,49
01E06:  DATA 20,43
01E08:  DATA 49,47
01E0A:  DATA 53,20
01E0C:  DATA 50,49
01E0E:  DATA 43,20
01E10:  DATA 42,42
01E12:  DATA 4D,20
01E14:  DATA 66,6F
01E16:  DATA 72,20
01E18:  DATA 4D,49
01E1A:  DATA 53,37
01E1C:  DATA 5F,42
01E1E:  DATA 42,4D
01E20:  DATA 36,2E
01E22:  DATA 0D,0A
01E24:  DATA 00,00
01E26:  DATA 4C,61
01E28:  DATA 73,74
01E2A:  DATA 20,75
01E2C:  DATA 70,64
01E2E:  DATA 61,74
01E30:  DATA 65,64
01E32:  DATA 20,6F
01E34:  DATA 6E,20
01E36:  DATA 25,73
01E38:  DATA 20,25
01E3A:  DATA 73,2C
01E3C:  DATA 20,62
01E3E:  DATA 79,20
01E40:  DATA 49,6E
01E42:  DATA 6F,75
01E44:  DATA 65,2E
01E46:  DATA 0D,0A
01E48:  DATA 0D,0A
01E4A:  DATA 00,00
01E4C:  DATA 32,31
01E4E:  DATA 2D,53
01E50:  DATA 65,70
01E52:  DATA 2D,32
01E54:  DATA 35,00
01E56:  DATA 31,33
01E58:  DATA 3A,33
01E5A:  DATA 36,3A
01E5C:  DATA 35,32
01E5E:  DATA 00,00
01E60:  DATA 5F,5F
01E62:  DATA 5F,5F
01E64:  DATA 43,49
01E66:  DATA 47,53
01E68:  DATA 20,50
01E6A:  DATA 49,43
01E6C:  DATA 20,53
01E6E:  DATA 74,61
01E70:  DATA 72,74
01E72:  DATA 20,4F
01E74:  DATA 70,65
01E76:  DATA 72,61
01E78:  DATA 74,69
01E7A:  DATA 6F,6E
01E7C:  DATA 5F,5F
01E7E:  DATA 5F,5F
01E80:  DATA 5F,0D
01E82:  DATA 0A,0D
01E84:  DATA 0A,00
01E86:  DATA 77,61
01E88:  DATA 69,74
01E8A:  DATA 69,6E
01E8C:  DATA 67,20
01E8E:  DATA 66,6F
01E90:  DATA 72,20
01E92:  DATA 42,4F
01E94:  DATA 53,53
01E96:  DATA 20,50
01E98:  DATA 49,43
01E9A:  DATA 20,63
01E9C:  DATA 6F,6D
01E9E:  DATA 6D,61
01EA0:  DATA 6E,64
01EA2:  DATA 00,00
01EA4:  DATA 0D,0A
01EA6:  DATA 77,61
01EA8:  DATA 69,74
01EAA:  DATA 69,6E
01EAC:  DATA 67,20
01EAE:  DATA 66,6F
01EB0:  DATA 72,20
01EB2:  DATA 42,4F
01EB4:  DATA 53,53
01EB6:  DATA 20,50
01EB8:  DATA 49,43
01EBA:  DATA 20,63
01EBC:  DATA 6F,6D
01EBE:  DATA 6D,61
01EC0:  DATA 6E,64
01EC2:  DATA 00,00
01EC4:  DATA 0D,0A
01EC6:  DATA 0D,0A
01EC8:  DATA 3D,3D
01ECA:  DATA 3D,3D
01ECC:  DATA 3D,3D
01ECE:  DATA 0D,0A
01ED0:  DATA 0D,0A
01ED2:  DATA 46,69
01ED4:  DATA 6E,69
01ED6:  DATA 73,68
01ED8:  DATA 65,64
01EDA:  DATA 20,70
01EDC:  DATA 72,6F
01EDE:  DATA 63,65
01EE0:  DATA 73,73
01EE2:  DATA 2E,0D
01EE4:  DATA 0A,57
01EE6:  DATA 61,69
01EE8:  DATA 74,20
01EEA:  DATA 66,6F
01EEC:  DATA 72,20
01EEE:  DATA 42,4F
01EF0:  DATA 53,53
01EF2:  DATA 20,50
01EF4:  DATA 49,43
01EF6:  DATA 20,74
01EF8:  DATA 75,72
01EFA:  DATA 6E,20
01EFC:  DATA 6F,66
01EFE:  DATA 66,20
01F00:  DATA 6D,65
01F02:  DATA 00,00
01F04:  DATA 45,6E
01F06:  DATA 64,20
01F08:  DATA 6D,61
01F0A:  DATA 69,6E
01F0C:  DATA 0D,0A
01F0E:  DATA 00,00
*
01F3E:  TBLRD*+
01F40:  MOVF   FF5,F
01F42:  BTFSC  FD8.2
01F44:  GOTO   1F72
01F48:  MOVFF  FF6,A55
01F4C:  MOVFF  FF7,A56
01F50:  MOVFF  FF8,A57
01F54:  MOVF   FF5,W
01F56:  BTFSS  FA6.6
01F58:  GOTO   1F56
01F5C:  MOVLB  E
01F5E:  MOVWF  xF9
01F60:  MOVFF  A55,FF6
01F64:  MOVFF  A56,FF7
01F68:  MOVFF  A57,FF8
01F6C:  MOVLB  0
01F6E:  GOTO   1F3E
01F72:  RETURN 0
01F74:  TBLRD*+
01F76:  MOVFF  FF6,B4B
01F7A:  MOVFF  FF7,B4C
01F7E:  MOVFF  FF8,B4D
01F82:  MOVF   FF5,W
01F84:  BTFSS  FA6.6
01F86:  GOTO   1F84
01F8A:  MOVLB  E
01F8C:  MOVWF  xF9
01F8E:  MOVFF  B4B,FF6
01F92:  MOVFF  B4C,FF7
01F96:  MOVFF  B4D,FF8
01F9A:  MOVLB  B
01F9C:  DECFSZ x4A,F
01F9E:  BRA    1FA4
01FA0:  BRA    1FAA
01FA2:  MOVLB  0
01FA4:  MOVLB  0
01FA6:  GOTO   1F74
01FAA:  MOVLB  0
01FAC:  RETURN 0
*
02188:  MOVLB  B
0218A:  BTFSS  x4C.7
0218C:  BRA    2194
0218E:  MOVLB  0
02190:  GOTO   21CA
02194:  MOVLW  0F
02196:  MOVWF  00
02198:  SWAPF  x4B,W
0219A:  ANDWF  00,F
0219C:  MOVLW  0A
0219E:  SUBWF  00,W
021A0:  BTFSS  FD8.0
021A2:  BRA    21AA
021A4:  MOVLB  0
021A6:  GOTO   21B4
021AA:  MOVLW  30
021AC:  ADDWF  00,F
021AE:  MOVLB  0
021B0:  GOTO   21BC
021B4:  MOVLB  B
021B6:  MOVF   x4C,W
021B8:  ADDWF  00,F
021BA:  MOVLB  0
021BC:  MOVF   00,W
021BE:  BTFSS  FA6.6
021C0:  GOTO   21BE
021C4:  MOVLB  E
021C6:  MOVWF  xF9
021C8:  MOVLB  0
021CA:  MOVLW  0F
021CC:  MOVLB  B
021CE:  ANDWF  x4B,F
021D0:  MOVLW  0A
021D2:  SUBWF  x4B,W
021D4:  BTFSS  FD8.0
021D6:  BRA    21DE
021D8:  MOVLB  0
021DA:  GOTO   21E6
021DE:  MOVLW  30
021E0:  MOVLB  0
021E2:  GOTO   21EE
021E6:  MOVLB  B
021E8:  BCF    x4C.7
021EA:  MOVF   x4C,W
021EC:  MOVLB  0
021EE:  MOVLB  B
021F0:  ADDWF  x4B,F
021F2:  MOVF   x4B,W
021F4:  MOVLB  0
021F6:  BTFSS  FA6.6
021F8:  GOTO   21F6
021FC:  MOVLB  E
021FE:  MOVWF  xF9
02200:  MOVLB  0
02202:  RETURN 0
*
02720:  MOVLB  B
02722:  MOVF   xAC,W
02724:  ANDLW  07
02726:  MOVWF  00
02728:  RRCF   xAC,W
0272A:  MOVWF  01
0272C:  RRCF   01,F
0272E:  RRCF   01,F
02730:  MOVLW  1F
02732:  ANDWF  01,F
02734:  MOVF   01,W
02736:  ADDWF  xAE,W
02738:  MOVWF  FE9
0273A:  MOVLW  00
0273C:  ADDWFC xAF,W
0273E:  MOVWF  FEA
02740:  CLRF   01
02742:  INCF   01,F
02744:  INCF   00,F
02746:  MOVLB  0
02748:  GOTO   274E
0274C:  RLCF   01,F
0274E:  DECFSZ 00,F
02750:  GOTO   274C
02754:  MOVLB  B
02756:  MOVF   xAD,F
02758:  BTFSS  FD8.2
0275A:  BRA    2762
0275C:  MOVLB  0
0275E:  GOTO   276C
02762:  MOVF   01,W
02764:  IORWF  FEF,F
02766:  MOVLB  0
02768:  GOTO   2772
0276C:  COMF   01,F
0276E:  MOVF   01,W
02770:  ANDWF  FEF,F
02772:  RETURN 0
*
02B68:  TSTFSZ 01
02B6A:  GOTO   2B78
02B6E:  TSTFSZ 02
02B70:  GOTO   2B7A
02B74:  GOTO   2B8A
02B78:  INCF   02,F
02B7A:  MOVFF  00,FEE
02B7E:  DECFSZ 01,F
02B80:  GOTO   2B7A
02B84:  DECFSZ 02,F
02B86:  GOTO   2B7A
02B8A:  RETURN 0
*
05EAE:  BTFSC  FD8.1
05EB0:  GOTO   5EBC
05EB4:  MOVLW  02
05EB6:  MOVWF  FEA
05EB8:  MOVLW  EF
05EBA:  MOVWF  FE9
05EBC:  CLRF   00
05EBE:  CLRF   01
05EC0:  CLRF   02
05EC2:  CLRF   03
05EC4:  MOVLB  2
05EC6:  CLRF   xEF
05EC8:  CLRF   xF0
05ECA:  CLRF   xF1
05ECC:  CLRF   xF2
05ECE:  MOVF   xEE,W
05ED0:  IORWF  xED,W
05ED2:  IORWF  xEC,W
05ED4:  IORWF  xEB,W
05ED6:  BTFSS  FD8.2
05ED8:  BRA    5EE0
05EDA:  MOVLB  0
05EDC:  GOTO   5F70
05EE0:  MOVLB  0
05EE2:  MOVLW  20
05EE4:  MOVLB  2
05EE6:  MOVWF  xF3
05EE8:  MOVLB  0
05EEA:  BCF    FD8.0
05EEC:  MOVLB  2
05EEE:  RLCF   xE7,F
05EF0:  RLCF   xE8,F
05EF2:  RLCF   xE9,F
05EF4:  RLCF   xEA,F
05EF6:  RLCF   xEF,F
05EF8:  RLCF   xF0,F
05EFA:  RLCF   xF1,F
05EFC:  RLCF   xF2,F
05EFE:  MOVF   xEE,W
05F00:  SUBWF  xF2,W
05F02:  BTFSC  FD8.2
05F04:  BRA    5F0C
05F06:  MOVLB  0
05F08:  GOTO   5F2E
05F0C:  MOVF   xED,W
05F0E:  SUBWF  xF1,W
05F10:  BTFSC  FD8.2
05F12:  BRA    5F1A
05F14:  MOVLB  0
05F16:  GOTO   5F2E
05F1A:  MOVF   xEC,W
05F1C:  SUBWF  xF0,W
05F1E:  BTFSC  FD8.2
05F20:  BRA    5F28
05F22:  MOVLB  0
05F24:  GOTO   5F2E
05F28:  MOVF   xEB,W
05F2A:  SUBWF  xEF,W
05F2C:  MOVLB  0
05F2E:  BTFSS  FD8.0
05F30:  GOTO   5F56
05F34:  MOVLB  2
05F36:  MOVF   xEB,W
05F38:  SUBWF  xEF,F
05F3A:  MOVF   xEC,W
05F3C:  BTFSS  FD8.0
05F3E:  INCFSZ xEC,W
05F40:  SUBWF  xF0,F
05F42:  MOVF   xED,W
05F44:  BTFSS  FD8.0
05F46:  INCFSZ xED,W
05F48:  SUBWF  xF1,F
05F4A:  MOVF   xEE,W
05F4C:  BTFSS  FD8.0
05F4E:  INCFSZ xEE,W
05F50:  SUBWF  xF2,F
05F52:  BSF    FD8.0
05F54:  MOVLB  0
05F56:  RLCF   00,F
05F58:  RLCF   01,F
05F5A:  RLCF   02,F
05F5C:  RLCF   03,F
05F5E:  MOVLB  2
05F60:  DECFSZ xF3,F
05F62:  BRA    5F68
05F64:  BRA    5F6E
05F66:  MOVLB  0
05F68:  MOVLB  0
05F6A:  GOTO   5EEA
05F6E:  MOVLB  0
05F70:  MOVFF  2EF,FEF
05F74:  MOVFF  2F0,FEC
05F78:  MOVFF  2F1,FEC
05F7C:  MOVFF  2F2,FEC
05F80:  MOVF   FED,F
05F82:  MOVF   FED,F
05F84:  MOVF   FED,F
05F86:  RETURN 0
05F88:  MOVF   FE9,W
05F8A:  MOVLB  2
05F8C:  MOVWF  xDF
05F8E:  MOVLW  3B
05F90:  MOVWF  xE6
05F92:  MOVLW  9A
05F94:  MOVWF  xE5
05F96:  MOVLW  CA
05F98:  MOVWF  xE4
05F9A:  CLRF   xE3
05F9C:  MOVLW  0A
05F9E:  MOVWF  xE1
05FA0:  MOVLB  0
05FA2:  BSF    FD8.1
05FA4:  MOVLW  02
05FA6:  MOVWF  FEA
05FA8:  MOVLW  DB
05FAA:  MOVWF  FE9
05FAC:  MOVFF  2DE,2EA
05FB0:  MOVFF  2DD,2E9
05FB4:  MOVFF  2DC,2E8
05FB8:  MOVFF  2DB,2E7
05FBC:  MOVFF  2E6,2EE
05FC0:  MOVFF  2E5,2ED
05FC4:  MOVFF  2E4,2EC
05FC8:  MOVFF  2E3,2EB
05FCC:  CALL   5EAE
05FD0:  MOVF   01,W
05FD2:  MOVF   00,F
05FD4:  BTFSS  FD8.2
05FD6:  GOTO   602E
05FDA:  MOVLB  2
05FDC:  MOVF   xE1,W
05FDE:  XORLW  01
05FE0:  BTFSS  FD8.2
05FE2:  BRA    5FEA
05FE4:  MOVLB  0
05FE6:  GOTO   602E
05FEA:  MOVF   xDF,W
05FEC:  BTFSS  FD8.2
05FEE:  BRA    5FF6
05FF0:  MOVLB  0
05FF2:  GOTO   6034
05FF6:  ANDLW  0F
05FF8:  SUBWF  xE1,W
05FFA:  BTFSS  FD8.2
05FFC:  BRA    6004
05FFE:  MOVLB  0
06000:  GOTO   6010
06004:  BTFSS  FD8.0
06006:  BRA    600E
06008:  MOVLB  0
0600A:  GOTO   6046
0600E:  MOVLB  0
06010:  MOVLB  2
06012:  BTFSS  xDF.7
06014:  BRA    601C
06016:  MOVLB  0
06018:  GOTO   6046
0601C:  BTFSS  xDF.6
0601E:  BRA    6026
06020:  MOVLB  0
06022:  GOTO   6034
06026:  MOVLW  20
06028:  MOVLB  0
0602A:  GOTO   6036
0602E:  MOVLB  2
06030:  CLRF   xDF
06032:  MOVLB  0
06034:  MOVLW  30
06036:  ADDWF  00,F
06038:  MOVF   00,W
0603A:  BTFSS  FA6.6
0603C:  GOTO   603A
06040:  MOVLB  E
06042:  MOVWF  xF9
06044:  MOVLB  0
06046:  BCF    FD8.1
06048:  MOVFF  2E6,2EA
0604C:  MOVFF  2E5,2E9
06050:  MOVFF  2E4,2E8
06054:  MOVFF  2E3,2E7
06058:  MOVLB  2
0605A:  CLRF   xEE
0605C:  CLRF   xED
0605E:  CLRF   xEC
06060:  MOVLW  0A
06062:  MOVWF  xEB
06064:  MOVLB  0
06066:  CALL   5EAE
0606A:  MOVFF  03,2E6
0606E:  MOVFF  02,2E5
06072:  MOVFF  01,2E4
06076:  MOVFF  00,2E3
0607A:  MOVLB  2
0607C:  DECFSZ xE1,F
0607E:  BRA    6084
06080:  BRA    608A
06082:  MOVLB  0
06084:  MOVLB  0
06086:  GOTO   5FA2
0608A:  MOVLB  0
0608C:  RETURN 0
*
072D0:  MOVFF  FEA,27E
072D4:  MOVFF  FE9,27D
072D8:  MOVLB  2
072DA:  SWAPF  x77,W
072DC:  IORLW  F0
072DE:  MOVWF  x79
072E0:  ADDWF  x79,F
072E2:  ADDLW  E2
072E4:  MOVWF  x7A
072E6:  ADDLW  32
072E8:  MOVWF  x7C
072EA:  MOVF   x77,W
072EC:  ANDLW  0F
072EE:  ADDWF  x7A,F
072F0:  ADDWF  x7A,F
072F2:  ADDWF  x7C,F
072F4:  ADDLW  E9
072F6:  MOVWF  x7B
072F8:  ADDWF  x7B,F
072FA:  ADDWF  x7B,F
072FC:  SWAPF  x76,W
072FE:  ANDLW  0F
07300:  ADDWF  x7B,F
07302:  ADDWF  x7C,F
07304:  RLCF   x7B,F
07306:  RLCF   x7C,F
07308:  COMF   x7C,F
0730A:  RLCF   x7C,F
0730C:  MOVF   x76,W
0730E:  ANDLW  0F
07310:  ADDWF  x7C,F
07312:  RLCF   x79,F
07314:  MOVLW  07
07316:  MOVWF  x78
07318:  MOVLW  0A
0731A:  MOVLB  0
0731C:  MOVLB  2
0731E:  DECF   x7B,F
07320:  ADDWF  x7C,F
07322:  BTFSC  FD8.0
07324:  BRA    732C
07326:  MOVLB  0
07328:  GOTO   731C
0732C:  MOVLB  0
0732E:  MOVLB  2
07330:  DECF   x7A,F
07332:  ADDWF  x7B,F
07334:  BTFSC  FD8.0
07336:  BRA    733E
07338:  MOVLB  0
0733A:  GOTO   732E
0733E:  MOVLB  0
07340:  MOVLB  2
07342:  DECF   x79,F
07344:  ADDWF  x7A,F
07346:  BTFSC  FD8.0
07348:  BRA    7350
0734A:  MOVLB  0
0734C:  GOTO   7340
07350:  MOVLB  0
07352:  MOVLB  2
07354:  DECF   x78,F
07356:  ADDWF  x79,F
07358:  BTFSC  FD8.0
0735A:  BRA    7362
0735C:  MOVLB  0
0735E:  GOTO   7352
07362:  MOVLW  02
07364:  MOVWF  FEA
07366:  MOVLW  78
07368:  MOVWF  FE9
0736A:  MOVLW  07
0736C:  ANDWF  x7D,W
0736E:  BCF    x7D.6
07370:  MOVLB  0
07372:  ADDWF  FE9,F
07374:  MOVLW  00
07376:  ADDWFC FEA,F
07378:  MOVF   FE9,W
0737A:  SUBLW  7C
0737C:  BTFSS  FD8.2
0737E:  GOTO   7392
07382:  MOVF   FEA,W
07384:  SUBLW  02
07386:  BTFSS  FD8.2
07388:  GOTO   7392
0738C:  MOVLB  2
0738E:  BSF    x7D.6
07390:  MOVLB  0
07392:  MOVF   FEF,W
07394:  MOVWF  00
07396:  BTFSS  FD8.2
07398:  GOTO   73C4
0739C:  MOVLB  2
0739E:  BTFSS  x7D.6
073A0:  BRA    73A8
073A2:  MOVLB  0
073A4:  GOTO   73C4
073A8:  BTFSS  x7D.4
073AA:  BRA    73B2
073AC:  MOVLB  0
073AE:  GOTO   73DE
073B2:  BTFSS  x7D.3
073B4:  BRA    73BC
073B6:  MOVLB  0
073B8:  GOTO   73C4
073BC:  MOVLW  20
073BE:  MOVLB  0
073C0:  GOTO   73CE
073C4:  MOVLB  2
073C6:  BSF    x7D.3
073C8:  BCF    x7D.4
073CA:  MOVLW  30
073CC:  MOVLB  0
073CE:  ADDWF  00,F
073D0:  MOVF   00,W
073D2:  BTFSS  FA6.6
073D4:  GOTO   73D2
073D8:  MOVLB  E
073DA:  MOVWF  xF9
073DC:  MOVLB  0
073DE:  MOVF   FEE,W
073E0:  MOVLB  2
073E2:  BTFSC  x7D.6
073E4:  BRA    73EC
073E6:  MOVLB  0
073E8:  GOTO   7378
073EC:  MOVLB  0
073EE:  GOTO   7608 (RETURN)
*
0CB1E:  MOVLB  A
0CB20:  MOVF   x4A,W
0CB22:  MULWF  x4C
0CB24:  MOVFF  FF3,01
0CB28:  MOVFF  FF4,00
0CB2C:  MULWF  x4D
0CB2E:  MOVF   FF3,W
0CB30:  ADDWF  00,F
0CB32:  MOVF   x4B,W
0CB34:  MULWF  x4C
0CB36:  MOVF   FF3,W
0CB38:  ADDWFC 00,W
0CB3A:  MOVWF  02
0CB3C:  MOVLB  0
0CB3E:  RETURN 0
*
0E4E4:  MOVLB  3
0E4E6:  MOVF   x1D,W
0E4E8:  CLRF   01
0E4EA:  SUBWF  x1C,W
0E4EC:  BTFSS  FD8.0
0E4EE:  BRA    E4F6
0E4F0:  MOVLB  0
0E4F2:  GOTO   E500
0E4F6:  MOVF   x1C,W
0E4F8:  MOVWF  00
0E4FA:  MOVLB  0
0E4FC:  GOTO   E52A
0E500:  CLRF   00
0E502:  MOVLW  08
0E504:  MOVLB  3
0E506:  MOVWF  x1E
0E508:  MOVLB  0
0E50A:  MOVLB  3
0E50C:  RLCF   x1C,F
0E50E:  RLCF   00,F
0E510:  MOVF   x1D,W
0E512:  SUBWF  00,W
0E514:  BTFSC  FD8.0
0E516:  MOVWF  00
0E518:  RLCF   01,F
0E51A:  DECFSZ x1E,F
0E51C:  BRA    E522
0E51E:  BRA    E528
0E520:  MOVLB  0
0E522:  MOVLB  0
0E524:  GOTO   E50A
0E528:  MOVLB  0
0E52A:  RETURN 0
0E52C:  MOVF   01,W
0E52E:  MOVFF  2DB,31C
0E532:  MOVLW  64
0E534:  MOVLB  3
0E536:  MOVWF  x1D
0E538:  MOVLB  0
0E53A:  CALL   E4E4
0E53E:  MOVFF  00,2DB
0E542:  MOVF   01,W
0E544:  MOVLW  30
0E546:  BTFSS  FD8.2
0E548:  GOTO   E56C
0E54C:  MOVLB  2
0E54E:  BTFSC  xDC.1
0E550:  BRA    E558
0E552:  MOVLB  0
0E554:  GOTO   E586
0E558:  BTFSS  xDC.3
0E55A:  BRA    E562
0E55C:  MOVLB  0
0E55E:  GOTO   E586
0E562:  BTFSC  xDC.4
0E564:  MOVLW  20
0E566:  MOVLB  0
0E568:  GOTO   E576
0E56C:  MOVLB  2
0E56E:  BCF    xDC.3
0E570:  BCF    xDC.4
0E572:  BSF    xDC.0
0E574:  MOVLB  0
0E576:  ADDWF  01,F
0E578:  MOVF   01,W
0E57A:  BTFSS  FA6.6
0E57C:  GOTO   E57A
0E580:  MOVLB  E
0E582:  MOVWF  xF9
0E584:  MOVLB  0
0E586:  MOVFF  2DB,31C
0E58A:  MOVLW  0A
0E58C:  MOVLB  3
0E58E:  MOVWF  x1D
0E590:  MOVLB  0
0E592:  CALL   E4E4
0E596:  MOVFF  00,2DB
0E59A:  MOVF   01,W
0E59C:  MOVLW  30
0E59E:  BTFSS  FD8.2
0E5A0:  GOTO   E5C0
0E5A4:  MOVLB  2
0E5A6:  BTFSS  xDC.3
0E5A8:  BRA    E5B0
0E5AA:  MOVLB  0
0E5AC:  GOTO   E5D0
0E5B0:  BTFSC  xDC.0
0E5B2:  BRA    E5BA
0E5B4:  MOVLB  0
0E5B6:  GOTO   E5D0
0E5BA:  BTFSC  xDC.4
0E5BC:  MOVLW  20
0E5BE:  MOVLB  0
0E5C0:  ADDWF  01,F
0E5C2:  MOVF   01,W
0E5C4:  BTFSS  FA6.6
0E5C6:  GOTO   E5C4
0E5CA:  MOVLB  E
0E5CC:  MOVWF  xF9
0E5CE:  MOVLB  0
0E5D0:  MOVLW  30
0E5D2:  MOVLB  2
0E5D4:  ADDWF  xDB,F
0E5D6:  MOVF   xDB,W
0E5D8:  MOVLB  0
0E5DA:  BTFSS  FA6.6
0E5DC:  GOTO   E5DA
0E5E0:  MOVLB  E
0E5E2:  MOVWF  xF9
0E5E4:  MOVLB  0
0E5E6:  RETURN 0
0E5E8:  MOVF   FE9,W
0E5EA:  MOVLB  2
0E5EC:  MOVWF  x39
0E5EE:  BTFSC  x38.7
0E5F0:  BRA    E5F8
0E5F2:  MOVLB  0
0E5F4:  GOTO   E614
0E5F8:  DECF   x39,F
0E5FA:  BSF    x39.5
0E5FC:  COMF   x35,F
0E5FE:  COMF   x36,F
0E600:  COMF   x37,F
0E602:  COMF   x38,F
0E604:  INCF   x35,F
0E606:  BTFSC  FD8.2
0E608:  INCF   x36,F
0E60A:  BTFSC  FD8.2
0E60C:  INCF   x37,F
0E60E:  BTFSC  FD8.2
0E610:  INCF   x38,F
0E612:  MOVLB  0
0E614:  MOVLW  3B
0E616:  MOVLB  2
0E618:  MOVWF  x40
0E61A:  MOVLW  9A
0E61C:  MOVWF  x3F
0E61E:  MOVLW  CA
0E620:  MOVWF  x3E
0E622:  CLRF   x3D
0E624:  MOVLW  0A
0E626:  MOVWF  x3B
0E628:  MOVLB  0
0E62A:  BSF    FD8.1
0E62C:  MOVLW  02
0E62E:  MOVWF  FEA
0E630:  MOVLW  35
0E632:  MOVWF  FE9
0E634:  MOVFF  238,2EA
0E638:  MOVFF  237,2E9
0E63C:  MOVFF  236,2E8
0E640:  MOVFF  235,2E7
0E644:  MOVFF  240,2EE
0E648:  MOVFF  23F,2ED
0E64C:  MOVFF  23E,2EC
0E650:  MOVFF  23D,2EB
0E654:  CALL   5EAE
0E658:  MOVF   01,W
0E65A:  MOVF   00,F
0E65C:  BTFSS  FD8.2
0E65E:  GOTO   E6B6
0E662:  MOVLB  2
0E664:  MOVF   x3B,W
0E666:  XORLW  01
0E668:  BTFSS  FD8.2
0E66A:  BRA    E672
0E66C:  MOVLB  0
0E66E:  GOTO   E6B6
0E672:  MOVF   x39,W
0E674:  BTFSS  FD8.2
0E676:  BRA    E67E
0E678:  MOVLB  0
0E67A:  GOTO   E6BE
0E67E:  ANDLW  0F
0E680:  SUBWF  x3B,W
0E682:  BTFSS  FD8.2
0E684:  BRA    E68C
0E686:  MOVLB  0
0E688:  GOTO   E698
0E68C:  BTFSS  FD8.0
0E68E:  BRA    E696
0E690:  MOVLB  0
0E692:  GOTO   E726
0E696:  MOVLB  0
0E698:  MOVLB  2
0E69A:  BTFSS  x39.7
0E69C:  BRA    E6A4
0E69E:  MOVLB  0
0E6A0:  GOTO   E726
0E6A4:  BTFSS  x39.6
0E6A6:  BRA    E6AE
0E6A8:  MOVLB  0
0E6AA:  GOTO   E6BE
0E6AE:  MOVLW  20
0E6B0:  MOVLB  0
0E6B2:  GOTO   E716
0E6B6:  MOVLW  20
0E6B8:  MOVLB  2
0E6BA:  ANDWF  x39,F
0E6BC:  MOVLB  0
0E6BE:  MOVLB  2
0E6C0:  BTFSC  x39.5
0E6C2:  BRA    E6CA
0E6C4:  MOVLB  0
0E6C6:  GOTO   E6E8
0E6CA:  BCF    x39.5
0E6CC:  MOVF   00,W
0E6CE:  MOVWF  x39
0E6D0:  MOVLW  2D
0E6D2:  MOVLB  0
0E6D4:  BTFSS  FA6.6
0E6D6:  GOTO   E6D4
0E6DA:  MOVLB  E
0E6DC:  MOVWF  xF9
0E6DE:  MOVLB  2
0E6E0:  MOVF   x39,W
0E6E2:  MOVWF  00
0E6E4:  CLRF   x39
0E6E6:  MOVLB  0
0E6E8:  MOVLW  30
0E6EA:  MOVLB  2
0E6EC:  BTFSC  x39.5
0E6EE:  BRA    E6F6
0E6F0:  MOVLB  0
0E6F2:  GOTO   E716
0E6F6:  BCF    x39.5
0E6F8:  MOVF   00,W
0E6FA:  MOVWF  x39
0E6FC:  MOVLW  2D
0E6FE:  MOVLB  0
0E700:  BTFSS  FA6.6
0E702:  GOTO   E700
0E706:  MOVLB  E
0E708:  MOVWF  xF9
0E70A:  MOVLB  2
0E70C:  MOVF   x39,W
0E70E:  MOVWF  00
0E710:  CLRF   x39
0E712:  MOVLW  30
0E714:  MOVLB  0
0E716:  ADDWF  00,F
0E718:  MOVF   00,W
0E71A:  BTFSS  FA6.6
0E71C:  GOTO   E71A
0E720:  MOVLB  E
0E722:  MOVWF  xF9
0E724:  MOVLB  0
0E726:  BCF    FD8.1
0E728:  MOVFF  240,2EA
0E72C:  MOVFF  23F,2E9
0E730:  MOVFF  23E,2E8
0E734:  MOVFF  23D,2E7
0E738:  MOVLB  2
0E73A:  CLRF   xEE
0E73C:  CLRF   xED
0E73E:  CLRF   xEC
0E740:  MOVLW  0A
0E742:  MOVWF  xEB
0E744:  MOVLB  0
0E746:  CALL   5EAE
0E74A:  MOVFF  03,240
0E74E:  MOVFF  02,23F
0E752:  MOVFF  01,23E
0E756:  MOVFF  00,23D
0E75A:  MOVLB  2
0E75C:  DECFSZ x3B,F
0E75E:  BRA    E764
0E760:  BRA    E76A
0E762:  MOVLB  0
0E764:  MOVLB  0
0E766:  GOTO   E62A
0E76A:  MOVLB  0
0E76C:  RETURN 0
*
0EBC6:  MOVLW  20
0EBC8:  MOVLB  3
0EBCA:  BTFSS  x17.4
0EBCC:  MOVLW  30
0EBCE:  MOVWF  x18
0EBD0:  MOVFF  316,00
0EBD4:  BTFSC  00.7
0EBD6:  BRA    EBDE
0EBD8:  MOVLB  0
0EBDA:  GOTO   EBF0
0EBDE:  COMF   00,F
0EBE0:  INCF   00,F
0EBE2:  MOVFF  00,316
0EBE6:  MOVLW  2D
0EBE8:  MOVWF  x18
0EBEA:  BSF    x17.7
0EBEC:  BSF    x17.0
0EBEE:  MOVLB  0
0EBF0:  MOVF   01,W
0EBF2:  MOVFF  316,31C
0EBF6:  MOVLW  64
0EBF8:  MOVLB  3
0EBFA:  MOVWF  x1D
0EBFC:  MOVLB  0
0EBFE:  CALL   E4E4
0EC02:  MOVFF  00,316
0EC06:  MOVLW  30
0EC08:  ADDWF  01,W
0EC0A:  MOVLB  3
0EC0C:  MOVWF  x19
0EC0E:  MOVFF  316,31C
0EC12:  MOVLW  0A
0EC14:  MOVWF  x1D
0EC16:  MOVLB  0
0EC18:  CALL   E4E4
0EC1C:  MOVLW  30
0EC1E:  ADDWF  00,W
0EC20:  MOVLB  3
0EC22:  MOVWF  x1B
0EC24:  MOVLW  30
0EC26:  ADDWF  01,W
0EC28:  MOVWF  x1A
0EC2A:  MOVFF  318,00
0EC2E:  MOVLB  0
0EC30:  MOVLW  30
0EC32:  MOVLB  3
0EC34:  SUBWF  x19,W
0EC36:  BTFSS  FD8.2
0EC38:  BRA    EC40
0EC3A:  MOVLB  0
0EC3C:  GOTO   EC4C
0EC40:  BSF    x17.1
0EC42:  BTFSC  x17.7
0EC44:  BSF    x17.2
0EC46:  MOVLB  0
0EC48:  GOTO   EC8C
0EC4C:  MOVFF  318,319
0EC50:  MOVLW  20
0EC52:  MOVLB  3
0EC54:  MOVWF  x18
0EC56:  MOVLW  30
0EC58:  SUBWF  x1A,W
0EC5A:  BTFSS  FD8.2
0EC5C:  BRA    EC64
0EC5E:  MOVLB  0
0EC60:  GOTO   EC70
0EC64:  BSF    x17.0
0EC66:  BTFSC  x17.7
0EC68:  BSF    x17.1
0EC6A:  MOVLB  0
0EC6C:  GOTO   EC8C
0EC70:  BTFSC  FD8.2
0EC72:  BRA    EC7A
0EC74:  MOVLB  3
0EC76:  BSF    x17.0
0EC78:  MOVLB  0
0EC7A:  BTFSS  FD8.2
0EC7C:  GOTO   EC8C
0EC80:  MOVFF  319,31A
0EC84:  MOVLW  20
0EC86:  MOVLB  3
0EC88:  MOVWF  x19
0EC8A:  MOVLB  0
0EC8C:  MOVLB  3
0EC8E:  BTFSS  x17.2
0EC90:  BRA    EC98
0EC92:  MOVLB  0
0EC94:  GOTO   ECB2
0EC98:  BTFSS  x17.1
0EC9A:  BRA    ECA2
0EC9C:  MOVLB  0
0EC9E:  GOTO   ECC4
0ECA2:  BTFSS  x17.0
0ECA4:  BRA    ECAC
0ECA6:  MOVLB  0
0ECA8:  GOTO   ECD6
0ECAC:  MOVLB  0
0ECAE:  GOTO   ECE8
0ECB2:  MOVLB  3
0ECB4:  MOVF   x18,W
0ECB6:  MOVLB  0
0ECB8:  BTFSS  FA6.6
0ECBA:  GOTO   ECB8
0ECBE:  MOVLB  E
0ECC0:  MOVWF  xF9
0ECC2:  MOVLB  0
0ECC4:  MOVLB  3
0ECC6:  MOVF   x19,W
0ECC8:  MOVLB  0
0ECCA:  BTFSS  FA6.6
0ECCC:  GOTO   ECCA
0ECD0:  MOVLB  E
0ECD2:  MOVWF  xF9
0ECD4:  MOVLB  0
0ECD6:  MOVLB  3
0ECD8:  MOVF   x1A,W
0ECDA:  MOVLB  0
0ECDC:  BTFSS  FA6.6
0ECDE:  GOTO   ECDC
0ECE2:  MOVLB  E
0ECE4:  MOVWF  xF9
0ECE6:  MOVLB  0
0ECE8:  MOVLB  3
0ECEA:  MOVF   x1B,W
0ECEC:  MOVLB  0
0ECEE:  BTFSS  FA6.6
0ECF0:  GOTO   ECEE
0ECF4:  MOVLB  E
0ECF6:  MOVWF  xF9
0ECF8:  MOVLB  0
0ECFA:  RETURN 0
.................... 
.................... #list
.................... 
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
*
01F10:  MOVLW  0B
01F12:  MOVWF  FEA
01F14:  MOVLW  A6
01F16:  MOVWF  FE9
01F18:  MOVF   FEF,W
01F1A:  BTFSC  FD8.2
01F1C:  GOTO   1F3C
01F20:  MOVLW  05
01F22:  MOVWF  01
01F24:  CLRF   00
01F26:  DECFSZ 00,F
01F28:  BRA    1F26
01F2A:  DECFSZ 01,F
01F2C:  BRA    1F24
01F2E:  MOVLW  2E
01F30:  MOVWF  00
01F32:  DECFSZ 00,F
01F34:  BRA    1F32
01F36:  BRA    1F38
01F38:  DECFSZ FEF,F
01F3A:  BRA    1F20
01F3C:  RETURN 0
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
*
001DA:  BTFSS  FA6.5
001DC:  GOTO   01DA
001E0:  MOVLB  F
001E2:  MOVF   x2F,W
001E4:  MOVWF  1B
001E6:  MOVLB  0
001E8:  MOVLB  F
001EA:  MOVF   x2A,W
001EC:  MOVWF  01
001EE:  BTFSC  1B.1
001F0:  BRA    01F8
001F2:  MOVLB  0
001F4:  GOTO   01FC
001F8:  BCF    x2F.4
001FA:  BSF    x2F.4
001FC:  MOVLB  0
001FE:  GOTO   0238 (RETURN)
*
0545C:  BTFSS  FA6.4
0545E:  GOTO   545C
05462:  MOVLB  F
05464:  MOVWF  x29
05466:  MOVLB  0
05468:  GOTO   549E (RETURN)
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
*
027F0:  MOVLB  B
027F2:  MOVF   xC9,W
027F4:  SUBLW  08
027F6:  BTFSS  FD8.2
027F8:  BRA    2800
027FA:  MOVLB  0
027FC:  GOTO   2818
02800:  MOVWF  xCB
02802:  MOVLB  0
02804:  MOVLB  B
02806:  RLCF   xC8,F
02808:  DECFSZ xCB,F
0280A:  BRA    2810
0280C:  BRA    2816
0280E:  MOVLB  0
02810:  MOVLB  0
02812:  GOTO   2804
02816:  MOVLB  0
02818:  BSF    F92.1
0281A:  BCF    F92.0
0281C:  BCF    F92.3
0281E:  BCF    F89.3
02820:  MOVFF  BC9,BCB
02824:  MOVLB  B
02826:  BTFSS  xC8.7
02828:  BCF    F89.0
0282A:  BTFSC  xC8.7
0282C:  BSF    F89.0
0282E:  RLCF   xC8,F
02830:  BSF    F89.3
02832:  MOVLW  02
02834:  MOVWF  xCC
02836:  MOVLB  0
02838:  MOVLB  B
0283A:  DECFSZ xCC,F
0283C:  BRA    2842
0283E:  BRA    2848
02840:  MOVLB  0
02842:  MOVLB  0
02844:  GOTO   2838
02848:  RLCF   01,F
0284A:  BTFSS  F80.1
0284C:  BCF    01.0
0284E:  BTFSC  F80.1
02850:  BSF    01.0
02852:  BCF    F89.3
02854:  MOVLB  0
02856:  BRA    2858
02858:  MOVLB  B
0285A:  DECFSZ xCB,F
0285C:  BRA    2862
0285E:  BRA    2868
02860:  MOVLB  0
02862:  MOVLB  0
02864:  GOTO   2824
02868:  MOVLB  0
0286A:  RETURN 0
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
*
02774:  MOVLB  B
02776:  MOVF   xC9,W
02778:  SUBLW  08
0277A:  BTFSS  FD8.2
0277C:  BRA    2784
0277E:  MOVLB  0
02780:  GOTO   279C
02784:  MOVWF  xCB
02786:  MOVLB  0
02788:  MOVLB  B
0278A:  RLCF   xC8,F
0278C:  DECFSZ xCB,F
0278E:  BRA    2794
02790:  BRA    279A
02792:  MOVLB  0
02794:  MOVLB  0
02796:  GOTO   2788
0279A:  MOVLB  0
0279C:  BSF    F96.0
0279E:  BCF    F96.6
027A0:  BCF    F96.1
027A2:  BCF    F8D.1
027A4:  MOVFF  BC9,BCB
027A8:  MOVLB  B
027AA:  BTFSS  xC8.7
027AC:  BCF    F8D.6
027AE:  BTFSC  xC8.7
027B0:  BSF    F8D.6
027B2:  RLCF   xC8,F
027B4:  BSF    F8D.1
027B6:  MOVLW  02
027B8:  MOVWF  xCC
027BA:  MOVLB  0
027BC:  MOVLB  B
027BE:  DECFSZ xCC,F
027C0:  BRA    27C6
027C2:  BRA    27CC
027C4:  MOVLB  0
027C6:  MOVLB  0
027C8:  GOTO   27BC
027CC:  RLCF   01,F
027CE:  BTFSS  F84.0
027D0:  BCF    01.0
027D2:  BTFSC  F84.0
027D4:  BSF    01.0
027D6:  BCF    F8D.1
027D8:  MOVLB  0
027DA:  BRA    27DC
027DC:  MOVLB  B
027DE:  DECFSZ xCB,F
027E0:  BRA    27E6
027E2:  BRA    27EC
027E4:  MOVLB  0
027E6:  MOVLB  0
027E8:  GOTO   27A8
027EC:  MOVLB  0
027EE:  RETURN 0
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
*
0208C:  MOVLB  A
0208E:  MOVF   x7E,W
02090:  SUBLW  10
02092:  BTFSS  FD8.2
02094:  BRA    209C
02096:  MOVLB  0
02098:  GOTO   20B6
0209C:  MOVWF  x80
0209E:  MOVLB  0
020A0:  MOVLB  A
020A2:  RLCF   x7C,F
020A4:  RLCF   x7D,F
020A6:  DECFSZ x80,F
020A8:  BRA    20AE
020AA:  BRA    20B4
020AC:  MOVLB  0
020AE:  MOVLB  0
020B0:  GOTO   20A0
020B4:  MOVLB  0
020B6:  BSF    F93.4
020B8:  BCF    F93.5
020BA:  BCF    F93.2
020BC:  BSF    F8A.2
020BE:  MOVFF  A7E,A80
020C2:  MOVLB  A
020C4:  BTFSS  x7D.7
020C6:  BCF    F8A.5
020C8:  BTFSC  x7D.7
020CA:  BSF    F8A.5
020CC:  RLCF   x7C,F
020CE:  RLCF   x7D,F
020D0:  BCF    F8A.2
020D2:  MOVLB  0
020D4:  BRA    20D6
020D6:  BRA    20D8
020D8:  RLCF   01,F
020DA:  RLCF   02,F
020DC:  BTFSS  F81.4
020DE:  BCF    01.0
020E0:  BTFSC  F81.4
020E2:  BSF    01.0
020E4:  BSF    F8A.2
020E6:  NOP   
020E8:  MOVLB  A
020EA:  DECFSZ x80,F
020EC:  BRA    20F2
020EE:  BRA    20F8
020F0:  MOVLB  0
020F2:  MOVLB  0
020F4:  GOTO   20C2
020F8:  MOVLB  0
020FA:  RETURN 0
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
*
02460:  MOVLB  A
02462:  MOVF   x69,W
02464:  SUBLW  10
02466:  BTFSS  FD8.2
02468:  BRA    2470
0246A:  MOVLB  0
0246C:  GOTO   248A
02470:  MOVWF  x6B
02472:  MOVLB  0
02474:  MOVLB  A
02476:  RLCF   x67,F
02478:  RLCF   x68,F
0247A:  DECFSZ x6B,F
0247C:  BRA    2482
0247E:  BRA    2488
02480:  MOVLB  0
02482:  MOVLB  0
02484:  GOTO   2474
02488:  MOVLB  0
0248A:  BCF    F95.4
0248C:  BCF    F95.5
0248E:  BSF    F8C.5
02490:  MOVFF  A69,A6B
02494:  MOVLB  A
02496:  BTFSS  x68.7
02498:  BCF    F8C.4
0249A:  BTFSC  x68.7
0249C:  BSF    F8C.4
0249E:  RLCF   x67,F
024A0:  RLCF   x68,F
024A2:  BCF    F8C.5
024A4:  MOVLW  04
024A6:  MOVWF  x6C
024A8:  MOVLB  0
024AA:  MOVLB  A
024AC:  DECFSZ x6C,F
024AE:  BRA    24B4
024B0:  BRA    24BA
024B2:  MOVLB  0
024B4:  MOVLB  0
024B6:  GOTO   24AA
024BA:  BSF    F8C.5
024BC:  NOP   
024BE:  DECFSZ x6B,F
024C0:  BRA    24C6
024C2:  BRA    24CC
024C4:  MOVLB  0
024C6:  MOVLB  0
024C8:  GOTO   2494
024CC:  MOVLB  0
024CE:  RETURN 0
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル2: ハードウェア抽象化層  
.................... #include "hal/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... 
.................... unsigned int32 get_current_msec();
.................... void set_current_msec(unsigned int32 msec);
.................... void add_current_msec(unsigned int32 msec);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "hal/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "hal/gpio.h"
.................... #ifndef GPIO_H
.................... #define GPIO_H
.................... 
.................... void gpio_init();
.................... void enable_negative_power();
.................... void disable_negative_power();
.................... void connect_port1();
.................... void disconnect_port1();
.................... void connect_port2();
.................... void disconnect_port2();
.................... 
.................... 
.................... // 
.................... void connect_negative_power1(int1 state);
.................... void connect_negative_power2(int1 state);
.................... #endif // GPIO_H
.................... 
.................... #include "device_driver/ad7490_driver.h"
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "device_driver/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル3: 基本ライブラリヘッダー（型定義・通信・ツール）
.................... #include "../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/tool/mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x06AA1FFF
.................... #define CIGS_ENVIRO_START_ADDRESS 0x06AA2000
.................... #define CIGS_ENVIRO_END_ADDRESS 0x06B41FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS 0x06B42000
.................... #define CIGS_IV1_HEADER_END_ADDRESS 0x06BE1FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS 0x06BE2000
.................... #define CIGS_IV1_DATA_END_ADDRESS 0x06FE2FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS 0x06FE3000
.................... #define CIGS_IV2_HEADER_END_ADDRESS 0x07082FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS 0x07083000
.................... #define CIGS_IV2_DATA_END_ADDRESS 0x07483FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... // レベル4: デバイスドライバヘッダー
.................... #include "../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/device/ad7490.h"
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // レベル5: 通信ライブラリヘッダー
.................... #include "../lib/communication/communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // レベル6: コア機能ヘッダー
.................... #include "domain/mmj_cigs_iv.h"
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "domain/mmj_cigs_flash.h"
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t flash_counter_table[];
.................... extern FlashCounter_t *flash_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "domain/mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル7: アプリケーションヘッダー
.................... #include "application/mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "application/mmj_cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_DEBUG 0xA3
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "application/mmj_cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... //==============================================================================
.................... // .cファイル統合（CCS C単一コンパイル単位）
.................... //==============================================================================
.................... 
.................... // ハードウェア層実装ファイル
.................... // 実装は各 .c からビルドするためヘッダーでの取り込みは不要。必要なら下記のように直下参照に修正。
.................... #include "hal/timer.c"
.................... #include "timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... 
.................... unsigned int32 get_current_msec();
.................... void set_current_msec(unsigned int32 msec);
.................... void add_current_msec(unsigned int32 msec);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... int8 subsec;
.................... 
.................... #INT_TIMER1
.................... void TIMER1_isr()
.................... {
....................    set_timer1(TIMER_ISR_10MSEC); 
*
0019A:  MOVLW  FE
0019C:  MOVWF  FCF
0019E:  MOVLW  A8
001A0:  MOVWF  FCE
001A2:  NOP   
....................    tick_10ms++;
001A4:  MOVLW  01
001A6:  ADDWF  1C,F
001A8:  BTFSC  FD8.0
001AA:  INCF   1D,F
001AC:  BTFSC  FD8.2
001AE:  INCF   1E,F
001B0:  BTFSC  FD8.2
001B2:  INCF   1F,F
001B4:  BCF    F9E.0
001B6:  GOTO   0074
.................... }
.................... 
.................... void timer_init()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
*
01FD8:  MOVLW  BA
01FDA:  MOVWF  FF6
01FDC:  MOVLW  01
01FDE:  MOVWF  FF7
01FE0:  MOVLW  00
01FE2:  MOVWF  FF8
01FE4:  CALL   1F3E
....................    clear_interrupt(INT_TIMER1);
01FE8:  BCF    F9E.0
....................    tick_10ms = 0;
01FEA:  CLRF   1F
01FEC:  CLRF   1E
01FEE:  CLRF   1D
01FF0:  CLRF   1C
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
01FF2:  MOVLW  8F
01FF4:  MOVWF  FCD
01FF6:  CLRF   FAA
....................    set_timer1(TIMER_ISR_10MSEC); 
01FF8:  MOVLW  FE
01FFA:  MOVWF  FCF
01FFC:  MOVLW  A8
01FFE:  MOVWF  FCE
02000:  NOP   
....................    enable_interrupts(INT_TIMER1);   
02002:  BSF    F9D.0
....................    enable_interrupts(GLOBAL);
02004:  MOVLW  C0
02006:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
02008:  MOVLW  CE
0200A:  MOVWF  FF6
0200C:  MOVLW  01
0200E:  MOVWF  FF7
02010:  MOVLW  00
02012:  MOVWF  FF8
02014:  CALL   1F3E
02018:  GOTO   112BC (RETURN)
.................... }
.................... 
.................... void set_current_10msec(unsigned int32 new_10msec)
.................... {
....................    tick_10ms = new_10msec;
.................... }
.................... 
.................... unsigned int32 get_current_time_10ms()
.................... {
....................    return tick_10ms;
*
0A1EA:  MOVFF  1C,00
0A1EE:  MOVFF  1D,01
0A1F2:  MOVFF  1E,02
0A1F6:  MOVFF  1F,03
0A1FA:  RETURN 0
.................... }
.................... 
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return subsec;
*
03864:  MOVFF  187,00
03868:  CLRF   01
0386A:  CLRF   02
0386C:  CLRF   03
0386E:  RETURN 0
.................... }
.................... 
.................... unsigned int16 get_current_msec()
.................... {
....................    // Assuming subsec is in deci-seconds (0.01 sec)
....................    return (subsec / 10); // Convert deci-seconds to milliseconds
.................... }
.................... 
.................... unsigned int16 get_current_day()
.................... {
....................    return day;
.................... }
.................... 
.................... 
.................... void add_current_msec(unsigned int32 add_msec)
.................... {
....................    subsec += add_msec; // Convert milliseconds to deci-seconds
.................... }
.................... 
.................... #include "hal/uart.c"
.................... #include "uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
00202:  GOTO   0206
00206:  GOTO   0210
0020A:  BTFSS  4B.0
0020C:  GOTO   0244
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
00210:  MOVF   4A,W
00212:  SUBLW  1F
00214:  BTFSS  FD8.0
00216:  GOTO   0244
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
0021A:  MOVF   4A,W
0021C:  INCF   4A,F
0021E:  ANDLW  1F
00220:  CLRF   03
00222:  ADDLW  2A
00224:  MOVWF  FE9
00226:  MOVLW  00
00228:  ADDWFC 03,W
0022A:  MOVWF  FEA
0022C:  MOVFF  FEA,BDF
00230:  MOVFF  FE9,BDE
00234:  GOTO   01DA
00238:  MOVFF  BDF,FEA
0023C:  MOVFF  BDE,FE9
00240:  MOVF   01,W
00242:  MOVWF  FEF
00244:  BCF    FA6.5
00246:  GOTO   0074
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
01FAE:  MOVLW  4A
01FB0:  MOVWF  FF6
01FB2:  MOVLW  02
01FB4:  MOVWF  FF7
01FB6:  MOVLW  00
01FB8:  MOVWF  FF8
01FBA:  CALL   1F3E
....................    enable_interrupts(INT_RDA3);
01FBE:  BSF    F61.5
....................    enable_interrupts(GLOBAL);
01FC0:  MOVLW  C0
01FC2:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
01FC4:  MOVLW  5C
01FC6:  MOVWF  FF6
01FC8:  MOVLW  02
01FCA:  MOVWF  FF7
01FCC:  MOVLW  00
01FCE:  MOVWF  FF8
01FD0:  CALL   1F3E
01FD4:  GOTO   112B8 (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
0541E:  MOVFF  227,03
05422:  MOVLB  2
05424:  MOVF   x26,W
05426:  MOVWF  FE9
05428:  MOVFF  03,FEA
0542C:  MOVFF  FEF,228
05430:  MOVFF  225,FEA
05434:  MOVFF  224,FE9
05438:  CLRF   00
0543A:  CLRF   02
0543C:  MOVFF  228,01
05440:  MOVLB  0
05442:  CALL   2B68
....................    *receive_signal_size = 0;
05446:  MOVFF  227,03
0544A:  MOVLB  2
0544C:  MOVF   x26,W
0544E:  MOVWF  FE9
05450:  MOVFF  03,FEA
05454:  CLRF   FEF
05456:  MOVLB  0
05458:  GOTO   11384 (RETURN)
.................... }
.................... // End of file
.................... 
.................... #include "hal/gpio.c"
.................... #include "mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "gpio.h"
.................... #ifndef GPIO_H
.................... #define GPIO_H
.................... 
.................... void gpio_init();
.................... void enable_negative_power();
.................... void disable_negative_power();
.................... void connect_port1();
.................... void disconnect_port1();
.................... void connect_port2();
.................... void disconnect_port2();
.................... 
.................... 
.................... // 
.................... void connect_negative_power1(int1 state);
.................... void connect_negative_power2(int1 state);
.................... #endif // GPIO_H
.................... 
.................... #include "../../lib/tool/types.h"
.................... #ifndef TYPES_H
.................... #define TYPES_H
.................... 
.................... #define bool int1
.................... 
.................... 
.................... 
.................... #endif // TYPES_H
.................... // End of types.h
.................... 
.................... 
.................... 
.................... void gpio_init() {
....................     enable_negative_power();
....................     disconnect_port1();
....................     disconnect_port2();
.................... }
.................... 
.................... void enable_negative_power() {
....................     output_low(EN_NPWR1);
.................... }
.................... 
.................... void connect_negative_power1(int1 state) {
....................     if (state) {
....................         output_low(EN_NPWR1);
....................     } else {
....................         output_high(EN_NPWR1);
....................     }
.................... }
.................... 
.................... void connect_negative_power2(int1 state) {
....................     if (state) {
*
04EE0:  MOVLB  2
04EE2:  MOVF   x24,F
04EE4:  BTFSS  FD8.2
04EE6:  BRA    4EEE
04EE8:  MOVLB  0
04EEA:  GOTO   4EFA
04EEE:  MOVLB  0
....................         output_high(EN_NPWR2);
04EF0:  MOVLW  17
04EF2:  MOVWF  F94
04EF4:  BSF    F8B.6
....................     } else {
04EF6:  GOTO   4F00
....................         output_low(EN_NPWR2);
04EFA:  MOVLW  17
04EFC:  MOVWF  F94
04EFE:  BCF    F8B.6
....................     }
04F00:  GOTO   11316 (RETURN)
.................... }
.................... 
.................... void connect_port1(){
....................     output_high(CONNECT_CIGS1);
*
04ED0:  MOVLW  17
04ED2:  MOVWF  F94
04ED4:  BSF    F8B.3
04ED6:  RETURN 0
.................... }
.................... 
.................... void disconnect_port1(){
....................     output_low(CONNECT_CIGS1);
*
08014:  MOVLW  17
08016:  MOVWF  F94
08018:  BCF    F8B.3
0801A:  RETURN 0
.................... }
.................... 
.................... void connect_port2(){
....................     output_high(CONNECT_CIGS2);
*
04ED8:  MOVLW  17
04EDA:  MOVWF  F94
04EDC:  BSF    F8B.5
04EDE:  RETURN 0
.................... }
.................... 
.................... void disconnect_port2(){
....................     output_low(CONNECT_CIGS2);
*
0801C:  MOVLW  17
0801E:  MOVWF  F94
08020:  BCF    F8B.5
08022:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "device_driver/ad7490_driver.c"
.................... #include "ad7490_driver.h"                          // 同じデバイスフォルダのヘッダー
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/ad7490.h"               // ADCデバイスライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void ad7490_init()
.................... {
....................     fprintf(PC, "AD7490 Initialize\r\n");
*
02204:  MOVLW  68
02206:  MOVWF  FF6
02208:  MOVLW  02
0220A:  MOVWF  FF7
0220C:  MOVLW  00
0220E:  MOVWF  FF8
02210:  CALL   1F3E
....................     output_high(ADC_CS); 
02214:  MOVLW  FD
02216:  MOVWF  F93
02218:  BSF    F8A.1
....................     delay_ms(10); 
0221A:  MOVLW  0A
0221C:  MOVLB  B
0221E:  MOVWF  xA6
02220:  MOVLB  0
02222:  CALL   1F10
....................     unsigned int16 readdata = ad7490_read(ADC_CIGS2_CURR);
02226:  MOVLW  05
02228:  MOVLB  A
0222A:  MOVWF  x75
0222C:  MOVLB  0
0222E:  CALL   20FC
02232:  MOVFF  02,225
02236:  MOVFF  01,224
....................     delay_ms(1);
0223A:  MOVLW  01
0223C:  MOVLB  B
0223E:  MOVWF  xA6
02240:  MOVLB  0
02242:  CALL   1F10
....................     fprintf(PC, "\t%04LX\r\n", readdata);
02246:  MOVLW  09
02248:  BTFSS  FA6.6
0224A:  GOTO   2248
0224E:  MOVLB  E
02250:  MOVWF  xF9
02252:  MOVFF  225,B4B
02256:  MOVLW  37
02258:  MOVLB  B
0225A:  MOVWF  x4C
0225C:  MOVLB  0
0225E:  CALL   2188
02262:  MOVFF  224,B4B
02266:  MOVLW  37
02268:  MOVLB  B
0226A:  MOVWF  x4C
0226C:  MOVLB  0
0226E:  CALL   2188
02272:  MOVLW  0D
02274:  BTFSS  FA6.6
02276:  GOTO   2274
0227A:  MOVLB  E
0227C:  MOVWF  xF9
0227E:  MOVLW  0A
02280:  MOVLB  0
02282:  BTFSS  FA6.6
02284:  GOTO   2282
02288:  MOVLB  E
0228A:  MOVWF  xF9
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
0228C:  MOVLB  2
0228E:  INCFSZ x24,W
02290:  BRA    2296
02292:  BRA    229C
02294:  MOVLB  0
02296:  MOVLB  0
02298:  GOTO   22B4
0229C:  MOVLB  0
0229E:  MOVLB  2
022A0:  INCFSZ x25,W
022A2:  BRA    22A8
022A4:  BRA    22AE
022A6:  MOVLB  0
022A8:  MOVLB  0
022AA:  GOTO   22B4
022AE:  MOVLB  0
022B0:  GOTO   22D4
022B4:  MOVLB  2
022B6:  MOVF   x24,F
022B8:  BTFSC  FD8.2
022BA:  BRA    22C2
022BC:  MOVLB  0
022BE:  GOTO   22E8
022C2:  MOVLB  0
022C4:  MOVLB  2
022C6:  MOVF   x25,F
022C8:  BTFSC  FD8.2
022CA:  BRA    22D2
022CC:  MOVLB  0
022CE:  GOTO   22E8
022D2:  MOVLB  0
....................         fprintf(PC, "\tConnect error!\r\n");
022D4:  MOVLW  7C
022D6:  MOVWF  FF6
022D8:  MOVLW  02
022DA:  MOVWF  FF7
022DC:  MOVLW  00
022DE:  MOVWF  FF8
022E0:  CALL   1F3E
....................     } else {
022E4:  GOTO   22F8
....................         fprintf(PC, "\tConnect successful\r\n");
022E8:  MOVLW  8E
022EA:  MOVWF  FF6
022EC:  MOVLW  02
022EE:  MOVWF  FF7
022F0:  MOVLW  00
022F2:  MOVWF  FF8
022F4:  CALL   1F3E
....................     }
....................     fprintf(PC, "\tComplete\r\n");
022F8:  MOVLW  A4
022FA:  MOVWF  FF6
022FC:  MOVLW  02
022FE:  MOVWF  FF7
02300:  MOVLW  00
02302:  MOVWF  FF8
02304:  CALL   1F3E
02308:  GOTO   112C0 (RETURN)
.................... }
.................... 
.................... unsigned int16 ad7490_read(int8 channel)
*
020FC:  MOVFF  A75,A7C
02100:  GOTO   201C
02104:  MOVFF  02,A77
02108:  MOVFF  01,A76
.................... {   
....................     unsigned int16 cmd = ad7490_make_cmd(channel);
....................     // fprintf(PC, "\t[ADC] Command: %04LX\r\n", cmd);
....................     output_low(ADC_CS); 
0210C:  MOVLW  FD
0210E:  MOVWF  F93
02110:  BCF    F8A.1
....................     delay_us(10); 
02112:  MOVLW  0D
02114:  MOVWF  00
02116:  DECFSZ 00,F
02118:  BRA    2116
....................     spi_xfer(ADC_STREAM, cmd); 
0211A:  MOVFF  A77,A7D
0211E:  MOVFF  A76,A7C
02122:  MOVLW  10
02124:  MOVLB  A
02126:  MOVWF  x7E
02128:  MOVLW  01
0212A:  MOVWF  x7F
0212C:  MOVLB  0
0212E:  CALL   208C
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd);
....................     #endif
....................     output_high(ADC_CS); 
02132:  MOVLW  FD
02134:  MOVWF  F93
02136:  BSF    F8A.1
....................     delay_us(10);
02138:  MOVLW  0D
0213A:  MOVWF  00
0213C:  DECFSZ 00,F
0213E:  BRA    213C
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
02140:  MOVLW  FD
02142:  MOVWF  F93
02144:  BCF    F8A.1
....................     delay_us(10);
02146:  MOVLW  0D
02148:  MOVWF  00
0214A:  DECFSZ 00,F
0214C:  BRA    214A
....................     unsigned int16 ans = spi_xfer(ADC_STREAM, 0x0000);
0214E:  MOVLB  A
02150:  CLRF   x7D
02152:  CLRF   x7C
02154:  MOVLW  10
02156:  MOVWF  x7E
02158:  MOVLW  01
0215A:  MOVWF  x7F
0215C:  MOVLB  0
0215E:  CALL   208C
02162:  MOVFF  02,A79
02166:  MOVFF  01,A78
....................     output_high(ADC_CS); 
0216A:  MOVLW  FD
0216C:  MOVWF  F93
0216E:  BSF    F8A.1
....................     unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
02170:  MOVLB  A
02172:  MOVF   x78,W
02174:  MOVWF  x7A
02176:  MOVF   x79,W
02178:  ANDLW  0F
0217A:  MOVWF  x7B
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata);
....................     #endif
....................     return readdata;
0217C:  MOVF   x7A,W
0217E:  MOVWF  01
02180:  MOVF   x7B,W
02182:  MOVWF  02
02184:  MOVLB  0
02186:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "device_driver/mcp4901_driver.c"
.................... #include "mcp4901_driver.h"                        
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/mmj_cigs_config.h"             
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mcp4901.h"       
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // #define MCP4901_DEBUG
.................... 
.................... void mcp4901_init()
.................... {
....................     fprintf(PC, "MCP4901 Initialize\r\n");
*
02554:  MOVLW  B0
02556:  MOVWF  FF6
02558:  MOVLW  02
0255A:  MOVWF  FF7
0255C:  MOVLW  00
0255E:  MOVWF  FF8
02560:  CALL   1F3E
....................     output_high(DAC1_CS); 
02564:  MOVLW  3F
02566:  MOVWF  F95
02568:  BSF    F8C.7
....................     output_high(DAC2_CS); 
0256A:  MOVLW  3F
0256C:  MOVWF  F95
0256E:  BSF    F8C.6
....................     delay_ms(10); 
02570:  MOVLW  0A
02572:  MOVLB  B
02574:  MOVWF  xA6
02576:  MOVLB  0
02578:  CALL   1F10
....................     mcp4901_1_write(10); 
0257C:  MOVLB  A
0257E:  CLRF   x64
02580:  MOVLW  0A
02582:  MOVWF  x63
02584:  MOVLB  0
02586:  CALL   24D0
....................     mcp4901_2_write(10); 
0258A:  MOVLB  A
0258C:  CLRF   x64
0258E:  MOVLW  0A
02590:  MOVWF  x63
02592:  MOVLB  0
02594:  CALL   2512
....................     unsigned int16 readdata;
....................     readdata = ad7490_read(ADC_CIGS1_VREF); 
02598:  MOVLW  03
0259A:  MOVLB  A
0259C:  MOVWF  x75
0259E:  MOVLB  0
025A0:  CALL   20FC
025A4:  MOVFF  02,225
025A8:  MOVFF  01,224
....................     fprintf(PC, "%04LX\r\n", readdata);
025AC:  MOVFF  225,B4B
025B0:  MOVLW  37
025B2:  MOVLB  B
025B4:  MOVWF  x4C
025B6:  MOVLB  0
025B8:  CALL   2188
025BC:  MOVFF  224,B4B
025C0:  MOVLW  37
025C2:  MOVLB  B
025C4:  MOVWF  x4C
025C6:  MOVLB  0
025C8:  CALL   2188
025CC:  MOVLW  0D
025CE:  BTFSS  FA6.6
025D0:  GOTO   25CE
025D4:  MOVLB  E
025D6:  MOVWF  xF9
025D8:  MOVLW  0A
025DA:  MOVLB  0
025DC:  BTFSS  FA6.6
025DE:  GOTO   25DC
025E2:  MOVLB  E
025E4:  MOVWF  xF9
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
025E6:  MOVLB  2
025E8:  INCFSZ x24,W
025EA:  BRA    25F0
025EC:  BRA    25F6
025EE:  MOVLB  0
025F0:  MOVLB  0
025F2:  GOTO   260E
025F6:  MOVLB  0
025F8:  MOVLB  2
025FA:  INCFSZ x25,W
025FC:  BRA    2602
025FE:  BRA    2608
02600:  MOVLB  0
02602:  MOVLB  0
02604:  GOTO   260E
02608:  MOVLB  0
0260A:  GOTO   262E
0260E:  MOVLB  2
02610:  MOVF   x24,F
02612:  BTFSC  FD8.2
02614:  BRA    261C
02616:  MOVLB  0
02618:  GOTO   2642
0261C:  MOVLB  0
0261E:  MOVLB  2
02620:  MOVF   x25,F
02622:  BTFSC  FD8.2
02624:  BRA    262C
02626:  MOVLB  0
02628:  GOTO   2642
0262C:  MOVLB  0
....................         fprintf(PC, "\t[DAC Port 1] Connect error!\r\n");
0262E:  MOVLW  C6
02630:  MOVWF  FF6
02632:  MOVLW  02
02634:  MOVWF  FF7
02636:  MOVLW  00
02638:  MOVWF  FF8
0263A:  CALL   1F3E
....................     } else {
0263E:  GOTO   2652
....................         fprintf(PC, "\t[DAC Port 1] Connect successful\r\n");
02642:  MOVLW  E6
02644:  MOVWF  FF6
02646:  MOVLW  02
02648:  MOVWF  FF7
0264A:  MOVLW  00
0264C:  MOVWF  FF8
0264E:  CALL   1F3E
....................     }
....................     fprintf(PC, "%04LX\r\n", readdata);
02652:  MOVFF  225,B4B
02656:  MOVLW  37
02658:  MOVLB  B
0265A:  MOVWF  x4C
0265C:  MOVLB  0
0265E:  CALL   2188
02662:  MOVFF  224,B4B
02666:  MOVLW  37
02668:  MOVLB  B
0266A:  MOVWF  x4C
0266C:  MOVLB  0
0266E:  CALL   2188
02672:  MOVLW  0D
02674:  BTFSS  FA6.6
02676:  GOTO   2674
0267A:  MOVLB  E
0267C:  MOVWF  xF9
0267E:  MOVLW  0A
02680:  MOVLB  0
02682:  BTFSS  FA6.6
02684:  GOTO   2682
02688:  MOVLB  E
0268A:  MOVWF  xF9
....................     readdata = ad7490_read(ADC_CIGS2_VREF); 
0268C:  MOVLW  07
0268E:  MOVLB  A
02690:  MOVWF  x75
02692:  MOVLB  0
02694:  CALL   20FC
02698:  MOVFF  02,225
0269C:  MOVFF  01,224
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
026A0:  MOVLB  2
026A2:  INCFSZ x24,W
026A4:  BRA    26AA
026A6:  BRA    26B0
026A8:  MOVLB  0
026AA:  MOVLB  0
026AC:  GOTO   26C8
026B0:  MOVLB  0
026B2:  MOVLB  2
026B4:  INCFSZ x25,W
026B6:  BRA    26BC
026B8:  BRA    26C2
026BA:  MOVLB  0
026BC:  MOVLB  0
026BE:  GOTO   26C8
026C2:  MOVLB  0
026C4:  GOTO   26E8
026C8:  MOVLB  2
026CA:  MOVF   x24,F
026CC:  BTFSC  FD8.2
026CE:  BRA    26D6
026D0:  MOVLB  0
026D2:  GOTO   26FC
026D6:  MOVLB  0
026D8:  MOVLB  2
026DA:  MOVF   x25,F
026DC:  BTFSC  FD8.2
026DE:  BRA    26E6
026E0:  MOVLB  0
026E2:  GOTO   26FC
026E6:  MOVLB  0
....................         fprintf(PC, "\t[DAC Port 2] Connect error!\r\n");
026E8:  MOVLW  0A
026EA:  MOVWF  FF6
026EC:  MOVLW  03
026EE:  MOVWF  FF7
026F0:  MOVLW  00
026F2:  MOVWF  FF8
026F4:  CALL   1F3E
....................     } else {
026F8:  GOTO   270C
....................         fprintf(PC, "\t[DAC Port 2] Connect successful\r\n");
026FC:  MOVLW  2A
026FE:  MOVWF  FF6
02700:  MOVLW  03
02702:  MOVWF  FF7
02704:  MOVLW  00
02706:  MOVWF  FF8
02708:  CALL   1F3E
....................     }
....................     fprintf(PC, "\tComplete\r\n");
0270C:  MOVLW  4E
0270E:  MOVWF  FF6
02710:  MOVLW  03
02712:  MOVWF  FF7
02714:  MOVLW  00
02716:  MOVWF  FF8
02718:  CALL   1F3E
0271C:  GOTO   112C4 (RETURN)
.................... }
.................... 
.................... 
.................... void mcp4901_1_write(unsigned int16 value)
*
024D0:  MOVFF  A64,A68
024D4:  MOVFF  A63,A67
024D8:  CALL   230C
024DC:  MOVFF  02,A66
024E0:  MOVFF  01,A65
.................... {
....................     unsigned int16 cmd = mcp4901_make_cmd(value);
....................     #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................     #endif
....................     output_low(DAC1_CS); 
024E4:  MOVLW  3F
024E6:  MOVWF  F95
024E8:  BCF    F8C.7
....................     delay_us(10); 
024EA:  MOVLW  0D
024EC:  MOVWF  00
024EE:  DECFSZ 00,F
024F0:  BRA    24EE
....................     spi_xfer(DAC_STREAM, cmd); 
024F2:  MOVFF  A66,A68
024F6:  MOVFF  A65,A67
024FA:  MOVLW  10
024FC:  MOVLB  A
024FE:  MOVWF  x69
02500:  MOVLW  01
02502:  MOVWF  x6A
02504:  MOVLB  0
02506:  CALL   2460
....................     output_high(DAC1_CS); 
0250A:  MOVLW  3F
0250C:  MOVWF  F95
0250E:  BSF    F8C.7
02510:  RETURN 0
.................... }
.................... 
.................... void mcp4901_2_write(unsigned int16 value)
02512:  MOVFF  A64,A68
02516:  MOVFF  A63,A67
0251A:  CALL   230C
0251E:  MOVFF  02,A66
02522:  MOVFF  01,A65
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC2_CS); 
02526:  MOVLW  3F
02528:  MOVWF  F95
0252A:  BCF    F8C.6
....................    delay_us(100); 
0252C:  MOVLW  85
0252E:  MOVWF  00
02530:  DECFSZ 00,F
02532:  BRA    2530
....................    spi_xfer(DAC_STREAM, cmd); 
02534:  MOVFF  A66,A68
02538:  MOVFF  A65,A67
0253C:  MOVLW  10
0253E:  MOVLB  A
02540:  MOVWF  x69
02542:  MOVLW  01
02544:  MOVWF  x6A
02546:  MOVLB  0
02548:  CALL   2460
....................    output_high(DAC2_CS); 
0254C:  MOVLW  3F
0254E:  MOVWF  F95
02550:  BSF    F8C.6
02552:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... 
.................... // ライブラリ実装ファイル
.................... #include "../lib/device/ad7490.c"
.................... // #include "ad7490.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 ad7490_readdata(unsigned int16 channel)
.................... {
....................     spi_xfer(ADC_STREAM, channel); // Dummy transfer to start communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC, "\t[ADC] <<< %04LX\r\n", channel);
....................     #endif
....................     unsigned int16 ans = spi_xfer(ADC_STREAM);
....................     return ans & 0x0FFF; //Conver LSB <--> MSB
.................... }
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     cmd.fields.reserved0 = 0; // Reserved bits
*
0201C:  MOVLB  A
0201E:  BCF    x7D.0
....................     cmd.fields.reserved1 = 0; // Reserved bits
02020:  BCF    x7D.1
....................     cmd.fields.reserved2 = 0; // Reserved bits
02022:  BCF    x7D.2
....................     cmd.fields.reserved3 = 0;
02024:  BCF    x7D.3
....................     cmd.fields.coding = 1; // Two's complement
02026:  BSF    x7D.4
....................     cmd.fields.range = 0; // Normal mode
02028:  BCF    x7D.5
....................     cmd.fields.weak_tri = 0; // Strong trigger
0202A:  BCF    x7D.6
....................     cmd.fields.shadow = 0; // Direct access
0202C:  BCF    x7D.7
....................     cmd.fields.pm0 = AD7490_PM_AUTO_STANDBY & 0b00000001; // Power mode bits
0202E:  BSF    x7E.0
....................     cmd.fields.pm1 = (AD7490_PM_AUTO_STANDBY >> 1) & 0b00000001; // Power mode bits
02030:  BSF    x7E.1
....................     cmd.fields.add0 = (channel >> 0) & 0b00000001; // Channel address bits
02032:  MOVF   x7C,W
02034:  ANDLW  01
02036:  MOVWF  01
02038:  BCF    x7E.2
0203A:  BTFSC  01.0
0203C:  BSF    x7E.2
....................     cmd.fields.add1 = (channel >> 1) & 0b00000001; // Channel address bits
0203E:  BCF    FD8.0
02040:  RRCF   x7C,W
02042:  ANDLW  01
02044:  MOVWF  01
02046:  BCF    x7E.3
02048:  BTFSC  01.0
0204A:  BSF    x7E.3
....................     cmd.fields.add2 = (channel >> 2) & 0b00000001; // Channel address bits
0204C:  RRCF   x7C,W
0204E:  MOVWF  00
02050:  RRCF   00,F
02052:  MOVLW  3F
02054:  ANDWF  00,F
02056:  MOVF   00,W
02058:  ANDLW  01
0205A:  MOVWF  01
0205C:  BCF    x7E.4
0205E:  BTFSC  01.0
02060:  BSF    x7E.4
....................     cmd.fields.add3 = (channel >> 3) & 0b00000001; // Channel address bits
02062:  RRCF   x7C,W
02064:  MOVWF  00
02066:  RRCF   00,F
02068:  RRCF   00,F
0206A:  MOVLW  1F
0206C:  ANDWF  00,F
0206E:  MOVF   00,W
02070:  ANDLW  01
02072:  MOVWF  01
02074:  BCF    x7E.5
02076:  BTFSC  01.0
02078:  BSF    x7E.5
....................     cmd.fields.seq = 0; // Random mode
0207A:  BCF    x7E.6
....................     cmd.fields.write = 1; // Read operation
0207C:  BSF    x7E.7
.................... 
.................... 
....................     return cmd.value;
0207E:  MOVF   x7D,W
02080:  MOVWF  01
02082:  MOVF   x7E,W
02084:  MOVWF  02
02086:  MOVLB  0
02088:  GOTO   2104 (RETURN)
.................... }
.................... 
.................... #include "../lib/device/mcp4901.c"
.................... // #include "mcp4901.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value)
.................... {
....................    mcp4901_cmd_t cmd;
....................    cmd.fields.startbit = 0; // Start bit
*
0230C:  MOVLB  A
0230E:  BCF    x6A.7
....................    cmd.fields.buffer = 1; // Buffer used
02310:  BSF    x6A.6
....................    cmd.fields.gain = 1; // Gain 1x
02312:  BSF    x6A.5
....................    cmd.fields.shutdown = 1; // Normal operation
02314:  BSF    x6A.4
....................    cmd.fields.data7 = (value >> 7) & 0x01;
02316:  RRCF   x68,W
02318:  MOVWF  x6C
0231A:  RRCF   x67,W
0231C:  MOVWF  x6B
0231E:  RRCF   x6C,F
02320:  RRCF   x6B,F
02322:  RRCF   x6C,F
02324:  RRCF   x6B,F
02326:  RRCF   x6C,F
02328:  RRCF   x6B,F
0232A:  RRCF   x6C,F
0232C:  RRCF   x6B,F
0232E:  RRCF   x6C,F
02330:  RRCF   x6B,F
02332:  RRCF   x6C,F
02334:  RRCF   x6B,F
02336:  MOVLW  01
02338:  ANDWF  x6C,F
0233A:  MOVF   x6B,W
0233C:  ANDLW  01
0233E:  MOVWF  00
02340:  CLRF   03
02342:  MOVF   00,W
02344:  MOVWF  01
02346:  BCF    x6A.3
02348:  BTFSC  01.0
0234A:  BSF    x6A.3
....................    cmd.fields.data6 = (value >> 6) & 0x01;
0234C:  RRCF   x68,W
0234E:  MOVWF  x6C
02350:  RRCF   x67,W
02352:  MOVWF  x6B
02354:  RRCF   x6C,F
02356:  RRCF   x6B,F
02358:  RRCF   x6C,F
0235A:  RRCF   x6B,F
0235C:  RRCF   x6C,F
0235E:  RRCF   x6B,F
02360:  RRCF   x6C,F
02362:  RRCF   x6B,F
02364:  RRCF   x6C,F
02366:  RRCF   x6B,F
02368:  MOVLW  03
0236A:  ANDWF  x6C,F
0236C:  MOVF   x6B,W
0236E:  ANDLW  01
02370:  MOVWF  00
02372:  CLRF   03
02374:  MOVF   00,W
02376:  MOVWF  01
02378:  BCF    x6A.2
0237A:  BTFSC  01.0
0237C:  BSF    x6A.2
....................    cmd.fields.data5 = (value >> 5) & 0x01;
0237E:  RRCF   x68,W
02380:  MOVWF  x6C
02382:  RRCF   x67,W
02384:  MOVWF  x6B
02386:  RRCF   x6C,F
02388:  RRCF   x6B,F
0238A:  RRCF   x6C,F
0238C:  RRCF   x6B,F
0238E:  RRCF   x6C,F
02390:  RRCF   x6B,F
02392:  RRCF   x6C,F
02394:  RRCF   x6B,F
02396:  MOVLW  07
02398:  ANDWF  x6C,F
0239A:  MOVF   x6B,W
0239C:  ANDLW  01
0239E:  MOVWF  00
023A0:  CLRF   03
023A2:  MOVF   00,W
023A4:  MOVWF  01
023A6:  BCF    x6A.1
023A8:  BTFSC  01.0
023AA:  BSF    x6A.1
....................    cmd.fields.data4 = (value >> 4) & 0x01;
023AC:  RRCF   x68,W
023AE:  MOVWF  x6C
023B0:  RRCF   x67,W
023B2:  MOVWF  x6B
023B4:  RRCF   x6C,F
023B6:  RRCF   x6B,F
023B8:  RRCF   x6C,F
023BA:  RRCF   x6B,F
023BC:  RRCF   x6C,F
023BE:  RRCF   x6B,F
023C0:  MOVLW  0F
023C2:  ANDWF  x6C,F
023C4:  MOVF   x6B,W
023C6:  ANDLW  01
023C8:  MOVWF  00
023CA:  CLRF   03
023CC:  MOVF   00,W
023CE:  MOVWF  01
023D0:  BCF    x6A.0
023D2:  BTFSC  01.0
023D4:  BSF    x6A.0
....................    cmd.fields.data3 = (value >> 3) & 0x01;
023D6:  RRCF   x68,W
023D8:  MOVWF  x6C
023DA:  RRCF   x67,W
023DC:  MOVWF  x6B
023DE:  RRCF   x6C,F
023E0:  RRCF   x6B,F
023E2:  RRCF   x6C,F
023E4:  RRCF   x6B,F
023E6:  MOVLW  1F
023E8:  ANDWF  x6C,F
023EA:  MOVF   x6B,W
023EC:  ANDLW  01
023EE:  MOVWF  00
023F0:  CLRF   03
023F2:  MOVF   00,W
023F4:  MOVWF  01
023F6:  BCF    x69.7
023F8:  BTFSC  01.0
023FA:  BSF    x69.7
....................    cmd.fields.data2 = (value >> 2) & 0x01;
023FC:  RRCF   x68,W
023FE:  MOVWF  x6C
02400:  RRCF   x67,W
02402:  MOVWF  x6B
02404:  RRCF   x6C,F
02406:  RRCF   x6B,F
02408:  MOVLW  3F
0240A:  ANDWF  x6C,F
0240C:  MOVF   x6B,W
0240E:  ANDLW  01
02410:  MOVWF  00
02412:  CLRF   03
02414:  MOVF   00,W
02416:  MOVWF  01
02418:  BCF    x69.6
0241A:  BTFSC  01.0
0241C:  BSF    x69.6
....................    cmd.fields.data1 = (value >> 1) & 0x01;
0241E:  BCF    FD8.0
02420:  RRCF   x68,W
02422:  MOVWF  x6C
02424:  RRCF   x67,W
02426:  MOVWF  x6B
02428:  MOVF   x6B,W
0242A:  ANDLW  01
0242C:  MOVWF  00
0242E:  CLRF   03
02430:  MOVF   00,W
02432:  MOVWF  01
02434:  BCF    x69.5
02436:  BTFSC  01.0
02438:  BSF    x69.5
....................    cmd.fields.data0 = value & 0x01; // LSB of the data
0243A:  MOVF   x67,W
0243C:  ANDLW  01
0243E:  MOVWF  00
02440:  CLRF   03
02442:  MOVF   00,W
02444:  MOVWF  01
02446:  BCF    x69.4
02448:  BTFSC  01.0
0244A:  BSF    x69.4
....................    cmd.fields.reserved = 0; // Reserved bits
0244C:  BCF    x69.3
....................    cmd.fields.reserved2 = 0; // Reserved bits
0244E:  BCF    x69.2
....................    cmd.fields.reserved3 = 0; // Reserved bits
02450:  BCF    x69.1
....................    cmd.fields.reserved4 = 0; // Reserved bits
02452:  BCF    x69.0
.................... 
....................    return cmd.value;
02454:  MOVF   x69,W
02456:  MOVWF  01
02458:  MOVF   x6A,W
0245A:  MOVWF  02
0245C:  MOVLB  0
0245E:  RETURN 0
.................... }
.................... 
.................... #include "../lib/device/mt25q.c"
.................... #include "mt25q.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
03870:  MOVLB  B
03872:  MOVF   xA6,W
03874:  XORLW  00
03876:  MOVLB  0
03878:  BTFSC  FD8.2
0387A:  GOTO   388A
0387E:  XORLW  01
03880:  BTFSC  FD8.2
03882:  GOTO   38F2
03886:  GOTO   395A
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0388A:  MOVLB  B
0388C:  CLRF   xAF
0388E:  CLRF   xAE
03890:  MOVLB  0
03892:  MOVLB  B
03894:  MOVF   xAF,W
03896:  SUBWF  xAD,W
03898:  BTFSC  FD8.0
0389A:  BRA    38A2
0389C:  MOVLB  0
0389E:  GOTO   38EE
038A2:  MOVLB  0
038A4:  BTFSS  FD8.2
038A6:  GOTO   38BC
038AA:  MOVLB  B
038AC:  MOVF   xAC,W
038AE:  SUBWF  xAE,W
038B0:  BTFSS  FD8.0
038B2:  BRA    38BA
038B4:  MOVLB  0
038B6:  GOTO   38EE
038BA:  MOVLB  0
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
038BC:  MOVLB  B
038BE:  MOVF   xAA,W
038C0:  ADDWF  xAE,W
038C2:  MOVWF  FE9
038C4:  MOVF   xAB,W
038C6:  ADDWFC xAF,W
038C8:  MOVWF  FEA
038CA:  MOVFF  FEF,BB2
038CE:  MOVFF  BB2,BC8
038D2:  MOVLW  08
038D4:  MOVWF  xC9
038D6:  MOVLW  01
038D8:  MOVWF  xCA
038DA:  MOVLB  0
038DC:  CALL   2774
038E0:  MOVLB  B
038E2:  INCF   xAE,F
038E4:  BTFSC  FD8.2
038E6:  INCF   xAF,F
038E8:  MOVLB  0
038EA:  GOTO   3892
....................          break;
038EE:  GOTO   395E
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
038F2:  MOVLB  B
038F4:  CLRF   xB1
038F6:  CLRF   xB0
038F8:  MOVLB  0
038FA:  MOVLB  B
038FC:  MOVF   xB1,W
038FE:  SUBWF  xAD,W
03900:  BTFSC  FD8.0
03902:  BRA    390A
03904:  MOVLB  0
03906:  GOTO   3956
0390A:  MOVLB  0
0390C:  BTFSS  FD8.2
0390E:  GOTO   3924
03912:  MOVLB  B
03914:  MOVF   xAC,W
03916:  SUBWF  xB0,W
03918:  BTFSS  FD8.0
0391A:  BRA    3922
0391C:  MOVLB  0
0391E:  GOTO   3956
03922:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
03924:  MOVLB  B
03926:  MOVF   xAA,W
03928:  ADDWF  xB0,W
0392A:  MOVWF  FE9
0392C:  MOVF   xAB,W
0392E:  ADDWFC xB1,W
03930:  MOVWF  FEA
03932:  MOVFF  FEF,BB2
03936:  MOVFF  BB2,BC8
0393A:  MOVLW  08
0393C:  MOVWF  xC9
0393E:  MOVLW  01
03940:  MOVWF  xCA
03942:  MOVLB  0
03944:  CALL   27F0
03948:  MOVLB  B
0394A:  INCF   xB0,F
0394C:  BTFSC  FD8.2
0394E:  INCF   xB1,F
03950:  MOVLB  0
03952:  GOTO   38FA
....................          break;
03956:  GOTO   395E
....................          
....................       default:
....................          break;
0395A:  GOTO   395E
....................    }
....................    return;
0395E:  RETURN 0
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount, int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
0286C:  MOVLB  B
0286E:  MOVF   xAC,W
02870:  XORLW  00
02872:  MOVLB  0
02874:  BTFSC  FD8.2
02876:  GOTO   2886
0287A:  XORLW  01
0287C:  BTFSC  FD8.2
0287E:  GOTO   2990
02882:  GOTO   2A9A
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02886:  MOVLB  B
02888:  CLRF   xBB
0288A:  CLRF   xBA
0288C:  MOVLB  0
0288E:  MOVLB  B
02890:  MOVF   xBB,W
02892:  SUBWF  xB3,W
02894:  BTFSC  FD8.0
02896:  BRA    289E
02898:  MOVLB  0
0289A:  GOTO   28EA
0289E:  MOVLB  0
028A0:  BTFSS  FD8.2
028A2:  GOTO   28B8
028A6:  MOVLB  B
028A8:  MOVF   xB2,W
028AA:  SUBWF  xBA,W
028AC:  BTFSS  FD8.0
028AE:  BRA    28B6
028B0:  MOVLB  0
028B2:  GOTO   28EA
028B6:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
028B8:  MOVLB  B
028BA:  MOVF   xB0,W
028BC:  ADDWF  xBA,W
028BE:  MOVWF  FE9
028C0:  MOVF   xB1,W
028C2:  ADDWFC xBB,W
028C4:  MOVWF  FEA
028C6:  MOVFF  FEF,BC6
028CA:  MOVFF  BC6,BC8
028CE:  MOVLW  08
028D0:  MOVWF  xC9
028D2:  MOVLW  01
028D4:  MOVWF  xCA
028D6:  MOVLB  0
028D8:  CALL   2774
028DC:  MOVLB  B
028DE:  INCF   xBA,F
028E0:  BTFSC  FD8.2
028E2:  INCF   xBB,F
028E4:  MOVLB  0
028E6:  GOTO   288E
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
028EA:  MOVLB  B
028EC:  CLRF   xBF
028EE:  CLRF   xBE
028F0:  CLRF   xBD
028F2:  CLRF   xBC
028F4:  MOVLB  0
028F6:  MOVLB  B
028F8:  MOVF   xBF,W
028FA:  SUBWF  xB9,W
028FC:  BTFSC  FD8.0
028FE:  BRA    2906
02900:  MOVLB  0
02902:  GOTO   298C
02906:  MOVLB  0
02908:  BTFSS  FD8.2
0290A:  GOTO   2950
0290E:  MOVLB  B
02910:  MOVF   xBE,W
02912:  SUBWF  xB8,W
02914:  BTFSC  FD8.0
02916:  BRA    291E
02918:  MOVLB  0
0291A:  GOTO   298C
0291E:  MOVLB  0
02920:  BTFSS  FD8.2
02922:  GOTO   2950
02926:  MOVLB  B
02928:  MOVF   xBD,W
0292A:  SUBWF  xB7,W
0292C:  BTFSC  FD8.0
0292E:  BRA    2936
02930:  MOVLB  0
02932:  GOTO   298C
02936:  MOVLB  0
02938:  BTFSS  FD8.2
0293A:  GOTO   2950
0293E:  MOVLB  B
02940:  MOVF   xB6,W
02942:  SUBWF  xBC,W
02944:  BTFSS  FD8.0
02946:  BRA    294E
02948:  MOVLB  0
0294A:  GOTO   298C
0294E:  MOVLB  0
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
02950:  MOVLB  B
02952:  MOVF   xB4,W
02954:  ADDWF  xBC,W
02956:  MOVWF  FE9
02958:  MOVF   xB5,W
0295A:  ADDWFC xBD,W
0295C:  MOVWF  FEA
0295E:  MOVLW  02
02960:  MOVWF  xC8
02962:  MOVLW  08
02964:  MOVWF  xC9
02966:  MOVLW  01
02968:  MOVWF  xCA
0296A:  MOVLB  0
0296C:  CALL   2774
02970:  MOVFF  01,FEF
02974:  MOVLW  01
02976:  MOVLB  B
02978:  ADDWF  xBC,F
0297A:  BTFSC  FD8.0
0297C:  INCF   xBD,F
0297E:  BTFSC  FD8.2
02980:  INCF   xBE,F
02982:  BTFSC  FD8.2
02984:  INCF   xBF,F
02986:  MOVLB  0
02988:  GOTO   28F6
....................          break;
0298C:  GOTO   2A9E
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02990:  MOVLB  B
02992:  CLRF   xC1
02994:  CLRF   xC0
02996:  MOVLB  0
02998:  MOVLB  B
0299A:  MOVF   xC1,W
0299C:  SUBWF  xB3,W
0299E:  BTFSC  FD8.0
029A0:  BRA    29A8
029A2:  MOVLB  0
029A4:  GOTO   29F4
029A8:  MOVLB  0
029AA:  BTFSS  FD8.2
029AC:  GOTO   29C2
029B0:  MOVLB  B
029B2:  MOVF   xB2,W
029B4:  SUBWF  xC0,W
029B6:  BTFSS  FD8.0
029B8:  BRA    29C0
029BA:  MOVLB  0
029BC:  GOTO   29F4
029C0:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
029C2:  MOVLB  B
029C4:  MOVF   xB0,W
029C6:  ADDWF  xC0,W
029C8:  MOVWF  FE9
029CA:  MOVF   xB1,W
029CC:  ADDWFC xC1,W
029CE:  MOVWF  FEA
029D0:  MOVFF  FEF,BC6
029D4:  MOVFF  BC6,BC8
029D8:  MOVLW  08
029DA:  MOVWF  xC9
029DC:  MOVLW  01
029DE:  MOVWF  xCA
029E0:  MOVLB  0
029E2:  CALL   27F0
029E6:  MOVLB  B
029E8:  INCF   xC0,F
029EA:  BTFSC  FD8.2
029EC:  INCF   xC1,F
029EE:  MOVLB  0
029F0:  GOTO   2998
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
029F4:  MOVLB  B
029F6:  CLRF   xC5
029F8:  CLRF   xC4
029FA:  CLRF   xC3
029FC:  CLRF   xC2
029FE:  MOVLB  0
02A00:  MOVLB  B
02A02:  MOVF   xC5,W
02A04:  SUBWF  xB9,W
02A06:  BTFSC  FD8.0
02A08:  BRA    2A10
02A0A:  MOVLB  0
02A0C:  GOTO   2A96
02A10:  MOVLB  0
02A12:  BTFSS  FD8.2
02A14:  GOTO   2A5A
02A18:  MOVLB  B
02A1A:  MOVF   xC4,W
02A1C:  SUBWF  xB8,W
02A1E:  BTFSC  FD8.0
02A20:  BRA    2A28
02A22:  MOVLB  0
02A24:  GOTO   2A96
02A28:  MOVLB  0
02A2A:  BTFSS  FD8.2
02A2C:  GOTO   2A5A
02A30:  MOVLB  B
02A32:  MOVF   xC3,W
02A34:  SUBWF  xB7,W
02A36:  BTFSC  FD8.0
02A38:  BRA    2A40
02A3A:  MOVLB  0
02A3C:  GOTO   2A96
02A40:  MOVLB  0
02A42:  BTFSS  FD8.2
02A44:  GOTO   2A5A
02A48:  MOVLB  B
02A4A:  MOVF   xB6,W
02A4C:  SUBWF  xC2,W
02A4E:  BTFSS  FD8.0
02A50:  BRA    2A58
02A52:  MOVLB  0
02A54:  GOTO   2A96
02A58:  MOVLB  0
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
02A5A:  MOVLB  B
02A5C:  MOVF   xB4,W
02A5E:  ADDWF  xC2,W
02A60:  MOVWF  FE9
02A62:  MOVF   xB5,W
02A64:  ADDWFC xC3,W
02A66:  MOVWF  FEA
02A68:  MOVLW  01
02A6A:  MOVWF  xC8
02A6C:  MOVLW  08
02A6E:  MOVWF  xC9
02A70:  MOVLW  01
02A72:  MOVWF  xCA
02A74:  MOVLB  0
02A76:  CALL   27F0
02A7A:  MOVFF  01,FEF
02A7E:  MOVLW  01
02A80:  MOVLB  B
02A82:  ADDWF  xC2,F
02A84:  BTFSC  FD8.0
02A86:  INCF   xC3,F
02A88:  BTFSC  FD8.2
02A8A:  INCF   xC4,F
02A8C:  BTFSC  FD8.2
02A8E:  INCF   xC5,F
02A90:  MOVLB  0
02A92:  GOTO   2A00
....................          break;
02A96:  GOTO   2A9E
....................    
....................          
....................       default:
....................          break;
02A9A:  GOTO   2A9E
....................    }
....................    return;
02A9E:  RETURN 0
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, int8 *cmd_data, unsigned int8 cmd_amount, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
03960:  MOVLB  B
03962:  MOVF   xA6,W
03964:  XORLW  00
03966:  MOVLB  0
03968:  BTFSC  FD8.2
0396A:  GOTO   397A
0396E:  XORLW  01
03970:  BTFSC  FD8.2
03972:  GOTO   3A28
03976:  GOTO   3AD6
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
0397A:  MOVLB  B
0397C:  CLRF   xB1
0397E:  MOVLB  0
03980:  MOVLB  B
03982:  MOVF   xAC,W
03984:  SUBWF  xB1,W
03986:  BTFSS  FD8.0
03988:  BRA    3990
0398A:  MOVLB  0
0398C:  GOTO   39C0
03990:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
03992:  MOVLB  B
03994:  MOVF   xB1,W
03996:  ADDWF  xAA,W
03998:  MOVWF  FE9
0399A:  MOVLW  00
0399C:  ADDWFC xAB,W
0399E:  MOVWF  FEA
039A0:  MOVFF  FEF,BB7
039A4:  MOVFF  BB7,BC8
039A8:  MOVLW  08
039AA:  MOVWF  xC9
039AC:  MOVLW  01
039AE:  MOVWF  xCA
039B0:  MOVLB  0
039B2:  CALL   2774
039B6:  MOVLB  B
039B8:  INCF   xB1,F
039BA:  MOVLB  0
039BC:  GOTO   3980
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
039C0:  MOVLB  B
039C2:  CLRF   xB3
039C4:  CLRF   xB2
039C6:  MOVLB  0
039C8:  MOVLB  B
039CA:  MOVF   xB3,W
039CC:  SUBWF  xB0,W
039CE:  BTFSC  FD8.0
039D0:  BRA    39D8
039D2:  MOVLB  0
039D4:  GOTO   3A24
039D8:  MOVLB  0
039DA:  BTFSS  FD8.2
039DC:  GOTO   39F2
039E0:  MOVLB  B
039E2:  MOVF   xAF,W
039E4:  SUBWF  xB2,W
039E6:  BTFSS  FD8.0
039E8:  BRA    39F0
039EA:  MOVLB  0
039EC:  GOTO   3A24
039F0:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
039F2:  MOVLB  B
039F4:  MOVF   xAD,W
039F6:  ADDWF  xB2,W
039F8:  MOVWF  FE9
039FA:  MOVF   xAE,W
039FC:  ADDWFC xB3,W
039FE:  MOVWF  FEA
03A00:  MOVFF  FEF,BB7
03A04:  MOVFF  BB7,BC8
03A08:  MOVLW  08
03A0A:  MOVWF  xC9
03A0C:  MOVLW  01
03A0E:  MOVWF  xCA
03A10:  MOVLB  0
03A12:  CALL   2774
03A16:  MOVLB  B
03A18:  INCF   xB2,F
03A1A:  BTFSC  FD8.2
03A1C:  INCF   xB3,F
03A1E:  MOVLB  0
03A20:  GOTO   39C8
....................          break;
03A24:  GOTO   3ADA
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
03A28:  MOVLB  B
03A2A:  CLRF   xB4
03A2C:  MOVLB  0
03A2E:  MOVLB  B
03A30:  MOVF   xAC,W
03A32:  SUBWF  xB4,W
03A34:  BTFSS  FD8.0
03A36:  BRA    3A3E
03A38:  MOVLB  0
03A3A:  GOTO   3A6E
03A3E:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
03A40:  MOVLB  B
03A42:  MOVF   xB4,W
03A44:  ADDWF  xAA,W
03A46:  MOVWF  FE9
03A48:  MOVLW  00
03A4A:  ADDWFC xAB,W
03A4C:  MOVWF  FEA
03A4E:  MOVFF  FEF,BB7
03A52:  MOVFF  BB7,BC8
03A56:  MOVLW  08
03A58:  MOVWF  xC9
03A5A:  MOVLW  01
03A5C:  MOVWF  xCA
03A5E:  MOVLB  0
03A60:  CALL   27F0
03A64:  MOVLB  B
03A66:  INCF   xB4,F
03A68:  MOVLB  0
03A6A:  GOTO   3A2E
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03A6E:  MOVLB  B
03A70:  CLRF   xB6
03A72:  CLRF   xB5
03A74:  MOVLB  0
03A76:  MOVLB  B
03A78:  MOVF   xB6,W
03A7A:  SUBWF  xB0,W
03A7C:  BTFSC  FD8.0
03A7E:  BRA    3A86
03A80:  MOVLB  0
03A82:  GOTO   3AD2
03A86:  MOVLB  0
03A88:  BTFSS  FD8.2
03A8A:  GOTO   3AA0
03A8E:  MOVLB  B
03A90:  MOVF   xAF,W
03A92:  SUBWF  xB5,W
03A94:  BTFSS  FD8.0
03A96:  BRA    3A9E
03A98:  MOVLB  0
03A9A:  GOTO   3AD2
03A9E:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
03AA0:  MOVLB  B
03AA2:  MOVF   xAD,W
03AA4:  ADDWF  xB5,W
03AA6:  MOVWF  FE9
03AA8:  MOVF   xAE,W
03AAA:  ADDWFC xB6,W
03AAC:  MOVWF  FEA
03AAE:  MOVFF  FEF,BB7
03AB2:  MOVFF  BB7,BC8
03AB6:  MOVLW  08
03AB8:  MOVWF  xC9
03ABA:  MOVLW  01
03ABC:  MOVWF  xCA
03ABE:  MOVLB  0
03AC0:  CALL   27F0
03AC4:  MOVLB  B
03AC6:  INCF   xB5,F
03AC8:  BTFSC  FD8.2
03ACA:  INCF   xB6,F
03ACC:  MOVLB  0
03ACE:  GOTO   3A76
....................          break;
03AD2:  GOTO   3ADA
....................          
....................       default:
....................          break;
03AD6:  GOTO   3ADA
....................    }
....................    return;
03ADA:  RETURN 0
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
06690:  MOVFF  33A,BAC
06694:  MOVLW  01
06696:  MOVLB  B
06698:  MOVWF  xAD
0669A:  MOVLW  0F
0669C:  MOVWF  xAF
0669E:  MOVLW  89
066A0:  MOVWF  xAE
066A2:  MOVLB  0
066A4:  CALL   2720
066A8:  MOVFF  33A,BAC
066AC:  MOVLB  B
066AE:  CLRF   xAD
066B0:  MOVLW  0F
066B2:  MOVWF  xAF
066B4:  MOVLW  92
066B6:  MOVWF  xAE
066B8:  MOVLB  0
066BA:  CALL   2720
066BE:  RETURN 0
.................... }
....................  
.................... int8 status_register(Flash flash_stream){
*
03ADC:  MOVLW  05
03ADE:  MOVLB  B
03AE0:  MOVWF  xAA
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
03AE2:  MOVFF  BA8,BAC
03AE6:  CLRF   xAD
03AE8:  MOVLW  0F
03AEA:  MOVWF  xAF
03AEC:  MOVLW  89
03AEE:  MOVWF  xAE
03AF0:  MOVLB  0
03AF2:  CALL   2720
03AF6:  MOVFF  BA8,BAC
03AFA:  MOVLB  B
03AFC:  CLRF   xAD
03AFE:  MOVLW  0F
03B00:  MOVWF  xAF
03B02:  MOVLW  92
03B04:  MOVWF  xAE
03B06:  MOVLB  0
03B08:  CALL   2720
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
03B0C:  MOVFF  BA9,BAF
03B10:  MOVFF  BA8,BAE
03B14:  MOVFF  BA7,BAD
03B18:  MOVFF  BA6,BAC
03B1C:  MOVLW  0B
03B1E:  MOVLB  B
03B20:  MOVWF  xB1
03B22:  MOVLW  AA
03B24:  MOVWF  xB0
03B26:  CLRF   xB3
03B28:  MOVLW  01
03B2A:  MOVWF  xB2
03B2C:  MOVLW  0B
03B2E:  MOVWF  xB5
03B30:  MOVLW  AB
03B32:  MOVWF  xB4
03B34:  CLRF   xB9
03B36:  CLRF   xB8
03B38:  CLRF   xB7
03B3A:  MOVLW  01
03B3C:  MOVWF  xB6
03B3E:  MOVLB  0
03B40:  CALL   286C
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
03B44:  MOVFF  BA8,BAC
03B48:  MOVLW  01
03B4A:  MOVLB  B
03B4C:  MOVWF  xAD
03B4E:  MOVLW  0F
03B50:  MOVWF  xAF
03B52:  MOVLW  89
03B54:  MOVWF  xAE
03B56:  MOVLB  0
03B58:  CALL   2720
03B5C:  MOVFF  BA8,BAC
03B60:  MOVLB  B
03B62:  CLRF   xAD
03B64:  MOVLW  0F
03B66:  MOVWF  xAF
03B68:  MOVLW  92
03B6A:  MOVWF  xAE
03B6C:  MOVLB  0
03B6E:  CALL   2720
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
03B72:  MOVLB  B
03B74:  MOVF   xAB,W
03B76:  MOVWF  01
03B78:  MOVLB  0
03B7A:  RETURN 0
.................... }
.................... 
.................... //
.................... //->success:True,fail:false 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 16);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == MANUFACTURER_ID_MICRON){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
....................  
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
04060:  MOVLB  B
04062:  MOVF   x8D,F
04064:  BTFSC  FD8.2
04066:  BRA    406E
04068:  MOVLB  0
0406A:  GOTO   41C4
0406E:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
04070:  MOVLW  06
04072:  MOVLB  B
04074:  MOVWF  x94
04076:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
04078:  MOVLW  D8
0407A:  MOVLB  B
0407C:  MOVWF  x95
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0407E:  MOVFF  B92,BA1
04082:  MOVFF  B93,BA2
04086:  CLRF   xA3
04088:  CLRF   xA4
0408A:  MOVF   xA1,W
0408C:  MOVWF  00
0408E:  CLRF   01
04090:  CLRF   02
04092:  CLRF   03
04094:  MOVFF  00,B96
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
04098:  MOVFF  B91,BA1
0409C:  MOVFF  B92,BA2
040A0:  MOVFF  B93,BA3
040A4:  CLRF   xA4
040A6:  MOVF   xA1,W
040A8:  MOVWF  00
040AA:  CLRF   01
040AC:  CLRF   02
040AE:  CLRF   03
040B0:  MOVFF  00,B97
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
040B4:  MOVF   x90,W
040B6:  MOVWF  00
040B8:  CLRF   01
040BA:  CLRF   02
040BC:  CLRF   03
040BE:  MOVFF  00,B98
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
040C2:  MOVFF  B8E,BAC
040C6:  CLRF   xAD
040C8:  MOVLW  0F
040CA:  MOVWF  xAF
040CC:  MOVLW  89
040CE:  MOVWF  xAE
040D0:  MOVLB  0
040D2:  CALL   2720
040D6:  MOVFF  B8E,BAC
040DA:  MOVLB  B
040DC:  CLRF   xAD
040DE:  MOVLW  0F
040E0:  MOVWF  xAF
040E2:  MOVLW  92
040E4:  MOVWF  xAE
040E6:  MOVLB  0
040E8:  CALL   2720
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
040EC:  MOVFF  B8F,BA9
040F0:  MOVFF  B8E,BA8
040F4:  MOVFF  B8D,BA7
040F8:  MOVFF  B8C,BA6
040FC:  MOVLW  0B
040FE:  MOVLB  B
04100:  MOVWF  xAB
04102:  MOVLW  94
04104:  MOVWF  xAA
04106:  CLRF   xAD
04108:  MOVLW  01
0410A:  MOVWF  xAC
0410C:  MOVLB  0
0410E:  CALL   3870
....................       output_high(flash_stream.cs_pin);
04112:  MOVFF  B8E,BAC
04116:  MOVLW  01
04118:  MOVLB  B
0411A:  MOVWF  xAD
0411C:  MOVLW  0F
0411E:  MOVWF  xAF
04120:  MOVLW  89
04122:  MOVWF  xAE
04124:  MOVLB  0
04126:  CALL   2720
0412A:  MOVFF  B8E,BAC
0412E:  MOVLB  B
04130:  CLRF   xAD
04132:  MOVLW  0F
04134:  MOVWF  xAF
04136:  MOVLW  92
04138:  MOVWF  xAE
0413A:  MOVLB  0
0413C:  CALL   2720
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
04140:  MOVFF  B8E,BAC
04144:  MOVLB  B
04146:  CLRF   xAD
04148:  MOVLW  0F
0414A:  MOVWF  xAF
0414C:  MOVLW  89
0414E:  MOVWF  xAE
04150:  MOVLB  0
04152:  CALL   2720
04156:  MOVFF  B8E,BAC
0415A:  MOVLB  B
0415C:  CLRF   xAD
0415E:  MOVLW  0F
04160:  MOVWF  xAF
04162:  MOVLW  92
04164:  MOVWF  xAE
04166:  MOVLB  0
04168:  CALL   2720
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
0416C:  MOVFF  B8F,BA9
04170:  MOVFF  B8E,BA8
04174:  MOVFF  B8D,BA7
04178:  MOVFF  B8C,BA6
0417C:  MOVLW  0B
0417E:  MOVLB  B
04180:  MOVWF  xAB
04182:  MOVLW  95
04184:  MOVWF  xAA
04186:  CLRF   xAD
04188:  MOVLW  04
0418A:  MOVWF  xAC
0418C:  MOVLB  0
0418E:  CALL   3870
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04192:  MOVFF  B8E,BAC
04196:  MOVLW  01
04198:  MOVLB  B
0419A:  MOVWF  xAD
0419C:  MOVLW  0F
0419E:  MOVWF  xAF
041A0:  MOVLW  89
041A2:  MOVWF  xAE
041A4:  MOVLB  0
041A6:  CALL   2720
041AA:  MOVFF  B8E,BAC
041AE:  MOVLB  B
041B0:  CLRF   xAD
041B2:  MOVLW  0F
041B4:  MOVWF  xAF
041B6:  MOVLW  92
041B8:  MOVWF  xAE
041BA:  MOVLB  0
041BC:  CALL   2720
....................    }
041C0:  GOTO   4342
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
041C4:  MOVLB  B
041C6:  DECFSZ x8D,W
041C8:  BRA    41CE
041CA:  BRA    41D4
041CC:  MOVLB  0
041CE:  MOVLB  0
041D0:  GOTO   4342
041D4:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
041D6:  MOVLW  06
041D8:  MOVLB  B
041DA:  MOVWF  x99
041DC:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
041DE:  MOVLW  DC
041E0:  MOVLB  B
041E2:  MOVWF  x9A
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
041E4:  MOVFF  B93,BA1
041E8:  CLRF   xA2
041EA:  CLRF   xA3
041EC:  CLRF   xA4
041EE:  MOVF   xA1,W
041F0:  MOVWF  00
041F2:  CLRF   01
041F4:  CLRF   02
041F6:  CLRF   03
041F8:  MOVFF  00,B9B
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
041FC:  MOVFF  B92,BA1
04200:  MOVFF  B93,BA2
04204:  CLRF   xA3
04206:  CLRF   xA4
04208:  MOVF   xA1,W
0420A:  MOVWF  00
0420C:  CLRF   01
0420E:  CLRF   02
04210:  CLRF   03
04212:  MOVFF  00,B9C
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
04216:  MOVFF  B91,BA1
0421A:  MOVFF  B92,BA2
0421E:  MOVFF  B93,BA3
04222:  CLRF   xA4
04224:  MOVF   xA1,W
04226:  MOVWF  00
04228:  CLRF   01
0422A:  CLRF   02
0422C:  CLRF   03
0422E:  MOVFF  00,B9D
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
04232:  MOVF   x90,W
04234:  MOVWF  00
04236:  CLRF   01
04238:  CLRF   02
0423A:  CLRF   03
0423C:  MOVFF  00,B9E
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04240:  MOVFF  B8E,BAC
04244:  CLRF   xAD
04246:  MOVLW  0F
04248:  MOVWF  xAF
0424A:  MOVLW  89
0424C:  MOVWF  xAE
0424E:  MOVLB  0
04250:  CALL   2720
04254:  MOVFF  B8E,BAC
04258:  MOVLB  B
0425A:  CLRF   xAD
0425C:  MOVLW  0F
0425E:  MOVWF  xAF
04260:  MOVLW  92
04262:  MOVWF  xAE
04264:  MOVLB  0
04266:  CALL   2720
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0426A:  MOVFF  B8F,BA9
0426E:  MOVFF  B8E,BA8
04272:  MOVFF  B8D,BA7
04276:  MOVFF  B8C,BA6
0427A:  MOVLW  0B
0427C:  MOVLB  B
0427E:  MOVWF  xAB
04280:  MOVLW  99
04282:  MOVWF  xAA
04284:  CLRF   xAD
04286:  MOVLW  01
04288:  MOVWF  xAC
0428A:  MOVLB  0
0428C:  CALL   3870
....................       output_high(flash_stream.cs_pin);
04290:  MOVFF  B8E,BAC
04294:  MOVLW  01
04296:  MOVLB  B
04298:  MOVWF  xAD
0429A:  MOVLW  0F
0429C:  MOVWF  xAF
0429E:  MOVLW  89
042A0:  MOVWF  xAE
042A2:  MOVLB  0
042A4:  CALL   2720
042A8:  MOVFF  B8E,BAC
042AC:  MOVLB  B
042AE:  CLRF   xAD
042B0:  MOVLW  0F
042B2:  MOVWF  xAF
042B4:  MOVLW  92
042B6:  MOVWF  xAE
042B8:  MOVLB  0
042BA:  CALL   2720
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
042BE:  MOVFF  B8E,BAC
042C2:  MOVLB  B
042C4:  CLRF   xAD
042C6:  MOVLW  0F
042C8:  MOVWF  xAF
042CA:  MOVLW  89
042CC:  MOVWF  xAE
042CE:  MOVLB  0
042D0:  CALL   2720
042D4:  MOVFF  B8E,BAC
042D8:  MOVLB  B
042DA:  CLRF   xAD
042DC:  MOVLW  0F
042DE:  MOVWF  xAF
042E0:  MOVLW  92
042E2:  MOVWF  xAE
042E4:  MOVLB  0
042E6:  CALL   2720
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
042EA:  MOVFF  B8F,BA9
042EE:  MOVFF  B8E,BA8
042F2:  MOVFF  B8D,BA7
042F6:  MOVFF  B8C,BA6
042FA:  MOVLW  0B
042FC:  MOVLB  B
042FE:  MOVWF  xAB
04300:  MOVLW  9A
04302:  MOVWF  xAA
04304:  CLRF   xAD
04306:  MOVLW  05
04308:  MOVWF  xAC
0430A:  MOVLB  0
0430C:  CALL   3870
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04310:  MOVFF  B8E,BAC
04314:  MOVLW  01
04316:  MOVLB  B
04318:  MOVWF  xAD
0431A:  MOVLW  0F
0431C:  MOVWF  xAF
0431E:  MOVLW  89
04320:  MOVWF  xAE
04322:  MOVLB  0
04324:  CALL   2720
04328:  MOVFF  B8E,BAC
0432C:  MOVLB  B
0432E:  CLRF   xAD
04330:  MOVLW  0F
04332:  MOVWF  xAF
04334:  MOVLW  92
04336:  MOVWF  xAE
04338:  MOVLB  0
0433A:  CALL   2720
....................    }
0433E:  GOTO   4342
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
04342:  MOVLB  B
04344:  CLRF   x9F
04346:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
04348:  MOVFF  B8F,BA9
0434C:  MOVFF  B8E,BA8
04350:  MOVFF  B8D,BA7
04354:  MOVFF  B8C,BA6
04358:  CALL   3ADC
0435C:  MOVF   01,W
0435E:  ANDLW  01
04360:  SUBLW  01
04362:  BTFSS  FD8.2
04364:  GOTO   43B6
....................       if(timeout_counter > 10)
04368:  MOVLB  B
0436A:  MOVF   x9F,W
0436C:  SUBLW  0A
0436E:  BTFSS  FD8.0
04370:  BRA    4378
04372:  MOVLB  0
04374:  GOTO   438A
04378:  MOVLB  0
....................          delay_ms(200);
0437A:  MOVLW  C8
0437C:  MOVLB  B
0437E:  MOVWF  xA6
04380:  MOVLB  0
04382:  CALL   1F10
04386:  GOTO   4396
....................       else
....................          delay_ms(10);   
0438A:  MOVLW  0A
0438C:  MOVLB  B
0438E:  MOVWF  xA6
04390:  MOVLB  0
04392:  CALL   1F10
....................       
....................       if(timeout_counter > 100){
04396:  MOVLB  B
04398:  MOVF   x9F,W
0439A:  SUBLW  64
0439C:  BTFSS  FD8.0
0439E:  BRA    43A6
043A0:  MOVLB  0
043A2:  GOTO   43AC
043A6:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
043A8:  GOTO   43B6
....................       }  
....................       timeout_counter++;
043AC:  MOVLB  B
043AE:  INCF   x9F,F
043B0:  MOVLB  0
043B2:  GOTO   4348
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
043B6:  RETURN 0
.................... }
....................  
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x __ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 __ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 __ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 __
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
05846:  MOVLB  3
05848:  MOVF   x16,F
0584A:  BTFSC  FD8.2
0584C:  BRA    5854
0584E:  MOVLB  0
05850:  GOTO   59AC
05854:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
05856:  MOVLW  06
05858:  MOVLB  3
0585A:  MOVWF  x1D
0585C:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
0585E:  MOVLW  20
05860:  MOVLB  3
05862:  MOVWF  x1E
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
05864:  MOVFF  31B,32A
05868:  MOVFF  31C,32B
0586C:  CLRF   x2C
0586E:  CLRF   x2D
05870:  MOVF   x2A,W
05872:  MOVWF  00
05874:  CLRF   01
05876:  CLRF   02
05878:  CLRF   03
0587A:  MOVFF  00,31F
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0587E:  MOVFF  31A,32A
05882:  MOVFF  31B,32B
05886:  MOVFF  31C,32C
0588A:  CLRF   x2D
0588C:  MOVF   x2A,W
0588E:  MOVWF  00
05890:  CLRF   01
05892:  CLRF   02
05894:  CLRF   03
05896:  MOVFF  00,320
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
0589A:  MOVF   x19,W
0589C:  MOVWF  00
0589E:  CLRF   01
058A0:  CLRF   02
058A2:  CLRF   03
058A4:  MOVFF  00,321
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
058A8:  MOVFF  317,BAC
058AC:  MOVLB  B
058AE:  CLRF   xAD
058B0:  MOVLW  0F
058B2:  MOVWF  xAF
058B4:  MOVLW  89
058B6:  MOVWF  xAE
058B8:  MOVLB  0
058BA:  CALL   2720
058BE:  MOVFF  317,BAC
058C2:  MOVLB  B
058C4:  CLRF   xAD
058C6:  MOVLW  0F
058C8:  MOVWF  xAF
058CA:  MOVLW  92
058CC:  MOVWF  xAE
058CE:  MOVLB  0
058D0:  CALL   2720
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
058D4:  MOVFF  318,BA9
058D8:  MOVFF  317,BA8
058DC:  MOVFF  316,BA7
058E0:  MOVFF  315,BA6
058E4:  MOVLW  03
058E6:  MOVLB  B
058E8:  MOVWF  xAB
058EA:  MOVLW  1D
058EC:  MOVWF  xAA
058EE:  CLRF   xAD
058F0:  MOVLW  01
058F2:  MOVWF  xAC
058F4:  MOVLB  0
058F6:  CALL   3870
....................       output_high(flash_stream.cs_pin);
058FA:  MOVFF  317,BAC
058FE:  MOVLW  01
05900:  MOVLB  B
05902:  MOVWF  xAD
05904:  MOVLW  0F
05906:  MOVWF  xAF
05908:  MOVLW  89
0590A:  MOVWF  xAE
0590C:  MOVLB  0
0590E:  CALL   2720
05912:  MOVFF  317,BAC
05916:  MOVLB  B
05918:  CLRF   xAD
0591A:  MOVLW  0F
0591C:  MOVWF  xAF
0591E:  MOVLW  92
05920:  MOVWF  xAE
05922:  MOVLB  0
05924:  CALL   2720
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
05928:  MOVFF  317,BAC
0592C:  MOVLB  B
0592E:  CLRF   xAD
05930:  MOVLW  0F
05932:  MOVWF  xAF
05934:  MOVLW  89
05936:  MOVWF  xAE
05938:  MOVLB  0
0593A:  CALL   2720
0593E:  MOVFF  317,BAC
05942:  MOVLB  B
05944:  CLRF   xAD
05946:  MOVLW  0F
05948:  MOVWF  xAF
0594A:  MOVLW  92
0594C:  MOVWF  xAE
0594E:  MOVLB  0
05950:  CALL   2720
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
05954:  MOVFF  318,BA9
05958:  MOVFF  317,BA8
0595C:  MOVFF  316,BA7
05960:  MOVFF  315,BA6
05964:  MOVLW  03
05966:  MOVLB  B
05968:  MOVWF  xAB
0596A:  MOVLW  1E
0596C:  MOVWF  xAA
0596E:  CLRF   xAD
05970:  MOVLW  04
05972:  MOVWF  xAC
05974:  MOVLB  0
05976:  CALL   3870
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0597A:  MOVFF  317,BAC
0597E:  MOVLW  01
05980:  MOVLB  B
05982:  MOVWF  xAD
05984:  MOVLW  0F
05986:  MOVWF  xAF
05988:  MOVLW  89
0598A:  MOVWF  xAE
0598C:  MOVLB  0
0598E:  CALL   2720
05992:  MOVFF  317,BAC
05996:  MOVLB  B
05998:  CLRF   xAD
0599A:  MOVLW  0F
0599C:  MOVWF  xAF
0599E:  MOVLW  92
059A0:  MOVWF  xAE
059A2:  MOVLB  0
059A4:  CALL   2720
....................    }
059A8:  GOTO   5B2C
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
059AC:  MOVLB  3
059AE:  DECFSZ x16,W
059B0:  BRA    59B6
059B2:  BRA    59BC
059B4:  MOVLB  0
059B6:  MOVLB  0
059B8:  GOTO   5B2C
059BC:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
059BE:  MOVLW  06
059C0:  MOVLB  3
059C2:  MOVWF  x22
059C4:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
059C6:  MOVLW  21
059C8:  MOVLB  3
059CA:  MOVWF  x23
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
059CC:  MOVFF  31C,32A
059D0:  CLRF   x2B
059D2:  CLRF   x2C
059D4:  CLRF   x2D
059D6:  MOVF   x2A,W
059D8:  MOVWF  00
059DA:  CLRF   01
059DC:  CLRF   02
059DE:  CLRF   03
059E0:  MOVFF  00,324
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
059E4:  MOVFF  31B,32A
059E8:  MOVFF  31C,32B
059EC:  CLRF   x2C
059EE:  CLRF   x2D
059F0:  MOVF   x2A,W
059F2:  MOVWF  00
059F4:  CLRF   01
059F6:  CLRF   02
059F8:  CLRF   03
059FA:  MOVFF  00,325
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
059FE:  MOVFF  31A,32A
05A02:  MOVFF  31B,32B
05A06:  MOVFF  31C,32C
05A0A:  CLRF   x2D
05A0C:  MOVF   x2A,W
05A0E:  MOVWF  00
05A10:  CLRF   01
05A12:  CLRF   02
05A14:  CLRF   03
05A16:  MOVFF  00,326
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
05A1A:  MOVF   x19,W
05A1C:  MOVWF  00
05A1E:  CLRF   01
05A20:  CLRF   02
05A22:  CLRF   03
05A24:  MOVFF  00,327
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
05A28:  MOVFF  317,BAC
05A2C:  MOVLB  B
05A2E:  CLRF   xAD
05A30:  MOVLW  0F
05A32:  MOVWF  xAF
05A34:  MOVLW  89
05A36:  MOVWF  xAE
05A38:  MOVLB  0
05A3A:  CALL   2720
05A3E:  MOVFF  317,BAC
05A42:  MOVLB  B
05A44:  CLRF   xAD
05A46:  MOVLW  0F
05A48:  MOVWF  xAF
05A4A:  MOVLW  92
05A4C:  MOVWF  xAE
05A4E:  MOVLB  0
05A50:  CALL   2720
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
05A54:  MOVFF  318,BA9
05A58:  MOVFF  317,BA8
05A5C:  MOVFF  316,BA7
05A60:  MOVFF  315,BA6
05A64:  MOVLW  03
05A66:  MOVLB  B
05A68:  MOVWF  xAB
05A6A:  MOVLW  22
05A6C:  MOVWF  xAA
05A6E:  CLRF   xAD
05A70:  MOVLW  01
05A72:  MOVWF  xAC
05A74:  MOVLB  0
05A76:  CALL   3870
....................       output_high(flash_stream.cs_pin);
05A7A:  MOVFF  317,BAC
05A7E:  MOVLW  01
05A80:  MOVLB  B
05A82:  MOVWF  xAD
05A84:  MOVLW  0F
05A86:  MOVWF  xAF
05A88:  MOVLW  89
05A8A:  MOVWF  xAE
05A8C:  MOVLB  0
05A8E:  CALL   2720
05A92:  MOVFF  317,BAC
05A96:  MOVLB  B
05A98:  CLRF   xAD
05A9A:  MOVLW  0F
05A9C:  MOVWF  xAF
05A9E:  MOVLW  92
05AA0:  MOVWF  xAE
05AA2:  MOVLB  0
05AA4:  CALL   2720
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
05AA8:  MOVFF  317,BAC
05AAC:  MOVLB  B
05AAE:  CLRF   xAD
05AB0:  MOVLW  0F
05AB2:  MOVWF  xAF
05AB4:  MOVLW  89
05AB6:  MOVWF  xAE
05AB8:  MOVLB  0
05ABA:  CALL   2720
05ABE:  MOVFF  317,BAC
05AC2:  MOVLB  B
05AC4:  CLRF   xAD
05AC6:  MOVLW  0F
05AC8:  MOVWF  xAF
05ACA:  MOVLW  92
05ACC:  MOVWF  xAE
05ACE:  MOVLB  0
05AD0:  CALL   2720
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
05AD4:  MOVFF  318,BA9
05AD8:  MOVFF  317,BA8
05ADC:  MOVFF  316,BA7
05AE0:  MOVFF  315,BA6
05AE4:  MOVLW  03
05AE6:  MOVLB  B
05AE8:  MOVWF  xAB
05AEA:  MOVLW  23
05AEC:  MOVWF  xAA
05AEE:  CLRF   xAD
05AF0:  MOVLW  05
05AF2:  MOVWF  xAC
05AF4:  MOVLB  0
05AF6:  CALL   3870
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
05AFA:  MOVFF  317,BAC
05AFE:  MOVLW  01
05B00:  MOVLB  B
05B02:  MOVWF  xAD
05B04:  MOVLW  0F
05B06:  MOVWF  xAF
05B08:  MOVLW  89
05B0A:  MOVWF  xAE
05B0C:  MOVLB  0
05B0E:  CALL   2720
05B12:  MOVFF  317,BAC
05B16:  MOVLB  B
05B18:  CLRF   xAD
05B1A:  MOVLW  0F
05B1C:  MOVWF  xAF
05B1E:  MOVLW  92
05B20:  MOVWF  xAE
05B22:  MOVLB  0
05B24:  CALL   2720
....................    }
05B28:  GOTO   5B2C
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
05B2C:  MOVLB  3
05B2E:  CLRF   x28
05B30:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
05B32:  MOVFF  318,BA9
05B36:  MOVFF  317,BA8
05B3A:  MOVFF  316,BA7
05B3E:  MOVFF  315,BA6
05B42:  CALL   3ADC
05B46:  MOVF   01,W
05B48:  ANDLW  01
05B4A:  SUBLW  01
05B4C:  BTFSS  FD8.2
05B4E:  GOTO   5BA0
....................       if(timeout_counter > 10)
05B52:  MOVLB  3
05B54:  MOVF   x28,W
05B56:  SUBLW  0A
05B58:  BTFSS  FD8.0
05B5A:  BRA    5B62
05B5C:  MOVLB  0
05B5E:  GOTO   5B74
05B62:  MOVLB  0
....................          delay_ms(200);
05B64:  MOVLW  C8
05B66:  MOVLB  B
05B68:  MOVWF  xA6
05B6A:  MOVLB  0
05B6C:  CALL   1F10
05B70:  GOTO   5B80
....................       else
....................          delay_ms(10);   
05B74:  MOVLW  0A
05B76:  MOVLB  B
05B78:  MOVWF  xA6
05B7A:  MOVLB  0
05B7C:  CALL   1F10
....................       
....................       if(timeout_counter > 100){
05B80:  MOVLB  3
05B82:  MOVF   x28,W
05B84:  SUBLW  64
05B86:  BTFSS  FD8.0
05B88:  BRA    5B90
05B8A:  MOVLB  0
05B8C:  GOTO   5B96
05B90:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
05B92:  GOTO   5BA0
....................       }  
....................       timeout_counter++;
05B96:  MOVLB  3
05B98:  INCF   x28,F
05B9A:  MOVLB  0
05B9C:  GOTO   5B32
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
05BA0:  RETURN 0
.................... }
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address){
....................    int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................    
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    return read_data;
.................... }
....................  
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
02B8C:  MOVLB  B
02B8E:  MOVF   x4B,F
02B90:  BTFSC  FD8.2
02B92:  BRA    2B9A
02B94:  MOVLB  0
02B96:  GOTO   2C8A
02B9A:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
02B9C:  MOVLW  03
02B9E:  MOVLB  B
02BA0:  MOVWF  x58
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02BA2:  MOVFF  B50,B62
02BA6:  MOVFF  B51,B63
02BAA:  CLRF   x64
02BAC:  CLRF   x65
02BAE:  MOVF   x62,W
02BB0:  MOVWF  00
02BB2:  CLRF   01
02BB4:  CLRF   02
02BB6:  CLRF   03
02BB8:  MOVFF  00,B59
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02BBC:  MOVFF  B4F,B62
02BC0:  MOVFF  B50,B63
02BC4:  MOVFF  B51,B64
02BC8:  CLRF   x65
02BCA:  MOVF   x62,W
02BCC:  MOVWF  00
02BCE:  CLRF   01
02BD0:  CLRF   02
02BD2:  CLRF   03
02BD4:  MOVFF  00,B5A
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02BD8:  MOVF   x4E,W
02BDA:  MOVWF  00
02BDC:  CLRF   01
02BDE:  CLRF   02
02BE0:  CLRF   03
02BE2:  MOVFF  00,B5B
....................             
....................       output_low(flash_stream.cs_pin);
02BE6:  MOVFF  B4C,BAC
02BEA:  CLRF   xAD
02BEC:  MOVLW  0F
02BEE:  MOVWF  xAF
02BF0:  MOVLW  89
02BF2:  MOVWF  xAE
02BF4:  MOVLB  0
02BF6:  CALL   2720
02BFA:  MOVFF  B4C,BAC
02BFE:  MOVLB  B
02C00:  CLRF   xAD
02C02:  MOVLW  0F
02C04:  MOVWF  xAF
02C06:  MOVLW  92
02C08:  MOVWF  xAE
02C0A:  MOVLB  0
02C0C:  CALL   2720
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
02C10:  MOVFF  B4D,BAF
02C14:  MOVFF  B4C,BAE
02C18:  MOVFF  B4B,BAD
02C1C:  MOVFF  B4A,BAC
02C20:  MOVLW  0B
02C22:  MOVLB  B
02C24:  MOVWF  xB1
02C26:  MOVLW  58
02C28:  MOVWF  xB0
02C2A:  CLRF   xB3
02C2C:  MOVLW  04
02C2E:  MOVWF  xB2
02C30:  MOVFF  B53,BB5
02C34:  MOVFF  B52,BB4
02C38:  MOVFF  B57,BB9
02C3C:  MOVFF  B56,BB8
02C40:  MOVFF  B55,BB7
02C44:  MOVFF  B54,BB6
02C48:  MOVLB  0
02C4A:  CALL   286C
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
02C4E:  MOVLW  02
02C50:  MOVWF  00
02C52:  DECFSZ 00,F
02C54:  BRA    2C52
02C56:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02C58:  MOVFF  B4C,BAC
02C5C:  MOVLW  01
02C5E:  MOVLB  B
02C60:  MOVWF  xAD
02C62:  MOVLW  0F
02C64:  MOVWF  xAF
02C66:  MOVLW  89
02C68:  MOVWF  xAE
02C6A:  MOVLB  0
02C6C:  CALL   2720
02C70:  MOVFF  B4C,BAC
02C74:  MOVLB  B
02C76:  CLRF   xAD
02C78:  MOVLW  0F
02C7A:  MOVWF  xAF
02C7C:  MOVLW  92
02C7E:  MOVWF  xAE
02C80:  MOVLB  0
02C82:  CALL   2720
....................    }
02C86:  GOTO   2D9E
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
02C8A:  MOVLB  B
02C8C:  DECFSZ x4B,W
02C8E:  BRA    2C94
02C90:  BRA    2C9A
02C92:  MOVLB  0
02C94:  MOVLB  0
02C96:  GOTO   2D9E
02C9A:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
02C9C:  MOVLW  13
02C9E:  MOVLB  B
02CA0:  MOVWF  x5C
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
02CA2:  MOVFF  B51,B62
02CA6:  CLRF   x63
02CA8:  CLRF   x64
02CAA:  CLRF   x65
02CAC:  MOVF   x62,W
02CAE:  MOVWF  00
02CB0:  CLRF   01
02CB2:  CLRF   02
02CB4:  CLRF   03
02CB6:  MOVFF  00,B5D
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02CBA:  MOVFF  B50,B62
02CBE:  MOVFF  B51,B63
02CC2:  CLRF   x64
02CC4:  CLRF   x65
02CC6:  MOVF   x62,W
02CC8:  MOVWF  00
02CCA:  CLRF   01
02CCC:  CLRF   02
02CCE:  CLRF   03
02CD0:  MOVFF  00,B5E
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02CD4:  MOVFF  B4F,B62
02CD8:  MOVFF  B50,B63
02CDC:  MOVFF  B51,B64
02CE0:  CLRF   x65
02CE2:  MOVF   x62,W
02CE4:  MOVWF  00
02CE6:  CLRF   01
02CE8:  CLRF   02
02CEA:  CLRF   03
02CEC:  MOVFF  00,B5F
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02CF0:  MOVF   x4E,W
02CF2:  MOVWF  00
02CF4:  CLRF   01
02CF6:  CLRF   02
02CF8:  CLRF   03
02CFA:  MOVFF  00,B60
....................    
....................       output_low(flash_stream.cs_pin);
02CFE:  MOVFF  B4C,BAC
02D02:  CLRF   xAD
02D04:  MOVLW  0F
02D06:  MOVWF  xAF
02D08:  MOVLW  89
02D0A:  MOVWF  xAE
02D0C:  MOVLB  0
02D0E:  CALL   2720
02D12:  MOVFF  B4C,BAC
02D16:  MOVLB  B
02D18:  CLRF   xAD
02D1A:  MOVLW  0F
02D1C:  MOVWF  xAF
02D1E:  MOVLW  92
02D20:  MOVWF  xAE
02D22:  MOVLB  0
02D24:  CALL   2720
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
02D28:  MOVFF  B4D,BAF
02D2C:  MOVFF  B4C,BAE
02D30:  MOVFF  B4B,BAD
02D34:  MOVFF  B4A,BAC
02D38:  MOVLW  0B
02D3A:  MOVLB  B
02D3C:  MOVWF  xB1
02D3E:  MOVLW  5C
02D40:  MOVWF  xB0
02D42:  CLRF   xB3
02D44:  MOVLW  05
02D46:  MOVWF  xB2
02D48:  MOVFF  B53,BB5
02D4C:  MOVFF  B52,BB4
02D50:  MOVFF  B57,BB9
02D54:  MOVFF  B56,BB8
02D58:  MOVFF  B55,BB7
02D5C:  MOVFF  B54,BB6
02D60:  MOVLB  0
02D62:  CALL   286C
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
02D66:  MOVLW  02
02D68:  MOVWF  00
02D6A:  DECFSZ 00,F
02D6C:  BRA    2D6A
02D6E:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02D70:  MOVFF  B4C,BAC
02D74:  MOVLW  01
02D76:  MOVLB  B
02D78:  MOVWF  xAD
02D7A:  MOVLW  0F
02D7C:  MOVWF  xAF
02D7E:  MOVLW  89
02D80:  MOVWF  xAE
02D82:  MOVLB  0
02D84:  CALL   2720
02D88:  MOVFF  B4C,BAC
02D8C:  MOVLB  B
02D8E:  CLRF   xAD
02D90:  MOVLW  0F
02D92:  MOVWF  xAF
02D94:  MOVLW  92
02D96:  MOVWF  xAE
02D98:  MOVLB  0
02D9A:  CALL   2720
....................    }
....................    return;
02D9E:  RETURN 0
.................... }
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
....................       flash_cmd[4] = write_data;
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
....................       flash_cmd[5] = write_data;
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
03B7C:  MOVLB  B
03B7E:  MOVF   x8F,F
03B80:  BTFSC  FD8.2
03B82:  BRA    3B8A
03B84:  MOVLB  0
03B86:  GOTO   3CF8
03B8A:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
03B8C:  MOVLW  06
03B8E:  MOVLB  B
03B90:  MOVWF  x9A
03B92:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
03B94:  MOVLW  02
03B96:  MOVLB  B
03B98:  MOVWF  x9B
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03B9A:  MOVFF  B94,BA7
03B9E:  MOVFF  B95,BA8
03BA2:  CLRF   xA9
03BA4:  CLRF   xAA
03BA6:  MOVF   xA7,W
03BA8:  MOVWF  00
03BAA:  CLRF   01
03BAC:  CLRF   02
03BAE:  CLRF   03
03BB0:  MOVFF  00,B9C
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03BB4:  MOVFF  B93,BA7
03BB8:  MOVFF  B94,BA8
03BBC:  MOVFF  B95,BA9
03BC0:  CLRF   xAA
03BC2:  MOVF   xA7,W
03BC4:  MOVWF  00
03BC6:  CLRF   01
03BC8:  CLRF   02
03BCA:  CLRF   03
03BCC:  MOVFF  00,B9D
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
03BD0:  MOVF   x92,W
03BD2:  MOVWF  00
03BD4:  CLRF   01
03BD6:  CLRF   02
03BD8:  CLRF   03
03BDA:  MOVFF  00,B9E
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03BDE:  MOVFF  B90,BAC
03BE2:  CLRF   xAD
03BE4:  MOVLW  0F
03BE6:  MOVWF  xAF
03BE8:  MOVLW  89
03BEA:  MOVWF  xAE
03BEC:  MOVLB  0
03BEE:  CALL   2720
03BF2:  MOVFF  B90,BAC
03BF6:  MOVLB  B
03BF8:  CLRF   xAD
03BFA:  MOVLW  0F
03BFC:  MOVWF  xAF
03BFE:  MOVLW  92
03C00:  MOVWF  xAE
03C02:  MOVLB  0
03C04:  CALL   2720
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03C08:  MOVFF  B91,BA9
03C0C:  MOVFF  B90,BA8
03C10:  MOVFF  B8F,BA7
03C14:  MOVFF  B8E,BA6
03C18:  MOVLW  0B
03C1A:  MOVLB  B
03C1C:  MOVWF  xAB
03C1E:  MOVLW  9A
03C20:  MOVWF  xAA
03C22:  CLRF   xAD
03C24:  MOVLW  01
03C26:  MOVWF  xAC
03C28:  MOVLB  0
03C2A:  CALL   3870
....................       output_high(flash_stream.cs_pin);
03C2E:  MOVFF  B90,BAC
03C32:  MOVLW  01
03C34:  MOVLB  B
03C36:  MOVWF  xAD
03C38:  MOVLW  0F
03C3A:  MOVWF  xAF
03C3C:  MOVLW  89
03C3E:  MOVWF  xAE
03C40:  MOVLB  0
03C42:  CALL   2720
03C46:  MOVFF  B90,BAC
03C4A:  MOVLB  B
03C4C:  CLRF   xAD
03C4E:  MOVLW  0F
03C50:  MOVWF  xAF
03C52:  MOVLW  92
03C54:  MOVWF  xAE
03C56:  MOVLB  0
03C58:  CALL   2720
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
03C5C:  MOVFF  B90,BAC
03C60:  MOVLB  B
03C62:  CLRF   xAD
03C64:  MOVLW  0F
03C66:  MOVWF  xAF
03C68:  MOVLW  89
03C6A:  MOVWF  xAE
03C6C:  MOVLB  0
03C6E:  CALL   2720
03C72:  MOVFF  B90,BAC
03C76:  MOVLB  B
03C78:  CLRF   xAD
03C7A:  MOVLW  0F
03C7C:  MOVWF  xAF
03C7E:  MOVLW  92
03C80:  MOVWF  xAE
03C82:  MOVLB  0
03C84:  CALL   2720
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
03C88:  MOVFF  B91,BA9
03C8C:  MOVFF  B90,BA8
03C90:  MOVFF  B8F,BA7
03C94:  MOVFF  B8E,BA6
03C98:  MOVLW  0B
03C9A:  MOVLB  B
03C9C:  MOVWF  xAB
03C9E:  MOVLW  9B
03CA0:  MOVWF  xAA
03CA2:  MOVLW  04
03CA4:  MOVWF  xAC
03CA6:  MOVFF  B97,BAE
03CAA:  MOVFF  B96,BAD
03CAE:  MOVFF  B99,BB0
03CB2:  MOVFF  B98,BAF
03CB6:  MOVLB  0
03CB8:  CALL   3960
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
03CBC:  MOVLW  02
03CBE:  MOVWF  00
03CC0:  DECFSZ 00,F
03CC2:  BRA    3CC0
03CC4:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03CC6:  MOVFF  B90,BAC
03CCA:  MOVLW  01
03CCC:  MOVLB  B
03CCE:  MOVWF  xAD
03CD0:  MOVLW  0F
03CD2:  MOVWF  xAF
03CD4:  MOVLW  89
03CD6:  MOVWF  xAE
03CD8:  MOVLB  0
03CDA:  CALL   2720
03CDE:  MOVFF  B90,BAC
03CE2:  MOVLB  B
03CE4:  CLRF   xAD
03CE6:  MOVLW  0F
03CE8:  MOVWF  xAF
03CEA:  MOVLW  92
03CEC:  MOVWF  xAE
03CEE:  MOVLB  0
03CF0:  CALL   2720
....................    }
03CF4:  GOTO   3E8A
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
03CF8:  MOVLB  B
03CFA:  DECFSZ x8F,W
03CFC:  BRA    3D02
03CFE:  BRA    3D08
03D00:  MOVLB  0
03D02:  MOVLB  0
03D04:  GOTO   3E8A
03D08:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
03D0A:  MOVLW  06
03D0C:  MOVLB  B
03D0E:  MOVWF  x9F
03D10:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
03D12:  MOVLW  12
03D14:  MOVLB  B
03D16:  MOVWF  xA0
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
03D18:  MOVFF  B95,BA7
03D1C:  CLRF   xA8
03D1E:  CLRF   xA9
03D20:  CLRF   xAA
03D22:  MOVF   xA7,W
03D24:  MOVWF  00
03D26:  CLRF   01
03D28:  CLRF   02
03D2A:  CLRF   03
03D2C:  MOVFF  00,BA1
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03D30:  MOVFF  B94,BA7
03D34:  MOVFF  B95,BA8
03D38:  CLRF   xA9
03D3A:  CLRF   xAA
03D3C:  MOVF   xA7,W
03D3E:  MOVWF  00
03D40:  CLRF   01
03D42:  CLRF   02
03D44:  CLRF   03
03D46:  MOVFF  00,BA2
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03D4A:  MOVFF  B93,BA7
03D4E:  MOVFF  B94,BA8
03D52:  MOVFF  B95,BA9
03D56:  CLRF   xAA
03D58:  MOVF   xA7,W
03D5A:  MOVWF  00
03D5C:  CLRF   01
03D5E:  CLRF   02
03D60:  CLRF   03
03D62:  MOVFF  00,BA3
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
03D66:  MOVF   x92,W
03D68:  MOVWF  00
03D6A:  CLRF   01
03D6C:  CLRF   02
03D6E:  CLRF   03
03D70:  MOVFF  00,BA4
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03D74:  MOVFF  B90,BAC
03D78:  CLRF   xAD
03D7A:  MOVLW  0F
03D7C:  MOVWF  xAF
03D7E:  MOVLW  89
03D80:  MOVWF  xAE
03D82:  MOVLB  0
03D84:  CALL   2720
03D88:  MOVFF  B90,BAC
03D8C:  MOVLB  B
03D8E:  CLRF   xAD
03D90:  MOVLW  0F
03D92:  MOVWF  xAF
03D94:  MOVLW  92
03D96:  MOVWF  xAE
03D98:  MOVLB  0
03D9A:  CALL   2720
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03D9E:  MOVFF  B91,BA9
03DA2:  MOVFF  B90,BA8
03DA6:  MOVFF  B8F,BA7
03DAA:  MOVFF  B8E,BA6
03DAE:  MOVLW  0B
03DB0:  MOVLB  B
03DB2:  MOVWF  xAB
03DB4:  MOVLW  9F
03DB6:  MOVWF  xAA
03DB8:  CLRF   xAD
03DBA:  MOVLW  01
03DBC:  MOVWF  xAC
03DBE:  MOVLB  0
03DC0:  CALL   3870
....................       output_high(flash_stream.cs_pin);
03DC4:  MOVFF  B90,BAC
03DC8:  MOVLW  01
03DCA:  MOVLB  B
03DCC:  MOVWF  xAD
03DCE:  MOVLW  0F
03DD0:  MOVWF  xAF
03DD2:  MOVLW  89
03DD4:  MOVWF  xAE
03DD6:  MOVLB  0
03DD8:  CALL   2720
03DDC:  MOVFF  B90,BAC
03DE0:  MOVLB  B
03DE2:  CLRF   xAD
03DE4:  MOVLW  0F
03DE6:  MOVWF  xAF
03DE8:  MOVLW  92
03DEA:  MOVWF  xAE
03DEC:  MOVLB  0
03DEE:  CALL   2720
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
03DF2:  MOVFF  B90,BAC
03DF6:  MOVLB  B
03DF8:  CLRF   xAD
03DFA:  MOVLW  0F
03DFC:  MOVWF  xAF
03DFE:  MOVLW  89
03E00:  MOVWF  xAE
03E02:  MOVLB  0
03E04:  CALL   2720
03E08:  MOVFF  B90,BAC
03E0C:  MOVLB  B
03E0E:  CLRF   xAD
03E10:  MOVLW  0F
03E12:  MOVWF  xAF
03E14:  MOVLW  92
03E16:  MOVWF  xAE
03E18:  MOVLB  0
03E1A:  CALL   2720
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
03E1E:  MOVFF  B91,BA9
03E22:  MOVFF  B90,BA8
03E26:  MOVFF  B8F,BA7
03E2A:  MOVFF  B8E,BA6
03E2E:  MOVLW  0B
03E30:  MOVLB  B
03E32:  MOVWF  xAB
03E34:  MOVLW  A0
03E36:  MOVWF  xAA
03E38:  MOVLW  05
03E3A:  MOVWF  xAC
03E3C:  MOVFF  B97,BAE
03E40:  MOVFF  B96,BAD
03E44:  MOVFF  B99,BB0
03E48:  MOVFF  B98,BAF
03E4C:  MOVLB  0
03E4E:  CALL   3960
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
03E52:  MOVLW  02
03E54:  MOVWF  00
03E56:  DECFSZ 00,F
03E58:  BRA    3E56
03E5A:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03E5C:  MOVFF  B90,BAC
03E60:  MOVLW  01
03E62:  MOVLB  B
03E64:  MOVWF  xAD
03E66:  MOVLW  0F
03E68:  MOVWF  xAF
03E6A:  MOVLW  89
03E6C:  MOVWF  xAE
03E6E:  MOVLB  0
03E70:  CALL   2720
03E74:  MOVFF  B90,BAC
03E78:  MOVLB  B
03E7A:  CLRF   xAD
03E7C:  MOVLW  0F
03E7E:  MOVWF  xAF
03E80:  MOVLW  92
03E82:  MOVWF  xAE
03E84:  MOVLB  0
03E86:  CALL   2720
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
03E8A:  MOVLB  B
03E8C:  CLRF   xA5
03E8E:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
03E90:  MOVFF  B91,BA9
03E94:  MOVFF  B90,BA8
03E98:  MOVFF  B8F,BA7
03E9C:  MOVFF  B8E,BA6
03EA0:  CALL   3ADC
03EA4:  MOVF   01,W
03EA6:  ANDLW  01
03EA8:  SUBLW  01
03EAA:  BTFSS  FD8.2
03EAC:  GOTO   3EFE
....................       if(timeout_counter > 10)
03EB0:  MOVLB  B
03EB2:  MOVF   xA5,W
03EB4:  SUBLW  0A
03EB6:  BTFSS  FD8.0
03EB8:  BRA    3EC0
03EBA:  MOVLB  0
03EBC:  GOTO   3ED2
03EC0:  MOVLB  0
....................          delay_ms(200);
03EC2:  MOVLW  C8
03EC4:  MOVLB  B
03EC6:  MOVWF  xA6
03EC8:  MOVLB  0
03ECA:  CALL   1F10
03ECE:  GOTO   3EDE
....................       else
....................          delay_ms(10);   
03ED2:  MOVLW  0A
03ED4:  MOVLB  B
03ED6:  MOVWF  xA6
03ED8:  MOVLB  0
03EDA:  CALL   1F10
....................       
....................       if(timeout_counter > 100){
03EDE:  MOVLB  B
03EE0:  MOVF   xA5,W
03EE2:  SUBLW  64
03EE4:  BTFSS  FD8.0
03EE6:  BRA    3EEE
03EE8:  MOVLB  0
03EEA:  GOTO   3EF4
03EEE:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
03EF0:  GOTO   3EFE
....................       }  
....................       timeout_counter++;
03EF4:  MOVLB  B
03EF6:  INCF   xA5,F
03EF8:  MOVLB  0
03EFA:  GOTO   3E90
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
03EFE:  RETURN 0
.................... }
.................... 
....................  
.................... int1 is_connect(Flash flash_stream){
*
02AA0:  MOVLW  9F
02AA2:  MOVLB  2
02AA4:  MOVWF  xE9
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
02AA6:  MOVFF  2D3,BAC
02AAA:  MOVLB  B
02AAC:  CLRF   xAD
02AAE:  MOVLW  0F
02AB0:  MOVWF  xAF
02AB2:  MOVLW  89
02AB4:  MOVWF  xAE
02AB6:  MOVLB  0
02AB8:  CALL   2720
02ABC:  MOVFF  2D3,BAC
02AC0:  MOVLB  B
02AC2:  CLRF   xAD
02AC4:  MOVLW  0F
02AC6:  MOVWF  xAF
02AC8:  MOVLW  92
02ACA:  MOVWF  xAE
02ACC:  MOVLB  0
02ACE:  CALL   2720
....................    delay_us(10);  
02AD2:  MOVLW  0D
02AD4:  MOVWF  00
02AD6:  DECFSZ 00,F
02AD8:  BRA    2AD6
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
02ADA:  MOVFF  2D4,BAF
02ADE:  MOVFF  2D3,BAE
02AE2:  MOVFF  2D2,BAD
02AE6:  MOVFF  2D1,BAC
02AEA:  MOVLW  02
02AEC:  MOVLB  B
02AEE:  MOVWF  xB1
02AF0:  MOVLW  E9
02AF2:  MOVWF  xB0
02AF4:  CLRF   xB3
02AF6:  MOVLW  01
02AF8:  MOVWF  xB2
02AFA:  MOVLW  02
02AFC:  MOVWF  xB5
02AFE:  MOVLW  D5
02B00:  MOVWF  xB4
02B02:  CLRF   xB9
02B04:  CLRF   xB8
02B06:  CLRF   xB7
02B08:  MOVLW  14
02B0A:  MOVWF  xB6
02B0C:  MOVLB  0
02B0E:  CALL   286C
....................    output_high(flash_stream.cs_pin);
02B12:  MOVFF  2D3,BAC
02B16:  MOVLW  01
02B18:  MOVLB  B
02B1A:  MOVWF  xAD
02B1C:  MOVLW  0F
02B1E:  MOVWF  xAF
02B20:  MOVLW  89
02B22:  MOVWF  xAE
02B24:  MOVLB  0
02B26:  CALL   2720
02B2A:  MOVFF  2D3,BAC
02B2E:  MOVLB  B
02B30:  CLRF   xAD
02B32:  MOVLW  0F
02B34:  MOVWF  xAF
02B36:  MOVLW  92
02B38:  MOVWF  xAE
02B3A:  MOVLB  0
02B3C:  CALL   2720
....................    //fprintf(PC,"Read ID:%02X", read_id_data.fields.manufacturer_id);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
02B40:  MOVLB  2
02B42:  MOVF   xD5,W
02B44:  SUBLW  20
02B46:  BTFSC  FD8.2
02B48:  BRA    2B50
02B4A:  MOVLB  0
02B4C:  GOTO   2B5E
02B50:  MOVLB  0
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
02B52:  MOVLW  01
02B54:  MOVWF  01
02B56:  GOTO   2B66
....................    }
02B5A:  GOTO   2B66
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
02B5E:  MOVLW  00
02B60:  MOVWF  01
02B62:  GOTO   2B66
....................    }
02B66:  RETURN 0
.................... }
.................... 
.................... #include "../lib/tool/calc_tools.c"
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size)
.................... {
....................    if (payload_size <= 0) return 0;
*
02DA0:  MOVLB  B
02DA2:  MOVF   xDA,F
02DA4:  BTFSC  FD8.2
02DA6:  BRA    2DAE
02DA8:  MOVLB  0
02DAA:  GOTO   2DB8
02DAE:  MOVLB  0
02DB0:  MOVLW  00
02DB2:  MOVWF  01
02DB4:  GOTO   2E0A
.................... 
....................    unsigned int8 crc = *frame++;
02DB8:  MOVLB  B
02DBA:  MOVF   xD9,W
02DBC:  MOVWF  03
02DBE:  MOVF   xD8,W
02DC0:  INCF   xD8,F
02DC2:  BTFSC  FD8.2
02DC4:  INCF   xD9,F
02DC6:  MOVWF  FE9
02DC8:  MOVFF  03,FEA
02DCC:  MOVFF  FEF,BDB
02DD0:  MOVLB  0
....................    while (--payload_size > 0)
02DD2:  MOVLB  B
02DD4:  DECF   xDA,F
02DD6:  MOVF   xDA,F
02DD8:  BTFSS  FD8.2
02DDA:  BRA    2DE2
02DDC:  MOVLB  0
02DDE:  GOTO   2E02
02DE2:  MOVLB  0
....................       crc ^= *frame++;
02DE4:  MOVLB  B
02DE6:  MOVF   xD9,W
02DE8:  MOVWF  03
02DEA:  MOVF   xD8,W
02DEC:  INCF   xD8,F
02DEE:  BTFSC  FD8.2
02DF0:  INCF   xD9,F
02DF2:  MOVWF  FE9
02DF4:  MOVFF  03,FEA
02DF8:  MOVF   FEF,W
02DFA:  XORWF  xDB,F
02DFC:  MOVLB  0
02DFE:  GOTO   2DD2
.................... 
....................    return crc;
02E02:  MOVLB  B
02E04:  MOVF   xDB,W
02E06:  MOVWF  01
02E08:  MOVLB  0
02E0A:  RETURN 0
.................... }
.................... 
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size)
*
0EB78:  MOVLW  01
0EB7A:  MOVLB  3
0EB7C:  SUBWF  x17,W
0EB7E:  ADDWF  x15,W
0EB80:  MOVWF  FE9
0EB82:  MOVLW  00
0EB84:  ADDWFC x16,W
0EB86:  MOVWF  FEA
0EB88:  MOVFF  FEF,318
0EB8C:  MOVLW  01
0EB8E:  SUBWF  x17,W
0EB90:  MOVWF  x1A
0EB92:  MOVFF  316,BD9
0EB96:  MOVFF  315,BD8
0EB9A:  MOVFF  31A,BDA
0EB9E:  MOVLB  0
0EBA0:  CALL   2DA0
0EBA4:  MOVFF  01,319
.................... {
....................    unsigned int8 received_crc = frame[payload_size - 1]; // CRC is the last byte
....................    unsigned int8 calculated_crc = calc_crc8(frame, payload_size - 1);
....................    return (received_crc == calculated_crc);
0EBA8:  MOVLB  3
0EBAA:  MOVF   x19,W
0EBAC:  SUBWF  x18,W
0EBAE:  BTFSS  FD8.2
0EBB0:  BRA    EBB8
0EBB2:  MOVLB  0
0EBB4:  GOTO   EBC0
0EBB8:  MOVLB  0
0EBBA:  MOVLW  00
0EBBC:  GOTO   EBC2
0EBC0:  MOVLW  01
0EBC2:  MOVWF  01
0EBC4:  RETURN 0
.................... }
.................... 
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index)
.................... {
....................     buf[index + 0] = (int8)(value >> 24);   // MSB
....................     buf[index + 1] = (int8)(value >> 16);
....................     buf[index + 2] = (int8)(value >>  8);
....................     buf[index + 3] = (int8)(value      );   // LSB
.................... }
.................... 
.................... int32 lsb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] <<  0) |
....................            ((int32)buf[index + 1] <<  8) |
....................            ((int32)buf[index + 2] << 16) |
....................            ((int32)buf[index + 3] << 24);
.................... }
.................... 
.................... 
.................... int32 msb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] << 24) |
....................            ((int32)buf[index + 1] << 16) |
....................            ((int32)buf[index + 2] <<  8) |
....................            ((int32)buf[index + 3]);
.................... }
.................... 
.................... unsigned int32 int32_lsb_to_msb(unsigned int32 value)
.................... {
....................     return ((value & 0x000000FF) << 24) |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0xFF000000) >> 24);
.................... }
.................... 
.................... unsigned int32 int32_msb_to_lsb(unsigned int32 value)
.................... {
....................     return ((value & 0xFF000000) >> 24) |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x000000FF) << 24);
.................... }
.................... // End of file
.................... 
.................... #include "../lib/tool/smf_queue.c"
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x06AA1FFF
.................... #define CIGS_ENVIRO_START_ADDRESS 0x06AA2000
.................... #define CIGS_ENVIRO_END_ADDRESS 0x06B41FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS 0x06B42000
.................... #define CIGS_IV1_HEADER_END_ADDRESS 0x06BE1FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS 0x06BE2000
.................... #define CIGS_IV1_DATA_END_ADDRESS 0x06FE2FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS 0x06FE3000
.................... #define CIGS_IV2_HEADER_END_ADDRESS 0x07082FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS 0x07083000
.................... #define CIGS_IV2_DATA_END_ADDRESS 0x07483FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data)
.................... {   
....................    fprintf(PC, "Enqueue Flash Operation\r\n");
*
09ADC:  MOVLW  5A
09ADE:  MOVWF  FF6
09AE0:  MOVLW  03
09AE2:  MOVWF  FF7
09AE4:  MOVLW  00
09AE6:  MOVWF  FF8
09AE8:  CALL   1F3E
....................    int8 next_tail = (flash_queue.tail_index + 1) % SMF_QUEUE_SIZE;
09AEC:  MOVLW  01
09AEE:  MOVLB  1
09AF0:  ADDWF  x11,W
09AF2:  ANDLW  0F
09AF4:  MOVLB  2
09AF6:  MOVWF  x51
.................... 
....................    if(next_tail == flash_queue.head_index)
09AF8:  MOVLB  1
09AFA:  MOVF   x10,W
09AFC:  MOVLB  2
09AFE:  SUBWF  x51,W
09B00:  BTFSC  FD8.2
09B02:  BRA    9B0A
09B04:  MOVLB  0
09B06:  GOTO   9B20
09B0A:  MOVLB  0
....................       printf("Flash queue is full!!!\r\n");
09B0C:  MOVLW  74
09B0E:  MOVWF  FF6
09B10:  MOVLW  03
09B12:  MOVWF  FF7
09B14:  MOVLW  00
09B16:  MOVWF  FF8
09B18:  CALL   1F3E
09B1C:  GOTO   9D52
....................       
....................    else
....................    {
....................       flash_queue.entries[flash_queue.tail_index].mission_id = data->mission_id;
09B20:  MOVLB  1
09B22:  MOVF   x11,W
09B24:  MULLW  0C
09B26:  MOVF   FF3,W
09B28:  MOVLB  2
09B2A:  CLRF   x53
09B2C:  MOVWF  x52
09B2E:  MOVLW  50
09B30:  ADDWF  x52,W
09B32:  MOVWF  01
09B34:  MOVLW  00
09B36:  ADDWFC x53,W
09B38:  MOVWF  03
09B3A:  MOVF   01,W
09B3C:  MOVWF  x54
09B3E:  MOVFF  03,255
09B42:  MOVF   x4F,W
09B44:  MOVWF  FE9
09B46:  MOVF   x50,W
09B48:  MOVWF  FEA
09B4A:  MOVF   FEF,W
09B4C:  MOVWF  x56
09B4E:  MOVFF  255,FEA
09B52:  MOVFF  254,FE9
09B56:  MOVFF  256,FEF
....................       flash_queue.entries[flash_queue.tail_index].func_type  = data->func_type;
09B5A:  MOVLB  1
09B5C:  MOVF   x11,W
09B5E:  MULLW  0C
09B60:  MOVF   FF3,W
09B62:  MOVLB  2
09B64:  CLRF   x53
09B66:  MOVWF  x52
09B68:  MOVLW  01
09B6A:  ADDWF  x52,W
09B6C:  MOVWF  01
09B6E:  MOVLW  00
09B70:  ADDWFC x53,W
09B72:  MOVWF  03
09B74:  MOVF   01,W
09B76:  ADDLW  50
09B78:  MOVWF  01
09B7A:  MOVLW  00
09B7C:  ADDWFC 03,F
09B7E:  MOVF   01,W
09B80:  MOVWF  x52
09B82:  MOVFF  03,253
09B86:  MOVLW  01
09B88:  ADDWF  x4F,W
09B8A:  MOVWF  FE9
09B8C:  MOVLW  00
09B8E:  ADDWFC x50,W
09B90:  MOVWF  FEA
09B92:  MOVF   FEF,W
09B94:  MOVWF  x54
09B96:  MOVFF  253,FEA
09B9A:  MOVFF  252,FE9
09B9E:  MOVFF  254,FEF
....................       flash_queue.entries[flash_queue.tail_index].write_mode = data->write_mode;
09BA2:  MOVLB  1
09BA4:  MOVF   x11,W
09BA6:  MULLW  0C
09BA8:  MOVF   FF3,W
09BAA:  MOVLB  2
09BAC:  CLRF   x53
09BAE:  MOVWF  x52
09BB0:  MOVLW  02
09BB2:  ADDWF  x52,W
09BB4:  MOVWF  01
09BB6:  MOVLW  00
09BB8:  ADDWFC x53,W
09BBA:  MOVWF  03
09BBC:  MOVF   01,W
09BBE:  ADDLW  50
09BC0:  MOVWF  01
09BC2:  MOVLW  00
09BC4:  ADDWFC 03,F
09BC6:  MOVF   01,W
09BC8:  MOVWF  x52
09BCA:  MOVFF  03,253
09BCE:  MOVLW  02
09BD0:  ADDWF  x4F,W
09BD2:  MOVWF  FE9
09BD4:  MOVLW  00
09BD6:  ADDWFC x50,W
09BD8:  MOVWF  FEA
09BDA:  MOVF   FEF,W
09BDC:  MOVWF  x54
09BDE:  MOVFF  253,FEA
09BE2:  MOVFF  252,FE9
09BE6:  MOVFF  254,FEF
....................       flash_queue.entries[flash_queue.tail_index].source_type = data->source_type;
09BEA:  MOVLB  1
09BEC:  MOVF   x11,W
09BEE:  MULLW  0C
09BF0:  MOVF   FF3,W
09BF2:  MOVLB  2
09BF4:  CLRF   x53
09BF6:  MOVWF  x52
09BF8:  MOVLW  03
09BFA:  ADDWF  x52,W
09BFC:  MOVWF  01
09BFE:  MOVLW  00
09C00:  ADDWFC x53,W
09C02:  MOVWF  03
09C04:  MOVF   01,W
09C06:  ADDLW  50
09C08:  MOVWF  01
09C0A:  MOVLW  00
09C0C:  ADDWFC 03,F
09C0E:  MOVF   01,W
09C10:  MOVWF  x52
09C12:  MOVFF  03,253
09C16:  MOVLW  03
09C18:  ADDWF  x4F,W
09C1A:  MOVWF  01
09C1C:  MOVLW  00
09C1E:  ADDWFC x50,W
09C20:  MOVWF  03
09C22:  MOVF   01,W
09C24:  MOVWF  FE9
09C26:  MOVFF  03,FEA
09C2A:  MOVLW  00
09C2C:  BTFSC  FEF.0
09C2E:  MOVLW  01
09C30:  MOVWF  01
09C32:  BTFSS  01.0
09C34:  BRA    9C3C
09C36:  MOVLB  0
09C38:  GOTO   9C4C
09C3C:  MOVLB  0
09C3E:  MOVFF  253,FEA
09C42:  MOVFF  252,FE9
09C46:  BCF    FEF.0
09C48:  GOTO   9C56
09C4C:  MOVFF  253,FEA
09C50:  MOVFF  252,FE9
09C54:  BSF    FEF.0
....................       flash_queue.entries[flash_queue.tail_index].misf_start_addr = data->misf_start_addr;
09C56:  MOVLB  1
09C58:  MOVF   x11,W
09C5A:  MULLW  0C
09C5C:  MOVF   FF3,W
09C5E:  MOVLB  2
09C60:  CLRF   x53
09C62:  MOVWF  x52
09C64:  MOVLW  04
09C66:  ADDWF  x52,W
09C68:  MOVWF  01
09C6A:  MOVLW  00
09C6C:  ADDWFC x53,W
09C6E:  MOVWF  03
09C70:  MOVF   01,W
09C72:  ADDLW  50
09C74:  MOVWF  01
09C76:  MOVLW  00
09C78:  ADDWFC 03,F
09C7A:  MOVF   01,W
09C7C:  MOVWF  x52
09C7E:  MOVFF  03,253
09C82:  MOVLW  04
09C84:  ADDWF  x4F,W
09C86:  MOVWF  FE9
09C88:  MOVLW  00
09C8A:  ADDWFC x50,W
09C8C:  MOVWF  FEA
09C8E:  MOVFF  FEF,00
09C92:  MOVFF  FEC,01
09C96:  MOVFF  FEC,02
09C9A:  MOVFF  FEC,03
09C9E:  MOVF   FED,F
09CA0:  MOVF   FED,F
09CA2:  MOVF   FED,F
09CA4:  MOVFF  03,257
09CA8:  MOVFF  02,256
09CAC:  MOVFF  01,255
09CB0:  MOVFF  00,254
09CB4:  MOVFF  253,FEA
09CB8:  MOVFF  252,FE9
09CBC:  MOVFF  254,FEF
09CC0:  MOVFF  255,FEC
09CC4:  MOVFF  256,FEC
09CC8:  MOVFF  257,FEC
09CCC:  MOVF   FED,F
09CCE:  MOVF   FED,F
09CD0:  MOVF   FED,F
....................       flash_queue.entries[flash_queue.tail_index].misf_size = data->misf_size;
09CD2:  MOVLB  1
09CD4:  MOVF   x11,W
09CD6:  MULLW  0C
09CD8:  MOVF   FF3,W
09CDA:  MOVLB  2
09CDC:  CLRF   x53
09CDE:  MOVWF  x52
09CE0:  MOVLW  08
09CE2:  ADDWF  x52,W
09CE4:  MOVWF  01
09CE6:  MOVLW  00
09CE8:  ADDWFC x53,W
09CEA:  MOVWF  03
09CEC:  MOVF   01,W
09CEE:  ADDLW  50
09CF0:  MOVWF  01
09CF2:  MOVLW  00
09CF4:  ADDWFC 03,F
09CF6:  MOVF   01,W
09CF8:  MOVWF  x52
09CFA:  MOVFF  03,253
09CFE:  MOVLW  08
09D00:  ADDWF  x4F,W
09D02:  MOVWF  FE9
09D04:  MOVLW  00
09D06:  ADDWFC x50,W
09D08:  MOVWF  FEA
09D0A:  MOVFF  FEF,00
09D0E:  MOVFF  FEC,01
09D12:  MOVFF  FEC,02
09D16:  MOVFF  FEC,03
09D1A:  MOVF   FED,F
09D1C:  MOVF   FED,F
09D1E:  MOVF   FED,F
09D20:  MOVFF  03,257
09D24:  MOVFF  02,256
09D28:  MOVFF  01,255
09D2C:  MOVFF  00,254
09D30:  MOVFF  253,FEA
09D34:  MOVFF  252,FE9
09D38:  MOVFF  254,FEF
09D3C:  MOVFF  255,FEC
09D40:  MOVFF  256,FEC
09D44:  MOVFF  257,FEC
09D48:  MOVF   FED,F
09D4A:  MOVF   FED,F
09D4C:  MOVF   FED,F
....................       flash_queue.tail_index = next_tail;
09D4E:  MOVFF  251,111
09D52:  MOVLB  0
....................    }
09D54:  GOTO   A1D6 (RETURN)
.................... 
.................... 
.................... }
.................... 
.................... 
.................... FlashOperationStruct *dequeue_flash_operation()
.................... {
....................    if (flash_queue.head_index == flash_queue.tail_index)
*
0E480:  MOVLB  1
0E482:  MOVF   x11,W
0E484:  SUBWF  x10,W
0E486:  BTFSC  FD8.2
0E488:  BRA    E490
0E48A:  MOVLB  0
0E48C:  GOTO   E4B2
0E490:  MOVLB  0
....................    {
....................       printf("Flash queue is empty\r\n");
0E492:  MOVLW  8E
0E494:  MOVWF  FF6
0E496:  MOVLW  03
0E498:  MOVWF  FF7
0E49A:  MOVLW  00
0E49C:  MOVWF  FF8
0E49E:  CALL   1F3E
....................       return 0x00;
0E4A2:  MOVLW  00
0E4A4:  MOVWF  01
0E4A6:  MOVLW  00
0E4A8:  MOVWF  02
0E4AA:  GOTO   E4E0
....................    }
0E4AE:  GOTO   E4E0
....................    else
....................    {
....................       int8 current_head = flash_queue.head_index;
0E4B2:  MOVFF  110,22B
....................       flash_queue.head_index = (flash_queue.head_index + 1) % SMF_QUEUE_SIZE;
0E4B6:  MOVLW  01
0E4B8:  MOVLB  1
0E4BA:  ADDWF  x10,W
0E4BC:  ANDLW  0F
0E4BE:  MOVWF  x10
.................... 
.................... 
....................       return &flash_queue.entries[current_head];
0E4C0:  MOVLB  2
0E4C2:  MOVF   x2B,W
0E4C4:  MULLW  0C
0E4C6:  MOVF   FF3,W
0E4C8:  CLRF   03
0E4CA:  ADDLW  50
0E4CC:  MOVWF  01
0E4CE:  MOVLW  00
0E4D0:  ADDWFC 03,F
0E4D2:  MOVF   01,W
0E4D4:  MOVWF  01
0E4D6:  MOVF   03,W
0E4D8:  MOVWF  02
0E4DA:  MOVLB  0
0E4DC:  GOTO   E4E0
....................    }
0E4E0:  GOTO   FD2A (RETURN)
.................... }
.................... 
.................... int1 is_empty_flash_queue(void)
.................... {
....................    return flash_queue.head_index == flash_queue.tail_index;
*
0E38A:  MOVLB  1
0E38C:  MOVF   x11,W
0E38E:  SUBWF  x10,W
0E390:  BTFSS  FD8.2
0E392:  BRA    E39A
0E394:  MOVLB  0
0E396:  GOTO   E3A2
0E39A:  MOVLB  0
0E39C:  MOVLW  00
0E39E:  GOTO   E3A4
0E3A2:  MOVLW  01
0E3A4:  MOVWF  01
0E3A6:  RETURN 0
.................... }
.................... 
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id)
.................... {
....................    SmfAddressStruct mis_struct = {0};
*
0FB1A:  MOVLB  2
0FB1C:  CLRF   x95
0FB1E:  CLRF   x96
0FB20:  CLRF   x97
0FB22:  CLRF   x98
0FB24:  CLRF   x99
0FB26:  CLRF   x9A
0FB28:  CLRF   x9B
0FB2A:  CLRF   x9C
.................... 
....................    if (mission_id == CIGS_DATA_TABLE)
0FB2C:  MOVF   x94,F
0FB2E:  BTFSC  FD8.2
0FB30:  BRA    FB38
0FB32:  MOVLB  0
0FB34:  GOTO   FB5C
0FB38:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_DATA_TABLE_START_ADDRESS;
0FB3A:  MOVLW  06
0FB3C:  MOVLB  2
0FB3E:  MOVWF  x98
0FB40:  MOVLW  AA
0FB42:  MOVWF  x97
0FB44:  CLRF   x96
0FB46:  CLRF   x95
....................       mis_struct.end_address   = CIGS_DATA_TABLE_END_ADDRESS;
0FB48:  MOVLW  06
0FB4A:  MOVWF  x9C
0FB4C:  MOVLW  AA
0FB4E:  MOVWF  x9B
0FB50:  MOVLW  0F
0FB52:  MOVWF  x9A
0FB54:  SETF   x99
0FB56:  MOVLB  0
....................    }
0FB58:  GOTO   FC9C
....................    else if (mission_id == CIGS_PICLOG_DATA)
0FB5C:  MOVLB  2
0FB5E:  DECFSZ x94,W
0FB60:  BRA    FB66
0FB62:  BRA    FB6C
0FB64:  MOVLB  0
0FB66:  MOVLB  0
0FB68:  GOTO   FB92
0FB6C:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
0FB6E:  MOVLW  06
0FB70:  MOVLB  2
0FB72:  MOVWF  x98
0FB74:  MOVLW  AA
0FB76:  MOVWF  x97
0FB78:  MOVLW  10
0FB7A:  MOVWF  x96
0FB7C:  CLRF   x95
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
0FB7E:  MOVLW  06
0FB80:  MOVWF  x9C
0FB82:  MOVLW  AA
0FB84:  MOVWF  x9B
0FB86:  MOVLW  1F
0FB88:  MOVWF  x9A
0FB8A:  SETF   x99
0FB8C:  MOVLB  0
....................    }
0FB8E:  GOTO   FC9C
....................    else if (mission_id == CIGS_ENVIRO_DATA)
0FB92:  MOVLB  2
0FB94:  MOVF   x94,W
0FB96:  SUBLW  02
0FB98:  BTFSC  FD8.2
0FB9A:  BRA    FBA2
0FB9C:  MOVLB  0
0FB9E:  GOTO   FBC8
0FBA2:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
0FBA4:  MOVLW  06
0FBA6:  MOVLB  2
0FBA8:  MOVWF  x98
0FBAA:  MOVLW  AA
0FBAC:  MOVWF  x97
0FBAE:  MOVLW  10
0FBB0:  MOVWF  x96
0FBB2:  CLRF   x95
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
0FBB4:  MOVLW  06
0FBB6:  MOVWF  x9C
0FBB8:  MOVLW  AA
0FBBA:  MOVWF  x9B
0FBBC:  MOVLW  1F
0FBBE:  MOVWF  x9A
0FBC0:  SETF   x99
0FBC2:  MOVLB  0
....................    }
0FBC4:  GOTO   FC9C
....................    else if (mission_id == CIGS_IV1_HEADER)
0FBC8:  MOVLB  2
0FBCA:  MOVF   x94,W
0FBCC:  SUBLW  03
0FBCE:  BTFSC  FD8.2
0FBD0:  BRA    FBD8
0FBD2:  MOVLB  0
0FBD4:  GOTO   FBFE
0FBD8:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV1_HEADER_START_ADDRESS;
0FBDA:  MOVLW  06
0FBDC:  MOVLB  2
0FBDE:  MOVWF  x98
0FBE0:  MOVLW  B4
0FBE2:  MOVWF  x97
0FBE4:  MOVLW  20
0FBE6:  MOVWF  x96
0FBE8:  CLRF   x95
....................       mis_struct.end_address   = CIGS_IV1_HEADER_END_ADDRESS;
0FBEA:  MOVLW  06
0FBEC:  MOVWF  x9C
0FBEE:  MOVLW  BE
0FBF0:  MOVWF  x9B
0FBF2:  MOVLW  1F
0FBF4:  MOVWF  x9A
0FBF6:  SETF   x99
0FBF8:  MOVLB  0
....................    }
0FBFA:  GOTO   FC9C
....................    else if (mission_id == CIGS_IV1_DATA)
0FBFE:  MOVLB  2
0FC00:  MOVF   x94,W
0FC02:  SUBLW  04
0FC04:  BTFSC  FD8.2
0FC06:  BRA    FC0E
0FC08:  MOVLB  0
0FC0A:  GOTO   FC34
0FC0E:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV1_DATA_START_ADDRESS;
0FC10:  MOVLW  06
0FC12:  MOVLB  2
0FC14:  MOVWF  x98
0FC16:  MOVLW  BE
0FC18:  MOVWF  x97
0FC1A:  MOVLW  20
0FC1C:  MOVWF  x96
0FC1E:  CLRF   x95
....................       mis_struct.end_address   = CIGS_IV1_DATA_END_ADDRESS;
0FC20:  MOVLW  06
0FC22:  MOVWF  x9C
0FC24:  MOVLW  FE
0FC26:  MOVWF  x9B
0FC28:  MOVLW  2F
0FC2A:  MOVWF  x9A
0FC2C:  SETF   x99
0FC2E:  MOVLB  0
....................    }
0FC30:  GOTO   FC9C
....................       else if (mission_id == CIGS_IV2_HEADER)
0FC34:  MOVLB  2
0FC36:  MOVF   x94,W
0FC38:  SUBLW  05
0FC3A:  BTFSC  FD8.2
0FC3C:  BRA    FC44
0FC3E:  MOVLB  0
0FC40:  GOTO   FC6A
0FC44:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV2_HEADER_START_ADDRESS;
0FC46:  MOVLW  06
0FC48:  MOVLB  2
0FC4A:  MOVWF  x98
0FC4C:  MOVLW  FE
0FC4E:  MOVWF  x97
0FC50:  MOVLW  30
0FC52:  MOVWF  x96
0FC54:  CLRF   x95
....................       mis_struct.end_address   = CIGS_IV2_HEADER_END_ADDRESS;
0FC56:  MOVLW  07
0FC58:  MOVWF  x9C
0FC5A:  MOVLW  08
0FC5C:  MOVWF  x9B
0FC5E:  MOVLW  2F
0FC60:  MOVWF  x9A
0FC62:  SETF   x99
0FC64:  MOVLB  0
....................    }
0FC66:  GOTO   FC9C
....................    else if (mission_id == CIGS_IV2_DATA)
0FC6A:  MOVLB  2
0FC6C:  MOVF   x94,W
0FC6E:  SUBLW  06
0FC70:  BTFSC  FD8.2
0FC72:  BRA    FC7A
0FC74:  MOVLB  0
0FC76:  GOTO   FC9C
0FC7A:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV2_DATA_START_ADDRESS;
0FC7C:  MOVLW  07
0FC7E:  MOVLB  2
0FC80:  MOVWF  x98
0FC82:  MOVLW  08
0FC84:  MOVWF  x97
0FC86:  MOVLW  30
0FC88:  MOVWF  x96
0FC8A:  CLRF   x95
....................       mis_struct.end_address   = CIGS_IV2_DATA_END_ADDRESS;
0FC8C:  MOVLW  07
0FC8E:  MOVWF  x9C
0FC90:  MOVLW  48
0FC92:  MOVWF  x9B
0FC94:  MOVLW  3F
0FC96:  MOVWF  x9A
0FC98:  SETF   x99
0FC9A:  MOVLB  0
....................    }
....................    return mis_struct;
0FC9C:  MOVLW  95
0FC9E:  MOVWF  01
0FCA0:  MOVLW  02
0FCA2:  MOVWF  02
0FCA4:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "../lib/communication/communication.c"
.................... // #include "communication.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #include "mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
0521C:  MOVLB  2
0521E:  CLRF   x2D
05220:  CLRF   x2E
05222:  CLRF   x2F
05224:  CLRF   x30
05226:  CLRF   x31
05228:  CLRF   x32
0522A:  CLRF   x33
0522C:  CLRF   x34
0522E:  CLRF   x35
05230:  CLRF   x36
05232:  CLRF   x37
05234:  CLRF   x38
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
05236:  MOVLW  A6
05238:  MOVWF  FF6
0523A:  MOVLW  03
0523C:  MOVWF  FF7
0523E:  MOVLW  00
05240:  MOVWF  FF8
05242:  MOVLB  0
05244:  CALL   1F3E
....................    fprintf(PC, "\t[BOSS] >>> ");
05248:  MOVLW  C6
0524A:  MOVWF  FF6
0524C:  MOVLW  03
0524E:  MOVWF  FF7
05250:  MOVLW  00
05252:  MOVWF  FF8
05254:  CALL   1F3E
....................    for (int8 i = 0; i < receive_signal_size; i++)
05258:  MOVLB  2
0525A:  CLRF   x39
0525C:  MOVLB  0
0525E:  MOVLB  2
05260:  MOVF   x2C,W
05262:  SUBWF  x39,W
05264:  BTFSS  FD8.0
05266:  BRA    526E
05268:  MOVLB  0
0526A:  GOTO   52AA
0526E:  MOVLB  0
....................       fprintf(PC, "%X ", receive_signal[i]);
05270:  MOVLB  2
05272:  MOVF   x39,W
05274:  ADDWF  x2A,W
05276:  MOVWF  FE9
05278:  MOVLW  00
0527A:  ADDWFC x2B,W
0527C:  MOVWF  FEA
0527E:  MOVFF  FEF,240
05282:  MOVFF  240,B4B
05286:  MOVLW  37
05288:  MOVLB  B
0528A:  MOVWF  x4C
0528C:  MOVLB  0
0528E:  CALL   2188
05292:  MOVLW  20
05294:  BTFSS  FA6.6
05296:  GOTO   5294
0529A:  MOVLB  E
0529C:  MOVWF  xF9
0529E:  MOVLB  0
052A0:  MOVLB  2
052A2:  INCF   x39,F
052A4:  MOVLB  0
052A6:  GOTO   525E
....................    fprintf(PC, "\r\n");
052AA:  MOVLW  0D
052AC:  BTFSS  FA6.6
052AE:  GOTO   52AC
052B2:  MOVLB  E
052B4:  MOVWF  xF9
052B6:  MOVLW  0A
052B8:  MOVLB  0
052BA:  BTFSS  FA6.6
052BC:  GOTO   52BA
052C0:  MOVLB  E
052C2:  MOVWF  xF9
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
052C4:  MOVFF  22B,241
052C8:  MOVFF  22A,240
052CC:  MOVFF  22C,242
052D0:  MOVLB  0
052D2:  GOTO   4F04
052D6:  MOVFF  01,23A
....................    if (frame_start_position == -1)
052DA:  MOVLB  2
052DC:  MOVF   x3A,W
052DE:  SUBLW  FF
052E0:  BTFSC  FD8.2
052E2:  BRA    52EA
052E4:  MOVLB  0
052E6:  GOTO   52F8
052EA:  MOVLB  0
....................       return command;
052EC:  MOVLW  2D
052EE:  MOVWF  01
052F0:  MOVLW  02
052F2:  MOVWF  02
052F4:  GOTO   541A
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
052F8:  MOVLB  2
052FA:  MOVF   x3A,W
052FC:  ADDWF  x2A,W
052FE:  MOVWF  01
05300:  MOVLW  00
05302:  ADDWFC x2B,W
05304:  MOVWF  03
05306:  MOVF   01,W
05308:  MOVWF  x3B
0530A:  MOVFF  03,23C
0530E:  MOVF   x3B,W
05310:  MOVWF  FE9
05312:  MOVF   x3C,W
05314:  MOVWF  FEA
05316:  MOVF   FEF,W
05318:  ANDLW  0F
0531A:  MOVWF  x3D
0531C:  MOVFF  23D,240
05320:  MOVLB  0
05322:  GOTO   4FAC
05326:  MOVFF  01,23E
....................    if (content_size == -1)
0532A:  MOVLB  2
0532C:  MOVF   x3E,W
0532E:  SUBLW  FF
05330:  BTFSC  FD8.2
05332:  BRA    533A
05334:  MOVLB  0
05336:  GOTO   5348
0533A:  MOVLB  0
....................       return command;
0533C:  MOVLW  2D
0533E:  MOVWF  01
05340:  MOVLW  02
05342:  MOVWF  02
05344:  GOTO   541A
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
05348:  MOVLB  2
0534A:  MOVF   x3A,W
0534C:  SUBWF  x2C,W
0534E:  MOVWF  x3F
....................    
....................    if (!check_crc(frame, receive_frame_size))
05350:  MOVFF  23C,241
05354:  MOVFF  23B,240
05358:  MOVFF  23F,242
0535C:  MOVLB  0
0535E:  GOTO   506C
05362:  MOVF   01,F
05364:  BTFSS  FD8.2
05366:  GOTO   5376
....................       return command;
0536A:  MOVLW  2D
0536C:  MOVWF  01
0536E:  MOVLW  02
05370:  MOVWF  02
05372:  GOTO   541A
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
05376:  MOVLB  2
05378:  MOVF   x3B,W
0537A:  MOVWF  FE9
0537C:  MOVF   x3C,W
0537E:  MOVWF  FEA
05380:  MOVF   FEF,W
05382:  ANDLW  F0
05384:  MOVWF  00
05386:  SWAPF  00,W
05388:  MOVWF  x40
0538A:  MOVLW  0F
0538C:  ANDWF  x40,F
0538E:  MOVFF  240,241
05392:  MOVLB  0
05394:  GOTO   515C
05398:  MOVF   01,F
0539A:  BTFSS  FD8.2
0539C:  GOTO   53AC
....................       return command;
053A0:  MOVLW  2D
053A2:  MOVWF  01
053A4:  MOVLW  02
053A6:  MOVWF  02
053A8:  GOTO   541A
.................... 
....................    command.frame_id = frame_id;
053AC:  MOVFF  23D,22D
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
053B0:  MOVLW  01
053B2:  MOVLB  2
053B4:  ADDWF  x3B,W
053B6:  MOVWF  01
053B8:  MOVLW  00
053BA:  ADDWFC x3C,W
053BC:  MOVWF  03
053BE:  MOVF   01,W
053C0:  MOVWF  x40
053C2:  MOVFF  03,241
053C6:  MOVLW  02
053C8:  SUBWF  x3F,W
053CA:  MOVWF  x42
053CC:  MOVLW  02
053CE:  MOVWF  FEA
053D0:  MOVLW  30
053D2:  MOVWF  FE9
053D4:  MOVFF  241,FE2
053D8:  MOVFF  240,FE1
053DC:  MOVF   x42,W
053DE:  MOVWF  01
053E0:  BTFSS  FD8.2
053E2:  BRA    53EA
053E4:  MOVLB  0
053E6:  GOTO   53F6
053EA:  MOVLB  0
053EC:  MOVFF  FE6,FEE
053F0:  DECFSZ 01,F
053F2:  GOTO   53EC
....................    command.size = receive_frame_size-2;
053F6:  MOVLW  02
053F8:  MOVLB  2
053FA:  SUBWF  x3F,W
053FC:  MOVWF  x2E
....................    command.is_exist = TRUE;
053FE:  BSF    x2F.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
05400:  MOVLW  D4
05402:  MOVWF  FF6
05404:  MOVLW  03
05406:  MOVWF  FF7
05408:  MOVLW  00
0540A:  MOVWF  FF8
0540C:  MOVLB  0
0540E:  CALL   1F3E
....................    return command;
05412:  MOVLW  2D
05414:  MOVWF  01
05416:  MOVLW  02
05418:  MOVWF  02
0541A:  GOTO   1134E (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
04F04:  MOVLB  2
04F06:  CLRF   x43
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
04F08:  CLRF   x43
04F0A:  MOVLB  0
04F0C:  MOVLW  01
04F0E:  MOVLB  2
04F10:  SUBWF  x42,W
04F12:  SUBWF  x43,W
04F14:  BTFSS  FD8.0
04F16:  BRA    4F1E
04F18:  MOVLB  0
04F1A:  GOTO   4F56
04F1E:  MOVLB  0
....................       if(receive_signal[i] == SFD)
04F20:  MOVLB  2
04F22:  MOVF   x43,W
04F24:  ADDWF  x40,W
04F26:  MOVWF  FE9
04F28:  MOVLW  00
04F2A:  ADDWFC x41,W
04F2C:  MOVWF  FEA
04F2E:  MOVF   FEF,W
04F30:  SUBLW  AA
04F32:  BTFSC  FD8.2
04F34:  BRA    4F3C
04F36:  MOVLB  0
04F38:  GOTO   4F4C
04F3C:  MOVLB  0
....................          return i+1;
04F3E:  MOVLW  01
04F40:  MOVLB  2
04F42:  ADDWF  x43,W
04F44:  MOVWF  01
04F46:  MOVLB  0
04F48:  GOTO   4FA8
04F4C:  MOVLB  2
04F4E:  INCF   x43,F
04F50:  MOVLB  0
04F52:  GOTO   4F0C
....................    if (receive_signal[i] == SFD)
04F56:  MOVLB  2
04F58:  MOVF   x43,W
04F5A:  ADDWF  x40,W
04F5C:  MOVWF  FE9
04F5E:  MOVLW  00
04F60:  ADDWFC x41,W
04F62:  MOVWF  FEA
04F64:  MOVF   FEF,W
04F66:  SUBLW  AA
04F68:  BTFSC  FD8.2
04F6A:  BRA    4F72
04F6C:  MOVLB  0
04F6E:  GOTO   4F90
04F72:  MOVLB  0
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
04F74:  MOVLW  F0
04F76:  MOVWF  FF6
04F78:  MOVLW  03
04F7A:  MOVWF  FF7
04F7C:  MOVLW  00
04F7E:  MOVWF  FF8
04F80:  CALL   1F3E
....................       return -1;
04F84:  MOVLW  FF
04F86:  MOVWF  01
04F88:  GOTO   4FA8
....................    }
04F8C:  GOTO   4FA8
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
04F90:  MOVLW  06
04F92:  MOVWF  FF6
04F94:  MOVLW  04
04F96:  MOVWF  FF7
04F98:  MOVLW  00
04F9A:  MOVWF  FF8
04F9C:  CALL   1F3E
....................       return -1;
04FA0:  MOVLW  FF
04FA2:  MOVWF  01
04FA4:  GOTO   4FA8
....................    }
04FA8:  GOTO   52D6 (RETURN)
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
04FAC:  MOVLB  2
04FAE:  CLRF   x41
04FB0:  MOVLB  0
04FB2:  MOVLB  2
04FB4:  MOVF   x41,W
04FB6:  SUBLW  02
04FB8:  BTFSC  FD8.0
04FBA:  BRA    4FC2
04FBC:  MOVLB  0
04FBE:  GOTO   5020
04FC2:  MOVLB  0
....................       if (frame_id == frame_ids[i].id)
04FC4:  BCF    FD8.0
04FC6:  MOVLB  2
04FC8:  RLCF   x41,W
04FCA:  CLRF   x43
04FCC:  MOVWF  x42
04FCE:  MOVLW  1A
04FD0:  ADDWF  x42,W
04FD2:  MOVWF  FE9
04FD4:  MOVLW  01
04FD6:  ADDWFC x43,W
04FD8:  MOVWF  FEA
04FDA:  MOVF   FEF,W
04FDC:  SUBWF  x40,W
04FDE:  BTFSC  FD8.2
04FE0:  BRA    4FE8
04FE2:  MOVLB  0
04FE4:  GOTO   5016
04FE8:  MOVLB  0
....................          return frame_ids[i].length;
04FEA:  BCF    FD8.0
04FEC:  MOVLB  2
04FEE:  RLCF   x41,W
04FF0:  CLRF   x43
04FF2:  MOVWF  x42
04FF4:  MOVLW  01
04FF6:  ADDWF  x42,W
04FF8:  MOVWF  01
04FFA:  MOVLW  00
04FFC:  ADDWFC x43,W
04FFE:  MOVWF  03
05000:  MOVF   01,W
05002:  ADDLW  1A
05004:  MOVWF  FE9
05006:  MOVLW  01
05008:  ADDWFC 03,W
0500A:  MOVWF  FEA
0500C:  MOVF   FEF,W
0500E:  MOVWF  01
05010:  MOVLB  0
05012:  GOTO   5066
05016:  MOVLB  2
05018:  INCF   x41,F
0501A:  MOVLB  0
0501C:  GOTO   4FB2
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
05020:  MOVLW  18
05022:  MOVWF  FF6
05024:  MOVLW  04
05026:  MOVWF  FF7
05028:  MOVLW  00
0502A:  MOVWF  FF8
0502C:  MOVLW  1F
0502E:  MOVLB  B
05030:  MOVWF  x4A
05032:  MOVLB  0
05034:  CALL   1F74
05038:  MOVFF  240,B4B
0503C:  MOVLW  37
0503E:  MOVLB  B
05040:  MOVWF  x4C
05042:  MOVLB  0
05044:  CALL   2188
05048:  MOVLW  0D
0504A:  BTFSS  FA6.6
0504C:  GOTO   504A
05050:  MOVLB  E
05052:  MOVWF  xF9
05054:  MOVLW  0A
05056:  MOVLB  0
05058:  BTFSS  FA6.6
0505A:  GOTO   5058
0505E:  MOVLB  E
05060:  MOVWF  xF9
....................    return -1;
05062:  MOVLW  FF
05064:  MOVWF  01
05066:  MOVLB  0
05068:  GOTO   5326 (RETURN)
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
0506C:  MOVLW  01
0506E:  MOVLB  2
05070:  SUBWF  x42,W
05072:  ADDWF  x40,W
05074:  MOVWF  FE9
05076:  MOVLW  00
05078:  ADDWFC x41,W
0507A:  MOVWF  FEA
0507C:  MOVFF  FEF,243
05080:  MOVLW  01
05082:  SUBWF  x42,W
05084:  MOVWF  x45
05086:  MOVFF  241,BD9
0508A:  MOVFF  240,BD8
0508E:  MOVFF  245,BDA
05092:  MOVLB  0
05094:  CALL   2DA0
05098:  MOVFF  01,244
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
0509C:  MOVLB  2
0509E:  MOVF   x44,W
050A0:  SUBWF  x43,W
050A2:  BTFSC  FD8.2
050A4:  BRA    50AC
050A6:  MOVLB  0
050A8:  GOTO   50BA
050AC:  MOVLB  0
....................       return TRUE;
050AE:  MOVLW  01
050B0:  MOVWF  01
050B2:  GOTO   5158
050B6:  GOTO   5158
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
050BA:  MOVLW  3C
050BC:  MOVWF  FF6
050BE:  MOVLW  04
050C0:  MOVWF  FF7
050C2:  MOVLW  00
050C4:  MOVWF  FF8
050C6:  CALL   1F3E
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
050CA:  MOVLW  4E
050CC:  MOVWF  FF6
050CE:  MOVLW  04
050D0:  MOVWF  FF7
050D2:  MOVLW  00
050D4:  MOVWF  FF8
050D6:  MOVLW  13
050D8:  MOVLB  B
050DA:  MOVWF  x4A
050DC:  MOVLB  0
050DE:  CALL   1F74
050E2:  MOVFF  243,B4B
050E6:  MOVLW  37
050E8:  MOVLB  B
050EA:  MOVWF  x4C
050EC:  MOVLB  0
050EE:  CALL   2188
050F2:  MOVLW  0D
050F4:  BTFSS  FA6.6
050F6:  GOTO   50F4
050FA:  MOVLB  E
050FC:  MOVWF  xF9
050FE:  MOVLW  0A
05100:  MOVLB  0
05102:  BTFSS  FA6.6
05104:  GOTO   5102
05108:  MOVLB  E
0510A:  MOVWF  xF9
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
0510C:  MOVLW  66
0510E:  MOVWF  FF6
05110:  MOVLW  04
05112:  MOVWF  FF7
05114:  MOVLW  00
05116:  MOVWF  FF8
05118:  MOVLW  13
0511A:  MOVLB  B
0511C:  MOVWF  x4A
0511E:  MOVLB  0
05120:  CALL   1F74
05124:  MOVFF  244,B4B
05128:  MOVLW  37
0512A:  MOVLB  B
0512C:  MOVWF  x4C
0512E:  MOVLB  0
05130:  CALL   2188
05134:  MOVLW  0D
05136:  BTFSS  FA6.6
05138:  GOTO   5136
0513C:  MOVLB  E
0513E:  MOVWF  xF9
05140:  MOVLW  0A
05142:  MOVLB  0
05144:  BTFSS  FA6.6
05146:  GOTO   5144
0514A:  MOVLB  E
0514C:  MOVWF  xF9
....................       return FALSE;
0514E:  MOVLW  00
05150:  MOVWF  01
05152:  MOVLB  0
05154:  GOTO   5158
....................    }
05158:  GOTO   5362 (RETURN)
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
0515C:  MOVLB  2
0515E:  MOVF   x41,W
05160:  SUBLW  0C
05162:  BTFSC  FD8.2
05164:  BRA    516C
05166:  MOVLB  0
05168:  GOTO   517A
0516C:  MOVLB  0
....................       return TRUE;
0516E:  MOVLW  01
05170:  MOVWF  01
05172:  GOTO   5218
05176:  GOTO   5218
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
0517A:  MOVLW  7E
0517C:  MOVWF  FF6
0517E:  MOVLW  04
05180:  MOVWF  FF7
05182:  MOVLW  00
05184:  MOVWF  FF8
05186:  CALL   1F3E
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
0518A:  MOVLW  A0
0518C:  MOVWF  FF6
0518E:  MOVLW  04
05190:  MOVWF  FF7
05192:  MOVLW  00
05194:  MOVWF  FF8
05196:  MOVLW  13
05198:  MOVLB  B
0519A:  MOVWF  x4A
0519C:  MOVLB  0
0519E:  CALL   1F74
051A2:  MOVFF  241,B4B
051A6:  MOVLW  37
051A8:  MOVLB  B
051AA:  MOVWF  x4C
051AC:  MOVLB  0
051AE:  CALL   2188
051B2:  MOVLW  0D
051B4:  BTFSS  FA6.6
051B6:  GOTO   51B4
051BA:  MOVLB  E
051BC:  MOVWF  xF9
051BE:  MOVLW  0A
051C0:  MOVLB  0
051C2:  BTFSS  FA6.6
051C4:  GOTO   51C2
051C8:  MOVLB  E
051CA:  MOVWF  xF9
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
051CC:  MOVLW  B8
051CE:  MOVWF  FF6
051D0:  MOVLW  04
051D2:  MOVWF  FF7
051D4:  MOVLW  00
051D6:  MOVWF  FF8
051D8:  MOVLW  13
051DA:  MOVLB  B
051DC:  MOVWF  x4A
051DE:  MOVLB  0
051E0:  CALL   1F74
051E4:  MOVLW  0C
051E6:  MOVLB  B
051E8:  MOVWF  x4B
051EA:  MOVLW  37
051EC:  MOVWF  x4C
051EE:  MOVLB  0
051F0:  CALL   2188
051F4:  MOVLW  0D
051F6:  BTFSS  FA6.6
051F8:  GOTO   51F6
051FC:  MOVLB  E
051FE:  MOVWF  xF9
05200:  MOVLW  0A
05202:  MOVLB  0
05204:  BTFSS  FA6.6
05206:  GOTO   5204
0520A:  MOVLB  E
0520C:  MOVWF  xF9
....................       return FALSE;  
0520E:  MOVLW  00
05210:  MOVWF  01
05212:  MOVLB  0
05214:  GOTO   5218
....................    }
05218:  GOTO   5398 (RETURN)
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
0552A:  MOVLW  AA
0552C:  MOVLB  2
0552E:  MOVWF  x2F
....................    data[1] = (BOSS_PIC << 4) | frame_id;
05530:  MOVF   x2B,W
05532:  IORLW  50
05534:  MOVWF  x30
....................    memcpy(&data[2], content, size);
05536:  MOVLW  02
05538:  MOVWF  FEA
0553A:  MOVLW  31
0553C:  MOVWF  FE9
0553E:  MOVFF  22D,FE2
05542:  MOVFF  22C,FE1
05546:  MOVF   x2E,W
05548:  MOVWF  01
0554A:  BTFSS  FD8.2
0554C:  BRA    5554
0554E:  MOVLB  0
05550:  GOTO   5560
05554:  MOVLB  0
05556:  MOVFF  FE6,FEE
0555A:  DECFSZ 01,F
0555C:  GOTO   5556
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
05560:  MOVLW  02
05562:  MOVLB  2
05564:  ADDWF  x2E,W
05566:  MOVWF  x3F
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
05568:  CLRF   03
0556A:  MOVF   x3F,W
0556C:  ADDLW  2F
0556E:  MOVWF  01
05570:  MOVLW  02
05572:  ADDWFC 03,F
05574:  MOVF   01,W
05576:  MOVWF  x41
05578:  MOVFF  03,242
0557C:  MOVLW  01
0557E:  SUBWF  x3F,W
05580:  MOVWF  x43
05582:  MOVLW  02
05584:  MOVLB  B
05586:  MOVWF  xD9
05588:  MOVLW  30
0558A:  MOVWF  xD8
0558C:  MOVFF  243,BDA
05590:  MOVLB  0
05592:  CALL   2DA0
05596:  MOVFF  242,FEA
0559A:  MOVFF  241,FE9
0559E:  MOVFF  01,FEF
....................    int8 data_size = payload_size + 1; // '1' is for CRC
055A2:  MOVLW  01
055A4:  MOVLB  2
055A6:  ADDWF  x3F,W
055A8:  MOVWF  x40
....................    
....................    transmit(data, data_size);
055AA:  MOVLW  02
055AC:  MOVWF  x42
055AE:  MOVLW  2F
055B0:  MOVWF  x41
055B2:  MOVFF  240,243
055B6:  MOVLB  0
055B8:  GOTO   546C
055BC:  RETURN 0
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
0546C:  MOVLB  2
0546E:  CLRF   x44
05470:  MOVLB  0
05472:  MOVLB  2
05474:  MOVF   x43,W
05476:  SUBWF  x44,W
05478:  BTFSS  FD8.0
0547A:  BRA    5482
0547C:  MOVLB  0
0547E:  GOTO   54A8
05482:  MOVLB  0
....................       fputc(data[i], BOSS);
05484:  MOVLB  2
05486:  MOVF   x44,W
05488:  ADDWF  x41,W
0548A:  MOVWF  FE9
0548C:  MOVLW  00
0548E:  ADDWFC x42,W
05490:  MOVWF  FEA
05492:  MOVFF  FEF,246
05496:  MOVF   x46,W
05498:  MOVLB  0
0549A:  GOTO   545C
0549E:  MOVLB  2
054A0:  INCF   x44,F
054A2:  MOVLB  0
054A4:  GOTO   5472
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
054A8:  MOVLW  D0
054AA:  MOVWF  FF6
054AC:  MOVLW  04
054AE:  MOVWF  FF7
054B0:  MOVLW  00
054B2:  MOVWF  FF8
054B4:  CALL   1F3E
....................    for(int i = 0; i < data_size; i++)
054B8:  MOVLB  2
054BA:  CLRF   x45
054BC:  MOVLB  0
054BE:  MOVLB  2
054C0:  MOVF   x43,W
054C2:  SUBWF  x45,W
054C4:  BTFSS  FD8.0
054C6:  BRA    54CE
054C8:  MOVLB  0
054CA:  GOTO   550A
054CE:  MOVLB  0
....................       fprintf(PC, "%X ", data[i]);
054D0:  MOVLB  2
054D2:  MOVF   x45,W
054D4:  ADDWF  x41,W
054D6:  MOVWF  FE9
054D8:  MOVLW  00
054DA:  ADDWFC x42,W
054DC:  MOVWF  FEA
054DE:  MOVFF  FEF,246
054E2:  MOVFF  246,B4B
054E6:  MOVLW  37
054E8:  MOVLB  B
054EA:  MOVWF  x4C
054EC:  MOVLB  0
054EE:  CALL   2188
054F2:  MOVLW  20
054F4:  BTFSS  FA6.6
054F6:  GOTO   54F4
054FA:  MOVLB  E
054FC:  MOVWF  xF9
054FE:  MOVLB  0
05500:  MOVLB  2
05502:  INCF   x45,F
05504:  MOVLB  0
05506:  GOTO   54BE
....................    fprintf(PC, "\r\n");
0550A:  MOVLW  0D
0550C:  BTFSS  FA6.6
0550E:  GOTO   550C
05512:  MOVLB  E
05514:  MOVWF  xF9
05516:  MOVLW  0A
05518:  MOVLB  0
0551A:  BTFSS  FA6.6
0551C:  GOTO   551A
05520:  MOVLB  E
05522:  MOVWF  xF9
05524:  MOVLB  0
05526:  GOTO   55BC (RETURN)
.................... }
.................... 
.................... #include "../lib/communication/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    return command;
.................... }
.................... 
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
055BE:  MOVLW  0F
055C0:  MOVLB  2
055C2:  MOVWF  x2B
055C4:  CLRF   x2D
055C6:  CLRF   x2C
055C8:  CLRF   x2E
055CA:  MOVLB  0
055CC:  CALL   552A
055D0:  RETURN 0
.................... }
.................... 
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
0E410:  MOVLW  03
0E412:  MOVLB  2
0E414:  MOVWF  x2B
0E416:  CLRF   x2D
0E418:  MOVLW  4C
0E41A:  MOVWF  x2C
0E41C:  MOVLW  04
0E41E:  MOVWF  x2E
0E420:  MOVLB  0
0E422:  CALL   552A
0E426:  GOTO   E44E (RETURN)
.................... }
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (kbhit())
....................    {
....................       fgetc(BOSS);
....................       transmit_status();
....................    }
.................... }
.................... 
.................... 
.................... 
.................... // コア機能実装ファイル
.................... #include "domain/mmj_cigs_iv.c"
.................... #include "mmj_cigs_iv.h"               // 同じフォルダのヘッダー
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/mmj_cigs_config.h"      // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../device_driver/ad7490_driver.h"   // デバイス定義  
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../device_driver/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_flash.h"               // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t flash_counter_table[];
.................... extern FlashCounter_t *flash_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/mission_tools.h"   // 通信ツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../hal/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... 
.................... unsigned int32 get_current_msec();
.................... void set_current_msec(unsigned int32 msec);
.................... void add_current_msec(unsigned int32 msec);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... void sweep_with_print()
*
0CB40:  MOVLW  01
0CB42:  MOVLB  2
0CB44:  MOVWF  x2E
0CB46:  MOVLW  2C
0CB48:  MOVWF  x2D
0CB4A:  MOVLW  02
0CB4C:  MOVWF  x30
0CB4E:  MOVLW  BC
0CB50:  MOVWF  x2F
.................... {
....................     unsigned int16 curr_threshold = 300;
....................     unsigned int16 curr_limit = 700;
.................... 
....................     // Enable both CIGS ports
....................     connect_port1();
0CB52:  MOVLB  0
0CB54:  CALL   4ED0
....................     connect_port2();
0CB58:  CALL   4ED8
....................     mcp4901_1_write(0); 
0CB5C:  MOVLB  A
0CB5E:  CLRF   x64
0CB60:  CLRF   x63
0CB62:  MOVLB  0
0CB64:  CALL   24D0
....................     mcp4901_2_write(0);
0CB68:  MOVLB  A
0CB6A:  CLRF   x64
0CB6C:  CLRF   x63
0CB6E:  MOVLB  0
0CB70:  CALL   2512
....................     delay_ms(100);
0CB74:  MOVLW  64
0CB76:  MOVLB  B
0CB78:  MOVWF  xA6
0CB7A:  MOVLB  0
0CB7C:  CALL   1F10
....................     
....................     // Init Port1
....................     sweep_config_t port1 = {0};
0CB80:  MOVLB  2
0CB82:  CLRF   x31
0CB84:  CLRF   x32
0CB86:  CLRF   x33
0CB88:  CLRF   x34
0CB8A:  CLRF   x35
0CB8C:  CLRF   x36
0CB8E:  CLRF   x37
0CB90:  CLRF   x38
0CB92:  CLRF   x39
0CB94:  CLRF   x3A
0CB96:  CLRF   x3B
0CB98:  CLRF   x3C
0CB9A:  CLRF   x3D
0CB9C:  CLRF   x3E
0CB9E:  CLRF   x3F
0CBA0:  CLRF   x40
0CBA2:  CLRF   x41
0CBA4:  CLRF   x42
0CBA6:  CLRF   x43
0CBA8:  CLRF   x44
0CBAA:  CLRF   x45
0CBAC:  CLRF   x46
0CBAE:  CLRF   x47
0CBB0:  CLRF   x48
0CBB2:  CLRF   x49
0CBB4:  CLRF   x4A
0CBB6:  CLRF   x4B
0CBB8:  CLRF   x4C
0CBBA:  CLRF   x4D
0CBBC:  CLRF   x4E
0CBBE:  CLRF   x4F
0CBC0:  CLRF   x50
0CBC2:  CLRF   x51
0CBC4:  CLRF   x52
0CBC6:  CLRF   x53
0CBC8:  CLRF   x54
0CBCA:  CLRF   x55
0CBCC:  CLRF   x56
0CBCE:  CLRF   x57
0CBD0:  CLRF   x58
0CBD2:  CLRF   x59
0CBD4:  CLRF   x5A
0CBD6:  CLRF   x5B
0CBD8:  CLRF   x5C
0CBDA:  CLRF   x5D
0CBDC:  CLRF   x5E
0CBDE:  CLRF   x5F
0CBE0:  CLRF   x60
0CBE2:  CLRF   x61
0CBE4:  CLRF   x62
0CBE6:  CLRF   x63
0CBE8:  CLRF   x64
0CBEA:  CLRF   x65
0CBEC:  CLRF   x66
0CBEE:  CLRF   x67
0CBF0:  CLRF   x68
0CBF2:  CLRF   x69
0CBF4:  CLRF   x6A
0CBF6:  CLRF   x6B
0CBF8:  CLRF   x6C
0CBFA:  CLRF   x6D
0CBFC:  CLRF   x6E
0CBFE:  CLRF   x6F
0CC00:  CLRF   x70
0CC02:  CLRF   x71
0CC04:  CLRF   x72
0CC06:  CLRF   x73
0CC08:  CLRF   x74
0CC0A:  CLRF   x75
0CC0C:  CLRF   x76
0CC0E:  CLRF   x77
0CC10:  CLRF   x78
0CC12:  CLRF   x79
0CC14:  CLRF   x7A
0CC16:  CLRF   x7B
0CC18:  CLRF   x7C
0CC1A:  CLRF   x7D
0CC1C:  CLRF   x7E
0CC1E:  CLRF   x7F
0CC20:  CLRF   x80
0CC22:  CLRF   x81
0CC24:  CLRF   x82
0CC26:  CLRF   x83
0CC28:  CLRF   x84
0CC2A:  CLRF   x85
0CC2C:  CLRF   x86
0CC2E:  CLRF   x87
0CC30:  CLRF   x88
0CC32:  CLRF   x89
0CC34:  CLRF   x8A
0CC36:  CLRF   x8B
0CC38:  CLRF   x8C
0CC3A:  CLRF   x8D
0CC3C:  CLRF   x8E
0CC3E:  CLRF   x8F
0CC40:  CLRF   x90
0CC42:  CLRF   x91
0CC44:  CLRF   x92
0CC46:  CLRF   x93
0CC48:  CLRF   x94
0CC4A:  CLRF   x95
0CC4C:  CLRF   x96
0CC4E:  CLRF   x97
0CC50:  CLRF   x98
0CC52:  CLRF   x99
0CC54:  CLRF   x9A
0CC56:  CLRF   x9B
0CC58:  CLRF   x9C
0CC5A:  CLRF   x9D
0CC5C:  CLRF   x9E
0CC5E:  CLRF   x9F
0CC60:  CLRF   xA0
0CC62:  CLRF   xA1
0CC64:  CLRF   xA2
0CC66:  CLRF   xA3
0CC68:  CLRF   xA4
0CC6A:  CLRF   xA5
0CC6C:  CLRF   xA6
0CC6E:  CLRF   xA7
0CC70:  CLRF   xA8
0CC72:  CLRF   xA9
0CC74:  CLRF   xAA
0CC76:  CLRF   xAB
0CC78:  CLRF   xAC
0CC7A:  CLRF   xAD
0CC7C:  CLRF   xAE
0CC7E:  CLRF   xAF
0CC80:  CLRF   xB0
0CC82:  CLRF   xB1
0CC84:  CLRF   xB2
0CC86:  CLRF   xB3
0CC88:  CLRF   xB4
0CC8A:  CLRF   xB5
0CC8C:  CLRF   xB6
0CC8E:  CLRF   xB7
0CC90:  CLRF   xB8
0CC92:  CLRF   xB9
0CC94:  CLRF   xBA
0CC96:  CLRF   xBB
0CC98:  CLRF   xBC
0CC9A:  CLRF   xBD
0CC9C:  CLRF   xBE
0CC9E:  CLRF   xBF
0CCA0:  CLRF   xC0
0CCA2:  CLRF   xC1
0CCA4:  CLRF   xC2
0CCA6:  CLRF   xC3
0CCA8:  CLRF   xC4
0CCAA:  CLRF   xC5
0CCAC:  CLRF   xC6
0CCAE:  CLRF   xC7
0CCB0:  CLRF   xC8
0CCB2:  CLRF   xC9
0CCB4:  CLRF   xCA
0CCB6:  CLRF   xCB
0CCB8:  CLRF   xCC
0CCBA:  CLRF   xCD
0CCBC:  CLRF   xCE
0CCBE:  CLRF   xCF
0CCC0:  CLRF   xD0
0CCC2:  CLRF   xD1
0CCC4:  CLRF   xD2
0CCC6:  CLRF   xD3
0CCC8:  CLRF   xD4
0CCCA:  CLRF   xD5
0CCCC:  CLRF   xD6
0CCCE:  CLRF   xD7
0CCD0:  CLRF   xD8
0CCD2:  CLRF   xD9
0CCD4:  CLRF   xDA
0CCD6:  CLRF   xDB
0CCD8:  CLRF   xDC
0CCDA:  CLRF   xDD
0CCDC:  CLRF   xDE
0CCDE:  CLRF   xDF
0CCE0:  CLRF   xE0
0CCE2:  CLRF   xE1
0CCE4:  CLRF   xE2
0CCE6:  CLRF   xE3
0CCE8:  CLRF   xE4
0CCEA:  CLRF   xE5
0CCEC:  CLRF   xE6
0CCEE:  CLRF   xE7
0CCF0:  CLRF   xE8
0CCF2:  CLRF   xE9
0CCF4:  CLRF   xEA
0CCF6:  CLRF   xEB
0CCF8:  CLRF   xEC
0CCFA:  CLRF   xED
0CCFC:  CLRF   xEE
0CCFE:  CLRF   xEF
0CD00:  CLRF   xF0
0CD02:  CLRF   xF1
0CD04:  CLRF   xF2
0CD06:  CLRF   xF3
0CD08:  CLRF   xF4
0CD0A:  CLRF   xF5
0CD0C:  CLRF   xF6
0CD0E:  CLRF   xF7
0CD10:  CLRF   xF8
0CD12:  CLRF   xF9
0CD14:  CLRF   xFA
0CD16:  CLRF   xFB
0CD18:  CLRF   xFC
0CD1A:  CLRF   xFD
0CD1C:  CLRF   xFE
0CD1E:  CLRF   xFF
0CD20:  MOVLB  3
0CD22:  CLRF   x00
0CD24:  CLRF   x01
0CD26:  CLRF   x02
0CD28:  CLRF   x03
0CD2A:  CLRF   x04
0CD2C:  CLRF   x05
0CD2E:  CLRF   x06
0CD30:  CLRF   x07
0CD32:  CLRF   x08
0CD34:  CLRF   x09
0CD36:  CLRF   x0A
0CD38:  CLRF   x0B
0CD3A:  CLRF   x0C
0CD3C:  CLRF   x0D
0CD3E:  CLRF   x0E
0CD40:  CLRF   x0F
0CD42:  CLRF   x10
0CD44:  CLRF   x11
0CD46:  CLRF   x12
0CD48:  CLRF   x13
0CD4A:  CLRF   x14
0CD4C:  CLRF   x15
0CD4E:  CLRF   x16
0CD50:  CLRF   x17
0CD52:  CLRF   x18
0CD54:  CLRF   x19
0CD56:  CLRF   x1A
0CD58:  CLRF   x1B
0CD5A:  CLRF   x1C
0CD5C:  CLRF   x1D
0CD5E:  CLRF   x1E
0CD60:  CLRF   x1F
0CD62:  CLRF   x20
0CD64:  CLRF   x21
0CD66:  CLRF   x22
0CD68:  CLRF   x23
0CD6A:  CLRF   x24
0CD6C:  CLRF   x25
0CD6E:  CLRF   x26
0CD70:  CLRF   x27
0CD72:  CLRF   x28
0CD74:  CLRF   x29
0CD76:  CLRF   x2A
0CD78:  CLRF   x2B
0CD7A:  CLRF   x2C
0CD7C:  CLRF   x2D
0CD7E:  CLRF   x2E
0CD80:  CLRF   x2F
0CD82:  CLRF   x30
0CD84:  CLRF   x31
0CD86:  CLRF   x32
0CD88:  CLRF   x33
0CD8A:  CLRF   x34
0CD8C:  CLRF   x35
0CD8E:  CLRF   x36
0CD90:  CLRF   x37
0CD92:  CLRF   x38
0CD94:  CLRF   x39
0CD96:  CLRF   x3A
0CD98:  CLRF   x3B
0CD9A:  CLRF   x3C
0CD9C:  CLRF   x3D
0CD9E:  CLRF   x3E
0CDA0:  CLRF   x3F
0CDA2:  CLRF   x40
0CDA4:  CLRF   x41
0CDA6:  CLRF   x42
0CDA8:  CLRF   x43
0CDAA:  CLRF   x44
0CDAC:  CLRF   x45
0CDAE:  CLRF   x46
0CDB0:  CLRF   x47
0CDB2:  CLRF   x48
0CDB4:  CLRF   x49
0CDB6:  CLRF   x4A
0CDB8:  CLRF   x4B
0CDBA:  CLRF   x4C
0CDBC:  CLRF   x4D
0CDBE:  CLRF   x4E
0CDC0:  CLRF   x4F
0CDC2:  CLRF   x50
0CDC4:  CLRF   x51
0CDC6:  CLRF   x52
0CDC8:  CLRF   x53
0CDCA:  CLRF   x54
0CDCC:  CLRF   x55
0CDCE:  CLRF   x56
0CDD0:  CLRF   x57
0CDD2:  CLRF   x58
0CDD4:  CLRF   x59
0CDD6:  CLRF   x5A
0CDD8:  CLRF   x5B
0CDDA:  CLRF   x5C
0CDDC:  CLRF   x5D
0CDDE:  CLRF   x5E
0CDE0:  CLRF   x5F
0CDE2:  CLRF   x60
0CDE4:  CLRF   x61
0CDE6:  CLRF   x62
0CDE8:  CLRF   x63
0CDEA:  CLRF   x64
0CDEC:  CLRF   x65
0CDEE:  CLRF   x66
0CDF0:  CLRF   x67
0CDF2:  CLRF   x68
0CDF4:  CLRF   x69
0CDF6:  CLRF   x6A
0CDF8:  CLRF   x6B
0CDFA:  CLRF   x6C
0CDFC:  CLRF   x6D
0CDFE:  CLRF   x6E
0CE00:  CLRF   x6F
0CE02:  CLRF   x70
0CE04:  CLRF   x71
0CE06:  CLRF   x72
0CE08:  CLRF   x73
0CE0A:  CLRF   x74
0CE0C:  CLRF   x75
0CE0E:  CLRF   x76
0CE10:  CLRF   x77
0CE12:  CLRF   x78
0CE14:  CLRF   x79
0CE16:  CLRF   x7A
0CE18:  CLRF   x7B
0CE1A:  CLRF   x7C
0CE1C:  CLRF   x7D
0CE1E:  CLRF   x7E
0CE20:  CLRF   x7F
0CE22:  CLRF   x80
0CE24:  CLRF   x81
0CE26:  CLRF   x82
0CE28:  CLRF   x83
0CE2A:  CLRF   x84
0CE2C:  CLRF   x85
0CE2E:  CLRF   x86
0CE30:  CLRF   x87
0CE32:  CLRF   x88
0CE34:  CLRF   x89
0CE36:  CLRF   x8A
0CE38:  CLRF   x8B
0CE3A:  CLRF   x8C
0CE3C:  CLRF   x8D
0CE3E:  CLRF   x8E
0CE40:  CLRF   x8F
0CE42:  CLRF   x90
0CE44:  CLRF   x91
0CE46:  CLRF   x92
0CE48:  CLRF   x93
0CE4A:  CLRF   x94
0CE4C:  CLRF   x95
0CE4E:  CLRF   x96
0CE50:  CLRF   x97
0CE52:  CLRF   x98
0CE54:  CLRF   x99
0CE56:  CLRF   x9A
0CE58:  CLRF   x9B
0CE5A:  CLRF   x9C
0CE5C:  CLRF   x9D
0CE5E:  CLRF   x9E
0CE60:  CLRF   x9F
0CE62:  CLRF   xA0
0CE64:  CLRF   xA1
0CE66:  CLRF   xA2
0CE68:  CLRF   xA3
0CE6A:  CLRF   xA4
0CE6C:  CLRF   xA5
0CE6E:  CLRF   xA6
0CE70:  CLRF   xA7
0CE72:  CLRF   xA8
0CE74:  CLRF   xA9
0CE76:  CLRF   xAA
0CE78:  CLRF   xAB
0CE7A:  CLRF   xAC
0CE7C:  CLRF   xAD
0CE7E:  CLRF   xAE
0CE80:  CLRF   xAF
0CE82:  CLRF   xB0
0CE84:  CLRF   xB1
0CE86:  CLRF   xB2
0CE88:  CLRF   xB3
0CE8A:  CLRF   xB4
0CE8C:  CLRF   xB5
0CE8E:  CLRF   xB6
0CE90:  CLRF   xB7
0CE92:  CLRF   xB8
0CE94:  CLRF   xB9
0CE96:  CLRF   xBA
0CE98:  CLRF   xBB
0CE9A:  CLRF   xBC
0CE9C:  CLRF   xBD
0CE9E:  CLRF   xBE
0CEA0:  CLRF   xBF
0CEA2:  CLRF   xC0
0CEA4:  CLRF   xC1
0CEA6:  CLRF   xC2
0CEA8:  CLRF   xC3
0CEAA:  CLRF   xC4
0CEAC:  CLRF   xC5
0CEAE:  CLRF   xC6
0CEB0:  CLRF   xC7
0CEB2:  CLRF   xC8
0CEB4:  CLRF   xC9
0CEB6:  CLRF   xCA
0CEB8:  CLRF   xCB
0CEBA:  CLRF   xCC
0CEBC:  CLRF   xCD
0CEBE:  CLRF   xCE
0CEC0:  CLRF   xCF
0CEC2:  CLRF   xD0
0CEC4:  CLRF   xD1
0CEC6:  CLRF   xD2
0CEC8:  CLRF   xD3
0CECA:  CLRF   xD4
0CECC:  CLRF   xD5
0CECE:  CLRF   xD6
0CED0:  CLRF   xD7
0CED2:  CLRF   xD8
0CED4:  CLRF   xD9
0CED6:  CLRF   xDA
0CED8:  CLRF   xDB
0CEDA:  CLRF   xDC
0CEDC:  CLRF   xDD
0CEDE:  CLRF   xDE
0CEE0:  CLRF   xDF
0CEE2:  CLRF   xE0
0CEE4:  CLRF   xE1
0CEE6:  CLRF   xE2
0CEE8:  CLRF   xE3
0CEEA:  CLRF   xE4
0CEEC:  CLRF   xE5
0CEEE:  CLRF   xE6
0CEF0:  CLRF   xE7
0CEF2:  CLRF   xE8
0CEF4:  CLRF   xE9
0CEF6:  CLRF   xEA
0CEF8:  CLRF   xEB
0CEFA:  CLRF   xEC
0CEFC:  CLRF   xED
0CEFE:  CLRF   xEE
0CF00:  CLRF   xEF
0CF02:  CLRF   xF0
0CF04:  CLRF   xF1
0CF06:  CLRF   xF2
0CF08:  CLRF   xF3
0CF0A:  CLRF   xF4
0CF0C:  CLRF   xF5
0CF0E:  CLRF   xF6
0CF10:  CLRF   xF7
0CF12:  CLRF   xF8
0CF14:  CLRF   xF9
0CF16:  CLRF   xFA
0CF18:  CLRF   xFB
0CF1A:  CLRF   xFC
0CF1C:  CLRF   xFD
0CF1E:  CLRF   xFE
0CF20:  CLRF   xFF
0CF22:  MOVLB  4
0CF24:  CLRF   x00
0CF26:  CLRF   x01
0CF28:  CLRF   x02
0CF2A:  CLRF   x03
0CF2C:  CLRF   x04
0CF2E:  CLRF   x05
0CF30:  CLRF   x06
0CF32:  CLRF   x07
0CF34:  CLRF   x08
0CF36:  CLRF   x09
0CF38:  CLRF   x0A
0CF3A:  CLRF   x0B
0CF3C:  CLRF   x0C
0CF3E:  CLRF   x0D
0CF40:  CLRF   x0E
0CF42:  CLRF   x0F
0CF44:  CLRF   x10
0CF46:  CLRF   x11
0CF48:  CLRF   x12
0CF4A:  CLRF   x13
0CF4C:  CLRF   x14
0CF4E:  CLRF   x15
0CF50:  CLRF   x16
0CF52:  CLRF   x17
0CF54:  CLRF   x18
0CF56:  CLRF   x19
0CF58:  CLRF   x1A
0CF5A:  CLRF   x1B
0CF5C:  CLRF   x1C
0CF5E:  CLRF   x1D
0CF60:  CLRF   x1E
0CF62:  CLRF   x1F
0CF64:  CLRF   x20
0CF66:  CLRF   x21
0CF68:  CLRF   x22
0CF6A:  CLRF   x23
0CF6C:  CLRF   x24
0CF6E:  CLRF   x25
0CF70:  CLRF   x26
0CF72:  CLRF   x27
0CF74:  CLRF   x28
0CF76:  CLRF   x29
0CF78:  CLRF   x2A
0CF7A:  CLRF   x2B
0CF7C:  CLRF   x2C
0CF7E:  CLRF   x2D
0CF80:  CLRF   x2E
0CF82:  CLRF   x2F
0CF84:  CLRF   x30
0CF86:  CLRF   x31
0CF88:  CLRF   x32
0CF8A:  CLRF   x33
0CF8C:  CLRF   x34
0CF8E:  CLRF   x35
0CF90:  CLRF   x36
0CF92:  CLRF   x37
0CF94:  CLRF   x38
0CF96:  CLRF   x39
0CF98:  CLRF   x3A
0CF9A:  CLRF   x3B
0CF9C:  CLRF   x3C
0CF9E:  CLRF   x3D
0CFA0:  CLRF   x3E
0CFA2:  CLRF   x3F
0CFA4:  CLRF   x40
0CFA6:  CLRF   x41
0CFA8:  CLRF   x42
0CFAA:  CLRF   x43
0CFAC:  CLRF   x44
0CFAE:  CLRF   x45
0CFB0:  CLRF   x46
0CFB2:  CLRF   x47
0CFB4:  CLRF   x48
0CFB6:  CLRF   x49
0CFB8:  CLRF   x4A
0CFBA:  CLRF   x4B
0CFBC:  CLRF   x4C
0CFBE:  CLRF   x4D
0CFC0:  CLRF   x4E
0CFC2:  CLRF   x4F
0CFC4:  CLRF   x50
0CFC6:  CLRF   x51
0CFC8:  CLRF   x52
0CFCA:  CLRF   x53
0CFCC:  CLRF   x54
0CFCE:  CLRF   x55
0CFD0:  CLRF   x56
0CFD2:  CLRF   x57
0CFD4:  CLRF   x58
0CFD6:  CLRF   x59
0CFD8:  CLRF   x5A
0CFDA:  CLRF   x5B
0CFDC:  CLRF   x5C
0CFDE:  CLRF   x5D
0CFE0:  CLRF   x5E
0CFE2:  CLRF   x5F
0CFE4:  CLRF   x60
0CFE6:  CLRF   x61
0CFE8:  CLRF   x62
0CFEA:  CLRF   x63
0CFEC:  CLRF   x64
0CFEE:  CLRF   x65
0CFF0:  CLRF   x66
0CFF2:  CLRF   x67
0CFF4:  CLRF   x68
0CFF6:  CLRF   x69
0CFF8:  CLRF   x6A
0CFFA:  CLRF   x6B
0CFFC:  CLRF   x6C
0CFFE:  CLRF   x6D
0D000:  CLRF   x6E
0D002:  CLRF   x6F
0D004:  CLRF   x70
0D006:  CLRF   x71
0D008:  CLRF   x72
0D00A:  CLRF   x73
0D00C:  CLRF   x74
0D00E:  CLRF   x75
0D010:  CLRF   x76
0D012:  CLRF   x77
0D014:  CLRF   x78
0D016:  CLRF   x79
0D018:  CLRF   x7A
0D01A:  CLRF   x7B
0D01C:  CLRF   x7C
0D01E:  CLRF   x7D
0D020:  CLRF   x7E
0D022:  CLRF   x7F
0D024:  CLRF   x80
0D026:  CLRF   x81
0D028:  CLRF   x82
0D02A:  CLRF   x83
0D02C:  CLRF   x84
0D02E:  CLRF   x85
0D030:  CLRF   x86
0D032:  CLRF   x87
0D034:  CLRF   x88
0D036:  CLRF   x89
0D038:  CLRF   x8A
0D03A:  CLRF   x8B
0D03C:  CLRF   x8C
0D03E:  CLRF   x8D
0D040:  CLRF   x8E
0D042:  CLRF   x8F
0D044:  CLRF   x90
0D046:  CLRF   x91
0D048:  CLRF   x92
0D04A:  CLRF   x93
0D04C:  CLRF   x94
0D04E:  CLRF   x95
0D050:  CLRF   x96
0D052:  CLRF   x97
0D054:  CLRF   x98
0D056:  CLRF   x99
0D058:  CLRF   x9A
0D05A:  CLRF   x9B
0D05C:  CLRF   x9C
0D05E:  CLRF   x9D
0D060:  CLRF   x9E
0D062:  CLRF   x9F
0D064:  CLRF   xA0
0D066:  CLRF   xA1
0D068:  CLRF   xA2
0D06A:  CLRF   xA3
0D06C:  CLRF   xA4
0D06E:  CLRF   xA5
0D070:  CLRF   xA6
0D072:  CLRF   xA7
0D074:  CLRF   xA8
0D076:  CLRF   xA9
0D078:  CLRF   xAA
0D07A:  CLRF   xAB
0D07C:  CLRF   xAC
0D07E:  CLRF   xAD
0D080:  CLRF   xAE
0D082:  CLRF   xAF
0D084:  CLRF   xB0
0D086:  CLRF   xB1
0D088:  CLRF   xB2
0D08A:  CLRF   xB3
0D08C:  CLRF   xB4
0D08E:  CLRF   xB5
0D090:  CLRF   xB6
0D092:  CLRF   xB7
0D094:  CLRF   xB8
0D096:  CLRF   xB9
0D098:  CLRF   xBA
0D09A:  CLRF   xBB
0D09C:  CLRF   xBC
0D09E:  CLRF   xBD
0D0A0:  CLRF   xBE
0D0A2:  CLRF   xBF
0D0A4:  CLRF   xC0
0D0A6:  CLRF   xC1
0D0A8:  CLRF   xC2
0D0AA:  CLRF   xC3
0D0AC:  CLRF   xC4
0D0AE:  CLRF   xC5
0D0B0:  CLRF   xC6
0D0B2:  CLRF   xC7
0D0B4:  CLRF   xC8
0D0B6:  CLRF   xC9
0D0B8:  CLRF   xCA
0D0BA:  CLRF   xCB
0D0BC:  CLRF   xCC
0D0BE:  CLRF   xCD
0D0C0:  CLRF   xCE
0D0C2:  CLRF   xCF
0D0C4:  CLRF   xD0
0D0C6:  CLRF   xD1
0D0C8:  CLRF   xD2
0D0CA:  CLRF   xD3
0D0CC:  CLRF   xD4
0D0CE:  CLRF   xD5
0D0D0:  CLRF   xD6
0D0D2:  CLRF   xD7
0D0D4:  CLRF   xD8
0D0D6:  CLRF   xD9
0D0D8:  CLRF   xDA
0D0DA:  CLRF   xDB
0D0DC:  CLRF   xDC
0D0DE:  CLRF   xDD
0D0E0:  CLRF   xDE
0D0E2:  CLRF   xDF
0D0E4:  CLRF   xE0
0D0E6:  CLRF   xE1
0D0E8:  CLRF   xE2
0D0EA:  CLRF   xE3
0D0EC:  CLRF   xE4
0D0EE:  CLRF   xE5
0D0F0:  CLRF   xE6
0D0F2:  CLRF   xE7
0D0F4:  CLRF   xE8
0D0F6:  CLRF   xE9
0D0F8:  CLRF   xEA
0D0FA:  CLRF   xEB
0D0FC:  CLRF   xEC
0D0FE:  CLRF   xED
0D100:  CLRF   xEE
0D102:  CLRF   xEF
0D104:  CLRF   xF0
0D106:  CLRF   xF1
0D108:  CLRF   xF2
0D10A:  CLRF   xF3
0D10C:  CLRF   xF4
0D10E:  CLRF   xF5
0D110:  CLRF   xF6
0D112:  CLRF   xF7
0D114:  CLRF   xF8
0D116:  CLRF   xF9
0D118:  CLRF   xFA
0D11A:  CLRF   xFB
0D11C:  CLRF   xFC
0D11E:  CLRF   xFD
0D120:  CLRF   xFE
0D122:  CLRF   xFF
0D124:  MOVLB  5
0D126:  CLRF   x00
0D128:  CLRF   x01
0D12A:  CLRF   x02
0D12C:  CLRF   x03
0D12E:  CLRF   x04
0D130:  CLRF   x05
0D132:  CLRF   x06
0D134:  CLRF   x07
0D136:  CLRF   x08
0D138:  CLRF   x09
0D13A:  CLRF   x0A
0D13C:  CLRF   x0B
0D13E:  CLRF   x0C
0D140:  CLRF   x0D
0D142:  CLRF   x0E
0D144:  CLRF   x0F
0D146:  CLRF   x10
0D148:  CLRF   x11
0D14A:  CLRF   x12
0D14C:  CLRF   x13
0D14E:  CLRF   x14
0D150:  CLRF   x15
0D152:  CLRF   x16
0D154:  CLRF   x17
0D156:  CLRF   x18
0D158:  CLRF   x19
0D15A:  CLRF   x1A
0D15C:  CLRF   x1B
0D15E:  CLRF   x1C
0D160:  CLRF   x1D
0D162:  CLRF   x1E
0D164:  CLRF   x1F
0D166:  CLRF   x20
0D168:  CLRF   x21
0D16A:  CLRF   x22
0D16C:  CLRF   x23
0D16E:  CLRF   x24
0D170:  CLRF   x25
0D172:  CLRF   x26
0D174:  CLRF   x27
0D176:  CLRF   x28
0D178:  CLRF   x29
0D17A:  CLRF   x2A
0D17C:  CLRF   x2B
0D17E:  CLRF   x2C
0D180:  CLRF   x2D
0D182:  CLRF   x2E
0D184:  CLRF   x2F
0D186:  CLRF   x30
0D188:  CLRF   x31
0D18A:  CLRF   x32
0D18C:  CLRF   x33
0D18E:  CLRF   x34
0D190:  CLRF   x35
0D192:  CLRF   x36
0D194:  CLRF   x37
0D196:  CLRF   x38
0D198:  CLRF   x39
0D19A:  CLRF   x3A
0D19C:  CLRF   x3B
0D19E:  CLRF   x3C
0D1A0:  CLRF   x3D
0D1A2:  CLRF   x3E
0D1A4:  CLRF   x3F
0D1A6:  CLRF   x40
0D1A8:  CLRF   x41
0D1AA:  CLRF   x42
0D1AC:  CLRF   x43
0D1AE:  CLRF   x44
0D1B0:  CLRF   x45
0D1B2:  CLRF   x46
0D1B4:  CLRF   x47
0D1B6:  CLRF   x48
0D1B8:  CLRF   x49
0D1BA:  CLRF   x4A
0D1BC:  CLRF   x4B
0D1BE:  CLRF   x4C
0D1C0:  CLRF   x4D
0D1C2:  CLRF   x4E
0D1C4:  CLRF   x4F
0D1C6:  CLRF   x50
0D1C8:  CLRF   x51
0D1CA:  CLRF   x52
0D1CC:  CLRF   x53
0D1CE:  CLRF   x54
0D1D0:  CLRF   x55
0D1D2:  CLRF   x56
0D1D4:  CLRF   x57
0D1D6:  CLRF   x58
0D1D8:  CLRF   x59
0D1DA:  CLRF   x5A
0D1DC:  CLRF   x5B
0D1DE:  CLRF   x5C
0D1E0:  CLRF   x5D
0D1E2:  CLRF   x5E
0D1E4:  CLRF   x5F
0D1E6:  CLRF   x60
0D1E8:  CLRF   x61
0D1EA:  CLRF   x62
0D1EC:  CLRF   x63
0D1EE:  CLRF   x64
0D1F0:  CLRF   x65
0D1F2:  CLRF   x66
0D1F4:  CLRF   x67
0D1F6:  CLRF   x68
0D1F8:  CLRF   x69
0D1FA:  CLRF   x6A
0D1FC:  CLRF   x6B
0D1FE:  CLRF   x6C
0D200:  CLRF   x6D
0D202:  CLRF   x6E
0D204:  CLRF   x6F
0D206:  CLRF   x70
0D208:  CLRF   x71
0D20A:  CLRF   x72
0D20C:  CLRF   x73
0D20E:  CLRF   x74
0D210:  CLRF   x75
0D212:  CLRF   x76
0D214:  CLRF   x77
0D216:  CLRF   x78
0D218:  CLRF   x79
0D21A:  CLRF   x7A
0D21C:  CLRF   x7B
0D21E:  CLRF   x7C
0D220:  CLRF   x7D
0D222:  CLRF   x7E
0D224:  CLRF   x7F
0D226:  CLRF   x80
0D228:  CLRF   x81
0D22A:  CLRF   x82
0D22C:  CLRF   x83
0D22E:  CLRF   x84
0D230:  CLRF   x85
0D232:  CLRF   x86
0D234:  CLRF   x87
0D236:  CLRF   x88
0D238:  CLRF   x89
0D23A:  CLRF   x8A
0D23C:  CLRF   x8B
0D23E:  CLRF   x8C
0D240:  CLRF   x8D
0D242:  CLRF   x8E
0D244:  CLRF   x8F
0D246:  CLRF   x90
0D248:  CLRF   x91
0D24A:  CLRF   x92
0D24C:  CLRF   x93
0D24E:  CLRF   x94
0D250:  CLRF   x95
0D252:  CLRF   x96
0D254:  CLRF   x97
0D256:  CLRF   x98
0D258:  CLRF   x99
0D25A:  CLRF   x9A
0D25C:  CLRF   x9B
0D25E:  CLRF   x9C
0D260:  CLRF   x9D
0D262:  CLRF   x9E
0D264:  CLRF   x9F
0D266:  CLRF   xA0
0D268:  CLRF   xA1
0D26A:  CLRF   xA2
0D26C:  CLRF   xA3
0D26E:  CLRF   xA4
0D270:  CLRF   xA5
0D272:  CLRF   xA6
0D274:  CLRF   xA7
0D276:  CLRF   xA8
0D278:  CLRF   xA9
0D27A:  CLRF   xAA
0D27C:  CLRF   xAB
0D27E:  CLRF   xAC
0D280:  CLRF   xAD
0D282:  CLRF   xAE
0D284:  CLRF   xAF
0D286:  CLRF   xB0
0D288:  CLRF   xB1
0D28A:  CLRF   xB2
0D28C:  CLRF   xB3
0D28E:  CLRF   xB4
0D290:  CLRF   xB5
0D292:  CLRF   xB6
0D294:  CLRF   xB7
0D296:  CLRF   xB8
0D298:  CLRF   xB9
0D29A:  CLRF   xBA
0D29C:  CLRF   xBB
0D29E:  CLRF   xBC
0D2A0:  CLRF   xBD
0D2A2:  CLRF   xBE
0D2A4:  CLRF   xBF
0D2A6:  CLRF   xC0
0D2A8:  CLRF   xC1
0D2AA:  CLRF   xC2
0D2AC:  CLRF   xC3
0D2AE:  CLRF   xC4
0D2B0:  CLRF   xC5
0D2B2:  CLRF   xC6
0D2B4:  CLRF   xC7
0D2B6:  CLRF   xC8
0D2B8:  CLRF   xC9
0D2BA:  CLRF   xCA
0D2BC:  CLRF   xCB
0D2BE:  CLRF   xCC
0D2C0:  CLRF   xCD
0D2C2:  CLRF   xCE
0D2C4:  CLRF   xCF
0D2C6:  CLRF   xD0
0D2C8:  CLRF   xD1
0D2CA:  CLRF   xD2
0D2CC:  CLRF   xD3
0D2CE:  CLRF   xD4
0D2D0:  CLRF   xD5
0D2D2:  CLRF   xD6
0D2D4:  CLRF   xD7
0D2D6:  CLRF   xD8
0D2D8:  CLRF   xD9
0D2DA:  CLRF   xDA
0D2DC:  CLRF   xDB
0D2DE:  CLRF   xDC
0D2E0:  CLRF   xDD
0D2E2:  CLRF   xDE
0D2E4:  CLRF   xDF
0D2E6:  CLRF   xE0
0D2E8:  CLRF   xE1
0D2EA:  CLRF   xE2
0D2EC:  CLRF   xE3
0D2EE:  CLRF   xE4
0D2F0:  CLRF   xE5
0D2F2:  CLRF   xE6
0D2F4:  CLRF   xE7
0D2F6:  CLRF   xE8
0D2F8:  CLRF   xE9
0D2FA:  CLRF   xEA
0D2FC:  CLRF   xEB
0D2FE:  CLRF   xEC
0D300:  CLRF   xED
0D302:  CLRF   xEE
0D304:  CLRF   xEF
0D306:  CLRF   xF0
0D308:  CLRF   xF1
0D30A:  CLRF   xF2
0D30C:  CLRF   xF3
0D30E:  CLRF   xF4
0D310:  CLRF   xF5
0D312:  CLRF   xF6
0D314:  CLRF   xF7
0D316:  CLRF   xF8
0D318:  CLRF   xF9
0D31A:  CLRF   xFA
0D31C:  CLRF   xFB
0D31E:  CLRF   xFC
0D320:  CLRF   xFD
0D322:  CLRF   xFE
0D324:  CLRF   xFF
0D326:  MOVLB  6
0D328:  CLRF   x00
0D32A:  CLRF   x01
0D32C:  CLRF   x02
0D32E:  CLRF   x03
0D330:  CLRF   x04
0D332:  CLRF   x05
0D334:  CLRF   x06
0D336:  CLRF   x07
0D338:  CLRF   x08
0D33A:  CLRF   x09
0D33C:  CLRF   x0A
0D33E:  CLRF   x0B
0D340:  CLRF   x0C
0D342:  CLRF   x0D
0D344:  CLRF   x0E
0D346:  CLRF   x0F
0D348:  CLRF   x10
0D34A:  CLRF   x11
0D34C:  CLRF   x12
0D34E:  CLRF   x13
0D350:  CLRF   x14
0D352:  CLRF   x15
0D354:  CLRF   x16
0D356:  CLRF   x17
0D358:  CLRF   x18
0D35A:  CLRF   x19
0D35C:  CLRF   x1A
0D35E:  CLRF   x1B
0D360:  CLRF   x1C
0D362:  CLRF   x1D
0D364:  CLRF   x1E
0D366:  CLRF   x1F
0D368:  CLRF   x20
0D36A:  CLRF   x21
0D36C:  CLRF   x22
0D36E:  CLRF   x23
0D370:  CLRF   x24
0D372:  CLRF   x25
0D374:  CLRF   x26
0D376:  CLRF   x27
0D378:  CLRF   x28
0D37A:  CLRF   x29
0D37C:  CLRF   x2A
0D37E:  CLRF   x2B
0D380:  CLRF   x2C
0D382:  CLRF   x2D
0D384:  CLRF   x2E
0D386:  CLRF   x2F
0D388:  CLRF   x30
....................     port1.port_num = 1;
0D38A:  MOVLW  01
0D38C:  MOVLB  2
0D38E:  MOVWF  x31
....................     port1.sweep_step = 0;
0D390:  CLRF   x33
0D392:  CLRF   x32
....................     port1.active = 1;
0D394:  MOVLB  6
0D396:  BSF    x30.0
.................... 
....................     // Init Port2
....................     sweep_config_t port2 = {0};
0D398:  CLRF   x31
0D39A:  CLRF   x32
0D39C:  CLRF   x33
0D39E:  CLRF   x34
0D3A0:  CLRF   x35
0D3A2:  CLRF   x36
0D3A4:  CLRF   x37
0D3A6:  CLRF   x38
0D3A8:  CLRF   x39
0D3AA:  CLRF   x3A
0D3AC:  CLRF   x3B
0D3AE:  CLRF   x3C
0D3B0:  CLRF   x3D
0D3B2:  CLRF   x3E
0D3B4:  CLRF   x3F
0D3B6:  CLRF   x40
0D3B8:  CLRF   x41
0D3BA:  CLRF   x42
0D3BC:  CLRF   x43
0D3BE:  CLRF   x44
0D3C0:  CLRF   x45
0D3C2:  CLRF   x46
0D3C4:  CLRF   x47
0D3C6:  CLRF   x48
0D3C8:  CLRF   x49
0D3CA:  CLRF   x4A
0D3CC:  CLRF   x4B
0D3CE:  CLRF   x4C
0D3D0:  CLRF   x4D
0D3D2:  CLRF   x4E
0D3D4:  CLRF   x4F
0D3D6:  CLRF   x50
0D3D8:  CLRF   x51
0D3DA:  CLRF   x52
0D3DC:  CLRF   x53
0D3DE:  CLRF   x54
0D3E0:  CLRF   x55
0D3E2:  CLRF   x56
0D3E4:  CLRF   x57
0D3E6:  CLRF   x58
0D3E8:  CLRF   x59
0D3EA:  CLRF   x5A
0D3EC:  CLRF   x5B
0D3EE:  CLRF   x5C
0D3F0:  CLRF   x5D
0D3F2:  CLRF   x5E
0D3F4:  CLRF   x5F
0D3F6:  CLRF   x60
0D3F8:  CLRF   x61
0D3FA:  CLRF   x62
0D3FC:  CLRF   x63
0D3FE:  CLRF   x64
0D400:  CLRF   x65
0D402:  CLRF   x66
0D404:  CLRF   x67
0D406:  CLRF   x68
0D408:  CLRF   x69
0D40A:  CLRF   x6A
0D40C:  CLRF   x6B
0D40E:  CLRF   x6C
0D410:  CLRF   x6D
0D412:  CLRF   x6E
0D414:  CLRF   x6F
0D416:  CLRF   x70
0D418:  CLRF   x71
0D41A:  CLRF   x72
0D41C:  CLRF   x73
0D41E:  CLRF   x74
0D420:  CLRF   x75
0D422:  CLRF   x76
0D424:  CLRF   x77
0D426:  CLRF   x78
0D428:  CLRF   x79
0D42A:  CLRF   x7A
0D42C:  CLRF   x7B
0D42E:  CLRF   x7C
0D430:  CLRF   x7D
0D432:  CLRF   x7E
0D434:  CLRF   x7F
0D436:  CLRF   x80
0D438:  CLRF   x81
0D43A:  CLRF   x82
0D43C:  CLRF   x83
0D43E:  CLRF   x84
0D440:  CLRF   x85
0D442:  CLRF   x86
0D444:  CLRF   x87
0D446:  CLRF   x88
0D448:  CLRF   x89
0D44A:  CLRF   x8A
0D44C:  CLRF   x8B
0D44E:  CLRF   x8C
0D450:  CLRF   x8D
0D452:  CLRF   x8E
0D454:  CLRF   x8F
0D456:  CLRF   x90
0D458:  CLRF   x91
0D45A:  CLRF   x92
0D45C:  CLRF   x93
0D45E:  CLRF   x94
0D460:  CLRF   x95
0D462:  CLRF   x96
0D464:  CLRF   x97
0D466:  CLRF   x98
0D468:  CLRF   x99
0D46A:  CLRF   x9A
0D46C:  CLRF   x9B
0D46E:  CLRF   x9C
0D470:  CLRF   x9D
0D472:  CLRF   x9E
0D474:  CLRF   x9F
0D476:  CLRF   xA0
0D478:  CLRF   xA1
0D47A:  CLRF   xA2
0D47C:  CLRF   xA3
0D47E:  CLRF   xA4
0D480:  CLRF   xA5
0D482:  CLRF   xA6
0D484:  CLRF   xA7
0D486:  CLRF   xA8
0D488:  CLRF   xA9
0D48A:  CLRF   xAA
0D48C:  CLRF   xAB
0D48E:  CLRF   xAC
0D490:  CLRF   xAD
0D492:  CLRF   xAE
0D494:  CLRF   xAF
0D496:  CLRF   xB0
0D498:  CLRF   xB1
0D49A:  CLRF   xB2
0D49C:  CLRF   xB3
0D49E:  CLRF   xB4
0D4A0:  CLRF   xB5
0D4A2:  CLRF   xB6
0D4A4:  CLRF   xB7
0D4A6:  CLRF   xB8
0D4A8:  CLRF   xB9
0D4AA:  CLRF   xBA
0D4AC:  CLRF   xBB
0D4AE:  CLRF   xBC
0D4B0:  CLRF   xBD
0D4B2:  CLRF   xBE
0D4B4:  CLRF   xBF
0D4B6:  CLRF   xC0
0D4B8:  CLRF   xC1
0D4BA:  CLRF   xC2
0D4BC:  CLRF   xC3
0D4BE:  CLRF   xC4
0D4C0:  CLRF   xC5
0D4C2:  CLRF   xC6
0D4C4:  CLRF   xC7
0D4C6:  CLRF   xC8
0D4C8:  CLRF   xC9
0D4CA:  CLRF   xCA
0D4CC:  CLRF   xCB
0D4CE:  CLRF   xCC
0D4D0:  CLRF   xCD
0D4D2:  CLRF   xCE
0D4D4:  CLRF   xCF
0D4D6:  CLRF   xD0
0D4D8:  CLRF   xD1
0D4DA:  CLRF   xD2
0D4DC:  CLRF   xD3
0D4DE:  CLRF   xD4
0D4E0:  CLRF   xD5
0D4E2:  CLRF   xD6
0D4E4:  CLRF   xD7
0D4E6:  CLRF   xD8
0D4E8:  CLRF   xD9
0D4EA:  CLRF   xDA
0D4EC:  CLRF   xDB
0D4EE:  CLRF   xDC
0D4F0:  CLRF   xDD
0D4F2:  CLRF   xDE
0D4F4:  CLRF   xDF
0D4F6:  CLRF   xE0
0D4F8:  CLRF   xE1
0D4FA:  CLRF   xE2
0D4FC:  CLRF   xE3
0D4FE:  CLRF   xE4
0D500:  CLRF   xE5
0D502:  CLRF   xE6
0D504:  CLRF   xE7
0D506:  CLRF   xE8
0D508:  CLRF   xE9
0D50A:  CLRF   xEA
0D50C:  CLRF   xEB
0D50E:  CLRF   xEC
0D510:  CLRF   xED
0D512:  CLRF   xEE
0D514:  CLRF   xEF
0D516:  CLRF   xF0
0D518:  CLRF   xF1
0D51A:  CLRF   xF2
0D51C:  CLRF   xF3
0D51E:  CLRF   xF4
0D520:  CLRF   xF5
0D522:  CLRF   xF6
0D524:  CLRF   xF7
0D526:  CLRF   xF8
0D528:  CLRF   xF9
0D52A:  CLRF   xFA
0D52C:  CLRF   xFB
0D52E:  CLRF   xFC
0D530:  CLRF   xFD
0D532:  CLRF   xFE
0D534:  CLRF   xFF
0D536:  MOVLB  7
0D538:  CLRF   x00
0D53A:  CLRF   x01
0D53C:  CLRF   x02
0D53E:  CLRF   x03
0D540:  CLRF   x04
0D542:  CLRF   x05
0D544:  CLRF   x06
0D546:  CLRF   x07
0D548:  CLRF   x08
0D54A:  CLRF   x09
0D54C:  CLRF   x0A
0D54E:  CLRF   x0B
0D550:  CLRF   x0C
0D552:  CLRF   x0D
0D554:  CLRF   x0E
0D556:  CLRF   x0F
0D558:  CLRF   x10
0D55A:  CLRF   x11
0D55C:  CLRF   x12
0D55E:  CLRF   x13
0D560:  CLRF   x14
0D562:  CLRF   x15
0D564:  CLRF   x16
0D566:  CLRF   x17
0D568:  CLRF   x18
0D56A:  CLRF   x19
0D56C:  CLRF   x1A
0D56E:  CLRF   x1B
0D570:  CLRF   x1C
0D572:  CLRF   x1D
0D574:  CLRF   x1E
0D576:  CLRF   x1F
0D578:  CLRF   x20
0D57A:  CLRF   x21
0D57C:  CLRF   x22
0D57E:  CLRF   x23
0D580:  CLRF   x24
0D582:  CLRF   x25
0D584:  CLRF   x26
0D586:  CLRF   x27
0D588:  CLRF   x28
0D58A:  CLRF   x29
0D58C:  CLRF   x2A
0D58E:  CLRF   x2B
0D590:  CLRF   x2C
0D592:  CLRF   x2D
0D594:  CLRF   x2E
0D596:  CLRF   x2F
0D598:  CLRF   x30
0D59A:  CLRF   x31
0D59C:  CLRF   x32
0D59E:  CLRF   x33
0D5A0:  CLRF   x34
0D5A2:  CLRF   x35
0D5A4:  CLRF   x36
0D5A6:  CLRF   x37
0D5A8:  CLRF   x38
0D5AA:  CLRF   x39
0D5AC:  CLRF   x3A
0D5AE:  CLRF   x3B
0D5B0:  CLRF   x3C
0D5B2:  CLRF   x3D
0D5B4:  CLRF   x3E
0D5B6:  CLRF   x3F
0D5B8:  CLRF   x40
0D5BA:  CLRF   x41
0D5BC:  CLRF   x42
0D5BE:  CLRF   x43
0D5C0:  CLRF   x44
0D5C2:  CLRF   x45
0D5C4:  CLRF   x46
0D5C6:  CLRF   x47
0D5C8:  CLRF   x48
0D5CA:  CLRF   x49
0D5CC:  CLRF   x4A
0D5CE:  CLRF   x4B
0D5D0:  CLRF   x4C
0D5D2:  CLRF   x4D
0D5D4:  CLRF   x4E
0D5D6:  CLRF   x4F
0D5D8:  CLRF   x50
0D5DA:  CLRF   x51
0D5DC:  CLRF   x52
0D5DE:  CLRF   x53
0D5E0:  CLRF   x54
0D5E2:  CLRF   x55
0D5E4:  CLRF   x56
0D5E6:  CLRF   x57
0D5E8:  CLRF   x58
0D5EA:  CLRF   x59
0D5EC:  CLRF   x5A
0D5EE:  CLRF   x5B
0D5F0:  CLRF   x5C
0D5F2:  CLRF   x5D
0D5F4:  CLRF   x5E
0D5F6:  CLRF   x5F
0D5F8:  CLRF   x60
0D5FA:  CLRF   x61
0D5FC:  CLRF   x62
0D5FE:  CLRF   x63
0D600:  CLRF   x64
0D602:  CLRF   x65
0D604:  CLRF   x66
0D606:  CLRF   x67
0D608:  CLRF   x68
0D60A:  CLRF   x69
0D60C:  CLRF   x6A
0D60E:  CLRF   x6B
0D610:  CLRF   x6C
0D612:  CLRF   x6D
0D614:  CLRF   x6E
0D616:  CLRF   x6F
0D618:  CLRF   x70
0D61A:  CLRF   x71
0D61C:  CLRF   x72
0D61E:  CLRF   x73
0D620:  CLRF   x74
0D622:  CLRF   x75
0D624:  CLRF   x76
0D626:  CLRF   x77
0D628:  CLRF   x78
0D62A:  CLRF   x79
0D62C:  CLRF   x7A
0D62E:  CLRF   x7B
0D630:  CLRF   x7C
0D632:  CLRF   x7D
0D634:  CLRF   x7E
0D636:  CLRF   x7F
0D638:  CLRF   x80
0D63A:  CLRF   x81
0D63C:  CLRF   x82
0D63E:  CLRF   x83
0D640:  CLRF   x84
0D642:  CLRF   x85
0D644:  CLRF   x86
0D646:  CLRF   x87
0D648:  CLRF   x88
0D64A:  CLRF   x89
0D64C:  CLRF   x8A
0D64E:  CLRF   x8B
0D650:  CLRF   x8C
0D652:  CLRF   x8D
0D654:  CLRF   x8E
0D656:  CLRF   x8F
0D658:  CLRF   x90
0D65A:  CLRF   x91
0D65C:  CLRF   x92
0D65E:  CLRF   x93
0D660:  CLRF   x94
0D662:  CLRF   x95
0D664:  CLRF   x96
0D666:  CLRF   x97
0D668:  CLRF   x98
0D66A:  CLRF   x99
0D66C:  CLRF   x9A
0D66E:  CLRF   x9B
0D670:  CLRF   x9C
0D672:  CLRF   x9D
0D674:  CLRF   x9E
0D676:  CLRF   x9F
0D678:  CLRF   xA0
0D67A:  CLRF   xA1
0D67C:  CLRF   xA2
0D67E:  CLRF   xA3
0D680:  CLRF   xA4
0D682:  CLRF   xA5
0D684:  CLRF   xA6
0D686:  CLRF   xA7
0D688:  CLRF   xA8
0D68A:  CLRF   xA9
0D68C:  CLRF   xAA
0D68E:  CLRF   xAB
0D690:  CLRF   xAC
0D692:  CLRF   xAD
0D694:  CLRF   xAE
0D696:  CLRF   xAF
0D698:  CLRF   xB0
0D69A:  CLRF   xB1
0D69C:  CLRF   xB2
0D69E:  CLRF   xB3
0D6A0:  CLRF   xB4
0D6A2:  CLRF   xB5
0D6A4:  CLRF   xB6
0D6A6:  CLRF   xB7
0D6A8:  CLRF   xB8
0D6AA:  CLRF   xB9
0D6AC:  CLRF   xBA
0D6AE:  CLRF   xBB
0D6B0:  CLRF   xBC
0D6B2:  CLRF   xBD
0D6B4:  CLRF   xBE
0D6B6:  CLRF   xBF
0D6B8:  CLRF   xC0
0D6BA:  CLRF   xC1
0D6BC:  CLRF   xC2
0D6BE:  CLRF   xC3
0D6C0:  CLRF   xC4
0D6C2:  CLRF   xC5
0D6C4:  CLRF   xC6
0D6C6:  CLRF   xC7
0D6C8:  CLRF   xC8
0D6CA:  CLRF   xC9
0D6CC:  CLRF   xCA
0D6CE:  CLRF   xCB
0D6D0:  CLRF   xCC
0D6D2:  CLRF   xCD
0D6D4:  CLRF   xCE
0D6D6:  CLRF   xCF
0D6D8:  CLRF   xD0
0D6DA:  CLRF   xD1
0D6DC:  CLRF   xD2
0D6DE:  CLRF   xD3
0D6E0:  CLRF   xD4
0D6E2:  CLRF   xD5
0D6E4:  CLRF   xD6
0D6E6:  CLRF   xD7
0D6E8:  CLRF   xD8
0D6EA:  CLRF   xD9
0D6EC:  CLRF   xDA
0D6EE:  CLRF   xDB
0D6F0:  CLRF   xDC
0D6F2:  CLRF   xDD
0D6F4:  CLRF   xDE
0D6F6:  CLRF   xDF
0D6F8:  CLRF   xE0
0D6FA:  CLRF   xE1
0D6FC:  CLRF   xE2
0D6FE:  CLRF   xE3
0D700:  CLRF   xE4
0D702:  CLRF   xE5
0D704:  CLRF   xE6
0D706:  CLRF   xE7
0D708:  CLRF   xE8
0D70A:  CLRF   xE9
0D70C:  CLRF   xEA
0D70E:  CLRF   xEB
0D710:  CLRF   xEC
0D712:  CLRF   xED
0D714:  CLRF   xEE
0D716:  CLRF   xEF
0D718:  CLRF   xF0
0D71A:  CLRF   xF1
0D71C:  CLRF   xF2
0D71E:  CLRF   xF3
0D720:  CLRF   xF4
0D722:  CLRF   xF5
0D724:  CLRF   xF6
0D726:  CLRF   xF7
0D728:  CLRF   xF8
0D72A:  CLRF   xF9
0D72C:  CLRF   xFA
0D72E:  CLRF   xFB
0D730:  CLRF   xFC
0D732:  CLRF   xFD
0D734:  CLRF   xFE
0D736:  CLRF   xFF
0D738:  MOVLB  8
0D73A:  CLRF   x00
0D73C:  CLRF   x01
0D73E:  CLRF   x02
0D740:  CLRF   x03
0D742:  CLRF   x04
0D744:  CLRF   x05
0D746:  CLRF   x06
0D748:  CLRF   x07
0D74A:  CLRF   x08
0D74C:  CLRF   x09
0D74E:  CLRF   x0A
0D750:  CLRF   x0B
0D752:  CLRF   x0C
0D754:  CLRF   x0D
0D756:  CLRF   x0E
0D758:  CLRF   x0F
0D75A:  CLRF   x10
0D75C:  CLRF   x11
0D75E:  CLRF   x12
0D760:  CLRF   x13
0D762:  CLRF   x14
0D764:  CLRF   x15
0D766:  CLRF   x16
0D768:  CLRF   x17
0D76A:  CLRF   x18
0D76C:  CLRF   x19
0D76E:  CLRF   x1A
0D770:  CLRF   x1B
0D772:  CLRF   x1C
0D774:  CLRF   x1D
0D776:  CLRF   x1E
0D778:  CLRF   x1F
0D77A:  CLRF   x20
0D77C:  CLRF   x21
0D77E:  CLRF   x22
0D780:  CLRF   x23
0D782:  CLRF   x24
0D784:  CLRF   x25
0D786:  CLRF   x26
0D788:  CLRF   x27
0D78A:  CLRF   x28
0D78C:  CLRF   x29
0D78E:  CLRF   x2A
0D790:  CLRF   x2B
0D792:  CLRF   x2C
0D794:  CLRF   x2D
0D796:  CLRF   x2E
0D798:  CLRF   x2F
0D79A:  CLRF   x30
0D79C:  CLRF   x31
0D79E:  CLRF   x32
0D7A0:  CLRF   x33
0D7A2:  CLRF   x34
0D7A4:  CLRF   x35
0D7A6:  CLRF   x36
0D7A8:  CLRF   x37
0D7AA:  CLRF   x38
0D7AC:  CLRF   x39
0D7AE:  CLRF   x3A
0D7B0:  CLRF   x3B
0D7B2:  CLRF   x3C
0D7B4:  CLRF   x3D
0D7B6:  CLRF   x3E
0D7B8:  CLRF   x3F
0D7BA:  CLRF   x40
0D7BC:  CLRF   x41
0D7BE:  CLRF   x42
0D7C0:  CLRF   x43
0D7C2:  CLRF   x44
0D7C4:  CLRF   x45
0D7C6:  CLRF   x46
0D7C8:  CLRF   x47
0D7CA:  CLRF   x48
0D7CC:  CLRF   x49
0D7CE:  CLRF   x4A
0D7D0:  CLRF   x4B
0D7D2:  CLRF   x4C
0D7D4:  CLRF   x4D
0D7D6:  CLRF   x4E
0D7D8:  CLRF   x4F
0D7DA:  CLRF   x50
0D7DC:  CLRF   x51
0D7DE:  CLRF   x52
0D7E0:  CLRF   x53
0D7E2:  CLRF   x54
0D7E4:  CLRF   x55
0D7E6:  CLRF   x56
0D7E8:  CLRF   x57
0D7EA:  CLRF   x58
0D7EC:  CLRF   x59
0D7EE:  CLRF   x5A
0D7F0:  CLRF   x5B
0D7F2:  CLRF   x5C
0D7F4:  CLRF   x5D
0D7F6:  CLRF   x5E
0D7F8:  CLRF   x5F
0D7FA:  CLRF   x60
0D7FC:  CLRF   x61
0D7FE:  CLRF   x62
0D800:  CLRF   x63
0D802:  CLRF   x64
0D804:  CLRF   x65
0D806:  CLRF   x66
0D808:  CLRF   x67
0D80A:  CLRF   x68
0D80C:  CLRF   x69
0D80E:  CLRF   x6A
0D810:  CLRF   x6B
0D812:  CLRF   x6C
0D814:  CLRF   x6D
0D816:  CLRF   x6E
0D818:  CLRF   x6F
0D81A:  CLRF   x70
0D81C:  CLRF   x71
0D81E:  CLRF   x72
0D820:  CLRF   x73
0D822:  CLRF   x74
0D824:  CLRF   x75
0D826:  CLRF   x76
0D828:  CLRF   x77
0D82A:  CLRF   x78
0D82C:  CLRF   x79
0D82E:  CLRF   x7A
0D830:  CLRF   x7B
0D832:  CLRF   x7C
0D834:  CLRF   x7D
0D836:  CLRF   x7E
0D838:  CLRF   x7F
0D83A:  CLRF   x80
0D83C:  CLRF   x81
0D83E:  CLRF   x82
0D840:  CLRF   x83
0D842:  CLRF   x84
0D844:  CLRF   x85
0D846:  CLRF   x86
0D848:  CLRF   x87
0D84A:  CLRF   x88
0D84C:  CLRF   x89
0D84E:  CLRF   x8A
0D850:  CLRF   x8B
0D852:  CLRF   x8C
0D854:  CLRF   x8D
0D856:  CLRF   x8E
0D858:  CLRF   x8F
0D85A:  CLRF   x90
0D85C:  CLRF   x91
0D85E:  CLRF   x92
0D860:  CLRF   x93
0D862:  CLRF   x94
0D864:  CLRF   x95
0D866:  CLRF   x96
0D868:  CLRF   x97
0D86A:  CLRF   x98
0D86C:  CLRF   x99
0D86E:  CLRF   x9A
0D870:  CLRF   x9B
0D872:  CLRF   x9C
0D874:  CLRF   x9D
0D876:  CLRF   x9E
0D878:  CLRF   x9F
0D87A:  CLRF   xA0
0D87C:  CLRF   xA1
0D87E:  CLRF   xA2
0D880:  CLRF   xA3
0D882:  CLRF   xA4
0D884:  CLRF   xA5
0D886:  CLRF   xA6
0D888:  CLRF   xA7
0D88A:  CLRF   xA8
0D88C:  CLRF   xA9
0D88E:  CLRF   xAA
0D890:  CLRF   xAB
0D892:  CLRF   xAC
0D894:  CLRF   xAD
0D896:  CLRF   xAE
0D898:  CLRF   xAF
0D89A:  CLRF   xB0
0D89C:  CLRF   xB1
0D89E:  CLRF   xB2
0D8A0:  CLRF   xB3
0D8A2:  CLRF   xB4
0D8A4:  CLRF   xB5
0D8A6:  CLRF   xB6
0D8A8:  CLRF   xB7
0D8AA:  CLRF   xB8
0D8AC:  CLRF   xB9
0D8AE:  CLRF   xBA
0D8B0:  CLRF   xBB
0D8B2:  CLRF   xBC
0D8B4:  CLRF   xBD
0D8B6:  CLRF   xBE
0D8B8:  CLRF   xBF
0D8BA:  CLRF   xC0
0D8BC:  CLRF   xC1
0D8BE:  CLRF   xC2
0D8C0:  CLRF   xC3
0D8C2:  CLRF   xC4
0D8C4:  CLRF   xC5
0D8C6:  CLRF   xC6
0D8C8:  CLRF   xC7
0D8CA:  CLRF   xC8
0D8CC:  CLRF   xC9
0D8CE:  CLRF   xCA
0D8D0:  CLRF   xCB
0D8D2:  CLRF   xCC
0D8D4:  CLRF   xCD
0D8D6:  CLRF   xCE
0D8D8:  CLRF   xCF
0D8DA:  CLRF   xD0
0D8DC:  CLRF   xD1
0D8DE:  CLRF   xD2
0D8E0:  CLRF   xD3
0D8E2:  CLRF   xD4
0D8E4:  CLRF   xD5
0D8E6:  CLRF   xD6
0D8E8:  CLRF   xD7
0D8EA:  CLRF   xD8
0D8EC:  CLRF   xD9
0D8EE:  CLRF   xDA
0D8F0:  CLRF   xDB
0D8F2:  CLRF   xDC
0D8F4:  CLRF   xDD
0D8F6:  CLRF   xDE
0D8F8:  CLRF   xDF
0D8FA:  CLRF   xE0
0D8FC:  CLRF   xE1
0D8FE:  CLRF   xE2
0D900:  CLRF   xE3
0D902:  CLRF   xE4
0D904:  CLRF   xE5
0D906:  CLRF   xE6
0D908:  CLRF   xE7
0D90A:  CLRF   xE8
0D90C:  CLRF   xE9
0D90E:  CLRF   xEA
0D910:  CLRF   xEB
0D912:  CLRF   xEC
0D914:  CLRF   xED
0D916:  CLRF   xEE
0D918:  CLRF   xEF
0D91A:  CLRF   xF0
0D91C:  CLRF   xF1
0D91E:  CLRF   xF2
0D920:  CLRF   xF3
0D922:  CLRF   xF4
0D924:  CLRF   xF5
0D926:  CLRF   xF6
0D928:  CLRF   xF7
0D92A:  CLRF   xF8
0D92C:  CLRF   xF9
0D92E:  CLRF   xFA
0D930:  CLRF   xFB
0D932:  CLRF   xFC
0D934:  CLRF   xFD
0D936:  CLRF   xFE
0D938:  CLRF   xFF
0D93A:  MOVLB  9
0D93C:  CLRF   x00
0D93E:  CLRF   x01
0D940:  CLRF   x02
0D942:  CLRF   x03
0D944:  CLRF   x04
0D946:  CLRF   x05
0D948:  CLRF   x06
0D94A:  CLRF   x07
0D94C:  CLRF   x08
0D94E:  CLRF   x09
0D950:  CLRF   x0A
0D952:  CLRF   x0B
0D954:  CLRF   x0C
0D956:  CLRF   x0D
0D958:  CLRF   x0E
0D95A:  CLRF   x0F
0D95C:  CLRF   x10
0D95E:  CLRF   x11
0D960:  CLRF   x12
0D962:  CLRF   x13
0D964:  CLRF   x14
0D966:  CLRF   x15
0D968:  CLRF   x16
0D96A:  CLRF   x17
0D96C:  CLRF   x18
0D96E:  CLRF   x19
0D970:  CLRF   x1A
0D972:  CLRF   x1B
0D974:  CLRF   x1C
0D976:  CLRF   x1D
0D978:  CLRF   x1E
0D97A:  CLRF   x1F
0D97C:  CLRF   x20
0D97E:  CLRF   x21
0D980:  CLRF   x22
0D982:  CLRF   x23
0D984:  CLRF   x24
0D986:  CLRF   x25
0D988:  CLRF   x26
0D98A:  CLRF   x27
0D98C:  CLRF   x28
0D98E:  CLRF   x29
0D990:  CLRF   x2A
0D992:  CLRF   x2B
0D994:  CLRF   x2C
0D996:  CLRF   x2D
0D998:  CLRF   x2E
0D99A:  CLRF   x2F
0D99C:  CLRF   x30
0D99E:  CLRF   x31
0D9A0:  CLRF   x32
0D9A2:  CLRF   x33
0D9A4:  CLRF   x34
0D9A6:  CLRF   x35
0D9A8:  CLRF   x36
0D9AA:  CLRF   x37
0D9AC:  CLRF   x38
0D9AE:  CLRF   x39
0D9B0:  CLRF   x3A
0D9B2:  CLRF   x3B
0D9B4:  CLRF   x3C
0D9B6:  CLRF   x3D
0D9B8:  CLRF   x3E
0D9BA:  CLRF   x3F
0D9BC:  CLRF   x40
0D9BE:  CLRF   x41
0D9C0:  CLRF   x42
0D9C2:  CLRF   x43
0D9C4:  CLRF   x44
0D9C6:  CLRF   x45
0D9C8:  CLRF   x46
0D9CA:  CLRF   x47
0D9CC:  CLRF   x48
0D9CE:  CLRF   x49
0D9D0:  CLRF   x4A
0D9D2:  CLRF   x4B
0D9D4:  CLRF   x4C
0D9D6:  CLRF   x4D
0D9D8:  CLRF   x4E
0D9DA:  CLRF   x4F
0D9DC:  CLRF   x50
0D9DE:  CLRF   x51
0D9E0:  CLRF   x52
0D9E2:  CLRF   x53
0D9E4:  CLRF   x54
0D9E6:  CLRF   x55
0D9E8:  CLRF   x56
0D9EA:  CLRF   x57
0D9EC:  CLRF   x58
0D9EE:  CLRF   x59
0D9F0:  CLRF   x5A
0D9F2:  CLRF   x5B
0D9F4:  CLRF   x5C
0D9F6:  CLRF   x5D
0D9F8:  CLRF   x5E
0D9FA:  CLRF   x5F
0D9FC:  CLRF   x60
0D9FE:  CLRF   x61
0DA00:  CLRF   x62
0DA02:  CLRF   x63
0DA04:  CLRF   x64
0DA06:  CLRF   x65
0DA08:  CLRF   x66
0DA0A:  CLRF   x67
0DA0C:  CLRF   x68
0DA0E:  CLRF   x69
0DA10:  CLRF   x6A
0DA12:  CLRF   x6B
0DA14:  CLRF   x6C
0DA16:  CLRF   x6D
0DA18:  CLRF   x6E
0DA1A:  CLRF   x6F
0DA1C:  CLRF   x70
0DA1E:  CLRF   x71
0DA20:  CLRF   x72
0DA22:  CLRF   x73
0DA24:  CLRF   x74
0DA26:  CLRF   x75
0DA28:  CLRF   x76
0DA2A:  CLRF   x77
0DA2C:  CLRF   x78
0DA2E:  CLRF   x79
0DA30:  CLRF   x7A
0DA32:  CLRF   x7B
0DA34:  CLRF   x7C
0DA36:  CLRF   x7D
0DA38:  CLRF   x7E
0DA3A:  CLRF   x7F
0DA3C:  CLRF   x80
0DA3E:  CLRF   x81
0DA40:  CLRF   x82
0DA42:  CLRF   x83
0DA44:  CLRF   x84
0DA46:  CLRF   x85
0DA48:  CLRF   x86
0DA4A:  CLRF   x87
0DA4C:  CLRF   x88
0DA4E:  CLRF   x89
0DA50:  CLRF   x8A
0DA52:  CLRF   x8B
0DA54:  CLRF   x8C
0DA56:  CLRF   x8D
0DA58:  CLRF   x8E
0DA5A:  CLRF   x8F
0DA5C:  CLRF   x90
0DA5E:  CLRF   x91
0DA60:  CLRF   x92
0DA62:  CLRF   x93
0DA64:  CLRF   x94
0DA66:  CLRF   x95
0DA68:  CLRF   x96
0DA6A:  CLRF   x97
0DA6C:  CLRF   x98
0DA6E:  CLRF   x99
0DA70:  CLRF   x9A
0DA72:  CLRF   x9B
0DA74:  CLRF   x9C
0DA76:  CLRF   x9D
0DA78:  CLRF   x9E
0DA7A:  CLRF   x9F
0DA7C:  CLRF   xA0
0DA7E:  CLRF   xA1
0DA80:  CLRF   xA2
0DA82:  CLRF   xA3
0DA84:  CLRF   xA4
0DA86:  CLRF   xA5
0DA88:  CLRF   xA6
0DA8A:  CLRF   xA7
0DA8C:  CLRF   xA8
0DA8E:  CLRF   xA9
0DA90:  CLRF   xAA
0DA92:  CLRF   xAB
0DA94:  CLRF   xAC
0DA96:  CLRF   xAD
0DA98:  CLRF   xAE
0DA9A:  CLRF   xAF
0DA9C:  CLRF   xB0
0DA9E:  CLRF   xB1
0DAA0:  CLRF   xB2
0DAA2:  CLRF   xB3
0DAA4:  CLRF   xB4
0DAA6:  CLRF   xB5
0DAA8:  CLRF   xB6
0DAAA:  CLRF   xB7
0DAAC:  CLRF   xB8
0DAAE:  CLRF   xB9
0DAB0:  CLRF   xBA
0DAB2:  CLRF   xBB
0DAB4:  CLRF   xBC
0DAB6:  CLRF   xBD
0DAB8:  CLRF   xBE
0DABA:  CLRF   xBF
0DABC:  CLRF   xC0
0DABE:  CLRF   xC1
0DAC0:  CLRF   xC2
0DAC2:  CLRF   xC3
0DAC4:  CLRF   xC4
0DAC6:  CLRF   xC5
0DAC8:  CLRF   xC6
0DACA:  CLRF   xC7
0DACC:  CLRF   xC8
0DACE:  CLRF   xC9
0DAD0:  CLRF   xCA
0DAD2:  CLRF   xCB
0DAD4:  CLRF   xCC
0DAD6:  CLRF   xCD
0DAD8:  CLRF   xCE
0DADA:  CLRF   xCF
0DADC:  CLRF   xD0
0DADE:  CLRF   xD1
0DAE0:  CLRF   xD2
0DAE2:  CLRF   xD3
0DAE4:  CLRF   xD4
0DAE6:  CLRF   xD5
0DAE8:  CLRF   xD6
0DAEA:  CLRF   xD7
0DAEC:  CLRF   xD8
0DAEE:  CLRF   xD9
0DAF0:  CLRF   xDA
0DAF2:  CLRF   xDB
0DAF4:  CLRF   xDC
0DAF6:  CLRF   xDD
0DAF8:  CLRF   xDE
0DAFA:  CLRF   xDF
0DAFC:  CLRF   xE0
0DAFE:  CLRF   xE1
0DB00:  CLRF   xE2
0DB02:  CLRF   xE3
0DB04:  CLRF   xE4
0DB06:  CLRF   xE5
0DB08:  CLRF   xE6
0DB0A:  CLRF   xE7
0DB0C:  CLRF   xE8
0DB0E:  CLRF   xE9
0DB10:  CLRF   xEA
0DB12:  CLRF   xEB
0DB14:  CLRF   xEC
0DB16:  CLRF   xED
0DB18:  CLRF   xEE
0DB1A:  CLRF   xEF
0DB1C:  CLRF   xF0
0DB1E:  CLRF   xF1
0DB20:  CLRF   xF2
0DB22:  CLRF   xF3
0DB24:  CLRF   xF4
0DB26:  CLRF   xF5
0DB28:  CLRF   xF6
0DB2A:  CLRF   xF7
0DB2C:  CLRF   xF8
0DB2E:  CLRF   xF9
0DB30:  CLRF   xFA
0DB32:  CLRF   xFB
0DB34:  CLRF   xFC
0DB36:  CLRF   xFD
0DB38:  CLRF   xFE
0DB3A:  CLRF   xFF
0DB3C:  MOVLB  A
0DB3E:  CLRF   x00
0DB40:  CLRF   x01
0DB42:  CLRF   x02
0DB44:  CLRF   x03
0DB46:  CLRF   x04
0DB48:  CLRF   x05
0DB4A:  CLRF   x06
0DB4C:  CLRF   x07
0DB4E:  CLRF   x08
0DB50:  CLRF   x09
0DB52:  CLRF   x0A
0DB54:  CLRF   x0B
0DB56:  CLRF   x0C
0DB58:  CLRF   x0D
0DB5A:  CLRF   x0E
0DB5C:  CLRF   x0F
0DB5E:  CLRF   x10
0DB60:  CLRF   x11
0DB62:  CLRF   x12
0DB64:  CLRF   x13
0DB66:  CLRF   x14
0DB68:  CLRF   x15
0DB6A:  CLRF   x16
0DB6C:  CLRF   x17
0DB6E:  CLRF   x18
0DB70:  CLRF   x19
0DB72:  CLRF   x1A
0DB74:  CLRF   x1B
0DB76:  CLRF   x1C
0DB78:  CLRF   x1D
0DB7A:  CLRF   x1E
0DB7C:  CLRF   x1F
0DB7E:  CLRF   x20
0DB80:  CLRF   x21
0DB82:  CLRF   x22
0DB84:  CLRF   x23
0DB86:  CLRF   x24
0DB88:  CLRF   x25
0DB8A:  CLRF   x26
0DB8C:  CLRF   x27
0DB8E:  CLRF   x28
0DB90:  CLRF   x29
0DB92:  CLRF   x2A
0DB94:  CLRF   x2B
0DB96:  CLRF   x2C
0DB98:  CLRF   x2D
0DB9A:  CLRF   x2E
0DB9C:  CLRF   x2F
0DB9E:  CLRF   x30
....................     port2.port_num = 2; 
0DBA0:  MOVLW  02
0DBA2:  MOVLB  6
0DBA4:  MOVWF  x31
....................     port2.sweep_step = 0;
0DBA6:  CLRF   x33
0DBA8:  CLRF   x32
....................     port2.active = 1;
0DBAA:  MOVLB  A
0DBAC:  BSF    x30.0
.................... 
....................     int16 count = 1;
....................     iv_env_t measured_data = create_meas_data();
0DBAE:  CLRF   x32
0DBB0:  MOVLW  01
0DBB2:  MOVWF  x31
0DBB4:  MOVLB  0
0DBB6:  CALL   7F92
0DBBA:  MOVFF  02,03
0DBBE:  MOVF   01,W
0DBC0:  MOVWF  FE1
0DBC2:  MOVFF  03,FE2
0DBC6:  MOVLW  0A
0DBC8:  MOVWF  FEA
0DBCA:  MOVLW  33
0DBCC:  MOVWF  FE9
0DBCE:  MOVLW  0C
0DBD0:  MOVWF  01
0DBD2:  MOVFF  FE6,FEE
0DBD6:  DECFSZ 01,F
0DBD8:  GOTO   DBD2
.................... 
....................     while (port1.active || port2.active)
0DBDC:  MOVLB  6
0DBDE:  BTFSS  x30.0
0DBE0:  BRA    DBE8
0DBE2:  MOVLB  0
0DBE4:  GOTO   DBF8
0DBE8:  MOVLB  0
0DBEA:  MOVLB  A
0DBEC:  BTFSC  x30.0
0DBEE:  BRA    DBF6
0DBF0:  MOVLB  0
0DBF2:  GOTO   DEDC
0DBF6:  MOVLB  0
....................     {
....................         // 出力設定
....................         if (port1.active) {
0DBF8:  MOVLB  6
0DBFA:  BTFSC  x30.0
0DBFC:  BRA    DC04
0DBFE:  MOVLB  0
0DC00:  GOTO   DC16
0DC04:  MOVLB  0
....................             mcp4901_1_write(count);
0DC06:  MOVFF  A32,A64
0DC0A:  MOVFF  A31,A63
0DC0E:  CALL   24D0
....................         } else {
0DC12:  GOTO   DC22
....................             mcp4901_1_write(0);  // 閾値到達後は0出力
0DC16:  MOVLB  A
0DC18:  CLRF   x64
0DC1A:  CLRF   x63
0DC1C:  MOVLB  0
0DC1E:  CALL   24D0
....................         }
.................... 
....................         if (port2.active) {
0DC22:  MOVLB  A
0DC24:  BTFSC  x30.0
0DC26:  BRA    DC2E
0DC28:  MOVLB  0
0DC2A:  GOTO   DC40
0DC2E:  MOVLB  0
....................             mcp4901_2_write(count);
0DC30:  MOVFF  A32,A64
0DC34:  MOVFF  A31,A63
0DC38:  CALL   2512
....................         } else {
0DC3C:  GOTO   DC4C
....................             mcp4901_2_write(0);
0DC40:  MOVLB  A
0DC42:  CLRF   x64
0DC44:  CLRF   x63
0DC46:  MOVLB  0
0DC48:  CALL   2512
....................         }
.................... 
....................         delay_us(100);
0DC4C:  MOVLW  85
0DC4E:  MOVWF  00
0DC50:  DECFSZ 00,F
0DC52:  BRA    DC50
.................... 
....................         // データ取得
....................         if (port1.active) {
0DC54:  MOVLB  6
0DC56:  BTFSC  x30.0
0DC58:  BRA    DC60
0DC5A:  MOVLB  0
0DC5C:  GOTO   DD80
0DC60:  MOVLB  0
....................             port1.data_buffer[count].voltage = ad7490_read(ADC_CIGS1_AMP);
0DC62:  MOVLB  A
0DC64:  RLCF   x31,W
0DC66:  MOVWF  02
0DC68:  RLCF   x32,W
0DC6A:  MOVWF  03
0DC6C:  RLCF   02,F
0DC6E:  RLCF   03,F
0DC70:  MOVLW  FC
0DC72:  ANDWF  02,F
0DC74:  MOVF   02,W
0DC76:  ADDLW  34
0DC78:  MOVWF  01
0DC7A:  MOVLW  02
0DC7C:  ADDWFC 03,F
0DC7E:  MOVF   01,W
0DC80:  MOVWF  x42
0DC82:  MOVFF  03,A43
0DC86:  MOVLW  02
0DC88:  MOVWF  x75
0DC8A:  MOVLB  0
0DC8C:  CALL   20FC
0DC90:  MOVFF  A43,FEA
0DC94:  MOVFF  A42,FE9
0DC98:  MOVFF  02,FEC
0DC9C:  MOVF   FED,F
0DC9E:  MOVFF  01,FEF
....................             port1.data_buffer[count].current = ad7490_read(ADC_CIGS1_CURR);
0DCA2:  MOVLB  A
0DCA4:  RLCF   x31,W
0DCA6:  MOVWF  02
0DCA8:  RLCF   x32,W
0DCAA:  MOVWF  03
0DCAC:  RLCF   02,F
0DCAE:  RLCF   03,F
0DCB0:  MOVLW  FC
0DCB2:  ANDWF  02,F
0DCB4:  MOVF   02,W
0DCB6:  ADDLW  03
0DCB8:  MOVWF  x40
0DCBA:  MOVLW  00
0DCBC:  ADDWFC 03,W
0DCBE:  MOVWF  x41
0DCC0:  MOVLW  02
0DCC2:  ADDWF  x40,W
0DCC4:  MOVWF  01
0DCC6:  MOVLW  00
0DCC8:  ADDWFC x41,W
0DCCA:  MOVWF  03
0DCCC:  MOVF   01,W
0DCCE:  ADDLW  31
0DCD0:  MOVWF  01
0DCD2:  MOVLW  02
0DCD4:  ADDWFC 03,F
0DCD6:  MOVF   01,W
0DCD8:  MOVWF  x40
0DCDA:  MOVFF  03,A41
0DCDE:  MOVLW  01
0DCE0:  MOVWF  x75
0DCE2:  MOVLB  0
0DCE4:  CALL   20FC
0DCE8:  MOVFF  A41,FEA
0DCEC:  MOVFF  A40,FE9
0DCF0:  MOVFF  02,FEC
0DCF4:  MOVF   FED,F
0DCF6:  MOVFF  01,FEF
....................             port1.sweep_step = count + 1;
0DCFA:  MOVLW  01
0DCFC:  MOVLB  A
0DCFE:  ADDWF  x31,W
0DD00:  MOVLB  2
0DD02:  MOVWF  x32
0DD04:  MOVLW  00
0DD06:  MOVLB  A
0DD08:  ADDWFC x32,W
0DD0A:  MOVLB  2
0DD0C:  MOVWF  x33
....................             if (port1.data_buffer[count].current < curr_limit) {
0DD0E:  MOVLB  A
0DD10:  RLCF   x31,W
0DD12:  MOVWF  02
0DD14:  RLCF   x32,W
0DD16:  MOVWF  03
0DD18:  RLCF   02,F
0DD1A:  RLCF   03,F
0DD1C:  MOVLW  FC
0DD1E:  ANDWF  02,F
0DD20:  MOVF   02,W
0DD22:  ADDLW  03
0DD24:  MOVWF  x40
0DD26:  MOVLW  00
0DD28:  ADDWFC 03,W
0DD2A:  MOVWF  x41
0DD2C:  MOVLW  02
0DD2E:  ADDWF  x40,W
0DD30:  MOVWF  01
0DD32:  MOVLW  00
0DD34:  ADDWFC x41,W
0DD36:  MOVWF  03
0DD38:  MOVF   01,W
0DD3A:  ADDLW  31
0DD3C:  MOVWF  FE9
0DD3E:  MOVLW  02
0DD40:  ADDWFC 03,W
0DD42:  MOVWF  FEA
0DD44:  MOVFF  FEC,A41
0DD48:  MOVF   FED,F
0DD4A:  MOVFF  FEF,A40
0DD4E:  MOVF   x41,W
0DD50:  MOVLB  2
0DD52:  SUBWF  x30,W
0DD54:  BTFSC  FD8.0
0DD56:  BRA    DD5E
0DD58:  MOVLB  0
0DD5A:  GOTO   DD80
0DD5E:  MOVLB  0
0DD60:  BTFSS  FD8.2
0DD62:  GOTO   DD7A
0DD66:  MOVLB  2
0DD68:  MOVF   x2F,W
0DD6A:  MOVLB  A
0DD6C:  SUBWF  x40,W
0DD6E:  BTFSS  FD8.0
0DD70:  BRA    DD78
0DD72:  MOVLB  0
0DD74:  GOTO   DD80
0DD78:  MOVLB  0
....................                 port1.active = 0;  // 閾値到達で測定終了
0DD7A:  MOVLB  6
0DD7C:  BCF    x30.0
0DD7E:  MOVLB  0
....................             }
....................         }
.................... 
....................         if (port2.active) {
0DD80:  MOVLB  A
0DD82:  BTFSC  x30.0
0DD84:  BRA    DD8C
0DD86:  MOVLB  0
0DD88:  GOTO   DEAC
0DD8C:  MOVLB  0
....................             port2.data_buffer[count].voltage = ad7490_read(ADC_CIGS2_AMP);
0DD8E:  MOVLB  A
0DD90:  RLCF   x31,W
0DD92:  MOVWF  02
0DD94:  RLCF   x32,W
0DD96:  MOVWF  03
0DD98:  RLCF   02,F
0DD9A:  RLCF   03,F
0DD9C:  MOVLW  FC
0DD9E:  ANDWF  02,F
0DDA0:  MOVF   02,W
0DDA2:  ADDLW  34
0DDA4:  MOVWF  01
0DDA6:  MOVLW  06
0DDA8:  ADDWFC 03,F
0DDAA:  MOVF   01,W
0DDAC:  MOVWF  x42
0DDAE:  MOVFF  03,A43
0DDB2:  MOVLW  06
0DDB4:  MOVWF  x75
0DDB6:  MOVLB  0
0DDB8:  CALL   20FC
0DDBC:  MOVFF  A43,FEA
0DDC0:  MOVFF  A42,FE9
0DDC4:  MOVFF  02,FEC
0DDC8:  MOVF   FED,F
0DDCA:  MOVFF  01,FEF
....................             port2.data_buffer[count].current = ad7490_read(ADC_CIGS2_CURR);
0DDCE:  MOVLB  A
0DDD0:  RLCF   x31,W
0DDD2:  MOVWF  02
0DDD4:  RLCF   x32,W
0DDD6:  MOVWF  03
0DDD8:  RLCF   02,F
0DDDA:  RLCF   03,F
0DDDC:  MOVLW  FC
0DDDE:  ANDWF  02,F
0DDE0:  MOVF   02,W
0DDE2:  ADDLW  03
0DDE4:  MOVWF  x40
0DDE6:  MOVLW  00
0DDE8:  ADDWFC 03,W
0DDEA:  MOVWF  x41
0DDEC:  MOVLW  02
0DDEE:  ADDWF  x40,W
0DDF0:  MOVWF  01
0DDF2:  MOVLW  00
0DDF4:  ADDWFC x41,W
0DDF6:  MOVWF  03
0DDF8:  MOVF   01,W
0DDFA:  ADDLW  31
0DDFC:  MOVWF  01
0DDFE:  MOVLW  06
0DE00:  ADDWFC 03,F
0DE02:  MOVF   01,W
0DE04:  MOVWF  x40
0DE06:  MOVFF  03,A41
0DE0A:  MOVLW  05
0DE0C:  MOVWF  x75
0DE0E:  MOVLB  0
0DE10:  CALL   20FC
0DE14:  MOVFF  A41,FEA
0DE18:  MOVFF  A40,FE9
0DE1C:  MOVFF  02,FEC
0DE20:  MOVF   FED,F
0DE22:  MOVFF  01,FEF
....................             port2.sweep_step = count + 1;
0DE26:  MOVLW  01
0DE28:  MOVLB  A
0DE2A:  ADDWF  x31,W
0DE2C:  MOVLB  6
0DE2E:  MOVWF  x32
0DE30:  MOVLW  00
0DE32:  MOVLB  A
0DE34:  ADDWFC x32,W
0DE36:  MOVLB  6
0DE38:  MOVWF  x33
....................             if (port2.data_buffer[count].current < curr_limit) {
0DE3A:  MOVLB  A
0DE3C:  RLCF   x31,W
0DE3E:  MOVWF  02
0DE40:  RLCF   x32,W
0DE42:  MOVWF  03
0DE44:  RLCF   02,F
0DE46:  RLCF   03,F
0DE48:  MOVLW  FC
0DE4A:  ANDWF  02,F
0DE4C:  MOVF   02,W
0DE4E:  ADDLW  03
0DE50:  MOVWF  x40
0DE52:  MOVLW  00
0DE54:  ADDWFC 03,W
0DE56:  MOVWF  x41
0DE58:  MOVLW  02
0DE5A:  ADDWF  x40,W
0DE5C:  MOVWF  01
0DE5E:  MOVLW  00
0DE60:  ADDWFC x41,W
0DE62:  MOVWF  03
0DE64:  MOVF   01,W
0DE66:  ADDLW  31
0DE68:  MOVWF  FE9
0DE6A:  MOVLW  06
0DE6C:  ADDWFC 03,W
0DE6E:  MOVWF  FEA
0DE70:  MOVFF  FEC,A41
0DE74:  MOVF   FED,F
0DE76:  MOVFF  FEF,A40
0DE7A:  MOVF   x41,W
0DE7C:  MOVLB  2
0DE7E:  SUBWF  x30,W
0DE80:  BTFSC  FD8.0
0DE82:  BRA    DE8A
0DE84:  MOVLB  0
0DE86:  GOTO   DEAC
0DE8A:  MOVLB  0
0DE8C:  BTFSS  FD8.2
0DE8E:  GOTO   DEA6
0DE92:  MOVLB  2
0DE94:  MOVF   x2F,W
0DE96:  MOVLB  A
0DE98:  SUBWF  x40,W
0DE9A:  BTFSS  FD8.0
0DE9C:  BRA    DEA4
0DE9E:  MOVLB  0
0DEA0:  GOTO   DEAC
0DEA4:  MOVLB  0
....................                 port2.active = 0;
0DEA6:  MOVLB  A
0DEA8:  BCF    x30.0
0DEAA:  MOVLB  0
....................             }
....................         }
.................... 
....................         count++;
0DEAC:  MOVLB  A
0DEAE:  INCF   x31,F
0DEB0:  BTFSC  FD8.2
0DEB2:  INCF   x32,F
....................         if (count >= 255) {
0DEB4:  MOVF   x32,F
0DEB6:  BTFSC  FD8.2
0DEB8:  BRA    DEC0
0DEBA:  MOVLB  0
0DEBC:  GOTO   DED4
0DEC0:  MOVLB  0
0DEC2:  MOVLB  A
0DEC4:  MOVF   x31,W
0DEC6:  SUBLW  FE
0DEC8:  BTFSS  FD8.0
0DECA:  BRA    DED2
0DECC:  MOVLB  0
0DECE:  GOTO   DED8
0DED2:  MOVLB  0
....................             break;
0DED4:  GOTO   DEDC
....................         }
0DED8:  GOTO   DBDC
....................     }
.................... 
....................     // Print I-V data
....................     fprintf(PC, "Volt1,Curr1,Volt2,Curr2\r\n");
0DEDC:  MOVLW  E4
0DEDE:  MOVWF  FF6
0DEE0:  MOVLW  05
0DEE2:  MOVWF  FF7
0DEE4:  MOVLW  00
0DEE6:  MOVWF  FF8
0DEE8:  CALL   1F3E
....................     for (int i = 0; i < count; i++) {
0DEEC:  MOVLB  A
0DEEE:  CLRF   x3F
0DEF0:  MOVLB  0
0DEF2:  MOVLB  A
0DEF4:  MOVF   x32,F
0DEF6:  BTFSC  FD8.2
0DEF8:  BRA    DF00
0DEFA:  MOVLB  0
0DEFC:  GOTO   DF14
0DF00:  MOVLB  0
0DF02:  MOVLB  A
0DF04:  MOVF   x31,W
0DF06:  SUBWF  x3F,W
0DF08:  BTFSS  FD8.0
0DF0A:  BRA    DF12
0DF0C:  MOVLB  0
0DF0E:  GOTO   E0C8
0DF12:  MOVLB  0
.................... 
....................         fprintf(PC, "%04LX,%04LX,%04LX,%04LX\r\n",
....................             port1.data_buffer[i].voltage, port1.data_buffer[i].current,
....................             port2.data_buffer[i].voltage, port2.data_buffer[i].current);
0DF14:  MOVLB  A
0DF16:  CLRF   x4B
0DF18:  MOVFF  A3F,A4A
0DF1C:  CLRF   x4D
0DF1E:  MOVLW  04
0DF20:  MOVWF  x4C
0DF22:  MOVLB  0
0DF24:  CALL   CB1E
0DF28:  MOVFF  02,03
0DF2C:  MOVF   01,W
0DF2E:  ADDLW  34
0DF30:  MOVWF  FE9
0DF32:  MOVLW  02
0DF34:  ADDWFC 03,W
0DF36:  MOVWF  FEA
0DF38:  MOVFF  FEC,A43
0DF3C:  MOVF   FED,F
0DF3E:  MOVFF  FEF,A42
0DF42:  MOVLB  A
0DF44:  CLRF   x4B
0DF46:  MOVFF  A3F,A4A
0DF4A:  CLRF   x4D
0DF4C:  MOVLW  04
0DF4E:  MOVWF  x4C
0DF50:  MOVLB  0
0DF52:  CALL   CB1E
0DF56:  MOVFF  02,03
0DF5A:  MOVF   01,W
0DF5C:  ADDLW  03
0DF5E:  MOVLB  A
0DF60:  MOVWF  x44
0DF62:  MOVLW  00
0DF64:  ADDWFC 03,W
0DF66:  MOVWF  x45
0DF68:  MOVLW  02
0DF6A:  ADDWF  x44,W
0DF6C:  MOVWF  01
0DF6E:  MOVLW  00
0DF70:  ADDWFC x45,W
0DF72:  MOVWF  03
0DF74:  MOVF   01,W
0DF76:  ADDLW  31
0DF78:  MOVWF  FE9
0DF7A:  MOVLW  02
0DF7C:  ADDWFC 03,W
0DF7E:  MOVWF  FEA
0DF80:  MOVFF  FEC,A45
0DF84:  MOVF   FED,F
0DF86:  MOVFF  FEF,A44
0DF8A:  CLRF   x4B
0DF8C:  MOVFF  A3F,A4A
0DF90:  CLRF   x4D
0DF92:  MOVLW  04
0DF94:  MOVWF  x4C
0DF96:  MOVLB  0
0DF98:  CALL   CB1E
0DF9C:  MOVFF  02,03
0DFA0:  MOVF   01,W
0DFA2:  ADDLW  34
0DFA4:  MOVWF  FE9
0DFA6:  MOVLW  06
0DFA8:  ADDWFC 03,W
0DFAA:  MOVWF  FEA
0DFAC:  MOVFF  FEC,A49
0DFB0:  MOVF   FED,F
0DFB2:  MOVFF  FEF,A48
0DFB6:  MOVLB  A
0DFB8:  CLRF   x4B
0DFBA:  MOVFF  A3F,A4A
0DFBE:  CLRF   x4D
0DFC0:  MOVLW  04
0DFC2:  MOVWF  x4C
0DFC4:  MOVLB  0
0DFC6:  CALL   CB1E
0DFCA:  MOVFF  02,03
0DFCE:  MOVF   01,W
0DFD0:  ADDLW  03
0DFD2:  MOVLB  A
0DFD4:  MOVWF  x4A
0DFD6:  MOVLW  00
0DFD8:  ADDWFC 03,W
0DFDA:  MOVWF  x4B
0DFDC:  MOVLW  02
0DFDE:  ADDWF  x4A,W
0DFE0:  MOVWF  01
0DFE2:  MOVLW  00
0DFE4:  ADDWFC x4B,W
0DFE6:  MOVWF  03
0DFE8:  MOVF   01,W
0DFEA:  ADDLW  31
0DFEC:  MOVWF  FE9
0DFEE:  MOVLW  06
0DFF0:  ADDWFC 03,W
0DFF2:  MOVWF  FEA
0DFF4:  MOVFF  FEC,A4B
0DFF8:  MOVF   FED,F
0DFFA:  MOVFF  FEF,A4A
0DFFE:  MOVFF  A43,B4B
0E002:  MOVLW  37
0E004:  MOVLB  B
0E006:  MOVWF  x4C
0E008:  MOVLB  0
0E00A:  CALL   2188
0E00E:  MOVFF  A42,B4B
0E012:  MOVLW  37
0E014:  MOVLB  B
0E016:  MOVWF  x4C
0E018:  MOVLB  0
0E01A:  CALL   2188
0E01E:  MOVLW  2C
0E020:  BTFSS  FA6.6
0E022:  GOTO   E020
0E026:  MOVLB  E
0E028:  MOVWF  xF9
0E02A:  MOVFF  A45,B4B
0E02E:  MOVLW  37
0E030:  MOVLB  B
0E032:  MOVWF  x4C
0E034:  MOVLB  0
0E036:  CALL   2188
0E03A:  MOVFF  A44,B4B
0E03E:  MOVLW  37
0E040:  MOVLB  B
0E042:  MOVWF  x4C
0E044:  MOVLB  0
0E046:  CALL   2188
0E04A:  MOVLW  2C
0E04C:  BTFSS  FA6.6
0E04E:  GOTO   E04C
0E052:  MOVLB  E
0E054:  MOVWF  xF9
0E056:  MOVFF  A49,B4B
0E05A:  MOVLW  37
0E05C:  MOVLB  B
0E05E:  MOVWF  x4C
0E060:  MOVLB  0
0E062:  CALL   2188
0E066:  MOVFF  A48,B4B
0E06A:  MOVLW  37
0E06C:  MOVLB  B
0E06E:  MOVWF  x4C
0E070:  MOVLB  0
0E072:  CALL   2188
0E076:  MOVLW  2C
0E078:  BTFSS  FA6.6
0E07A:  GOTO   E078
0E07E:  MOVLB  E
0E080:  MOVWF  xF9
0E082:  MOVFF  A4B,B4B
0E086:  MOVLW  37
0E088:  MOVLB  B
0E08A:  MOVWF  x4C
0E08C:  MOVLB  0
0E08E:  CALL   2188
0E092:  MOVFF  A4A,B4B
0E096:  MOVLW  37
0E098:  MOVLB  B
0E09A:  MOVWF  x4C
0E09C:  MOVLB  0
0E09E:  CALL   2188
0E0A2:  MOVLW  0D
0E0A4:  BTFSS  FA6.6
0E0A6:  GOTO   E0A4
0E0AA:  MOVLB  E
0E0AC:  MOVWF  xF9
0E0AE:  MOVLW  0A
0E0B0:  MOVLB  0
0E0B2:  BTFSS  FA6.6
0E0B4:  GOTO   E0B2
0E0B8:  MOVLB  E
0E0BA:  MOVWF  xF9
0E0BC:  MOVLB  0
0E0BE:  MOVLB  A
0E0C0:  INCF   x3F,F
0E0C2:  MOVLB  0
0E0C4:  GOTO   DEF2
....................     }
0E0C8:  GOTO   E35E (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit)
.................... {
....................     fprintf(PC, ".");
*
0AE34:  MOVLW  2E
0AE36:  BTFSS  FA6.6
0AE38:  GOTO   AE36
0AE3C:  MOVLB  E
0AE3E:  MOVWF  xF9
....................     
....................     // Enable both CIGS ports
....................     connect_port1();
0AE40:  MOVLB  0
0AE42:  CALL   4ED0
....................     connect_port2();
0AE46:  CALL   4ED8
....................     mcp4901_1_write(0); 
0AE4A:  MOVLB  A
0AE4C:  CLRF   x64
0AE4E:  CLRF   x63
0AE50:  MOVLB  0
0AE52:  CALL   24D0
....................     mcp4901_2_write(0);
0AE56:  MOVLB  A
0AE58:  CLRF   x64
0AE5A:  CLRF   x63
0AE5C:  MOVLB  0
0AE5E:  CALL   2512
....................     delay_ms(100);
0AE62:  MOVLW  64
0AE64:  MOVLB  B
0AE66:  MOVWF  xA6
0AE68:  MOVLB  0
0AE6A:  CALL   1F10
....................     
....................     // Init Port1
....................     sweep_config_t port1 = {0};
0AE6E:  MOVLB  2
0AE70:  CLRF   x47
0AE72:  CLRF   x48
0AE74:  CLRF   x49
0AE76:  CLRF   x4A
0AE78:  CLRF   x4B
0AE7A:  CLRF   x4C
0AE7C:  CLRF   x4D
0AE7E:  CLRF   x4E
0AE80:  CLRF   x4F
0AE82:  CLRF   x50
0AE84:  CLRF   x51
0AE86:  CLRF   x52
0AE88:  CLRF   x53
0AE8A:  CLRF   x54
0AE8C:  CLRF   x55
0AE8E:  CLRF   x56
0AE90:  CLRF   x57
0AE92:  CLRF   x58
0AE94:  CLRF   x59
0AE96:  CLRF   x5A
0AE98:  CLRF   x5B
0AE9A:  CLRF   x5C
0AE9C:  CLRF   x5D
0AE9E:  CLRF   x5E
0AEA0:  CLRF   x5F
0AEA2:  CLRF   x60
0AEA4:  CLRF   x61
0AEA6:  CLRF   x62
0AEA8:  CLRF   x63
0AEAA:  CLRF   x64
0AEAC:  CLRF   x65
0AEAE:  CLRF   x66
0AEB0:  CLRF   x67
0AEB2:  CLRF   x68
0AEB4:  CLRF   x69
0AEB6:  CLRF   x6A
0AEB8:  CLRF   x6B
0AEBA:  CLRF   x6C
0AEBC:  CLRF   x6D
0AEBE:  CLRF   x6E
0AEC0:  CLRF   x6F
0AEC2:  CLRF   x70
0AEC4:  CLRF   x71
0AEC6:  CLRF   x72
0AEC8:  CLRF   x73
0AECA:  CLRF   x74
0AECC:  CLRF   x75
0AECE:  CLRF   x76
0AED0:  CLRF   x77
0AED2:  CLRF   x78
0AED4:  CLRF   x79
0AED6:  CLRF   x7A
0AED8:  CLRF   x7B
0AEDA:  CLRF   x7C
0AEDC:  CLRF   x7D
0AEDE:  CLRF   x7E
0AEE0:  CLRF   x7F
0AEE2:  CLRF   x80
0AEE4:  CLRF   x81
0AEE6:  CLRF   x82
0AEE8:  CLRF   x83
0AEEA:  CLRF   x84
0AEEC:  CLRF   x85
0AEEE:  CLRF   x86
0AEF0:  CLRF   x87
0AEF2:  CLRF   x88
0AEF4:  CLRF   x89
0AEF6:  CLRF   x8A
0AEF8:  CLRF   x8B
0AEFA:  CLRF   x8C
0AEFC:  CLRF   x8D
0AEFE:  CLRF   x8E
0AF00:  CLRF   x8F
0AF02:  CLRF   x90
0AF04:  CLRF   x91
0AF06:  CLRF   x92
0AF08:  CLRF   x93
0AF0A:  CLRF   x94
0AF0C:  CLRF   x95
0AF0E:  CLRF   x96
0AF10:  CLRF   x97
0AF12:  CLRF   x98
0AF14:  CLRF   x99
0AF16:  CLRF   x9A
0AF18:  CLRF   x9B
0AF1A:  CLRF   x9C
0AF1C:  CLRF   x9D
0AF1E:  CLRF   x9E
0AF20:  CLRF   x9F
0AF22:  CLRF   xA0
0AF24:  CLRF   xA1
0AF26:  CLRF   xA2
0AF28:  CLRF   xA3
0AF2A:  CLRF   xA4
0AF2C:  CLRF   xA5
0AF2E:  CLRF   xA6
0AF30:  CLRF   xA7
0AF32:  CLRF   xA8
0AF34:  CLRF   xA9
0AF36:  CLRF   xAA
0AF38:  CLRF   xAB
0AF3A:  CLRF   xAC
0AF3C:  CLRF   xAD
0AF3E:  CLRF   xAE
0AF40:  CLRF   xAF
0AF42:  CLRF   xB0
0AF44:  CLRF   xB1
0AF46:  CLRF   xB2
0AF48:  CLRF   xB3
0AF4A:  CLRF   xB4
0AF4C:  CLRF   xB5
0AF4E:  CLRF   xB6
0AF50:  CLRF   xB7
0AF52:  CLRF   xB8
0AF54:  CLRF   xB9
0AF56:  CLRF   xBA
0AF58:  CLRF   xBB
0AF5A:  CLRF   xBC
0AF5C:  CLRF   xBD
0AF5E:  CLRF   xBE
0AF60:  CLRF   xBF
0AF62:  CLRF   xC0
0AF64:  CLRF   xC1
0AF66:  CLRF   xC2
0AF68:  CLRF   xC3
0AF6A:  CLRF   xC4
0AF6C:  CLRF   xC5
0AF6E:  CLRF   xC6
0AF70:  CLRF   xC7
0AF72:  CLRF   xC8
0AF74:  CLRF   xC9
0AF76:  CLRF   xCA
0AF78:  CLRF   xCB
0AF7A:  CLRF   xCC
0AF7C:  CLRF   xCD
0AF7E:  CLRF   xCE
0AF80:  CLRF   xCF
0AF82:  CLRF   xD0
0AF84:  CLRF   xD1
0AF86:  CLRF   xD2
0AF88:  CLRF   xD3
0AF8A:  CLRF   xD4
0AF8C:  CLRF   xD5
0AF8E:  CLRF   xD6
0AF90:  CLRF   xD7
0AF92:  CLRF   xD8
0AF94:  CLRF   xD9
0AF96:  CLRF   xDA
0AF98:  CLRF   xDB
0AF9A:  CLRF   xDC
0AF9C:  CLRF   xDD
0AF9E:  CLRF   xDE
0AFA0:  CLRF   xDF
0AFA2:  CLRF   xE0
0AFA4:  CLRF   xE1
0AFA6:  CLRF   xE2
0AFA8:  CLRF   xE3
0AFAA:  CLRF   xE4
0AFAC:  CLRF   xE5
0AFAE:  CLRF   xE6
0AFB0:  CLRF   xE7
0AFB2:  CLRF   xE8
0AFB4:  CLRF   xE9
0AFB6:  CLRF   xEA
0AFB8:  CLRF   xEB
0AFBA:  CLRF   xEC
0AFBC:  CLRF   xED
0AFBE:  CLRF   xEE
0AFC0:  CLRF   xEF
0AFC2:  CLRF   xF0
0AFC4:  CLRF   xF1
0AFC6:  CLRF   xF2
0AFC8:  CLRF   xF3
0AFCA:  CLRF   xF4
0AFCC:  CLRF   xF5
0AFCE:  CLRF   xF6
0AFD0:  CLRF   xF7
0AFD2:  CLRF   xF8
0AFD4:  CLRF   xF9
0AFD6:  CLRF   xFA
0AFD8:  CLRF   xFB
0AFDA:  CLRF   xFC
0AFDC:  CLRF   xFD
0AFDE:  CLRF   xFE
0AFE0:  CLRF   xFF
0AFE2:  MOVLB  3
0AFE4:  CLRF   x00
0AFE6:  CLRF   x01
0AFE8:  CLRF   x02
0AFEA:  CLRF   x03
0AFEC:  CLRF   x04
0AFEE:  CLRF   x05
0AFF0:  CLRF   x06
0AFF2:  CLRF   x07
0AFF4:  CLRF   x08
0AFF6:  CLRF   x09
0AFF8:  CLRF   x0A
0AFFA:  CLRF   x0B
0AFFC:  CLRF   x0C
0AFFE:  CLRF   x0D
0B000:  CLRF   x0E
0B002:  CLRF   x0F
0B004:  CLRF   x10
0B006:  CLRF   x11
0B008:  CLRF   x12
0B00A:  CLRF   x13
0B00C:  CLRF   x14
0B00E:  CLRF   x15
0B010:  CLRF   x16
0B012:  CLRF   x17
0B014:  CLRF   x18
0B016:  CLRF   x19
0B018:  CLRF   x1A
0B01A:  CLRF   x1B
0B01C:  CLRF   x1C
0B01E:  CLRF   x1D
0B020:  CLRF   x1E
0B022:  CLRF   x1F
0B024:  CLRF   x20
0B026:  CLRF   x21
0B028:  CLRF   x22
0B02A:  CLRF   x23
0B02C:  CLRF   x24
0B02E:  CLRF   x25
0B030:  CLRF   x26
0B032:  CLRF   x27
0B034:  CLRF   x28
0B036:  CLRF   x29
0B038:  CLRF   x2A
0B03A:  CLRF   x2B
0B03C:  CLRF   x2C
0B03E:  CLRF   x2D
0B040:  CLRF   x2E
0B042:  CLRF   x2F
0B044:  CLRF   x30
0B046:  CLRF   x31
0B048:  CLRF   x32
0B04A:  CLRF   x33
0B04C:  CLRF   x34
0B04E:  CLRF   x35
0B050:  CLRF   x36
0B052:  CLRF   x37
0B054:  CLRF   x38
0B056:  CLRF   x39
0B058:  CLRF   x3A
0B05A:  CLRF   x3B
0B05C:  CLRF   x3C
0B05E:  CLRF   x3D
0B060:  CLRF   x3E
0B062:  CLRF   x3F
0B064:  CLRF   x40
0B066:  CLRF   x41
0B068:  CLRF   x42
0B06A:  CLRF   x43
0B06C:  CLRF   x44
0B06E:  CLRF   x45
0B070:  CLRF   x46
0B072:  CLRF   x47
0B074:  CLRF   x48
0B076:  CLRF   x49
0B078:  CLRF   x4A
0B07A:  CLRF   x4B
0B07C:  CLRF   x4C
0B07E:  CLRF   x4D
0B080:  CLRF   x4E
0B082:  CLRF   x4F
0B084:  CLRF   x50
0B086:  CLRF   x51
0B088:  CLRF   x52
0B08A:  CLRF   x53
0B08C:  CLRF   x54
0B08E:  CLRF   x55
0B090:  CLRF   x56
0B092:  CLRF   x57
0B094:  CLRF   x58
0B096:  CLRF   x59
0B098:  CLRF   x5A
0B09A:  CLRF   x5B
0B09C:  CLRF   x5C
0B09E:  CLRF   x5D
0B0A0:  CLRF   x5E
0B0A2:  CLRF   x5F
0B0A4:  CLRF   x60
0B0A6:  CLRF   x61
0B0A8:  CLRF   x62
0B0AA:  CLRF   x63
0B0AC:  CLRF   x64
0B0AE:  CLRF   x65
0B0B0:  CLRF   x66
0B0B2:  CLRF   x67
0B0B4:  CLRF   x68
0B0B6:  CLRF   x69
0B0B8:  CLRF   x6A
0B0BA:  CLRF   x6B
0B0BC:  CLRF   x6C
0B0BE:  CLRF   x6D
0B0C0:  CLRF   x6E
0B0C2:  CLRF   x6F
0B0C4:  CLRF   x70
0B0C6:  CLRF   x71
0B0C8:  CLRF   x72
0B0CA:  CLRF   x73
0B0CC:  CLRF   x74
0B0CE:  CLRF   x75
0B0D0:  CLRF   x76
0B0D2:  CLRF   x77
0B0D4:  CLRF   x78
0B0D6:  CLRF   x79
0B0D8:  CLRF   x7A
0B0DA:  CLRF   x7B
0B0DC:  CLRF   x7C
0B0DE:  CLRF   x7D
0B0E0:  CLRF   x7E
0B0E2:  CLRF   x7F
0B0E4:  CLRF   x80
0B0E6:  CLRF   x81
0B0E8:  CLRF   x82
0B0EA:  CLRF   x83
0B0EC:  CLRF   x84
0B0EE:  CLRF   x85
0B0F0:  CLRF   x86
0B0F2:  CLRF   x87
0B0F4:  CLRF   x88
0B0F6:  CLRF   x89
0B0F8:  CLRF   x8A
0B0FA:  CLRF   x8B
0B0FC:  CLRF   x8C
0B0FE:  CLRF   x8D
0B100:  CLRF   x8E
0B102:  CLRF   x8F
0B104:  CLRF   x90
0B106:  CLRF   x91
0B108:  CLRF   x92
0B10A:  CLRF   x93
0B10C:  CLRF   x94
0B10E:  CLRF   x95
0B110:  CLRF   x96
0B112:  CLRF   x97
0B114:  CLRF   x98
0B116:  CLRF   x99
0B118:  CLRF   x9A
0B11A:  CLRF   x9B
0B11C:  CLRF   x9C
0B11E:  CLRF   x9D
0B120:  CLRF   x9E
0B122:  CLRF   x9F
0B124:  CLRF   xA0
0B126:  CLRF   xA1
0B128:  CLRF   xA2
0B12A:  CLRF   xA3
0B12C:  CLRF   xA4
0B12E:  CLRF   xA5
0B130:  CLRF   xA6
0B132:  CLRF   xA7
0B134:  CLRF   xA8
0B136:  CLRF   xA9
0B138:  CLRF   xAA
0B13A:  CLRF   xAB
0B13C:  CLRF   xAC
0B13E:  CLRF   xAD
0B140:  CLRF   xAE
0B142:  CLRF   xAF
0B144:  CLRF   xB0
0B146:  CLRF   xB1
0B148:  CLRF   xB2
0B14A:  CLRF   xB3
0B14C:  CLRF   xB4
0B14E:  CLRF   xB5
0B150:  CLRF   xB6
0B152:  CLRF   xB7
0B154:  CLRF   xB8
0B156:  CLRF   xB9
0B158:  CLRF   xBA
0B15A:  CLRF   xBB
0B15C:  CLRF   xBC
0B15E:  CLRF   xBD
0B160:  CLRF   xBE
0B162:  CLRF   xBF
0B164:  CLRF   xC0
0B166:  CLRF   xC1
0B168:  CLRF   xC2
0B16A:  CLRF   xC3
0B16C:  CLRF   xC4
0B16E:  CLRF   xC5
0B170:  CLRF   xC6
0B172:  CLRF   xC7
0B174:  CLRF   xC8
0B176:  CLRF   xC9
0B178:  CLRF   xCA
0B17A:  CLRF   xCB
0B17C:  CLRF   xCC
0B17E:  CLRF   xCD
0B180:  CLRF   xCE
0B182:  CLRF   xCF
0B184:  CLRF   xD0
0B186:  CLRF   xD1
0B188:  CLRF   xD2
0B18A:  CLRF   xD3
0B18C:  CLRF   xD4
0B18E:  CLRF   xD5
0B190:  CLRF   xD6
0B192:  CLRF   xD7
0B194:  CLRF   xD8
0B196:  CLRF   xD9
0B198:  CLRF   xDA
0B19A:  CLRF   xDB
0B19C:  CLRF   xDC
0B19E:  CLRF   xDD
0B1A0:  CLRF   xDE
0B1A2:  CLRF   xDF
0B1A4:  CLRF   xE0
0B1A6:  CLRF   xE1
0B1A8:  CLRF   xE2
0B1AA:  CLRF   xE3
0B1AC:  CLRF   xE4
0B1AE:  CLRF   xE5
0B1B0:  CLRF   xE6
0B1B2:  CLRF   xE7
0B1B4:  CLRF   xE8
0B1B6:  CLRF   xE9
0B1B8:  CLRF   xEA
0B1BA:  CLRF   xEB
0B1BC:  CLRF   xEC
0B1BE:  CLRF   xED
0B1C0:  CLRF   xEE
0B1C2:  CLRF   xEF
0B1C4:  CLRF   xF0
0B1C6:  CLRF   xF1
0B1C8:  CLRF   xF2
0B1CA:  CLRF   xF3
0B1CC:  CLRF   xF4
0B1CE:  CLRF   xF5
0B1D0:  CLRF   xF6
0B1D2:  CLRF   xF7
0B1D4:  CLRF   xF8
0B1D6:  CLRF   xF9
0B1D8:  CLRF   xFA
0B1DA:  CLRF   xFB
0B1DC:  CLRF   xFC
0B1DE:  CLRF   xFD
0B1E0:  CLRF   xFE
0B1E2:  CLRF   xFF
0B1E4:  MOVLB  4
0B1E6:  CLRF   x00
0B1E8:  CLRF   x01
0B1EA:  CLRF   x02
0B1EC:  CLRF   x03
0B1EE:  CLRF   x04
0B1F0:  CLRF   x05
0B1F2:  CLRF   x06
0B1F4:  CLRF   x07
0B1F6:  CLRF   x08
0B1F8:  CLRF   x09
0B1FA:  CLRF   x0A
0B1FC:  CLRF   x0B
0B1FE:  CLRF   x0C
0B200:  CLRF   x0D
0B202:  CLRF   x0E
0B204:  CLRF   x0F
0B206:  CLRF   x10
0B208:  CLRF   x11
0B20A:  CLRF   x12
0B20C:  CLRF   x13
0B20E:  CLRF   x14
0B210:  CLRF   x15
0B212:  CLRF   x16
0B214:  CLRF   x17
0B216:  CLRF   x18
0B218:  CLRF   x19
0B21A:  CLRF   x1A
0B21C:  CLRF   x1B
0B21E:  CLRF   x1C
0B220:  CLRF   x1D
0B222:  CLRF   x1E
0B224:  CLRF   x1F
0B226:  CLRF   x20
0B228:  CLRF   x21
0B22A:  CLRF   x22
0B22C:  CLRF   x23
0B22E:  CLRF   x24
0B230:  CLRF   x25
0B232:  CLRF   x26
0B234:  CLRF   x27
0B236:  CLRF   x28
0B238:  CLRF   x29
0B23A:  CLRF   x2A
0B23C:  CLRF   x2B
0B23E:  CLRF   x2C
0B240:  CLRF   x2D
0B242:  CLRF   x2E
0B244:  CLRF   x2F
0B246:  CLRF   x30
0B248:  CLRF   x31
0B24A:  CLRF   x32
0B24C:  CLRF   x33
0B24E:  CLRF   x34
0B250:  CLRF   x35
0B252:  CLRF   x36
0B254:  CLRF   x37
0B256:  CLRF   x38
0B258:  CLRF   x39
0B25A:  CLRF   x3A
0B25C:  CLRF   x3B
0B25E:  CLRF   x3C
0B260:  CLRF   x3D
0B262:  CLRF   x3E
0B264:  CLRF   x3F
0B266:  CLRF   x40
0B268:  CLRF   x41
0B26A:  CLRF   x42
0B26C:  CLRF   x43
0B26E:  CLRF   x44
0B270:  CLRF   x45
0B272:  CLRF   x46
0B274:  CLRF   x47
0B276:  CLRF   x48
0B278:  CLRF   x49
0B27A:  CLRF   x4A
0B27C:  CLRF   x4B
0B27E:  CLRF   x4C
0B280:  CLRF   x4D
0B282:  CLRF   x4E
0B284:  CLRF   x4F
0B286:  CLRF   x50
0B288:  CLRF   x51
0B28A:  CLRF   x52
0B28C:  CLRF   x53
0B28E:  CLRF   x54
0B290:  CLRF   x55
0B292:  CLRF   x56
0B294:  CLRF   x57
0B296:  CLRF   x58
0B298:  CLRF   x59
0B29A:  CLRF   x5A
0B29C:  CLRF   x5B
0B29E:  CLRF   x5C
0B2A0:  CLRF   x5D
0B2A2:  CLRF   x5E
0B2A4:  CLRF   x5F
0B2A6:  CLRF   x60
0B2A8:  CLRF   x61
0B2AA:  CLRF   x62
0B2AC:  CLRF   x63
0B2AE:  CLRF   x64
0B2B0:  CLRF   x65
0B2B2:  CLRF   x66
0B2B4:  CLRF   x67
0B2B6:  CLRF   x68
0B2B8:  CLRF   x69
0B2BA:  CLRF   x6A
0B2BC:  CLRF   x6B
0B2BE:  CLRF   x6C
0B2C0:  CLRF   x6D
0B2C2:  CLRF   x6E
0B2C4:  CLRF   x6F
0B2C6:  CLRF   x70
0B2C8:  CLRF   x71
0B2CA:  CLRF   x72
0B2CC:  CLRF   x73
0B2CE:  CLRF   x74
0B2D0:  CLRF   x75
0B2D2:  CLRF   x76
0B2D4:  CLRF   x77
0B2D6:  CLRF   x78
0B2D8:  CLRF   x79
0B2DA:  CLRF   x7A
0B2DC:  CLRF   x7B
0B2DE:  CLRF   x7C
0B2E0:  CLRF   x7D
0B2E2:  CLRF   x7E
0B2E4:  CLRF   x7F
0B2E6:  CLRF   x80
0B2E8:  CLRF   x81
0B2EA:  CLRF   x82
0B2EC:  CLRF   x83
0B2EE:  CLRF   x84
0B2F0:  CLRF   x85
0B2F2:  CLRF   x86
0B2F4:  CLRF   x87
0B2F6:  CLRF   x88
0B2F8:  CLRF   x89
0B2FA:  CLRF   x8A
0B2FC:  CLRF   x8B
0B2FE:  CLRF   x8C
0B300:  CLRF   x8D
0B302:  CLRF   x8E
0B304:  CLRF   x8F
0B306:  CLRF   x90
0B308:  CLRF   x91
0B30A:  CLRF   x92
0B30C:  CLRF   x93
0B30E:  CLRF   x94
0B310:  CLRF   x95
0B312:  CLRF   x96
0B314:  CLRF   x97
0B316:  CLRF   x98
0B318:  CLRF   x99
0B31A:  CLRF   x9A
0B31C:  CLRF   x9B
0B31E:  CLRF   x9C
0B320:  CLRF   x9D
0B322:  CLRF   x9E
0B324:  CLRF   x9F
0B326:  CLRF   xA0
0B328:  CLRF   xA1
0B32A:  CLRF   xA2
0B32C:  CLRF   xA3
0B32E:  CLRF   xA4
0B330:  CLRF   xA5
0B332:  CLRF   xA6
0B334:  CLRF   xA7
0B336:  CLRF   xA8
0B338:  CLRF   xA9
0B33A:  CLRF   xAA
0B33C:  CLRF   xAB
0B33E:  CLRF   xAC
0B340:  CLRF   xAD
0B342:  CLRF   xAE
0B344:  CLRF   xAF
0B346:  CLRF   xB0
0B348:  CLRF   xB1
0B34A:  CLRF   xB2
0B34C:  CLRF   xB3
0B34E:  CLRF   xB4
0B350:  CLRF   xB5
0B352:  CLRF   xB6
0B354:  CLRF   xB7
0B356:  CLRF   xB8
0B358:  CLRF   xB9
0B35A:  CLRF   xBA
0B35C:  CLRF   xBB
0B35E:  CLRF   xBC
0B360:  CLRF   xBD
0B362:  CLRF   xBE
0B364:  CLRF   xBF
0B366:  CLRF   xC0
0B368:  CLRF   xC1
0B36A:  CLRF   xC2
0B36C:  CLRF   xC3
0B36E:  CLRF   xC4
0B370:  CLRF   xC5
0B372:  CLRF   xC6
0B374:  CLRF   xC7
0B376:  CLRF   xC8
0B378:  CLRF   xC9
0B37A:  CLRF   xCA
0B37C:  CLRF   xCB
0B37E:  CLRF   xCC
0B380:  CLRF   xCD
0B382:  CLRF   xCE
0B384:  CLRF   xCF
0B386:  CLRF   xD0
0B388:  CLRF   xD1
0B38A:  CLRF   xD2
0B38C:  CLRF   xD3
0B38E:  CLRF   xD4
0B390:  CLRF   xD5
0B392:  CLRF   xD6
0B394:  CLRF   xD7
0B396:  CLRF   xD8
0B398:  CLRF   xD9
0B39A:  CLRF   xDA
0B39C:  CLRF   xDB
0B39E:  CLRF   xDC
0B3A0:  CLRF   xDD
0B3A2:  CLRF   xDE
0B3A4:  CLRF   xDF
0B3A6:  CLRF   xE0
0B3A8:  CLRF   xE1
0B3AA:  CLRF   xE2
0B3AC:  CLRF   xE3
0B3AE:  CLRF   xE4
0B3B0:  CLRF   xE5
0B3B2:  CLRF   xE6
0B3B4:  CLRF   xE7
0B3B6:  CLRF   xE8
0B3B8:  CLRF   xE9
0B3BA:  CLRF   xEA
0B3BC:  CLRF   xEB
0B3BE:  CLRF   xEC
0B3C0:  CLRF   xED
0B3C2:  CLRF   xEE
0B3C4:  CLRF   xEF
0B3C6:  CLRF   xF0
0B3C8:  CLRF   xF1
0B3CA:  CLRF   xF2
0B3CC:  CLRF   xF3
0B3CE:  CLRF   xF4
0B3D0:  CLRF   xF5
0B3D2:  CLRF   xF6
0B3D4:  CLRF   xF7
0B3D6:  CLRF   xF8
0B3D8:  CLRF   xF9
0B3DA:  CLRF   xFA
0B3DC:  CLRF   xFB
0B3DE:  CLRF   xFC
0B3E0:  CLRF   xFD
0B3E2:  CLRF   xFE
0B3E4:  CLRF   xFF
0B3E6:  MOVLB  5
0B3E8:  CLRF   x00
0B3EA:  CLRF   x01
0B3EC:  CLRF   x02
0B3EE:  CLRF   x03
0B3F0:  CLRF   x04
0B3F2:  CLRF   x05
0B3F4:  CLRF   x06
0B3F6:  CLRF   x07
0B3F8:  CLRF   x08
0B3FA:  CLRF   x09
0B3FC:  CLRF   x0A
0B3FE:  CLRF   x0B
0B400:  CLRF   x0C
0B402:  CLRF   x0D
0B404:  CLRF   x0E
0B406:  CLRF   x0F
0B408:  CLRF   x10
0B40A:  CLRF   x11
0B40C:  CLRF   x12
0B40E:  CLRF   x13
0B410:  CLRF   x14
0B412:  CLRF   x15
0B414:  CLRF   x16
0B416:  CLRF   x17
0B418:  CLRF   x18
0B41A:  CLRF   x19
0B41C:  CLRF   x1A
0B41E:  CLRF   x1B
0B420:  CLRF   x1C
0B422:  CLRF   x1D
0B424:  CLRF   x1E
0B426:  CLRF   x1F
0B428:  CLRF   x20
0B42A:  CLRF   x21
0B42C:  CLRF   x22
0B42E:  CLRF   x23
0B430:  CLRF   x24
0B432:  CLRF   x25
0B434:  CLRF   x26
0B436:  CLRF   x27
0B438:  CLRF   x28
0B43A:  CLRF   x29
0B43C:  CLRF   x2A
0B43E:  CLRF   x2B
0B440:  CLRF   x2C
0B442:  CLRF   x2D
0B444:  CLRF   x2E
0B446:  CLRF   x2F
0B448:  CLRF   x30
0B44A:  CLRF   x31
0B44C:  CLRF   x32
0B44E:  CLRF   x33
0B450:  CLRF   x34
0B452:  CLRF   x35
0B454:  CLRF   x36
0B456:  CLRF   x37
0B458:  CLRF   x38
0B45A:  CLRF   x39
0B45C:  CLRF   x3A
0B45E:  CLRF   x3B
0B460:  CLRF   x3C
0B462:  CLRF   x3D
0B464:  CLRF   x3E
0B466:  CLRF   x3F
0B468:  CLRF   x40
0B46A:  CLRF   x41
0B46C:  CLRF   x42
0B46E:  CLRF   x43
0B470:  CLRF   x44
0B472:  CLRF   x45
0B474:  CLRF   x46
0B476:  CLRF   x47
0B478:  CLRF   x48
0B47A:  CLRF   x49
0B47C:  CLRF   x4A
0B47E:  CLRF   x4B
0B480:  CLRF   x4C
0B482:  CLRF   x4D
0B484:  CLRF   x4E
0B486:  CLRF   x4F
0B488:  CLRF   x50
0B48A:  CLRF   x51
0B48C:  CLRF   x52
0B48E:  CLRF   x53
0B490:  CLRF   x54
0B492:  CLRF   x55
0B494:  CLRF   x56
0B496:  CLRF   x57
0B498:  CLRF   x58
0B49A:  CLRF   x59
0B49C:  CLRF   x5A
0B49E:  CLRF   x5B
0B4A0:  CLRF   x5C
0B4A2:  CLRF   x5D
0B4A4:  CLRF   x5E
0B4A6:  CLRF   x5F
0B4A8:  CLRF   x60
0B4AA:  CLRF   x61
0B4AC:  CLRF   x62
0B4AE:  CLRF   x63
0B4B0:  CLRF   x64
0B4B2:  CLRF   x65
0B4B4:  CLRF   x66
0B4B6:  CLRF   x67
0B4B8:  CLRF   x68
0B4BA:  CLRF   x69
0B4BC:  CLRF   x6A
0B4BE:  CLRF   x6B
0B4C0:  CLRF   x6C
0B4C2:  CLRF   x6D
0B4C4:  CLRF   x6E
0B4C6:  CLRF   x6F
0B4C8:  CLRF   x70
0B4CA:  CLRF   x71
0B4CC:  CLRF   x72
0B4CE:  CLRF   x73
0B4D0:  CLRF   x74
0B4D2:  CLRF   x75
0B4D4:  CLRF   x76
0B4D6:  CLRF   x77
0B4D8:  CLRF   x78
0B4DA:  CLRF   x79
0B4DC:  CLRF   x7A
0B4DE:  CLRF   x7B
0B4E0:  CLRF   x7C
0B4E2:  CLRF   x7D
0B4E4:  CLRF   x7E
0B4E6:  CLRF   x7F
0B4E8:  CLRF   x80
0B4EA:  CLRF   x81
0B4EC:  CLRF   x82
0B4EE:  CLRF   x83
0B4F0:  CLRF   x84
0B4F2:  CLRF   x85
0B4F4:  CLRF   x86
0B4F6:  CLRF   x87
0B4F8:  CLRF   x88
0B4FA:  CLRF   x89
0B4FC:  CLRF   x8A
0B4FE:  CLRF   x8B
0B500:  CLRF   x8C
0B502:  CLRF   x8D
0B504:  CLRF   x8E
0B506:  CLRF   x8F
0B508:  CLRF   x90
0B50A:  CLRF   x91
0B50C:  CLRF   x92
0B50E:  CLRF   x93
0B510:  CLRF   x94
0B512:  CLRF   x95
0B514:  CLRF   x96
0B516:  CLRF   x97
0B518:  CLRF   x98
0B51A:  CLRF   x99
0B51C:  CLRF   x9A
0B51E:  CLRF   x9B
0B520:  CLRF   x9C
0B522:  CLRF   x9D
0B524:  CLRF   x9E
0B526:  CLRF   x9F
0B528:  CLRF   xA0
0B52A:  CLRF   xA1
0B52C:  CLRF   xA2
0B52E:  CLRF   xA3
0B530:  CLRF   xA4
0B532:  CLRF   xA5
0B534:  CLRF   xA6
0B536:  CLRF   xA7
0B538:  CLRF   xA8
0B53A:  CLRF   xA9
0B53C:  CLRF   xAA
0B53E:  CLRF   xAB
0B540:  CLRF   xAC
0B542:  CLRF   xAD
0B544:  CLRF   xAE
0B546:  CLRF   xAF
0B548:  CLRF   xB0
0B54A:  CLRF   xB1
0B54C:  CLRF   xB2
0B54E:  CLRF   xB3
0B550:  CLRF   xB4
0B552:  CLRF   xB5
0B554:  CLRF   xB6
0B556:  CLRF   xB7
0B558:  CLRF   xB8
0B55A:  CLRF   xB9
0B55C:  CLRF   xBA
0B55E:  CLRF   xBB
0B560:  CLRF   xBC
0B562:  CLRF   xBD
0B564:  CLRF   xBE
0B566:  CLRF   xBF
0B568:  CLRF   xC0
0B56A:  CLRF   xC1
0B56C:  CLRF   xC2
0B56E:  CLRF   xC3
0B570:  CLRF   xC4
0B572:  CLRF   xC5
0B574:  CLRF   xC6
0B576:  CLRF   xC7
0B578:  CLRF   xC8
0B57A:  CLRF   xC9
0B57C:  CLRF   xCA
0B57E:  CLRF   xCB
0B580:  CLRF   xCC
0B582:  CLRF   xCD
0B584:  CLRF   xCE
0B586:  CLRF   xCF
0B588:  CLRF   xD0
0B58A:  CLRF   xD1
0B58C:  CLRF   xD2
0B58E:  CLRF   xD3
0B590:  CLRF   xD4
0B592:  CLRF   xD5
0B594:  CLRF   xD6
0B596:  CLRF   xD7
0B598:  CLRF   xD8
0B59A:  CLRF   xD9
0B59C:  CLRF   xDA
0B59E:  CLRF   xDB
0B5A0:  CLRF   xDC
0B5A2:  CLRF   xDD
0B5A4:  CLRF   xDE
0B5A6:  CLRF   xDF
0B5A8:  CLRF   xE0
0B5AA:  CLRF   xE1
0B5AC:  CLRF   xE2
0B5AE:  CLRF   xE3
0B5B0:  CLRF   xE4
0B5B2:  CLRF   xE5
0B5B4:  CLRF   xE6
0B5B6:  CLRF   xE7
0B5B8:  CLRF   xE8
0B5BA:  CLRF   xE9
0B5BC:  CLRF   xEA
0B5BE:  CLRF   xEB
0B5C0:  CLRF   xEC
0B5C2:  CLRF   xED
0B5C4:  CLRF   xEE
0B5C6:  CLRF   xEF
0B5C8:  CLRF   xF0
0B5CA:  CLRF   xF1
0B5CC:  CLRF   xF2
0B5CE:  CLRF   xF3
0B5D0:  CLRF   xF4
0B5D2:  CLRF   xF5
0B5D4:  CLRF   xF6
0B5D6:  CLRF   xF7
0B5D8:  CLRF   xF8
0B5DA:  CLRF   xF9
0B5DC:  CLRF   xFA
0B5DE:  CLRF   xFB
0B5E0:  CLRF   xFC
0B5E2:  CLRF   xFD
0B5E4:  CLRF   xFE
0B5E6:  CLRF   xFF
0B5E8:  MOVLB  6
0B5EA:  CLRF   x00
0B5EC:  CLRF   x01
0B5EE:  CLRF   x02
0B5F0:  CLRF   x03
0B5F2:  CLRF   x04
0B5F4:  CLRF   x05
0B5F6:  CLRF   x06
0B5F8:  CLRF   x07
0B5FA:  CLRF   x08
0B5FC:  CLRF   x09
0B5FE:  CLRF   x0A
0B600:  CLRF   x0B
0B602:  CLRF   x0C
0B604:  CLRF   x0D
0B606:  CLRF   x0E
0B608:  CLRF   x0F
0B60A:  CLRF   x10
0B60C:  CLRF   x11
0B60E:  CLRF   x12
0B610:  CLRF   x13
0B612:  CLRF   x14
0B614:  CLRF   x15
0B616:  CLRF   x16
0B618:  CLRF   x17
0B61A:  CLRF   x18
0B61C:  CLRF   x19
0B61E:  CLRF   x1A
0B620:  CLRF   x1B
0B622:  CLRF   x1C
0B624:  CLRF   x1D
0B626:  CLRF   x1E
0B628:  CLRF   x1F
0B62A:  CLRF   x20
0B62C:  CLRF   x21
0B62E:  CLRF   x22
0B630:  CLRF   x23
0B632:  CLRF   x24
0B634:  CLRF   x25
0B636:  CLRF   x26
0B638:  CLRF   x27
0B63A:  CLRF   x28
0B63C:  CLRF   x29
0B63E:  CLRF   x2A
0B640:  CLRF   x2B
0B642:  CLRF   x2C
0B644:  CLRF   x2D
0B646:  CLRF   x2E
0B648:  CLRF   x2F
0B64A:  CLRF   x30
0B64C:  CLRF   x31
0B64E:  CLRF   x32
0B650:  CLRF   x33
0B652:  CLRF   x34
0B654:  CLRF   x35
0B656:  CLRF   x36
0B658:  CLRF   x37
0B65A:  CLRF   x38
0B65C:  CLRF   x39
0B65E:  CLRF   x3A
0B660:  CLRF   x3B
0B662:  CLRF   x3C
0B664:  CLRF   x3D
0B666:  CLRF   x3E
0B668:  CLRF   x3F
0B66A:  CLRF   x40
0B66C:  CLRF   x41
0B66E:  CLRF   x42
0B670:  CLRF   x43
0B672:  CLRF   x44
0B674:  CLRF   x45
0B676:  CLRF   x46
....................     port1.port_num = 1;
0B678:  MOVLW  01
0B67A:  MOVLB  2
0B67C:  MOVWF  x47
....................     port1.sweep_step = 0;
0B67E:  CLRF   x49
0B680:  CLRF   x48
....................     port1.active = 1;
0B682:  MOVLB  6
0B684:  BSF    x46.0
.................... 
....................     // Init Port2
....................     sweep_config_t port2 = {0};
0B686:  CLRF   x47
0B688:  CLRF   x48
0B68A:  CLRF   x49
0B68C:  CLRF   x4A
0B68E:  CLRF   x4B
0B690:  CLRF   x4C
0B692:  CLRF   x4D
0B694:  CLRF   x4E
0B696:  CLRF   x4F
0B698:  CLRF   x50
0B69A:  CLRF   x51
0B69C:  CLRF   x52
0B69E:  CLRF   x53
0B6A0:  CLRF   x54
0B6A2:  CLRF   x55
0B6A4:  CLRF   x56
0B6A6:  CLRF   x57
0B6A8:  CLRF   x58
0B6AA:  CLRF   x59
0B6AC:  CLRF   x5A
0B6AE:  CLRF   x5B
0B6B0:  CLRF   x5C
0B6B2:  CLRF   x5D
0B6B4:  CLRF   x5E
0B6B6:  CLRF   x5F
0B6B8:  CLRF   x60
0B6BA:  CLRF   x61
0B6BC:  CLRF   x62
0B6BE:  CLRF   x63
0B6C0:  CLRF   x64
0B6C2:  CLRF   x65
0B6C4:  CLRF   x66
0B6C6:  CLRF   x67
0B6C8:  CLRF   x68
0B6CA:  CLRF   x69
0B6CC:  CLRF   x6A
0B6CE:  CLRF   x6B
0B6D0:  CLRF   x6C
0B6D2:  CLRF   x6D
0B6D4:  CLRF   x6E
0B6D6:  CLRF   x6F
0B6D8:  CLRF   x70
0B6DA:  CLRF   x71
0B6DC:  CLRF   x72
0B6DE:  CLRF   x73
0B6E0:  CLRF   x74
0B6E2:  CLRF   x75
0B6E4:  CLRF   x76
0B6E6:  CLRF   x77
0B6E8:  CLRF   x78
0B6EA:  CLRF   x79
0B6EC:  CLRF   x7A
0B6EE:  CLRF   x7B
0B6F0:  CLRF   x7C
0B6F2:  CLRF   x7D
0B6F4:  CLRF   x7E
0B6F6:  CLRF   x7F
0B6F8:  CLRF   x80
0B6FA:  CLRF   x81
0B6FC:  CLRF   x82
0B6FE:  CLRF   x83
0B700:  CLRF   x84
0B702:  CLRF   x85
0B704:  CLRF   x86
0B706:  CLRF   x87
0B708:  CLRF   x88
0B70A:  CLRF   x89
0B70C:  CLRF   x8A
0B70E:  CLRF   x8B
0B710:  CLRF   x8C
0B712:  CLRF   x8D
0B714:  CLRF   x8E
0B716:  CLRF   x8F
0B718:  CLRF   x90
0B71A:  CLRF   x91
0B71C:  CLRF   x92
0B71E:  CLRF   x93
0B720:  CLRF   x94
0B722:  CLRF   x95
0B724:  CLRF   x96
0B726:  CLRF   x97
0B728:  CLRF   x98
0B72A:  CLRF   x99
0B72C:  CLRF   x9A
0B72E:  CLRF   x9B
0B730:  CLRF   x9C
0B732:  CLRF   x9D
0B734:  CLRF   x9E
0B736:  CLRF   x9F
0B738:  CLRF   xA0
0B73A:  CLRF   xA1
0B73C:  CLRF   xA2
0B73E:  CLRF   xA3
0B740:  CLRF   xA4
0B742:  CLRF   xA5
0B744:  CLRF   xA6
0B746:  CLRF   xA7
0B748:  CLRF   xA8
0B74A:  CLRF   xA9
0B74C:  CLRF   xAA
0B74E:  CLRF   xAB
0B750:  CLRF   xAC
0B752:  CLRF   xAD
0B754:  CLRF   xAE
0B756:  CLRF   xAF
0B758:  CLRF   xB0
0B75A:  CLRF   xB1
0B75C:  CLRF   xB2
0B75E:  CLRF   xB3
0B760:  CLRF   xB4
0B762:  CLRF   xB5
0B764:  CLRF   xB6
0B766:  CLRF   xB7
0B768:  CLRF   xB8
0B76A:  CLRF   xB9
0B76C:  CLRF   xBA
0B76E:  CLRF   xBB
0B770:  CLRF   xBC
0B772:  CLRF   xBD
0B774:  CLRF   xBE
0B776:  CLRF   xBF
0B778:  CLRF   xC0
0B77A:  CLRF   xC1
0B77C:  CLRF   xC2
0B77E:  CLRF   xC3
0B780:  CLRF   xC4
0B782:  CLRF   xC5
0B784:  CLRF   xC6
0B786:  CLRF   xC7
0B788:  CLRF   xC8
0B78A:  CLRF   xC9
0B78C:  CLRF   xCA
0B78E:  CLRF   xCB
0B790:  CLRF   xCC
0B792:  CLRF   xCD
0B794:  CLRF   xCE
0B796:  CLRF   xCF
0B798:  CLRF   xD0
0B79A:  CLRF   xD1
0B79C:  CLRF   xD2
0B79E:  CLRF   xD3
0B7A0:  CLRF   xD4
0B7A2:  CLRF   xD5
0B7A4:  CLRF   xD6
0B7A6:  CLRF   xD7
0B7A8:  CLRF   xD8
0B7AA:  CLRF   xD9
0B7AC:  CLRF   xDA
0B7AE:  CLRF   xDB
0B7B0:  CLRF   xDC
0B7B2:  CLRF   xDD
0B7B4:  CLRF   xDE
0B7B6:  CLRF   xDF
0B7B8:  CLRF   xE0
0B7BA:  CLRF   xE1
0B7BC:  CLRF   xE2
0B7BE:  CLRF   xE3
0B7C0:  CLRF   xE4
0B7C2:  CLRF   xE5
0B7C4:  CLRF   xE6
0B7C6:  CLRF   xE7
0B7C8:  CLRF   xE8
0B7CA:  CLRF   xE9
0B7CC:  CLRF   xEA
0B7CE:  CLRF   xEB
0B7D0:  CLRF   xEC
0B7D2:  CLRF   xED
0B7D4:  CLRF   xEE
0B7D6:  CLRF   xEF
0B7D8:  CLRF   xF0
0B7DA:  CLRF   xF1
0B7DC:  CLRF   xF2
0B7DE:  CLRF   xF3
0B7E0:  CLRF   xF4
0B7E2:  CLRF   xF5
0B7E4:  CLRF   xF6
0B7E6:  CLRF   xF7
0B7E8:  CLRF   xF8
0B7EA:  CLRF   xF9
0B7EC:  CLRF   xFA
0B7EE:  CLRF   xFB
0B7F0:  CLRF   xFC
0B7F2:  CLRF   xFD
0B7F4:  CLRF   xFE
0B7F6:  CLRF   xFF
0B7F8:  MOVLB  7
0B7FA:  CLRF   x00
0B7FC:  CLRF   x01
0B7FE:  CLRF   x02
0B800:  CLRF   x03
0B802:  CLRF   x04
0B804:  CLRF   x05
0B806:  CLRF   x06
0B808:  CLRF   x07
0B80A:  CLRF   x08
0B80C:  CLRF   x09
0B80E:  CLRF   x0A
0B810:  CLRF   x0B
0B812:  CLRF   x0C
0B814:  CLRF   x0D
0B816:  CLRF   x0E
0B818:  CLRF   x0F
0B81A:  CLRF   x10
0B81C:  CLRF   x11
0B81E:  CLRF   x12
0B820:  CLRF   x13
0B822:  CLRF   x14
0B824:  CLRF   x15
0B826:  CLRF   x16
0B828:  CLRF   x17
0B82A:  CLRF   x18
0B82C:  CLRF   x19
0B82E:  CLRF   x1A
0B830:  CLRF   x1B
0B832:  CLRF   x1C
0B834:  CLRF   x1D
0B836:  CLRF   x1E
0B838:  CLRF   x1F
0B83A:  CLRF   x20
0B83C:  CLRF   x21
0B83E:  CLRF   x22
0B840:  CLRF   x23
0B842:  CLRF   x24
0B844:  CLRF   x25
0B846:  CLRF   x26
0B848:  CLRF   x27
0B84A:  CLRF   x28
0B84C:  CLRF   x29
0B84E:  CLRF   x2A
0B850:  CLRF   x2B
0B852:  CLRF   x2C
0B854:  CLRF   x2D
0B856:  CLRF   x2E
0B858:  CLRF   x2F
0B85A:  CLRF   x30
0B85C:  CLRF   x31
0B85E:  CLRF   x32
0B860:  CLRF   x33
0B862:  CLRF   x34
0B864:  CLRF   x35
0B866:  CLRF   x36
0B868:  CLRF   x37
0B86A:  CLRF   x38
0B86C:  CLRF   x39
0B86E:  CLRF   x3A
0B870:  CLRF   x3B
0B872:  CLRF   x3C
0B874:  CLRF   x3D
0B876:  CLRF   x3E
0B878:  CLRF   x3F
0B87A:  CLRF   x40
0B87C:  CLRF   x41
0B87E:  CLRF   x42
0B880:  CLRF   x43
0B882:  CLRF   x44
0B884:  CLRF   x45
0B886:  CLRF   x46
0B888:  CLRF   x47
0B88A:  CLRF   x48
0B88C:  CLRF   x49
0B88E:  CLRF   x4A
0B890:  CLRF   x4B
0B892:  CLRF   x4C
0B894:  CLRF   x4D
0B896:  CLRF   x4E
0B898:  CLRF   x4F
0B89A:  CLRF   x50
0B89C:  CLRF   x51
0B89E:  CLRF   x52
0B8A0:  CLRF   x53
0B8A2:  CLRF   x54
0B8A4:  CLRF   x55
0B8A6:  CLRF   x56
0B8A8:  CLRF   x57
0B8AA:  CLRF   x58
0B8AC:  CLRF   x59
0B8AE:  CLRF   x5A
0B8B0:  CLRF   x5B
0B8B2:  CLRF   x5C
0B8B4:  CLRF   x5D
0B8B6:  CLRF   x5E
0B8B8:  CLRF   x5F
0B8BA:  CLRF   x60
0B8BC:  CLRF   x61
0B8BE:  CLRF   x62
0B8C0:  CLRF   x63
0B8C2:  CLRF   x64
0B8C4:  CLRF   x65
0B8C6:  CLRF   x66
0B8C8:  CLRF   x67
0B8CA:  CLRF   x68
0B8CC:  CLRF   x69
0B8CE:  CLRF   x6A
0B8D0:  CLRF   x6B
0B8D2:  CLRF   x6C
0B8D4:  CLRF   x6D
0B8D6:  CLRF   x6E
0B8D8:  CLRF   x6F
0B8DA:  CLRF   x70
0B8DC:  CLRF   x71
0B8DE:  CLRF   x72
0B8E0:  CLRF   x73
0B8E2:  CLRF   x74
0B8E4:  CLRF   x75
0B8E6:  CLRF   x76
0B8E8:  CLRF   x77
0B8EA:  CLRF   x78
0B8EC:  CLRF   x79
0B8EE:  CLRF   x7A
0B8F0:  CLRF   x7B
0B8F2:  CLRF   x7C
0B8F4:  CLRF   x7D
0B8F6:  CLRF   x7E
0B8F8:  CLRF   x7F
0B8FA:  CLRF   x80
0B8FC:  CLRF   x81
0B8FE:  CLRF   x82
0B900:  CLRF   x83
0B902:  CLRF   x84
0B904:  CLRF   x85
0B906:  CLRF   x86
0B908:  CLRF   x87
0B90A:  CLRF   x88
0B90C:  CLRF   x89
0B90E:  CLRF   x8A
0B910:  CLRF   x8B
0B912:  CLRF   x8C
0B914:  CLRF   x8D
0B916:  CLRF   x8E
0B918:  CLRF   x8F
0B91A:  CLRF   x90
0B91C:  CLRF   x91
0B91E:  CLRF   x92
0B920:  CLRF   x93
0B922:  CLRF   x94
0B924:  CLRF   x95
0B926:  CLRF   x96
0B928:  CLRF   x97
0B92A:  CLRF   x98
0B92C:  CLRF   x99
0B92E:  CLRF   x9A
0B930:  CLRF   x9B
0B932:  CLRF   x9C
0B934:  CLRF   x9D
0B936:  CLRF   x9E
0B938:  CLRF   x9F
0B93A:  CLRF   xA0
0B93C:  CLRF   xA1
0B93E:  CLRF   xA2
0B940:  CLRF   xA3
0B942:  CLRF   xA4
0B944:  CLRF   xA5
0B946:  CLRF   xA6
0B948:  CLRF   xA7
0B94A:  CLRF   xA8
0B94C:  CLRF   xA9
0B94E:  CLRF   xAA
0B950:  CLRF   xAB
0B952:  CLRF   xAC
0B954:  CLRF   xAD
0B956:  CLRF   xAE
0B958:  CLRF   xAF
0B95A:  CLRF   xB0
0B95C:  CLRF   xB1
0B95E:  CLRF   xB2
0B960:  CLRF   xB3
0B962:  CLRF   xB4
0B964:  CLRF   xB5
0B966:  CLRF   xB6
0B968:  CLRF   xB7
0B96A:  CLRF   xB8
0B96C:  CLRF   xB9
0B96E:  CLRF   xBA
0B970:  CLRF   xBB
0B972:  CLRF   xBC
0B974:  CLRF   xBD
0B976:  CLRF   xBE
0B978:  CLRF   xBF
0B97A:  CLRF   xC0
0B97C:  CLRF   xC1
0B97E:  CLRF   xC2
0B980:  CLRF   xC3
0B982:  CLRF   xC4
0B984:  CLRF   xC5
0B986:  CLRF   xC6
0B988:  CLRF   xC7
0B98A:  CLRF   xC8
0B98C:  CLRF   xC9
0B98E:  CLRF   xCA
0B990:  CLRF   xCB
0B992:  CLRF   xCC
0B994:  CLRF   xCD
0B996:  CLRF   xCE
0B998:  CLRF   xCF
0B99A:  CLRF   xD0
0B99C:  CLRF   xD1
0B99E:  CLRF   xD2
0B9A0:  CLRF   xD3
0B9A2:  CLRF   xD4
0B9A4:  CLRF   xD5
0B9A6:  CLRF   xD6
0B9A8:  CLRF   xD7
0B9AA:  CLRF   xD8
0B9AC:  CLRF   xD9
0B9AE:  CLRF   xDA
0B9B0:  CLRF   xDB
0B9B2:  CLRF   xDC
0B9B4:  CLRF   xDD
0B9B6:  CLRF   xDE
0B9B8:  CLRF   xDF
0B9BA:  CLRF   xE0
0B9BC:  CLRF   xE1
0B9BE:  CLRF   xE2
0B9C0:  CLRF   xE3
0B9C2:  CLRF   xE4
0B9C4:  CLRF   xE5
0B9C6:  CLRF   xE6
0B9C8:  CLRF   xE7
0B9CA:  CLRF   xE8
0B9CC:  CLRF   xE9
0B9CE:  CLRF   xEA
0B9D0:  CLRF   xEB
0B9D2:  CLRF   xEC
0B9D4:  CLRF   xED
0B9D6:  CLRF   xEE
0B9D8:  CLRF   xEF
0B9DA:  CLRF   xF0
0B9DC:  CLRF   xF1
0B9DE:  CLRF   xF2
0B9E0:  CLRF   xF3
0B9E2:  CLRF   xF4
0B9E4:  CLRF   xF5
0B9E6:  CLRF   xF6
0B9E8:  CLRF   xF7
0B9EA:  CLRF   xF8
0B9EC:  CLRF   xF9
0B9EE:  CLRF   xFA
0B9F0:  CLRF   xFB
0B9F2:  CLRF   xFC
0B9F4:  CLRF   xFD
0B9F6:  CLRF   xFE
0B9F8:  CLRF   xFF
0B9FA:  MOVLB  8
0B9FC:  CLRF   x00
0B9FE:  CLRF   x01
0BA00:  CLRF   x02
0BA02:  CLRF   x03
0BA04:  CLRF   x04
0BA06:  CLRF   x05
0BA08:  CLRF   x06
0BA0A:  CLRF   x07
0BA0C:  CLRF   x08
0BA0E:  CLRF   x09
0BA10:  CLRF   x0A
0BA12:  CLRF   x0B
0BA14:  CLRF   x0C
0BA16:  CLRF   x0D
0BA18:  CLRF   x0E
0BA1A:  CLRF   x0F
0BA1C:  CLRF   x10
0BA1E:  CLRF   x11
0BA20:  CLRF   x12
0BA22:  CLRF   x13
0BA24:  CLRF   x14
0BA26:  CLRF   x15
0BA28:  CLRF   x16
0BA2A:  CLRF   x17
0BA2C:  CLRF   x18
0BA2E:  CLRF   x19
0BA30:  CLRF   x1A
0BA32:  CLRF   x1B
0BA34:  CLRF   x1C
0BA36:  CLRF   x1D
0BA38:  CLRF   x1E
0BA3A:  CLRF   x1F
0BA3C:  CLRF   x20
0BA3E:  CLRF   x21
0BA40:  CLRF   x22
0BA42:  CLRF   x23
0BA44:  CLRF   x24
0BA46:  CLRF   x25
0BA48:  CLRF   x26
0BA4A:  CLRF   x27
0BA4C:  CLRF   x28
0BA4E:  CLRF   x29
0BA50:  CLRF   x2A
0BA52:  CLRF   x2B
0BA54:  CLRF   x2C
0BA56:  CLRF   x2D
0BA58:  CLRF   x2E
0BA5A:  CLRF   x2F
0BA5C:  CLRF   x30
0BA5E:  CLRF   x31
0BA60:  CLRF   x32
0BA62:  CLRF   x33
0BA64:  CLRF   x34
0BA66:  CLRF   x35
0BA68:  CLRF   x36
0BA6A:  CLRF   x37
0BA6C:  CLRF   x38
0BA6E:  CLRF   x39
0BA70:  CLRF   x3A
0BA72:  CLRF   x3B
0BA74:  CLRF   x3C
0BA76:  CLRF   x3D
0BA78:  CLRF   x3E
0BA7A:  CLRF   x3F
0BA7C:  CLRF   x40
0BA7E:  CLRF   x41
0BA80:  CLRF   x42
0BA82:  CLRF   x43
0BA84:  CLRF   x44
0BA86:  CLRF   x45
0BA88:  CLRF   x46
0BA8A:  CLRF   x47
0BA8C:  CLRF   x48
0BA8E:  CLRF   x49
0BA90:  CLRF   x4A
0BA92:  CLRF   x4B
0BA94:  CLRF   x4C
0BA96:  CLRF   x4D
0BA98:  CLRF   x4E
0BA9A:  CLRF   x4F
0BA9C:  CLRF   x50
0BA9E:  CLRF   x51
0BAA0:  CLRF   x52
0BAA2:  CLRF   x53
0BAA4:  CLRF   x54
0BAA6:  CLRF   x55
0BAA8:  CLRF   x56
0BAAA:  CLRF   x57
0BAAC:  CLRF   x58
0BAAE:  CLRF   x59
0BAB0:  CLRF   x5A
0BAB2:  CLRF   x5B
0BAB4:  CLRF   x5C
0BAB6:  CLRF   x5D
0BAB8:  CLRF   x5E
0BABA:  CLRF   x5F
0BABC:  CLRF   x60
0BABE:  CLRF   x61
0BAC0:  CLRF   x62
0BAC2:  CLRF   x63
0BAC4:  CLRF   x64
0BAC6:  CLRF   x65
0BAC8:  CLRF   x66
0BACA:  CLRF   x67
0BACC:  CLRF   x68
0BACE:  CLRF   x69
0BAD0:  CLRF   x6A
0BAD2:  CLRF   x6B
0BAD4:  CLRF   x6C
0BAD6:  CLRF   x6D
0BAD8:  CLRF   x6E
0BADA:  CLRF   x6F
0BADC:  CLRF   x70
0BADE:  CLRF   x71
0BAE0:  CLRF   x72
0BAE2:  CLRF   x73
0BAE4:  CLRF   x74
0BAE6:  CLRF   x75
0BAE8:  CLRF   x76
0BAEA:  CLRF   x77
0BAEC:  CLRF   x78
0BAEE:  CLRF   x79
0BAF0:  CLRF   x7A
0BAF2:  CLRF   x7B
0BAF4:  CLRF   x7C
0BAF6:  CLRF   x7D
0BAF8:  CLRF   x7E
0BAFA:  CLRF   x7F
0BAFC:  CLRF   x80
0BAFE:  CLRF   x81
0BB00:  CLRF   x82
0BB02:  CLRF   x83
0BB04:  CLRF   x84
0BB06:  CLRF   x85
0BB08:  CLRF   x86
0BB0A:  CLRF   x87
0BB0C:  CLRF   x88
0BB0E:  CLRF   x89
0BB10:  CLRF   x8A
0BB12:  CLRF   x8B
0BB14:  CLRF   x8C
0BB16:  CLRF   x8D
0BB18:  CLRF   x8E
0BB1A:  CLRF   x8F
0BB1C:  CLRF   x90
0BB1E:  CLRF   x91
0BB20:  CLRF   x92
0BB22:  CLRF   x93
0BB24:  CLRF   x94
0BB26:  CLRF   x95
0BB28:  CLRF   x96
0BB2A:  CLRF   x97
0BB2C:  CLRF   x98
0BB2E:  CLRF   x99
0BB30:  CLRF   x9A
0BB32:  CLRF   x9B
0BB34:  CLRF   x9C
0BB36:  CLRF   x9D
0BB38:  CLRF   x9E
0BB3A:  CLRF   x9F
0BB3C:  CLRF   xA0
0BB3E:  CLRF   xA1
0BB40:  CLRF   xA2
0BB42:  CLRF   xA3
0BB44:  CLRF   xA4
0BB46:  CLRF   xA5
0BB48:  CLRF   xA6
0BB4A:  CLRF   xA7
0BB4C:  CLRF   xA8
0BB4E:  CLRF   xA9
0BB50:  CLRF   xAA
0BB52:  CLRF   xAB
0BB54:  CLRF   xAC
0BB56:  CLRF   xAD
0BB58:  CLRF   xAE
0BB5A:  CLRF   xAF
0BB5C:  CLRF   xB0
0BB5E:  CLRF   xB1
0BB60:  CLRF   xB2
0BB62:  CLRF   xB3
0BB64:  CLRF   xB4
0BB66:  CLRF   xB5
0BB68:  CLRF   xB6
0BB6A:  CLRF   xB7
0BB6C:  CLRF   xB8
0BB6E:  CLRF   xB9
0BB70:  CLRF   xBA
0BB72:  CLRF   xBB
0BB74:  CLRF   xBC
0BB76:  CLRF   xBD
0BB78:  CLRF   xBE
0BB7A:  CLRF   xBF
0BB7C:  CLRF   xC0
0BB7E:  CLRF   xC1
0BB80:  CLRF   xC2
0BB82:  CLRF   xC3
0BB84:  CLRF   xC4
0BB86:  CLRF   xC5
0BB88:  CLRF   xC6
0BB8A:  CLRF   xC7
0BB8C:  CLRF   xC8
0BB8E:  CLRF   xC9
0BB90:  CLRF   xCA
0BB92:  CLRF   xCB
0BB94:  CLRF   xCC
0BB96:  CLRF   xCD
0BB98:  CLRF   xCE
0BB9A:  CLRF   xCF
0BB9C:  CLRF   xD0
0BB9E:  CLRF   xD1
0BBA0:  CLRF   xD2
0BBA2:  CLRF   xD3
0BBA4:  CLRF   xD4
0BBA6:  CLRF   xD5
0BBA8:  CLRF   xD6
0BBAA:  CLRF   xD7
0BBAC:  CLRF   xD8
0BBAE:  CLRF   xD9
0BBB0:  CLRF   xDA
0BBB2:  CLRF   xDB
0BBB4:  CLRF   xDC
0BBB6:  CLRF   xDD
0BBB8:  CLRF   xDE
0BBBA:  CLRF   xDF
0BBBC:  CLRF   xE0
0BBBE:  CLRF   xE1
0BBC0:  CLRF   xE2
0BBC2:  CLRF   xE3
0BBC4:  CLRF   xE4
0BBC6:  CLRF   xE5
0BBC8:  CLRF   xE6
0BBCA:  CLRF   xE7
0BBCC:  CLRF   xE8
0BBCE:  CLRF   xE9
0BBD0:  CLRF   xEA
0BBD2:  CLRF   xEB
0BBD4:  CLRF   xEC
0BBD6:  CLRF   xED
0BBD8:  CLRF   xEE
0BBDA:  CLRF   xEF
0BBDC:  CLRF   xF0
0BBDE:  CLRF   xF1
0BBE0:  CLRF   xF2
0BBE2:  CLRF   xF3
0BBE4:  CLRF   xF4
0BBE6:  CLRF   xF5
0BBE8:  CLRF   xF6
0BBEA:  CLRF   xF7
0BBEC:  CLRF   xF8
0BBEE:  CLRF   xF9
0BBF0:  CLRF   xFA
0BBF2:  CLRF   xFB
0BBF4:  CLRF   xFC
0BBF6:  CLRF   xFD
0BBF8:  CLRF   xFE
0BBFA:  CLRF   xFF
0BBFC:  MOVLB  9
0BBFE:  CLRF   x00
0BC00:  CLRF   x01
0BC02:  CLRF   x02
0BC04:  CLRF   x03
0BC06:  CLRF   x04
0BC08:  CLRF   x05
0BC0A:  CLRF   x06
0BC0C:  CLRF   x07
0BC0E:  CLRF   x08
0BC10:  CLRF   x09
0BC12:  CLRF   x0A
0BC14:  CLRF   x0B
0BC16:  CLRF   x0C
0BC18:  CLRF   x0D
0BC1A:  CLRF   x0E
0BC1C:  CLRF   x0F
0BC1E:  CLRF   x10
0BC20:  CLRF   x11
0BC22:  CLRF   x12
0BC24:  CLRF   x13
0BC26:  CLRF   x14
0BC28:  CLRF   x15
0BC2A:  CLRF   x16
0BC2C:  CLRF   x17
0BC2E:  CLRF   x18
0BC30:  CLRF   x19
0BC32:  CLRF   x1A
0BC34:  CLRF   x1B
0BC36:  CLRF   x1C
0BC38:  CLRF   x1D
0BC3A:  CLRF   x1E
0BC3C:  CLRF   x1F
0BC3E:  CLRF   x20
0BC40:  CLRF   x21
0BC42:  CLRF   x22
0BC44:  CLRF   x23
0BC46:  CLRF   x24
0BC48:  CLRF   x25
0BC4A:  CLRF   x26
0BC4C:  CLRF   x27
0BC4E:  CLRF   x28
0BC50:  CLRF   x29
0BC52:  CLRF   x2A
0BC54:  CLRF   x2B
0BC56:  CLRF   x2C
0BC58:  CLRF   x2D
0BC5A:  CLRF   x2E
0BC5C:  CLRF   x2F
0BC5E:  CLRF   x30
0BC60:  CLRF   x31
0BC62:  CLRF   x32
0BC64:  CLRF   x33
0BC66:  CLRF   x34
0BC68:  CLRF   x35
0BC6A:  CLRF   x36
0BC6C:  CLRF   x37
0BC6E:  CLRF   x38
0BC70:  CLRF   x39
0BC72:  CLRF   x3A
0BC74:  CLRF   x3B
0BC76:  CLRF   x3C
0BC78:  CLRF   x3D
0BC7A:  CLRF   x3E
0BC7C:  CLRF   x3F
0BC7E:  CLRF   x40
0BC80:  CLRF   x41
0BC82:  CLRF   x42
0BC84:  CLRF   x43
0BC86:  CLRF   x44
0BC88:  CLRF   x45
0BC8A:  CLRF   x46
0BC8C:  CLRF   x47
0BC8E:  CLRF   x48
0BC90:  CLRF   x49
0BC92:  CLRF   x4A
0BC94:  CLRF   x4B
0BC96:  CLRF   x4C
0BC98:  CLRF   x4D
0BC9A:  CLRF   x4E
0BC9C:  CLRF   x4F
0BC9E:  CLRF   x50
0BCA0:  CLRF   x51
0BCA2:  CLRF   x52
0BCA4:  CLRF   x53
0BCA6:  CLRF   x54
0BCA8:  CLRF   x55
0BCAA:  CLRF   x56
0BCAC:  CLRF   x57
0BCAE:  CLRF   x58
0BCB0:  CLRF   x59
0BCB2:  CLRF   x5A
0BCB4:  CLRF   x5B
0BCB6:  CLRF   x5C
0BCB8:  CLRF   x5D
0BCBA:  CLRF   x5E
0BCBC:  CLRF   x5F
0BCBE:  CLRF   x60
0BCC0:  CLRF   x61
0BCC2:  CLRF   x62
0BCC4:  CLRF   x63
0BCC6:  CLRF   x64
0BCC8:  CLRF   x65
0BCCA:  CLRF   x66
0BCCC:  CLRF   x67
0BCCE:  CLRF   x68
0BCD0:  CLRF   x69
0BCD2:  CLRF   x6A
0BCD4:  CLRF   x6B
0BCD6:  CLRF   x6C
0BCD8:  CLRF   x6D
0BCDA:  CLRF   x6E
0BCDC:  CLRF   x6F
0BCDE:  CLRF   x70
0BCE0:  CLRF   x71
0BCE2:  CLRF   x72
0BCE4:  CLRF   x73
0BCE6:  CLRF   x74
0BCE8:  CLRF   x75
0BCEA:  CLRF   x76
0BCEC:  CLRF   x77
0BCEE:  CLRF   x78
0BCF0:  CLRF   x79
0BCF2:  CLRF   x7A
0BCF4:  CLRF   x7B
0BCF6:  CLRF   x7C
0BCF8:  CLRF   x7D
0BCFA:  CLRF   x7E
0BCFC:  CLRF   x7F
0BCFE:  CLRF   x80
0BD00:  CLRF   x81
0BD02:  CLRF   x82
0BD04:  CLRF   x83
0BD06:  CLRF   x84
0BD08:  CLRF   x85
0BD0A:  CLRF   x86
0BD0C:  CLRF   x87
0BD0E:  CLRF   x88
0BD10:  CLRF   x89
0BD12:  CLRF   x8A
0BD14:  CLRF   x8B
0BD16:  CLRF   x8C
0BD18:  CLRF   x8D
0BD1A:  CLRF   x8E
0BD1C:  CLRF   x8F
0BD1E:  CLRF   x90
0BD20:  CLRF   x91
0BD22:  CLRF   x92
0BD24:  CLRF   x93
0BD26:  CLRF   x94
0BD28:  CLRF   x95
0BD2A:  CLRF   x96
0BD2C:  CLRF   x97
0BD2E:  CLRF   x98
0BD30:  CLRF   x99
0BD32:  CLRF   x9A
0BD34:  CLRF   x9B
0BD36:  CLRF   x9C
0BD38:  CLRF   x9D
0BD3A:  CLRF   x9E
0BD3C:  CLRF   x9F
0BD3E:  CLRF   xA0
0BD40:  CLRF   xA1
0BD42:  CLRF   xA2
0BD44:  CLRF   xA3
0BD46:  CLRF   xA4
0BD48:  CLRF   xA5
0BD4A:  CLRF   xA6
0BD4C:  CLRF   xA7
0BD4E:  CLRF   xA8
0BD50:  CLRF   xA9
0BD52:  CLRF   xAA
0BD54:  CLRF   xAB
0BD56:  CLRF   xAC
0BD58:  CLRF   xAD
0BD5A:  CLRF   xAE
0BD5C:  CLRF   xAF
0BD5E:  CLRF   xB0
0BD60:  CLRF   xB1
0BD62:  CLRF   xB2
0BD64:  CLRF   xB3
0BD66:  CLRF   xB4
0BD68:  CLRF   xB5
0BD6A:  CLRF   xB6
0BD6C:  CLRF   xB7
0BD6E:  CLRF   xB8
0BD70:  CLRF   xB9
0BD72:  CLRF   xBA
0BD74:  CLRF   xBB
0BD76:  CLRF   xBC
0BD78:  CLRF   xBD
0BD7A:  CLRF   xBE
0BD7C:  CLRF   xBF
0BD7E:  CLRF   xC0
0BD80:  CLRF   xC1
0BD82:  CLRF   xC2
0BD84:  CLRF   xC3
0BD86:  CLRF   xC4
0BD88:  CLRF   xC5
0BD8A:  CLRF   xC6
0BD8C:  CLRF   xC7
0BD8E:  CLRF   xC8
0BD90:  CLRF   xC9
0BD92:  CLRF   xCA
0BD94:  CLRF   xCB
0BD96:  CLRF   xCC
0BD98:  CLRF   xCD
0BD9A:  CLRF   xCE
0BD9C:  CLRF   xCF
0BD9E:  CLRF   xD0
0BDA0:  CLRF   xD1
0BDA2:  CLRF   xD2
0BDA4:  CLRF   xD3
0BDA6:  CLRF   xD4
0BDA8:  CLRF   xD5
0BDAA:  CLRF   xD6
0BDAC:  CLRF   xD7
0BDAE:  CLRF   xD8
0BDB0:  CLRF   xD9
0BDB2:  CLRF   xDA
0BDB4:  CLRF   xDB
0BDB6:  CLRF   xDC
0BDB8:  CLRF   xDD
0BDBA:  CLRF   xDE
0BDBC:  CLRF   xDF
0BDBE:  CLRF   xE0
0BDC0:  CLRF   xE1
0BDC2:  CLRF   xE2
0BDC4:  CLRF   xE3
0BDC6:  CLRF   xE4
0BDC8:  CLRF   xE5
0BDCA:  CLRF   xE6
0BDCC:  CLRF   xE7
0BDCE:  CLRF   xE8
0BDD0:  CLRF   xE9
0BDD2:  CLRF   xEA
0BDD4:  CLRF   xEB
0BDD6:  CLRF   xEC
0BDD8:  CLRF   xED
0BDDA:  CLRF   xEE
0BDDC:  CLRF   xEF
0BDDE:  CLRF   xF0
0BDE0:  CLRF   xF1
0BDE2:  CLRF   xF2
0BDE4:  CLRF   xF3
0BDE6:  CLRF   xF4
0BDE8:  CLRF   xF5
0BDEA:  CLRF   xF6
0BDEC:  CLRF   xF7
0BDEE:  CLRF   xF8
0BDF0:  CLRF   xF9
0BDF2:  CLRF   xFA
0BDF4:  CLRF   xFB
0BDF6:  CLRF   xFC
0BDF8:  CLRF   xFD
0BDFA:  CLRF   xFE
0BDFC:  CLRF   xFF
0BDFE:  MOVLB  A
0BE00:  CLRF   x00
0BE02:  CLRF   x01
0BE04:  CLRF   x02
0BE06:  CLRF   x03
0BE08:  CLRF   x04
0BE0A:  CLRF   x05
0BE0C:  CLRF   x06
0BE0E:  CLRF   x07
0BE10:  CLRF   x08
0BE12:  CLRF   x09
0BE14:  CLRF   x0A
0BE16:  CLRF   x0B
0BE18:  CLRF   x0C
0BE1A:  CLRF   x0D
0BE1C:  CLRF   x0E
0BE1E:  CLRF   x0F
0BE20:  CLRF   x10
0BE22:  CLRF   x11
0BE24:  CLRF   x12
0BE26:  CLRF   x13
0BE28:  CLRF   x14
0BE2A:  CLRF   x15
0BE2C:  CLRF   x16
0BE2E:  CLRF   x17
0BE30:  CLRF   x18
0BE32:  CLRF   x19
0BE34:  CLRF   x1A
0BE36:  CLRF   x1B
0BE38:  CLRF   x1C
0BE3A:  CLRF   x1D
0BE3C:  CLRF   x1E
0BE3E:  CLRF   x1F
0BE40:  CLRF   x20
0BE42:  CLRF   x21
0BE44:  CLRF   x22
0BE46:  CLRF   x23
0BE48:  CLRF   x24
0BE4A:  CLRF   x25
0BE4C:  CLRF   x26
0BE4E:  CLRF   x27
0BE50:  CLRF   x28
0BE52:  CLRF   x29
0BE54:  CLRF   x2A
0BE56:  CLRF   x2B
0BE58:  CLRF   x2C
0BE5A:  CLRF   x2D
0BE5C:  CLRF   x2E
0BE5E:  CLRF   x2F
0BE60:  CLRF   x30
0BE62:  CLRF   x31
0BE64:  CLRF   x32
0BE66:  CLRF   x33
0BE68:  CLRF   x34
0BE6A:  CLRF   x35
0BE6C:  CLRF   x36
0BE6E:  CLRF   x37
0BE70:  CLRF   x38
0BE72:  CLRF   x39
0BE74:  CLRF   x3A
0BE76:  CLRF   x3B
0BE78:  CLRF   x3C
0BE7A:  CLRF   x3D
0BE7C:  CLRF   x3E
0BE7E:  CLRF   x3F
0BE80:  CLRF   x40
0BE82:  CLRF   x41
0BE84:  CLRF   x42
0BE86:  CLRF   x43
0BE88:  CLRF   x44
0BE8A:  CLRF   x45
0BE8C:  CLRF   x46
....................     port2.port_num = 2; 
0BE8E:  MOVLW  02
0BE90:  MOVLB  6
0BE92:  MOVWF  x47
....................     port2.sweep_step = 0;
0BE94:  CLRF   x49
0BE96:  CLRF   x48
....................     port2.active = 1;
0BE98:  MOVLB  A
0BE9A:  BSF    x46.0
.................... 
....................     int16 count = 1;
....................     iv_env_t measured_data = create_meas_data();
0BE9C:  CLRF   x48
0BE9E:  MOVLW  01
0BEA0:  MOVWF  x47
0BEA2:  MOVLB  0
0BEA4:  CALL   7F92
0BEA8:  MOVFF  02,03
0BEAC:  MOVF   01,W
0BEAE:  MOVWF  FE1
0BEB0:  MOVFF  03,FE2
0BEB4:  MOVLW  0A
0BEB6:  MOVWF  FEA
0BEB8:  MOVLW  49
0BEBA:  MOVWF  FE9
0BEBC:  MOVLW  0C
0BEBE:  MOVWF  01
0BEC0:  MOVFF  FE6,FEE
0BEC4:  DECFSZ 01,F
0BEC6:  GOTO   BEC0
.................... 
....................     while (port1.active || port2.active)
0BECA:  MOVLB  6
0BECC:  BTFSS  x46.0
0BECE:  BRA    BED6
0BED0:  MOVLB  0
0BED2:  GOTO   BEE6
0BED6:  MOVLB  0
0BED8:  MOVLB  A
0BEDA:  BTFSC  x46.0
0BEDC:  BRA    BEE4
0BEDE:  MOVLB  0
0BEE0:  GOTO   C288
0BEE4:  MOVLB  0
....................     {
....................         // 出力設定
....................         if (port1.active) {
0BEE6:  MOVLB  6
0BEE8:  BTFSC  x46.0
0BEEA:  BRA    BEF2
0BEEC:  MOVLB  0
0BEEE:  GOTO   BF04
0BEF2:  MOVLB  0
....................             mcp4901_1_write(count);
0BEF4:  MOVFF  A48,A64
0BEF8:  MOVFF  A47,A63
0BEFC:  CALL   24D0
....................         } else {
0BF00:  GOTO   BF10
....................             mcp4901_1_write(0);  // 閾値到達後は0出力
0BF04:  MOVLB  A
0BF06:  CLRF   x64
0BF08:  CLRF   x63
0BF0A:  MOVLB  0
0BF0C:  CALL   24D0
....................         }
.................... 
....................         if (port2.active) {
0BF10:  MOVLB  A
0BF12:  BTFSC  x46.0
0BF14:  BRA    BF1C
0BF16:  MOVLB  0
0BF18:  GOTO   BF2E
0BF1C:  MOVLB  0
....................             mcp4901_2_write(count);
0BF1E:  MOVFF  A48,A64
0BF22:  MOVFF  A47,A63
0BF26:  CALL   2512
....................         } else {
0BF2A:  GOTO   BF3A
....................             mcp4901_2_write(0);
0BF2E:  MOVLB  A
0BF30:  CLRF   x64
0BF32:  CLRF   x63
0BF34:  MOVLB  0
0BF36:  CALL   2512
....................         }
.................... 
....................         delay_us(100);
0BF3A:  MOVLW  85
0BF3C:  MOVWF  00
0BF3E:  DECFSZ 00,F
0BF40:  BRA    BF3E
.................... 
....................         // データ取得
....................         if (port1.active) {
0BF42:  MOVLB  6
0BF44:  BTFSC  x46.0
0BF46:  BRA    BF4E
0BF48:  MOVLB  0
0BF4A:  GOTO   C12C
0BF4E:  MOVLB  0
....................             port1.data_buffer[count].voltage = ad7490_read(ADC_CIGS1_AMP);
0BF50:  MOVLB  A
0BF52:  RLCF   x47,W
0BF54:  MOVWF  02
0BF56:  RLCF   x48,W
0BF58:  MOVWF  03
0BF5A:  RLCF   02,F
0BF5C:  RLCF   03,F
0BF5E:  MOVLW  FC
0BF60:  ANDWF  02,F
0BF62:  MOVF   02,W
0BF64:  ADDLW  4A
0BF66:  MOVWF  01
0BF68:  MOVLW  02
0BF6A:  ADDWFC 03,F
0BF6C:  MOVF   01,W
0BF6E:  MOVWF  x57
0BF70:  MOVFF  03,A58
0BF74:  MOVLW  02
0BF76:  MOVWF  x75
0BF78:  MOVLB  0
0BF7A:  CALL   20FC
0BF7E:  MOVFF  A58,FEA
0BF82:  MOVFF  A57,FE9
0BF86:  MOVFF  02,FEC
0BF8A:  MOVF   FED,F
0BF8C:  MOVFF  01,FEF
....................             port1.data_buffer[count].current = ad7490_read(ADC_CIGS1_CURR);
0BF90:  MOVLB  A
0BF92:  RLCF   x47,W
0BF94:  MOVWF  02
0BF96:  RLCF   x48,W
0BF98:  MOVWF  03
0BF9A:  RLCF   02,F
0BF9C:  RLCF   03,F
0BF9E:  MOVLW  FC
0BFA0:  ANDWF  02,F
0BFA2:  MOVF   02,W
0BFA4:  ADDLW  03
0BFA6:  MOVWF  x55
0BFA8:  MOVLW  00
0BFAA:  ADDWFC 03,W
0BFAC:  MOVWF  x56
0BFAE:  MOVLW  02
0BFB0:  ADDWF  x55,W
0BFB2:  MOVWF  01
0BFB4:  MOVLW  00
0BFB6:  ADDWFC x56,W
0BFB8:  MOVWF  03
0BFBA:  MOVF   01,W
0BFBC:  ADDLW  47
0BFBE:  MOVWF  01
0BFC0:  MOVLW  02
0BFC2:  ADDWFC 03,F
0BFC4:  MOVF   01,W
0BFC6:  MOVWF  x55
0BFC8:  MOVFF  03,A56
0BFCC:  MOVLW  01
0BFCE:  MOVWF  x75
0BFD0:  MOVLB  0
0BFD2:  CALL   20FC
0BFD6:  MOVFF  A56,FEA
0BFDA:  MOVFF  A55,FE9
0BFDE:  MOVFF  02,FEC
0BFE2:  MOVF   FED,F
0BFE4:  MOVFF  01,FEF
....................             fprintf(PC, "%04LX,%04LX,", port1.data_buffer[count].voltage, port1.data_buffer[count].current);  
0BFE8:  MOVLB  A
0BFEA:  RLCF   x47,W
0BFEC:  MOVWF  02
0BFEE:  RLCF   x48,W
0BFF0:  MOVWF  03
0BFF2:  RLCF   02,F
0BFF4:  RLCF   03,F
0BFF6:  MOVLW  FC
0BFF8:  ANDWF  02,F
0BFFA:  MOVF   02,W
0BFFC:  ADDLW  4A
0BFFE:  MOVWF  FE9
0C000:  MOVLW  02
0C002:  ADDWFC 03,W
0C004:  MOVWF  FEA
0C006:  MOVFF  FEC,A58
0C00A:  MOVF   FED,F
0C00C:  MOVFF  FEF,A57
0C010:  RLCF   x47,W
0C012:  MOVWF  02
0C014:  RLCF   x48,W
0C016:  MOVWF  03
0C018:  RLCF   02,F
0C01A:  RLCF   03,F
0C01C:  MOVLW  FC
0C01E:  ANDWF  02,F
0C020:  MOVF   02,W
0C022:  ADDLW  03
0C024:  MOVWF  x59
0C026:  MOVLW  00
0C028:  ADDWFC 03,W
0C02A:  MOVWF  x5A
0C02C:  MOVLW  02
0C02E:  ADDWF  x59,W
0C030:  MOVWF  01
0C032:  MOVLW  00
0C034:  ADDWFC x5A,W
0C036:  MOVWF  03
0C038:  MOVF   01,W
0C03A:  ADDLW  47
0C03C:  MOVWF  FE9
0C03E:  MOVLW  02
0C040:  ADDWFC 03,W
0C042:  MOVWF  FEA
0C044:  MOVFF  FEC,A5A
0C048:  MOVF   FED,F
0C04A:  MOVFF  FEF,A59
0C04E:  MOVFF  A58,B4B
0C052:  MOVLW  37
0C054:  MOVLB  B
0C056:  MOVWF  x4C
0C058:  MOVLB  0
0C05A:  CALL   2188
0C05E:  MOVFF  A57,B4B
0C062:  MOVLW  37
0C064:  MOVLB  B
0C066:  MOVWF  x4C
0C068:  MOVLB  0
0C06A:  CALL   2188
0C06E:  MOVLW  2C
0C070:  BTFSS  FA6.6
0C072:  GOTO   C070
0C076:  MOVLB  E
0C078:  MOVWF  xF9
0C07A:  MOVFF  A5A,B4B
0C07E:  MOVLW  37
0C080:  MOVLB  B
0C082:  MOVWF  x4C
0C084:  MOVLB  0
0C086:  CALL   2188
0C08A:  MOVFF  A59,B4B
0C08E:  MOVLW  37
0C090:  MOVLB  B
0C092:  MOVWF  x4C
0C094:  MOVLB  0
0C096:  CALL   2188
0C09A:  MOVLW  2C
0C09C:  BTFSS  FA6.6
0C09E:  GOTO   C09C
0C0A2:  MOVLB  E
0C0A4:  MOVWF  xF9
....................             port1.sweep_step = count + 1;
0C0A6:  MOVLW  01
0C0A8:  MOVLB  A
0C0AA:  ADDWF  x47,W
0C0AC:  MOVLB  2
0C0AE:  MOVWF  x48
0C0B0:  MOVLW  00
0C0B2:  MOVLB  A
0C0B4:  ADDWFC x48,W
0C0B6:  MOVLB  2
0C0B8:  MOVWF  x49
....................             if (port1.data_buffer[count].current < curr_limit) {
0C0BA:  MOVLB  A
0C0BC:  RLCF   x47,W
0C0BE:  MOVWF  02
0C0C0:  RLCF   x48,W
0C0C2:  MOVWF  03
0C0C4:  RLCF   02,F
0C0C6:  RLCF   03,F
0C0C8:  MOVLW  FC
0C0CA:  ANDWF  02,F
0C0CC:  MOVF   02,W
0C0CE:  ADDLW  03
0C0D0:  MOVWF  x55
0C0D2:  MOVLW  00
0C0D4:  ADDWFC 03,W
0C0D6:  MOVWF  x56
0C0D8:  MOVLW  02
0C0DA:  ADDWF  x55,W
0C0DC:  MOVWF  01
0C0DE:  MOVLW  00
0C0E0:  ADDWFC x56,W
0C0E2:  MOVWF  03
0C0E4:  MOVF   01,W
0C0E6:  ADDLW  47
0C0E8:  MOVWF  FE9
0C0EA:  MOVLW  02
0C0EC:  ADDWFC 03,W
0C0EE:  MOVWF  FEA
0C0F0:  MOVFF  FEC,A56
0C0F4:  MOVF   FED,F
0C0F6:  MOVFF  FEF,A55
0C0FA:  MOVF   x56,W
0C0FC:  MOVLB  2
0C0FE:  SUBWF  x46,W
0C100:  BTFSC  FD8.0
0C102:  BRA    C10A
0C104:  MOVLB  0
0C106:  GOTO   C12C
0C10A:  MOVLB  0
0C10C:  BTFSS  FD8.2
0C10E:  GOTO   C126
0C112:  MOVLB  2
0C114:  MOVF   x45,W
0C116:  MOVLB  A
0C118:  SUBWF  x55,W
0C11A:  BTFSS  FD8.0
0C11C:  BRA    C124
0C11E:  MOVLB  0
0C120:  GOTO   C12C
0C124:  MOVLB  0
....................                 port1.active = 0;  // 閾値到達で測定終了
0C126:  MOVLB  6
0C128:  BCF    x46.0
0C12A:  MOVLB  0
....................             }
....................         }
.................... 
....................         if (port2.active) {
0C12C:  MOVLB  A
0C12E:  BTFSC  x46.0
0C130:  BRA    C138
0C132:  MOVLB  0
0C134:  GOTO   C258
0C138:  MOVLB  0
....................             port2.data_buffer[count].voltage = ad7490_read(ADC_CIGS2_AMP);
0C13A:  MOVLB  A
0C13C:  RLCF   x47,W
0C13E:  MOVWF  02
0C140:  RLCF   x48,W
0C142:  MOVWF  03
0C144:  RLCF   02,F
0C146:  RLCF   03,F
0C148:  MOVLW  FC
0C14A:  ANDWF  02,F
0C14C:  MOVF   02,W
0C14E:  ADDLW  4A
0C150:  MOVWF  01
0C152:  MOVLW  06
0C154:  ADDWFC 03,F
0C156:  MOVF   01,W
0C158:  MOVWF  x57
0C15A:  MOVFF  03,A58
0C15E:  MOVLW  06
0C160:  MOVWF  x75
0C162:  MOVLB  0
0C164:  CALL   20FC
0C168:  MOVFF  A58,FEA
0C16C:  MOVFF  A57,FE9
0C170:  MOVFF  02,FEC
0C174:  MOVF   FED,F
0C176:  MOVFF  01,FEF
....................             port2.data_buffer[count].current = ad7490_read(ADC_CIGS2_CURR);
0C17A:  MOVLB  A
0C17C:  RLCF   x47,W
0C17E:  MOVWF  02
0C180:  RLCF   x48,W
0C182:  MOVWF  03
0C184:  RLCF   02,F
0C186:  RLCF   03,F
0C188:  MOVLW  FC
0C18A:  ANDWF  02,F
0C18C:  MOVF   02,W
0C18E:  ADDLW  03
0C190:  MOVWF  x55
0C192:  MOVLW  00
0C194:  ADDWFC 03,W
0C196:  MOVWF  x56
0C198:  MOVLW  02
0C19A:  ADDWF  x55,W
0C19C:  MOVWF  01
0C19E:  MOVLW  00
0C1A0:  ADDWFC x56,W
0C1A2:  MOVWF  03
0C1A4:  MOVF   01,W
0C1A6:  ADDLW  47
0C1A8:  MOVWF  01
0C1AA:  MOVLW  06
0C1AC:  ADDWFC 03,F
0C1AE:  MOVF   01,W
0C1B0:  MOVWF  x55
0C1B2:  MOVFF  03,A56
0C1B6:  MOVLW  05
0C1B8:  MOVWF  x75
0C1BA:  MOVLB  0
0C1BC:  CALL   20FC
0C1C0:  MOVFF  A56,FEA
0C1C4:  MOVFF  A55,FE9
0C1C8:  MOVFF  02,FEC
0C1CC:  MOVF   FED,F
0C1CE:  MOVFF  01,FEF
....................             port2.sweep_step = count + 1;
0C1D2:  MOVLW  01
0C1D4:  MOVLB  A
0C1D6:  ADDWF  x47,W
0C1D8:  MOVLB  6
0C1DA:  MOVWF  x48
0C1DC:  MOVLW  00
0C1DE:  MOVLB  A
0C1E0:  ADDWFC x48,W
0C1E2:  MOVLB  6
0C1E4:  MOVWF  x49
....................             if (port2.data_buffer[count].current < curr_limit) {
0C1E6:  MOVLB  A
0C1E8:  RLCF   x47,W
0C1EA:  MOVWF  02
0C1EC:  RLCF   x48,W
0C1EE:  MOVWF  03
0C1F0:  RLCF   02,F
0C1F2:  RLCF   03,F
0C1F4:  MOVLW  FC
0C1F6:  ANDWF  02,F
0C1F8:  MOVF   02,W
0C1FA:  ADDLW  03
0C1FC:  MOVWF  x55
0C1FE:  MOVLW  00
0C200:  ADDWFC 03,W
0C202:  MOVWF  x56
0C204:  MOVLW  02
0C206:  ADDWF  x55,W
0C208:  MOVWF  01
0C20A:  MOVLW  00
0C20C:  ADDWFC x56,W
0C20E:  MOVWF  03
0C210:  MOVF   01,W
0C212:  ADDLW  47
0C214:  MOVWF  FE9
0C216:  MOVLW  06
0C218:  ADDWFC 03,W
0C21A:  MOVWF  FEA
0C21C:  MOVFF  FEC,A56
0C220:  MOVF   FED,F
0C222:  MOVFF  FEF,A55
0C226:  MOVF   x56,W
0C228:  MOVLB  2
0C22A:  SUBWF  x46,W
0C22C:  BTFSC  FD8.0
0C22E:  BRA    C236
0C230:  MOVLB  0
0C232:  GOTO   C258
0C236:  MOVLB  0
0C238:  BTFSS  FD8.2
0C23A:  GOTO   C252
0C23E:  MOVLB  2
0C240:  MOVF   x45,W
0C242:  MOVLB  A
0C244:  SUBWF  x55,W
0C246:  BTFSS  FD8.0
0C248:  BRA    C250
0C24A:  MOVLB  0
0C24C:  GOTO   C258
0C250:  MOVLB  0
....................                 port2.active = 0;
0C252:  MOVLB  A
0C254:  BCF    x46.0
0C256:  MOVLB  0
....................             }
....................         }
.................... 
....................         count++;
0C258:  MOVLB  A
0C25A:  INCF   x47,F
0C25C:  BTFSC  FD8.2
0C25E:  INCF   x48,F
....................         if (count >= 255) {
0C260:  MOVF   x48,F
0C262:  BTFSC  FD8.2
0C264:  BRA    C26C
0C266:  MOVLB  0
0C268:  GOTO   C280
0C26C:  MOVLB  0
0C26E:  MOVLB  A
0C270:  MOVF   x47,W
0C272:  SUBLW  FE
0C274:  BTFSS  FD8.0
0C276:  BRA    C27E
0C278:  MOVLB  0
0C27A:  GOTO   C284
0C27E:  MOVLB  0
....................             break;
0C280:  GOTO   C288
....................         }
0C284:  GOTO   BECA
....................     }
.................... 
....................     fprintf(PC, "sweep step : %04LX\r\n", count);
0C288:  MOVLW  FE
0C28A:  MOVWF  FF6
0C28C:  MOVLW  05
0C28E:  MOVWF  FF7
0C290:  MOVLW  00
0C292:  MOVWF  FF8
0C294:  MOVLW  0D
0C296:  MOVLB  B
0C298:  MOVWF  x4A
0C29A:  MOVLB  0
0C29C:  CALL   1F74
0C2A0:  MOVFF  A48,B4B
0C2A4:  MOVLW  37
0C2A6:  MOVLB  B
0C2A8:  MOVWF  x4C
0C2AA:  MOVLB  0
0C2AC:  CALL   2188
0C2B0:  MOVFF  A47,B4B
0C2B4:  MOVLW  37
0C2B6:  MOVLB  B
0C2B8:  MOVWF  x4C
0C2BA:  MOVLB  0
0C2BC:  CALL   2188
0C2C0:  MOVLW  0D
0C2C2:  BTFSS  FA6.6
0C2C4:  GOTO   C2C2
0C2C8:  MOVLB  E
0C2CA:  MOVWF  xF9
0C2CC:  MOVLW  0A
0C2CE:  MOVLB  0
0C2D0:  BTFSS  FA6.6
0C2D2:  GOTO   C2D0
0C2D6:  MOVLB  E
0C2D8:  MOVWF  xF9
.................... 
....................     // 接続は維持
....................     fprintf(PC, "\r\nport1\r\n");
0C2DA:  MOVLW  14
0C2DC:  MOVWF  FF6
0C2DE:  MOVLW  06
0C2E0:  MOVWF  FF7
0C2E2:  MOVLW  00
0C2E4:  MOVWF  FF8
0C2E6:  MOVLB  0
0C2E8:  CALL   1F3E
....................     log_meas_data_with_print(&measured_data, &port1);
0C2EC:  MOVLW  0A
0C2EE:  MOVLB  A
0C2F0:  MOVWF  x56
0C2F2:  MOVLW  49
0C2F4:  MOVWF  x55
0C2F6:  MOVLW  02
0C2F8:  MOVWF  x58
0C2FA:  MOVLW  47
0C2FC:  MOVWF  x57
0C2FE:  MOVLB  0
0C300:  CALL   A1FC
....................     fprintf(PC, "\r\nport2\r\n");
0C304:  MOVLW  1E
0C306:  MOVWF  FF6
0C308:  MOVLW  06
0C30A:  MOVWF  FF7
0C30C:  MOVLW  00
0C30E:  MOVWF  FF8
0C310:  CALL   1F3E
....................     log_meas_data_with_print(&measured_data, &port2);
0C314:  MOVLW  0A
0C316:  MOVLB  A
0C318:  MOVWF  x56
0C31A:  MOVLW  49
0C31C:  MOVWF  x55
0C31E:  MOVLW  06
0C320:  MOVWF  x58
0C322:  MOVLW  47
0C324:  MOVWF  x57
0C326:  MOVLB  0
0C328:  CALL   A1FC
0C32C:  GOTO   C5F0 (RETURN)
.................... }
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_limit)
.................... {
....................     fprintf(PC, ".");
*
0874C:  MOVLW  2E
0874E:  BTFSS  FA6.6
08750:  GOTO   874E
08754:  MOVLB  E
08756:  MOVWF  xF9
....................     // Enable both CIGS ports
....................     connect_port1();
08758:  MOVLB  0
0875A:  CALL   4ED0
....................     connect_port2();
0875E:  CALL   4ED8
.................... 
....................     // delay_us(100); // wait for the CIGS to stabilize
.................... 
....................     // Init Port1
....................     sweep_config_t port1 = {0};
08762:  MOVLB  2
08764:  CLRF   x55
08766:  CLRF   x56
08768:  CLRF   x57
0876A:  CLRF   x58
0876C:  CLRF   x59
0876E:  CLRF   x5A
08770:  CLRF   x5B
08772:  CLRF   x5C
08774:  CLRF   x5D
08776:  CLRF   x5E
08778:  CLRF   x5F
0877A:  CLRF   x60
0877C:  CLRF   x61
0877E:  CLRF   x62
08780:  CLRF   x63
08782:  CLRF   x64
08784:  CLRF   x65
08786:  CLRF   x66
08788:  CLRF   x67
0878A:  CLRF   x68
0878C:  CLRF   x69
0878E:  CLRF   x6A
08790:  CLRF   x6B
08792:  CLRF   x6C
08794:  CLRF   x6D
08796:  CLRF   x6E
08798:  CLRF   x6F
0879A:  CLRF   x70
0879C:  CLRF   x71
0879E:  CLRF   x72
087A0:  CLRF   x73
087A2:  CLRF   x74
087A4:  CLRF   x75
087A6:  CLRF   x76
087A8:  CLRF   x77
087AA:  CLRF   x78
087AC:  CLRF   x79
087AE:  CLRF   x7A
087B0:  CLRF   x7B
087B2:  CLRF   x7C
087B4:  CLRF   x7D
087B6:  CLRF   x7E
087B8:  CLRF   x7F
087BA:  CLRF   x80
087BC:  CLRF   x81
087BE:  CLRF   x82
087C0:  CLRF   x83
087C2:  CLRF   x84
087C4:  CLRF   x85
087C6:  CLRF   x86
087C8:  CLRF   x87
087CA:  CLRF   x88
087CC:  CLRF   x89
087CE:  CLRF   x8A
087D0:  CLRF   x8B
087D2:  CLRF   x8C
087D4:  CLRF   x8D
087D6:  CLRF   x8E
087D8:  CLRF   x8F
087DA:  CLRF   x90
087DC:  CLRF   x91
087DE:  CLRF   x92
087E0:  CLRF   x93
087E2:  CLRF   x94
087E4:  CLRF   x95
087E6:  CLRF   x96
087E8:  CLRF   x97
087EA:  CLRF   x98
087EC:  CLRF   x99
087EE:  CLRF   x9A
087F0:  CLRF   x9B
087F2:  CLRF   x9C
087F4:  CLRF   x9D
087F6:  CLRF   x9E
087F8:  CLRF   x9F
087FA:  CLRF   xA0
087FC:  CLRF   xA1
087FE:  CLRF   xA2
08800:  CLRF   xA3
08802:  CLRF   xA4
08804:  CLRF   xA5
08806:  CLRF   xA6
08808:  CLRF   xA7
0880A:  CLRF   xA8
0880C:  CLRF   xA9
0880E:  CLRF   xAA
08810:  CLRF   xAB
08812:  CLRF   xAC
08814:  CLRF   xAD
08816:  CLRF   xAE
08818:  CLRF   xAF
0881A:  CLRF   xB0
0881C:  CLRF   xB1
0881E:  CLRF   xB2
08820:  CLRF   xB3
08822:  CLRF   xB4
08824:  CLRF   xB5
08826:  CLRF   xB6
08828:  CLRF   xB7
0882A:  CLRF   xB8
0882C:  CLRF   xB9
0882E:  CLRF   xBA
08830:  CLRF   xBB
08832:  CLRF   xBC
08834:  CLRF   xBD
08836:  CLRF   xBE
08838:  CLRF   xBF
0883A:  CLRF   xC0
0883C:  CLRF   xC1
0883E:  CLRF   xC2
08840:  CLRF   xC3
08842:  CLRF   xC4
08844:  CLRF   xC5
08846:  CLRF   xC6
08848:  CLRF   xC7
0884A:  CLRF   xC8
0884C:  CLRF   xC9
0884E:  CLRF   xCA
08850:  CLRF   xCB
08852:  CLRF   xCC
08854:  CLRF   xCD
08856:  CLRF   xCE
08858:  CLRF   xCF
0885A:  CLRF   xD0
0885C:  CLRF   xD1
0885E:  CLRF   xD2
08860:  CLRF   xD3
08862:  CLRF   xD4
08864:  CLRF   xD5
08866:  CLRF   xD6
08868:  CLRF   xD7
0886A:  CLRF   xD8
0886C:  CLRF   xD9
0886E:  CLRF   xDA
08870:  CLRF   xDB
08872:  CLRF   xDC
08874:  CLRF   xDD
08876:  CLRF   xDE
08878:  CLRF   xDF
0887A:  CLRF   xE0
0887C:  CLRF   xE1
0887E:  CLRF   xE2
08880:  CLRF   xE3
08882:  CLRF   xE4
08884:  CLRF   xE5
08886:  CLRF   xE6
08888:  CLRF   xE7
0888A:  CLRF   xE8
0888C:  CLRF   xE9
0888E:  CLRF   xEA
08890:  CLRF   xEB
08892:  CLRF   xEC
08894:  CLRF   xED
08896:  CLRF   xEE
08898:  CLRF   xEF
0889A:  CLRF   xF0
0889C:  CLRF   xF1
0889E:  CLRF   xF2
088A0:  CLRF   xF3
088A2:  CLRF   xF4
088A4:  CLRF   xF5
088A6:  CLRF   xF6
088A8:  CLRF   xF7
088AA:  CLRF   xF8
088AC:  CLRF   xF9
088AE:  CLRF   xFA
088B0:  CLRF   xFB
088B2:  CLRF   xFC
088B4:  CLRF   xFD
088B6:  CLRF   xFE
088B8:  CLRF   xFF
088BA:  MOVLB  3
088BC:  CLRF   x00
088BE:  CLRF   x01
088C0:  CLRF   x02
088C2:  CLRF   x03
088C4:  CLRF   x04
088C6:  CLRF   x05
088C8:  CLRF   x06
088CA:  CLRF   x07
088CC:  CLRF   x08
088CE:  CLRF   x09
088D0:  CLRF   x0A
088D2:  CLRF   x0B
088D4:  CLRF   x0C
088D6:  CLRF   x0D
088D8:  CLRF   x0E
088DA:  CLRF   x0F
088DC:  CLRF   x10
088DE:  CLRF   x11
088E0:  CLRF   x12
088E2:  CLRF   x13
088E4:  CLRF   x14
088E6:  CLRF   x15
088E8:  CLRF   x16
088EA:  CLRF   x17
088EC:  CLRF   x18
088EE:  CLRF   x19
088F0:  CLRF   x1A
088F2:  CLRF   x1B
088F4:  CLRF   x1C
088F6:  CLRF   x1D
088F8:  CLRF   x1E
088FA:  CLRF   x1F
088FC:  CLRF   x20
088FE:  CLRF   x21
08900:  CLRF   x22
08902:  CLRF   x23
08904:  CLRF   x24
08906:  CLRF   x25
08908:  CLRF   x26
0890A:  CLRF   x27
0890C:  CLRF   x28
0890E:  CLRF   x29
08910:  CLRF   x2A
08912:  CLRF   x2B
08914:  CLRF   x2C
08916:  CLRF   x2D
08918:  CLRF   x2E
0891A:  CLRF   x2F
0891C:  CLRF   x30
0891E:  CLRF   x31
08920:  CLRF   x32
08922:  CLRF   x33
08924:  CLRF   x34
08926:  CLRF   x35
08928:  CLRF   x36
0892A:  CLRF   x37
0892C:  CLRF   x38
0892E:  CLRF   x39
08930:  CLRF   x3A
08932:  CLRF   x3B
08934:  CLRF   x3C
08936:  CLRF   x3D
08938:  CLRF   x3E
0893A:  CLRF   x3F
0893C:  CLRF   x40
0893E:  CLRF   x41
08940:  CLRF   x42
08942:  CLRF   x43
08944:  CLRF   x44
08946:  CLRF   x45
08948:  CLRF   x46
0894A:  CLRF   x47
0894C:  CLRF   x48
0894E:  CLRF   x49
08950:  CLRF   x4A
08952:  CLRF   x4B
08954:  CLRF   x4C
08956:  CLRF   x4D
08958:  CLRF   x4E
0895A:  CLRF   x4F
0895C:  CLRF   x50
0895E:  CLRF   x51
08960:  CLRF   x52
08962:  CLRF   x53
08964:  CLRF   x54
08966:  CLRF   x55
08968:  CLRF   x56
0896A:  CLRF   x57
0896C:  CLRF   x58
0896E:  CLRF   x59
08970:  CLRF   x5A
08972:  CLRF   x5B
08974:  CLRF   x5C
08976:  CLRF   x5D
08978:  CLRF   x5E
0897A:  CLRF   x5F
0897C:  CLRF   x60
0897E:  CLRF   x61
08980:  CLRF   x62
08982:  CLRF   x63
08984:  CLRF   x64
08986:  CLRF   x65
08988:  CLRF   x66
0898A:  CLRF   x67
0898C:  CLRF   x68
0898E:  CLRF   x69
08990:  CLRF   x6A
08992:  CLRF   x6B
08994:  CLRF   x6C
08996:  CLRF   x6D
08998:  CLRF   x6E
0899A:  CLRF   x6F
0899C:  CLRF   x70
0899E:  CLRF   x71
089A0:  CLRF   x72
089A2:  CLRF   x73
089A4:  CLRF   x74
089A6:  CLRF   x75
089A8:  CLRF   x76
089AA:  CLRF   x77
089AC:  CLRF   x78
089AE:  CLRF   x79
089B0:  CLRF   x7A
089B2:  CLRF   x7B
089B4:  CLRF   x7C
089B6:  CLRF   x7D
089B8:  CLRF   x7E
089BA:  CLRF   x7F
089BC:  CLRF   x80
089BE:  CLRF   x81
089C0:  CLRF   x82
089C2:  CLRF   x83
089C4:  CLRF   x84
089C6:  CLRF   x85
089C8:  CLRF   x86
089CA:  CLRF   x87
089CC:  CLRF   x88
089CE:  CLRF   x89
089D0:  CLRF   x8A
089D2:  CLRF   x8B
089D4:  CLRF   x8C
089D6:  CLRF   x8D
089D8:  CLRF   x8E
089DA:  CLRF   x8F
089DC:  CLRF   x90
089DE:  CLRF   x91
089E0:  CLRF   x92
089E2:  CLRF   x93
089E4:  CLRF   x94
089E6:  CLRF   x95
089E8:  CLRF   x96
089EA:  CLRF   x97
089EC:  CLRF   x98
089EE:  CLRF   x99
089F0:  CLRF   x9A
089F2:  CLRF   x9B
089F4:  CLRF   x9C
089F6:  CLRF   x9D
089F8:  CLRF   x9E
089FA:  CLRF   x9F
089FC:  CLRF   xA0
089FE:  CLRF   xA1
08A00:  CLRF   xA2
08A02:  CLRF   xA3
08A04:  CLRF   xA4
08A06:  CLRF   xA5
08A08:  CLRF   xA6
08A0A:  CLRF   xA7
08A0C:  CLRF   xA8
08A0E:  CLRF   xA9
08A10:  CLRF   xAA
08A12:  CLRF   xAB
08A14:  CLRF   xAC
08A16:  CLRF   xAD
08A18:  CLRF   xAE
08A1A:  CLRF   xAF
08A1C:  CLRF   xB0
08A1E:  CLRF   xB1
08A20:  CLRF   xB2
08A22:  CLRF   xB3
08A24:  CLRF   xB4
08A26:  CLRF   xB5
08A28:  CLRF   xB6
08A2A:  CLRF   xB7
08A2C:  CLRF   xB8
08A2E:  CLRF   xB9
08A30:  CLRF   xBA
08A32:  CLRF   xBB
08A34:  CLRF   xBC
08A36:  CLRF   xBD
08A38:  CLRF   xBE
08A3A:  CLRF   xBF
08A3C:  CLRF   xC0
08A3E:  CLRF   xC1
08A40:  CLRF   xC2
08A42:  CLRF   xC3
08A44:  CLRF   xC4
08A46:  CLRF   xC5
08A48:  CLRF   xC6
08A4A:  CLRF   xC7
08A4C:  CLRF   xC8
08A4E:  CLRF   xC9
08A50:  CLRF   xCA
08A52:  CLRF   xCB
08A54:  CLRF   xCC
08A56:  CLRF   xCD
08A58:  CLRF   xCE
08A5A:  CLRF   xCF
08A5C:  CLRF   xD0
08A5E:  CLRF   xD1
08A60:  CLRF   xD2
08A62:  CLRF   xD3
08A64:  CLRF   xD4
08A66:  CLRF   xD5
08A68:  CLRF   xD6
08A6A:  CLRF   xD7
08A6C:  CLRF   xD8
08A6E:  CLRF   xD9
08A70:  CLRF   xDA
08A72:  CLRF   xDB
08A74:  CLRF   xDC
08A76:  CLRF   xDD
08A78:  CLRF   xDE
08A7A:  CLRF   xDF
08A7C:  CLRF   xE0
08A7E:  CLRF   xE1
08A80:  CLRF   xE2
08A82:  CLRF   xE3
08A84:  CLRF   xE4
08A86:  CLRF   xE5
08A88:  CLRF   xE6
08A8A:  CLRF   xE7
08A8C:  CLRF   xE8
08A8E:  CLRF   xE9
08A90:  CLRF   xEA
08A92:  CLRF   xEB
08A94:  CLRF   xEC
08A96:  CLRF   xED
08A98:  CLRF   xEE
08A9A:  CLRF   xEF
08A9C:  CLRF   xF0
08A9E:  CLRF   xF1
08AA0:  CLRF   xF2
08AA2:  CLRF   xF3
08AA4:  CLRF   xF4
08AA6:  CLRF   xF5
08AA8:  CLRF   xF6
08AAA:  CLRF   xF7
08AAC:  CLRF   xF8
08AAE:  CLRF   xF9
08AB0:  CLRF   xFA
08AB2:  CLRF   xFB
08AB4:  CLRF   xFC
08AB6:  CLRF   xFD
08AB8:  CLRF   xFE
08ABA:  CLRF   xFF
08ABC:  MOVLB  4
08ABE:  CLRF   x00
08AC0:  CLRF   x01
08AC2:  CLRF   x02
08AC4:  CLRF   x03
08AC6:  CLRF   x04
08AC8:  CLRF   x05
08ACA:  CLRF   x06
08ACC:  CLRF   x07
08ACE:  CLRF   x08
08AD0:  CLRF   x09
08AD2:  CLRF   x0A
08AD4:  CLRF   x0B
08AD6:  CLRF   x0C
08AD8:  CLRF   x0D
08ADA:  CLRF   x0E
08ADC:  CLRF   x0F
08ADE:  CLRF   x10
08AE0:  CLRF   x11
08AE2:  CLRF   x12
08AE4:  CLRF   x13
08AE6:  CLRF   x14
08AE8:  CLRF   x15
08AEA:  CLRF   x16
08AEC:  CLRF   x17
08AEE:  CLRF   x18
08AF0:  CLRF   x19
08AF2:  CLRF   x1A
08AF4:  CLRF   x1B
08AF6:  CLRF   x1C
08AF8:  CLRF   x1D
08AFA:  CLRF   x1E
08AFC:  CLRF   x1F
08AFE:  CLRF   x20
08B00:  CLRF   x21
08B02:  CLRF   x22
08B04:  CLRF   x23
08B06:  CLRF   x24
08B08:  CLRF   x25
08B0A:  CLRF   x26
08B0C:  CLRF   x27
08B0E:  CLRF   x28
08B10:  CLRF   x29
08B12:  CLRF   x2A
08B14:  CLRF   x2B
08B16:  CLRF   x2C
08B18:  CLRF   x2D
08B1A:  CLRF   x2E
08B1C:  CLRF   x2F
08B1E:  CLRF   x30
08B20:  CLRF   x31
08B22:  CLRF   x32
08B24:  CLRF   x33
08B26:  CLRF   x34
08B28:  CLRF   x35
08B2A:  CLRF   x36
08B2C:  CLRF   x37
08B2E:  CLRF   x38
08B30:  CLRF   x39
08B32:  CLRF   x3A
08B34:  CLRF   x3B
08B36:  CLRF   x3C
08B38:  CLRF   x3D
08B3A:  CLRF   x3E
08B3C:  CLRF   x3F
08B3E:  CLRF   x40
08B40:  CLRF   x41
08B42:  CLRF   x42
08B44:  CLRF   x43
08B46:  CLRF   x44
08B48:  CLRF   x45
08B4A:  CLRF   x46
08B4C:  CLRF   x47
08B4E:  CLRF   x48
08B50:  CLRF   x49
08B52:  CLRF   x4A
08B54:  CLRF   x4B
08B56:  CLRF   x4C
08B58:  CLRF   x4D
08B5A:  CLRF   x4E
08B5C:  CLRF   x4F
08B5E:  CLRF   x50
08B60:  CLRF   x51
08B62:  CLRF   x52
08B64:  CLRF   x53
08B66:  CLRF   x54
08B68:  CLRF   x55
08B6A:  CLRF   x56
08B6C:  CLRF   x57
08B6E:  CLRF   x58
08B70:  CLRF   x59
08B72:  CLRF   x5A
08B74:  CLRF   x5B
08B76:  CLRF   x5C
08B78:  CLRF   x5D
08B7A:  CLRF   x5E
08B7C:  CLRF   x5F
08B7E:  CLRF   x60
08B80:  CLRF   x61
08B82:  CLRF   x62
08B84:  CLRF   x63
08B86:  CLRF   x64
08B88:  CLRF   x65
08B8A:  CLRF   x66
08B8C:  CLRF   x67
08B8E:  CLRF   x68
08B90:  CLRF   x69
08B92:  CLRF   x6A
08B94:  CLRF   x6B
08B96:  CLRF   x6C
08B98:  CLRF   x6D
08B9A:  CLRF   x6E
08B9C:  CLRF   x6F
08B9E:  CLRF   x70
08BA0:  CLRF   x71
08BA2:  CLRF   x72
08BA4:  CLRF   x73
08BA6:  CLRF   x74
08BA8:  CLRF   x75
08BAA:  CLRF   x76
08BAC:  CLRF   x77
08BAE:  CLRF   x78
08BB0:  CLRF   x79
08BB2:  CLRF   x7A
08BB4:  CLRF   x7B
08BB6:  CLRF   x7C
08BB8:  CLRF   x7D
08BBA:  CLRF   x7E
08BBC:  CLRF   x7F
08BBE:  CLRF   x80
08BC0:  CLRF   x81
08BC2:  CLRF   x82
08BC4:  CLRF   x83
08BC6:  CLRF   x84
08BC8:  CLRF   x85
08BCA:  CLRF   x86
08BCC:  CLRF   x87
08BCE:  CLRF   x88
08BD0:  CLRF   x89
08BD2:  CLRF   x8A
08BD4:  CLRF   x8B
08BD6:  CLRF   x8C
08BD8:  CLRF   x8D
08BDA:  CLRF   x8E
08BDC:  CLRF   x8F
08BDE:  CLRF   x90
08BE0:  CLRF   x91
08BE2:  CLRF   x92
08BE4:  CLRF   x93
08BE6:  CLRF   x94
08BE8:  CLRF   x95
08BEA:  CLRF   x96
08BEC:  CLRF   x97
08BEE:  CLRF   x98
08BF0:  CLRF   x99
08BF2:  CLRF   x9A
08BF4:  CLRF   x9B
08BF6:  CLRF   x9C
08BF8:  CLRF   x9D
08BFA:  CLRF   x9E
08BFC:  CLRF   x9F
08BFE:  CLRF   xA0
08C00:  CLRF   xA1
08C02:  CLRF   xA2
08C04:  CLRF   xA3
08C06:  CLRF   xA4
08C08:  CLRF   xA5
08C0A:  CLRF   xA6
08C0C:  CLRF   xA7
08C0E:  CLRF   xA8
08C10:  CLRF   xA9
08C12:  CLRF   xAA
08C14:  CLRF   xAB
08C16:  CLRF   xAC
08C18:  CLRF   xAD
08C1A:  CLRF   xAE
08C1C:  CLRF   xAF
08C1E:  CLRF   xB0
08C20:  CLRF   xB1
08C22:  CLRF   xB2
08C24:  CLRF   xB3
08C26:  CLRF   xB4
08C28:  CLRF   xB5
08C2A:  CLRF   xB6
08C2C:  CLRF   xB7
08C2E:  CLRF   xB8
08C30:  CLRF   xB9
08C32:  CLRF   xBA
08C34:  CLRF   xBB
08C36:  CLRF   xBC
08C38:  CLRF   xBD
08C3A:  CLRF   xBE
08C3C:  CLRF   xBF
08C3E:  CLRF   xC0
08C40:  CLRF   xC1
08C42:  CLRF   xC2
08C44:  CLRF   xC3
08C46:  CLRF   xC4
08C48:  CLRF   xC5
08C4A:  CLRF   xC6
08C4C:  CLRF   xC7
08C4E:  CLRF   xC8
08C50:  CLRF   xC9
08C52:  CLRF   xCA
08C54:  CLRF   xCB
08C56:  CLRF   xCC
08C58:  CLRF   xCD
08C5A:  CLRF   xCE
08C5C:  CLRF   xCF
08C5E:  CLRF   xD0
08C60:  CLRF   xD1
08C62:  CLRF   xD2
08C64:  CLRF   xD3
08C66:  CLRF   xD4
08C68:  CLRF   xD5
08C6A:  CLRF   xD6
08C6C:  CLRF   xD7
08C6E:  CLRF   xD8
08C70:  CLRF   xD9
08C72:  CLRF   xDA
08C74:  CLRF   xDB
08C76:  CLRF   xDC
08C78:  CLRF   xDD
08C7A:  CLRF   xDE
08C7C:  CLRF   xDF
08C7E:  CLRF   xE0
08C80:  CLRF   xE1
08C82:  CLRF   xE2
08C84:  CLRF   xE3
08C86:  CLRF   xE4
08C88:  CLRF   xE5
08C8A:  CLRF   xE6
08C8C:  CLRF   xE7
08C8E:  CLRF   xE8
08C90:  CLRF   xE9
08C92:  CLRF   xEA
08C94:  CLRF   xEB
08C96:  CLRF   xEC
08C98:  CLRF   xED
08C9A:  CLRF   xEE
08C9C:  CLRF   xEF
08C9E:  CLRF   xF0
08CA0:  CLRF   xF1
08CA2:  CLRF   xF2
08CA4:  CLRF   xF3
08CA6:  CLRF   xF4
08CA8:  CLRF   xF5
08CAA:  CLRF   xF6
08CAC:  CLRF   xF7
08CAE:  CLRF   xF8
08CB0:  CLRF   xF9
08CB2:  CLRF   xFA
08CB4:  CLRF   xFB
08CB6:  CLRF   xFC
08CB8:  CLRF   xFD
08CBA:  CLRF   xFE
08CBC:  CLRF   xFF
08CBE:  MOVLB  5
08CC0:  CLRF   x00
08CC2:  CLRF   x01
08CC4:  CLRF   x02
08CC6:  CLRF   x03
08CC8:  CLRF   x04
08CCA:  CLRF   x05
08CCC:  CLRF   x06
08CCE:  CLRF   x07
08CD0:  CLRF   x08
08CD2:  CLRF   x09
08CD4:  CLRF   x0A
08CD6:  CLRF   x0B
08CD8:  CLRF   x0C
08CDA:  CLRF   x0D
08CDC:  CLRF   x0E
08CDE:  CLRF   x0F
08CE0:  CLRF   x10
08CE2:  CLRF   x11
08CE4:  CLRF   x12
08CE6:  CLRF   x13
08CE8:  CLRF   x14
08CEA:  CLRF   x15
08CEC:  CLRF   x16
08CEE:  CLRF   x17
08CF0:  CLRF   x18
08CF2:  CLRF   x19
08CF4:  CLRF   x1A
08CF6:  CLRF   x1B
08CF8:  CLRF   x1C
08CFA:  CLRF   x1D
08CFC:  CLRF   x1E
08CFE:  CLRF   x1F
08D00:  CLRF   x20
08D02:  CLRF   x21
08D04:  CLRF   x22
08D06:  CLRF   x23
08D08:  CLRF   x24
08D0A:  CLRF   x25
08D0C:  CLRF   x26
08D0E:  CLRF   x27
08D10:  CLRF   x28
08D12:  CLRF   x29
08D14:  CLRF   x2A
08D16:  CLRF   x2B
08D18:  CLRF   x2C
08D1A:  CLRF   x2D
08D1C:  CLRF   x2E
08D1E:  CLRF   x2F
08D20:  CLRF   x30
08D22:  CLRF   x31
08D24:  CLRF   x32
08D26:  CLRF   x33
08D28:  CLRF   x34
08D2A:  CLRF   x35
08D2C:  CLRF   x36
08D2E:  CLRF   x37
08D30:  CLRF   x38
08D32:  CLRF   x39
08D34:  CLRF   x3A
08D36:  CLRF   x3B
08D38:  CLRF   x3C
08D3A:  CLRF   x3D
08D3C:  CLRF   x3E
08D3E:  CLRF   x3F
08D40:  CLRF   x40
08D42:  CLRF   x41
08D44:  CLRF   x42
08D46:  CLRF   x43
08D48:  CLRF   x44
08D4A:  CLRF   x45
08D4C:  CLRF   x46
08D4E:  CLRF   x47
08D50:  CLRF   x48
08D52:  CLRF   x49
08D54:  CLRF   x4A
08D56:  CLRF   x4B
08D58:  CLRF   x4C
08D5A:  CLRF   x4D
08D5C:  CLRF   x4E
08D5E:  CLRF   x4F
08D60:  CLRF   x50
08D62:  CLRF   x51
08D64:  CLRF   x52
08D66:  CLRF   x53
08D68:  CLRF   x54
08D6A:  CLRF   x55
08D6C:  CLRF   x56
08D6E:  CLRF   x57
08D70:  CLRF   x58
08D72:  CLRF   x59
08D74:  CLRF   x5A
08D76:  CLRF   x5B
08D78:  CLRF   x5C
08D7A:  CLRF   x5D
08D7C:  CLRF   x5E
08D7E:  CLRF   x5F
08D80:  CLRF   x60
08D82:  CLRF   x61
08D84:  CLRF   x62
08D86:  CLRF   x63
08D88:  CLRF   x64
08D8A:  CLRF   x65
08D8C:  CLRF   x66
08D8E:  CLRF   x67
08D90:  CLRF   x68
08D92:  CLRF   x69
08D94:  CLRF   x6A
08D96:  CLRF   x6B
08D98:  CLRF   x6C
08D9A:  CLRF   x6D
08D9C:  CLRF   x6E
08D9E:  CLRF   x6F
08DA0:  CLRF   x70
08DA2:  CLRF   x71
08DA4:  CLRF   x72
08DA6:  CLRF   x73
08DA8:  CLRF   x74
08DAA:  CLRF   x75
08DAC:  CLRF   x76
08DAE:  CLRF   x77
08DB0:  CLRF   x78
08DB2:  CLRF   x79
08DB4:  CLRF   x7A
08DB6:  CLRF   x7B
08DB8:  CLRF   x7C
08DBA:  CLRF   x7D
08DBC:  CLRF   x7E
08DBE:  CLRF   x7F
08DC0:  CLRF   x80
08DC2:  CLRF   x81
08DC4:  CLRF   x82
08DC6:  CLRF   x83
08DC8:  CLRF   x84
08DCA:  CLRF   x85
08DCC:  CLRF   x86
08DCE:  CLRF   x87
08DD0:  CLRF   x88
08DD2:  CLRF   x89
08DD4:  CLRF   x8A
08DD6:  CLRF   x8B
08DD8:  CLRF   x8C
08DDA:  CLRF   x8D
08DDC:  CLRF   x8E
08DDE:  CLRF   x8F
08DE0:  CLRF   x90
08DE2:  CLRF   x91
08DE4:  CLRF   x92
08DE6:  CLRF   x93
08DE8:  CLRF   x94
08DEA:  CLRF   x95
08DEC:  CLRF   x96
08DEE:  CLRF   x97
08DF0:  CLRF   x98
08DF2:  CLRF   x99
08DF4:  CLRF   x9A
08DF6:  CLRF   x9B
08DF8:  CLRF   x9C
08DFA:  CLRF   x9D
08DFC:  CLRF   x9E
08DFE:  CLRF   x9F
08E00:  CLRF   xA0
08E02:  CLRF   xA1
08E04:  CLRF   xA2
08E06:  CLRF   xA3
08E08:  CLRF   xA4
08E0A:  CLRF   xA5
08E0C:  CLRF   xA6
08E0E:  CLRF   xA7
08E10:  CLRF   xA8
08E12:  CLRF   xA9
08E14:  CLRF   xAA
08E16:  CLRF   xAB
08E18:  CLRF   xAC
08E1A:  CLRF   xAD
08E1C:  CLRF   xAE
08E1E:  CLRF   xAF
08E20:  CLRF   xB0
08E22:  CLRF   xB1
08E24:  CLRF   xB2
08E26:  CLRF   xB3
08E28:  CLRF   xB4
08E2A:  CLRF   xB5
08E2C:  CLRF   xB6
08E2E:  CLRF   xB7
08E30:  CLRF   xB8
08E32:  CLRF   xB9
08E34:  CLRF   xBA
08E36:  CLRF   xBB
08E38:  CLRF   xBC
08E3A:  CLRF   xBD
08E3C:  CLRF   xBE
08E3E:  CLRF   xBF
08E40:  CLRF   xC0
08E42:  CLRF   xC1
08E44:  CLRF   xC2
08E46:  CLRF   xC3
08E48:  CLRF   xC4
08E4A:  CLRF   xC5
08E4C:  CLRF   xC6
08E4E:  CLRF   xC7
08E50:  CLRF   xC8
08E52:  CLRF   xC9
08E54:  CLRF   xCA
08E56:  CLRF   xCB
08E58:  CLRF   xCC
08E5A:  CLRF   xCD
08E5C:  CLRF   xCE
08E5E:  CLRF   xCF
08E60:  CLRF   xD0
08E62:  CLRF   xD1
08E64:  CLRF   xD2
08E66:  CLRF   xD3
08E68:  CLRF   xD4
08E6A:  CLRF   xD5
08E6C:  CLRF   xD6
08E6E:  CLRF   xD7
08E70:  CLRF   xD8
08E72:  CLRF   xD9
08E74:  CLRF   xDA
08E76:  CLRF   xDB
08E78:  CLRF   xDC
08E7A:  CLRF   xDD
08E7C:  CLRF   xDE
08E7E:  CLRF   xDF
08E80:  CLRF   xE0
08E82:  CLRF   xE1
08E84:  CLRF   xE2
08E86:  CLRF   xE3
08E88:  CLRF   xE4
08E8A:  CLRF   xE5
08E8C:  CLRF   xE6
08E8E:  CLRF   xE7
08E90:  CLRF   xE8
08E92:  CLRF   xE9
08E94:  CLRF   xEA
08E96:  CLRF   xEB
08E98:  CLRF   xEC
08E9A:  CLRF   xED
08E9C:  CLRF   xEE
08E9E:  CLRF   xEF
08EA0:  CLRF   xF0
08EA2:  CLRF   xF1
08EA4:  CLRF   xF2
08EA6:  CLRF   xF3
08EA8:  CLRF   xF4
08EAA:  CLRF   xF5
08EAC:  CLRF   xF6
08EAE:  CLRF   xF7
08EB0:  CLRF   xF8
08EB2:  CLRF   xF9
08EB4:  CLRF   xFA
08EB6:  CLRF   xFB
08EB8:  CLRF   xFC
08EBA:  CLRF   xFD
08EBC:  CLRF   xFE
08EBE:  CLRF   xFF
08EC0:  MOVLB  6
08EC2:  CLRF   x00
08EC4:  CLRF   x01
08EC6:  CLRF   x02
08EC8:  CLRF   x03
08ECA:  CLRF   x04
08ECC:  CLRF   x05
08ECE:  CLRF   x06
08ED0:  CLRF   x07
08ED2:  CLRF   x08
08ED4:  CLRF   x09
08ED6:  CLRF   x0A
08ED8:  CLRF   x0B
08EDA:  CLRF   x0C
08EDC:  CLRF   x0D
08EDE:  CLRF   x0E
08EE0:  CLRF   x0F
08EE2:  CLRF   x10
08EE4:  CLRF   x11
08EE6:  CLRF   x12
08EE8:  CLRF   x13
08EEA:  CLRF   x14
08EEC:  CLRF   x15
08EEE:  CLRF   x16
08EF0:  CLRF   x17
08EF2:  CLRF   x18
08EF4:  CLRF   x19
08EF6:  CLRF   x1A
08EF8:  CLRF   x1B
08EFA:  CLRF   x1C
08EFC:  CLRF   x1D
08EFE:  CLRF   x1E
08F00:  CLRF   x1F
08F02:  CLRF   x20
08F04:  CLRF   x21
08F06:  CLRF   x22
08F08:  CLRF   x23
08F0A:  CLRF   x24
08F0C:  CLRF   x25
08F0E:  CLRF   x26
08F10:  CLRF   x27
08F12:  CLRF   x28
08F14:  CLRF   x29
08F16:  CLRF   x2A
08F18:  CLRF   x2B
08F1A:  CLRF   x2C
08F1C:  CLRF   x2D
08F1E:  CLRF   x2E
08F20:  CLRF   x2F
08F22:  CLRF   x30
08F24:  CLRF   x31
08F26:  CLRF   x32
08F28:  CLRF   x33
08F2A:  CLRF   x34
08F2C:  CLRF   x35
08F2E:  CLRF   x36
08F30:  CLRF   x37
08F32:  CLRF   x38
08F34:  CLRF   x39
08F36:  CLRF   x3A
08F38:  CLRF   x3B
08F3A:  CLRF   x3C
08F3C:  CLRF   x3D
08F3E:  CLRF   x3E
08F40:  CLRF   x3F
08F42:  CLRF   x40
08F44:  CLRF   x41
08F46:  CLRF   x42
08F48:  CLRF   x43
08F4A:  CLRF   x44
08F4C:  CLRF   x45
08F4E:  CLRF   x46
08F50:  CLRF   x47
08F52:  CLRF   x48
08F54:  CLRF   x49
08F56:  CLRF   x4A
08F58:  CLRF   x4B
08F5A:  CLRF   x4C
08F5C:  CLRF   x4D
08F5E:  CLRF   x4E
08F60:  CLRF   x4F
08F62:  CLRF   x50
08F64:  CLRF   x51
08F66:  CLRF   x52
08F68:  CLRF   x53
08F6A:  CLRF   x54
....................     port1.port_num = 1;
08F6C:  MOVLW  01
08F6E:  MOVLB  2
08F70:  MOVWF  x55
....................     port1.sweep_step = 0;
08F72:  CLRF   x57
08F74:  CLRF   x56
....................     port1.active = 1;
08F76:  MOVLB  6
08F78:  BSF    x54.0
.................... 
....................     // Init Port2
....................     sweep_config_t port2 = {0};
08F7A:  CLRF   x55
08F7C:  CLRF   x56
08F7E:  CLRF   x57
08F80:  CLRF   x58
08F82:  CLRF   x59
08F84:  CLRF   x5A
08F86:  CLRF   x5B
08F88:  CLRF   x5C
08F8A:  CLRF   x5D
08F8C:  CLRF   x5E
08F8E:  CLRF   x5F
08F90:  CLRF   x60
08F92:  CLRF   x61
08F94:  CLRF   x62
08F96:  CLRF   x63
08F98:  CLRF   x64
08F9A:  CLRF   x65
08F9C:  CLRF   x66
08F9E:  CLRF   x67
08FA0:  CLRF   x68
08FA2:  CLRF   x69
08FA4:  CLRF   x6A
08FA6:  CLRF   x6B
08FA8:  CLRF   x6C
08FAA:  CLRF   x6D
08FAC:  CLRF   x6E
08FAE:  CLRF   x6F
08FB0:  CLRF   x70
08FB2:  CLRF   x71
08FB4:  CLRF   x72
08FB6:  CLRF   x73
08FB8:  CLRF   x74
08FBA:  CLRF   x75
08FBC:  CLRF   x76
08FBE:  CLRF   x77
08FC0:  CLRF   x78
08FC2:  CLRF   x79
08FC4:  CLRF   x7A
08FC6:  CLRF   x7B
08FC8:  CLRF   x7C
08FCA:  CLRF   x7D
08FCC:  CLRF   x7E
08FCE:  CLRF   x7F
08FD0:  CLRF   x80
08FD2:  CLRF   x81
08FD4:  CLRF   x82
08FD6:  CLRF   x83
08FD8:  CLRF   x84
08FDA:  CLRF   x85
08FDC:  CLRF   x86
08FDE:  CLRF   x87
08FE0:  CLRF   x88
08FE2:  CLRF   x89
08FE4:  CLRF   x8A
08FE6:  CLRF   x8B
08FE8:  CLRF   x8C
08FEA:  CLRF   x8D
08FEC:  CLRF   x8E
08FEE:  CLRF   x8F
08FF0:  CLRF   x90
08FF2:  CLRF   x91
08FF4:  CLRF   x92
08FF6:  CLRF   x93
08FF8:  CLRF   x94
08FFA:  CLRF   x95
08FFC:  CLRF   x96
08FFE:  CLRF   x97
09000:  CLRF   x98
09002:  CLRF   x99
09004:  CLRF   x9A
09006:  CLRF   x9B
09008:  CLRF   x9C
0900A:  CLRF   x9D
0900C:  CLRF   x9E
0900E:  CLRF   x9F
09010:  CLRF   xA0
09012:  CLRF   xA1
09014:  CLRF   xA2
09016:  CLRF   xA3
09018:  CLRF   xA4
0901A:  CLRF   xA5
0901C:  CLRF   xA6
0901E:  CLRF   xA7
09020:  CLRF   xA8
09022:  CLRF   xA9
09024:  CLRF   xAA
09026:  CLRF   xAB
09028:  CLRF   xAC
0902A:  CLRF   xAD
0902C:  CLRF   xAE
0902E:  CLRF   xAF
09030:  CLRF   xB0
09032:  CLRF   xB1
09034:  CLRF   xB2
09036:  CLRF   xB3
09038:  CLRF   xB4
0903A:  CLRF   xB5
0903C:  CLRF   xB6
0903E:  CLRF   xB7
09040:  CLRF   xB8
09042:  CLRF   xB9
09044:  CLRF   xBA
09046:  CLRF   xBB
09048:  CLRF   xBC
0904A:  CLRF   xBD
0904C:  CLRF   xBE
0904E:  CLRF   xBF
09050:  CLRF   xC0
09052:  CLRF   xC1
09054:  CLRF   xC2
09056:  CLRF   xC3
09058:  CLRF   xC4
0905A:  CLRF   xC5
0905C:  CLRF   xC6
0905E:  CLRF   xC7
09060:  CLRF   xC8
09062:  CLRF   xC9
09064:  CLRF   xCA
09066:  CLRF   xCB
09068:  CLRF   xCC
0906A:  CLRF   xCD
0906C:  CLRF   xCE
0906E:  CLRF   xCF
09070:  CLRF   xD0
09072:  CLRF   xD1
09074:  CLRF   xD2
09076:  CLRF   xD3
09078:  CLRF   xD4
0907A:  CLRF   xD5
0907C:  CLRF   xD6
0907E:  CLRF   xD7
09080:  CLRF   xD8
09082:  CLRF   xD9
09084:  CLRF   xDA
09086:  CLRF   xDB
09088:  CLRF   xDC
0908A:  CLRF   xDD
0908C:  CLRF   xDE
0908E:  CLRF   xDF
09090:  CLRF   xE0
09092:  CLRF   xE1
09094:  CLRF   xE2
09096:  CLRF   xE3
09098:  CLRF   xE4
0909A:  CLRF   xE5
0909C:  CLRF   xE6
0909E:  CLRF   xE7
090A0:  CLRF   xE8
090A2:  CLRF   xE9
090A4:  CLRF   xEA
090A6:  CLRF   xEB
090A8:  CLRF   xEC
090AA:  CLRF   xED
090AC:  CLRF   xEE
090AE:  CLRF   xEF
090B0:  CLRF   xF0
090B2:  CLRF   xF1
090B4:  CLRF   xF2
090B6:  CLRF   xF3
090B8:  CLRF   xF4
090BA:  CLRF   xF5
090BC:  CLRF   xF6
090BE:  CLRF   xF7
090C0:  CLRF   xF8
090C2:  CLRF   xF9
090C4:  CLRF   xFA
090C6:  CLRF   xFB
090C8:  CLRF   xFC
090CA:  CLRF   xFD
090CC:  CLRF   xFE
090CE:  CLRF   xFF
090D0:  MOVLB  7
090D2:  CLRF   x00
090D4:  CLRF   x01
090D6:  CLRF   x02
090D8:  CLRF   x03
090DA:  CLRF   x04
090DC:  CLRF   x05
090DE:  CLRF   x06
090E0:  CLRF   x07
090E2:  CLRF   x08
090E4:  CLRF   x09
090E6:  CLRF   x0A
090E8:  CLRF   x0B
090EA:  CLRF   x0C
090EC:  CLRF   x0D
090EE:  CLRF   x0E
090F0:  CLRF   x0F
090F2:  CLRF   x10
090F4:  CLRF   x11
090F6:  CLRF   x12
090F8:  CLRF   x13
090FA:  CLRF   x14
090FC:  CLRF   x15
090FE:  CLRF   x16
09100:  CLRF   x17
09102:  CLRF   x18
09104:  CLRF   x19
09106:  CLRF   x1A
09108:  CLRF   x1B
0910A:  CLRF   x1C
0910C:  CLRF   x1D
0910E:  CLRF   x1E
09110:  CLRF   x1F
09112:  CLRF   x20
09114:  CLRF   x21
09116:  CLRF   x22
09118:  CLRF   x23
0911A:  CLRF   x24
0911C:  CLRF   x25
0911E:  CLRF   x26
09120:  CLRF   x27
09122:  CLRF   x28
09124:  CLRF   x29
09126:  CLRF   x2A
09128:  CLRF   x2B
0912A:  CLRF   x2C
0912C:  CLRF   x2D
0912E:  CLRF   x2E
09130:  CLRF   x2F
09132:  CLRF   x30
09134:  CLRF   x31
09136:  CLRF   x32
09138:  CLRF   x33
0913A:  CLRF   x34
0913C:  CLRF   x35
0913E:  CLRF   x36
09140:  CLRF   x37
09142:  CLRF   x38
09144:  CLRF   x39
09146:  CLRF   x3A
09148:  CLRF   x3B
0914A:  CLRF   x3C
0914C:  CLRF   x3D
0914E:  CLRF   x3E
09150:  CLRF   x3F
09152:  CLRF   x40
09154:  CLRF   x41
09156:  CLRF   x42
09158:  CLRF   x43
0915A:  CLRF   x44
0915C:  CLRF   x45
0915E:  CLRF   x46
09160:  CLRF   x47
09162:  CLRF   x48
09164:  CLRF   x49
09166:  CLRF   x4A
09168:  CLRF   x4B
0916A:  CLRF   x4C
0916C:  CLRF   x4D
0916E:  CLRF   x4E
09170:  CLRF   x4F
09172:  CLRF   x50
09174:  CLRF   x51
09176:  CLRF   x52
09178:  CLRF   x53
0917A:  CLRF   x54
0917C:  CLRF   x55
0917E:  CLRF   x56
09180:  CLRF   x57
09182:  CLRF   x58
09184:  CLRF   x59
09186:  CLRF   x5A
09188:  CLRF   x5B
0918A:  CLRF   x5C
0918C:  CLRF   x5D
0918E:  CLRF   x5E
09190:  CLRF   x5F
09192:  CLRF   x60
09194:  CLRF   x61
09196:  CLRF   x62
09198:  CLRF   x63
0919A:  CLRF   x64
0919C:  CLRF   x65
0919E:  CLRF   x66
091A0:  CLRF   x67
091A2:  CLRF   x68
091A4:  CLRF   x69
091A6:  CLRF   x6A
091A8:  CLRF   x6B
091AA:  CLRF   x6C
091AC:  CLRF   x6D
091AE:  CLRF   x6E
091B0:  CLRF   x6F
091B2:  CLRF   x70
091B4:  CLRF   x71
091B6:  CLRF   x72
091B8:  CLRF   x73
091BA:  CLRF   x74
091BC:  CLRF   x75
091BE:  CLRF   x76
091C0:  CLRF   x77
091C2:  CLRF   x78
091C4:  CLRF   x79
091C6:  CLRF   x7A
091C8:  CLRF   x7B
091CA:  CLRF   x7C
091CC:  CLRF   x7D
091CE:  CLRF   x7E
091D0:  CLRF   x7F
091D2:  CLRF   x80
091D4:  CLRF   x81
091D6:  CLRF   x82
091D8:  CLRF   x83
091DA:  CLRF   x84
091DC:  CLRF   x85
091DE:  CLRF   x86
091E0:  CLRF   x87
091E2:  CLRF   x88
091E4:  CLRF   x89
091E6:  CLRF   x8A
091E8:  CLRF   x8B
091EA:  CLRF   x8C
091EC:  CLRF   x8D
091EE:  CLRF   x8E
091F0:  CLRF   x8F
091F2:  CLRF   x90
091F4:  CLRF   x91
091F6:  CLRF   x92
091F8:  CLRF   x93
091FA:  CLRF   x94
091FC:  CLRF   x95
091FE:  CLRF   x96
09200:  CLRF   x97
09202:  CLRF   x98
09204:  CLRF   x99
09206:  CLRF   x9A
09208:  CLRF   x9B
0920A:  CLRF   x9C
0920C:  CLRF   x9D
0920E:  CLRF   x9E
09210:  CLRF   x9F
09212:  CLRF   xA0
09214:  CLRF   xA1
09216:  CLRF   xA2
09218:  CLRF   xA3
0921A:  CLRF   xA4
0921C:  CLRF   xA5
0921E:  CLRF   xA6
09220:  CLRF   xA7
09222:  CLRF   xA8
09224:  CLRF   xA9
09226:  CLRF   xAA
09228:  CLRF   xAB
0922A:  CLRF   xAC
0922C:  CLRF   xAD
0922E:  CLRF   xAE
09230:  CLRF   xAF
09232:  CLRF   xB0
09234:  CLRF   xB1
09236:  CLRF   xB2
09238:  CLRF   xB3
0923A:  CLRF   xB4
0923C:  CLRF   xB5
0923E:  CLRF   xB6
09240:  CLRF   xB7
09242:  CLRF   xB8
09244:  CLRF   xB9
09246:  CLRF   xBA
09248:  CLRF   xBB
0924A:  CLRF   xBC
0924C:  CLRF   xBD
0924E:  CLRF   xBE
09250:  CLRF   xBF
09252:  CLRF   xC0
09254:  CLRF   xC1
09256:  CLRF   xC2
09258:  CLRF   xC3
0925A:  CLRF   xC4
0925C:  CLRF   xC5
0925E:  CLRF   xC6
09260:  CLRF   xC7
09262:  CLRF   xC8
09264:  CLRF   xC9
09266:  CLRF   xCA
09268:  CLRF   xCB
0926A:  CLRF   xCC
0926C:  CLRF   xCD
0926E:  CLRF   xCE
09270:  CLRF   xCF
09272:  CLRF   xD0
09274:  CLRF   xD1
09276:  CLRF   xD2
09278:  CLRF   xD3
0927A:  CLRF   xD4
0927C:  CLRF   xD5
0927E:  CLRF   xD6
09280:  CLRF   xD7
09282:  CLRF   xD8
09284:  CLRF   xD9
09286:  CLRF   xDA
09288:  CLRF   xDB
0928A:  CLRF   xDC
0928C:  CLRF   xDD
0928E:  CLRF   xDE
09290:  CLRF   xDF
09292:  CLRF   xE0
09294:  CLRF   xE1
09296:  CLRF   xE2
09298:  CLRF   xE3
0929A:  CLRF   xE4
0929C:  CLRF   xE5
0929E:  CLRF   xE6
092A0:  CLRF   xE7
092A2:  CLRF   xE8
092A4:  CLRF   xE9
092A6:  CLRF   xEA
092A8:  CLRF   xEB
092AA:  CLRF   xEC
092AC:  CLRF   xED
092AE:  CLRF   xEE
092B0:  CLRF   xEF
092B2:  CLRF   xF0
092B4:  CLRF   xF1
092B6:  CLRF   xF2
092B8:  CLRF   xF3
092BA:  CLRF   xF4
092BC:  CLRF   xF5
092BE:  CLRF   xF6
092C0:  CLRF   xF7
092C2:  CLRF   xF8
092C4:  CLRF   xF9
092C6:  CLRF   xFA
092C8:  CLRF   xFB
092CA:  CLRF   xFC
092CC:  CLRF   xFD
092CE:  CLRF   xFE
092D0:  CLRF   xFF
092D2:  MOVLB  8
092D4:  CLRF   x00
092D6:  CLRF   x01
092D8:  CLRF   x02
092DA:  CLRF   x03
092DC:  CLRF   x04
092DE:  CLRF   x05
092E0:  CLRF   x06
092E2:  CLRF   x07
092E4:  CLRF   x08
092E6:  CLRF   x09
092E8:  CLRF   x0A
092EA:  CLRF   x0B
092EC:  CLRF   x0C
092EE:  CLRF   x0D
092F0:  CLRF   x0E
092F2:  CLRF   x0F
092F4:  CLRF   x10
092F6:  CLRF   x11
092F8:  CLRF   x12
092FA:  CLRF   x13
092FC:  CLRF   x14
092FE:  CLRF   x15
09300:  CLRF   x16
09302:  CLRF   x17
09304:  CLRF   x18
09306:  CLRF   x19
09308:  CLRF   x1A
0930A:  CLRF   x1B
0930C:  CLRF   x1C
0930E:  CLRF   x1D
09310:  CLRF   x1E
09312:  CLRF   x1F
09314:  CLRF   x20
09316:  CLRF   x21
09318:  CLRF   x22
0931A:  CLRF   x23
0931C:  CLRF   x24
0931E:  CLRF   x25
09320:  CLRF   x26
09322:  CLRF   x27
09324:  CLRF   x28
09326:  CLRF   x29
09328:  CLRF   x2A
0932A:  CLRF   x2B
0932C:  CLRF   x2C
0932E:  CLRF   x2D
09330:  CLRF   x2E
09332:  CLRF   x2F
09334:  CLRF   x30
09336:  CLRF   x31
09338:  CLRF   x32
0933A:  CLRF   x33
0933C:  CLRF   x34
0933E:  CLRF   x35
09340:  CLRF   x36
09342:  CLRF   x37
09344:  CLRF   x38
09346:  CLRF   x39
09348:  CLRF   x3A
0934A:  CLRF   x3B
0934C:  CLRF   x3C
0934E:  CLRF   x3D
09350:  CLRF   x3E
09352:  CLRF   x3F
09354:  CLRF   x40
09356:  CLRF   x41
09358:  CLRF   x42
0935A:  CLRF   x43
0935C:  CLRF   x44
0935E:  CLRF   x45
09360:  CLRF   x46
09362:  CLRF   x47
09364:  CLRF   x48
09366:  CLRF   x49
09368:  CLRF   x4A
0936A:  CLRF   x4B
0936C:  CLRF   x4C
0936E:  CLRF   x4D
09370:  CLRF   x4E
09372:  CLRF   x4F
09374:  CLRF   x50
09376:  CLRF   x51
09378:  CLRF   x52
0937A:  CLRF   x53
0937C:  CLRF   x54
0937E:  CLRF   x55
09380:  CLRF   x56
09382:  CLRF   x57
09384:  CLRF   x58
09386:  CLRF   x59
09388:  CLRF   x5A
0938A:  CLRF   x5B
0938C:  CLRF   x5C
0938E:  CLRF   x5D
09390:  CLRF   x5E
09392:  CLRF   x5F
09394:  CLRF   x60
09396:  CLRF   x61
09398:  CLRF   x62
0939A:  CLRF   x63
0939C:  CLRF   x64
0939E:  CLRF   x65
093A0:  CLRF   x66
093A2:  CLRF   x67
093A4:  CLRF   x68
093A6:  CLRF   x69
093A8:  CLRF   x6A
093AA:  CLRF   x6B
093AC:  CLRF   x6C
093AE:  CLRF   x6D
093B0:  CLRF   x6E
093B2:  CLRF   x6F
093B4:  CLRF   x70
093B6:  CLRF   x71
093B8:  CLRF   x72
093BA:  CLRF   x73
093BC:  CLRF   x74
093BE:  CLRF   x75
093C0:  CLRF   x76
093C2:  CLRF   x77
093C4:  CLRF   x78
093C6:  CLRF   x79
093C8:  CLRF   x7A
093CA:  CLRF   x7B
093CC:  CLRF   x7C
093CE:  CLRF   x7D
093D0:  CLRF   x7E
093D2:  CLRF   x7F
093D4:  CLRF   x80
093D6:  CLRF   x81
093D8:  CLRF   x82
093DA:  CLRF   x83
093DC:  CLRF   x84
093DE:  CLRF   x85
093E0:  CLRF   x86
093E2:  CLRF   x87
093E4:  CLRF   x88
093E6:  CLRF   x89
093E8:  CLRF   x8A
093EA:  CLRF   x8B
093EC:  CLRF   x8C
093EE:  CLRF   x8D
093F0:  CLRF   x8E
093F2:  CLRF   x8F
093F4:  CLRF   x90
093F6:  CLRF   x91
093F8:  CLRF   x92
093FA:  CLRF   x93
093FC:  CLRF   x94
093FE:  CLRF   x95
09400:  CLRF   x96
09402:  CLRF   x97
09404:  CLRF   x98
09406:  CLRF   x99
09408:  CLRF   x9A
0940A:  CLRF   x9B
0940C:  CLRF   x9C
0940E:  CLRF   x9D
09410:  CLRF   x9E
09412:  CLRF   x9F
09414:  CLRF   xA0
09416:  CLRF   xA1
09418:  CLRF   xA2
0941A:  CLRF   xA3
0941C:  CLRF   xA4
0941E:  CLRF   xA5
09420:  CLRF   xA6
09422:  CLRF   xA7
09424:  CLRF   xA8
09426:  CLRF   xA9
09428:  CLRF   xAA
0942A:  CLRF   xAB
0942C:  CLRF   xAC
0942E:  CLRF   xAD
09430:  CLRF   xAE
09432:  CLRF   xAF
09434:  CLRF   xB0
09436:  CLRF   xB1
09438:  CLRF   xB2
0943A:  CLRF   xB3
0943C:  CLRF   xB4
0943E:  CLRF   xB5
09440:  CLRF   xB6
09442:  CLRF   xB7
09444:  CLRF   xB8
09446:  CLRF   xB9
09448:  CLRF   xBA
0944A:  CLRF   xBB
0944C:  CLRF   xBC
0944E:  CLRF   xBD
09450:  CLRF   xBE
09452:  CLRF   xBF
09454:  CLRF   xC0
09456:  CLRF   xC1
09458:  CLRF   xC2
0945A:  CLRF   xC3
0945C:  CLRF   xC4
0945E:  CLRF   xC5
09460:  CLRF   xC6
09462:  CLRF   xC7
09464:  CLRF   xC8
09466:  CLRF   xC9
09468:  CLRF   xCA
0946A:  CLRF   xCB
0946C:  CLRF   xCC
0946E:  CLRF   xCD
09470:  CLRF   xCE
09472:  CLRF   xCF
09474:  CLRF   xD0
09476:  CLRF   xD1
09478:  CLRF   xD2
0947A:  CLRF   xD3
0947C:  CLRF   xD4
0947E:  CLRF   xD5
09480:  CLRF   xD6
09482:  CLRF   xD7
09484:  CLRF   xD8
09486:  CLRF   xD9
09488:  CLRF   xDA
0948A:  CLRF   xDB
0948C:  CLRF   xDC
0948E:  CLRF   xDD
09490:  CLRF   xDE
09492:  CLRF   xDF
09494:  CLRF   xE0
09496:  CLRF   xE1
09498:  CLRF   xE2
0949A:  CLRF   xE3
0949C:  CLRF   xE4
0949E:  CLRF   xE5
094A0:  CLRF   xE6
094A2:  CLRF   xE7
094A4:  CLRF   xE8
094A6:  CLRF   xE9
094A8:  CLRF   xEA
094AA:  CLRF   xEB
094AC:  CLRF   xEC
094AE:  CLRF   xED
094B0:  CLRF   xEE
094B2:  CLRF   xEF
094B4:  CLRF   xF0
094B6:  CLRF   xF1
094B8:  CLRF   xF2
094BA:  CLRF   xF3
094BC:  CLRF   xF4
094BE:  CLRF   xF5
094C0:  CLRF   xF6
094C2:  CLRF   xF7
094C4:  CLRF   xF8
094C6:  CLRF   xF9
094C8:  CLRF   xFA
094CA:  CLRF   xFB
094CC:  CLRF   xFC
094CE:  CLRF   xFD
094D0:  CLRF   xFE
094D2:  CLRF   xFF
094D4:  MOVLB  9
094D6:  CLRF   x00
094D8:  CLRF   x01
094DA:  CLRF   x02
094DC:  CLRF   x03
094DE:  CLRF   x04
094E0:  CLRF   x05
094E2:  CLRF   x06
094E4:  CLRF   x07
094E6:  CLRF   x08
094E8:  CLRF   x09
094EA:  CLRF   x0A
094EC:  CLRF   x0B
094EE:  CLRF   x0C
094F0:  CLRF   x0D
094F2:  CLRF   x0E
094F4:  CLRF   x0F
094F6:  CLRF   x10
094F8:  CLRF   x11
094FA:  CLRF   x12
094FC:  CLRF   x13
094FE:  CLRF   x14
09500:  CLRF   x15
09502:  CLRF   x16
09504:  CLRF   x17
09506:  CLRF   x18
09508:  CLRF   x19
0950A:  CLRF   x1A
0950C:  CLRF   x1B
0950E:  CLRF   x1C
09510:  CLRF   x1D
09512:  CLRF   x1E
09514:  CLRF   x1F
09516:  CLRF   x20
09518:  CLRF   x21
0951A:  CLRF   x22
0951C:  CLRF   x23
0951E:  CLRF   x24
09520:  CLRF   x25
09522:  CLRF   x26
09524:  CLRF   x27
09526:  CLRF   x28
09528:  CLRF   x29
0952A:  CLRF   x2A
0952C:  CLRF   x2B
0952E:  CLRF   x2C
09530:  CLRF   x2D
09532:  CLRF   x2E
09534:  CLRF   x2F
09536:  CLRF   x30
09538:  CLRF   x31
0953A:  CLRF   x32
0953C:  CLRF   x33
0953E:  CLRF   x34
09540:  CLRF   x35
09542:  CLRF   x36
09544:  CLRF   x37
09546:  CLRF   x38
09548:  CLRF   x39
0954A:  CLRF   x3A
0954C:  CLRF   x3B
0954E:  CLRF   x3C
09550:  CLRF   x3D
09552:  CLRF   x3E
09554:  CLRF   x3F
09556:  CLRF   x40
09558:  CLRF   x41
0955A:  CLRF   x42
0955C:  CLRF   x43
0955E:  CLRF   x44
09560:  CLRF   x45
09562:  CLRF   x46
09564:  CLRF   x47
09566:  CLRF   x48
09568:  CLRF   x49
0956A:  CLRF   x4A
0956C:  CLRF   x4B
0956E:  CLRF   x4C
09570:  CLRF   x4D
09572:  CLRF   x4E
09574:  CLRF   x4F
09576:  CLRF   x50
09578:  CLRF   x51
0957A:  CLRF   x52
0957C:  CLRF   x53
0957E:  CLRF   x54
09580:  CLRF   x55
09582:  CLRF   x56
09584:  CLRF   x57
09586:  CLRF   x58
09588:  CLRF   x59
0958A:  CLRF   x5A
0958C:  CLRF   x5B
0958E:  CLRF   x5C
09590:  CLRF   x5D
09592:  CLRF   x5E
09594:  CLRF   x5F
09596:  CLRF   x60
09598:  CLRF   x61
0959A:  CLRF   x62
0959C:  CLRF   x63
0959E:  CLRF   x64
095A0:  CLRF   x65
095A2:  CLRF   x66
095A4:  CLRF   x67
095A6:  CLRF   x68
095A8:  CLRF   x69
095AA:  CLRF   x6A
095AC:  CLRF   x6B
095AE:  CLRF   x6C
095B0:  CLRF   x6D
095B2:  CLRF   x6E
095B4:  CLRF   x6F
095B6:  CLRF   x70
095B8:  CLRF   x71
095BA:  CLRF   x72
095BC:  CLRF   x73
095BE:  CLRF   x74
095C0:  CLRF   x75
095C2:  CLRF   x76
095C4:  CLRF   x77
095C6:  CLRF   x78
095C8:  CLRF   x79
095CA:  CLRF   x7A
095CC:  CLRF   x7B
095CE:  CLRF   x7C
095D0:  CLRF   x7D
095D2:  CLRF   x7E
095D4:  CLRF   x7F
095D6:  CLRF   x80
095D8:  CLRF   x81
095DA:  CLRF   x82
095DC:  CLRF   x83
095DE:  CLRF   x84
095E0:  CLRF   x85
095E2:  CLRF   x86
095E4:  CLRF   x87
095E6:  CLRF   x88
095E8:  CLRF   x89
095EA:  CLRF   x8A
095EC:  CLRF   x8B
095EE:  CLRF   x8C
095F0:  CLRF   x8D
095F2:  CLRF   x8E
095F4:  CLRF   x8F
095F6:  CLRF   x90
095F8:  CLRF   x91
095FA:  CLRF   x92
095FC:  CLRF   x93
095FE:  CLRF   x94
09600:  CLRF   x95
09602:  CLRF   x96
09604:  CLRF   x97
09606:  CLRF   x98
09608:  CLRF   x99
0960A:  CLRF   x9A
0960C:  CLRF   x9B
0960E:  CLRF   x9C
09610:  CLRF   x9D
09612:  CLRF   x9E
09614:  CLRF   x9F
09616:  CLRF   xA0
09618:  CLRF   xA1
0961A:  CLRF   xA2
0961C:  CLRF   xA3
0961E:  CLRF   xA4
09620:  CLRF   xA5
09622:  CLRF   xA6
09624:  CLRF   xA7
09626:  CLRF   xA8
09628:  CLRF   xA9
0962A:  CLRF   xAA
0962C:  CLRF   xAB
0962E:  CLRF   xAC
09630:  CLRF   xAD
09632:  CLRF   xAE
09634:  CLRF   xAF
09636:  CLRF   xB0
09638:  CLRF   xB1
0963A:  CLRF   xB2
0963C:  CLRF   xB3
0963E:  CLRF   xB4
09640:  CLRF   xB5
09642:  CLRF   xB6
09644:  CLRF   xB7
09646:  CLRF   xB8
09648:  CLRF   xB9
0964A:  CLRF   xBA
0964C:  CLRF   xBB
0964E:  CLRF   xBC
09650:  CLRF   xBD
09652:  CLRF   xBE
09654:  CLRF   xBF
09656:  CLRF   xC0
09658:  CLRF   xC1
0965A:  CLRF   xC2
0965C:  CLRF   xC3
0965E:  CLRF   xC4
09660:  CLRF   xC5
09662:  CLRF   xC6
09664:  CLRF   xC7
09666:  CLRF   xC8
09668:  CLRF   xC9
0966A:  CLRF   xCA
0966C:  CLRF   xCB
0966E:  CLRF   xCC
09670:  CLRF   xCD
09672:  CLRF   xCE
09674:  CLRF   xCF
09676:  CLRF   xD0
09678:  CLRF   xD1
0967A:  CLRF   xD2
0967C:  CLRF   xD3
0967E:  CLRF   xD4
09680:  CLRF   xD5
09682:  CLRF   xD6
09684:  CLRF   xD7
09686:  CLRF   xD8
09688:  CLRF   xD9
0968A:  CLRF   xDA
0968C:  CLRF   xDB
0968E:  CLRF   xDC
09690:  CLRF   xDD
09692:  CLRF   xDE
09694:  CLRF   xDF
09696:  CLRF   xE0
09698:  CLRF   xE1
0969A:  CLRF   xE2
0969C:  CLRF   xE3
0969E:  CLRF   xE4
096A0:  CLRF   xE5
096A2:  CLRF   xE6
096A4:  CLRF   xE7
096A6:  CLRF   xE8
096A8:  CLRF   xE9
096AA:  CLRF   xEA
096AC:  CLRF   xEB
096AE:  CLRF   xEC
096B0:  CLRF   xED
096B2:  CLRF   xEE
096B4:  CLRF   xEF
096B6:  CLRF   xF0
096B8:  CLRF   xF1
096BA:  CLRF   xF2
096BC:  CLRF   xF3
096BE:  CLRF   xF4
096C0:  CLRF   xF5
096C2:  CLRF   xF6
096C4:  CLRF   xF7
096C6:  CLRF   xF8
096C8:  CLRF   xF9
096CA:  CLRF   xFA
096CC:  CLRF   xFB
096CE:  CLRF   xFC
096D0:  CLRF   xFD
096D2:  CLRF   xFE
096D4:  CLRF   xFF
096D6:  MOVLB  A
096D8:  CLRF   x00
096DA:  CLRF   x01
096DC:  CLRF   x02
096DE:  CLRF   x03
096E0:  CLRF   x04
096E2:  CLRF   x05
096E4:  CLRF   x06
096E6:  CLRF   x07
096E8:  CLRF   x08
096EA:  CLRF   x09
096EC:  CLRF   x0A
096EE:  CLRF   x0B
096F0:  CLRF   x0C
096F2:  CLRF   x0D
096F4:  CLRF   x0E
096F6:  CLRF   x0F
096F8:  CLRF   x10
096FA:  CLRF   x11
096FC:  CLRF   x12
096FE:  CLRF   x13
09700:  CLRF   x14
09702:  CLRF   x15
09704:  CLRF   x16
09706:  CLRF   x17
09708:  CLRF   x18
0970A:  CLRF   x19
0970C:  CLRF   x1A
0970E:  CLRF   x1B
09710:  CLRF   x1C
09712:  CLRF   x1D
09714:  CLRF   x1E
09716:  CLRF   x1F
09718:  CLRF   x20
0971A:  CLRF   x21
0971C:  CLRF   x22
0971E:  CLRF   x23
09720:  CLRF   x24
09722:  CLRF   x25
09724:  CLRF   x26
09726:  CLRF   x27
09728:  CLRF   x28
0972A:  CLRF   x29
0972C:  CLRF   x2A
0972E:  CLRF   x2B
09730:  CLRF   x2C
09732:  CLRF   x2D
09734:  CLRF   x2E
09736:  CLRF   x2F
09738:  CLRF   x30
0973A:  CLRF   x31
0973C:  CLRF   x32
0973E:  CLRF   x33
09740:  CLRF   x34
09742:  CLRF   x35
09744:  CLRF   x36
09746:  CLRF   x37
09748:  CLRF   x38
0974A:  CLRF   x39
0974C:  CLRF   x3A
0974E:  CLRF   x3B
09750:  CLRF   x3C
09752:  CLRF   x3D
09754:  CLRF   x3E
09756:  CLRF   x3F
09758:  CLRF   x40
0975A:  CLRF   x41
0975C:  CLRF   x42
0975E:  CLRF   x43
09760:  CLRF   x44
09762:  CLRF   x45
09764:  CLRF   x46
09766:  CLRF   x47
09768:  CLRF   x48
0976A:  CLRF   x49
0976C:  CLRF   x4A
0976E:  CLRF   x4B
09770:  CLRF   x4C
09772:  CLRF   x4D
09774:  CLRF   x4E
09776:  CLRF   x4F
09778:  CLRF   x50
0977A:  CLRF   x51
0977C:  CLRF   x52
0977E:  CLRF   x53
09780:  CLRF   x54
....................     port2.port_num = 2;
09782:  MOVLW  02
09784:  MOVLB  6
09786:  MOVWF  x55
....................     port2.sweep_step = 0;
09788:  CLRF   x57
0978A:  CLRF   x56
....................     port2.active = 1;
0978C:  MOVLB  A
0978E:  BSF    x54.0
.................... 
....................     int16 count = 0;
09790:  CLRF   x56
09792:  CLRF   x55
....................     
....................     // Initialize DACs to 0
....................     mcp4901_1_write(1);
09794:  CLRF   x64
09796:  MOVLW  01
09798:  MOVWF  x63
0979A:  MOVLB  0
0979C:  CALL   24D0
....................     mcp4901_2_write(1);
097A0:  MOVLB  A
097A2:  CLRF   x64
097A4:  MOVLW  01
097A6:  MOVWF  x63
097A8:  MOVLB  0
097AA:  CALL   2512
.................... 
....................     iv_env_t measured_data = create_meas_data();
097AE:  CALL   7F92
097B2:  MOVFF  02,03
097B6:  MOVF   01,W
097B8:  MOVWF  FE1
097BA:  MOVFF  03,FE2
097BE:  MOVLW  0A
097C0:  MOVWF  FEA
097C2:  MOVLW  57
097C4:  MOVWF  FE9
097C6:  MOVLW  0C
097C8:  MOVWF  01
097CA:  MOVFF  FE6,FEE
097CE:  DECFSZ 01,F
097D0:  GOTO   97CA
....................     while (port1.active || port2.active)
097D4:  MOVLB  6
097D6:  BTFSS  x54.0
097D8:  BRA    97E0
097DA:  MOVLB  0
097DC:  GOTO   97F0
097E0:  MOVLB  0
097E2:  MOVLB  A
097E4:  BTFSC  x54.0
097E6:  BRA    97EE
097E8:  MOVLB  0
097EA:  GOTO   9AA0
097EE:  MOVLB  0
....................     {
....................         mcp4901_1_write(count);
097F0:  MOVFF  A56,A64
097F4:  MOVFF  A55,A63
097F8:  CALL   24D0
....................         mcp4901_2_write(count);
097FC:  MOVFF  A56,A64
09800:  MOVFF  A55,A63
09804:  CALL   2512
....................         delay_us(10); 
09808:  MOVLW  0D
0980A:  MOVWF  00
0980C:  DECFSZ 00,F
0980E:  BRA    980C
....................         if (port1.active) {
09810:  MOVLB  6
09812:  BTFSC  x54.0
09814:  BRA    981C
09816:  MOVLB  0
09818:  GOTO   9940
0981C:  MOVLB  0
....................             port1.data_buffer[count].voltage = ad7490_read(ADC_CIGS1_AMP);
0981E:  MOVLB  A
09820:  RLCF   x55,W
09822:  MOVWF  02
09824:  RLCF   x56,W
09826:  MOVWF  03
09828:  RLCF   02,F
0982A:  RLCF   03,F
0982C:  MOVLW  FC
0982E:  ANDWF  02,F
09830:  MOVF   02,W
09832:  ADDLW  58
09834:  MOVWF  01
09836:  MOVLW  02
09838:  ADDWFC 03,F
0983A:  MOVF   01,W
0983C:  MOVWF  x65
0983E:  MOVFF  03,A66
09842:  MOVLW  02
09844:  MOVWF  x75
09846:  MOVLB  0
09848:  CALL   20FC
0984C:  MOVFF  A66,FEA
09850:  MOVFF  A65,FE9
09854:  MOVFF  02,FEC
09858:  MOVF   FED,F
0985A:  MOVFF  01,FEF
....................             port1.data_buffer[count].current = ad7490_read(ADC_CIGS1_CURR);
0985E:  MOVLB  A
09860:  RLCF   x55,W
09862:  MOVWF  02
09864:  RLCF   x56,W
09866:  MOVWF  03
09868:  RLCF   02,F
0986A:  RLCF   03,F
0986C:  MOVLW  FC
0986E:  ANDWF  02,F
09870:  MOVF   02,W
09872:  ADDLW  03
09874:  MOVWF  x63
09876:  MOVLW  00
09878:  ADDWFC 03,W
0987A:  MOVWF  x64
0987C:  MOVLW  02
0987E:  ADDWF  x63,W
09880:  MOVWF  01
09882:  MOVLW  00
09884:  ADDWFC x64,W
09886:  MOVWF  03
09888:  MOVF   01,W
0988A:  ADDLW  55
0988C:  MOVWF  01
0988E:  MOVLW  02
09890:  ADDWFC 03,F
09892:  MOVF   01,W
09894:  MOVWF  x63
09896:  MOVFF  03,A64
0989A:  MOVLW  01
0989C:  MOVWF  x75
0989E:  MOVLB  0
098A0:  CALL   20FC
098A4:  MOVFF  A64,FEA
098A8:  MOVFF  A63,FE9
098AC:  MOVFF  02,FEC
098B0:  MOVF   FED,F
098B2:  MOVFF  01,FEF
....................             port1.sweep_step = count + 1; 
098B6:  MOVLW  01
098B8:  MOVLB  A
098BA:  ADDWF  x55,W
098BC:  MOVLB  2
098BE:  MOVWF  x56
098C0:  MOVLW  00
098C2:  MOVLB  A
098C4:  ADDWFC x56,W
098C6:  MOVLB  2
098C8:  MOVWF  x57
....................             // fprintf(PC, "%04LX,%04LX,", port1.data_buffer[count].voltage, port1.data_buffer[count].current);
....................             if (port1.data_buffer[count].current < curr_limit) {
098CA:  MOVLB  A
098CC:  RLCF   x55,W
098CE:  MOVWF  02
098D0:  RLCF   x56,W
098D2:  MOVWF  03
098D4:  RLCF   02,F
098D6:  RLCF   03,F
098D8:  MOVLW  FC
098DA:  ANDWF  02,F
098DC:  MOVF   02,W
098DE:  ADDLW  03
098E0:  MOVWF  x63
098E2:  MOVLW  00
098E4:  ADDWFC 03,W
098E6:  MOVWF  x64
098E8:  MOVLW  02
098EA:  ADDWF  x63,W
098EC:  MOVWF  01
098EE:  MOVLW  00
098F0:  ADDWFC x64,W
098F2:  MOVWF  03
098F4:  MOVF   01,W
098F6:  ADDLW  55
098F8:  MOVWF  FE9
098FA:  MOVLW  02
098FC:  ADDWFC 03,W
098FE:  MOVWF  FEA
09900:  MOVFF  FEC,A64
09904:  MOVF   FED,F
09906:  MOVFF  FEF,A63
0990A:  MOVF   x64,W
0990C:  MOVLB  2
0990E:  SUBWF  x52,W
09910:  BTFSC  FD8.0
09912:  BRA    991A
09914:  MOVLB  0
09916:  GOTO   9940
0991A:  MOVLB  0
0991C:  BTFSS  FD8.2
0991E:  GOTO   9936
09922:  MOVLB  2
09924:  MOVF   x51,W
09926:  MOVLB  A
09928:  SUBWF  x63,W
0992A:  BTFSS  FD8.0
0992C:  BRA    9934
0992E:  MOVLB  0
09930:  GOTO   9940
09934:  MOVLB  0
....................                 port1.active = 0;
09936:  MOVLB  6
09938:  BCF    x54.0
....................                 disconnect_port1();
0993A:  MOVLB  0
0993C:  CALL   8014
....................             }
....................         }
....................         if (port2.active) {
09940:  MOVLB  A
09942:  BTFSC  x54.0
09944:  BRA    994C
09946:  MOVLB  0
09948:  GOTO   9A70
0994C:  MOVLB  0
....................             port2.data_buffer[count].voltage = ad7490_read(ADC_CIGS2_AMP);
0994E:  MOVLB  A
09950:  RLCF   x55,W
09952:  MOVWF  02
09954:  RLCF   x56,W
09956:  MOVWF  03
09958:  RLCF   02,F
0995A:  RLCF   03,F
0995C:  MOVLW  FC
0995E:  ANDWF  02,F
09960:  MOVF   02,W
09962:  ADDLW  58
09964:  MOVWF  01
09966:  MOVLW  06
09968:  ADDWFC 03,F
0996A:  MOVF   01,W
0996C:  MOVWF  x65
0996E:  MOVFF  03,A66
09972:  MOVLW  06
09974:  MOVWF  x75
09976:  MOVLB  0
09978:  CALL   20FC
0997C:  MOVFF  A66,FEA
09980:  MOVFF  A65,FE9
09984:  MOVFF  02,FEC
09988:  MOVF   FED,F
0998A:  MOVFF  01,FEF
....................             port2.data_buffer[count].current = ad7490_read(ADC_CIGS2_CURR);
0998E:  MOVLB  A
09990:  RLCF   x55,W
09992:  MOVWF  02
09994:  RLCF   x56,W
09996:  MOVWF  03
09998:  RLCF   02,F
0999A:  RLCF   03,F
0999C:  MOVLW  FC
0999E:  ANDWF  02,F
099A0:  MOVF   02,W
099A2:  ADDLW  03
099A4:  MOVWF  x63
099A6:  MOVLW  00
099A8:  ADDWFC 03,W
099AA:  MOVWF  x64
099AC:  MOVLW  02
099AE:  ADDWF  x63,W
099B0:  MOVWF  01
099B2:  MOVLW  00
099B4:  ADDWFC x64,W
099B6:  MOVWF  03
099B8:  MOVF   01,W
099BA:  ADDLW  55
099BC:  MOVWF  01
099BE:  MOVLW  06
099C0:  ADDWFC 03,F
099C2:  MOVF   01,W
099C4:  MOVWF  x63
099C6:  MOVFF  03,A64
099CA:  MOVLW  05
099CC:  MOVWF  x75
099CE:  MOVLB  0
099D0:  CALL   20FC
099D4:  MOVFF  A64,FEA
099D8:  MOVFF  A63,FE9
099DC:  MOVFF  02,FEC
099E0:  MOVF   FED,F
099E2:  MOVFF  01,FEF
....................             port2.sweep_step = count + 1;
099E6:  MOVLW  01
099E8:  MOVLB  A
099EA:  ADDWF  x55,W
099EC:  MOVLB  6
099EE:  MOVWF  x56
099F0:  MOVLW  00
099F2:  MOVLB  A
099F4:  ADDWFC x56,W
099F6:  MOVLB  6
099F8:  MOVWF  x57
....................             if (port2.data_buffer[count].current < curr_limit) {
099FA:  MOVLB  A
099FC:  RLCF   x55,W
099FE:  MOVWF  02
09A00:  RLCF   x56,W
09A02:  MOVWF  03
09A04:  RLCF   02,F
09A06:  RLCF   03,F
09A08:  MOVLW  FC
09A0A:  ANDWF  02,F
09A0C:  MOVF   02,W
09A0E:  ADDLW  03
09A10:  MOVWF  x63
09A12:  MOVLW  00
09A14:  ADDWFC 03,W
09A16:  MOVWF  x64
09A18:  MOVLW  02
09A1A:  ADDWF  x63,W
09A1C:  MOVWF  01
09A1E:  MOVLW  00
09A20:  ADDWFC x64,W
09A22:  MOVWF  03
09A24:  MOVF   01,W
09A26:  ADDLW  55
09A28:  MOVWF  FE9
09A2A:  MOVLW  06
09A2C:  ADDWFC 03,W
09A2E:  MOVWF  FEA
09A30:  MOVFF  FEC,A64
09A34:  MOVF   FED,F
09A36:  MOVFF  FEF,A63
09A3A:  MOVF   x64,W
09A3C:  MOVLB  2
09A3E:  SUBWF  x52,W
09A40:  BTFSC  FD8.0
09A42:  BRA    9A4A
09A44:  MOVLB  0
09A46:  GOTO   9A70
09A4A:  MOVLB  0
09A4C:  BTFSS  FD8.2
09A4E:  GOTO   9A66
09A52:  MOVLB  2
09A54:  MOVF   x51,W
09A56:  MOVLB  A
09A58:  SUBWF  x63,W
09A5A:  BTFSS  FD8.0
09A5C:  BRA    9A64
09A5E:  MOVLB  0
09A60:  GOTO   9A70
09A64:  MOVLB  0
....................                 port2.active = 0;
09A66:  MOVLB  A
09A68:  BCF    x54.0
....................                 disconnect_port2();
09A6A:  MOVLB  0
09A6C:  CALL   801C
....................             } 
....................         }
....................         count++;
09A70:  MOVLB  A
09A72:  INCF   x55,F
09A74:  BTFSC  FD8.2
09A76:  INCF   x56,F
....................         if (count >= 255) {
09A78:  MOVF   x56,F
09A7A:  BTFSC  FD8.2
09A7C:  BRA    9A84
09A7E:  MOVLB  0
09A80:  GOTO   9A98
09A84:  MOVLB  0
09A86:  MOVLB  A
09A88:  MOVF   x55,W
09A8A:  SUBLW  FE
09A8C:  BTFSS  FD8.0
09A8E:  BRA    9A96
09A90:  MOVLB  0
09A92:  GOTO   9A9C
09A96:  MOVLB  0
....................             // fprintf(PC, "Maximum step count reached: %ld\r\n", count);
....................             break;
09A98:  GOTO   9AA0
....................         }
09A9C:  GOTO   97D4
....................     }
.................... 
....................     // Ensure all connections are disabled
....................     disconnect_port1();
09AA0:  CALL   8014
....................     disconnect_port2();
09AA4:  CALL   801C
....................     log_meas_data(&measured_data, &port1);
09AA8:  MOVLW  0A
09AAA:  MOVLB  A
09AAC:  MOVWF  x64
09AAE:  MOVLW  57
09AB0:  MOVWF  x63
09AB2:  MOVLW  02
09AB4:  MOVWF  x66
09AB6:  MOVLW  55
09AB8:  MOVWF  x65
09ABA:  MOVLB  0
09ABC:  CALL   8024
....................     log_meas_data(&measured_data, &port2);
09AC0:  MOVLW  0A
09AC2:  MOVLB  A
09AC4:  MOVWF  x64
09AC6:  MOVLW  57
09AC8:  MOVWF  x63
09ACA:  MOVLW  06
09ACC:  MOVWF  x66
09ACE:  MOVLW  55
09AD0:  MOVWF  x65
09AD2:  MOVLB  0
09AD4:  CALL   8024
09AD8:  GOTO   9F7A (RETURN)
.................... }
.................... 
.................... 
.................... void log_meas_data(iv_env_t *measured_data_ptr, sweep_config_t *port_data_ptr)
*
080A6:  CLRF   xA7
.................... {
....................     int8 packetdata[PACKET_SIZE] = {0x00}; 
*
08024:  MOVLB  A
08026:  CLRF   x67
08028:  CLRF   x68
0802A:  CLRF   x69
0802C:  CLRF   x6A
0802E:  CLRF   x6B
08030:  CLRF   x6C
08032:  CLRF   x6D
08034:  CLRF   x6E
08036:  CLRF   x6F
08038:  CLRF   x70
0803A:  CLRF   x71
0803C:  CLRF   x72
0803E:  CLRF   x73
08040:  CLRF   x74
08042:  CLRF   x75
08044:  CLRF   x76
08046:  CLRF   x77
08048:  CLRF   x78
0804A:  CLRF   x79
0804C:  CLRF   x7A
0804E:  CLRF   x7B
08050:  CLRF   x7C
08052:  CLRF   x7D
08054:  CLRF   x7E
08056:  CLRF   x7F
08058:  CLRF   x80
0805A:  CLRF   x81
0805C:  CLRF   x82
0805E:  CLRF   x83
08060:  CLRF   x84
08062:  CLRF   x85
08064:  CLRF   x86
08066:  CLRF   x87
08068:  CLRF   x88
0806A:  CLRF   x89
0806C:  CLRF   x8A
0806E:  CLRF   x8B
08070:  CLRF   x8C
08072:  CLRF   x8D
08074:  CLRF   x8E
08076:  CLRF   x8F
08078:  CLRF   x90
0807A:  CLRF   x91
0807C:  CLRF   x92
0807E:  CLRF   x93
08080:  CLRF   x94
08082:  CLRF   x95
08084:  CLRF   x96
08086:  CLRF   x97
08088:  CLRF   x98
0808A:  CLRF   x99
0808C:  CLRF   x9A
0808E:  CLRF   x9B
08090:  CLRF   x9C
08092:  CLRF   x9D
08094:  CLRF   x9E
08096:  CLRF   x9F
08098:  CLRF   xA0
0809A:  CLRF   xA1
0809C:  CLRF   xA2
0809E:  CLRF   xA3
080A0:  CLRF   xA4
080A2:  CLRF   xA5
080A4:  CLRF   xA6
....................     unsigned int8 packetdata_index = 0;
.................... 
....................     // ==== ヘッダ＋環境データ書き込み ====
....................     packetdata[packetdata_index++] = START_MAKER;  // 最初のパケットだけ
*
080A8:  MOVF   xA7,W
080AA:  INCF   xA7,F
080AC:  CLRF   03
080AE:  ADDLW  67
080B0:  MOVWF  FE9
080B2:  MOVLW  0A
080B4:  ADDWFC 03,W
080B6:  MOVWF  FEA
080B8:  SETF   FEF
....................     // timeヘッダ
....................     packetdata[packetdata_index++] = (measured_data_ptr->time >> 24) & 0xFF;
080BA:  MOVF   xA7,W
080BC:  INCF   xA7,F
080BE:  CLRF   03
080C0:  ADDLW  67
080C2:  MOVWF  01
080C4:  MOVLW  0A
080C6:  ADDWFC 03,F
080C8:  MOVF   01,W
080CA:  MOVWF  xAF
080CC:  MOVFF  03,AB0
080D0:  MOVF   x63,W
080D2:  MOVWF  FE9
080D4:  MOVF   x64,W
080D6:  MOVWF  FEA
080D8:  MOVFF  FEF,AB1
080DC:  MOVFF  FEC,AB2
080E0:  MOVFF  FEC,AB3
080E4:  MOVFF  FEC,AB4
080E8:  MOVF   FED,F
080EA:  MOVF   FED,F
080EC:  MOVF   FED,F
080EE:  MOVFF  AB4,AB1
080F2:  CLRF   xB2
080F4:  CLRF   xB3
080F6:  CLRF   xB4
080F8:  MOVF   xB1,W
080FA:  MOVWF  00
080FC:  CLRF   01
080FE:  CLRF   02
08100:  CLRF   03
08102:  MOVFF  03,AB4
08106:  MOVFF  02,AB3
0810A:  MOVFF  01,AB2
0810E:  MOVFF  00,AB1
08112:  MOVFF  AB0,FEA
08116:  MOVFF  AAF,FE9
0811A:  MOVFF  AB1,FEF
....................     packetdata[packetdata_index++] = (measured_data_ptr->time >> 16) & 0xFF;
0811E:  MOVF   xA7,W
08120:  INCF   xA7,F
08122:  CLRF   03
08124:  ADDLW  67
08126:  MOVWF  01
08128:  MOVLW  0A
0812A:  ADDWFC 03,F
0812C:  MOVF   01,W
0812E:  MOVWF  xAF
08130:  MOVFF  03,AB0
08134:  MOVF   x63,W
08136:  MOVWF  FE9
08138:  MOVF   x64,W
0813A:  MOVWF  FEA
0813C:  MOVFF  FEF,AB1
08140:  MOVFF  FEC,AB2
08144:  MOVFF  FEC,AB3
08148:  MOVFF  FEC,AB4
0814C:  MOVF   FED,F
0814E:  MOVF   FED,F
08150:  MOVF   FED,F
08152:  MOVFF  AB3,AB1
08156:  MOVFF  AB4,AB2
0815A:  CLRF   xB3
0815C:  CLRF   xB4
0815E:  MOVF   xB1,W
08160:  MOVWF  00
08162:  CLRF   01
08164:  CLRF   02
08166:  CLRF   03
08168:  MOVFF  03,AB4
0816C:  MOVFF  02,AB3
08170:  MOVFF  01,AB2
08174:  MOVFF  00,AB1
08178:  MOVFF  AB0,FEA
0817C:  MOVFF  AAF,FE9
08180:  MOVFF  AB1,FEF
....................     packetdata[packetdata_index++] = (measured_data_ptr->time >> 8) & 0xFF;
08184:  MOVF   xA7,W
08186:  INCF   xA7,F
08188:  CLRF   03
0818A:  ADDLW  67
0818C:  MOVWF  01
0818E:  MOVLW  0A
08190:  ADDWFC 03,F
08192:  MOVF   01,W
08194:  MOVWF  xAF
08196:  MOVFF  03,AB0
0819A:  MOVF   x63,W
0819C:  MOVWF  FE9
0819E:  MOVF   x64,W
081A0:  MOVWF  FEA
081A2:  MOVFF  FEF,AB1
081A6:  MOVFF  FEC,AB2
081AA:  MOVFF  FEC,AB3
081AE:  MOVFF  FEC,AB4
081B2:  MOVF   FED,F
081B4:  MOVF   FED,F
081B6:  MOVF   FED,F
081B8:  MOVFF  AB2,AB1
081BC:  MOVFF  AB3,AB2
081C0:  MOVFF  AB4,AB3
081C4:  CLRF   xB4
081C6:  MOVF   xB1,W
081C8:  MOVWF  00
081CA:  CLRF   01
081CC:  CLRF   02
081CE:  CLRF   03
081D0:  MOVFF  03,AB4
081D4:  MOVFF  02,AB3
081D8:  MOVFF  01,AB2
081DC:  MOVFF  00,AB1
081E0:  MOVFF  AB0,FEA
081E4:  MOVFF  AAF,FE9
081E8:  MOVFF  AB1,FEF
....................     packetdata[packetdata_index++] = measured_data_ptr->time & 0xFF;
081EC:  MOVF   xA7,W
081EE:  INCF   xA7,F
081F0:  CLRF   03
081F2:  ADDLW  67
081F4:  MOVWF  01
081F6:  MOVLW  0A
081F8:  ADDWFC 03,F
081FA:  MOVF   01,W
081FC:  MOVWF  xAF
081FE:  MOVFF  03,AB0
08202:  MOVF   x63,W
08204:  MOVWF  FE9
08206:  MOVF   x64,W
08208:  MOVWF  FEA
0820A:  MOVFF  FEF,AB1
0820E:  MOVFF  FEC,AB2
08212:  MOVFF  FEC,AB3
08216:  MOVFF  FEC,AB4
0821A:  MOVF   FED,F
0821C:  MOVF   FED,F
0821E:  MOVF   FED,F
08220:  MOVF   xB1,W
08222:  MOVWF  00
08224:  CLRF   01
08226:  CLRF   02
08228:  CLRF   03
0822A:  MOVFF  03,AB4
0822E:  MOVFF  02,AB3
08232:  MOVFF  01,AB2
08236:  MOVFF  00,AB1
0823A:  MOVFF  AB0,FEA
0823E:  MOVFF  AAF,FE9
08242:  MOVFF  AB1,FEF
....................     // 環境データ
....................     packetdata[packetdata_index++] = (measured_data_ptr->pd >> 4) & 0xFF;
08246:  MOVF   xA7,W
08248:  INCF   xA7,F
0824A:  CLRF   03
0824C:  ADDLW  67
0824E:  MOVWF  01
08250:  MOVLW  0A
08252:  ADDWFC 03,F
08254:  MOVF   01,W
08256:  MOVWF  xAF
08258:  MOVFF  03,AB0
0825C:  MOVLW  04
0825E:  ADDWF  x63,W
08260:  MOVWF  FE9
08262:  MOVLW  00
08264:  ADDWFC x64,W
08266:  MOVWF  FEA
08268:  MOVFF  FEC,AB2
0826C:  MOVF   FED,F
0826E:  MOVFF  FEF,AB1
08272:  RRCF   xB2,F
08274:  RRCF   xB1,F
08276:  RRCF   xB2,F
08278:  RRCF   xB1,F
0827A:  RRCF   xB2,F
0827C:  RRCF   xB1,F
0827E:  RRCF   xB2,F
08280:  RRCF   xB1,F
08282:  MOVLW  0F
08284:  ANDWF  xB2,F
08286:  MOVF   xB1,W
08288:  MOVWF  00
0828A:  CLRF   03
0828C:  MOVF   00,W
0828E:  MOVWF  xB1
08290:  MOVFF  03,AB2
08294:  MOVFF  AB0,FEA
08298:  MOVFF  AAF,FE9
0829C:  MOVFF  AB1,FEF
....................     packetdata[packetdata_index++] = ((measured_data_ptr->pd & 0x0F) << 4) | ((measured_data_ptr->temp_py_top >> 8) & 0x0F);
082A0:  MOVF   xA7,W
082A2:  INCF   xA7,F
082A4:  CLRF   03
082A6:  ADDLW  67
082A8:  MOVWF  01
082AA:  MOVLW  0A
082AC:  ADDWFC 03,F
082AE:  MOVF   01,W
082B0:  MOVWF  xAF
082B2:  MOVFF  03,AB0
082B6:  MOVLW  04
082B8:  ADDWF  x63,W
082BA:  MOVWF  FE9
082BC:  MOVLW  00
082BE:  ADDWFC x64,W
082C0:  MOVWF  FEA
082C2:  MOVFF  FEC,AB2
082C6:  MOVF   FED,F
082C8:  MOVFF  FEF,AB1
082CC:  MOVLW  0F
082CE:  ANDWF  xB1,F
082D0:  CLRF   xB2
082D2:  RLCF   xB1,F
082D4:  RLCF   xB2,F
082D6:  RLCF   xB1,F
082D8:  RLCF   xB2,F
082DA:  RLCF   xB1,F
082DC:  RLCF   xB2,F
082DE:  RLCF   xB1,F
082E0:  RLCF   xB2,F
082E2:  MOVLW  F0
082E4:  ANDWF  xB1,F
082E6:  MOVLW  06
082E8:  ADDWF  x63,W
082EA:  MOVWF  FE9
082EC:  MOVLW  00
082EE:  ADDWFC x64,W
082F0:  MOVWF  FEA
082F2:  MOVFF  FEC,AB4
082F6:  MOVF   FED,F
082F8:  MOVFF  FEF,AB3
082FC:  MOVFF  AB4,AB3
08300:  CLRF   xB4
08302:  MOVF   xB3,W
08304:  ANDLW  0F
08306:  MOVWF  00
08308:  CLRF   03
0830A:  MOVF   00,W
0830C:  IORWF  xB1,W
0830E:  MOVWF  00
08310:  MOVF   03,W
08312:  IORWF  xB2,W
08314:  MOVWF  03
08316:  MOVF   00,W
08318:  MOVWF  xB1
0831A:  MOVFF  03,AB2
0831E:  MOVFF  AB0,FEA
08322:  MOVFF  AAF,FE9
08326:  MOVFF  AB1,FEF
....................     packetdata[packetdata_index++] = measured_data_ptr->temp_py_top & 0xFF;
0832A:  MOVF   xA7,W
0832C:  INCF   xA7,F
0832E:  CLRF   03
08330:  ADDLW  67
08332:  MOVWF  01
08334:  MOVLW  0A
08336:  ADDWFC 03,F
08338:  MOVF   01,W
0833A:  MOVWF  xAF
0833C:  MOVFF  03,AB0
08340:  MOVLW  06
08342:  ADDWF  x63,W
08344:  MOVWF  FE9
08346:  MOVLW  00
08348:  ADDWFC x64,W
0834A:  MOVWF  FEA
0834C:  MOVFF  FEC,AB2
08350:  MOVF   FED,F
08352:  MOVFF  FEF,AB1
08356:  MOVF   xB1,W
08358:  MOVWF  00
0835A:  CLRF   03
0835C:  MOVF   00,W
0835E:  MOVWF  xB1
08360:  MOVFF  03,AB2
08364:  MOVFF  AB0,FEA
08368:  MOVFF  AAF,FE9
0836C:  MOVFF  AB1,FEF
....................     packetdata[packetdata_index++] = (measured_data_ptr->temp_py_bot >> 4) & 0xFF;
08370:  MOVF   xA7,W
08372:  INCF   xA7,F
08374:  CLRF   03
08376:  ADDLW  67
08378:  MOVWF  01
0837A:  MOVLW  0A
0837C:  ADDWFC 03,F
0837E:  MOVF   01,W
08380:  MOVWF  xAF
08382:  MOVFF  03,AB0
08386:  MOVLW  08
08388:  ADDWF  x63,W
0838A:  MOVWF  FE9
0838C:  MOVLW  00
0838E:  ADDWFC x64,W
08390:  MOVWF  FEA
08392:  MOVFF  FEC,AB2
08396:  MOVF   FED,F
08398:  MOVFF  FEF,AB1
0839C:  RRCF   xB2,F
0839E:  RRCF   xB1,F
083A0:  RRCF   xB2,F
083A2:  RRCF   xB1,F
083A4:  RRCF   xB2,F
083A6:  RRCF   xB1,F
083A8:  RRCF   xB2,F
083AA:  RRCF   xB1,F
083AC:  MOVLW  0F
083AE:  ANDWF  xB2,F
083B0:  MOVF   xB1,W
083B2:  MOVWF  00
083B4:  CLRF   03
083B6:  MOVF   00,W
083B8:  MOVWF  xB1
083BA:  MOVFF  03,AB2
083BE:  MOVFF  AB0,FEA
083C2:  MOVFF  AAF,FE9
083C6:  MOVFF  AB1,FEF
....................     packetdata[packetdata_index++] = ((measured_data_ptr->temp_py_bot & 0x0F) << 4) | ((measured_data_ptr->temp_mis7 >> 8) & 0x0F);
083CA:  MOVF   xA7,W
083CC:  INCF   xA7,F
083CE:  CLRF   03
083D0:  ADDLW  67
083D2:  MOVWF  01
083D4:  MOVLW  0A
083D6:  ADDWFC 03,F
083D8:  MOVF   01,W
083DA:  MOVWF  xAF
083DC:  MOVFF  03,AB0
083E0:  MOVLW  08
083E2:  ADDWF  x63,W
083E4:  MOVWF  FE9
083E6:  MOVLW  00
083E8:  ADDWFC x64,W
083EA:  MOVWF  FEA
083EC:  MOVFF  FEC,AB2
083F0:  MOVF   FED,F
083F2:  MOVFF  FEF,AB1
083F6:  MOVLW  0F
083F8:  ANDWF  xB1,F
083FA:  CLRF   xB2
083FC:  RLCF   xB1,F
083FE:  RLCF   xB2,F
08400:  RLCF   xB1,F
08402:  RLCF   xB2,F
08404:  RLCF   xB1,F
08406:  RLCF   xB2,F
08408:  RLCF   xB1,F
0840A:  RLCF   xB2,F
0840C:  MOVLW  F0
0840E:  ANDWF  xB1,F
08410:  MOVLW  0A
08412:  ADDWF  x63,W
08414:  MOVWF  FE9
08416:  MOVLW  00
08418:  ADDWFC x64,W
0841A:  MOVWF  FEA
0841C:  MOVFF  FEC,AB4
08420:  MOVF   FED,F
08422:  MOVFF  FEF,AB3
08426:  MOVFF  AB4,AB3
0842A:  CLRF   xB4
0842C:  MOVF   xB3,W
0842E:  ANDLW  0F
08430:  MOVWF  00
08432:  CLRF   03
08434:  MOVF   00,W
08436:  IORWF  xB1,W
08438:  MOVWF  00
0843A:  MOVF   03,W
0843C:  IORWF  xB2,W
0843E:  MOVWF  03
08440:  MOVF   00,W
08442:  MOVWF  xB1
08444:  MOVFF  03,AB2
08448:  MOVFF  AB0,FEA
0844C:  MOVFF  AAF,FE9
08450:  MOVFF  AB1,FEF
....................     packetdata[packetdata_index++] = measured_data_ptr->temp_mis7 & 0xFF;
08454:  MOVF   xA7,W
08456:  INCF   xA7,F
08458:  CLRF   03
0845A:  ADDLW  67
0845C:  MOVWF  01
0845E:  MOVLW  0A
08460:  ADDWFC 03,F
08462:  MOVF   01,W
08464:  MOVWF  xAF
08466:  MOVFF  03,AB0
0846A:  MOVLW  0A
0846C:  ADDWF  x63,W
0846E:  MOVWF  FE9
08470:  MOVLW  00
08472:  ADDWFC x64,W
08474:  MOVWF  FEA
08476:  MOVFF  FEC,AB2
0847A:  MOVF   FED,F
0847C:  MOVFF  FEF,AB1
08480:  MOVF   xB1,W
08482:  MOVWF  00
08484:  CLRF   03
08486:  MOVF   00,W
08488:  MOVWF  xB1
0848A:  MOVFF  03,AB2
0848E:  MOVFF  AB0,FEA
08492:  MOVFF  AAF,FE9
08496:  MOVFF  AB1,FEF
.................... 
.................... 
....................     for (unsigned int16 i = 0; i < port_data_ptr->sweep_step ; i++) {
0849A:  CLRF   xA9
0849C:  CLRF   xA8
0849E:  MOVLB  0
084A0:  MOVLW  01
084A2:  MOVLB  A
084A4:  ADDWF  x65,W
084A6:  MOVWF  FE9
084A8:  MOVLW  00
084AA:  ADDWFC x66,W
084AC:  MOVWF  FEA
084AE:  MOVFF  FEC,03
084B2:  MOVF   FED,F
084B4:  MOVF   FEF,W
084B6:  MOVWF  01
084B8:  MOVF   xA9,W
084BA:  SUBWF  03,W
084BC:  BTFSC  FD8.0
084BE:  BRA    84C6
084C0:  MOVLB  0
084C2:  GOTO   8688
084C6:  MOVLB  0
084C8:  BTFSS  FD8.2
084CA:  GOTO   84E0
084CE:  MOVF   01,W
084D0:  MOVLB  A
084D2:  SUBWF  xA8,W
084D4:  BTFSS  FD8.0
084D6:  BRA    84DE
084D8:  MOVLB  0
084DA:  GOTO   8688
084DE:  MOVLB  0
....................         unsigned int16 data0 = port_data_ptr->data_buffer[i].voltage;
....................         unsigned int16 data1 = port_data_ptr->data_buffer[i].current;
084E0:  MOVLB  A
084E2:  RLCF   xA8,W
084E4:  MOVWF  02
084E6:  RLCF   xA9,W
084E8:  MOVWF  03
084EA:  RLCF   02,F
084EC:  RLCF   03,F
084EE:  MOVLW  FC
084F0:  ANDWF  02,F
084F2:  MOVF   02,W
084F4:  ADDLW  03
084F6:  MOVWF  xAF
084F8:  MOVLW  00
084FA:  ADDWFC 03,W
084FC:  MOVWF  xB0
084FE:  MOVF   x65,W
08500:  ADDWF  xAF,W
08502:  MOVWF  FE9
08504:  MOVF   x66,W
08506:  ADDWFC xB0,W
08508:  MOVWF  FEA
0850A:  MOVFF  FEC,AAB
0850E:  MOVF   FED,F
08510:  MOVFF  FEF,AAA
08514:  RLCF   xA8,W
08516:  MOVWF  02
08518:  RLCF   xA9,W
0851A:  MOVWF  03
0851C:  RLCF   02,F
0851E:  RLCF   03,F
08520:  MOVLW  FC
08522:  ANDWF  02,F
08524:  MOVF   02,W
08526:  ADDLW  03
08528:  MOVWF  xB1
0852A:  MOVLW  00
0852C:  ADDWFC 03,W
0852E:  MOVWF  xB2
08530:  MOVLW  02
08532:  ADDWF  xB1,W
08534:  MOVWF  01
08536:  MOVLW  00
08538:  ADDWFC xB2,W
0853A:  MOVWF  03
0853C:  MOVF   01,W
0853E:  ADDWF  x65,W
08540:  MOVWF  FE9
08542:  MOVF   x66,W
08544:  ADDWFC 03,W
08546:  MOVWF  FEA
08548:  MOVFF  FEC,AAD
0854C:  MOVF   FED,F
0854E:  MOVFF  FEF,AAC
08552:  MOVLB  0
.................... 
....................         packetdata[packetdata_index++] = (data0 >> 4) & 0xFF;
08554:  MOVLB  A
08556:  MOVF   xA7,W
08558:  INCF   xA7,F
0855A:  CLRF   03
0855C:  ADDLW  67
0855E:  MOVWF  FE9
08560:  MOVLW  0A
08562:  ADDWFC 03,W
08564:  MOVWF  FEA
08566:  RRCF   xAB,W
08568:  MOVWF  xB2
0856A:  RRCF   xAA,W
0856C:  MOVWF  xB1
0856E:  RRCF   xB2,F
08570:  RRCF   xB1,F
08572:  RRCF   xB2,F
08574:  RRCF   xB1,F
08576:  RRCF   xB2,F
08578:  RRCF   xB1,F
0857A:  MOVLW  0F
0857C:  ANDWF  xB2,F
0857E:  MOVF   xB1,W
08580:  MOVWF  00
08582:  CLRF   03
08584:  MOVF   00,W
08586:  MOVWF  FEF
....................         packetdata[packetdata_index++] = ((data0 & 0x0F) << 4) | ((data1 >> 8) & 0x0F);
08588:  MOVF   xA7,W
0858A:  INCF   xA7,F
0858C:  CLRF   03
0858E:  ADDLW  67
08590:  MOVWF  FE9
08592:  MOVLW  0A
08594:  ADDWFC 03,W
08596:  MOVWF  FEA
08598:  MOVF   xAA,W
0859A:  ANDLW  0F
0859C:  MOVWF  xB1
0859E:  CLRF   xB2
085A0:  RLCF   xB1,F
085A2:  RLCF   xB2,F
085A4:  RLCF   xB1,F
085A6:  RLCF   xB2,F
085A8:  RLCF   xB1,F
085AA:  RLCF   xB2,F
085AC:  RLCF   xB1,F
085AE:  RLCF   xB2,F
085B0:  MOVLW  F0
085B2:  ANDWF  xB1,F
085B4:  MOVFF  AAD,AB3
085B8:  CLRF   xB4
085BA:  MOVF   xB3,W
085BC:  ANDLW  0F
085BE:  MOVWF  00
085C0:  CLRF   03
085C2:  MOVF   00,W
085C4:  IORWF  xB1,W
085C6:  MOVWF  00
085C8:  MOVF   03,W
085CA:  IORWF  xB2,W
085CC:  MOVWF  03
085CE:  MOVF   00,W
085D0:  MOVWF  FEF
....................         packetdata[packetdata_index++] = data1 & 0xFF;
085D2:  MOVF   xA7,W
085D4:  INCF   xA7,F
085D6:  CLRF   03
085D8:  ADDLW  67
085DA:  MOVWF  FE9
085DC:  MOVLW  0A
085DE:  ADDWFC 03,W
085E0:  MOVWF  FEA
085E2:  MOVF   xAC,W
085E4:  MOVWF  00
085E6:  CLRF   03
085E8:  MOVF   00,W
085EA:  MOVWF  FEF
.................... 
....................         if (packetdata_index + 3 >= PACKET_SIZE - 1) {
085EC:  MOVLW  03
085EE:  ADDWF  xA7,W
085F0:  SUBLW  3E
085F2:  BTFSS  FD8.0
085F4:  BRA    85FC
085F6:  MOVLB  0
085F8:  GOTO   867A
085FC:  MOVLB  0
....................             switch (port_data_ptr -> port_num) {
085FE:  MOVLB  A
08600:  MOVF   x65,W
08602:  MOVWF  FE9
08604:  MOVF   x66,W
08606:  MOVWF  FEA
08608:  MOVF   FEF,W
0860A:  XORLW  01
0860C:  MOVLB  0
0860E:  BTFSC  FD8.2
08610:  GOTO   8620
08614:  XORLW  03
08616:  BTFSC  FD8.2
08618:  GOTO   863E
0861C:  GOTO   865C
....................                 case 1:
....................                     // fprintf(PC, "DATA WRITE IV1\r\n");
....................                     misf_write_data(FLASH_ID_IV1_DATA, packetdata, PACKET_SIZE-1);
08620:  MOVLW  04
08622:  MOVLB  A
08624:  MOVWF  xAF
08626:  MOVLW  0A
08628:  MOVWF  xB1
0862A:  MOVLW  67
0862C:  MOVWF  xB0
0862E:  CLRF   xB3
08630:  MOVLW  3F
08632:  MOVWF  xB2
08634:  MOVLB  0
08636:  CALL   4446
....................                     break;
0863A:  GOTO   8660
....................                 case 2:
....................                     misf_write_data(FLASH_ID_IV2_DATA, packetdata, PACKET_SIZE-1);
0863E:  MOVLW  06
08640:  MOVLB  A
08642:  MOVWF  xAF
08644:  MOVLW  0A
08646:  MOVWF  xB1
08648:  MOVLW  67
0864A:  MOVWF  xB0
0864C:  CLRF   xB3
0864E:  MOVLW  3F
08650:  MOVWF  xB2
08652:  MOVLB  0
08654:  CALL   4446
....................                     break;
08658:  GOTO   8660
....................                 default:
....................                     break;
0865C:  GOTO   8660
....................             }
....................             packetdata_index = 0;
08660:  MOVLB  A
08662:  CLRF   xA7
....................             memset(packetdata, 0x00, PACKET_SIZE);
08664:  MOVLW  0A
08666:  MOVWF  FEA
08668:  MOVLW  67
0866A:  MOVWF  FE9
0866C:  CLRF   00
0866E:  CLRF   02
08670:  MOVLW  40
08672:  MOVWF  01
08674:  MOVLB  0
08676:  CALL   2B68
....................         }
0867A:  MOVLB  A
0867C:  INCF   xA8,F
0867E:  BTFSC  FD8.2
08680:  INCF   xA9,F
08682:  MOVLB  0
08684:  GOTO   84A0
....................     }
.................... 
....................     // 最後に残ったデータの処理
....................     if (packetdata_index > 0) {
08688:  MOVLB  A
0868A:  MOVF   xA7,F
0868C:  BTFSS  FD8.2
0868E:  BRA    8696
08690:  MOVLB  0
08692:  GOTO   874A
08696:  MOVLB  0
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE - 1; j++) {
08698:  MOVFF  AA7,AAE
0869C:  MOVLB  A
0869E:  MOVF   xAE,W
086A0:  SUBLW  3E
086A2:  BTFSC  FD8.0
086A4:  BRA    86AC
086A6:  MOVLB  0
086A8:  GOTO   86CC
086AC:  MOVLB  0
....................             packetdata[j] = 0x00;
086AE:  CLRF   03
086B0:  MOVLB  A
086B2:  MOVF   xAE,W
086B4:  ADDLW  67
086B6:  MOVWF  FE9
086B8:  MOVLW  0A
086BA:  ADDWFC 03,W
086BC:  MOVWF  FEA
086BE:  CLRF   FEF
086C0:  MOVLB  0
086C2:  MOVLB  A
086C4:  INCF   xAE,F
086C6:  MOVLB  0
086C8:  GOTO   869C
....................         }
....................         switch (port_data_ptr->port_num)
086CC:  MOVLB  A
086CE:  MOVF   x65,W
086D0:  MOVWF  FE9
086D2:  MOVF   x66,W
086D4:  MOVWF  FEA
086D6:  MOVF   FEF,W
086D8:  XORLW  01
086DA:  MOVLB  0
086DC:  BTFSC  FD8.2
086DE:  GOTO   86EE
086E2:  XORLW  03
086E4:  BTFSC  FD8.2
086E6:  GOTO   8728
086EA:  GOTO   8746
....................         {
....................             case 1:
....................                 misf_write_data(FLASH_ID_IV1_DATA, packetdata, PACKET_SIZE-1);
086EE:  MOVLW  04
086F0:  MOVLB  A
086F2:  MOVWF  xAF
086F4:  MOVLW  0A
086F6:  MOVWF  xB1
086F8:  MOVLW  67
086FA:  MOVWF  xB0
086FC:  CLRF   xB3
086FE:  MOVLW  3F
08700:  MOVWF  xB2
08702:  MOVLB  0
08704:  CALL   4446
....................                 // for (unsigned int32 j = 0; j < PACKET_SIZE; j++) {
....................                     // fprintf(PC, "%02X ", packetdata[j]);
....................                 // }
....................                 fprintf(PC, "\r\n");
08708:  MOVLW  0D
0870A:  BTFSS  FA6.6
0870C:  GOTO   870A
08710:  MOVLB  E
08712:  MOVWF  xF9
08714:  MOVLW  0A
08716:  MOVLB  0
08718:  BTFSS  FA6.6
0871A:  GOTO   8718
0871E:  MOVLB  E
08720:  MOVWF  xF9
....................                 break;
08722:  MOVLB  0
08724:  GOTO   874A
....................             case 2:
....................                 misf_write_data(FLASH_ID_IV2_DATA, packetdata, PACKET_SIZE-1);
08728:  MOVLW  06
0872A:  MOVLB  A
0872C:  MOVWF  xAF
0872E:  MOVLW  0A
08730:  MOVWF  xB1
08732:  MOVLW  67
08734:  MOVWF  xB0
08736:  CLRF   xB3
08738:  MOVLW  3F
0873A:  MOVWF  xB2
0873C:  MOVLB  0
0873E:  CALL   4446
....................                 break;
08742:  GOTO   874A
....................             default:
....................                 break;
08746:  GOTO   874A
....................         }
....................     }
0874A:  RETURN 0
.................... }
.................... 
.................... void log_meas_data_with_print(iv_env_t *measured_data_ptr, sweep_config_t *port_data_ptr)
*
0A27E:  CLRF   x99
0A280:  BSF    x9A.0
0A282:  CLRF   x9C
0A284:  CLRF   x9B
.................... {
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; 
*
0A1FC:  MOVLB  A
0A1FE:  CLRF   x59
0A200:  CLRF   x5A
0A202:  CLRF   x5B
0A204:  CLRF   x5C
0A206:  CLRF   x5D
0A208:  CLRF   x5E
0A20A:  CLRF   x5F
0A20C:  CLRF   x60
0A20E:  CLRF   x61
0A210:  CLRF   x62
0A212:  CLRF   x63
0A214:  CLRF   x64
0A216:  CLRF   x65
0A218:  CLRF   x66
0A21A:  CLRF   x67
0A21C:  CLRF   x68
0A21E:  CLRF   x69
0A220:  CLRF   x6A
0A222:  CLRF   x6B
0A224:  CLRF   x6C
0A226:  CLRF   x6D
0A228:  CLRF   x6E
0A22A:  CLRF   x6F
0A22C:  CLRF   x70
0A22E:  CLRF   x71
0A230:  CLRF   x72
0A232:  CLRF   x73
0A234:  CLRF   x74
0A236:  CLRF   x75
0A238:  CLRF   x76
0A23A:  CLRF   x77
0A23C:  CLRF   x78
0A23E:  CLRF   x79
0A240:  CLRF   x7A
0A242:  CLRF   x7B
0A244:  CLRF   x7C
0A246:  CLRF   x7D
0A248:  CLRF   x7E
0A24A:  CLRF   x7F
0A24C:  CLRF   x80
0A24E:  CLRF   x81
0A250:  CLRF   x82
0A252:  CLRF   x83
0A254:  CLRF   x84
0A256:  CLRF   x85
0A258:  CLRF   x86
0A25A:  CLRF   x87
0A25C:  CLRF   x88
0A25E:  CLRF   x89
0A260:  CLRF   x8A
0A262:  CLRF   x8B
0A264:  CLRF   x8C
0A266:  CLRF   x8D
0A268:  CLRF   x8E
0A26A:  CLRF   x8F
0A26C:  CLRF   x90
0A26E:  CLRF   x91
0A270:  CLRF   x92
0A272:  CLRF   x93
0A274:  CLRF   x94
0A276:  CLRF   x95
0A278:  CLRF   x96
0A27A:  CLRF   x97
0A27C:  CLRF   x98
....................     unsigned int8 packet_index = 0;
....................     int1 first_packet = true; // 最初のパケットフラグ
.................... 
.................... 
....................     unsigned int16 sweep_index = 0;
....................     // ==== データステップ書き込み ====
....................     for (unsigned int16 i = 0; i < port_data_ptr->sweep_step; i++) {
*
0A286:  CLRF   x9E
0A288:  CLRF   x9D
0A28A:  MOVLB  0
0A28C:  MOVLW  01
0A28E:  MOVLB  A
0A290:  ADDWF  x57,W
0A292:  MOVWF  FE9
0A294:  MOVLW  00
0A296:  ADDWFC x58,W
0A298:  MOVWF  FEA
0A29A:  MOVFF  FEC,03
0A29E:  MOVF   FED,F
0A2A0:  MOVF   FEF,W
0A2A2:  MOVWF  01
0A2A4:  MOVF   x9E,W
0A2A6:  SUBWF  03,W
0A2A8:  BTFSC  FD8.0
0A2AA:  BRA    A2B2
0A2AC:  MOVLB  0
0A2AE:  GOTO   AB08
0A2B2:  MOVLB  0
0A2B4:  BTFSS  FD8.2
0A2B6:  GOTO   A2CC
0A2BA:  MOVF   01,W
0A2BC:  MOVLB  A
0A2BE:  SUBWF  x9D,W
0A2C0:  BTFSS  FD8.0
0A2C2:  BRA    A2CA
0A2C4:  MOVLB  0
0A2C6:  GOTO   AB08
0A2CA:  MOVLB  0
....................         unsigned int16 data0 = port_data_ptr->data_buffer[i].voltage;
....................         unsigned int16 data1 = port_data_ptr->data_buffer[i].current;
0A2CC:  MOVLB  A
0A2CE:  RLCF   x9D,W
0A2D0:  MOVWF  02
0A2D2:  RLCF   x9E,W
0A2D4:  MOVWF  03
0A2D6:  RLCF   02,F
0A2D8:  RLCF   03,F
0A2DA:  MOVLW  FC
0A2DC:  ANDWF  02,F
0A2DE:  MOVF   02,W
0A2E0:  ADDLW  03
0A2E2:  MOVWF  xB5
0A2E4:  MOVLW  00
0A2E6:  ADDWFC 03,W
0A2E8:  MOVWF  xB6
0A2EA:  MOVF   x57,W
0A2EC:  ADDWF  xB5,W
0A2EE:  MOVWF  FE9
0A2F0:  MOVF   x58,W
0A2F2:  ADDWFC xB6,W
0A2F4:  MOVWF  FEA
0A2F6:  MOVFF  FEC,AA0
0A2FA:  MOVF   FED,F
0A2FC:  MOVFF  FEF,A9F
0A300:  RLCF   x9D,W
0A302:  MOVWF  02
0A304:  RLCF   x9E,W
0A306:  MOVWF  03
0A308:  RLCF   02,F
0A30A:  RLCF   03,F
0A30C:  MOVLW  FC
0A30E:  ANDWF  02,F
0A310:  MOVF   02,W
0A312:  ADDLW  03
0A314:  MOVWF  xB7
0A316:  MOVLW  00
0A318:  ADDWFC 03,W
0A31A:  MOVWF  xB8
0A31C:  MOVLW  02
0A31E:  ADDWF  xB7,W
0A320:  MOVWF  01
0A322:  MOVLW  00
0A324:  ADDWFC xB8,W
0A326:  MOVWF  03
0A328:  MOVF   01,W
0A32A:  ADDWF  x57,W
0A32C:  MOVWF  FE9
0A32E:  MOVF   x58,W
0A330:  ADDWFC 03,W
0A332:  MOVWF  FEA
0A334:  MOVFF  FEC,AA2
0A338:  MOVF   FED,F
0A33A:  MOVFF  FEF,AA1
0A33E:  MOVLB  0
.................... 
....................         // パケットがいっぱいになる前にヘッダ＋環境データを入れる
....................         if (packet_index == 0) {
0A340:  MOVLB  A
0A342:  MOVF   x99,F
0A344:  BTFSC  FD8.2
0A346:  BRA    A34E
0A348:  MOVLB  0
0A34A:  GOTO   A764
0A34E:  MOVLB  0
....................             unsigned int8 idx = 0;
0A350:  MOVLB  A
0A352:  CLRF   xA3
0A354:  MOVLB  0
....................             if (first_packet) {
0A356:  MOVLB  A
0A358:  BTFSC  x9A.0
0A35A:  BRA    A362
0A35C:  MOVLB  0
0A35E:  GOTO   A37C
0A362:  MOVLB  0
....................                 packetdata[idx++] = START_MAKER;  // 最初のパケットだけ
0A364:  MOVLB  A
0A366:  MOVF   xA3,W
0A368:  INCF   xA3,F
0A36A:  CLRF   03
0A36C:  ADDLW  59
0A36E:  MOVWF  FE9
0A370:  MOVLW  0A
0A372:  ADDWFC 03,W
0A374:  MOVWF  FEA
0A376:  SETF   FEF
....................                 first_packet = false;
0A378:  BCF    x9A.0
0A37A:  MOVLB  0
....................             }
.................... 
....................             // timeヘッダ
....................             packetdata[idx++] = (measured_data_ptr->time >> 24) & 0xFF;
0A37C:  MOVLB  A
0A37E:  MOVF   xA3,W
0A380:  INCF   xA3,F
0A382:  CLRF   03
0A384:  ADDLW  59
0A386:  MOVWF  01
0A388:  MOVLW  0A
0A38A:  ADDWFC 03,F
0A38C:  MOVF   01,W
0A38E:  MOVWF  xB5
0A390:  MOVFF  03,AB6
0A394:  MOVF   x55,W
0A396:  MOVWF  FE9
0A398:  MOVF   x56,W
0A39A:  MOVWF  FEA
0A39C:  MOVFF  FEF,AB7
0A3A0:  MOVFF  FEC,AB8
0A3A4:  MOVFF  FEC,AB9
0A3A8:  MOVFF  FEC,ABA
0A3AC:  MOVF   FED,F
0A3AE:  MOVF   FED,F
0A3B0:  MOVF   FED,F
0A3B2:  MOVFF  ABA,AB7
0A3B6:  CLRF   xB8
0A3B8:  CLRF   xB9
0A3BA:  CLRF   xBA
0A3BC:  MOVF   xB7,W
0A3BE:  MOVWF  00
0A3C0:  CLRF   01
0A3C2:  CLRF   02
0A3C4:  CLRF   03
0A3C6:  MOVFF  03,ABA
0A3CA:  MOVFF  02,AB9
0A3CE:  MOVFF  01,AB8
0A3D2:  MOVFF  00,AB7
0A3D6:  MOVFF  AB6,FEA
0A3DA:  MOVFF  AB5,FE9
0A3DE:  MOVFF  AB7,FEF
....................             packetdata[idx++] = (measured_data_ptr->time >> 16) & 0xFF;
0A3E2:  MOVF   xA3,W
0A3E4:  INCF   xA3,F
0A3E6:  CLRF   03
0A3E8:  ADDLW  59
0A3EA:  MOVWF  01
0A3EC:  MOVLW  0A
0A3EE:  ADDWFC 03,F
0A3F0:  MOVF   01,W
0A3F2:  MOVWF  xB5
0A3F4:  MOVFF  03,AB6
0A3F8:  MOVF   x55,W
0A3FA:  MOVWF  FE9
0A3FC:  MOVF   x56,W
0A3FE:  MOVWF  FEA
0A400:  MOVFF  FEF,AB7
0A404:  MOVFF  FEC,AB8
0A408:  MOVFF  FEC,AB9
0A40C:  MOVFF  FEC,ABA
0A410:  MOVF   FED,F
0A412:  MOVF   FED,F
0A414:  MOVF   FED,F
0A416:  MOVFF  AB9,AB7
0A41A:  MOVFF  ABA,AB8
0A41E:  CLRF   xB9
0A420:  CLRF   xBA
0A422:  MOVF   xB7,W
0A424:  MOVWF  00
0A426:  CLRF   01
0A428:  CLRF   02
0A42A:  CLRF   03
0A42C:  MOVFF  03,ABA
0A430:  MOVFF  02,AB9
0A434:  MOVFF  01,AB8
0A438:  MOVFF  00,AB7
0A43C:  MOVFF  AB6,FEA
0A440:  MOVFF  AB5,FE9
0A444:  MOVFF  AB7,FEF
....................             packetdata[idx++] = (measured_data_ptr->time >> 8) & 0xFF;
0A448:  MOVF   xA3,W
0A44A:  INCF   xA3,F
0A44C:  CLRF   03
0A44E:  ADDLW  59
0A450:  MOVWF  01
0A452:  MOVLW  0A
0A454:  ADDWFC 03,F
0A456:  MOVF   01,W
0A458:  MOVWF  xB5
0A45A:  MOVFF  03,AB6
0A45E:  MOVF   x55,W
0A460:  MOVWF  FE9
0A462:  MOVF   x56,W
0A464:  MOVWF  FEA
0A466:  MOVFF  FEF,AB7
0A46A:  MOVFF  FEC,AB8
0A46E:  MOVFF  FEC,AB9
0A472:  MOVFF  FEC,ABA
0A476:  MOVF   FED,F
0A478:  MOVF   FED,F
0A47A:  MOVF   FED,F
0A47C:  MOVFF  AB8,AB7
0A480:  MOVFF  AB9,AB8
0A484:  MOVFF  ABA,AB9
0A488:  CLRF   xBA
0A48A:  MOVF   xB7,W
0A48C:  MOVWF  00
0A48E:  CLRF   01
0A490:  CLRF   02
0A492:  CLRF   03
0A494:  MOVFF  03,ABA
0A498:  MOVFF  02,AB9
0A49C:  MOVFF  01,AB8
0A4A0:  MOVFF  00,AB7
0A4A4:  MOVFF  AB6,FEA
0A4A8:  MOVFF  AB5,FE9
0A4AC:  MOVFF  AB7,FEF
....................             packetdata[idx++] = measured_data_ptr->time & 0xFF;
0A4B0:  MOVF   xA3,W
0A4B2:  INCF   xA3,F
0A4B4:  CLRF   03
0A4B6:  ADDLW  59
0A4B8:  MOVWF  01
0A4BA:  MOVLW  0A
0A4BC:  ADDWFC 03,F
0A4BE:  MOVF   01,W
0A4C0:  MOVWF  xB5
0A4C2:  MOVFF  03,AB6
0A4C6:  MOVF   x55,W
0A4C8:  MOVWF  FE9
0A4CA:  MOVF   x56,W
0A4CC:  MOVWF  FEA
0A4CE:  MOVFF  FEF,AB7
0A4D2:  MOVFF  FEC,AB8
0A4D6:  MOVFF  FEC,AB9
0A4DA:  MOVFF  FEC,ABA
0A4DE:  MOVF   FED,F
0A4E0:  MOVF   FED,F
0A4E2:  MOVF   FED,F
0A4E4:  MOVF   xB7,W
0A4E6:  MOVWF  00
0A4E8:  CLRF   01
0A4EA:  CLRF   02
0A4EC:  CLRF   03
0A4EE:  MOVFF  03,ABA
0A4F2:  MOVFF  02,AB9
0A4F6:  MOVFF  01,AB8
0A4FA:  MOVFF  00,AB7
0A4FE:  MOVFF  AB6,FEA
0A502:  MOVFF  AB5,FE9
0A506:  MOVFF  AB7,FEF
.................... 
....................             // 環境データ
....................             packetdata[idx++] = (measured_data_ptr->pd >> 4) & 0xFF;
0A50A:  MOVF   xA3,W
0A50C:  INCF   xA3,F
0A50E:  CLRF   03
0A510:  ADDLW  59
0A512:  MOVWF  01
0A514:  MOVLW  0A
0A516:  ADDWFC 03,F
0A518:  MOVF   01,W
0A51A:  MOVWF  xB5
0A51C:  MOVFF  03,AB6
0A520:  MOVLW  04
0A522:  ADDWF  x55,W
0A524:  MOVWF  FE9
0A526:  MOVLW  00
0A528:  ADDWFC x56,W
0A52A:  MOVWF  FEA
0A52C:  MOVFF  FEC,AB8
0A530:  MOVF   FED,F
0A532:  MOVFF  FEF,AB7
0A536:  RRCF   xB8,F
0A538:  RRCF   xB7,F
0A53A:  RRCF   xB8,F
0A53C:  RRCF   xB7,F
0A53E:  RRCF   xB8,F
0A540:  RRCF   xB7,F
0A542:  RRCF   xB8,F
0A544:  RRCF   xB7,F
0A546:  MOVLW  0F
0A548:  ANDWF  xB8,F
0A54A:  MOVF   xB7,W
0A54C:  MOVWF  00
0A54E:  CLRF   03
0A550:  MOVF   00,W
0A552:  MOVWF  xB7
0A554:  MOVFF  03,AB8
0A558:  MOVFF  AB6,FEA
0A55C:  MOVFF  AB5,FE9
0A560:  MOVFF  AB7,FEF
....................             packetdata[idx++] = ((measured_data_ptr->pd & 0x0F) << 4) | ((measured_data_ptr->temp_py_top >> 8) & 0x0F);
0A564:  MOVF   xA3,W
0A566:  INCF   xA3,F
0A568:  CLRF   03
0A56A:  ADDLW  59
0A56C:  MOVWF  01
0A56E:  MOVLW  0A
0A570:  ADDWFC 03,F
0A572:  MOVF   01,W
0A574:  MOVWF  xB5
0A576:  MOVFF  03,AB6
0A57A:  MOVLW  04
0A57C:  ADDWF  x55,W
0A57E:  MOVWF  FE9
0A580:  MOVLW  00
0A582:  ADDWFC x56,W
0A584:  MOVWF  FEA
0A586:  MOVFF  FEC,AB8
0A58A:  MOVF   FED,F
0A58C:  MOVFF  FEF,AB7
0A590:  MOVLW  0F
0A592:  ANDWF  xB7,F
0A594:  CLRF   xB8
0A596:  RLCF   xB7,F
0A598:  RLCF   xB8,F
0A59A:  RLCF   xB7,F
0A59C:  RLCF   xB8,F
0A59E:  RLCF   xB7,F
0A5A0:  RLCF   xB8,F
0A5A2:  RLCF   xB7,F
0A5A4:  RLCF   xB8,F
0A5A6:  MOVLW  F0
0A5A8:  ANDWF  xB7,F
0A5AA:  MOVLW  06
0A5AC:  ADDWF  x55,W
0A5AE:  MOVWF  FE9
0A5B0:  MOVLW  00
0A5B2:  ADDWFC x56,W
0A5B4:  MOVWF  FEA
0A5B6:  MOVFF  FEC,ABA
0A5BA:  MOVF   FED,F
0A5BC:  MOVFF  FEF,AB9
0A5C0:  MOVFF  ABA,AB9
0A5C4:  CLRF   xBA
0A5C6:  MOVF   xB9,W
0A5C8:  ANDLW  0F
0A5CA:  MOVWF  00
0A5CC:  CLRF   03
0A5CE:  MOVF   00,W
0A5D0:  IORWF  xB7,W
0A5D2:  MOVWF  00
0A5D4:  MOVF   03,W
0A5D6:  IORWF  xB8,W
0A5D8:  MOVWF  03
0A5DA:  MOVF   00,W
0A5DC:  MOVWF  xB7
0A5DE:  MOVFF  03,AB8
0A5E2:  MOVFF  AB6,FEA
0A5E6:  MOVFF  AB5,FE9
0A5EA:  MOVFF  AB7,FEF
....................             packetdata[idx++] = measured_data_ptr->temp_py_top & 0xFF;
0A5EE:  MOVF   xA3,W
0A5F0:  INCF   xA3,F
0A5F2:  CLRF   03
0A5F4:  ADDLW  59
0A5F6:  MOVWF  01
0A5F8:  MOVLW  0A
0A5FA:  ADDWFC 03,F
0A5FC:  MOVF   01,W
0A5FE:  MOVWF  xB5
0A600:  MOVFF  03,AB6
0A604:  MOVLW  06
0A606:  ADDWF  x55,W
0A608:  MOVWF  FE9
0A60A:  MOVLW  00
0A60C:  ADDWFC x56,W
0A60E:  MOVWF  FEA
0A610:  MOVFF  FEC,AB8
0A614:  MOVF   FED,F
0A616:  MOVFF  FEF,AB7
0A61A:  MOVF   xB7,W
0A61C:  MOVWF  00
0A61E:  CLRF   03
0A620:  MOVF   00,W
0A622:  MOVWF  xB7
0A624:  MOVFF  03,AB8
0A628:  MOVFF  AB6,FEA
0A62C:  MOVFF  AB5,FE9
0A630:  MOVFF  AB7,FEF
....................             packetdata[idx++] = (measured_data_ptr->temp_py_bot >> 4) & 0xFF;
0A634:  MOVF   xA3,W
0A636:  INCF   xA3,F
0A638:  CLRF   03
0A63A:  ADDLW  59
0A63C:  MOVWF  01
0A63E:  MOVLW  0A
0A640:  ADDWFC 03,F
0A642:  MOVF   01,W
0A644:  MOVWF  xB5
0A646:  MOVFF  03,AB6
0A64A:  MOVLW  08
0A64C:  ADDWF  x55,W
0A64E:  MOVWF  FE9
0A650:  MOVLW  00
0A652:  ADDWFC x56,W
0A654:  MOVWF  FEA
0A656:  MOVFF  FEC,AB8
0A65A:  MOVF   FED,F
0A65C:  MOVFF  FEF,AB7
0A660:  RRCF   xB8,F
0A662:  RRCF   xB7,F
0A664:  RRCF   xB8,F
0A666:  RRCF   xB7,F
0A668:  RRCF   xB8,F
0A66A:  RRCF   xB7,F
0A66C:  RRCF   xB8,F
0A66E:  RRCF   xB7,F
0A670:  MOVLW  0F
0A672:  ANDWF  xB8,F
0A674:  MOVF   xB7,W
0A676:  MOVWF  00
0A678:  CLRF   03
0A67A:  MOVF   00,W
0A67C:  MOVWF  xB7
0A67E:  MOVFF  03,AB8
0A682:  MOVFF  AB6,FEA
0A686:  MOVFF  AB5,FE9
0A68A:  MOVFF  AB7,FEF
....................             packetdata[idx++] = ((measured_data_ptr->temp_py_bot & 0x0F) << 4) | ((measured_data_ptr->temp_mis7 >> 8) & 0x0F);
0A68E:  MOVF   xA3,W
0A690:  INCF   xA3,F
0A692:  CLRF   03
0A694:  ADDLW  59
0A696:  MOVWF  01
0A698:  MOVLW  0A
0A69A:  ADDWFC 03,F
0A69C:  MOVF   01,W
0A69E:  MOVWF  xB5
0A6A0:  MOVFF  03,AB6
0A6A4:  MOVLW  08
0A6A6:  ADDWF  x55,W
0A6A8:  MOVWF  FE9
0A6AA:  MOVLW  00
0A6AC:  ADDWFC x56,W
0A6AE:  MOVWF  FEA
0A6B0:  MOVFF  FEC,AB8
0A6B4:  MOVF   FED,F
0A6B6:  MOVFF  FEF,AB7
0A6BA:  MOVLW  0F
0A6BC:  ANDWF  xB7,F
0A6BE:  CLRF   xB8
0A6C0:  RLCF   xB7,F
0A6C2:  RLCF   xB8,F
0A6C4:  RLCF   xB7,F
0A6C6:  RLCF   xB8,F
0A6C8:  RLCF   xB7,F
0A6CA:  RLCF   xB8,F
0A6CC:  RLCF   xB7,F
0A6CE:  RLCF   xB8,F
0A6D0:  MOVLW  F0
0A6D2:  ANDWF  xB7,F
0A6D4:  MOVLW  0A
0A6D6:  ADDWF  x55,W
0A6D8:  MOVWF  FE9
0A6DA:  MOVLW  00
0A6DC:  ADDWFC x56,W
0A6DE:  MOVWF  FEA
0A6E0:  MOVFF  FEC,ABA
0A6E4:  MOVF   FED,F
0A6E6:  MOVFF  FEF,AB9
0A6EA:  MOVFF  ABA,AB9
0A6EE:  CLRF   xBA
0A6F0:  MOVF   xB9,W
0A6F2:  ANDLW  0F
0A6F4:  MOVWF  00
0A6F6:  CLRF   03
0A6F8:  MOVF   00,W
0A6FA:  IORWF  xB7,W
0A6FC:  MOVWF  00
0A6FE:  MOVF   03,W
0A700:  IORWF  xB8,W
0A702:  MOVWF  03
0A704:  MOVF   00,W
0A706:  MOVWF  xB7
0A708:  MOVFF  03,AB8
0A70C:  MOVFF  AB6,FEA
0A710:  MOVFF  AB5,FE9
0A714:  MOVFF  AB7,FEF
....................             packetdata[idx++] = measured_data_ptr->temp_mis7 & 0xFF;
0A718:  MOVF   xA3,W
0A71A:  INCF   xA3,F
0A71C:  CLRF   03
0A71E:  ADDLW  59
0A720:  MOVWF  01
0A722:  MOVLW  0A
0A724:  ADDWFC 03,F
0A726:  MOVF   01,W
0A728:  MOVWF  xB5
0A72A:  MOVFF  03,AB6
0A72E:  MOVLW  0A
0A730:  ADDWF  x55,W
0A732:  MOVWF  FE9
0A734:  MOVLW  00
0A736:  ADDWFC x56,W
0A738:  MOVWF  FEA
0A73A:  MOVFF  FEC,AB8
0A73E:  MOVF   FED,F
0A740:  MOVFF  FEF,AB7
0A744:  MOVF   xB7,W
0A746:  MOVWF  00
0A748:  CLRF   03
0A74A:  MOVF   00,W
0A74C:  MOVWF  xB7
0A74E:  MOVFF  03,AB8
0A752:  MOVFF  AB6,FEA
0A756:  MOVFF  AB5,FE9
0A75A:  MOVFF  AB7,FEF
.................... 
....................             packet_index = idx;
0A75E:  MOVFF  AA3,A99
0A762:  MOVLB  0
....................         }
.................... 
....................         // パケットに収まるかチェック
....................         if (packet_index + DATA_SIZE_PER_STEP >= PACKET_SIZE) {
0A764:  MOVLW  03
0A766:  MOVLB  A
0A768:  ADDWF  x99,W
0A76A:  SUBLW  3F
0A76C:  BTFSS  FD8.0
0A76E:  BRA    A776
0A770:  MOVLB  0
0A772:  GOTO   AA60
0A776:  MOVLB  0
....................             // フラッシュ書き込み
....................             unsigned int32 write_address = MISF_CIGS_IV1_DATA_START;
0A778:  MOVLB  A
0A77A:  CLRF   xA7
0A77C:  MOVLW  7C
0A77E:  MOVWF  xA6
0A780:  MOVLW  10
0A782:  MOVWF  xA5
0A784:  CLRF   xA4
0A786:  MOVLB  0
....................             switch (port_data_ptr->port_num) {
0A788:  MOVLB  A
0A78A:  MOVF   x57,W
0A78C:  MOVWF  FE9
0A78E:  MOVF   x58,W
0A790:  MOVWF  FEA
0A792:  MOVF   FEF,W
0A794:  XORLW  01
0A796:  MOVLB  0
0A798:  BTFSC  FD8.2
0A79A:  GOTO   A7AA
0A79E:  XORLW  03
0A7A0:  BTFSC  FD8.2
0A7A2:  GOTO   A89E
0A7A6:  GOTO   A992
....................                 case 1:
....................                     write_address += iv1_data_ptr->used_counter;
0A7AA:  MOVLW  01
0A7AC:  MOVLB  1
0A7AE:  ADDWF  x28,W
0A7B0:  MOVWF  FE9
0A7B2:  MOVLW  00
0A7B4:  ADDWFC x29,W
0A7B6:  MOVWF  FEA
0A7B8:  MOVFF  FEF,00
0A7BC:  MOVFF  FEC,01
0A7C0:  MOVFF  FEC,02
0A7C4:  MOVFF  FEC,03
0A7C8:  MOVF   FED,F
0A7CA:  MOVF   FED,F
0A7CC:  MOVF   FED,F
0A7CE:  MOVF   00,W
0A7D0:  MOVLB  A
0A7D2:  ADDWF  xA4,F
0A7D4:  MOVF   01,W
0A7D6:  ADDWFC xA5,F
0A7D8:  MOVF   02,W
0A7DA:  ADDWFC xA6,F
0A7DC:  MOVF   03,W
0A7DE:  ADDWFC xA7,F
....................                     write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
0A7E0:  MOVFF  115,B91
0A7E4:  MOVFF  114,B90
0A7E8:  MOVFF  113,B8F
0A7EC:  MOVFF  112,B8E
0A7F0:  MOVFF  AA7,B95
0A7F4:  MOVFF  AA6,B94
0A7F8:  MOVFF  AA5,B93
0A7FC:  MOVFF  AA4,B92
0A800:  MOVLW  0A
0A802:  MOVLB  B
0A804:  MOVWF  x97
0A806:  MOVLW  59
0A808:  MOVWF  x96
0A80A:  CLRF   x99
0A80C:  MOVLW  40
0A80E:  MOVWF  x98
0A810:  MOVLB  0
0A812:  CALL   3B7C
....................                     iv1_data_ptr->used_counter += PACKET_SIZE;
0A816:  MOVLW  01
0A818:  MOVLB  1
0A81A:  ADDWF  x28,W
0A81C:  MOVWF  FE9
0A81E:  MOVLW  00
0A820:  ADDWFC x29,W
0A822:  MOVWF  FEA
0A824:  MOVLW  40
0A826:  ADDWF  FEF,W
0A828:  MOVWF  00
0A82A:  MOVLW  00
0A82C:  ADDWFC FEC,W
0A82E:  MOVWF  01
0A830:  MOVLW  00
0A832:  ADDWFC FEC,W
0A834:  MOVWF  02
0A836:  MOVLW  00
0A838:  ADDWFC FEC,W
0A83A:  MOVWF  03
0A83C:  MOVF   FED,F
0A83E:  MOVF   FED,F
0A840:  MOVF   FED,F
0A842:  MOVFF  00,FEF
0A846:  MOVFF  01,FEC
0A84A:  MOVFF  02,FEC
0A84E:  MOVFF  03,FEC
0A852:  MOVF   FED,F
0A854:  MOVF   FED,F
0A856:  MOVF   FED,F
....................                     iv1_data_ptr->uncopied_counter += PACKET_SIZE;
0A858:  MOVLW  05
0A85A:  ADDWF  x28,W
0A85C:  MOVWF  FE9
0A85E:  MOVLW  00
0A860:  ADDWFC x29,W
0A862:  MOVWF  FEA
0A864:  MOVLW  40
0A866:  ADDWF  FEF,W
0A868:  MOVWF  00
0A86A:  MOVLW  00
0A86C:  ADDWFC FEC,W
0A86E:  MOVWF  01
0A870:  MOVLW  00
0A872:  ADDWFC FEC,W
0A874:  MOVWF  02
0A876:  MOVLW  00
0A878:  ADDWFC FEC,W
0A87A:  MOVWF  03
0A87C:  MOVF   FED,F
0A87E:  MOVF   FED,F
0A880:  MOVF   FED,F
0A882:  MOVFF  00,FEF
0A886:  MOVFF  01,FEC
0A88A:  MOVFF  02,FEC
0A88E:  MOVFF  03,FEC
0A892:  MOVF   FED,F
0A894:  MOVF   FED,F
0A896:  MOVF   FED,F
....................                     break;
0A898:  MOVLB  0
0A89A:  GOTO   A996
....................                 case 2:
....................                     write_address += iv2_data_ptr->used_counter;
0A89E:  MOVLW  01
0A8A0:  MOVLB  1
0A8A2:  ADDWF  x2C,W
0A8A4:  MOVWF  FE9
0A8A6:  MOVLW  00
0A8A8:  ADDWFC x2D,W
0A8AA:  MOVWF  FEA
0A8AC:  MOVFF  FEF,00
0A8B0:  MOVFF  FEC,01
0A8B4:  MOVFF  FEC,02
0A8B8:  MOVFF  FEC,03
0A8BC:  MOVF   FED,F
0A8BE:  MOVF   FED,F
0A8C0:  MOVF   FED,F
0A8C2:  MOVF   00,W
0A8C4:  MOVLB  A
0A8C6:  ADDWF  xA4,F
0A8C8:  MOVF   01,W
0A8CA:  ADDWFC xA5,F
0A8CC:  MOVF   02,W
0A8CE:  ADDWFC xA6,F
0A8D0:  MOVF   03,W
0A8D2:  ADDWFC xA7,F
....................                     write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
0A8D4:  MOVFF  115,B91
0A8D8:  MOVFF  114,B90
0A8DC:  MOVFF  113,B8F
0A8E0:  MOVFF  112,B8E
0A8E4:  MOVFF  AA7,B95
0A8E8:  MOVFF  AA6,B94
0A8EC:  MOVFF  AA5,B93
0A8F0:  MOVFF  AA4,B92
0A8F4:  MOVLW  0A
0A8F6:  MOVLB  B
0A8F8:  MOVWF  x97
0A8FA:  MOVLW  59
0A8FC:  MOVWF  x96
0A8FE:  CLRF   x99
0A900:  MOVLW  40
0A902:  MOVWF  x98
0A904:  MOVLB  0
0A906:  CALL   3B7C
....................                     iv2_data_ptr->used_counter += PACKET_SIZE;
0A90A:  MOVLW  01
0A90C:  MOVLB  1
0A90E:  ADDWF  x2C,W
0A910:  MOVWF  FE9
0A912:  MOVLW  00
0A914:  ADDWFC x2D,W
0A916:  MOVWF  FEA
0A918:  MOVLW  40
0A91A:  ADDWF  FEF,W
0A91C:  MOVWF  00
0A91E:  MOVLW  00
0A920:  ADDWFC FEC,W
0A922:  MOVWF  01
0A924:  MOVLW  00
0A926:  ADDWFC FEC,W
0A928:  MOVWF  02
0A92A:  MOVLW  00
0A92C:  ADDWFC FEC,W
0A92E:  MOVWF  03
0A930:  MOVF   FED,F
0A932:  MOVF   FED,F
0A934:  MOVF   FED,F
0A936:  MOVFF  00,FEF
0A93A:  MOVFF  01,FEC
0A93E:  MOVFF  02,FEC
0A942:  MOVFF  03,FEC
0A946:  MOVF   FED,F
0A948:  MOVF   FED,F
0A94A:  MOVF   FED,F
....................                     iv2_data_ptr->uncopied_counter += PACKET_SIZE;
0A94C:  MOVLW  05
0A94E:  ADDWF  x2C,W
0A950:  MOVWF  FE9
0A952:  MOVLW  00
0A954:  ADDWFC x2D,W
0A956:  MOVWF  FEA
0A958:  MOVLW  40
0A95A:  ADDWF  FEF,W
0A95C:  MOVWF  00
0A95E:  MOVLW  00
0A960:  ADDWFC FEC,W
0A962:  MOVWF  01
0A964:  MOVLW  00
0A966:  ADDWFC FEC,W
0A968:  MOVWF  02
0A96A:  MOVLW  00
0A96C:  ADDWFC FEC,W
0A96E:  MOVWF  03
0A970:  MOVF   FED,F
0A972:  MOVF   FED,F
0A974:  MOVF   FED,F
0A976:  MOVFF  00,FEF
0A97A:  MOVFF  01,FEC
0A97E:  MOVFF  02,FEC
0A982:  MOVFF  03,FEC
0A986:  MOVF   FED,F
0A988:  MOVF   FED,F
0A98A:  MOVF   FED,F
....................                     break;
0A98C:  MOVLB  0
0A98E:  GOTO   A996
....................                 default:
....................                     break;
0A992:  GOTO   A996
....................             }
.................... 
....................             // デバッグ表示
....................             fprintf(PC, "\r\n");
0A996:  MOVLW  0D
0A998:  BTFSS  FA6.6
0A99A:  GOTO   A998
0A99E:  MOVLB  E
0A9A0:  MOVWF  xF9
0A9A2:  MOVLW  0A
0A9A4:  MOVLB  0
0A9A6:  BTFSS  FA6.6
0A9A8:  GOTO   A9A6
0A9AC:  MOVLB  E
0A9AE:  MOVWF  xF9
....................             for (unsigned int32 j = 0; j < PACKET_SIZE; j++) {
0A9B0:  MOVLB  A
0A9B2:  CLRF   xAB
0A9B4:  CLRF   xAA
0A9B6:  CLRF   xA9
0A9B8:  CLRF   xA8
0A9BA:  MOVLB  0
0A9BC:  MOVLB  A
0A9BE:  MOVF   xAB,F
0A9C0:  BTFSC  FD8.2
0A9C2:  BRA    A9CA
0A9C4:  MOVLB  0
0A9C6:  GOTO   AA46
0A9CA:  MOVLB  0
0A9CC:  MOVLB  A
0A9CE:  MOVF   xAA,F
0A9D0:  BTFSC  FD8.2
0A9D2:  BRA    A9DA
0A9D4:  MOVLB  0
0A9D6:  GOTO   AA46
0A9DA:  MOVLB  0
0A9DC:  MOVLB  A
0A9DE:  MOVF   xA9,F
0A9E0:  BTFSC  FD8.2
0A9E2:  BRA    A9EA
0A9E4:  MOVLB  0
0A9E6:  GOTO   AA46
0A9EA:  MOVLB  0
0A9EC:  MOVLB  A
0A9EE:  MOVF   xA8,W
0A9F0:  SUBLW  3F
0A9F2:  BTFSC  FD8.0
0A9F4:  BRA    A9FC
0A9F6:  MOVLB  0
0A9F8:  GOTO   AA46
0A9FC:  MOVLB  0
....................                 fprintf(PC, "%02X ", packetdata[j]);
0A9FE:  MOVLW  59
0AA00:  MOVLB  A
0AA02:  ADDWF  xA8,W
0AA04:  MOVWF  FE9
0AA06:  MOVLW  0A
0AA08:  ADDWFC xA9,W
0AA0A:  MOVWF  FEA
0AA0C:  MOVFF  FEF,AB5
0AA10:  MOVFF  AB5,B4B
0AA14:  MOVLW  37
0AA16:  MOVLB  B
0AA18:  MOVWF  x4C
0AA1A:  MOVLB  0
0AA1C:  CALL   2188
0AA20:  MOVLW  20
0AA22:  BTFSS  FA6.6
0AA24:  GOTO   AA22
0AA28:  MOVLB  E
0AA2A:  MOVWF  xF9
0AA2C:  MOVLB  0
0AA2E:  MOVLW  01
0AA30:  MOVLB  A
0AA32:  ADDWF  xA8,F
0AA34:  BTFSC  FD8.0
0AA36:  INCF   xA9,F
0AA38:  BTFSC  FD8.2
0AA3A:  INCF   xAA,F
0AA3C:  BTFSC  FD8.2
0AA3E:  INCF   xAB,F
0AA40:  MOVLB  0
0AA42:  GOTO   A9BC
....................             }
.................... 
....................             // パケット初期化
....................             packet_index = 0;
0AA46:  MOVLB  A
0AA48:  CLRF   x99
....................             memset(packetdata, 0x00, PACKET_SIZE);
0AA4A:  MOVLW  0A
0AA4C:  MOVWF  FEA
0AA4E:  MOVLW  59
0AA50:  MOVWF  FE9
0AA52:  CLRF   00
0AA54:  CLRF   02
0AA56:  MOVLW  40
0AA58:  MOVWF  01
0AA5A:  MOVLB  0
0AA5C:  CALL   2B68
....................         }
.................... 
....................         // データ書き込み
....................         packetdata[packet_index++] = (data0 >> 4) & 0xFF;
0AA60:  MOVLB  A
0AA62:  MOVF   x99,W
0AA64:  INCF   x99,F
0AA66:  CLRF   03
0AA68:  ADDLW  59
0AA6A:  MOVWF  FE9
0AA6C:  MOVLW  0A
0AA6E:  ADDWFC 03,W
0AA70:  MOVWF  FEA
0AA72:  RRCF   xA0,W
0AA74:  MOVWF  xB8
0AA76:  RRCF   x9F,W
0AA78:  MOVWF  xB7
0AA7A:  RRCF   xB8,F
0AA7C:  RRCF   xB7,F
0AA7E:  RRCF   xB8,F
0AA80:  RRCF   xB7,F
0AA82:  RRCF   xB8,F
0AA84:  RRCF   xB7,F
0AA86:  MOVLW  0F
0AA88:  ANDWF  xB8,F
0AA8A:  MOVF   xB7,W
0AA8C:  MOVWF  00
0AA8E:  CLRF   03
0AA90:  MOVF   00,W
0AA92:  MOVWF  FEF
....................         packetdata[packet_index++] = ((data0 & 0x0F) << 4) | ((data1 >> 8) & 0x0F);
0AA94:  MOVF   x99,W
0AA96:  INCF   x99,F
0AA98:  CLRF   03
0AA9A:  ADDLW  59
0AA9C:  MOVWF  FE9
0AA9E:  MOVLW  0A
0AAA0:  ADDWFC 03,W
0AAA2:  MOVWF  FEA
0AAA4:  MOVF   x9F,W
0AAA6:  ANDLW  0F
0AAA8:  MOVWF  xB7
0AAAA:  CLRF   xB8
0AAAC:  RLCF   xB7,F
0AAAE:  RLCF   xB8,F
0AAB0:  RLCF   xB7,F
0AAB2:  RLCF   xB8,F
0AAB4:  RLCF   xB7,F
0AAB6:  RLCF   xB8,F
0AAB8:  RLCF   xB7,F
0AABA:  RLCF   xB8,F
0AABC:  MOVLW  F0
0AABE:  ANDWF  xB7,F
0AAC0:  MOVFF  AA2,AB9
0AAC4:  CLRF   xBA
0AAC6:  MOVF   xB9,W
0AAC8:  ANDLW  0F
0AACA:  MOVWF  00
0AACC:  CLRF   03
0AACE:  MOVF   00,W
0AAD0:  IORWF  xB7,W
0AAD2:  MOVWF  00
0AAD4:  MOVF   03,W
0AAD6:  IORWF  xB8,W
0AAD8:  MOVWF  03
0AADA:  MOVF   00,W
0AADC:  MOVWF  FEF
....................         packetdata[packet_index++] = data1 & 0xFF;
0AADE:  MOVF   x99,W
0AAE0:  INCF   x99,F
0AAE2:  CLRF   03
0AAE4:  ADDLW  59
0AAE6:  MOVWF  FE9
0AAE8:  MOVLW  0A
0AAEA:  ADDWFC 03,W
0AAEC:  MOVWF  FEA
0AAEE:  MOVF   xA1,W
0AAF0:  MOVWF  00
0AAF2:  CLRF   03
0AAF4:  MOVF   00,W
0AAF6:  MOVWF  FEF
0AAF8:  MOVLB  0
0AAFA:  MOVLB  A
0AAFC:  INCF   x9D,F
0AAFE:  BTFSC  FD8.2
0AB00:  INCF   x9E,F
0AB02:  MOVLB  0
0AB04:  GOTO   A28C
....................     }
.................... 
....................     // 最後に残ったデータの処理
....................     if (packet_index > 0) {
0AB08:  MOVLB  A
0AB0A:  MOVF   x99,F
0AB0C:  BTFSS  FD8.2
0AB0E:  BRA    AB16
0AB10:  MOVLB  0
0AB12:  GOTO   AD7E
0AB16:  MOVLB  0
....................         for (unsigned int8 j = packet_index; j < PACKET_SIZE - 1; j++) {
0AB18:  MOVFF  A99,AAC
0AB1C:  MOVLB  A
0AB1E:  MOVF   xAC,W
0AB20:  SUBLW  3E
0AB22:  BTFSC  FD8.0
0AB24:  BRA    AB2C
0AB26:  MOVLB  0
0AB28:  GOTO   AB4C
0AB2C:  MOVLB  0
....................             packetdata[j] = 0x00;
0AB2E:  CLRF   03
0AB30:  MOVLB  A
0AB32:  MOVF   xAC,W
0AB34:  ADDLW  59
0AB36:  MOVWF  FE9
0AB38:  MOVLW  0A
0AB3A:  ADDWFC 03,W
0AB3C:  MOVWF  FEA
0AB3E:  CLRF   FEF
0AB40:  MOVLB  0
0AB42:  MOVLB  A
0AB44:  INCF   xAC,F
0AB46:  MOVLB  0
0AB48:  GOTO   AB1C
....................         }
....................         packetdata[PACKET_SIZE - 1] = calc_crc8(packetdata, PACKET_SIZE - 1);
0AB4C:  MOVLW  0A
0AB4E:  MOVLB  B
0AB50:  MOVWF  xD9
0AB52:  MOVLW  59
0AB54:  MOVWF  xD8
0AB56:  MOVLW  3F
0AB58:  MOVWF  xDA
0AB5A:  MOVLB  0
0AB5C:  CALL   2DA0
0AB60:  MOVFF  01,A98
....................       unsigned int32 write_address;
....................         switch (port_data_ptr->port_num)
0AB64:  MOVLB  A
0AB66:  MOVF   x57,W
0AB68:  MOVWF  FE9
0AB6A:  MOVF   x58,W
0AB6C:  MOVWF  FEA
0AB6E:  MOVF   FEF,W
0AB70:  XORLW  01
0AB72:  MOVLB  0
0AB74:  BTFSC  FD8.2
0AB76:  GOTO   AB86
0AB7A:  XORLW  03
0AB7C:  BTFSC  FD8.2
0AB7E:  GOTO   AC80
0AB82:  GOTO   AD7A
....................         {
....................         case 1:
....................             write_address = MISF_CIGS_IV1_DATA_START + iv1_data_ptr->used_counter;
0AB86:  MOVLW  01
0AB88:  MOVLB  1
0AB8A:  ADDWF  x28,W
0AB8C:  MOVWF  FE9
0AB8E:  MOVLW  00
0AB90:  ADDWFC x29,W
0AB92:  MOVWF  FEA
0AB94:  MOVFF  FEF,00
0AB98:  MOVFF  FEC,01
0AB9C:  MOVFF  FEC,02
0ABA0:  MOVFF  FEC,03
0ABA4:  MOVF   FED,F
0ABA6:  MOVF   FED,F
0ABA8:  MOVF   FED,F
0ABAA:  MOVF   00,W
0ABAC:  MOVLB  A
0ABAE:  MOVWF  xAD
0ABB0:  MOVLW  10
0ABB2:  ADDWF  01,W
0ABB4:  MOVWF  xAE
0ABB6:  MOVLW  7C
0ABB8:  ADDWFC 02,W
0ABBA:  MOVWF  xAF
0ABBC:  MOVLW  00
0ABBE:  ADDWFC 03,W
0ABC0:  MOVWF  xB0
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
0ABC2:  MOVFF  115,B91
0ABC6:  MOVFF  114,B90
0ABCA:  MOVFF  113,B8F
0ABCE:  MOVFF  112,B8E
0ABD2:  MOVFF  AB0,B95
0ABD6:  MOVFF  AAF,B94
0ABDA:  MOVFF  AAE,B93
0ABDE:  MOVFF  AAD,B92
0ABE2:  MOVLW  0A
0ABE4:  MOVLB  B
0ABE6:  MOVWF  x97
0ABE8:  MOVLW  59
0ABEA:  MOVWF  x96
0ABEC:  CLRF   x99
0ABEE:  MOVLW  40
0ABF0:  MOVWF  x98
0ABF2:  MOVLB  0
0ABF4:  CALL   3B7C
....................             iv1_data_ptr->used_counter += PACKET_SIZE;
0ABF8:  MOVLW  01
0ABFA:  MOVLB  1
0ABFC:  ADDWF  x28,W
0ABFE:  MOVWF  FE9
0AC00:  MOVLW  00
0AC02:  ADDWFC x29,W
0AC04:  MOVWF  FEA
0AC06:  MOVLW  40
0AC08:  ADDWF  FEF,W
0AC0A:  MOVWF  00
0AC0C:  MOVLW  00
0AC0E:  ADDWFC FEC,W
0AC10:  MOVWF  01
0AC12:  MOVLW  00
0AC14:  ADDWFC FEC,W
0AC16:  MOVWF  02
0AC18:  MOVLW  00
0AC1A:  ADDWFC FEC,W
0AC1C:  MOVWF  03
0AC1E:  MOVF   FED,F
0AC20:  MOVF   FED,F
0AC22:  MOVF   FED,F
0AC24:  MOVFF  00,FEF
0AC28:  MOVFF  01,FEC
0AC2C:  MOVFF  02,FEC
0AC30:  MOVFF  03,FEC
0AC34:  MOVF   FED,F
0AC36:  MOVF   FED,F
0AC38:  MOVF   FED,F
....................             iv1_data_ptr->uncopied_counter += PACKET_SIZE;
0AC3A:  MOVLW  05
0AC3C:  ADDWF  x28,W
0AC3E:  MOVWF  FE9
0AC40:  MOVLW  00
0AC42:  ADDWFC x29,W
0AC44:  MOVWF  FEA
0AC46:  MOVLW  40
0AC48:  ADDWF  FEF,W
0AC4A:  MOVWF  00
0AC4C:  MOVLW  00
0AC4E:  ADDWFC FEC,W
0AC50:  MOVWF  01
0AC52:  MOVLW  00
0AC54:  ADDWFC FEC,W
0AC56:  MOVWF  02
0AC58:  MOVLW  00
0AC5A:  ADDWFC FEC,W
0AC5C:  MOVWF  03
0AC5E:  MOVF   FED,F
0AC60:  MOVF   FED,F
0AC62:  MOVF   FED,F
0AC64:  MOVFF  00,FEF
0AC68:  MOVFF  01,FEC
0AC6C:  MOVFF  02,FEC
0AC70:  MOVFF  03,FEC
0AC74:  MOVF   FED,F
0AC76:  MOVF   FED,F
0AC78:  MOVF   FED,F
....................             break;
0AC7A:  MOVLB  0
0AC7C:  GOTO   AD7E
....................         case 2:
....................          write_address = MISF_CIGS_IV2_DATA_START + iv2_data_ptr->used_counter;
0AC80:  MOVLW  01
0AC82:  MOVLB  1
0AC84:  ADDWF  x2C,W
0AC86:  MOVWF  FE9
0AC88:  MOVLW  00
0AC8A:  ADDWFC x2D,W
0AC8C:  MOVWF  FEA
0AC8E:  MOVFF  FEF,00
0AC92:  MOVFF  FEC,01
0AC96:  MOVFF  FEC,02
0AC9A:  MOVFF  FEC,03
0AC9E:  MOVF   FED,F
0ACA0:  MOVF   FED,F
0ACA2:  MOVF   FED,F
0ACA4:  MOVF   00,W
0ACA6:  MOVLB  A
0ACA8:  MOVWF  xAD
0ACAA:  MOVLW  10
0ACAC:  ADDWF  01,W
0ACAE:  MOVWF  xAE
0ACB0:  MOVLW  7C
0ACB2:  ADDWFC 02,W
0ACB4:  MOVWF  xAF
0ACB6:  MOVLW  00
0ACB8:  ADDWFC 03,W
0ACBA:  MOVWF  xB0
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
0ACBC:  MOVFF  115,B91
0ACC0:  MOVFF  114,B90
0ACC4:  MOVFF  113,B8F
0ACC8:  MOVFF  112,B8E
0ACCC:  MOVFF  AB0,B95
0ACD0:  MOVFF  AAF,B94
0ACD4:  MOVFF  AAE,B93
0ACD8:  MOVFF  AAD,B92
0ACDC:  MOVLW  0A
0ACDE:  MOVLB  B
0ACE0:  MOVWF  x97
0ACE2:  MOVLW  59
0ACE4:  MOVWF  x96
0ACE6:  CLRF   x99
0ACE8:  MOVLW  40
0ACEA:  MOVWF  x98
0ACEC:  MOVLB  0
0ACEE:  CALL   3B7C
....................             iv2_data_ptr->used_counter += PACKET_SIZE;
0ACF2:  MOVLW  01
0ACF4:  MOVLB  1
0ACF6:  ADDWF  x2C,W
0ACF8:  MOVWF  FE9
0ACFA:  MOVLW  00
0ACFC:  ADDWFC x2D,W
0ACFE:  MOVWF  FEA
0AD00:  MOVLW  40
0AD02:  ADDWF  FEF,W
0AD04:  MOVWF  00
0AD06:  MOVLW  00
0AD08:  ADDWFC FEC,W
0AD0A:  MOVWF  01
0AD0C:  MOVLW  00
0AD0E:  ADDWFC FEC,W
0AD10:  MOVWF  02
0AD12:  MOVLW  00
0AD14:  ADDWFC FEC,W
0AD16:  MOVWF  03
0AD18:  MOVF   FED,F
0AD1A:  MOVF   FED,F
0AD1C:  MOVF   FED,F
0AD1E:  MOVFF  00,FEF
0AD22:  MOVFF  01,FEC
0AD26:  MOVFF  02,FEC
0AD2A:  MOVFF  03,FEC
0AD2E:  MOVF   FED,F
0AD30:  MOVF   FED,F
0AD32:  MOVF   FED,F
....................             iv2_data_ptr->uncopied_counter += PACKET_SIZE;
0AD34:  MOVLW  05
0AD36:  ADDWF  x2C,W
0AD38:  MOVWF  FE9
0AD3A:  MOVLW  00
0AD3C:  ADDWFC x2D,W
0AD3E:  MOVWF  FEA
0AD40:  MOVLW  40
0AD42:  ADDWF  FEF,W
0AD44:  MOVWF  00
0AD46:  MOVLW  00
0AD48:  ADDWFC FEC,W
0AD4A:  MOVWF  01
0AD4C:  MOVLW  00
0AD4E:  ADDWFC FEC,W
0AD50:  MOVWF  02
0AD52:  MOVLW  00
0AD54:  ADDWFC FEC,W
0AD56:  MOVWF  03
0AD58:  MOVF   FED,F
0AD5A:  MOVF   FED,F
0AD5C:  MOVF   FED,F
0AD5E:  MOVFF  00,FEF
0AD62:  MOVFF  01,FEC
0AD66:  MOVFF  02,FEC
0AD6A:  MOVFF  03,FEC
0AD6E:  MOVF   FED,F
0AD70:  MOVF   FED,F
0AD72:  MOVF   FED,F
....................             break;
0AD74:  MOVLB  0
0AD76:  GOTO   AD7E
....................         default:
....................             break;
0AD7A:  GOTO   AD7E
....................         }
.................... 
....................     }
....................                 // デバッグ表示
....................     fprintf(PC, "\r\n");
0AD7E:  MOVLW  0D
0AD80:  BTFSS  FA6.6
0AD82:  GOTO   AD80
0AD86:  MOVLB  E
0AD88:  MOVWF  xF9
0AD8A:  MOVLW  0A
0AD8C:  MOVLB  0
0AD8E:  BTFSS  FA6.6
0AD90:  GOTO   AD8E
0AD94:  MOVLB  E
0AD96:  MOVWF  xF9
....................     for (unsigned int32 j = 0; j < PACKET_SIZE; j++) {
0AD98:  MOVLB  A
0AD9A:  CLRF   xB4
0AD9C:  CLRF   xB3
0AD9E:  CLRF   xB2
0ADA0:  CLRF   xB1
0ADA2:  MOVLB  0
0ADA4:  MOVLB  A
0ADA6:  MOVF   xB4,F
0ADA8:  BTFSC  FD8.2
0ADAA:  BRA    ADB2
0ADAC:  MOVLB  0
0ADAE:  GOTO   AE2E
0ADB2:  MOVLB  0
0ADB4:  MOVLB  A
0ADB6:  MOVF   xB3,F
0ADB8:  BTFSC  FD8.2
0ADBA:  BRA    ADC2
0ADBC:  MOVLB  0
0ADBE:  GOTO   AE2E
0ADC2:  MOVLB  0
0ADC4:  MOVLB  A
0ADC6:  MOVF   xB2,F
0ADC8:  BTFSC  FD8.2
0ADCA:  BRA    ADD2
0ADCC:  MOVLB  0
0ADCE:  GOTO   AE2E
0ADD2:  MOVLB  0
0ADD4:  MOVLB  A
0ADD6:  MOVF   xB1,W
0ADD8:  SUBLW  3F
0ADDA:  BTFSC  FD8.0
0ADDC:  BRA    ADE4
0ADDE:  MOVLB  0
0ADE0:  GOTO   AE2E
0ADE4:  MOVLB  0
....................         fprintf(PC, "%02X ", packetdata[j]);
0ADE6:  MOVLW  59
0ADE8:  MOVLB  A
0ADEA:  ADDWF  xB1,W
0ADEC:  MOVWF  FE9
0ADEE:  MOVLW  0A
0ADF0:  ADDWFC xB2,W
0ADF2:  MOVWF  FEA
0ADF4:  MOVFF  FEF,AB5
0ADF8:  MOVFF  AB5,B4B
0ADFC:  MOVLW  37
0ADFE:  MOVLB  B
0AE00:  MOVWF  x4C
0AE02:  MOVLB  0
0AE04:  CALL   2188
0AE08:  MOVLW  20
0AE0A:  BTFSS  FA6.6
0AE0C:  GOTO   AE0A
0AE10:  MOVLB  E
0AE12:  MOVWF  xF9
0AE14:  MOVLB  0
0AE16:  MOVLW  01
0AE18:  MOVLB  A
0AE1A:  ADDWF  xB1,F
0AE1C:  BTFSC  FD8.0
0AE1E:  INCF   xB2,F
0AE20:  BTFSC  FD8.2
0AE22:  INCF   xB3,F
0AE24:  BTFSC  FD8.2
0AE26:  INCF   xB4,F
0AE28:  MOVLB  0
0AE2A:  GOTO   ADA4
....................     }
....................     // fprintf(PC, "End CIGS data conversion\r\n");
....................     misf_update_address_area(); // Write the mission flash address area
0AE2E:  CALL   43B8
0AE32:  RETURN 0
.................... }
.................... 
.................... 
.................... iv_env_t create_meas_data()
.................... {
....................     iv_env_t data;
....................     memset(&data, 0, sizeof(data));
*
07F92:  MOVLW  0A
07F94:  MOVWF  FEA
07F96:  MOVLW  69
07F98:  MOVWF  FE9
07F9A:  CLRF   00
07F9C:  CLRF   02
07F9E:  MOVLW  0C
07FA0:  MOVWF  01
07FA2:  CALL   2B68
....................     data.time           = get_current_sec();
07FA6:  CALL   3864
07FAA:  MOVFF  03,A6C
07FAE:  MOVFF  02,A6B
07FB2:  MOVFF  01,A6A
07FB6:  MOVFF  00,A69
....................     data.temp_py_top    = ad7490_read(ADC_TEMP_PY_TOP);
07FBA:  MOVLW  0D
07FBC:  MOVLB  A
07FBE:  MOVWF  x75
07FC0:  MOVLB  0
07FC2:  CALL   20FC
07FC6:  MOVFF  02,A70
07FCA:  MOVFF  01,A6F
....................     data.temp_py_bot    = ad7490_read(ADC_TEMP_PY_BOT);
07FCE:  MOVLW  0E
07FD0:  MOVLB  A
07FD2:  MOVWF  x75
07FD4:  MOVLB  0
07FD6:  CALL   20FC
07FDA:  MOVFF  02,A72
07FDE:  MOVFF  01,A71
....................     data.temp_mis7      = ad7490_read(ADC_TEMP_MIS7);
07FE2:  MOVLW  0C
07FE4:  MOVLB  A
07FE6:  MOVWF  x75
07FE8:  MOVLB  0
07FEA:  CALL   20FC
07FEE:  MOVFF  02,A74
07FF2:  MOVFF  01,A73
....................     data.pd             = ad7490_read(ADC_PD);
07FF6:  MOVLW  0F
07FF8:  MOVLB  A
07FFA:  MOVWF  x75
07FFC:  MOVLB  0
07FFE:  CALL   20FC
08002:  MOVFF  02,A6E
08006:  MOVFF  01,A6D
....................     return data;
0800A:  MOVLW  69
0800C:  MOVWF  01
0800E:  MOVLW  0A
08010:  MOVWF  02
08012:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "domain/mmj_cigs_piclog.c"
.................... #include "mmj_cigs_piclog.h"                          // 同じフォルダのヘッダー
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/timer.h"                   // タイマーライブラリ  
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... 
.................... unsigned int32 get_current_msec();
.................... void set_current_msec(unsigned int32 msec);
.................... void add_current_msec(unsigned int32 msec);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "mmj_cigs_flash.h"                 // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t flash_counter_table[];
.................... extern FlashCounter_t *flash_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"               // フラッシュ操作キュー
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                 // フラッシュデバイス
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // #define PICLOG_DEBUG
.................... #define MISSION_ID_PICLOG 0x03  // PICLOGミッションID
.................... 
.................... void piclog_make(int8 function, int8 parameter)
*
04DAC:  MOVLW  02
04DAE:  MOVLB  2
04DB0:  MOVWF  x8D
04DB2:  MOVLW  86
04DB4:  MOVWF  x8C
.................... {
....................     piclog_t piclog;
....................     piclog_t *piclog_ptr = &piclog;
....................     memset(piclog_ptr, 0x00, PICLOG_PACKET_SIZE);
04DB6:  MOVFF  28D,FEA
04DBA:  MOVFF  28C,FE9
04DBE:  CLRF   00
04DC0:  CLRF   02
04DC2:  MOVLW  06
04DC4:  MOVWF  01
04DC6:  MOVLB  0
04DC8:  CALL   2B68
....................     piclog_ptr->fields.time = get_current_sec();
04DCC:  MOVLB  2
04DCE:  MOVF   x8C,W
04DD0:  MOVWF  01
04DD2:  MOVF   x8D,W
04DD4:  MOVWF  03
04DD6:  MOVF   01,W
04DD8:  MOVWF  x8F
04DDA:  MOVFF  03,290
04DDE:  MOVLB  0
04DE0:  CALL   3864
04DE4:  MOVFF  290,FEA
04DE8:  MOVFF  28F,FE9
04DEC:  MOVFF  00,FEF
04DF0:  MOVFF  01,FEC
04DF4:  MOVFF  02,FEC
04DF8:  MOVFF  03,FEC
04DFC:  MOVF   FED,F
04DFE:  MOVF   FED,F
04E00:  MOVF   FED,F
....................     piclog_ptr->fields.function = function;
04E02:  MOVLW  04
04E04:  MOVLB  2
04E06:  ADDWF  x8C,W
04E08:  MOVWF  FE9
04E0A:  MOVLW  00
04E0C:  ADDWFC x8D,W
04E0E:  MOVWF  FEA
04E10:  MOVFF  284,FEF
....................     piclog_ptr->fields.parameter = parameter;
04E14:  MOVLW  05
04E16:  ADDWF  x8C,W
04E18:  MOVWF  FE9
04E1A:  MOVLW  00
04E1C:  ADDWFC x8D,W
04E1E:  MOVWF  FEA
04E20:  MOVFF  285,FEF
.................... 
....................     printf("[PICLOG] : ");
04E24:  MOVLW  28
04E26:  MOVWF  FF6
04E28:  MOVLW  06
04E2A:  MOVWF  FF7
04E2C:  MOVLW  00
04E2E:  MOVWF  FF8
04E30:  MOVLB  0
04E32:  CALL   1F3E
....................     for (int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
04E36:  MOVLB  2
04E38:  CLRF   x8E
04E3A:  MOVLB  0
04E3C:  MOVLB  2
04E3E:  MOVF   x8E,W
04E40:  SUBLW  05
04E42:  BTFSC  FD8.0
04E44:  BRA    4E4C
04E46:  MOVLB  0
04E48:  GOTO   4E88
04E4C:  MOVLB  0
....................         printf("%02X ", piclog_ptr->bytes[i]);
04E4E:  MOVLB  2
04E50:  MOVF   x8E,W
04E52:  ADDWF  x8C,W
04E54:  MOVWF  FE9
04E56:  MOVLW  00
04E58:  ADDWFC x8D,W
04E5A:  MOVWF  FEA
04E5C:  MOVFF  FEF,28F
04E60:  MOVFF  28F,B4B
04E64:  MOVLW  37
04E66:  MOVLB  B
04E68:  MOVWF  x4C
04E6A:  MOVLB  0
04E6C:  CALL   2188
04E70:  MOVLW  20
04E72:  BTFSS  FA6.6
04E74:  GOTO   4E72
04E78:  MOVLB  E
04E7A:  MOVWF  xF9
04E7C:  MOVLB  0
04E7E:  MOVLB  2
04E80:  INCF   x8E,F
04E82:  MOVLB  0
04E84:  GOTO   4E3C
....................     }
....................     printf("\r\n");
04E88:  MOVLW  0D
04E8A:  BTFSS  FA6.6
04E8C:  GOTO   4E8A
04E90:  MOVLB  E
04E92:  MOVWF  xF9
04E94:  MOVLW  0A
04E96:  MOVLB  0
04E98:  BTFSS  FA6.6
04E9A:  GOTO   4E98
04E9E:  MOVLB  E
04EA0:  MOVWF  xF9
.................... 
....................     misf_write_data(FLASH_ID_PICLOG, piclog_ptr->bytes, PICLOG_PACKET_SIZE);
04EA2:  MOVLB  2
04EA4:  MOVF   x8C,W
04EA6:  MOVWF  01
04EA8:  MOVF   x8D,W
04EAA:  MOVWF  03
04EAC:  MOVF   01,W
04EAE:  MOVWF  x8F
04EB0:  MOVFF  03,290
04EB4:  MOVLW  01
04EB6:  MOVLB  A
04EB8:  MOVWF  xAF
04EBA:  MOVFF  290,AB1
04EBE:  MOVFF  28F,AB0
04EC2:  CLRF   xB3
04EC4:  MOVLW  06
04EC6:  MOVWF  xB2
04EC8:  MOVLB  0
04ECA:  CALL   4446
04ECE:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "domain/mmj_cigs_smf.c"
.................... #include "mmj_cigs_smf.h"  
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../hal/mmj_cigs_config.h" // int8,int32 型など(CCS C) 依存
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_flash.h"       // MISF_ADDRESS_TABLE, flash_counter_table 依存
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t flash_counter_table[];
.................... extern FlashCounter_t *flash_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int8 loop_counter;
....................     int8 reserved[3];
.................... } SMF_PARTITION;
.................... 
.................... // パーティション管理構造体
.................... typedef struct {
....................     SMF_PARTITION piclog;     // データテーブル領域は利用しないため削除
....................     SMF_PARTITION env;
....................     SMF_PARTITION iv1_header;
....................     SMF_PARTITION iv1_data;
....................     SMF_PARTITION iv2_header;
....................     SMF_PARTITION iv2_data;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... extern PartitionParam param;  // extern宣言に変更
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         SMF_PARTITION headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table);
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "mmj_cigs_flash.h"
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t flash_counter_table[];
.................... extern FlashCounter_t *flash_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mt25q.h"              // Flash device definitions
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/tool/smf_queue.h"            // システム設定 
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/tool/calc_tools.h"           // SMF処理関数 
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/mmj_smf_memorymap.h" 
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x06AA1FFF
.................... #define CIGS_ENVIRO_START_ADDRESS 0x06AA2000
.................... #define CIGS_ENVIRO_END_ADDRESS 0x06B41FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS 0x06B42000
.................... #define CIGS_IV1_HEADER_END_ADDRESS 0x06BE1FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS 0x06BE2000
.................... #define CIGS_IV1_DATA_END_ADDRESS 0x06FE2FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS 0x06FE3000
.................... #define CIGS_IV2_HEADER_END_ADDRESS 0x07082FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS 0x07083000
.................... #define CIGS_IV2_DATA_END_ADDRESS 0x07483FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... #define CRC_RETRY_COUNT 5     // CRC検証のリトライ回数 (smf_queue.hの値と整合するなら一元化検討)
.................... 
.................... 
.................... 
.................... PartitionParam param = {0};
.................... 
.................... 
.................... const ADDRESS_AREA_T SMF_ADDRESS_TABLE[FLASH_ID_COUNT] = {
....................     { CIGS_DATA_TABLE_START_ADDRESS,   CIGS_DATA_TABLE_END_ADDRESS,   MISF_CIGS_DATA_TABLE_SIZE },
....................     { CIGS_PICLOG_START_ADDRESS,       CIGS_PICLOG_END_ADDRESS,       MISF_CIGS_PICLOG_SIZE },
....................     { CIGS_ENVIRO_START_ADDRESS,       CIGS_ENVIRO_END_ADDRESS,       MISF_CIGS_ENVIRO_SIZE },
....................     { CIGS_IV1_HEADER_START_ADDRESS,   CIGS_IV1_HEADER_END_ADDRESS,   MISF_CIGS_IV1_HEADER_SIZE },
....................     { CIGS_IV1_DATA_START_ADDRESS,     CIGS_IV1_DATA_END_ADDRESS,     MISF_CIGS_IV1_DATA_SIZE },
....................     { CIGS_IV2_HEADER_START_ADDRESS,   CIGS_IV2_HEADER_END_ADDRESS,   MISF_CIGS_IV2_HEADER_SIZE },
....................     { CIGS_IV2_DATA_START_ADDRESS,     CIGS_IV2_DATA_END_ADDRESS,     MISF_CIGS_IV2_DATA_SIZE }
.................... };
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void smf_data_table_init()
.................... {
....................     fprintf(PC, "SMF Data Table Initialize\r\n");
*
07766:  MOVLW  34
07768:  MOVWF  FF6
0776A:  MOVLW  06
0776C:  MOVWF  FF7
0776E:  MOVLW  00
07770:  MOVWF  FF8
07772:  CALL   1F3E
....................     smf_data_table_t smf_data_table = {0};
07776:  MOVLB  2
07778:  CLRF   xD4
0777A:  CLRF   xD5
0777C:  CLRF   xD6
0777E:  CLRF   xD7
07780:  CLRF   xD8
07782:  CLRF   xD9
07784:  CLRF   xDA
07786:  CLRF   xDB
07788:  CLRF   xDC
0778A:  CLRF   xDD
0778C:  CLRF   xDE
0778E:  CLRF   xDF
07790:  CLRF   xE0
07792:  CLRF   xE1
07794:  CLRF   xE2
07796:  CLRF   xE3
07798:  CLRF   xE4
0779A:  CLRF   xE5
0779C:  CLRF   xE6
0779E:  CLRF   xE7
077A0:  CLRF   xE8
077A2:  CLRF   xE9
077A4:  CLRF   xEA
077A6:  CLRF   xEB
077A8:  CLRF   xEC
077AA:  CLRF   xED
077AC:  CLRF   xEE
077AE:  CLRF   xEF
077B0:  CLRF   xF0
077B2:  CLRF   xF1
077B4:  CLRF   xF2
077B6:  CLRF   xF3
077B8:  CLRF   xF4
077BA:  CLRF   xF5
077BC:  CLRF   xF6
077BE:  CLRF   xF7
077C0:  CLRF   xF8
077C2:  CLRF   xF9
077C4:  CLRF   xFA
077C6:  CLRF   xFB
077C8:  CLRF   xFC
077CA:  CLRF   xFD
077CC:  CLRF   xFE
077CE:  CLRF   xFF
077D0:  MOVLB  3
077D2:  CLRF   x00
077D4:  CLRF   x01
077D6:  CLRF   x02
077D8:  CLRF   x03
077DA:  CLRF   x04
077DC:  CLRF   x05
077DE:  CLRF   x06
077E0:  CLRF   x07
077E2:  CLRF   x08
077E4:  CLRF   x09
077E6:  CLRF   x0A
077E8:  CLRF   x0B
077EA:  CLRF   x0C
077EC:  CLRF   x0D
077EE:  CLRF   x0E
077F0:  CLRF   x0F
077F2:  CLRF   x10
077F4:  CLRF   x11
077F6:  CLRF   x12
077F8:  CLRF   x13
....................     smf_data_table.fields.crc = calc_crc8(smf_data_table.bytes, PACKET_SIZE - 1); // CRCを計算して初期化
077FA:  MOVLW  02
077FC:  MOVLB  B
077FE:  MOVWF  xD9
07800:  MOVLW  D4
07802:  MOVWF  xD8
07804:  MOVLW  3F
07806:  MOVWF  xDA
07808:  MOVLB  0
0780A:  CALL   2DA0
0780E:  MOVFF  01,313
.................... 
....................     write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table.bytes, PACKET_SIZE);
07812:  MOVFF  119,B91
07816:  MOVFF  118,B90
0781A:  MOVFF  117,B8F
0781E:  MOVFF  116,B8E
07822:  MOVLW  06
07824:  MOVLB  B
07826:  MOVWF  x95
07828:  MOVLW  AA
0782A:  MOVWF  x94
0782C:  CLRF   x93
0782E:  CLRF   x92
07830:  MOVLW  02
07832:  MOVWF  x97
07834:  MOVLW  D4
07836:  MOVWF  x96
07838:  CLRF   x99
0783A:  MOVLW  40
0783C:  MOVWF  x98
0783E:  MOVLB  0
07840:  CALL   3B7C
07844:  RETURN 0
.................... }
.................... 
.................... void read_smf_header(smf_data_table_t *smf_data_table)
.................... {
....................     int8 retry_count;
.................... 
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
*
0ECFC:  MOVLB  2
0ECFE:  CLRF   xD3
0ED00:  MOVLB  0
0ED02:  MOVLB  2
0ED04:  MOVF   xD3,W
0ED06:  SUBLW  04
0ED08:  BTFSC  FD8.0
0ED0A:  BRA    ED12
0ED0C:  MOVLB  0
0ED0E:  GOTO   EDFC
0ED12:  MOVLB  0
....................     {
....................         // ヘッダを読み出し
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
0ED14:  MOVLB  2
0ED16:  MOVF   xD1,W
0ED18:  MOVWF  01
0ED1A:  MOVF   xD2,W
0ED1C:  MOVWF  03
0ED1E:  MOVF   01,W
0ED20:  MOVWF  xD4
0ED22:  MOVFF  03,2D5
0ED26:  MOVFF  119,B4D
0ED2A:  MOVFF  118,B4C
0ED2E:  MOVFF  117,B4B
0ED32:  MOVFF  116,B4A
0ED36:  MOVLW  06
0ED38:  MOVLB  B
0ED3A:  MOVWF  x51
0ED3C:  MOVLW  AA
0ED3E:  MOVWF  x50
0ED40:  CLRF   x4F
0ED42:  CLRF   x4E
0ED44:  MOVFF  2D5,B53
0ED48:  MOVFF  2D4,B52
0ED4C:  CLRF   x57
0ED4E:  CLRF   x56
0ED50:  CLRF   x55
0ED52:  MOVLW  40
0ED54:  MOVWF  x54
0ED56:  MOVLB  0
0ED58:  CALL   2B8C
....................         print_smf_counter_status(smf_data_table);
0ED5C:  MOVFF  2D2,2D5
0ED60:  MOVFF  2D1,2D4
0ED64:  GOTO   E76E
....................         // CRC検証
....................         if (is_crc_valid(smf_data_table->bytes, PACKET_SIZE-1))
0ED68:  MOVLB  2
0ED6A:  MOVF   xD1,W
0ED6C:  MOVWF  01
0ED6E:  MOVF   xD2,W
0ED70:  MOVWF  03
0ED72:  MOVF   01,W
0ED74:  MOVWF  xD4
0ED76:  MOVFF  03,2D5
0ED7A:  MOVFF  2D5,316
0ED7E:  MOVFF  2D4,315
0ED82:  MOVLW  3F
0ED84:  MOVLB  3
0ED86:  MOVWF  x17
0ED88:  MOVLB  0
0ED8A:  CALL   EB78
0ED8E:  MOVF   01,F
0ED90:  BTFSC  FD8.2
0ED92:  GOTO   EDE6
....................         {
....................             printf("CRC verification passed on attempt %d\r\n", retry_count + 1);
0ED96:  MOVLW  01
0ED98:  MOVLB  2
0ED9A:  ADDWF  xD3,W
0ED9C:  MOVWF  xD4
0ED9E:  MOVLW  50
0EDA0:  MOVWF  FF6
0EDA2:  MOVLW  06
0EDA4:  MOVWF  FF7
0EDA6:  MOVLW  00
0EDA8:  MOVWF  FF8
0EDAA:  MOVLW  23
0EDAC:  MOVLB  B
0EDAE:  MOVWF  x4A
0EDB0:  MOVLB  0
0EDB2:  CALL   1F74
0EDB6:  MOVFF  2D4,316
0EDBA:  MOVLW  18
0EDBC:  MOVLB  3
0EDBE:  MOVWF  x17
0EDC0:  MOVLB  0
0EDC2:  CALL   EBC6
0EDC6:  MOVLW  0D
0EDC8:  BTFSS  FA6.6
0EDCA:  GOTO   EDC8
0EDCE:  MOVLB  E
0EDD0:  MOVWF  xF9
0EDD2:  MOVLW  0A
0EDD4:  MOVLB  0
0EDD6:  BTFSS  FA6.6
0EDD8:  GOTO   EDD6
0EDDC:  MOVLB  E
0EDDE:  MOVWF  xF9
....................             return; // 成功したら終了
0EDE0:  MOVLB  0
0EDE2:  GOTO   EE40
....................         }
....................         // NGなら少し待って再試行
....................         delay_ms(5);
0EDE6:  MOVLW  05
0EDE8:  MOVLB  B
0EDEA:  MOVWF  xA6
0EDEC:  MOVLB  0
0EDEE:  CALL   1F10
0EDF2:  MOVLB  2
0EDF4:  INCF   xD3,F
0EDF6:  MOVLB  0
0EDF8:  GOTO   ED02
....................     }
.................... 
....................     // ここまで来たら失敗
....................     printf("CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
0EDFC:  MOVLW  78
0EDFE:  MOVWF  FF6
0EE00:  MOVLW  06
0EE02:  MOVWF  FF7
0EE04:  MOVLW  00
0EE06:  MOVWF  FF8
0EE08:  MOVLW  1E
0EE0A:  MOVLB  B
0EE0C:  MOVWF  x4A
0EE0E:  MOVLB  0
0EE10:  CALL   1F74
0EE14:  MOVLW  05
0EE16:  MOVLB  3
0EE18:  MOVWF  x16
0EE1A:  MOVLW  18
0EE1C:  MOVWF  x17
0EE1E:  MOVLB  0
0EE20:  CALL   EBC6
0EE24:  MOVLW  98
0EE26:  MOVWF  FF6
0EE28:  MOVLW  06
0EE2A:  MOVWF  FF7
0EE2C:  MOVLW  00
0EE2E:  MOVWF  FF8
0EE30:  MOVLW  0B
0EE32:  MOVLB  B
0EE34:  MOVWF  x4A
0EE36:  MOVLB  0
0EE38:  CALL   1F74
.................... 
....................     // 読み込み失敗時は初期化しておく
....................     smf_data_table_init();
0EE3C:  CALL   7766
.................... 
....................     return;
0EE40:  GOTO   F0A6 (RETURN)
.................... }
.................... 
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table)
0EE44:  MOVLB  2
0EE46:  BCF    xD3.0
.................... {
....................     int1 crc_valid = 0;
....................     int8 readdata[PACKET_SIZE];
....................     smf_data_table->fields.crc = calc_crc8(smf_data_table->bytes, PACKET_SIZE - 1); // CRCを更新
0EE48:  MOVLW  3F
0EE4A:  ADDWF  xD1,W
0EE4C:  MOVWF  01
0EE4E:  MOVLW  00
0EE50:  ADDWFC xD2,W
0EE52:  MOVWF  03
0EE54:  MOVF   01,W
0EE56:  MOVLB  3
0EE58:  MOVWF  x15
0EE5A:  MOVFF  03,316
0EE5E:  MOVLB  2
0EE60:  MOVF   xD1,W
0EE62:  MOVWF  01
0EE64:  MOVF   xD2,W
0EE66:  MOVWF  03
0EE68:  MOVF   01,W
0EE6A:  MOVLB  3
0EE6C:  MOVWF  x17
0EE6E:  MOVFF  03,318
0EE72:  MOVFF  318,BD9
0EE76:  MOVFF  317,BD8
0EE7A:  MOVLW  3F
0EE7C:  MOVLB  B
0EE7E:  MOVWF  xDA
0EE80:  MOVLB  0
0EE82:  CALL   2DA0
0EE86:  MOVFF  316,FEA
0EE8A:  MOVFF  315,FE9
0EE8E:  MOVFF  01,FEF
.................... 
....................     for (int8 retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
0EE92:  MOVLB  3
0EE94:  CLRF   x14
0EE96:  MOVLB  0
0EE98:  MOVLB  3
0EE9A:  MOVF   x14,W
0EE9C:  SUBLW  04
0EE9E:  BTFSC  FD8.0
0EEA0:  BRA    EEA8
0EEA2:  MOVLB  0
0EEA4:  GOTO   EFC4
0EEA8:  MOVLB  0
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
0EEAA:  MOVFF  119,318
0EEAE:  MOVFF  118,317
0EEB2:  MOVFF  117,316
0EEB6:  MOVFF  116,315
0EEBA:  MOVLW  06
0EEBC:  MOVLB  3
0EEBE:  MOVWF  x1C
0EEC0:  MOVLW  AA
0EEC2:  MOVWF  x1B
0EEC4:  CLRF   x1A
0EEC6:  CLRF   x19
0EEC8:  MOVLB  0
0EECA:  CALL   5846
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE); // ヘッダーを書き込み
0EECE:  MOVLB  2
0EED0:  MOVF   xD1,W
0EED2:  MOVWF  01
0EED4:  MOVF   xD2,W
0EED6:  MOVWF  03
0EED8:  MOVF   01,W
0EEDA:  MOVLB  3
0EEDC:  MOVWF  x15
0EEDE:  MOVFF  03,316
0EEE2:  MOVFF  119,B91
0EEE6:  MOVFF  118,B90
0EEEA:  MOVFF  117,B8F
0EEEE:  MOVFF  116,B8E
0EEF2:  MOVLW  06
0EEF4:  MOVLB  B
0EEF6:  MOVWF  x95
0EEF8:  MOVLW  AA
0EEFA:  MOVWF  x94
0EEFC:  CLRF   x93
0EEFE:  CLRF   x92
0EF00:  MOVFF  316,B97
0EF04:  MOVFF  315,B96
0EF08:  CLRF   x99
0EF0A:  MOVLW  40
0EF0C:  MOVWF  x98
0EF0E:  MOVLB  0
0EF10:  CALL   3B7C
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
0EF14:  MOVFF  119,B4D
0EF18:  MOVFF  118,B4C
0EF1C:  MOVFF  117,B4B
0EF20:  MOVFF  116,B4A
0EF24:  MOVLW  06
0EF26:  MOVLB  B
0EF28:  MOVWF  x51
0EF2A:  MOVLW  AA
0EF2C:  MOVWF  x50
0EF2E:  CLRF   x4F
0EF30:  CLRF   x4E
0EF32:  MOVLW  02
0EF34:  MOVWF  x53
0EF36:  MOVLW  D4
0EF38:  MOVWF  x52
0EF3A:  CLRF   x57
0EF3C:  CLRF   x56
0EF3E:  CLRF   x55
0EF40:  MOVLW  40
0EF42:  MOVWF  x54
0EF44:  MOVLB  0
0EF46:  CALL   2B8C
....................         if (is_crc_valid(readdata, PACKET_SIZE-1))
0EF4A:  MOVLW  02
0EF4C:  MOVLB  3
0EF4E:  MOVWF  x16
0EF50:  MOVLW  D4
0EF52:  MOVWF  x15
0EF54:  MOVLW  3F
0EF56:  MOVWF  x17
0EF58:  MOVLB  0
0EF5A:  CALL   EB78
0EF5E:  MOVF   01,F
0EF60:  BTFSC  FD8.2
0EF62:  GOTO   EFBA
....................         {
....................             crc_valid = 1; // FIX
0EF66:  MOVLB  2
0EF68:  BSF    xD3.0
....................             fprintf(PC, "CRC verification passed on attempt %d\r\n", retry_count + 1);
0EF6A:  MOVLW  01
0EF6C:  MOVLB  3
0EF6E:  ADDWF  x14,W
0EF70:  MOVWF  x15
0EF72:  MOVLW  A4
0EF74:  MOVWF  FF6
0EF76:  MOVLW  06
0EF78:  MOVWF  FF7
0EF7A:  MOVLW  00
0EF7C:  MOVWF  FF8
0EF7E:  MOVLW  23
0EF80:  MOVLB  B
0EF82:  MOVWF  x4A
0EF84:  MOVLB  0
0EF86:  CALL   1F74
0EF8A:  MOVFF  315,316
0EF8E:  MOVLW  18
0EF90:  MOVLB  3
0EF92:  MOVWF  x17
0EF94:  MOVLB  0
0EF96:  CALL   EBC6
0EF9A:  MOVLW  0D
0EF9C:  BTFSS  FA6.6
0EF9E:  GOTO   EF9C
0EFA2:  MOVLB  E
0EFA4:  MOVWF  xF9
0EFA6:  MOVLW  0A
0EFA8:  MOVLB  0
0EFAA:  BTFSS  FA6.6
0EFAC:  GOTO   EFAA
0EFB0:  MOVLB  E
0EFB2:  MOVWF  xF9
....................             break;
0EFB4:  MOVLB  0
0EFB6:  GOTO   EFC4
....................         }
0EFBA:  MOVLB  3
0EFBC:  INCF   x14,F
0EFBE:  MOVLB  0
0EFC0:  GOTO   EE98
....................     }
....................     if (!crc_valid)
0EFC4:  MOVLB  2
0EFC6:  BTFSS  xD3.0
0EFC8:  BRA    EFD0
0EFCA:  MOVLB  0
0EFCC:  GOTO   F012
0EFD0:  MOVLB  0
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
0EFD2:  MOVLW  CC
0EFD4:  MOVWF  FF6
0EFD6:  MOVLW  06
0EFD8:  MOVWF  FF7
0EFDA:  MOVLW  00
0EFDC:  MOVWF  FF8
0EFDE:  MOVLW  25
0EFE0:  MOVLB  B
0EFE2:  MOVWF  x4A
0EFE4:  MOVLB  0
0EFE6:  CALL   1F74
0EFEA:  MOVLW  05
0EFEC:  MOVLB  3
0EFEE:  MOVWF  x16
0EFF0:  MOVLW  18
0EFF2:  MOVWF  x17
0EFF4:  MOVLB  0
0EFF6:  CALL   EBC6
0EFFA:  MOVLW  F3
0EFFC:  MOVWF  FF6
0EFFE:  MOVLW  06
0F000:  MOVWF  FF7
0F002:  MOVLW  00
0F004:  MOVWF  FF8
0F006:  MOVLW  0B
0F008:  MOVLB  B
0F00A:  MOVWF  x4A
0F00C:  MOVLB  0
0F00E:  CALL   1F74
....................         // return; 
....................     }
0F012:  GOTO   FAF6 (RETURN)
.................... }
.................... 
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table)
.................... {
....................     fprintf(PC, "\r\n[SMF Counter Status]\r\n");
*
0E76E:  MOVLW  00
0E770:  MOVWF  FF6
0E772:  MOVLW  07
0E774:  MOVWF  FF7
0E776:  MOVLW  00
0E778:  MOVWF  FF8
0E77A:  CALL   1F3E
....................     fprintf(PC, "PICLOG     : Used=%lu, Uncopied=%u\r\n", smf_data_table->fields.headers[CIGS_PICLOG_DATA].used_size, smf_data_table->fields.headers[CIGS_PICLOG_DATA].loop_counter);
0E77E:  MOVLW  08
0E780:  MOVLB  2
0E782:  ADDWF  xD4,W
0E784:  MOVWF  FE9
0E786:  MOVLW  00
0E788:  ADDWFC xD5,W
0E78A:  MOVWF  FEA
0E78C:  MOVFF  FEF,2D6
0E790:  MOVFF  FEC,2D7
0E794:  MOVFF  FEC,2D8
0E798:  MOVFF  FEC,2D9
0E79C:  MOVF   FED,F
0E79E:  MOVF   FED,F
0E7A0:  MOVF   FED,F
0E7A2:  MOVLW  0C
0E7A4:  ADDWF  xD4,W
0E7A6:  MOVWF  FE9
0E7A8:  MOVLW  00
0E7AA:  ADDWFC xD5,W
0E7AC:  MOVWF  FEA
0E7AE:  MOVFF  FEF,2DA
0E7B2:  MOVLW  1A
0E7B4:  MOVWF  FF6
0E7B6:  MOVLW  07
0E7B8:  MOVWF  FF7
0E7BA:  MOVLW  00
0E7BC:  MOVWF  FF8
0E7BE:  MOVLW  12
0E7C0:  MOVLB  B
0E7C2:  MOVWF  x4A
0E7C4:  MOVLB  0
0E7C6:  CALL   1F74
0E7CA:  MOVLW  41
0E7CC:  MOVWF  FE9
0E7CE:  MOVFF  2D9,2DE
0E7D2:  MOVFF  2D8,2DD
0E7D6:  MOVFF  2D7,2DC
0E7DA:  MOVFF  2D6,2DB
0E7DE:  CALL   5F88
0E7E2:  MOVLW  2F
0E7E4:  MOVWF  FF6
0E7E6:  MOVLW  07
0E7E8:  MOVWF  FF7
0E7EA:  MOVLW  00
0E7EC:  MOVWF  FF8
0E7EE:  MOVLW  0B
0E7F0:  MOVLB  B
0E7F2:  MOVWF  x4A
0E7F4:  MOVLB  0
0E7F6:  CALL   1F74
0E7FA:  MOVFF  2DA,2DB
0E7FE:  MOVLW  1B
0E800:  MOVLB  2
0E802:  MOVWF  xDC
0E804:  MOVLB  0
0E806:  CALL   E52C
0E80A:  MOVLW  0D
0E80C:  BTFSS  FA6.6
0E80E:  GOTO   E80C
0E812:  MOVLB  E
0E814:  MOVWF  xF9
0E816:  MOVLW  0A
0E818:  MOVLB  0
0E81A:  BTFSS  FA6.6
0E81C:  GOTO   E81A
0E820:  MOVLB  E
0E822:  MOVWF  xF9
....................     fprintf(PC, "ENVIRO     : Used=%lu, Uncopied=%u\r\n", smf_data_table->fields.headers[CIGS_ENVIRO_DATA].used_size, smf_data_table->fields.headers[CIGS_ENVIRO_DATA].loop_counter);
0E824:  MOVLW  10
0E826:  MOVLB  2
0E828:  ADDWF  xD4,W
0E82A:  MOVWF  FE9
0E82C:  MOVLW  00
0E82E:  ADDWFC xD5,W
0E830:  MOVWF  FEA
0E832:  MOVFF  FEF,2D6
0E836:  MOVFF  FEC,2D7
0E83A:  MOVFF  FEC,2D8
0E83E:  MOVFF  FEC,2D9
0E842:  MOVF   FED,F
0E844:  MOVF   FED,F
0E846:  MOVF   FED,F
0E848:  MOVLW  14
0E84A:  ADDWF  xD4,W
0E84C:  MOVWF  FE9
0E84E:  MOVLW  00
0E850:  ADDWFC xD5,W
0E852:  MOVWF  FEA
0E854:  MOVFF  FEF,2DA
0E858:  MOVLW  40
0E85A:  MOVWF  FF6
0E85C:  MOVLW  07
0E85E:  MOVWF  FF7
0E860:  MOVLW  00
0E862:  MOVWF  FF8
0E864:  MOVLW  12
0E866:  MOVLB  B
0E868:  MOVWF  x4A
0E86A:  MOVLB  0
0E86C:  CALL   1F74
0E870:  MOVLW  41
0E872:  MOVWF  FE9
0E874:  MOVFF  2D9,2DE
0E878:  MOVFF  2D8,2DD
0E87C:  MOVFF  2D7,2DC
0E880:  MOVFF  2D6,2DB
0E884:  CALL   5F88
0E888:  MOVLW  55
0E88A:  MOVWF  FF6
0E88C:  MOVLW  07
0E88E:  MOVWF  FF7
0E890:  MOVLW  00
0E892:  MOVWF  FF8
0E894:  MOVLW  0B
0E896:  MOVLB  B
0E898:  MOVWF  x4A
0E89A:  MOVLB  0
0E89C:  CALL   1F74
0E8A0:  MOVFF  2DA,2DB
0E8A4:  MOVLW  1B
0E8A6:  MOVLB  2
0E8A8:  MOVWF  xDC
0E8AA:  MOVLB  0
0E8AC:  CALL   E52C
0E8B0:  MOVLW  0D
0E8B2:  BTFSS  FA6.6
0E8B4:  GOTO   E8B2
0E8B8:  MOVLB  E
0E8BA:  MOVWF  xF9
0E8BC:  MOVLW  0A
0E8BE:  MOVLB  0
0E8C0:  BTFSS  FA6.6
0E8C2:  GOTO   E8C0
0E8C6:  MOVLB  E
0E8C8:  MOVWF  xF9
....................     fprintf(PC, "IV1_HEADER : Used=%lu, Uncopied=%u\r\n", smf_data_table->fields.headers[CIGS_IV1_HEADER].used_size, smf_data_table->fields.headers[CIGS_IV1_HEADER].loop_counter);
0E8CA:  MOVLW  18
0E8CC:  MOVLB  2
0E8CE:  ADDWF  xD4,W
0E8D0:  MOVWF  FE9
0E8D2:  MOVLW  00
0E8D4:  ADDWFC xD5,W
0E8D6:  MOVWF  FEA
0E8D8:  MOVFF  FEF,2D6
0E8DC:  MOVFF  FEC,2D7
0E8E0:  MOVFF  FEC,2D8
0E8E4:  MOVFF  FEC,2D9
0E8E8:  MOVF   FED,F
0E8EA:  MOVF   FED,F
0E8EC:  MOVF   FED,F
0E8EE:  MOVLW  1C
0E8F0:  ADDWF  xD4,W
0E8F2:  MOVWF  FE9
0E8F4:  MOVLW  00
0E8F6:  ADDWFC xD5,W
0E8F8:  MOVWF  FEA
0E8FA:  MOVFF  FEF,2DA
0E8FE:  MOVLW  66
0E900:  MOVWF  FF6
0E902:  MOVLW  07
0E904:  MOVWF  FF7
0E906:  MOVLW  00
0E908:  MOVWF  FF8
0E90A:  MOVLW  12
0E90C:  MOVLB  B
0E90E:  MOVWF  x4A
0E910:  MOVLB  0
0E912:  CALL   1F74
0E916:  MOVLW  41
0E918:  MOVWF  FE9
0E91A:  MOVFF  2D9,2DE
0E91E:  MOVFF  2D8,2DD
0E922:  MOVFF  2D7,2DC
0E926:  MOVFF  2D6,2DB
0E92A:  CALL   5F88
0E92E:  MOVLW  7B
0E930:  MOVWF  FF6
0E932:  MOVLW  07
0E934:  MOVWF  FF7
0E936:  MOVLW  00
0E938:  MOVWF  FF8
0E93A:  MOVLW  0B
0E93C:  MOVLB  B
0E93E:  MOVWF  x4A
0E940:  MOVLB  0
0E942:  CALL   1F74
0E946:  MOVFF  2DA,2DB
0E94A:  MOVLW  1B
0E94C:  MOVLB  2
0E94E:  MOVWF  xDC
0E950:  MOVLB  0
0E952:  CALL   E52C
0E956:  MOVLW  0D
0E958:  BTFSS  FA6.6
0E95A:  GOTO   E958
0E95E:  MOVLB  E
0E960:  MOVWF  xF9
0E962:  MOVLW  0A
0E964:  MOVLB  0
0E966:  BTFSS  FA6.6
0E968:  GOTO   E966
0E96C:  MOVLB  E
0E96E:  MOVWF  xF9
....................     fprintf(PC, "IV1_DATA   : Used=%lu, Uncopied=%u\r\n", smf_data_table->fields.headers[CIGS_IV1_DATA].used_size, smf_data_table->fields.headers[CIGS_IV1_DATA].loop_counter);
0E970:  MOVLW  20
0E972:  MOVLB  2
0E974:  ADDWF  xD4,W
0E976:  MOVWF  FE9
0E978:  MOVLW  00
0E97A:  ADDWFC xD5,W
0E97C:  MOVWF  FEA
0E97E:  MOVFF  FEF,2D6
0E982:  MOVFF  FEC,2D7
0E986:  MOVFF  FEC,2D8
0E98A:  MOVFF  FEC,2D9
0E98E:  MOVF   FED,F
0E990:  MOVF   FED,F
0E992:  MOVF   FED,F
0E994:  MOVLW  24
0E996:  ADDWF  xD4,W
0E998:  MOVWF  FE9
0E99A:  MOVLW  00
0E99C:  ADDWFC xD5,W
0E99E:  MOVWF  FEA
0E9A0:  MOVFF  FEF,2DA
0E9A4:  MOVLW  8C
0E9A6:  MOVWF  FF6
0E9A8:  MOVLW  07
0E9AA:  MOVWF  FF7
0E9AC:  MOVLW  00
0E9AE:  MOVWF  FF8
0E9B0:  MOVLW  12
0E9B2:  MOVLB  B
0E9B4:  MOVWF  x4A
0E9B6:  MOVLB  0
0E9B8:  CALL   1F74
0E9BC:  MOVLW  41
0E9BE:  MOVWF  FE9
0E9C0:  MOVFF  2D9,2DE
0E9C4:  MOVFF  2D8,2DD
0E9C8:  MOVFF  2D7,2DC
0E9CC:  MOVFF  2D6,2DB
0E9D0:  CALL   5F88
0E9D4:  MOVLW  A1
0E9D6:  MOVWF  FF6
0E9D8:  MOVLW  07
0E9DA:  MOVWF  FF7
0E9DC:  MOVLW  00
0E9DE:  MOVWF  FF8
0E9E0:  MOVLW  0B
0E9E2:  MOVLB  B
0E9E4:  MOVWF  x4A
0E9E6:  MOVLB  0
0E9E8:  CALL   1F74
0E9EC:  MOVFF  2DA,2DB
0E9F0:  MOVLW  1B
0E9F2:  MOVLB  2
0E9F4:  MOVWF  xDC
0E9F6:  MOVLB  0
0E9F8:  CALL   E52C
0E9FC:  MOVLW  0D
0E9FE:  BTFSS  FA6.6
0EA00:  GOTO   E9FE
0EA04:  MOVLB  E
0EA06:  MOVWF  xF9
0EA08:  MOVLW  0A
0EA0A:  MOVLB  0
0EA0C:  BTFSS  FA6.6
0EA0E:  GOTO   EA0C
0EA12:  MOVLB  E
0EA14:  MOVWF  xF9
....................     fprintf(PC, "IV2_HEADER : Used=%lu, Uncopied=%u\r\n", smf_data_table->fields.headers[CIGS_IV2_HEADER].used_size, smf_data_table->fields.headers[CIGS_IV2_HEADER].loop_counter);
0EA16:  MOVLW  28
0EA18:  MOVLB  2
0EA1A:  ADDWF  xD4,W
0EA1C:  MOVWF  FE9
0EA1E:  MOVLW  00
0EA20:  ADDWFC xD5,W
0EA22:  MOVWF  FEA
0EA24:  MOVFF  FEF,2D6
0EA28:  MOVFF  FEC,2D7
0EA2C:  MOVFF  FEC,2D8
0EA30:  MOVFF  FEC,2D9
0EA34:  MOVF   FED,F
0EA36:  MOVF   FED,F
0EA38:  MOVF   FED,F
0EA3A:  MOVLW  2C
0EA3C:  ADDWF  xD4,W
0EA3E:  MOVWF  FE9
0EA40:  MOVLW  00
0EA42:  ADDWFC xD5,W
0EA44:  MOVWF  FEA
0EA46:  MOVFF  FEF,2DA
0EA4A:  MOVLW  B2
0EA4C:  MOVWF  FF6
0EA4E:  MOVLW  07
0EA50:  MOVWF  FF7
0EA52:  MOVLW  00
0EA54:  MOVWF  FF8
0EA56:  MOVLW  12
0EA58:  MOVLB  B
0EA5A:  MOVWF  x4A
0EA5C:  MOVLB  0
0EA5E:  CALL   1F74
0EA62:  MOVLW  41
0EA64:  MOVWF  FE9
0EA66:  MOVFF  2D9,2DE
0EA6A:  MOVFF  2D8,2DD
0EA6E:  MOVFF  2D7,2DC
0EA72:  MOVFF  2D6,2DB
0EA76:  CALL   5F88
0EA7A:  MOVLW  C7
0EA7C:  MOVWF  FF6
0EA7E:  MOVLW  07
0EA80:  MOVWF  FF7
0EA82:  MOVLW  00
0EA84:  MOVWF  FF8
0EA86:  MOVLW  0B
0EA88:  MOVLB  B
0EA8A:  MOVWF  x4A
0EA8C:  MOVLB  0
0EA8E:  CALL   1F74
0EA92:  MOVFF  2DA,2DB
0EA96:  MOVLW  1B
0EA98:  MOVLB  2
0EA9A:  MOVWF  xDC
0EA9C:  MOVLB  0
0EA9E:  CALL   E52C
0EAA2:  MOVLW  0D
0EAA4:  BTFSS  FA6.6
0EAA6:  GOTO   EAA4
0EAAA:  MOVLB  E
0EAAC:  MOVWF  xF9
0EAAE:  MOVLW  0A
0EAB0:  MOVLB  0
0EAB2:  BTFSS  FA6.6
0EAB4:  GOTO   EAB2
0EAB8:  MOVLB  E
0EABA:  MOVWF  xF9
....................     fprintf(PC, "IV2_DATA   : Used=%lu, Uncopied=%u\r\n", smf_data_table->fields.headers[CIGS_IV2_DATA].used_size, smf_data_table->fields.headers[CIGS_IV2_DATA].loop_counter);
0EABC:  MOVLW  30
0EABE:  MOVLB  2
0EAC0:  ADDWF  xD4,W
0EAC2:  MOVWF  FE9
0EAC4:  MOVLW  00
0EAC6:  ADDWFC xD5,W
0EAC8:  MOVWF  FEA
0EACA:  MOVFF  FEF,2D6
0EACE:  MOVFF  FEC,2D7
0EAD2:  MOVFF  FEC,2D8
0EAD6:  MOVFF  FEC,2D9
0EADA:  MOVF   FED,F
0EADC:  MOVF   FED,F
0EADE:  MOVF   FED,F
0EAE0:  MOVLW  34
0EAE2:  ADDWF  xD4,W
0EAE4:  MOVWF  FE9
0EAE6:  MOVLW  00
0EAE8:  ADDWFC xD5,W
0EAEA:  MOVWF  FEA
0EAEC:  MOVFF  FEF,2DA
0EAF0:  MOVLW  D8
0EAF2:  MOVWF  FF6
0EAF4:  MOVLW  07
0EAF6:  MOVWF  FF7
0EAF8:  MOVLW  00
0EAFA:  MOVWF  FF8
0EAFC:  MOVLW  12
0EAFE:  MOVLB  B
0EB00:  MOVWF  x4A
0EB02:  MOVLB  0
0EB04:  CALL   1F74
0EB08:  MOVLW  41
0EB0A:  MOVWF  FE9
0EB0C:  MOVFF  2D9,2DE
0EB10:  MOVFF  2D8,2DD
0EB14:  MOVFF  2D7,2DC
0EB18:  MOVFF  2D6,2DB
0EB1C:  CALL   5F88
0EB20:  MOVLW  ED
0EB22:  MOVWF  FF6
0EB24:  MOVLW  07
0EB26:  MOVWF  FF7
0EB28:  MOVLW  00
0EB2A:  MOVWF  FF8
0EB2C:  MOVLW  0B
0EB2E:  MOVLB  B
0EB30:  MOVWF  x4A
0EB32:  MOVLB  0
0EB34:  CALL   1F74
0EB38:  MOVFF  2DA,2DB
0EB3C:  MOVLW  1B
0EB3E:  MOVLB  2
0EB40:  MOVWF  xDC
0EB42:  MOVLB  0
0EB44:  CALL   E52C
0EB48:  MOVLW  0D
0EB4A:  BTFSS  FA6.6
0EB4C:  GOTO   EB4A
0EB50:  MOVLB  E
0EB52:  MOVWF  xF9
0EB54:  MOVLW  0A
0EB56:  MOVLB  0
0EB58:  BTFSS  FA6.6
0EB5A:  GOTO   EB58
0EB5E:  MOVLB  E
0EB60:  MOVWF  xF9
....................     fprintf(PC, "------------------------------\r\n\r\n");
0EB62:  MOVLW  FE
0EB64:  MOVWF  FF6
0EB66:  MOVLW  07
0EB68:  MOVWF  FF7
0EB6A:  MOVLW  00
0EB6C:  MOVWF  FF8
0EB6E:  MOVLB  0
0EB70:  CALL   1F3E
0EB74:  GOTO   ED68 (RETURN)
.................... }
.................... 
.................... void smf_write(FlashOperationStruct *smf_data_ptr)
.................... {
....................     fprintf(PC, "\r\n_______________________________\r\n");
*
0F016:  MOVLW  22
0F018:  MOVWF  FF6
0F01A:  MOVLW  08
0F01C:  MOVWF  FF7
0F01E:  MOVLW  00
0F020:  MOVWF  FF8
0F022:  CALL   1F3E
....................     fprintf(PC, "_________Start copy_data_________\r\n");
0F026:  MOVLW  46
0F028:  MOVWF  FF6
0F02A:  MOVLW  08
0F02C:  MOVWF  FF7
0F02E:  MOVLW  00
0F030:  MOVWF  FF8
0F032:  CALL   1F3E
....................     
....................     // 接続確認
....................     if (!is_connect(mis_fm))
0F036:  MOVFF  115,2D4
0F03A:  MOVFF  114,2D3
0F03E:  MOVFF  113,2D2
0F042:  MOVFF  112,2D1
0F046:  CALL   2AA0
0F04A:  MOVF   01,F
0F04C:  BTFSS  FD8.2
0F04E:  GOTO   F066
....................     {
....................         fprintf(PC, "Error: MIS FM is not connected\r\n");
0F052:  MOVLW  6A
0F054:  MOVWF  FF6
0F056:  MOVLW  08
0F058:  MOVWF  FF7
0F05A:  MOVLW  00
0F05C:  MOVWF  FF8
0F05E:  CALL   1F3E
....................         return;
0F062:  GOTO   FB16
....................     }    
....................     if (!is_connect(smf))
0F066:  MOVFF  119,2D4
0F06A:  MOVFF  118,2D3
0F06E:  MOVFF  117,2D2
0F072:  MOVFF  116,2D1
0F076:  CALL   2AA0
0F07A:  MOVF   01,F
0F07C:  BTFSS  FD8.2
0F07E:  GOTO   F096
....................     {
....................         fprintf(PC, "Error: SMF is not connected\r\n");
0F082:  MOVLW  8C
0F084:  MOVWF  FF6
0F086:  MOVLW  08
0F088:  MOVWF  FF7
0F08A:  MOVLW  00
0F08C:  MOVWF  FF8
0F08E:  CALL   1F3E
....................         return;
0F092:  GOTO   FB16
....................     }    
.................... 
.................... 
....................     smf_data_table_t smf_data_table;
....................     read_smf_header(&smf_data_table);
0F096:  MOVLW  02
0F098:  MOVLB  2
0F09A:  MOVWF  xD2
0F09C:  MOVLW  2D
0F09E:  MOVWF  xD1
0F0A0:  MOVLB  0
0F0A2:  GOTO   ECFC
.................... 
.................... 
....................     unsigned int32 write_src;
....................     unsigned int32 write_size;
.................... 
....................     //アドレスと自動更新
....................     if (smf_data_ptr->source_type == SOURCE_MISF_UNCOPIED )
0F0A6:  MOVLW  03
0F0A8:  MOVLB  2
0F0AA:  ADDWF  x2B,W
0F0AC:  MOVWF  01
0F0AE:  MOVLW  00
0F0B0:  ADDWFC x2C,W
0F0B2:  MOVWF  03
0F0B4:  MOVF   01,W
0F0B6:  MOVWF  FE9
0F0B8:  MOVFF  03,FEA
0F0BC:  BTFSS  FEF.0
0F0BE:  BRA    F0C6
0F0C0:  MOVLB  0
0F0C2:  GOTO   F1F0
0F0C6:  MOVLB  0
....................     {
....................         write_src = MISF_ADDRESS_TABLE[smf_data_ptr->mission_id].start + flash_counter_table[smf_data_ptr->mission_id].used_counter - flash_counter_table[smf_data_ptr->mission_id].uncopied_counter;
0F0C8:  MOVLB  2
0F0CA:  MOVF   x2B,W
0F0CC:  MOVWF  FE9
0F0CE:  MOVF   x2C,W
0F0D0:  MOVWF  FEA
0F0D2:  MOVF   FEF,W
0F0D4:  MULLW  0C
0F0D6:  MOVF   FF3,W
0F0D8:  CLRF   xD2
0F0DA:  MOVWF  xD1
0F0DC:  MOVFF  2D2,03
0F0E0:  MOVF   xD1,W
0F0E2:  MOVLB  0
0F0E4:  CALL   0132
0F0E8:  MOVWF  00
0F0EA:  TBLRD*+
0F0EC:  MOVFF  FF5,01
0F0F0:  TBLRD*+
0F0F2:  MOVFF  FF5,02
0F0F6:  TBLRD*+
0F0F8:  MOVFF  FF5,03
0F0FC:  MOVFF  03,2D6
0F100:  MOVFF  02,2D5
0F104:  MOVFF  01,2D4
0F108:  MOVFF  00,2D3
0F10C:  MOVLB  2
0F10E:  MOVF   x2B,W
0F110:  MOVWF  FE9
0F112:  MOVF   x2C,W
0F114:  MOVWF  FEA
0F116:  MOVF   FEF,W
0F118:  MULLW  0A
0F11A:  MOVF   FF3,W
0F11C:  CLRF   xD8
0F11E:  MOVWF  xD7
0F120:  MOVLW  2E
0F122:  ADDWF  xD7,W
0F124:  MOVWF  FE9
0F126:  MOVLW  01
0F128:  ADDWFC xD8,W
0F12A:  MOVWF  FEA
0F12C:  MOVFF  FEF,00
0F130:  MOVFF  FEC,01
0F134:  MOVFF  FEC,02
0F138:  MOVFF  FEC,03
0F13C:  MOVF   FED,F
0F13E:  MOVF   FED,F
0F140:  MOVF   FED,F
0F142:  MOVF   00,W
0F144:  ADDWF  xD3,F
0F146:  MOVF   01,W
0F148:  ADDWFC xD4,F
0F14A:  MOVF   02,W
0F14C:  ADDWFC xD5,F
0F14E:  MOVF   03,W
0F150:  ADDWFC xD6,F
0F152:  MOVF   x2B,W
0F154:  MOVWF  FE9
0F156:  MOVF   x2C,W
0F158:  MOVWF  FEA
0F15A:  MOVF   FEF,W
0F15C:  MULLW  0A
0F15E:  MOVF   FF3,W
0F160:  CLRF   xDA
0F162:  MOVWF  xD9
0F164:  MOVLW  04
0F166:  ADDWF  xD9,W
0F168:  MOVWF  01
0F16A:  MOVLW  00
0F16C:  ADDWFC xDA,W
0F16E:  MOVWF  03
0F170:  MOVF   01,W
0F172:  ADDLW  2E
0F174:  MOVWF  FE9
0F176:  MOVLW  01
0F178:  ADDWFC 03,W
0F17A:  MOVWF  FEA
0F17C:  MOVFF  FEF,00
0F180:  MOVFF  FEC,01
0F184:  MOVFF  FEC,02
0F188:  MOVFF  FEC,03
0F18C:  MOVF   FED,F
0F18E:  MOVF   FED,F
0F190:  MOVF   FED,F
0F192:  MOVF   00,W
0F194:  SUBWF  xD3,W
0F196:  MOVWF  x6D
0F198:  MOVF   01,W
0F19A:  SUBWFB xD4,W
0F19C:  MOVWF  x6E
0F19E:  MOVF   02,W
0F1A0:  SUBWFB xD5,W
0F1A2:  MOVWF  x6F
0F1A4:  MOVF   03,W
0F1A6:  SUBWFB xD6,W
0F1A8:  MOVWF  x70
....................         write_size = flash_counter_table[smf_data_ptr->mission_id].uncopied_counter;
0F1AA:  MOVF   x2B,W
0F1AC:  MOVWF  FE9
0F1AE:  MOVF   x2C,W
0F1B0:  MOVWF  FEA
0F1B2:  MOVF   FEF,W
0F1B4:  MULLW  0A
0F1B6:  MOVF   FF3,W
0F1B8:  CLRF   xD2
0F1BA:  MOVWF  xD1
0F1BC:  MOVLW  04
0F1BE:  ADDWF  xD1,W
0F1C0:  MOVWF  01
0F1C2:  MOVLW  00
0F1C4:  ADDWFC xD2,W
0F1C6:  MOVWF  03
0F1C8:  MOVF   01,W
0F1CA:  ADDLW  2E
0F1CC:  MOVWF  FE9
0F1CE:  MOVLW  01
0F1D0:  ADDWFC 03,W
0F1D2:  MOVWF  FEA
0F1D4:  MOVFF  FEF,271
0F1D8:  MOVFF  FEC,272
0F1DC:  MOVFF  FEC,273
0F1E0:  MOVFF  FEC,274
0F1E4:  MOVF   FED,F
0F1E6:  MOVF   FED,F
0F1E8:  MOVF   FED,F
0F1EA:  MOVLB  0
....................     }else if(smf_data_ptr->source_type == SOURCE_MISF_MANUAL)
0F1EC:  GOTO   F25A
0F1F0:  MOVLW  03
0F1F2:  MOVLB  2
0F1F4:  ADDWF  x2B,W
0F1F6:  MOVWF  01
0F1F8:  MOVLW  00
0F1FA:  ADDWFC x2C,W
0F1FC:  MOVWF  03
0F1FE:  MOVF   01,W
0F200:  MOVWF  FE9
0F202:  MOVFF  03,FEA
0F206:  BTFSC  FEF.0
0F208:  BRA    F210
0F20A:  MOVLB  0
0F20C:  GOTO   F25A
0F210:  MOVLB  0
....................     {
....................         write_src = smf_data_ptr->misf_start_addr;
0F212:  MOVLW  04
0F214:  MOVLB  2
0F216:  ADDWF  x2B,W
0F218:  MOVWF  FE9
0F21A:  MOVLW  00
0F21C:  ADDWFC x2C,W
0F21E:  MOVWF  FEA
0F220:  MOVFF  FEF,26D
0F224:  MOVFF  FEC,26E
0F228:  MOVFF  FEC,26F
0F22C:  MOVFF  FEC,270
0F230:  MOVF   FED,F
0F232:  MOVF   FED,F
0F234:  MOVF   FED,F
....................         write_size = smf_data_ptr->misf_size;
0F236:  MOVLW  08
0F238:  ADDWF  x2B,W
0F23A:  MOVWF  FE9
0F23C:  MOVLW  00
0F23E:  ADDWFC x2C,W
0F240:  MOVWF  FEA
0F242:  MOVFF  FEF,271
0F246:  MOVFF  FEC,272
0F24A:  MOVFF  FEC,273
0F24E:  MOVFF  FEC,274
0F252:  MOVF   FED,F
0F254:  MOVF   FED,F
0F256:  MOVF   FED,F
0F258:  MOVLB  0
....................     }
.................... 
....................     unsigned int32 smf_address_start = SMF_ADDRESS_TABLE[smf_data_ptr->mission_id].start;
....................     unsigned int32 smf_address_end   = SMF_ADDRESS_TABLE[smf_data_ptr->mission_id].end;
....................     unsigned int32 misf_address_start = MISF_ADDRESS_TABLE[smf_data_ptr->mission_id].start;
....................     unsigned int32 misf_address_end   = MISF_ADDRESS_TABLE[smf_data_ptr->mission_id].end;
0F25A:  MOVLB  2
0F25C:  MOVF   x2B,W
0F25E:  MOVWF  FE9
0F260:  MOVF   x2C,W
0F262:  MOVWF  FEA
0F264:  MOVF   FEF,W
0F266:  MULLW  0C
0F268:  MOVF   FF3,W
0F26A:  CLRF   xD2
0F26C:  MOVWF  xD1
0F26E:  MOVFF  2D2,03
0F272:  MOVF   xD1,W
0F274:  MOVLB  0
0F276:  CALL   00CA
0F27A:  MOVWF  00
0F27C:  TBLRD*+
0F27E:  MOVFF  FF5,01
0F282:  TBLRD*+
0F284:  MOVFF  FF5,02
0F288:  TBLRD*+
0F28A:  MOVFF  FF5,03
0F28E:  MOVFF  03,278
0F292:  MOVFF  02,277
0F296:  MOVFF  01,276
0F29A:  MOVFF  00,275
0F29E:  MOVLB  2
0F2A0:  MOVF   x2B,W
0F2A2:  MOVWF  FE9
0F2A4:  MOVF   x2C,W
0F2A6:  MOVWF  FEA
0F2A8:  MOVF   FEF,W
0F2AA:  MULLW  0C
0F2AC:  MOVF   FF3,W
0F2AE:  CLRF   xD4
0F2B0:  MOVWF  xD3
0F2B2:  MOVLW  04
0F2B4:  ADDWF  xD3,W
0F2B6:  MOVWF  01
0F2B8:  MOVLW  00
0F2BA:  ADDWFC xD4,W
0F2BC:  MOVWF  03
0F2BE:  MOVF   01,W
0F2C0:  MOVLB  0
0F2C2:  CALL   00CA
0F2C6:  MOVWF  00
0F2C8:  TBLRD*+
0F2CA:  MOVFF  FF5,01
0F2CE:  TBLRD*+
0F2D0:  MOVFF  FF5,02
0F2D4:  TBLRD*+
0F2D6:  MOVFF  FF5,03
0F2DA:  MOVFF  03,27C
0F2DE:  MOVFF  02,27B
0F2E2:  MOVFF  01,27A
0F2E6:  MOVFF  00,279
0F2EA:  MOVLB  2
0F2EC:  MOVF   x2B,W
0F2EE:  MOVWF  FE9
0F2F0:  MOVF   x2C,W
0F2F2:  MOVWF  FEA
0F2F4:  MOVF   FEF,W
0F2F6:  MULLW  0C
0F2F8:  MOVF   FF3,W
0F2FA:  CLRF   xD4
0F2FC:  MOVWF  xD3
0F2FE:  MOVFF  2D4,03
0F302:  MOVF   xD3,W
0F304:  MOVLB  0
0F306:  CALL   0132
0F30A:  MOVWF  00
0F30C:  TBLRD*+
0F30E:  MOVFF  FF5,01
0F312:  TBLRD*+
0F314:  MOVFF  FF5,02
0F318:  TBLRD*+
0F31A:  MOVFF  FF5,03
0F31E:  MOVFF  03,280
0F322:  MOVFF  02,27F
0F326:  MOVFF  01,27E
0F32A:  MOVFF  00,27D
0F32E:  MOVLB  2
0F330:  MOVF   x2B,W
0F332:  MOVWF  FE9
0F334:  MOVF   x2C,W
0F336:  MOVWF  FEA
0F338:  MOVF   FEF,W
0F33A:  MULLW  0C
0F33C:  MOVF   FF3,W
0F33E:  CLRF   xD6
0F340:  MOVWF  xD5
0F342:  MOVLW  04
0F344:  ADDWF  xD5,W
0F346:  MOVWF  01
0F348:  MOVLW  00
0F34A:  ADDWFC xD6,W
0F34C:  MOVWF  03
0F34E:  MOVF   01,W
0F350:  MOVLB  0
0F352:  CALL   0132
0F356:  MOVWF  00
0F358:  TBLRD*+
0F35A:  MOVFF  FF5,01
0F35E:  TBLRD*+
0F360:  MOVFF  FF5,02
0F364:  TBLRD*+
0F366:  MOVFF  FF5,03
0F36A:  MOVFF  03,284
0F36E:  MOVFF  02,283
0F372:  MOVFF  01,282
0F376:  MOVFF  00,281
.................... 
.................... 
.................... 
....................     // Print SMF ADDRESS
....................     fprintf(PC,"[SMF ADDRESS]\r\n");
0F37A:  MOVLW  AA
0F37C:  MOVWF  FF6
0F37E:  MOVLW  08
0F380:  MOVWF  FF7
0F382:  MOVLW  00
0F384:  MOVWF  FF8
0F386:  CALL   1F3E
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
0F38A:  MOVLW  BA
0F38C:  MOVWF  FF6
0F38E:  MOVLW  08
0F390:  MOVWF  FF7
0F392:  MOVLW  00
0F394:  MOVWF  FF8
0F396:  CALL   1F3E
....................     fprintf(PC, "\tSTART\t0x%08LX\r\n", smf_address_start);
0F39A:  MOVLW  E6
0F39C:  MOVWF  FF6
0F39E:  MOVLW  08
0F3A0:  MOVWF  FF7
0F3A2:  MOVLW  00
0F3A4:  MOVWF  FF8
0F3A6:  MOVLW  09
0F3A8:  MOVLB  B
0F3AA:  MOVWF  x4A
0F3AC:  MOVLB  0
0F3AE:  CALL   1F74
0F3B2:  MOVFF  278,B4B
0F3B6:  MOVLW  37
0F3B8:  MOVLB  B
0F3BA:  MOVWF  x4C
0F3BC:  MOVLB  0
0F3BE:  CALL   2188
0F3C2:  MOVFF  277,B4B
0F3C6:  MOVLW  37
0F3C8:  MOVLB  B
0F3CA:  MOVWF  x4C
0F3CC:  MOVLB  0
0F3CE:  CALL   2188
0F3D2:  MOVFF  276,B4B
0F3D6:  MOVLW  37
0F3D8:  MOVLB  B
0F3DA:  MOVWF  x4C
0F3DC:  MOVLB  0
0F3DE:  CALL   2188
0F3E2:  MOVFF  275,B4B
0F3E6:  MOVLW  37
0F3E8:  MOVLB  B
0F3EA:  MOVWF  x4C
0F3EC:  MOVLB  0
0F3EE:  CALL   2188
0F3F2:  MOVLW  0D
0F3F4:  BTFSS  FA6.6
0F3F6:  GOTO   F3F4
0F3FA:  MOVLB  E
0F3FC:  MOVWF  xF9
0F3FE:  MOVLW  0A
0F400:  MOVLB  0
0F402:  BTFSS  FA6.6
0F404:  GOTO   F402
0F408:  MOVLB  E
0F40A:  MOVWF  xF9
....................     fprintf(PC, "\tEND\t0x%08LX\r\n", smf_address_end);
0F40C:  MOVLW  F8
0F40E:  MOVWF  FF6
0F410:  MOVLW  08
0F412:  MOVWF  FF7
0F414:  MOVLW  00
0F416:  MOVWF  FF8
0F418:  MOVLW  07
0F41A:  MOVLB  B
0F41C:  MOVWF  x4A
0F41E:  MOVLB  0
0F420:  CALL   1F74
0F424:  MOVFF  27C,B4B
0F428:  MOVLW  37
0F42A:  MOVLB  B
0F42C:  MOVWF  x4C
0F42E:  MOVLB  0
0F430:  CALL   2188
0F434:  MOVFF  27B,B4B
0F438:  MOVLW  37
0F43A:  MOVLB  B
0F43C:  MOVWF  x4C
0F43E:  MOVLB  0
0F440:  CALL   2188
0F444:  MOVFF  27A,B4B
0F448:  MOVLW  37
0F44A:  MOVLB  B
0F44C:  MOVWF  x4C
0F44E:  MOVLB  0
0F450:  CALL   2188
0F454:  MOVFF  279,B4B
0F458:  MOVLW  37
0F45A:  MOVLB  B
0F45C:  MOVWF  x4C
0F45E:  MOVLB  0
0F460:  CALL   2188
0F464:  MOVLW  0D
0F466:  BTFSS  FA6.6
0F468:  GOTO   F466
0F46C:  MOVLB  E
0F46E:  MOVWF  xF9
0F470:  MOVLW  0A
0F472:  MOVLB  0
0F474:  BTFSS  FA6.6
0F476:  GOTO   F474
0F47A:  MOVLB  E
0F47C:  MOVWF  xF9
....................     fprintf(PC, "\tUSED\t0x%08LX\r\n", smf_data_table.fields.headers[smf_data_ptr->mission_id].used_size);
0F47E:  MOVLB  2
0F480:  MOVF   x2B,W
0F482:  MOVWF  FE9
0F484:  MOVF   x2C,W
0F486:  MOVWF  FEA
0F488:  MOVF   FEF,W
0F48A:  MULLW  08
0F48C:  MOVF   FF3,W
0F48E:  CLRF   xD2
0F490:  MOVWF  xD1
0F492:  MOVLW  2D
0F494:  ADDWF  xD1,W
0F496:  MOVWF  FE9
0F498:  MOVLW  02
0F49A:  ADDWFC xD2,W
0F49C:  MOVWF  FEA
0F49E:  MOVFF  FEF,2D3
0F4A2:  MOVFF  FEC,2D4
0F4A6:  MOVFF  FEC,2D5
0F4AA:  MOVFF  FEC,2D6
0F4AE:  MOVF   FED,F
0F4B0:  MOVF   FED,F
0F4B2:  MOVF   FED,F
0F4B4:  MOVLW  08
0F4B6:  MOVWF  FF6
0F4B8:  MOVLW  09
0F4BA:  MOVWF  FF7
0F4BC:  MOVLW  00
0F4BE:  MOVWF  FF8
0F4C0:  MOVLW  08
0F4C2:  MOVLB  B
0F4C4:  MOVWF  x4A
0F4C6:  MOVLB  0
0F4C8:  CALL   1F74
0F4CC:  MOVFF  2D6,B4B
0F4D0:  MOVLW  37
0F4D2:  MOVLB  B
0F4D4:  MOVWF  x4C
0F4D6:  MOVLB  0
0F4D8:  CALL   2188
0F4DC:  MOVFF  2D5,B4B
0F4E0:  MOVLW  37
0F4E2:  MOVLB  B
0F4E4:  MOVWF  x4C
0F4E6:  MOVLB  0
0F4E8:  CALL   2188
0F4EC:  MOVFF  2D4,B4B
0F4F0:  MOVLW  37
0F4F2:  MOVLB  B
0F4F4:  MOVWF  x4C
0F4F6:  MOVLB  0
0F4F8:  CALL   2188
0F4FC:  MOVFF  2D3,B4B
0F500:  MOVLW  37
0F502:  MOVLB  B
0F504:  MOVWF  x4C
0F506:  MOVLB  0
0F508:  CALL   2188
0F50C:  MOVLW  0D
0F50E:  BTFSS  FA6.6
0F510:  GOTO   F50E
0F514:  MOVLB  E
0F516:  MOVWF  xF9
0F518:  MOVLW  0A
0F51A:  MOVLB  0
0F51C:  BTFSS  FA6.6
0F51E:  GOTO   F51C
0F522:  MOVLB  E
0F524:  MOVWF  xF9
....................     fprintf(PC, "\tNEXT\t0x%08LX\r\n", smf_address_start + smf_data_table.fields.headers[smf_data_ptr->mission_id].used_size);
0F526:  MOVLB  2
0F528:  MOVF   x2B,W
0F52A:  MOVWF  FE9
0F52C:  MOVF   x2C,W
0F52E:  MOVWF  FEA
0F530:  MOVF   FEF,W
0F532:  MULLW  08
0F534:  MOVF   FF3,W
0F536:  CLRF   xD2
0F538:  MOVWF  xD1
0F53A:  MOVLW  2D
0F53C:  ADDWF  xD1,W
0F53E:  MOVWF  FE9
0F540:  MOVLW  02
0F542:  ADDWFC xD2,W
0F544:  MOVWF  FEA
0F546:  MOVFF  FEF,00
0F54A:  MOVFF  FEC,01
0F54E:  MOVFF  FEC,02
0F552:  MOVFF  FEC,03
0F556:  MOVF   FED,F
0F558:  MOVF   FED,F
0F55A:  MOVF   FED,F
0F55C:  MOVF   00,W
0F55E:  ADDWF  x75,W
0F560:  MOVWF  xD3
0F562:  MOVF   01,W
0F564:  ADDWFC x76,W
0F566:  MOVWF  xD4
0F568:  MOVF   02,W
0F56A:  ADDWFC x77,W
0F56C:  MOVWF  xD5
0F56E:  MOVF   03,W
0F570:  ADDWFC x78,W
0F572:  MOVWF  xD6
0F574:  MOVLW  18
0F576:  MOVWF  FF6
0F578:  MOVLW  09
0F57A:  MOVWF  FF7
0F57C:  MOVLW  00
0F57E:  MOVWF  FF8
0F580:  MOVLW  08
0F582:  MOVLB  B
0F584:  MOVWF  x4A
0F586:  MOVLB  0
0F588:  CALL   1F74
0F58C:  MOVFF  2D6,B4B
0F590:  MOVLW  37
0F592:  MOVLB  B
0F594:  MOVWF  x4C
0F596:  MOVLB  0
0F598:  CALL   2188
0F59C:  MOVFF  2D5,B4B
0F5A0:  MOVLW  37
0F5A2:  MOVLB  B
0F5A4:  MOVWF  x4C
0F5A6:  MOVLB  0
0F5A8:  CALL   2188
0F5AC:  MOVFF  2D4,B4B
0F5B0:  MOVLW  37
0F5B2:  MOVLB  B
0F5B4:  MOVWF  x4C
0F5B6:  MOVLB  0
0F5B8:  CALL   2188
0F5BC:  MOVFF  2D3,B4B
0F5C0:  MOVLW  37
0F5C2:  MOVLB  B
0F5C4:  MOVWF  x4C
0F5C6:  MOVLB  0
0F5C8:  CALL   2188
0F5CC:  MOVLW  0D
0F5CE:  BTFSS  FA6.6
0F5D0:  GOTO   F5CE
0F5D4:  MOVLB  E
0F5D6:  MOVWF  xF9
0F5D8:  MOVLW  0A
0F5DA:  MOVLB  0
0F5DC:  BTFSS  FA6.6
0F5DE:  GOTO   F5DC
0F5E2:  MOVLB  E
0F5E4:  MOVWF  xF9
.................... 
....................     // Print MISF ADDRESS
....................     fprintf(PC,"[MISF ADDRESS]\r\n");
0F5E6:  MOVLW  28
0F5E8:  MOVWF  FF6
0F5EA:  MOVLW  09
0F5EC:  MOVWF  FF7
0F5EE:  MOVLW  00
0F5F0:  MOVWF  FF8
0F5F2:  MOVLB  0
0F5F4:  CALL   1F3E
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
0F5F8:  MOVLW  3A
0F5FA:  MOVWF  FF6
0F5FC:  MOVLW  09
0F5FE:  MOVWF  FF7
0F600:  MOVLW  00
0F602:  MOVWF  FF8
0F604:  CALL   1F3E
....................     fprintf(PC, "\tSTART\t0x%08LX\r\n", misf_address_start);
0F608:  MOVLW  66
0F60A:  MOVWF  FF6
0F60C:  MOVLW  09
0F60E:  MOVWF  FF7
0F610:  MOVLW  00
0F612:  MOVWF  FF8
0F614:  MOVLW  09
0F616:  MOVLB  B
0F618:  MOVWF  x4A
0F61A:  MOVLB  0
0F61C:  CALL   1F74
0F620:  MOVFF  280,B4B
0F624:  MOVLW  37
0F626:  MOVLB  B
0F628:  MOVWF  x4C
0F62A:  MOVLB  0
0F62C:  CALL   2188
0F630:  MOVFF  27F,B4B
0F634:  MOVLW  37
0F636:  MOVLB  B
0F638:  MOVWF  x4C
0F63A:  MOVLB  0
0F63C:  CALL   2188
0F640:  MOVFF  27E,B4B
0F644:  MOVLW  37
0F646:  MOVLB  B
0F648:  MOVWF  x4C
0F64A:  MOVLB  0
0F64C:  CALL   2188
0F650:  MOVFF  27D,B4B
0F654:  MOVLW  37
0F656:  MOVLB  B
0F658:  MOVWF  x4C
0F65A:  MOVLB  0
0F65C:  CALL   2188
0F660:  MOVLW  0D
0F662:  BTFSS  FA6.6
0F664:  GOTO   F662
0F668:  MOVLB  E
0F66A:  MOVWF  xF9
0F66C:  MOVLW  0A
0F66E:  MOVLB  0
0F670:  BTFSS  FA6.6
0F672:  GOTO   F670
0F676:  MOVLB  E
0F678:  MOVWF  xF9
....................     fprintf(PC, "\tEND\t0x%08LX\r\n", misf_address_end);
0F67A:  MOVLW  78
0F67C:  MOVWF  FF6
0F67E:  MOVLW  09
0F680:  MOVWF  FF7
0F682:  MOVLW  00
0F684:  MOVWF  FF8
0F686:  MOVLW  07
0F688:  MOVLB  B
0F68A:  MOVWF  x4A
0F68C:  MOVLB  0
0F68E:  CALL   1F74
0F692:  MOVFF  284,B4B
0F696:  MOVLW  37
0F698:  MOVLB  B
0F69A:  MOVWF  x4C
0F69C:  MOVLB  0
0F69E:  CALL   2188
0F6A2:  MOVFF  283,B4B
0F6A6:  MOVLW  37
0F6A8:  MOVLB  B
0F6AA:  MOVWF  x4C
0F6AC:  MOVLB  0
0F6AE:  CALL   2188
0F6B2:  MOVFF  282,B4B
0F6B6:  MOVLW  37
0F6B8:  MOVLB  B
0F6BA:  MOVWF  x4C
0F6BC:  MOVLB  0
0F6BE:  CALL   2188
0F6C2:  MOVFF  281,B4B
0F6C6:  MOVLW  37
0F6C8:  MOVLB  B
0F6CA:  MOVWF  x4C
0F6CC:  MOVLB  0
0F6CE:  CALL   2188
0F6D2:  MOVLW  0D
0F6D4:  BTFSS  FA6.6
0F6D6:  GOTO   F6D4
0F6DA:  MOVLB  E
0F6DC:  MOVWF  xF9
0F6DE:  MOVLW  0A
0F6E0:  MOVLB  0
0F6E2:  BTFSS  FA6.6
0F6E4:  GOTO   F6E2
0F6E8:  MOVLB  E
0F6EA:  MOVWF  xF9
....................     fprintf(PC, "\tSRC\t0x%08LX\r\n", write_src);
0F6EC:  MOVLW  88
0F6EE:  MOVWF  FF6
0F6F0:  MOVLW  09
0F6F2:  MOVWF  FF7
0F6F4:  MOVLW  00
0F6F6:  MOVWF  FF8
0F6F8:  MOVLW  07
0F6FA:  MOVLB  B
0F6FC:  MOVWF  x4A
0F6FE:  MOVLB  0
0F700:  CALL   1F74
0F704:  MOVFF  270,B4B
0F708:  MOVLW  37
0F70A:  MOVLB  B
0F70C:  MOVWF  x4C
0F70E:  MOVLB  0
0F710:  CALL   2188
0F714:  MOVFF  26F,B4B
0F718:  MOVLW  37
0F71A:  MOVLB  B
0F71C:  MOVWF  x4C
0F71E:  MOVLB  0
0F720:  CALL   2188
0F724:  MOVFF  26E,B4B
0F728:  MOVLW  37
0F72A:  MOVLB  B
0F72C:  MOVWF  x4C
0F72E:  MOVLB  0
0F730:  CALL   2188
0F734:  MOVFF  26D,B4B
0F738:  MOVLW  37
0F73A:  MOVLB  B
0F73C:  MOVWF  x4C
0F73E:  MOVLB  0
0F740:  CALL   2188
0F744:  MOVLW  0D
0F746:  BTFSS  FA6.6
0F748:  GOTO   F746
0F74C:  MOVLB  E
0F74E:  MOVWF  xF9
0F750:  MOVLW  0A
0F752:  MOVLB  0
0F754:  BTFSS  FA6.6
0F756:  GOTO   F754
0F75A:  MOVLB  E
0F75C:  MOVWF  xF9
....................     fprintf(PC, "\tSIZE\t0x%08LX\r\n", write_size);
0F75E:  MOVLW  98
0F760:  MOVWF  FF6
0F762:  MOVLW  09
0F764:  MOVWF  FF7
0F766:  MOVLW  00
0F768:  MOVWF  FF8
0F76A:  MOVLW  08
0F76C:  MOVLB  B
0F76E:  MOVWF  x4A
0F770:  MOVLB  0
0F772:  CALL   1F74
0F776:  MOVFF  274,B4B
0F77A:  MOVLW  37
0F77C:  MOVLB  B
0F77E:  MOVWF  x4C
0F780:  MOVLB  0
0F782:  CALL   2188
0F786:  MOVFF  273,B4B
0F78A:  MOVLW  37
0F78C:  MOVLB  B
0F78E:  MOVWF  x4C
0F790:  MOVLB  0
0F792:  CALL   2188
0F796:  MOVFF  272,B4B
0F79A:  MOVLW  37
0F79C:  MOVLB  B
0F79E:  MOVWF  x4C
0F7A0:  MOVLB  0
0F7A2:  CALL   2188
0F7A6:  MOVFF  271,B4B
0F7AA:  MOVLW  37
0F7AC:  MOVLB  B
0F7AE:  MOVWF  x4C
0F7B0:  MOVLB  0
0F7B2:  CALL   2188
0F7B6:  MOVLW  0D
0F7B8:  BTFSS  FA6.6
0F7BA:  GOTO   F7B8
0F7BE:  MOVLB  E
0F7C0:  MOVWF  xF9
0F7C2:  MOVLW  0A
0F7C4:  MOVLB  0
0F7C6:  BTFSS  FA6.6
0F7C8:  GOTO   F7C6
0F7CC:  MOVLB  E
0F7CE:  MOVWF  xF9
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
0F7D0:  MOVLW  A8
0F7D2:  MOVWF  FF6
0F7D4:  MOVLW  09
0F7D6:  MOVWF  FF7
0F7D8:  MOVLW  00
0F7DA:  MOVWF  FF8
0F7DC:  MOVLB  0
0F7DE:  CALL   1F3E
.................... 
.................... 
....................     unsigned int8 buffer[PACKET_SIZE];
....................     unsigned int32 smf_write_address;
....................     unsigned int32 misf_read_address;
.................... 
....................     while (write_size > 0)
0F7E2:  MOVLB  2
0F7E4:  MOVF   x71,F
0F7E6:  BTFSC  FD8.2
0F7E8:  BRA    F7F0
0F7EA:  MOVLB  0
0F7EC:  GOTO   F822
0F7F0:  MOVLB  0
0F7F2:  MOVLB  2
0F7F4:  MOVF   x72,F
0F7F6:  BTFSC  FD8.2
0F7F8:  BRA    F800
0F7FA:  MOVLB  0
0F7FC:  GOTO   F822
0F800:  MOVLB  0
0F802:  MOVLB  2
0F804:  MOVF   x73,F
0F806:  BTFSC  FD8.2
0F808:  BRA    F810
0F80A:  MOVLB  0
0F80C:  GOTO   F822
0F810:  MOVLB  0
0F812:  MOVLB  2
0F814:  MOVF   x74,F
0F816:  BTFSS  FD8.2
0F818:  BRA    F820
0F81A:  MOVLB  0
0F81C:  GOTO   FAE6
0F820:  MOVLB  0
....................     {
....................         fprintf(PC, "Remaining size to write: %lu bytes\r\n", write_size);
0F822:  MOVLW  D4
0F824:  MOVWF  FF6
0F826:  MOVLW  09
0F828:  MOVWF  FF7
0F82A:  MOVLW  00
0F82C:  MOVWF  FF8
0F82E:  MOVLW  19
0F830:  MOVLB  B
0F832:  MOVWF  x4A
0F834:  MOVLB  0
0F836:  CALL   1F74
0F83A:  MOVLW  41
0F83C:  MOVWF  FE9
0F83E:  MOVFF  274,2DE
0F842:  MOVFF  273,2DD
0F846:  MOVFF  272,2DC
0F84A:  MOVFF  271,2DB
0F84E:  CALL   5F88
0F852:  MOVLW  F0
0F854:  MOVWF  FF6
0F856:  MOVLW  09
0F858:  MOVWF  FF7
0F85A:  MOVLW  00
0F85C:  MOVWF  FF8
0F85E:  MOVLW  08
0F860:  MOVLB  B
0F862:  MOVWF  x4A
0F864:  MOVLB  0
0F866:  CALL   1F74
....................         memset(buffer, 0x11, PACKET_SIZE);
0F86A:  MOVLW  02
0F86C:  MOVWF  FEA
0F86E:  MOVLW  85
0F870:  MOVWF  FE9
0F872:  MOVLW  11
0F874:  MOVWF  00
0F876:  CLRF   02
0F878:  MOVLW  40
0F87A:  MOVWF  01
0F87C:  CALL   2B68
....................         smf_write_address = smf_address_start + smf_data_table.fields.headers[smf_data_ptr->mission_id].used_size;
0F880:  MOVLB  2
0F882:  MOVF   x2B,W
0F884:  MOVWF  FE9
0F886:  MOVF   x2C,W
0F888:  MOVWF  FEA
0F88A:  MOVF   FEF,W
0F88C:  MULLW  08
0F88E:  MOVF   FF3,W
0F890:  CLRF   xD2
0F892:  MOVWF  xD1
0F894:  MOVLW  2D
0F896:  ADDWF  xD1,W
0F898:  MOVWF  FE9
0F89A:  MOVLW  02
0F89C:  ADDWFC xD2,W
0F89E:  MOVWF  FEA
0F8A0:  MOVFF  FEF,00
0F8A4:  MOVFF  FEC,01
0F8A8:  MOVFF  FEC,02
0F8AC:  MOVFF  FEC,03
0F8B0:  MOVF   FED,F
0F8B2:  MOVF   FED,F
0F8B4:  MOVF   FED,F
0F8B6:  MOVF   00,W
0F8B8:  ADDWF  x75,W
0F8BA:  MOVWF  xC5
0F8BC:  MOVF   01,W
0F8BE:  ADDWFC x76,W
0F8C0:  MOVWF  xC6
0F8C2:  MOVF   02,W
0F8C4:  ADDWFC x77,W
0F8C6:  MOVWF  xC7
0F8C8:  MOVF   03,W
0F8CA:  ADDWFC x78,W
0F8CC:  MOVWF  xC8
....................         misf_read_address = write_src;
0F8CE:  MOVFF  270,2CC
0F8D2:  MOVFF  26F,2CB
0F8D6:  MOVFF  26E,2CA
0F8DA:  MOVFF  26D,2C9
.................... 
....................         read_data_bytes(mis_fm, misf_read_address, buffer, PACKET_SIZE);
0F8DE:  MOVFF  115,B4D
0F8E2:  MOVFF  114,B4C
0F8E6:  MOVFF  113,B4B
0F8EA:  MOVFF  112,B4A
0F8EE:  MOVFF  2CC,B51
0F8F2:  MOVFF  2CB,B50
0F8F6:  MOVFF  2CA,B4F
0F8FA:  MOVFF  2C9,B4E
0F8FE:  MOVLW  02
0F900:  MOVLB  B
0F902:  MOVWF  x53
0F904:  MOVLW  85
0F906:  MOVWF  x52
0F908:  CLRF   x57
0F90A:  CLRF   x56
0F90C:  CLRF   x55
0F90E:  MOVLW  40
0F910:  MOVWF  x54
0F912:  MOVLB  0
0F914:  CALL   2B8C
....................         fprintf(PC, "MISF DATA\r\n");
0F918:  MOVLW  FA
0F91A:  MOVWF  FF6
0F91C:  MOVLW  09
0F91E:  MOVWF  FF7
0F920:  MOVLW  00
0F922:  MOVWF  FF8
0F924:  CALL   1F3E
....................         for (unsigned int32 j = 0; j < PACKET_SIZE; j++) {
0F928:  MOVLB  2
0F92A:  CLRF   xD0
0F92C:  CLRF   xCF
0F92E:  CLRF   xCE
0F930:  CLRF   xCD
0F932:  MOVLB  0
0F934:  MOVLB  2
0F936:  MOVF   xD0,F
0F938:  BTFSC  FD8.2
0F93A:  BRA    F942
0F93C:  MOVLB  0
0F93E:  GOTO   F9BE
0F942:  MOVLB  0
0F944:  MOVLB  2
0F946:  MOVF   xCF,F
0F948:  BTFSC  FD8.2
0F94A:  BRA    F952
0F94C:  MOVLB  0
0F94E:  GOTO   F9BE
0F952:  MOVLB  0
0F954:  MOVLB  2
0F956:  MOVF   xCE,F
0F958:  BTFSC  FD8.2
0F95A:  BRA    F962
0F95C:  MOVLB  0
0F95E:  GOTO   F9BE
0F962:  MOVLB  0
0F964:  MOVLB  2
0F966:  MOVF   xCD,W
0F968:  SUBLW  3F
0F96A:  BTFSC  FD8.0
0F96C:  BRA    F974
0F96E:  MOVLB  0
0F970:  GOTO   F9BE
0F974:  MOVLB  0
....................             fprintf(PC, "%02X ", buffer[j]);
0F976:  MOVLW  85
0F978:  MOVLB  2
0F97A:  ADDWF  xCD,W
0F97C:  MOVWF  FE9
0F97E:  MOVLW  02
0F980:  ADDWFC xCE,W
0F982:  MOVWF  FEA
0F984:  MOVFF  FEF,2D1
0F988:  MOVFF  2D1,B4B
0F98C:  MOVLW  37
0F98E:  MOVLB  B
0F990:  MOVWF  x4C
0F992:  MOVLB  0
0F994:  CALL   2188
0F998:  MOVLW  20
0F99A:  BTFSS  FA6.6
0F99C:  GOTO   F99A
0F9A0:  MOVLB  E
0F9A2:  MOVWF  xF9
0F9A4:  MOVLB  0
0F9A6:  MOVLW  01
0F9A8:  MOVLB  2
0F9AA:  ADDWF  xCD,F
0F9AC:  BTFSC  FD8.0
0F9AE:  INCF   xCE,F
0F9B0:  BTFSC  FD8.2
0F9B2:  INCF   xCF,F
0F9B4:  BTFSC  FD8.2
0F9B6:  INCF   xD0,F
0F9B8:  MOVLB  0
0F9BA:  GOTO   F934
....................         }
....................         fprintf(PC, "\r\n");
0F9BE:  MOVLW  0D
0F9C0:  BTFSS  FA6.6
0F9C2:  GOTO   F9C0
0F9C6:  MOVLB  E
0F9C8:  MOVWF  xF9
0F9CA:  MOVLW  0A
0F9CC:  MOVLB  0
0F9CE:  BTFSS  FA6.6
0F9D0:  GOTO   F9CE
0F9D4:  MOVLB  E
0F9D6:  MOVWF  xF9
.................... 
....................         write_data_bytes(smf, smf_write_address, buffer, PACKET_SIZE);
0F9D8:  MOVFF  119,B91
0F9DC:  MOVFF  118,B90
0F9E0:  MOVFF  117,B8F
0F9E4:  MOVFF  116,B8E
0F9E8:  MOVFF  2C8,B95
0F9EC:  MOVFF  2C7,B94
0F9F0:  MOVFF  2C6,B93
0F9F4:  MOVFF  2C5,B92
0F9F8:  MOVLW  02
0F9FA:  MOVLB  B
0F9FC:  MOVWF  x97
0F9FE:  MOVLW  85
0FA00:  MOVWF  x96
0FA02:  CLRF   x99
0FA04:  MOVLW  40
0FA06:  MOVWF  x98
0FA08:  MOVLB  0
0FA0A:  CALL   3B7C
....................         smf_data_table.fields.headers[smf_data_ptr->mission_id].used_size += PACKET_SIZE;
0FA0E:  MOVLB  2
0FA10:  MOVF   x2B,W
0FA12:  MOVWF  FE9
0FA14:  MOVF   x2C,W
0FA16:  MOVWF  FEA
0FA18:  MOVF   FEF,W
0FA1A:  MULLW  08
0FA1C:  MOVF   FF3,W
0FA1E:  CLRF   xD2
0FA20:  MOVWF  xD1
0FA22:  MOVLW  2D
0FA24:  ADDWF  xD1,W
0FA26:  MOVWF  FE9
0FA28:  MOVLW  02
0FA2A:  ADDWFC xD2,W
0FA2C:  MOVWF  FEA
0FA2E:  MOVLW  40
0FA30:  ADDWF  FEF,W
0FA32:  MOVWF  00
0FA34:  MOVLW  00
0FA36:  ADDWFC FEC,W
0FA38:  MOVWF  01
0FA3A:  MOVLW  00
0FA3C:  ADDWFC FEC,W
0FA3E:  MOVWF  02
0FA40:  MOVLW  00
0FA42:  ADDWFC FEC,W
0FA44:  MOVWF  03
0FA46:  MOVF   FED,F
0FA48:  MOVF   FED,F
0FA4A:  MOVF   FED,F
0FA4C:  MOVFF  00,FEF
0FA50:  MOVFF  01,FEC
0FA54:  MOVFF  02,FEC
0FA58:  MOVFF  03,FEC
0FA5C:  MOVF   FED,F
0FA5E:  MOVF   FED,F
0FA60:  MOVF   FED,F
....................         flash_counter_table[smf_data_ptr->mission_id].uncopied_counter -= PACKET_SIZE;
0FA62:  MOVF   x2B,W
0FA64:  MOVWF  FE9
0FA66:  MOVF   x2C,W
0FA68:  MOVWF  FEA
0FA6A:  MOVF   FEF,W
0FA6C:  MULLW  0A
0FA6E:  MOVF   FF3,W
0FA70:  CLRF   xD2
0FA72:  MOVWF  xD1
0FA74:  MOVLW  04
0FA76:  ADDWF  xD1,W
0FA78:  MOVWF  01
0FA7A:  MOVLW  00
0FA7C:  ADDWFC xD2,W
0FA7E:  MOVWF  03
0FA80:  MOVF   01,W
0FA82:  ADDLW  2E
0FA84:  MOVWF  FE9
0FA86:  MOVLW  01
0FA88:  ADDWFC 03,W
0FA8A:  MOVWF  FEA
0FA8C:  MOVLW  40
0FA8E:  SUBWF  FEF,W
0FA90:  MOVWF  00
0FA92:  MOVLW  00
0FA94:  SUBWFB FEC,W
0FA96:  MOVWF  01
0FA98:  MOVLW  00
0FA9A:  SUBWFB FEC,W
0FA9C:  MOVWF  02
0FA9E:  MOVLW  00
0FAA0:  SUBWFB FEC,W
0FAA2:  MOVWF  03
0FAA4:  MOVF   FED,F
0FAA6:  MOVF   FED,F
0FAA8:  MOVF   FED,F
0FAAA:  MOVFF  00,FEF
0FAAE:  MOVFF  01,FEC
0FAB2:  MOVFF  02,FEC
0FAB6:  MOVFF  03,FEC
0FABA:  MOVF   FED,F
0FABC:  MOVF   FED,F
0FABE:  MOVF   FED,F
....................         
....................         write_src += PACKET_SIZE;
0FAC0:  MOVLW  40
0FAC2:  ADDWF  x6D,F
0FAC4:  MOVLW  00
0FAC6:  ADDWFC x6E,F
0FAC8:  MOVLW  00
0FACA:  ADDWFC x6F,F
0FACC:  MOVLW  00
0FACE:  ADDWFC x70,F
....................         write_size -= PACKET_SIZE;
0FAD0:  MOVLW  40
0FAD2:  SUBWF  x71,F
0FAD4:  MOVLW  00
0FAD6:  SUBWFB x72,F
0FAD8:  MOVLW  00
0FADA:  SUBWFB x73,F
0FADC:  MOVLW  00
0FADE:  SUBWFB x74,F
0FAE0:  MOVLB  0
0FAE2:  GOTO   F7E2
....................     }
.................... 
.................... 
....................     // write size area
....................     smf_write_header(&smf_data_table);
0FAE6:  MOVLW  02
0FAE8:  MOVLB  2
0FAEA:  MOVWF  xD2
0FAEC:  MOVLW  2D
0FAEE:  MOVWF  xD1
0FAF0:  MOVLB  0
0FAF2:  GOTO   EE44
....................     
....................     fprintf(PC, "\r\n_________End copy_data__________\r\n");
0FAF6:  MOVLW  06
0FAF8:  MOVWF  FF6
0FAFA:  MOVLW  0A
0FAFC:  MOVWF  FF7
0FAFE:  MOVLW  00
0FB00:  MOVWF  FF8
0FB02:  CALL   1F3E
....................     fprintf(PC, "_______________________________\r\n\r\n");
0FB06:  MOVLW  2C
0FB08:  MOVWF  FF6
0FB0A:  MOVLW  0A
0FB0C:  MOVWF  FF7
0FB0E:  MOVLW  00
0FB10:  MOVWF  FF8
0FB12:  CALL   1F3E
0FB16:  GOTO   FE98 (RETURN)
.................... }
.................... 
.................... void smf_read(FlashOperationStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
10000:  MOVLW  50
10002:  MOVWF  FF6
10004:  MOVLW  0A
10006:  MOVWF  FF7
10008:  MOVLW  00
1000A:  MOVWF  FF8
1000C:  CALL   1F3E
....................     fprintf(PC, "___Start SMF Read____\r\n");
10010:  MOVLW  6A
10012:  MOVWF  FF6
10014:  MOVLW  0A
10016:  MOVWF  FF7
10018:  MOVLW  00
1001A:  MOVWF  FF8
1001C:  CALL   1F3E
.................... 
....................     int8 buffer[PACKET_SIZE];
.................... 
....................     SmfAddressStruct smf_address = get_smf_address_struct(smf_data->mission_id);
....................     unsigned int32 read_address = smf_data->misf_start_addr; // 呼び出し側でSMF内アドレスを設定する前提
....................     unsigned int32 read_size = smf_data->misf_size;
10020:  MOVLB  2
10022:  MOVF   x2B,W
10024:  MOVWF  FE9
10026:  MOVF   x2C,W
10028:  MOVWF  FEA
1002A:  MOVFF  FEF,28D
1002E:  MOVFF  28D,294
10032:  MOVLB  0
10034:  CALL   FB1A
10038:  MOVFF  02,03
1003C:  MOVF   01,W
1003E:  MOVWF  FE1
10040:  MOVFF  03,FE2
10044:  MOVLW  02
10046:  MOVWF  FEA
10048:  MOVLW  6D
1004A:  MOVWF  FE9
1004C:  MOVLW  08
1004E:  MOVWF  01
10050:  MOVFF  FE6,FEE
10054:  DECFSZ 01,F
10056:  GOTO   10050
1005A:  MOVLW  04
1005C:  MOVLB  2
1005E:  ADDWF  x2B,W
10060:  MOVWF  FE9
10062:  MOVLW  00
10064:  ADDWFC x2C,W
10066:  MOVWF  FEA
10068:  MOVFF  FEF,275
1006C:  MOVFF  FEC,276
10070:  MOVFF  FEC,277
10074:  MOVFF  FEC,278
10078:  MOVF   FED,F
1007A:  MOVF   FED,F
1007C:  MOVF   FED,F
1007E:  MOVLW  08
10080:  ADDWF  x2B,W
10082:  MOVWF  FE9
10084:  MOVLW  00
10086:  ADDWFC x2C,W
10088:  MOVWF  FEA
1008A:  MOVFF  FEF,279
1008E:  MOVFF  FEC,27A
10092:  MOVFF  FEC,27B
10096:  MOVFF  FEC,27C
1009A:  MOVF   FED,F
1009C:  MOVF   FED,F
1009E:  MOVF   FED,F
.................... 
....................     // 境界チェック (start/end は [start_address, end_address) の半開区間想定)
....................     if (read_address < (unsigned int32)smf_address.start_address || read_address >= (unsigned int32)smf_address.end_address) {
100A0:  MOVF   x78,W
100A2:  SUBWF  x70,W
100A4:  BTFSC  FD8.0
100A6:  BRA    100AE
100A8:  MOVLB  0
100AA:  GOTO   100F8
100AE:  MOVLB  0
100B0:  BTFSS  FD8.2
100B2:  GOTO   10152
100B6:  MOVLB  2
100B8:  MOVF   x77,W
100BA:  SUBWF  x6F,W
100BC:  BTFSC  FD8.0
100BE:  BRA    100C6
100C0:  MOVLB  0
100C2:  GOTO   100F8
100C6:  MOVLB  0
100C8:  BTFSS  FD8.2
100CA:  GOTO   10152
100CE:  MOVLB  2
100D0:  MOVF   x76,W
100D2:  SUBWF  x6E,W
100D4:  BTFSC  FD8.0
100D6:  BRA    100DE
100D8:  MOVLB  0
100DA:  GOTO   100F8
100DE:  MOVLB  0
100E0:  BTFSS  FD8.2
100E2:  GOTO   10152
100E6:  MOVLB  2
100E8:  MOVF   x6D,W
100EA:  SUBWF  x75,W
100EC:  BTFSC  FD8.0
100EE:  BRA    100F6
100F0:  MOVLB  0
100F2:  GOTO   10152
100F6:  MOVLB  0
100F8:  MOVLB  2
100FA:  MOVF   x74,W
100FC:  SUBWF  x78,W
100FE:  BTFSC  FD8.0
10100:  BRA    10108
10102:  MOVLB  0
10104:  GOTO   10276
10108:  MOVLB  0
1010A:  BTFSS  FD8.2
1010C:  GOTO   10152
10110:  MOVLB  2
10112:  MOVF   x73,W
10114:  SUBWF  x77,W
10116:  BTFSC  FD8.0
10118:  BRA    10120
1011A:  MOVLB  0
1011C:  GOTO   10276
10120:  MOVLB  0
10122:  BTFSS  FD8.2
10124:  GOTO   10152
10128:  MOVLB  2
1012A:  MOVF   x72,W
1012C:  SUBWF  x76,W
1012E:  BTFSC  FD8.0
10130:  BRA    10138
10132:  MOVLB  0
10134:  GOTO   10276
10138:  MOVLB  0
1013A:  BTFSS  FD8.2
1013C:  GOTO   10152
10140:  MOVLB  2
10142:  MOVF   x71,W
10144:  SUBWF  x75,W
10146:  BTFSC  FD8.0
10148:  BRA    10150
1014A:  MOVLB  0
1014C:  GOTO   10276
10150:  MOVLB  0
....................         fprintf(PC, "Error: Read address 0x%08LX out of SMF mission range [0x%08LX - 0x%08LX)\r\n",
....................                 read_address, (unsigned int32)smf_address.start_address, (unsigned int32)smf_address.end_address);
10152:  MOVLW  82
10154:  MOVWF  FF6
10156:  MOVLW  0A
10158:  MOVWF  FF7
1015A:  MOVLW  00
1015C:  MOVWF  FF8
1015E:  MOVLW  16
10160:  MOVLB  B
10162:  MOVWF  x4A
10164:  MOVLB  0
10166:  CALL   1F74
1016A:  MOVFF  278,B4B
1016E:  MOVLW  37
10170:  MOVLB  B
10172:  MOVWF  x4C
10174:  MOVLB  0
10176:  CALL   2188
1017A:  MOVFF  277,B4B
1017E:  MOVLW  37
10180:  MOVLB  B
10182:  MOVWF  x4C
10184:  MOVLB  0
10186:  CALL   2188
1018A:  MOVFF  276,B4B
1018E:  MOVLW  37
10190:  MOVLB  B
10192:  MOVWF  x4C
10194:  MOVLB  0
10196:  CALL   2188
1019A:  MOVFF  275,B4B
1019E:  MOVLW  37
101A0:  MOVLB  B
101A2:  MOVWF  x4C
101A4:  MOVLB  0
101A6:  CALL   2188
101AA:  MOVLW  9D
101AC:  MOVWF  FF6
101AE:  MOVLW  0A
101B0:  MOVWF  FF7
101B2:  MOVLW  00
101B4:  MOVWF  FF8
101B6:  MOVLW  1D
101B8:  MOVLB  B
101BA:  MOVWF  x4A
101BC:  MOVLB  0
101BE:  CALL   1F74
101C2:  MOVFF  270,B4B
101C6:  MOVLW  37
101C8:  MOVLB  B
101CA:  MOVWF  x4C
101CC:  MOVLB  0
101CE:  CALL   2188
101D2:  MOVFF  26F,B4B
101D6:  MOVLW  37
101D8:  MOVLB  B
101DA:  MOVWF  x4C
101DC:  MOVLB  0
101DE:  CALL   2188
101E2:  MOVFF  26E,B4B
101E6:  MOVLW  37
101E8:  MOVLB  B
101EA:  MOVWF  x4C
101EC:  MOVLB  0
101EE:  CALL   2188
101F2:  MOVFF  26D,B4B
101F6:  MOVLW  37
101F8:  MOVLB  B
101FA:  MOVWF  x4C
101FC:  MOVLB  0
101FE:  CALL   2188
10202:  MOVLW  BF
10204:  MOVWF  FF6
10206:  MOVLW  0A
10208:  MOVWF  FF7
1020A:  MOVLW  00
1020C:  MOVWF  FF8
1020E:  MOVLW  05
10210:  MOVLB  B
10212:  MOVWF  x4A
10214:  MOVLB  0
10216:  CALL   1F74
1021A:  MOVFF  274,B4B
1021E:  MOVLW  37
10220:  MOVLB  B
10222:  MOVWF  x4C
10224:  MOVLB  0
10226:  CALL   2188
1022A:  MOVFF  273,B4B
1022E:  MOVLW  37
10230:  MOVLB  B
10232:  MOVWF  x4C
10234:  MOVLB  0
10236:  CALL   2188
1023A:  MOVFF  272,B4B
1023E:  MOVLW  37
10240:  MOVLB  B
10242:  MOVWF  x4C
10244:  MOVLB  0
10246:  CALL   2188
1024A:  MOVFF  271,B4B
1024E:  MOVLW  37
10250:  MOVLB  B
10252:  MOVWF  x4C
10254:  MOVLB  0
10256:  CALL   2188
1025A:  MOVLW  C9
1025C:  MOVWF  FF6
1025E:  MOVLW  0A
10260:  MOVWF  FF7
10262:  MOVLW  00
10264:  MOVWF  FF8
10266:  MOVLW  03
10268:  MOVLB  B
1026A:  MOVWF  x4A
1026C:  MOVLB  0
1026E:  CALL   1F74
....................         return;
10272:  GOTO   10726
....................     }
....................     unsigned int32 mission_remaining = (unsigned int32)smf_address.end_address - read_address; // 読める残り
10276:  MOVLB  2
10278:  MOVF   x75,W
1027A:  SUBWF  x71,W
1027C:  MOVWF  x7D
1027E:  MOVF   x76,W
10280:  SUBWFB x72,W
10282:  MOVWF  x7E
10284:  MOVF   x77,W
10286:  SUBWFB x73,W
10288:  MOVWF  x7F
1028A:  MOVF   x78,W
1028C:  SUBWFB x74,W
1028E:  MOVWF  x80
....................     if (read_size > mission_remaining) {
10290:  MOVF   x80,W
10292:  SUBWF  x7C,W
10294:  BTFSC  FD8.0
10296:  BRA    1029E
10298:  MOVLB  0
1029A:  GOTO   10370
1029E:  MOVLB  0
102A0:  BTFSS  FD8.2
102A2:  GOTO   102E8
102A6:  MOVLB  2
102A8:  MOVF   x7F,W
102AA:  SUBWF  x7B,W
102AC:  BTFSC  FD8.0
102AE:  BRA    102B6
102B0:  MOVLB  0
102B2:  GOTO   10370
102B6:  MOVLB  0
102B8:  BTFSS  FD8.2
102BA:  GOTO   102E8
102BE:  MOVLB  2
102C0:  MOVF   x7E,W
102C2:  SUBWF  x7A,W
102C4:  BTFSC  FD8.0
102C6:  BRA    102CE
102C8:  MOVLB  0
102CA:  GOTO   10370
102CE:  MOVLB  0
102D0:  BTFSS  FD8.2
102D2:  GOTO   102E8
102D6:  MOVLB  2
102D8:  MOVF   x79,W
102DA:  SUBWF  x7D,W
102DC:  BTFSS  FD8.0
102DE:  BRA    102E6
102E0:  MOVLB  0
102E2:  GOTO   10370
102E6:  MOVLB  0
....................         fprintf(PC, "Warn: Adjust read size from %lu to %lu (mission end)\r\n", read_size, mission_remaining);
102E8:  MOVLW  CE
102EA:  MOVWF  FF6
102EC:  MOVLW  0A
102EE:  MOVWF  FF7
102F0:  MOVLW  00
102F2:  MOVWF  FF8
102F4:  MOVLW  1C
102F6:  MOVLB  B
102F8:  MOVWF  x4A
102FA:  MOVLB  0
102FC:  CALL   1F74
10300:  MOVLW  41
10302:  MOVWF  FE9
10304:  MOVFF  27C,2DE
10308:  MOVFF  27B,2DD
1030C:  MOVFF  27A,2DC
10310:  MOVFF  279,2DB
10314:  CALL   5F88
10318:  MOVLW  ED
1031A:  MOVWF  FF6
1031C:  MOVLW  0A
1031E:  MOVWF  FF7
10320:  MOVLW  00
10322:  MOVWF  FF8
10324:  MOVLW  04
10326:  MOVLB  B
10328:  MOVWF  x4A
1032A:  MOVLB  0
1032C:  CALL   1F74
10330:  MOVLW  41
10332:  MOVWF  FE9
10334:  MOVFF  280,2DE
10338:  MOVFF  27F,2DD
1033C:  MOVFF  27E,2DC
10340:  MOVFF  27D,2DB
10344:  CALL   5F88
10348:  MOVLW  F4
1034A:  MOVWF  FF6
1034C:  MOVLW  0A
1034E:  MOVWF  FF7
10350:  MOVLW  00
10352:  MOVWF  FF8
10354:  MOVLW  10
10356:  MOVLB  B
10358:  MOVWF  x4A
1035A:  MOVLB  0
1035C:  CALL   1F74
....................         read_size = mission_remaining;
10360:  MOVFF  280,27C
10364:  MOVFF  27F,27B
10368:  MOVFF  27E,27A
1036C:  MOVFF  27D,279
....................     }
....................     if (read_size == 0) {
10370:  MOVLB  2
10372:  MOVF   x79,F
10374:  BTFSC  FD8.2
10376:  BRA    1037E
10378:  MOVLB  0
1037A:  GOTO   103C4
1037E:  MOVLB  0
10380:  MOVLB  2
10382:  MOVF   x7A,F
10384:  BTFSC  FD8.2
10386:  BRA    1038E
10388:  MOVLB  0
1038A:  GOTO   103C4
1038E:  MOVLB  0
10390:  MOVLB  2
10392:  MOVF   x7B,F
10394:  BTFSC  FD8.2
10396:  BRA    1039E
10398:  MOVLB  0
1039A:  GOTO   103C4
1039E:  MOVLB  0
103A0:  MOVLB  2
103A2:  MOVF   x7C,F
103A4:  BTFSC  FD8.2
103A6:  BRA    103AE
103A8:  MOVLB  0
103AA:  GOTO   103C4
103AE:  MOVLB  0
....................         fprintf(PC, "Info: Nothing to read (size=0)\r\n");
103B0:  MOVLW  06
103B2:  MOVWF  FF6
103B4:  MOVLW  0B
103B6:  MOVWF  FF7
103B8:  MOVLW  00
103BA:  MOVWF  FF8
103BC:  CALL   1F3E
....................         return;
103C0:  GOTO   10726
....................     }
.................... 
....................     fprintf(PC, "In SMF Read source data address: %LX\r\n", read_address);
103C4:  MOVLW  28
103C6:  MOVWF  FF6
103C8:  MOVLW  0B
103CA:  MOVWF  FF7
103CC:  MOVLW  00
103CE:  MOVWF  FF8
103D0:  MOVLW  21
103D2:  MOVLB  B
103D4:  MOVWF  x4A
103D6:  MOVLB  0
103D8:  CALL   1F74
103DC:  MOVFF  278,B4B
103E0:  MOVLW  37
103E2:  MOVLB  B
103E4:  MOVWF  x4C
103E6:  MOVLB  0
103E8:  CALL   2188
103EC:  MOVFF  277,B4B
103F0:  MOVLW  37
103F2:  MOVLB  B
103F4:  MOVWF  x4C
103F6:  MOVLB  0
103F8:  CALL   2188
103FC:  MOVFF  276,B4B
10400:  MOVLW  37
10402:  MOVLB  B
10404:  MOVWF  x4C
10406:  MOVLB  0
10408:  CALL   2188
1040C:  MOVFF  275,B4B
10410:  MOVLW  37
10412:  MOVLB  B
10414:  MOVWF  x4C
10416:  MOVLB  0
10418:  CALL   2188
1041C:  MOVLW  0D
1041E:  BTFSS  FA6.6
10420:  GOTO   1041E
10424:  MOVLB  E
10426:  MOVWF  xF9
10428:  MOVLW  0A
1042A:  MOVLB  0
1042C:  BTFSS  FA6.6
1042E:  GOTO   1042C
10432:  MOVLB  E
10434:  MOVWF  xF9
....................     fprintf(PC, "In SMF Read data size          : %lu (0x%lx)\r\n\r\n", read_size, read_size);
10436:  MOVLW  50
10438:  MOVWF  FF6
1043A:  MOVLW  0B
1043C:  MOVWF  FF7
1043E:  MOVLW  00
10440:  MOVWF  FF8
10442:  MOVLW  21
10444:  MOVLB  B
10446:  MOVWF  x4A
10448:  MOVLB  0
1044A:  CALL   1F74
1044E:  MOVLW  41
10450:  MOVWF  FE9
10452:  MOVFF  27C,2DE
10456:  MOVFF  27B,2DD
1045A:  MOVFF  27A,2DC
1045E:  MOVFF  279,2DB
10462:  CALL   5F88
10466:  MOVLW  74
10468:  MOVWF  FF6
1046A:  MOVLW  0B
1046C:  MOVWF  FF7
1046E:  MOVLW  00
10470:  MOVWF  FF8
10472:  MOVLW  04
10474:  MOVLB  B
10476:  MOVWF  x4A
10478:  MOVLB  0
1047A:  CALL   1F74
1047E:  MOVFF  27C,B4B
10482:  MOVLW  57
10484:  MOVLB  B
10486:  MOVWF  x4C
10488:  MOVLB  0
1048A:  CALL   2188
1048E:  MOVFF  27B,B4B
10492:  MOVLW  57
10494:  MOVLB  B
10496:  MOVWF  x4C
10498:  MOVLB  0
1049A:  CALL   2188
1049E:  MOVFF  27A,B4B
104A2:  MOVLW  57
104A4:  MOVLB  B
104A6:  MOVWF  x4C
104A8:  MOVLB  0
104AA:  CALL   2188
104AE:  MOVFF  279,B4B
104B2:  MOVLW  57
104B4:  MOVLB  B
104B6:  MOVWF  x4C
104B8:  MOVLB  0
104BA:  CALL   2188
104BE:  MOVLW  7B
104C0:  MOVWF  FF6
104C2:  MOVLW  0B
104C4:  MOVWF  FF7
104C6:  MOVLW  00
104C8:  MOVWF  FF8
104CA:  MOVLW  05
104CC:  MOVLB  B
104CE:  MOVWF  x4A
104D0:  MOVLB  0
104D2:  CALL   1F74
.................... 
....................     if (!is_connect(smf)){
104D6:  MOVFF  119,2D4
104DA:  MOVFF  118,2D3
104DE:  MOVFF  117,2D2
104E2:  MOVFF  116,2D1
104E6:  CALL   2AA0
104EA:  MOVF   01,F
104EC:  BTFSS  FD8.2
104EE:  GOTO   10502
....................         fprintf(PC, "Error: SMF is not connected\r\n");
104F2:  MOVLW  82
104F4:  MOVWF  FF6
104F6:  MOVLW  0B
104F8:  MOVWF  FF7
104FA:  MOVLW  00
104FC:  MOVWF  FF8
104FE:  CALL   1F3E
....................     }
....................     fprintf(PC, "READ DATA FROM SMF...\r\n");
10502:  MOVLW  A0
10504:  MOVWF  FF6
10506:  MOVLW  0B
10508:  MOVWF  FF7
1050A:  MOVLW  00
1050C:  MOVWF  FF8
1050E:  CALL   1F3E
....................     unsigned int32 end_address = read_address + read_size;
10512:  MOVLB  2
10514:  MOVF   x79,W
10516:  ADDWF  x75,W
10518:  MOVWF  x81
1051A:  MOVF   x7A,W
1051C:  ADDWFC x76,W
1051E:  MOVWF  x82
10520:  MOVF   x7B,W
10522:  ADDWFC x77,W
10524:  MOVWF  x83
10526:  MOVF   x7C,W
10528:  ADDWFC x78,W
1052A:  MOVWF  x84
....................     for (unsigned int32 addr = read_address; addr < end_address; addr += PACKET_SIZE) {
1052C:  MOVFF  278,288
10530:  MOVFF  277,287
10534:  MOVFF  276,286
10538:  MOVFF  275,285
1053C:  MOVLB  0
1053E:  MOVLB  2
10540:  MOVF   x88,W
10542:  SUBWF  x84,W
10544:  BTFSC  FD8.0
10546:  BRA    1054E
10548:  MOVLB  0
1054A:  GOTO   10706
1054E:  MOVLB  0
10550:  BTFSS  FD8.2
10552:  GOTO   10598
10556:  MOVLB  2
10558:  MOVF   x87,W
1055A:  SUBWF  x83,W
1055C:  BTFSC  FD8.0
1055E:  BRA    10566
10560:  MOVLB  0
10562:  GOTO   10706
10566:  MOVLB  0
10568:  BTFSS  FD8.2
1056A:  GOTO   10598
1056E:  MOVLB  2
10570:  MOVF   x86,W
10572:  SUBWF  x82,W
10574:  BTFSC  FD8.0
10576:  BRA    1057E
10578:  MOVLB  0
1057A:  GOTO   10706
1057E:  MOVLB  0
10580:  BTFSS  FD8.2
10582:  GOTO   10598
10586:  MOVLB  2
10588:  MOVF   x81,W
1058A:  SUBWF  x85,W
1058C:  BTFSS  FD8.0
1058E:  BRA    10596
10590:  MOVLB  0
10592:  GOTO   10706
10596:  MOVLB  0
....................         unsigned int16 chunk = (end_address - addr) >= PACKET_SIZE ? PACKET_SIZE : (unsigned int16)(end_address - addr);
10598:  MOVLB  2
1059A:  MOVF   x85,W
1059C:  SUBWF  x81,W
1059E:  MOVWF  x8D
105A0:  MOVF   x86,W
105A2:  SUBWFB x82,W
105A4:  MOVWF  x8E
105A6:  MOVF   x87,W
105A8:  SUBWFB x83,W
105AA:  MOVWF  x8F
105AC:  MOVF   x88,W
105AE:  SUBWFB x84,W
105B0:  MOVWF  x90
105B2:  MOVF   x90,F
105B4:  BTFSC  FD8.2
105B6:  BRA    105BE
105B8:  MOVLB  0
105BA:  GOTO   105F2
105BE:  MOVLB  0
105C0:  MOVLB  2
105C2:  MOVF   x8F,F
105C4:  BTFSC  FD8.2
105C6:  BRA    105CE
105C8:  MOVLB  0
105CA:  GOTO   105F2
105CE:  MOVLB  0
105D0:  MOVLB  2
105D2:  MOVF   x8E,F
105D4:  BTFSC  FD8.2
105D6:  BRA    105DE
105D8:  MOVLB  0
105DA:  GOTO   105F2
105DE:  MOVLB  0
105E0:  MOVLB  2
105E2:  MOVF   x8D,W
105E4:  SUBLW  3F
105E6:  BTFSS  FD8.0
105E8:  BRA    105F0
105EA:  MOVLB  0
105EC:  GOTO   105FA
105F0:  MOVLB  0
105F2:  CLRF   03
105F4:  MOVLW  40
105F6:  GOTO   1061C
105FA:  MOVLB  2
105FC:  MOVF   x85,W
105FE:  SUBWF  x81,W
10600:  MOVWF  00
10602:  MOVF   x86,W
10604:  SUBWFB x82,W
10606:  MOVWF  01
10608:  MOVF   x87,W
1060A:  SUBWFB x83,W
1060C:  MOVWF  02
1060E:  MOVF   x88,W
10610:  SUBWFB x84,W
10612:  MOVWF  03
10614:  MOVFF  01,03
10618:  MOVF   00,W
1061A:  MOVLB  0
1061C:  MOVLB  2
1061E:  MOVWF  x89
10620:  MOVFF  03,28A
10624:  MOVLB  0
....................         read_data_bytes(smf, addr, buffer, chunk);
10626:  MOVFF  119,B4D
1062A:  MOVFF  118,B4C
1062E:  MOVFF  117,B4B
10632:  MOVFF  116,B4A
10636:  MOVFF  288,B51
1063A:  MOVFF  287,B50
1063E:  MOVFF  286,B4F
10642:  MOVFF  285,B4E
10646:  MOVLW  02
10648:  MOVLB  B
1064A:  MOVWF  x53
1064C:  MOVLW  2D
1064E:  MOVWF  x52
10650:  CLRF   x57
10652:  CLRF   x56
10654:  MOVFF  28A,B55
10658:  MOVFF  289,B54
1065C:  MOVLB  0
1065E:  CALL   2B8C
....................         for (unsigned int16 i = 0; i < chunk; i++) fprintf(PC, "%02X ", buffer[i]);
10662:  MOVLB  2
10664:  CLRF   x8C
10666:  CLRF   x8B
10668:  MOVLB  0
1066A:  MOVLB  2
1066C:  MOVF   x8C,W
1066E:  SUBWF  x8A,W
10670:  BTFSC  FD8.0
10672:  BRA    1067A
10674:  MOVLB  0
10676:  GOTO   106D2
1067A:  MOVLB  0
1067C:  BTFSS  FD8.2
1067E:  GOTO   10694
10682:  MOVLB  2
10684:  MOVF   x89,W
10686:  SUBWF  x8B,W
10688:  BTFSS  FD8.0
1068A:  BRA    10692
1068C:  MOVLB  0
1068E:  GOTO   106D2
10692:  MOVLB  0
10694:  MOVLW  2D
10696:  MOVLB  2
10698:  ADDWF  x8B,W
1069A:  MOVWF  FE9
1069C:  MOVLW  02
1069E:  ADDWFC x8C,W
106A0:  MOVWF  FEA
106A2:  MOVFF  FEF,28D
106A6:  MOVFF  28D,B4B
106AA:  MOVLW  37
106AC:  MOVLB  B
106AE:  MOVWF  x4C
106B0:  MOVLB  0
106B2:  CALL   2188
106B6:  MOVLW  20
106B8:  BTFSS  FA6.6
106BA:  GOTO   106B8
106BE:  MOVLB  E
106C0:  MOVWF  xF9
106C2:  MOVLB  0
106C4:  MOVLB  2
106C6:  INCF   x8B,F
106C8:  BTFSC  FD8.2
106CA:  INCF   x8C,F
106CC:  MOVLB  0
106CE:  GOTO   1066A
....................         fprintf(PC, "\r\n");
106D2:  MOVLW  0D
106D4:  BTFSS  FA6.6
106D6:  GOTO   106D4
106DA:  MOVLB  E
106DC:  MOVWF  xF9
106DE:  MOVLW  0A
106E0:  MOVLB  0
106E2:  BTFSS  FA6.6
106E4:  GOTO   106E2
106E8:  MOVLB  E
106EA:  MOVWF  xF9
106EC:  MOVLB  0
106EE:  MOVLW  40
106F0:  MOVLB  2
106F2:  ADDWF  x85,F
106F4:  MOVLW  00
106F6:  ADDWFC x86,F
106F8:  MOVLW  00
106FA:  ADDWFC x87,F
106FC:  MOVLW  00
106FE:  ADDWFC x88,F
10700:  MOVLB  0
10702:  GOTO   1053E
....................     }
....................     fprintf(PC, "\r\n___End SMF Read____\r\n");
10706:  MOVLW  B8
10708:  MOVWF  FF6
1070A:  MOVLW  0B
1070C:  MOVWF  FF7
1070E:  MOVLW  00
10710:  MOVWF  FF8
10712:  CALL   1F3E
....................     fprintf(PC, "____________________\r\n\r\n");
10716:  MOVLW  D0
10718:  MOVWF  FF6
1071A:  MOVLW  0B
1071C:  MOVWF  FF7
1071E:  MOVLW  00
10720:  MOVWF  FF8
10722:  CALL   1F3E
10726:  GOTO   FEA8 (RETURN)
.................... }
.................... 
.................... void smf_erase(FlashOperationStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
1072A:  MOVLW  EA
1072C:  MOVWF  FF6
1072E:  MOVLW  0B
10730:  MOVWF  FF7
10732:  MOVLW  00
10734:  MOVWF  FF8
10736:  CALL   1F3E
....................     fprintf(PC, "___Start smf_erase____\r\n");
1073A:  MOVLW  04
1073C:  MOVWF  FF6
1073E:  MOVLW  0C
10740:  MOVWF  FF7
10742:  MOVLW  00
10744:  MOVWF  FF8
10746:  CALL   1F3E
.................... 
....................     SmfAddressStruct mission_type = get_smf_address_struct(smf_data->mission_id);
....................     unsigned int32 erase_address = smf_data->misf_start_addr;
....................     unsigned int32 erase_size = smf_data->misf_size;
1074A:  MOVLB  2
1074C:  MOVF   x2B,W
1074E:  MOVWF  FE9
10750:  MOVF   x2C,W
10752:  MOVWF  FEA
10754:  MOVFF  FEF,245
10758:  MOVFF  245,294
1075C:  MOVLB  0
1075E:  CALL   FB1A
10762:  MOVFF  02,03
10766:  MOVF   01,W
10768:  MOVWF  FE1
1076A:  MOVFF  03,FE2
1076E:  MOVLW  02
10770:  MOVWF  FEA
10772:  MOVLW  2D
10774:  MOVWF  FE9
10776:  MOVLW  08
10778:  MOVWF  01
1077A:  MOVFF  FE6,FEE
1077E:  DECFSZ 01,F
10780:  GOTO   1077A
10784:  MOVLW  04
10786:  MOVLB  2
10788:  ADDWF  x2B,W
1078A:  MOVWF  FE9
1078C:  MOVLW  00
1078E:  ADDWFC x2C,W
10790:  MOVWF  FEA
10792:  MOVFF  FEF,235
10796:  MOVFF  FEC,236
1079A:  MOVFF  FEC,237
1079E:  MOVFF  FEC,238
107A2:  MOVF   FED,F
107A4:  MOVF   FED,F
107A6:  MOVF   FED,F
107A8:  MOVLW  08
107AA:  ADDWF  x2B,W
107AC:  MOVWF  FE9
107AE:  MOVLW  00
107B0:  ADDWFC x2C,W
107B2:  MOVWF  FEA
107B4:  MOVFF  FEF,239
107B8:  MOVFF  FEC,23A
107BC:  MOVFF  FEC,23B
107C0:  MOVFF  FEC,23C
107C4:  MOVF   FED,F
107C6:  MOVF   FED,F
107C8:  MOVF   FED,F
....................     fprintf(PC, "[SMF] Erase address   : %LX\r\n", erase_address);
107CA:  MOVLW  1E
107CC:  MOVWF  FF6
107CE:  MOVLW  0C
107D0:  MOVWF  FF7
107D2:  MOVLW  00
107D4:  MOVWF  FF8
107D6:  MOVLW  18
107D8:  MOVLB  B
107DA:  MOVWF  x4A
107DC:  MOVLB  0
107DE:  CALL   1F74
107E2:  MOVFF  238,B4B
107E6:  MOVLW  37
107E8:  MOVLB  B
107EA:  MOVWF  x4C
107EC:  MOVLB  0
107EE:  CALL   2188
107F2:  MOVFF  237,B4B
107F6:  MOVLW  37
107F8:  MOVLB  B
107FA:  MOVWF  x4C
107FC:  MOVLB  0
107FE:  CALL   2188
10802:  MOVFF  236,B4B
10806:  MOVLW  37
10808:  MOVLB  B
1080A:  MOVWF  x4C
1080C:  MOVLB  0
1080E:  CALL   2188
10812:  MOVFF  235,B4B
10816:  MOVLW  37
10818:  MOVLB  B
1081A:  MOVWF  x4C
1081C:  MOVLB  0
1081E:  CALL   2188
10822:  MOVLW  0D
10824:  BTFSS  FA6.6
10826:  GOTO   10824
1082A:  MOVLB  E
1082C:  MOVWF  xF9
1082E:  MOVLW  0A
10830:  MOVLB  0
10832:  BTFSS  FA6.6
10834:  GOTO   10832
10838:  MOVLB  E
1083A:  MOVWF  xF9
....................     fprintf(PC, "[SMF] Erase data size : %lu (0x%lx)\r\n\r\n", erase_size, erase_size);
1083C:  MOVLW  3C
1083E:  MOVWF  FF6
10840:  MOVLW  0C
10842:  MOVWF  FF7
10844:  MOVLW  00
10846:  MOVWF  FF8
10848:  MOVLW  18
1084A:  MOVLB  B
1084C:  MOVWF  x4A
1084E:  MOVLB  0
10850:  CALL   1F74
10854:  MOVLW  41
10856:  MOVWF  FE9
10858:  MOVFF  23C,2DE
1085C:  MOVFF  23B,2DD
10860:  MOVFF  23A,2DC
10864:  MOVFF  239,2DB
10868:  CALL   5F88
1086C:  MOVLW  57
1086E:  MOVWF  FF6
10870:  MOVLW  0C
10872:  MOVWF  FF7
10874:  MOVLW  00
10876:  MOVWF  FF8
10878:  MOVLW  04
1087A:  MOVLB  B
1087C:  MOVWF  x4A
1087E:  MOVLB  0
10880:  CALL   1F74
10884:  MOVFF  23C,B4B
10888:  MOVLW  57
1088A:  MOVLB  B
1088C:  MOVWF  x4C
1088E:  MOVLB  0
10890:  CALL   2188
10894:  MOVFF  23B,B4B
10898:  MOVLW  57
1089A:  MOVLB  B
1089C:  MOVWF  x4C
1089E:  MOVLB  0
108A0:  CALL   2188
108A4:  MOVFF  23A,B4B
108A8:  MOVLW  57
108AA:  MOVLB  B
108AC:  MOVWF  x4C
108AE:  MOVLB  0
108B0:  CALL   2188
108B4:  MOVFF  239,B4B
108B8:  MOVLW  57
108BA:  MOVLB  B
108BC:  MOVWF  x4C
108BE:  MOVLB  0
108C0:  CALL   2188
108C4:  MOVLW  5E
108C6:  MOVWF  FF6
108C8:  MOVLW  0C
108CA:  MOVWF  FF7
108CC:  MOVLW  00
108CE:  MOVWF  FF8
108D0:  MOVLW  05
108D2:  MOVLB  B
108D4:  MOVWF  x4A
108D6:  MOVLB  0
108D8:  CALL   1F74
.................... 
....................     if (!is_connect(smf)){
108DC:  MOVFF  119,2D4
108E0:  MOVFF  118,2D3
108E4:  MOVFF  117,2D2
108E8:  MOVFF  116,2D1
108EC:  CALL   2AA0
108F0:  MOVF   01,F
108F2:  BTFSS  FD8.2
108F4:  GOTO   1090C
....................         fprintf(PC, "Error: SMF is not connected\r\n");
108F8:  MOVLW  64
108FA:  MOVWF  FF6
108FC:  MOVLW  0C
108FE:  MOVWF  FF7
10900:  MOVLW  00
10902:  MOVWF  FF8
10904:  CALL   1F3E
....................         return;
10908:  GOTO   10DA8
....................     }
.................... 
....................     // Check if erase operation is within mission_type range
....................     if (erase_address < mission_type.start_address || erase_address >= mission_type.end_address) {
1090C:  MOVLB  2
1090E:  MOVF   x38,W
10910:  SUBWF  x30,W
10912:  BTFSC  FD8.0
10914:  BRA    1091C
10916:  MOVLB  0
10918:  GOTO   10966
1091C:  MOVLB  0
1091E:  BTFSS  FD8.2
10920:  GOTO   109C0
10924:  MOVLB  2
10926:  MOVF   x37,W
10928:  SUBWF  x2F,W
1092A:  BTFSC  FD8.0
1092C:  BRA    10934
1092E:  MOVLB  0
10930:  GOTO   10966
10934:  MOVLB  0
10936:  BTFSS  FD8.2
10938:  GOTO   109C0
1093C:  MOVLB  2
1093E:  MOVF   x36,W
10940:  SUBWF  x2E,W
10942:  BTFSC  FD8.0
10944:  BRA    1094C
10946:  MOVLB  0
10948:  GOTO   10966
1094C:  MOVLB  0
1094E:  BTFSS  FD8.2
10950:  GOTO   109C0
10954:  MOVLB  2
10956:  MOVF   x2D,W
10958:  SUBWF  x35,W
1095A:  BTFSC  FD8.0
1095C:  BRA    10964
1095E:  MOVLB  0
10960:  GOTO   109C0
10964:  MOVLB  0
10966:  MOVLB  2
10968:  MOVF   x34,W
1096A:  SUBWF  x38,W
1096C:  BTFSC  FD8.0
1096E:  BRA    10976
10970:  MOVLB  0
10972:  GOTO   10AE4
10976:  MOVLB  0
10978:  BTFSS  FD8.2
1097A:  GOTO   109C0
1097E:  MOVLB  2
10980:  MOVF   x33,W
10982:  SUBWF  x37,W
10984:  BTFSC  FD8.0
10986:  BRA    1098E
10988:  MOVLB  0
1098A:  GOTO   10AE4
1098E:  MOVLB  0
10990:  BTFSS  FD8.2
10992:  GOTO   109C0
10996:  MOVLB  2
10998:  MOVF   x32,W
1099A:  SUBWF  x36,W
1099C:  BTFSC  FD8.0
1099E:  BRA    109A6
109A0:  MOVLB  0
109A2:  GOTO   10AE4
109A6:  MOVLB  0
109A8:  BTFSS  FD8.2
109AA:  GOTO   109C0
109AE:  MOVLB  2
109B0:  MOVF   x31,W
109B2:  SUBWF  x35,W
109B4:  BTFSC  FD8.0
109B6:  BRA    109BE
109B8:  MOVLB  0
109BA:  GOTO   10AE4
109BE:  MOVLB  0
....................         fprintf(PC, "Error: Erase source address 0x%LX is outside mission range [0x%LX - 0x%LX]\r\n", 
....................                 erase_address, mission_type.start_address, mission_type.end_address);
109C0:  MOVLW  82
109C2:  MOVWF  FF6
109C4:  MOVLW  0C
109C6:  MOVWF  FF7
109C8:  MOVLW  00
109CA:  MOVWF  FF8
109CC:  MOVLW  1E
109CE:  MOVLB  B
109D0:  MOVWF  x4A
109D2:  MOVLB  0
109D4:  CALL   1F74
109D8:  MOVFF  238,B4B
109DC:  MOVLW  37
109DE:  MOVLB  B
109E0:  MOVWF  x4C
109E2:  MOVLB  0
109E4:  CALL   2188
109E8:  MOVFF  237,B4B
109EC:  MOVLW  37
109EE:  MOVLB  B
109F0:  MOVWF  x4C
109F2:  MOVLB  0
109F4:  CALL   2188
109F8:  MOVFF  236,B4B
109FC:  MOVLW  37
109FE:  MOVLB  B
10A00:  MOVWF  x4C
10A02:  MOVLB  0
10A04:  CALL   2188
10A08:  MOVFF  235,B4B
10A0C:  MOVLW  37
10A0E:  MOVLB  B
10A10:  MOVWF  x4C
10A12:  MOVLB  0
10A14:  CALL   2188
10A18:  MOVLW  A3
10A1A:  MOVWF  FF6
10A1C:  MOVLW  0C
10A1E:  MOVWF  FF7
10A20:  MOVLW  00
10A22:  MOVWF  FF8
10A24:  MOVLW  1D
10A26:  MOVLB  B
10A28:  MOVWF  x4A
10A2A:  MOVLB  0
10A2C:  CALL   1F74
10A30:  MOVFF  230,B4B
10A34:  MOVLW  37
10A36:  MOVLB  B
10A38:  MOVWF  x4C
10A3A:  MOVLB  0
10A3C:  CALL   2188
10A40:  MOVFF  22F,B4B
10A44:  MOVLW  37
10A46:  MOVLB  B
10A48:  MOVWF  x4C
10A4A:  MOVLB  0
10A4C:  CALL   2188
10A50:  MOVFF  22E,B4B
10A54:  MOVLW  37
10A56:  MOVLB  B
10A58:  MOVWF  x4C
10A5A:  MOVLB  0
10A5C:  CALL   2188
10A60:  MOVFF  22D,B4B
10A64:  MOVLW  37
10A66:  MOVLB  B
10A68:  MOVWF  x4C
10A6A:  MOVLB  0
10A6C:  CALL   2188
10A70:  MOVLW  C3
10A72:  MOVWF  FF6
10A74:  MOVLW  0C
10A76:  MOVWF  FF7
10A78:  MOVLW  00
10A7A:  MOVWF  FF8
10A7C:  MOVLW  05
10A7E:  MOVLB  B
10A80:  MOVWF  x4A
10A82:  MOVLB  0
10A84:  CALL   1F74
10A88:  MOVFF  234,B4B
10A8C:  MOVLW  37
10A8E:  MOVLB  B
10A90:  MOVWF  x4C
10A92:  MOVLB  0
10A94:  CALL   2188
10A98:  MOVFF  233,B4B
10A9C:  MOVLW  37
10A9E:  MOVLB  B
10AA0:  MOVWF  x4C
10AA2:  MOVLB  0
10AA4:  CALL   2188
10AA8:  MOVFF  232,B4B
10AAC:  MOVLW  37
10AAE:  MOVLB  B
10AB0:  MOVWF  x4C
10AB2:  MOVLB  0
10AB4:  CALL   2188
10AB8:  MOVFF  231,B4B
10ABC:  MOVLW  37
10ABE:  MOVLB  B
10AC0:  MOVWF  x4C
10AC2:  MOVLB  0
10AC4:  CALL   2188
10AC8:  MOVLW  CB
10ACA:  MOVWF  FF6
10ACC:  MOVLW  0C
10ACE:  MOVWF  FF7
10AD0:  MOVLW  00
10AD2:  MOVWF  FF8
10AD4:  MOVLW  03
10AD6:  MOVLB  B
10AD8:  MOVWF  x4A
10ADA:  MOVLB  0
10ADC:  CALL   1F74
....................         return;
10AE0:  GOTO   10DA8
....................     }
.................... 
....................     if ((erase_address + erase_size) > mission_type.end_address) {
10AE4:  MOVLB  2
10AE6:  MOVF   x39,W
10AE8:  ADDWF  x35,W
10AEA:  MOVWF  x45
10AEC:  MOVF   x3A,W
10AEE:  ADDWFC x36,W
10AF0:  MOVWF  x46
10AF2:  MOVF   x3B,W
10AF4:  ADDWFC x37,W
10AF6:  MOVWF  x47
10AF8:  MOVF   x3C,W
10AFA:  ADDWFC x38,W
10AFC:  MOVWF  x48
10AFE:  MOVF   x34,W
10B00:  SUBWF  x48,W
10B02:  BTFSC  FD8.0
10B04:  BRA    10B0C
10B06:  MOVLB  0
10B08:  GOTO   10BF6
10B0C:  MOVLB  0
10B0E:  BTFSS  FD8.2
10B10:  GOTO   10B56
10B14:  MOVLB  2
10B16:  MOVF   x33,W
10B18:  SUBWF  x47,W
10B1A:  BTFSC  FD8.0
10B1C:  BRA    10B24
10B1E:  MOVLB  0
10B20:  GOTO   10BF6
10B24:  MOVLB  0
10B26:  BTFSS  FD8.2
10B28:  GOTO   10B56
10B2C:  MOVLB  2
10B2E:  MOVF   x32,W
10B30:  SUBWF  x46,W
10B32:  BTFSC  FD8.0
10B34:  BRA    10B3C
10B36:  MOVLB  0
10B38:  GOTO   10BF6
10B3C:  MOVLB  0
10B3E:  BTFSS  FD8.2
10B40:  GOTO   10B56
10B44:  MOVLB  2
10B46:  MOVF   x45,W
10B48:  SUBWF  x31,W
10B4A:  BTFSS  FD8.0
10B4C:  BRA    10B54
10B4E:  MOVLB  0
10B50:  GOTO   10BF6
10B54:  MOVLB  0
....................         fprintf(PC, "Error: Erase operation would exceed mission end address 0x%LX\r\n", mission_type.end_address);
10B56:  MOVLW  D0
10B58:  MOVWF  FF6
10B5A:  MOVLW  0C
10B5C:  MOVWF  FF7
10B5E:  MOVLW  00
10B60:  MOVWF  FF8
10B62:  MOVLW  3A
10B64:  MOVLB  B
10B66:  MOVWF  x4A
10B68:  MOVLB  0
10B6A:  CALL   1F74
10B6E:  MOVFF  234,B4B
10B72:  MOVLW  37
10B74:  MOVLB  B
10B76:  MOVWF  x4C
10B78:  MOVLB  0
10B7A:  CALL   2188
10B7E:  MOVFF  233,B4B
10B82:  MOVLW  37
10B84:  MOVLB  B
10B86:  MOVWF  x4C
10B88:  MOVLB  0
10B8A:  CALL   2188
10B8E:  MOVFF  232,B4B
10B92:  MOVLW  37
10B94:  MOVLB  B
10B96:  MOVWF  x4C
10B98:  MOVLB  0
10B9A:  CALL   2188
10B9E:  MOVFF  231,B4B
10BA2:  MOVLW  37
10BA4:  MOVLB  B
10BA6:  MOVWF  x4C
10BA8:  MOVLB  0
10BAA:  CALL   2188
10BAE:  MOVLW  0D
10BB0:  BTFSS  FA6.6
10BB2:  GOTO   10BB0
10BB6:  MOVLB  E
10BB8:  MOVWF  xF9
10BBA:  MOVLW  0A
10BBC:  MOVLB  0
10BBE:  BTFSS  FA6.6
10BC0:  GOTO   10BBE
10BC4:  MOVLB  E
10BC6:  MOVWF  xF9
....................         fprintf(PC, "Limiting erase size to stay within mission bounds\r\n");
10BC8:  MOVLW  10
10BCA:  MOVWF  FF6
10BCC:  MOVLW  0D
10BCE:  MOVWF  FF7
10BD0:  MOVLW  00
10BD2:  MOVWF  FF8
10BD4:  MOVLB  0
10BD6:  CALL   1F3E
....................         erase_size = mission_type.end_address - erase_address;
10BDA:  MOVLB  2
10BDC:  MOVF   x35,W
10BDE:  SUBWF  x31,W
10BE0:  MOVWF  x39
10BE2:  MOVF   x36,W
10BE4:  SUBWFB x32,W
10BE6:  MOVWF  x3A
10BE8:  MOVF   x37,W
10BEA:  SUBWFB x33,W
10BEC:  MOVWF  x3B
10BEE:  MOVF   x38,W
10BF0:  SUBWFB x34,W
10BF2:  MOVWF  x3C
10BF4:  MOVLB  0
....................     }
.................... 
....................     fprintf(PC, "Erase operation validated within mission range\r\n");
10BF6:  MOVLW  44
10BF8:  MOVWF  FF6
10BFA:  MOVLW  0D
10BFC:  MOVWF  FF7
10BFE:  MOVLW  00
10C00:  MOVWF  FF8
10C02:  CALL   1F3E
....................     unsigned int32 erase_end = erase_address + erase_size;
....................     // 4KB境界開始へアライン
....................     unsigned int32 current = erase_address & ~0xFFF;
10C06:  MOVLB  2
10C08:  MOVF   x39,W
10C0A:  ADDWF  x35,W
10C0C:  MOVWF  x3D
10C0E:  MOVF   x3A,W
10C10:  ADDWFC x36,W
10C12:  MOVWF  x3E
10C14:  MOVF   x3B,W
10C16:  ADDWFC x37,W
10C18:  MOVWF  x3F
10C1A:  MOVF   x3C,W
10C1C:  ADDWFC x38,W
10C1E:  MOVWF  x40
10C20:  CLRF   x41
10C22:  MOVF   x36,W
10C24:  ANDLW  F0
10C26:  MOVWF  x42
10C28:  CLRF   x43
10C2A:  CLRF   x44
10C2C:  MOVLB  0
....................     while (current < erase_end && current < (unsigned int32)mission_type.end_address) {
10C2E:  MOVLB  2
10C30:  MOVF   x44,W
10C32:  SUBWF  x40,W
10C34:  BTFSC  FD8.0
10C36:  BRA    10C3E
10C38:  MOVLB  0
10C3A:  GOTO   10D1A
10C3E:  MOVLB  0
10C40:  BTFSS  FD8.2
10C42:  GOTO   10C88
10C46:  MOVLB  2
10C48:  MOVF   x43,W
10C4A:  SUBWF  x3F,W
10C4C:  BTFSC  FD8.0
10C4E:  BRA    10C56
10C50:  MOVLB  0
10C52:  GOTO   10D1A
10C56:  MOVLB  0
10C58:  BTFSS  FD8.2
10C5A:  GOTO   10C88
10C5E:  MOVLB  2
10C60:  MOVF   x42,W
10C62:  SUBWF  x3E,W
10C64:  BTFSC  FD8.0
10C66:  BRA    10C6E
10C68:  MOVLB  0
10C6A:  GOTO   10D1A
10C6E:  MOVLB  0
10C70:  BTFSS  FD8.2
10C72:  GOTO   10C88
10C76:  MOVLB  2
10C78:  MOVF   x3D,W
10C7A:  SUBWF  x41,W
10C7C:  BTFSS  FD8.0
10C7E:  BRA    10C86
10C80:  MOVLB  0
10C82:  GOTO   10D1A
10C86:  MOVLB  0
10C88:  MOVLB  2
10C8A:  MOVF   x44,W
10C8C:  SUBWF  x34,W
10C8E:  BTFSC  FD8.0
10C90:  BRA    10C98
10C92:  MOVLB  0
10C94:  GOTO   10D1A
10C98:  MOVLB  0
10C9A:  BTFSS  FD8.2
10C9C:  GOTO   10CE2
10CA0:  MOVLB  2
10CA2:  MOVF   x43,W
10CA4:  SUBWF  x33,W
10CA6:  BTFSC  FD8.0
10CA8:  BRA    10CB0
10CAA:  MOVLB  0
10CAC:  GOTO   10D1A
10CB0:  MOVLB  0
10CB2:  BTFSS  FD8.2
10CB4:  GOTO   10CE2
10CB8:  MOVLB  2
10CBA:  MOVF   x42,W
10CBC:  SUBWF  x32,W
10CBE:  BTFSC  FD8.0
10CC0:  BRA    10CC8
10CC2:  MOVLB  0
10CC4:  GOTO   10D1A
10CC8:  MOVLB  0
10CCA:  BTFSS  FD8.2
10CCC:  GOTO   10CE2
10CD0:  MOVLB  2
10CD2:  MOVF   x31,W
10CD4:  SUBWF  x41,W
10CD6:  BTFSS  FD8.0
10CD8:  BRA    10CE0
10CDA:  MOVLB  0
10CDC:  GOTO   10D1A
10CE0:  MOVLB  0
....................         subsector_4kByte_erase(smf, current);
10CE2:  MOVFF  119,318
10CE6:  MOVFF  118,317
10CEA:  MOVFF  117,316
10CEE:  MOVFF  116,315
10CF2:  MOVFF  244,31C
10CF6:  MOVFF  243,31B
10CFA:  MOVFF  242,31A
10CFE:  MOVFF  241,319
10D02:  CALL   5846
....................         current += SUBSECTOR_SIZE;
10D06:  MOVLW  10
10D08:  MOVLB  2
10D0A:  ADDWF  x42,F
10D0C:  MOVLW  00
10D0E:  ADDWFC x43,F
10D10:  MOVLW  00
10D12:  ADDWFC x44,F
10D14:  MOVLB  0
10D16:  GOTO   10C2E
....................     }
....................     fprintf(PC, "Erased %lu bytes (aligned)\r\n", (current - (erase_address & ~0xFFF)));
10D1A:  CLRF   00
10D1C:  MOVLB  2
10D1E:  MOVF   x36,W
10D20:  ANDLW  F0
10D22:  MOVWF  01
10D24:  CLRF   02
10D26:  CLRF   03
10D28:  MOVF   00,W
10D2A:  SUBWF  x41,W
10D2C:  MOVWF  x45
10D2E:  MOVF   01,W
10D30:  SUBWFB x42,W
10D32:  MOVWF  x46
10D34:  MOVF   02,W
10D36:  SUBWFB x43,W
10D38:  MOVWF  x47
10D3A:  MOVF   03,W
10D3C:  SUBWFB x44,W
10D3E:  MOVWF  x48
10D40:  MOVLW  76
10D42:  MOVWF  FF6
10D44:  MOVLW  0D
10D46:  MOVWF  FF7
10D48:  MOVLW  00
10D4A:  MOVWF  FF8
10D4C:  MOVLW  07
10D4E:  MOVLB  B
10D50:  MOVWF  x4A
10D52:  MOVLB  0
10D54:  CALL   1F74
10D58:  MOVLW  41
10D5A:  MOVWF  FE9
10D5C:  MOVFF  248,2DE
10D60:  MOVFF  247,2DD
10D64:  MOVFF  246,2DC
10D68:  MOVFF  245,2DB
10D6C:  CALL   5F88
10D70:  MOVLW  80
10D72:  MOVWF  FF6
10D74:  MOVLW  0D
10D76:  MOVWF  FF7
10D78:  MOVLW  00
10D7A:  MOVWF  FF8
10D7C:  MOVLW  12
10D7E:  MOVLB  B
10D80:  MOVWF  x4A
10D82:  MOVLB  0
10D84:  CALL   1F74
.................... 
....................     fprintf(PC, "\r\n___End smf_erase____\r\n");
10D88:  MOVLW  94
10D8A:  MOVWF  FF6
10D8C:  MOVLW  0D
10D8E:  MOVWF  FF7
10D90:  MOVLW  00
10D92:  MOVWF  FF8
10D94:  CALL   1F3E
....................     fprintf(PC, "____________________\r\n\r\n");
10D98:  MOVLW  AE
10D9A:  MOVWF  FF6
10D9C:  MOVLW  0D
10D9E:  MOVWF  FF7
10DA0:  MOVLW  00
10DA2:  MOVWF  FF8
10DA4:  CALL   1F3E
10DA8:  GOTO   FEB8 (RETURN)
.................... }
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id)
.................... {
....................     switch(mission_id)
....................     {
....................         case 0x01:  // CIGS_MEASURE_DATA
....................             return &param.iv1_data;
....................         case 0x02:  // CIGS_PICLOG
....................             return &param.piclog;
....................         default:
....................             fprintf(PC, "Error: Unknown mission_id: %02X\r\n", mission_id);
....................             return 0x00;  // NULL pointer
....................     }
.................... }
.................... 
.................... // mission_idに対応するパーティション情報を更新する関数
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter)
.................... {
....................     SMF_PARTITION* partition = get_smf_partition_by_mission_id(mission_id);
....................     if (partition != 0x00)
....................     {
....................         partition->used_size = used_size;
....................         partition->loop_counter = loop_counter;
....................         fprintf(PC, "Updated partition for mission_id %02X: used_size=%ld, loop_counter=%ld\r\n", 
....................                 mission_id, used_size, loop_counter);
....................     }
.................... }
.................... 
.................... // カウンター更新関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size)
.................... {
....................     // MISF 側 uncopied_counter を転送サイズ分減少 (下限0)
....................     Flash_t *target = 0x00;
....................     switch(mission_id){
....................         case CIGS_PICLOG_DATA: target = piclog_data_ptr; break;
....................         case CIGS_ENVIRO_DATA: target = environment_data_ptr; break;
....................         case CIGS_IV1_HEADER:  target = iv1_header_ptr; break;
....................         case CIGS_IV1_DATA:    target = iv1_data_ptr; break;
....................         case CIGS_IV2_HEADER:  target = iv2_header_ptr; break;
....................         case CIGS_IV2_DATA:    target = iv2_data_ptr; break;
....................         default: break; // DATA_TABLE などは対象外
....................     }
....................     if(target){
....................         unsigned int32 before = target->uncopied_counter;
....................         if(transfer_size >= before) target->uncopied_counter = 0; else target->uncopied_counter -= transfer_size;
....................         fprintf(PC, "[MISF] mission %u uncopied_counter %08LX -> %08LX (-%lu)\r\n", mission_id, before, target->uncopied_counter, transfer_size);
....................         misf_update_address_area();
....................     } else {
....................         fprintf(PC, "[MISF] update_misf_counters: mission %u not handled\r\n", mission_id);
....................     }
.................... }
.................... 
.................... // カウンター初期化関数
.................... void reset_misf_counters(int8 mission_id)
.................... {
....................     Flash_t *target = 0x00;
....................     switch(mission_id){
....................         case CIGS_PICLOG_DATA: target = piclog_data_ptr; break;
....................         case CIGS_ENVIRO_DATA: target = environment_data_ptr; break;
....................         case CIGS_IV1_HEADER:  target = iv1_header_ptr; break;
....................         case CIGS_IV1_DATA:    target = iv1_data_ptr; break;
....................         case CIGS_IV2_HEADER:  target = iv2_header_ptr; break;
....................         case CIGS_IV2_DATA:    target = iv2_data_ptr; break;
....................         default: break;
....................     }
....................     if(target){
....................         target->uncopied_counter = 0;
....................         misf_update_address_area();
....................         fprintf(PC, "[MISF] mission %u uncopied_counter reset\r\n", mission_id);
....................     }
.................... }
.................... 
.................... // カウンター状態表示関数
.................... void print_misf_counter_status(int8 mission_id)
.................... {
....................     Flash_t *target = 0x00;
....................     switch(mission_id){
....................         case CIGS_PICLOG_DATA: target = piclog_data_ptr; break;
....................         case CIGS_ENVIRO_DATA: target = environment_data_ptr; break;
....................         case CIGS_IV1_HEADER:  target = iv1_header_ptr; break;
....................         case CIGS_IV1_DATA:    target = iv1_data_ptr; break;
....................         case CIGS_IV2_HEADER:  target = iv2_header_ptr; break;
....................         case CIGS_IV2_DATA:    target = iv2_data_ptr; break;
....................         default: break;
....................     }
....................     if(target){
....................         fprintf(PC, "[MISF] mission %u status: used=0x%08LX uncopied=0x%08LX r1=0x%02X r2=0x%02X\r\n",
....................                 mission_id, target->used_counter, target->uncopied_counter,
....................                 target->reserve_counter1, target->reserve_counter2);
....................     } else {
....................         fprintf(PC, "[MISF] print status: mission %u not handled\r\n", mission_id);
....................     }
.................... }
.................... // End of file
.................... 
.................... #include "domain/mmj_cigs_flash.c"
.................... #include "mmj_cigs_flash.h"                           
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t flash_counter_table[];
.................... extern FlashCounter_t *flash_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/mmj_cigs_config.h"             
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mt25q.h"                
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/tool/calc_tools.h"             
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/smf_queue.h"              
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... 
.................... // 実体宣言
.................... Flash_t data_table = {FLASH_ID_DATA_TABLE, 0, 0, 0};
.................... Flash_t piclog_data = {FLASH_ID_PICLOG, 0, 0, 0};
.................... Flash_t environment_data = {FLASH_ID_ENVIRONMENT, 0, 0, 0};
.................... Flash_t iv1_header = {FLASH_ID_IV1_HEADER, 0, 0, 0};
.................... Flash_t iv1_data = {FLASH_ID_IV1_DATA, 0, 0, 0};
.................... Flash_t iv2_header = {FLASH_ID_IV2_HEADER, 0, 0, 0};
.................... Flash_t iv2_data = {FLASH_ID_IV2_DATA, 0, 0, 0};
.................... 
.................... // ポインタ設定
.................... Flash_t *data_table_ptr = &data_table;
.................... Flash_t *piclog_data_ptr = &piclog_data;
.................... Flash_t *environment_data_ptr = &environment_data;
.................... Flash_t *iv1_header_ptr = &iv1_header;
.................... Flash_t *iv1_data_ptr = &iv1_data;
.................... Flash_t *iv2_header_ptr = &iv2_header;
.................... Flash_t *iv2_data_ptr = &iv2_data;
.................... 
.................... const ADDRESS_AREA_T MISF_ADDRESS_TABLE[FLASH_ID_COUNT] = {
....................     { MISF_CIGS_DATA_TABLE_START,   MISF_CIGS_DATA_TABLE_END,   MISF_CIGS_DATA_TABLE_SIZE },
....................     { MISF_CIGS_PICLOG_START,       MISF_CIGS_PICLOG_END,       MISF_CIGS_PICLOG_SIZE },
....................     { MISF_CIGS_ENVIRO_START,       MISF_CIGS_ENVIRO_END,       MISF_CIGS_ENVIRO_SIZE },
....................     { MISF_CIGS_IV1_HEADER_START,   MISF_CIGS_IV1_HEADER_END,   MISF_CIGS_IV1_HEADER_SIZE },
....................     { MISF_CIGS_IV1_DATA_START,     MISF_CIGS_IV1_DATA_END,     MISF_CIGS_IV1_DATA_SIZE },
....................     { MISF_CIGS_IV2_HEADER_START,   MISF_CIGS_IV2_HEADER_END,   MISF_CIGS_IV2_HEADER_SIZE },
....................     { MISF_CIGS_IV2_DATA_START,     MISF_CIGS_IV2_DATA_END,     MISF_CIGS_IV2_DATA_SIZE }
.................... };
.................... 
.................... FlashCounter_t flash_counter_table[FLASH_ID_COUNT];
.................... FlashCounter_t *flash_counter_table_ptr[FLASH_ID_COUNT] = {&flash_counter_table[0], &flash_counter_table[1], &flash_counter_table[2], &flash_counter_table[3], &flash_counter_table[4], &flash_counter_table[5], &flash_counter_table[6]};
.................... 
.................... 
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
03616:  MOVLW  4E
03618:  MOVWF  FF6
0361A:  MOVLW  0F
0361C:  MOVWF  FF7
0361E:  MOVLW  00
03620:  MOVWF  FF8
03622:  CALL   1F3E
....................     output_high(MIS_FM_CS);
03626:  MOVLW  FE
03628:  MOVWF  F98
0362A:  BSF    F8F.0
....................     output_high(SMF_CS);
0362C:  MOVLW  FB
0362E:  MOVWF  F92
03630:  BSF    F89.2
.................... 
....................     // 接続処理
....................     if (is_connect(mis_fm)) {
03632:  MOVFF  115,2D4
03636:  MOVFF  114,2D3
0363A:  MOVFF  113,2D2
0363E:  MOVFF  112,2D1
03642:  CALL   2AA0
03646:  MOVF   01,F
03648:  BTFSC  FD8.2
0364A:  GOTO   3662
....................         fprintf(PC, "\t[MIS FM] Connected\r\n");
0364E:  MOVLW  6A
03650:  MOVWF  FF6
03652:  MOVLW  0F
03654:  MOVWF  FF7
03656:  MOVLW  00
03658:  MOVWF  FF8
0365A:  CALL   1F3E
....................     } else {
0365E:  GOTO   3672
....................         fprintf(PC, "\t[MIS FM] Not Connected\r\n");
03662:  MOVLW  80
03664:  MOVWF  FF6
03666:  MOVLW  0F
03668:  MOVWF  FF7
0366A:  MOVLW  00
0366C:  MOVWF  FF8
0366E:  CALL   1F3E
....................     }
....................     if (is_connect(smf)) {
03672:  MOVFF  119,2D4
03676:  MOVFF  118,2D3
0367A:  MOVFF  117,2D2
0367E:  MOVFF  116,2D1
03682:  CALL   2AA0
03686:  MOVF   01,F
03688:  BTFSC  FD8.2
0368A:  GOTO   36A2
....................         fprintf(PC, "\t[SMF] Connected\r\n");
0368E:  MOVLW  9A
03690:  MOVWF  FF6
03692:  MOVLW  0F
03694:  MOVWF  FF7
03696:  MOVLW  00
03698:  MOVWF  FF8
0369A:  CALL   1F3E
....................     } else {
0369E:  GOTO   36B2
....................         fprintf(PC, "\t[SMF] Not Connected\r\n");
036A2:  MOVLW  AE
036A4:  MOVWF  FF6
036A6:  MOVLW  0F
036A8:  MOVWF  FF7
036AA:  MOVLW  00
036AC:  MOVWF  FF8
036AE:  CALL   1F3E
....................     }
.................... 
....................     //=== MIS_FM カウンタテーブル読出し ===//
....................     FlashData_t read_header;
....................     FlashData_t *read_header_ptr = &read_header;
036B2:  MOVLW  02
036B4:  MOVLB  2
036B6:  MOVWF  xB4
036B8:  MOVLW  73
036BA:  MOVWF  xB3
....................     memset(read_header_ptr, 0x00, sizeof(FlashData_t));
036BC:  MOVFF  2B4,FEA
036C0:  MOVFF  2B3,FE9
036C4:  CLRF   00
036C6:  CLRF   02
036C8:  MOVLW  40
036CA:  MOVWF  01
036CC:  MOVLB  0
036CE:  CALL   2B68
....................     read_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, read_header_ptr->bytes, PACKET_SIZE);
036D2:  MOVLB  2
036D4:  MOVF   xB3,W
036D6:  MOVWF  01
036D8:  MOVF   xB4,W
036DA:  MOVWF  03
036DC:  MOVF   01,W
036DE:  MOVWF  xB5
036E0:  MOVFF  03,2B6
036E4:  MOVFF  115,B4D
036E8:  MOVFF  114,B4C
036EC:  MOVFF  113,B4B
036F0:  MOVFF  112,B4A
036F4:  MOVLB  B
036F6:  CLRF   x51
036F8:  CLRF   x50
036FA:  CLRF   x4F
036FC:  CLRF   x4E
036FE:  MOVFF  2B6,B53
03702:  MOVFF  2B5,B52
03706:  CLRF   x57
03708:  CLRF   x56
0370A:  CLRF   x55
0370C:  MOVLW  40
0370E:  MOVWF  x54
03710:  MOVLB  0
03712:  CALL   2B8C
.................... 
....................     // CRC 検証
....................     if (read_header_ptr->packet.crc != calc_crc8(read_header_ptr->bytes, PACKET_SIZE - 1)) {
03716:  MOVLW  3F
03718:  MOVLB  2
0371A:  ADDWF  xB3,W
0371C:  MOVWF  FE9
0371E:  MOVLW  00
03720:  ADDWFC xB4,W
03722:  MOVWF  FEA
03724:  MOVFF  FEF,2B5
03728:  MOVF   xB3,W
0372A:  MOVWF  01
0372C:  MOVF   xB4,W
0372E:  MOVWF  03
03730:  MOVF   01,W
03732:  MOVWF  xB6
03734:  MOVFF  03,2B7
03738:  MOVFF  2B7,BD9
0373C:  MOVFF  2B6,BD8
03740:  MOVLW  3F
03742:  MOVLB  B
03744:  MOVWF  xDA
03746:  MOVLB  0
03748:  CALL   2DA0
0374C:  MOVF   01,W
0374E:  MOVLB  2
03750:  SUBWF  xB5,W
03752:  BTFSS  FD8.2
03754:  BRA    375C
03756:  MOVLB  0
03758:  GOTO   376E
0375C:  MOVLB  0
....................         fprintf(PC, "\t[MIS FM] CRC error -> initialize counters\r\n");
0375E:  MOVLW  C6
03760:  MOVWF  FF6
03762:  MOVLW  0F
03764:  MOVWF  FF7
03766:  MOVLW  00
03768:  MOVWF  FF8
0376A:  CALL   1F3E
....................         // デフォルト初期化
....................         /*
....................         piclog_data.id        = FLASH_ID_PICLOG;
....................         environment_data.id   = FLASH_ID_ENVIRONMENT;
....................         iv_header.id          = FLASH_ID_IV_HEADER;
....................         iv_data.id            = FLASH_ID_IV_DATA;
....................         piclog_data.used_counter = 0;
....................         piclog_data.uncopied_counter = 0;
....................         environment_data.used_counter = 0;
....................         environment_data.uncopied_counter = 0;
....................         iv_header.used_counter = 0;
....................         iv_header.uncopied_counter = 0;
....................         iv_data.used_counter = 0;
....................         iv_data.uncopied_counter = 0;
....................         misf_update_address_area();   // 初期テーブル書込み
....................         print_flash_status();
....................         return;
....................         */
....................     }
....................     flash_counter_table[FLASH_ID_PICLOG]       = read_header_ptr->packet.payload.logdata.piclog;
0376E:  MOVLB  2
03770:  MOVF   xB3,W
03772:  MOVWF  FE1
03774:  MOVF   xB4,W
03776:  MOVWF  FE2
03778:  MOVLW  01
0377A:  MOVWF  FEA
0377C:  MOVLW  38
0377E:  MOVWF  FE9
03780:  MOVLW  0A
03782:  MOVWF  01
03784:  MOVLB  0
03786:  MOVFF  FE6,FEE
0378A:  DECFSZ 01,F
0378C:  GOTO   3786
....................     flash_counter_table[FLASH_ID_ENVIRONMENT]  = read_header_ptr->packet.payload.logdata.environment;
03790:  MOVLW  0A
03792:  MOVLB  2
03794:  ADDWF  xB3,W
03796:  MOVWF  FE1
03798:  MOVLW  00
0379A:  ADDWFC xB4,W
0379C:  MOVWF  FE2
0379E:  MOVLW  01
037A0:  MOVWF  FEA
037A2:  MOVLW  42
037A4:  MOVWF  FE9
037A6:  MOVLW  0A
037A8:  MOVWF  01
037AA:  MOVLB  0
037AC:  MOVFF  FE6,FEE
037B0:  DECFSZ 01,F
037B2:  GOTO   37AC
....................     flash_counter_table[FLASH_ID_IV1_HEADER]   = read_header_ptr->packet.payload.logdata.iv1_header;
037B6:  MOVLW  14
037B8:  MOVLB  2
037BA:  ADDWF  xB3,W
037BC:  MOVWF  FE1
037BE:  MOVLW  00
037C0:  ADDWFC xB4,W
037C2:  MOVWF  FE2
037C4:  MOVLW  01
037C6:  MOVWF  FEA
037C8:  MOVLW  4C
037CA:  MOVWF  FE9
037CC:  MOVLW  0A
037CE:  MOVWF  01
037D0:  MOVLB  0
037D2:  MOVFF  FE6,FEE
037D6:  DECFSZ 01,F
037D8:  GOTO   37D2
....................     flash_counter_table[FLASH_ID_IV1_DATA]     = read_header_ptr->packet.payload.logdata.iv1_data;
037DC:  MOVLW  1E
037DE:  MOVLB  2
037E0:  ADDWF  xB3,W
037E2:  MOVWF  FE1
037E4:  MOVLW  00
037E6:  ADDWFC xB4,W
037E8:  MOVWF  FE2
037EA:  MOVLW  01
037EC:  MOVWF  FEA
037EE:  MOVLW  56
037F0:  MOVWF  FE9
037F2:  MOVLW  0A
037F4:  MOVWF  01
037F6:  MOVLB  0
037F8:  MOVFF  FE6,FEE
037FC:  DECFSZ 01,F
037FE:  GOTO   37F8
....................     flash_counter_table[FLASH_ID_IV2_HEADER]   = read_header_ptr->packet.payload.logdata.iv2_header;
03802:  MOVLW  28
03804:  MOVLB  2
03806:  ADDWF  xB3,W
03808:  MOVWF  FE1
0380A:  MOVLW  00
0380C:  ADDWFC xB4,W
0380E:  MOVWF  FE2
03810:  MOVLW  01
03812:  MOVWF  FEA
03814:  MOVLW  60
03816:  MOVWF  FE9
03818:  MOVLW  0A
0381A:  MOVWF  01
0381C:  MOVLB  0
0381E:  MOVFF  FE6,FEE
03822:  DECFSZ 01,F
03824:  GOTO   381E
....................     flash_counter_table[FLASH_ID_IV2_DATA]     = read_header_ptr->packet.payload.logdata.iv2_data;
03828:  MOVLW  32
0382A:  MOVLB  2
0382C:  ADDWF  xB3,W
0382E:  MOVWF  FE1
03830:  MOVLW  00
03832:  ADDWFC xB4,W
03834:  MOVWF  FE2
03836:  MOVLW  01
03838:  MOVWF  FEA
0383A:  MOVLW  6A
0383C:  MOVWF  FE9
0383E:  MOVLW  0A
03840:  MOVWF  01
03842:  MOVLB  0
03844:  MOVFF  FE6,FEE
03848:  DECFSZ 01,F
0384A:  GOTO   3844
.................... 
....................     print_misf_address_table();
0384E:  GOTO   2E0C
.................... 
....................     fprintf(PC, "\tComplete\r\n");
03852:  MOVLW  F4
03854:  MOVWF  FF6
03856:  MOVLW  0F
03858:  MOVWF  FF7
0385A:  MOVLW  00
0385C:  MOVWF  FF8
0385E:  CALL   1F3E
03862:  RETURN 0
.................... }
.................... 
.................... void print_misf_address_table()
.................... {
....................     fprintf(PC, "\tField\t\tCounterName\tValue\r\n");
*
02E0C:  MOVLW  00
02E0E:  MOVWF  FF6
02E10:  MOVLW  10
02E12:  MOVWF  FF7
02E14:  MOVLW  00
02E16:  MOVWF  FF8
02E18:  CALL   1F3E
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
02E1C:  MOVLW  1C
02E1E:  MOVWF  FF6
02E20:  MOVLW  10
02E22:  MOVWF  FF7
02E24:  MOVLW  00
02E26:  MOVWF  FF8
02E28:  CALL   1F3E
....................     fprintf(PC, "\tPICLOG\t\tUsed\t\t0x%08LX\r\n", flash_counter_table[FLASH_ID_PICLOG].used_counter);
02E2C:  MOVLW  48
02E2E:  MOVWF  FF6
02E30:  MOVLW  10
02E32:  MOVWF  FF7
02E34:  MOVLW  00
02E36:  MOVWF  FF8
02E38:  MOVLW  11
02E3A:  MOVLB  B
02E3C:  MOVWF  x4A
02E3E:  MOVLB  0
02E40:  CALL   1F74
02E44:  MOVFF  13B,B4B
02E48:  MOVLW  37
02E4A:  MOVLB  B
02E4C:  MOVWF  x4C
02E4E:  MOVLB  0
02E50:  CALL   2188
02E54:  MOVFF  13A,B4B
02E58:  MOVLW  37
02E5A:  MOVLB  B
02E5C:  MOVWF  x4C
02E5E:  MOVLB  0
02E60:  CALL   2188
02E64:  MOVFF  139,B4B
02E68:  MOVLW  37
02E6A:  MOVLB  B
02E6C:  MOVWF  x4C
02E6E:  MOVLB  0
02E70:  CALL   2188
02E74:  MOVFF  138,B4B
02E78:  MOVLW  37
02E7A:  MOVLB  B
02E7C:  MOVWF  x4C
02E7E:  MOVLB  0
02E80:  CALL   2188
02E84:  MOVLW  0D
02E86:  BTFSS  FA6.6
02E88:  GOTO   2E86
02E8C:  MOVLB  E
02E8E:  MOVWF  xF9
02E90:  MOVLW  0A
02E92:  MOVLB  0
02E94:  BTFSS  FA6.6
02E96:  GOTO   2E94
02E9A:  MOVLB  E
02E9C:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", flash_counter_table[FLASH_ID_PICLOG].uncopied_counter);
02E9E:  MOVLW  62
02EA0:  MOVWF  FF6
02EA2:  MOVLW  10
02EA4:  MOVWF  FF7
02EA6:  MOVLW  00
02EA8:  MOVWF  FF8
02EAA:  MOVLW  0E
02EAC:  MOVLB  B
02EAE:  MOVWF  x4A
02EB0:  MOVLB  0
02EB2:  CALL   1F74
02EB6:  MOVFF  13F,B4B
02EBA:  MOVLW  37
02EBC:  MOVLB  B
02EBE:  MOVWF  x4C
02EC0:  MOVLB  0
02EC2:  CALL   2188
02EC6:  MOVFF  13E,B4B
02ECA:  MOVLW  37
02ECC:  MOVLB  B
02ECE:  MOVWF  x4C
02ED0:  MOVLB  0
02ED2:  CALL   2188
02ED6:  MOVFF  13D,B4B
02EDA:  MOVLW  37
02EDC:  MOVLB  B
02EDE:  MOVWF  x4C
02EE0:  MOVLB  0
02EE2:  CALL   2188
02EE6:  MOVFF  13C,B4B
02EEA:  MOVLW  37
02EEC:  MOVLB  B
02EEE:  MOVWF  x4C
02EF0:  MOVLB  0
02EF2:  CALL   2188
02EF6:  MOVLW  0D
02EF8:  BTFSS  FA6.6
02EFA:  GOTO   2EF8
02EFE:  MOVLB  E
02F00:  MOVWF  xF9
02F02:  MOVLW  0A
02F04:  MOVLB  0
02F06:  BTFSS  FA6.6
02F08:  GOTO   2F06
02F0C:  MOVLB  E
02F0E:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", flash_counter_table[FLASH_ID_PICLOG].reserve_counter1,flash_counter_table[FLASH_ID_PICLOG].reserve_counter2);
02F10:  MOVLW  78
02F12:  MOVWF  FF6
02F14:  MOVLW  10
02F16:  MOVWF  FF7
02F18:  MOVLW  00
02F1A:  MOVWF  FF8
02F1C:  MOVLW  0E
02F1E:  MOVLB  B
02F20:  MOVWF  x4A
02F22:  MOVLB  0
02F24:  CALL   1F74
02F28:  MOVFF  140,B4B
02F2C:  MOVLW  37
02F2E:  MOVLB  B
02F30:  MOVWF  x4C
02F32:  MOVLB  0
02F34:  CALL   2188
02F38:  MOVLW  8A
02F3A:  MOVWF  FF6
02F3C:  MOVLW  10
02F3E:  MOVWF  FF7
02F40:  MOVLW  00
02F42:  MOVWF  FF8
02F44:  MOVLW  04
02F46:  MOVLB  B
02F48:  MOVWF  x4A
02F4A:  MOVLB  0
02F4C:  CALL   1F74
02F50:  MOVFF  141,B4B
02F54:  MOVLW  37
02F56:  MOVLB  B
02F58:  MOVWF  x4C
02F5A:  MOVLB  0
02F5C:  CALL   2188
02F60:  MOVLW  0D
02F62:  BTFSS  FA6.6
02F64:  GOTO   2F62
02F68:  MOVLB  E
02F6A:  MOVWF  xF9
02F6C:  MOVLW  0A
02F6E:  MOVLB  0
02F70:  BTFSS  FA6.6
02F72:  GOTO   2F70
02F76:  MOVLB  E
02F78:  MOVWF  xF9
....................     fprintf(PC, "\tENVIRO\t\tUsed\t\t0x%08LX\r\n", flash_counter_table[FLASH_ID_ENVIRONMENT].used_counter);
02F7A:  MOVLW  96
02F7C:  MOVWF  FF6
02F7E:  MOVLW  10
02F80:  MOVWF  FF7
02F82:  MOVLW  00
02F84:  MOVWF  FF8
02F86:  MOVLW  11
02F88:  MOVLB  B
02F8A:  MOVWF  x4A
02F8C:  MOVLB  0
02F8E:  CALL   1F74
02F92:  MOVFF  145,B4B
02F96:  MOVLW  37
02F98:  MOVLB  B
02F9A:  MOVWF  x4C
02F9C:  MOVLB  0
02F9E:  CALL   2188
02FA2:  MOVFF  144,B4B
02FA6:  MOVLW  37
02FA8:  MOVLB  B
02FAA:  MOVWF  x4C
02FAC:  MOVLB  0
02FAE:  CALL   2188
02FB2:  MOVFF  143,B4B
02FB6:  MOVLW  37
02FB8:  MOVLB  B
02FBA:  MOVWF  x4C
02FBC:  MOVLB  0
02FBE:  CALL   2188
02FC2:  MOVFF  142,B4B
02FC6:  MOVLW  37
02FC8:  MOVLB  B
02FCA:  MOVWF  x4C
02FCC:  MOVLB  0
02FCE:  CALL   2188
02FD2:  MOVLW  0D
02FD4:  BTFSS  FA6.6
02FD6:  GOTO   2FD4
02FDA:  MOVLB  E
02FDC:  MOVWF  xF9
02FDE:  MOVLW  0A
02FE0:  MOVLB  0
02FE2:  BTFSS  FA6.6
02FE4:  GOTO   2FE2
02FE8:  MOVLB  E
02FEA:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", flash_counter_table[FLASH_ID_ENVIRONMENT].uncopied_counter);
02FEC:  MOVLW  B0
02FEE:  MOVWF  FF6
02FF0:  MOVLW  10
02FF2:  MOVWF  FF7
02FF4:  MOVLW  00
02FF6:  MOVWF  FF8
02FF8:  MOVLW  0E
02FFA:  MOVLB  B
02FFC:  MOVWF  x4A
02FFE:  MOVLB  0
03000:  CALL   1F74
03004:  MOVFF  149,B4B
03008:  MOVLW  37
0300A:  MOVLB  B
0300C:  MOVWF  x4C
0300E:  MOVLB  0
03010:  CALL   2188
03014:  MOVFF  148,B4B
03018:  MOVLW  37
0301A:  MOVLB  B
0301C:  MOVWF  x4C
0301E:  MOVLB  0
03020:  CALL   2188
03024:  MOVFF  147,B4B
03028:  MOVLW  37
0302A:  MOVLB  B
0302C:  MOVWF  x4C
0302E:  MOVLB  0
03030:  CALL   2188
03034:  MOVFF  146,B4B
03038:  MOVLW  37
0303A:  MOVLB  B
0303C:  MOVWF  x4C
0303E:  MOVLB  0
03040:  CALL   2188
03044:  MOVLW  0D
03046:  BTFSS  FA6.6
03048:  GOTO   3046
0304C:  MOVLB  E
0304E:  MOVWF  xF9
03050:  MOVLW  0A
03052:  MOVLB  0
03054:  BTFSS  FA6.6
03056:  GOTO   3054
0305A:  MOVLB  E
0305C:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", flash_counter_table[FLASH_ID_ENVIRONMENT].reserve_counter1,flash_counter_table[FLASH_ID_ENVIRONMENT].reserve_counter2);
0305E:  MOVLW  C6
03060:  MOVWF  FF6
03062:  MOVLW  10
03064:  MOVWF  FF7
03066:  MOVLW  00
03068:  MOVWF  FF8
0306A:  MOVLW  0E
0306C:  MOVLB  B
0306E:  MOVWF  x4A
03070:  MOVLB  0
03072:  CALL   1F74
03076:  MOVFF  14A,B4B
0307A:  MOVLW  37
0307C:  MOVLB  B
0307E:  MOVWF  x4C
03080:  MOVLB  0
03082:  CALL   2188
03086:  MOVLW  D8
03088:  MOVWF  FF6
0308A:  MOVLW  10
0308C:  MOVWF  FF7
0308E:  MOVLW  00
03090:  MOVWF  FF8
03092:  MOVLW  04
03094:  MOVLB  B
03096:  MOVWF  x4A
03098:  MOVLB  0
0309A:  CALL   1F74
0309E:  MOVFF  14B,B4B
030A2:  MOVLW  37
030A4:  MOVLB  B
030A6:  MOVWF  x4C
030A8:  MOVLB  0
030AA:  CALL   2188
030AE:  MOVLW  0D
030B0:  BTFSS  FA6.6
030B2:  GOTO   30B0
030B6:  MOVLB  E
030B8:  MOVWF  xF9
030BA:  MOVLW  0A
030BC:  MOVLB  0
030BE:  BTFSS  FA6.6
030C0:  GOTO   30BE
030C4:  MOVLB  E
030C6:  MOVWF  xF9
....................     fprintf(PC, "\tIV1 HEADER\tUsed\t\t0x%08LX\r\n", flash_counter_table[FLASH_ID_IV1_HEADER].used_counter);
030C8:  MOVLW  E4
030CA:  MOVWF  FF6
030CC:  MOVLW  10
030CE:  MOVWF  FF7
030D0:  MOVLW  00
030D2:  MOVWF  FF8
030D4:  MOVLW  14
030D6:  MOVLB  B
030D8:  MOVWF  x4A
030DA:  MOVLB  0
030DC:  CALL   1F74
030E0:  MOVFF  14F,B4B
030E4:  MOVLW  37
030E6:  MOVLB  B
030E8:  MOVWF  x4C
030EA:  MOVLB  0
030EC:  CALL   2188
030F0:  MOVFF  14E,B4B
030F4:  MOVLW  37
030F6:  MOVLB  B
030F8:  MOVWF  x4C
030FA:  MOVLB  0
030FC:  CALL   2188
03100:  MOVFF  14D,B4B
03104:  MOVLW  37
03106:  MOVLB  B
03108:  MOVWF  x4C
0310A:  MOVLB  0
0310C:  CALL   2188
03110:  MOVFF  14C,B4B
03114:  MOVLW  37
03116:  MOVLB  B
03118:  MOVWF  x4C
0311A:  MOVLB  0
0311C:  CALL   2188
03120:  MOVLW  0D
03122:  BTFSS  FA6.6
03124:  GOTO   3122
03128:  MOVLB  E
0312A:  MOVWF  xF9
0312C:  MOVLW  0A
0312E:  MOVLB  0
03130:  BTFSS  FA6.6
03132:  GOTO   3130
03136:  MOVLB  E
03138:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", flash_counter_table[FLASH_ID_IV1_HEADER].uncopied_counter);
0313A:  MOVLW  00
0313C:  MOVWF  FF6
0313E:  MOVLW  11
03140:  MOVWF  FF7
03142:  MOVLW  00
03144:  MOVWF  FF8
03146:  MOVLW  0E
03148:  MOVLB  B
0314A:  MOVWF  x4A
0314C:  MOVLB  0
0314E:  CALL   1F74
03152:  MOVFF  153,B4B
03156:  MOVLW  37
03158:  MOVLB  B
0315A:  MOVWF  x4C
0315C:  MOVLB  0
0315E:  CALL   2188
03162:  MOVFF  152,B4B
03166:  MOVLW  37
03168:  MOVLB  B
0316A:  MOVWF  x4C
0316C:  MOVLB  0
0316E:  CALL   2188
03172:  MOVFF  151,B4B
03176:  MOVLW  37
03178:  MOVLB  B
0317A:  MOVWF  x4C
0317C:  MOVLB  0
0317E:  CALL   2188
03182:  MOVFF  150,B4B
03186:  MOVLW  37
03188:  MOVLB  B
0318A:  MOVWF  x4C
0318C:  MOVLB  0
0318E:  CALL   2188
03192:  MOVLW  0D
03194:  BTFSS  FA6.6
03196:  GOTO   3194
0319A:  MOVLB  E
0319C:  MOVWF  xF9
0319E:  MOVLW  0A
031A0:  MOVLB  0
031A2:  BTFSS  FA6.6
031A4:  GOTO   31A2
031A8:  MOVLB  E
031AA:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", flash_counter_table[FLASH_ID_IV1_HEADER].reserve_counter1,flash_counter_table[FLASH_ID_IV1_HEADER].reserve_counter2);
031AC:  MOVLW  16
031AE:  MOVWF  FF6
031B0:  MOVLW  11
031B2:  MOVWF  FF7
031B4:  MOVLW  00
031B6:  MOVWF  FF8
031B8:  MOVLW  0E
031BA:  MOVLB  B
031BC:  MOVWF  x4A
031BE:  MOVLB  0
031C0:  CALL   1F74
031C4:  MOVFF  154,B4B
031C8:  MOVLW  37
031CA:  MOVLB  B
031CC:  MOVWF  x4C
031CE:  MOVLB  0
031D0:  CALL   2188
031D4:  MOVLW  28
031D6:  MOVWF  FF6
031D8:  MOVLW  11
031DA:  MOVWF  FF7
031DC:  MOVLW  00
031DE:  MOVWF  FF8
031E0:  MOVLW  04
031E2:  MOVLB  B
031E4:  MOVWF  x4A
031E6:  MOVLB  0
031E8:  CALL   1F74
031EC:  MOVFF  155,B4B
031F0:  MOVLW  37
031F2:  MOVLB  B
031F4:  MOVWF  x4C
031F6:  MOVLB  0
031F8:  CALL   2188
031FC:  MOVLW  0D
031FE:  BTFSS  FA6.6
03200:  GOTO   31FE
03204:  MOVLB  E
03206:  MOVWF  xF9
03208:  MOVLW  0A
0320A:  MOVLB  0
0320C:  BTFSS  FA6.6
0320E:  GOTO   320C
03212:  MOVLB  E
03214:  MOVWF  xF9
....................     fprintf(PC, "\tIV1 DATA\tUsed\t\t0x%08LX\r\n", flash_counter_table[FLASH_ID_IV1_DATA].used_counter);
03216:  MOVLW  34
03218:  MOVWF  FF6
0321A:  MOVLW  11
0321C:  MOVWF  FF7
0321E:  MOVLW  00
03220:  MOVWF  FF8
03222:  MOVLW  12
03224:  MOVLB  B
03226:  MOVWF  x4A
03228:  MOVLB  0
0322A:  CALL   1F74
0322E:  MOVFF  159,B4B
03232:  MOVLW  37
03234:  MOVLB  B
03236:  MOVWF  x4C
03238:  MOVLB  0
0323A:  CALL   2188
0323E:  MOVFF  158,B4B
03242:  MOVLW  37
03244:  MOVLB  B
03246:  MOVWF  x4C
03248:  MOVLB  0
0324A:  CALL   2188
0324E:  MOVFF  157,B4B
03252:  MOVLW  37
03254:  MOVLB  B
03256:  MOVWF  x4C
03258:  MOVLB  0
0325A:  CALL   2188
0325E:  MOVFF  156,B4B
03262:  MOVLW  37
03264:  MOVLB  B
03266:  MOVWF  x4C
03268:  MOVLB  0
0326A:  CALL   2188
0326E:  MOVLW  0D
03270:  BTFSS  FA6.6
03272:  GOTO   3270
03276:  MOVLB  E
03278:  MOVWF  xF9
0327A:  MOVLW  0A
0327C:  MOVLB  0
0327E:  BTFSS  FA6.6
03280:  GOTO   327E
03284:  MOVLB  E
03286:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", flash_counter_table[FLASH_ID_IV1_DATA].uncopied_counter);
03288:  MOVLW  4E
0328A:  MOVWF  FF6
0328C:  MOVLW  11
0328E:  MOVWF  FF7
03290:  MOVLW  00
03292:  MOVWF  FF8
03294:  MOVLW  0E
03296:  MOVLB  B
03298:  MOVWF  x4A
0329A:  MOVLB  0
0329C:  CALL   1F74
032A0:  MOVFF  15D,B4B
032A4:  MOVLW  37
032A6:  MOVLB  B
032A8:  MOVWF  x4C
032AA:  MOVLB  0
032AC:  CALL   2188
032B0:  MOVFF  15C,B4B
032B4:  MOVLW  37
032B6:  MOVLB  B
032B8:  MOVWF  x4C
032BA:  MOVLB  0
032BC:  CALL   2188
032C0:  MOVFF  15B,B4B
032C4:  MOVLW  37
032C6:  MOVLB  B
032C8:  MOVWF  x4C
032CA:  MOVLB  0
032CC:  CALL   2188
032D0:  MOVFF  15A,B4B
032D4:  MOVLW  37
032D6:  MOVLB  B
032D8:  MOVWF  x4C
032DA:  MOVLB  0
032DC:  CALL   2188
032E0:  MOVLW  0D
032E2:  BTFSS  FA6.6
032E4:  GOTO   32E2
032E8:  MOVLB  E
032EA:  MOVWF  xF9
032EC:  MOVLW  0A
032EE:  MOVLB  0
032F0:  BTFSS  FA6.6
032F2:  GOTO   32F0
032F6:  MOVLB  E
032F8:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", flash_counter_table[FLASH_ID_IV1_DATA].reserve_counter1,flash_counter_table[FLASH_ID_IV1_DATA].reserve_counter2);
032FA:  MOVLW  64
032FC:  MOVWF  FF6
032FE:  MOVLW  11
03300:  MOVWF  FF7
03302:  MOVLW  00
03304:  MOVWF  FF8
03306:  MOVLW  0E
03308:  MOVLB  B
0330A:  MOVWF  x4A
0330C:  MOVLB  0
0330E:  CALL   1F74
03312:  MOVFF  15E,B4B
03316:  MOVLW  37
03318:  MOVLB  B
0331A:  MOVWF  x4C
0331C:  MOVLB  0
0331E:  CALL   2188
03322:  MOVLW  76
03324:  MOVWF  FF6
03326:  MOVLW  11
03328:  MOVWF  FF7
0332A:  MOVLW  00
0332C:  MOVWF  FF8
0332E:  MOVLW  04
03330:  MOVLB  B
03332:  MOVWF  x4A
03334:  MOVLB  0
03336:  CALL   1F74
0333A:  MOVFF  15F,B4B
0333E:  MOVLW  37
03340:  MOVLB  B
03342:  MOVWF  x4C
03344:  MOVLB  0
03346:  CALL   2188
0334A:  MOVLW  0D
0334C:  BTFSS  FA6.6
0334E:  GOTO   334C
03352:  MOVLB  E
03354:  MOVWF  xF9
03356:  MOVLW  0A
03358:  MOVLB  0
0335A:  BTFSS  FA6.6
0335C:  GOTO   335A
03360:  MOVLB  E
03362:  MOVWF  xF9
....................     fprintf(PC, "\tIV2 HEADER\tUsed\t\t0x%08LX\r\n", flash_counter_table[FLASH_ID_IV2_HEADER].used_counter);
03364:  MOVLW  82
03366:  MOVWF  FF6
03368:  MOVLW  11
0336A:  MOVWF  FF7
0336C:  MOVLW  00
0336E:  MOVWF  FF8
03370:  MOVLW  14
03372:  MOVLB  B
03374:  MOVWF  x4A
03376:  MOVLB  0
03378:  CALL   1F74
0337C:  MOVFF  163,B4B
03380:  MOVLW  37
03382:  MOVLB  B
03384:  MOVWF  x4C
03386:  MOVLB  0
03388:  CALL   2188
0338C:  MOVFF  162,B4B
03390:  MOVLW  37
03392:  MOVLB  B
03394:  MOVWF  x4C
03396:  MOVLB  0
03398:  CALL   2188
0339C:  MOVFF  161,B4B
033A0:  MOVLW  37
033A2:  MOVLB  B
033A4:  MOVWF  x4C
033A6:  MOVLB  0
033A8:  CALL   2188
033AC:  MOVFF  160,B4B
033B0:  MOVLW  37
033B2:  MOVLB  B
033B4:  MOVWF  x4C
033B6:  MOVLB  0
033B8:  CALL   2188
033BC:  MOVLW  0D
033BE:  BTFSS  FA6.6
033C0:  GOTO   33BE
033C4:  MOVLB  E
033C6:  MOVWF  xF9
033C8:  MOVLW  0A
033CA:  MOVLB  0
033CC:  BTFSS  FA6.6
033CE:  GOTO   33CC
033D2:  MOVLB  E
033D4:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", flash_counter_table[FLASH_ID_IV2_HEADER].uncopied_counter);
033D6:  MOVLW  9E
033D8:  MOVWF  FF6
033DA:  MOVLW  11
033DC:  MOVWF  FF7
033DE:  MOVLW  00
033E0:  MOVWF  FF8
033E2:  MOVLW  0E
033E4:  MOVLB  B
033E6:  MOVWF  x4A
033E8:  MOVLB  0
033EA:  CALL   1F74
033EE:  MOVFF  167,B4B
033F2:  MOVLW  37
033F4:  MOVLB  B
033F6:  MOVWF  x4C
033F8:  MOVLB  0
033FA:  CALL   2188
033FE:  MOVFF  166,B4B
03402:  MOVLW  37
03404:  MOVLB  B
03406:  MOVWF  x4C
03408:  MOVLB  0
0340A:  CALL   2188
0340E:  MOVFF  165,B4B
03412:  MOVLW  37
03414:  MOVLB  B
03416:  MOVWF  x4C
03418:  MOVLB  0
0341A:  CALL   2188
0341E:  MOVFF  164,B4B
03422:  MOVLW  37
03424:  MOVLB  B
03426:  MOVWF  x4C
03428:  MOVLB  0
0342A:  CALL   2188
0342E:  MOVLW  0D
03430:  BTFSS  FA6.6
03432:  GOTO   3430
03436:  MOVLB  E
03438:  MOVWF  xF9
0343A:  MOVLW  0A
0343C:  MOVLB  0
0343E:  BTFSS  FA6.6
03440:  GOTO   343E
03444:  MOVLB  E
03446:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", flash_counter_table[FLASH_ID_IV2_HEADER].reserve_counter1,flash_counter_table[FLASH_ID_IV2_HEADER].reserve_counter2);
03448:  MOVLW  B4
0344A:  MOVWF  FF6
0344C:  MOVLW  11
0344E:  MOVWF  FF7
03450:  MOVLW  00
03452:  MOVWF  FF8
03454:  MOVLW  0E
03456:  MOVLB  B
03458:  MOVWF  x4A
0345A:  MOVLB  0
0345C:  CALL   1F74
03460:  MOVFF  168,B4B
03464:  MOVLW  37
03466:  MOVLB  B
03468:  MOVWF  x4C
0346A:  MOVLB  0
0346C:  CALL   2188
03470:  MOVLW  C6
03472:  MOVWF  FF6
03474:  MOVLW  11
03476:  MOVWF  FF7
03478:  MOVLW  00
0347A:  MOVWF  FF8
0347C:  MOVLW  04
0347E:  MOVLB  B
03480:  MOVWF  x4A
03482:  MOVLB  0
03484:  CALL   1F74
03488:  MOVFF  169,B4B
0348C:  MOVLW  37
0348E:  MOVLB  B
03490:  MOVWF  x4C
03492:  MOVLB  0
03494:  CALL   2188
03498:  MOVLW  0D
0349A:  BTFSS  FA6.6
0349C:  GOTO   349A
034A0:  MOVLB  E
034A2:  MOVWF  xF9
034A4:  MOVLW  0A
034A6:  MOVLB  0
034A8:  BTFSS  FA6.6
034AA:  GOTO   34A8
034AE:  MOVLB  E
034B0:  MOVWF  xF9
....................     fprintf(PC, "\tIV2 DATA\tUsed\t\t0x%08LX\r\n", flash_counter_table[FLASH_ID_IV2_DATA].used_counter);
034B2:  MOVLW  D2
034B4:  MOVWF  FF6
034B6:  MOVLW  11
034B8:  MOVWF  FF7
034BA:  MOVLW  00
034BC:  MOVWF  FF8
034BE:  MOVLW  12
034C0:  MOVLB  B
034C2:  MOVWF  x4A
034C4:  MOVLB  0
034C6:  CALL   1F74
034CA:  MOVFF  16D,B4B
034CE:  MOVLW  37
034D0:  MOVLB  B
034D2:  MOVWF  x4C
034D4:  MOVLB  0
034D6:  CALL   2188
034DA:  MOVFF  16C,B4B
034DE:  MOVLW  37
034E0:  MOVLB  B
034E2:  MOVWF  x4C
034E4:  MOVLB  0
034E6:  CALL   2188
034EA:  MOVFF  16B,B4B
034EE:  MOVLW  37
034F0:  MOVLB  B
034F2:  MOVWF  x4C
034F4:  MOVLB  0
034F6:  CALL   2188
034FA:  MOVFF  16A,B4B
034FE:  MOVLW  37
03500:  MOVLB  B
03502:  MOVWF  x4C
03504:  MOVLB  0
03506:  CALL   2188
0350A:  MOVLW  0D
0350C:  BTFSS  FA6.6
0350E:  GOTO   350C
03512:  MOVLB  E
03514:  MOVWF  xF9
03516:  MOVLW  0A
03518:  MOVLB  0
0351A:  BTFSS  FA6.6
0351C:  GOTO   351A
03520:  MOVLB  E
03522:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", flash_counter_table[FLASH_ID_IV2_DATA].uncopied_counter);
03524:  MOVLW  EC
03526:  MOVWF  FF6
03528:  MOVLW  11
0352A:  MOVWF  FF7
0352C:  MOVLW  00
0352E:  MOVWF  FF8
03530:  MOVLW  0E
03532:  MOVLB  B
03534:  MOVWF  x4A
03536:  MOVLB  0
03538:  CALL   1F74
0353C:  MOVFF  171,B4B
03540:  MOVLW  37
03542:  MOVLB  B
03544:  MOVWF  x4C
03546:  MOVLB  0
03548:  CALL   2188
0354C:  MOVFF  170,B4B
03550:  MOVLW  37
03552:  MOVLB  B
03554:  MOVWF  x4C
03556:  MOVLB  0
03558:  CALL   2188
0355C:  MOVFF  16F,B4B
03560:  MOVLW  37
03562:  MOVLB  B
03564:  MOVWF  x4C
03566:  MOVLB  0
03568:  CALL   2188
0356C:  MOVFF  16E,B4B
03570:  MOVLW  37
03572:  MOVLB  B
03574:  MOVWF  x4C
03576:  MOVLB  0
03578:  CALL   2188
0357C:  MOVLW  0D
0357E:  BTFSS  FA6.6
03580:  GOTO   357E
03584:  MOVLB  E
03586:  MOVWF  xF9
03588:  MOVLW  0A
0358A:  MOVLB  0
0358C:  BTFSS  FA6.6
0358E:  GOTO   358C
03592:  MOVLB  E
03594:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", flash_counter_table[FLASH_ID_IV2_DATA].reserve_counter1,flash_counter_table[FLASH_ID_IV2_DATA].reserve_counter2);
03596:  MOVLW  02
03598:  MOVWF  FF6
0359A:  MOVLW  12
0359C:  MOVWF  FF7
0359E:  MOVLW  00
035A0:  MOVWF  FF8
035A2:  MOVLW  0E
035A4:  MOVLB  B
035A6:  MOVWF  x4A
035A8:  MOVLB  0
035AA:  CALL   1F74
035AE:  MOVFF  172,B4B
035B2:  MOVLW  37
035B4:  MOVLB  B
035B6:  MOVWF  x4C
035B8:  MOVLB  0
035BA:  CALL   2188
035BE:  MOVLW  14
035C0:  MOVWF  FF6
035C2:  MOVLW  12
035C4:  MOVWF  FF7
035C6:  MOVLW  00
035C8:  MOVWF  FF8
035CA:  MOVLW  04
035CC:  MOVLB  B
035CE:  MOVWF  x4A
035D0:  MOVLB  0
035D2:  CALL   1F74
035D6:  MOVFF  173,B4B
035DA:  MOVLW  37
035DC:  MOVLB  B
035DE:  MOVWF  x4C
035E0:  MOVLB  0
035E2:  CALL   2188
035E6:  MOVLW  0D
035E8:  BTFSS  FA6.6
035EA:  GOTO   35E8
035EE:  MOVLB  E
035F0:  MOVWF  xF9
035F2:  MOVLW  0A
035F4:  MOVLB  0
035F6:  BTFSS  FA6.6
035F8:  GOTO   35F6
035FC:  MOVLB  E
035FE:  MOVWF  xF9
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
03600:  MOVLW  20
03602:  MOVWF  FF6
03604:  MOVLW  12
03606:  MOVWF  FF7
03608:  MOVLW  00
0360A:  MOVWF  FF8
0360C:  MOVLB  0
0360E:  CALL   1F3E
03612:  GOTO   3852 (RETURN)
.................... }
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size)
.................... {
....................     // パケット境界チェック
....................     if (flash_counter_table[id].reserve_counter1 + size > PACKET_SIZE-1) {
*
04446:  MOVLB  A
04448:  MOVF   xAF,W
0444A:  MULLW  0A
0444C:  MOVF   FF3,W
0444E:  MOVLB  B
04450:  CLRF   x4B
04452:  MOVWF  x4A
04454:  MOVLW  08
04456:  ADDWF  x4A,W
04458:  MOVWF  01
0445A:  MOVLW  00
0445C:  ADDWFC x4B,W
0445E:  MOVWF  03
04460:  MOVF   01,W
04462:  ADDLW  2E
04464:  MOVWF  FE9
04466:  MOVLW  01
04468:  ADDWFC 03,W
0446A:  MOVWF  FEA
0446C:  MOVF   FEF,W
0446E:  MOVLB  A
04470:  ADDWF  xB2,W
04472:  MOVLB  B
04474:  MOVWF  x4A
04476:  MOVLW  00
04478:  MOVLB  A
0447A:  ADDWFC xB3,W
0447C:  MOVLB  B
0447E:  MOVWF  x4B
04480:  MOVF   x4B,F
04482:  BTFSC  FD8.2
04484:  BRA    448C
04486:  MOVLB  0
04488:  GOTO   44A0
0448C:  MOVLB  0
0448E:  MOVLB  B
04490:  MOVF   x4A,W
04492:  SUBLW  3F
04494:  BTFSS  FD8.0
04496:  BRA    449E
04498:  MOVLB  0
0449A:  GOTO   476E
0449E:  MOVLB  0
....................         unsigned int8 blank_size = PACKET_SIZE - 1 - flash_counter_table[id].reserve_counter1;
....................         // fprintf(PC, "0x%02X", blank_size);
....................         unsigned int8 blank_data[PACKET_SIZE];
044A0:  MOVLB  A
044A2:  MOVF   xAF,W
044A4:  MULLW  0A
044A6:  MOVF   FF3,W
044A8:  MOVLB  B
044AA:  CLRF   x4B
044AC:  MOVWF  x4A
044AE:  MOVLW  08
044B0:  ADDWF  x4A,W
044B2:  MOVWF  01
044B4:  MOVLW  00
044B6:  ADDWFC x4B,W
044B8:  MOVWF  03
044BA:  MOVF   01,W
044BC:  ADDLW  2E
044BE:  MOVWF  FE9
044C0:  MOVLW  01
044C2:  ADDWFC 03,W
044C4:  MOVWF  FEA
044C6:  MOVF   FEF,W
044C8:  XORLW  FF
044CA:  ADDLW  40
044CC:  MOVLB  A
044CE:  MOVWF  xB4
044D0:  MOVLB  0
....................         memset(blank_data, 0, blank_size);
044D2:  MOVLW  0A
044D4:  MOVWF  FEA
044D6:  MOVLW  B5
044D8:  MOVWF  FE9
044DA:  CLRF   00
044DC:  CLRF   02
044DE:  MOVFF  AB4,01
044E2:  CALL   2B68
.................... 
....................         // アドレス再計算
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + flash_counter_table[id].used_counter;
044E6:  MOVLB  A
044E8:  MOVF   xAF,W
044EA:  MULLW  0C
044EC:  MOVF   FF3,W
044EE:  MOVLB  B
044F0:  CLRF   x4B
044F2:  MOVWF  x4A
044F4:  MOVFF  B4B,03
044F8:  MOVF   x4A,W
044FA:  MOVLB  0
044FC:  CALL   0132
04500:  MOVWF  00
04502:  TBLRD*+
04504:  MOVFF  FF5,01
04508:  TBLRD*+
0450A:  MOVFF  FF5,02
0450E:  TBLRD*+
04510:  MOVFF  FF5,03
04514:  MOVFF  03,B4F
04518:  MOVFF  02,B4E
0451C:  MOVFF  01,B4D
04520:  MOVFF  00,B4C
04524:  MOVLB  A
04526:  MOVF   xAF,W
04528:  MULLW  0A
0452A:  MOVF   FF3,W
0452C:  MOVLB  B
0452E:  CLRF   x51
04530:  MOVWF  x50
04532:  MOVLW  2E
04534:  ADDWF  x50,W
04536:  MOVWF  FE9
04538:  MOVLW  01
0453A:  ADDWFC x51,W
0453C:  MOVWF  FEA
0453E:  MOVFF  FEF,00
04542:  MOVFF  FEC,01
04546:  MOVFF  FEC,02
0454A:  MOVFF  FEC,03
0454E:  MOVF   FED,F
04550:  MOVF   FED,F
04552:  MOVF   FED,F
04554:  MOVF   00,W
04556:  ADDWF  x4C,W
04558:  MOVLB  A
0455A:  MOVWF  xF5
0455C:  MOVF   01,W
0455E:  MOVLB  B
04560:  ADDWFC x4D,W
04562:  MOVLB  A
04564:  MOVWF  xF6
04566:  MOVF   02,W
04568:  MOVLB  B
0456A:  ADDWFC x4E,W
0456C:  MOVLB  A
0456E:  MOVWF  xF7
04570:  MOVF   03,W
04572:  MOVLB  B
04574:  ADDWFC x4F,W
04576:  MOVLB  A
04578:  MOVWF  xF8
.................... 
....................         // 未使用部分を 0 埋め
....................         write_data_bytes(mis_fm, write_address, blank_data, blank_size);
0457A:  MOVFF  115,B91
0457E:  MOVFF  114,B90
04582:  MOVFF  113,B8F
04586:  MOVFF  112,B8E
0458A:  MOVFF  AF8,B95
0458E:  MOVFF  AF7,B94
04592:  MOVFF  AF6,B93
04596:  MOVFF  AF5,B92
0459A:  MOVLW  0A
0459C:  MOVLB  B
0459E:  MOVWF  x97
045A0:  MOVLW  B5
045A2:  MOVWF  x96
045A4:  CLRF   x99
045A6:  MOVFF  AB4,B98
045AA:  MOVLB  0
045AC:  CALL   3B7C
.................... 
....................         // CRC 計算（本体部分だけ読む）
....................         unsigned int8 packet_data[PACKET_SIZE - 1];
....................         unsigned int32 read_address = write_address + blank_size - PACKET_SIZE - 1;
045B0:  MOVLB  A
045B2:  MOVF   xB4,W
045B4:  ADDWF  xF5,W
045B6:  MOVLB  B
045B8:  MOVWF  x4A
045BA:  MOVLW  00
045BC:  MOVLB  A
045BE:  ADDWFC xF6,W
045C0:  MOVLB  B
045C2:  MOVWF  x4B
045C4:  MOVLW  00
045C6:  MOVLB  A
045C8:  ADDWFC xF7,W
045CA:  MOVLB  B
045CC:  MOVWF  x4C
045CE:  MOVLW  00
045D0:  MOVLB  A
045D2:  ADDWFC xF8,W
045D4:  MOVLB  B
045D6:  MOVWF  x4D
045D8:  MOVLW  40
045DA:  SUBWF  x4A,F
045DC:  MOVLW  00
045DE:  SUBWFB x4B,F
045E0:  MOVLW  00
045E2:  SUBWFB x4C,F
045E4:  MOVLW  00
045E6:  SUBWFB x4D,F
045E8:  MOVLW  01
045EA:  SUBWF  x4A,W
045EC:  MOVWF  x38
045EE:  MOVLW  00
045F0:  SUBWFB x4B,W
045F2:  MOVWF  x39
045F4:  MOVLW  00
045F6:  SUBWFB x4C,W
045F8:  MOVWF  x3A
045FA:  MOVLW  00
045FC:  SUBWFB x4D,W
045FE:  MOVWF  x3B
....................         read_data_bytes(mis_fm, read_address, packet_data, PACKET_SIZE - 1);
04600:  MOVFF  115,B4D
04604:  MOVFF  114,B4C
04608:  MOVFF  113,B4B
0460C:  MOVFF  112,B4A
04610:  MOVFF  B3B,B51
04614:  MOVFF  B3A,B50
04618:  MOVFF  B39,B4F
0461C:  MOVFF  B38,B4E
04620:  MOVLW  0A
04622:  MOVWF  x53
04624:  MOVLW  F9
04626:  MOVWF  x52
04628:  CLRF   x57
0462A:  CLRF   x56
0462C:  CLRF   x55
0462E:  MOVLW  3F
04630:  MOVWF  x54
04632:  MOVLB  0
04634:  CALL   2B8C
....................         unsigned int8 crc = calc_crc8(packet_data, PACKET_SIZE - 1);
04638:  MOVLW  0A
0463A:  MOVLB  B
0463C:  MOVWF  xD9
0463E:  MOVLW  F9
04640:  MOVWF  xD8
04642:  MOVLW  3F
04644:  MOVWF  xDA
04646:  MOVLB  0
04648:  CALL   2DA0
0464C:  MOVFF  01,B3C
....................         // fprintf(PC, "0x%02X", crc);
....................         // CRC 書き込み
....................         write_address += blank_size;
04650:  MOVLB  A
04652:  MOVF   xB4,W
04654:  ADDWF  xF5,F
04656:  MOVLW  00
04658:  ADDWFC xF6,F
0465A:  MOVLW  00
0465C:  ADDWFC xF7,F
0465E:  MOVLW  00
04660:  ADDWFC xF8,F
....................         write_data_bytes(mis_fm, write_address, &crc, 1);
04662:  MOVFF  115,B91
04666:  MOVFF  114,B90
0466A:  MOVFF  113,B8F
0466E:  MOVFF  112,B8E
04672:  MOVFF  AF8,B95
04676:  MOVFF  AF7,B94
0467A:  MOVFF  AF6,B93
0467E:  MOVFF  AF5,B92
04682:  MOVLW  0B
04684:  MOVLB  B
04686:  MOVWF  x97
04688:  MOVLW  3C
0468A:  MOVWF  x96
0468C:  CLRF   x99
0468E:  MOVLW  01
04690:  MOVWF  x98
04692:  MOVLB  0
04694:  CALL   3B7C
.................... 
....................         // カウンタ更新
....................         flash_counter_table[id].used_counter     += blank_size + 1;
04698:  MOVLB  A
0469A:  MOVF   xAF,W
0469C:  MULLW  0A
0469E:  MOVF   FF3,W
046A0:  MOVLB  B
046A2:  CLRF   x4B
046A4:  MOVWF  x4A
046A6:  MOVLW  2E
046A8:  ADDWF  x4A,W
046AA:  MOVWF  FE9
046AC:  MOVLW  01
046AE:  ADDWFC x4B,W
046B0:  MOVWF  FEA
046B2:  MOVLW  01
046B4:  MOVLB  A
046B6:  ADDWF  xB4,W
046B8:  ADDWF  FEF,W
046BA:  MOVWF  00
046BC:  MOVLW  00
046BE:  ADDWFC FEC,W
046C0:  MOVWF  01
046C2:  MOVLW  00
046C4:  ADDWFC FEC,W
046C6:  MOVWF  02
046C8:  MOVLW  00
046CA:  ADDWFC FEC,W
046CC:  MOVWF  03
046CE:  MOVF   FED,F
046D0:  MOVF   FED,F
046D2:  MOVF   FED,F
046D4:  MOVFF  00,FEF
046D8:  MOVFF  01,FEC
046DC:  MOVFF  02,FEC
046E0:  MOVFF  03,FEC
046E4:  MOVF   FED,F
046E6:  MOVF   FED,F
046E8:  MOVF   FED,F
....................         flash_counter_table[id].uncopied_counter += blank_size + 1;
046EA:  MOVF   xAF,W
046EC:  MULLW  0A
046EE:  MOVF   FF3,W
046F0:  MOVLB  B
046F2:  CLRF   x4B
046F4:  MOVWF  x4A
046F6:  MOVLW  04
046F8:  ADDWF  x4A,W
046FA:  MOVWF  01
046FC:  MOVLW  00
046FE:  ADDWFC x4B,W
04700:  MOVWF  03
04702:  MOVF   01,W
04704:  ADDLW  2E
04706:  MOVWF  FE9
04708:  MOVLW  01
0470A:  ADDWFC 03,W
0470C:  MOVWF  FEA
0470E:  MOVLW  01
04710:  MOVLB  A
04712:  ADDWF  xB4,W
04714:  ADDWF  FEF,W
04716:  MOVWF  00
04718:  MOVLW  00
0471A:  ADDWFC FEC,W
0471C:  MOVWF  01
0471E:  MOVLW  00
04720:  ADDWFC FEC,W
04722:  MOVWF  02
04724:  MOVLW  00
04726:  ADDWFC FEC,W
04728:  MOVWF  03
0472A:  MOVF   FED,F
0472C:  MOVF   FED,F
0472E:  MOVF   FED,F
04730:  MOVFF  00,FEF
04734:  MOVFF  01,FEC
04738:  MOVFF  02,FEC
0473C:  MOVFF  03,FEC
04740:  MOVF   FED,F
04742:  MOVF   FED,F
04744:  MOVF   FED,F
....................         flash_counter_table[id].reserve_counter1  = 0;
04746:  MOVF   xAF,W
04748:  MULLW  0A
0474A:  MOVF   FF3,W
0474C:  MOVLB  B
0474E:  CLRF   x4B
04750:  MOVWF  x4A
04752:  MOVLW  08
04754:  ADDWF  x4A,W
04756:  MOVWF  01
04758:  MOVLW  00
0475A:  ADDWFC x4B,W
0475C:  MOVWF  03
0475E:  MOVF   01,W
04760:  ADDLW  2E
04762:  MOVWF  FE9
04764:  MOVLW  01
04766:  ADDWFC 03,W
04768:  MOVWF  FEA
0476A:  CLRF   FEF
0476C:  MOVLB  0
....................     }
....................     if (flash_counter_table[id].reserve_counter1 + size == PACKET_SIZE-1){
0476E:  MOVLB  A
04770:  MOVF   xAF,W
04772:  MULLW  0A
04774:  MOVF   FF3,W
04776:  MOVLB  B
04778:  CLRF   x4B
0477A:  MOVWF  x4A
0477C:  MOVLW  08
0477E:  ADDWF  x4A,W
04780:  MOVWF  01
04782:  MOVLW  00
04784:  ADDWFC x4B,W
04786:  MOVWF  03
04788:  MOVF   01,W
0478A:  ADDLW  2E
0478C:  MOVWF  FE9
0478E:  MOVLW  01
04790:  ADDWFC 03,W
04792:  MOVWF  FEA
04794:  MOVF   FEF,W
04796:  MOVLB  A
04798:  ADDWF  xB2,W
0479A:  MOVLB  B
0479C:  MOVWF  x4A
0479E:  MOVLW  00
047A0:  MOVLB  A
047A2:  ADDWFC xB3,W
047A4:  MOVLB  B
047A6:  MOVWF  x4B
047A8:  MOVF   x4A,W
047AA:  SUBLW  3F
047AC:  BTFSC  FD8.2
047AE:  BRA    47B6
047B0:  MOVLB  0
047B2:  GOTO   4C08
047B6:  MOVLB  0
047B8:  MOVLB  B
047BA:  MOVF   x4B,F
047BC:  BTFSC  FD8.2
047BE:  BRA    47C6
047C0:  MOVLB  0
047C2:  GOTO   4C08
047C6:  MOVLB  0
....................         // データ書き込み
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + flash_counter_table[id].used_counter;
047C8:  MOVLB  A
047CA:  MOVF   xAF,W
047CC:  MULLW  0C
047CE:  MOVF   FF3,W
047D0:  MOVLB  B
047D2:  CLRF   x4B
047D4:  MOVWF  x4A
047D6:  MOVFF  B4B,03
047DA:  MOVF   x4A,W
047DC:  MOVLB  0
047DE:  CALL   0132
047E2:  MOVWF  00
047E4:  TBLRD*+
047E6:  MOVFF  FF5,01
047EA:  TBLRD*+
047EC:  MOVFF  FF5,02
047F0:  TBLRD*+
047F2:  MOVFF  FF5,03
047F6:  MOVFF  03,B4F
047FA:  MOVFF  02,B4E
047FE:  MOVFF  01,B4D
04802:  MOVFF  00,B4C
04806:  MOVLB  A
04808:  MOVF   xAF,W
0480A:  MULLW  0A
0480C:  MOVF   FF3,W
0480E:  MOVLB  B
04810:  CLRF   x51
04812:  MOVWF  x50
04814:  MOVLW  2E
04816:  ADDWF  x50,W
04818:  MOVWF  FE9
0481A:  MOVLW  01
0481C:  ADDWFC x51,W
0481E:  MOVWF  FEA
04820:  MOVFF  FEF,00
04824:  MOVFF  FEC,01
04828:  MOVFF  FEC,02
0482C:  MOVFF  FEC,03
04830:  MOVF   FED,F
04832:  MOVF   FED,F
04834:  MOVF   FED,F
04836:  MOVF   00,W
04838:  ADDWF  x4C,W
0483A:  MOVWF  x3D
0483C:  MOVF   01,W
0483E:  ADDWFC x4D,W
04840:  MOVWF  x3E
04842:  MOVF   02,W
04844:  ADDWFC x4E,W
04846:  MOVWF  x3F
04848:  MOVF   03,W
0484A:  ADDWFC x4F,W
0484C:  MOVWF  x40
0484E:  MOVLB  0
....................         write_data_bytes(mis_fm, write_address, data_ptr, size);
04850:  MOVFF  115,B91
04854:  MOVFF  114,B90
04858:  MOVFF  113,B8F
0485C:  MOVFF  112,B8E
04860:  MOVFF  B40,B95
04864:  MOVFF  B3F,B94
04868:  MOVFF  B3E,B93
0486C:  MOVFF  B3D,B92
04870:  MOVFF  AB1,B97
04874:  MOVFF  AB0,B96
04878:  MOVFF  AB3,B99
0487C:  MOVFF  AB2,B98
04880:  CALL   3B7C
....................         fprintf(PC, "ADDRESS 0x%08LX DATA ", write_address);
04884:  MOVLW  4C
04886:  MOVWF  FF6
04888:  MOVLW  12
0488A:  MOVWF  FF7
0488C:  MOVLW  00
0488E:  MOVWF  FF8
04890:  MOVLW  0A
04892:  MOVLB  B
04894:  MOVWF  x4A
04896:  MOVLB  0
04898:  CALL   1F74
0489C:  MOVFF  B40,B4B
048A0:  MOVLW  37
048A2:  MOVLB  B
048A4:  MOVWF  x4C
048A6:  MOVLB  0
048A8:  CALL   2188
048AC:  MOVFF  B3F,B4B
048B0:  MOVLW  37
048B2:  MOVLB  B
048B4:  MOVWF  x4C
048B6:  MOVLB  0
048B8:  CALL   2188
048BC:  MOVFF  B3E,B4B
048C0:  MOVLW  37
048C2:  MOVLB  B
048C4:  MOVWF  x4C
048C6:  MOVLB  0
048C8:  CALL   2188
048CC:  MOVFF  B3D,B4B
048D0:  MOVLW  37
048D2:  MOVLB  B
048D4:  MOVWF  x4C
048D6:  MOVLB  0
048D8:  CALL   2188
048DC:  MOVLW  5B
048DE:  MOVWF  FF6
048E0:  MOVLW  12
048E2:  MOVWF  FF7
048E4:  MOVLW  00
048E6:  MOVWF  FF8
048E8:  MOVLW  06
048EA:  MOVLB  B
048EC:  MOVWF  x4A
048EE:  MOVLB  0
048F0:  CALL   1F74
....................         for (unsigned int32 j = 0; j < size; j++) {
048F4:  MOVLB  B
048F6:  CLRF   x44
048F8:  CLRF   x43
048FA:  CLRF   x42
048FC:  CLRF   x41
048FE:  MOVLB  0
04900:  MOVLB  B
04902:  MOVF   x44,F
04904:  BTFSC  FD8.2
04906:  BRA    490E
04908:  MOVLB  0
0490A:  GOTO   499A
0490E:  MOVLB  0
04910:  MOVLB  B
04912:  MOVF   x43,F
04914:  BTFSC  FD8.2
04916:  BRA    491E
04918:  MOVLB  0
0491A:  GOTO   499A
0491E:  MOVLB  0
04920:  MOVLB  B
04922:  MOVF   x42,W
04924:  MOVLB  A
04926:  SUBWF  xB3,W
04928:  BTFSC  FD8.0
0492A:  BRA    4932
0492C:  MOVLB  0
0492E:  GOTO   499A
04932:  MOVLB  0
04934:  BTFSS  FD8.2
04936:  GOTO   494E
0493A:  MOVLB  A
0493C:  MOVF   xB2,W
0493E:  MOVLB  B
04940:  SUBWF  x41,W
04942:  BTFSS  FD8.0
04944:  BRA    494C
04946:  MOVLB  0
04948:  GOTO   499A
0494C:  MOVLB  0
....................             fprintf(PC, "%02X ", data_ptr[j]);
0494E:  MOVLB  A
04950:  MOVF   xB0,W
04952:  MOVLB  B
04954:  ADDWF  x41,W
04956:  MOVWF  FE9
04958:  MOVLB  A
0495A:  MOVF   xB1,W
0495C:  MOVLB  B
0495E:  ADDWFC x42,W
04960:  MOVWF  FEA
04962:  MOVFF  FEF,B4A
04966:  MOVFF  B4A,B4B
0496A:  MOVLW  37
0496C:  MOVWF  x4C
0496E:  MOVLB  0
04970:  CALL   2188
04974:  MOVLW  20
04976:  BTFSS  FA6.6
04978:  GOTO   4976
0497C:  MOVLB  E
0497E:  MOVWF  xF9
04980:  MOVLB  0
04982:  MOVLW  01
04984:  MOVLB  B
04986:  ADDWF  x41,F
04988:  BTFSC  FD8.0
0498A:  INCF   x42,F
0498C:  BTFSC  FD8.2
0498E:  INCF   x43,F
04990:  BTFSC  FD8.2
04992:  INCF   x44,F
04994:  MOVLB  0
04996:  GOTO   4900
....................         }
....................         fprintf(PC, "\r\n");
0499A:  MOVLW  0D
0499C:  BTFSS  FA6.6
0499E:  GOTO   499C
049A2:  MOVLB  E
049A4:  MOVWF  xF9
049A6:  MOVLW  0A
049A8:  MOVLB  0
049AA:  BTFSS  FA6.6
049AC:  GOTO   49AA
049B0:  MOVLB  E
049B2:  MOVWF  xF9
.................... 
....................         flash_counter_table[id].used_counter     += size;
049B4:  MOVLB  A
049B6:  MOVF   xAF,W
049B8:  MULLW  0A
049BA:  MOVF   FF3,W
049BC:  MOVLB  B
049BE:  CLRF   x4B
049C0:  MOVWF  x4A
049C2:  MOVLW  2E
049C4:  ADDWF  x4A,W
049C6:  MOVWF  FE9
049C8:  MOVLW  01
049CA:  ADDWFC x4B,W
049CC:  MOVWF  FEA
049CE:  MOVLB  A
049D0:  MOVF   xB2,W
049D2:  ADDWF  FEF,W
049D4:  MOVWF  00
049D6:  MOVF   xB3,W
049D8:  ADDWFC FEC,W
049DA:  MOVWF  01
049DC:  MOVLW  00
049DE:  ADDWFC FEC,W
049E0:  MOVWF  02
049E2:  MOVLW  00
049E4:  ADDWFC FEC,W
049E6:  MOVWF  03
049E8:  MOVF   FED,F
049EA:  MOVF   FED,F
049EC:  MOVF   FED,F
049EE:  MOVFF  00,FEF
049F2:  MOVFF  01,FEC
049F6:  MOVFF  02,FEC
049FA:  MOVFF  03,FEC
049FE:  MOVF   FED,F
04A00:  MOVF   FED,F
04A02:  MOVF   FED,F
....................         flash_counter_table[id].uncopied_counter += size;
04A04:  MOVF   xAF,W
04A06:  MULLW  0A
04A08:  MOVF   FF3,W
04A0A:  MOVLB  B
04A0C:  CLRF   x4B
04A0E:  MOVWF  x4A
04A10:  MOVLW  04
04A12:  ADDWF  x4A,W
04A14:  MOVWF  01
04A16:  MOVLW  00
04A18:  ADDWFC x4B,W
04A1A:  MOVWF  03
04A1C:  MOVF   01,W
04A1E:  ADDLW  2E
04A20:  MOVWF  FE9
04A22:  MOVLW  01
04A24:  ADDWFC 03,W
04A26:  MOVWF  FEA
04A28:  MOVLB  A
04A2A:  MOVF   xB2,W
04A2C:  ADDWF  FEF,W
04A2E:  MOVWF  00
04A30:  MOVF   xB3,W
04A32:  ADDWFC FEC,W
04A34:  MOVWF  01
04A36:  MOVLW  00
04A38:  ADDWFC FEC,W
04A3A:  MOVWF  02
04A3C:  MOVLW  00
04A3E:  ADDWFC FEC,W
04A40:  MOVWF  03
04A42:  MOVF   FED,F
04A44:  MOVF   FED,F
04A46:  MOVF   FED,F
04A48:  MOVFF  00,FEF
04A4C:  MOVFF  01,FEC
04A50:  MOVFF  02,FEC
04A54:  MOVFF  03,FEC
04A58:  MOVF   FED,F
04A5A:  MOVF   FED,F
04A5C:  MOVF   FED,F
....................         unsigned int8 crc = calc_crc8(data_ptr, size);
04A5E:  MOVFF  AB1,BD9
04A62:  MOVFF  AB0,BD8
04A66:  MOVFF  AB2,BDA
04A6A:  MOVLB  0
04A6C:  CALL   2DA0
04A70:  MOVFF  01,B45
.................... 
....................         // CRC 書き込み
....................         write_address = MISF_ADDRESS_TABLE[id].start + flash_counter_table[id].used_counter;
04A74:  MOVLB  A
04A76:  MOVF   xAF,W
04A78:  MULLW  0C
04A7A:  MOVF   FF3,W
04A7C:  MOVLB  B
04A7E:  CLRF   x4B
04A80:  MOVWF  x4A
04A82:  MOVFF  B4B,03
04A86:  MOVF   x4A,W
04A88:  MOVLB  0
04A8A:  CALL   0132
04A8E:  MOVWF  00
04A90:  TBLRD*+
04A92:  MOVFF  FF5,01
04A96:  TBLRD*+
04A98:  MOVFF  FF5,02
04A9C:  TBLRD*+
04A9E:  MOVFF  FF5,03
04AA2:  MOVFF  03,B4F
04AA6:  MOVFF  02,B4E
04AAA:  MOVFF  01,B4D
04AAE:  MOVFF  00,B4C
04AB2:  MOVLB  A
04AB4:  MOVF   xAF,W
04AB6:  MULLW  0A
04AB8:  MOVF   FF3,W
04ABA:  MOVLB  B
04ABC:  CLRF   x51
04ABE:  MOVWF  x50
04AC0:  MOVLW  2E
04AC2:  ADDWF  x50,W
04AC4:  MOVWF  FE9
04AC6:  MOVLW  01
04AC8:  ADDWFC x51,W
04ACA:  MOVWF  FEA
04ACC:  MOVFF  FEF,00
04AD0:  MOVFF  FEC,01
04AD4:  MOVFF  FEC,02
04AD8:  MOVFF  FEC,03
04ADC:  MOVF   FED,F
04ADE:  MOVF   FED,F
04AE0:  MOVF   FED,F
04AE2:  MOVF   00,W
04AE4:  ADDWF  x4C,W
04AE6:  MOVWF  x3D
04AE8:  MOVF   01,W
04AEA:  ADDWFC x4D,W
04AEC:  MOVWF  x3E
04AEE:  MOVF   02,W
04AF0:  ADDWFC x4E,W
04AF2:  MOVWF  x3F
04AF4:  MOVF   03,W
04AF6:  ADDWFC x4F,W
04AF8:  MOVWF  x40
....................         write_data_bytes(mis_fm, write_address, &crc, 1);
04AFA:  MOVFF  115,B91
04AFE:  MOVFF  114,B90
04B02:  MOVFF  113,B8F
04B06:  MOVFF  112,B8E
04B0A:  MOVFF  B40,B95
04B0E:  MOVFF  B3F,B94
04B12:  MOVFF  B3E,B93
04B16:  MOVFF  B3D,B92
04B1A:  MOVLW  0B
04B1C:  MOVWF  x97
04B1E:  MOVLW  45
04B20:  MOVWF  x96
04B22:  CLRF   x99
04B24:  MOVLW  01
04B26:  MOVWF  x98
04B28:  MOVLB  0
04B2A:  CALL   3B7C
.................... 
....................         // カウンタ更新
....................         flash_counter_table[id].used_counter     += 1;
04B2E:  MOVLB  A
04B30:  MOVF   xAF,W
04B32:  MULLW  0A
04B34:  MOVF   FF3,W
04B36:  MOVLB  B
04B38:  CLRF   x4B
04B3A:  MOVWF  x4A
04B3C:  MOVLW  2E
04B3E:  ADDWF  x4A,W
04B40:  MOVWF  FE9
04B42:  MOVLW  01
04B44:  ADDWFC x4B,W
04B46:  MOVWF  FEA
04B48:  MOVLW  01
04B4A:  ADDWF  FEF,W
04B4C:  MOVWF  00
04B4E:  MOVLW  00
04B50:  ADDWFC FEC,W
04B52:  MOVWF  01
04B54:  MOVLW  00
04B56:  ADDWFC FEC,W
04B58:  MOVWF  02
04B5A:  MOVLW  00
04B5C:  ADDWFC FEC,W
04B5E:  MOVWF  03
04B60:  MOVF   FED,F
04B62:  MOVF   FED,F
04B64:  MOVF   FED,F
04B66:  MOVFF  00,FEF
04B6A:  MOVFF  01,FEC
04B6E:  MOVFF  02,FEC
04B72:  MOVFF  03,FEC
04B76:  MOVF   FED,F
04B78:  MOVF   FED,F
04B7A:  MOVF   FED,F
....................         flash_counter_table[id].uncopied_counter += 1;
04B7C:  MOVLB  A
04B7E:  MOVF   xAF,W
04B80:  MULLW  0A
04B82:  MOVF   FF3,W
04B84:  MOVLB  B
04B86:  CLRF   x4B
04B88:  MOVWF  x4A
04B8A:  MOVLW  04
04B8C:  ADDWF  x4A,W
04B8E:  MOVWF  01
04B90:  MOVLW  00
04B92:  ADDWFC x4B,W
04B94:  MOVWF  03
04B96:  MOVF   01,W
04B98:  ADDLW  2E
04B9A:  MOVWF  FE9
04B9C:  MOVLW  01
04B9E:  ADDWFC 03,W
04BA0:  MOVWF  FEA
04BA2:  MOVLW  01
04BA4:  ADDWF  FEF,W
04BA6:  MOVWF  00
04BA8:  MOVLW  00
04BAA:  ADDWFC FEC,W
04BAC:  MOVWF  01
04BAE:  MOVLW  00
04BB0:  ADDWFC FEC,W
04BB2:  MOVWF  02
04BB4:  MOVLW  00
04BB6:  ADDWFC FEC,W
04BB8:  MOVWF  03
04BBA:  MOVF   FED,F
04BBC:  MOVF   FED,F
04BBE:  MOVF   FED,F
04BC0:  MOVFF  00,FEF
04BC4:  MOVFF  01,FEC
04BC8:  MOVFF  02,FEC
04BCC:  MOVFF  03,FEC
04BD0:  MOVF   FED,F
04BD2:  MOVF   FED,F
04BD4:  MOVF   FED,F
....................         flash_counter_table[id].reserve_counter1  = 0;
04BD6:  MOVLB  A
04BD8:  MOVF   xAF,W
04BDA:  MULLW  0A
04BDC:  MOVF   FF3,W
04BDE:  MOVLB  B
04BE0:  CLRF   x4B
04BE2:  MOVWF  x4A
04BE4:  MOVLW  08
04BE6:  ADDWF  x4A,W
04BE8:  MOVWF  01
04BEA:  MOVLW  00
04BEC:  ADDWFC x4B,W
04BEE:  MOVWF  03
04BF0:  MOVF   01,W
04BF2:  ADDLW  2E
04BF4:  MOVWF  FE9
04BF6:  MOVLW  01
04BF8:  ADDWFC 03,W
04BFA:  MOVWF  FEA
04BFC:  CLRF   FEF
.................... 
....................         // アドレステーブル更新
....................         misf_update_address_area();
04BFE:  MOVLB  0
04C00:  CALL   43B8
....................         return;
04C04:  GOTO   4DAA
....................     }
.................... 
....................     // データ書き込み
....................     unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + flash_counter_table[id].used_counter;
04C08:  MOVLB  A
04C0A:  MOVF   xAF,W
04C0C:  MULLW  0C
04C0E:  MOVF   FF3,W
04C10:  MOVLB  B
04C12:  CLRF   x4B
04C14:  MOVWF  x4A
04C16:  MOVFF  B4B,03
04C1A:  MOVF   x4A,W
04C1C:  MOVLB  0
04C1E:  CALL   0132
04C22:  MOVWF  00
04C24:  TBLRD*+
04C26:  MOVFF  FF5,01
04C2A:  TBLRD*+
04C2C:  MOVFF  FF5,02
04C30:  TBLRD*+
04C32:  MOVFF  FF5,03
04C36:  MOVFF  03,B4F
04C3A:  MOVFF  02,B4E
04C3E:  MOVFF  01,B4D
04C42:  MOVFF  00,B4C
04C46:  MOVLB  A
04C48:  MOVF   xAF,W
04C4A:  MULLW  0A
04C4C:  MOVF   FF3,W
04C4E:  MOVLB  B
04C50:  CLRF   x51
04C52:  MOVWF  x50
04C54:  MOVLW  2E
04C56:  ADDWF  x50,W
04C58:  MOVWF  FE9
04C5A:  MOVLW  01
04C5C:  ADDWFC x51,W
04C5E:  MOVWF  FEA
04C60:  MOVFF  FEF,00
04C64:  MOVFF  FEC,01
04C68:  MOVFF  FEC,02
04C6C:  MOVFF  FEC,03
04C70:  MOVF   FED,F
04C72:  MOVF   FED,F
04C74:  MOVF   FED,F
04C76:  MOVF   00,W
04C78:  ADDWF  x4C,W
04C7A:  MOVWF  x46
04C7C:  MOVF   01,W
04C7E:  ADDWFC x4D,W
04C80:  MOVWF  x47
04C82:  MOVF   02,W
04C84:  ADDWFC x4E,W
04C86:  MOVWF  x48
04C88:  MOVF   03,W
04C8A:  ADDWFC x4F,W
04C8C:  MOVWF  x49
....................     write_data_bytes(mis_fm, write_address, data_ptr, size);
04C8E:  MOVFF  115,B91
04C92:  MOVFF  114,B90
04C96:  MOVFF  113,B8F
04C9A:  MOVFF  112,B8E
04C9E:  MOVFF  B49,B95
04CA2:  MOVFF  B48,B94
04CA6:  MOVFF  B47,B93
04CAA:  MOVFF  B46,B92
04CAE:  MOVFF  AB1,B97
04CB2:  MOVFF  AB0,B96
04CB6:  MOVFF  AB3,B99
04CBA:  MOVFF  AB2,B98
04CBE:  MOVLB  0
04CC0:  CALL   3B7C
.................... 
....................     // カウンタ更新
....................     flash_counter_table[id].used_counter     += size;
04CC4:  MOVLB  A
04CC6:  MOVF   xAF,W
04CC8:  MULLW  0A
04CCA:  MOVF   FF3,W
04CCC:  MOVLB  B
04CCE:  CLRF   x4B
04CD0:  MOVWF  x4A
04CD2:  MOVLW  2E
04CD4:  ADDWF  x4A,W
04CD6:  MOVWF  FE9
04CD8:  MOVLW  01
04CDA:  ADDWFC x4B,W
04CDC:  MOVWF  FEA
04CDE:  MOVLB  A
04CE0:  MOVF   xB2,W
04CE2:  ADDWF  FEF,W
04CE4:  MOVWF  00
04CE6:  MOVF   xB3,W
04CE8:  ADDWFC FEC,W
04CEA:  MOVWF  01
04CEC:  MOVLW  00
04CEE:  ADDWFC FEC,W
04CF0:  MOVWF  02
04CF2:  MOVLW  00
04CF4:  ADDWFC FEC,W
04CF6:  MOVWF  03
04CF8:  MOVF   FED,F
04CFA:  MOVF   FED,F
04CFC:  MOVF   FED,F
04CFE:  MOVFF  00,FEF
04D02:  MOVFF  01,FEC
04D06:  MOVFF  02,FEC
04D0A:  MOVFF  03,FEC
04D0E:  MOVF   FED,F
04D10:  MOVF   FED,F
04D12:  MOVF   FED,F
....................     flash_counter_table[id].uncopied_counter += size;
04D14:  MOVF   xAF,W
04D16:  MULLW  0A
04D18:  MOVF   FF3,W
04D1A:  MOVLB  B
04D1C:  CLRF   x4B
04D1E:  MOVWF  x4A
04D20:  MOVLW  04
04D22:  ADDWF  x4A,W
04D24:  MOVWF  01
04D26:  MOVLW  00
04D28:  ADDWFC x4B,W
04D2A:  MOVWF  03
04D2C:  MOVF   01,W
04D2E:  ADDLW  2E
04D30:  MOVWF  FE9
04D32:  MOVLW  01
04D34:  ADDWFC 03,W
04D36:  MOVWF  FEA
04D38:  MOVLB  A
04D3A:  MOVF   xB2,W
04D3C:  ADDWF  FEF,W
04D3E:  MOVWF  00
04D40:  MOVF   xB3,W
04D42:  ADDWFC FEC,W
04D44:  MOVWF  01
04D46:  MOVLW  00
04D48:  ADDWFC FEC,W
04D4A:  MOVWF  02
04D4C:  MOVLW  00
04D4E:  ADDWFC FEC,W
04D50:  MOVWF  03
04D52:  MOVF   FED,F
04D54:  MOVF   FED,F
04D56:  MOVF   FED,F
04D58:  MOVFF  00,FEF
04D5C:  MOVFF  01,FEC
04D60:  MOVFF  02,FEC
04D64:  MOVFF  03,FEC
04D68:  MOVF   FED,F
04D6A:  MOVF   FED,F
04D6C:  MOVF   FED,F
....................     flash_counter_table[id].reserve_counter1 += size;
04D6E:  MOVF   xAF,W
04D70:  MULLW  0A
04D72:  MOVF   FF3,W
04D74:  MOVLB  B
04D76:  CLRF   x4B
04D78:  MOVWF  x4A
04D7A:  MOVLW  08
04D7C:  ADDWF  x4A,W
04D7E:  MOVWF  01
04D80:  MOVLW  00
04D82:  ADDWFC x4B,W
04D84:  MOVWF  03
04D86:  MOVF   01,W
04D88:  ADDLW  2E
04D8A:  MOVWF  FE9
04D8C:  MOVLW  01
04D8E:  ADDWFC 03,W
04D90:  MOVWF  FEA
04D92:  MOVF   FEF,W
04D94:  MOVLB  A
04D96:  ADDWF  xB2,W
04D98:  MOVWF  01
04D9A:  MOVLW  00
04D9C:  ADDWFC xB3,W
04D9E:  MOVWF  03
04DA0:  MOVF   01,W
04DA2:  MOVWF  FEF
.................... 
....................     // アドレステーブル更新
....................     misf_update_address_area();
04DA4:  MOVLB  0
04DA6:  CALL   43B8
04DAA:  RETURN 0
.................... }
.................... 
.................... FlashData_t make_flash_data_table(void)
*
03F00:  MOVLW  0B
03F02:  MOVLB  B
03F04:  MOVWF  xD3
03F06:  MOVLW  92
03F08:  MOVWF  xD2
.................... {
....................     FlashData_t flash_data;
....................     FlashData_t *flash_data_ptr = &flash_data;
.................... 
....................     // 初期化
....................     memset(flash_data_ptr->bytes, 0, sizeof(flash_data_ptr->bytes));
03F0A:  MOVF   xD2,W
03F0C:  MOVWF  01
03F0E:  MOVF   xD3,W
03F10:  MOVWF  03
03F12:  MOVF   01,W
03F14:  MOVWF  xD4
03F16:  MOVFF  03,BD5
03F1A:  MOVFF  BD5,FEA
03F1E:  MOVFF  BD4,FE9
03F22:  CLRF   00
03F24:  CLRF   02
03F26:  MOVLW  40
03F28:  MOVWF  01
03F2A:  MOVLB  0
03F2C:  CALL   2B68
.................... 
....................     flash_data_ptr->packet.payload.logdata.piclog = flash_counter_table[FLASH_ID_PICLOG];
03F30:  MOVLB  B
03F32:  MOVF   xD2,W
03F34:  MOVWF  FE9
03F36:  MOVF   xD3,W
03F38:  MOVWF  FEA
03F3A:  MOVLW  01
03F3C:  MOVWF  FE2
03F3E:  MOVLW  38
03F40:  MOVWF  FE1
03F42:  MOVLW  0A
03F44:  MOVWF  01
03F46:  MOVLB  0
03F48:  MOVFF  FE6,FEE
03F4C:  DECFSZ 01,F
03F4E:  GOTO   3F48
....................     flash_data_ptr->packet.payload.logdata.environment = flash_counter_table[FLASH_ID_ENVIRONMENT];
03F52:  MOVLW  0A
03F54:  MOVLB  B
03F56:  ADDWF  xD2,W
03F58:  MOVWF  FE9
03F5A:  MOVLW  00
03F5C:  ADDWFC xD3,W
03F5E:  MOVWF  FEA
03F60:  MOVLW  01
03F62:  MOVWF  FE2
03F64:  MOVLW  42
03F66:  MOVWF  FE1
03F68:  MOVLW  0A
03F6A:  MOVWF  01
03F6C:  MOVLB  0
03F6E:  MOVFF  FE6,FEE
03F72:  DECFSZ 01,F
03F74:  GOTO   3F6E
....................     flash_data_ptr->packet.payload.logdata.iv1_header = flash_counter_table[FLASH_ID_IV1_HEADER];
03F78:  MOVLW  14
03F7A:  MOVLB  B
03F7C:  ADDWF  xD2,W
03F7E:  MOVWF  FE9
03F80:  MOVLW  00
03F82:  ADDWFC xD3,W
03F84:  MOVWF  FEA
03F86:  MOVLW  01
03F88:  MOVWF  FE2
03F8A:  MOVLW  4C
03F8C:  MOVWF  FE1
03F8E:  MOVLW  0A
03F90:  MOVWF  01
03F92:  MOVLB  0
03F94:  MOVFF  FE6,FEE
03F98:  DECFSZ 01,F
03F9A:  GOTO   3F94
....................     flash_data_ptr->packet.payload.logdata.iv1_data = flash_counter_table[FLASH_ID_IV1_DATA];
03F9E:  MOVLW  1E
03FA0:  MOVLB  B
03FA2:  ADDWF  xD2,W
03FA4:  MOVWF  FE9
03FA6:  MOVLW  00
03FA8:  ADDWFC xD3,W
03FAA:  MOVWF  FEA
03FAC:  MOVLW  01
03FAE:  MOVWF  FE2
03FB0:  MOVLW  56
03FB2:  MOVWF  FE1
03FB4:  MOVLW  0A
03FB6:  MOVWF  01
03FB8:  MOVLB  0
03FBA:  MOVFF  FE6,FEE
03FBE:  DECFSZ 01,F
03FC0:  GOTO   3FBA
....................     flash_data_ptr->packet.payload.logdata.iv2_header = flash_counter_table[FLASH_ID_IV2_HEADER];
03FC4:  MOVLW  28
03FC6:  MOVLB  B
03FC8:  ADDWF  xD2,W
03FCA:  MOVWF  FE9
03FCC:  MOVLW  00
03FCE:  ADDWFC xD3,W
03FD0:  MOVWF  FEA
03FD2:  MOVLW  01
03FD4:  MOVWF  FE2
03FD6:  MOVLW  60
03FD8:  MOVWF  FE1
03FDA:  MOVLW  0A
03FDC:  MOVWF  01
03FDE:  MOVLB  0
03FE0:  MOVFF  FE6,FEE
03FE4:  DECFSZ 01,F
03FE6:  GOTO   3FE0
....................     flash_data_ptr->packet.payload.logdata.iv2_data = flash_counter_table[FLASH_ID_IV2_DATA];
03FEA:  MOVLW  32
03FEC:  MOVLB  B
03FEE:  ADDWF  xD2,W
03FF0:  MOVWF  FE9
03FF2:  MOVLW  00
03FF4:  ADDWFC xD3,W
03FF6:  MOVWF  FEA
03FF8:  MOVLW  01
03FFA:  MOVWF  FE2
03FFC:  MOVLW  6A
03FFE:  MOVWF  FE1
04000:  MOVLW  0A
04002:  MOVWF  01
04004:  MOVLB  0
04006:  MOVFF  FE6,FEE
0400A:  DECFSZ 01,F
0400C:  GOTO   4006
.................... 
....................     // CRC 計算
....................     flash_data_ptr->packet.crc = calc_crc8(flash_data_ptr->bytes, PACKET_SIZE - 1);
04010:  MOVLW  3F
04012:  MOVLB  B
04014:  ADDWF  xD2,W
04016:  MOVWF  01
04018:  MOVLW  00
0401A:  ADDWFC xD3,W
0401C:  MOVWF  03
0401E:  MOVF   01,W
04020:  MOVWF  xD4
04022:  MOVFF  03,BD5
04026:  MOVF   xD2,W
04028:  MOVWF  01
0402A:  MOVF   xD3,W
0402C:  MOVWF  03
0402E:  MOVF   01,W
04030:  MOVWF  xD6
04032:  MOVFF  03,BD7
04036:  MOVFF  BD7,BD9
0403A:  MOVFF  BD6,BD8
0403E:  MOVLW  3F
04040:  MOVWF  xDA
04042:  MOVLB  0
04044:  CALL   2DA0
04048:  MOVFF  BD5,FEA
0404C:  MOVFF  BD4,FE9
04050:  MOVFF  01,FEF
.................... 
....................     return flash_data;
04054:  MOVLW  92
04056:  MOVWF  01
04058:  MOVLW  0B
0405A:  MOVWF  02
0405C:  GOTO   43BC (RETURN)
.................... }
.................... 
.................... void misf_update_address_area(void)
*
043B8:  GOTO   3F00
043BC:  MOVFF  02,03
043C0:  MOVF   01,W
043C2:  MOVWF  FE1
043C4:  MOVFF  03,FE2
043C8:  MOVLW  0B
043CA:  MOVWF  FEA
043CC:  MOVLW  4A
043CE:  MOVWF  FE9
043D0:  MOVLW  40
043D2:  MOVWF  01
043D4:  MOVFF  FE6,FEE
043D8:  DECFSZ 01,F
043DA:  GOTO   43D4
043DE:  MOVLW  0B
043E0:  MOVLB  B
043E2:  MOVWF  x8B
043E4:  MOVLW  4A
043E6:  MOVWF  x8A
.................... {
....................     FlashData_t flash_data = make_flash_data_table();
....................     FlashData_t *flash_data_ptr = &flash_data;
.................... 
....................     sector_erase(mis_fm, MISF_CIGS_DATA_TABLE_START);
043E8:  MOVFF  115,B8F
043EC:  MOVFF  114,B8E
043F0:  MOVFF  113,B8D
043F4:  MOVFF  112,B8C
043F8:  CLRF   x93
043FA:  CLRF   x92
043FC:  CLRF   x91
043FE:  CLRF   x90
04400:  MOVLB  0
04402:  CALL   4060
....................     write_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, flash_data_ptr->bytes, PACKET_SIZE);
04406:  MOVLB  B
04408:  MOVF   x8A,W
0440A:  MOVWF  01
0440C:  MOVF   x8B,W
0440E:  MOVWF  03
04410:  MOVF   01,W
04412:  MOVWF  x8C
04414:  MOVFF  03,B8D
04418:  MOVFF  115,B91
0441C:  MOVFF  114,B90
04420:  MOVFF  113,B8F
04424:  MOVFF  112,B8E
04428:  CLRF   x95
0442A:  CLRF   x94
0442C:  CLRF   x93
0442E:  CLRF   x92
04430:  MOVFF  B8D,B97
04434:  MOVFF  B8C,B96
04438:  CLRF   x99
0443A:  MOVLW  40
0443C:  MOVWF  x98
0443E:  MOVLB  0
04440:  CALL   3B7C
04444:  RETURN 0
.................... }
.................... 
.................... 
.................... // PICLOG 更新後に呼ばれる関数例 (piclog_write 内で既に misf_update_address_area 呼んでいる場合は不要)
.................... static void update_piclog_counters_after_write(unsigned int16 wrote_size)
.................... {
....................     piclog_data.used_counter     += wrote_size;
....................     piclog_data.uncopied_counter += wrote_size;
....................     // 必要なら wrap 処理追加
....................     misf_update_address_area();
.................... }
.................... 
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode)
.................... {
....................     FlashOperationStruct data;
....................     // 構造体の初期化
....................     data.mission_id = mission_id;
....................     data.func_type = func_type;
....................     data.write_mode = write_mode;
....................     data.source_type = SOURCE_MISF_UNCOPIED;
....................     enqueue_flash_operation(&data);
.................... }
.................... 
.................... void write_smf_header(smf_data_table_t *smf_data_table)
.................... {
.................... 
....................     int8 readdata[PACKET_SIZE];
....................     int8 retry_count;
....................     int1 crc_valid = 0;
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
....................         if (is_crc_valid(readdata, PACKET_SIZE-1))
....................         {
....................             crc_valid = 1; // FIX: フラグ更新
....................             fprintf(PC, "CRC verification passed on attempt %d\r\n", retry_count + 1);
....................             break;
....................         }
....................     }
....................     if (!crc_valid)
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
....................         // return; 
....................     }
.................... }
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id)
.................... {
....................    MisfAddressStruct mis_struct = {0};
.................... 
....................    if (mission_id == CIGS_DATA_TABLE)
....................    {
....................       mis_struct.start_address = MISF_CIGS_DATA_TABLE_START;
....................       mis_struct.end_address   = MISF_CIGS_DATA_TABLE_END;
....................    }
....................    else if (mission_id == CIGS_PICLOG_DATA)
....................    {
....................       mis_struct.start_address = MISF_CIGS_PICLOG_START;
....................       mis_struct.end_address   = MISF_CIGS_PICLOG_END;
....................    }
....................    else if (mission_id == CIGS_ENVIRO_DATA)
....................    {
....................       mis_struct.start_address = MISF_CIGS_ENVIRO_START;
....................       mis_struct.end_address   = MISF_CIGS_ENVIRO_END;
....................    }
....................    else if (mission_id == CIGS_IV1_HEADER)
....................    {
....................       mis_struct.start_address = MISF_CIGS_IV1_HEADER_START;
....................       mis_struct.end_address   = MISF_CIGS_IV1_HEADER_END;
....................    }
....................    else if (mission_id == CIGS_IV1_DATA)
....................    {
....................       mis_struct.start_address = MISF_CIGS_IV1_DATA_START;
....................       mis_struct.end_address   = MISF_CIGS_IV1_DATA_END;
....................    }
....................    return mis_struct;
.................... }
.................... 
.................... MisfWriteStruct get_misf_write_struct(MissionID mission_id)
.................... {
....................     MisfWriteStruct mis_write_struct = {0};
.................... 
....................     if (mission_id == CIGS_DATA_TABLE)
....................     {
....................         mis_write_struct.start_address = MISF_CIGS_DATA_TABLE_START;
....................         mis_write_struct.size = MISF_CIGS_DATA_TABLE_SIZE;
....................     }
....................     else if (mission_id == CIGS_PICLOG_DATA)
....................     {
....................         mis_write_struct.start_address = MISF_CIGS_PICLOG_START + piclog_data.used_counter - piclog_data.uncopied_counter;
....................         mis_write_struct.size = piclog_data.uncopied_counter;
....................     }
....................     else if (mission_id == CIGS_ENVIRO_DATA)
....................     {
....................         mis_write_struct.start_address = MISF_CIGS_ENVIRO_START + environment_data.used_counter - environment_data.uncopied_counter;
....................         mis_write_struct.size = environment_data.uncopied_counter;
....................     }
....................     else if (mission_id == CIGS_IV1_HEADER)
....................     {
....................         mis_write_struct.start_address = MISF_CIGS_IV1_HEADER_START + iv1_header.used_counter - iv1_header.uncopied_counter;
....................         mis_write_struct.size = iv1_header.uncopied_counter;
....................     }
....................     else if (mission_id == CIGS_IV1_DATA)
....................     {
....................         mis_write_struct.start_address = MISF_CIGS_IV1_DATA_START + iv1_data.used_counter - iv1_data.uncopied_counter;
....................         mis_write_struct.size = iv1_data.uncopied_counter;
....................     }
....................     return mis_write_struct;
.................... }
.................... // End of file
.................... 
.................... 
.................... // アプリケーション実装ファイル
.................... #include "application/mmj_cigs_excute_mission.c"
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../hal/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/value_status.h"    // ステータス定義
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "mmj_cigs_excute_mission.h"                  // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_DEBUG 0xA3
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "../domain/mmj_cigs_smf.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #include "../hal/mmj_cigs_config.h" // int8,int32 型など(CCS C) 依存
.................... #include "mmj_cigs_flash.h"       // MISF_ADDRESS_TABLE, flash_counter_table 依存
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int8 loop_counter;
....................     int8 reserved[3];
.................... } SMF_PARTITION;
.................... 
.................... // パーティション管理構造体
.................... typedef struct {
....................     SMF_PARTITION piclog;     // データテーブル領域は利用しないため削除
....................     SMF_PARTITION env;
....................     SMF_PARTITION iv1_header;
....................     SMF_PARTITION iv1_data;
....................     SMF_PARTITION iv2_header;
....................     SMF_PARTITION iv2_data;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... extern PartitionParam param;  // extern宣言に変更
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         SMF_PARTITION headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table);
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/communication/typedef_content.h"    // 通信ライブラリ
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.h"      // ミッションツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../domain/mmj_cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/communication_driver.h" // 通信ドライバー
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *content)
*
0E0CC:  MOVLB  2
0E0CE:  MOVF   x2A,W
0E0D0:  MOVWF  FE9
0E0D2:  MOVF   x2B,W
0E0D4:  MOVWF  FEA
0E0D6:  MOVFF  FEF,22C
.................... {
....................    // record to executed mission list
....................    int8 command_id = content[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
0E0DA:  MOVLW  BE
0E0DC:  MOVWF  FF6
0E0DE:  MOVLW  12
0E0E0:  MOVWF  FF7
0E0E2:  MOVLW  00
0E0E4:  MOVWF  FF8
0E0E6:  MOVLB  0
0E0E8:  CALL   1F3E
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
0E0EC:  MOVLW  04
0E0EE:  MOVWF  FF6
0E0F0:  MOVLW  13
0E0F2:  MOVWF  FF7
0E0F4:  MOVLW  00
0E0F6:  MOVWF  FF8
0E0F8:  MOVLW  0C
0E0FA:  MOVLB  B
0E0FC:  MOVWF  x4A
0E0FE:  MOVLB  0
0E100:  CALL   1F74
0E104:  MOVFF  22C,B4B
0E108:  MOVLW  37
0E10A:  MOVLB  B
0E10C:  MOVWF  x4C
0E10E:  MOVLB  0
0E110:  CALL   2188
0E114:  MOVLW  12
0E116:  MOVWF  FF6
0E118:  MOVLW  13
0E11A:  MOVWF  FF7
0E11C:  MOVLW  00
0E11E:  MOVWF  FF8
0E120:  MOVLW  04
0E122:  MOVLB  B
0E124:  MOVWF  x4A
0E126:  MOVLB  0
0E128:  CALL   1F74
....................    switch(command_id)
0E12C:  MOVLB  2
0E12E:  MOVF   x2C,W
0E130:  XORLW  10
0E132:  MOVLB  0
0E134:  BTFSC  FD8.2
0E136:  GOTO   E206
0E13A:  XORLW  01
0E13C:  BTFSC  FD8.2
0E13E:  GOTO   E20A
0E142:  XORLW  03
0E144:  BTFSC  FD8.2
0E146:  GOTO   E20E
0E14A:  XORLW  13
0E14C:  BTFSC  FD8.2
0E14E:  GOTO   E212
0E152:  XORLW  12
0E154:  BTFSC  FD8.2
0E156:  GOTO   E216
0E15A:  XORLW  93
0E15C:  BTFSC  FD8.2
0E15E:  GOTO   E21A
0E162:  XORLW  01
0E164:  BTFSC  FD8.2
0E166:  GOTO   E22A
0E16A:  XORLW  03
0E16C:  BTFSC  FD8.2
0E16E:  GOTO   E23A
0E172:  XORLW  01
0E174:  BTFSC  FD8.2
0E176:  GOTO   E24A
0E17A:  XORLW  07
0E17C:  BTFSC  FD8.2
0E17E:  GOTO   E25A
0E182:  XORLW  01
0E184:  BTFSC  FD8.2
0E186:  GOTO   E26A
0E18A:  XORLW  03
0E18C:  BTFSC  FD8.2
0E18E:  GOTO   E27A
0E192:  XORLW  01
0E194:  BTFSC  FD8.2
0E196:  GOTO   E28A
0E19A:  XORLW  0F
0E19C:  BTFSC  FD8.2
0E19E:  GOTO   E29A
0E1A2:  XORLW  18
0E1A4:  BTFSC  FD8.2
0E1A6:  GOTO   E2AA
0E1AA:  XORLW  01
0E1AC:  BTFSC  FD8.2
0E1AE:  GOTO   E2BA
0E1B2:  XORLW  03
0E1B4:  BTFSC  FD8.2
0E1B6:  GOTO   E2CA
0E1BA:  XORLW  01
0E1BC:  BTFSC  FD8.2
0E1BE:  GOTO   E2DA
0E1C2:  XORLW  07
0E1C4:  BTFSC  FD8.2
0E1C6:  GOTO   E2EA
0E1CA:  XORLW  01
0E1CC:  BTFSC  FD8.2
0E1CE:  GOTO   E2FA
0E1D2:  XORLW  03
0E1D4:  BTFSC  FD8.2
0E1D6:  GOTO   E30A
0E1DA:  XORLW  36
0E1DC:  BTFSC  FD8.2
0E1DE:  GOTO   E31A
0E1E2:  XORLW  01
0E1E4:  BTFSC  FD8.2
0E1E6:  GOTO   E32A
0E1EA:  XORLW  03
0E1EC:  BTFSC  FD8.2
0E1EE:  GOTO   E33A
0E1F2:  XORLW  01
0E1F4:  BTFSC  FD8.2
0E1F6:  GOTO   E34A
0E1FA:  XORLW  07
0E1FC:  BTFSC  FD8.2
0E1FE:  GOTO   E35A
0E202:  GOTO   E362
....................    {
....................       case 0x10: // example command
....................          // mode_dummy(content);
....................          //mode_iv_meas_adc();
....................          break;
0E206:  GOTO   E376
....................       case 0x11:
....................          // mode_test_iv(content);
....................          break;
0E20A:  GOTO   E376
....................       case 0x12:
....................          // test_adc();
....................          break;
0E20E:  GOTO   E376
....................       case 0x01:
....................          //mode_measure(content); // check if the flash is connected
....................          break;
0E212:  GOTO   E376
....................       case 0x13:
....................          // mode_sweep_port1(content[1]); // Sweep Port 1 with the given step
....................          break;
0E216:  GOTO   E376
.................... 
....................       // ___________________ MISF Commands ______________________
....................       case ID_MISF_ERASE_ALL:
....................          mode_misf_erase_all(content);
0E21A:  MOVFF  22B,230
0E21E:  MOVFF  22A,22F
0E222:  CALL   55D2
....................          break;
0E226:  GOTO   E376
....................       case ID_MISF_ERASE_1SECTOR:
....................          mode_misf_erase_1sector(content);
0E22A:  MOVFF  22B,22E
0E22E:  MOVFF  22A,22D
0E232:  GOTO   56AE
....................          break;
0E236:  GOTO   E376
....................       case ID_MISF_ERASE_4kByte_SUBSECTOR:
....................          mode_misf_erase_4kbyte_subsector(content);
0E23A:  MOVFF  22B,22E
0E23E:  MOVFF  22A,22D
0E242:  GOTO   5BA2
....................          break;
0E246:  GOTO   E376
....................       case ID_MISF_ERASE_64kByte_SUBSECTOR:
....................          mode_misf_erase_64kbyte_subsector(content);
0E24A:  MOVFF  22B,22E
0E24E:  MOVFF  22A,22D
0E252:  GOTO   5D3A
....................          break;
0E256:  GOTO   E376
....................       case ID_MISF_WRITE_DEMO:
....................          mode_misf_write_demo(content);
0E25A:  MOVFF  22B,22E
0E25E:  MOVFF  22A,22D
0E262:  GOTO   608E
....................          break;
0E266:  GOTO   E376
....................       case ID_MISF_WRITE_4kByte_SUBSECTOR:
....................          mode_misf_write_4kbyte_subsector(content);
0E26A:  MOVFF  22B,22E
0E26E:  MOVFF  22A,22D
0E272:  GOTO   66C0
....................          break;
0E276:  GOTO   E376
....................       case ID_MISF_READ:
....................          mode_misf_read(content);
0E27A:  MOVFF  22B,22E
0E27E:  MOVFF  22A,22D
0E282:  GOTO   6734
....................          break;
0E286:  GOTO   E376
....................       case ID_MISF_READ_ADDRESS:
....................          mode_misf_read_address(content);
0E28A:  MOVFF  22B,22E
0E28E:  MOVFF  22A,22D
0E292:  GOTO   6E9A
....................          break;
0E296:  GOTO   E376
....................       case ID_MISF_ERASE_AND_RESET:
....................          mode_misf_erase_and_reset(content);
0E29A:  MOVFF  22B,22E
0E29E:  MOVFF  22A,22D
0E2A2:  GOTO   719E
....................          break;
0E2A6:  GOTO   E376
.................... 
....................       // ___________________ SMF Commands ______________________
....................       case ID_SMF_COPY:
....................          mode_smf_copy(content);
0E2AA:  MOVFF  22B,22E
0E2AE:  MOVFF  22A,22D
0E2B2:  GOTO   71F4
....................          break;
0E2B6:  GOTO   E376
....................       case ID_SMF_READ:
....................          mode_smf_read(content);
0E2BA:  MOVFF  22B,22E
0E2BE:  MOVFF  22A,22D
0E2C2:  GOTO   73F2
....................          break;
0E2C6:  GOTO   E376
....................       case ID_SMF_ERASE:
....................          mode_smf_erase(content);
0E2CA:  MOVFF  22B,22E
0E2CE:  MOVFF  22A,22D
0E2D2:  GOTO   76FE
....................          break;
0E2D6:  GOTO   E376
....................       case ID_SMF_COPY_FORCE:
....................          mode_smf_address_reset(content);
0E2DA:  MOVFF  22B,22E
0E2DE:  MOVFF  22A,22D
0E2E2:  CALL   7846
....................          break;
0E2E6:  GOTO   E376
....................       case ID_SMF_READ_FORCE:
....................          mode_smf_read_force(content);
0E2EA:  MOVFF  22B,22E
0E2EE:  MOVFF  22A,22D
0E2F2:  GOTO   79BE
....................          break;
0E2F6:  GOTO   E376
....................       case ID_SMF_ERASE_FORCE:
....................          mode_smf_erase_force(content);
0E2FA:  MOVFF  22B,22E
0E2FE:  MOVFF  22A,22D
0E302:  GOTO   7DAC
....................          break;
0E306:  GOTO   E376
....................       case ID_SMF_RESET:
....................          mode_smf_address_reset(content);
0E30A:  MOVFF  22B,22E
0E30E:  MOVFF  22A,22D
0E312:  CALL   7846
....................          break;
0E316:  GOTO   E376
....................          
....................          
....................       // ________________MEAS________________________________
....................       case ID_MEAS_IV:
....................          mode_meas_iv(content);
0E31A:  MOVFF  22B,22E
0E31E:  MOVFF  22A,22D
0E322:  GOTO   9D58
....................          break;
0E326:  GOTO   E376
....................       case ID_MEAS_DEBUG:
....................          mode_meas_iv_debug(content);
0E32A:  MOVFF  22B,22E
0E32E:  MOVFF  22A,22D
0E332:  GOTO   C330
....................          break;;
0E336:  GOTO   E376
....................       case ID_MEAS_ENV:
....................          mode_meas_env(content);
0E33A:  MOVFF  22B,22E
0E33E:  MOVFF  22A,22D
0E342:  GOTO   C612
....................          break;
0E346:  GOTO   E376
....................       case ID_MEAS_ENV_DEBUG:
....................          mode_meas_env_debug(content);
0E34A:  MOVFF  22B,22E
0E34E:  MOVFF  22A,22D
0E352:  GOTO   CAFA
....................          break;
0E356:  GOTO   E376
....................      
....................      case 0xA4:
....................           sweep_with_print();
0E35A:  GOTO   CB40
....................           break;
0E35E:  GOTO   E376
....................      
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
0E362:  MOVLW  18
0E364:  MOVWF  FF6
0E366:  MOVLW  13
0E368:  MOVWF  FF7
0E36A:  MOVLW  00
0E36C:  MOVWF  FF8
0E36E:  CALL   1F3E
....................          break;
0E372:  GOTO   E376
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
0E376:  MOVLW  30
0E378:  MOVWF  FF6
0E37A:  MOVLW  13
0E37C:  MOVWF  FF7
0E37E:  MOVLW  00
0E380:  MOVWF  FF8
0E382:  CALL   1F3E
0E386:  GOTO   E3F4 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
0FF68:  MOVLW  76
0FF6A:  MOVWF  FF6
0FF6C:  MOVLW  13
0FF6E:  MOVWF  FF7
0FF70:  MOVLW  00
0FF72:  MOVWF  FF8
0FF74:  CALL   1F3E
....................    
....................    switch(command->frame_id)
0FF78:  MOVLB  2
0FF7A:  MOVF   x24,W
0FF7C:  MOVWF  FE9
0FF7E:  MOVF   x25,W
0FF80:  MOVWF  FEA
0FF82:  MOVF   FEF,W
0FF84:  XORLW  00
0FF86:  MOVLB  0
0FF88:  BTFSC  FD8.2
0FF8A:  GOTO   FFA2
0FF8E:  XORLW  01
0FF90:  BTFSC  FD8.2
0FF92:  GOTO   FFB2
0FF96:  XORLW  03
0FF98:  BTFSC  FD8.2
0FF9A:  GOTO   FFD2
0FF9E:  GOTO   FFE2
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
0FFA2:  MOVFF  225,227
0FFA6:  MOVFF  224,226
0FFAA:  GOTO   E3A8
....................          break;
0FFAE:  GOTO   FFE2
....................          
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
0FFB2:  MOVFF  225,227
0FFB6:  MOVFF  224,226
0FFBA:  GOTO   E42A
0FFBE:  MOVF   01,F
0FFC0:  BTFSC  FD8.2
0FFC2:  GOTO   FFCE
....................             return TRUE; // if status is finished, return TRUE
0FFC6:  MOVLW  01
0FFC8:  MOVWF  01
0FFCA:  GOTO   FFE6
....................          }        
....................          break;
0FFCE:  GOTO   FFE2
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
0FFD2:  MOVFF  225,227
0FFD6:  MOVFF  224,226
0FFDA:  GOTO   FCA6
....................          break;
0FFDE:  GOTO   FFE2
....................    }
....................    return FALSE;
0FFE2:  MOVLW  00
0FFE4:  MOVWF  01
0FFE6:  GOTO   113A2 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
0E3A8:  MOVLW  8E
0E3AA:  MOVWF  FF6
0E3AC:  MOVLW  13
0E3AE:  MOVWF  FF7
0E3B0:  MOVLW  00
0E3B2:  MOVWF  FF8
0E3B4:  CALL   1F3E
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
0E3B8:  MOVLW  A4
0E3BA:  MOVWF  FF6
0E3BC:  MOVLW  13
0E3BE:  MOVWF  FF7
0E3C0:  MOVLW  00
0E3C2:  MOVWF  FF8
0E3C4:  CALL   1F3E
....................    transmit_ack();
0E3C8:  CALL   55BE
.................... 
....................    status[0] = EXECUTING_MISSION;
0E3CC:  MOVLW  02
0E3CE:  MOVWF  4C
....................    execute_mission(command->content);
0E3D0:  MOVLW  03
0E3D2:  MOVLB  2
0E3D4:  ADDWF  x26,W
0E3D6:  MOVWF  01
0E3D8:  MOVLW  00
0E3DA:  ADDWFC x27,W
0E3DC:  MOVWF  03
0E3DE:  MOVF   01,W
0E3E0:  MOVWF  x28
0E3E2:  MOVFF  03,229
0E3E6:  MOVFF  229,22B
0E3EA:  MOVFF  228,22A
0E3EE:  MOVLB  0
0E3F0:  GOTO   E0CC
....................    if (is_empty_flash_queue())
0E3F4:  CALL   E38A
0E3F8:  MOVF   01,F
0E3FA:  BTFSC  FD8.2
0E3FC:  GOTO   E408
....................       status[0] = FINISHED;
0E400:  MOVLW  06
0E402:  MOVWF  4C
0E404:  GOTO   E40C
....................    else
....................       status[0] = SMF_USE_REQ;
0E408:  MOVLW  04
0E40A:  MOVWF  4C
0E40C:  GOTO   FFAE (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... 
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
*
0E42A:  MOVLW  BE
0E42C:  MOVWF  FF6
0E42E:  MOVLW  13
0E430:  MOVWF  FF7
0E432:  MOVLW  00
0E434:  MOVWF  FF8
0E436:  CALL   1F3E
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
0E43A:  MOVLW  D2
0E43C:  MOVWF  FF6
0E43E:  MOVLW  13
0E440:  MOVWF  FF7
0E442:  MOVLW  00
0E444:  MOVWF  FF8
0E446:  CALL   1F3E
....................    transmit_status();
0E44A:  GOTO   E410
....................    if (status[0] == FINISHED)
0E44E:  MOVF   4C,W
0E450:  SUBLW  06
0E452:  BTFSS  FD8.2
0E454:  GOTO   E474
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
0E458:  MOVLW  F0
0E45A:  MOVWF  FF6
0E45C:  MOVLW  13
0E45E:  MOVWF  FF7
0E460:  MOVLW  00
0E462:  MOVWF  FF8
0E464:  CALL   1F3E
....................       return TRUE;
0E468:  MOVLW  01
0E46A:  MOVWF  01
0E46C:  GOTO   E47C
....................    }
0E470:  GOTO   E47C
....................    else{
....................       return FALSE;
0E474:  MOVLW  00
0E476:  MOVWF  01
0E478:  GOTO   E47C
....................    }
0E47C:  GOTO   FFBE (RETURN)
.................... }
.................... 
.................... 
.................... void handle_smf_available(Command *command)
.................... {
....................     fprintf(PC, "\t-> SMF available check\r\n");
*
0FCA6:  MOVLW  0C
0FCA8:  MOVWF  FF6
0FCAA:  MOVLW  14
0FCAC:  MOVWF  FF7
0FCAE:  MOVLW  00
0FCB0:  MOVWF  FF8
0FCB2:  CALL   1F3E
....................     fprintf(PC, "\t   Transmit Acknowledgement\r\n");
0FCB6:  MOVLW  26
0FCB8:  MOVWF  FF6
0FCBA:  MOVLW  14
0FCBC:  MOVWF  FF7
0FCBE:  MOVLW  00
0FCC0:  MOVWF  FF8
0FCC2:  CALL   1F3E
....................     transmit_ack();
0FCC6:  CALL   55BE
.................... 
....................     if (command->content[0] != ALLOW) {
0FCCA:  MOVLW  03
0FCCC:  MOVLB  2
0FCCE:  ADDWF  x26,W
0FCD0:  MOVWF  FE9
0FCD2:  MOVLW  00
0FCD4:  ADDWFC x27,W
0FCD6:  MOVWF  FEA
0FCD8:  DECFSZ FEF,W
0FCDA:  BRA    FCE0
0FCDC:  BRA    FCE6
0FCDE:  MOVLB  0
0FCE0:  MOVLB  0
0FCE2:  GOTO   FCEC
0FCE6:  MOVLB  0
0FCE8:  GOTO   FD00
....................         fprintf(PC, "\t\t-> denied\r\n");
0FCEC:  MOVLW  46
0FCEE:  MOVWF  FF6
0FCF0:  MOVLW  14
0FCF2:  MOVWF  FF7
0FCF4:  MOVLW  00
0FCF6:  MOVWF  FF8
0FCF8:  CALL   1F3E
....................         return;
0FCFC:  GOTO   FF64
....................     }
.................... 
....................     fprintf(PC, "\t\t-> allowed\r\n");
0FD00:  MOVLW  54
0FD02:  MOVWF  FF6
0FD04:  MOVLW  14
0FD06:  MOVWF  FF7
0FD08:  MOVLW  00
0FD0A:  MOVWF  FF8
0FD0C:  CALL   1F3E
....................     status[0] = COPYING;
0FD10:  MOVLW  05
0FD12:  MOVWF  4C
.................... 
....................     int8 processed_count = 0;
0FD14:  MOVLB  2
0FD16:  CLRF   x28
0FD18:  MOVLB  0
.................... 
....................     while (!is_empty_flash_queue()) {
0FD1A:  CALL   E38A
0FD1E:  MOVF   01,F
0FD20:  BTFSS  FD8.2
0FD22:  GOTO   FF20
....................         FlashOperationStruct *smf_data = dequeue_flash_operation();
0FD26:  GOTO   E480
0FD2A:  MOVFF  02,22A
0FD2E:  MOVFF  01,229
....................         /*
....................         if (smf_data == NULL) {
....................             fprintf(PC, "\t\t-> dequeue NULL (break)\r\n");
....................             break;
....................         }
....................          */
....................         fprintf(PC, "\t\t-> Dequeued: func=%u mission=%u size=%ld addr=%ld\r\n",
....................                 (unsigned int)smf_data->func_type,
....................                 (unsigned int)smf_data->mission_id,
....................                 smf_data->misf_size,
....................                 smf_data->misf_start_addr);
0FD32:  MOVLW  01
0FD34:  MOVLB  2
0FD36:  ADDWF  x29,W
0FD38:  MOVWF  FE9
0FD3A:  MOVLW  00
0FD3C:  ADDWFC x2A,W
0FD3E:  MOVWF  FEA
0FD40:  MOVFF  FEF,22B
0FD44:  MOVF   x29,W
0FD46:  MOVWF  FE9
0FD48:  MOVF   x2A,W
0FD4A:  MOVWF  FEA
0FD4C:  MOVFF  FEF,22C
0FD50:  MOVLW  08
0FD52:  ADDWF  x29,W
0FD54:  MOVWF  FE9
0FD56:  MOVLW  00
0FD58:  ADDWFC x2A,W
0FD5A:  MOVWF  FEA
0FD5C:  MOVFF  FEF,22D
0FD60:  MOVFF  FEC,22E
0FD64:  MOVFF  FEC,22F
0FD68:  MOVFF  FEC,230
0FD6C:  MOVF   FED,F
0FD6E:  MOVF   FED,F
0FD70:  MOVF   FED,F
0FD72:  MOVLW  04
0FD74:  ADDWF  x29,W
0FD76:  MOVWF  FE9
0FD78:  MOVLW  00
0FD7A:  ADDWFC x2A,W
0FD7C:  MOVWF  FEA
0FD7E:  MOVFF  FEF,231
0FD82:  MOVFF  FEC,232
0FD86:  MOVFF  FEC,233
0FD8A:  MOVFF  FEC,234
0FD8E:  MOVF   FED,F
0FD90:  MOVF   FED,F
0FD92:  MOVF   FED,F
0FD94:  MOVLW  64
0FD96:  MOVWF  FF6
0FD98:  MOVLW  14
0FD9A:  MOVWF  FF7
0FD9C:  MOVLW  00
0FD9E:  MOVWF  FF8
0FDA0:  MOVLW  14
0FDA2:  MOVLB  B
0FDA4:  MOVWF  x4A
0FDA6:  MOVLB  0
0FDA8:  CALL   1F74
0FDAC:  MOVFF  22B,2DB
0FDB0:  MOVLW  1B
0FDB2:  MOVLB  2
0FDB4:  MOVWF  xDC
0FDB6:  MOVLB  0
0FDB8:  CALL   E52C
0FDBC:  MOVLW  7A
0FDBE:  MOVWF  FF6
0FDC0:  MOVLW  14
0FDC2:  MOVWF  FF7
0FDC4:  MOVLW  00
0FDC6:  MOVWF  FF8
0FDC8:  MOVLW  09
0FDCA:  MOVLB  B
0FDCC:  MOVWF  x4A
0FDCE:  MOVLB  0
0FDD0:  CALL   1F74
0FDD4:  MOVFF  22C,2DB
0FDD8:  MOVLW  1B
0FDDA:  MOVLB  2
0FDDC:  MOVWF  xDC
0FDDE:  MOVLB  0
0FDE0:  CALL   E52C
0FDE4:  MOVLW  85
0FDE6:  MOVWF  FF6
0FDE8:  MOVLW  14
0FDEA:  MOVWF  FF7
0FDEC:  MOVLW  00
0FDEE:  MOVWF  FF8
0FDF0:  MOVLW  06
0FDF2:  MOVLB  B
0FDF4:  MOVWF  x4A
0FDF6:  MOVLB  0
0FDF8:  CALL   1F74
0FDFC:  MOVLW  41
0FDFE:  MOVWF  FE9
0FE00:  MOVFF  230,238
0FE04:  MOVFF  22F,237
0FE08:  MOVFF  22E,236
0FE0C:  MOVFF  22D,235
0FE10:  CALL   E5E8
0FE14:  MOVLW  8E
0FE16:  MOVWF  FF6
0FE18:  MOVLW  14
0FE1A:  MOVWF  FF7
0FE1C:  MOVLW  00
0FE1E:  MOVWF  FF8
0FE20:  MOVLW  06
0FE22:  MOVLB  B
0FE24:  MOVWF  x4A
0FE26:  MOVLB  0
0FE28:  CALL   1F74
0FE2C:  MOVLW  41
0FE2E:  MOVWF  FE9
0FE30:  MOVFF  234,238
0FE34:  MOVFF  233,237
0FE38:  MOVFF  232,236
0FE3C:  MOVFF  231,235
0FE40:  CALL   E5E8
0FE44:  MOVLW  0D
0FE46:  BTFSS  FA6.6
0FE48:  GOTO   FE46
0FE4C:  MOVLB  E
0FE4E:  MOVWF  xF9
0FE50:  MOVLW  0A
0FE52:  MOVLB  0
0FE54:  BTFSS  FA6.6
0FE56:  GOTO   FE54
0FE5A:  MOVLB  E
0FE5C:  MOVWF  xF9
.................... 
....................         switch (smf_data->func_type) {
0FE5E:  MOVLW  01
0FE60:  MOVLB  2
0FE62:  ADDWF  x29,W
0FE64:  MOVWF  FE9
0FE66:  MOVLW  00
0FE68:  ADDWFC x2A,W
0FE6A:  MOVWF  FEA
0FE6C:  MOVF   FEF,W
0FE6E:  XORLW  00
0FE70:  MOVLB  0
0FE72:  BTFSC  FD8.2
0FE74:  GOTO   FE8C
0FE78:  XORLW  01
0FE7A:  BTFSC  FD8.2
0FE7C:  GOTO   FE9C
0FE80:  XORLW  03
0FE82:  BTFSC  FD8.2
0FE84:  GOTO   FEAC
0FE88:  GOTO   FEBC
....................             case ENUM_SMF_WRITE:
....................                 smf_write(smf_data);
0FE8C:  MOVFF  22A,22C
0FE90:  MOVFF  229,22B
0FE94:  GOTO   F016
....................                 break;
0FE98:  GOTO   FF16
....................             case ENUM_SMF_READ:
....................                 smf_read(smf_data);
0FE9C:  MOVFF  22A,22C
0FEA0:  MOVFF  229,22B
0FEA4:  GOTO   10000
....................                 break;
0FEA8:  GOTO   FF16
....................             case ENUM_SMF_ERASE:
....................                 smf_erase(smf_data);
0FEAC:  MOVFF  22A,22C
0FEB0:  MOVFF  229,22B
0FEB4:  GOTO   1072A
....................                 break;
0FEB8:  GOTO   FF16
....................             default:
....................                 fprintf(PC, "\t\t   Unknown func_type=%u\r\n",
....................                         (unsigned int)smf_data->func_type);
0FEBC:  MOVLW  01
0FEBE:  MOVLB  2
0FEC0:  ADDWF  x29,W
0FEC2:  MOVWF  FE9
0FEC4:  MOVLW  00
0FEC6:  ADDWFC x2A,W
0FEC8:  MOVWF  FEA
0FECA:  MOVFF  FEF,22B
0FECE:  MOVLW  9A
0FED0:  MOVWF  FF6
0FED2:  MOVLW  14
0FED4:  MOVWF  FF7
0FED6:  MOVLW  00
0FED8:  MOVWF  FF8
0FEDA:  MOVLW  17
0FEDC:  MOVLB  B
0FEDE:  MOVWF  x4A
0FEE0:  MOVLB  0
0FEE2:  CALL   1F74
0FEE6:  MOVFF  22B,2DB
0FEEA:  MOVLW  1B
0FEEC:  MOVLB  2
0FEEE:  MOVWF  xDC
0FEF0:  MOVLB  0
0FEF2:  CALL   E52C
0FEF6:  MOVLW  0D
0FEF8:  BTFSS  FA6.6
0FEFA:  GOTO   FEF8
0FEFE:  MOVLB  E
0FF00:  MOVWF  xF9
0FF02:  MOVLW  0A
0FF04:  MOVLB  0
0FF06:  BTFSS  FA6.6
0FF08:  GOTO   FF06
0FF0C:  MOVLB  E
0FF0E:  MOVWF  xF9
....................                 break;
0FF10:  MOVLB  0
0FF12:  GOTO   FF16
....................         }
....................         processed_count++;
0FF16:  MOVLB  2
0FF18:  INCF   x28,F
0FF1A:  MOVLB  0
0FF1C:  GOTO   FD1A
....................     }
.................... 
....................     fprintf(PC, "\t\t-> Completed %u operations\r\n",
....................             (unsigned int)processed_count);
0FF20:  MOVLW  B6
0FF22:  MOVWF  FF6
0FF24:  MOVLW  14
0FF26:  MOVWF  FF7
0FF28:  MOVLW  00
0FF2A:  MOVWF  FF8
0FF2C:  MOVLW  0F
0FF2E:  MOVLB  B
0FF30:  MOVWF  x4A
0FF32:  MOVLB  0
0FF34:  CALL   1F74
0FF38:  MOVFF  228,2DB
0FF3C:  MOVLW  1B
0FF3E:  MOVLB  2
0FF40:  MOVWF  xDC
0FF42:  MOVLB  0
0FF44:  CALL   E52C
0FF48:  MOVLW  C7
0FF4A:  MOVWF  FF6
0FF4C:  MOVLW  14
0FF4E:  MOVWF  FF7
0FF50:  MOVLW  00
0FF52:  MOVWF  FF8
0FF54:  MOVLW  0D
0FF56:  MOVLB  B
0FF58:  MOVWF  x4A
0FF5A:  MOVLB  0
0FF5C:  CALL   1F74
.................... 
....................     status[0] = FINISHED;
0FF60:  MOVLW  06
0FF62:  MOVWF  4C
0FF64:  GOTO   FFDE (RETURN)
.................... }
.................... // End of file
.................... 
.................... #include "application/mmj_cigs_mode_mission.c"
.................... #include "mmj_cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_DEBUG 0xA3
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/mmj_cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/device/ad7490.h"                    // ADCライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/mmj_cigs_flash.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t flash_counter_table[];
.................... extern FlashCounter_t *flash_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/mmj_cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS IV\r\n");
*
09D58:  MOVLW  D6
09D5A:  MOVWF  FF6
09D5C:  MOVLW  14
09D5E:  MOVWF  FF7
09D60:  MOVLW  00
09D62:  MOVWF  FF8
09D64:  CALL   1F3E
....................    MEAS_IV_CMD cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
09D68:  MOVFF  22E,256
09D6C:  MOVFF  22D,255
09D70:  CALL   7E96
09D74:  MOVFF  02,03
09D78:  MOVF   01,W
09D7A:  MOVWF  FE1
09D7C:  MOVFF  03,FE2
09D80:  MOVLW  02
09D82:  MOVWF  FEA
09D84:  MOVLW  2F
09D86:  MOVWF  FE9
09D88:  MOVLW  0C
09D8A:  MOVWF  01
09D8C:  MOVFF  FE6,FEE
09D90:  DECFSZ 01,F
09D92:  GOTO   9D8C
....................    fprintf(PC, "\tSleepTime:        %04LX\r\n", cmd.sleep_time);
09D96:  MOVLW  EC
09D98:  MOVWF  FF6
09D9A:  MOVLW  14
09D9C:  MOVWF  FF7
09D9E:  MOVLW  00
09DA0:  MOVWF  FF8
09DA2:  MOVLW  13
09DA4:  MOVLB  B
09DA6:  MOVWF  x4A
09DA8:  MOVLB  0
09DAA:  CALL   1F74
09DAE:  MOVFF  231,B4B
09DB2:  MOVLW  37
09DB4:  MOVLB  B
09DB6:  MOVWF  x4C
09DB8:  MOVLB  0
09DBA:  CALL   2188
09DBE:  MOVFF  230,B4B
09DC2:  MOVLW  37
09DC4:  MOVLB  B
09DC6:  MOVWF  x4C
09DC8:  MOVLB  0
09DCA:  CALL   2188
09DCE:  MOVLW  0D
09DD0:  BTFSS  FA6.6
09DD2:  GOTO   9DD0
09DD6:  MOVLB  E
09DD8:  MOVWF  xF9
09DDA:  MOVLW  0A
09DDC:  MOVLB  0
09DDE:  BTFSS  FA6.6
09DE0:  GOTO   9DDE
09DE4:  MOVLB  E
09DE6:  MOVWF  xF9
....................    fprintf(PC, "\tCurrentThreshold: %04LX\r\n", cmd.curr_threshold);
09DE8:  MOVLW  08
09DEA:  MOVWF  FF6
09DEC:  MOVLW  15
09DEE:  MOVWF  FF7
09DF0:  MOVLW  00
09DF2:  MOVWF  FF8
09DF4:  MOVLW  13
09DF6:  MOVLB  B
09DF8:  MOVWF  x4A
09DFA:  MOVLB  0
09DFC:  CALL   1F74
09E00:  MOVFF  233,B4B
09E04:  MOVLW  37
09E06:  MOVLB  B
09E08:  MOVWF  x4C
09E0A:  MOVLB  0
09E0C:  CALL   2188
09E10:  MOVFF  232,B4B
09E14:  MOVLW  37
09E16:  MOVLB  B
09E18:  MOVWF  x4C
09E1A:  MOVLB  0
09E1C:  CALL   2188
09E20:  MOVLW  0D
09E22:  BTFSS  FA6.6
09E24:  GOTO   9E22
09E28:  MOVLB  E
09E2A:  MOVWF  xF9
09E2C:  MOVLW  0A
09E2E:  MOVLB  0
09E30:  BTFSS  FA6.6
09E32:  GOTO   9E30
09E36:  MOVLB  E
09E38:  MOVWF  xF9
....................    fprintf(PC, "\tPDThreshold:      %04LX\r\n", cmd.pd_threshold);
09E3A:  MOVLW  24
09E3C:  MOVWF  FF6
09E3E:  MOVLW  15
09E40:  MOVWF  FF7
09E42:  MOVLW  00
09E44:  MOVWF  FF8
09E46:  MOVLW  13
09E48:  MOVLB  B
09E4A:  MOVWF  x4A
09E4C:  MOVLB  0
09E4E:  CALL   1F74
09E52:  MOVFF  235,B4B
09E56:  MOVLW  37
09E58:  MOVLB  B
09E5A:  MOVWF  x4C
09E5C:  MOVLB  0
09E5E:  CALL   2188
09E62:  MOVFF  234,B4B
09E66:  MOVLW  37
09E68:  MOVLB  B
09E6A:  MOVWF  x4C
09E6C:  MOVLB  0
09E6E:  CALL   2188
09E72:  MOVLW  0D
09E74:  BTFSS  FA6.6
09E76:  GOTO   9E74
09E7A:  MOVLB  E
09E7C:  MOVWF  xF9
09E7E:  MOVLW  0A
09E80:  MOVLB  0
09E82:  BTFSS  FA6.6
09E84:  GOTO   9E82
09E88:  MOVLB  E
09E8A:  MOVWF  xF9
....................    fprintf(PC, "\tCurrentLimit:     %04LX\r\n", cmd.curr_limit);
09E8C:  MOVLW  40
09E8E:  MOVWF  FF6
09E90:  MOVLW  15
09E92:  MOVWF  FF7
09E94:  MOVLW  00
09E96:  MOVWF  FF8
09E98:  MOVLW  13
09E9A:  MOVLB  B
09E9C:  MOVWF  x4A
09E9E:  MOVLB  0
09EA0:  CALL   1F74
09EA4:  MOVFF  237,B4B
09EA8:  MOVLW  37
09EAA:  MOVLB  B
09EAC:  MOVWF  x4C
09EAE:  MOVLB  0
09EB0:  CALL   2188
09EB4:  MOVFF  236,B4B
09EB8:  MOVLW  37
09EBA:  MOVLB  B
09EBC:  MOVWF  x4C
09EBE:  MOVLB  0
09EC0:  CALL   2188
09EC4:  MOVLW  0D
09EC6:  BTFSS  FA6.6
09EC8:  GOTO   9EC6
09ECC:  MOVLB  E
09ECE:  MOVWF  xF9
09ED0:  MOVLW  0A
09ED2:  MOVLB  0
09ED4:  BTFSS  FA6.6
09ED6:  GOTO   9ED4
09EDA:  MOVLB  E
09EDC:  MOVWF  xF9
....................    fprintf(PC, "\tMeasurementTime:  %04LX\r\n", cmd.meas_time);
09EDE:  MOVLW  5C
09EE0:  MOVWF  FF6
09EE2:  MOVLW  15
09EE4:  MOVWF  FF7
09EE6:  MOVLW  00
09EE8:  MOVWF  FF8
09EEA:  MOVLW  13
09EEC:  MOVLB  B
09EEE:  MOVWF  x4A
09EF0:  MOVLB  0
09EF2:  CALL   1F74
09EF6:  MOVFF  239,B4B
09EFA:  MOVLW  37
09EFC:  MOVLB  B
09EFE:  MOVWF  x4C
09F00:  MOVLB  0
09F02:  CALL   2188
09F06:  MOVFF  238,B4B
09F0A:  MOVLW  37
09F0C:  MOVLB  B
09F0E:  MOVWF  x4C
09F10:  MOVLB  0
09F12:  CALL   2188
09F16:  MOVLW  0D
09F18:  BTFSS  FA6.6
09F1A:  GOTO   9F18
09F1E:  MOVLB  E
09F20:  MOVWF  xF9
09F22:  MOVLW  0A
09F24:  MOVLB  0
09F26:  BTFSS  FA6.6
09F28:  GOTO   9F26
09F2C:  MOVLB  E
09F2E:  MOVWF  xF9
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_START); // Log the start of the command execution
09F30:  MOVFF  22F,284
09F34:  MOVLB  2
09F36:  CLRF   x85
09F38:  MOVLB  0
09F3A:  CALL   4DAC
.................... 
....................    unsigned int32 start_time = get_current_sec();
....................    unsigned int32 current_sec = 0;
09F3E:  CALL   3864
09F42:  MOVFF  03,23E
09F46:  MOVFF  02,23D
09F4A:  MOVFF  01,23C
09F4E:  MOVFF  00,23B
09F52:  MOVLB  2
09F54:  CLRF   x42
09F56:  CLRF   x41
09F58:  CLRF   x40
09F5A:  CLRF   x3F
....................    
....................    sweep(cmd.curr_threshold, cmd.curr_limit, cmd.pd_threshold); // Perform the sweep with thresholds
09F5C:  MOVFF  233,250
09F60:  MOVFF  232,24F
09F64:  MOVFF  237,252
09F68:  MOVFF  236,251
09F6C:  MOVFF  235,254
09F70:  MOVFF  234,253
09F74:  MOVLB  0
09F76:  GOTO   874C
....................    delay_ms(cmd.sleep_time);
09F7A:  MOVFF  231,24F
09F7E:  MOVLB  2
09F80:  INCF   x4F,F
09F82:  MOVLB  0
09F84:  MOVLB  2
09F86:  DECFSZ x4F,F
09F88:  BRA    9F8E
09F8A:  MOVLB  0
09F8C:  BRA    9F9A
09F8E:  MOVLB  B
09F90:  SETF   xA6
09F92:  MOVLB  0
09F94:  CALL   1F10
09F98:  BRA    9F84
09F9A:  MOVFF  230,BA6
09F9E:  CALL   1F10
....................    /*
....................    while(get_current_sec() - start_time < cmd.meas_time)
....................    {
....................       sweep(cmd.curr_threshold, cmd.curr_limit, cmd.pd_threshold); // Perform the sweep with thresholds
....................       delay_ms(cmd.sleep_time);
....................    }
....................    */
....................    piclog_make(cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
09FA2:  MOVFF  22F,284
09FA6:  MOVLB  2
09FA8:  SETF   x85
09FAA:  MOVLB  0
09FAC:  CALL   4DAC
.................... 
.................... 
.................... 
....................    FlashOperationStruct data = {0};
09FB0:  MOVLB  2
09FB2:  CLRF   x43
09FB4:  CLRF   x44
09FB6:  CLRF   x45
09FB8:  CLRF   x46
09FBA:  CLRF   x47
09FBC:  CLRF   x48
09FBE:  CLRF   x49
09FC0:  CLRF   x4A
09FC2:  CLRF   x4B
09FC4:  CLRF   x4C
09FC6:  CLRF   x4D
09FC8:  CLRF   x4E
....................    data.func_type = ENUM_SMF_WRITE;
09FCA:  CLRF   x44
....................    data.mission_id = CIGS_IV1_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
09FCC:  MOVLW  04
09FCE:  MOVWF  x43
....................    data.write_mode = SMF_WRITE_CIRCULAR;
09FD0:  MOVLW  02
09FD2:  MOVWF  x45
....................    data.source_type = SOURCE_MISF_UNCOPIED;
09FD4:  BCF    x46.0
.................... 
.................... 
....................    fprintf(PC, "Enqueue Flash Operation\r\n");
09FD6:  MOVLW  78
09FD8:  MOVWF  FF6
09FDA:  MOVLW  15
09FDC:  MOVWF  FF7
09FDE:  MOVLW  00
09FE0:  MOVWF  FF8
09FE2:  MOVLB  0
09FE4:  CALL   1F3E
....................    fprintf(PC, "Mission ID:   %02X\r\n", data.mission_id);
09FE8:  MOVLW  92
09FEA:  MOVWF  FF6
09FEC:  MOVLW  15
09FEE:  MOVWF  FF7
09FF0:  MOVLW  00
09FF2:  MOVWF  FF8
09FF4:  MOVLW  0E
09FF6:  MOVLB  B
09FF8:  MOVWF  x4A
09FFA:  MOVLB  0
09FFC:  CALL   1F74
0A000:  MOVFF  243,B4B
0A004:  MOVLW  37
0A006:  MOVLB  B
0A008:  MOVWF  x4C
0A00A:  MOVLB  0
0A00C:  CALL   2188
0A010:  MOVLW  0D
0A012:  BTFSS  FA6.6
0A014:  GOTO   A012
0A018:  MOVLB  E
0A01A:  MOVWF  xF9
0A01C:  MOVLW  0A
0A01E:  MOVLB  0
0A020:  BTFSS  FA6.6
0A022:  GOTO   A020
0A026:  MOVLB  E
0A028:  MOVWF  xF9
....................    fprintf(PC, "Function Type:%02X\r\n", data.func_type);
0A02A:  MOVLW  A8
0A02C:  MOVWF  FF6
0A02E:  MOVLW  15
0A030:  MOVWF  FF7
0A032:  MOVLW  00
0A034:  MOVWF  FF8
0A036:  MOVLW  0E
0A038:  MOVLB  B
0A03A:  MOVWF  x4A
0A03C:  MOVLB  0
0A03E:  CALL   1F74
0A042:  MOVFF  244,B4B
0A046:  MOVLW  37
0A048:  MOVLB  B
0A04A:  MOVWF  x4C
0A04C:  MOVLB  0
0A04E:  CALL   2188
0A052:  MOVLW  0D
0A054:  BTFSS  FA6.6
0A056:  GOTO   A054
0A05A:  MOVLB  E
0A05C:  MOVWF  xF9
0A05E:  MOVLW  0A
0A060:  MOVLB  0
0A062:  BTFSS  FA6.6
0A064:  GOTO   A062
0A068:  MOVLB  E
0A06A:  MOVWF  xF9
....................    fprintf(PC, "Write Mode:   %02X\r\n", data.write_mode);
0A06C:  MOVLW  BE
0A06E:  MOVWF  FF6
0A070:  MOVLW  15
0A072:  MOVWF  FF7
0A074:  MOVLW  00
0A076:  MOVWF  FF8
0A078:  MOVLW  0E
0A07A:  MOVLB  B
0A07C:  MOVWF  x4A
0A07E:  MOVLB  0
0A080:  CALL   1F74
0A084:  MOVFF  245,B4B
0A088:  MOVLW  37
0A08A:  MOVLB  B
0A08C:  MOVWF  x4C
0A08E:  MOVLB  0
0A090:  CALL   2188
0A094:  MOVLW  0D
0A096:  BTFSS  FA6.6
0A098:  GOTO   A096
0A09C:  MOVLB  E
0A09E:  MOVWF  xF9
0A0A0:  MOVLW  0A
0A0A2:  MOVLB  0
0A0A4:  BTFSS  FA6.6
0A0A6:  GOTO   A0A4
0A0AA:  MOVLB  E
0A0AC:  MOVWF  xF9
....................    fprintf(PC, "Source Type:  %02X\r\n", data.source_type);
0A0AE:  MOVLW  00
0A0B0:  MOVLB  2
0A0B2:  BTFSC  x46.0
0A0B4:  MOVLW  01
0A0B6:  MOVWF  x4F
0A0B8:  MOVLW  D4
0A0BA:  MOVWF  FF6
0A0BC:  MOVLW  15
0A0BE:  MOVWF  FF7
0A0C0:  MOVLW  00
0A0C2:  MOVWF  FF8
0A0C4:  MOVLW  0E
0A0C6:  MOVLB  B
0A0C8:  MOVWF  x4A
0A0CA:  MOVLB  0
0A0CC:  CALL   1F74
0A0D0:  MOVFF  24F,B4B
0A0D4:  MOVLW  37
0A0D6:  MOVLB  B
0A0D8:  MOVWF  x4C
0A0DA:  MOVLB  0
0A0DC:  CALL   2188
0A0E0:  MOVLW  0D
0A0E2:  BTFSS  FA6.6
0A0E4:  GOTO   A0E2
0A0E8:  MOVLB  E
0A0EA:  MOVWF  xF9
0A0EC:  MOVLW  0A
0A0EE:  MOVLB  0
0A0F0:  BTFSS  FA6.6
0A0F2:  GOTO   A0F0
0A0F6:  MOVLB  E
0A0F8:  MOVWF  xF9
....................    fprintf(PC, "Start Address:%04X\r\n", data.misf_start_addr);
0A0FA:  MOVLW  EA
0A0FC:  MOVWF  FF6
0A0FE:  MOVLW  15
0A100:  MOVWF  FF7
0A102:  MOVLW  00
0A104:  MOVWF  FF8
0A106:  MOVLW  0E
0A108:  MOVLB  B
0A10A:  MOVWF  x4A
0A10C:  MOVLB  0
0A10E:  CALL   1F74
0A112:  MOVLW  02
0A114:  MOVLB  2
0A116:  MOVWF  x4F
0A118:  MOVLB  0
0A11A:  MOVLW  30
0A11C:  BTFSS  FA6.6
0A11E:  GOTO   A11C
0A122:  MOVLB  E
0A124:  MOVWF  xF9
0A126:  MOVLB  2
0A128:  DECFSZ x4F,F
0A12A:  BRA    A130
0A12C:  BRA    A136
0A12E:  MOVLB  0
0A130:  MOVLB  0
0A132:  GOTO   A11A
0A136:  MOVFF  247,B4B
0A13A:  MOVLW  37
0A13C:  MOVLB  B
0A13E:  MOVWF  x4C
0A140:  MOVLB  0
0A142:  CALL   2188
0A146:  MOVLW  0D
0A148:  BTFSS  FA6.6
0A14A:  GOTO   A148
0A14E:  MOVLB  E
0A150:  MOVWF  xF9
0A152:  MOVLW  0A
0A154:  MOVLB  0
0A156:  BTFSS  FA6.6
0A158:  GOTO   A156
0A15C:  MOVLB  E
0A15E:  MOVWF  xF9
....................    fprintf(PC, "Size:         %04X\r\n", flash_counter_table[CIGS_IV1_DATA].uncopied_counter);
0A160:  MOVLW  00
0A162:  MOVWF  FF6
0A164:  MOVLW  16
0A166:  MOVWF  FF7
0A168:  MOVLW  00
0A16A:  MOVWF  FF8
0A16C:  MOVLW  0E
0A16E:  MOVLB  B
0A170:  MOVWF  x4A
0A172:  MOVLB  0
0A174:  CALL   1F74
0A178:  MOVLW  02
0A17A:  MOVLB  2
0A17C:  MOVWF  x4F
0A17E:  MOVLB  0
0A180:  MOVLW  30
0A182:  BTFSS  FA6.6
0A184:  GOTO   A182
0A188:  MOVLB  E
0A18A:  MOVWF  xF9
0A18C:  MOVLB  2
0A18E:  DECFSZ x4F,F
0A190:  BRA    A196
0A192:  BRA    A19C
0A194:  MOVLB  0
0A196:  MOVLB  0
0A198:  GOTO   A180
0A19C:  MOVFF  15A,B4B
0A1A0:  MOVLW  37
0A1A2:  MOVLB  B
0A1A4:  MOVWF  x4C
0A1A6:  MOVLB  0
0A1A8:  CALL   2188
0A1AC:  MOVLW  0D
0A1AE:  BTFSS  FA6.6
0A1B0:  GOTO   A1AE
0A1B4:  MOVLB  E
0A1B6:  MOVWF  xF9
0A1B8:  MOVLW  0A
0A1BA:  MOVLB  0
0A1BC:  BTFSS  FA6.6
0A1BE:  GOTO   A1BC
0A1C2:  MOVLB  E
0A1C4:  MOVWF  xF9
.................... 
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0A1C6:  MOVLW  02
0A1C8:  MOVLB  2
0A1CA:  MOVWF  x50
0A1CC:  MOVLW  43
0A1CE:  MOVWF  x4F
0A1D0:  MOVLB  0
0A1D2:  GOTO   9ADC
.................... 
....................    fprintf(PC, "End MODE MEAS IV mission\r\n");
0A1D6:  MOVLW  16
0A1D8:  MOVWF  FF6
0A1DA:  MOVLW  16
0A1DC:  MOVWF  FF7
0A1DE:  MOVLW  00
0A1E0:  MOVWF  FF8
0A1E2:  CALL   1F3E
0A1E6:  GOTO   E326 (RETURN)
.................... }
.................... 
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE IV DEBUG\r\n");
*
0C330:  MOVLW  32
0C332:  MOVWF  FF6
0C334:  MOVLW  16
0C336:  MOVWF  FF7
0C338:  MOVLW  00
0C33A:  MOVWF  FF8
0C33C:  CALL   1F3E
.................... 
....................    MEAS_IV_CMD cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0C340:  MOVFF  22E,256
0C344:  MOVFF  22D,255
0C348:  CALL   7E96
0C34C:  MOVFF  02,03
0C350:  MOVF   01,W
0C352:  MOVWF  FE1
0C354:  MOVFF  03,FE2
0C358:  MOVLW  02
0C35A:  MOVWF  FEA
0C35C:  MOVLW  2F
0C35E:  MOVWF  FE9
0C360:  MOVLW  0C
0C362:  MOVWF  01
0C364:  MOVFF  FE6,FEE
0C368:  DECFSZ 01,F
0C36A:  GOTO   C364
.................... 
....................    fprintf(PC, "\tID: %02X\r\n", cmd.id);
0C36E:  MOVLW  48
0C370:  MOVWF  FF6
0C372:  MOVLW  16
0C374:  MOVWF  FF7
0C376:  MOVLW  00
0C378:  MOVWF  FF8
0C37A:  MOVLW  05
0C37C:  MOVLB  B
0C37E:  MOVWF  x4A
0C380:  MOVLB  0
0C382:  CALL   1F74
0C386:  MOVFF  22F,B4B
0C38A:  MOVLW  37
0C38C:  MOVLB  B
0C38E:  MOVWF  x4C
0C390:  MOVLB  0
0C392:  CALL   2188
0C396:  MOVLW  0D
0C398:  BTFSS  FA6.6
0C39A:  GOTO   C398
0C39E:  MOVLB  E
0C3A0:  MOVWF  xF9
0C3A2:  MOVLW  0A
0C3A4:  MOVLB  0
0C3A6:  BTFSS  FA6.6
0C3A8:  GOTO   C3A6
0C3AC:  MOVLB  E
0C3AE:  MOVWF  xF9
....................    fprintf(PC, "\tSleepTime:        0x%04X\r\n", cmd.sleep_time);
0C3B0:  MOVLW  54
0C3B2:  MOVWF  FF6
0C3B4:  MOVLW  16
0C3B6:  MOVWF  FF7
0C3B8:  MOVLW  00
0C3BA:  MOVWF  FF8
0C3BC:  MOVLW  15
0C3BE:  MOVLB  B
0C3C0:  MOVWF  x4A
0C3C2:  MOVLB  0
0C3C4:  CALL   1F74
0C3C8:  MOVLW  02
0C3CA:  MOVLB  2
0C3CC:  MOVWF  x43
0C3CE:  MOVLB  0
0C3D0:  MOVLW  30
0C3D2:  BTFSS  FA6.6
0C3D4:  GOTO   C3D2
0C3D8:  MOVLB  E
0C3DA:  MOVWF  xF9
0C3DC:  MOVLB  2
0C3DE:  DECFSZ x43,F
0C3E0:  BRA    C3E6
0C3E2:  BRA    C3EC
0C3E4:  MOVLB  0
0C3E6:  MOVLB  0
0C3E8:  GOTO   C3D0
0C3EC:  MOVFF  230,B4B
0C3F0:  MOVLW  37
0C3F2:  MOVLB  B
0C3F4:  MOVWF  x4C
0C3F6:  MOVLB  0
0C3F8:  CALL   2188
0C3FC:  MOVLW  0D
0C3FE:  BTFSS  FA6.6
0C400:  GOTO   C3FE
0C404:  MOVLB  E
0C406:  MOVWF  xF9
0C408:  MOVLW  0A
0C40A:  MOVLB  0
0C40C:  BTFSS  FA6.6
0C40E:  GOTO   C40C
0C412:  MOVLB  E
0C414:  MOVWF  xF9
....................    fprintf(PC, "\tLogCurrThreshold: 0x%04X\r\n", cmd.curr_threshold);
0C416:  MOVLW  70
0C418:  MOVWF  FF6
0C41A:  MOVLW  16
0C41C:  MOVWF  FF7
0C41E:  MOVLW  00
0C420:  MOVWF  FF8
0C422:  MOVLW  15
0C424:  MOVLB  B
0C426:  MOVWF  x4A
0C428:  MOVLB  0
0C42A:  CALL   1F74
0C42E:  MOVLW  02
0C430:  MOVLB  2
0C432:  MOVWF  x43
0C434:  MOVLB  0
0C436:  MOVLW  30
0C438:  BTFSS  FA6.6
0C43A:  GOTO   C438
0C43E:  MOVLB  E
0C440:  MOVWF  xF9
0C442:  MOVLB  2
0C444:  DECFSZ x43,F
0C446:  BRA    C44C
0C448:  BRA    C452
0C44A:  MOVLB  0
0C44C:  MOVLB  0
0C44E:  GOTO   C436
0C452:  MOVFF  232,B4B
0C456:  MOVLW  37
0C458:  MOVLB  B
0C45A:  MOVWF  x4C
0C45C:  MOVLB  0
0C45E:  CALL   2188
0C462:  MOVLW  0D
0C464:  BTFSS  FA6.6
0C466:  GOTO   C464
0C46A:  MOVLB  E
0C46C:  MOVWF  xF9
0C46E:  MOVLW  0A
0C470:  MOVLB  0
0C472:  BTFSS  FA6.6
0C474:  GOTO   C472
0C478:  MOVLB  E
0C47A:  MOVWF  xF9
....................    fprintf(PC, "\tPDThreshold:      0x%04X\r\n", cmd.pd_threshold);
0C47C:  MOVLW  8C
0C47E:  MOVWF  FF6
0C480:  MOVLW  16
0C482:  MOVWF  FF7
0C484:  MOVLW  00
0C486:  MOVWF  FF8
0C488:  MOVLW  15
0C48A:  MOVLB  B
0C48C:  MOVWF  x4A
0C48E:  MOVLB  0
0C490:  CALL   1F74
0C494:  MOVLW  02
0C496:  MOVLB  2
0C498:  MOVWF  x43
0C49A:  MOVLB  0
0C49C:  MOVLW  30
0C49E:  BTFSS  FA6.6
0C4A0:  GOTO   C49E
0C4A4:  MOVLB  E
0C4A6:  MOVWF  xF9
0C4A8:  MOVLB  2
0C4AA:  DECFSZ x43,F
0C4AC:  BRA    C4B2
0C4AE:  BRA    C4B8
0C4B0:  MOVLB  0
0C4B2:  MOVLB  0
0C4B4:  GOTO   C49C
0C4B8:  MOVFF  234,B4B
0C4BC:  MOVLW  37
0C4BE:  MOVLB  B
0C4C0:  MOVWF  x4C
0C4C2:  MOVLB  0
0C4C4:  CALL   2188
0C4C8:  MOVLW  0D
0C4CA:  BTFSS  FA6.6
0C4CC:  GOTO   C4CA
0C4D0:  MOVLB  E
0C4D2:  MOVWF  xF9
0C4D4:  MOVLW  0A
0C4D6:  MOVLB  0
0C4D8:  BTFSS  FA6.6
0C4DA:  GOTO   C4D8
0C4DE:  MOVLB  E
0C4E0:  MOVWF  xF9
....................    fprintf(PC, "\tCurrentLimit:     0x%04X\r\n", cmd.curr_limit);
0C4E2:  MOVLW  A8
0C4E4:  MOVWF  FF6
0C4E6:  MOVLW  16
0C4E8:  MOVWF  FF7
0C4EA:  MOVLW  00
0C4EC:  MOVWF  FF8
0C4EE:  MOVLW  15
0C4F0:  MOVLB  B
0C4F2:  MOVWF  x4A
0C4F4:  MOVLB  0
0C4F6:  CALL   1F74
0C4FA:  MOVLW  02
0C4FC:  MOVLB  2
0C4FE:  MOVWF  x43
0C500:  MOVLB  0
0C502:  MOVLW  30
0C504:  BTFSS  FA6.6
0C506:  GOTO   C504
0C50A:  MOVLB  E
0C50C:  MOVWF  xF9
0C50E:  MOVLB  2
0C510:  DECFSZ x43,F
0C512:  BRA    C518
0C514:  BRA    C51E
0C516:  MOVLB  0
0C518:  MOVLB  0
0C51A:  GOTO   C502
0C51E:  MOVFF  236,B4B
0C522:  MOVLW  37
0C524:  MOVLB  B
0C526:  MOVWF  x4C
0C528:  MOVLB  0
0C52A:  CALL   2188
0C52E:  MOVLW  0D
0C530:  BTFSS  FA6.6
0C532:  GOTO   C530
0C536:  MOVLB  E
0C538:  MOVWF  xF9
0C53A:  MOVLW  0A
0C53C:  MOVLB  0
0C53E:  BTFSS  FA6.6
0C540:  GOTO   C53E
0C544:  MOVLB  E
0C546:  MOVWF  xF9
....................    fprintf(PC, "\tMeasurementTime:  0x%04X\r\n", cmd.meas_time);
0C548:  MOVLW  C4
0C54A:  MOVWF  FF6
0C54C:  MOVLW  16
0C54E:  MOVWF  FF7
0C550:  MOVLW  00
0C552:  MOVWF  FF8
0C554:  MOVLW  15
0C556:  MOVLB  B
0C558:  MOVWF  x4A
0C55A:  MOVLB  0
0C55C:  CALL   1F74
0C560:  MOVLW  02
0C562:  MOVLB  2
0C564:  MOVWF  x43
0C566:  MOVLB  0
0C568:  MOVLW  30
0C56A:  BTFSS  FA6.6
0C56C:  GOTO   C56A
0C570:  MOVLB  E
0C572:  MOVWF  xF9
0C574:  MOVLB  2
0C576:  DECFSZ x43,F
0C578:  BRA    C57E
0C57A:  BRA    C584
0C57C:  MOVLB  0
0C57E:  MOVLB  0
0C580:  GOTO   C568
0C584:  MOVFF  238,B4B
0C588:  MOVLW  37
0C58A:  MOVLB  B
0C58C:  MOVWF  x4C
0C58E:  MOVLB  0
0C590:  CALL   2188
0C594:  MOVLW  0D
0C596:  BTFSS  FA6.6
0C598:  GOTO   C596
0C59C:  MOVLB  E
0C59E:  MOVWF  xF9
0C5A0:  MOVLW  0A
0C5A2:  MOVLB  0
0C5A4:  BTFSS  FA6.6
0C5A6:  GOTO   C5A4
0C5AA:  MOVLB  E
0C5AC:  MOVWF  xF9
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_START); // Log start
0C5AE:  MOVFF  22F,284
0C5B2:  MOVLB  2
0C5B4:  CLRF   x85
0C5B6:  MOVLB  0
0C5B8:  CALL   4DAC
.................... 
....................    unsigned int32 start_time = get_current_time_10ms();
....................    unsigned int32 current_time = 0;
0C5BC:  CALL   A1EA
0C5C0:  MOVFF  03,23E
0C5C4:  MOVFF  02,23D
0C5C8:  MOVFF  01,23C
0C5CC:  MOVFF  00,23B
0C5D0:  MOVLB  2
0C5D2:  CLRF   x42
0C5D4:  CLRF   x41
0C5D6:  CLRF   x40
0C5D8:  CLRF   x3F
....................    test_sweep(cmd.curr_threshold, cmd.curr_limit);
0C5DA:  MOVFF  233,244
0C5DE:  MOVFF  232,243
0C5E2:  MOVFF  237,246
0C5E6:  MOVFF  236,245
0C5EA:  MOVLB  0
0C5EC:  GOTO   AE34
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_END);
0C5F0:  MOVFF  22F,284
0C5F4:  MOVLB  2
0C5F6:  SETF   x85
0C5F8:  MOVLB  0
0C5FA:  CALL   4DAC
....................    fprintf(PC, "[IVDBG] End MODE IV DEBUG\r\n");
0C5FE:  MOVLW  E0
0C600:  MOVWF  FF6
0C602:  MOVLW  16
0C604:  MOVWF  FF7
0C606:  MOVLW  00
0C608:  MOVWF  FF8
0C60A:  CALL   1F3E
0C60E:  GOTO   E336 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 *uplinkcmd[])
.................... {
....................    MEAS_IV_CMD cmd;
....................    cmd.id = uplinkcmd[0];
*
07E96:  MOVLB  2
07E98:  MOVF   x55,W
07E9A:  MOVWF  FE9
07E9C:  MOVF   x56,W
07E9E:  MOVWF  FEA
07EA0:  MOVFF  FEF,257
....................    cmd.sleep_time = ((unsigned int16)uplinkcmd[1] << 8) | ((unsigned int16)uplinkcmd[2]);
07EA4:  MOVLW  01
07EA6:  ADDWF  x55,W
07EA8:  MOVWF  FE9
07EAA:  MOVLW  00
07EAC:  ADDWFC x56,W
07EAE:  MOVWF  FEA
07EB0:  MOVF   FEF,W
07EB2:  CLRF   x64
07EB4:  MOVWF  x63
07EB6:  MOVFF  263,264
07EBA:  CLRF   x63
07EBC:  MOVLW  02
07EBE:  ADDWF  x55,W
07EC0:  MOVWF  FE9
07EC2:  MOVLW  00
07EC4:  ADDWFC x56,W
07EC6:  MOVWF  FEA
07EC8:  MOVF   FEF,W
07ECA:  CLRF   03
07ECC:  IORWF  x63,W
07ECE:  MOVWF  x58
07ED0:  MOVF   03,W
07ED2:  IORWF  x64,W
07ED4:  MOVWF  x59
....................    cmd.curr_threshold = (unsigned int16)uplinkcmd[3]<< 4;
07ED6:  MOVLW  03
07ED8:  ADDWF  x55,W
07EDA:  MOVWF  FE9
07EDC:  MOVLW  00
07EDE:  ADDWFC x56,W
07EE0:  MOVWF  FEA
07EE2:  MOVF   FEF,W
07EE4:  CLRF   x64
07EE6:  MOVWF  x63
07EE8:  RLCF   x63,W
07EEA:  MOVWF  x5A
07EEC:  RLCF   x64,W
07EEE:  MOVWF  x5B
07EF0:  RLCF   x5A,F
07EF2:  RLCF   x5B,F
07EF4:  RLCF   x5A,F
07EF6:  RLCF   x5B,F
07EF8:  RLCF   x5A,F
07EFA:  RLCF   x5B,F
07EFC:  MOVLW  F0
07EFE:  ANDWF  x5A,F
....................    cmd.pd_threshold = (unsigned int16)uplinkcmd[4]<< 4;
07F00:  MOVLW  04
07F02:  ADDWF  x55,W
07F04:  MOVWF  FE9
07F06:  MOVLW  00
07F08:  ADDWFC x56,W
07F0A:  MOVWF  FEA
07F0C:  MOVF   FEF,W
07F0E:  CLRF   x64
07F10:  MOVWF  x63
07F12:  RLCF   x63,W
07F14:  MOVWF  x5C
07F16:  RLCF   x64,W
07F18:  MOVWF  x5D
07F1A:  RLCF   x5C,F
07F1C:  RLCF   x5D,F
07F1E:  RLCF   x5C,F
07F20:  RLCF   x5D,F
07F22:  RLCF   x5C,F
07F24:  RLCF   x5D,F
07F26:  MOVLW  F0
07F28:  ANDWF  x5C,F
....................    cmd.curr_limit = (unsigned int16)uplinkcmd[5]<< 4;
07F2A:  MOVLW  05
07F2C:  ADDWF  x55,W
07F2E:  MOVWF  FE9
07F30:  MOVLW  00
07F32:  ADDWFC x56,W
07F34:  MOVWF  FEA
07F36:  MOVF   FEF,W
07F38:  CLRF   x64
07F3A:  MOVWF  x63
07F3C:  RLCF   x63,W
07F3E:  MOVWF  x5E
07F40:  RLCF   x64,W
07F42:  MOVWF  x5F
07F44:  RLCF   x5E,F
07F46:  RLCF   x5F,F
07F48:  RLCF   x5E,F
07F4A:  RLCF   x5F,F
07F4C:  RLCF   x5E,F
07F4E:  RLCF   x5F,F
07F50:  MOVLW  F0
07F52:  ANDWF  x5E,F
....................    cmd.meas_time = ((unsigned int16)uplinkcmd[6] << 8) | ((unsigned int16)uplinkcmd[7]);
07F54:  MOVLW  06
07F56:  ADDWF  x55,W
07F58:  MOVWF  FE9
07F5A:  MOVLW  00
07F5C:  ADDWFC x56,W
07F5E:  MOVWF  FEA
07F60:  MOVF   FEF,W
07F62:  CLRF   x64
07F64:  MOVWF  x63
07F66:  MOVFF  263,264
07F6A:  CLRF   x63
07F6C:  MOVLW  07
07F6E:  ADDWF  x55,W
07F70:  MOVWF  FE9
07F72:  MOVLW  00
07F74:  ADDWFC x56,W
07F76:  MOVWF  FEA
07F78:  MOVF   FEF,W
07F7A:  CLRF   03
07F7C:  IORWF  x63,W
07F7E:  MOVWF  x60
07F80:  MOVF   03,W
07F82:  IORWF  x64,W
07F84:  MOVWF  x61
.................... //!  cmd.is_finished = uplinkcmd[8];
....................    return cmd;
07F86:  MOVLW  57
07F88:  MOVWF  01
07F8A:  MOVLW  02
07F8C:  MOVWF  02
07F8E:  MOVLB  0
07F90:  RETURN 0
.................... }
.................... 
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr)
*
0C612:  MOVLB  2
0C614:  CLRF   x30
0C616:  MOVLW  64
0C618:  MOVWF  x2F
0C61A:  SETF   x32
0C61C:  SETF   x31
0C61E:  MOVLB  0
0C620:  CALL   A1EA
0C624:  MOVFF  03,236
0C628:  MOVFF  02,235
0C62C:  MOVFF  01,234
0C630:  MOVFF  00,233
0C634:  MOVLB  2
0C636:  MOVF   x2F,W
0C638:  SUBWF  x33,W
0C63A:  MOVWF  x37
0C63C:  MOVF   x30,W
0C63E:  SUBWFB x34,W
0C640:  MOVWF  x38
0C642:  MOVLW  00
0C644:  SUBWFB x35,W
0C646:  MOVWF  x39
0C648:  MOVLW  00
0C64A:  SUBWFB x36,W
0C64C:  MOVWF  x3A
.................... {
....................    unsigned int16 interval = 100;   // 測定間隔 [秒]
....................    unsigned int16 end_time = 0xFFFF;
.................... 
....................    unsigned int32 current_time = get_current_time_10ms();
....................    unsigned int32 last_time = current_time - interval;  // 最初にすぐ測定するため
.................... 
....................    // loging data
....................    unsigned int8 logdata[6];
....................    unsigned int16 temp_top;
....................    unsigned int16 temp_bot;
....................    unsigned int16 temp_mis7;
....................    unsigned int16 PD;
.................... 
....................    // Flash Write 
....................    unsigned int32 write_address;
.................... 
....................    fprintf(PC, "temp_top, temp_bot, temp_mis7, pd\r\n");
0C64E:  MOVLW  FC
0C650:  MOVWF  FF6
0C652:  MOVLW  16
0C654:  MOVWF  FF7
0C656:  MOVLW  00
0C658:  MOVWF  FF8
0C65A:  MOVLB  0
0C65C:  CALL   1F3E
.................... 
....................    while (true) {
....................        current_time = get_current_time_10ms();
0C660:  CALL   A1EA
0C664:  MOVFF  03,236
0C668:  MOVFF  02,235
0C66C:  MOVFF  01,234
0C670:  MOVFF  00,233
.................... 
....................        // intervalごとに測定
....................        if ((current_time - last_time) >= interval) {
0C674:  MOVLB  2
0C676:  MOVF   x37,W
0C678:  SUBWF  x33,W
0C67A:  MOVWF  x51
0C67C:  MOVF   x38,W
0C67E:  SUBWFB x34,W
0C680:  MOVWF  x52
0C682:  MOVF   x39,W
0C684:  SUBWFB x35,W
0C686:  MOVWF  x53
0C688:  MOVF   x3A,W
0C68A:  SUBWFB x36,W
0C68C:  MOVWF  x54
0C68E:  MOVF   x54,F
0C690:  BTFSC  FD8.2
0C692:  BRA    C69A
0C694:  MOVLB  0
0C696:  GOTO   C6D6
0C69A:  MOVLB  0
0C69C:  MOVLB  2
0C69E:  MOVF   x53,F
0C6A0:  BTFSC  FD8.2
0C6A2:  BRA    C6AA
0C6A4:  MOVLB  0
0C6A6:  GOTO   C6D6
0C6AA:  MOVLB  0
0C6AC:  MOVLB  2
0C6AE:  MOVF   x30,W
0C6B0:  SUBWF  x52,W
0C6B2:  BTFSC  FD8.0
0C6B4:  BRA    C6BC
0C6B6:  MOVLB  0
0C6B8:  GOTO   CAE6
0C6BC:  MOVLB  0
0C6BE:  BTFSS  FD8.2
0C6C0:  GOTO   C6D6
0C6C4:  MOVLB  2
0C6C6:  MOVF   x2F,W
0C6C8:  SUBWF  x51,W
0C6CA:  BTFSC  FD8.0
0C6CC:  BRA    C6D4
0C6CE:  MOVLB  0
0C6D0:  GOTO   CAE6
0C6D4:  MOVLB  0
....................            last_time = current_time;
0C6D6:  MOVFF  236,23A
0C6DA:  MOVFF  235,239
0C6DE:  MOVFF  234,238
0C6E2:  MOVFF  233,237
.................... 
....................            // ★ 次の測定データ(6バイト)で64バイト境界を超えるか確認
....................            if (environment_data_ptr->reserve_counter1 + 6 > PACKET_SIZE) {
0C6E6:  MOVLW  09
0C6E8:  MOVLB  1
0C6EA:  ADDWF  x24,W
0C6EC:  MOVWF  FE9
0C6EE:  MOVLW  00
0C6F0:  ADDWFC x25,W
0C6F2:  MOVWF  FEA
0C6F4:  MOVLW  06
0C6F6:  ADDWF  FEF,W
0C6F8:  SUBLW  40
0C6FA:  BTFSS  FD8.0
0C6FC:  BRA    C704
0C6FE:  MOVLB  0
0C700:  GOTO   C81A
0C704:  MOVLB  0
....................                unsigned int8 bankdata[4] = {0};
0C706:  MOVLB  2
0C708:  CLRF   x4D
0C70A:  CLRF   x4E
0C70C:  CLRF   x4F
0C70E:  CLRF   x50
0C710:  MOVLB  0
....................                write_address = MISF_CIGS_ENVIRO_START + environment_data_ptr->used_counter;
0C712:  MOVLW  01
0C714:  MOVLB  1
0C716:  ADDWF  x24,W
0C718:  MOVWF  FE9
0C71A:  MOVLW  00
0C71C:  ADDWFC x25,W
0C71E:  MOVWF  FEA
0C720:  MOVFF  FEF,00
0C724:  MOVFF  FEC,01
0C728:  MOVFF  FEC,02
0C72C:  MOVFF  FEC,03
0C730:  MOVF   FED,F
0C732:  MOVF   FED,F
0C734:  MOVF   FED,F
0C736:  MOVF   00,W
0C738:  MOVLB  2
0C73A:  MOVWF  x49
0C73C:  MOVLW  10
0C73E:  ADDWF  01,W
0C740:  MOVWF  x4A
0C742:  MOVLW  28
0C744:  ADDWFC 02,W
0C746:  MOVWF  x4B
0C748:  MOVLW  00
0C74A:  ADDWFC 03,W
0C74C:  MOVWF  x4C
....................                write_data_bytes(mis_fm, write_address, bankdata, 4);
0C74E:  MOVFF  115,B91
0C752:  MOVFF  114,B90
0C756:  MOVFF  113,B8F
0C75A:  MOVFF  112,B8E
0C75E:  MOVFF  24C,B95
0C762:  MOVFF  24B,B94
0C766:  MOVFF  24A,B93
0C76A:  MOVFF  249,B92
0C76E:  MOVLW  02
0C770:  MOVLB  B
0C772:  MOVWF  x97
0C774:  MOVLW  4D
0C776:  MOVWF  x96
0C778:  CLRF   x99
0C77A:  MOVLW  04
0C77C:  MOVWF  x98
0C77E:  MOVLB  0
0C780:  CALL   3B7C
....................                environment_data_ptr->used_counter   += 4;
0C784:  MOVLW  01
0C786:  MOVLB  1
0C788:  ADDWF  x24,W
0C78A:  MOVWF  FE9
0C78C:  MOVLW  00
0C78E:  ADDWFC x25,W
0C790:  MOVWF  FEA
0C792:  MOVLW  04
0C794:  ADDWF  FEF,W
0C796:  MOVWF  00
0C798:  MOVLW  00
0C79A:  ADDWFC FEC,W
0C79C:  MOVWF  01
0C79E:  MOVLW  00
0C7A0:  ADDWFC FEC,W
0C7A2:  MOVWF  02
0C7A4:  MOVLW  00
0C7A6:  ADDWFC FEC,W
0C7A8:  MOVWF  03
0C7AA:  MOVF   FED,F
0C7AC:  MOVF   FED,F
0C7AE:  MOVF   FED,F
0C7B0:  MOVFF  00,FEF
0C7B4:  MOVFF  01,FEC
0C7B8:  MOVFF  02,FEC
0C7BC:  MOVFF  03,FEC
0C7C0:  MOVF   FED,F
0C7C2:  MOVF   FED,F
0C7C4:  MOVF   FED,F
....................                environment_data_ptr->uncopied_counter += 4;
0C7C6:  MOVLW  05
0C7C8:  ADDWF  x24,W
0C7CA:  MOVWF  FE9
0C7CC:  MOVLW  00
0C7CE:  ADDWFC x25,W
0C7D0:  MOVWF  FEA
0C7D2:  MOVLW  04
0C7D4:  ADDWF  FEF,W
0C7D6:  MOVWF  00
0C7D8:  MOVLW  00
0C7DA:  ADDWFC FEC,W
0C7DC:  MOVWF  01
0C7DE:  MOVLW  00
0C7E0:  ADDWFC FEC,W
0C7E2:  MOVWF  02
0C7E4:  MOVLW  00
0C7E6:  ADDWFC FEC,W
0C7E8:  MOVWF  03
0C7EA:  MOVF   FED,F
0C7EC:  MOVF   FED,F
0C7EE:  MOVF   FED,F
0C7F0:  MOVFF  00,FEF
0C7F4:  MOVFF  01,FEC
0C7F8:  MOVFF  02,FEC
0C7FC:  MOVFF  03,FEC
0C800:  MOVF   FED,F
0C802:  MOVF   FED,F
0C804:  MOVF   FED,F
....................                environment_data_ptr->reserve_counter1 = 0;
0C806:  MOVLW  09
0C808:  ADDWF  x24,W
0C80A:  MOVWF  FE9
0C80C:  MOVLW  00
0C80E:  ADDWFC x25,W
0C810:  MOVWF  FEA
0C812:  CLRF   FEF
....................                misf_update_address_area();
0C814:  MOVLB  0
0C816:  CALL   43B8
....................            }
.................... 
....................            // 環境データ読み取り
....................            temp_top  = ad7490_read(ADC_TEMP_PY_TOP);
0C81A:  MOVLW  0D
0C81C:  MOVLB  A
0C81E:  MOVWF  x75
0C820:  MOVLB  0
0C822:  CALL   20FC
0C826:  MOVFF  02,242
0C82A:  MOVFF  01,241
....................            temp_bot  = ad7490_read(ADC_TEMP_PY_BOT);
0C82E:  MOVLW  0E
0C830:  MOVLB  A
0C832:  MOVWF  x75
0C834:  MOVLB  0
0C836:  CALL   20FC
0C83A:  MOVFF  02,244
0C83E:  MOVFF  01,243
....................            temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
0C842:  MOVLW  0C
0C844:  MOVLB  A
0C846:  MOVWF  x75
0C848:  MOVLB  0
0C84A:  CALL   20FC
0C84E:  MOVFF  02,246
0C852:  MOVFF  01,245
....................            PD        = ad7490_read(ADC_PD);
0C856:  MOVLW  0F
0C858:  MOVLB  A
0C85A:  MOVWF  x75
0C85C:  MOVLB  0
0C85E:  CALL   20FC
0C862:  MOVFF  02,248
0C866:  MOVFF  01,247
.................... 
....................            logdata[0] = (temp_top >> 4) & 0xFF;
0C86A:  MOVLB  2
0C86C:  RRCF   x42,W
0C86E:  MOVWF  x52
0C870:  RRCF   x41,W
0C872:  MOVWF  x51
0C874:  RRCF   x52,F
0C876:  RRCF   x51,F
0C878:  RRCF   x52,F
0C87A:  RRCF   x51,F
0C87C:  RRCF   x52,F
0C87E:  RRCF   x51,F
0C880:  MOVLW  0F
0C882:  ANDWF  x52,F
0C884:  MOVF   x51,W
0C886:  MOVWF  x3B
....................            logdata[1] = ((temp_top & 0x0F) << 4) | ((temp_bot >> 8) & 0x0F);
0C888:  MOVF   x41,W
0C88A:  ANDLW  0F
0C88C:  MOVWF  x51
0C88E:  CLRF   x52
0C890:  RLCF   x51,F
0C892:  RLCF   x52,F
0C894:  RLCF   x51,F
0C896:  RLCF   x52,F
0C898:  RLCF   x51,F
0C89A:  RLCF   x52,F
0C89C:  RLCF   x51,F
0C89E:  RLCF   x52,F
0C8A0:  MOVLW  F0
0C8A2:  ANDWF  x51,F
0C8A4:  MOVFF  244,253
0C8A8:  CLRF   x54
0C8AA:  MOVF   x53,W
0C8AC:  ANDLW  0F
0C8AE:  MOVWF  00
0C8B0:  CLRF   03
0C8B2:  MOVF   00,W
0C8B4:  IORWF  x51,W
0C8B6:  MOVWF  x3C
....................            logdata[2] = temp_bot & 0xFF;
0C8B8:  MOVF   x43,W
0C8BA:  MOVWF  x3D
....................            logdata[3] = (temp_mis7 >> 4) & 0xFF;
0C8BC:  RRCF   x46,W
0C8BE:  MOVWF  x52
0C8C0:  RRCF   x45,W
0C8C2:  MOVWF  x51
0C8C4:  RRCF   x52,F
0C8C6:  RRCF   x51,F
0C8C8:  RRCF   x52,F
0C8CA:  RRCF   x51,F
0C8CC:  RRCF   x52,F
0C8CE:  RRCF   x51,F
0C8D0:  MOVLW  0F
0C8D2:  ANDWF  x52,F
0C8D4:  MOVF   x51,W
0C8D6:  MOVWF  x3E
....................            logdata[4] = temp_mis7 & 0xFF;
0C8D8:  MOVF   x45,W
0C8DA:  MOVWF  x3F
....................            logdata[5] = PD & 0xFF;
0C8DC:  MOVF   x47,W
0C8DE:  MOVWF  x40
.................... 
....................            // 書き込み
....................            write_address = MISF_CIGS_ENVIRO_START + environment_data_ptr->used_counter;
0C8E0:  MOVLW  01
0C8E2:  MOVLB  1
0C8E4:  ADDWF  x24,W
0C8E6:  MOVWF  FE9
0C8E8:  MOVLW  00
0C8EA:  ADDWFC x25,W
0C8EC:  MOVWF  FEA
0C8EE:  MOVFF  FEF,00
0C8F2:  MOVFF  FEC,01
0C8F6:  MOVFF  FEC,02
0C8FA:  MOVFF  FEC,03
0C8FE:  MOVF   FED,F
0C900:  MOVF   FED,F
0C902:  MOVF   FED,F
0C904:  MOVF   00,W
0C906:  MOVLB  2
0C908:  MOVWF  x49
0C90A:  MOVLW  10
0C90C:  ADDWF  01,W
0C90E:  MOVWF  x4A
0C910:  MOVLW  28
0C912:  ADDWFC 02,W
0C914:  MOVWF  x4B
0C916:  MOVLW  00
0C918:  ADDWFC 03,W
0C91A:  MOVWF  x4C
....................            write_data_bytes(mis_fm, write_address, logdata, 6);
0C91C:  MOVFF  115,B91
0C920:  MOVFF  114,B90
0C924:  MOVFF  113,B8F
0C928:  MOVFF  112,B8E
0C92C:  MOVFF  24C,B95
0C930:  MOVFF  24B,B94
0C934:  MOVFF  24A,B93
0C938:  MOVFF  249,B92
0C93C:  MOVLW  02
0C93E:  MOVLB  B
0C940:  MOVWF  x97
0C942:  MOVLW  3B
0C944:  MOVWF  x96
0C946:  CLRF   x99
0C948:  MOVLW  06
0C94A:  MOVWF  x98
0C94C:  MOVLB  0
0C94E:  CALL   3B7C
....................            environment_data_ptr->used_counter   += 6;
0C952:  MOVLW  01
0C954:  MOVLB  1
0C956:  ADDWF  x24,W
0C958:  MOVWF  FE9
0C95A:  MOVLW  00
0C95C:  ADDWFC x25,W
0C95E:  MOVWF  FEA
0C960:  MOVLW  06
0C962:  ADDWF  FEF,W
0C964:  MOVWF  00
0C966:  MOVLW  00
0C968:  ADDWFC FEC,W
0C96A:  MOVWF  01
0C96C:  MOVLW  00
0C96E:  ADDWFC FEC,W
0C970:  MOVWF  02
0C972:  MOVLW  00
0C974:  ADDWFC FEC,W
0C976:  MOVWF  03
0C978:  MOVF   FED,F
0C97A:  MOVF   FED,F
0C97C:  MOVF   FED,F
0C97E:  MOVFF  00,FEF
0C982:  MOVFF  01,FEC
0C986:  MOVFF  02,FEC
0C98A:  MOVFF  03,FEC
0C98E:  MOVF   FED,F
0C990:  MOVF   FED,F
0C992:  MOVF   FED,F
....................            environment_data_ptr->uncopied_counter += 6;
0C994:  MOVLW  05
0C996:  ADDWF  x24,W
0C998:  MOVWF  FE9
0C99A:  MOVLW  00
0C99C:  ADDWFC x25,W
0C99E:  MOVWF  FEA
0C9A0:  MOVLW  06
0C9A2:  ADDWF  FEF,W
0C9A4:  MOVWF  00
0C9A6:  MOVLW  00
0C9A8:  ADDWFC FEC,W
0C9AA:  MOVWF  01
0C9AC:  MOVLW  00
0C9AE:  ADDWFC FEC,W
0C9B0:  MOVWF  02
0C9B2:  MOVLW  00
0C9B4:  ADDWFC FEC,W
0C9B6:  MOVWF  03
0C9B8:  MOVF   FED,F
0C9BA:  MOVF   FED,F
0C9BC:  MOVF   FED,F
0C9BE:  MOVFF  00,FEF
0C9C2:  MOVFF  01,FEC
0C9C6:  MOVFF  02,FEC
0C9CA:  MOVFF  03,FEC
0C9CE:  MOVF   FED,F
0C9D0:  MOVF   FED,F
0C9D2:  MOVF   FED,F
....................            environment_data_ptr->reserve_counter1 += 6;
0C9D4:  MOVLW  09
0C9D6:  ADDWF  x24,W
0C9D8:  MOVWF  FE9
0C9DA:  MOVLW  00
0C9DC:  ADDWFC x25,W
0C9DE:  MOVWF  FEA
0C9E0:  MOVLW  06
0C9E2:  ADDWF  FEF,W
0C9E4:  MOVWF  FEF
....................            fprintf(PC, "0x%04LX, 0x%04LX, 0x%04LX, 0x%04LX\r\n", temp_top, temp_bot, temp_mis7, PD);
0C9E6:  MOVLW  30
0C9E8:  MOVLB  0
0C9EA:  BTFSS  FA6.6
0C9EC:  GOTO   C9EA
0C9F0:  MOVLB  E
0C9F2:  MOVWF  xF9
0C9F4:  MOVLW  78
0C9F6:  MOVLB  0
0C9F8:  BTFSS  FA6.6
0C9FA:  GOTO   C9F8
0C9FE:  MOVLB  E
0CA00:  MOVWF  xF9
0CA02:  MOVFF  242,B4B
0CA06:  MOVLW  37
0CA08:  MOVLB  B
0CA0A:  MOVWF  x4C
0CA0C:  MOVLB  0
0CA0E:  CALL   2188
0CA12:  MOVFF  241,B4B
0CA16:  MOVLW  37
0CA18:  MOVLB  B
0CA1A:  MOVWF  x4C
0CA1C:  MOVLB  0
0CA1E:  CALL   2188
0CA22:  MOVLW  27
0CA24:  MOVWF  FF6
0CA26:  MOVLW  17
0CA28:  MOVWF  FF7
0CA2A:  MOVLW  00
0CA2C:  MOVWF  FF8
0CA2E:  MOVLW  04
0CA30:  MOVLB  B
0CA32:  MOVWF  x4A
0CA34:  MOVLB  0
0CA36:  CALL   1F74
0CA3A:  MOVFF  244,B4B
0CA3E:  MOVLW  37
0CA40:  MOVLB  B
0CA42:  MOVWF  x4C
0CA44:  MOVLB  0
0CA46:  CALL   2188
0CA4A:  MOVFF  243,B4B
0CA4E:  MOVLW  37
0CA50:  MOVLB  B
0CA52:  MOVWF  x4C
0CA54:  MOVLB  0
0CA56:  CALL   2188
0CA5A:  MOVLW  30
0CA5C:  MOVWF  FF6
0CA5E:  MOVLW  17
0CA60:  MOVWF  FF7
0CA62:  MOVLW  00
0CA64:  MOVWF  FF8
0CA66:  MOVLW  04
0CA68:  MOVLB  B
0CA6A:  MOVWF  x4A
0CA6C:  MOVLB  0
0CA6E:  CALL   1F74
0CA72:  MOVFF  246,B4B
0CA76:  MOVLW  37
0CA78:  MOVLB  B
0CA7A:  MOVWF  x4C
0CA7C:  MOVLB  0
0CA7E:  CALL   2188
0CA82:  MOVFF  245,B4B
0CA86:  MOVLW  37
0CA88:  MOVLB  B
0CA8A:  MOVWF  x4C
0CA8C:  MOVLB  0
0CA8E:  CALL   2188
0CA92:  MOVLW  39
0CA94:  MOVWF  FF6
0CA96:  MOVLW  17
0CA98:  MOVWF  FF7
0CA9A:  MOVLW  00
0CA9C:  MOVWF  FF8
0CA9E:  MOVLW  04
0CAA0:  MOVLB  B
0CAA2:  MOVWF  x4A
0CAA4:  MOVLB  0
0CAA6:  CALL   1F74
0CAAA:  MOVFF  248,B4B
0CAAE:  MOVLW  37
0CAB0:  MOVLB  B
0CAB2:  MOVWF  x4C
0CAB4:  MOVLB  0
0CAB6:  CALL   2188
0CABA:  MOVFF  247,B4B
0CABE:  MOVLW  37
0CAC0:  MOVLB  B
0CAC2:  MOVWF  x4C
0CAC4:  MOVLB  0
0CAC6:  CALL   2188
0CACA:  MOVLW  0D
0CACC:  BTFSS  FA6.6
0CACE:  GOTO   CACC
0CAD2:  MOVLB  E
0CAD4:  MOVWF  xF9
0CAD6:  MOVLW  0A
0CAD8:  MOVLB  0
0CADA:  BTFSS  FA6.6
0CADC:  GOTO   CADA
0CAE0:  MOVLB  E
0CAE2:  MOVWF  xF9
0CAE4:  MOVLB  0
....................        }
.................... 
....................        delay_ms(1);  // 過負荷防止用
0CAE6:  MOVLW  01
0CAE8:  MOVLB  B
0CAEA:  MOVWF  xA6
0CAEC:  MOVLB  0
0CAEE:  CALL   1F10
0CAF2:  GOTO   C660
....................    }
0CAF6:  GOTO   E346 (RETURN)
.................... }
.................... 
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS ENV DEBUG\r\n");
0CAFA:  MOVLW  46
0CAFC:  MOVWF  FF6
0CAFE:  MOVLW  17
0CB00:  MOVWF  FF7
0CB02:  MOVLW  00
0CB04:  MOVWF  FF8
0CB06:  CALL   1F3E
....................    // Add debug-specific implementation here
....................    fprintf(PC, "End MODE MEAS ENV DEBUG\r\n");
0CB0A:  MOVLW  62
0CB0C:  MOVWF  FF6
0CB0E:  MOVLW  17
0CB10:  MOVWF  FF7
0CB12:  MOVLW  00
0CB14:  MOVWF  FF8
0CB16:  CALL   1F3E
0CB1A:  GOTO   E356 (RETURN)
.................... }
.................... 
.................... #include "application/mmj_cigs_mode_flash.c"
.................... #include "mmj_cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/mmj_cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../domain/mmj_cigs_flash.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t flash_counter_table[];
.................... extern FlashCounter_t *flash_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/mmj_cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... 
.................... // ========================== MISF Command ============================
.................... void mode_misf_erase_all(int8 parameter[])
.................... {
....................    printf("Start Flash Erase All\r\n");
*
055D2:  MOVLW  7C
055D4:  MOVWF  FF6
055D6:  MOVLW  17
055D8:  MOVWF  FF7
055DA:  MOVLW  00
055DC:  MOVWF  FF8
055DE:  CALL   1F3E
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
055E2:  MOVLB  2
055E4:  MOVF   x2F,W
055E6:  MOVWF  FE9
055E8:  MOVF   x30,W
055EA:  MOVWF  FEA
055EC:  MOVFF  FEF,231
....................    piclog_make(cmd, 0x00); // Log the command execution
055F0:  MOVFF  231,284
055F4:  CLRF   x85
055F6:  MOVLB  0
055F8:  CALL   4DAC
....................    
....................    for (int32 address = MISF_START; address < MISF_END; address += SECTOR_64K_BYTE) {
055FC:  MOVLB  2
055FE:  CLRF   x35
05600:  CLRF   x34
05602:  CLRF   x33
05604:  CLRF   x32
05606:  MOVLB  0
05608:  MOVLB  2
0560A:  MOVF   x35,F
0560C:  BTFSC  FD8.2
0560E:  BRA    5616
05610:  MOVLB  0
05612:  GOTO   568E
05616:  MOVLB  0
05618:  MOVLB  2
0561A:  MOVF   x34,W
0561C:  SUBLW  BC
0561E:  BTFSC  FD8.0
05620:  BRA    5628
05622:  MOVLB  0
05624:  GOTO   568E
05628:  MOVLB  0
0562A:  BTFSS  FD8.2
0562C:  GOTO   565A
05630:  MOVLB  2
05632:  MOVF   x33,W
05634:  SUBLW  0F
05636:  BTFSC  FD8.0
05638:  BRA    5640
0563A:  MOVLB  0
0563C:  GOTO   568E
05640:  MOVLB  0
05642:  BTFSS  FD8.2
05644:  GOTO   565A
05648:  MOVLB  2
0564A:  MOVF   x32,W
0564C:  SUBLW  FE
0564E:  BTFSC  FD8.0
05650:  BRA    5658
05652:  MOVLB  0
05654:  GOTO   568E
05658:  MOVLB  0
....................       sector_erase(mis_fm, address); // Erase each sector
0565A:  MOVFF  115,B8F
0565E:  MOVFF  114,B8E
05662:  MOVFF  113,B8D
05666:  MOVFF  112,B8C
0566A:  MOVFF  235,B93
0566E:  MOVFF  234,B92
05672:  MOVFF  233,B91
05676:  MOVFF  232,B90
0567A:  CALL   4060
0567E:  MOVLW  01
05680:  MOVLB  2
05682:  ADDWF  x34,F
05684:  MOVLW  00
05686:  ADDWFC x35,F
05688:  MOVLB  0
0568A:  GOTO   5608
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
0568E:  MOVFF  231,284
05692:  MOVLB  2
05694:  SETF   x85
05696:  MOVLB  0
05698:  CALL   4DAC
....................    printf("End Flash Erase All\r\n");
0569C:  MOVLW  94
0569E:  MOVWF  FF6
056A0:  MOVLW  17
056A2:  MOVWF  FF7
056A4:  MOVLW  00
056A6:  MOVWF  FF8
056A8:  CALL   1F3E
056AC:  RETURN 0
.................... }
.................... 
.................... void mode_misf_erase_1sector(int8 parameter[])
.................... {
....................    printf("Start Flash Erase 1 Sector\r\n");
056AE:  MOVLW  AA
056B0:  MOVWF  FF6
056B2:  MOVLW  17
056B4:  MOVWF  FF7
056B6:  MOVLW  00
056B8:  MOVWF  FF8
056BA:  CALL   1F3E
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    int32 sector_address = 
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
056BE:  MOVLB  2
056C0:  MOVF   x2D,W
056C2:  MOVWF  FE9
056C4:  MOVF   x2E,W
056C6:  MOVWF  FEA
056C8:  MOVFF  FEF,22F
056CC:  MOVLW  01
056CE:  ADDWF  x2D,W
056D0:  MOVWF  FE9
056D2:  MOVLW  00
056D4:  ADDWFC x2E,W
056D6:  MOVWF  FEA
056D8:  MOVF   FEF,W
056DA:  CLRF   x37
056DC:  CLRF   x36
056DE:  CLRF   x35
056E0:  MOVWF  x34
056E2:  MOVFF  234,237
056E6:  CLRF   x34
056E8:  CLRF   x35
056EA:  CLRF   x36
056EC:  MOVLW  02
056EE:  ADDWF  x2D,W
056F0:  MOVWF  FE9
056F2:  MOVLW  00
056F4:  ADDWFC x2E,W
056F6:  MOVWF  FEA
056F8:  MOVF   FEF,W
056FA:  CLRF   x3C
056FC:  CLRF   x3B
056FE:  CLRF   x3A
05700:  MOVWF  x39
05702:  MOVFF  23A,03
05706:  MOVFF  239,02
0570A:  CLRF   00
0570C:  CLRF   01
0570E:  MOVF   00,W
05710:  IORWF  x34,F
05712:  MOVF   01,W
05714:  IORWF  x35,F
05716:  MOVF   02,W
05718:  IORWF  x36,F
0571A:  MOVF   03,W
0571C:  IORWF  x37,F
0571E:  MOVLW  03
05720:  ADDWF  x2D,W
05722:  MOVWF  FE9
05724:  MOVLW  00
05726:  ADDWFC x2E,W
05728:  MOVWF  FEA
0572A:  MOVF   FEF,W
0572C:  CLRF   x3C
0572E:  CLRF   x3B
05730:  CLRF   x3A
05732:  MOVWF  x39
05734:  MOVFF  23B,03
05738:  MOVFF  23A,02
0573C:  MOVFF  239,01
05740:  CLRF   00
05742:  MOVF   00,W
05744:  IORWF  x34,F
05746:  MOVF   01,W
05748:  IORWF  x35,F
0574A:  MOVF   02,W
0574C:  IORWF  x36,F
0574E:  MOVF   03,W
05750:  IORWF  x37,F
05752:  MOVLW  04
05754:  ADDWF  x2D,W
05756:  MOVWF  FE9
05758:  MOVLW  00
0575A:  ADDWFC x2E,W
0575C:  MOVWF  FEA
0575E:  MOVF   FEF,W
05760:  MOVWF  00
05762:  CLRF   01
05764:  CLRF   02
05766:  CLRF   03
05768:  MOVF   00,W
0576A:  IORWF  x34,W
0576C:  MOVWF  x30
0576E:  MOVF   01,W
05770:  IORWF  x35,W
05772:  MOVWF  x31
05774:  MOVF   02,W
05776:  IORWF  x36,W
05778:  MOVWF  x32
0577A:  MOVF   03,W
0577C:  IORWF  x37,W
0577E:  MOVWF  x33
.................... 
....................    printf("\tSector Address: 0x%08LX\r\n", sector_address);
05780:  MOVLW  C8
05782:  MOVWF  FF6
05784:  MOVLW  17
05786:  MOVWF  FF7
05788:  MOVLW  00
0578A:  MOVWF  FF8
0578C:  MOVLW  13
0578E:  MOVLB  B
05790:  MOVWF  x4A
05792:  MOVLB  0
05794:  CALL   1F74
05798:  MOVFF  233,B4B
0579C:  MOVLW  37
0579E:  MOVLB  B
057A0:  MOVWF  x4C
057A2:  MOVLB  0
057A4:  CALL   2188
057A8:  MOVFF  232,B4B
057AC:  MOVLW  37
057AE:  MOVLB  B
057B0:  MOVWF  x4C
057B2:  MOVLB  0
057B4:  CALL   2188
057B8:  MOVFF  231,B4B
057BC:  MOVLW  37
057BE:  MOVLB  B
057C0:  MOVWF  x4C
057C2:  MOVLB  0
057C4:  CALL   2188
057C8:  MOVFF  230,B4B
057CC:  MOVLW  37
057CE:  MOVLB  B
057D0:  MOVWF  x4C
057D2:  MOVLB  0
057D4:  CALL   2188
057D8:  MOVLW  0D
057DA:  BTFSS  FA6.6
057DC:  GOTO   57DA
057E0:  MOVLB  E
057E2:  MOVWF  xF9
057E4:  MOVLW  0A
057E6:  MOVLB  0
057E8:  BTFSS  FA6.6
057EA:  GOTO   57E8
057EE:  MOVLB  E
057F0:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
057F2:  MOVFF  22F,284
057F6:  MOVLB  2
057F8:  CLRF   x85
057FA:  MOVLB  0
057FC:  CALL   4DAC
....................    
....................    sector_erase(mis_fm, sector_address);
05800:  MOVFF  115,B8F
05804:  MOVFF  114,B8E
05808:  MOVFF  113,B8D
0580C:  MOVFF  112,B8C
05810:  MOVFF  233,B93
05814:  MOVFF  232,B92
05818:  MOVFF  231,B91
0581C:  MOVFF  230,B90
05820:  CALL   4060
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05824:  MOVFF  22F,284
05828:  MOVLB  2
0582A:  SETF   x85
0582C:  MOVLB  0
0582E:  CALL   4DAC
....................    printf("End Flash Erase 1 Sector\r\n");
05832:  MOVLW  E4
05834:  MOVWF  FF6
05836:  MOVLW  17
05838:  MOVWF  FF7
0583A:  MOVLW  00
0583C:  MOVWF  FF8
0583E:  CALL   1F3E
05842:  GOTO   E236 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_4kbyte_subsector(int8 parameter[])
.................... {
....................    printf("Start Flash Erase 4kByte Subsector\r\n");
*
05BA2:  MOVLW  00
05BA4:  MOVWF  FF6
05BA6:  MOVLW  18
05BA8:  MOVWF  FF7
05BAA:  MOVLW  00
05BAC:  MOVWF  FF8
05BAE:  CALL   1F3E
....................    int8 cmd = parameter[0];
....................    int32 subsector_address =
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
05BB2:  MOVLB  2
05BB4:  MOVF   x2D,W
05BB6:  MOVWF  FE9
05BB8:  MOVF   x2E,W
05BBA:  MOVWF  FEA
05BBC:  MOVFF  FEF,22F
05BC0:  MOVLW  01
05BC2:  ADDWF  x2D,W
05BC4:  MOVWF  FE9
05BC6:  MOVLW  00
05BC8:  ADDWFC x2E,W
05BCA:  MOVWF  FEA
05BCC:  MOVF   FEF,W
05BCE:  CLRF   x37
05BD0:  CLRF   x36
05BD2:  CLRF   x35
05BD4:  MOVWF  x34
05BD6:  MOVFF  234,237
05BDA:  CLRF   x34
05BDC:  CLRF   x35
05BDE:  CLRF   x36
05BE0:  MOVLW  02
05BE2:  ADDWF  x2D,W
05BE4:  MOVWF  FE9
05BE6:  MOVLW  00
05BE8:  ADDWFC x2E,W
05BEA:  MOVWF  FEA
05BEC:  MOVF   FEF,W
05BEE:  CLRF   x3C
05BF0:  CLRF   x3B
05BF2:  CLRF   x3A
05BF4:  MOVWF  x39
05BF6:  MOVFF  23A,03
05BFA:  MOVFF  239,02
05BFE:  CLRF   00
05C00:  CLRF   01
05C02:  MOVF   00,W
05C04:  IORWF  x34,F
05C06:  MOVF   01,W
05C08:  IORWF  x35,F
05C0A:  MOVF   02,W
05C0C:  IORWF  x36,F
05C0E:  MOVF   03,W
05C10:  IORWF  x37,F
05C12:  MOVLW  03
05C14:  ADDWF  x2D,W
05C16:  MOVWF  FE9
05C18:  MOVLW  00
05C1A:  ADDWFC x2E,W
05C1C:  MOVWF  FEA
05C1E:  MOVF   FEF,W
05C20:  CLRF   x3C
05C22:  CLRF   x3B
05C24:  CLRF   x3A
05C26:  MOVWF  x39
05C28:  MOVFF  23B,03
05C2C:  MOVFF  23A,02
05C30:  MOVFF  239,01
05C34:  CLRF   00
05C36:  MOVF   00,W
05C38:  IORWF  x34,F
05C3A:  MOVF   01,W
05C3C:  IORWF  x35,F
05C3E:  MOVF   02,W
05C40:  IORWF  x36,F
05C42:  MOVF   03,W
05C44:  IORWF  x37,F
05C46:  MOVLW  04
05C48:  ADDWF  x2D,W
05C4A:  MOVWF  FE9
05C4C:  MOVLW  00
05C4E:  ADDWFC x2E,W
05C50:  MOVWF  FEA
05C52:  MOVF   FEF,W
05C54:  MOVWF  00
05C56:  CLRF   01
05C58:  CLRF   02
05C5A:  CLRF   03
05C5C:  MOVF   00,W
05C5E:  IORWF  x34,W
05C60:  MOVWF  x30
05C62:  MOVF   01,W
05C64:  IORWF  x35,W
05C66:  MOVWF  x31
05C68:  MOVF   02,W
05C6A:  IORWF  x36,W
05C6C:  MOVWF  x32
05C6E:  MOVF   03,W
05C70:  IORWF  x37,W
05C72:  MOVWF  x33
....................    printf("\tSubsector Address: 0x%08LX\r\n", subsector_address);
05C74:  MOVLW  26
05C76:  MOVWF  FF6
05C78:  MOVLW  18
05C7A:  MOVWF  FF7
05C7C:  MOVLW  00
05C7E:  MOVWF  FF8
05C80:  MOVLW  16
05C82:  MOVLB  B
05C84:  MOVWF  x4A
05C86:  MOVLB  0
05C88:  CALL   1F74
05C8C:  MOVFF  233,B4B
05C90:  MOVLW  37
05C92:  MOVLB  B
05C94:  MOVWF  x4C
05C96:  MOVLB  0
05C98:  CALL   2188
05C9C:  MOVFF  232,B4B
05CA0:  MOVLW  37
05CA2:  MOVLB  B
05CA4:  MOVWF  x4C
05CA6:  MOVLB  0
05CA8:  CALL   2188
05CAC:  MOVFF  231,B4B
05CB0:  MOVLW  37
05CB2:  MOVLB  B
05CB4:  MOVWF  x4C
05CB6:  MOVLB  0
05CB8:  CALL   2188
05CBC:  MOVFF  230,B4B
05CC0:  MOVLW  37
05CC2:  MOVLB  B
05CC4:  MOVWF  x4C
05CC6:  MOVLB  0
05CC8:  CALL   2188
05CCC:  MOVLW  0D
05CCE:  BTFSS  FA6.6
05CD0:  GOTO   5CCE
05CD4:  MOVLB  E
05CD6:  MOVWF  xF9
05CD8:  MOVLW  0A
05CDA:  MOVLB  0
05CDC:  BTFSS  FA6.6
05CDE:  GOTO   5CDC
05CE2:  MOVLB  E
05CE4:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START);
05CE6:  MOVFF  22F,284
05CEA:  MOVLB  2
05CEC:  CLRF   x85
05CEE:  MOVLB  0
05CF0:  CALL   4DAC
....................    subsector_4kByte_erase(mis_fm, subsector_address); // FIX: 固定0消去→指定アドレス
05CF4:  MOVFF  115,318
05CF8:  MOVFF  114,317
05CFC:  MOVFF  113,316
05D00:  MOVFF  112,315
05D04:  MOVFF  233,31C
05D08:  MOVFF  232,31B
05D0C:  MOVFF  231,31A
05D10:  MOVFF  230,319
05D14:  CALL   5846
....................    piclog_make(cmd, PICLOG_PARAM_END);
05D18:  MOVFF  22F,284
05D1C:  MOVLB  2
05D1E:  SETF   x85
05D20:  MOVLB  0
05D22:  CALL   4DAC
....................    printf("End Flash Erase 4kByte Subsector\r\n");
05D26:  MOVLW  44
05D28:  MOVWF  FF6
05D2A:  MOVLW  18
05D2C:  MOVWF  FF7
05D2E:  MOVLW  00
05D30:  MOVWF  FF8
05D32:  CALL   1F3E
05D36:  GOTO   E246 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 64kByte Subsector\r\n");
05D3A:  MOVLW  68
05D3C:  MOVWF  FF6
05D3E:  MOVLW  18
05D40:  MOVWF  FF7
05D42:  MOVLW  00
05D44:  MOVWF  FF8
05D46:  CALL   1F3E
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
05D4A:  MOVLB  2
05D4C:  MOVF   x2D,W
05D4E:  MOVWF  FE9
05D50:  MOVF   x2E,W
05D52:  MOVWF  FEA
05D54:  MOVFF  FEF,22F
05D58:  MOVLW  01
05D5A:  ADDWF  x2D,W
05D5C:  MOVWF  FE9
05D5E:  MOVLW  00
05D60:  ADDWFC x2E,W
05D62:  MOVWF  FEA
05D64:  MOVF   FEF,W
05D66:  CLRF   x37
05D68:  CLRF   x36
05D6A:  CLRF   x35
05D6C:  MOVWF  x34
05D6E:  MOVFF  234,237
05D72:  CLRF   x34
05D74:  CLRF   x35
05D76:  CLRF   x36
05D78:  MOVLW  02
05D7A:  ADDWF  x2D,W
05D7C:  MOVWF  FE9
05D7E:  MOVLW  00
05D80:  ADDWFC x2E,W
05D82:  MOVWF  FEA
05D84:  MOVF   FEF,W
05D86:  CLRF   x3C
05D88:  CLRF   x3B
05D8A:  CLRF   x3A
05D8C:  MOVWF  x39
05D8E:  MOVFF  23A,03
05D92:  MOVFF  239,02
05D96:  CLRF   00
05D98:  CLRF   01
05D9A:  MOVF   00,W
05D9C:  IORWF  x34,F
05D9E:  MOVF   01,W
05DA0:  IORWF  x35,F
05DA2:  MOVF   02,W
05DA4:  IORWF  x36,F
05DA6:  MOVF   03,W
05DA8:  IORWF  x37,F
05DAA:  MOVLW  03
05DAC:  ADDWF  x2D,W
05DAE:  MOVWF  FE9
05DB0:  MOVLW  00
05DB2:  ADDWFC x2E,W
05DB4:  MOVWF  FEA
05DB6:  MOVF   FEF,W
05DB8:  CLRF   x3C
05DBA:  CLRF   x3B
05DBC:  CLRF   x3A
05DBE:  MOVWF  x39
05DC0:  MOVFF  23B,03
05DC4:  MOVFF  23A,02
05DC8:  MOVFF  239,01
05DCC:  CLRF   00
05DCE:  MOVF   00,W
05DD0:  IORWF  x34,F
05DD2:  MOVF   01,W
05DD4:  IORWF  x35,F
05DD6:  MOVF   02,W
05DD8:  IORWF  x36,F
05DDA:  MOVF   03,W
05DDC:  IORWF  x37,F
05DDE:  MOVLW  04
05DE0:  ADDWF  x2D,W
05DE2:  MOVWF  FE9
05DE4:  MOVLW  00
05DE6:  ADDWFC x2E,W
05DE8:  MOVWF  FEA
05DEA:  MOVF   FEF,W
05DEC:  MOVWF  00
05DEE:  CLRF   01
05DF0:  CLRF   02
05DF2:  CLRF   03
05DF4:  MOVF   00,W
05DF6:  IORWF  x34,W
05DF8:  MOVWF  x30
05DFA:  MOVF   01,W
05DFC:  IORWF  x35,W
05DFE:  MOVWF  x31
05E00:  MOVF   02,W
05E02:  IORWF  x36,W
05E04:  MOVWF  x32
05E06:  MOVF   03,W
05E08:  IORWF  x37,W
05E0A:  MOVWF  x33
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
05E0C:  MOVLW  8E
05E0E:  MOVWF  FF6
05E10:  MOVLW  18
05E12:  MOVWF  FF7
05E14:  MOVLW  00
05E16:  MOVWF  FF8
05E18:  MOVLW  16
05E1A:  MOVLB  B
05E1C:  MOVWF  x4A
05E1E:  MOVLB  0
05E20:  CALL   1F74
05E24:  MOVFF  233,B4B
05E28:  MOVLW  37
05E2A:  MOVLB  B
05E2C:  MOVWF  x4C
05E2E:  MOVLB  0
05E30:  CALL   2188
05E34:  MOVFF  232,B4B
05E38:  MOVLW  37
05E3A:  MOVLB  B
05E3C:  MOVWF  x4C
05E3E:  MOVLB  0
05E40:  CALL   2188
05E44:  MOVFF  231,B4B
05E48:  MOVLW  37
05E4A:  MOVLB  B
05E4C:  MOVWF  x4C
05E4E:  MOVLB  0
05E50:  CALL   2188
05E54:  MOVFF  230,B4B
05E58:  MOVLW  37
05E5A:  MOVLB  B
05E5C:  MOVWF  x4C
05E5E:  MOVLB  0
05E60:  CALL   2188
05E64:  MOVLW  0D
05E66:  BTFSS  FA6.6
05E68:  GOTO   5E66
05E6C:  MOVLB  E
05E6E:  MOVWF  xF9
05E70:  MOVLW  0A
05E72:  MOVLB  0
05E74:  BTFSS  FA6.6
05E76:  GOTO   5E74
05E7A:  MOVLB  E
05E7C:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05E7E:  MOVFF  22F,284
05E82:  MOVLB  2
05E84:  CLRF   x85
05E86:  MOVLB  0
05E88:  CALL   4DAC
....................    
....................    //subsector_64kByte_erase(mis_fm, subsector_address);
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05E8C:  MOVFF  22F,284
05E90:  MOVLB  2
05E92:  SETF   x85
05E94:  MOVLB  0
05E96:  CALL   4DAC
....................    fprintf(PC, "End Flash Erase 64kByte Subsector\r\n");
05E9A:  MOVLW  AC
05E9C:  MOVWF  FF6
05E9E:  MOVLW  18
05EA0:  MOVWF  FF7
05EA2:  MOVLW  00
05EA4:  MOVWF  FF8
05EA6:  CALL   1F3E
05EAA:  GOTO   E256 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
*
0608E:  MOVLW  D0
06090:  MOVWF  FF6
06092:  MOVLW  18
06094:  MOVWF  FF7
06096:  MOVLW  00
06098:  MOVWF  FF8
0609A:  CALL   1F3E
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
0609E:  MOVLB  2
060A0:  MOVF   x2D,W
060A2:  MOVWF  FE9
060A4:  MOVF   x2E,W
060A6:  MOVWF  FEA
060A8:  MOVFF  FEF,283
060AC:  MOVFF  283,284
060B0:  CLRF   x85
060B2:  MOVLB  0
060B4:  CALL   4DAC
.................... 
....................    FLASH_WRITE_PARAM flash_write_param = {0};
060B8:  MOVLB  2
060BA:  CLRF   x2F
060BC:  CLRF   x30
060BE:  CLRF   x31
060C0:  CLRF   x32
060C2:  CLRF   x33
060C4:  CLRF   x34
060C6:  CLRF   x35
....................    
....................    flash_write_param.id = parameter[0];
060C8:  MOVF   x2D,W
060CA:  MOVWF  FE9
060CC:  MOVF   x2E,W
060CE:  MOVWF  FEA
060D0:  MOVFF  FEF,22F
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
060D4:  MOVLW  01
060D6:  ADDWF  x2D,W
060D8:  MOVWF  FE9
060DA:  MOVLW  00
060DC:  ADDWFC x2E,W
060DE:  MOVWF  FEA
060E0:  MOVF   FEF,W
060E2:  CLRF   x86
060E4:  CLRF   x85
060E6:  CLRF   x84
060E8:  MOVWF  x83
060EA:  MOVFF  283,286
060EE:  CLRF   x83
060F0:  CLRF   x84
060F2:  CLRF   x85
060F4:  MOVLW  02
060F6:  ADDWF  x2D,W
060F8:  MOVWF  FE9
060FA:  MOVLW  00
060FC:  ADDWFC x2E,W
060FE:  MOVWF  FEA
06100:  MOVF   FEF,W
06102:  CLRF   x8B
06104:  CLRF   x8A
06106:  CLRF   x89
06108:  MOVWF  x88
0610A:  MOVFF  289,03
0610E:  MOVFF  288,02
06112:  CLRF   00
06114:  CLRF   01
06116:  MOVF   00,W
06118:  IORWF  x83,F
0611A:  MOVF   01,W
0611C:  IORWF  x84,F
0611E:  MOVF   02,W
06120:  IORWF  x85,F
06122:  MOVF   03,W
06124:  IORWF  x86,F
06126:  MOVLW  03
06128:  ADDWF  x2D,W
0612A:  MOVWF  FE9
0612C:  MOVLW  00
0612E:  ADDWFC x2E,W
06130:  MOVWF  FEA
06132:  MOVF   FEF,W
06134:  CLRF   x8B
06136:  CLRF   x8A
06138:  CLRF   x89
0613A:  MOVWF  x88
0613C:  MOVFF  28A,03
06140:  MOVFF  289,02
06144:  MOVFF  288,01
06148:  CLRF   00
0614A:  MOVF   00,W
0614C:  IORWF  x83,F
0614E:  MOVF   01,W
06150:  IORWF  x84,F
06152:  MOVF   02,W
06154:  IORWF  x85,F
06156:  MOVF   03,W
06158:  IORWF  x86,F
0615A:  MOVLW  04
0615C:  ADDWF  x2D,W
0615E:  MOVWF  FE9
06160:  MOVLW  00
06162:  ADDWFC x2E,W
06164:  MOVWF  FEA
06166:  MOVF   FEF,W
06168:  MOVWF  00
0616A:  CLRF   01
0616C:  CLRF   02
0616E:  CLRF   03
06170:  MOVF   00,W
06172:  IORWF  x83,W
06174:  MOVWF  x30
06176:  MOVF   01,W
06178:  IORWF  x84,W
0617A:  MOVWF  x31
0617C:  MOVF   02,W
0617E:  IORWF  x85,W
06180:  MOVWF  x32
06182:  MOVF   03,W
06184:  IORWF  x86,W
06186:  MOVWF  x33
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
06188:  MOVLW  07
0618A:  ADDWF  x2D,W
0618C:  MOVWF  FE9
0618E:  MOVLW  00
06190:  ADDWFC x2E,W
06192:  MOVWF  FEA
06194:  MOVF   FEF,W
06196:  CLRF   x84
06198:  MOVWF  x83
0619A:  MOVFF  283,284
0619E:  CLRF   x83
061A0:  MOVLW  08
061A2:  ADDWF  x2D,W
061A4:  MOVWF  FE9
061A6:  MOVLW  00
061A8:  ADDWFC x2E,W
061AA:  MOVWF  FEA
061AC:  MOVF   FEF,W
061AE:  CLRF   03
061B0:  IORWF  x83,W
061B2:  MOVWF  x34
061B4:  MOVF   03,W
061B6:  IORWF  x84,W
061B8:  MOVWF  x35
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
061BA:  MOVLW  EA
061BC:  MOVWF  FF6
061BE:  MOVLW  18
061C0:  MOVWF  FF7
061C2:  MOVLW  00
061C4:  MOVWF  FF8
061C6:  MOVLW  0C
061C8:  MOVLB  B
061CA:  MOVWF  x4A
061CC:  MOVLB  0
061CE:  CALL   1F74
061D2:  MOVFF  22F,B4B
061D6:  MOVLW  37
061D8:  MOVLB  B
061DA:  MOVWF  x4C
061DC:  MOVLB  0
061DE:  CALL   2188
061E2:  MOVLW  0D
061E4:  BTFSS  FA6.6
061E6:  GOTO   61E4
061EA:  MOVLB  E
061EC:  MOVWF  xF9
061EE:  MOVLW  0A
061F0:  MOVLB  0
061F2:  BTFSS  FA6.6
061F4:  GOTO   61F2
061F8:  MOVLB  E
061FA:  MOVWF  xF9
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
061FC:  MOVLW  FE
061FE:  MOVWF  FF6
06200:  MOVLW  18
06202:  MOVWF  FF7
06204:  MOVLW  00
06206:  MOVWF  FF8
06208:  MOVLW  0E
0620A:  MOVLB  B
0620C:  MOVWF  x4A
0620E:  MOVLB  0
06210:  CALL   1F74
06214:  MOVFF  233,B4B
06218:  MOVLW  37
0621A:  MOVLB  B
0621C:  MOVWF  x4C
0621E:  MOVLB  0
06220:  CALL   2188
06224:  MOVFF  232,B4B
06228:  MOVLW  37
0622A:  MOVLB  B
0622C:  MOVWF  x4C
0622E:  MOVLB  0
06230:  CALL   2188
06234:  MOVFF  231,B4B
06238:  MOVLW  37
0623A:  MOVLB  B
0623C:  MOVWF  x4C
0623E:  MOVLB  0
06240:  CALL   2188
06244:  MOVFF  230,B4B
06248:  MOVLW  37
0624A:  MOVLB  B
0624C:  MOVWF  x4C
0624E:  MOVLB  0
06250:  CALL   2188
06254:  MOVLW  0D
06256:  BTFSS  FA6.6
06258:  GOTO   6256
0625C:  MOVLB  E
0625E:  MOVWF  xF9
06260:  MOVLW  0A
06262:  MOVLB  0
06264:  BTFSS  FA6.6
06266:  GOTO   6264
0626A:  MOVLB  E
0626C:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
0626E:  MOVLW  14
06270:  MOVWF  FF6
06272:  MOVLW  19
06274:  MOVWF  FF7
06276:  MOVLW  00
06278:  MOVWF  FF8
0627A:  MOVLW  0E
0627C:  MOVLB  B
0627E:  MOVWF  x4A
06280:  MOVLB  0
06282:  CALL   1F74
06286:  MOVFF  235,B4B
0628A:  MOVLW  37
0628C:  MOVLB  B
0628E:  MOVWF  x4C
06290:  MOVLB  0
06292:  CALL   2188
06296:  MOVFF  234,B4B
0629A:  MOVLW  37
0629C:  MOVLB  B
0629E:  MOVWF  x4C
062A0:  MOVLB  0
062A2:  CALL   2188
062A6:  MOVLW  0D
062A8:  BTFSS  FA6.6
062AA:  GOTO   62A8
062AE:  MOVLB  E
062B0:  MOVWF  xF9
062B2:  MOVLW  0A
062B4:  MOVLB  0
062B6:  BTFSS  FA6.6
062B8:  GOTO   62B6
062BC:  MOVLB  E
062BE:  MOVWF  xF9
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
062C0:  MOVFF  22F,284
062C4:  MOVLB  2
062C6:  CLRF   x85
062C8:  MOVLB  0
062CA:  CALL   4DAC
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
062CE:  MOVLW  2A
062D0:  MOVWF  FF6
062D2:  MOVLW  19
062D4:  MOVWF  FF7
062D6:  MOVLW  00
062D8:  MOVWF  FF8
062DA:  CALL   1F3E
....................    for (p = 0; p < flash_write_param.packetnum; p++)
062DE:  MOVLB  2
062E0:  CLRF   x77
062E2:  CLRF   x76
062E4:  MOVLB  0
062E6:  MOVLB  2
062E8:  MOVF   x77,W
062EA:  SUBWF  x35,W
062EC:  BTFSC  FD8.0
062EE:  BRA    62F6
062F0:  MOVLB  0
062F2:  GOTO   6652
062F6:  MOVLB  0
062F8:  BTFSS  FD8.2
062FA:  GOTO   6310
062FE:  MOVLB  2
06300:  MOVF   x34,W
06302:  SUBWF  x76,W
06304:  BTFSS  FD8.0
06306:  BRA    630E
06308:  MOVLB  0
0630A:  GOTO   6652
0630E:  MOVLB  0
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
06310:  MOVLB  2
06312:  RLCF   x76,W
06314:  MOVWF  x78
06316:  RLCF   x77,W
06318:  MOVWF  x79
0631A:  RLCF   x78,F
0631C:  RLCF   x79,F
0631E:  RLCF   x78,F
06320:  RLCF   x79,F
06322:  RLCF   x78,F
06324:  RLCF   x79,F
06326:  RLCF   x78,F
06328:  RLCF   x79,F
0632A:  RLCF   x78,F
0632C:  RLCF   x79,F
0632E:  MOVLW  C0
06330:  ANDWF  x78,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
06332:  CLRF   x7A
06334:  MOVLB  0
06336:  MOVLB  2
06338:  MOVF   x7A,W
0633A:  SUBLW  3F
0633C:  BTFSC  FD8.0
0633E:  BRA    6346
06340:  MOVLB  0
06342:  GOTO   63A8
06346:  MOVLB  0
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
06348:  CLRF   03
0634A:  MOVLB  2
0634C:  MOVF   x7A,W
0634E:  ADDLW  36
06350:  MOVWF  FE9
06352:  MOVLW  02
06354:  ADDWFC 03,W
06356:  MOVWF  FEA
06358:  MOVF   x7A,W
0635A:  ADDWF  x78,W
0635C:  MOVWF  x85
0635E:  MOVLW  00
06360:  ADDWFC x79,W
06362:  MOVWF  x86
06364:  MOVF   x85,W
06366:  MOVWF  00
06368:  CLRF   03
0636A:  MOVF   00,W
0636C:  MOVWF  FEF
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
0636E:  CLRF   03
06370:  MOVF   x7A,W
06372:  ADDLW  36
06374:  MOVWF  FE9
06376:  MOVLW  02
06378:  ADDWFC 03,W
0637A:  MOVWF  FEA
0637C:  MOVFF  FEF,283
06380:  MOVFF  283,B4B
06384:  MOVLW  37
06386:  MOVLB  B
06388:  MOVWF  x4C
0638A:  MOVLB  0
0638C:  CALL   2188
06390:  MOVLW  20
06392:  BTFSS  FA6.6
06394:  GOTO   6392
06398:  MOVLB  E
0639A:  MOVWF  xF9
0639C:  MOVLB  0
0639E:  MOVLB  2
063A0:  INCF   x7A,F
063A2:  MOVLB  0
063A4:  GOTO   6336
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
063A8:  MOVLB  2
063AA:  RLCF   x76,W
063AC:  MOVWF  02
063AE:  RLCF   x77,W
063B0:  MOVWF  03
063B2:  RLCF   02,F
063B4:  RLCF   03,F
063B6:  RLCF   02,F
063B8:  RLCF   03,F
063BA:  RLCF   02,F
063BC:  RLCF   03,F
063BE:  RLCF   02,F
063C0:  RLCF   03,F
063C2:  RLCF   02,F
063C4:  RLCF   03,F
063C6:  MOVLW  C0
063C8:  ANDWF  02,F
063CA:  MOVF   02,W
063CC:  ADDWF  x30,W
063CE:  MOVWF  x7B
063D0:  MOVF   03,W
063D2:  ADDWFC x31,W
063D4:  MOVWF  x7C
063D6:  MOVLW  00
063D8:  ADDWFC x32,W
063DA:  MOVWF  x7D
063DC:  MOVLW  00
063DE:  ADDWFC x33,W
063E0:  MOVWF  x7E
....................       // FLASH 終端チェック (MISF_END は最終アドレス想定: inclusive)
....................       if(current_address > MISF_END){
063E2:  MOVF   x7E,F
063E4:  BTFSC  FD8.2
063E6:  BRA    63EE
063E8:  MOVLB  0
063EA:  GOTO   641C
063EE:  MOVLB  0
063F0:  MOVLB  2
063F2:  MOVF   x7D,W
063F4:  SUBLW  BB
063F6:  BTFSS  FD8.0
063F8:  BRA    6400
063FA:  MOVLB  0
063FC:  GOTO   64F2
06400:  MOVLB  0
06402:  XORLW  FF
06404:  BTFSS  FD8.2
06406:  GOTO   641C
0640A:  MOVLB  2
0640C:  MOVF   x7C,W
0640E:  SUBLW  0F
06410:  BTFSS  FD8.0
06412:  BRA    641A
06414:  MOVLB  0
06416:  GOTO   64F2
0641A:  MOVLB  0
....................          fprintf(PC, "\r\n[FLASH] Write address 0x%08LX exceeds device end 0x%08LX -> abort\r\n", current_address, (unsigned int32)MISF_END);
0641C:  MOVLW  38
0641E:  MOVWF  FF6
06420:  MOVLW  19
06422:  MOVWF  FF7
06424:  MOVLW  00
06426:  MOVWF  FF8
06428:  MOVLW  1A
0642A:  MOVLB  B
0642C:  MOVWF  x4A
0642E:  MOVLB  0
06430:  CALL   1F74
06434:  MOVFF  27E,B4B
06438:  MOVLW  37
0643A:  MOVLB  B
0643C:  MOVWF  x4C
0643E:  MOVLB  0
06440:  CALL   2188
06444:  MOVFF  27D,B4B
06448:  MOVLW  37
0644A:  MOVLB  B
0644C:  MOVWF  x4C
0644E:  MOVLB  0
06450:  CALL   2188
06454:  MOVFF  27C,B4B
06458:  MOVLW  37
0645A:  MOVLB  B
0645C:  MOVWF  x4C
0645E:  MOVLB  0
06460:  CALL   2188
06464:  MOVFF  27B,B4B
06468:  MOVLW  37
0646A:  MOVLB  B
0646C:  MOVWF  x4C
0646E:  MOVLB  0
06470:  CALL   2188
06474:  MOVLW  57
06476:  MOVWF  FF6
06478:  MOVLW  19
0647A:  MOVWF  FF7
0647C:  MOVLW  00
0647E:  MOVWF  FF8
06480:  MOVLW  16
06482:  MOVLB  B
06484:  MOVWF  x4A
06486:  MOVLB  0
06488:  CALL   1F74
0648C:  MOVLB  B
0648E:  CLRF   x4B
06490:  MOVLW  37
06492:  MOVWF  x4C
06494:  MOVLB  0
06496:  CALL   2188
0649A:  MOVLW  BC
0649C:  MOVLB  B
0649E:  MOVWF  x4B
064A0:  MOVLW  37
064A2:  MOVWF  x4C
064A4:  MOVLB  0
064A6:  CALL   2188
064AA:  MOVLW  0F
064AC:  MOVLB  B
064AE:  MOVWF  x4B
064B0:  MOVLW  37
064B2:  MOVWF  x4C
064B4:  MOVLB  0
064B6:  CALL   2188
064BA:  MOVLB  B
064BC:  SETF   x4B
064BE:  MOVLW  37
064C0:  MOVWF  x4C
064C2:  MOVLB  0
064C4:  CALL   2188
064C8:  MOVLW  72
064CA:  MOVWF  FF6
064CC:  MOVLW  19
064CE:  MOVWF  FF7
064D0:  MOVLW  00
064D2:  MOVWF  FF8
064D4:  MOVLW  0B
064D6:  MOVLB  B
064D8:  MOVWF  x4A
064DA:  MOVLB  0
064DC:  CALL   1F74
....................          piclog_make(flash_write_param.id, PICLOG_PARAM_END);
064E0:  MOVFF  22F,284
064E4:  MOVLB  2
064E6:  SETF   x85
064E8:  MOVLB  0
064EA:  CALL   4DAC
....................          break;
064EE:  GOTO   6652
....................       }
....................       if(current_address + (PACKET_SIZE - 1) > MISF_END){
064F2:  MOVLW  3F
064F4:  MOVLB  2
064F6:  ADDWF  x7B,W
064F8:  MOVWF  x83
064FA:  MOVLW  00
064FC:  ADDWFC x7C,W
064FE:  MOVWF  x84
06500:  MOVLW  00
06502:  ADDWFC x7D,W
06504:  MOVWF  x85
06506:  MOVLW  00
06508:  ADDWFC x7E,W
0650A:  MOVWF  x86
0650C:  MOVF   x86,F
0650E:  BTFSC  FD8.2
06510:  BRA    6518
06512:  MOVLB  0
06514:  GOTO   6546
06518:  MOVLB  0
0651A:  MOVLB  2
0651C:  MOVF   x85,W
0651E:  SUBLW  BB
06520:  BTFSS  FD8.0
06522:  BRA    652A
06524:  MOVLB  0
06526:  GOTO   660E
0652A:  MOVLB  0
0652C:  XORLW  FF
0652E:  BTFSS  FD8.2
06530:  GOTO   6546
06534:  MOVLB  2
06536:  MOVF   x84,W
06538:  SUBLW  0F
0653A:  BTFSS  FD8.0
0653C:  BRA    6544
0653E:  MOVLB  0
06540:  GOTO   660E
06544:  MOVLB  0
....................          unsigned int32 remain = (MISF_END - current_address) + 1; // 書込可能残り
06546:  MOVLW  FF
06548:  BSF    FD8.0
0654A:  MOVLB  2
0654C:  SUBFWB x7B,W
0654E:  MOVWF  x83
06550:  MOVLW  0F
06552:  SUBFWB x7C,W
06554:  MOVWF  x84
06556:  MOVLW  BC
06558:  SUBFWB x7D,W
0655A:  MOVWF  x85
0655C:  MOVLW  00
0655E:  SUBFWB x7E,W
06560:  MOVWF  x86
06562:  MOVLW  01
06564:  ADDWF  x83,W
06566:  MOVWF  x7F
06568:  MOVLW  00
0656A:  ADDWFC x84,W
0656C:  MOVWF  x80
0656E:  MOVLW  00
06570:  ADDWFC x85,W
06572:  MOVWF  x81
06574:  MOVLW  00
06576:  ADDWFC x86,W
06578:  MOVWF  x82
0657A:  MOVLB  0
....................          fprintf(PC, "\r\n[FLASH] Reached end. Partial write %lu bytes (packet truncated).\r\n", remain);
0657C:  MOVLW  7E
0657E:  MOVWF  FF6
06580:  MOVLW  19
06582:  MOVWF  FF7
06584:  MOVLW  00
06586:  MOVWF  FF8
06588:  MOVLW  25
0658A:  MOVLB  B
0658C:  MOVWF  x4A
0658E:  MOVLB  0
06590:  CALL   1F74
06594:  MOVLW  41
06596:  MOVWF  FE9
06598:  MOVFF  282,2DE
0659C:  MOVFF  281,2DD
065A0:  MOVFF  280,2DC
065A4:  MOVFF  27F,2DB
065A8:  CALL   5F88
065AC:  MOVLW  A6
065AE:  MOVWF  FF6
065B0:  MOVLW  19
065B2:  MOVWF  FF7
065B4:  MOVLW  00
065B6:  MOVWF  FF8
065B8:  MOVLW  1C
065BA:  MOVLB  B
065BC:  MOVWF  x4A
065BE:  MOVLB  0
065C0:  CALL   1F74
....................          write_data_bytes(mis_fm, current_address, writedata, (unsigned int16)remain);
065C4:  MOVFF  115,B91
065C8:  MOVFF  114,B90
065CC:  MOVFF  113,B8F
065D0:  MOVFF  112,B8E
065D4:  MOVFF  27E,B95
065D8:  MOVFF  27D,B94
065DC:  MOVFF  27C,B93
065E0:  MOVFF  27B,B92
065E4:  MOVLW  02
065E6:  MOVLB  B
065E8:  MOVWF  x97
065EA:  MOVLW  36
065EC:  MOVWF  x96
065EE:  MOVFF  280,B99
065F2:  MOVFF  27F,B98
065F6:  MOVLB  0
065F8:  CALL   3B7C
....................          piclog_make(flash_write_param.id, PICLOG_PARAM_END);
065FC:  MOVFF  22F,284
06600:  MOVLB  2
06602:  SETF   x85
06604:  MOVLB  0
06606:  CALL   4DAC
....................          break;
0660A:  GOTO   6652
....................       }
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
0660E:  MOVFF  115,B91
06612:  MOVFF  114,B90
06616:  MOVFF  113,B8F
0661A:  MOVFF  112,B8E
0661E:  MOVFF  27E,B95
06622:  MOVFF  27D,B94
06626:  MOVFF  27C,B93
0662A:  MOVFF  27B,B92
0662E:  MOVLW  02
06630:  MOVLB  B
06632:  MOVWF  x97
06634:  MOVLW  36
06636:  MOVWF  x96
06638:  CLRF   x99
0663A:  MOVLW  40
0663C:  MOVWF  x98
0663E:  MOVLB  0
06640:  CALL   3B7C
06644:  MOVLB  2
06646:  INCF   x76,F
06648:  BTFSC  FD8.2
0664A:  INCF   x77,F
0664C:  MOVLB  0
0664E:  GOTO   62E6
....................    }
.................... 
....................    piclog_make(flash_write_param.id, PICLOG_PARAM_END); // Log the end of the command execution
06652:  MOVFF  22F,284
06656:  MOVLB  2
06658:  SETF   x85
0665A:  MOVLB  0
0665C:  CALL   4DAC
....................    fprintf(PC, "\r\n");
06660:  MOVLW  0D
06662:  BTFSS  FA6.6
06664:  GOTO   6662
06668:  MOVLB  E
0666A:  MOVWF  xF9
0666C:  MOVLW  0A
0666E:  MOVLB  0
06670:  BTFSS  FA6.6
06672:  GOTO   6670
06676:  MOVLB  E
06678:  MOVWF  xF9
....................    fprintf(PC, "End Flash Write Demo\r\n");
0667A:  MOVLW  C4
0667C:  MOVWF  FF6
0667E:  MOVLW  19
06680:  MOVWF  FF7
06682:  MOVLW  00
06684:  MOVWF  FF8
06686:  MOVLB  0
06688:  CALL   1F3E
0668C:  GOTO   E266 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
*
066C0:  MOVLW  DC
066C2:  MOVWF  FF6
066C4:  MOVLW  19
066C6:  MOVWF  FF7
066C8:  MOVLW  00
066CA:  MOVWF  FF8
066CC:  CALL   1F3E
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
066D0:  MOVLB  2
066D2:  MOVF   x2D,W
066D4:  MOVWF  FE9
066D6:  MOVF   x2E,W
066D8:  MOVWF  FEA
066DA:  MOVFF  FEF,233
066DE:  MOVFF  233,284
066E2:  CLRF   x85
066E4:  MOVLB  0
066E6:  CALL   4DAC
....................    flash_setting(mis_fm);
066EA:  MOVFF  115,33B
066EE:  MOVFF  114,33A
066F2:  MOVFF  113,339
066F6:  MOVFF  112,338
066FA:  CALL   6690
....................    unsigned int32 write_address = 0x00000000;
066FE:  MOVLB  2
06700:  CLRF   x32
06702:  CLRF   x31
06704:  CLRF   x30
06706:  CLRF   x2F
....................    //int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
....................    //write_data_bytes(mis_fm, write_address, write_data, 256);
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06708:  MOVF   x2D,W
0670A:  MOVWF  FE9
0670C:  MOVF   x2E,W
0670E:  MOVWF  FEA
06710:  MOVFF  FEF,233
06714:  MOVFF  233,284
06718:  SETF   x85
0671A:  MOVLB  0
0671C:  CALL   4DAC
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
06720:  MOVLW  02
06722:  MOVWF  FF6
06724:  MOVLW  1A
06726:  MOVWF  FF7
06728:  MOVLW  00
0672A:  MOVWF  FF8
0672C:  CALL   1F3E
06730:  GOTO   E276 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
06734:  MOVLW  26
06736:  MOVWF  FF6
06738:  MOVLW  1A
0673A:  MOVWF  FF7
0673C:  MOVLW  00
0673E:  MOVWF  FF8
06740:  CALL   1F3E
.................... 
.................... 
....................    FLASH_PARAM flash_param = {0};
06744:  MOVLB  2
06746:  CLRF   x2F
06748:  CLRF   x30
0674A:  CLRF   x31
0674C:  CLRF   x32
0674E:  CLRF   x33
06750:  CLRF   x34
06752:  CLRF   x35
....................    flash_param.id = uplinkcmd_ptr[0];
06754:  MOVF   x2D,W
06756:  MOVWF  FE9
06758:  MOVF   x2E,W
0675A:  MOVWF  FEA
0675C:  MOVFF  FEF,22F
....................    flash_param.readaddress = -
....................       ((unsigned int32)uplinkcmd_ptr[1] << 24) |
....................       ((unsigned int32)uplinkcmd_ptr[2] << 16) |
....................       ((unsigned int32)uplinkcmd_ptr[3] << 8)  |
....................       ((unsigned int32)uplinkcmd_ptr[4]);
06760:  MOVLW  01
06762:  ADDWF  x2D,W
06764:  MOVWF  FE9
06766:  MOVLW  00
06768:  ADDWFC x2E,W
0676A:  MOVWF  FEA
0676C:  MOVF   FEF,W
0676E:  CLRF   x87
06770:  CLRF   x86
06772:  CLRF   x85
06774:  MOVWF  x84
06776:  MOVFF  284,03
0677A:  CLRF   00
0677C:  CLRF   01
0677E:  CLRF   02
06780:  MOVLW  00
06782:  BSF    FD8.0
06784:  SUBFWB 00,W
06786:  MOVWF  x84
06788:  MOVLW  00
0678A:  SUBFWB 01,W
0678C:  MOVWF  x85
0678E:  MOVLW  00
06790:  SUBFWB 02,W
06792:  MOVWF  x86
06794:  MOVLW  00
06796:  SUBFWB 03,W
06798:  MOVWF  x87
0679A:  MOVLW  02
0679C:  ADDWF  x2D,W
0679E:  MOVWF  FE9
067A0:  MOVLW  00
067A2:  ADDWFC x2E,W
067A4:  MOVWF  FEA
067A6:  MOVF   FEF,W
067A8:  CLRF   x8C
067AA:  CLRF   x8B
067AC:  CLRF   x8A
067AE:  MOVWF  x89
067B0:  MOVFF  28A,03
067B4:  MOVFF  289,02
067B8:  CLRF   00
067BA:  CLRF   01
067BC:  MOVF   00,W
067BE:  IORWF  x84,F
067C0:  MOVF   01,W
067C2:  IORWF  x85,F
067C4:  MOVF   02,W
067C6:  IORWF  x86,F
067C8:  MOVF   03,W
067CA:  IORWF  x87,F
067CC:  MOVLW  03
067CE:  ADDWF  x2D,W
067D0:  MOVWF  FE9
067D2:  MOVLW  00
067D4:  ADDWFC x2E,W
067D6:  MOVWF  FEA
067D8:  MOVF   FEF,W
067DA:  CLRF   x8C
067DC:  CLRF   x8B
067DE:  CLRF   x8A
067E0:  MOVWF  x89
067E2:  MOVFF  28B,03
067E6:  MOVFF  28A,02
067EA:  MOVFF  289,01
067EE:  CLRF   00
067F0:  MOVF   00,W
067F2:  IORWF  x84,F
067F4:  MOVF   01,W
067F6:  IORWF  x85,F
067F8:  MOVF   02,W
067FA:  IORWF  x86,F
067FC:  MOVF   03,W
067FE:  IORWF  x87,F
06800:  MOVLW  04
06802:  ADDWF  x2D,W
06804:  MOVWF  FE9
06806:  MOVLW  00
06808:  ADDWFC x2E,W
0680A:  MOVWF  FEA
0680C:  MOVF   FEF,W
0680E:  MOVWF  00
06810:  CLRF   01
06812:  CLRF   02
06814:  CLRF   03
06816:  MOVF   00,W
06818:  IORWF  x84,W
0681A:  MOVWF  x32
0681C:  MOVF   01,W
0681E:  IORWF  x85,W
06820:  MOVWF  x33
06822:  MOVF   02,W
06824:  IORWF  x86,W
06826:  MOVWF  x34
06828:  MOVF   03,W
0682A:  IORWF  x87,W
0682C:  MOVWF  x35
....................    flash_param.readpacketnum = 
....................       ((unsigned int16)uplinkcmd_ptr[6] << 8) |
....................       ((unsigned int16)uplinkcmd_ptr[7]);
0682E:  MOVLW  06
06830:  ADDWF  x2D,W
06832:  MOVWF  FE9
06834:  MOVLW  00
06836:  ADDWFC x2E,W
06838:  MOVWF  FEA
0683A:  MOVF   FEF,W
0683C:  CLRF   x85
0683E:  MOVWF  x84
06840:  MOVFF  284,285
06844:  CLRF   x84
06846:  MOVLW  07
06848:  ADDWF  x2D,W
0684A:  MOVWF  FE9
0684C:  MOVLW  00
0684E:  ADDWFC x2E,W
06850:  MOVWF  FEA
06852:  MOVF   FEF,W
06854:  CLRF   03
06856:  IORWF  x84,W
06858:  MOVWF  x30
0685A:  MOVF   03,W
0685C:  IORWF  x85,W
0685E:  MOVWF  x31
....................       piclog_make(flash_param.id, PICLOG_PARAM_START); // Log the command execution
06860:  MOVFF  22F,284
06864:  CLRF   x85
06866:  MOVLB  0
06868:  CALL   4DAC
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
0686C:  MOVLW  3A
0686E:  MOVWF  FF6
06870:  MOVLW  1A
06872:  MOVWF  FF7
06874:  MOVLW  00
06876:  MOVWF  FF8
06878:  MOVLW  0C
0687A:  MOVLB  B
0687C:  MOVWF  x4A
0687E:  MOVLB  0
06880:  CALL   1F74
06884:  MOVFF  22F,B4B
06888:  MOVLW  37
0688A:  MOVLB  B
0688C:  MOVWF  x4C
0688E:  MOVLB  0
06890:  CALL   2188
06894:  MOVLW  0D
06896:  BTFSS  FA6.6
06898:  GOTO   6896
0689C:  MOVLB  E
0689E:  MOVWF  xF9
068A0:  MOVLW  0A
068A2:  MOVLB  0
068A4:  BTFSS  FA6.6
068A6:  GOTO   68A4
068AA:  MOVLB  E
068AC:  MOVWF  xF9
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
068AE:  MOVLW  4E
068B0:  MOVWF  FF6
068B2:  MOVLW  1A
068B4:  MOVWF  FF7
068B6:  MOVLW  00
068B8:  MOVWF  FF8
068BA:  MOVLW  0E
068BC:  MOVLB  B
068BE:  MOVWF  x4A
068C0:  MOVLB  0
068C2:  CALL   1F74
068C6:  MOVFF  235,B4B
068CA:  MOVLW  37
068CC:  MOVLB  B
068CE:  MOVWF  x4C
068D0:  MOVLB  0
068D2:  CALL   2188
068D6:  MOVFF  234,B4B
068DA:  MOVLW  37
068DC:  MOVLB  B
068DE:  MOVWF  x4C
068E0:  MOVLB  0
068E2:  CALL   2188
068E6:  MOVFF  233,B4B
068EA:  MOVLW  37
068EC:  MOVLB  B
068EE:  MOVWF  x4C
068F0:  MOVLB  0
068F2:  CALL   2188
068F6:  MOVFF  232,B4B
068FA:  MOVLW  37
068FC:  MOVLB  B
068FE:  MOVWF  x4C
06900:  MOVLB  0
06902:  CALL   2188
06906:  MOVLW  0D
06908:  BTFSS  FA6.6
0690A:  GOTO   6908
0690E:  MOVLB  E
06910:  MOVWF  xF9
06912:  MOVLW  0A
06914:  MOVLB  0
06916:  BTFSS  FA6.6
06918:  GOTO   6916
0691C:  MOVLB  E
0691E:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
06920:  MOVLW  64
06922:  MOVWF  FF6
06924:  MOVLW  1A
06926:  MOVWF  FF7
06928:  MOVLW  00
0692A:  MOVWF  FF8
0692C:  MOVLW  0E
0692E:  MOVLB  B
06930:  MOVWF  x4A
06932:  MOVLB  0
06934:  CALL   1F74
06938:  MOVFF  231,B4B
0693C:  MOVLW  37
0693E:  MOVLB  B
06940:  MOVWF  x4C
06942:  MOVLB  0
06944:  CALL   2188
06948:  MOVFF  230,B4B
0694C:  MOVLW  37
0694E:  MOVLB  B
06950:  MOVWF  x4C
06952:  MOVLB  0
06954:  CALL   2188
06958:  MOVLW  0D
0695A:  BTFSS  FA6.6
0695C:  GOTO   695A
06960:  MOVLB  E
06962:  MOVWF  xF9
06964:  MOVLW  0A
06966:  MOVLB  0
06968:  BTFSS  FA6.6
0696A:  GOTO   6968
0696E:  MOVLB  E
06970:  MOVWF  xF9
....................    
....................    piclog_make(flash_param.id, 0x00);
06972:  MOVFF  22F,284
06976:  MOVLB  2
06978:  CLRF   x85
0697A:  MOVLB  0
0697C:  CALL   4DAC
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
06980:  MOVLB  2
06982:  CLRF   x36
06984:  CLRF   x37
06986:  CLRF   x38
06988:  CLRF   x39
0698A:  CLRF   x3A
0698C:  CLRF   x3B
0698E:  CLRF   x3C
06990:  CLRF   x3D
06992:  CLRF   x3E
06994:  CLRF   x3F
06996:  CLRF   x40
06998:  CLRF   x41
0699A:  CLRF   x42
0699C:  CLRF   x43
0699E:  CLRF   x44
069A0:  CLRF   x45
069A2:  CLRF   x46
069A4:  CLRF   x47
069A6:  CLRF   x48
069A8:  CLRF   x49
069AA:  CLRF   x4A
069AC:  CLRF   x4B
069AE:  CLRF   x4C
069B0:  CLRF   x4D
069B2:  CLRF   x4E
069B4:  CLRF   x4F
069B6:  CLRF   x50
069B8:  CLRF   x51
069BA:  CLRF   x52
069BC:  CLRF   x53
069BE:  CLRF   x54
069C0:  CLRF   x55
069C2:  CLRF   x56
069C4:  CLRF   x57
069C6:  CLRF   x58
069C8:  CLRF   x59
069CA:  CLRF   x5A
069CC:  CLRF   x5B
069CE:  CLRF   x5C
069D0:  CLRF   x5D
069D2:  CLRF   x5E
069D4:  CLRF   x5F
069D6:  CLRF   x60
069D8:  CLRF   x61
069DA:  CLRF   x62
069DC:  CLRF   x63
069DE:  CLRF   x64
069E0:  CLRF   x65
069E2:  CLRF   x66
069E4:  CLRF   x67
069E6:  CLRF   x68
069E8:  CLRF   x69
069EA:  CLRF   x6A
069EC:  CLRF   x6B
069EE:  CLRF   x6C
069F0:  CLRF   x6D
069F2:  CLRF   x6E
069F4:  CLRF   x6F
069F6:  CLRF   x70
069F8:  CLRF   x71
069FA:  CLRF   x72
069FC:  CLRF   x73
069FE:  CLRF   x74
06A00:  CLRF   x75
....................    unsigned int32 read_address;
....................    fprintf(PC, "READ DATA\r\n");
06A02:  MOVLW  7A
06A04:  MOVWF  FF6
06A06:  MOVLW  1A
06A08:  MOVWF  FF7
06A0A:  MOVLW  00
06A0C:  MOVWF  FF8
06A0E:  MOVLB  0
06A10:  CALL   1F3E
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
06A14:  MOVFF  115,2D4
06A18:  MOVFF  114,2D3
06A1C:  MOVFF  113,2D2
06A20:  MOVFF  112,2D1
06A24:  CALL   2AA0
06A28:  MOVF   01,F
06A2A:  BTFSS  FD8.2
06A2C:  GOTO   6A52
....................       fprintf(PC, "Mission Flash is not connected\r\n");
06A30:  MOVLW  86
06A32:  MOVWF  FF6
06A34:  MOVLW  1A
06A36:  MOVWF  FF7
06A38:  MOVLW  00
06A3A:  MOVWF  FF8
06A3C:  CALL   1F3E
....................       piclog_make(flash_param.id, PICLOG_PARAM_END);
06A40:  MOVFF  22F,284
06A44:  MOVLB  2
06A46:  SETF   x85
06A48:  MOVLB  0
06A4A:  CALL   4DAC
....................       return; // FIX: 接続失敗時終了
06A4E:  GOTO   6E96
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
06A52:  MOVLB  2
06A54:  CLRF   x7D
06A56:  CLRF   x7C
06A58:  CLRF   x7B
06A5A:  CLRF   x7A
06A5C:  MOVLB  0
06A5E:  MOVLB  2
06A60:  MOVF   x7D,F
06A62:  BTFSC  FD8.2
06A64:  BRA    6A6C
06A66:  MOVLB  0
06A68:  GOTO   6E78
06A6C:  MOVLB  0
06A6E:  MOVLB  2
06A70:  MOVF   x7C,F
06A72:  BTFSC  FD8.2
06A74:  BRA    6A7C
06A76:  MOVLB  0
06A78:  GOTO   6E78
06A7C:  MOVLB  0
06A7E:  MOVLB  2
06A80:  MOVF   x7B,W
06A82:  SUBWF  x31,W
06A84:  BTFSC  FD8.0
06A86:  BRA    6A8E
06A88:  MOVLB  0
06A8A:  GOTO   6E78
06A8E:  MOVLB  0
06A90:  BTFSS  FD8.2
06A92:  GOTO   6AA8
06A96:  MOVLB  2
06A98:  MOVF   x30,W
06A9A:  SUBWF  x7A,W
06A9C:  BTFSS  FD8.0
06A9E:  BRA    6AA6
06AA0:  MOVLB  0
06AA2:  GOTO   6E78
06AA6:  MOVLB  0
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
06AA8:  MOVLB  2
06AAA:  RLCF   x7A,W
06AAC:  MOVWF  00
06AAE:  RLCF   x7B,W
06AB0:  MOVWF  01
06AB2:  RLCF   x7C,W
06AB4:  MOVWF  02
06AB6:  RLCF   x7D,W
06AB8:  MOVWF  03
06ABA:  RLCF   00,F
06ABC:  RLCF   01,F
06ABE:  RLCF   02,F
06AC0:  RLCF   03,F
06AC2:  RLCF   00,F
06AC4:  RLCF   01,F
06AC6:  RLCF   02,F
06AC8:  RLCF   03,F
06ACA:  RLCF   00,F
06ACC:  RLCF   01,F
06ACE:  RLCF   02,F
06AD0:  RLCF   03,F
06AD2:  RLCF   00,F
06AD4:  RLCF   01,F
06AD6:  RLCF   02,F
06AD8:  RLCF   03,F
06ADA:  RLCF   00,F
06ADC:  RLCF   01,F
06ADE:  RLCF   02,F
06AE0:  RLCF   03,F
06AE2:  MOVLW  C0
06AE4:  ANDWF  00,F
06AE6:  MOVF   00,W
06AE8:  ADDWF  x32,W
06AEA:  MOVWF  x76
06AEC:  MOVF   01,W
06AEE:  ADDWFC x33,W
06AF0:  MOVWF  x77
06AF2:  MOVF   02,W
06AF4:  ADDWFC x34,W
06AF6:  MOVWF  x78
06AF8:  MOVF   03,W
06AFA:  ADDWFC x35,W
06AFC:  MOVWF  x79
....................       // 終端チェック
....................       if(read_address > MISF_END){
06AFE:  MOVF   x79,F
06B00:  BTFSC  FD8.2
06B02:  BRA    6B0A
06B04:  MOVLB  0
06B06:  GOTO   6B38
06B0A:  MOVLB  0
06B0C:  MOVLB  2
06B0E:  MOVF   x78,W
06B10:  SUBLW  BB
06B12:  BTFSS  FD8.0
06B14:  BRA    6B1C
06B16:  MOVLB  0
06B18:  GOTO   6C00
06B1C:  MOVLB  0
06B1E:  XORLW  FF
06B20:  BTFSS  FD8.2
06B22:  GOTO   6B38
06B26:  MOVLB  2
06B28:  MOVF   x77,W
06B2A:  SUBLW  0F
06B2C:  BTFSS  FD8.0
06B2E:  BRA    6B36
06B30:  MOVLB  0
06B32:  GOTO   6C00
06B36:  MOVLB  0
....................          fprintf(PC, "[FLASH] Read address 0x%08LX exceeds device end 0x%08LX -> stop\r\n", read_address, (unsigned int32)MISF_END);
06B38:  MOVLW  A8
06B3A:  MOVWF  FF6
06B3C:  MOVLW  1A
06B3E:  MOVWF  FF7
06B40:  MOVLW  00
06B42:  MOVWF  FF8
06B44:  MOVLW  17
06B46:  MOVLB  B
06B48:  MOVWF  x4A
06B4A:  MOVLB  0
06B4C:  CALL   1F74
06B50:  MOVFF  279,B4B
06B54:  MOVLW  37
06B56:  MOVLB  B
06B58:  MOVWF  x4C
06B5A:  MOVLB  0
06B5C:  CALL   2188
06B60:  MOVFF  278,B4B
06B64:  MOVLW  37
06B66:  MOVLB  B
06B68:  MOVWF  x4C
06B6A:  MOVLB  0
06B6C:  CALL   2188
06B70:  MOVFF  277,B4B
06B74:  MOVLW  37
06B76:  MOVLB  B
06B78:  MOVWF  x4C
06B7A:  MOVLB  0
06B7C:  CALL   2188
06B80:  MOVFF  276,B4B
06B84:  MOVLW  37
06B86:  MOVLB  B
06B88:  MOVWF  x4C
06B8A:  MOVLB  0
06B8C:  CALL   2188
06B90:  MOVLW  C4
06B92:  MOVWF  FF6
06B94:  MOVLW  1A
06B96:  MOVWF  FF7
06B98:  MOVLW  00
06B9A:  MOVWF  FF8
06B9C:  MOVLW  16
06B9E:  MOVLB  B
06BA0:  MOVWF  x4A
06BA2:  MOVLB  0
06BA4:  CALL   1F74
06BA8:  MOVLB  B
06BAA:  CLRF   x4B
06BAC:  MOVLW  37
06BAE:  MOVWF  x4C
06BB0:  MOVLB  0
06BB2:  CALL   2188
06BB6:  MOVLW  BC
06BB8:  MOVLB  B
06BBA:  MOVWF  x4B
06BBC:  MOVLW  37
06BBE:  MOVWF  x4C
06BC0:  MOVLB  0
06BC2:  CALL   2188
06BC6:  MOVLW  0F
06BC8:  MOVLB  B
06BCA:  MOVWF  x4B
06BCC:  MOVLW  37
06BCE:  MOVWF  x4C
06BD0:  MOVLB  0
06BD2:  CALL   2188
06BD6:  MOVLB  B
06BD8:  SETF   x4B
06BDA:  MOVLW  37
06BDC:  MOVWF  x4C
06BDE:  MOVLB  0
06BE0:  CALL   2188
06BE4:  MOVLW  DF
06BE6:  MOVWF  FF6
06BE8:  MOVLW  1A
06BEA:  MOVWF  FF7
06BEC:  MOVLW  00
06BEE:  MOVWF  FF8
06BF0:  MOVLW  0A
06BF2:  MOVLB  B
06BF4:  MOVWF  x4A
06BF6:  MOVLB  0
06BF8:  CALL   1F74
....................          break;
06BFC:  GOTO   6E78
....................       }
....................       if(read_address + (PACKET_SIZE - 1) > MISF_END){
06C00:  MOVLW  3F
06C02:  MOVLB  2
06C04:  ADDWF  x76,W
06C06:  MOVWF  x84
06C08:  MOVLW  00
06C0A:  ADDWFC x77,W
06C0C:  MOVWF  x85
06C0E:  MOVLW  00
06C10:  ADDWFC x78,W
06C12:  MOVWF  x86
06C14:  MOVLW  00
06C16:  ADDWFC x79,W
06C18:  MOVWF  x87
06C1A:  MOVF   x87,F
06C1C:  BTFSC  FD8.2
06C1E:  BRA    6C26
06C20:  MOVLB  0
06C22:  GOTO   6C54
06C26:  MOVLB  0
06C28:  MOVLB  2
06C2A:  MOVF   x86,W
06C2C:  SUBLW  BB
06C2E:  BTFSS  FD8.0
06C30:  BRA    6C38
06C32:  MOVLB  0
06C34:  GOTO   6DB6
06C38:  MOVLB  0
06C3A:  XORLW  FF
06C3C:  BTFSS  FD8.2
06C3E:  GOTO   6C54
06C42:  MOVLB  2
06C44:  MOVF   x85,W
06C46:  SUBLW  0F
06C48:  BTFSS  FD8.0
06C4A:  BRA    6C52
06C4C:  MOVLB  0
06C4E:  GOTO   6DB6
06C52:  MOVLB  0
....................          unsigned int32 remain = (MISF_END - read_address) + 1;
06C54:  MOVLW  FF
06C56:  BSF    FD8.0
06C58:  MOVLB  2
06C5A:  SUBFWB x76,W
06C5C:  MOVWF  x84
06C5E:  MOVLW  0F
06C60:  SUBFWB x77,W
06C62:  MOVWF  x85
06C64:  MOVLW  BC
06C66:  SUBFWB x78,W
06C68:  MOVWF  x86
06C6A:  MOVLW  00
06C6C:  SUBFWB x79,W
06C6E:  MOVWF  x87
06C70:  MOVLW  01
06C72:  ADDWF  x84,W
06C74:  MOVWF  x7E
06C76:  MOVLW  00
06C78:  ADDWFC x85,W
06C7A:  MOVWF  x7F
06C7C:  MOVLW  00
06C7E:  ADDWFC x86,W
06C80:  MOVWF  x80
06C82:  MOVLW  00
06C84:  ADDWFC x87,W
06C86:  MOVWF  x81
06C88:  MOVLB  0
....................          fprintf(PC, "[FLASH] End reached. Partial read %lu bytes.\r\n", remain);
06C8A:  MOVLW  EA
06C8C:  MOVWF  FF6
06C8E:  MOVLW  1A
06C90:  MOVWF  FF7
06C92:  MOVLW  00
06C94:  MOVWF  FF8
06C96:  MOVLW  22
06C98:  MOVLB  B
06C9A:  MOVWF  x4A
06C9C:  MOVLB  0
06C9E:  CALL   1F74
06CA2:  MOVLW  41
06CA4:  MOVWF  FE9
06CA6:  MOVFF  281,2DE
06CAA:  MOVFF  280,2DD
06CAE:  MOVFF  27F,2DC
06CB2:  MOVFF  27E,2DB
06CB6:  CALL   5F88
06CBA:  MOVLW  0F
06CBC:  MOVWF  FF6
06CBE:  MOVLW  1B
06CC0:  MOVWF  FF7
06CC2:  MOVLW  00
06CC4:  MOVWF  FF8
06CC6:  MOVLW  09
06CC8:  MOVLB  B
06CCA:  MOVWF  x4A
06CCC:  MOVLB  0
06CCE:  CALL   1F74
....................          read_data_bytes(mis_fm, read_address, readdata, remain);
06CD2:  MOVFF  115,B4D
06CD6:  MOVFF  114,B4C
06CDA:  MOVFF  113,B4B
06CDE:  MOVFF  112,B4A
06CE2:  MOVFF  279,B51
06CE6:  MOVFF  278,B50
06CEA:  MOVFF  277,B4F
06CEE:  MOVFF  276,B4E
06CF2:  MOVLW  02
06CF4:  MOVLB  B
06CF6:  MOVWF  x53
06CF8:  MOVLW  36
06CFA:  MOVWF  x52
06CFC:  MOVFF  281,B57
06D00:  MOVFF  280,B56
06D04:  MOVFF  27F,B55
06D08:  MOVFF  27E,B54
06D0C:  MOVLB  0
06D0E:  CALL   2B8C
....................          for (unsigned int8 bytecount = 0; bytecount < remain; bytecount++)
06D12:  MOVLB  2
06D14:  CLRF   x82
06D16:  MOVLB  0
06D18:  MOVLB  2
06D1A:  MOVF   x81,F
06D1C:  BTFSC  FD8.2
06D1E:  BRA    6D26
06D20:  MOVLB  0
06D22:  GOTO   6D5A
06D26:  MOVLB  0
06D28:  MOVLB  2
06D2A:  MOVF   x80,F
06D2C:  BTFSC  FD8.2
06D2E:  BRA    6D36
06D30:  MOVLB  0
06D32:  GOTO   6D5A
06D36:  MOVLB  0
06D38:  MOVLB  2
06D3A:  MOVF   x7F,F
06D3C:  BTFSC  FD8.2
06D3E:  BRA    6D46
06D40:  MOVLB  0
06D42:  GOTO   6D5A
06D46:  MOVLB  0
06D48:  MOVLB  2
06D4A:  MOVF   x7E,W
06D4C:  SUBWF  x82,W
06D4E:  BTFSS  FD8.0
06D50:  BRA    6D58
06D52:  MOVLB  0
06D54:  GOTO   6D96
06D58:  MOVLB  0
....................             fprintf(PC, "%02X ", readdata[bytecount]);
06D5A:  CLRF   03
06D5C:  MOVLB  2
06D5E:  MOVF   x82,W
06D60:  ADDLW  36
06D62:  MOVWF  FE9
06D64:  MOVLW  02
06D66:  ADDWFC 03,W
06D68:  MOVWF  FEA
06D6A:  MOVFF  FEF,284
06D6E:  MOVFF  284,B4B
06D72:  MOVLW  37
06D74:  MOVLB  B
06D76:  MOVWF  x4C
06D78:  MOVLB  0
06D7A:  CALL   2188
06D7E:  MOVLW  20
06D80:  BTFSS  FA6.6
06D82:  GOTO   6D80
06D86:  MOVLB  E
06D88:  MOVWF  xF9
06D8A:  MOVLB  0
06D8C:  MOVLB  2
06D8E:  INCF   x82,F
06D90:  MOVLB  0
06D92:  GOTO   6D18
....................          fprintf(PC, "\r\n");
06D96:  MOVLW  0D
06D98:  BTFSS  FA6.6
06D9A:  GOTO   6D98
06D9E:  MOVLB  E
06DA0:  MOVWF  xF9
06DA2:  MOVLW  0A
06DA4:  MOVLB  0
06DA6:  BTFSS  FA6.6
06DA8:  GOTO   6DA6
06DAC:  MOVLB  E
06DAE:  MOVWF  xF9
....................          break;
06DB0:  MOVLB  0
06DB2:  GOTO   6E78
....................       }
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
06DB6:  MOVFF  115,B4D
06DBA:  MOVFF  114,B4C
06DBE:  MOVFF  113,B4B
06DC2:  MOVFF  112,B4A
06DC6:  MOVFF  279,B51
06DCA:  MOVFF  278,B50
06DCE:  MOVFF  277,B4F
06DD2:  MOVFF  276,B4E
06DD6:  MOVLW  02
06DD8:  MOVLB  B
06DDA:  MOVWF  x53
06DDC:  MOVLW  36
06DDE:  MOVWF  x52
06DE0:  CLRF   x57
06DE2:  CLRF   x56
06DE4:  CLRF   x55
06DE6:  MOVLW  40
06DE8:  MOVWF  x54
06DEA:  MOVLB  0
06DEC:  CALL   2B8C
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
06DF0:  MOVLB  2
06DF2:  CLRF   x83
06DF4:  MOVLB  0
06DF6:  MOVLB  2
06DF8:  MOVF   x83,W
06DFA:  SUBLW  3F
06DFC:  BTFSC  FD8.0
06DFE:  BRA    6E06
06E00:  MOVLB  0
06E02:  GOTO   6E44
06E06:  MOVLB  0
....................          fprintf(PC,"%02X ",readdata[bytecount]);
06E08:  CLRF   03
06E0A:  MOVLB  2
06E0C:  MOVF   x83,W
06E0E:  ADDLW  36
06E10:  MOVWF  FE9
06E12:  MOVLW  02
06E14:  ADDWFC 03,W
06E16:  MOVWF  FEA
06E18:  MOVFF  FEF,284
06E1C:  MOVFF  284,B4B
06E20:  MOVLW  37
06E22:  MOVLB  B
06E24:  MOVWF  x4C
06E26:  MOVLB  0
06E28:  CALL   2188
06E2C:  MOVLW  20
06E2E:  BTFSS  FA6.6
06E30:  GOTO   6E2E
06E34:  MOVLB  E
06E36:  MOVWF  xF9
06E38:  MOVLB  0
06E3A:  MOVLB  2
06E3C:  INCF   x83,F
06E3E:  MOVLB  0
06E40:  GOTO   6DF6
....................       }
....................       fprintf(PC,"\r\n");
06E44:  MOVLW  0D
06E46:  BTFSS  FA6.6
06E48:  GOTO   6E46
06E4C:  MOVLB  E
06E4E:  MOVWF  xF9
06E50:  MOVLW  0A
06E52:  MOVLB  0
06E54:  BTFSS  FA6.6
06E56:  GOTO   6E54
06E5A:  MOVLB  E
06E5C:  MOVWF  xF9
06E5E:  MOVLB  0
06E60:  MOVLW  01
06E62:  MOVLB  2
06E64:  ADDWF  x7A,F
06E66:  BTFSC  FD8.0
06E68:  INCF   x7B,F
06E6A:  BTFSC  FD8.2
06E6C:  INCF   x7C,F
06E6E:  BTFSC  FD8.2
06E70:  INCF   x7D,F
06E72:  MOVLB  0
06E74:  GOTO   6A5E
....................    }
....................    piclog_make(flash_param.id, PICLOG_PARAM_END); // Log the end of the command execution
06E78:  MOVFF  22F,284
06E7C:  MOVLB  2
06E7E:  SETF   x85
06E80:  MOVLB  0
06E82:  CALL   4DAC
....................    fprintf(PC, "End Flash Read\r\n");
06E86:  MOVLW  1A
06E88:  MOVWF  FF6
06E8A:  MOVLW  1B
06E8C:  MOVWF  FF7
06E8E:  MOVLW  00
06E90:  MOVWF  FF8
06E92:  CALL   1F3E
06E96:  GOTO   E286 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
06E9A:  MOVLW  2C
06E9C:  MOVWF  FF6
06E9E:  MOVLW  1B
06EA0:  MOVWF  FF7
06EA2:  MOVLW  00
06EA4:  MOVWF  FF8
06EA6:  CALL   1F3E
....................    flash_setting(mis_fm);
06EAA:  MOVFF  115,33B
06EAE:  MOVFF  114,33A
06EB2:  MOVFF  113,339
06EB6:  MOVFF  112,338
06EBA:  CALL   6690
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
06EBE:  MOVLB  2
06EC0:  CLRF   x32
06EC2:  CLRF   x31
06EC4:  CLRF   x30
06EC6:  CLRF   x2F
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
06EC8:  MOVFF  115,B4D
06ECC:  MOVFF  114,B4C
06ED0:  MOVFF  113,B4B
06ED4:  MOVFF  112,B4A
06ED8:  MOVFF  232,B51
06EDC:  MOVFF  231,B50
06EE0:  MOVFF  230,B4F
06EE4:  MOVFF  22F,B4E
06EE8:  MOVLW  02
06EEA:  MOVLB  B
06EEC:  MOVWF  x53
06EEE:  MOVLW  33
06EF0:  MOVWF  x52
06EF2:  CLRF   x57
06EF4:  CLRF   x56
06EF6:  CLRF   x55
06EF8:  MOVLW  04
06EFA:  MOVWF  x54
06EFC:  MOVLB  0
06EFE:  CALL   2B8C
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
06F02:  MOVLW  48
06F04:  MOVWF  FF6
06F06:  MOVLW  1B
06F08:  MOVWF  FF7
06F0A:  MOVLW  00
06F0C:  MOVWF  FF8
06F0E:  MOVLW  0B
06F10:  MOVLB  B
06F12:  MOVWF  x4A
06F14:  MOVLB  0
06F16:  CALL   1F74
06F1A:  MOVFF  233,B4B
06F1E:  MOVLW  37
06F20:  MOVLB  B
06F22:  MOVWF  x4C
06F24:  MOVLB  0
06F26:  CALL   2188
06F2A:  MOVLW  20
06F2C:  BTFSS  FA6.6
06F2E:  GOTO   6F2C
06F32:  MOVLB  E
06F34:  MOVWF  xF9
06F36:  MOVFF  234,B4B
06F3A:  MOVLW  37
06F3C:  MOVLB  B
06F3E:  MOVWF  x4C
06F40:  MOVLB  0
06F42:  CALL   2188
06F46:  MOVLW  20
06F48:  BTFSS  FA6.6
06F4A:  GOTO   6F48
06F4E:  MOVLB  E
06F50:  MOVWF  xF9
06F52:  MOVFF  235,B4B
06F56:  MOVLW  37
06F58:  MOVLB  B
06F5A:  MOVWF  x4C
06F5C:  MOVLB  0
06F5E:  CALL   2188
06F62:  MOVLW  20
06F64:  BTFSS  FA6.6
06F66:  GOTO   6F64
06F6A:  MOVLB  E
06F6C:  MOVWF  xF9
06F6E:  MOVFF  236,B4B
06F72:  MOVLW  37
06F74:  MOVLB  B
06F76:  MOVWF  x4C
06F78:  MOVLB  0
06F7A:  CALL   2188
06F7E:  MOVLW  0D
06F80:  BTFSS  FA6.6
06F82:  GOTO   6F80
06F86:  MOVLB  E
06F88:  MOVWF  xF9
06F8A:  MOVLW  0A
06F8C:  MOVLB  0
06F8E:  BTFSS  FA6.6
06F90:  GOTO   6F8E
06F94:  MOVLB  E
06F96:  MOVWF  xF9
....................    fprintf(PC, "End Flash Read Address\r\n");
06F98:  MOVLW  6A
06F9A:  MOVWF  FF6
06F9C:  MOVLW  1B
06F9E:  MOVWF  FF7
06FA0:  MOVLW  00
06FA2:  MOVWF  FF8
06FA4:  MOVLB  0
06FA6:  CALL   1F3E
06FAA:  GOTO   E296 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase and Reset\r\n");
*
0719E:  MOVLW  84
071A0:  MOVWF  FF6
071A2:  MOVLW  1B
071A4:  MOVWF  FF7
071A6:  MOVLW  00
071A8:  MOVWF  FF8
071AA:  CALL   1F3E
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
071AE:  MOVLB  2
071B0:  MOVF   x2D,W
071B2:  MOVWF  FE9
071B4:  MOVF   x2E,W
071B6:  MOVWF  FEA
071B8:  MOVFF  FEF,22F
071BC:  MOVFF  22F,284
071C0:  CLRF   x85
071C2:  MOVLB  0
071C4:  CALL   4DAC
.................... 
....................    mode_misf_erase_all(parameter); // Erase all flash memory
071C8:  MOVFF  22E,230
071CC:  MOVFF  22D,22F
071D0:  CALL   55D2
....................    mode_misf_address_reset(parameter); // Reset the address area
071D4:  MOVFF  22E,230
071D8:  MOVFF  22D,22F
071DC:  GOTO   6FAE
.................... 
....................    fprintf(PC, "End Flash Erase and Reset\r\n");
071E0:  MOVLW  A2
071E2:  MOVWF  FF6
071E4:  MOVLW  1B
071E6:  MOVWF  FF7
071E8:  MOVLW  00
071EA:  MOVWF  FF8
071EC:  CALL   1F3E
071F0:  GOTO   E2A6 (RETURN)
.................... }
.................... // ========================== SMF Command ============================
.................... void mode_smf_copy(int8 parameter[])
.................... {
....................    printf("Start Flash SMF Copy\r\n");
071F4:  MOVLW  BE
071F6:  MOVWF  FF6
071F8:  MOVLW  1B
071FA:  MOVWF  FF7
071FC:  MOVLW  00
071FE:  MOVWF  FF8
07200:  CALL   1F3E
....................    flash_setting(mis_fm);
07204:  MOVFF  115,33B
07208:  MOVFF  114,33A
0720C:  MOVFF  113,339
07210:  MOVFF  112,338
07214:  CALL   6690
....................    flash_setting(smf);
07218:  MOVFF  119,33B
0721C:  MOVFF  118,33A
07220:  MOVFF  117,339
07224:  MOVFF  116,338
07228:  CALL   6690
....................    
....................    // 統合管理システムを使用したコピー操作
....................    int8 mission_id = parameter[0];
....................    
....................    // 未コピーデータの自動転送をキューに追加
....................    //enqueue_auto_transfer(mission_id);
....................    
....................    // Example copy operation with integration system
....................    int32 src_address = 0x00000000;
....................    int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
0722C:  MOVLB  2
0722E:  MOVF   x2D,W
07230:  MOVWF  FE9
07232:  MOVF   x2E,W
07234:  MOVWF  FEA
07236:  MOVFF  FEF,22F
0723A:  CLRF   x33
0723C:  CLRF   x32
0723E:  CLRF   x31
07240:  CLRF   x30
07242:  CLRF   x37
07244:  CLRF   x36
07246:  MOVLW  10
07248:  MOVWF  x35
0724A:  CLRF   x34
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
0724C:  MOVFF  115,B4D
07250:  MOVFF  114,B4C
07254:  MOVFF  113,B4B
07258:  MOVFF  112,B4A
0725C:  MOVFF  233,B51
07260:  MOVFF  232,B50
07264:  MOVFF  231,B4F
07268:  MOVFF  230,B4E
0726C:  MOVLW  02
0726E:  MOVLB  B
07270:  MOVWF  x53
07272:  MOVLW  38
07274:  MOVWF  x52
07276:  CLRF   x57
07278:  CLRF   x56
0727A:  MOVLW  01
0727C:  MOVWF  x55
0727E:  CLRF   x54
07280:  MOVLB  0
07282:  CALL   2B8C
....................    write_data_bytes(smf, dest_address, read_data, 256);
07286:  MOVFF  119,B91
0728A:  MOVFF  118,B90
0728E:  MOVFF  117,B8F
07292:  MOVFF  116,B8E
07296:  MOVFF  237,B95
0729A:  MOVFF  236,B94
0729E:  MOVFF  235,B93
072A2:  MOVFF  234,B92
072A6:  MOVLW  02
072A8:  MOVLB  B
072AA:  MOVWF  x97
072AC:  MOVLW  38
072AE:  MOVWF  x96
072B0:  MOVLW  01
072B2:  MOVWF  x99
072B4:  CLRF   x98
072B6:  MOVLB  0
072B8:  CALL   3B7C
....................    
....................    // 転送完了後のカウンタ更新
....................    //complete_transfer_and_update_counter(mission_id, 256);
....................    
....................    printf("End Flash SMF Copy\r\n");
072BC:  MOVLW  D6
072BE:  MOVWF  FF6
072C0:  MOVLW  1B
072C2:  MOVWF  FF7
072C4:  MOVLW  00
072C6:  MOVWF  FF8
072C8:  CALL   1F3E
072CC:  GOTO   E2B6 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
*
073F2:  MOVLW  EC
073F4:  MOVWF  FF6
073F6:  MOVLW  1B
073F8:  MOVWF  FF7
073FA:  MOVLW  00
073FC:  MOVWF  FF8
073FE:  CALL   1F3E
....................    unsigned int32 read_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
....................    unsigned int16 read_packetnum = 
....................       ((unsigned int16)parameter[6] << 8) |
....................       ((unsigned int16)parameter[7]);
....................    
....................    unsigned int8 read_data[PACKET_SIZE];
07402:  MOVLW  01
07404:  MOVLB  2
07406:  ADDWF  x2D,W
07408:  MOVWF  FE9
0740A:  MOVLW  00
0740C:  ADDWFC x2E,W
0740E:  MOVWF  FEA
07410:  MOVF   FEF,W
07412:  CLRF   x79
07414:  CLRF   x78
07416:  CLRF   x77
07418:  MOVWF  x76
0741A:  MOVFF  276,279
0741E:  CLRF   x76
07420:  CLRF   x77
07422:  CLRF   x78
07424:  MOVLW  02
07426:  ADDWF  x2D,W
07428:  MOVWF  FE9
0742A:  MOVLW  00
0742C:  ADDWFC x2E,W
0742E:  MOVWF  FEA
07430:  MOVF   FEF,W
07432:  CLRF   x7E
07434:  CLRF   x7D
07436:  CLRF   x7C
07438:  MOVWF  x7B
0743A:  MOVFF  27C,03
0743E:  MOVFF  27B,02
07442:  CLRF   00
07444:  CLRF   01
07446:  MOVF   00,W
07448:  IORWF  x76,F
0744A:  MOVF   01,W
0744C:  IORWF  x77,F
0744E:  MOVF   02,W
07450:  IORWF  x78,F
07452:  MOVF   03,W
07454:  IORWF  x79,F
07456:  MOVLW  03
07458:  ADDWF  x2D,W
0745A:  MOVWF  FE9
0745C:  MOVLW  00
0745E:  ADDWFC x2E,W
07460:  MOVWF  FEA
07462:  MOVF   FEF,W
07464:  CLRF   x7E
07466:  CLRF   x7D
07468:  CLRF   x7C
0746A:  MOVWF  x7B
0746C:  MOVFF  27D,03
07470:  MOVFF  27C,02
07474:  MOVFF  27B,01
07478:  CLRF   00
0747A:  MOVF   00,W
0747C:  IORWF  x76,F
0747E:  MOVF   01,W
07480:  IORWF  x77,F
07482:  MOVF   02,W
07484:  IORWF  x78,F
07486:  MOVF   03,W
07488:  IORWF  x79,F
0748A:  MOVLW  04
0748C:  ADDWF  x2D,W
0748E:  MOVWF  FE9
07490:  MOVLW  00
07492:  ADDWFC x2E,W
07494:  MOVWF  FEA
07496:  MOVF   FEF,W
07498:  MOVWF  00
0749A:  CLRF   01
0749C:  CLRF   02
0749E:  CLRF   03
074A0:  MOVF   00,W
074A2:  IORWF  x76,W
074A4:  MOVWF  x2F
074A6:  MOVF   01,W
074A8:  IORWF  x77,W
074AA:  MOVWF  x30
074AC:  MOVF   02,W
074AE:  IORWF  x78,W
074B0:  MOVWF  x31
074B2:  MOVF   03,W
074B4:  IORWF  x79,W
074B6:  MOVWF  x32
074B8:  MOVLW  06
074BA:  ADDWF  x2D,W
074BC:  MOVWF  FE9
074BE:  MOVLW  00
074C0:  ADDWFC x2E,W
074C2:  MOVWF  FEA
074C4:  MOVF   FEF,W
074C6:  CLRF   x77
074C8:  MOVWF  x76
074CA:  MOVFF  276,277
074CE:  CLRF   x76
074D0:  MOVLW  07
074D2:  ADDWF  x2D,W
074D4:  MOVWF  FE9
074D6:  MOVLW  00
074D8:  ADDWFC x2E,W
074DA:  MOVWF  FEA
074DC:  MOVF   FEF,W
074DE:  CLRF   03
074E0:  IORWF  x76,W
074E2:  MOVWF  x33
074E4:  MOVF   03,W
074E6:  IORWF  x77,W
074E8:  MOVWF  x34
.................... 
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", read_address);
074EA:  MOVLW  04
074EC:  MOVWF  FF6
074EE:  MOVLW  1C
074F0:  MOVWF  FF7
074F2:  MOVLW  00
074F4:  MOVWF  FF8
074F6:  MOVLW  0E
074F8:  MOVLB  B
074FA:  MOVWF  x4A
074FC:  MOVLB  0
074FE:  CALL   1F74
07502:  MOVFF  232,B4B
07506:  MOVLW  37
07508:  MOVLB  B
0750A:  MOVWF  x4C
0750C:  MOVLB  0
0750E:  CALL   2188
07512:  MOVFF  231,B4B
07516:  MOVLW  37
07518:  MOVLB  B
0751A:  MOVWF  x4C
0751C:  MOVLB  0
0751E:  CALL   2188
07522:  MOVFF  230,B4B
07526:  MOVLW  37
07528:  MOVLB  B
0752A:  MOVWF  x4C
0752C:  MOVLB  0
0752E:  CALL   2188
07532:  MOVFF  22F,B4B
07536:  MOVLW  37
07538:  MOVLB  B
0753A:  MOVWF  x4C
0753C:  MOVLB  0
0753E:  CALL   2188
07542:  MOVLW  0D
07544:  BTFSS  FA6.6
07546:  GOTO   7544
0754A:  MOVLB  E
0754C:  MOVWF  xF9
0754E:  MOVLW  0A
07550:  MOVLB  0
07552:  BTFSS  FA6.6
07554:  GOTO   7552
07558:  MOVLB  E
0755A:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", read_packetnum);
0755C:  MOVLW  1A
0755E:  MOVWF  FF6
07560:  MOVLW  1C
07562:  MOVWF  FF7
07564:  MOVLW  00
07566:  MOVWF  FF8
07568:  MOVLW  0E
0756A:  MOVLB  B
0756C:  MOVWF  x4A
0756E:  MOVLB  0
07570:  CALL   1F74
07574:  MOVFF  234,B4B
07578:  MOVLW  37
0757A:  MOVLB  B
0757C:  MOVWF  x4C
0757E:  MOVLB  0
07580:  CALL   2188
07584:  MOVFF  233,B4B
07588:  MOVLW  37
0758A:  MOVLB  B
0758C:  MOVWF  x4C
0758E:  MOVLB  0
07590:  CALL   2188
07594:  MOVLW  0D
07596:  BTFSS  FA6.6
07598:  GOTO   7596
0759C:  MOVLB  E
0759E:  MOVWF  xF9
075A0:  MOVLW  0A
075A2:  MOVLB  0
075A4:  BTFSS  FA6.6
075A6:  GOTO   75A4
075AA:  MOVLB  E
075AC:  MOVWF  xF9
....................    fprintf(PC, "Read Data\r\n");
075AE:  MOVLW  30
075B0:  MOVWF  FF6
075B2:  MOVLW  1C
075B4:  MOVWF  FF7
075B6:  MOVLW  00
075B8:  MOVWF  FF8
075BA:  MOVLB  0
075BC:  CALL   1F3E
.................... 
....................    while (read_packetnum > 0) {
075C0:  MOVLB  2
075C2:  MOVF   x33,F
075C4:  BTFSC  FD8.2
075C6:  BRA    75CE
075C8:  MOVLB  0
075CA:  GOTO   75E0
075CE:  MOVLB  0
075D0:  MOVLB  2
075D2:  MOVF   x34,F
075D4:  BTFSS  FD8.2
075D6:  BRA    75DE
075D8:  MOVLB  0
075DA:  GOTO   76EA
075DE:  MOVLB  0
....................       fprintf(PC, "Remaining packets to read: %lu\r\n", read_packetnum);
075E0:  MOVLW  3C
075E2:  MOVWF  FF6
075E4:  MOVLW  1C
075E6:  MOVWF  FF7
075E8:  MOVLW  00
075EA:  MOVWF  FF8
075EC:  MOVLW  1B
075EE:  MOVLB  B
075F0:  MOVWF  x4A
075F2:  MOVLB  0
075F4:  CALL   1F74
075F8:  MOVLW  10
075FA:  MOVWF  FE9
075FC:  MOVFF  234,277
07600:  MOVFF  233,276
07604:  GOTO   72D0
07608:  MOVLW  0D
0760A:  BTFSS  FA6.6
0760C:  GOTO   760A
07610:  MOVLB  E
07612:  MOVWF  xF9
07614:  MOVLW  0A
07616:  MOVLB  0
07618:  BTFSS  FA6.6
0761A:  GOTO   7618
0761E:  MOVLB  E
07620:  MOVWF  xF9
.................... 
....................       read_data_bytes(smf, read_address, read_data, PACKET_SIZE);
07622:  MOVFF  119,B4D
07626:  MOVFF  118,B4C
0762A:  MOVFF  117,B4B
0762E:  MOVFF  116,B4A
07632:  MOVFF  232,B51
07636:  MOVFF  231,B50
0763A:  MOVFF  230,B4F
0763E:  MOVFF  22F,B4E
07642:  MOVLW  02
07644:  MOVLB  B
07646:  MOVWF  x53
07648:  MOVLW  35
0764A:  MOVWF  x52
0764C:  CLRF   x57
0764E:  CLRF   x56
07650:  CLRF   x55
07652:  MOVLW  40
07654:  MOVWF  x54
07656:  MOVLB  0
07658:  CALL   2B8C
.................... 
....................       for (int i = 0; i < PACKET_SIZE; i++) {
0765C:  MOVLB  2
0765E:  CLRF   x75
07660:  MOVLB  0
07662:  MOVLB  2
07664:  MOVF   x75,W
07666:  SUBLW  3F
07668:  BTFSC  FD8.0
0766A:  BRA    7672
0766C:  MOVLB  0
0766E:  GOTO   76B0
07672:  MOVLB  0
....................          fprintf(PC, "%02X ", read_data[i]);
07674:  CLRF   03
07676:  MOVLB  2
07678:  MOVF   x75,W
0767A:  ADDLW  35
0767C:  MOVWF  FE9
0767E:  MOVLW  02
07680:  ADDWFC 03,W
07682:  MOVWF  FEA
07684:  MOVFF  FEF,276
07688:  MOVFF  276,B4B
0768C:  MOVLW  37
0768E:  MOVLB  B
07690:  MOVWF  x4C
07692:  MOVLB  0
07694:  CALL   2188
07698:  MOVLW  20
0769A:  BTFSS  FA6.6
0769C:  GOTO   769A
076A0:  MOVLB  E
076A2:  MOVWF  xF9
076A4:  MOVLB  0
076A6:  MOVLB  2
076A8:  INCF   x75,F
076AA:  MOVLB  0
076AC:  GOTO   7662
....................       }
....................       fprintf(PC, "\r\n");
076B0:  MOVLW  0D
076B2:  BTFSS  FA6.6
076B4:  GOTO   76B2
076B8:  MOVLB  E
076BA:  MOVWF  xF9
076BC:  MOVLW  0A
076BE:  MOVLB  0
076C0:  BTFSS  FA6.6
076C2:  GOTO   76C0
076C6:  MOVLB  E
076C8:  MOVWF  xF9
.................... 
....................       read_address += PACKET_SIZE;
076CA:  MOVLW  40
076CC:  MOVLB  2
076CE:  ADDWF  x2F,F
076D0:  MOVLW  00
076D2:  ADDWFC x30,F
076D4:  MOVLW  00
076D6:  ADDWFC x31,F
076D8:  MOVLW  00
076DA:  ADDWFC x32,F
....................       read_packetnum--;
076DC:  MOVF   x33,W
076DE:  BTFSC  FD8.2
076E0:  DECF   x34,F
076E2:  DECF   x33,F
076E4:  MOVLB  0
076E6:  GOTO   75C0
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
076EA:  MOVLW  5E
076EC:  MOVWF  FF6
076EE:  MOVLW  1C
076F0:  MOVWF  FF7
076F2:  MOVLW  00
076F4:  MOVWF  FF8
076F6:  CALL   1F3E
076FA:  GOTO   E2C6 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_smf_erase(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Erase\r\n");
076FE:  MOVLW  76
07700:  MOVWF  FF6
07702:  MOVLW  1C
07704:  MOVWF  FF7
07706:  MOVLW  00
07708:  MOVWF  FF8
0770A:  CALL   1F3E
....................    flash_setting(smf);
0770E:  MOVFF  119,33B
07712:  MOVFF  118,33A
07716:  MOVFF  117,339
0771A:  MOVFF  116,338
0771E:  CALL   6690
....................    unsigned int32 erase_address = 0x00000000; // Example address
07722:  MOVLB  2
07724:  CLRF   x32
07726:  CLRF   x31
07728:  CLRF   x30
0772A:  CLRF   x2F
....................    sector_erase(smf, erase_address); // Erase the sector
0772C:  MOVFF  119,B8F
07730:  MOVFF  118,B8E
07734:  MOVFF  117,B8D
07738:  MOVFF  116,B8C
0773C:  MOVFF  232,B93
07740:  MOVFF  231,B92
07744:  MOVFF  230,B91
07748:  MOVFF  22F,B90
0774C:  MOVLB  0
0774E:  CALL   4060
....................    fprintf(PC, "End Flash SMF Erase\r\n");
07752:  MOVLW  8E
07754:  MOVWF  FF6
07756:  MOVLW  1C
07758:  MOVWF  FF7
0775A:  MOVLW  00
0775C:  MOVWF  FF8
0775E:  CALL   1F3E
07762:  GOTO   E2D6 (RETURN)
.................... }  
.................... 
.................... void mode_misf_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
*
06FAE:  MOVLW  A4
06FB0:  MOVWF  FF6
06FB2:  MOVLW  1C
06FB4:  MOVWF  FF7
06FB6:  MOVLW  00
06FB8:  MOVWF  FF8
06FBA:  CALL   1F3E
....................    piclog_make(parameter[0], PICLOG_PARAM_START); 
06FBE:  MOVLB  2
06FC0:  MOVF   x2F,W
06FC2:  MOVWF  FE9
06FC4:  MOVF   x30,W
06FC6:  MOVWF  FEA
06FC8:  MOVFF  FEF,273
06FCC:  MOVFF  273,284
06FD0:  CLRF   x85
06FD2:  MOVLB  0
06FD4:  CALL   4DAC
....................    FlashData_t flash_data;
....................    memset(flash_data.bytes, 0, PACKET_SIZE);
06FD8:  MOVLW  02
06FDA:  MOVWF  FEA
06FDC:  MOVLW  31
06FDE:  MOVWF  FE9
06FE0:  CLRF   00
06FE2:  CLRF   02
06FE4:  MOVLW  40
06FE6:  MOVWF  01
06FE8:  CALL   2B68
....................    /*
....................    for (int i = 0; i < PACKET_SIZE; i++) {
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
....................    }
....................    */
....................    fprintf(PC, "\r\n");
06FEC:  MOVLW  0D
06FEE:  BTFSS  FA6.6
06FF0:  GOTO   6FEE
06FF4:  MOVLB  E
06FF6:  MOVWF  xF9
06FF8:  MOVLW  0A
06FFA:  MOVLB  0
06FFC:  BTFSS  FA6.6
06FFE:  GOTO   6FFC
07002:  MOVLB  E
07004:  MOVWF  xF9
....................    flash_data.packet.crc = calc_crc8(flash_data.bytes, PACKET_SIZE-1);
07006:  MOVLW  02
07008:  MOVLB  B
0700A:  MOVWF  xD9
0700C:  MOVLW  31
0700E:  MOVWF  xD8
07010:  MOVLW  3F
07012:  MOVWF  xDA
07014:  MOVLB  0
07016:  CALL   2DA0
0701A:  MOVFF  01,270
....................    for (int i = 0; i < PACKET_SIZE; i++) {
0701E:  MOVLB  2
07020:  CLRF   x71
07022:  MOVLB  0
07024:  MOVLB  2
07026:  MOVF   x71,W
07028:  SUBLW  3F
0702A:  BTFSC  FD8.0
0702C:  BRA    7034
0702E:  MOVLB  0
07030:  GOTO   7072
07034:  MOVLB  0
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
07036:  CLRF   03
07038:  MOVLB  2
0703A:  MOVF   x71,W
0703C:  ADDLW  31
0703E:  MOVWF  FE9
07040:  MOVLW  02
07042:  ADDWFC 03,W
07044:  MOVWF  FEA
07046:  MOVFF  FEF,273
0704A:  MOVFF  273,B4B
0704E:  MOVLW  37
07050:  MOVLB  B
07052:  MOVWF  x4C
07054:  MOVLB  0
07056:  CALL   2188
0705A:  MOVLW  20
0705C:  BTFSS  FA6.6
0705E:  GOTO   705C
07062:  MOVLB  E
07064:  MOVWF  xF9
07066:  MOVLB  0
07068:  MOVLB  2
0706A:  INCF   x71,F
0706C:  MOVLB  0
0706E:  GOTO   7024
....................    }
....................    fprintf(PC, "\r\n");
07072:  MOVLW  0D
07074:  BTFSS  FA6.6
07076:  GOTO   7074
0707A:  MOVLB  E
0707C:  MOVWF  xF9
0707E:  MOVLW  0A
07080:  MOVLB  0
07082:  BTFSS  FA6.6
07084:  GOTO   7082
07088:  MOVLB  E
0708A:  MOVWF  xF9
....................    write_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, flash_data.bytes, PACKET_SIZE);
0708C:  MOVFF  115,B91
07090:  MOVFF  114,B90
07094:  MOVFF  113,B8F
07098:  MOVFF  112,B8E
0709C:  MOVLB  B
0709E:  CLRF   x95
070A0:  CLRF   x94
070A2:  CLRF   x93
070A4:  CLRF   x92
070A6:  MOVLW  02
070A8:  MOVWF  x97
070AA:  MOVLW  31
070AC:  MOVWF  x96
070AE:  CLRF   x99
070B0:  MOVLW  40
070B2:  MOVWF  x98
070B4:  MOVLB  0
070B6:  CALL   3B7C
....................    memset(flash_data.bytes, 0, PACKET_SIZE);
070BA:  MOVLW  02
070BC:  MOVWF  FEA
070BE:  MOVLW  31
070C0:  MOVWF  FE9
070C2:  CLRF   00
070C4:  CLRF   02
070C6:  MOVLW  40
070C8:  MOVWF  01
070CA:  CALL   2B68
....................    read_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, flash_data.bytes, PACKET_SIZE);
070CE:  MOVFF  115,B4D
070D2:  MOVFF  114,B4C
070D6:  MOVFF  113,B4B
070DA:  MOVFF  112,B4A
070DE:  MOVLB  B
070E0:  CLRF   x51
070E2:  CLRF   x50
070E4:  CLRF   x4F
070E6:  CLRF   x4E
070E8:  MOVLW  02
070EA:  MOVWF  x53
070EC:  MOVLW  31
070EE:  MOVWF  x52
070F0:  CLRF   x57
070F2:  CLRF   x56
070F4:  CLRF   x55
070F6:  MOVLW  40
070F8:  MOVWF  x54
070FA:  MOVLB  0
070FC:  CALL   2B8C
....................    flash_data.packet.crc = calc_crc8(flash_data.bytes, PACKET_SIZE-1);
07100:  MOVLW  02
07102:  MOVLB  B
07104:  MOVWF  xD9
07106:  MOVLW  31
07108:  MOVWF  xD8
0710A:  MOVLW  3F
0710C:  MOVWF  xDA
0710E:  MOVLB  0
07110:  CALL   2DA0
07114:  MOVFF  01,270
....................    for (int i = 0; i < PACKET_SIZE; i++) {
07118:  MOVLB  2
0711A:  CLRF   x72
0711C:  MOVLB  0
0711E:  MOVLB  2
07120:  MOVF   x72,W
07122:  SUBLW  3F
07124:  BTFSC  FD8.0
07126:  BRA    712E
07128:  MOVLB  0
0712A:  GOTO   716C
0712E:  MOVLB  0
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
07130:  CLRF   03
07132:  MOVLB  2
07134:  MOVF   x72,W
07136:  ADDLW  31
07138:  MOVWF  FE9
0713A:  MOVLW  02
0713C:  ADDWFC 03,W
0713E:  MOVWF  FEA
07140:  MOVFF  FEF,273
07144:  MOVFF  273,B4B
07148:  MOVLW  37
0714A:  MOVLB  B
0714C:  MOVWF  x4C
0714E:  MOVLB  0
07150:  CALL   2188
07154:  MOVLW  20
07156:  BTFSS  FA6.6
07158:  GOTO   7156
0715C:  MOVLB  E
0715E:  MOVWF  xF9
07160:  MOVLB  0
07162:  MOVLB  2
07164:  INCF   x72,F
07166:  MOVLB  0
07168:  GOTO   711E
....................    }
....................    misf_init(); // Update the address area after writing
0716C:  CALL   3616
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
07170:  MOVLB  2
07172:  MOVF   x2F,W
07174:  MOVWF  FE9
07176:  MOVF   x30,W
07178:  MOVWF  FEA
0717A:  MOVFF  FEF,273
0717E:  MOVFF  273,284
07182:  SETF   x85
07184:  MOVLB  0
07186:  CALL   4DAC
....................    fprintf(PC, "End Flash Address Reset\r\n");
0718A:  MOVLW  C0
0718C:  MOVWF  FF6
0718E:  MOVLW  1C
07190:  MOVWF  FF7
07192:  MOVLW  00
07194:  MOVWF  FF8
07196:  CALL   1F3E
0719A:  GOTO   71E0 (RETURN)
.................... }
.................... 
.................... 
.................... // ---------- SMF Command Functions ----------
.................... void mode_smf_read_force(int8 parameter[])
*
079BE:  MOVLW  01
079C0:  MOVLB  2
079C2:  ADDWF  x2D,W
079C4:  MOVWF  FE9
079C6:  MOVLW  00
079C8:  ADDWFC x2E,W
079CA:  MOVWF  FEA
079CC:  MOVF   FEF,W
079CE:  CLRF   x7F
079D0:  CLRF   x7E
079D2:  CLRF   x7D
079D4:  MOVWF  x7C
079D6:  MOVFF  27C,27F
079DA:  CLRF   x7C
079DC:  CLRF   x7D
079DE:  CLRF   x7E
079E0:  MOVLW  02
079E2:  ADDWF  x2D,W
079E4:  MOVWF  FE9
079E6:  MOVLW  00
079E8:  ADDWFC x2E,W
079EA:  MOVWF  FEA
079EC:  MOVF   FEF,W
079EE:  CLRF   x84
079F0:  CLRF   x83
079F2:  CLRF   x82
079F4:  MOVWF  x81
079F6:  MOVFF  282,03
079FA:  MOVFF  281,02
079FE:  CLRF   00
07A00:  CLRF   01
07A02:  MOVF   00,W
07A04:  IORWF  x7C,F
07A06:  MOVF   01,W
07A08:  IORWF  x7D,F
07A0A:  MOVF   02,W
07A0C:  IORWF  x7E,F
07A0E:  MOVF   03,W
07A10:  IORWF  x7F,F
07A12:  MOVLW  03
07A14:  ADDWF  x2D,W
07A16:  MOVWF  FE9
07A18:  MOVLW  00
07A1A:  ADDWFC x2E,W
07A1C:  MOVWF  FEA
07A1E:  MOVF   FEF,W
07A20:  CLRF   x84
07A22:  CLRF   x83
07A24:  CLRF   x82
07A26:  MOVWF  x81
07A28:  MOVFF  283,03
07A2C:  MOVFF  282,02
07A30:  MOVFF  281,01
07A34:  CLRF   00
07A36:  MOVF   00,W
07A38:  IORWF  x7C,F
07A3A:  MOVF   01,W
07A3C:  IORWF  x7D,F
07A3E:  MOVF   02,W
07A40:  IORWF  x7E,F
07A42:  MOVF   03,W
07A44:  IORWF  x7F,F
07A46:  MOVLW  04
07A48:  ADDWF  x2D,W
07A4A:  MOVWF  FE9
07A4C:  MOVLW  00
07A4E:  ADDWFC x2E,W
07A50:  MOVWF  FEA
07A52:  MOVF   FEF,W
07A54:  MOVWF  00
07A56:  CLRF   01
07A58:  CLRF   02
07A5A:  CLRF   03
07A5C:  MOVF   00,W
07A5E:  IORWF  x7C,W
07A60:  MOVWF  x2F
07A62:  MOVF   01,W
07A64:  IORWF  x7D,W
07A66:  MOVWF  x30
07A68:  MOVF   02,W
07A6A:  IORWF  x7E,W
07A6C:  MOVWF  x31
07A6E:  MOVF   03,W
07A70:  IORWF  x7F,W
07A72:  MOVWF  x32
07A74:  MOVLW  07
07A76:  ADDWF  x2D,W
07A78:  MOVWF  FE9
07A7A:  MOVLW  00
07A7C:  ADDWFC x2E,W
07A7E:  MOVWF  FEA
07A80:  MOVF   FEF,W
07A82:  CLRF   x7D
07A84:  MOVWF  x7C
07A86:  MOVFF  27C,27D
07A8A:  CLRF   x7C
07A8C:  MOVLW  08
07A8E:  ADDWF  x2D,W
07A90:  MOVWF  FE9
07A92:  MOVLW  00
07A94:  ADDWFC x2E,W
07A96:  MOVWF  FEA
07A98:  MOVF   FEF,W
07A9A:  CLRF   03
07A9C:  IORWF  x7C,W
07A9E:  MOVWF  x33
07AA0:  MOVF   03,W
07AA2:  IORWF  x7D,W
07AA4:  MOVWF  x34
.................... {
....................    int32 address = 
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
....................    
....................    int16 packet_num = 
....................       ((int16)parameter[7] << 8) |
....................       ((int16)parameter[8]);
....................       
....................    int8 read_data[PACKET_SIZE] = {0x00}; // Initialize read data buffer
07AA6:  CLRF   x35
07AA8:  CLRF   x36
07AAA:  CLRF   x37
07AAC:  CLRF   x38
07AAE:  CLRF   x39
07AB0:  CLRF   x3A
07AB2:  CLRF   x3B
07AB4:  CLRF   x3C
07AB6:  CLRF   x3D
07AB8:  CLRF   x3E
07ABA:  CLRF   x3F
07ABC:  CLRF   x40
07ABE:  CLRF   x41
07AC0:  CLRF   x42
07AC2:  CLRF   x43
07AC4:  CLRF   x44
07AC6:  CLRF   x45
07AC8:  CLRF   x46
07ACA:  CLRF   x47
07ACC:  CLRF   x48
07ACE:  CLRF   x49
07AD0:  CLRF   x4A
07AD2:  CLRF   x4B
07AD4:  CLRF   x4C
07AD6:  CLRF   x4D
07AD8:  CLRF   x4E
07ADA:  CLRF   x4F
07ADC:  CLRF   x50
07ADE:  CLRF   x51
07AE0:  CLRF   x52
07AE2:  CLRF   x53
07AE4:  CLRF   x54
07AE6:  CLRF   x55
07AE8:  CLRF   x56
07AEA:  CLRF   x57
07AEC:  CLRF   x58
07AEE:  CLRF   x59
07AF0:  CLRF   x5A
07AF2:  CLRF   x5B
07AF4:  CLRF   x5C
07AF6:  CLRF   x5D
07AF8:  CLRF   x5E
07AFA:  CLRF   x5F
07AFC:  CLRF   x60
07AFE:  CLRF   x61
07B00:  CLRF   x62
07B02:  CLRF   x63
07B04:  CLRF   x64
07B06:  CLRF   x65
07B08:  CLRF   x66
07B0A:  CLRF   x67
07B0C:  CLRF   x68
07B0E:  CLRF   x69
07B10:  CLRF   x6A
07B12:  CLRF   x6B
07B14:  CLRF   x6C
07B16:  CLRF   x6D
07B18:  CLRF   x6E
07B1A:  CLRF   x6F
07B1C:  CLRF   x70
07B1E:  CLRF   x71
07B20:  CLRF   x72
07B22:  CLRF   x73
07B24:  CLRF   x74
....................    if(!is_connect(smf)) {
07B26:  MOVFF  119,2D4
07B2A:  MOVFF  118,2D3
07B2E:  MOVFF  117,2D2
07B32:  MOVFF  116,2D1
07B36:  MOVLB  0
07B38:  CALL   2AA0
07B3C:  MOVF   01,F
07B3E:  BTFSS  FD8.2
07B40:  GOTO   7B58
....................       printf("SMF is not connected\r\n");
07B44:  MOVLW  DA
07B46:  MOVWF  FF6
07B48:  MOVLW  1C
07B4A:  MOVWF  FF7
07B4C:  MOVLW  00
07B4E:  MOVWF  FF8
07B50:  CALL   1F3E
....................       return;
07B54:  GOTO   7DA8
....................    }
....................    printf("Start Flash SMF Read Force\r\n");
07B58:  MOVLW  F2
07B5A:  MOVWF  FF6
07B5C:  MOVLW  1C
07B5E:  MOVWF  FF7
07B60:  MOVLW  00
07B62:  MOVWF  FF8
07B64:  CALL   1F3E
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
07B68:  MOVLB  2
07B6A:  MOVF   x2D,W
07B6C:  MOVWF  FE9
07B6E:  MOVF   x2E,W
07B70:  MOVWF  FEA
07B72:  MOVFF  FEF,27C
07B76:  MOVFF  27C,284
07B7A:  CLRF   x85
07B7C:  MOVLB  0
07B7E:  CALL   4DAC
.................... 
....................    // 統合管理システムからキューに追加
....................    // enqueue_read_data(address, packet_num * PACKET_SIZE);
.................... 
....................    printf("\tAddress  : 0x%08LX\r\n", address);
07B82:  MOVLW  10
07B84:  MOVWF  FF6
07B86:  MOVLW  1D
07B88:  MOVWF  FF7
07B8A:  MOVLW  00
07B8C:  MOVWF  FF8
07B8E:  MOVLW  0E
07B90:  MOVLB  B
07B92:  MOVWF  x4A
07B94:  MOVLB  0
07B96:  CALL   1F74
07B9A:  MOVFF  232,B4B
07B9E:  MOVLW  37
07BA0:  MOVLB  B
07BA2:  MOVWF  x4C
07BA4:  MOVLB  0
07BA6:  CALL   2188
07BAA:  MOVFF  231,B4B
07BAE:  MOVLW  37
07BB0:  MOVLB  B
07BB2:  MOVWF  x4C
07BB4:  MOVLB  0
07BB6:  CALL   2188
07BBA:  MOVFF  230,B4B
07BBE:  MOVLW  37
07BC0:  MOVLB  B
07BC2:  MOVWF  x4C
07BC4:  MOVLB  0
07BC6:  CALL   2188
07BCA:  MOVFF  22F,B4B
07BCE:  MOVLW  37
07BD0:  MOVLB  B
07BD2:  MOVWF  x4C
07BD4:  MOVLB  0
07BD6:  CALL   2188
07BDA:  MOVLW  0D
07BDC:  BTFSS  FA6.6
07BDE:  GOTO   7BDC
07BE2:  MOVLB  E
07BE4:  MOVWF  xF9
07BE6:  MOVLW  0A
07BE8:  MOVLB  0
07BEA:  BTFSS  FA6.6
07BEC:  GOTO   7BEA
07BF0:  MOVLB  E
07BF2:  MOVWF  xF9
....................    printf("\tPacketNum: 0x%04LX\r\n", packet_num);
07BF4:  MOVLW  26
07BF6:  MOVWF  FF6
07BF8:  MOVLW  1D
07BFA:  MOVWF  FF7
07BFC:  MOVLW  00
07BFE:  MOVWF  FF8
07C00:  MOVLW  0E
07C02:  MOVLB  B
07C04:  MOVWF  x4A
07C06:  MOVLB  0
07C08:  CALL   1F74
07C0C:  MOVFF  234,B4B
07C10:  MOVLW  37
07C12:  MOVLB  B
07C14:  MOVWF  x4C
07C16:  MOVLB  0
07C18:  CALL   2188
07C1C:  MOVFF  233,B4B
07C20:  MOVLW  37
07C22:  MOVLB  B
07C24:  MOVWF  x4C
07C26:  MOVLB  0
07C28:  CALL   2188
07C2C:  MOVLW  0D
07C2E:  BTFSS  FA6.6
07C30:  GOTO   7C2E
07C34:  MOVLB  E
07C36:  MOVWF  xF9
07C38:  MOVLW  0A
07C3A:  MOVLB  0
07C3C:  BTFSS  FA6.6
07C3E:  GOTO   7C3C
07C42:  MOVLB  E
07C44:  MOVWF  xF9
....................    printf("read data\r\n");
07C46:  MOVLW  3C
07C48:  MOVWF  FF6
07C4A:  MOVLW  1D
07C4C:  MOVWF  FF7
07C4E:  MOVLW  00
07C50:  MOVWF  FF8
07C52:  MOVLB  0
07C54:  CALL   1F3E
....................    for (int16 packet_count = 0; packet_count < packet_num; packet_count++)
07C58:  MOVLB  2
07C5A:  CLRF   x76
07C5C:  CLRF   x75
07C5E:  MOVLB  0
07C60:  MOVLB  2
07C62:  MOVF   x76,W
07C64:  SUBWF  x34,W
07C66:  BTFSC  FD8.0
07C68:  BRA    7C70
07C6A:  MOVLB  0
07C6C:  GOTO   7D7E
07C70:  MOVLB  0
07C72:  BTFSS  FD8.2
07C74:  GOTO   7C8A
07C78:  MOVLB  2
07C7A:  MOVF   x33,W
07C7C:  SUBWF  x75,W
07C7E:  BTFSS  FD8.0
07C80:  BRA    7C88
07C82:  MOVLB  0
07C84:  GOTO   7D7E
07C88:  MOVLB  0
....................    {
....................       int32 current_address = address + (packet_count * PACKET_SIZE);
07C8A:  MOVLB  2
07C8C:  RLCF   x75,W
07C8E:  MOVWF  02
07C90:  RLCF   x76,W
07C92:  MOVWF  03
07C94:  RLCF   02,F
07C96:  RLCF   03,F
07C98:  RLCF   02,F
07C9A:  RLCF   03,F
07C9C:  RLCF   02,F
07C9E:  RLCF   03,F
07CA0:  RLCF   02,F
07CA2:  RLCF   03,F
07CA4:  RLCF   02,F
07CA6:  RLCF   03,F
07CA8:  MOVLW  C0
07CAA:  ANDWF  02,F
07CAC:  MOVF   02,W
07CAE:  ADDWF  x2F,W
07CB0:  MOVWF  x77
07CB2:  MOVF   03,W
07CB4:  ADDWFC x30,W
07CB6:  MOVWF  x78
07CB8:  MOVLW  00
07CBA:  ADDWFC x31,W
07CBC:  MOVWF  x79
07CBE:  MOVLW  00
07CC0:  ADDWFC x32,W
07CC2:  MOVWF  x7A
07CC4:  MOVLB  0
....................       read_data_bytes(smf, current_address, read_data, PACKET_SIZE);
07CC6:  MOVFF  119,B4D
07CCA:  MOVFF  118,B4C
07CCE:  MOVFF  117,B4B
07CD2:  MOVFF  116,B4A
07CD6:  MOVFF  27A,B51
07CDA:  MOVFF  279,B50
07CDE:  MOVFF  278,B4F
07CE2:  MOVFF  277,B4E
07CE6:  MOVLW  02
07CE8:  MOVLB  B
07CEA:  MOVWF  x53
07CEC:  MOVLW  35
07CEE:  MOVWF  x52
07CF0:  CLRF   x57
07CF2:  CLRF   x56
07CF4:  CLRF   x55
07CF6:  MOVLW  40
07CF8:  MOVWF  x54
07CFA:  MOVLB  0
07CFC:  CALL   2B8C
....................       for (int8 byte_count = 0; byte_count < PACKET_SIZE; byte_count++)
07D00:  MOVLB  2
07D02:  CLRF   x7B
07D04:  MOVLB  0
07D06:  MOVLB  2
07D08:  MOVF   x7B,W
07D0A:  SUBLW  3F
07D0C:  BTFSC  FD8.0
07D0E:  BRA    7D16
07D10:  MOVLB  0
07D12:  GOTO   7D54
07D16:  MOVLB  0
....................       {
....................          printf("%02X ", read_data[byte_count]);
07D18:  CLRF   03
07D1A:  MOVLB  2
07D1C:  MOVF   x7B,W
07D1E:  ADDLW  35
07D20:  MOVWF  FE9
07D22:  MOVLW  02
07D24:  ADDWFC 03,W
07D26:  MOVWF  FEA
07D28:  MOVFF  FEF,27C
07D2C:  MOVFF  27C,B4B
07D30:  MOVLW  37
07D32:  MOVLB  B
07D34:  MOVWF  x4C
07D36:  MOVLB  0
07D38:  CALL   2188
07D3C:  MOVLW  20
07D3E:  BTFSS  FA6.6
07D40:  GOTO   7D3E
07D44:  MOVLB  E
07D46:  MOVWF  xF9
07D48:  MOVLB  0
07D4A:  MOVLB  2
07D4C:  INCF   x7B,F
07D4E:  MOVLB  0
07D50:  GOTO   7D06
....................       }
....................       printf("\r\n");
07D54:  MOVLW  0D
07D56:  BTFSS  FA6.6
07D58:  GOTO   7D56
07D5C:  MOVLB  E
07D5E:  MOVWF  xF9
07D60:  MOVLW  0A
07D62:  MOVLB  0
07D64:  BTFSS  FA6.6
07D66:  GOTO   7D64
07D6A:  MOVLB  E
07D6C:  MOVWF  xF9
07D6E:  MOVLB  0
07D70:  MOVLB  2
07D72:  INCF   x75,F
07D74:  BTFSC  FD8.2
07D76:  INCF   x76,F
07D78:  MOVLB  0
07D7A:  GOTO   7C60
....................    }
.................... 
....................    printf("\r\nEnd Flash SMF Read Force\r\n");
07D7E:  MOVLW  48
07D80:  MOVWF  FF6
07D82:  MOVLW  1D
07D84:  MOVWF  FF7
07D86:  MOVLW  00
07D88:  MOVWF  FF8
07D8A:  CALL   1F3E
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
07D8E:  MOVLB  2
07D90:  MOVF   x2D,W
07D92:  MOVWF  FE9
07D94:  MOVF   x2E,W
07D96:  MOVWF  FEA
07D98:  MOVFF  FEF,27C
07D9C:  MOVFF  27C,284
07DA0:  SETF   x85
07DA2:  MOVLB  0
07DA4:  CALL   4DAC
07DA8:  GOTO   E2F6 (RETURN)
.................... }
.................... 
.................... void mode_smf_erase_force(int8 parameter[])
.................... {
....................    printf("Start SMF Erase All\r\n");
07DAC:  MOVLW  66
07DAE:  MOVWF  FF6
07DB0:  MOVLW  1D
07DB2:  MOVWF  FF7
07DB4:  MOVLW  00
07DB6:  MOVWF  FF8
07DB8:  CALL   1F3E
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
07DBC:  MOVLB  2
07DBE:  MOVF   x2D,W
07DC0:  MOVWF  FE9
07DC2:  MOVF   x2E,W
07DC4:  MOVWF  FEA
07DC6:  MOVFF  FEF,22F
....................    piclog_make(cmd, 0x00); // Log the command execution
07DCA:  MOVFF  22F,284
07DCE:  CLRF   x85
07DD0:  MOVLB  0
07DD2:  CALL   4DAC
....................    
.................... 
....................    
....................    for (int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_PICLOG_END_ADDRESS; address += SECTOR_64K_BYTE) {
07DD6:  MOVLW  06
07DD8:  MOVLB  2
07DDA:  MOVWF  x33
07DDC:  MOVLW  AA
07DDE:  MOVWF  x32
07DE0:  CLRF   x31
07DE2:  CLRF   x30
07DE4:  MOVLB  0
07DE6:  MOVLB  2
07DE8:  MOVF   x33,W
07DEA:  SUBLW  06
07DEC:  BTFSC  FD8.0
07DEE:  BRA    7DF6
07DF0:  MOVLB  0
07DF2:  GOTO   7E74
07DF6:  MOVLB  0
07DF8:  BTFSS  FD8.2
07DFA:  GOTO   7E40
07DFE:  MOVLB  2
07E00:  MOVF   x32,W
07E02:  SUBLW  AA
07E04:  BTFSC  FD8.0
07E06:  BRA    7E0E
07E08:  MOVLB  0
07E0A:  GOTO   7E74
07E0E:  MOVLB  0
07E10:  BTFSS  FD8.2
07E12:  GOTO   7E40
07E16:  MOVLB  2
07E18:  MOVF   x31,W
07E1A:  SUBLW  1F
07E1C:  BTFSC  FD8.0
07E1E:  BRA    7E26
07E20:  MOVLB  0
07E22:  GOTO   7E74
07E26:  MOVLB  0
07E28:  BTFSS  FD8.2
07E2A:  GOTO   7E40
07E2E:  MOVLB  2
07E30:  MOVF   x30,W
07E32:  SUBLW  FE
07E34:  BTFSC  FD8.0
07E36:  BRA    7E3E
07E38:  MOVLB  0
07E3A:  GOTO   7E74
07E3E:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
07E40:  MOVFF  119,B8F
07E44:  MOVFF  118,B8E
07E48:  MOVFF  117,B8D
07E4C:  MOVFF  116,B8C
07E50:  MOVFF  233,B93
07E54:  MOVFF  232,B92
07E58:  MOVFF  231,B91
07E5C:  MOVFF  230,B90
07E60:  CALL   4060
07E64:  MOVLW  01
07E66:  MOVLB  2
07E68:  ADDWF  x32,F
07E6A:  MOVLW  00
07E6C:  ADDWFC x33,F
07E6E:  MOVLB  0
07E70:  GOTO   7DE6
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
07E74:  MOVFF  22F,284
07E78:  MOVLB  2
07E7A:  SETF   x85
07E7C:  MOVLB  0
07E7E:  CALL   4DAC
....................    printf("End SMF Erase All\r\n");
07E82:  MOVLW  7C
07E84:  MOVWF  FF6
07E86:  MOVLW  1D
07E88:  MOVWF  FF7
07E8A:  MOVLW  00
07E8C:  MOVWF  FF8
07E8E:  CALL   1F3E
07E92:  GOTO   E306 (RETURN)
.................... }
.................... 
.................... void mode_smf_address_reset(int8 parameter[])
.................... {
....................    printf("Start SMF Reset\r\n");
*
07846:  MOVLW  90
07848:  MOVWF  FF6
0784A:  MOVLW  1D
0784C:  MOVWF  FF7
0784E:  MOVLW  00
07850:  MOVWF  FF8
07852:  CALL   1F3E
....................    piclog_make(parameter[0], PICLOG_PARAM_START);
07856:  MOVLB  2
07858:  MOVF   x2D,W
0785A:  MOVWF  FE9
0785C:  MOVF   x2E,W
0785E:  MOVWF  FEA
07860:  MOVFF  FEF,273
07864:  MOVFF  273,284
07868:  CLRF   x85
0786A:  MOVLB  0
0786C:  CALL   4DAC
....................    int8 writedata[PACKET_SIZE] = {0x00}; 
07870:  MOVLB  2
07872:  CLRF   x2F
07874:  CLRF   x30
07876:  CLRF   x31
07878:  CLRF   x32
0787A:  CLRF   x33
0787C:  CLRF   x34
0787E:  CLRF   x35
07880:  CLRF   x36
07882:  CLRF   x37
07884:  CLRF   x38
07886:  CLRF   x39
07888:  CLRF   x3A
0788A:  CLRF   x3B
0788C:  CLRF   x3C
0788E:  CLRF   x3D
07890:  CLRF   x3E
07892:  CLRF   x3F
07894:  CLRF   x40
07896:  CLRF   x41
07898:  CLRF   x42
0789A:  CLRF   x43
0789C:  CLRF   x44
0789E:  CLRF   x45
078A0:  CLRF   x46
078A2:  CLRF   x47
078A4:  CLRF   x48
078A6:  CLRF   x49
078A8:  CLRF   x4A
078AA:  CLRF   x4B
078AC:  CLRF   x4C
078AE:  CLRF   x4D
078B0:  CLRF   x4E
078B2:  CLRF   x4F
078B4:  CLRF   x50
078B6:  CLRF   x51
078B8:  CLRF   x52
078BA:  CLRF   x53
078BC:  CLRF   x54
078BE:  CLRF   x55
078C0:  CLRF   x56
078C2:  CLRF   x57
078C4:  CLRF   x58
078C6:  CLRF   x59
078C8:  CLRF   x5A
078CA:  CLRF   x5B
078CC:  CLRF   x5C
078CE:  CLRF   x5D
078D0:  CLRF   x5E
078D2:  CLRF   x5F
078D4:  CLRF   x60
078D6:  CLRF   x61
078D8:  CLRF   x62
078DA:  CLRF   x63
078DC:  CLRF   x64
078DE:  CLRF   x65
078E0:  CLRF   x66
078E2:  CLRF   x67
078E4:  CLRF   x68
078E6:  CLRF   x69
078E8:  CLRF   x6A
078EA:  CLRF   x6B
078EC:  CLRF   x6C
078EE:  CLRF   x6D
078F0:  CLRF   x6E
....................    for (int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_IV2_DATA_END_ADDRESS; address += SECTOR_64K_BYTE) {
078F2:  MOVLW  06
078F4:  MOVWF  x72
078F6:  MOVLW  AA
078F8:  MOVWF  x71
078FA:  CLRF   x70
078FC:  CLRF   x6F
078FE:  MOVLB  0
07900:  MOVLB  2
07902:  MOVF   x72,W
07904:  SUBLW  07
07906:  BTFSC  FD8.0
07908:  BRA    7910
0790A:  MOVLB  0
0790C:  GOTO   798E
07910:  MOVLB  0
07912:  BTFSS  FD8.2
07914:  GOTO   795A
07918:  MOVLB  2
0791A:  MOVF   x71,W
0791C:  SUBLW  48
0791E:  BTFSC  FD8.0
07920:  BRA    7928
07922:  MOVLB  0
07924:  GOTO   798E
07928:  MOVLB  0
0792A:  BTFSS  FD8.2
0792C:  GOTO   795A
07930:  MOVLB  2
07932:  MOVF   x70,W
07934:  SUBLW  3F
07936:  BTFSC  FD8.0
07938:  BRA    7940
0793A:  MOVLB  0
0793C:  GOTO   798E
07940:  MOVLB  0
07942:  BTFSS  FD8.2
07944:  GOTO   795A
07948:  MOVLB  2
0794A:  MOVF   x6F,W
0794C:  SUBLW  FE
0794E:  BTFSC  FD8.0
07950:  BRA    7958
07952:  MOVLB  0
07954:  GOTO   798E
07958:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
0795A:  MOVFF  119,B8F
0795E:  MOVFF  118,B8E
07962:  MOVFF  117,B8D
07966:  MOVFF  116,B8C
0796A:  MOVFF  272,B93
0796E:  MOVFF  271,B92
07972:  MOVFF  270,B91
07976:  MOVFF  26F,B90
0797A:  CALL   4060
0797E:  MOVLW  01
07980:  MOVLB  2
07982:  ADDWF  x71,F
07984:  MOVLW  00
07986:  ADDWFC x72,F
07988:  MOVLB  0
0798A:  GOTO   7900
....................    }
....................    smf_data_table_init(); // Update the address area after writing
0798E:  CALL   7766
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
07992:  MOVLB  2
07994:  MOVF   x2D,W
07996:  MOVWF  FE9
07998:  MOVF   x2E,W
0799A:  MOVWF  FEA
0799C:  MOVFF  FEF,273
079A0:  MOVFF  273,284
079A4:  SETF   x85
079A6:  MOVLB  0
079A8:  CALL   4DAC
....................    printf("End SMF Reset\r\n");
079AC:  MOVLW  A2
079AE:  MOVWF  FF6
079B0:  MOVLW  1D
079B2:  MOVWF  FF7
079B4:  MOVLW  00
079B6:  MOVWF  FF8
079B8:  CALL   1F3E
079BC:  RETURN 0
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
10DAC:  CLRF   FF8
10DAE:  BCF    FD0.7
10DB0:  BSF    07.7
10DB2:  MOVLB  E
10DB4:  MOVLW  55
10DB6:  MOVWF  F7E
10DB8:  MOVLW  AA
10DBA:  MOVWF  F7E
10DBC:  BCF    F66.6
10DBE:  MOVLW  F9
10DC0:  MOVWF  x2C
10DC2:  MOVLW  F6
10DC4:  MOVWF  x2D
10DC6:  MOVLW  0F
10DC8:  MOVWF  x2E
10DCA:  MOVLW  40
10DCC:  MOVWF  x12
10DCE:  MOVLW  30
10DD0:  MOVWF  x13
10DD2:  MOVLW  20
10DD4:  MOVWF  x22
10DD6:  MOVLW  30
10DD8:  MOVWF  x24
10DDA:  MOVLW  55
10DDC:  MOVWF  F7E
10DDE:  MOVLW  AA
10DE0:  MOVWF  F7E
10DE2:  BSF    F66.6
10DE4:  CLRF   F9B
10DE6:  CLRF   F64
10DE8:  CLRF   F65
10DEA:  CLRF   F66
10DEC:  MOVLW  02
10DEE:  MOVWF  FD3
10DF0:  CLRF   1B
10DF2:  MOVLB  F
10DF4:  BSF    x2D.3
10DF6:  MOVLW  A0
10DF8:  MOVWF  x2B
10DFA:  MOVLW  01
10DFC:  MOVWF  x2C
10DFE:  MOVLW  A6
10E00:  MOVWF  x2E
10E02:  MOVLW  90
10E04:  MOVWF  x2F
10E06:  MOVLB  E
10E08:  BSF    xFD.3
10E0A:  MOVLW  A0
10E0C:  MOVWF  xFB
10E0E:  MOVLW  01
10E10:  MOVWF  xFC
10E12:  MOVLW  A6
10E14:  MOVWF  xFE
10E16:  MOVLW  90
10E18:  MOVWF  xFF
10E1A:  BSF    F92.1
10E1C:  BCF    F92.0
10E1E:  BCF    F92.3
10E20:  BCF    F89.3
10E22:  BSF    F96.0
10E24:  BCF    F96.6
10E26:  BCF    F96.1
10E28:  BCF    F8D.1
10E2A:  BSF    F93.4
10E2C:  BCF    F93.5
10E2E:  BCF    F93.2
10E30:  BSF    F8A.2
10E32:  BCF    F95.4
10E34:  BCF    F95.5
10E36:  BSF    F8C.5
10E38:  CLRF   1F
10E3A:  CLRF   1E
10E3C:  CLRF   1D
10E3E:  CLRF   1C
10E40:  CLRF   23
10E42:  CLRF   22
10E44:  CLRF   21
10E46:  CLRF   20
10E48:  CLRF   27
10E4A:  CLRF   26
10E4C:  CLRF   25
10E4E:  CLRF   24
10E50:  CLRF   29
10E52:  CLRF   28
10E54:  CLRF   4A
10E56:  BCF    4B.0
10E58:  MOVLW  1E
10E5A:  MOVLB  1
10E5C:  MOVWF  x86
10E5E:  CLRF   x89
10E60:  CLRF   x88
10E62:  MOVLW  01
10E64:  MOVWF  x21
10E66:  MOVLW  CA
10E68:  MOVWF  x20
10E6A:  MOVLW  01
10E6C:  MOVWF  x23
10E6E:  MOVLW  D5
10E70:  MOVWF  x22
10E72:  MOVLW  01
10E74:  MOVWF  x25
10E76:  MOVLW  E0
10E78:  MOVWF  x24
10E7A:  MOVLW  01
10E7C:  MOVWF  x27
10E7E:  MOVLW  EB
10E80:  MOVWF  x26
10E82:  MOVLW  01
10E84:  MOVWF  x29
10E86:  MOVLW  F6
10E88:  MOVWF  x28
10E8A:  MOVLW  02
10E8C:  MOVWF  x2B
10E8E:  MOVLW  01
10E90:  MOVWF  x2A
10E92:  MOVLW  02
10E94:  MOVWF  x2D
10E96:  MOVLW  0C
10E98:  MOVWF  x2C
10E9A:  MOVLB  E
10E9C:  CLRF   xD9
10E9E:  CLRF   xDA
10EA0:  CLRF   xCE
10EA2:  CLRF   xCF
10EA4:  CLRF   xD0
10EA6:  CLRF   xD1
10EA8:  CLRF   xD2
10EAA:  CLRF   xD3
10EAC:  CLRF   xD4
10EAE:  CLRF   xD5
10EB0:  CLRF   x45
10EB2:  CLRF   x46
10EB4:  CLRF   x47
10EB6:  BCF    x8D.7
10EB8:  BCF    x8D.6
10EBA:  BCF    x8D.5
10EBC:  MOVLB  F
10EBE:  CLRF   x53
10EC0:  CLRF   x38
10EC2:  CLRF   x37
10EC4:  MOVLB  0
10EC6:  CLRF   2A
10EC8:  CLRF   2B
10ECA:  CLRF   2C
10ECC:  CLRF   2D
10ECE:  CLRF   2E
10ED0:  CLRF   2F
10ED2:  CLRF   30
10ED4:  CLRF   31
10ED6:  CLRF   32
10ED8:  CLRF   33
10EDA:  CLRF   34
10EDC:  CLRF   35
10EDE:  CLRF   36
10EE0:  CLRF   37
10EE2:  CLRF   38
10EE4:  CLRF   39
10EE6:  CLRF   3A
10EE8:  CLRF   3B
10EEA:  CLRF   3C
10EEC:  CLRF   3D
10EEE:  CLRF   3E
10EF0:  CLRF   3F
10EF2:  CLRF   40
10EF4:  CLRF   41
10EF6:  CLRF   42
10EF8:  CLRF   43
10EFA:  CLRF   44
10EFC:  CLRF   45
10EFE:  CLRF   46
10F00:  CLRF   47
10F02:  CLRF   48
10F04:  CLRF   49
10F06:  MOVLW  03
10F08:  MOVWF  4C
10F0A:  CLRF   4D
10F0C:  CLRF   4E
10F0E:  CLRF   4F
10F10:  CLRF   50
10F12:  CLRF   51
10F14:  CLRF   52
10F16:  CLRF   53
10F18:  CLRF   54
10F1A:  CLRF   55
10F1C:  CLRF   56
10F1E:  CLRF   57
10F20:  CLRF   58
10F22:  CLRF   59
10F24:  CLRF   5A
10F26:  CLRF   5B
10F28:  CLRF   5C
10F2A:  CLRF   5D
10F2C:  CLRF   5E
10F2E:  CLRF   5F
10F30:  CLRF   x60
10F32:  CLRF   x61
10F34:  CLRF   x62
10F36:  CLRF   x63
10F38:  CLRF   x64
10F3A:  CLRF   x65
10F3C:  CLRF   x66
10F3E:  CLRF   x67
10F40:  CLRF   x68
10F42:  CLRF   x69
10F44:  CLRF   x6A
10F46:  CLRF   x6B
10F48:  CLRF   x6C
10F4A:  CLRF   x6D
10F4C:  CLRF   x6E
10F4E:  CLRF   x6F
10F50:  CLRF   x70
10F52:  CLRF   x71
10F54:  CLRF   x72
10F56:  CLRF   x73
10F58:  CLRF   x74
10F5A:  CLRF   x75
10F5C:  CLRF   x76
10F5E:  CLRF   x77
10F60:  CLRF   x78
10F62:  CLRF   x79
10F64:  CLRF   x7A
10F66:  CLRF   x7B
10F68:  CLRF   x7C
10F6A:  CLRF   x7D
10F6C:  CLRF   x7E
10F6E:  CLRF   x7F
10F70:  CLRF   x80
10F72:  CLRF   x81
10F74:  CLRF   x82
10F76:  CLRF   x83
10F78:  CLRF   x84
10F7A:  CLRF   x85
10F7C:  CLRF   x86
10F7E:  CLRF   x87
10F80:  CLRF   x88
10F82:  CLRF   x89
10F84:  CLRF   x8A
10F86:  CLRF   x8B
10F88:  CLRF   x8C
10F8A:  CLRF   x8D
10F8C:  CLRF   x8E
10F8E:  CLRF   x8F
10F90:  CLRF   x90
10F92:  CLRF   x91
10F94:  CLRF   x92
10F96:  CLRF   x93
10F98:  CLRF   x94
10F9A:  CLRF   x95
10F9C:  CLRF   x96
10F9E:  CLRF   x97
10FA0:  CLRF   x98
10FA2:  CLRF   x99
10FA4:  CLRF   x9A
10FA6:  CLRF   x9B
10FA8:  CLRF   x9C
10FAA:  CLRF   x9D
10FAC:  CLRF   x9E
10FAE:  CLRF   x9F
10FB0:  CLRF   xA0
10FB2:  CLRF   xA1
10FB4:  CLRF   xA2
10FB6:  CLRF   xA3
10FB8:  CLRF   xA4
10FBA:  CLRF   xA5
10FBC:  CLRF   xA6
10FBE:  CLRF   xA7
10FC0:  CLRF   xA8
10FC2:  CLRF   xA9
10FC4:  CLRF   xAA
10FC6:  CLRF   xAB
10FC8:  CLRF   xAC
10FCA:  CLRF   xAD
10FCC:  CLRF   xAE
10FCE:  CLRF   xAF
10FD0:  CLRF   xB0
10FD2:  CLRF   xB1
10FD4:  CLRF   xB2
10FD6:  CLRF   xB3
10FD8:  CLRF   xB4
10FDA:  CLRF   xB5
10FDC:  CLRF   xB6
10FDE:  CLRF   xB7
10FE0:  CLRF   xB8
10FE2:  CLRF   xB9
10FE4:  CLRF   xBA
10FE6:  CLRF   xBB
10FE8:  CLRF   xBC
10FEA:  CLRF   xBD
10FEC:  CLRF   xBE
10FEE:  CLRF   xBF
10FF0:  CLRF   xC0
10FF2:  CLRF   xC1
10FF4:  CLRF   xC2
10FF6:  CLRF   xC3
10FF8:  CLRF   xC4
10FFA:  CLRF   xC5
10FFC:  CLRF   xC6
10FFE:  CLRF   xC7
11000:  CLRF   xC8
11002:  CLRF   xC9
11004:  CLRF   xCA
11006:  CLRF   xCB
11008:  CLRF   xCC
1100A:  CLRF   xCD
1100C:  CLRF   xCE
1100E:  CLRF   xCF
11010:  CLRF   xD0
11012:  CLRF   xD1
11014:  CLRF   xD2
11016:  CLRF   xD3
11018:  CLRF   xD4
1101A:  CLRF   xD5
1101C:  CLRF   xD6
1101E:  CLRF   xD7
11020:  CLRF   xD8
11022:  CLRF   xD9
11024:  CLRF   xDA
11026:  CLRF   xDB
11028:  CLRF   xDC
1102A:  CLRF   xDD
1102C:  CLRF   xDE
1102E:  CLRF   xDF
11030:  CLRF   xE0
11032:  CLRF   xE1
11034:  CLRF   xE2
11036:  CLRF   xE3
11038:  CLRF   xE4
1103A:  CLRF   xE5
1103C:  CLRF   xE6
1103E:  CLRF   xE7
11040:  CLRF   xE8
11042:  CLRF   xE9
11044:  CLRF   xEA
11046:  CLRF   xEB
11048:  CLRF   xEC
1104A:  CLRF   xED
1104C:  CLRF   xEE
1104E:  CLRF   xEF
11050:  CLRF   xF0
11052:  CLRF   xF1
11054:  CLRF   xF2
11056:  CLRF   xF3
11058:  CLRF   xF4
1105A:  CLRF   xF5
1105C:  CLRF   xF6
1105E:  CLRF   xF7
11060:  CLRF   xF8
11062:  CLRF   xF9
11064:  CLRF   xFA
11066:  CLRF   xFB
11068:  CLRF   xFC
1106A:  CLRF   xFD
1106C:  CLRF   xFE
1106E:  CLRF   xFF
11070:  MOVLB  1
11072:  CLRF   x00
11074:  CLRF   x01
11076:  CLRF   x02
11078:  CLRF   x03
1107A:  CLRF   x04
1107C:  CLRF   x05
1107E:  CLRF   x06
11080:  CLRF   x07
11082:  CLRF   x08
11084:  CLRF   x09
11086:  CLRF   x0A
11088:  CLRF   x0B
1108A:  CLRF   x0C
1108C:  CLRF   x0D
1108E:  CLRF   x0E
11090:  CLRF   x0F
11092:  CLRF   x10
11094:  CLRF   x11
11096:  CLRF   x12
11098:  CLRF   x13
1109A:  MOVLW  30
1109C:  MOVWF  x14
1109E:  MOVLW  7C
110A0:  MOVWF  x15
110A2:  MOVLW  01
110A4:  MOVWF  x16
110A6:  MOVLW  01
110A8:  MOVWF  x17
110AA:  MOVLW  02
110AC:  MOVWF  x18
110AE:  MOVLW  7C
110B0:  MOVWF  x19
110B2:  CLRF   x1A
110B4:  MOVLW  09
110B6:  MOVWF  x1B
110B8:  MOVLW  01
110BA:  MOVWF  x1C
110BC:  CLRF   x1D
110BE:  MOVLW  02
110C0:  MOVWF  x1E
110C2:  MOVLW  01
110C4:  MOVWF  x1F
110C6:  CLRF   x8A
110C8:  CLRF   x8B
110CA:  CLRF   x8C
110CC:  CLRF   x8D
110CE:  CLRF   x8E
110D0:  CLRF   x8F
110D2:  CLRF   x90
110D4:  CLRF   x91
110D6:  CLRF   x92
110D8:  CLRF   x93
110DA:  CLRF   x94
110DC:  CLRF   x95
110DE:  CLRF   x96
110E0:  CLRF   x97
110E2:  CLRF   x98
110E4:  CLRF   x99
110E6:  CLRF   x9A
110E8:  CLRF   x9B
110EA:  CLRF   x9C
110EC:  CLRF   x9D
110EE:  CLRF   x9E
110F0:  CLRF   x9F
110F2:  CLRF   xA0
110F4:  CLRF   xA1
110F6:  CLRF   xA2
110F8:  CLRF   xA3
110FA:  CLRF   xA4
110FC:  CLRF   xA5
110FE:  CLRF   xA6
11100:  CLRF   xA7
11102:  CLRF   xA8
11104:  CLRF   xA9
11106:  CLRF   xAA
11108:  CLRF   xAB
1110A:  CLRF   xAC
1110C:  CLRF   xAD
1110E:  CLRF   xAE
11110:  CLRF   xAF
11112:  CLRF   xB0
11114:  CLRF   xB1
11116:  CLRF   xB2
11118:  CLRF   xB3
1111A:  CLRF   xB4
1111C:  CLRF   xB5
1111E:  CLRF   xB6
11120:  CLRF   xB7
11122:  CLRF   xB8
11124:  CLRF   xB9
11126:  CLRF   xBA
11128:  CLRF   xBB
1112A:  CLRF   xBC
1112C:  CLRF   xBD
1112E:  CLRF   xBE
11130:  CLRF   xBF
11132:  CLRF   xC0
11134:  CLRF   xC1
11136:  CLRF   xC2
11138:  CLRF   xC3
1113A:  CLRF   xC4
1113C:  CLRF   xC5
1113E:  CLRF   xC6
11140:  CLRF   xC7
11142:  CLRF   xC8
11144:  CLRF   xC9
11146:  CLRF   xCA
11148:  CLRF   xCB
1114A:  CLRF   xCC
1114C:  CLRF   xCD
1114E:  CLRF   xCE
11150:  CLRF   xCF
11152:  CLRF   xD0
11154:  CLRF   xD1
11156:  CLRF   xD2
11158:  CLRF   xD3
1115A:  CLRF   xD4
1115C:  MOVLW  01
1115E:  MOVWF  xD5
11160:  CLRF   xD6
11162:  CLRF   xD7
11164:  CLRF   xD8
11166:  CLRF   xD9
11168:  CLRF   xDA
1116A:  CLRF   xDB
1116C:  CLRF   xDC
1116E:  CLRF   xDD
11170:  CLRF   xDE
11172:  CLRF   xDF
11174:  MOVLW  02
11176:  MOVWF  xE0
11178:  CLRF   xE1
1117A:  CLRF   xE2
1117C:  CLRF   xE3
1117E:  CLRF   xE4
11180:  CLRF   xE5
11182:  CLRF   xE6
11184:  CLRF   xE7
11186:  CLRF   xE8
11188:  CLRF   xE9
1118A:  CLRF   xEA
1118C:  MOVLW  03
1118E:  MOVWF  xEB
11190:  CLRF   xEC
11192:  CLRF   xED
11194:  CLRF   xEE
11196:  CLRF   xEF
11198:  CLRF   xF0
1119A:  CLRF   xF1
1119C:  CLRF   xF2
1119E:  CLRF   xF3
111A0:  CLRF   xF4
111A2:  CLRF   xF5
111A4:  MOVLW  04
111A6:  MOVWF  xF6
111A8:  CLRF   xF7
111AA:  CLRF   xF8
111AC:  CLRF   xF9
111AE:  CLRF   xFA
111B0:  CLRF   xFB
111B2:  CLRF   xFC
111B4:  CLRF   xFD
111B6:  CLRF   xFE
111B8:  CLRF   xFF
111BA:  MOVLB  2
111BC:  CLRF   x00
111BE:  MOVLW  05
111C0:  MOVWF  x01
111C2:  CLRF   x02
111C4:  CLRF   x03
111C6:  CLRF   x04
111C8:  CLRF   x05
111CA:  CLRF   x06
111CC:  CLRF   x07
111CE:  CLRF   x08
111D0:  CLRF   x09
111D2:  CLRF   x0A
111D4:  CLRF   x0B
111D6:  MOVLW  06
111D8:  MOVWF  x0C
111DA:  CLRF   x0D
111DC:  CLRF   x0E
111DE:  CLRF   x0F
111E0:  CLRF   x10
111E2:  CLRF   x11
111E4:  CLRF   x12
111E6:  CLRF   x13
111E8:  CLRF   x14
111EA:  CLRF   x15
111EC:  CLRF   x16
111EE:  MOVLW  01
111F0:  MOVLB  1
111F2:  MOVWF  x75
111F4:  MOVLW  2E
111F6:  MOVWF  x74
111F8:  MOVLW  01
111FA:  MOVWF  x77
111FC:  MOVLW  38
111FE:  MOVWF  x76
11200:  MOVLW  01
11202:  MOVWF  x79
11204:  MOVLW  42
11206:  MOVWF  x78
11208:  MOVLW  01
1120A:  MOVWF  x7B
1120C:  MOVLW  4C
1120E:  MOVWF  x7A
11210:  MOVLW  01
11212:  MOVWF  x7D
11214:  MOVLW  56
11216:  MOVWF  x7C
11218:  MOVLW  01
1121A:  MOVWF  x7F
1121C:  MOVLW  60
1121E:  MOVWF  x7E
11220:  MOVLW  01
11222:  MOVWF  x81
11224:  MOVLW  6A
11226:  MOVWF  x80
11228:  MOVLB  0
.................... { 
....................    delay_ms(100); // wait for power stable
1122A:  MOVLW  64
1122C:  MOVLB  B
1122E:  MOVWF  xA6
11230:  MOVLB  0
11232:  CALL   1F10
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
11236:  MOVLW  B2
11238:  MOVWF  FF6
1123A:  MOVLW  1D
1123C:  MOVWF  FF7
1123E:  MOVLW  00
11240:  MOVWF  FF8
11242:  CALL   1F3E
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM6.\r\n");
11246:  MOVLW  F8
11248:  MOVWF  FF6
1124A:  MOVLW  1D
1124C:  MOVWF  FF7
1124E:  MOVLW  00
11250:  MOVWF  FF8
11252:  CALL   1F3E
....................    fprintf(PC,"Last updated on %s %s, by Inoue.\r\n\r\n", __DATE__, __TIME__);
11256:  MOVLW  26
11258:  MOVWF  FF6
1125A:  MOVLW  1E
1125C:  MOVWF  FF7
1125E:  MOVLW  00
11260:  MOVWF  FF8
11262:  MOVLW  10
11264:  MOVLB  B
11266:  MOVWF  x4A
11268:  MOVLB  0
1126A:  CALL   1F74
1126E:  MOVLW  4C
11270:  MOVWF  FF6
11272:  MOVLW  1E
11274:  MOVWF  FF7
11276:  MOVLW  00
11278:  MOVWF  FF8
1127A:  CALL   1F3E
1127E:  MOVLW  20
11280:  BTFSS  FA6.6
11282:  GOTO   11280
11286:  MOVLB  E
11288:  MOVWF  xF9
1128A:  MOVLW  56
1128C:  MOVWF  FF6
1128E:  MOVLW  1E
11290:  MOVWF  FF7
11292:  MOVLW  00
11294:  MOVWF  FF8
11296:  MOVLB  0
11298:  CALL   1F3E
1129C:  MOVLW  3B
1129E:  MOVWF  FF6
112A0:  MOVLW  1E
112A2:  MOVWF  FF7
112A4:  MOVLW  00
112A6:  MOVWF  FF8
112A8:  MOVLW  0F
112AA:  MOVLB  B
112AC:  MOVWF  x4A
112AE:  MOVLB  0
112B0:  CALL   1F74
....................    
....................    // io_init();
....................    setup_uart_to_boss();
112B4:  GOTO   1FAE
....................    timer_init();
112B8:  GOTO   1FD8
....................    ad7490_init();
112BC:  GOTO   2204
....................    mcp4901_init();
112C0:  GOTO   2554
....................    misf_init();
112C4:  CALL   3616
....................    
....................    piclog_make(PICLOG_STARTUP,0x00);
112C8:  MOVLB  2
112CA:  CLRF   x84
112CC:  CLRF   x85
112CE:  MOVLB  0
112D0:  CALL   4DAC
.................... 
....................    int1 is_finished = FALSE;
112D4:  MOVLB  2
112D6:  BCF    x17.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
112D8:  MOVLW  60
112DA:  MOVWF  FF6
112DC:  MOVLW  1E
112DE:  MOVWF  FF7
112E0:  MOVLW  00
112E2:  MOVWF  FF8
112E4:  MOVLB  0
112E6:  CALL   1F3E
....................    
....................    //enable_negative_power();
....................    connect_port1();
112EA:  CALL   4ED0
....................    connect_port2();
112EE:  CALL   4ED8
....................    mcp4901_1_write(0);
112F2:  MOVLB  A
112F4:  CLRF   x64
112F6:  CLRF   x63
112F8:  MOVLB  0
112FA:  CALL   24D0
....................    mcp4901_2_write(0);
112FE:  MOVLB  A
11300:  CLRF   x64
11302:  CLRF   x63
11304:  MOVLB  0
11306:  CALL   2512
....................    connect_negative_power2(TRUE); // CIGS2 Negative Power ON
1130A:  MOVLW  01
1130C:  MOVLB  2
1130E:  MOVWF  x24
11310:  MOVLB  0
11312:  GOTO   4EE0
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
11316:  MOVLW  86
11318:  MOVWF  FF6
1131A:  MOVLW  1E
1131C:  MOVWF  FF7
1131E:  MOVLW  00
11320:  MOVWF  FF8
11322:  CALL   1F3E
....................    
....................    //Start loop
....................    while(!is_finished)
11326:  MOVLB  2
11328:  BTFSS  x17.0
1132A:  BRA    11332
1132C:  MOVLB  0
1132E:  GOTO   11404
11332:  MOVLB  0
....................    {
....................       // unsigned int16 cigs1_amp = ad7490_read(ADC_CIGS2_AMP);
....................       // unsigned int16 cigs1_curr = ad7490_read(ADC_CIGS2_CURR);
....................       // unsigned int16 cigs1_volt = ad7490_read(ADC_CIGS2_VOLT);
....................       
....................       // fprintf(PC, "CIGS1 Amp: %04LX, Current: %04LX, Voltage: %04LX\r\n", cigs1_amp, cigs1_curr, cigs1_volt);
....................       
....................       // handle from boss commands
....................       if(boss_receive_buffer_size > 0)
11334:  MOVF   4A,F
11336:  BTFSC  FD8.2
11338:  GOTO   113BC
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
1133C:  MOVLB  2
1133E:  CLRF   x2B
11340:  MOVLW  2A
11342:  MOVWF  x2A
11344:  MOVFF  4A,22C
11348:  MOVLB  0
1134A:  GOTO   521C
1134E:  MOVFF  02,03
11352:  MOVF   01,W
11354:  MOVWF  FE1
11356:  MOVFF  03,FE2
1135A:  MOVLW  02
1135C:  MOVWF  FEA
1135E:  MOVLW  18
11360:  MOVWF  FE9
11362:  MOVLW  0C
11364:  MOVWF  01
11366:  MOVFF  FE6,FEE
1136A:  DECFSZ 01,F
1136C:  GOTO   11366
....................          /*
....................          fprintf(PC, "Frame ID: %X\r\n", recieve_cmd.frame_id);
....................          fprintf(PC, "Content size: %u\r\n", recieve_cmd.size);
....................          fprintf(PC, "payload: ");
....................          for(int8 i = 0; i < recieve_cmd.size; i++)
....................             fprintf(PC, "%X ", recieve_cmd.content[i]);
....................          fprintf(PC, "\r\n\r\n");
....................          fprintf(PC, "is_exist: %d\r\n", recieve_cmd.is_exist);
....................          */
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
11370:  MOVLB  2
11372:  CLRF   x25
11374:  MOVLW  2A
11376:  MOVWF  x24
11378:  CLRF   x27
1137A:  MOVLW  4A
1137C:  MOVWF  x26
1137E:  MOVLB  0
11380:  GOTO   541E
....................          
....................          if(recieve_cmd.is_exist){
11384:  MOVLB  2
11386:  BTFSC  x1A.0
11388:  BRA    11390
1138A:  MOVLB  0
1138C:  GOTO   113BC
11390:  MOVLB  0
....................             is_finished = execute_command(&recieve_cmd); // FIX: 戻り値を保持
11392:  MOVLW  02
11394:  MOVLB  2
11396:  MOVWF  x25
11398:  MOVLW  18
1139A:  MOVWF  x24
1139C:  MOVLB  0
1139E:  GOTO   FF68
113A2:  MOVLB  2
113A4:  BCF    x17.0
113A6:  BTFSC  01.0
113A8:  BSF    x17.0
....................             fprintf(PC,"\r\nwaiting for BOSS PIC command");
113AA:  MOVLW  A4
113AC:  MOVWF  FF6
113AE:  MOVLW  1E
113B0:  MOVWF  FF7
113B2:  MOVLW  00
113B4:  MOVWF  FF8
113B6:  MOVLB  0
113B8:  CALL   1F3E
....................          }
....................       }
....................       
....................       // check `is break while loop`
....................       if(is_finished == TRUE)
113BC:  MOVLB  2
113BE:  BTFSC  x17.0
113C0:  BRA    113C8
113C2:  MOVLB  0
113C4:  GOTO   113CE
113C8:  MOVLB  0
....................          break;
113CA:  GOTO   11404
....................          
....................       delay_ms(400);
113CE:  MOVLW  02
113D0:  MOVLB  2
113D2:  MOVWF  x24
113D4:  MOVLB  0
113D6:  MOVLW  C8
113D8:  MOVLB  B
113DA:  MOVWF  xA6
113DC:  MOVLB  0
113DE:  CALL   1F10
113E2:  MOVLB  2
113E4:  DECFSZ x24,F
113E6:  BRA    113EC
113E8:  BRA    113F0
113EA:  MOVLB  0
113EC:  MOVLB  0
113EE:  BRA    113D6
....................       fprintf(PC, ".");
113F0:  MOVLW  2E
113F2:  MOVLB  0
113F4:  BTFSS  FA6.6
113F6:  GOTO   113F4
113FA:  MOVLB  E
113FC:  MOVWF  xF9
113FE:  MOVLB  0
11400:  GOTO   11326
....................    }
....................    
....................    
....................    fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\nWait for BOSS PIC turn off me");
11404:  MOVLW  C4
11406:  MOVWF  FF6
11408:  MOVLW  1E
1140A:  MOVWF  FF7
1140C:  MOVLW  00
1140E:  MOVWF  FF8
11410:  CALL   1F3E
....................    
....................    while (TRUE)
....................    {
....................       fprintf(PC, ".");
11414:  MOVLW  2E
11416:  BTFSS  FA6.6
11418:  GOTO   11416
1141C:  MOVLB  E
1141E:  MOVWF  xF9
....................       delay_ms(1000);
11420:  MOVLW  04
11422:  MOVLB  2
11424:  MOVWF  x24
11426:  MOVLB  0
11428:  MOVLW  FA
1142A:  MOVLB  B
1142C:  MOVWF  xA6
1142E:  MOVLB  0
11430:  CALL   1F10
11434:  MOVLB  2
11436:  DECFSZ x24,F
11438:  BRA    1143E
1143A:  BRA    11442
1143C:  MOVLB  0
1143E:  MOVLB  0
11440:  BRA    11428
11442:  MOVLB  0
11444:  GOTO   11414
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
11448:  MOVLW  04
1144A:  MOVWF  FF6
1144C:  MOVLW  1F
1144E:  MOVWF  FF7
11450:  MOVLW  00
11452:  MOVWF  FF8
11454:  CALL   1F3E
....................    
.................... }
.................... // Enf of files
11458:  SLEEP 

Configuration Fuses:
   Word  1: F6A0   STVREN NOXINST NODEBUG NOBROWNOUT BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS NODSWDT DSWDTOSC_INT
