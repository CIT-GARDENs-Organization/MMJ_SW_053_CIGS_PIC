CCS PCH C Compiler, Version 5.104, 57077               29-10-25 15:56

               Filename:   c:\Users\shoin\source\repos\MMJ_SW_053_CIGS_PIC\cigs\build\mmj_cigs_main.lst

               ROM used:   79238 bytes (60%)
                           Largest free fragment is 51806
               RAM used:   410 (11%) at main() level
                           2863 (80%) worst case
               Stack used: 9 locations (8 in main + 1 for interrupts)
               Stack size: 31

*
00000:  NOP   
00002:  GOTO   13052
*
00008:  NOP   
0000A:  NOP   
0000C:  NOP   
0000E:  NOP   
00010:  NOP   
00012:  NOP   
00014:  NOP   
00016:  NOP   
00018:  MOVWF  04
0001A:  MOVFF  FD8,05
0001E:  MOVFF  FE0,06
00022:  MOVLB  0
00024:  MOVFF  FE9,0C
00028:  MOVFF  FEA,07
0002C:  MOVFF  FE1,08
00030:  MOVFF  FE2,09
00034:  MOVFF  FD9,0A
00038:  MOVFF  FDA,0B
0003C:  MOVFF  FF3,12
00040:  MOVFF  FF4,13
00044:  MOVFF  FFA,14
00048:  MOVFF  FF5,15
0004C:  MOVFF  FF6,16
00050:  MOVFF  FF7,17
00054:  MOVFF  FF8,18
00058:  MOVFF  FFB,19
0005C:  MOVFF  00,0E
00060:  MOVFF  01,0F
00064:  MOVFF  02,10
00068:  MOVFF  03,11
0006C:  BTFSS  FF2.5
0006E:  GOTO   0078
00072:  BTFSC  FF2.2
00074:  GOTO   014E
00078:  BTFSS  F9D.0
0007A:  GOTO   0084
0007E:  BTFSC  F9E.0
00080:  GOTO   01D6
00084:  BTFSS  F61.5
00086:  GOTO   0090
0008A:  BTFSC  FA6.5
0008C:  GOTO   0240
00090:  MOVFF  0E,00
00094:  MOVFF  0F,01
00098:  MOVFF  10,02
0009C:  MOVFF  11,03
000A0:  MOVFF  0C,FE9
000A4:  MOVFF  07,FEA
000A8:  BSF    07.7
000AA:  MOVFF  08,FE1
000AE:  MOVFF  09,FE2
000B2:  MOVFF  0A,FD9
000B6:  MOVFF  0B,FDA
000BA:  MOVFF  12,FF3
000BE:  MOVFF  13,FF4
000C2:  MOVFF  14,FFA
000C6:  MOVFF  15,FF5
000CA:  MOVFF  16,FF6
000CE:  MOVFF  17,FF7
000D2:  MOVFF  18,FF8
000D6:  MOVFF  19,FFB
000DA:  MOVF   04,W
000DC:  MOVFF  06,FE0
000E0:  MOVFF  05,FD8
000E4:  RETFIE 0
.................... #include "mmj_cigs_main.h"  // ルート直下のヘッダー
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... #opt 0 // 0 = no optimization
.................... 
.................... //==============================================================================
.................... // CCS C 最適化構造: ヘッダー分散 + .cファイル統合
.................... //==============================================================================
.................... 
.................... // レベル1: システム設定
.................... #include "hal/cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
000E6:  CLRF   FF7
000E8:  ADDLW  FA
000EA:  MOVWF  FF6
000EC:  MOVLW  00
000EE:  ADDWFC FF7,F
000F0:  MOVLW  00
000F2:  MOVWF  FF8
000F4:  TBLRD*+
000F6:  MOVF   FF5,W
000F8:  RETURN 0
000FA:  DATA 00,00
000FC:  DATA 00,00
000FE:  DATA FF,0F
00100:  DATA 00,00
00102:  DATA 00,10
00104:  DATA 00,00
00106:  DATA 00,00
00108:  DATA 01,00
0010A:  DATA FF,0F
0010C:  DATA 14,00
0010E:  DATA 00,00
00110:  DATA 14,00
00112:  DATA 00,10
00114:  DATA 14,00
00116:  DATA FF,0F
00118:  DATA 28,00
0011A:  DATA 00,00
0011C:  DATA 14,00
0011E:  DATA 00,10
00120:  DATA 28,00
00122:  DATA FF,0F
00124:  DATA 32,00
00126:  DATA 00,00
00128:  DATA 0A,00
0012A:  DATA 00,10
0012C:  DATA 32,00
0012E:  DATA FF,0F
00130:  DATA 72,00
00132:  DATA 00,00
00134:  DATA 40,00
00136:  DATA 00,10
00138:  DATA 72,00
0013A:  DATA FF,0F
0013C:  DATA 7C,00
0013E:  DATA 00,00
00140:  DATA 0A,00
00142:  DATA 00,10
00144:  DATA 7C,00
00146:  DATA FF,0F
00148:  DATA BC,00
0014A:  DATA 00,00
0014C:  DATA 40,00
*
001F8:  DATA 54,69
001FA:  DATA 6D,65
001FC:  DATA 72,20
001FE:  DATA 49,6E
00200:  DATA 69,74
00202:  DATA 69,61
00204:  DATA 6C,69
00206:  DATA 7A,65
00208:  DATA 0D,0A
0020A:  DATA 00,00
0020C:  DATA 09,43
0020E:  DATA 6F,6D
00210:  DATA 70,6C
00212:  DATA 65,74
00214:  DATA 65,0D
00216:  DATA 0A,00
*
00288:  DATA 55,41
0028A:  DATA 52,54
0028C:  DATA 20,49
0028E:  DATA 6E,69
00290:  DATA 74,69
00292:  DATA 61,6C
00294:  DATA 69,7A
00296:  DATA 65,0D
00298:  DATA 0A,00
0029A:  DATA 09,43
0029C:  DATA 6F,6D
0029E:  DATA 70,6C
002A0:  DATA 65,74
002A2:  DATA 65,0D
002A4:  DATA 0A,00
002A6:  DATA 41,44
002A8:  DATA 37,34
002AA:  DATA 39,30
002AC:  DATA 20,49
002AE:  DATA 6E,69
002B0:  DATA 74,69
002B2:  DATA 61,6C
002B4:  DATA 69,7A
002B6:  DATA 65,0D
002B8:  DATA 0A,00
002BA:  DATA 09,43
002BC:  DATA 6F,6E
002BE:  DATA 6E,65
002C0:  DATA 63,74
002C2:  DATA 20,65
002C4:  DATA 72,72
002C6:  DATA 6F,72
002C8:  DATA 21,0D
002CA:  DATA 0A,00
002CC:  DATA 09,43
002CE:  DATA 6F,6E
002D0:  DATA 6E,65
002D2:  DATA 63,74
002D4:  DATA 20,73
002D6:  DATA 75,63
002D8:  DATA 63,65
002DA:  DATA 73,73
002DC:  DATA 66,75
002DE:  DATA 6C,0D
002E0:  DATA 0A,00
002E2:  DATA 09,43
002E4:  DATA 6F,6D
002E6:  DATA 70,6C
002E8:  DATA 65,74
002EA:  DATA 65,0D
002EC:  DATA 0A,00
002EE:  DATA 4D,43
002F0:  DATA 50,34
002F2:  DATA 39,30
002F4:  DATA 31,20
002F6:  DATA 49,6E
002F8:  DATA 69,74
002FA:  DATA 69,61
002FC:  DATA 6C,69
002FE:  DATA 7A,65
00300:  DATA 0D,0A
00302:  DATA 00,00
00304:  DATA 09,5B
00306:  DATA 44,41
00308:  DATA 43,20
0030A:  DATA 50,6F
0030C:  DATA 72,74
0030E:  DATA 20,31
00310:  DATA 5D,20
00312:  DATA 43,6F
00314:  DATA 6E,6E
00316:  DATA 65,63
00318:  DATA 74,20
0031A:  DATA 65,72
0031C:  DATA 72,6F
0031E:  DATA 72,21
00320:  DATA 0D,0A
00322:  DATA 00,00
00324:  DATA 09,5B
00326:  DATA 44,41
00328:  DATA 43,20
0032A:  DATA 50,6F
0032C:  DATA 72,74
0032E:  DATA 20,31
00330:  DATA 5D,20
00332:  DATA 43,6F
00334:  DATA 6E,6E
00336:  DATA 65,63
00338:  DATA 74,20
0033A:  DATA 73,75
0033C:  DATA 63,63
0033E:  DATA 65,73
00340:  DATA 73,66
00342:  DATA 75,6C
00344:  DATA 0D,0A
00346:  DATA 00,00
00348:  DATA 09,5B
0034A:  DATA 44,41
0034C:  DATA 43,20
0034E:  DATA 50,6F
00350:  DATA 72,74
00352:  DATA 20,32
00354:  DATA 5D,20
00356:  DATA 43,6F
00358:  DATA 6E,6E
0035A:  DATA 65,63
0035C:  DATA 74,20
0035E:  DATA 65,72
00360:  DATA 72,6F
00362:  DATA 72,21
00364:  DATA 0D,0A
00366:  DATA 00,00
00368:  DATA 09,5B
0036A:  DATA 44,41
0036C:  DATA 43,20
0036E:  DATA 50,6F
00370:  DATA 72,74
00372:  DATA 20,32
00374:  DATA 5D,20
00376:  DATA 43,6F
00378:  DATA 6E,6E
0037A:  DATA 65,63
0037C:  DATA 74,20
0037E:  DATA 73,75
00380:  DATA 63,63
00382:  DATA 65,73
00384:  DATA 73,66
00386:  DATA 75,6C
00388:  DATA 0D,0A
0038A:  DATA 00,00
0038C:  DATA 09,43
0038E:  DATA 6F,6D
00390:  DATA 70,6C
00392:  DATA 65,74
00394:  DATA 65,0D
00396:  DATA 0A,00
00398:  DATA 45,6E
0039A:  DATA 71,75
0039C:  DATA 65,75
0039E:  DATA 65,20
003A0:  DATA 46,6C
003A2:  DATA 61,73
003A4:  DATA 68,20
003A6:  DATA 4F,70
003A8:  DATA 65,72
003AA:  DATA 61,74
003AC:  DATA 69,6F
003AE:  DATA 6E,0D
003B0:  DATA 0A,00
003B2:  DATA 46,6C
003B4:  DATA 61,73
003B6:  DATA 68,20
003B8:  DATA 71,75
003BA:  DATA 65,75
003BC:  DATA 65,20
003BE:  DATA 69,73
003C0:  DATA 20,66
003C2:  DATA 75,6C
003C4:  DATA 6C,21
003C6:  DATA 21,21
003C8:  DATA 0D,0A
003CA:  DATA 00,00
003CC:  DATA 46,6C
003CE:  DATA 61,73
003D0:  DATA 68,20
003D2:  DATA 71,75
003D4:  DATA 65,75
003D6:  DATA 65,20
003D8:  DATA 69,73
003DA:  DATA 20,65
003DC:  DATA 6D,70
003DE:  DATA 74,79
003E0:  DATA 0D,0A
003E2:  DATA 00,00
003E4:  DATA 0D,0A
003E6:  DATA 53,74
003E8:  DATA 61,72
003EA:  DATA 74,20
003EC:  DATA 6D,61
003EE:  DATA 6B,65
003F0:  DATA 5F,72
003F2:  DATA 65,63
003F4:  DATA 65,69
003F6:  DATA 76,65
003F8:  DATA 5F,63
003FA:  DATA 6F,6D
003FC:  DATA 6D,61
003FE:  DATA 6E,64
00400:  DATA 0D,0A
00402:  DATA 00,00
00404:  DATA 09,5B
00406:  DATA 42,4F
00408:  DATA 53,53
0040A:  DATA 5D,20
0040C:  DATA 3E,3E
0040E:  DATA 3E,20
00410:  DATA 00,00
00412:  DATA 45,6E
00414:  DATA 64,20
00416:  DATA 6D,61
00418:  DATA 6B,65
0041A:  DATA 5F,72
0041C:  DATA 65,63
0041E:  DATA 69,76
00420:  DATA 65,5F
00422:  DATA 63,6F
00424:  DATA 6D,6D
00426:  DATA 61,6E
00428:  DATA 64,0D
0042A:  DATA 0A,0D
0042C:  DATA 0A,00
0042E:  DATA 73,69
00430:  DATA 67,6E
00432:  DATA 61,6C
00434:  DATA 20,65
00436:  DATA 6E,64
00438:  DATA 20,77
0043A:  DATA 69,74
0043C:  DATA 68,20
0043E:  DATA 53,46
00440:  DATA 44,0D
00442:  DATA 0A,00
00444:  DATA 64,6F
00446:  DATA 6E,27
00448:  DATA 74,20
0044A:  DATA 66,69
0044C:  DATA 6E,64
0044E:  DATA 20,53
00450:  DATA 46,44
00452:  DATA 0D,0A
00454:  DATA 00,00
00456:  DATA 09,2D
00458:  DATA 3E,20
0045A:  DATA 49,6E
0045C:  DATA 76,61
0045E:  DATA 6C,69
00460:  DATA 64,20
00462:  DATA 46,72
00464:  DATA 61,6D
00466:  DATA 65,20
00468:  DATA 49,44
0046A:  DATA 20,72
0046C:  DATA 65,63
0046E:  DATA 65,69
00470:  DATA 76,65
00472:  DATA 64,3A
00474:  DATA 20,25
00476:  DATA 58,0D
00478:  DATA 0A,00
0047A:  DATA 09,2D
0047C:  DATA 3E,20
0047E:  DATA 43,52
00480:  DATA 43,20
00482:  DATA 65,72
00484:  DATA 72,6F
00486:  DATA 72,21
00488:  DATA 0D,0A
0048A:  DATA 00,00
0048C:  DATA 09,09
0048E:  DATA 2D,3E
00490:  DATA 20,72
00492:  DATA 65,63
00494:  DATA 65,69
00496:  DATA 76,65
00498:  DATA 64,20
0049A:  DATA 43,52
0049C:  DATA 43,3A
0049E:  DATA 20,25
004A0:  DATA 58,0D
004A2:  DATA 0A,00
004A4:  DATA 09,09
004A6:  DATA 20,20
004A8:  DATA 20,63
004AA:  DATA 6F,6C
004AC:  DATA 6C,65
004AE:  DATA 63,74
004B0:  DATA 20,43
004B2:  DATA 52,43
004B4:  DATA 20,3A
004B6:  DATA 20,25
004B8:  DATA 58,0D
004BA:  DATA 0A,00
004BC:  DATA 09,2D
004BE:  DATA 3E,20
004C0:  DATA 49,6E
004C2:  DATA 76,61
004C4:  DATA 6C,69
004C6:  DATA 64,20
004C8:  DATA 64,65
004CA:  DATA 76,69
004CC:  DATA 63,65
004CE:  DATA 20,49
004D0:  DATA 44,20
004D2:  DATA 72,65
004D4:  DATA 63,65
004D6:  DATA 69,76
004D8:  DATA 65,64
004DA:  DATA 0D,0A
004DC:  DATA 00,00
004DE:  DATA 09,09
004E0:  DATA 2D,3E
004E2:  DATA 20,72
004E4:  DATA 65,63
004E6:  DATA 65,69
004E8:  DATA 76,65
004EA:  DATA 64,3A
004EC:  DATA 20,20
004EE:  DATA 20,20
004F0:  DATA 20,25
004F2:  DATA 58,0D
004F4:  DATA 0A,00
004F6:  DATA 09,09
004F8:  DATA 20,20
004FA:  DATA 20,4D
004FC:  DATA 79,20
004FE:  DATA 64,65
00500:  DATA 76,69
00502:  DATA 63,65
00504:  DATA 20,49
00506:  DATA 44,3A
00508:  DATA 20,25
0050A:  DATA 58,0D
0050C:  DATA 0A,00
0050E:  DATA 09,5B
00510:  DATA 42,4F
00512:  DATA 53,53
00514:  DATA 5D,20
00516:  DATA 3C,3C
00518:  DATA 3C,20
0051A:  DATA 00,00
0051C:  DATA 53,74
0051E:  DATA 61,72
00520:  DATA 74,20
00522:  DATA 53,4D
00524:  DATA 46,20
00526:  DATA 75,73
00528:  DATA 69,6E
0052A:  DATA 67,20
0052C:  DATA 72,65
0052E:  DATA 71,65
00530:  DATA 73,74
00532:  DATA 20,73
00534:  DATA 65,61
00536:  DATA 71,75
00538:  DATA 65,6E
0053A:  DATA 63,65
0053C:  DATA 0D,0A
0053E:  DATA 00,00
00540:  DATA 45,72
00542:  DATA 72,6F
00544:  DATA 72,21
00546:  DATA 20,52
00548:  DATA 65,63
0054A:  DATA 65,69
0054C:  DATA 76,69
0054E:  DATA 6E,67
00550:  DATA 20,63
00552:  DATA 6F,6D
00554:  DATA 6D,61
00556:  DATA 6E,64
00558:  DATA 20,69
0055A:  DATA 6E,63
0055C:  DATA 6F,6E
0055E:  DATA 73,69
00560:  DATA 73,74
00562:  DATA 65,6E
00564:  DATA 74,20
00566:  DATA 77,69
00568:  DATA 74,68
0056A:  DATA 20,74
0056C:  DATA 68,65
0056E:  DATA 20,64
00570:  DATA 65,73
00572:  DATA 69,67
00574:  DATA 6E,0D
00576:  DATA 0A,00
00578:  DATA 53,4D
0057A:  DATA 46,20
0057C:  DATA 75,73
0057E:  DATA 65,20
00580:  DATA 72,65
00582:  DATA 71,75
00584:  DATA 65,73
00586:  DATA 74,20
00588:  DATA 61,6C
0058A:  DATA 6C,6F
0058C:  DATA 77,65
0058E:  DATA 64,0D
00590:  DATA 0A,00
00592:  DATA 53,4D
00594:  DATA 46,20
00596:  DATA 75,73
00598:  DATA 65,20
0059A:  DATA 72,65
0059C:  DATA 71,75
0059E:  DATA 65,73
005A0:  DATA 74,20
005A2:  DATA 64,65
005A4:  DATA 6E,79
005A6:  DATA 65,64
005A8:  DATA 0D,0A
005AA:  DATA 00,00
005AC:  DATA 52,65
005AE:  DATA 74,72
005B0:  DATA 79,20
005B2:  DATA 72,65
005B4:  DATA 71,75
005B6:  DATA 65,73
005B8:  DATA 74,20
005BA:  DATA 74,6F
005BC:  DATA 20,42
005BE:  DATA 4F,53
005C0:  DATA 53,20
005C2:  DATA 50,49
005C4:  DATA 43,0D
005C6:  DATA 0A,00
005C8:  DATA 45,72
005CA:  DATA 72,6F
005CC:  DATA 72,21
005CE:  DATA 20,52
005D0:  DATA 65,63
005D2:  DATA 65,69
005D4:  DATA 76,69
005D6:  DATA 6E,67
005D8:  DATA 20,63
005DA:  DATA 6F,6D
005DC:  DATA 6D,61
005DE:  DATA 6E,64
005E0:  DATA 20,69
005E2:  DATA 6E,63
005E4:  DATA 6F,6E
005E6:  DATA 73,69
005E8:  DATA 73,74
005EA:  DATA 65,6E
005EC:  DATA 74,20
005EE:  DATA 77,69
005F0:  DATA 74,68
005F2:  DATA 20,74
005F4:  DATA 68,65
005F6:  DATA 20,64
005F8:  DATA 65,73
005FA:  DATA 69,67
005FC:  DATA 6E,0D
005FE:  DATA 0A,00
00600:  DATA 45,6E
00602:  DATA 64,20
00604:  DATA 53,4D
00606:  DATA 46,20
00608:  DATA 75,73
0060A:  DATA 69,6E
0060C:  DATA 67,20
0060E:  DATA 72,65
00610:  DATA 71,65
00612:  DATA 73,74
00614:  DATA 20,73
00616:  DATA 65,61
00618:  DATA 71,75
0061A:  DATA 65,6E
0061C:  DATA 63,65
0061E:  DATA 0D,0A
00620:  DATA 00,00
00622:  DATA 74,65
00624:  DATA 6D,70
00626:  DATA 5F,74
00628:  DATA 6F,70
0062A:  DATA 3A,25
0062C:  DATA 30,34
0062E:  DATA 4C,58
00630:  DATA 0D,0A
00632:  DATA 00,00
00634:  DATA 74,65
00636:  DATA 6D,70
00638:  DATA 5F,62
0063A:  DATA 6F,74
0063C:  DATA 3A,25
0063E:  DATA 30,34
00640:  DATA 4C,58
00642:  DATA 0D,0A
00644:  DATA 00,00
00646:  DATA 74,65
00648:  DATA 6D,70
0064A:  DATA 5F,6D
0064C:  DATA 69,73
0064E:  DATA 37,3A
00650:  DATA 25,30
00652:  DATA 34,4C
00654:  DATA 58,0D
00656:  DATA 0A,00
00658:  DATA 70,64
0065A:  DATA 3A,25
0065C:  DATA 30,34
0065E:  DATA 4C,58
00660:  DATA 0D,0A
00662:  DATA 00,00
00664:  DATA 56,6F
00666:  DATA 6C,74
00668:  DATA 31,2C
0066A:  DATA 43,75
0066C:  DATA 72,72
0066E:  DATA 31,2C
00670:  DATA 56,6F
00672:  DATA 6C,74
00674:  DATA 32,2C
00676:  DATA 43,75
00678:  DATA 72,72
0067A:  DATA 32,0D
0067C:  DATA 0A,00
0067E:  DATA 50,4F
00680:  DATA 52,54
00682:  DATA 25,75
00684:  DATA 0D,0A
00686:  DATA 00,00
00688:  DATA 50,4F
0068A:  DATA 52,54
0068C:  DATA 31,2C
0068E:  DATA 20,25
00690:  DATA 75,0D
00692:  DATA 0A,00
00694:  DATA 50,4F
00696:  DATA 52,54
00698:  DATA 32,2C
0069A:  DATA 20,25
0069C:  DATA 75,0D
0069E:  DATA 0A,00
006A0:  DATA 5B,50
006A2:  DATA 49,43
006A4:  DATA 4C,4F
006A6:  DATA 47,5D
006A8:  DATA 20,3A
006AA:  DATA 20,00
006AC:  DATA 53,4D
006AE:  DATA 46,20
006B0:  DATA 44,61
006B2:  DATA 74,61
006B4:  DATA 20,54
006B6:  DATA 61,62
006B8:  DATA 6C,65
006BA:  DATA 20,49
006BC:  DATA 6E,69
006BE:  DATA 74,69
006C0:  DATA 61,6C
006C2:  DATA 69,7A
006C4:  DATA 65,0D
006C6:  DATA 0A,00
006C8:  DATA 43,52
006CA:  DATA 43,20
006CC:  DATA 45,52
006CE:  DATA 52,4F
006D0:  DATA 52,20
006D2:  DATA 25,64
006D4:  DATA 0D,0A
006D6:  DATA 00,00
006D8:  DATA 43,52
006DA:  DATA 43,20
006DC:  DATA 76,65
006DE:  DATA 72,69
006E0:  DATA 66,69
006E2:  DATA 63,61
006E4:  DATA 74,69
006E6:  DATA 6F,6E
006E8:  DATA 20,66
006EA:  DATA 61,69
006EC:  DATA 6C,65
006EE:  DATA 64,20
006F0:  DATA 61,66
006F2:  DATA 74,65
006F4:  DATA 72,20
006F6:  DATA 25,64
006F8:  DATA 20,61
006FA:  DATA 74,74
006FC:  DATA 65,6D
006FE:  DATA 70,74
00700:  DATA 73,0D
00702:  DATA 0A,00
00704:  DATA 45,72
00706:  DATA 72,6F
00708:  DATA 72,3A
0070A:  DATA 20,43
0070C:  DATA 52,43
0070E:  DATA 20,76
00710:  DATA 65,72
00712:  DATA 69,66
00714:  DATA 69,63
00716:  DATA 61,74
00718:  DATA 69,6F
0071A:  DATA 6E,20
0071C:  DATA 66,61
0071E:  DATA 69,6C
00720:  DATA 65,64
00722:  DATA 20,61
00724:  DATA 66,74
00726:  DATA 65,72
00728:  DATA 20,25
0072A:  DATA 64,20
0072C:  DATA 61,74
0072E:  DATA 74,65
00730:  DATA 6D,70
00732:  DATA 74,73
00734:  DATA 0D,0A
00736:  DATA 00,00
00738:  DATA 0D,0A
0073A:  DATA 5B,53
0073C:  DATA 4D,46
0073E:  DATA 20,43
00740:  DATA 6F,75
00742:  DATA 6E,74
00744:  DATA 65,72
00746:  DATA 20,53
00748:  DATA 74,61
0074A:  DATA 74,75
0074C:  DATA 73,5D
0074E:  DATA 0D,0A
00750:  DATA 00,00
00752:  DATA 09,50
00754:  DATA 41,52
00756:  DATA 54,49
00758:  DATA 54,49
0075A:  DATA 4F,4E
0075C:  DATA 09,55
0075E:  DATA 53,45
00760:  DATA 44,09
00762:  DATA 09,52
00764:  DATA 45,53
00766:  DATA 45,52
00768:  DATA 56,45
0076A:  DATA 0D,0A
0076C:  DATA 00,00
0076E:  DATA 09,2D
00770:  DATA 2D,2D
00772:  DATA 2D,2D
00774:  DATA 2D,2D
00776:  DATA 2D,2D
00778:  DATA 09,2D
0077A:  DATA 2D,2D
0077C:  DATA 2D,2D
0077E:  DATA 2D,2D
00780:  DATA 2D,2D
00782:  DATA 2D,09
00784:  DATA 2D,2D
00786:  DATA 2D,2D
00788:  DATA 2D,2D
0078A:  DATA 2D,2D
0078C:  DATA 2D,2D
0078E:  DATA 0D,0A
00790:  DATA 00,00
00792:  DATA 09,50
00794:  DATA 49,43
00796:  DATA 4C,4F
00798:  DATA 47,09
0079A:  DATA 09,30
0079C:  DATA 78,25
0079E:  DATA 30,38
007A0:  DATA 4C,58
007A2:  DATA 09,30
007A4:  DATA 78,25
007A6:  DATA 30,38
007A8:  DATA 4C,58
007AA:  DATA 0D,0A
007AC:  DATA 00,00
007AE:  DATA 09,45
007B0:  DATA 4E,56
007B2:  DATA 49,52
007B4:  DATA 4F,09
007B6:  DATA 09,30
007B8:  DATA 78,25
007BA:  DATA 30,38
007BC:  DATA 4C,58
007BE:  DATA 09,30
007C0:  DATA 78,25
007C2:  DATA 30,38
007C4:  DATA 4C,58
007C6:  DATA 0D,0A
007C8:  DATA 00,00
007CA:  DATA 09,49
007CC:  DATA 56,31
007CE:  DATA 5F,48
007D0:  DATA 45,41
007D2:  DATA 44,45
007D4:  DATA 52,09
007D6:  DATA 30,78
007D8:  DATA 25,30
007DA:  DATA 38,4C
007DC:  DATA 58,09
007DE:  DATA 30,78
007E0:  DATA 25,30
007E2:  DATA 38,4C
007E4:  DATA 58,0D
007E6:  DATA 0A,00
007E8:  DATA 09,49
007EA:  DATA 56,31
007EC:  DATA 5F,44
007EE:  DATA 41,54
007F0:  DATA 41,09
007F2:  DATA 30,78
007F4:  DATA 25,30
007F6:  DATA 38,4C
007F8:  DATA 58,09
007FA:  DATA 30,78
007FC:  DATA 25,30
007FE:  DATA 38,4C
00800:  DATA 58,0D
00802:  DATA 0A,00
00804:  DATA 09,49
00806:  DATA 56,32
00808:  DATA 5F,48
0080A:  DATA 45,41
0080C:  DATA 44,45
0080E:  DATA 52,09
00810:  DATA 30,78
00812:  DATA 25,30
00814:  DATA 38,4C
00816:  DATA 58,09
00818:  DATA 30,78
0081A:  DATA 25,30
0081C:  DATA 38,4C
0081E:  DATA 58,0D
00820:  DATA 0A,00
00822:  DATA 09,49
00824:  DATA 56,32
00826:  DATA 5F,44
00828:  DATA 41,54
0082A:  DATA 41,09
0082C:  DATA 30,78
0082E:  DATA 25,30
00830:  DATA 38,4C
00832:  DATA 58,09
00834:  DATA 30,78
00836:  DATA 25,30
00838:  DATA 38,4C
0083A:  DATA 58,0D
0083C:  DATA 0A,00
0083E:  DATA 09,3D
00840:  DATA 3D,3D
00842:  DATA 3D,3D
00844:  DATA 3D,3D
00846:  DATA 3D,3D
00848:  DATA 3D,3D
0084A:  DATA 3D,3D
0084C:  DATA 3D,3D
0084E:  DATA 3D,3D
00850:  DATA 3D,3D
00852:  DATA 3D,3D
00854:  DATA 3D,3D
00856:  DATA 3D,3D
00858:  DATA 3D,3D
0085A:  DATA 3D,3D
0085C:  DATA 3D,3D
0085E:  DATA 3D,3D
00860:  DATA 3D,3D
00862:  DATA 3D,3D
00864:  DATA 3D,3D
00866:  DATA 3D,3D
00868:  DATA 3D,0D
0086A:  DATA 0A,0D
0086C:  DATA 0A,00
0086E:  DATA 0D,0A
00870:  DATA 5F,5F
00872:  DATA 5F,5F
00874:  DATA 5F,5F
00876:  DATA 5F,5F
00878:  DATA 5F,5F
0087A:  DATA 5F,5F
0087C:  DATA 5F,5F
0087E:  DATA 5F,5F
00880:  DATA 5F,5F
00882:  DATA 5F,5F
00884:  DATA 5F,5F
00886:  DATA 5F,5F
00888:  DATA 5F,5F
0088A:  DATA 5F,5F
0088C:  DATA 5F,5F
0088E:  DATA 5F,0D
00890:  DATA 0A,00
00892:  DATA 5F,5F
00894:  DATA 5F,5F
00896:  DATA 5F,5F
00898:  DATA 5F,5F
0089A:  DATA 5F,53
0089C:  DATA 74,61
0089E:  DATA 72,74
008A0:  DATA 20,63
008A2:  DATA 6F,70
008A4:  DATA 79,5F
008A6:  DATA 64,61
008A8:  DATA 74,61
008AA:  DATA 5F,5F
008AC:  DATA 5F,5F
008AE:  DATA 5F,5F
008B0:  DATA 5F,5F
008B2:  DATA 5F,0D
008B4:  DATA 0A,00
008B6:  DATA 45,72
008B8:  DATA 72,6F
008BA:  DATA 72,3A
008BC:  DATA 20,4D
008BE:  DATA 49,53
008C0:  DATA 20,46
008C2:  DATA 4D,20
008C4:  DATA 69,73
008C6:  DATA 20,6E
008C8:  DATA 6F,74
008CA:  DATA 20,63
008CC:  DATA 6F,6E
008CE:  DATA 6E,65
008D0:  DATA 63,74
008D2:  DATA 65,64
008D4:  DATA 0D,0A
008D6:  DATA 00,00
008D8:  DATA 45,72
008DA:  DATA 72,6F
008DC:  DATA 72,3A
008DE:  DATA 20,53
008E0:  DATA 4D,46
008E2:  DATA 20,69
008E4:  DATA 73,20
008E6:  DATA 6E,6F
008E8:  DATA 74,20
008EA:  DATA 63,6F
008EC:  DATA 6E,6E
008EE:  DATA 65,63
008F0:  DATA 74,65
008F2:  DATA 64,0D
008F4:  DATA 0A,00
008F6:  DATA 46,4C
008F8:  DATA 41,53
008FA:  DATA 48,20
008FC:  DATA 49,44
008FE:  DATA 3A,20
00900:  DATA 43,49
00902:  DATA 47,53
00904:  DATA 5F,44
00906:  DATA 41,54
00908:  DATA 41,5F
0090A:  DATA 54,41
0090C:  DATA 42,4C
0090E:  DATA 45,0D
00910:  DATA 0A,00
00912:  DATA 46,4C
00914:  DATA 41,53
00916:  DATA 48,20
00918:  DATA 49,44
0091A:  DATA 3A,20
0091C:  DATA 43,49
0091E:  DATA 47,53
00920:  DATA 5F,50
00922:  DATA 49,43
00924:  DATA 4C,4F
00926:  DATA 47,5F
00928:  DATA 44,41
0092A:  DATA 54,41
0092C:  DATA 0D,0A
0092E:  DATA 00,00
00930:  DATA 46,4C
00932:  DATA 41,53
00934:  DATA 48,20
00936:  DATA 49,44
00938:  DATA 3A,20
0093A:  DATA 43,49
0093C:  DATA 47,53
0093E:  DATA 5F,45
00940:  DATA 4E,56
00942:  DATA 49,52
00944:  DATA 4F,5F
00946:  DATA 44,41
00948:  DATA 54,41
0094A:  DATA 0D,0A
0094C:  DATA 00,00
0094E:  DATA 46,4C
00950:  DATA 41,53
00952:  DATA 48,20
00954:  DATA 49,44
00956:  DATA 3A,20
00958:  DATA 43,49
0095A:  DATA 47,53
0095C:  DATA 5F,49
0095E:  DATA 56,31
00960:  DATA 5F,48
00962:  DATA 45,41
00964:  DATA 44,45
00966:  DATA 52,0D
00968:  DATA 0A,00
0096A:  DATA 46,4C
0096C:  DATA 41,53
0096E:  DATA 48,20
00970:  DATA 49,44
00972:  DATA 3A,20
00974:  DATA 43,49
00976:  DATA 47,53
00978:  DATA 5F,49
0097A:  DATA 56,31
0097C:  DATA 5F,44
0097E:  DATA 41,54
00980:  DATA 41,0D
00982:  DATA 0A,00
00984:  DATA 46,4C
00986:  DATA 41,53
00988:  DATA 48,20
0098A:  DATA 49,44
0098C:  DATA 3A,20
0098E:  DATA 43,49
00990:  DATA 47,53
00992:  DATA 5F,49
00994:  DATA 56,32
00996:  DATA 5F,48
00998:  DATA 45,41
0099A:  DATA 44,45
0099C:  DATA 52,0D
0099E:  DATA 0A,00
009A0:  DATA 46,4C
009A2:  DATA 41,53
009A4:  DATA 48,20
009A6:  DATA 49,44
009A8:  DATA 3A,20
009AA:  DATA 43,49
009AC:  DATA 47,53
009AE:  DATA 5F,49
009B0:  DATA 56,32
009B2:  DATA 5F,44
009B4:  DATA 41,54
009B6:  DATA 41,0D
009B8:  DATA 0A,00
009BA:  DATA 45,72
009BC:  DATA 72,6F
009BE:  DATA 72,3A
009C0:  DATA 20,49
009C2:  DATA 6E,76
009C4:  DATA 61,6C
009C6:  DATA 69,64
009C8:  DATA 20,6D
009CA:  DATA 69,73
009CC:  DATA 73,69
009CE:  DATA 6F,6E
009D0:  DATA 20,49
009D2:  DATA 44,20
009D4:  DATA 25,64
009D6:  DATA 0D,0A
009D8:  DATA 00,00
009DA:  DATA 5B,4D
009DC:  DATA 49,53
009DE:  DATA 46,20
009E0:  DATA 41,44
009E2:  DATA 44,52
009E4:  DATA 45,53
009E6:  DATA 53,5D
009E8:  DATA 0D,0A
009EA:  DATA 00,00
009EC:  DATA 09,50
009EE:  DATA 61,72
009F0:  DATA 61,6D
009F2:  DATA 09,44
009F4:  DATA 61,74
009F6:  DATA 61,0D
009F8:  DATA 0A,00
009FA:  DATA 09,2D
009FC:  DATA 2D,2D
009FE:  DATA 2D,2D
00A00:  DATA 09,2D
00A02:  DATA 2D,2D
00A04:  DATA 2D,2D
00A06:  DATA 2D,2D
00A08:  DATA 2D,2D
00A0A:  DATA 2D,0D
00A0C:  DATA 0A,00
00A0E:  DATA 09,53
00A10:  DATA 54,41
00A12:  DATA 52,54
00A14:  DATA 09,30
00A16:  DATA 78,25
00A18:  DATA 30,38
00A1A:  DATA 4C,58
00A1C:  DATA 0D,0A
00A1E:  DATA 00,00
00A20:  DATA 09,45
00A22:  DATA 4E,44
00A24:  DATA 09,30
00A26:  DATA 78,25
00A28:  DATA 30,38
00A2A:  DATA 4C,58
00A2C:  DATA 0D,0A
00A2E:  DATA 00,00
00A30:  DATA 09,53
00A32:  DATA 52,43
00A34:  DATA 09,30
00A36:  DATA 78,25
00A38:  DATA 30,38
00A3A:  DATA 4C,58
00A3C:  DATA 0D,0A
00A3E:  DATA 00,00
00A40:  DATA 09,53
00A42:  DATA 49,5A
00A44:  DATA 45,09
00A46:  DATA 30,78
00A48:  DATA 25,30
00A4A:  DATA 38,4C
00A4C:  DATA 58,0D
00A4E:  DATA 0A,00
00A50:  DATA 09,2D
00A52:  DATA 2D,2D
00A54:  DATA 2D,2D
00A56:  DATA 09,2D
00A58:  DATA 2D,2D
00A5A:  DATA 2D,2D
00A5C:  DATA 2D,2D
00A5E:  DATA 2D,2D
00A60:  DATA 2D,0D
00A62:  DATA 0A,00
00A64:  DATA 5B,53
00A66:  DATA 4D,46
00A68:  DATA 20,41
00A6A:  DATA 44,44
00A6C:  DATA 52,45
00A6E:  DATA 53,53
00A70:  DATA 5D,0D
00A72:  DATA 0A,00
00A74:  DATA 09,50
00A76:  DATA 61,72
00A78:  DATA 61,6D
00A7A:  DATA 09,44
00A7C:  DATA 61,74
00A7E:  DATA 61,0D
00A80:  DATA 0A,00
00A82:  DATA 09,2D
00A84:  DATA 2D,2D
00A86:  DATA 2D,2D
00A88:  DATA 09,2D
00A8A:  DATA 2D,2D
00A8C:  DATA 2D,2D
00A8E:  DATA 2D,2D
00A90:  DATA 2D,2D
00A92:  DATA 2D,0D
00A94:  DATA 0A,00
00A96:  DATA 09,53
00A98:  DATA 54,41
00A9A:  DATA 52,54
00A9C:  DATA 09,30
00A9E:  DATA 78,25
00AA0:  DATA 30,38
00AA2:  DATA 4C,58
00AA4:  DATA 0D,0A
00AA6:  DATA 00,00
00AA8:  DATA 09,45
00AAA:  DATA 4E,44
00AAC:  DATA 09,30
00AAE:  DATA 78,25
00AB0:  DATA 30,38
00AB2:  DATA 4C,58
00AB4:  DATA 0D,0A
00AB6:  DATA 00,00
00AB8:  DATA 09,2D
00ABA:  DATA 2D,2D
00ABC:  DATA 2D,2D
00ABE:  DATA 09,2D
00AC0:  DATA 2D,2D
00AC2:  DATA 2D,2D
00AC4:  DATA 2D,2D
00AC6:  DATA 2D,2D
00AC8:  DATA 2D,0D
00ACA:  DATA 0A,00
00ACC:  DATA 45,52
00ACE:  DATA 41,53
00AD0:  DATA 45,20
00AD2:  DATA 53,4D
00AD4:  DATA 46,20
00AD6:  DATA 41,52
00AD8:  DATA 45,41
00ADA:  DATA 0D,0A
00ADC:  DATA 00,00
00ADE:  DATA 09,45
00AE0:  DATA 52,41
00AE2:  DATA 53,45
00AE4:  DATA 20,53
00AE6:  DATA 4D,46
00AE8:  DATA 20,41
00AEA:  DATA 52,45
00AEC:  DATA 41,20
00AEE:  DATA 44,4F
00AF0:  DATA 4E,45
00AF2:  DATA 0D,0A
00AF4:  DATA 00,00
00AF6:  DATA 57,52
00AF8:  DATA 49,54
00AFA:  DATA 45,20
00AFC:  DATA 44,41
00AFE:  DATA 54,41
00B00:  DATA 20,54
00B02:  DATA 4F,20
00B04:  DATA 53,4D
00B06:  DATA 46,0D
00B08:  DATA 0A,00
00B0A:  DATA 55,50
00B0C:  DATA 44,41
00B0E:  DATA 54,45
00B10:  DATA 20,53
00B12:  DATA 4D,46
00B14:  DATA 20,43
00B16:  DATA 4F,55
00B18:  DATA 4E,54
00B1A:  DATA 45,52
00B1C:  DATA 20,53
00B1E:  DATA 54,41
00B20:  DATA 54,55
00B22:  DATA 53,0D
00B24:  DATA 0A,00
00B26:  DATA 0D,0A
00B28:  DATA 5F,5F
00B2A:  DATA 5F,5F
00B2C:  DATA 5F,5F
00B2E:  DATA 5F,5F
00B30:  DATA 5F,45
00B32:  DATA 6E,64
00B34:  DATA 20,63
00B36:  DATA 6F,70
00B38:  DATA 79,5F
00B3A:  DATA 64,61
00B3C:  DATA 74,61
00B3E:  DATA 5F,5F
00B40:  DATA 5F,5F
00B42:  DATA 5F,5F
00B44:  DATA 5F,5F
00B46:  DATA 5F,5F
00B48:  DATA 0D,0A
00B4A:  DATA 00,00
00B4C:  DATA 5F,5F
00B4E:  DATA 5F,5F
00B50:  DATA 5F,5F
00B52:  DATA 5F,5F
00B54:  DATA 5F,5F
00B56:  DATA 5F,5F
00B58:  DATA 5F,5F
00B5A:  DATA 5F,5F
00B5C:  DATA 5F,5F
00B5E:  DATA 5F,5F
00B60:  DATA 5F,5F
00B62:  DATA 5F,5F
00B64:  DATA 5F,5F
00B66:  DATA 5F,5F
00B68:  DATA 5F,5F
00B6A:  DATA 5F,0D
00B6C:  DATA 0A,0D
00B6E:  DATA 0A,00
00B70:  DATA 0D,0A
00B72:  DATA 5F,5F
00B74:  DATA 5F,5F
00B76:  DATA 5F,5F
00B78:  DATA 5F,5F
00B7A:  DATA 5F,5F
00B7C:  DATA 5F,5F
00B7E:  DATA 5F,5F
00B80:  DATA 5F,5F
00B82:  DATA 5F,5F
00B84:  DATA 5F,5F
00B86:  DATA 0D,0A
00B88:  DATA 00,00
00B8A:  DATA 5F,5F
00B8C:  DATA 5F,53
00B8E:  DATA 74,61
00B90:  DATA 72,74
00B92:  DATA 20,53
00B94:  DATA 4D,46
00B96:  DATA 20,52
00B98:  DATA 65,61
00B9A:  DATA 64,5F
00B9C:  DATA 5F,5F
00B9E:  DATA 5F,0D
00BA0:  DATA 0A,00
00BA2:  DATA 45,72
00BA4:  DATA 72,6F
00BA6:  DATA 72,3A
00BA8:  DATA 20,52
00BAA:  DATA 65,61
00BAC:  DATA 64,20
00BAE:  DATA 61,64
00BB0:  DATA 64,72
00BB2:  DATA 65,73
00BB4:  DATA 73,20
00BB6:  DATA 30,78
00BB8:  DATA 25,30
00BBA:  DATA 38,4C
00BBC:  DATA 58,20
00BBE:  DATA 6F,75
00BC0:  DATA 74,20
00BC2:  DATA 6F,66
00BC4:  DATA 20,53
00BC6:  DATA 4D,46
00BC8:  DATA 20,6D
00BCA:  DATA 69,73
00BCC:  DATA 73,69
00BCE:  DATA 6F,6E
00BD0:  DATA 20,72
00BD2:  DATA 61,6E
00BD4:  DATA 67,65
00BD6:  DATA 20,5B
00BD8:  DATA 30,78
00BDA:  DATA 25,30
00BDC:  DATA 38,4C
00BDE:  DATA 58,20
00BE0:  DATA 2D,20
00BE2:  DATA 30,78
00BE4:  DATA 25,30
00BE6:  DATA 38,4C
00BE8:  DATA 58,29
00BEA:  DATA 0D,0A
00BEC:  DATA 00,00
00BEE:  DATA 57,61
00BF0:  DATA 72,6E
00BF2:  DATA 3A,20
00BF4:  DATA 41,64
00BF6:  DATA 6A,75
00BF8:  DATA 73,74
00BFA:  DATA 20,72
00BFC:  DATA 65,61
00BFE:  DATA 64,20
00C00:  DATA 73,69
00C02:  DATA 7A,65
00C04:  DATA 20,66
00C06:  DATA 72,6F
00C08:  DATA 6D,20
00C0A:  DATA 25,6C
00C0C:  DATA 75,20
00C0E:  DATA 74,6F
00C10:  DATA 20,25
00C12:  DATA 6C,75
00C14:  DATA 20,28
00C16:  DATA 6D,69
00C18:  DATA 73,73
00C1A:  DATA 69,6F
00C1C:  DATA 6E,20
00C1E:  DATA 65,6E
00C20:  DATA 64,29
00C22:  DATA 0D,0A
00C24:  DATA 00,00
00C26:  DATA 49,6E
00C28:  DATA 66,6F
00C2A:  DATA 3A,20
00C2C:  DATA 4E,6F
00C2E:  DATA 74,68
00C30:  DATA 69,6E
00C32:  DATA 67,20
00C34:  DATA 74,6F
00C36:  DATA 20,72
00C38:  DATA 65,61
00C3A:  DATA 64,20
00C3C:  DATA 28,73
00C3E:  DATA 69,7A
00C40:  DATA 65,3D
00C42:  DATA 30,29
00C44:  DATA 0D,0A
00C46:  DATA 00,00
00C48:  DATA 49,6E
00C4A:  DATA 20,53
00C4C:  DATA 4D,46
00C4E:  DATA 20,52
00C50:  DATA 65,61
00C52:  DATA 64,20
00C54:  DATA 73,6F
00C56:  DATA 75,72
00C58:  DATA 63,65
00C5A:  DATA 20,64
00C5C:  DATA 61,74
00C5E:  DATA 61,20
00C60:  DATA 61,64
00C62:  DATA 64,72
00C64:  DATA 65,73
00C66:  DATA 73,3A
00C68:  DATA 20,25
00C6A:  DATA 4C,58
00C6C:  DATA 0D,0A
00C6E:  DATA 00,00
00C70:  DATA 49,6E
00C72:  DATA 20,53
00C74:  DATA 4D,46
00C76:  DATA 20,52
00C78:  DATA 65,61
00C7A:  DATA 64,20
00C7C:  DATA 64,61
00C7E:  DATA 74,61
00C80:  DATA 20,73
00C82:  DATA 69,7A
00C84:  DATA 65,20
00C86:  DATA 20,20
00C88:  DATA 20,20
00C8A:  DATA 20,20
00C8C:  DATA 20,20
00C8E:  DATA 20,3A
00C90:  DATA 20,25
00C92:  DATA 6C,75
00C94:  DATA 20,28
00C96:  DATA 30,78
00C98:  DATA 25,6C
00C9A:  DATA 78,29
00C9C:  DATA 0D,0A
00C9E:  DATA 0D,0A
00CA0:  DATA 00,00
00CA2:  DATA 45,72
00CA4:  DATA 72,6F
00CA6:  DATA 72,3A
00CA8:  DATA 20,53
00CAA:  DATA 4D,46
00CAC:  DATA 20,69
00CAE:  DATA 73,20
00CB0:  DATA 6E,6F
00CB2:  DATA 74,20
00CB4:  DATA 63,6F
00CB6:  DATA 6E,6E
00CB8:  DATA 65,63
00CBA:  DATA 74,65
00CBC:  DATA 64,0D
00CBE:  DATA 0A,00
00CC0:  DATA 52,45
00CC2:  DATA 41,44
00CC4:  DATA 20,44
00CC6:  DATA 41,54
00CC8:  DATA 41,20
00CCA:  DATA 46,52
00CCC:  DATA 4F,4D
00CCE:  DATA 20,53
00CD0:  DATA 4D,46
00CD2:  DATA 2E,2E
00CD4:  DATA 2E,0D
00CD6:  DATA 0A,00
00CD8:  DATA 0D,0A
00CDA:  DATA 5F,5F
00CDC:  DATA 5F,45
00CDE:  DATA 6E,64
00CE0:  DATA 20,53
00CE2:  DATA 4D,46
00CE4:  DATA 20,52
00CE6:  DATA 65,61
00CE8:  DATA 64,5F
00CEA:  DATA 5F,5F
00CEC:  DATA 5F,0D
00CEE:  DATA 0A,00
00CF0:  DATA 5F,5F
00CF2:  DATA 5F,5F
00CF4:  DATA 5F,5F
00CF6:  DATA 5F,5F
00CF8:  DATA 5F,5F
00CFA:  DATA 5F,5F
00CFC:  DATA 5F,5F
00CFE:  DATA 5F,5F
00D00:  DATA 5F,5F
00D02:  DATA 5F,5F
00D04:  DATA 0D,0A
00D06:  DATA 0D,0A
00D08:  DATA 00,00
00D0A:  DATA 0D,0A
00D0C:  DATA 5F,5F
00D0E:  DATA 5F,5F
00D10:  DATA 5F,5F
00D12:  DATA 5F,5F
00D14:  DATA 5F,5F
00D16:  DATA 5F,5F
00D18:  DATA 5F,5F
00D1A:  DATA 5F,5F
00D1C:  DATA 5F,5F
00D1E:  DATA 5F,5F
00D20:  DATA 0D,0A
00D22:  DATA 00,00
00D24:  DATA 5F,5F
00D26:  DATA 5F,53
00D28:  DATA 74,61
00D2A:  DATA 72,74
00D2C:  DATA 20,73
00D2E:  DATA 6D,66
00D30:  DATA 5F,65
00D32:  DATA 72,61
00D34:  DATA 73,65
00D36:  DATA 5F,5F
00D38:  DATA 5F,5F
00D3A:  DATA 0D,0A
00D3C:  DATA 00,00
00D3E:  DATA 5B,53
00D40:  DATA 4D,46
00D42:  DATA 5D,20
00D44:  DATA 45,72
00D46:  DATA 61,73
00D48:  DATA 65,20
00D4A:  DATA 61,64
00D4C:  DATA 64,72
00D4E:  DATA 65,73
00D50:  DATA 73,20
00D52:  DATA 20,20
00D54:  DATA 3A,20
00D56:  DATA 25,4C
00D58:  DATA 58,0D
00D5A:  DATA 0A,00
00D5C:  DATA 5B,53
00D5E:  DATA 4D,46
00D60:  DATA 5D,20
00D62:  DATA 45,72
00D64:  DATA 61,73
00D66:  DATA 65,20
00D68:  DATA 64,61
00D6A:  DATA 74,61
00D6C:  DATA 20,73
00D6E:  DATA 69,7A
00D70:  DATA 65,20
00D72:  DATA 3A,20
00D74:  DATA 25,6C
00D76:  DATA 75,20
00D78:  DATA 28,30
00D7A:  DATA 78,25
00D7C:  DATA 6C,78
00D7E:  DATA 29,0D
00D80:  DATA 0A,0D
00D82:  DATA 0A,00
00D84:  DATA 45,72
00D86:  DATA 72,6F
00D88:  DATA 72,3A
00D8A:  DATA 20,53
00D8C:  DATA 4D,46
00D8E:  DATA 20,69
00D90:  DATA 73,20
00D92:  DATA 6E,6F
00D94:  DATA 74,20
00D96:  DATA 63,6F
00D98:  DATA 6E,6E
00D9A:  DATA 65,63
00D9C:  DATA 74,65
00D9E:  DATA 64,0D
00DA0:  DATA 0A,00
00DA2:  DATA 45,72
00DA4:  DATA 72,6F
00DA6:  DATA 72,3A
00DA8:  DATA 20,45
00DAA:  DATA 72,61
00DAC:  DATA 73,65
00DAE:  DATA 20,73
00DB0:  DATA 6F,75
00DB2:  DATA 72,63
00DB4:  DATA 65,20
00DB6:  DATA 61,64
00DB8:  DATA 64,72
00DBA:  DATA 65,73
00DBC:  DATA 73,20
00DBE:  DATA 30,78
00DC0:  DATA 25,4C
00DC2:  DATA 58,20
00DC4:  DATA 69,73
00DC6:  DATA 20,6F
00DC8:  DATA 75,74
00DCA:  DATA 73,69
00DCC:  DATA 64,65
00DCE:  DATA 20,6D
00DD0:  DATA 69,73
00DD2:  DATA 73,69
00DD4:  DATA 6F,6E
00DD6:  DATA 20,72
00DD8:  DATA 61,6E
00DDA:  DATA 67,65
00DDC:  DATA 20,5B
00DDE:  DATA 30,78
00DE0:  DATA 25,4C
00DE2:  DATA 58,20
00DE4:  DATA 2D,20
00DE6:  DATA 30,78
00DE8:  DATA 25,4C
00DEA:  DATA 58,5D
00DEC:  DATA 0D,0A
00DEE:  DATA 00,00
00DF0:  DATA 45,72
00DF2:  DATA 72,6F
00DF4:  DATA 72,3A
00DF6:  DATA 20,45
00DF8:  DATA 72,61
00DFA:  DATA 73,65
00DFC:  DATA 20,6F
00DFE:  DATA 70,65
00E00:  DATA 72,61
00E02:  DATA 74,69
00E04:  DATA 6F,6E
00E06:  DATA 20,77
00E08:  DATA 6F,75
00E0A:  DATA 6C,64
00E0C:  DATA 20,65
00E0E:  DATA 78,63
00E10:  DATA 65,65
00E12:  DATA 64,20
00E14:  DATA 6D,69
00E16:  DATA 73,73
00E18:  DATA 69,6F
00E1A:  DATA 6E,20
00E1C:  DATA 65,6E
00E1E:  DATA 64,20
00E20:  DATA 61,64
00E22:  DATA 64,72
00E24:  DATA 65,73
00E26:  DATA 73,20
00E28:  DATA 30,78
00E2A:  DATA 25,4C
00E2C:  DATA 58,0D
00E2E:  DATA 0A,00
00E30:  DATA 4C,69
00E32:  DATA 6D,69
00E34:  DATA 74,69
00E36:  DATA 6E,67
00E38:  DATA 20,65
00E3A:  DATA 72,61
00E3C:  DATA 73,65
00E3E:  DATA 20,73
00E40:  DATA 69,7A
00E42:  DATA 65,20
00E44:  DATA 74,6F
00E46:  DATA 20,73
00E48:  DATA 74,61
00E4A:  DATA 79,20
00E4C:  DATA 77,69
00E4E:  DATA 74,68
00E50:  DATA 69,6E
00E52:  DATA 20,6D
00E54:  DATA 69,73
00E56:  DATA 73,69
00E58:  DATA 6F,6E
00E5A:  DATA 20,62
00E5C:  DATA 6F,75
00E5E:  DATA 6E,64
00E60:  DATA 73,0D
00E62:  DATA 0A,00
00E64:  DATA 45,72
00E66:  DATA 61,73
00E68:  DATA 65,20
00E6A:  DATA 6F,70
00E6C:  DATA 65,72
00E6E:  DATA 61,74
00E70:  DATA 69,6F
00E72:  DATA 6E,20
00E74:  DATA 76,61
00E76:  DATA 6C,69
00E78:  DATA 64,61
00E7A:  DATA 74,65
00E7C:  DATA 64,20
00E7E:  DATA 77,69
00E80:  DATA 74,68
00E82:  DATA 69,6E
00E84:  DATA 20,6D
00E86:  DATA 69,73
00E88:  DATA 73,69
00E8A:  DATA 6F,6E
00E8C:  DATA 20,72
00E8E:  DATA 61,6E
00E90:  DATA 67,65
00E92:  DATA 0D,0A
00E94:  DATA 00,00
00E96:  DATA 45,72
00E98:  DATA 61,73
00E9A:  DATA 65,64
00E9C:  DATA 20,25
00E9E:  DATA 6C,75
00EA0:  DATA 20,62
00EA2:  DATA 79,74
00EA4:  DATA 65,73
00EA6:  DATA 20,28
00EA8:  DATA 61,6C
00EAA:  DATA 69,67
00EAC:  DATA 6E,65
00EAE:  DATA 64,29
00EB0:  DATA 0D,0A
00EB2:  DATA 00,00
00EB4:  DATA 0D,0A
00EB6:  DATA 5F,5F
00EB8:  DATA 5F,45
00EBA:  DATA 6E,64
00EBC:  DATA 20,73
00EBE:  DATA 6D,66
00EC0:  DATA 5F,65
00EC2:  DATA 72,61
00EC4:  DATA 73,65
00EC6:  DATA 5F,5F
00EC8:  DATA 5F,5F
00ECA:  DATA 0D,0A
00ECC:  DATA 00,00
00ECE:  DATA 5F,5F
00ED0:  DATA 5F,5F
00ED2:  DATA 5F,5F
00ED4:  DATA 5F,5F
00ED6:  DATA 5F,5F
00ED8:  DATA 5F,5F
00EDA:  DATA 5F,5F
00EDC:  DATA 5F,5F
00EDE:  DATA 5F,5F
00EE0:  DATA 5F,5F
00EE2:  DATA 0D,0A
00EE4:  DATA 0D,0A
00EE6:  DATA 00,00
00EE8:  DATA 4D,49
00EEA:  DATA 53,53
00EEC:  DATA 49,4F
00EEE:  DATA 4E,20
00EF0:  DATA 46,4C
00EF2:  DATA 41,53
00EF4:  DATA 48,20
00EF6:  DATA 49,6E
00EF8:  DATA 69,74
00EFA:  DATA 69,61
00EFC:  DATA 6C,69
00EFE:  DATA 7A,65
00F00:  DATA 0D,0A
00F02:  DATA 00,00
00F04:  DATA 09,5B
00F06:  DATA 4D,49
00F08:  DATA 53,20
00F0A:  DATA 46,4D
00F0C:  DATA 5D,20
00F0E:  DATA 43,6F
00F10:  DATA 6E,6E
00F12:  DATA 65,63
00F14:  DATA 74,65
00F16:  DATA 64,0D
00F18:  DATA 0A,00
00F1A:  DATA 09,5B
00F1C:  DATA 4D,49
00F1E:  DATA 53,20
00F20:  DATA 46,4D
00F22:  DATA 5D,20
00F24:  DATA 4E,6F
00F26:  DATA 74,20
00F28:  DATA 43,6F
00F2A:  DATA 6E,6E
00F2C:  DATA 65,63
00F2E:  DATA 74,65
00F30:  DATA 64,0D
00F32:  DATA 0A,00
00F34:  DATA 09,5B
00F36:  DATA 53,4D
00F38:  DATA 46,5D
00F3A:  DATA 20,43
00F3C:  DATA 6F,6E
00F3E:  DATA 6E,65
00F40:  DATA 63,74
00F42:  DATA 65,64
00F44:  DATA 0D,0A
00F46:  DATA 00,00
00F48:  DATA 09,5B
00F4A:  DATA 53,4D
00F4C:  DATA 46,5D
00F4E:  DATA 20,4E
00F50:  DATA 6F,74
00F52:  DATA 20,43
00F54:  DATA 6F,6E
00F56:  DATA 6E,65
00F58:  DATA 63,74
00F5A:  DATA 65,64
00F5C:  DATA 0D,0A
00F5E:  DATA 00,00
00F60:  DATA 09,5B
00F62:  DATA 4D,49
00F64:  DATA 53,20
00F66:  DATA 46,4D
00F68:  DATA 5D,20
00F6A:  DATA 25,30
00F6C:  DATA 38,4C
00F6E:  DATA 58,0D
00F70:  DATA 0A,00
00F72:  DATA 09,5B
00F74:  DATA 4D,49
00F76:  DATA 53,20
00F78:  DATA 46,4D
00F7A:  DATA 5D,20
00F7C:  DATA 43,52
00F7E:  DATA 43,20
00F80:  DATA 65,72
00F82:  DATA 72,6F
00F84:  DATA 72,20
00F86:  DATA 2D,3E
00F88:  DATA 20,69
00F8A:  DATA 6E,69
00F8C:  DATA 74,69
00F8E:  DATA 61,6C
00F90:  DATA 69,7A
00F92:  DATA 65,20
00F94:  DATA 63,6F
00F96:  DATA 75,6E
00F98:  DATA 74,65
00F9A:  DATA 72,73
00F9C:  DATA 0D,0A
00F9E:  DATA 00,00
00FA0:  DATA 09,43
00FA2:  DATA 6F,6D
00FA4:  DATA 70,6C
00FA6:  DATA 65,74
00FA8:  DATA 65,0D
00FAA:  DATA 0A,00
00FAC:  DATA 09,46
00FAE:  DATA 69,65
00FB0:  DATA 6C,64
00FB2:  DATA 09,09
00FB4:  DATA 43,6F
00FB6:  DATA 75,6E
00FB8:  DATA 74,65
00FBA:  DATA 72,4E
00FBC:  DATA 61,6D
00FBE:  DATA 65,09
00FC0:  DATA 56,61
00FC2:  DATA 6C,75
00FC4:  DATA 65,0D
00FC6:  DATA 0A,00
00FC8:  DATA 09,2D
00FCA:  DATA 2D,2D
00FCC:  DATA 2D,2D
00FCE:  DATA 2D,2D
00FD0:  DATA 2D,2D
00FD2:  DATA 2D,2D
00FD4:  DATA 2D,09
00FD6:  DATA 2D,2D
00FD8:  DATA 2D,2D
00FDA:  DATA 2D,2D
00FDC:  DATA 2D,2D
00FDE:  DATA 2D,2D
00FE0:  DATA 2D,2D
00FE2:  DATA 2D,09
00FE4:  DATA 2D,2D
00FE6:  DATA 2D,2D
00FE8:  DATA 2D,2D
00FEA:  DATA 2D,2D
00FEC:  DATA 2D,2D
00FEE:  DATA 2D,2D
00FF0:  DATA 2D,0D
00FF2:  DATA 0A,00
00FF4:  DATA 09,50
00FF6:  DATA 49,43
00FF8:  DATA 4C,4F
00FFA:  DATA 47,09
00FFC:  DATA 09,55
00FFE:  DATA 73,65
01000:  DATA 64,09
01002:  DATA 09,30
01004:  DATA 78,25
01006:  DATA 30,38
01008:  DATA 4C,58
0100A:  DATA 0D,0A
0100C:  DATA 00,00
0100E:  DATA 09,09
01010:  DATA 09,55
01012:  DATA 6E,63
01014:  DATA 6F,70
01016:  DATA 79,65
01018:  DATA 64,09
0101A:  DATA 30,78
0101C:  DATA 25,30
0101E:  DATA 38,4C
01020:  DATA 58,0D
01022:  DATA 0A,00
01024:  DATA 09,09
01026:  DATA 09,52
01028:  DATA 65,73
0102A:  DATA 65,72
0102C:  DATA 76,65
0102E:  DATA 09,09
01030:  DATA 30,78
01032:  DATA 25,30
01034:  DATA 32,58
01036:  DATA 2F,20
01038:  DATA 30,78
0103A:  DATA 25,30
0103C:  DATA 32,58
0103E:  DATA 0D,0A
01040:  DATA 00,00
01042:  DATA 09,45
01044:  DATA 4E,56
01046:  DATA 49,52
01048:  DATA 4F,09
0104A:  DATA 09,55
0104C:  DATA 73,65
0104E:  DATA 64,09
01050:  DATA 09,30
01052:  DATA 78,25
01054:  DATA 30,38
01056:  DATA 4C,58
01058:  DATA 0D,0A
0105A:  DATA 00,00
0105C:  DATA 09,09
0105E:  DATA 09,55
01060:  DATA 6E,63
01062:  DATA 6F,70
01064:  DATA 79,65
01066:  DATA 64,09
01068:  DATA 30,78
0106A:  DATA 25,30
0106C:  DATA 38,4C
0106E:  DATA 58,0D
01070:  DATA 0A,00
01072:  DATA 09,09
01074:  DATA 09,52
01076:  DATA 65,73
01078:  DATA 65,72
0107A:  DATA 76,65
0107C:  DATA 09,09
0107E:  DATA 30,78
01080:  DATA 25,30
01082:  DATA 32,58
01084:  DATA 2F,20
01086:  DATA 30,78
01088:  DATA 25,30
0108A:  DATA 32,58
0108C:  DATA 0D,0A
0108E:  DATA 00,00
01090:  DATA 09,49
01092:  DATA 56,31
01094:  DATA 20,48
01096:  DATA 45,41
01098:  DATA 44,45
0109A:  DATA 52,09
0109C:  DATA 55,73
0109E:  DATA 65,64
010A0:  DATA 09,09
010A2:  DATA 30,78
010A4:  DATA 25,30
010A6:  DATA 38,4C
010A8:  DATA 58,0D
010AA:  DATA 0A,00
010AC:  DATA 09,09
010AE:  DATA 09,55
010B0:  DATA 6E,63
010B2:  DATA 6F,70
010B4:  DATA 79,65
010B6:  DATA 64,09
010B8:  DATA 30,78
010BA:  DATA 25,30
010BC:  DATA 38,4C
010BE:  DATA 58,0D
010C0:  DATA 0A,00
010C2:  DATA 09,09
010C4:  DATA 09,52
010C6:  DATA 65,73
010C8:  DATA 65,72
010CA:  DATA 76,65
010CC:  DATA 09,09
010CE:  DATA 30,78
010D0:  DATA 25,30
010D2:  DATA 32,58
010D4:  DATA 2F,20
010D6:  DATA 30,78
010D8:  DATA 25,30
010DA:  DATA 32,58
010DC:  DATA 0D,0A
010DE:  DATA 00,00
010E0:  DATA 09,49
010E2:  DATA 56,31
010E4:  DATA 20,44
010E6:  DATA 41,54
010E8:  DATA 41,09
010EA:  DATA 55,73
010EC:  DATA 65,64
010EE:  DATA 09,09
010F0:  DATA 30,78
010F2:  DATA 25,30
010F4:  DATA 38,4C
010F6:  DATA 58,0D
010F8:  DATA 0A,00
010FA:  DATA 09,09
010FC:  DATA 09,55
010FE:  DATA 6E,63
01100:  DATA 6F,70
01102:  DATA 79,65
01104:  DATA 64,09
01106:  DATA 30,78
01108:  DATA 25,30
0110A:  DATA 38,4C
0110C:  DATA 58,0D
0110E:  DATA 0A,00
01110:  DATA 09,09
01112:  DATA 09,52
01114:  DATA 65,73
01116:  DATA 65,72
01118:  DATA 76,65
0111A:  DATA 09,09
0111C:  DATA 30,78
0111E:  DATA 25,30
01120:  DATA 32,58
01122:  DATA 2F,20
01124:  DATA 30,78
01126:  DATA 25,30
01128:  DATA 32,58
0112A:  DATA 0D,0A
0112C:  DATA 00,00
0112E:  DATA 09,49
01130:  DATA 56,32
01132:  DATA 20,48
01134:  DATA 45,41
01136:  DATA 44,45
01138:  DATA 52,09
0113A:  DATA 55,73
0113C:  DATA 65,64
0113E:  DATA 09,09
01140:  DATA 30,78
01142:  DATA 25,30
01144:  DATA 38,4C
01146:  DATA 58,0D
01148:  DATA 0A,00
0114A:  DATA 09,09
0114C:  DATA 09,55
0114E:  DATA 6E,63
01150:  DATA 6F,70
01152:  DATA 79,65
01154:  DATA 64,09
01156:  DATA 30,78
01158:  DATA 25,30
0115A:  DATA 38,4C
0115C:  DATA 58,0D
0115E:  DATA 0A,00
01160:  DATA 09,09
01162:  DATA 09,52
01164:  DATA 65,73
01166:  DATA 65,72
01168:  DATA 76,65
0116A:  DATA 09,09
0116C:  DATA 30,78
0116E:  DATA 25,30
01170:  DATA 32,58
01172:  DATA 2F,20
01174:  DATA 30,78
01176:  DATA 25,30
01178:  DATA 32,58
0117A:  DATA 0D,0A
0117C:  DATA 00,00
0117E:  DATA 09,49
01180:  DATA 56,32
01182:  DATA 20,44
01184:  DATA 41,54
01186:  DATA 41,09
01188:  DATA 55,73
0118A:  DATA 65,64
0118C:  DATA 09,09
0118E:  DATA 30,78
01190:  DATA 25,30
01192:  DATA 38,4C
01194:  DATA 58,0D
01196:  DATA 0A,00
01198:  DATA 09,09
0119A:  DATA 09,55
0119C:  DATA 6E,63
0119E:  DATA 6F,70
011A0:  DATA 79,65
011A2:  DATA 64,09
011A4:  DATA 30,78
011A6:  DATA 25,30
011A8:  DATA 38,4C
011AA:  DATA 58,0D
011AC:  DATA 0A,00
011AE:  DATA 09,09
011B0:  DATA 09,52
011B2:  DATA 65,73
011B4:  DATA 65,72
011B6:  DATA 76,65
011B8:  DATA 09,09
011BA:  DATA 30,78
011BC:  DATA 25,30
011BE:  DATA 32,58
011C0:  DATA 2F,20
011C2:  DATA 30,78
011C4:  DATA 25,30
011C6:  DATA 32,58
011C8:  DATA 0D,0A
011CA:  DATA 00,00
011CC:  DATA 09,3D
011CE:  DATA 3D,3D
011D0:  DATA 3D,3D
011D2:  DATA 3D,3D
011D4:  DATA 3D,3D
011D6:  DATA 3D,3D
011D8:  DATA 3D,3D
011DA:  DATA 3D,3D
011DC:  DATA 3D,3D
011DE:  DATA 3D,3D
011E0:  DATA 3D,3D
011E2:  DATA 3D,3D
011E4:  DATA 3D,3D
011E6:  DATA 3D,3D
011E8:  DATA 3D,3D
011EA:  DATA 3D,3D
011EC:  DATA 3D,3D
011EE:  DATA 3D,3D
011F0:  DATA 3D,3D
011F2:  DATA 3D,3D
011F4:  DATA 3D,3D
011F6:  DATA 3D,3D
011F8:  DATA 3D,3D
011FA:  DATA 3D,3D
011FC:  DATA 3D,3D
011FE:  DATA 3D,0D
01200:  DATA 0A,00
01202:  DATA 43,52
01204:  DATA 43,20
01206:  DATA 76,65
01208:  DATA 72,69
0120A:  DATA 66,69
0120C:  DATA 63,61
0120E:  DATA 74,69
01210:  DATA 6F,6E
01212:  DATA 20,70
01214:  DATA 61,73
01216:  DATA 73,65
01218:  DATA 64,20
0121A:  DATA 6F,6E
0121C:  DATA 20,61
0121E:  DATA 74,74
01220:  DATA 65,6D
01222:  DATA 70,74
01224:  DATA 20,25
01226:  DATA 64,0D
01228:  DATA 0A,00
0122A:  DATA 45,72
0122C:  DATA 72,6F
0122E:  DATA 72,3A
01230:  DATA 20,43
01232:  DATA 52,43
01234:  DATA 20,76
01236:  DATA 65,72
01238:  DATA 69,66
0123A:  DATA 69,63
0123C:  DATA 61,74
0123E:  DATA 69,6F
01240:  DATA 6E,20
01242:  DATA 66,61
01244:  DATA 69,6C
01246:  DATA 65,64
01248:  DATA 20,61
0124A:  DATA 66,74
0124C:  DATA 65,72
0124E:  DATA 20,25
01250:  DATA 64,20
01252:  DATA 61,74
01254:  DATA 74,65
01256:  DATA 6D,70
01258:  DATA 74,73
0125A:  DATA 0D,0A
0125C:  DATA 00,00
0125E:  DATA 0D,0A
01260:  DATA 5F,5F
01262:  DATA 5F,5F
01264:  DATA 5F,5F
01266:  DATA 5F,5F
01268:  DATA 5F,5F
0126A:  DATA 5F,5F
0126C:  DATA 5F,5F
0126E:  DATA 5F,5F
01270:  DATA 5F,5F
01272:  DATA 5F,5F
01274:  DATA 5F,5F
01276:  DATA 5F,5F
01278:  DATA 5F,5F
0127A:  DATA 5F,5F
0127C:  DATA 5F,5F
0127E:  DATA 0D,0A
01280:  DATA 5F,5F
01282:  DATA 5F,5F
01284:  DATA 5F,53
01286:  DATA 74,61
01288:  DATA 72,74
0128A:  DATA 20,65
0128C:  DATA 78,65
0128E:  DATA 63,75
01290:  DATA 74,65
01292:  DATA 5F,6D
01294:  DATA 69,73
01296:  DATA 73,69
01298:  DATA 6F,6E
0129A:  DATA 5F,5F
0129C:  DATA 5F,5F
0129E:  DATA 5F,0D
012A0:  DATA 0A,0D
012A2:  DATA 0A,00
012A4:  DATA 43,6F
012A6:  DATA 6D,6D
012A8:  DATA 61,6E
012AA:  DATA 64,20
012AC:  DATA 49,44
012AE:  DATA 3A,20
012B0:  DATA 25,58
012B2:  DATA 0D,0A
012B4:  DATA 0D,0A
012B6:  DATA 00,00
012B8:  DATA 09,09
012BA:  DATA 2D,3E
012BC:  DATA 20,47
012BE:  DATA 65,74
012C0:  DATA 20,74
012C2:  DATA 69,6D
012C4:  DATA 65,20
012C6:  DATA 74,6F
012C8:  DATA 20,25
012CA:  DATA 6C,75
012CC:  DATA 20,64
012CE:  DATA 61,79
012D0:  DATA 73,2C
012D2:  DATA 20,25
012D4:  DATA 30,32
012D6:  DATA 75,3A
012D8:  DATA 25,30
012DA:  DATA 32,75
012DC:  DATA 3A,25
012DE:  DATA 30,32
012E0:  DATA 75,0D
012E2:  DATA 0A,00
012E4:  DATA 09,09
012E6:  DATA 2D,3E
012E8:  DATA 20,49
012EA:  DATA 6E,76
012EC:  DATA 61,6C
012EE:  DATA 69,64
012F0:  DATA 20,43
012F2:  DATA 4D,44
012F4:  DATA 20,49
012F6:  DATA 44,21
012F8:  DATA 0D,0A
012FA:  DATA 00,00
012FC:  DATA 0D,0A
012FE:  DATA 5F,5F
01300:  DATA 5F,5F
01302:  DATA 5F,5F
01304:  DATA 45,6E
01306:  DATA 64,20
01308:  DATA 65,78
0130A:  DATA 65,63
0130C:  DATA 75,74
0130E:  DATA 65,5F
01310:  DATA 6D,69
01312:  DATA 73,73
01314:  DATA 69,6F
01316:  DATA 6E,5F
01318:  DATA 5F,5F
0131A:  DATA 5F,5F
0131C:  DATA 5F,0D
0131E:  DATA 0A,5F
01320:  DATA 5F,5F
01322:  DATA 5F,5F
01324:  DATA 5F,5F
01326:  DATA 5F,5F
01328:  DATA 5F,5F
0132A:  DATA 5F,5F
0132C:  DATA 5F,5F
0132E:  DATA 5F,5F
01330:  DATA 5F,5F
01332:  DATA 5F,5F
01334:  DATA 5F,5F
01336:  DATA 5F,5F
01338:  DATA 5F,5F
0133A:  DATA 5F,5F
0133C:  DATA 5F,5F
0133E:  DATA 0D,0A
01340:  DATA 00,00
01342:  DATA 53,74
01344:  DATA 61,72
01346:  DATA 74,20
01348:  DATA 65,78
0134A:  DATA 65,63
0134C:  DATA 75,74
0134E:  DATA 65,5F
01350:  DATA 63,6F
01352:  DATA 6D,6D
01354:  DATA 61,6E
01356:  DATA 64,0D
01358:  DATA 0A,00
0135A:  DATA 09,2D
0135C:  DATA 3E,20
0135E:  DATA 55,70
01360:  DATA 6C,69
01362:  DATA 6E,6B
01364:  DATA 20,63
01366:  DATA 6F,6D
01368:  DATA 6D,61
0136A:  DATA 6E,64
0136C:  DATA 0D,0A
0136E:  DATA 00,00
01370:  DATA 09,20
01372:  DATA 20,20
01374:  DATA 54,72
01376:  DATA 61,6E
01378:  DATA 73,6D
0137A:  DATA 69,74
0137C:  DATA 20,41
0137E:  DATA 63,6B
01380:  DATA 6E,6F
01382:  DATA 6C,65
01384:  DATA 67,64
01386:  DATA 65,0D
01388:  DATA 0A,00
0138A:  DATA 09,2D
0138C:  DATA 3E,20
0138E:  DATA 53,74
01390:  DATA 61,74
01392:  DATA 75,73
01394:  DATA 20,63
01396:  DATA 68,65
01398:  DATA 63,6B
0139A:  DATA 0D,0A
0139C:  DATA 00,00
0139E:  DATA 09,20
013A0:  DATA 20,20
013A2:  DATA 54,72
013A4:  DATA 61,6E
013A6:  DATA 73,6D
013A8:  DATA 69,74
013AA:  DATA 20,4D
013AC:  DATA 49,53
013AE:  DATA 20,4D
013B0:  DATA 43,55
013B2:  DATA 20,53
013B4:  DATA 74,61
013B6:  DATA 74,75
013B8:  DATA 73,0D
013BA:  DATA 0A,00
013BC:  DATA 66,69
013BE:  DATA 6E,69
013C0:  DATA 73,68
013C2:  DATA 65,64
013C4:  DATA 20,69
013C6:  DATA 6E,20
013C8:  DATA 73,74
013CA:  DATA 61,74
013CC:  DATA 75,73
013CE:  DATA 5F,63
013D0:  DATA 68,65
013D2:  DATA 63,6B
013D4:  DATA 0D,0A
013D6:  DATA 00,00
013D8:  DATA 09,2D
013DA:  DATA 3E,20
013DC:  DATA 53,4D
013DE:  DATA 46,20
013E0:  DATA 61,76
013E2:  DATA 61,69
013E4:  DATA 6C,61
013E6:  DATA 62,6C
013E8:  DATA 65,20
013EA:  DATA 63,68
013EC:  DATA 65,63
013EE:  DATA 6B,0D
013F0:  DATA 0A,00
013F2:  DATA 09,20
013F4:  DATA 20,20
013F6:  DATA 54,72
013F8:  DATA 61,6E
013FA:  DATA 73,6D
013FC:  DATA 69,74
013FE:  DATA 20,41
01400:  DATA 63,6B
01402:  DATA 6E,6F
01404:  DATA 77,6C
01406:  DATA 65,64
01408:  DATA 67,65
0140A:  DATA 6D,65
0140C:  DATA 6E,74
0140E:  DATA 0D,0A
01410:  DATA 00,00
01412:  DATA 09,09
01414:  DATA 2D,3E
01416:  DATA 20,64
01418:  DATA 65,6E
0141A:  DATA 69,65
0141C:  DATA 64,0D
0141E:  DATA 0A,00
01420:  DATA 09,09
01422:  DATA 2D,3E
01424:  DATA 20,61
01426:  DATA 6C,6C
01428:  DATA 6F,77
0142A:  DATA 65,64
0142C:  DATA 0D,0A
0142E:  DATA 00,00
01430:  DATA 09,09
01432:  DATA 2D,3E
01434:  DATA 20,44
01436:  DATA 65,71
01438:  DATA 75,65
0143A:  DATA 75,65
0143C:  DATA 64,3A
0143E:  DATA 20,66
01440:  DATA 75,6E
01442:  DATA 63,3D
01444:  DATA 25,75
01446:  DATA 20,6D
01448:  DATA 69,73
0144A:  DATA 73,69
0144C:  DATA 6F,6E
0144E:  DATA 3D,25
01450:  DATA 75,20
01452:  DATA 73,69
01454:  DATA 7A,65
01456:  DATA 3D,25
01458:  DATA 6C,64
0145A:  DATA 20,61
0145C:  DATA 64,64
0145E:  DATA 72,3D
01460:  DATA 25,6C
01462:  DATA 64,0D
01464:  DATA 0A,00
01466:  DATA 09,09
01468:  DATA 20,20
0146A:  DATA 20,55
0146C:  DATA 6E,6B
0146E:  DATA 6E,6F
01470:  DATA 77,6E
01472:  DATA 20,66
01474:  DATA 75,6E
01476:  DATA 63,5F
01478:  DATA 74,79
0147A:  DATA 70,65
0147C:  DATA 3D,25
0147E:  DATA 75,0D
01480:  DATA 0A,00
01482:  DATA 09,09
01484:  DATA 2D,3E
01486:  DATA 20,43
01488:  DATA 6F,6D
0148A:  DATA 70,6C
0148C:  DATA 65,74
0148E:  DATA 65,64
01490:  DATA 20,25
01492:  DATA 75,20
01494:  DATA 6F,70
01496:  DATA 65,72
01498:  DATA 61,74
0149A:  DATA 69,6F
0149C:  DATA 6E,73
0149E:  DATA 0D,0A
014A0:  DATA 00,00
014A2:  DATA 09,2D
014A4:  DATA 3E,20
014A6:  DATA 54,49
014A8:  DATA 4D,45
014AA:  DATA 20,52
014AC:  DATA 65,63
014AE:  DATA 65,69
014B0:  DATA 76,65
014B2:  DATA 0D,0A
014B4:  DATA 00,00
014B6:  DATA 09,20
014B8:  DATA 20,20
014BA:  DATA 54,72
014BC:  DATA 61,6E
014BE:  DATA 73,6D
014C0:  DATA 69,74
014C2:  DATA 20,41
014C4:  DATA 63,6B
014C6:  DATA 6E,6F
014C8:  DATA 6C,65
014CA:  DATA 67,64
014CC:  DATA 65,0D
014CE:  DATA 0A,00
014D0:  DATA 09,09
014D2:  DATA 2D,3E
014D4:  DATA 20,53
014D6:  DATA 65,74
014D8:  DATA 20,74
014DA:  DATA 69,6D
014DC:  DATA 65,20
014DE:  DATA 74,6F
014E0:  DATA 20,25
014E2:  DATA 6C,75
014E4:  DATA 20,64
014E6:  DATA 61,79
014E8:  DATA 73,2C
014EA:  DATA 20,25
014EC:  DATA 30,32
014EE:  DATA 75,3A
014F0:  DATA 25,30
014F2:  DATA 32,75
014F4:  DATA 3A,25
014F6:  DATA 30,32
014F8:  DATA 75,0D
014FA:  DATA 0A,00
014FC:  DATA 53,74
014FE:  DATA 61,72
01500:  DATA 74,20
01502:  DATA 4D,4F
01504:  DATA 44,45
01506:  DATA 20,4D
01508:  DATA 45,41
0150A:  DATA 53,20
0150C:  DATA 49,56
0150E:  DATA 20,31
01510:  DATA 20,53
01512:  DATA 57,45
01514:  DATA 45,50
01516:  DATA 0D,0A
01518:  DATA 00,00
0151A:  DATA 0D,0A
0151C:  DATA 41,44
0151E:  DATA 44,20
01520:  DATA 53,4D
01522:  DATA 46,20
01524:  DATA 51,55
01526:  DATA 45,55
01528:  DATA 45,0D
0152A:  DATA 0A,00
0152C:  DATA 09,4D
0152E:  DATA 69,73
01530:  DATA 73,69
01532:  DATA 6F,6E
01534:  DATA 20,49
01536:  DATA 44,3A
01538:  DATA 20,20
0153A:  DATA 20,25
0153C:  DATA 30,32
0153E:  DATA 58,0D
01540:  DATA 0A,00
01542:  DATA 09,46
01544:  DATA 75,6E
01546:  DATA 63,74
01548:  DATA 69,6F
0154A:  DATA 6E,20
0154C:  DATA 54,79
0154E:  DATA 70,65
01550:  DATA 3A,25
01552:  DATA 30,32
01554:  DATA 58,0D
01556:  DATA 0A,00
01558:  DATA 09,57
0155A:  DATA 72,69
0155C:  DATA 74,65
0155E:  DATA 20,4D
01560:  DATA 6F,64
01562:  DATA 65,3A
01564:  DATA 20,20
01566:  DATA 20,25
01568:  DATA 30,32
0156A:  DATA 58,0D
0156C:  DATA 0A,00
0156E:  DATA 09,53
01570:  DATA 6F,75
01572:  DATA 72,63
01574:  DATA 65,20
01576:  DATA 54,79
01578:  DATA 70,65
0157A:  DATA 3A,20
0157C:  DATA 20,25
0157E:  DATA 30,32
01580:  DATA 58,0D
01582:  DATA 0A,00
01584:  DATA 09,53
01586:  DATA 74,61
01588:  DATA 72,74
0158A:  DATA 20,41
0158C:  DATA 64,64
0158E:  DATA 72,65
01590:  DATA 73,73
01592:  DATA 3A,25
01594:  DATA 30,34
01596:  DATA 58,0D
01598:  DATA 0A,00
0159A:  DATA 09,53
0159C:  DATA 69,7A
0159E:  DATA 65,3A
015A0:  DATA 20,20
015A2:  DATA 20,20
015A4:  DATA 20,20
015A6:  DATA 20,20
015A8:  DATA 20,25
015AA:  DATA 30,34
015AC:  DATA 58,0D
015AE:  DATA 0A,00
015B0:  DATA 0D,0A
015B2:  DATA 41,44
015B4:  DATA 44,20
015B6:  DATA 53,4D
015B8:  DATA 46,20
015BA:  DATA 51,55
015BC:  DATA 45,55
015BE:  DATA 45,0D
015C0:  DATA 0A,00
015C2:  DATA 09,4D
015C4:  DATA 69,73
015C6:  DATA 73,69
015C8:  DATA 6F,6E
015CA:  DATA 20,49
015CC:  DATA 44,3A
015CE:  DATA 20,20
015D0:  DATA 20,25
015D2:  DATA 30,32
015D4:  DATA 58,0D
015D6:  DATA 0A,00
015D8:  DATA 09,46
015DA:  DATA 75,6E
015DC:  DATA 63,74
015DE:  DATA 69,6F
015E0:  DATA 6E,20
015E2:  DATA 54,79
015E4:  DATA 70,65
015E6:  DATA 3A,25
015E8:  DATA 30,32
015EA:  DATA 58,0D
015EC:  DATA 0A,00
015EE:  DATA 09,57
015F0:  DATA 72,69
015F2:  DATA 74,65
015F4:  DATA 20,4D
015F6:  DATA 6F,64
015F8:  DATA 65,3A
015FA:  DATA 20,20
015FC:  DATA 20,25
015FE:  DATA 30,32
01600:  DATA 58,0D
01602:  DATA 0A,00
01604:  DATA 09,53
01606:  DATA 6F,75
01608:  DATA 72,63
0160A:  DATA 65,20
0160C:  DATA 54,79
0160E:  DATA 70,65
01610:  DATA 3A,20
01612:  DATA 20,25
01614:  DATA 30,32
01616:  DATA 58,0D
01618:  DATA 0A,00
0161A:  DATA 09,53
0161C:  DATA 74,61
0161E:  DATA 72,74
01620:  DATA 20,41
01622:  DATA 64,64
01624:  DATA 72,65
01626:  DATA 73,73
01628:  DATA 3A,25
0162A:  DATA 30,34
0162C:  DATA 58,0D
0162E:  DATA 0A,00
01630:  DATA 09,53
01632:  DATA 69,7A
01634:  DATA 65,3A
01636:  DATA 20,20
01638:  DATA 20,20
0163A:  DATA 20,20
0163C:  DATA 20,20
0163E:  DATA 20,25
01640:  DATA 30,34
01642:  DATA 58,0D
01644:  DATA 0A,00
01646:  DATA 53,74
01648:  DATA 61,72
0164A:  DATA 74,20
0164C:  DATA 4D,4F
0164E:  DATA 44,45
01650:  DATA 20,4D
01652:  DATA 45,41
01654:  DATA 53,20
01656:  DATA 49,56
01658:  DATA 20,50
0165A:  DATA 4F,52
0165C:  DATA 54,31
0165E:  DATA 0D,0A
01660:  DATA 00,00
01662:  DATA 0D,0A
01664:  DATA 41,44
01666:  DATA 44,20
01668:  DATA 53,4D
0166A:  DATA 46,20
0166C:  DATA 51,55
0166E:  DATA 45,55
01670:  DATA 45,0D
01672:  DATA 0A,00
01674:  DATA 09,4D
01676:  DATA 69,73
01678:  DATA 73,69
0167A:  DATA 6F,6E
0167C:  DATA 20,49
0167E:  DATA 44,3A
01680:  DATA 20,20
01682:  DATA 20,25
01684:  DATA 30,32
01686:  DATA 58,0D
01688:  DATA 0A,00
0168A:  DATA 09,46
0168C:  DATA 75,6E
0168E:  DATA 63,74
01690:  DATA 69,6F
01692:  DATA 6E,20
01694:  DATA 54,79
01696:  DATA 70,65
01698:  DATA 3A,25
0169A:  DATA 30,32
0169C:  DATA 58,0D
0169E:  DATA 0A,00
016A0:  DATA 09,57
016A2:  DATA 72,69
016A4:  DATA 74,65
016A6:  DATA 20,4D
016A8:  DATA 6F,64
016AA:  DATA 65,3A
016AC:  DATA 20,20
016AE:  DATA 20,25
016B0:  DATA 30,32
016B2:  DATA 58,0D
016B4:  DATA 0A,00
016B6:  DATA 09,53
016B8:  DATA 6F,75
016BA:  DATA 72,63
016BC:  DATA 65,20
016BE:  DATA 54,79
016C0:  DATA 70,65
016C2:  DATA 3A,20
016C4:  DATA 20,25
016C6:  DATA 30,32
016C8:  DATA 58,0D
016CA:  DATA 0A,00
016CC:  DATA 09,53
016CE:  DATA 74,61
016D0:  DATA 72,74
016D2:  DATA 20,41
016D4:  DATA 64,64
016D6:  DATA 72,65
016D8:  DATA 73,73
016DA:  DATA 3A,25
016DC:  DATA 30,34
016DE:  DATA 58,0D
016E0:  DATA 0A,00
016E2:  DATA 09,53
016E4:  DATA 69,7A
016E6:  DATA 65,3A
016E8:  DATA 20,20
016EA:  DATA 20,20
016EC:  DATA 20,20
016EE:  DATA 20,20
016F0:  DATA 20,25
016F2:  DATA 30,34
016F4:  DATA 58,0D
016F6:  DATA 0A,00
016F8:  DATA 53,74
016FA:  DATA 61,72
016FC:  DATA 74,20
016FE:  DATA 4D,4F
01700:  DATA 44,45
01702:  DATA 20,4D
01704:  DATA 45,41
01706:  DATA 53,20
01708:  DATA 49,56
0170A:  DATA 20,50
0170C:  DATA 4F,52
0170E:  DATA 54,32
01710:  DATA 0D,0A
01712:  DATA 00,00
01714:  DATA 0D,0A
01716:  DATA 41,44
01718:  DATA 44,20
0171A:  DATA 53,4D
0171C:  DATA 46,20
0171E:  DATA 51,55
01720:  DATA 45,55
01722:  DATA 45,0D
01724:  DATA 0A,00
01726:  DATA 09,4D
01728:  DATA 69,73
0172A:  DATA 73,69
0172C:  DATA 6F,6E
0172E:  DATA 20,49
01730:  DATA 44,3A
01732:  DATA 20,20
01734:  DATA 20,25
01736:  DATA 30,32
01738:  DATA 58,0D
0173A:  DATA 0A,00
0173C:  DATA 09,46
0173E:  DATA 75,6E
01740:  DATA 63,74
01742:  DATA 69,6F
01744:  DATA 6E,20
01746:  DATA 54,79
01748:  DATA 70,65
0174A:  DATA 3A,25
0174C:  DATA 30,32
0174E:  DATA 58,0D
01750:  DATA 0A,00
01752:  DATA 09,57
01754:  DATA 72,69
01756:  DATA 74,65
01758:  DATA 20,4D
0175A:  DATA 6F,64
0175C:  DATA 65,3A
0175E:  DATA 20,20
01760:  DATA 20,25
01762:  DATA 30,32
01764:  DATA 58,0D
01766:  DATA 0A,00
01768:  DATA 09,53
0176A:  DATA 6F,75
0176C:  DATA 72,63
0176E:  DATA 65,20
01770:  DATA 54,79
01772:  DATA 70,65
01774:  DATA 3A,20
01776:  DATA 20,25
01778:  DATA 30,32
0177A:  DATA 58,0D
0177C:  DATA 0A,00
0177E:  DATA 09,53
01780:  DATA 74,61
01782:  DATA 72,74
01784:  DATA 20,41
01786:  DATA 64,64
01788:  DATA 72,65
0178A:  DATA 73,73
0178C:  DATA 3A,25
0178E:  DATA 30,34
01790:  DATA 58,0D
01792:  DATA 0A,00
01794:  DATA 09,53
01796:  DATA 69,7A
01798:  DATA 65,3A
0179A:  DATA 20,20
0179C:  DATA 20,20
0179E:  DATA 20,20
017A0:  DATA 20,20
017A2:  DATA 20,25
017A4:  DATA 30,34
017A6:  DATA 58,0D
017A8:  DATA 0A,00
017AA:  DATA 53,74
017AC:  DATA 61,72
017AE:  DATA 74,20
017B0:  DATA 4D,4F
017B2:  DATA 44,45
017B4:  DATA 20,4D
017B6:  DATA 45,41
017B8:  DATA 53,20
017BA:  DATA 49,56
017BC:  DATA 0D,0A
017BE:  DATA 00,00
017C0:  DATA 0D,0A
017C2:  DATA 41,44
017C4:  DATA 44,20
017C6:  DATA 53,4D
017C8:  DATA 46,20
017CA:  DATA 51,55
017CC:  DATA 45,55
017CE:  DATA 45,0D
017D0:  DATA 0A,00
017D2:  DATA 09,4D
017D4:  DATA 69,73
017D6:  DATA 73,69
017D8:  DATA 6F,6E
017DA:  DATA 20,49
017DC:  DATA 44,3A
017DE:  DATA 20,20
017E0:  DATA 20,25
017E2:  DATA 30,32
017E4:  DATA 58,0D
017E6:  DATA 0A,00
017E8:  DATA 09,46
017EA:  DATA 75,6E
017EC:  DATA 63,74
017EE:  DATA 69,6F
017F0:  DATA 6E,20
017F2:  DATA 54,79
017F4:  DATA 70,65
017F6:  DATA 3A,25
017F8:  DATA 30,32
017FA:  DATA 58,0D
017FC:  DATA 0A,00
017FE:  DATA 09,57
01800:  DATA 72,69
01802:  DATA 74,65
01804:  DATA 20,4D
01806:  DATA 6F,64
01808:  DATA 65,3A
0180A:  DATA 20,20
0180C:  DATA 20,25
0180E:  DATA 30,32
01810:  DATA 58,0D
01812:  DATA 0A,00
01814:  DATA 09,53
01816:  DATA 6F,75
01818:  DATA 72,63
0181A:  DATA 65,20
0181C:  DATA 54,79
0181E:  DATA 70,65
01820:  DATA 3A,20
01822:  DATA 20,25
01824:  DATA 30,32
01826:  DATA 58,0D
01828:  DATA 0A,00
0182A:  DATA 09,53
0182C:  DATA 74,61
0182E:  DATA 72,74
01830:  DATA 20,41
01832:  DATA 64,64
01834:  DATA 72,65
01836:  DATA 73,73
01838:  DATA 3A,25
0183A:  DATA 30,34
0183C:  DATA 58,0D
0183E:  DATA 0A,00
01840:  DATA 09,53
01842:  DATA 69,7A
01844:  DATA 65,3A
01846:  DATA 20,20
01848:  DATA 20,20
0184A:  DATA 20,20
0184C:  DATA 20,20
0184E:  DATA 20,25
01850:  DATA 30,34
01852:  DATA 58,0D
01854:  DATA 0A,00
01856:  DATA 0D,0A
01858:  DATA 41,44
0185A:  DATA 44,20
0185C:  DATA 53,4D
0185E:  DATA 46,20
01860:  DATA 51,55
01862:  DATA 45,55
01864:  DATA 45,0D
01866:  DATA 0A,00
01868:  DATA 09,4D
0186A:  DATA 69,73
0186C:  DATA 73,69
0186E:  DATA 6F,6E
01870:  DATA 20,49
01872:  DATA 44,3A
01874:  DATA 20,20
01876:  DATA 20,25
01878:  DATA 30,32
0187A:  DATA 58,0D
0187C:  DATA 0A,00
0187E:  DATA 09,46
01880:  DATA 75,6E
01882:  DATA 63,74
01884:  DATA 69,6F
01886:  DATA 6E,20
01888:  DATA 54,79
0188A:  DATA 70,65
0188C:  DATA 3A,25
0188E:  DATA 30,32
01890:  DATA 58,0D
01892:  DATA 0A,00
01894:  DATA 09,57
01896:  DATA 72,69
01898:  DATA 74,65
0189A:  DATA 20,4D
0189C:  DATA 6F,64
0189E:  DATA 65,3A
018A0:  DATA 20,20
018A2:  DATA 20,25
018A4:  DATA 30,32
018A6:  DATA 58,0D
018A8:  DATA 0A,00
018AA:  DATA 09,53
018AC:  DATA 6F,75
018AE:  DATA 72,63
018B0:  DATA 65,20
018B2:  DATA 54,79
018B4:  DATA 70,65
018B6:  DATA 3A,20
018B8:  DATA 20,25
018BA:  DATA 30,32
018BC:  DATA 58,0D
018BE:  DATA 0A,00
018C0:  DATA 09,53
018C2:  DATA 74,61
018C4:  DATA 72,74
018C6:  DATA 20,41
018C8:  DATA 64,64
018CA:  DATA 72,65
018CC:  DATA 73,73
018CE:  DATA 3A,25
018D0:  DATA 30,34
018D2:  DATA 58,0D
018D4:  DATA 0A,00
018D6:  DATA 09,53
018D8:  DATA 69,7A
018DA:  DATA 65,3A
018DC:  DATA 20,20
018DE:  DATA 20,20
018E0:  DATA 20,20
018E2:  DATA 20,20
018E4:  DATA 20,25
018E6:  DATA 30,34
018E8:  DATA 58,0D
018EA:  DATA 0A,00
018EC:  DATA 0D,0A
018EE:  DATA 41,44
018F0:  DATA 44,20
018F2:  DATA 53,4D
018F4:  DATA 46,20
018F6:  DATA 51,55
018F8:  DATA 45,55
018FA:  DATA 45,0D
018FC:  DATA 0A,00
018FE:  DATA 09,4D
01900:  DATA 69,73
01902:  DATA 73,69
01904:  DATA 6F,6E
01906:  DATA 20,49
01908:  DATA 44,3A
0190A:  DATA 20,20
0190C:  DATA 20,25
0190E:  DATA 30,32
01910:  DATA 58,0D
01912:  DATA 0A,00
01914:  DATA 09,46
01916:  DATA 75,6E
01918:  DATA 63,74
0191A:  DATA 69,6F
0191C:  DATA 6E,20
0191E:  DATA 54,79
01920:  DATA 70,65
01922:  DATA 3A,25
01924:  DATA 30,32
01926:  DATA 58,0D
01928:  DATA 0A,00
0192A:  DATA 09,57
0192C:  DATA 72,69
0192E:  DATA 74,65
01930:  DATA 20,4D
01932:  DATA 6F,64
01934:  DATA 65,3A
01936:  DATA 20,20
01938:  DATA 20,25
0193A:  DATA 30,32
0193C:  DATA 58,0D
0193E:  DATA 0A,00
01940:  DATA 09,53
01942:  DATA 6F,75
01944:  DATA 72,63
01946:  DATA 65,20
01948:  DATA 54,79
0194A:  DATA 70,65
0194C:  DATA 3A,20
0194E:  DATA 20,25
01950:  DATA 30,32
01952:  DATA 58,0D
01954:  DATA 0A,00
01956:  DATA 09,53
01958:  DATA 74,61
0195A:  DATA 72,74
0195C:  DATA 20,41
0195E:  DATA 64,64
01960:  DATA 72,65
01962:  DATA 73,73
01964:  DATA 3A,25
01966:  DATA 30,34
01968:  DATA 58,0D
0196A:  DATA 0A,00
0196C:  DATA 09,53
0196E:  DATA 69,7A
01970:  DATA 65,3A
01972:  DATA 20,20
01974:  DATA 20,20
01976:  DATA 20,20
01978:  DATA 20,20
0197A:  DATA 20,25
0197C:  DATA 30,34
0197E:  DATA 58,0D
01980:  DATA 0A,00
01982:  DATA 45,6E
01984:  DATA 64,20
01986:  DATA 4D,4F
01988:  DATA 44,45
0198A:  DATA 20,4D
0198C:  DATA 45,41
0198E:  DATA 53,20
01990:  DATA 49,56
01992:  DATA 20,6D
01994:  DATA 69,73
01996:  DATA 73,69
01998:  DATA 6F,6E
0199A:  DATA 0D,0A
0199C:  DATA 00,00
0199E:  DATA 53,74
019A0:  DATA 61,72
019A2:  DATA 74,20
019A4:  DATA 4D,4F
019A6:  DATA 44,45
019A8:  DATA 20,49
019AA:  DATA 56,20
019AC:  DATA 44,45
019AE:  DATA 42,55
019B0:  DATA 47,0D
019B2:  DATA 0A,00
019B4:  DATA 09,49
019B6:  DATA 44,3A
019B8:  DATA 20,25
019BA:  DATA 30,32
019BC:  DATA 58,0D
019BE:  DATA 0A,00
019C0:  DATA 09,53
019C2:  DATA 6C,65
019C4:  DATA 65,70
019C6:  DATA 54,69
019C8:  DATA 6D,65
019CA:  DATA 3A,20
019CC:  DATA 20,20
019CE:  DATA 20,20
019D0:  DATA 20,20
019D2:  DATA 20,30
019D4:  DATA 78,25
019D6:  DATA 30,34
019D8:  DATA 58,0D
019DA:  DATA 0A,00
019DC:  DATA 09,4C
019DE:  DATA 6F,67
019E0:  DATA 43,75
019E2:  DATA 72,72
019E4:  DATA 54,68
019E6:  DATA 72,65
019E8:  DATA 73,68
019EA:  DATA 6F,6C
019EC:  DATA 64,3A
019EE:  DATA 20,30
019F0:  DATA 78,25
019F2:  DATA 30,34
019F4:  DATA 58,0D
019F6:  DATA 0A,00
019F8:  DATA 09,50
019FA:  DATA 44,54
019FC:  DATA 68,72
019FE:  DATA 65,73
01A00:  DATA 68,6F
01A02:  DATA 6C,64
01A04:  DATA 3A,20
01A06:  DATA 20,20
01A08:  DATA 20,20
01A0A:  DATA 20,30
01A0C:  DATA 78,25
01A0E:  DATA 30,34
01A10:  DATA 58,0D
01A12:  DATA 0A,00
01A14:  DATA 09,43
01A16:  DATA 75,72
01A18:  DATA 72,65
01A1A:  DATA 6E,74
01A1C:  DATA 4C,69
01A1E:  DATA 6D,69
01A20:  DATA 74,3A
01A22:  DATA 20,20
01A24:  DATA 20,20
01A26:  DATA 20,30
01A28:  DATA 78,25
01A2A:  DATA 30,34
01A2C:  DATA 58,0D
01A2E:  DATA 0A,00
01A30:  DATA 09,4D
01A32:  DATA 65,61
01A34:  DATA 73,75
01A36:  DATA 72,65
01A38:  DATA 6D,65
01A3A:  DATA 6E,74
01A3C:  DATA 54,69
01A3E:  DATA 6D,65
01A40:  DATA 3A,20
01A42:  DATA 20,30
01A44:  DATA 78,25
01A46:  DATA 30,34
01A48:  DATA 58,0D
01A4A:  DATA 0A,00
01A4C:  DATA 5B,49
01A4E:  DATA 56,44
01A50:  DATA 42,47
01A52:  DATA 5D,20
01A54:  DATA 45,6E
01A56:  DATA 64,20
01A58:  DATA 4D,4F
01A5A:  DATA 44,45
01A5C:  DATA 20,49
01A5E:  DATA 56,20
01A60:  DATA 44,45
01A62:  DATA 42,55
01A64:  DATA 47,0D
01A66:  DATA 0A,00
01A68:  DATA 74,65
01A6A:  DATA 6D,70
01A6C:  DATA 5F,74
01A6E:  DATA 6F,70
01A70:  DATA 2C,20
01A72:  DATA 74,65
01A74:  DATA 6D,70
01A76:  DATA 5F,62
01A78:  DATA 6F,74
01A7A:  DATA 2C,20
01A7C:  DATA 74,65
01A7E:  DATA 6D,70
01A80:  DATA 5F,6D
01A82:  DATA 69,73
01A84:  DATA 37,2C
01A86:  DATA 20,70
01A88:  DATA 64,0D
01A8A:  DATA 0A,00
01A8C:  DATA 4D,45
01A8E:  DATA 41,53
01A90:  DATA 20,49
01A92:  DATA 56,20
01A94:  DATA 43,6F
01A96:  DATA 6D,6D
01A98:  DATA 61,6E
01A9A:  DATA 64,20
01A9C:  DATA 50,61
01A9E:  DATA 72,61
01AA0:  DATA 6D,65
01AA2:  DATA 74,65
01AA4:  DATA 72,73
01AA6:  DATA 3A,0D
01AA8:  DATA 0A,00
01AAA:  DATA 09,49
01AAC:  DATA 44,3A
01AAE:  DATA 20,25
01AB0:  DATA 30,32
01AB2:  DATA 58,0D
01AB4:  DATA 0A,00
01AB6:  DATA 09,53
01AB8:  DATA 77,65
01ABA:  DATA 65,70
01ABC:  DATA 49,6E
01ABE:  DATA 74,65
01AC0:  DATA 72,76
01AC2:  DATA 61,6C
01AC4:  DATA 20,20
01AC6:  DATA 20,3A
01AC8:  DATA 25,6C
01ACA:  DATA 75,5B
01ACC:  DATA 6D,73
01ACE:  DATA 5D,0D
01AD0:  DATA 0A,00
01AD2:  DATA 09,50
01AD4:  DATA 44,20
01AD6:  DATA 54,68
01AD8:  DATA 72,65
01ADA:  DATA 73,68
01ADC:  DATA 6F,6C
01ADE:  DATA 64,20
01AE0:  DATA 20,20
01AE2:  DATA 20,3A
01AE4:  DATA 25,6C
01AE6:  DATA 75,5B
01AE8:  DATA 57,2F
01AEA:  DATA 6D,32
01AEC:  DATA 5D,0D
01AEE:  DATA 0A,00
01AF0:  DATA 09,53
01AF2:  DATA 77,65
01AF4:  DATA 65,70
01AF6:  DATA 4C,69
01AF8:  DATA 6D,69
01AFA:  DATA 74,20
01AFC:  DATA 20,20
01AFE:  DATA 20,20
01B00:  DATA 20,3A
01B02:  DATA 25,6C
01B04:  DATA 75,5B
01B06:  DATA 6D,41
01B08:  DATA 5D,0D
01B0A:  DATA 0A,00
01B0C:  DATA 09,4C
01B0E:  DATA 6F,67
01B10:  DATA 54,68
01B12:  DATA 72,65
01B14:  DATA 73,68
01B16:  DATA 6F,6C
01B18:  DATA 64,20
01B1A:  DATA 20,20
01B1C:  DATA 20,3A
01B1E:  DATA 25,6C
01B20:  DATA 75,5B
01B22:  DATA 6D,41
01B24:  DATA 5D,0D
01B26:  DATA 0A,00
01B28:  DATA 09,4D
01B2A:  DATA 65,61
01B2C:  DATA 73,75
01B2E:  DATA 72,65
01B30:  DATA 6D,65
01B32:  DATA 6E,74
01B34:  DATA 54,69
01B36:  DATA 6D,65
01B38:  DATA 20,3A
01B3A:  DATA 25,6C
01B3C:  DATA 75,5B
01B3E:  DATA 73,5D
01B40:  DATA 0D,0A
01B42:  DATA 0D,0A
01B44:  DATA 00,00
01B46:  DATA 53,74
01B48:  DATA 61,72
01B4A:  DATA 74,20
01B4C:  DATA 4D,4F
01B4E:  DATA 44,45
01B50:  DATA 20,4D
01B52:  DATA 45,41
01B54:  DATA 53,20
01B56:  DATA 50,44
01B58:  DATA 0D,0A
01B5A:  DATA 00,00
01B5C:  DATA 45,6E
01B5E:  DATA 64,20
01B60:  DATA 4D,4F
01B62:  DATA 44,45
01B64:  DATA 20,4D
01B66:  DATA 45,41
01B68:  DATA 53,20
01B6A:  DATA 50,44
01B6C:  DATA 0D,0A
01B6E:  DATA 00,00
01B70:  DATA 53,74
01B72:  DATA 61,72
01B74:  DATA 74,20
01B76:  DATA 46,6C
01B78:  DATA 61,73
01B7A:  DATA 68,20
01B7C:  DATA 45,72
01B7E:  DATA 61,73
01B80:  DATA 65,20
01B82:  DATA 41,6C
01B84:  DATA 6C,0D
01B86:  DATA 0A,00
01B88:  DATA 45,6E
01B8A:  DATA 64,20
01B8C:  DATA 46,6C
01B8E:  DATA 61,73
01B90:  DATA 68,20
01B92:  DATA 45,72
01B94:  DATA 61,73
01B96:  DATA 65,20
01B98:  DATA 41,6C
01B9A:  DATA 6C,0D
01B9C:  DATA 0A,00
01B9E:  DATA 53,74
01BA0:  DATA 61,72
01BA2:  DATA 74,20
01BA4:  DATA 46,6C
01BA6:  DATA 61,73
01BA8:  DATA 68,20
01BAA:  DATA 45,72
01BAC:  DATA 61,73
01BAE:  DATA 65,20
01BB0:  DATA 31,20
01BB2:  DATA 53,65
01BB4:  DATA 63,74
01BB6:  DATA 6F,72
01BB8:  DATA 0D,0A
01BBA:  DATA 00,00
01BBC:  DATA 09,53
01BBE:  DATA 65,63
01BC0:  DATA 74,6F
01BC2:  DATA 72,20
01BC4:  DATA 41,64
01BC6:  DATA 64,72
01BC8:  DATA 65,73
01BCA:  DATA 73,3A
01BCC:  DATA 20,30
01BCE:  DATA 78,25
01BD0:  DATA 30,38
01BD2:  DATA 4C,58
01BD4:  DATA 0D,0A
01BD6:  DATA 00,00
01BD8:  DATA 45,6E
01BDA:  DATA 64,20
01BDC:  DATA 46,6C
01BDE:  DATA 61,73
01BE0:  DATA 68,20
01BE2:  DATA 45,72
01BE4:  DATA 61,73
01BE6:  DATA 65,20
01BE8:  DATA 31,20
01BEA:  DATA 53,65
01BEC:  DATA 63,74
01BEE:  DATA 6F,72
01BF0:  DATA 0D,0A
01BF2:  DATA 00,00
01BF4:  DATA 53,74
01BF6:  DATA 61,72
01BF8:  DATA 74,20
01BFA:  DATA 46,6C
01BFC:  DATA 61,73
01BFE:  DATA 68,20
01C00:  DATA 45,72
01C02:  DATA 61,73
01C04:  DATA 65,20
01C06:  DATA 34,6B
01C08:  DATA 42,79
01C0A:  DATA 74,65
01C0C:  DATA 20,53
01C0E:  DATA 75,62
01C10:  DATA 73,65
01C12:  DATA 63,74
01C14:  DATA 6F,72
01C16:  DATA 0D,0A
01C18:  DATA 00,00
01C1A:  DATA 09,53
01C1C:  DATA 75,62
01C1E:  DATA 73,65
01C20:  DATA 63,74
01C22:  DATA 6F,72
01C24:  DATA 20,41
01C26:  DATA 64,64
01C28:  DATA 72,65
01C2A:  DATA 73,73
01C2C:  DATA 3A,20
01C2E:  DATA 30,78
01C30:  DATA 25,30
01C32:  DATA 38,4C
01C34:  DATA 58,0D
01C36:  DATA 0A,00
01C38:  DATA 45,6E
01C3A:  DATA 64,20
01C3C:  DATA 46,6C
01C3E:  DATA 61,73
01C40:  DATA 68,20
01C42:  DATA 45,72
01C44:  DATA 61,73
01C46:  DATA 65,20
01C48:  DATA 34,6B
01C4A:  DATA 42,79
01C4C:  DATA 74,65
01C4E:  DATA 20,53
01C50:  DATA 75,62
01C52:  DATA 73,65
01C54:  DATA 63,74
01C56:  DATA 6F,72
01C58:  DATA 0D,0A
01C5A:  DATA 00,00
01C5C:  DATA 53,74
01C5E:  DATA 61,72
01C60:  DATA 74,20
01C62:  DATA 46,6C
01C64:  DATA 61,73
01C66:  DATA 68,20
01C68:  DATA 45,72
01C6A:  DATA 61,73
01C6C:  DATA 65,20
01C6E:  DATA 36,34
01C70:  DATA 6B,42
01C72:  DATA 79,74
01C74:  DATA 65,20
01C76:  DATA 53,75
01C78:  DATA 62,73
01C7A:  DATA 65,63
01C7C:  DATA 74,6F
01C7E:  DATA 72,0D
01C80:  DATA 0A,00
01C82:  DATA 09,53
01C84:  DATA 75,62
01C86:  DATA 73,65
01C88:  DATA 63,74
01C8A:  DATA 6F,72
01C8C:  DATA 20,41
01C8E:  DATA 64,64
01C90:  DATA 72,65
01C92:  DATA 73,73
01C94:  DATA 3A,20
01C96:  DATA 30,78
01C98:  DATA 25,30
01C9A:  DATA 38,4C
01C9C:  DATA 58,0D
01C9E:  DATA 0A,00
01CA0:  DATA 45,6E
01CA2:  DATA 64,20
01CA4:  DATA 46,6C
01CA6:  DATA 61,73
01CA8:  DATA 68,20
01CAA:  DATA 45,72
01CAC:  DATA 61,73
01CAE:  DATA 65,20
01CB0:  DATA 36,34
01CB2:  DATA 6B,42
01CB4:  DATA 79,74
01CB6:  DATA 65,20
01CB8:  DATA 53,75
01CBA:  DATA 62,73
01CBC:  DATA 65,63
01CBE:  DATA 74,6F
01CC0:  DATA 72,0D
01CC2:  DATA 0A,00
01CC4:  DATA 53,74
01CC6:  DATA 61,72
01CC8:  DATA 74,20
01CCA:  DATA 46,6C
01CCC:  DATA 61,73
01CCE:  DATA 68,20
01CD0:  DATA 57,72
01CD2:  DATA 69,74
01CD4:  DATA 65,20
01CD6:  DATA 44,65
01CD8:  DATA 6D,6F
01CDA:  DATA 0D,0A
01CDC:  DATA 00,00
01CDE:  DATA 09,4D
01CE0:  DATA 4F,44
01CE2:  DATA 45,20
01CE4:  DATA 20,20
01CE6:  DATA 20,20
01CE8:  DATA 3A,20
01CEA:  DATA 25,30
01CEC:  DATA 32,58
01CEE:  DATA 0D,0A
01CF0:  DATA 00,00
01CF2:  DATA 09,41
01CF4:  DATA 64,64
01CF6:  DATA 72,65
01CF8:  DATA 73,73
01CFA:  DATA 20,20
01CFC:  DATA 3A,20
01CFE:  DATA 30,78
01D00:  DATA 25,30
01D02:  DATA 38,4C
01D04:  DATA 58,0D
01D06:  DATA 0A,00
01D08:  DATA 09,50
01D0A:  DATA 61,63
01D0C:  DATA 6B,65
01D0E:  DATA 74,4E
01D10:  DATA 75,6D
01D12:  DATA 3A,20
01D14:  DATA 30,78
01D16:  DATA 25,30
01D18:  DATA 34,4C
01D1A:  DATA 58,0D
01D1C:  DATA 0A,00
01D1E:  DATA 57,72
01D20:  DATA 69,74
01D22:  DATA 65,20
01D24:  DATA 44,61
01D26:  DATA 74,61
01D28:  DATA 0D,0A
01D2A:  DATA 00,00
01D2C:  DATA 0D,0A
01D2E:  DATA 5B,46
01D30:  DATA 4C,41
01D32:  DATA 53,48
01D34:  DATA 5D,20
01D36:  DATA 57,72
01D38:  DATA 69,74
01D3A:  DATA 65,20
01D3C:  DATA 61,64
01D3E:  DATA 64,72
01D40:  DATA 65,73
01D42:  DATA 73,20
01D44:  DATA 30,78
01D46:  DATA 25,30
01D48:  DATA 38,4C
01D4A:  DATA 58,20
01D4C:  DATA 65,78
01D4E:  DATA 63,65
01D50:  DATA 65,64
01D52:  DATA 73,20
01D54:  DATA 64,65
01D56:  DATA 76,69
01D58:  DATA 63,65
01D5A:  DATA 20,65
01D5C:  DATA 6E,64
01D5E:  DATA 20,30
01D60:  DATA 78,25
01D62:  DATA 30,38
01D64:  DATA 4C,58
01D66:  DATA 20,2D
01D68:  DATA 3E,20
01D6A:  DATA 61,62
01D6C:  DATA 6F,72
01D6E:  DATA 74,0D
01D70:  DATA 0A,00
01D72:  DATA 0D,0A
01D74:  DATA 5B,46
01D76:  DATA 4C,41
01D78:  DATA 53,48
01D7A:  DATA 5D,20
01D7C:  DATA 52,65
01D7E:  DATA 61,63
01D80:  DATA 68,65
01D82:  DATA 64,20
01D84:  DATA 65,6E
01D86:  DATA 64,2E
01D88:  DATA 20,50
01D8A:  DATA 61,72
01D8C:  DATA 74,69
01D8E:  DATA 61,6C
01D90:  DATA 20,77
01D92:  DATA 72,69
01D94:  DATA 74,65
01D96:  DATA 20,25
01D98:  DATA 6C,75
01D9A:  DATA 20,62
01D9C:  DATA 79,74
01D9E:  DATA 65,73
01DA0:  DATA 20,28
01DA2:  DATA 70,61
01DA4:  DATA 63,6B
01DA6:  DATA 65,74
01DA8:  DATA 20,74
01DAA:  DATA 72,75
01DAC:  DATA 6E,63
01DAE:  DATA 61,74
01DB0:  DATA 65,64
01DB2:  DATA 29,2E
01DB4:  DATA 0D,0A
01DB6:  DATA 00,00
01DB8:  DATA 45,6E
01DBA:  DATA 64,20
01DBC:  DATA 46,6C
01DBE:  DATA 61,73
01DC0:  DATA 68,20
01DC2:  DATA 57,72
01DC4:  DATA 69,74
01DC6:  DATA 65,20
01DC8:  DATA 44,65
01DCA:  DATA 6D,6F
01DCC:  DATA 0D,0A
01DCE:  DATA 00,00
01DD0:  DATA 53,74
01DD2:  DATA 61,72
01DD4:  DATA 74,20
01DD6:  DATA 46,6C
01DD8:  DATA 61,73
01DDA:  DATA 68,20
01DDC:  DATA 57,72
01DDE:  DATA 69,74
01DE0:  DATA 65,20
01DE2:  DATA 34,6B
01DE4:  DATA 42,79
01DE6:  DATA 74,65
01DE8:  DATA 20,53
01DEA:  DATA 75,62
01DEC:  DATA 73,65
01DEE:  DATA 63,74
01DF0:  DATA 6F,72
01DF2:  DATA 0D,0A
01DF4:  DATA 00,00
01DF6:  DATA 45,6E
01DF8:  DATA 64,20
01DFA:  DATA 46,6C
01DFC:  DATA 61,73
01DFE:  DATA 68,20
01E00:  DATA 57,72
01E02:  DATA 69,74
01E04:  DATA 65,20
01E06:  DATA 34,6B
01E08:  DATA 42,79
01E0A:  DATA 74,65
01E0C:  DATA 20,53
01E0E:  DATA 75,62
01E10:  DATA 73,65
01E12:  DATA 63,74
01E14:  DATA 6F,72
01E16:  DATA 0D,0A
01E18:  DATA 00,00
01E1A:  DATA 53,74
01E1C:  DATA 61,72
01E1E:  DATA 74,20
01E20:  DATA 46,6C
01E22:  DATA 61,73
01E24:  DATA 68,20
01E26:  DATA 52,65
01E28:  DATA 61,64
01E2A:  DATA 0D,0A
01E2C:  DATA 00,00
01E2E:  DATA 09,4D
01E30:  DATA 4F,44
01E32:  DATA 45,20
01E34:  DATA 20,20
01E36:  DATA 20,20
01E38:  DATA 3A,20
01E3A:  DATA 25,30
01E3C:  DATA 32,58
01E3E:  DATA 0D,0A
01E40:  DATA 00,00
01E42:  DATA 09,41
01E44:  DATA 64,64
01E46:  DATA 72,65
01E48:  DATA 73,73
01E4A:  DATA 20,20
01E4C:  DATA 3A,20
01E4E:  DATA 30,78
01E50:  DATA 25,30
01E52:  DATA 38,4C
01E54:  DATA 58,0D
01E56:  DATA 0A,00
01E58:  DATA 09,50
01E5A:  DATA 61,63
01E5C:  DATA 6B,65
01E5E:  DATA 74,4E
01E60:  DATA 75,6D
01E62:  DATA 3A,20
01E64:  DATA 30,78
01E66:  DATA 25,30
01E68:  DATA 34,4C
01E6A:  DATA 58,0D
01E6C:  DATA 0A,00
01E6E:  DATA 41,44
01E70:  DATA 44,52
01E72:  DATA 45,53
01E74:  DATA 53,20
01E76:  DATA 20,3A
01E78:  DATA 0D,0A
01E7A:  DATA 00,00
01E7C:  DATA 4D,69
01E7E:  DATA 73,73
01E80:  DATA 69,6F
01E82:  DATA 6E,20
01E84:  DATA 46,6C
01E86:  DATA 61,73
01E88:  DATA 68,20
01E8A:  DATA 69,73
01E8C:  DATA 20,6E
01E8E:  DATA 6F,74
01E90:  DATA 20,63
01E92:  DATA 6F,6E
01E94:  DATA 6E,65
01E96:  DATA 63,74
01E98:  DATA 65,64
01E9A:  DATA 0D,0A
01E9C:  DATA 00,00
01E9E:  DATA 5B,46
01EA0:  DATA 4C,41
01EA2:  DATA 53,48
01EA4:  DATA 5D,20
01EA6:  DATA 52,65
01EA8:  DATA 61,64
01EAA:  DATA 20,61
01EAC:  DATA 64,64
01EAE:  DATA 72,65
01EB0:  DATA 73,73
01EB2:  DATA 20,30
01EB4:  DATA 78,25
01EB6:  DATA 30,38
01EB8:  DATA 4C,58
01EBA:  DATA 20,65
01EBC:  DATA 78,63
01EBE:  DATA 65,65
01EC0:  DATA 64,73
01EC2:  DATA 20,64
01EC4:  DATA 65,76
01EC6:  DATA 69,63
01EC8:  DATA 65,20
01ECA:  DATA 65,6E
01ECC:  DATA 64,20
01ECE:  DATA 30,78
01ED0:  DATA 25,30
01ED2:  DATA 38,4C
01ED4:  DATA 58,20
01ED6:  DATA 2D,3E
01ED8:  DATA 20,73
01EDA:  DATA 74,6F
01EDC:  DATA 70,0D
01EDE:  DATA 0A,00
01EE0:  DATA 5B,46
01EE2:  DATA 4C,41
01EE4:  DATA 53,48
01EE6:  DATA 5D,20
01EE8:  DATA 45,6E
01EEA:  DATA 64,20
01EEC:  DATA 72,65
01EEE:  DATA 61,63
01EF0:  DATA 68,65
01EF2:  DATA 64,2E
01EF4:  DATA 20,50
01EF6:  DATA 61,72
01EF8:  DATA 74,69
01EFA:  DATA 61,6C
01EFC:  DATA 20,72
01EFE:  DATA 65,61
01F00:  DATA 64,20
01F02:  DATA 25,6C
01F04:  DATA 75,20
01F06:  DATA 62,79
01F08:  DATA 74,65
01F0A:  DATA 73,2E
01F0C:  DATA 0D,0A
01F0E:  DATA 00,00
01F10:  DATA 25,30
01F12:  DATA 38,4C
01F14:  DATA 58,20
01F16:  DATA 3A,20
01F18:  DATA 00,00
01F1A:  DATA 45,6E
01F1C:  DATA 64,20
01F1E:  DATA 46,6C
01F20:  DATA 61,73
01F22:  DATA 68,20
01F24:  DATA 52,65
01F26:  DATA 61,64
01F28:  DATA 0D,0A
01F2A:  DATA 00,00
01F2C:  DATA 53,74
01F2E:  DATA 61,72
01F30:  DATA 74,20
01F32:  DATA 46,6C
01F34:  DATA 61,73
01F36:  DATA 68,20
01F38:  DATA 52,65
01F3A:  DATA 61,64
01F3C:  DATA 20,41
01F3E:  DATA 64,64
01F40:  DATA 72,65
01F42:  DATA 73,73
01F44:  DATA 0D,0A
01F46:  DATA 00,00
01F48:  DATA 52,65
01F4A:  DATA 61,64
01F4C:  DATA 20,44
01F4E:  DATA 61,74
01F50:  DATA 61,3A
01F52:  DATA 20,25
01F54:  DATA 30,32
01F56:  DATA 58,20
01F58:  DATA 25,30
01F5A:  DATA 32,58
01F5C:  DATA 20,25
01F5E:  DATA 30,32
01F60:  DATA 58,20
01F62:  DATA 25,30
01F64:  DATA 32,58
01F66:  DATA 0D,0A
01F68:  DATA 00,00
01F6A:  DATA 45,6E
01F6C:  DATA 64,20
01F6E:  DATA 46,6C
01F70:  DATA 61,73
01F72:  DATA 68,20
01F74:  DATA 52,65
01F76:  DATA 61,64
01F78:  DATA 20,41
01F7A:  DATA 64,64
01F7C:  DATA 72,65
01F7E:  DATA 73,73
01F80:  DATA 0D,0A
01F82:  DATA 00,00
01F84:  DATA 53,74
01F86:  DATA 61,72
01F88:  DATA 74,20
01F8A:  DATA 46,6C
01F8C:  DATA 61,73
01F8E:  DATA 68,20
01F90:  DATA 45,72
01F92:  DATA 61,73
01F94:  DATA 65,20
01F96:  DATA 61,6E
01F98:  DATA 64,20
01F9A:  DATA 52,65
01F9C:  DATA 73,65
01F9E:  DATA 74,0D
01FA0:  DATA 0A,00
01FA2:  DATA 45,6E
01FA4:  DATA 64,20
01FA6:  DATA 46,6C
01FA8:  DATA 61,73
01FAA:  DATA 68,20
01FAC:  DATA 45,72
01FAE:  DATA 61,73
01FB0:  DATA 65,20
01FB2:  DATA 61,6E
01FB4:  DATA 64,20
01FB6:  DATA 52,65
01FB8:  DATA 73,65
01FBA:  DATA 74,0D
01FBC:  DATA 0A,00
01FBE:  DATA 53,74
01FC0:  DATA 61,72
01FC2:  DATA 74,20
01FC4:  DATA 46,6C
01FC6:  DATA 61,73
01FC8:  DATA 68,20
01FCA:  DATA 53,4D
01FCC:  DATA 46,20
01FCE:  DATA 43,6F
01FD0:  DATA 70,79
01FD2:  DATA 0D,0A
01FD4:  DATA 00,00
01FD6:  DATA 45,6E
01FD8:  DATA 64,20
01FDA:  DATA 46,6C
01FDC:  DATA 61,73
01FDE:  DATA 68,20
01FE0:  DATA 53,4D
01FE2:  DATA 46,20
01FE4:  DATA 43,6F
01FE6:  DATA 70,79
01FE8:  DATA 0D,0A
01FEA:  DATA 00,00
01FEC:  DATA 53,74
01FEE:  DATA 61,72
01FF0:  DATA 74,20
01FF2:  DATA 46,6C
01FF4:  DATA 61,73
01FF6:  DATA 68,20
01FF8:  DATA 53,4D
01FFA:  DATA 46,20
01FFC:  DATA 52,65
01FFE:  DATA 61,64
02000:  DATA 0D,0A
02002:  DATA 00,00
02004:  DATA 09,41
02006:  DATA 64,64
02008:  DATA 72,65
0200A:  DATA 73,73
0200C:  DATA 20,20
0200E:  DATA 3A,20
02010:  DATA 30,78
02012:  DATA 25,30
02014:  DATA 38,4C
02016:  DATA 58,0D
02018:  DATA 0A,00
0201A:  DATA 09,50
0201C:  DATA 61,63
0201E:  DATA 6B,65
02020:  DATA 74,4E
02022:  DATA 75,6D
02024:  DATA 3A,20
02026:  DATA 30,78
02028:  DATA 25,30
0202A:  DATA 34,4C
0202C:  DATA 58,0D
0202E:  DATA 0A,00
02030:  DATA 52,65
02032:  DATA 61,64
02034:  DATA 20,44
02036:  DATA 61,74
02038:  DATA 61,0D
0203A:  DATA 0A,00
0203C:  DATA 0D,0A
0203E:  DATA 45,6E
02040:  DATA 64,20
02042:  DATA 46,6C
02044:  DATA 61,73
02046:  DATA 68,20
02048:  DATA 53,4D
0204A:  DATA 46,20
0204C:  DATA 52,65
0204E:  DATA 61,64
02050:  DATA 0D,0A
02052:  DATA 00,00
02054:  DATA 53,74
02056:  DATA 61,72
02058:  DATA 74,20
0205A:  DATA 46,6C
0205C:  DATA 61,73
0205E:  DATA 68,20
02060:  DATA 53,4D
02062:  DATA 46,20
02064:  DATA 45,72
02066:  DATA 61,73
02068:  DATA 65,0D
0206A:  DATA 0A,00
0206C:  DATA 45,6E
0206E:  DATA 64,20
02070:  DATA 46,6C
02072:  DATA 61,73
02074:  DATA 68,20
02076:  DATA 53,4D
02078:  DATA 46,20
0207A:  DATA 45,72
0207C:  DATA 61,73
0207E:  DATA 65,0D
02080:  DATA 0A,00
02082:  DATA 53,74
02084:  DATA 61,72
02086:  DATA 74,20
02088:  DATA 46,6C
0208A:  DATA 61,73
0208C:  DATA 68,20
0208E:  DATA 41,64
02090:  DATA 64,72
02092:  DATA 65,73
02094:  DATA 73,20
02096:  DATA 52,65
02098:  DATA 73,65
0209A:  DATA 74,0D
0209C:  DATA 0A,00
0209E:  DATA 45,6E
020A0:  DATA 64,20
020A2:  DATA 46,6C
020A4:  DATA 61,73
020A6:  DATA 68,20
020A8:  DATA 41,64
020AA:  DATA 64,72
020AC:  DATA 65,73
020AE:  DATA 73,20
020B0:  DATA 52,65
020B2:  DATA 73,65
020B4:  DATA 74,0D
020B6:  DATA 0A,00
020B8:  DATA 53,4D
020BA:  DATA 46,20
020BC:  DATA 69,73
020BE:  DATA 20,6E
020C0:  DATA 6F,74
020C2:  DATA 20,63
020C4:  DATA 6F,6E
020C6:  DATA 6E,65
020C8:  DATA 63,74
020CA:  DATA 65,64
020CC:  DATA 0D,0A
020CE:  DATA 00,00
020D0:  DATA 53,74
020D2:  DATA 61,72
020D4:  DATA 74,20
020D6:  DATA 46,6C
020D8:  DATA 61,73
020DA:  DATA 68,20
020DC:  DATA 53,4D
020DE:  DATA 46,20
020E0:  DATA 52,65
020E2:  DATA 61,64
020E4:  DATA 20,46
020E6:  DATA 6F,72
020E8:  DATA 63,65
020EA:  DATA 0D,0A
020EC:  DATA 00,00
020EE:  DATA 09,41
020F0:  DATA 64,64
020F2:  DATA 72,65
020F4:  DATA 73,73
020F6:  DATA 20,20
020F8:  DATA 3A,20
020FA:  DATA 30,78
020FC:  DATA 25,30
020FE:  DATA 38,4C
02100:  DATA 58,0D
02102:  DATA 0A,00
02104:  DATA 09,50
02106:  DATA 61,63
02108:  DATA 6B,65
0210A:  DATA 74,4E
0210C:  DATA 75,6D
0210E:  DATA 3A,20
02110:  DATA 30,78
02112:  DATA 25,30
02114:  DATA 34,4C
02116:  DATA 58,0D
02118:  DATA 0A,00
0211A:  DATA 72,65
0211C:  DATA 61,64
0211E:  DATA 20,64
02120:  DATA 61,74
02122:  DATA 61,0D
02124:  DATA 0A,00
02126:  DATA 0D,0A
02128:  DATA 45,6E
0212A:  DATA 64,20
0212C:  DATA 46,6C
0212E:  DATA 61,73
02130:  DATA 68,20
02132:  DATA 53,4D
02134:  DATA 46,20
02136:  DATA 52,65
02138:  DATA 61,64
0213A:  DATA 20,46
0213C:  DATA 6F,72
0213E:  DATA 63,65
02140:  DATA 0D,0A
02142:  DATA 00,00
02144:  DATA 53,74
02146:  DATA 61,72
02148:  DATA 74,20
0214A:  DATA 53,4D
0214C:  DATA 46,20
0214E:  DATA 45,72
02150:  DATA 61,73
02152:  DATA 65,20
02154:  DATA 41,6C
02156:  DATA 6C,0D
02158:  DATA 0A,00
0215A:  DATA 45,6E
0215C:  DATA 64,20
0215E:  DATA 53,4D
02160:  DATA 46,20
02162:  DATA 45,72
02164:  DATA 61,73
02166:  DATA 65,20
02168:  DATA 41,6C
0216A:  DATA 6C,0D
0216C:  DATA 0A,00
0216E:  DATA 53,74
02170:  DATA 61,72
02172:  DATA 74,20
02174:  DATA 53,4D
02176:  DATA 46,20
02178:  DATA 52,65
0217A:  DATA 73,65
0217C:  DATA 74,0D
0217E:  DATA 0A,00
02180:  DATA 45,6E
02182:  DATA 64,20
02184:  DATA 53,4D
02186:  DATA 46,20
02188:  DATA 52,65
0218A:  DATA 73,65
0218C:  DATA 74,0D
0218E:  DATA 0A,00
02190:  DATA 0D,0A
02192:  DATA 0D,0A
02194:  DATA 0D,0A
02196:  DATA 3D,3D
02198:  DATA 3D,3D
0219A:  DATA 3D,3D
0219C:  DATA 3D,3D
0219E:  DATA 3D,3D
021A0:  DATA 3D,3D
021A2:  DATA 3D,3D
021A4:  DATA 3D,3D
021A6:  DATA 3D,3D
021A8:  DATA 3D,3D
021AA:  DATA 3D,3D
021AC:  DATA 3D,3D
021AE:  DATA 3D,3D
021B0:  DATA 3D,3D
021B2:  DATA 3D,3D
021B4:  DATA 3D,3D
021B6:  DATA 3D,3D
021B8:  DATA 3D,3D
021BA:  DATA 3D,3D
021BC:  DATA 3D,3D
021BE:  DATA 3D,3D
021C0:  DATA 3D,3D
021C2:  DATA 3D,3D
021C4:  DATA 3D,3D
021C6:  DATA 3D,3D
021C8:  DATA 3D,3D
021CA:  DATA 3D,3D
021CC:  DATA 3D,3D
021CE:  DATA 3D,3D
021D0:  DATA 3D,3D
021D2:  DATA 0D,0A
021D4:  DATA 00,00
021D6:  DATA 54,68
021D8:  DATA 69,73
021DA:  DATA 20,69
021DC:  DATA 73,20
021DE:  DATA 4D,4F
021E0:  DATA 4D,49
021E2:  DATA 4A,49
021E4:  DATA 20,43
021E6:  DATA 49,47
021E8:  DATA 53,20
021EA:  DATA 50,49
021EC:  DATA 43,20
021EE:  DATA 42,42
021F0:  DATA 4D,20
021F2:  DATA 66,6F
021F4:  DATA 72,20
021F6:  DATA 4D,49
021F8:  DATA 53,37
021FA:  DATA 5F,42
021FC:  DATA 42,4D
021FE:  DATA 36,2E
02200:  DATA 0D,0A
02202:  DATA 00,00
02204:  DATA 4C,61
02206:  DATA 73,74
02208:  DATA 20,75
0220A:  DATA 70,64
0220C:  DATA 61,74
0220E:  DATA 65,64
02210:  DATA 20,6F
02212:  DATA 6E,20
02214:  DATA 25,73
02216:  DATA 20,25
02218:  DATA 73,2C
0221A:  DATA 20,62
0221C:  DATA 79,20
0221E:  DATA 49,6E
02220:  DATA 6F,75
02222:  DATA 65,2E
02224:  DATA 0D,0A
02226:  DATA 0D,0A
02228:  DATA 00,00
0222A:  DATA 32,39
0222C:  DATA 2D,4F
0222E:  DATA 63,74
02230:  DATA 2D,32
02232:  DATA 35,00
02234:  DATA 31,35
02236:  DATA 3A,35
02238:  DATA 36,3A
0223A:  DATA 31,38
0223C:  DATA 00,00
0223E:  DATA 5F,5F
02240:  DATA 5F,5F
02242:  DATA 43,49
02244:  DATA 47,53
02246:  DATA 20,50
02248:  DATA 49,43
0224A:  DATA 20,53
0224C:  DATA 74,61
0224E:  DATA 72,74
02250:  DATA 20,4F
02252:  DATA 70,65
02254:  DATA 72,61
02256:  DATA 74,69
02258:  DATA 6F,6E
0225A:  DATA 5F,5F
0225C:  DATA 5F,5F
0225E:  DATA 5F,0D
02260:  DATA 0A,0D
02262:  DATA 0A,00
02264:  DATA 77,61
02266:  DATA 69,74
02268:  DATA 69,6E
0226A:  DATA 67,20
0226C:  DATA 66,6F
0226E:  DATA 72,20
02270:  DATA 42,4F
02272:  DATA 53,53
02274:  DATA 20,50
02276:  DATA 49,43
02278:  DATA 20,63
0227A:  DATA 6F,6D
0227C:  DATA 6D,61
0227E:  DATA 6E,64
02280:  DATA 00,00
02282:  DATA 0D,0A
02284:  DATA 0D,0A
02286:  DATA 3D,3D
02288:  DATA 3D,3D
0228A:  DATA 3D,3D
0228C:  DATA 0D,0A
0228E:  DATA 0D,0A
02290:  DATA 46,69
02292:  DATA 6E,69
02294:  DATA 73,68
02296:  DATA 65,64
02298:  DATA 20,70
0229A:  DATA 72,6F
0229C:  DATA 63,65
0229E:  DATA 73,73
022A0:  DATA 2E,0D
022A2:  DATA 0A,00
022A4:  DATA 0D,0A
022A6:  DATA 77,61
022A8:  DATA 69,74
022AA:  DATA 69,6E
022AC:  DATA 67,20
022AE:  DATA 66,6F
022B0:  DATA 72,20
022B2:  DATA 42,4F
022B4:  DATA 53,53
022B6:  DATA 20,50
022B8:  DATA 49,43
022BA:  DATA 20,63
022BC:  DATA 6F,6D
022BE:  DATA 6D,61
022C0:  DATA 6E,64
022C2:  DATA 00,00
022C4:  DATA 45,6E
022C6:  DATA 64,20
022C8:  DATA 6D,61
022CA:  DATA 69,6E
022CC:  DATA 0D,0A
022CE:  DATA 00,00
*
022FE:  TBLRD*+
02300:  MOVF   FF5,F
02302:  BTFSC  FD8.2
02304:  GOTO   2332
02308:  MOVFF  FF6,9C2
0230C:  MOVFF  FF7,9C3
02310:  MOVFF  FF8,9C4
02314:  MOVF   FF5,W
02316:  BTFSS  FA6.6
02318:  GOTO   2316
0231C:  MOVLB  E
0231E:  MOVWF  xF9
02320:  MOVFF  9C2,FF6
02324:  MOVFF  9C3,FF7
02328:  MOVFF  9C4,FF8
0232C:  MOVLB  0
0232E:  GOTO   22FE
02332:  RETURN 0
02334:  TBLRD*+
02336:  MOVFF  FF6,A4F
0233A:  MOVFF  FF7,A50
0233E:  MOVFF  FF8,A51
02342:  MOVF   FF5,W
02344:  BTFSS  FA6.6
02346:  GOTO   2344
0234A:  MOVLB  E
0234C:  MOVWF  xF9
0234E:  MOVFF  A4F,FF6
02352:  MOVFF  A50,FF7
02356:  MOVFF  A51,FF8
0235A:  MOVLB  A
0235C:  DECFSZ x4E,F
0235E:  BRA    2364
02360:  BRA    236A
02362:  MOVLB  0
02364:  MOVLB  0
02366:  GOTO   2334
0236A:  MOVLB  0
0236C:  RETURN 0
0236E:  TSTFSZ 01
02370:  GOTO   237E
02374:  TSTFSZ 02
02376:  GOTO   2380
0237A:  GOTO   2390
0237E:  INCF   02,F
02380:  MOVFF  00,FEE
02384:  DECFSZ 01,F
02386:  GOTO   2380
0238A:  DECFSZ 02,F
0238C:  GOTO   2380
02390:  RETURN 0
*
02564:  MOVLB  9
02566:  BTFSS  xE9.7
02568:  BRA    2570
0256A:  MOVLB  0
0256C:  GOTO   25A6
02570:  MOVLW  0F
02572:  MOVWF  00
02574:  SWAPF  xE8,W
02576:  ANDWF  00,F
02578:  MOVLW  0A
0257A:  SUBWF  00,W
0257C:  BTFSS  FD8.0
0257E:  BRA    2586
02580:  MOVLB  0
02582:  GOTO   2590
02586:  MOVLW  30
02588:  ADDWF  00,F
0258A:  MOVLB  0
0258C:  GOTO   2598
02590:  MOVLB  9
02592:  MOVF   xE9,W
02594:  ADDWF  00,F
02596:  MOVLB  0
02598:  MOVF   00,W
0259A:  BTFSS  FA6.6
0259C:  GOTO   259A
025A0:  MOVLB  E
025A2:  MOVWF  xF9
025A4:  MOVLB  0
025A6:  MOVLW  0F
025A8:  MOVLB  9
025AA:  ANDWF  xE8,F
025AC:  MOVLW  0A
025AE:  SUBWF  xE8,W
025B0:  BTFSS  FD8.0
025B2:  BRA    25BA
025B4:  MOVLB  0
025B6:  GOTO   25C2
025BA:  MOVLW  30
025BC:  MOVLB  0
025BE:  GOTO   25CA
025C2:  MOVLB  9
025C4:  BCF    xE9.7
025C6:  MOVF   xE9,W
025C8:  MOVLB  0
025CA:  MOVLB  9
025CC:  ADDWF  xE8,F
025CE:  MOVF   xE8,W
025D0:  MOVLB  0
025D2:  BTFSS  FA6.6
025D4:  GOTO   25D2
025D8:  MOVLB  E
025DA:  MOVWF  xF9
025DC:  MOVLB  0
025DE:  RETURN 0
*
02ADC:  MOVLB  B
02ADE:  MOVF   x09,W
02AE0:  ANDLW  07
02AE2:  MOVWF  00
02AE4:  RRCF   x09,W
02AE6:  MOVWF  01
02AE8:  RRCF   01,F
02AEA:  RRCF   01,F
02AEC:  MOVLW  1F
02AEE:  ANDWF  01,F
02AF0:  MOVF   01,W
02AF2:  ADDWF  x0B,W
02AF4:  MOVWF  FE9
02AF6:  MOVLW  00
02AF8:  ADDWFC x0C,W
02AFA:  MOVWF  FEA
02AFC:  CLRF   01
02AFE:  INCF   01,F
02B00:  INCF   00,F
02B02:  MOVLB  0
02B04:  GOTO   2B0A
02B08:  RLCF   01,F
02B0A:  DECFSZ 00,F
02B0C:  GOTO   2B08
02B10:  MOVLB  B
02B12:  MOVF   x0A,F
02B14:  BTFSS  FD8.2
02B16:  BRA    2B1E
02B18:  MOVLB  0
02B1A:  GOTO   2B28
02B1E:  MOVF   01,W
02B20:  IORWF  FEF,F
02B22:  MOVLB  0
02B24:  GOTO   2B2E
02B28:  COMF   01,F
02B2A:  MOVF   01,W
02B2C:  ANDWF  FEF,F
02B2E:  RETURN 0
*
06218:  BTFSC  FD8.1
0621A:  GOTO   6226
0621E:  MOVLW  02
06220:  MOVWF  FEA
06222:  MOVLW  1A
06224:  MOVWF  FE9
06226:  CLRF   00
06228:  CLRF   01
0622A:  CLRF   02
0622C:  CLRF   03
0622E:  MOVLB  2
06230:  CLRF   x1A
06232:  CLRF   x1B
06234:  CLRF   x1C
06236:  CLRF   x1D
06238:  MOVF   x19,W
0623A:  IORWF  x18,W
0623C:  IORWF  x17,W
0623E:  IORWF  x16,W
06240:  BTFSS  FD8.2
06242:  BRA    624A
06244:  MOVLB  0
06246:  GOTO   62DA
0624A:  MOVLB  0
0624C:  MOVLW  20
0624E:  MOVLB  2
06250:  MOVWF  x1E
06252:  MOVLB  0
06254:  BCF    FD8.0
06256:  MOVLB  2
06258:  RLCF   x12,F
0625A:  RLCF   x13,F
0625C:  RLCF   x14,F
0625E:  RLCF   x15,F
06260:  RLCF   x1A,F
06262:  RLCF   x1B,F
06264:  RLCF   x1C,F
06266:  RLCF   x1D,F
06268:  MOVF   x19,W
0626A:  SUBWF  x1D,W
0626C:  BTFSC  FD8.2
0626E:  BRA    6276
06270:  MOVLB  0
06272:  GOTO   6298
06276:  MOVF   x18,W
06278:  SUBWF  x1C,W
0627A:  BTFSC  FD8.2
0627C:  BRA    6284
0627E:  MOVLB  0
06280:  GOTO   6298
06284:  MOVF   x17,W
06286:  SUBWF  x1B,W
06288:  BTFSC  FD8.2
0628A:  BRA    6292
0628C:  MOVLB  0
0628E:  GOTO   6298
06292:  MOVF   x16,W
06294:  SUBWF  x1A,W
06296:  MOVLB  0
06298:  BTFSS  FD8.0
0629A:  GOTO   62C0
0629E:  MOVLB  2
062A0:  MOVF   x16,W
062A2:  SUBWF  x1A,F
062A4:  MOVF   x17,W
062A6:  BTFSS  FD8.0
062A8:  INCFSZ x17,W
062AA:  SUBWF  x1B,F
062AC:  MOVF   x18,W
062AE:  BTFSS  FD8.0
062B0:  INCFSZ x18,W
062B2:  SUBWF  x1C,F
062B4:  MOVF   x19,W
062B6:  BTFSS  FD8.0
062B8:  INCFSZ x19,W
062BA:  SUBWF  x1D,F
062BC:  BSF    FD8.0
062BE:  MOVLB  0
062C0:  RLCF   00,F
062C2:  RLCF   01,F
062C4:  RLCF   02,F
062C6:  RLCF   03,F
062C8:  MOVLB  2
062CA:  DECFSZ x1E,F
062CC:  BRA    62D2
062CE:  BRA    62D8
062D0:  MOVLB  0
062D2:  MOVLB  0
062D4:  GOTO   6254
062D8:  MOVLB  0
062DA:  MOVFF  21A,FEF
062DE:  MOVFF  21B,FEC
062E2:  MOVFF  21C,FEC
062E6:  MOVFF  21D,FEC
062EA:  MOVF   FED,F
062EC:  MOVF   FED,F
062EE:  MOVF   FED,F
062F0:  RETURN 0
062F2:  MOVF   FE9,W
062F4:  MOVLB  2
062F6:  MOVWF  x0A
062F8:  MOVLW  3B
062FA:  MOVWF  x11
062FC:  MOVLW  9A
062FE:  MOVWF  x10
06300:  MOVLW  CA
06302:  MOVWF  x0F
06304:  CLRF   x0E
06306:  MOVLW  0A
06308:  MOVWF  x0C
0630A:  MOVLB  0
0630C:  BSF    FD8.1
0630E:  MOVLW  02
06310:  MOVWF  FEA
06312:  MOVLW  06
06314:  MOVWF  FE9
06316:  MOVFF  209,215
0631A:  MOVFF  208,214
0631E:  MOVFF  207,213
06322:  MOVFF  206,212
06326:  MOVFF  211,219
0632A:  MOVFF  210,218
0632E:  MOVFF  20F,217
06332:  MOVFF  20E,216
06336:  CALL   6218
0633A:  MOVF   01,W
0633C:  MOVF   00,F
0633E:  BTFSS  FD8.2
06340:  GOTO   6398
06344:  MOVLB  2
06346:  MOVF   x0C,W
06348:  XORLW  01
0634A:  BTFSS  FD8.2
0634C:  BRA    6354
0634E:  MOVLB  0
06350:  GOTO   6398
06354:  MOVF   x0A,W
06356:  BTFSS  FD8.2
06358:  BRA    6360
0635A:  MOVLB  0
0635C:  GOTO   639E
06360:  ANDLW  0F
06362:  SUBWF  x0C,W
06364:  BTFSS  FD8.2
06366:  BRA    636E
06368:  MOVLB  0
0636A:  GOTO   637A
0636E:  BTFSS  FD8.0
06370:  BRA    6378
06372:  MOVLB  0
06374:  GOTO   63B0
06378:  MOVLB  0
0637A:  MOVLB  2
0637C:  BTFSS  x0A.7
0637E:  BRA    6386
06380:  MOVLB  0
06382:  GOTO   63B0
06386:  BTFSS  x0A.6
06388:  BRA    6390
0638A:  MOVLB  0
0638C:  GOTO   639E
06390:  MOVLW  20
06392:  MOVLB  0
06394:  GOTO   63A0
06398:  MOVLB  2
0639A:  CLRF   x0A
0639C:  MOVLB  0
0639E:  MOVLW  30
063A0:  ADDWF  00,F
063A2:  MOVF   00,W
063A4:  BTFSS  FA6.6
063A6:  GOTO   63A4
063AA:  MOVLB  E
063AC:  MOVWF  xF9
063AE:  MOVLB  0
063B0:  BCF    FD8.1
063B2:  MOVFF  211,215
063B6:  MOVFF  210,214
063BA:  MOVFF  20F,213
063BE:  MOVFF  20E,212
063C2:  MOVLB  2
063C4:  CLRF   x19
063C6:  CLRF   x18
063C8:  CLRF   x17
063CA:  MOVLW  0A
063CC:  MOVWF  x16
063CE:  MOVLB  0
063D0:  CALL   6218
063D4:  MOVFF  03,211
063D8:  MOVFF  02,210
063DC:  MOVFF  01,20F
063E0:  MOVFF  00,20E
063E4:  MOVLB  2
063E6:  DECFSZ x0C,F
063E8:  BRA    63EE
063EA:  BRA    63F4
063EC:  MOVLB  0
063EE:  MOVLB  0
063F0:  GOTO   630C
063F4:  MOVLB  0
063F6:  RETURN 0
*
08260:  MOVLB  A
08262:  MOVF   x52,W
08264:  MULWF  x54
08266:  MOVFF  FF3,01
0826A:  MOVFF  FF4,00
0826E:  MULWF  x55
08270:  MOVF   FF3,W
08272:  ADDWF  00,F
08274:  MOVF   x53,W
08276:  MULWF  x54
08278:  MOVF   FF3,W
0827A:  ADDWFC 00,W
0827C:  MOVWF  02
0827E:  MOVLB  0
08280:  RETURN 0
*
0838A:  MOVLW  8E
0838C:  MOVWF  00
0838E:  MOVFF  1F4,01
08392:  MOVFF  1F3,02
08396:  CLRF   03
08398:  MOVF   01,F
0839A:  BTFSS  FD8.2
0839C:  GOTO   83B8
083A0:  MOVFF  02,01
083A4:  CLRF   02
083A6:  MOVLW  08
083A8:  SUBWF  00,F
083AA:  MOVF   01,F
083AC:  BTFSS  FD8.2
083AE:  GOTO   83B8
083B2:  CLRF   00
083B4:  GOTO   83CC
083B8:  BCF    FD8.0
083BA:  BTFSC  01.7
083BC:  GOTO   83CA
083C0:  RLCF   02,F
083C2:  RLCF   01,F
083C4:  DECF   00,F
083C6:  GOTO   83B8
083CA:  BCF    01.7
083CC:  GOTO   8D7C (RETURN)
083D0:  MOVLB  1
083D2:  MOVF   xF7,W
083D4:  BTFSS  FD8.2
083D6:  BRA    83DE
083D8:  MOVLB  0
083DA:  GOTO   8522
083DE:  MOVWF  00
083E0:  MOVF   xFB,W
083E2:  BTFSS  FD8.2
083E4:  BRA    83EC
083E6:  MOVLB  0
083E8:  GOTO   8522
083EC:  ADDWF  00,F
083EE:  BTFSC  FD8.0
083F0:  BRA    83F8
083F2:  MOVLB  0
083F4:  GOTO   8408
083F8:  MOVLB  0
083FA:  MOVLW  81
083FC:  ADDWF  00,F
083FE:  BTFSC  FD8.0
08400:  GOTO   8522
08404:  GOTO   8418
08408:  MOVLW  7F
0840A:  SUBWF  00,F
0840C:  BTFSS  FD8.0
0840E:  GOTO   8522
08412:  BTFSC  FD8.2
08414:  GOTO   8522
08418:  MOVFF  1F8,1FF
0841C:  MOVLB  1
0841E:  MOVF   xFC,W
08420:  XORWF  xFF,F
08422:  BSF    xF8.7
08424:  BSF    xFC.7
08426:  MOVF   xFA,W
08428:  MULWF  xFE
0842A:  MOVFF  FF4,201
0842E:  MOVF   xF9,W
08430:  MULWF  xFD
08432:  MOVFF  FF4,03
08436:  MOVFF  FF3,200
0843A:  MULWF  xFE
0843C:  MOVF   FF3,W
0843E:  MOVLB  2
08440:  ADDWF  x01,F
08442:  MOVF   FF4,W
08444:  ADDWFC x00,F
08446:  MOVLW  00
08448:  ADDWFC 03,F
0844A:  MOVLB  1
0844C:  MOVF   xFA,W
0844E:  MULWF  xFD
08450:  MOVF   FF3,W
08452:  MOVLB  2
08454:  ADDWF  x01,F
08456:  MOVF   FF4,W
08458:  ADDWFC x00,F
0845A:  MOVLW  00
0845C:  CLRF   02
0845E:  ADDWFC 03,F
08460:  ADDWFC 02,F
08462:  MOVLB  1
08464:  MOVF   xF8,W
08466:  MULWF  xFE
08468:  MOVF   FF3,W
0846A:  MOVLB  2
0846C:  ADDWF  x00,F
0846E:  MOVF   FF4,W
08470:  ADDWFC 03,F
08472:  MOVLW  00
08474:  ADDWFC 02,F
08476:  MOVLB  1
08478:  MOVF   xF8,W
0847A:  MULWF  xFD
0847C:  MOVF   FF3,W
0847E:  ADDWF  03,F
08480:  MOVF   FF4,W
08482:  ADDWFC 02,F
08484:  MOVLW  00
08486:  CLRF   01
08488:  ADDWFC 01,F
0848A:  MOVF   xFA,W
0848C:  MULWF  xFC
0848E:  MOVF   FF3,W
08490:  MOVLB  2
08492:  ADDWF  x00,F
08494:  MOVF   FF4,W
08496:  ADDWFC 03,F
08498:  MOVLW  00
0849A:  ADDWFC 02,F
0849C:  ADDWFC 01,F
0849E:  MOVLB  1
084A0:  MOVF   xF9,W
084A2:  MULWF  xFC
084A4:  MOVF   FF3,W
084A6:  ADDWF  03,F
084A8:  MOVF   FF4,W
084AA:  ADDWFC 02,F
084AC:  MOVLW  00
084AE:  ADDWFC 01,F
084B0:  MOVF   xF8,W
084B2:  MULWF  xFC
084B4:  MOVF   FF3,W
084B6:  ADDWF  02,F
084B8:  MOVF   FF4,W
084BA:  ADDWFC 01,F
084BC:  INCF   00,F
084BE:  BTFSS  01.7
084C0:  BRA    84C8
084C2:  MOVLB  0
084C4:  GOTO   84D6
084C8:  MOVLB  2
084CA:  RLCF   x00,F
084CC:  RLCF   03,F
084CE:  RLCF   02,F
084D0:  RLCF   01,F
084D2:  DECF   00,F
084D4:  MOVLB  0
084D6:  MOVLW  00
084D8:  MOVLB  2
084DA:  BTFSC  x00.7
084DC:  BRA    84E4
084DE:  MOVLB  0
084E0:  GOTO   8512
084E4:  INCF   03,F
084E6:  ADDWFC 02,F
084E8:  ADDWFC 01,F
084EA:  MOVF   01,W
084EC:  BTFSC  FD8.2
084EE:  BRA    84F6
084F0:  MOVLB  0
084F2:  GOTO   8512
084F6:  MOVF   02,W
084F8:  BTFSC  FD8.2
084FA:  BRA    8502
084FC:  MOVLB  0
084FE:  GOTO   8512
08502:  MOVF   03,W
08504:  BTFSC  FD8.2
08506:  BRA    850E
08508:  MOVLB  0
0850A:  GOTO   8512
0850E:  INCF   00,F
08510:  MOVLB  0
08512:  MOVLB  1
08514:  BTFSC  xFF.7
08516:  BSF    01.7
08518:  BTFSS  xFF.7
0851A:  BCF    01.7
0851C:  MOVLB  0
0851E:  GOTO   852A
08522:  CLRF   00
08524:  CLRF   01
08526:  CLRF   02
08528:  CLRF   03
0852A:  GOTO   8DB2 (RETURN)
0852E:  MOVLB  1
08530:  MOVF   xF7,W
08532:  BTFSS  FD8.2
08534:  BRA    853C
08536:  MOVLB  0
08538:  GOTO   8812
0853C:  MOVLB  2
0853E:  MOVWF  x03
08540:  MOVLB  1
08542:  MOVF   xFB,W
08544:  BTFSS  FD8.2
08546:  BRA    854E
08548:  MOVLB  0
0854A:  GOTO   8812
0854E:  MOVLB  2
08550:  SUBWF  x03,F
08552:  BTFSS  FD8.0
08554:  BRA    855C
08556:  MOVLB  0
08558:  GOTO   8562
0855C:  MOVLB  0
0855E:  GOTO   8578
08562:  MOVLW  7F
08564:  MOVLB  2
08566:  ADDWF  x03,F
08568:  BTFSS  FD8.0
0856A:  BRA    8572
0856C:  MOVLB  0
0856E:  GOTO   8812
08572:  MOVLB  0
08574:  GOTO   8594
08578:  MOVLW  81
0857A:  MOVLB  2
0857C:  SUBWF  x03,F
0857E:  BTFSC  FD8.0
08580:  BRA    8588
08582:  MOVLB  0
08584:  GOTO   8812
08588:  BTFSS  FD8.2
0858A:  BRA    8592
0858C:  MOVLB  0
0858E:  GOTO   8812
08592:  MOVLB  0
08594:  MOVFF  203,00
08598:  CLRF   01
0859A:  CLRF   02
0859C:  CLRF   03
0859E:  MOVLB  2
085A0:  CLRF   x02
085A2:  MOVFF  1F8,201
085A6:  BSF    x01.7
085A8:  MOVFF  1F9,200
085AC:  MOVFF  1FA,1FF
085B0:  MOVLW  19
085B2:  MOVWF  x03
085B4:  MOVLB  0
085B6:  MOVLB  1
085B8:  MOVF   xFE,W
085BA:  SUBWF  xFF,F
085BC:  BTFSS  FD8.0
085BE:  BRA    85C6
085C0:  MOVLB  0
085C2:  GOTO   8600
085C6:  MOVLW  01
085C8:  MOVLB  2
085CA:  SUBWF  x00,F
085CC:  BTFSS  FD8.0
085CE:  BRA    85D6
085D0:  MOVLB  0
085D2:  GOTO   8600
085D6:  SUBWF  x01,F
085D8:  BTFSS  FD8.0
085DA:  BRA    85E2
085DC:  MOVLB  0
085DE:  GOTO   8600
085E2:  SUBWF  x02,F
085E4:  BTFSS  FD8.0
085E6:  BRA    85EE
085E8:  MOVLB  0
085EA:  GOTO   8600
085EE:  INCF   x02,F
085F0:  INCF   x01,F
085F2:  INCF   x00,F
085F4:  MOVLB  1
085F6:  MOVF   xFE,W
085F8:  ADDWF  xFF,F
085FA:  MOVLB  0
085FC:  GOTO   86C6
08600:  MOVLB  1
08602:  MOVF   xFD,W
08604:  MOVLB  2
08606:  SUBWF  x00,F
08608:  BTFSS  FD8.0
0860A:  BRA    8612
0860C:  MOVLB  0
0860E:  GOTO   8670
08612:  MOVLW  01
08614:  SUBWF  x01,F
08616:  BTFSS  FD8.0
08618:  BRA    8620
0861A:  MOVLB  0
0861C:  GOTO   8670
08620:  SUBWF  x02,F
08622:  BTFSS  FD8.0
08624:  BRA    862C
08626:  MOVLB  0
08628:  GOTO   8670
0862C:  MOVLB  0
0862E:  MOVLB  2
08630:  INCF   x02,F
08632:  INCF   x01,F
08634:  MOVLB  1
08636:  MOVF   xFD,W
08638:  MOVLB  2
0863A:  ADDWF  x00,F
0863C:  MOVLB  0
0863E:  MOVLB  1
08640:  MOVF   xFE,W
08642:  ADDWF  xFF,F
08644:  BTFSC  FD8.0
08646:  BRA    864E
08648:  MOVLB  0
0864A:  GOTO   86C6
0864E:  MOVLB  2
08650:  INCF   x00,F
08652:  BTFSC  FD8.2
08654:  BRA    865C
08656:  MOVLB  0
08658:  GOTO   86C6
0865C:  INCF   x01,F
0865E:  BTFSC  FD8.2
08660:  BRA    8668
08662:  MOVLB  0
08664:  GOTO   86C6
08668:  INCF   x02,F
0866A:  MOVLB  0
0866C:  GOTO   86C6
08670:  MOVLB  1
08672:  MOVF   xFC,W
08674:  IORLW  80
08676:  MOVLB  2
08678:  SUBWF  x01,F
0867A:  BTFSS  FD8.0
0867C:  BRA    8684
0867E:  MOVLB  0
08680:  GOTO   86C4
08684:  MOVLW  01
08686:  SUBWF  x02,F
08688:  BTFSS  FD8.0
0868A:  BRA    8692
0868C:  MOVLB  0
0868E:  GOTO   86C4
08692:  INCF   x02,F
08694:  MOVLB  1
08696:  MOVF   xFC,W
08698:  IORLW  80
0869A:  MOVLB  2
0869C:  ADDWF  x01,F
0869E:  MOVLB  1
086A0:  MOVF   xFD,W
086A2:  MOVLB  2
086A4:  ADDWF  x00,F
086A6:  BTFSC  FD8.0
086A8:  BRA    86B0
086AA:  MOVLB  0
086AC:  GOTO   863E
086B0:  INCF   x01,F
086B2:  BTFSC  FD8.2
086B4:  BRA    86BC
086B6:  MOVLB  0
086B8:  GOTO   863E
086BC:  INCF   x02,F
086BE:  MOVLB  0
086C0:  GOTO   863E
086C4:  BSF    03.0
086C6:  MOVLB  2
086C8:  DECFSZ x03,F
086CA:  BRA    86D0
086CC:  BRA    86D6
086CE:  MOVLB  0
086D0:  MOVLB  0
086D2:  GOTO   86DC
086D6:  MOVLB  0
086D8:  GOTO   86FA
086DC:  BCF    FD8.0
086DE:  MOVLB  1
086E0:  RLCF   xFF,F
086E2:  MOVLB  2
086E4:  RLCF   x00,F
086E6:  RLCF   x01,F
086E8:  RLCF   x02,F
086EA:  BCF    FD8.0
086EC:  RLCF   03,F
086EE:  RLCF   02,F
086F0:  RLCF   01,F
086F2:  RLCF   x04,F
086F4:  MOVLB  0
086F6:  GOTO   85B6
086FA:  MOVLB  2
086FC:  BTFSC  x04.0
086FE:  BRA    8706
08700:  MOVLB  0
08702:  GOTO   8716
08706:  BCF    FD8.0
08708:  RRCF   01,F
0870A:  RRCF   02,F
0870C:  RRCF   03,F
0870E:  RRCF   x04,F
08710:  MOVLB  0
08712:  GOTO   871E
08716:  DECF   00,F
08718:  BTFSC  FD8.2
0871A:  GOTO   8812
0871E:  MOVLB  2
08720:  BTFSS  x04.7
08722:  BRA    872A
08724:  MOVLB  0
08726:  GOTO   87C8
0872A:  BCF    FD8.0
0872C:  MOVLB  1
0872E:  RLCF   xFF,F
08730:  MOVLB  2
08732:  RLCF   x00,F
08734:  RLCF   x01,F
08736:  RLCF   x02,F
08738:  MOVLB  0
0873A:  MOVLB  1
0873C:  MOVF   xFE,W
0873E:  SUBWF  xFF,F
08740:  BTFSS  FD8.0
08742:  BRA    874A
08744:  MOVLB  0
08746:  GOTO   8774
0874A:  MOVLW  01
0874C:  MOVLB  2
0874E:  SUBWF  x00,F
08750:  BTFSS  FD8.0
08752:  BRA    875A
08754:  MOVLB  0
08756:  GOTO   8774
0875A:  SUBWF  x01,F
0875C:  BTFSS  FD8.0
0875E:  BRA    8766
08760:  MOVLB  0
08762:  GOTO   8774
08766:  SUBWF  x02,F
08768:  BTFSC  FD8.0
0876A:  BRA    8772
0876C:  MOVLB  0
0876E:  GOTO   87EE
08772:  MOVLB  0
08774:  MOVLB  1
08776:  MOVF   xFD,W
08778:  MOVLB  2
0877A:  SUBWF  x00,F
0877C:  BTFSS  FD8.0
0877E:  BRA    8786
08780:  MOVLB  0
08782:  GOTO   87A2
08786:  MOVLW  01
08788:  SUBWF  x01,F
0878A:  BTFSS  FD8.0
0878C:  BRA    8794
0878E:  MOVLB  0
08790:  GOTO   87A2
08794:  SUBWF  x02,F
08796:  BTFSC  FD8.0
08798:  BRA    87A0
0879A:  MOVLB  0
0879C:  GOTO   87EE
087A0:  MOVLB  0
087A2:  MOVLB  1
087A4:  MOVF   xFC,W
087A6:  IORLW  80
087A8:  MOVLB  0
087AA:  MOVLB  2
087AC:  SUBWF  x01,F
087AE:  BTFSS  FD8.0
087B0:  BRA    87B8
087B2:  MOVLB  0
087B4:  GOTO   87C8
087B8:  MOVLW  01
087BA:  SUBWF  x02,F
087BC:  BTFSC  FD8.0
087BE:  BRA    87C6
087C0:  MOVLB  0
087C2:  GOTO   87EE
087C6:  MOVLB  0
087C8:  INCF   03,F
087CA:  BTFSS  FD8.2
087CC:  GOTO   87EE
087D0:  INCF   02,F
087D2:  BTFSS  FD8.2
087D4:  GOTO   87EE
087D8:  INCF   01,F
087DA:  BTFSS  FD8.2
087DC:  GOTO   87EE
087E0:  INCF   00,F
087E2:  BTFSC  FD8.2
087E4:  GOTO   8812
087E8:  RRCF   01,F
087EA:  RRCF   02,F
087EC:  RRCF   03,F
087EE:  MOVFF  1F8,203
087F2:  MOVLB  1
087F4:  MOVF   xFC,W
087F6:  MOVLB  2
087F8:  XORWF  x03,F
087FA:  BTFSC  x03.7
087FC:  BRA    8804
087FE:  MOVLB  0
08800:  GOTO   880C
08804:  BSF    01.7
08806:  MOVLB  0
08808:  GOTO   881A
0880C:  BCF    01.7
0880E:  GOTO   881A
08812:  CLRF   00
08814:  CLRF   01
08816:  CLRF   02
08818:  CLRF   03
0881A:  RETURN 0
0881C:  MOVLW  80
0881E:  BTFSS  FD8.1
08820:  BRA    8828
08822:  MOVLB  1
08824:  XORWF  xF8,F
08826:  MOVLB  0
08828:  MOVLB  1
0882A:  CLRF   xFD
0882C:  CLRF   xFE
0882E:  MOVFF  1F4,1FC
08832:  MOVF   xF8,W
08834:  XORWF  xFC,F
08836:  MOVF   xF3,W
08838:  BTFSS  FD8.2
0883A:  BRA    8842
0883C:  MOVLB  0
0883E:  GOTO   8BF0
08842:  MOVWF  xFB
08844:  MOVFF  1FB,00
08848:  MOVF   xF7,W
0884A:  BTFSS  FD8.2
0884C:  BRA    8854
0884E:  MOVLB  0
08850:  GOTO   8C04
08854:  SUBWF  xFB,F
08856:  BTFSS  FD8.2
08858:  BRA    8860
0885A:  MOVLB  0
0885C:  GOTO   8A6A
08860:  BTFSS  FD8.0
08862:  BRA    886A
08864:  MOVLB  0
08866:  GOTO   8870
0886A:  MOVLB  0
0886C:  GOTO   8966
08870:  MOVFF  1F8,201
08874:  MOVLB  2
08876:  BSF    x01.7
08878:  MOVFF  1F9,200
0887C:  MOVFF  1FA,1FF
08880:  MOVLB  0
08882:  MOVLB  1
08884:  CLRF   xFE
08886:  BCF    FD8.0
08888:  MOVLB  2
0888A:  RRCF   x01,F
0888C:  RRCF   x00,F
0888E:  MOVLB  1
08890:  RRCF   xFF,F
08892:  RRCF   xFE,F
08894:  DECFSZ xFB,F
08896:  BRA    889C
08898:  BRA    88A2
0889A:  MOVLB  0
0889C:  MOVLB  0
0889E:  GOTO   8882
088A2:  MOVLB  0
088A4:  MOVLB  1
088A6:  BTFSC  xFC.7
088A8:  BRA    88B0
088AA:  MOVLB  0
088AC:  GOTO   88BE
088B0:  BSF    xFD.0
088B2:  MOVLB  0
088B4:  GOTO   8C30
088B8:  MOVLB  1
088BA:  BCF    xFD.0
088BC:  MOVLB  0
088BE:  MOVLB  1
088C0:  BCF    xFB.0
088C2:  BSF    xFD.4
088C4:  MOVLW  01
088C6:  MOVWF  FEA
088C8:  MOVLW  F6
088CA:  MOVWF  FE9
088CC:  MOVLB  0
088CE:  GOTO   8C90
088D2:  MOVLB  1
088D4:  BCF    xFD.4
088D6:  BTFSS  xFC.7
088D8:  BRA    88E0
088DA:  MOVLB  0
088DC:  GOTO   8908
088E0:  BTFSC  xFB.0
088E2:  BRA    88EA
088E4:  MOVLB  0
088E6:  GOTO   8932
088EA:  MOVLB  2
088EC:  RRCF   x01,F
088EE:  RRCF   x00,F
088F0:  MOVLB  1
088F2:  RRCF   xFF,F
088F4:  RRCF   xFE,F
088F6:  INCF   00,F
088F8:  BTFSS  FD8.2
088FA:  BRA    8902
088FC:  MOVLB  0
088FE:  GOTO   8C24
08902:  MOVLB  0
08904:  GOTO   8932
08908:  MOVLB  2
0890A:  BTFSS  x01.7
0890C:  BRA    8914
0890E:  MOVLB  0
08910:  GOTO   8942
08914:  BCF    FD8.0
08916:  MOVLB  1
08918:  RLCF   xFE,F
0891A:  RLCF   xFF,F
0891C:  MOVLB  2
0891E:  RLCF   x00,F
08920:  RLCF   x01,F
08922:  DECFSZ 00,F
08924:  BRA    892C
08926:  MOVLB  0
08928:  GOTO   8C24
0892C:  MOVLB  0
0892E:  GOTO   8908
08932:  MOVLB  1
08934:  BSF    xFD.6
08936:  MOVLB  0
08938:  GOTO   8AE6
0893C:  MOVLB  1
0893E:  BCF    xFD.6
08940:  MOVLB  0
08942:  MOVFF  1F4,1FC
08946:  MOVLB  1
08948:  BTFSC  xFC.7
0894A:  BRA    8952
0894C:  MOVLB  0
0894E:  GOTO   895C
08952:  MOVLB  2
08954:  BSF    x01.7
08956:  MOVLB  0
08958:  GOTO   8C14
0895C:  MOVLB  2
0895E:  BCF    x01.7
08960:  MOVLB  0
08962:  GOTO   8C14
08966:  MOVFF  1F7,1FB
0896A:  MOVFF  1FB,00
0896E:  MOVLB  1
08970:  MOVF   xF3,W
08972:  SUBWF  xFB,F
08974:  MOVFF  1F4,201
08978:  MOVLB  2
0897A:  BSF    x01.7
0897C:  MOVFF  1F5,200
08980:  MOVFF  1F6,1FF
08984:  MOVLB  0
08986:  MOVLB  1
08988:  CLRF   xFE
0898A:  BCF    FD8.0
0898C:  MOVLB  2
0898E:  RRCF   x01,F
08990:  RRCF   x00,F
08992:  MOVLB  1
08994:  RRCF   xFF,F
08996:  RRCF   xFE,F
08998:  DECFSZ xFB,F
0899A:  BRA    89A0
0899C:  BRA    89A6
0899E:  MOVLB  0
089A0:  MOVLB  0
089A2:  GOTO   8986
089A6:  MOVLB  0
089A8:  MOVLB  1
089AA:  BTFSC  xFC.7
089AC:  BRA    89B4
089AE:  MOVLB  0
089B0:  GOTO   89C2
089B4:  BSF    xFD.1
089B6:  MOVLB  0
089B8:  GOTO   8C30
089BC:  MOVLB  1
089BE:  BCF    xFD.1
089C0:  MOVLB  0
089C2:  MOVLB  1
089C4:  BCF    xFB.0
089C6:  BSF    xFD.5
089C8:  MOVLW  01
089CA:  MOVWF  FEA
089CC:  MOVLW  FA
089CE:  MOVWF  FE9
089D0:  MOVLB  0
089D2:  GOTO   8C90
089D6:  MOVLB  1
089D8:  BCF    xFD.5
089DA:  BTFSS  xFC.7
089DC:  BRA    89E4
089DE:  MOVLB  0
089E0:  GOTO   8A0C
089E4:  BTFSC  xFB.0
089E6:  BRA    89EE
089E8:  MOVLB  0
089EA:  GOTO   8A36
089EE:  MOVLB  2
089F0:  RRCF   x01,F
089F2:  RRCF   x00,F
089F4:  MOVLB  1
089F6:  RRCF   xFF,F
089F8:  RRCF   xFE,F
089FA:  INCF   00,F
089FC:  BTFSS  FD8.2
089FE:  BRA    8A06
08A00:  MOVLB  0
08A02:  GOTO   8C24
08A06:  MOVLB  0
08A08:  GOTO   8A36
08A0C:  MOVLB  2
08A0E:  BTFSS  x01.7
08A10:  BRA    8A18
08A12:  MOVLB  0
08A14:  GOTO   8A46
08A18:  BCF    FD8.0
08A1A:  MOVLB  1
08A1C:  RLCF   xFE,F
08A1E:  RLCF   xFF,F
08A20:  MOVLB  2
08A22:  RLCF   x00,F
08A24:  RLCF   x01,F
08A26:  DECFSZ 00,F
08A28:  BRA    8A30
08A2A:  MOVLB  0
08A2C:  GOTO   8C24
08A30:  MOVLB  0
08A32:  GOTO   8A0C
08A36:  MOVLB  1
08A38:  BSF    xFD.7
08A3A:  MOVLB  0
08A3C:  GOTO   8AE6
08A40:  MOVLB  1
08A42:  BCF    xFD.7
08A44:  MOVLB  0
08A46:  MOVFF  1F8,1FC
08A4A:  MOVLB  1
08A4C:  BTFSC  xFC.7
08A4E:  BRA    8A56
08A50:  MOVLB  0
08A52:  GOTO   8A60
08A56:  MOVLB  2
08A58:  BSF    x01.7
08A5A:  MOVLB  0
08A5C:  GOTO   8C14
08A60:  MOVLB  2
08A62:  BCF    x01.7
08A64:  MOVLB  0
08A66:  GOTO   8C14
08A6A:  MOVFF  1F8,201
08A6E:  MOVLB  2
08A70:  BSF    x01.7
08A72:  MOVFF  1F9,200
08A76:  MOVFF  1FA,1FF
08A7A:  MOVLB  1
08A7C:  BTFSC  xFC.7
08A7E:  BRA    8A86
08A80:  MOVLB  0
08A82:  GOTO   8A9A
08A86:  MOVLB  2
08A88:  BCF    x01.7
08A8A:  MOVLB  1
08A8C:  BSF    xFD.2
08A8E:  MOVLB  0
08A90:  GOTO   8C30
08A94:  MOVLB  1
08A96:  BCF    xFD.2
08A98:  MOVLB  0
08A9A:  MOVLB  1
08A9C:  CLRF   xFE
08A9E:  BCF    xFB.0
08AA0:  MOVLW  01
08AA2:  MOVWF  FEA
08AA4:  MOVLW  F6
08AA6:  MOVWF  FE9
08AA8:  MOVLB  0
08AAA:  GOTO   8C90
08AAE:  MOVLB  1
08AB0:  BTFSS  xFC.7
08AB2:  BRA    8ABA
08AB4:  MOVLB  0
08AB6:  GOTO   8B4A
08ABA:  MOVFF  1F4,1FC
08ABE:  MOVLB  0
08AC0:  MOVLB  1
08AC2:  BTFSC  xFB.0
08AC4:  BRA    8ACC
08AC6:  MOVLB  0
08AC8:  GOTO   8AE6
08ACC:  MOVLB  2
08ACE:  RRCF   x01,F
08AD0:  RRCF   x00,F
08AD2:  MOVLB  1
08AD4:  RRCF   xFF,F
08AD6:  RRCF   xFE,F
08AD8:  INCF   00,F
08ADA:  BTFSS  FD8.2
08ADC:  BRA    8AE4
08ADE:  MOVLB  0
08AE0:  GOTO   8C24
08AE4:  MOVLB  0
08AE6:  MOVLB  1
08AE8:  BTFSC  xFE.7
08AEA:  BRA    8AF2
08AEC:  MOVLB  0
08AEE:  GOTO   8B2E
08AF2:  INCF   xFF,F
08AF4:  BTFSC  FD8.2
08AF6:  BRA    8AFE
08AF8:  MOVLB  0
08AFA:  GOTO   8B2E
08AFE:  MOVLB  2
08B00:  INCF   x00,F
08B02:  BTFSC  FD8.2
08B04:  BRA    8B0C
08B06:  MOVLB  0
08B08:  GOTO   8B2E
08B0C:  INCF   x01,F
08B0E:  BTFSC  FD8.2
08B10:  BRA    8B18
08B12:  MOVLB  0
08B14:  GOTO   8B2E
08B18:  RRCF   x01,F
08B1A:  RRCF   x00,F
08B1C:  MOVLB  1
08B1E:  RRCF   xFF,F
08B20:  INCF   00,F
08B22:  BTFSS  FD8.2
08B24:  BRA    8B2C
08B26:  MOVLB  0
08B28:  GOTO   8C24
08B2C:  MOVLB  0
08B2E:  MOVLB  1
08B30:  BTFSS  xFD.6
08B32:  BRA    8B3A
08B34:  MOVLB  0
08B36:  GOTO   893C
08B3A:  BTFSS  xFD.7
08B3C:  BRA    8B44
08B3E:  MOVLB  0
08B40:  GOTO   8A40
08B44:  MOVLB  0
08B46:  GOTO   8BD0
08B4A:  MOVLW  80
08B4C:  MOVLB  2
08B4E:  XORWF  x01,F
08B50:  BTFSC  x01.7
08B52:  BRA    8B5A
08B54:  MOVLB  0
08B56:  GOTO   8B68
08B5A:  MOVLB  0
08B5C:  GOTO   8C30
08B60:  MOVFF  1F8,1FC
08B64:  GOTO   8BA2
08B68:  MOVFF  1F4,1FC
08B6C:  MOVLB  2
08B6E:  MOVF   x01,F
08B70:  BTFSC  FD8.2
08B72:  BRA    8B7A
08B74:  MOVLB  0
08B76:  GOTO   8BA2
08B7A:  MOVLB  0
08B7C:  MOVLB  2
08B7E:  MOVF   x00,F
08B80:  BTFSC  FD8.2
08B82:  BRA    8B8A
08B84:  MOVLB  0
08B86:  GOTO   8BA2
08B8A:  MOVLB  0
08B8C:  MOVLB  1
08B8E:  MOVF   xFF,F
08B90:  BTFSC  FD8.2
08B92:  BRA    8B9A
08B94:  MOVLB  0
08B96:  GOTO   8BA2
08B9A:  MOVLB  0
08B9C:  CLRF   00
08B9E:  GOTO   8C14
08BA2:  MOVLB  2
08BA4:  BTFSS  x01.7
08BA6:  BRA    8BAE
08BA8:  MOVLB  0
08BAA:  GOTO   8BD0
08BAE:  BCF    FD8.0
08BB0:  MOVLB  1
08BB2:  RLCF   xFE,F
08BB4:  RLCF   xFF,F
08BB6:  MOVLB  2
08BB8:  RLCF   x00,F
08BBA:  RLCF   x01,F
08BBC:  DECFSZ 00,F
08BBE:  BRA    8BC4
08BC0:  BRA    8BCA
08BC2:  MOVLB  0
08BC4:  MOVLB  0
08BC6:  GOTO   8BA2
08BCA:  MOVLB  0
08BCC:  GOTO   8C24
08BD0:  MOVLB  1
08BD2:  BTFSC  xFC.7
08BD4:  BRA    8BDC
08BD6:  MOVLB  0
08BD8:  GOTO   8BE6
08BDC:  MOVLB  2
08BDE:  BSF    x01.7
08BE0:  MOVLB  0
08BE2:  GOTO   8C14
08BE6:  MOVLB  2
08BE8:  BCF    x01.7
08BEA:  MOVLB  0
08BEC:  GOTO   8C14
08BF0:  MOVFF  1F7,00
08BF4:  MOVFF  1F8,201
08BF8:  MOVFF  1F9,200
08BFC:  MOVFF  1FA,1FF
08C00:  GOTO   8C14
08C04:  MOVFF  1F3,00
08C08:  MOVFF  1F4,201
08C0C:  MOVFF  1F5,200
08C10:  MOVFF  1F6,1FF
08C14:  MOVFF  201,01
08C18:  MOVFF  200,02
08C1C:  MOVFF  1FF,03
08C20:  GOTO   8D12
08C24:  CLRF   00
08C26:  CLRF   01
08C28:  CLRF   02
08C2A:  CLRF   03
08C2C:  GOTO   8D12
08C30:  MOVLB  1
08C32:  CLRF   xFE
08C34:  COMF   xFF,F
08C36:  MOVLB  2
08C38:  COMF   x00,F
08C3A:  COMF   x01,F
08C3C:  MOVLB  1
08C3E:  COMF   xFE,F
08C40:  INCF   xFE,F
08C42:  BTFSC  FD8.2
08C44:  BRA    8C4C
08C46:  MOVLB  0
08C48:  GOTO   8C6A
08C4C:  INCF   xFF,F
08C4E:  BTFSC  FD8.2
08C50:  BRA    8C58
08C52:  MOVLB  0
08C54:  GOTO   8C6A
08C58:  MOVLB  2
08C5A:  INCF   x00,F
08C5C:  BTFSC  FD8.2
08C5E:  BRA    8C66
08C60:  MOVLB  0
08C62:  GOTO   8C6A
08C66:  INCF   x01,F
08C68:  MOVLB  0
08C6A:  MOVLB  1
08C6C:  BTFSS  xFD.0
08C6E:  BRA    8C76
08C70:  MOVLB  0
08C72:  GOTO   88B8
08C76:  BTFSS  xFD.1
08C78:  BRA    8C80
08C7A:  MOVLB  0
08C7C:  GOTO   89BC
08C80:  BTFSS  xFD.2
08C82:  BRA    8C8A
08C84:  MOVLB  0
08C86:  GOTO   8A94
08C8A:  MOVLB  0
08C8C:  GOTO   8B60
08C90:  MOVF   FEF,W
08C92:  MOVLB  1
08C94:  ADDWF  xFF,F
08C96:  BTFSC  FD8.0
08C98:  BRA    8CA0
08C9A:  MOVLB  0
08C9C:  GOTO   8CBC
08CA0:  MOVLB  2
08CA2:  INCF   x00,F
08CA4:  BTFSC  FD8.2
08CA6:  BRA    8CAE
08CA8:  MOVLB  0
08CAA:  GOTO   8CBC
08CAE:  INCF   x01,F
08CB0:  BTFSS  FD8.2
08CB2:  BRA    8CBA
08CB4:  MOVLB  1
08CB6:  BSF    xFB.0
08CB8:  MOVLB  2
08CBA:  MOVLB  0
08CBC:  MOVF   FED,F
08CBE:  MOVF   FEF,W
08CC0:  MOVLB  2
08CC2:  ADDWF  x00,F
08CC4:  BTFSC  FD8.0
08CC6:  BRA    8CCE
08CC8:  MOVLB  0
08CCA:  GOTO   8CDC
08CCE:  INCF   x01,F
08CD0:  BTFSS  FD8.2
08CD2:  BRA    8CDA
08CD4:  MOVLB  1
08CD6:  BSF    xFB.0
08CD8:  MOVLB  2
08CDA:  MOVLB  0
08CDC:  MOVF   FED,F
08CDE:  MOVF   FEF,W
08CE0:  BTFSC  FEF.7
08CE2:  GOTO   8CE8
08CE6:  XORLW  80
08CE8:  MOVLB  2
08CEA:  ADDWF  x01,F
08CEC:  BTFSS  FD8.0
08CEE:  BRA    8CF6
08CF0:  MOVLB  1
08CF2:  BSF    xFB.0
08CF4:  MOVLB  2
08CF6:  MOVLB  1
08CF8:  BTFSS  xFD.4
08CFA:  BRA    8D02
08CFC:  MOVLB  0
08CFE:  GOTO   88D2
08D02:  BTFSS  xFD.5
08D04:  BRA    8D0C
08D06:  MOVLB  0
08D08:  GOTO   89D6
08D0C:  MOVLB  0
08D0E:  GOTO   8AAE
08D12:  GOTO   8E20 (RETURN)
08D16:  MOVLW  8E
08D18:  MOVWF  00
08D1A:  MOVLB  1
08D1C:  MOVF   xF3,W
08D1E:  SUBWF  00,F
08D20:  MOVFF  1F4,02
08D24:  MOVFF  1F5,01
08D28:  BSF    02.7
08D2A:  MOVF   00,F
08D2C:  BTFSS  FD8.2
08D2E:  BRA    8D36
08D30:  MOVLB  0
08D32:  GOTO   8D54
08D36:  MOVLB  0
08D38:  BCF    FD8.0
08D3A:  MOVF   02,F
08D3C:  BTFSS  FD8.2
08D3E:  GOTO   8D4A
08D42:  MOVF   01,F
08D44:  BTFSC  FD8.2
08D46:  GOTO   8D54
08D4A:  RRCF   02,F
08D4C:  RRCF   01,F
08D4E:  DECFSZ 00,F
08D50:  GOTO   8D38
08D54:  MOVLB  1
08D56:  BTFSC  xF4.7
08D58:  BRA    8D60
08D5A:  MOVLB  0
08D5C:  GOTO   8D6C
08D60:  MOVLB  0
08D62:  COMF   01,F
08D64:  COMF   02,F
08D66:  INCF   01,F
08D68:  BTFSC  FD8.2
08D6A:  INCF   02,F
08D6C:  GOTO   8E78 (RETURN)
*
08E82:  MOVFF  FEA,1F1
08E86:  MOVFF  FE9,1F0
08E8A:  MOVLB  1
08E8C:  SWAPF  xEA,W
08E8E:  IORLW  F0
08E90:  MOVWF  xEC
08E92:  ADDWF  xEC,F
08E94:  ADDLW  E2
08E96:  MOVWF  xED
08E98:  ADDLW  32
08E9A:  MOVWF  xEF
08E9C:  MOVF   xEA,W
08E9E:  ANDLW  0F
08EA0:  ADDWF  xED,F
08EA2:  ADDWF  xED,F
08EA4:  ADDWF  xEF,F
08EA6:  ADDLW  E9
08EA8:  MOVWF  xEE
08EAA:  ADDWF  xEE,F
08EAC:  ADDWF  xEE,F
08EAE:  SWAPF  xE9,W
08EB0:  ANDLW  0F
08EB2:  ADDWF  xEE,F
08EB4:  ADDWF  xEF,F
08EB6:  RLCF   xEE,F
08EB8:  RLCF   xEF,F
08EBA:  COMF   xEF,F
08EBC:  RLCF   xEF,F
08EBE:  MOVF   xE9,W
08EC0:  ANDLW  0F
08EC2:  ADDWF  xEF,F
08EC4:  RLCF   xEC,F
08EC6:  MOVLW  07
08EC8:  MOVWF  xEB
08ECA:  MOVLW  0A
08ECC:  MOVLB  0
08ECE:  MOVLB  1
08ED0:  DECF   xEE,F
08ED2:  ADDWF  xEF,F
08ED4:  BTFSC  FD8.0
08ED6:  BRA    8EDE
08ED8:  MOVLB  0
08EDA:  GOTO   8ECE
08EDE:  MOVLB  0
08EE0:  MOVLB  1
08EE2:  DECF   xED,F
08EE4:  ADDWF  xEE,F
08EE6:  BTFSC  FD8.0
08EE8:  BRA    8EF0
08EEA:  MOVLB  0
08EEC:  GOTO   8EE0
08EF0:  MOVLB  0
08EF2:  MOVLB  1
08EF4:  DECF   xEC,F
08EF6:  ADDWF  xED,F
08EF8:  BTFSC  FD8.0
08EFA:  BRA    8F02
08EFC:  MOVLB  0
08EFE:  GOTO   8EF2
08F02:  MOVLB  0
08F04:  MOVLB  1
08F06:  DECF   xEB,F
08F08:  ADDWF  xEC,F
08F0A:  BTFSC  FD8.0
08F0C:  BRA    8F14
08F0E:  MOVLB  0
08F10:  GOTO   8F04
08F14:  MOVLW  01
08F16:  MOVWF  FEA
08F18:  MOVLW  EB
08F1A:  MOVWF  FE9
08F1C:  MOVLW  07
08F1E:  ANDWF  xF0,W
08F20:  BCF    xF0.6
08F22:  MOVLB  0
08F24:  ADDWF  FE9,F
08F26:  MOVLW  00
08F28:  ADDWFC FEA,F
08F2A:  MOVF   FE9,W
08F2C:  SUBLW  EF
08F2E:  BTFSS  FD8.2
08F30:  GOTO   8F40
08F34:  DECFSZ FEA,W
08F36:  GOTO   8F40
08F3A:  MOVLB  1
08F3C:  BSF    xF0.6
08F3E:  MOVLB  0
08F40:  MOVF   FEF,W
08F42:  MOVWF  00
08F44:  BTFSS  FD8.2
08F46:  GOTO   8F72
08F4A:  MOVLB  1
08F4C:  BTFSS  xF0.6
08F4E:  BRA    8F56
08F50:  MOVLB  0
08F52:  GOTO   8F72
08F56:  BTFSS  xF0.4
08F58:  BRA    8F60
08F5A:  MOVLB  0
08F5C:  GOTO   8F8C
08F60:  BTFSS  xF0.3
08F62:  BRA    8F6A
08F64:  MOVLB  0
08F66:  GOTO   8F72
08F6A:  MOVLW  20
08F6C:  MOVLB  0
08F6E:  GOTO   8F7C
08F72:  MOVLB  1
08F74:  BSF    xF0.3
08F76:  BCF    xF0.4
08F78:  MOVLW  30
08F7A:  MOVLB  0
08F7C:  ADDWF  00,F
08F7E:  MOVF   00,W
08F80:  BTFSS  FA6.6
08F82:  GOTO   8F80
08F86:  MOVLB  E
08F88:  MOVWF  xF9
08F8A:  MOVLB  0
08F8C:  MOVF   FEE,W
08F8E:  MOVLB  1
08F90:  BTFSC  xF0.6
08F92:  BRA    8F9A
08F94:  MOVLB  0
08F96:  GOTO   8F2A
08F9A:  MOVLB  0
08F9C:  RETURN 0
*
0920A:  MOVLB  A
0920C:  MOVF   x51,W
0920E:  CLRF   01
09210:  SUBWF  x50,W
09212:  BTFSS  FD8.0
09214:  BRA    921C
09216:  MOVLB  0
09218:  GOTO   9226
0921C:  MOVF   x50,W
0921E:  MOVWF  00
09220:  MOVLB  0
09222:  GOTO   9250
09226:  CLRF   00
09228:  MOVLW  08
0922A:  MOVLB  A
0922C:  MOVWF  x52
0922E:  MOVLB  0
09230:  MOVLB  A
09232:  RLCF   x50,F
09234:  RLCF   00,F
09236:  MOVF   x51,W
09238:  SUBWF  00,W
0923A:  BTFSC  FD8.0
0923C:  MOVWF  00
0923E:  RLCF   01,F
09240:  DECFSZ x52,F
09242:  BRA    9248
09244:  BRA    924E
09246:  MOVLB  0
09248:  MOVLB  0
0924A:  GOTO   9230
0924E:  MOVLB  0
09250:  RETURN 0
09252:  MOVF   01,W
09254:  MOVFF  A4E,A50
09258:  MOVLW  64
0925A:  MOVLB  A
0925C:  MOVWF  x51
0925E:  MOVLB  0
09260:  CALL   920A
09264:  MOVFF  00,A4E
09268:  MOVF   01,W
0926A:  MOVLW  30
0926C:  BTFSS  FD8.2
0926E:  GOTO   9292
09272:  MOVLB  A
09274:  BTFSC  x4F.1
09276:  BRA    927E
09278:  MOVLB  0
0927A:  GOTO   92AC
0927E:  BTFSS  x4F.3
09280:  BRA    9288
09282:  MOVLB  0
09284:  GOTO   92AC
09288:  BTFSC  x4F.4
0928A:  MOVLW  20
0928C:  MOVLB  0
0928E:  GOTO   929C
09292:  MOVLB  A
09294:  BCF    x4F.3
09296:  BCF    x4F.4
09298:  BSF    x4F.0
0929A:  MOVLB  0
0929C:  ADDWF  01,F
0929E:  MOVF   01,W
092A0:  BTFSS  FA6.6
092A2:  GOTO   92A0
092A6:  MOVLB  E
092A8:  MOVWF  xF9
092AA:  MOVLB  0
092AC:  MOVFF  A4E,A50
092B0:  MOVLW  0A
092B2:  MOVLB  A
092B4:  MOVWF  x51
092B6:  MOVLB  0
092B8:  CALL   920A
092BC:  MOVFF  00,A4E
092C0:  MOVF   01,W
092C2:  MOVLW  30
092C4:  BTFSS  FD8.2
092C6:  GOTO   92E6
092CA:  MOVLB  A
092CC:  BTFSS  x4F.3
092CE:  BRA    92D6
092D0:  MOVLB  0
092D2:  GOTO   92F6
092D6:  BTFSC  x4F.0
092D8:  BRA    92E0
092DA:  MOVLB  0
092DC:  GOTO   92F6
092E0:  BTFSC  x4F.4
092E2:  MOVLW  20
092E4:  MOVLB  0
092E6:  ADDWF  01,F
092E8:  MOVF   01,W
092EA:  BTFSS  FA6.6
092EC:  GOTO   92EA
092F0:  MOVLB  E
092F2:  MOVWF  xF9
092F4:  MOVLB  0
092F6:  MOVLW  30
092F8:  MOVLB  A
092FA:  ADDWF  x4E,F
092FC:  MOVF   x4E,W
092FE:  MOVLB  0
09300:  BTFSS  FA6.6
09302:  GOTO   9300
09306:  MOVLB  E
09308:  MOVWF  xF9
0930A:  MOVLB  0
0930C:  RETURN 0
*
0E8EC:  MOVLB  1
0E8EE:  CLRF   xD1
0E8F0:  CLRF   xD2
0E8F2:  MOVLW  01
0E8F4:  MOVWF  xD3
0E8F6:  CLRF   FDA
0E8F8:  CLRF   FD9
0E8FA:  MOVLW  01
0E8FC:  MOVWF  xD6
0E8FE:  MOVLW  C9
0E900:  MOVWF  xD5
0E902:  MOVLB  0
0E904:  MOVLW  01
0E906:  MOVWF  FEA
0E908:  MOVLW  CD
0E90A:  MOVWF  FE9
0E90C:  MOVFF  1D6,FE2
0E910:  MOVFF  1D5,FE1
0E914:  MOVFF  1D3,1D4
0E918:  BCF    FD8.0
0E91A:  MOVF   FE5,W
0E91C:  MULWF  FEE
0E91E:  MOVF   FF3,W
0E920:  MOVLB  1
0E922:  ADDWFC xD1,F
0E924:  MOVF   FF4,W
0E926:  ADDWFC xD2,F
0E928:  DECFSZ xD4,F
0E92A:  BRA    E930
0E92C:  BRA    E936
0E92E:  MOVLB  0
0E930:  MOVLB  0
0E932:  GOTO   E918
0E936:  MOVFF  1D1,FDE
0E93A:  MOVFF  1D2,1D1
0E93E:  CLRF   xD2
0E940:  BTFSC  FD8.0
0E942:  INCF   xD2,F
0E944:  INCF   xD5,F
0E946:  BTFSC  FD8.2
0E948:  INCF   xD6,F
0E94A:  INCF   xD3,F
0E94C:  MOVF   xD3,W
0E94E:  SUBLW  05
0E950:  BTFSC  FD8.2
0E952:  BRA    E95A
0E954:  MOVLB  0
0E956:  GOTO   E904
0E95A:  MOVLB  0
0E95C:  GOTO   EA20 (RETURN)
*
0FEA8:  MOVLW  20
0FEAA:  MOVLB  2
0FEAC:  BTFSS  x12.4
0FEAE:  MOVLW  30
0FEB0:  MOVWF  x13
0FEB2:  MOVFF  211,00
0FEB6:  BTFSC  00.7
0FEB8:  BRA    FEC0
0FEBA:  MOVLB  0
0FEBC:  GOTO   FED2
0FEC0:  COMF   00,F
0FEC2:  INCF   00,F
0FEC4:  MOVFF  00,211
0FEC8:  MOVLW  2D
0FECA:  MOVWF  x13
0FECC:  BSF    x12.7
0FECE:  BSF    x12.0
0FED0:  MOVLB  0
0FED2:  MOVF   01,W
0FED4:  MOVFF  211,A50
0FED8:  MOVLW  64
0FEDA:  MOVLB  A
0FEDC:  MOVWF  x51
0FEDE:  MOVLB  0
0FEE0:  CALL   920A
0FEE4:  MOVFF  00,211
0FEE8:  MOVLW  30
0FEEA:  ADDWF  01,W
0FEEC:  MOVLB  2
0FEEE:  MOVWF  x14
0FEF0:  MOVFF  211,A50
0FEF4:  MOVLW  0A
0FEF6:  MOVLB  A
0FEF8:  MOVWF  x51
0FEFA:  MOVLB  0
0FEFC:  CALL   920A
0FF00:  MOVLW  30
0FF02:  ADDWF  00,W
0FF04:  MOVLB  2
0FF06:  MOVWF  x16
0FF08:  MOVLW  30
0FF0A:  ADDWF  01,W
0FF0C:  MOVWF  x15
0FF0E:  MOVFF  213,00
0FF12:  MOVLB  0
0FF14:  MOVLW  30
0FF16:  MOVLB  2
0FF18:  SUBWF  x14,W
0FF1A:  BTFSS  FD8.2
0FF1C:  BRA    FF24
0FF1E:  MOVLB  0
0FF20:  GOTO   FF30
0FF24:  BSF    x12.1
0FF26:  BTFSC  x12.7
0FF28:  BSF    x12.2
0FF2A:  MOVLB  0
0FF2C:  GOTO   FF70
0FF30:  MOVFF  213,214
0FF34:  MOVLW  20
0FF36:  MOVLB  2
0FF38:  MOVWF  x13
0FF3A:  MOVLW  30
0FF3C:  SUBWF  x15,W
0FF3E:  BTFSS  FD8.2
0FF40:  BRA    FF48
0FF42:  MOVLB  0
0FF44:  GOTO   FF54
0FF48:  BSF    x12.0
0FF4A:  BTFSC  x12.7
0FF4C:  BSF    x12.1
0FF4E:  MOVLB  0
0FF50:  GOTO   FF70
0FF54:  BTFSC  FD8.2
0FF56:  BRA    FF5E
0FF58:  MOVLB  2
0FF5A:  BSF    x12.0
0FF5C:  MOVLB  0
0FF5E:  BTFSS  FD8.2
0FF60:  GOTO   FF70
0FF64:  MOVFF  214,215
0FF68:  MOVLW  20
0FF6A:  MOVLB  2
0FF6C:  MOVWF  x14
0FF6E:  MOVLB  0
0FF70:  MOVLB  2
0FF72:  BTFSS  x12.2
0FF74:  BRA    FF7C
0FF76:  MOVLB  0
0FF78:  GOTO   FF96
0FF7C:  BTFSS  x12.1
0FF7E:  BRA    FF86
0FF80:  MOVLB  0
0FF82:  GOTO   FFA8
0FF86:  BTFSS  x12.0
0FF88:  BRA    FF90
0FF8A:  MOVLB  0
0FF8C:  GOTO   FFBA
0FF90:  MOVLB  0
0FF92:  GOTO   FFCC
0FF96:  MOVLB  2
0FF98:  MOVF   x13,W
0FF9A:  MOVLB  0
0FF9C:  BTFSS  FA6.6
0FF9E:  GOTO   FF9C
0FFA2:  MOVLB  E
0FFA4:  MOVWF  xF9
0FFA6:  MOVLB  0
0FFA8:  MOVLB  2
0FFAA:  MOVF   x14,W
0FFAC:  MOVLB  0
0FFAE:  BTFSS  FA6.6
0FFB0:  GOTO   FFAE
0FFB4:  MOVLB  E
0FFB6:  MOVWF  xF9
0FFB8:  MOVLB  0
0FFBA:  MOVLB  2
0FFBC:  MOVF   x15,W
0FFBE:  MOVLB  0
0FFC0:  BTFSS  FA6.6
0FFC2:  GOTO   FFC0
0FFC6:  MOVLB  E
0FFC8:  MOVWF  xF9
0FFCA:  MOVLB  0
0FFCC:  MOVLB  2
0FFCE:  MOVF   x16,W
0FFD0:  MOVLB  0
0FFD2:  BTFSS  FA6.6
0FFD4:  GOTO   FFD2
0FFD8:  MOVLB  E
0FFDA:  MOVWF  xF9
0FFDC:  MOVLB  0
0FFDE:  GOTO   11082 (RETURN)
*
1061C:  MOVF   FE9,W
1061E:  MOVLB  1
10620:  MOVWF  xAF
10622:  BTFSC  xAE.7
10624:  BRA    1062C
10626:  MOVLB  0
10628:  GOTO   10648
1062C:  DECF   xAF,F
1062E:  BSF    xAF.5
10630:  COMF   xAB,F
10632:  COMF   xAC,F
10634:  COMF   xAD,F
10636:  COMF   xAE,F
10638:  INCF   xAB,F
1063A:  BTFSC  FD8.2
1063C:  INCF   xAC,F
1063E:  BTFSC  FD8.2
10640:  INCF   xAD,F
10642:  BTFSC  FD8.2
10644:  INCF   xAE,F
10646:  MOVLB  0
10648:  MOVLW  3B
1064A:  MOVLB  1
1064C:  MOVWF  xB6
1064E:  MOVLW  9A
10650:  MOVWF  xB5
10652:  MOVLW  CA
10654:  MOVWF  xB4
10656:  CLRF   xB3
10658:  MOVLW  0A
1065A:  MOVWF  xB1
1065C:  MOVLB  0
1065E:  BSF    FD8.1
10660:  MOVLW  01
10662:  MOVWF  FEA
10664:  MOVLW  AB
10666:  MOVWF  FE9
10668:  MOVFF  1AE,215
1066C:  MOVFF  1AD,214
10670:  MOVFF  1AC,213
10674:  MOVFF  1AB,212
10678:  MOVFF  1B6,219
1067C:  MOVFF  1B5,218
10680:  MOVFF  1B4,217
10684:  MOVFF  1B3,216
10688:  CALL   6218
1068C:  MOVF   01,W
1068E:  MOVF   00,F
10690:  BTFSS  FD8.2
10692:  GOTO   106EA
10696:  MOVLB  1
10698:  MOVF   xB1,W
1069A:  XORLW  01
1069C:  BTFSS  FD8.2
1069E:  BRA    106A6
106A0:  MOVLB  0
106A2:  GOTO   106EA
106A6:  MOVF   xAF,W
106A8:  BTFSS  FD8.2
106AA:  BRA    106B2
106AC:  MOVLB  0
106AE:  GOTO   106F2
106B2:  ANDLW  0F
106B4:  SUBWF  xB1,W
106B6:  BTFSS  FD8.2
106B8:  BRA    106C0
106BA:  MOVLB  0
106BC:  GOTO   106CC
106C0:  BTFSS  FD8.0
106C2:  BRA    106CA
106C4:  MOVLB  0
106C6:  GOTO   1075A
106CA:  MOVLB  0
106CC:  MOVLB  1
106CE:  BTFSS  xAF.7
106D0:  BRA    106D8
106D2:  MOVLB  0
106D4:  GOTO   1075A
106D8:  BTFSS  xAF.6
106DA:  BRA    106E2
106DC:  MOVLB  0
106DE:  GOTO   106F2
106E2:  MOVLW  20
106E4:  MOVLB  0
106E6:  GOTO   1074A
106EA:  MOVLW  20
106EC:  MOVLB  1
106EE:  ANDWF  xAF,F
106F0:  MOVLB  0
106F2:  MOVLB  1
106F4:  BTFSC  xAF.5
106F6:  BRA    106FE
106F8:  MOVLB  0
106FA:  GOTO   1071C
106FE:  BCF    xAF.5
10700:  MOVF   00,W
10702:  MOVWF  xAF
10704:  MOVLW  2D
10706:  MOVLB  0
10708:  BTFSS  FA6.6
1070A:  GOTO   10708
1070E:  MOVLB  E
10710:  MOVWF  xF9
10712:  MOVLB  1
10714:  MOVF   xAF,W
10716:  MOVWF  00
10718:  CLRF   xAF
1071A:  MOVLB  0
1071C:  MOVLW  30
1071E:  MOVLB  1
10720:  BTFSC  xAF.5
10722:  BRA    1072A
10724:  MOVLB  0
10726:  GOTO   1074A
1072A:  BCF    xAF.5
1072C:  MOVF   00,W
1072E:  MOVWF  xAF
10730:  MOVLW  2D
10732:  MOVLB  0
10734:  BTFSS  FA6.6
10736:  GOTO   10734
1073A:  MOVLB  E
1073C:  MOVWF  xF9
1073E:  MOVLB  1
10740:  MOVF   xAF,W
10742:  MOVWF  00
10744:  CLRF   xAF
10746:  MOVLW  30
10748:  MOVLB  0
1074A:  ADDWF  00,F
1074C:  MOVF   00,W
1074E:  BTFSS  FA6.6
10750:  GOTO   1074E
10754:  MOVLB  E
10756:  MOVWF  xF9
10758:  MOVLB  0
1075A:  BCF    FD8.1
1075C:  MOVFF  1B6,215
10760:  MOVFF  1B5,214
10764:  MOVFF  1B4,213
10768:  MOVFF  1B3,212
1076C:  MOVLB  2
1076E:  CLRF   x19
10770:  CLRF   x18
10772:  CLRF   x17
10774:  MOVLW  0A
10776:  MOVWF  x16
10778:  MOVLB  0
1077A:  CALL   6218
1077E:  MOVFF  03,1B6
10782:  MOVFF  02,1B5
10786:  MOVFF  01,1B4
1078A:  MOVFF  00,1B3
1078E:  MOVLB  1
10790:  DECFSZ xB1,F
10792:  BRA    10798
10794:  BRA    1079E
10796:  MOVLB  0
10798:  MOVLB  0
1079A:  GOTO   1065E
1079E:  MOVLB  0
107A0:  RETURN 0
*
1302A:  ADDWF  FE8,W
1302C:  CLRF   FF7
1302E:  RLCF   FF7,F
13030:  ADDLW  4B
13032:  MOVWF  FF6
13034:  MOVLW  30
13036:  ADDWFC FF7,F
13038:  MOVLW  01
1303A:  MOVWF  FF8
1303C:  MOVWF  FFB
1303E:  TBLRD*-
13040:  MOVF   FF5,W
13042:  MOVWF  FFA
13044:  TBLRD*
13046:  MOVF   FF5,W
13048:  MOVWF  FF9
1304A:  DATA D2,2F
1304C:  DATA E2,2F
1304E:  DATA 02,30
13050:  DATA 12,30
.................... 
.................... #list
.................... 
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
*
022D0:  MOVLW  0B
022D2:  MOVWF  FEA
022D4:  MOVLW  03
022D6:  MOVWF  FE9
022D8:  MOVF   FEF,W
022DA:  BTFSC  FD8.2
022DC:  GOTO   22FC
022E0:  MOVLW  05
022E2:  MOVWF  01
022E4:  CLRF   00
022E6:  DECFSZ 00,F
022E8:  BRA    22E6
022EA:  DECFSZ 01,F
022EC:  BRA    22E4
022EE:  MOVLW  2E
022F0:  MOVWF  00
022F2:  DECFSZ 00,F
022F4:  BRA    22F2
022F6:  BRA    22F8
022F8:  DECFSZ FEF,F
022FA:  BRA    22E0
022FC:  RETURN 0
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
*
00218:  BTFSS  FA6.5
0021A:  GOTO   0218
0021E:  MOVLB  F
00220:  MOVF   x2F,W
00222:  MOVWF  1B
00224:  MOVLB  0
00226:  MOVLB  F
00228:  MOVF   x2A,W
0022A:  MOVWF  01
0022C:  BTFSC  1B.1
0022E:  BRA    0236
00230:  MOVLB  0
00232:  GOTO   023A
00236:  BCF    x2F.4
00238:  BSF    x2F.4
0023A:  MOVLB  0
0023C:  GOTO   0276 (RETURN)
*
057BE:  BTFSS  FA6.4
057C0:  GOTO   57BE
057C4:  MOVLB  F
057C6:  MOVWF  x29
057C8:  MOVLB  0
057CA:  GOTO   5800 (RETURN)
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
*
091FC:  BTFSS  FA6.6
091FE:  GOTO   91FC
09202:  MOVLB  E
09204:  MOVWF  xF9
09206:  MOVLB  0
09208:  RETURN 0
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
*
02B90:  MOVLB  B
02B92:  MOVF   x26,W
02B94:  SUBLW  08
02B96:  BTFSS  FD8.2
02B98:  BRA    2BA0
02B9A:  MOVLB  0
02B9C:  GOTO   2BB8
02BA0:  MOVWF  x28
02BA2:  MOVLB  0
02BA4:  MOVLB  B
02BA6:  RLCF   x25,F
02BA8:  DECFSZ x28,F
02BAA:  BRA    2BB0
02BAC:  BRA    2BB6
02BAE:  MOVLB  0
02BB0:  MOVLB  0
02BB2:  GOTO   2BA4
02BB6:  MOVLB  0
02BB8:  BSF    F92.1
02BBA:  BCF    F92.0
02BBC:  BCF    F92.3
02BBE:  BCF    F89.3
02BC0:  MOVFF  B26,B28
02BC4:  MOVLB  B
02BC6:  BTFSS  x25.7
02BC8:  BCF    F89.0
02BCA:  BTFSC  x25.7
02BCC:  BSF    F89.0
02BCE:  RLCF   x25,F
02BD0:  BSF    F89.3
02BD2:  RLCF   01,F
02BD4:  BTFSS  F80.1
02BD6:  BCF    01.0
02BD8:  BTFSC  F80.1
02BDA:  BSF    01.0
02BDC:  BCF    F89.3
02BDE:  DECFSZ x28,F
02BE0:  BRA    2BE6
02BE2:  BRA    2BEC
02BE4:  MOVLB  0
02BE6:  MOVLB  0
02BE8:  GOTO   2BC4
02BEC:  MOVLB  0
02BEE:  RETURN 0
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
*
02B30:  MOVLB  B
02B32:  MOVF   x26,W
02B34:  SUBLW  08
02B36:  BTFSS  FD8.2
02B38:  BRA    2B40
02B3A:  MOVLB  0
02B3C:  GOTO   2B58
02B40:  MOVWF  x28
02B42:  MOVLB  0
02B44:  MOVLB  B
02B46:  RLCF   x25,F
02B48:  DECFSZ x28,F
02B4A:  BRA    2B50
02B4C:  BRA    2B56
02B4E:  MOVLB  0
02B50:  MOVLB  0
02B52:  GOTO   2B44
02B56:  MOVLB  0
02B58:  BSF    F96.0
02B5A:  BCF    F96.6
02B5C:  BCF    F96.1
02B5E:  BCF    F8D.1
02B60:  MOVFF  B26,B28
02B64:  MOVLB  B
02B66:  BTFSS  x25.7
02B68:  BCF    F8D.6
02B6A:  BTFSC  x25.7
02B6C:  BSF    F8D.6
02B6E:  RLCF   x25,F
02B70:  BSF    F8D.1
02B72:  RLCF   01,F
02B74:  BTFSS  F84.0
02B76:  BCF    01.0
02B78:  BTFSC  F84.0
02B7A:  BSF    01.0
02B7C:  BCF    F8D.1
02B7E:  DECFSZ x28,F
02B80:  BRA    2B86
02B82:  BRA    2B8C
02B84:  MOVLB  0
02B86:  MOVLB  0
02B88:  GOTO   2B64
02B8C:  MOVLB  0
02B8E:  RETURN 0
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
*
0247E:  MOVLB  9
02480:  MOVF   xF7,W
02482:  SUBLW  10
02484:  BTFSS  FD8.2
02486:  BRA    248E
02488:  MOVLB  0
0248A:  GOTO   24A8
0248E:  MOVWF  xF9
02490:  MOVLB  0
02492:  MOVLB  9
02494:  RLCF   xF5,F
02496:  RLCF   xF6,F
02498:  DECFSZ xF9,F
0249A:  BRA    24A0
0249C:  BRA    24A6
0249E:  MOVLB  0
024A0:  MOVLB  0
024A2:  GOTO   2492
024A6:  MOVLB  0
024A8:  BSF    F93.4
024AA:  BCF    F93.5
024AC:  BCF    F93.2
024AE:  BSF    F8A.2
024B0:  MOVFF  9F7,9F9
024B4:  MOVLB  9
024B6:  BTFSS  xF6.7
024B8:  BCF    F8A.5
024BA:  BTFSC  xF6.7
024BC:  BSF    F8A.5
024BE:  RLCF   xF5,F
024C0:  RLCF   xF6,F
024C2:  BCF    F8A.2
024C4:  RLCF   01,F
024C6:  RLCF   02,F
024C8:  BTFSS  F81.4
024CA:  BCF    01.0
024CC:  BTFSC  F81.4
024CE:  BSF    01.0
024D0:  BSF    F8A.2
024D2:  DECFSZ xF9,F
024D4:  BRA    24DA
024D6:  BRA    24E0
024D8:  MOVLB  0
024DA:  MOVLB  0
024DC:  GOTO   24B4
024E0:  MOVLB  0
024E2:  RETURN 0
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
*
0283C:  MOVLB  9
0283E:  MOVF   xE2,W
02840:  SUBLW  10
02842:  BTFSS  FD8.2
02844:  BRA    284C
02846:  MOVLB  0
02848:  GOTO   2866
0284C:  MOVWF  xE4
0284E:  MOVLB  0
02850:  MOVLB  9
02852:  RLCF   xE0,F
02854:  RLCF   xE1,F
02856:  DECFSZ xE4,F
02858:  BRA    285E
0285A:  BRA    2864
0285C:  MOVLB  0
0285E:  MOVLB  0
02860:  GOTO   2850
02864:  MOVLB  0
02866:  BCF    F95.4
02868:  BCF    F95.5
0286A:  BSF    F8C.5
0286C:  MOVFF  9E2,9E4
02870:  MOVLB  9
02872:  BTFSS  xE1.7
02874:  BCF    F8C.4
02876:  BTFSC  xE1.7
02878:  BSF    F8C.4
0287A:  RLCF   xE0,F
0287C:  RLCF   xE1,F
0287E:  BCF    F8C.5
02880:  BSF    F8C.5
02882:  DECFSZ xE4,F
02884:  BRA    288A
02886:  BRA    2890
02888:  MOVLB  0
0288A:  MOVLB  0
0288C:  GOTO   2870
02890:  MOVLB  0
02892:  RETURN 0
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル2: ハードウェア抽象化層  
.................... #include "hal/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... #INT_TIMER1 
.................... static void TIMER1_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... void set_current_sec(unsigned int32 new_sec);
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "hal/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "hal/gpio.h"
.................... #ifndef GPIO_H
.................... #define GPIO_H
.................... 
.................... void gpio_init();
.................... void enable_negative_power();
.................... void disable_negative_power();
.................... void connect_port1();
.................... void disconnect_port1();
.................... void connect_port2();
.................... void disconnect_port2();
.................... 
.................... 
.................... // 
.................... void connect_negative_power1(int1 state);
.................... void connect_negative_power2(int1 state);
.................... #endif // GPIO_H
.................... 
.................... #include "device_driver/ad7490_driver.h"
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "device_driver/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル3: 基本ライブラリヘッダー（型定義・通信・ツール）
.................... #include "../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06,
....................     TIME_REQ          = 0x07
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/tool/mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... typedef enum smf_memory_id_t{
....................     // SATO
....................     SMF_SATO_DATA_TABLE = 0xA0,
....................     SMF_SATO_PICLOG = 0xA1,
....................     SMF_SATO_INNER_DIODE_HEADER = 0xA2,
....................     SMF_SATO_INNER_DIODE_DATA = 0xA3,
....................     SMF_SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SMF_SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     SMF_CIGS_DATA_TABLE = 0xC0,
....................     SMF_CIGS_PICLOG = 0xC1,
....................     SMF_CIGS_ENVIRO = 0xC2,
....................     SMF_CIGS_IV1_HEADER = 0xC3,
....................     SMF_CIGS_IV1_DATA = 0xC4,
....................     SMF_CIGS_IV2_HEADER = 0xC5,
....................     SMF_CIGS_IV2_DATA = 0xC6,
.................... };
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS   0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS   0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS     0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS       0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS         0x06AB0FFF
.................... #define CIGS_ENVIRO_START_ADDRESS       0x06AB1000
.................... #define CIGS_ENVIRO_END_ADDRESS         0x06B50FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS   0x06B51000
.................... #define CIGS_IV1_HEADER_END_ADDRESS     0x06BF0FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS     0x06BF1000
.................... #define CIGS_IV1_DATA_END_ADDRESS       0x06FF0FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS   0x06FF1000
.................... #define CIGS_IV2_HEADER_END_ADDRESS     0x07090FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS     0x07091000
.................... #define CIGS_IV2_DATA_END_ADDRESS       0x07490FFF
.................... 
.................... /*
.................... enum smf_memory_id{
....................     // SATO
....................     SATO_DATA_TABLE = 0xA0,
....................     SATO_PICLOG = 0xA1,
....................     SATO_INNER_DIODE_HEADER = 0xA2,
....................     SATO_INNER_DIODE_DATA = 0xA3,
....................     SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     IDF_CIGS_DATA_TABLE = 0xC0,
....................     IDF_CIGS_PICLOG = 0xC1,
....................     IDF_CIGS_ENVIRO = 0xC2,
....................     IDF_CIGS_IV1_HEADER = 0xC3,
....................     IDF_CIGS_IV1_DATA = 0xC4,
....................     IDF_CIGS_IV2_HEADER = 0xC5,
....................     IDF_CIGS_IV2_DATA = 0xC6,
.................... }
.................... */
.................... // DATA ID for CIGS
.................... #define DATA_ID_CIGS_DATA_TABLE 0xC0
.................... #define DATA_ID_CIGS_PICLOG 0xC1
.................... #define DATA_ID_CIGS_ENVIRO 0xC2
.................... #define DATA_ID_CIGS_IV1_HEADER 0xC3
.................... #define DATA_ID_CIGS_IV1_DATA 0xC4
.................... #define DATA_ID_CIGS_IV2_HEADER 0xC5
.................... #define DATA_ID_CIGS_IV2_DATA 0xC6
.................... 
.................... // FLASH ADDRESS for CIGS
.................... #define SMF_DATA_TABLE_HEADER_START_ADDRESS   0x07284000
.................... #define SMF_DATA_TABLE_HEADER_END_ADDRESS     0x07284FFF
.................... #define SMF_DATA_TABLE_DATA_START_ADDRESS     0x07285000
.................... #define SMF_DATA_TABLE_DATA_END_ADDRESS       0x07285FFF
.................... 
.................... #define SMF_PICLOG_HEADER_START_ADDRESS       0x07286000
.................... #define SMF_PICLOG_HEADER_END_ADDRESS         0x07286FFF
.................... #define SMF_PICLOG_DATA_START_ADDRESS         0x07287000
.................... #define SMF_PICLOG_DATA_END_ADDRESS           0x07296FFF
.................... 
.................... #define SMF_ENVIRO_HEADER_START_ADDRESS       0x07297000
.................... #define SMF_ENVIRO_HEADER_END_ADDRESS         0x07297FFF
.................... #define SMF_ENVIRO_DATA_START_ADDRESS         0x07298000
.................... #define SMF_ENVIRO_DATA_END_ADDRESS           0x07337FFF
.................... 
.................... #define SMF_IV1_HEADER_HEADER_START_ADDRESS   0x07338000
.................... #define SMF_IV1_HEADER_HEADER_END_ADDRESS     0x07338FFF
.................... #define SMF_IV1_HEADER_DATA_START_ADDRESS     0x07339000
.................... #define SMF_IV1_HEADER_DATA_END_ADDRESS       0x073D8FFF
.................... 
.................... #define SMF_IV1_DATA_HEADER_START_ADDRESS     0x073D9000
.................... #define SMF_IV1_DATA_HEADER_END_ADDRESS       0x073D9FFF
.................... #define SMF_IV1_DATA_DATA_START_ADDRESS       0x073DA000
.................... #define SMF_IV1_DATA_DATA_END_ADDRESS         0x077D9FFF
.................... 
.................... #define SMF_IV2_HEADER_HEADER_START_ADDRESS   0x077DA000
.................... #define SMF_IV2_HEADER_HEADER_END_ADDRESS     0x077DAFFF
.................... #define SMF_IV2_HEADER_DATA_START_ADDRESS     0x077DB000
.................... #define SMF_IV2_HEADER_DATA_END_ADDRESS       0x0787AFFF
.................... 
.................... #define SMF_IV2_DATA_HEADER_START_ADDRESS     0x0787B000
.................... #define SMF_IV2_DATA_HEADER_END_ADDRESS       0x0787BFFF
.................... #define SMF_IV2_DATA_DATA_START_ADDRESS       0x0787C000
.................... #define SMF_IV2_DATA_DATA_END_ADDRESS         0x07C7BFFF
.................... 
.................... 
.................... // FLASH SIZE for CIGS
.................... #define SMF_DATA_TABLE_SIZE  4096
.................... #define SMF_PICLOG_SIZE     1310720
.................... #define SMF_ENVIRO_SIZE     1310720
.................... #define SMF_IV1_HEADER_SIZE  655360
.................... #define SMF_IV1_DATA_SIZE    4194304
.................... #define SMF_IV2_HEADER_SIZE  655360
.................... #define SMF_IV2_DATA_SIZE    4194304
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // レベル4: デバイスドライバヘッダー
.................... #include "../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/device/ad7490.h"
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... // === AD7490 Control Word ===
.................... // Bit[15]   : WRITE (常に0)
.................... // Bit[14:13]: SEQ mode (シーケンス設定)
.................... // Bit[12]   : SHADOW (0=disabled, 1=enabled)
.................... // Bit[11]   : Don't Care
.................... // Bit[10]   : PM1 (Power Management)
.................... // Bit[9]    : PM0
.................... // Bit[8]    : REFSEL (0=internal, 1=external)
.................... // Bit[7]    : Coding (0=straight binary, 1=twos complement)
.................... // Bit[6]    : Don't Care
.................... // Bit[5]    : ADD2
.................... // Bit[4]    : ADD1
.................... // Bit[3]    : ADD0
.................... // Bit[2]    : DIFF (0=single-ended, 1=differential)
.................... // Bit[1:0]  : Don't Care
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000011
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000000
.................... 
.................... 
.................... // ----------------------------
.................... // WRITE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_WRITE_DISABLE = 0,  // 書き込み無効
....................     AD7490_WRITE_ENABLE  = 1   // 書き込み有効
.................... } ad7490_write_t;
.................... 
.................... // ----------------------------
.................... // SEQ bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SEQ_DISABLE = 0,
....................     AD7490_SEQ_ENABLE  = 1
.................... } ad7490_seq_t;
.................... 
.................... // ----------------------------
.................... // CODING bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CODING_BINARY  = 0, // ストレートバイナリ
....................     AD7490_CODING_TWOS    = 1  // Two’s complement
.................... } ad7490_coding_t;
.................... 
.................... // ----------------------------
.................... // RANGE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_RANGE_2REF  = 0, // 0〜2*REFIN
....................     AD7490_RANGE_REF   = 1  // 0〜REFIN
.................... } ad7490_range_t;
.................... 
.................... // ----------------------------
.................... // WEAK/TRI bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_DOUT_TRI   = 0, // Three-state
....................     AD7490_DOUT_WEAK  = 1  // Weakly driven
.................... } ad7490_dout_t;
.................... 
.................... // ----------------------------
.................... // SHADOW bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SHADOW_DISABLE = 0,
....................     AD7490_SHADOW_ENABLE  = 1
.................... } ad7490_shadow_t;
.................... 
.................... // ----------------------------
.................... // Power Mode (PM1, PM0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_PWR_NORMAL    = 0, // 00
....................     AD7490_PWR_FULLDOWN  = 1, // 01
....................     AD7490_PWR_AUTO      = 2, // 10
....................     AD7490_PWR_SHUTDOWN  = 3  // 11
.................... } ad7490_pwr_mode_t;
.................... 
.................... // ----------------------------
.................... // Channel Address (ADD3–ADD0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CH0  = 0,
....................     AD7490_CH1  = 1,
....................     AD7490_CH2  = 2,
....................     AD7490_CH3  = 3,
....................     AD7490_CH4  = 4,
....................     AD7490_CH5  = 5,
....................     AD7490_CH6  = 6,
....................     AD7490_CH7  = 7,
....................     AD7490_CH8  = 8,
....................     AD7490_CH9  = 9,
....................     AD7490_CH10 = 10,
....................     AD7490_CH11 = 11,
....................     AD7490_CH12 = 12,
....................     AD7490_CH13 = 13,
....................     AD7490_CH14 = 14,
....................     AD7490_CH15 = 15
.................... } ad7490_channel_t;
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // レベル5: 通信ライブラリヘッダー
.................... #include "../lib/communication/communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... #define SEND_TIME             0x03
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... #define SEND_TIME_LENGTH         4
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH},
....................    {SEND_TIME, SEND_TIME_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // レベル6: コア機能ヘッダー
.................... #include "domain/cigs_iv.h"
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_limit);  
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x300];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         unsigned int8 envdata[6];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
....................     
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *measured_data_ptr, sweep_config_t *port_data_ptr);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "domain/cigs_flash.h"
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "domain/cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "domain/cigs_smf.h"
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../hal/cigs_config.h" // int8,int32 型など(CCS C) 依存
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "cigs_flash.h"       // MISF_ADDRESS_TABLE, misf_counter_table 依存
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... extern int1 smf_update_flag[10]; // SMF更新フラグ
.................... 
.................... 
.................... // SMF管理用構造体
.................... typedef struct {
....................     ADDRESS_AREA_T header_area;
....................     ADDRESS_AREA_T data_area;
.................... } SMF_AREA_T;
.................... #define SMF_ID_COUNT 7
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 reserved;
.................... } SMF_PARTITION;
.................... 
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         SMF_PARTITION headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table);
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... void smf_update_smf_area(void);
.................... 
.................... typedef union{
....................     unsigned int8 bytes[PACKET_SIZE];
....................     struct {
....................         unsigned int32 piclog_used_size;
....................         unsigned int32 envero_used_size;
....................         unsigned int32 iv1_header_used_size;
....................         unsigned int32 iv1_data_used_size;
....................         unsigned int32 iv2_header_used_size;
....................         unsigned int32 iv2_data_used_size;
....................         unsigned int32 reserved[9];
....................     } fields;
.................... 
.................... }smf_address_header_t;
.................... 
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... 
.................... // レベル7: アプリケーションヘッダー
.................... #include "application/cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... // #include "../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... void handle_recieve_time(Command *command);
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "application/cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_PRINT 0xA3
.................... #define ID_MEAS_IV_PRINT 0xA4
.................... #define ID_MEAS_PD 0xA5
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_pd(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_1sweep(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_port1(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_port2(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int16 interval;
....................     unsigned int16 pd_threshold;
....................     unsigned int16 meas_time;
....................     unsigned int16 log_threshold;
....................     unsigned int16 sweep_limit;
.................... } meas_iv_param_t;
.................... 
.................... 
.................... // MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... meas_iv_param_t make_meas_iv_cmd(int8 *uplinkcmd_ptr);
.................... void print_meas_iv_cmd(meas_iv_param_t *cmd_ptr);
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "application/cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... //==============================================================================
.................... // .cファイル統合（CCS C単一コンパイル単位）
.................... //==============================================================================
.................... 
.................... // ハードウェア層実装ファイル
.................... // 実装は各 .c からビルドするためヘッダーでの取り込みは不要。必要なら下記のように直下参照に修正。
.................... #include "hal/timer.c"
.................... #include "timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... #INT_TIMER1 
.................... static void TIMER1_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... void set_current_sec(unsigned int32 new_sec);
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... int8 subsec;
.................... unsigned int32 time_ms = 0;
.................... unsigned int32 time_sec = 0;
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr()
.................... {
....................    set_timer0(0);  // 10msごとにリロード
*
0014E:  CLRF   FD7
00150:  CLRF   FD6
00152:  NOP   
....................    time_ms += 4;
00154:  MOVLW  04
00156:  MOVLB  1
00158:  ADDWF  x7E,F
0015A:  MOVLW  00
0015C:  ADDWFC x7F,F
0015E:  MOVLW  00
00160:  ADDWFC x80,F
00162:  MOVLW  00
00164:  ADDWFC x81,F
....................    if (time_ms >= 4294967290) {
00166:  MOVF   x81,W
00168:  SUBLW  FE
0016A:  BTFSS  FD8.0
0016C:  BRA    0174
0016E:  MOVLB  0
00170:  GOTO   01D0
00174:  MOVLB  0
00176:  XORLW  FF
00178:  BTFSS  FD8.2
0017A:  GOTO   01C4
0017E:  MOVLB  1
00180:  MOVF   x80,W
00182:  SUBLW  FE
00184:  BTFSS  FD8.0
00186:  BRA    018E
00188:  MOVLB  0
0018A:  GOTO   01D0
0018E:  MOVLB  0
00190:  XORLW  FF
00192:  BTFSS  FD8.2
00194:  GOTO   01C4
00198:  MOVLB  1
0019A:  MOVF   x7F,W
0019C:  SUBLW  FE
0019E:  BTFSS  FD8.0
001A0:  BRA    01A8
001A2:  MOVLB  0
001A4:  GOTO   01D0
001A8:  MOVLB  0
001AA:  XORLW  FF
001AC:  BTFSS  FD8.2
001AE:  GOTO   01C4
001B2:  MOVLB  1
001B4:  MOVF   x7E,W
001B6:  SUBLW  F9
001B8:  BTFSS  FD8.0
001BA:  BRA    01C2
001BC:  MOVLB  0
001BE:  GOTO   01D0
001C2:  MOVLB  0
....................       time_ms = 0;
001C4:  MOVLB  1
001C6:  CLRF   x81
001C8:  CLRF   x80
001CA:  CLRF   x7F
001CC:  CLRF   x7E
001CE:  MOVLB  0
....................    }
.................... }
.................... 
001D0:  BCF    FF2.2
001D2:  GOTO   0090
.................... #INT_TIMER1 
.................... static void TIMER1_isr()
.................... {
....................    set_timer1(0x8000); 
001D6:  MOVLW  80
001D8:  MOVWF  FCF
001DA:  CLRF   FCE
001DC:  NOP   
....................    time_sec++;
001DE:  MOVLW  01
001E0:  MOVLB  1
001E2:  ADDWF  x82,F
001E4:  BTFSC  FD8.0
001E6:  INCF   x83,F
001E8:  BTFSC  FD8.2
001EA:  INCF   x84,F
001EC:  BTFSC  FD8.2
001EE:  INCF   x85,F
001F0:  MOVLB  0
001F2:  BCF    F9E.0
001F4:  GOTO   0090
.................... }
.................... 
.................... void timer_init()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
*
023BC:  MOVLW  F8
023BE:  MOVWF  FF6
023C0:  MOVLW  01
023C2:  MOVWF  FF7
023C4:  MOVLW  00
023C6:  MOVWF  FF8
023C8:  CALL   22FE
....................    clear_interrupt(INT_TIMER1);
023CC:  BCF    F9E.0
....................    time_ms = 0;
023CE:  MOVLB  1
023D0:  CLRF   x81
023D2:  CLRF   x80
023D4:  CLRF   x7F
023D6:  CLRF   x7E
....................    time_sec = 0;
023D8:  CLRF   x85
023DA:  CLRF   x84
023DC:  CLRF   x83
023DE:  CLRF   x82
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
023E0:  MOVLW  8F
023E2:  MOVWF  FCD
023E4:  CLRF   FAA
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256|RTCC_8_BIT);
023E6:  MOVLW  D7
023E8:  MOVWF  FD5
....................    set_timer1(0); 
023EA:  CLRF   FCF
023EC:  CLRF   FCE
023EE:  NOP   
....................    enable_interrupts(INT_TIMER1);   
023F0:  BSF    F9D.0
....................    enable_interrupts(INT_TIMER0);
023F2:  BSF    FF2.5
....................    enable_interrupts(GLOBAL);
023F4:  MOVLW  C0
023F6:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
023F8:  MOVLW  0C
023FA:  MOVWF  FF6
023FC:  MOVLW  02
023FE:  MOVWF  FF7
02400:  MOVLW  00
02402:  MOVWF  FF8
02404:  MOVLB  0
02406:  CALL   22FE
0240A:  GOTO   1343A (RETURN)
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    time_sec = new_sec;
*
0FFE2:  MOVFF  1A9,185
0FFE6:  MOVFF  1A8,184
0FFEA:  MOVFF  1A7,183
0FFEE:  MOVFF  1A6,182
0FFF2:  GOTO   12DAA (RETURN)
.................... }
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return time_sec;
*
03C38:  MOVFF  182,00
03C3C:  MOVFF  183,01
03C40:  MOVFF  184,02
03C44:  MOVFF  185,03
03C48:  RETURN 0
.................... }
.................... 
.................... unsigned int16 get_current_msec()
.................... {
....................    return time_ms;
*
0E8DE:  MOVLB  1
0E8E0:  MOVF   x7E,W
0E8E2:  MOVWF  01
0E8E4:  MOVF   x7F,W
0E8E6:  MOVWF  02
0E8E8:  MOVLB  0
0E8EA:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "hal/uart.c"
.................... #include "uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
00240:  GOTO   0244
00244:  GOTO   024E
00248:  BTFSS  4B.0
0024A:  GOTO   0282
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
0024E:  MOVF   4A,W
00250:  SUBLW  1F
00252:  BTFSS  FD8.0
00254:  GOTO   0282
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
00258:  MOVF   4A,W
0025A:  INCF   4A,F
0025C:  ANDLW  1F
0025E:  CLRF   03
00260:  ADDLW  2A
00262:  MOVWF  FE9
00264:  MOVLW  00
00266:  ADDWFC 03,W
00268:  MOVWF  FEA
0026A:  MOVFF  FEA,B2E
0026E:  MOVFF  FE9,B2D
00272:  GOTO   0218
00276:  MOVFF  B2E,FEA
0027A:  MOVFF  B2D,FE9
0027E:  MOVF   01,W
00280:  MOVWF  FEF
00282:  BCF    FA6.5
00284:  GOTO   0090
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
02392:  MOVLW  88
02394:  MOVWF  FF6
02396:  MOVLW  02
02398:  MOVWF  FF7
0239A:  MOVLW  00
0239C:  MOVWF  FF8
0239E:  CALL   22FE
....................    enable_interrupts(INT_RDA3);
023A2:  BSF    F61.5
....................    enable_interrupts(GLOBAL);
023A4:  MOVLW  C0
023A6:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
023A8:  MOVLW  9A
023AA:  MOVWF  FF6
023AC:  MOVLW  02
023AE:  MOVWF  FF7
023B0:  MOVLW  00
023B2:  MOVWF  FF8
023B4:  CALL   22FE
023B8:  GOTO   13436 (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
05782:  MOVFF  1E2,03
05786:  MOVLB  1
05788:  MOVF   xE1,W
0578A:  MOVWF  FE9
0578C:  MOVFF  03,FEA
05790:  MOVFF  FEF,1E3
05794:  MOVFF  1E0,FEA
05798:  MOVFF  1DF,FE9
0579C:  CLRF   00
0579E:  CLRF   02
057A0:  MOVFF  1E3,01
057A4:  MOVLB  0
057A6:  CALL   236E
....................    *receive_signal_size = 0;
057AA:  MOVFF  1E2,03
057AE:  MOVLB  1
057B0:  MOVF   xE1,W
057B2:  MOVWF  FE9
057B4:  MOVFF  03,FEA
057B8:  CLRF   FEF
057BA:  MOVLB  0
057BC:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "hal/gpio.c"
.................... #include "cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "gpio.h"
.................... #ifndef GPIO_H
.................... #define GPIO_H
.................... 
.................... void gpio_init();
.................... void enable_negative_power();
.................... void disable_negative_power();
.................... void connect_port1();
.................... void disconnect_port1();
.................... void connect_port2();
.................... void disconnect_port2();
.................... 
.................... 
.................... // 
.................... void connect_negative_power1(int1 state);
.................... void connect_negative_power2(int1 state);
.................... #endif // GPIO_H
.................... 
.................... #include "../../lib/tool/types.h"
.................... #ifndef TYPES_H
.................... #define TYPES_H
.................... 
.................... #define bool int1
.................... 
.................... 
.................... 
.................... #endif // TYPES_H
.................... // End of types.h
.................... 
.................... 
.................... 
.................... void gpio_init() {
....................     enable_negative_power();
....................     disconnect_port1();
....................     disconnect_port2();
.................... }
.................... 
.................... void enable_negative_power() {
....................     output_low(EN_NPWR1);
.................... }
.................... 
.................... void connect_negative_power1(int1 state) {
....................     if (state) {
*
05244:  MOVLB  1
05246:  MOVF   x99,F
05248:  BTFSS  FD8.2
0524A:  BRA    5252
0524C:  MOVLB  0
0524E:  GOTO   525E
05252:  MOVLB  0
....................         output_low(EN_NPWR1);
05254:  MOVLW  17
05256:  MOVWF  F94
05258:  BCF    F8B.7
....................     } else {
0525A:  GOTO   5264
....................         output_high(EN_NPWR1);
0525E:  MOVLW  17
05260:  MOVWF  F94
05262:  BSF    F8B.7
....................     }
05264:  GOTO   13494 (RETURN)
.................... }
.................... 
.................... void connect_negative_power2(int1 state) {
....................     if (state) {
....................         output_high(EN_NPWR2);
....................     } else {
....................         output_low(EN_NPWR2);
....................     }
.................... }
.................... 
.................... void connect_port1(){
....................     output_high(CONNECT_CIGS1);
*
05234:  MOVLW  17
05236:  MOVWF  F94
05238:  BSF    F8B.3
0523A:  RETURN 0
.................... }
.................... 
.................... void disconnect_port1(){
....................     output_low(CONNECT_CIGS1);
*
09390:  MOVLW  17
09392:  MOVWF  F94
09394:  BCF    F8B.3
09396:  RETURN 0
.................... }
.................... 
.................... void connect_port2(){
....................     output_high(CONNECT_CIGS2);
*
0523C:  MOVLW  17
0523E:  MOVWF  F94
05240:  BSF    F8B.5
05242:  RETURN 0
.................... }
.................... 
.................... void disconnect_port2(){
....................     output_low(CONNECT_CIGS2);
*
09398:  MOVLW  17
0939A:  MOVWF  F94
0939C:  BCF    F8B.5
0939E:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "device_driver/ad7490_driver.c"
.................... #include "ad7490_driver.h"                          // 同じデバイスフォルダのヘッダー
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/ad7490.h"               // ADCデバイスライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... // === AD7490 Control Word ===
.................... // Bit[15]   : WRITE (常に0)
.................... // Bit[14:13]: SEQ mode (シーケンス設定)
.................... // Bit[12]   : SHADOW (0=disabled, 1=enabled)
.................... // Bit[11]   : Don't Care
.................... // Bit[10]   : PM1 (Power Management)
.................... // Bit[9]    : PM0
.................... // Bit[8]    : REFSEL (0=internal, 1=external)
.................... // Bit[7]    : Coding (0=straight binary, 1=twos complement)
.................... // Bit[6]    : Don't Care
.................... // Bit[5]    : ADD2
.................... // Bit[4]    : ADD1
.................... // Bit[3]    : ADD0
.................... // Bit[2]    : DIFF (0=single-ended, 1=differential)
.................... // Bit[1:0]  : Don't Care
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000011
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000000
.................... 
.................... 
.................... // ----------------------------
.................... // WRITE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_WRITE_DISABLE = 0,  // 書き込み無効
....................     AD7490_WRITE_ENABLE  = 1   // 書き込み有効
.................... } ad7490_write_t;
.................... 
.................... // ----------------------------
.................... // SEQ bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SEQ_DISABLE = 0,
....................     AD7490_SEQ_ENABLE  = 1
.................... } ad7490_seq_t;
.................... 
.................... // ----------------------------
.................... // CODING bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CODING_BINARY  = 0, // ストレートバイナリ
....................     AD7490_CODING_TWOS    = 1  // Two’s complement
.................... } ad7490_coding_t;
.................... 
.................... // ----------------------------
.................... // RANGE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_RANGE_2REF  = 0, // 0〜2*REFIN
....................     AD7490_RANGE_REF   = 1  // 0〜REFIN
.................... } ad7490_range_t;
.................... 
.................... // ----------------------------
.................... // WEAK/TRI bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_DOUT_TRI   = 0, // Three-state
....................     AD7490_DOUT_WEAK  = 1  // Weakly driven
.................... } ad7490_dout_t;
.................... 
.................... // ----------------------------
.................... // SHADOW bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SHADOW_DISABLE = 0,
....................     AD7490_SHADOW_ENABLE  = 1
.................... } ad7490_shadow_t;
.................... 
.................... // ----------------------------
.................... // Power Mode (PM1, PM0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_PWR_NORMAL    = 0, // 00
....................     AD7490_PWR_FULLDOWN  = 1, // 01
....................     AD7490_PWR_AUTO      = 2, // 10
....................     AD7490_PWR_SHUTDOWN  = 3  // 11
.................... } ad7490_pwr_mode_t;
.................... 
.................... // ----------------------------
.................... // Channel Address (ADD3–ADD0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CH0  = 0,
....................     AD7490_CH1  = 1,
....................     AD7490_CH2  = 2,
....................     AD7490_CH3  = 3,
....................     AD7490_CH4  = 4,
....................     AD7490_CH5  = 5,
....................     AD7490_CH6  = 6,
....................     AD7490_CH7  = 7,
....................     AD7490_CH8  = 8,
....................     AD7490_CH9  = 9,
....................     AD7490_CH10 = 10,
....................     AD7490_CH11 = 11,
....................     AD7490_CH12 = 12,
....................     AD7490_CH13 = 13,
....................     AD7490_CH14 = 14,
....................     AD7490_CH15 = 15
.................... } ad7490_channel_t;
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... #define AD7490_MULTI_CHANNEL_MAX 4
.................... 
.................... unsigned int16 ad7490_make_single_channel_cmd(unsigned int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     // Set default values for all fields
....................     cmd.fields.reserved0 = 0; 
....................     cmd.fields.reserved1 = 0; 
....................     cmd.fields.reserved2 = 0; 
....................     cmd.fields.reserved3 = 0;
....................     cmd.fields.coding = AD7490_CODING_BINARY; 
....................     cmd.fields.range = AD7490_RANGE_REF; 
....................     cmd.fields.weak_tri = AD7490_DOUT_TRI; 
....................     cmd.fields.shadow = AD7490_SHADOW_DISABLE; 
....................     cmd.fields.pm0 = (AD7490_PM_NORMAL >> 0) & 1; 
....................     cmd.fields.pm1 = (AD7490_PM_NORMAL >> 1) & 1; 
....................     cmd.fields.add0 = (channel >> 0) & 1; 
....................     cmd.fields.add1 = (channel >> 1) & 1; 
....................     cmd.fields.add2 = (channel >> 2) & 1;     
....................     cmd.fields.add3 = (channel >> 3) & 1; 
....................     cmd.fields.seq = AD7490_SEQ_DISABLE; 
....................     cmd.fields.write = AD7490_WRITE_ENABLE;
.................... 
....................     return cmd.value;
.................... }
.................... 
.................... void ad7490_set_multi_channel(ad7490_channel_t channel, unsigned int8 num_channels)
.................... {
....................     ad7490_cmd_t cmd;
....................     // Set default values for all fields
....................     cmd.fields.reserved0 = 0; 
....................     cmd.fields.reserved1 = 0; 
....................     cmd.fields.reserved2 = 0; 
....................     cmd.fields.reserved3 = 0;
....................     cmd.fields.coding = AD7490_CODING_BINARY; 
....................     cmd.fields.range = AD7490_RANGE_REF; 
....................     cmd.fields.weak_tri = AD7490_DOUT_TRI; 
....................     cmd.fields.shadow = AD7490_SHADOW_DISABLE; 
....................     cmd.fields.pm0 = (AD7490_PM_NORMAL >> 0) & 1; 
....................     cmd.fields.pm1 = (AD7490_PM_NORMAL >> 1) & 1; 
....................     cmd.fields.add0 = (channel >> 0) & 1; 
....................     cmd.fields.add1 = (channel >> 1) & 1; 
....................     cmd.fields.add2 = (channel >> 2) & 1;     
....................     cmd.fields.add3 = (channel >> 3) & 1; 
....................     cmd.fields.seq = AD7490_SEQ_ENABLE; 
....................     cmd.fields.write = AD7490_WRITE_ENABLE;
.................... }
.................... 
.................... void ad7490_init()
.................... {
....................     fprintf(PC, "AD7490 Initialize\r\n");
*
025E0:  MOVLW  A6
025E2:  MOVWF  FF6
025E4:  MOVLW  02
025E6:  MOVWF  FF7
025E8:  MOVLW  00
025EA:  MOVWF  FF8
025EC:  CALL   22FE
....................     output_high(ADC_CS); 
025F0:  MOVLW  FD
025F2:  MOVWF  F93
025F4:  BSF    F8A.1
....................     delay_ms(10); 
025F6:  MOVLW  0A
025F8:  MOVLB  B
025FA:  MOVWF  x03
025FC:  MOVLB  0
025FE:  CALL   22D0
....................     unsigned int16 readdata = ad7490_read(ADC_CIGS1_CURR);
02602:  MOVLW  01
02604:  MOVLB  9
02606:  MOVWF  xEE
02608:  MOVLB  0
0260A:  CALL   24E4
0260E:  MOVFF  02,19A
02612:  MOVFF  01,199
....................     delay_ms(1);
02616:  MOVLW  01
02618:  MOVLB  B
0261A:  MOVWF  x03
0261C:  MOVLB  0
0261E:  CALL   22D0
....................     fprintf(PC, "\t%04LX\r\n", readdata);
02622:  MOVLW  09
02624:  BTFSS  FA6.6
02626:  GOTO   2624
0262A:  MOVLB  E
0262C:  MOVWF  xF9
0262E:  MOVFF  19A,9E8
02632:  MOVLW  37
02634:  MOVLB  9
02636:  MOVWF  xE9
02638:  MOVLB  0
0263A:  CALL   2564
0263E:  MOVFF  199,9E8
02642:  MOVLW  37
02644:  MOVLB  9
02646:  MOVWF  xE9
02648:  MOVLB  0
0264A:  CALL   2564
0264E:  MOVLW  0D
02650:  BTFSS  FA6.6
02652:  GOTO   2650
02656:  MOVLB  E
02658:  MOVWF  xF9
0265A:  MOVLW  0A
0265C:  MOVLB  0
0265E:  BTFSS  FA6.6
02660:  GOTO   265E
02664:  MOVLB  E
02666:  MOVWF  xF9
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
02668:  MOVLB  1
0266A:  INCFSZ x99,W
0266C:  BRA    2672
0266E:  BRA    2678
02670:  MOVLB  0
02672:  MOVLB  0
02674:  GOTO   2690
02678:  MOVLB  0
0267A:  MOVLB  1
0267C:  INCFSZ x9A,W
0267E:  BRA    2684
02680:  BRA    268A
02682:  MOVLB  0
02684:  MOVLB  0
02686:  GOTO   2690
0268A:  MOVLB  0
0268C:  GOTO   26B0
02690:  MOVLB  1
02692:  MOVF   x99,F
02694:  BTFSC  FD8.2
02696:  BRA    269E
02698:  MOVLB  0
0269A:  GOTO   26C4
0269E:  MOVLB  0
026A0:  MOVLB  1
026A2:  MOVF   x9A,F
026A4:  BTFSC  FD8.2
026A6:  BRA    26AE
026A8:  MOVLB  0
026AA:  GOTO   26C4
026AE:  MOVLB  0
....................         fprintf(PC, "\tConnect error!\r\n");
026B0:  MOVLW  BA
026B2:  MOVWF  FF6
026B4:  MOVLW  02
026B6:  MOVWF  FF7
026B8:  MOVLW  00
026BA:  MOVWF  FF8
026BC:  CALL   22FE
....................     } else {
026C0:  GOTO   26D4
....................         fprintf(PC, "\tConnect successful\r\n");
026C4:  MOVLW  CC
026C6:  MOVWF  FF6
026C8:  MOVLW  02
026CA:  MOVWF  FF7
026CC:  MOVLW  00
026CE:  MOVWF  FF8
026D0:  CALL   22FE
....................     }
....................     fprintf(PC, "\tComplete\r\n");
026D4:  MOVLW  E2
026D6:  MOVWF  FF6
026D8:  MOVLW  02
026DA:  MOVWF  FF7
026DC:  MOVLW  00
026DE:  MOVWF  FF8
026E0:  CALL   22FE
026E4:  GOTO   1343E (RETURN)
.................... }
.................... 
.................... unsigned int16 ad7490_read(int8 channel)
*
024E4:  MOVFF  9EE,9F5
024E8:  GOTO   240E
024EC:  MOVFF  02,9F0
024F0:  MOVFF  01,9EF
.................... {   
....................     unsigned int16 cmd = ad7490_make_cmd(channel);
....................     // fprintf(PC, "\t[ADC] Command: %04LX\r\n", cmd);
....................     output_low(ADC_CS); 
024F4:  MOVLW  FD
024F6:  MOVWF  F93
024F8:  BCF    F8A.1
....................     delay_us(1); 
024FA:  BRA    24FC
024FC:  BRA    24FE
....................     spi_xfer(ADC_STREAM, cmd); 
024FE:  MOVFF  9F0,9F6
02502:  MOVFF  9EF,9F5
02506:  MOVLW  10
02508:  MOVLB  9
0250A:  MOVWF  xF7
0250C:  MOVLW  01
0250E:  MOVWF  xF8
02510:  MOVLB  0
02512:  CALL   247E
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd);
....................     #endif
....................     output_high(ADC_CS); 
02516:  MOVLW  FD
02518:  MOVWF  F93
0251A:  BSF    F8A.1
....................     delay_us(1);
0251C:  BRA    251E
0251E:  BRA    2520
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
02520:  MOVLW  FD
02522:  MOVWF  F93
02524:  BCF    F8A.1
....................     delay_us(1);
02526:  BRA    2528
02528:  BRA    252A
....................     unsigned int16 ans = spi_xfer(ADC_STREAM, 0x0000);
0252A:  MOVLB  9
0252C:  CLRF   xF6
0252E:  CLRF   xF5
02530:  MOVLW  10
02532:  MOVWF  xF7
02534:  MOVLW  01
02536:  MOVWF  xF8
02538:  MOVLB  0
0253A:  CALL   247E
0253E:  MOVFF  02,9F2
02542:  MOVFF  01,9F1
....................     output_high(ADC_CS); 
02546:  MOVLW  FD
02548:  MOVWF  F93
0254A:  BSF    F8A.1
....................     unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
0254C:  MOVLB  9
0254E:  MOVF   xF1,W
02550:  MOVWF  xF3
02552:  MOVF   xF2,W
02554:  ANDLW  0F
02556:  MOVWF  xF4
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata);
....................     #endif
....................     return readdata;
02558:  MOVF   xF3,W
0255A:  MOVWF  01
0255C:  MOVF   xF4,W
0255E:  MOVWF  02
02560:  MOVLB  0
02562:  RETURN 0
.................... }
.................... 
.................... void ad7490_read_2port(unsigned int8 channel1, unsigned int8 channel2, unsigned int16 *data1, unsigned int16 *data2)
.................... {   
....................     unsigned int16 cmd1 = ad7490_make_cmd(channel1);
....................     unsigned int16 cmd2 = ad7490_make_cmd(channel2);
....................     // fprintf(PC, "\t[ADC] Command: %04LX\r\n", cmd);
....................     output_low(ADC_CS); 
....................     delay_us(1); 
....................     spi_xfer(ADC_STREAM, cmd1); 
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd1);
....................     #endif
....................     output_high(ADC_CS); 
....................     delay_us(1);
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
....................     delay_us(1);
....................     unsigned int16 ans1 = spi_xfer(ADC_STREAM, cmd2);
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd2);
....................     #endif
....................     output_high(ADC_CS); 
....................     delay_us(1);
....................     unsigned int16 ans2 = spi_xfer(ADC_STREAM, 0x0000);
....................     output_high(ADC_CS); 
....................     unsigned int16 readdata1 = ans1 & 0x0FFF; //Conver LSB <--> MSB
....................     unsigned int16 readdata2 = ans2 & 0x0FFF; //Conver LSB <--> MSB
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata1);
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata2);
....................     #endif
....................     *data1 = readdata1;
....................     *data2 = readdata2;
.................... }
.................... 
.................... 
.................... // End of file
.................... 
.................... #include "device_driver/mcp4901_driver.c"
.................... #include "mcp4901_driver.h"                        
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/cigs_config.h"             
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mcp4901.h"       
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // #define MCP4901_DEBUG
.................... 
.................... void mcp4901_init()
.................... {
....................     fprintf(PC, "MCP4901 Initialize\r\n");
*
02910:  MOVLW  EE
02912:  MOVWF  FF6
02914:  MOVLW  02
02916:  MOVWF  FF7
02918:  MOVLW  00
0291A:  MOVWF  FF8
0291C:  CALL   22FE
....................     output_high(DAC1_CS); 
02920:  MOVLW  3F
02922:  MOVWF  F95
02924:  BSF    F8C.7
....................     output_high(DAC2_CS); 
02926:  MOVLW  3F
02928:  MOVWF  F95
0292A:  BSF    F8C.6
....................     delay_ms(10); 
0292C:  MOVLW  0A
0292E:  MOVLB  B
02930:  MOVWF  x03
02932:  MOVLB  0
02934:  CALL   22D0
....................     mcp4901_1_write(10); 
02938:  MOVLB  9
0293A:  CLRF   xDD
0293C:  MOVLW  0A
0293E:  MOVWF  xDC
02940:  MOVLB  0
02942:  CALL   2894
....................     mcp4901_2_write(10); 
02946:  MOVLB  9
02948:  CLRF   xDD
0294A:  MOVLW  0A
0294C:  MOVWF  xDC
0294E:  MOVLB  0
02950:  CALL   28D2
....................     unsigned int16 readdata;
....................     readdata = ad7490_read(ADC_CIGS1_CURR); 
02954:  MOVLW  01
02956:  MOVLB  9
02958:  MOVWF  xEE
0295A:  MOVLB  0
0295C:  CALL   24E4
02960:  MOVFF  02,19A
02964:  MOVFF  01,199
....................     fprintf(PC, "%04LX\r\n", readdata);
02968:  MOVFF  19A,9E8
0296C:  MOVLW  37
0296E:  MOVLB  9
02970:  MOVWF  xE9
02972:  MOVLB  0
02974:  CALL   2564
02978:  MOVFF  199,9E8
0297C:  MOVLW  37
0297E:  MOVLB  9
02980:  MOVWF  xE9
02982:  MOVLB  0
02984:  CALL   2564
02988:  MOVLW  0D
0298A:  BTFSS  FA6.6
0298C:  GOTO   298A
02990:  MOVLB  E
02992:  MOVWF  xF9
02994:  MOVLW  0A
02996:  MOVLB  0
02998:  BTFSS  FA6.6
0299A:  GOTO   2998
0299E:  MOVLB  E
029A0:  MOVWF  xF9
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
029A2:  MOVLB  1
029A4:  INCFSZ x99,W
029A6:  BRA    29AC
029A8:  BRA    29B2
029AA:  MOVLB  0
029AC:  MOVLB  0
029AE:  GOTO   29CA
029B2:  MOVLB  0
029B4:  MOVLB  1
029B6:  INCFSZ x9A,W
029B8:  BRA    29BE
029BA:  BRA    29C4
029BC:  MOVLB  0
029BE:  MOVLB  0
029C0:  GOTO   29CA
029C4:  MOVLB  0
029C6:  GOTO   29EA
029CA:  MOVLB  1
029CC:  MOVF   x99,F
029CE:  BTFSC  FD8.2
029D0:  BRA    29D8
029D2:  MOVLB  0
029D4:  GOTO   29FE
029D8:  MOVLB  0
029DA:  MOVLB  1
029DC:  MOVF   x9A,F
029DE:  BTFSC  FD8.2
029E0:  BRA    29E8
029E2:  MOVLB  0
029E4:  GOTO   29FE
029E8:  MOVLB  0
....................         fprintf(PC, "\t[DAC Port 1] Connect error!\r\n");
029EA:  MOVLW  04
029EC:  MOVWF  FF6
029EE:  MOVLW  03
029F0:  MOVWF  FF7
029F2:  MOVLW  00
029F4:  MOVWF  FF8
029F6:  CALL   22FE
....................     } else {
029FA:  GOTO   2A0E
....................         fprintf(PC, "\t[DAC Port 1] Connect successful\r\n");
029FE:  MOVLW  24
02A00:  MOVWF  FF6
02A02:  MOVLW  03
02A04:  MOVWF  FF7
02A06:  MOVLW  00
02A08:  MOVWF  FF8
02A0A:  CALL   22FE
....................     }
....................     fprintf(PC, "%04LX\r\n", readdata);
02A0E:  MOVFF  19A,9E8
02A12:  MOVLW  37
02A14:  MOVLB  9
02A16:  MOVWF  xE9
02A18:  MOVLB  0
02A1A:  CALL   2564
02A1E:  MOVFF  199,9E8
02A22:  MOVLW  37
02A24:  MOVLB  9
02A26:  MOVWF  xE9
02A28:  MOVLB  0
02A2A:  CALL   2564
02A2E:  MOVLW  0D
02A30:  BTFSS  FA6.6
02A32:  GOTO   2A30
02A36:  MOVLB  E
02A38:  MOVWF  xF9
02A3A:  MOVLW  0A
02A3C:  MOVLB  0
02A3E:  BTFSS  FA6.6
02A40:  GOTO   2A3E
02A44:  MOVLB  E
02A46:  MOVWF  xF9
....................     readdata = ad7490_read(ADC_CIGS2_CURR); 
02A48:  MOVLW  05
02A4A:  MOVLB  9
02A4C:  MOVWF  xEE
02A4E:  MOVLB  0
02A50:  CALL   24E4
02A54:  MOVFF  02,19A
02A58:  MOVFF  01,199
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
02A5C:  MOVLB  1
02A5E:  INCFSZ x99,W
02A60:  BRA    2A66
02A62:  BRA    2A6C
02A64:  MOVLB  0
02A66:  MOVLB  0
02A68:  GOTO   2A84
02A6C:  MOVLB  0
02A6E:  MOVLB  1
02A70:  INCFSZ x9A,W
02A72:  BRA    2A78
02A74:  BRA    2A7E
02A76:  MOVLB  0
02A78:  MOVLB  0
02A7A:  GOTO   2A84
02A7E:  MOVLB  0
02A80:  GOTO   2AA4
02A84:  MOVLB  1
02A86:  MOVF   x99,F
02A88:  BTFSC  FD8.2
02A8A:  BRA    2A92
02A8C:  MOVLB  0
02A8E:  GOTO   2AB8
02A92:  MOVLB  0
02A94:  MOVLB  1
02A96:  MOVF   x9A,F
02A98:  BTFSC  FD8.2
02A9A:  BRA    2AA2
02A9C:  MOVLB  0
02A9E:  GOTO   2AB8
02AA2:  MOVLB  0
....................         fprintf(PC, "\t[DAC Port 2] Connect error!\r\n");
02AA4:  MOVLW  48
02AA6:  MOVWF  FF6
02AA8:  MOVLW  03
02AAA:  MOVWF  FF7
02AAC:  MOVLW  00
02AAE:  MOVWF  FF8
02AB0:  CALL   22FE
....................     } else {
02AB4:  GOTO   2AC8
....................         fprintf(PC, "\t[DAC Port 2] Connect successful\r\n");
02AB8:  MOVLW  68
02ABA:  MOVWF  FF6
02ABC:  MOVLW  03
02ABE:  MOVWF  FF7
02AC0:  MOVLW  00
02AC2:  MOVWF  FF8
02AC4:  CALL   22FE
....................     }
....................     fprintf(PC, "\tComplete\r\n");
02AC8:  MOVLW  8C
02ACA:  MOVWF  FF6
02ACC:  MOVLW  03
02ACE:  MOVWF  FF7
02AD0:  MOVLW  00
02AD2:  MOVWF  FF8
02AD4:  CALL   22FE
02AD8:  GOTO   13442 (RETURN)
.................... }
.................... 
.................... 
.................... void mcp4901_1_write(unsigned int16 value)
*
02894:  MOVFF  9DD,9E1
02898:  MOVFF  9DC,9E0
0289C:  CALL   26E8
028A0:  MOVFF  02,9DF
028A4:  MOVFF  01,9DE
.................... {
....................     unsigned int16 cmd = mcp4901_make_cmd(value);
....................     #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................     #endif
....................     output_low(DAC1_CS); 
028A8:  MOVLW  3F
028AA:  MOVWF  F95
028AC:  BCF    F8C.7
....................     delay_us(1); 
028AE:  BRA    28B0
028B0:  BRA    28B2
....................     spi_xfer(DAC_STREAM, cmd); 
028B2:  MOVFF  9DF,9E1
028B6:  MOVFF  9DE,9E0
028BA:  MOVLW  10
028BC:  MOVLB  9
028BE:  MOVWF  xE2
028C0:  MOVLW  01
028C2:  MOVWF  xE3
028C4:  MOVLB  0
028C6:  CALL   283C
....................     output_high(DAC1_CS); 
028CA:  MOVLW  3F
028CC:  MOVWF  F95
028CE:  BSF    F8C.7
028D0:  RETURN 0
.................... }
.................... 
.................... void mcp4901_2_write(unsigned int16 value)
028D2:  MOVFF  9DD,9E1
028D6:  MOVFF  9DC,9E0
028DA:  CALL   26E8
028DE:  MOVFF  02,9DF
028E2:  MOVFF  01,9DE
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC2_CS); 
028E6:  MOVLW  3F
028E8:  MOVWF  F95
028EA:  BCF    F8C.6
....................    delay_us(1); 
028EC:  BRA    28EE
028EE:  BRA    28F0
....................    spi_xfer(DAC_STREAM, cmd); 
028F0:  MOVFF  9DF,9E1
028F4:  MOVFF  9DE,9E0
028F8:  MOVLW  10
028FA:  MOVLB  9
028FC:  MOVWF  xE2
028FE:  MOVLW  01
02900:  MOVWF  xE3
02902:  MOVLB  0
02904:  CALL   283C
....................    output_high(DAC2_CS); 
02908:  MOVLW  3F
0290A:  MOVWF  F95
0290C:  BSF    F8C.6
0290E:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... 
.................... // ライブラリ実装ファイル
.................... #include "../lib/device/ad7490.c"
.................... // #include "ad7490.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 ad7490_readdata(unsigned int16 channel)
.................... {
....................     spi_xfer(ADC_STREAM, channel); // Dummy transfer to start communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC, "\t[ADC] <<< %04LX\r\n", channel);
....................     #endif
....................     unsigned int16 ans = spi_xfer(ADC_STREAM);
....................     return ans & 0x0FFF; //Conver LSB <--> MSB
.................... }
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     cmd.fields.reserved0 = 0; // Reserved bits
*
0240E:  MOVLB  9
02410:  BCF    xF6.0
....................     cmd.fields.reserved1 = 0; // Reserved bits
02412:  BCF    xF6.1
....................     cmd.fields.reserved2 = 0; // Reserved bits
02414:  BCF    xF6.2
....................     cmd.fields.reserved3 = 0;
02416:  BCF    xF6.3
....................     cmd.fields.coding = 1; // Two's complement
02418:  BSF    xF6.4
....................     cmd.fields.range = 0; // Normal mode
0241A:  BCF    xF6.5
....................     cmd.fields.weak_tri = 0; // Strong trigger
0241C:  BCF    xF6.6
....................     cmd.fields.shadow = 0; // Direct access
0241E:  BCF    xF6.7
....................     cmd.fields.pm0 = AD7490_PM_NORMAL & 0b00000001; // Power mode bits
02420:  BSF    xF7.0
....................     cmd.fields.pm1 = (AD7490_PM_NORMAL >> 1) & 0b00000001; // Power mode bits
02422:  BSF    xF7.1
....................     cmd.fields.add0 = (channel >> 0) & 0b00000001; // Channel address bits
02424:  MOVF   xF5,W
02426:  ANDLW  01
02428:  MOVWF  01
0242A:  BCF    xF7.2
0242C:  BTFSC  01.0
0242E:  BSF    xF7.2
....................     cmd.fields.add1 = (channel >> 1) & 0b00000001; // Channel address bits
02430:  BCF    FD8.0
02432:  RRCF   xF5,W
02434:  ANDLW  01
02436:  MOVWF  01
02438:  BCF    xF7.3
0243A:  BTFSC  01.0
0243C:  BSF    xF7.3
....................     cmd.fields.add2 = (channel >> 2) & 0b00000001; // Channel address bits
0243E:  RRCF   xF5,W
02440:  MOVWF  00
02442:  RRCF   00,F
02444:  MOVLW  3F
02446:  ANDWF  00,F
02448:  MOVF   00,W
0244A:  ANDLW  01
0244C:  MOVWF  01
0244E:  BCF    xF7.4
02450:  BTFSC  01.0
02452:  BSF    xF7.4
....................     cmd.fields.add3 = (channel >> 3) & 0b00000001; // Channel address bits
02454:  RRCF   xF5,W
02456:  MOVWF  00
02458:  RRCF   00,F
0245A:  RRCF   00,F
0245C:  MOVLW  1F
0245E:  ANDWF  00,F
02460:  MOVF   00,W
02462:  ANDLW  01
02464:  MOVWF  01
02466:  BCF    xF7.5
02468:  BTFSC  01.0
0246A:  BSF    xF7.5
....................     cmd.fields.seq = 0; // Random mode
0246C:  BCF    xF7.6
....................     cmd.fields.write = 1; // Read operation
0246E:  BSF    xF7.7
....................     return cmd.value;
02470:  MOVF   xF6,W
02472:  MOVWF  01
02474:  MOVF   xF7,W
02476:  MOVWF  02
02478:  MOVLB  0
0247A:  GOTO   24EC (RETURN)
.................... }
.................... 
.................... #include "../lib/device/mcp4901.c"
.................... // #include "mcp4901.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value)
.................... {
....................    mcp4901_cmd_t cmd;
....................    cmd.fields.startbit = 0; // Start bit
*
026E8:  MOVLB  9
026EA:  BCF    xE3.7
....................    cmd.fields.buffer = 1; // Buffer used
026EC:  BSF    xE3.6
....................    cmd.fields.gain = 1; // Gain 1x
026EE:  BSF    xE3.5
....................    cmd.fields.shutdown = 1; // Normal operation
026F0:  BSF    xE3.4
....................    cmd.fields.data7 = (value >> 7) & 0x01;
026F2:  RRCF   xE1,W
026F4:  MOVWF  xE5
026F6:  RRCF   xE0,W
026F8:  MOVWF  xE4
026FA:  RRCF   xE5,F
026FC:  RRCF   xE4,F
026FE:  RRCF   xE5,F
02700:  RRCF   xE4,F
02702:  RRCF   xE5,F
02704:  RRCF   xE4,F
02706:  RRCF   xE5,F
02708:  RRCF   xE4,F
0270A:  RRCF   xE5,F
0270C:  RRCF   xE4,F
0270E:  RRCF   xE5,F
02710:  RRCF   xE4,F
02712:  MOVLW  01
02714:  ANDWF  xE5,F
02716:  MOVF   xE4,W
02718:  ANDLW  01
0271A:  MOVWF  00
0271C:  CLRF   03
0271E:  MOVF   00,W
02720:  MOVWF  01
02722:  BCF    xE3.3
02724:  BTFSC  01.0
02726:  BSF    xE3.3
....................    cmd.fields.data6 = (value >> 6) & 0x01;
02728:  RRCF   xE1,W
0272A:  MOVWF  xE5
0272C:  RRCF   xE0,W
0272E:  MOVWF  xE4
02730:  RRCF   xE5,F
02732:  RRCF   xE4,F
02734:  RRCF   xE5,F
02736:  RRCF   xE4,F
02738:  RRCF   xE5,F
0273A:  RRCF   xE4,F
0273C:  RRCF   xE5,F
0273E:  RRCF   xE4,F
02740:  RRCF   xE5,F
02742:  RRCF   xE4,F
02744:  MOVLW  03
02746:  ANDWF  xE5,F
02748:  MOVF   xE4,W
0274A:  ANDLW  01
0274C:  MOVWF  00
0274E:  CLRF   03
02750:  MOVF   00,W
02752:  MOVWF  01
02754:  BCF    xE3.2
02756:  BTFSC  01.0
02758:  BSF    xE3.2
....................    cmd.fields.data5 = (value >> 5) & 0x01;
0275A:  RRCF   xE1,W
0275C:  MOVWF  xE5
0275E:  RRCF   xE0,W
02760:  MOVWF  xE4
02762:  RRCF   xE5,F
02764:  RRCF   xE4,F
02766:  RRCF   xE5,F
02768:  RRCF   xE4,F
0276A:  RRCF   xE5,F
0276C:  RRCF   xE4,F
0276E:  RRCF   xE5,F
02770:  RRCF   xE4,F
02772:  MOVLW  07
02774:  ANDWF  xE5,F
02776:  MOVF   xE4,W
02778:  ANDLW  01
0277A:  MOVWF  00
0277C:  CLRF   03
0277E:  MOVF   00,W
02780:  MOVWF  01
02782:  BCF    xE3.1
02784:  BTFSC  01.0
02786:  BSF    xE3.1
....................    cmd.fields.data4 = (value >> 4) & 0x01;
02788:  RRCF   xE1,W
0278A:  MOVWF  xE5
0278C:  RRCF   xE0,W
0278E:  MOVWF  xE4
02790:  RRCF   xE5,F
02792:  RRCF   xE4,F
02794:  RRCF   xE5,F
02796:  RRCF   xE4,F
02798:  RRCF   xE5,F
0279A:  RRCF   xE4,F
0279C:  MOVLW  0F
0279E:  ANDWF  xE5,F
027A0:  MOVF   xE4,W
027A2:  ANDLW  01
027A4:  MOVWF  00
027A6:  CLRF   03
027A8:  MOVF   00,W
027AA:  MOVWF  01
027AC:  BCF    xE3.0
027AE:  BTFSC  01.0
027B0:  BSF    xE3.0
....................    cmd.fields.data3 = (value >> 3) & 0x01;
027B2:  RRCF   xE1,W
027B4:  MOVWF  xE5
027B6:  RRCF   xE0,W
027B8:  MOVWF  xE4
027BA:  RRCF   xE5,F
027BC:  RRCF   xE4,F
027BE:  RRCF   xE5,F
027C0:  RRCF   xE4,F
027C2:  MOVLW  1F
027C4:  ANDWF  xE5,F
027C6:  MOVF   xE4,W
027C8:  ANDLW  01
027CA:  MOVWF  00
027CC:  CLRF   03
027CE:  MOVF   00,W
027D0:  MOVWF  01
027D2:  BCF    xE2.7
027D4:  BTFSC  01.0
027D6:  BSF    xE2.7
....................    cmd.fields.data2 = (value >> 2) & 0x01;
027D8:  RRCF   xE1,W
027DA:  MOVWF  xE5
027DC:  RRCF   xE0,W
027DE:  MOVWF  xE4
027E0:  RRCF   xE5,F
027E2:  RRCF   xE4,F
027E4:  MOVLW  3F
027E6:  ANDWF  xE5,F
027E8:  MOVF   xE4,W
027EA:  ANDLW  01
027EC:  MOVWF  00
027EE:  CLRF   03
027F0:  MOVF   00,W
027F2:  MOVWF  01
027F4:  BCF    xE2.6
027F6:  BTFSC  01.0
027F8:  BSF    xE2.6
....................    cmd.fields.data1 = (value >> 1) & 0x01;
027FA:  BCF    FD8.0
027FC:  RRCF   xE1,W
027FE:  MOVWF  xE5
02800:  RRCF   xE0,W
02802:  MOVWF  xE4
02804:  MOVF   xE4,W
02806:  ANDLW  01
02808:  MOVWF  00
0280A:  CLRF   03
0280C:  MOVF   00,W
0280E:  MOVWF  01
02810:  BCF    xE2.5
02812:  BTFSC  01.0
02814:  BSF    xE2.5
....................    cmd.fields.data0 = value & 0x01; // LSB of the data
02816:  MOVF   xE0,W
02818:  ANDLW  01
0281A:  MOVWF  00
0281C:  CLRF   03
0281E:  MOVF   00,W
02820:  MOVWF  01
02822:  BCF    xE2.4
02824:  BTFSC  01.0
02826:  BSF    xE2.4
....................    cmd.fields.reserved = 0; // Reserved bits
02828:  BCF    xE2.3
....................    cmd.fields.reserved2 = 0; // Reserved bits
0282A:  BCF    xE2.2
....................    cmd.fields.reserved3 = 0; // Reserved bits
0282C:  BCF    xE2.1
....................    cmd.fields.reserved4 = 0; // Reserved bits
0282E:  BCF    xE2.0
.................... 
....................    return cmd.value;
02830:  MOVF   xE2,W
02832:  MOVWF  01
02834:  MOVF   xE3,W
02836:  MOVWF  02
02838:  MOVLB  0
0283A:  RETURN 0
.................... }
.................... 
.................... #include "../lib/device/mt25q.c"
.................... #include "mt25q.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, unsigned int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
03C4A:  MOVLB  B
03C4C:  MOVF   x03,W
03C4E:  XORLW  00
03C50:  MOVLB  0
03C52:  BTFSC  FD8.2
03C54:  GOTO   3C64
03C58:  XORLW  01
03C5A:  BTFSC  FD8.2
03C5C:  GOTO   3CCC
03C60:  GOTO   3D34
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03C64:  MOVLB  B
03C66:  CLRF   x0C
03C68:  CLRF   x0B
03C6A:  MOVLB  0
03C6C:  MOVLB  B
03C6E:  MOVF   x0C,W
03C70:  SUBWF  x0A,W
03C72:  BTFSC  FD8.0
03C74:  BRA    3C7C
03C76:  MOVLB  0
03C78:  GOTO   3CC8
03C7C:  MOVLB  0
03C7E:  BTFSS  FD8.2
03C80:  GOTO   3C96
03C84:  MOVLB  B
03C86:  MOVF   x09,W
03C88:  SUBWF  x0B,W
03C8A:  BTFSS  FD8.0
03C8C:  BRA    3C94
03C8E:  MOVLB  0
03C90:  GOTO   3CC8
03C94:  MOVLB  0
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
03C96:  MOVLB  B
03C98:  MOVF   x07,W
03C9A:  ADDWF  x0B,W
03C9C:  MOVWF  FE9
03C9E:  MOVF   x08,W
03CA0:  ADDWFC x0C,W
03CA2:  MOVWF  FEA
03CA4:  MOVFF  FEF,B0F
03CA8:  MOVFF  B0F,B25
03CAC:  MOVLW  08
03CAE:  MOVWF  x26
03CB0:  MOVLW  01
03CB2:  MOVWF  x27
03CB4:  MOVLB  0
03CB6:  CALL   2B30
03CBA:  MOVLB  B
03CBC:  INCF   x0B,F
03CBE:  BTFSC  FD8.2
03CC0:  INCF   x0C,F
03CC2:  MOVLB  0
03CC4:  GOTO   3C6C
....................          break;
03CC8:  GOTO   3D38
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03CCC:  MOVLB  B
03CCE:  CLRF   x0E
03CD0:  CLRF   x0D
03CD2:  MOVLB  0
03CD4:  MOVLB  B
03CD6:  MOVF   x0E,W
03CD8:  SUBWF  x0A,W
03CDA:  BTFSC  FD8.0
03CDC:  BRA    3CE4
03CDE:  MOVLB  0
03CE0:  GOTO   3D30
03CE4:  MOVLB  0
03CE6:  BTFSS  FD8.2
03CE8:  GOTO   3CFE
03CEC:  MOVLB  B
03CEE:  MOVF   x09,W
03CF0:  SUBWF  x0D,W
03CF2:  BTFSS  FD8.0
03CF4:  BRA    3CFC
03CF6:  MOVLB  0
03CF8:  GOTO   3D30
03CFC:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
03CFE:  MOVLB  B
03D00:  MOVF   x07,W
03D02:  ADDWF  x0D,W
03D04:  MOVWF  FE9
03D06:  MOVF   x08,W
03D08:  ADDWFC x0E,W
03D0A:  MOVWF  FEA
03D0C:  MOVFF  FEF,B0F
03D10:  MOVFF  B0F,B25
03D14:  MOVLW  08
03D16:  MOVWF  x26
03D18:  MOVLW  01
03D1A:  MOVWF  x27
03D1C:  MOVLB  0
03D1E:  CALL   2B90
03D22:  MOVLB  B
03D24:  INCF   x0D,F
03D26:  BTFSC  FD8.2
03D28:  INCF   x0E,F
03D2A:  MOVLB  0
03D2C:  GOTO   3CD4
....................          break;
03D30:  GOTO   3D38
....................          
....................       default:
....................          break;
03D34:  GOTO   3D38
....................    }
....................    return;
03D38:  RETURN 0
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, unsigned int8 *write_data, unsigned int16 write_amount, unsigned int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
02BF0:  MOVLB  B
02BF2:  MOVF   x09,W
02BF4:  XORLW  00
02BF6:  MOVLB  0
02BF8:  BTFSC  FD8.2
02BFA:  GOTO   2C0A
02BFE:  XORLW  01
02C00:  BTFSC  FD8.2
02C02:  GOTO   2D14
02C06:  GOTO   2E1E
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02C0A:  MOVLB  B
02C0C:  CLRF   x18
02C0E:  CLRF   x17
02C10:  MOVLB  0
02C12:  MOVLB  B
02C14:  MOVF   x18,W
02C16:  SUBWF  x10,W
02C18:  BTFSC  FD8.0
02C1A:  BRA    2C22
02C1C:  MOVLB  0
02C1E:  GOTO   2C6E
02C22:  MOVLB  0
02C24:  BTFSS  FD8.2
02C26:  GOTO   2C3C
02C2A:  MOVLB  B
02C2C:  MOVF   x0F,W
02C2E:  SUBWF  x17,W
02C30:  BTFSS  FD8.0
02C32:  BRA    2C3A
02C34:  MOVLB  0
02C36:  GOTO   2C6E
02C3A:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
02C3C:  MOVLB  B
02C3E:  MOVF   x0D,W
02C40:  ADDWF  x17,W
02C42:  MOVWF  FE9
02C44:  MOVF   x0E,W
02C46:  ADDWFC x18,W
02C48:  MOVWF  FEA
02C4A:  MOVFF  FEF,B23
02C4E:  MOVFF  B23,B25
02C52:  MOVLW  08
02C54:  MOVWF  x26
02C56:  MOVLW  01
02C58:  MOVWF  x27
02C5A:  MOVLB  0
02C5C:  CALL   2B30
02C60:  MOVLB  B
02C62:  INCF   x17,F
02C64:  BTFSC  FD8.2
02C66:  INCF   x18,F
02C68:  MOVLB  0
02C6A:  GOTO   2C12
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
02C6E:  MOVLB  B
02C70:  CLRF   x1C
02C72:  CLRF   x1B
02C74:  CLRF   x1A
02C76:  CLRF   x19
02C78:  MOVLB  0
02C7A:  MOVLB  B
02C7C:  MOVF   x1C,W
02C7E:  SUBWF  x16,W
02C80:  BTFSC  FD8.0
02C82:  BRA    2C8A
02C84:  MOVLB  0
02C86:  GOTO   2D10
02C8A:  MOVLB  0
02C8C:  BTFSS  FD8.2
02C8E:  GOTO   2CD4
02C92:  MOVLB  B
02C94:  MOVF   x1B,W
02C96:  SUBWF  x15,W
02C98:  BTFSC  FD8.0
02C9A:  BRA    2CA2
02C9C:  MOVLB  0
02C9E:  GOTO   2D10
02CA2:  MOVLB  0
02CA4:  BTFSS  FD8.2
02CA6:  GOTO   2CD4
02CAA:  MOVLB  B
02CAC:  MOVF   x1A,W
02CAE:  SUBWF  x14,W
02CB0:  BTFSC  FD8.0
02CB2:  BRA    2CBA
02CB4:  MOVLB  0
02CB6:  GOTO   2D10
02CBA:  MOVLB  0
02CBC:  BTFSS  FD8.2
02CBE:  GOTO   2CD4
02CC2:  MOVLB  B
02CC4:  MOVF   x13,W
02CC6:  SUBWF  x19,W
02CC8:  BTFSS  FD8.0
02CCA:  BRA    2CD2
02CCC:  MOVLB  0
02CCE:  GOTO   2D10
02CD2:  MOVLB  0
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
02CD4:  MOVLB  B
02CD6:  MOVF   x11,W
02CD8:  ADDWF  x19,W
02CDA:  MOVWF  FE9
02CDC:  MOVF   x12,W
02CDE:  ADDWFC x1A,W
02CE0:  MOVWF  FEA
02CE2:  MOVLW  02
02CE4:  MOVWF  x25
02CE6:  MOVLW  08
02CE8:  MOVWF  x26
02CEA:  MOVLW  01
02CEC:  MOVWF  x27
02CEE:  MOVLB  0
02CF0:  CALL   2B30
02CF4:  MOVFF  01,FEF
02CF8:  MOVLW  01
02CFA:  MOVLB  B
02CFC:  ADDWF  x19,F
02CFE:  BTFSC  FD8.0
02D00:  INCF   x1A,F
02D02:  BTFSC  FD8.2
02D04:  INCF   x1B,F
02D06:  BTFSC  FD8.2
02D08:  INCF   x1C,F
02D0A:  MOVLB  0
02D0C:  GOTO   2C7A
....................          break;
02D10:  GOTO   2E22
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02D14:  MOVLB  B
02D16:  CLRF   x1E
02D18:  CLRF   x1D
02D1A:  MOVLB  0
02D1C:  MOVLB  B
02D1E:  MOVF   x1E,W
02D20:  SUBWF  x10,W
02D22:  BTFSC  FD8.0
02D24:  BRA    2D2C
02D26:  MOVLB  0
02D28:  GOTO   2D78
02D2C:  MOVLB  0
02D2E:  BTFSS  FD8.2
02D30:  GOTO   2D46
02D34:  MOVLB  B
02D36:  MOVF   x0F,W
02D38:  SUBWF  x1D,W
02D3A:  BTFSS  FD8.0
02D3C:  BRA    2D44
02D3E:  MOVLB  0
02D40:  GOTO   2D78
02D44:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
02D46:  MOVLB  B
02D48:  MOVF   x0D,W
02D4A:  ADDWF  x1D,W
02D4C:  MOVWF  FE9
02D4E:  MOVF   x0E,W
02D50:  ADDWFC x1E,W
02D52:  MOVWF  FEA
02D54:  MOVFF  FEF,B23
02D58:  MOVFF  B23,B25
02D5C:  MOVLW  08
02D5E:  MOVWF  x26
02D60:  MOVLW  01
02D62:  MOVWF  x27
02D64:  MOVLB  0
02D66:  CALL   2B90
02D6A:  MOVLB  B
02D6C:  INCF   x1D,F
02D6E:  BTFSC  FD8.2
02D70:  INCF   x1E,F
02D72:  MOVLB  0
02D74:  GOTO   2D1C
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
02D78:  MOVLB  B
02D7A:  CLRF   x22
02D7C:  CLRF   x21
02D7E:  CLRF   x20
02D80:  CLRF   x1F
02D82:  MOVLB  0
02D84:  MOVLB  B
02D86:  MOVF   x22,W
02D88:  SUBWF  x16,W
02D8A:  BTFSC  FD8.0
02D8C:  BRA    2D94
02D8E:  MOVLB  0
02D90:  GOTO   2E1A
02D94:  MOVLB  0
02D96:  BTFSS  FD8.2
02D98:  GOTO   2DDE
02D9C:  MOVLB  B
02D9E:  MOVF   x21,W
02DA0:  SUBWF  x15,W
02DA2:  BTFSC  FD8.0
02DA4:  BRA    2DAC
02DA6:  MOVLB  0
02DA8:  GOTO   2E1A
02DAC:  MOVLB  0
02DAE:  BTFSS  FD8.2
02DB0:  GOTO   2DDE
02DB4:  MOVLB  B
02DB6:  MOVF   x20,W
02DB8:  SUBWF  x14,W
02DBA:  BTFSC  FD8.0
02DBC:  BRA    2DC4
02DBE:  MOVLB  0
02DC0:  GOTO   2E1A
02DC4:  MOVLB  0
02DC6:  BTFSS  FD8.2
02DC8:  GOTO   2DDE
02DCC:  MOVLB  B
02DCE:  MOVF   x13,W
02DD0:  SUBWF  x1F,W
02DD2:  BTFSS  FD8.0
02DD4:  BRA    2DDC
02DD6:  MOVLB  0
02DD8:  GOTO   2E1A
02DDC:  MOVLB  0
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
02DDE:  MOVLB  B
02DE0:  MOVF   x11,W
02DE2:  ADDWF  x1F,W
02DE4:  MOVWF  FE9
02DE6:  MOVF   x12,W
02DE8:  ADDWFC x20,W
02DEA:  MOVWF  FEA
02DEC:  MOVLW  01
02DEE:  MOVWF  x25
02DF0:  MOVLW  08
02DF2:  MOVWF  x26
02DF4:  MOVLW  01
02DF6:  MOVWF  x27
02DF8:  MOVLB  0
02DFA:  CALL   2B90
02DFE:  MOVFF  01,FEF
02E02:  MOVLW  01
02E04:  MOVLB  B
02E06:  ADDWF  x1F,F
02E08:  BTFSC  FD8.0
02E0A:  INCF   x20,F
02E0C:  BTFSC  FD8.2
02E0E:  INCF   x21,F
02E10:  BTFSC  FD8.2
02E12:  INCF   x22,F
02E14:  MOVLB  0
02E16:  GOTO   2D84
....................          break;
02E1A:  GOTO   2E22
....................    
....................          
....................       default:
....................          break;
02E1E:  GOTO   2E22
....................    }
....................    return;
02E22:  RETURN 0
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, unsigned int8 *cmd_data, unsigned int8 cmd_amount, unsigned int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
03D3A:  MOVLB  B
03D3C:  MOVF   x03,W
03D3E:  XORLW  00
03D40:  MOVLB  0
03D42:  BTFSC  FD8.2
03D44:  GOTO   3D54
03D48:  XORLW  01
03D4A:  BTFSC  FD8.2
03D4C:  GOTO   3E02
03D50:  GOTO   3EB0
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
03D54:  MOVLB  B
03D56:  CLRF   x0E
03D58:  MOVLB  0
03D5A:  MOVLB  B
03D5C:  MOVF   x09,W
03D5E:  SUBWF  x0E,W
03D60:  BTFSS  FD8.0
03D62:  BRA    3D6A
03D64:  MOVLB  0
03D66:  GOTO   3D9A
03D6A:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
03D6C:  MOVLB  B
03D6E:  MOVF   x0E,W
03D70:  ADDWF  x07,W
03D72:  MOVWF  FE9
03D74:  MOVLW  00
03D76:  ADDWFC x08,W
03D78:  MOVWF  FEA
03D7A:  MOVFF  FEF,B14
03D7E:  MOVFF  B14,B25
03D82:  MOVLW  08
03D84:  MOVWF  x26
03D86:  MOVLW  01
03D88:  MOVWF  x27
03D8A:  MOVLB  0
03D8C:  CALL   2B30
03D90:  MOVLB  B
03D92:  INCF   x0E,F
03D94:  MOVLB  0
03D96:  GOTO   3D5A
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03D9A:  MOVLB  B
03D9C:  CLRF   x10
03D9E:  CLRF   x0F
03DA0:  MOVLB  0
03DA2:  MOVLB  B
03DA4:  MOVF   x10,W
03DA6:  SUBWF  x0D,W
03DA8:  BTFSC  FD8.0
03DAA:  BRA    3DB2
03DAC:  MOVLB  0
03DAE:  GOTO   3DFE
03DB2:  MOVLB  0
03DB4:  BTFSS  FD8.2
03DB6:  GOTO   3DCC
03DBA:  MOVLB  B
03DBC:  MOVF   x0C,W
03DBE:  SUBWF  x0F,W
03DC0:  BTFSS  FD8.0
03DC2:  BRA    3DCA
03DC4:  MOVLB  0
03DC6:  GOTO   3DFE
03DCA:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
03DCC:  MOVLB  B
03DCE:  MOVF   x0A,W
03DD0:  ADDWF  x0F,W
03DD2:  MOVWF  FE9
03DD4:  MOVF   x0B,W
03DD6:  ADDWFC x10,W
03DD8:  MOVWF  FEA
03DDA:  MOVFF  FEF,B14
03DDE:  MOVFF  B14,B25
03DE2:  MOVLW  08
03DE4:  MOVWF  x26
03DE6:  MOVLW  01
03DE8:  MOVWF  x27
03DEA:  MOVLB  0
03DEC:  CALL   2B30
03DF0:  MOVLB  B
03DF2:  INCF   x0F,F
03DF4:  BTFSC  FD8.2
03DF6:  INCF   x10,F
03DF8:  MOVLB  0
03DFA:  GOTO   3DA2
....................          break;
03DFE:  GOTO   3EB4
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
03E02:  MOVLB  B
03E04:  CLRF   x11
03E06:  MOVLB  0
03E08:  MOVLB  B
03E0A:  MOVF   x09,W
03E0C:  SUBWF  x11,W
03E0E:  BTFSS  FD8.0
03E10:  BRA    3E18
03E12:  MOVLB  0
03E14:  GOTO   3E48
03E18:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
03E1A:  MOVLB  B
03E1C:  MOVF   x11,W
03E1E:  ADDWF  x07,W
03E20:  MOVWF  FE9
03E22:  MOVLW  00
03E24:  ADDWFC x08,W
03E26:  MOVWF  FEA
03E28:  MOVFF  FEF,B14
03E2C:  MOVFF  B14,B25
03E30:  MOVLW  08
03E32:  MOVWF  x26
03E34:  MOVLW  01
03E36:  MOVWF  x27
03E38:  MOVLB  0
03E3A:  CALL   2B90
03E3E:  MOVLB  B
03E40:  INCF   x11,F
03E42:  MOVLB  0
03E44:  GOTO   3E08
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03E48:  MOVLB  B
03E4A:  CLRF   x13
03E4C:  CLRF   x12
03E4E:  MOVLB  0
03E50:  MOVLB  B
03E52:  MOVF   x13,W
03E54:  SUBWF  x0D,W
03E56:  BTFSC  FD8.0
03E58:  BRA    3E60
03E5A:  MOVLB  0
03E5C:  GOTO   3EAC
03E60:  MOVLB  0
03E62:  BTFSS  FD8.2
03E64:  GOTO   3E7A
03E68:  MOVLB  B
03E6A:  MOVF   x0C,W
03E6C:  SUBWF  x12,W
03E6E:  BTFSS  FD8.0
03E70:  BRA    3E78
03E72:  MOVLB  0
03E74:  GOTO   3EAC
03E78:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
03E7A:  MOVLB  B
03E7C:  MOVF   x0A,W
03E7E:  ADDWF  x12,W
03E80:  MOVWF  FE9
03E82:  MOVF   x0B,W
03E84:  ADDWFC x13,W
03E86:  MOVWF  FEA
03E88:  MOVFF  FEF,B14
03E8C:  MOVFF  B14,B25
03E90:  MOVLW  08
03E92:  MOVWF  x26
03E94:  MOVLW  01
03E96:  MOVWF  x27
03E98:  MOVLB  0
03E9A:  CALL   2B90
03E9E:  MOVLB  B
03EA0:  INCF   x12,F
03EA2:  BTFSC  FD8.2
03EA4:  INCF   x13,F
03EA6:  MOVLB  0
03EA8:  GOTO   3E50
....................          break;
03EAC:  GOTO   3EB4
....................          
....................       default:
....................          break;
03EB0:  GOTO   3EB4
....................    }
....................    return;
03EB4:  RETURN 0
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
06A42:  MOVFF  2BC,B09
06A46:  MOVLW  01
06A48:  MOVLB  B
06A4A:  MOVWF  x0A
06A4C:  MOVLW  0F
06A4E:  MOVWF  x0C
06A50:  MOVLW  89
06A52:  MOVWF  x0B
06A54:  MOVLB  0
06A56:  CALL   2ADC
06A5A:  MOVFF  2BC,B09
06A5E:  MOVLB  B
06A60:  CLRF   x0A
06A62:  MOVLW  0F
06A64:  MOVWF  x0C
06A66:  MOVLW  92
06A68:  MOVWF  x0B
06A6A:  MOVLB  0
06A6C:  CALL   2ADC
06A70:  RETURN 0
.................... }
....................  
.................... int8 status_register(Flash flash_stream){
*
03EB6:  MOVLW  05
03EB8:  MOVLB  B
03EBA:  MOVWF  x07
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
03EBC:  MOVFF  B05,B09
03EC0:  CLRF   x0A
03EC2:  MOVLW  0F
03EC4:  MOVWF  x0C
03EC6:  MOVLW  89
03EC8:  MOVWF  x0B
03ECA:  MOVLB  0
03ECC:  CALL   2ADC
03ED0:  MOVFF  B05,B09
03ED4:  MOVLB  B
03ED6:  CLRF   x0A
03ED8:  MOVLW  0F
03EDA:  MOVWF  x0C
03EDC:  MOVLW  92
03EDE:  MOVWF  x0B
03EE0:  MOVLB  0
03EE2:  CALL   2ADC
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
03EE6:  MOVFF  B06,B0C
03EEA:  MOVFF  B05,B0B
03EEE:  MOVFF  B04,B0A
03EF2:  MOVFF  B03,B09
03EF6:  MOVLW  0B
03EF8:  MOVLB  B
03EFA:  MOVWF  x0E
03EFC:  MOVLW  07
03EFE:  MOVWF  x0D
03F00:  CLRF   x10
03F02:  MOVLW  01
03F04:  MOVWF  x0F
03F06:  MOVLW  0B
03F08:  MOVWF  x12
03F0A:  MOVLW  08
03F0C:  MOVWF  x11
03F0E:  CLRF   x16
03F10:  CLRF   x15
03F12:  CLRF   x14
03F14:  MOVLW  01
03F16:  MOVWF  x13
03F18:  MOVLB  0
03F1A:  CALL   2BF0
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
03F1E:  MOVFF  B05,B09
03F22:  MOVLW  01
03F24:  MOVLB  B
03F26:  MOVWF  x0A
03F28:  MOVLW  0F
03F2A:  MOVWF  x0C
03F2C:  MOVLW  89
03F2E:  MOVWF  x0B
03F30:  MOVLB  0
03F32:  CALL   2ADC
03F36:  MOVFF  B05,B09
03F3A:  MOVLB  B
03F3C:  CLRF   x0A
03F3E:  MOVLW  0F
03F40:  MOVWF  x0C
03F42:  MOVLW  92
03F44:  MOVWF  x0B
03F46:  MOVLB  0
03F48:  CALL   2ADC
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
03F4C:  MOVLB  B
03F4E:  MOVF   x08,W
03F50:  MOVWF  01
03F52:  MOVLB  0
03F54:  RETURN 0
.................... }
.................... 
.................... //
.................... //->success:True,fail:false 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 16);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == MANUFACTURER_ID_MICRON){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
....................  
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
05934:  MOVLB  1
05936:  MOVF   xF6,F
05938:  BTFSC  FD8.2
0593A:  BRA    5942
0593C:  MOVLB  0
0593E:  GOTO   5A9E
05942:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
05944:  MOVLW  06
05946:  MOVLB  1
05948:  MOVWF  xFD
0594A:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
0594C:  MOVLW  D8
0594E:  MOVLB  1
05950:  MOVWF  xFE
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
05952:  MOVFF  1FB,20A
05956:  MOVFF  1FC,20B
0595A:  MOVLB  2
0595C:  CLRF   x0C
0595E:  CLRF   x0D
05960:  MOVF   x0A,W
05962:  MOVWF  00
05964:  CLRF   01
05966:  CLRF   02
05968:  CLRF   03
0596A:  MOVFF  00,1FF
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0596E:  MOVFF  1FA,20A
05972:  MOVFF  1FB,20B
05976:  MOVFF  1FC,20C
0597A:  CLRF   x0D
0597C:  MOVF   x0A,W
0597E:  MOVWF  00
05980:  CLRF   01
05982:  CLRF   02
05984:  CLRF   03
05986:  MOVFF  00,200
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
0598A:  MOVLB  1
0598C:  MOVF   xF9,W
0598E:  MOVWF  00
05990:  CLRF   01
05992:  CLRF   02
05994:  CLRF   03
05996:  MOVFF  00,201
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
0599A:  MOVFF  1F7,B09
0599E:  MOVLB  B
059A0:  CLRF   x0A
059A2:  MOVLW  0F
059A4:  MOVWF  x0C
059A6:  MOVLW  89
059A8:  MOVWF  x0B
059AA:  MOVLB  0
059AC:  CALL   2ADC
059B0:  MOVFF  1F7,B09
059B4:  MOVLB  B
059B6:  CLRF   x0A
059B8:  MOVLW  0F
059BA:  MOVWF  x0C
059BC:  MOVLW  92
059BE:  MOVWF  x0B
059C0:  MOVLB  0
059C2:  CALL   2ADC
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
059C6:  MOVFF  1F8,B06
059CA:  MOVFF  1F7,B05
059CE:  MOVFF  1F6,B04
059D2:  MOVFF  1F5,B03
059D6:  MOVLW  01
059D8:  MOVLB  B
059DA:  MOVWF  x08
059DC:  MOVLW  FD
059DE:  MOVWF  x07
059E0:  CLRF   x0A
059E2:  MOVLW  01
059E4:  MOVWF  x09
059E6:  MOVLB  0
059E8:  CALL   3C4A
....................       output_high(flash_stream.cs_pin);
059EC:  MOVFF  1F7,B09
059F0:  MOVLW  01
059F2:  MOVLB  B
059F4:  MOVWF  x0A
059F6:  MOVLW  0F
059F8:  MOVWF  x0C
059FA:  MOVLW  89
059FC:  MOVWF  x0B
059FE:  MOVLB  0
05A00:  CALL   2ADC
05A04:  MOVFF  1F7,B09
05A08:  MOVLB  B
05A0A:  CLRF   x0A
05A0C:  MOVLW  0F
05A0E:  MOVWF  x0C
05A10:  MOVLW  92
05A12:  MOVWF  x0B
05A14:  MOVLB  0
05A16:  CALL   2ADC
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
05A1A:  MOVFF  1F7,B09
05A1E:  MOVLB  B
05A20:  CLRF   x0A
05A22:  MOVLW  0F
05A24:  MOVWF  x0C
05A26:  MOVLW  89
05A28:  MOVWF  x0B
05A2A:  MOVLB  0
05A2C:  CALL   2ADC
05A30:  MOVFF  1F7,B09
05A34:  MOVLB  B
05A36:  CLRF   x0A
05A38:  MOVLW  0F
05A3A:  MOVWF  x0C
05A3C:  MOVLW  92
05A3E:  MOVWF  x0B
05A40:  MOVLB  0
05A42:  CALL   2ADC
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
05A46:  MOVFF  1F8,B06
05A4A:  MOVFF  1F7,B05
05A4E:  MOVFF  1F6,B04
05A52:  MOVFF  1F5,B03
05A56:  MOVLW  01
05A58:  MOVLB  B
05A5A:  MOVWF  x08
05A5C:  MOVLW  FE
05A5E:  MOVWF  x07
05A60:  CLRF   x0A
05A62:  MOVLW  04
05A64:  MOVWF  x09
05A66:  MOVLB  0
05A68:  CALL   3C4A
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
05A6C:  MOVFF  1F7,B09
05A70:  MOVLW  01
05A72:  MOVLB  B
05A74:  MOVWF  x0A
05A76:  MOVLW  0F
05A78:  MOVWF  x0C
05A7A:  MOVLW  89
05A7C:  MOVWF  x0B
05A7E:  MOVLB  0
05A80:  CALL   2ADC
05A84:  MOVFF  1F7,B09
05A88:  MOVLB  B
05A8A:  CLRF   x0A
05A8C:  MOVLW  0F
05A8E:  MOVWF  x0C
05A90:  MOVLW  92
05A92:  MOVWF  x0B
05A94:  MOVLB  0
05A96:  CALL   2ADC
....................    }
05A9A:  GOTO   5C20
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
05A9E:  MOVLB  1
05AA0:  DECFSZ xF6,W
05AA2:  BRA    5AA8
05AA4:  BRA    5AAE
05AA6:  MOVLB  0
05AA8:  MOVLB  0
05AAA:  GOTO   5C20
05AAE:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
05AB0:  MOVLW  06
05AB2:  MOVLB  2
05AB4:  MOVWF  x02
05AB6:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
05AB8:  MOVLW  DC
05ABA:  MOVLB  2
05ABC:  MOVWF  x03
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
05ABE:  MOVFF  1FC,20A
05AC2:  CLRF   x0B
05AC4:  CLRF   x0C
05AC6:  CLRF   x0D
05AC8:  MOVF   x0A,W
05ACA:  MOVWF  00
05ACC:  CLRF   01
05ACE:  CLRF   02
05AD0:  CLRF   03
05AD2:  MOVFF  00,204
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
05AD6:  MOVFF  1FB,20A
05ADA:  MOVFF  1FC,20B
05ADE:  CLRF   x0C
05AE0:  CLRF   x0D
05AE2:  MOVF   x0A,W
05AE4:  MOVWF  00
05AE6:  CLRF   01
05AE8:  CLRF   02
05AEA:  CLRF   03
05AEC:  MOVFF  00,205
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
05AF0:  MOVFF  1FA,20A
05AF4:  MOVFF  1FB,20B
05AF8:  MOVFF  1FC,20C
05AFC:  CLRF   x0D
05AFE:  MOVF   x0A,W
05B00:  MOVWF  00
05B02:  CLRF   01
05B04:  CLRF   02
05B06:  CLRF   03
05B08:  MOVFF  00,206
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
05B0C:  MOVLB  1
05B0E:  MOVF   xF9,W
05B10:  MOVWF  00
05B12:  CLRF   01
05B14:  CLRF   02
05B16:  CLRF   03
05B18:  MOVFF  00,207
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
05B1C:  MOVFF  1F7,B09
05B20:  MOVLB  B
05B22:  CLRF   x0A
05B24:  MOVLW  0F
05B26:  MOVWF  x0C
05B28:  MOVLW  89
05B2A:  MOVWF  x0B
05B2C:  MOVLB  0
05B2E:  CALL   2ADC
05B32:  MOVFF  1F7,B09
05B36:  MOVLB  B
05B38:  CLRF   x0A
05B3A:  MOVLW  0F
05B3C:  MOVWF  x0C
05B3E:  MOVLW  92
05B40:  MOVWF  x0B
05B42:  MOVLB  0
05B44:  CALL   2ADC
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
05B48:  MOVFF  1F8,B06
05B4C:  MOVFF  1F7,B05
05B50:  MOVFF  1F6,B04
05B54:  MOVFF  1F5,B03
05B58:  MOVLW  02
05B5A:  MOVLB  B
05B5C:  MOVWF  x08
05B5E:  MOVLW  02
05B60:  MOVWF  x07
05B62:  CLRF   x0A
05B64:  MOVLW  01
05B66:  MOVWF  x09
05B68:  MOVLB  0
05B6A:  CALL   3C4A
....................       output_high(flash_stream.cs_pin);
05B6E:  MOVFF  1F7,B09
05B72:  MOVLW  01
05B74:  MOVLB  B
05B76:  MOVWF  x0A
05B78:  MOVLW  0F
05B7A:  MOVWF  x0C
05B7C:  MOVLW  89
05B7E:  MOVWF  x0B
05B80:  MOVLB  0
05B82:  CALL   2ADC
05B86:  MOVFF  1F7,B09
05B8A:  MOVLB  B
05B8C:  CLRF   x0A
05B8E:  MOVLW  0F
05B90:  MOVWF  x0C
05B92:  MOVLW  92
05B94:  MOVWF  x0B
05B96:  MOVLB  0
05B98:  CALL   2ADC
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
05B9C:  MOVFF  1F7,B09
05BA0:  MOVLB  B
05BA2:  CLRF   x0A
05BA4:  MOVLW  0F
05BA6:  MOVWF  x0C
05BA8:  MOVLW  89
05BAA:  MOVWF  x0B
05BAC:  MOVLB  0
05BAE:  CALL   2ADC
05BB2:  MOVFF  1F7,B09
05BB6:  MOVLB  B
05BB8:  CLRF   x0A
05BBA:  MOVLW  0F
05BBC:  MOVWF  x0C
05BBE:  MOVLW  92
05BC0:  MOVWF  x0B
05BC2:  MOVLB  0
05BC4:  CALL   2ADC
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
05BC8:  MOVFF  1F8,B06
05BCC:  MOVFF  1F7,B05
05BD0:  MOVFF  1F6,B04
05BD4:  MOVFF  1F5,B03
05BD8:  MOVLW  02
05BDA:  MOVLB  B
05BDC:  MOVWF  x08
05BDE:  MOVLW  03
05BE0:  MOVWF  x07
05BE2:  CLRF   x0A
05BE4:  MOVLW  05
05BE6:  MOVWF  x09
05BE8:  MOVLB  0
05BEA:  CALL   3C4A
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
05BEE:  MOVFF  1F7,B09
05BF2:  MOVLW  01
05BF4:  MOVLB  B
05BF6:  MOVWF  x0A
05BF8:  MOVLW  0F
05BFA:  MOVWF  x0C
05BFC:  MOVLW  89
05BFE:  MOVWF  x0B
05C00:  MOVLB  0
05C02:  CALL   2ADC
05C06:  MOVFF  1F7,B09
05C0A:  MOVLB  B
05C0C:  CLRF   x0A
05C0E:  MOVLW  0F
05C10:  MOVWF  x0C
05C12:  MOVLW  92
05C14:  MOVWF  x0B
05C16:  MOVLB  0
05C18:  CALL   2ADC
....................    }
05C1C:  GOTO   5C20
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
05C20:  MOVLB  2
05C22:  CLRF   x08
05C24:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
05C26:  MOVFF  1F8,B06
05C2A:  MOVFF  1F7,B05
05C2E:  MOVFF  1F6,B04
05C32:  MOVFF  1F5,B03
05C36:  CALL   3EB6
05C3A:  MOVF   01,W
05C3C:  ANDLW  01
05C3E:  SUBLW  01
05C40:  BTFSS  FD8.2
05C42:  GOTO   5C94
....................       if(timeout_counter > 10)
05C46:  MOVLB  2
05C48:  MOVF   x08,W
05C4A:  SUBLW  0A
05C4C:  BTFSS  FD8.0
05C4E:  BRA    5C56
05C50:  MOVLB  0
05C52:  GOTO   5C68
05C56:  MOVLB  0
....................          delay_ms(200);
05C58:  MOVLW  C8
05C5A:  MOVLB  B
05C5C:  MOVWF  x03
05C5E:  MOVLB  0
05C60:  CALL   22D0
05C64:  GOTO   5C74
....................       else
....................          delay_ms(10);   
05C68:  MOVLW  0A
05C6A:  MOVLB  B
05C6C:  MOVWF  x03
05C6E:  MOVLB  0
05C70:  CALL   22D0
....................       
....................       if(timeout_counter > 100){
05C74:  MOVLB  2
05C76:  MOVF   x08,W
05C78:  SUBLW  64
05C7A:  BTFSS  FD8.0
05C7C:  BRA    5C84
05C7E:  MOVLB  0
05C80:  GOTO   5C8A
05C84:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
05C86:  GOTO   5C94
....................       }  
....................       timeout_counter++;
05C8A:  MOVLB  2
05C8C:  INCF   x08,F
05C8E:  MOVLB  0
05C90:  GOTO   5C26
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
05C94:  RETURN 0
.................... }
....................  
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x __ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 __ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 __ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 __
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
04D5A:  MOVLB  A
04D5C:  MOVF   x91,F
04D5E:  BTFSC  FD8.2
04D60:  BRA    4D68
04D62:  MOVLB  0
04D64:  GOTO   4EC0
04D68:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
04D6A:  MOVLW  06
04D6C:  MOVLB  A
04D6E:  MOVWF  x98
04D70:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
04D72:  MOVLW  20
04D74:  MOVLB  A
04D76:  MOVWF  x99
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
04D78:  MOVFF  A96,AA5
04D7C:  MOVFF  A97,AA6
04D80:  CLRF   xA7
04D82:  CLRF   xA8
04D84:  MOVF   xA5,W
04D86:  MOVWF  00
04D88:  CLRF   01
04D8A:  CLRF   02
04D8C:  CLRF   03
04D8E:  MOVFF  00,A9A
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
04D92:  MOVFF  A95,AA5
04D96:  MOVFF  A96,AA6
04D9A:  MOVFF  A97,AA7
04D9E:  CLRF   xA8
04DA0:  MOVF   xA5,W
04DA2:  MOVWF  00
04DA4:  CLRF   01
04DA6:  CLRF   02
04DA8:  CLRF   03
04DAA:  MOVFF  00,A9B
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
04DAE:  MOVF   x94,W
04DB0:  MOVWF  00
04DB2:  CLRF   01
04DB4:  CLRF   02
04DB6:  CLRF   03
04DB8:  MOVFF  00,A9C
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04DBC:  MOVFF  A92,B09
04DC0:  MOVLB  B
04DC2:  CLRF   x0A
04DC4:  MOVLW  0F
04DC6:  MOVWF  x0C
04DC8:  MOVLW  89
04DCA:  MOVWF  x0B
04DCC:  MOVLB  0
04DCE:  CALL   2ADC
04DD2:  MOVFF  A92,B09
04DD6:  MOVLB  B
04DD8:  CLRF   x0A
04DDA:  MOVLW  0F
04DDC:  MOVWF  x0C
04DDE:  MOVLW  92
04DE0:  MOVWF  x0B
04DE2:  MOVLB  0
04DE4:  CALL   2ADC
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
04DE8:  MOVFF  A93,B06
04DEC:  MOVFF  A92,B05
04DF0:  MOVFF  A91,B04
04DF4:  MOVFF  A90,B03
04DF8:  MOVLW  0A
04DFA:  MOVLB  B
04DFC:  MOVWF  x08
04DFE:  MOVLW  98
04E00:  MOVWF  x07
04E02:  CLRF   x0A
04E04:  MOVLW  01
04E06:  MOVWF  x09
04E08:  MOVLB  0
04E0A:  CALL   3C4A
....................       output_high(flash_stream.cs_pin);
04E0E:  MOVFF  A92,B09
04E12:  MOVLW  01
04E14:  MOVLB  B
04E16:  MOVWF  x0A
04E18:  MOVLW  0F
04E1A:  MOVWF  x0C
04E1C:  MOVLW  89
04E1E:  MOVWF  x0B
04E20:  MOVLB  0
04E22:  CALL   2ADC
04E26:  MOVFF  A92,B09
04E2A:  MOVLB  B
04E2C:  CLRF   x0A
04E2E:  MOVLW  0F
04E30:  MOVWF  x0C
04E32:  MOVLW  92
04E34:  MOVWF  x0B
04E36:  MOVLB  0
04E38:  CALL   2ADC
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
04E3C:  MOVFF  A92,B09
04E40:  MOVLB  B
04E42:  CLRF   x0A
04E44:  MOVLW  0F
04E46:  MOVWF  x0C
04E48:  MOVLW  89
04E4A:  MOVWF  x0B
04E4C:  MOVLB  0
04E4E:  CALL   2ADC
04E52:  MOVFF  A92,B09
04E56:  MOVLB  B
04E58:  CLRF   x0A
04E5A:  MOVLW  0F
04E5C:  MOVWF  x0C
04E5E:  MOVLW  92
04E60:  MOVWF  x0B
04E62:  MOVLB  0
04E64:  CALL   2ADC
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
04E68:  MOVFF  A93,B06
04E6C:  MOVFF  A92,B05
04E70:  MOVFF  A91,B04
04E74:  MOVFF  A90,B03
04E78:  MOVLW  0A
04E7A:  MOVLB  B
04E7C:  MOVWF  x08
04E7E:  MOVLW  99
04E80:  MOVWF  x07
04E82:  CLRF   x0A
04E84:  MOVLW  04
04E86:  MOVWF  x09
04E88:  MOVLB  0
04E8A:  CALL   3C4A
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04E8E:  MOVFF  A92,B09
04E92:  MOVLW  01
04E94:  MOVLB  B
04E96:  MOVWF  x0A
04E98:  MOVLW  0F
04E9A:  MOVWF  x0C
04E9C:  MOVLW  89
04E9E:  MOVWF  x0B
04EA0:  MOVLB  0
04EA2:  CALL   2ADC
04EA6:  MOVFF  A92,B09
04EAA:  MOVLB  B
04EAC:  CLRF   x0A
04EAE:  MOVLW  0F
04EB0:  MOVWF  x0C
04EB2:  MOVLW  92
04EB4:  MOVWF  x0B
04EB6:  MOVLB  0
04EB8:  CALL   2ADC
....................    }
04EBC:  GOTO   5040
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
04EC0:  MOVLB  A
04EC2:  DECFSZ x91,W
04EC4:  BRA    4ECA
04EC6:  BRA    4ED0
04EC8:  MOVLB  0
04ECA:  MOVLB  0
04ECC:  GOTO   5040
04ED0:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
04ED2:  MOVLW  06
04ED4:  MOVLB  A
04ED6:  MOVWF  x9D
04ED8:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
04EDA:  MOVLW  21
04EDC:  MOVLB  A
04EDE:  MOVWF  x9E
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
04EE0:  MOVFF  A97,AA5
04EE4:  CLRF   xA6
04EE6:  CLRF   xA7
04EE8:  CLRF   xA8
04EEA:  MOVF   xA5,W
04EEC:  MOVWF  00
04EEE:  CLRF   01
04EF0:  CLRF   02
04EF2:  CLRF   03
04EF4:  MOVFF  00,A9F
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
04EF8:  MOVFF  A96,AA5
04EFC:  MOVFF  A97,AA6
04F00:  CLRF   xA7
04F02:  CLRF   xA8
04F04:  MOVF   xA5,W
04F06:  MOVWF  00
04F08:  CLRF   01
04F0A:  CLRF   02
04F0C:  CLRF   03
04F0E:  MOVFF  00,AA0
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
04F12:  MOVFF  A95,AA5
04F16:  MOVFF  A96,AA6
04F1A:  MOVFF  A97,AA7
04F1E:  CLRF   xA8
04F20:  MOVF   xA5,W
04F22:  MOVWF  00
04F24:  CLRF   01
04F26:  CLRF   02
04F28:  CLRF   03
04F2A:  MOVFF  00,AA1
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
04F2E:  MOVF   x94,W
04F30:  MOVWF  00
04F32:  CLRF   01
04F34:  CLRF   02
04F36:  CLRF   03
04F38:  MOVFF  00,AA2
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04F3C:  MOVFF  A92,B09
04F40:  MOVLB  B
04F42:  CLRF   x0A
04F44:  MOVLW  0F
04F46:  MOVWF  x0C
04F48:  MOVLW  89
04F4A:  MOVWF  x0B
04F4C:  MOVLB  0
04F4E:  CALL   2ADC
04F52:  MOVFF  A92,B09
04F56:  MOVLB  B
04F58:  CLRF   x0A
04F5A:  MOVLW  0F
04F5C:  MOVWF  x0C
04F5E:  MOVLW  92
04F60:  MOVWF  x0B
04F62:  MOVLB  0
04F64:  CALL   2ADC
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
04F68:  MOVFF  A93,B06
04F6C:  MOVFF  A92,B05
04F70:  MOVFF  A91,B04
04F74:  MOVFF  A90,B03
04F78:  MOVLW  0A
04F7A:  MOVLB  B
04F7C:  MOVWF  x08
04F7E:  MOVLW  9D
04F80:  MOVWF  x07
04F82:  CLRF   x0A
04F84:  MOVLW  01
04F86:  MOVWF  x09
04F88:  MOVLB  0
04F8A:  CALL   3C4A
....................       output_high(flash_stream.cs_pin);
04F8E:  MOVFF  A92,B09
04F92:  MOVLW  01
04F94:  MOVLB  B
04F96:  MOVWF  x0A
04F98:  MOVLW  0F
04F9A:  MOVWF  x0C
04F9C:  MOVLW  89
04F9E:  MOVWF  x0B
04FA0:  MOVLB  0
04FA2:  CALL   2ADC
04FA6:  MOVFF  A92,B09
04FAA:  MOVLB  B
04FAC:  CLRF   x0A
04FAE:  MOVLW  0F
04FB0:  MOVWF  x0C
04FB2:  MOVLW  92
04FB4:  MOVWF  x0B
04FB6:  MOVLB  0
04FB8:  CALL   2ADC
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
04FBC:  MOVFF  A92,B09
04FC0:  MOVLB  B
04FC2:  CLRF   x0A
04FC4:  MOVLW  0F
04FC6:  MOVWF  x0C
04FC8:  MOVLW  89
04FCA:  MOVWF  x0B
04FCC:  MOVLB  0
04FCE:  CALL   2ADC
04FD2:  MOVFF  A92,B09
04FD6:  MOVLB  B
04FD8:  CLRF   x0A
04FDA:  MOVLW  0F
04FDC:  MOVWF  x0C
04FDE:  MOVLW  92
04FE0:  MOVWF  x0B
04FE2:  MOVLB  0
04FE4:  CALL   2ADC
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
04FE8:  MOVFF  A93,B06
04FEC:  MOVFF  A92,B05
04FF0:  MOVFF  A91,B04
04FF4:  MOVFF  A90,B03
04FF8:  MOVLW  0A
04FFA:  MOVLB  B
04FFC:  MOVWF  x08
04FFE:  MOVLW  9E
05000:  MOVWF  x07
05002:  CLRF   x0A
05004:  MOVLW  05
05006:  MOVWF  x09
05008:  MOVLB  0
0500A:  CALL   3C4A
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0500E:  MOVFF  A92,B09
05012:  MOVLW  01
05014:  MOVLB  B
05016:  MOVWF  x0A
05018:  MOVLW  0F
0501A:  MOVWF  x0C
0501C:  MOVLW  89
0501E:  MOVWF  x0B
05020:  MOVLB  0
05022:  CALL   2ADC
05026:  MOVFF  A92,B09
0502A:  MOVLB  B
0502C:  CLRF   x0A
0502E:  MOVLW  0F
05030:  MOVWF  x0C
05032:  MOVLW  92
05034:  MOVWF  x0B
05036:  MOVLB  0
05038:  CALL   2ADC
....................    }
0503C:  GOTO   5040
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
05040:  MOVLB  A
05042:  CLRF   xA3
05044:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
05046:  MOVFF  A93,B06
0504A:  MOVFF  A92,B05
0504E:  MOVFF  A91,B04
05052:  MOVFF  A90,B03
05056:  CALL   3EB6
0505A:  MOVF   01,W
0505C:  ANDLW  01
0505E:  SUBLW  01
05060:  BTFSS  FD8.2
05062:  GOTO   507C
....................       delay_ms(1);   
05066:  MOVLW  01
05068:  MOVLB  B
0506A:  MOVWF  x03
0506C:  MOVLB  0
0506E:  CALL   22D0
....................       if(timeout_counter > 1000){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
05072:  MOVLB  A
05074:  INCF   xA3,F
05076:  MOVLB  0
05078:  GOTO   5046
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
0507C:  RETURN 0
.................... }
....................  
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address)
.................... {
....................    unsigned int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................    
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    return read_data;
.................... }
....................  
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
02EEC:  MOVLB  A
02EEE:  MOVF   xEC,F
02EF0:  BTFSC  FD8.2
02EF2:  BRA    2EFA
02EF4:  MOVLB  0
02EF6:  GOTO   2FF0
02EFA:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
02EFC:  MOVLW  03
02EFE:  MOVLB  A
02F00:  MOVWF  xF9
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02F02:  MOVFF  AF1,B03
02F06:  MOVFF  AF2,B04
02F0A:  MOVLB  B
02F0C:  CLRF   x05
02F0E:  CLRF   x06
02F10:  MOVF   x03,W
02F12:  MOVWF  00
02F14:  CLRF   01
02F16:  CLRF   02
02F18:  CLRF   03
02F1A:  MOVFF  00,AFA
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02F1E:  MOVFF  AF0,B03
02F22:  MOVFF  AF1,B04
02F26:  MOVFF  AF2,B05
02F2A:  CLRF   x06
02F2C:  MOVF   x03,W
02F2E:  MOVWF  00
02F30:  CLRF   01
02F32:  CLRF   02
02F34:  CLRF   03
02F36:  MOVFF  00,AFB
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02F3A:  MOVLB  A
02F3C:  MOVF   xEF,W
02F3E:  MOVWF  00
02F40:  CLRF   01
02F42:  CLRF   02
02F44:  CLRF   03
02F46:  MOVFF  00,AFC
....................             
....................       output_low(flash_stream.cs_pin);
02F4A:  MOVFF  AED,B09
02F4E:  MOVLB  B
02F50:  CLRF   x0A
02F52:  MOVLW  0F
02F54:  MOVWF  x0C
02F56:  MOVLW  89
02F58:  MOVWF  x0B
02F5A:  MOVLB  0
02F5C:  CALL   2ADC
02F60:  MOVFF  AED,B09
02F64:  MOVLB  B
02F66:  CLRF   x0A
02F68:  MOVLW  0F
02F6A:  MOVWF  x0C
02F6C:  MOVLW  92
02F6E:  MOVWF  x0B
02F70:  MOVLB  0
02F72:  CALL   2ADC
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
02F76:  MOVFF  AEE,B0C
02F7A:  MOVFF  AED,B0B
02F7E:  MOVFF  AEC,B0A
02F82:  MOVFF  AEB,B09
02F86:  MOVLW  0A
02F88:  MOVLB  B
02F8A:  MOVWF  x0E
02F8C:  MOVLW  F9
02F8E:  MOVWF  x0D
02F90:  CLRF   x10
02F92:  MOVLW  04
02F94:  MOVWF  x0F
02F96:  MOVFF  AF4,B12
02F9A:  MOVFF  AF3,B11
02F9E:  MOVFF  AF8,B16
02FA2:  MOVFF  AF7,B15
02FA6:  MOVFF  AF6,B14
02FAA:  MOVFF  AF5,B13
02FAE:  MOVLB  0
02FB0:  CALL   2BF0
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
02FB4:  MOVLW  02
02FB6:  MOVWF  00
02FB8:  DECFSZ 00,F
02FBA:  BRA    2FB8
02FBC:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02FBE:  MOVFF  AED,B09
02FC2:  MOVLW  01
02FC4:  MOVLB  B
02FC6:  MOVWF  x0A
02FC8:  MOVLW  0F
02FCA:  MOVWF  x0C
02FCC:  MOVLW  89
02FCE:  MOVWF  x0B
02FD0:  MOVLB  0
02FD2:  CALL   2ADC
02FD6:  MOVFF  AED,B09
02FDA:  MOVLB  B
02FDC:  CLRF   x0A
02FDE:  MOVLW  0F
02FE0:  MOVWF  x0C
02FE2:  MOVLW  92
02FE4:  MOVWF  x0B
02FE6:  MOVLB  0
02FE8:  CALL   2ADC
....................    }
02FEC:  GOTO   310A
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
02FF0:  MOVLB  A
02FF2:  DECFSZ xEC,W
02FF4:  BRA    2FFA
02FF6:  BRA    3000
02FF8:  MOVLB  0
02FFA:  MOVLB  0
02FFC:  GOTO   310A
03000:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
03002:  MOVLW  13
03004:  MOVLB  A
03006:  MOVWF  xFD
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
03008:  MOVFF  AF2,B03
0300C:  MOVLB  B
0300E:  CLRF   x04
03010:  CLRF   x05
03012:  CLRF   x06
03014:  MOVF   x03,W
03016:  MOVWF  00
03018:  CLRF   01
0301A:  CLRF   02
0301C:  CLRF   03
0301E:  MOVFF  00,AFE
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03022:  MOVFF  AF1,B03
03026:  MOVFF  AF2,B04
0302A:  CLRF   x05
0302C:  CLRF   x06
0302E:  MOVF   x03,W
03030:  MOVWF  00
03032:  CLRF   01
03034:  CLRF   02
03036:  CLRF   03
03038:  MOVFF  00,AFF
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0303C:  MOVFF  AF0,B03
03040:  MOVFF  AF1,B04
03044:  MOVFF  AF2,B05
03048:  CLRF   x06
0304A:  MOVF   x03,W
0304C:  MOVWF  00
0304E:  CLRF   01
03050:  CLRF   02
03052:  CLRF   03
03054:  MOVFF  00,B00
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
03058:  MOVLB  A
0305A:  MOVF   xEF,W
0305C:  MOVWF  00
0305E:  CLRF   01
03060:  CLRF   02
03062:  CLRF   03
03064:  MOVFF  00,B01
....................    
....................       output_low(flash_stream.cs_pin);
03068:  MOVFF  AED,B09
0306C:  MOVLB  B
0306E:  CLRF   x0A
03070:  MOVLW  0F
03072:  MOVWF  x0C
03074:  MOVLW  89
03076:  MOVWF  x0B
03078:  MOVLB  0
0307A:  CALL   2ADC
0307E:  MOVFF  AED,B09
03082:  MOVLB  B
03084:  CLRF   x0A
03086:  MOVLW  0F
03088:  MOVWF  x0C
0308A:  MOVLW  92
0308C:  MOVWF  x0B
0308E:  MOVLB  0
03090:  CALL   2ADC
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
03094:  MOVFF  AEE,B0C
03098:  MOVFF  AED,B0B
0309C:  MOVFF  AEC,B0A
030A0:  MOVFF  AEB,B09
030A4:  MOVLW  0A
030A6:  MOVLB  B
030A8:  MOVWF  x0E
030AA:  MOVLW  FD
030AC:  MOVWF  x0D
030AE:  CLRF   x10
030B0:  MOVLW  05
030B2:  MOVWF  x0F
030B4:  MOVFF  AF4,B12
030B8:  MOVFF  AF3,B11
030BC:  MOVFF  AF8,B16
030C0:  MOVFF  AF7,B15
030C4:  MOVFF  AF6,B14
030C8:  MOVFF  AF5,B13
030CC:  MOVLB  0
030CE:  CALL   2BF0
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
030D2:  MOVLW  02
030D4:  MOVWF  00
030D6:  DECFSZ 00,F
030D8:  BRA    30D6
030DA:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
030DC:  MOVFF  AED,B09
030E0:  MOVLW  01
030E2:  MOVLB  B
030E4:  MOVWF  x0A
030E6:  MOVLW  0F
030E8:  MOVWF  x0C
030EA:  MOVLW  89
030EC:  MOVWF  x0B
030EE:  MOVLB  0
030F0:  CALL   2ADC
030F4:  MOVFF  AED,B09
030F8:  MOVLB  B
030FA:  CLRF   x0A
030FC:  MOVLW  0F
030FE:  MOVWF  x0C
03100:  MOVLW  92
03102:  MOVWF  x0B
03104:  MOVLB  0
03106:  CALL   2ADC
....................    }
....................    return;
0310A:  RETURN 0
.................... }
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
107A2:  MOVLB  2
107A4:  MOVF   x1A,F
107A6:  BTFSC  FD8.2
107A8:  BRA    107B0
107AA:  MOVLB  0
107AC:  GOTO   10916
107B0:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
107B2:  MOVLW  06
107B4:  MOVLB  2
107B6:  MOVWF  x22
107B8:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
107BA:  MOVLW  02
107BC:  MOVLB  2
107BE:  MOVWF  x23
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
107C0:  MOVFF  21F,231
107C4:  MOVFF  220,232
107C8:  CLRF   x33
107CA:  CLRF   x34
107CC:  MOVF   x31,W
107CE:  MOVWF  00
107D0:  CLRF   01
107D2:  CLRF   02
107D4:  CLRF   03
107D6:  MOVFF  00,224
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
107DA:  MOVFF  21E,231
107DE:  MOVFF  21F,232
107E2:  MOVFF  220,233
107E6:  CLRF   x34
107E8:  MOVF   x31,W
107EA:  MOVWF  00
107EC:  CLRF   01
107EE:  CLRF   02
107F0:  CLRF   03
107F2:  MOVFF  00,225
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
107F6:  MOVF   x1D,W
107F8:  MOVWF  00
107FA:  CLRF   01
107FC:  CLRF   02
107FE:  CLRF   03
10800:  MOVFF  00,226
....................       flash_cmd[4] = write_data;
10804:  MOVFF  221,227
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
10808:  MOVFF  21B,B09
1080C:  MOVLB  B
1080E:  CLRF   x0A
10810:  MOVLW  0F
10812:  MOVWF  x0C
10814:  MOVLW  89
10816:  MOVWF  x0B
10818:  MOVLB  0
1081A:  CALL   2ADC
1081E:  MOVFF  21B,B09
10822:  MOVLB  B
10824:  CLRF   x0A
10826:  MOVLW  0F
10828:  MOVWF  x0C
1082A:  MOVLW  92
1082C:  MOVWF  x0B
1082E:  MOVLB  0
10830:  CALL   2ADC
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
10834:  MOVFF  21C,B06
10838:  MOVFF  21B,B05
1083C:  MOVFF  21A,B04
10840:  MOVFF  219,B03
10844:  MOVLW  02
10846:  MOVLB  B
10848:  MOVWF  x08
1084A:  MOVLW  22
1084C:  MOVWF  x07
1084E:  CLRF   x0A
10850:  MOVLW  01
10852:  MOVWF  x09
10854:  MOVLB  0
10856:  CALL   3C4A
....................       output_high(flash_stream.cs_pin);
1085A:  MOVFF  21B,B09
1085E:  MOVLW  01
10860:  MOVLB  B
10862:  MOVWF  x0A
10864:  MOVLW  0F
10866:  MOVWF  x0C
10868:  MOVLW  89
1086A:  MOVWF  x0B
1086C:  MOVLB  0
1086E:  CALL   2ADC
10872:  MOVFF  21B,B09
10876:  MOVLB  B
10878:  CLRF   x0A
1087A:  MOVLW  0F
1087C:  MOVWF  x0C
1087E:  MOVLW  92
10880:  MOVWF  x0B
10882:  MOVLB  0
10884:  CALL   2ADC
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
10888:  MOVFF  21B,B09
1088C:  MOVLB  B
1088E:  CLRF   x0A
10890:  MOVLW  0F
10892:  MOVWF  x0C
10894:  MOVLW  89
10896:  MOVWF  x0B
10898:  MOVLB  0
1089A:  CALL   2ADC
1089E:  MOVFF  21B,B09
108A2:  MOVLB  B
108A4:  CLRF   x0A
108A6:  MOVLW  0F
108A8:  MOVWF  x0C
108AA:  MOVLW  92
108AC:  MOVWF  x0B
108AE:  MOVLB  0
108B0:  CALL   2ADC
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
108B4:  MOVFF  21C,B06
108B8:  MOVFF  21B,B05
108BC:  MOVFF  21A,B04
108C0:  MOVFF  219,B03
108C4:  MOVLW  02
108C6:  MOVLB  B
108C8:  MOVWF  x08
108CA:  MOVLW  23
108CC:  MOVWF  x07
108CE:  CLRF   x0A
108D0:  MOVLW  05
108D2:  MOVWF  x09
108D4:  MOVLB  0
108D6:  CALL   3C4A
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
108DA:  MOVLW  02
108DC:  MOVWF  00
108DE:  DECFSZ 00,F
108E0:  BRA    108DE
108E2:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
108E4:  MOVFF  21B,B09
108E8:  MOVLW  01
108EA:  MOVLB  B
108EC:  MOVWF  x0A
108EE:  MOVLW  0F
108F0:  MOVWF  x0C
108F2:  MOVLW  89
108F4:  MOVWF  x0B
108F6:  MOVLB  0
108F8:  CALL   2ADC
108FC:  MOVFF  21B,B09
10900:  MOVLB  B
10902:  CLRF   x0A
10904:  MOVLW  0F
10906:  MOVWF  x0C
10908:  MOVLW  92
1090A:  MOVWF  x0B
1090C:  MOVLB  0
1090E:  CALL   2ADC
....................    }
10912:  GOTO   10AA0
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
10916:  MOVLB  2
10918:  DECFSZ x1A,W
1091A:  BRA    10920
1091C:  BRA    10926
1091E:  MOVLB  0
10920:  MOVLB  0
10922:  GOTO   10AA0
10926:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
10928:  MOVLW  06
1092A:  MOVLB  2
1092C:  MOVWF  x28
1092E:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
10930:  MOVLW  12
10932:  MOVLB  2
10934:  MOVWF  x29
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
10936:  MOVFF  220,231
1093A:  CLRF   x32
1093C:  CLRF   x33
1093E:  CLRF   x34
10940:  MOVF   x31,W
10942:  MOVWF  00
10944:  CLRF   01
10946:  CLRF   02
10948:  CLRF   03
1094A:  MOVFF  00,22A
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
1094E:  MOVFF  21F,231
10952:  MOVFF  220,232
10956:  CLRF   x33
10958:  CLRF   x34
1095A:  MOVF   x31,W
1095C:  MOVWF  00
1095E:  CLRF   01
10960:  CLRF   02
10962:  CLRF   03
10964:  MOVFF  00,22B
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
10968:  MOVFF  21E,231
1096C:  MOVFF  21F,232
10970:  MOVFF  220,233
10974:  CLRF   x34
10976:  MOVF   x31,W
10978:  MOVWF  00
1097A:  CLRF   01
1097C:  CLRF   02
1097E:  CLRF   03
10980:  MOVFF  00,22C
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
10984:  MOVF   x1D,W
10986:  MOVWF  00
10988:  CLRF   01
1098A:  CLRF   02
1098C:  CLRF   03
1098E:  MOVFF  00,22D
....................       flash_cmd[5] = write_data;
10992:  MOVFF  221,22E
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
10996:  MOVFF  21B,B09
1099A:  MOVLB  B
1099C:  CLRF   x0A
1099E:  MOVLW  0F
109A0:  MOVWF  x0C
109A2:  MOVLW  89
109A4:  MOVWF  x0B
109A6:  MOVLB  0
109A8:  CALL   2ADC
109AC:  MOVFF  21B,B09
109B0:  MOVLB  B
109B2:  CLRF   x0A
109B4:  MOVLW  0F
109B6:  MOVWF  x0C
109B8:  MOVLW  92
109BA:  MOVWF  x0B
109BC:  MOVLB  0
109BE:  CALL   2ADC
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
109C2:  MOVFF  21C,B06
109C6:  MOVFF  21B,B05
109CA:  MOVFF  21A,B04
109CE:  MOVFF  219,B03
109D2:  MOVLW  02
109D4:  MOVLB  B
109D6:  MOVWF  x08
109D8:  MOVLW  28
109DA:  MOVWF  x07
109DC:  CLRF   x0A
109DE:  MOVLW  01
109E0:  MOVWF  x09
109E2:  MOVLB  0
109E4:  CALL   3C4A
....................       output_high(flash_stream.cs_pin);
109E8:  MOVFF  21B,B09
109EC:  MOVLW  01
109EE:  MOVLB  B
109F0:  MOVWF  x0A
109F2:  MOVLW  0F
109F4:  MOVWF  x0C
109F6:  MOVLW  89
109F8:  MOVWF  x0B
109FA:  MOVLB  0
109FC:  CALL   2ADC
10A00:  MOVFF  21B,B09
10A04:  MOVLB  B
10A06:  CLRF   x0A
10A08:  MOVLW  0F
10A0A:  MOVWF  x0C
10A0C:  MOVLW  92
10A0E:  MOVWF  x0B
10A10:  MOVLB  0
10A12:  CALL   2ADC
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
10A16:  MOVFF  21B,B09
10A1A:  MOVLB  B
10A1C:  CLRF   x0A
10A1E:  MOVLW  0F
10A20:  MOVWF  x0C
10A22:  MOVLW  89
10A24:  MOVWF  x0B
10A26:  MOVLB  0
10A28:  CALL   2ADC
10A2C:  MOVFF  21B,B09
10A30:  MOVLB  B
10A32:  CLRF   x0A
10A34:  MOVLW  0F
10A36:  MOVWF  x0C
10A38:  MOVLW  92
10A3A:  MOVWF  x0B
10A3C:  MOVLB  0
10A3E:  CALL   2ADC
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
10A42:  MOVFF  21C,B06
10A46:  MOVFF  21B,B05
10A4A:  MOVFF  21A,B04
10A4E:  MOVFF  219,B03
10A52:  MOVLW  02
10A54:  MOVLB  B
10A56:  MOVWF  x08
10A58:  MOVLW  29
10A5A:  MOVWF  x07
10A5C:  CLRF   x0A
10A5E:  MOVLW  06
10A60:  MOVWF  x09
10A62:  MOVLB  0
10A64:  CALL   3C4A
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
10A68:  MOVLW  02
10A6A:  MOVWF  00
10A6C:  DECFSZ 00,F
10A6E:  BRA    10A6C
10A70:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
10A72:  MOVFF  21B,B09
10A76:  MOVLW  01
10A78:  MOVLB  B
10A7A:  MOVWF  x0A
10A7C:  MOVLW  0F
10A7E:  MOVWF  x0C
10A80:  MOVLW  89
10A82:  MOVWF  x0B
10A84:  MOVLB  0
10A86:  CALL   2ADC
10A8A:  MOVFF  21B,B09
10A8E:  MOVLB  B
10A90:  CLRF   x0A
10A92:  MOVLW  0F
10A94:  MOVWF  x0C
10A96:  MOVLW  92
10A98:  MOVWF  x0B
10A9A:  MOVLB  0
10A9C:  CALL   2ADC
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
10AA0:  MOVLB  2
10AA2:  CLRF   x2F
10AA4:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
10AA6:  MOVFF  21C,B06
10AAA:  MOVFF  21B,B05
10AAE:  MOVFF  21A,B04
10AB2:  MOVFF  219,B03
10AB6:  CALL   3EB6
10ABA:  MOVF   01,W
10ABC:  ANDLW  01
10ABE:  SUBLW  01
10AC0:  BTFSS  FD8.2
10AC2:  GOTO   10ADC
....................       delay_ms(1);   
10AC6:  MOVLW  01
10AC8:  MOVLB  B
10ACA:  MOVWF  x03
10ACC:  MOVLB  0
10ACE:  CALL   22D0
....................       if(timeout_counter > 1000){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
10AD2:  MOVLB  2
10AD4:  INCF   x2F,F
10AD6:  MOVLB  0
10AD8:  GOTO   10AA6
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
10ADC:  RETURN 0
.................... }
....................  
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
03F56:  MOVLB  A
03F58:  MOVF   xEC,F
03F5A:  BTFSC  FD8.2
03F5C:  BRA    3F64
03F5E:  MOVLB  0
03F60:  GOTO   40D8
03F64:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
03F66:  MOVLW  06
03F68:  MOVLB  A
03F6A:  MOVWF  xF7
03F6C:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
03F6E:  MOVLW  02
03F70:  MOVLB  A
03F72:  MOVWF  xF8
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03F74:  MOVFF  AF1,B04
03F78:  MOVFF  AF2,B05
03F7C:  MOVLB  B
03F7E:  CLRF   x06
03F80:  CLRF   x07
03F82:  MOVF   x04,W
03F84:  MOVWF  00
03F86:  CLRF   01
03F88:  CLRF   02
03F8A:  CLRF   03
03F8C:  MOVFF  00,AF9
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03F90:  MOVFF  AF0,B04
03F94:  MOVFF  AF1,B05
03F98:  MOVFF  AF2,B06
03F9C:  CLRF   x07
03F9E:  MOVF   x04,W
03FA0:  MOVWF  00
03FA2:  CLRF   01
03FA4:  CLRF   02
03FA6:  CLRF   03
03FA8:  MOVFF  00,AFA
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
03FAC:  MOVLB  A
03FAE:  MOVF   xEF,W
03FB0:  MOVWF  00
03FB2:  CLRF   01
03FB4:  CLRF   02
03FB6:  CLRF   03
03FB8:  MOVFF  00,AFB
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03FBC:  MOVFF  AED,B09
03FC0:  MOVLB  B
03FC2:  CLRF   x0A
03FC4:  MOVLW  0F
03FC6:  MOVWF  x0C
03FC8:  MOVLW  89
03FCA:  MOVWF  x0B
03FCC:  MOVLB  0
03FCE:  CALL   2ADC
03FD2:  MOVFF  AED,B09
03FD6:  MOVLB  B
03FD8:  CLRF   x0A
03FDA:  MOVLW  0F
03FDC:  MOVWF  x0C
03FDE:  MOVLW  92
03FE0:  MOVWF  x0B
03FE2:  MOVLB  0
03FE4:  CALL   2ADC
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03FE8:  MOVFF  AEE,B06
03FEC:  MOVFF  AED,B05
03FF0:  MOVFF  AEC,B04
03FF4:  MOVFF  AEB,B03
03FF8:  MOVLW  0A
03FFA:  MOVLB  B
03FFC:  MOVWF  x08
03FFE:  MOVLW  F7
04000:  MOVWF  x07
04002:  CLRF   x0A
04004:  MOVLW  01
04006:  MOVWF  x09
04008:  MOVLB  0
0400A:  CALL   3C4A
....................       output_high(flash_stream.cs_pin);
0400E:  MOVFF  AED,B09
04012:  MOVLW  01
04014:  MOVLB  B
04016:  MOVWF  x0A
04018:  MOVLW  0F
0401A:  MOVWF  x0C
0401C:  MOVLW  89
0401E:  MOVWF  x0B
04020:  MOVLB  0
04022:  CALL   2ADC
04026:  MOVFF  AED,B09
0402A:  MOVLB  B
0402C:  CLRF   x0A
0402E:  MOVLW  0F
04030:  MOVWF  x0C
04032:  MOVLW  92
04034:  MOVWF  x0B
04036:  MOVLB  0
04038:  CALL   2ADC
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
0403C:  MOVFF  AED,B09
04040:  MOVLB  B
04042:  CLRF   x0A
04044:  MOVLW  0F
04046:  MOVWF  x0C
04048:  MOVLW  89
0404A:  MOVWF  x0B
0404C:  MOVLB  0
0404E:  CALL   2ADC
04052:  MOVFF  AED,B09
04056:  MOVLB  B
04058:  CLRF   x0A
0405A:  MOVLW  0F
0405C:  MOVWF  x0C
0405E:  MOVLW  92
04060:  MOVWF  x0B
04062:  MOVLB  0
04064:  CALL   2ADC
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
04068:  MOVFF  AEE,B06
0406C:  MOVFF  AED,B05
04070:  MOVFF  AEC,B04
04074:  MOVFF  AEB,B03
04078:  MOVLW  0A
0407A:  MOVLB  B
0407C:  MOVWF  x08
0407E:  MOVLW  F8
04080:  MOVWF  x07
04082:  MOVLW  04
04084:  MOVWF  x09
04086:  MOVFF  AF4,B0B
0408A:  MOVFF  AF3,B0A
0408E:  MOVFF  AF6,B0D
04092:  MOVFF  AF5,B0C
04096:  MOVLB  0
04098:  CALL   3D3A
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0409C:  MOVLW  02
0409E:  MOVWF  00
040A0:  DECFSZ 00,F
040A2:  BRA    40A0
040A4:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
040A6:  MOVFF  AED,B09
040AA:  MOVLW  01
040AC:  MOVLB  B
040AE:  MOVWF  x0A
040B0:  MOVLW  0F
040B2:  MOVWF  x0C
040B4:  MOVLW  89
040B6:  MOVWF  x0B
040B8:  MOVLB  0
040BA:  CALL   2ADC
040BE:  MOVFF  AED,B09
040C2:  MOVLB  B
040C4:  CLRF   x0A
040C6:  MOVLW  0F
040C8:  MOVWF  x0C
040CA:  MOVLW  92
040CC:  MOVWF  x0B
040CE:  MOVLB  0
040D0:  CALL   2ADC
....................    }
040D4:  GOTO   4270
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
040D8:  MOVLB  A
040DA:  DECFSZ xEC,W
040DC:  BRA    40E2
040DE:  BRA    40E8
040E0:  MOVLB  0
040E2:  MOVLB  0
040E4:  GOTO   4270
040E8:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
040EA:  MOVLW  06
040EC:  MOVLB  A
040EE:  MOVWF  xFC
040F0:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
040F2:  MOVLW  12
040F4:  MOVLB  A
040F6:  MOVWF  xFD
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
040F8:  MOVFF  AF2,B04
040FC:  MOVLB  B
040FE:  CLRF   x05
04100:  CLRF   x06
04102:  CLRF   x07
04104:  MOVF   x04,W
04106:  MOVWF  00
04108:  CLRF   01
0410A:  CLRF   02
0410C:  CLRF   03
0410E:  MOVFF  00,AFE
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
04112:  MOVFF  AF1,B04
04116:  MOVFF  AF2,B05
0411A:  CLRF   x06
0411C:  CLRF   x07
0411E:  MOVF   x04,W
04120:  MOVWF  00
04122:  CLRF   01
04124:  CLRF   02
04126:  CLRF   03
04128:  MOVFF  00,AFF
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0412C:  MOVFF  AF0,B04
04130:  MOVFF  AF1,B05
04134:  MOVFF  AF2,B06
04138:  CLRF   x07
0413A:  MOVF   x04,W
0413C:  MOVWF  00
0413E:  CLRF   01
04140:  CLRF   02
04142:  CLRF   03
04144:  MOVFF  00,B00
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
04148:  MOVLB  A
0414A:  MOVF   xEF,W
0414C:  MOVWF  00
0414E:  CLRF   01
04150:  CLRF   02
04152:  CLRF   03
04154:  MOVFF  00,B01
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04158:  MOVFF  AED,B09
0415C:  MOVLB  B
0415E:  CLRF   x0A
04160:  MOVLW  0F
04162:  MOVWF  x0C
04164:  MOVLW  89
04166:  MOVWF  x0B
04168:  MOVLB  0
0416A:  CALL   2ADC
0416E:  MOVFF  AED,B09
04172:  MOVLB  B
04174:  CLRF   x0A
04176:  MOVLW  0F
04178:  MOVWF  x0C
0417A:  MOVLW  92
0417C:  MOVWF  x0B
0417E:  MOVLB  0
04180:  CALL   2ADC
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
04184:  MOVFF  AEE,B06
04188:  MOVFF  AED,B05
0418C:  MOVFF  AEC,B04
04190:  MOVFF  AEB,B03
04194:  MOVLW  0A
04196:  MOVLB  B
04198:  MOVWF  x08
0419A:  MOVLW  FC
0419C:  MOVWF  x07
0419E:  CLRF   x0A
041A0:  MOVLW  01
041A2:  MOVWF  x09
041A4:  MOVLB  0
041A6:  CALL   3C4A
....................       output_high(flash_stream.cs_pin);
041AA:  MOVFF  AED,B09
041AE:  MOVLW  01
041B0:  MOVLB  B
041B2:  MOVWF  x0A
041B4:  MOVLW  0F
041B6:  MOVWF  x0C
041B8:  MOVLW  89
041BA:  MOVWF  x0B
041BC:  MOVLB  0
041BE:  CALL   2ADC
041C2:  MOVFF  AED,B09
041C6:  MOVLB  B
041C8:  CLRF   x0A
041CA:  MOVLW  0F
041CC:  MOVWF  x0C
041CE:  MOVLW  92
041D0:  MOVWF  x0B
041D2:  MOVLB  0
041D4:  CALL   2ADC
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
041D8:  MOVFF  AED,B09
041DC:  MOVLB  B
041DE:  CLRF   x0A
041E0:  MOVLW  0F
041E2:  MOVWF  x0C
041E4:  MOVLW  89
041E6:  MOVWF  x0B
041E8:  MOVLB  0
041EA:  CALL   2ADC
041EE:  MOVFF  AED,B09
041F2:  MOVLB  B
041F4:  CLRF   x0A
041F6:  MOVLW  0F
041F8:  MOVWF  x0C
041FA:  MOVLW  92
041FC:  MOVWF  x0B
041FE:  MOVLB  0
04200:  CALL   2ADC
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
04204:  MOVFF  AEE,B06
04208:  MOVFF  AED,B05
0420C:  MOVFF  AEC,B04
04210:  MOVFF  AEB,B03
04214:  MOVLW  0A
04216:  MOVLB  B
04218:  MOVWF  x08
0421A:  MOVLW  FD
0421C:  MOVWF  x07
0421E:  MOVLW  05
04220:  MOVWF  x09
04222:  MOVFF  AF4,B0B
04226:  MOVFF  AF3,B0A
0422A:  MOVFF  AF6,B0D
0422E:  MOVFF  AF5,B0C
04232:  MOVLB  0
04234:  CALL   3D3A
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
04238:  MOVLW  02
0423A:  MOVWF  00
0423C:  DECFSZ 00,F
0423E:  BRA    423C
04240:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04242:  MOVFF  AED,B09
04246:  MOVLW  01
04248:  MOVLB  B
0424A:  MOVWF  x0A
0424C:  MOVLW  0F
0424E:  MOVWF  x0C
04250:  MOVLW  89
04252:  MOVWF  x0B
04254:  MOVLB  0
04256:  CALL   2ADC
0425A:  MOVFF  AED,B09
0425E:  MOVLB  B
04260:  CLRF   x0A
04262:  MOVLW  0F
04264:  MOVWF  x0C
04266:  MOVLW  92
04268:  MOVWF  x0B
0426A:  MOVLB  0
0426C:  CALL   2ADC
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
04270:  MOVLB  B
04272:  CLRF   x02
04274:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
04276:  MOVFF  AEE,B06
0427A:  MOVFF  AED,B05
0427E:  MOVFF  AEC,B04
04282:  MOVFF  AEB,B03
04286:  CALL   3EB6
0428A:  MOVF   01,W
0428C:  ANDLW  01
0428E:  SUBLW  01
04290:  BTFSS  FD8.2
04292:  GOTO   42AC
....................       delay_ms(1);
04296:  MOVLW  01
04298:  MOVLB  B
0429A:  MOVWF  x03
0429C:  MOVLB  0
0429E:  CALL   22D0
....................       if(timeout_counter > 1000){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
042A2:  MOVLB  B
042A4:  INCF   x02,F
042A6:  MOVLB  0
042A8:  GOTO   4276
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
042AC:  RETURN 0
.................... }
.................... 
....................  
.................... int1 is_connect(Flash flash_stream){
*
02E24:  MOVLW  9F
02E26:  MOVLB  2
02E28:  MOVWF  x68
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
02E2A:  MOVFF  252,B09
02E2E:  MOVLB  B
02E30:  CLRF   x0A
02E32:  MOVLW  0F
02E34:  MOVWF  x0C
02E36:  MOVLW  89
02E38:  MOVWF  x0B
02E3A:  MOVLB  0
02E3C:  CALL   2ADC
02E40:  MOVFF  252,B09
02E44:  MOVLB  B
02E46:  CLRF   x0A
02E48:  MOVLW  0F
02E4A:  MOVWF  x0C
02E4C:  MOVLW  92
02E4E:  MOVWF  x0B
02E50:  MOVLB  0
02E52:  CALL   2ADC
....................    delay_us(10);  
02E56:  MOVLW  0D
02E58:  MOVWF  00
02E5A:  DECFSZ 00,F
02E5C:  BRA    2E5A
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
02E5E:  MOVFF  253,B0C
02E62:  MOVFF  252,B0B
02E66:  MOVFF  251,B0A
02E6A:  MOVFF  250,B09
02E6E:  MOVLW  02
02E70:  MOVLB  B
02E72:  MOVWF  x0E
02E74:  MOVLW  68
02E76:  MOVWF  x0D
02E78:  CLRF   x10
02E7A:  MOVLW  01
02E7C:  MOVWF  x0F
02E7E:  MOVLW  02
02E80:  MOVWF  x12
02E82:  MOVLW  54
02E84:  MOVWF  x11
02E86:  CLRF   x16
02E88:  CLRF   x15
02E8A:  CLRF   x14
02E8C:  MOVLW  14
02E8E:  MOVWF  x13
02E90:  MOVLB  0
02E92:  CALL   2BF0
....................    output_high(flash_stream.cs_pin);
02E96:  MOVFF  252,B09
02E9A:  MOVLW  01
02E9C:  MOVLB  B
02E9E:  MOVWF  x0A
02EA0:  MOVLW  0F
02EA2:  MOVWF  x0C
02EA4:  MOVLW  89
02EA6:  MOVWF  x0B
02EA8:  MOVLB  0
02EAA:  CALL   2ADC
02EAE:  MOVFF  252,B09
02EB2:  MOVLB  B
02EB4:  CLRF   x0A
02EB6:  MOVLW  0F
02EB8:  MOVWF  x0C
02EBA:  MOVLW  92
02EBC:  MOVWF  x0B
02EBE:  MOVLB  0
02EC0:  CALL   2ADC
....................    //fprintf(PC,"Read ID:%02X", read_id_data.fields.manufacturer_id);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
02EC4:  MOVLB  2
02EC6:  MOVF   x54,W
02EC8:  SUBLW  20
02ECA:  BTFSC  FD8.2
02ECC:  BRA    2ED4
02ECE:  MOVLB  0
02ED0:  GOTO   2EE2
02ED4:  MOVLB  0
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
02ED6:  MOVLW  01
02ED8:  MOVWF  01
02EDA:  GOTO   2EEA
....................    }
02EDE:  GOTO   2EEA
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
02EE2:  MOVLW  00
02EE4:  MOVWF  01
02EE6:  GOTO   2EEA
....................    }
02EEA:  RETURN 0
.................... }
.................... 
.................... #include "../lib/tool/calc_tools.c"
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size)
.................... {
....................    if (payload_size <= 0) return 0;
*
0310C:  MOVLB  A
0310E:  MOVF   xED,F
03110:  BTFSC  FD8.2
03112:  BRA    311A
03114:  MOVLB  0
03116:  GOTO   3124
0311A:  MOVLB  0
0311C:  MOVLW  00
0311E:  MOVWF  01
03120:  GOTO   3176
.................... 
....................    unsigned int8 crc = *frame++;
03124:  MOVLB  A
03126:  MOVF   xEC,W
03128:  MOVWF  03
0312A:  MOVF   xEB,W
0312C:  INCF   xEB,F
0312E:  BTFSC  FD8.2
03130:  INCF   xEC,F
03132:  MOVWF  FE9
03134:  MOVFF  03,FEA
03138:  MOVFF  FEF,AEE
0313C:  MOVLB  0
....................    while (--payload_size > 0)
0313E:  MOVLB  A
03140:  DECF   xED,F
03142:  MOVF   xED,F
03144:  BTFSS  FD8.2
03146:  BRA    314E
03148:  MOVLB  0
0314A:  GOTO   316E
0314E:  MOVLB  0
....................       crc ^= *frame++;
03150:  MOVLB  A
03152:  MOVF   xEC,W
03154:  MOVWF  03
03156:  MOVF   xEB,W
03158:  INCF   xEB,F
0315A:  BTFSC  FD8.2
0315C:  INCF   xEC,F
0315E:  MOVWF  FE9
03160:  MOVFF  03,FEA
03164:  MOVF   FEF,W
03166:  XORWF  xEE,F
03168:  MOVLB  0
0316A:  GOTO   313E
.................... 
....................    return crc;
0316E:  MOVLB  A
03170:  MOVF   xEE,W
03172:  MOVWF  01
03174:  MOVLB  0
03176:  RETURN 0
.................... }
.................... 
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size)
.................... {
....................    unsigned int8 received_crc = frame[payload_size - 1]; // CRC is the last byte
....................    unsigned int8 calculated_crc = calc_crc8(frame, payload_size - 1);
....................    return (received_crc == calculated_crc);
.................... }
.................... 
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index)
.................... {
....................     buf[index + 0] = (int8)(value >> 24);   // MSB
....................     buf[index + 1] = (int8)(value >> 16);
....................     buf[index + 2] = (int8)(value >>  8);
....................     buf[index + 3] = (int8)(value      );   // LSB
.................... }
.................... 
.................... int32 lsb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] <<  0) |
....................            ((int32)buf[index + 1] <<  8) |
....................            ((int32)buf[index + 2] << 16) |
....................            ((int32)buf[index + 3] << 24);
.................... }
.................... 
.................... 
.................... int32 msb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] << 24) |
....................            ((int32)buf[index + 1] << 16) |
....................            ((int32)buf[index + 2] <<  8) |
....................            ((int32)buf[index + 3]);
.................... }
.................... 
.................... unsigned int32 int32_lsb_to_msb(unsigned int32 value)
.................... {
....................     return ((value & 0x000000FF) << 24) |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0xFF000000) >> 24);
.................... }
.................... 
.................... unsigned int32 int32_msb_to_lsb(unsigned int32 value)
.................... {
....................     return ((value & 0xFF000000) >> 24) |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x000000FF) << 24);
.................... }
.................... // End of file
.................... 
.................... #include "../lib/tool/smf_queue.c"
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... typedef enum smf_memory_id_t{
....................     // SATO
....................     SMF_SATO_DATA_TABLE = 0xA0,
....................     SMF_SATO_PICLOG = 0xA1,
....................     SMF_SATO_INNER_DIODE_HEADER = 0xA2,
....................     SMF_SATO_INNER_DIODE_DATA = 0xA3,
....................     SMF_SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SMF_SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     SMF_CIGS_DATA_TABLE = 0xC0,
....................     SMF_CIGS_PICLOG = 0xC1,
....................     SMF_CIGS_ENVIRO = 0xC2,
....................     SMF_CIGS_IV1_HEADER = 0xC3,
....................     SMF_CIGS_IV1_DATA = 0xC4,
....................     SMF_CIGS_IV2_HEADER = 0xC5,
....................     SMF_CIGS_IV2_DATA = 0xC6,
.................... };
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS   0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS   0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS     0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS       0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS         0x06AB0FFF
.................... #define CIGS_ENVIRO_START_ADDRESS       0x06AB1000
.................... #define CIGS_ENVIRO_END_ADDRESS         0x06B50FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS   0x06B51000
.................... #define CIGS_IV1_HEADER_END_ADDRESS     0x06BF0FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS     0x06BF1000
.................... #define CIGS_IV1_DATA_END_ADDRESS       0x06FF0FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS   0x06FF1000
.................... #define CIGS_IV2_HEADER_END_ADDRESS     0x07090FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS     0x07091000
.................... #define CIGS_IV2_DATA_END_ADDRESS       0x07490FFF
.................... 
.................... /*
.................... enum smf_memory_id{
....................     // SATO
....................     SATO_DATA_TABLE = 0xA0,
....................     SATO_PICLOG = 0xA1,
....................     SATO_INNER_DIODE_HEADER = 0xA2,
....................     SATO_INNER_DIODE_DATA = 0xA3,
....................     SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     IDF_CIGS_DATA_TABLE = 0xC0,
....................     IDF_CIGS_PICLOG = 0xC1,
....................     IDF_CIGS_ENVIRO = 0xC2,
....................     IDF_CIGS_IV1_HEADER = 0xC3,
....................     IDF_CIGS_IV1_DATA = 0xC4,
....................     IDF_CIGS_IV2_HEADER = 0xC5,
....................     IDF_CIGS_IV2_DATA = 0xC6,
.................... }
.................... */
.................... // DATA ID for CIGS
.................... #define DATA_ID_CIGS_DATA_TABLE 0xC0
.................... #define DATA_ID_CIGS_PICLOG 0xC1
.................... #define DATA_ID_CIGS_ENVIRO 0xC2
.................... #define DATA_ID_CIGS_IV1_HEADER 0xC3
.................... #define DATA_ID_CIGS_IV1_DATA 0xC4
.................... #define DATA_ID_CIGS_IV2_HEADER 0xC5
.................... #define DATA_ID_CIGS_IV2_DATA 0xC6
.................... 
.................... // FLASH ADDRESS for CIGS
.................... #define SMF_DATA_TABLE_HEADER_START_ADDRESS   0x07284000
.................... #define SMF_DATA_TABLE_HEADER_END_ADDRESS     0x07284FFF
.................... #define SMF_DATA_TABLE_DATA_START_ADDRESS     0x07285000
.................... #define SMF_DATA_TABLE_DATA_END_ADDRESS       0x07285FFF
.................... 
.................... #define SMF_PICLOG_HEADER_START_ADDRESS       0x07286000
.................... #define SMF_PICLOG_HEADER_END_ADDRESS         0x07286FFF
.................... #define SMF_PICLOG_DATA_START_ADDRESS         0x07287000
.................... #define SMF_PICLOG_DATA_END_ADDRESS           0x07296FFF
.................... 
.................... #define SMF_ENVIRO_HEADER_START_ADDRESS       0x07297000
.................... #define SMF_ENVIRO_HEADER_END_ADDRESS         0x07297FFF
.................... #define SMF_ENVIRO_DATA_START_ADDRESS         0x07298000
.................... #define SMF_ENVIRO_DATA_END_ADDRESS           0x07337FFF
.................... 
.................... #define SMF_IV1_HEADER_HEADER_START_ADDRESS   0x07338000
.................... #define SMF_IV1_HEADER_HEADER_END_ADDRESS     0x07338FFF
.................... #define SMF_IV1_HEADER_DATA_START_ADDRESS     0x07339000
.................... #define SMF_IV1_HEADER_DATA_END_ADDRESS       0x073D8FFF
.................... 
.................... #define SMF_IV1_DATA_HEADER_START_ADDRESS     0x073D9000
.................... #define SMF_IV1_DATA_HEADER_END_ADDRESS       0x073D9FFF
.................... #define SMF_IV1_DATA_DATA_START_ADDRESS       0x073DA000
.................... #define SMF_IV1_DATA_DATA_END_ADDRESS         0x077D9FFF
.................... 
.................... #define SMF_IV2_HEADER_HEADER_START_ADDRESS   0x077DA000
.................... #define SMF_IV2_HEADER_HEADER_END_ADDRESS     0x077DAFFF
.................... #define SMF_IV2_HEADER_DATA_START_ADDRESS     0x077DB000
.................... #define SMF_IV2_HEADER_DATA_END_ADDRESS       0x0787AFFF
.................... 
.................... #define SMF_IV2_DATA_HEADER_START_ADDRESS     0x0787B000
.................... #define SMF_IV2_DATA_HEADER_END_ADDRESS       0x0787BFFF
.................... #define SMF_IV2_DATA_DATA_START_ADDRESS       0x0787C000
.................... #define SMF_IV2_DATA_DATA_END_ADDRESS         0x07C7BFFF
.................... 
.................... 
.................... // FLASH SIZE for CIGS
.................... #define SMF_DATA_TABLE_SIZE  4096
.................... #define SMF_PICLOG_SIZE     1310720
.................... #define SMF_ENVIRO_SIZE     1310720
.................... #define SMF_IV1_HEADER_SIZE  655360
.................... #define SMF_IV1_DATA_SIZE    4194304
.................... #define SMF_IV2_HEADER_SIZE  655360
.................... #define SMF_IV2_DATA_SIZE    4194304
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data)
.................... {   
....................    fprintf(PC, "Enqueue Flash Operation\r\n");
*
0AE5E:  MOVLW  98
0AE60:  MOVWF  FF6
0AE62:  MOVLW  03
0AE64:  MOVWF  FF7
0AE66:  MOVLW  00
0AE68:  MOVWF  FF8
0AE6A:  CALL   22FE
....................    int8 next_tail = (flash_queue.tail_index + 1) % SMF_QUEUE_SIZE;
0AE6E:  MOVLW  01
0AE70:  MOVLB  1
0AE72:  ADDWF  x11,W
0AE74:  ANDLW  0F
0AE76:  MOVWF  xE1
.................... 
....................    if(next_tail == flash_queue.head_index)
0AE78:  MOVF   x10,W
0AE7A:  SUBWF  xE1,W
0AE7C:  BTFSC  FD8.2
0AE7E:  BRA    AE86
0AE80:  MOVLB  0
0AE82:  GOTO   AE9C
0AE86:  MOVLB  0
....................       printf("Flash queue is full!!!\r\n");
0AE88:  MOVLW  B2
0AE8A:  MOVWF  FF6
0AE8C:  MOVLW  03
0AE8E:  MOVWF  FF7
0AE90:  MOVLW  00
0AE92:  MOVWF  FF8
0AE94:  CALL   22FE
0AE98:  GOTO   B0BC
....................       
....................    else
....................    {
....................       flash_queue.entries[flash_queue.tail_index].mission_id = data->mission_id;
0AE9C:  MOVLB  1
0AE9E:  MOVF   x11,W
0AEA0:  MULLW  0C
0AEA2:  MOVF   FF3,W
0AEA4:  CLRF   xE3
0AEA6:  MOVWF  xE2
0AEA8:  MOVLW  50
0AEAA:  ADDWF  xE2,W
0AEAC:  MOVWF  01
0AEAE:  MOVLW  00
0AEB0:  ADDWFC xE3,W
0AEB2:  MOVWF  03
0AEB4:  MOVF   01,W
0AEB6:  MOVWF  xE4
0AEB8:  MOVFF  03,1E5
0AEBC:  MOVF   xDF,W
0AEBE:  MOVWF  FE9
0AEC0:  MOVF   xE0,W
0AEC2:  MOVWF  FEA
0AEC4:  MOVF   FEF,W
0AEC6:  MOVWF  xE6
0AEC8:  MOVFF  1E5,FEA
0AECC:  MOVFF  1E4,FE9
0AED0:  MOVFF  1E6,FEF
....................       flash_queue.entries[flash_queue.tail_index].func_type  = data->func_type;
0AED4:  MOVF   x11,W
0AED6:  MULLW  0C
0AED8:  MOVF   FF3,W
0AEDA:  CLRF   xE3
0AEDC:  MOVWF  xE2
0AEDE:  MOVLW  01
0AEE0:  ADDWF  xE2,W
0AEE2:  MOVWF  01
0AEE4:  MOVLW  00
0AEE6:  ADDWFC xE3,W
0AEE8:  MOVWF  03
0AEEA:  MOVF   01,W
0AEEC:  ADDLW  50
0AEEE:  MOVWF  01
0AEF0:  MOVLW  00
0AEF2:  ADDWFC 03,F
0AEF4:  MOVF   01,W
0AEF6:  MOVWF  xE2
0AEF8:  MOVFF  03,1E3
0AEFC:  MOVLW  01
0AEFE:  ADDWF  xDF,W
0AF00:  MOVWF  FE9
0AF02:  MOVLW  00
0AF04:  ADDWFC xE0,W
0AF06:  MOVWF  FEA
0AF08:  MOVF   FEF,W
0AF0A:  MOVWF  xE4
0AF0C:  MOVFF  1E3,FEA
0AF10:  MOVFF  1E2,FE9
0AF14:  MOVFF  1E4,FEF
....................       flash_queue.entries[flash_queue.tail_index].write_mode = data->write_mode;
0AF18:  MOVF   x11,W
0AF1A:  MULLW  0C
0AF1C:  MOVF   FF3,W
0AF1E:  CLRF   xE3
0AF20:  MOVWF  xE2
0AF22:  MOVLW  02
0AF24:  ADDWF  xE2,W
0AF26:  MOVWF  01
0AF28:  MOVLW  00
0AF2A:  ADDWFC xE3,W
0AF2C:  MOVWF  03
0AF2E:  MOVF   01,W
0AF30:  ADDLW  50
0AF32:  MOVWF  01
0AF34:  MOVLW  00
0AF36:  ADDWFC 03,F
0AF38:  MOVF   01,W
0AF3A:  MOVWF  xE2
0AF3C:  MOVFF  03,1E3
0AF40:  MOVLW  02
0AF42:  ADDWF  xDF,W
0AF44:  MOVWF  FE9
0AF46:  MOVLW  00
0AF48:  ADDWFC xE0,W
0AF4A:  MOVWF  FEA
0AF4C:  MOVF   FEF,W
0AF4E:  MOVWF  xE4
0AF50:  MOVFF  1E3,FEA
0AF54:  MOVFF  1E2,FE9
0AF58:  MOVFF  1E4,FEF
....................       flash_queue.entries[flash_queue.tail_index].source_type = data->source_type;
0AF5C:  MOVF   x11,W
0AF5E:  MULLW  0C
0AF60:  MOVF   FF3,W
0AF62:  CLRF   xE3
0AF64:  MOVWF  xE2
0AF66:  MOVLW  03
0AF68:  ADDWF  xE2,W
0AF6A:  MOVWF  01
0AF6C:  MOVLW  00
0AF6E:  ADDWFC xE3,W
0AF70:  MOVWF  03
0AF72:  MOVF   01,W
0AF74:  ADDLW  50
0AF76:  MOVWF  01
0AF78:  MOVLW  00
0AF7A:  ADDWFC 03,F
0AF7C:  MOVF   01,W
0AF7E:  MOVWF  xE2
0AF80:  MOVFF  03,1E3
0AF84:  MOVLW  03
0AF86:  ADDWF  xDF,W
0AF88:  MOVWF  01
0AF8A:  MOVLW  00
0AF8C:  ADDWFC xE0,W
0AF8E:  MOVWF  03
0AF90:  MOVF   01,W
0AF92:  MOVWF  FE9
0AF94:  MOVFF  03,FEA
0AF98:  MOVLW  00
0AF9A:  BTFSC  FEF.0
0AF9C:  MOVLW  01
0AF9E:  MOVWF  01
0AFA0:  BTFSS  01.0
0AFA2:  BRA    AFAA
0AFA4:  MOVLB  0
0AFA6:  GOTO   AFBA
0AFAA:  MOVLB  0
0AFAC:  MOVFF  1E3,FEA
0AFB0:  MOVFF  1E2,FE9
0AFB4:  BCF    FEF.0
0AFB6:  GOTO   AFC4
0AFBA:  MOVFF  1E3,FEA
0AFBE:  MOVFF  1E2,FE9
0AFC2:  BSF    FEF.0
....................       flash_queue.entries[flash_queue.tail_index].misf_start_addr = data->misf_start_addr;
0AFC4:  MOVLB  1
0AFC6:  MOVF   x11,W
0AFC8:  MULLW  0C
0AFCA:  MOVF   FF3,W
0AFCC:  CLRF   xE3
0AFCE:  MOVWF  xE2
0AFD0:  MOVLW  04
0AFD2:  ADDWF  xE2,W
0AFD4:  MOVWF  01
0AFD6:  MOVLW  00
0AFD8:  ADDWFC xE3,W
0AFDA:  MOVWF  03
0AFDC:  MOVF   01,W
0AFDE:  ADDLW  50
0AFE0:  MOVWF  01
0AFE2:  MOVLW  00
0AFE4:  ADDWFC 03,F
0AFE6:  MOVF   01,W
0AFE8:  MOVWF  xE2
0AFEA:  MOVFF  03,1E3
0AFEE:  MOVLW  04
0AFF0:  ADDWF  xDF,W
0AFF2:  MOVWF  FE9
0AFF4:  MOVLW  00
0AFF6:  ADDWFC xE0,W
0AFF8:  MOVWF  FEA
0AFFA:  MOVFF  FEF,00
0AFFE:  MOVFF  FEC,01
0B002:  MOVFF  FEC,02
0B006:  MOVFF  FEC,03
0B00A:  MOVF   FED,F
0B00C:  MOVF   FED,F
0B00E:  MOVF   FED,F
0B010:  MOVFF  03,1E7
0B014:  MOVFF  02,1E6
0B018:  MOVFF  01,1E5
0B01C:  MOVFF  00,1E4
0B020:  MOVFF  1E3,FEA
0B024:  MOVFF  1E2,FE9
0B028:  MOVFF  1E4,FEF
0B02C:  MOVFF  1E5,FEC
0B030:  MOVFF  1E6,FEC
0B034:  MOVFF  1E7,FEC
0B038:  MOVF   FED,F
0B03A:  MOVF   FED,F
0B03C:  MOVF   FED,F
....................       flash_queue.entries[flash_queue.tail_index].misf_size = data->misf_size;
0B03E:  MOVF   x11,W
0B040:  MULLW  0C
0B042:  MOVF   FF3,W
0B044:  CLRF   xE3
0B046:  MOVWF  xE2
0B048:  MOVLW  08
0B04A:  ADDWF  xE2,W
0B04C:  MOVWF  01
0B04E:  MOVLW  00
0B050:  ADDWFC xE3,W
0B052:  MOVWF  03
0B054:  MOVF   01,W
0B056:  ADDLW  50
0B058:  MOVWF  01
0B05A:  MOVLW  00
0B05C:  ADDWFC 03,F
0B05E:  MOVF   01,W
0B060:  MOVWF  xE2
0B062:  MOVFF  03,1E3
0B066:  MOVLW  08
0B068:  ADDWF  xDF,W
0B06A:  MOVWF  FE9
0B06C:  MOVLW  00
0B06E:  ADDWFC xE0,W
0B070:  MOVWF  FEA
0B072:  MOVFF  FEF,00
0B076:  MOVFF  FEC,01
0B07A:  MOVFF  FEC,02
0B07E:  MOVFF  FEC,03
0B082:  MOVF   FED,F
0B084:  MOVF   FED,F
0B086:  MOVF   FED,F
0B088:  MOVFF  03,1E7
0B08C:  MOVFF  02,1E6
0B090:  MOVFF  01,1E5
0B094:  MOVFF  00,1E4
0B098:  MOVFF  1E3,FEA
0B09C:  MOVFF  1E2,FE9
0B0A0:  MOVFF  1E4,FEF
0B0A4:  MOVFF  1E5,FEC
0B0A8:  MOVFF  1E6,FEC
0B0AC:  MOVFF  1E7,FEC
0B0B0:  MOVF   FED,F
0B0B2:  MOVF   FED,F
0B0B4:  MOVF   FED,F
....................       flash_queue.tail_index = next_tail;
0B0B6:  MOVFF  1E1,111
0B0BA:  MOVLB  0
....................    }
0B0BC:  RETURN 0
.................... 
.................... 
.................... }
.................... 
.................... 
.................... FlashOperationStruct *dequeue_flash_operation()
.................... {
....................    if (flash_queue.head_index == flash_queue.tail_index)
*
0FE46:  MOVLB  1
0FE48:  MOVF   x11,W
0FE4A:  SUBWF  x10,W
0FE4C:  BTFSC  FD8.2
0FE4E:  BRA    FE56
0FE50:  MOVLB  0
0FE52:  GOTO   FE78
0FE56:  MOVLB  0
....................    {
....................       printf("Flash queue is empty\r\n");
0FE58:  MOVLW  CC
0FE5A:  MOVWF  FF6
0FE5C:  MOVLW  03
0FE5E:  MOVWF  FF7
0FE60:  MOVLW  00
0FE62:  MOVWF  FF8
0FE64:  CALL   22FE
....................       return 0x00;
0FE68:  MOVLW  00
0FE6A:  MOVWF  01
0FE6C:  MOVLW  00
0FE6E:  MOVWF  02
0FE70:  GOTO   FEA4
....................    }
0FE74:  GOTO   FEA4
....................    else
....................    {
....................       int8 current_head = flash_queue.head_index;
0FE78:  MOVFF  110,1A1
....................       flash_queue.head_index = (flash_queue.head_index + 1) % SMF_QUEUE_SIZE;
0FE7C:  MOVLW  01
0FE7E:  MOVLB  1
0FE80:  ADDWF  x10,W
0FE82:  ANDLW  0F
0FE84:  MOVWF  x10
.................... 
.................... 
....................       return &flash_queue.entries[current_head];
0FE86:  MOVF   xA1,W
0FE88:  MULLW  0C
0FE8A:  MOVF   FF3,W
0FE8C:  CLRF   03
0FE8E:  ADDLW  50
0FE90:  MOVWF  01
0FE92:  MOVLW  00
0FE94:  ADDWFC 03,F
0FE96:  MOVF   01,W
0FE98:  MOVWF  01
0FE9A:  MOVF   03,W
0FE9C:  MOVWF  02
0FE9E:  MOVLB  0
0FEA0:  GOTO   FEA4
....................    }
0FEA4:  GOTO   129DA (RETURN)
.................... }
.................... 
.................... int1 is_empty_flash_queue(void)
.................... {
....................    return flash_queue.head_index == flash_queue.tail_index;
*
0FD6A:  MOVLB  1
0FD6C:  MOVF   x11,W
0FD6E:  SUBWF  x10,W
0FD70:  BTFSS  FD8.2
0FD72:  BRA    FD7A
0FD74:  MOVLB  0
0FD76:  GOTO   FD82
0FD7A:  MOVLB  0
0FD7C:  MOVLW  00
0FD7E:  GOTO   FD84
0FD82:  MOVLW  01
0FD84:  MOVWF  01
0FD86:  RETURN 0
.................... }
.................... 
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id)
.................... {
....................    SmfAddressStruct mis_struct = {0};
*
11A12:  MOVLB  2
11A14:  CLRF   x0B
11A16:  CLRF   x0C
11A18:  CLRF   x0D
11A1A:  CLRF   x0E
11A1C:  CLRF   x0F
11A1E:  CLRF   x10
11A20:  CLRF   x11
11A22:  CLRF   x12
.................... 
....................    if (mission_id == CIGS_DATA_TABLE)
11A24:  MOVF   x0A,F
11A26:  BTFSC  FD8.2
11A28:  BRA    11A30
11A2A:  MOVLB  0
11A2C:  GOTO   11A54
11A30:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_DATA_TABLE_START_ADDRESS;
11A32:  MOVLW  06
11A34:  MOVLB  2
11A36:  MOVWF  x0E
11A38:  MOVLW  AA
11A3A:  MOVWF  x0D
11A3C:  CLRF   x0C
11A3E:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_DATA_TABLE_END_ADDRESS;
11A40:  MOVLW  06
11A42:  MOVWF  x12
11A44:  MOVLW  AA
11A46:  MOVWF  x11
11A48:  MOVLW  0F
11A4A:  MOVWF  x10
11A4C:  SETF   x0F
11A4E:  MOVLB  0
....................    }
11A50:  GOTO   11B90
....................    else if (mission_id == CIGS_PICLOG_DATA)
11A54:  MOVLB  2
11A56:  DECFSZ x0A,W
11A58:  BRA    11A5E
11A5A:  BRA    11A64
11A5C:  MOVLB  0
11A5E:  MOVLB  0
11A60:  GOTO   11A8A
11A64:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
11A66:  MOVLW  06
11A68:  MOVLB  2
11A6A:  MOVWF  x0E
11A6C:  MOVLW  AA
11A6E:  MOVWF  x0D
11A70:  MOVLW  10
11A72:  MOVWF  x0C
11A74:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
11A76:  MOVLW  06
11A78:  MOVWF  x12
11A7A:  MOVLW  AB
11A7C:  MOVWF  x11
11A7E:  MOVLW  0F
11A80:  MOVWF  x10
11A82:  SETF   x0F
11A84:  MOVLB  0
....................    }
11A86:  GOTO   11B90
....................    else if (mission_id == CIGS_ENVIRO_DATA)
11A8A:  MOVLB  2
11A8C:  MOVF   x0A,W
11A8E:  SUBLW  02
11A90:  BTFSC  FD8.2
11A92:  BRA    11A9A
11A94:  MOVLB  0
11A96:  GOTO   11AC0
11A9A:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
11A9C:  MOVLW  06
11A9E:  MOVLB  2
11AA0:  MOVWF  x0E
11AA2:  MOVLW  AA
11AA4:  MOVWF  x0D
11AA6:  MOVLW  10
11AA8:  MOVWF  x0C
11AAA:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
11AAC:  MOVLW  06
11AAE:  MOVWF  x12
11AB0:  MOVLW  AB
11AB2:  MOVWF  x11
11AB4:  MOVLW  0F
11AB6:  MOVWF  x10
11AB8:  SETF   x0F
11ABA:  MOVLB  0
....................    }
11ABC:  GOTO   11B90
....................    else if (mission_id == CIGS_IV1_HEADER)
11AC0:  MOVLB  2
11AC2:  MOVF   x0A,W
11AC4:  SUBLW  03
11AC6:  BTFSC  FD8.2
11AC8:  BRA    11AD0
11ACA:  MOVLB  0
11ACC:  GOTO   11AF6
11AD0:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV1_HEADER_START_ADDRESS;
11AD2:  MOVLW  06
11AD4:  MOVLB  2
11AD6:  MOVWF  x0E
11AD8:  MOVLW  B5
11ADA:  MOVWF  x0D
11ADC:  MOVLW  10
11ADE:  MOVWF  x0C
11AE0:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_IV1_HEADER_END_ADDRESS;
11AE2:  MOVLW  06
11AE4:  MOVWF  x12
11AE6:  MOVLW  BF
11AE8:  MOVWF  x11
11AEA:  MOVLW  0F
11AEC:  MOVWF  x10
11AEE:  SETF   x0F
11AF0:  MOVLB  0
....................    }
11AF2:  GOTO   11B90
....................    else if (mission_id == CIGS_IV1_DATA)
11AF6:  MOVLB  2
11AF8:  MOVF   x0A,W
11AFA:  SUBLW  04
11AFC:  BTFSC  FD8.2
11AFE:  BRA    11B06
11B00:  MOVLB  0
11B02:  GOTO   11B2A
11B06:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV1_DATA_START_ADDRESS;
11B08:  MOVLW  06
11B0A:  MOVLB  2
11B0C:  MOVWF  x0E
11B0E:  MOVLW  BF
11B10:  MOVWF  x0D
11B12:  MOVLW  10
11B14:  MOVWF  x0C
11B16:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_IV1_DATA_END_ADDRESS;
11B18:  MOVLW  06
11B1A:  MOVWF  x12
11B1C:  SETF   x11
11B1E:  MOVLW  0F
11B20:  MOVWF  x10
11B22:  SETF   x0F
11B24:  MOVLB  0
....................    }
11B26:  GOTO   11B90
....................       else if (mission_id == CIGS_IV2_HEADER)
11B2A:  MOVLB  2
11B2C:  MOVF   x0A,W
11B2E:  SUBLW  05
11B30:  BTFSC  FD8.2
11B32:  BRA    11B3A
11B34:  MOVLB  0
11B36:  GOTO   11B5E
11B3A:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV2_HEADER_START_ADDRESS;
11B3C:  MOVLW  06
11B3E:  MOVLB  2
11B40:  MOVWF  x0E
11B42:  SETF   x0D
11B44:  MOVLW  10
11B46:  MOVWF  x0C
11B48:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_IV2_HEADER_END_ADDRESS;
11B4A:  MOVLW  07
11B4C:  MOVWF  x12
11B4E:  MOVLW  09
11B50:  MOVWF  x11
11B52:  MOVLW  0F
11B54:  MOVWF  x10
11B56:  SETF   x0F
11B58:  MOVLB  0
....................    }
11B5A:  GOTO   11B90
....................    else if (mission_id == CIGS_IV2_DATA)
11B5E:  MOVLB  2
11B60:  MOVF   x0A,W
11B62:  SUBLW  06
11B64:  BTFSC  FD8.2
11B66:  BRA    11B6E
11B68:  MOVLB  0
11B6A:  GOTO   11B90
11B6E:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV2_DATA_START_ADDRESS;
11B70:  MOVLW  07
11B72:  MOVLB  2
11B74:  MOVWF  x0E
11B76:  MOVLW  09
11B78:  MOVWF  x0D
11B7A:  MOVLW  10
11B7C:  MOVWF  x0C
11B7E:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_IV2_DATA_END_ADDRESS;
11B80:  MOVLW  07
11B82:  MOVWF  x12
11B84:  MOVLW  49
11B86:  MOVWF  x11
11B88:  MOVLW  0F
11B8A:  MOVWF  x10
11B8C:  SETF   x0F
11B8E:  MOVLB  0
....................    }
....................    return mis_struct;
11B90:  MOVLW  0B
11B92:  MOVWF  01
11B94:  MOVLW  02
11B96:  MOVWF  02
11B98:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "../lib/communication/communication.c"
.................... // #include "communication.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #include "mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
05580:  MOVLB  1
05582:  CLRF   xA2
05584:  CLRF   xA3
05586:  CLRF   xA4
05588:  CLRF   xA5
0558A:  CLRF   xA6
0558C:  CLRF   xA7
0558E:  CLRF   xA8
05590:  CLRF   xA9
05592:  CLRF   xAA
05594:  CLRF   xAB
05596:  CLRF   xAC
05598:  CLRF   xAD
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
0559A:  MOVLW  E4
0559C:  MOVWF  FF6
0559E:  MOVLW  03
055A0:  MOVWF  FF7
055A2:  MOVLW  00
055A4:  MOVWF  FF8
055A6:  MOVLB  0
055A8:  CALL   22FE
....................    fprintf(PC, "\t[BOSS] >>> ");
055AC:  MOVLW  04
055AE:  MOVWF  FF6
055B0:  MOVLW  04
055B2:  MOVWF  FF7
055B4:  MOVLW  00
055B6:  MOVWF  FF8
055B8:  CALL   22FE
....................    for (int8 i = 0; i < receive_signal_size; i++)
055BC:  MOVLB  1
055BE:  CLRF   xAE
055C0:  MOVLB  0
055C2:  MOVLB  1
055C4:  MOVF   xA1,W
055C6:  SUBWF  xAE,W
055C8:  BTFSS  FD8.0
055CA:  BRA    55D2
055CC:  MOVLB  0
055CE:  GOTO   560E
055D2:  MOVLB  0
....................       fprintf(PC, "%X ", receive_signal[i]);
055D4:  MOVLB  1
055D6:  MOVF   xAE,W
055D8:  ADDWF  x9F,W
055DA:  MOVWF  FE9
055DC:  MOVLW  00
055DE:  ADDWFC xA0,W
055E0:  MOVWF  FEA
055E2:  MOVFF  FEF,1B5
055E6:  MOVFF  1B5,9E8
055EA:  MOVLW  37
055EC:  MOVLB  9
055EE:  MOVWF  xE9
055F0:  MOVLB  0
055F2:  CALL   2564
055F6:  MOVLW  20
055F8:  BTFSS  FA6.6
055FA:  GOTO   55F8
055FE:  MOVLB  E
05600:  MOVWF  xF9
05602:  MOVLB  0
05604:  MOVLB  1
05606:  INCF   xAE,F
05608:  MOVLB  0
0560A:  GOTO   55C2
....................    fprintf(PC, "\r\n");
0560E:  MOVLW  0D
05610:  BTFSS  FA6.6
05612:  GOTO   5610
05616:  MOVLB  E
05618:  MOVWF  xF9
0561A:  MOVLW  0A
0561C:  MOVLB  0
0561E:  BTFSS  FA6.6
05620:  GOTO   561E
05624:  MOVLB  E
05626:  MOVWF  xF9
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
05628:  MOVFF  1A0,1B6
0562C:  MOVFF  19F,1B5
05630:  MOVFF  1A1,1B7
05634:  MOVLB  0
05636:  GOTO   5268
0563A:  MOVFF  01,1AF
....................    if (frame_start_position == -1)
0563E:  MOVLB  1
05640:  MOVF   xAF,W
05642:  SUBLW  FF
05644:  BTFSC  FD8.2
05646:  BRA    564E
05648:  MOVLB  0
0564A:  GOTO   565C
0564E:  MOVLB  0
....................       return command;
05650:  MOVLW  A2
05652:  MOVWF  01
05654:  MOVLW  01
05656:  MOVWF  02
05658:  GOTO   577E
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
0565C:  MOVLB  1
0565E:  MOVF   xAF,W
05660:  ADDWF  x9F,W
05662:  MOVWF  01
05664:  MOVLW  00
05666:  ADDWFC xA0,W
05668:  MOVWF  03
0566A:  MOVF   01,W
0566C:  MOVWF  xB0
0566E:  MOVFF  03,1B1
05672:  MOVF   xB0,W
05674:  MOVWF  FE9
05676:  MOVF   xB1,W
05678:  MOVWF  FEA
0567A:  MOVF   FEF,W
0567C:  ANDLW  0F
0567E:  MOVWF  xB2
05680:  MOVFF  1B2,1B5
05684:  MOVLB  0
05686:  GOTO   5310
0568A:  MOVFF  01,1B3
....................    if (content_size == -1)
0568E:  MOVLB  1
05690:  MOVF   xB3,W
05692:  SUBLW  FF
05694:  BTFSC  FD8.2
05696:  BRA    569E
05698:  MOVLB  0
0569A:  GOTO   56AC
0569E:  MOVLB  0
....................       return command;
056A0:  MOVLW  A2
056A2:  MOVWF  01
056A4:  MOVLW  01
056A6:  MOVWF  02
056A8:  GOTO   577E
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
056AC:  MOVLB  1
056AE:  MOVF   xAF,W
056B0:  SUBWF  xA1,W
056B2:  MOVWF  xB4
....................    
....................    if (!check_crc(frame, receive_frame_size))
056B4:  MOVFF  1B1,1B6
056B8:  MOVFF  1B0,1B5
056BC:  MOVFF  1B4,1B7
056C0:  MOVLB  0
056C2:  GOTO   53D0
056C6:  MOVF   01,F
056C8:  BTFSS  FD8.2
056CA:  GOTO   56DA
....................       return command;
056CE:  MOVLW  A2
056D0:  MOVWF  01
056D2:  MOVLW  01
056D4:  MOVWF  02
056D6:  GOTO   577E
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
056DA:  MOVLB  1
056DC:  MOVF   xB0,W
056DE:  MOVWF  FE9
056E0:  MOVF   xB1,W
056E2:  MOVWF  FEA
056E4:  MOVF   FEF,W
056E6:  ANDLW  F0
056E8:  MOVWF  00
056EA:  SWAPF  00,W
056EC:  MOVWF  xB5
056EE:  MOVLW  0F
056F0:  ANDWF  xB5,F
056F2:  MOVFF  1B5,1B6
056F6:  MOVLB  0
056F8:  GOTO   54C0
056FC:  MOVF   01,F
056FE:  BTFSS  FD8.2
05700:  GOTO   5710
....................       return command;
05704:  MOVLW  A2
05706:  MOVWF  01
05708:  MOVLW  01
0570A:  MOVWF  02
0570C:  GOTO   577E
.................... 
....................    command.frame_id = frame_id;
05710:  MOVFF  1B2,1A2
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
05714:  MOVLW  01
05716:  MOVLB  1
05718:  ADDWF  xB0,W
0571A:  MOVWF  01
0571C:  MOVLW  00
0571E:  ADDWFC xB1,W
05720:  MOVWF  03
05722:  MOVF   01,W
05724:  MOVWF  xB5
05726:  MOVFF  03,1B6
0572A:  MOVLW  02
0572C:  SUBWF  xB4,W
0572E:  MOVWF  xB7
05730:  MOVLW  01
05732:  MOVWF  FEA
05734:  MOVLW  A5
05736:  MOVWF  FE9
05738:  MOVFF  1B6,FE2
0573C:  MOVFF  1B5,FE1
05740:  MOVF   xB7,W
05742:  MOVWF  01
05744:  BTFSS  FD8.2
05746:  BRA    574E
05748:  MOVLB  0
0574A:  GOTO   575A
0574E:  MOVLB  0
05750:  MOVFF  FE6,FEE
05754:  DECFSZ 01,F
05756:  GOTO   5750
....................    command.size = receive_frame_size-2;
0575A:  MOVLW  02
0575C:  MOVLB  1
0575E:  SUBWF  xB4,W
05760:  MOVWF  xA3
....................    command.is_exist = TRUE;
05762:  BSF    xA4.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
05764:  MOVLW  12
05766:  MOVWF  FF6
05768:  MOVLW  04
0576A:  MOVWF  FF7
0576C:  MOVLW  00
0576E:  MOVWF  FF8
05770:  MOVLB  0
05772:  CALL   22FE
....................    return command;
05776:  MOVLW  A2
05778:  MOVWF  01
0577A:  MOVLW  01
0577C:  MOVWF  02
0577E:  GOTO   134BE (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
05268:  MOVLB  1
0526A:  CLRF   xB8
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
0526C:  CLRF   xB8
0526E:  MOVLB  0
05270:  MOVLW  01
05272:  MOVLB  1
05274:  SUBWF  xB7,W
05276:  SUBWF  xB8,W
05278:  BTFSS  FD8.0
0527A:  BRA    5282
0527C:  MOVLB  0
0527E:  GOTO   52BA
05282:  MOVLB  0
....................       if(receive_signal[i] == SFD)
05284:  MOVLB  1
05286:  MOVF   xB8,W
05288:  ADDWF  xB5,W
0528A:  MOVWF  FE9
0528C:  MOVLW  00
0528E:  ADDWFC xB6,W
05290:  MOVWF  FEA
05292:  MOVF   FEF,W
05294:  SUBLW  AA
05296:  BTFSC  FD8.2
05298:  BRA    52A0
0529A:  MOVLB  0
0529C:  GOTO   52B0
052A0:  MOVLB  0
....................          return i+1;
052A2:  MOVLW  01
052A4:  MOVLB  1
052A6:  ADDWF  xB8,W
052A8:  MOVWF  01
052AA:  MOVLB  0
052AC:  GOTO   530C
052B0:  MOVLB  1
052B2:  INCF   xB8,F
052B4:  MOVLB  0
052B6:  GOTO   5270
....................    if (receive_signal[i] == SFD)
052BA:  MOVLB  1
052BC:  MOVF   xB8,W
052BE:  ADDWF  xB5,W
052C0:  MOVWF  FE9
052C2:  MOVLW  00
052C4:  ADDWFC xB6,W
052C6:  MOVWF  FEA
052C8:  MOVF   FEF,W
052CA:  SUBLW  AA
052CC:  BTFSC  FD8.2
052CE:  BRA    52D6
052D0:  MOVLB  0
052D2:  GOTO   52F4
052D6:  MOVLB  0
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
052D8:  MOVLW  2E
052DA:  MOVWF  FF6
052DC:  MOVLW  04
052DE:  MOVWF  FF7
052E0:  MOVLW  00
052E2:  MOVWF  FF8
052E4:  CALL   22FE
....................       return -1;
052E8:  MOVLW  FF
052EA:  MOVWF  01
052EC:  GOTO   530C
....................    }
052F0:  GOTO   530C
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
052F4:  MOVLW  44
052F6:  MOVWF  FF6
052F8:  MOVLW  04
052FA:  MOVWF  FF7
052FC:  MOVLW  00
052FE:  MOVWF  FF8
05300:  CALL   22FE
....................       return -1;
05304:  MOVLW  FF
05306:  MOVWF  01
05308:  GOTO   530C
....................    }
0530C:  GOTO   563A (RETURN)
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
05310:  MOVLB  1
05312:  CLRF   xB6
05314:  MOVLB  0
05316:  MOVLB  1
05318:  MOVF   xB6,W
0531A:  SUBLW  03
0531C:  BTFSC  FD8.0
0531E:  BRA    5326
05320:  MOVLB  0
05322:  GOTO   5384
05326:  MOVLB  0
....................       if (frame_id == frame_ids[i].id)
05328:  BCF    FD8.0
0532A:  MOVLB  1
0532C:  RLCF   xB6,W
0532E:  CLRF   xB8
05330:  MOVWF  xB7
05332:  MOVLW  1A
05334:  ADDWF  xB7,W
05336:  MOVWF  FE9
05338:  MOVLW  01
0533A:  ADDWFC xB8,W
0533C:  MOVWF  FEA
0533E:  MOVF   FEF,W
05340:  SUBWF  xB5,W
05342:  BTFSC  FD8.2
05344:  BRA    534C
05346:  MOVLB  0
05348:  GOTO   537A
0534C:  MOVLB  0
....................          return frame_ids[i].length;
0534E:  BCF    FD8.0
05350:  MOVLB  1
05352:  RLCF   xB6,W
05354:  CLRF   xB8
05356:  MOVWF  xB7
05358:  MOVLW  01
0535A:  ADDWF  xB7,W
0535C:  MOVWF  01
0535E:  MOVLW  00
05360:  ADDWFC xB8,W
05362:  MOVWF  03
05364:  MOVF   01,W
05366:  ADDLW  1A
05368:  MOVWF  FE9
0536A:  MOVLW  01
0536C:  ADDWFC 03,W
0536E:  MOVWF  FEA
05370:  MOVF   FEF,W
05372:  MOVWF  01
05374:  MOVLB  0
05376:  GOTO   53CA
0537A:  MOVLB  1
0537C:  INCF   xB6,F
0537E:  MOVLB  0
05380:  GOTO   5316
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
05384:  MOVLW  56
05386:  MOVWF  FF6
05388:  MOVLW  04
0538A:  MOVWF  FF7
0538C:  MOVLW  00
0538E:  MOVWF  FF8
05390:  MOVLW  1F
05392:  MOVLB  A
05394:  MOVWF  x4E
05396:  MOVLB  0
05398:  CALL   2334
0539C:  MOVFF  1B5,9E8
053A0:  MOVLW  37
053A2:  MOVLB  9
053A4:  MOVWF  xE9
053A6:  MOVLB  0
053A8:  CALL   2564
053AC:  MOVLW  0D
053AE:  BTFSS  FA6.6
053B0:  GOTO   53AE
053B4:  MOVLB  E
053B6:  MOVWF  xF9
053B8:  MOVLW  0A
053BA:  MOVLB  0
053BC:  BTFSS  FA6.6
053BE:  GOTO   53BC
053C2:  MOVLB  E
053C4:  MOVWF  xF9
....................    return -1;
053C6:  MOVLW  FF
053C8:  MOVWF  01
053CA:  MOVLB  0
053CC:  GOTO   568A (RETURN)
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
053D0:  MOVLW  01
053D2:  MOVLB  1
053D4:  SUBWF  xB7,W
053D6:  ADDWF  xB5,W
053D8:  MOVWF  FE9
053DA:  MOVLW  00
053DC:  ADDWFC xB6,W
053DE:  MOVWF  FEA
053E0:  MOVFF  FEF,1B8
053E4:  MOVLW  01
053E6:  SUBWF  xB7,W
053E8:  MOVWF  xBA
053EA:  MOVFF  1B6,AEC
053EE:  MOVFF  1B5,AEB
053F2:  MOVFF  1BA,AED
053F6:  MOVLB  0
053F8:  CALL   310C
053FC:  MOVFF  01,1B9
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
05400:  MOVLB  1
05402:  MOVF   xB9,W
05404:  SUBWF  xB8,W
05406:  BTFSC  FD8.2
05408:  BRA    5410
0540A:  MOVLB  0
0540C:  GOTO   541E
05410:  MOVLB  0
....................       return TRUE;
05412:  MOVLW  01
05414:  MOVWF  01
05416:  GOTO   54BC
0541A:  GOTO   54BC
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
0541E:  MOVLW  7A
05420:  MOVWF  FF6
05422:  MOVLW  04
05424:  MOVWF  FF7
05426:  MOVLW  00
05428:  MOVWF  FF8
0542A:  CALL   22FE
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
0542E:  MOVLW  8C
05430:  MOVWF  FF6
05432:  MOVLW  04
05434:  MOVWF  FF7
05436:  MOVLW  00
05438:  MOVWF  FF8
0543A:  MOVLW  13
0543C:  MOVLB  A
0543E:  MOVWF  x4E
05440:  MOVLB  0
05442:  CALL   2334
05446:  MOVFF  1B8,9E8
0544A:  MOVLW  37
0544C:  MOVLB  9
0544E:  MOVWF  xE9
05450:  MOVLB  0
05452:  CALL   2564
05456:  MOVLW  0D
05458:  BTFSS  FA6.6
0545A:  GOTO   5458
0545E:  MOVLB  E
05460:  MOVWF  xF9
05462:  MOVLW  0A
05464:  MOVLB  0
05466:  BTFSS  FA6.6
05468:  GOTO   5466
0546C:  MOVLB  E
0546E:  MOVWF  xF9
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
05470:  MOVLW  A4
05472:  MOVWF  FF6
05474:  MOVLW  04
05476:  MOVWF  FF7
05478:  MOVLW  00
0547A:  MOVWF  FF8
0547C:  MOVLW  13
0547E:  MOVLB  A
05480:  MOVWF  x4E
05482:  MOVLB  0
05484:  CALL   2334
05488:  MOVFF  1B9,9E8
0548C:  MOVLW  37
0548E:  MOVLB  9
05490:  MOVWF  xE9
05492:  MOVLB  0
05494:  CALL   2564
05498:  MOVLW  0D
0549A:  BTFSS  FA6.6
0549C:  GOTO   549A
054A0:  MOVLB  E
054A2:  MOVWF  xF9
054A4:  MOVLW  0A
054A6:  MOVLB  0
054A8:  BTFSS  FA6.6
054AA:  GOTO   54A8
054AE:  MOVLB  E
054B0:  MOVWF  xF9
....................       return FALSE;
054B2:  MOVLW  00
054B4:  MOVWF  01
054B6:  MOVLB  0
054B8:  GOTO   54BC
....................    }
054BC:  GOTO   56C6 (RETURN)
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
054C0:  MOVLB  1
054C2:  MOVF   xB6,W
054C4:  SUBLW  0C
054C6:  BTFSC  FD8.2
054C8:  BRA    54D0
054CA:  MOVLB  0
054CC:  GOTO   54DE
054D0:  MOVLB  0
....................       return TRUE;
054D2:  MOVLW  01
054D4:  MOVWF  01
054D6:  GOTO   557C
054DA:  GOTO   557C
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
054DE:  MOVLW  BC
054E0:  MOVWF  FF6
054E2:  MOVLW  04
054E4:  MOVWF  FF7
054E6:  MOVLW  00
054E8:  MOVWF  FF8
054EA:  CALL   22FE
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
054EE:  MOVLW  DE
054F0:  MOVWF  FF6
054F2:  MOVLW  04
054F4:  MOVWF  FF7
054F6:  MOVLW  00
054F8:  MOVWF  FF8
054FA:  MOVLW  13
054FC:  MOVLB  A
054FE:  MOVWF  x4E
05500:  MOVLB  0
05502:  CALL   2334
05506:  MOVFF  1B6,9E8
0550A:  MOVLW  37
0550C:  MOVLB  9
0550E:  MOVWF  xE9
05510:  MOVLB  0
05512:  CALL   2564
05516:  MOVLW  0D
05518:  BTFSS  FA6.6
0551A:  GOTO   5518
0551E:  MOVLB  E
05520:  MOVWF  xF9
05522:  MOVLW  0A
05524:  MOVLB  0
05526:  BTFSS  FA6.6
05528:  GOTO   5526
0552C:  MOVLB  E
0552E:  MOVWF  xF9
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
05530:  MOVLW  F6
05532:  MOVWF  FF6
05534:  MOVLW  04
05536:  MOVWF  FF7
05538:  MOVLW  00
0553A:  MOVWF  FF8
0553C:  MOVLW  13
0553E:  MOVLB  A
05540:  MOVWF  x4E
05542:  MOVLB  0
05544:  CALL   2334
05548:  MOVLW  0C
0554A:  MOVLB  9
0554C:  MOVWF  xE8
0554E:  MOVLW  37
05550:  MOVWF  xE9
05552:  MOVLB  0
05554:  CALL   2564
05558:  MOVLW  0D
0555A:  BTFSS  FA6.6
0555C:  GOTO   555A
05560:  MOVLB  E
05562:  MOVWF  xF9
05564:  MOVLW  0A
05566:  MOVLB  0
05568:  BTFSS  FA6.6
0556A:  GOTO   5568
0556E:  MOVLB  E
05570:  MOVWF  xF9
....................       return FALSE;  
05572:  MOVLW  00
05574:  MOVWF  01
05576:  MOVLB  0
05578:  GOTO   557C
....................    }
0557C:  GOTO   56FC (RETURN)
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
0588C:  MOVLW  AA
0588E:  MOVLB  1
05890:  MOVWF  xE3
....................    data[1] = (BOSS_PIC << 4) | frame_id;
05892:  MOVF   xDF,W
05894:  IORLW  50
05896:  MOVWF  xE4
....................    memcpy(&data[2], content, size);
05898:  MOVLW  01
0589A:  MOVWF  FEA
0589C:  MOVLW  E5
0589E:  MOVWF  FE9
058A0:  MOVFF  1E1,FE2
058A4:  MOVFF  1E0,FE1
058A8:  MOVF   xE2,W
058AA:  MOVWF  01
058AC:  BTFSS  FD8.2
058AE:  BRA    58B6
058B0:  MOVLB  0
058B2:  GOTO   58C2
058B6:  MOVLB  0
058B8:  MOVFF  FE6,FEE
058BC:  DECFSZ 01,F
058BE:  GOTO   58B8
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
058C2:  MOVLW  02
058C4:  MOVLB  1
058C6:  ADDWF  xE2,W
058C8:  MOVWF  xF3
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
058CA:  CLRF   03
058CC:  MOVF   xF3,W
058CE:  ADDLW  E3
058D0:  MOVWF  01
058D2:  MOVLW  01
058D4:  ADDWFC 03,F
058D6:  MOVF   01,W
058D8:  MOVWF  xF5
058DA:  MOVFF  03,1F6
058DE:  MOVLW  01
058E0:  SUBWF  xF3,W
058E2:  MOVWF  xF7
058E4:  MOVLW  01
058E6:  MOVLB  A
058E8:  MOVWF  xEC
058EA:  MOVLW  E4
058EC:  MOVWF  xEB
058EE:  MOVFF  1F7,AED
058F2:  MOVLB  0
058F4:  CALL   310C
058F8:  MOVFF  1F6,FEA
058FC:  MOVFF  1F5,FE9
05900:  MOVFF  01,FEF
....................    int8 data_size = payload_size + 1; // '1' is for CRC
05904:  MOVLW  01
05906:  MOVLB  1
05908:  ADDWF  xF3,W
0590A:  MOVWF  xF4
....................    
....................    transmit(data, data_size);
0590C:  MOVLW  01
0590E:  MOVWF  xF6
05910:  MOVLW  E3
05912:  MOVWF  xF5
05914:  MOVFF  1F4,1F7
05918:  MOVLB  0
0591A:  GOTO   57CE
0591E:  RETURN 0
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
057CE:  MOVLB  1
057D0:  CLRF   xF8
057D2:  MOVLB  0
057D4:  MOVLB  1
057D6:  MOVF   xF7,W
057D8:  SUBWF  xF8,W
057DA:  BTFSS  FD8.0
057DC:  BRA    57E4
057DE:  MOVLB  0
057E0:  GOTO   580A
057E4:  MOVLB  0
....................       fputc(data[i], BOSS);
057E6:  MOVLB  1
057E8:  MOVF   xF8,W
057EA:  ADDWF  xF5,W
057EC:  MOVWF  FE9
057EE:  MOVLW  00
057F0:  ADDWFC xF6,W
057F2:  MOVWF  FEA
057F4:  MOVFF  FEF,1FA
057F8:  MOVF   xFA,W
057FA:  MOVLB  0
057FC:  GOTO   57BE
05800:  MOVLB  1
05802:  INCF   xF8,F
05804:  MOVLB  0
05806:  GOTO   57D4
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
0580A:  MOVLW  0E
0580C:  MOVWF  FF6
0580E:  MOVLW  05
05810:  MOVWF  FF7
05812:  MOVLW  00
05814:  MOVWF  FF8
05816:  CALL   22FE
....................    for(int i = 0; i < data_size; i++)
0581A:  MOVLB  1
0581C:  CLRF   xF9
0581E:  MOVLB  0
05820:  MOVLB  1
05822:  MOVF   xF7,W
05824:  SUBWF  xF9,W
05826:  BTFSS  FD8.0
05828:  BRA    5830
0582A:  MOVLB  0
0582C:  GOTO   586C
05830:  MOVLB  0
....................       fprintf(PC, "%X ", data[i]);
05832:  MOVLB  1
05834:  MOVF   xF9,W
05836:  ADDWF  xF5,W
05838:  MOVWF  FE9
0583A:  MOVLW  00
0583C:  ADDWFC xF6,W
0583E:  MOVWF  FEA
05840:  MOVFF  FEF,1FA
05844:  MOVFF  1FA,9E8
05848:  MOVLW  37
0584A:  MOVLB  9
0584C:  MOVWF  xE9
0584E:  MOVLB  0
05850:  CALL   2564
05854:  MOVLW  20
05856:  BTFSS  FA6.6
05858:  GOTO   5856
0585C:  MOVLB  E
0585E:  MOVWF  xF9
05860:  MOVLB  0
05862:  MOVLB  1
05864:  INCF   xF9,F
05866:  MOVLB  0
05868:  GOTO   5820
....................    fprintf(PC, "\r\n");
0586C:  MOVLW  0D
0586E:  BTFSS  FA6.6
05870:  GOTO   586E
05874:  MOVLB  E
05876:  MOVWF  xF9
05878:  MOVLW  0A
0587A:  MOVLB  0
0587C:  BTFSS  FA6.6
0587E:  GOTO   587C
05882:  MOVLB  E
05884:  MOVWF  xF9
05886:  MOVLB  0
05888:  GOTO   591E (RETURN)
.................... }
.................... 
.................... #include "../lib/communication/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    return command;
.................... }
.................... 
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
05920:  MOVLW  0F
05922:  MOVLB  1
05924:  MOVWF  xDF
05926:  CLRF   xE1
05928:  CLRF   xE0
0592A:  CLRF   xE2
0592C:  MOVLB  0
0592E:  CALL   588C
05932:  RETURN 0
.................... }
.................... 
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
0AE06:  MOVLW  03
0AE08:  MOVLB  1
0AE0A:  MOVWF  xDF
0AE0C:  CLRF   xE1
0AE0E:  MOVLW  4C
0AE10:  MOVWF  xE0
0AE12:  MOVLW  04
0AE14:  MOVWF  xE2
0AE16:  MOVLB  0
0AE18:  CALL   588C
0AE1C:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (boss_receive_buffer_size > 0)
0AE1E:  MOVF   4A,F
0AE20:  BTFSC  FD8.2
0AE22:  GOTO   AE5A
....................    {
....................       clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
0AE26:  MOVLB  1
0AE28:  CLRF   xE0
0AE2A:  MOVLW  2A
0AE2C:  MOVWF  xDF
0AE2E:  CLRF   xE2
0AE30:  MOVLW  4A
0AE32:  MOVWF  xE1
0AE34:  MOVLB  0
0AE36:  CALL   5782
....................       fprintf(PC, "\r\n");
0AE3A:  MOVLW  0D
0AE3C:  BTFSS  FA6.6
0AE3E:  GOTO   AE3C
0AE42:  MOVLB  E
0AE44:  MOVWF  xF9
0AE46:  MOVLW  0A
0AE48:  MOVLB  0
0AE4A:  BTFSS  FA6.6
0AE4C:  GOTO   AE4A
0AE50:  MOVLB  E
0AE52:  MOVWF  xF9
....................       transmit_status();
0AE54:  MOVLB  0
0AE56:  CALL   AE06
....................    }
0AE5A:  GOTO   B1A8 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... // コア機能実装ファイル
.................... #include "domain/cigs_iv.c"
.................... #include "cigs_iv.h"      
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_limit);  
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x300];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         unsigned int8 envdata[6];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
....................     
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *measured_data_ptr, sweep_config_t *port_data_ptr);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/cigs_config.h"      
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../device_driver/ad7490_driver.h"  
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../device_driver/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "cigs_flash.h"               
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/mission_tools.h"   
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../hal/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... #INT_TIMER1 
.................... static void TIMER1_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... void set_current_sec(unsigned int32 new_sec);
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void sweep_with_print()
*
0D1D6:  MOVLW  03
0D1D8:  MOVLB  1
0D1DA:  MOVWF  xB0
0D1DC:  CLRF   xAF
0D1DE:  MOVLW  07
0D1E0:  MOVWF  xB2
0D1E2:  MOVLW  E0
0D1E4:  MOVWF  xB1
.................... {
....................     unsigned int16 curr_threshold = 0x300;
....................     unsigned int16 curr_limit = 0x7E0;
.................... 
....................     // Enable both CIGS ports
....................     connect_port1();
0D1E6:  MOVLB  0
0D1E8:  CALL   5234
....................     connect_port2();
0D1EC:  CALL   523C
....................     mcp4901_1_write(0); 
0D1F0:  MOVLB  9
0D1F2:  CLRF   xDD
0D1F4:  CLRF   xDC
0D1F6:  MOVLB  0
0D1F8:  CALL   2894
....................     mcp4901_2_write(0);
0D1FC:  MOVLB  9
0D1FE:  CLRF   xDD
0D200:  CLRF   xDC
0D202:  MOVLB  0
0D204:  CALL   28D2
....................     delay_ms(100);
0D208:  MOVLW  64
0D20A:  MOVLB  B
0D20C:  MOVWF  x03
0D20E:  MOVLB  0
0D210:  CALL   22D0
....................     
....................     // Init Port1
....................     sweep_debug_config_t port1 = {0};
0D214:  MOVLB  1
0D216:  CLRF   xB3
0D218:  CLRF   xB4
0D21A:  CLRF   xB5
0D21C:  CLRF   xB6
0D21E:  CLRF   xB7
0D220:  CLRF   xB8
0D222:  CLRF   xB9
0D224:  CLRF   xBA
0D226:  CLRF   xBB
0D228:  CLRF   xBC
0D22A:  CLRF   xBD
0D22C:  CLRF   xBE
0D22E:  CLRF   xBF
0D230:  CLRF   xC0
0D232:  CLRF   xC1
0D234:  CLRF   xC2
0D236:  CLRF   xC3
0D238:  CLRF   xC4
0D23A:  CLRF   xC5
0D23C:  CLRF   xC6
0D23E:  CLRF   xC7
0D240:  CLRF   xC8
0D242:  CLRF   xC9
0D244:  CLRF   xCA
0D246:  CLRF   xCB
0D248:  CLRF   xCC
0D24A:  CLRF   xCD
0D24C:  CLRF   xCE
0D24E:  CLRF   xCF
0D250:  CLRF   xD0
0D252:  CLRF   xD1
0D254:  CLRF   xD2
0D256:  CLRF   xD3
0D258:  CLRF   xD4
0D25A:  CLRF   xD5
0D25C:  CLRF   xD6
0D25E:  CLRF   xD7
0D260:  CLRF   xD8
0D262:  CLRF   xD9
0D264:  CLRF   xDA
0D266:  CLRF   xDB
0D268:  CLRF   xDC
0D26A:  CLRF   xDD
0D26C:  CLRF   xDE
0D26E:  CLRF   xDF
0D270:  CLRF   xE0
0D272:  CLRF   xE1
0D274:  CLRF   xE2
0D276:  CLRF   xE3
0D278:  CLRF   xE4
0D27A:  CLRF   xE5
0D27C:  CLRF   xE6
0D27E:  CLRF   xE7
0D280:  CLRF   xE8
0D282:  CLRF   xE9
0D284:  CLRF   xEA
0D286:  CLRF   xEB
0D288:  CLRF   xEC
0D28A:  CLRF   xED
0D28C:  CLRF   xEE
0D28E:  CLRF   xEF
0D290:  CLRF   xF0
0D292:  CLRF   xF1
0D294:  CLRF   xF2
0D296:  CLRF   xF3
0D298:  CLRF   xF4
0D29A:  CLRF   xF5
0D29C:  CLRF   xF6
0D29E:  CLRF   xF7
0D2A0:  CLRF   xF8
0D2A2:  CLRF   xF9
0D2A4:  CLRF   xFA
0D2A6:  CLRF   xFB
0D2A8:  CLRF   xFC
0D2AA:  CLRF   xFD
0D2AC:  CLRF   xFE
0D2AE:  CLRF   xFF
0D2B0:  MOVLB  2
0D2B2:  CLRF   x00
0D2B4:  CLRF   x01
0D2B6:  CLRF   x02
0D2B8:  CLRF   x03
0D2BA:  CLRF   x04
0D2BC:  CLRF   x05
0D2BE:  CLRF   x06
0D2C0:  CLRF   x07
0D2C2:  CLRF   x08
0D2C4:  CLRF   x09
0D2C6:  CLRF   x0A
0D2C8:  CLRF   x0B
0D2CA:  CLRF   x0C
0D2CC:  CLRF   x0D
0D2CE:  CLRF   x0E
0D2D0:  CLRF   x0F
0D2D2:  CLRF   x10
0D2D4:  CLRF   x11
0D2D6:  CLRF   x12
0D2D8:  CLRF   x13
0D2DA:  CLRF   x14
0D2DC:  CLRF   x15
0D2DE:  CLRF   x16
0D2E0:  CLRF   x17
0D2E2:  CLRF   x18
0D2E4:  CLRF   x19
0D2E6:  CLRF   x1A
0D2E8:  CLRF   x1B
0D2EA:  CLRF   x1C
0D2EC:  CLRF   x1D
0D2EE:  CLRF   x1E
0D2F0:  CLRF   x1F
0D2F2:  CLRF   x20
0D2F4:  CLRF   x21
0D2F6:  CLRF   x22
0D2F8:  CLRF   x23
0D2FA:  CLRF   x24
0D2FC:  CLRF   x25
0D2FE:  CLRF   x26
0D300:  CLRF   x27
0D302:  CLRF   x28
0D304:  CLRF   x29
0D306:  CLRF   x2A
0D308:  CLRF   x2B
0D30A:  CLRF   x2C
0D30C:  CLRF   x2D
0D30E:  CLRF   x2E
0D310:  CLRF   x2F
0D312:  CLRF   x30
0D314:  CLRF   x31
0D316:  CLRF   x32
0D318:  CLRF   x33
0D31A:  CLRF   x34
0D31C:  CLRF   x35
0D31E:  CLRF   x36
0D320:  CLRF   x37
0D322:  CLRF   x38
0D324:  CLRF   x39
0D326:  CLRF   x3A
0D328:  CLRF   x3B
0D32A:  CLRF   x3C
0D32C:  CLRF   x3D
0D32E:  CLRF   x3E
0D330:  CLRF   x3F
0D332:  CLRF   x40
0D334:  CLRF   x41
0D336:  CLRF   x42
0D338:  CLRF   x43
0D33A:  CLRF   x44
0D33C:  CLRF   x45
0D33E:  CLRF   x46
0D340:  CLRF   x47
0D342:  CLRF   x48
0D344:  CLRF   x49
0D346:  CLRF   x4A
0D348:  CLRF   x4B
0D34A:  CLRF   x4C
0D34C:  CLRF   x4D
0D34E:  CLRF   x4E
0D350:  CLRF   x4F
0D352:  CLRF   x50
0D354:  CLRF   x51
0D356:  CLRF   x52
0D358:  CLRF   x53
0D35A:  CLRF   x54
0D35C:  CLRF   x55
0D35E:  CLRF   x56
0D360:  CLRF   x57
0D362:  CLRF   x58
0D364:  CLRF   x59
0D366:  CLRF   x5A
0D368:  CLRF   x5B
0D36A:  CLRF   x5C
0D36C:  CLRF   x5D
0D36E:  CLRF   x5E
0D370:  CLRF   x5F
0D372:  CLRF   x60
0D374:  CLRF   x61
0D376:  CLRF   x62
0D378:  CLRF   x63
0D37A:  CLRF   x64
0D37C:  CLRF   x65
0D37E:  CLRF   x66
0D380:  CLRF   x67
0D382:  CLRF   x68
0D384:  CLRF   x69
0D386:  CLRF   x6A
0D388:  CLRF   x6B
0D38A:  CLRF   x6C
0D38C:  CLRF   x6D
0D38E:  CLRF   x6E
0D390:  CLRF   x6F
0D392:  CLRF   x70
0D394:  CLRF   x71
0D396:  CLRF   x72
0D398:  CLRF   x73
0D39A:  CLRF   x74
0D39C:  CLRF   x75
0D39E:  CLRF   x76
0D3A0:  CLRF   x77
0D3A2:  CLRF   x78
0D3A4:  CLRF   x79
0D3A6:  CLRF   x7A
0D3A8:  CLRF   x7B
0D3AA:  CLRF   x7C
0D3AC:  CLRF   x7D
0D3AE:  CLRF   x7E
0D3B0:  CLRF   x7F
0D3B2:  CLRF   x80
0D3B4:  CLRF   x81
0D3B6:  CLRF   x82
0D3B8:  CLRF   x83
0D3BA:  CLRF   x84
0D3BC:  CLRF   x85
0D3BE:  CLRF   x86
0D3C0:  CLRF   x87
0D3C2:  CLRF   x88
0D3C4:  CLRF   x89
0D3C6:  CLRF   x8A
0D3C8:  CLRF   x8B
0D3CA:  CLRF   x8C
0D3CC:  CLRF   x8D
0D3CE:  CLRF   x8E
0D3D0:  CLRF   x8F
0D3D2:  CLRF   x90
0D3D4:  CLRF   x91
0D3D6:  CLRF   x92
0D3D8:  CLRF   x93
0D3DA:  CLRF   x94
0D3DC:  CLRF   x95
0D3DE:  CLRF   x96
0D3E0:  CLRF   x97
0D3E2:  CLRF   x98
0D3E4:  CLRF   x99
0D3E6:  CLRF   x9A
0D3E8:  CLRF   x9B
0D3EA:  CLRF   x9C
0D3EC:  CLRF   x9D
0D3EE:  CLRF   x9E
0D3F0:  CLRF   x9F
0D3F2:  CLRF   xA0
0D3F4:  CLRF   xA1
0D3F6:  CLRF   xA2
0D3F8:  CLRF   xA3
0D3FA:  CLRF   xA4
0D3FC:  CLRF   xA5
0D3FE:  CLRF   xA6
0D400:  CLRF   xA7
0D402:  CLRF   xA8
0D404:  CLRF   xA9
0D406:  CLRF   xAA
0D408:  CLRF   xAB
0D40A:  CLRF   xAC
0D40C:  CLRF   xAD
0D40E:  CLRF   xAE
0D410:  CLRF   xAF
0D412:  CLRF   xB0
0D414:  CLRF   xB1
0D416:  CLRF   xB2
0D418:  CLRF   xB3
0D41A:  CLRF   xB4
0D41C:  CLRF   xB5
0D41E:  CLRF   xB6
0D420:  CLRF   xB7
0D422:  CLRF   xB8
0D424:  CLRF   xB9
0D426:  CLRF   xBA
0D428:  CLRF   xBB
0D42A:  CLRF   xBC
0D42C:  CLRF   xBD
0D42E:  CLRF   xBE
0D430:  CLRF   xBF
0D432:  CLRF   xC0
0D434:  CLRF   xC1
0D436:  CLRF   xC2
0D438:  CLRF   xC3
0D43A:  CLRF   xC4
0D43C:  CLRF   xC5
0D43E:  CLRF   xC6
0D440:  CLRF   xC7
0D442:  CLRF   xC8
0D444:  CLRF   xC9
0D446:  CLRF   xCA
0D448:  CLRF   xCB
0D44A:  CLRF   xCC
0D44C:  CLRF   xCD
0D44E:  CLRF   xCE
0D450:  CLRF   xCF
0D452:  CLRF   xD0
0D454:  CLRF   xD1
0D456:  CLRF   xD2
0D458:  CLRF   xD3
0D45A:  CLRF   xD4
0D45C:  CLRF   xD5
0D45E:  CLRF   xD6
0D460:  CLRF   xD7
0D462:  CLRF   xD8
0D464:  CLRF   xD9
0D466:  CLRF   xDA
0D468:  CLRF   xDB
0D46A:  CLRF   xDC
0D46C:  CLRF   xDD
0D46E:  CLRF   xDE
0D470:  CLRF   xDF
0D472:  CLRF   xE0
0D474:  CLRF   xE1
0D476:  CLRF   xE2
0D478:  CLRF   xE3
0D47A:  CLRF   xE4
0D47C:  CLRF   xE5
0D47E:  CLRF   xE6
0D480:  CLRF   xE7
0D482:  CLRF   xE8
0D484:  CLRF   xE9
0D486:  CLRF   xEA
0D488:  CLRF   xEB
0D48A:  CLRF   xEC
0D48C:  CLRF   xED
0D48E:  CLRF   xEE
0D490:  CLRF   xEF
0D492:  CLRF   xF0
0D494:  CLRF   xF1
0D496:  CLRF   xF2
0D498:  CLRF   xF3
0D49A:  CLRF   xF4
0D49C:  CLRF   xF5
0D49E:  CLRF   xF6
0D4A0:  CLRF   xF7
0D4A2:  CLRF   xF8
0D4A4:  CLRF   xF9
0D4A6:  CLRF   xFA
0D4A8:  CLRF   xFB
0D4AA:  CLRF   xFC
0D4AC:  CLRF   xFD
0D4AE:  CLRF   xFE
0D4B0:  CLRF   xFF
0D4B2:  MOVLB  3
0D4B4:  CLRF   x00
0D4B6:  CLRF   x01
0D4B8:  CLRF   x02
0D4BA:  CLRF   x03
0D4BC:  CLRF   x04
0D4BE:  CLRF   x05
0D4C0:  CLRF   x06
0D4C2:  CLRF   x07
0D4C4:  CLRF   x08
0D4C6:  CLRF   x09
0D4C8:  CLRF   x0A
0D4CA:  CLRF   x0B
0D4CC:  CLRF   x0C
0D4CE:  CLRF   x0D
0D4D0:  CLRF   x0E
0D4D2:  CLRF   x0F
0D4D4:  CLRF   x10
0D4D6:  CLRF   x11
0D4D8:  CLRF   x12
0D4DA:  CLRF   x13
0D4DC:  CLRF   x14
0D4DE:  CLRF   x15
0D4E0:  CLRF   x16
0D4E2:  CLRF   x17
0D4E4:  CLRF   x18
0D4E6:  CLRF   x19
0D4E8:  CLRF   x1A
0D4EA:  CLRF   x1B
0D4EC:  CLRF   x1C
0D4EE:  CLRF   x1D
0D4F0:  CLRF   x1E
0D4F2:  CLRF   x1F
0D4F4:  CLRF   x20
0D4F6:  CLRF   x21
0D4F8:  CLRF   x22
0D4FA:  CLRF   x23
0D4FC:  CLRF   x24
0D4FE:  CLRF   x25
0D500:  CLRF   x26
0D502:  CLRF   x27
0D504:  CLRF   x28
0D506:  CLRF   x29
0D508:  CLRF   x2A
0D50A:  CLRF   x2B
0D50C:  CLRF   x2C
0D50E:  CLRF   x2D
0D510:  CLRF   x2E
0D512:  CLRF   x2F
0D514:  CLRF   x30
0D516:  CLRF   x31
0D518:  CLRF   x32
0D51A:  CLRF   x33
0D51C:  CLRF   x34
0D51E:  CLRF   x35
0D520:  CLRF   x36
0D522:  CLRF   x37
0D524:  CLRF   x38
0D526:  CLRF   x39
0D528:  CLRF   x3A
0D52A:  CLRF   x3B
0D52C:  CLRF   x3C
0D52E:  CLRF   x3D
0D530:  CLRF   x3E
0D532:  CLRF   x3F
0D534:  CLRF   x40
0D536:  CLRF   x41
0D538:  CLRF   x42
0D53A:  CLRF   x43
0D53C:  CLRF   x44
0D53E:  CLRF   x45
0D540:  CLRF   x46
0D542:  CLRF   x47
0D544:  CLRF   x48
0D546:  CLRF   x49
0D548:  CLRF   x4A
0D54A:  CLRF   x4B
0D54C:  CLRF   x4C
0D54E:  CLRF   x4D
0D550:  CLRF   x4E
0D552:  CLRF   x4F
0D554:  CLRF   x50
0D556:  CLRF   x51
0D558:  CLRF   x52
0D55A:  CLRF   x53
0D55C:  CLRF   x54
0D55E:  CLRF   x55
0D560:  CLRF   x56
0D562:  CLRF   x57
0D564:  CLRF   x58
0D566:  CLRF   x59
0D568:  CLRF   x5A
0D56A:  CLRF   x5B
0D56C:  CLRF   x5C
0D56E:  CLRF   x5D
0D570:  CLRF   x5E
0D572:  CLRF   x5F
0D574:  CLRF   x60
0D576:  CLRF   x61
0D578:  CLRF   x62
0D57A:  CLRF   x63
0D57C:  CLRF   x64
0D57E:  CLRF   x65
0D580:  CLRF   x66
0D582:  CLRF   x67
0D584:  CLRF   x68
0D586:  CLRF   x69
0D588:  CLRF   x6A
0D58A:  CLRF   x6B
0D58C:  CLRF   x6C
0D58E:  CLRF   x6D
0D590:  CLRF   x6E
0D592:  CLRF   x6F
0D594:  CLRF   x70
0D596:  CLRF   x71
0D598:  CLRF   x72
0D59A:  CLRF   x73
0D59C:  CLRF   x74
0D59E:  CLRF   x75
0D5A0:  CLRF   x76
0D5A2:  CLRF   x77
0D5A4:  CLRF   x78
0D5A6:  CLRF   x79
0D5A8:  CLRF   x7A
0D5AA:  CLRF   x7B
0D5AC:  CLRF   x7C
0D5AE:  CLRF   x7D
0D5B0:  CLRF   x7E
0D5B2:  CLRF   x7F
0D5B4:  CLRF   x80
0D5B6:  CLRF   x81
0D5B8:  CLRF   x82
0D5BA:  CLRF   x83
0D5BC:  CLRF   x84
0D5BE:  CLRF   x85
0D5C0:  CLRF   x86
0D5C2:  CLRF   x87
0D5C4:  CLRF   x88
0D5C6:  CLRF   x89
0D5C8:  CLRF   x8A
0D5CA:  CLRF   x8B
0D5CC:  CLRF   x8C
0D5CE:  CLRF   x8D
0D5D0:  CLRF   x8E
0D5D2:  CLRF   x8F
0D5D4:  CLRF   x90
0D5D6:  CLRF   x91
0D5D8:  CLRF   x92
0D5DA:  CLRF   x93
0D5DC:  CLRF   x94
0D5DE:  CLRF   x95
0D5E0:  CLRF   x96
0D5E2:  CLRF   x97
0D5E4:  CLRF   x98
0D5E6:  CLRF   x99
0D5E8:  CLRF   x9A
0D5EA:  CLRF   x9B
0D5EC:  CLRF   x9C
0D5EE:  CLRF   x9D
0D5F0:  CLRF   x9E
0D5F2:  CLRF   x9F
0D5F4:  CLRF   xA0
0D5F6:  CLRF   xA1
0D5F8:  CLRF   xA2
0D5FA:  CLRF   xA3
0D5FC:  CLRF   xA4
0D5FE:  CLRF   xA5
0D600:  CLRF   xA6
0D602:  CLRF   xA7
0D604:  CLRF   xA8
0D606:  CLRF   xA9
0D608:  CLRF   xAA
0D60A:  CLRF   xAB
0D60C:  CLRF   xAC
0D60E:  CLRF   xAD
0D610:  CLRF   xAE
0D612:  CLRF   xAF
0D614:  CLRF   xB0
0D616:  CLRF   xB1
0D618:  CLRF   xB2
0D61A:  CLRF   xB3
0D61C:  CLRF   xB4
0D61E:  CLRF   xB5
0D620:  CLRF   xB6
0D622:  CLRF   xB7
0D624:  CLRF   xB8
0D626:  CLRF   xB9
0D628:  CLRF   xBA
0D62A:  CLRF   xBB
0D62C:  CLRF   xBC
0D62E:  CLRF   xBD
0D630:  CLRF   xBE
0D632:  CLRF   xBF
0D634:  CLRF   xC0
0D636:  CLRF   xC1
0D638:  CLRF   xC2
0D63A:  CLRF   xC3
0D63C:  CLRF   xC4
0D63E:  CLRF   xC5
0D640:  CLRF   xC6
0D642:  CLRF   xC7
0D644:  CLRF   xC8
0D646:  CLRF   xC9
0D648:  CLRF   xCA
0D64A:  CLRF   xCB
0D64C:  CLRF   xCC
0D64E:  CLRF   xCD
0D650:  CLRF   xCE
0D652:  CLRF   xCF
0D654:  CLRF   xD0
0D656:  CLRF   xD1
0D658:  CLRF   xD2
0D65A:  CLRF   xD3
0D65C:  CLRF   xD4
0D65E:  CLRF   xD5
0D660:  CLRF   xD6
0D662:  CLRF   xD7
0D664:  CLRF   xD8
0D666:  CLRF   xD9
0D668:  CLRF   xDA
0D66A:  CLRF   xDB
0D66C:  CLRF   xDC
0D66E:  CLRF   xDD
0D670:  CLRF   xDE
0D672:  CLRF   xDF
0D674:  CLRF   xE0
0D676:  CLRF   xE1
0D678:  CLRF   xE2
0D67A:  CLRF   xE3
0D67C:  CLRF   xE4
0D67E:  CLRF   xE5
0D680:  CLRF   xE6
0D682:  CLRF   xE7
0D684:  CLRF   xE8
0D686:  CLRF   xE9
0D688:  CLRF   xEA
0D68A:  CLRF   xEB
0D68C:  CLRF   xEC
0D68E:  CLRF   xED
0D690:  CLRF   xEE
0D692:  CLRF   xEF
0D694:  CLRF   xF0
0D696:  CLRF   xF1
0D698:  CLRF   xF2
0D69A:  CLRF   xF3
0D69C:  CLRF   xF4
0D69E:  CLRF   xF5
0D6A0:  CLRF   xF6
0D6A2:  CLRF   xF7
0D6A4:  CLRF   xF8
0D6A6:  CLRF   xF9
0D6A8:  CLRF   xFA
0D6AA:  CLRF   xFB
0D6AC:  CLRF   xFC
0D6AE:  CLRF   xFD
0D6B0:  CLRF   xFE
0D6B2:  CLRF   xFF
0D6B4:  MOVLB  4
0D6B6:  CLRF   x00
0D6B8:  CLRF   x01
0D6BA:  CLRF   x02
0D6BC:  CLRF   x03
0D6BE:  CLRF   x04
0D6C0:  CLRF   x05
0D6C2:  CLRF   x06
0D6C4:  CLRF   x07
0D6C6:  CLRF   x08
0D6C8:  CLRF   x09
0D6CA:  CLRF   x0A
0D6CC:  CLRF   x0B
0D6CE:  CLRF   x0C
0D6D0:  CLRF   x0D
0D6D2:  CLRF   x0E
0D6D4:  CLRF   x0F
0D6D6:  CLRF   x10
0D6D8:  CLRF   x11
0D6DA:  CLRF   x12
0D6DC:  CLRF   x13
0D6DE:  CLRF   x14
0D6E0:  CLRF   x15
0D6E2:  CLRF   x16
0D6E4:  CLRF   x17
0D6E6:  CLRF   x18
0D6E8:  CLRF   x19
0D6EA:  CLRF   x1A
0D6EC:  CLRF   x1B
0D6EE:  CLRF   x1C
0D6F0:  CLRF   x1D
0D6F2:  CLRF   x1E
0D6F4:  CLRF   x1F
0D6F6:  CLRF   x20
0D6F8:  CLRF   x21
0D6FA:  CLRF   x22
0D6FC:  CLRF   x23
0D6FE:  CLRF   x24
0D700:  CLRF   x25
0D702:  CLRF   x26
0D704:  CLRF   x27
0D706:  CLRF   x28
0D708:  CLRF   x29
0D70A:  CLRF   x2A
0D70C:  CLRF   x2B
0D70E:  CLRF   x2C
0D710:  CLRF   x2D
0D712:  CLRF   x2E
0D714:  CLRF   x2F
0D716:  CLRF   x30
0D718:  CLRF   x31
0D71A:  CLRF   x32
0D71C:  CLRF   x33
0D71E:  CLRF   x34
0D720:  CLRF   x35
0D722:  CLRF   x36
0D724:  CLRF   x37
0D726:  CLRF   x38
0D728:  CLRF   x39
0D72A:  CLRF   x3A
0D72C:  CLRF   x3B
0D72E:  CLRF   x3C
0D730:  CLRF   x3D
0D732:  CLRF   x3E
0D734:  CLRF   x3F
0D736:  CLRF   x40
0D738:  CLRF   x41
0D73A:  CLRF   x42
0D73C:  CLRF   x43
0D73E:  CLRF   x44
0D740:  CLRF   x45
0D742:  CLRF   x46
0D744:  CLRF   x47
0D746:  CLRF   x48
0D748:  CLRF   x49
0D74A:  CLRF   x4A
0D74C:  CLRF   x4B
0D74E:  CLRF   x4C
0D750:  CLRF   x4D
0D752:  CLRF   x4E
0D754:  CLRF   x4F
0D756:  CLRF   x50
0D758:  CLRF   x51
0D75A:  CLRF   x52
0D75C:  CLRF   x53
0D75E:  CLRF   x54
0D760:  CLRF   x55
0D762:  CLRF   x56
0D764:  CLRF   x57
0D766:  CLRF   x58
0D768:  CLRF   x59
0D76A:  CLRF   x5A
0D76C:  CLRF   x5B
0D76E:  CLRF   x5C
0D770:  CLRF   x5D
0D772:  CLRF   x5E
0D774:  CLRF   x5F
0D776:  CLRF   x60
0D778:  CLRF   x61
0D77A:  CLRF   x62
0D77C:  CLRF   x63
0D77E:  CLRF   x64
0D780:  CLRF   x65
0D782:  CLRF   x66
0D784:  CLRF   x67
0D786:  CLRF   x68
0D788:  CLRF   x69
0D78A:  CLRF   x6A
0D78C:  CLRF   x6B
0D78E:  CLRF   x6C
0D790:  CLRF   x6D
0D792:  CLRF   x6E
0D794:  CLRF   x6F
0D796:  CLRF   x70
0D798:  CLRF   x71
0D79A:  CLRF   x72
0D79C:  CLRF   x73
0D79E:  CLRF   x74
0D7A0:  CLRF   x75
0D7A2:  CLRF   x76
0D7A4:  CLRF   x77
0D7A6:  CLRF   x78
0D7A8:  CLRF   x79
0D7AA:  CLRF   x7A
0D7AC:  CLRF   x7B
0D7AE:  CLRF   x7C
0D7B0:  CLRF   x7D
0D7B2:  CLRF   x7E
0D7B4:  CLRF   x7F
0D7B6:  CLRF   x80
0D7B8:  CLRF   x81
0D7BA:  CLRF   x82
0D7BC:  CLRF   x83
0D7BE:  CLRF   x84
0D7C0:  CLRF   x85
0D7C2:  CLRF   x86
0D7C4:  CLRF   x87
0D7C6:  CLRF   x88
0D7C8:  CLRF   x89
0D7CA:  CLRF   x8A
0D7CC:  CLRF   x8B
0D7CE:  CLRF   x8C
0D7D0:  CLRF   x8D
0D7D2:  CLRF   x8E
0D7D4:  CLRF   x8F
0D7D6:  CLRF   x90
0D7D8:  CLRF   x91
0D7DA:  CLRF   x92
0D7DC:  CLRF   x93
0D7DE:  CLRF   x94
0D7E0:  CLRF   x95
0D7E2:  CLRF   x96
0D7E4:  CLRF   x97
0D7E6:  CLRF   x98
0D7E8:  CLRF   x99
0D7EA:  CLRF   x9A
0D7EC:  CLRF   x9B
0D7EE:  CLRF   x9C
0D7F0:  CLRF   x9D
0D7F2:  CLRF   x9E
0D7F4:  CLRF   x9F
0D7F6:  CLRF   xA0
0D7F8:  CLRF   xA1
0D7FA:  CLRF   xA2
0D7FC:  CLRF   xA3
0D7FE:  CLRF   xA4
0D800:  CLRF   xA5
0D802:  CLRF   xA6
0D804:  CLRF   xA7
0D806:  CLRF   xA8
0D808:  CLRF   xA9
0D80A:  CLRF   xAA
0D80C:  CLRF   xAB
0D80E:  CLRF   xAC
0D810:  CLRF   xAD
0D812:  CLRF   xAE
0D814:  CLRF   xAF
0D816:  CLRF   xB0
0D818:  CLRF   xB1
0D81A:  CLRF   xB2
0D81C:  CLRF   xB3
0D81E:  CLRF   xB4
0D820:  CLRF   xB5
0D822:  CLRF   xB6
0D824:  CLRF   xB7
0D826:  CLRF   xB8
0D828:  CLRF   xB9
0D82A:  CLRF   xBA
0D82C:  CLRF   xBB
0D82E:  CLRF   xBC
0D830:  CLRF   xBD
0D832:  CLRF   xBE
0D834:  CLRF   xBF
0D836:  CLRF   xC0
0D838:  CLRF   xC1
0D83A:  CLRF   xC2
0D83C:  CLRF   xC3
0D83E:  CLRF   xC4
0D840:  CLRF   xC5
0D842:  CLRF   xC6
0D844:  CLRF   xC7
0D846:  CLRF   xC8
0D848:  CLRF   xC9
0D84A:  CLRF   xCA
0D84C:  CLRF   xCB
0D84E:  CLRF   xCC
0D850:  CLRF   xCD
0D852:  CLRF   xCE
0D854:  CLRF   xCF
0D856:  CLRF   xD0
0D858:  CLRF   xD1
0D85A:  CLRF   xD2
0D85C:  CLRF   xD3
0D85E:  CLRF   xD4
0D860:  CLRF   xD5
0D862:  CLRF   xD6
0D864:  CLRF   xD7
0D866:  CLRF   xD8
0D868:  CLRF   xD9
0D86A:  CLRF   xDA
0D86C:  CLRF   xDB
0D86E:  CLRF   xDC
0D870:  CLRF   xDD
0D872:  CLRF   xDE
0D874:  CLRF   xDF
0D876:  CLRF   xE0
0D878:  CLRF   xE1
0D87A:  CLRF   xE2
0D87C:  CLRF   xE3
0D87E:  CLRF   xE4
0D880:  CLRF   xE5
0D882:  CLRF   xE6
0D884:  CLRF   xE7
0D886:  CLRF   xE8
0D888:  CLRF   xE9
0D88A:  CLRF   xEA
0D88C:  CLRF   xEB
0D88E:  CLRF   xEC
0D890:  CLRF   xED
0D892:  CLRF   xEE
0D894:  CLRF   xEF
0D896:  CLRF   xF0
0D898:  CLRF   xF1
0D89A:  CLRF   xF2
0D89C:  CLRF   xF3
0D89E:  CLRF   xF4
0D8A0:  CLRF   xF5
0D8A2:  CLRF   xF6
0D8A4:  CLRF   xF7
0D8A6:  CLRF   xF8
0D8A8:  CLRF   xF9
0D8AA:  CLRF   xFA
0D8AC:  CLRF   xFB
0D8AE:  CLRF   xFC
0D8B0:  CLRF   xFD
0D8B2:  CLRF   xFE
0D8B4:  CLRF   xFF
0D8B6:  MOVLB  5
0D8B8:  CLRF   x00
0D8BA:  CLRF   x01
0D8BC:  CLRF   x02
0D8BE:  CLRF   x03
0D8C0:  CLRF   x04
0D8C2:  CLRF   x05
0D8C4:  CLRF   x06
0D8C6:  CLRF   x07
0D8C8:  CLRF   x08
0D8CA:  CLRF   x09
0D8CC:  CLRF   x0A
0D8CE:  CLRF   x0B
0D8D0:  CLRF   x0C
0D8D2:  CLRF   x0D
0D8D4:  CLRF   x0E
0D8D6:  CLRF   x0F
0D8D8:  CLRF   x10
0D8DA:  CLRF   x11
0D8DC:  CLRF   x12
0D8DE:  CLRF   x13
0D8E0:  CLRF   x14
0D8E2:  CLRF   x15
0D8E4:  CLRF   x16
0D8E6:  CLRF   x17
0D8E8:  CLRF   x18
0D8EA:  CLRF   x19
0D8EC:  CLRF   x1A
0D8EE:  CLRF   x1B
0D8F0:  CLRF   x1C
0D8F2:  CLRF   x1D
0D8F4:  CLRF   x1E
0D8F6:  CLRF   x1F
0D8F8:  CLRF   x20
0D8FA:  CLRF   x21
0D8FC:  CLRF   x22
0D8FE:  CLRF   x23
0D900:  CLRF   x24
0D902:  CLRF   x25
0D904:  CLRF   x26
0D906:  CLRF   x27
0D908:  CLRF   x28
0D90A:  CLRF   x29
0D90C:  CLRF   x2A
0D90E:  CLRF   x2B
0D910:  CLRF   x2C
0D912:  CLRF   x2D
0D914:  CLRF   x2E
0D916:  CLRF   x2F
0D918:  CLRF   x30
0D91A:  CLRF   x31
0D91C:  CLRF   x32
0D91E:  CLRF   x33
0D920:  CLRF   x34
0D922:  CLRF   x35
0D924:  CLRF   x36
0D926:  CLRF   x37
0D928:  CLRF   x38
0D92A:  CLRF   x39
0D92C:  CLRF   x3A
0D92E:  CLRF   x3B
0D930:  CLRF   x3C
0D932:  CLRF   x3D
0D934:  CLRF   x3E
0D936:  CLRF   x3F
0D938:  CLRF   x40
0D93A:  CLRF   x41
0D93C:  CLRF   x42
0D93E:  CLRF   x43
0D940:  CLRF   x44
0D942:  CLRF   x45
0D944:  CLRF   x46
0D946:  CLRF   x47
0D948:  CLRF   x48
0D94A:  CLRF   x49
0D94C:  CLRF   x4A
0D94E:  CLRF   x4B
0D950:  CLRF   x4C
0D952:  CLRF   x4D
0D954:  CLRF   x4E
0D956:  CLRF   x4F
0D958:  CLRF   x50
0D95A:  CLRF   x51
0D95C:  CLRF   x52
0D95E:  CLRF   x53
0D960:  CLRF   x54
0D962:  CLRF   x55
0D964:  CLRF   x56
0D966:  CLRF   x57
0D968:  CLRF   x58
0D96A:  CLRF   x59
0D96C:  CLRF   x5A
0D96E:  CLRF   x5B
0D970:  CLRF   x5C
0D972:  CLRF   x5D
0D974:  CLRF   x5E
0D976:  CLRF   x5F
0D978:  CLRF   x60
0D97A:  CLRF   x61
0D97C:  CLRF   x62
0D97E:  CLRF   x63
0D980:  CLRF   x64
0D982:  CLRF   x65
0D984:  CLRF   x66
0D986:  CLRF   x67
0D988:  CLRF   x68
0D98A:  CLRF   x69
0D98C:  CLRF   x6A
0D98E:  CLRF   x6B
0D990:  CLRF   x6C
0D992:  CLRF   x6D
0D994:  CLRF   x6E
0D996:  CLRF   x6F
0D998:  CLRF   x70
0D99A:  CLRF   x71
0D99C:  CLRF   x72
0D99E:  CLRF   x73
0D9A0:  CLRF   x74
0D9A2:  CLRF   x75
0D9A4:  CLRF   x76
0D9A6:  CLRF   x77
0D9A8:  CLRF   x78
0D9AA:  CLRF   x79
0D9AC:  CLRF   x7A
0D9AE:  CLRF   x7B
0D9B0:  CLRF   x7C
0D9B2:  CLRF   x7D
0D9B4:  CLRF   x7E
0D9B6:  CLRF   x7F
0D9B8:  CLRF   x80
0D9BA:  CLRF   x81
0D9BC:  CLRF   x82
0D9BE:  CLRF   x83
0D9C0:  CLRF   x84
0D9C2:  CLRF   x85
0D9C4:  CLRF   x86
0D9C6:  CLRF   x87
0D9C8:  CLRF   x88
0D9CA:  CLRF   x89
0D9CC:  CLRF   x8A
0D9CE:  CLRF   x8B
0D9D0:  CLRF   x8C
0D9D2:  CLRF   x8D
0D9D4:  CLRF   x8E
0D9D6:  CLRF   x8F
0D9D8:  CLRF   x90
0D9DA:  CLRF   x91
0D9DC:  CLRF   x92
0D9DE:  CLRF   x93
0D9E0:  CLRF   x94
0D9E2:  CLRF   x95
0D9E4:  CLRF   x96
0D9E6:  CLRF   x97
0D9E8:  CLRF   x98
0D9EA:  CLRF   x99
0D9EC:  CLRF   x9A
0D9EE:  CLRF   x9B
0D9F0:  CLRF   x9C
0D9F2:  CLRF   x9D
0D9F4:  CLRF   x9E
0D9F6:  CLRF   x9F
0D9F8:  CLRF   xA0
0D9FA:  CLRF   xA1
0D9FC:  CLRF   xA2
0D9FE:  CLRF   xA3
0DA00:  CLRF   xA4
0DA02:  CLRF   xA5
0DA04:  CLRF   xA6
0DA06:  CLRF   xA7
0DA08:  CLRF   xA8
0DA0A:  CLRF   xA9
0DA0C:  CLRF   xAA
0DA0E:  CLRF   xAB
0DA10:  CLRF   xAC
0DA12:  CLRF   xAD
0DA14:  CLRF   xAE
0DA16:  CLRF   xAF
0DA18:  CLRF   xB0
0DA1A:  CLRF   xB1
0DA1C:  CLRF   xB2
....................     port1.port_num = 1;
0DA1E:  MOVLW  01
0DA20:  MOVLB  1
0DA22:  MOVWF  xB3
....................     port1.sweep_step = 0;
0DA24:  CLRF   xB5
0DA26:  CLRF   xB4
....................     port1.active = 1;
0DA28:  MOVLB  5
0DA2A:  BSF    xB2.0
....................     // unsigned int8 ivdata[256];
.................... 
....................     // Init Port2
....................     sweep_debug_config_t port2 = {0};
0DA2C:  CLRF   xB3
0DA2E:  CLRF   xB4
0DA30:  CLRF   xB5
0DA32:  CLRF   xB6
0DA34:  CLRF   xB7
0DA36:  CLRF   xB8
0DA38:  CLRF   xB9
0DA3A:  CLRF   xBA
0DA3C:  CLRF   xBB
0DA3E:  CLRF   xBC
0DA40:  CLRF   xBD
0DA42:  CLRF   xBE
0DA44:  CLRF   xBF
0DA46:  CLRF   xC0
0DA48:  CLRF   xC1
0DA4A:  CLRF   xC2
0DA4C:  CLRF   xC3
0DA4E:  CLRF   xC4
0DA50:  CLRF   xC5
0DA52:  CLRF   xC6
0DA54:  CLRF   xC7
0DA56:  CLRF   xC8
0DA58:  CLRF   xC9
0DA5A:  CLRF   xCA
0DA5C:  CLRF   xCB
0DA5E:  CLRF   xCC
0DA60:  CLRF   xCD
0DA62:  CLRF   xCE
0DA64:  CLRF   xCF
0DA66:  CLRF   xD0
0DA68:  CLRF   xD1
0DA6A:  CLRF   xD2
0DA6C:  CLRF   xD3
0DA6E:  CLRF   xD4
0DA70:  CLRF   xD5
0DA72:  CLRF   xD6
0DA74:  CLRF   xD7
0DA76:  CLRF   xD8
0DA78:  CLRF   xD9
0DA7A:  CLRF   xDA
0DA7C:  CLRF   xDB
0DA7E:  CLRF   xDC
0DA80:  CLRF   xDD
0DA82:  CLRF   xDE
0DA84:  CLRF   xDF
0DA86:  CLRF   xE0
0DA88:  CLRF   xE1
0DA8A:  CLRF   xE2
0DA8C:  CLRF   xE3
0DA8E:  CLRF   xE4
0DA90:  CLRF   xE5
0DA92:  CLRF   xE6
0DA94:  CLRF   xE7
0DA96:  CLRF   xE8
0DA98:  CLRF   xE9
0DA9A:  CLRF   xEA
0DA9C:  CLRF   xEB
0DA9E:  CLRF   xEC
0DAA0:  CLRF   xED
0DAA2:  CLRF   xEE
0DAA4:  CLRF   xEF
0DAA6:  CLRF   xF0
0DAA8:  CLRF   xF1
0DAAA:  CLRF   xF2
0DAAC:  CLRF   xF3
0DAAE:  CLRF   xF4
0DAB0:  CLRF   xF5
0DAB2:  CLRF   xF6
0DAB4:  CLRF   xF7
0DAB6:  CLRF   xF8
0DAB8:  CLRF   xF9
0DABA:  CLRF   xFA
0DABC:  CLRF   xFB
0DABE:  CLRF   xFC
0DAC0:  CLRF   xFD
0DAC2:  CLRF   xFE
0DAC4:  CLRF   xFF
0DAC6:  MOVLB  6
0DAC8:  CLRF   x00
0DACA:  CLRF   x01
0DACC:  CLRF   x02
0DACE:  CLRF   x03
0DAD0:  CLRF   x04
0DAD2:  CLRF   x05
0DAD4:  CLRF   x06
0DAD6:  CLRF   x07
0DAD8:  CLRF   x08
0DADA:  CLRF   x09
0DADC:  CLRF   x0A
0DADE:  CLRF   x0B
0DAE0:  CLRF   x0C
0DAE2:  CLRF   x0D
0DAE4:  CLRF   x0E
0DAE6:  CLRF   x0F
0DAE8:  CLRF   x10
0DAEA:  CLRF   x11
0DAEC:  CLRF   x12
0DAEE:  CLRF   x13
0DAF0:  CLRF   x14
0DAF2:  CLRF   x15
0DAF4:  CLRF   x16
0DAF6:  CLRF   x17
0DAF8:  CLRF   x18
0DAFA:  CLRF   x19
0DAFC:  CLRF   x1A
0DAFE:  CLRF   x1B
0DB00:  CLRF   x1C
0DB02:  CLRF   x1D
0DB04:  CLRF   x1E
0DB06:  CLRF   x1F
0DB08:  CLRF   x20
0DB0A:  CLRF   x21
0DB0C:  CLRF   x22
0DB0E:  CLRF   x23
0DB10:  CLRF   x24
0DB12:  CLRF   x25
0DB14:  CLRF   x26
0DB16:  CLRF   x27
0DB18:  CLRF   x28
0DB1A:  CLRF   x29
0DB1C:  CLRF   x2A
0DB1E:  CLRF   x2B
0DB20:  CLRF   x2C
0DB22:  CLRF   x2D
0DB24:  CLRF   x2E
0DB26:  CLRF   x2F
0DB28:  CLRF   x30
0DB2A:  CLRF   x31
0DB2C:  CLRF   x32
0DB2E:  CLRF   x33
0DB30:  CLRF   x34
0DB32:  CLRF   x35
0DB34:  CLRF   x36
0DB36:  CLRF   x37
0DB38:  CLRF   x38
0DB3A:  CLRF   x39
0DB3C:  CLRF   x3A
0DB3E:  CLRF   x3B
0DB40:  CLRF   x3C
0DB42:  CLRF   x3D
0DB44:  CLRF   x3E
0DB46:  CLRF   x3F
0DB48:  CLRF   x40
0DB4A:  CLRF   x41
0DB4C:  CLRF   x42
0DB4E:  CLRF   x43
0DB50:  CLRF   x44
0DB52:  CLRF   x45
0DB54:  CLRF   x46
0DB56:  CLRF   x47
0DB58:  CLRF   x48
0DB5A:  CLRF   x49
0DB5C:  CLRF   x4A
0DB5E:  CLRF   x4B
0DB60:  CLRF   x4C
0DB62:  CLRF   x4D
0DB64:  CLRF   x4E
0DB66:  CLRF   x4F
0DB68:  CLRF   x50
0DB6A:  CLRF   x51
0DB6C:  CLRF   x52
0DB6E:  CLRF   x53
0DB70:  CLRF   x54
0DB72:  CLRF   x55
0DB74:  CLRF   x56
0DB76:  CLRF   x57
0DB78:  CLRF   x58
0DB7A:  CLRF   x59
0DB7C:  CLRF   x5A
0DB7E:  CLRF   x5B
0DB80:  CLRF   x5C
0DB82:  CLRF   x5D
0DB84:  CLRF   x5E
0DB86:  CLRF   x5F
0DB88:  CLRF   x60
0DB8A:  CLRF   x61
0DB8C:  CLRF   x62
0DB8E:  CLRF   x63
0DB90:  CLRF   x64
0DB92:  CLRF   x65
0DB94:  CLRF   x66
0DB96:  CLRF   x67
0DB98:  CLRF   x68
0DB9A:  CLRF   x69
0DB9C:  CLRF   x6A
0DB9E:  CLRF   x6B
0DBA0:  CLRF   x6C
0DBA2:  CLRF   x6D
0DBA4:  CLRF   x6E
0DBA6:  CLRF   x6F
0DBA8:  CLRF   x70
0DBAA:  CLRF   x71
0DBAC:  CLRF   x72
0DBAE:  CLRF   x73
0DBB0:  CLRF   x74
0DBB2:  CLRF   x75
0DBB4:  CLRF   x76
0DBB6:  CLRF   x77
0DBB8:  CLRF   x78
0DBBA:  CLRF   x79
0DBBC:  CLRF   x7A
0DBBE:  CLRF   x7B
0DBC0:  CLRF   x7C
0DBC2:  CLRF   x7D
0DBC4:  CLRF   x7E
0DBC6:  CLRF   x7F
0DBC8:  CLRF   x80
0DBCA:  CLRF   x81
0DBCC:  CLRF   x82
0DBCE:  CLRF   x83
0DBD0:  CLRF   x84
0DBD2:  CLRF   x85
0DBD4:  CLRF   x86
0DBD6:  CLRF   x87
0DBD8:  CLRF   x88
0DBDA:  CLRF   x89
0DBDC:  CLRF   x8A
0DBDE:  CLRF   x8B
0DBE0:  CLRF   x8C
0DBE2:  CLRF   x8D
0DBE4:  CLRF   x8E
0DBE6:  CLRF   x8F
0DBE8:  CLRF   x90
0DBEA:  CLRF   x91
0DBEC:  CLRF   x92
0DBEE:  CLRF   x93
0DBF0:  CLRF   x94
0DBF2:  CLRF   x95
0DBF4:  CLRF   x96
0DBF6:  CLRF   x97
0DBF8:  CLRF   x98
0DBFA:  CLRF   x99
0DBFC:  CLRF   x9A
0DBFE:  CLRF   x9B
0DC00:  CLRF   x9C
0DC02:  CLRF   x9D
0DC04:  CLRF   x9E
0DC06:  CLRF   x9F
0DC08:  CLRF   xA0
0DC0A:  CLRF   xA1
0DC0C:  CLRF   xA2
0DC0E:  CLRF   xA3
0DC10:  CLRF   xA4
0DC12:  CLRF   xA5
0DC14:  CLRF   xA6
0DC16:  CLRF   xA7
0DC18:  CLRF   xA8
0DC1A:  CLRF   xA9
0DC1C:  CLRF   xAA
0DC1E:  CLRF   xAB
0DC20:  CLRF   xAC
0DC22:  CLRF   xAD
0DC24:  CLRF   xAE
0DC26:  CLRF   xAF
0DC28:  CLRF   xB0
0DC2A:  CLRF   xB1
0DC2C:  CLRF   xB2
0DC2E:  CLRF   xB3
0DC30:  CLRF   xB4
0DC32:  CLRF   xB5
0DC34:  CLRF   xB6
0DC36:  CLRF   xB7
0DC38:  CLRF   xB8
0DC3A:  CLRF   xB9
0DC3C:  CLRF   xBA
0DC3E:  CLRF   xBB
0DC40:  CLRF   xBC
0DC42:  CLRF   xBD
0DC44:  CLRF   xBE
0DC46:  CLRF   xBF
0DC48:  CLRF   xC0
0DC4A:  CLRF   xC1
0DC4C:  CLRF   xC2
0DC4E:  CLRF   xC3
0DC50:  CLRF   xC4
0DC52:  CLRF   xC5
0DC54:  CLRF   xC6
0DC56:  CLRF   xC7
0DC58:  CLRF   xC8
0DC5A:  CLRF   xC9
0DC5C:  CLRF   xCA
0DC5E:  CLRF   xCB
0DC60:  CLRF   xCC
0DC62:  CLRF   xCD
0DC64:  CLRF   xCE
0DC66:  CLRF   xCF
0DC68:  CLRF   xD0
0DC6A:  CLRF   xD1
0DC6C:  CLRF   xD2
0DC6E:  CLRF   xD3
0DC70:  CLRF   xD4
0DC72:  CLRF   xD5
0DC74:  CLRF   xD6
0DC76:  CLRF   xD7
0DC78:  CLRF   xD8
0DC7A:  CLRF   xD9
0DC7C:  CLRF   xDA
0DC7E:  CLRF   xDB
0DC80:  CLRF   xDC
0DC82:  CLRF   xDD
0DC84:  CLRF   xDE
0DC86:  CLRF   xDF
0DC88:  CLRF   xE0
0DC8A:  CLRF   xE1
0DC8C:  CLRF   xE2
0DC8E:  CLRF   xE3
0DC90:  CLRF   xE4
0DC92:  CLRF   xE5
0DC94:  CLRF   xE6
0DC96:  CLRF   xE7
0DC98:  CLRF   xE8
0DC9A:  CLRF   xE9
0DC9C:  CLRF   xEA
0DC9E:  CLRF   xEB
0DCA0:  CLRF   xEC
0DCA2:  CLRF   xED
0DCA4:  CLRF   xEE
0DCA6:  CLRF   xEF
0DCA8:  CLRF   xF0
0DCAA:  CLRF   xF1
0DCAC:  CLRF   xF2
0DCAE:  CLRF   xF3
0DCB0:  CLRF   xF4
0DCB2:  CLRF   xF5
0DCB4:  CLRF   xF6
0DCB6:  CLRF   xF7
0DCB8:  CLRF   xF8
0DCBA:  CLRF   xF9
0DCBC:  CLRF   xFA
0DCBE:  CLRF   xFB
0DCC0:  CLRF   xFC
0DCC2:  CLRF   xFD
0DCC4:  CLRF   xFE
0DCC6:  CLRF   xFF
0DCC8:  MOVLB  7
0DCCA:  CLRF   x00
0DCCC:  CLRF   x01
0DCCE:  CLRF   x02
0DCD0:  CLRF   x03
0DCD2:  CLRF   x04
0DCD4:  CLRF   x05
0DCD6:  CLRF   x06
0DCD8:  CLRF   x07
0DCDA:  CLRF   x08
0DCDC:  CLRF   x09
0DCDE:  CLRF   x0A
0DCE0:  CLRF   x0B
0DCE2:  CLRF   x0C
0DCE4:  CLRF   x0D
0DCE6:  CLRF   x0E
0DCE8:  CLRF   x0F
0DCEA:  CLRF   x10
0DCEC:  CLRF   x11
0DCEE:  CLRF   x12
0DCF0:  CLRF   x13
0DCF2:  CLRF   x14
0DCF4:  CLRF   x15
0DCF6:  CLRF   x16
0DCF8:  CLRF   x17
0DCFA:  CLRF   x18
0DCFC:  CLRF   x19
0DCFE:  CLRF   x1A
0DD00:  CLRF   x1B
0DD02:  CLRF   x1C
0DD04:  CLRF   x1D
0DD06:  CLRF   x1E
0DD08:  CLRF   x1F
0DD0A:  CLRF   x20
0DD0C:  CLRF   x21
0DD0E:  CLRF   x22
0DD10:  CLRF   x23
0DD12:  CLRF   x24
0DD14:  CLRF   x25
0DD16:  CLRF   x26
0DD18:  CLRF   x27
0DD1A:  CLRF   x28
0DD1C:  CLRF   x29
0DD1E:  CLRF   x2A
0DD20:  CLRF   x2B
0DD22:  CLRF   x2C
0DD24:  CLRF   x2D
0DD26:  CLRF   x2E
0DD28:  CLRF   x2F
0DD2A:  CLRF   x30
0DD2C:  CLRF   x31
0DD2E:  CLRF   x32
0DD30:  CLRF   x33
0DD32:  CLRF   x34
0DD34:  CLRF   x35
0DD36:  CLRF   x36
0DD38:  CLRF   x37
0DD3A:  CLRF   x38
0DD3C:  CLRF   x39
0DD3E:  CLRF   x3A
0DD40:  CLRF   x3B
0DD42:  CLRF   x3C
0DD44:  CLRF   x3D
0DD46:  CLRF   x3E
0DD48:  CLRF   x3F
0DD4A:  CLRF   x40
0DD4C:  CLRF   x41
0DD4E:  CLRF   x42
0DD50:  CLRF   x43
0DD52:  CLRF   x44
0DD54:  CLRF   x45
0DD56:  CLRF   x46
0DD58:  CLRF   x47
0DD5A:  CLRF   x48
0DD5C:  CLRF   x49
0DD5E:  CLRF   x4A
0DD60:  CLRF   x4B
0DD62:  CLRF   x4C
0DD64:  CLRF   x4D
0DD66:  CLRF   x4E
0DD68:  CLRF   x4F
0DD6A:  CLRF   x50
0DD6C:  CLRF   x51
0DD6E:  CLRF   x52
0DD70:  CLRF   x53
0DD72:  CLRF   x54
0DD74:  CLRF   x55
0DD76:  CLRF   x56
0DD78:  CLRF   x57
0DD7A:  CLRF   x58
0DD7C:  CLRF   x59
0DD7E:  CLRF   x5A
0DD80:  CLRF   x5B
0DD82:  CLRF   x5C
0DD84:  CLRF   x5D
0DD86:  CLRF   x5E
0DD88:  CLRF   x5F
0DD8A:  CLRF   x60
0DD8C:  CLRF   x61
0DD8E:  CLRF   x62
0DD90:  CLRF   x63
0DD92:  CLRF   x64
0DD94:  CLRF   x65
0DD96:  CLRF   x66
0DD98:  CLRF   x67
0DD9A:  CLRF   x68
0DD9C:  CLRF   x69
0DD9E:  CLRF   x6A
0DDA0:  CLRF   x6B
0DDA2:  CLRF   x6C
0DDA4:  CLRF   x6D
0DDA6:  CLRF   x6E
0DDA8:  CLRF   x6F
0DDAA:  CLRF   x70
0DDAC:  CLRF   x71
0DDAE:  CLRF   x72
0DDB0:  CLRF   x73
0DDB2:  CLRF   x74
0DDB4:  CLRF   x75
0DDB6:  CLRF   x76
0DDB8:  CLRF   x77
0DDBA:  CLRF   x78
0DDBC:  CLRF   x79
0DDBE:  CLRF   x7A
0DDC0:  CLRF   x7B
0DDC2:  CLRF   x7C
0DDC4:  CLRF   x7D
0DDC6:  CLRF   x7E
0DDC8:  CLRF   x7F
0DDCA:  CLRF   x80
0DDCC:  CLRF   x81
0DDCE:  CLRF   x82
0DDD0:  CLRF   x83
0DDD2:  CLRF   x84
0DDD4:  CLRF   x85
0DDD6:  CLRF   x86
0DDD8:  CLRF   x87
0DDDA:  CLRF   x88
0DDDC:  CLRF   x89
0DDDE:  CLRF   x8A
0DDE0:  CLRF   x8B
0DDE2:  CLRF   x8C
0DDE4:  CLRF   x8D
0DDE6:  CLRF   x8E
0DDE8:  CLRF   x8F
0DDEA:  CLRF   x90
0DDEC:  CLRF   x91
0DDEE:  CLRF   x92
0DDF0:  CLRF   x93
0DDF2:  CLRF   x94
0DDF4:  CLRF   x95
0DDF6:  CLRF   x96
0DDF8:  CLRF   x97
0DDFA:  CLRF   x98
0DDFC:  CLRF   x99
0DDFE:  CLRF   x9A
0DE00:  CLRF   x9B
0DE02:  CLRF   x9C
0DE04:  CLRF   x9D
0DE06:  CLRF   x9E
0DE08:  CLRF   x9F
0DE0A:  CLRF   xA0
0DE0C:  CLRF   xA1
0DE0E:  CLRF   xA2
0DE10:  CLRF   xA3
0DE12:  CLRF   xA4
0DE14:  CLRF   xA5
0DE16:  CLRF   xA6
0DE18:  CLRF   xA7
0DE1A:  CLRF   xA8
0DE1C:  CLRF   xA9
0DE1E:  CLRF   xAA
0DE20:  CLRF   xAB
0DE22:  CLRF   xAC
0DE24:  CLRF   xAD
0DE26:  CLRF   xAE
0DE28:  CLRF   xAF
0DE2A:  CLRF   xB0
0DE2C:  CLRF   xB1
0DE2E:  CLRF   xB2
0DE30:  CLRF   xB3
0DE32:  CLRF   xB4
0DE34:  CLRF   xB5
0DE36:  CLRF   xB6
0DE38:  CLRF   xB7
0DE3A:  CLRF   xB8
0DE3C:  CLRF   xB9
0DE3E:  CLRF   xBA
0DE40:  CLRF   xBB
0DE42:  CLRF   xBC
0DE44:  CLRF   xBD
0DE46:  CLRF   xBE
0DE48:  CLRF   xBF
0DE4A:  CLRF   xC0
0DE4C:  CLRF   xC1
0DE4E:  CLRF   xC2
0DE50:  CLRF   xC3
0DE52:  CLRF   xC4
0DE54:  CLRF   xC5
0DE56:  CLRF   xC6
0DE58:  CLRF   xC7
0DE5A:  CLRF   xC8
0DE5C:  CLRF   xC9
0DE5E:  CLRF   xCA
0DE60:  CLRF   xCB
0DE62:  CLRF   xCC
0DE64:  CLRF   xCD
0DE66:  CLRF   xCE
0DE68:  CLRF   xCF
0DE6A:  CLRF   xD0
0DE6C:  CLRF   xD1
0DE6E:  CLRF   xD2
0DE70:  CLRF   xD3
0DE72:  CLRF   xD4
0DE74:  CLRF   xD5
0DE76:  CLRF   xD6
0DE78:  CLRF   xD7
0DE7A:  CLRF   xD8
0DE7C:  CLRF   xD9
0DE7E:  CLRF   xDA
0DE80:  CLRF   xDB
0DE82:  CLRF   xDC
0DE84:  CLRF   xDD
0DE86:  CLRF   xDE
0DE88:  CLRF   xDF
0DE8A:  CLRF   xE0
0DE8C:  CLRF   xE1
0DE8E:  CLRF   xE2
0DE90:  CLRF   xE3
0DE92:  CLRF   xE4
0DE94:  CLRF   xE5
0DE96:  CLRF   xE6
0DE98:  CLRF   xE7
0DE9A:  CLRF   xE8
0DE9C:  CLRF   xE9
0DE9E:  CLRF   xEA
0DEA0:  CLRF   xEB
0DEA2:  CLRF   xEC
0DEA4:  CLRF   xED
0DEA6:  CLRF   xEE
0DEA8:  CLRF   xEF
0DEAA:  CLRF   xF0
0DEAC:  CLRF   xF1
0DEAE:  CLRF   xF2
0DEB0:  CLRF   xF3
0DEB2:  CLRF   xF4
0DEB4:  CLRF   xF5
0DEB6:  CLRF   xF6
0DEB8:  CLRF   xF7
0DEBA:  CLRF   xF8
0DEBC:  CLRF   xF9
0DEBE:  CLRF   xFA
0DEC0:  CLRF   xFB
0DEC2:  CLRF   xFC
0DEC4:  CLRF   xFD
0DEC6:  CLRF   xFE
0DEC8:  CLRF   xFF
0DECA:  MOVLB  8
0DECC:  CLRF   x00
0DECE:  CLRF   x01
0DED0:  CLRF   x02
0DED2:  CLRF   x03
0DED4:  CLRF   x04
0DED6:  CLRF   x05
0DED8:  CLRF   x06
0DEDA:  CLRF   x07
0DEDC:  CLRF   x08
0DEDE:  CLRF   x09
0DEE0:  CLRF   x0A
0DEE2:  CLRF   x0B
0DEE4:  CLRF   x0C
0DEE6:  CLRF   x0D
0DEE8:  CLRF   x0E
0DEEA:  CLRF   x0F
0DEEC:  CLRF   x10
0DEEE:  CLRF   x11
0DEF0:  CLRF   x12
0DEF2:  CLRF   x13
0DEF4:  CLRF   x14
0DEF6:  CLRF   x15
0DEF8:  CLRF   x16
0DEFA:  CLRF   x17
0DEFC:  CLRF   x18
0DEFE:  CLRF   x19
0DF00:  CLRF   x1A
0DF02:  CLRF   x1B
0DF04:  CLRF   x1C
0DF06:  CLRF   x1D
0DF08:  CLRF   x1E
0DF0A:  CLRF   x1F
0DF0C:  CLRF   x20
0DF0E:  CLRF   x21
0DF10:  CLRF   x22
0DF12:  CLRF   x23
0DF14:  CLRF   x24
0DF16:  CLRF   x25
0DF18:  CLRF   x26
0DF1A:  CLRF   x27
0DF1C:  CLRF   x28
0DF1E:  CLRF   x29
0DF20:  CLRF   x2A
0DF22:  CLRF   x2B
0DF24:  CLRF   x2C
0DF26:  CLRF   x2D
0DF28:  CLRF   x2E
0DF2A:  CLRF   x2F
0DF2C:  CLRF   x30
0DF2E:  CLRF   x31
0DF30:  CLRF   x32
0DF32:  CLRF   x33
0DF34:  CLRF   x34
0DF36:  CLRF   x35
0DF38:  CLRF   x36
0DF3A:  CLRF   x37
0DF3C:  CLRF   x38
0DF3E:  CLRF   x39
0DF40:  CLRF   x3A
0DF42:  CLRF   x3B
0DF44:  CLRF   x3C
0DF46:  CLRF   x3D
0DF48:  CLRF   x3E
0DF4A:  CLRF   x3F
0DF4C:  CLRF   x40
0DF4E:  CLRF   x41
0DF50:  CLRF   x42
0DF52:  CLRF   x43
0DF54:  CLRF   x44
0DF56:  CLRF   x45
0DF58:  CLRF   x46
0DF5A:  CLRF   x47
0DF5C:  CLRF   x48
0DF5E:  CLRF   x49
0DF60:  CLRF   x4A
0DF62:  CLRF   x4B
0DF64:  CLRF   x4C
0DF66:  CLRF   x4D
0DF68:  CLRF   x4E
0DF6A:  CLRF   x4F
0DF6C:  CLRF   x50
0DF6E:  CLRF   x51
0DF70:  CLRF   x52
0DF72:  CLRF   x53
0DF74:  CLRF   x54
0DF76:  CLRF   x55
0DF78:  CLRF   x56
0DF7A:  CLRF   x57
0DF7C:  CLRF   x58
0DF7E:  CLRF   x59
0DF80:  CLRF   x5A
0DF82:  CLRF   x5B
0DF84:  CLRF   x5C
0DF86:  CLRF   x5D
0DF88:  CLRF   x5E
0DF8A:  CLRF   x5F
0DF8C:  CLRF   x60
0DF8E:  CLRF   x61
0DF90:  CLRF   x62
0DF92:  CLRF   x63
0DF94:  CLRF   x64
0DF96:  CLRF   x65
0DF98:  CLRF   x66
0DF9A:  CLRF   x67
0DF9C:  CLRF   x68
0DF9E:  CLRF   x69
0DFA0:  CLRF   x6A
0DFA2:  CLRF   x6B
0DFA4:  CLRF   x6C
0DFA6:  CLRF   x6D
0DFA8:  CLRF   x6E
0DFAA:  CLRF   x6F
0DFAC:  CLRF   x70
0DFAE:  CLRF   x71
0DFB0:  CLRF   x72
0DFB2:  CLRF   x73
0DFB4:  CLRF   x74
0DFB6:  CLRF   x75
0DFB8:  CLRF   x76
0DFBA:  CLRF   x77
0DFBC:  CLRF   x78
0DFBE:  CLRF   x79
0DFC0:  CLRF   x7A
0DFC2:  CLRF   x7B
0DFC4:  CLRF   x7C
0DFC6:  CLRF   x7D
0DFC8:  CLRF   x7E
0DFCA:  CLRF   x7F
0DFCC:  CLRF   x80
0DFCE:  CLRF   x81
0DFD0:  CLRF   x82
0DFD2:  CLRF   x83
0DFD4:  CLRF   x84
0DFD6:  CLRF   x85
0DFD8:  CLRF   x86
0DFDA:  CLRF   x87
0DFDC:  CLRF   x88
0DFDE:  CLRF   x89
0DFE0:  CLRF   x8A
0DFE2:  CLRF   x8B
0DFE4:  CLRF   x8C
0DFE6:  CLRF   x8D
0DFE8:  CLRF   x8E
0DFEA:  CLRF   x8F
0DFEC:  CLRF   x90
0DFEE:  CLRF   x91
0DFF0:  CLRF   x92
0DFF2:  CLRF   x93
0DFF4:  CLRF   x94
0DFF6:  CLRF   x95
0DFF8:  CLRF   x96
0DFFA:  CLRF   x97
0DFFC:  CLRF   x98
0DFFE:  CLRF   x99
0E000:  CLRF   x9A
0E002:  CLRF   x9B
0E004:  CLRF   x9C
0E006:  CLRF   x9D
0E008:  CLRF   x9E
0E00A:  CLRF   x9F
0E00C:  CLRF   xA0
0E00E:  CLRF   xA1
0E010:  CLRF   xA2
0E012:  CLRF   xA3
0E014:  CLRF   xA4
0E016:  CLRF   xA5
0E018:  CLRF   xA6
0E01A:  CLRF   xA7
0E01C:  CLRF   xA8
0E01E:  CLRF   xA9
0E020:  CLRF   xAA
0E022:  CLRF   xAB
0E024:  CLRF   xAC
0E026:  CLRF   xAD
0E028:  CLRF   xAE
0E02A:  CLRF   xAF
0E02C:  CLRF   xB0
0E02E:  CLRF   xB1
0E030:  CLRF   xB2
0E032:  CLRF   xB3
0E034:  CLRF   xB4
0E036:  CLRF   xB5
0E038:  CLRF   xB6
0E03A:  CLRF   xB7
0E03C:  CLRF   xB8
0E03E:  CLRF   xB9
0E040:  CLRF   xBA
0E042:  CLRF   xBB
0E044:  CLRF   xBC
0E046:  CLRF   xBD
0E048:  CLRF   xBE
0E04A:  CLRF   xBF
0E04C:  CLRF   xC0
0E04E:  CLRF   xC1
0E050:  CLRF   xC2
0E052:  CLRF   xC3
0E054:  CLRF   xC4
0E056:  CLRF   xC5
0E058:  CLRF   xC6
0E05A:  CLRF   xC7
0E05C:  CLRF   xC8
0E05E:  CLRF   xC9
0E060:  CLRF   xCA
0E062:  CLRF   xCB
0E064:  CLRF   xCC
0E066:  CLRF   xCD
0E068:  CLRF   xCE
0E06A:  CLRF   xCF
0E06C:  CLRF   xD0
0E06E:  CLRF   xD1
0E070:  CLRF   xD2
0E072:  CLRF   xD3
0E074:  CLRF   xD4
0E076:  CLRF   xD5
0E078:  CLRF   xD6
0E07A:  CLRF   xD7
0E07C:  CLRF   xD8
0E07E:  CLRF   xD9
0E080:  CLRF   xDA
0E082:  CLRF   xDB
0E084:  CLRF   xDC
0E086:  CLRF   xDD
0E088:  CLRF   xDE
0E08A:  CLRF   xDF
0E08C:  CLRF   xE0
0E08E:  CLRF   xE1
0E090:  CLRF   xE2
0E092:  CLRF   xE3
0E094:  CLRF   xE4
0E096:  CLRF   xE5
0E098:  CLRF   xE6
0E09A:  CLRF   xE7
0E09C:  CLRF   xE8
0E09E:  CLRF   xE9
0E0A0:  CLRF   xEA
0E0A2:  CLRF   xEB
0E0A4:  CLRF   xEC
0E0A6:  CLRF   xED
0E0A8:  CLRF   xEE
0E0AA:  CLRF   xEF
0E0AC:  CLRF   xF0
0E0AE:  CLRF   xF1
0E0B0:  CLRF   xF2
0E0B2:  CLRF   xF3
0E0B4:  CLRF   xF4
0E0B6:  CLRF   xF5
0E0B8:  CLRF   xF6
0E0BA:  CLRF   xF7
0E0BC:  CLRF   xF8
0E0BE:  CLRF   xF9
0E0C0:  CLRF   xFA
0E0C2:  CLRF   xFB
0E0C4:  CLRF   xFC
0E0C6:  CLRF   xFD
0E0C8:  CLRF   xFE
0E0CA:  CLRF   xFF
0E0CC:  MOVLB  9
0E0CE:  CLRF   x00
0E0D0:  CLRF   x01
0E0D2:  CLRF   x02
0E0D4:  CLRF   x03
0E0D6:  CLRF   x04
0E0D8:  CLRF   x05
0E0DA:  CLRF   x06
0E0DC:  CLRF   x07
0E0DE:  CLRF   x08
0E0E0:  CLRF   x09
0E0E2:  CLRF   x0A
0E0E4:  CLRF   x0B
0E0E6:  CLRF   x0C
0E0E8:  CLRF   x0D
0E0EA:  CLRF   x0E
0E0EC:  CLRF   x0F
0E0EE:  CLRF   x10
0E0F0:  CLRF   x11
0E0F2:  CLRF   x12
0E0F4:  CLRF   x13
0E0F6:  CLRF   x14
0E0F8:  CLRF   x15
0E0FA:  CLRF   x16
0E0FC:  CLRF   x17
0E0FE:  CLRF   x18
0E100:  CLRF   x19
0E102:  CLRF   x1A
0E104:  CLRF   x1B
0E106:  CLRF   x1C
0E108:  CLRF   x1D
0E10A:  CLRF   x1E
0E10C:  CLRF   x1F
0E10E:  CLRF   x20
0E110:  CLRF   x21
0E112:  CLRF   x22
0E114:  CLRF   x23
0E116:  CLRF   x24
0E118:  CLRF   x25
0E11A:  CLRF   x26
0E11C:  CLRF   x27
0E11E:  CLRF   x28
0E120:  CLRF   x29
0E122:  CLRF   x2A
0E124:  CLRF   x2B
0E126:  CLRF   x2C
0E128:  CLRF   x2D
0E12A:  CLRF   x2E
0E12C:  CLRF   x2F
0E12E:  CLRF   x30
0E130:  CLRF   x31
0E132:  CLRF   x32
0E134:  CLRF   x33
0E136:  CLRF   x34
0E138:  CLRF   x35
0E13A:  CLRF   x36
0E13C:  CLRF   x37
0E13E:  CLRF   x38
0E140:  CLRF   x39
0E142:  CLRF   x3A
0E144:  CLRF   x3B
0E146:  CLRF   x3C
0E148:  CLRF   x3D
0E14A:  CLRF   x3E
0E14C:  CLRF   x3F
0E14E:  CLRF   x40
0E150:  CLRF   x41
0E152:  CLRF   x42
0E154:  CLRF   x43
0E156:  CLRF   x44
0E158:  CLRF   x45
0E15A:  CLRF   x46
0E15C:  CLRF   x47
0E15E:  CLRF   x48
0E160:  CLRF   x49
0E162:  CLRF   x4A
0E164:  CLRF   x4B
0E166:  CLRF   x4C
0E168:  CLRF   x4D
0E16A:  CLRF   x4E
0E16C:  CLRF   x4F
0E16E:  CLRF   x50
0E170:  CLRF   x51
0E172:  CLRF   x52
0E174:  CLRF   x53
0E176:  CLRF   x54
0E178:  CLRF   x55
0E17A:  CLRF   x56
0E17C:  CLRF   x57
0E17E:  CLRF   x58
0E180:  CLRF   x59
0E182:  CLRF   x5A
0E184:  CLRF   x5B
0E186:  CLRF   x5C
0E188:  CLRF   x5D
0E18A:  CLRF   x5E
0E18C:  CLRF   x5F
0E18E:  CLRF   x60
0E190:  CLRF   x61
0E192:  CLRF   x62
0E194:  CLRF   x63
0E196:  CLRF   x64
0E198:  CLRF   x65
0E19A:  CLRF   x66
0E19C:  CLRF   x67
0E19E:  CLRF   x68
0E1A0:  CLRF   x69
0E1A2:  CLRF   x6A
0E1A4:  CLRF   x6B
0E1A6:  CLRF   x6C
0E1A8:  CLRF   x6D
0E1AA:  CLRF   x6E
0E1AC:  CLRF   x6F
0E1AE:  CLRF   x70
0E1B0:  CLRF   x71
0E1B2:  CLRF   x72
0E1B4:  CLRF   x73
0E1B6:  CLRF   x74
0E1B8:  CLRF   x75
0E1BA:  CLRF   x76
0E1BC:  CLRF   x77
0E1BE:  CLRF   x78
0E1C0:  CLRF   x79
0E1C2:  CLRF   x7A
0E1C4:  CLRF   x7B
0E1C6:  CLRF   x7C
0E1C8:  CLRF   x7D
0E1CA:  CLRF   x7E
0E1CC:  CLRF   x7F
0E1CE:  CLRF   x80
0E1D0:  CLRF   x81
0E1D2:  CLRF   x82
0E1D4:  CLRF   x83
0E1D6:  CLRF   x84
0E1D8:  CLRF   x85
0E1DA:  CLRF   x86
0E1DC:  CLRF   x87
0E1DE:  CLRF   x88
0E1E0:  CLRF   x89
0E1E2:  CLRF   x8A
0E1E4:  CLRF   x8B
0E1E6:  CLRF   x8C
0E1E8:  CLRF   x8D
0E1EA:  CLRF   x8E
0E1EC:  CLRF   x8F
0E1EE:  CLRF   x90
0E1F0:  CLRF   x91
0E1F2:  CLRF   x92
0E1F4:  CLRF   x93
0E1F6:  CLRF   x94
0E1F8:  CLRF   x95
0E1FA:  CLRF   x96
0E1FC:  CLRF   x97
0E1FE:  CLRF   x98
0E200:  CLRF   x99
0E202:  CLRF   x9A
0E204:  CLRF   x9B
0E206:  CLRF   x9C
0E208:  CLRF   x9D
0E20A:  CLRF   x9E
0E20C:  CLRF   x9F
0E20E:  CLRF   xA0
0E210:  CLRF   xA1
0E212:  CLRF   xA2
0E214:  CLRF   xA3
0E216:  CLRF   xA4
0E218:  CLRF   xA5
0E21A:  CLRF   xA6
0E21C:  CLRF   xA7
0E21E:  CLRF   xA8
0E220:  CLRF   xA9
0E222:  CLRF   xAA
0E224:  CLRF   xAB
0E226:  CLRF   xAC
0E228:  CLRF   xAD
0E22A:  CLRF   xAE
0E22C:  CLRF   xAF
0E22E:  CLRF   xB0
0E230:  CLRF   xB1
0E232:  CLRF   xB2
....................     port2.port_num = 2; 
0E234:  MOVLW  02
0E236:  MOVLB  5
0E238:  MOVWF  xB3
....................     port2.sweep_step = 0;
0E23A:  CLRF   xB5
0E23C:  CLRF   xB4
....................     port2.active = 1;
0E23E:  MOVLB  9
0E240:  BSF    xB2.0
.................... 
....................     int16 count = 1;
....................     iv_env_t measured_data = create_meas_data();
0E242:  CLRF   xB4
0E244:  MOVLW  01
0E246:  MOVWF  xB3
0E248:  MOVLB  0
0E24A:  CALL   930E
0E24E:  MOVFF  02,03
0E252:  MOVF   01,W
0E254:  MOVWF  FE1
0E256:  MOVFF  03,FE2
0E25A:  MOVLW  09
0E25C:  MOVWF  FEA
0E25E:  MOVLW  B5
0E260:  MOVWF  FE9
0E262:  MOVLW  0C
0E264:  MOVWF  01
0E266:  MOVFF  FE6,FEE
0E26A:  DECFSZ 01,F
0E26C:  GOTO   E266
.................... 
....................     while (port1.active || port2.active)
0E270:  MOVLB  5
0E272:  BTFSS  xB2.0
0E274:  BRA    E27C
0E276:  MOVLB  0
0E278:  GOTO   E28C
0E27C:  MOVLB  0
0E27E:  MOVLB  9
0E280:  BTFSC  xB2.0
0E282:  BRA    E28A
0E284:  MOVLB  0
0E286:  GOTO   E570
0E28A:  MOVLB  0
....................     {
....................         // 出力設定
....................         if (port1.active) {
0E28C:  MOVLB  5
0E28E:  BTFSC  xB2.0
0E290:  BRA    E298
0E292:  MOVLB  0
0E294:  GOTO   E2AA
0E298:  MOVLB  0
....................             mcp4901_1_write(count);
0E29A:  MOVFF  9B4,9DD
0E29E:  MOVFF  9B3,9DC
0E2A2:  CALL   2894
....................         } else {
0E2A6:  GOTO   E2B6
....................             mcp4901_1_write(0);  // 閾値到達後は0出力
0E2AA:  MOVLB  9
0E2AC:  CLRF   xDD
0E2AE:  CLRF   xDC
0E2B0:  MOVLB  0
0E2B2:  CALL   2894
....................         }
.................... 
....................         if (port2.active) {
0E2B6:  MOVLB  9
0E2B8:  BTFSC  xB2.0
0E2BA:  BRA    E2C2
0E2BC:  MOVLB  0
0E2BE:  GOTO   E2D4
0E2C2:  MOVLB  0
....................             mcp4901_2_write(count);
0E2C4:  MOVFF  9B4,9DD
0E2C8:  MOVFF  9B3,9DC
0E2CC:  CALL   28D2
....................         } else {
0E2D0:  GOTO   E2E0
....................             mcp4901_2_write(0);
0E2D4:  MOVLB  9
0E2D6:  CLRF   xDD
0E2D8:  CLRF   xDC
0E2DA:  MOVLB  0
0E2DC:  CALL   28D2
....................         }
.................... 
....................         delay_us(100);
0E2E0:  MOVLW  85
0E2E2:  MOVWF  00
0E2E4:  DECFSZ 00,F
0E2E6:  BRA    E2E4
.................... 
....................         // データ取得
....................         if (port1.active) {
0E2E8:  MOVLB  5
0E2EA:  BTFSC  xB2.0
0E2EC:  BRA    E2F4
0E2EE:  MOVLB  0
0E2F0:  GOTO   E414
0E2F4:  MOVLB  0
....................             port1.data_buffer[count].voltage = ad7490_read(ADC_CIGS1_AMP);
0E2F6:  MOVLB  9
0E2F8:  RLCF   xB3,W
0E2FA:  MOVWF  02
0E2FC:  RLCF   xB4,W
0E2FE:  MOVWF  03
0E300:  RLCF   02,F
0E302:  RLCF   03,F
0E304:  MOVLW  FC
0E306:  ANDWF  02,F
0E308:  MOVF   02,W
0E30A:  ADDLW  B6
0E30C:  MOVWF  01
0E30E:  MOVLW  01
0E310:  ADDWFC 03,F
0E312:  MOVF   01,W
0E314:  MOVWF  xC4
0E316:  MOVFF  03,9C5
0E31A:  MOVLW  02
0E31C:  MOVWF  xEE
0E31E:  MOVLB  0
0E320:  CALL   24E4
0E324:  MOVFF  9C5,FEA
0E328:  MOVFF  9C4,FE9
0E32C:  MOVFF  02,FEC
0E330:  MOVF   FED,F
0E332:  MOVFF  01,FEF
....................             port1.data_buffer[count].current = ad7490_read(ADC_CIGS1_CURR);
0E336:  MOVLB  9
0E338:  RLCF   xB3,W
0E33A:  MOVWF  02
0E33C:  RLCF   xB4,W
0E33E:  MOVWF  03
0E340:  RLCF   02,F
0E342:  RLCF   03,F
0E344:  MOVLW  FC
0E346:  ANDWF  02,F
0E348:  MOVF   02,W
0E34A:  ADDLW  03
0E34C:  MOVWF  xC2
0E34E:  MOVLW  00
0E350:  ADDWFC 03,W
0E352:  MOVWF  xC3
0E354:  MOVLW  02
0E356:  ADDWF  xC2,W
0E358:  MOVWF  01
0E35A:  MOVLW  00
0E35C:  ADDWFC xC3,W
0E35E:  MOVWF  03
0E360:  MOVF   01,W
0E362:  ADDLW  B3
0E364:  MOVWF  01
0E366:  MOVLW  01
0E368:  ADDWFC 03,F
0E36A:  MOVF   01,W
0E36C:  MOVWF  xC2
0E36E:  MOVFF  03,9C3
0E372:  MOVLW  01
0E374:  MOVWF  xEE
0E376:  MOVLB  0
0E378:  CALL   24E4
0E37C:  MOVFF  9C3,FEA
0E380:  MOVFF  9C2,FE9
0E384:  MOVFF  02,FEC
0E388:  MOVF   FED,F
0E38A:  MOVFF  01,FEF
....................             port1.sweep_step = count + 1;
0E38E:  MOVLW  01
0E390:  MOVLB  9
0E392:  ADDWF  xB3,W
0E394:  MOVLB  1
0E396:  MOVWF  xB4
0E398:  MOVLW  00
0E39A:  MOVLB  9
0E39C:  ADDWFC xB4,W
0E39E:  MOVLB  1
0E3A0:  MOVWF  xB5
....................             if (port1.data_buffer[count].current < curr_limit) {
0E3A2:  MOVLB  9
0E3A4:  RLCF   xB3,W
0E3A6:  MOVWF  02
0E3A8:  RLCF   xB4,W
0E3AA:  MOVWF  03
0E3AC:  RLCF   02,F
0E3AE:  RLCF   03,F
0E3B0:  MOVLW  FC
0E3B2:  ANDWF  02,F
0E3B4:  MOVF   02,W
0E3B6:  ADDLW  03
0E3B8:  MOVWF  xC2
0E3BA:  MOVLW  00
0E3BC:  ADDWFC 03,W
0E3BE:  MOVWF  xC3
0E3C0:  MOVLW  02
0E3C2:  ADDWF  xC2,W
0E3C4:  MOVWF  01
0E3C6:  MOVLW  00
0E3C8:  ADDWFC xC3,W
0E3CA:  MOVWF  03
0E3CC:  MOVF   01,W
0E3CE:  ADDLW  B3
0E3D0:  MOVWF  FE9
0E3D2:  MOVLW  01
0E3D4:  ADDWFC 03,W
0E3D6:  MOVWF  FEA
0E3D8:  MOVFF  FEC,9C3
0E3DC:  MOVF   FED,F
0E3DE:  MOVFF  FEF,9C2
0E3E2:  MOVF   xC3,W
0E3E4:  MOVLB  1
0E3E6:  SUBWF  xB2,W
0E3E8:  BTFSC  FD8.0
0E3EA:  BRA    E3F2
0E3EC:  MOVLB  0
0E3EE:  GOTO   E414
0E3F2:  MOVLB  0
0E3F4:  BTFSS  FD8.2
0E3F6:  GOTO   E40E
0E3FA:  MOVLB  1
0E3FC:  MOVF   xB1,W
0E3FE:  MOVLB  9
0E400:  SUBWF  xC2,W
0E402:  BTFSS  FD8.0
0E404:  BRA    E40C
0E406:  MOVLB  0
0E408:  GOTO   E414
0E40C:  MOVLB  0
....................                 port1.active = 0;  // 閾値到達で測定終了
0E40E:  MOVLB  5
0E410:  BCF    xB2.0
0E412:  MOVLB  0
....................             }
....................         }
.................... 
....................         if (port2.active) {
0E414:  MOVLB  9
0E416:  BTFSC  xB2.0
0E418:  BRA    E420
0E41A:  MOVLB  0
0E41C:  GOTO   E540
0E420:  MOVLB  0
....................             port2.data_buffer[count].voltage = ad7490_read(ADC_CIGS2_AMP);
0E422:  MOVLB  9
0E424:  RLCF   xB3,W
0E426:  MOVWF  02
0E428:  RLCF   xB4,W
0E42A:  MOVWF  03
0E42C:  RLCF   02,F
0E42E:  RLCF   03,F
0E430:  MOVLW  FC
0E432:  ANDWF  02,F
0E434:  MOVF   02,W
0E436:  ADDLW  B6
0E438:  MOVWF  01
0E43A:  MOVLW  05
0E43C:  ADDWFC 03,F
0E43E:  MOVF   01,W
0E440:  MOVWF  xC4
0E442:  MOVFF  03,9C5
0E446:  MOVLW  06
0E448:  MOVWF  xEE
0E44A:  MOVLB  0
0E44C:  CALL   24E4
0E450:  MOVFF  9C5,FEA
0E454:  MOVFF  9C4,FE9
0E458:  MOVFF  02,FEC
0E45C:  MOVF   FED,F
0E45E:  MOVFF  01,FEF
....................             port2.data_buffer[count].current = ad7490_read(ADC_CIGS2_CURR);
0E462:  MOVLB  9
0E464:  RLCF   xB3,W
0E466:  MOVWF  02
0E468:  RLCF   xB4,W
0E46A:  MOVWF  03
0E46C:  RLCF   02,F
0E46E:  RLCF   03,F
0E470:  MOVLW  FC
0E472:  ANDWF  02,F
0E474:  MOVF   02,W
0E476:  ADDLW  03
0E478:  MOVWF  xC2
0E47A:  MOVLW  00
0E47C:  ADDWFC 03,W
0E47E:  MOVWF  xC3
0E480:  MOVLW  02
0E482:  ADDWF  xC2,W
0E484:  MOVWF  01
0E486:  MOVLW  00
0E488:  ADDWFC xC3,W
0E48A:  MOVWF  03
0E48C:  MOVF   01,W
0E48E:  ADDLW  B3
0E490:  MOVWF  01
0E492:  MOVLW  05
0E494:  ADDWFC 03,F
0E496:  MOVF   01,W
0E498:  MOVWF  xC2
0E49A:  MOVFF  03,9C3
0E49E:  MOVLW  05
0E4A0:  MOVWF  xEE
0E4A2:  MOVLB  0
0E4A4:  CALL   24E4
0E4A8:  MOVFF  9C3,FEA
0E4AC:  MOVFF  9C2,FE9
0E4B0:  MOVFF  02,FEC
0E4B4:  MOVF   FED,F
0E4B6:  MOVFF  01,FEF
....................             port2.sweep_step = count + 1;
0E4BA:  MOVLW  01
0E4BC:  MOVLB  9
0E4BE:  ADDWF  xB3,W
0E4C0:  MOVLB  5
0E4C2:  MOVWF  xB4
0E4C4:  MOVLW  00
0E4C6:  MOVLB  9
0E4C8:  ADDWFC xB4,W
0E4CA:  MOVLB  5
0E4CC:  MOVWF  xB5
....................             if (port2.data_buffer[count].current < curr_limit) {
0E4CE:  MOVLB  9
0E4D0:  RLCF   xB3,W
0E4D2:  MOVWF  02
0E4D4:  RLCF   xB4,W
0E4D6:  MOVWF  03
0E4D8:  RLCF   02,F
0E4DA:  RLCF   03,F
0E4DC:  MOVLW  FC
0E4DE:  ANDWF  02,F
0E4E0:  MOVF   02,W
0E4E2:  ADDLW  03
0E4E4:  MOVWF  xC2
0E4E6:  MOVLW  00
0E4E8:  ADDWFC 03,W
0E4EA:  MOVWF  xC3
0E4EC:  MOVLW  02
0E4EE:  ADDWF  xC2,W
0E4F0:  MOVWF  01
0E4F2:  MOVLW  00
0E4F4:  ADDWFC xC3,W
0E4F6:  MOVWF  03
0E4F8:  MOVF   01,W
0E4FA:  ADDLW  B3
0E4FC:  MOVWF  FE9
0E4FE:  MOVLW  05
0E500:  ADDWFC 03,W
0E502:  MOVWF  FEA
0E504:  MOVFF  FEC,9C3
0E508:  MOVF   FED,F
0E50A:  MOVFF  FEF,9C2
0E50E:  MOVF   xC3,W
0E510:  MOVLB  1
0E512:  SUBWF  xB2,W
0E514:  BTFSC  FD8.0
0E516:  BRA    E51E
0E518:  MOVLB  0
0E51A:  GOTO   E540
0E51E:  MOVLB  0
0E520:  BTFSS  FD8.2
0E522:  GOTO   E53A
0E526:  MOVLB  1
0E528:  MOVF   xB1,W
0E52A:  MOVLB  9
0E52C:  SUBWF  xC2,W
0E52E:  BTFSS  FD8.0
0E530:  BRA    E538
0E532:  MOVLB  0
0E534:  GOTO   E540
0E538:  MOVLB  0
....................                 port2.active = 0;
0E53A:  MOVLB  9
0E53C:  BCF    xB2.0
0E53E:  MOVLB  0
....................             }
....................         }
.................... 
....................         count++;
0E540:  MOVLB  9
0E542:  INCF   xB3,F
0E544:  BTFSC  FD8.2
0E546:  INCF   xB4,F
....................         if (count >= 255) {
0E548:  MOVF   xB4,F
0E54A:  BTFSC  FD8.2
0E54C:  BRA    E554
0E54E:  MOVLB  0
0E550:  GOTO   E568
0E554:  MOVLB  0
0E556:  MOVLB  9
0E558:  MOVF   xB3,W
0E55A:  SUBLW  FE
0E55C:  BTFSS  FD8.0
0E55E:  BRA    E566
0E560:  MOVLB  0
0E562:  GOTO   E56C
0E566:  MOVLB  0
....................             break;
0E568:  GOTO   E570
....................         }
0E56C:  GOTO   E270
....................     }
.................... 
....................     fprintf(PC, "temp_top:%04LX\r\n", measured_data.temp_py_top);
0E570:  MOVLW  22
0E572:  MOVWF  FF6
0E574:  MOVLW  06
0E576:  MOVWF  FF7
0E578:  MOVLW  00
0E57A:  MOVWF  FF8
0E57C:  MOVLW  09
0E57E:  MOVLB  A
0E580:  MOVWF  x4E
0E582:  MOVLB  0
0E584:  CALL   2334
0E588:  MOVFF  9BC,9E8
0E58C:  MOVLW  37
0E58E:  MOVLB  9
0E590:  MOVWF  xE9
0E592:  MOVLB  0
0E594:  CALL   2564
0E598:  MOVFF  9BB,9E8
0E59C:  MOVLW  37
0E59E:  MOVLB  9
0E5A0:  MOVWF  xE9
0E5A2:  MOVLB  0
0E5A4:  CALL   2564
0E5A8:  MOVLW  0D
0E5AA:  BTFSS  FA6.6
0E5AC:  GOTO   E5AA
0E5B0:  MOVLB  E
0E5B2:  MOVWF  xF9
0E5B4:  MOVLW  0A
0E5B6:  MOVLB  0
0E5B8:  BTFSS  FA6.6
0E5BA:  GOTO   E5B8
0E5BE:  MOVLB  E
0E5C0:  MOVWF  xF9
....................     fprintf(PC, "temp_bot:%04LX\r\n", measured_data.temp_py_bot);
0E5C2:  MOVLW  34
0E5C4:  MOVWF  FF6
0E5C6:  MOVLW  06
0E5C8:  MOVWF  FF7
0E5CA:  MOVLW  00
0E5CC:  MOVWF  FF8
0E5CE:  MOVLW  09
0E5D0:  MOVLB  A
0E5D2:  MOVWF  x4E
0E5D4:  MOVLB  0
0E5D6:  CALL   2334
0E5DA:  MOVFF  9BE,9E8
0E5DE:  MOVLW  37
0E5E0:  MOVLB  9
0E5E2:  MOVWF  xE9
0E5E4:  MOVLB  0
0E5E6:  CALL   2564
0E5EA:  MOVFF  9BD,9E8
0E5EE:  MOVLW  37
0E5F0:  MOVLB  9
0E5F2:  MOVWF  xE9
0E5F4:  MOVLB  0
0E5F6:  CALL   2564
0E5FA:  MOVLW  0D
0E5FC:  BTFSS  FA6.6
0E5FE:  GOTO   E5FC
0E602:  MOVLB  E
0E604:  MOVWF  xF9
0E606:  MOVLW  0A
0E608:  MOVLB  0
0E60A:  BTFSS  FA6.6
0E60C:  GOTO   E60A
0E610:  MOVLB  E
0E612:  MOVWF  xF9
....................     fprintf(PC, "temp_mis7:%04LX\r\n", measured_data.temp_mis7);
0E614:  MOVLW  46
0E616:  MOVWF  FF6
0E618:  MOVLW  06
0E61A:  MOVWF  FF7
0E61C:  MOVLW  00
0E61E:  MOVWF  FF8
0E620:  MOVLW  0A
0E622:  MOVLB  A
0E624:  MOVWF  x4E
0E626:  MOVLB  0
0E628:  CALL   2334
0E62C:  MOVFF  9C0,9E8
0E630:  MOVLW  37
0E632:  MOVLB  9
0E634:  MOVWF  xE9
0E636:  MOVLB  0
0E638:  CALL   2564
0E63C:  MOVFF  9BF,9E8
0E640:  MOVLW  37
0E642:  MOVLB  9
0E644:  MOVWF  xE9
0E646:  MOVLB  0
0E648:  CALL   2564
0E64C:  MOVLW  0D
0E64E:  BTFSS  FA6.6
0E650:  GOTO   E64E
0E654:  MOVLB  E
0E656:  MOVWF  xF9
0E658:  MOVLW  0A
0E65A:  MOVLB  0
0E65C:  BTFSS  FA6.6
0E65E:  GOTO   E65C
0E662:  MOVLB  E
0E664:  MOVWF  xF9
....................     fprintf(PC, "pd:%04LX\r\n", measured_data.pd);
0E666:  MOVLW  58
0E668:  MOVWF  FF6
0E66A:  MOVLW  06
0E66C:  MOVWF  FF7
0E66E:  MOVLW  00
0E670:  MOVWF  FF8
0E672:  MOVLW  03
0E674:  MOVLB  A
0E676:  MOVWF  x4E
0E678:  MOVLB  0
0E67A:  CALL   2334
0E67E:  MOVFF  9BA,9E8
0E682:  MOVLW  37
0E684:  MOVLB  9
0E686:  MOVWF  xE9
0E688:  MOVLB  0
0E68A:  CALL   2564
0E68E:  MOVFF  9B9,9E8
0E692:  MOVLW  37
0E694:  MOVLB  9
0E696:  MOVWF  xE9
0E698:  MOVLB  0
0E69A:  CALL   2564
0E69E:  MOVLW  0D
0E6A0:  BTFSS  FA6.6
0E6A2:  GOTO   E6A0
0E6A6:  MOVLB  E
0E6A8:  MOVWF  xF9
0E6AA:  MOVLW  0A
0E6AC:  MOVLB  0
0E6AE:  BTFSS  FA6.6
0E6B0:  GOTO   E6AE
0E6B4:  MOVLB  E
0E6B6:  MOVWF  xF9
....................     // Print I-V data
....................     fprintf(PC, "Volt1,Curr1,Volt2,Curr2\r\n");
0E6B8:  MOVLW  64
0E6BA:  MOVWF  FF6
0E6BC:  MOVLW  06
0E6BE:  MOVWF  FF7
0E6C0:  MOVLW  00
0E6C2:  MOVWF  FF8
0E6C4:  MOVLB  0
0E6C6:  CALL   22FE
....................     for (int i = 0; i < count; i++) {
0E6CA:  MOVLB  9
0E6CC:  CLRF   xC1
0E6CE:  MOVLB  0
0E6D0:  MOVLB  9
0E6D2:  MOVF   xB4,F
0E6D4:  BTFSC  FD8.2
0E6D6:  BRA    E6DE
0E6D8:  MOVLB  0
0E6DA:  GOTO   E6F2
0E6DE:  MOVLB  0
0E6E0:  MOVLB  9
0E6E2:  MOVF   xB3,W
0E6E4:  SUBWF  xC1,W
0E6E6:  BTFSS  FD8.0
0E6E8:  BRA    E6F0
0E6EA:  MOVLB  0
0E6EC:  GOTO   E8A6
0E6F0:  MOVLB  0
.................... 
....................         fprintf(PC, "%04LX,%04LX,%04LX,%04LX\r\n",
....................             port1.data_buffer[i].voltage, port1.data_buffer[i].current,
....................             port2.data_buffer[i].voltage, port2.data_buffer[i].current);
0E6F2:  MOVLB  A
0E6F4:  CLRF   x53
0E6F6:  MOVFF  9C1,A52
0E6FA:  CLRF   x55
0E6FC:  MOVLW  04
0E6FE:  MOVWF  x54
0E700:  MOVLB  0
0E702:  CALL   8260
0E706:  MOVFF  02,03
0E70A:  MOVF   01,W
0E70C:  ADDLW  B6
0E70E:  MOVWF  FE9
0E710:  MOVLW  01
0E712:  ADDWFC 03,W
0E714:  MOVWF  FEA
0E716:  MOVFF  FEC,9C5
0E71A:  MOVF   FED,F
0E71C:  MOVFF  FEF,9C4
0E720:  MOVLB  A
0E722:  CLRF   x53
0E724:  MOVFF  9C1,A52
0E728:  CLRF   x55
0E72A:  MOVLW  04
0E72C:  MOVWF  x54
0E72E:  MOVLB  0
0E730:  CALL   8260
0E734:  MOVFF  02,03
0E738:  MOVF   01,W
0E73A:  ADDLW  03
0E73C:  MOVLB  9
0E73E:  MOVWF  xC6
0E740:  MOVLW  00
0E742:  ADDWFC 03,W
0E744:  MOVWF  xC7
0E746:  MOVLW  02
0E748:  ADDWF  xC6,W
0E74A:  MOVWF  01
0E74C:  MOVLW  00
0E74E:  ADDWFC xC7,W
0E750:  MOVWF  03
0E752:  MOVF   01,W
0E754:  ADDLW  B3
0E756:  MOVWF  FE9
0E758:  MOVLW  01
0E75A:  ADDWFC 03,W
0E75C:  MOVWF  FEA
0E75E:  MOVFF  FEC,9C7
0E762:  MOVF   FED,F
0E764:  MOVFF  FEF,9C6
0E768:  MOVLB  A
0E76A:  CLRF   x53
0E76C:  MOVFF  9C1,A52
0E770:  CLRF   x55
0E772:  MOVLW  04
0E774:  MOVWF  x54
0E776:  MOVLB  0
0E778:  CALL   8260
0E77C:  MOVFF  02,03
0E780:  MOVF   01,W
0E782:  ADDLW  B6
0E784:  MOVWF  FE9
0E786:  MOVLW  05
0E788:  ADDWFC 03,W
0E78A:  MOVWF  FEA
0E78C:  MOVFF  FEC,9CB
0E790:  MOVF   FED,F
0E792:  MOVFF  FEF,9CA
0E796:  MOVLB  A
0E798:  CLRF   x53
0E79A:  MOVFF  9C1,A52
0E79E:  CLRF   x55
0E7A0:  MOVLW  04
0E7A2:  MOVWF  x54
0E7A4:  MOVLB  0
0E7A6:  CALL   8260
0E7AA:  MOVFF  02,03
0E7AE:  MOVF   01,W
0E7B0:  ADDLW  03
0E7B2:  MOVLB  9
0E7B4:  MOVWF  xCC
0E7B6:  MOVLW  00
0E7B8:  ADDWFC 03,W
0E7BA:  MOVWF  xCD
0E7BC:  MOVLW  02
0E7BE:  ADDWF  xCC,W
0E7C0:  MOVWF  01
0E7C2:  MOVLW  00
0E7C4:  ADDWFC xCD,W
0E7C6:  MOVWF  03
0E7C8:  MOVF   01,W
0E7CA:  ADDLW  B3
0E7CC:  MOVWF  FE9
0E7CE:  MOVLW  05
0E7D0:  ADDWFC 03,W
0E7D2:  MOVWF  FEA
0E7D4:  MOVFF  FEC,9CD
0E7D8:  MOVF   FED,F
0E7DA:  MOVFF  FEF,9CC
0E7DE:  MOVFF  9C5,9E8
0E7E2:  MOVLW  37
0E7E4:  MOVWF  xE9
0E7E6:  MOVLB  0
0E7E8:  CALL   2564
0E7EC:  MOVFF  9C4,9E8
0E7F0:  MOVLW  37
0E7F2:  MOVLB  9
0E7F4:  MOVWF  xE9
0E7F6:  MOVLB  0
0E7F8:  CALL   2564
0E7FC:  MOVLW  2C
0E7FE:  BTFSS  FA6.6
0E800:  GOTO   E7FE
0E804:  MOVLB  E
0E806:  MOVWF  xF9
0E808:  MOVFF  9C7,9E8
0E80C:  MOVLW  37
0E80E:  MOVLB  9
0E810:  MOVWF  xE9
0E812:  MOVLB  0
0E814:  CALL   2564
0E818:  MOVFF  9C6,9E8
0E81C:  MOVLW  37
0E81E:  MOVLB  9
0E820:  MOVWF  xE9
0E822:  MOVLB  0
0E824:  CALL   2564
0E828:  MOVLW  2C
0E82A:  BTFSS  FA6.6
0E82C:  GOTO   E82A
0E830:  MOVLB  E
0E832:  MOVWF  xF9
0E834:  MOVFF  9CB,9E8
0E838:  MOVLW  37
0E83A:  MOVLB  9
0E83C:  MOVWF  xE9
0E83E:  MOVLB  0
0E840:  CALL   2564
0E844:  MOVFF  9CA,9E8
0E848:  MOVLW  37
0E84A:  MOVLB  9
0E84C:  MOVWF  xE9
0E84E:  MOVLB  0
0E850:  CALL   2564
0E854:  MOVLW  2C
0E856:  BTFSS  FA6.6
0E858:  GOTO   E856
0E85C:  MOVLB  E
0E85E:  MOVWF  xF9
0E860:  MOVFF  9CD,9E8
0E864:  MOVLW  37
0E866:  MOVLB  9
0E868:  MOVWF  xE9
0E86A:  MOVLB  0
0E86C:  CALL   2564
0E870:  MOVFF  9CC,9E8
0E874:  MOVLW  37
0E876:  MOVLB  9
0E878:  MOVWF  xE9
0E87A:  MOVLB  0
0E87C:  CALL   2564
0E880:  MOVLW  0D
0E882:  BTFSS  FA6.6
0E884:  GOTO   E882
0E888:  MOVLB  E
0E88A:  MOVWF  xF9
0E88C:  MOVLW  0A
0E88E:  MOVLB  0
0E890:  BTFSS  FA6.6
0E892:  GOTO   E890
0E896:  MOVLB  E
0E898:  MOVWF  xF9
0E89A:  MOVLB  0
0E89C:  MOVLB  9
0E89E:  INCF   xC1,F
0E8A0:  MOVLB  0
0E8A2:  GOTO   E6D0
....................     }
....................     log_meas_data(&measured_data, &port1);
0E8A6:  MOVLW  09
0E8A8:  MOVLB  9
0E8AA:  MOVWF  xC3
0E8AC:  MOVLW  B5
0E8AE:  MOVWF  xC2
0E8B0:  MOVLW  01
0E8B2:  MOVWF  xC5
0E8B4:  MOVLW  B3
0E8B6:  MOVWF  xC4
0E8B8:  MOVLB  0
0E8BA:  CALL   93A0
....................     log_meas_data(&measured_data, &port2);
0E8BE:  MOVLW  09
0E8C0:  MOVLB  9
0E8C2:  MOVWF  xC3
0E8C4:  MOVLW  B5
0E8C6:  MOVWF  xC2
0E8C8:  MOVLW  05
0E8CA:  MOVWF  xC5
0E8CC:  MOVLW  B3
0E8CE:  MOVWF  xC4
0E8D0:  MOVLB  0
0E8D2:  CALL   93A0
....................     misf_update_address_area();
0E8D6:  CALL   507E
0E8DA:  GOTO   102AE (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit)
.................... {
....................     fprintf(PC, ".");
*
0B896:  MOVLW  2E
0B898:  BTFSS  FA6.6
0B89A:  GOTO   B898
0B89E:  MOVLB  E
0B8A0:  MOVWF  xF9
....................     
....................     
....................     connect_port1();
0B8A2:  MOVLB  0
0B8A4:  CALL   5234
....................     connect_port2();
0B8A8:  CALL   523C
....................     // Enable both CIGS ports
....................     mcp4901_1_write(0); 
0B8AC:  MOVLB  9
0B8AE:  CLRF   xDD
0B8B0:  CLRF   xDC
0B8B2:  MOVLB  0
0B8B4:  CALL   2894
....................     mcp4901_2_write(0);
0B8B8:  MOVLB  9
0B8BA:  CLRF   xDD
0B8BC:  CLRF   xDC
0B8BE:  MOVLB  0
0B8C0:  CALL   28D2
....................     connect_port1();
0B8C4:  CALL   5234
....................     connect_port2();
0B8C8:  CALL   523C
.................... 
....................     // Stabilization wait
....................     delay_ms(100);
0B8CC:  MOVLW  64
0B8CE:  MOVLB  B
0B8D0:  MOVWF  x03
0B8D2:  MOVLB  0
0B8D4:  CALL   22D0
....................     
....................     // Init Port1
....................     sweep_debug_config_t port1 = {0};
0B8D8:  MOVLB  1
0B8DA:  CLRF   xC9
0B8DC:  CLRF   xCA
0B8DE:  CLRF   xCB
0B8E0:  CLRF   xCC
0B8E2:  CLRF   xCD
0B8E4:  CLRF   xCE
0B8E6:  CLRF   xCF
0B8E8:  CLRF   xD0
0B8EA:  CLRF   xD1
0B8EC:  CLRF   xD2
0B8EE:  CLRF   xD3
0B8F0:  CLRF   xD4
0B8F2:  CLRF   xD5
0B8F4:  CLRF   xD6
0B8F6:  CLRF   xD7
0B8F8:  CLRF   xD8
0B8FA:  CLRF   xD9
0B8FC:  CLRF   xDA
0B8FE:  CLRF   xDB
0B900:  CLRF   xDC
0B902:  CLRF   xDD
0B904:  CLRF   xDE
0B906:  CLRF   xDF
0B908:  CLRF   xE0
0B90A:  CLRF   xE1
0B90C:  CLRF   xE2
0B90E:  CLRF   xE3
0B910:  CLRF   xE4
0B912:  CLRF   xE5
0B914:  CLRF   xE6
0B916:  CLRF   xE7
0B918:  CLRF   xE8
0B91A:  CLRF   xE9
0B91C:  CLRF   xEA
0B91E:  CLRF   xEB
0B920:  CLRF   xEC
0B922:  CLRF   xED
0B924:  CLRF   xEE
0B926:  CLRF   xEF
0B928:  CLRF   xF0
0B92A:  CLRF   xF1
0B92C:  CLRF   xF2
0B92E:  CLRF   xF3
0B930:  CLRF   xF4
0B932:  CLRF   xF5
0B934:  CLRF   xF6
0B936:  CLRF   xF7
0B938:  CLRF   xF8
0B93A:  CLRF   xF9
0B93C:  CLRF   xFA
0B93E:  CLRF   xFB
0B940:  CLRF   xFC
0B942:  CLRF   xFD
0B944:  CLRF   xFE
0B946:  CLRF   xFF
0B948:  MOVLB  2
0B94A:  CLRF   x00
0B94C:  CLRF   x01
0B94E:  CLRF   x02
0B950:  CLRF   x03
0B952:  CLRF   x04
0B954:  CLRF   x05
0B956:  CLRF   x06
0B958:  CLRF   x07
0B95A:  CLRF   x08
0B95C:  CLRF   x09
0B95E:  CLRF   x0A
0B960:  CLRF   x0B
0B962:  CLRF   x0C
0B964:  CLRF   x0D
0B966:  CLRF   x0E
0B968:  CLRF   x0F
0B96A:  CLRF   x10
0B96C:  CLRF   x11
0B96E:  CLRF   x12
0B970:  CLRF   x13
0B972:  CLRF   x14
0B974:  CLRF   x15
0B976:  CLRF   x16
0B978:  CLRF   x17
0B97A:  CLRF   x18
0B97C:  CLRF   x19
0B97E:  CLRF   x1A
0B980:  CLRF   x1B
0B982:  CLRF   x1C
0B984:  CLRF   x1D
0B986:  CLRF   x1E
0B988:  CLRF   x1F
0B98A:  CLRF   x20
0B98C:  CLRF   x21
0B98E:  CLRF   x22
0B990:  CLRF   x23
0B992:  CLRF   x24
0B994:  CLRF   x25
0B996:  CLRF   x26
0B998:  CLRF   x27
0B99A:  CLRF   x28
0B99C:  CLRF   x29
0B99E:  CLRF   x2A
0B9A0:  CLRF   x2B
0B9A2:  CLRF   x2C
0B9A4:  CLRF   x2D
0B9A6:  CLRF   x2E
0B9A8:  CLRF   x2F
0B9AA:  CLRF   x30
0B9AC:  CLRF   x31
0B9AE:  CLRF   x32
0B9B0:  CLRF   x33
0B9B2:  CLRF   x34
0B9B4:  CLRF   x35
0B9B6:  CLRF   x36
0B9B8:  CLRF   x37
0B9BA:  CLRF   x38
0B9BC:  CLRF   x39
0B9BE:  CLRF   x3A
0B9C0:  CLRF   x3B
0B9C2:  CLRF   x3C
0B9C4:  CLRF   x3D
0B9C6:  CLRF   x3E
0B9C8:  CLRF   x3F
0B9CA:  CLRF   x40
0B9CC:  CLRF   x41
0B9CE:  CLRF   x42
0B9D0:  CLRF   x43
0B9D2:  CLRF   x44
0B9D4:  CLRF   x45
0B9D6:  CLRF   x46
0B9D8:  CLRF   x47
0B9DA:  CLRF   x48
0B9DC:  CLRF   x49
0B9DE:  CLRF   x4A
0B9E0:  CLRF   x4B
0B9E2:  CLRF   x4C
0B9E4:  CLRF   x4D
0B9E6:  CLRF   x4E
0B9E8:  CLRF   x4F
0B9EA:  CLRF   x50
0B9EC:  CLRF   x51
0B9EE:  CLRF   x52
0B9F0:  CLRF   x53
0B9F2:  CLRF   x54
0B9F4:  CLRF   x55
0B9F6:  CLRF   x56
0B9F8:  CLRF   x57
0B9FA:  CLRF   x58
0B9FC:  CLRF   x59
0B9FE:  CLRF   x5A
0BA00:  CLRF   x5B
0BA02:  CLRF   x5C
0BA04:  CLRF   x5D
0BA06:  CLRF   x5E
0BA08:  CLRF   x5F
0BA0A:  CLRF   x60
0BA0C:  CLRF   x61
0BA0E:  CLRF   x62
0BA10:  CLRF   x63
0BA12:  CLRF   x64
0BA14:  CLRF   x65
0BA16:  CLRF   x66
0BA18:  CLRF   x67
0BA1A:  CLRF   x68
0BA1C:  CLRF   x69
0BA1E:  CLRF   x6A
0BA20:  CLRF   x6B
0BA22:  CLRF   x6C
0BA24:  CLRF   x6D
0BA26:  CLRF   x6E
0BA28:  CLRF   x6F
0BA2A:  CLRF   x70
0BA2C:  CLRF   x71
0BA2E:  CLRF   x72
0BA30:  CLRF   x73
0BA32:  CLRF   x74
0BA34:  CLRF   x75
0BA36:  CLRF   x76
0BA38:  CLRF   x77
0BA3A:  CLRF   x78
0BA3C:  CLRF   x79
0BA3E:  CLRF   x7A
0BA40:  CLRF   x7B
0BA42:  CLRF   x7C
0BA44:  CLRF   x7D
0BA46:  CLRF   x7E
0BA48:  CLRF   x7F
0BA4A:  CLRF   x80
0BA4C:  CLRF   x81
0BA4E:  CLRF   x82
0BA50:  CLRF   x83
0BA52:  CLRF   x84
0BA54:  CLRF   x85
0BA56:  CLRF   x86
0BA58:  CLRF   x87
0BA5A:  CLRF   x88
0BA5C:  CLRF   x89
0BA5E:  CLRF   x8A
0BA60:  CLRF   x8B
0BA62:  CLRF   x8C
0BA64:  CLRF   x8D
0BA66:  CLRF   x8E
0BA68:  CLRF   x8F
0BA6A:  CLRF   x90
0BA6C:  CLRF   x91
0BA6E:  CLRF   x92
0BA70:  CLRF   x93
0BA72:  CLRF   x94
0BA74:  CLRF   x95
0BA76:  CLRF   x96
0BA78:  CLRF   x97
0BA7A:  CLRF   x98
0BA7C:  CLRF   x99
0BA7E:  CLRF   x9A
0BA80:  CLRF   x9B
0BA82:  CLRF   x9C
0BA84:  CLRF   x9D
0BA86:  CLRF   x9E
0BA88:  CLRF   x9F
0BA8A:  CLRF   xA0
0BA8C:  CLRF   xA1
0BA8E:  CLRF   xA2
0BA90:  CLRF   xA3
0BA92:  CLRF   xA4
0BA94:  CLRF   xA5
0BA96:  CLRF   xA6
0BA98:  CLRF   xA7
0BA9A:  CLRF   xA8
0BA9C:  CLRF   xA9
0BA9E:  CLRF   xAA
0BAA0:  CLRF   xAB
0BAA2:  CLRF   xAC
0BAA4:  CLRF   xAD
0BAA6:  CLRF   xAE
0BAA8:  CLRF   xAF
0BAAA:  CLRF   xB0
0BAAC:  CLRF   xB1
0BAAE:  CLRF   xB2
0BAB0:  CLRF   xB3
0BAB2:  CLRF   xB4
0BAB4:  CLRF   xB5
0BAB6:  CLRF   xB6
0BAB8:  CLRF   xB7
0BABA:  CLRF   xB8
0BABC:  CLRF   xB9
0BABE:  CLRF   xBA
0BAC0:  CLRF   xBB
0BAC2:  CLRF   xBC
0BAC4:  CLRF   xBD
0BAC6:  CLRF   xBE
0BAC8:  CLRF   xBF
0BACA:  CLRF   xC0
0BACC:  CLRF   xC1
0BACE:  CLRF   xC2
0BAD0:  CLRF   xC3
0BAD2:  CLRF   xC4
0BAD4:  CLRF   xC5
0BAD6:  CLRF   xC6
0BAD8:  CLRF   xC7
0BADA:  CLRF   xC8
0BADC:  CLRF   xC9
0BADE:  CLRF   xCA
0BAE0:  CLRF   xCB
0BAE2:  CLRF   xCC
0BAE4:  CLRF   xCD
0BAE6:  CLRF   xCE
0BAE8:  CLRF   xCF
0BAEA:  CLRF   xD0
0BAEC:  CLRF   xD1
0BAEE:  CLRF   xD2
0BAF0:  CLRF   xD3
0BAF2:  CLRF   xD4
0BAF4:  CLRF   xD5
0BAF6:  CLRF   xD6
0BAF8:  CLRF   xD7
0BAFA:  CLRF   xD8
0BAFC:  CLRF   xD9
0BAFE:  CLRF   xDA
0BB00:  CLRF   xDB
0BB02:  CLRF   xDC
0BB04:  CLRF   xDD
0BB06:  CLRF   xDE
0BB08:  CLRF   xDF
0BB0A:  CLRF   xE0
0BB0C:  CLRF   xE1
0BB0E:  CLRF   xE2
0BB10:  CLRF   xE3
0BB12:  CLRF   xE4
0BB14:  CLRF   xE5
0BB16:  CLRF   xE6
0BB18:  CLRF   xE7
0BB1A:  CLRF   xE8
0BB1C:  CLRF   xE9
0BB1E:  CLRF   xEA
0BB20:  CLRF   xEB
0BB22:  CLRF   xEC
0BB24:  CLRF   xED
0BB26:  CLRF   xEE
0BB28:  CLRF   xEF
0BB2A:  CLRF   xF0
0BB2C:  CLRF   xF1
0BB2E:  CLRF   xF2
0BB30:  CLRF   xF3
0BB32:  CLRF   xF4
0BB34:  CLRF   xF5
0BB36:  CLRF   xF6
0BB38:  CLRF   xF7
0BB3A:  CLRF   xF8
0BB3C:  CLRF   xF9
0BB3E:  CLRF   xFA
0BB40:  CLRF   xFB
0BB42:  CLRF   xFC
0BB44:  CLRF   xFD
0BB46:  CLRF   xFE
0BB48:  CLRF   xFF
0BB4A:  MOVLB  3
0BB4C:  CLRF   x00
0BB4E:  CLRF   x01
0BB50:  CLRF   x02
0BB52:  CLRF   x03
0BB54:  CLRF   x04
0BB56:  CLRF   x05
0BB58:  CLRF   x06
0BB5A:  CLRF   x07
0BB5C:  CLRF   x08
0BB5E:  CLRF   x09
0BB60:  CLRF   x0A
0BB62:  CLRF   x0B
0BB64:  CLRF   x0C
0BB66:  CLRF   x0D
0BB68:  CLRF   x0E
0BB6A:  CLRF   x0F
0BB6C:  CLRF   x10
0BB6E:  CLRF   x11
0BB70:  CLRF   x12
0BB72:  CLRF   x13
0BB74:  CLRF   x14
0BB76:  CLRF   x15
0BB78:  CLRF   x16
0BB7A:  CLRF   x17
0BB7C:  CLRF   x18
0BB7E:  CLRF   x19
0BB80:  CLRF   x1A
0BB82:  CLRF   x1B
0BB84:  CLRF   x1C
0BB86:  CLRF   x1D
0BB88:  CLRF   x1E
0BB8A:  CLRF   x1F
0BB8C:  CLRF   x20
0BB8E:  CLRF   x21
0BB90:  CLRF   x22
0BB92:  CLRF   x23
0BB94:  CLRF   x24
0BB96:  CLRF   x25
0BB98:  CLRF   x26
0BB9A:  CLRF   x27
0BB9C:  CLRF   x28
0BB9E:  CLRF   x29
0BBA0:  CLRF   x2A
0BBA2:  CLRF   x2B
0BBA4:  CLRF   x2C
0BBA6:  CLRF   x2D
0BBA8:  CLRF   x2E
0BBAA:  CLRF   x2F
0BBAC:  CLRF   x30
0BBAE:  CLRF   x31
0BBB0:  CLRF   x32
0BBB2:  CLRF   x33
0BBB4:  CLRF   x34
0BBB6:  CLRF   x35
0BBB8:  CLRF   x36
0BBBA:  CLRF   x37
0BBBC:  CLRF   x38
0BBBE:  CLRF   x39
0BBC0:  CLRF   x3A
0BBC2:  CLRF   x3B
0BBC4:  CLRF   x3C
0BBC6:  CLRF   x3D
0BBC8:  CLRF   x3E
0BBCA:  CLRF   x3F
0BBCC:  CLRF   x40
0BBCE:  CLRF   x41
0BBD0:  CLRF   x42
0BBD2:  CLRF   x43
0BBD4:  CLRF   x44
0BBD6:  CLRF   x45
0BBD8:  CLRF   x46
0BBDA:  CLRF   x47
0BBDC:  CLRF   x48
0BBDE:  CLRF   x49
0BBE0:  CLRF   x4A
0BBE2:  CLRF   x4B
0BBE4:  CLRF   x4C
0BBE6:  CLRF   x4D
0BBE8:  CLRF   x4E
0BBEA:  CLRF   x4F
0BBEC:  CLRF   x50
0BBEE:  CLRF   x51
0BBF0:  CLRF   x52
0BBF2:  CLRF   x53
0BBF4:  CLRF   x54
0BBF6:  CLRF   x55
0BBF8:  CLRF   x56
0BBFA:  CLRF   x57
0BBFC:  CLRF   x58
0BBFE:  CLRF   x59
0BC00:  CLRF   x5A
0BC02:  CLRF   x5B
0BC04:  CLRF   x5C
0BC06:  CLRF   x5D
0BC08:  CLRF   x5E
0BC0A:  CLRF   x5F
0BC0C:  CLRF   x60
0BC0E:  CLRF   x61
0BC10:  CLRF   x62
0BC12:  CLRF   x63
0BC14:  CLRF   x64
0BC16:  CLRF   x65
0BC18:  CLRF   x66
0BC1A:  CLRF   x67
0BC1C:  CLRF   x68
0BC1E:  CLRF   x69
0BC20:  CLRF   x6A
0BC22:  CLRF   x6B
0BC24:  CLRF   x6C
0BC26:  CLRF   x6D
0BC28:  CLRF   x6E
0BC2A:  CLRF   x6F
0BC2C:  CLRF   x70
0BC2E:  CLRF   x71
0BC30:  CLRF   x72
0BC32:  CLRF   x73
0BC34:  CLRF   x74
0BC36:  CLRF   x75
0BC38:  CLRF   x76
0BC3A:  CLRF   x77
0BC3C:  CLRF   x78
0BC3E:  CLRF   x79
0BC40:  CLRF   x7A
0BC42:  CLRF   x7B
0BC44:  CLRF   x7C
0BC46:  CLRF   x7D
0BC48:  CLRF   x7E
0BC4A:  CLRF   x7F
0BC4C:  CLRF   x80
0BC4E:  CLRF   x81
0BC50:  CLRF   x82
0BC52:  CLRF   x83
0BC54:  CLRF   x84
0BC56:  CLRF   x85
0BC58:  CLRF   x86
0BC5A:  CLRF   x87
0BC5C:  CLRF   x88
0BC5E:  CLRF   x89
0BC60:  CLRF   x8A
0BC62:  CLRF   x8B
0BC64:  CLRF   x8C
0BC66:  CLRF   x8D
0BC68:  CLRF   x8E
0BC6A:  CLRF   x8F
0BC6C:  CLRF   x90
0BC6E:  CLRF   x91
0BC70:  CLRF   x92
0BC72:  CLRF   x93
0BC74:  CLRF   x94
0BC76:  CLRF   x95
0BC78:  CLRF   x96
0BC7A:  CLRF   x97
0BC7C:  CLRF   x98
0BC7E:  CLRF   x99
0BC80:  CLRF   x9A
0BC82:  CLRF   x9B
0BC84:  CLRF   x9C
0BC86:  CLRF   x9D
0BC88:  CLRF   x9E
0BC8A:  CLRF   x9F
0BC8C:  CLRF   xA0
0BC8E:  CLRF   xA1
0BC90:  CLRF   xA2
0BC92:  CLRF   xA3
0BC94:  CLRF   xA4
0BC96:  CLRF   xA5
0BC98:  CLRF   xA6
0BC9A:  CLRF   xA7
0BC9C:  CLRF   xA8
0BC9E:  CLRF   xA9
0BCA0:  CLRF   xAA
0BCA2:  CLRF   xAB
0BCA4:  CLRF   xAC
0BCA6:  CLRF   xAD
0BCA8:  CLRF   xAE
0BCAA:  CLRF   xAF
0BCAC:  CLRF   xB0
0BCAE:  CLRF   xB1
0BCB0:  CLRF   xB2
0BCB2:  CLRF   xB3
0BCB4:  CLRF   xB4
0BCB6:  CLRF   xB5
0BCB8:  CLRF   xB6
0BCBA:  CLRF   xB7
0BCBC:  CLRF   xB8
0BCBE:  CLRF   xB9
0BCC0:  CLRF   xBA
0BCC2:  CLRF   xBB
0BCC4:  CLRF   xBC
0BCC6:  CLRF   xBD
0BCC8:  CLRF   xBE
0BCCA:  CLRF   xBF
0BCCC:  CLRF   xC0
0BCCE:  CLRF   xC1
0BCD0:  CLRF   xC2
0BCD2:  CLRF   xC3
0BCD4:  CLRF   xC4
0BCD6:  CLRF   xC5
0BCD8:  CLRF   xC6
0BCDA:  CLRF   xC7
0BCDC:  CLRF   xC8
0BCDE:  CLRF   xC9
0BCE0:  CLRF   xCA
0BCE2:  CLRF   xCB
0BCE4:  CLRF   xCC
0BCE6:  CLRF   xCD
0BCE8:  CLRF   xCE
0BCEA:  CLRF   xCF
0BCEC:  CLRF   xD0
0BCEE:  CLRF   xD1
0BCF0:  CLRF   xD2
0BCF2:  CLRF   xD3
0BCF4:  CLRF   xD4
0BCF6:  CLRF   xD5
0BCF8:  CLRF   xD6
0BCFA:  CLRF   xD7
0BCFC:  CLRF   xD8
0BCFE:  CLRF   xD9
0BD00:  CLRF   xDA
0BD02:  CLRF   xDB
0BD04:  CLRF   xDC
0BD06:  CLRF   xDD
0BD08:  CLRF   xDE
0BD0A:  CLRF   xDF
0BD0C:  CLRF   xE0
0BD0E:  CLRF   xE1
0BD10:  CLRF   xE2
0BD12:  CLRF   xE3
0BD14:  CLRF   xE4
0BD16:  CLRF   xE5
0BD18:  CLRF   xE6
0BD1A:  CLRF   xE7
0BD1C:  CLRF   xE8
0BD1E:  CLRF   xE9
0BD20:  CLRF   xEA
0BD22:  CLRF   xEB
0BD24:  CLRF   xEC
0BD26:  CLRF   xED
0BD28:  CLRF   xEE
0BD2A:  CLRF   xEF
0BD2C:  CLRF   xF0
0BD2E:  CLRF   xF1
0BD30:  CLRF   xF2
0BD32:  CLRF   xF3
0BD34:  CLRF   xF4
0BD36:  CLRF   xF5
0BD38:  CLRF   xF6
0BD3A:  CLRF   xF7
0BD3C:  CLRF   xF8
0BD3E:  CLRF   xF9
0BD40:  CLRF   xFA
0BD42:  CLRF   xFB
0BD44:  CLRF   xFC
0BD46:  CLRF   xFD
0BD48:  CLRF   xFE
0BD4A:  CLRF   xFF
0BD4C:  MOVLB  4
0BD4E:  CLRF   x00
0BD50:  CLRF   x01
0BD52:  CLRF   x02
0BD54:  CLRF   x03
0BD56:  CLRF   x04
0BD58:  CLRF   x05
0BD5A:  CLRF   x06
0BD5C:  CLRF   x07
0BD5E:  CLRF   x08
0BD60:  CLRF   x09
0BD62:  CLRF   x0A
0BD64:  CLRF   x0B
0BD66:  CLRF   x0C
0BD68:  CLRF   x0D
0BD6A:  CLRF   x0E
0BD6C:  CLRF   x0F
0BD6E:  CLRF   x10
0BD70:  CLRF   x11
0BD72:  CLRF   x12
0BD74:  CLRF   x13
0BD76:  CLRF   x14
0BD78:  CLRF   x15
0BD7A:  CLRF   x16
0BD7C:  CLRF   x17
0BD7E:  CLRF   x18
0BD80:  CLRF   x19
0BD82:  CLRF   x1A
0BD84:  CLRF   x1B
0BD86:  CLRF   x1C
0BD88:  CLRF   x1D
0BD8A:  CLRF   x1E
0BD8C:  CLRF   x1F
0BD8E:  CLRF   x20
0BD90:  CLRF   x21
0BD92:  CLRF   x22
0BD94:  CLRF   x23
0BD96:  CLRF   x24
0BD98:  CLRF   x25
0BD9A:  CLRF   x26
0BD9C:  CLRF   x27
0BD9E:  CLRF   x28
0BDA0:  CLRF   x29
0BDA2:  CLRF   x2A
0BDA4:  CLRF   x2B
0BDA6:  CLRF   x2C
0BDA8:  CLRF   x2D
0BDAA:  CLRF   x2E
0BDAC:  CLRF   x2F
0BDAE:  CLRF   x30
0BDB0:  CLRF   x31
0BDB2:  CLRF   x32
0BDB4:  CLRF   x33
0BDB6:  CLRF   x34
0BDB8:  CLRF   x35
0BDBA:  CLRF   x36
0BDBC:  CLRF   x37
0BDBE:  CLRF   x38
0BDC0:  CLRF   x39
0BDC2:  CLRF   x3A
0BDC4:  CLRF   x3B
0BDC6:  CLRF   x3C
0BDC8:  CLRF   x3D
0BDCA:  CLRF   x3E
0BDCC:  CLRF   x3F
0BDCE:  CLRF   x40
0BDD0:  CLRF   x41
0BDD2:  CLRF   x42
0BDD4:  CLRF   x43
0BDD6:  CLRF   x44
0BDD8:  CLRF   x45
0BDDA:  CLRF   x46
0BDDC:  CLRF   x47
0BDDE:  CLRF   x48
0BDE0:  CLRF   x49
0BDE2:  CLRF   x4A
0BDE4:  CLRF   x4B
0BDE6:  CLRF   x4C
0BDE8:  CLRF   x4D
0BDEA:  CLRF   x4E
0BDEC:  CLRF   x4F
0BDEE:  CLRF   x50
0BDF0:  CLRF   x51
0BDF2:  CLRF   x52
0BDF4:  CLRF   x53
0BDF6:  CLRF   x54
0BDF8:  CLRF   x55
0BDFA:  CLRF   x56
0BDFC:  CLRF   x57
0BDFE:  CLRF   x58
0BE00:  CLRF   x59
0BE02:  CLRF   x5A
0BE04:  CLRF   x5B
0BE06:  CLRF   x5C
0BE08:  CLRF   x5D
0BE0A:  CLRF   x5E
0BE0C:  CLRF   x5F
0BE0E:  CLRF   x60
0BE10:  CLRF   x61
0BE12:  CLRF   x62
0BE14:  CLRF   x63
0BE16:  CLRF   x64
0BE18:  CLRF   x65
0BE1A:  CLRF   x66
0BE1C:  CLRF   x67
0BE1E:  CLRF   x68
0BE20:  CLRF   x69
0BE22:  CLRF   x6A
0BE24:  CLRF   x6B
0BE26:  CLRF   x6C
0BE28:  CLRF   x6D
0BE2A:  CLRF   x6E
0BE2C:  CLRF   x6F
0BE2E:  CLRF   x70
0BE30:  CLRF   x71
0BE32:  CLRF   x72
0BE34:  CLRF   x73
0BE36:  CLRF   x74
0BE38:  CLRF   x75
0BE3A:  CLRF   x76
0BE3C:  CLRF   x77
0BE3E:  CLRF   x78
0BE40:  CLRF   x79
0BE42:  CLRF   x7A
0BE44:  CLRF   x7B
0BE46:  CLRF   x7C
0BE48:  CLRF   x7D
0BE4A:  CLRF   x7E
0BE4C:  CLRF   x7F
0BE4E:  CLRF   x80
0BE50:  CLRF   x81
0BE52:  CLRF   x82
0BE54:  CLRF   x83
0BE56:  CLRF   x84
0BE58:  CLRF   x85
0BE5A:  CLRF   x86
0BE5C:  CLRF   x87
0BE5E:  CLRF   x88
0BE60:  CLRF   x89
0BE62:  CLRF   x8A
0BE64:  CLRF   x8B
0BE66:  CLRF   x8C
0BE68:  CLRF   x8D
0BE6A:  CLRF   x8E
0BE6C:  CLRF   x8F
0BE6E:  CLRF   x90
0BE70:  CLRF   x91
0BE72:  CLRF   x92
0BE74:  CLRF   x93
0BE76:  CLRF   x94
0BE78:  CLRF   x95
0BE7A:  CLRF   x96
0BE7C:  CLRF   x97
0BE7E:  CLRF   x98
0BE80:  CLRF   x99
0BE82:  CLRF   x9A
0BE84:  CLRF   x9B
0BE86:  CLRF   x9C
0BE88:  CLRF   x9D
0BE8A:  CLRF   x9E
0BE8C:  CLRF   x9F
0BE8E:  CLRF   xA0
0BE90:  CLRF   xA1
0BE92:  CLRF   xA2
0BE94:  CLRF   xA3
0BE96:  CLRF   xA4
0BE98:  CLRF   xA5
0BE9A:  CLRF   xA6
0BE9C:  CLRF   xA7
0BE9E:  CLRF   xA8
0BEA0:  CLRF   xA9
0BEA2:  CLRF   xAA
0BEA4:  CLRF   xAB
0BEA6:  CLRF   xAC
0BEA8:  CLRF   xAD
0BEAA:  CLRF   xAE
0BEAC:  CLRF   xAF
0BEAE:  CLRF   xB0
0BEB0:  CLRF   xB1
0BEB2:  CLRF   xB2
0BEB4:  CLRF   xB3
0BEB6:  CLRF   xB4
0BEB8:  CLRF   xB5
0BEBA:  CLRF   xB6
0BEBC:  CLRF   xB7
0BEBE:  CLRF   xB8
0BEC0:  CLRF   xB9
0BEC2:  CLRF   xBA
0BEC4:  CLRF   xBB
0BEC6:  CLRF   xBC
0BEC8:  CLRF   xBD
0BECA:  CLRF   xBE
0BECC:  CLRF   xBF
0BECE:  CLRF   xC0
0BED0:  CLRF   xC1
0BED2:  CLRF   xC2
0BED4:  CLRF   xC3
0BED6:  CLRF   xC4
0BED8:  CLRF   xC5
0BEDA:  CLRF   xC6
0BEDC:  CLRF   xC7
0BEDE:  CLRF   xC8
0BEE0:  CLRF   xC9
0BEE2:  CLRF   xCA
0BEE4:  CLRF   xCB
0BEE6:  CLRF   xCC
0BEE8:  CLRF   xCD
0BEEA:  CLRF   xCE
0BEEC:  CLRF   xCF
0BEEE:  CLRF   xD0
0BEF0:  CLRF   xD1
0BEF2:  CLRF   xD2
0BEF4:  CLRF   xD3
0BEF6:  CLRF   xD4
0BEF8:  CLRF   xD5
0BEFA:  CLRF   xD6
0BEFC:  CLRF   xD7
0BEFE:  CLRF   xD8
0BF00:  CLRF   xD9
0BF02:  CLRF   xDA
0BF04:  CLRF   xDB
0BF06:  CLRF   xDC
0BF08:  CLRF   xDD
0BF0A:  CLRF   xDE
0BF0C:  CLRF   xDF
0BF0E:  CLRF   xE0
0BF10:  CLRF   xE1
0BF12:  CLRF   xE2
0BF14:  CLRF   xE3
0BF16:  CLRF   xE4
0BF18:  CLRF   xE5
0BF1A:  CLRF   xE6
0BF1C:  CLRF   xE7
0BF1E:  CLRF   xE8
0BF20:  CLRF   xE9
0BF22:  CLRF   xEA
0BF24:  CLRF   xEB
0BF26:  CLRF   xEC
0BF28:  CLRF   xED
0BF2A:  CLRF   xEE
0BF2C:  CLRF   xEF
0BF2E:  CLRF   xF0
0BF30:  CLRF   xF1
0BF32:  CLRF   xF2
0BF34:  CLRF   xF3
0BF36:  CLRF   xF4
0BF38:  CLRF   xF5
0BF3A:  CLRF   xF6
0BF3C:  CLRF   xF7
0BF3E:  CLRF   xF8
0BF40:  CLRF   xF9
0BF42:  CLRF   xFA
0BF44:  CLRF   xFB
0BF46:  CLRF   xFC
0BF48:  CLRF   xFD
0BF4A:  CLRF   xFE
0BF4C:  CLRF   xFF
0BF4E:  MOVLB  5
0BF50:  CLRF   x00
0BF52:  CLRF   x01
0BF54:  CLRF   x02
0BF56:  CLRF   x03
0BF58:  CLRF   x04
0BF5A:  CLRF   x05
0BF5C:  CLRF   x06
0BF5E:  CLRF   x07
0BF60:  CLRF   x08
0BF62:  CLRF   x09
0BF64:  CLRF   x0A
0BF66:  CLRF   x0B
0BF68:  CLRF   x0C
0BF6A:  CLRF   x0D
0BF6C:  CLRF   x0E
0BF6E:  CLRF   x0F
0BF70:  CLRF   x10
0BF72:  CLRF   x11
0BF74:  CLRF   x12
0BF76:  CLRF   x13
0BF78:  CLRF   x14
0BF7A:  CLRF   x15
0BF7C:  CLRF   x16
0BF7E:  CLRF   x17
0BF80:  CLRF   x18
0BF82:  CLRF   x19
0BF84:  CLRF   x1A
0BF86:  CLRF   x1B
0BF88:  CLRF   x1C
0BF8A:  CLRF   x1D
0BF8C:  CLRF   x1E
0BF8E:  CLRF   x1F
0BF90:  CLRF   x20
0BF92:  CLRF   x21
0BF94:  CLRF   x22
0BF96:  CLRF   x23
0BF98:  CLRF   x24
0BF9A:  CLRF   x25
0BF9C:  CLRF   x26
0BF9E:  CLRF   x27
0BFA0:  CLRF   x28
0BFA2:  CLRF   x29
0BFA4:  CLRF   x2A
0BFA6:  CLRF   x2B
0BFA8:  CLRF   x2C
0BFAA:  CLRF   x2D
0BFAC:  CLRF   x2E
0BFAE:  CLRF   x2F
0BFB0:  CLRF   x30
0BFB2:  CLRF   x31
0BFB4:  CLRF   x32
0BFB6:  CLRF   x33
0BFB8:  CLRF   x34
0BFBA:  CLRF   x35
0BFBC:  CLRF   x36
0BFBE:  CLRF   x37
0BFC0:  CLRF   x38
0BFC2:  CLRF   x39
0BFC4:  CLRF   x3A
0BFC6:  CLRF   x3B
0BFC8:  CLRF   x3C
0BFCA:  CLRF   x3D
0BFCC:  CLRF   x3E
0BFCE:  CLRF   x3F
0BFD0:  CLRF   x40
0BFD2:  CLRF   x41
0BFD4:  CLRF   x42
0BFD6:  CLRF   x43
0BFD8:  CLRF   x44
0BFDA:  CLRF   x45
0BFDC:  CLRF   x46
0BFDE:  CLRF   x47
0BFE0:  CLRF   x48
0BFE2:  CLRF   x49
0BFE4:  CLRF   x4A
0BFE6:  CLRF   x4B
0BFE8:  CLRF   x4C
0BFEA:  CLRF   x4D
0BFEC:  CLRF   x4E
0BFEE:  CLRF   x4F
0BFF0:  CLRF   x50
0BFF2:  CLRF   x51
0BFF4:  CLRF   x52
0BFF6:  CLRF   x53
0BFF8:  CLRF   x54
0BFFA:  CLRF   x55
0BFFC:  CLRF   x56
0BFFE:  CLRF   x57
0C000:  CLRF   x58
0C002:  CLRF   x59
0C004:  CLRF   x5A
0C006:  CLRF   x5B
0C008:  CLRF   x5C
0C00A:  CLRF   x5D
0C00C:  CLRF   x5E
0C00E:  CLRF   x5F
0C010:  CLRF   x60
0C012:  CLRF   x61
0C014:  CLRF   x62
0C016:  CLRF   x63
0C018:  CLRF   x64
0C01A:  CLRF   x65
0C01C:  CLRF   x66
0C01E:  CLRF   x67
0C020:  CLRF   x68
0C022:  CLRF   x69
0C024:  CLRF   x6A
0C026:  CLRF   x6B
0C028:  CLRF   x6C
0C02A:  CLRF   x6D
0C02C:  CLRF   x6E
0C02E:  CLRF   x6F
0C030:  CLRF   x70
0C032:  CLRF   x71
0C034:  CLRF   x72
0C036:  CLRF   x73
0C038:  CLRF   x74
0C03A:  CLRF   x75
0C03C:  CLRF   x76
0C03E:  CLRF   x77
0C040:  CLRF   x78
0C042:  CLRF   x79
0C044:  CLRF   x7A
0C046:  CLRF   x7B
0C048:  CLRF   x7C
0C04A:  CLRF   x7D
0C04C:  CLRF   x7E
0C04E:  CLRF   x7F
0C050:  CLRF   x80
0C052:  CLRF   x81
0C054:  CLRF   x82
0C056:  CLRF   x83
0C058:  CLRF   x84
0C05A:  CLRF   x85
0C05C:  CLRF   x86
0C05E:  CLRF   x87
0C060:  CLRF   x88
0C062:  CLRF   x89
0C064:  CLRF   x8A
0C066:  CLRF   x8B
0C068:  CLRF   x8C
0C06A:  CLRF   x8D
0C06C:  CLRF   x8E
0C06E:  CLRF   x8F
0C070:  CLRF   x90
0C072:  CLRF   x91
0C074:  CLRF   x92
0C076:  CLRF   x93
0C078:  CLRF   x94
0C07A:  CLRF   x95
0C07C:  CLRF   x96
0C07E:  CLRF   x97
0C080:  CLRF   x98
0C082:  CLRF   x99
0C084:  CLRF   x9A
0C086:  CLRF   x9B
0C088:  CLRF   x9C
0C08A:  CLRF   x9D
0C08C:  CLRF   x9E
0C08E:  CLRF   x9F
0C090:  CLRF   xA0
0C092:  CLRF   xA1
0C094:  CLRF   xA2
0C096:  CLRF   xA3
0C098:  CLRF   xA4
0C09A:  CLRF   xA5
0C09C:  CLRF   xA6
0C09E:  CLRF   xA7
0C0A0:  CLRF   xA8
0C0A2:  CLRF   xA9
0C0A4:  CLRF   xAA
0C0A6:  CLRF   xAB
0C0A8:  CLRF   xAC
0C0AA:  CLRF   xAD
0C0AC:  CLRF   xAE
0C0AE:  CLRF   xAF
0C0B0:  CLRF   xB0
0C0B2:  CLRF   xB1
0C0B4:  CLRF   xB2
0C0B6:  CLRF   xB3
0C0B8:  CLRF   xB4
0C0BA:  CLRF   xB5
0C0BC:  CLRF   xB6
0C0BE:  CLRF   xB7
0C0C0:  CLRF   xB8
0C0C2:  CLRF   xB9
0C0C4:  CLRF   xBA
0C0C6:  CLRF   xBB
0C0C8:  CLRF   xBC
0C0CA:  CLRF   xBD
0C0CC:  CLRF   xBE
0C0CE:  CLRF   xBF
0C0D0:  CLRF   xC0
0C0D2:  CLRF   xC1
0C0D4:  CLRF   xC2
0C0D6:  CLRF   xC3
0C0D8:  CLRF   xC4
0C0DA:  CLRF   xC5
0C0DC:  CLRF   xC6
0C0DE:  CLRF   xC7
0C0E0:  CLRF   xC8
....................     port1.port_num = 1;
0C0E2:  MOVLW  01
0C0E4:  MOVLB  1
0C0E6:  MOVWF  xC9
....................     port1.sweep_step = 0;
0C0E8:  CLRF   xCB
0C0EA:  CLRF   xCA
....................     port1.active = 1;
0C0EC:  MOVLB  5
0C0EE:  BSF    xC8.0
.................... 
....................     // Init Port2
....................     sweep_debug_config_t port2 = {0};
0C0F0:  CLRF   xC9
0C0F2:  CLRF   xCA
0C0F4:  CLRF   xCB
0C0F6:  CLRF   xCC
0C0F8:  CLRF   xCD
0C0FA:  CLRF   xCE
0C0FC:  CLRF   xCF
0C0FE:  CLRF   xD0
0C100:  CLRF   xD1
0C102:  CLRF   xD2
0C104:  CLRF   xD3
0C106:  CLRF   xD4
0C108:  CLRF   xD5
0C10A:  CLRF   xD6
0C10C:  CLRF   xD7
0C10E:  CLRF   xD8
0C110:  CLRF   xD9
0C112:  CLRF   xDA
0C114:  CLRF   xDB
0C116:  CLRF   xDC
0C118:  CLRF   xDD
0C11A:  CLRF   xDE
0C11C:  CLRF   xDF
0C11E:  CLRF   xE0
0C120:  CLRF   xE1
0C122:  CLRF   xE2
0C124:  CLRF   xE3
0C126:  CLRF   xE4
0C128:  CLRF   xE5
0C12A:  CLRF   xE6
0C12C:  CLRF   xE7
0C12E:  CLRF   xE8
0C130:  CLRF   xE9
0C132:  CLRF   xEA
0C134:  CLRF   xEB
0C136:  CLRF   xEC
0C138:  CLRF   xED
0C13A:  CLRF   xEE
0C13C:  CLRF   xEF
0C13E:  CLRF   xF0
0C140:  CLRF   xF1
0C142:  CLRF   xF2
0C144:  CLRF   xF3
0C146:  CLRF   xF4
0C148:  CLRF   xF5
0C14A:  CLRF   xF6
0C14C:  CLRF   xF7
0C14E:  CLRF   xF8
0C150:  CLRF   xF9
0C152:  CLRF   xFA
0C154:  CLRF   xFB
0C156:  CLRF   xFC
0C158:  CLRF   xFD
0C15A:  CLRF   xFE
0C15C:  CLRF   xFF
0C15E:  MOVLB  6
0C160:  CLRF   x00
0C162:  CLRF   x01
0C164:  CLRF   x02
0C166:  CLRF   x03
0C168:  CLRF   x04
0C16A:  CLRF   x05
0C16C:  CLRF   x06
0C16E:  CLRF   x07
0C170:  CLRF   x08
0C172:  CLRF   x09
0C174:  CLRF   x0A
0C176:  CLRF   x0B
0C178:  CLRF   x0C
0C17A:  CLRF   x0D
0C17C:  CLRF   x0E
0C17E:  CLRF   x0F
0C180:  CLRF   x10
0C182:  CLRF   x11
0C184:  CLRF   x12
0C186:  CLRF   x13
0C188:  CLRF   x14
0C18A:  CLRF   x15
0C18C:  CLRF   x16
0C18E:  CLRF   x17
0C190:  CLRF   x18
0C192:  CLRF   x19
0C194:  CLRF   x1A
0C196:  CLRF   x1B
0C198:  CLRF   x1C
0C19A:  CLRF   x1D
0C19C:  CLRF   x1E
0C19E:  CLRF   x1F
0C1A0:  CLRF   x20
0C1A2:  CLRF   x21
0C1A4:  CLRF   x22
0C1A6:  CLRF   x23
0C1A8:  CLRF   x24
0C1AA:  CLRF   x25
0C1AC:  CLRF   x26
0C1AE:  CLRF   x27
0C1B0:  CLRF   x28
0C1B2:  CLRF   x29
0C1B4:  CLRF   x2A
0C1B6:  CLRF   x2B
0C1B8:  CLRF   x2C
0C1BA:  CLRF   x2D
0C1BC:  CLRF   x2E
0C1BE:  CLRF   x2F
0C1C0:  CLRF   x30
0C1C2:  CLRF   x31
0C1C4:  CLRF   x32
0C1C6:  CLRF   x33
0C1C8:  CLRF   x34
0C1CA:  CLRF   x35
0C1CC:  CLRF   x36
0C1CE:  CLRF   x37
0C1D0:  CLRF   x38
0C1D2:  CLRF   x39
0C1D4:  CLRF   x3A
0C1D6:  CLRF   x3B
0C1D8:  CLRF   x3C
0C1DA:  CLRF   x3D
0C1DC:  CLRF   x3E
0C1DE:  CLRF   x3F
0C1E0:  CLRF   x40
0C1E2:  CLRF   x41
0C1E4:  CLRF   x42
0C1E6:  CLRF   x43
0C1E8:  CLRF   x44
0C1EA:  CLRF   x45
0C1EC:  CLRF   x46
0C1EE:  CLRF   x47
0C1F0:  CLRF   x48
0C1F2:  CLRF   x49
0C1F4:  CLRF   x4A
0C1F6:  CLRF   x4B
0C1F8:  CLRF   x4C
0C1FA:  CLRF   x4D
0C1FC:  CLRF   x4E
0C1FE:  CLRF   x4F
0C200:  CLRF   x50
0C202:  CLRF   x51
0C204:  CLRF   x52
0C206:  CLRF   x53
0C208:  CLRF   x54
0C20A:  CLRF   x55
0C20C:  CLRF   x56
0C20E:  CLRF   x57
0C210:  CLRF   x58
0C212:  CLRF   x59
0C214:  CLRF   x5A
0C216:  CLRF   x5B
0C218:  CLRF   x5C
0C21A:  CLRF   x5D
0C21C:  CLRF   x5E
0C21E:  CLRF   x5F
0C220:  CLRF   x60
0C222:  CLRF   x61
0C224:  CLRF   x62
0C226:  CLRF   x63
0C228:  CLRF   x64
0C22A:  CLRF   x65
0C22C:  CLRF   x66
0C22E:  CLRF   x67
0C230:  CLRF   x68
0C232:  CLRF   x69
0C234:  CLRF   x6A
0C236:  CLRF   x6B
0C238:  CLRF   x6C
0C23A:  CLRF   x6D
0C23C:  CLRF   x6E
0C23E:  CLRF   x6F
0C240:  CLRF   x70
0C242:  CLRF   x71
0C244:  CLRF   x72
0C246:  CLRF   x73
0C248:  CLRF   x74
0C24A:  CLRF   x75
0C24C:  CLRF   x76
0C24E:  CLRF   x77
0C250:  CLRF   x78
0C252:  CLRF   x79
0C254:  CLRF   x7A
0C256:  CLRF   x7B
0C258:  CLRF   x7C
0C25A:  CLRF   x7D
0C25C:  CLRF   x7E
0C25E:  CLRF   x7F
0C260:  CLRF   x80
0C262:  CLRF   x81
0C264:  CLRF   x82
0C266:  CLRF   x83
0C268:  CLRF   x84
0C26A:  CLRF   x85
0C26C:  CLRF   x86
0C26E:  CLRF   x87
0C270:  CLRF   x88
0C272:  CLRF   x89
0C274:  CLRF   x8A
0C276:  CLRF   x8B
0C278:  CLRF   x8C
0C27A:  CLRF   x8D
0C27C:  CLRF   x8E
0C27E:  CLRF   x8F
0C280:  CLRF   x90
0C282:  CLRF   x91
0C284:  CLRF   x92
0C286:  CLRF   x93
0C288:  CLRF   x94
0C28A:  CLRF   x95
0C28C:  CLRF   x96
0C28E:  CLRF   x97
0C290:  CLRF   x98
0C292:  CLRF   x99
0C294:  CLRF   x9A
0C296:  CLRF   x9B
0C298:  CLRF   x9C
0C29A:  CLRF   x9D
0C29C:  CLRF   x9E
0C29E:  CLRF   x9F
0C2A0:  CLRF   xA0
0C2A2:  CLRF   xA1
0C2A4:  CLRF   xA2
0C2A6:  CLRF   xA3
0C2A8:  CLRF   xA4
0C2AA:  CLRF   xA5
0C2AC:  CLRF   xA6
0C2AE:  CLRF   xA7
0C2B0:  CLRF   xA8
0C2B2:  CLRF   xA9
0C2B4:  CLRF   xAA
0C2B6:  CLRF   xAB
0C2B8:  CLRF   xAC
0C2BA:  CLRF   xAD
0C2BC:  CLRF   xAE
0C2BE:  CLRF   xAF
0C2C0:  CLRF   xB0
0C2C2:  CLRF   xB1
0C2C4:  CLRF   xB2
0C2C6:  CLRF   xB3
0C2C8:  CLRF   xB4
0C2CA:  CLRF   xB5
0C2CC:  CLRF   xB6
0C2CE:  CLRF   xB7
0C2D0:  CLRF   xB8
0C2D2:  CLRF   xB9
0C2D4:  CLRF   xBA
0C2D6:  CLRF   xBB
0C2D8:  CLRF   xBC
0C2DA:  CLRF   xBD
0C2DC:  CLRF   xBE
0C2DE:  CLRF   xBF
0C2E0:  CLRF   xC0
0C2E2:  CLRF   xC1
0C2E4:  CLRF   xC2
0C2E6:  CLRF   xC3
0C2E8:  CLRF   xC4
0C2EA:  CLRF   xC5
0C2EC:  CLRF   xC6
0C2EE:  CLRF   xC7
0C2F0:  CLRF   xC8
0C2F2:  CLRF   xC9
0C2F4:  CLRF   xCA
0C2F6:  CLRF   xCB
0C2F8:  CLRF   xCC
0C2FA:  CLRF   xCD
0C2FC:  CLRF   xCE
0C2FE:  CLRF   xCF
0C300:  CLRF   xD0
0C302:  CLRF   xD1
0C304:  CLRF   xD2
0C306:  CLRF   xD3
0C308:  CLRF   xD4
0C30A:  CLRF   xD5
0C30C:  CLRF   xD6
0C30E:  CLRF   xD7
0C310:  CLRF   xD8
0C312:  CLRF   xD9
0C314:  CLRF   xDA
0C316:  CLRF   xDB
0C318:  CLRF   xDC
0C31A:  CLRF   xDD
0C31C:  CLRF   xDE
0C31E:  CLRF   xDF
0C320:  CLRF   xE0
0C322:  CLRF   xE1
0C324:  CLRF   xE2
0C326:  CLRF   xE3
0C328:  CLRF   xE4
0C32A:  CLRF   xE5
0C32C:  CLRF   xE6
0C32E:  CLRF   xE7
0C330:  CLRF   xE8
0C332:  CLRF   xE9
0C334:  CLRF   xEA
0C336:  CLRF   xEB
0C338:  CLRF   xEC
0C33A:  CLRF   xED
0C33C:  CLRF   xEE
0C33E:  CLRF   xEF
0C340:  CLRF   xF0
0C342:  CLRF   xF1
0C344:  CLRF   xF2
0C346:  CLRF   xF3
0C348:  CLRF   xF4
0C34A:  CLRF   xF5
0C34C:  CLRF   xF6
0C34E:  CLRF   xF7
0C350:  CLRF   xF8
0C352:  CLRF   xF9
0C354:  CLRF   xFA
0C356:  CLRF   xFB
0C358:  CLRF   xFC
0C35A:  CLRF   xFD
0C35C:  CLRF   xFE
0C35E:  CLRF   xFF
0C360:  MOVLB  7
0C362:  CLRF   x00
0C364:  CLRF   x01
0C366:  CLRF   x02
0C368:  CLRF   x03
0C36A:  CLRF   x04
0C36C:  CLRF   x05
0C36E:  CLRF   x06
0C370:  CLRF   x07
0C372:  CLRF   x08
0C374:  CLRF   x09
0C376:  CLRF   x0A
0C378:  CLRF   x0B
0C37A:  CLRF   x0C
0C37C:  CLRF   x0D
0C37E:  CLRF   x0E
0C380:  CLRF   x0F
0C382:  CLRF   x10
0C384:  CLRF   x11
0C386:  CLRF   x12
0C388:  CLRF   x13
0C38A:  CLRF   x14
0C38C:  CLRF   x15
0C38E:  CLRF   x16
0C390:  CLRF   x17
0C392:  CLRF   x18
0C394:  CLRF   x19
0C396:  CLRF   x1A
0C398:  CLRF   x1B
0C39A:  CLRF   x1C
0C39C:  CLRF   x1D
0C39E:  CLRF   x1E
0C3A0:  CLRF   x1F
0C3A2:  CLRF   x20
0C3A4:  CLRF   x21
0C3A6:  CLRF   x22
0C3A8:  CLRF   x23
0C3AA:  CLRF   x24
0C3AC:  CLRF   x25
0C3AE:  CLRF   x26
0C3B0:  CLRF   x27
0C3B2:  CLRF   x28
0C3B4:  CLRF   x29
0C3B6:  CLRF   x2A
0C3B8:  CLRF   x2B
0C3BA:  CLRF   x2C
0C3BC:  CLRF   x2D
0C3BE:  CLRF   x2E
0C3C0:  CLRF   x2F
0C3C2:  CLRF   x30
0C3C4:  CLRF   x31
0C3C6:  CLRF   x32
0C3C8:  CLRF   x33
0C3CA:  CLRF   x34
0C3CC:  CLRF   x35
0C3CE:  CLRF   x36
0C3D0:  CLRF   x37
0C3D2:  CLRF   x38
0C3D4:  CLRF   x39
0C3D6:  CLRF   x3A
0C3D8:  CLRF   x3B
0C3DA:  CLRF   x3C
0C3DC:  CLRF   x3D
0C3DE:  CLRF   x3E
0C3E0:  CLRF   x3F
0C3E2:  CLRF   x40
0C3E4:  CLRF   x41
0C3E6:  CLRF   x42
0C3E8:  CLRF   x43
0C3EA:  CLRF   x44
0C3EC:  CLRF   x45
0C3EE:  CLRF   x46
0C3F0:  CLRF   x47
0C3F2:  CLRF   x48
0C3F4:  CLRF   x49
0C3F6:  CLRF   x4A
0C3F8:  CLRF   x4B
0C3FA:  CLRF   x4C
0C3FC:  CLRF   x4D
0C3FE:  CLRF   x4E
0C400:  CLRF   x4F
0C402:  CLRF   x50
0C404:  CLRF   x51
0C406:  CLRF   x52
0C408:  CLRF   x53
0C40A:  CLRF   x54
0C40C:  CLRF   x55
0C40E:  CLRF   x56
0C410:  CLRF   x57
0C412:  CLRF   x58
0C414:  CLRF   x59
0C416:  CLRF   x5A
0C418:  CLRF   x5B
0C41A:  CLRF   x5C
0C41C:  CLRF   x5D
0C41E:  CLRF   x5E
0C420:  CLRF   x5F
0C422:  CLRF   x60
0C424:  CLRF   x61
0C426:  CLRF   x62
0C428:  CLRF   x63
0C42A:  CLRF   x64
0C42C:  CLRF   x65
0C42E:  CLRF   x66
0C430:  CLRF   x67
0C432:  CLRF   x68
0C434:  CLRF   x69
0C436:  CLRF   x6A
0C438:  CLRF   x6B
0C43A:  CLRF   x6C
0C43C:  CLRF   x6D
0C43E:  CLRF   x6E
0C440:  CLRF   x6F
0C442:  CLRF   x70
0C444:  CLRF   x71
0C446:  CLRF   x72
0C448:  CLRF   x73
0C44A:  CLRF   x74
0C44C:  CLRF   x75
0C44E:  CLRF   x76
0C450:  CLRF   x77
0C452:  CLRF   x78
0C454:  CLRF   x79
0C456:  CLRF   x7A
0C458:  CLRF   x7B
0C45A:  CLRF   x7C
0C45C:  CLRF   x7D
0C45E:  CLRF   x7E
0C460:  CLRF   x7F
0C462:  CLRF   x80
0C464:  CLRF   x81
0C466:  CLRF   x82
0C468:  CLRF   x83
0C46A:  CLRF   x84
0C46C:  CLRF   x85
0C46E:  CLRF   x86
0C470:  CLRF   x87
0C472:  CLRF   x88
0C474:  CLRF   x89
0C476:  CLRF   x8A
0C478:  CLRF   x8B
0C47A:  CLRF   x8C
0C47C:  CLRF   x8D
0C47E:  CLRF   x8E
0C480:  CLRF   x8F
0C482:  CLRF   x90
0C484:  CLRF   x91
0C486:  CLRF   x92
0C488:  CLRF   x93
0C48A:  CLRF   x94
0C48C:  CLRF   x95
0C48E:  CLRF   x96
0C490:  CLRF   x97
0C492:  CLRF   x98
0C494:  CLRF   x99
0C496:  CLRF   x9A
0C498:  CLRF   x9B
0C49A:  CLRF   x9C
0C49C:  CLRF   x9D
0C49E:  CLRF   x9E
0C4A0:  CLRF   x9F
0C4A2:  CLRF   xA0
0C4A4:  CLRF   xA1
0C4A6:  CLRF   xA2
0C4A8:  CLRF   xA3
0C4AA:  CLRF   xA4
0C4AC:  CLRF   xA5
0C4AE:  CLRF   xA6
0C4B0:  CLRF   xA7
0C4B2:  CLRF   xA8
0C4B4:  CLRF   xA9
0C4B6:  CLRF   xAA
0C4B8:  CLRF   xAB
0C4BA:  CLRF   xAC
0C4BC:  CLRF   xAD
0C4BE:  CLRF   xAE
0C4C0:  CLRF   xAF
0C4C2:  CLRF   xB0
0C4C4:  CLRF   xB1
0C4C6:  CLRF   xB2
0C4C8:  CLRF   xB3
0C4CA:  CLRF   xB4
0C4CC:  CLRF   xB5
0C4CE:  CLRF   xB6
0C4D0:  CLRF   xB7
0C4D2:  CLRF   xB8
0C4D4:  CLRF   xB9
0C4D6:  CLRF   xBA
0C4D8:  CLRF   xBB
0C4DA:  CLRF   xBC
0C4DC:  CLRF   xBD
0C4DE:  CLRF   xBE
0C4E0:  CLRF   xBF
0C4E2:  CLRF   xC0
0C4E4:  CLRF   xC1
0C4E6:  CLRF   xC2
0C4E8:  CLRF   xC3
0C4EA:  CLRF   xC4
0C4EC:  CLRF   xC5
0C4EE:  CLRF   xC6
0C4F0:  CLRF   xC7
0C4F2:  CLRF   xC8
0C4F4:  CLRF   xC9
0C4F6:  CLRF   xCA
0C4F8:  CLRF   xCB
0C4FA:  CLRF   xCC
0C4FC:  CLRF   xCD
0C4FE:  CLRF   xCE
0C500:  CLRF   xCF
0C502:  CLRF   xD0
0C504:  CLRF   xD1
0C506:  CLRF   xD2
0C508:  CLRF   xD3
0C50A:  CLRF   xD4
0C50C:  CLRF   xD5
0C50E:  CLRF   xD6
0C510:  CLRF   xD7
0C512:  CLRF   xD8
0C514:  CLRF   xD9
0C516:  CLRF   xDA
0C518:  CLRF   xDB
0C51A:  CLRF   xDC
0C51C:  CLRF   xDD
0C51E:  CLRF   xDE
0C520:  CLRF   xDF
0C522:  CLRF   xE0
0C524:  CLRF   xE1
0C526:  CLRF   xE2
0C528:  CLRF   xE3
0C52A:  CLRF   xE4
0C52C:  CLRF   xE5
0C52E:  CLRF   xE6
0C530:  CLRF   xE7
0C532:  CLRF   xE8
0C534:  CLRF   xE9
0C536:  CLRF   xEA
0C538:  CLRF   xEB
0C53A:  CLRF   xEC
0C53C:  CLRF   xED
0C53E:  CLRF   xEE
0C540:  CLRF   xEF
0C542:  CLRF   xF0
0C544:  CLRF   xF1
0C546:  CLRF   xF2
0C548:  CLRF   xF3
0C54A:  CLRF   xF4
0C54C:  CLRF   xF5
0C54E:  CLRF   xF6
0C550:  CLRF   xF7
0C552:  CLRF   xF8
0C554:  CLRF   xF9
0C556:  CLRF   xFA
0C558:  CLRF   xFB
0C55A:  CLRF   xFC
0C55C:  CLRF   xFD
0C55E:  CLRF   xFE
0C560:  CLRF   xFF
0C562:  MOVLB  8
0C564:  CLRF   x00
0C566:  CLRF   x01
0C568:  CLRF   x02
0C56A:  CLRF   x03
0C56C:  CLRF   x04
0C56E:  CLRF   x05
0C570:  CLRF   x06
0C572:  CLRF   x07
0C574:  CLRF   x08
0C576:  CLRF   x09
0C578:  CLRF   x0A
0C57A:  CLRF   x0B
0C57C:  CLRF   x0C
0C57E:  CLRF   x0D
0C580:  CLRF   x0E
0C582:  CLRF   x0F
0C584:  CLRF   x10
0C586:  CLRF   x11
0C588:  CLRF   x12
0C58A:  CLRF   x13
0C58C:  CLRF   x14
0C58E:  CLRF   x15
0C590:  CLRF   x16
0C592:  CLRF   x17
0C594:  CLRF   x18
0C596:  CLRF   x19
0C598:  CLRF   x1A
0C59A:  CLRF   x1B
0C59C:  CLRF   x1C
0C59E:  CLRF   x1D
0C5A0:  CLRF   x1E
0C5A2:  CLRF   x1F
0C5A4:  CLRF   x20
0C5A6:  CLRF   x21
0C5A8:  CLRF   x22
0C5AA:  CLRF   x23
0C5AC:  CLRF   x24
0C5AE:  CLRF   x25
0C5B0:  CLRF   x26
0C5B2:  CLRF   x27
0C5B4:  CLRF   x28
0C5B6:  CLRF   x29
0C5B8:  CLRF   x2A
0C5BA:  CLRF   x2B
0C5BC:  CLRF   x2C
0C5BE:  CLRF   x2D
0C5C0:  CLRF   x2E
0C5C2:  CLRF   x2F
0C5C4:  CLRF   x30
0C5C6:  CLRF   x31
0C5C8:  CLRF   x32
0C5CA:  CLRF   x33
0C5CC:  CLRF   x34
0C5CE:  CLRF   x35
0C5D0:  CLRF   x36
0C5D2:  CLRF   x37
0C5D4:  CLRF   x38
0C5D6:  CLRF   x39
0C5D8:  CLRF   x3A
0C5DA:  CLRF   x3B
0C5DC:  CLRF   x3C
0C5DE:  CLRF   x3D
0C5E0:  CLRF   x3E
0C5E2:  CLRF   x3F
0C5E4:  CLRF   x40
0C5E6:  CLRF   x41
0C5E8:  CLRF   x42
0C5EA:  CLRF   x43
0C5EC:  CLRF   x44
0C5EE:  CLRF   x45
0C5F0:  CLRF   x46
0C5F2:  CLRF   x47
0C5F4:  CLRF   x48
0C5F6:  CLRF   x49
0C5F8:  CLRF   x4A
0C5FA:  CLRF   x4B
0C5FC:  CLRF   x4C
0C5FE:  CLRF   x4D
0C600:  CLRF   x4E
0C602:  CLRF   x4F
0C604:  CLRF   x50
0C606:  CLRF   x51
0C608:  CLRF   x52
0C60A:  CLRF   x53
0C60C:  CLRF   x54
0C60E:  CLRF   x55
0C610:  CLRF   x56
0C612:  CLRF   x57
0C614:  CLRF   x58
0C616:  CLRF   x59
0C618:  CLRF   x5A
0C61A:  CLRF   x5B
0C61C:  CLRF   x5C
0C61E:  CLRF   x5D
0C620:  CLRF   x5E
0C622:  CLRF   x5F
0C624:  CLRF   x60
0C626:  CLRF   x61
0C628:  CLRF   x62
0C62A:  CLRF   x63
0C62C:  CLRF   x64
0C62E:  CLRF   x65
0C630:  CLRF   x66
0C632:  CLRF   x67
0C634:  CLRF   x68
0C636:  CLRF   x69
0C638:  CLRF   x6A
0C63A:  CLRF   x6B
0C63C:  CLRF   x6C
0C63E:  CLRF   x6D
0C640:  CLRF   x6E
0C642:  CLRF   x6F
0C644:  CLRF   x70
0C646:  CLRF   x71
0C648:  CLRF   x72
0C64A:  CLRF   x73
0C64C:  CLRF   x74
0C64E:  CLRF   x75
0C650:  CLRF   x76
0C652:  CLRF   x77
0C654:  CLRF   x78
0C656:  CLRF   x79
0C658:  CLRF   x7A
0C65A:  CLRF   x7B
0C65C:  CLRF   x7C
0C65E:  CLRF   x7D
0C660:  CLRF   x7E
0C662:  CLRF   x7F
0C664:  CLRF   x80
0C666:  CLRF   x81
0C668:  CLRF   x82
0C66A:  CLRF   x83
0C66C:  CLRF   x84
0C66E:  CLRF   x85
0C670:  CLRF   x86
0C672:  CLRF   x87
0C674:  CLRF   x88
0C676:  CLRF   x89
0C678:  CLRF   x8A
0C67A:  CLRF   x8B
0C67C:  CLRF   x8C
0C67E:  CLRF   x8D
0C680:  CLRF   x8E
0C682:  CLRF   x8F
0C684:  CLRF   x90
0C686:  CLRF   x91
0C688:  CLRF   x92
0C68A:  CLRF   x93
0C68C:  CLRF   x94
0C68E:  CLRF   x95
0C690:  CLRF   x96
0C692:  CLRF   x97
0C694:  CLRF   x98
0C696:  CLRF   x99
0C698:  CLRF   x9A
0C69A:  CLRF   x9B
0C69C:  CLRF   x9C
0C69E:  CLRF   x9D
0C6A0:  CLRF   x9E
0C6A2:  CLRF   x9F
0C6A4:  CLRF   xA0
0C6A6:  CLRF   xA1
0C6A8:  CLRF   xA2
0C6AA:  CLRF   xA3
0C6AC:  CLRF   xA4
0C6AE:  CLRF   xA5
0C6B0:  CLRF   xA6
0C6B2:  CLRF   xA7
0C6B4:  CLRF   xA8
0C6B6:  CLRF   xA9
0C6B8:  CLRF   xAA
0C6BA:  CLRF   xAB
0C6BC:  CLRF   xAC
0C6BE:  CLRF   xAD
0C6C0:  CLRF   xAE
0C6C2:  CLRF   xAF
0C6C4:  CLRF   xB0
0C6C6:  CLRF   xB1
0C6C8:  CLRF   xB2
0C6CA:  CLRF   xB3
0C6CC:  CLRF   xB4
0C6CE:  CLRF   xB5
0C6D0:  CLRF   xB6
0C6D2:  CLRF   xB7
0C6D4:  CLRF   xB8
0C6D6:  CLRF   xB9
0C6D8:  CLRF   xBA
0C6DA:  CLRF   xBB
0C6DC:  CLRF   xBC
0C6DE:  CLRF   xBD
0C6E0:  CLRF   xBE
0C6E2:  CLRF   xBF
0C6E4:  CLRF   xC0
0C6E6:  CLRF   xC1
0C6E8:  CLRF   xC2
0C6EA:  CLRF   xC3
0C6EC:  CLRF   xC4
0C6EE:  CLRF   xC5
0C6F0:  CLRF   xC6
0C6F2:  CLRF   xC7
0C6F4:  CLRF   xC8
0C6F6:  CLRF   xC9
0C6F8:  CLRF   xCA
0C6FA:  CLRF   xCB
0C6FC:  CLRF   xCC
0C6FE:  CLRF   xCD
0C700:  CLRF   xCE
0C702:  CLRF   xCF
0C704:  CLRF   xD0
0C706:  CLRF   xD1
0C708:  CLRF   xD2
0C70A:  CLRF   xD3
0C70C:  CLRF   xD4
0C70E:  CLRF   xD5
0C710:  CLRF   xD6
0C712:  CLRF   xD7
0C714:  CLRF   xD8
0C716:  CLRF   xD9
0C718:  CLRF   xDA
0C71A:  CLRF   xDB
0C71C:  CLRF   xDC
0C71E:  CLRF   xDD
0C720:  CLRF   xDE
0C722:  CLRF   xDF
0C724:  CLRF   xE0
0C726:  CLRF   xE1
0C728:  CLRF   xE2
0C72A:  CLRF   xE3
0C72C:  CLRF   xE4
0C72E:  CLRF   xE5
0C730:  CLRF   xE6
0C732:  CLRF   xE7
0C734:  CLRF   xE8
0C736:  CLRF   xE9
0C738:  CLRF   xEA
0C73A:  CLRF   xEB
0C73C:  CLRF   xEC
0C73E:  CLRF   xED
0C740:  CLRF   xEE
0C742:  CLRF   xEF
0C744:  CLRF   xF0
0C746:  CLRF   xF1
0C748:  CLRF   xF2
0C74A:  CLRF   xF3
0C74C:  CLRF   xF4
0C74E:  CLRF   xF5
0C750:  CLRF   xF6
0C752:  CLRF   xF7
0C754:  CLRF   xF8
0C756:  CLRF   xF9
0C758:  CLRF   xFA
0C75A:  CLRF   xFB
0C75C:  CLRF   xFC
0C75E:  CLRF   xFD
0C760:  CLRF   xFE
0C762:  CLRF   xFF
0C764:  MOVLB  9
0C766:  CLRF   x00
0C768:  CLRF   x01
0C76A:  CLRF   x02
0C76C:  CLRF   x03
0C76E:  CLRF   x04
0C770:  CLRF   x05
0C772:  CLRF   x06
0C774:  CLRF   x07
0C776:  CLRF   x08
0C778:  CLRF   x09
0C77A:  CLRF   x0A
0C77C:  CLRF   x0B
0C77E:  CLRF   x0C
0C780:  CLRF   x0D
0C782:  CLRF   x0E
0C784:  CLRF   x0F
0C786:  CLRF   x10
0C788:  CLRF   x11
0C78A:  CLRF   x12
0C78C:  CLRF   x13
0C78E:  CLRF   x14
0C790:  CLRF   x15
0C792:  CLRF   x16
0C794:  CLRF   x17
0C796:  CLRF   x18
0C798:  CLRF   x19
0C79A:  CLRF   x1A
0C79C:  CLRF   x1B
0C79E:  CLRF   x1C
0C7A0:  CLRF   x1D
0C7A2:  CLRF   x1E
0C7A4:  CLRF   x1F
0C7A6:  CLRF   x20
0C7A8:  CLRF   x21
0C7AA:  CLRF   x22
0C7AC:  CLRF   x23
0C7AE:  CLRF   x24
0C7B0:  CLRF   x25
0C7B2:  CLRF   x26
0C7B4:  CLRF   x27
0C7B6:  CLRF   x28
0C7B8:  CLRF   x29
0C7BA:  CLRF   x2A
0C7BC:  CLRF   x2B
0C7BE:  CLRF   x2C
0C7C0:  CLRF   x2D
0C7C2:  CLRF   x2E
0C7C4:  CLRF   x2F
0C7C6:  CLRF   x30
0C7C8:  CLRF   x31
0C7CA:  CLRF   x32
0C7CC:  CLRF   x33
0C7CE:  CLRF   x34
0C7D0:  CLRF   x35
0C7D2:  CLRF   x36
0C7D4:  CLRF   x37
0C7D6:  CLRF   x38
0C7D8:  CLRF   x39
0C7DA:  CLRF   x3A
0C7DC:  CLRF   x3B
0C7DE:  CLRF   x3C
0C7E0:  CLRF   x3D
0C7E2:  CLRF   x3E
0C7E4:  CLRF   x3F
0C7E6:  CLRF   x40
0C7E8:  CLRF   x41
0C7EA:  CLRF   x42
0C7EC:  CLRF   x43
0C7EE:  CLRF   x44
0C7F0:  CLRF   x45
0C7F2:  CLRF   x46
0C7F4:  CLRF   x47
0C7F6:  CLRF   x48
0C7F8:  CLRF   x49
0C7FA:  CLRF   x4A
0C7FC:  CLRF   x4B
0C7FE:  CLRF   x4C
0C800:  CLRF   x4D
0C802:  CLRF   x4E
0C804:  CLRF   x4F
0C806:  CLRF   x50
0C808:  CLRF   x51
0C80A:  CLRF   x52
0C80C:  CLRF   x53
0C80E:  CLRF   x54
0C810:  CLRF   x55
0C812:  CLRF   x56
0C814:  CLRF   x57
0C816:  CLRF   x58
0C818:  CLRF   x59
0C81A:  CLRF   x5A
0C81C:  CLRF   x5B
0C81E:  CLRF   x5C
0C820:  CLRF   x5D
0C822:  CLRF   x5E
0C824:  CLRF   x5F
0C826:  CLRF   x60
0C828:  CLRF   x61
0C82A:  CLRF   x62
0C82C:  CLRF   x63
0C82E:  CLRF   x64
0C830:  CLRF   x65
0C832:  CLRF   x66
0C834:  CLRF   x67
0C836:  CLRF   x68
0C838:  CLRF   x69
0C83A:  CLRF   x6A
0C83C:  CLRF   x6B
0C83E:  CLRF   x6C
0C840:  CLRF   x6D
0C842:  CLRF   x6E
0C844:  CLRF   x6F
0C846:  CLRF   x70
0C848:  CLRF   x71
0C84A:  CLRF   x72
0C84C:  CLRF   x73
0C84E:  CLRF   x74
0C850:  CLRF   x75
0C852:  CLRF   x76
0C854:  CLRF   x77
0C856:  CLRF   x78
0C858:  CLRF   x79
0C85A:  CLRF   x7A
0C85C:  CLRF   x7B
0C85E:  CLRF   x7C
0C860:  CLRF   x7D
0C862:  CLRF   x7E
0C864:  CLRF   x7F
0C866:  CLRF   x80
0C868:  CLRF   x81
0C86A:  CLRF   x82
0C86C:  CLRF   x83
0C86E:  CLRF   x84
0C870:  CLRF   x85
0C872:  CLRF   x86
0C874:  CLRF   x87
0C876:  CLRF   x88
0C878:  CLRF   x89
0C87A:  CLRF   x8A
0C87C:  CLRF   x8B
0C87E:  CLRF   x8C
0C880:  CLRF   x8D
0C882:  CLRF   x8E
0C884:  CLRF   x8F
0C886:  CLRF   x90
0C888:  CLRF   x91
0C88A:  CLRF   x92
0C88C:  CLRF   x93
0C88E:  CLRF   x94
0C890:  CLRF   x95
0C892:  CLRF   x96
0C894:  CLRF   x97
0C896:  CLRF   x98
0C898:  CLRF   x99
0C89A:  CLRF   x9A
0C89C:  CLRF   x9B
0C89E:  CLRF   x9C
0C8A0:  CLRF   x9D
0C8A2:  CLRF   x9E
0C8A4:  CLRF   x9F
0C8A6:  CLRF   xA0
0C8A8:  CLRF   xA1
0C8AA:  CLRF   xA2
0C8AC:  CLRF   xA3
0C8AE:  CLRF   xA4
0C8B0:  CLRF   xA5
0C8B2:  CLRF   xA6
0C8B4:  CLRF   xA7
0C8B6:  CLRF   xA8
0C8B8:  CLRF   xA9
0C8BA:  CLRF   xAA
0C8BC:  CLRF   xAB
0C8BE:  CLRF   xAC
0C8C0:  CLRF   xAD
0C8C2:  CLRF   xAE
0C8C4:  CLRF   xAF
0C8C6:  CLRF   xB0
0C8C8:  CLRF   xB1
0C8CA:  CLRF   xB2
0C8CC:  CLRF   xB3
0C8CE:  CLRF   xB4
0C8D0:  CLRF   xB5
0C8D2:  CLRF   xB6
0C8D4:  CLRF   xB7
0C8D6:  CLRF   xB8
0C8D8:  CLRF   xB9
0C8DA:  CLRF   xBA
0C8DC:  CLRF   xBB
0C8DE:  CLRF   xBC
0C8E0:  CLRF   xBD
0C8E2:  CLRF   xBE
0C8E4:  CLRF   xBF
0C8E6:  CLRF   xC0
0C8E8:  CLRF   xC1
0C8EA:  CLRF   xC2
0C8EC:  CLRF   xC3
0C8EE:  CLRF   xC4
0C8F0:  CLRF   xC5
0C8F2:  CLRF   xC6
0C8F4:  CLRF   xC7
0C8F6:  CLRF   xC8
....................     port2.port_num = 2; 
0C8F8:  MOVLW  02
0C8FA:  MOVLB  5
0C8FC:  MOVWF  xC9
....................     port2.sweep_step = 0;
0C8FE:  CLRF   xCB
0C900:  CLRF   xCA
....................     port2.active = 1;
0C902:  MOVLB  9
0C904:  BSF    xC8.0
.................... 
....................     int16 count = 1;
....................     iv_env_t measured_data = create_meas_data();
0C906:  CLRF   xCA
0C908:  MOVLW  01
0C90A:  MOVWF  xC9
0C90C:  MOVLB  0
0C90E:  CALL   930E
0C912:  MOVFF  02,03
0C916:  MOVF   01,W
0C918:  MOVWF  FE1
0C91A:  MOVFF  03,FE2
0C91E:  MOVLW  09
0C920:  MOVWF  FEA
0C922:  MOVLW  CB
0C924:  MOVWF  FE9
0C926:  MOVLW  0C
0C928:  MOVWF  01
0C92A:  MOVFF  FE6,FEE
0C92E:  DECFSZ 01,F
0C930:  GOTO   C92A
....................     while (port1.active || port2.active)
0C934:  MOVLB  5
0C936:  BTFSS  xC8.0
0C938:  BRA    C940
0C93A:  MOVLB  0
0C93C:  GOTO   C950
0C940:  MOVLB  0
0C942:  MOVLB  9
0C944:  BTFSC  xC8.0
0C946:  BRA    C94E
0C948:  MOVLB  0
0C94A:  GOTO   CC2C
0C94E:  MOVLB  0
....................     {
....................         mcp4901_1_write(count);
0C950:  MOVFF  9CA,9DD
0C954:  MOVFF  9C9,9DC
0C958:  CALL   2894
....................         mcp4901_2_write(count);
0C95C:  MOVFF  9CA,9DD
0C960:  MOVFF  9C9,9DC
0C964:  CALL   28D2
....................         delay_us(10); 
0C968:  MOVLW  0D
0C96A:  MOVWF  00
0C96C:  DECFSZ 00,F
0C96E:  BRA    C96C
....................         if (port1.active) {
0C970:  MOVLB  5
0C972:  BTFSC  xC8.0
0C974:  BRA    C97C
0C976:  MOVLB  0
0C978:  GOTO   CACC
0C97C:  MOVLB  0
....................             unsigned int32 ans = ad7490_read(ADC_CIGS1_CURR);
0C97E:  MOVLW  01
0C980:  MOVLB  9
0C982:  MOVWF  xEE
0C984:  MOVLB  0
0C986:  CALL   24E4
0C98A:  MOVLB  9
0C98C:  CLRF   xDA
0C98E:  CLRF   xD9
0C990:  MOVFF  02,9D8
0C994:  MOVFF  01,9D7
0C998:  MOVLB  0
....................             ans += ad7490_read(ADC_CIGS1_CURR);
0C99A:  MOVLW  01
0C99C:  MOVLB  9
0C99E:  MOVWF  xEE
0C9A0:  MOVLB  0
0C9A2:  CALL   24E4
0C9A6:  MOVFF  02,03
0C9AA:  MOVF   01,W
0C9AC:  MOVLB  9
0C9AE:  ADDWF  xD7,F
0C9B0:  MOVF   03,W
0C9B2:  ADDWFC xD8,F
0C9B4:  MOVLW  00
0C9B6:  ADDWFC xD9,F
0C9B8:  MOVLW  00
0C9BA:  ADDWFC xDA,F
....................             ans = ans/2;
0C9BC:  BCF    FD8.0
0C9BE:  RRCF   xDA,F
0C9C0:  RRCF   xD9,F
0C9C2:  RRCF   xD8,F
0C9C4:  RRCF   xD7,F
....................             port1.data_buffer[count].voltage = ad7490_read(ADC_CIGS1_AMP);
0C9C6:  RLCF   xC9,W
0C9C8:  MOVWF  02
0C9CA:  RLCF   xCA,W
0C9CC:  MOVWF  03
0C9CE:  RLCF   02,F
0C9D0:  RLCF   03,F
0C9D2:  MOVLW  FC
0C9D4:  ANDWF  02,F
0C9D6:  MOVF   02,W
0C9D8:  ADDLW  CC
0C9DA:  MOVWF  01
0C9DC:  MOVLW  01
0C9DE:  ADDWFC 03,F
0C9E0:  MOVF   01,W
0C9E2:  MOVWF  xDE
0C9E4:  MOVFF  03,9DF
0C9E8:  MOVLW  02
0C9EA:  MOVWF  xEE
0C9EC:  MOVLB  0
0C9EE:  CALL   24E4
0C9F2:  MOVFF  9DF,FEA
0C9F6:  MOVFF  9DE,FE9
0C9FA:  MOVFF  02,FEC
0C9FE:  MOVF   FED,F
0CA00:  MOVFF  01,FEF
....................             port1.data_buffer[count].current = ans;
0CA04:  MOVLB  9
0CA06:  RLCF   xC9,W
0CA08:  MOVWF  02
0CA0A:  RLCF   xCA,W
0CA0C:  MOVWF  03
0CA0E:  RLCF   02,F
0CA10:  RLCF   03,F
0CA12:  MOVLW  FC
0CA14:  ANDWF  02,F
0CA16:  MOVF   02,W
0CA18:  ADDLW  03
0CA1A:  MOVWF  xDC
0CA1C:  MOVLW  00
0CA1E:  ADDWFC 03,W
0CA20:  MOVWF  xDD
0CA22:  MOVLW  02
0CA24:  ADDWF  xDC,W
0CA26:  MOVWF  01
0CA28:  MOVLW  00
0CA2A:  ADDWFC xDD,W
0CA2C:  MOVWF  03
0CA2E:  MOVF   01,W
0CA30:  ADDLW  C9
0CA32:  MOVWF  FE9
0CA34:  MOVLW  01
0CA36:  ADDWFC 03,W
0CA38:  MOVWF  FEA
0CA3A:  MOVFF  9D7,FEF
0CA3E:  MOVFF  9D8,FEC
0CA42:  MOVF   FED,F
....................             port1.sweep_step = count + 1; 
0CA44:  MOVLW  01
0CA46:  ADDWF  xC9,W
0CA48:  MOVLB  1
0CA4A:  MOVWF  xCA
0CA4C:  MOVLW  00
0CA4E:  MOVLB  9
0CA50:  ADDWFC xCA,W
0CA52:  MOVLB  1
0CA54:  MOVWF  xCB
....................             if (port1.data_buffer[count].current < curr_limit) {
0CA56:  MOVLB  9
0CA58:  RLCF   xC9,W
0CA5A:  MOVWF  02
0CA5C:  RLCF   xCA,W
0CA5E:  MOVWF  03
0CA60:  RLCF   02,F
0CA62:  RLCF   03,F
0CA64:  MOVLW  FC
0CA66:  ANDWF  02,F
0CA68:  MOVF   02,W
0CA6A:  ADDLW  03
0CA6C:  MOVWF  xDC
0CA6E:  MOVLW  00
0CA70:  ADDWFC 03,W
0CA72:  MOVWF  xDD
0CA74:  MOVLW  02
0CA76:  ADDWF  xDC,W
0CA78:  MOVWF  01
0CA7A:  MOVLW  00
0CA7C:  ADDWFC xDD,W
0CA7E:  MOVWF  03
0CA80:  MOVF   01,W
0CA82:  ADDLW  C9
0CA84:  MOVWF  FE9
0CA86:  MOVLW  01
0CA88:  ADDWFC 03,W
0CA8A:  MOVWF  FEA
0CA8C:  MOVFF  FEC,9DD
0CA90:  MOVF   FED,F
0CA92:  MOVFF  FEF,9DC
0CA96:  MOVF   xDD,W
0CA98:  MOVLB  1
0CA9A:  SUBWF  xC8,W
0CA9C:  BTFSC  FD8.0
0CA9E:  BRA    CAA6
0CAA0:  MOVLB  0
0CAA2:  GOTO   CACC
0CAA6:  MOVLB  0
0CAA8:  BTFSS  FD8.2
0CAAA:  GOTO   CAC2
0CAAE:  MOVLB  1
0CAB0:  MOVF   xC7,W
0CAB2:  MOVLB  9
0CAB4:  SUBWF  xDC,W
0CAB6:  BTFSS  FD8.0
0CAB8:  BRA    CAC0
0CABA:  MOVLB  0
0CABC:  GOTO   CACC
0CAC0:  MOVLB  0
....................                 port1.active = 0;
0CAC2:  MOVLB  5
0CAC4:  BCF    xC8.0
....................                 disconnect_port1();
0CAC6:  MOVLB  0
0CAC8:  CALL   9390
....................             }
....................         }
....................         if (port2.active) {
0CACC:  MOVLB  9
0CACE:  BTFSC  xC8.0
0CAD0:  BRA    CAD8
0CAD2:  MOVLB  0
0CAD4:  GOTO   CBFC
0CAD8:  MOVLB  0
....................             port2.data_buffer[count].voltage = ad7490_read(ADC_CIGS2_AMP);
0CADA:  MOVLB  9
0CADC:  RLCF   xC9,W
0CADE:  MOVWF  02
0CAE0:  RLCF   xCA,W
0CAE2:  MOVWF  03
0CAE4:  RLCF   02,F
0CAE6:  RLCF   03,F
0CAE8:  MOVLW  FC
0CAEA:  ANDWF  02,F
0CAEC:  MOVF   02,W
0CAEE:  ADDLW  CC
0CAF0:  MOVWF  01
0CAF2:  MOVLW  05
0CAF4:  ADDWFC 03,F
0CAF6:  MOVF   01,W
0CAF8:  MOVWF  xDE
0CAFA:  MOVFF  03,9DF
0CAFE:  MOVLW  06
0CB00:  MOVWF  xEE
0CB02:  MOVLB  0
0CB04:  CALL   24E4
0CB08:  MOVFF  9DF,FEA
0CB0C:  MOVFF  9DE,FE9
0CB10:  MOVFF  02,FEC
0CB14:  MOVF   FED,F
0CB16:  MOVFF  01,FEF
....................             port2.data_buffer[count].current = ad7490_read(ADC_CIGS2_CURR);
0CB1A:  MOVLB  9
0CB1C:  RLCF   xC9,W
0CB1E:  MOVWF  02
0CB20:  RLCF   xCA,W
0CB22:  MOVWF  03
0CB24:  RLCF   02,F
0CB26:  RLCF   03,F
0CB28:  MOVLW  FC
0CB2A:  ANDWF  02,F
0CB2C:  MOVF   02,W
0CB2E:  ADDLW  03
0CB30:  MOVWF  xDC
0CB32:  MOVLW  00
0CB34:  ADDWFC 03,W
0CB36:  MOVWF  xDD
0CB38:  MOVLW  02
0CB3A:  ADDWF  xDC,W
0CB3C:  MOVWF  01
0CB3E:  MOVLW  00
0CB40:  ADDWFC xDD,W
0CB42:  MOVWF  03
0CB44:  MOVF   01,W
0CB46:  ADDLW  C9
0CB48:  MOVWF  01
0CB4A:  MOVLW  05
0CB4C:  ADDWFC 03,F
0CB4E:  MOVF   01,W
0CB50:  MOVWF  xDC
0CB52:  MOVFF  03,9DD
0CB56:  MOVLW  05
0CB58:  MOVWF  xEE
0CB5A:  MOVLB  0
0CB5C:  CALL   24E4
0CB60:  MOVFF  9DD,FEA
0CB64:  MOVFF  9DC,FE9
0CB68:  MOVFF  02,FEC
0CB6C:  MOVF   FED,F
0CB6E:  MOVFF  01,FEF
....................             port2.sweep_step = count + 1;
0CB72:  MOVLW  01
0CB74:  MOVLB  9
0CB76:  ADDWF  xC9,W
0CB78:  MOVLB  5
0CB7A:  MOVWF  xCA
0CB7C:  MOVLW  00
0CB7E:  MOVLB  9
0CB80:  ADDWFC xCA,W
0CB82:  MOVLB  5
0CB84:  MOVWF  xCB
....................             if (port2.data_buffer[count].current < curr_limit) {
0CB86:  MOVLB  9
0CB88:  RLCF   xC9,W
0CB8A:  MOVWF  02
0CB8C:  RLCF   xCA,W
0CB8E:  MOVWF  03
0CB90:  RLCF   02,F
0CB92:  RLCF   03,F
0CB94:  MOVLW  FC
0CB96:  ANDWF  02,F
0CB98:  MOVF   02,W
0CB9A:  ADDLW  03
0CB9C:  MOVWF  xDC
0CB9E:  MOVLW  00
0CBA0:  ADDWFC 03,W
0CBA2:  MOVWF  xDD
0CBA4:  MOVLW  02
0CBA6:  ADDWF  xDC,W
0CBA8:  MOVWF  01
0CBAA:  MOVLW  00
0CBAC:  ADDWFC xDD,W
0CBAE:  MOVWF  03
0CBB0:  MOVF   01,W
0CBB2:  ADDLW  C9
0CBB4:  MOVWF  FE9
0CBB6:  MOVLW  05
0CBB8:  ADDWFC 03,W
0CBBA:  MOVWF  FEA
0CBBC:  MOVFF  FEC,9DD
0CBC0:  MOVF   FED,F
0CBC2:  MOVFF  FEF,9DC
0CBC6:  MOVF   xDD,W
0CBC8:  MOVLB  1
0CBCA:  SUBWF  xC8,W
0CBCC:  BTFSC  FD8.0
0CBCE:  BRA    CBD6
0CBD0:  MOVLB  0
0CBD2:  GOTO   CBFC
0CBD6:  MOVLB  0
0CBD8:  BTFSS  FD8.2
0CBDA:  GOTO   CBF2
0CBDE:  MOVLB  1
0CBE0:  MOVF   xC7,W
0CBE2:  MOVLB  9
0CBE4:  SUBWF  xDC,W
0CBE6:  BTFSS  FD8.0
0CBE8:  BRA    CBF0
0CBEA:  MOVLB  0
0CBEC:  GOTO   CBFC
0CBF0:  MOVLB  0
....................                 port2.active = 0;
0CBF2:  MOVLB  9
0CBF4:  BCF    xC8.0
....................                 disconnect_port2();
0CBF6:  MOVLB  0
0CBF8:  CALL   9398
....................             } 
....................         }
....................         count++;
0CBFC:  MOVLB  9
0CBFE:  INCF   xC9,F
0CC00:  BTFSC  FD8.2
0CC02:  INCF   xCA,F
....................         if (count >= 255) {
0CC04:  MOVF   xCA,F
0CC06:  BTFSC  FD8.2
0CC08:  BRA    CC10
0CC0A:  MOVLB  0
0CC0C:  GOTO   CC24
0CC10:  MOVLB  0
0CC12:  MOVLB  9
0CC14:  MOVF   xC9,W
0CC16:  SUBLW  FE
0CC18:  BTFSS  FD8.0
0CC1A:  BRA    CC22
0CC1C:  MOVLB  0
0CC1E:  GOTO   CC28
0CC22:  MOVLB  0
....................             // fprintf(PC, "Maximum step count reached: %ld\r\n", count);
....................             break;
0CC24:  GOTO   CC2C
....................         }
0CC28:  GOTO   C934
....................     }
.................... 
....................     for (int i = 0; i < count; i++) {
0CC2C:  MOVLB  9
0CC2E:  CLRF   xDB
0CC30:  MOVLB  0
0CC32:  MOVLB  9
0CC34:  MOVF   xCA,F
0CC36:  BTFSC  FD8.2
0CC38:  BRA    CC40
0CC3A:  MOVLB  0
0CC3C:  GOTO   CC54
0CC40:  MOVLB  0
0CC42:  MOVLB  9
0CC44:  MOVF   xC9,W
0CC46:  SUBWF  xDB,W
0CC48:  BTFSS  FD8.0
0CC4A:  BRA    CC52
0CC4C:  MOVLB  0
0CC4E:  GOTO   CE08
0CC52:  MOVLB  0
.................... 
....................         fprintf(PC, "%04LX,%04LX,%04LX,%04LX\r\n",
....................             port1.data_buffer[i].voltage, port1.data_buffer[i].current,
....................             port2.data_buffer[i].voltage, port2.data_buffer[i].current);
0CC54:  MOVLB  A
0CC56:  CLRF   x53
0CC58:  MOVFF  9DB,A52
0CC5C:  CLRF   x55
0CC5E:  MOVLW  04
0CC60:  MOVWF  x54
0CC62:  MOVLB  0
0CC64:  CALL   8260
0CC68:  MOVFF  02,03
0CC6C:  MOVF   01,W
0CC6E:  ADDLW  CC
0CC70:  MOVWF  FE9
0CC72:  MOVLW  01
0CC74:  ADDWFC 03,W
0CC76:  MOVWF  FEA
0CC78:  MOVFF  FEC,9DF
0CC7C:  MOVF   FED,F
0CC7E:  MOVFF  FEF,9DE
0CC82:  MOVLB  A
0CC84:  CLRF   x53
0CC86:  MOVFF  9DB,A52
0CC8A:  CLRF   x55
0CC8C:  MOVLW  04
0CC8E:  MOVWF  x54
0CC90:  MOVLB  0
0CC92:  CALL   8260
0CC96:  MOVFF  02,03
0CC9A:  MOVF   01,W
0CC9C:  ADDLW  03
0CC9E:  MOVLB  9
0CCA0:  MOVWF  xE0
0CCA2:  MOVLW  00
0CCA4:  ADDWFC 03,W
0CCA6:  MOVWF  xE1
0CCA8:  MOVLW  02
0CCAA:  ADDWF  xE0,W
0CCAC:  MOVWF  01
0CCAE:  MOVLW  00
0CCB0:  ADDWFC xE1,W
0CCB2:  MOVWF  03
0CCB4:  MOVF   01,W
0CCB6:  ADDLW  C9
0CCB8:  MOVWF  FE9
0CCBA:  MOVLW  01
0CCBC:  ADDWFC 03,W
0CCBE:  MOVWF  FEA
0CCC0:  MOVFF  FEC,9E1
0CCC4:  MOVF   FED,F
0CCC6:  MOVFF  FEF,9E0
0CCCA:  MOVLB  A
0CCCC:  CLRF   x53
0CCCE:  MOVFF  9DB,A52
0CCD2:  CLRF   x55
0CCD4:  MOVLW  04
0CCD6:  MOVWF  x54
0CCD8:  MOVLB  0
0CCDA:  CALL   8260
0CCDE:  MOVFF  02,03
0CCE2:  MOVF   01,W
0CCE4:  ADDLW  CC
0CCE6:  MOVWF  FE9
0CCE8:  MOVLW  05
0CCEA:  ADDWFC 03,W
0CCEC:  MOVWF  FEA
0CCEE:  MOVFF  FEC,9E5
0CCF2:  MOVF   FED,F
0CCF4:  MOVFF  FEF,9E4
0CCF8:  MOVLB  A
0CCFA:  CLRF   x53
0CCFC:  MOVFF  9DB,A52
0CD00:  CLRF   x55
0CD02:  MOVLW  04
0CD04:  MOVWF  x54
0CD06:  MOVLB  0
0CD08:  CALL   8260
0CD0C:  MOVFF  02,03
0CD10:  MOVF   01,W
0CD12:  ADDLW  03
0CD14:  MOVLB  9
0CD16:  MOVWF  xE6
0CD18:  MOVLW  00
0CD1A:  ADDWFC 03,W
0CD1C:  MOVWF  xE7
0CD1E:  MOVLW  02
0CD20:  ADDWF  xE6,W
0CD22:  MOVWF  01
0CD24:  MOVLW  00
0CD26:  ADDWFC xE7,W
0CD28:  MOVWF  03
0CD2A:  MOVF   01,W
0CD2C:  ADDLW  C9
0CD2E:  MOVWF  FE9
0CD30:  MOVLW  05
0CD32:  ADDWFC 03,W
0CD34:  MOVWF  FEA
0CD36:  MOVFF  FEC,9E7
0CD3A:  MOVF   FED,F
0CD3C:  MOVFF  FEF,9E6
0CD40:  MOVFF  9DF,9E8
0CD44:  MOVLW  37
0CD46:  MOVWF  xE9
0CD48:  MOVLB  0
0CD4A:  CALL   2564
0CD4E:  MOVFF  9DE,9E8
0CD52:  MOVLW  37
0CD54:  MOVLB  9
0CD56:  MOVWF  xE9
0CD58:  MOVLB  0
0CD5A:  CALL   2564
0CD5E:  MOVLW  2C
0CD60:  BTFSS  FA6.6
0CD62:  GOTO   CD60
0CD66:  MOVLB  E
0CD68:  MOVWF  xF9
0CD6A:  MOVFF  9E1,9E8
0CD6E:  MOVLW  37
0CD70:  MOVLB  9
0CD72:  MOVWF  xE9
0CD74:  MOVLB  0
0CD76:  CALL   2564
0CD7A:  MOVFF  9E0,9E8
0CD7E:  MOVLW  37
0CD80:  MOVLB  9
0CD82:  MOVWF  xE9
0CD84:  MOVLB  0
0CD86:  CALL   2564
0CD8A:  MOVLW  2C
0CD8C:  BTFSS  FA6.6
0CD8E:  GOTO   CD8C
0CD92:  MOVLB  E
0CD94:  MOVWF  xF9
0CD96:  MOVFF  9E5,9E8
0CD9A:  MOVLW  37
0CD9C:  MOVLB  9
0CD9E:  MOVWF  xE9
0CDA0:  MOVLB  0
0CDA2:  CALL   2564
0CDA6:  MOVFF  9E4,9E8
0CDAA:  MOVLW  37
0CDAC:  MOVLB  9
0CDAE:  MOVWF  xE9
0CDB0:  MOVLB  0
0CDB2:  CALL   2564
0CDB6:  MOVLW  2C
0CDB8:  BTFSS  FA6.6
0CDBA:  GOTO   CDB8
0CDBE:  MOVLB  E
0CDC0:  MOVWF  xF9
0CDC2:  MOVFF  9E7,9E8
0CDC6:  MOVLW  37
0CDC8:  MOVLB  9
0CDCA:  MOVWF  xE9
0CDCC:  MOVLB  0
0CDCE:  CALL   2564
0CDD2:  MOVFF  9E6,9E8
0CDD6:  MOVLW  37
0CDD8:  MOVLB  9
0CDDA:  MOVWF  xE9
0CDDC:  MOVLB  0
0CDDE:  CALL   2564
0CDE2:  MOVLW  0D
0CDE4:  BTFSS  FA6.6
0CDE6:  GOTO   CDE4
0CDEA:  MOVLB  E
0CDEC:  MOVWF  xF9
0CDEE:  MOVLW  0A
0CDF0:  MOVLB  0
0CDF2:  BTFSS  FA6.6
0CDF4:  GOTO   CDF2
0CDF8:  MOVLB  E
0CDFA:  MOVWF  xF9
0CDFC:  MOVLB  0
0CDFE:  MOVLB  9
0CE00:  INCF   xDB,F
0CE02:  MOVLB  0
0CE04:  GOTO   CC32
....................     }
0CE08:  GOTO   D0CC (RETURN)
.................... 
.................... }
.................... 
.................... void log_meas_data(iv_env_t *measured_data_ptr, sweep_config_t *port_data_ptr)
*
093A0:  MOVLB  9
093A2:  MOVF   xC4,W
093A4:  MOVWF  FE9
093A6:  MOVF   xC5,W
093A8:  MOVWF  FEA
093AA:  MOVFF  FEF,9C6
.................... {
....................     unsigned int8 port = port_data_ptr->port_num;
....................     fprintf(PC,"PORT%u\r\n", port);
093AE:  MOVLW  7E
093B0:  MOVWF  FF6
093B2:  MOVLW  06
093B4:  MOVWF  FF7
093B6:  MOVLW  00
093B8:  MOVWF  FF8
093BA:  MOVLW  04
093BC:  MOVLB  A
093BE:  MOVWF  x4E
093C0:  MOVLB  0
093C2:  CALL   2334
093C6:  MOVFF  9C6,A4E
093CA:  MOVLW  1B
093CC:  MOVLB  A
093CE:  MOVWF  x4F
093D0:  MOVLB  0
093D2:  CALL   9252
093D6:  MOVLW  0D
093D8:  BTFSS  FA6.6
093DA:  GOTO   93D8
093DE:  MOVLB  E
093E0:  MOVWF  xF9
093E2:  MOVLW  0A
093E4:  MOVLB  0
093E6:  BTFSS  FA6.6
093E8:  GOTO   93E6
093EC:  MOVLB  E
093EE:  MOVWF  xF9
....................     iv_data_packet_t data_packet = {0};
093F0:  MOVLB  9
093F2:  CLRF   xC7
093F4:  CLRF   xC8
093F6:  CLRF   xC9
093F8:  CLRF   xCA
093FA:  CLRF   xCB
093FC:  CLRF   xCC
093FE:  CLRF   xCD
09400:  CLRF   xCE
09402:  CLRF   xCF
09404:  CLRF   xD0
09406:  CLRF   xD1
09408:  CLRF   xD2
0940A:  CLRF   xD3
0940C:  CLRF   xD4
0940E:  CLRF   xD5
09410:  CLRF   xD6
09412:  CLRF   xD7
09414:  CLRF   xD8
09416:  CLRF   xD9
09418:  CLRF   xDA
0941A:  CLRF   xDB
0941C:  CLRF   xDC
0941E:  CLRF   xDD
09420:  CLRF   xDE
09422:  CLRF   xDF
09424:  CLRF   xE0
09426:  CLRF   xE1
09428:  CLRF   xE2
0942A:  CLRF   xE3
0942C:  CLRF   xE4
0942E:  CLRF   xE5
09430:  CLRF   xE6
09432:  CLRF   xE7
09434:  CLRF   xE8
09436:  CLRF   xE9
09438:  CLRF   xEA
0943A:  CLRF   xEB
0943C:  CLRF   xEC
0943E:  CLRF   xED
09440:  CLRF   xEE
09442:  CLRF   xEF
09444:  CLRF   xF0
09446:  CLRF   xF1
09448:  CLRF   xF2
0944A:  CLRF   xF3
0944C:  CLRF   xF4
0944E:  CLRF   xF5
09450:  CLRF   xF6
09452:  CLRF   xF7
09454:  CLRF   xF8
09456:  CLRF   xF9
09458:  CLRF   xFA
0945A:  CLRF   xFB
0945C:  CLRF   xFC
0945E:  CLRF   xFD
09460:  CLRF   xFE
09462:  CLRF   xFF
09464:  MOVLB  A
09466:  CLRF   x00
09468:  CLRF   x01
0946A:  CLRF   x02
0946C:  CLRF   x03
0946E:  CLRF   x04
09470:  CLRF   x05
09472:  CLRF   x06
....................     iv_data_packet_t *data_packet_ptr = &data_packet;
09474:  MOVLW  09
09476:  MOVWF  x08
09478:  MOVLW  C7
0947A:  MOVWF  x07
.................... 
....................     // ========================ヘッダーパケットの処理========================
....................     // ヘッダ情報の設定
....................     data_packet.header.start_marker = START_MAKER;
0947C:  MOVLB  9
0947E:  SETF   xC7
....................     data_packet.header.time_sec  = measured_data_ptr->time;
09480:  MOVF   xC2,W
09482:  MOVWF  FE9
09484:  MOVF   xC3,W
09486:  MOVWF  FEA
09488:  MOVFF  FEF,9C8
0948C:  MOVFF  FEC,9C9
09490:  MOVFF  FEC,9CA
09494:  MOVFF  FEC,9CB
09498:  MOVF   FED,F
0949A:  MOVF   FED,F
0949C:  MOVF   FED,F
....................     data_packet.header.time_msec = (unsigned int8)((measured_data_ptr->time >> 4) & 0xFF);
0949E:  MOVF   xC2,W
094A0:  MOVWF  FE9
094A2:  MOVF   xC3,W
094A4:  MOVWF  FEA
094A6:  MOVFF  FEF,A4E
094AA:  MOVFF  FEC,A4F
094AE:  MOVFF  FEC,A50
094B2:  MOVFF  FEC,A51
094B6:  MOVF   FED,F
094B8:  MOVF   FED,F
094BA:  MOVF   FED,F
094BC:  MOVLB  A
094BE:  RRCF   x51,F
094C0:  RRCF   x50,F
094C2:  RRCF   x4F,F
094C4:  RRCF   x4E,F
094C6:  RRCF   x51,F
094C8:  RRCF   x50,F
094CA:  RRCF   x4F,F
094CC:  RRCF   x4E,F
094CE:  RRCF   x51,F
094D0:  RRCF   x50,F
094D2:  RRCF   x4F,F
094D4:  RRCF   x4E,F
094D6:  RRCF   x51,F
094D8:  RRCF   x50,F
094DA:  RRCF   x4F,F
094DC:  RRCF   x4E,F
094DE:  MOVLW  0F
094E0:  ANDWF  x51,F
094E2:  MOVF   x4E,W
094E4:  MOVWF  00
094E6:  CLRF   01
094E8:  CLRF   02
094EA:  CLRF   03
094EC:  MOVFF  00,9CC
.................... 
....................     // 環境データの設定
....................     data_packet.header.envdata[0] = (measured_data_ptr->pd >> 4) & 0xFF;
094F0:  MOVLW  04
094F2:  MOVLB  9
094F4:  ADDWF  xC2,W
094F6:  MOVWF  FE9
094F8:  MOVLW  00
094FA:  ADDWFC xC3,W
094FC:  MOVWF  FEA
094FE:  MOVFF  FEC,A4F
09502:  MOVF   FED,F
09504:  MOVFF  FEF,A4E
09508:  MOVLB  A
0950A:  RRCF   x4F,F
0950C:  RRCF   x4E,F
0950E:  RRCF   x4F,F
09510:  RRCF   x4E,F
09512:  RRCF   x4F,F
09514:  RRCF   x4E,F
09516:  RRCF   x4F,F
09518:  RRCF   x4E,F
0951A:  MOVLW  0F
0951C:  ANDWF  x4F,F
0951E:  MOVF   x4E,W
09520:  MOVLB  9
09522:  MOVWF  xCD
....................     data_packet.header.envdata[1] =
....................         ((measured_data_ptr->pd & 0x0F) << 4) |
....................         ((measured_data_ptr->temp_py_top >> 8) & 0x0F);
09524:  MOVLW  04
09526:  ADDWF  xC2,W
09528:  MOVWF  FE9
0952A:  MOVLW  00
0952C:  ADDWFC xC3,W
0952E:  MOVWF  FEA
09530:  MOVFF  FEC,A4F
09534:  MOVF   FED,F
09536:  MOVFF  FEF,A4E
0953A:  MOVLW  0F
0953C:  MOVLB  A
0953E:  ANDWF  x4E,F
09540:  CLRF   x4F
09542:  RLCF   x4E,F
09544:  RLCF   x4F,F
09546:  RLCF   x4E,F
09548:  RLCF   x4F,F
0954A:  RLCF   x4E,F
0954C:  RLCF   x4F,F
0954E:  RLCF   x4E,F
09550:  RLCF   x4F,F
09552:  MOVLW  F0
09554:  ANDWF  x4E,F
09556:  MOVLW  06
09558:  MOVLB  9
0955A:  ADDWF  xC2,W
0955C:  MOVWF  FE9
0955E:  MOVLW  00
09560:  ADDWFC xC3,W
09562:  MOVWF  FEA
09564:  MOVFF  FEC,A51
09568:  MOVF   FED,F
0956A:  MOVFF  FEF,A50
0956E:  MOVFF  A51,A50
09572:  MOVLB  A
09574:  CLRF   x51
09576:  MOVF   x50,W
09578:  ANDLW  0F
0957A:  MOVWF  00
0957C:  CLRF   03
0957E:  MOVF   00,W
09580:  IORWF  x4E,W
09582:  MOVLB  9
09584:  MOVWF  xCE
....................     data_packet.header.envdata[2] = measured_data_ptr->temp_py_top & 0xFF;
09586:  MOVLW  06
09588:  ADDWF  xC2,W
0958A:  MOVWF  FE9
0958C:  MOVLW  00
0958E:  ADDWFC xC3,W
09590:  MOVWF  FEA
09592:  MOVFF  FEC,A4F
09596:  MOVF   FED,F
09598:  MOVFF  FEF,A4E
0959C:  MOVLB  A
0959E:  MOVF   x4E,W
095A0:  MOVLB  9
095A2:  MOVWF  xCF
.................... 
....................     data_packet.header.envdata[3] = (measured_data_ptr->temp_py_bot >> 4) & 0xFF;
095A4:  MOVLW  08
095A6:  ADDWF  xC2,W
095A8:  MOVWF  FE9
095AA:  MOVLW  00
095AC:  ADDWFC xC3,W
095AE:  MOVWF  FEA
095B0:  MOVFF  FEC,A4F
095B4:  MOVF   FED,F
095B6:  MOVFF  FEF,A4E
095BA:  MOVLB  A
095BC:  RRCF   x4F,F
095BE:  RRCF   x4E,F
095C0:  RRCF   x4F,F
095C2:  RRCF   x4E,F
095C4:  RRCF   x4F,F
095C6:  RRCF   x4E,F
095C8:  RRCF   x4F,F
095CA:  RRCF   x4E,F
095CC:  MOVLW  0F
095CE:  ANDWF  x4F,F
095D0:  MOVF   x4E,W
095D2:  MOVLB  9
095D4:  MOVWF  xD0
....................     data_packet.header.envdata[4] =
....................         ((measured_data_ptr->temp_py_bot & 0x0F) << 4) |
....................         ((measured_data_ptr->temp_mis7 >> 8) & 0x0F);
095D6:  MOVLW  08
095D8:  ADDWF  xC2,W
095DA:  MOVWF  FE9
095DC:  MOVLW  00
095DE:  ADDWFC xC3,W
095E0:  MOVWF  FEA
095E2:  MOVFF  FEC,A4F
095E6:  MOVF   FED,F
095E8:  MOVFF  FEF,A4E
095EC:  MOVLW  0F
095EE:  MOVLB  A
095F0:  ANDWF  x4E,F
095F2:  CLRF   x4F
095F4:  RLCF   x4E,F
095F6:  RLCF   x4F,F
095F8:  RLCF   x4E,F
095FA:  RLCF   x4F,F
095FC:  RLCF   x4E,F
095FE:  RLCF   x4F,F
09600:  RLCF   x4E,F
09602:  RLCF   x4F,F
09604:  MOVLW  F0
09606:  ANDWF  x4E,F
09608:  MOVLW  0A
0960A:  MOVLB  9
0960C:  ADDWF  xC2,W
0960E:  MOVWF  FE9
09610:  MOVLW  00
09612:  ADDWFC xC3,W
09614:  MOVWF  FEA
09616:  MOVFF  FEC,A51
0961A:  MOVF   FED,F
0961C:  MOVFF  FEF,A50
09620:  MOVFF  A51,A50
09624:  MOVLB  A
09626:  CLRF   x51
09628:  MOVF   x50,W
0962A:  ANDLW  0F
0962C:  MOVWF  00
0962E:  CLRF   03
09630:  MOVF   00,W
09632:  IORWF  x4E,W
09634:  MOVLB  9
09636:  MOVWF  xD1
....................     data_packet.header.envdata[5] = measured_data_ptr->temp_mis7 & 0xFF;
09638:  MOVLW  0A
0963A:  ADDWF  xC2,W
0963C:  MOVWF  FE9
0963E:  MOVLW  00
09640:  ADDWFC xC3,W
09642:  MOVWF  FEA
09644:  MOVFF  FEC,A4F
09648:  MOVF   FED,F
0964A:  MOVFF  FEF,A4E
0964E:  MOVLB  A
09650:  MOVF   x4E,W
09652:  MOVLB  9
09654:  MOVWF  xD2
.................... 
....................     // I-Vデータの設定
....................     for (unsigned int8 i = 0; i < IV_HEADER_SIZE; i++) {
09656:  MOVLB  A
09658:  CLRF   x09
0965A:  MOVLB  0
0965C:  MOVLB  A
0965E:  MOVF   x09,W
09660:  SUBLW  10
09662:  BTFSC  FD8.0
09664:  BRA    966C
09666:  MOVLB  0
09668:  GOTO   97BE
0966C:  MOVLB  0
....................         if (i < port_data_ptr->sweep_step) {
0966E:  MOVLW  01
09670:  MOVLB  9
09672:  ADDWF  xC4,W
09674:  MOVWF  FE9
09676:  MOVLW  00
09678:  ADDWFC xC5,W
0967A:  MOVWF  FEA
0967C:  MOVFF  FEC,03
09680:  MOVF   FED,F
09682:  MOVF   FEF,W
09684:  MOVWF  01
09686:  MOVF   03,F
09688:  BTFSC  FD8.2
0968A:  BRA    9692
0968C:  MOVLB  0
0968E:  GOTO   96A6
09692:  MOVLB  0
09694:  MOVF   01,W
09696:  MOVLB  A
09698:  SUBWF  x09,W
0969A:  BTFSS  FD8.0
0969C:  BRA    96A4
0969E:  MOVLB  0
096A0:  GOTO   9770
096A4:  MOVLB  0
....................             data_packet.header.ivdata[i*3]     = port_data_ptr->data_buffer[i*3];
096A6:  MOVLB  A
096A8:  MOVF   x09,W
096AA:  MULLW  03
096AC:  MOVF   FF3,W
096AE:  CLRF   03
096B0:  ADDLW  D3
096B2:  MOVWF  01
096B4:  MOVLW  09
096B6:  ADDWFC 03,F
096B8:  MOVF   01,W
096BA:  MOVWF  x4E
096BC:  MOVFF  03,A4F
096C0:  MOVF   x09,W
096C2:  MULLW  03
096C4:  MOVF   FF3,W
096C6:  ADDLW  03
096C8:  MOVLB  9
096CA:  ADDWF  xC4,W
096CC:  MOVWF  FE9
096CE:  MOVLW  00
096D0:  ADDWFC xC5,W
096D2:  MOVWF  FEA
096D4:  MOVF   FEF,W
096D6:  MOVLB  A
096D8:  MOVWF  x50
096DA:  MOVFF  A4F,FEA
096DE:  MOVFF  A4E,FE9
096E2:  MOVFF  A50,FEF
....................             data_packet.header.ivdata[i*3 + 1] = port_data_ptr->data_buffer[i*3 + 1];
096E6:  MOVF   x09,W
096E8:  MULLW  03
096EA:  MOVF   FF3,W
096EC:  ADDLW  01
096EE:  CLRF   03
096F0:  ADDLW  D3
096F2:  MOVWF  01
096F4:  MOVLW  09
096F6:  ADDWFC 03,F
096F8:  MOVF   01,W
096FA:  MOVWF  x4E
096FC:  MOVFF  03,A4F
09700:  MOVF   x09,W
09702:  MULLW  03
09704:  MOVF   FF3,W
09706:  ADDLW  01
09708:  ADDLW  03
0970A:  MOVLB  9
0970C:  ADDWF  xC4,W
0970E:  MOVWF  FE9
09710:  MOVLW  00
09712:  ADDWFC xC5,W
09714:  MOVWF  FEA
09716:  MOVF   FEF,W
09718:  MOVLB  A
0971A:  MOVWF  x50
0971C:  MOVFF  A4F,FEA
09720:  MOVFF  A4E,FE9
09724:  MOVFF  A50,FEF
....................             data_packet.header.ivdata[i*3 + 2] = port_data_ptr->data_buffer[i*3 + 2];
09728:  MOVF   x09,W
0972A:  MULLW  03
0972C:  MOVF   FF3,W
0972E:  ADDLW  02
09730:  CLRF   03
09732:  ADDLW  D3
09734:  MOVWF  01
09736:  MOVLW  09
09738:  ADDWFC 03,F
0973A:  MOVF   01,W
0973C:  MOVWF  x4E
0973E:  MOVFF  03,A4F
09742:  MOVF   x09,W
09744:  MULLW  03
09746:  MOVF   FF3,W
09748:  ADDLW  02
0974A:  ADDLW  03
0974C:  MOVLB  9
0974E:  ADDWF  xC4,W
09750:  MOVWF  FE9
09752:  MOVLW  00
09754:  ADDWFC xC5,W
09756:  MOVWF  FEA
09758:  MOVF   FEF,W
0975A:  MOVLB  A
0975C:  MOVWF  x50
0975E:  MOVFF  A4F,FEA
09762:  MOVFF  A4E,FE9
09766:  MOVFF  A50,FEF
0976A:  MOVLB  0
....................         } else {
0976C:  GOTO   97B4
....................             // 余りは0埋め
....................             data_packet.header.ivdata[i*3]     = 0;
09770:  MOVLB  A
09772:  MOVF   x09,W
09774:  MULLW  03
09776:  MOVF   FF3,W
09778:  CLRF   03
0977A:  ADDLW  D3
0977C:  MOVWF  FE9
0977E:  MOVLW  09
09780:  ADDWFC 03,W
09782:  MOVWF  FEA
09784:  CLRF   FEF
....................             data_packet.header.ivdata[i*3 + 1] = 0;
09786:  MOVF   x09,W
09788:  MULLW  03
0978A:  MOVF   FF3,W
0978C:  ADDLW  01
0978E:  CLRF   03
09790:  ADDLW  D3
09792:  MOVWF  FE9
09794:  MOVLW  09
09796:  ADDWFC 03,W
09798:  MOVWF  FEA
0979A:  CLRF   FEF
....................             data_packet.header.ivdata[i*3 + 2] = 0;
0979C:  MOVF   x09,W
0979E:  MULLW  03
097A0:  MOVF   FF3,W
097A2:  ADDLW  02
097A4:  CLRF   03
097A6:  ADDLW  D3
097A8:  MOVWF  FE9
097AA:  MOVLW  09
097AC:  ADDWFC 03,W
097AE:  MOVWF  FEA
097B0:  CLRF   FEF
097B2:  MOVLB  0
....................         }
097B4:  MOVLB  A
097B6:  INCF   x09,F
097B8:  MOVLB  0
097BA:  GOTO   965C
....................     }
....................     // フラッシュに書き込み
....................     if (port_data_ptr->port_num == 1) {
097BE:  MOVLB  9
097C0:  MOVF   xC4,W
097C2:  MOVWF  FE9
097C4:  MOVF   xC5,W
097C6:  MOVWF  FEA
097C8:  DECFSZ FEF,W
097CA:  BRA    97D0
097CC:  BRA    97D6
097CE:  MOVLB  0
097D0:  MOVLB  0
097D2:  GOTO   982E
097D6:  MOVLB  0
....................         data_packet.header.crc = calc_crc8(data_packet_ptr->raw, PACKET_SIZE - 1);
097D8:  MOVLB  A
097DA:  MOVF   x07,W
097DC:  MOVWF  01
097DE:  MOVF   x08,W
097E0:  MOVWF  03
097E2:  MOVF   01,W
097E4:  MOVWF  x4E
097E6:  MOVFF  03,A4F
097EA:  MOVFF  A4F,AEC
097EE:  MOVFF  A4E,AEB
097F2:  MOVLW  3F
097F4:  MOVWF  xED
097F6:  MOVLB  0
097F8:  CALL   310C
097FC:  MOVFF  01,A06
....................         misf_write_data(FLASH_ID_IV1_DATA, data_packet_ptr->raw, PACKET_SIZE);
09800:  MOVLB  A
09802:  MOVF   x07,W
09804:  MOVWF  01
09806:  MOVF   x08,W
09808:  MOVWF  03
0980A:  MOVF   01,W
0980C:  MOVWF  x4E
0980E:  MOVFF  03,A4F
09812:  MOVLW  04
09814:  MOVWF  x50
09816:  MOVFF  A4F,A52
0981A:  MOVFF  A4E,A51
0981E:  CLRF   x54
09820:  MOVLW  40
09822:  MOVWF  x53
09824:  MOVLB  0
09826:  CALL   42AE
....................         // for (int i = 0; i < PACKET_SIZE; i++) {
....................             // fprintf(PC, "%02X ", data_packet_ptr->raw[i]);
....................         // }
....................         unsigned int8 read_back[PACKET_SIZE];
....................         // read_data_bytes(mis_fm, MISF_ADDRESS_TABLE[FLASH_ID_IV1_DATA].start, read_back, PACKET_SIZE);
....................         // for (int j = 0; j < PACKET_SIZE; j++) {
....................             // fprintf(PC, "%02X ", read_back[j]);
....................         // }
....................     } else if (port_data_ptr->port_num == 2) {
0982A:  GOTO   989A
0982E:  MOVLB  9
09830:  MOVF   xC4,W
09832:  MOVWF  FE9
09834:  MOVF   xC5,W
09836:  MOVWF  FEA
09838:  MOVF   FEF,W
0983A:  SUBLW  02
0983C:  BTFSC  FD8.2
0983E:  BRA    9846
09840:  MOVLB  0
09842:  GOTO   989A
09846:  MOVLB  0
....................         data_packet.header.crc = calc_crc8(data_packet_ptr->raw, PACKET_SIZE - 1);
09848:  MOVLB  A
0984A:  MOVF   x07,W
0984C:  MOVWF  01
0984E:  MOVF   x08,W
09850:  MOVWF  03
09852:  MOVF   01,W
09854:  MOVWF  x4E
09856:  MOVFF  03,A4F
0985A:  MOVFF  A4F,AEC
0985E:  MOVFF  A4E,AEB
09862:  MOVLW  3F
09864:  MOVWF  xED
09866:  MOVLB  0
09868:  CALL   310C
0986C:  MOVFF  01,A06
....................         misf_write_data(FLASH_ID_IV2_DATA, data_packet_ptr->raw, PACKET_SIZE);
09870:  MOVLB  A
09872:  MOVF   x07,W
09874:  MOVWF  01
09876:  MOVF   x08,W
09878:  MOVWF  03
0987A:  MOVF   01,W
0987C:  MOVWF  x4E
0987E:  MOVFF  03,A4F
09882:  MOVLW  06
09884:  MOVWF  x50
09886:  MOVFF  A4F,A52
0988A:  MOVFF  A4E,A51
0988E:  CLRF   x54
09890:  MOVLW  40
09892:  MOVWF  x53
09894:  MOVLB  0
09896:  CALL   42AE
....................     }
.................... 
....................     // ========================データパケットの処理========================
....................     unsigned int16 iv_index = IV_HEADER_SIZE;
0989A:  MOVLB  A
0989C:  CLRF   x4B
0989E:  MOVLW  11
098A0:  MOVWF  x4A
098A2:  MOVLB  0
....................     // パケットごとに繰り返す
....................     while (iv_index < port_data_ptr->sweep_step) {
098A4:  MOVLW  01
098A6:  MOVLB  9
098A8:  ADDWF  xC4,W
098AA:  MOVWF  FE9
098AC:  MOVLW  00
098AE:  ADDWFC xC5,W
098B0:  MOVWF  FEA
098B2:  MOVFF  FEC,03
098B6:  MOVF   FED,F
098B8:  MOVF   FEF,W
098BA:  MOVWF  01
098BC:  MOVLB  A
098BE:  MOVF   x4B,W
098C0:  SUBWF  03,W
098C2:  BTFSC  FD8.0
098C4:  BRA    98CC
098C6:  MOVLB  0
098C8:  GOTO   9CAC
098CC:  MOVLB  0
098CE:  BTFSS  FD8.2
098D0:  GOTO   98E6
098D4:  MOVF   01,W
098D6:  MOVLB  A
098D8:  SUBWF  x4A,W
098DA:  BTFSS  FD8.0
098DC:  BRA    98E4
098DE:  MOVLB  0
098E0:  GOTO   9CAC
098E4:  MOVLB  0
....................         unsigned int16 step_in_packet = 0;
098E6:  MOVLB  A
098E8:  CLRF   x4D
098EA:  CLRF   x4C
098EC:  MOVLB  0
.................... 
....................         // データを詰める（最大21点/パケット）
....................         for (; step_in_packet < IV_DATA_SIZE && iv_index < port_data_ptr->sweep_step;
098EE:  MOVLB  A
098F0:  MOVF   x4D,F
098F2:  BTFSC  FD8.2
098F4:  BRA    98FC
098F6:  MOVLB  0
098F8:  GOTO   9B04
098FC:  MOVLB  0
098FE:  MOVLB  A
09900:  MOVF   x4C,W
09902:  SUBLW  14
09904:  BTFSC  FD8.0
09906:  BRA    990E
09908:  MOVLB  0
0990A:  GOTO   9B04
0990E:  MOVLB  0
09910:  MOVLW  01
09912:  MOVLB  9
09914:  ADDWF  xC4,W
09916:  MOVWF  FE9
09918:  MOVLW  00
0991A:  ADDWFC xC5,W
0991C:  MOVWF  FEA
0991E:  MOVFF  FEC,03
09922:  MOVF   FED,F
09924:  MOVF   FEF,W
09926:  MOVWF  01
09928:  MOVLB  A
0992A:  MOVF   x4B,W
0992C:  SUBWF  03,W
0992E:  BTFSC  FD8.0
09930:  BRA    9938
09932:  MOVLB  0
09934:  GOTO   9B04
09938:  MOVLB  0
0993A:  BTFSS  FD8.2
0993C:  GOTO   9952
09940:  MOVF   01,W
09942:  MOVLB  A
09944:  SUBWF  x4A,W
09946:  BTFSS  FD8.0
09948:  BRA    9950
0994A:  MOVLB  0
0994C:  GOTO   9B04
09950:  MOVLB  0
....................              step_in_packet++, iv_index++) {
....................             data_packet.data.iv_data[step_in_packet*3] = port_data_ptr->data_buffer[iv_index*3];
09952:  MOVFF  A4D,A53
09956:  MOVFF  A4C,A52
0995A:  MOVLB  A
0995C:  CLRF   x55
0995E:  MOVLW  03
09960:  MOVWF  x54
09962:  MOVLB  0
09964:  CALL   8260
09968:  MOVFF  02,A4F
0996C:  MOVFF  01,A4E
09970:  MOVLW  C7
09972:  MOVLB  A
09974:  ADDWF  x4E,W
09976:  MOVWF  01
09978:  MOVLW  09
0997A:  ADDWFC x4F,W
0997C:  MOVWF  03
0997E:  MOVF   01,W
09980:  MOVWF  x50
09982:  MOVFF  03,A51
09986:  MOVFF  A4B,A53
0998A:  MOVFF  A4A,A52
0998E:  CLRF   x55
09990:  MOVLW  03
09992:  MOVWF  x54
09994:  MOVLB  0
09996:  CALL   8260
0999A:  MOVFF  02,A53
0999E:  MOVFF  01,A52
099A2:  MOVLW  03
099A4:  MOVLB  A
099A6:  ADDWF  x52,W
099A8:  MOVWF  01
099AA:  MOVLW  00
099AC:  ADDWFC x53,W
099AE:  MOVWF  03
099B0:  MOVF   01,W
099B2:  MOVLB  9
099B4:  ADDWF  xC4,W
099B6:  MOVWF  FE9
099B8:  MOVF   xC5,W
099BA:  ADDWFC 03,W
099BC:  MOVWF  FEA
099BE:  MOVF   FEF,W
099C0:  MOVLB  A
099C2:  MOVWF  x54
099C4:  MOVFF  A51,FEA
099C8:  MOVFF  A50,FE9
099CC:  MOVFF  A54,FEF
....................             data_packet.data.iv_data[step_in_packet*3+1] = port_data_ptr->data_buffer[iv_index*3+1];
099D0:  MOVFF  A4D,A53
099D4:  MOVFF  A4C,A52
099D8:  CLRF   x55
099DA:  MOVLW  03
099DC:  MOVWF  x54
099DE:  MOVLB  0
099E0:  CALL   8260
099E4:  MOVFF  02,A4F
099E8:  MOVFF  01,A4E
099EC:  MOVLW  01
099EE:  MOVLB  A
099F0:  ADDWF  x4E,F
099F2:  MOVLW  00
099F4:  ADDWFC x4F,F
099F6:  MOVLW  C7
099F8:  ADDWF  x4E,W
099FA:  MOVWF  01
099FC:  MOVLW  09
099FE:  ADDWFC x4F,W
09A00:  MOVWF  03
09A02:  MOVF   01,W
09A04:  MOVWF  x50
09A06:  MOVFF  03,A51
09A0A:  MOVFF  A4B,A53
09A0E:  MOVFF  A4A,A52
09A12:  CLRF   x55
09A14:  MOVLW  03
09A16:  MOVWF  x54
09A18:  MOVLB  0
09A1A:  CALL   8260
09A1E:  MOVFF  02,A53
09A22:  MOVFF  01,A52
09A26:  MOVLW  01
09A28:  MOVLB  A
09A2A:  ADDWF  x52,F
09A2C:  MOVLW  00
09A2E:  ADDWFC x53,F
09A30:  MOVLW  03
09A32:  ADDWF  x52,W
09A34:  MOVWF  01
09A36:  MOVLW  00
09A38:  ADDWFC x53,W
09A3A:  MOVWF  03
09A3C:  MOVF   01,W
09A3E:  MOVLB  9
09A40:  ADDWF  xC4,W
09A42:  MOVWF  FE9
09A44:  MOVF   xC5,W
09A46:  ADDWFC 03,W
09A48:  MOVWF  FEA
09A4A:  MOVF   FEF,W
09A4C:  MOVLB  A
09A4E:  MOVWF  x54
09A50:  MOVFF  A51,FEA
09A54:  MOVFF  A50,FE9
09A58:  MOVFF  A54,FEF
....................             data_packet.data.iv_data[step_in_packet*3+2] = port_data_ptr->data_buffer[iv_index*3+2];
09A5C:  MOVFF  A4D,A53
09A60:  MOVFF  A4C,A52
09A64:  CLRF   x55
09A66:  MOVLW  03
09A68:  MOVWF  x54
09A6A:  MOVLB  0
09A6C:  CALL   8260
09A70:  MOVFF  02,A4F
09A74:  MOVFF  01,A4E
09A78:  MOVLW  02
09A7A:  MOVLB  A
09A7C:  ADDWF  x4E,F
09A7E:  MOVLW  00
09A80:  ADDWFC x4F,F
09A82:  MOVLW  C7
09A84:  ADDWF  x4E,W
09A86:  MOVWF  01
09A88:  MOVLW  09
09A8A:  ADDWFC x4F,W
09A8C:  MOVWF  03
09A8E:  MOVF   01,W
09A90:  MOVWF  x50
09A92:  MOVFF  03,A51
09A96:  MOVFF  A4B,A53
09A9A:  MOVFF  A4A,A52
09A9E:  CLRF   x55
09AA0:  MOVLW  03
09AA2:  MOVWF  x54
09AA4:  MOVLB  0
09AA6:  CALL   8260
09AAA:  MOVFF  02,A53
09AAE:  MOVFF  01,A52
09AB2:  MOVLW  02
09AB4:  MOVLB  A
09AB6:  ADDWF  x52,F
09AB8:  MOVLW  00
09ABA:  ADDWFC x53,F
09ABC:  MOVLW  03
09ABE:  ADDWF  x52,W
09AC0:  MOVWF  01
09AC2:  MOVLW  00
09AC4:  ADDWFC x53,W
09AC6:  MOVWF  03
09AC8:  MOVF   01,W
09ACA:  MOVLB  9
09ACC:  ADDWF  xC4,W
09ACE:  MOVWF  FE9
09AD0:  MOVF   xC5,W
09AD2:  ADDWFC 03,W
09AD4:  MOVWF  FEA
09AD6:  MOVF   FEF,W
09AD8:  MOVLB  A
09ADA:  MOVWF  x54
09ADC:  MOVFF  A51,FEA
09AE0:  MOVFF  A50,FE9
09AE4:  MOVFF  A54,FEF
09AE8:  MOVLB  0
09AEA:  MOVLB  A
09AEC:  MOVF   x4D,W
09AEE:  MOVWF  03
09AF0:  MOVF   x4C,W
09AF2:  INCF   x4C,F
09AF4:  BTFSC  FD8.2
09AF6:  INCF   x4D,F
09AF8:  INCF   x4A,F
09AFA:  BTFSC  FD8.2
09AFC:  INCF   x4B,F
09AFE:  MOVLB  0
09B00:  GOTO   98EE
....................         }
.................... 
....................         // 残り領域を 0x00 で埋める（未使用部分）
....................         for (; step_in_packet < 21; step_in_packet++) {
09B04:  MOVLB  A
09B06:  MOVF   x4D,F
09B08:  BTFSC  FD8.2
09B0A:  BRA    9B12
09B0C:  MOVLB  0
09B0E:  GOTO   9BCC
09B12:  MOVLB  0
09B14:  MOVLB  A
09B16:  MOVF   x4C,W
09B18:  SUBLW  14
09B1A:  BTFSC  FD8.0
09B1C:  BRA    9B24
09B1E:  MOVLB  0
09B20:  GOTO   9BCC
09B24:  MOVLB  0
....................             data_packet.data.iv_data[step_in_packet*3]  = 0x00;
09B26:  MOVFF  A4D,A53
09B2A:  MOVFF  A4C,A52
09B2E:  MOVLB  A
09B30:  CLRF   x55
09B32:  MOVLW  03
09B34:  MOVWF  x54
09B36:  MOVLB  0
09B38:  CALL   8260
09B3C:  MOVFF  02,A4F
09B40:  MOVFF  01,A4E
09B44:  MOVLW  C7
09B46:  MOVLB  A
09B48:  ADDWF  x4E,W
09B4A:  MOVWF  FE9
09B4C:  MOVLW  09
09B4E:  ADDWFC x4F,W
09B50:  MOVWF  FEA
09B52:  CLRF   FEF
....................             data_packet.data.iv_data[step_in_packet*3+1] = 0x00;
09B54:  MOVFF  A4D,A53
09B58:  MOVFF  A4C,A52
09B5C:  CLRF   x55
09B5E:  MOVLW  03
09B60:  MOVWF  x54
09B62:  MOVLB  0
09B64:  CALL   8260
09B68:  MOVFF  02,A4F
09B6C:  MOVFF  01,A4E
09B70:  MOVLW  01
09B72:  MOVLB  A
09B74:  ADDWF  x4E,F
09B76:  MOVLW  00
09B78:  ADDWFC x4F,F
09B7A:  MOVLW  C7
09B7C:  ADDWF  x4E,W
09B7E:  MOVWF  FE9
09B80:  MOVLW  09
09B82:  ADDWFC x4F,W
09B84:  MOVWF  FEA
09B86:  CLRF   FEF
....................             data_packet.data.iv_data[step_in_packet*3+2] = 0x00;
09B88:  MOVFF  A4D,A53
09B8C:  MOVFF  A4C,A52
09B90:  CLRF   x55
09B92:  MOVLW  03
09B94:  MOVWF  x54
09B96:  MOVLB  0
09B98:  CALL   8260
09B9C:  MOVFF  02,A4F
09BA0:  MOVFF  01,A4E
09BA4:  MOVLW  02
09BA6:  MOVLB  A
09BA8:  ADDWF  x4E,F
09BAA:  MOVLW  00
09BAC:  ADDWFC x4F,F
09BAE:  MOVLW  C7
09BB0:  ADDWF  x4E,W
09BB2:  MOVWF  FE9
09BB4:  MOVLW  09
09BB6:  ADDWFC x4F,W
09BB8:  MOVWF  FEA
09BBA:  CLRF   FEF
09BBC:  MOVLB  0
09BBE:  MOVLB  A
09BC0:  INCF   x4C,F
09BC2:  BTFSC  FD8.2
09BC4:  INCF   x4D,F
09BC6:  MOVLB  0
09BC8:  GOTO   9B04
....................         }
.................... 
....................         // フラッシュに書き込み
....................         if (port_data_ptr->port_num == 1) {
09BCC:  MOVLB  9
09BCE:  MOVF   xC4,W
09BD0:  MOVWF  FE9
09BD2:  MOVF   xC5,W
09BD4:  MOVWF  FEA
09BD6:  DECFSZ FEF,W
09BD8:  BRA    9BDE
09BDA:  BRA    9BE4
09BDC:  MOVLB  0
09BDE:  MOVLB  0
09BE0:  GOTO   9C3C
09BE4:  MOVLB  0
....................             data_packet.data.crc = calc_crc8(data_packet_ptr->raw, PACKET_SIZE - 1);
09BE6:  MOVLB  A
09BE8:  MOVF   x07,W
09BEA:  MOVWF  01
09BEC:  MOVF   x08,W
09BEE:  MOVWF  03
09BF0:  MOVF   01,W
09BF2:  MOVWF  x4E
09BF4:  MOVFF  03,A4F
09BF8:  MOVFF  A4F,AEC
09BFC:  MOVFF  A4E,AEB
09C00:  MOVLW  3F
09C02:  MOVWF  xED
09C04:  MOVLB  0
09C06:  CALL   310C
09C0A:  MOVFF  01,A06
....................             misf_write_data(FLASH_ID_IV1_DATA, data_packet_ptr->raw, PACKET_SIZE);
09C0E:  MOVLB  A
09C10:  MOVF   x07,W
09C12:  MOVWF  01
09C14:  MOVF   x08,W
09C16:  MOVWF  03
09C18:  MOVF   01,W
09C1A:  MOVWF  x4E
09C1C:  MOVFF  03,A4F
09C20:  MOVLW  04
09C22:  MOVWF  x50
09C24:  MOVFF  A4F,A52
09C28:  MOVFF  A4E,A51
09C2C:  CLRF   x54
09C2E:  MOVLW  40
09C30:  MOVWF  x53
09C32:  MOVLB  0
09C34:  CALL   42AE
....................             // for (int i = 0; i < PACKET_SIZE; i++) {
....................                 // fprintf(PC, "%02X ", data_packet_ptr->raw[i]);
....................             // }
....................         } else if (port_data_ptr->port_num == 2) {
09C38:  GOTO   9CA8
09C3C:  MOVLB  9
09C3E:  MOVF   xC4,W
09C40:  MOVWF  FE9
09C42:  MOVF   xC5,W
09C44:  MOVWF  FEA
09C46:  MOVF   FEF,W
09C48:  SUBLW  02
09C4A:  BTFSC  FD8.2
09C4C:  BRA    9C54
09C4E:  MOVLB  0
09C50:  GOTO   9CA8
09C54:  MOVLB  0
....................             data_packet.data.crc = calc_crc8(data_packet_ptr->raw, PACKET_SIZE - 1);
09C56:  MOVLB  A
09C58:  MOVF   x07,W
09C5A:  MOVWF  01
09C5C:  MOVF   x08,W
09C5E:  MOVWF  03
09C60:  MOVF   01,W
09C62:  MOVWF  x4E
09C64:  MOVFF  03,A4F
09C68:  MOVFF  A4F,AEC
09C6C:  MOVFF  A4E,AEB
09C70:  MOVLW  3F
09C72:  MOVWF  xED
09C74:  MOVLB  0
09C76:  CALL   310C
09C7A:  MOVFF  01,A06
....................             misf_write_data(FLASH_ID_IV2_DATA, data_packet_ptr->raw, PACKET_SIZE);
09C7E:  MOVLB  A
09C80:  MOVF   x07,W
09C82:  MOVWF  01
09C84:  MOVF   x08,W
09C86:  MOVWF  03
09C88:  MOVF   01,W
09C8A:  MOVWF  x4E
09C8C:  MOVFF  03,A4F
09C90:  MOVLW  06
09C92:  MOVWF  x50
09C94:  MOVFF  A4F,A52
09C98:  MOVFF  A4E,A51
09C9C:  CLRF   x54
09C9E:  MOVLW  40
09CA0:  MOVWF  x53
09CA2:  MOVLB  0
09CA4:  CALL   42AE
....................         }
09CA8:  GOTO   98A4
....................     }
.................... 
....................     misf_update_address_area(); // 必要なら有効化
09CAC:  CALL   507E
09CB0:  RETURN 0
.................... }
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_limit)
09CB2:  CALL   3C38
09CB6:  MOVFF  03,1E8
09CBA:  MOVFF  02,1E7
09CBE:  MOVFF  01,1E6
09CC2:  MOVFF  00,1E5
.................... {
....................     unsigned int32 start_time_ms = get_current_sec();
....................     fputc('.', PC);
09CC6:  MOVLW  2E
09CC8:  CALL   91FC
....................     // Enable both CIGS ports
....................     connect_port1();
09CCC:  CALL   5234
....................     connect_port2();
09CD0:  CALL   523C
.................... 
....................     delay_ms(100);
09CD4:  MOVLW  64
09CD6:  MOVLB  B
09CD8:  MOVWF  x03
09CDA:  MOVLB  0
09CDC:  CALL   22D0
.................... 
....................     // Init Port1
....................     sweep_config_t port1 = {0};
09CE0:  MOVLB  1
09CE2:  CLRF   xE9
09CE4:  CLRF   xEA
09CE6:  CLRF   xEB
09CE8:  CLRF   xEC
09CEA:  CLRF   xED
09CEC:  CLRF   xEE
09CEE:  CLRF   xEF
09CF0:  CLRF   xF0
09CF2:  CLRF   xF1
09CF4:  CLRF   xF2
09CF6:  CLRF   xF3
09CF8:  CLRF   xF4
09CFA:  CLRF   xF5
09CFC:  CLRF   xF6
09CFE:  CLRF   xF7
09D00:  CLRF   xF8
09D02:  CLRF   xF9
09D04:  CLRF   xFA
09D06:  CLRF   xFB
09D08:  CLRF   xFC
09D0A:  CLRF   xFD
09D0C:  CLRF   xFE
09D0E:  CLRF   xFF
09D10:  MOVLB  2
09D12:  CLRF   x00
09D14:  CLRF   x01
09D16:  CLRF   x02
09D18:  CLRF   x03
09D1A:  CLRF   x04
09D1C:  CLRF   x05
09D1E:  CLRF   x06
09D20:  CLRF   x07
09D22:  CLRF   x08
09D24:  CLRF   x09
09D26:  CLRF   x0A
09D28:  CLRF   x0B
09D2A:  CLRF   x0C
09D2C:  CLRF   x0D
09D2E:  CLRF   x0E
09D30:  CLRF   x0F
09D32:  CLRF   x10
09D34:  CLRF   x11
09D36:  CLRF   x12
09D38:  CLRF   x13
09D3A:  CLRF   x14
09D3C:  CLRF   x15
09D3E:  CLRF   x16
09D40:  CLRF   x17
09D42:  CLRF   x18
09D44:  CLRF   x19
09D46:  CLRF   x1A
09D48:  CLRF   x1B
09D4A:  CLRF   x1C
09D4C:  CLRF   x1D
09D4E:  CLRF   x1E
09D50:  CLRF   x1F
09D52:  CLRF   x20
09D54:  CLRF   x21
09D56:  CLRF   x22
09D58:  CLRF   x23
09D5A:  CLRF   x24
09D5C:  CLRF   x25
09D5E:  CLRF   x26
09D60:  CLRF   x27
09D62:  CLRF   x28
09D64:  CLRF   x29
09D66:  CLRF   x2A
09D68:  CLRF   x2B
09D6A:  CLRF   x2C
09D6C:  CLRF   x2D
09D6E:  CLRF   x2E
09D70:  CLRF   x2F
09D72:  CLRF   x30
09D74:  CLRF   x31
09D76:  CLRF   x32
09D78:  CLRF   x33
09D7A:  CLRF   x34
09D7C:  CLRF   x35
09D7E:  CLRF   x36
09D80:  CLRF   x37
09D82:  CLRF   x38
09D84:  CLRF   x39
09D86:  CLRF   x3A
09D88:  CLRF   x3B
09D8A:  CLRF   x3C
09D8C:  CLRF   x3D
09D8E:  CLRF   x3E
09D90:  CLRF   x3F
09D92:  CLRF   x40
09D94:  CLRF   x41
09D96:  CLRF   x42
09D98:  CLRF   x43
09D9A:  CLRF   x44
09D9C:  CLRF   x45
09D9E:  CLRF   x46
09DA0:  CLRF   x47
09DA2:  CLRF   x48
09DA4:  CLRF   x49
09DA6:  CLRF   x4A
09DA8:  CLRF   x4B
09DAA:  CLRF   x4C
09DAC:  CLRF   x4D
09DAE:  CLRF   x4E
09DB0:  CLRF   x4F
09DB2:  CLRF   x50
09DB4:  CLRF   x51
09DB6:  CLRF   x52
09DB8:  CLRF   x53
09DBA:  CLRF   x54
09DBC:  CLRF   x55
09DBE:  CLRF   x56
09DC0:  CLRF   x57
09DC2:  CLRF   x58
09DC4:  CLRF   x59
09DC6:  CLRF   x5A
09DC8:  CLRF   x5B
09DCA:  CLRF   x5C
09DCC:  CLRF   x5D
09DCE:  CLRF   x5E
09DD0:  CLRF   x5F
09DD2:  CLRF   x60
09DD4:  CLRF   x61
09DD6:  CLRF   x62
09DD8:  CLRF   x63
09DDA:  CLRF   x64
09DDC:  CLRF   x65
09DDE:  CLRF   x66
09DE0:  CLRF   x67
09DE2:  CLRF   x68
09DE4:  CLRF   x69
09DE6:  CLRF   x6A
09DE8:  CLRF   x6B
09DEA:  CLRF   x6C
09DEC:  CLRF   x6D
09DEE:  CLRF   x6E
09DF0:  CLRF   x6F
09DF2:  CLRF   x70
09DF4:  CLRF   x71
09DF6:  CLRF   x72
09DF8:  CLRF   x73
09DFA:  CLRF   x74
09DFC:  CLRF   x75
09DFE:  CLRF   x76
09E00:  CLRF   x77
09E02:  CLRF   x78
09E04:  CLRF   x79
09E06:  CLRF   x7A
09E08:  CLRF   x7B
09E0A:  CLRF   x7C
09E0C:  CLRF   x7D
09E0E:  CLRF   x7E
09E10:  CLRF   x7F
09E12:  CLRF   x80
09E14:  CLRF   x81
09E16:  CLRF   x82
09E18:  CLRF   x83
09E1A:  CLRF   x84
09E1C:  CLRF   x85
09E1E:  CLRF   x86
09E20:  CLRF   x87
09E22:  CLRF   x88
09E24:  CLRF   x89
09E26:  CLRF   x8A
09E28:  CLRF   x8B
09E2A:  CLRF   x8C
09E2C:  CLRF   x8D
09E2E:  CLRF   x8E
09E30:  CLRF   x8F
09E32:  CLRF   x90
09E34:  CLRF   x91
09E36:  CLRF   x92
09E38:  CLRF   x93
09E3A:  CLRF   x94
09E3C:  CLRF   x95
09E3E:  CLRF   x96
09E40:  CLRF   x97
09E42:  CLRF   x98
09E44:  CLRF   x99
09E46:  CLRF   x9A
09E48:  CLRF   x9B
09E4A:  CLRF   x9C
09E4C:  CLRF   x9D
09E4E:  CLRF   x9E
09E50:  CLRF   x9F
09E52:  CLRF   xA0
09E54:  CLRF   xA1
09E56:  CLRF   xA2
09E58:  CLRF   xA3
09E5A:  CLRF   xA4
09E5C:  CLRF   xA5
09E5E:  CLRF   xA6
09E60:  CLRF   xA7
09E62:  CLRF   xA8
09E64:  CLRF   xA9
09E66:  CLRF   xAA
09E68:  CLRF   xAB
09E6A:  CLRF   xAC
09E6C:  CLRF   xAD
09E6E:  CLRF   xAE
09E70:  CLRF   xAF
09E72:  CLRF   xB0
09E74:  CLRF   xB1
09E76:  CLRF   xB2
09E78:  CLRF   xB3
09E7A:  CLRF   xB4
09E7C:  CLRF   xB5
09E7E:  CLRF   xB6
09E80:  CLRF   xB7
09E82:  CLRF   xB8
09E84:  CLRF   xB9
09E86:  CLRF   xBA
09E88:  CLRF   xBB
09E8A:  CLRF   xBC
09E8C:  CLRF   xBD
09E8E:  CLRF   xBE
09E90:  CLRF   xBF
09E92:  CLRF   xC0
09E94:  CLRF   xC1
09E96:  CLRF   xC2
09E98:  CLRF   xC3
09E9A:  CLRF   xC4
09E9C:  CLRF   xC5
09E9E:  CLRF   xC6
09EA0:  CLRF   xC7
09EA2:  CLRF   xC8
09EA4:  CLRF   xC9
09EA6:  CLRF   xCA
09EA8:  CLRF   xCB
09EAA:  CLRF   xCC
09EAC:  CLRF   xCD
09EAE:  CLRF   xCE
09EB0:  CLRF   xCF
09EB2:  CLRF   xD0
09EB4:  CLRF   xD1
09EB6:  CLRF   xD2
09EB8:  CLRF   xD3
09EBA:  CLRF   xD4
09EBC:  CLRF   xD5
09EBE:  CLRF   xD6
09EC0:  CLRF   xD7
09EC2:  CLRF   xD8
09EC4:  CLRF   xD9
09EC6:  CLRF   xDA
09EC8:  CLRF   xDB
09ECA:  CLRF   xDC
09ECC:  CLRF   xDD
09ECE:  CLRF   xDE
09ED0:  CLRF   xDF
09ED2:  CLRF   xE0
09ED4:  CLRF   xE1
09ED6:  CLRF   xE2
09ED8:  CLRF   xE3
09EDA:  CLRF   xE4
09EDC:  CLRF   xE5
09EDE:  CLRF   xE6
09EE0:  CLRF   xE7
09EE2:  CLRF   xE8
09EE4:  CLRF   xE9
09EE6:  CLRF   xEA
09EE8:  CLRF   xEB
09EEA:  CLRF   xEC
09EEC:  CLRF   xED
09EEE:  CLRF   xEE
09EF0:  CLRF   xEF
09EF2:  CLRF   xF0
09EF4:  CLRF   xF1
09EF6:  CLRF   xF2
09EF8:  CLRF   xF3
09EFA:  CLRF   xF4
09EFC:  CLRF   xF5
09EFE:  CLRF   xF6
09F00:  CLRF   xF7
09F02:  CLRF   xF8
09F04:  CLRF   xF9
09F06:  CLRF   xFA
09F08:  CLRF   xFB
09F0A:  CLRF   xFC
09F0C:  CLRF   xFD
09F0E:  CLRF   xFE
09F10:  CLRF   xFF
09F12:  MOVLB  3
09F14:  CLRF   x00
09F16:  CLRF   x01
09F18:  CLRF   x02
09F1A:  CLRF   x03
09F1C:  CLRF   x04
09F1E:  CLRF   x05
09F20:  CLRF   x06
09F22:  CLRF   x07
09F24:  CLRF   x08
09F26:  CLRF   x09
09F28:  CLRF   x0A
09F2A:  CLRF   x0B
09F2C:  CLRF   x0C
09F2E:  CLRF   x0D
09F30:  CLRF   x0E
09F32:  CLRF   x0F
09F34:  CLRF   x10
09F36:  CLRF   x11
09F38:  CLRF   x12
09F3A:  CLRF   x13
09F3C:  CLRF   x14
09F3E:  CLRF   x15
09F40:  CLRF   x16
09F42:  CLRF   x17
09F44:  CLRF   x18
09F46:  CLRF   x19
09F48:  CLRF   x1A
09F4A:  CLRF   x1B
09F4C:  CLRF   x1C
09F4E:  CLRF   x1D
09F50:  CLRF   x1E
09F52:  CLRF   x1F
09F54:  CLRF   x20
09F56:  CLRF   x21
09F58:  CLRF   x22
09F5A:  CLRF   x23
09F5C:  CLRF   x24
09F5E:  CLRF   x25
09F60:  CLRF   x26
09F62:  CLRF   x27
09F64:  CLRF   x28
09F66:  CLRF   x29
09F68:  CLRF   x2A
09F6A:  CLRF   x2B
09F6C:  CLRF   x2C
09F6E:  CLRF   x2D
09F70:  CLRF   x2E
09F72:  CLRF   x2F
09F74:  CLRF   x30
09F76:  CLRF   x31
09F78:  CLRF   x32
09F7A:  CLRF   x33
09F7C:  CLRF   x34
09F7E:  CLRF   x35
09F80:  CLRF   x36
09F82:  CLRF   x37
09F84:  CLRF   x38
09F86:  CLRF   x39
09F88:  CLRF   x3A
09F8A:  CLRF   x3B
09F8C:  CLRF   x3C
09F8E:  CLRF   x3D
09F90:  CLRF   x3E
09F92:  CLRF   x3F
09F94:  CLRF   x40
09F96:  CLRF   x41
09F98:  CLRF   x42
09F9A:  CLRF   x43
09F9C:  CLRF   x44
09F9E:  CLRF   x45
09FA0:  CLRF   x46
09FA2:  CLRF   x47
09FA4:  CLRF   x48
09FA6:  CLRF   x49
09FA8:  CLRF   x4A
09FAA:  CLRF   x4B
09FAC:  CLRF   x4C
09FAE:  CLRF   x4D
09FB0:  CLRF   x4E
09FB2:  CLRF   x4F
09FB4:  CLRF   x50
09FB6:  CLRF   x51
09FB8:  CLRF   x52
09FBA:  CLRF   x53
09FBC:  CLRF   x54
09FBE:  CLRF   x55
09FC0:  CLRF   x56
09FC2:  CLRF   x57
09FC4:  CLRF   x58
09FC6:  CLRF   x59
09FC8:  CLRF   x5A
09FCA:  CLRF   x5B
09FCC:  CLRF   x5C
09FCE:  CLRF   x5D
09FD0:  CLRF   x5E
09FD2:  CLRF   x5F
09FD4:  CLRF   x60
09FD6:  CLRF   x61
09FD8:  CLRF   x62
09FDA:  CLRF   x63
09FDC:  CLRF   x64
09FDE:  CLRF   x65
09FE0:  CLRF   x66
09FE2:  CLRF   x67
09FE4:  CLRF   x68
09FE6:  CLRF   x69
09FE8:  CLRF   x6A
09FEA:  CLRF   x6B
09FEC:  CLRF   x6C
09FEE:  CLRF   x6D
09FF0:  CLRF   x6E
09FF2:  CLRF   x6F
09FF4:  CLRF   x70
09FF6:  CLRF   x71
09FF8:  CLRF   x72
09FFA:  CLRF   x73
09FFC:  CLRF   x74
09FFE:  CLRF   x75
0A000:  CLRF   x76
0A002:  CLRF   x77
0A004:  CLRF   x78
0A006:  CLRF   x79
0A008:  CLRF   x7A
0A00A:  CLRF   x7B
0A00C:  CLRF   x7C
0A00E:  CLRF   x7D
0A010:  CLRF   x7E
0A012:  CLRF   x7F
0A014:  CLRF   x80
0A016:  CLRF   x81
0A018:  CLRF   x82
0A01A:  CLRF   x83
0A01C:  CLRF   x84
0A01E:  CLRF   x85
0A020:  CLRF   x86
0A022:  CLRF   x87
0A024:  CLRF   x88
0A026:  CLRF   x89
0A028:  CLRF   x8A
0A02A:  CLRF   x8B
0A02C:  CLRF   x8C
0A02E:  CLRF   x8D
0A030:  CLRF   x8E
0A032:  CLRF   x8F
0A034:  CLRF   x90
0A036:  CLRF   x91
0A038:  CLRF   x92
0A03A:  CLRF   x93
0A03C:  CLRF   x94
0A03E:  CLRF   x95
0A040:  CLRF   x96
0A042:  CLRF   x97
0A044:  CLRF   x98
0A046:  CLRF   x99
0A048:  CLRF   x9A
0A04A:  CLRF   x9B
0A04C:  CLRF   x9C
0A04E:  CLRF   x9D
0A050:  CLRF   x9E
0A052:  CLRF   x9F
0A054:  CLRF   xA0
0A056:  CLRF   xA1
0A058:  CLRF   xA2
0A05A:  CLRF   xA3
0A05C:  CLRF   xA4
0A05E:  CLRF   xA5
0A060:  CLRF   xA6
0A062:  CLRF   xA7
0A064:  CLRF   xA8
0A066:  CLRF   xA9
0A068:  CLRF   xAA
0A06A:  CLRF   xAB
0A06C:  CLRF   xAC
0A06E:  CLRF   xAD
0A070:  CLRF   xAE
0A072:  CLRF   xAF
0A074:  CLRF   xB0
0A076:  CLRF   xB1
0A078:  CLRF   xB2
0A07A:  CLRF   xB3
0A07C:  CLRF   xB4
0A07E:  CLRF   xB5
0A080:  CLRF   xB6
0A082:  CLRF   xB7
0A084:  CLRF   xB8
0A086:  CLRF   xB9
0A088:  CLRF   xBA
0A08A:  CLRF   xBB
0A08C:  CLRF   xBC
0A08E:  CLRF   xBD
0A090:  CLRF   xBE
0A092:  CLRF   xBF
0A094:  CLRF   xC0
0A096:  CLRF   xC1
0A098:  CLRF   xC2
0A09A:  CLRF   xC3
0A09C:  CLRF   xC4
0A09E:  CLRF   xC5
0A0A0:  CLRF   xC6
0A0A2:  CLRF   xC7
0A0A4:  CLRF   xC8
0A0A6:  CLRF   xC9
0A0A8:  CLRF   xCA
0A0AA:  CLRF   xCB
0A0AC:  CLRF   xCC
0A0AE:  CLRF   xCD
0A0B0:  CLRF   xCE
0A0B2:  CLRF   xCF
0A0B4:  CLRF   xD0
0A0B6:  CLRF   xD1
0A0B8:  CLRF   xD2
0A0BA:  CLRF   xD3
0A0BC:  CLRF   xD4
0A0BE:  CLRF   xD5
0A0C0:  CLRF   xD6
0A0C2:  CLRF   xD7
0A0C4:  CLRF   xD8
0A0C6:  CLRF   xD9
0A0C8:  CLRF   xDA
0A0CA:  CLRF   xDB
0A0CC:  CLRF   xDC
0A0CE:  CLRF   xDD
0A0D0:  CLRF   xDE
0A0D2:  CLRF   xDF
0A0D4:  CLRF   xE0
0A0D6:  CLRF   xE1
0A0D8:  CLRF   xE2
0A0DA:  CLRF   xE3
0A0DC:  CLRF   xE4
0A0DE:  CLRF   xE5
0A0E0:  CLRF   xE6
0A0E2:  CLRF   xE7
0A0E4:  CLRF   xE8
0A0E6:  CLRF   xE9
0A0E8:  CLRF   xEA
0A0EA:  CLRF   xEB
0A0EC:  CLRF   xEC
0A0EE:  CLRF   xED
0A0F0:  CLRF   xEE
0A0F2:  CLRF   xEF
0A0F4:  CLRF   xF0
0A0F6:  CLRF   xF1
0A0F8:  CLRF   xF2
0A0FA:  CLRF   xF3
0A0FC:  CLRF   xF4
0A0FE:  CLRF   xF5
0A100:  CLRF   xF6
0A102:  CLRF   xF7
0A104:  CLRF   xF8
0A106:  CLRF   xF9
0A108:  CLRF   xFA
0A10A:  CLRF   xFB
0A10C:  CLRF   xFC
0A10E:  CLRF   xFD
0A110:  CLRF   xFE
0A112:  CLRF   xFF
0A114:  MOVLB  4
0A116:  CLRF   x00
0A118:  CLRF   x01
0A11A:  CLRF   x02
0A11C:  CLRF   x03
0A11E:  CLRF   x04
0A120:  CLRF   x05
0A122:  CLRF   x06
0A124:  CLRF   x07
0A126:  CLRF   x08
0A128:  CLRF   x09
0A12A:  CLRF   x0A
0A12C:  CLRF   x0B
0A12E:  CLRF   x0C
0A130:  CLRF   x0D
0A132:  CLRF   x0E
0A134:  CLRF   x0F
0A136:  CLRF   x10
0A138:  CLRF   x11
0A13A:  CLRF   x12
0A13C:  CLRF   x13
0A13E:  CLRF   x14
0A140:  CLRF   x15
0A142:  CLRF   x16
0A144:  CLRF   x17
0A146:  CLRF   x18
0A148:  CLRF   x19
0A14A:  CLRF   x1A
0A14C:  CLRF   x1B
0A14E:  CLRF   x1C
0A150:  CLRF   x1D
0A152:  CLRF   x1E
0A154:  CLRF   x1F
0A156:  CLRF   x20
0A158:  CLRF   x21
0A15A:  CLRF   x22
0A15C:  CLRF   x23
0A15E:  CLRF   x24
0A160:  CLRF   x25
0A162:  CLRF   x26
0A164:  CLRF   x27
0A166:  CLRF   x28
0A168:  CLRF   x29
0A16A:  CLRF   x2A
0A16C:  CLRF   x2B
0A16E:  CLRF   x2C
0A170:  CLRF   x2D
0A172:  CLRF   x2E
0A174:  CLRF   x2F
0A176:  CLRF   x30
0A178:  CLRF   x31
0A17A:  CLRF   x32
0A17C:  CLRF   x33
0A17E:  CLRF   x34
0A180:  CLRF   x35
0A182:  CLRF   x36
0A184:  CLRF   x37
0A186:  CLRF   x38
0A188:  CLRF   x39
0A18A:  CLRF   x3A
0A18C:  CLRF   x3B
0A18E:  CLRF   x3C
0A190:  CLRF   x3D
0A192:  CLRF   x3E
0A194:  CLRF   x3F
0A196:  CLRF   x40
0A198:  CLRF   x41
0A19A:  CLRF   x42
0A19C:  CLRF   x43
0A19E:  CLRF   x44
0A1A0:  CLRF   x45
0A1A2:  CLRF   x46
0A1A4:  CLRF   x47
0A1A6:  CLRF   x48
0A1A8:  CLRF   x49
0A1AA:  CLRF   x4A
0A1AC:  CLRF   x4B
0A1AE:  CLRF   x4C
0A1B0:  CLRF   x4D
0A1B2:  CLRF   x4E
0A1B4:  CLRF   x4F
0A1B6:  CLRF   x50
0A1B8:  CLRF   x51
0A1BA:  CLRF   x52
0A1BC:  CLRF   x53
0A1BE:  CLRF   x54
0A1C0:  CLRF   x55
0A1C2:  CLRF   x56
0A1C4:  CLRF   x57
0A1C6:  CLRF   x58
0A1C8:  CLRF   x59
0A1CA:  CLRF   x5A
0A1CC:  CLRF   x5B
0A1CE:  CLRF   x5C
0A1D0:  CLRF   x5D
0A1D2:  CLRF   x5E
0A1D4:  CLRF   x5F
0A1D6:  CLRF   x60
0A1D8:  CLRF   x61
0A1DA:  CLRF   x62
0A1DC:  CLRF   x63
0A1DE:  CLRF   x64
0A1E0:  CLRF   x65
0A1E2:  CLRF   x66
0A1E4:  CLRF   x67
0A1E6:  CLRF   x68
0A1E8:  CLRF   x69
0A1EA:  CLRF   x6A
0A1EC:  CLRF   x6B
0A1EE:  CLRF   x6C
0A1F0:  CLRF   x6D
0A1F2:  CLRF   x6E
0A1F4:  CLRF   x6F
0A1F6:  CLRF   x70
0A1F8:  CLRF   x71
0A1FA:  CLRF   x72
0A1FC:  CLRF   x73
0A1FE:  CLRF   x74
0A200:  CLRF   x75
0A202:  CLRF   x76
0A204:  CLRF   x77
0A206:  CLRF   x78
0A208:  CLRF   x79
0A20A:  CLRF   x7A
0A20C:  CLRF   x7B
0A20E:  CLRF   x7C
0A210:  CLRF   x7D
0A212:  CLRF   x7E
0A214:  CLRF   x7F
0A216:  CLRF   x80
0A218:  CLRF   x81
0A21A:  CLRF   x82
0A21C:  CLRF   x83
0A21E:  CLRF   x84
0A220:  CLRF   x85
0A222:  CLRF   x86
0A224:  CLRF   x87
0A226:  CLRF   x88
0A228:  CLRF   x89
0A22A:  CLRF   x8A
0A22C:  CLRF   x8B
0A22E:  CLRF   x8C
0A230:  CLRF   x8D
0A232:  CLRF   x8E
0A234:  CLRF   x8F
0A236:  CLRF   x90
0A238:  CLRF   x91
0A23A:  CLRF   x92
0A23C:  CLRF   x93
0A23E:  CLRF   x94
0A240:  CLRF   x95
0A242:  CLRF   x96
0A244:  CLRF   x97
0A246:  CLRF   x98
0A248:  CLRF   x99
0A24A:  CLRF   x9A
0A24C:  CLRF   x9B
0A24E:  CLRF   x9C
0A250:  CLRF   x9D
0A252:  CLRF   x9E
0A254:  CLRF   x9F
0A256:  CLRF   xA0
0A258:  CLRF   xA1
0A25A:  CLRF   xA2
0A25C:  CLRF   xA3
0A25E:  CLRF   xA4
0A260:  CLRF   xA5
0A262:  CLRF   xA6
0A264:  CLRF   xA7
0A266:  CLRF   xA8
0A268:  CLRF   xA9
0A26A:  CLRF   xAA
0A26C:  CLRF   xAB
0A26E:  CLRF   xAC
0A270:  CLRF   xAD
0A272:  CLRF   xAE
0A274:  CLRF   xAF
0A276:  CLRF   xB0
0A278:  CLRF   xB1
0A27A:  CLRF   xB2
0A27C:  CLRF   xB3
0A27E:  CLRF   xB4
0A280:  CLRF   xB5
0A282:  CLRF   xB6
0A284:  CLRF   xB7
0A286:  CLRF   xB8
0A288:  CLRF   xB9
0A28A:  CLRF   xBA
0A28C:  CLRF   xBB
0A28E:  CLRF   xBC
0A290:  CLRF   xBD
0A292:  CLRF   xBE
0A294:  CLRF   xBF
0A296:  CLRF   xC0
0A298:  CLRF   xC1
0A29A:  CLRF   xC2
0A29C:  CLRF   xC3
0A29E:  CLRF   xC4
0A2A0:  CLRF   xC5
0A2A2:  CLRF   xC6
0A2A4:  CLRF   xC7
0A2A6:  CLRF   xC8
0A2A8:  CLRF   xC9
0A2AA:  CLRF   xCA
0A2AC:  CLRF   xCB
0A2AE:  CLRF   xCC
0A2B0:  CLRF   xCD
0A2B2:  CLRF   xCE
0A2B4:  CLRF   xCF
0A2B6:  CLRF   xD0
0A2B8:  CLRF   xD1
0A2BA:  CLRF   xD2
0A2BC:  CLRF   xD3
0A2BE:  CLRF   xD4
0A2C0:  CLRF   xD5
0A2C2:  CLRF   xD6
0A2C4:  CLRF   xD7
0A2C6:  CLRF   xD8
0A2C8:  CLRF   xD9
0A2CA:  CLRF   xDA
0A2CC:  CLRF   xDB
0A2CE:  CLRF   xDC
0A2D0:  CLRF   xDD
0A2D2:  CLRF   xDE
0A2D4:  CLRF   xDF
0A2D6:  CLRF   xE0
0A2D8:  CLRF   xE1
0A2DA:  CLRF   xE2
0A2DC:  CLRF   xE3
0A2DE:  CLRF   xE4
0A2E0:  CLRF   xE5
0A2E2:  CLRF   xE6
0A2E4:  CLRF   xE7
0A2E6:  CLRF   xE8
0A2E8:  CLRF   xE9
0A2EA:  CLRF   xEA
0A2EC:  CLRF   xEB
0A2EE:  CLRF   xEC
....................     sweep_config_t *port1_ptr = &port1;
0A2F0:  MOVLW  01
0A2F2:  MOVWF  xEE
0A2F4:  MOVLW  E9
0A2F6:  MOVWF  xED
....................     port1_ptr->port_num = 1;
0A2F8:  MOVF   xED,W
0A2FA:  MOVWF  FE9
0A2FC:  MOVF   xEE,W
0A2FE:  MOVWF  FEA
0A300:  MOVLW  01
0A302:  MOVWF  FEF
....................     port1_ptr->sweep_step = 0;
0A304:  MOVLW  01
0A306:  ADDWF  xED,W
0A308:  MOVWF  FE9
0A30A:  MOVLW  00
0A30C:  ADDWFC xEE,W
0A30E:  MOVWF  FEA
0A310:  CLRF   FEC
0A312:  MOVF   FED,F
0A314:  CLRF   FEF
....................     port1_ptr->active = 1;
0A316:  MOVLW  03
0A318:  ADDWF  xED,W
0A31A:  MOVWF  FE9
0A31C:  MOVLW  03
0A31E:  ADDWFC xEE,W
0A320:  MOVWF  FEA
0A322:  BSF    FEF.0
.................... 
....................     fprintf(PC,"PORT1, %u\r\n", port1_ptr->port_num);
0A324:  MOVF   xED,W
0A326:  MOVWF  FE9
0A328:  MOVF   xEE,W
0A32A:  MOVWF  FEA
0A32C:  MOVFF  FEF,809
0A330:  MOVLW  88
0A332:  MOVWF  FF6
0A334:  MOVLW  06
0A336:  MOVWF  FF7
0A338:  MOVLW  00
0A33A:  MOVWF  FF8
0A33C:  MOVLW  07
0A33E:  MOVLB  A
0A340:  MOVWF  x4E
0A342:  MOVLB  0
0A344:  CALL   2334
0A348:  MOVFF  809,A4E
0A34C:  MOVLW  1B
0A34E:  MOVLB  A
0A350:  MOVWF  x4F
0A352:  MOVLB  0
0A354:  CALL   9252
0A358:  MOVLW  0D
0A35A:  BTFSS  FA6.6
0A35C:  GOTO   A35A
0A360:  MOVLB  E
0A362:  MOVWF  xF9
0A364:  MOVLW  0A
0A366:  MOVLB  0
0A368:  BTFSS  FA6.6
0A36A:  GOTO   A368
0A36E:  MOVLB  E
0A370:  MOVWF  xF9
.................... 
....................     // Init Port2
....................     sweep_config_t port2 = {0};
0A372:  MOVLB  4
0A374:  CLRF   xEF
0A376:  CLRF   xF0
0A378:  CLRF   xF1
0A37A:  CLRF   xF2
0A37C:  CLRF   xF3
0A37E:  CLRF   xF4
0A380:  CLRF   xF5
0A382:  CLRF   xF6
0A384:  CLRF   xF7
0A386:  CLRF   xF8
0A388:  CLRF   xF9
0A38A:  CLRF   xFA
0A38C:  CLRF   xFB
0A38E:  CLRF   xFC
0A390:  CLRF   xFD
0A392:  CLRF   xFE
0A394:  CLRF   xFF
0A396:  MOVLB  5
0A398:  CLRF   x00
0A39A:  CLRF   x01
0A39C:  CLRF   x02
0A39E:  CLRF   x03
0A3A0:  CLRF   x04
0A3A2:  CLRF   x05
0A3A4:  CLRF   x06
0A3A6:  CLRF   x07
0A3A8:  CLRF   x08
0A3AA:  CLRF   x09
0A3AC:  CLRF   x0A
0A3AE:  CLRF   x0B
0A3B0:  CLRF   x0C
0A3B2:  CLRF   x0D
0A3B4:  CLRF   x0E
0A3B6:  CLRF   x0F
0A3B8:  CLRF   x10
0A3BA:  CLRF   x11
0A3BC:  CLRF   x12
0A3BE:  CLRF   x13
0A3C0:  CLRF   x14
0A3C2:  CLRF   x15
0A3C4:  CLRF   x16
0A3C6:  CLRF   x17
0A3C8:  CLRF   x18
0A3CA:  CLRF   x19
0A3CC:  CLRF   x1A
0A3CE:  CLRF   x1B
0A3D0:  CLRF   x1C
0A3D2:  CLRF   x1D
0A3D4:  CLRF   x1E
0A3D6:  CLRF   x1F
0A3D8:  CLRF   x20
0A3DA:  CLRF   x21
0A3DC:  CLRF   x22
0A3DE:  CLRF   x23
0A3E0:  CLRF   x24
0A3E2:  CLRF   x25
0A3E4:  CLRF   x26
0A3E6:  CLRF   x27
0A3E8:  CLRF   x28
0A3EA:  CLRF   x29
0A3EC:  CLRF   x2A
0A3EE:  CLRF   x2B
0A3F0:  CLRF   x2C
0A3F2:  CLRF   x2D
0A3F4:  CLRF   x2E
0A3F6:  CLRF   x2F
0A3F8:  CLRF   x30
0A3FA:  CLRF   x31
0A3FC:  CLRF   x32
0A3FE:  CLRF   x33
0A400:  CLRF   x34
0A402:  CLRF   x35
0A404:  CLRF   x36
0A406:  CLRF   x37
0A408:  CLRF   x38
0A40A:  CLRF   x39
0A40C:  CLRF   x3A
0A40E:  CLRF   x3B
0A410:  CLRF   x3C
0A412:  CLRF   x3D
0A414:  CLRF   x3E
0A416:  CLRF   x3F
0A418:  CLRF   x40
0A41A:  CLRF   x41
0A41C:  CLRF   x42
0A41E:  CLRF   x43
0A420:  CLRF   x44
0A422:  CLRF   x45
0A424:  CLRF   x46
0A426:  CLRF   x47
0A428:  CLRF   x48
0A42A:  CLRF   x49
0A42C:  CLRF   x4A
0A42E:  CLRF   x4B
0A430:  CLRF   x4C
0A432:  CLRF   x4D
0A434:  CLRF   x4E
0A436:  CLRF   x4F
0A438:  CLRF   x50
0A43A:  CLRF   x51
0A43C:  CLRF   x52
0A43E:  CLRF   x53
0A440:  CLRF   x54
0A442:  CLRF   x55
0A444:  CLRF   x56
0A446:  CLRF   x57
0A448:  CLRF   x58
0A44A:  CLRF   x59
0A44C:  CLRF   x5A
0A44E:  CLRF   x5B
0A450:  CLRF   x5C
0A452:  CLRF   x5D
0A454:  CLRF   x5E
0A456:  CLRF   x5F
0A458:  CLRF   x60
0A45A:  CLRF   x61
0A45C:  CLRF   x62
0A45E:  CLRF   x63
0A460:  CLRF   x64
0A462:  CLRF   x65
0A464:  CLRF   x66
0A466:  CLRF   x67
0A468:  CLRF   x68
0A46A:  CLRF   x69
0A46C:  CLRF   x6A
0A46E:  CLRF   x6B
0A470:  CLRF   x6C
0A472:  CLRF   x6D
0A474:  CLRF   x6E
0A476:  CLRF   x6F
0A478:  CLRF   x70
0A47A:  CLRF   x71
0A47C:  CLRF   x72
0A47E:  CLRF   x73
0A480:  CLRF   x74
0A482:  CLRF   x75
0A484:  CLRF   x76
0A486:  CLRF   x77
0A488:  CLRF   x78
0A48A:  CLRF   x79
0A48C:  CLRF   x7A
0A48E:  CLRF   x7B
0A490:  CLRF   x7C
0A492:  CLRF   x7D
0A494:  CLRF   x7E
0A496:  CLRF   x7F
0A498:  CLRF   x80
0A49A:  CLRF   x81
0A49C:  CLRF   x82
0A49E:  CLRF   x83
0A4A0:  CLRF   x84
0A4A2:  CLRF   x85
0A4A4:  CLRF   x86
0A4A6:  CLRF   x87
0A4A8:  CLRF   x88
0A4AA:  CLRF   x89
0A4AC:  CLRF   x8A
0A4AE:  CLRF   x8B
0A4B0:  CLRF   x8C
0A4B2:  CLRF   x8D
0A4B4:  CLRF   x8E
0A4B6:  CLRF   x8F
0A4B8:  CLRF   x90
0A4BA:  CLRF   x91
0A4BC:  CLRF   x92
0A4BE:  CLRF   x93
0A4C0:  CLRF   x94
0A4C2:  CLRF   x95
0A4C4:  CLRF   x96
0A4C6:  CLRF   x97
0A4C8:  CLRF   x98
0A4CA:  CLRF   x99
0A4CC:  CLRF   x9A
0A4CE:  CLRF   x9B
0A4D0:  CLRF   x9C
0A4D2:  CLRF   x9D
0A4D4:  CLRF   x9E
0A4D6:  CLRF   x9F
0A4D8:  CLRF   xA0
0A4DA:  CLRF   xA1
0A4DC:  CLRF   xA2
0A4DE:  CLRF   xA3
0A4E0:  CLRF   xA4
0A4E2:  CLRF   xA5
0A4E4:  CLRF   xA6
0A4E6:  CLRF   xA7
0A4E8:  CLRF   xA8
0A4EA:  CLRF   xA9
0A4EC:  CLRF   xAA
0A4EE:  CLRF   xAB
0A4F0:  CLRF   xAC
0A4F2:  CLRF   xAD
0A4F4:  CLRF   xAE
0A4F6:  CLRF   xAF
0A4F8:  CLRF   xB0
0A4FA:  CLRF   xB1
0A4FC:  CLRF   xB2
0A4FE:  CLRF   xB3
0A500:  CLRF   xB4
0A502:  CLRF   xB5
0A504:  CLRF   xB6
0A506:  CLRF   xB7
0A508:  CLRF   xB8
0A50A:  CLRF   xB9
0A50C:  CLRF   xBA
0A50E:  CLRF   xBB
0A510:  CLRF   xBC
0A512:  CLRF   xBD
0A514:  CLRF   xBE
0A516:  CLRF   xBF
0A518:  CLRF   xC0
0A51A:  CLRF   xC1
0A51C:  CLRF   xC2
0A51E:  CLRF   xC3
0A520:  CLRF   xC4
0A522:  CLRF   xC5
0A524:  CLRF   xC6
0A526:  CLRF   xC7
0A528:  CLRF   xC8
0A52A:  CLRF   xC9
0A52C:  CLRF   xCA
0A52E:  CLRF   xCB
0A530:  CLRF   xCC
0A532:  CLRF   xCD
0A534:  CLRF   xCE
0A536:  CLRF   xCF
0A538:  CLRF   xD0
0A53A:  CLRF   xD1
0A53C:  CLRF   xD2
0A53E:  CLRF   xD3
0A540:  CLRF   xD4
0A542:  CLRF   xD5
0A544:  CLRF   xD6
0A546:  CLRF   xD7
0A548:  CLRF   xD8
0A54A:  CLRF   xD9
0A54C:  CLRF   xDA
0A54E:  CLRF   xDB
0A550:  CLRF   xDC
0A552:  CLRF   xDD
0A554:  CLRF   xDE
0A556:  CLRF   xDF
0A558:  CLRF   xE0
0A55A:  CLRF   xE1
0A55C:  CLRF   xE2
0A55E:  CLRF   xE3
0A560:  CLRF   xE4
0A562:  CLRF   xE5
0A564:  CLRF   xE6
0A566:  CLRF   xE7
0A568:  CLRF   xE8
0A56A:  CLRF   xE9
0A56C:  CLRF   xEA
0A56E:  CLRF   xEB
0A570:  CLRF   xEC
0A572:  CLRF   xED
0A574:  CLRF   xEE
0A576:  CLRF   xEF
0A578:  CLRF   xF0
0A57A:  CLRF   xF1
0A57C:  CLRF   xF2
0A57E:  CLRF   xF3
0A580:  CLRF   xF4
0A582:  CLRF   xF5
0A584:  CLRF   xF6
0A586:  CLRF   xF7
0A588:  CLRF   xF8
0A58A:  CLRF   xF9
0A58C:  CLRF   xFA
0A58E:  CLRF   xFB
0A590:  CLRF   xFC
0A592:  CLRF   xFD
0A594:  CLRF   xFE
0A596:  CLRF   xFF
0A598:  MOVLB  6
0A59A:  CLRF   x00
0A59C:  CLRF   x01
0A59E:  CLRF   x02
0A5A0:  CLRF   x03
0A5A2:  CLRF   x04
0A5A4:  CLRF   x05
0A5A6:  CLRF   x06
0A5A8:  CLRF   x07
0A5AA:  CLRF   x08
0A5AC:  CLRF   x09
0A5AE:  CLRF   x0A
0A5B0:  CLRF   x0B
0A5B2:  CLRF   x0C
0A5B4:  CLRF   x0D
0A5B6:  CLRF   x0E
0A5B8:  CLRF   x0F
0A5BA:  CLRF   x10
0A5BC:  CLRF   x11
0A5BE:  CLRF   x12
0A5C0:  CLRF   x13
0A5C2:  CLRF   x14
0A5C4:  CLRF   x15
0A5C6:  CLRF   x16
0A5C8:  CLRF   x17
0A5CA:  CLRF   x18
0A5CC:  CLRF   x19
0A5CE:  CLRF   x1A
0A5D0:  CLRF   x1B
0A5D2:  CLRF   x1C
0A5D4:  CLRF   x1D
0A5D6:  CLRF   x1E
0A5D8:  CLRF   x1F
0A5DA:  CLRF   x20
0A5DC:  CLRF   x21
0A5DE:  CLRF   x22
0A5E0:  CLRF   x23
0A5E2:  CLRF   x24
0A5E4:  CLRF   x25
0A5E6:  CLRF   x26
0A5E8:  CLRF   x27
0A5EA:  CLRF   x28
0A5EC:  CLRF   x29
0A5EE:  CLRF   x2A
0A5F0:  CLRF   x2B
0A5F2:  CLRF   x2C
0A5F4:  CLRF   x2D
0A5F6:  CLRF   x2E
0A5F8:  CLRF   x2F
0A5FA:  CLRF   x30
0A5FC:  CLRF   x31
0A5FE:  CLRF   x32
0A600:  CLRF   x33
0A602:  CLRF   x34
0A604:  CLRF   x35
0A606:  CLRF   x36
0A608:  CLRF   x37
0A60A:  CLRF   x38
0A60C:  CLRF   x39
0A60E:  CLRF   x3A
0A610:  CLRF   x3B
0A612:  CLRF   x3C
0A614:  CLRF   x3D
0A616:  CLRF   x3E
0A618:  CLRF   x3F
0A61A:  CLRF   x40
0A61C:  CLRF   x41
0A61E:  CLRF   x42
0A620:  CLRF   x43
0A622:  CLRF   x44
0A624:  CLRF   x45
0A626:  CLRF   x46
0A628:  CLRF   x47
0A62A:  CLRF   x48
0A62C:  CLRF   x49
0A62E:  CLRF   x4A
0A630:  CLRF   x4B
0A632:  CLRF   x4C
0A634:  CLRF   x4D
0A636:  CLRF   x4E
0A638:  CLRF   x4F
0A63A:  CLRF   x50
0A63C:  CLRF   x51
0A63E:  CLRF   x52
0A640:  CLRF   x53
0A642:  CLRF   x54
0A644:  CLRF   x55
0A646:  CLRF   x56
0A648:  CLRF   x57
0A64A:  CLRF   x58
0A64C:  CLRF   x59
0A64E:  CLRF   x5A
0A650:  CLRF   x5B
0A652:  CLRF   x5C
0A654:  CLRF   x5D
0A656:  CLRF   x5E
0A658:  CLRF   x5F
0A65A:  CLRF   x60
0A65C:  CLRF   x61
0A65E:  CLRF   x62
0A660:  CLRF   x63
0A662:  CLRF   x64
0A664:  CLRF   x65
0A666:  CLRF   x66
0A668:  CLRF   x67
0A66A:  CLRF   x68
0A66C:  CLRF   x69
0A66E:  CLRF   x6A
0A670:  CLRF   x6B
0A672:  CLRF   x6C
0A674:  CLRF   x6D
0A676:  CLRF   x6E
0A678:  CLRF   x6F
0A67A:  CLRF   x70
0A67C:  CLRF   x71
0A67E:  CLRF   x72
0A680:  CLRF   x73
0A682:  CLRF   x74
0A684:  CLRF   x75
0A686:  CLRF   x76
0A688:  CLRF   x77
0A68A:  CLRF   x78
0A68C:  CLRF   x79
0A68E:  CLRF   x7A
0A690:  CLRF   x7B
0A692:  CLRF   x7C
0A694:  CLRF   x7D
0A696:  CLRF   x7E
0A698:  CLRF   x7F
0A69A:  CLRF   x80
0A69C:  CLRF   x81
0A69E:  CLRF   x82
0A6A0:  CLRF   x83
0A6A2:  CLRF   x84
0A6A4:  CLRF   x85
0A6A6:  CLRF   x86
0A6A8:  CLRF   x87
0A6AA:  CLRF   x88
0A6AC:  CLRF   x89
0A6AE:  CLRF   x8A
0A6B0:  CLRF   x8B
0A6B2:  CLRF   x8C
0A6B4:  CLRF   x8D
0A6B6:  CLRF   x8E
0A6B8:  CLRF   x8F
0A6BA:  CLRF   x90
0A6BC:  CLRF   x91
0A6BE:  CLRF   x92
0A6C0:  CLRF   x93
0A6C2:  CLRF   x94
0A6C4:  CLRF   x95
0A6C6:  CLRF   x96
0A6C8:  CLRF   x97
0A6CA:  CLRF   x98
0A6CC:  CLRF   x99
0A6CE:  CLRF   x9A
0A6D0:  CLRF   x9B
0A6D2:  CLRF   x9C
0A6D4:  CLRF   x9D
0A6D6:  CLRF   x9E
0A6D8:  CLRF   x9F
0A6DA:  CLRF   xA0
0A6DC:  CLRF   xA1
0A6DE:  CLRF   xA2
0A6E0:  CLRF   xA3
0A6E2:  CLRF   xA4
0A6E4:  CLRF   xA5
0A6E6:  CLRF   xA6
0A6E8:  CLRF   xA7
0A6EA:  CLRF   xA8
0A6EC:  CLRF   xA9
0A6EE:  CLRF   xAA
0A6F0:  CLRF   xAB
0A6F2:  CLRF   xAC
0A6F4:  CLRF   xAD
0A6F6:  CLRF   xAE
0A6F8:  CLRF   xAF
0A6FA:  CLRF   xB0
0A6FC:  CLRF   xB1
0A6FE:  CLRF   xB2
0A700:  CLRF   xB3
0A702:  CLRF   xB4
0A704:  CLRF   xB5
0A706:  CLRF   xB6
0A708:  CLRF   xB7
0A70A:  CLRF   xB8
0A70C:  CLRF   xB9
0A70E:  CLRF   xBA
0A710:  CLRF   xBB
0A712:  CLRF   xBC
0A714:  CLRF   xBD
0A716:  CLRF   xBE
0A718:  CLRF   xBF
0A71A:  CLRF   xC0
0A71C:  CLRF   xC1
0A71E:  CLRF   xC2
0A720:  CLRF   xC3
0A722:  CLRF   xC4
0A724:  CLRF   xC5
0A726:  CLRF   xC6
0A728:  CLRF   xC7
0A72A:  CLRF   xC8
0A72C:  CLRF   xC9
0A72E:  CLRF   xCA
0A730:  CLRF   xCB
0A732:  CLRF   xCC
0A734:  CLRF   xCD
0A736:  CLRF   xCE
0A738:  CLRF   xCF
0A73A:  CLRF   xD0
0A73C:  CLRF   xD1
0A73E:  CLRF   xD2
0A740:  CLRF   xD3
0A742:  CLRF   xD4
0A744:  CLRF   xD5
0A746:  CLRF   xD6
0A748:  CLRF   xD7
0A74A:  CLRF   xD8
0A74C:  CLRF   xD9
0A74E:  CLRF   xDA
0A750:  CLRF   xDB
0A752:  CLRF   xDC
0A754:  CLRF   xDD
0A756:  CLRF   xDE
0A758:  CLRF   xDF
0A75A:  CLRF   xE0
0A75C:  CLRF   xE1
0A75E:  CLRF   xE2
0A760:  CLRF   xE3
0A762:  CLRF   xE4
0A764:  CLRF   xE5
0A766:  CLRF   xE6
0A768:  CLRF   xE7
0A76A:  CLRF   xE8
0A76C:  CLRF   xE9
0A76E:  CLRF   xEA
0A770:  CLRF   xEB
0A772:  CLRF   xEC
0A774:  CLRF   xED
0A776:  CLRF   xEE
0A778:  CLRF   xEF
0A77A:  CLRF   xF0
0A77C:  CLRF   xF1
0A77E:  CLRF   xF2
0A780:  CLRF   xF3
0A782:  CLRF   xF4
0A784:  CLRF   xF5
0A786:  CLRF   xF6
0A788:  CLRF   xF7
0A78A:  CLRF   xF8
0A78C:  CLRF   xF9
0A78E:  CLRF   xFA
0A790:  CLRF   xFB
0A792:  CLRF   xFC
0A794:  CLRF   xFD
0A796:  CLRF   xFE
0A798:  CLRF   xFF
0A79A:  MOVLB  7
0A79C:  CLRF   x00
0A79E:  CLRF   x01
0A7A0:  CLRF   x02
0A7A2:  CLRF   x03
0A7A4:  CLRF   x04
0A7A6:  CLRF   x05
0A7A8:  CLRF   x06
0A7AA:  CLRF   x07
0A7AC:  CLRF   x08
0A7AE:  CLRF   x09
0A7B0:  CLRF   x0A
0A7B2:  CLRF   x0B
0A7B4:  CLRF   x0C
0A7B6:  CLRF   x0D
0A7B8:  CLRF   x0E
0A7BA:  CLRF   x0F
0A7BC:  CLRF   x10
0A7BE:  CLRF   x11
0A7C0:  CLRF   x12
0A7C2:  CLRF   x13
0A7C4:  CLRF   x14
0A7C6:  CLRF   x15
0A7C8:  CLRF   x16
0A7CA:  CLRF   x17
0A7CC:  CLRF   x18
0A7CE:  CLRF   x19
0A7D0:  CLRF   x1A
0A7D2:  CLRF   x1B
0A7D4:  CLRF   x1C
0A7D6:  CLRF   x1D
0A7D8:  CLRF   x1E
0A7DA:  CLRF   x1F
0A7DC:  CLRF   x20
0A7DE:  CLRF   x21
0A7E0:  CLRF   x22
0A7E2:  CLRF   x23
0A7E4:  CLRF   x24
0A7E6:  CLRF   x25
0A7E8:  CLRF   x26
0A7EA:  CLRF   x27
0A7EC:  CLRF   x28
0A7EE:  CLRF   x29
0A7F0:  CLRF   x2A
0A7F2:  CLRF   x2B
0A7F4:  CLRF   x2C
0A7F6:  CLRF   x2D
0A7F8:  CLRF   x2E
0A7FA:  CLRF   x2F
0A7FC:  CLRF   x30
0A7FE:  CLRF   x31
0A800:  CLRF   x32
0A802:  CLRF   x33
0A804:  CLRF   x34
0A806:  CLRF   x35
0A808:  CLRF   x36
0A80A:  CLRF   x37
0A80C:  CLRF   x38
0A80E:  CLRF   x39
0A810:  CLRF   x3A
0A812:  CLRF   x3B
0A814:  CLRF   x3C
0A816:  CLRF   x3D
0A818:  CLRF   x3E
0A81A:  CLRF   x3F
0A81C:  CLRF   x40
0A81E:  CLRF   x41
0A820:  CLRF   x42
0A822:  CLRF   x43
0A824:  CLRF   x44
0A826:  CLRF   x45
0A828:  CLRF   x46
0A82A:  CLRF   x47
0A82C:  CLRF   x48
0A82E:  CLRF   x49
0A830:  CLRF   x4A
0A832:  CLRF   x4B
0A834:  CLRF   x4C
0A836:  CLRF   x4D
0A838:  CLRF   x4E
0A83A:  CLRF   x4F
0A83C:  CLRF   x50
0A83E:  CLRF   x51
0A840:  CLRF   x52
0A842:  CLRF   x53
0A844:  CLRF   x54
0A846:  CLRF   x55
0A848:  CLRF   x56
0A84A:  CLRF   x57
0A84C:  CLRF   x58
0A84E:  CLRF   x59
0A850:  CLRF   x5A
0A852:  CLRF   x5B
0A854:  CLRF   x5C
0A856:  CLRF   x5D
0A858:  CLRF   x5E
0A85A:  CLRF   x5F
0A85C:  CLRF   x60
0A85E:  CLRF   x61
0A860:  CLRF   x62
0A862:  CLRF   x63
0A864:  CLRF   x64
0A866:  CLRF   x65
0A868:  CLRF   x66
0A86A:  CLRF   x67
0A86C:  CLRF   x68
0A86E:  CLRF   x69
0A870:  CLRF   x6A
0A872:  CLRF   x6B
0A874:  CLRF   x6C
0A876:  CLRF   x6D
0A878:  CLRF   x6E
0A87A:  CLRF   x6F
0A87C:  CLRF   x70
0A87E:  CLRF   x71
0A880:  CLRF   x72
0A882:  CLRF   x73
0A884:  CLRF   x74
0A886:  CLRF   x75
0A888:  CLRF   x76
0A88A:  CLRF   x77
0A88C:  CLRF   x78
0A88E:  CLRF   x79
0A890:  CLRF   x7A
0A892:  CLRF   x7B
0A894:  CLRF   x7C
0A896:  CLRF   x7D
0A898:  CLRF   x7E
0A89A:  CLRF   x7F
0A89C:  CLRF   x80
0A89E:  CLRF   x81
0A8A0:  CLRF   x82
0A8A2:  CLRF   x83
0A8A4:  CLRF   x84
0A8A6:  CLRF   x85
0A8A8:  CLRF   x86
0A8AA:  CLRF   x87
0A8AC:  CLRF   x88
0A8AE:  CLRF   x89
0A8B0:  CLRF   x8A
0A8B2:  CLRF   x8B
0A8B4:  CLRF   x8C
0A8B6:  CLRF   x8D
0A8B8:  CLRF   x8E
0A8BA:  CLRF   x8F
0A8BC:  CLRF   x90
0A8BE:  CLRF   x91
0A8C0:  CLRF   x92
0A8C2:  CLRF   x93
0A8C4:  CLRF   x94
0A8C6:  CLRF   x95
0A8C8:  CLRF   x96
0A8CA:  CLRF   x97
0A8CC:  CLRF   x98
0A8CE:  CLRF   x99
0A8D0:  CLRF   x9A
0A8D2:  CLRF   x9B
0A8D4:  CLRF   x9C
0A8D6:  CLRF   x9D
0A8D8:  CLRF   x9E
0A8DA:  CLRF   x9F
0A8DC:  CLRF   xA0
0A8DE:  CLRF   xA1
0A8E0:  CLRF   xA2
0A8E2:  CLRF   xA3
0A8E4:  CLRF   xA4
0A8E6:  CLRF   xA5
0A8E8:  CLRF   xA6
0A8EA:  CLRF   xA7
0A8EC:  CLRF   xA8
0A8EE:  CLRF   xA9
0A8F0:  CLRF   xAA
0A8F2:  CLRF   xAB
0A8F4:  CLRF   xAC
0A8F6:  CLRF   xAD
0A8F8:  CLRF   xAE
0A8FA:  CLRF   xAF
0A8FC:  CLRF   xB0
0A8FE:  CLRF   xB1
0A900:  CLRF   xB2
0A902:  CLRF   xB3
0A904:  CLRF   xB4
0A906:  CLRF   xB5
0A908:  CLRF   xB6
0A90A:  CLRF   xB7
0A90C:  CLRF   xB8
0A90E:  CLRF   xB9
0A910:  CLRF   xBA
0A912:  CLRF   xBB
0A914:  CLRF   xBC
0A916:  CLRF   xBD
0A918:  CLRF   xBE
0A91A:  CLRF   xBF
0A91C:  CLRF   xC0
0A91E:  CLRF   xC1
0A920:  CLRF   xC2
0A922:  CLRF   xC3
0A924:  CLRF   xC4
0A926:  CLRF   xC5
0A928:  CLRF   xC6
0A92A:  CLRF   xC7
0A92C:  CLRF   xC8
0A92E:  CLRF   xC9
0A930:  CLRF   xCA
0A932:  CLRF   xCB
0A934:  CLRF   xCC
0A936:  CLRF   xCD
0A938:  CLRF   xCE
0A93A:  CLRF   xCF
0A93C:  CLRF   xD0
0A93E:  CLRF   xD1
0A940:  CLRF   xD2
0A942:  CLRF   xD3
0A944:  CLRF   xD4
0A946:  CLRF   xD5
0A948:  CLRF   xD6
0A94A:  CLRF   xD7
0A94C:  CLRF   xD8
0A94E:  CLRF   xD9
0A950:  CLRF   xDA
0A952:  CLRF   xDB
0A954:  CLRF   xDC
0A956:  CLRF   xDD
0A958:  CLRF   xDE
0A95A:  CLRF   xDF
0A95C:  CLRF   xE0
0A95E:  CLRF   xE1
0A960:  CLRF   xE2
0A962:  CLRF   xE3
0A964:  CLRF   xE4
0A966:  CLRF   xE5
0A968:  CLRF   xE6
0A96A:  CLRF   xE7
0A96C:  CLRF   xE8
0A96E:  CLRF   xE9
0A970:  CLRF   xEA
0A972:  CLRF   xEB
0A974:  CLRF   xEC
0A976:  CLRF   xED
0A978:  CLRF   xEE
0A97A:  CLRF   xEF
0A97C:  CLRF   xF0
0A97E:  CLRF   xF1
0A980:  CLRF   xF2
....................     sweep_config_t *port2_ptr = &port2;
0A982:  MOVLW  04
0A984:  MOVWF  xF4
0A986:  MOVLW  EF
0A988:  MOVWF  xF3
....................     port2_ptr->port_num = 2;
0A98A:  MOVF   xF3,W
0A98C:  MOVWF  FE9
0A98E:  MOVF   xF4,W
0A990:  MOVWF  FEA
0A992:  MOVLW  02
0A994:  MOVWF  FEF
....................     port2_ptr->sweep_step = 0;
0A996:  MOVLW  01
0A998:  ADDWF  xF3,W
0A99A:  MOVWF  FE9
0A99C:  MOVLW  00
0A99E:  ADDWFC xF4,W
0A9A0:  MOVWF  FEA
0A9A2:  CLRF   FEC
0A9A4:  MOVF   FED,F
0A9A6:  CLRF   FEF
....................     port2_ptr->active = 1;
0A9A8:  MOVLW  03
0A9AA:  ADDWF  xF3,W
0A9AC:  MOVWF  FE9
0A9AE:  MOVLW  03
0A9B0:  ADDWFC xF4,W
0A9B2:  MOVWF  FEA
0A9B4:  BSF    FEF.0
.................... 
....................     fprintf(PC,"PORT2, %u\r\n", port2_ptr->port_num);
0A9B6:  MOVF   xF3,W
0A9B8:  MOVWF  FE9
0A9BA:  MOVF   xF4,W
0A9BC:  MOVWF  FEA
0A9BE:  MOVFF  FEF,809
0A9C2:  MOVLW  94
0A9C4:  MOVWF  FF6
0A9C6:  MOVLW  06
0A9C8:  MOVWF  FF7
0A9CA:  MOVLW  00
0A9CC:  MOVWF  FF8
0A9CE:  MOVLW  07
0A9D0:  MOVLB  A
0A9D2:  MOVWF  x4E
0A9D4:  MOVLB  0
0A9D6:  CALL   2334
0A9DA:  MOVFF  809,A4E
0A9DE:  MOVLW  1B
0A9E0:  MOVLB  A
0A9E2:  MOVWF  x4F
0A9E4:  MOVLB  0
0A9E6:  CALL   9252
0A9EA:  MOVLW  0D
0A9EC:  BTFSS  FA6.6
0A9EE:  GOTO   A9EC
0A9F2:  MOVLB  E
0A9F4:  MOVWF  xF9
0A9F6:  MOVLW  0A
0A9F8:  MOVLB  0
0A9FA:  BTFSS  FA6.6
0A9FC:  GOTO   A9FA
0AA00:  MOVLB  E
0AA02:  MOVWF  xF9
....................     int16 count = 0;
0AA04:  MOVLB  7
0AA06:  CLRF   xF6
0AA08:  CLRF   xF5
....................     
....................     // Initialize DACs to 0
....................     mcp4901_1_write(1);
0AA0A:  MOVLB  9
0AA0C:  CLRF   xDD
0AA0E:  MOVLW  01
0AA10:  MOVWF  xDC
0AA12:  MOVLB  0
0AA14:  CALL   2894
....................     mcp4901_2_write(1);
0AA18:  MOVLB  9
0AA1A:  CLRF   xDD
0AA1C:  MOVLW  01
0AA1E:  MOVWF  xDC
0AA20:  MOVLB  0
0AA22:  CALL   28D2
.................... 
....................     unsigned int16 volt;
....................     unsigned int16 curr;
....................     iv_env_t measured_data = create_meas_data();
....................     iv_env_t *measured_data_ptr = &measured_data;   
0AA26:  CALL   930E
0AA2A:  MOVFF  02,03
0AA2E:  MOVF   01,W
0AA30:  MOVWF  FE1
0AA32:  MOVFF  03,FE2
0AA36:  MOVLW  07
0AA38:  MOVWF  FEA
0AA3A:  MOVLW  FB
0AA3C:  MOVWF  FE9
0AA3E:  MOVLW  0C
0AA40:  MOVWF  01
0AA42:  MOVFF  FE6,FEE
0AA46:  DECFSZ 01,F
0AA48:  GOTO   AA42
0AA4C:  MOVLW  07
0AA4E:  MOVLB  8
0AA50:  MOVWF  x08
0AA52:  MOVLW  FB
0AA54:  MOVWF  x07
0AA56:  MOVLB  0
.................... 
....................     while (port1.active || port2.active)
0AA58:  MOVLB  4
0AA5A:  BTFSS  xEC.0
0AA5C:  BRA    AA64
0AA5E:  MOVLB  0
0AA60:  GOTO   AA74
0AA64:  MOVLB  0
0AA66:  MOVLB  7
0AA68:  BTFSC  xF2.0
0AA6A:  BRA    AA72
0AA6C:  MOVLB  0
0AA6E:  GOTO   ADD4
0AA72:  MOVLB  0
....................     {
....................         mcp4901_1_write(count);
0AA74:  MOVFF  7F6,9DD
0AA78:  MOVFF  7F5,9DC
0AA7C:  CALL   2894
....................         mcp4901_2_write(count);
0AA80:  MOVFF  7F6,9DD
0AA84:  MOVFF  7F5,9DC
0AA88:  CALL   28D2
....................         delay_us(10); 
0AA8C:  MOVLW  0D
0AA8E:  MOVWF  00
0AA90:  DECFSZ 00,F
0AA92:  BRA    AA90
....................         if (port1.active) {
0AA94:  MOVLB  4
0AA96:  BTFSC  xEC.0
0AA98:  BRA    AAA0
0AA9A:  MOVLB  0
0AA9C:  GOTO   AC1C
0AAA0:  MOVLB  0
....................             volt = ad7490_read(ADC_CIGS1_AMP);
0AAA2:  MOVLW  02
0AAA4:  MOVLB  9
0AAA6:  MOVWF  xEE
0AAA8:  MOVLB  0
0AAAA:  CALL   24E4
0AAAE:  MOVFF  02,7F8
0AAB2:  MOVFF  01,7F7
....................             curr = ad7490_read(ADC_CIGS1_CURR);
0AAB6:  MOVLW  01
0AAB8:  MOVLB  9
0AABA:  MOVWF  xEE
0AABC:  MOVLB  0
0AABE:  CALL   24E4
0AAC2:  MOVFF  02,7FA
0AAC6:  MOVFF  01,7F9
....................             // ad7490_read_2port(ADC_CIGS1_AMP, ADC_CIGS1_CURR, &volt, &curr);
....................             // fprintf(PC, "%04LX,%04LX,", volt, curr);
....................             port1.data_buffer[count*3]= (volt  >> 4) & 0xFF;
0AACA:  MOVFF  7F6,A53
0AACE:  MOVFF  7F5,A52
0AAD2:  MOVLB  A
0AAD4:  CLRF   x55
0AAD6:  MOVLW  03
0AAD8:  MOVWF  x54
0AADA:  MOVLB  0
0AADC:  CALL   8260
0AAE0:  MOVFF  02,80A
0AAE4:  MOVFF  01,809
0AAE8:  MOVLW  EC
0AAEA:  MOVLB  8
0AAEC:  ADDWF  x09,W
0AAEE:  MOVWF  FE9
0AAF0:  MOVLW  01
0AAF2:  ADDWFC x0A,W
0AAF4:  MOVWF  FEA
0AAF6:  MOVLB  7
0AAF8:  RRCF   xF8,W
0AAFA:  MOVLB  8
0AAFC:  MOVWF  x0E
0AAFE:  MOVLB  7
0AB00:  RRCF   xF7,W
0AB02:  MOVLB  8
0AB04:  MOVWF  x0D
0AB06:  RRCF   x0E,F
0AB08:  RRCF   x0D,F
0AB0A:  RRCF   x0E,F
0AB0C:  RRCF   x0D,F
0AB0E:  RRCF   x0E,F
0AB10:  RRCF   x0D,F
0AB12:  MOVLW  0F
0AB14:  ANDWF  x0E,F
0AB16:  MOVF   x0D,W
0AB18:  MOVWF  00
0AB1A:  CLRF   03
0AB1C:  MOVF   00,W
0AB1E:  MOVWF  FEF
....................             port1.data_buffer[count*3+1]= ((volt & 0x0F) << 4) | ((curr >> 8) & 0x0F);
0AB20:  MOVFF  7F6,A53
0AB24:  MOVFF  7F5,A52
0AB28:  MOVLB  A
0AB2A:  CLRF   x55
0AB2C:  MOVLW  03
0AB2E:  MOVWF  x54
0AB30:  MOVLB  0
0AB32:  CALL   8260
0AB36:  MOVFF  02,80A
0AB3A:  MOVFF  01,809
0AB3E:  MOVLW  01
0AB40:  MOVLB  8
0AB42:  ADDWF  x09,F
0AB44:  MOVLW  00
0AB46:  ADDWFC x0A,F
0AB48:  MOVLW  EC
0AB4A:  ADDWF  x09,W
0AB4C:  MOVWF  FE9
0AB4E:  MOVLW  01
0AB50:  ADDWFC x0A,W
0AB52:  MOVWF  FEA
0AB54:  MOVLB  7
0AB56:  MOVF   xF7,W
0AB58:  ANDLW  0F
0AB5A:  MOVLB  8
0AB5C:  MOVWF  x0D
0AB5E:  CLRF   x0E
0AB60:  RLCF   x0D,F
0AB62:  RLCF   x0E,F
0AB64:  RLCF   x0D,F
0AB66:  RLCF   x0E,F
0AB68:  RLCF   x0D,F
0AB6A:  RLCF   x0E,F
0AB6C:  RLCF   x0D,F
0AB6E:  RLCF   x0E,F
0AB70:  MOVLW  F0
0AB72:  ANDWF  x0D,F
0AB74:  MOVFF  7FA,80F
0AB78:  CLRF   x10
0AB7A:  MOVF   x0F,W
0AB7C:  ANDLW  0F
0AB7E:  MOVWF  00
0AB80:  CLRF   03
0AB82:  MOVF   00,W
0AB84:  IORWF  x0D,W
0AB86:  MOVWF  00
0AB88:  MOVF   03,W
0AB8A:  IORWF  x0E,W
0AB8C:  MOVWF  03
0AB8E:  MOVF   00,W
0AB90:  MOVWF  FEF
....................             port1.data_buffer[count*3+2]= curr & 0xFF;
0AB92:  MOVFF  7F6,A53
0AB96:  MOVFF  7F5,A52
0AB9A:  MOVLB  A
0AB9C:  CLRF   x55
0AB9E:  MOVLW  03
0ABA0:  MOVWF  x54
0ABA2:  MOVLB  0
0ABA4:  CALL   8260
0ABA8:  MOVFF  02,80A
0ABAC:  MOVFF  01,809
0ABB0:  MOVLW  02
0ABB2:  MOVLB  8
0ABB4:  ADDWF  x09,F
0ABB6:  MOVLW  00
0ABB8:  ADDWFC x0A,F
0ABBA:  MOVLW  EC
0ABBC:  ADDWF  x09,W
0ABBE:  MOVWF  FE9
0ABC0:  MOVLW  01
0ABC2:  ADDWFC x0A,W
0ABC4:  MOVWF  FEA
0ABC6:  MOVLB  7
0ABC8:  MOVF   xF9,W
0ABCA:  MOVWF  00
0ABCC:  CLRF   03
0ABCE:  MOVF   00,W
0ABD0:  MOVWF  FEF
....................             port1.sweep_step = count + 1; 
0ABD2:  MOVLW  01
0ABD4:  ADDWF  xF5,W
0ABD6:  MOVLB  1
0ABD8:  MOVWF  xEA
0ABDA:  MOVLW  00
0ABDC:  MOVLB  7
0ABDE:  ADDWFC xF6,W
0ABE0:  MOVLB  1
0ABE2:  MOVWF  xEB
....................             // fprintf(PC, "%04LX,%04LX,", port1.data_buffer[count].voltage, port1.data_buffer[count].current);
....................             if (curr< curr_limit) {
0ABE4:  MOVLB  7
0ABE6:  MOVF   xFA,W
0ABE8:  MOVLB  1
0ABEA:  SUBWF  xE2,W
0ABEC:  BTFSC  FD8.0
0ABEE:  BRA    ABF6
0ABF0:  MOVLB  0
0ABF2:  GOTO   AC1C
0ABF6:  MOVLB  0
0ABF8:  BTFSS  FD8.2
0ABFA:  GOTO   AC12
0ABFE:  MOVLB  1
0AC00:  MOVF   xE1,W
0AC02:  MOVLB  7
0AC04:  SUBWF  xF9,W
0AC06:  BTFSS  FD8.0
0AC08:  BRA    AC10
0AC0A:  MOVLB  0
0AC0C:  GOTO   AC1C
0AC10:  MOVLB  0
....................                 port1.active = 0;
0AC12:  MOVLB  4
0AC14:  BCF    xEC.0
....................                 disconnect_port1();
0AC16:  MOVLB  0
0AC18:  CALL   9390
....................             }
....................         }
....................         if (port2.active) {
0AC1C:  MOVLB  7
0AC1E:  BTFSC  xF2.0
0AC20:  BRA    AC28
0AC22:  MOVLB  0
0AC24:  GOTO   ADA4
0AC28:  MOVLB  0
....................             volt = ad7490_read(ADC_CIGS2_AMP);
0AC2A:  MOVLW  06
0AC2C:  MOVLB  9
0AC2E:  MOVWF  xEE
0AC30:  MOVLB  0
0AC32:  CALL   24E4
0AC36:  MOVFF  02,7F8
0AC3A:  MOVFF  01,7F7
....................             curr = ad7490_read(ADC_CIGS2_CURR);
0AC3E:  MOVLW  05
0AC40:  MOVLB  9
0AC42:  MOVWF  xEE
0AC44:  MOVLB  0
0AC46:  CALL   24E4
0AC4A:  MOVFF  02,7FA
0AC4E:  MOVFF  01,7F9
....................             port2.data_buffer[count*3]= (volt  >> 4) & 0xFF;
0AC52:  MOVFF  7F6,A53
0AC56:  MOVFF  7F5,A52
0AC5A:  MOVLB  A
0AC5C:  CLRF   x55
0AC5E:  MOVLW  03
0AC60:  MOVWF  x54
0AC62:  MOVLB  0
0AC64:  CALL   8260
0AC68:  MOVFF  02,80A
0AC6C:  MOVFF  01,809
0AC70:  MOVLW  F2
0AC72:  MOVLB  8
0AC74:  ADDWF  x09,W
0AC76:  MOVWF  FE9
0AC78:  MOVLW  04
0AC7A:  ADDWFC x0A,W
0AC7C:  MOVWF  FEA
0AC7E:  MOVLB  7
0AC80:  RRCF   xF8,W
0AC82:  MOVLB  8
0AC84:  MOVWF  x0E
0AC86:  MOVLB  7
0AC88:  RRCF   xF7,W
0AC8A:  MOVLB  8
0AC8C:  MOVWF  x0D
0AC8E:  RRCF   x0E,F
0AC90:  RRCF   x0D,F
0AC92:  RRCF   x0E,F
0AC94:  RRCF   x0D,F
0AC96:  RRCF   x0E,F
0AC98:  RRCF   x0D,F
0AC9A:  MOVLW  0F
0AC9C:  ANDWF  x0E,F
0AC9E:  MOVF   x0D,W
0ACA0:  MOVWF  00
0ACA2:  CLRF   03
0ACA4:  MOVF   00,W
0ACA6:  MOVWF  FEF
....................             port2.data_buffer[count*3+1]= ((volt & 0x0F) << 4) | ((curr >> 8) & 0x0F);
0ACA8:  MOVFF  7F6,A53
0ACAC:  MOVFF  7F5,A52
0ACB0:  MOVLB  A
0ACB2:  CLRF   x55
0ACB4:  MOVLW  03
0ACB6:  MOVWF  x54
0ACB8:  MOVLB  0
0ACBA:  CALL   8260
0ACBE:  MOVFF  02,80A
0ACC2:  MOVFF  01,809
0ACC6:  MOVLW  01
0ACC8:  MOVLB  8
0ACCA:  ADDWF  x09,F
0ACCC:  MOVLW  00
0ACCE:  ADDWFC x0A,F
0ACD0:  MOVLW  F2
0ACD2:  ADDWF  x09,W
0ACD4:  MOVWF  FE9
0ACD6:  MOVLW  04
0ACD8:  ADDWFC x0A,W
0ACDA:  MOVWF  FEA
0ACDC:  MOVLB  7
0ACDE:  MOVF   xF7,W
0ACE0:  ANDLW  0F
0ACE2:  MOVLB  8
0ACE4:  MOVWF  x0D
0ACE6:  CLRF   x0E
0ACE8:  RLCF   x0D,F
0ACEA:  RLCF   x0E,F
0ACEC:  RLCF   x0D,F
0ACEE:  RLCF   x0E,F
0ACF0:  RLCF   x0D,F
0ACF2:  RLCF   x0E,F
0ACF4:  RLCF   x0D,F
0ACF6:  RLCF   x0E,F
0ACF8:  MOVLW  F0
0ACFA:  ANDWF  x0D,F
0ACFC:  MOVFF  7FA,80F
0AD00:  CLRF   x10
0AD02:  MOVF   x0F,W
0AD04:  ANDLW  0F
0AD06:  MOVWF  00
0AD08:  CLRF   03
0AD0A:  MOVF   00,W
0AD0C:  IORWF  x0D,W
0AD0E:  MOVWF  00
0AD10:  MOVF   03,W
0AD12:  IORWF  x0E,W
0AD14:  MOVWF  03
0AD16:  MOVF   00,W
0AD18:  MOVWF  FEF
....................             port2.data_buffer[count*3+2]= curr & 0xFF;
0AD1A:  MOVFF  7F6,A53
0AD1E:  MOVFF  7F5,A52
0AD22:  MOVLB  A
0AD24:  CLRF   x55
0AD26:  MOVLW  03
0AD28:  MOVWF  x54
0AD2A:  MOVLB  0
0AD2C:  CALL   8260
0AD30:  MOVFF  02,80A
0AD34:  MOVFF  01,809
0AD38:  MOVLW  02
0AD3A:  MOVLB  8
0AD3C:  ADDWF  x09,F
0AD3E:  MOVLW  00
0AD40:  ADDWFC x0A,F
0AD42:  MOVLW  F2
0AD44:  ADDWF  x09,W
0AD46:  MOVWF  FE9
0AD48:  MOVLW  04
0AD4A:  ADDWFC x0A,W
0AD4C:  MOVWF  FEA
0AD4E:  MOVLB  7
0AD50:  MOVF   xF9,W
0AD52:  MOVWF  00
0AD54:  CLRF   03
0AD56:  MOVF   00,W
0AD58:  MOVWF  FEF
....................             port2.sweep_step = count + 1;
0AD5A:  MOVLW  01
0AD5C:  ADDWF  xF5,W
0AD5E:  MOVLB  4
0AD60:  MOVWF  xF0
0AD62:  MOVLW  00
0AD64:  MOVLB  7
0AD66:  ADDWFC xF6,W
0AD68:  MOVLB  4
0AD6A:  MOVWF  xF1
....................             if (curr < curr_limit) {
0AD6C:  MOVLB  7
0AD6E:  MOVF   xFA,W
0AD70:  MOVLB  1
0AD72:  SUBWF  xE2,W
0AD74:  BTFSC  FD8.0
0AD76:  BRA    AD7E
0AD78:  MOVLB  0
0AD7A:  GOTO   ADA4
0AD7E:  MOVLB  0
0AD80:  BTFSS  FD8.2
0AD82:  GOTO   AD9A
0AD86:  MOVLB  1
0AD88:  MOVF   xE1,W
0AD8A:  MOVLB  7
0AD8C:  SUBWF  xF9,W
0AD8E:  BTFSS  FD8.0
0AD90:  BRA    AD98
0AD92:  MOVLB  0
0AD94:  GOTO   ADA4
0AD98:  MOVLB  0
....................                 port2.active = 0;
0AD9A:  MOVLB  7
0AD9C:  BCF    xF2.0
....................                 disconnect_port2();
0AD9E:  MOVLB  0
0ADA0:  CALL   9398
....................             } 
....................         }
....................         count++;
0ADA4:  MOVLB  7
0ADA6:  INCF   xF5,F
0ADA8:  BTFSC  FD8.2
0ADAA:  INCF   xF6,F
....................         if (count >= 255) {
0ADAC:  MOVF   xF6,F
0ADAE:  BTFSC  FD8.2
0ADB0:  BRA    ADB8
0ADB2:  MOVLB  0
0ADB4:  GOTO   ADCC
0ADB8:  MOVLB  0
0ADBA:  MOVLB  7
0ADBC:  MOVF   xF5,W
0ADBE:  SUBLW  FE
0ADC0:  BTFSS  FD8.0
0ADC2:  BRA    ADCA
0ADC4:  MOVLB  0
0ADC6:  GOTO   ADD0
0ADCA:  MOVLB  0
....................             // fprintf(PC, "Maximum step count reached: %ld\r\n", count);
....................             break;
0ADCC:  GOTO   ADD4
....................         }
0ADD0:  GOTO   AA58
....................     }
....................     // unsigned int32 end_time_ms = get_current_msec();
....................     // Ensure all connections are disabled3
....................     disconnect_port1();
0ADD4:  CALL   9390
....................     disconnect_port2();
0ADD8:  CALL   9398
....................     log_meas_data(measured_data_ptr, port1_ptr);
0ADDC:  MOVFF  808,9C3
0ADE0:  MOVFF  807,9C2
0ADE4:  MOVFF  4EE,9C5
0ADE8:  MOVFF  4ED,9C4
0ADEC:  CALL   93A0
....................     log_meas_data(measured_data_ptr, port2_ptr);
0ADF0:  MOVFF  808,9C3
0ADF4:  MOVFF  807,9C2
0ADF8:  MOVFF  7F4,9C5
0ADFC:  MOVFF  7F3,9C4
0AE00:  CALL   93A0
0AE04:  RETURN 0
.................... }
.................... 
.................... 
.................... void sweep_port1(unsigned int16 curr_limit)
*
0F008:  CALL   3C38
0F00C:  MOVFF  03,1CD
0F010:  MOVFF  02,1CC
0F014:  MOVFF  01,1CB
0F018:  MOVFF  00,1CA
.................... {
....................     unsigned int32 start_time_ms = get_current_sec();
....................     fputc('.', PC);
0F01C:  MOVLW  2E
0F01E:  CALL   91FC
....................     // Enable both CIGS ports
....................     connect_port1();
0F022:  CALL   5234
.................... 
....................     // Init Port1
....................     sweep_config_t port1 = {0};
0F026:  MOVLB  1
0F028:  CLRF   xCE
0F02A:  CLRF   xCF
0F02C:  CLRF   xD0
0F02E:  CLRF   xD1
0F030:  CLRF   xD2
0F032:  CLRF   xD3
0F034:  CLRF   xD4
0F036:  CLRF   xD5
0F038:  CLRF   xD6
0F03A:  CLRF   xD7
0F03C:  CLRF   xD8
0F03E:  CLRF   xD9
0F040:  CLRF   xDA
0F042:  CLRF   xDB
0F044:  CLRF   xDC
0F046:  CLRF   xDD
0F048:  CLRF   xDE
0F04A:  CLRF   xDF
0F04C:  CLRF   xE0
0F04E:  CLRF   xE1
0F050:  CLRF   xE2
0F052:  CLRF   xE3
0F054:  CLRF   xE4
0F056:  CLRF   xE5
0F058:  CLRF   xE6
0F05A:  CLRF   xE7
0F05C:  CLRF   xE8
0F05E:  CLRF   xE9
0F060:  CLRF   xEA
0F062:  CLRF   xEB
0F064:  CLRF   xEC
0F066:  CLRF   xED
0F068:  CLRF   xEE
0F06A:  CLRF   xEF
0F06C:  CLRF   xF0
0F06E:  CLRF   xF1
0F070:  CLRF   xF2
0F072:  CLRF   xF3
0F074:  CLRF   xF4
0F076:  CLRF   xF5
0F078:  CLRF   xF6
0F07A:  CLRF   xF7
0F07C:  CLRF   xF8
0F07E:  CLRF   xF9
0F080:  CLRF   xFA
0F082:  CLRF   xFB
0F084:  CLRF   xFC
0F086:  CLRF   xFD
0F088:  CLRF   xFE
0F08A:  CLRF   xFF
0F08C:  MOVLB  2
0F08E:  CLRF   x00
0F090:  CLRF   x01
0F092:  CLRF   x02
0F094:  CLRF   x03
0F096:  CLRF   x04
0F098:  CLRF   x05
0F09A:  CLRF   x06
0F09C:  CLRF   x07
0F09E:  CLRF   x08
0F0A0:  CLRF   x09
0F0A2:  CLRF   x0A
0F0A4:  CLRF   x0B
0F0A6:  CLRF   x0C
0F0A8:  CLRF   x0D
0F0AA:  CLRF   x0E
0F0AC:  CLRF   x0F
0F0AE:  CLRF   x10
0F0B0:  CLRF   x11
0F0B2:  CLRF   x12
0F0B4:  CLRF   x13
0F0B6:  CLRF   x14
0F0B8:  CLRF   x15
0F0BA:  CLRF   x16
0F0BC:  CLRF   x17
0F0BE:  CLRF   x18
0F0C0:  CLRF   x19
0F0C2:  CLRF   x1A
0F0C4:  CLRF   x1B
0F0C6:  CLRF   x1C
0F0C8:  CLRF   x1D
0F0CA:  CLRF   x1E
0F0CC:  CLRF   x1F
0F0CE:  CLRF   x20
0F0D0:  CLRF   x21
0F0D2:  CLRF   x22
0F0D4:  CLRF   x23
0F0D6:  CLRF   x24
0F0D8:  CLRF   x25
0F0DA:  CLRF   x26
0F0DC:  CLRF   x27
0F0DE:  CLRF   x28
0F0E0:  CLRF   x29
0F0E2:  CLRF   x2A
0F0E4:  CLRF   x2B
0F0E6:  CLRF   x2C
0F0E8:  CLRF   x2D
0F0EA:  CLRF   x2E
0F0EC:  CLRF   x2F
0F0EE:  CLRF   x30
0F0F0:  CLRF   x31
0F0F2:  CLRF   x32
0F0F4:  CLRF   x33
0F0F6:  CLRF   x34
0F0F8:  CLRF   x35
0F0FA:  CLRF   x36
0F0FC:  CLRF   x37
0F0FE:  CLRF   x38
0F100:  CLRF   x39
0F102:  CLRF   x3A
0F104:  CLRF   x3B
0F106:  CLRF   x3C
0F108:  CLRF   x3D
0F10A:  CLRF   x3E
0F10C:  CLRF   x3F
0F10E:  CLRF   x40
0F110:  CLRF   x41
0F112:  CLRF   x42
0F114:  CLRF   x43
0F116:  CLRF   x44
0F118:  CLRF   x45
0F11A:  CLRF   x46
0F11C:  CLRF   x47
0F11E:  CLRF   x48
0F120:  CLRF   x49
0F122:  CLRF   x4A
0F124:  CLRF   x4B
0F126:  CLRF   x4C
0F128:  CLRF   x4D
0F12A:  CLRF   x4E
0F12C:  CLRF   x4F
0F12E:  CLRF   x50
0F130:  CLRF   x51
0F132:  CLRF   x52
0F134:  CLRF   x53
0F136:  CLRF   x54
0F138:  CLRF   x55
0F13A:  CLRF   x56
0F13C:  CLRF   x57
0F13E:  CLRF   x58
0F140:  CLRF   x59
0F142:  CLRF   x5A
0F144:  CLRF   x5B
0F146:  CLRF   x5C
0F148:  CLRF   x5D
0F14A:  CLRF   x5E
0F14C:  CLRF   x5F
0F14E:  CLRF   x60
0F150:  CLRF   x61
0F152:  CLRF   x62
0F154:  CLRF   x63
0F156:  CLRF   x64
0F158:  CLRF   x65
0F15A:  CLRF   x66
0F15C:  CLRF   x67
0F15E:  CLRF   x68
0F160:  CLRF   x69
0F162:  CLRF   x6A
0F164:  CLRF   x6B
0F166:  CLRF   x6C
0F168:  CLRF   x6D
0F16A:  CLRF   x6E
0F16C:  CLRF   x6F
0F16E:  CLRF   x70
0F170:  CLRF   x71
0F172:  CLRF   x72
0F174:  CLRF   x73
0F176:  CLRF   x74
0F178:  CLRF   x75
0F17A:  CLRF   x76
0F17C:  CLRF   x77
0F17E:  CLRF   x78
0F180:  CLRF   x79
0F182:  CLRF   x7A
0F184:  CLRF   x7B
0F186:  CLRF   x7C
0F188:  CLRF   x7D
0F18A:  CLRF   x7E
0F18C:  CLRF   x7F
0F18E:  CLRF   x80
0F190:  CLRF   x81
0F192:  CLRF   x82
0F194:  CLRF   x83
0F196:  CLRF   x84
0F198:  CLRF   x85
0F19A:  CLRF   x86
0F19C:  CLRF   x87
0F19E:  CLRF   x88
0F1A0:  CLRF   x89
0F1A2:  CLRF   x8A
0F1A4:  CLRF   x8B
0F1A6:  CLRF   x8C
0F1A8:  CLRF   x8D
0F1AA:  CLRF   x8E
0F1AC:  CLRF   x8F
0F1AE:  CLRF   x90
0F1B0:  CLRF   x91
0F1B2:  CLRF   x92
0F1B4:  CLRF   x93
0F1B6:  CLRF   x94
0F1B8:  CLRF   x95
0F1BA:  CLRF   x96
0F1BC:  CLRF   x97
0F1BE:  CLRF   x98
0F1C0:  CLRF   x99
0F1C2:  CLRF   x9A
0F1C4:  CLRF   x9B
0F1C6:  CLRF   x9C
0F1C8:  CLRF   x9D
0F1CA:  CLRF   x9E
0F1CC:  CLRF   x9F
0F1CE:  CLRF   xA0
0F1D0:  CLRF   xA1
0F1D2:  CLRF   xA2
0F1D4:  CLRF   xA3
0F1D6:  CLRF   xA4
0F1D8:  CLRF   xA5
0F1DA:  CLRF   xA6
0F1DC:  CLRF   xA7
0F1DE:  CLRF   xA8
0F1E0:  CLRF   xA9
0F1E2:  CLRF   xAA
0F1E4:  CLRF   xAB
0F1E6:  CLRF   xAC
0F1E8:  CLRF   xAD
0F1EA:  CLRF   xAE
0F1EC:  CLRF   xAF
0F1EE:  CLRF   xB0
0F1F0:  CLRF   xB1
0F1F2:  CLRF   xB2
0F1F4:  CLRF   xB3
0F1F6:  CLRF   xB4
0F1F8:  CLRF   xB5
0F1FA:  CLRF   xB6
0F1FC:  CLRF   xB7
0F1FE:  CLRF   xB8
0F200:  CLRF   xB9
0F202:  CLRF   xBA
0F204:  CLRF   xBB
0F206:  CLRF   xBC
0F208:  CLRF   xBD
0F20A:  CLRF   xBE
0F20C:  CLRF   xBF
0F20E:  CLRF   xC0
0F210:  CLRF   xC1
0F212:  CLRF   xC2
0F214:  CLRF   xC3
0F216:  CLRF   xC4
0F218:  CLRF   xC5
0F21A:  CLRF   xC6
0F21C:  CLRF   xC7
0F21E:  CLRF   xC8
0F220:  CLRF   xC9
0F222:  CLRF   xCA
0F224:  CLRF   xCB
0F226:  CLRF   xCC
0F228:  CLRF   xCD
0F22A:  CLRF   xCE
0F22C:  CLRF   xCF
0F22E:  CLRF   xD0
0F230:  CLRF   xD1
0F232:  CLRF   xD2
0F234:  CLRF   xD3
0F236:  CLRF   xD4
0F238:  CLRF   xD5
0F23A:  CLRF   xD6
0F23C:  CLRF   xD7
0F23E:  CLRF   xD8
0F240:  CLRF   xD9
0F242:  CLRF   xDA
0F244:  CLRF   xDB
0F246:  CLRF   xDC
0F248:  CLRF   xDD
0F24A:  CLRF   xDE
0F24C:  CLRF   xDF
0F24E:  CLRF   xE0
0F250:  CLRF   xE1
0F252:  CLRF   xE2
0F254:  CLRF   xE3
0F256:  CLRF   xE4
0F258:  CLRF   xE5
0F25A:  CLRF   xE6
0F25C:  CLRF   xE7
0F25E:  CLRF   xE8
0F260:  CLRF   xE9
0F262:  CLRF   xEA
0F264:  CLRF   xEB
0F266:  CLRF   xEC
0F268:  CLRF   xED
0F26A:  CLRF   xEE
0F26C:  CLRF   xEF
0F26E:  CLRF   xF0
0F270:  CLRF   xF1
0F272:  CLRF   xF2
0F274:  CLRF   xF3
0F276:  CLRF   xF4
0F278:  CLRF   xF5
0F27A:  CLRF   xF6
0F27C:  CLRF   xF7
0F27E:  CLRF   xF8
0F280:  CLRF   xF9
0F282:  CLRF   xFA
0F284:  CLRF   xFB
0F286:  CLRF   xFC
0F288:  CLRF   xFD
0F28A:  CLRF   xFE
0F28C:  CLRF   xFF
0F28E:  MOVLB  3
0F290:  CLRF   x00
0F292:  CLRF   x01
0F294:  CLRF   x02
0F296:  CLRF   x03
0F298:  CLRF   x04
0F29A:  CLRF   x05
0F29C:  CLRF   x06
0F29E:  CLRF   x07
0F2A0:  CLRF   x08
0F2A2:  CLRF   x09
0F2A4:  CLRF   x0A
0F2A6:  CLRF   x0B
0F2A8:  CLRF   x0C
0F2AA:  CLRF   x0D
0F2AC:  CLRF   x0E
0F2AE:  CLRF   x0F
0F2B0:  CLRF   x10
0F2B2:  CLRF   x11
0F2B4:  CLRF   x12
0F2B6:  CLRF   x13
0F2B8:  CLRF   x14
0F2BA:  CLRF   x15
0F2BC:  CLRF   x16
0F2BE:  CLRF   x17
0F2C0:  CLRF   x18
0F2C2:  CLRF   x19
0F2C4:  CLRF   x1A
0F2C6:  CLRF   x1B
0F2C8:  CLRF   x1C
0F2CA:  CLRF   x1D
0F2CC:  CLRF   x1E
0F2CE:  CLRF   x1F
0F2D0:  CLRF   x20
0F2D2:  CLRF   x21
0F2D4:  CLRF   x22
0F2D6:  CLRF   x23
0F2D8:  CLRF   x24
0F2DA:  CLRF   x25
0F2DC:  CLRF   x26
0F2DE:  CLRF   x27
0F2E0:  CLRF   x28
0F2E2:  CLRF   x29
0F2E4:  CLRF   x2A
0F2E6:  CLRF   x2B
0F2E8:  CLRF   x2C
0F2EA:  CLRF   x2D
0F2EC:  CLRF   x2E
0F2EE:  CLRF   x2F
0F2F0:  CLRF   x30
0F2F2:  CLRF   x31
0F2F4:  CLRF   x32
0F2F6:  CLRF   x33
0F2F8:  CLRF   x34
0F2FA:  CLRF   x35
0F2FC:  CLRF   x36
0F2FE:  CLRF   x37
0F300:  CLRF   x38
0F302:  CLRF   x39
0F304:  CLRF   x3A
0F306:  CLRF   x3B
0F308:  CLRF   x3C
0F30A:  CLRF   x3D
0F30C:  CLRF   x3E
0F30E:  CLRF   x3F
0F310:  CLRF   x40
0F312:  CLRF   x41
0F314:  CLRF   x42
0F316:  CLRF   x43
0F318:  CLRF   x44
0F31A:  CLRF   x45
0F31C:  CLRF   x46
0F31E:  CLRF   x47
0F320:  CLRF   x48
0F322:  CLRF   x49
0F324:  CLRF   x4A
0F326:  CLRF   x4B
0F328:  CLRF   x4C
0F32A:  CLRF   x4D
0F32C:  CLRF   x4E
0F32E:  CLRF   x4F
0F330:  CLRF   x50
0F332:  CLRF   x51
0F334:  CLRF   x52
0F336:  CLRF   x53
0F338:  CLRF   x54
0F33A:  CLRF   x55
0F33C:  CLRF   x56
0F33E:  CLRF   x57
0F340:  CLRF   x58
0F342:  CLRF   x59
0F344:  CLRF   x5A
0F346:  CLRF   x5B
0F348:  CLRF   x5C
0F34A:  CLRF   x5D
0F34C:  CLRF   x5E
0F34E:  CLRF   x5F
0F350:  CLRF   x60
0F352:  CLRF   x61
0F354:  CLRF   x62
0F356:  CLRF   x63
0F358:  CLRF   x64
0F35A:  CLRF   x65
0F35C:  CLRF   x66
0F35E:  CLRF   x67
0F360:  CLRF   x68
0F362:  CLRF   x69
0F364:  CLRF   x6A
0F366:  CLRF   x6B
0F368:  CLRF   x6C
0F36A:  CLRF   x6D
0F36C:  CLRF   x6E
0F36E:  CLRF   x6F
0F370:  CLRF   x70
0F372:  CLRF   x71
0F374:  CLRF   x72
0F376:  CLRF   x73
0F378:  CLRF   x74
0F37A:  CLRF   x75
0F37C:  CLRF   x76
0F37E:  CLRF   x77
0F380:  CLRF   x78
0F382:  CLRF   x79
0F384:  CLRF   x7A
0F386:  CLRF   x7B
0F388:  CLRF   x7C
0F38A:  CLRF   x7D
0F38C:  CLRF   x7E
0F38E:  CLRF   x7F
0F390:  CLRF   x80
0F392:  CLRF   x81
0F394:  CLRF   x82
0F396:  CLRF   x83
0F398:  CLRF   x84
0F39A:  CLRF   x85
0F39C:  CLRF   x86
0F39E:  CLRF   x87
0F3A0:  CLRF   x88
0F3A2:  CLRF   x89
0F3A4:  CLRF   x8A
0F3A6:  CLRF   x8B
0F3A8:  CLRF   x8C
0F3AA:  CLRF   x8D
0F3AC:  CLRF   x8E
0F3AE:  CLRF   x8F
0F3B0:  CLRF   x90
0F3B2:  CLRF   x91
0F3B4:  CLRF   x92
0F3B6:  CLRF   x93
0F3B8:  CLRF   x94
0F3BA:  CLRF   x95
0F3BC:  CLRF   x96
0F3BE:  CLRF   x97
0F3C0:  CLRF   x98
0F3C2:  CLRF   x99
0F3C4:  CLRF   x9A
0F3C6:  CLRF   x9B
0F3C8:  CLRF   x9C
0F3CA:  CLRF   x9D
0F3CC:  CLRF   x9E
0F3CE:  CLRF   x9F
0F3D0:  CLRF   xA0
0F3D2:  CLRF   xA1
0F3D4:  CLRF   xA2
0F3D6:  CLRF   xA3
0F3D8:  CLRF   xA4
0F3DA:  CLRF   xA5
0F3DC:  CLRF   xA6
0F3DE:  CLRF   xA7
0F3E0:  CLRF   xA8
0F3E2:  CLRF   xA9
0F3E4:  CLRF   xAA
0F3E6:  CLRF   xAB
0F3E8:  CLRF   xAC
0F3EA:  CLRF   xAD
0F3EC:  CLRF   xAE
0F3EE:  CLRF   xAF
0F3F0:  CLRF   xB0
0F3F2:  CLRF   xB1
0F3F4:  CLRF   xB2
0F3F6:  CLRF   xB3
0F3F8:  CLRF   xB4
0F3FA:  CLRF   xB5
0F3FC:  CLRF   xB6
0F3FE:  CLRF   xB7
0F400:  CLRF   xB8
0F402:  CLRF   xB9
0F404:  CLRF   xBA
0F406:  CLRF   xBB
0F408:  CLRF   xBC
0F40A:  CLRF   xBD
0F40C:  CLRF   xBE
0F40E:  CLRF   xBF
0F410:  CLRF   xC0
0F412:  CLRF   xC1
0F414:  CLRF   xC2
0F416:  CLRF   xC3
0F418:  CLRF   xC4
0F41A:  CLRF   xC5
0F41C:  CLRF   xC6
0F41E:  CLRF   xC7
0F420:  CLRF   xC8
0F422:  CLRF   xC9
0F424:  CLRF   xCA
0F426:  CLRF   xCB
0F428:  CLRF   xCC
0F42A:  CLRF   xCD
0F42C:  CLRF   xCE
0F42E:  CLRF   xCF
0F430:  CLRF   xD0
0F432:  CLRF   xD1
0F434:  CLRF   xD2
0F436:  CLRF   xD3
0F438:  CLRF   xD4
0F43A:  CLRF   xD5
0F43C:  CLRF   xD6
0F43E:  CLRF   xD7
0F440:  CLRF   xD8
0F442:  CLRF   xD9
0F444:  CLRF   xDA
0F446:  CLRF   xDB
0F448:  CLRF   xDC
0F44A:  CLRF   xDD
0F44C:  CLRF   xDE
0F44E:  CLRF   xDF
0F450:  CLRF   xE0
0F452:  CLRF   xE1
0F454:  CLRF   xE2
0F456:  CLRF   xE3
0F458:  CLRF   xE4
0F45A:  CLRF   xE5
0F45C:  CLRF   xE6
0F45E:  CLRF   xE7
0F460:  CLRF   xE8
0F462:  CLRF   xE9
0F464:  CLRF   xEA
0F466:  CLRF   xEB
0F468:  CLRF   xEC
0F46A:  CLRF   xED
0F46C:  CLRF   xEE
0F46E:  CLRF   xEF
0F470:  CLRF   xF0
0F472:  CLRF   xF1
0F474:  CLRF   xF2
0F476:  CLRF   xF3
0F478:  CLRF   xF4
0F47A:  CLRF   xF5
0F47C:  CLRF   xF6
0F47E:  CLRF   xF7
0F480:  CLRF   xF8
0F482:  CLRF   xF9
0F484:  CLRF   xFA
0F486:  CLRF   xFB
0F488:  CLRF   xFC
0F48A:  CLRF   xFD
0F48C:  CLRF   xFE
0F48E:  CLRF   xFF
0F490:  MOVLB  4
0F492:  CLRF   x00
0F494:  CLRF   x01
0F496:  CLRF   x02
0F498:  CLRF   x03
0F49A:  CLRF   x04
0F49C:  CLRF   x05
0F49E:  CLRF   x06
0F4A0:  CLRF   x07
0F4A2:  CLRF   x08
0F4A4:  CLRF   x09
0F4A6:  CLRF   x0A
0F4A8:  CLRF   x0B
0F4AA:  CLRF   x0C
0F4AC:  CLRF   x0D
0F4AE:  CLRF   x0E
0F4B0:  CLRF   x0F
0F4B2:  CLRF   x10
0F4B4:  CLRF   x11
0F4B6:  CLRF   x12
0F4B8:  CLRF   x13
0F4BA:  CLRF   x14
0F4BC:  CLRF   x15
0F4BE:  CLRF   x16
0F4C0:  CLRF   x17
0F4C2:  CLRF   x18
0F4C4:  CLRF   x19
0F4C6:  CLRF   x1A
0F4C8:  CLRF   x1B
0F4CA:  CLRF   x1C
0F4CC:  CLRF   x1D
0F4CE:  CLRF   x1E
0F4D0:  CLRF   x1F
0F4D2:  CLRF   x20
0F4D4:  CLRF   x21
0F4D6:  CLRF   x22
0F4D8:  CLRF   x23
0F4DA:  CLRF   x24
0F4DC:  CLRF   x25
0F4DE:  CLRF   x26
0F4E0:  CLRF   x27
0F4E2:  CLRF   x28
0F4E4:  CLRF   x29
0F4E6:  CLRF   x2A
0F4E8:  CLRF   x2B
0F4EA:  CLRF   x2C
0F4EC:  CLRF   x2D
0F4EE:  CLRF   x2E
0F4F0:  CLRF   x2F
0F4F2:  CLRF   x30
0F4F4:  CLRF   x31
0F4F6:  CLRF   x32
0F4F8:  CLRF   x33
0F4FA:  CLRF   x34
0F4FC:  CLRF   x35
0F4FE:  CLRF   x36
0F500:  CLRF   x37
0F502:  CLRF   x38
0F504:  CLRF   x39
0F506:  CLRF   x3A
0F508:  CLRF   x3B
0F50A:  CLRF   x3C
0F50C:  CLRF   x3D
0F50E:  CLRF   x3E
0F510:  CLRF   x3F
0F512:  CLRF   x40
0F514:  CLRF   x41
0F516:  CLRF   x42
0F518:  CLRF   x43
0F51A:  CLRF   x44
0F51C:  CLRF   x45
0F51E:  CLRF   x46
0F520:  CLRF   x47
0F522:  CLRF   x48
0F524:  CLRF   x49
0F526:  CLRF   x4A
0F528:  CLRF   x4B
0F52A:  CLRF   x4C
0F52C:  CLRF   x4D
0F52E:  CLRF   x4E
0F530:  CLRF   x4F
0F532:  CLRF   x50
0F534:  CLRF   x51
0F536:  CLRF   x52
0F538:  CLRF   x53
0F53A:  CLRF   x54
0F53C:  CLRF   x55
0F53E:  CLRF   x56
0F540:  CLRF   x57
0F542:  CLRF   x58
0F544:  CLRF   x59
0F546:  CLRF   x5A
0F548:  CLRF   x5B
0F54A:  CLRF   x5C
0F54C:  CLRF   x5D
0F54E:  CLRF   x5E
0F550:  CLRF   x5F
0F552:  CLRF   x60
0F554:  CLRF   x61
0F556:  CLRF   x62
0F558:  CLRF   x63
0F55A:  CLRF   x64
0F55C:  CLRF   x65
0F55E:  CLRF   x66
0F560:  CLRF   x67
0F562:  CLRF   x68
0F564:  CLRF   x69
0F566:  CLRF   x6A
0F568:  CLRF   x6B
0F56A:  CLRF   x6C
0F56C:  CLRF   x6D
0F56E:  CLRF   x6E
0F570:  CLRF   x6F
0F572:  CLRF   x70
0F574:  CLRF   x71
0F576:  CLRF   x72
0F578:  CLRF   x73
0F57A:  CLRF   x74
0F57C:  CLRF   x75
0F57E:  CLRF   x76
0F580:  CLRF   x77
0F582:  CLRF   x78
0F584:  CLRF   x79
0F586:  CLRF   x7A
0F588:  CLRF   x7B
0F58A:  CLRF   x7C
0F58C:  CLRF   x7D
0F58E:  CLRF   x7E
0F590:  CLRF   x7F
0F592:  CLRF   x80
0F594:  CLRF   x81
0F596:  CLRF   x82
0F598:  CLRF   x83
0F59A:  CLRF   x84
0F59C:  CLRF   x85
0F59E:  CLRF   x86
0F5A0:  CLRF   x87
0F5A2:  CLRF   x88
0F5A4:  CLRF   x89
0F5A6:  CLRF   x8A
0F5A8:  CLRF   x8B
0F5AA:  CLRF   x8C
0F5AC:  CLRF   x8D
0F5AE:  CLRF   x8E
0F5B0:  CLRF   x8F
0F5B2:  CLRF   x90
0F5B4:  CLRF   x91
0F5B6:  CLRF   x92
0F5B8:  CLRF   x93
0F5BA:  CLRF   x94
0F5BC:  CLRF   x95
0F5BE:  CLRF   x96
0F5C0:  CLRF   x97
0F5C2:  CLRF   x98
0F5C4:  CLRF   x99
0F5C6:  CLRF   x9A
0F5C8:  CLRF   x9B
0F5CA:  CLRF   x9C
0F5CC:  CLRF   x9D
0F5CE:  CLRF   x9E
0F5D0:  CLRF   x9F
0F5D2:  CLRF   xA0
0F5D4:  CLRF   xA1
0F5D6:  CLRF   xA2
0F5D8:  CLRF   xA3
0F5DA:  CLRF   xA4
0F5DC:  CLRF   xA5
0F5DE:  CLRF   xA6
0F5E0:  CLRF   xA7
0F5E2:  CLRF   xA8
0F5E4:  CLRF   xA9
0F5E6:  CLRF   xAA
0F5E8:  CLRF   xAB
0F5EA:  CLRF   xAC
0F5EC:  CLRF   xAD
0F5EE:  CLRF   xAE
0F5F0:  CLRF   xAF
0F5F2:  CLRF   xB0
0F5F4:  CLRF   xB1
0F5F6:  CLRF   xB2
0F5F8:  CLRF   xB3
0F5FA:  CLRF   xB4
0F5FC:  CLRF   xB5
0F5FE:  CLRF   xB6
0F600:  CLRF   xB7
0F602:  CLRF   xB8
0F604:  CLRF   xB9
0F606:  CLRF   xBA
0F608:  CLRF   xBB
0F60A:  CLRF   xBC
0F60C:  CLRF   xBD
0F60E:  CLRF   xBE
0F610:  CLRF   xBF
0F612:  CLRF   xC0
0F614:  CLRF   xC1
0F616:  CLRF   xC2
0F618:  CLRF   xC3
0F61A:  CLRF   xC4
0F61C:  CLRF   xC5
0F61E:  CLRF   xC6
0F620:  CLRF   xC7
0F622:  CLRF   xC8
0F624:  CLRF   xC9
0F626:  CLRF   xCA
0F628:  CLRF   xCB
0F62A:  CLRF   xCC
0F62C:  CLRF   xCD
0F62E:  CLRF   xCE
0F630:  CLRF   xCF
0F632:  CLRF   xD0
0F634:  CLRF   xD1
....................     port1.port_num = 1;
0F636:  MOVLW  01
0F638:  MOVLB  1
0F63A:  MOVWF  xCE
....................     port1.sweep_step = 0;
0F63C:  CLRF   xD0
0F63E:  CLRF   xCF
....................     port1.active = 1;
0F640:  MOVLB  4
0F642:  BSF    xD1.0
.................... 
....................     int16 count = 0;
0F644:  CLRF   xD3
0F646:  CLRF   xD2
....................     
....................     // Initialize DACs to 0
....................     mcp4901_1_write(1);
0F648:  MOVLB  9
0F64A:  CLRF   xDD
0F64C:  MOVLW  01
0F64E:  MOVWF  xDC
0F650:  MOVLB  0
0F652:  CALL   2894
....................     unsigned int16 volt;
....................     unsigned int16 curr;
....................     iv_env_t measured_data = create_meas_data();
0F656:  CALL   930E
0F65A:  MOVFF  02,03
0F65E:  MOVF   01,W
0F660:  MOVWF  FE1
0F662:  MOVFF  03,FE2
0F666:  MOVLW  04
0F668:  MOVWF  FEA
0F66A:  MOVLW  D8
0F66C:  MOVWF  FE9
0F66E:  MOVLW  0C
0F670:  MOVWF  01
0F672:  MOVFF  FE6,FEE
0F676:  DECFSZ 01,F
0F678:  GOTO   F672
....................     while (port1.active)
0F67C:  MOVLB  4
0F67E:  BTFSC  xD1.0
0F680:  BRA    F688
0F682:  MOVLB  0
0F684:  GOTO   F844
0F688:  MOVLB  0
....................     {
....................         mcp4901_1_write(count);
0F68A:  MOVFF  4D3,9DD
0F68E:  MOVFF  4D2,9DC
0F692:  CALL   2894
....................         // mcp4901_2_write(count);
....................         delay_us(1); 
0F696:  BRA    F698
0F698:  BRA    F69A
....................         if (port1.active) {
0F69A:  MOVLB  4
0F69C:  BTFSC  xD1.0
0F69E:  BRA    F6A6
0F6A0:  MOVLB  0
0F6A2:  GOTO   F814
0F6A6:  MOVLB  0
....................             volt = ad7490_read(ADC_CIGS1_AMP);
0F6A8:  MOVLW  02
0F6AA:  MOVLB  9
0F6AC:  MOVWF  xEE
0F6AE:  MOVLB  0
0F6B0:  CALL   24E4
0F6B4:  MOVFF  02,4D5
0F6B8:  MOVFF  01,4D4
....................             curr = ad7490_read(ADC_CIGS1_CURR);
0F6BC:  MOVLW  01
0F6BE:  MOVLB  9
0F6C0:  MOVWF  xEE
0F6C2:  MOVLB  0
0F6C4:  CALL   24E4
0F6C8:  MOVFF  02,4D7
0F6CC:  MOVFF  01,4D6
....................             // ad7490_read_2port(ADC_CIGS1_AMP, ADC_CIGS1_CURR, &volt, &curr);
....................             // fprintf(PC, "%04LX,%04LX,", volt, curr);
....................             port1.data_buffer[count*3]= (volt  >> 4) & 0xFF;
0F6D0:  MOVFF  4D3,A53
0F6D4:  MOVFF  4D2,A52
0F6D8:  MOVLB  A
0F6DA:  CLRF   x55
0F6DC:  MOVLW  03
0F6DE:  MOVWF  x54
0F6E0:  MOVLB  0
0F6E2:  CALL   8260
0F6E6:  MOVFF  02,4E5
0F6EA:  MOVFF  01,4E4
0F6EE:  MOVLW  D1
0F6F0:  MOVLB  4
0F6F2:  ADDWF  xE4,W
0F6F4:  MOVWF  FE9
0F6F6:  MOVLW  01
0F6F8:  ADDWFC xE5,W
0F6FA:  MOVWF  FEA
0F6FC:  RRCF   xD5,W
0F6FE:  MOVWF  xE9
0F700:  RRCF   xD4,W
0F702:  MOVWF  xE8
0F704:  RRCF   xE9,F
0F706:  RRCF   xE8,F
0F708:  RRCF   xE9,F
0F70A:  RRCF   xE8,F
0F70C:  RRCF   xE9,F
0F70E:  RRCF   xE8,F
0F710:  MOVLW  0F
0F712:  ANDWF  xE9,F
0F714:  MOVF   xE8,W
0F716:  MOVWF  00
0F718:  CLRF   03
0F71A:  MOVF   00,W
0F71C:  MOVWF  FEF
....................             port1.data_buffer[count*3+1]= ((volt & 0x0F) << 4) | ((curr >> 8) & 0x0F);
0F71E:  MOVFF  4D3,A53
0F722:  MOVFF  4D2,A52
0F726:  MOVLB  A
0F728:  CLRF   x55
0F72A:  MOVLW  03
0F72C:  MOVWF  x54
0F72E:  MOVLB  0
0F730:  CALL   8260
0F734:  MOVFF  02,4E5
0F738:  MOVFF  01,4E4
0F73C:  MOVLW  01
0F73E:  MOVLB  4
0F740:  ADDWF  xE4,F
0F742:  MOVLW  00
0F744:  ADDWFC xE5,F
0F746:  MOVLW  D1
0F748:  ADDWF  xE4,W
0F74A:  MOVWF  FE9
0F74C:  MOVLW  01
0F74E:  ADDWFC xE5,W
0F750:  MOVWF  FEA
0F752:  MOVF   xD4,W
0F754:  ANDLW  0F
0F756:  MOVWF  xE8
0F758:  CLRF   xE9
0F75A:  RLCF   xE8,F
0F75C:  RLCF   xE9,F
0F75E:  RLCF   xE8,F
0F760:  RLCF   xE9,F
0F762:  RLCF   xE8,F
0F764:  RLCF   xE9,F
0F766:  RLCF   xE8,F
0F768:  RLCF   xE9,F
0F76A:  MOVLW  F0
0F76C:  ANDWF  xE8,F
0F76E:  MOVFF  4D7,4EA
0F772:  CLRF   xEB
0F774:  MOVF   xEA,W
0F776:  ANDLW  0F
0F778:  MOVWF  00
0F77A:  CLRF   03
0F77C:  MOVF   00,W
0F77E:  IORWF  xE8,W
0F780:  MOVWF  00
0F782:  MOVF   03,W
0F784:  IORWF  xE9,W
0F786:  MOVWF  03
0F788:  MOVF   00,W
0F78A:  MOVWF  FEF
....................             port1.data_buffer[count*3+2]= curr & 0xFF;
0F78C:  MOVFF  4D3,A53
0F790:  MOVFF  4D2,A52
0F794:  MOVLB  A
0F796:  CLRF   x55
0F798:  MOVLW  03
0F79A:  MOVWF  x54
0F79C:  MOVLB  0
0F79E:  CALL   8260
0F7A2:  MOVFF  02,4E5
0F7A6:  MOVFF  01,4E4
0F7AA:  MOVLW  02
0F7AC:  MOVLB  4
0F7AE:  ADDWF  xE4,F
0F7B0:  MOVLW  00
0F7B2:  ADDWFC xE5,F
0F7B4:  MOVLW  D1
0F7B6:  ADDWF  xE4,W
0F7B8:  MOVWF  FE9
0F7BA:  MOVLW  01
0F7BC:  ADDWFC xE5,W
0F7BE:  MOVWF  FEA
0F7C0:  MOVF   xD6,W
0F7C2:  MOVWF  00
0F7C4:  CLRF   03
0F7C6:  MOVF   00,W
0F7C8:  MOVWF  FEF
....................             port1.sweep_step = count + 1; 
0F7CA:  MOVLW  01
0F7CC:  ADDWF  xD2,W
0F7CE:  MOVLB  1
0F7D0:  MOVWF  xCF
0F7D2:  MOVLW  00
0F7D4:  MOVLB  4
0F7D6:  ADDWFC xD3,W
0F7D8:  MOVLB  1
0F7DA:  MOVWF  xD0
....................             // fprintf(PC, "%04LX,%04LX,", port1.data_buffer[count].voltage, port1.data_buffer[count].current);
....................             if (curr< curr_limit) {
0F7DC:  MOVLB  4
0F7DE:  MOVF   xD7,W
0F7E0:  MOVLB  1
0F7E2:  SUBWF  xC9,W
0F7E4:  BTFSC  FD8.0
0F7E6:  BRA    F7EE
0F7E8:  MOVLB  0
0F7EA:  GOTO   F814
0F7EE:  MOVLB  0
0F7F0:  BTFSS  FD8.2
0F7F2:  GOTO   F80A
0F7F6:  MOVLB  1
0F7F8:  MOVF   xC8,W
0F7FA:  MOVLB  4
0F7FC:  SUBWF  xD6,W
0F7FE:  BTFSS  FD8.0
0F800:  BRA    F808
0F802:  MOVLB  0
0F804:  GOTO   F814
0F808:  MOVLB  0
....................                 port1.active = 0;
0F80A:  MOVLB  4
0F80C:  BCF    xD1.0
....................                 disconnect_port1();
0F80E:  MOVLB  0
0F810:  CALL   9390
....................             }
....................         }
....................         count++;
0F814:  MOVLB  4
0F816:  INCF   xD2,F
0F818:  BTFSC  FD8.2
0F81A:  INCF   xD3,F
....................         if (count >= 255) {
0F81C:  MOVF   xD3,F
0F81E:  BTFSC  FD8.2
0F820:  BRA    F828
0F822:  MOVLB  0
0F824:  GOTO   F83C
0F828:  MOVLB  0
0F82A:  MOVLB  4
0F82C:  MOVF   xD2,W
0F82E:  SUBLW  FE
0F830:  BTFSS  FD8.0
0F832:  BRA    F83A
0F834:  MOVLB  0
0F836:  GOTO   F840
0F83A:  MOVLB  0
....................             // fprintf(PC, "Maximum step count reached: %ld\r\n", count);
....................             break;
0F83C:  GOTO   F844
....................         }
0F840:  GOTO   F67C
....................     }
....................     // unsigned int32 end_time_ms = get_current_msec();
....................     // Ensure all connections are disabled3
....................     disconnect_port1();
0F844:  CALL   9390
....................     log_meas_data(&measured_data, &port1);
0F848:  MOVLW  04
0F84A:  MOVLB  9
0F84C:  MOVWF  xC3
0F84E:  MOVLW  D8
0F850:  MOVWF  xC2
0F852:  MOVLW  01
0F854:  MOVWF  xC5
0F856:  MOVLW  CE
0F858:  MOVWF  xC4
0F85A:  MOVLB  0
0F85C:  CALL   93A0
0F860:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data()
.................... {
....................     iv_env_t data;
....................     memset(&data, 0, sizeof(data));
*
0930E:  MOVLW  09
09310:  MOVWF  FEA
09312:  MOVLW  E2
09314:  MOVWF  FE9
09316:  CLRF   00
09318:  CLRF   02
0931A:  MOVLW  0C
0931C:  MOVWF  01
0931E:  CALL   236E
....................     data.time           = get_current_sec();
09322:  CALL   3C38
09326:  MOVFF  03,9E5
0932A:  MOVFF  02,9E4
0932E:  MOVFF  01,9E3
09332:  MOVFF  00,9E2
....................     data.temp_py_top    = ad7490_read(ADC_TEMP_PY_TOP);
09336:  MOVLW  0D
09338:  MOVLB  9
0933A:  MOVWF  xEE
0933C:  MOVLB  0
0933E:  CALL   24E4
09342:  MOVFF  02,9E9
09346:  MOVFF  01,9E8
....................     data.temp_py_bot    = ad7490_read(ADC_TEMP_PY_BOT);
0934A:  MOVLW  0E
0934C:  MOVLB  9
0934E:  MOVWF  xEE
09350:  MOVLB  0
09352:  CALL   24E4
09356:  MOVFF  02,9EB
0935A:  MOVFF  01,9EA
....................     data.temp_mis7      = ad7490_read(ADC_TEMP_MIS7);
0935E:  MOVLW  0C
09360:  MOVLB  9
09362:  MOVWF  xEE
09364:  MOVLB  0
09366:  CALL   24E4
0936A:  MOVFF  02,9ED
0936E:  MOVFF  01,9EC
....................     data.pd             = ad7490_read(ADC_PD);
09372:  MOVLW  0F
09374:  MOVLB  9
09376:  MOVWF  xEE
09378:  MOVLB  0
0937A:  CALL   24E4
0937E:  MOVFF  02,9E7
09382:  MOVFF  01,9E6
....................     return data;
09386:  MOVLW  E2
09388:  MOVWF  01
0938A:  MOVLW  09
0938C:  MOVWF  02
0938E:  RETURN 0
.................... }
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data)
.................... {
....................     // ADCの12ビット値を電力密度（mW/cm²）に変換する例
....................     // ここでは仮に1 LSB = 0.1 mW/cm²とする
....................     return (unsigned int16)(data);
*
0837A:  MOVLB  1
0837C:  MOVF   xE9,W
0837E:  MOVWF  01
08380:  MOVF   xEA,W
08382:  MOVWF  02
08384:  MOVLB  0
08386:  GOTO   8FC4 (RETURN)
.................... }
.................... 
.................... int16 calc_curr_value(unsigned int16 data){
....................     float voltage_mv;
....................     float current_ma;
.................... 
....................     // 12ビットADCの値を[mV]に変換
....................     voltage_mv = (float)data * ADC_REF_VOLTAGE_MV / ADC_MAX_READING;
*
08D70:  MOVFF  1EA,1F4
08D74:  MOVFF  1E9,1F3
08D78:  GOTO   838A
08D7C:  MOVFF  03,1F6
08D80:  MOVFF  02,1F5
08D84:  MOVFF  01,1F4
08D88:  MOVFF  00,1F3
08D8C:  MOVFF  1F6,1FA
08D90:  MOVFF  1F5,1F9
08D94:  MOVFF  1F4,1F8
08D98:  MOVFF  1F3,1F7
08D9C:  MOVLB  1
08D9E:  CLRF   xFE
08DA0:  MOVLW  40
08DA2:  MOVWF  xFD
08DA4:  MOVLW  1C
08DA6:  MOVWF  xFC
08DA8:  MOVLW  8A
08DAA:  MOVWF  xFB
08DAC:  MOVLB  0
08DAE:  GOTO   83D0
08DB2:  MOVFF  03,1F6
08DB6:  MOVFF  02,1F5
08DBA:  MOVFF  01,1F4
08DBE:  MOVFF  00,1F3
08DC2:  MOVFF  1F6,1FA
08DC6:  MOVFF  1F5,1F9
08DCA:  MOVFF  1F4,1F8
08DCE:  MOVFF  1F3,1F7
08DD2:  MOVLB  1
08DD4:  CLRF   xFE
08DD6:  MOVLW  F0
08DD8:  MOVWF  xFD
08DDA:  MOVLW  7F
08DDC:  MOVWF  xFC
08DDE:  MOVLW  8A
08DE0:  MOVWF  xFB
08DE2:  MOVLB  0
08DE4:  CALL   852E
08DE8:  MOVFF  03,1EE
08DEC:  MOVFF  02,1ED
08DF0:  MOVFF  01,1EC
08DF4:  MOVFF  00,1EB
.................... 
....................     // オフセット電圧(ADC_CURR_REF_VOLTAGE_MV)との差から電流[mA]を算出
....................     current_ma = (voltage_mv - ADC_CURR_REF_VOLTAGE_MV) / (SHUNT_RESISTANCE_OHM * AMP_GAIN);
08DF8:  BSF    FD8.1
08DFA:  MOVFF  1EE,1F6
08DFE:  MOVFF  1ED,1F5
08E02:  MOVFF  1EC,1F4
08E06:  MOVFF  1EB,1F3
08E0A:  MOVLB  1
08E0C:  CLRF   xFA
08E0E:  MOVLW  40
08E10:  MOVWF  xF9
08E12:  MOVLW  1C
08E14:  MOVWF  xF8
08E16:  MOVLW  89
08E18:  MOVWF  xF7
08E1A:  MOVLB  0
08E1C:  GOTO   881C
08E20:  MOVFF  03,1F6
08E24:  MOVFF  02,1F5
08E28:  MOVFF  01,1F4
08E2C:  MOVFF  00,1F3
08E30:  MOVFF  1F6,1FA
08E34:  MOVFF  1F5,1F9
08E38:  MOVFF  1F4,1F8
08E3C:  MOVFF  1F3,1F7
08E40:  MOVLB  1
08E42:  CLRF   xFE
08E44:  CLRF   xFD
08E46:  MOVLW  20
08E48:  MOVWF  xFC
08E4A:  MOVLW  82
08E4C:  MOVWF  xFB
08E4E:  MOVLB  0
08E50:  CALL   852E
08E54:  MOVFF  03,1F2
08E58:  MOVFF  02,1F1
08E5C:  MOVFF  01,1F0
08E60:  MOVFF  00,1EF
.................... 
....................     return (int16)current_ma;
08E64:  MOVFF  1F2,1F6
08E68:  MOVFF  1F1,1F5
08E6C:  MOVFF  1F0,1F4
08E70:  MOVFF  1EF,1F3
08E74:  GOTO   8D16
08E78:  MOVF   01,W
08E7A:  MOVWF  01
08E7C:  MOVF   02,W
08E7E:  MOVWF  02
08E80:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "domain/cigs_piclog.c"
.................... #include "cigs_piclog.h"                          // 同じフォルダのヘッダー
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/timer.h"                   // タイマーライブラリ  
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... #INT_TIMER1 
.................... static void TIMER1_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... void set_current_sec(unsigned int32 new_sec);
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "cigs_flash.h"                 // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"               // フラッシュ操作キュー
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                 // フラッシュデバイス
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // #define PICLOG_DEBUG
.................... #define MISSION_ID_PICLOG 0x03  // PICLOGミッションID
.................... 
.................... void piclog_make(int8 function, int8 parameter)
*
0510C:  MOVLW  02
0510E:  MOVLB  2
05110:  MOVWF  x18
05112:  MOVLW  11
05114:  MOVWF  x17
.................... {
....................     piclog_t piclog;
....................     piclog_t *piclog_ptr = &piclog;
....................     memset(piclog_ptr, 0x00, PICLOG_PACKET_SIZE);
05116:  MOVFF  218,FEA
0511A:  MOVFF  217,FE9
0511E:  CLRF   00
05120:  CLRF   02
05122:  MOVLW  06
05124:  MOVWF  01
05126:  MOVLB  0
05128:  CALL   236E
....................     piclog_ptr->fields.time = get_current_sec();
0512C:  MOVLB  2
0512E:  MOVF   x17,W
05130:  MOVWF  01
05132:  MOVF   x18,W
05134:  MOVWF  03
05136:  MOVF   01,W
05138:  MOVWF  x1A
0513A:  MOVFF  03,21B
0513E:  MOVLB  0
05140:  CALL   3C38
05144:  MOVFF  21B,FEA
05148:  MOVFF  21A,FE9
0514C:  MOVFF  00,FEF
05150:  MOVFF  01,FEC
05154:  MOVFF  02,FEC
05158:  MOVFF  03,FEC
0515C:  MOVF   FED,F
0515E:  MOVF   FED,F
05160:  MOVF   FED,F
....................     piclog_ptr->fields.function = function;
05162:  MOVLW  04
05164:  MOVLB  2
05166:  ADDWF  x17,W
05168:  MOVWF  FE9
0516A:  MOVLW  00
0516C:  ADDWFC x18,W
0516E:  MOVWF  FEA
05170:  MOVFF  20F,FEF
....................     piclog_ptr->fields.parameter = parameter;
05174:  MOVLW  05
05176:  ADDWF  x17,W
05178:  MOVWF  FE9
0517A:  MOVLW  00
0517C:  ADDWFC x18,W
0517E:  MOVWF  FEA
05180:  MOVFF  210,FEF
.................... 
....................     printf("[PICLOG] : ");
05184:  MOVLW  A0
05186:  MOVWF  FF6
05188:  MOVLW  06
0518A:  MOVWF  FF7
0518C:  MOVLW  00
0518E:  MOVWF  FF8
05190:  MOVLB  0
05192:  CALL   22FE
....................     for (int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
05196:  MOVLB  2
05198:  CLRF   x19
0519A:  MOVLB  0
0519C:  MOVLB  2
0519E:  MOVF   x19,W
051A0:  SUBLW  05
051A2:  BTFSC  FD8.0
051A4:  BRA    51AC
051A6:  MOVLB  0
051A8:  GOTO   51E8
051AC:  MOVLB  0
....................         printf("%02X ", piclog_ptr->bytes[i]);
051AE:  MOVLB  2
051B0:  MOVF   x19,W
051B2:  ADDWF  x17,W
051B4:  MOVWF  FE9
051B6:  MOVLW  00
051B8:  ADDWFC x18,W
051BA:  MOVWF  FEA
051BC:  MOVFF  FEF,21A
051C0:  MOVFF  21A,9E8
051C4:  MOVLW  37
051C6:  MOVLB  9
051C8:  MOVWF  xE9
051CA:  MOVLB  0
051CC:  CALL   2564
051D0:  MOVLW  20
051D2:  BTFSS  FA6.6
051D4:  GOTO   51D2
051D8:  MOVLB  E
051DA:  MOVWF  xF9
051DC:  MOVLB  0
051DE:  MOVLB  2
051E0:  INCF   x19,F
051E2:  MOVLB  0
051E4:  GOTO   519C
....................     }
....................     printf("\r\n");
051E8:  MOVLW  0D
051EA:  BTFSS  FA6.6
051EC:  GOTO   51EA
051F0:  MOVLB  E
051F2:  MOVWF  xF9
051F4:  MOVLW  0A
051F6:  MOVLB  0
051F8:  BTFSS  FA6.6
051FA:  GOTO   51F8
051FE:  MOVLB  E
05200:  MOVWF  xF9
.................... 
....................     misf_write_data(FLASH_ID_PICLOG, piclog_ptr->bytes, PICLOG_PACKET_SIZE);
05202:  MOVLB  2
05204:  MOVF   x17,W
05206:  MOVWF  01
05208:  MOVF   x18,W
0520A:  MOVWF  03
0520C:  MOVF   01,W
0520E:  MOVWF  x1A
05210:  MOVFF  03,21B
05214:  MOVLW  01
05216:  MOVLB  A
05218:  MOVWF  x50
0521A:  MOVFF  21B,A52
0521E:  MOVFF  21A,A51
05222:  CLRF   x54
05224:  MOVLW  06
05226:  MOVWF  x53
05228:  MOVLB  0
0522A:  CALL   42AE
....................     misf_update_address_area();
0522E:  CALL   507E
05232:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "domain/cigs_smf.c"
.................... #include "cigs_smf.h"  
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #include "../hal/cigs_config.h" // int8,int32 型など(CCS C) 依存
.................... #include "cigs_flash.h"       // MISF_ADDRESS_TABLE, misf_counter_table 依存
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... extern int1 smf_update_flag[10]; // SMF更新フラグ
.................... 
.................... 
.................... // SMF管理用構造体
.................... typedef struct {
....................     ADDRESS_AREA_T header_area;
....................     ADDRESS_AREA_T data_area;
.................... } SMF_AREA_T;
.................... #define SMF_ID_COUNT 7
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 reserved;
.................... } SMF_PARTITION;
.................... 
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         SMF_PARTITION headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table);
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... void smf_update_smf_area(void);
.................... 
.................... typedef union{
....................     unsigned int8 bytes[PACKET_SIZE];
....................     struct {
....................         unsigned int32 piclog_used_size;
....................         unsigned int32 envero_used_size;
....................         unsigned int32 iv1_header_used_size;
....................         unsigned int32 iv1_data_used_size;
....................         unsigned int32 iv2_header_used_size;
....................         unsigned int32 iv2_data_used_size;
....................         unsigned int32 reserved[9];
....................     } fields;
.................... 
.................... }smf_address_header_t;
.................... 
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "cigs_flash.h"
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mt25q.h"              // Flash device definitions
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/tool/smf_queue.h"            // システム設定 
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/tool/calc_tools.h"           // SMF処理関数 
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/mmj_smf_memorymap.h" 
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... typedef enum smf_memory_id_t{
....................     // SATO
....................     SMF_SATO_DATA_TABLE = 0xA0,
....................     SMF_SATO_PICLOG = 0xA1,
....................     SMF_SATO_INNER_DIODE_HEADER = 0xA2,
....................     SMF_SATO_INNER_DIODE_DATA = 0xA3,
....................     SMF_SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SMF_SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     SMF_CIGS_DATA_TABLE = 0xC0,
....................     SMF_CIGS_PICLOG = 0xC1,
....................     SMF_CIGS_ENVIRO = 0xC2,
....................     SMF_CIGS_IV1_HEADER = 0xC3,
....................     SMF_CIGS_IV1_DATA = 0xC4,
....................     SMF_CIGS_IV2_HEADER = 0xC5,
....................     SMF_CIGS_IV2_DATA = 0xC6,
.................... };
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS   0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS   0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS     0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS       0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS         0x06AB0FFF
.................... #define CIGS_ENVIRO_START_ADDRESS       0x06AB1000
.................... #define CIGS_ENVIRO_END_ADDRESS         0x06B50FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS   0x06B51000
.................... #define CIGS_IV1_HEADER_END_ADDRESS     0x06BF0FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS     0x06BF1000
.................... #define CIGS_IV1_DATA_END_ADDRESS       0x06FF0FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS   0x06FF1000
.................... #define CIGS_IV2_HEADER_END_ADDRESS     0x07090FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS     0x07091000
.................... #define CIGS_IV2_DATA_END_ADDRESS       0x07490FFF
.................... 
.................... /*
.................... enum smf_memory_id{
....................     // SATO
....................     SATO_DATA_TABLE = 0xA0,
....................     SATO_PICLOG = 0xA1,
....................     SATO_INNER_DIODE_HEADER = 0xA2,
....................     SATO_INNER_DIODE_DATA = 0xA3,
....................     SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     IDF_CIGS_DATA_TABLE = 0xC0,
....................     IDF_CIGS_PICLOG = 0xC1,
....................     IDF_CIGS_ENVIRO = 0xC2,
....................     IDF_CIGS_IV1_HEADER = 0xC3,
....................     IDF_CIGS_IV1_DATA = 0xC4,
....................     IDF_CIGS_IV2_HEADER = 0xC5,
....................     IDF_CIGS_IV2_DATA = 0xC6,
.................... }
.................... */
.................... // DATA ID for CIGS
.................... #define DATA_ID_CIGS_DATA_TABLE 0xC0
.................... #define DATA_ID_CIGS_PICLOG 0xC1
.................... #define DATA_ID_CIGS_ENVIRO 0xC2
.................... #define DATA_ID_CIGS_IV1_HEADER 0xC3
.................... #define DATA_ID_CIGS_IV1_DATA 0xC4
.................... #define DATA_ID_CIGS_IV2_HEADER 0xC5
.................... #define DATA_ID_CIGS_IV2_DATA 0xC6
.................... 
.................... // FLASH ADDRESS for CIGS
.................... #define SMF_DATA_TABLE_HEADER_START_ADDRESS   0x07284000
.................... #define SMF_DATA_TABLE_HEADER_END_ADDRESS     0x07284FFF
.................... #define SMF_DATA_TABLE_DATA_START_ADDRESS     0x07285000
.................... #define SMF_DATA_TABLE_DATA_END_ADDRESS       0x07285FFF
.................... 
.................... #define SMF_PICLOG_HEADER_START_ADDRESS       0x07286000
.................... #define SMF_PICLOG_HEADER_END_ADDRESS         0x07286FFF
.................... #define SMF_PICLOG_DATA_START_ADDRESS         0x07287000
.................... #define SMF_PICLOG_DATA_END_ADDRESS           0x07296FFF
.................... 
.................... #define SMF_ENVIRO_HEADER_START_ADDRESS       0x07297000
.................... #define SMF_ENVIRO_HEADER_END_ADDRESS         0x07297FFF
.................... #define SMF_ENVIRO_DATA_START_ADDRESS         0x07298000
.................... #define SMF_ENVIRO_DATA_END_ADDRESS           0x07337FFF
.................... 
.................... #define SMF_IV1_HEADER_HEADER_START_ADDRESS   0x07338000
.................... #define SMF_IV1_HEADER_HEADER_END_ADDRESS     0x07338FFF
.................... #define SMF_IV1_HEADER_DATA_START_ADDRESS     0x07339000
.................... #define SMF_IV1_HEADER_DATA_END_ADDRESS       0x073D8FFF
.................... 
.................... #define SMF_IV1_DATA_HEADER_START_ADDRESS     0x073D9000
.................... #define SMF_IV1_DATA_HEADER_END_ADDRESS       0x073D9FFF
.................... #define SMF_IV1_DATA_DATA_START_ADDRESS       0x073DA000
.................... #define SMF_IV1_DATA_DATA_END_ADDRESS         0x077D9FFF
.................... 
.................... #define SMF_IV2_HEADER_HEADER_START_ADDRESS   0x077DA000
.................... #define SMF_IV2_HEADER_HEADER_END_ADDRESS     0x077DAFFF
.................... #define SMF_IV2_HEADER_DATA_START_ADDRESS     0x077DB000
.................... #define SMF_IV2_HEADER_DATA_END_ADDRESS       0x0787AFFF
.................... 
.................... #define SMF_IV2_DATA_HEADER_START_ADDRESS     0x0787B000
.................... #define SMF_IV2_DATA_HEADER_END_ADDRESS       0x0787BFFF
.................... #define SMF_IV2_DATA_DATA_START_ADDRESS       0x0787C000
.................... #define SMF_IV2_DATA_DATA_END_ADDRESS         0x07C7BFFF
.................... 
.................... 
.................... // FLASH SIZE for CIGS
.................... #define SMF_DATA_TABLE_SIZE  4096
.................... #define SMF_PICLOG_SIZE     1310720
.................... #define SMF_ENVIRO_SIZE     1310720
.................... #define SMF_IV1_HEADER_SIZE  655360
.................... #define SMF_IV1_DATA_SIZE    4194304
.................... #define SMF_IV2_HEADER_SIZE  655360
.................... #define SMF_IV2_DATA_SIZE    4194304
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... #define CRC_RETRY_COUNT 5     // CRC検証のリトライ回数 (smf_queue.hの値と整合するなら一元化検討)
.................... 
.................... 
.................... const ADDRESS_AREA_T SMF_ADDRESS_TABLE[FLASH_ID_COUNT] = {
....................     { CIGS_DATA_TABLE_START_ADDRESS,   CIGS_DATA_TABLE_END_ADDRESS,   MISF_CIGS_DATA_TABLE_SIZE },
....................     { CIGS_PICLOG_START_ADDRESS,       CIGS_PICLOG_END_ADDRESS,       MISF_CIGS_PICLOG_SIZE },
....................     { CIGS_ENVIRO_START_ADDRESS,       CIGS_ENVIRO_END_ADDRESS,       MISF_CIGS_ENVIRO_SIZE },
....................     { CIGS_IV1_HEADER_START_ADDRESS,   CIGS_IV1_HEADER_END_ADDRESS,   MISF_CIGS_IV1_HEADER_SIZE },
....................     { CIGS_IV1_DATA_START_ADDRESS,     CIGS_IV1_DATA_END_ADDRESS,     MISF_CIGS_IV1_DATA_SIZE },
....................     { CIGS_IV2_HEADER_START_ADDRESS,   CIGS_IV2_HEADER_END_ADDRESS,   MISF_CIGS_IV2_HEADER_SIZE },
....................     { CIGS_IV2_DATA_START_ADDRESS,     CIGS_IV2_DATA_END_ADDRESS,     MISF_CIGS_IV2_DATA_SIZE }
.................... };
.................... 
.................... int1 smf_update_flag[10];
.................... 
.................... void update_smf_header()
.................... {
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... }
.................... 
.................... 
.................... void smf_data_table_init()
.................... {
....................     fprintf(PC, "SMF Data Table Initialize\r\n");
*
07A62:  MOVLW  AC
07A64:  MOVWF  FF6
07A66:  MOVLW  06
07A68:  MOVWF  FF7
07A6A:  MOVLW  00
07A6C:  MOVWF  FF8
07A6E:  CALL   22FE
....................     for ( unsigned int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_IV2_DATA_END_ADDRESS; address += SUBSECTOR_SIZE )
07A72:  MOVLW  06
07A74:  MOVLB  1
07A76:  MOVWF  xF8
07A78:  MOVLW  AA
07A7A:  MOVWF  xF7
07A7C:  CLRF   xF6
07A7E:  CLRF   xF5
07A80:  MOVLB  0
07A82:  MOVLB  1
07A84:  MOVF   xF8,W
07A86:  SUBLW  07
07A88:  BTFSC  FD8.0
07A8A:  BRA    7A92
07A8C:  MOVLB  0
07A8E:  GOTO   7B14
07A92:  MOVLB  0
07A94:  BTFSS  FD8.2
07A96:  GOTO   7ADC
07A9A:  MOVLB  1
07A9C:  MOVF   xF7,W
07A9E:  SUBLW  49
07AA0:  BTFSC  FD8.0
07AA2:  BRA    7AAA
07AA4:  MOVLB  0
07AA6:  GOTO   7B14
07AAA:  MOVLB  0
07AAC:  BTFSS  FD8.2
07AAE:  GOTO   7ADC
07AB2:  MOVLB  1
07AB4:  MOVF   xF6,W
07AB6:  SUBLW  0F
07AB8:  BTFSC  FD8.0
07ABA:  BRA    7AC2
07ABC:  MOVLB  0
07ABE:  GOTO   7B14
07AC2:  MOVLB  0
07AC4:  BTFSS  FD8.2
07AC6:  GOTO   7ADC
07ACA:  MOVLB  1
07ACC:  MOVF   xF5,W
07ACE:  SUBLW  FE
07AD0:  BTFSC  FD8.0
07AD2:  BRA    7ADA
07AD4:  MOVLB  0
07AD6:  GOTO   7B14
07ADA:  MOVLB  0
....................     {
....................         subsector_4kByte_erase(smf, address);
07ADC:  MOVFF  119,A93
07AE0:  MOVFF  118,A92
07AE4:  MOVFF  117,A91
07AE8:  MOVFF  116,A90
07AEC:  MOVFF  1F8,A97
07AF0:  MOVFF  1F7,A96
07AF4:  MOVFF  1F6,A95
07AF8:  MOVFF  1F5,A94
07AFC:  CALL   4D5A
07B00:  MOVLW  10
07B02:  MOVLB  1
07B04:  ADDWF  xF6,F
07B06:  MOVLW  00
07B08:  ADDWFC xF7,F
07B0A:  MOVLW  00
07B0C:  ADDWFC xF8,F
07B0E:  MOVLB  0
07B10:  GOTO   7A82
....................     }
....................     smf_data_table_t smf_data_table = {0};
07B14:  MOVLB  1
07B16:  CLRF   xF9
07B18:  CLRF   xFA
07B1A:  CLRF   xFB
07B1C:  CLRF   xFC
07B1E:  CLRF   xFD
07B20:  CLRF   xFE
07B22:  CLRF   xFF
07B24:  MOVLB  2
07B26:  CLRF   x00
07B28:  CLRF   x01
07B2A:  CLRF   x02
07B2C:  CLRF   x03
07B2E:  CLRF   x04
07B30:  CLRF   x05
07B32:  CLRF   x06
07B34:  CLRF   x07
07B36:  CLRF   x08
07B38:  CLRF   x09
07B3A:  CLRF   x0A
07B3C:  CLRF   x0B
07B3E:  CLRF   x0C
07B40:  CLRF   x0D
07B42:  CLRF   x0E
07B44:  CLRF   x0F
07B46:  CLRF   x10
07B48:  CLRF   x11
07B4A:  CLRF   x12
07B4C:  CLRF   x13
07B4E:  CLRF   x14
07B50:  CLRF   x15
07B52:  CLRF   x16
07B54:  CLRF   x17
07B56:  CLRF   x18
07B58:  CLRF   x19
07B5A:  CLRF   x1A
07B5C:  CLRF   x1B
07B5E:  CLRF   x1C
07B60:  CLRF   x1D
07B62:  CLRF   x1E
07B64:  CLRF   x1F
07B66:  CLRF   x20
07B68:  CLRF   x21
07B6A:  CLRF   x22
07B6C:  CLRF   x23
07B6E:  CLRF   x24
07B70:  CLRF   x25
07B72:  CLRF   x26
07B74:  CLRF   x27
07B76:  CLRF   x28
07B78:  CLRF   x29
07B7A:  CLRF   x2A
07B7C:  CLRF   x2B
07B7E:  CLRF   x2C
07B80:  CLRF   x2D
07B82:  CLRF   x2E
07B84:  CLRF   x2F
07B86:  CLRF   x30
07B88:  CLRF   x31
07B8A:  CLRF   x32
07B8C:  CLRF   x33
07B8E:  CLRF   x34
07B90:  CLRF   x35
07B92:  CLRF   x36
07B94:  CLRF   x37
07B96:  CLRF   x38
....................     smf_data_table.fields.crc = calc_crc8(smf_data_table.bytes, PACKET_SIZE - 1); // CRCを計算して初期化    
07B98:  MOVLW  01
07B9A:  MOVLB  A
07B9C:  MOVWF  xEC
07B9E:  MOVLW  F9
07BA0:  MOVWF  xEB
07BA2:  MOVLW  3F
07BA4:  MOVWF  xED
07BA6:  MOVLB  0
07BA8:  CALL   310C
07BAC:  MOVFF  01,238
....................     write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table.bytes, PACKET_SIZE);
07BB0:  MOVFF  119,AEE
07BB4:  MOVFF  118,AED
07BB8:  MOVFF  117,AEC
07BBC:  MOVFF  116,AEB
07BC0:  MOVLW  06
07BC2:  MOVLB  A
07BC4:  MOVWF  xF2
07BC6:  MOVLW  AA
07BC8:  MOVWF  xF1
07BCA:  CLRF   xF0
07BCC:  CLRF   xEF
07BCE:  MOVLW  01
07BD0:  MOVWF  xF4
07BD2:  MOVLW  F9
07BD4:  MOVWF  xF3
07BD6:  CLRF   xF6
07BD8:  MOVLW  40
07BDA:  MOVWF  xF5
07BDC:  MOVLB  0
07BDE:  CALL   3F56
07BE2:  RETURN 0
.................... }
.................... 
.................... void read_smf_header(smf_data_table_t *smf_data_table)
.................... {
....................     int8 retry_count;
.................... 
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
....................     {
....................         // ヘッダを読み出し
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
....................         print_smf_counter_status(smf_data_table);
.................... 
....................         // CRC検証
....................         if (is_crc_valid(smf_data_table->bytes, PACKET_SIZE))
....................         {
....................             return; // 成功したら終了
....................         }
....................         // NGなら少し待って再試行
....................         printf("CRC ERROR %d\r\n", retry_count + 1);
....................     }
.................... 
....................     // ここまで来たら失敗
....................     printf("CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
.................... 
....................     // 読み込み失敗時は初期化しておく
....................     smf_data_table_init();
....................     read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
.................... 
....................     return;
.................... }
.................... 
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table)
.................... {
....................     int1 crc_valid = 0;
....................     int8 readdata[PACKET_SIZE];
....................     smf_data_table->fields.crc = calc_crc8(smf_data_table->bytes, PACKET_SIZE - 1); // CRCを更新
.................... 
....................     for (int8 retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE); // ヘッダーを書き込み
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
....................         if (is_crc_valid(readdata, PACKET_SIZE))
....................         {
....................             crc_valid = 1; // FIX            break;
....................         }
....................     }
....................     if (!crc_valid)
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
....................         // return; 
....................     }
.................... }
.................... 
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table)
.................... {
....................     fprintf(PC, "\r\n[SMF Counter Status]\r\n");
....................     fprintf(PC, "\tPARTITION\tUSED\t\tRESERVE\r\n");
....................     fprintf(PC, "\t---------\t----------\t----------\r\n");
....................     fprintf(PC, "\tPICLOG\t\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_PICLOG_DATA].used_size, smf_data_table->fields.headers[CIGS_PICLOG_DATA].reserved);
....................     fprintf(PC, "\tENVIRO\t\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_ENVIRO_DATA].used_size, smf_data_table->fields.headers[CIGS_ENVIRO_DATA].reserved);
....................     fprintf(PC, "\tIV1_HEADER\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_IV1_HEADER].used_size, smf_data_table->fields.headers[CIGS_IV1_HEADER].reserved);
....................     fprintf(PC, "\tIV1_DATA\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_IV1_DATA].used_size, smf_data_table->fields.headers[CIGS_IV1_DATA].reserved);
....................     fprintf(PC, "\tIV2_HEADER\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_IV2_HEADER].used_size, smf_data_table->fields.headers[CIGS_IV2_HEADER].reserved);
....................     fprintf(PC, "\tIV2_DATA\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_IV2_DATA].used_size, smf_data_table->fields.headers[CIGS_IV2_DATA].reserved);
....................     fprintf(PC, "\t==========================================\r\n\r\n");
.................... }
.................... 
.................... void smf_write(FlashOperationStruct *smf_queue_ptr)
.................... {
....................     fprintf(PC, "\r\n_______________________________\r\n");
*
10ADE:  MOVLW  6E
10AE0:  MOVWF  FF6
10AE2:  MOVLW  08
10AE4:  MOVWF  FF7
10AE6:  MOVLW  00
10AE8:  MOVWF  FF8
10AEA:  CALL   22FE
....................     fprintf(PC, "_________Start copy_data_________\r\n");
10AEE:  MOVLW  92
10AF0:  MOVWF  FF6
10AF2:  MOVLW  08
10AF4:  MOVWF  FF7
10AF6:  MOVLW  00
10AF8:  MOVWF  FF8
10AFA:  CALL   22FE
....................     
....................     // 接続確認
....................     if (!is_connect(mis_fm))
10AFE:  MOVFF  115,253
10B02:  MOVFF  114,252
10B06:  MOVFF  113,251
10B0A:  MOVFF  112,250
10B0E:  CALL   2E24
10B12:  MOVF   01,F
10B14:  BTFSS  FD8.2
10B16:  GOTO   10B2E
....................     {
....................         fprintf(PC, "Error: MIS FM is not connected\r\n");
10B1A:  MOVLW  B6
10B1C:  MOVWF  FF6
10B1E:  MOVLW  08
10B20:  MOVWF  FF7
10B22:  MOVLW  00
10B24:  MOVWF  FF8
10B26:  CALL   22FE
....................         return;
10B2A:  GOTO   11A0E
....................     }    
....................     if (!is_connect(smf))
10B2E:  MOVFF  119,253
10B32:  MOVFF  118,252
10B36:  MOVFF  117,251
10B3A:  MOVFF  116,250
10B3E:  CALL   2E24
10B42:  MOVF   01,F
10B44:  BTFSS  FD8.2
10B46:  GOTO   10B5E
....................     {
....................         fprintf(PC, "Error: SMF is not connected\r\n");
10B4A:  MOVLW  D8
10B4C:  MOVWF  FF6
10B4E:  MOVLW  08
10B50:  MOVWF  FF7
10B52:  MOVLW  00
10B54:  MOVWF  FF8
10B56:  CALL   22FE
....................         return;
10B5A:  GOTO   11A0E
....................     }    
.................... 
.................... 
....................     // smf_data_table_t smf_data_table;
....................     // read_smf_header(&smf_data_table);
.................... 
.................... 
....................     unsigned int32 misf_write_src;
....................     unsigned int32 misf_write_size;
....................     unsigned int32 used_size = misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter;
10B5E:  MOVLB  1
10B60:  MOVF   xA1,W
10B62:  MOVWF  FE9
10B64:  MOVF   xA2,W
10B66:  MOVWF  FEA
10B68:  MOVF   FEF,W
10B6A:  MULLW  0A
10B6C:  MOVF   FF3,W
10B6E:  MOVLB  2
10B70:  CLRF   x11
10B72:  MOVWF  x10
10B74:  MOVLW  04
10B76:  ADDWF  x10,W
10B78:  MOVWF  01
10B7A:  MOVLW  00
10B7C:  ADDWFC x11,W
10B7E:  MOVWF  03
10B80:  MOVF   01,W
10B82:  ADDLW  22
10B84:  MOVWF  FE9
10B86:  MOVLW  01
10B88:  ADDWFC 03,W
10B8A:  MOVWF  FEA
10B8C:  MOVFF  FEF,1AB
10B90:  MOVFF  FEC,1AC
10B94:  MOVFF  FEC,1AD
10B98:  MOVFF  FEC,1AE
10B9C:  MOVF   FED,F
10B9E:  MOVF   FED,F
10BA0:  MOVF   FED,F
....................     //アドレスと自動更新
....................     if (smf_queue_ptr->source_type == SOURCE_MISF_UNCOPIED )
10BA2:  MOVLW  03
10BA4:  MOVLB  1
10BA6:  ADDWF  xA1,W
10BA8:  MOVWF  01
10BAA:  MOVLW  00
10BAC:  ADDWFC xA2,W
10BAE:  MOVWF  03
10BB0:  MOVF   01,W
10BB2:  MOVWF  FE9
10BB4:  MOVFF  03,FEA
10BB8:  BTFSS  FEF.0
10BBA:  BRA    10BC2
10BBC:  MOVLB  0
10BBE:  GOTO   10D04
10BC2:  MOVLB  0
....................     {
....................         misf_write_src = MISF_ADDRESS_TABLE[smf_queue_ptr->mission_id].start + misf_counter_table[smf_queue_ptr->mission_id].used_counter - misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter;
10BC4:  MOVLB  1
10BC6:  MOVF   xA1,W
10BC8:  MOVWF  FE9
10BCA:  MOVF   xA2,W
10BCC:  MOVWF  FEA
10BCE:  MOVF   FEF,W
10BD0:  MULLW  0C
10BD2:  MOVF   FF3,W
10BD4:  MOVLB  2
10BD6:  CLRF   x11
10BD8:  MOVWF  x10
10BDA:  MOVFF  211,03
10BDE:  MOVF   x10,W
10BE0:  MOVLB  0
10BE2:  CALL   00E6
10BE6:  MOVWF  00
10BE8:  TBLRD*+
10BEA:  MOVFF  FF5,01
10BEE:  TBLRD*+
10BF0:  MOVFF  FF5,02
10BF4:  TBLRD*+
10BF6:  MOVFF  FF5,03
10BFA:  MOVFF  03,215
10BFE:  MOVFF  02,214
10C02:  MOVFF  01,213
10C06:  MOVFF  00,212
10C0A:  MOVLB  1
10C0C:  MOVF   xA1,W
10C0E:  MOVWF  FE9
10C10:  MOVF   xA2,W
10C12:  MOVWF  FEA
10C14:  MOVF   FEF,W
10C16:  MULLW  0A
10C18:  MOVF   FF3,W
10C1A:  MOVLB  2
10C1C:  CLRF   x17
10C1E:  MOVWF  x16
10C20:  MOVLW  22
10C22:  ADDWF  x16,W
10C24:  MOVWF  FE9
10C26:  MOVLW  01
10C28:  ADDWFC x17,W
10C2A:  MOVWF  FEA
10C2C:  MOVFF  FEF,00
10C30:  MOVFF  FEC,01
10C34:  MOVFF  FEC,02
10C38:  MOVFF  FEC,03
10C3C:  MOVF   FED,F
10C3E:  MOVF   FED,F
10C40:  MOVF   FED,F
10C42:  MOVF   00,W
10C44:  ADDWF  x12,F
10C46:  MOVF   01,W
10C48:  ADDWFC x13,F
10C4A:  MOVF   02,W
10C4C:  ADDWFC x14,F
10C4E:  MOVF   03,W
10C50:  ADDWFC x15,F
10C52:  MOVLB  1
10C54:  MOVF   xA1,W
10C56:  MOVWF  FE9
10C58:  MOVF   xA2,W
10C5A:  MOVWF  FEA
10C5C:  MOVF   FEF,W
10C5E:  MULLW  0A
10C60:  MOVF   FF3,W
10C62:  MOVLB  2
10C64:  CLRF   x19
10C66:  MOVWF  x18
10C68:  MOVLW  04
10C6A:  ADDWF  x18,W
10C6C:  MOVWF  01
10C6E:  MOVLW  00
10C70:  ADDWFC x19,W
10C72:  MOVWF  03
10C74:  MOVF   01,W
10C76:  ADDLW  22
10C78:  MOVWF  FE9
10C7A:  MOVLW  01
10C7C:  ADDWFC 03,W
10C7E:  MOVWF  FEA
10C80:  MOVFF  FEF,00
10C84:  MOVFF  FEC,01
10C88:  MOVFF  FEC,02
10C8C:  MOVFF  FEC,03
10C90:  MOVF   FED,F
10C92:  MOVF   FED,F
10C94:  MOVF   FED,F
10C96:  MOVF   00,W
10C98:  SUBWF  x12,W
10C9A:  MOVLB  1
10C9C:  MOVWF  xA3
10C9E:  MOVF   01,W
10CA0:  MOVLB  2
10CA2:  SUBWFB x13,W
10CA4:  MOVLB  1
10CA6:  MOVWF  xA4
10CA8:  MOVF   02,W
10CAA:  MOVLB  2
10CAC:  SUBWFB x14,W
10CAE:  MOVLB  1
10CB0:  MOVWF  xA5
10CB2:  MOVF   03,W
10CB4:  MOVLB  2
10CB6:  SUBWFB x15,W
10CB8:  MOVLB  1
10CBA:  MOVWF  xA6
....................         misf_write_size = misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter;
10CBC:  MOVF   xA1,W
10CBE:  MOVWF  FE9
10CC0:  MOVF   xA2,W
10CC2:  MOVWF  FEA
10CC4:  MOVF   FEF,W
10CC6:  MULLW  0A
10CC8:  MOVF   FF3,W
10CCA:  MOVLB  2
10CCC:  CLRF   x11
10CCE:  MOVWF  x10
10CD0:  MOVLW  04
10CD2:  ADDWF  x10,W
10CD4:  MOVWF  01
10CD6:  MOVLW  00
10CD8:  ADDWFC x11,W
10CDA:  MOVWF  03
10CDC:  MOVF   01,W
10CDE:  ADDLW  22
10CE0:  MOVWF  FE9
10CE2:  MOVLW  01
10CE4:  ADDWFC 03,W
10CE6:  MOVWF  FEA
10CE8:  MOVFF  FEF,1A7
10CEC:  MOVFF  FEC,1A8
10CF0:  MOVFF  FEC,1A9
10CF4:  MOVFF  FEC,1AA
10CF8:  MOVF   FED,F
10CFA:  MOVF   FED,F
10CFC:  MOVF   FED,F
10CFE:  MOVLB  0
....................     }else if(smf_queue_ptr->source_type == SOURCE_MISF_MANUAL)
10D00:  GOTO   10D6E
10D04:  MOVLW  03
10D06:  MOVLB  1
10D08:  ADDWF  xA1,W
10D0A:  MOVWF  01
10D0C:  MOVLW  00
10D0E:  ADDWFC xA2,W
10D10:  MOVWF  03
10D12:  MOVF   01,W
10D14:  MOVWF  FE9
10D16:  MOVFF  03,FEA
10D1A:  BTFSC  FEF.0
10D1C:  BRA    10D24
10D1E:  MOVLB  0
10D20:  GOTO   10D6E
10D24:  MOVLB  0
....................     {
....................         misf_write_src = smf_queue_ptr->misf_start_addr;
10D26:  MOVLW  04
10D28:  MOVLB  1
10D2A:  ADDWF  xA1,W
10D2C:  MOVWF  FE9
10D2E:  MOVLW  00
10D30:  ADDWFC xA2,W
10D32:  MOVWF  FEA
10D34:  MOVFF  FEF,1A3
10D38:  MOVFF  FEC,1A4
10D3C:  MOVFF  FEC,1A5
10D40:  MOVFF  FEC,1A6
10D44:  MOVF   FED,F
10D46:  MOVF   FED,F
10D48:  MOVF   FED,F
....................         misf_write_size = smf_queue_ptr->misf_size;
10D4A:  MOVLW  08
10D4C:  ADDWF  xA1,W
10D4E:  MOVWF  FE9
10D50:  MOVLW  00
10D52:  ADDWFC xA2,W
10D54:  MOVWF  FEA
10D56:  MOVFF  FEF,1A7
10D5A:  MOVFF  FEC,1A8
10D5E:  MOVFF  FEC,1A9
10D62:  MOVFF  FEC,1AA
10D66:  MOVF   FED,F
10D68:  MOVF   FED,F
10D6A:  MOVF   FED,F
10D6C:  MOVLB  0
....................     }
.................... 
....................     unsigned int32 smf_header_address_start;
....................     unsigned int32 smf_data_address_start;
....................     unsigned int32 smf_data_address_end;
....................     unsigned int32 misf_address_start = MISF_ADDRESS_TABLE[smf_queue_ptr->mission_id].start;
....................     unsigned int32 misf_address_end   = MISF_ADDRESS_TABLE[smf_queue_ptr->mission_id].end;
10D6E:  MOVLB  1
10D70:  MOVF   xA1,W
10D72:  MOVWF  FE9
10D74:  MOVF   xA2,W
10D76:  MOVWF  FEA
10D78:  MOVF   FEF,W
10D7A:  MULLW  0C
10D7C:  MOVF   FF3,W
10D7E:  MOVLB  2
10D80:  CLRF   x11
10D82:  MOVWF  x10
10D84:  MOVFF  211,03
10D88:  MOVF   x10,W
10D8A:  MOVLB  0
10D8C:  CALL   00E6
10D90:  MOVWF  00
10D92:  TBLRD*+
10D94:  MOVFF  FF5,01
10D98:  TBLRD*+
10D9A:  MOVFF  FF5,02
10D9E:  TBLRD*+
10DA0:  MOVFF  FF5,03
10DA4:  MOVFF  03,1BE
10DA8:  MOVFF  02,1BD
10DAC:  MOVFF  01,1BC
10DB0:  MOVFF  00,1BB
10DB4:  MOVLB  1
10DB6:  MOVF   xA1,W
10DB8:  MOVWF  FE9
10DBA:  MOVF   xA2,W
10DBC:  MOVWF  FEA
10DBE:  MOVF   FEF,W
10DC0:  MULLW  0C
10DC2:  MOVF   FF3,W
10DC4:  MOVLB  2
10DC6:  CLRF   x13
10DC8:  MOVWF  x12
10DCA:  MOVLW  04
10DCC:  ADDWF  x12,W
10DCE:  MOVWF  01
10DD0:  MOVLW  00
10DD2:  ADDWFC x13,W
10DD4:  MOVWF  03
10DD6:  MOVF   01,W
10DD8:  MOVLB  0
10DDA:  CALL   00E6
10DDE:  MOVWF  00
10DE0:  TBLRD*+
10DE2:  MOVFF  FF5,01
10DE6:  TBLRD*+
10DE8:  MOVFF  FF5,02
10DEC:  TBLRD*+
10DEE:  MOVFF  FF5,03
10DF2:  MOVFF  03,1C2
10DF6:  MOVFF  02,1C1
10DFA:  MOVFF  01,1C0
10DFE:  MOVFF  00,1BF
.................... 
....................     smf_update_flag[smf_queue_ptr->mission_id] = 1;
10E02:  MOVLB  1
10E04:  MOVF   xA1,W
10E06:  MOVWF  FE9
10E08:  MOVF   xA2,W
10E0A:  MOVWF  FEA
10E0C:  MOVFF  FEA,211
10E10:  MOVFF  FE9,210
10E14:  MOVFF  FEF,B09
10E18:  MOVLW  01
10E1A:  MOVLB  B
10E1C:  MOVWF  x0A
10E1E:  MOVLW  01
10E20:  MOVWF  x0C
10E22:  MOVLW  7A
10E24:  MOVWF  x0B
10E26:  MOVLB  0
10E28:  CALL   2ADC
10E2C:  MOVFF  211,FEA
10E30:  MOVFF  210,FE9
....................     switch ( smf_queue_ptr->mission_id )
10E34:  MOVLB  1
10E36:  MOVF   xA1,W
10E38:  MOVWF  FE9
10E3A:  MOVF   xA2,W
10E3C:  MOVWF  FEA
10E3E:  MOVF   FEF,W
10E40:  XORLW  00
10E42:  MOVLB  0
10E44:  BTFSC  FD8.2
10E46:  GOTO   10E7E
10E4A:  XORLW  01
10E4C:  BTFSC  FD8.2
10E4E:  GOTO   10EC0
10E52:  XORLW  03
10E54:  BTFSC  FD8.2
10E56:  GOTO   10F02
10E5A:  XORLW  01
10E5C:  BTFSC  FD8.2
10E5E:  GOTO   10F44
10E62:  XORLW  07
10E64:  BTFSC  FD8.2
10E66:  GOTO   10F86
10E6A:  XORLW  01
10E6C:  BTFSC  FD8.2
10E6E:  GOTO   10FC8
10E72:  XORLW  03
10E74:  BTFSC  FD8.2
10E76:  GOTO   1100A
10E7A:  GOTO   1104C
....................     {
....................         case CIGS_DATA_TABLE:
....................             fprintf(PC, "FLASH ID: CIGS_DATA_TABLE\r\n");
10E7E:  MOVLW  F6
10E80:  MOVWF  FF6
10E82:  MOVLW  08
10E84:  MOVWF  FF7
10E86:  MOVLW  00
10E88:  MOVWF  FF8
10E8A:  CALL   22FE
....................             smf_header_address_start = SMF_DATA_TABLE_HEADER_START_ADDRESS;
10E8E:  MOVLW  07
10E90:  MOVLB  1
10E92:  MOVWF  xB2
10E94:  MOVLW  28
10E96:  MOVWF  xB1
10E98:  MOVLW  40
10E9A:  MOVWF  xB0
10E9C:  CLRF   xAF
....................             smf_data_address_start = SMF_DATA_TABLE_DATA_START_ADDRESS;
10E9E:  MOVLW  07
10EA0:  MOVWF  xB6
10EA2:  MOVLW  28
10EA4:  MOVWF  xB5
10EA6:  MOVLW  50
10EA8:  MOVWF  xB4
10EAA:  CLRF   xB3
....................             smf_data_address_end = SMF_DATA_TABLE_DATA_END_ADDRESS;
10EAC:  MOVLW  07
10EAE:  MOVWF  xBA
10EB0:  MOVLW  28
10EB2:  MOVWF  xB9
10EB4:  MOVLW  5F
10EB6:  MOVWF  xB8
10EB8:  SETF   xB7
....................             break;
10EBA:  MOVLB  0
10EBC:  GOTO   110A2
....................         case CIGS_PICLOG_DATA:
....................             fprintf(PC, "FLASH ID: CIGS_PICLOG_DATA\r\n");
10EC0:  MOVLW  12
10EC2:  MOVWF  FF6
10EC4:  MOVLW  09
10EC6:  MOVWF  FF7
10EC8:  MOVLW  00
10ECA:  MOVWF  FF8
10ECC:  CALL   22FE
....................             smf_header_address_start = SMF_PICLOG_HEADER_START_ADDRESS;
10ED0:  MOVLW  07
10ED2:  MOVLB  1
10ED4:  MOVWF  xB2
10ED6:  MOVLW  28
10ED8:  MOVWF  xB1
10EDA:  MOVLW  60
10EDC:  MOVWF  xB0
10EDE:  CLRF   xAF
....................             smf_data_address_start = SMF_PICLOG_DATA_START_ADDRESS;
10EE0:  MOVLW  07
10EE2:  MOVWF  xB6
10EE4:  MOVLW  28
10EE6:  MOVWF  xB5
10EE8:  MOVLW  70
10EEA:  MOVWF  xB4
10EEC:  CLRF   xB3
....................             smf_data_address_end = SMF_PICLOG_DATA_END_ADDRESS;
10EEE:  MOVLW  07
10EF0:  MOVWF  xBA
10EF2:  MOVLW  29
10EF4:  MOVWF  xB9
10EF6:  MOVLW  6F
10EF8:  MOVWF  xB8
10EFA:  SETF   xB7
....................             break;
10EFC:  MOVLB  0
10EFE:  GOTO   110A2
....................         case CIGS_ENVIRO_DATA:
....................             fprintf(PC, "FLASH ID: CIGS_ENVIRO_DATA\r\n");
10F02:  MOVLW  30
10F04:  MOVWF  FF6
10F06:  MOVLW  09
10F08:  MOVWF  FF7
10F0A:  MOVLW  00
10F0C:  MOVWF  FF8
10F0E:  CALL   22FE
....................             smf_header_address_start = SMF_ENVIRO_HEADER_START_ADDRESS;
10F12:  MOVLW  07
10F14:  MOVLB  1
10F16:  MOVWF  xB2
10F18:  MOVLW  29
10F1A:  MOVWF  xB1
10F1C:  MOVLW  70
10F1E:  MOVWF  xB0
10F20:  CLRF   xAF
....................             smf_data_address_start = SMF_ENVIRO_DATA_START_ADDRESS;
10F22:  MOVLW  07
10F24:  MOVWF  xB6
10F26:  MOVLW  29
10F28:  MOVWF  xB5
10F2A:  MOVLW  80
10F2C:  MOVWF  xB4
10F2E:  CLRF   xB3
....................             smf_data_address_end = SMF_ENVIRO_DATA_END_ADDRESS;
10F30:  MOVLW  07
10F32:  MOVWF  xBA
10F34:  MOVLW  33
10F36:  MOVWF  xB9
10F38:  MOVLW  7F
10F3A:  MOVWF  xB8
10F3C:  SETF   xB7
....................             break;
10F3E:  MOVLB  0
10F40:  GOTO   110A2
....................         case CIGS_IV1_HEADER:
....................             fprintf(PC, "FLASH ID: CIGS_IV1_HEADER\r\n");
10F44:  MOVLW  4E
10F46:  MOVWF  FF6
10F48:  MOVLW  09
10F4A:  MOVWF  FF7
10F4C:  MOVLW  00
10F4E:  MOVWF  FF8
10F50:  CALL   22FE
....................             smf_header_address_start = SMF_IV1_HEADER_HEADER_START_ADDRESS;
10F54:  MOVLW  07
10F56:  MOVLB  1
10F58:  MOVWF  xB2
10F5A:  MOVLW  33
10F5C:  MOVWF  xB1
10F5E:  MOVLW  80
10F60:  MOVWF  xB0
10F62:  CLRF   xAF
....................             smf_data_address_start = SMF_IV1_HEADER_DATA_START_ADDRESS;
10F64:  MOVLW  07
10F66:  MOVWF  xB6
10F68:  MOVLW  33
10F6A:  MOVWF  xB5
10F6C:  MOVLW  90
10F6E:  MOVWF  xB4
10F70:  CLRF   xB3
....................             smf_data_address_end = SMF_IV1_HEADER_DATA_END_ADDRESS;
10F72:  MOVLW  07
10F74:  MOVWF  xBA
10F76:  MOVLW  3D
10F78:  MOVWF  xB9
10F7A:  MOVLW  8F
10F7C:  MOVWF  xB8
10F7E:  SETF   xB7
....................             break;
10F80:  MOVLB  0
10F82:  GOTO   110A2
....................         case CIGS_IV1_DATA:
....................             fprintf(PC, "FLASH ID: CIGS_IV1_DATA\r\n");
10F86:  MOVLW  6A
10F88:  MOVWF  FF6
10F8A:  MOVLW  09
10F8C:  MOVWF  FF7
10F8E:  MOVLW  00
10F90:  MOVWF  FF8
10F92:  CALL   22FE
....................             smf_header_address_start = SMF_IV1_DATA_HEADER_START_ADDRESS;
10F96:  MOVLW  07
10F98:  MOVLB  1
10F9A:  MOVWF  xB2
10F9C:  MOVLW  3D
10F9E:  MOVWF  xB1
10FA0:  MOVLW  90
10FA2:  MOVWF  xB0
10FA4:  CLRF   xAF
....................             smf_data_address_start = SMF_IV1_DATA_DATA_START_ADDRESS;
10FA6:  MOVLW  07
10FA8:  MOVWF  xB6
10FAA:  MOVLW  3D
10FAC:  MOVWF  xB5
10FAE:  MOVLW  A0
10FB0:  MOVWF  xB4
10FB2:  CLRF   xB3
....................             smf_data_address_end = SMF_IV1_DATA_DATA_END_ADDRESS;
10FB4:  MOVLW  07
10FB6:  MOVWF  xBA
10FB8:  MOVLW  7D
10FBA:  MOVWF  xB9
10FBC:  MOVLW  9F
10FBE:  MOVWF  xB8
10FC0:  SETF   xB7
....................             break;
10FC2:  MOVLB  0
10FC4:  GOTO   110A2
....................         case CIGS_IV2_HEADER:
....................             fprintf(PC, "FLASH ID: CIGS_IV2_HEADER\r\n");
10FC8:  MOVLW  84
10FCA:  MOVWF  FF6
10FCC:  MOVLW  09
10FCE:  MOVWF  FF7
10FD0:  MOVLW  00
10FD2:  MOVWF  FF8
10FD4:  CALL   22FE
....................             smf_header_address_start = SMF_IV2_HEADER_HEADER_START_ADDRESS;
10FD8:  MOVLW  07
10FDA:  MOVLB  1
10FDC:  MOVWF  xB2
10FDE:  MOVLW  7D
10FE0:  MOVWF  xB1
10FE2:  MOVLW  A0
10FE4:  MOVWF  xB0
10FE6:  CLRF   xAF
....................             smf_data_address_start = SMF_IV2_HEADER_DATA_START_ADDRESS;
10FE8:  MOVLW  07
10FEA:  MOVWF  xB6
10FEC:  MOVLW  7D
10FEE:  MOVWF  xB5
10FF0:  MOVLW  B0
10FF2:  MOVWF  xB4
10FF4:  CLRF   xB3
....................             smf_data_address_end = SMF_IV2_HEADER_DATA_END_ADDRESS;
10FF6:  MOVLW  07
10FF8:  MOVWF  xBA
10FFA:  MOVLW  87
10FFC:  MOVWF  xB9
10FFE:  MOVLW  AF
11000:  MOVWF  xB8
11002:  SETF   xB7
....................             break;
11004:  MOVLB  0
11006:  GOTO   110A2
....................         case CIGS_IV2_DATA:
....................             fprintf(PC, "FLASH ID: CIGS_IV2_DATA\r\n");
1100A:  MOVLW  A0
1100C:  MOVWF  FF6
1100E:  MOVLW  09
11010:  MOVWF  FF7
11012:  MOVLW  00
11014:  MOVWF  FF8
11016:  CALL   22FE
....................             smf_header_address_start = SMF_IV2_DATA_HEADER_START_ADDRESS;
1101A:  MOVLW  07
1101C:  MOVLB  1
1101E:  MOVWF  xB2
11020:  MOVLW  87
11022:  MOVWF  xB1
11024:  MOVLW  B0
11026:  MOVWF  xB0
11028:  CLRF   xAF
....................             smf_data_address_start = SMF_IV2_DATA_DATA_START_ADDRESS;
1102A:  MOVLW  07
1102C:  MOVWF  xB6
1102E:  MOVLW  87
11030:  MOVWF  xB5
11032:  MOVLW  C0
11034:  MOVWF  xB4
11036:  CLRF   xB3
....................             smf_data_address_end = SMF_IV2_DATA_DATA_END_ADDRESS;
11038:  MOVLW  07
1103A:  MOVWF  xBA
1103C:  MOVLW  C7
1103E:  MOVWF  xB9
11040:  MOVLW  BF
11042:  MOVWF  xB8
11044:  SETF   xB7
....................             break;
11046:  MOVLB  0
11048:  GOTO   110A2
....................         default:
....................             fprintf(PC, "Error: Invalid mission ID %d\r\n", smf_queue_ptr->mission_id);
1104C:  MOVLB  1
1104E:  MOVF   xA1,W
11050:  MOVWF  FE9
11052:  MOVF   xA2,W
11054:  MOVWF  FEA
11056:  MOVFF  FEF,210
1105A:  MOVLW  BA
1105C:  MOVWF  FF6
1105E:  MOVLW  09
11060:  MOVWF  FF7
11062:  MOVLW  00
11064:  MOVWF  FF8
11066:  MOVLW  1A
11068:  MOVLB  A
1106A:  MOVWF  x4E
1106C:  MOVLB  0
1106E:  CALL   2334
11072:  MOVFF  210,211
11076:  MOVLW  18
11078:  MOVLB  2
1107A:  MOVWF  x12
1107C:  MOVLB  0
1107E:  GOTO   FEA8
11082:  MOVLW  0D
11084:  BTFSS  FA6.6
11086:  GOTO   11084
1108A:  MOVLB  E
1108C:  MOVWF  xF9
1108E:  MOVLW  0A
11090:  MOVLB  0
11092:  BTFSS  FA6.6
11094:  GOTO   11092
11098:  MOVLB  E
1109A:  MOVWF  xF9
....................             return;
1109C:  MOVLB  0
1109E:  GOTO   11A0E
....................     }
.................... 
....................     // Print MISF ADDRESS
....................     fprintf(PC,"[MISF ADDRESS]\r\n");
110A2:  MOVLW  DA
110A4:  MOVWF  FF6
110A6:  MOVLW  09
110A8:  MOVWF  FF7
110AA:  MOVLW  00
110AC:  MOVWF  FF8
110AE:  CALL   22FE
....................     fprintf(PC, "\tParam\tData\r\n");
110B2:  MOVLW  EC
110B4:  MOVWF  FF6
110B6:  MOVLW  09
110B8:  MOVWF  FF7
110BA:  MOVLW  00
110BC:  MOVWF  FF8
110BE:  CALL   22FE
....................     fprintf(PC, "\t-----\t----------\r\n");
110C2:  MOVLW  FA
110C4:  MOVWF  FF6
110C6:  MOVLW  09
110C8:  MOVWF  FF7
110CA:  MOVLW  00
110CC:  MOVWF  FF8
110CE:  CALL   22FE
....................     fprintf(PC, "\tSTART\t0x%08LX\r\n", misf_address_start);
110D2:  MOVLW  0E
110D4:  MOVWF  FF6
110D6:  MOVLW  0A
110D8:  MOVWF  FF7
110DA:  MOVLW  00
110DC:  MOVWF  FF8
110DE:  MOVLW  09
110E0:  MOVLB  A
110E2:  MOVWF  x4E
110E4:  MOVLB  0
110E6:  CALL   2334
110EA:  MOVFF  1BE,9E8
110EE:  MOVLW  37
110F0:  MOVLB  9
110F2:  MOVWF  xE9
110F4:  MOVLB  0
110F6:  CALL   2564
110FA:  MOVFF  1BD,9E8
110FE:  MOVLW  37
11100:  MOVLB  9
11102:  MOVWF  xE9
11104:  MOVLB  0
11106:  CALL   2564
1110A:  MOVFF  1BC,9E8
1110E:  MOVLW  37
11110:  MOVLB  9
11112:  MOVWF  xE9
11114:  MOVLB  0
11116:  CALL   2564
1111A:  MOVFF  1BB,9E8
1111E:  MOVLW  37
11120:  MOVLB  9
11122:  MOVWF  xE9
11124:  MOVLB  0
11126:  CALL   2564
1112A:  MOVLW  0D
1112C:  BTFSS  FA6.6
1112E:  GOTO   1112C
11132:  MOVLB  E
11134:  MOVWF  xF9
11136:  MOVLW  0A
11138:  MOVLB  0
1113A:  BTFSS  FA6.6
1113C:  GOTO   1113A
11140:  MOVLB  E
11142:  MOVWF  xF9
....................     fprintf(PC, "\tEND\t0x%08LX\r\n", misf_address_end);
11144:  MOVLW  20
11146:  MOVWF  FF6
11148:  MOVLW  0A
1114A:  MOVWF  FF7
1114C:  MOVLW  00
1114E:  MOVWF  FF8
11150:  MOVLW  07
11152:  MOVLB  A
11154:  MOVWF  x4E
11156:  MOVLB  0
11158:  CALL   2334
1115C:  MOVFF  1C2,9E8
11160:  MOVLW  37
11162:  MOVLB  9
11164:  MOVWF  xE9
11166:  MOVLB  0
11168:  CALL   2564
1116C:  MOVFF  1C1,9E8
11170:  MOVLW  37
11172:  MOVLB  9
11174:  MOVWF  xE9
11176:  MOVLB  0
11178:  CALL   2564
1117C:  MOVFF  1C0,9E8
11180:  MOVLW  37
11182:  MOVLB  9
11184:  MOVWF  xE9
11186:  MOVLB  0
11188:  CALL   2564
1118C:  MOVFF  1BF,9E8
11190:  MOVLW  37
11192:  MOVLB  9
11194:  MOVWF  xE9
11196:  MOVLB  0
11198:  CALL   2564
1119C:  MOVLW  0D
1119E:  BTFSS  FA6.6
111A0:  GOTO   1119E
111A4:  MOVLB  E
111A6:  MOVWF  xF9
111A8:  MOVLW  0A
111AA:  MOVLB  0
111AC:  BTFSS  FA6.6
111AE:  GOTO   111AC
111B2:  MOVLB  E
111B4:  MOVWF  xF9
....................     fprintf(PC, "\tSRC\t0x%08LX\r\n", misf_write_src);
111B6:  MOVLW  30
111B8:  MOVWF  FF6
111BA:  MOVLW  0A
111BC:  MOVWF  FF7
111BE:  MOVLW  00
111C0:  MOVWF  FF8
111C2:  MOVLW  07
111C4:  MOVLB  A
111C6:  MOVWF  x4E
111C8:  MOVLB  0
111CA:  CALL   2334
111CE:  MOVFF  1A6,9E8
111D2:  MOVLW  37
111D4:  MOVLB  9
111D6:  MOVWF  xE9
111D8:  MOVLB  0
111DA:  CALL   2564
111DE:  MOVFF  1A5,9E8
111E2:  MOVLW  37
111E4:  MOVLB  9
111E6:  MOVWF  xE9
111E8:  MOVLB  0
111EA:  CALL   2564
111EE:  MOVFF  1A4,9E8
111F2:  MOVLW  37
111F4:  MOVLB  9
111F6:  MOVWF  xE9
111F8:  MOVLB  0
111FA:  CALL   2564
111FE:  MOVFF  1A3,9E8
11202:  MOVLW  37
11204:  MOVLB  9
11206:  MOVWF  xE9
11208:  MOVLB  0
1120A:  CALL   2564
1120E:  MOVLW  0D
11210:  BTFSS  FA6.6
11212:  GOTO   11210
11216:  MOVLB  E
11218:  MOVWF  xF9
1121A:  MOVLW  0A
1121C:  MOVLB  0
1121E:  BTFSS  FA6.6
11220:  GOTO   1121E
11224:  MOVLB  E
11226:  MOVWF  xF9
....................     fprintf(PC, "\tSIZE\t0x%08LX\r\n", misf_write_size);
11228:  MOVLW  40
1122A:  MOVWF  FF6
1122C:  MOVLW  0A
1122E:  MOVWF  FF7
11230:  MOVLW  00
11232:  MOVWF  FF8
11234:  MOVLW  08
11236:  MOVLB  A
11238:  MOVWF  x4E
1123A:  MOVLB  0
1123C:  CALL   2334
11240:  MOVFF  1AA,9E8
11244:  MOVLW  37
11246:  MOVLB  9
11248:  MOVWF  xE9
1124A:  MOVLB  0
1124C:  CALL   2564
11250:  MOVFF  1A9,9E8
11254:  MOVLW  37
11256:  MOVLB  9
11258:  MOVWF  xE9
1125A:  MOVLB  0
1125C:  CALL   2564
11260:  MOVFF  1A8,9E8
11264:  MOVLW  37
11266:  MOVLB  9
11268:  MOVWF  xE9
1126A:  MOVLB  0
1126C:  CALL   2564
11270:  MOVFF  1A7,9E8
11274:  MOVLW  37
11276:  MOVLB  9
11278:  MOVWF  xE9
1127A:  MOVLB  0
1127C:  CALL   2564
11280:  MOVLW  0D
11282:  BTFSS  FA6.6
11284:  GOTO   11282
11288:  MOVLB  E
1128A:  MOVWF  xF9
1128C:  MOVLW  0A
1128E:  MOVLB  0
11290:  BTFSS  FA6.6
11292:  GOTO   11290
11296:  MOVLB  E
11298:  MOVWF  xF9
....................     fprintf(PC, "\t-----\t----------\r\n");
1129A:  MOVLW  50
1129C:  MOVWF  FF6
1129E:  MOVLW  0A
112A0:  MOVWF  FF7
112A2:  MOVLW  00
112A4:  MOVWF  FF8
112A6:  MOVLB  0
112A8:  CALL   22FE
.................... 
....................     // Print SMF ADDRESS
....................     fprintf(PC,"[SMF ADDRESS]\r\n");
112AC:  MOVLW  64
112AE:  MOVWF  FF6
112B0:  MOVLW  0A
112B2:  MOVWF  FF7
112B4:  MOVLW  00
112B6:  MOVWF  FF8
112B8:  CALL   22FE
....................     fprintf(PC, "\tParam\tData\r\n");
112BC:  MOVLW  74
112BE:  MOVWF  FF6
112C0:  MOVLW  0A
112C2:  MOVWF  FF7
112C4:  MOVLW  00
112C6:  MOVWF  FF8
112C8:  CALL   22FE
....................     fprintf(PC, "\t-----\t----------\r\n");
112CC:  MOVLW  82
112CE:  MOVWF  FF6
112D0:  MOVLW  0A
112D2:  MOVWF  FF7
112D4:  MOVLW  00
112D6:  MOVWF  FF8
112D8:  CALL   22FE
....................     fprintf(PC, "\tSTART\t0x%08LX\r\n", smf_data_address_start);
112DC:  MOVLW  96
112DE:  MOVWF  FF6
112E0:  MOVLW  0A
112E2:  MOVWF  FF7
112E4:  MOVLW  00
112E6:  MOVWF  FF8
112E8:  MOVLW  09
112EA:  MOVLB  A
112EC:  MOVWF  x4E
112EE:  MOVLB  0
112F0:  CALL   2334
112F4:  MOVFF  1B6,9E8
112F8:  MOVLW  37
112FA:  MOVLB  9
112FC:  MOVWF  xE9
112FE:  MOVLB  0
11300:  CALL   2564
11304:  MOVFF  1B5,9E8
11308:  MOVLW  37
1130A:  MOVLB  9
1130C:  MOVWF  xE9
1130E:  MOVLB  0
11310:  CALL   2564
11314:  MOVFF  1B4,9E8
11318:  MOVLW  37
1131A:  MOVLB  9
1131C:  MOVWF  xE9
1131E:  MOVLB  0
11320:  CALL   2564
11324:  MOVFF  1B3,9E8
11328:  MOVLW  37
1132A:  MOVLB  9
1132C:  MOVWF  xE9
1132E:  MOVLB  0
11330:  CALL   2564
11334:  MOVLW  0D
11336:  BTFSS  FA6.6
11338:  GOTO   11336
1133C:  MOVLB  E
1133E:  MOVWF  xF9
11340:  MOVLW  0A
11342:  MOVLB  0
11344:  BTFSS  FA6.6
11346:  GOTO   11344
1134A:  MOVLB  E
1134C:  MOVWF  xF9
....................     fprintf(PC, "\tEND\t0x%08LX\r\n", smf_data_address_end);
1134E:  MOVLW  A8
11350:  MOVWF  FF6
11352:  MOVLW  0A
11354:  MOVWF  FF7
11356:  MOVLW  00
11358:  MOVWF  FF8
1135A:  MOVLW  07
1135C:  MOVLB  A
1135E:  MOVWF  x4E
11360:  MOVLB  0
11362:  CALL   2334
11366:  MOVFF  1BA,9E8
1136A:  MOVLW  37
1136C:  MOVLB  9
1136E:  MOVWF  xE9
11370:  MOVLB  0
11372:  CALL   2564
11376:  MOVFF  1B9,9E8
1137A:  MOVLW  37
1137C:  MOVLB  9
1137E:  MOVWF  xE9
11380:  MOVLB  0
11382:  CALL   2564
11386:  MOVFF  1B8,9E8
1138A:  MOVLW  37
1138C:  MOVLB  9
1138E:  MOVWF  xE9
11390:  MOVLB  0
11392:  CALL   2564
11396:  MOVFF  1B7,9E8
1139A:  MOVLW  37
1139C:  MOVLB  9
1139E:  MOVWF  xE9
113A0:  MOVLB  0
113A2:  CALL   2564
113A6:  MOVLW  0D
113A8:  BTFSS  FA6.6
113AA:  GOTO   113A8
113AE:  MOVLB  E
113B0:  MOVWF  xF9
113B2:  MOVLW  0A
113B4:  MOVLB  0
113B6:  BTFSS  FA6.6
113B8:  GOTO   113B6
113BC:  MOVLB  E
113BE:  MOVWF  xF9
....................     fprintf(PC, "\t-----\t----------\r\n");
113C0:  MOVLW  B8
113C2:  MOVWF  FF6
113C4:  MOVLW  0A
113C6:  MOVWF  FF7
113C8:  MOVLW  00
113CA:  MOVWF  FF8
113CC:  MOVLB  0
113CE:  CALL   22FE
.................... 
.................... 
....................     // Erase Area
....................     fprintf(PC, "ERASE SMF AREA\r\n");
113D2:  MOVLW  CC
113D4:  MOVWF  FF6
113D6:  MOVLW  0A
113D8:  MOVWF  FF7
113DA:  MOVLW  00
113DC:  MOVWF  FF8
113DE:  CALL   22FE
....................     for ( unsigned int32 address = smf_data_address_start; address < smf_data_address_end; address += SUBSECTOR_SIZE )
113E2:  MOVFF  1B6,1C6
113E6:  MOVFF  1B5,1C5
113EA:  MOVFF  1B4,1C4
113EE:  MOVFF  1B3,1C3
113F2:  MOVLB  1
113F4:  MOVF   xC6,W
113F6:  SUBWF  xBA,W
113F8:  BTFSC  FD8.0
113FA:  BRA    11402
113FC:  MOVLB  0
113FE:  GOTO   11484
11402:  MOVLB  0
11404:  BTFSS  FD8.2
11406:  GOTO   1144C
1140A:  MOVLB  1
1140C:  MOVF   xC5,W
1140E:  SUBWF  xB9,W
11410:  BTFSC  FD8.0
11412:  BRA    1141A
11414:  MOVLB  0
11416:  GOTO   11484
1141A:  MOVLB  0
1141C:  BTFSS  FD8.2
1141E:  GOTO   1144C
11422:  MOVLB  1
11424:  MOVF   xC4,W
11426:  SUBWF  xB8,W
11428:  BTFSC  FD8.0
1142A:  BRA    11432
1142C:  MOVLB  0
1142E:  GOTO   11484
11432:  MOVLB  0
11434:  BTFSS  FD8.2
11436:  GOTO   1144C
1143A:  MOVLB  1
1143C:  MOVF   xB7,W
1143E:  SUBWF  xC3,W
11440:  BTFSS  FD8.0
11442:  BRA    1144A
11444:  MOVLB  0
11446:  GOTO   11484
1144A:  MOVLB  0
....................     {
....................         subsector_4kByte_erase(smf, address);
1144C:  MOVFF  119,A93
11450:  MOVFF  118,A92
11454:  MOVFF  117,A91
11458:  MOVFF  116,A90
1145C:  MOVFF  1C6,A97
11460:  MOVFF  1C5,A96
11464:  MOVFF  1C4,A95
11468:  MOVFF  1C3,A94
1146C:  CALL   4D5A
11470:  MOVLW  10
11472:  MOVLB  1
11474:  ADDWF  xC4,F
11476:  MOVLW  00
11478:  ADDWFC xC5,F
1147A:  MOVLW  00
1147C:  ADDWFC xC6,F
1147E:  MOVLB  0
11480:  GOTO   113F2
....................     }
....................     fprintf(PC, "\tERASE SMF AREA DONE\r\n");
11484:  MOVLW  DE
11486:  MOVWF  FF6
11488:  MOVLW  0A
1148A:  MOVWF  FF7
1148C:  MOVLW  00
1148E:  MOVWF  FF8
11490:  CALL   22FE
.................... 
....................     // Write Data
....................     unsigned int8 buffer[PACKET_SIZE];
....................     unsigned int32 smf_write_address = smf_data_address_start;
....................     unsigned int32 misf_read_address = misf_write_src;
11494:  MOVFF  1B6,20A
11498:  MOVFF  1B5,209
1149C:  MOVFF  1B4,208
114A0:  MOVFF  1B3,207
114A4:  MOVFF  1A6,20E
114A8:  MOVFF  1A5,20D
114AC:  MOVFF  1A4,20C
114B0:  MOVFF  1A3,20B
....................     fprintf(PC, "WRITE DATA TO SMF\r\n");
114B4:  MOVLW  F6
114B6:  MOVWF  FF6
114B8:  MOVLW  0A
114BA:  MOVWF  FF7
114BC:  MOVLW  00
114BE:  MOVWF  FF8
114C0:  CALL   22FE
....................     while (misf_write_size > 0)
114C4:  MOVLB  1
114C6:  MOVF   xA7,F
114C8:  BTFSC  FD8.2
114CA:  BRA    114D2
114CC:  MOVLB  0
114CE:  GOTO   11504
114D2:  MOVLB  0
114D4:  MOVLB  1
114D6:  MOVF   xA8,F
114D8:  BTFSC  FD8.2
114DA:  BRA    114E2
114DC:  MOVLB  0
114DE:  GOTO   11504
114E2:  MOVLB  0
114E4:  MOVLB  1
114E6:  MOVF   xA9,F
114E8:  BTFSC  FD8.2
114EA:  BRA    114F2
114EC:  MOVLB  0
114EE:  GOTO   11504
114F2:  MOVLB  0
114F4:  MOVLB  1
114F6:  MOVF   xAA,F
114F8:  BTFSS  FD8.2
114FA:  BRA    11502
114FC:  MOVLB  0
114FE:  GOTO   1182C
11502:  MOVLB  0
....................     {
....................         memset(buffer, 0x11, PACKET_SIZE);
11504:  MOVLW  01
11506:  MOVWF  FEA
11508:  MOVLW  C7
1150A:  MOVWF  FE9
1150C:  MOVLW  11
1150E:  MOVWF  00
11510:  CLRF   02
11512:  MOVLW  40
11514:  MOVWF  01
11516:  CALL   236E
....................         read_data_bytes(mis_fm, misf_read_address, buffer, PACKET_SIZE);
1151A:  MOVFF  115,AEE
1151E:  MOVFF  114,AED
11522:  MOVFF  113,AEC
11526:  MOVFF  112,AEB
1152A:  MOVFF  20E,AF2
1152E:  MOVFF  20D,AF1
11532:  MOVFF  20C,AF0
11536:  MOVFF  20B,AEF
1153A:  MOVLW  01
1153C:  MOVLB  A
1153E:  MOVWF  xF4
11540:  MOVLW  C7
11542:  MOVWF  xF3
11544:  CLRF   xF8
11546:  CLRF   xF7
11548:  CLRF   xF6
1154A:  MOVLW  40
1154C:  MOVWF  xF5
1154E:  MOVLB  0
11550:  CALL   2EEC
....................         fprintf(PC," ");
11554:  MOVLW  20
11556:  BTFSS  FA6.6
11558:  GOTO   11556
1155C:  MOVLB  E
1155E:  MOVWF  xF9
....................         write_data_bytes(smf, smf_write_address, buffer, PACKET_SIZE);
11560:  MOVFF  119,AEE
11564:  MOVFF  118,AED
11568:  MOVFF  117,AEC
1156C:  MOVFF  116,AEB
11570:  MOVFF  20A,AF2
11574:  MOVFF  209,AF1
11578:  MOVFF  208,AF0
1157C:  MOVFF  207,AEF
11580:  MOVLW  01
11582:  MOVLB  A
11584:  MOVWF  xF4
11586:  MOVLW  C7
11588:  MOVWF  xF3
1158A:  CLRF   xF6
1158C:  MOVLW  40
1158E:  MOVWF  xF5
11590:  MOVLB  0
11592:  CALL   3F56
....................         fprintf(PC,".");
11596:  MOVLW  2E
11598:  BTFSS  FA6.6
1159A:  GOTO   11598
1159E:  MOVLB  E
115A0:  MOVWF  xF9
....................         // counter update
....................         if (misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter >= PACKET_SIZE){
115A2:  MOVLB  1
115A4:  MOVF   xA1,W
115A6:  MOVWF  FE9
115A8:  MOVF   xA2,W
115AA:  MOVWF  FEA
115AC:  MOVF   FEF,W
115AE:  MULLW  0A
115B0:  MOVF   FF3,W
115B2:  MOVLB  2
115B4:  CLRF   x11
115B6:  MOVWF  x10
115B8:  MOVLW  04
115BA:  ADDWF  x10,W
115BC:  MOVWF  01
115BE:  MOVLW  00
115C0:  ADDWFC x11,W
115C2:  MOVWF  03
115C4:  MOVF   01,W
115C6:  ADDLW  22
115C8:  MOVWF  FE9
115CA:  MOVLW  01
115CC:  ADDWFC 03,W
115CE:  MOVWF  FEA
115D0:  MOVFF  FEF,210
115D4:  MOVFF  FEC,211
115D8:  MOVFF  FEC,212
115DC:  MOVFF  FEC,213
115E0:  MOVF   FED,F
115E2:  MOVF   FED,F
115E4:  MOVF   FED,F
115E6:  MOVF   x13,F
115E8:  BTFSC  FD8.2
115EA:  BRA    115F2
115EC:  MOVLB  0
115EE:  GOTO   11626
115F2:  MOVLB  0
115F4:  MOVLB  2
115F6:  MOVF   x12,F
115F8:  BTFSC  FD8.2
115FA:  BRA    11602
115FC:  MOVLB  0
115FE:  GOTO   11626
11602:  MOVLB  0
11604:  MOVLB  2
11606:  MOVF   x11,F
11608:  BTFSC  FD8.2
1160A:  BRA    11612
1160C:  MOVLB  0
1160E:  GOTO   11626
11612:  MOVLB  0
11614:  MOVLB  2
11616:  MOVF   x10,W
11618:  SUBLW  3F
1161A:  BTFSS  FD8.0
1161C:  BRA    11624
1161E:  MOVLB  0
11620:  GOTO   1168E
11624:  MOVLB  0
....................             misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter -= PACKET_SIZE;
11626:  MOVLB  1
11628:  MOVF   xA1,W
1162A:  MOVWF  FE9
1162C:  MOVF   xA2,W
1162E:  MOVWF  FEA
11630:  MOVF   FEF,W
11632:  MULLW  0A
11634:  MOVF   FF3,W
11636:  MOVLB  2
11638:  CLRF   x11
1163A:  MOVWF  x10
1163C:  MOVLW  04
1163E:  ADDWF  x10,W
11640:  MOVWF  01
11642:  MOVLW  00
11644:  ADDWFC x11,W
11646:  MOVWF  03
11648:  MOVF   01,W
1164A:  ADDLW  22
1164C:  MOVWF  FE9
1164E:  MOVLW  01
11650:  ADDWFC 03,W
11652:  MOVWF  FEA
11654:  MOVLW  40
11656:  SUBWF  FEF,W
11658:  MOVWF  00
1165A:  MOVLW  00
1165C:  SUBWFB FEC,W
1165E:  MOVWF  01
11660:  MOVLW  00
11662:  SUBWFB FEC,W
11664:  MOVWF  02
11666:  MOVLW  00
11668:  SUBWFB FEC,W
1166A:  MOVWF  03
1166C:  MOVF   FED,F
1166E:  MOVF   FED,F
11670:  MOVF   FED,F
11672:  MOVFF  00,FEF
11676:  MOVFF  01,FEC
1167A:  MOVFF  02,FEC
1167E:  MOVFF  03,FEC
11682:  MOVF   FED,F
11684:  MOVF   FED,F
11686:  MOVF   FED,F
11688:  MOVLB  0
....................         }else{
1168A:  GOTO   117A0
....................             unsigned int8 add = PACKET_SIZE - misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter;
1168E:  MOVLB  1
11690:  MOVF   xA1,W
11692:  MOVWF  FE9
11694:  MOVF   xA2,W
11696:  MOVWF  FEA
11698:  MOVF   FEF,W
1169A:  MULLW  0A
1169C:  MOVF   FF3,W
1169E:  MOVLB  2
116A0:  CLRF   x11
116A2:  MOVWF  x10
116A4:  MOVLW  04
116A6:  ADDWF  x10,W
116A8:  MOVWF  01
116AA:  MOVLW  00
116AC:  ADDWFC x11,W
116AE:  MOVWF  03
116B0:  MOVF   01,W
116B2:  ADDLW  22
116B4:  MOVWF  FE9
116B6:  MOVLW  01
116B8:  ADDWFC 03,W
116BA:  MOVWF  FEA
116BC:  MOVFF  FEF,00
116C0:  MOVFF  FEC,01
116C4:  MOVFF  FEC,02
116C8:  MOVFF  FEC,03
116CC:  MOVF   FED,F
116CE:  MOVF   FED,F
116D0:  MOVF   FED,F
116D2:  MOVLW  40
116D4:  BSF    FD8.0
116D6:  SUBFWB 00,W
116D8:  MOVWF  x0F
116DA:  MOVLB  0
....................             misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter = 0;
116DC:  MOVLB  1
116DE:  MOVF   xA1,W
116E0:  MOVWF  FE9
116E2:  MOVF   xA2,W
116E4:  MOVWF  FEA
116E6:  MOVF   FEF,W
116E8:  MULLW  0A
116EA:  MOVF   FF3,W
116EC:  MOVLB  2
116EE:  CLRF   x11
116F0:  MOVWF  x10
116F2:  MOVLW  04
116F4:  ADDWF  x10,W
116F6:  MOVWF  01
116F8:  MOVLW  00
116FA:  ADDWFC x11,W
116FC:  MOVWF  03
116FE:  MOVF   01,W
11700:  ADDLW  22
11702:  MOVWF  FE9
11704:  MOVLW  01
11706:  ADDWFC 03,W
11708:  MOVWF  FEA
1170A:  CLRF   FEF
1170C:  CLRF   FEC
1170E:  CLRF   FEC
11710:  CLRF   FEC
11712:  MOVF   FED,F
11714:  MOVF   FED,F
11716:  MOVF   FED,F
....................             misf_counter_table[smf_queue_ptr->mission_id].used_counter += add;
11718:  MOVLB  1
1171A:  MOVF   xA1,W
1171C:  MOVWF  FE9
1171E:  MOVF   xA2,W
11720:  MOVWF  FEA
11722:  MOVF   FEF,W
11724:  MULLW  0A
11726:  MOVF   FF3,W
11728:  MOVLB  2
1172A:  CLRF   x11
1172C:  MOVWF  x10
1172E:  MOVLW  22
11730:  ADDWF  x10,W
11732:  MOVWF  FE9
11734:  MOVLW  01
11736:  ADDWFC x11,W
11738:  MOVWF  FEA
1173A:  MOVF   x0F,W
1173C:  ADDWF  FEF,W
1173E:  MOVWF  00
11740:  MOVLW  00
11742:  ADDWFC FEC,W
11744:  MOVWF  01
11746:  MOVLW  00
11748:  ADDWFC FEC,W
1174A:  MOVWF  02
1174C:  MOVLW  00
1174E:  ADDWFC FEC,W
11750:  MOVWF  03
11752:  MOVF   FED,F
11754:  MOVF   FED,F
11756:  MOVF   FED,F
11758:  MOVFF  00,FEF
1175C:  MOVFF  01,FEC
11760:  MOVFF  02,FEC
11764:  MOVFF  03,FEC
11768:  MOVF   FED,F
1176A:  MOVF   FED,F
1176C:  MOVF   FED,F
....................             misf_counter_table[smf_queue_ptr->mission_id].reserve_counter1 = 0;
1176E:  MOVLB  1
11770:  MOVF   xA1,W
11772:  MOVWF  FE9
11774:  MOVF   xA2,W
11776:  MOVWF  FEA
11778:  MOVF   FEF,W
1177A:  MULLW  0A
1177C:  MOVF   FF3,W
1177E:  MOVLB  2
11780:  CLRF   x11
11782:  MOVWF  x10
11784:  MOVLW  08
11786:  ADDWF  x10,W
11788:  MOVWF  01
1178A:  MOVLW  00
1178C:  ADDWFC x11,W
1178E:  MOVWF  03
11790:  MOVF   01,W
11792:  ADDLW  22
11794:  MOVWF  FE9
11796:  MOVLW  01
11798:  ADDWFC 03,W
1179A:  MOVWF  FEA
1179C:  CLRF   FEF
1179E:  MOVLB  0
....................         }
....................         misf_read_address += PACKET_SIZE;
117A0:  MOVLW  40
117A2:  MOVLB  2
117A4:  ADDWF  x0B,F
117A6:  MOVLW  00
117A8:  ADDWFC x0C,F
117AA:  MOVLW  00
117AC:  ADDWFC x0D,F
117AE:  MOVLW  00
117B0:  ADDWFC x0E,F
....................         smf_write_address += PACKET_SIZE;
117B2:  MOVLW  40
117B4:  ADDWF  x07,F
117B6:  MOVLW  00
117B8:  ADDWFC x08,F
117BA:  MOVLW  00
117BC:  ADDWFC x09,F
117BE:  MOVLW  00
117C0:  ADDWFC x0A,F
....................         if (misf_write_size > PACKET_SIZE){
117C2:  MOVLB  1
117C4:  MOVF   xAA,F
117C6:  BTFSC  FD8.2
117C8:  BRA    117D0
117CA:  MOVLB  0
117CC:  GOTO   11804
117D0:  MOVLB  0
117D2:  MOVLB  1
117D4:  MOVF   xA9,F
117D6:  BTFSC  FD8.2
117D8:  BRA    117E0
117DA:  MOVLB  0
117DC:  GOTO   11804
117E0:  MOVLB  0
117E2:  MOVLB  1
117E4:  MOVF   xA8,F
117E6:  BTFSC  FD8.2
117E8:  BRA    117F0
117EA:  MOVLB  0
117EC:  GOTO   11804
117F0:  MOVLB  0
117F2:  MOVLB  1
117F4:  MOVF   xA7,W
117F6:  SUBLW  40
117F8:  BTFSS  FD8.0
117FA:  BRA    11802
117FC:  MOVLB  0
117FE:  GOTO   1181C
11802:  MOVLB  0
....................             misf_write_size -= PACKET_SIZE;
11804:  MOVLW  40
11806:  MOVLB  1
11808:  SUBWF  xA7,F
1180A:  MOVLW  00
1180C:  SUBWFB xA8,F
1180E:  MOVLW  00
11810:  SUBWFB xA9,F
11812:  MOVLW  00
11814:  SUBWFB xAA,F
11816:  MOVLB  0
....................         }else{
11818:  GOTO   11828
....................             misf_write_size = 0;
1181C:  MOVLB  1
1181E:  CLRF   xAA
11820:  CLRF   xA9
11822:  CLRF   xA8
11824:  CLRF   xA7
11826:  MOVLB  0
....................         }
11828:  GOTO   114C4
....................         
....................     }
....................     fprintf(PC, "\r\n");
1182C:  MOVLW  0D
1182E:  BTFSS  FA6.6
11830:  GOTO   1182E
11834:  MOVLB  E
11836:  MOVWF  xF9
11838:  MOVLW  0A
1183A:  MOVLB  0
1183C:  BTFSS  FA6.6
1183E:  GOTO   1183C
11842:  MOVLB  E
11844:  MOVWF  xF9
.................... 
....................     // Update SMF Counter Status
....................     fprintf(PC, "UPDATE SMF COUNTER STATUS\r\n");
11846:  MOVLW  0A
11848:  MOVWF  FF6
1184A:  MOVLW  0B
1184C:  MOVWF  FF7
1184E:  MOVLW  00
11850:  MOVWF  FF8
11852:  MOVLB  0
11854:  CALL   22FE
....................     subsector_4kByte_erase(SMF, smf_header_address_start);
11858:  MOVFF  119,A93
1185C:  MOVFF  118,A92
11860:  MOVFF  117,A91
11864:  MOVFF  116,A90
11868:  MOVFF  1B2,A97
1186C:  MOVFF  1B1,A96
11870:  MOVFF  1B0,A95
11874:  MOVFF  1AF,A94
11878:  CALL   4D5A
....................     write_data_byte(SMF, smf_header_address_start + 0, (used_size >> 24)  & 0xFF);
1187C:  MOVFF  1AE,211
11880:  MOVLB  2
11882:  CLRF   x12
11884:  CLRF   x13
11886:  CLRF   x14
11888:  CLRF   x12
1188A:  CLRF   x13
1188C:  CLRF   x14
1188E:  MOVFF  119,21C
11892:  MOVFF  118,21B
11896:  MOVFF  117,21A
1189A:  MOVFF  116,219
1189E:  MOVFF  1B2,220
118A2:  MOVFF  1B1,21F
118A6:  MOVFF  1B0,21E
118AA:  MOVFF  1AF,21D
118AE:  MOVFF  211,221
118B2:  MOVLB  0
118B4:  CALL   107A2
....................     write_data_byte(SMF, smf_header_address_start + 1, (used_size >> 16)  & 0xFF);
118B8:  MOVLW  01
118BA:  MOVLB  1
118BC:  ADDWF  xAF,W
118BE:  MOVLB  2
118C0:  MOVWF  x10
118C2:  MOVLW  00
118C4:  MOVLB  1
118C6:  ADDWFC xB0,W
118C8:  MOVLB  2
118CA:  MOVWF  x11
118CC:  MOVLW  00
118CE:  MOVLB  1
118D0:  ADDWFC xB1,W
118D2:  MOVLB  2
118D4:  MOVWF  x12
118D6:  MOVLW  00
118D8:  MOVLB  1
118DA:  ADDWFC xB2,W
118DC:  MOVLB  2
118DE:  MOVWF  x13
118E0:  MOVFF  1AD,215
118E4:  MOVFF  1AE,216
118E8:  CLRF   x17
118EA:  CLRF   x18
118EC:  CLRF   x16
118EE:  CLRF   x17
118F0:  CLRF   x18
118F2:  MOVFF  119,21C
118F6:  MOVFF  118,21B
118FA:  MOVFF  117,21A
118FE:  MOVFF  116,219
11902:  MOVFF  213,220
11906:  MOVFF  212,21F
1190A:  MOVFF  211,21E
1190E:  MOVFF  210,21D
11912:  MOVFF  215,221
11916:  MOVLB  0
11918:  CALL   107A2
....................     write_data_byte(SMF, smf_header_address_start + 2, (used_size >> 8) & 0xFF);
1191C:  MOVLW  02
1191E:  MOVLB  1
11920:  ADDWF  xAF,W
11922:  MOVLB  2
11924:  MOVWF  x10
11926:  MOVLW  00
11928:  MOVLB  1
1192A:  ADDWFC xB0,W
1192C:  MOVLB  2
1192E:  MOVWF  x11
11930:  MOVLW  00
11932:  MOVLB  1
11934:  ADDWFC xB1,W
11936:  MOVLB  2
11938:  MOVWF  x12
1193A:  MOVLW  00
1193C:  MOVLB  1
1193E:  ADDWFC xB2,W
11940:  MOVLB  2
11942:  MOVWF  x13
11944:  MOVFF  1AC,215
11948:  MOVFF  1AD,216
1194C:  MOVFF  1AE,217
11950:  CLRF   x18
11952:  CLRF   x16
11954:  CLRF   x17
11956:  CLRF   x18
11958:  MOVFF  119,21C
1195C:  MOVFF  118,21B
11960:  MOVFF  117,21A
11964:  MOVFF  116,219
11968:  MOVFF  213,220
1196C:  MOVFF  212,21F
11970:  MOVFF  211,21E
11974:  MOVFF  210,21D
11978:  MOVFF  215,221
1197C:  MOVLB  0
1197E:  CALL   107A2
....................     write_data_byte(SMF, smf_header_address_start + 3, (used_size >> 0) & 0xFF);
11982:  MOVLW  03
11984:  MOVLB  1
11986:  ADDWF  xAF,W
11988:  MOVLB  2
1198A:  MOVWF  x10
1198C:  MOVLW  00
1198E:  MOVLB  1
11990:  ADDWFC xB0,W
11992:  MOVLB  2
11994:  MOVWF  x11
11996:  MOVLW  00
11998:  MOVLB  1
1199A:  ADDWFC xB1,W
1199C:  MOVLB  2
1199E:  MOVWF  x12
119A0:  MOVLW  00
119A2:  MOVLB  1
119A4:  ADDWFC xB2,W
119A6:  MOVLB  2
119A8:  MOVWF  x13
119AA:  MOVFF  1AE,218
119AE:  MOVFF  1AD,217
119B2:  MOVFF  1AC,216
119B6:  MOVFF  1AB,215
119BA:  CLRF   x16
119BC:  CLRF   x17
119BE:  CLRF   x18
119C0:  MOVFF  119,21C
119C4:  MOVFF  118,21B
119C8:  MOVFF  117,21A
119CC:  MOVFF  116,219
119D0:  MOVFF  213,220
119D4:  MOVFF  212,21F
119D8:  MOVFF  211,21E
119DC:  MOVFF  210,21D
119E0:  MOVFF  215,221
119E4:  MOVLB  0
119E6:  CALL   107A2
.................... 
....................     // print_smf_counter_status(&smf_data_table);
....................     // write size area
....................     // smf_write_header(&smf_data_table);
....................     misf_update_address_area();
119EA:  CALL   507E
....................     fprintf(PC, "\r\n_________End copy_data__________\r\n");
119EE:  MOVLW  26
119F0:  MOVWF  FF6
119F2:  MOVLW  0B
119F4:  MOVWF  FF7
119F6:  MOVLW  00
119F8:  MOVWF  FF8
119FA:  CALL   22FE
....................     fprintf(PC, "_______________________________\r\n\r\n");
119FE:  MOVLW  4C
11A00:  MOVWF  FF6
11A02:  MOVLW  0B
11A04:  MOVWF  FF7
11A06:  MOVLW  00
11A08:  MOVWF  FF8
11A0A:  CALL   22FE
11A0E:  GOTO   12B48 (RETURN)
.................... }
.................... 
.................... void smf_read(FlashOperationStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
11B9A:  MOVLW  70
11B9C:  MOVWF  FF6
11B9E:  MOVLW  0B
11BA0:  MOVWF  FF7
11BA2:  MOVLW  00
11BA4:  MOVWF  FF8
11BA6:  CALL   22FE
....................     fprintf(PC, "___Start SMF Read____\r\n");
11BAA:  MOVLW  8A
11BAC:  MOVWF  FF6
11BAE:  MOVLW  0B
11BB0:  MOVWF  FF7
11BB2:  MOVLW  00
11BB4:  MOVWF  FF8
11BB6:  CALL   22FE
.................... 
....................     int8 buffer[PACKET_SIZE];
.................... 
....................     SmfAddressStruct smf_address = get_smf_address_struct(smf_data->mission_id);
....................     unsigned int32 read_address = smf_data->misf_start_addr; // 呼び出し側でSMF内アドレスを設定する前提
....................     unsigned int32 read_size = smf_data->misf_size;
11BBA:  MOVLB  1
11BBC:  MOVF   xA1,W
11BBE:  MOVWF  FE9
11BC0:  MOVF   xA2,W
11BC2:  MOVWF  FEA
11BC4:  MOVFF  FEF,203
11BC8:  MOVFF  203,20A
11BCC:  MOVLB  0
11BCE:  CALL   11A12
11BD2:  MOVFF  02,03
11BD6:  MOVF   01,W
11BD8:  MOVWF  FE1
11BDA:  MOVFF  03,FE2
11BDE:  MOVLW  01
11BE0:  MOVWF  FEA
11BE2:  MOVLW  E3
11BE4:  MOVWF  FE9
11BE6:  MOVLW  08
11BE8:  MOVWF  01
11BEA:  MOVFF  FE6,FEE
11BEE:  DECFSZ 01,F
11BF0:  GOTO   11BEA
11BF4:  MOVLW  04
11BF6:  MOVLB  1
11BF8:  ADDWF  xA1,W
11BFA:  MOVWF  FE9
11BFC:  MOVLW  00
11BFE:  ADDWFC xA2,W
11C00:  MOVWF  FEA
11C02:  MOVFF  FEF,1EB
11C06:  MOVFF  FEC,1EC
11C0A:  MOVFF  FEC,1ED
11C0E:  MOVFF  FEC,1EE
11C12:  MOVF   FED,F
11C14:  MOVF   FED,F
11C16:  MOVF   FED,F
11C18:  MOVLW  08
11C1A:  ADDWF  xA1,W
11C1C:  MOVWF  FE9
11C1E:  MOVLW  00
11C20:  ADDWFC xA2,W
11C22:  MOVWF  FEA
11C24:  MOVFF  FEF,1EF
11C28:  MOVFF  FEC,1F0
11C2C:  MOVFF  FEC,1F1
11C30:  MOVFF  FEC,1F2
11C34:  MOVF   FED,F
11C36:  MOVF   FED,F
11C38:  MOVF   FED,F
.................... 
....................     // 境界チェック (start/end は [start_address, end_address) の半開区間想定)
....................     if (read_address < (unsigned int32)smf_address.start_address || read_address >= (unsigned int32)smf_address.end_address) {
11C3A:  MOVF   xEE,W
11C3C:  SUBWF  xE6,W
11C3E:  BTFSC  FD8.0
11C40:  BRA    11C48
11C42:  MOVLB  0
11C44:  GOTO   11C92
11C48:  MOVLB  0
11C4A:  BTFSS  FD8.2
11C4C:  GOTO   11CEC
11C50:  MOVLB  1
11C52:  MOVF   xED,W
11C54:  SUBWF  xE5,W
11C56:  BTFSC  FD8.0
11C58:  BRA    11C60
11C5A:  MOVLB  0
11C5C:  GOTO   11C92
11C60:  MOVLB  0
11C62:  BTFSS  FD8.2
11C64:  GOTO   11CEC
11C68:  MOVLB  1
11C6A:  MOVF   xEC,W
11C6C:  SUBWF  xE4,W
11C6E:  BTFSC  FD8.0
11C70:  BRA    11C78
11C72:  MOVLB  0
11C74:  GOTO   11C92
11C78:  MOVLB  0
11C7A:  BTFSS  FD8.2
11C7C:  GOTO   11CEC
11C80:  MOVLB  1
11C82:  MOVF   xE3,W
11C84:  SUBWF  xEB,W
11C86:  BTFSC  FD8.0
11C88:  BRA    11C90
11C8A:  MOVLB  0
11C8C:  GOTO   11CEC
11C90:  MOVLB  0
11C92:  MOVLB  1
11C94:  MOVF   xEA,W
11C96:  SUBWF  xEE,W
11C98:  BTFSC  FD8.0
11C9A:  BRA    11CA2
11C9C:  MOVLB  0
11C9E:  GOTO   11E10
11CA2:  MOVLB  0
11CA4:  BTFSS  FD8.2
11CA6:  GOTO   11CEC
11CAA:  MOVLB  1
11CAC:  MOVF   xE9,W
11CAE:  SUBWF  xED,W
11CB0:  BTFSC  FD8.0
11CB2:  BRA    11CBA
11CB4:  MOVLB  0
11CB6:  GOTO   11E10
11CBA:  MOVLB  0
11CBC:  BTFSS  FD8.2
11CBE:  GOTO   11CEC
11CC2:  MOVLB  1
11CC4:  MOVF   xE8,W
11CC6:  SUBWF  xEC,W
11CC8:  BTFSC  FD8.0
11CCA:  BRA    11CD2
11CCC:  MOVLB  0
11CCE:  GOTO   11E10
11CD2:  MOVLB  0
11CD4:  BTFSS  FD8.2
11CD6:  GOTO   11CEC
11CDA:  MOVLB  1
11CDC:  MOVF   xE7,W
11CDE:  SUBWF  xEB,W
11CE0:  BTFSC  FD8.0
11CE2:  BRA    11CEA
11CE4:  MOVLB  0
11CE6:  GOTO   11E10
11CEA:  MOVLB  0
....................         fprintf(PC, "Error: Read address 0x%08LX out of SMF mission range [0x%08LX - 0x%08LX)\r\n",
....................                 read_address, (unsigned int32)smf_address.start_address, (unsigned int32)smf_address.end_address);
11CEC:  MOVLW  A2
11CEE:  MOVWF  FF6
11CF0:  MOVLW  0B
11CF2:  MOVWF  FF7
11CF4:  MOVLW  00
11CF6:  MOVWF  FF8
11CF8:  MOVLW  16
11CFA:  MOVLB  A
11CFC:  MOVWF  x4E
11CFE:  MOVLB  0
11D00:  CALL   2334
11D04:  MOVFF  1EE,9E8
11D08:  MOVLW  37
11D0A:  MOVLB  9
11D0C:  MOVWF  xE9
11D0E:  MOVLB  0
11D10:  CALL   2564
11D14:  MOVFF  1ED,9E8
11D18:  MOVLW  37
11D1A:  MOVLB  9
11D1C:  MOVWF  xE9
11D1E:  MOVLB  0
11D20:  CALL   2564
11D24:  MOVFF  1EC,9E8
11D28:  MOVLW  37
11D2A:  MOVLB  9
11D2C:  MOVWF  xE9
11D2E:  MOVLB  0
11D30:  CALL   2564
11D34:  MOVFF  1EB,9E8
11D38:  MOVLW  37
11D3A:  MOVLB  9
11D3C:  MOVWF  xE9
11D3E:  MOVLB  0
11D40:  CALL   2564
11D44:  MOVLW  BD
11D46:  MOVWF  FF6
11D48:  MOVLW  0B
11D4A:  MOVWF  FF7
11D4C:  MOVLW  00
11D4E:  MOVWF  FF8
11D50:  MOVLW  1D
11D52:  MOVLB  A
11D54:  MOVWF  x4E
11D56:  MOVLB  0
11D58:  CALL   2334
11D5C:  MOVFF  1E6,9E8
11D60:  MOVLW  37
11D62:  MOVLB  9
11D64:  MOVWF  xE9
11D66:  MOVLB  0
11D68:  CALL   2564
11D6C:  MOVFF  1E5,9E8
11D70:  MOVLW  37
11D72:  MOVLB  9
11D74:  MOVWF  xE9
11D76:  MOVLB  0
11D78:  CALL   2564
11D7C:  MOVFF  1E4,9E8
11D80:  MOVLW  37
11D82:  MOVLB  9
11D84:  MOVWF  xE9
11D86:  MOVLB  0
11D88:  CALL   2564
11D8C:  MOVFF  1E3,9E8
11D90:  MOVLW  37
11D92:  MOVLB  9
11D94:  MOVWF  xE9
11D96:  MOVLB  0
11D98:  CALL   2564
11D9C:  MOVLW  DF
11D9E:  MOVWF  FF6
11DA0:  MOVLW  0B
11DA2:  MOVWF  FF7
11DA4:  MOVLW  00
11DA6:  MOVWF  FF8
11DA8:  MOVLW  05
11DAA:  MOVLB  A
11DAC:  MOVWF  x4E
11DAE:  MOVLB  0
11DB0:  CALL   2334
11DB4:  MOVFF  1EA,9E8
11DB8:  MOVLW  37
11DBA:  MOVLB  9
11DBC:  MOVWF  xE9
11DBE:  MOVLB  0
11DC0:  CALL   2564
11DC4:  MOVFF  1E9,9E8
11DC8:  MOVLW  37
11DCA:  MOVLB  9
11DCC:  MOVWF  xE9
11DCE:  MOVLB  0
11DD0:  CALL   2564
11DD4:  MOVFF  1E8,9E8
11DD8:  MOVLW  37
11DDA:  MOVLB  9
11DDC:  MOVWF  xE9
11DDE:  MOVLB  0
11DE0:  CALL   2564
11DE4:  MOVFF  1E7,9E8
11DE8:  MOVLW  37
11DEA:  MOVLB  9
11DEC:  MOVWF  xE9
11DEE:  MOVLB  0
11DF0:  CALL   2564
11DF4:  MOVLW  E9
11DF6:  MOVWF  FF6
11DF8:  MOVLW  0B
11DFA:  MOVWF  FF7
11DFC:  MOVLW  00
11DFE:  MOVWF  FF8
11E00:  MOVLW  03
11E02:  MOVLB  A
11E04:  MOVWF  x4E
11E06:  MOVLB  0
11E08:  CALL   2334
....................         return;
11E0C:  GOTO   122D0
....................     }
....................     unsigned int32 mission_remaining = (unsigned int32)smf_address.end_address - read_address; // 読める残り
11E10:  MOVLB  1
11E12:  MOVF   xEB,W
11E14:  SUBWF  xE7,W
11E16:  MOVWF  xF3
11E18:  MOVF   xEC,W
11E1A:  SUBWFB xE8,W
11E1C:  MOVWF  xF4
11E1E:  MOVF   xED,W
11E20:  SUBWFB xE9,W
11E22:  MOVWF  xF5
11E24:  MOVF   xEE,W
11E26:  SUBWFB xEA,W
11E28:  MOVWF  xF6
....................     if (read_size > mission_remaining) {
11E2A:  MOVF   xF6,W
11E2C:  SUBWF  xF2,W
11E2E:  BTFSC  FD8.0
11E30:  BRA    11E38
11E32:  MOVLB  0
11E34:  GOTO   11F0A
11E38:  MOVLB  0
11E3A:  BTFSS  FD8.2
11E3C:  GOTO   11E82
11E40:  MOVLB  1
11E42:  MOVF   xF5,W
11E44:  SUBWF  xF1,W
11E46:  BTFSC  FD8.0
11E48:  BRA    11E50
11E4A:  MOVLB  0
11E4C:  GOTO   11F0A
11E50:  MOVLB  0
11E52:  BTFSS  FD8.2
11E54:  GOTO   11E82
11E58:  MOVLB  1
11E5A:  MOVF   xF4,W
11E5C:  SUBWF  xF0,W
11E5E:  BTFSC  FD8.0
11E60:  BRA    11E68
11E62:  MOVLB  0
11E64:  GOTO   11F0A
11E68:  MOVLB  0
11E6A:  BTFSS  FD8.2
11E6C:  GOTO   11E82
11E70:  MOVLB  1
11E72:  MOVF   xEF,W
11E74:  SUBWF  xF3,W
11E76:  BTFSS  FD8.0
11E78:  BRA    11E80
11E7A:  MOVLB  0
11E7C:  GOTO   11F0A
11E80:  MOVLB  0
....................         fprintf(PC, "Warn: Adjust read size from %lu to %lu (mission end)\r\n", read_size, mission_remaining);
11E82:  MOVLW  EE
11E84:  MOVWF  FF6
11E86:  MOVLW  0B
11E88:  MOVWF  FF7
11E8A:  MOVLW  00
11E8C:  MOVWF  FF8
11E8E:  MOVLW  1C
11E90:  MOVLB  A
11E92:  MOVWF  x4E
11E94:  MOVLB  0
11E96:  CALL   2334
11E9A:  MOVLW  41
11E9C:  MOVWF  FE9
11E9E:  MOVFF  1F2,209
11EA2:  MOVFF  1F1,208
11EA6:  MOVFF  1F0,207
11EAA:  MOVFF  1EF,206
11EAE:  CALL   62F2
11EB2:  MOVLW  0D
11EB4:  MOVWF  FF6
11EB6:  MOVLW  0C
11EB8:  MOVWF  FF7
11EBA:  MOVLW  00
11EBC:  MOVWF  FF8
11EBE:  MOVLW  04
11EC0:  MOVLB  A
11EC2:  MOVWF  x4E
11EC4:  MOVLB  0
11EC6:  CALL   2334
11ECA:  MOVLW  41
11ECC:  MOVWF  FE9
11ECE:  MOVFF  1F6,209
11ED2:  MOVFF  1F5,208
11ED6:  MOVFF  1F4,207
11EDA:  MOVFF  1F3,206
11EDE:  CALL   62F2
11EE2:  MOVLW  14
11EE4:  MOVWF  FF6
11EE6:  MOVLW  0C
11EE8:  MOVWF  FF7
11EEA:  MOVLW  00
11EEC:  MOVWF  FF8
11EEE:  MOVLW  10
11EF0:  MOVLB  A
11EF2:  MOVWF  x4E
11EF4:  MOVLB  0
11EF6:  CALL   2334
....................         read_size = mission_remaining;
11EFA:  MOVFF  1F6,1F2
11EFE:  MOVFF  1F5,1F1
11F02:  MOVFF  1F4,1F0
11F06:  MOVFF  1F3,1EF
....................     }
....................     if (read_size == 0) {
11F0A:  MOVLB  1
11F0C:  MOVF   xEF,F
11F0E:  BTFSC  FD8.2
11F10:  BRA    11F18
11F12:  MOVLB  0
11F14:  GOTO   11F5E
11F18:  MOVLB  0
11F1A:  MOVLB  1
11F1C:  MOVF   xF0,F
11F1E:  BTFSC  FD8.2
11F20:  BRA    11F28
11F22:  MOVLB  0
11F24:  GOTO   11F5E
11F28:  MOVLB  0
11F2A:  MOVLB  1
11F2C:  MOVF   xF1,F
11F2E:  BTFSC  FD8.2
11F30:  BRA    11F38
11F32:  MOVLB  0
11F34:  GOTO   11F5E
11F38:  MOVLB  0
11F3A:  MOVLB  1
11F3C:  MOVF   xF2,F
11F3E:  BTFSC  FD8.2
11F40:  BRA    11F48
11F42:  MOVLB  0
11F44:  GOTO   11F5E
11F48:  MOVLB  0
....................         fprintf(PC, "Info: Nothing to read (size=0)\r\n");
11F4A:  MOVLW  26
11F4C:  MOVWF  FF6
11F4E:  MOVLW  0C
11F50:  MOVWF  FF7
11F52:  MOVLW  00
11F54:  MOVWF  FF8
11F56:  CALL   22FE
....................         return;
11F5A:  GOTO   122D0
....................     }
.................... 
....................     fprintf(PC, "In SMF Read source data address: %LX\r\n", read_address);
11F5E:  MOVLW  48
11F60:  MOVWF  FF6
11F62:  MOVLW  0C
11F64:  MOVWF  FF7
11F66:  MOVLW  00
11F68:  MOVWF  FF8
11F6A:  MOVLW  21
11F6C:  MOVLB  A
11F6E:  MOVWF  x4E
11F70:  MOVLB  0
11F72:  CALL   2334
11F76:  MOVFF  1EE,9E8
11F7A:  MOVLW  37
11F7C:  MOVLB  9
11F7E:  MOVWF  xE9
11F80:  MOVLB  0
11F82:  CALL   2564
11F86:  MOVFF  1ED,9E8
11F8A:  MOVLW  37
11F8C:  MOVLB  9
11F8E:  MOVWF  xE9
11F90:  MOVLB  0
11F92:  CALL   2564
11F96:  MOVFF  1EC,9E8
11F9A:  MOVLW  37
11F9C:  MOVLB  9
11F9E:  MOVWF  xE9
11FA0:  MOVLB  0
11FA2:  CALL   2564
11FA6:  MOVFF  1EB,9E8
11FAA:  MOVLW  37
11FAC:  MOVLB  9
11FAE:  MOVWF  xE9
11FB0:  MOVLB  0
11FB2:  CALL   2564
11FB6:  MOVLW  0D
11FB8:  BTFSS  FA6.6
11FBA:  GOTO   11FB8
11FBE:  MOVLB  E
11FC0:  MOVWF  xF9
11FC2:  MOVLW  0A
11FC4:  MOVLB  0
11FC6:  BTFSS  FA6.6
11FC8:  GOTO   11FC6
11FCC:  MOVLB  E
11FCE:  MOVWF  xF9
....................     fprintf(PC, "In SMF Read data size          : %lu (0x%lx)\r\n\r\n", read_size, read_size);
11FD0:  MOVLW  70
11FD2:  MOVWF  FF6
11FD4:  MOVLW  0C
11FD6:  MOVWF  FF7
11FD8:  MOVLW  00
11FDA:  MOVWF  FF8
11FDC:  MOVLW  21
11FDE:  MOVLB  A
11FE0:  MOVWF  x4E
11FE2:  MOVLB  0
11FE4:  CALL   2334
11FE8:  MOVLW  41
11FEA:  MOVWF  FE9
11FEC:  MOVFF  1F2,209
11FF0:  MOVFF  1F1,208
11FF4:  MOVFF  1F0,207
11FF8:  MOVFF  1EF,206
11FFC:  CALL   62F2
12000:  MOVLW  94
12002:  MOVWF  FF6
12004:  MOVLW  0C
12006:  MOVWF  FF7
12008:  MOVLW  00
1200A:  MOVWF  FF8
1200C:  MOVLW  04
1200E:  MOVLB  A
12010:  MOVWF  x4E
12012:  MOVLB  0
12014:  CALL   2334
12018:  MOVFF  1F2,9E8
1201C:  MOVLW  57
1201E:  MOVLB  9
12020:  MOVWF  xE9
12022:  MOVLB  0
12024:  CALL   2564
12028:  MOVFF  1F1,9E8
1202C:  MOVLW  57
1202E:  MOVLB  9
12030:  MOVWF  xE9
12032:  MOVLB  0
12034:  CALL   2564
12038:  MOVFF  1F0,9E8
1203C:  MOVLW  57
1203E:  MOVLB  9
12040:  MOVWF  xE9
12042:  MOVLB  0
12044:  CALL   2564
12048:  MOVFF  1EF,9E8
1204C:  MOVLW  57
1204E:  MOVLB  9
12050:  MOVWF  xE9
12052:  MOVLB  0
12054:  CALL   2564
12058:  MOVLW  9B
1205A:  MOVWF  FF6
1205C:  MOVLW  0C
1205E:  MOVWF  FF7
12060:  MOVLW  00
12062:  MOVWF  FF8
12064:  MOVLW  05
12066:  MOVLB  A
12068:  MOVWF  x4E
1206A:  MOVLB  0
1206C:  CALL   2334
.................... 
....................     if (!is_connect(smf)){
12070:  MOVFF  119,253
12074:  MOVFF  118,252
12078:  MOVFF  117,251
1207C:  MOVFF  116,250
12080:  CALL   2E24
12084:  MOVF   01,F
12086:  BTFSS  FD8.2
12088:  GOTO   1209C
....................         fprintf(PC, "Error: SMF is not connected\r\n");
1208C:  MOVLW  A2
1208E:  MOVWF  FF6
12090:  MOVLW  0C
12092:  MOVWF  FF7
12094:  MOVLW  00
12096:  MOVWF  FF8
12098:  CALL   22FE
....................     }
....................     fprintf(PC, "READ DATA FROM SMF...\r\n");
1209C:  MOVLW  C0
1209E:  MOVWF  FF6
120A0:  MOVLW  0C
120A2:  MOVWF  FF7
120A4:  MOVLW  00
120A6:  MOVWF  FF8
120A8:  CALL   22FE
....................     unsigned int32 end_address = read_address + read_size;
120AC:  MOVLB  1
120AE:  MOVF   xEF,W
120B0:  ADDWF  xEB,W
120B2:  MOVWF  xF7
120B4:  MOVF   xF0,W
120B6:  ADDWFC xEC,W
120B8:  MOVWF  xF8
120BA:  MOVF   xF1,W
120BC:  ADDWFC xED,W
120BE:  MOVWF  xF9
120C0:  MOVF   xF2,W
120C2:  ADDWFC xEE,W
120C4:  MOVWF  xFA
....................     for (unsigned int32 addr = read_address; addr < end_address; addr += PACKET_SIZE) {
120C6:  MOVFF  1EE,1FE
120CA:  MOVFF  1ED,1FD
120CE:  MOVFF  1EC,1FC
120D2:  MOVFF  1EB,1FB
120D6:  MOVLB  0
120D8:  MOVLB  1
120DA:  MOVF   xFE,W
120DC:  SUBWF  xFA,W
120DE:  BTFSC  FD8.0
120E0:  BRA    120E8
120E2:  MOVLB  0
120E4:  GOTO   122B0
120E8:  MOVLB  0
120EA:  BTFSS  FD8.2
120EC:  GOTO   12132
120F0:  MOVLB  1
120F2:  MOVF   xFD,W
120F4:  SUBWF  xF9,W
120F6:  BTFSC  FD8.0
120F8:  BRA    12100
120FA:  MOVLB  0
120FC:  GOTO   122B0
12100:  MOVLB  0
12102:  BTFSS  FD8.2
12104:  GOTO   12132
12108:  MOVLB  1
1210A:  MOVF   xFC,W
1210C:  SUBWF  xF8,W
1210E:  BTFSC  FD8.0
12110:  BRA    12118
12112:  MOVLB  0
12114:  GOTO   122B0
12118:  MOVLB  0
1211A:  BTFSS  FD8.2
1211C:  GOTO   12132
12120:  MOVLB  1
12122:  MOVF   xF7,W
12124:  SUBWF  xFB,W
12126:  BTFSS  FD8.0
12128:  BRA    12130
1212A:  MOVLB  0
1212C:  GOTO   122B0
12130:  MOVLB  0
....................         unsigned int16 chunk = (end_address - addr) >= PACKET_SIZE ? PACKET_SIZE : (unsigned int16)(end_address - addr);
12132:  MOVLB  1
12134:  MOVF   xFB,W
12136:  SUBWF  xF7,W
12138:  MOVLB  2
1213A:  MOVWF  x03
1213C:  MOVLB  1
1213E:  MOVF   xFC,W
12140:  SUBWFB xF8,W
12142:  MOVLB  2
12144:  MOVWF  x04
12146:  MOVLB  1
12148:  MOVF   xFD,W
1214A:  SUBWFB xF9,W
1214C:  MOVLB  2
1214E:  MOVWF  x05
12150:  MOVLB  1
12152:  MOVF   xFE,W
12154:  SUBWFB xFA,W
12156:  MOVLB  2
12158:  MOVWF  x06
1215A:  MOVF   x06,F
1215C:  BTFSC  FD8.2
1215E:  BRA    12166
12160:  MOVLB  0
12162:  GOTO   1219A
12166:  MOVLB  0
12168:  MOVLB  2
1216A:  MOVF   x05,F
1216C:  BTFSC  FD8.2
1216E:  BRA    12176
12170:  MOVLB  0
12172:  GOTO   1219A
12176:  MOVLB  0
12178:  MOVLB  2
1217A:  MOVF   x04,F
1217C:  BTFSC  FD8.2
1217E:  BRA    12186
12180:  MOVLB  0
12182:  GOTO   1219A
12186:  MOVLB  0
12188:  MOVLB  2
1218A:  MOVF   x03,W
1218C:  SUBLW  3F
1218E:  BTFSS  FD8.0
12190:  BRA    12198
12192:  MOVLB  0
12194:  GOTO   121A2
12198:  MOVLB  0
1219A:  CLRF   03
1219C:  MOVLW  40
1219E:  GOTO   121C4
121A2:  MOVLB  1
121A4:  MOVF   xFB,W
121A6:  SUBWF  xF7,W
121A8:  MOVWF  00
121AA:  MOVF   xFC,W
121AC:  SUBWFB xF8,W
121AE:  MOVWF  01
121B0:  MOVF   xFD,W
121B2:  SUBWFB xF9,W
121B4:  MOVWF  02
121B6:  MOVF   xFE,W
121B8:  SUBWFB xFA,W
121BA:  MOVWF  03
121BC:  MOVFF  01,03
121C0:  MOVF   00,W
121C2:  MOVLB  0
121C4:  MOVLB  1
121C6:  MOVWF  xFF
121C8:  MOVFF  03,200
121CC:  MOVLB  0
....................         read_data_bytes(smf, addr, buffer, chunk);
121CE:  MOVFF  119,AEE
121D2:  MOVFF  118,AED
121D6:  MOVFF  117,AEC
121DA:  MOVFF  116,AEB
121DE:  MOVFF  1FE,AF2
121E2:  MOVFF  1FD,AF1
121E6:  MOVFF  1FC,AF0
121EA:  MOVFF  1FB,AEF
121EE:  MOVLW  01
121F0:  MOVLB  A
121F2:  MOVWF  xF4
121F4:  MOVLW  A3
121F6:  MOVWF  xF3
121F8:  CLRF   xF8
121FA:  CLRF   xF7
121FC:  MOVFF  200,AF6
12200:  MOVFF  1FF,AF5
12204:  MOVLB  0
12206:  CALL   2EEC
....................         for (unsigned int16 i = 0; i < chunk; i++) fprintf(PC, "%02X ", buffer[i]);
1220A:  MOVLB  2
1220C:  CLRF   x02
1220E:  CLRF   x01
12210:  MOVLB  0
12212:  MOVLB  2
12214:  MOVF   x02,W
12216:  SUBWF  x00,W
12218:  BTFSC  FD8.0
1221A:  BRA    12222
1221C:  MOVLB  0
1221E:  GOTO   1227C
12222:  MOVLB  0
12224:  BTFSS  FD8.2
12226:  GOTO   1223E
1222A:  MOVLB  1
1222C:  MOVF   xFF,W
1222E:  MOVLB  2
12230:  SUBWF  x01,W
12232:  BTFSS  FD8.0
12234:  BRA    1223C
12236:  MOVLB  0
12238:  GOTO   1227C
1223C:  MOVLB  0
1223E:  MOVLW  A3
12240:  MOVLB  2
12242:  ADDWF  x01,W
12244:  MOVWF  FE9
12246:  MOVLW  01
12248:  ADDWFC x02,W
1224A:  MOVWF  FEA
1224C:  MOVFF  FEF,203
12250:  MOVFF  203,9E8
12254:  MOVLW  37
12256:  MOVLB  9
12258:  MOVWF  xE9
1225A:  MOVLB  0
1225C:  CALL   2564
12260:  MOVLW  20
12262:  BTFSS  FA6.6
12264:  GOTO   12262
12268:  MOVLB  E
1226A:  MOVWF  xF9
1226C:  MOVLB  0
1226E:  MOVLB  2
12270:  INCF   x01,F
12272:  BTFSC  FD8.2
12274:  INCF   x02,F
12276:  MOVLB  0
12278:  GOTO   12212
....................         fprintf(PC, "\r\n");
1227C:  MOVLW  0D
1227E:  BTFSS  FA6.6
12280:  GOTO   1227E
12284:  MOVLB  E
12286:  MOVWF  xF9
12288:  MOVLW  0A
1228A:  MOVLB  0
1228C:  BTFSS  FA6.6
1228E:  GOTO   1228C
12292:  MOVLB  E
12294:  MOVWF  xF9
12296:  MOVLB  0
12298:  MOVLW  40
1229A:  MOVLB  1
1229C:  ADDWF  xFB,F
1229E:  MOVLW  00
122A0:  ADDWFC xFC,F
122A2:  MOVLW  00
122A4:  ADDWFC xFD,F
122A6:  MOVLW  00
122A8:  ADDWFC xFE,F
122AA:  MOVLB  0
122AC:  GOTO   120D8
....................     }
....................     fprintf(PC, "\r\n___End SMF Read____\r\n");
122B0:  MOVLW  D8
122B2:  MOVWF  FF6
122B4:  MOVLW  0C
122B6:  MOVWF  FF7
122B8:  MOVLW  00
122BA:  MOVWF  FF8
122BC:  CALL   22FE
....................     fprintf(PC, "____________________\r\n\r\n");
122C0:  MOVLW  F0
122C2:  MOVWF  FF6
122C4:  MOVLW  0C
122C6:  MOVWF  FF7
122C8:  MOVLW  00
122CA:  MOVWF  FF8
122CC:  CALL   22FE
122D0:  GOTO   12B58 (RETURN)
.................... }
.................... 
.................... void smf_erase(FlashOperationStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
122D4:  MOVLW  0A
122D6:  MOVWF  FF6
122D8:  MOVLW  0D
122DA:  MOVWF  FF7
122DC:  MOVLW  00
122DE:  MOVWF  FF8
122E0:  CALL   22FE
....................     fprintf(PC, "___Start smf_erase____\r\n");
122E4:  MOVLW  24
122E6:  MOVWF  FF6
122E8:  MOVLW  0D
122EA:  MOVWF  FF7
122EC:  MOVLW  00
122EE:  MOVWF  FF8
122F0:  CALL   22FE
.................... 
....................     SmfAddressStruct mission_type = get_smf_address_struct(smf_data->mission_id);
....................     unsigned int32 erase_address = smf_data->misf_start_addr;
....................     unsigned int32 erase_size = smf_data->misf_size;
122F4:  MOVLB  1
122F6:  MOVF   xA1,W
122F8:  MOVWF  FE9
122FA:  MOVF   xA2,W
122FC:  MOVWF  FEA
122FE:  MOVFF  FEF,1BB
12302:  MOVFF  1BB,20A
12306:  MOVLB  0
12308:  CALL   11A12
1230C:  MOVFF  02,03
12310:  MOVF   01,W
12312:  MOVWF  FE1
12314:  MOVFF  03,FE2
12318:  MOVLW  01
1231A:  MOVWF  FEA
1231C:  MOVLW  A3
1231E:  MOVWF  FE9
12320:  MOVLW  08
12322:  MOVWF  01
12324:  MOVFF  FE6,FEE
12328:  DECFSZ 01,F
1232A:  GOTO   12324
1232E:  MOVLW  04
12330:  MOVLB  1
12332:  ADDWF  xA1,W
12334:  MOVWF  FE9
12336:  MOVLW  00
12338:  ADDWFC xA2,W
1233A:  MOVWF  FEA
1233C:  MOVFF  FEF,1AB
12340:  MOVFF  FEC,1AC
12344:  MOVFF  FEC,1AD
12348:  MOVFF  FEC,1AE
1234C:  MOVF   FED,F
1234E:  MOVF   FED,F
12350:  MOVF   FED,F
12352:  MOVLW  08
12354:  ADDWF  xA1,W
12356:  MOVWF  FE9
12358:  MOVLW  00
1235A:  ADDWFC xA2,W
1235C:  MOVWF  FEA
1235E:  MOVFF  FEF,1AF
12362:  MOVFF  FEC,1B0
12366:  MOVFF  FEC,1B1
1236A:  MOVFF  FEC,1B2
1236E:  MOVF   FED,F
12370:  MOVF   FED,F
12372:  MOVF   FED,F
....................     fprintf(PC, "[SMF] Erase address   : %LX\r\n", erase_address);
12374:  MOVLW  3E
12376:  MOVWF  FF6
12378:  MOVLW  0D
1237A:  MOVWF  FF7
1237C:  MOVLW  00
1237E:  MOVWF  FF8
12380:  MOVLW  18
12382:  MOVLB  A
12384:  MOVWF  x4E
12386:  MOVLB  0
12388:  CALL   2334
1238C:  MOVFF  1AE,9E8
12390:  MOVLW  37
12392:  MOVLB  9
12394:  MOVWF  xE9
12396:  MOVLB  0
12398:  CALL   2564
1239C:  MOVFF  1AD,9E8
123A0:  MOVLW  37
123A2:  MOVLB  9
123A4:  MOVWF  xE9
123A6:  MOVLB  0
123A8:  CALL   2564
123AC:  MOVFF  1AC,9E8
123B0:  MOVLW  37
123B2:  MOVLB  9
123B4:  MOVWF  xE9
123B6:  MOVLB  0
123B8:  CALL   2564
123BC:  MOVFF  1AB,9E8
123C0:  MOVLW  37
123C2:  MOVLB  9
123C4:  MOVWF  xE9
123C6:  MOVLB  0
123C8:  CALL   2564
123CC:  MOVLW  0D
123CE:  BTFSS  FA6.6
123D0:  GOTO   123CE
123D4:  MOVLB  E
123D6:  MOVWF  xF9
123D8:  MOVLW  0A
123DA:  MOVLB  0
123DC:  BTFSS  FA6.6
123DE:  GOTO   123DC
123E2:  MOVLB  E
123E4:  MOVWF  xF9
....................     fprintf(PC, "[SMF] Erase data size : %lu (0x%lx)\r\n\r\n", erase_size, erase_size);
123E6:  MOVLW  5C
123E8:  MOVWF  FF6
123EA:  MOVLW  0D
123EC:  MOVWF  FF7
123EE:  MOVLW  00
123F0:  MOVWF  FF8
123F2:  MOVLW  18
123F4:  MOVLB  A
123F6:  MOVWF  x4E
123F8:  MOVLB  0
123FA:  CALL   2334
123FE:  MOVLW  41
12400:  MOVWF  FE9
12402:  MOVFF  1B2,209
12406:  MOVFF  1B1,208
1240A:  MOVFF  1B0,207
1240E:  MOVFF  1AF,206
12412:  CALL   62F2
12416:  MOVLW  77
12418:  MOVWF  FF6
1241A:  MOVLW  0D
1241C:  MOVWF  FF7
1241E:  MOVLW  00
12420:  MOVWF  FF8
12422:  MOVLW  04
12424:  MOVLB  A
12426:  MOVWF  x4E
12428:  MOVLB  0
1242A:  CALL   2334
1242E:  MOVFF  1B2,9E8
12432:  MOVLW  57
12434:  MOVLB  9
12436:  MOVWF  xE9
12438:  MOVLB  0
1243A:  CALL   2564
1243E:  MOVFF  1B1,9E8
12442:  MOVLW  57
12444:  MOVLB  9
12446:  MOVWF  xE9
12448:  MOVLB  0
1244A:  CALL   2564
1244E:  MOVFF  1B0,9E8
12452:  MOVLW  57
12454:  MOVLB  9
12456:  MOVWF  xE9
12458:  MOVLB  0
1245A:  CALL   2564
1245E:  MOVFF  1AF,9E8
12462:  MOVLW  57
12464:  MOVLB  9
12466:  MOVWF  xE9
12468:  MOVLB  0
1246A:  CALL   2564
1246E:  MOVLW  7E
12470:  MOVWF  FF6
12472:  MOVLW  0D
12474:  MOVWF  FF7
12476:  MOVLW  00
12478:  MOVWF  FF8
1247A:  MOVLW  05
1247C:  MOVLB  A
1247E:  MOVWF  x4E
12480:  MOVLB  0
12482:  CALL   2334
.................... 
....................     if (!is_connect(smf)){
12486:  MOVFF  119,253
1248A:  MOVFF  118,252
1248E:  MOVFF  117,251
12492:  MOVFF  116,250
12496:  CALL   2E24
1249A:  MOVF   01,F
1249C:  BTFSS  FD8.2
1249E:  GOTO   124B6
....................         fprintf(PC, "Error: SMF is not connected\r\n");
124A2:  MOVLW  84
124A4:  MOVWF  FF6
124A6:  MOVLW  0D
124A8:  MOVWF  FF7
124AA:  MOVLW  00
124AC:  MOVWF  FF8
124AE:  CALL   22FE
....................         return;
124B2:  GOTO   12952
....................     }
.................... 
....................     // Check if erase operation is within mission_type range
....................     if (erase_address < mission_type.start_address || erase_address >= mission_type.end_address) {
124B6:  MOVLB  1
124B8:  MOVF   xAE,W
124BA:  SUBWF  xA6,W
124BC:  BTFSC  FD8.0
124BE:  BRA    124C6
124C0:  MOVLB  0
124C2:  GOTO   12510
124C6:  MOVLB  0
124C8:  BTFSS  FD8.2
124CA:  GOTO   1256A
124CE:  MOVLB  1
124D0:  MOVF   xAD,W
124D2:  SUBWF  xA5,W
124D4:  BTFSC  FD8.0
124D6:  BRA    124DE
124D8:  MOVLB  0
124DA:  GOTO   12510
124DE:  MOVLB  0
124E0:  BTFSS  FD8.2
124E2:  GOTO   1256A
124E6:  MOVLB  1
124E8:  MOVF   xAC,W
124EA:  SUBWF  xA4,W
124EC:  BTFSC  FD8.0
124EE:  BRA    124F6
124F0:  MOVLB  0
124F2:  GOTO   12510
124F6:  MOVLB  0
124F8:  BTFSS  FD8.2
124FA:  GOTO   1256A
124FE:  MOVLB  1
12500:  MOVF   xA3,W
12502:  SUBWF  xAB,W
12504:  BTFSC  FD8.0
12506:  BRA    1250E
12508:  MOVLB  0
1250A:  GOTO   1256A
1250E:  MOVLB  0
12510:  MOVLB  1
12512:  MOVF   xAA,W
12514:  SUBWF  xAE,W
12516:  BTFSC  FD8.0
12518:  BRA    12520
1251A:  MOVLB  0
1251C:  GOTO   1268E
12520:  MOVLB  0
12522:  BTFSS  FD8.2
12524:  GOTO   1256A
12528:  MOVLB  1
1252A:  MOVF   xA9,W
1252C:  SUBWF  xAD,W
1252E:  BTFSC  FD8.0
12530:  BRA    12538
12532:  MOVLB  0
12534:  GOTO   1268E
12538:  MOVLB  0
1253A:  BTFSS  FD8.2
1253C:  GOTO   1256A
12540:  MOVLB  1
12542:  MOVF   xA8,W
12544:  SUBWF  xAC,W
12546:  BTFSC  FD8.0
12548:  BRA    12550
1254A:  MOVLB  0
1254C:  GOTO   1268E
12550:  MOVLB  0
12552:  BTFSS  FD8.2
12554:  GOTO   1256A
12558:  MOVLB  1
1255A:  MOVF   xA7,W
1255C:  SUBWF  xAB,W
1255E:  BTFSC  FD8.0
12560:  BRA    12568
12562:  MOVLB  0
12564:  GOTO   1268E
12568:  MOVLB  0
....................         fprintf(PC, "Error: Erase source address 0x%LX is outside mission range [0x%LX - 0x%LX]\r\n", 
....................                 erase_address, mission_type.start_address, mission_type.end_address);
1256A:  MOVLW  A2
1256C:  MOVWF  FF6
1256E:  MOVLW  0D
12570:  MOVWF  FF7
12572:  MOVLW  00
12574:  MOVWF  FF8
12576:  MOVLW  1E
12578:  MOVLB  A
1257A:  MOVWF  x4E
1257C:  MOVLB  0
1257E:  CALL   2334
12582:  MOVFF  1AE,9E8
12586:  MOVLW  37
12588:  MOVLB  9
1258A:  MOVWF  xE9
1258C:  MOVLB  0
1258E:  CALL   2564
12592:  MOVFF  1AD,9E8
12596:  MOVLW  37
12598:  MOVLB  9
1259A:  MOVWF  xE9
1259C:  MOVLB  0
1259E:  CALL   2564
125A2:  MOVFF  1AC,9E8
125A6:  MOVLW  37
125A8:  MOVLB  9
125AA:  MOVWF  xE9
125AC:  MOVLB  0
125AE:  CALL   2564
125B2:  MOVFF  1AB,9E8
125B6:  MOVLW  37
125B8:  MOVLB  9
125BA:  MOVWF  xE9
125BC:  MOVLB  0
125BE:  CALL   2564
125C2:  MOVLW  C3
125C4:  MOVWF  FF6
125C6:  MOVLW  0D
125C8:  MOVWF  FF7
125CA:  MOVLW  00
125CC:  MOVWF  FF8
125CE:  MOVLW  1D
125D0:  MOVLB  A
125D2:  MOVWF  x4E
125D4:  MOVLB  0
125D6:  CALL   2334
125DA:  MOVFF  1A6,9E8
125DE:  MOVLW  37
125E0:  MOVLB  9
125E2:  MOVWF  xE9
125E4:  MOVLB  0
125E6:  CALL   2564
125EA:  MOVFF  1A5,9E8
125EE:  MOVLW  37
125F0:  MOVLB  9
125F2:  MOVWF  xE9
125F4:  MOVLB  0
125F6:  CALL   2564
125FA:  MOVFF  1A4,9E8
125FE:  MOVLW  37
12600:  MOVLB  9
12602:  MOVWF  xE9
12604:  MOVLB  0
12606:  CALL   2564
1260A:  MOVFF  1A3,9E8
1260E:  MOVLW  37
12610:  MOVLB  9
12612:  MOVWF  xE9
12614:  MOVLB  0
12616:  CALL   2564
1261A:  MOVLW  E3
1261C:  MOVWF  FF6
1261E:  MOVLW  0D
12620:  MOVWF  FF7
12622:  MOVLW  00
12624:  MOVWF  FF8
12626:  MOVLW  05
12628:  MOVLB  A
1262A:  MOVWF  x4E
1262C:  MOVLB  0
1262E:  CALL   2334
12632:  MOVFF  1AA,9E8
12636:  MOVLW  37
12638:  MOVLB  9
1263A:  MOVWF  xE9
1263C:  MOVLB  0
1263E:  CALL   2564
12642:  MOVFF  1A9,9E8
12646:  MOVLW  37
12648:  MOVLB  9
1264A:  MOVWF  xE9
1264C:  MOVLB  0
1264E:  CALL   2564
12652:  MOVFF  1A8,9E8
12656:  MOVLW  37
12658:  MOVLB  9
1265A:  MOVWF  xE9
1265C:  MOVLB  0
1265E:  CALL   2564
12662:  MOVFF  1A7,9E8
12666:  MOVLW  37
12668:  MOVLB  9
1266A:  MOVWF  xE9
1266C:  MOVLB  0
1266E:  CALL   2564
12672:  MOVLW  EB
12674:  MOVWF  FF6
12676:  MOVLW  0D
12678:  MOVWF  FF7
1267A:  MOVLW  00
1267C:  MOVWF  FF8
1267E:  MOVLW  03
12680:  MOVLB  A
12682:  MOVWF  x4E
12684:  MOVLB  0
12686:  CALL   2334
....................         return;
1268A:  GOTO   12952
....................     }
.................... 
....................     if ((erase_address + erase_size) > mission_type.end_address) {
1268E:  MOVLB  1
12690:  MOVF   xAF,W
12692:  ADDWF  xAB,W
12694:  MOVWF  xBB
12696:  MOVF   xB0,W
12698:  ADDWFC xAC,W
1269A:  MOVWF  xBC
1269C:  MOVF   xB1,W
1269E:  ADDWFC xAD,W
126A0:  MOVWF  xBD
126A2:  MOVF   xB2,W
126A4:  ADDWFC xAE,W
126A6:  MOVWF  xBE
126A8:  MOVF   xAA,W
126AA:  SUBWF  xBE,W
126AC:  BTFSC  FD8.0
126AE:  BRA    126B6
126B0:  MOVLB  0
126B2:  GOTO   127A0
126B6:  MOVLB  0
126B8:  BTFSS  FD8.2
126BA:  GOTO   12700
126BE:  MOVLB  1
126C0:  MOVF   xA9,W
126C2:  SUBWF  xBD,W
126C4:  BTFSC  FD8.0
126C6:  BRA    126CE
126C8:  MOVLB  0
126CA:  GOTO   127A0
126CE:  MOVLB  0
126D0:  BTFSS  FD8.2
126D2:  GOTO   12700
126D6:  MOVLB  1
126D8:  MOVF   xA8,W
126DA:  SUBWF  xBC,W
126DC:  BTFSC  FD8.0
126DE:  BRA    126E6
126E0:  MOVLB  0
126E2:  GOTO   127A0
126E6:  MOVLB  0
126E8:  BTFSS  FD8.2
126EA:  GOTO   12700
126EE:  MOVLB  1
126F0:  MOVF   xBB,W
126F2:  SUBWF  xA7,W
126F4:  BTFSS  FD8.0
126F6:  BRA    126FE
126F8:  MOVLB  0
126FA:  GOTO   127A0
126FE:  MOVLB  0
....................         fprintf(PC, "Error: Erase operation would exceed mission end address 0x%LX\r\n", mission_type.end_address);
12700:  MOVLW  F0
12702:  MOVWF  FF6
12704:  MOVLW  0D
12706:  MOVWF  FF7
12708:  MOVLW  00
1270A:  MOVWF  FF8
1270C:  MOVLW  3A
1270E:  MOVLB  A
12710:  MOVWF  x4E
12712:  MOVLB  0
12714:  CALL   2334
12718:  MOVFF  1AA,9E8
1271C:  MOVLW  37
1271E:  MOVLB  9
12720:  MOVWF  xE9
12722:  MOVLB  0
12724:  CALL   2564
12728:  MOVFF  1A9,9E8
1272C:  MOVLW  37
1272E:  MOVLB  9
12730:  MOVWF  xE9
12732:  MOVLB  0
12734:  CALL   2564
12738:  MOVFF  1A8,9E8
1273C:  MOVLW  37
1273E:  MOVLB  9
12740:  MOVWF  xE9
12742:  MOVLB  0
12744:  CALL   2564
12748:  MOVFF  1A7,9E8
1274C:  MOVLW  37
1274E:  MOVLB  9
12750:  MOVWF  xE9
12752:  MOVLB  0
12754:  CALL   2564
12758:  MOVLW  0D
1275A:  BTFSS  FA6.6
1275C:  GOTO   1275A
12760:  MOVLB  E
12762:  MOVWF  xF9
12764:  MOVLW  0A
12766:  MOVLB  0
12768:  BTFSS  FA6.6
1276A:  GOTO   12768
1276E:  MOVLB  E
12770:  MOVWF  xF9
....................         fprintf(PC, "Limiting erase size to stay within mission bounds\r\n");
12772:  MOVLW  30
12774:  MOVWF  FF6
12776:  MOVLW  0E
12778:  MOVWF  FF7
1277A:  MOVLW  00
1277C:  MOVWF  FF8
1277E:  MOVLB  0
12780:  CALL   22FE
....................         erase_size = mission_type.end_address - erase_address;
12784:  MOVLB  1
12786:  MOVF   xAB,W
12788:  SUBWF  xA7,W
1278A:  MOVWF  xAF
1278C:  MOVF   xAC,W
1278E:  SUBWFB xA8,W
12790:  MOVWF  xB0
12792:  MOVF   xAD,W
12794:  SUBWFB xA9,W
12796:  MOVWF  xB1
12798:  MOVF   xAE,W
1279A:  SUBWFB xAA,W
1279C:  MOVWF  xB2
1279E:  MOVLB  0
....................     }
.................... 
....................     fprintf(PC, "Erase operation validated within mission range\r\n");
127A0:  MOVLW  64
127A2:  MOVWF  FF6
127A4:  MOVLW  0E
127A6:  MOVWF  FF7
127A8:  MOVLW  00
127AA:  MOVWF  FF8
127AC:  CALL   22FE
....................     unsigned int32 erase_end = erase_address + erase_size;
....................     // 4KB境界開始へアライン
....................     unsigned int32 current = erase_address & ~0xFFF;
127B0:  MOVLB  1
127B2:  MOVF   xAF,W
127B4:  ADDWF  xAB,W
127B6:  MOVWF  xB3
127B8:  MOVF   xB0,W
127BA:  ADDWFC xAC,W
127BC:  MOVWF  xB4
127BE:  MOVF   xB1,W
127C0:  ADDWFC xAD,W
127C2:  MOVWF  xB5
127C4:  MOVF   xB2,W
127C6:  ADDWFC xAE,W
127C8:  MOVWF  xB6
127CA:  CLRF   xB7
127CC:  MOVF   xAC,W
127CE:  ANDLW  F0
127D0:  MOVWF  xB8
127D2:  CLRF   xB9
127D4:  CLRF   xBA
127D6:  MOVLB  0
....................     while (current < erase_end && current < (unsigned int32)mission_type.end_address) {
127D8:  MOVLB  1
127DA:  MOVF   xBA,W
127DC:  SUBWF  xB6,W
127DE:  BTFSC  FD8.0
127E0:  BRA    127E8
127E2:  MOVLB  0
127E4:  GOTO   128C4
127E8:  MOVLB  0
127EA:  BTFSS  FD8.2
127EC:  GOTO   12832
127F0:  MOVLB  1
127F2:  MOVF   xB9,W
127F4:  SUBWF  xB5,W
127F6:  BTFSC  FD8.0
127F8:  BRA    12800
127FA:  MOVLB  0
127FC:  GOTO   128C4
12800:  MOVLB  0
12802:  BTFSS  FD8.2
12804:  GOTO   12832
12808:  MOVLB  1
1280A:  MOVF   xB8,W
1280C:  SUBWF  xB4,W
1280E:  BTFSC  FD8.0
12810:  BRA    12818
12812:  MOVLB  0
12814:  GOTO   128C4
12818:  MOVLB  0
1281A:  BTFSS  FD8.2
1281C:  GOTO   12832
12820:  MOVLB  1
12822:  MOVF   xB3,W
12824:  SUBWF  xB7,W
12826:  BTFSS  FD8.0
12828:  BRA    12830
1282A:  MOVLB  0
1282C:  GOTO   128C4
12830:  MOVLB  0
12832:  MOVLB  1
12834:  MOVF   xBA,W
12836:  SUBWF  xAA,W
12838:  BTFSC  FD8.0
1283A:  BRA    12842
1283C:  MOVLB  0
1283E:  GOTO   128C4
12842:  MOVLB  0
12844:  BTFSS  FD8.2
12846:  GOTO   1288C
1284A:  MOVLB  1
1284C:  MOVF   xB9,W
1284E:  SUBWF  xA9,W
12850:  BTFSC  FD8.0
12852:  BRA    1285A
12854:  MOVLB  0
12856:  GOTO   128C4
1285A:  MOVLB  0
1285C:  BTFSS  FD8.2
1285E:  GOTO   1288C
12862:  MOVLB  1
12864:  MOVF   xB8,W
12866:  SUBWF  xA8,W
12868:  BTFSC  FD8.0
1286A:  BRA    12872
1286C:  MOVLB  0
1286E:  GOTO   128C4
12872:  MOVLB  0
12874:  BTFSS  FD8.2
12876:  GOTO   1288C
1287A:  MOVLB  1
1287C:  MOVF   xA7,W
1287E:  SUBWF  xB7,W
12880:  BTFSS  FD8.0
12882:  BRA    1288A
12884:  MOVLB  0
12886:  GOTO   128C4
1288A:  MOVLB  0
....................         subsector_4kByte_erase(smf, current);
1288C:  MOVFF  119,A93
12890:  MOVFF  118,A92
12894:  MOVFF  117,A91
12898:  MOVFF  116,A90
1289C:  MOVFF  1BA,A97
128A0:  MOVFF  1B9,A96
128A4:  MOVFF  1B8,A95
128A8:  MOVFF  1B7,A94
128AC:  CALL   4D5A
....................         current += SUBSECTOR_SIZE;
128B0:  MOVLW  10
128B2:  MOVLB  1
128B4:  ADDWF  xB8,F
128B6:  MOVLW  00
128B8:  ADDWFC xB9,F
128BA:  MOVLW  00
128BC:  ADDWFC xBA,F
128BE:  MOVLB  0
128C0:  GOTO   127D8
....................     }
....................     fprintf(PC, "Erased %lu bytes (aligned)\r\n", (current - (erase_address & ~0xFFF)));
128C4:  CLRF   00
128C6:  MOVLB  1
128C8:  MOVF   xAC,W
128CA:  ANDLW  F0
128CC:  MOVWF  01
128CE:  CLRF   02
128D0:  CLRF   03
128D2:  MOVF   00,W
128D4:  SUBWF  xB7,W
128D6:  MOVWF  xBB
128D8:  MOVF   01,W
128DA:  SUBWFB xB8,W
128DC:  MOVWF  xBC
128DE:  MOVF   02,W
128E0:  SUBWFB xB9,W
128E2:  MOVWF  xBD
128E4:  MOVF   03,W
128E6:  SUBWFB xBA,W
128E8:  MOVWF  xBE
128EA:  MOVLW  96
128EC:  MOVWF  FF6
128EE:  MOVLW  0E
128F0:  MOVWF  FF7
128F2:  MOVLW  00
128F4:  MOVWF  FF8
128F6:  MOVLW  07
128F8:  MOVLB  A
128FA:  MOVWF  x4E
128FC:  MOVLB  0
128FE:  CALL   2334
12902:  MOVLW  41
12904:  MOVWF  FE9
12906:  MOVFF  1BE,209
1290A:  MOVFF  1BD,208
1290E:  MOVFF  1BC,207
12912:  MOVFF  1BB,206
12916:  CALL   62F2
1291A:  MOVLW  A0
1291C:  MOVWF  FF6
1291E:  MOVLW  0E
12920:  MOVWF  FF7
12922:  MOVLW  00
12924:  MOVWF  FF8
12926:  MOVLW  12
12928:  MOVLB  A
1292A:  MOVWF  x4E
1292C:  MOVLB  0
1292E:  CALL   2334
.................... 
....................     fprintf(PC, "\r\n___End smf_erase____\r\n");
12932:  MOVLW  B4
12934:  MOVWF  FF6
12936:  MOVLW  0E
12938:  MOVWF  FF7
1293A:  MOVLW  00
1293C:  MOVWF  FF8
1293E:  CALL   22FE
....................     fprintf(PC, "____________________\r\n\r\n");
12942:  MOVLW  CE
12944:  MOVWF  FF6
12946:  MOVLW  0E
12948:  MOVWF  FF7
1294A:  MOVLW  00
1294C:  MOVWF  FF8
1294E:  CALL   22FE
12952:  GOTO   12B68 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void smf_update_address_area()
.................... {
....................     smf_address_header_t smf_data_table;
....................     unsigned int8 buffer[PACKET_SIZE];
.................... 
....................     // Read existing SMF address area
....................     read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, buffer, PACKET_SIZE);
.................... }
.................... // End of file
.................... 
.................... #include "domain/cigs_flash.c"
.................... #include "cigs_flash.h"                           
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/cigs_config.h"             
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mt25q.h"                
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/tool/calc_tools.h"             
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/smf_queue.h"              
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... 
.................... const ADDRESS_AREA_T MISF_ADDRESS_TABLE[FLASH_ID_COUNT] = {
....................     { MISF_CIGS_DATA_TABLE_START,   MISF_CIGS_DATA_TABLE_END,   MISF_CIGS_DATA_TABLE_SIZE },
....................     { MISF_CIGS_PICLOG_START,       MISF_CIGS_PICLOG_END,       MISF_CIGS_PICLOG_SIZE },
....................     { MISF_CIGS_ENVIRO_START,       MISF_CIGS_ENVIRO_END,       MISF_CIGS_ENVIRO_SIZE },
....................     { MISF_CIGS_IV1_HEADER_START,   MISF_CIGS_IV1_HEADER_END,   MISF_CIGS_IV1_HEADER_SIZE },
....................     { MISF_CIGS_IV1_DATA_START,     MISF_CIGS_IV1_DATA_END,     MISF_CIGS_IV1_DATA_SIZE },
....................     { MISF_CIGS_IV2_HEADER_START,   MISF_CIGS_IV2_HEADER_END,   MISF_CIGS_IV2_HEADER_SIZE },
....................     { MISF_CIGS_IV2_DATA_START,     MISF_CIGS_IV2_DATA_END,     MISF_CIGS_IV2_DATA_SIZE }
.................... };
.................... 
.................... FlashCounter_t misf_counter_table[FLASH_ID_COUNT];
.................... FlashCounter_t *misf_counter_table_ptr[FLASH_ID_COUNT] = {&misf_counter_table[0], &misf_counter_table[1], &misf_counter_table[2], &misf_counter_table[3], &misf_counter_table[4], &misf_counter_table[5], &misf_counter_table[6]};
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
03980:  MOVLW  E8
03982:  MOVWF  FF6
03984:  MOVLW  0E
03986:  MOVWF  FF7
03988:  MOVLW  00
0398A:  MOVWF  FF8
0398C:  CALL   22FE
....................     output_high(MIS_FM_CS);
03990:  MOVLW  FE
03992:  MOVWF  F98
03994:  BSF    F8F.0
....................     output_high(SMF_CS);
03996:  MOVLW  FB
03998:  MOVWF  F92
0399A:  BSF    F89.2
.................... 
....................     // 接続処理
....................     if (is_connect(mis_fm)) {
0399C:  MOVFF  115,253
039A0:  MOVFF  114,252
039A4:  MOVFF  113,251
039A8:  MOVFF  112,250
039AC:  CALL   2E24
039B0:  MOVF   01,F
039B2:  BTFSC  FD8.2
039B4:  GOTO   39CC
....................         fprintf(PC, "\t[MIS FM] Connected\r\n");
039B8:  MOVLW  04
039BA:  MOVWF  FF6
039BC:  MOVLW  0F
039BE:  MOVWF  FF7
039C0:  MOVLW  00
039C2:  MOVWF  FF8
039C4:  CALL   22FE
....................     } else {
039C8:  GOTO   39DC
....................         fprintf(PC, "\t[MIS FM] Not Connected\r\n");
039CC:  MOVLW  1A
039CE:  MOVWF  FF6
039D0:  MOVLW  0F
039D2:  MOVWF  FF7
039D4:  MOVLW  00
039D6:  MOVWF  FF8
039D8:  CALL   22FE
....................     }
....................     if (is_connect(smf)) {
039DC:  MOVFF  119,253
039E0:  MOVFF  118,252
039E4:  MOVFF  117,251
039E8:  MOVFF  116,250
039EC:  CALL   2E24
039F0:  MOVF   01,F
039F2:  BTFSC  FD8.2
039F4:  GOTO   3A0C
....................         fprintf(PC, "\t[SMF] Connected\r\n");
039F8:  MOVLW  34
039FA:  MOVWF  FF6
039FC:  MOVLW  0F
039FE:  MOVWF  FF7
03A00:  MOVLW  00
03A02:  MOVWF  FF8
03A04:  CALL   22FE
....................     } else {
03A08:  GOTO   3A1C
....................         fprintf(PC, "\t[SMF] Not Connected\r\n");
03A0C:  MOVLW  48
03A0E:  MOVWF  FF6
03A10:  MOVLW  0F
03A12:  MOVWF  FF7
03A14:  MOVLW  00
03A16:  MOVWF  FF8
03A18:  CALL   22FE
....................     }
.................... 
....................     //=== MIS_FM カウンタテーブル読出し ===//
....................     FlashData_t read_header;
....................     FlashData_t *read_header_ptr = &read_header;
03A1C:  MOVLW  02
03A1E:  MOVLB  2
03A20:  MOVWF  x4F
03A22:  MOVLW  0E
03A24:  MOVWF  x4E
....................     memset(read_header_ptr, 0x00, sizeof(FlashData_t));
03A26:  MOVFF  24F,FEA
03A2A:  MOVFF  24E,FE9
03A2E:  CLRF   00
03A30:  CLRF   02
03A32:  MOVLW  40
03A34:  MOVWF  01
03A36:  MOVLB  0
03A38:  CALL   236E
....................     fprintf(PC, "\t[MIS FM] %08LX\r\n", MISF_ADDRESS_TABLE[FLASH_ID_DATA_TABLE].start);
03A3C:  MOVLW  60
03A3E:  MOVWF  FF6
03A40:  MOVLW  0F
03A42:  MOVWF  FF7
03A44:  MOVLW  00
03A46:  MOVWF  FF8
03A48:  MOVLW  0A
03A4A:  MOVLB  A
03A4C:  MOVWF  x4E
03A4E:  MOVLB  0
03A50:  CALL   2334
03A54:  MOVLB  9
03A56:  CLRF   xE8
03A58:  MOVLW  37
03A5A:  MOVWF  xE9
03A5C:  MOVLB  0
03A5E:  CALL   2564
03A62:  MOVLB  9
03A64:  CLRF   xE8
03A66:  MOVLW  37
03A68:  MOVWF  xE9
03A6A:  MOVLB  0
03A6C:  CALL   2564
03A70:  MOVLB  9
03A72:  CLRF   xE8
03A74:  MOVLW  37
03A76:  MOVWF  xE9
03A78:  MOVLB  0
03A7A:  CALL   2564
03A7E:  MOVLB  9
03A80:  CLRF   xE8
03A82:  MOVLW  37
03A84:  MOVWF  xE9
03A86:  MOVLB  0
03A88:  CALL   2564
03A8C:  MOVLW  0D
03A8E:  BTFSS  FA6.6
03A90:  GOTO   3A8E
03A94:  MOVLB  E
03A96:  MOVWF  xF9
03A98:  MOVLW  0A
03A9A:  MOVLB  0
03A9C:  BTFSS  FA6.6
03A9E:  GOTO   3A9C
03AA2:  MOVLB  E
03AA4:  MOVWF  xF9
....................     read_data_bytes(mis_fm, MISF_ADDRESS_TABLE[FLASH_ID_DATA_TABLE].start, read_header_ptr->bytes, PACKET_SIZE);
03AA6:  MOVLB  2
03AA8:  MOVF   x4E,W
03AAA:  MOVWF  01
03AAC:  MOVF   x4F,W
03AAE:  MOVWF  03
03AB0:  MOVF   01,W
03AB2:  MOVWF  x50
03AB4:  MOVFF  03,251
03AB8:  MOVFF  115,AEE
03ABC:  MOVFF  114,AED
03AC0:  MOVFF  113,AEC
03AC4:  MOVFF  112,AEB
03AC8:  MOVLB  A
03ACA:  CLRF   xF2
03ACC:  CLRF   xF1
03ACE:  CLRF   xF0
03AD0:  CLRF   xEF
03AD2:  MOVFF  251,AF4
03AD6:  MOVFF  250,AF3
03ADA:  CLRF   xF8
03ADC:  CLRF   xF7
03ADE:  CLRF   xF6
03AE0:  MOVLW  40
03AE2:  MOVWF  xF5
03AE4:  MOVLB  0
03AE6:  CALL   2EEC
.................... 
....................     // CRC 検証
....................     if (read_header_ptr->packet.crc != calc_crc8(read_header_ptr->bytes, PACKET_SIZE - 1)) {
03AEA:  MOVLW  3F
03AEC:  MOVLB  2
03AEE:  ADDWF  x4E,W
03AF0:  MOVWF  FE9
03AF2:  MOVLW  00
03AF4:  ADDWFC x4F,W
03AF6:  MOVWF  FEA
03AF8:  MOVFF  FEF,250
03AFC:  MOVF   x4E,W
03AFE:  MOVWF  01
03B00:  MOVF   x4F,W
03B02:  MOVWF  03
03B04:  MOVF   01,W
03B06:  MOVWF  x51
03B08:  MOVFF  03,252
03B0C:  MOVFF  252,AEC
03B10:  MOVFF  251,AEB
03B14:  MOVLW  3F
03B16:  MOVLB  A
03B18:  MOVWF  xED
03B1A:  MOVLB  0
03B1C:  CALL   310C
03B20:  MOVF   01,W
03B22:  MOVLB  2
03B24:  SUBWF  x50,W
03B26:  BTFSS  FD8.2
03B28:  BRA    3B30
03B2A:  MOVLB  0
03B2C:  GOTO   3B42
03B30:  MOVLB  0
....................         fprintf(PC, "\t[MIS FM] CRC error -> initialize counters\r\n");
03B32:  MOVLW  72
03B34:  MOVWF  FF6
03B36:  MOVLW  0F
03B38:  MOVWF  FF7
03B3A:  MOVLW  00
03B3C:  MOVWF  FF8
03B3E:  CALL   22FE
....................         
....................     }
....................     misf_counter_table[FLASH_ID_PICLOG]       = read_header_ptr->packet.payload.logdata.piclog;
03B42:  MOVLB  2
03B44:  MOVF   x4E,W
03B46:  MOVWF  FE1
03B48:  MOVF   x4F,W
03B4A:  MOVWF  FE2
03B4C:  MOVLW  01
03B4E:  MOVWF  FEA
03B50:  MOVLW  2C
03B52:  MOVWF  FE9
03B54:  MOVLW  0A
03B56:  MOVWF  01
03B58:  MOVLB  0
03B5A:  MOVFF  FE6,FEE
03B5E:  DECFSZ 01,F
03B60:  GOTO   3B5A
....................     misf_counter_table[FLASH_ID_ENVIRONMENT]  = read_header_ptr->packet.payload.logdata.environment;
03B64:  MOVLW  0A
03B66:  MOVLB  2
03B68:  ADDWF  x4E,W
03B6A:  MOVWF  FE1
03B6C:  MOVLW  00
03B6E:  ADDWFC x4F,W
03B70:  MOVWF  FE2
03B72:  MOVLW  01
03B74:  MOVWF  FEA
03B76:  MOVLW  36
03B78:  MOVWF  FE9
03B7A:  MOVLW  0A
03B7C:  MOVWF  01
03B7E:  MOVLB  0
03B80:  MOVFF  FE6,FEE
03B84:  DECFSZ 01,F
03B86:  GOTO   3B80
....................     misf_counter_table[FLASH_ID_IV1_HEADER]   = read_header_ptr->packet.payload.logdata.iv1_header;
03B8A:  MOVLW  14
03B8C:  MOVLB  2
03B8E:  ADDWF  x4E,W
03B90:  MOVWF  FE1
03B92:  MOVLW  00
03B94:  ADDWFC x4F,W
03B96:  MOVWF  FE2
03B98:  MOVLW  01
03B9A:  MOVWF  FEA
03B9C:  MOVLW  40
03B9E:  MOVWF  FE9
03BA0:  MOVLW  0A
03BA2:  MOVWF  01
03BA4:  MOVLB  0
03BA6:  MOVFF  FE6,FEE
03BAA:  DECFSZ 01,F
03BAC:  GOTO   3BA6
....................     misf_counter_table[FLASH_ID_IV1_DATA]     = read_header_ptr->packet.payload.logdata.iv1_data;
03BB0:  MOVLW  1E
03BB2:  MOVLB  2
03BB4:  ADDWF  x4E,W
03BB6:  MOVWF  FE1
03BB8:  MOVLW  00
03BBA:  ADDWFC x4F,W
03BBC:  MOVWF  FE2
03BBE:  MOVLW  01
03BC0:  MOVWF  FEA
03BC2:  MOVLW  4A
03BC4:  MOVWF  FE9
03BC6:  MOVLW  0A
03BC8:  MOVWF  01
03BCA:  MOVLB  0
03BCC:  MOVFF  FE6,FEE
03BD0:  DECFSZ 01,F
03BD2:  GOTO   3BCC
....................     misf_counter_table[FLASH_ID_IV2_HEADER]   = read_header_ptr->packet.payload.logdata.iv2_header;
03BD6:  MOVLW  28
03BD8:  MOVLB  2
03BDA:  ADDWF  x4E,W
03BDC:  MOVWF  FE1
03BDE:  MOVLW  00
03BE0:  ADDWFC x4F,W
03BE2:  MOVWF  FE2
03BE4:  MOVLW  01
03BE6:  MOVWF  FEA
03BE8:  MOVLW  54
03BEA:  MOVWF  FE9
03BEC:  MOVLW  0A
03BEE:  MOVWF  01
03BF0:  MOVLB  0
03BF2:  MOVFF  FE6,FEE
03BF6:  DECFSZ 01,F
03BF8:  GOTO   3BF2
....................     misf_counter_table[FLASH_ID_IV2_DATA]     = read_header_ptr->packet.payload.logdata.iv2_data;
03BFC:  MOVLW  32
03BFE:  MOVLB  2
03C00:  ADDWF  x4E,W
03C02:  MOVWF  FE1
03C04:  MOVLW  00
03C06:  ADDWFC x4F,W
03C08:  MOVWF  FE2
03C0A:  MOVLW  01
03C0C:  MOVWF  FEA
03C0E:  MOVLW  5E
03C10:  MOVWF  FE9
03C12:  MOVLW  0A
03C14:  MOVWF  01
03C16:  MOVLB  0
03C18:  MOVFF  FE6,FEE
03C1C:  DECFSZ 01,F
03C1E:  GOTO   3C18
.................... 
....................     print_misf_address_table();
03C22:  CALL   3178
.................... 
....................     fprintf(PC, "\tComplete\r\n");
03C26:  MOVLW  A0
03C28:  MOVWF  FF6
03C2A:  MOVLW  0F
03C2C:  MOVWF  FF7
03C2E:  MOVLW  00
03C30:  MOVWF  FF8
03C32:  CALL   22FE
03C36:  RETURN 0
.................... }
.................... 
.................... void print_misf_address_table()
.................... {
....................     fprintf(PC, "\tField\t\tCounterName\tValue\r\n");
*
03178:  MOVLW  AC
0317A:  MOVWF  FF6
0317C:  MOVLW  0F
0317E:  MOVWF  FF7
03180:  MOVLW  00
03182:  MOVWF  FF8
03184:  CALL   22FE
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
03188:  MOVLW  C8
0318A:  MOVWF  FF6
0318C:  MOVLW  0F
0318E:  MOVWF  FF7
03190:  MOVLW  00
03192:  MOVWF  FF8
03194:  CALL   22FE
....................     fprintf(PC, "\tPICLOG\t\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_PICLOG].used_counter);
03198:  MOVLW  F4
0319A:  MOVWF  FF6
0319C:  MOVLW  0F
0319E:  MOVWF  FF7
031A0:  MOVLW  00
031A2:  MOVWF  FF8
031A4:  MOVLW  11
031A6:  MOVLB  A
031A8:  MOVWF  x4E
031AA:  MOVLB  0
031AC:  CALL   2334
031B0:  MOVFF  12F,9E8
031B4:  MOVLW  37
031B6:  MOVLB  9
031B8:  MOVWF  xE9
031BA:  MOVLB  0
031BC:  CALL   2564
031C0:  MOVFF  12E,9E8
031C4:  MOVLW  37
031C6:  MOVLB  9
031C8:  MOVWF  xE9
031CA:  MOVLB  0
031CC:  CALL   2564
031D0:  MOVFF  12D,9E8
031D4:  MOVLW  37
031D6:  MOVLB  9
031D8:  MOVWF  xE9
031DA:  MOVLB  0
031DC:  CALL   2564
031E0:  MOVFF  12C,9E8
031E4:  MOVLW  37
031E6:  MOVLB  9
031E8:  MOVWF  xE9
031EA:  MOVLB  0
031EC:  CALL   2564
031F0:  MOVLW  0D
031F2:  BTFSS  FA6.6
031F4:  GOTO   31F2
031F8:  MOVLB  E
031FA:  MOVWF  xF9
031FC:  MOVLW  0A
031FE:  MOVLB  0
03200:  BTFSS  FA6.6
03202:  GOTO   3200
03206:  MOVLB  E
03208:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_PICLOG].uncopied_counter);
0320A:  MOVLW  0E
0320C:  MOVWF  FF6
0320E:  MOVLW  10
03210:  MOVWF  FF7
03212:  MOVLW  00
03214:  MOVWF  FF8
03216:  MOVLW  0E
03218:  MOVLB  A
0321A:  MOVWF  x4E
0321C:  MOVLB  0
0321E:  CALL   2334
03222:  MOVFF  133,9E8
03226:  MOVLW  37
03228:  MOVLB  9
0322A:  MOVWF  xE9
0322C:  MOVLB  0
0322E:  CALL   2564
03232:  MOVFF  132,9E8
03236:  MOVLW  37
03238:  MOVLB  9
0323A:  MOVWF  xE9
0323C:  MOVLB  0
0323E:  CALL   2564
03242:  MOVFF  131,9E8
03246:  MOVLW  37
03248:  MOVLB  9
0324A:  MOVWF  xE9
0324C:  MOVLB  0
0324E:  CALL   2564
03252:  MOVFF  130,9E8
03256:  MOVLW  37
03258:  MOVLB  9
0325A:  MOVWF  xE9
0325C:  MOVLB  0
0325E:  CALL   2564
03262:  MOVLW  0D
03264:  BTFSS  FA6.6
03266:  GOTO   3264
0326A:  MOVLB  E
0326C:  MOVWF  xF9
0326E:  MOVLW  0A
03270:  MOVLB  0
03272:  BTFSS  FA6.6
03274:  GOTO   3272
03278:  MOVLB  E
0327A:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_PICLOG].reserve_counter1,misf_counter_table[FLASH_ID_PICLOG].reserve_counter2);
0327C:  MOVLW  24
0327E:  MOVWF  FF6
03280:  MOVLW  10
03282:  MOVWF  FF7
03284:  MOVLW  00
03286:  MOVWF  FF8
03288:  MOVLW  0E
0328A:  MOVLB  A
0328C:  MOVWF  x4E
0328E:  MOVLB  0
03290:  CALL   2334
03294:  MOVFF  134,9E8
03298:  MOVLW  37
0329A:  MOVLB  9
0329C:  MOVWF  xE9
0329E:  MOVLB  0
032A0:  CALL   2564
032A4:  MOVLW  36
032A6:  MOVWF  FF6
032A8:  MOVLW  10
032AA:  MOVWF  FF7
032AC:  MOVLW  00
032AE:  MOVWF  FF8
032B0:  MOVLW  04
032B2:  MOVLB  A
032B4:  MOVWF  x4E
032B6:  MOVLB  0
032B8:  CALL   2334
032BC:  MOVFF  135,9E8
032C0:  MOVLW  37
032C2:  MOVLB  9
032C4:  MOVWF  xE9
032C6:  MOVLB  0
032C8:  CALL   2564
032CC:  MOVLW  0D
032CE:  BTFSS  FA6.6
032D0:  GOTO   32CE
032D4:  MOVLB  E
032D6:  MOVWF  xF9
032D8:  MOVLW  0A
032DA:  MOVLB  0
032DC:  BTFSS  FA6.6
032DE:  GOTO   32DC
032E2:  MOVLB  E
032E4:  MOVWF  xF9
....................     fprintf(PC, "\tENVIRO\t\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_ENVIRONMENT].used_counter);
032E6:  MOVLW  42
032E8:  MOVWF  FF6
032EA:  MOVLW  10
032EC:  MOVWF  FF7
032EE:  MOVLW  00
032F0:  MOVWF  FF8
032F2:  MOVLW  11
032F4:  MOVLB  A
032F6:  MOVWF  x4E
032F8:  MOVLB  0
032FA:  CALL   2334
032FE:  MOVFF  139,9E8
03302:  MOVLW  37
03304:  MOVLB  9
03306:  MOVWF  xE9
03308:  MOVLB  0
0330A:  CALL   2564
0330E:  MOVFF  138,9E8
03312:  MOVLW  37
03314:  MOVLB  9
03316:  MOVWF  xE9
03318:  MOVLB  0
0331A:  CALL   2564
0331E:  MOVFF  137,9E8
03322:  MOVLW  37
03324:  MOVLB  9
03326:  MOVWF  xE9
03328:  MOVLB  0
0332A:  CALL   2564
0332E:  MOVFF  136,9E8
03332:  MOVLW  37
03334:  MOVLB  9
03336:  MOVWF  xE9
03338:  MOVLB  0
0333A:  CALL   2564
0333E:  MOVLW  0D
03340:  BTFSS  FA6.6
03342:  GOTO   3340
03346:  MOVLB  E
03348:  MOVWF  xF9
0334A:  MOVLW  0A
0334C:  MOVLB  0
0334E:  BTFSS  FA6.6
03350:  GOTO   334E
03354:  MOVLB  E
03356:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_ENVIRONMENT].uncopied_counter);
03358:  MOVLW  5C
0335A:  MOVWF  FF6
0335C:  MOVLW  10
0335E:  MOVWF  FF7
03360:  MOVLW  00
03362:  MOVWF  FF8
03364:  MOVLW  0E
03366:  MOVLB  A
03368:  MOVWF  x4E
0336A:  MOVLB  0
0336C:  CALL   2334
03370:  MOVFF  13D,9E8
03374:  MOVLW  37
03376:  MOVLB  9
03378:  MOVWF  xE9
0337A:  MOVLB  0
0337C:  CALL   2564
03380:  MOVFF  13C,9E8
03384:  MOVLW  37
03386:  MOVLB  9
03388:  MOVWF  xE9
0338A:  MOVLB  0
0338C:  CALL   2564
03390:  MOVFF  13B,9E8
03394:  MOVLW  37
03396:  MOVLB  9
03398:  MOVWF  xE9
0339A:  MOVLB  0
0339C:  CALL   2564
033A0:  MOVFF  13A,9E8
033A4:  MOVLW  37
033A6:  MOVLB  9
033A8:  MOVWF  xE9
033AA:  MOVLB  0
033AC:  CALL   2564
033B0:  MOVLW  0D
033B2:  BTFSS  FA6.6
033B4:  GOTO   33B2
033B8:  MOVLB  E
033BA:  MOVWF  xF9
033BC:  MOVLW  0A
033BE:  MOVLB  0
033C0:  BTFSS  FA6.6
033C2:  GOTO   33C0
033C6:  MOVLB  E
033C8:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_ENVIRONMENT].reserve_counter1,misf_counter_table[FLASH_ID_ENVIRONMENT].reserve_counter2);
033CA:  MOVLW  72
033CC:  MOVWF  FF6
033CE:  MOVLW  10
033D0:  MOVWF  FF7
033D2:  MOVLW  00
033D4:  MOVWF  FF8
033D6:  MOVLW  0E
033D8:  MOVLB  A
033DA:  MOVWF  x4E
033DC:  MOVLB  0
033DE:  CALL   2334
033E2:  MOVFF  13E,9E8
033E6:  MOVLW  37
033E8:  MOVLB  9
033EA:  MOVWF  xE9
033EC:  MOVLB  0
033EE:  CALL   2564
033F2:  MOVLW  84
033F4:  MOVWF  FF6
033F6:  MOVLW  10
033F8:  MOVWF  FF7
033FA:  MOVLW  00
033FC:  MOVWF  FF8
033FE:  MOVLW  04
03400:  MOVLB  A
03402:  MOVWF  x4E
03404:  MOVLB  0
03406:  CALL   2334
0340A:  MOVFF  13F,9E8
0340E:  MOVLW  37
03410:  MOVLB  9
03412:  MOVWF  xE9
03414:  MOVLB  0
03416:  CALL   2564
0341A:  MOVLW  0D
0341C:  BTFSS  FA6.6
0341E:  GOTO   341C
03422:  MOVLB  E
03424:  MOVWF  xF9
03426:  MOVLW  0A
03428:  MOVLB  0
0342A:  BTFSS  FA6.6
0342C:  GOTO   342A
03430:  MOVLB  E
03432:  MOVWF  xF9
....................     fprintf(PC, "\tIV1 HEADER\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_HEADER].used_counter);
03434:  MOVLW  90
03436:  MOVWF  FF6
03438:  MOVLW  10
0343A:  MOVWF  FF7
0343C:  MOVLW  00
0343E:  MOVWF  FF8
03440:  MOVLW  14
03442:  MOVLB  A
03444:  MOVWF  x4E
03446:  MOVLB  0
03448:  CALL   2334
0344C:  MOVFF  143,9E8
03450:  MOVLW  37
03452:  MOVLB  9
03454:  MOVWF  xE9
03456:  MOVLB  0
03458:  CALL   2564
0345C:  MOVFF  142,9E8
03460:  MOVLW  37
03462:  MOVLB  9
03464:  MOVWF  xE9
03466:  MOVLB  0
03468:  CALL   2564
0346C:  MOVFF  141,9E8
03470:  MOVLW  37
03472:  MOVLB  9
03474:  MOVWF  xE9
03476:  MOVLB  0
03478:  CALL   2564
0347C:  MOVFF  140,9E8
03480:  MOVLW  37
03482:  MOVLB  9
03484:  MOVWF  xE9
03486:  MOVLB  0
03488:  CALL   2564
0348C:  MOVLW  0D
0348E:  BTFSS  FA6.6
03490:  GOTO   348E
03494:  MOVLB  E
03496:  MOVWF  xF9
03498:  MOVLW  0A
0349A:  MOVLB  0
0349C:  BTFSS  FA6.6
0349E:  GOTO   349C
034A2:  MOVLB  E
034A4:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_HEADER].uncopied_counter);
034A6:  MOVLW  AC
034A8:  MOVWF  FF6
034AA:  MOVLW  10
034AC:  MOVWF  FF7
034AE:  MOVLW  00
034B0:  MOVWF  FF8
034B2:  MOVLW  0E
034B4:  MOVLB  A
034B6:  MOVWF  x4E
034B8:  MOVLB  0
034BA:  CALL   2334
034BE:  MOVFF  147,9E8
034C2:  MOVLW  37
034C4:  MOVLB  9
034C6:  MOVWF  xE9
034C8:  MOVLB  0
034CA:  CALL   2564
034CE:  MOVFF  146,9E8
034D2:  MOVLW  37
034D4:  MOVLB  9
034D6:  MOVWF  xE9
034D8:  MOVLB  0
034DA:  CALL   2564
034DE:  MOVFF  145,9E8
034E2:  MOVLW  37
034E4:  MOVLB  9
034E6:  MOVWF  xE9
034E8:  MOVLB  0
034EA:  CALL   2564
034EE:  MOVFF  144,9E8
034F2:  MOVLW  37
034F4:  MOVLB  9
034F6:  MOVWF  xE9
034F8:  MOVLB  0
034FA:  CALL   2564
034FE:  MOVLW  0D
03500:  BTFSS  FA6.6
03502:  GOTO   3500
03506:  MOVLB  E
03508:  MOVWF  xF9
0350A:  MOVLW  0A
0350C:  MOVLB  0
0350E:  BTFSS  FA6.6
03510:  GOTO   350E
03514:  MOVLB  E
03516:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV1_HEADER].reserve_counter1,misf_counter_table[FLASH_ID_IV1_HEADER].reserve_counter2);
03518:  MOVLW  C2
0351A:  MOVWF  FF6
0351C:  MOVLW  10
0351E:  MOVWF  FF7
03520:  MOVLW  00
03522:  MOVWF  FF8
03524:  MOVLW  0E
03526:  MOVLB  A
03528:  MOVWF  x4E
0352A:  MOVLB  0
0352C:  CALL   2334
03530:  MOVFF  148,9E8
03534:  MOVLW  37
03536:  MOVLB  9
03538:  MOVWF  xE9
0353A:  MOVLB  0
0353C:  CALL   2564
03540:  MOVLW  D4
03542:  MOVWF  FF6
03544:  MOVLW  10
03546:  MOVWF  FF7
03548:  MOVLW  00
0354A:  MOVWF  FF8
0354C:  MOVLW  04
0354E:  MOVLB  A
03550:  MOVWF  x4E
03552:  MOVLB  0
03554:  CALL   2334
03558:  MOVFF  149,9E8
0355C:  MOVLW  37
0355E:  MOVLB  9
03560:  MOVWF  xE9
03562:  MOVLB  0
03564:  CALL   2564
03568:  MOVLW  0D
0356A:  BTFSS  FA6.6
0356C:  GOTO   356A
03570:  MOVLB  E
03572:  MOVWF  xF9
03574:  MOVLW  0A
03576:  MOVLB  0
03578:  BTFSS  FA6.6
0357A:  GOTO   3578
0357E:  MOVLB  E
03580:  MOVWF  xF9
....................     fprintf(PC, "\tIV1 DATA\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_DATA].used_counter);
03582:  MOVLW  E0
03584:  MOVWF  FF6
03586:  MOVLW  10
03588:  MOVWF  FF7
0358A:  MOVLW  00
0358C:  MOVWF  FF8
0358E:  MOVLW  12
03590:  MOVLB  A
03592:  MOVWF  x4E
03594:  MOVLB  0
03596:  CALL   2334
0359A:  MOVFF  14D,9E8
0359E:  MOVLW  37
035A0:  MOVLB  9
035A2:  MOVWF  xE9
035A4:  MOVLB  0
035A6:  CALL   2564
035AA:  MOVFF  14C,9E8
035AE:  MOVLW  37
035B0:  MOVLB  9
035B2:  MOVWF  xE9
035B4:  MOVLB  0
035B6:  CALL   2564
035BA:  MOVFF  14B,9E8
035BE:  MOVLW  37
035C0:  MOVLB  9
035C2:  MOVWF  xE9
035C4:  MOVLB  0
035C6:  CALL   2564
035CA:  MOVFF  14A,9E8
035CE:  MOVLW  37
035D0:  MOVLB  9
035D2:  MOVWF  xE9
035D4:  MOVLB  0
035D6:  CALL   2564
035DA:  MOVLW  0D
035DC:  BTFSS  FA6.6
035DE:  GOTO   35DC
035E2:  MOVLB  E
035E4:  MOVWF  xF9
035E6:  MOVLW  0A
035E8:  MOVLB  0
035EA:  BTFSS  FA6.6
035EC:  GOTO   35EA
035F0:  MOVLB  E
035F2:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_DATA].uncopied_counter);
035F4:  MOVLW  FA
035F6:  MOVWF  FF6
035F8:  MOVLW  10
035FA:  MOVWF  FF7
035FC:  MOVLW  00
035FE:  MOVWF  FF8
03600:  MOVLW  0E
03602:  MOVLB  A
03604:  MOVWF  x4E
03606:  MOVLB  0
03608:  CALL   2334
0360C:  MOVFF  151,9E8
03610:  MOVLW  37
03612:  MOVLB  9
03614:  MOVWF  xE9
03616:  MOVLB  0
03618:  CALL   2564
0361C:  MOVFF  150,9E8
03620:  MOVLW  37
03622:  MOVLB  9
03624:  MOVWF  xE9
03626:  MOVLB  0
03628:  CALL   2564
0362C:  MOVFF  14F,9E8
03630:  MOVLW  37
03632:  MOVLB  9
03634:  MOVWF  xE9
03636:  MOVLB  0
03638:  CALL   2564
0363C:  MOVFF  14E,9E8
03640:  MOVLW  37
03642:  MOVLB  9
03644:  MOVWF  xE9
03646:  MOVLB  0
03648:  CALL   2564
0364C:  MOVLW  0D
0364E:  BTFSS  FA6.6
03650:  GOTO   364E
03654:  MOVLB  E
03656:  MOVWF  xF9
03658:  MOVLW  0A
0365A:  MOVLB  0
0365C:  BTFSS  FA6.6
0365E:  GOTO   365C
03662:  MOVLB  E
03664:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV1_DATA].reserve_counter1,misf_counter_table[FLASH_ID_IV1_DATA].reserve_counter2);
03666:  MOVLW  10
03668:  MOVWF  FF6
0366A:  MOVLW  11
0366C:  MOVWF  FF7
0366E:  MOVLW  00
03670:  MOVWF  FF8
03672:  MOVLW  0E
03674:  MOVLB  A
03676:  MOVWF  x4E
03678:  MOVLB  0
0367A:  CALL   2334
0367E:  MOVFF  152,9E8
03682:  MOVLW  37
03684:  MOVLB  9
03686:  MOVWF  xE9
03688:  MOVLB  0
0368A:  CALL   2564
0368E:  MOVLW  22
03690:  MOVWF  FF6
03692:  MOVLW  11
03694:  MOVWF  FF7
03696:  MOVLW  00
03698:  MOVWF  FF8
0369A:  MOVLW  04
0369C:  MOVLB  A
0369E:  MOVWF  x4E
036A0:  MOVLB  0
036A2:  CALL   2334
036A6:  MOVFF  153,9E8
036AA:  MOVLW  37
036AC:  MOVLB  9
036AE:  MOVWF  xE9
036B0:  MOVLB  0
036B2:  CALL   2564
036B6:  MOVLW  0D
036B8:  BTFSS  FA6.6
036BA:  GOTO   36B8
036BE:  MOVLB  E
036C0:  MOVWF  xF9
036C2:  MOVLW  0A
036C4:  MOVLB  0
036C6:  BTFSS  FA6.6
036C8:  GOTO   36C6
036CC:  MOVLB  E
036CE:  MOVWF  xF9
....................     fprintf(PC, "\tIV2 HEADER\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_HEADER].used_counter);
036D0:  MOVLW  2E
036D2:  MOVWF  FF6
036D4:  MOVLW  11
036D6:  MOVWF  FF7
036D8:  MOVLW  00
036DA:  MOVWF  FF8
036DC:  MOVLW  14
036DE:  MOVLB  A
036E0:  MOVWF  x4E
036E2:  MOVLB  0
036E4:  CALL   2334
036E8:  MOVFF  157,9E8
036EC:  MOVLW  37
036EE:  MOVLB  9
036F0:  MOVWF  xE9
036F2:  MOVLB  0
036F4:  CALL   2564
036F8:  MOVFF  156,9E8
036FC:  MOVLW  37
036FE:  MOVLB  9
03700:  MOVWF  xE9
03702:  MOVLB  0
03704:  CALL   2564
03708:  MOVFF  155,9E8
0370C:  MOVLW  37
0370E:  MOVLB  9
03710:  MOVWF  xE9
03712:  MOVLB  0
03714:  CALL   2564
03718:  MOVFF  154,9E8
0371C:  MOVLW  37
0371E:  MOVLB  9
03720:  MOVWF  xE9
03722:  MOVLB  0
03724:  CALL   2564
03728:  MOVLW  0D
0372A:  BTFSS  FA6.6
0372C:  GOTO   372A
03730:  MOVLB  E
03732:  MOVWF  xF9
03734:  MOVLW  0A
03736:  MOVLB  0
03738:  BTFSS  FA6.6
0373A:  GOTO   3738
0373E:  MOVLB  E
03740:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_HEADER].uncopied_counter);
03742:  MOVLW  4A
03744:  MOVWF  FF6
03746:  MOVLW  11
03748:  MOVWF  FF7
0374A:  MOVLW  00
0374C:  MOVWF  FF8
0374E:  MOVLW  0E
03750:  MOVLB  A
03752:  MOVWF  x4E
03754:  MOVLB  0
03756:  CALL   2334
0375A:  MOVFF  15B,9E8
0375E:  MOVLW  37
03760:  MOVLB  9
03762:  MOVWF  xE9
03764:  MOVLB  0
03766:  CALL   2564
0376A:  MOVFF  15A,9E8
0376E:  MOVLW  37
03770:  MOVLB  9
03772:  MOVWF  xE9
03774:  MOVLB  0
03776:  CALL   2564
0377A:  MOVFF  159,9E8
0377E:  MOVLW  37
03780:  MOVLB  9
03782:  MOVWF  xE9
03784:  MOVLB  0
03786:  CALL   2564
0378A:  MOVFF  158,9E8
0378E:  MOVLW  37
03790:  MOVLB  9
03792:  MOVWF  xE9
03794:  MOVLB  0
03796:  CALL   2564
0379A:  MOVLW  0D
0379C:  BTFSS  FA6.6
0379E:  GOTO   379C
037A2:  MOVLB  E
037A4:  MOVWF  xF9
037A6:  MOVLW  0A
037A8:  MOVLB  0
037AA:  BTFSS  FA6.6
037AC:  GOTO   37AA
037B0:  MOVLB  E
037B2:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV2_HEADER].reserve_counter1,misf_counter_table[FLASH_ID_IV2_HEADER].reserve_counter2);
037B4:  MOVLW  60
037B6:  MOVWF  FF6
037B8:  MOVLW  11
037BA:  MOVWF  FF7
037BC:  MOVLW  00
037BE:  MOVWF  FF8
037C0:  MOVLW  0E
037C2:  MOVLB  A
037C4:  MOVWF  x4E
037C6:  MOVLB  0
037C8:  CALL   2334
037CC:  MOVFF  15C,9E8
037D0:  MOVLW  37
037D2:  MOVLB  9
037D4:  MOVWF  xE9
037D6:  MOVLB  0
037D8:  CALL   2564
037DC:  MOVLW  72
037DE:  MOVWF  FF6
037E0:  MOVLW  11
037E2:  MOVWF  FF7
037E4:  MOVLW  00
037E6:  MOVWF  FF8
037E8:  MOVLW  04
037EA:  MOVLB  A
037EC:  MOVWF  x4E
037EE:  MOVLB  0
037F0:  CALL   2334
037F4:  MOVFF  15D,9E8
037F8:  MOVLW  37
037FA:  MOVLB  9
037FC:  MOVWF  xE9
037FE:  MOVLB  0
03800:  CALL   2564
03804:  MOVLW  0D
03806:  BTFSS  FA6.6
03808:  GOTO   3806
0380C:  MOVLB  E
0380E:  MOVWF  xF9
03810:  MOVLW  0A
03812:  MOVLB  0
03814:  BTFSS  FA6.6
03816:  GOTO   3814
0381A:  MOVLB  E
0381C:  MOVWF  xF9
....................     fprintf(PC, "\tIV2 DATA\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_DATA].used_counter);
0381E:  MOVLW  7E
03820:  MOVWF  FF6
03822:  MOVLW  11
03824:  MOVWF  FF7
03826:  MOVLW  00
03828:  MOVWF  FF8
0382A:  MOVLW  12
0382C:  MOVLB  A
0382E:  MOVWF  x4E
03830:  MOVLB  0
03832:  CALL   2334
03836:  MOVFF  161,9E8
0383A:  MOVLW  37
0383C:  MOVLB  9
0383E:  MOVWF  xE9
03840:  MOVLB  0
03842:  CALL   2564
03846:  MOVFF  160,9E8
0384A:  MOVLW  37
0384C:  MOVLB  9
0384E:  MOVWF  xE9
03850:  MOVLB  0
03852:  CALL   2564
03856:  MOVFF  15F,9E8
0385A:  MOVLW  37
0385C:  MOVLB  9
0385E:  MOVWF  xE9
03860:  MOVLB  0
03862:  CALL   2564
03866:  MOVFF  15E,9E8
0386A:  MOVLW  37
0386C:  MOVLB  9
0386E:  MOVWF  xE9
03870:  MOVLB  0
03872:  CALL   2564
03876:  MOVLW  0D
03878:  BTFSS  FA6.6
0387A:  GOTO   3878
0387E:  MOVLB  E
03880:  MOVWF  xF9
03882:  MOVLW  0A
03884:  MOVLB  0
03886:  BTFSS  FA6.6
03888:  GOTO   3886
0388C:  MOVLB  E
0388E:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_DATA].uncopied_counter);
03890:  MOVLW  98
03892:  MOVWF  FF6
03894:  MOVLW  11
03896:  MOVWF  FF7
03898:  MOVLW  00
0389A:  MOVWF  FF8
0389C:  MOVLW  0E
0389E:  MOVLB  A
038A0:  MOVWF  x4E
038A2:  MOVLB  0
038A4:  CALL   2334
038A8:  MOVFF  165,9E8
038AC:  MOVLW  37
038AE:  MOVLB  9
038B0:  MOVWF  xE9
038B2:  MOVLB  0
038B4:  CALL   2564
038B8:  MOVFF  164,9E8
038BC:  MOVLW  37
038BE:  MOVLB  9
038C0:  MOVWF  xE9
038C2:  MOVLB  0
038C4:  CALL   2564
038C8:  MOVFF  163,9E8
038CC:  MOVLW  37
038CE:  MOVLB  9
038D0:  MOVWF  xE9
038D2:  MOVLB  0
038D4:  CALL   2564
038D8:  MOVFF  162,9E8
038DC:  MOVLW  37
038DE:  MOVLB  9
038E0:  MOVWF  xE9
038E2:  MOVLB  0
038E4:  CALL   2564
038E8:  MOVLW  0D
038EA:  BTFSS  FA6.6
038EC:  GOTO   38EA
038F0:  MOVLB  E
038F2:  MOVWF  xF9
038F4:  MOVLW  0A
038F6:  MOVLB  0
038F8:  BTFSS  FA6.6
038FA:  GOTO   38F8
038FE:  MOVLB  E
03900:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV2_DATA].reserve_counter1,misf_counter_table[FLASH_ID_IV2_DATA].reserve_counter2);
03902:  MOVLW  AE
03904:  MOVWF  FF6
03906:  MOVLW  11
03908:  MOVWF  FF7
0390A:  MOVLW  00
0390C:  MOVWF  FF8
0390E:  MOVLW  0E
03910:  MOVLB  A
03912:  MOVWF  x4E
03914:  MOVLB  0
03916:  CALL   2334
0391A:  MOVFF  166,9E8
0391E:  MOVLW  37
03920:  MOVLB  9
03922:  MOVWF  xE9
03924:  MOVLB  0
03926:  CALL   2564
0392A:  MOVLW  C0
0392C:  MOVWF  FF6
0392E:  MOVLW  11
03930:  MOVWF  FF7
03932:  MOVLW  00
03934:  MOVWF  FF8
03936:  MOVLW  04
03938:  MOVLB  A
0393A:  MOVWF  x4E
0393C:  MOVLB  0
0393E:  CALL   2334
03942:  MOVFF  167,9E8
03946:  MOVLW  37
03948:  MOVLB  9
0394A:  MOVWF  xE9
0394C:  MOVLB  0
0394E:  CALL   2564
03952:  MOVLW  0D
03954:  BTFSS  FA6.6
03956:  GOTO   3954
0395A:  MOVLB  E
0395C:  MOVWF  xF9
0395E:  MOVLW  0A
03960:  MOVLB  0
03962:  BTFSS  FA6.6
03964:  GOTO   3962
03968:  MOVLB  E
0396A:  MOVWF  xF9
....................     fprintf(PC, "\t==================================================\r\n");
0396C:  MOVLW  CC
0396E:  MOVWF  FF6
03970:  MOVLW  11
03972:  MOVWF  FF7
03974:  MOVLW  00
03976:  MOVWF  FF8
03978:  MOVLB  0
0397A:  CALL   22FE
0397E:  RETURN 0
.................... }
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size)
.................... {
....................     /*
....................     fprintf(PC, "[MIS FM] Write Data Size:%lu\r\n", size);
....................     fprintf(PC, "%08LX\r\n", MISF_ADDRESS_TABLE[id].start);
....................     fprintf(PC, "%08LX\r\n", misf_counter_table[id].used_counter);
....................     fprintf(PC, "%08LX\r\n", misf_counter_table[id].reserve_counter1);
....................     for (unsigned int32 j = 0; j < size; j++) {
....................         fprintf(PC, "%02X ", data_ptr[j]);
....................     }
....................     fprintf(PC, "\r\n");
....................     */
....................     // パケット境界チェック
....................     if (size == PACKET_SIZE){
*
042AE:  MOVLB  A
042B0:  MOVF   x53,W
042B2:  SUBLW  40
042B4:  BTFSC  FD8.2
042B6:  BRA    42BE
042B8:  MOVLB  0
042BA:  GOTO   4434
042BE:  MOVLB  0
042C0:  MOVLB  A
042C2:  MOVF   x54,F
042C4:  BTFSC  FD8.2
042C6:  BRA    42CE
042C8:  MOVLB  0
042CA:  GOTO   4434
042CE:  MOVLB  0
....................         // fprintf(PC, "PACKET SIZE 64\r\n");
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
042D0:  MOVLB  A
042D2:  MOVF   x50,W
042D4:  MULLW  0C
042D6:  MOVF   FF3,W
042D8:  CLRF   xEC
042DA:  MOVWF  xEB
042DC:  MOVFF  AEC,03
042E0:  MOVF   xEB,W
042E2:  MOVLB  0
042E4:  CALL   00E6
042E8:  MOVWF  00
042EA:  TBLRD*+
042EC:  MOVFF  FF5,01
042F0:  TBLRD*+
042F2:  MOVFF  FF5,02
042F6:  TBLRD*+
042F8:  MOVFF  FF5,03
042FC:  MOVFF  03,AF0
04300:  MOVFF  02,AEF
04304:  MOVFF  01,AEE
04308:  MOVFF  00,AED
0430C:  MOVLB  A
0430E:  MOVF   x50,W
04310:  MULLW  0A
04312:  MOVF   FF3,W
04314:  CLRF   xF2
04316:  MOVWF  xF1
04318:  MOVLW  22
0431A:  ADDWF  xF1,W
0431C:  MOVWF  FE9
0431E:  MOVLW  01
04320:  ADDWFC xF2,W
04322:  MOVWF  FEA
04324:  MOVFF  FEF,00
04328:  MOVFF  FEC,01
0432C:  MOVFF  FEC,02
04330:  MOVFF  FEC,03
04334:  MOVF   FED,F
04336:  MOVF   FED,F
04338:  MOVF   FED,F
0433A:  MOVF   00,W
0433C:  ADDWF  xED,W
0433E:  MOVWF  x55
04340:  MOVF   01,W
04342:  ADDWFC xEE,W
04344:  MOVWF  x56
04346:  MOVF   02,W
04348:  ADDWFC xEF,W
0434A:  MOVWF  x57
0434C:  MOVF   03,W
0434E:  ADDWFC xF0,W
04350:  MOVWF  x58
04352:  MOVLB  0
....................         write_data_bytes(mis_fm, write_address, data_ptr, size);
04354:  MOVFF  115,AEE
04358:  MOVFF  114,AED
0435C:  MOVFF  113,AEC
04360:  MOVFF  112,AEB
04364:  MOVFF  A58,AF2
04368:  MOVFF  A57,AF1
0436C:  MOVFF  A56,AF0
04370:  MOVFF  A55,AEF
04374:  MOVFF  A52,AF4
04378:  MOVFF  A51,AF3
0437C:  MOVFF  A54,AF6
04380:  MOVFF  A53,AF5
04384:  CALL   3F56
....................         // for (unsigned int32 j = 0; j < size; j++) {
....................             // fprintf(PC, "%02X ", data_ptr[j]);
....................         // }
....................         misf_counter_table[id].used_counter     += size;
04388:  MOVLB  A
0438A:  MOVF   x50,W
0438C:  MULLW  0A
0438E:  MOVF   FF3,W
04390:  CLRF   xEC
04392:  MOVWF  xEB
04394:  MOVLW  22
04396:  ADDWF  xEB,W
04398:  MOVWF  FE9
0439A:  MOVLW  01
0439C:  ADDWFC xEC,W
0439E:  MOVWF  FEA
043A0:  MOVF   x53,W
043A2:  ADDWF  FEF,W
043A4:  MOVWF  00
043A6:  MOVF   x54,W
043A8:  ADDWFC FEC,W
043AA:  MOVWF  01
043AC:  MOVLW  00
043AE:  ADDWFC FEC,W
043B0:  MOVWF  02
043B2:  MOVLW  00
043B4:  ADDWFC FEC,W
043B6:  MOVWF  03
043B8:  MOVF   FED,F
043BA:  MOVF   FED,F
043BC:  MOVF   FED,F
043BE:  MOVFF  00,FEF
043C2:  MOVFF  01,FEC
043C6:  MOVFF  02,FEC
043CA:  MOVFF  03,FEC
043CE:  MOVF   FED,F
043D0:  MOVF   FED,F
043D2:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += size;
043D4:  MOVF   x50,W
043D6:  MULLW  0A
043D8:  MOVF   FF3,W
043DA:  CLRF   xEC
043DC:  MOVWF  xEB
043DE:  MOVLW  04
043E0:  ADDWF  xEB,W
043E2:  MOVWF  01
043E4:  MOVLW  00
043E6:  ADDWFC xEC,W
043E8:  MOVWF  03
043EA:  MOVF   01,W
043EC:  ADDLW  22
043EE:  MOVWF  FE9
043F0:  MOVLW  01
043F2:  ADDWFC 03,W
043F4:  MOVWF  FEA
043F6:  MOVF   x53,W
043F8:  ADDWF  FEF,W
043FA:  MOVWF  00
043FC:  MOVF   x54,W
043FE:  ADDWFC FEC,W
04400:  MOVWF  01
04402:  MOVLW  00
04404:  ADDWFC FEC,W
04406:  MOVWF  02
04408:  MOVLW  00
0440A:  ADDWFC FEC,W
0440C:  MOVWF  03
0440E:  MOVF   FED,F
04410:  MOVF   FED,F
04412:  MOVF   FED,F
04414:  MOVFF  00,FEF
04418:  MOVFF  01,FEC
0441C:  MOVFF  02,FEC
04420:  MOVFF  03,FEC
04424:  MOVF   FED,F
04426:  MOVF   FED,F
04428:  MOVF   FED,F
.................... 
....................         return;
0442A:  MOVLB  0
0442C:  GOTO   4BF8
....................     }
04430:  GOTO   4A6A
....................     
....................     else if (misf_counter_table[id].reserve_counter1 + size == PACKET_SIZE-1) {
04434:  MOVLB  A
04436:  MOVF   x50,W
04438:  MULLW  0A
0443A:  MOVF   FF3,W
0443C:  CLRF   xEC
0443E:  MOVWF  xEB
04440:  MOVLW  08
04442:  ADDWF  xEB,W
04444:  MOVWF  01
04446:  MOVLW  00
04448:  ADDWFC xEC,W
0444A:  MOVWF  03
0444C:  MOVF   01,W
0444E:  ADDLW  22
04450:  MOVWF  FE9
04452:  MOVLW  01
04454:  ADDWFC 03,W
04456:  MOVWF  FEA
04458:  MOVF   FEF,W
0445A:  ADDWF  x53,W
0445C:  MOVWF  xEB
0445E:  MOVLW  00
04460:  ADDWFC x54,W
04462:  MOVWF  xEC
04464:  MOVF   xEB,W
04466:  SUBLW  3F
04468:  BTFSC  FD8.2
0446A:  BRA    4472
0446C:  MOVLB  0
0446E:  GOTO   4728
04472:  MOVLB  0
04474:  MOVLB  A
04476:  MOVF   xEC,F
04478:  BTFSC  FD8.2
0447A:  BRA    4482
0447C:  MOVLB  0
0447E:  GOTO   4728
04482:  MOVLB  0
....................         unsigned int8 blank_size = PACKET_SIZE - 1 - misf_counter_table[id].reserve_counter1;
....................         // fprintf(PC, "0x%02X", blank_size);
....................         unsigned int8 blank_data[PACKET_SIZE];
04484:  MOVLB  A
04486:  MOVF   x50,W
04488:  MULLW  0A
0448A:  MOVF   FF3,W
0448C:  CLRF   xEC
0448E:  MOVWF  xEB
04490:  MOVLW  08
04492:  ADDWF  xEB,W
04494:  MOVWF  01
04496:  MOVLW  00
04498:  ADDWFC xEC,W
0449A:  MOVWF  03
0449C:  MOVF   01,W
0449E:  ADDLW  22
044A0:  MOVWF  FE9
044A2:  MOVLW  01
044A4:  ADDWFC 03,W
044A6:  MOVWF  FEA
044A8:  MOVF   FEF,W
044AA:  XORLW  FF
044AC:  ADDLW  40
044AE:  MOVWF  x59
044B0:  MOVLB  0
....................         memset(blank_data, 0, blank_size);
044B2:  MOVLW  0A
044B4:  MOVWF  FEA
044B6:  MOVLW  5A
044B8:  MOVWF  FE9
044BA:  CLRF   00
044BC:  CLRF   02
044BE:  MOVFF  A59,01
044C2:  CALL   236E
.................... 
....................         // アドレス再計算
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
044C6:  MOVLB  A
044C8:  MOVF   x50,W
044CA:  MULLW  0C
044CC:  MOVF   FF3,W
044CE:  CLRF   xEC
044D0:  MOVWF  xEB
044D2:  MOVFF  AEC,03
044D6:  MOVF   xEB,W
044D8:  MOVLB  0
044DA:  CALL   00E6
044DE:  MOVWF  00
044E0:  TBLRD*+
044E2:  MOVFF  FF5,01
044E6:  TBLRD*+
044E8:  MOVFF  FF5,02
044EC:  TBLRD*+
044EE:  MOVFF  FF5,03
044F2:  MOVFF  03,AF0
044F6:  MOVFF  02,AEF
044FA:  MOVFF  01,AEE
044FE:  MOVFF  00,AED
04502:  MOVLB  A
04504:  MOVF   x50,W
04506:  MULLW  0A
04508:  MOVF   FF3,W
0450A:  CLRF   xF2
0450C:  MOVWF  xF1
0450E:  MOVLW  22
04510:  ADDWF  xF1,W
04512:  MOVWF  FE9
04514:  MOVLW  01
04516:  ADDWFC xF2,W
04518:  MOVWF  FEA
0451A:  MOVFF  FEF,00
0451E:  MOVFF  FEC,01
04522:  MOVFF  FEC,02
04526:  MOVFF  FEC,03
0452A:  MOVF   FED,F
0452C:  MOVF   FED,F
0452E:  MOVF   FED,F
04530:  MOVF   00,W
04532:  ADDWF  xED,W
04534:  MOVWF  x9A
04536:  MOVF   01,W
04538:  ADDWFC xEE,W
0453A:  MOVWF  x9B
0453C:  MOVF   02,W
0453E:  ADDWFC xEF,W
04540:  MOVWF  x9C
04542:  MOVF   03,W
04544:  ADDWFC xF0,W
04546:  MOVWF  x9D
.................... 
....................         // 未使用部分を 0 埋め
....................         write_data_bytes(mis_fm, write_address, blank_data, blank_size);
04548:  MOVFF  115,AEE
0454C:  MOVFF  114,AED
04550:  MOVFF  113,AEC
04554:  MOVFF  112,AEB
04558:  MOVFF  A9D,AF2
0455C:  MOVFF  A9C,AF1
04560:  MOVFF  A9B,AF0
04564:  MOVFF  A9A,AEF
04568:  MOVLW  0A
0456A:  MOVWF  xF4
0456C:  MOVLW  5A
0456E:  MOVWF  xF3
04570:  CLRF   xF6
04572:  MOVFF  A59,AF5
04576:  MOVLB  0
04578:  CALL   3F56
.................... 
....................         // CRC 計算（本体部分だけ読む）
....................         unsigned int8 packet_data[PACKET_SIZE - 1];
....................         unsigned int32 read_address = write_address + blank_size - PACKET_SIZE - 1;
0457C:  MOVLB  A
0457E:  MOVF   x59,W
04580:  ADDWF  x9A,W
04582:  MOVWF  xEB
04584:  MOVLW  00
04586:  ADDWFC x9B,W
04588:  MOVWF  xEC
0458A:  MOVLW  00
0458C:  ADDWFC x9C,W
0458E:  MOVWF  xED
04590:  MOVLW  00
04592:  ADDWFC x9D,W
04594:  MOVWF  xEE
04596:  MOVLW  40
04598:  SUBWF  xEB,F
0459A:  MOVLW  00
0459C:  SUBWFB xEC,F
0459E:  MOVLW  00
045A0:  SUBWFB xED,F
045A2:  MOVLW  00
045A4:  SUBWFB xEE,F
045A6:  MOVLW  01
045A8:  SUBWF  xEB,W
045AA:  MOVWF  xDD
045AC:  MOVLW  00
045AE:  SUBWFB xEC,W
045B0:  MOVWF  xDE
045B2:  MOVLW  00
045B4:  SUBWFB xED,W
045B6:  MOVWF  xDF
045B8:  MOVLW  00
045BA:  SUBWFB xEE,W
045BC:  MOVWF  xE0
....................         read_data_bytes(mis_fm, read_address, packet_data, PACKET_SIZE - 1);
045BE:  MOVFF  115,AEE
045C2:  MOVFF  114,AED
045C6:  MOVFF  113,AEC
045CA:  MOVFF  112,AEB
045CE:  MOVFF  AE0,AF2
045D2:  MOVFF  ADF,AF1
045D6:  MOVFF  ADE,AF0
045DA:  MOVFF  ADD,AEF
045DE:  MOVLW  0A
045E0:  MOVWF  xF4
045E2:  MOVLW  9E
045E4:  MOVWF  xF3
045E6:  CLRF   xF8
045E8:  CLRF   xF7
045EA:  CLRF   xF6
045EC:  MOVLW  3F
045EE:  MOVWF  xF5
045F0:  MOVLB  0
045F2:  CALL   2EEC
....................         unsigned int8 crc = calc_crc8(packet_data, PACKET_SIZE - 1);
045F6:  MOVLW  0A
045F8:  MOVLB  A
045FA:  MOVWF  xEC
045FC:  MOVLW  9E
045FE:  MOVWF  xEB
04600:  MOVLW  3F
04602:  MOVWF  xED
04604:  MOVLB  0
04606:  CALL   310C
0460A:  MOVFF  01,AE1
....................         // fprintf(PC, "0x%02X", crc);
....................         // CRC 書き込み
....................         write_address += blank_size;
0460E:  MOVLB  A
04610:  MOVF   x59,W
04612:  ADDWF  x9A,F
04614:  MOVLW  00
04616:  ADDWFC x9B,F
04618:  MOVLW  00
0461A:  ADDWFC x9C,F
0461C:  MOVLW  00
0461E:  ADDWFC x9D,F
....................         write_data_bytes(mis_fm, write_address, &crc, 1);
04620:  MOVFF  115,AEE
04624:  MOVFF  114,AED
04628:  MOVFF  113,AEC
0462C:  MOVFF  112,AEB
04630:  MOVFF  A9D,AF2
04634:  MOVFF  A9C,AF1
04638:  MOVFF  A9B,AF0
0463C:  MOVFF  A9A,AEF
04640:  MOVLW  0A
04642:  MOVWF  xF4
04644:  MOVLW  E1
04646:  MOVWF  xF3
04648:  CLRF   xF6
0464A:  MOVLW  01
0464C:  MOVWF  xF5
0464E:  MOVLB  0
04650:  CALL   3F56
.................... 
....................         // カウンタ更新
....................         misf_counter_table[id].used_counter     += blank_size + 1;
04654:  MOVLB  A
04656:  MOVF   x50,W
04658:  MULLW  0A
0465A:  MOVF   FF3,W
0465C:  CLRF   xEC
0465E:  MOVWF  xEB
04660:  MOVLW  22
04662:  ADDWF  xEB,W
04664:  MOVWF  FE9
04666:  MOVLW  01
04668:  ADDWFC xEC,W
0466A:  MOVWF  FEA
0466C:  MOVLW  01
0466E:  ADDWF  x59,W
04670:  ADDWF  FEF,W
04672:  MOVWF  00
04674:  MOVLW  00
04676:  ADDWFC FEC,W
04678:  MOVWF  01
0467A:  MOVLW  00
0467C:  ADDWFC FEC,W
0467E:  MOVWF  02
04680:  MOVLW  00
04682:  ADDWFC FEC,W
04684:  MOVWF  03
04686:  MOVF   FED,F
04688:  MOVF   FED,F
0468A:  MOVF   FED,F
0468C:  MOVFF  00,FEF
04690:  MOVFF  01,FEC
04694:  MOVFF  02,FEC
04698:  MOVFF  03,FEC
0469C:  MOVF   FED,F
0469E:  MOVF   FED,F
046A0:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += blank_size + 1;
046A2:  MOVF   x50,W
046A4:  MULLW  0A
046A6:  MOVF   FF3,W
046A8:  CLRF   xEC
046AA:  MOVWF  xEB
046AC:  MOVLW  04
046AE:  ADDWF  xEB,W
046B0:  MOVWF  01
046B2:  MOVLW  00
046B4:  ADDWFC xEC,W
046B6:  MOVWF  03
046B8:  MOVF   01,W
046BA:  ADDLW  22
046BC:  MOVWF  FE9
046BE:  MOVLW  01
046C0:  ADDWFC 03,W
046C2:  MOVWF  FEA
046C4:  MOVLW  01
046C6:  ADDWF  x59,W
046C8:  ADDWF  FEF,W
046CA:  MOVWF  00
046CC:  MOVLW  00
046CE:  ADDWFC FEC,W
046D0:  MOVWF  01
046D2:  MOVLW  00
046D4:  ADDWFC FEC,W
046D6:  MOVWF  02
046D8:  MOVLW  00
046DA:  ADDWFC FEC,W
046DC:  MOVWF  03
046DE:  MOVF   FED,F
046E0:  MOVF   FED,F
046E2:  MOVF   FED,F
046E4:  MOVFF  00,FEF
046E8:  MOVFF  01,FEC
046EC:  MOVFF  02,FEC
046F0:  MOVFF  03,FEC
046F4:  MOVF   FED,F
046F6:  MOVF   FED,F
046F8:  MOVF   FED,F
....................         misf_counter_table[id].reserve_counter1  = 0;
046FA:  MOVF   x50,W
046FC:  MULLW  0A
046FE:  MOVF   FF3,W
04700:  CLRF   xEC
04702:  MOVWF  xEB
04704:  MOVLW  08
04706:  ADDWF  xEB,W
04708:  MOVWF  01
0470A:  MOVLW  00
0470C:  ADDWFC xEC,W
0470E:  MOVWF  03
04710:  MOVF   01,W
04712:  ADDLW  22
04714:  MOVWF  FE9
04716:  MOVLW  01
04718:  ADDWFC 03,W
0471A:  MOVWF  FEA
0471C:  CLRF   FEF
....................         return;
0471E:  MOVLB  0
04720:  GOTO   4BF8
.................... 
....................     }else  if(misf_counter_table[id].reserve_counter1 + size == PACKET_SIZE-1){
04724:  GOTO   4A6A
04728:  MOVLB  A
0472A:  MOVF   x50,W
0472C:  MULLW  0A
0472E:  MOVF   FF3,W
04730:  CLRF   xEC
04732:  MOVWF  xEB
04734:  MOVLW  08
04736:  ADDWF  xEB,W
04738:  MOVWF  01
0473A:  MOVLW  00
0473C:  ADDWFC xEC,W
0473E:  MOVWF  03
04740:  MOVF   01,W
04742:  ADDLW  22
04744:  MOVWF  FE9
04746:  MOVLW  01
04748:  ADDWFC 03,W
0474A:  MOVWF  FEA
0474C:  MOVF   FEF,W
0474E:  ADDWF  x53,W
04750:  MOVWF  xEB
04752:  MOVLW  00
04754:  ADDWFC x54,W
04756:  MOVWF  xEC
04758:  MOVF   xEB,W
0475A:  SUBLW  3F
0475C:  BTFSC  FD8.2
0475E:  BRA    4766
04760:  MOVLB  0
04762:  GOTO   4A6A
04766:  MOVLB  0
04768:  MOVLB  A
0476A:  MOVF   xEC,F
0476C:  BTFSC  FD8.2
0476E:  BRA    4776
04770:  MOVLB  0
04772:  GOTO   4A6A
04776:  MOVLB  0
....................         // データ書き込み
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
04778:  MOVLB  A
0477A:  MOVF   x50,W
0477C:  MULLW  0C
0477E:  MOVF   FF3,W
04780:  CLRF   xEC
04782:  MOVWF  xEB
04784:  MOVFF  AEC,03
04788:  MOVF   xEB,W
0478A:  MOVLB  0
0478C:  CALL   00E6
04790:  MOVWF  00
04792:  TBLRD*+
04794:  MOVFF  FF5,01
04798:  TBLRD*+
0479A:  MOVFF  FF5,02
0479E:  TBLRD*+
047A0:  MOVFF  FF5,03
047A4:  MOVFF  03,AF0
047A8:  MOVFF  02,AEF
047AC:  MOVFF  01,AEE
047B0:  MOVFF  00,AED
047B4:  MOVLB  A
047B6:  MOVF   x50,W
047B8:  MULLW  0A
047BA:  MOVF   FF3,W
047BC:  CLRF   xF2
047BE:  MOVWF  xF1
047C0:  MOVLW  22
047C2:  ADDWF  xF1,W
047C4:  MOVWF  FE9
047C6:  MOVLW  01
047C8:  ADDWFC xF2,W
047CA:  MOVWF  FEA
047CC:  MOVFF  FEF,00
047D0:  MOVFF  FEC,01
047D4:  MOVFF  FEC,02
047D8:  MOVFF  FEC,03
047DC:  MOVF   FED,F
047DE:  MOVF   FED,F
047E0:  MOVF   FED,F
047E2:  MOVF   00,W
047E4:  ADDWF  xED,W
047E6:  MOVWF  xE2
047E8:  MOVF   01,W
047EA:  ADDWFC xEE,W
047EC:  MOVWF  xE3
047EE:  MOVF   02,W
047F0:  ADDWFC xEF,W
047F2:  MOVWF  xE4
047F4:  MOVF   03,W
047F6:  ADDWFC xF0,W
047F8:  MOVWF  xE5
047FA:  MOVLB  0
....................         write_data_bytes(mis_fm, write_address, data_ptr, size);
047FC:  MOVFF  115,AEE
04800:  MOVFF  114,AED
04804:  MOVFF  113,AEC
04808:  MOVFF  112,AEB
0480C:  MOVFF  AE5,AF2
04810:  MOVFF  AE4,AF1
04814:  MOVFF  AE3,AF0
04818:  MOVFF  AE2,AEF
0481C:  MOVFF  A52,AF4
04820:  MOVFF  A51,AF3
04824:  MOVFF  A54,AF6
04828:  MOVFF  A53,AF5
0482C:  CALL   3F56
....................         // fprintf(PC, "ADDRESS 0x%08LX DATA ", write_address);
....................         // for (unsigned int32 j = 0; j < size; j++) {
....................             // fprintf(PC, "%02X ", data_ptr[j]);
....................         // }
....................         // fprintf(PC, "\Sr\n");
.................... 
....................         misf_counter_table[id].used_counter     += size;
04830:  MOVLB  A
04832:  MOVF   x50,W
04834:  MULLW  0A
04836:  MOVF   FF3,W
04838:  CLRF   xEC
0483A:  MOVWF  xEB
0483C:  MOVLW  22
0483E:  ADDWF  xEB,W
04840:  MOVWF  FE9
04842:  MOVLW  01
04844:  ADDWFC xEC,W
04846:  MOVWF  FEA
04848:  MOVF   x53,W
0484A:  ADDWF  FEF,W
0484C:  MOVWF  00
0484E:  MOVF   x54,W
04850:  ADDWFC FEC,W
04852:  MOVWF  01
04854:  MOVLW  00
04856:  ADDWFC FEC,W
04858:  MOVWF  02
0485A:  MOVLW  00
0485C:  ADDWFC FEC,W
0485E:  MOVWF  03
04860:  MOVF   FED,F
04862:  MOVF   FED,F
04864:  MOVF   FED,F
04866:  MOVFF  00,FEF
0486A:  MOVFF  01,FEC
0486E:  MOVFF  02,FEC
04872:  MOVFF  03,FEC
04876:  MOVF   FED,F
04878:  MOVF   FED,F
0487A:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += size;
0487C:  MOVF   x50,W
0487E:  MULLW  0A
04880:  MOVF   FF3,W
04882:  CLRF   xEC
04884:  MOVWF  xEB
04886:  MOVLW  04
04888:  ADDWF  xEB,W
0488A:  MOVWF  01
0488C:  MOVLW  00
0488E:  ADDWFC xEC,W
04890:  MOVWF  03
04892:  MOVF   01,W
04894:  ADDLW  22
04896:  MOVWF  FE9
04898:  MOVLW  01
0489A:  ADDWFC 03,W
0489C:  MOVWF  FEA
0489E:  MOVF   x53,W
048A0:  ADDWF  FEF,W
048A2:  MOVWF  00
048A4:  MOVF   x54,W
048A6:  ADDWFC FEC,W
048A8:  MOVWF  01
048AA:  MOVLW  00
048AC:  ADDWFC FEC,W
048AE:  MOVWF  02
048B0:  MOVLW  00
048B2:  ADDWFC FEC,W
048B4:  MOVWF  03
048B6:  MOVF   FED,F
048B8:  MOVF   FED,F
048BA:  MOVF   FED,F
048BC:  MOVFF  00,FEF
048C0:  MOVFF  01,FEC
048C4:  MOVFF  02,FEC
048C8:  MOVFF  03,FEC
048CC:  MOVF   FED,F
048CE:  MOVF   FED,F
048D0:  MOVF   FED,F
....................         unsigned int8 crc = calc_crc8(data_ptr, size);
048D2:  MOVFF  A52,AEC
048D6:  MOVFF  A51,AEB
048DA:  MOVFF  A53,AED
048DE:  MOVLB  0
048E0:  CALL   310C
048E4:  MOVFF  01,AE6
.................... 
....................         // CRC 書き込み
....................         write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
048E8:  MOVLB  A
048EA:  MOVF   x50,W
048EC:  MULLW  0C
048EE:  MOVF   FF3,W
048F0:  CLRF   xEC
048F2:  MOVWF  xEB
048F4:  MOVFF  AEC,03
048F8:  MOVF   xEB,W
048FA:  MOVLB  0
048FC:  CALL   00E6
04900:  MOVWF  00
04902:  TBLRD*+
04904:  MOVFF  FF5,01
04908:  TBLRD*+
0490A:  MOVFF  FF5,02
0490E:  TBLRD*+
04910:  MOVFF  FF5,03
04914:  MOVFF  03,AF0
04918:  MOVFF  02,AEF
0491C:  MOVFF  01,AEE
04920:  MOVFF  00,AED
04924:  MOVLB  A
04926:  MOVF   x50,W
04928:  MULLW  0A
0492A:  MOVF   FF3,W
0492C:  CLRF   xF2
0492E:  MOVWF  xF1
04930:  MOVLW  22
04932:  ADDWF  xF1,W
04934:  MOVWF  FE9
04936:  MOVLW  01
04938:  ADDWFC xF2,W
0493A:  MOVWF  FEA
0493C:  MOVFF  FEF,00
04940:  MOVFF  FEC,01
04944:  MOVFF  FEC,02
04948:  MOVFF  FEC,03
0494C:  MOVF   FED,F
0494E:  MOVF   FED,F
04950:  MOVF   FED,F
04952:  MOVF   00,W
04954:  ADDWF  xED,W
04956:  MOVWF  xE2
04958:  MOVF   01,W
0495A:  ADDWFC xEE,W
0495C:  MOVWF  xE3
0495E:  MOVF   02,W
04960:  ADDWFC xEF,W
04962:  MOVWF  xE4
04964:  MOVF   03,W
04966:  ADDWFC xF0,W
04968:  MOVWF  xE5
....................         write_data_bytes(mis_fm, write_address, &crc, 1);
0496A:  MOVFF  115,AEE
0496E:  MOVFF  114,AED
04972:  MOVFF  113,AEC
04976:  MOVFF  112,AEB
0497A:  MOVFF  AE5,AF2
0497E:  MOVFF  AE4,AF1
04982:  MOVFF  AE3,AF0
04986:  MOVFF  AE2,AEF
0498A:  MOVLW  0A
0498C:  MOVWF  xF4
0498E:  MOVLW  E6
04990:  MOVWF  xF3
04992:  CLRF   xF6
04994:  MOVLW  01
04996:  MOVWF  xF5
04998:  MOVLB  0
0499A:  CALL   3F56
.................... 
....................         // カウンタ更新
....................         misf_counter_table[id].used_counter     += 1;
0499E:  MOVLB  A
049A0:  MOVF   x50,W
049A2:  MULLW  0A
049A4:  MOVF   FF3,W
049A6:  CLRF   xEC
049A8:  MOVWF  xEB
049AA:  MOVLW  22
049AC:  ADDWF  xEB,W
049AE:  MOVWF  FE9
049B0:  MOVLW  01
049B2:  ADDWFC xEC,W
049B4:  MOVWF  FEA
049B6:  MOVLW  01
049B8:  ADDWF  FEF,W
049BA:  MOVWF  00
049BC:  MOVLW  00
049BE:  ADDWFC FEC,W
049C0:  MOVWF  01
049C2:  MOVLW  00
049C4:  ADDWFC FEC,W
049C6:  MOVWF  02
049C8:  MOVLW  00
049CA:  ADDWFC FEC,W
049CC:  MOVWF  03
049CE:  MOVF   FED,F
049D0:  MOVF   FED,F
049D2:  MOVF   FED,F
049D4:  MOVFF  00,FEF
049D8:  MOVFF  01,FEC
049DC:  MOVFF  02,FEC
049E0:  MOVFF  03,FEC
049E4:  MOVF   FED,F
049E6:  MOVF   FED,F
049E8:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += 1;
049EA:  MOVF   x50,W
049EC:  MULLW  0A
049EE:  MOVF   FF3,W
049F0:  CLRF   xEC
049F2:  MOVWF  xEB
049F4:  MOVLW  04
049F6:  ADDWF  xEB,W
049F8:  MOVWF  01
049FA:  MOVLW  00
049FC:  ADDWFC xEC,W
049FE:  MOVWF  03
04A00:  MOVF   01,W
04A02:  ADDLW  22
04A04:  MOVWF  FE9
04A06:  MOVLW  01
04A08:  ADDWFC 03,W
04A0A:  MOVWF  FEA
04A0C:  MOVLW  01
04A0E:  ADDWF  FEF,W
04A10:  MOVWF  00
04A12:  MOVLW  00
04A14:  ADDWFC FEC,W
04A16:  MOVWF  01
04A18:  MOVLW  00
04A1A:  ADDWFC FEC,W
04A1C:  MOVWF  02
04A1E:  MOVLW  00
04A20:  ADDWFC FEC,W
04A22:  MOVWF  03
04A24:  MOVF   FED,F
04A26:  MOVF   FED,F
04A28:  MOVF   FED,F
04A2A:  MOVFF  00,FEF
04A2E:  MOVFF  01,FEC
04A32:  MOVFF  02,FEC
04A36:  MOVFF  03,FEC
04A3A:  MOVF   FED,F
04A3C:  MOVF   FED,F
04A3E:  MOVF   FED,F
....................         misf_counter_table[id].reserve_counter1  = 0;
04A40:  MOVF   x50,W
04A42:  MULLW  0A
04A44:  MOVF   FF3,W
04A46:  CLRF   xEC
04A48:  MOVWF  xEB
04A4A:  MOVLW  08
04A4C:  ADDWF  xEB,W
04A4E:  MOVWF  01
04A50:  MOVLW  00
04A52:  ADDWFC xEC,W
04A54:  MOVWF  03
04A56:  MOVF   01,W
04A58:  ADDLW  22
04A5A:  MOVWF  FE9
04A5C:  MOVLW  01
04A5E:  ADDWFC 03,W
04A60:  MOVWF  FEA
04A62:  CLRF   FEF
.................... 
....................         // アドレステーブル更新
....................         // misf_update_address_area();
....................         return;
04A64:  MOVLB  0
04A66:  GOTO   4BF8
....................     }
.................... 
....................     // データ書き込み
....................     unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
04A6A:  MOVLB  A
04A6C:  MOVF   x50,W
04A6E:  MULLW  0C
04A70:  MOVF   FF3,W
04A72:  CLRF   xEC
04A74:  MOVWF  xEB
04A76:  MOVFF  AEC,03
04A7A:  MOVF   xEB,W
04A7C:  MOVLB  0
04A7E:  CALL   00E6
04A82:  MOVWF  00
04A84:  TBLRD*+
04A86:  MOVFF  FF5,01
04A8A:  TBLRD*+
04A8C:  MOVFF  FF5,02
04A90:  TBLRD*+
04A92:  MOVFF  FF5,03
04A96:  MOVFF  03,AF0
04A9A:  MOVFF  02,AEF
04A9E:  MOVFF  01,AEE
04AA2:  MOVFF  00,AED
04AA6:  MOVLB  A
04AA8:  MOVF   x50,W
04AAA:  MULLW  0A
04AAC:  MOVF   FF3,W
04AAE:  CLRF   xF2
04AB0:  MOVWF  xF1
04AB2:  MOVLW  22
04AB4:  ADDWF  xF1,W
04AB6:  MOVWF  FE9
04AB8:  MOVLW  01
04ABA:  ADDWFC xF2,W
04ABC:  MOVWF  FEA
04ABE:  MOVFF  FEF,00
04AC2:  MOVFF  FEC,01
04AC6:  MOVFF  FEC,02
04ACA:  MOVFF  FEC,03
04ACE:  MOVF   FED,F
04AD0:  MOVF   FED,F
04AD2:  MOVF   FED,F
04AD4:  MOVF   00,W
04AD6:  ADDWF  xED,W
04AD8:  MOVWF  xE7
04ADA:  MOVF   01,W
04ADC:  ADDWFC xEE,W
04ADE:  MOVWF  xE8
04AE0:  MOVF   02,W
04AE2:  ADDWFC xEF,W
04AE4:  MOVWF  xE9
04AE6:  MOVF   03,W
04AE8:  ADDWFC xF0,W
04AEA:  MOVWF  xEA
....................     // fprintf(PC, "ADDRESS 0x%08LX DATA ", write_address);
....................     write_data_bytes(mis_fm, write_address, data_ptr, size);
04AEC:  MOVFF  115,AEE
04AF0:  MOVFF  114,AED
04AF4:  MOVFF  113,AEC
04AF8:  MOVFF  112,AEB
04AFC:  MOVFF  AEA,AF2
04B00:  MOVFF  AE9,AF1
04B04:  MOVFF  AE8,AF0
04B08:  MOVFF  AE7,AEF
04B0C:  MOVFF  A52,AF4
04B10:  MOVFF  A51,AF3
04B14:  MOVFF  A54,AF6
04B18:  MOVFF  A53,AF5
04B1C:  MOVLB  0
04B1E:  CALL   3F56
.................... 
....................     // カウンタ更新
....................     misf_counter_table[id].used_counter     += size;
04B22:  MOVLB  A
04B24:  MOVF   x50,W
04B26:  MULLW  0A
04B28:  MOVF   FF3,W
04B2A:  CLRF   xEC
04B2C:  MOVWF  xEB
04B2E:  MOVLW  22
04B30:  ADDWF  xEB,W
04B32:  MOVWF  FE9
04B34:  MOVLW  01
04B36:  ADDWFC xEC,W
04B38:  MOVWF  FEA
04B3A:  MOVF   x53,W
04B3C:  ADDWF  FEF,W
04B3E:  MOVWF  00
04B40:  MOVF   x54,W
04B42:  ADDWFC FEC,W
04B44:  MOVWF  01
04B46:  MOVLW  00
04B48:  ADDWFC FEC,W
04B4A:  MOVWF  02
04B4C:  MOVLW  00
04B4E:  ADDWFC FEC,W
04B50:  MOVWF  03
04B52:  MOVF   FED,F
04B54:  MOVF   FED,F
04B56:  MOVF   FED,F
04B58:  MOVFF  00,FEF
04B5C:  MOVFF  01,FEC
04B60:  MOVFF  02,FEC
04B64:  MOVFF  03,FEC
04B68:  MOVF   FED,F
04B6A:  MOVF   FED,F
04B6C:  MOVF   FED,F
....................     misf_counter_table[id].uncopied_counter += size;
04B6E:  MOVF   x50,W
04B70:  MULLW  0A
04B72:  MOVF   FF3,W
04B74:  CLRF   xEC
04B76:  MOVWF  xEB
04B78:  MOVLW  04
04B7A:  ADDWF  xEB,W
04B7C:  MOVWF  01
04B7E:  MOVLW  00
04B80:  ADDWFC xEC,W
04B82:  MOVWF  03
04B84:  MOVF   01,W
04B86:  ADDLW  22
04B88:  MOVWF  FE9
04B8A:  MOVLW  01
04B8C:  ADDWFC 03,W
04B8E:  MOVWF  FEA
04B90:  MOVF   x53,W
04B92:  ADDWF  FEF,W
04B94:  MOVWF  00
04B96:  MOVF   x54,W
04B98:  ADDWFC FEC,W
04B9A:  MOVWF  01
04B9C:  MOVLW  00
04B9E:  ADDWFC FEC,W
04BA0:  MOVWF  02
04BA2:  MOVLW  00
04BA4:  ADDWFC FEC,W
04BA6:  MOVWF  03
04BA8:  MOVF   FED,F
04BAA:  MOVF   FED,F
04BAC:  MOVF   FED,F
04BAE:  MOVFF  00,FEF
04BB2:  MOVFF  01,FEC
04BB6:  MOVFF  02,FEC
04BBA:  MOVFF  03,FEC
04BBE:  MOVF   FED,F
04BC0:  MOVF   FED,F
04BC2:  MOVF   FED,F
....................     misf_counter_table[id].reserve_counter1 += size;
04BC4:  MOVF   x50,W
04BC6:  MULLW  0A
04BC8:  MOVF   FF3,W
04BCA:  CLRF   xEC
04BCC:  MOVWF  xEB
04BCE:  MOVLW  08
04BD0:  ADDWF  xEB,W
04BD2:  MOVWF  01
04BD4:  MOVLW  00
04BD6:  ADDWFC xEC,W
04BD8:  MOVWF  03
04BDA:  MOVF   01,W
04BDC:  ADDLW  22
04BDE:  MOVWF  FE9
04BE0:  MOVLW  01
04BE2:  ADDWFC 03,W
04BE4:  MOVWF  FEA
04BE6:  MOVF   FEF,W
04BE8:  ADDWF  x53,W
04BEA:  MOVWF  01
04BEC:  MOVLW  00
04BEE:  ADDWFC x54,W
04BF0:  MOVWF  03
04BF2:  MOVF   01,W
04BF4:  MOVWF  FEF
04BF6:  MOVLB  0
04BF8:  RETURN 0
.................... 
....................     // アドレステーブル更新
....................     // misf_update_address_area();
.................... }
.................... 
.................... FlashData_t make_flash_data_table(void)
04BFA:  MOVLW  0A
04BFC:  MOVLB  A
04BFE:  MOVWF  xD7
04C00:  MOVLW  96
04C02:  MOVWF  xD6
.................... {
....................     FlashData_t flash_data;
....................     FlashData_t *flash_data_ptr = &flash_data;
.................... 
....................     // 初期化
....................     memset(flash_data_ptr->bytes, 0, sizeof(flash_data_ptr->bytes));
04C04:  MOVF   xD6,W
04C06:  MOVWF  01
04C08:  MOVF   xD7,W
04C0A:  MOVWF  03
04C0C:  MOVF   01,W
04C0E:  MOVWF  xD8
04C10:  MOVFF  03,AD9
04C14:  MOVFF  AD9,FEA
04C18:  MOVFF  AD8,FE9
04C1C:  CLRF   00
04C1E:  CLRF   02
04C20:  MOVLW  40
04C22:  MOVWF  01
04C24:  MOVLB  0
04C26:  CALL   236E
.................... 
....................     flash_data_ptr->packet.payload.logdata.piclog = misf_counter_table[FLASH_ID_PICLOG];
04C2A:  MOVLB  A
04C2C:  MOVF   xD6,W
04C2E:  MOVWF  FE9
04C30:  MOVF   xD7,W
04C32:  MOVWF  FEA
04C34:  MOVLW  01
04C36:  MOVWF  FE2
04C38:  MOVLW  2C
04C3A:  MOVWF  FE1
04C3C:  MOVLW  0A
04C3E:  MOVWF  01
04C40:  MOVLB  0
04C42:  MOVFF  FE6,FEE
04C46:  DECFSZ 01,F
04C48:  GOTO   4C42
....................     flash_data_ptr->packet.payload.logdata.environment = misf_counter_table[FLASH_ID_ENVIRONMENT];
04C4C:  MOVLW  0A
04C4E:  MOVLB  A
04C50:  ADDWF  xD6,W
04C52:  MOVWF  FE9
04C54:  MOVLW  00
04C56:  ADDWFC xD7,W
04C58:  MOVWF  FEA
04C5A:  MOVLW  01
04C5C:  MOVWF  FE2
04C5E:  MOVLW  36
04C60:  MOVWF  FE1
04C62:  MOVLW  0A
04C64:  MOVWF  01
04C66:  MOVLB  0
04C68:  MOVFF  FE6,FEE
04C6C:  DECFSZ 01,F
04C6E:  GOTO   4C68
....................     flash_data_ptr->packet.payload.logdata.iv1_header = misf_counter_table[FLASH_ID_IV1_HEADER];
04C72:  MOVLW  14
04C74:  MOVLB  A
04C76:  ADDWF  xD6,W
04C78:  MOVWF  FE9
04C7A:  MOVLW  00
04C7C:  ADDWFC xD7,W
04C7E:  MOVWF  FEA
04C80:  MOVLW  01
04C82:  MOVWF  FE2
04C84:  MOVLW  40
04C86:  MOVWF  FE1
04C88:  MOVLW  0A
04C8A:  MOVWF  01
04C8C:  MOVLB  0
04C8E:  MOVFF  FE6,FEE
04C92:  DECFSZ 01,F
04C94:  GOTO   4C8E
....................     flash_data_ptr->packet.payload.logdata.iv1_data = misf_counter_table[FLASH_ID_IV1_DATA];
04C98:  MOVLW  1E
04C9A:  MOVLB  A
04C9C:  ADDWF  xD6,W
04C9E:  MOVWF  FE9
04CA0:  MOVLW  00
04CA2:  ADDWFC xD7,W
04CA4:  MOVWF  FEA
04CA6:  MOVLW  01
04CA8:  MOVWF  FE2
04CAA:  MOVLW  4A
04CAC:  MOVWF  FE1
04CAE:  MOVLW  0A
04CB0:  MOVWF  01
04CB2:  MOVLB  0
04CB4:  MOVFF  FE6,FEE
04CB8:  DECFSZ 01,F
04CBA:  GOTO   4CB4
....................     flash_data_ptr->packet.payload.logdata.iv2_header = misf_counter_table[FLASH_ID_IV2_HEADER];
04CBE:  MOVLW  28
04CC0:  MOVLB  A
04CC2:  ADDWF  xD6,W
04CC4:  MOVWF  FE9
04CC6:  MOVLW  00
04CC8:  ADDWFC xD7,W
04CCA:  MOVWF  FEA
04CCC:  MOVLW  01
04CCE:  MOVWF  FE2
04CD0:  MOVLW  54
04CD2:  MOVWF  FE1
04CD4:  MOVLW  0A
04CD6:  MOVWF  01
04CD8:  MOVLB  0
04CDA:  MOVFF  FE6,FEE
04CDE:  DECFSZ 01,F
04CE0:  GOTO   4CDA
....................     flash_data_ptr->packet.payload.logdata.iv2_data = misf_counter_table[FLASH_ID_IV2_DATA];
04CE4:  MOVLW  32
04CE6:  MOVLB  A
04CE8:  ADDWF  xD6,W
04CEA:  MOVWF  FE9
04CEC:  MOVLW  00
04CEE:  ADDWFC xD7,W
04CF0:  MOVWF  FEA
04CF2:  MOVLW  01
04CF4:  MOVWF  FE2
04CF6:  MOVLW  5E
04CF8:  MOVWF  FE1
04CFA:  MOVLW  0A
04CFC:  MOVWF  01
04CFE:  MOVLB  0
04D00:  MOVFF  FE6,FEE
04D04:  DECFSZ 01,F
04D06:  GOTO   4D00
.................... 
....................     // CRC 計算
....................     flash_data_ptr->packet.crc = calc_crc8(flash_data_ptr->bytes, PACKET_SIZE - 1);
04D0A:  MOVLW  3F
04D0C:  MOVLB  A
04D0E:  ADDWF  xD6,W
04D10:  MOVWF  01
04D12:  MOVLW  00
04D14:  ADDWFC xD7,W
04D16:  MOVWF  03
04D18:  MOVF   01,W
04D1A:  MOVWF  xD8
04D1C:  MOVFF  03,AD9
04D20:  MOVF   xD6,W
04D22:  MOVWF  01
04D24:  MOVF   xD7,W
04D26:  MOVWF  03
04D28:  MOVF   01,W
04D2A:  MOVWF  xDA
04D2C:  MOVFF  03,ADB
04D30:  MOVFF  ADB,AEC
04D34:  MOVFF  ADA,AEB
04D38:  MOVLW  3F
04D3A:  MOVWF  xED
04D3C:  MOVLB  0
04D3E:  CALL   310C
04D42:  MOVFF  AD9,FEA
04D46:  MOVFF  AD8,FE9
04D4A:  MOVFF  01,FEF
.................... 
....................     return flash_data;
04D4E:  MOVLW  96
04D50:  MOVWF  01
04D52:  MOVLW  0A
04D54:  MOVWF  02
04D56:  GOTO   5082 (RETURN)
.................... }
.................... 
.................... void misf_update_address_area(void)
*
0507E:  GOTO   4BFA
05082:  MOVFF  02,03
05086:  MOVF   01,W
05088:  MOVWF  FE1
0508A:  MOVFF  03,FE2
0508E:  MOVLW  0A
05090:  MOVWF  FEA
05092:  MOVLW  4E
05094:  MOVWF  FE9
05096:  MOVLW  40
05098:  MOVWF  01
0509A:  MOVFF  FE6,FEE
0509E:  DECFSZ 01,F
050A0:  GOTO   509A
050A4:  MOVLW  0A
050A6:  MOVLB  A
050A8:  MOVWF  x8F
050AA:  MOVLW  4E
050AC:  MOVWF  x8E
.................... {
....................     FlashData_t flash_data = make_flash_data_table();
....................     FlashData_t *flash_data_ptr = &flash_data;
.................... 
....................     subsector_4kByte_erase(mis_fm, MISF_ADDRESS_TABLE[FLASH_ID_DATA_TABLE].start);
050AE:  MOVFF  115,A93
050B2:  MOVFF  114,A92
050B6:  MOVFF  113,A91
050BA:  MOVFF  112,A90
050BE:  CLRF   x97
050C0:  CLRF   x96
050C2:  CLRF   x95
050C4:  CLRF   x94
050C6:  MOVLB  0
050C8:  CALL   4D5A
....................     write_data_bytes(mis_fm, MISF_ADDRESS_TABLE[FLASH_ID_DATA_TABLE].start, flash_data_ptr->bytes, PACKET_SIZE);
050CC:  MOVLB  A
050CE:  MOVF   x8E,W
050D0:  MOVWF  01
050D2:  MOVF   x8F,W
050D4:  MOVWF  03
050D6:  MOVF   01,W
050D8:  MOVWF  x90
050DA:  MOVFF  03,A91
050DE:  MOVFF  115,AEE
050E2:  MOVFF  114,AED
050E6:  MOVFF  113,AEC
050EA:  MOVFF  112,AEB
050EE:  CLRF   xF2
050F0:  CLRF   xF1
050F2:  CLRF   xF0
050F4:  CLRF   xEF
050F6:  MOVFF  A91,AF4
050FA:  MOVFF  A90,AF3
050FE:  CLRF   xF6
05100:  MOVLW  40
05102:  MOVWF  xF5
05104:  MOVLB  0
05106:  CALL   3F56
0510A:  RETURN 0
.................... }
.................... 
.................... 
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode)
.................... {
....................     FlashOperationStruct data;
....................     // 構造体の初期化
....................     data.mission_id = mission_id;
....................     data.func_type = func_type;
....................     data.write_mode = write_mode;
....................     data.source_type = SOURCE_MISF_UNCOPIED;
....................     enqueue_flash_operation(&data);
.................... }
.................... 
.................... void write_smf_header(smf_data_table_t *smf_data_table)
.................... {
.................... 
....................     int8 readdata[PACKET_SIZE];
....................     int8 retry_count;
....................     int1 crc_valid = 0;
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
....................         if (is_crc_valid(readdata, PACKET_SIZE-1))
....................         {
....................             crc_valid = 1; // FIX: フラグ更新
....................             fprintf(PC, "CRC verification passed on attempt %d\r\n", retry_count + 1);
....................             break;
....................         }
....................     }
....................     if (!crc_valid)
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
....................         // return; 
....................     }
.................... }
.................... 
.................... 
.................... 
.................... // End of file
.................... 
.................... 
.................... // アプリケーション実装ファイル
.................... #include "application/cigs_excute_mission.c"
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../hal/cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/value_status.h"    // ステータス定義
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "cigs_excute_mission.h"                  // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... // #include "../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... void handle_recieve_time(Command *command);
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_PRINT 0xA3
.................... #define ID_MEAS_IV_PRINT 0xA4
.................... #define ID_MEAS_PD 0xA5
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_pd(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_1sweep(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_port1(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_port2(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int16 interval;
....................     unsigned int16 pd_threshold;
....................     unsigned int16 meas_time;
....................     unsigned int16 log_threshold;
....................     unsigned int16 sweep_limit;
.................... } meas_iv_param_t;
.................... 
.................... 
.................... // MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... meas_iv_param_t make_meas_iv_cmd(int8 *uplinkcmd_ptr);
.................... void print_meas_iv_cmd(meas_iv_param_t *cmd_ptr);
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "../domain/cigs_smf.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #include "../hal/cigs_config.h" // int8,int32 型など(CCS C) 依存
.................... #include "cigs_flash.h"       // MISF_ADDRESS_TABLE, misf_counter_table 依存
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... extern int1 smf_update_flag[10]; // SMF更新フラグ
.................... 
.................... 
.................... // SMF管理用構造体
.................... typedef struct {
....................     ADDRESS_AREA_T header_area;
....................     ADDRESS_AREA_T data_area;
.................... } SMF_AREA_T;
.................... #define SMF_ID_COUNT 7
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 reserved;
.................... } SMF_PARTITION;
.................... 
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         SMF_PARTITION headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table);
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... void smf_update_smf_area(void);
.................... 
.................... typedef union{
....................     unsigned int8 bytes[PACKET_SIZE];
....................     struct {
....................         unsigned int32 piclog_used_size;
....................         unsigned int32 envero_used_size;
....................         unsigned int32 iv1_header_used_size;
....................         unsigned int32 iv1_data_used_size;
....................         unsigned int32 iv2_header_used_size;
....................         unsigned int32 iv2_data_used_size;
....................         unsigned int32 reserved[9];
....................     } fields;
.................... 
.................... }smf_address_header_t;
.................... 
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/communication/typedef_content.h"    // 通信ライブラリ
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06,
....................     TIME_REQ          = 0x07
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.h"      // ミッションツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../domain/cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_limit);  
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x300];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         unsigned int8 envdata[6];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
....................     
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *measured_data_ptr, sweep_config_t *port_data_ptr);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/communication_driver.h" // 通信ドライバー
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *uplink_cmt_ptr)
*
10000:  MOVLB  1
10002:  MOVF   x9F,W
10004:  MOVWF  FE9
10006:  MOVF   xA0,W
10008:  MOVWF  FEA
1000A:  MOVFF  FEF,1A1
.................... {
....................    // record to executed mission list
....................    int8 command_id = uplink_cmt_ptr[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
1000E:  MOVLW  5E
10010:  MOVWF  FF6
10012:  MOVLW  12
10014:  MOVWF  FF7
10016:  MOVLW  00
10018:  MOVWF  FF8
1001A:  MOVLB  0
1001C:  CALL   22FE
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
10020:  MOVLW  A4
10022:  MOVWF  FF6
10024:  MOVLW  12
10026:  MOVWF  FF7
10028:  MOVLW  00
1002A:  MOVWF  FF8
1002C:  MOVLW  0C
1002E:  MOVLB  A
10030:  MOVWF  x4E
10032:  MOVLB  0
10034:  CALL   2334
10038:  MOVFF  1A1,9E8
1003C:  MOVLW  37
1003E:  MOVLB  9
10040:  MOVWF  xE9
10042:  MOVLB  0
10044:  CALL   2564
10048:  MOVLW  B2
1004A:  MOVWF  FF6
1004C:  MOVLW  12
1004E:  MOVWF  FF7
10050:  MOVLW  00
10052:  MOVWF  FF8
10054:  MOVLW  04
10056:  MOVLB  A
10058:  MOVWF  x4E
1005A:  MOVLB  0
1005C:  CALL   2334
....................    switch(command_id)
10060:  MOVLB  1
10062:  MOVF   xA1,W
10064:  XORLW  10
10066:  MOVLB  0
10068:  BTFSC  FD8.2
1006A:  GOTO   1016A
1006E:  XORLW  01
10070:  BTFSC  FD8.2
10072:  GOTO   1016E
10076:  XORLW  03
10078:  BTFSC  FD8.2
1007A:  GOTO   10172
1007E:  XORLW  13
10080:  BTFSC  FD8.2
10082:  GOTO   10176
10086:  XORLW  12
10088:  BTFSC  FD8.2
1008A:  GOTO   1017A
1008E:  XORLW  93
10090:  BTFSC  FD8.2
10092:  GOTO   1017E
10096:  XORLW  01
10098:  BTFSC  FD8.2
1009A:  GOTO   1018E
1009E:  XORLW  03
100A0:  BTFSC  FD8.2
100A2:  GOTO   1019E
100A6:  XORLW  01
100A8:  BTFSC  FD8.2
100AA:  GOTO   101AE
100AE:  XORLW  07
100B0:  BTFSC  FD8.2
100B2:  GOTO   101BE
100B6:  XORLW  01
100B8:  BTFSC  FD8.2
100BA:  GOTO   101CE
100BE:  XORLW  03
100C0:  BTFSC  FD8.2
100C2:  GOTO   101DE
100C6:  XORLW  01
100C8:  BTFSC  FD8.2
100CA:  GOTO   101EE
100CE:  XORLW  0F
100D0:  BTFSC  FD8.2
100D2:  GOTO   101FE
100D6:  XORLW  18
100D8:  BTFSC  FD8.2
100DA:  GOTO   1020E
100DE:  XORLW  01
100E0:  BTFSC  FD8.2
100E2:  GOTO   1021E
100E6:  XORLW  03
100E8:  BTFSC  FD8.2
100EA:  GOTO   1022E
100EE:  XORLW  01
100F0:  BTFSC  FD8.2
100F2:  GOTO   1023E
100F6:  XORLW  07
100F8:  BTFSC  FD8.2
100FA:  GOTO   1024E
100FE:  XORLW  01
10100:  BTFSC  FD8.2
10102:  GOTO   1025E
10106:  XORLW  03
10108:  BTFSC  FD8.2
1010A:  GOTO   1026E
1010E:  XORLW  36
10110:  BTFSC  FD8.2
10112:  GOTO   10276
10116:  XORLW  01
10118:  BTFSC  FD8.2
1011A:  GOTO   10286
1011E:  XORLW  03
10120:  BTFSC  FD8.2
10122:  GOTO   10296
10126:  XORLW  01
10128:  BTFSC  FD8.2
1012A:  GOTO   102A6
1012E:  XORLW  07
10130:  BTFSC  FD8.2
10132:  GOTO   102AA
10136:  XORLW  01
10138:  BTFSC  FD8.2
1013A:  GOTO   102B2
1013E:  XORLW  03
10140:  BTFSC  FD8.2
10142:  GOTO   102C2
10146:  XORLW  01
10148:  BTFSC  FD8.2
1014A:  GOTO   103A0
1014E:  XORLW  0F
10150:  BTFSC  FD8.2
10152:  GOTO   103B8
10156:  XORLW  01
10158:  BTFSC  FD8.2
1015A:  GOTO   103D0
1015E:  XORLW  19
10160:  BTFSC  FD8.2
10162:  GOTO   103E8
10166:  GOTO   105F4
....................    {
....................       case 0x10: // example command
....................          // mode_dummy(content);
....................          //mode_iv_meas_adc();
....................          break;
1016A:  GOTO   10608
....................       case 0x11:
....................          // mode_test_iv(content);
....................          break;
1016E:  GOTO   10608
....................       case 0x12:
....................          // test_adc();
....................          break;
10172:  GOTO   10608
....................       case 0x01:
....................          //mode_measure(content); // check if the flash is connected
....................          break;
10176:  GOTO   10608
....................       case 0x13:
....................          // mode_sweep_port1(content[1]); // Sweep Port 1 with the given step
....................          break;
1017A:  GOTO   10608
.................... 
....................       // ___________________ MISF Commands ______________________
....................       case ID_MISF_ERASE_ALL:
....................          mode_misf_erase_all(uplink_cmt_ptr);
1017E:  MOVFF  1A0,1CB
10182:  MOVFF  19F,1CA
10186:  CALL   5C96
....................          break;
1018A:  GOTO   10608
....................       case ID_MISF_ERASE_1SECTOR:
....................          mode_misf_erase_1sector(uplink_cmt_ptr);
1018E:  MOVFF  1A0,1B0
10192:  MOVFF  19F,1AF
10196:  GOTO   5D74
....................          break;
1019A:  GOTO   10608
....................       case ID_MISF_ERASE_4kByte_SUBSECTOR:
....................          mode_misf_erase_4kbyte_subsector(uplink_cmt_ptr);
1019E:  MOVFF  1A0,1B0
101A2:  MOVFF  19F,1AF
101A6:  GOTO   5F0C
....................          break;
101AA:  GOTO   10608
....................       case ID_MISF_ERASE_64kByte_SUBSECTOR:
....................          mode_misf_erase_64kbyte_subsector(uplink_cmt_ptr);
101AE:  MOVFF  1A0,1B0
101B2:  MOVFF  19F,1AF
101B6:  GOTO   60A4
....................          break;
101BA:  GOTO   10608
....................       case ID_MISF_WRITE_DEMO:
....................          mode_misf_write_demo(uplink_cmt_ptr);
101BE:  MOVFF  1A0,1B0
101C2:  MOVFF  19F,1AF
101C6:  GOTO   63F8
....................          break;
101CA:  GOTO   10608
....................       case ID_MISF_WRITE_4kByte_SUBSECTOR:
....................          mode_misf_write_4kbyte_subsector(uplink_cmt_ptr);
101CE:  MOVFF  1A0,1B0
101D2:  MOVFF  19F,1AF
101D6:  GOTO   6A72
....................          break;
101DA:  GOTO   10608
....................       case ID_MISF_READ:
....................          mode_misf_read(uplink_cmt_ptr);
101DE:  MOVFF  1A0,1B0
101E2:  MOVFF  19F,1AF
101E6:  GOTO   6AEA
....................          break;
101EA:  GOTO   10608
....................       case ID_MISF_READ_ADDRESS:
....................          mode_misf_read_address(uplink_cmt_ptr);
101EE:  MOVFF  1A0,1B0
101F2:  MOVFF  19F,1AF
101F6:  GOTO   72EE
....................          break;
101FA:  GOTO   10608
....................       case ID_MISF_ERASE_AND_RESET:
....................          mode_misf_erase_and_reset(uplink_cmt_ptr);
101FE:  MOVFF  1A0,1C9
10202:  MOVFF  19F,1C8
10206:  CALL   75F6
....................          break;
1020A:  GOTO   10608
.................... 
....................       // ___________________ SMF Commands ______________________
....................       case ID_SMF_COPY:
....................          mode_smf_copy(uplink_cmt_ptr);
1020E:  MOVFF  1A0,1B0
10212:  MOVFF  19F,1AF
10216:  GOTO   764C
....................          break;
1021A:  GOTO   10608
....................       case ID_SMF_READ:
....................          mode_smf_read(uplink_cmt_ptr);
1021E:  MOVFF  1A0,1B0
10222:  MOVFF  19F,1AF
10226:  GOTO   7728
....................          break;
1022A:  GOTO   10608
....................       case ID_SMF_ERASE:
....................          mode_smf_erase(uplink_cmt_ptr);
1022E:  MOVFF  1A0,1B0
10232:  MOVFF  19F,1AF
10236:  GOTO   79FA
....................          break;
1023A:  GOTO   10608
....................       case ID_SMF_COPY_FORCE:
....................          mode_smf_address_reset(uplink_cmt_ptr);
1023E:  MOVFF  1A0,1B0
10242:  MOVFF  19F,1AF
10246:  GOTO   7BE4
....................          break;
1024A:  GOTO   10608
....................       case ID_SMF_READ_FORCE:
....................          mode_smf_read_force(uplink_cmt_ptr);
1024E:  MOVFF  1A0,1B0
10252:  MOVFF  19F,1AF
10256:  GOTO   7D62
....................          break;
1025A:  GOTO   10608
....................       case ID_SMF_ERASE_FORCE:
....................          mode_smf_erase_force(uplink_cmt_ptr);
1025E:  MOVFF  1A0,1B0
10262:  MOVFF  19F,1AF
10266:  GOTO   8174
....................          break;
1026A:  GOTO   10608
....................       case ID_SMF_RESET:
....................          smf_data_table_init();
1026E:  CALL   7A62
....................          break;
10272:  GOTO   10608
....................          
....................          
....................       // ________________MEAS________________________________
....................       case ID_MEAS_IV:
....................          mode_meas_iv(uplink_cmt_ptr);
10276:  MOVFF  1A0,1B0
1027A:  MOVFF  19F,1AF
1027E:  GOTO   B0BE
....................          break;
10282:  GOTO   10608
....................       case ID_MEAS_DEBUG:
....................          mode_meas_iv_debug(uplink_cmt_ptr);
10286:  MOVFF  1A0,1B0
1028A:  MOVFF  19F,1AF
1028E:  GOTO   CE0C
....................          break;
10292:  GOTO   10608
....................       case ID_MEAS_ENV:
....................          mode_meas_env(uplink_cmt_ptr);
10296:  MOVFF  1A0,1B0
1029A:  MOVFF  19F,1AF
1029E:  GOTO   D0EE
....................          break;
102A2:  GOTO   10608
....................       case ID_MEAS_ENV_PRINT:
....................          // mode_meas_env_debug(uplink_cmt_ptr);
....................          break;
102A6:  GOTO   10608
....................       case ID_MEAS_IV_PRINT:
....................          sweep_with_print();
102AA:  GOTO   D1D6
....................          break;
102AE:  GOTO   10608
....................       case ID_MEAS_PD:
....................          mode_meas_pd(uplink_cmt_ptr);
102B2:  MOVFF  1A0,1B0
102B6:  MOVFF  19F,1AF
102BA:  GOTO   E960
....................          break;
102BE:  GOTO   10608
....................       case 0xA6:
....................          connect_port1();
102C2:  CALL   5234
....................          connect_port2();
102C6:  CALL   523C
....................          unsigned int16 cell1_curr;
....................          unsigned int16 cell2_curr;
....................          mcp4901_1_write(10); 
102CA:  MOVLB  9
102CC:  CLRF   xDD
102CE:  MOVLW  0A
102D0:  MOVWF  xDC
102D2:  MOVLB  0
102D4:  CALL   2894
....................          mcp4901_2_write(10);
102D8:  MOVLB  9
102DA:  CLRF   xDD
102DC:  MOVLW  0A
102DE:  MOVWF  xDC
102E0:  MOVLB  0
102E2:  CALL   28D2
....................          while (TRUE)
....................          {  
....................             cell1_curr = ad7490_read(ADC_CIGS1_CURR);
102E6:  MOVLW  01
102E8:  MOVLB  9
102EA:  MOVWF  xEE
102EC:  MOVLB  0
102EE:  CALL   24E4
102F2:  MOVFF  02,1A3
102F6:  MOVFF  01,1A2
....................             cell2_curr = ad7490_read(ADC_CIGS2_CURR);
102FA:  MOVLW  05
102FC:  MOVLB  9
102FE:  MOVWF  xEE
10300:  MOVLB  0
10302:  CALL   24E4
10306:  MOVFF  02,1A5
1030A:  MOVFF  01,1A4
....................             fprintf(PC, "%04LX,%04LX\r\n", cell1_curr, cell2_curr);
1030E:  MOVFF  1A3,9E8
10312:  MOVLW  37
10314:  MOVLB  9
10316:  MOVWF  xE9
10318:  MOVLB  0
1031A:  CALL   2564
1031E:  MOVFF  1A2,9E8
10322:  MOVLW  37
10324:  MOVLB  9
10326:  MOVWF  xE9
10328:  MOVLB  0
1032A:  CALL   2564
1032E:  MOVLW  2C
10330:  BTFSS  FA6.6
10332:  GOTO   10330
10336:  MOVLB  E
10338:  MOVWF  xF9
1033A:  MOVFF  1A5,9E8
1033E:  MOVLW  37
10340:  MOVLB  9
10342:  MOVWF  xE9
10344:  MOVLB  0
10346:  CALL   2564
1034A:  MOVFF  1A4,9E8
1034E:  MOVLW  37
10350:  MOVLB  9
10352:  MOVWF  xE9
10354:  MOVLB  0
10356:  CALL   2564
1035A:  MOVLW  0D
1035C:  BTFSS  FA6.6
1035E:  GOTO   1035C
10362:  MOVLB  E
10364:  MOVWF  xF9
10366:  MOVLW  0A
10368:  MOVLB  0
1036A:  BTFSS  FA6.6
1036C:  GOTO   1036A
10370:  MOVLB  E
10372:  MOVWF  xF9
....................             delay_ms(1000);
10374:  MOVLW  04
10376:  MOVLB  1
10378:  MOVWF  xAF
1037A:  MOVLB  0
1037C:  MOVLW  FA
1037E:  MOVLB  B
10380:  MOVWF  x03
10382:  MOVLB  0
10384:  CALL   22D0
10388:  MOVLB  1
1038A:  DECFSZ xAF,F
1038C:  BRA    10392
1038E:  BRA    10396
10390:  MOVLB  0
10392:  MOVLB  0
10394:  BRA    1037C
10396:  MOVLB  0
10398:  GOTO   102E6
....................          }
....................          break;
1039C:  GOTO   10608
....................       case 0xA7:
....................          connect_port1();
103A0:  CALL   5234
....................          connect_port2();
103A4:  CALL   523C
....................          mode_meas_iv_1sweep(uplink_cmt_ptr);
103A8:  MOVFF  1A0,1B0
103AC:  MOVFF  19F,1AF
103B0:  GOTO   EB58
....................          break;
103B4:  GOTO   10608
.................... 
....................       case 0xA8:
....................          connect_port1();
103B8:  CALL   5234
....................          connect_port2();
103BC:  CALL   523C
....................          mode_meas_iv_port1(uplink_cmt_ptr);
103C0:  MOVFF  1A0,1B0
103C4:  MOVFF  19F,1AF
103C8:  GOTO   F862
....................          break;
103CC:  GOTO   10608
....................       
....................       case 0xA9:
....................          connect_port1();
103D0:  CALL   5234
....................          connect_port2();
103D4:  CALL   523C
....................          mode_meas_iv_port2(uplink_cmt_ptr);
103D8:  MOVFF  1A0,1B0
103DC:  MOVFF  19F,1AF
103E0:  GOTO   FAE6
....................       break;
103E4:  GOTO   10608
.................... 
....................       // ________________Others______________________________
....................       case 0xB0:
....................          unsigned int32 total_seconds = get_current_sec();
....................          unsigned int16 days;
....................          unsigned int8 hours, minutes, seconds;
103E8:  CALL   3C38
103EC:  MOVFF  03,1A9
103F0:  MOVFF  02,1A8
103F4:  MOVFF  01,1A7
103F8:  MOVFF  00,1A6
....................          days    = total_seconds / 86400;
103FC:  BCF    FD8.1
103FE:  MOVFF  1A9,215
10402:  MOVFF  1A8,214
10406:  MOVFF  1A7,213
1040A:  MOVFF  1A6,212
1040E:  MOVLB  2
10410:  CLRF   x19
10412:  MOVLW  01
10414:  MOVWF  x18
10416:  MOVLW  51
10418:  MOVWF  x17
1041A:  MOVLW  80
1041C:  MOVWF  x16
1041E:  MOVLB  0
10420:  CALL   6218
10424:  MOVFF  01,1AB
10428:  MOVFF  00,1AA
....................          hours   = (total_seconds % 86400) / 3600;
1042C:  BSF    FD8.1
1042E:  MOVLW  01
10430:  MOVWF  FEA
10432:  MOVLW  AF
10434:  MOVWF  FE9
10436:  MOVFF  1A9,215
1043A:  MOVFF  1A8,214
1043E:  MOVFF  1A7,213
10442:  MOVFF  1A6,212
10446:  MOVLB  2
10448:  CLRF   x19
1044A:  MOVLW  01
1044C:  MOVWF  x18
1044E:  MOVLW  51
10450:  MOVWF  x17
10452:  MOVLW  80
10454:  MOVWF  x16
10456:  MOVLB  0
10458:  CALL   6218
1045C:  MOVFF  1B2,1B6
10460:  MOVFF  1B1,1B5
10464:  MOVFF  1B0,1B4
10468:  MOVFF  1AF,1B3
1046C:  MOVFF  FEA,1B8
10470:  MOVFF  FE9,1B7
10474:  BCF    FD8.1
10476:  MOVFF  1B6,215
1047A:  MOVFF  1B5,214
1047E:  MOVFF  1B4,213
10482:  MOVFF  1B3,212
10486:  MOVLB  2
10488:  CLRF   x19
1048A:  CLRF   x18
1048C:  MOVLW  0E
1048E:  MOVWF  x17
10490:  MOVLW  10
10492:  MOVWF  x16
10494:  MOVLB  0
10496:  CALL   6218
1049A:  MOVFF  1B8,FEA
1049E:  MOVFF  1B7,FE9
104A2:  MOVFF  00,1AC
....................          minutes = (total_seconds % 3600) / 60;
104A6:  BSF    FD8.1
104A8:  MOVLW  01
104AA:  MOVWF  FEA
104AC:  MOVLW  AF
104AE:  MOVWF  FE9
104B0:  MOVFF  1A9,215
104B4:  MOVFF  1A8,214
104B8:  MOVFF  1A7,213
104BC:  MOVFF  1A6,212
104C0:  MOVLB  2
104C2:  CLRF   x19
104C4:  CLRF   x18
104C6:  MOVLW  0E
104C8:  MOVWF  x17
104CA:  MOVLW  10
104CC:  MOVWF  x16
104CE:  MOVLB  0
104D0:  CALL   6218
104D4:  MOVFF  1B2,1B6
104D8:  MOVFF  1B1,1B5
104DC:  MOVFF  1B0,1B4
104E0:  MOVFF  1AF,1B3
104E4:  MOVFF  FEA,1B8
104E8:  MOVFF  FE9,1B7
104EC:  BCF    FD8.1
104EE:  MOVFF  1B6,215
104F2:  MOVFF  1B5,214
104F6:  MOVFF  1B4,213
104FA:  MOVFF  1B3,212
104FE:  MOVLB  2
10500:  CLRF   x19
10502:  CLRF   x18
10504:  CLRF   x17
10506:  MOVLW  3C
10508:  MOVWF  x16
1050A:  MOVLB  0
1050C:  CALL   6218
10510:  MOVFF  1B8,FEA
10514:  MOVFF  1B7,FE9
10518:  MOVFF  00,1AD
....................          seconds = total_seconds % 60;
1051C:  BSF    FD8.1
1051E:  MOVLW  01
10520:  MOVWF  FEA
10522:  MOVLW  AF
10524:  MOVWF  FE9
10526:  MOVFF  1A9,215
1052A:  MOVFF  1A8,214
1052E:  MOVFF  1A7,213
10532:  MOVFF  1A6,212
10536:  MOVLB  2
10538:  CLRF   x19
1053A:  CLRF   x18
1053C:  CLRF   x17
1053E:  MOVLW  3C
10540:  MOVWF  x16
10542:  MOVLB  0
10544:  CALL   6218
10548:  MOVFF  1AF,1AE
.................... 
....................          fprintf(PC, "\t\t-> Get time to %lu days, %02u:%02u:%02u\r\n",
....................                days, hours, minutes, seconds);
1054C:  MOVLW  B8
1054E:  MOVWF  FF6
10550:  MOVLW  12
10552:  MOVWF  FF7
10554:  MOVLW  00
10556:  MOVWF  FF8
10558:  MOVLW  11
1055A:  MOVLB  A
1055C:  MOVWF  x4E
1055E:  MOVLB  0
10560:  CALL   2334
10564:  MOVLW  10
10566:  MOVWF  FE9
10568:  MOVFF  1AB,1EA
1056C:  MOVFF  1AA,1E9
10570:  CALL   8E82
10574:  MOVLW  CC
10576:  MOVWF  FF6
10578:  MOVLW  12
1057A:  MOVWF  FF7
1057C:  MOVLW  00
1057E:  MOVWF  FF8
10580:  MOVLW  07
10582:  MOVLB  A
10584:  MOVWF  x4E
10586:  MOVLB  0
10588:  CALL   2334
1058C:  MOVFF  1AC,A4E
10590:  MOVLW  01
10592:  MOVLB  A
10594:  MOVWF  x4F
10596:  MOVLB  0
10598:  CALL   9252
1059C:  MOVLW  3A
1059E:  BTFSS  FA6.6
105A0:  GOTO   1059E
105A4:  MOVLB  E
105A6:  MOVWF  xF9
105A8:  MOVFF  1AD,A4E
105AC:  MOVLW  01
105AE:  MOVLB  A
105B0:  MOVWF  x4F
105B2:  MOVLB  0
105B4:  CALL   9252
105B8:  MOVLW  3A
105BA:  BTFSS  FA6.6
105BC:  GOTO   105BA
105C0:  MOVLB  E
105C2:  MOVWF  xF9
105C4:  MOVFF  1AE,A4E
105C8:  MOVLW  01
105CA:  MOVLB  A
105CC:  MOVWF  x4F
105CE:  MOVLB  0
105D0:  CALL   9252
105D4:  MOVLW  0D
105D6:  BTFSS  FA6.6
105D8:  GOTO   105D6
105DC:  MOVLB  E
105DE:  MOVWF  xF9
105E0:  MOVLW  0A
105E2:  MOVLB  0
105E4:  BTFSS  FA6.6
105E6:  GOTO   105E4
105EA:  MOVLB  E
105EC:  MOVWF  xF9
....................          break;
105EE:  MOVLB  0
105F0:  GOTO   10608
.................... 
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
105F4:  MOVLW  E4
105F6:  MOVWF  FF6
105F8:  MOVLW  12
105FA:  MOVWF  FF7
105FC:  MOVLW  00
105FE:  MOVWF  FF8
10600:  CALL   22FE
....................          break;
10604:  GOTO   10608
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
10608:  MOVLW  FC
1060A:  MOVWF  FF6
1060C:  MOVLW  12
1060E:  MOVWF  FF7
10610:  MOVLW  00
10612:  MOVWF  FF8
10614:  CALL   22FE
10618:  GOTO   FDD4 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
12FA2:  MOVLW  42
12FA4:  MOVWF  FF6
12FA6:  MOVLW  13
12FA8:  MOVWF  FF7
12FAA:  MOVLW  00
12FAC:  MOVWF  FF8
12FAE:  CALL   22FE
....................    
....................    switch(command->frame_id)
12FB2:  MOVLB  1
12FB4:  MOVF   x99,W
12FB6:  MOVWF  FE9
12FB8:  MOVF   x9A,W
12FBA:  MOVWF  FEA
12FBC:  MOVF   FEF,W
12FBE:  ADDLW  FC
12FC0:  BTFSS  FD8.0
12FC2:  BRA    12FCA
12FC4:  MOVLB  0
12FC6:  GOTO   13022
12FCA:  ADDLW  04
12FCC:  MOVLB  0
12FCE:  GOTO   1302A
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
12FD2:  MOVFF  19A,19C
12FD6:  MOVFF  199,19B
12FDA:  GOTO   FD88
....................          break;
12FDE:  GOTO   13022
....................          
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
12FE2:  MOVFF  19A,19C
12FE6:  MOVFF  199,19B
12FEA:  GOTO   FDF0
12FEE:  MOVF   01,F
12FF0:  BTFSC  FD8.2
12FF2:  GOTO   12FFE
....................             return TRUE; // if status is finished, return TRUE
12FF6:  MOVLW  01
12FF8:  MOVWF  01
12FFA:  GOTO   13026
....................          }        
....................          break;
12FFE:  GOTO   13022
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
13002:  MOVFF  19A,19C
13006:  MOVFF  199,19B
1300A:  GOTO   12956
....................          break;
1300E:  GOTO   13022
....................       
....................       case SEND_TIME:
....................          handle_recieve_time(command);
13012:  MOVFF  19A,19C
13016:  MOVFF  199,19B
1301A:  GOTO   12CBA
....................          break;
1301E:  GOTO   13022
....................    }
....................    return FALSE;
13022:  MOVLW  00
13024:  MOVWF  01
13026:  GOTO   13512 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
0FD88:  MOVLW  5A
0FD8A:  MOVWF  FF6
0FD8C:  MOVLW  13
0FD8E:  MOVWF  FF7
0FD90:  MOVLW  00
0FD92:  MOVWF  FF8
0FD94:  CALL   22FE
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
0FD98:  MOVLW  70
0FD9A:  MOVWF  FF6
0FD9C:  MOVLW  13
0FD9E:  MOVWF  FF7
0FDA0:  MOVLW  00
0FDA2:  MOVWF  FF8
0FDA4:  CALL   22FE
....................    transmit_ack();
0FDA8:  CALL   5920
.................... 
....................    status[0] = EXECUTING_MISSION;
0FDAC:  MOVLW  02
0FDAE:  MOVWF  4C
....................    execute_mission(command->content);
0FDB0:  MOVLW  03
0FDB2:  MOVLB  1
0FDB4:  ADDWF  x9B,W
0FDB6:  MOVWF  01
0FDB8:  MOVLW  00
0FDBA:  ADDWFC x9C,W
0FDBC:  MOVWF  03
0FDBE:  MOVF   01,W
0FDC0:  MOVWF  x9D
0FDC2:  MOVFF  03,19E
0FDC6:  MOVFF  19E,1A0
0FDCA:  MOVFF  19D,19F
0FDCE:  MOVLB  0
0FDD0:  GOTO   10000
....................    if (is_empty_flash_queue())
0FDD4:  CALL   FD6A
0FDD8:  MOVF   01,F
0FDDA:  BTFSC  FD8.2
0FDDC:  GOTO   FDE8
....................       status[0] = FINISHED;
0FDE0:  MOVLW  06
0FDE2:  MOVWF  4C
0FDE4:  GOTO   FDEC
....................    else
....................       status[0] = SMF_USE_REQ;
0FDE8:  MOVLW  04
0FDEA:  MOVWF  4C
0FDEC:  GOTO   12FDE (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... 
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
0FDF0:  MOVLW  8A
0FDF2:  MOVWF  FF6
0FDF4:  MOVLW  13
0FDF6:  MOVWF  FF7
0FDF8:  MOVLW  00
0FDFA:  MOVWF  FF8
0FDFC:  CALL   22FE
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
0FE00:  MOVLW  9E
0FE02:  MOVWF  FF6
0FE04:  MOVLW  13
0FE06:  MOVWF  FF7
0FE08:  MOVLW  00
0FE0A:  MOVWF  FF8
0FE0C:  CALL   22FE
....................    transmit_status();
0FE10:  CALL   AE06
....................    if (status[0] == FINISHED)
0FE14:  MOVF   4C,W
0FE16:  SUBLW  06
0FE18:  BTFSS  FD8.2
0FE1A:  GOTO   FE3A
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
0FE1E:  MOVLW  BC
0FE20:  MOVWF  FF6
0FE22:  MOVLW  13
0FE24:  MOVWF  FF7
0FE26:  MOVLW  00
0FE28:  MOVWF  FF8
0FE2A:  CALL   22FE
....................       return TRUE;
0FE2E:  MOVLW  01
0FE30:  MOVWF  01
0FE32:  GOTO   FE42
....................    }
0FE36:  GOTO   FE42
....................    else{
....................       return FALSE;
0FE3A:  MOVLW  00
0FE3C:  MOVWF  01
0FE3E:  GOTO   FE42
....................    }
0FE42:  GOTO   12FEE (RETURN)
.................... }
.................... 
.................... 
.................... void handle_smf_available(Command *command)
.................... {
....................     fprintf(PC, "\t-> SMF available check\r\n");
*
12956:  MOVLW  D8
12958:  MOVWF  FF6
1295A:  MOVLW  13
1295C:  MOVWF  FF7
1295E:  MOVLW  00
12960:  MOVWF  FF8
12962:  CALL   22FE
....................     fprintf(PC, "\t   Transmit Acknowledgement\r\n");
12966:  MOVLW  F2
12968:  MOVWF  FF6
1296A:  MOVLW  13
1296C:  MOVWF  FF7
1296E:  MOVLW  00
12970:  MOVWF  FF8
12972:  CALL   22FE
....................     transmit_ack();
12976:  CALL   5920
.................... 
....................     if (command->content[0] != ALLOW) {
1297A:  MOVLW  03
1297C:  MOVLB  1
1297E:  ADDWF  x9B,W
12980:  MOVWF  FE9
12982:  MOVLW  00
12984:  ADDWFC x9C,W
12986:  MOVWF  FEA
12988:  DECFSZ FEF,W
1298A:  BRA    12990
1298C:  BRA    12996
1298E:  MOVLB  0
12990:  MOVLB  0
12992:  GOTO   1299C
12996:  MOVLB  0
12998:  GOTO   129B0
....................         fprintf(PC, "\t\t-> denied\r\n");
1299C:  MOVLW  12
1299E:  MOVWF  FF6
129A0:  MOVLW  14
129A2:  MOVWF  FF7
129A4:  MOVLW  00
129A6:  MOVWF  FF8
129A8:  CALL   22FE
....................         return;
129AC:  GOTO   12CB6
....................     }
.................... 
....................     fprintf(PC, "\t\t-> allowed\r\n");
129B0:  MOVLW  20
129B2:  MOVWF  FF6
129B4:  MOVLW  14
129B6:  MOVWF  FF7
129B8:  MOVLW  00
129BA:  MOVWF  FF8
129BC:  CALL   22FE
....................     status[0] = COPYING;
129C0:  MOVLW  05
129C2:  MOVWF  4C
.................... 
....................     int8 processed_count = 0;
129C4:  MOVLB  1
129C6:  CLRF   x9D
129C8:  MOVLB  0
.................... 
....................     while (!is_empty_flash_queue()) {
129CA:  CALL   FD6A
129CE:  MOVF   01,F
129D0:  BTFSS  FD8.2
129D2:  GOTO   12C6E
....................         FlashOperationStruct *smf_data = dequeue_flash_operation();
129D6:  GOTO   FE46
129DA:  MOVFF  02,19F
129DE:  MOVFF  01,19E
....................         /*
....................         if (smf_data == NULL) {
....................             fprintf(PC, "\t\t-> dequeue NULL (break)\r\n");
....................             break;
....................         }
....................          */
....................         fprintf(PC, "\t\t-> Dequeued: func=%u mission=%u size=%ld addr=%ld\r\n",
....................                 (unsigned int)smf_data->func_type,
....................                 (unsigned int)smf_data->mission_id,
....................                 smf_data->misf_size,
....................                 smf_data->misf_start_addr);
129E2:  MOVLW  01
129E4:  MOVLB  1
129E6:  ADDWF  x9E,W
129E8:  MOVWF  FE9
129EA:  MOVLW  00
129EC:  ADDWFC x9F,W
129EE:  MOVWF  FEA
129F0:  MOVFF  FEF,1A1
129F4:  MOVF   x9E,W
129F6:  MOVWF  FE9
129F8:  MOVF   x9F,W
129FA:  MOVWF  FEA
129FC:  MOVFF  FEF,1A2
12A00:  MOVLW  08
12A02:  ADDWF  x9E,W
12A04:  MOVWF  FE9
12A06:  MOVLW  00
12A08:  ADDWFC x9F,W
12A0A:  MOVWF  FEA
12A0C:  MOVFF  FEF,1A3
12A10:  MOVFF  FEC,1A4
12A14:  MOVFF  FEC,1A5
12A18:  MOVFF  FEC,1A6
12A1C:  MOVF   FED,F
12A1E:  MOVF   FED,F
12A20:  MOVF   FED,F
12A22:  MOVLW  04
12A24:  ADDWF  x9E,W
12A26:  MOVWF  FE9
12A28:  MOVLW  00
12A2A:  ADDWFC x9F,W
12A2C:  MOVWF  FEA
12A2E:  MOVFF  FEF,1A7
12A32:  MOVFF  FEC,1A8
12A36:  MOVFF  FEC,1A9
12A3A:  MOVFF  FEC,1AA
12A3E:  MOVF   FED,F
12A40:  MOVF   FED,F
12A42:  MOVF   FED,F
12A44:  MOVLW  30
12A46:  MOVWF  FF6
12A48:  MOVLW  14
12A4A:  MOVWF  FF7
12A4C:  MOVLW  00
12A4E:  MOVWF  FF8
12A50:  MOVLW  14
12A52:  MOVLB  A
12A54:  MOVWF  x4E
12A56:  MOVLB  0
12A58:  CALL   2334
12A5C:  MOVFF  1A1,A4E
12A60:  MOVLW  1B
12A62:  MOVLB  A
12A64:  MOVWF  x4F
12A66:  MOVLB  0
12A68:  CALL   9252
12A6C:  MOVLW  46
12A6E:  MOVWF  FF6
12A70:  MOVLW  14
12A72:  MOVWF  FF7
12A74:  MOVLW  00
12A76:  MOVWF  FF8
12A78:  MOVLW  09
12A7A:  MOVLB  A
12A7C:  MOVWF  x4E
12A7E:  MOVLB  0
12A80:  CALL   2334
12A84:  MOVFF  1A2,A4E
12A88:  MOVLW  1B
12A8A:  MOVLB  A
12A8C:  MOVWF  x4F
12A8E:  MOVLB  0
12A90:  CALL   9252
12A94:  MOVLW  51
12A96:  MOVWF  FF6
12A98:  MOVLW  14
12A9A:  MOVWF  FF7
12A9C:  MOVLW  00
12A9E:  MOVWF  FF8
12AA0:  MOVLW  06
12AA2:  MOVLB  A
12AA4:  MOVWF  x4E
12AA6:  MOVLB  0
12AA8:  CALL   2334
12AAC:  MOVLW  41
12AAE:  MOVWF  FE9
12AB0:  MOVFF  1A6,1AE
12AB4:  MOVFF  1A5,1AD
12AB8:  MOVFF  1A4,1AC
12ABC:  MOVFF  1A3,1AB
12AC0:  CALL   1061C
12AC4:  MOVLW  5A
12AC6:  MOVWF  FF6
12AC8:  MOVLW  14
12ACA:  MOVWF  FF7
12ACC:  MOVLW  00
12ACE:  MOVWF  FF8
12AD0:  MOVLW  06
12AD2:  MOVLB  A
12AD4:  MOVWF  x4E
12AD6:  MOVLB  0
12AD8:  CALL   2334
12ADC:  MOVLW  41
12ADE:  MOVWF  FE9
12AE0:  MOVFF  1AA,1AE
12AE4:  MOVFF  1A9,1AD
12AE8:  MOVFF  1A8,1AC
12AEC:  MOVFF  1A7,1AB
12AF0:  CALL   1061C
12AF4:  MOVLW  0D
12AF6:  BTFSS  FA6.6
12AF8:  GOTO   12AF6
12AFC:  MOVLB  E
12AFE:  MOVWF  xF9
12B00:  MOVLW  0A
12B02:  MOVLB  0
12B04:  BTFSS  FA6.6
12B06:  GOTO   12B04
12B0A:  MOVLB  E
12B0C:  MOVWF  xF9
.................... 
....................         switch (smf_data->func_type) {
12B0E:  MOVLW  01
12B10:  MOVLB  1
12B12:  ADDWF  x9E,W
12B14:  MOVWF  FE9
12B16:  MOVLW  00
12B18:  ADDWFC x9F,W
12B1A:  MOVWF  FEA
12B1C:  MOVF   FEF,W
12B1E:  XORLW  00
12B20:  MOVLB  0
12B22:  BTFSC  FD8.2
12B24:  GOTO   12B3C
12B28:  XORLW  01
12B2A:  BTFSC  FD8.2
12B2C:  GOTO   12B4C
12B30:  XORLW  03
12B32:  BTFSC  FD8.2
12B34:  GOTO   12B5C
12B38:  GOTO   12B6C
....................             case ENUM_SMF_WRITE:
....................                 smf_write(smf_data);
12B3C:  MOVFF  19F,1A2
12B40:  MOVFF  19E,1A1
12B44:  GOTO   10ADE
....................                 break;
12B48:  GOTO   12BC6
....................             case ENUM_SMF_READ:
....................                 smf_read(smf_data);
12B4C:  MOVFF  19F,1A2
12B50:  MOVFF  19E,1A1
12B54:  GOTO   11B9A
....................                 break;
12B58:  GOTO   12BC6
....................             case ENUM_SMF_ERASE:
....................                 smf_erase(smf_data);
12B5C:  MOVFF  19F,1A2
12B60:  MOVFF  19E,1A1
12B64:  GOTO   122D4
....................                 break;
12B68:  GOTO   12BC6
....................             default:
....................                 fprintf(PC, "\t\t   Unknown func_type=%u\r\n",
....................                         (unsigned int)smf_data->func_type);
12B6C:  MOVLW  01
12B6E:  MOVLB  1
12B70:  ADDWF  x9E,W
12B72:  MOVWF  FE9
12B74:  MOVLW  00
12B76:  ADDWFC x9F,W
12B78:  MOVWF  FEA
12B7A:  MOVFF  FEF,1A1
12B7E:  MOVLW  66
12B80:  MOVWF  FF6
12B82:  MOVLW  14
12B84:  MOVWF  FF7
12B86:  MOVLW  00
12B88:  MOVWF  FF8
12B8A:  MOVLW  17
12B8C:  MOVLB  A
12B8E:  MOVWF  x4E
12B90:  MOVLB  0
12B92:  CALL   2334
12B96:  MOVFF  1A1,A4E
12B9A:  MOVLW  1B
12B9C:  MOVLB  A
12B9E:  MOVWF  x4F
12BA0:  MOVLB  0
12BA2:  CALL   9252
12BA6:  MOVLW  0D
12BA8:  BTFSS  FA6.6
12BAA:  GOTO   12BA8
12BAE:  MOVLB  E
12BB0:  MOVWF  xF9
12BB2:  MOVLW  0A
12BB4:  MOVLB  0
12BB6:  BTFSS  FA6.6
12BB8:  GOTO   12BB6
12BBC:  MOVLB  E
12BBE:  MOVWF  xF9
....................                 break;
12BC0:  MOVLB  0
12BC2:  GOTO   12BC6
....................         }
....................          processed_count++;
12BC6:  MOVLB  1
12BC8:  INCF   x9D,F
....................          unsigned int8 smf_id;
....................          switch (smf_data->mission_id) {
12BCA:  MOVF   x9E,W
12BCC:  MOVWF  FE9
12BCE:  MOVF   x9F,W
12BD0:  MOVWF  FEA
12BD2:  MOVF   FEF,W
12BD4:  XORLW  00
12BD6:  MOVLB  0
12BD8:  BTFSC  FD8.2
12BDA:  GOTO   12C12
12BDE:  XORLW  01
12BE0:  BTFSC  FD8.2
12BE2:  GOTO   12C1E
12BE6:  XORLW  03
12BE8:  BTFSC  FD8.2
12BEA:  GOTO   12C2A
12BEE:  XORLW  01
12BF0:  BTFSC  FD8.2
12BF2:  GOTO   12C36
12BF6:  XORLW  07
12BF8:  BTFSC  FD8.2
12BFA:  GOTO   12C42
12BFE:  XORLW  01
12C00:  BTFSC  FD8.2
12C02:  GOTO   12C4E
12C06:  XORLW  03
12C08:  BTFSC  FD8.2
12C0A:  GOTO   12C5A
12C0E:  GOTO   12C66
....................             case CIGS_DATA_TABLE:
....................                smf_id = DATA_ID_CIGS_DATA_TABLE;
12C12:  MOVLW  C0
12C14:  MOVLB  1
12C16:  MOVWF  xA0
....................                break;
12C18:  MOVLB  0
12C1A:  GOTO   12C6A
....................             case CIGS_PICLOG_DATA:
....................                smf_id = DATA_ID_CIGS_PICLOG;
12C1E:  MOVLW  C1
12C20:  MOVLB  1
12C22:  MOVWF  xA0
....................                break;
12C24:  MOVLB  0
12C26:  GOTO   12C6A
....................             case CIGS_ENVIRO_DATA:
....................                smf_id = DATA_ID_CIGS_ENVIRO;
12C2A:  MOVLW  C2
12C2C:  MOVLB  1
12C2E:  MOVWF  xA0
....................                break;
12C30:  MOVLB  0
12C32:  GOTO   12C6A
....................             case CIGS_IV1_HEADER:
....................                smf_id = DATA_ID_CIGS_IV1_HEADER;
12C36:  MOVLW  C3
12C38:  MOVLB  1
12C3A:  MOVWF  xA0
....................                break;
12C3C:  MOVLB  0
12C3E:  GOTO   12C6A
....................             case CIGS_IV1_DATA:
....................                smf_id = DATA_ID_CIGS_IV1_DATA;
12C42:  MOVLW  C4
12C44:  MOVLB  1
12C46:  MOVWF  xA0
....................                break;
12C48:  MOVLB  0
12C4A:  GOTO   12C6A
....................             case CIGS_IV2_HEADER:
....................                smf_id = DATA_ID_CIGS_IV2_HEADER;
12C4E:  MOVLW  C5
12C50:  MOVLB  1
12C52:  MOVWF  xA0
....................                break;
12C54:  MOVLB  0
12C56:  GOTO   12C6A
....................             case CIGS_IV2_DATA:
....................                smf_id = DATA_ID_CIGS_IV2_DATA;
12C5A:  MOVLW  C6
12C5C:  MOVLB  1
12C5E:  MOVWF  xA0
....................                 break;
12C60:  MOVLB  0
12C62:  GOTO   12C6A
....................             default:
....................                 break;
12C66:  GOTO   12C6A
....................          }
12C6A:  GOTO   129CA
....................          
....................     }
.................... 
....................     fprintf(PC, "\t\t-> Completed %u operations\r\n",
....................             (unsigned int)processed_count);
12C6E:  MOVLW  82
12C70:  MOVWF  FF6
12C72:  MOVLW  14
12C74:  MOVWF  FF7
12C76:  MOVLW  00
12C78:  MOVWF  FF8
12C7A:  MOVLW  0F
12C7C:  MOVLB  A
12C7E:  MOVWF  x4E
12C80:  MOVLB  0
12C82:  CALL   2334
12C86:  MOVFF  19D,A4E
12C8A:  MOVLW  1B
12C8C:  MOVLB  A
12C8E:  MOVWF  x4F
12C90:  MOVLB  0
12C92:  CALL   9252
12C96:  MOVLW  93
12C98:  MOVWF  FF6
12C9A:  MOVLW  14
12C9C:  MOVWF  FF7
12C9E:  MOVLW  00
12CA0:  MOVWF  FF8
12CA2:  MOVLW  0D
12CA4:  MOVLB  A
12CA6:  MOVWF  x4E
12CA8:  MOVLB  0
12CAA:  CALL   2334
....................       status[1] = 0xC0;
12CAE:  MOVLW  C0
12CB0:  MOVWF  4D
....................       status[0] = FINISHED;
12CB2:  MOVLW  06
12CB4:  MOVWF  4C
12CB6:  GOTO   1300E (RETURN)
.................... }
.................... 
.................... void handle_recieve_time(Command *command)
.................... {
....................    fprintf(PC, "\t-> TIME Receive\r\n");
12CBA:  MOVLW  A2
12CBC:  MOVWF  FF6
12CBE:  MOVLW  14
12CC0:  MOVWF  FF7
12CC2:  MOVLW  00
12CC4:  MOVWF  FF8
12CC6:  CALL   22FE
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
12CCA:  MOVLW  B6
12CCC:  MOVWF  FF6
12CCE:  MOVLW  14
12CD0:  MOVWF  FF7
12CD2:  MOVLW  00
12CD4:  MOVWF  FF8
12CD6:  CALL   22FE
....................    transmit_ack();
12CDA:  CALL   5920
.................... 
....................    // 4バイト(MSB, big-endian)に詰められた MM/DD hh:mm:ss を復元
....................    // [31:26]=0, [25:22]=month(1-12), [21:17]=day(1-31), [16:12]=hour(0-23), [11:6]=minute(0-59), [5:0]=second(0-59)
....................    unsigned int32 total_seconds = ((unsigned int32)command->content[0] << 24) |
....................                       ((unsigned int32)command->content[1] << 16) |
....................                       ((unsigned int32)command->content[2] << 8)  |
....................                       ((unsigned int32)command->content[3]);
12CDE:  MOVLW  03
12CE0:  MOVLB  1
12CE2:  ADDWF  x9B,W
12CE4:  MOVWF  FE9
12CE6:  MOVLW  00
12CE8:  ADDWFC x9C,W
12CEA:  MOVWF  FEA
12CEC:  MOVF   FEF,W
12CEE:  CLRF   xA9
12CF0:  CLRF   xA8
12CF2:  CLRF   xA7
12CF4:  MOVWF  xA6
12CF6:  MOVFF  1A6,1A9
12CFA:  CLRF   xA6
12CFC:  CLRF   xA7
12CFE:  CLRF   xA8
12D00:  MOVLW  04
12D02:  ADDWF  x9B,W
12D04:  MOVWF  FE9
12D06:  MOVLW  00
12D08:  ADDWFC x9C,W
12D0A:  MOVWF  FEA
12D0C:  MOVF   FEF,W
12D0E:  CLRF   xAE
12D10:  CLRF   xAD
12D12:  CLRF   xAC
12D14:  MOVWF  xAB
12D16:  MOVFF  1AC,03
12D1A:  MOVFF  1AB,02
12D1E:  CLRF   00
12D20:  CLRF   01
12D22:  MOVF   00,W
12D24:  IORWF  xA6,F
12D26:  MOVF   01,W
12D28:  IORWF  xA7,F
12D2A:  MOVF   02,W
12D2C:  IORWF  xA8,F
12D2E:  MOVF   03,W
12D30:  IORWF  xA9,F
12D32:  MOVLW  05
12D34:  ADDWF  x9B,W
12D36:  MOVWF  FE9
12D38:  MOVLW  00
12D3A:  ADDWFC x9C,W
12D3C:  MOVWF  FEA
12D3E:  MOVF   FEF,W
12D40:  CLRF   xAE
12D42:  CLRF   xAD
12D44:  CLRF   xAC
12D46:  MOVWF  xAB
12D48:  MOVFF  1AD,03
12D4C:  MOVFF  1AC,02
12D50:  MOVFF  1AB,01
12D54:  CLRF   00
12D56:  MOVF   00,W
12D58:  IORWF  xA6,F
12D5A:  MOVF   01,W
12D5C:  IORWF  xA7,F
12D5E:  MOVF   02,W
12D60:  IORWF  xA8,F
12D62:  MOVF   03,W
12D64:  IORWF  xA9,F
12D66:  MOVLW  06
12D68:  ADDWF  x9B,W
12D6A:  MOVWF  FE9
12D6C:  MOVLW  00
12D6E:  ADDWFC x9C,W
12D70:  MOVWF  FEA
12D72:  MOVF   FEF,W
12D74:  MOVWF  00
12D76:  CLRF   01
12D78:  CLRF   02
12D7A:  CLRF   03
12D7C:  MOVF   00,W
12D7E:  IORWF  xA6,W
12D80:  MOVWF  x9D
12D82:  MOVF   01,W
12D84:  IORWF  xA7,W
12D86:  MOVWF  x9E
12D88:  MOVF   02,W
12D8A:  IORWF  xA8,W
12D8C:  MOVWF  x9F
12D8E:  MOVF   03,W
12D90:  IORWF  xA9,W
12D92:  MOVWF  xA0
.................... 
....................    set_current_sec(total_seconds);
12D94:  MOVFF  1A0,1A9
12D98:  MOVFF  19F,1A8
12D9C:  MOVFF  19E,1A7
12DA0:  MOVFF  19D,1A6
12DA4:  MOVLB  0
12DA6:  GOTO   FFE2
....................    unsigned int16 days;
....................    unsigned int8 hours, minutes, seconds;
....................    days    = total_seconds / 86400;
12DAA:  BCF    FD8.1
12DAC:  MOVFF  1A0,215
12DB0:  MOVFF  19F,214
12DB4:  MOVFF  19E,213
12DB8:  MOVFF  19D,212
12DBC:  MOVLB  2
12DBE:  CLRF   x19
12DC0:  MOVLW  01
12DC2:  MOVWF  x18
12DC4:  MOVLW  51
12DC6:  MOVWF  x17
12DC8:  MOVLW  80
12DCA:  MOVWF  x16
12DCC:  MOVLB  0
12DCE:  CALL   6218
12DD2:  MOVFF  01,1A2
12DD6:  MOVFF  00,1A1
....................    hours   = (total_seconds % 86400) / 3600;
12DDA:  BSF    FD8.1
12DDC:  MOVLW  01
12DDE:  MOVWF  FEA
12DE0:  MOVLW  A6
12DE2:  MOVWF  FE9
12DE4:  MOVFF  1A0,215
12DE8:  MOVFF  19F,214
12DEC:  MOVFF  19E,213
12DF0:  MOVFF  19D,212
12DF4:  MOVLB  2
12DF6:  CLRF   x19
12DF8:  MOVLW  01
12DFA:  MOVWF  x18
12DFC:  MOVLW  51
12DFE:  MOVWF  x17
12E00:  MOVLW  80
12E02:  MOVWF  x16
12E04:  MOVLB  0
12E06:  CALL   6218
12E0A:  MOVFF  1A9,1AD
12E0E:  MOVFF  1A8,1AC
12E12:  MOVFF  1A7,1AB
12E16:  MOVFF  1A6,1AA
12E1A:  MOVFF  FEA,1AF
12E1E:  MOVFF  FE9,1AE
12E22:  BCF    FD8.1
12E24:  MOVFF  1AD,215
12E28:  MOVFF  1AC,214
12E2C:  MOVFF  1AB,213
12E30:  MOVFF  1AA,212
12E34:  MOVLB  2
12E36:  CLRF   x19
12E38:  CLRF   x18
12E3A:  MOVLW  0E
12E3C:  MOVWF  x17
12E3E:  MOVLW  10
12E40:  MOVWF  x16
12E42:  MOVLB  0
12E44:  CALL   6218
12E48:  MOVFF  1AF,FEA
12E4C:  MOVFF  1AE,FE9
12E50:  MOVFF  00,1A3
....................    minutes = (total_seconds % 3600) / 60;
12E54:  BSF    FD8.1
12E56:  MOVLW  01
12E58:  MOVWF  FEA
12E5A:  MOVLW  A6
12E5C:  MOVWF  FE9
12E5E:  MOVFF  1A0,215
12E62:  MOVFF  19F,214
12E66:  MOVFF  19E,213
12E6A:  MOVFF  19D,212
12E6E:  MOVLB  2
12E70:  CLRF   x19
12E72:  CLRF   x18
12E74:  MOVLW  0E
12E76:  MOVWF  x17
12E78:  MOVLW  10
12E7A:  MOVWF  x16
12E7C:  MOVLB  0
12E7E:  CALL   6218
12E82:  MOVFF  1A9,1AD
12E86:  MOVFF  1A8,1AC
12E8A:  MOVFF  1A7,1AB
12E8E:  MOVFF  1A6,1AA
12E92:  MOVFF  FEA,1AF
12E96:  MOVFF  FE9,1AE
12E9A:  BCF    FD8.1
12E9C:  MOVFF  1AD,215
12EA0:  MOVFF  1AC,214
12EA4:  MOVFF  1AB,213
12EA8:  MOVFF  1AA,212
12EAC:  MOVLB  2
12EAE:  CLRF   x19
12EB0:  CLRF   x18
12EB2:  CLRF   x17
12EB4:  MOVLW  3C
12EB6:  MOVWF  x16
12EB8:  MOVLB  0
12EBA:  CALL   6218
12EBE:  MOVFF  1AF,FEA
12EC2:  MOVFF  1AE,FE9
12EC6:  MOVFF  00,1A4
....................    seconds = total_seconds % 60;
12ECA:  BSF    FD8.1
12ECC:  MOVLW  01
12ECE:  MOVWF  FEA
12ED0:  MOVLW  A6
12ED2:  MOVWF  FE9
12ED4:  MOVFF  1A0,215
12ED8:  MOVFF  19F,214
12EDC:  MOVFF  19E,213
12EE0:  MOVFF  19D,212
12EE4:  MOVLB  2
12EE6:  CLRF   x19
12EE8:  CLRF   x18
12EEA:  CLRF   x17
12EEC:  MOVLW  3C
12EEE:  MOVWF  x16
12EF0:  MOVLB  0
12EF2:  CALL   6218
12EF6:  MOVFF  1A6,1A5
.................... 
....................    fprintf(PC, "\t\t-> Set time to %lu days, %02u:%02u:%02u\r\n",
....................            days, hours, minutes, seconds);
12EFA:  MOVLW  D0
12EFC:  MOVWF  FF6
12EFE:  MOVLW  14
12F00:  MOVWF  FF7
12F02:  MOVLW  00
12F04:  MOVWF  FF8
12F06:  MOVLW  11
12F08:  MOVLB  A
12F0A:  MOVWF  x4E
12F0C:  MOVLB  0
12F0E:  CALL   2334
12F12:  MOVLW  10
12F14:  MOVWF  FE9
12F16:  MOVFF  1A2,1EA
12F1A:  MOVFF  1A1,1E9
12F1E:  CALL   8E82
12F22:  MOVLW  E4
12F24:  MOVWF  FF6
12F26:  MOVLW  14
12F28:  MOVWF  FF7
12F2A:  MOVLW  00
12F2C:  MOVWF  FF8
12F2E:  MOVLW  07
12F30:  MOVLB  A
12F32:  MOVWF  x4E
12F34:  MOVLB  0
12F36:  CALL   2334
12F3A:  MOVFF  1A3,A4E
12F3E:  MOVLW  01
12F40:  MOVLB  A
12F42:  MOVWF  x4F
12F44:  MOVLB  0
12F46:  CALL   9252
12F4A:  MOVLW  3A
12F4C:  BTFSS  FA6.6
12F4E:  GOTO   12F4C
12F52:  MOVLB  E
12F54:  MOVWF  xF9
12F56:  MOVFF  1A4,A4E
12F5A:  MOVLW  01
12F5C:  MOVLB  A
12F5E:  MOVWF  x4F
12F60:  MOVLB  0
12F62:  CALL   9252
12F66:  MOVLW  3A
12F68:  BTFSS  FA6.6
12F6A:  GOTO   12F68
12F6E:  MOVLB  E
12F70:  MOVWF  xF9
12F72:  MOVFF  1A5,A4E
12F76:  MOVLW  01
12F78:  MOVLB  A
12F7A:  MOVWF  x4F
12F7C:  MOVLB  0
12F7E:  CALL   9252
12F82:  MOVLW  0D
12F84:  BTFSS  FA6.6
12F86:  GOTO   12F84
12F8A:  MOVLB  E
12F8C:  MOVWF  xF9
12F8E:  MOVLW  0A
12F90:  MOVLB  0
12F92:  BTFSS  FA6.6
12F94:  GOTO   12F92
12F98:  MOVLB  E
12F9A:  MOVWF  xF9
12F9C:  MOVLB  0
12F9E:  GOTO   1301E (RETURN)
.................... 
.................... }
.................... // End of file
.................... 
.................... #include "application/cigs_mode_mission.c"
.................... #include "cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_PRINT 0xA3
.................... #define ID_MEAS_IV_PRINT 0xA4
.................... #define ID_MEAS_PD 0xA5
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_pd(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_1sweep(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_port1(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_port2(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int16 interval;
....................     unsigned int16 pd_threshold;
....................     unsigned int16 meas_time;
....................     unsigned int16 log_threshold;
....................     unsigned int16 sweep_limit;
.................... } meas_iv_param_t;
.................... 
.................... 
.................... // MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... meas_iv_param_t make_meas_iv_cmd(int8 *uplinkcmd_ptr);
.................... void print_meas_iv_cmd(meas_iv_param_t *cmd_ptr);
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_limit);  
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x300];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         unsigned int8 envdata[6];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
....................     
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *measured_data_ptr, sweep_config_t *port_data_ptr);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/device/ad7490.h"                    // ADCライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... // === AD7490 Control Word ===
.................... // Bit[15]   : WRITE (常に0)
.................... // Bit[14:13]: SEQ mode (シーケンス設定)
.................... // Bit[12]   : SHADOW (0=disabled, 1=enabled)
.................... // Bit[11]   : Don't Care
.................... // Bit[10]   : PM1 (Power Management)
.................... // Bit[9]    : PM0
.................... // Bit[8]    : REFSEL (0=internal, 1=external)
.................... // Bit[7]    : Coding (0=straight binary, 1=twos complement)
.................... // Bit[6]    : Don't Care
.................... // Bit[5]    : ADD2
.................... // Bit[4]    : ADD1
.................... // Bit[3]    : ADD0
.................... // Bit[2]    : DIFF (0=single-ended, 1=differential)
.................... // Bit[1:0]  : Don't Care
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000011
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000000
.................... 
.................... 
.................... // ----------------------------
.................... // WRITE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_WRITE_DISABLE = 0,  // 書き込み無効
....................     AD7490_WRITE_ENABLE  = 1   // 書き込み有効
.................... } ad7490_write_t;
.................... 
.................... // ----------------------------
.................... // SEQ bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SEQ_DISABLE = 0,
....................     AD7490_SEQ_ENABLE  = 1
.................... } ad7490_seq_t;
.................... 
.................... // ----------------------------
.................... // CODING bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CODING_BINARY  = 0, // ストレートバイナリ
....................     AD7490_CODING_TWOS    = 1  // Two’s complement
.................... } ad7490_coding_t;
.................... 
.................... // ----------------------------
.................... // RANGE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_RANGE_2REF  = 0, // 0〜2*REFIN
....................     AD7490_RANGE_REF   = 1  // 0〜REFIN
.................... } ad7490_range_t;
.................... 
.................... // ----------------------------
.................... // WEAK/TRI bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_DOUT_TRI   = 0, // Three-state
....................     AD7490_DOUT_WEAK  = 1  // Weakly driven
.................... } ad7490_dout_t;
.................... 
.................... // ----------------------------
.................... // SHADOW bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SHADOW_DISABLE = 0,
....................     AD7490_SHADOW_ENABLE  = 1
.................... } ad7490_shadow_t;
.................... 
.................... // ----------------------------
.................... // Power Mode (PM1, PM0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_PWR_NORMAL    = 0, // 00
....................     AD7490_PWR_FULLDOWN  = 1, // 01
....................     AD7490_PWR_AUTO      = 2, // 10
....................     AD7490_PWR_SHUTDOWN  = 3  // 11
.................... } ad7490_pwr_mode_t;
.................... 
.................... // ----------------------------
.................... // Channel Address (ADD3–ADD0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CH0  = 0,
....................     AD7490_CH1  = 1,
....................     AD7490_CH2  = 2,
....................     AD7490_CH3  = 3,
....................     AD7490_CH4  = 4,
....................     AD7490_CH5  = 5,
....................     AD7490_CH6  = 6,
....................     AD7490_CH7  = 7,
....................     AD7490_CH8  = 8,
....................     AD7490_CH9  = 9,
....................     AD7490_CH10 = 10,
....................     AD7490_CH11 = 11,
....................     AD7490_CH12 = 12,
....................     AD7490_CH13 = 13,
....................     AD7490_CH14 = 14,
....................     AD7490_CH15 = 15
.................... } ad7490_channel_t;
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_flash.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void mode_meas_iv_1sweep(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS IV 1 SWEEP\r\n");
*
0EB58:  MOVLW  FC
0EB5A:  MOVWF  FF6
0EB5C:  MOVLW  14
0EB5E:  MOVWF  FF7
0EB60:  MOVLW  00
0EB62:  MOVWF  FF8
0EB64:  CALL   22FE
.................... 
....................    mode_misf_erase_and_reset(uplinkcmd_ptr);
0EB68:  MOVFF  1B0,1C9
0EB6C:  MOVFF  1AF,1C8
0EB70:  CALL   75F6
.................... 
....................    meas_iv_param_t cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0EB74:  MOVFF  1B0,1E6
0EB78:  MOVFF  1AF,1E5
0EB7C:  CALL   8282
0EB80:  MOVFF  02,03
0EB84:  MOVF   01,W
0EB86:  MOVWF  FE1
0EB88:  MOVFF  03,FE2
0EB8C:  MOVLW  01
0EB8E:  MOVWF  FEA
0EB90:  MOVLW  B1
0EB92:  MOVWF  FE9
0EB94:  MOVLW  0B
0EB96:  MOVWF  01
0EB98:  MOVFF  FE6,FEE
0EB9C:  DECFSZ 01,F
0EB9E:  GOTO   EB98
....................    cmd.sweep_limit = 0x0030;
0EBA2:  MOVLB  1
0EBA4:  CLRF   xBB
0EBA6:  MOVLW  30
0EBA8:  MOVWF  xBA
....................    sweep(cmd.log_threshold, cmd.sweep_limit, cmd.pd_threshold);
0EBAA:  MOVFF  1B9,1E0
0EBAE:  MOVFF  1B8,1DF
0EBB2:  MOVFF  1BB,1E2
0EBB6:  MOVFF  1BA,1E1
0EBBA:  MOVFF  1B5,1E4
0EBBE:  MOVFF  1B4,1E3
0EBC2:  MOVLB  0
0EBC4:  CALL   9CB2
....................    
....................    FlashOperationStruct data = {0};
0EBC8:  MOVLB  1
0EBCA:  CLRF   xBC
0EBCC:  CLRF   xBD
0EBCE:  CLRF   xBE
0EBD0:  CLRF   xBF
0EBD2:  CLRF   xC0
0EBD4:  CLRF   xC1
0EBD6:  CLRF   xC2
0EBD8:  CLRF   xC3
0EBDA:  CLRF   xC4
0EBDC:  CLRF   xC5
0EBDE:  CLRF   xC6
0EBE0:  CLRF   xC7
....................    data.func_type = ENUM_SMF_WRITE;
0EBE2:  CLRF   xBD
....................    data.mission_id = CIGS_IV1_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0EBE4:  MOVLW  04
0EBE6:  MOVWF  xBC
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0EBE8:  MOVLW  02
0EBEA:  MOVWF  xBE
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0EBEC:  BCF    xBF.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0EBEE:  MOVLW  1A
0EBF0:  MOVWF  FF6
0EBF2:  MOVLW  15
0EBF4:  MOVWF  FF7
0EBF6:  MOVLW  00
0EBF8:  MOVWF  FF8
0EBFA:  MOVLB  0
0EBFC:  CALL   22FE
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0EC00:  MOVLW  2C
0EC02:  MOVWF  FF6
0EC04:  MOVLW  15
0EC06:  MOVWF  FF7
0EC08:  MOVLW  00
0EC0A:  MOVWF  FF8
0EC0C:  MOVLW  0F
0EC0E:  MOVLB  A
0EC10:  MOVWF  x4E
0EC12:  MOVLB  0
0EC14:  CALL   2334
0EC18:  MOVFF  1BC,9E8
0EC1C:  MOVLW  37
0EC1E:  MOVLB  9
0EC20:  MOVWF  xE9
0EC22:  MOVLB  0
0EC24:  CALL   2564
0EC28:  MOVLW  0D
0EC2A:  BTFSS  FA6.6
0EC2C:  GOTO   EC2A
0EC30:  MOVLB  E
0EC32:  MOVWF  xF9
0EC34:  MOVLW  0A
0EC36:  MOVLB  0
0EC38:  BTFSS  FA6.6
0EC3A:  GOTO   EC38
0EC3E:  MOVLB  E
0EC40:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0EC42:  MOVLW  42
0EC44:  MOVWF  FF6
0EC46:  MOVLW  15
0EC48:  MOVWF  FF7
0EC4A:  MOVLW  00
0EC4C:  MOVWF  FF8
0EC4E:  MOVLW  0F
0EC50:  MOVLB  A
0EC52:  MOVWF  x4E
0EC54:  MOVLB  0
0EC56:  CALL   2334
0EC5A:  MOVFF  1BD,9E8
0EC5E:  MOVLW  37
0EC60:  MOVLB  9
0EC62:  MOVWF  xE9
0EC64:  MOVLB  0
0EC66:  CALL   2564
0EC6A:  MOVLW  0D
0EC6C:  BTFSS  FA6.6
0EC6E:  GOTO   EC6C
0EC72:  MOVLB  E
0EC74:  MOVWF  xF9
0EC76:  MOVLW  0A
0EC78:  MOVLB  0
0EC7A:  BTFSS  FA6.6
0EC7C:  GOTO   EC7A
0EC80:  MOVLB  E
0EC82:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0EC84:  MOVLW  58
0EC86:  MOVWF  FF6
0EC88:  MOVLW  15
0EC8A:  MOVWF  FF7
0EC8C:  MOVLW  00
0EC8E:  MOVWF  FF8
0EC90:  MOVLW  0F
0EC92:  MOVLB  A
0EC94:  MOVWF  x4E
0EC96:  MOVLB  0
0EC98:  CALL   2334
0EC9C:  MOVFF  1BE,9E8
0ECA0:  MOVLW  37
0ECA2:  MOVLB  9
0ECA4:  MOVWF  xE9
0ECA6:  MOVLB  0
0ECA8:  CALL   2564
0ECAC:  MOVLW  0D
0ECAE:  BTFSS  FA6.6
0ECB0:  GOTO   ECAE
0ECB4:  MOVLB  E
0ECB6:  MOVWF  xF9
0ECB8:  MOVLW  0A
0ECBA:  MOVLB  0
0ECBC:  BTFSS  FA6.6
0ECBE:  GOTO   ECBC
0ECC2:  MOVLB  E
0ECC4:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0ECC6:  MOVLW  00
0ECC8:  MOVLB  1
0ECCA:  BTFSC  xBF.0
0ECCC:  MOVLW  01
0ECCE:  MOVWF  xC8
0ECD0:  MOVLW  6E
0ECD2:  MOVWF  FF6
0ECD4:  MOVLW  15
0ECD6:  MOVWF  FF7
0ECD8:  MOVLW  00
0ECDA:  MOVWF  FF8
0ECDC:  MOVLW  0F
0ECDE:  MOVLB  A
0ECE0:  MOVWF  x4E
0ECE2:  MOVLB  0
0ECE4:  CALL   2334
0ECE8:  MOVFF  1C8,9E8
0ECEC:  MOVLW  37
0ECEE:  MOVLB  9
0ECF0:  MOVWF  xE9
0ECF2:  MOVLB  0
0ECF4:  CALL   2564
0ECF8:  MOVLW  0D
0ECFA:  BTFSS  FA6.6
0ECFC:  GOTO   ECFA
0ED00:  MOVLB  E
0ED02:  MOVWF  xF9
0ED04:  MOVLW  0A
0ED06:  MOVLB  0
0ED08:  BTFSS  FA6.6
0ED0A:  GOTO   ED08
0ED0E:  MOVLB  E
0ED10:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0ED12:  MOVLW  84
0ED14:  MOVWF  FF6
0ED16:  MOVLW  15
0ED18:  MOVWF  FF7
0ED1A:  MOVLW  00
0ED1C:  MOVWF  FF8
0ED1E:  MOVLW  0F
0ED20:  MOVLB  A
0ED22:  MOVWF  x4E
0ED24:  MOVLB  0
0ED26:  CALL   2334
0ED2A:  MOVLW  02
0ED2C:  MOVLB  1
0ED2E:  MOVWF  xC8
0ED30:  MOVLB  0
0ED32:  MOVLW  30
0ED34:  BTFSS  FA6.6
0ED36:  GOTO   ED34
0ED3A:  MOVLB  E
0ED3C:  MOVWF  xF9
0ED3E:  MOVLB  1
0ED40:  DECFSZ xC8,F
0ED42:  BRA    ED48
0ED44:  BRA    ED4E
0ED46:  MOVLB  0
0ED48:  MOVLB  0
0ED4A:  GOTO   ED32
0ED4E:  MOVFF  1C0,9E8
0ED52:  MOVLW  37
0ED54:  MOVLB  9
0ED56:  MOVWF  xE9
0ED58:  MOVLB  0
0ED5A:  CALL   2564
0ED5E:  MOVLW  0D
0ED60:  BTFSS  FA6.6
0ED62:  GOTO   ED60
0ED66:  MOVLB  E
0ED68:  MOVWF  xF9
0ED6A:  MOVLW  0A
0ED6C:  MOVLB  0
0ED6E:  BTFSS  FA6.6
0ED70:  GOTO   ED6E
0ED74:  MOVLB  E
0ED76:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV1_DATA].uncopied_counter);
0ED78:  MOVLW  9A
0ED7A:  MOVWF  FF6
0ED7C:  MOVLW  15
0ED7E:  MOVWF  FF7
0ED80:  MOVLW  00
0ED82:  MOVWF  FF8
0ED84:  MOVLW  0F
0ED86:  MOVLB  A
0ED88:  MOVWF  x4E
0ED8A:  MOVLB  0
0ED8C:  CALL   2334
0ED90:  MOVLW  02
0ED92:  MOVLB  1
0ED94:  MOVWF  xC8
0ED96:  MOVLB  0
0ED98:  MOVLW  30
0ED9A:  BTFSS  FA6.6
0ED9C:  GOTO   ED9A
0EDA0:  MOVLB  E
0EDA2:  MOVWF  xF9
0EDA4:  MOVLB  1
0EDA6:  DECFSZ xC8,F
0EDA8:  BRA    EDAE
0EDAA:  BRA    EDB4
0EDAC:  MOVLB  0
0EDAE:  MOVLB  0
0EDB0:  GOTO   ED98
0EDB4:  MOVFF  14E,9E8
0EDB8:  MOVLW  37
0EDBA:  MOVLB  9
0EDBC:  MOVWF  xE9
0EDBE:  MOVLB  0
0EDC0:  CALL   2564
0EDC4:  MOVLW  0D
0EDC6:  BTFSS  FA6.6
0EDC8:  GOTO   EDC6
0EDCC:  MOVLB  E
0EDCE:  MOVWF  xF9
0EDD0:  MOVLW  0A
0EDD2:  MOVLB  0
0EDD4:  BTFSS  FA6.6
0EDD6:  GOTO   EDD4
0EDDA:  MOVLB  E
0EDDC:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0EDDE:  MOVLW  01
0EDE0:  MOVLB  1
0EDE2:  MOVWF  xE0
0EDE4:  MOVLW  BC
0EDE6:  MOVWF  xDF
0EDE8:  MOVLB  0
0EDEA:  CALL   AE5E
.................... 
.................... 
....................    data.func_type = ENUM_SMF_WRITE;
0EDEE:  MOVLB  1
0EDF0:  CLRF   xBD
....................    data.mission_id = CIGS_IV2_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0EDF2:  MOVLW  06
0EDF4:  MOVWF  xBC
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0EDF6:  MOVLW  02
0EDF8:  MOVWF  xBE
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0EDFA:  BCF    xBF.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0EDFC:  MOVLW  B0
0EDFE:  MOVWF  FF6
0EE00:  MOVLW  15
0EE02:  MOVWF  FF7
0EE04:  MOVLW  00
0EE06:  MOVWF  FF8
0EE08:  MOVLB  0
0EE0A:  CALL   22FE
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0EE0E:  MOVLW  C2
0EE10:  MOVWF  FF6
0EE12:  MOVLW  15
0EE14:  MOVWF  FF7
0EE16:  MOVLW  00
0EE18:  MOVWF  FF8
0EE1A:  MOVLW  0F
0EE1C:  MOVLB  A
0EE1E:  MOVWF  x4E
0EE20:  MOVLB  0
0EE22:  CALL   2334
0EE26:  MOVFF  1BC,9E8
0EE2A:  MOVLW  37
0EE2C:  MOVLB  9
0EE2E:  MOVWF  xE9
0EE30:  MOVLB  0
0EE32:  CALL   2564
0EE36:  MOVLW  0D
0EE38:  BTFSS  FA6.6
0EE3A:  GOTO   EE38
0EE3E:  MOVLB  E
0EE40:  MOVWF  xF9
0EE42:  MOVLW  0A
0EE44:  MOVLB  0
0EE46:  BTFSS  FA6.6
0EE48:  GOTO   EE46
0EE4C:  MOVLB  E
0EE4E:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0EE50:  MOVLW  D8
0EE52:  MOVWF  FF6
0EE54:  MOVLW  15
0EE56:  MOVWF  FF7
0EE58:  MOVLW  00
0EE5A:  MOVWF  FF8
0EE5C:  MOVLW  0F
0EE5E:  MOVLB  A
0EE60:  MOVWF  x4E
0EE62:  MOVLB  0
0EE64:  CALL   2334
0EE68:  MOVFF  1BD,9E8
0EE6C:  MOVLW  37
0EE6E:  MOVLB  9
0EE70:  MOVWF  xE9
0EE72:  MOVLB  0
0EE74:  CALL   2564
0EE78:  MOVLW  0D
0EE7A:  BTFSS  FA6.6
0EE7C:  GOTO   EE7A
0EE80:  MOVLB  E
0EE82:  MOVWF  xF9
0EE84:  MOVLW  0A
0EE86:  MOVLB  0
0EE88:  BTFSS  FA6.6
0EE8A:  GOTO   EE88
0EE8E:  MOVLB  E
0EE90:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0EE92:  MOVLW  EE
0EE94:  MOVWF  FF6
0EE96:  MOVLW  15
0EE98:  MOVWF  FF7
0EE9A:  MOVLW  00
0EE9C:  MOVWF  FF8
0EE9E:  MOVLW  0F
0EEA0:  MOVLB  A
0EEA2:  MOVWF  x4E
0EEA4:  MOVLB  0
0EEA6:  CALL   2334
0EEAA:  MOVFF  1BE,9E8
0EEAE:  MOVLW  37
0EEB0:  MOVLB  9
0EEB2:  MOVWF  xE9
0EEB4:  MOVLB  0
0EEB6:  CALL   2564
0EEBA:  MOVLW  0D
0EEBC:  BTFSS  FA6.6
0EEBE:  GOTO   EEBC
0EEC2:  MOVLB  E
0EEC4:  MOVWF  xF9
0EEC6:  MOVLW  0A
0EEC8:  MOVLB  0
0EECA:  BTFSS  FA6.6
0EECC:  GOTO   EECA
0EED0:  MOVLB  E
0EED2:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0EED4:  MOVLW  00
0EED6:  MOVLB  1
0EED8:  BTFSC  xBF.0
0EEDA:  MOVLW  01
0EEDC:  MOVWF  xC8
0EEDE:  MOVLW  04
0EEE0:  MOVWF  FF6
0EEE2:  MOVLW  16
0EEE4:  MOVWF  FF7
0EEE6:  MOVLW  00
0EEE8:  MOVWF  FF8
0EEEA:  MOVLW  0F
0EEEC:  MOVLB  A
0EEEE:  MOVWF  x4E
0EEF0:  MOVLB  0
0EEF2:  CALL   2334
0EEF6:  MOVFF  1C8,9E8
0EEFA:  MOVLW  37
0EEFC:  MOVLB  9
0EEFE:  MOVWF  xE9
0EF00:  MOVLB  0
0EF02:  CALL   2564
0EF06:  MOVLW  0D
0EF08:  BTFSS  FA6.6
0EF0A:  GOTO   EF08
0EF0E:  MOVLB  E
0EF10:  MOVWF  xF9
0EF12:  MOVLW  0A
0EF14:  MOVLB  0
0EF16:  BTFSS  FA6.6
0EF18:  GOTO   EF16
0EF1C:  MOVLB  E
0EF1E:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0EF20:  MOVLW  1A
0EF22:  MOVWF  FF6
0EF24:  MOVLW  16
0EF26:  MOVWF  FF7
0EF28:  MOVLW  00
0EF2A:  MOVWF  FF8
0EF2C:  MOVLW  0F
0EF2E:  MOVLB  A
0EF30:  MOVWF  x4E
0EF32:  MOVLB  0
0EF34:  CALL   2334
0EF38:  MOVLW  02
0EF3A:  MOVLB  1
0EF3C:  MOVWF  xC8
0EF3E:  MOVLB  0
0EF40:  MOVLW  30
0EF42:  BTFSS  FA6.6
0EF44:  GOTO   EF42
0EF48:  MOVLB  E
0EF4A:  MOVWF  xF9
0EF4C:  MOVLB  1
0EF4E:  DECFSZ xC8,F
0EF50:  BRA    EF56
0EF52:  BRA    EF5C
0EF54:  MOVLB  0
0EF56:  MOVLB  0
0EF58:  GOTO   EF40
0EF5C:  MOVFF  1C0,9E8
0EF60:  MOVLW  37
0EF62:  MOVLB  9
0EF64:  MOVWF  xE9
0EF66:  MOVLB  0
0EF68:  CALL   2564
0EF6C:  MOVLW  0D
0EF6E:  BTFSS  FA6.6
0EF70:  GOTO   EF6E
0EF74:  MOVLB  E
0EF76:  MOVWF  xF9
0EF78:  MOVLW  0A
0EF7A:  MOVLB  0
0EF7C:  BTFSS  FA6.6
0EF7E:  GOTO   EF7C
0EF82:  MOVLB  E
0EF84:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV2_DATA].uncopied_counter);
0EF86:  MOVLW  30
0EF88:  MOVWF  FF6
0EF8A:  MOVLW  16
0EF8C:  MOVWF  FF7
0EF8E:  MOVLW  00
0EF90:  MOVWF  FF8
0EF92:  MOVLW  0F
0EF94:  MOVLB  A
0EF96:  MOVWF  x4E
0EF98:  MOVLB  0
0EF9A:  CALL   2334
0EF9E:  MOVLW  02
0EFA0:  MOVLB  1
0EFA2:  MOVWF  xC8
0EFA4:  MOVLB  0
0EFA6:  MOVLW  30
0EFA8:  BTFSS  FA6.6
0EFAA:  GOTO   EFA8
0EFAE:  MOVLB  E
0EFB0:  MOVWF  xF9
0EFB2:  MOVLB  1
0EFB4:  DECFSZ xC8,F
0EFB6:  BRA    EFBC
0EFB8:  BRA    EFC2
0EFBA:  MOVLB  0
0EFBC:  MOVLB  0
0EFBE:  GOTO   EFA6
0EFC2:  MOVFF  162,9E8
0EFC6:  MOVLW  37
0EFC8:  MOVLB  9
0EFCA:  MOVWF  xE9
0EFCC:  MOVLB  0
0EFCE:  CALL   2564
0EFD2:  MOVLW  0D
0EFD4:  BTFSS  FA6.6
0EFD6:  GOTO   EFD4
0EFDA:  MOVLB  E
0EFDC:  MOVWF  xF9
0EFDE:  MOVLW  0A
0EFE0:  MOVLB  0
0EFE2:  BTFSS  FA6.6
0EFE4:  GOTO   EFE2
0EFE8:  MOVLB  E
0EFEA:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0EFEC:  MOVLW  01
0EFEE:  MOVLB  1
0EFF0:  MOVWF  xE0
0EFF2:  MOVLW  BC
0EFF4:  MOVWF  xDF
0EFF6:  MOVLB  0
0EFF8:  CALL   AE5E
.................... 
....................    misf_update_address_area();
0EFFC:  CALL   507E
....................    print_misf_address_table();
0F000:  CALL   3178
0F004:  GOTO   103B4 (RETURN)
.................... }
.................... 
.................... void mode_meas_iv_port1(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS IV PORT1\r\n");
*
0F862:  MOVLW  46
0F864:  MOVWF  FF6
0F866:  MOVLW  16
0F868:  MOVWF  FF7
0F86A:  MOVLW  00
0F86C:  MOVWF  FF8
0F86E:  CALL   22FE
.................... 
....................    mode_misf_erase_and_reset(uplinkcmd_ptr);
0F872:  MOVFF  1B0,1C9
0F876:  MOVFF  1AF,1C8
0F87A:  CALL   75F6
.................... 
....................    meas_iv_param_t cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0F87E:  MOVFF  1B0,1E6
0F882:  MOVFF  1AF,1E5
0F886:  CALL   8282
0F88A:  MOVFF  02,03
0F88E:  MOVF   01,W
0F890:  MOVWF  FE1
0F892:  MOVFF  03,FE2
0F896:  MOVLW  01
0F898:  MOVWF  FEA
0F89A:  MOVLW  B1
0F89C:  MOVWF  FE9
0F89E:  MOVLW  0B
0F8A0:  MOVWF  01
0F8A2:  MOVFF  FE6,FEE
0F8A6:  DECFSZ 01,F
0F8A8:  GOTO   F8A2
....................    sweep_port1(cmd.sweep_limit);
0F8AC:  MOVFF  1BB,1C9
0F8B0:  MOVFF  1BA,1C8
0F8B4:  CALL   F008
.................... 
....................    FlashOperationStruct data = {0};
0F8B8:  MOVLB  1
0F8BA:  CLRF   xBC
0F8BC:  CLRF   xBD
0F8BE:  CLRF   xBE
0F8C0:  CLRF   xBF
0F8C2:  CLRF   xC0
0F8C4:  CLRF   xC1
0F8C6:  CLRF   xC2
0F8C8:  CLRF   xC3
0F8CA:  CLRF   xC4
0F8CC:  CLRF   xC5
0F8CE:  CLRF   xC6
0F8D0:  CLRF   xC7
....................    data.func_type = ENUM_SMF_WRITE;
0F8D2:  CLRF   xBD
....................    data.mission_id = CIGS_IV1_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0F8D4:  MOVLW  04
0F8D6:  MOVWF  xBC
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0F8D8:  MOVLW  02
0F8DA:  MOVWF  xBE
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0F8DC:  BCF    xBF.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0F8DE:  MOVLW  62
0F8E0:  MOVWF  FF6
0F8E2:  MOVLW  16
0F8E4:  MOVWF  FF7
0F8E6:  MOVLW  00
0F8E8:  MOVWF  FF8
0F8EA:  MOVLB  0
0F8EC:  CALL   22FE
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0F8F0:  MOVLW  74
0F8F2:  MOVWF  FF6
0F8F4:  MOVLW  16
0F8F6:  MOVWF  FF7
0F8F8:  MOVLW  00
0F8FA:  MOVWF  FF8
0F8FC:  MOVLW  0F
0F8FE:  MOVLB  A
0F900:  MOVWF  x4E
0F902:  MOVLB  0
0F904:  CALL   2334
0F908:  MOVFF  1BC,9E8
0F90C:  MOVLW  37
0F90E:  MOVLB  9
0F910:  MOVWF  xE9
0F912:  MOVLB  0
0F914:  CALL   2564
0F918:  MOVLW  0D
0F91A:  BTFSS  FA6.6
0F91C:  GOTO   F91A
0F920:  MOVLB  E
0F922:  MOVWF  xF9
0F924:  MOVLW  0A
0F926:  MOVLB  0
0F928:  BTFSS  FA6.6
0F92A:  GOTO   F928
0F92E:  MOVLB  E
0F930:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0F932:  MOVLW  8A
0F934:  MOVWF  FF6
0F936:  MOVLW  16
0F938:  MOVWF  FF7
0F93A:  MOVLW  00
0F93C:  MOVWF  FF8
0F93E:  MOVLW  0F
0F940:  MOVLB  A
0F942:  MOVWF  x4E
0F944:  MOVLB  0
0F946:  CALL   2334
0F94A:  MOVFF  1BD,9E8
0F94E:  MOVLW  37
0F950:  MOVLB  9
0F952:  MOVWF  xE9
0F954:  MOVLB  0
0F956:  CALL   2564
0F95A:  MOVLW  0D
0F95C:  BTFSS  FA6.6
0F95E:  GOTO   F95C
0F962:  MOVLB  E
0F964:  MOVWF  xF9
0F966:  MOVLW  0A
0F968:  MOVLB  0
0F96A:  BTFSS  FA6.6
0F96C:  GOTO   F96A
0F970:  MOVLB  E
0F972:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0F974:  MOVLW  A0
0F976:  MOVWF  FF6
0F978:  MOVLW  16
0F97A:  MOVWF  FF7
0F97C:  MOVLW  00
0F97E:  MOVWF  FF8
0F980:  MOVLW  0F
0F982:  MOVLB  A
0F984:  MOVWF  x4E
0F986:  MOVLB  0
0F988:  CALL   2334
0F98C:  MOVFF  1BE,9E8
0F990:  MOVLW  37
0F992:  MOVLB  9
0F994:  MOVWF  xE9
0F996:  MOVLB  0
0F998:  CALL   2564
0F99C:  MOVLW  0D
0F99E:  BTFSS  FA6.6
0F9A0:  GOTO   F99E
0F9A4:  MOVLB  E
0F9A6:  MOVWF  xF9
0F9A8:  MOVLW  0A
0F9AA:  MOVLB  0
0F9AC:  BTFSS  FA6.6
0F9AE:  GOTO   F9AC
0F9B2:  MOVLB  E
0F9B4:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0F9B6:  MOVLW  00
0F9B8:  MOVLB  1
0F9BA:  BTFSC  xBF.0
0F9BC:  MOVLW  01
0F9BE:  MOVWF  xC8
0F9C0:  MOVLW  B6
0F9C2:  MOVWF  FF6
0F9C4:  MOVLW  16
0F9C6:  MOVWF  FF7
0F9C8:  MOVLW  00
0F9CA:  MOVWF  FF8
0F9CC:  MOVLW  0F
0F9CE:  MOVLB  A
0F9D0:  MOVWF  x4E
0F9D2:  MOVLB  0
0F9D4:  CALL   2334
0F9D8:  MOVFF  1C8,9E8
0F9DC:  MOVLW  37
0F9DE:  MOVLB  9
0F9E0:  MOVWF  xE9
0F9E2:  MOVLB  0
0F9E4:  CALL   2564
0F9E8:  MOVLW  0D
0F9EA:  BTFSS  FA6.6
0F9EC:  GOTO   F9EA
0F9F0:  MOVLB  E
0F9F2:  MOVWF  xF9
0F9F4:  MOVLW  0A
0F9F6:  MOVLB  0
0F9F8:  BTFSS  FA6.6
0F9FA:  GOTO   F9F8
0F9FE:  MOVLB  E
0FA00:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0FA02:  MOVLW  CC
0FA04:  MOVWF  FF6
0FA06:  MOVLW  16
0FA08:  MOVWF  FF7
0FA0A:  MOVLW  00
0FA0C:  MOVWF  FF8
0FA0E:  MOVLW  0F
0FA10:  MOVLB  A
0FA12:  MOVWF  x4E
0FA14:  MOVLB  0
0FA16:  CALL   2334
0FA1A:  MOVLW  02
0FA1C:  MOVLB  1
0FA1E:  MOVWF  xC8
0FA20:  MOVLB  0
0FA22:  MOVLW  30
0FA24:  BTFSS  FA6.6
0FA26:  GOTO   FA24
0FA2A:  MOVLB  E
0FA2C:  MOVWF  xF9
0FA2E:  MOVLB  1
0FA30:  DECFSZ xC8,F
0FA32:  BRA    FA38
0FA34:  BRA    FA3E
0FA36:  MOVLB  0
0FA38:  MOVLB  0
0FA3A:  GOTO   FA22
0FA3E:  MOVFF  1C0,9E8
0FA42:  MOVLW  37
0FA44:  MOVLB  9
0FA46:  MOVWF  xE9
0FA48:  MOVLB  0
0FA4A:  CALL   2564
0FA4E:  MOVLW  0D
0FA50:  BTFSS  FA6.6
0FA52:  GOTO   FA50
0FA56:  MOVLB  E
0FA58:  MOVWF  xF9
0FA5A:  MOVLW  0A
0FA5C:  MOVLB  0
0FA5E:  BTFSS  FA6.6
0FA60:  GOTO   FA5E
0FA64:  MOVLB  E
0FA66:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV1_DATA].uncopied_counter);
0FA68:  MOVLW  E2
0FA6A:  MOVWF  FF6
0FA6C:  MOVLW  16
0FA6E:  MOVWF  FF7
0FA70:  MOVLW  00
0FA72:  MOVWF  FF8
0FA74:  MOVLW  0F
0FA76:  MOVLB  A
0FA78:  MOVWF  x4E
0FA7A:  MOVLB  0
0FA7C:  CALL   2334
0FA80:  MOVLW  02
0FA82:  MOVLB  1
0FA84:  MOVWF  xC8
0FA86:  MOVLB  0
0FA88:  MOVLW  30
0FA8A:  BTFSS  FA6.6
0FA8C:  GOTO   FA8A
0FA90:  MOVLB  E
0FA92:  MOVWF  xF9
0FA94:  MOVLB  1
0FA96:  DECFSZ xC8,F
0FA98:  BRA    FA9E
0FA9A:  BRA    FAA4
0FA9C:  MOVLB  0
0FA9E:  MOVLB  0
0FAA0:  GOTO   FA88
0FAA4:  MOVFF  14E,9E8
0FAA8:  MOVLW  37
0FAAA:  MOVLB  9
0FAAC:  MOVWF  xE9
0FAAE:  MOVLB  0
0FAB0:  CALL   2564
0FAB4:  MOVLW  0D
0FAB6:  BTFSS  FA6.6
0FAB8:  GOTO   FAB6
0FABC:  MOVLB  E
0FABE:  MOVWF  xF9
0FAC0:  MOVLW  0A
0FAC2:  MOVLB  0
0FAC4:  BTFSS  FA6.6
0FAC6:  GOTO   FAC4
0FACA:  MOVLB  E
0FACC:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0FACE:  MOVLW  01
0FAD0:  MOVLB  1
0FAD2:  MOVWF  xE0
0FAD4:  MOVLW  BC
0FAD6:  MOVWF  xDF
0FAD8:  MOVLB  0
0FADA:  CALL   AE5E
.................... 
....................    misf_update_address_area();
0FADE:  CALL   507E
0FAE2:  GOTO   103CC (RETURN)
.................... }
.................... 
.................... void mode_meas_iv_port2(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS IV PORT2\r\n");
0FAE6:  MOVLW  F8
0FAE8:  MOVWF  FF6
0FAEA:  MOVLW  16
0FAEC:  MOVWF  FF7
0FAEE:  MOVLW  00
0FAF0:  MOVWF  FF8
0FAF2:  CALL   22FE
.................... 
....................    mode_misf_erase_and_reset(uplinkcmd_ptr);
0FAF6:  MOVFF  1B0,1C9
0FAFA:  MOVFF  1AF,1C8
0FAFE:  CALL   75F6
....................    meas_iv_param_t cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0FB02:  MOVFF  1B0,1E6
0FB06:  MOVFF  1AF,1E5
0FB0A:  CALL   8282
0FB0E:  MOVFF  02,03
0FB12:  MOVF   01,W
0FB14:  MOVWF  FE1
0FB16:  MOVFF  03,FE2
0FB1A:  MOVLW  01
0FB1C:  MOVWF  FEA
0FB1E:  MOVLW  B1
0FB20:  MOVWF  FE9
0FB22:  MOVLW  0B
0FB24:  MOVWF  01
0FB26:  MOVFF  FE6,FEE
0FB2A:  DECFSZ 01,F
0FB2C:  GOTO   FB26
....................    sweep_port1(cmd.sweep_limit);
0FB30:  MOVFF  1BB,1C9
0FB34:  MOVFF  1BA,1C8
0FB38:  CALL   F008
.................... 
....................    FlashOperationStruct data = {0};
0FB3C:  MOVLB  1
0FB3E:  CLRF   xBC
0FB40:  CLRF   xBD
0FB42:  CLRF   xBE
0FB44:  CLRF   xBF
0FB46:  CLRF   xC0
0FB48:  CLRF   xC1
0FB4A:  CLRF   xC2
0FB4C:  CLRF   xC3
0FB4E:  CLRF   xC4
0FB50:  CLRF   xC5
0FB52:  CLRF   xC6
0FB54:  CLRF   xC7
....................    data.func_type = ENUM_SMF_WRITE;
0FB56:  CLRF   xBD
....................    data.mission_id = CIGS_IV2_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0FB58:  MOVLW  06
0FB5A:  MOVWF  xBC
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0FB5C:  MOVLW  02
0FB5E:  MOVWF  xBE
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0FB60:  BCF    xBF.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0FB62:  MOVLW  14
0FB64:  MOVWF  FF6
0FB66:  MOVLW  17
0FB68:  MOVWF  FF7
0FB6A:  MOVLW  00
0FB6C:  MOVWF  FF8
0FB6E:  MOVLB  0
0FB70:  CALL   22FE
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0FB74:  MOVLW  26
0FB76:  MOVWF  FF6
0FB78:  MOVLW  17
0FB7A:  MOVWF  FF7
0FB7C:  MOVLW  00
0FB7E:  MOVWF  FF8
0FB80:  MOVLW  0F
0FB82:  MOVLB  A
0FB84:  MOVWF  x4E
0FB86:  MOVLB  0
0FB88:  CALL   2334
0FB8C:  MOVFF  1BC,9E8
0FB90:  MOVLW  37
0FB92:  MOVLB  9
0FB94:  MOVWF  xE9
0FB96:  MOVLB  0
0FB98:  CALL   2564
0FB9C:  MOVLW  0D
0FB9E:  BTFSS  FA6.6
0FBA0:  GOTO   FB9E
0FBA4:  MOVLB  E
0FBA6:  MOVWF  xF9
0FBA8:  MOVLW  0A
0FBAA:  MOVLB  0
0FBAC:  BTFSS  FA6.6
0FBAE:  GOTO   FBAC
0FBB2:  MOVLB  E
0FBB4:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0FBB6:  MOVLW  3C
0FBB8:  MOVWF  FF6
0FBBA:  MOVLW  17
0FBBC:  MOVWF  FF7
0FBBE:  MOVLW  00
0FBC0:  MOVWF  FF8
0FBC2:  MOVLW  0F
0FBC4:  MOVLB  A
0FBC6:  MOVWF  x4E
0FBC8:  MOVLB  0
0FBCA:  CALL   2334
0FBCE:  MOVFF  1BD,9E8
0FBD2:  MOVLW  37
0FBD4:  MOVLB  9
0FBD6:  MOVWF  xE9
0FBD8:  MOVLB  0
0FBDA:  CALL   2564
0FBDE:  MOVLW  0D
0FBE0:  BTFSS  FA6.6
0FBE2:  GOTO   FBE0
0FBE6:  MOVLB  E
0FBE8:  MOVWF  xF9
0FBEA:  MOVLW  0A
0FBEC:  MOVLB  0
0FBEE:  BTFSS  FA6.6
0FBF0:  GOTO   FBEE
0FBF4:  MOVLB  E
0FBF6:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0FBF8:  MOVLW  52
0FBFA:  MOVWF  FF6
0FBFC:  MOVLW  17
0FBFE:  MOVWF  FF7
0FC00:  MOVLW  00
0FC02:  MOVWF  FF8
0FC04:  MOVLW  0F
0FC06:  MOVLB  A
0FC08:  MOVWF  x4E
0FC0A:  MOVLB  0
0FC0C:  CALL   2334
0FC10:  MOVFF  1BE,9E8
0FC14:  MOVLW  37
0FC16:  MOVLB  9
0FC18:  MOVWF  xE9
0FC1A:  MOVLB  0
0FC1C:  CALL   2564
0FC20:  MOVLW  0D
0FC22:  BTFSS  FA6.6
0FC24:  GOTO   FC22
0FC28:  MOVLB  E
0FC2A:  MOVWF  xF9
0FC2C:  MOVLW  0A
0FC2E:  MOVLB  0
0FC30:  BTFSS  FA6.6
0FC32:  GOTO   FC30
0FC36:  MOVLB  E
0FC38:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0FC3A:  MOVLW  00
0FC3C:  MOVLB  1
0FC3E:  BTFSC  xBF.0
0FC40:  MOVLW  01
0FC42:  MOVWF  xC8
0FC44:  MOVLW  68
0FC46:  MOVWF  FF6
0FC48:  MOVLW  17
0FC4A:  MOVWF  FF7
0FC4C:  MOVLW  00
0FC4E:  MOVWF  FF8
0FC50:  MOVLW  0F
0FC52:  MOVLB  A
0FC54:  MOVWF  x4E
0FC56:  MOVLB  0
0FC58:  CALL   2334
0FC5C:  MOVFF  1C8,9E8
0FC60:  MOVLW  37
0FC62:  MOVLB  9
0FC64:  MOVWF  xE9
0FC66:  MOVLB  0
0FC68:  CALL   2564
0FC6C:  MOVLW  0D
0FC6E:  BTFSS  FA6.6
0FC70:  GOTO   FC6E
0FC74:  MOVLB  E
0FC76:  MOVWF  xF9
0FC78:  MOVLW  0A
0FC7A:  MOVLB  0
0FC7C:  BTFSS  FA6.6
0FC7E:  GOTO   FC7C
0FC82:  MOVLB  E
0FC84:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0FC86:  MOVLW  7E
0FC88:  MOVWF  FF6
0FC8A:  MOVLW  17
0FC8C:  MOVWF  FF7
0FC8E:  MOVLW  00
0FC90:  MOVWF  FF8
0FC92:  MOVLW  0F
0FC94:  MOVLB  A
0FC96:  MOVWF  x4E
0FC98:  MOVLB  0
0FC9A:  CALL   2334
0FC9E:  MOVLW  02
0FCA0:  MOVLB  1
0FCA2:  MOVWF  xC8
0FCA4:  MOVLB  0
0FCA6:  MOVLW  30
0FCA8:  BTFSS  FA6.6
0FCAA:  GOTO   FCA8
0FCAE:  MOVLB  E
0FCB0:  MOVWF  xF9
0FCB2:  MOVLB  1
0FCB4:  DECFSZ xC8,F
0FCB6:  BRA    FCBC
0FCB8:  BRA    FCC2
0FCBA:  MOVLB  0
0FCBC:  MOVLB  0
0FCBE:  GOTO   FCA6
0FCC2:  MOVFF  1C0,9E8
0FCC6:  MOVLW  37
0FCC8:  MOVLB  9
0FCCA:  MOVWF  xE9
0FCCC:  MOVLB  0
0FCCE:  CALL   2564
0FCD2:  MOVLW  0D
0FCD4:  BTFSS  FA6.6
0FCD6:  GOTO   FCD4
0FCDA:  MOVLB  E
0FCDC:  MOVWF  xF9
0FCDE:  MOVLW  0A
0FCE0:  MOVLB  0
0FCE2:  BTFSS  FA6.6
0FCE4:  GOTO   FCE2
0FCE8:  MOVLB  E
0FCEA:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV2_DATA].uncopied_counter);
0FCEC:  MOVLW  94
0FCEE:  MOVWF  FF6
0FCF0:  MOVLW  17
0FCF2:  MOVWF  FF7
0FCF4:  MOVLW  00
0FCF6:  MOVWF  FF8
0FCF8:  MOVLW  0F
0FCFA:  MOVLB  A
0FCFC:  MOVWF  x4E
0FCFE:  MOVLB  0
0FD00:  CALL   2334
0FD04:  MOVLW  02
0FD06:  MOVLB  1
0FD08:  MOVWF  xC8
0FD0A:  MOVLB  0
0FD0C:  MOVLW  30
0FD0E:  BTFSS  FA6.6
0FD10:  GOTO   FD0E
0FD14:  MOVLB  E
0FD16:  MOVWF  xF9
0FD18:  MOVLB  1
0FD1A:  DECFSZ xC8,F
0FD1C:  BRA    FD22
0FD1E:  BRA    FD28
0FD20:  MOVLB  0
0FD22:  MOVLB  0
0FD24:  GOTO   FD0C
0FD28:  MOVFF  162,9E8
0FD2C:  MOVLW  37
0FD2E:  MOVLB  9
0FD30:  MOVWF  xE9
0FD32:  MOVLB  0
0FD34:  CALL   2564
0FD38:  MOVLW  0D
0FD3A:  BTFSS  FA6.6
0FD3C:  GOTO   FD3A
0FD40:  MOVLB  E
0FD42:  MOVWF  xF9
0FD44:  MOVLW  0A
0FD46:  MOVLB  0
0FD48:  BTFSS  FA6.6
0FD4A:  GOTO   FD48
0FD4E:  MOVLB  E
0FD50:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0FD52:  MOVLW  01
0FD54:  MOVLB  1
0FD56:  MOVWF  xE0
0FD58:  MOVLW  BC
0FD5A:  MOVWF  xDF
0FD5C:  MOVLB  0
0FD5E:  CALL   AE5E
.................... 
....................    misf_update_address_area();
0FD62:  CALL   507E
0FD66:  GOTO   103E4 (RETURN)
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... }
.................... 
.................... 
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS IV\r\n");
*
0B0BE:  MOVLW  AA
0B0C0:  MOVWF  FF6
0B0C2:  MOVLW  17
0B0C4:  MOVWF  FF7
0B0C6:  MOVLW  00
0B0C8:  MOVWF  FF8
0B0CA:  CALL   22FE
....................    meas_iv_param_t cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0B0CE:  MOVFF  1B0,1E6
0B0D2:  MOVFF  1AF,1E5
0B0D6:  CALL   8282
0B0DA:  MOVFF  02,03
0B0DE:  MOVF   01,W
0B0E0:  MOVWF  FE1
0B0E2:  MOVFF  03,FE2
0B0E6:  MOVLW  01
0B0E8:  MOVWF  FEA
0B0EA:  MOVLW  B1
0B0EC:  MOVWF  FE9
0B0EE:  MOVLW  0B
0B0F0:  MOVWF  01
0B0F2:  MOVFF  FE6,FEE
0B0F6:  DECFSZ 01,F
0B0F8:  GOTO   B0F2
....................    print_meas_iv_cmd(&cmd); // Print the command parameters for debugging
0B0FC:  MOVLW  01
0B0FE:  MOVLB  1
0B100:  MOVWF  xE0
0B102:  MOVLW  B1
0B104:  MOVWF  xDF
0B106:  MOVLB  0
0B108:  GOTO   8F9E
....................    piclog_make(cmd.id, PICLOG_PARAM_START); // Log the start of the command execution
0B10C:  MOVFF  1B1,20F
0B110:  MOVLB  2
0B112:  CLRF   x10
0B114:  MOVLB  0
0B116:  CALL   510C
.................... 
....................    unsigned int32 start_time = get_current_sec();
....................    unsigned int32 current_sec = 0;
....................    unsigned int16 time_ms = 0;
....................    unsigned int8 counter = 0;
0B11A:  CALL   3C38
0B11E:  MOVFF  03,1BF
0B122:  MOVFF  02,1BE
0B126:  MOVFF  01,1BD
0B12A:  MOVFF  00,1BC
0B12E:  MOVLB  1
0B130:  CLRF   xC3
0B132:  CLRF   xC2
0B134:  CLRF   xC1
0B136:  CLRF   xC0
0B138:  CLRF   xC5
0B13A:  CLRF   xC4
0B13C:  CLRF   xC6
0B13E:  MOVLB  0
....................    do
....................    {
....................       sweep(cmd.log_threshold, cmd.sweep_limit, cmd.pd_threshold); 
0B140:  MOVFF  1B9,1E0
0B144:  MOVFF  1B8,1DF
0B148:  MOVFF  1BB,1E2
0B14C:  MOVFF  1BA,1E1
0B150:  MOVFF  1B5,1E4
0B154:  MOVFF  1B4,1E3
0B158:  CALL   9CB2
....................       if (cmd.interval > 0){
0B15C:  MOVLB  1
0B15E:  MOVF   xB2,F
0B160:  BTFSC  FD8.2
0B162:  BRA    B16A
0B164:  MOVLB  0
0B166:  GOTO   B17C
0B16A:  MOVLB  0
0B16C:  MOVLB  1
0B16E:  MOVF   xB3,F
0B170:  BTFSS  FD8.2
0B172:  BRA    B17A
0B174:  MOVLB  0
0B176:  GOTO   B1A4
0B17A:  MOVLB  0
....................          delay_ms(cmd.interval);
0B17C:  MOVFF  1B3,1DF
0B180:  MOVLB  1
0B182:  INCF   xDF,F
0B184:  MOVLB  0
0B186:  MOVLB  1
0B188:  DECFSZ xDF,F
0B18A:  BRA    B190
0B18C:  MOVLB  0
0B18E:  BRA    B19C
0B190:  MOVLB  B
0B192:  SETF   x03
0B194:  MOVLB  0
0B196:  CALL   22D0
0B19A:  BRA    B186
0B19C:  MOVFF  1B2,B03
0B1A0:  CALL   22D0
....................       }
....................       check_and_respond_to_boss(); // Check for boss commands during the wait period
0B1A4:  GOTO   AE1E
....................    } while (get_current_sec() - start_time < cmd.meas_time);
0B1A8:  CALL   3C38
0B1AC:  MOVFF  03,1E2
0B1B0:  MOVFF  02,1E1
0B1B4:  MOVFF  01,1E0
0B1B8:  MOVFF  00,1DF
0B1BC:  MOVLB  1
0B1BE:  MOVF   xBC,W
0B1C0:  SUBWF  xDF,F
0B1C2:  MOVF   xBD,W
0B1C4:  SUBWFB xE0,F
0B1C6:  MOVF   xBE,W
0B1C8:  SUBWFB xE1,F
0B1CA:  MOVF   xBF,W
0B1CC:  SUBWFB xE2,F
0B1CE:  MOVF   xE2,F
0B1D0:  BTFSC  FD8.2
0B1D2:  BRA    B1DA
0B1D4:  MOVLB  0
0B1D6:  GOTO   B216
0B1DA:  MOVLB  0
0B1DC:  MOVLB  1
0B1DE:  MOVF   xE1,F
0B1E0:  BTFSC  FD8.2
0B1E2:  BRA    B1EA
0B1E4:  MOVLB  0
0B1E6:  GOTO   B216
0B1EA:  MOVLB  0
0B1EC:  MOVLB  1
0B1EE:  MOVF   xE0,W
0B1F0:  SUBWF  xB7,W
0B1F2:  BTFSC  FD8.0
0B1F4:  BRA    B1FC
0B1F6:  MOVLB  0
0B1F8:  GOTO   B216
0B1FC:  MOVLB  0
0B1FE:  BTFSS  FD8.2
0B200:  GOTO   B140
0B204:  MOVLB  1
0B206:  MOVF   xB6,W
0B208:  SUBWF  xDF,W
0B20A:  BTFSC  FD8.0
0B20C:  BRA    B214
0B20E:  MOVLB  0
0B210:  GOTO   B140
0B214:  MOVLB  0
....................    misf_update_address_area();
0B216:  CALL   507E
....................    piclog_make(cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
0B21A:  MOVFF  1B1,20F
0B21E:  MOVLB  2
0B220:  SETF   x10
0B222:  MOVLB  0
0B224:  CALL   510C
.................... 
.................... 
.................... 
....................    FlashOperationStruct data = {0};
0B228:  MOVLB  1
0B22A:  CLRF   xC7
0B22C:  CLRF   xC8
0B22E:  CLRF   xC9
0B230:  CLRF   xCA
0B232:  CLRF   xCB
0B234:  CLRF   xCC
0B236:  CLRF   xCD
0B238:  CLRF   xCE
0B23A:  CLRF   xCF
0B23C:  CLRF   xD0
0B23E:  CLRF   xD1
0B240:  CLRF   xD2
....................    data.func_type = ENUM_SMF_WRITE;
0B242:  CLRF   xC8
....................    data.mission_id = CIGS_IV1_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0B244:  MOVLW  04
0B246:  MOVWF  xC7
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0B248:  MOVLW  02
0B24A:  MOVWF  xC9
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0B24C:  BCF    xCA.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0B24E:  MOVLW  C0
0B250:  MOVWF  FF6
0B252:  MOVLW  17
0B254:  MOVWF  FF7
0B256:  MOVLW  00
0B258:  MOVWF  FF8
0B25A:  MOVLB  0
0B25C:  CALL   22FE
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0B260:  MOVLW  D2
0B262:  MOVWF  FF6
0B264:  MOVLW  17
0B266:  MOVWF  FF7
0B268:  MOVLW  00
0B26A:  MOVWF  FF8
0B26C:  MOVLW  0F
0B26E:  MOVLB  A
0B270:  MOVWF  x4E
0B272:  MOVLB  0
0B274:  CALL   2334
0B278:  MOVFF  1C7,9E8
0B27C:  MOVLW  37
0B27E:  MOVLB  9
0B280:  MOVWF  xE9
0B282:  MOVLB  0
0B284:  CALL   2564
0B288:  MOVLW  0D
0B28A:  BTFSS  FA6.6
0B28C:  GOTO   B28A
0B290:  MOVLB  E
0B292:  MOVWF  xF9
0B294:  MOVLW  0A
0B296:  MOVLB  0
0B298:  BTFSS  FA6.6
0B29A:  GOTO   B298
0B29E:  MOVLB  E
0B2A0:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0B2A2:  MOVLW  E8
0B2A4:  MOVWF  FF6
0B2A6:  MOVLW  17
0B2A8:  MOVWF  FF7
0B2AA:  MOVLW  00
0B2AC:  MOVWF  FF8
0B2AE:  MOVLW  0F
0B2B0:  MOVLB  A
0B2B2:  MOVWF  x4E
0B2B4:  MOVLB  0
0B2B6:  CALL   2334
0B2BA:  MOVFF  1C8,9E8
0B2BE:  MOVLW  37
0B2C0:  MOVLB  9
0B2C2:  MOVWF  xE9
0B2C4:  MOVLB  0
0B2C6:  CALL   2564
0B2CA:  MOVLW  0D
0B2CC:  BTFSS  FA6.6
0B2CE:  GOTO   B2CC
0B2D2:  MOVLB  E
0B2D4:  MOVWF  xF9
0B2D6:  MOVLW  0A
0B2D8:  MOVLB  0
0B2DA:  BTFSS  FA6.6
0B2DC:  GOTO   B2DA
0B2E0:  MOVLB  E
0B2E2:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0B2E4:  MOVLW  FE
0B2E6:  MOVWF  FF6
0B2E8:  MOVLW  17
0B2EA:  MOVWF  FF7
0B2EC:  MOVLW  00
0B2EE:  MOVWF  FF8
0B2F0:  MOVLW  0F
0B2F2:  MOVLB  A
0B2F4:  MOVWF  x4E
0B2F6:  MOVLB  0
0B2F8:  CALL   2334
0B2FC:  MOVFF  1C9,9E8
0B300:  MOVLW  37
0B302:  MOVLB  9
0B304:  MOVWF  xE9
0B306:  MOVLB  0
0B308:  CALL   2564
0B30C:  MOVLW  0D
0B30E:  BTFSS  FA6.6
0B310:  GOTO   B30E
0B314:  MOVLB  E
0B316:  MOVWF  xF9
0B318:  MOVLW  0A
0B31A:  MOVLB  0
0B31C:  BTFSS  FA6.6
0B31E:  GOTO   B31C
0B322:  MOVLB  E
0B324:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0B326:  MOVLW  00
0B328:  MOVLB  1
0B32A:  BTFSC  xCA.0
0B32C:  MOVLW  01
0B32E:  MOVWF  xDF
0B330:  MOVLW  14
0B332:  MOVWF  FF6
0B334:  MOVLW  18
0B336:  MOVWF  FF7
0B338:  MOVLW  00
0B33A:  MOVWF  FF8
0B33C:  MOVLW  0F
0B33E:  MOVLB  A
0B340:  MOVWF  x4E
0B342:  MOVLB  0
0B344:  CALL   2334
0B348:  MOVFF  1DF,9E8
0B34C:  MOVLW  37
0B34E:  MOVLB  9
0B350:  MOVWF  xE9
0B352:  MOVLB  0
0B354:  CALL   2564
0B358:  MOVLW  0D
0B35A:  BTFSS  FA6.6
0B35C:  GOTO   B35A
0B360:  MOVLB  E
0B362:  MOVWF  xF9
0B364:  MOVLW  0A
0B366:  MOVLB  0
0B368:  BTFSS  FA6.6
0B36A:  GOTO   B368
0B36E:  MOVLB  E
0B370:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0B372:  MOVLW  2A
0B374:  MOVWF  FF6
0B376:  MOVLW  18
0B378:  MOVWF  FF7
0B37A:  MOVLW  00
0B37C:  MOVWF  FF8
0B37E:  MOVLW  0F
0B380:  MOVLB  A
0B382:  MOVWF  x4E
0B384:  MOVLB  0
0B386:  CALL   2334
0B38A:  MOVLW  02
0B38C:  MOVLB  1
0B38E:  MOVWF  xDF
0B390:  MOVLB  0
0B392:  MOVLW  30
0B394:  BTFSS  FA6.6
0B396:  GOTO   B394
0B39A:  MOVLB  E
0B39C:  MOVWF  xF9
0B39E:  MOVLB  1
0B3A0:  DECFSZ xDF,F
0B3A2:  BRA    B3A8
0B3A4:  BRA    B3AE
0B3A6:  MOVLB  0
0B3A8:  MOVLB  0
0B3AA:  GOTO   B392
0B3AE:  MOVFF  1CB,9E8
0B3B2:  MOVLW  37
0B3B4:  MOVLB  9
0B3B6:  MOVWF  xE9
0B3B8:  MOVLB  0
0B3BA:  CALL   2564
0B3BE:  MOVLW  0D
0B3C0:  BTFSS  FA6.6
0B3C2:  GOTO   B3C0
0B3C6:  MOVLB  E
0B3C8:  MOVWF  xF9
0B3CA:  MOVLW  0A
0B3CC:  MOVLB  0
0B3CE:  BTFSS  FA6.6
0B3D0:  GOTO   B3CE
0B3D4:  MOVLB  E
0B3D6:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV1_DATA].uncopied_counter);
0B3D8:  MOVLW  40
0B3DA:  MOVWF  FF6
0B3DC:  MOVLW  18
0B3DE:  MOVWF  FF7
0B3E0:  MOVLW  00
0B3E2:  MOVWF  FF8
0B3E4:  MOVLW  0F
0B3E6:  MOVLB  A
0B3E8:  MOVWF  x4E
0B3EA:  MOVLB  0
0B3EC:  CALL   2334
0B3F0:  MOVLW  02
0B3F2:  MOVLB  1
0B3F4:  MOVWF  xDF
0B3F6:  MOVLB  0
0B3F8:  MOVLW  30
0B3FA:  BTFSS  FA6.6
0B3FC:  GOTO   B3FA
0B400:  MOVLB  E
0B402:  MOVWF  xF9
0B404:  MOVLB  1
0B406:  DECFSZ xDF,F
0B408:  BRA    B40E
0B40A:  BRA    B414
0B40C:  MOVLB  0
0B40E:  MOVLB  0
0B410:  GOTO   B3F8
0B414:  MOVFF  14E,9E8
0B418:  MOVLW  37
0B41A:  MOVLB  9
0B41C:  MOVWF  xE9
0B41E:  MOVLB  0
0B420:  CALL   2564
0B424:  MOVLW  0D
0B426:  BTFSS  FA6.6
0B428:  GOTO   B426
0B42C:  MOVLB  E
0B42E:  MOVWF  xF9
0B430:  MOVLW  0A
0B432:  MOVLB  0
0B434:  BTFSS  FA6.6
0B436:  GOTO   B434
0B43A:  MOVLB  E
0B43C:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0B43E:  MOVLW  01
0B440:  MOVLB  1
0B442:  MOVWF  xE0
0B444:  MOVLW  C7
0B446:  MOVWF  xDF
0B448:  MOVLB  0
0B44A:  CALL   AE5E
.................... 
.................... 
....................    data.func_type = ENUM_SMF_WRITE;
0B44E:  MOVLB  1
0B450:  CLRF   xC8
....................    data.mission_id = CIGS_IV2_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0B452:  MOVLW  06
0B454:  MOVWF  xC7
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0B456:  MOVLW  02
0B458:  MOVWF  xC9
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0B45A:  BCF    xCA.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0B45C:  MOVLW  56
0B45E:  MOVWF  FF6
0B460:  MOVLW  18
0B462:  MOVWF  FF7
0B464:  MOVLW  00
0B466:  MOVWF  FF8
0B468:  MOVLB  0
0B46A:  CALL   22FE
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0B46E:  MOVLW  68
0B470:  MOVWF  FF6
0B472:  MOVLW  18
0B474:  MOVWF  FF7
0B476:  MOVLW  00
0B478:  MOVWF  FF8
0B47A:  MOVLW  0F
0B47C:  MOVLB  A
0B47E:  MOVWF  x4E
0B480:  MOVLB  0
0B482:  CALL   2334
0B486:  MOVFF  1C7,9E8
0B48A:  MOVLW  37
0B48C:  MOVLB  9
0B48E:  MOVWF  xE9
0B490:  MOVLB  0
0B492:  CALL   2564
0B496:  MOVLW  0D
0B498:  BTFSS  FA6.6
0B49A:  GOTO   B498
0B49E:  MOVLB  E
0B4A0:  MOVWF  xF9
0B4A2:  MOVLW  0A
0B4A4:  MOVLB  0
0B4A6:  BTFSS  FA6.6
0B4A8:  GOTO   B4A6
0B4AC:  MOVLB  E
0B4AE:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0B4B0:  MOVLW  7E
0B4B2:  MOVWF  FF6
0B4B4:  MOVLW  18
0B4B6:  MOVWF  FF7
0B4B8:  MOVLW  00
0B4BA:  MOVWF  FF8
0B4BC:  MOVLW  0F
0B4BE:  MOVLB  A
0B4C0:  MOVWF  x4E
0B4C2:  MOVLB  0
0B4C4:  CALL   2334
0B4C8:  MOVFF  1C8,9E8
0B4CC:  MOVLW  37
0B4CE:  MOVLB  9
0B4D0:  MOVWF  xE9
0B4D2:  MOVLB  0
0B4D4:  CALL   2564
0B4D8:  MOVLW  0D
0B4DA:  BTFSS  FA6.6
0B4DC:  GOTO   B4DA
0B4E0:  MOVLB  E
0B4E2:  MOVWF  xF9
0B4E4:  MOVLW  0A
0B4E6:  MOVLB  0
0B4E8:  BTFSS  FA6.6
0B4EA:  GOTO   B4E8
0B4EE:  MOVLB  E
0B4F0:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0B4F2:  MOVLW  94
0B4F4:  MOVWF  FF6
0B4F6:  MOVLW  18
0B4F8:  MOVWF  FF7
0B4FA:  MOVLW  00
0B4FC:  MOVWF  FF8
0B4FE:  MOVLW  0F
0B500:  MOVLB  A
0B502:  MOVWF  x4E
0B504:  MOVLB  0
0B506:  CALL   2334
0B50A:  MOVFF  1C9,9E8
0B50E:  MOVLW  37
0B510:  MOVLB  9
0B512:  MOVWF  xE9
0B514:  MOVLB  0
0B516:  CALL   2564
0B51A:  MOVLW  0D
0B51C:  BTFSS  FA6.6
0B51E:  GOTO   B51C
0B522:  MOVLB  E
0B524:  MOVWF  xF9
0B526:  MOVLW  0A
0B528:  MOVLB  0
0B52A:  BTFSS  FA6.6
0B52C:  GOTO   B52A
0B530:  MOVLB  E
0B532:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0B534:  MOVLW  00
0B536:  MOVLB  1
0B538:  BTFSC  xCA.0
0B53A:  MOVLW  01
0B53C:  MOVWF  xDF
0B53E:  MOVLW  AA
0B540:  MOVWF  FF6
0B542:  MOVLW  18
0B544:  MOVWF  FF7
0B546:  MOVLW  00
0B548:  MOVWF  FF8
0B54A:  MOVLW  0F
0B54C:  MOVLB  A
0B54E:  MOVWF  x4E
0B550:  MOVLB  0
0B552:  CALL   2334
0B556:  MOVFF  1DF,9E8
0B55A:  MOVLW  37
0B55C:  MOVLB  9
0B55E:  MOVWF  xE9
0B560:  MOVLB  0
0B562:  CALL   2564
0B566:  MOVLW  0D
0B568:  BTFSS  FA6.6
0B56A:  GOTO   B568
0B56E:  MOVLB  E
0B570:  MOVWF  xF9
0B572:  MOVLW  0A
0B574:  MOVLB  0
0B576:  BTFSS  FA6.6
0B578:  GOTO   B576
0B57C:  MOVLB  E
0B57E:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0B580:  MOVLW  C0
0B582:  MOVWF  FF6
0B584:  MOVLW  18
0B586:  MOVWF  FF7
0B588:  MOVLW  00
0B58A:  MOVWF  FF8
0B58C:  MOVLW  0F
0B58E:  MOVLB  A
0B590:  MOVWF  x4E
0B592:  MOVLB  0
0B594:  CALL   2334
0B598:  MOVLW  02
0B59A:  MOVLB  1
0B59C:  MOVWF  xDF
0B59E:  MOVLB  0
0B5A0:  MOVLW  30
0B5A2:  BTFSS  FA6.6
0B5A4:  GOTO   B5A2
0B5A8:  MOVLB  E
0B5AA:  MOVWF  xF9
0B5AC:  MOVLB  1
0B5AE:  DECFSZ xDF,F
0B5B0:  BRA    B5B6
0B5B2:  BRA    B5BC
0B5B4:  MOVLB  0
0B5B6:  MOVLB  0
0B5B8:  GOTO   B5A0
0B5BC:  MOVFF  1CB,9E8
0B5C0:  MOVLW  37
0B5C2:  MOVLB  9
0B5C4:  MOVWF  xE9
0B5C6:  MOVLB  0
0B5C8:  CALL   2564
0B5CC:  MOVLW  0D
0B5CE:  BTFSS  FA6.6
0B5D0:  GOTO   B5CE
0B5D4:  MOVLB  E
0B5D6:  MOVWF  xF9
0B5D8:  MOVLW  0A
0B5DA:  MOVLB  0
0B5DC:  BTFSS  FA6.6
0B5DE:  GOTO   B5DC
0B5E2:  MOVLB  E
0B5E4:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV2_DATA].uncopied_counter);
0B5E6:  MOVLW  D6
0B5E8:  MOVWF  FF6
0B5EA:  MOVLW  18
0B5EC:  MOVWF  FF7
0B5EE:  MOVLW  00
0B5F0:  MOVWF  FF8
0B5F2:  MOVLW  0F
0B5F4:  MOVLB  A
0B5F6:  MOVWF  x4E
0B5F8:  MOVLB  0
0B5FA:  CALL   2334
0B5FE:  MOVLW  02
0B600:  MOVLB  1
0B602:  MOVWF  xDF
0B604:  MOVLB  0
0B606:  MOVLW  30
0B608:  BTFSS  FA6.6
0B60A:  GOTO   B608
0B60E:  MOVLB  E
0B610:  MOVWF  xF9
0B612:  MOVLB  1
0B614:  DECFSZ xDF,F
0B616:  BRA    B61C
0B618:  BRA    B622
0B61A:  MOVLB  0
0B61C:  MOVLB  0
0B61E:  GOTO   B606
0B622:  MOVFF  162,9E8
0B626:  MOVLW  37
0B628:  MOVLB  9
0B62A:  MOVWF  xE9
0B62C:  MOVLB  0
0B62E:  CALL   2564
0B632:  MOVLW  0D
0B634:  BTFSS  FA6.6
0B636:  GOTO   B634
0B63A:  MOVLB  E
0B63C:  MOVWF  xF9
0B63E:  MOVLW  0A
0B640:  MOVLB  0
0B642:  BTFSS  FA6.6
0B644:  GOTO   B642
0B648:  MOVLB  E
0B64A:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0B64C:  MOVLW  01
0B64E:  MOVLB  1
0B650:  MOVWF  xE0
0B652:  MOVLW  C7
0B654:  MOVWF  xDF
0B656:  MOVLB  0
0B658:  CALL   AE5E
.................... 
.................... 
....................    FlashOperationStruct piclog = {0};
0B65C:  MOVLB  1
0B65E:  CLRF   xD3
0B660:  CLRF   xD4
0B662:  CLRF   xD5
0B664:  CLRF   xD6
0B666:  CLRF   xD7
0B668:  CLRF   xD8
0B66A:  CLRF   xD9
0B66C:  CLRF   xDA
0B66E:  CLRF   xDB
0B670:  CLRF   xDC
0B672:  CLRF   xDD
0B674:  CLRF   xDE
....................    piclog.func_type = ENUM_SMF_WRITE;
0B676:  CLRF   xD4
....................    piclog.mission_id = FLASH_ID_PICLOG; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0B678:  MOVLW  01
0B67A:  MOVWF  xD3
....................    piclog.write_mode = SMF_WRITE_CIRCULAR;
0B67C:  MOVLW  02
0B67E:  MOVWF  xD5
....................    piclog.source_type = SOURCE_MISF_UNCOPIED;
0B680:  BCF    xD6.0
.................... 
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0B682:  MOVLW  EC
0B684:  MOVWF  FF6
0B686:  MOVLW  18
0B688:  MOVWF  FF7
0B68A:  MOVLW  00
0B68C:  MOVWF  FF8
0B68E:  MOVLB  0
0B690:  CALL   22FE
....................    fprintf(PC, "\tMission ID:   %02X\r\n", piclog.mission_id);
0B694:  MOVLW  FE
0B696:  MOVWF  FF6
0B698:  MOVLW  18
0B69A:  MOVWF  FF7
0B69C:  MOVLW  00
0B69E:  MOVWF  FF8
0B6A0:  MOVLW  0F
0B6A2:  MOVLB  A
0B6A4:  MOVWF  x4E
0B6A6:  MOVLB  0
0B6A8:  CALL   2334
0B6AC:  MOVFF  1D3,9E8
0B6B0:  MOVLW  37
0B6B2:  MOVLB  9
0B6B4:  MOVWF  xE9
0B6B6:  MOVLB  0
0B6B8:  CALL   2564
0B6BC:  MOVLW  0D
0B6BE:  BTFSS  FA6.6
0B6C0:  GOTO   B6BE
0B6C4:  MOVLB  E
0B6C6:  MOVWF  xF9
0B6C8:  MOVLW  0A
0B6CA:  MOVLB  0
0B6CC:  BTFSS  FA6.6
0B6CE:  GOTO   B6CC
0B6D2:  MOVLB  E
0B6D4:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", piclog.func_type);
0B6D6:  MOVLW  14
0B6D8:  MOVWF  FF6
0B6DA:  MOVLW  19
0B6DC:  MOVWF  FF7
0B6DE:  MOVLW  00
0B6E0:  MOVWF  FF8
0B6E2:  MOVLW  0F
0B6E4:  MOVLB  A
0B6E6:  MOVWF  x4E
0B6E8:  MOVLB  0
0B6EA:  CALL   2334
0B6EE:  MOVFF  1D4,9E8
0B6F2:  MOVLW  37
0B6F4:  MOVLB  9
0B6F6:  MOVWF  xE9
0B6F8:  MOVLB  0
0B6FA:  CALL   2564
0B6FE:  MOVLW  0D
0B700:  BTFSS  FA6.6
0B702:  GOTO   B700
0B706:  MOVLB  E
0B708:  MOVWF  xF9
0B70A:  MOVLW  0A
0B70C:  MOVLB  0
0B70E:  BTFSS  FA6.6
0B710:  GOTO   B70E
0B714:  MOVLB  E
0B716:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", piclog.write_mode);
0B718:  MOVLW  2A
0B71A:  MOVWF  FF6
0B71C:  MOVLW  19
0B71E:  MOVWF  FF7
0B720:  MOVLW  00
0B722:  MOVWF  FF8
0B724:  MOVLW  0F
0B726:  MOVLB  A
0B728:  MOVWF  x4E
0B72A:  MOVLB  0
0B72C:  CALL   2334
0B730:  MOVFF  1D5,9E8
0B734:  MOVLW  37
0B736:  MOVLB  9
0B738:  MOVWF  xE9
0B73A:  MOVLB  0
0B73C:  CALL   2564
0B740:  MOVLW  0D
0B742:  BTFSS  FA6.6
0B744:  GOTO   B742
0B748:  MOVLB  E
0B74A:  MOVWF  xF9
0B74C:  MOVLW  0A
0B74E:  MOVLB  0
0B750:  BTFSS  FA6.6
0B752:  GOTO   B750
0B756:  MOVLB  E
0B758:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", piclog.source_type);
0B75A:  MOVLW  00
0B75C:  MOVLB  1
0B75E:  BTFSC  xD6.0
0B760:  MOVLW  01
0B762:  MOVWF  xDF
0B764:  MOVLW  40
0B766:  MOVWF  FF6
0B768:  MOVLW  19
0B76A:  MOVWF  FF7
0B76C:  MOVLW  00
0B76E:  MOVWF  FF8
0B770:  MOVLW  0F
0B772:  MOVLB  A
0B774:  MOVWF  x4E
0B776:  MOVLB  0
0B778:  CALL   2334
0B77C:  MOVFF  1DF,9E8
0B780:  MOVLW  37
0B782:  MOVLB  9
0B784:  MOVWF  xE9
0B786:  MOVLB  0
0B788:  CALL   2564
0B78C:  MOVLW  0D
0B78E:  BTFSS  FA6.6
0B790:  GOTO   B78E
0B794:  MOVLB  E
0B796:  MOVWF  xF9
0B798:  MOVLW  0A
0B79A:  MOVLB  0
0B79C:  BTFSS  FA6.6
0B79E:  GOTO   B79C
0B7A2:  MOVLB  E
0B7A4:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", piclog.misf_start_addr);
0B7A6:  MOVLW  56
0B7A8:  MOVWF  FF6
0B7AA:  MOVLW  19
0B7AC:  MOVWF  FF7
0B7AE:  MOVLW  00
0B7B0:  MOVWF  FF8
0B7B2:  MOVLW  0F
0B7B4:  MOVLB  A
0B7B6:  MOVWF  x4E
0B7B8:  MOVLB  0
0B7BA:  CALL   2334
0B7BE:  MOVLW  02
0B7C0:  MOVLB  1
0B7C2:  MOVWF  xDF
0B7C4:  MOVLB  0
0B7C6:  MOVLW  30
0B7C8:  BTFSS  FA6.6
0B7CA:  GOTO   B7C8
0B7CE:  MOVLB  E
0B7D0:  MOVWF  xF9
0B7D2:  MOVLB  1
0B7D4:  DECFSZ xDF,F
0B7D6:  BRA    B7DC
0B7D8:  BRA    B7E2
0B7DA:  MOVLB  0
0B7DC:  MOVLB  0
0B7DE:  GOTO   B7C6
0B7E2:  MOVFF  1D7,9E8
0B7E6:  MOVLW  37
0B7E8:  MOVLB  9
0B7EA:  MOVWF  xE9
0B7EC:  MOVLB  0
0B7EE:  CALL   2564
0B7F2:  MOVLW  0D
0B7F4:  BTFSS  FA6.6
0B7F6:  GOTO   B7F4
0B7FA:  MOVLB  E
0B7FC:  MOVWF  xF9
0B7FE:  MOVLW  0A
0B800:  MOVLB  0
0B802:  BTFSS  FA6.6
0B804:  GOTO   B802
0B808:  MOVLB  E
0B80A:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[FLASH_ID_PICLOG].uncopied_counter);
0B80C:  MOVLW  6C
0B80E:  MOVWF  FF6
0B810:  MOVLW  19
0B812:  MOVWF  FF7
0B814:  MOVLW  00
0B816:  MOVWF  FF8
0B818:  MOVLW  0F
0B81A:  MOVLB  A
0B81C:  MOVWF  x4E
0B81E:  MOVLB  0
0B820:  CALL   2334
0B824:  MOVLW  02
0B826:  MOVLB  1
0B828:  MOVWF  xDF
0B82A:  MOVLB  0
0B82C:  MOVLW  30
0B82E:  BTFSS  FA6.6
0B830:  GOTO   B82E
0B834:  MOVLB  E
0B836:  MOVWF  xF9
0B838:  MOVLB  1
0B83A:  DECFSZ xDF,F
0B83C:  BRA    B842
0B83E:  BRA    B848
0B840:  MOVLB  0
0B842:  MOVLB  0
0B844:  GOTO   B82C
0B848:  MOVFF  130,9E8
0B84C:  MOVLW  37
0B84E:  MOVLB  9
0B850:  MOVWF  xE9
0B852:  MOVLB  0
0B854:  CALL   2564
0B858:  MOVLW  0D
0B85A:  BTFSS  FA6.6
0B85C:  GOTO   B85A
0B860:  MOVLB  E
0B862:  MOVWF  xF9
0B864:  MOVLW  0A
0B866:  MOVLB  0
0B868:  BTFSS  FA6.6
0B86A:  GOTO   B868
0B86E:  MOVLB  E
0B870:  MOVWF  xF9
....................    enqueue_flash_operation(&piclog); // SMFへのデータコピーを実行する
0B872:  MOVLW  01
0B874:  MOVLB  1
0B876:  MOVWF  xE0
0B878:  MOVLW  D3
0B87A:  MOVWF  xDF
0B87C:  MOVLB  0
0B87E:  CALL   AE5E
....................    fprintf(PC, "End MODE MEAS IV mission\r\n");
0B882:  MOVLW  82
0B884:  MOVWF  FF6
0B886:  MOVLW  19
0B888:  MOVWF  FF7
0B88A:  MOVLW  00
0B88C:  MOVWF  FF8
0B88E:  CALL   22FE
0B892:  GOTO   10282 (RETURN)
.................... }
.................... 
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE IV DEBUG\r\n");
*
0CE0C:  MOVLW  9E
0CE0E:  MOVWF  FF6
0CE10:  MOVLW  19
0CE12:  MOVWF  FF7
0CE14:  MOVLW  00
0CE16:  MOVWF  FF8
0CE18:  CALL   22FE
.................... 
....................    MEAS_IV_CMD cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0CE1C:  MOVFF  1B0,1E6
0CE20:  MOVFF  1AF,1E5
0CE24:  CALL   8282
0CE28:  MOVFF  02,03
0CE2C:  MOVF   01,W
0CE2E:  MOVWF  FE1
0CE30:  MOVFF  03,FE2
0CE34:  MOVLW  01
0CE36:  MOVWF  FEA
0CE38:  MOVLW  B1
0CE3A:  MOVWF  FE9
0CE3C:  MOVLW  0C
0CE3E:  MOVWF  01
0CE40:  MOVFF  FE6,FEE
0CE44:  DECFSZ 01,F
0CE46:  GOTO   CE40
....................    
....................    fprintf(PC, "\tID: %02X\r\n", cmd.id);
0CE4A:  MOVLW  B4
0CE4C:  MOVWF  FF6
0CE4E:  MOVLW  19
0CE50:  MOVWF  FF7
0CE52:  MOVLW  00
0CE54:  MOVWF  FF8
0CE56:  MOVLW  05
0CE58:  MOVLB  A
0CE5A:  MOVWF  x4E
0CE5C:  MOVLB  0
0CE5E:  CALL   2334
0CE62:  MOVFF  1B1,9E8
0CE66:  MOVLW  37
0CE68:  MOVLB  9
0CE6A:  MOVWF  xE9
0CE6C:  MOVLB  0
0CE6E:  CALL   2564
0CE72:  MOVLW  0D
0CE74:  BTFSS  FA6.6
0CE76:  GOTO   CE74
0CE7A:  MOVLB  E
0CE7C:  MOVWF  xF9
0CE7E:  MOVLW  0A
0CE80:  MOVLB  0
0CE82:  BTFSS  FA6.6
0CE84:  GOTO   CE82
0CE88:  MOVLB  E
0CE8A:  MOVWF  xF9
....................    fprintf(PC, "\tSleepTime:        0x%04X\r\n", cmd.sleep_time);
0CE8C:  MOVLW  C0
0CE8E:  MOVWF  FF6
0CE90:  MOVLW  19
0CE92:  MOVWF  FF7
0CE94:  MOVLW  00
0CE96:  MOVWF  FF8
0CE98:  MOVLW  15
0CE9A:  MOVLB  A
0CE9C:  MOVWF  x4E
0CE9E:  MOVLB  0
0CEA0:  CALL   2334
0CEA4:  MOVLW  02
0CEA6:  MOVLB  1
0CEA8:  MOVWF  xC5
0CEAA:  MOVLB  0
0CEAC:  MOVLW  30
0CEAE:  BTFSS  FA6.6
0CEB0:  GOTO   CEAE
0CEB4:  MOVLB  E
0CEB6:  MOVWF  xF9
0CEB8:  MOVLB  1
0CEBA:  DECFSZ xC5,F
0CEBC:  BRA    CEC2
0CEBE:  BRA    CEC8
0CEC0:  MOVLB  0
0CEC2:  MOVLB  0
0CEC4:  GOTO   CEAC
0CEC8:  MOVFF  1B2,9E8
0CECC:  MOVLW  37
0CECE:  MOVLB  9
0CED0:  MOVWF  xE9
0CED2:  MOVLB  0
0CED4:  CALL   2564
0CED8:  MOVLW  0D
0CEDA:  BTFSS  FA6.6
0CEDC:  GOTO   CEDA
0CEE0:  MOVLB  E
0CEE2:  MOVWF  xF9
0CEE4:  MOVLW  0A
0CEE6:  MOVLB  0
0CEE8:  BTFSS  FA6.6
0CEEA:  GOTO   CEE8
0CEEE:  MOVLB  E
0CEF0:  MOVWF  xF9
....................    fprintf(PC, "\tLogCurrThreshold: 0x%04X\r\n", cmd.curr_threshold);
0CEF2:  MOVLW  DC
0CEF4:  MOVWF  FF6
0CEF6:  MOVLW  19
0CEF8:  MOVWF  FF7
0CEFA:  MOVLW  00
0CEFC:  MOVWF  FF8
0CEFE:  MOVLW  15
0CF00:  MOVLB  A
0CF02:  MOVWF  x4E
0CF04:  MOVLB  0
0CF06:  CALL   2334
0CF0A:  MOVLW  02
0CF0C:  MOVLB  1
0CF0E:  MOVWF  xC5
0CF10:  MOVLB  0
0CF12:  MOVLW  30
0CF14:  BTFSS  FA6.6
0CF16:  GOTO   CF14
0CF1A:  MOVLB  E
0CF1C:  MOVWF  xF9
0CF1E:  MOVLB  1
0CF20:  DECFSZ xC5,F
0CF22:  BRA    CF28
0CF24:  BRA    CF2E
0CF26:  MOVLB  0
0CF28:  MOVLB  0
0CF2A:  GOTO   CF12
0CF2E:  MOVFF  1B4,9E8
0CF32:  MOVLW  37
0CF34:  MOVLB  9
0CF36:  MOVWF  xE9
0CF38:  MOVLB  0
0CF3A:  CALL   2564
0CF3E:  MOVLW  0D
0CF40:  BTFSS  FA6.6
0CF42:  GOTO   CF40
0CF46:  MOVLB  E
0CF48:  MOVWF  xF9
0CF4A:  MOVLW  0A
0CF4C:  MOVLB  0
0CF4E:  BTFSS  FA6.6
0CF50:  GOTO   CF4E
0CF54:  MOVLB  E
0CF56:  MOVWF  xF9
....................    fprintf(PC, "\tPDThreshold:      0x%04X\r\n", cmd.pd_threshold);
0CF58:  MOVLW  F8
0CF5A:  MOVWF  FF6
0CF5C:  MOVLW  19
0CF5E:  MOVWF  FF7
0CF60:  MOVLW  00
0CF62:  MOVWF  FF8
0CF64:  MOVLW  15
0CF66:  MOVLB  A
0CF68:  MOVWF  x4E
0CF6A:  MOVLB  0
0CF6C:  CALL   2334
0CF70:  MOVLW  02
0CF72:  MOVLB  1
0CF74:  MOVWF  xC5
0CF76:  MOVLB  0
0CF78:  MOVLW  30
0CF7A:  BTFSS  FA6.6
0CF7C:  GOTO   CF7A
0CF80:  MOVLB  E
0CF82:  MOVWF  xF9
0CF84:  MOVLB  1
0CF86:  DECFSZ xC5,F
0CF88:  BRA    CF8E
0CF8A:  BRA    CF94
0CF8C:  MOVLB  0
0CF8E:  MOVLB  0
0CF90:  GOTO   CF78
0CF94:  MOVFF  1B6,9E8
0CF98:  MOVLW  37
0CF9A:  MOVLB  9
0CF9C:  MOVWF  xE9
0CF9E:  MOVLB  0
0CFA0:  CALL   2564
0CFA4:  MOVLW  0D
0CFA6:  BTFSS  FA6.6
0CFA8:  GOTO   CFA6
0CFAC:  MOVLB  E
0CFAE:  MOVWF  xF9
0CFB0:  MOVLW  0A
0CFB2:  MOVLB  0
0CFB4:  BTFSS  FA6.6
0CFB6:  GOTO   CFB4
0CFBA:  MOVLB  E
0CFBC:  MOVWF  xF9
....................    fprintf(PC, "\tCurrentLimit:     0x%04X\r\n", cmd.curr_limit);
0CFBE:  MOVLW  14
0CFC0:  MOVWF  FF6
0CFC2:  MOVLW  1A
0CFC4:  MOVWF  FF7
0CFC6:  MOVLW  00
0CFC8:  MOVWF  FF8
0CFCA:  MOVLW  15
0CFCC:  MOVLB  A
0CFCE:  MOVWF  x4E
0CFD0:  MOVLB  0
0CFD2:  CALL   2334
0CFD6:  MOVLW  02
0CFD8:  MOVLB  1
0CFDA:  MOVWF  xC5
0CFDC:  MOVLB  0
0CFDE:  MOVLW  30
0CFE0:  BTFSS  FA6.6
0CFE2:  GOTO   CFE0
0CFE6:  MOVLB  E
0CFE8:  MOVWF  xF9
0CFEA:  MOVLB  1
0CFEC:  DECFSZ xC5,F
0CFEE:  BRA    CFF4
0CFF0:  BRA    CFFA
0CFF2:  MOVLB  0
0CFF4:  MOVLB  0
0CFF6:  GOTO   CFDE
0CFFA:  MOVFF  1B8,9E8
0CFFE:  MOVLW  37
0D000:  MOVLB  9
0D002:  MOVWF  xE9
0D004:  MOVLB  0
0D006:  CALL   2564
0D00A:  MOVLW  0D
0D00C:  BTFSS  FA6.6
0D00E:  GOTO   D00C
0D012:  MOVLB  E
0D014:  MOVWF  xF9
0D016:  MOVLW  0A
0D018:  MOVLB  0
0D01A:  BTFSS  FA6.6
0D01C:  GOTO   D01A
0D020:  MOVLB  E
0D022:  MOVWF  xF9
....................    fprintf(PC, "\tMeasurementTime:  0x%04X\r\n", cmd.meas_time);
0D024:  MOVLW  30
0D026:  MOVWF  FF6
0D028:  MOVLW  1A
0D02A:  MOVWF  FF7
0D02C:  MOVLW  00
0D02E:  MOVWF  FF8
0D030:  MOVLW  15
0D032:  MOVLB  A
0D034:  MOVWF  x4E
0D036:  MOVLB  0
0D038:  CALL   2334
0D03C:  MOVLW  02
0D03E:  MOVLB  1
0D040:  MOVWF  xC5
0D042:  MOVLB  0
0D044:  MOVLW  30
0D046:  BTFSS  FA6.6
0D048:  GOTO   D046
0D04C:  MOVLB  E
0D04E:  MOVWF  xF9
0D050:  MOVLB  1
0D052:  DECFSZ xC5,F
0D054:  BRA    D05A
0D056:  BRA    D060
0D058:  MOVLB  0
0D05A:  MOVLB  0
0D05C:  GOTO   D044
0D060:  MOVFF  1BA,9E8
0D064:  MOVLW  37
0D066:  MOVLB  9
0D068:  MOVWF  xE9
0D06A:  MOVLB  0
0D06C:  CALL   2564
0D070:  MOVLW  0D
0D072:  BTFSS  FA6.6
0D074:  GOTO   D072
0D078:  MOVLB  E
0D07A:  MOVWF  xF9
0D07C:  MOVLW  0A
0D07E:  MOVLB  0
0D080:  BTFSS  FA6.6
0D082:  GOTO   D080
0D086:  MOVLB  E
0D088:  MOVWF  xF9
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_START); // Log start
0D08A:  MOVFF  1B1,20F
0D08E:  MOVLB  2
0D090:  CLRF   x10
0D092:  MOVLB  0
0D094:  CALL   510C
.................... 
....................    unsigned int32 start_time = get_current_sec();
....................    unsigned int32 current_time = 0;
0D098:  CALL   3C38
0D09C:  MOVFF  03,1C0
0D0A0:  MOVFF  02,1BF
0D0A4:  MOVFF  01,1BE
0D0A8:  MOVFF  00,1BD
0D0AC:  MOVLB  1
0D0AE:  CLRF   xC4
0D0B0:  CLRF   xC3
0D0B2:  CLRF   xC2
0D0B4:  CLRF   xC1
....................    test_sweep(cmd.curr_threshold, cmd.curr_limit);
0D0B6:  MOVFF  1B5,1C6
0D0BA:  MOVFF  1B4,1C5
0D0BE:  MOVFF  1B9,1C8
0D0C2:  MOVFF  1B8,1C7
0D0C6:  MOVLB  0
0D0C8:  GOTO   B896
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_END);
0D0CC:  MOVFF  1B1,20F
0D0D0:  MOVLB  2
0D0D2:  SETF   x10
0D0D4:  MOVLB  0
0D0D6:  CALL   510C
....................    fprintf(PC, "[IVDBG] End MODE IV DEBUG\r\n");
0D0DA:  MOVLW  4C
0D0DC:  MOVWF  FF6
0D0DE:  MOVLW  1A
0D0E0:  MOVWF  FF7
0D0E2:  MOVLW  00
0D0E4:  MOVWF  FF8
0D0E6:  CALL   22FE
0D0EA:  GOTO   10292 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr)
0D0EE:  MOVLB  1
0D0F0:  CLRF   xB2
0D0F2:  MOVLW  64
0D0F4:  MOVWF  xB1
0D0F6:  SETF   xB4
0D0F8:  SETF   xB3
0D0FA:  MOVLB  0
0D0FC:  CALL   3C38
0D100:  MOVFF  03,1B8
0D104:  MOVFF  02,1B7
0D108:  MOVFF  01,1B6
0D10C:  MOVFF  00,1B5
0D110:  MOVLB  1
0D112:  MOVF   xB1,W
0D114:  SUBWF  xB5,W
0D116:  MOVWF  xB9
0D118:  MOVF   xB2,W
0D11A:  SUBWFB xB6,W
0D11C:  MOVWF  xBA
0D11E:  MOVLW  00
0D120:  SUBWFB xB7,W
0D122:  MOVWF  xBB
0D124:  MOVLW  00
0D126:  SUBWFB xB8,W
0D128:  MOVWF  xBC
.................... {
....................    unsigned int16 interval = 100;   // 測定間隔 [秒]
....................    unsigned int16 end_time = 0xFFFF;
.................... 
....................    unsigned int32 current_time = get_current_sec();
....................    unsigned int32 last_time = current_time - interval;  // 最初にすぐ測定するため
.................... 
....................    // loging data
....................    unsigned int8 logdata[6];
....................    unsigned int16 temp_top;
....................    unsigned int16 temp_bot;
....................    unsigned int16 temp_mis7;
....................    unsigned int16 PD;
.................... 
....................    // Flash Write 
....................    unsigned int32 write_address;
.................... 
....................    fprintf(PC, "temp_top, temp_bot, temp_mis7, pd\r\n");
0D12A:  MOVLW  68
0D12C:  MOVWF  FF6
0D12E:  MOVLW  1A
0D130:  MOVWF  FF7
0D132:  MOVLW  00
0D134:  MOVWF  FF8
0D136:  MOVLB  0
0D138:  CALL   22FE
.................... 
....................    while (true) {
....................        current_time = get_current_sec();
0D13C:  CALL   3C38
0D140:  MOVFF  03,1B8
0D144:  MOVFF  02,1B7
0D148:  MOVFF  01,1B6
0D14C:  MOVFF  00,1B5
.................... 
....................        // intervalごとに測定
....................        if ((current_time - last_time) >= interval) {
0D150:  MOVLB  1
0D152:  MOVF   xB9,W
0D154:  SUBWF  xB5,W
0D156:  MOVWF  xCF
0D158:  MOVF   xBA,W
0D15A:  SUBWFB xB6,W
0D15C:  MOVWF  xD0
0D15E:  MOVF   xBB,W
0D160:  SUBWFB xB7,W
0D162:  MOVWF  xD1
0D164:  MOVF   xBC,W
0D166:  SUBWFB xB8,W
0D168:  MOVWF  xD2
0D16A:  MOVF   xD2,F
0D16C:  BTFSC  FD8.2
0D16E:  BRA    D176
0D170:  MOVLB  0
0D172:  GOTO   D1B2
0D176:  MOVLB  0
0D178:  MOVLB  1
0D17A:  MOVF   xD1,F
0D17C:  BTFSC  FD8.2
0D17E:  BRA    D186
0D180:  MOVLB  0
0D182:  GOTO   D1B2
0D186:  MOVLB  0
0D188:  MOVLB  1
0D18A:  MOVF   xB2,W
0D18C:  SUBWF  xD0,W
0D18E:  BTFSC  FD8.0
0D190:  BRA    D198
0D192:  MOVLB  0
0D194:  GOTO   D1CE
0D198:  MOVLB  0
0D19A:  BTFSS  FD8.2
0D19C:  GOTO   D1B2
0D1A0:  MOVLB  1
0D1A2:  MOVF   xB1,W
0D1A4:  SUBWF  xCF,W
0D1A6:  BTFSC  FD8.0
0D1A8:  BRA    D1B0
0D1AA:  MOVLB  0
0D1AC:  GOTO   D1CE
0D1B0:  MOVLB  0
....................            last_time = current_time;
0D1B2:  MOVFF  1B8,1BC
0D1B6:  MOVFF  1B7,1BB
0D1BA:  MOVFF  1B6,1BA
0D1BE:  MOVFF  1B5,1B9
....................          /*
....................            // 次の測定データ(6バイト)で64バイト境界を超えるか確認
....................            if (environment_data_ptr->reserve_counter1 + 6 > PACKET_SIZE) {
....................                unsigned int8 bankdata[4] = {0};
....................                write_address = MISF_CIGS_ENVIRO_START + environment_data_ptr->used_counter;
....................                write_data_bytes(mis_fm, write_address, bankdata, 4);
....................                environment_data_ptr->used_counter   += 4;
....................                environment_data_ptr->uncopied_counter += 4;
....................                environment_data_ptr->reserve_counter1 = 0;
....................                misf_update_address_area();
....................            }
.................... 
....................            // 環境データ読み取り
....................            temp_top  = ad7490_read(ADC_TEMP_PY_TOP);
....................            temp_bot  = ad7490_read(ADC_TEMP_PY_BOT);
....................            temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................            PD        = ad7490_read(ADC_PD);
.................... 
....................            logdata[0] = (temp_top >> 4) & 0xFF;
....................            logdata[1] = ((temp_top & 0x0F) << 4) | ((temp_bot >> 8) & 0x0F);
....................            logdata[2] = temp_bot & 0xFF;
....................            logdata[3] = (temp_mis7 >> 4) & 0xFF;
....................            logdata[4] = temp_mis7 & 0xFF;
....................            logdata[5] = PD & 0xFF;
.................... 
....................            // 書き込み
....................            write_address = MISF_CIGS_ENVIRO_START + environment_data_ptr->used_counter;
....................            write_data_bytes(mis_fm, write_address, logdata, 6);
....................            environment_data_ptr->used_counter   += 6;
....................            environment_data_ptr->uncopied_counter += 6;
....................            environment_data_ptr->reserve_counter1 += 6;
....................            fprintf(PC, "0x%04LX, 0x%04LX, 0x%04LX, 0x%04LX\r\n", temp_top, temp_bot, temp_mis7, PD);
....................        }
....................          */
....................        delay_ms(1);  // 過負荷防止用
0D1C2:  MOVLW  01
0D1C4:  MOVLB  B
0D1C6:  MOVWF  x03
0D1C8:  MOVLB  0
0D1CA:  CALL   22D0
....................    }
0D1CE:  GOTO   D13C
.................... }
0D1D2:  GOTO   102A2 (RETURN)
.................... }
.................... // make cmd structure from uplink command
.................... meas_iv_param_t make_meas_iv_cmd(int8 *uplinkcmd_ptr)
.................... {
....................    meas_iv_param_t cmd;
....................    cmd.id = uplinkcmd_ptr[0];
*
08282:  MOVLB  1
08284:  MOVF   xE5,W
08286:  MOVWF  FE9
08288:  MOVF   xE6,W
0828A:  MOVWF  FEA
0828C:  MOVFF  FEF,1E7
....................    cmd.interval = ((unsigned int16)uplinkcmd_ptr[1] << 8) | ((unsigned int16)uplinkcmd_ptr[2]);
08290:  MOVLW  01
08292:  ADDWF  xE5,W
08294:  MOVWF  FE9
08296:  MOVLW  00
08298:  ADDWFC xE6,W
0829A:  MOVWF  FEA
0829C:  MOVF   FEF,W
0829E:  CLRF   xF3
082A0:  MOVWF  xF2
082A2:  MOVFF  1F2,1F3
082A6:  CLRF   xF2
082A8:  MOVLW  02
082AA:  ADDWF  xE5,W
082AC:  MOVWF  FE9
082AE:  MOVLW  00
082B0:  ADDWFC xE6,W
082B2:  MOVWF  FEA
082B4:  MOVF   FEF,W
082B6:  CLRF   03
082B8:  IORWF  xF2,W
082BA:  MOVWF  xE8
082BC:  MOVF   03,W
082BE:  IORWF  xF3,W
082C0:  MOVWF  xE9
....................    cmd.log_threshold = (unsigned int16)uplinkcmd_ptr[3]<< 4;
082C2:  MOVLW  03
082C4:  ADDWF  xE5,W
082C6:  MOVWF  FE9
082C8:  MOVLW  00
082CA:  ADDWFC xE6,W
082CC:  MOVWF  FEA
082CE:  MOVF   FEF,W
082D0:  CLRF   xF3
082D2:  MOVWF  xF2
082D4:  RLCF   xF2,W
082D6:  MOVWF  xEE
082D8:  RLCF   xF3,W
082DA:  MOVWF  xEF
082DC:  RLCF   xEE,F
082DE:  RLCF   xEF,F
082E0:  RLCF   xEE,F
082E2:  RLCF   xEF,F
082E4:  RLCF   xEE,F
082E6:  RLCF   xEF,F
082E8:  MOVLW  F0
082EA:  ANDWF  xEE,F
....................    cmd.sweep_limit = (unsigned int16)uplinkcmd_ptr[4]<< 4;
082EC:  MOVLW  04
082EE:  ADDWF  xE5,W
082F0:  MOVWF  FE9
082F2:  MOVLW  00
082F4:  ADDWFC xE6,W
082F6:  MOVWF  FEA
082F8:  MOVF   FEF,W
082FA:  CLRF   xF3
082FC:  MOVWF  xF2
082FE:  RLCF   xF2,W
08300:  MOVWF  xF0
08302:  RLCF   xF3,W
08304:  MOVWF  xF1
08306:  RLCF   xF0,F
08308:  RLCF   xF1,F
0830A:  RLCF   xF0,F
0830C:  RLCF   xF1,F
0830E:  RLCF   xF0,F
08310:  RLCF   xF1,F
08312:  MOVLW  F0
08314:  ANDWF  xF0,F
....................    cmd.pd_threshold = (unsigned int16)uplinkcmd_ptr[5]<< 4;
08316:  MOVLW  05
08318:  ADDWF  xE5,W
0831A:  MOVWF  FE9
0831C:  MOVLW  00
0831E:  ADDWFC xE6,W
08320:  MOVWF  FEA
08322:  MOVF   FEF,W
08324:  CLRF   xF3
08326:  MOVWF  xF2
08328:  RLCF   xF2,W
0832A:  MOVWF  xEA
0832C:  RLCF   xF3,W
0832E:  MOVWF  xEB
08330:  RLCF   xEA,F
08332:  RLCF   xEB,F
08334:  RLCF   xEA,F
08336:  RLCF   xEB,F
08338:  RLCF   xEA,F
0833A:  RLCF   xEB,F
0833C:  MOVLW  F0
0833E:  ANDWF  xEA,F
....................    cmd.meas_time = (unsigned int16)uplinkcmd_ptr[6] *60; // 分 -> 秒
08340:  MOVLW  06
08342:  ADDWF  xE5,W
08344:  MOVWF  FE9
08346:  MOVLW  00
08348:  ADDWFC xE6,W
0834A:  MOVWF  FEA
0834C:  MOVF   FEF,W
0834E:  CLRF   xF3
08350:  MOVWF  xF2
08352:  MOVFF  1F3,A53
08356:  MOVFF  1F2,A52
0835A:  MOVLB  A
0835C:  CLRF   x55
0835E:  MOVLW  3C
08360:  MOVWF  x54
08362:  MOVLB  0
08364:  CALL   8260
08368:  MOVFF  02,1ED
0836C:  MOVFF  01,1EC
....................    return cmd;
08370:  MOVLW  E7
08372:  MOVWF  01
08374:  MOVLW  01
08376:  MOVWF  02
08378:  RETURN 0
.................... }
.................... 
.................... void print_meas_iv_cmd(meas_iv_param_t *cmd_ptr)
*
08F9E:  MOVLW  03
08FA0:  MOVLB  1
08FA2:  ADDWF  xDF,W
08FA4:  MOVWF  FE9
08FA6:  MOVLW  00
08FA8:  ADDWFC xE0,W
08FAA:  MOVWF  FEA
08FAC:  MOVFF  FEC,1E8
08FB0:  MOVF   FED,F
08FB2:  MOVFF  FEF,1E7
08FB6:  MOVFF  1E8,1EA
08FBA:  MOVFF  1E7,1E9
08FBE:  MOVLB  0
08FC0:  GOTO   837A
08FC4:  MOVFF  02,1E2
08FC8:  MOVFF  01,1E1
08FCC:  MOVLW  09
08FCE:  MOVLB  1
08FD0:  ADDWF  xDF,W
08FD2:  MOVWF  FE9
08FD4:  MOVLW  00
08FD6:  ADDWFC xE0,W
08FD8:  MOVWF  FEA
08FDA:  MOVFF  FEC,1E8
08FDE:  MOVF   FED,F
08FE0:  MOVFF  FEF,1E7
08FE4:  MOVFF  1E8,1EA
08FE8:  MOVFF  1E7,1E9
08FEC:  MOVLB  0
08FEE:  CALL   8D70
08FF2:  MOVFF  02,1E4
08FF6:  MOVFF  01,1E3
08FFA:  MOVLW  07
08FFC:  MOVLB  1
08FFE:  ADDWF  xDF,W
09000:  MOVWF  FE9
09002:  MOVLW  00
09004:  ADDWFC xE0,W
09006:  MOVWF  FEA
09008:  MOVFF  FEC,1E8
0900C:  MOVF   FED,F
0900E:  MOVFF  FEF,1E7
09012:  MOVFF  1E8,1EA
09016:  MOVFF  1E7,1E9
0901A:  MOVLB  0
0901C:  CALL   8D70
09020:  MOVFF  02,1E6
09024:  MOVFF  01,1E5
.................... {
....................    // Calc
....................    unsigned int16 pd_value = calc_pd_value(cmd_ptr->pd_threshold);
....................    int16 sweep_limit = calc_curr_value(cmd_ptr->sweep_limit);
....................    int16 log_threshold = calc_curr_value(cmd_ptr->log_threshold);
.................... 
....................    // Print
....................    fprintf(PC, "MEAS IV Command Parameters:\r\n");
09028:  MOVLW  8C
0902A:  MOVWF  FF6
0902C:  MOVLW  1A
0902E:  MOVWF  FF7
09030:  MOVLW  00
09032:  MOVWF  FF8
09034:  CALL   22FE
....................    fprintf(PC, "\tID: %02X\r\n", cmd_ptr->id);
09038:  MOVLB  1
0903A:  MOVF   xDF,W
0903C:  MOVWF  FE9
0903E:  MOVF   xE0,W
09040:  MOVWF  FEA
09042:  MOVFF  FEF,1E7
09046:  MOVLW  AA
09048:  MOVWF  FF6
0904A:  MOVLW  1A
0904C:  MOVWF  FF7
0904E:  MOVLW  00
09050:  MOVWF  FF8
09052:  MOVLW  05
09054:  MOVLB  A
09056:  MOVWF  x4E
09058:  MOVLB  0
0905A:  CALL   2334
0905E:  MOVFF  1E7,9E8
09062:  MOVLW  37
09064:  MOVLB  9
09066:  MOVWF  xE9
09068:  MOVLB  0
0906A:  CALL   2564
0906E:  MOVLW  0D
09070:  BTFSS  FA6.6
09072:  GOTO   9070
09076:  MOVLB  E
09078:  MOVWF  xF9
0907A:  MOVLW  0A
0907C:  MOVLB  0
0907E:  BTFSS  FA6.6
09080:  GOTO   907E
09084:  MOVLB  E
09086:  MOVWF  xF9
....................    fprintf(PC, "\tSweepInterval   :%lu[ms]\r\n", cmd_ptr->interval);
09088:  MOVLW  01
0908A:  MOVLB  1
0908C:  ADDWF  xDF,W
0908E:  MOVWF  FE9
09090:  MOVLW  00
09092:  ADDWFC xE0,W
09094:  MOVWF  FEA
09096:  MOVFF  FEC,1E8
0909A:  MOVF   FED,F
0909C:  MOVFF  FEF,1E7
090A0:  MOVLW  B6
090A2:  MOVWF  FF6
090A4:  MOVLW  1A
090A6:  MOVWF  FF7
090A8:  MOVLW  00
090AA:  MOVWF  FF8
090AC:  MOVLW  12
090AE:  MOVLB  A
090B0:  MOVWF  x4E
090B2:  MOVLB  0
090B4:  CALL   2334
090B8:  MOVLW  10
090BA:  MOVWF  FE9
090BC:  MOVFF  1E8,1EA
090C0:  MOVFF  1E7,1E9
090C4:  CALL   8E82
090C8:  MOVLW  CB
090CA:  MOVWF  FF6
090CC:  MOVLW  1A
090CE:  MOVWF  FF7
090D0:  MOVLW  00
090D2:  MOVWF  FF8
090D4:  MOVLW  06
090D6:  MOVLB  A
090D8:  MOVWF  x4E
090DA:  MOVLB  0
090DC:  CALL   2334
....................    fprintf(PC, "\tPD Threshold    :%lu[W/m2]\r\n", pd_value);
090E0:  MOVLW  D2
090E2:  MOVWF  FF6
090E4:  MOVLW  1A
090E6:  MOVWF  FF7
090E8:  MOVLW  00
090EA:  MOVWF  FF8
090EC:  MOVLW  12
090EE:  MOVLB  A
090F0:  MOVWF  x4E
090F2:  MOVLB  0
090F4:  CALL   2334
090F8:  MOVLW  10
090FA:  MOVWF  FE9
090FC:  MOVFF  1E2,1EA
09100:  MOVFF  1E1,1E9
09104:  CALL   8E82
09108:  MOVLW  E7
0910A:  MOVWF  FF6
0910C:  MOVLW  1A
0910E:  MOVWF  FF7
09110:  MOVLW  00
09112:  MOVWF  FF8
09114:  MOVLW  08
09116:  MOVLB  A
09118:  MOVWF  x4E
0911A:  MOVLB  0
0911C:  CALL   2334
....................    fprintf(PC, "\tSweepLimit      :%lu[mA]\r\n", sweep_limit);
09120:  MOVLW  F0
09122:  MOVWF  FF6
09124:  MOVLW  1A
09126:  MOVWF  FF7
09128:  MOVLW  00
0912A:  MOVWF  FF8
0912C:  MOVLW  12
0912E:  MOVLB  A
09130:  MOVWF  x4E
09132:  MOVLB  0
09134:  CALL   2334
09138:  MOVLW  10
0913A:  MOVWF  FE9
0913C:  MOVFF  1E4,1EA
09140:  MOVFF  1E3,1E9
09144:  CALL   8E82
09148:  MOVLW  05
0914A:  MOVWF  FF6
0914C:  MOVLW  1B
0914E:  MOVWF  FF7
09150:  MOVLW  00
09152:  MOVWF  FF8
09154:  MOVLW  06
09156:  MOVLB  A
09158:  MOVWF  x4E
0915A:  MOVLB  0
0915C:  CALL   2334
....................    fprintf(PC, "\tLogThreshold    :%lu[mA]\r\n", log_threshold);
09160:  MOVLW  0C
09162:  MOVWF  FF6
09164:  MOVLW  1B
09166:  MOVWF  FF7
09168:  MOVLW  00
0916A:  MOVWF  FF8
0916C:  MOVLW  12
0916E:  MOVLB  A
09170:  MOVWF  x4E
09172:  MOVLB  0
09174:  CALL   2334
09178:  MOVLW  10
0917A:  MOVWF  FE9
0917C:  MOVFF  1E6,1EA
09180:  MOVFF  1E5,1E9
09184:  CALL   8E82
09188:  MOVLW  21
0918A:  MOVWF  FF6
0918C:  MOVLW  1B
0918E:  MOVWF  FF7
09190:  MOVLW  00
09192:  MOVWF  FF8
09194:  MOVLW  06
09196:  MOVLB  A
09198:  MOVWF  x4E
0919A:  MOVLB  0
0919C:  CALL   2334
....................    fprintf(PC, "\tMeasurementTime :%lu[s]\r\n\r\n", cmd_ptr->meas_time);
091A0:  MOVLW  05
091A2:  MOVLB  1
091A4:  ADDWF  xDF,W
091A6:  MOVWF  FE9
091A8:  MOVLW  00
091AA:  ADDWFC xE0,W
091AC:  MOVWF  FEA
091AE:  MOVFF  FEC,1E8
091B2:  MOVF   FED,F
091B4:  MOVFF  FEF,1E7
091B8:  MOVLW  28
091BA:  MOVWF  FF6
091BC:  MOVLW  1B
091BE:  MOVWF  FF7
091C0:  MOVLW  00
091C2:  MOVWF  FF8
091C4:  MOVLW  12
091C6:  MOVLB  A
091C8:  MOVWF  x4E
091CA:  MOVLB  0
091CC:  CALL   2334
091D0:  MOVLW  10
091D2:  MOVWF  FE9
091D4:  MOVFF  1E8,1EA
091D8:  MOVFF  1E7,1E9
091DC:  CALL   8E82
091E0:  MOVLW  3D
091E2:  MOVWF  FF6
091E4:  MOVLW  1B
091E6:  MOVWF  FF7
091E8:  MOVLW  00
091EA:  MOVWF  FF8
091EC:  MOVLW  07
091EE:  MOVLB  A
091F0:  MOVWF  x4E
091F2:  MOVLB  0
091F4:  CALL   2334
091F8:  GOTO   B10C (RETURN)
.................... }
.................... 
.................... void mode_meas_pd(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS PD\r\n");
*
0E960:  MOVLW  46
0E962:  MOVWF  FF6
0E964:  MOVLW  1B
0E966:  MOVWF  FF7
0E968:  MOVLW  00
0E96A:  MOVWF  FF8
0E96C:  CALL   22FE
.................... 
....................    // uplinkcmd_ptr から interval と測定時間を取り出す
....................    unsigned int16 interval_ms = ((unsigned int16)uplinkcmd_ptr[1] << 8) | uplinkcmd_ptr[2]; // ms
....................    unsigned int16 meas_time_s = (unsigned int16)uplinkcmd_ptr[6] * 60; // 秒
.................... 
....................    unsigned int32 start_time_ms   = get_current_msec();
....................    unsigned int32 current_time_ms = 0;
....................    unsigned int32 meas_time_ms    = (unsigned int32)meas_time_s * 1000; // ms に変換
0E970:  MOVLW  01
0E972:  MOVLB  1
0E974:  ADDWF  xAF,W
0E976:  MOVWF  FE9
0E978:  MOVLW  00
0E97A:  ADDWFC xB0,W
0E97C:  MOVWF  FEA
0E97E:  MOVF   FEF,W
0E980:  CLRF   xC4
0E982:  MOVWF  xC3
0E984:  MOVFF  1C3,1C4
0E988:  CLRF   xC3
0E98A:  MOVLW  02
0E98C:  ADDWF  xAF,W
0E98E:  MOVWF  FE9
0E990:  MOVLW  00
0E992:  ADDWFC xB0,W
0E994:  MOVWF  FEA
0E996:  MOVF   FEF,W
0E998:  IORWF  xC3,W
0E99A:  MOVWF  xB1
0E99C:  MOVF   xC4,W
0E99E:  MOVWF  xB2
0E9A0:  MOVLW  06
0E9A2:  ADDWF  xAF,W
0E9A4:  MOVWF  FE9
0E9A6:  MOVLW  00
0E9A8:  ADDWFC xB0,W
0E9AA:  MOVWF  FEA
0E9AC:  MOVF   FEF,W
0E9AE:  CLRF   xC4
0E9B0:  MOVWF  xC3
0E9B2:  MOVFF  1C4,A53
0E9B6:  MOVFF  1C3,A52
0E9BA:  MOVLB  A
0E9BC:  CLRF   x55
0E9BE:  MOVLW  3C
0E9C0:  MOVWF  x54
0E9C2:  MOVLB  0
0E9C4:  CALL   8260
0E9C8:  MOVFF  02,1B4
0E9CC:  MOVFF  01,1B3
0E9D0:  CALL   E8DE
0E9D4:  MOVLB  1
0E9D6:  CLRF   xB8
0E9D8:  CLRF   xB7
0E9DA:  MOVFF  02,1B6
0E9DE:  MOVFF  01,1B5
0E9E2:  CLRF   xBC
0E9E4:  CLRF   xBB
0E9E6:  CLRF   xBA
0E9E8:  CLRF   xB9
0E9EA:  CLRF   xC6
0E9EC:  CLRF   xC5
0E9EE:  MOVFF  1B4,1C4
0E9F2:  MOVFF  1B3,1C3
0E9F6:  MOVFF  FEA,1C8
0E9FA:  MOVFF  FE9,1C7
0E9FE:  MOVFF  1C6,1CC
0EA02:  MOVFF  1C5,1CB
0EA06:  MOVFF  1C4,1CA
0EA0A:  MOVFF  1C3,1C9
0EA0E:  CLRF   xD0
0EA10:  CLRF   xCF
0EA12:  MOVLW  03
0EA14:  MOVWF  xCE
0EA16:  MOVLW  E8
0EA18:  MOVWF  xCD
0EA1A:  MOVLB  0
0EA1C:  GOTO   E8EC
0EA20:  MOVFF  1C8,FEA
0EA24:  MOVFF  1C7,FE9
0EA28:  MOVFF  03,1C0
0EA2C:  MOVFF  02,1BF
0EA30:  MOVFF  01,1BE
0EA34:  MOVFF  00,1BD
.................... 
....................    while (current_time_ms - start_time_ms < meas_time_ms) {
0EA38:  MOVLB  1
0EA3A:  MOVF   xB5,W
0EA3C:  SUBWF  xB9,W
0EA3E:  MOVWF  xC3
0EA40:  MOVF   xB6,W
0EA42:  SUBWFB xBA,W
0EA44:  MOVWF  xC4
0EA46:  MOVF   xB7,W
0EA48:  SUBWFB xBB,W
0EA4A:  MOVWF  xC5
0EA4C:  MOVF   xB8,W
0EA4E:  SUBWFB xBC,W
0EA50:  MOVWF  xC6
0EA52:  MOVF   xC6,W
0EA54:  SUBWF  xC0,W
0EA56:  BTFSC  FD8.0
0EA58:  BRA    EA60
0EA5A:  MOVLB  0
0EA5C:  GOTO   EB44
0EA60:  MOVLB  0
0EA62:  BTFSS  FD8.2
0EA64:  GOTO   EAAA
0EA68:  MOVLB  1
0EA6A:  MOVF   xC5,W
0EA6C:  SUBWF  xBF,W
0EA6E:  BTFSC  FD8.0
0EA70:  BRA    EA78
0EA72:  MOVLB  0
0EA74:  GOTO   EB44
0EA78:  MOVLB  0
0EA7A:  BTFSS  FD8.2
0EA7C:  GOTO   EAAA
0EA80:  MOVLB  1
0EA82:  MOVF   xC4,W
0EA84:  SUBWF  xBE,W
0EA86:  BTFSC  FD8.0
0EA88:  BRA    EA90
0EA8A:  MOVLB  0
0EA8C:  GOTO   EB44
0EA90:  MOVLB  0
0EA92:  BTFSS  FD8.2
0EA94:  GOTO   EAAA
0EA98:  MOVLB  1
0EA9A:  MOVF   xBD,W
0EA9C:  SUBWF  xC3,W
0EA9E:  BTFSS  FD8.0
0EAA0:  BRA    EAA8
0EAA2:  MOVLB  0
0EAA4:  GOTO   EB44
0EAA8:  MOVLB  0
.................... 
....................       current_time_ms = get_current_msec();
0EAAA:  CALL   E8DE
0EAAE:  MOVLB  1
0EAB0:  CLRF   xBC
0EAB2:  CLRF   xBB
0EAB4:  MOVFF  02,1BA
0EAB8:  MOVFF  01,1B9
.................... 
....................       // interval ごとに実行
....................       static unsigned int32 last_meas_time = 0;
....................       if (current_time_ms - last_meas_time >= interval_ms) {
0EABC:  MOVF   x88,W
0EABE:  SUBWF  xB9,W
0EAC0:  MOVWF  xC3
0EAC2:  MOVF   x89,W
0EAC4:  SUBWFB xBA,W
0EAC6:  MOVWF  xC4
0EAC8:  MOVF   x8A,W
0EACA:  SUBWFB xBB,W
0EACC:  MOVWF  xC5
0EACE:  MOVF   x8B,W
0EAD0:  SUBWFB xBC,W
0EAD2:  MOVWF  xC6
0EAD4:  MOVF   xC6,F
0EAD6:  BTFSC  FD8.2
0EAD8:  BRA    EAE0
0EADA:  MOVLB  0
0EADC:  GOTO   EB1C
0EAE0:  MOVLB  0
0EAE2:  MOVLB  1
0EAE4:  MOVF   xC5,F
0EAE6:  BTFSC  FD8.2
0EAE8:  BRA    EAF0
0EAEA:  MOVLB  0
0EAEC:  GOTO   EB1C
0EAF0:  MOVLB  0
0EAF2:  MOVLB  1
0EAF4:  MOVF   xB2,W
0EAF6:  SUBWF  xC4,W
0EAF8:  BTFSC  FD8.0
0EAFA:  BRA    EB02
0EAFC:  MOVLB  0
0EAFE:  GOTO   EB40
0EB02:  MOVLB  0
0EB04:  BTFSS  FD8.2
0EB06:  GOTO   EB1C
0EB0A:  MOVLB  1
0EB0C:  MOVF   xB1,W
0EB0E:  SUBWF  xC3,W
0EB10:  BTFSC  FD8.0
0EB12:  BRA    EB1A
0EB14:  MOVLB  0
0EB16:  GOTO   EB40
0EB1A:  MOVLB  0
....................          last_meas_time = current_time_ms;
0EB1C:  MOVFF  1BC,18B
0EB20:  MOVFF  1BB,18A
0EB24:  MOVFF  1BA,189
0EB28:  MOVFF  1B9,188
.................... 
....................          // PD センサー読み取り
....................          unsigned int16 pd = ad7490_read(ADC_PD);
0EB2C:  MOVLW  0F
0EB2E:  MOVLB  9
0EB30:  MOVWF  xEE
0EB32:  MOVLB  0
0EB34:  CALL   24E4
0EB38:  MOVFF  02,1C2
0EB3C:  MOVFF  01,1C1
.................... 
....................          // デバッグ出力
....................          // fprintf(PC, "Time:%lu ms, PD:%u\r\n", current_time_ms - start_time_ms, pd);
....................       }
0EB40:  GOTO   EA38
....................    }
.................... 
....................    fprintf(PC, "End MODE MEAS PD\r\n");
0EB44:  MOVLW  5C
0EB46:  MOVWF  FF6
0EB48:  MOVLW  1B
0EB4A:  MOVWF  FF7
0EB4C:  MOVLW  00
0EB4E:  MOVWF  FF8
0EB50:  CALL   22FE
0EB54:  GOTO   102BE (RETURN)
.................... }
.................... 
.................... #include "application/cigs_mode_flash.c"
.................... #include "cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_limit);  
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x300];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         unsigned int8 envdata[6];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
....................     
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *measured_data_ptr, sweep_config_t *port_data_ptr);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../domain/cigs_flash.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... 
.................... // ========================== MISF Command ============================
.................... void mode_misf_erase_all(int8 parameter[])
.................... {
....................    printf("Start Flash Erase All\r\n");
*
05C96:  MOVLW  70
05C98:  MOVWF  FF6
05C9A:  MOVLW  1B
05C9C:  MOVWF  FF7
05C9E:  MOVLW  00
05CA0:  MOVWF  FF8
05CA2:  CALL   22FE
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
05CA6:  MOVLB  1
05CA8:  MOVF   xCA,W
05CAA:  MOVWF  FE9
05CAC:  MOVF   xCB,W
05CAE:  MOVWF  FEA
05CB0:  MOVFF  FEF,1CC
....................    piclog_make(cmd, 0x00); // Log the command execution
05CB4:  MOVFF  1CC,20F
05CB8:  MOVLB  2
05CBA:  CLRF   x10
05CBC:  MOVLB  0
05CBE:  CALL   510C
....................    
....................    for (int32 address = MISF_START; address < MISF_END; address += SECTOR_64K_BYTE) {
05CC2:  MOVLB  1
05CC4:  CLRF   xD0
05CC6:  CLRF   xCF
05CC8:  CLRF   xCE
05CCA:  CLRF   xCD
05CCC:  MOVLB  0
05CCE:  MOVLB  1
05CD0:  MOVF   xD0,F
05CD2:  BTFSC  FD8.2
05CD4:  BRA    5CDC
05CD6:  MOVLB  0
05CD8:  GOTO   5D54
05CDC:  MOVLB  0
05CDE:  MOVLB  1
05CE0:  MOVF   xCF,W
05CE2:  SUBLW  BC
05CE4:  BTFSC  FD8.0
05CE6:  BRA    5CEE
05CE8:  MOVLB  0
05CEA:  GOTO   5D54
05CEE:  MOVLB  0
05CF0:  BTFSS  FD8.2
05CF2:  GOTO   5D20
05CF6:  MOVLB  1
05CF8:  MOVF   xCE,W
05CFA:  SUBLW  0F
05CFC:  BTFSC  FD8.0
05CFE:  BRA    5D06
05D00:  MOVLB  0
05D02:  GOTO   5D54
05D06:  MOVLB  0
05D08:  BTFSS  FD8.2
05D0A:  GOTO   5D20
05D0E:  MOVLB  1
05D10:  MOVF   xCD,W
05D12:  SUBLW  FE
05D14:  BTFSC  FD8.0
05D16:  BRA    5D1E
05D18:  MOVLB  0
05D1A:  GOTO   5D54
05D1E:  MOVLB  0
....................       sector_erase(mis_fm, address); // Erase each sector
05D20:  MOVFF  115,1F8
05D24:  MOVFF  114,1F7
05D28:  MOVFF  113,1F6
05D2C:  MOVFF  112,1F5
05D30:  MOVFF  1D0,1FC
05D34:  MOVFF  1CF,1FB
05D38:  MOVFF  1CE,1FA
05D3C:  MOVFF  1CD,1F9
05D40:  CALL   5934
05D44:  MOVLW  01
05D46:  MOVLB  1
05D48:  ADDWF  xCF,F
05D4A:  MOVLW  00
05D4C:  ADDWFC xD0,F
05D4E:  MOVLB  0
05D50:  GOTO   5CCE
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05D54:  MOVFF  1CC,20F
05D58:  MOVLB  2
05D5A:  SETF   x10
05D5C:  MOVLB  0
05D5E:  CALL   510C
....................    printf("End Flash Erase All\r\n");
05D62:  MOVLW  88
05D64:  MOVWF  FF6
05D66:  MOVLW  1B
05D68:  MOVWF  FF7
05D6A:  MOVLW  00
05D6C:  MOVWF  FF8
05D6E:  CALL   22FE
05D72:  RETURN 0
.................... }
.................... 
.................... void mode_misf_erase_1sector(int8 parameter[])
.................... {
....................    printf("Start Flash Erase 1 Sector\r\n");
05D74:  MOVLW  9E
05D76:  MOVWF  FF6
05D78:  MOVLW  1B
05D7A:  MOVWF  FF7
05D7C:  MOVLW  00
05D7E:  MOVWF  FF8
05D80:  CALL   22FE
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    int32 sector_address = 
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
05D84:  MOVLB  1
05D86:  MOVF   xAF,W
05D88:  MOVWF  FE9
05D8A:  MOVF   xB0,W
05D8C:  MOVWF  FEA
05D8E:  MOVFF  FEF,1B1
05D92:  MOVLW  01
05D94:  ADDWF  xAF,W
05D96:  MOVWF  FE9
05D98:  MOVLW  00
05D9A:  ADDWFC xB0,W
05D9C:  MOVWF  FEA
05D9E:  MOVF   FEF,W
05DA0:  CLRF   xB9
05DA2:  CLRF   xB8
05DA4:  CLRF   xB7
05DA6:  MOVWF  xB6
05DA8:  MOVFF  1B6,1B9
05DAC:  CLRF   xB6
05DAE:  CLRF   xB7
05DB0:  CLRF   xB8
05DB2:  MOVLW  02
05DB4:  ADDWF  xAF,W
05DB6:  MOVWF  FE9
05DB8:  MOVLW  00
05DBA:  ADDWFC xB0,W
05DBC:  MOVWF  FEA
05DBE:  MOVF   FEF,W
05DC0:  CLRF   xBE
05DC2:  CLRF   xBD
05DC4:  CLRF   xBC
05DC6:  MOVWF  xBB
05DC8:  MOVFF  1BC,03
05DCC:  MOVFF  1BB,02
05DD0:  CLRF   00
05DD2:  CLRF   01
05DD4:  MOVF   00,W
05DD6:  IORWF  xB6,F
05DD8:  MOVF   01,W
05DDA:  IORWF  xB7,F
05DDC:  MOVF   02,W
05DDE:  IORWF  xB8,F
05DE0:  MOVF   03,W
05DE2:  IORWF  xB9,F
05DE4:  MOVLW  03
05DE6:  ADDWF  xAF,W
05DE8:  MOVWF  FE9
05DEA:  MOVLW  00
05DEC:  ADDWFC xB0,W
05DEE:  MOVWF  FEA
05DF0:  MOVF   FEF,W
05DF2:  CLRF   xBE
05DF4:  CLRF   xBD
05DF6:  CLRF   xBC
05DF8:  MOVWF  xBB
05DFA:  MOVFF  1BD,03
05DFE:  MOVFF  1BC,02
05E02:  MOVFF  1BB,01
05E06:  CLRF   00
05E08:  MOVF   00,W
05E0A:  IORWF  xB6,F
05E0C:  MOVF   01,W
05E0E:  IORWF  xB7,F
05E10:  MOVF   02,W
05E12:  IORWF  xB8,F
05E14:  MOVF   03,W
05E16:  IORWF  xB9,F
05E18:  MOVLW  04
05E1A:  ADDWF  xAF,W
05E1C:  MOVWF  FE9
05E1E:  MOVLW  00
05E20:  ADDWFC xB0,W
05E22:  MOVWF  FEA
05E24:  MOVF   FEF,W
05E26:  MOVWF  00
05E28:  CLRF   01
05E2A:  CLRF   02
05E2C:  CLRF   03
05E2E:  MOVF   00,W
05E30:  IORWF  xB6,W
05E32:  MOVWF  xB2
05E34:  MOVF   01,W
05E36:  IORWF  xB7,W
05E38:  MOVWF  xB3
05E3A:  MOVF   02,W
05E3C:  IORWF  xB8,W
05E3E:  MOVWF  xB4
05E40:  MOVF   03,W
05E42:  IORWF  xB9,W
05E44:  MOVWF  xB5
.................... 
....................    printf("\tSector Address: 0x%08LX\r\n", sector_address);
05E46:  MOVLW  BC
05E48:  MOVWF  FF6
05E4A:  MOVLW  1B
05E4C:  MOVWF  FF7
05E4E:  MOVLW  00
05E50:  MOVWF  FF8
05E52:  MOVLW  13
05E54:  MOVLB  A
05E56:  MOVWF  x4E
05E58:  MOVLB  0
05E5A:  CALL   2334
05E5E:  MOVFF  1B5,9E8
05E62:  MOVLW  37
05E64:  MOVLB  9
05E66:  MOVWF  xE9
05E68:  MOVLB  0
05E6A:  CALL   2564
05E6E:  MOVFF  1B4,9E8
05E72:  MOVLW  37
05E74:  MOVLB  9
05E76:  MOVWF  xE9
05E78:  MOVLB  0
05E7A:  CALL   2564
05E7E:  MOVFF  1B3,9E8
05E82:  MOVLW  37
05E84:  MOVLB  9
05E86:  MOVWF  xE9
05E88:  MOVLB  0
05E8A:  CALL   2564
05E8E:  MOVFF  1B2,9E8
05E92:  MOVLW  37
05E94:  MOVLB  9
05E96:  MOVWF  xE9
05E98:  MOVLB  0
05E9A:  CALL   2564
05E9E:  MOVLW  0D
05EA0:  BTFSS  FA6.6
05EA2:  GOTO   5EA0
05EA6:  MOVLB  E
05EA8:  MOVWF  xF9
05EAA:  MOVLW  0A
05EAC:  MOVLB  0
05EAE:  BTFSS  FA6.6
05EB0:  GOTO   5EAE
05EB4:  MOVLB  E
05EB6:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05EB8:  MOVFF  1B1,20F
05EBC:  MOVLB  2
05EBE:  CLRF   x10
05EC0:  MOVLB  0
05EC2:  CALL   510C
....................    
....................    sector_erase(mis_fm, sector_address);
05EC6:  MOVFF  115,1F8
05ECA:  MOVFF  114,1F7
05ECE:  MOVFF  113,1F6
05ED2:  MOVFF  112,1F5
05ED6:  MOVFF  1B5,1FC
05EDA:  MOVFF  1B4,1FB
05EDE:  MOVFF  1B3,1FA
05EE2:  MOVFF  1B2,1F9
05EE6:  CALL   5934
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05EEA:  MOVFF  1B1,20F
05EEE:  MOVLB  2
05EF0:  SETF   x10
05EF2:  MOVLB  0
05EF4:  CALL   510C
....................    printf("End Flash Erase 1 Sector\r\n");
05EF8:  MOVLW  D8
05EFA:  MOVWF  FF6
05EFC:  MOVLW  1B
05EFE:  MOVWF  FF7
05F00:  MOVLW  00
05F02:  MOVWF  FF8
05F04:  CALL   22FE
05F08:  GOTO   1019A (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_4kbyte_subsector(int8 parameter[])
.................... {
....................    printf("Start Flash Erase 4kByte Subsector\r\n");
05F0C:  MOVLW  F4
05F0E:  MOVWF  FF6
05F10:  MOVLW  1B
05F12:  MOVWF  FF7
05F14:  MOVLW  00
05F16:  MOVWF  FF8
05F18:  CALL   22FE
....................    int8 cmd = parameter[0];
....................    int32 subsector_address =
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
05F1C:  MOVLB  1
05F1E:  MOVF   xAF,W
05F20:  MOVWF  FE9
05F22:  MOVF   xB0,W
05F24:  MOVWF  FEA
05F26:  MOVFF  FEF,1B1
05F2A:  MOVLW  01
05F2C:  ADDWF  xAF,W
05F2E:  MOVWF  FE9
05F30:  MOVLW  00
05F32:  ADDWFC xB0,W
05F34:  MOVWF  FEA
05F36:  MOVF   FEF,W
05F38:  CLRF   xB9
05F3A:  CLRF   xB8
05F3C:  CLRF   xB7
05F3E:  MOVWF  xB6
05F40:  MOVFF  1B6,1B9
05F44:  CLRF   xB6
05F46:  CLRF   xB7
05F48:  CLRF   xB8
05F4A:  MOVLW  02
05F4C:  ADDWF  xAF,W
05F4E:  MOVWF  FE9
05F50:  MOVLW  00
05F52:  ADDWFC xB0,W
05F54:  MOVWF  FEA
05F56:  MOVF   FEF,W
05F58:  CLRF   xBE
05F5A:  CLRF   xBD
05F5C:  CLRF   xBC
05F5E:  MOVWF  xBB
05F60:  MOVFF  1BC,03
05F64:  MOVFF  1BB,02
05F68:  CLRF   00
05F6A:  CLRF   01
05F6C:  MOVF   00,W
05F6E:  IORWF  xB6,F
05F70:  MOVF   01,W
05F72:  IORWF  xB7,F
05F74:  MOVF   02,W
05F76:  IORWF  xB8,F
05F78:  MOVF   03,W
05F7A:  IORWF  xB9,F
05F7C:  MOVLW  03
05F7E:  ADDWF  xAF,W
05F80:  MOVWF  FE9
05F82:  MOVLW  00
05F84:  ADDWFC xB0,W
05F86:  MOVWF  FEA
05F88:  MOVF   FEF,W
05F8A:  CLRF   xBE
05F8C:  CLRF   xBD
05F8E:  CLRF   xBC
05F90:  MOVWF  xBB
05F92:  MOVFF  1BD,03
05F96:  MOVFF  1BC,02
05F9A:  MOVFF  1BB,01
05F9E:  CLRF   00
05FA0:  MOVF   00,W
05FA2:  IORWF  xB6,F
05FA4:  MOVF   01,W
05FA6:  IORWF  xB7,F
05FA8:  MOVF   02,W
05FAA:  IORWF  xB8,F
05FAC:  MOVF   03,W
05FAE:  IORWF  xB9,F
05FB0:  MOVLW  04
05FB2:  ADDWF  xAF,W
05FB4:  MOVWF  FE9
05FB6:  MOVLW  00
05FB8:  ADDWFC xB0,W
05FBA:  MOVWF  FEA
05FBC:  MOVF   FEF,W
05FBE:  MOVWF  00
05FC0:  CLRF   01
05FC2:  CLRF   02
05FC4:  CLRF   03
05FC6:  MOVF   00,W
05FC8:  IORWF  xB6,W
05FCA:  MOVWF  xB2
05FCC:  MOVF   01,W
05FCE:  IORWF  xB7,W
05FD0:  MOVWF  xB3
05FD2:  MOVF   02,W
05FD4:  IORWF  xB8,W
05FD6:  MOVWF  xB4
05FD8:  MOVF   03,W
05FDA:  IORWF  xB9,W
05FDC:  MOVWF  xB5
....................    printf("\tSubsector Address: 0x%08LX\r\n", subsector_address);
05FDE:  MOVLW  1A
05FE0:  MOVWF  FF6
05FE2:  MOVLW  1C
05FE4:  MOVWF  FF7
05FE6:  MOVLW  00
05FE8:  MOVWF  FF8
05FEA:  MOVLW  16
05FEC:  MOVLB  A
05FEE:  MOVWF  x4E
05FF0:  MOVLB  0
05FF2:  CALL   2334
05FF6:  MOVFF  1B5,9E8
05FFA:  MOVLW  37
05FFC:  MOVLB  9
05FFE:  MOVWF  xE9
06000:  MOVLB  0
06002:  CALL   2564
06006:  MOVFF  1B4,9E8
0600A:  MOVLW  37
0600C:  MOVLB  9
0600E:  MOVWF  xE9
06010:  MOVLB  0
06012:  CALL   2564
06016:  MOVFF  1B3,9E8
0601A:  MOVLW  37
0601C:  MOVLB  9
0601E:  MOVWF  xE9
06020:  MOVLB  0
06022:  CALL   2564
06026:  MOVFF  1B2,9E8
0602A:  MOVLW  37
0602C:  MOVLB  9
0602E:  MOVWF  xE9
06030:  MOVLB  0
06032:  CALL   2564
06036:  MOVLW  0D
06038:  BTFSS  FA6.6
0603A:  GOTO   6038
0603E:  MOVLB  E
06040:  MOVWF  xF9
06042:  MOVLW  0A
06044:  MOVLB  0
06046:  BTFSS  FA6.6
06048:  GOTO   6046
0604C:  MOVLB  E
0604E:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START);
06050:  MOVFF  1B1,20F
06054:  MOVLB  2
06056:  CLRF   x10
06058:  MOVLB  0
0605A:  CALL   510C
....................    subsector_4kByte_erase(mis_fm, subsector_address); // FIX: 固定0消去→指定アドレス
0605E:  MOVFF  115,A93
06062:  MOVFF  114,A92
06066:  MOVFF  113,A91
0606A:  MOVFF  112,A90
0606E:  MOVFF  1B5,A97
06072:  MOVFF  1B4,A96
06076:  MOVFF  1B3,A95
0607A:  MOVFF  1B2,A94
0607E:  CALL   4D5A
....................    piclog_make(cmd, PICLOG_PARAM_END);
06082:  MOVFF  1B1,20F
06086:  MOVLB  2
06088:  SETF   x10
0608A:  MOVLB  0
0608C:  CALL   510C
....................    printf("End Flash Erase 4kByte Subsector\r\n");
06090:  MOVLW  38
06092:  MOVWF  FF6
06094:  MOVLW  1C
06096:  MOVWF  FF7
06098:  MOVLW  00
0609A:  MOVWF  FF8
0609C:  CALL   22FE
060A0:  GOTO   101AA (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 64kByte Subsector\r\n");
060A4:  MOVLW  5C
060A6:  MOVWF  FF6
060A8:  MOVLW  1C
060AA:  MOVWF  FF7
060AC:  MOVLW  00
060AE:  MOVWF  FF8
060B0:  CALL   22FE
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
060B4:  MOVLB  1
060B6:  MOVF   xAF,W
060B8:  MOVWF  FE9
060BA:  MOVF   xB0,W
060BC:  MOVWF  FEA
060BE:  MOVFF  FEF,1B1
060C2:  MOVLW  01
060C4:  ADDWF  xAF,W
060C6:  MOVWF  FE9
060C8:  MOVLW  00
060CA:  ADDWFC xB0,W
060CC:  MOVWF  FEA
060CE:  MOVF   FEF,W
060D0:  CLRF   xB9
060D2:  CLRF   xB8
060D4:  CLRF   xB7
060D6:  MOVWF  xB6
060D8:  MOVFF  1B6,1B9
060DC:  CLRF   xB6
060DE:  CLRF   xB7
060E0:  CLRF   xB8
060E2:  MOVLW  02
060E4:  ADDWF  xAF,W
060E6:  MOVWF  FE9
060E8:  MOVLW  00
060EA:  ADDWFC xB0,W
060EC:  MOVWF  FEA
060EE:  MOVF   FEF,W
060F0:  CLRF   xBE
060F2:  CLRF   xBD
060F4:  CLRF   xBC
060F6:  MOVWF  xBB
060F8:  MOVFF  1BC,03
060FC:  MOVFF  1BB,02
06100:  CLRF   00
06102:  CLRF   01
06104:  MOVF   00,W
06106:  IORWF  xB6,F
06108:  MOVF   01,W
0610A:  IORWF  xB7,F
0610C:  MOVF   02,W
0610E:  IORWF  xB8,F
06110:  MOVF   03,W
06112:  IORWF  xB9,F
06114:  MOVLW  03
06116:  ADDWF  xAF,W
06118:  MOVWF  FE9
0611A:  MOVLW  00
0611C:  ADDWFC xB0,W
0611E:  MOVWF  FEA
06120:  MOVF   FEF,W
06122:  CLRF   xBE
06124:  CLRF   xBD
06126:  CLRF   xBC
06128:  MOVWF  xBB
0612A:  MOVFF  1BD,03
0612E:  MOVFF  1BC,02
06132:  MOVFF  1BB,01
06136:  CLRF   00
06138:  MOVF   00,W
0613A:  IORWF  xB6,F
0613C:  MOVF   01,W
0613E:  IORWF  xB7,F
06140:  MOVF   02,W
06142:  IORWF  xB8,F
06144:  MOVF   03,W
06146:  IORWF  xB9,F
06148:  MOVLW  04
0614A:  ADDWF  xAF,W
0614C:  MOVWF  FE9
0614E:  MOVLW  00
06150:  ADDWFC xB0,W
06152:  MOVWF  FEA
06154:  MOVF   FEF,W
06156:  MOVWF  00
06158:  CLRF   01
0615A:  CLRF   02
0615C:  CLRF   03
0615E:  MOVF   00,W
06160:  IORWF  xB6,W
06162:  MOVWF  xB2
06164:  MOVF   01,W
06166:  IORWF  xB7,W
06168:  MOVWF  xB3
0616A:  MOVF   02,W
0616C:  IORWF  xB8,W
0616E:  MOVWF  xB4
06170:  MOVF   03,W
06172:  IORWF  xB9,W
06174:  MOVWF  xB5
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
06176:  MOVLW  82
06178:  MOVWF  FF6
0617A:  MOVLW  1C
0617C:  MOVWF  FF7
0617E:  MOVLW  00
06180:  MOVWF  FF8
06182:  MOVLW  16
06184:  MOVLB  A
06186:  MOVWF  x4E
06188:  MOVLB  0
0618A:  CALL   2334
0618E:  MOVFF  1B5,9E8
06192:  MOVLW  37
06194:  MOVLB  9
06196:  MOVWF  xE9
06198:  MOVLB  0
0619A:  CALL   2564
0619E:  MOVFF  1B4,9E8
061A2:  MOVLW  37
061A4:  MOVLB  9
061A6:  MOVWF  xE9
061A8:  MOVLB  0
061AA:  CALL   2564
061AE:  MOVFF  1B3,9E8
061B2:  MOVLW  37
061B4:  MOVLB  9
061B6:  MOVWF  xE9
061B8:  MOVLB  0
061BA:  CALL   2564
061BE:  MOVFF  1B2,9E8
061C2:  MOVLW  37
061C4:  MOVLB  9
061C6:  MOVWF  xE9
061C8:  MOVLB  0
061CA:  CALL   2564
061CE:  MOVLW  0D
061D0:  BTFSS  FA6.6
061D2:  GOTO   61D0
061D6:  MOVLB  E
061D8:  MOVWF  xF9
061DA:  MOVLW  0A
061DC:  MOVLB  0
061DE:  BTFSS  FA6.6
061E0:  GOTO   61DE
061E4:  MOVLB  E
061E6:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
061E8:  MOVFF  1B1,20F
061EC:  MOVLB  2
061EE:  CLRF   x10
061F0:  MOVLB  0
061F2:  CALL   510C
....................    
....................    //subsector_64kByte_erase(mis_fm, subsector_address);
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
061F6:  MOVFF  1B1,20F
061FA:  MOVLB  2
061FC:  SETF   x10
061FE:  MOVLB  0
06200:  CALL   510C
....................    fprintf(PC, "End Flash Erase 64kByte Subsector\r\n");
06204:  MOVLW  A0
06206:  MOVWF  FF6
06208:  MOVLW  1C
0620A:  MOVWF  FF7
0620C:  MOVLW  00
0620E:  MOVWF  FF8
06210:  CALL   22FE
06214:  GOTO   101BA (RETURN)
.................... }
.................... 
.................... void mode_misf_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
*
063F8:  MOVLW  C4
063FA:  MOVWF  FF6
063FC:  MOVLW  1C
063FE:  MOVWF  FF7
06400:  MOVLW  00
06402:  MOVWF  FF8
06404:  CALL   22FE
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
06408:  MOVLB  1
0640A:  MOVF   xAF,W
0640C:  MOVWF  FE9
0640E:  MOVF   xB0,W
06410:  MOVWF  FEA
06412:  MOVFF  FEF,205
06416:  MOVFF  205,20F
0641A:  MOVLB  2
0641C:  CLRF   x10
0641E:  MOVLB  0
06420:  CALL   510C
.................... 
....................    FLASH_WRITE_PARAM flash_write_param = {0};
06424:  MOVLB  1
06426:  CLRF   xB1
06428:  CLRF   xB2
0642A:  CLRF   xB3
0642C:  CLRF   xB4
0642E:  CLRF   xB5
06430:  CLRF   xB6
06432:  CLRF   xB7
....................    
....................    flash_write_param.id = parameter[0];
06434:  MOVF   xAF,W
06436:  MOVWF  FE9
06438:  MOVF   xB0,W
0643A:  MOVWF  FEA
0643C:  MOVFF  FEF,1B1
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
06440:  MOVLW  01
06442:  ADDWF  xAF,W
06444:  MOVWF  FE9
06446:  MOVLW  00
06448:  ADDWFC xB0,W
0644A:  MOVWF  FEA
0644C:  MOVF   FEF,W
0644E:  MOVLB  2
06450:  CLRF   x08
06452:  CLRF   x07
06454:  CLRF   x06
06456:  MOVWF  x05
06458:  MOVFF  205,208
0645C:  CLRF   x05
0645E:  CLRF   x06
06460:  CLRF   x07
06462:  MOVLW  02
06464:  MOVLB  1
06466:  ADDWF  xAF,W
06468:  MOVWF  FE9
0646A:  MOVLW  00
0646C:  ADDWFC xB0,W
0646E:  MOVWF  FEA
06470:  MOVF   FEF,W
06472:  MOVLB  2
06474:  CLRF   x0D
06476:  CLRF   x0C
06478:  CLRF   x0B
0647A:  MOVWF  x0A
0647C:  MOVFF  20B,03
06480:  MOVFF  20A,02
06484:  CLRF   00
06486:  CLRF   01
06488:  MOVF   00,W
0648A:  IORWF  x05,F
0648C:  MOVF   01,W
0648E:  IORWF  x06,F
06490:  MOVF   02,W
06492:  IORWF  x07,F
06494:  MOVF   03,W
06496:  IORWF  x08,F
06498:  MOVLW  03
0649A:  MOVLB  1
0649C:  ADDWF  xAF,W
0649E:  MOVWF  FE9
064A0:  MOVLW  00
064A2:  ADDWFC xB0,W
064A4:  MOVWF  FEA
064A6:  MOVF   FEF,W
064A8:  MOVLB  2
064AA:  CLRF   x0D
064AC:  CLRF   x0C
064AE:  CLRF   x0B
064B0:  MOVWF  x0A
064B2:  MOVFF  20C,03
064B6:  MOVFF  20B,02
064BA:  MOVFF  20A,01
064BE:  CLRF   00
064C0:  MOVF   00,W
064C2:  IORWF  x05,F
064C4:  MOVF   01,W
064C6:  IORWF  x06,F
064C8:  MOVF   02,W
064CA:  IORWF  x07,F
064CC:  MOVF   03,W
064CE:  IORWF  x08,F
064D0:  MOVLW  04
064D2:  MOVLB  1
064D4:  ADDWF  xAF,W
064D6:  MOVWF  FE9
064D8:  MOVLW  00
064DA:  ADDWFC xB0,W
064DC:  MOVWF  FEA
064DE:  MOVF   FEF,W
064E0:  MOVWF  00
064E2:  CLRF   01
064E4:  CLRF   02
064E6:  CLRF   03
064E8:  MOVF   00,W
064EA:  MOVLB  2
064EC:  IORWF  x05,W
064EE:  MOVLB  1
064F0:  MOVWF  xB2
064F2:  MOVF   01,W
064F4:  MOVLB  2
064F6:  IORWF  x06,W
064F8:  MOVLB  1
064FA:  MOVWF  xB3
064FC:  MOVF   02,W
064FE:  MOVLB  2
06500:  IORWF  x07,W
06502:  MOVLB  1
06504:  MOVWF  xB4
06506:  MOVF   03,W
06508:  MOVLB  2
0650A:  IORWF  x08,W
0650C:  MOVLB  1
0650E:  MOVWF  xB5
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
06510:  MOVLW  07
06512:  ADDWF  xAF,W
06514:  MOVWF  FE9
06516:  MOVLW  00
06518:  ADDWFC xB0,W
0651A:  MOVWF  FEA
0651C:  MOVF   FEF,W
0651E:  MOVLB  2
06520:  CLRF   x06
06522:  MOVWF  x05
06524:  MOVFF  205,206
06528:  CLRF   x05
0652A:  MOVLW  08
0652C:  MOVLB  1
0652E:  ADDWF  xAF,W
06530:  MOVWF  FE9
06532:  MOVLW  00
06534:  ADDWFC xB0,W
06536:  MOVWF  FEA
06538:  MOVF   FEF,W
0653A:  CLRF   03
0653C:  MOVLB  2
0653E:  IORWF  x05,W
06540:  MOVLB  1
06542:  MOVWF  xB6
06544:  MOVF   03,W
06546:  MOVLB  2
06548:  IORWF  x06,W
0654A:  MOVLB  1
0654C:  MOVWF  xB7
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
0654E:  MOVLW  DE
06550:  MOVWF  FF6
06552:  MOVLW  1C
06554:  MOVWF  FF7
06556:  MOVLW  00
06558:  MOVWF  FF8
0655A:  MOVLW  0C
0655C:  MOVLB  A
0655E:  MOVWF  x4E
06560:  MOVLB  0
06562:  CALL   2334
06566:  MOVFF  1B1,9E8
0656A:  MOVLW  37
0656C:  MOVLB  9
0656E:  MOVWF  xE9
06570:  MOVLB  0
06572:  CALL   2564
06576:  MOVLW  0D
06578:  BTFSS  FA6.6
0657A:  GOTO   6578
0657E:  MOVLB  E
06580:  MOVWF  xF9
06582:  MOVLW  0A
06584:  MOVLB  0
06586:  BTFSS  FA6.6
06588:  GOTO   6586
0658C:  MOVLB  E
0658E:  MOVWF  xF9
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
06590:  MOVLW  F2
06592:  MOVWF  FF6
06594:  MOVLW  1C
06596:  MOVWF  FF7
06598:  MOVLW  00
0659A:  MOVWF  FF8
0659C:  MOVLW  0E
0659E:  MOVLB  A
065A0:  MOVWF  x4E
065A2:  MOVLB  0
065A4:  CALL   2334
065A8:  MOVFF  1B5,9E8
065AC:  MOVLW  37
065AE:  MOVLB  9
065B0:  MOVWF  xE9
065B2:  MOVLB  0
065B4:  CALL   2564
065B8:  MOVFF  1B4,9E8
065BC:  MOVLW  37
065BE:  MOVLB  9
065C0:  MOVWF  xE9
065C2:  MOVLB  0
065C4:  CALL   2564
065C8:  MOVFF  1B3,9E8
065CC:  MOVLW  37
065CE:  MOVLB  9
065D0:  MOVWF  xE9
065D2:  MOVLB  0
065D4:  CALL   2564
065D8:  MOVFF  1B2,9E8
065DC:  MOVLW  37
065DE:  MOVLB  9
065E0:  MOVWF  xE9
065E2:  MOVLB  0
065E4:  CALL   2564
065E8:  MOVLW  0D
065EA:  BTFSS  FA6.6
065EC:  GOTO   65EA
065F0:  MOVLB  E
065F2:  MOVWF  xF9
065F4:  MOVLW  0A
065F6:  MOVLB  0
065F8:  BTFSS  FA6.6
065FA:  GOTO   65F8
065FE:  MOVLB  E
06600:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
06602:  MOVLW  08
06604:  MOVWF  FF6
06606:  MOVLW  1D
06608:  MOVWF  FF7
0660A:  MOVLW  00
0660C:  MOVWF  FF8
0660E:  MOVLW  0E
06610:  MOVLB  A
06612:  MOVWF  x4E
06614:  MOVLB  0
06616:  CALL   2334
0661A:  MOVFF  1B7,9E8
0661E:  MOVLW  37
06620:  MOVLB  9
06622:  MOVWF  xE9
06624:  MOVLB  0
06626:  CALL   2564
0662A:  MOVFF  1B6,9E8
0662E:  MOVLW  37
06630:  MOVLB  9
06632:  MOVWF  xE9
06634:  MOVLB  0
06636:  CALL   2564
0663A:  MOVLW  0D
0663C:  BTFSS  FA6.6
0663E:  GOTO   663C
06642:  MOVLB  E
06644:  MOVWF  xF9
06646:  MOVLW  0A
06648:  MOVLB  0
0664A:  BTFSS  FA6.6
0664C:  GOTO   664A
06650:  MOVLB  E
06652:  MOVWF  xF9
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
06654:  MOVFF  1B1,20F
06658:  MOVLB  2
0665A:  CLRF   x10
0665C:  MOVLB  0
0665E:  CALL   510C
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
06662:  MOVLW  1E
06664:  MOVWF  FF6
06666:  MOVLW  1D
06668:  MOVWF  FF7
0666A:  MOVLW  00
0666C:  MOVWF  FF8
0666E:  CALL   22FE
....................    for (p = 0; p < flash_write_param.packetnum; p++)
06672:  MOVLB  1
06674:  CLRF   xF9
06676:  CLRF   xF8
06678:  MOVLB  0
0667A:  MOVLB  1
0667C:  MOVF   xF9,W
0667E:  SUBWF  xB7,W
06680:  BTFSC  FD8.0
06682:  BRA    668A
06684:  MOVLB  0
06686:  GOTO   6A04
0668A:  MOVLB  0
0668C:  BTFSS  FD8.2
0668E:  GOTO   66A4
06692:  MOVLB  1
06694:  MOVF   xB6,W
06696:  SUBWF  xF8,W
06698:  BTFSS  FD8.0
0669A:  BRA    66A2
0669C:  MOVLB  0
0669E:  GOTO   6A04
066A2:  MOVLB  0
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
066A4:  MOVLB  1
066A6:  RLCF   xF8,W
066A8:  MOVWF  xFA
066AA:  RLCF   xF9,W
066AC:  MOVWF  xFB
066AE:  RLCF   xFA,F
066B0:  RLCF   xFB,F
066B2:  RLCF   xFA,F
066B4:  RLCF   xFB,F
066B6:  RLCF   xFA,F
066B8:  RLCF   xFB,F
066BA:  RLCF   xFA,F
066BC:  RLCF   xFB,F
066BE:  RLCF   xFA,F
066C0:  RLCF   xFB,F
066C2:  MOVLW  C0
066C4:  ANDWF  xFA,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
066C6:  CLRF   xFC
066C8:  MOVLB  0
066CA:  MOVLB  1
066CC:  MOVF   xFC,W
066CE:  SUBLW  3F
066D0:  BTFSC  FD8.0
066D2:  BRA    66DA
066D4:  MOVLB  0
066D6:  GOTO   6744
066DA:  MOVLB  0
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
066DC:  CLRF   03
066DE:  MOVLB  1
066E0:  MOVF   xFC,W
066E2:  ADDLW  B8
066E4:  MOVWF  FE9
066E6:  MOVLW  01
066E8:  ADDWFC 03,W
066EA:  MOVWF  FEA
066EC:  MOVF   xFC,W
066EE:  ADDWF  xFA,W
066F0:  MOVLB  2
066F2:  MOVWF  x07
066F4:  MOVLW  00
066F6:  MOVLB  1
066F8:  ADDWFC xFB,W
066FA:  MOVLB  2
066FC:  MOVWF  x08
066FE:  MOVF   x07,W
06700:  MOVWF  00
06702:  CLRF   03
06704:  MOVF   00,W
06706:  MOVWF  FEF
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
06708:  CLRF   03
0670A:  MOVLB  1
0670C:  MOVF   xFC,W
0670E:  ADDLW  B8
06710:  MOVWF  FE9
06712:  MOVLW  01
06714:  ADDWFC 03,W
06716:  MOVWF  FEA
06718:  MOVFF  FEF,205
0671C:  MOVFF  205,9E8
06720:  MOVLW  37
06722:  MOVLB  9
06724:  MOVWF  xE9
06726:  MOVLB  0
06728:  CALL   2564
0672C:  MOVLW  20
0672E:  BTFSS  FA6.6
06730:  GOTO   672E
06734:  MOVLB  E
06736:  MOVWF  xF9
06738:  MOVLB  0
0673A:  MOVLB  1
0673C:  INCF   xFC,F
0673E:  MOVLB  0
06740:  GOTO   66CA
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
06744:  MOVLB  1
06746:  RLCF   xF8,W
06748:  MOVWF  02
0674A:  RLCF   xF9,W
0674C:  MOVWF  03
0674E:  RLCF   02,F
06750:  RLCF   03,F
06752:  RLCF   02,F
06754:  RLCF   03,F
06756:  RLCF   02,F
06758:  RLCF   03,F
0675A:  RLCF   02,F
0675C:  RLCF   03,F
0675E:  RLCF   02,F
06760:  RLCF   03,F
06762:  MOVLW  C0
06764:  ANDWF  02,F
06766:  MOVF   02,W
06768:  ADDWF  xB2,W
0676A:  MOVWF  xFD
0676C:  MOVF   03,W
0676E:  ADDWFC xB3,W
06770:  MOVWF  xFE
06772:  MOVLW  00
06774:  ADDWFC xB4,W
06776:  MOVWF  xFF
06778:  MOVLW  00
0677A:  ADDWFC xB5,W
0677C:  MOVLB  2
0677E:  MOVWF  x00
....................       // FLASH 終端チェック (MISF_END は最終アドレス想定: inclusive)
....................       if(current_address > MISF_END){
06780:  MOVF   x00,F
06782:  BTFSC  FD8.2
06784:  BRA    678C
06786:  MOVLB  0
06788:  GOTO   67BA
0678C:  MOVLB  0
0678E:  MOVLB  1
06790:  MOVF   xFF,W
06792:  SUBLW  BB
06794:  BTFSS  FD8.0
06796:  BRA    679E
06798:  MOVLB  0
0679A:  GOTO   6890
0679E:  MOVLB  0
067A0:  XORLW  FF
067A2:  BTFSS  FD8.2
067A4:  GOTO   67BA
067A8:  MOVLB  1
067AA:  MOVF   xFE,W
067AC:  SUBLW  0F
067AE:  BTFSS  FD8.0
067B0:  BRA    67B8
067B2:  MOVLB  0
067B4:  GOTO   6890
067B8:  MOVLB  0
....................          fprintf(PC, "\r\n[FLASH] Write address 0x%08LX exceeds device end 0x%08LX -> abort\r\n", current_address, (unsigned int32)MISF_END);
067BA:  MOVLW  2C
067BC:  MOVWF  FF6
067BE:  MOVLW  1D
067C0:  MOVWF  FF7
067C2:  MOVLW  00
067C4:  MOVWF  FF8
067C6:  MOVLW  1A
067C8:  MOVLB  A
067CA:  MOVWF  x4E
067CC:  MOVLB  0
067CE:  CALL   2334
067D2:  MOVFF  200,9E8
067D6:  MOVLW  37
067D8:  MOVLB  9
067DA:  MOVWF  xE9
067DC:  MOVLB  0
067DE:  CALL   2564
067E2:  MOVFF  1FF,9E8
067E6:  MOVLW  37
067E8:  MOVLB  9
067EA:  MOVWF  xE9
067EC:  MOVLB  0
067EE:  CALL   2564
067F2:  MOVFF  1FE,9E8
067F6:  MOVLW  37
067F8:  MOVLB  9
067FA:  MOVWF  xE9
067FC:  MOVLB  0
067FE:  CALL   2564
06802:  MOVFF  1FD,9E8
06806:  MOVLW  37
06808:  MOVLB  9
0680A:  MOVWF  xE9
0680C:  MOVLB  0
0680E:  CALL   2564
06812:  MOVLW  4B
06814:  MOVWF  FF6
06816:  MOVLW  1D
06818:  MOVWF  FF7
0681A:  MOVLW  00
0681C:  MOVWF  FF8
0681E:  MOVLW  16
06820:  MOVLB  A
06822:  MOVWF  x4E
06824:  MOVLB  0
06826:  CALL   2334
0682A:  MOVLB  9
0682C:  CLRF   xE8
0682E:  MOVLW  37
06830:  MOVWF  xE9
06832:  MOVLB  0
06834:  CALL   2564
06838:  MOVLW  BC
0683A:  MOVLB  9
0683C:  MOVWF  xE8
0683E:  MOVLW  37
06840:  MOVWF  xE9
06842:  MOVLB  0
06844:  CALL   2564
06848:  MOVLW  0F
0684A:  MOVLB  9
0684C:  MOVWF  xE8
0684E:  MOVLW  37
06850:  MOVWF  xE9
06852:  MOVLB  0
06854:  CALL   2564
06858:  MOVLB  9
0685A:  SETF   xE8
0685C:  MOVLW  37
0685E:  MOVWF  xE9
06860:  MOVLB  0
06862:  CALL   2564
06866:  MOVLW  66
06868:  MOVWF  FF6
0686A:  MOVLW  1D
0686C:  MOVWF  FF7
0686E:  MOVLW  00
06870:  MOVWF  FF8
06872:  MOVLW  0B
06874:  MOVLB  A
06876:  MOVWF  x4E
06878:  MOVLB  0
0687A:  CALL   2334
....................          piclog_make(flash_write_param.id, PICLOG_PARAM_END);
0687E:  MOVFF  1B1,20F
06882:  MOVLB  2
06884:  SETF   x10
06886:  MOVLB  0
06888:  CALL   510C
....................          break;
0688C:  GOTO   6A04
....................       }
....................       if(current_address + (PACKET_SIZE - 1) > MISF_END){
06890:  MOVLW  3F
06892:  MOVLB  1
06894:  ADDWF  xFD,W
06896:  MOVLB  2
06898:  MOVWF  x05
0689A:  MOVLW  00
0689C:  MOVLB  1
0689E:  ADDWFC xFE,W
068A0:  MOVLB  2
068A2:  MOVWF  x06
068A4:  MOVLW  00
068A6:  MOVLB  1
068A8:  ADDWFC xFF,W
068AA:  MOVLB  2
068AC:  MOVWF  x07
068AE:  MOVLW  00
068B0:  ADDWFC x00,W
068B2:  MOVWF  x08
068B4:  MOVF   x08,F
068B6:  BTFSC  FD8.2
068B8:  BRA    68C0
068BA:  MOVLB  0
068BC:  GOTO   68EE
068C0:  MOVLB  0
068C2:  MOVLB  2
068C4:  MOVF   x07,W
068C6:  SUBLW  BB
068C8:  BTFSS  FD8.0
068CA:  BRA    68D2
068CC:  MOVLB  0
068CE:  GOTO   69C0
068D2:  MOVLB  0
068D4:  XORLW  FF
068D6:  BTFSS  FD8.2
068D8:  GOTO   68EE
068DC:  MOVLB  2
068DE:  MOVF   x06,W
068E0:  SUBLW  0F
068E2:  BTFSS  FD8.0
068E4:  BRA    68EC
068E6:  MOVLB  0
068E8:  GOTO   69C0
068EC:  MOVLB  0
....................          unsigned int32 remain = (MISF_END - current_address) + 1; // 書込可能残り
068EE:  MOVLW  FF
068F0:  BSF    FD8.0
068F2:  MOVLB  1
068F4:  SUBFWB xFD,W
068F6:  MOVLB  2
068F8:  MOVWF  x05
068FA:  MOVLW  0F
068FC:  MOVLB  1
068FE:  SUBFWB xFE,W
06900:  MOVLB  2
06902:  MOVWF  x06
06904:  MOVLW  BC
06906:  MOVLB  1
06908:  SUBFWB xFF,W
0690A:  MOVLB  2
0690C:  MOVWF  x07
0690E:  MOVLW  00
06910:  SUBFWB x00,W
06912:  MOVWF  x08
06914:  MOVLW  01
06916:  ADDWF  x05,W
06918:  MOVWF  x01
0691A:  MOVLW  00
0691C:  ADDWFC x06,W
0691E:  MOVWF  x02
06920:  MOVLW  00
06922:  ADDWFC x07,W
06924:  MOVWF  x03
06926:  MOVLW  00
06928:  ADDWFC x08,W
0692A:  MOVWF  x04
0692C:  MOVLB  0
....................          fprintf(PC, "\r\n[FLASH] Reached end. Partial write %lu bytes (packet truncated).\r\n", remain);
0692E:  MOVLW  72
06930:  MOVWF  FF6
06932:  MOVLW  1D
06934:  MOVWF  FF7
06936:  MOVLW  00
06938:  MOVWF  FF8
0693A:  MOVLW  25
0693C:  MOVLB  A
0693E:  MOVWF  x4E
06940:  MOVLB  0
06942:  CALL   2334
06946:  MOVLW  41
06948:  MOVWF  FE9
0694A:  MOVFF  204,209
0694E:  MOVFF  203,208
06952:  MOVFF  202,207
06956:  MOVFF  201,206
0695A:  CALL   62F2
0695E:  MOVLW  9A
06960:  MOVWF  FF6
06962:  MOVLW  1D
06964:  MOVWF  FF7
06966:  MOVLW  00
06968:  MOVWF  FF8
0696A:  MOVLW  1C
0696C:  MOVLB  A
0696E:  MOVWF  x4E
06970:  MOVLB  0
06972:  CALL   2334
....................          write_data_bytes(mis_fm, current_address, writedata, (unsigned int16)remain);
06976:  MOVFF  115,AEE
0697A:  MOVFF  114,AED
0697E:  MOVFF  113,AEC
06982:  MOVFF  112,AEB
06986:  MOVFF  200,AF2
0698A:  MOVFF  1FF,AF1
0698E:  MOVFF  1FE,AF0
06992:  MOVFF  1FD,AEF
06996:  MOVLW  01
06998:  MOVLB  A
0699A:  MOVWF  xF4
0699C:  MOVLW  B8
0699E:  MOVWF  xF3
069A0:  MOVFF  202,AF6
069A4:  MOVFF  201,AF5
069A8:  MOVLB  0
069AA:  CALL   3F56
....................          piclog_make(flash_write_param.id, PICLOG_PARAM_END);
069AE:  MOVFF  1B1,20F
069B2:  MOVLB  2
069B4:  SETF   x10
069B6:  MOVLB  0
069B8:  CALL   510C
....................          break;
069BC:  GOTO   6A04
....................       }
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
069C0:  MOVFF  115,AEE
069C4:  MOVFF  114,AED
069C8:  MOVFF  113,AEC
069CC:  MOVFF  112,AEB
069D0:  MOVFF  200,AF2
069D4:  MOVFF  1FF,AF1
069D8:  MOVFF  1FE,AF0
069DC:  MOVFF  1FD,AEF
069E0:  MOVLW  01
069E2:  MOVLB  A
069E4:  MOVWF  xF4
069E6:  MOVLW  B8
069E8:  MOVWF  xF3
069EA:  CLRF   xF6
069EC:  MOVLW  40
069EE:  MOVWF  xF5
069F0:  MOVLB  0
069F2:  CALL   3F56
069F6:  MOVLB  1
069F8:  INCF   xF8,F
069FA:  BTFSC  FD8.2
069FC:  INCF   xF9,F
069FE:  MOVLB  0
06A00:  GOTO   667A
....................    }
.................... 
....................    piclog_make(flash_write_param.id, PICLOG_PARAM_END); // Log the end of the command execution
06A04:  MOVFF  1B1,20F
06A08:  MOVLB  2
06A0A:  SETF   x10
06A0C:  MOVLB  0
06A0E:  CALL   510C
....................    fprintf(PC, "\r\n");
06A12:  MOVLW  0D
06A14:  BTFSS  FA6.6
06A16:  GOTO   6A14
06A1A:  MOVLB  E
06A1C:  MOVWF  xF9
06A1E:  MOVLW  0A
06A20:  MOVLB  0
06A22:  BTFSS  FA6.6
06A24:  GOTO   6A22
06A28:  MOVLB  E
06A2A:  MOVWF  xF9
....................    fprintf(PC, "End Flash Write Demo\r\n");
06A2C:  MOVLW  B8
06A2E:  MOVWF  FF6
06A30:  MOVLW  1D
06A32:  MOVWF  FF7
06A34:  MOVLW  00
06A36:  MOVWF  FF8
06A38:  MOVLB  0
06A3A:  CALL   22FE
06A3E:  GOTO   101CA (RETURN)
.................... }
.................... 
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
*
06A72:  MOVLW  D0
06A74:  MOVWF  FF6
06A76:  MOVLW  1D
06A78:  MOVWF  FF7
06A7A:  MOVLW  00
06A7C:  MOVWF  FF8
06A7E:  CALL   22FE
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
06A82:  MOVLB  1
06A84:  MOVF   xAF,W
06A86:  MOVWF  FE9
06A88:  MOVF   xB0,W
06A8A:  MOVWF  FEA
06A8C:  MOVFF  FEF,1B5
06A90:  MOVFF  1B5,20F
06A94:  MOVLB  2
06A96:  CLRF   x10
06A98:  MOVLB  0
06A9A:  CALL   510C
....................    flash_setting(mis_fm);
06A9E:  MOVFF  115,2BD
06AA2:  MOVFF  114,2BC
06AA6:  MOVFF  113,2BB
06AAA:  MOVFF  112,2BA
06AAE:  CALL   6A42
....................    unsigned int32 write_address = 0x00000000;
06AB2:  MOVLB  1
06AB4:  CLRF   xB4
06AB6:  CLRF   xB3
06AB8:  CLRF   xB2
06ABA:  CLRF   xB1
....................    //int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
....................    //write_data_bytes(mis_fm, write_address, write_data, 256);
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06ABC:  MOVF   xAF,W
06ABE:  MOVWF  FE9
06AC0:  MOVF   xB0,W
06AC2:  MOVWF  FEA
06AC4:  MOVFF  FEF,1B5
06AC8:  MOVFF  1B5,20F
06ACC:  MOVLB  2
06ACE:  SETF   x10
06AD0:  MOVLB  0
06AD2:  CALL   510C
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
06AD6:  MOVLW  F6
06AD8:  MOVWF  FF6
06ADA:  MOVLW  1D
06ADC:  MOVWF  FF7
06ADE:  MOVLW  00
06AE0:  MOVWF  FF8
06AE2:  CALL   22FE
06AE6:  GOTO   101DA (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
06AEA:  MOVLW  1A
06AEC:  MOVWF  FF6
06AEE:  MOVLW  1E
06AF0:  MOVWF  FF7
06AF2:  MOVLW  00
06AF4:  MOVWF  FF8
06AF6:  CALL   22FE
.................... 
.................... 
....................    FLASH_PARAM flash_param = {0};
06AFA:  MOVLB  1
06AFC:  CLRF   xB1
06AFE:  CLRF   xB2
06B00:  CLRF   xB3
06B02:  CLRF   xB4
06B04:  CLRF   xB5
06B06:  CLRF   xB6
06B08:  CLRF   xB7
....................    flash_param.id = uplinkcmd_ptr[0];
06B0A:  MOVF   xAF,W
06B0C:  MOVWF  FE9
06B0E:  MOVF   xB0,W
06B10:  MOVWF  FEA
06B12:  MOVFF  FEF,1B1
....................    flash_param.readaddress = -
....................       ((unsigned int32)uplinkcmd_ptr[1] << 24) |
....................       ((unsigned int32)uplinkcmd_ptr[2] << 16) |
....................       ((unsigned int32)uplinkcmd_ptr[3] << 8)  |
....................       ((unsigned int32)uplinkcmd_ptr[4]);
06B16:  MOVLW  01
06B18:  ADDWF  xAF,W
06B1A:  MOVWF  FE9
06B1C:  MOVLW  00
06B1E:  ADDWFC xB0,W
06B20:  MOVWF  FEA
06B22:  MOVF   FEF,W
06B24:  MOVLB  2
06B26:  CLRF   x09
06B28:  CLRF   x08
06B2A:  CLRF   x07
06B2C:  MOVWF  x06
06B2E:  MOVFF  206,03
06B32:  CLRF   00
06B34:  CLRF   01
06B36:  CLRF   02
06B38:  MOVLW  00
06B3A:  BSF    FD8.0
06B3C:  SUBFWB 00,W
06B3E:  MOVWF  x06
06B40:  MOVLW  00
06B42:  SUBFWB 01,W
06B44:  MOVWF  x07
06B46:  MOVLW  00
06B48:  SUBFWB 02,W
06B4A:  MOVWF  x08
06B4C:  MOVLW  00
06B4E:  SUBFWB 03,W
06B50:  MOVWF  x09
06B52:  MOVLW  02
06B54:  MOVLB  1
06B56:  ADDWF  xAF,W
06B58:  MOVWF  FE9
06B5A:  MOVLW  00
06B5C:  ADDWFC xB0,W
06B5E:  MOVWF  FEA
06B60:  MOVF   FEF,W
06B62:  MOVLB  2
06B64:  CLRF   x0E
06B66:  CLRF   x0D
06B68:  CLRF   x0C
06B6A:  MOVWF  x0B
06B6C:  MOVFF  20C,03
06B70:  MOVFF  20B,02
06B74:  CLRF   00
06B76:  CLRF   01
06B78:  MOVF   00,W
06B7A:  IORWF  x06,F
06B7C:  MOVF   01,W
06B7E:  IORWF  x07,F
06B80:  MOVF   02,W
06B82:  IORWF  x08,F
06B84:  MOVF   03,W
06B86:  IORWF  x09,F
06B88:  MOVLW  03
06B8A:  MOVLB  1
06B8C:  ADDWF  xAF,W
06B8E:  MOVWF  FE9
06B90:  MOVLW  00
06B92:  ADDWFC xB0,W
06B94:  MOVWF  FEA
06B96:  MOVF   FEF,W
06B98:  MOVLB  2
06B9A:  CLRF   x0E
06B9C:  CLRF   x0D
06B9E:  CLRF   x0C
06BA0:  MOVWF  x0B
06BA2:  MOVFF  20D,03
06BA6:  MOVFF  20C,02
06BAA:  MOVFF  20B,01
06BAE:  CLRF   00
06BB0:  MOVF   00,W
06BB2:  IORWF  x06,F
06BB4:  MOVF   01,W
06BB6:  IORWF  x07,F
06BB8:  MOVF   02,W
06BBA:  IORWF  x08,F
06BBC:  MOVF   03,W
06BBE:  IORWF  x09,F
06BC0:  MOVLW  04
06BC2:  MOVLB  1
06BC4:  ADDWF  xAF,W
06BC6:  MOVWF  FE9
06BC8:  MOVLW  00
06BCA:  ADDWFC xB0,W
06BCC:  MOVWF  FEA
06BCE:  MOVF   FEF,W
06BD0:  MOVWF  00
06BD2:  CLRF   01
06BD4:  CLRF   02
06BD6:  CLRF   03
06BD8:  MOVF   00,W
06BDA:  MOVLB  2
06BDC:  IORWF  x06,W
06BDE:  MOVLB  1
06BE0:  MOVWF  xB4
06BE2:  MOVF   01,W
06BE4:  MOVLB  2
06BE6:  IORWF  x07,W
06BE8:  MOVLB  1
06BEA:  MOVWF  xB5
06BEC:  MOVF   02,W
06BEE:  MOVLB  2
06BF0:  IORWF  x08,W
06BF2:  MOVLB  1
06BF4:  MOVWF  xB6
06BF6:  MOVF   03,W
06BF8:  MOVLB  2
06BFA:  IORWF  x09,W
06BFC:  MOVLB  1
06BFE:  MOVWF  xB7
....................    flash_param.readpacketnum = 
....................       ((unsigned int16)uplinkcmd_ptr[6] << 8) |
....................       ((unsigned int16)uplinkcmd_ptr[7]);
06C00:  MOVLW  06
06C02:  ADDWF  xAF,W
06C04:  MOVWF  FE9
06C06:  MOVLW  00
06C08:  ADDWFC xB0,W
06C0A:  MOVWF  FEA
06C0C:  MOVF   FEF,W
06C0E:  MOVLB  2
06C10:  CLRF   x07
06C12:  MOVWF  x06
06C14:  MOVFF  206,207
06C18:  CLRF   x06
06C1A:  MOVLW  07
06C1C:  MOVLB  1
06C1E:  ADDWF  xAF,W
06C20:  MOVWF  FE9
06C22:  MOVLW  00
06C24:  ADDWFC xB0,W
06C26:  MOVWF  FEA
06C28:  MOVF   FEF,W
06C2A:  CLRF   03
06C2C:  MOVLB  2
06C2E:  IORWF  x06,W
06C30:  MOVLB  1
06C32:  MOVWF  xB2
06C34:  MOVF   03,W
06C36:  MOVLB  2
06C38:  IORWF  x07,W
06C3A:  MOVLB  1
06C3C:  MOVWF  xB3
....................       piclog_make(flash_param.id, PICLOG_PARAM_START); // Log the command execution
06C3E:  MOVFF  1B1,20F
06C42:  MOVLB  2
06C44:  CLRF   x10
06C46:  MOVLB  0
06C48:  CALL   510C
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
06C4C:  MOVLW  2E
06C4E:  MOVWF  FF6
06C50:  MOVLW  1E
06C52:  MOVWF  FF7
06C54:  MOVLW  00
06C56:  MOVWF  FF8
06C58:  MOVLW  0C
06C5A:  MOVLB  A
06C5C:  MOVWF  x4E
06C5E:  MOVLB  0
06C60:  CALL   2334
06C64:  MOVFF  1B1,9E8
06C68:  MOVLW  37
06C6A:  MOVLB  9
06C6C:  MOVWF  xE9
06C6E:  MOVLB  0
06C70:  CALL   2564
06C74:  MOVLW  0D
06C76:  BTFSS  FA6.6
06C78:  GOTO   6C76
06C7C:  MOVLB  E
06C7E:  MOVWF  xF9
06C80:  MOVLW  0A
06C82:  MOVLB  0
06C84:  BTFSS  FA6.6
06C86:  GOTO   6C84
06C8A:  MOVLB  E
06C8C:  MOVWF  xF9
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
06C8E:  MOVLW  42
06C90:  MOVWF  FF6
06C92:  MOVLW  1E
06C94:  MOVWF  FF7
06C96:  MOVLW  00
06C98:  MOVWF  FF8
06C9A:  MOVLW  0E
06C9C:  MOVLB  A
06C9E:  MOVWF  x4E
06CA0:  MOVLB  0
06CA2:  CALL   2334
06CA6:  MOVFF  1B7,9E8
06CAA:  MOVLW  37
06CAC:  MOVLB  9
06CAE:  MOVWF  xE9
06CB0:  MOVLB  0
06CB2:  CALL   2564
06CB6:  MOVFF  1B6,9E8
06CBA:  MOVLW  37
06CBC:  MOVLB  9
06CBE:  MOVWF  xE9
06CC0:  MOVLB  0
06CC2:  CALL   2564
06CC6:  MOVFF  1B5,9E8
06CCA:  MOVLW  37
06CCC:  MOVLB  9
06CCE:  MOVWF  xE9
06CD0:  MOVLB  0
06CD2:  CALL   2564
06CD6:  MOVFF  1B4,9E8
06CDA:  MOVLW  37
06CDC:  MOVLB  9
06CDE:  MOVWF  xE9
06CE0:  MOVLB  0
06CE2:  CALL   2564
06CE6:  MOVLW  0D
06CE8:  BTFSS  FA6.6
06CEA:  GOTO   6CE8
06CEE:  MOVLB  E
06CF0:  MOVWF  xF9
06CF2:  MOVLW  0A
06CF4:  MOVLB  0
06CF6:  BTFSS  FA6.6
06CF8:  GOTO   6CF6
06CFC:  MOVLB  E
06CFE:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
06D00:  MOVLW  58
06D02:  MOVWF  FF6
06D04:  MOVLW  1E
06D06:  MOVWF  FF7
06D08:  MOVLW  00
06D0A:  MOVWF  FF8
06D0C:  MOVLW  0E
06D0E:  MOVLB  A
06D10:  MOVWF  x4E
06D12:  MOVLB  0
06D14:  CALL   2334
06D18:  MOVFF  1B3,9E8
06D1C:  MOVLW  37
06D1E:  MOVLB  9
06D20:  MOVWF  xE9
06D22:  MOVLB  0
06D24:  CALL   2564
06D28:  MOVFF  1B2,9E8
06D2C:  MOVLW  37
06D2E:  MOVLB  9
06D30:  MOVWF  xE9
06D32:  MOVLB  0
06D34:  CALL   2564
06D38:  MOVLW  0D
06D3A:  BTFSS  FA6.6
06D3C:  GOTO   6D3A
06D40:  MOVLB  E
06D42:  MOVWF  xF9
06D44:  MOVLW  0A
06D46:  MOVLB  0
06D48:  BTFSS  FA6.6
06D4A:  GOTO   6D48
06D4E:  MOVLB  E
06D50:  MOVWF  xF9
....................    
....................    piclog_make(flash_param.id, 0x00);
06D52:  MOVFF  1B1,20F
06D56:  MOVLB  2
06D58:  CLRF   x10
06D5A:  MOVLB  0
06D5C:  CALL   510C
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
06D60:  MOVLB  1
06D62:  CLRF   xB8
06D64:  CLRF   xB9
06D66:  CLRF   xBA
06D68:  CLRF   xBB
06D6A:  CLRF   xBC
06D6C:  CLRF   xBD
06D6E:  CLRF   xBE
06D70:  CLRF   xBF
06D72:  CLRF   xC0
06D74:  CLRF   xC1
06D76:  CLRF   xC2
06D78:  CLRF   xC3
06D7A:  CLRF   xC4
06D7C:  CLRF   xC5
06D7E:  CLRF   xC6
06D80:  CLRF   xC7
06D82:  CLRF   xC8
06D84:  CLRF   xC9
06D86:  CLRF   xCA
06D88:  CLRF   xCB
06D8A:  CLRF   xCC
06D8C:  CLRF   xCD
06D8E:  CLRF   xCE
06D90:  CLRF   xCF
06D92:  CLRF   xD0
06D94:  CLRF   xD1
06D96:  CLRF   xD2
06D98:  CLRF   xD3
06D9A:  CLRF   xD4
06D9C:  CLRF   xD5
06D9E:  CLRF   xD6
06DA0:  CLRF   xD7
06DA2:  CLRF   xD8
06DA4:  CLRF   xD9
06DA6:  CLRF   xDA
06DA8:  CLRF   xDB
06DAA:  CLRF   xDC
06DAC:  CLRF   xDD
06DAE:  CLRF   xDE
06DB0:  CLRF   xDF
06DB2:  CLRF   xE0
06DB4:  CLRF   xE1
06DB6:  CLRF   xE2
06DB8:  CLRF   xE3
06DBA:  CLRF   xE4
06DBC:  CLRF   xE5
06DBE:  CLRF   xE6
06DC0:  CLRF   xE7
06DC2:  CLRF   xE8
06DC4:  CLRF   xE9
06DC6:  CLRF   xEA
06DC8:  CLRF   xEB
06DCA:  CLRF   xEC
06DCC:  CLRF   xED
06DCE:  CLRF   xEE
06DD0:  CLRF   xEF
06DD2:  CLRF   xF0
06DD4:  CLRF   xF1
06DD6:  CLRF   xF2
06DD8:  CLRF   xF3
06DDA:  CLRF   xF4
06DDC:  CLRF   xF5
06DDE:  CLRF   xF6
06DE0:  CLRF   xF7
....................    unsigned int32 read_address;
....................    fprintf(PC, "ADDRESS  :\r\n");
06DE2:  MOVLW  6E
06DE4:  MOVWF  FF6
06DE6:  MOVLW  1E
06DE8:  MOVWF  FF7
06DEA:  MOVLW  00
06DEC:  MOVWF  FF8
06DEE:  MOVLB  0
06DF0:  CALL   22FE
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
06DF4:  MOVFF  115,253
06DF8:  MOVFF  114,252
06DFC:  MOVFF  113,251
06E00:  MOVFF  112,250
06E04:  CALL   2E24
06E08:  MOVF   01,F
06E0A:  BTFSS  FD8.2
06E0C:  GOTO   6E32
....................       fprintf(PC, "Mission Flash is not connected\r\n");
06E10:  MOVLW  7C
06E12:  MOVWF  FF6
06E14:  MOVLW  1E
06E16:  MOVWF  FF7
06E18:  MOVLW  00
06E1A:  MOVWF  FF8
06E1C:  CALL   22FE
....................       piclog_make(flash_param.id, PICLOG_PARAM_END);
06E20:  MOVFF  1B1,20F
06E24:  MOVLB  2
06E26:  SETF   x10
06E28:  MOVLB  0
06E2A:  CALL   510C
....................       return; // FIX: 接続失敗時終了
06E2E:  GOTO   72EA
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
06E32:  MOVLB  1
06E34:  CLRF   xFF
06E36:  CLRF   xFE
06E38:  CLRF   xFD
06E3A:  CLRF   xFC
06E3C:  MOVLB  0
06E3E:  MOVLB  1
06E40:  MOVF   xFF,F
06E42:  BTFSC  FD8.2
06E44:  BRA    6E4C
06E46:  MOVLB  0
06E48:  GOTO   72CC
06E4C:  MOVLB  0
06E4E:  MOVLB  1
06E50:  MOVF   xFE,F
06E52:  BTFSC  FD8.2
06E54:  BRA    6E5C
06E56:  MOVLB  0
06E58:  GOTO   72CC
06E5C:  MOVLB  0
06E5E:  MOVLB  1
06E60:  MOVF   xFD,W
06E62:  SUBWF  xB3,W
06E64:  BTFSC  FD8.0
06E66:  BRA    6E6E
06E68:  MOVLB  0
06E6A:  GOTO   72CC
06E6E:  MOVLB  0
06E70:  BTFSS  FD8.2
06E72:  GOTO   6E88
06E76:  MOVLB  1
06E78:  MOVF   xB2,W
06E7A:  SUBWF  xFC,W
06E7C:  BTFSS  FD8.0
06E7E:  BRA    6E86
06E80:  MOVLB  0
06E82:  GOTO   72CC
06E86:  MOVLB  0
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
06E88:  MOVLB  1
06E8A:  RLCF   xFC,W
06E8C:  MOVWF  00
06E8E:  RLCF   xFD,W
06E90:  MOVWF  01
06E92:  RLCF   xFE,W
06E94:  MOVWF  02
06E96:  RLCF   xFF,W
06E98:  MOVWF  03
06E9A:  RLCF   00,F
06E9C:  RLCF   01,F
06E9E:  RLCF   02,F
06EA0:  RLCF   03,F
06EA2:  RLCF   00,F
06EA4:  RLCF   01,F
06EA6:  RLCF   02,F
06EA8:  RLCF   03,F
06EAA:  RLCF   00,F
06EAC:  RLCF   01,F
06EAE:  RLCF   02,F
06EB0:  RLCF   03,F
06EB2:  RLCF   00,F
06EB4:  RLCF   01,F
06EB6:  RLCF   02,F
06EB8:  RLCF   03,F
06EBA:  RLCF   00,F
06EBC:  RLCF   01,F
06EBE:  RLCF   02,F
06EC0:  RLCF   03,F
06EC2:  MOVLW  C0
06EC4:  ANDWF  00,F
06EC6:  MOVF   00,W
06EC8:  ADDWF  xB4,W
06ECA:  MOVWF  xF8
06ECC:  MOVF   01,W
06ECE:  ADDWFC xB5,W
06ED0:  MOVWF  xF9
06ED2:  MOVF   02,W
06ED4:  ADDWFC xB6,W
06ED6:  MOVWF  xFA
06ED8:  MOVF   03,W
06EDA:  ADDWFC xB7,W
06EDC:  MOVWF  xFB
....................       // fprintf(PC, "ADDRESS 0x%08LX DATA ",read_address);
....................       // 終端チェック
....................       if(read_address > MISF_END){
06EDE:  MOVF   xFB,F
06EE0:  BTFSC  FD8.2
06EE2:  BRA    6EEA
06EE4:  MOVLB  0
06EE6:  GOTO   6F18
06EEA:  MOVLB  0
06EEC:  MOVLB  1
06EEE:  MOVF   xFA,W
06EF0:  SUBLW  BB
06EF2:  BTFSS  FD8.0
06EF4:  BRA    6EFC
06EF6:  MOVLB  0
06EF8:  GOTO   6FE0
06EFC:  MOVLB  0
06EFE:  XORLW  FF
06F00:  BTFSS  FD8.2
06F02:  GOTO   6F18
06F06:  MOVLB  1
06F08:  MOVF   xF9,W
06F0A:  SUBLW  0F
06F0C:  BTFSS  FD8.0
06F0E:  BRA    6F16
06F10:  MOVLB  0
06F12:  GOTO   6FE0
06F16:  MOVLB  0
....................          fprintf(PC, "[FLASH] Read address 0x%08LX exceeds device end 0x%08LX -> stop\r\n", read_address, (unsigned int32)MISF_END);
06F18:  MOVLW  9E
06F1A:  MOVWF  FF6
06F1C:  MOVLW  1E
06F1E:  MOVWF  FF7
06F20:  MOVLW  00
06F22:  MOVWF  FF8
06F24:  MOVLW  17
06F26:  MOVLB  A
06F28:  MOVWF  x4E
06F2A:  MOVLB  0
06F2C:  CALL   2334
06F30:  MOVFF  1FB,9E8
06F34:  MOVLW  37
06F36:  MOVLB  9
06F38:  MOVWF  xE9
06F3A:  MOVLB  0
06F3C:  CALL   2564
06F40:  MOVFF  1FA,9E8
06F44:  MOVLW  37
06F46:  MOVLB  9
06F48:  MOVWF  xE9
06F4A:  MOVLB  0
06F4C:  CALL   2564
06F50:  MOVFF  1F9,9E8
06F54:  MOVLW  37
06F56:  MOVLB  9
06F58:  MOVWF  xE9
06F5A:  MOVLB  0
06F5C:  CALL   2564
06F60:  MOVFF  1F8,9E8
06F64:  MOVLW  37
06F66:  MOVLB  9
06F68:  MOVWF  xE9
06F6A:  MOVLB  0
06F6C:  CALL   2564
06F70:  MOVLW  BA
06F72:  MOVWF  FF6
06F74:  MOVLW  1E
06F76:  MOVWF  FF7
06F78:  MOVLW  00
06F7A:  MOVWF  FF8
06F7C:  MOVLW  16
06F7E:  MOVLB  A
06F80:  MOVWF  x4E
06F82:  MOVLB  0
06F84:  CALL   2334
06F88:  MOVLB  9
06F8A:  CLRF   xE8
06F8C:  MOVLW  37
06F8E:  MOVWF  xE9
06F90:  MOVLB  0
06F92:  CALL   2564
06F96:  MOVLW  BC
06F98:  MOVLB  9
06F9A:  MOVWF  xE8
06F9C:  MOVLW  37
06F9E:  MOVWF  xE9
06FA0:  MOVLB  0
06FA2:  CALL   2564
06FA6:  MOVLW  0F
06FA8:  MOVLB  9
06FAA:  MOVWF  xE8
06FAC:  MOVLW  37
06FAE:  MOVWF  xE9
06FB0:  MOVLB  0
06FB2:  CALL   2564
06FB6:  MOVLB  9
06FB8:  SETF   xE8
06FBA:  MOVLW  37
06FBC:  MOVWF  xE9
06FBE:  MOVLB  0
06FC0:  CALL   2564
06FC4:  MOVLW  D5
06FC6:  MOVWF  FF6
06FC8:  MOVLW  1E
06FCA:  MOVWF  FF7
06FCC:  MOVLW  00
06FCE:  MOVWF  FF8
06FD0:  MOVLW  0A
06FD2:  MOVLB  A
06FD4:  MOVWF  x4E
06FD6:  MOVLB  0
06FD8:  CALL   2334
....................          break;
06FDC:  GOTO   72CC
....................       }
....................       if(read_address + (PACKET_SIZE - 1) > MISF_END){
06FE0:  MOVLW  3F
06FE2:  MOVLB  1
06FE4:  ADDWF  xF8,W
06FE6:  MOVLB  2
06FE8:  MOVWF  x06
06FEA:  MOVLW  00
06FEC:  MOVLB  1
06FEE:  ADDWFC xF9,W
06FF0:  MOVLB  2
06FF2:  MOVWF  x07
06FF4:  MOVLW  00
06FF6:  MOVLB  1
06FF8:  ADDWFC xFA,W
06FFA:  MOVLB  2
06FFC:  MOVWF  x08
06FFE:  MOVLW  00
07000:  MOVLB  1
07002:  ADDWFC xFB,W
07004:  MOVLB  2
07006:  MOVWF  x09
07008:  MOVF   x09,F
0700A:  BTFSC  FD8.2
0700C:  BRA    7014
0700E:  MOVLB  0
07010:  GOTO   7042
07014:  MOVLB  0
07016:  MOVLB  2
07018:  MOVF   x08,W
0701A:  SUBLW  BB
0701C:  BTFSS  FD8.0
0701E:  BRA    7026
07020:  MOVLB  0
07022:  GOTO   71B2
07026:  MOVLB  0
07028:  XORLW  FF
0702A:  BTFSS  FD8.2
0702C:  GOTO   7042
07030:  MOVLB  2
07032:  MOVF   x07,W
07034:  SUBLW  0F
07036:  BTFSS  FD8.0
07038:  BRA    7040
0703A:  MOVLB  0
0703C:  GOTO   71B2
07040:  MOVLB  0
....................          unsigned int32 remain = (MISF_END - read_address) + 1;
07042:  MOVLW  FF
07044:  BSF    FD8.0
07046:  MOVLB  1
07048:  SUBFWB xF8,W
0704A:  MOVLB  2
0704C:  MOVWF  x06
0704E:  MOVLW  0F
07050:  MOVLB  1
07052:  SUBFWB xF9,W
07054:  MOVLB  2
07056:  MOVWF  x07
07058:  MOVLW  BC
0705A:  MOVLB  1
0705C:  SUBFWB xFA,W
0705E:  MOVLB  2
07060:  MOVWF  x08
07062:  MOVLW  00
07064:  MOVLB  1
07066:  SUBFWB xFB,W
07068:  MOVLB  2
0706A:  MOVWF  x09
0706C:  MOVLW  01
0706E:  ADDWF  x06,W
07070:  MOVWF  x00
07072:  MOVLW  00
07074:  ADDWFC x07,W
07076:  MOVWF  x01
07078:  MOVLW  00
0707A:  ADDWFC x08,W
0707C:  MOVWF  x02
0707E:  MOVLW  00
07080:  ADDWFC x09,W
07082:  MOVWF  x03
07084:  MOVLB  0
....................          fprintf(PC, "[FLASH] End reached. Partial read %lu bytes.\r\n", remain);
07086:  MOVLW  E0
07088:  MOVWF  FF6
0708A:  MOVLW  1E
0708C:  MOVWF  FF7
0708E:  MOVLW  00
07090:  MOVWF  FF8
07092:  MOVLW  22
07094:  MOVLB  A
07096:  MOVWF  x4E
07098:  MOVLB  0
0709A:  CALL   2334
0709E:  MOVLW  41
070A0:  MOVWF  FE9
070A2:  MOVFF  203,209
070A6:  MOVFF  202,208
070AA:  MOVFF  201,207
070AE:  MOVFF  200,206
070B2:  CALL   62F2
070B6:  MOVLW  05
070B8:  MOVWF  FF6
070BA:  MOVLW  1F
070BC:  MOVWF  FF7
070BE:  MOVLW  00
070C0:  MOVWF  FF8
070C2:  MOVLW  09
070C4:  MOVLB  A
070C6:  MOVWF  x4E
070C8:  MOVLB  0
070CA:  CALL   2334
....................          read_data_bytes(mis_fm, read_address, readdata, remain);
070CE:  MOVFF  115,AEE
070D2:  MOVFF  114,AED
070D6:  MOVFF  113,AEC
070DA:  MOVFF  112,AEB
070DE:  MOVFF  1FB,AF2
070E2:  MOVFF  1FA,AF1
070E6:  MOVFF  1F9,AF0
070EA:  MOVFF  1F8,AEF
070EE:  MOVLW  01
070F0:  MOVLB  A
070F2:  MOVWF  xF4
070F4:  MOVLW  B8
070F6:  MOVWF  xF3
070F8:  MOVFF  203,AF8
070FC:  MOVFF  202,AF7
07100:  MOVFF  201,AF6
07104:  MOVFF  200,AF5
07108:  MOVLB  0
0710A:  CALL   2EEC
....................          for (unsigned int8 bytecount = 0; bytecount < remain; bytecount++)
0710E:  MOVLB  2
07110:  CLRF   x04
07112:  MOVLB  0
07114:  MOVLB  2
07116:  MOVF   x03,F
07118:  BTFSC  FD8.2
0711A:  BRA    7122
0711C:  MOVLB  0
0711E:  GOTO   7156
07122:  MOVLB  0
07124:  MOVLB  2
07126:  MOVF   x02,F
07128:  BTFSC  FD8.2
0712A:  BRA    7132
0712C:  MOVLB  0
0712E:  GOTO   7156
07132:  MOVLB  0
07134:  MOVLB  2
07136:  MOVF   x01,F
07138:  BTFSC  FD8.2
0713A:  BRA    7142
0713C:  MOVLB  0
0713E:  GOTO   7156
07142:  MOVLB  0
07144:  MOVLB  2
07146:  MOVF   x00,W
07148:  SUBWF  x04,W
0714A:  BTFSS  FD8.0
0714C:  BRA    7154
0714E:  MOVLB  0
07150:  GOTO   7192
07154:  MOVLB  0
....................             fprintf(PC, "%02X ", readdata[bytecount]);
07156:  CLRF   03
07158:  MOVLB  2
0715A:  MOVF   x04,W
0715C:  ADDLW  B8
0715E:  MOVWF  FE9
07160:  MOVLW  01
07162:  ADDWFC 03,W
07164:  MOVWF  FEA
07166:  MOVFF  FEF,206
0716A:  MOVFF  206,9E8
0716E:  MOVLW  37
07170:  MOVLB  9
07172:  MOVWF  xE9
07174:  MOVLB  0
07176:  CALL   2564
0717A:  MOVLW  20
0717C:  BTFSS  FA6.6
0717E:  GOTO   717C
07182:  MOVLB  E
07184:  MOVWF  xF9
07186:  MOVLB  0
07188:  MOVLB  2
0718A:  INCF   x04,F
0718C:  MOVLB  0
0718E:  GOTO   7114
....................          fprintf(PC, "\r\n");
07192:  MOVLW  0D
07194:  BTFSS  FA6.6
07196:  GOTO   7194
0719A:  MOVLB  E
0719C:  MOVWF  xF9
0719E:  MOVLW  0A
071A0:  MOVLB  0
071A2:  BTFSS  FA6.6
071A4:  GOTO   71A2
071A8:  MOVLB  E
071AA:  MOVWF  xF9
....................          break;
071AC:  MOVLB  0
071AE:  GOTO   72CC
....................       }
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
071B2:  MOVFF  115,AEE
071B6:  MOVFF  114,AED
071BA:  MOVFF  113,AEC
071BE:  MOVFF  112,AEB
071C2:  MOVFF  1FB,AF2
071C6:  MOVFF  1FA,AF1
071CA:  MOVFF  1F9,AF0
071CE:  MOVFF  1F8,AEF
071D2:  MOVLW  01
071D4:  MOVLB  A
071D6:  MOVWF  xF4
071D8:  MOVLW  B8
071DA:  MOVWF  xF3
071DC:  CLRF   xF8
071DE:  CLRF   xF7
071E0:  CLRF   xF6
071E2:  MOVLW  40
071E4:  MOVWF  xF5
071E6:  MOVLB  0
071E8:  CALL   2EEC
....................       fprintf(PC, "%08LX : ",read_address);
071EC:  MOVFF  1FB,9E8
071F0:  MOVLW  37
071F2:  MOVLB  9
071F4:  MOVWF  xE9
071F6:  MOVLB  0
071F8:  CALL   2564
071FC:  MOVFF  1FA,9E8
07200:  MOVLW  37
07202:  MOVLB  9
07204:  MOVWF  xE9
07206:  MOVLB  0
07208:  CALL   2564
0720C:  MOVFF  1F9,9E8
07210:  MOVLW  37
07212:  MOVLB  9
07214:  MOVWF  xE9
07216:  MOVLB  0
07218:  CALL   2564
0721C:  MOVFF  1F8,9E8
07220:  MOVLW  37
07222:  MOVLB  9
07224:  MOVWF  xE9
07226:  MOVLB  0
07228:  CALL   2564
0722C:  MOVLW  15
0722E:  MOVWF  FF6
07230:  MOVLW  1F
07232:  MOVWF  FF7
07234:  MOVLW  00
07236:  MOVWF  FF8
07238:  MOVLW  03
0723A:  MOVLB  A
0723C:  MOVWF  x4E
0723E:  MOVLB  0
07240:  CALL   2334
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
07244:  MOVLB  2
07246:  CLRF   x05
07248:  MOVLB  0
0724A:  MOVLB  2
0724C:  MOVF   x05,W
0724E:  SUBLW  3F
07250:  BTFSC  FD8.0
07252:  BRA    725A
07254:  MOVLB  0
07256:  GOTO   7298
0725A:  MOVLB  0
....................          fprintf(PC,"%02X ",readdata[bytecount]);
0725C:  CLRF   03
0725E:  MOVLB  2
07260:  MOVF   x05,W
07262:  ADDLW  B8
07264:  MOVWF  FE9
07266:  MOVLW  01
07268:  ADDWFC 03,W
0726A:  MOVWF  FEA
0726C:  MOVFF  FEF,206
07270:  MOVFF  206,9E8
07274:  MOVLW  37
07276:  MOVLB  9
07278:  MOVWF  xE9
0727A:  MOVLB  0
0727C:  CALL   2564
07280:  MOVLW  20
07282:  BTFSS  FA6.6
07284:  GOTO   7282
07288:  MOVLB  E
0728A:  MOVWF  xF9
0728C:  MOVLB  0
0728E:  MOVLB  2
07290:  INCF   x05,F
07292:  MOVLB  0
07294:  GOTO   724A
....................       }
....................       fprintf(PC,"\r\n");
07298:  MOVLW  0D
0729A:  BTFSS  FA6.6
0729C:  GOTO   729A
072A0:  MOVLB  E
072A2:  MOVWF  xF9
072A4:  MOVLW  0A
072A6:  MOVLB  0
072A8:  BTFSS  FA6.6
072AA:  GOTO   72A8
072AE:  MOVLB  E
072B0:  MOVWF  xF9
072B2:  MOVLB  0
072B4:  MOVLW  01
072B6:  MOVLB  1
072B8:  ADDWF  xFC,F
072BA:  BTFSC  FD8.0
072BC:  INCF   xFD,F
072BE:  BTFSC  FD8.2
072C0:  INCF   xFE,F
072C2:  BTFSC  FD8.2
072C4:  INCF   xFF,F
072C6:  MOVLB  0
072C8:  GOTO   6E3E
....................    }
....................    piclog_make(flash_param.id, PICLOG_PARAM_END); // Log the end of the command execution
072CC:  MOVFF  1B1,20F
072D0:  MOVLB  2
072D2:  SETF   x10
072D4:  MOVLB  0
072D6:  CALL   510C
....................    fprintf(PC, "End Flash Read\r\n");
072DA:  MOVLW  1A
072DC:  MOVWF  FF6
072DE:  MOVLW  1F
072E0:  MOVWF  FF7
072E2:  MOVLW  00
072E4:  MOVWF  FF8
072E6:  CALL   22FE
072EA:  GOTO   101EA (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
072EE:  MOVLW  2C
072F0:  MOVWF  FF6
072F2:  MOVLW  1F
072F4:  MOVWF  FF7
072F6:  MOVLW  00
072F8:  MOVWF  FF8
072FA:  CALL   22FE
....................    flash_setting(mis_fm);
072FE:  MOVFF  115,2BD
07302:  MOVFF  114,2BC
07306:  MOVFF  113,2BB
0730A:  MOVFF  112,2BA
0730E:  CALL   6A42
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
07312:  MOVLB  1
07314:  CLRF   xB4
07316:  CLRF   xB3
07318:  CLRF   xB2
0731A:  CLRF   xB1
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
0731C:  MOVFF  115,AEE
07320:  MOVFF  114,AED
07324:  MOVFF  113,AEC
07328:  MOVFF  112,AEB
0732C:  MOVFF  1B4,AF2
07330:  MOVFF  1B3,AF1
07334:  MOVFF  1B2,AF0
07338:  MOVFF  1B1,AEF
0733C:  MOVLW  01
0733E:  MOVLB  A
07340:  MOVWF  xF4
07342:  MOVLW  B5
07344:  MOVWF  xF3
07346:  CLRF   xF8
07348:  CLRF   xF7
0734A:  CLRF   xF6
0734C:  MOVLW  04
0734E:  MOVWF  xF5
07350:  MOVLB  0
07352:  CALL   2EEC
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
07356:  MOVLW  48
07358:  MOVWF  FF6
0735A:  MOVLW  1F
0735C:  MOVWF  FF7
0735E:  MOVLW  00
07360:  MOVWF  FF8
07362:  MOVLW  0B
07364:  MOVLB  A
07366:  MOVWF  x4E
07368:  MOVLB  0
0736A:  CALL   2334
0736E:  MOVFF  1B5,9E8
07372:  MOVLW  37
07374:  MOVLB  9
07376:  MOVWF  xE9
07378:  MOVLB  0
0737A:  CALL   2564
0737E:  MOVLW  20
07380:  BTFSS  FA6.6
07382:  GOTO   7380
07386:  MOVLB  E
07388:  MOVWF  xF9
0738A:  MOVFF  1B6,9E8
0738E:  MOVLW  37
07390:  MOVLB  9
07392:  MOVWF  xE9
07394:  MOVLB  0
07396:  CALL   2564
0739A:  MOVLW  20
0739C:  BTFSS  FA6.6
0739E:  GOTO   739C
073A2:  MOVLB  E
073A4:  MOVWF  xF9
073A6:  MOVFF  1B7,9E8
073AA:  MOVLW  37
073AC:  MOVLB  9
073AE:  MOVWF  xE9
073B0:  MOVLB  0
073B2:  CALL   2564
073B6:  MOVLW  20
073B8:  BTFSS  FA6.6
073BA:  GOTO   73B8
073BE:  MOVLB  E
073C0:  MOVWF  xF9
073C2:  MOVFF  1B8,9E8
073C6:  MOVLW  37
073C8:  MOVLB  9
073CA:  MOVWF  xE9
073CC:  MOVLB  0
073CE:  CALL   2564
073D2:  MOVLW  0D
073D4:  BTFSS  FA6.6
073D6:  GOTO   73D4
073DA:  MOVLB  E
073DC:  MOVWF  xF9
073DE:  MOVLW  0A
073E0:  MOVLB  0
073E2:  BTFSS  FA6.6
073E4:  GOTO   73E2
073E8:  MOVLB  E
073EA:  MOVWF  xF9
....................    fprintf(PC, "End Flash Read Address\r\n");
073EC:  MOVLW  6A
073EE:  MOVWF  FF6
073F0:  MOVLW  1F
073F2:  MOVWF  FF7
073F4:  MOVLW  00
073F6:  MOVWF  FF8
073F8:  MOVLB  0
073FA:  CALL   22FE
073FE:  GOTO   101FA (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase and Reset\r\n");
*
075F6:  MOVLW  84
075F8:  MOVWF  FF6
075FA:  MOVLW  1F
075FC:  MOVWF  FF7
075FE:  MOVLW  00
07600:  MOVWF  FF8
07602:  CALL   22FE
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
07606:  MOVLB  1
07608:  MOVF   xC8,W
0760A:  MOVWF  FE9
0760C:  MOVF   xC9,W
0760E:  MOVWF  FEA
07610:  MOVFF  FEF,1CA
07614:  MOVFF  1CA,20F
07618:  MOVLB  2
0761A:  CLRF   x10
0761C:  MOVLB  0
0761E:  CALL   510C
.................... 
....................    mode_misf_erase_all(parameter); // Erase all flash memory
07622:  MOVFF  1C9,1CB
07626:  MOVFF  1C8,1CA
0762A:  CALL   5C96
....................    mode_misf_address_reset(parameter); // Reset the address area
0762E:  MOVFF  1C9,1CB
07632:  MOVFF  1C8,1CA
07636:  GOTO   7402
.................... 
....................    fprintf(PC, "End Flash Erase and Reset\r\n");
0763A:  MOVLW  A2
0763C:  MOVWF  FF6
0763E:  MOVLW  1F
07640:  MOVWF  FF7
07642:  MOVLW  00
07644:  MOVWF  FF8
07646:  CALL   22FE
0764A:  RETURN 0
.................... }
.................... // ========================== SMF Command ============================
.................... void mode_smf_copy(int8 parameter[])
.................... {
....................    printf("Start Flash SMF Copy\r\n");
0764C:  MOVLW  BE
0764E:  MOVWF  FF6
07650:  MOVLW  1F
07652:  MOVWF  FF7
07654:  MOVLW  00
07656:  MOVWF  FF8
07658:  CALL   22FE
....................    flash_setting(mis_fm);
0765C:  MOVFF  115,2BD
07660:  MOVFF  114,2BC
07664:  MOVFF  113,2BB
07668:  MOVFF  112,2BA
0766C:  CALL   6A42
....................    flash_setting(smf);
07670:  MOVFF  119,2BD
07674:  MOVFF  118,2BC
07678:  MOVFF  117,2BB
0767C:  MOVFF  116,2BA
07680:  CALL   6A42
....................    
....................    // 統合管理システムを使用したコピー操作
....................    int8 mission_id = parameter[0];
....................    
....................    // 未コピーデータの自動転送をキューに追加
....................    //enqueue_auto_transfer(mission_id);
....................    
....................    // Example copy operation with integration system
....................    int32 src_address = 0x00000000;
....................    int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
07684:  MOVLB  1
07686:  MOVF   xAF,W
07688:  MOVWF  FE9
0768A:  MOVF   xB0,W
0768C:  MOVWF  FEA
0768E:  MOVFF  FEF,1B1
07692:  CLRF   xB5
07694:  CLRF   xB4
07696:  CLRF   xB3
07698:  CLRF   xB2
0769A:  CLRF   xB9
0769C:  CLRF   xB8
0769E:  MOVLW  10
076A0:  MOVWF  xB7
076A2:  CLRF   xB6
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
076A4:  MOVFF  115,AEE
076A8:  MOVFF  114,AED
076AC:  MOVFF  113,AEC
076B0:  MOVFF  112,AEB
076B4:  MOVFF  1B5,AF2
076B8:  MOVFF  1B4,AF1
076BC:  MOVFF  1B3,AF0
076C0:  MOVFF  1B2,AEF
076C4:  MOVLW  01
076C6:  MOVLB  A
076C8:  MOVWF  xF4
076CA:  MOVLW  BA
076CC:  MOVWF  xF3
076CE:  CLRF   xF8
076D0:  CLRF   xF7
076D2:  MOVLW  01
076D4:  MOVWF  xF6
076D6:  CLRF   xF5
076D8:  MOVLB  0
076DA:  CALL   2EEC
....................    write_data_bytes(smf, dest_address, read_data, 256);
076DE:  MOVFF  119,AEE
076E2:  MOVFF  118,AED
076E6:  MOVFF  117,AEC
076EA:  MOVFF  116,AEB
076EE:  MOVFF  1B9,AF2
076F2:  MOVFF  1B8,AF1
076F6:  MOVFF  1B7,AF0
076FA:  MOVFF  1B6,AEF
076FE:  MOVLW  01
07700:  MOVLB  A
07702:  MOVWF  xF4
07704:  MOVLW  BA
07706:  MOVWF  xF3
07708:  MOVLW  01
0770A:  MOVWF  xF6
0770C:  CLRF   xF5
0770E:  MOVLB  0
07710:  CALL   3F56
....................    
....................    // 転送完了後のカウンタ更新
....................    //complete_transfer_and_update_counter(mission_id, 256);
....................    
....................    printf("End Flash SMF Copy\r\n");
07714:  MOVLW  D6
07716:  MOVWF  FF6
07718:  MOVLW  1F
0771A:  MOVWF  FF7
0771C:  MOVLW  00
0771E:  MOVWF  FF8
07720:  CALL   22FE
07724:  GOTO   1021A (RETURN)
.................... }
.................... 
.................... 
.................... void mode_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
07728:  MOVLW  EC
0772A:  MOVWF  FF6
0772C:  MOVLW  1F
0772E:  MOVWF  FF7
07730:  MOVLW  00
07732:  MOVWF  FF8
07734:  CALL   22FE
....................    unsigned int32 read_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
....................    unsigned int16 read_packetnum = 
....................       ((unsigned int16)parameter[6] << 8) |
....................       ((unsigned int16)parameter[7]);
....................    
....................    unsigned int8 read_data[PACKET_SIZE];
07738:  MOVLW  01
0773A:  MOVLB  1
0773C:  ADDWF  xAF,W
0773E:  MOVWF  FE9
07740:  MOVLW  00
07742:  ADDWFC xB0,W
07744:  MOVWF  FEA
07746:  MOVF   FEF,W
07748:  CLRF   xFB
0774A:  CLRF   xFA
0774C:  CLRF   xF9
0774E:  MOVWF  xF8
07750:  MOVFF  1F8,1FB
07754:  CLRF   xF8
07756:  CLRF   xF9
07758:  CLRF   xFA
0775A:  MOVLW  02
0775C:  ADDWF  xAF,W
0775E:  MOVWF  FE9
07760:  MOVLW  00
07762:  ADDWFC xB0,W
07764:  MOVWF  FEA
07766:  MOVF   FEF,W
07768:  MOVLB  2
0776A:  CLRF   x00
0776C:  MOVLB  1
0776E:  CLRF   xFF
07770:  CLRF   xFE
07772:  MOVWF  xFD
07774:  MOVFF  1FE,03
07778:  MOVFF  1FD,02
0777C:  CLRF   00
0777E:  CLRF   01
07780:  MOVF   00,W
07782:  IORWF  xF8,F
07784:  MOVF   01,W
07786:  IORWF  xF9,F
07788:  MOVF   02,W
0778A:  IORWF  xFA,F
0778C:  MOVF   03,W
0778E:  IORWF  xFB,F
07790:  MOVLW  03
07792:  ADDWF  xAF,W
07794:  MOVWF  FE9
07796:  MOVLW  00
07798:  ADDWFC xB0,W
0779A:  MOVWF  FEA
0779C:  MOVF   FEF,W
0779E:  MOVLB  2
077A0:  CLRF   x00
077A2:  MOVLB  1
077A4:  CLRF   xFF
077A6:  CLRF   xFE
077A8:  MOVWF  xFD
077AA:  MOVFF  1FF,03
077AE:  MOVFF  1FE,02
077B2:  MOVFF  1FD,01
077B6:  CLRF   00
077B8:  MOVF   00,W
077BA:  IORWF  xF8,F
077BC:  MOVF   01,W
077BE:  IORWF  xF9,F
077C0:  MOVF   02,W
077C2:  IORWF  xFA,F
077C4:  MOVF   03,W
077C6:  IORWF  xFB,F
077C8:  MOVLW  04
077CA:  ADDWF  xAF,W
077CC:  MOVWF  FE9
077CE:  MOVLW  00
077D0:  ADDWFC xB0,W
077D2:  MOVWF  FEA
077D4:  MOVF   FEF,W
077D6:  MOVWF  00
077D8:  CLRF   01
077DA:  CLRF   02
077DC:  CLRF   03
077DE:  MOVF   00,W
077E0:  IORWF  xF8,W
077E2:  MOVWF  xB1
077E4:  MOVF   01,W
077E6:  IORWF  xF9,W
077E8:  MOVWF  xB2
077EA:  MOVF   02,W
077EC:  IORWF  xFA,W
077EE:  MOVWF  xB3
077F0:  MOVF   03,W
077F2:  IORWF  xFB,W
077F4:  MOVWF  xB4
077F6:  MOVLW  06
077F8:  ADDWF  xAF,W
077FA:  MOVWF  FE9
077FC:  MOVLW  00
077FE:  ADDWFC xB0,W
07800:  MOVWF  FEA
07802:  MOVF   FEF,W
07804:  CLRF   xF9
07806:  MOVWF  xF8
07808:  MOVFF  1F8,1F9
0780C:  CLRF   xF8
0780E:  MOVLW  07
07810:  ADDWF  xAF,W
07812:  MOVWF  FE9
07814:  MOVLW  00
07816:  ADDWFC xB0,W
07818:  MOVWF  FEA
0781A:  MOVF   FEF,W
0781C:  CLRF   03
0781E:  IORWF  xF8,W
07820:  MOVWF  xB5
07822:  MOVF   03,W
07824:  IORWF  xF9,W
07826:  MOVWF  xB6
.................... 
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", read_address);
07828:  MOVLW  04
0782A:  MOVWF  FF6
0782C:  MOVLW  20
0782E:  MOVWF  FF7
07830:  MOVLW  00
07832:  MOVWF  FF8
07834:  MOVLW  0E
07836:  MOVLB  A
07838:  MOVWF  x4E
0783A:  MOVLB  0
0783C:  CALL   2334
07840:  MOVFF  1B4,9E8
07844:  MOVLW  37
07846:  MOVLB  9
07848:  MOVWF  xE9
0784A:  MOVLB  0
0784C:  CALL   2564
07850:  MOVFF  1B3,9E8
07854:  MOVLW  37
07856:  MOVLB  9
07858:  MOVWF  xE9
0785A:  MOVLB  0
0785C:  CALL   2564
07860:  MOVFF  1B2,9E8
07864:  MOVLW  37
07866:  MOVLB  9
07868:  MOVWF  xE9
0786A:  MOVLB  0
0786C:  CALL   2564
07870:  MOVFF  1B1,9E8
07874:  MOVLW  37
07876:  MOVLB  9
07878:  MOVWF  xE9
0787A:  MOVLB  0
0787C:  CALL   2564
07880:  MOVLW  0D
07882:  BTFSS  FA6.6
07884:  GOTO   7882
07888:  MOVLB  E
0788A:  MOVWF  xF9
0788C:  MOVLW  0A
0788E:  MOVLB  0
07890:  BTFSS  FA6.6
07892:  GOTO   7890
07896:  MOVLB  E
07898:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", read_packetnum);
0789A:  MOVLW  1A
0789C:  MOVWF  FF6
0789E:  MOVLW  20
078A0:  MOVWF  FF7
078A2:  MOVLW  00
078A4:  MOVWF  FF8
078A6:  MOVLW  0E
078A8:  MOVLB  A
078AA:  MOVWF  x4E
078AC:  MOVLB  0
078AE:  CALL   2334
078B2:  MOVFF  1B6,9E8
078B6:  MOVLW  37
078B8:  MOVLB  9
078BA:  MOVWF  xE9
078BC:  MOVLB  0
078BE:  CALL   2564
078C2:  MOVFF  1B5,9E8
078C6:  MOVLW  37
078C8:  MOVLB  9
078CA:  MOVWF  xE9
078CC:  MOVLB  0
078CE:  CALL   2564
078D2:  MOVLW  0D
078D4:  BTFSS  FA6.6
078D6:  GOTO   78D4
078DA:  MOVLB  E
078DC:  MOVWF  xF9
078DE:  MOVLW  0A
078E0:  MOVLB  0
078E2:  BTFSS  FA6.6
078E4:  GOTO   78E2
078E8:  MOVLB  E
078EA:  MOVWF  xF9
....................    fprintf(PC, "Read Data\r\n");
078EC:  MOVLW  30
078EE:  MOVWF  FF6
078F0:  MOVLW  20
078F2:  MOVWF  FF7
078F4:  MOVLW  00
078F6:  MOVWF  FF8
078F8:  MOVLB  0
078FA:  CALL   22FE
.................... 
....................    while (read_packetnum > 0) {
078FE:  MOVLB  1
07900:  MOVF   xB5,F
07902:  BTFSC  FD8.2
07904:  BRA    790C
07906:  MOVLB  0
07908:  GOTO   791E
0790C:  MOVLB  0
0790E:  MOVLB  1
07910:  MOVF   xB6,F
07912:  BTFSS  FD8.2
07914:  BRA    791C
07916:  MOVLB  0
07918:  GOTO   79E6
0791C:  MOVLB  0
....................       read_data_bytes(smf, read_address, read_data, PACKET_SIZE);
0791E:  MOVFF  119,AEE
07922:  MOVFF  118,AED
07926:  MOVFF  117,AEC
0792A:  MOVFF  116,AEB
0792E:  MOVFF  1B4,AF2
07932:  MOVFF  1B3,AF1
07936:  MOVFF  1B2,AF0
0793A:  MOVFF  1B1,AEF
0793E:  MOVLW  01
07940:  MOVLB  A
07942:  MOVWF  xF4
07944:  MOVLW  B7
07946:  MOVWF  xF3
07948:  CLRF   xF8
0794A:  CLRF   xF7
0794C:  CLRF   xF6
0794E:  MOVLW  40
07950:  MOVWF  xF5
07952:  MOVLB  0
07954:  CALL   2EEC
.................... 
....................       for (int i = 0; i < PACKET_SIZE; i++) {
07958:  MOVLB  1
0795A:  CLRF   xF7
0795C:  MOVLB  0
0795E:  MOVLB  1
07960:  MOVF   xF7,W
07962:  SUBLW  3F
07964:  BTFSC  FD8.0
07966:  BRA    796E
07968:  MOVLB  0
0796A:  GOTO   79AC
0796E:  MOVLB  0
....................          fprintf(PC, "%02X ", read_data[i]);
07970:  CLRF   03
07972:  MOVLB  1
07974:  MOVF   xF7,W
07976:  ADDLW  B7
07978:  MOVWF  FE9
0797A:  MOVLW  01
0797C:  ADDWFC 03,W
0797E:  MOVWF  FEA
07980:  MOVFF  FEF,1F8
07984:  MOVFF  1F8,9E8
07988:  MOVLW  37
0798A:  MOVLB  9
0798C:  MOVWF  xE9
0798E:  MOVLB  0
07990:  CALL   2564
07994:  MOVLW  20
07996:  BTFSS  FA6.6
07998:  GOTO   7996
0799C:  MOVLB  E
0799E:  MOVWF  xF9
079A0:  MOVLB  0
079A2:  MOVLB  1
079A4:  INCF   xF7,F
079A6:  MOVLB  0
079A8:  GOTO   795E
....................       }
....................       fprintf(PC, "\r\n");
079AC:  MOVLW  0D
079AE:  BTFSS  FA6.6
079B0:  GOTO   79AE
079B4:  MOVLB  E
079B6:  MOVWF  xF9
079B8:  MOVLW  0A
079BA:  MOVLB  0
079BC:  BTFSS  FA6.6
079BE:  GOTO   79BC
079C2:  MOVLB  E
079C4:  MOVWF  xF9
....................       read_address += PACKET_SIZE;
079C6:  MOVLW  40
079C8:  MOVLB  1
079CA:  ADDWF  xB1,F
079CC:  MOVLW  00
079CE:  ADDWFC xB2,F
079D0:  MOVLW  00
079D2:  ADDWFC xB3,F
079D4:  MOVLW  00
079D6:  ADDWFC xB4,F
....................       read_packetnum--;
079D8:  MOVF   xB5,W
079DA:  BTFSC  FD8.2
079DC:  DECF   xB6,F
079DE:  DECF   xB5,F
079E0:  MOVLB  0
079E2:  GOTO   78FE
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
079E6:  MOVLW  3C
079E8:  MOVWF  FF6
079EA:  MOVLW  20
079EC:  MOVWF  FF7
079EE:  MOVLW  00
079F0:  MOVWF  FF8
079F2:  CALL   22FE
079F6:  GOTO   1022A (RETURN)
.................... }
.................... 
.................... 
.................... void mode_smf_erase(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Erase\r\n");
079FA:  MOVLW  54
079FC:  MOVWF  FF6
079FE:  MOVLW  20
07A00:  MOVWF  FF7
07A02:  MOVLW  00
07A04:  MOVWF  FF8
07A06:  CALL   22FE
....................    flash_setting(smf);
07A0A:  MOVFF  119,2BD
07A0E:  MOVFF  118,2BC
07A12:  MOVFF  117,2BB
07A16:  MOVFF  116,2BA
07A1A:  CALL   6A42
....................    unsigned int32 erase_address = 0x00000000; // Example address
07A1E:  MOVLB  1
07A20:  CLRF   xB4
07A22:  CLRF   xB3
07A24:  CLRF   xB2
07A26:  CLRF   xB1
....................    sector_erase(smf, erase_address); // Erase the sector
07A28:  MOVFF  119,1F8
07A2C:  MOVFF  118,1F7
07A30:  MOVFF  117,1F6
07A34:  MOVFF  116,1F5
07A38:  MOVFF  1B4,1FC
07A3C:  MOVFF  1B3,1FB
07A40:  MOVFF  1B2,1FA
07A44:  MOVFF  1B1,1F9
07A48:  MOVLB  0
07A4A:  CALL   5934
....................    fprintf(PC, "End Flash SMF Erase\r\n");
07A4E:  MOVLW  6C
07A50:  MOVWF  FF6
07A52:  MOVLW  20
07A54:  MOVWF  FF7
07A56:  MOVLW  00
07A58:  MOVWF  FF8
07A5A:  CALL   22FE
07A5E:  GOTO   1023A (RETURN)
.................... }  
.................... 
.................... void mode_misf_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
*
07402:  MOVLW  82
07404:  MOVWF  FF6
07406:  MOVLW  20
07408:  MOVWF  FF7
0740A:  MOVLW  00
0740C:  MOVWF  FF8
0740E:  CALL   22FE
....................    piclog_make(parameter[0], PICLOG_PARAM_START); 
07412:  MOVLB  1
07414:  MOVF   xCA,W
07416:  MOVWF  FE9
07418:  MOVF   xCB,W
0741A:  MOVWF  FEA
0741C:  MOVFF  FEF,20E
07420:  MOVFF  20E,20F
07424:  MOVLB  2
07426:  CLRF   x10
07428:  MOVLB  0
0742A:  CALL   510C
....................    FlashData_t flash_data;
....................    memset(flash_data.bytes, 0, PACKET_SIZE);
0742E:  MOVLW  01
07430:  MOVWF  FEA
07432:  MOVLW  CC
07434:  MOVWF  FE9
07436:  CLRF   00
07438:  CLRF   02
0743A:  MOVLW  40
0743C:  MOVWF  01
0743E:  CALL   236E
....................    /*
....................    for (int i = 0; i < PACKET_SIZE; i++) {
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
....................    }
....................    */
....................    fprintf(PC, "\r\n");
07442:  MOVLW  0D
07444:  BTFSS  FA6.6
07446:  GOTO   7444
0744A:  MOVLB  E
0744C:  MOVWF  xF9
0744E:  MOVLW  0A
07450:  MOVLB  0
07452:  BTFSS  FA6.6
07454:  GOTO   7452
07458:  MOVLB  E
0745A:  MOVWF  xF9
....................    flash_data.packet.crc = calc_crc8(flash_data.bytes, PACKET_SIZE-1);
0745C:  MOVLW  01
0745E:  MOVLB  A
07460:  MOVWF  xEC
07462:  MOVLW  CC
07464:  MOVWF  xEB
07466:  MOVLW  3F
07468:  MOVWF  xED
0746A:  MOVLB  0
0746C:  CALL   310C
07470:  MOVFF  01,20B
....................    for (int i = 0; i < PACKET_SIZE; i++) {
07474:  MOVLB  2
07476:  CLRF   x0C
07478:  MOVLB  0
0747A:  MOVLB  2
0747C:  MOVF   x0C,W
0747E:  SUBLW  3F
07480:  BTFSC  FD8.0
07482:  BRA    748A
07484:  MOVLB  0
07486:  GOTO   74C8
0748A:  MOVLB  0
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
0748C:  CLRF   03
0748E:  MOVLB  2
07490:  MOVF   x0C,W
07492:  ADDLW  CC
07494:  MOVWF  FE9
07496:  MOVLW  01
07498:  ADDWFC 03,W
0749A:  MOVWF  FEA
0749C:  MOVFF  FEF,20E
074A0:  MOVFF  20E,9E8
074A4:  MOVLW  37
074A6:  MOVLB  9
074A8:  MOVWF  xE9
074AA:  MOVLB  0
074AC:  CALL   2564
074B0:  MOVLW  20
074B2:  BTFSS  FA6.6
074B4:  GOTO   74B2
074B8:  MOVLB  E
074BA:  MOVWF  xF9
074BC:  MOVLB  0
074BE:  MOVLB  2
074C0:  INCF   x0C,F
074C2:  MOVLB  0
074C4:  GOTO   747A
....................    }
....................    fprintf(PC, "\r\n");
074C8:  MOVLW  0D
074CA:  BTFSS  FA6.6
074CC:  GOTO   74CA
074D0:  MOVLB  E
074D2:  MOVWF  xF9
074D4:  MOVLW  0A
074D6:  MOVLB  0
074D8:  BTFSS  FA6.6
074DA:  GOTO   74D8
074DE:  MOVLB  E
074E0:  MOVWF  xF9
....................    write_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, flash_data.bytes, PACKET_SIZE);
074E2:  MOVFF  115,AEE
074E6:  MOVFF  114,AED
074EA:  MOVFF  113,AEC
074EE:  MOVFF  112,AEB
074F2:  MOVLB  A
074F4:  CLRF   xF2
074F6:  CLRF   xF1
074F8:  CLRF   xF0
074FA:  CLRF   xEF
074FC:  MOVLW  01
074FE:  MOVWF  xF4
07500:  MOVLW  CC
07502:  MOVWF  xF3
07504:  CLRF   xF6
07506:  MOVLW  40
07508:  MOVWF  xF5
0750A:  MOVLB  0
0750C:  CALL   3F56
....................    memset(flash_data.bytes, 0, PACKET_SIZE);
07510:  MOVLW  01
07512:  MOVWF  FEA
07514:  MOVLW  CC
07516:  MOVWF  FE9
07518:  CLRF   00
0751A:  CLRF   02
0751C:  MOVLW  40
0751E:  MOVWF  01
07520:  CALL   236E
....................    read_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, flash_data.bytes, PACKET_SIZE);
07524:  MOVFF  115,AEE
07528:  MOVFF  114,AED
0752C:  MOVFF  113,AEC
07530:  MOVFF  112,AEB
07534:  MOVLB  A
07536:  CLRF   xF2
07538:  CLRF   xF1
0753A:  CLRF   xF0
0753C:  CLRF   xEF
0753E:  MOVLW  01
07540:  MOVWF  xF4
07542:  MOVLW  CC
07544:  MOVWF  xF3
07546:  CLRF   xF8
07548:  CLRF   xF7
0754A:  CLRF   xF6
0754C:  MOVLW  40
0754E:  MOVWF  xF5
07550:  MOVLB  0
07552:  CALL   2EEC
....................    flash_data.packet.crc = calc_crc8(flash_data.bytes, PACKET_SIZE-1);
07556:  MOVLW  01
07558:  MOVLB  A
0755A:  MOVWF  xEC
0755C:  MOVLW  CC
0755E:  MOVWF  xEB
07560:  MOVLW  3F
07562:  MOVWF  xED
07564:  MOVLB  0
07566:  CALL   310C
0756A:  MOVFF  01,20B
....................    for (int i = 0; i < PACKET_SIZE; i++) {
0756E:  MOVLB  2
07570:  CLRF   x0D
07572:  MOVLB  0
07574:  MOVLB  2
07576:  MOVF   x0D,W
07578:  SUBLW  3F
0757A:  BTFSC  FD8.0
0757C:  BRA    7584
0757E:  MOVLB  0
07580:  GOTO   75C2
07584:  MOVLB  0
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
07586:  CLRF   03
07588:  MOVLB  2
0758A:  MOVF   x0D,W
0758C:  ADDLW  CC
0758E:  MOVWF  FE9
07590:  MOVLW  01
07592:  ADDWFC 03,W
07594:  MOVWF  FEA
07596:  MOVFF  FEF,20E
0759A:  MOVFF  20E,9E8
0759E:  MOVLW  37
075A0:  MOVLB  9
075A2:  MOVWF  xE9
075A4:  MOVLB  0
075A6:  CALL   2564
075AA:  MOVLW  20
075AC:  BTFSS  FA6.6
075AE:  GOTO   75AC
075B2:  MOVLB  E
075B4:  MOVWF  xF9
075B6:  MOVLB  0
075B8:  MOVLB  2
075BA:  INCF   x0D,F
075BC:  MOVLB  0
075BE:  GOTO   7574
....................    }
....................    misf_init(); // Update the address area after writing
075C2:  CALL   3980
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
075C6:  MOVLB  1
075C8:  MOVF   xCA,W
075CA:  MOVWF  FE9
075CC:  MOVF   xCB,W
075CE:  MOVWF  FEA
075D0:  MOVFF  FEF,20E
075D4:  MOVFF  20E,20F
075D8:  MOVLB  2
075DA:  SETF   x10
075DC:  MOVLB  0
075DE:  CALL   510C
....................    fprintf(PC, "End Flash Address Reset\r\n");
075E2:  MOVLW  9E
075E4:  MOVWF  FF6
075E6:  MOVLW  20
075E8:  MOVWF  FF7
075EA:  MOVLW  00
075EC:  MOVWF  FF8
075EE:  CALL   22FE
075F2:  GOTO   763A (RETURN)
.................... }
.................... 
.................... // ---------- SMF Command Functions ----------
.................... void mode_smf_read_force(int8 parameter[])
*
07D62:  MOVLW  01
07D64:  MOVLB  1
07D66:  ADDWF  xAF,W
07D68:  MOVWF  FE9
07D6A:  MOVLW  00
07D6C:  ADDWFC xB0,W
07D6E:  MOVWF  FEA
07D70:  MOVF   FEF,W
07D72:  MOVLB  2
07D74:  CLRF   x01
07D76:  CLRF   x00
07D78:  MOVLB  1
07D7A:  CLRF   xFF
07D7C:  MOVWF  xFE
07D7E:  MOVFF  1FE,201
07D82:  CLRF   xFE
07D84:  CLRF   xFF
07D86:  MOVLB  2
07D88:  CLRF   x00
07D8A:  MOVLW  02
07D8C:  MOVLB  1
07D8E:  ADDWF  xAF,W
07D90:  MOVWF  FE9
07D92:  MOVLW  00
07D94:  ADDWFC xB0,W
07D96:  MOVWF  FEA
07D98:  MOVF   FEF,W
07D9A:  MOVLB  2
07D9C:  CLRF   x06
07D9E:  CLRF   x05
07DA0:  CLRF   x04
07DA2:  MOVWF  x03
07DA4:  MOVFF  204,03
07DA8:  MOVFF  203,02
07DAC:  CLRF   00
07DAE:  CLRF   01
07DB0:  MOVF   00,W
07DB2:  MOVLB  1
07DB4:  IORWF  xFE,F
07DB6:  MOVF   01,W
07DB8:  IORWF  xFF,F
07DBA:  MOVF   02,W
07DBC:  MOVLB  2
07DBE:  IORWF  x00,F
07DC0:  MOVF   03,W
07DC2:  IORWF  x01,F
07DC4:  MOVLW  03
07DC6:  MOVLB  1
07DC8:  ADDWF  xAF,W
07DCA:  MOVWF  FE9
07DCC:  MOVLW  00
07DCE:  ADDWFC xB0,W
07DD0:  MOVWF  FEA
07DD2:  MOVF   FEF,W
07DD4:  MOVLB  2
07DD6:  CLRF   x06
07DD8:  CLRF   x05
07DDA:  CLRF   x04
07DDC:  MOVWF  x03
07DDE:  MOVFF  205,03
07DE2:  MOVFF  204,02
07DE6:  MOVFF  203,01
07DEA:  CLRF   00
07DEC:  MOVF   00,W
07DEE:  MOVLB  1
07DF0:  IORWF  xFE,F
07DF2:  MOVF   01,W
07DF4:  IORWF  xFF,F
07DF6:  MOVF   02,W
07DF8:  MOVLB  2
07DFA:  IORWF  x00,F
07DFC:  MOVF   03,W
07DFE:  IORWF  x01,F
07E00:  MOVLW  04
07E02:  MOVLB  1
07E04:  ADDWF  xAF,W
07E06:  MOVWF  FE9
07E08:  MOVLW  00
07E0A:  ADDWFC xB0,W
07E0C:  MOVWF  FEA
07E0E:  MOVF   FEF,W
07E10:  MOVWF  00
07E12:  CLRF   01
07E14:  CLRF   02
07E16:  CLRF   03
07E18:  MOVF   00,W
07E1A:  IORWF  xFE,W
07E1C:  MOVWF  xB1
07E1E:  MOVF   01,W
07E20:  IORWF  xFF,W
07E22:  MOVWF  xB2
07E24:  MOVF   02,W
07E26:  MOVLB  2
07E28:  IORWF  x00,W
07E2A:  MOVLB  1
07E2C:  MOVWF  xB3
07E2E:  MOVF   03,W
07E30:  MOVLB  2
07E32:  IORWF  x01,W
07E34:  MOVLB  1
07E36:  MOVWF  xB4
07E38:  MOVLW  07
07E3A:  ADDWF  xAF,W
07E3C:  MOVWF  FE9
07E3E:  MOVLW  00
07E40:  ADDWFC xB0,W
07E42:  MOVWF  FEA
07E44:  MOVF   FEF,W
07E46:  CLRF   xFF
07E48:  MOVWF  xFE
07E4A:  MOVFF  1FE,1FF
07E4E:  CLRF   xFE
07E50:  MOVLW  08
07E52:  ADDWF  xAF,W
07E54:  MOVWF  FE9
07E56:  MOVLW  00
07E58:  ADDWFC xB0,W
07E5A:  MOVWF  FEA
07E5C:  MOVF   FEF,W
07E5E:  CLRF   03
07E60:  IORWF  xFE,W
07E62:  MOVWF  xB5
07E64:  MOVF   03,W
07E66:  IORWF  xFF,W
07E68:  MOVWF  xB6
.................... {
....................    int32 address = 
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
....................    
....................    int16 packet_num = 
....................       ((int16)parameter[7] << 8) |
....................       ((int16)parameter[8]);
....................       
....................    int8 read_data[PACKET_SIZE] = {0x00}; // Initialize read data buffer
07E6A:  CLRF   xB7
07E6C:  CLRF   xB8
07E6E:  CLRF   xB9
07E70:  CLRF   xBA
07E72:  CLRF   xBB
07E74:  CLRF   xBC
07E76:  CLRF   xBD
07E78:  CLRF   xBE
07E7A:  CLRF   xBF
07E7C:  CLRF   xC0
07E7E:  CLRF   xC1
07E80:  CLRF   xC2
07E82:  CLRF   xC3
07E84:  CLRF   xC4
07E86:  CLRF   xC5
07E88:  CLRF   xC6
07E8A:  CLRF   xC7
07E8C:  CLRF   xC8
07E8E:  CLRF   xC9
07E90:  CLRF   xCA
07E92:  CLRF   xCB
07E94:  CLRF   xCC
07E96:  CLRF   xCD
07E98:  CLRF   xCE
07E9A:  CLRF   xCF
07E9C:  CLRF   xD0
07E9E:  CLRF   xD1
07EA0:  CLRF   xD2
07EA2:  CLRF   xD3
07EA4:  CLRF   xD4
07EA6:  CLRF   xD5
07EA8:  CLRF   xD6
07EAA:  CLRF   xD7
07EAC:  CLRF   xD8
07EAE:  CLRF   xD9
07EB0:  CLRF   xDA
07EB2:  CLRF   xDB
07EB4:  CLRF   xDC
07EB6:  CLRF   xDD
07EB8:  CLRF   xDE
07EBA:  CLRF   xDF
07EBC:  CLRF   xE0
07EBE:  CLRF   xE1
07EC0:  CLRF   xE2
07EC2:  CLRF   xE3
07EC4:  CLRF   xE4
07EC6:  CLRF   xE5
07EC8:  CLRF   xE6
07ECA:  CLRF   xE7
07ECC:  CLRF   xE8
07ECE:  CLRF   xE9
07ED0:  CLRF   xEA
07ED2:  CLRF   xEB
07ED4:  CLRF   xEC
07ED6:  CLRF   xED
07ED8:  CLRF   xEE
07EDA:  CLRF   xEF
07EDC:  CLRF   xF0
07EDE:  CLRF   xF1
07EE0:  CLRF   xF2
07EE2:  CLRF   xF3
07EE4:  CLRF   xF4
07EE6:  CLRF   xF5
07EE8:  CLRF   xF6
....................    if(!is_connect(smf)) {
07EEA:  MOVFF  119,253
07EEE:  MOVFF  118,252
07EF2:  MOVFF  117,251
07EF6:  MOVFF  116,250
07EFA:  MOVLB  0
07EFC:  CALL   2E24
07F00:  MOVF   01,F
07F02:  BTFSS  FD8.2
07F04:  GOTO   7F1C
....................       printf("SMF is not connected\r\n");
07F08:  MOVLW  B8
07F0A:  MOVWF  FF6
07F0C:  MOVLW  20
07F0E:  MOVWF  FF7
07F10:  MOVLW  00
07F12:  MOVWF  FF8
07F14:  CALL   22FE
....................       return;
07F18:  GOTO   8170
....................    }
....................    printf("Start Flash SMF Read Force\r\n");
07F1C:  MOVLW  D0
07F1E:  MOVWF  FF6
07F20:  MOVLW  20
07F22:  MOVWF  FF7
07F24:  MOVLW  00
07F26:  MOVWF  FF8
07F28:  CALL   22FE
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
07F2C:  MOVLB  1
07F2E:  MOVF   xAF,W
07F30:  MOVWF  FE9
07F32:  MOVF   xB0,W
07F34:  MOVWF  FEA
07F36:  MOVFF  FEF,1FE
07F3A:  MOVFF  1FE,20F
07F3E:  MOVLB  2
07F40:  CLRF   x10
07F42:  MOVLB  0
07F44:  CALL   510C
.................... 
....................    // 統合管理システムからキューに追加
....................    // enqueue_read_data(address, packet_num * PACKET_SIZE);
.................... 
....................    printf("\tAddress  : 0x%08LX\r\n", address);
07F48:  MOVLW  EE
07F4A:  MOVWF  FF6
07F4C:  MOVLW  20
07F4E:  MOVWF  FF7
07F50:  MOVLW  00
07F52:  MOVWF  FF8
07F54:  MOVLW  0E
07F56:  MOVLB  A
07F58:  MOVWF  x4E
07F5A:  MOVLB  0
07F5C:  CALL   2334
07F60:  MOVFF  1B4,9E8
07F64:  MOVLW  37
07F66:  MOVLB  9
07F68:  MOVWF  xE9
07F6A:  MOVLB  0
07F6C:  CALL   2564
07F70:  MOVFF  1B3,9E8
07F74:  MOVLW  37
07F76:  MOVLB  9
07F78:  MOVWF  xE9
07F7A:  MOVLB  0
07F7C:  CALL   2564
07F80:  MOVFF  1B2,9E8
07F84:  MOVLW  37
07F86:  MOVLB  9
07F88:  MOVWF  xE9
07F8A:  MOVLB  0
07F8C:  CALL   2564
07F90:  MOVFF  1B1,9E8
07F94:  MOVLW  37
07F96:  MOVLB  9
07F98:  MOVWF  xE9
07F9A:  MOVLB  0
07F9C:  CALL   2564
07FA0:  MOVLW  0D
07FA2:  BTFSS  FA6.6
07FA4:  GOTO   7FA2
07FA8:  MOVLB  E
07FAA:  MOVWF  xF9
07FAC:  MOVLW  0A
07FAE:  MOVLB  0
07FB0:  BTFSS  FA6.6
07FB2:  GOTO   7FB0
07FB6:  MOVLB  E
07FB8:  MOVWF  xF9
....................    printf("\tPacketNum: 0x%04LX\r\n", packet_num);
07FBA:  MOVLW  04
07FBC:  MOVWF  FF6
07FBE:  MOVLW  21
07FC0:  MOVWF  FF7
07FC2:  MOVLW  00
07FC4:  MOVWF  FF8
07FC6:  MOVLW  0E
07FC8:  MOVLB  A
07FCA:  MOVWF  x4E
07FCC:  MOVLB  0
07FCE:  CALL   2334
07FD2:  MOVFF  1B6,9E8
07FD6:  MOVLW  37
07FD8:  MOVLB  9
07FDA:  MOVWF  xE9
07FDC:  MOVLB  0
07FDE:  CALL   2564
07FE2:  MOVFF  1B5,9E8
07FE6:  MOVLW  37
07FE8:  MOVLB  9
07FEA:  MOVWF  xE9
07FEC:  MOVLB  0
07FEE:  CALL   2564
07FF2:  MOVLW  0D
07FF4:  BTFSS  FA6.6
07FF6:  GOTO   7FF4
07FFA:  MOVLB  E
07FFC:  MOVWF  xF9
07FFE:  MOVLW  0A
08000:  MOVLB  0
08002:  BTFSS  FA6.6
08004:  GOTO   8002
08008:  MOVLB  E
0800A:  MOVWF  xF9
....................    printf("read data\r\n");
0800C:  MOVLW  1A
0800E:  MOVWF  FF6
08010:  MOVLW  21
08012:  MOVWF  FF7
08014:  MOVLW  00
08016:  MOVWF  FF8
08018:  MOVLB  0
0801A:  CALL   22FE
....................    for (int16 packet_count = 0; packet_count < packet_num; packet_count++)
0801E:  MOVLB  1
08020:  CLRF   xF8
08022:  CLRF   xF7
08024:  MOVLB  0
08026:  MOVLB  1
08028:  MOVF   xF8,W
0802A:  SUBWF  xB6,W
0802C:  BTFSC  FD8.0
0802E:  BRA    8036
08030:  MOVLB  0
08032:  GOTO   8144
08036:  MOVLB  0
08038:  BTFSS  FD8.2
0803A:  GOTO   8050
0803E:  MOVLB  1
08040:  MOVF   xB5,W
08042:  SUBWF  xF7,W
08044:  BTFSS  FD8.0
08046:  BRA    804E
08048:  MOVLB  0
0804A:  GOTO   8144
0804E:  MOVLB  0
....................    {
....................       int32 current_address = address + (packet_count * PACKET_SIZE);
08050:  MOVLB  1
08052:  RLCF   xF7,W
08054:  MOVWF  02
08056:  RLCF   xF8,W
08058:  MOVWF  03
0805A:  RLCF   02,F
0805C:  RLCF   03,F
0805E:  RLCF   02,F
08060:  RLCF   03,F
08062:  RLCF   02,F
08064:  RLCF   03,F
08066:  RLCF   02,F
08068:  RLCF   03,F
0806A:  RLCF   02,F
0806C:  RLCF   03,F
0806E:  MOVLW  C0
08070:  ANDWF  02,F
08072:  MOVF   02,W
08074:  ADDWF  xB1,W
08076:  MOVWF  xF9
08078:  MOVF   03,W
0807A:  ADDWFC xB2,W
0807C:  MOVWF  xFA
0807E:  MOVLW  00
08080:  ADDWFC xB3,W
08082:  MOVWF  xFB
08084:  MOVLW  00
08086:  ADDWFC xB4,W
08088:  MOVWF  xFC
0808A:  MOVLB  0
....................       read_data_bytes(smf, current_address, read_data, PACKET_SIZE);
0808C:  MOVFF  119,AEE
08090:  MOVFF  118,AED
08094:  MOVFF  117,AEC
08098:  MOVFF  116,AEB
0809C:  MOVFF  1FC,AF2
080A0:  MOVFF  1FB,AF1
080A4:  MOVFF  1FA,AF0
080A8:  MOVFF  1F9,AEF
080AC:  MOVLW  01
080AE:  MOVLB  A
080B0:  MOVWF  xF4
080B2:  MOVLW  B7
080B4:  MOVWF  xF3
080B6:  CLRF   xF8
080B8:  CLRF   xF7
080BA:  CLRF   xF6
080BC:  MOVLW  40
080BE:  MOVWF  xF5
080C0:  MOVLB  0
080C2:  CALL   2EEC
....................       for (int8 byte_count = 0; byte_count < PACKET_SIZE; byte_count++)
080C6:  MOVLB  1
080C8:  CLRF   xFD
080CA:  MOVLB  0
080CC:  MOVLB  1
080CE:  MOVF   xFD,W
080D0:  SUBLW  3F
080D2:  BTFSC  FD8.0
080D4:  BRA    80DC
080D6:  MOVLB  0
080D8:  GOTO   811A
080DC:  MOVLB  0
....................       {
....................          printf("%02X ", read_data[byte_count]);
080DE:  CLRF   03
080E0:  MOVLB  1
080E2:  MOVF   xFD,W
080E4:  ADDLW  B7
080E6:  MOVWF  FE9
080E8:  MOVLW  01
080EA:  ADDWFC 03,W
080EC:  MOVWF  FEA
080EE:  MOVFF  FEF,1FE
080F2:  MOVFF  1FE,9E8
080F6:  MOVLW  37
080F8:  MOVLB  9
080FA:  MOVWF  xE9
080FC:  MOVLB  0
080FE:  CALL   2564
08102:  MOVLW  20
08104:  BTFSS  FA6.6
08106:  GOTO   8104
0810A:  MOVLB  E
0810C:  MOVWF  xF9
0810E:  MOVLB  0
08110:  MOVLB  1
08112:  INCF   xFD,F
08114:  MOVLB  0
08116:  GOTO   80CC
....................       }
....................       printf("\r\n");
0811A:  MOVLW  0D
0811C:  BTFSS  FA6.6
0811E:  GOTO   811C
08122:  MOVLB  E
08124:  MOVWF  xF9
08126:  MOVLW  0A
08128:  MOVLB  0
0812A:  BTFSS  FA6.6
0812C:  GOTO   812A
08130:  MOVLB  E
08132:  MOVWF  xF9
08134:  MOVLB  0
08136:  MOVLB  1
08138:  INCF   xF7,F
0813A:  BTFSC  FD8.2
0813C:  INCF   xF8,F
0813E:  MOVLB  0
08140:  GOTO   8026
....................    }
.................... 
....................    printf("\r\nEnd Flash SMF Read Force\r\n");
08144:  MOVLW  26
08146:  MOVWF  FF6
08148:  MOVLW  21
0814A:  MOVWF  FF7
0814C:  MOVLW  00
0814E:  MOVWF  FF8
08150:  CALL   22FE
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
08154:  MOVLB  1
08156:  MOVF   xAF,W
08158:  MOVWF  FE9
0815A:  MOVF   xB0,W
0815C:  MOVWF  FEA
0815E:  MOVFF  FEF,1FE
08162:  MOVFF  1FE,20F
08166:  MOVLB  2
08168:  SETF   x10
0816A:  MOVLB  0
0816C:  CALL   510C
08170:  GOTO   1025A (RETURN)
.................... }
.................... 
.................... void mode_smf_erase_force(int8 parameter[])
.................... {
....................    printf("Start SMF Erase All\r\n");
08174:  MOVLW  44
08176:  MOVWF  FF6
08178:  MOVLW  21
0817A:  MOVWF  FF7
0817C:  MOVLW  00
0817E:  MOVWF  FF8
08180:  CALL   22FE
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
08184:  MOVLB  1
08186:  MOVF   xAF,W
08188:  MOVWF  FE9
0818A:  MOVF   xB0,W
0818C:  MOVWF  FEA
0818E:  MOVFF  FEF,1B1
....................    piclog_make(cmd, 0x00); // Log the command execution
08192:  MOVFF  1B1,20F
08196:  MOVLB  2
08198:  CLRF   x10
0819A:  MOVLB  0
0819C:  CALL   510C
....................    
.................... 
....................    
....................    for (int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_IV2_DATA_END_ADDRESS; address += SECTOR_64K_BYTE) {
081A0:  MOVLW  06
081A2:  MOVLB  1
081A4:  MOVWF  xB5
081A6:  MOVLW  AA
081A8:  MOVWF  xB4
081AA:  CLRF   xB3
081AC:  CLRF   xB2
081AE:  MOVLB  0
081B0:  MOVLB  1
081B2:  MOVF   xB5,W
081B4:  SUBLW  07
081B6:  BTFSC  FD8.0
081B8:  BRA    81C0
081BA:  MOVLB  0
081BC:  GOTO   823E
081C0:  MOVLB  0
081C2:  BTFSS  FD8.2
081C4:  GOTO   820A
081C8:  MOVLB  1
081CA:  MOVF   xB4,W
081CC:  SUBLW  49
081CE:  BTFSC  FD8.0
081D0:  BRA    81D8
081D2:  MOVLB  0
081D4:  GOTO   823E
081D8:  MOVLB  0
081DA:  BTFSS  FD8.2
081DC:  GOTO   820A
081E0:  MOVLB  1
081E2:  MOVF   xB3,W
081E4:  SUBLW  0F
081E6:  BTFSC  FD8.0
081E8:  BRA    81F0
081EA:  MOVLB  0
081EC:  GOTO   823E
081F0:  MOVLB  0
081F2:  BTFSS  FD8.2
081F4:  GOTO   820A
081F8:  MOVLB  1
081FA:  MOVF   xB2,W
081FC:  SUBLW  FE
081FE:  BTFSC  FD8.0
08200:  BRA    8208
08202:  MOVLB  0
08204:  GOTO   823E
08208:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
0820A:  MOVFF  119,1F8
0820E:  MOVFF  118,1F7
08212:  MOVFF  117,1F6
08216:  MOVFF  116,1F5
0821A:  MOVFF  1B5,1FC
0821E:  MOVFF  1B4,1FB
08222:  MOVFF  1B3,1FA
08226:  MOVFF  1B2,1F9
0822A:  CALL   5934
0822E:  MOVLW  01
08230:  MOVLB  1
08232:  ADDWF  xB4,F
08234:  MOVLW  00
08236:  ADDWFC xB5,F
08238:  MOVLB  0
0823A:  GOTO   81B0
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
0823E:  MOVFF  1B1,20F
08242:  MOVLB  2
08244:  SETF   x10
08246:  MOVLB  0
08248:  CALL   510C
....................    printf("End SMF Erase All\r\n");
0824C:  MOVLW  5A
0824E:  MOVWF  FF6
08250:  MOVLW  21
08252:  MOVWF  FF7
08254:  MOVLW  00
08256:  MOVWF  FF8
08258:  CALL   22FE
0825C:  GOTO   1026A (RETURN)
.................... }
.................... 
.................... void mode_smf_address_reset(int8 parameter[])
.................... {
....................    printf("Start SMF Reset\r\n");
*
07BE4:  MOVLW  6E
07BE6:  MOVWF  FF6
07BE8:  MOVLW  21
07BEA:  MOVWF  FF7
07BEC:  MOVLW  00
07BEE:  MOVWF  FF8
07BF0:  CALL   22FE
....................    piclog_make(parameter[0], PICLOG_PARAM_START);
07BF4:  MOVLB  1
07BF6:  MOVF   xAF,W
07BF8:  MOVWF  FE9
07BFA:  MOVF   xB0,W
07BFC:  MOVWF  FEA
07BFE:  MOVFF  FEF,1F5
07C02:  MOVFF  1F5,20F
07C06:  MOVLB  2
07C08:  CLRF   x10
07C0A:  MOVLB  0
07C0C:  CALL   510C
....................    int8 writedata[PACKET_SIZE] = {0x00}; 
07C10:  MOVLB  1
07C12:  CLRF   xB1
07C14:  CLRF   xB2
07C16:  CLRF   xB3
07C18:  CLRF   xB4
07C1A:  CLRF   xB5
07C1C:  CLRF   xB6
07C1E:  CLRF   xB7
07C20:  CLRF   xB8
07C22:  CLRF   xB9
07C24:  CLRF   xBA
07C26:  CLRF   xBB
07C28:  CLRF   xBC
07C2A:  CLRF   xBD
07C2C:  CLRF   xBE
07C2E:  CLRF   xBF
07C30:  CLRF   xC0
07C32:  CLRF   xC1
07C34:  CLRF   xC2
07C36:  CLRF   xC3
07C38:  CLRF   xC4
07C3A:  CLRF   xC5
07C3C:  CLRF   xC6
07C3E:  CLRF   xC7
07C40:  CLRF   xC8
07C42:  CLRF   xC9
07C44:  CLRF   xCA
07C46:  CLRF   xCB
07C48:  CLRF   xCC
07C4A:  CLRF   xCD
07C4C:  CLRF   xCE
07C4E:  CLRF   xCF
07C50:  CLRF   xD0
07C52:  CLRF   xD1
07C54:  CLRF   xD2
07C56:  CLRF   xD3
07C58:  CLRF   xD4
07C5A:  CLRF   xD5
07C5C:  CLRF   xD6
07C5E:  CLRF   xD7
07C60:  CLRF   xD8
07C62:  CLRF   xD9
07C64:  CLRF   xDA
07C66:  CLRF   xDB
07C68:  CLRF   xDC
07C6A:  CLRF   xDD
07C6C:  CLRF   xDE
07C6E:  CLRF   xDF
07C70:  CLRF   xE0
07C72:  CLRF   xE1
07C74:  CLRF   xE2
07C76:  CLRF   xE3
07C78:  CLRF   xE4
07C7A:  CLRF   xE5
07C7C:  CLRF   xE6
07C7E:  CLRF   xE7
07C80:  CLRF   xE8
07C82:  CLRF   xE9
07C84:  CLRF   xEA
07C86:  CLRF   xEB
07C88:  CLRF   xEC
07C8A:  CLRF   xED
07C8C:  CLRF   xEE
07C8E:  CLRF   xEF
07C90:  CLRF   xF0
....................    for (int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_IV2_DATA_END_ADDRESS; address += SECTOR_64K_BYTE) {
07C92:  MOVLW  06
07C94:  MOVWF  xF4
07C96:  MOVLW  AA
07C98:  MOVWF  xF3
07C9A:  CLRF   xF2
07C9C:  CLRF   xF1
07C9E:  MOVLB  0
07CA0:  MOVLB  1
07CA2:  MOVF   xF4,W
07CA4:  SUBLW  07
07CA6:  BTFSC  FD8.0
07CA8:  BRA    7CB0
07CAA:  MOVLB  0
07CAC:  GOTO   7D2E
07CB0:  MOVLB  0
07CB2:  BTFSS  FD8.2
07CB4:  GOTO   7CFA
07CB8:  MOVLB  1
07CBA:  MOVF   xF3,W
07CBC:  SUBLW  49
07CBE:  BTFSC  FD8.0
07CC0:  BRA    7CC8
07CC2:  MOVLB  0
07CC4:  GOTO   7D2E
07CC8:  MOVLB  0
07CCA:  BTFSS  FD8.2
07CCC:  GOTO   7CFA
07CD0:  MOVLB  1
07CD2:  MOVF   xF2,W
07CD4:  SUBLW  0F
07CD6:  BTFSC  FD8.0
07CD8:  BRA    7CE0
07CDA:  MOVLB  0
07CDC:  GOTO   7D2E
07CE0:  MOVLB  0
07CE2:  BTFSS  FD8.2
07CE4:  GOTO   7CFA
07CE8:  MOVLB  1
07CEA:  MOVF   xF1,W
07CEC:  SUBLW  FE
07CEE:  BTFSC  FD8.0
07CF0:  BRA    7CF8
07CF2:  MOVLB  0
07CF4:  GOTO   7D2E
07CF8:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
07CFA:  MOVFF  119,1F8
07CFE:  MOVFF  118,1F7
07D02:  MOVFF  117,1F6
07D06:  MOVFF  116,1F5
07D0A:  MOVFF  1F4,1FC
07D0E:  MOVFF  1F3,1FB
07D12:  MOVFF  1F2,1FA
07D16:  MOVFF  1F1,1F9
07D1A:  CALL   5934
07D1E:  MOVLW  01
07D20:  MOVLB  1
07D22:  ADDWF  xF3,F
07D24:  MOVLW  00
07D26:  ADDWFC xF4,F
07D28:  MOVLB  0
07D2A:  GOTO   7CA0
....................    }
....................    smf_data_table_init(); // Update the address area after writing
07D2E:  CALL   7A62
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
07D32:  MOVLB  1
07D34:  MOVF   xAF,W
07D36:  MOVWF  FE9
07D38:  MOVF   xB0,W
07D3A:  MOVWF  FEA
07D3C:  MOVFF  FEF,1F5
07D40:  MOVFF  1F5,20F
07D44:  MOVLB  2
07D46:  SETF   x10
07D48:  MOVLB  0
07D4A:  CALL   510C
....................    printf("End SMF Reset\r\n");
07D4E:  MOVLW  80
07D50:  MOVWF  FF6
07D52:  MOVLW  21
07D54:  MOVWF  FF7
07D56:  MOVLW  00
07D58:  MOVWF  FF8
07D5A:  CALL   22FE
07D5E:  GOTO   1024A (RETURN)
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
13052:  CLRF   FF8
13054:  BCF    FF1.2
13056:  BCF    F9F.0
13058:  BCF    FA9.5
1305A:  BSF    FD0.7
1305C:  BSF    07.7
1305E:  MOVLB  E
13060:  MOVLW  55
13062:  MOVWF  F7E
13064:  MOVLW  AA
13066:  MOVWF  F7E
13068:  BCF    F66.6
1306A:  MOVLW  F9
1306C:  MOVWF  x2C
1306E:  MOVLW  F6
13070:  MOVWF  x2D
13072:  MOVLW  0F
13074:  MOVWF  x2E
13076:  MOVLW  40
13078:  MOVWF  x12
1307A:  MOVLW  30
1307C:  MOVWF  x13
1307E:  MOVLW  20
13080:  MOVWF  x22
13082:  MOVLW  30
13084:  MOVWF  x24
13086:  MOVLW  55
13088:  MOVWF  F7E
1308A:  MOVLW  AA
1308C:  MOVWF  F7E
1308E:  BSF    F66.6
13090:  CLRF   F9B
13092:  CLRF   F64
13094:  CLRF   F65
13096:  CLRF   F66
13098:  MOVLW  02
1309A:  MOVWF  FD3
1309C:  CLRF   1B
1309E:  MOVLB  F
130A0:  BSF    x2D.3
130A2:  MOVLW  A0
130A4:  MOVWF  x2B
130A6:  MOVLW  01
130A8:  MOVWF  x2C
130AA:  MOVLW  A6
130AC:  MOVWF  x2E
130AE:  MOVLW  90
130B0:  MOVWF  x2F
130B2:  MOVLB  E
130B4:  BSF    xFD.3
130B6:  MOVLW  A0
130B8:  MOVWF  xFB
130BA:  MOVLW  01
130BC:  MOVWF  xFC
130BE:  MOVLW  A6
130C0:  MOVWF  xFE
130C2:  MOVLW  90
130C4:  MOVWF  xFF
130C6:  BSF    F92.1
130C8:  BCF    F92.0
130CA:  BCF    F92.3
130CC:  BCF    F89.3
130CE:  BSF    F96.0
130D0:  BCF    F96.6
130D2:  BCF    F96.1
130D4:  BCF    F8D.1
130D6:  BSF    F93.4
130D8:  BCF    F93.5
130DA:  BCF    F93.2
130DC:  BSF    F8A.2
130DE:  BCF    F95.4
130E0:  BCF    F95.5
130E2:  BSF    F8C.5
130E4:  CLRF   1F
130E6:  CLRF   1E
130E8:  CLRF   1D
130EA:  CLRF   1C
130EC:  CLRF   23
130EE:  CLRF   22
130F0:  CLRF   21
130F2:  CLRF   20
130F4:  CLRF   27
130F6:  CLRF   26
130F8:  CLRF   25
130FA:  CLRF   24
130FC:  CLRF   29
130FE:  CLRF   28
13100:  CLRF   4A
13102:  BCF    4B.0
13104:  MOVLW  1E
13106:  MOVLB  1
13108:  MOVWF  x7C
1310A:  CLRF   x81
1310C:  CLRF   x80
1310E:  CLRF   x7F
13110:  CLRF   x7E
13112:  CLRF   x85
13114:  CLRF   x84
13116:  CLRF   x83
13118:  CLRF   x82
1311A:  CLRF   x87
1311C:  CLRF   x86
1311E:  MOVLB  E
13120:  CLRF   xD9
13122:  CLRF   xDA
13124:  CLRF   xCE
13126:  CLRF   xCF
13128:  CLRF   xD0
1312A:  CLRF   xD1
1312C:  CLRF   xD2
1312E:  CLRF   xD3
13130:  CLRF   xD4
13132:  CLRF   xD5
13134:  CLRF   x45
13136:  CLRF   x46
13138:  CLRF   x47
1313A:  BCF    x8D.7
1313C:  BCF    x8D.6
1313E:  BCF    x8D.5
13140:  MOVLB  F
13142:  CLRF   x53
13144:  CLRF   x38
13146:  CLRF   x37
13148:  MOVLB  0
1314A:  CLRF   2A
1314C:  CLRF   2B
1314E:  CLRF   2C
13150:  CLRF   2D
13152:  CLRF   2E
13154:  CLRF   2F
13156:  CLRF   30
13158:  CLRF   31
1315A:  CLRF   32
1315C:  CLRF   33
1315E:  CLRF   34
13160:  CLRF   35
13162:  CLRF   36
13164:  CLRF   37
13166:  CLRF   38
13168:  CLRF   39
1316A:  CLRF   3A
1316C:  CLRF   3B
1316E:  CLRF   3C
13170:  CLRF   3D
13172:  CLRF   3E
13174:  CLRF   3F
13176:  CLRF   40
13178:  CLRF   41
1317A:  CLRF   42
1317C:  CLRF   43
1317E:  CLRF   44
13180:  CLRF   45
13182:  CLRF   46
13184:  CLRF   47
13186:  CLRF   48
13188:  CLRF   49
1318A:  MOVLW  03
1318C:  MOVWF  4C
1318E:  CLRF   4D
13190:  CLRF   4E
13192:  CLRF   4F
13194:  CLRF   50
13196:  CLRF   51
13198:  CLRF   52
1319A:  CLRF   53
1319C:  CLRF   54
1319E:  CLRF   55
131A0:  CLRF   56
131A2:  CLRF   57
131A4:  CLRF   58
131A6:  CLRF   59
131A8:  CLRF   5A
131AA:  CLRF   5B
131AC:  CLRF   5C
131AE:  CLRF   5D
131B0:  CLRF   5E
131B2:  CLRF   5F
131B4:  CLRF   x60
131B6:  CLRF   x61
131B8:  CLRF   x62
131BA:  CLRF   x63
131BC:  CLRF   x64
131BE:  CLRF   x65
131C0:  CLRF   x66
131C2:  CLRF   x67
131C4:  CLRF   x68
131C6:  CLRF   x69
131C8:  CLRF   x6A
131CA:  CLRF   x6B
131CC:  CLRF   x6C
131CE:  CLRF   x6D
131D0:  CLRF   x6E
131D2:  CLRF   x6F
131D4:  CLRF   x70
131D6:  CLRF   x71
131D8:  CLRF   x72
131DA:  CLRF   x73
131DC:  CLRF   x74
131DE:  CLRF   x75
131E0:  CLRF   x76
131E2:  CLRF   x77
131E4:  CLRF   x78
131E6:  CLRF   x79
131E8:  CLRF   x7A
131EA:  CLRF   x7B
131EC:  CLRF   x7C
131EE:  CLRF   x7D
131F0:  CLRF   x7E
131F2:  CLRF   x7F
131F4:  CLRF   x80
131F6:  CLRF   x81
131F8:  CLRF   x82
131FA:  CLRF   x83
131FC:  CLRF   x84
131FE:  CLRF   x85
13200:  CLRF   x86
13202:  CLRF   x87
13204:  CLRF   x88
13206:  CLRF   x89
13208:  CLRF   x8A
1320A:  CLRF   x8B
1320C:  CLRF   x8C
1320E:  CLRF   x8D
13210:  CLRF   x8E
13212:  CLRF   x8F
13214:  CLRF   x90
13216:  CLRF   x91
13218:  CLRF   x92
1321A:  CLRF   x93
1321C:  CLRF   x94
1321E:  CLRF   x95
13220:  CLRF   x96
13222:  CLRF   x97
13224:  CLRF   x98
13226:  CLRF   x99
13228:  CLRF   x9A
1322A:  CLRF   x9B
1322C:  CLRF   x9C
1322E:  CLRF   x9D
13230:  CLRF   x9E
13232:  CLRF   x9F
13234:  CLRF   xA0
13236:  CLRF   xA1
13238:  CLRF   xA2
1323A:  CLRF   xA3
1323C:  CLRF   xA4
1323E:  CLRF   xA5
13240:  CLRF   xA6
13242:  CLRF   xA7
13244:  CLRF   xA8
13246:  CLRF   xA9
13248:  CLRF   xAA
1324A:  CLRF   xAB
1324C:  CLRF   xAC
1324E:  CLRF   xAD
13250:  CLRF   xAE
13252:  CLRF   xAF
13254:  CLRF   xB0
13256:  CLRF   xB1
13258:  CLRF   xB2
1325A:  CLRF   xB3
1325C:  CLRF   xB4
1325E:  CLRF   xB5
13260:  CLRF   xB6
13262:  CLRF   xB7
13264:  CLRF   xB8
13266:  CLRF   xB9
13268:  CLRF   xBA
1326A:  CLRF   xBB
1326C:  CLRF   xBC
1326E:  CLRF   xBD
13270:  CLRF   xBE
13272:  CLRF   xBF
13274:  CLRF   xC0
13276:  CLRF   xC1
13278:  CLRF   xC2
1327A:  CLRF   xC3
1327C:  CLRF   xC4
1327E:  CLRF   xC5
13280:  CLRF   xC6
13282:  CLRF   xC7
13284:  CLRF   xC8
13286:  CLRF   xC9
13288:  CLRF   xCA
1328A:  CLRF   xCB
1328C:  CLRF   xCC
1328E:  CLRF   xCD
13290:  CLRF   xCE
13292:  CLRF   xCF
13294:  CLRF   xD0
13296:  CLRF   xD1
13298:  CLRF   xD2
1329A:  CLRF   xD3
1329C:  CLRF   xD4
1329E:  CLRF   xD5
132A0:  CLRF   xD6
132A2:  CLRF   xD7
132A4:  CLRF   xD8
132A6:  CLRF   xD9
132A8:  CLRF   xDA
132AA:  CLRF   xDB
132AC:  CLRF   xDC
132AE:  CLRF   xDD
132B0:  CLRF   xDE
132B2:  CLRF   xDF
132B4:  CLRF   xE0
132B6:  CLRF   xE1
132B8:  CLRF   xE2
132BA:  CLRF   xE3
132BC:  CLRF   xE4
132BE:  CLRF   xE5
132C0:  CLRF   xE6
132C2:  CLRF   xE7
132C4:  CLRF   xE8
132C6:  CLRF   xE9
132C8:  CLRF   xEA
132CA:  CLRF   xEB
132CC:  CLRF   xEC
132CE:  CLRF   xED
132D0:  CLRF   xEE
132D2:  CLRF   xEF
132D4:  CLRF   xF0
132D6:  CLRF   xF1
132D8:  CLRF   xF2
132DA:  CLRF   xF3
132DC:  CLRF   xF4
132DE:  CLRF   xF5
132E0:  CLRF   xF6
132E2:  CLRF   xF7
132E4:  CLRF   xF8
132E6:  CLRF   xF9
132E8:  CLRF   xFA
132EA:  CLRF   xFB
132EC:  CLRF   xFC
132EE:  CLRF   xFD
132F0:  CLRF   xFE
132F2:  CLRF   xFF
132F4:  MOVLB  1
132F6:  CLRF   x00
132F8:  CLRF   x01
132FA:  CLRF   x02
132FC:  CLRF   x03
132FE:  CLRF   x04
13300:  CLRF   x05
13302:  CLRF   x06
13304:  CLRF   x07
13306:  CLRF   x08
13308:  CLRF   x09
1330A:  CLRF   x0A
1330C:  CLRF   x0B
1330E:  CLRF   x0C
13310:  CLRF   x0D
13312:  CLRF   x0E
13314:  CLRF   x0F
13316:  CLRF   x10
13318:  CLRF   x11
1331A:  CLRF   x12
1331C:  CLRF   x13
1331E:  MOVLW  30
13320:  MOVWF  x14
13322:  MOVLW  7C
13324:  MOVWF  x15
13326:  MOVLW  01
13328:  MOVWF  x16
1332A:  MOVLW  01
1332C:  MOVWF  x17
1332E:  MOVLW  02
13330:  MOVWF  x18
13332:  MOVLW  7C
13334:  MOVWF  x19
13336:  CLRF   x1A
13338:  MOVLW  09
1333A:  MOVWF  x1B
1333C:  MOVLW  01
1333E:  MOVWF  x1C
13340:  CLRF   x1D
13342:  MOVLW  02
13344:  MOVWF  x1E
13346:  MOVLW  01
13348:  MOVWF  x1F
1334A:  MOVLW  03
1334C:  MOVWF  x20
1334E:  MOVLW  04
13350:  MOVWF  x21
13352:  MOVLW  01
13354:  MOVWF  x69
13356:  MOVLW  22
13358:  MOVWF  x68
1335A:  MOVLW  01
1335C:  MOVWF  x6B
1335E:  MOVLW  2C
13360:  MOVWF  x6A
13362:  MOVLW  01
13364:  MOVWF  x6D
13366:  MOVLW  36
13368:  MOVWF  x6C
1336A:  MOVLW  01
1336C:  MOVWF  x6F
1336E:  MOVLW  40
13370:  MOVWF  x6E
13372:  MOVLW  01
13374:  MOVWF  x71
13376:  MOVLW  4A
13378:  MOVWF  x70
1337A:  MOVLW  01
1337C:  MOVWF  x73
1337E:  MOVLW  54
13380:  MOVWF  x72
13382:  MOVLW  01
13384:  MOVWF  x75
13386:  MOVLW  5E
13388:  MOVWF  x74
1338A:  CLRF   x88
1338C:  CLRF   x89
1338E:  CLRF   x8A
13390:  CLRF   x8B
13392:  MOVLB  0
.................... { 
....................    delay_ms(100); // wait for power stable
13394:  MOVLW  64
13396:  MOVLB  B
13398:  MOVWF  x03
1339A:  MOVLB  0
1339C:  CALL   22D0
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
133A0:  MOVLW  90
133A2:  MOVWF  FF6
133A4:  MOVLW  21
133A6:  MOVWF  FF7
133A8:  MOVLW  00
133AA:  MOVWF  FF8
133AC:  CALL   22FE
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM6.\r\n");
133B0:  MOVLW  D6
133B2:  MOVWF  FF6
133B4:  MOVLW  21
133B6:  MOVWF  FF7
133B8:  MOVLW  00
133BA:  MOVWF  FF8
133BC:  CALL   22FE
....................    fprintf(PC,"Last updated on %s %s, by Inoue.\r\n\r\n", __DATE__, __TIME__);
133C0:  MOVLW  04
133C2:  MOVWF  FF6
133C4:  MOVLW  22
133C6:  MOVWF  FF7
133C8:  MOVLW  00
133CA:  MOVWF  FF8
133CC:  MOVLW  10
133CE:  MOVLB  A
133D0:  MOVWF  x4E
133D2:  MOVLB  0
133D4:  CALL   2334
133D8:  MOVLW  2A
133DA:  MOVWF  FF6
133DC:  MOVLW  22
133DE:  MOVWF  FF7
133E0:  MOVLW  00
133E2:  MOVWF  FF8
133E4:  CALL   22FE
133E8:  MOVLW  20
133EA:  BTFSS  FA6.6
133EC:  GOTO   133EA
133F0:  MOVLB  E
133F2:  MOVWF  xF9
133F4:  MOVLW  34
133F6:  MOVWF  FF6
133F8:  MOVLW  22
133FA:  MOVWF  FF7
133FC:  MOVLW  00
133FE:  MOVWF  FF8
13400:  MOVLB  0
13402:  CALL   22FE
13406:  MOVLW  19
13408:  MOVWF  FF6
1340A:  MOVLW  22
1340C:  MOVWF  FF7
1340E:  MOVLW  00
13410:  MOVWF  FF8
13412:  MOVLW  0F
13414:  MOVLB  A
13416:  MOVWF  x4E
13418:  MOVLB  0
1341A:  CALL   2334
....................    memset(smf_update_flag, 0, sizeof(smf_update_flag));
1341E:  MOVLW  01
13420:  MOVWF  FEA
13422:  MOVLW  7A
13424:  MOVWF  FE9
13426:  CLRF   00
13428:  CLRF   02
1342A:  MOVLW  02
1342C:  MOVWF  01
1342E:  CALL   236E
....................    // io_init();
....................    setup_uart_to_boss();
13432:  GOTO   2392
....................    timer_init();
13436:  GOTO   23BC
....................    ad7490_init();
1343A:  GOTO   25E0
....................    mcp4901_init();
1343E:  GOTO   2910
....................    misf_init();
13442:  CALL   3980
....................    
....................    piclog_make(PICLOG_STARTUP,0x00);
13446:  MOVLB  2
13448:  CLRF   x0F
1344A:  CLRF   x10
1344C:  MOVLB  0
1344E:  CALL   510C
.................... 
....................    int1 is_finished = FALSE;
13452:  MOVLB  1
13454:  BCF    x8C.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
13456:  MOVLW  3E
13458:  MOVWF  FF6
1345A:  MOVLW  22
1345C:  MOVWF  FF7
1345E:  MOVLW  00
13460:  MOVWF  FF8
13462:  MOVLB  0
13464:  CALL   22FE
....................    
....................    //enable_negative_power();
....................    connect_port1();
13468:  CALL   5234
....................    connect_port2();
1346C:  CALL   523C
....................    mcp4901_1_write(0);
13470:  MOVLB  9
13472:  CLRF   xDD
13474:  CLRF   xDC
13476:  MOVLB  0
13478:  CALL   2894
....................    mcp4901_2_write(0);
1347C:  MOVLB  9
1347E:  CLRF   xDD
13480:  CLRF   xDC
13482:  MOVLB  0
13484:  CALL   28D2
....................    connect_negative_power1(TRUE); // CIGS1 Negative Power ON
13488:  MOVLW  01
1348A:  MOVLB  1
1348C:  MOVWF  x99
1348E:  MOVLB  0
13490:  GOTO   5244
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
13494:  MOVLW  64
13496:  MOVWF  FF6
13498:  MOVLW  22
1349A:  MOVWF  FF7
1349C:  MOVLW  00
1349E:  MOVWF  FF8
134A0:  CALL   22FE
.................... 
....................    //Start loop
....................    while(TRUE)
....................    {
....................       if(boss_receive_buffer_size > 0)
134A4:  MOVF   4A,F
134A6:  BTFSC  FD8.2
134A8:  GOTO   1354A
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
134AC:  MOVLB  1
134AE:  CLRF   xA0
134B0:  MOVLW  2A
134B2:  MOVWF  x9F
134B4:  MOVFF  4A,1A1
134B8:  MOVLB  0
134BA:  GOTO   5580
134BE:  MOVFF  02,03
134C2:  MOVF   01,W
134C4:  MOVWF  FE1
134C6:  MOVFF  03,FE2
134CA:  MOVLW  01
134CC:  MOVWF  FEA
134CE:  MOVLW  8D
134D0:  MOVWF  FE9
134D2:  MOVLW  0C
134D4:  MOVWF  01
134D6:  MOVFF  FE6,FEE
134DA:  DECFSZ 01,F
134DC:  GOTO   134D6
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
134E0:  MOVLB  1
134E2:  CLRF   xE0
134E4:  MOVLW  2A
134E6:  MOVWF  xDF
134E8:  CLRF   xE2
134EA:  MOVLW  4A
134EC:  MOVWF  xE1
134EE:  MOVLB  0
134F0:  CALL   5782
....................          
....................          if(recieve_cmd.is_exist){
134F4:  MOVLB  1
134F6:  BTFSC  x8F.0
134F8:  BRA    13500
134FA:  MOVLB  0
134FC:  GOTO   1354A
13500:  MOVLB  0
....................             is_finished = execute_command(&recieve_cmd); // FIX: 戻り値を保持
13502:  MOVLW  01
13504:  MOVLB  1
13506:  MOVWF  x9A
13508:  MOVLW  8D
1350A:  MOVWF  x99
1350C:  MOVLB  0
1350E:  GOTO   12FA2
13512:  MOVLB  1
13514:  BCF    x8C.0
13516:  BTFSC  01.0
13518:  BSF    x8C.0
....................             if (is_finished == TRUE)
1351A:  BTFSC  x8C.0
1351C:  BRA    13524
1351E:  MOVLB  0
13520:  GOTO   1353A
13524:  MOVLB  0
....................             {
....................                fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\n");
13526:  MOVLW  82
13528:  MOVWF  FF6
1352A:  MOVLW  22
1352C:  MOVWF  FF7
1352E:  MOVLW  00
13530:  MOVWF  FF8
13532:  CALL   22FE
....................                
.................... 
....................             }else{
13536:  GOTO   1354A
....................                fprintf(PC,"\r\nwaiting for BOSS PIC command");
1353A:  MOVLW  A4
1353C:  MOVWF  FF6
1353E:  MOVLW  22
13540:  MOVWF  FF7
13542:  MOVLW  00
13544:  MOVWF  FF8
13546:  CALL   22FE
....................             }
....................          }
....................       }
....................          
....................       delay_ms(500);
1354A:  MOVLW  02
1354C:  MOVLB  1
1354E:  MOVWF  x99
13550:  MOVLB  0
13552:  MOVLW  FA
13554:  MOVLB  B
13556:  MOVWF  x03
13558:  MOVLB  0
1355A:  CALL   22D0
1355E:  MOVLB  1
13560:  DECFSZ x99,F
13562:  BRA    13568
13564:  BRA    1356C
13566:  MOVLB  0
13568:  MOVLB  0
1356A:  BRA    13552
....................       fprintf(PC, ".");
1356C:  MOVLW  2E
1356E:  MOVLB  0
13570:  BTFSS  FA6.6
13572:  GOTO   13570
13576:  MOVLB  E
13578:  MOVWF  xF9
1357A:  MOVLB  0
1357C:  GOTO   134A4
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
13580:  MOVLW  C4
13582:  MOVWF  FF6
13584:  MOVLW  22
13586:  MOVWF  FF7
13588:  MOVLW  00
1358A:  MOVWF  FF8
1358C:  CALL   22FE
....................    
.................... }
.................... // End of files
13590:  SLEEP 

Configuration Fuses:
   Word  1: F6A0   STVREN NOXINST NODEBUG NOBROWNOUT BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS NODSWDT DSWDTOSC_INT
