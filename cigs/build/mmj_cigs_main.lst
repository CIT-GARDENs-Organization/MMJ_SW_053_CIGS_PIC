CCS PCH C Compiler, Version 5.104, 57077               22-9-25 18:42

               Filename:   build\mmj_cigs_main.lst

               ROM used:   67924 bytes (52%)
                           Largest free fragment is 63104
               RAM used:   549 (15%) at main() level
                           3037 (85%) worst case
               Stack used: 9 locations (8 in main + 1 for interrupts)
               Stack size: 31

*
00000:  NOP   
00002:  GOTO   102C2
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  F9D.0
0005E:  GOTO   0068
00062:  BTFSC  F9E.0
00064:  GOTO   019A
00068:  BTFSS  F61.5
0006A:  GOTO   0074
0006E:  BTFSC  FA6.5
00070:  GOTO   0202
00074:  MOVFF  0E,00
00078:  MOVFF  0F,01
0007C:  MOVFF  10,02
00080:  MOVFF  11,03
00084:  MOVFF  0C,FE9
00088:  MOVFF  07,FEA
0008C:  BSF    07.7
0008E:  MOVFF  08,FE1
00092:  MOVFF  09,FE2
00096:  MOVFF  0A,FD9
0009A:  MOVFF  0B,FDA
0009E:  MOVFF  12,FF3
000A2:  MOVFF  13,FF4
000A6:  MOVFF  14,FFA
000AA:  MOVFF  15,FF5
000AE:  MOVFF  16,FF6
000B2:  MOVFF  17,FF7
000B6:  MOVFF  18,FF8
000BA:  MOVFF  19,FFB
000BE:  MOVF   04,W
000C0:  MOVFF  06,FE0
000C4:  MOVFF  05,FD8
000C8:  RETFIE 0
.................... #include "mmj_cigs_main.h"  // ルート直下のヘッダー
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... #opt 0 // 0 = no optimization
.................... 
.................... //==============================================================================
.................... // CCS C 最適化構造: ヘッダー分散 + .cファイル統合
.................... //==============================================================================
.................... 
.................... // レベル1: システム設定
.................... #include "hal/mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
000CA:  CLRF   FF7
000CC:  ADDLW  DE
000CE:  MOVWF  FF6
000D0:  MOVLW  00
000D2:  ADDWFC FF7,F
000D4:  MOVLW  00
000D6:  MOVWF  FF8
000D8:  TBLRD*+
000DA:  MOVF   FF5,W
000DC:  RETURN 0
000DE:  DATA 00,00
000E0:  DATA AA,06
000E2:  DATA FF,0F
000E4:  DATA AA,06
000E6:  DATA 00,10
000E8:  DATA 00,00
000EA:  DATA 00,10
000EC:  DATA AA,06
000EE:  DATA FF,1F
000F0:  DATA AA,06
000F2:  DATA 00,00
000F4:  DATA 14,00
000F6:  DATA 00,20
000F8:  DATA AA,06
000FA:  DATA FF,1F
000FC:  DATA B4,06
000FE:  DATA 00,00
00100:  DATA 14,00
00102:  DATA 00,20
00104:  DATA B4,06
00106:  DATA FF,1F
00108:  DATA BE,06
0010A:  DATA 00,00
0010C:  DATA 0A,00
0010E:  DATA 00,20
00110:  DATA BE,06
00112:  DATA FF,2F
00114:  DATA FE,06
00116:  DATA 00,00
00118:  DATA 40,00
0011A:  DATA 00,30
0011C:  DATA FE,06
0011E:  DATA FF,2F
00120:  DATA 08,07
00122:  DATA 00,00
00124:  DATA 0A,00
00126:  DATA 00,30
00128:  DATA 08,07
0012A:  DATA FF,3F
0012C:  DATA 48,07
0012E:  DATA 00,00
00130:  DATA 40,00
00132:  CLRF   FF7
00134:  ADDLW  46
00136:  MOVWF  FF6
00138:  MOVLW  01
0013A:  ADDWFC FF7,F
0013C:  MOVLW  00
0013E:  MOVWF  FF8
00140:  TBLRD*+
00142:  MOVF   FF5,W
00144:  RETURN 0
00146:  DATA 00,00
00148:  DATA 00,00
0014A:  DATA FF,0F
0014C:  DATA 00,00
0014E:  DATA 00,10
00150:  DATA 00,00
00152:  DATA 00,00
00154:  DATA 01,00
00156:  DATA FF,0F
00158:  DATA 14,00
0015A:  DATA 00,00
0015C:  DATA 14,00
0015E:  DATA 00,10
00160:  DATA 28,00
00162:  DATA FF,0F
00164:  DATA 32,00
00166:  DATA 00,00
00168:  DATA 14,00
0016A:  DATA 00,10
0016C:  DATA 72,00
0016E:  DATA FF,0F
00170:  DATA 7C,00
00172:  DATA 00,00
00174:  DATA 0A,00
00176:  DATA 00,10
00178:  DATA 7C,00
0017A:  DATA FF,0F
0017C:  DATA BC,00
0017E:  DATA 00,00
00180:  DATA 40,00
00182:  DATA 00,10
00184:  DATA 72,00
00186:  DATA FF,0F
00188:  DATA 7C,00
0018A:  DATA 00,00
0018C:  DATA 0A,00
0018E:  DATA 00,10
00190:  DATA 7C,00
00192:  DATA FF,0F
00194:  DATA BC,00
00196:  DATA 00,00
00198:  DATA 40,00
*
001BA:  DATA 54,69
001BC:  DATA 6D,65
001BE:  DATA 72,20
001C0:  DATA 49,6E
001C2:  DATA 69,74
001C4:  DATA 69,61
001C6:  DATA 6C,69
001C8:  DATA 7A,65
001CA:  DATA 0D,0A
001CC:  DATA 00,00
001CE:  DATA 09,43
001D0:  DATA 6F,6D
001D2:  DATA 70,6C
001D4:  DATA 65,74
001D6:  DATA 65,0D
001D8:  DATA 0A,00
*
0024A:  DATA 55,41
0024C:  DATA 52,54
0024E:  DATA 20,49
00250:  DATA 6E,69
00252:  DATA 74,69
00254:  DATA 61,6C
00256:  DATA 69,7A
00258:  DATA 65,0D
0025A:  DATA 0A,00
0025C:  DATA 09,43
0025E:  DATA 6F,6D
00260:  DATA 70,6C
00262:  DATA 65,74
00264:  DATA 65,0D
00266:  DATA 0A,00
00268:  DATA 41,44
0026A:  DATA 37,34
0026C:  DATA 39,30
0026E:  DATA 20,49
00270:  DATA 6E,69
00272:  DATA 74,69
00274:  DATA 61,6C
00276:  DATA 69,7A
00278:  DATA 65,0D
0027A:  DATA 0A,00
0027C:  DATA 09,43
0027E:  DATA 6F,6E
00280:  DATA 6E,65
00282:  DATA 63,74
00284:  DATA 20,65
00286:  DATA 72,72
00288:  DATA 6F,72
0028A:  DATA 21,0D
0028C:  DATA 0A,00
0028E:  DATA 09,43
00290:  DATA 6F,6E
00292:  DATA 6E,65
00294:  DATA 63,74
00296:  DATA 20,73
00298:  DATA 75,63
0029A:  DATA 63,65
0029C:  DATA 73,73
0029E:  DATA 66,75
002A0:  DATA 6C,0D
002A2:  DATA 0A,00
002A4:  DATA 09,43
002A6:  DATA 6F,6D
002A8:  DATA 70,6C
002AA:  DATA 65,74
002AC:  DATA 65,0D
002AE:  DATA 0A,00
002B0:  DATA 4D,43
002B2:  DATA 50,34
002B4:  DATA 39,30
002B6:  DATA 31,20
002B8:  DATA 49,6E
002BA:  DATA 69,74
002BC:  DATA 69,61
002BE:  DATA 6C,69
002C0:  DATA 7A,65
002C2:  DATA 0D,0A
002C4:  DATA 00,00
002C6:  DATA 09,5B
002C8:  DATA 44,41
002CA:  DATA 43,20
002CC:  DATA 50,6F
002CE:  DATA 72,74
002D0:  DATA 20,31
002D2:  DATA 5D,20
002D4:  DATA 43,6F
002D6:  DATA 6E,6E
002D8:  DATA 65,63
002DA:  DATA 74,20
002DC:  DATA 65,72
002DE:  DATA 72,6F
002E0:  DATA 72,21
002E2:  DATA 0D,0A
002E4:  DATA 00,00
002E6:  DATA 09,5B
002E8:  DATA 44,41
002EA:  DATA 43,20
002EC:  DATA 50,6F
002EE:  DATA 72,74
002F0:  DATA 20,31
002F2:  DATA 5D,20
002F4:  DATA 43,6F
002F6:  DATA 6E,6E
002F8:  DATA 65,63
002FA:  DATA 74,20
002FC:  DATA 73,75
002FE:  DATA 63,63
00300:  DATA 65,73
00302:  DATA 73,66
00304:  DATA 75,6C
00306:  DATA 0D,0A
00308:  DATA 00,00
0030A:  DATA 09,5B
0030C:  DATA 44,41
0030E:  DATA 43,20
00310:  DATA 50,6F
00312:  DATA 72,74
00314:  DATA 20,32
00316:  DATA 5D,20
00318:  DATA 43,6F
0031A:  DATA 6E,6E
0031C:  DATA 65,63
0031E:  DATA 74,20
00320:  DATA 65,72
00322:  DATA 72,6F
00324:  DATA 72,21
00326:  DATA 0D,0A
00328:  DATA 00,00
0032A:  DATA 09,5B
0032C:  DATA 44,41
0032E:  DATA 43,20
00330:  DATA 50,6F
00332:  DATA 72,74
00334:  DATA 20,32
00336:  DATA 5D,20
00338:  DATA 43,6F
0033A:  DATA 6E,6E
0033C:  DATA 65,63
0033E:  DATA 74,20
00340:  DATA 73,75
00342:  DATA 63,63
00344:  DATA 65,73
00346:  DATA 73,66
00348:  DATA 75,6C
0034A:  DATA 0D,0A
0034C:  DATA 00,00
0034E:  DATA 09,43
00350:  DATA 6F,6D
00352:  DATA 70,6C
00354:  DATA 65,74
00356:  DATA 65,0D
00358:  DATA 0A,00
0035A:  DATA 45,6E
0035C:  DATA 71,75
0035E:  DATA 65,75
00360:  DATA 65,20
00362:  DATA 46,6C
00364:  DATA 61,73
00366:  DATA 68,20
00368:  DATA 4F,70
0036A:  DATA 65,72
0036C:  DATA 61,74
0036E:  DATA 69,6F
00370:  DATA 6E,0D
00372:  DATA 0A,00
00374:  DATA 46,6C
00376:  DATA 61,73
00378:  DATA 68,20
0037A:  DATA 71,75
0037C:  DATA 65,75
0037E:  DATA 65,20
00380:  DATA 69,73
00382:  DATA 20,66
00384:  DATA 75,6C
00386:  DATA 6C,21
00388:  DATA 21,21
0038A:  DATA 0D,0A
0038C:  DATA 00,00
0038E:  DATA 46,6C
00390:  DATA 61,73
00392:  DATA 68,20
00394:  DATA 71,75
00396:  DATA 65,75
00398:  DATA 65,20
0039A:  DATA 69,73
0039C:  DATA 20,65
0039E:  DATA 6D,70
003A0:  DATA 74,79
003A2:  DATA 0D,0A
003A4:  DATA 00,00
003A6:  DATA 0D,0A
003A8:  DATA 53,74
003AA:  DATA 61,72
003AC:  DATA 74,20
003AE:  DATA 6D,61
003B0:  DATA 6B,65
003B2:  DATA 5F,72
003B4:  DATA 65,63
003B6:  DATA 65,69
003B8:  DATA 76,65
003BA:  DATA 5F,63
003BC:  DATA 6F,6D
003BE:  DATA 6D,61
003C0:  DATA 6E,64
003C2:  DATA 0D,0A
003C4:  DATA 00,00
003C6:  DATA 09,5B
003C8:  DATA 42,4F
003CA:  DATA 53,53
003CC:  DATA 5D,20
003CE:  DATA 3E,3E
003D0:  DATA 3E,20
003D2:  DATA 00,00
003D4:  DATA 45,6E
003D6:  DATA 64,20
003D8:  DATA 6D,61
003DA:  DATA 6B,65
003DC:  DATA 5F,72
003DE:  DATA 65,63
003E0:  DATA 69,76
003E2:  DATA 65,5F
003E4:  DATA 63,6F
003E6:  DATA 6D,6D
003E8:  DATA 61,6E
003EA:  DATA 64,0D
003EC:  DATA 0A,0D
003EE:  DATA 0A,00
003F0:  DATA 73,69
003F2:  DATA 67,6E
003F4:  DATA 61,6C
003F6:  DATA 20,65
003F8:  DATA 6E,64
003FA:  DATA 20,77
003FC:  DATA 69,74
003FE:  DATA 68,20
00400:  DATA 53,46
00402:  DATA 44,0D
00404:  DATA 0A,00
00406:  DATA 64,6F
00408:  DATA 6E,27
0040A:  DATA 74,20
0040C:  DATA 66,69
0040E:  DATA 6E,64
00410:  DATA 20,53
00412:  DATA 46,44
00414:  DATA 0D,0A
00416:  DATA 00,00
00418:  DATA 09,2D
0041A:  DATA 3E,20
0041C:  DATA 49,6E
0041E:  DATA 76,61
00420:  DATA 6C,69
00422:  DATA 64,20
00424:  DATA 46,72
00426:  DATA 61,6D
00428:  DATA 65,20
0042A:  DATA 49,44
0042C:  DATA 20,72
0042E:  DATA 65,63
00430:  DATA 65,69
00432:  DATA 76,65
00434:  DATA 64,3A
00436:  DATA 20,25
00438:  DATA 58,0D
0043A:  DATA 0A,00
0043C:  DATA 09,2D
0043E:  DATA 3E,20
00440:  DATA 43,52
00442:  DATA 43,20
00444:  DATA 65,72
00446:  DATA 72,6F
00448:  DATA 72,21
0044A:  DATA 0D,0A
0044C:  DATA 00,00
0044E:  DATA 09,09
00450:  DATA 2D,3E
00452:  DATA 20,72
00454:  DATA 65,63
00456:  DATA 65,69
00458:  DATA 76,65
0045A:  DATA 64,20
0045C:  DATA 43,52
0045E:  DATA 43,3A
00460:  DATA 20,25
00462:  DATA 58,0D
00464:  DATA 0A,00
00466:  DATA 09,09
00468:  DATA 20,20
0046A:  DATA 20,63
0046C:  DATA 6F,6C
0046E:  DATA 6C,65
00470:  DATA 63,74
00472:  DATA 20,43
00474:  DATA 52,43
00476:  DATA 20,3A
00478:  DATA 20,25
0047A:  DATA 58,0D
0047C:  DATA 0A,00
0047E:  DATA 09,2D
00480:  DATA 3E,20
00482:  DATA 49,6E
00484:  DATA 76,61
00486:  DATA 6C,69
00488:  DATA 64,20
0048A:  DATA 64,65
0048C:  DATA 76,69
0048E:  DATA 63,65
00490:  DATA 20,49
00492:  DATA 44,20
00494:  DATA 72,65
00496:  DATA 63,65
00498:  DATA 69,76
0049A:  DATA 65,64
0049C:  DATA 0D,0A
0049E:  DATA 00,00
004A0:  DATA 09,09
004A2:  DATA 2D,3E
004A4:  DATA 20,72
004A6:  DATA 65,63
004A8:  DATA 65,69
004AA:  DATA 76,65
004AC:  DATA 64,3A
004AE:  DATA 20,20
004B0:  DATA 20,20
004B2:  DATA 20,25
004B4:  DATA 58,0D
004B6:  DATA 0A,00
004B8:  DATA 09,09
004BA:  DATA 20,20
004BC:  DATA 20,4D
004BE:  DATA 79,20
004C0:  DATA 64,65
004C2:  DATA 76,69
004C4:  DATA 63,65
004C6:  DATA 20,49
004C8:  DATA 44,3A
004CA:  DATA 20,25
004CC:  DATA 58,0D
004CE:  DATA 0A,00
004D0:  DATA 09,5B
004D2:  DATA 42,4F
004D4:  DATA 53,53
004D6:  DATA 5D,20
004D8:  DATA 3C,3C
004DA:  DATA 3C,20
004DC:  DATA 00,00
004DE:  DATA 53,74
004E0:  DATA 61,72
004E2:  DATA 74,20
004E4:  DATA 53,4D
004E6:  DATA 46,20
004E8:  DATA 75,73
004EA:  DATA 69,6E
004EC:  DATA 67,20
004EE:  DATA 72,65
004F0:  DATA 71,65
004F2:  DATA 73,74
004F4:  DATA 20,73
004F6:  DATA 65,61
004F8:  DATA 71,75
004FA:  DATA 65,6E
004FC:  DATA 63,65
004FE:  DATA 0D,0A
00500:  DATA 00,00
00502:  DATA 45,72
00504:  DATA 72,6F
00506:  DATA 72,21
00508:  DATA 20,52
0050A:  DATA 65,63
0050C:  DATA 65,69
0050E:  DATA 76,69
00510:  DATA 6E,67
00512:  DATA 20,63
00514:  DATA 6F,6D
00516:  DATA 6D,61
00518:  DATA 6E,64
0051A:  DATA 20,69
0051C:  DATA 6E,63
0051E:  DATA 6F,6E
00520:  DATA 73,69
00522:  DATA 73,74
00524:  DATA 65,6E
00526:  DATA 74,20
00528:  DATA 77,69
0052A:  DATA 74,68
0052C:  DATA 20,74
0052E:  DATA 68,65
00530:  DATA 20,64
00532:  DATA 65,73
00534:  DATA 69,67
00536:  DATA 6E,0D
00538:  DATA 0A,00
0053A:  DATA 53,4D
0053C:  DATA 46,20
0053E:  DATA 75,73
00540:  DATA 65,20
00542:  DATA 72,65
00544:  DATA 71,75
00546:  DATA 65,73
00548:  DATA 74,20
0054A:  DATA 61,6C
0054C:  DATA 6C,6F
0054E:  DATA 77,65
00550:  DATA 64,0D
00552:  DATA 0A,00
00554:  DATA 53,4D
00556:  DATA 46,20
00558:  DATA 75,73
0055A:  DATA 65,20
0055C:  DATA 72,65
0055E:  DATA 71,75
00560:  DATA 65,73
00562:  DATA 74,20
00564:  DATA 64,65
00566:  DATA 6E,79
00568:  DATA 65,64
0056A:  DATA 0D,0A
0056C:  DATA 00,00
0056E:  DATA 52,65
00570:  DATA 74,72
00572:  DATA 79,20
00574:  DATA 72,65
00576:  DATA 71,75
00578:  DATA 65,73
0057A:  DATA 74,20
0057C:  DATA 74,6F
0057E:  DATA 20,42
00580:  DATA 4F,53
00582:  DATA 53,20
00584:  DATA 50,49
00586:  DATA 43,0D
00588:  DATA 0A,00
0058A:  DATA 45,72
0058C:  DATA 72,6F
0058E:  DATA 72,21
00590:  DATA 20,52
00592:  DATA 65,63
00594:  DATA 65,69
00596:  DATA 76,69
00598:  DATA 6E,67
0059A:  DATA 20,63
0059C:  DATA 6F,6D
0059E:  DATA 6D,61
005A0:  DATA 6E,64
005A2:  DATA 20,69
005A4:  DATA 6E,63
005A6:  DATA 6F,6E
005A8:  DATA 73,69
005AA:  DATA 73,74
005AC:  DATA 65,6E
005AE:  DATA 74,20
005B0:  DATA 77,69
005B2:  DATA 74,68
005B4:  DATA 20,74
005B6:  DATA 68,65
005B8:  DATA 20,64
005BA:  DATA 65,73
005BC:  DATA 69,67
005BE:  DATA 6E,0D
005C0:  DATA 0A,00
005C2:  DATA 45,6E
005C4:  DATA 64,20
005C6:  DATA 53,4D
005C8:  DATA 46,20
005CA:  DATA 75,73
005CC:  DATA 69,6E
005CE:  DATA 67,20
005D0:  DATA 72,65
005D2:  DATA 71,65
005D4:  DATA 73,74
005D6:  DATA 20,73
005D8:  DATA 65,61
005DA:  DATA 71,75
005DC:  DATA 65,6E
005DE:  DATA 63,65
005E0:  DATA 0D,0A
005E2:  DATA 00,00
005E4:  DATA 56,6F
005E6:  DATA 6C,74
005E8:  DATA 31,2C
005EA:  DATA 43,75
005EC:  DATA 72,72
005EE:  DATA 31,2C
005F0:  DATA 56,6F
005F2:  DATA 6C,74
005F4:  DATA 32,2C
005F6:  DATA 43,75
005F8:  DATA 72,72
005FA:  DATA 32,0D
005FC:  DATA 0A,00
005FE:  DATA 5B,50
00600:  DATA 49,43
00602:  DATA 4C,4F
00604:  DATA 47,5D
00606:  DATA 20,3A
00608:  DATA 20,00
0060A:  DATA 53,4D
0060C:  DATA 46,20
0060E:  DATA 44,61
00610:  DATA 74,61
00612:  DATA 20,54
00614:  DATA 61,62
00616:  DATA 6C,65
00618:  DATA 20,49
0061A:  DATA 6E,69
0061C:  DATA 74,69
0061E:  DATA 61,6C
00620:  DATA 69,7A
00622:  DATA 65,0D
00624:  DATA 0A,00
00626:  DATA 43,52
00628:  DATA 43,20
0062A:  DATA 76,65
0062C:  DATA 72,69
0062E:  DATA 66,69
00630:  DATA 63,61
00632:  DATA 74,69
00634:  DATA 6F,6E
00636:  DATA 20,70
00638:  DATA 61,73
0063A:  DATA 73,65
0063C:  DATA 64,20
0063E:  DATA 6F,6E
00640:  DATA 20,61
00642:  DATA 74,74
00644:  DATA 65,6D
00646:  DATA 70,74
00648:  DATA 20,25
0064A:  DATA 64,0D
0064C:  DATA 0A,00
0064E:  DATA 43,52
00650:  DATA 43,20
00652:  DATA 76,65
00654:  DATA 72,69
00656:  DATA 66,69
00658:  DATA 63,61
0065A:  DATA 74,69
0065C:  DATA 6F,6E
0065E:  DATA 20,66
00660:  DATA 61,69
00662:  DATA 6C,65
00664:  DATA 64,20
00666:  DATA 61,66
00668:  DATA 74,65
0066A:  DATA 72,20
0066C:  DATA 25,64
0066E:  DATA 20,61
00670:  DATA 74,74
00672:  DATA 65,6D
00674:  DATA 70,74
00676:  DATA 73,0D
00678:  DATA 0A,00
0067A:  DATA 43,52
0067C:  DATA 43,20
0067E:  DATA 76,65
00680:  DATA 72,69
00682:  DATA 66,69
00684:  DATA 63,61
00686:  DATA 74,69
00688:  DATA 6F,6E
0068A:  DATA 20,70
0068C:  DATA 61,73
0068E:  DATA 73,65
00690:  DATA 64,20
00692:  DATA 6F,6E
00694:  DATA 20,61
00696:  DATA 74,74
00698:  DATA 65,6D
0069A:  DATA 70,74
0069C:  DATA 20,25
0069E:  DATA 64,0D
006A0:  DATA 0A,00
006A2:  DATA 45,72
006A4:  DATA 72,6F
006A6:  DATA 72,3A
006A8:  DATA 20,43
006AA:  DATA 52,43
006AC:  DATA 20,76
006AE:  DATA 65,72
006B0:  DATA 69,66
006B2:  DATA 69,63
006B4:  DATA 61,74
006B6:  DATA 69,6F
006B8:  DATA 6E,20
006BA:  DATA 66,61
006BC:  DATA 69,6C
006BE:  DATA 65,64
006C0:  DATA 20,61
006C2:  DATA 66,74
006C4:  DATA 65,72
006C6:  DATA 20,25
006C8:  DATA 64,20
006CA:  DATA 61,74
006CC:  DATA 74,65
006CE:  DATA 6D,70
006D0:  DATA 74,73
006D2:  DATA 0D,0A
006D4:  DATA 00,00
006D6:  DATA 0D,0A
006D8:  DATA 5B,53
006DA:  DATA 4D,46
006DC:  DATA 20,43
006DE:  DATA 6F,75
006E0:  DATA 6E,74
006E2:  DATA 65,72
006E4:  DATA 20,53
006E6:  DATA 74,61
006E8:  DATA 74,75
006EA:  DATA 73,5D
006EC:  DATA 0D,0A
006EE:  DATA 00,00
006F0:  DATA 50,49
006F2:  DATA 43,4C
006F4:  DATA 4F,47
006F6:  DATA 20,20
006F8:  DATA 20,20
006FA:  DATA 20,3A
006FC:  DATA 20,55
006FE:  DATA 73,65
00700:  DATA 64,3D
00702:  DATA 25,6C
00704:  DATA 75,2C
00706:  DATA 20,55
00708:  DATA 6E,63
0070A:  DATA 6F,70
0070C:  DATA 69,65
0070E:  DATA 64,3D
00710:  DATA 25,75
00712:  DATA 0D,0A
00714:  DATA 00,00
00716:  DATA 45,4E
00718:  DATA 56,49
0071A:  DATA 52,4F
0071C:  DATA 20,20
0071E:  DATA 20,20
00720:  DATA 20,3A
00722:  DATA 20,55
00724:  DATA 73,65
00726:  DATA 64,3D
00728:  DATA 25,6C
0072A:  DATA 75,2C
0072C:  DATA 20,55
0072E:  DATA 6E,63
00730:  DATA 6F,70
00732:  DATA 69,65
00734:  DATA 64,3D
00736:  DATA 25,75
00738:  DATA 0D,0A
0073A:  DATA 00,00
0073C:  DATA 49,56
0073E:  DATA 31,5F
00740:  DATA 48,45
00742:  DATA 41,44
00744:  DATA 45,52
00746:  DATA 20,3A
00748:  DATA 20,55
0074A:  DATA 73,65
0074C:  DATA 64,3D
0074E:  DATA 25,6C
00750:  DATA 75,2C
00752:  DATA 20,55
00754:  DATA 6E,63
00756:  DATA 6F,70
00758:  DATA 69,65
0075A:  DATA 64,3D
0075C:  DATA 25,75
0075E:  DATA 0D,0A
00760:  DATA 00,00
00762:  DATA 49,56
00764:  DATA 31,5F
00766:  DATA 44,41
00768:  DATA 54,41
0076A:  DATA 20,20
0076C:  DATA 20,3A
0076E:  DATA 20,55
00770:  DATA 73,65
00772:  DATA 64,3D
00774:  DATA 25,6C
00776:  DATA 75,2C
00778:  DATA 20,55
0077A:  DATA 6E,63
0077C:  DATA 6F,70
0077E:  DATA 69,65
00780:  DATA 64,3D
00782:  DATA 25,75
00784:  DATA 0D,0A
00786:  DATA 00,00
00788:  DATA 49,56
0078A:  DATA 32,5F
0078C:  DATA 48,45
0078E:  DATA 41,44
00790:  DATA 45,52
00792:  DATA 20,3A
00794:  DATA 20,55
00796:  DATA 73,65
00798:  DATA 64,3D
0079A:  DATA 25,6C
0079C:  DATA 75,2C
0079E:  DATA 20,55
007A0:  DATA 6E,63
007A2:  DATA 6F,70
007A4:  DATA 69,65
007A6:  DATA 64,3D
007A8:  DATA 25,75
007AA:  DATA 0D,0A
007AC:  DATA 00,00
007AE:  DATA 49,56
007B0:  DATA 32,5F
007B2:  DATA 44,41
007B4:  DATA 54,41
007B6:  DATA 20,20
007B8:  DATA 20,3A
007BA:  DATA 20,55
007BC:  DATA 73,65
007BE:  DATA 64,3D
007C0:  DATA 25,6C
007C2:  DATA 75,2C
007C4:  DATA 20,55
007C6:  DATA 6E,63
007C8:  DATA 6F,70
007CA:  DATA 69,65
007CC:  DATA 64,3D
007CE:  DATA 25,75
007D0:  DATA 0D,0A
007D2:  DATA 00,00
007D4:  DATA 2D,2D
007D6:  DATA 2D,2D
007D8:  DATA 2D,2D
007DA:  DATA 2D,2D
007DC:  DATA 2D,2D
007DE:  DATA 2D,2D
007E0:  DATA 2D,2D
007E2:  DATA 2D,2D
007E4:  DATA 2D,2D
007E6:  DATA 2D,2D
007E8:  DATA 2D,2D
007EA:  DATA 2D,2D
007EC:  DATA 2D,2D
007EE:  DATA 2D,2D
007F0:  DATA 2D,2D
007F2:  DATA 0D,0A
007F4:  DATA 0D,0A
007F6:  DATA 00,00
007F8:  DATA 0D,0A
007FA:  DATA 5F,5F
007FC:  DATA 5F,5F
007FE:  DATA 5F,5F
00800:  DATA 5F,5F
00802:  DATA 5F,5F
00804:  DATA 5F,5F
00806:  DATA 5F,5F
00808:  DATA 5F,5F
0080A:  DATA 5F,5F
0080C:  DATA 5F,5F
0080E:  DATA 5F,5F
00810:  DATA 5F,5F
00812:  DATA 5F,5F
00814:  DATA 5F,5F
00816:  DATA 5F,5F
00818:  DATA 5F,0D
0081A:  DATA 0A,00
0081C:  DATA 5F,5F
0081E:  DATA 5F,5F
00820:  DATA 5F,5F
00822:  DATA 5F,5F
00824:  DATA 5F,53
00826:  DATA 74,61
00828:  DATA 72,74
0082A:  DATA 20,63
0082C:  DATA 6F,70
0082E:  DATA 79,5F
00830:  DATA 64,61
00832:  DATA 74,61
00834:  DATA 5F,5F
00836:  DATA 5F,5F
00838:  DATA 5F,5F
0083A:  DATA 5F,5F
0083C:  DATA 5F,0D
0083E:  DATA 0A,00
00840:  DATA 45,72
00842:  DATA 72,6F
00844:  DATA 72,3A
00846:  DATA 20,4D
00848:  DATA 49,53
0084A:  DATA 20,46
0084C:  DATA 4D,20
0084E:  DATA 69,73
00850:  DATA 20,6E
00852:  DATA 6F,74
00854:  DATA 20,63
00856:  DATA 6F,6E
00858:  DATA 6E,65
0085A:  DATA 63,74
0085C:  DATA 65,64
0085E:  DATA 0D,0A
00860:  DATA 00,00
00862:  DATA 45,72
00864:  DATA 72,6F
00866:  DATA 72,3A
00868:  DATA 20,53
0086A:  DATA 4D,46
0086C:  DATA 20,69
0086E:  DATA 73,20
00870:  DATA 6E,6F
00872:  DATA 74,20
00874:  DATA 63,6F
00876:  DATA 6E,6E
00878:  DATA 65,63
0087A:  DATA 74,65
0087C:  DATA 64,0D
0087E:  DATA 0A,00
00880:  DATA 5B,53
00882:  DATA 4D,46
00884:  DATA 20,41
00886:  DATA 44,44
00888:  DATA 52,45
0088A:  DATA 53,53
0088C:  DATA 5D,0D
0088E:  DATA 0A,00
00890:  DATA 09,2D
00892:  DATA 2D,2D
00894:  DATA 2D,2D
00896:  DATA 2D,2D
00898:  DATA 2D,2D
0089A:  DATA 2D,2D
0089C:  DATA 2D,09
0089E:  DATA 2D,2D
008A0:  DATA 2D,2D
008A2:  DATA 2D,2D
008A4:  DATA 2D,2D
008A6:  DATA 2D,2D
008A8:  DATA 2D,2D
008AA:  DATA 2D,09
008AC:  DATA 2D,2D
008AE:  DATA 2D,2D
008B0:  DATA 2D,2D
008B2:  DATA 2D,2D
008B4:  DATA 2D,2D
008B6:  DATA 2D,2D
008B8:  DATA 2D,0D
008BA:  DATA 0A,00
008BC:  DATA 09,53
008BE:  DATA 54,41
008C0:  DATA 52,54
008C2:  DATA 09,30
008C4:  DATA 78,25
008C6:  DATA 30,38
008C8:  DATA 4C,58
008CA:  DATA 0D,0A
008CC:  DATA 00,00
008CE:  DATA 09,45
008D0:  DATA 4E,44
008D2:  DATA 09,30
008D4:  DATA 78,25
008D6:  DATA 30,38
008D8:  DATA 4C,58
008DA:  DATA 0D,0A
008DC:  DATA 00,00
008DE:  DATA 09,55
008E0:  DATA 53,45
008E2:  DATA 44,09
008E4:  DATA 30,78
008E6:  DATA 25,30
008E8:  DATA 38,4C
008EA:  DATA 58,0D
008EC:  DATA 0A,00
008EE:  DATA 09,4E
008F0:  DATA 45,58
008F2:  DATA 54,09
008F4:  DATA 30,78
008F6:  DATA 25,30
008F8:  DATA 38,4C
008FA:  DATA 58,0D
008FC:  DATA 0A,00
008FE:  DATA 5B,4D
00900:  DATA 49,53
00902:  DATA 46,20
00904:  DATA 41,44
00906:  DATA 44,52
00908:  DATA 45,53
0090A:  DATA 53,5D
0090C:  DATA 0D,0A
0090E:  DATA 00,00
00910:  DATA 09,2D
00912:  DATA 2D,2D
00914:  DATA 2D,2D
00916:  DATA 2D,2D
00918:  DATA 2D,2D
0091A:  DATA 2D,2D
0091C:  DATA 2D,09
0091E:  DATA 2D,2D
00920:  DATA 2D,2D
00922:  DATA 2D,2D
00924:  DATA 2D,2D
00926:  DATA 2D,2D
00928:  DATA 2D,2D
0092A:  DATA 2D,09
0092C:  DATA 2D,2D
0092E:  DATA 2D,2D
00930:  DATA 2D,2D
00932:  DATA 2D,2D
00934:  DATA 2D,2D
00936:  DATA 2D,2D
00938:  DATA 2D,0D
0093A:  DATA 0A,00
0093C:  DATA 09,53
0093E:  DATA 54,41
00940:  DATA 52,54
00942:  DATA 09,30
00944:  DATA 78,25
00946:  DATA 30,38
00948:  DATA 4C,58
0094A:  DATA 0D,0A
0094C:  DATA 00,00
0094E:  DATA 09,45
00950:  DATA 4E,44
00952:  DATA 09,30
00954:  DATA 78,25
00956:  DATA 30,38
00958:  DATA 4C,58
0095A:  DATA 0D,0A
0095C:  DATA 00,00
0095E:  DATA 09,53
00960:  DATA 52,43
00962:  DATA 09,30
00964:  DATA 78,25
00966:  DATA 30,38
00968:  DATA 4C,58
0096A:  DATA 0D,0A
0096C:  DATA 00,00
0096E:  DATA 09,53
00970:  DATA 49,5A
00972:  DATA 45,09
00974:  DATA 30,78
00976:  DATA 25,30
00978:  DATA 38,4C
0097A:  DATA 58,0D
0097C:  DATA 0A,00
0097E:  DATA 09,2D
00980:  DATA 2D,2D
00982:  DATA 2D,2D
00984:  DATA 2D,2D
00986:  DATA 2D,2D
00988:  DATA 2D,2D
0098A:  DATA 2D,09
0098C:  DATA 2D,2D
0098E:  DATA 2D,2D
00990:  DATA 2D,2D
00992:  DATA 2D,2D
00994:  DATA 2D,2D
00996:  DATA 2D,2D
00998:  DATA 2D,09
0099A:  DATA 2D,2D
0099C:  DATA 2D,2D
0099E:  DATA 2D,2D
009A0:  DATA 2D,2D
009A2:  DATA 2D,2D
009A4:  DATA 2D,2D
009A6:  DATA 2D,0D
009A8:  DATA 0A,00
009AA:  DATA 52,65
009AC:  DATA 6D,61
009AE:  DATA 69,6E
009B0:  DATA 69,6E
009B2:  DATA 67,20
009B4:  DATA 73,69
009B6:  DATA 7A,65
009B8:  DATA 20,74
009BA:  DATA 6F,20
009BC:  DATA 77,72
009BE:  DATA 69,74
009C0:  DATA 65,3A
009C2:  DATA 20,25
009C4:  DATA 6C,75
009C6:  DATA 20,62
009C8:  DATA 79,74
009CA:  DATA 65,73
009CC:  DATA 0D,0A
009CE:  DATA 00,00
009D0:  DATA 4D,49
009D2:  DATA 53,46
009D4:  DATA 20,44
009D6:  DATA 41,54
009D8:  DATA 41,0D
009DA:  DATA 0A,00
009DC:  DATA 0D,0A
009DE:  DATA 5F,5F
009E0:  DATA 5F,5F
009E2:  DATA 5F,5F
009E4:  DATA 5F,5F
009E6:  DATA 5F,45
009E8:  DATA 6E,64
009EA:  DATA 20,63
009EC:  DATA 6F,70
009EE:  DATA 79,5F
009F0:  DATA 64,61
009F2:  DATA 74,61
009F4:  DATA 5F,5F
009F6:  DATA 5F,5F
009F8:  DATA 5F,5F
009FA:  DATA 5F,5F
009FC:  DATA 5F,5F
009FE:  DATA 0D,0A
00A00:  DATA 00,00
00A02:  DATA 5F,5F
00A04:  DATA 5F,5F
00A06:  DATA 5F,5F
00A08:  DATA 5F,5F
00A0A:  DATA 5F,5F
00A0C:  DATA 5F,5F
00A0E:  DATA 5F,5F
00A10:  DATA 5F,5F
00A12:  DATA 5F,5F
00A14:  DATA 5F,5F
00A16:  DATA 5F,5F
00A18:  DATA 5F,5F
00A1A:  DATA 5F,5F
00A1C:  DATA 5F,5F
00A1E:  DATA 5F,5F
00A20:  DATA 5F,0D
00A22:  DATA 0A,0D
00A24:  DATA 0A,00
00A26:  DATA 0D,0A
00A28:  DATA 5F,5F
00A2A:  DATA 5F,5F
00A2C:  DATA 5F,5F
00A2E:  DATA 5F,5F
00A30:  DATA 5F,5F
00A32:  DATA 5F,5F
00A34:  DATA 5F,5F
00A36:  DATA 5F,5F
00A38:  DATA 5F,5F
00A3A:  DATA 5F,5F
00A3C:  DATA 0D,0A
00A3E:  DATA 00,00
00A40:  DATA 5F,5F
00A42:  DATA 5F,53
00A44:  DATA 74,61
00A46:  DATA 72,74
00A48:  DATA 20,53
00A4A:  DATA 4D,46
00A4C:  DATA 20,52
00A4E:  DATA 65,61
00A50:  DATA 64,5F
00A52:  DATA 5F,5F
00A54:  DATA 5F,0D
00A56:  DATA 0A,00
00A58:  DATA 45,72
00A5A:  DATA 72,6F
00A5C:  DATA 72,3A
00A5E:  DATA 20,52
00A60:  DATA 65,61
00A62:  DATA 64,20
00A64:  DATA 61,64
00A66:  DATA 64,72
00A68:  DATA 65,73
00A6A:  DATA 73,20
00A6C:  DATA 30,78
00A6E:  DATA 25,30
00A70:  DATA 38,4C
00A72:  DATA 58,20
00A74:  DATA 6F,75
00A76:  DATA 74,20
00A78:  DATA 6F,66
00A7A:  DATA 20,53
00A7C:  DATA 4D,46
00A7E:  DATA 20,6D
00A80:  DATA 69,73
00A82:  DATA 73,69
00A84:  DATA 6F,6E
00A86:  DATA 20,72
00A88:  DATA 61,6E
00A8A:  DATA 67,65
00A8C:  DATA 20,5B
00A8E:  DATA 30,78
00A90:  DATA 25,30
00A92:  DATA 38,4C
00A94:  DATA 58,20
00A96:  DATA 2D,20
00A98:  DATA 30,78
00A9A:  DATA 25,30
00A9C:  DATA 38,4C
00A9E:  DATA 58,29
00AA0:  DATA 0D,0A
00AA2:  DATA 00,00
00AA4:  DATA 57,61
00AA6:  DATA 72,6E
00AA8:  DATA 3A,20
00AAA:  DATA 41,64
00AAC:  DATA 6A,75
00AAE:  DATA 73,74
00AB0:  DATA 20,72
00AB2:  DATA 65,61
00AB4:  DATA 64,20
00AB6:  DATA 73,69
00AB8:  DATA 7A,65
00ABA:  DATA 20,66
00ABC:  DATA 72,6F
00ABE:  DATA 6D,20
00AC0:  DATA 25,6C
00AC2:  DATA 75,20
00AC4:  DATA 74,6F
00AC6:  DATA 20,25
00AC8:  DATA 6C,75
00ACA:  DATA 20,28
00ACC:  DATA 6D,69
00ACE:  DATA 73,73
00AD0:  DATA 69,6F
00AD2:  DATA 6E,20
00AD4:  DATA 65,6E
00AD6:  DATA 64,29
00AD8:  DATA 0D,0A
00ADA:  DATA 00,00
00ADC:  DATA 49,6E
00ADE:  DATA 66,6F
00AE0:  DATA 3A,20
00AE2:  DATA 4E,6F
00AE4:  DATA 74,68
00AE6:  DATA 69,6E
00AE8:  DATA 67,20
00AEA:  DATA 74,6F
00AEC:  DATA 20,72
00AEE:  DATA 65,61
00AF0:  DATA 64,20
00AF2:  DATA 28,73
00AF4:  DATA 69,7A
00AF6:  DATA 65,3D
00AF8:  DATA 30,29
00AFA:  DATA 0D,0A
00AFC:  DATA 00,00
00AFE:  DATA 49,6E
00B00:  DATA 20,53
00B02:  DATA 4D,46
00B04:  DATA 20,52
00B06:  DATA 65,61
00B08:  DATA 64,20
00B0A:  DATA 73,6F
00B0C:  DATA 75,72
00B0E:  DATA 63,65
00B10:  DATA 20,64
00B12:  DATA 61,74
00B14:  DATA 61,20
00B16:  DATA 61,64
00B18:  DATA 64,72
00B1A:  DATA 65,73
00B1C:  DATA 73,3A
00B1E:  DATA 20,25
00B20:  DATA 4C,58
00B22:  DATA 0D,0A
00B24:  DATA 00,00
00B26:  DATA 49,6E
00B28:  DATA 20,53
00B2A:  DATA 4D,46
00B2C:  DATA 20,52
00B2E:  DATA 65,61
00B30:  DATA 64,20
00B32:  DATA 64,61
00B34:  DATA 74,61
00B36:  DATA 20,73
00B38:  DATA 69,7A
00B3A:  DATA 65,20
00B3C:  DATA 20,20
00B3E:  DATA 20,20
00B40:  DATA 20,20
00B42:  DATA 20,20
00B44:  DATA 20,3A
00B46:  DATA 20,25
00B48:  DATA 6C,75
00B4A:  DATA 20,28
00B4C:  DATA 30,78
00B4E:  DATA 25,6C
00B50:  DATA 78,29
00B52:  DATA 0D,0A
00B54:  DATA 0D,0A
00B56:  DATA 00,00
00B58:  DATA 45,72
00B5A:  DATA 72,6F
00B5C:  DATA 72,3A
00B5E:  DATA 20,53
00B60:  DATA 4D,46
00B62:  DATA 20,69
00B64:  DATA 73,20
00B66:  DATA 6E,6F
00B68:  DATA 74,20
00B6A:  DATA 63,6F
00B6C:  DATA 6E,6E
00B6E:  DATA 65,63
00B70:  DATA 74,65
00B72:  DATA 64,0D
00B74:  DATA 0A,00
00B76:  DATA 52,45
00B78:  DATA 41,44
00B7A:  DATA 20,44
00B7C:  DATA 41,54
00B7E:  DATA 41,20
00B80:  DATA 46,52
00B82:  DATA 4F,4D
00B84:  DATA 20,53
00B86:  DATA 4D,46
00B88:  DATA 2E,2E
00B8A:  DATA 2E,0D
00B8C:  DATA 0A,00
00B8E:  DATA 0D,0A
00B90:  DATA 5F,5F
00B92:  DATA 5F,45
00B94:  DATA 6E,64
00B96:  DATA 20,53
00B98:  DATA 4D,46
00B9A:  DATA 20,52
00B9C:  DATA 65,61
00B9E:  DATA 64,5F
00BA0:  DATA 5F,5F
00BA2:  DATA 5F,0D
00BA4:  DATA 0A,00
00BA6:  DATA 5F,5F
00BA8:  DATA 5F,5F
00BAA:  DATA 5F,5F
00BAC:  DATA 5F,5F
00BAE:  DATA 5F,5F
00BB0:  DATA 5F,5F
00BB2:  DATA 5F,5F
00BB4:  DATA 5F,5F
00BB6:  DATA 5F,5F
00BB8:  DATA 5F,5F
00BBA:  DATA 0D,0A
00BBC:  DATA 0D,0A
00BBE:  DATA 00,00
00BC0:  DATA 0D,0A
00BC2:  DATA 5F,5F
00BC4:  DATA 5F,5F
00BC6:  DATA 5F,5F
00BC8:  DATA 5F,5F
00BCA:  DATA 5F,5F
00BCC:  DATA 5F,5F
00BCE:  DATA 5F,5F
00BD0:  DATA 5F,5F
00BD2:  DATA 5F,5F
00BD4:  DATA 5F,5F
00BD6:  DATA 0D,0A
00BD8:  DATA 00,00
00BDA:  DATA 5F,5F
00BDC:  DATA 5F,53
00BDE:  DATA 74,61
00BE0:  DATA 72,74
00BE2:  DATA 20,73
00BE4:  DATA 6D,66
00BE6:  DATA 5F,65
00BE8:  DATA 72,61
00BEA:  DATA 73,65
00BEC:  DATA 5F,5F
00BEE:  DATA 5F,5F
00BF0:  DATA 0D,0A
00BF2:  DATA 00,00
00BF4:  DATA 5B,53
00BF6:  DATA 4D,46
00BF8:  DATA 5D,20
00BFA:  DATA 45,72
00BFC:  DATA 61,73
00BFE:  DATA 65,20
00C00:  DATA 61,64
00C02:  DATA 64,72
00C04:  DATA 65,73
00C06:  DATA 73,20
00C08:  DATA 20,20
00C0A:  DATA 3A,20
00C0C:  DATA 25,4C
00C0E:  DATA 58,0D
00C10:  DATA 0A,00
00C12:  DATA 5B,53
00C14:  DATA 4D,46
00C16:  DATA 5D,20
00C18:  DATA 45,72
00C1A:  DATA 61,73
00C1C:  DATA 65,20
00C1E:  DATA 64,61
00C20:  DATA 74,61
00C22:  DATA 20,73
00C24:  DATA 69,7A
00C26:  DATA 65,20
00C28:  DATA 3A,20
00C2A:  DATA 25,6C
00C2C:  DATA 75,20
00C2E:  DATA 28,30
00C30:  DATA 78,25
00C32:  DATA 6C,78
00C34:  DATA 29,0D
00C36:  DATA 0A,0D
00C38:  DATA 0A,00
00C3A:  DATA 45,72
00C3C:  DATA 72,6F
00C3E:  DATA 72,3A
00C40:  DATA 20,53
00C42:  DATA 4D,46
00C44:  DATA 20,69
00C46:  DATA 73,20
00C48:  DATA 6E,6F
00C4A:  DATA 74,20
00C4C:  DATA 63,6F
00C4E:  DATA 6E,6E
00C50:  DATA 65,63
00C52:  DATA 74,65
00C54:  DATA 64,0D
00C56:  DATA 0A,00
00C58:  DATA 45,72
00C5A:  DATA 72,6F
00C5C:  DATA 72,3A
00C5E:  DATA 20,45
00C60:  DATA 72,61
00C62:  DATA 73,65
00C64:  DATA 20,73
00C66:  DATA 6F,75
00C68:  DATA 72,63
00C6A:  DATA 65,20
00C6C:  DATA 61,64
00C6E:  DATA 64,72
00C70:  DATA 65,73
00C72:  DATA 73,20
00C74:  DATA 30,78
00C76:  DATA 25,4C
00C78:  DATA 58,20
00C7A:  DATA 69,73
00C7C:  DATA 20,6F
00C7E:  DATA 75,74
00C80:  DATA 73,69
00C82:  DATA 64,65
00C84:  DATA 20,6D
00C86:  DATA 69,73
00C88:  DATA 73,69
00C8A:  DATA 6F,6E
00C8C:  DATA 20,72
00C8E:  DATA 61,6E
00C90:  DATA 67,65
00C92:  DATA 20,5B
00C94:  DATA 30,78
00C96:  DATA 25,4C
00C98:  DATA 58,20
00C9A:  DATA 2D,20
00C9C:  DATA 30,78
00C9E:  DATA 25,4C
00CA0:  DATA 58,5D
00CA2:  DATA 0D,0A
00CA4:  DATA 00,00
00CA6:  DATA 45,72
00CA8:  DATA 72,6F
00CAA:  DATA 72,3A
00CAC:  DATA 20,45
00CAE:  DATA 72,61
00CB0:  DATA 73,65
00CB2:  DATA 20,6F
00CB4:  DATA 70,65
00CB6:  DATA 72,61
00CB8:  DATA 74,69
00CBA:  DATA 6F,6E
00CBC:  DATA 20,77
00CBE:  DATA 6F,75
00CC0:  DATA 6C,64
00CC2:  DATA 20,65
00CC4:  DATA 78,63
00CC6:  DATA 65,65
00CC8:  DATA 64,20
00CCA:  DATA 6D,69
00CCC:  DATA 73,73
00CCE:  DATA 69,6F
00CD0:  DATA 6E,20
00CD2:  DATA 65,6E
00CD4:  DATA 64,20
00CD6:  DATA 61,64
00CD8:  DATA 64,72
00CDA:  DATA 65,73
00CDC:  DATA 73,20
00CDE:  DATA 30,78
00CE0:  DATA 25,4C
00CE2:  DATA 58,0D
00CE4:  DATA 0A,00
00CE6:  DATA 4C,69
00CE8:  DATA 6D,69
00CEA:  DATA 74,69
00CEC:  DATA 6E,67
00CEE:  DATA 20,65
00CF0:  DATA 72,61
00CF2:  DATA 73,65
00CF4:  DATA 20,73
00CF6:  DATA 69,7A
00CF8:  DATA 65,20
00CFA:  DATA 74,6F
00CFC:  DATA 20,73
00CFE:  DATA 74,61
00D00:  DATA 79,20
00D02:  DATA 77,69
00D04:  DATA 74,68
00D06:  DATA 69,6E
00D08:  DATA 20,6D
00D0A:  DATA 69,73
00D0C:  DATA 73,69
00D0E:  DATA 6F,6E
00D10:  DATA 20,62
00D12:  DATA 6F,75
00D14:  DATA 6E,64
00D16:  DATA 73,0D
00D18:  DATA 0A,00
00D1A:  DATA 45,72
00D1C:  DATA 61,73
00D1E:  DATA 65,20
00D20:  DATA 6F,70
00D22:  DATA 65,72
00D24:  DATA 61,74
00D26:  DATA 69,6F
00D28:  DATA 6E,20
00D2A:  DATA 76,61
00D2C:  DATA 6C,69
00D2E:  DATA 64,61
00D30:  DATA 74,65
00D32:  DATA 64,20
00D34:  DATA 77,69
00D36:  DATA 74,68
00D38:  DATA 69,6E
00D3A:  DATA 20,6D
00D3C:  DATA 69,73
00D3E:  DATA 73,69
00D40:  DATA 6F,6E
00D42:  DATA 20,72
00D44:  DATA 61,6E
00D46:  DATA 67,65
00D48:  DATA 0D,0A
00D4A:  DATA 00,00
00D4C:  DATA 45,72
00D4E:  DATA 61,73
00D50:  DATA 65,64
00D52:  DATA 20,25
00D54:  DATA 6C,75
00D56:  DATA 20,62
00D58:  DATA 79,74
00D5A:  DATA 65,73
00D5C:  DATA 20,28
00D5E:  DATA 61,6C
00D60:  DATA 69,67
00D62:  DATA 6E,65
00D64:  DATA 64,29
00D66:  DATA 0D,0A
00D68:  DATA 00,00
00D6A:  DATA 0D,0A
00D6C:  DATA 5F,5F
00D6E:  DATA 5F,45
00D70:  DATA 6E,64
00D72:  DATA 20,73
00D74:  DATA 6D,66
00D76:  DATA 5F,65
00D78:  DATA 72,61
00D7A:  DATA 73,65
00D7C:  DATA 5F,5F
00D7E:  DATA 5F,5F
00D80:  DATA 0D,0A
00D82:  DATA 00,00
00D84:  DATA 5F,5F
00D86:  DATA 5F,5F
00D88:  DATA 5F,5F
00D8A:  DATA 5F,5F
00D8C:  DATA 5F,5F
00D8E:  DATA 5F,5F
00D90:  DATA 5F,5F
00D92:  DATA 5F,5F
00D94:  DATA 5F,5F
00D96:  DATA 5F,5F
00D98:  DATA 0D,0A
00D9A:  DATA 0D,0A
00D9C:  DATA 00,00
00D9E:  DATA 45,72
00DA0:  DATA 72,6F
00DA2:  DATA 72,3A
00DA4:  DATA 20,55
00DA6:  DATA 6E,6B
00DA8:  DATA 6E,6F
00DAA:  DATA 77,6E
00DAC:  DATA 20,6D
00DAE:  DATA 69,73
00DB0:  DATA 73,69
00DB2:  DATA 6F,6E
00DB4:  DATA 5F,69
00DB6:  DATA 64,3A
00DB8:  DATA 20,25
00DBA:  DATA 30,32
00DBC:  DATA 58,0D
00DBE:  DATA 0A,00
00DC0:  DATA 55,70
00DC2:  DATA 64,61
00DC4:  DATA 74,65
00DC6:  DATA 64,20
00DC8:  DATA 70,61
00DCA:  DATA 72,74
00DCC:  DATA 69,74
00DCE:  DATA 69,6F
00DD0:  DATA 6E,20
00DD2:  DATA 66,6F
00DD4:  DATA 72,20
00DD6:  DATA 6D,69
00DD8:  DATA 73,73
00DDA:  DATA 69,6F
00DDC:  DATA 6E,5F
00DDE:  DATA 69,64
00DE0:  DATA 20,25
00DE2:  DATA 30,32
00DE4:  DATA 58,3A
00DE6:  DATA 20,75
00DE8:  DATA 73,65
00DEA:  DATA 64,5F
00DEC:  DATA 73,69
00DEE:  DATA 7A,65
00DF0:  DATA 3D,25
00DF2:  DATA 6C,64
00DF4:  DATA 2C,20
00DF6:  DATA 6C,6F
00DF8:  DATA 6F,70
00DFA:  DATA 5F,63
00DFC:  DATA 6F,75
00DFE:  DATA 6E,74
00E00:  DATA 65,72
00E02:  DATA 3D,25
00E04:  DATA 6C,64
00E06:  DATA 0D,0A
00E08:  DATA 00,00
00E0A:  DATA 5B,4D
00E0C:  DATA 49,53
00E0E:  DATA 46,5D
00E10:  DATA 20,6D
00E12:  DATA 69,73
00E14:  DATA 73,69
00E16:  DATA 6F,6E
00E18:  DATA 20,25
00E1A:  DATA 75,20
00E1C:  DATA 75,6E
00E1E:  DATA 63,6F
00E20:  DATA 70,69
00E22:  DATA 65,64
00E24:  DATA 5F,63
00E26:  DATA 6F,75
00E28:  DATA 6E,74
00E2A:  DATA 65,72
00E2C:  DATA 20,25
00E2E:  DATA 30,38
00E30:  DATA 4C,58
00E32:  DATA 20,2D
00E34:  DATA 3E,20
00E36:  DATA 25,30
00E38:  DATA 38,4C
00E3A:  DATA 58,20
00E3C:  DATA 28,2D
00E3E:  DATA 25,6C
00E40:  DATA 75,29
00E42:  DATA 0D,0A
00E44:  DATA 00,00
00E46:  DATA 5B,4D
00E48:  DATA 49,53
00E4A:  DATA 46,5D
00E4C:  DATA 20,75
00E4E:  DATA 70,64
00E50:  DATA 61,74
00E52:  DATA 65,5F
00E54:  DATA 6D,69
00E56:  DATA 73,66
00E58:  DATA 5F,63
00E5A:  DATA 6F,75
00E5C:  DATA 6E,74
00E5E:  DATA 65,72
00E60:  DATA 73,3A
00E62:  DATA 20,6D
00E64:  DATA 69,73
00E66:  DATA 73,69
00E68:  DATA 6F,6E
00E6A:  DATA 20,25
00E6C:  DATA 75,20
00E6E:  DATA 6E,6F
00E70:  DATA 74,20
00E72:  DATA 68,61
00E74:  DATA 6E,64
00E76:  DATA 6C,65
00E78:  DATA 64,0D
00E7A:  DATA 0A,00
00E7C:  DATA 5B,4D
00E7E:  DATA 49,53
00E80:  DATA 46,5D
00E82:  DATA 20,6D
00E84:  DATA 69,73
00E86:  DATA 73,69
00E88:  DATA 6F,6E
00E8A:  DATA 20,25
00E8C:  DATA 75,20
00E8E:  DATA 75,6E
00E90:  DATA 63,6F
00E92:  DATA 70,69
00E94:  DATA 65,64
00E96:  DATA 5F,63
00E98:  DATA 6F,75
00E9A:  DATA 6E,74
00E9C:  DATA 65,72
00E9E:  DATA 20,72
00EA0:  DATA 65,73
00EA2:  DATA 65,74
00EA4:  DATA 0D,0A
00EA6:  DATA 00,00
00EA8:  DATA 5B,4D
00EAA:  DATA 49,53
00EAC:  DATA 46,5D
00EAE:  DATA 20,6D
00EB0:  DATA 69,73
00EB2:  DATA 73,69
00EB4:  DATA 6F,6E
00EB6:  DATA 20,25
00EB8:  DATA 75,20
00EBA:  DATA 73,74
00EBC:  DATA 61,74
00EBE:  DATA 75,73
00EC0:  DATA 3A,20
00EC2:  DATA 75,73
00EC4:  DATA 65,64
00EC6:  DATA 3D,30
00EC8:  DATA 78,25
00ECA:  DATA 30,38
00ECC:  DATA 4C,58
00ECE:  DATA 20,75
00ED0:  DATA 6E,63
00ED2:  DATA 6F,70
00ED4:  DATA 69,65
00ED6:  DATA 64,3D
00ED8:  DATA 30,78
00EDA:  DATA 25,30
00EDC:  DATA 38,4C
00EDE:  DATA 58,20
00EE0:  DATA 72,31
00EE2:  DATA 3D,30
00EE4:  DATA 78,25
00EE6:  DATA 30,32
00EE8:  DATA 58,20
00EEA:  DATA 72,32
00EEC:  DATA 3D,30
00EEE:  DATA 78,25
00EF0:  DATA 30,32
00EF2:  DATA 58,0D
00EF4:  DATA 0A,00
00EF6:  DATA 5B,4D
00EF8:  DATA 49,53
00EFA:  DATA 46,5D
00EFC:  DATA 20,70
00EFE:  DATA 72,69
00F00:  DATA 6E,74
00F02:  DATA 20,73
00F04:  DATA 74,61
00F06:  DATA 74,75
00F08:  DATA 73,3A
00F0A:  DATA 20,6D
00F0C:  DATA 69,73
00F0E:  DATA 73,69
00F10:  DATA 6F,6E
00F12:  DATA 20,25
00F14:  DATA 75,20
00F16:  DATA 6E,6F
00F18:  DATA 74,20
00F1A:  DATA 68,61
00F1C:  DATA 6E,64
00F1E:  DATA 6C,65
00F20:  DATA 64,0D
00F22:  DATA 0A,00
00F24:  DATA 4D,49
00F26:  DATA 53,53
00F28:  DATA 49,4F
00F2A:  DATA 4E,20
00F2C:  DATA 46,4C
00F2E:  DATA 41,53
00F30:  DATA 48,20
00F32:  DATA 49,6E
00F34:  DATA 69,74
00F36:  DATA 69,61
00F38:  DATA 6C,69
00F3A:  DATA 7A,65
00F3C:  DATA 0D,0A
00F3E:  DATA 00,00
00F40:  DATA 09,5B
00F42:  DATA 4D,49
00F44:  DATA 53,20
00F46:  DATA 46,4D
00F48:  DATA 5D,20
00F4A:  DATA 43,6F
00F4C:  DATA 6E,6E
00F4E:  DATA 65,63
00F50:  DATA 74,65
00F52:  DATA 64,0D
00F54:  DATA 0A,00
00F56:  DATA 09,5B
00F58:  DATA 4D,49
00F5A:  DATA 53,20
00F5C:  DATA 46,4D
00F5E:  DATA 5D,20
00F60:  DATA 4E,6F
00F62:  DATA 74,20
00F64:  DATA 43,6F
00F66:  DATA 6E,6E
00F68:  DATA 65,63
00F6A:  DATA 74,65
00F6C:  DATA 64,0D
00F6E:  DATA 0A,00
00F70:  DATA 09,5B
00F72:  DATA 53,4D
00F74:  DATA 46,5D
00F76:  DATA 20,43
00F78:  DATA 6F,6E
00F7A:  DATA 6E,65
00F7C:  DATA 63,74
00F7E:  DATA 65,64
00F80:  DATA 0D,0A
00F82:  DATA 00,00
00F84:  DATA 09,5B
00F86:  DATA 53,4D
00F88:  DATA 46,5D
00F8A:  DATA 20,4E
00F8C:  DATA 6F,74
00F8E:  DATA 20,43
00F90:  DATA 6F,6E
00F92:  DATA 6E,65
00F94:  DATA 63,74
00F96:  DATA 65,64
00F98:  DATA 0D,0A
00F9A:  DATA 00,00
00F9C:  DATA 09,5B
00F9E:  DATA 4D,49
00FA0:  DATA 53,20
00FA2:  DATA 46,4D
00FA4:  DATA 5D,20
00FA6:  DATA 43,52
00FA8:  DATA 43,20
00FAA:  DATA 65,72
00FAC:  DATA 72,6F
00FAE:  DATA 72,20
00FB0:  DATA 2D,3E
00FB2:  DATA 20,69
00FB4:  DATA 6E,69
00FB6:  DATA 74,69
00FB8:  DATA 61,6C
00FBA:  DATA 69,7A
00FBC:  DATA 65,20
00FBE:  DATA 63,6F
00FC0:  DATA 75,6E
00FC2:  DATA 74,65
00FC4:  DATA 72,73
00FC6:  DATA 0D,0A
00FC8:  DATA 00,00
00FCA:  DATA 09,43
00FCC:  DATA 6F,6D
00FCE:  DATA 70,6C
00FD0:  DATA 65,74
00FD2:  DATA 65,0D
00FD4:  DATA 0A,00
00FD6:  DATA 09,46
00FD8:  DATA 69,65
00FDA:  DATA 6C,64
00FDC:  DATA 09,09
00FDE:  DATA 43,6F
00FE0:  DATA 75,6E
00FE2:  DATA 74,65
00FE4:  DATA 72,4E
00FE6:  DATA 61,6D
00FE8:  DATA 65,09
00FEA:  DATA 56,61
00FEC:  DATA 6C,75
00FEE:  DATA 65,0D
00FF0:  DATA 0A,00
00FF2:  DATA 09,2D
00FF4:  DATA 2D,2D
00FF6:  DATA 2D,2D
00FF8:  DATA 2D,2D
00FFA:  DATA 2D,2D
00FFC:  DATA 2D,2D
00FFE:  DATA 2D,09
01000:  DATA 2D,2D
01002:  DATA 2D,2D
01004:  DATA 2D,2D
01006:  DATA 2D,2D
01008:  DATA 2D,2D
0100A:  DATA 2D,2D
0100C:  DATA 2D,09
0100E:  DATA 2D,2D
01010:  DATA 2D,2D
01012:  DATA 2D,2D
01014:  DATA 2D,2D
01016:  DATA 2D,2D
01018:  DATA 2D,2D
0101A:  DATA 2D,0D
0101C:  DATA 0A,00
0101E:  DATA 09,50
01020:  DATA 49,43
01022:  DATA 4C,4F
01024:  DATA 47,09
01026:  DATA 09,55
01028:  DATA 73,65
0102A:  DATA 64,09
0102C:  DATA 09,30
0102E:  DATA 78,25
01030:  DATA 30,38
01032:  DATA 4C,58
01034:  DATA 0D,0A
01036:  DATA 00,00
01038:  DATA 09,09
0103A:  DATA 09,55
0103C:  DATA 6E,63
0103E:  DATA 6F,70
01040:  DATA 79,65
01042:  DATA 64,09
01044:  DATA 30,78
01046:  DATA 25,30
01048:  DATA 38,4C
0104A:  DATA 58,0D
0104C:  DATA 0A,00
0104E:  DATA 09,09
01050:  DATA 09,52
01052:  DATA 65,73
01054:  DATA 65,72
01056:  DATA 76,65
01058:  DATA 09,09
0105A:  DATA 30,78
0105C:  DATA 25,30
0105E:  DATA 32,58
01060:  DATA 2F,20
01062:  DATA 30,78
01064:  DATA 25,30
01066:  DATA 32,58
01068:  DATA 0D,0A
0106A:  DATA 00,00
0106C:  DATA 09,45
0106E:  DATA 4E,56
01070:  DATA 49,52
01072:  DATA 4F,09
01074:  DATA 09,55
01076:  DATA 73,65
01078:  DATA 64,09
0107A:  DATA 09,30
0107C:  DATA 78,25
0107E:  DATA 30,38
01080:  DATA 4C,58
01082:  DATA 0D,0A
01084:  DATA 00,00
01086:  DATA 09,09
01088:  DATA 09,55
0108A:  DATA 6E,63
0108C:  DATA 6F,70
0108E:  DATA 79,65
01090:  DATA 64,09
01092:  DATA 30,78
01094:  DATA 25,30
01096:  DATA 38,4C
01098:  DATA 58,0D
0109A:  DATA 0A,00
0109C:  DATA 09,09
0109E:  DATA 09,52
010A0:  DATA 65,73
010A2:  DATA 65,72
010A4:  DATA 76,65
010A6:  DATA 09,09
010A8:  DATA 30,78
010AA:  DATA 25,30
010AC:  DATA 32,58
010AE:  DATA 2F,20
010B0:  DATA 30,78
010B2:  DATA 25,30
010B4:  DATA 32,58
010B6:  DATA 0D,0A
010B8:  DATA 00,00
010BA:  DATA 09,49
010BC:  DATA 56,31
010BE:  DATA 20,48
010C0:  DATA 45,41
010C2:  DATA 44,45
010C4:  DATA 52,09
010C6:  DATA 55,73
010C8:  DATA 65,64
010CA:  DATA 09,09
010CC:  DATA 30,78
010CE:  DATA 25,30
010D0:  DATA 38,4C
010D2:  DATA 58,0D
010D4:  DATA 0A,00
010D6:  DATA 09,09
010D8:  DATA 09,55
010DA:  DATA 6E,63
010DC:  DATA 6F,70
010DE:  DATA 79,65
010E0:  DATA 64,09
010E2:  DATA 30,78
010E4:  DATA 25,30
010E6:  DATA 38,4C
010E8:  DATA 58,0D
010EA:  DATA 0A,00
010EC:  DATA 09,09
010EE:  DATA 09,52
010F0:  DATA 65,73
010F2:  DATA 65,72
010F4:  DATA 76,65
010F6:  DATA 09,09
010F8:  DATA 30,78
010FA:  DATA 25,30
010FC:  DATA 32,58
010FE:  DATA 2F,20
01100:  DATA 30,78
01102:  DATA 25,30
01104:  DATA 32,58
01106:  DATA 0D,0A
01108:  DATA 00,00
0110A:  DATA 09,49
0110C:  DATA 56,31
0110E:  DATA 20,44
01110:  DATA 41,54
01112:  DATA 41,09
01114:  DATA 55,73
01116:  DATA 65,64
01118:  DATA 09,09
0111A:  DATA 30,78
0111C:  DATA 25,30
0111E:  DATA 38,4C
01120:  DATA 58,0D
01122:  DATA 0A,00
01124:  DATA 09,09
01126:  DATA 09,55
01128:  DATA 6E,63
0112A:  DATA 6F,70
0112C:  DATA 79,65
0112E:  DATA 64,09
01130:  DATA 30,78
01132:  DATA 25,30
01134:  DATA 38,4C
01136:  DATA 58,0D
01138:  DATA 0A,00
0113A:  DATA 09,09
0113C:  DATA 09,52
0113E:  DATA 65,73
01140:  DATA 65,72
01142:  DATA 76,65
01144:  DATA 09,09
01146:  DATA 30,78
01148:  DATA 25,30
0114A:  DATA 32,58
0114C:  DATA 2F,20
0114E:  DATA 30,78
01150:  DATA 25,30
01152:  DATA 32,58
01154:  DATA 0D,0A
01156:  DATA 00,00
01158:  DATA 09,49
0115A:  DATA 56,32
0115C:  DATA 20,48
0115E:  DATA 45,41
01160:  DATA 44,45
01162:  DATA 52,09
01164:  DATA 55,73
01166:  DATA 65,64
01168:  DATA 09,09
0116A:  DATA 30,78
0116C:  DATA 25,30
0116E:  DATA 38,4C
01170:  DATA 58,0D
01172:  DATA 0A,00
01174:  DATA 09,09
01176:  DATA 09,55
01178:  DATA 6E,63
0117A:  DATA 6F,70
0117C:  DATA 79,65
0117E:  DATA 64,09
01180:  DATA 30,78
01182:  DATA 25,30
01184:  DATA 38,4C
01186:  DATA 58,0D
01188:  DATA 0A,00
0118A:  DATA 09,09
0118C:  DATA 09,52
0118E:  DATA 65,73
01190:  DATA 65,72
01192:  DATA 76,65
01194:  DATA 09,09
01196:  DATA 30,78
01198:  DATA 25,30
0119A:  DATA 32,58
0119C:  DATA 2F,20
0119E:  DATA 30,78
011A0:  DATA 25,30
011A2:  DATA 32,58
011A4:  DATA 0D,0A
011A6:  DATA 00,00
011A8:  DATA 09,49
011AA:  DATA 56,32
011AC:  DATA 20,44
011AE:  DATA 41,54
011B0:  DATA 41,09
011B2:  DATA 55,73
011B4:  DATA 65,64
011B6:  DATA 09,09
011B8:  DATA 30,78
011BA:  DATA 25,30
011BC:  DATA 38,4C
011BE:  DATA 58,0D
011C0:  DATA 0A,00
011C2:  DATA 09,09
011C4:  DATA 09,55
011C6:  DATA 6E,63
011C8:  DATA 6F,70
011CA:  DATA 79,65
011CC:  DATA 64,09
011CE:  DATA 30,78
011D0:  DATA 25,30
011D2:  DATA 38,4C
011D4:  DATA 58,0D
011D6:  DATA 0A,00
011D8:  DATA 09,09
011DA:  DATA 09,52
011DC:  DATA 65,73
011DE:  DATA 65,72
011E0:  DATA 76,65
011E2:  DATA 09,09
011E4:  DATA 30,78
011E6:  DATA 25,30
011E8:  DATA 32,58
011EA:  DATA 2F,20
011EC:  DATA 30,78
011EE:  DATA 25,30
011F0:  DATA 32,58
011F2:  DATA 0D,0A
011F4:  DATA 00,00
011F6:  DATA 09,2D
011F8:  DATA 2D,2D
011FA:  DATA 2D,2D
011FC:  DATA 2D,2D
011FE:  DATA 2D,2D
01200:  DATA 2D,2D
01202:  DATA 2D,09
01204:  DATA 2D,2D
01206:  DATA 2D,2D
01208:  DATA 2D,2D
0120A:  DATA 2D,2D
0120C:  DATA 2D,2D
0120E:  DATA 2D,2D
01210:  DATA 2D,09
01212:  DATA 2D,2D
01214:  DATA 2D,2D
01216:  DATA 2D,2D
01218:  DATA 2D,2D
0121A:  DATA 2D,2D
0121C:  DATA 2D,2D
0121E:  DATA 2D,0D
01220:  DATA 0A,00
01222:  DATA 43,52
01224:  DATA 43,20
01226:  DATA 76,65
01228:  DATA 72,69
0122A:  DATA 66,69
0122C:  DATA 63,61
0122E:  DATA 74,69
01230:  DATA 6F,6E
01232:  DATA 20,70
01234:  DATA 61,73
01236:  DATA 73,65
01238:  DATA 64,20
0123A:  DATA 6F,6E
0123C:  DATA 20,61
0123E:  DATA 74,74
01240:  DATA 65,6D
01242:  DATA 70,74
01244:  DATA 20,25
01246:  DATA 64,0D
01248:  DATA 0A,00
0124A:  DATA 45,72
0124C:  DATA 72,6F
0124E:  DATA 72,3A
01250:  DATA 20,43
01252:  DATA 52,43
01254:  DATA 20,76
01256:  DATA 65,72
01258:  DATA 69,66
0125A:  DATA 69,63
0125C:  DATA 61,74
0125E:  DATA 69,6F
01260:  DATA 6E,20
01262:  DATA 66,61
01264:  DATA 69,6C
01266:  DATA 65,64
01268:  DATA 20,61
0126A:  DATA 66,74
0126C:  DATA 65,72
0126E:  DATA 20,25
01270:  DATA 64,20
01272:  DATA 61,74
01274:  DATA 74,65
01276:  DATA 6D,70
01278:  DATA 74,73
0127A:  DATA 0D,0A
0127C:  DATA 00,00
0127E:  DATA 0D,0A
01280:  DATA 5F,5F
01282:  DATA 5F,5F
01284:  DATA 5F,5F
01286:  DATA 5F,5F
01288:  DATA 5F,5F
0128A:  DATA 5F,5F
0128C:  DATA 5F,5F
0128E:  DATA 5F,5F
01290:  DATA 5F,5F
01292:  DATA 5F,5F
01294:  DATA 5F,5F
01296:  DATA 5F,5F
01298:  DATA 5F,5F
0129A:  DATA 5F,5F
0129C:  DATA 5F,5F
0129E:  DATA 0D,0A
012A0:  DATA 5F,5F
012A2:  DATA 5F,5F
012A4:  DATA 5F,53
012A6:  DATA 74,61
012A8:  DATA 72,74
012AA:  DATA 20,65
012AC:  DATA 78,65
012AE:  DATA 63,75
012B0:  DATA 74,65
012B2:  DATA 5F,6D
012B4:  DATA 69,73
012B6:  DATA 73,69
012B8:  DATA 6F,6E
012BA:  DATA 5F,5F
012BC:  DATA 5F,5F
012BE:  DATA 5F,0D
012C0:  DATA 0A,0D
012C2:  DATA 0A,00
012C4:  DATA 43,6F
012C6:  DATA 6D,6D
012C8:  DATA 61,6E
012CA:  DATA 64,20
012CC:  DATA 49,44
012CE:  DATA 3A,20
012D0:  DATA 25,58
012D2:  DATA 0D,0A
012D4:  DATA 0D,0A
012D6:  DATA 00,00
012D8:  DATA 09,09
012DA:  DATA 2D,3E
012DC:  DATA 20,49
012DE:  DATA 6E,76
012E0:  DATA 61,6C
012E2:  DATA 69,64
012E4:  DATA 20,43
012E6:  DATA 4D,44
012E8:  DATA 20,49
012EA:  DATA 44,21
012EC:  DATA 0D,0A
012EE:  DATA 00,00
012F0:  DATA 0D,0A
012F2:  DATA 5F,5F
012F4:  DATA 5F,5F
012F6:  DATA 5F,5F
012F8:  DATA 45,6E
012FA:  DATA 64,20
012FC:  DATA 65,78
012FE:  DATA 65,63
01300:  DATA 75,74
01302:  DATA 65,5F
01304:  DATA 6D,69
01306:  DATA 73,73
01308:  DATA 69,6F
0130A:  DATA 6E,5F
0130C:  DATA 5F,5F
0130E:  DATA 5F,5F
01310:  DATA 5F,0D
01312:  DATA 0A,5F
01314:  DATA 5F,5F
01316:  DATA 5F,5F
01318:  DATA 5F,5F
0131A:  DATA 5F,5F
0131C:  DATA 5F,5F
0131E:  DATA 5F,5F
01320:  DATA 5F,5F
01322:  DATA 5F,5F
01324:  DATA 5F,5F
01326:  DATA 5F,5F
01328:  DATA 5F,5F
0132A:  DATA 5F,5F
0132C:  DATA 5F,5F
0132E:  DATA 5F,5F
01330:  DATA 5F,5F
01332:  DATA 0D,0A
01334:  DATA 00,00
01336:  DATA 53,74
01338:  DATA 61,72
0133A:  DATA 74,20
0133C:  DATA 65,78
0133E:  DATA 65,63
01340:  DATA 75,74
01342:  DATA 65,5F
01344:  DATA 63,6F
01346:  DATA 6D,6D
01348:  DATA 61,6E
0134A:  DATA 64,0D
0134C:  DATA 0A,00
0134E:  DATA 09,2D
01350:  DATA 3E,20
01352:  DATA 55,70
01354:  DATA 6C,69
01356:  DATA 6E,6B
01358:  DATA 20,63
0135A:  DATA 6F,6D
0135C:  DATA 6D,61
0135E:  DATA 6E,64
01360:  DATA 0D,0A
01362:  DATA 00,00
01364:  DATA 09,20
01366:  DATA 20,20
01368:  DATA 54,72
0136A:  DATA 61,6E
0136C:  DATA 73,6D
0136E:  DATA 69,74
01370:  DATA 20,41
01372:  DATA 63,6B
01374:  DATA 6E,6F
01376:  DATA 6C,65
01378:  DATA 67,64
0137A:  DATA 65,0D
0137C:  DATA 0A,00
0137E:  DATA 09,2D
01380:  DATA 3E,20
01382:  DATA 53,74
01384:  DATA 61,74
01386:  DATA 75,73
01388:  DATA 20,63
0138A:  DATA 68,65
0138C:  DATA 63,6B
0138E:  DATA 0D,0A
01390:  DATA 00,00
01392:  DATA 09,20
01394:  DATA 20,20
01396:  DATA 54,72
01398:  DATA 61,6E
0139A:  DATA 73,6D
0139C:  DATA 69,74
0139E:  DATA 20,4D
013A0:  DATA 49,53
013A2:  DATA 20,4D
013A4:  DATA 43,55
013A6:  DATA 20,53
013A8:  DATA 74,61
013AA:  DATA 74,75
013AC:  DATA 73,0D
013AE:  DATA 0A,00
013B0:  DATA 66,69
013B2:  DATA 6E,69
013B4:  DATA 73,68
013B6:  DATA 65,64
013B8:  DATA 20,69
013BA:  DATA 6E,20
013BC:  DATA 73,74
013BE:  DATA 61,74
013C0:  DATA 75,73
013C2:  DATA 5F,63
013C4:  DATA 68,65
013C6:  DATA 63,6B
013C8:  DATA 0D,0A
013CA:  DATA 00,00
013CC:  DATA 09,2D
013CE:  DATA 3E,20
013D0:  DATA 53,4D
013D2:  DATA 46,20
013D4:  DATA 61,76
013D6:  DATA 61,69
013D8:  DATA 6C,61
013DA:  DATA 62,6C
013DC:  DATA 65,20
013DE:  DATA 63,68
013E0:  DATA 65,63
013E2:  DATA 6B,0D
013E4:  DATA 0A,00
013E6:  DATA 09,20
013E8:  DATA 20,20
013EA:  DATA 54,72
013EC:  DATA 61,6E
013EE:  DATA 73,6D
013F0:  DATA 69,74
013F2:  DATA 20,41
013F4:  DATA 63,6B
013F6:  DATA 6E,6F
013F8:  DATA 77,6C
013FA:  DATA 65,64
013FC:  DATA 67,65
013FE:  DATA 6D,65
01400:  DATA 6E,74
01402:  DATA 0D,0A
01404:  DATA 00,00
01406:  DATA 09,09
01408:  DATA 2D,3E
0140A:  DATA 20,64
0140C:  DATA 65,6E
0140E:  DATA 69,65
01410:  DATA 64,0D
01412:  DATA 0A,00
01414:  DATA 09,09
01416:  DATA 2D,3E
01418:  DATA 20,61
0141A:  DATA 6C,6C
0141C:  DATA 6F,77
0141E:  DATA 65,64
01420:  DATA 0D,0A
01422:  DATA 00,00
01424:  DATA 09,09
01426:  DATA 2D,3E
01428:  DATA 20,44
0142A:  DATA 65,71
0142C:  DATA 75,65
0142E:  DATA 75,65
01430:  DATA 64,3A
01432:  DATA 20,66
01434:  DATA 75,6E
01436:  DATA 63,3D
01438:  DATA 25,75
0143A:  DATA 20,6D
0143C:  DATA 69,73
0143E:  DATA 73,69
01440:  DATA 6F,6E
01442:  DATA 3D,25
01444:  DATA 75,20
01446:  DATA 73,69
01448:  DATA 7A,65
0144A:  DATA 3D,25
0144C:  DATA 6C,64
0144E:  DATA 20,61
01450:  DATA 64,64
01452:  DATA 72,3D
01454:  DATA 25,6C
01456:  DATA 64,0D
01458:  DATA 0A,00
0145A:  DATA 09,09
0145C:  DATA 20,20
0145E:  DATA 20,55
01460:  DATA 6E,6B
01462:  DATA 6E,6F
01464:  DATA 77,6E
01466:  DATA 20,66
01468:  DATA 75,6E
0146A:  DATA 63,5F
0146C:  DATA 74,79
0146E:  DATA 70,65
01470:  DATA 3D,25
01472:  DATA 75,0D
01474:  DATA 0A,00
01476:  DATA 09,09
01478:  DATA 2D,3E
0147A:  DATA 20,43
0147C:  DATA 6F,6D
0147E:  DATA 70,6C
01480:  DATA 65,74
01482:  DATA 65,64
01484:  DATA 20,25
01486:  DATA 75,20
01488:  DATA 6F,70
0148A:  DATA 65,72
0148C:  DATA 61,74
0148E:  DATA 69,6F
01490:  DATA 6E,73
01492:  DATA 0D,0A
01494:  DATA 00,00
01496:  DATA 53,74
01498:  DATA 61,72
0149A:  DATA 74,20
0149C:  DATA 4D,4F
0149E:  DATA 44,45
014A0:  DATA 20,4D
014A2:  DATA 45,41
014A4:  DATA 53,20
014A6:  DATA 49,56
014A8:  DATA 0D,0A
014AA:  DATA 00,00
014AC:  DATA 09,53
014AE:  DATA 6C,65
014B0:  DATA 65,70
014B2:  DATA 54,69
014B4:  DATA 6D,65
014B6:  DATA 3A,20
014B8:  DATA 20,20
014BA:  DATA 20,20
014BC:  DATA 20,20
014BE:  DATA 20,25
014C0:  DATA 30,34
014C2:  DATA 4C,58
014C4:  DATA 0D,0A
014C6:  DATA 00,00
014C8:  DATA 09,43
014CA:  DATA 75,72
014CC:  DATA 72,65
014CE:  DATA 6E,74
014D0:  DATA 54,68
014D2:  DATA 72,65
014D4:  DATA 73,68
014D6:  DATA 6F,6C
014D8:  DATA 64,3A
014DA:  DATA 20,25
014DC:  DATA 30,34
014DE:  DATA 4C,58
014E0:  DATA 0D,0A
014E2:  DATA 00,00
014E4:  DATA 09,50
014E6:  DATA 44,54
014E8:  DATA 68,72
014EA:  DATA 65,73
014EC:  DATA 68,6F
014EE:  DATA 6C,64
014F0:  DATA 3A,20
014F2:  DATA 20,20
014F4:  DATA 20,20
014F6:  DATA 20,25
014F8:  DATA 30,34
014FA:  DATA 4C,58
014FC:  DATA 0D,0A
014FE:  DATA 00,00
01500:  DATA 09,43
01502:  DATA 75,72
01504:  DATA 72,65
01506:  DATA 6E,74
01508:  DATA 4C,69
0150A:  DATA 6D,69
0150C:  DATA 74,3A
0150E:  DATA 20,20
01510:  DATA 20,20
01512:  DATA 20,25
01514:  DATA 30,34
01516:  DATA 4C,58
01518:  DATA 0D,0A
0151A:  DATA 00,00
0151C:  DATA 09,4D
0151E:  DATA 65,61
01520:  DATA 73,75
01522:  DATA 72,65
01524:  DATA 6D,65
01526:  DATA 6E,74
01528:  DATA 54,69
0152A:  DATA 6D,65
0152C:  DATA 3A,20
0152E:  DATA 20,25
01530:  DATA 30,34
01532:  DATA 4C,58
01534:  DATA 0D,0A
01536:  DATA 00,00
01538:  DATA 45,6E
0153A:  DATA 71,75
0153C:  DATA 65,75
0153E:  DATA 65,20
01540:  DATA 46,6C
01542:  DATA 61,73
01544:  DATA 68,20
01546:  DATA 4F,70
01548:  DATA 65,72
0154A:  DATA 61,74
0154C:  DATA 69,6F
0154E:  DATA 6E,0D
01550:  DATA 0A,00
01552:  DATA 4D,69
01554:  DATA 73,73
01556:  DATA 69,6F
01558:  DATA 6E,20
0155A:  DATA 49,44
0155C:  DATA 3A,20
0155E:  DATA 20,20
01560:  DATA 25,30
01562:  DATA 32,58
01564:  DATA 0D,0A
01566:  DATA 00,00
01568:  DATA 46,75
0156A:  DATA 6E,63
0156C:  DATA 74,69
0156E:  DATA 6F,6E
01570:  DATA 20,54
01572:  DATA 79,70
01574:  DATA 65,3A
01576:  DATA 25,30
01578:  DATA 32,58
0157A:  DATA 0D,0A
0157C:  DATA 00,00
0157E:  DATA 57,72
01580:  DATA 69,74
01582:  DATA 65,20
01584:  DATA 4D,6F
01586:  DATA 64,65
01588:  DATA 3A,20
0158A:  DATA 20,20
0158C:  DATA 25,30
0158E:  DATA 32,58
01590:  DATA 0D,0A
01592:  DATA 00,00
01594:  DATA 53,6F
01596:  DATA 75,72
01598:  DATA 63,65
0159A:  DATA 20,54
0159C:  DATA 79,70
0159E:  DATA 65,3A
015A0:  DATA 20,20
015A2:  DATA 25,30
015A4:  DATA 32,58
015A6:  DATA 0D,0A
015A8:  DATA 00,00
015AA:  DATA 53,74
015AC:  DATA 61,72
015AE:  DATA 74,20
015B0:  DATA 41,64
015B2:  DATA 64,72
015B4:  DATA 65,73
015B6:  DATA 73,3A
015B8:  DATA 25,30
015BA:  DATA 34,58
015BC:  DATA 0D,0A
015BE:  DATA 00,00
015C0:  DATA 53,69
015C2:  DATA 7A,65
015C4:  DATA 3A,20
015C6:  DATA 20,20
015C8:  DATA 20,20
015CA:  DATA 20,20
015CC:  DATA 20,20
015CE:  DATA 25,30
015D0:  DATA 34,58
015D2:  DATA 0D,0A
015D4:  DATA 00,00
015D6:  DATA 45,6E
015D8:  DATA 64,20
015DA:  DATA 4D,4F
015DC:  DATA 44,45
015DE:  DATA 20,4D
015E0:  DATA 45,41
015E2:  DATA 53,20
015E4:  DATA 49,56
015E6:  DATA 20,6D
015E8:  DATA 69,73
015EA:  DATA 73,69
015EC:  DATA 6F,6E
015EE:  DATA 0D,0A
015F0:  DATA 00,00
015F2:  DATA 53,74
015F4:  DATA 61,72
015F6:  DATA 74,20
015F8:  DATA 4D,4F
015FA:  DATA 44,45
015FC:  DATA 20,49
015FE:  DATA 56,20
01600:  DATA 44,45
01602:  DATA 42,55
01604:  DATA 47,0D
01606:  DATA 0A,00
01608:  DATA 09,49
0160A:  DATA 44,3A
0160C:  DATA 20,25
0160E:  DATA 30,32
01610:  DATA 58,0D
01612:  DATA 0A,00
01614:  DATA 09,53
01616:  DATA 6C,65
01618:  DATA 65,70
0161A:  DATA 54,69
0161C:  DATA 6D,65
0161E:  DATA 3A,20
01620:  DATA 20,20
01622:  DATA 20,20
01624:  DATA 20,20
01626:  DATA 20,30
01628:  DATA 78,25
0162A:  DATA 30,34
0162C:  DATA 58,0D
0162E:  DATA 0A,00
01630:  DATA 09,4C
01632:  DATA 6F,67
01634:  DATA 43,75
01636:  DATA 72,72
01638:  DATA 54,68
0163A:  DATA 72,65
0163C:  DATA 73,68
0163E:  DATA 6F,6C
01640:  DATA 64,3A
01642:  DATA 20,30
01644:  DATA 78,25
01646:  DATA 30,34
01648:  DATA 58,0D
0164A:  DATA 0A,00
0164C:  DATA 09,50
0164E:  DATA 44,54
01650:  DATA 68,72
01652:  DATA 65,73
01654:  DATA 68,6F
01656:  DATA 6C,64
01658:  DATA 3A,20
0165A:  DATA 20,20
0165C:  DATA 20,20
0165E:  DATA 20,30
01660:  DATA 78,25
01662:  DATA 30,34
01664:  DATA 58,0D
01666:  DATA 0A,00
01668:  DATA 09,43
0166A:  DATA 75,72
0166C:  DATA 72,65
0166E:  DATA 6E,74
01670:  DATA 4C,69
01672:  DATA 6D,69
01674:  DATA 74,3A
01676:  DATA 20,20
01678:  DATA 20,20
0167A:  DATA 20,30
0167C:  DATA 78,25
0167E:  DATA 30,34
01680:  DATA 58,0D
01682:  DATA 0A,00
01684:  DATA 09,4D
01686:  DATA 65,61
01688:  DATA 73,75
0168A:  DATA 72,65
0168C:  DATA 6D,65
0168E:  DATA 6E,74
01690:  DATA 54,69
01692:  DATA 6D,65
01694:  DATA 3A,20
01696:  DATA 20,30
01698:  DATA 78,25
0169A:  DATA 30,34
0169C:  DATA 58,0D
0169E:  DATA 0A,00
016A0:  DATA 5B,49
016A2:  DATA 56,44
016A4:  DATA 42,47
016A6:  DATA 5D,20
016A8:  DATA 45,6E
016AA:  DATA 64,20
016AC:  DATA 4D,4F
016AE:  DATA 44,45
016B0:  DATA 20,49
016B2:  DATA 56,20
016B4:  DATA 44,45
016B6:  DATA 42,55
016B8:  DATA 47,0D
016BA:  DATA 0A,00
016BC:  DATA 74,65
016BE:  DATA 6D,70
016C0:  DATA 5F,74
016C2:  DATA 6F,70
016C4:  DATA 2C,20
016C6:  DATA 74,65
016C8:  DATA 6D,70
016CA:  DATA 5F,62
016CC:  DATA 6F,74
016CE:  DATA 2C,20
016D0:  DATA 74,65
016D2:  DATA 6D,70
016D4:  DATA 5F,6D
016D6:  DATA 69,73
016D8:  DATA 37,2C
016DA:  DATA 20,70
016DC:  DATA 64,0D
016DE:  DATA 0A,00
016E0:  DATA 30,78
016E2:  DATA 25,30
016E4:  DATA 34,4C
016E6:  DATA 58,2C
016E8:  DATA 20,30
016EA:  DATA 78,25
016EC:  DATA 30,34
016EE:  DATA 4C,58
016F0:  DATA 2C,20
016F2:  DATA 30,78
016F4:  DATA 25,30
016F6:  DATA 34,4C
016F8:  DATA 58,2C
016FA:  DATA 20,30
016FC:  DATA 78,25
016FE:  DATA 30,34
01700:  DATA 4C,58
01702:  DATA 0D,0A
01704:  DATA 00,00
01706:  DATA 53,74
01708:  DATA 61,72
0170A:  DATA 74,20
0170C:  DATA 4D,4F
0170E:  DATA 44,45
01710:  DATA 20,4D
01712:  DATA 45,41
01714:  DATA 53,20
01716:  DATA 45,4E
01718:  DATA 56,20
0171A:  DATA 44,45
0171C:  DATA 42,55
0171E:  DATA 47,0D
01720:  DATA 0A,00
01722:  DATA 45,6E
01724:  DATA 64,20
01726:  DATA 4D,4F
01728:  DATA 44,45
0172A:  DATA 20,4D
0172C:  DATA 45,41
0172E:  DATA 53,20
01730:  DATA 45,4E
01732:  DATA 56,20
01734:  DATA 44,45
01736:  DATA 42,55
01738:  DATA 47,0D
0173A:  DATA 0A,00
0173C:  DATA 53,74
0173E:  DATA 61,72
01740:  DATA 74,20
01742:  DATA 46,6C
01744:  DATA 61,73
01746:  DATA 68,20
01748:  DATA 45,72
0174A:  DATA 61,73
0174C:  DATA 65,20
0174E:  DATA 41,6C
01750:  DATA 6C,0D
01752:  DATA 0A,00
01754:  DATA 45,6E
01756:  DATA 64,20
01758:  DATA 46,6C
0175A:  DATA 61,73
0175C:  DATA 68,20
0175E:  DATA 45,72
01760:  DATA 61,73
01762:  DATA 65,20
01764:  DATA 41,6C
01766:  DATA 6C,0D
01768:  DATA 0A,00
0176A:  DATA 53,74
0176C:  DATA 61,72
0176E:  DATA 74,20
01770:  DATA 46,6C
01772:  DATA 61,73
01774:  DATA 68,20
01776:  DATA 45,72
01778:  DATA 61,73
0177A:  DATA 65,20
0177C:  DATA 31,20
0177E:  DATA 53,65
01780:  DATA 63,74
01782:  DATA 6F,72
01784:  DATA 0D,0A
01786:  DATA 00,00
01788:  DATA 09,53
0178A:  DATA 65,63
0178C:  DATA 74,6F
0178E:  DATA 72,20
01790:  DATA 41,64
01792:  DATA 64,72
01794:  DATA 65,73
01796:  DATA 73,3A
01798:  DATA 20,30
0179A:  DATA 78,25
0179C:  DATA 30,38
0179E:  DATA 4C,58
017A0:  DATA 0D,0A
017A2:  DATA 00,00
017A4:  DATA 45,6E
017A6:  DATA 64,20
017A8:  DATA 46,6C
017AA:  DATA 61,73
017AC:  DATA 68,20
017AE:  DATA 45,72
017B0:  DATA 61,73
017B2:  DATA 65,20
017B4:  DATA 31,20
017B6:  DATA 53,65
017B8:  DATA 63,74
017BA:  DATA 6F,72
017BC:  DATA 0D,0A
017BE:  DATA 00,00
017C0:  DATA 53,74
017C2:  DATA 61,72
017C4:  DATA 74,20
017C6:  DATA 46,6C
017C8:  DATA 61,73
017CA:  DATA 68,20
017CC:  DATA 45,72
017CE:  DATA 61,73
017D0:  DATA 65,20
017D2:  DATA 34,6B
017D4:  DATA 42,79
017D6:  DATA 74,65
017D8:  DATA 20,53
017DA:  DATA 75,62
017DC:  DATA 73,65
017DE:  DATA 63,74
017E0:  DATA 6F,72
017E2:  DATA 0D,0A
017E4:  DATA 00,00
017E6:  DATA 09,53
017E8:  DATA 75,62
017EA:  DATA 73,65
017EC:  DATA 63,74
017EE:  DATA 6F,72
017F0:  DATA 20,41
017F2:  DATA 64,64
017F4:  DATA 72,65
017F6:  DATA 73,73
017F8:  DATA 3A,20
017FA:  DATA 30,78
017FC:  DATA 25,30
017FE:  DATA 38,4C
01800:  DATA 58,0D
01802:  DATA 0A,00
01804:  DATA 45,6E
01806:  DATA 64,20
01808:  DATA 46,6C
0180A:  DATA 61,73
0180C:  DATA 68,20
0180E:  DATA 45,72
01810:  DATA 61,73
01812:  DATA 65,20
01814:  DATA 34,6B
01816:  DATA 42,79
01818:  DATA 74,65
0181A:  DATA 20,53
0181C:  DATA 75,62
0181E:  DATA 73,65
01820:  DATA 63,74
01822:  DATA 6F,72
01824:  DATA 0D,0A
01826:  DATA 00,00
01828:  DATA 53,74
0182A:  DATA 61,72
0182C:  DATA 74,20
0182E:  DATA 46,6C
01830:  DATA 61,73
01832:  DATA 68,20
01834:  DATA 45,72
01836:  DATA 61,73
01838:  DATA 65,20
0183A:  DATA 36,34
0183C:  DATA 6B,42
0183E:  DATA 79,74
01840:  DATA 65,20
01842:  DATA 53,75
01844:  DATA 62,73
01846:  DATA 65,63
01848:  DATA 74,6F
0184A:  DATA 72,0D
0184C:  DATA 0A,00
0184E:  DATA 09,53
01850:  DATA 75,62
01852:  DATA 73,65
01854:  DATA 63,74
01856:  DATA 6F,72
01858:  DATA 20,41
0185A:  DATA 64,64
0185C:  DATA 72,65
0185E:  DATA 73,73
01860:  DATA 3A,20
01862:  DATA 30,78
01864:  DATA 25,30
01866:  DATA 38,4C
01868:  DATA 58,0D
0186A:  DATA 0A,00
0186C:  DATA 45,6E
0186E:  DATA 64,20
01870:  DATA 46,6C
01872:  DATA 61,73
01874:  DATA 68,20
01876:  DATA 45,72
01878:  DATA 61,73
0187A:  DATA 65,20
0187C:  DATA 36,34
0187E:  DATA 6B,42
01880:  DATA 79,74
01882:  DATA 65,20
01884:  DATA 53,75
01886:  DATA 62,73
01888:  DATA 65,63
0188A:  DATA 74,6F
0188C:  DATA 72,0D
0188E:  DATA 0A,00
01890:  DATA 53,74
01892:  DATA 61,72
01894:  DATA 74,20
01896:  DATA 46,6C
01898:  DATA 61,73
0189A:  DATA 68,20
0189C:  DATA 57,72
0189E:  DATA 69,74
018A0:  DATA 65,20
018A2:  DATA 44,65
018A4:  DATA 6D,6F
018A6:  DATA 0D,0A
018A8:  DATA 00,00
018AA:  DATA 09,4D
018AC:  DATA 4F,44
018AE:  DATA 45,20
018B0:  DATA 20,20
018B2:  DATA 20,20
018B4:  DATA 3A,20
018B6:  DATA 25,30
018B8:  DATA 32,58
018BA:  DATA 0D,0A
018BC:  DATA 00,00
018BE:  DATA 09,41
018C0:  DATA 64,64
018C2:  DATA 72,65
018C4:  DATA 73,73
018C6:  DATA 20,20
018C8:  DATA 3A,20
018CA:  DATA 30,78
018CC:  DATA 25,30
018CE:  DATA 38,4C
018D0:  DATA 58,0D
018D2:  DATA 0A,00
018D4:  DATA 09,50
018D6:  DATA 61,63
018D8:  DATA 6B,65
018DA:  DATA 74,4E
018DC:  DATA 75,6D
018DE:  DATA 3A,20
018E0:  DATA 30,78
018E2:  DATA 25,30
018E4:  DATA 34,4C
018E6:  DATA 58,0D
018E8:  DATA 0A,00
018EA:  DATA 57,72
018EC:  DATA 69,74
018EE:  DATA 65,20
018F0:  DATA 44,61
018F2:  DATA 74,61
018F4:  DATA 0D,0A
018F6:  DATA 00,00
018F8:  DATA 0D,0A
018FA:  DATA 5B,46
018FC:  DATA 4C,41
018FE:  DATA 53,48
01900:  DATA 5D,20
01902:  DATA 57,72
01904:  DATA 69,74
01906:  DATA 65,20
01908:  DATA 61,64
0190A:  DATA 64,72
0190C:  DATA 65,73
0190E:  DATA 73,20
01910:  DATA 30,78
01912:  DATA 25,30
01914:  DATA 38,4C
01916:  DATA 58,20
01918:  DATA 65,78
0191A:  DATA 63,65
0191C:  DATA 65,64
0191E:  DATA 73,20
01920:  DATA 64,65
01922:  DATA 76,69
01924:  DATA 63,65
01926:  DATA 20,65
01928:  DATA 6E,64
0192A:  DATA 20,30
0192C:  DATA 78,25
0192E:  DATA 30,38
01930:  DATA 4C,58
01932:  DATA 20,2D
01934:  DATA 3E,20
01936:  DATA 61,62
01938:  DATA 6F,72
0193A:  DATA 74,0D
0193C:  DATA 0A,00
0193E:  DATA 0D,0A
01940:  DATA 5B,46
01942:  DATA 4C,41
01944:  DATA 53,48
01946:  DATA 5D,20
01948:  DATA 52,65
0194A:  DATA 61,63
0194C:  DATA 68,65
0194E:  DATA 64,20
01950:  DATA 65,6E
01952:  DATA 64,2E
01954:  DATA 20,50
01956:  DATA 61,72
01958:  DATA 74,69
0195A:  DATA 61,6C
0195C:  DATA 20,77
0195E:  DATA 72,69
01960:  DATA 74,65
01962:  DATA 20,25
01964:  DATA 6C,75
01966:  DATA 20,62
01968:  DATA 79,74
0196A:  DATA 65,73
0196C:  DATA 20,28
0196E:  DATA 70,61
01970:  DATA 63,6B
01972:  DATA 65,74
01974:  DATA 20,74
01976:  DATA 72,75
01978:  DATA 6E,63
0197A:  DATA 61,74
0197C:  DATA 65,64
0197E:  DATA 29,2E
01980:  DATA 0D,0A
01982:  DATA 00,00
01984:  DATA 45,6E
01986:  DATA 64,20
01988:  DATA 46,6C
0198A:  DATA 61,73
0198C:  DATA 68,20
0198E:  DATA 57,72
01990:  DATA 69,74
01992:  DATA 65,20
01994:  DATA 44,65
01996:  DATA 6D,6F
01998:  DATA 0D,0A
0199A:  DATA 00,00
0199C:  DATA 53,74
0199E:  DATA 61,72
019A0:  DATA 74,20
019A2:  DATA 46,6C
019A4:  DATA 61,73
019A6:  DATA 68,20
019A8:  DATA 57,72
019AA:  DATA 69,74
019AC:  DATA 65,20
019AE:  DATA 34,6B
019B0:  DATA 42,79
019B2:  DATA 74,65
019B4:  DATA 20,53
019B6:  DATA 75,62
019B8:  DATA 73,65
019BA:  DATA 63,74
019BC:  DATA 6F,72
019BE:  DATA 0D,0A
019C0:  DATA 00,00
019C2:  DATA 45,6E
019C4:  DATA 64,20
019C6:  DATA 46,6C
019C8:  DATA 61,73
019CA:  DATA 68,20
019CC:  DATA 57,72
019CE:  DATA 69,74
019D0:  DATA 65,20
019D2:  DATA 34,6B
019D4:  DATA 42,79
019D6:  DATA 74,65
019D8:  DATA 20,53
019DA:  DATA 75,62
019DC:  DATA 73,65
019DE:  DATA 63,74
019E0:  DATA 6F,72
019E2:  DATA 0D,0A
019E4:  DATA 00,00
019E6:  DATA 53,74
019E8:  DATA 61,72
019EA:  DATA 74,20
019EC:  DATA 46,6C
019EE:  DATA 61,73
019F0:  DATA 68,20
019F2:  DATA 52,65
019F4:  DATA 61,64
019F6:  DATA 0D,0A
019F8:  DATA 00,00
019FA:  DATA 09,4D
019FC:  DATA 4F,44
019FE:  DATA 45,20
01A00:  DATA 20,20
01A02:  DATA 20,20
01A04:  DATA 3A,20
01A06:  DATA 25,30
01A08:  DATA 32,58
01A0A:  DATA 0D,0A
01A0C:  DATA 00,00
01A0E:  DATA 09,41
01A10:  DATA 64,64
01A12:  DATA 72,65
01A14:  DATA 73,73
01A16:  DATA 20,20
01A18:  DATA 3A,20
01A1A:  DATA 30,78
01A1C:  DATA 25,30
01A1E:  DATA 38,4C
01A20:  DATA 58,0D
01A22:  DATA 0A,00
01A24:  DATA 09,50
01A26:  DATA 61,63
01A28:  DATA 6B,65
01A2A:  DATA 74,4E
01A2C:  DATA 75,6D
01A2E:  DATA 3A,20
01A30:  DATA 30,78
01A32:  DATA 25,30
01A34:  DATA 34,4C
01A36:  DATA 58,0D
01A38:  DATA 0A,00
01A3A:  DATA 52,45
01A3C:  DATA 41,44
01A3E:  DATA 20,44
01A40:  DATA 41,54
01A42:  DATA 41,0D
01A44:  DATA 0A,00
01A46:  DATA 4D,69
01A48:  DATA 73,73
01A4A:  DATA 69,6F
01A4C:  DATA 6E,20
01A4E:  DATA 46,6C
01A50:  DATA 61,73
01A52:  DATA 68,20
01A54:  DATA 69,73
01A56:  DATA 20,6E
01A58:  DATA 6F,74
01A5A:  DATA 20,63
01A5C:  DATA 6F,6E
01A5E:  DATA 6E,65
01A60:  DATA 63,74
01A62:  DATA 65,64
01A64:  DATA 0D,0A
01A66:  DATA 00,00
01A68:  DATA 5B,46
01A6A:  DATA 4C,41
01A6C:  DATA 53,48
01A6E:  DATA 5D,20
01A70:  DATA 52,65
01A72:  DATA 61,64
01A74:  DATA 20,61
01A76:  DATA 64,64
01A78:  DATA 72,65
01A7A:  DATA 73,73
01A7C:  DATA 20,30
01A7E:  DATA 78,25
01A80:  DATA 30,38
01A82:  DATA 4C,58
01A84:  DATA 20,65
01A86:  DATA 78,63
01A88:  DATA 65,65
01A8A:  DATA 64,73
01A8C:  DATA 20,64
01A8E:  DATA 65,76
01A90:  DATA 69,63
01A92:  DATA 65,20
01A94:  DATA 65,6E
01A96:  DATA 64,20
01A98:  DATA 30,78
01A9A:  DATA 25,30
01A9C:  DATA 38,4C
01A9E:  DATA 58,20
01AA0:  DATA 2D,3E
01AA2:  DATA 20,73
01AA4:  DATA 74,6F
01AA6:  DATA 70,0D
01AA8:  DATA 0A,00
01AAA:  DATA 5B,46
01AAC:  DATA 4C,41
01AAE:  DATA 53,48
01AB0:  DATA 5D,20
01AB2:  DATA 45,6E
01AB4:  DATA 64,20
01AB6:  DATA 72,65
01AB8:  DATA 61,63
01ABA:  DATA 68,65
01ABC:  DATA 64,2E
01ABE:  DATA 20,50
01AC0:  DATA 61,72
01AC2:  DATA 74,69
01AC4:  DATA 61,6C
01AC6:  DATA 20,72
01AC8:  DATA 65,61
01ACA:  DATA 64,20
01ACC:  DATA 25,6C
01ACE:  DATA 75,20
01AD0:  DATA 62,79
01AD2:  DATA 74,65
01AD4:  DATA 73,2E
01AD6:  DATA 0D,0A
01AD8:  DATA 00,00
01ADA:  DATA 45,6E
01ADC:  DATA 64,20
01ADE:  DATA 46,6C
01AE0:  DATA 61,73
01AE2:  DATA 68,20
01AE4:  DATA 52,65
01AE6:  DATA 61,64
01AE8:  DATA 0D,0A
01AEA:  DATA 00,00
01AEC:  DATA 53,74
01AEE:  DATA 61,72
01AF0:  DATA 74,20
01AF2:  DATA 46,6C
01AF4:  DATA 61,73
01AF6:  DATA 68,20
01AF8:  DATA 52,65
01AFA:  DATA 61,64
01AFC:  DATA 20,41
01AFE:  DATA 64,64
01B00:  DATA 72,65
01B02:  DATA 73,73
01B04:  DATA 0D,0A
01B06:  DATA 00,00
01B08:  DATA 52,65
01B0A:  DATA 61,64
01B0C:  DATA 20,44
01B0E:  DATA 61,74
01B10:  DATA 61,3A
01B12:  DATA 20,25
01B14:  DATA 30,32
01B16:  DATA 58,20
01B18:  DATA 25,30
01B1A:  DATA 32,58
01B1C:  DATA 20,25
01B1E:  DATA 30,32
01B20:  DATA 58,20
01B22:  DATA 25,30
01B24:  DATA 32,58
01B26:  DATA 0D,0A
01B28:  DATA 00,00
01B2A:  DATA 45,6E
01B2C:  DATA 64,20
01B2E:  DATA 46,6C
01B30:  DATA 61,73
01B32:  DATA 68,20
01B34:  DATA 52,65
01B36:  DATA 61,64
01B38:  DATA 20,41
01B3A:  DATA 64,64
01B3C:  DATA 72,65
01B3E:  DATA 73,73
01B40:  DATA 0D,0A
01B42:  DATA 00,00
01B44:  DATA 53,74
01B46:  DATA 61,72
01B48:  DATA 74,20
01B4A:  DATA 46,6C
01B4C:  DATA 61,73
01B4E:  DATA 68,20
01B50:  DATA 45,72
01B52:  DATA 61,73
01B54:  DATA 65,20
01B56:  DATA 61,6E
01B58:  DATA 64,20
01B5A:  DATA 52,65
01B5C:  DATA 73,65
01B5E:  DATA 74,0D
01B60:  DATA 0A,00
01B62:  DATA 45,6E
01B64:  DATA 64,20
01B66:  DATA 46,6C
01B68:  DATA 61,73
01B6A:  DATA 68,20
01B6C:  DATA 45,72
01B6E:  DATA 61,73
01B70:  DATA 65,20
01B72:  DATA 61,6E
01B74:  DATA 64,20
01B76:  DATA 52,65
01B78:  DATA 73,65
01B7A:  DATA 74,0D
01B7C:  DATA 0A,00
01B7E:  DATA 53,74
01B80:  DATA 61,72
01B82:  DATA 74,20
01B84:  DATA 46,6C
01B86:  DATA 61,73
01B88:  DATA 68,20
01B8A:  DATA 53,4D
01B8C:  DATA 46,20
01B8E:  DATA 43,6F
01B90:  DATA 70,79
01B92:  DATA 0D,0A
01B94:  DATA 00,00
01B96:  DATA 45,6E
01B98:  DATA 64,20
01B9A:  DATA 46,6C
01B9C:  DATA 61,73
01B9E:  DATA 68,20
01BA0:  DATA 53,4D
01BA2:  DATA 46,20
01BA4:  DATA 43,6F
01BA6:  DATA 70,79
01BA8:  DATA 0D,0A
01BAA:  DATA 00,00
01BAC:  DATA 53,74
01BAE:  DATA 61,72
01BB0:  DATA 74,20
01BB2:  DATA 46,6C
01BB4:  DATA 61,73
01BB6:  DATA 68,20
01BB8:  DATA 53,4D
01BBA:  DATA 46,20
01BBC:  DATA 52,65
01BBE:  DATA 61,64
01BC0:  DATA 0D,0A
01BC2:  DATA 00,00
01BC4:  DATA 09,41
01BC6:  DATA 64,64
01BC8:  DATA 72,65
01BCA:  DATA 73,73
01BCC:  DATA 20,20
01BCE:  DATA 3A,20
01BD0:  DATA 30,78
01BD2:  DATA 25,30
01BD4:  DATA 38,4C
01BD6:  DATA 58,0D
01BD8:  DATA 0A,00
01BDA:  DATA 09,50
01BDC:  DATA 61,63
01BDE:  DATA 6B,65
01BE0:  DATA 74,4E
01BE2:  DATA 75,6D
01BE4:  DATA 3A,20
01BE6:  DATA 30,78
01BE8:  DATA 25,30
01BEA:  DATA 34,4C
01BEC:  DATA 58,0D
01BEE:  DATA 0A,00
01BF0:  DATA 52,65
01BF2:  DATA 61,64
01BF4:  DATA 20,44
01BF6:  DATA 61,74
01BF8:  DATA 61,0D
01BFA:  DATA 0A,00
01BFC:  DATA 0D,0A
01BFE:  DATA 45,6E
01C00:  DATA 64,20
01C02:  DATA 46,6C
01C04:  DATA 61,73
01C06:  DATA 68,20
01C08:  DATA 53,4D
01C0A:  DATA 46,20
01C0C:  DATA 52,65
01C0E:  DATA 61,64
01C10:  DATA 0D,0A
01C12:  DATA 00,00
01C14:  DATA 53,74
01C16:  DATA 61,72
01C18:  DATA 74,20
01C1A:  DATA 46,6C
01C1C:  DATA 61,73
01C1E:  DATA 68,20
01C20:  DATA 53,4D
01C22:  DATA 46,20
01C24:  DATA 45,72
01C26:  DATA 61,73
01C28:  DATA 65,0D
01C2A:  DATA 0A,00
01C2C:  DATA 45,6E
01C2E:  DATA 64,20
01C30:  DATA 46,6C
01C32:  DATA 61,73
01C34:  DATA 68,20
01C36:  DATA 53,4D
01C38:  DATA 46,20
01C3A:  DATA 45,72
01C3C:  DATA 61,73
01C3E:  DATA 65,0D
01C40:  DATA 0A,00
01C42:  DATA 53,74
01C44:  DATA 61,72
01C46:  DATA 74,20
01C48:  DATA 46,6C
01C4A:  DATA 61,73
01C4C:  DATA 68,20
01C4E:  DATA 41,64
01C50:  DATA 64,72
01C52:  DATA 65,73
01C54:  DATA 73,20
01C56:  DATA 52,65
01C58:  DATA 73,65
01C5A:  DATA 74,0D
01C5C:  DATA 0A,00
01C5E:  DATA 45,6E
01C60:  DATA 64,20
01C62:  DATA 46,6C
01C64:  DATA 61,73
01C66:  DATA 68,20
01C68:  DATA 41,64
01C6A:  DATA 64,72
01C6C:  DATA 65,73
01C6E:  DATA 73,20
01C70:  DATA 52,65
01C72:  DATA 73,65
01C74:  DATA 74,0D
01C76:  DATA 0A,00
01C78:  DATA 53,4D
01C7A:  DATA 46,20
01C7C:  DATA 69,73
01C7E:  DATA 20,6E
01C80:  DATA 6F,74
01C82:  DATA 20,63
01C84:  DATA 6F,6E
01C86:  DATA 6E,65
01C88:  DATA 63,74
01C8A:  DATA 65,64
01C8C:  DATA 0D,0A
01C8E:  DATA 00,00
01C90:  DATA 53,74
01C92:  DATA 61,72
01C94:  DATA 74,20
01C96:  DATA 46,6C
01C98:  DATA 61,73
01C9A:  DATA 68,20
01C9C:  DATA 53,4D
01C9E:  DATA 46,20
01CA0:  DATA 52,65
01CA2:  DATA 61,64
01CA4:  DATA 20,46
01CA6:  DATA 6F,72
01CA8:  DATA 63,65
01CAA:  DATA 0D,0A
01CAC:  DATA 00,00
01CAE:  DATA 09,41
01CB0:  DATA 64,64
01CB2:  DATA 72,65
01CB4:  DATA 73,73
01CB6:  DATA 20,20
01CB8:  DATA 3A,20
01CBA:  DATA 30,78
01CBC:  DATA 25,30
01CBE:  DATA 38,4C
01CC0:  DATA 58,0D
01CC2:  DATA 0A,00
01CC4:  DATA 09,50
01CC6:  DATA 61,63
01CC8:  DATA 6B,65
01CCA:  DATA 74,4E
01CCC:  DATA 75,6D
01CCE:  DATA 3A,20
01CD0:  DATA 30,78
01CD2:  DATA 25,30
01CD4:  DATA 34,4C
01CD6:  DATA 58,0D
01CD8:  DATA 0A,00
01CDA:  DATA 72,65
01CDC:  DATA 61,64
01CDE:  DATA 20,64
01CE0:  DATA 61,74
01CE2:  DATA 61,0D
01CE4:  DATA 0A,00
01CE6:  DATA 0D,0A
01CE8:  DATA 45,6E
01CEA:  DATA 64,20
01CEC:  DATA 46,6C
01CEE:  DATA 61,73
01CF0:  DATA 68,20
01CF2:  DATA 53,4D
01CF4:  DATA 46,20
01CF6:  DATA 52,65
01CF8:  DATA 61,64
01CFA:  DATA 20,46
01CFC:  DATA 6F,72
01CFE:  DATA 63,65
01D00:  DATA 0D,0A
01D02:  DATA 00,00
01D04:  DATA 53,74
01D06:  DATA 61,72
01D08:  DATA 74,20
01D0A:  DATA 53,4D
01D0C:  DATA 46,20
01D0E:  DATA 45,72
01D10:  DATA 61,73
01D12:  DATA 65,20
01D14:  DATA 41,6C
01D16:  DATA 6C,0D
01D18:  DATA 0A,00
01D1A:  DATA 45,6E
01D1C:  DATA 64,20
01D1E:  DATA 53,4D
01D20:  DATA 46,20
01D22:  DATA 45,72
01D24:  DATA 61,73
01D26:  DATA 65,20
01D28:  DATA 41,6C
01D2A:  DATA 6C,0D
01D2C:  DATA 0A,00
01D2E:  DATA 53,74
01D30:  DATA 61,72
01D32:  DATA 74,20
01D34:  DATA 53,4D
01D36:  DATA 46,20
01D38:  DATA 52,65
01D3A:  DATA 73,65
01D3C:  DATA 74,0D
01D3E:  DATA 0A,00
01D40:  DATA 45,6E
01D42:  DATA 64,20
01D44:  DATA 53,4D
01D46:  DATA 46,20
01D48:  DATA 52,65
01D4A:  DATA 73,65
01D4C:  DATA 74,0D
01D4E:  DATA 0A,00
01D50:  DATA 0D,0A
01D52:  DATA 0D,0A
01D54:  DATA 0D,0A
01D56:  DATA 3D,3D
01D58:  DATA 3D,3D
01D5A:  DATA 3D,3D
01D5C:  DATA 3D,3D
01D5E:  DATA 3D,3D
01D60:  DATA 3D,3D
01D62:  DATA 3D,3D
01D64:  DATA 3D,3D
01D66:  DATA 3D,3D
01D68:  DATA 3D,3D
01D6A:  DATA 3D,3D
01D6C:  DATA 3D,3D
01D6E:  DATA 3D,3D
01D70:  DATA 3D,3D
01D72:  DATA 3D,3D
01D74:  DATA 3D,3D
01D76:  DATA 3D,3D
01D78:  DATA 3D,3D
01D7A:  DATA 3D,3D
01D7C:  DATA 3D,3D
01D7E:  DATA 3D,3D
01D80:  DATA 3D,3D
01D82:  DATA 3D,3D
01D84:  DATA 3D,3D
01D86:  DATA 3D,3D
01D88:  DATA 3D,3D
01D8A:  DATA 3D,3D
01D8C:  DATA 3D,3D
01D8E:  DATA 3D,3D
01D90:  DATA 3D,3D
01D92:  DATA 0D,0A
01D94:  DATA 00,00
01D96:  DATA 54,68
01D98:  DATA 69,73
01D9A:  DATA 20,69
01D9C:  DATA 73,20
01D9E:  DATA 4D,4F
01DA0:  DATA 4D,49
01DA2:  DATA 4A,49
01DA4:  DATA 20,43
01DA6:  DATA 49,47
01DA8:  DATA 53,20
01DAA:  DATA 50,49
01DAC:  DATA 43,20
01DAE:  DATA 42,42
01DB0:  DATA 4D,20
01DB2:  DATA 66,6F
01DB4:  DATA 72,20
01DB6:  DATA 4D,49
01DB8:  DATA 53,37
01DBA:  DATA 5F,42
01DBC:  DATA 42,4D
01DBE:  DATA 36,2E
01DC0:  DATA 0D,0A
01DC2:  DATA 00,00
01DC4:  DATA 4C,61
01DC6:  DATA 73,74
01DC8:  DATA 20,75
01DCA:  DATA 70,64
01DCC:  DATA 61,74
01DCE:  DATA 65,64
01DD0:  DATA 20,6F
01DD2:  DATA 6E,20
01DD4:  DATA 25,73
01DD6:  DATA 20,25
01DD8:  DATA 73,2C
01DDA:  DATA 20,62
01DDC:  DATA 79,20
01DDE:  DATA 49,6E
01DE0:  DATA 6F,75
01DE2:  DATA 65,2E
01DE4:  DATA 0D,0A
01DE6:  DATA 0D,0A
01DE8:  DATA 00,00
01DEA:  DATA 32,32
01DEC:  DATA 2D,53
01DEE:  DATA 65,70
01DF0:  DATA 2D,32
01DF2:  DATA 35,00
01DF4:  DATA 31,38
01DF6:  DATA 3A,34
01DF8:  DATA 32,3A
01DFA:  DATA 34,37
01DFC:  DATA 00,00
01DFE:  DATA 5F,5F
01E00:  DATA 5F,5F
01E02:  DATA 43,49
01E04:  DATA 47,53
01E06:  DATA 20,50
01E08:  DATA 49,43
01E0A:  DATA 20,53
01E0C:  DATA 74,61
01E0E:  DATA 72,74
01E10:  DATA 20,4F
01E12:  DATA 70,65
01E14:  DATA 72,61
01E16:  DATA 74,69
01E18:  DATA 6F,6E
01E1A:  DATA 5F,5F
01E1C:  DATA 5F,5F
01E1E:  DATA 5F,0D
01E20:  DATA 0A,0D
01E22:  DATA 0A,00
01E24:  DATA 77,61
01E26:  DATA 69,74
01E28:  DATA 69,6E
01E2A:  DATA 67,20
01E2C:  DATA 66,6F
01E2E:  DATA 72,20
01E30:  DATA 42,4F
01E32:  DATA 53,53
01E34:  DATA 20,50
01E36:  DATA 49,43
01E38:  DATA 20,63
01E3A:  DATA 6F,6D
01E3C:  DATA 6D,61
01E3E:  DATA 6E,64
01E40:  DATA 00,00
01E42:  DATA 0D,0A
01E44:  DATA 77,61
01E46:  DATA 69,74
01E48:  DATA 69,6E
01E4A:  DATA 67,20
01E4C:  DATA 66,6F
01E4E:  DATA 72,20
01E50:  DATA 42,4F
01E52:  DATA 53,53
01E54:  DATA 20,50
01E56:  DATA 49,43
01E58:  DATA 20,63
01E5A:  DATA 6F,6D
01E5C:  DATA 6D,61
01E5E:  DATA 6E,64
01E60:  DATA 00,00
01E62:  DATA 0D,0A
01E64:  DATA 0D,0A
01E66:  DATA 3D,3D
01E68:  DATA 3D,3D
01E6A:  DATA 3D,3D
01E6C:  DATA 0D,0A
01E6E:  DATA 0D,0A
01E70:  DATA 46,69
01E72:  DATA 6E,69
01E74:  DATA 73,68
01E76:  DATA 65,64
01E78:  DATA 20,70
01E7A:  DATA 72,6F
01E7C:  DATA 63,65
01E7E:  DATA 73,73
01E80:  DATA 2E,0D
01E82:  DATA 0A,57
01E84:  DATA 61,69
01E86:  DATA 74,20
01E88:  DATA 66,6F
01E8A:  DATA 72,20
01E8C:  DATA 42,4F
01E8E:  DATA 53,53
01E90:  DATA 20,50
01E92:  DATA 49,43
01E94:  DATA 20,74
01E96:  DATA 75,72
01E98:  DATA 6E,20
01E9A:  DATA 6F,66
01E9C:  DATA 66,20
01E9E:  DATA 6D,65
01EA0:  DATA 00,00
01EA2:  DATA 45,6E
01EA4:  DATA 64,20
01EA6:  DATA 6D,61
01EA8:  DATA 69,6E
01EAA:  DATA 0D,0A
01EAC:  DATA 00,00
*
01EDC:  TBLRD*+
01EDE:  MOVF   FF5,F
01EE0:  BTFSC  FD8.2
01EE2:  GOTO   1F10
01EE6:  MOVFF  FF6,A40
01EEA:  MOVFF  FF7,A41
01EEE:  MOVFF  FF8,A42
01EF2:  MOVF   FF5,W
01EF4:  BTFSS  FA6.6
01EF6:  GOTO   1EF4
01EFA:  MOVLB  E
01EFC:  MOVWF  xF9
01EFE:  MOVFF  A40,FF6
01F02:  MOVFF  A41,FF7
01F06:  MOVFF  A42,FF8
01F0A:  MOVLB  0
01F0C:  GOTO   1EDC
01F10:  RETURN 0
01F12:  TBLRD*+
01F14:  MOVFF  FF6,317
01F18:  MOVFF  FF7,318
01F1C:  MOVFF  FF8,319
01F20:  MOVF   FF5,W
01F22:  BTFSS  FA6.6
01F24:  GOTO   1F22
01F28:  MOVLB  E
01F2A:  MOVWF  xF9
01F2C:  MOVFF  317,FF6
01F30:  MOVFF  318,FF7
01F34:  MOVFF  319,FF8
01F38:  MOVLB  3
01F3A:  DECFSZ x16,F
01F3C:  BRA    1F42
01F3E:  BRA    1F48
01F40:  MOVLB  0
01F42:  MOVLB  0
01F44:  GOTO   1F12
01F48:  MOVLB  0
01F4A:  RETURN 0
*
02126:  MOVLB  A
02128:  BTFSS  x63.7
0212A:  BRA    2132
0212C:  MOVLB  0
0212E:  GOTO   2168
02132:  MOVLW  0F
02134:  MOVWF  00
02136:  SWAPF  x62,W
02138:  ANDWF  00,F
0213A:  MOVLW  0A
0213C:  SUBWF  00,W
0213E:  BTFSS  FD8.0
02140:  BRA    2148
02142:  MOVLB  0
02144:  GOTO   2152
02148:  MOVLW  30
0214A:  ADDWF  00,F
0214C:  MOVLB  0
0214E:  GOTO   215A
02152:  MOVLB  A
02154:  MOVF   x63,W
02156:  ADDWF  00,F
02158:  MOVLB  0
0215A:  MOVF   00,W
0215C:  BTFSS  FA6.6
0215E:  GOTO   215C
02162:  MOVLB  E
02164:  MOVWF  xF9
02166:  MOVLB  0
02168:  MOVLW  0F
0216A:  MOVLB  A
0216C:  ANDWF  x62,F
0216E:  MOVLW  0A
02170:  SUBWF  x62,W
02172:  BTFSS  FD8.0
02174:  BRA    217C
02176:  MOVLB  0
02178:  GOTO   2184
0217C:  MOVLW  30
0217E:  MOVLB  0
02180:  GOTO   218C
02184:  MOVLB  A
02186:  BCF    x63.7
02188:  MOVF   x63,W
0218A:  MOVLB  0
0218C:  MOVLB  A
0218E:  ADDWF  x62,F
02190:  MOVF   x62,W
02192:  MOVLB  0
02194:  BTFSS  FA6.6
02196:  GOTO   2194
0219A:  MOVLB  E
0219C:  MOVWF  xF9
0219E:  MOVLB  0
021A0:  RETURN 0
*
026BE:  MOVLB  B
026C0:  MOVF   xA9,W
026C2:  ANDLW  07
026C4:  MOVWF  00
026C6:  RRCF   xA9,W
026C8:  MOVWF  01
026CA:  RRCF   01,F
026CC:  RRCF   01,F
026CE:  MOVLW  1F
026D0:  ANDWF  01,F
026D2:  MOVF   01,W
026D4:  ADDWF  xAB,W
026D6:  MOVWF  FE9
026D8:  MOVLW  00
026DA:  ADDWFC xAC,W
026DC:  MOVWF  FEA
026DE:  CLRF   01
026E0:  INCF   01,F
026E2:  INCF   00,F
026E4:  MOVLB  0
026E6:  GOTO   26EC
026EA:  RLCF   01,F
026EC:  DECFSZ 00,F
026EE:  GOTO   26EA
026F2:  MOVLB  B
026F4:  MOVF   xAA,F
026F6:  BTFSS  FD8.2
026F8:  BRA    2700
026FA:  MOVLB  0
026FC:  GOTO   270A
02700:  MOVF   01,W
02702:  IORWF  FEF,F
02704:  MOVLB  0
02706:  GOTO   2710
0270A:  COMF   01,F
0270C:  MOVF   01,W
0270E:  ANDWF  FEF,F
02710:  RETURN 0
*
02B06:  TSTFSZ 01
02B08:  GOTO   2B16
02B0C:  TSTFSZ 02
02B0E:  GOTO   2B18
02B12:  GOTO   2B28
02B16:  INCF   02,F
02B18:  MOVFF  00,FEE
02B1C:  DECFSZ 01,F
02B1E:  GOTO   2B18
02B22:  DECFSZ 02,F
02B24:  GOTO   2B18
02B28:  RETURN 0
*
05D1C:  BTFSC  FD8.1
05D1E:  GOTO   5D2A
05D22:  MOVLW  0A
05D24:  MOVWF  FEA
05D26:  MOVLW  C0
05D28:  MOVWF  FE9
05D2A:  CLRF   00
05D2C:  CLRF   01
05D2E:  CLRF   02
05D30:  CLRF   03
05D32:  MOVLB  A
05D34:  CLRF   xC0
05D36:  CLRF   xC1
05D38:  CLRF   xC2
05D3A:  CLRF   xC3
05D3C:  MOVF   xBF,W
05D3E:  IORWF  xBE,W
05D40:  IORWF  xBD,W
05D42:  IORWF  xBC,W
05D44:  BTFSS  FD8.2
05D46:  BRA    5D4E
05D48:  MOVLB  0
05D4A:  GOTO   5DDE
05D4E:  MOVLB  0
05D50:  MOVLW  20
05D52:  MOVLB  A
05D54:  MOVWF  xC4
05D56:  MOVLB  0
05D58:  BCF    FD8.0
05D5A:  MOVLB  A
05D5C:  RLCF   xB8,F
05D5E:  RLCF   xB9,F
05D60:  RLCF   xBA,F
05D62:  RLCF   xBB,F
05D64:  RLCF   xC0,F
05D66:  RLCF   xC1,F
05D68:  RLCF   xC2,F
05D6A:  RLCF   xC3,F
05D6C:  MOVF   xBF,W
05D6E:  SUBWF  xC3,W
05D70:  BTFSC  FD8.2
05D72:  BRA    5D7A
05D74:  MOVLB  0
05D76:  GOTO   5D9C
05D7A:  MOVF   xBE,W
05D7C:  SUBWF  xC2,W
05D7E:  BTFSC  FD8.2
05D80:  BRA    5D88
05D82:  MOVLB  0
05D84:  GOTO   5D9C
05D88:  MOVF   xBD,W
05D8A:  SUBWF  xC1,W
05D8C:  BTFSC  FD8.2
05D8E:  BRA    5D96
05D90:  MOVLB  0
05D92:  GOTO   5D9C
05D96:  MOVF   xBC,W
05D98:  SUBWF  xC0,W
05D9A:  MOVLB  0
05D9C:  BTFSS  FD8.0
05D9E:  GOTO   5DC4
05DA2:  MOVLB  A
05DA4:  MOVF   xBC,W
05DA6:  SUBWF  xC0,F
05DA8:  MOVF   xBD,W
05DAA:  BTFSS  FD8.0
05DAC:  INCFSZ xBD,W
05DAE:  SUBWF  xC1,F
05DB0:  MOVF   xBE,W
05DB2:  BTFSS  FD8.0
05DB4:  INCFSZ xBE,W
05DB6:  SUBWF  xC2,F
05DB8:  MOVF   xBF,W
05DBA:  BTFSS  FD8.0
05DBC:  INCFSZ xBF,W
05DBE:  SUBWF  xC3,F
05DC0:  BSF    FD8.0
05DC2:  MOVLB  0
05DC4:  RLCF   00,F
05DC6:  RLCF   01,F
05DC8:  RLCF   02,F
05DCA:  RLCF   03,F
05DCC:  MOVLB  A
05DCE:  DECFSZ xC4,F
05DD0:  BRA    5DD6
05DD2:  BRA    5DDC
05DD4:  MOVLB  0
05DD6:  MOVLB  0
05DD8:  GOTO   5D58
05DDC:  MOVLB  0
05DDE:  MOVFF  AC0,FEF
05DE2:  MOVFF  AC1,FEC
05DE6:  MOVFF  AC2,FEC
05DEA:  MOVFF  AC3,FEC
05DEE:  MOVF   FED,F
05DF0:  MOVF   FED,F
05DF2:  MOVF   FED,F
05DF4:  RETURN 0
05DF6:  MOVF   FE9,W
05DF8:  MOVLB  2
05DFA:  MOVWF  xDF
05DFC:  MOVLW  3B
05DFE:  MOVWF  xE6
05E00:  MOVLW  9A
05E02:  MOVWF  xE5
05E04:  MOVLW  CA
05E06:  MOVWF  xE4
05E08:  CLRF   xE3
05E0A:  MOVLW  0A
05E0C:  MOVWF  xE1
05E0E:  MOVLB  0
05E10:  BSF    FD8.1
05E12:  MOVLW  02
05E14:  MOVWF  FEA
05E16:  MOVLW  DB
05E18:  MOVWF  FE9
05E1A:  MOVFF  2DE,ABB
05E1E:  MOVFF  2DD,ABA
05E22:  MOVFF  2DC,AB9
05E26:  MOVFF  2DB,AB8
05E2A:  MOVFF  2E6,ABF
05E2E:  MOVFF  2E5,ABE
05E32:  MOVFF  2E4,ABD
05E36:  MOVFF  2E3,ABC
05E3A:  CALL   5D1C
05E3E:  MOVF   01,W
05E40:  MOVF   00,F
05E42:  BTFSS  FD8.2
05E44:  GOTO   5E9C
05E48:  MOVLB  2
05E4A:  MOVF   xE1,W
05E4C:  XORLW  01
05E4E:  BTFSS  FD8.2
05E50:  BRA    5E58
05E52:  MOVLB  0
05E54:  GOTO   5E9C
05E58:  MOVF   xDF,W
05E5A:  BTFSS  FD8.2
05E5C:  BRA    5E64
05E5E:  MOVLB  0
05E60:  GOTO   5EA2
05E64:  ANDLW  0F
05E66:  SUBWF  xE1,W
05E68:  BTFSS  FD8.2
05E6A:  BRA    5E72
05E6C:  MOVLB  0
05E6E:  GOTO   5E7E
05E72:  BTFSS  FD8.0
05E74:  BRA    5E7C
05E76:  MOVLB  0
05E78:  GOTO   5EB4
05E7C:  MOVLB  0
05E7E:  MOVLB  2
05E80:  BTFSS  xDF.7
05E82:  BRA    5E8A
05E84:  MOVLB  0
05E86:  GOTO   5EB4
05E8A:  BTFSS  xDF.6
05E8C:  BRA    5E94
05E8E:  MOVLB  0
05E90:  GOTO   5EA2
05E94:  MOVLW  20
05E96:  MOVLB  0
05E98:  GOTO   5EA4
05E9C:  MOVLB  2
05E9E:  CLRF   xDF
05EA0:  MOVLB  0
05EA2:  MOVLW  30
05EA4:  ADDWF  00,F
05EA6:  MOVF   00,W
05EA8:  BTFSS  FA6.6
05EAA:  GOTO   5EA8
05EAE:  MOVLB  E
05EB0:  MOVWF  xF9
05EB2:  MOVLB  0
05EB4:  BCF    FD8.1
05EB6:  MOVFF  2E6,ABB
05EBA:  MOVFF  2E5,ABA
05EBE:  MOVFF  2E4,AB9
05EC2:  MOVFF  2E3,AB8
05EC6:  MOVLB  A
05EC8:  CLRF   xBF
05ECA:  CLRF   xBE
05ECC:  CLRF   xBD
05ECE:  MOVLW  0A
05ED0:  MOVWF  xBC
05ED2:  MOVLB  0
05ED4:  CALL   5D1C
05ED8:  MOVFF  03,2E6
05EDC:  MOVFF  02,2E5
05EE0:  MOVFF  01,2E4
05EE4:  MOVFF  00,2E3
05EE8:  MOVLB  2
05EEA:  DECFSZ xE1,F
05EEC:  BRA    5EF2
05EEE:  BRA    5EF8
05EF0:  MOVLB  0
05EF2:  MOVLB  0
05EF4:  GOTO   5E10
05EF8:  MOVLB  0
05EFA:  RETURN 0
*
07DD2:  MOVLB  A
07DD4:  MOVF   xAE,W
07DD6:  MULWF  xB0
07DD8:  MOVFF  FF3,01
07DDC:  MOVFF  FF4,00
07DE0:  MULWF  xB1
07DE2:  MOVF   FF3,W
07DE4:  ADDWF  00,F
07DE6:  MOVF   xAF,W
07DE8:  MULWF  xB0
07DEA:  MOVF   FF3,W
07DEC:  ADDWFC 00,W
07DEE:  MOVWF  02
07DF0:  MOVLB  0
07DF2:  RETURN 0
*
0D9B0:  MOVLB  3
0D9B2:  MOVF   x1D,W
0D9B4:  CLRF   01
0D9B6:  SUBWF  x1C,W
0D9B8:  BTFSS  FD8.0
0D9BA:  BRA    D9C2
0D9BC:  MOVLB  0
0D9BE:  GOTO   D9CC
0D9C2:  MOVF   x1C,W
0D9C4:  MOVWF  00
0D9C6:  MOVLB  0
0D9C8:  GOTO   D9F6
0D9CC:  CLRF   00
0D9CE:  MOVLW  08
0D9D0:  MOVLB  3
0D9D2:  MOVWF  x1E
0D9D4:  MOVLB  0
0D9D6:  MOVLB  3
0D9D8:  RLCF   x1C,F
0D9DA:  RLCF   00,F
0D9DC:  MOVF   x1D,W
0D9DE:  SUBWF  00,W
0D9E0:  BTFSC  FD8.0
0D9E2:  MOVWF  00
0D9E4:  RLCF   01,F
0D9E6:  DECFSZ x1E,F
0D9E8:  BRA    D9EE
0D9EA:  BRA    D9F4
0D9EC:  MOVLB  0
0D9EE:  MOVLB  0
0D9F0:  GOTO   D9D6
0D9F4:  MOVLB  0
0D9F6:  RETURN 0
0D9F8:  MOVF   01,W
0D9FA:  MOVFF  2DB,31C
0D9FE:  MOVLW  64
0DA00:  MOVLB  3
0DA02:  MOVWF  x1D
0DA04:  MOVLB  0
0DA06:  CALL   D9B0
0DA0A:  MOVFF  00,2DB
0DA0E:  MOVF   01,W
0DA10:  MOVLW  30
0DA12:  BTFSS  FD8.2
0DA14:  GOTO   DA38
0DA18:  MOVLB  2
0DA1A:  BTFSC  xDC.1
0DA1C:  BRA    DA24
0DA1E:  MOVLB  0
0DA20:  GOTO   DA52
0DA24:  BTFSS  xDC.3
0DA26:  BRA    DA2E
0DA28:  MOVLB  0
0DA2A:  GOTO   DA52
0DA2E:  BTFSC  xDC.4
0DA30:  MOVLW  20
0DA32:  MOVLB  0
0DA34:  GOTO   DA42
0DA38:  MOVLB  2
0DA3A:  BCF    xDC.3
0DA3C:  BCF    xDC.4
0DA3E:  BSF    xDC.0
0DA40:  MOVLB  0
0DA42:  ADDWF  01,F
0DA44:  MOVF   01,W
0DA46:  BTFSS  FA6.6
0DA48:  GOTO   DA46
0DA4C:  MOVLB  E
0DA4E:  MOVWF  xF9
0DA50:  MOVLB  0
0DA52:  MOVFF  2DB,31C
0DA56:  MOVLW  0A
0DA58:  MOVLB  3
0DA5A:  MOVWF  x1D
0DA5C:  MOVLB  0
0DA5E:  CALL   D9B0
0DA62:  MOVFF  00,2DB
0DA66:  MOVF   01,W
0DA68:  MOVLW  30
0DA6A:  BTFSS  FD8.2
0DA6C:  GOTO   DA8C
0DA70:  MOVLB  2
0DA72:  BTFSS  xDC.3
0DA74:  BRA    DA7C
0DA76:  MOVLB  0
0DA78:  GOTO   DA9C
0DA7C:  BTFSC  xDC.0
0DA7E:  BRA    DA86
0DA80:  MOVLB  0
0DA82:  GOTO   DA9C
0DA86:  BTFSC  xDC.4
0DA88:  MOVLW  20
0DA8A:  MOVLB  0
0DA8C:  ADDWF  01,F
0DA8E:  MOVF   01,W
0DA90:  BTFSS  FA6.6
0DA92:  GOTO   DA90
0DA96:  MOVLB  E
0DA98:  MOVWF  xF9
0DA9A:  MOVLB  0
0DA9C:  MOVLW  30
0DA9E:  MOVLB  2
0DAA0:  ADDWF  xDB,F
0DAA2:  MOVF   xDB,W
0DAA4:  MOVLB  0
0DAA6:  BTFSS  FA6.6
0DAA8:  GOTO   DAA6
0DAAC:  MOVLB  E
0DAAE:  MOVWF  xF9
0DAB0:  MOVLB  0
0DAB2:  RETURN 0
0DAB4:  MOVF   FE9,W
0DAB6:  MOVLB  2
0DAB8:  MOVWF  x39
0DABA:  BTFSC  x38.7
0DABC:  BRA    DAC4
0DABE:  MOVLB  0
0DAC0:  GOTO   DAE0
0DAC4:  DECF   x39,F
0DAC6:  BSF    x39.5
0DAC8:  COMF   x35,F
0DACA:  COMF   x36,F
0DACC:  COMF   x37,F
0DACE:  COMF   x38,F
0DAD0:  INCF   x35,F
0DAD2:  BTFSC  FD8.2
0DAD4:  INCF   x36,F
0DAD6:  BTFSC  FD8.2
0DAD8:  INCF   x37,F
0DADA:  BTFSC  FD8.2
0DADC:  INCF   x38,F
0DADE:  MOVLB  0
0DAE0:  MOVLW  3B
0DAE2:  MOVLB  2
0DAE4:  MOVWF  x40
0DAE6:  MOVLW  9A
0DAE8:  MOVWF  x3F
0DAEA:  MOVLW  CA
0DAEC:  MOVWF  x3E
0DAEE:  CLRF   x3D
0DAF0:  MOVLW  0A
0DAF2:  MOVWF  x3B
0DAF4:  MOVLB  0
0DAF6:  BSF    FD8.1
0DAF8:  MOVLW  02
0DAFA:  MOVWF  FEA
0DAFC:  MOVLW  35
0DAFE:  MOVWF  FE9
0DB00:  MOVFF  238,ABB
0DB04:  MOVFF  237,ABA
0DB08:  MOVFF  236,AB9
0DB0C:  MOVFF  235,AB8
0DB10:  MOVFF  240,ABF
0DB14:  MOVFF  23F,ABE
0DB18:  MOVFF  23E,ABD
0DB1C:  MOVFF  23D,ABC
0DB20:  CALL   5D1C
0DB24:  MOVF   01,W
0DB26:  MOVF   00,F
0DB28:  BTFSS  FD8.2
0DB2A:  GOTO   DB82
0DB2E:  MOVLB  2
0DB30:  MOVF   x3B,W
0DB32:  XORLW  01
0DB34:  BTFSS  FD8.2
0DB36:  BRA    DB3E
0DB38:  MOVLB  0
0DB3A:  GOTO   DB82
0DB3E:  MOVF   x39,W
0DB40:  BTFSS  FD8.2
0DB42:  BRA    DB4A
0DB44:  MOVLB  0
0DB46:  GOTO   DB8A
0DB4A:  ANDLW  0F
0DB4C:  SUBWF  x3B,W
0DB4E:  BTFSS  FD8.2
0DB50:  BRA    DB58
0DB52:  MOVLB  0
0DB54:  GOTO   DB64
0DB58:  BTFSS  FD8.0
0DB5A:  BRA    DB62
0DB5C:  MOVLB  0
0DB5E:  GOTO   DBF2
0DB62:  MOVLB  0
0DB64:  MOVLB  2
0DB66:  BTFSS  x39.7
0DB68:  BRA    DB70
0DB6A:  MOVLB  0
0DB6C:  GOTO   DBF2
0DB70:  BTFSS  x39.6
0DB72:  BRA    DB7A
0DB74:  MOVLB  0
0DB76:  GOTO   DB8A
0DB7A:  MOVLW  20
0DB7C:  MOVLB  0
0DB7E:  GOTO   DBE2
0DB82:  MOVLW  20
0DB84:  MOVLB  2
0DB86:  ANDWF  x39,F
0DB88:  MOVLB  0
0DB8A:  MOVLB  2
0DB8C:  BTFSC  x39.5
0DB8E:  BRA    DB96
0DB90:  MOVLB  0
0DB92:  GOTO   DBB4
0DB96:  BCF    x39.5
0DB98:  MOVF   00,W
0DB9A:  MOVWF  x39
0DB9C:  MOVLW  2D
0DB9E:  MOVLB  0
0DBA0:  BTFSS  FA6.6
0DBA2:  GOTO   DBA0
0DBA6:  MOVLB  E
0DBA8:  MOVWF  xF9
0DBAA:  MOVLB  2
0DBAC:  MOVF   x39,W
0DBAE:  MOVWF  00
0DBB0:  CLRF   x39
0DBB2:  MOVLB  0
0DBB4:  MOVLW  30
0DBB6:  MOVLB  2
0DBB8:  BTFSC  x39.5
0DBBA:  BRA    DBC2
0DBBC:  MOVLB  0
0DBBE:  GOTO   DBE2
0DBC2:  BCF    x39.5
0DBC4:  MOVF   00,W
0DBC6:  MOVWF  x39
0DBC8:  MOVLW  2D
0DBCA:  MOVLB  0
0DBCC:  BTFSS  FA6.6
0DBCE:  GOTO   DBCC
0DBD2:  MOVLB  E
0DBD4:  MOVWF  xF9
0DBD6:  MOVLB  2
0DBD8:  MOVF   x39,W
0DBDA:  MOVWF  00
0DBDC:  CLRF   x39
0DBDE:  MOVLW  30
0DBE0:  MOVLB  0
0DBE2:  ADDWF  00,F
0DBE4:  MOVF   00,W
0DBE6:  BTFSS  FA6.6
0DBE8:  GOTO   DBE6
0DBEC:  MOVLB  E
0DBEE:  MOVWF  xF9
0DBF0:  MOVLB  0
0DBF2:  BCF    FD8.1
0DBF4:  MOVFF  240,ABB
0DBF8:  MOVFF  23F,ABA
0DBFC:  MOVFF  23E,AB9
0DC00:  MOVFF  23D,AB8
0DC04:  MOVLB  A
0DC06:  CLRF   xBF
0DC08:  CLRF   xBE
0DC0A:  CLRF   xBD
0DC0C:  MOVLW  0A
0DC0E:  MOVWF  xBC
0DC10:  MOVLB  0
0DC12:  CALL   5D1C
0DC16:  MOVFF  03,240
0DC1A:  MOVFF  02,23F
0DC1E:  MOVFF  01,23E
0DC22:  MOVFF  00,23D
0DC26:  MOVLB  2
0DC28:  DECFSZ x3B,F
0DC2A:  BRA    DC30
0DC2C:  BRA    DC36
0DC2E:  MOVLB  0
0DC30:  MOVLB  0
0DC32:  GOTO   DAF6
0DC36:  MOVLB  0
0DC38:  RETURN 0
*
0E092:  MOVLW  20
0E094:  MOVLB  3
0E096:  BTFSS  x17.4
0E098:  MOVLW  30
0E09A:  MOVWF  x18
0E09C:  MOVFF  316,00
0E0A0:  BTFSC  00.7
0E0A2:  BRA    E0AA
0E0A4:  MOVLB  0
0E0A6:  GOTO   E0BC
0E0AA:  COMF   00,F
0E0AC:  INCF   00,F
0E0AE:  MOVFF  00,316
0E0B2:  MOVLW  2D
0E0B4:  MOVWF  x18
0E0B6:  BSF    x17.7
0E0B8:  BSF    x17.0
0E0BA:  MOVLB  0
0E0BC:  MOVF   01,W
0E0BE:  MOVFF  316,31C
0E0C2:  MOVLW  64
0E0C4:  MOVLB  3
0E0C6:  MOVWF  x1D
0E0C8:  MOVLB  0
0E0CA:  CALL   D9B0
0E0CE:  MOVFF  00,316
0E0D2:  MOVLW  30
0E0D4:  ADDWF  01,W
0E0D6:  MOVLB  3
0E0D8:  MOVWF  x19
0E0DA:  MOVFF  316,31C
0E0DE:  MOVLW  0A
0E0E0:  MOVWF  x1D
0E0E2:  MOVLB  0
0E0E4:  CALL   D9B0
0E0E8:  MOVLW  30
0E0EA:  ADDWF  00,W
0E0EC:  MOVLB  3
0E0EE:  MOVWF  x1B
0E0F0:  MOVLW  30
0E0F2:  ADDWF  01,W
0E0F4:  MOVWF  x1A
0E0F6:  MOVFF  318,00
0E0FA:  MOVLB  0
0E0FC:  MOVLW  30
0E0FE:  MOVLB  3
0E100:  SUBWF  x19,W
0E102:  BTFSS  FD8.2
0E104:  BRA    E10C
0E106:  MOVLB  0
0E108:  GOTO   E118
0E10C:  BSF    x17.1
0E10E:  BTFSC  x17.7
0E110:  BSF    x17.2
0E112:  MOVLB  0
0E114:  GOTO   E158
0E118:  MOVFF  318,319
0E11C:  MOVLW  20
0E11E:  MOVLB  3
0E120:  MOVWF  x18
0E122:  MOVLW  30
0E124:  SUBWF  x1A,W
0E126:  BTFSS  FD8.2
0E128:  BRA    E130
0E12A:  MOVLB  0
0E12C:  GOTO   E13C
0E130:  BSF    x17.0
0E132:  BTFSC  x17.7
0E134:  BSF    x17.1
0E136:  MOVLB  0
0E138:  GOTO   E158
0E13C:  BTFSC  FD8.2
0E13E:  BRA    E146
0E140:  MOVLB  3
0E142:  BSF    x17.0
0E144:  MOVLB  0
0E146:  BTFSS  FD8.2
0E148:  GOTO   E158
0E14C:  MOVFF  319,31A
0E150:  MOVLW  20
0E152:  MOVLB  3
0E154:  MOVWF  x19
0E156:  MOVLB  0
0E158:  MOVLB  3
0E15A:  BTFSS  x17.2
0E15C:  BRA    E164
0E15E:  MOVLB  0
0E160:  GOTO   E17E
0E164:  BTFSS  x17.1
0E166:  BRA    E16E
0E168:  MOVLB  0
0E16A:  GOTO   E190
0E16E:  BTFSS  x17.0
0E170:  BRA    E178
0E172:  MOVLB  0
0E174:  GOTO   E1A2
0E178:  MOVLB  0
0E17A:  GOTO   E1B4
0E17E:  MOVLB  3
0E180:  MOVF   x18,W
0E182:  MOVLB  0
0E184:  BTFSS  FA6.6
0E186:  GOTO   E184
0E18A:  MOVLB  E
0E18C:  MOVWF  xF9
0E18E:  MOVLB  0
0E190:  MOVLB  3
0E192:  MOVF   x19,W
0E194:  MOVLB  0
0E196:  BTFSS  FA6.6
0E198:  GOTO   E196
0E19C:  MOVLB  E
0E19E:  MOVWF  xF9
0E1A0:  MOVLB  0
0E1A2:  MOVLB  3
0E1A4:  MOVF   x1A,W
0E1A6:  MOVLB  0
0E1A8:  BTFSS  FA6.6
0E1AA:  GOTO   E1A8
0E1AE:  MOVLB  E
0E1B0:  MOVWF  xF9
0E1B2:  MOVLB  0
0E1B4:  MOVLB  3
0E1B6:  MOVF   x1B,W
0E1B8:  MOVLB  0
0E1BA:  BTFSS  FA6.6
0E1BC:  GOTO   E1BA
0E1C0:  MOVLB  E
0E1C2:  MOVWF  xF9
0E1C4:  MOVLB  0
0E1C6:  RETURN 0
.................... 
.................... #list
.................... 
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
*
01EAE:  MOVLW  0B
01EB0:  MOVWF  FEA
01EB2:  MOVLW  A3
01EB4:  MOVWF  FE9
01EB6:  MOVF   FEF,W
01EB8:  BTFSC  FD8.2
01EBA:  GOTO   1EDA
01EBE:  MOVLW  05
01EC0:  MOVWF  01
01EC2:  CLRF   00
01EC4:  DECFSZ 00,F
01EC6:  BRA    1EC4
01EC8:  DECFSZ 01,F
01ECA:  BRA    1EC2
01ECC:  MOVLW  2E
01ECE:  MOVWF  00
01ED0:  DECFSZ 00,F
01ED2:  BRA    1ED0
01ED4:  BRA    1ED6
01ED6:  DECFSZ FEF,F
01ED8:  BRA    1EBE
01EDA:  RETURN 0
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
*
001DA:  BTFSS  FA6.5
001DC:  GOTO   01DA
001E0:  MOVLB  F
001E2:  MOVF   x2F,W
001E4:  MOVWF  1B
001E6:  MOVLB  0
001E8:  MOVLB  F
001EA:  MOVF   x2A,W
001EC:  MOVWF  01
001EE:  BTFSC  1B.1
001F0:  BRA    01F8
001F2:  MOVLB  0
001F4:  GOTO   01FC
001F8:  BCF    x2F.4
001FA:  BSF    x2F.4
001FC:  MOVLB  0
001FE:  GOTO   0238 (RETURN)
*
052CA:  BTFSS  FA6.4
052CC:  GOTO   52CA
052D0:  MOVLB  F
052D2:  MOVWF  x29
052D4:  MOVLB  0
052D6:  GOTO   530C (RETURN)
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
*
0278E:  MOVLB  B
02790:  MOVF   xC6,W
02792:  SUBLW  08
02794:  BTFSS  FD8.2
02796:  BRA    279E
02798:  MOVLB  0
0279A:  GOTO   27B6
0279E:  MOVWF  xC8
027A0:  MOVLB  0
027A2:  MOVLB  B
027A4:  RLCF   xC5,F
027A6:  DECFSZ xC8,F
027A8:  BRA    27AE
027AA:  BRA    27B4
027AC:  MOVLB  0
027AE:  MOVLB  0
027B0:  GOTO   27A2
027B4:  MOVLB  0
027B6:  BSF    F92.1
027B8:  BCF    F92.0
027BA:  BCF    F92.3
027BC:  BCF    F89.3
027BE:  MOVFF  BC6,BC8
027C2:  MOVLB  B
027C4:  BTFSS  xC5.7
027C6:  BCF    F89.0
027C8:  BTFSC  xC5.7
027CA:  BSF    F89.0
027CC:  RLCF   xC5,F
027CE:  BSF    F89.3
027D0:  MOVLW  02
027D2:  MOVWF  xC9
027D4:  MOVLB  0
027D6:  MOVLB  B
027D8:  DECFSZ xC9,F
027DA:  BRA    27E0
027DC:  BRA    27E6
027DE:  MOVLB  0
027E0:  MOVLB  0
027E2:  GOTO   27D6
027E6:  RLCF   01,F
027E8:  BTFSS  F80.1
027EA:  BCF    01.0
027EC:  BTFSC  F80.1
027EE:  BSF    01.0
027F0:  BCF    F89.3
027F2:  MOVLB  0
027F4:  BRA    27F6
027F6:  MOVLB  B
027F8:  DECFSZ xC8,F
027FA:  BRA    2800
027FC:  BRA    2806
027FE:  MOVLB  0
02800:  MOVLB  0
02802:  GOTO   27C2
02806:  MOVLB  0
02808:  RETURN 0
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
*
02712:  MOVLB  B
02714:  MOVF   xC6,W
02716:  SUBLW  08
02718:  BTFSS  FD8.2
0271A:  BRA    2722
0271C:  MOVLB  0
0271E:  GOTO   273A
02722:  MOVWF  xC8
02724:  MOVLB  0
02726:  MOVLB  B
02728:  RLCF   xC5,F
0272A:  DECFSZ xC8,F
0272C:  BRA    2732
0272E:  BRA    2738
02730:  MOVLB  0
02732:  MOVLB  0
02734:  GOTO   2726
02738:  MOVLB  0
0273A:  BSF    F96.0
0273C:  BCF    F96.6
0273E:  BCF    F96.1
02740:  BCF    F8D.1
02742:  MOVFF  BC6,BC8
02746:  MOVLB  B
02748:  BTFSS  xC5.7
0274A:  BCF    F8D.6
0274C:  BTFSC  xC5.7
0274E:  BSF    F8D.6
02750:  RLCF   xC5,F
02752:  BSF    F8D.1
02754:  MOVLW  02
02756:  MOVWF  xC9
02758:  MOVLB  0
0275A:  MOVLB  B
0275C:  DECFSZ xC9,F
0275E:  BRA    2764
02760:  BRA    276A
02762:  MOVLB  0
02764:  MOVLB  0
02766:  GOTO   275A
0276A:  RLCF   01,F
0276C:  BTFSS  F84.0
0276E:  BCF    01.0
02770:  BTFSC  F84.0
02772:  BSF    01.0
02774:  BCF    F8D.1
02776:  MOVLB  0
02778:  BRA    277A
0277A:  MOVLB  B
0277C:  DECFSZ xC8,F
0277E:  BRA    2784
02780:  BRA    278A
02782:  MOVLB  0
02784:  MOVLB  0
02786:  GOTO   2746
0278A:  MOVLB  0
0278C:  RETURN 0
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
*
0202A:  MOVLB  A
0202C:  MOVF   x7E,W
0202E:  SUBLW  10
02030:  BTFSS  FD8.2
02032:  BRA    203A
02034:  MOVLB  0
02036:  GOTO   2054
0203A:  MOVWF  x80
0203C:  MOVLB  0
0203E:  MOVLB  A
02040:  RLCF   x7C,F
02042:  RLCF   x7D,F
02044:  DECFSZ x80,F
02046:  BRA    204C
02048:  BRA    2052
0204A:  MOVLB  0
0204C:  MOVLB  0
0204E:  GOTO   203E
02052:  MOVLB  0
02054:  BSF    F93.4
02056:  BCF    F93.5
02058:  BCF    F93.2
0205A:  BSF    F8A.2
0205C:  MOVFF  A7E,A80
02060:  MOVLB  A
02062:  BTFSS  x7D.7
02064:  BCF    F8A.5
02066:  BTFSC  x7D.7
02068:  BSF    F8A.5
0206A:  RLCF   x7C,F
0206C:  RLCF   x7D,F
0206E:  BCF    F8A.2
02070:  MOVLB  0
02072:  BRA    2074
02074:  BRA    2076
02076:  RLCF   01,F
02078:  RLCF   02,F
0207A:  BTFSS  F81.4
0207C:  BCF    01.0
0207E:  BTFSC  F81.4
02080:  BSF    01.0
02082:  BSF    F8A.2
02084:  NOP   
02086:  MOVLB  A
02088:  DECFSZ x80,F
0208A:  BRA    2090
0208C:  BRA    2096
0208E:  MOVLB  0
02090:  MOVLB  0
02092:  GOTO   2060
02096:  MOVLB  0
02098:  RETURN 0
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
*
023FE:  MOVLB  A
02400:  MOVF   x69,W
02402:  SUBLW  10
02404:  BTFSS  FD8.2
02406:  BRA    240E
02408:  MOVLB  0
0240A:  GOTO   2428
0240E:  MOVWF  x6B
02410:  MOVLB  0
02412:  MOVLB  A
02414:  RLCF   x67,F
02416:  RLCF   x68,F
02418:  DECFSZ x6B,F
0241A:  BRA    2420
0241C:  BRA    2426
0241E:  MOVLB  0
02420:  MOVLB  0
02422:  GOTO   2412
02426:  MOVLB  0
02428:  BCF    F95.4
0242A:  BCF    F95.5
0242C:  BSF    F8C.5
0242E:  MOVFF  A69,A6B
02432:  MOVLB  A
02434:  BTFSS  x68.7
02436:  BCF    F8C.4
02438:  BTFSC  x68.7
0243A:  BSF    F8C.4
0243C:  RLCF   x67,F
0243E:  RLCF   x68,F
02440:  BCF    F8C.5
02442:  MOVLW  04
02444:  MOVWF  x6C
02446:  MOVLB  0
02448:  MOVLB  A
0244A:  DECFSZ x6C,F
0244C:  BRA    2452
0244E:  BRA    2458
02450:  MOVLB  0
02452:  MOVLB  0
02454:  GOTO   2448
02458:  BSF    F8C.5
0245A:  NOP   
0245C:  DECFSZ x6B,F
0245E:  BRA    2464
02460:  BRA    246A
02462:  MOVLB  0
02464:  MOVLB  0
02466:  GOTO   2432
0246A:  MOVLB  0
0246C:  RETURN 0
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル2: ハードウェア抽象化層  
.................... #include "hal/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... 
.................... unsigned int32 get_current_msec();
.................... void set_current_msec(unsigned int32 msec);
.................... void add_current_msec(unsigned int32 msec);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "hal/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "hal/gpio.h"
.................... #ifndef GPIO_H
.................... #define GPIO_H
.................... 
.................... void gpio_init();
.................... void enable_negative_power();
.................... void disable_negative_power();
.................... void connect_port1();
.................... void disconnect_port1();
.................... void connect_port2();
.................... void disconnect_port2();
.................... 
.................... 
.................... // 
.................... void connect_negative_power1(int1 state);
.................... void connect_negative_power2(int1 state);
.................... #endif // GPIO_H
.................... 
.................... #include "device_driver/ad7490_driver.h"
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "device_driver/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル3: 基本ライブラリヘッダー（型定義・通信・ツール）
.................... #include "../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/tool/mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x06AA1FFF
.................... #define CIGS_ENVIRO_START_ADDRESS 0x06AA2000
.................... #define CIGS_ENVIRO_END_ADDRESS 0x06B41FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS 0x06B42000
.................... #define CIGS_IV1_HEADER_END_ADDRESS 0x06BE1FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS 0x06BE2000
.................... #define CIGS_IV1_DATA_END_ADDRESS 0x06FE2FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS 0x06FE3000
.................... #define CIGS_IV2_HEADER_END_ADDRESS 0x07082FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS 0x07083000
.................... #define CIGS_IV2_DATA_END_ADDRESS 0x07483FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... // レベル4: デバイスドライバヘッダー
.................... #include "../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/device/ad7490.h"
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // レベル5: 通信ライブラリヘッダー
.................... #include "../lib/communication/communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // レベル6: コア機能ヘッダー
.................... #include "domain/mmj_cigs_iv.h"
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFFFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE-1];
.................... 
....................     struct {
....................         unsigned int16 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int16 time_msec;
....................         meas_data_t env_data[2];
....................         meas_data_t iv_data[16];
.................... 
....................     }header;
....................     struct {
....................         meas_data_t iv_data[21];
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "domain/mmj_cigs_flash.h"
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "domain/mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル7: アプリケーションヘッダー
.................... #include "application/mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "application/mmj_cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_DEBUG 0xA3
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "application/mmj_cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... //==============================================================================
.................... // .cファイル統合（CCS C単一コンパイル単位）
.................... //==============================================================================
.................... 
.................... // ハードウェア層実装ファイル
.................... // 実装は各 .c からビルドするためヘッダーでの取り込みは不要。必要なら下記のように直下参照に修正。
.................... #include "hal/timer.c"
.................... #include "timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... 
.................... unsigned int32 get_current_msec();
.................... void set_current_msec(unsigned int32 msec);
.................... void add_current_msec(unsigned int32 msec);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... int8 subsec;
.................... 
.................... #INT_TIMER1
.................... void TIMER1_isr()
.................... {
....................    set_timer1(TIMER_ISR_10MSEC); 
*
0019A:  MOVLW  FE
0019C:  MOVWF  FCF
0019E:  MOVLW  A8
001A0:  MOVWF  FCE
001A2:  NOP   
....................    tick_10ms++;
001A4:  MOVLW  01
001A6:  ADDWF  1C,F
001A8:  BTFSC  FD8.0
001AA:  INCF   1D,F
001AC:  BTFSC  FD8.2
001AE:  INCF   1E,F
001B0:  BTFSC  FD8.2
001B2:  INCF   1F,F
001B4:  BCF    F9E.0
001B6:  GOTO   0074
.................... }
.................... 
.................... void timer_init()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
*
01F76:  MOVLW  BA
01F78:  MOVWF  FF6
01F7A:  MOVLW  01
01F7C:  MOVWF  FF7
01F7E:  MOVLW  00
01F80:  MOVWF  FF8
01F82:  CALL   1EDC
....................    clear_interrupt(INT_TIMER1);
01F86:  BCF    F9E.0
....................    tick_10ms = 0;
01F88:  CLRF   1F
01F8A:  CLRF   1E
01F8C:  CLRF   1D
01F8E:  CLRF   1C
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
01F90:  MOVLW  8F
01F92:  MOVWF  FCD
01F94:  CLRF   FAA
....................    set_timer1(TIMER_ISR_10MSEC); 
01F96:  MOVLW  FE
01F98:  MOVWF  FCF
01F9A:  MOVLW  A8
01F9C:  MOVWF  FCE
01F9E:  NOP   
....................    enable_interrupts(INT_TIMER1);   
01FA0:  BSF    F9D.0
....................    enable_interrupts(GLOBAL);
01FA2:  MOVLW  C0
01FA4:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
01FA6:  MOVLW  CE
01FA8:  MOVWF  FF6
01FAA:  MOVLW  01
01FAC:  MOVWF  FF7
01FAE:  MOVLW  00
01FB0:  MOVWF  FF8
01FB2:  CALL   1EDC
01FB6:  GOTO   107D2 (RETURN)
.................... }
.................... 
.................... void set_current_10msec(unsigned int32 new_10msec)
.................... {
....................    tick_10ms = new_10msec;
.................... }
.................... 
.................... unsigned int32 get_current_time_10ms()
.................... {
....................    return tick_10ms;
*
0A2D6:  MOVFF  1C,00
0A2DA:  MOVFF  1D,01
0A2DE:  MOVFF  1E,02
0A2E2:  MOVFF  1F,03
0A2E6:  RETURN 0
.................... }
.................... 
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return subsec;
*
03802:  MOVFF  187,00
03806:  CLRF   01
03808:  CLRF   02
0380A:  CLRF   03
0380C:  RETURN 0
.................... }
.................... 
.................... unsigned int16 get_current_msec()
.................... {
....................    // Assuming subsec is in deci-seconds (0.01 sec)
....................    return (subsec / 10); // Convert deci-seconds to milliseconds
.................... }
.................... 
.................... unsigned int16 get_current_day()
.................... {
....................    return day;
.................... }
.................... 
.................... 
.................... void add_current_msec(unsigned int32 add_msec)
.................... {
....................    subsec += add_msec; // Convert milliseconds to deci-seconds
.................... }
.................... 
.................... #include "hal/uart.c"
.................... #include "uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
00202:  GOTO   0206
00206:  GOTO   0210
0020A:  BTFSS  4B.0
0020C:  GOTO   0244
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
00210:  MOVF   4A,W
00212:  SUBLW  1F
00214:  BTFSS  FD8.0
00216:  GOTO   0244
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
0021A:  MOVF   4A,W
0021C:  INCF   4A,F
0021E:  ANDLW  1F
00220:  CLRF   03
00222:  ADDLW  2A
00224:  MOVWF  FE9
00226:  MOVLW  00
00228:  ADDWFC 03,W
0022A:  MOVWF  FEA
0022C:  MOVFF  FEA,BDC
00230:  MOVFF  FE9,BDB
00234:  GOTO   01DA
00238:  MOVFF  BDC,FEA
0023C:  MOVFF  BDB,FE9
00240:  MOVF   01,W
00242:  MOVWF  FEF
00244:  BCF    FA6.5
00246:  GOTO   0074
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
01F4C:  MOVLW  4A
01F4E:  MOVWF  FF6
01F50:  MOVLW  02
01F52:  MOVWF  FF7
01F54:  MOVLW  00
01F56:  MOVWF  FF8
01F58:  CALL   1EDC
....................    enable_interrupts(INT_RDA3);
01F5C:  BSF    F61.5
....................    enable_interrupts(GLOBAL);
01F5E:  MOVLW  C0
01F60:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
01F62:  MOVLW  5C
01F64:  MOVWF  FF6
01F66:  MOVLW  02
01F68:  MOVWF  FF7
01F6A:  MOVLW  00
01F6C:  MOVWF  FF8
01F6E:  CALL   1EDC
01F72:  GOTO   107CE (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
0528C:  MOVFF  227,03
05290:  MOVLB  2
05292:  MOVF   x26,W
05294:  MOVWF  FE9
05296:  MOVFF  03,FEA
0529A:  MOVFF  FEF,228
0529E:  MOVFF  225,FEA
052A2:  MOVFF  224,FE9
052A6:  CLRF   00
052A8:  CLRF   02
052AA:  MOVFF  228,01
052AE:  MOVLB  0
052B0:  CALL   2B06
....................    *receive_signal_size = 0;
052B4:  MOVFF  227,03
052B8:  MOVLB  2
052BA:  MOVF   x26,W
052BC:  MOVWF  FE9
052BE:  MOVFF  03,FEA
052C2:  CLRF   FEF
052C4:  MOVLB  0
052C6:  GOTO   1089A (RETURN)
.................... }
.................... // End of file
.................... 
.................... #include "hal/gpio.c"
.................... #include "mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "gpio.h"
.................... #ifndef GPIO_H
.................... #define GPIO_H
.................... 
.................... void gpio_init();
.................... void enable_negative_power();
.................... void disable_negative_power();
.................... void connect_port1();
.................... void disconnect_port1();
.................... void connect_port2();
.................... void disconnect_port2();
.................... 
.................... 
.................... // 
.................... void connect_negative_power1(int1 state);
.................... void connect_negative_power2(int1 state);
.................... #endif // GPIO_H
.................... 
.................... #include "../../lib/tool/types.h"
.................... #ifndef TYPES_H
.................... #define TYPES_H
.................... 
.................... #define bool int1
.................... 
.................... 
.................... 
.................... #endif // TYPES_H
.................... // End of types.h
.................... 
.................... 
.................... 
.................... void gpio_init() {
....................     enable_negative_power();
....................     disconnect_port1();
....................     disconnect_port2();
.................... }
.................... 
.................... void enable_negative_power() {
....................     output_low(EN_NPWR1);
.................... }
.................... 
.................... void connect_negative_power1(int1 state) {
....................     if (state) {
*
04D4E:  MOVLB  2
04D50:  MOVF   x24,F
04D52:  BTFSS  FD8.2
04D54:  BRA    4D5C
04D56:  MOVLB  0
04D58:  GOTO   4D68
04D5C:  MOVLB  0
....................         output_low(EN_NPWR1);
04D5E:  MOVLW  17
04D60:  MOVWF  F94
04D62:  BCF    F8B.7
....................     } else {
04D64:  GOTO   4D6E
....................         output_high(EN_NPWR1);
04D68:  MOVLW  17
04D6A:  MOVWF  F94
04D6C:  BSF    F8B.7
....................     }
04D6E:  GOTO   1082C (RETURN)
.................... }
.................... 
.................... void connect_negative_power2(int1 state) {
....................     if (state) {
....................         output_high(EN_NPWR2);
....................     } else {
....................         output_low(EN_NPWR2);
....................     }
.................... }
.................... 
.................... void connect_port1(){
....................     output_high(CONNECT_CIGS1);
*
04D3E:  MOVLW  17
04D40:  MOVWF  F94
04D42:  BSF    F8B.3
04D44:  RETURN 0
.................... }
.................... 
.................... void disconnect_port1(){
....................     output_low(CONNECT_CIGS1);
*
07DC2:  MOVLW  17
07DC4:  MOVWF  F94
07DC6:  BCF    F8B.3
07DC8:  RETURN 0
.................... }
.................... 
.................... void connect_port2(){
....................     output_high(CONNECT_CIGS2);
*
04D46:  MOVLW  17
04D48:  MOVWF  F94
04D4A:  BSF    F8B.5
04D4C:  RETURN 0
.................... }
.................... 
.................... void disconnect_port2(){
....................     output_low(CONNECT_CIGS2);
*
07DCA:  MOVLW  17
07DCC:  MOVWF  F94
07DCE:  BCF    F8B.5
07DD0:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "device_driver/ad7490_driver.c"
.................... #include "ad7490_driver.h"                          // 同じデバイスフォルダのヘッダー
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/ad7490.h"               // ADCデバイスライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void ad7490_init()
.................... {
....................     fprintf(PC, "AD7490 Initialize\r\n");
*
021A2:  MOVLW  68
021A4:  MOVWF  FF6
021A6:  MOVLW  02
021A8:  MOVWF  FF7
021AA:  MOVLW  00
021AC:  MOVWF  FF8
021AE:  CALL   1EDC
....................     output_high(ADC_CS); 
021B2:  MOVLW  FD
021B4:  MOVWF  F93
021B6:  BSF    F8A.1
....................     delay_ms(10); 
021B8:  MOVLW  0A
021BA:  MOVLB  B
021BC:  MOVWF  xA3
021BE:  MOVLB  0
021C0:  CALL   1EAE
....................     unsigned int16 readdata = ad7490_read(ADC_CIGS2_CURR);
021C4:  MOVLW  05
021C6:  MOVLB  A
021C8:  MOVWF  x75
021CA:  MOVLB  0
021CC:  CALL   209A
021D0:  MOVFF  02,225
021D4:  MOVFF  01,224
....................     delay_ms(1);
021D8:  MOVLW  01
021DA:  MOVLB  B
021DC:  MOVWF  xA3
021DE:  MOVLB  0
021E0:  CALL   1EAE
....................     fprintf(PC, "\t%04LX\r\n", readdata);
021E4:  MOVLW  09
021E6:  BTFSS  FA6.6
021E8:  GOTO   21E6
021EC:  MOVLB  E
021EE:  MOVWF  xF9
021F0:  MOVFF  225,A62
021F4:  MOVLW  37
021F6:  MOVLB  A
021F8:  MOVWF  x63
021FA:  MOVLB  0
021FC:  CALL   2126
02200:  MOVFF  224,A62
02204:  MOVLW  37
02206:  MOVLB  A
02208:  MOVWF  x63
0220A:  MOVLB  0
0220C:  CALL   2126
02210:  MOVLW  0D
02212:  BTFSS  FA6.6
02214:  GOTO   2212
02218:  MOVLB  E
0221A:  MOVWF  xF9
0221C:  MOVLW  0A
0221E:  MOVLB  0
02220:  BTFSS  FA6.6
02222:  GOTO   2220
02226:  MOVLB  E
02228:  MOVWF  xF9
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
0222A:  MOVLB  2
0222C:  INCFSZ x24,W
0222E:  BRA    2234
02230:  BRA    223A
02232:  MOVLB  0
02234:  MOVLB  0
02236:  GOTO   2252
0223A:  MOVLB  0
0223C:  MOVLB  2
0223E:  INCFSZ x25,W
02240:  BRA    2246
02242:  BRA    224C
02244:  MOVLB  0
02246:  MOVLB  0
02248:  GOTO   2252
0224C:  MOVLB  0
0224E:  GOTO   2272
02252:  MOVLB  2
02254:  MOVF   x24,F
02256:  BTFSC  FD8.2
02258:  BRA    2260
0225A:  MOVLB  0
0225C:  GOTO   2286
02260:  MOVLB  0
02262:  MOVLB  2
02264:  MOVF   x25,F
02266:  BTFSC  FD8.2
02268:  BRA    2270
0226A:  MOVLB  0
0226C:  GOTO   2286
02270:  MOVLB  0
....................         fprintf(PC, "\tConnect error!\r\n");
02272:  MOVLW  7C
02274:  MOVWF  FF6
02276:  MOVLW  02
02278:  MOVWF  FF7
0227A:  MOVLW  00
0227C:  MOVWF  FF8
0227E:  CALL   1EDC
....................     } else {
02282:  GOTO   2296
....................         fprintf(PC, "\tConnect successful\r\n");
02286:  MOVLW  8E
02288:  MOVWF  FF6
0228A:  MOVLW  02
0228C:  MOVWF  FF7
0228E:  MOVLW  00
02290:  MOVWF  FF8
02292:  CALL   1EDC
....................     }
....................     fprintf(PC, "\tComplete\r\n");
02296:  MOVLW  A4
02298:  MOVWF  FF6
0229A:  MOVLW  02
0229C:  MOVWF  FF7
0229E:  MOVLW  00
022A0:  MOVWF  FF8
022A2:  CALL   1EDC
022A6:  GOTO   107D6 (RETURN)
.................... }
.................... 
.................... unsigned int16 ad7490_read(int8 channel)
*
0209A:  MOVFF  A75,A7C
0209E:  GOTO   1FBA
020A2:  MOVFF  02,A77
020A6:  MOVFF  01,A76
.................... {   
....................     unsigned int16 cmd = ad7490_make_cmd(channel);
....................     // fprintf(PC, "\t[ADC] Command: %04LX\r\n", cmd);
....................     output_low(ADC_CS); 
020AA:  MOVLW  FD
020AC:  MOVWF  F93
020AE:  BCF    F8A.1
....................     delay_us(10); 
020B0:  MOVLW  0D
020B2:  MOVWF  00
020B4:  DECFSZ 00,F
020B6:  BRA    20B4
....................     spi_xfer(ADC_STREAM, cmd); 
020B8:  MOVFF  A77,A7D
020BC:  MOVFF  A76,A7C
020C0:  MOVLW  10
020C2:  MOVLB  A
020C4:  MOVWF  x7E
020C6:  MOVLW  01
020C8:  MOVWF  x7F
020CA:  MOVLB  0
020CC:  CALL   202A
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd);
....................     #endif
....................     output_high(ADC_CS); 
020D0:  MOVLW  FD
020D2:  MOVWF  F93
020D4:  BSF    F8A.1
....................     delay_us(10);
020D6:  MOVLW  0D
020D8:  MOVWF  00
020DA:  DECFSZ 00,F
020DC:  BRA    20DA
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
020DE:  MOVLW  FD
020E0:  MOVWF  F93
020E2:  BCF    F8A.1
....................     delay_us(10);
020E4:  MOVLW  0D
020E6:  MOVWF  00
020E8:  DECFSZ 00,F
020EA:  BRA    20E8
....................     unsigned int16 ans = spi_xfer(ADC_STREAM, 0x0000);
020EC:  MOVLB  A
020EE:  CLRF   x7D
020F0:  CLRF   x7C
020F2:  MOVLW  10
020F4:  MOVWF  x7E
020F6:  MOVLW  01
020F8:  MOVWF  x7F
020FA:  MOVLB  0
020FC:  CALL   202A
02100:  MOVFF  02,A79
02104:  MOVFF  01,A78
....................     output_high(ADC_CS); 
02108:  MOVLW  FD
0210A:  MOVWF  F93
0210C:  BSF    F8A.1
....................     unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
0210E:  MOVLB  A
02110:  MOVF   x78,W
02112:  MOVWF  x7A
02114:  MOVF   x79,W
02116:  ANDLW  0F
02118:  MOVWF  x7B
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata);
....................     #endif
....................     return readdata;
0211A:  MOVF   x7A,W
0211C:  MOVWF  01
0211E:  MOVF   x7B,W
02120:  MOVWF  02
02122:  MOVLB  0
02124:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "device_driver/mcp4901_driver.c"
.................... #include "mcp4901_driver.h"                        
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/mmj_cigs_config.h"             
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mcp4901.h"       
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // #define MCP4901_DEBUG
.................... 
.................... void mcp4901_init()
.................... {
....................     fprintf(PC, "MCP4901 Initialize\r\n");
*
024F2:  MOVLW  B0
024F4:  MOVWF  FF6
024F6:  MOVLW  02
024F8:  MOVWF  FF7
024FA:  MOVLW  00
024FC:  MOVWF  FF8
024FE:  CALL   1EDC
....................     output_high(DAC1_CS); 
02502:  MOVLW  3F
02504:  MOVWF  F95
02506:  BSF    F8C.7
....................     output_high(DAC2_CS); 
02508:  MOVLW  3F
0250A:  MOVWF  F95
0250C:  BSF    F8C.6
....................     delay_ms(10); 
0250E:  MOVLW  0A
02510:  MOVLB  B
02512:  MOVWF  xA3
02514:  MOVLB  0
02516:  CALL   1EAE
....................     mcp4901_1_write(10); 
0251A:  MOVLB  A
0251C:  CLRF   x64
0251E:  MOVLW  0A
02520:  MOVWF  x63
02522:  MOVLB  0
02524:  CALL   246E
....................     mcp4901_2_write(10); 
02528:  MOVLB  A
0252A:  CLRF   x64
0252C:  MOVLW  0A
0252E:  MOVWF  x63
02530:  MOVLB  0
02532:  CALL   24B0
....................     unsigned int16 readdata;
....................     readdata = ad7490_read(ADC_CIGS1_VREF); 
02536:  MOVLW  03
02538:  MOVLB  A
0253A:  MOVWF  x75
0253C:  MOVLB  0
0253E:  CALL   209A
02542:  MOVFF  02,225
02546:  MOVFF  01,224
....................     fprintf(PC, "%04LX\r\n", readdata);
0254A:  MOVFF  225,A62
0254E:  MOVLW  37
02550:  MOVLB  A
02552:  MOVWF  x63
02554:  MOVLB  0
02556:  CALL   2126
0255A:  MOVFF  224,A62
0255E:  MOVLW  37
02560:  MOVLB  A
02562:  MOVWF  x63
02564:  MOVLB  0
02566:  CALL   2126
0256A:  MOVLW  0D
0256C:  BTFSS  FA6.6
0256E:  GOTO   256C
02572:  MOVLB  E
02574:  MOVWF  xF9
02576:  MOVLW  0A
02578:  MOVLB  0
0257A:  BTFSS  FA6.6
0257C:  GOTO   257A
02580:  MOVLB  E
02582:  MOVWF  xF9
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
02584:  MOVLB  2
02586:  INCFSZ x24,W
02588:  BRA    258E
0258A:  BRA    2594
0258C:  MOVLB  0
0258E:  MOVLB  0
02590:  GOTO   25AC
02594:  MOVLB  0
02596:  MOVLB  2
02598:  INCFSZ x25,W
0259A:  BRA    25A0
0259C:  BRA    25A6
0259E:  MOVLB  0
025A0:  MOVLB  0
025A2:  GOTO   25AC
025A6:  MOVLB  0
025A8:  GOTO   25CC
025AC:  MOVLB  2
025AE:  MOVF   x24,F
025B0:  BTFSC  FD8.2
025B2:  BRA    25BA
025B4:  MOVLB  0
025B6:  GOTO   25E0
025BA:  MOVLB  0
025BC:  MOVLB  2
025BE:  MOVF   x25,F
025C0:  BTFSC  FD8.2
025C2:  BRA    25CA
025C4:  MOVLB  0
025C6:  GOTO   25E0
025CA:  MOVLB  0
....................         fprintf(PC, "\t[DAC Port 1] Connect error!\r\n");
025CC:  MOVLW  C6
025CE:  MOVWF  FF6
025D0:  MOVLW  02
025D2:  MOVWF  FF7
025D4:  MOVLW  00
025D6:  MOVWF  FF8
025D8:  CALL   1EDC
....................     } else {
025DC:  GOTO   25F0
....................         fprintf(PC, "\t[DAC Port 1] Connect successful\r\n");
025E0:  MOVLW  E6
025E2:  MOVWF  FF6
025E4:  MOVLW  02
025E6:  MOVWF  FF7
025E8:  MOVLW  00
025EA:  MOVWF  FF8
025EC:  CALL   1EDC
....................     }
....................     fprintf(PC, "%04LX\r\n", readdata);
025F0:  MOVFF  225,A62
025F4:  MOVLW  37
025F6:  MOVLB  A
025F8:  MOVWF  x63
025FA:  MOVLB  0
025FC:  CALL   2126
02600:  MOVFF  224,A62
02604:  MOVLW  37
02606:  MOVLB  A
02608:  MOVWF  x63
0260A:  MOVLB  0
0260C:  CALL   2126
02610:  MOVLW  0D
02612:  BTFSS  FA6.6
02614:  GOTO   2612
02618:  MOVLB  E
0261A:  MOVWF  xF9
0261C:  MOVLW  0A
0261E:  MOVLB  0
02620:  BTFSS  FA6.6
02622:  GOTO   2620
02626:  MOVLB  E
02628:  MOVWF  xF9
....................     readdata = ad7490_read(ADC_CIGS2_VREF); 
0262A:  MOVLW  07
0262C:  MOVLB  A
0262E:  MOVWF  x75
02630:  MOVLB  0
02632:  CALL   209A
02636:  MOVFF  02,225
0263A:  MOVFF  01,224
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
0263E:  MOVLB  2
02640:  INCFSZ x24,W
02642:  BRA    2648
02644:  BRA    264E
02646:  MOVLB  0
02648:  MOVLB  0
0264A:  GOTO   2666
0264E:  MOVLB  0
02650:  MOVLB  2
02652:  INCFSZ x25,W
02654:  BRA    265A
02656:  BRA    2660
02658:  MOVLB  0
0265A:  MOVLB  0
0265C:  GOTO   2666
02660:  MOVLB  0
02662:  GOTO   2686
02666:  MOVLB  2
02668:  MOVF   x24,F
0266A:  BTFSC  FD8.2
0266C:  BRA    2674
0266E:  MOVLB  0
02670:  GOTO   269A
02674:  MOVLB  0
02676:  MOVLB  2
02678:  MOVF   x25,F
0267A:  BTFSC  FD8.2
0267C:  BRA    2684
0267E:  MOVLB  0
02680:  GOTO   269A
02684:  MOVLB  0
....................         fprintf(PC, "\t[DAC Port 2] Connect error!\r\n");
02686:  MOVLW  0A
02688:  MOVWF  FF6
0268A:  MOVLW  03
0268C:  MOVWF  FF7
0268E:  MOVLW  00
02690:  MOVWF  FF8
02692:  CALL   1EDC
....................     } else {
02696:  GOTO   26AA
....................         fprintf(PC, "\t[DAC Port 2] Connect successful\r\n");
0269A:  MOVLW  2A
0269C:  MOVWF  FF6
0269E:  MOVLW  03
026A0:  MOVWF  FF7
026A2:  MOVLW  00
026A4:  MOVWF  FF8
026A6:  CALL   1EDC
....................     }
....................     fprintf(PC, "\tComplete\r\n");
026AA:  MOVLW  4E
026AC:  MOVWF  FF6
026AE:  MOVLW  03
026B0:  MOVWF  FF7
026B2:  MOVLW  00
026B4:  MOVWF  FF8
026B6:  CALL   1EDC
026BA:  GOTO   107DA (RETURN)
.................... }
.................... 
.................... 
.................... void mcp4901_1_write(unsigned int16 value)
*
0246E:  MOVFF  A64,A68
02472:  MOVFF  A63,A67
02476:  CALL   22AA
0247A:  MOVFF  02,A66
0247E:  MOVFF  01,A65
.................... {
....................     unsigned int16 cmd = mcp4901_make_cmd(value);
....................     #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................     #endif
....................     output_low(DAC1_CS); 
02482:  MOVLW  3F
02484:  MOVWF  F95
02486:  BCF    F8C.7
....................     delay_us(10); 
02488:  MOVLW  0D
0248A:  MOVWF  00
0248C:  DECFSZ 00,F
0248E:  BRA    248C
....................     spi_xfer(DAC_STREAM, cmd); 
02490:  MOVFF  A66,A68
02494:  MOVFF  A65,A67
02498:  MOVLW  10
0249A:  MOVLB  A
0249C:  MOVWF  x69
0249E:  MOVLW  01
024A0:  MOVWF  x6A
024A2:  MOVLB  0
024A4:  CALL   23FE
....................     output_high(DAC1_CS); 
024A8:  MOVLW  3F
024AA:  MOVWF  F95
024AC:  BSF    F8C.7
024AE:  RETURN 0
.................... }
.................... 
.................... void mcp4901_2_write(unsigned int16 value)
024B0:  MOVFF  A64,A68
024B4:  MOVFF  A63,A67
024B8:  CALL   22AA
024BC:  MOVFF  02,A66
024C0:  MOVFF  01,A65
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC2_CS); 
024C4:  MOVLW  3F
024C6:  MOVWF  F95
024C8:  BCF    F8C.6
....................    delay_us(100); 
024CA:  MOVLW  85
024CC:  MOVWF  00
024CE:  DECFSZ 00,F
024D0:  BRA    24CE
....................    spi_xfer(DAC_STREAM, cmd); 
024D2:  MOVFF  A66,A68
024D6:  MOVFF  A65,A67
024DA:  MOVLW  10
024DC:  MOVLB  A
024DE:  MOVWF  x69
024E0:  MOVLW  01
024E2:  MOVWF  x6A
024E4:  MOVLB  0
024E6:  CALL   23FE
....................    output_high(DAC2_CS); 
024EA:  MOVLW  3F
024EC:  MOVWF  F95
024EE:  BSF    F8C.6
024F0:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... 
.................... // ライブラリ実装ファイル
.................... #include "../lib/device/ad7490.c"
.................... // #include "ad7490.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 ad7490_readdata(unsigned int16 channel)
.................... {
....................     spi_xfer(ADC_STREAM, channel); // Dummy transfer to start communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC, "\t[ADC] <<< %04LX\r\n", channel);
....................     #endif
....................     unsigned int16 ans = spi_xfer(ADC_STREAM);
....................     return ans & 0x0FFF; //Conver LSB <--> MSB
.................... }
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     cmd.fields.reserved0 = 0; // Reserved bits
*
01FBA:  MOVLB  A
01FBC:  BCF    x7D.0
....................     cmd.fields.reserved1 = 0; // Reserved bits
01FBE:  BCF    x7D.1
....................     cmd.fields.reserved2 = 0; // Reserved bits
01FC0:  BCF    x7D.2
....................     cmd.fields.reserved3 = 0;
01FC2:  BCF    x7D.3
....................     cmd.fields.coding = 1; // Two's complement
01FC4:  BSF    x7D.4
....................     cmd.fields.range = 0; // Normal mode
01FC6:  BCF    x7D.5
....................     cmd.fields.weak_tri = 0; // Strong trigger
01FC8:  BCF    x7D.6
....................     cmd.fields.shadow = 0; // Direct access
01FCA:  BCF    x7D.7
....................     cmd.fields.pm0 = AD7490_PM_AUTO_STANDBY & 0b00000001; // Power mode bits
01FCC:  BSF    x7E.0
....................     cmd.fields.pm1 = (AD7490_PM_AUTO_STANDBY >> 1) & 0b00000001; // Power mode bits
01FCE:  BSF    x7E.1
....................     cmd.fields.add0 = (channel >> 0) & 0b00000001; // Channel address bits
01FD0:  MOVF   x7C,W
01FD2:  ANDLW  01
01FD4:  MOVWF  01
01FD6:  BCF    x7E.2
01FD8:  BTFSC  01.0
01FDA:  BSF    x7E.2
....................     cmd.fields.add1 = (channel >> 1) & 0b00000001; // Channel address bits
01FDC:  BCF    FD8.0
01FDE:  RRCF   x7C,W
01FE0:  ANDLW  01
01FE2:  MOVWF  01
01FE4:  BCF    x7E.3
01FE6:  BTFSC  01.0
01FE8:  BSF    x7E.3
....................     cmd.fields.add2 = (channel >> 2) & 0b00000001; // Channel address bits
01FEA:  RRCF   x7C,W
01FEC:  MOVWF  00
01FEE:  RRCF   00,F
01FF0:  MOVLW  3F
01FF2:  ANDWF  00,F
01FF4:  MOVF   00,W
01FF6:  ANDLW  01
01FF8:  MOVWF  01
01FFA:  BCF    x7E.4
01FFC:  BTFSC  01.0
01FFE:  BSF    x7E.4
....................     cmd.fields.add3 = (channel >> 3) & 0b00000001; // Channel address bits
02000:  RRCF   x7C,W
02002:  MOVWF  00
02004:  RRCF   00,F
02006:  RRCF   00,F
02008:  MOVLW  1F
0200A:  ANDWF  00,F
0200C:  MOVF   00,W
0200E:  ANDLW  01
02010:  MOVWF  01
02012:  BCF    x7E.5
02014:  BTFSC  01.0
02016:  BSF    x7E.5
....................     cmd.fields.seq = 0; // Random mode
02018:  BCF    x7E.6
....................     cmd.fields.write = 1; // Read operation
0201A:  BSF    x7E.7
.................... 
.................... 
....................     return cmd.value;
0201C:  MOVF   x7D,W
0201E:  MOVWF  01
02020:  MOVF   x7E,W
02022:  MOVWF  02
02024:  MOVLB  0
02026:  GOTO   20A2 (RETURN)
.................... }
.................... 
.................... #include "../lib/device/mcp4901.c"
.................... // #include "mcp4901.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value)
.................... {
....................    mcp4901_cmd_t cmd;
....................    cmd.fields.startbit = 0; // Start bit
*
022AA:  MOVLB  A
022AC:  BCF    x6A.7
....................    cmd.fields.buffer = 1; // Buffer used
022AE:  BSF    x6A.6
....................    cmd.fields.gain = 1; // Gain 1x
022B0:  BSF    x6A.5
....................    cmd.fields.shutdown = 1; // Normal operation
022B2:  BSF    x6A.4
....................    cmd.fields.data7 = (value >> 7) & 0x01;
022B4:  RRCF   x68,W
022B6:  MOVWF  x6C
022B8:  RRCF   x67,W
022BA:  MOVWF  x6B
022BC:  RRCF   x6C,F
022BE:  RRCF   x6B,F
022C0:  RRCF   x6C,F
022C2:  RRCF   x6B,F
022C4:  RRCF   x6C,F
022C6:  RRCF   x6B,F
022C8:  RRCF   x6C,F
022CA:  RRCF   x6B,F
022CC:  RRCF   x6C,F
022CE:  RRCF   x6B,F
022D0:  RRCF   x6C,F
022D2:  RRCF   x6B,F
022D4:  MOVLW  01
022D6:  ANDWF  x6C,F
022D8:  MOVF   x6B,W
022DA:  ANDLW  01
022DC:  MOVWF  00
022DE:  CLRF   03
022E0:  MOVF   00,W
022E2:  MOVWF  01
022E4:  BCF    x6A.3
022E6:  BTFSC  01.0
022E8:  BSF    x6A.3
....................    cmd.fields.data6 = (value >> 6) & 0x01;
022EA:  RRCF   x68,W
022EC:  MOVWF  x6C
022EE:  RRCF   x67,W
022F0:  MOVWF  x6B
022F2:  RRCF   x6C,F
022F4:  RRCF   x6B,F
022F6:  RRCF   x6C,F
022F8:  RRCF   x6B,F
022FA:  RRCF   x6C,F
022FC:  RRCF   x6B,F
022FE:  RRCF   x6C,F
02300:  RRCF   x6B,F
02302:  RRCF   x6C,F
02304:  RRCF   x6B,F
02306:  MOVLW  03
02308:  ANDWF  x6C,F
0230A:  MOVF   x6B,W
0230C:  ANDLW  01
0230E:  MOVWF  00
02310:  CLRF   03
02312:  MOVF   00,W
02314:  MOVWF  01
02316:  BCF    x6A.2
02318:  BTFSC  01.0
0231A:  BSF    x6A.2
....................    cmd.fields.data5 = (value >> 5) & 0x01;
0231C:  RRCF   x68,W
0231E:  MOVWF  x6C
02320:  RRCF   x67,W
02322:  MOVWF  x6B
02324:  RRCF   x6C,F
02326:  RRCF   x6B,F
02328:  RRCF   x6C,F
0232A:  RRCF   x6B,F
0232C:  RRCF   x6C,F
0232E:  RRCF   x6B,F
02330:  RRCF   x6C,F
02332:  RRCF   x6B,F
02334:  MOVLW  07
02336:  ANDWF  x6C,F
02338:  MOVF   x6B,W
0233A:  ANDLW  01
0233C:  MOVWF  00
0233E:  CLRF   03
02340:  MOVF   00,W
02342:  MOVWF  01
02344:  BCF    x6A.1
02346:  BTFSC  01.0
02348:  BSF    x6A.1
....................    cmd.fields.data4 = (value >> 4) & 0x01;
0234A:  RRCF   x68,W
0234C:  MOVWF  x6C
0234E:  RRCF   x67,W
02350:  MOVWF  x6B
02352:  RRCF   x6C,F
02354:  RRCF   x6B,F
02356:  RRCF   x6C,F
02358:  RRCF   x6B,F
0235A:  RRCF   x6C,F
0235C:  RRCF   x6B,F
0235E:  MOVLW  0F
02360:  ANDWF  x6C,F
02362:  MOVF   x6B,W
02364:  ANDLW  01
02366:  MOVWF  00
02368:  CLRF   03
0236A:  MOVF   00,W
0236C:  MOVWF  01
0236E:  BCF    x6A.0
02370:  BTFSC  01.0
02372:  BSF    x6A.0
....................    cmd.fields.data3 = (value >> 3) & 0x01;
02374:  RRCF   x68,W
02376:  MOVWF  x6C
02378:  RRCF   x67,W
0237A:  MOVWF  x6B
0237C:  RRCF   x6C,F
0237E:  RRCF   x6B,F
02380:  RRCF   x6C,F
02382:  RRCF   x6B,F
02384:  MOVLW  1F
02386:  ANDWF  x6C,F
02388:  MOVF   x6B,W
0238A:  ANDLW  01
0238C:  MOVWF  00
0238E:  CLRF   03
02390:  MOVF   00,W
02392:  MOVWF  01
02394:  BCF    x69.7
02396:  BTFSC  01.0
02398:  BSF    x69.7
....................    cmd.fields.data2 = (value >> 2) & 0x01;
0239A:  RRCF   x68,W
0239C:  MOVWF  x6C
0239E:  RRCF   x67,W
023A0:  MOVWF  x6B
023A2:  RRCF   x6C,F
023A4:  RRCF   x6B,F
023A6:  MOVLW  3F
023A8:  ANDWF  x6C,F
023AA:  MOVF   x6B,W
023AC:  ANDLW  01
023AE:  MOVWF  00
023B0:  CLRF   03
023B2:  MOVF   00,W
023B4:  MOVWF  01
023B6:  BCF    x69.6
023B8:  BTFSC  01.0
023BA:  BSF    x69.6
....................    cmd.fields.data1 = (value >> 1) & 0x01;
023BC:  BCF    FD8.0
023BE:  RRCF   x68,W
023C0:  MOVWF  x6C
023C2:  RRCF   x67,W
023C4:  MOVWF  x6B
023C6:  MOVF   x6B,W
023C8:  ANDLW  01
023CA:  MOVWF  00
023CC:  CLRF   03
023CE:  MOVF   00,W
023D0:  MOVWF  01
023D2:  BCF    x69.5
023D4:  BTFSC  01.0
023D6:  BSF    x69.5
....................    cmd.fields.data0 = value & 0x01; // LSB of the data
023D8:  MOVF   x67,W
023DA:  ANDLW  01
023DC:  MOVWF  00
023DE:  CLRF   03
023E0:  MOVF   00,W
023E2:  MOVWF  01
023E4:  BCF    x69.4
023E6:  BTFSC  01.0
023E8:  BSF    x69.4
....................    cmd.fields.reserved = 0; // Reserved bits
023EA:  BCF    x69.3
....................    cmd.fields.reserved2 = 0; // Reserved bits
023EC:  BCF    x69.2
....................    cmd.fields.reserved3 = 0; // Reserved bits
023EE:  BCF    x69.1
....................    cmd.fields.reserved4 = 0; // Reserved bits
023F0:  BCF    x69.0
.................... 
....................    return cmd.value;
023F2:  MOVF   x69,W
023F4:  MOVWF  01
023F6:  MOVF   x6A,W
023F8:  MOVWF  02
023FA:  MOVLB  0
023FC:  RETURN 0
.................... }
.................... 
.................... #include "../lib/device/mt25q.c"
.................... #include "mt25q.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
0380E:  MOVLB  B
03810:  MOVF   xA3,W
03812:  XORLW  00
03814:  MOVLB  0
03816:  BTFSC  FD8.2
03818:  GOTO   3828
0381C:  XORLW  01
0381E:  BTFSC  FD8.2
03820:  GOTO   3890
03824:  GOTO   38F8
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03828:  MOVLB  B
0382A:  CLRF   xAC
0382C:  CLRF   xAB
0382E:  MOVLB  0
03830:  MOVLB  B
03832:  MOVF   xAC,W
03834:  SUBWF  xAA,W
03836:  BTFSC  FD8.0
03838:  BRA    3840
0383A:  MOVLB  0
0383C:  GOTO   388C
03840:  MOVLB  0
03842:  BTFSS  FD8.2
03844:  GOTO   385A
03848:  MOVLB  B
0384A:  MOVF   xA9,W
0384C:  SUBWF  xAB,W
0384E:  BTFSS  FD8.0
03850:  BRA    3858
03852:  MOVLB  0
03854:  GOTO   388C
03858:  MOVLB  0
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
0385A:  MOVLB  B
0385C:  MOVF   xA7,W
0385E:  ADDWF  xAB,W
03860:  MOVWF  FE9
03862:  MOVF   xA8,W
03864:  ADDWFC xAC,W
03866:  MOVWF  FEA
03868:  MOVFF  FEF,BAF
0386C:  MOVFF  BAF,BC5
03870:  MOVLW  08
03872:  MOVWF  xC6
03874:  MOVLW  01
03876:  MOVWF  xC7
03878:  MOVLB  0
0387A:  CALL   2712
0387E:  MOVLB  B
03880:  INCF   xAB,F
03882:  BTFSC  FD8.2
03884:  INCF   xAC,F
03886:  MOVLB  0
03888:  GOTO   3830
....................          break;
0388C:  GOTO   38FC
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03890:  MOVLB  B
03892:  CLRF   xAE
03894:  CLRF   xAD
03896:  MOVLB  0
03898:  MOVLB  B
0389A:  MOVF   xAE,W
0389C:  SUBWF  xAA,W
0389E:  BTFSC  FD8.0
038A0:  BRA    38A8
038A2:  MOVLB  0
038A4:  GOTO   38F4
038A8:  MOVLB  0
038AA:  BTFSS  FD8.2
038AC:  GOTO   38C2
038B0:  MOVLB  B
038B2:  MOVF   xA9,W
038B4:  SUBWF  xAD,W
038B6:  BTFSS  FD8.0
038B8:  BRA    38C0
038BA:  MOVLB  0
038BC:  GOTO   38F4
038C0:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
038C2:  MOVLB  B
038C4:  MOVF   xA7,W
038C6:  ADDWF  xAD,W
038C8:  MOVWF  FE9
038CA:  MOVF   xA8,W
038CC:  ADDWFC xAE,W
038CE:  MOVWF  FEA
038D0:  MOVFF  FEF,BAF
038D4:  MOVFF  BAF,BC5
038D8:  MOVLW  08
038DA:  MOVWF  xC6
038DC:  MOVLW  01
038DE:  MOVWF  xC7
038E0:  MOVLB  0
038E2:  CALL   278E
038E6:  MOVLB  B
038E8:  INCF   xAD,F
038EA:  BTFSC  FD8.2
038EC:  INCF   xAE,F
038EE:  MOVLB  0
038F0:  GOTO   3898
....................          break;
038F4:  GOTO   38FC
....................          
....................       default:
....................          break;
038F8:  GOTO   38FC
....................    }
....................    return;
038FC:  RETURN 0
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount, int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
0280A:  MOVLB  B
0280C:  MOVF   xA9,W
0280E:  XORLW  00
02810:  MOVLB  0
02812:  BTFSC  FD8.2
02814:  GOTO   2824
02818:  XORLW  01
0281A:  BTFSC  FD8.2
0281C:  GOTO   292E
02820:  GOTO   2A38
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02824:  MOVLB  B
02826:  CLRF   xB8
02828:  CLRF   xB7
0282A:  MOVLB  0
0282C:  MOVLB  B
0282E:  MOVF   xB8,W
02830:  SUBWF  xB0,W
02832:  BTFSC  FD8.0
02834:  BRA    283C
02836:  MOVLB  0
02838:  GOTO   2888
0283C:  MOVLB  0
0283E:  BTFSS  FD8.2
02840:  GOTO   2856
02844:  MOVLB  B
02846:  MOVF   xAF,W
02848:  SUBWF  xB7,W
0284A:  BTFSS  FD8.0
0284C:  BRA    2854
0284E:  MOVLB  0
02850:  GOTO   2888
02854:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
02856:  MOVLB  B
02858:  MOVF   xAD,W
0285A:  ADDWF  xB7,W
0285C:  MOVWF  FE9
0285E:  MOVF   xAE,W
02860:  ADDWFC xB8,W
02862:  MOVWF  FEA
02864:  MOVFF  FEF,BC3
02868:  MOVFF  BC3,BC5
0286C:  MOVLW  08
0286E:  MOVWF  xC6
02870:  MOVLW  01
02872:  MOVWF  xC7
02874:  MOVLB  0
02876:  CALL   2712
0287A:  MOVLB  B
0287C:  INCF   xB7,F
0287E:  BTFSC  FD8.2
02880:  INCF   xB8,F
02882:  MOVLB  0
02884:  GOTO   282C
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
02888:  MOVLB  B
0288A:  CLRF   xBC
0288C:  CLRF   xBB
0288E:  CLRF   xBA
02890:  CLRF   xB9
02892:  MOVLB  0
02894:  MOVLB  B
02896:  MOVF   xBC,W
02898:  SUBWF  xB6,W
0289A:  BTFSC  FD8.0
0289C:  BRA    28A4
0289E:  MOVLB  0
028A0:  GOTO   292A
028A4:  MOVLB  0
028A6:  BTFSS  FD8.2
028A8:  GOTO   28EE
028AC:  MOVLB  B
028AE:  MOVF   xBB,W
028B0:  SUBWF  xB5,W
028B2:  BTFSC  FD8.0
028B4:  BRA    28BC
028B6:  MOVLB  0
028B8:  GOTO   292A
028BC:  MOVLB  0
028BE:  BTFSS  FD8.2
028C0:  GOTO   28EE
028C4:  MOVLB  B
028C6:  MOVF   xBA,W
028C8:  SUBWF  xB4,W
028CA:  BTFSC  FD8.0
028CC:  BRA    28D4
028CE:  MOVLB  0
028D0:  GOTO   292A
028D4:  MOVLB  0
028D6:  BTFSS  FD8.2
028D8:  GOTO   28EE
028DC:  MOVLB  B
028DE:  MOVF   xB3,W
028E0:  SUBWF  xB9,W
028E2:  BTFSS  FD8.0
028E4:  BRA    28EC
028E6:  MOVLB  0
028E8:  GOTO   292A
028EC:  MOVLB  0
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
028EE:  MOVLB  B
028F0:  MOVF   xB1,W
028F2:  ADDWF  xB9,W
028F4:  MOVWF  FE9
028F6:  MOVF   xB2,W
028F8:  ADDWFC xBA,W
028FA:  MOVWF  FEA
028FC:  MOVLW  02
028FE:  MOVWF  xC5
02900:  MOVLW  08
02902:  MOVWF  xC6
02904:  MOVLW  01
02906:  MOVWF  xC7
02908:  MOVLB  0
0290A:  CALL   2712
0290E:  MOVFF  01,FEF
02912:  MOVLW  01
02914:  MOVLB  B
02916:  ADDWF  xB9,F
02918:  BTFSC  FD8.0
0291A:  INCF   xBA,F
0291C:  BTFSC  FD8.2
0291E:  INCF   xBB,F
02920:  BTFSC  FD8.2
02922:  INCF   xBC,F
02924:  MOVLB  0
02926:  GOTO   2894
....................          break;
0292A:  GOTO   2A3C
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0292E:  MOVLB  B
02930:  CLRF   xBE
02932:  CLRF   xBD
02934:  MOVLB  0
02936:  MOVLB  B
02938:  MOVF   xBE,W
0293A:  SUBWF  xB0,W
0293C:  BTFSC  FD8.0
0293E:  BRA    2946
02940:  MOVLB  0
02942:  GOTO   2992
02946:  MOVLB  0
02948:  BTFSS  FD8.2
0294A:  GOTO   2960
0294E:  MOVLB  B
02950:  MOVF   xAF,W
02952:  SUBWF  xBD,W
02954:  BTFSS  FD8.0
02956:  BRA    295E
02958:  MOVLB  0
0295A:  GOTO   2992
0295E:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
02960:  MOVLB  B
02962:  MOVF   xAD,W
02964:  ADDWF  xBD,W
02966:  MOVWF  FE9
02968:  MOVF   xAE,W
0296A:  ADDWFC xBE,W
0296C:  MOVWF  FEA
0296E:  MOVFF  FEF,BC3
02972:  MOVFF  BC3,BC5
02976:  MOVLW  08
02978:  MOVWF  xC6
0297A:  MOVLW  01
0297C:  MOVWF  xC7
0297E:  MOVLB  0
02980:  CALL   278E
02984:  MOVLB  B
02986:  INCF   xBD,F
02988:  BTFSC  FD8.2
0298A:  INCF   xBE,F
0298C:  MOVLB  0
0298E:  GOTO   2936
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
02992:  MOVLB  B
02994:  CLRF   xC2
02996:  CLRF   xC1
02998:  CLRF   xC0
0299A:  CLRF   xBF
0299C:  MOVLB  0
0299E:  MOVLB  B
029A0:  MOVF   xC2,W
029A2:  SUBWF  xB6,W
029A4:  BTFSC  FD8.0
029A6:  BRA    29AE
029A8:  MOVLB  0
029AA:  GOTO   2A34
029AE:  MOVLB  0
029B0:  BTFSS  FD8.2
029B2:  GOTO   29F8
029B6:  MOVLB  B
029B8:  MOVF   xC1,W
029BA:  SUBWF  xB5,W
029BC:  BTFSC  FD8.0
029BE:  BRA    29C6
029C0:  MOVLB  0
029C2:  GOTO   2A34
029C6:  MOVLB  0
029C8:  BTFSS  FD8.2
029CA:  GOTO   29F8
029CE:  MOVLB  B
029D0:  MOVF   xC0,W
029D2:  SUBWF  xB4,W
029D4:  BTFSC  FD8.0
029D6:  BRA    29DE
029D8:  MOVLB  0
029DA:  GOTO   2A34
029DE:  MOVLB  0
029E0:  BTFSS  FD8.2
029E2:  GOTO   29F8
029E6:  MOVLB  B
029E8:  MOVF   xB3,W
029EA:  SUBWF  xBF,W
029EC:  BTFSS  FD8.0
029EE:  BRA    29F6
029F0:  MOVLB  0
029F2:  GOTO   2A34
029F6:  MOVLB  0
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
029F8:  MOVLB  B
029FA:  MOVF   xB1,W
029FC:  ADDWF  xBF,W
029FE:  MOVWF  FE9
02A00:  MOVF   xB2,W
02A02:  ADDWFC xC0,W
02A04:  MOVWF  FEA
02A06:  MOVLW  01
02A08:  MOVWF  xC5
02A0A:  MOVLW  08
02A0C:  MOVWF  xC6
02A0E:  MOVLW  01
02A10:  MOVWF  xC7
02A12:  MOVLB  0
02A14:  CALL   278E
02A18:  MOVFF  01,FEF
02A1C:  MOVLW  01
02A1E:  MOVLB  B
02A20:  ADDWF  xBF,F
02A22:  BTFSC  FD8.0
02A24:  INCF   xC0,F
02A26:  BTFSC  FD8.2
02A28:  INCF   xC1,F
02A2A:  BTFSC  FD8.2
02A2C:  INCF   xC2,F
02A2E:  MOVLB  0
02A30:  GOTO   299E
....................          break;
02A34:  GOTO   2A3C
....................    
....................          
....................       default:
....................          break;
02A38:  GOTO   2A3C
....................    }
....................    return;
02A3C:  RETURN 0
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, int8 *cmd_data, unsigned int8 cmd_amount, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
038FE:  MOVLB  B
03900:  MOVF   xA3,W
03902:  XORLW  00
03904:  MOVLB  0
03906:  BTFSC  FD8.2
03908:  GOTO   3918
0390C:  XORLW  01
0390E:  BTFSC  FD8.2
03910:  GOTO   39C6
03914:  GOTO   3A74
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
03918:  MOVLB  B
0391A:  CLRF   xAE
0391C:  MOVLB  0
0391E:  MOVLB  B
03920:  MOVF   xA9,W
03922:  SUBWF  xAE,W
03924:  BTFSS  FD8.0
03926:  BRA    392E
03928:  MOVLB  0
0392A:  GOTO   395E
0392E:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
03930:  MOVLB  B
03932:  MOVF   xAE,W
03934:  ADDWF  xA7,W
03936:  MOVWF  FE9
03938:  MOVLW  00
0393A:  ADDWFC xA8,W
0393C:  MOVWF  FEA
0393E:  MOVFF  FEF,BB4
03942:  MOVFF  BB4,BC5
03946:  MOVLW  08
03948:  MOVWF  xC6
0394A:  MOVLW  01
0394C:  MOVWF  xC7
0394E:  MOVLB  0
03950:  CALL   2712
03954:  MOVLB  B
03956:  INCF   xAE,F
03958:  MOVLB  0
0395A:  GOTO   391E
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0395E:  MOVLB  B
03960:  CLRF   xB0
03962:  CLRF   xAF
03964:  MOVLB  0
03966:  MOVLB  B
03968:  MOVF   xB0,W
0396A:  SUBWF  xAD,W
0396C:  BTFSC  FD8.0
0396E:  BRA    3976
03970:  MOVLB  0
03972:  GOTO   39C2
03976:  MOVLB  0
03978:  BTFSS  FD8.2
0397A:  GOTO   3990
0397E:  MOVLB  B
03980:  MOVF   xAC,W
03982:  SUBWF  xAF,W
03984:  BTFSS  FD8.0
03986:  BRA    398E
03988:  MOVLB  0
0398A:  GOTO   39C2
0398E:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
03990:  MOVLB  B
03992:  MOVF   xAA,W
03994:  ADDWF  xAF,W
03996:  MOVWF  FE9
03998:  MOVF   xAB,W
0399A:  ADDWFC xB0,W
0399C:  MOVWF  FEA
0399E:  MOVFF  FEF,BB4
039A2:  MOVFF  BB4,BC5
039A6:  MOVLW  08
039A8:  MOVWF  xC6
039AA:  MOVLW  01
039AC:  MOVWF  xC7
039AE:  MOVLB  0
039B0:  CALL   2712
039B4:  MOVLB  B
039B6:  INCF   xAF,F
039B8:  BTFSC  FD8.2
039BA:  INCF   xB0,F
039BC:  MOVLB  0
039BE:  GOTO   3966
....................          break;
039C2:  GOTO   3A78
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
039C6:  MOVLB  B
039C8:  CLRF   xB1
039CA:  MOVLB  0
039CC:  MOVLB  B
039CE:  MOVF   xA9,W
039D0:  SUBWF  xB1,W
039D2:  BTFSS  FD8.0
039D4:  BRA    39DC
039D6:  MOVLB  0
039D8:  GOTO   3A0C
039DC:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
039DE:  MOVLB  B
039E0:  MOVF   xB1,W
039E2:  ADDWF  xA7,W
039E4:  MOVWF  FE9
039E6:  MOVLW  00
039E8:  ADDWFC xA8,W
039EA:  MOVWF  FEA
039EC:  MOVFF  FEF,BB4
039F0:  MOVFF  BB4,BC5
039F4:  MOVLW  08
039F6:  MOVWF  xC6
039F8:  MOVLW  01
039FA:  MOVWF  xC7
039FC:  MOVLB  0
039FE:  CALL   278E
03A02:  MOVLB  B
03A04:  INCF   xB1,F
03A06:  MOVLB  0
03A08:  GOTO   39CC
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03A0C:  MOVLB  B
03A0E:  CLRF   xB3
03A10:  CLRF   xB2
03A12:  MOVLB  0
03A14:  MOVLB  B
03A16:  MOVF   xB3,W
03A18:  SUBWF  xAD,W
03A1A:  BTFSC  FD8.0
03A1C:  BRA    3A24
03A1E:  MOVLB  0
03A20:  GOTO   3A70
03A24:  MOVLB  0
03A26:  BTFSS  FD8.2
03A28:  GOTO   3A3E
03A2C:  MOVLB  B
03A2E:  MOVF   xAC,W
03A30:  SUBWF  xB2,W
03A32:  BTFSS  FD8.0
03A34:  BRA    3A3C
03A36:  MOVLB  0
03A38:  GOTO   3A70
03A3C:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
03A3E:  MOVLB  B
03A40:  MOVF   xAA,W
03A42:  ADDWF  xB2,W
03A44:  MOVWF  FE9
03A46:  MOVF   xAB,W
03A48:  ADDWFC xB3,W
03A4A:  MOVWF  FEA
03A4C:  MOVFF  FEF,BB4
03A50:  MOVFF  BB4,BC5
03A54:  MOVLW  08
03A56:  MOVWF  xC6
03A58:  MOVLW  01
03A5A:  MOVWF  xC7
03A5C:  MOVLB  0
03A5E:  CALL   278E
03A62:  MOVLB  B
03A64:  INCF   xB2,F
03A66:  BTFSC  FD8.2
03A68:  INCF   xB3,F
03A6A:  MOVLB  0
03A6C:  GOTO   3A14
....................          break;
03A70:  GOTO   3A78
....................          
....................       default:
....................          break;
03A74:  GOTO   3A78
....................    }
....................    return;
03A78:  RETURN 0
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
064FE:  MOVFF  33A,BA9
06502:  MOVLW  01
06504:  MOVLB  B
06506:  MOVWF  xAA
06508:  MOVLW  0F
0650A:  MOVWF  xAC
0650C:  MOVLW  89
0650E:  MOVWF  xAB
06510:  MOVLB  0
06512:  CALL   26BE
06516:  MOVFF  33A,BA9
0651A:  MOVLB  B
0651C:  CLRF   xAA
0651E:  MOVLW  0F
06520:  MOVWF  xAC
06522:  MOVLW  92
06524:  MOVWF  xAB
06526:  MOVLB  0
06528:  CALL   26BE
0652C:  RETURN 0
.................... }
....................  
.................... int8 status_register(Flash flash_stream){
*
03A7A:  MOVLW  05
03A7C:  MOVLB  B
03A7E:  MOVWF  xA7
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
03A80:  MOVFF  BA5,BA9
03A84:  CLRF   xAA
03A86:  MOVLW  0F
03A88:  MOVWF  xAC
03A8A:  MOVLW  89
03A8C:  MOVWF  xAB
03A8E:  MOVLB  0
03A90:  CALL   26BE
03A94:  MOVFF  BA5,BA9
03A98:  MOVLB  B
03A9A:  CLRF   xAA
03A9C:  MOVLW  0F
03A9E:  MOVWF  xAC
03AA0:  MOVLW  92
03AA2:  MOVWF  xAB
03AA4:  MOVLB  0
03AA6:  CALL   26BE
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
03AAA:  MOVFF  BA6,BAC
03AAE:  MOVFF  BA5,BAB
03AB2:  MOVFF  BA4,BAA
03AB6:  MOVFF  BA3,BA9
03ABA:  MOVLW  0B
03ABC:  MOVLB  B
03ABE:  MOVWF  xAE
03AC0:  MOVLW  A7
03AC2:  MOVWF  xAD
03AC4:  CLRF   xB0
03AC6:  MOVLW  01
03AC8:  MOVWF  xAF
03ACA:  MOVLW  0B
03ACC:  MOVWF  xB2
03ACE:  MOVLW  A8
03AD0:  MOVWF  xB1
03AD2:  CLRF   xB6
03AD4:  CLRF   xB5
03AD6:  CLRF   xB4
03AD8:  MOVLW  01
03ADA:  MOVWF  xB3
03ADC:  MOVLB  0
03ADE:  CALL   280A
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
03AE2:  MOVFF  BA5,BA9
03AE6:  MOVLW  01
03AE8:  MOVLB  B
03AEA:  MOVWF  xAA
03AEC:  MOVLW  0F
03AEE:  MOVWF  xAC
03AF0:  MOVLW  89
03AF2:  MOVWF  xAB
03AF4:  MOVLB  0
03AF6:  CALL   26BE
03AFA:  MOVFF  BA5,BA9
03AFE:  MOVLB  B
03B00:  CLRF   xAA
03B02:  MOVLW  0F
03B04:  MOVWF  xAC
03B06:  MOVLW  92
03B08:  MOVWF  xAB
03B0A:  MOVLB  0
03B0C:  CALL   26BE
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
03B10:  MOVLB  B
03B12:  MOVF   xA8,W
03B14:  MOVWF  01
03B16:  MOVLB  0
03B18:  RETURN 0
.................... }
.................... 
.................... //
.................... //->success:True,fail:false 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 16);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == MANUFACTURER_ID_MICRON){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
....................  
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
03FFE:  MOVLB  B
04000:  MOVF   x8A,F
04002:  BTFSC  FD8.2
04004:  BRA    400C
04006:  MOVLB  0
04008:  GOTO   4162
0400C:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
0400E:  MOVLW  06
04010:  MOVLB  B
04012:  MOVWF  x91
04014:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
04016:  MOVLW  D8
04018:  MOVLB  B
0401A:  MOVWF  x92
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0401C:  MOVFF  B8F,B9E
04020:  MOVFF  B90,B9F
04024:  CLRF   xA0
04026:  CLRF   xA1
04028:  MOVF   x9E,W
0402A:  MOVWF  00
0402C:  CLRF   01
0402E:  CLRF   02
04030:  CLRF   03
04032:  MOVFF  00,B93
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
04036:  MOVFF  B8E,B9E
0403A:  MOVFF  B8F,B9F
0403E:  MOVFF  B90,BA0
04042:  CLRF   xA1
04044:  MOVF   x9E,W
04046:  MOVWF  00
04048:  CLRF   01
0404A:  CLRF   02
0404C:  CLRF   03
0404E:  MOVFF  00,B94
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
04052:  MOVF   x8D,W
04054:  MOVWF  00
04056:  CLRF   01
04058:  CLRF   02
0405A:  CLRF   03
0405C:  MOVFF  00,B95
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04060:  MOVFF  B8B,BA9
04064:  CLRF   xAA
04066:  MOVLW  0F
04068:  MOVWF  xAC
0406A:  MOVLW  89
0406C:  MOVWF  xAB
0406E:  MOVLB  0
04070:  CALL   26BE
04074:  MOVFF  B8B,BA9
04078:  MOVLB  B
0407A:  CLRF   xAA
0407C:  MOVLW  0F
0407E:  MOVWF  xAC
04080:  MOVLW  92
04082:  MOVWF  xAB
04084:  MOVLB  0
04086:  CALL   26BE
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0408A:  MOVFF  B8C,BA6
0408E:  MOVFF  B8B,BA5
04092:  MOVFF  B8A,BA4
04096:  MOVFF  B89,BA3
0409A:  MOVLW  0B
0409C:  MOVLB  B
0409E:  MOVWF  xA8
040A0:  MOVLW  91
040A2:  MOVWF  xA7
040A4:  CLRF   xAA
040A6:  MOVLW  01
040A8:  MOVWF  xA9
040AA:  MOVLB  0
040AC:  CALL   380E
....................       output_high(flash_stream.cs_pin);
040B0:  MOVFF  B8B,BA9
040B4:  MOVLW  01
040B6:  MOVLB  B
040B8:  MOVWF  xAA
040BA:  MOVLW  0F
040BC:  MOVWF  xAC
040BE:  MOVLW  89
040C0:  MOVWF  xAB
040C2:  MOVLB  0
040C4:  CALL   26BE
040C8:  MOVFF  B8B,BA9
040CC:  MOVLB  B
040CE:  CLRF   xAA
040D0:  MOVLW  0F
040D2:  MOVWF  xAC
040D4:  MOVLW  92
040D6:  MOVWF  xAB
040D8:  MOVLB  0
040DA:  CALL   26BE
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
040DE:  MOVFF  B8B,BA9
040E2:  MOVLB  B
040E4:  CLRF   xAA
040E6:  MOVLW  0F
040E8:  MOVWF  xAC
040EA:  MOVLW  89
040EC:  MOVWF  xAB
040EE:  MOVLB  0
040F0:  CALL   26BE
040F4:  MOVFF  B8B,BA9
040F8:  MOVLB  B
040FA:  CLRF   xAA
040FC:  MOVLW  0F
040FE:  MOVWF  xAC
04100:  MOVLW  92
04102:  MOVWF  xAB
04104:  MOVLB  0
04106:  CALL   26BE
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
0410A:  MOVFF  B8C,BA6
0410E:  MOVFF  B8B,BA5
04112:  MOVFF  B8A,BA4
04116:  MOVFF  B89,BA3
0411A:  MOVLW  0B
0411C:  MOVLB  B
0411E:  MOVWF  xA8
04120:  MOVLW  92
04122:  MOVWF  xA7
04124:  CLRF   xAA
04126:  MOVLW  04
04128:  MOVWF  xA9
0412A:  MOVLB  0
0412C:  CALL   380E
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04130:  MOVFF  B8B,BA9
04134:  MOVLW  01
04136:  MOVLB  B
04138:  MOVWF  xAA
0413A:  MOVLW  0F
0413C:  MOVWF  xAC
0413E:  MOVLW  89
04140:  MOVWF  xAB
04142:  MOVLB  0
04144:  CALL   26BE
04148:  MOVFF  B8B,BA9
0414C:  MOVLB  B
0414E:  CLRF   xAA
04150:  MOVLW  0F
04152:  MOVWF  xAC
04154:  MOVLW  92
04156:  MOVWF  xAB
04158:  MOVLB  0
0415A:  CALL   26BE
....................    }
0415E:  GOTO   42E0
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
04162:  MOVLB  B
04164:  DECFSZ x8A,W
04166:  BRA    416C
04168:  BRA    4172
0416A:  MOVLB  0
0416C:  MOVLB  0
0416E:  GOTO   42E0
04172:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
04174:  MOVLW  06
04176:  MOVLB  B
04178:  MOVWF  x96
0417A:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
0417C:  MOVLW  DC
0417E:  MOVLB  B
04180:  MOVWF  x97
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
04182:  MOVFF  B90,B9E
04186:  CLRF   x9F
04188:  CLRF   xA0
0418A:  CLRF   xA1
0418C:  MOVF   x9E,W
0418E:  MOVWF  00
04190:  CLRF   01
04192:  CLRF   02
04194:  CLRF   03
04196:  MOVFF  00,B98
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0419A:  MOVFF  B8F,B9E
0419E:  MOVFF  B90,B9F
041A2:  CLRF   xA0
041A4:  CLRF   xA1
041A6:  MOVF   x9E,W
041A8:  MOVWF  00
041AA:  CLRF   01
041AC:  CLRF   02
041AE:  CLRF   03
041B0:  MOVFF  00,B99
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
041B4:  MOVFF  B8E,B9E
041B8:  MOVFF  B8F,B9F
041BC:  MOVFF  B90,BA0
041C0:  CLRF   xA1
041C2:  MOVF   x9E,W
041C4:  MOVWF  00
041C6:  CLRF   01
041C8:  CLRF   02
041CA:  CLRF   03
041CC:  MOVFF  00,B9A
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
041D0:  MOVF   x8D,W
041D2:  MOVWF  00
041D4:  CLRF   01
041D6:  CLRF   02
041D8:  CLRF   03
041DA:  MOVFF  00,B9B
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
041DE:  MOVFF  B8B,BA9
041E2:  CLRF   xAA
041E4:  MOVLW  0F
041E6:  MOVWF  xAC
041E8:  MOVLW  89
041EA:  MOVWF  xAB
041EC:  MOVLB  0
041EE:  CALL   26BE
041F2:  MOVFF  B8B,BA9
041F6:  MOVLB  B
041F8:  CLRF   xAA
041FA:  MOVLW  0F
041FC:  MOVWF  xAC
041FE:  MOVLW  92
04200:  MOVWF  xAB
04202:  MOVLB  0
04204:  CALL   26BE
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
04208:  MOVFF  B8C,BA6
0420C:  MOVFF  B8B,BA5
04210:  MOVFF  B8A,BA4
04214:  MOVFF  B89,BA3
04218:  MOVLW  0B
0421A:  MOVLB  B
0421C:  MOVWF  xA8
0421E:  MOVLW  96
04220:  MOVWF  xA7
04222:  CLRF   xAA
04224:  MOVLW  01
04226:  MOVWF  xA9
04228:  MOVLB  0
0422A:  CALL   380E
....................       output_high(flash_stream.cs_pin);
0422E:  MOVFF  B8B,BA9
04232:  MOVLW  01
04234:  MOVLB  B
04236:  MOVWF  xAA
04238:  MOVLW  0F
0423A:  MOVWF  xAC
0423C:  MOVLW  89
0423E:  MOVWF  xAB
04240:  MOVLB  0
04242:  CALL   26BE
04246:  MOVFF  B8B,BA9
0424A:  MOVLB  B
0424C:  CLRF   xAA
0424E:  MOVLW  0F
04250:  MOVWF  xAC
04252:  MOVLW  92
04254:  MOVWF  xAB
04256:  MOVLB  0
04258:  CALL   26BE
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
0425C:  MOVFF  B8B,BA9
04260:  MOVLB  B
04262:  CLRF   xAA
04264:  MOVLW  0F
04266:  MOVWF  xAC
04268:  MOVLW  89
0426A:  MOVWF  xAB
0426C:  MOVLB  0
0426E:  CALL   26BE
04272:  MOVFF  B8B,BA9
04276:  MOVLB  B
04278:  CLRF   xAA
0427A:  MOVLW  0F
0427C:  MOVWF  xAC
0427E:  MOVLW  92
04280:  MOVWF  xAB
04282:  MOVLB  0
04284:  CALL   26BE
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
04288:  MOVFF  B8C,BA6
0428C:  MOVFF  B8B,BA5
04290:  MOVFF  B8A,BA4
04294:  MOVFF  B89,BA3
04298:  MOVLW  0B
0429A:  MOVLB  B
0429C:  MOVWF  xA8
0429E:  MOVLW  97
042A0:  MOVWF  xA7
042A2:  CLRF   xAA
042A4:  MOVLW  05
042A6:  MOVWF  xA9
042A8:  MOVLB  0
042AA:  CALL   380E
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
042AE:  MOVFF  B8B,BA9
042B2:  MOVLW  01
042B4:  MOVLB  B
042B6:  MOVWF  xAA
042B8:  MOVLW  0F
042BA:  MOVWF  xAC
042BC:  MOVLW  89
042BE:  MOVWF  xAB
042C0:  MOVLB  0
042C2:  CALL   26BE
042C6:  MOVFF  B8B,BA9
042CA:  MOVLB  B
042CC:  CLRF   xAA
042CE:  MOVLW  0F
042D0:  MOVWF  xAC
042D2:  MOVLW  92
042D4:  MOVWF  xAB
042D6:  MOVLB  0
042D8:  CALL   26BE
....................    }
042DC:  GOTO   42E0
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
042E0:  MOVLB  B
042E2:  CLRF   x9C
042E4:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
042E6:  MOVFF  B8C,BA6
042EA:  MOVFF  B8B,BA5
042EE:  MOVFF  B8A,BA4
042F2:  MOVFF  B89,BA3
042F6:  CALL   3A7A
042FA:  MOVF   01,W
042FC:  ANDLW  01
042FE:  SUBLW  01
04300:  BTFSS  FD8.2
04302:  GOTO   4354
....................       if(timeout_counter > 10)
04306:  MOVLB  B
04308:  MOVF   x9C,W
0430A:  SUBLW  0A
0430C:  BTFSS  FD8.0
0430E:  BRA    4316
04310:  MOVLB  0
04312:  GOTO   4328
04316:  MOVLB  0
....................          delay_ms(200);
04318:  MOVLW  C8
0431A:  MOVLB  B
0431C:  MOVWF  xA3
0431E:  MOVLB  0
04320:  CALL   1EAE
04324:  GOTO   4334
....................       else
....................          delay_ms(10);   
04328:  MOVLW  0A
0432A:  MOVLB  B
0432C:  MOVWF  xA3
0432E:  MOVLB  0
04330:  CALL   1EAE
....................       
....................       if(timeout_counter > 100){
04334:  MOVLB  B
04336:  MOVF   x9C,W
04338:  SUBLW  64
0433A:  BTFSS  FD8.0
0433C:  BRA    4344
0433E:  MOVLB  0
04340:  GOTO   434A
04344:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
04346:  GOTO   4354
....................       }  
....................       timeout_counter++;
0434A:  MOVLB  B
0434C:  INCF   x9C,F
0434E:  MOVLB  0
04350:  GOTO   42E6
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
04354:  RETURN 0
.................... }
....................  
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x __ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 __ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 __ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 __
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
056B4:  MOVLB  3
056B6:  MOVF   x19,F
056B8:  BTFSC  FD8.2
056BA:  BRA    56C2
056BC:  MOVLB  0
056BE:  GOTO   581A
056C2:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
056C4:  MOVLW  06
056C6:  MOVLB  3
056C8:  MOVWF  x20
056CA:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
056CC:  MOVLW  20
056CE:  MOVLB  3
056D0:  MOVWF  x21
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
056D2:  MOVFF  31E,32D
056D6:  MOVFF  31F,32E
056DA:  CLRF   x2F
056DC:  CLRF   x30
056DE:  MOVF   x2D,W
056E0:  MOVWF  00
056E2:  CLRF   01
056E4:  CLRF   02
056E6:  CLRF   03
056E8:  MOVFF  00,322
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
056EC:  MOVFF  31D,32D
056F0:  MOVFF  31E,32E
056F4:  MOVFF  31F,32F
056F8:  CLRF   x30
056FA:  MOVF   x2D,W
056FC:  MOVWF  00
056FE:  CLRF   01
05700:  CLRF   02
05702:  CLRF   03
05704:  MOVFF  00,323
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
05708:  MOVF   x1C,W
0570A:  MOVWF  00
0570C:  CLRF   01
0570E:  CLRF   02
05710:  CLRF   03
05712:  MOVFF  00,324
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
05716:  MOVFF  31A,BA9
0571A:  MOVLB  B
0571C:  CLRF   xAA
0571E:  MOVLW  0F
05720:  MOVWF  xAC
05722:  MOVLW  89
05724:  MOVWF  xAB
05726:  MOVLB  0
05728:  CALL   26BE
0572C:  MOVFF  31A,BA9
05730:  MOVLB  B
05732:  CLRF   xAA
05734:  MOVLW  0F
05736:  MOVWF  xAC
05738:  MOVLW  92
0573A:  MOVWF  xAB
0573C:  MOVLB  0
0573E:  CALL   26BE
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
05742:  MOVFF  31B,BA6
05746:  MOVFF  31A,BA5
0574A:  MOVFF  319,BA4
0574E:  MOVFF  318,BA3
05752:  MOVLW  03
05754:  MOVLB  B
05756:  MOVWF  xA8
05758:  MOVLW  20
0575A:  MOVWF  xA7
0575C:  CLRF   xAA
0575E:  MOVLW  01
05760:  MOVWF  xA9
05762:  MOVLB  0
05764:  CALL   380E
....................       output_high(flash_stream.cs_pin);
05768:  MOVFF  31A,BA9
0576C:  MOVLW  01
0576E:  MOVLB  B
05770:  MOVWF  xAA
05772:  MOVLW  0F
05774:  MOVWF  xAC
05776:  MOVLW  89
05778:  MOVWF  xAB
0577A:  MOVLB  0
0577C:  CALL   26BE
05780:  MOVFF  31A,BA9
05784:  MOVLB  B
05786:  CLRF   xAA
05788:  MOVLW  0F
0578A:  MOVWF  xAC
0578C:  MOVLW  92
0578E:  MOVWF  xAB
05790:  MOVLB  0
05792:  CALL   26BE
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
05796:  MOVFF  31A,BA9
0579A:  MOVLB  B
0579C:  CLRF   xAA
0579E:  MOVLW  0F
057A0:  MOVWF  xAC
057A2:  MOVLW  89
057A4:  MOVWF  xAB
057A6:  MOVLB  0
057A8:  CALL   26BE
057AC:  MOVFF  31A,BA9
057B0:  MOVLB  B
057B2:  CLRF   xAA
057B4:  MOVLW  0F
057B6:  MOVWF  xAC
057B8:  MOVLW  92
057BA:  MOVWF  xAB
057BC:  MOVLB  0
057BE:  CALL   26BE
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
057C2:  MOVFF  31B,BA6
057C6:  MOVFF  31A,BA5
057CA:  MOVFF  319,BA4
057CE:  MOVFF  318,BA3
057D2:  MOVLW  03
057D4:  MOVLB  B
057D6:  MOVWF  xA8
057D8:  MOVLW  21
057DA:  MOVWF  xA7
057DC:  CLRF   xAA
057DE:  MOVLW  04
057E0:  MOVWF  xA9
057E2:  MOVLB  0
057E4:  CALL   380E
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
057E8:  MOVFF  31A,BA9
057EC:  MOVLW  01
057EE:  MOVLB  B
057F0:  MOVWF  xAA
057F2:  MOVLW  0F
057F4:  MOVWF  xAC
057F6:  MOVLW  89
057F8:  MOVWF  xAB
057FA:  MOVLB  0
057FC:  CALL   26BE
05800:  MOVFF  31A,BA9
05804:  MOVLB  B
05806:  CLRF   xAA
05808:  MOVLW  0F
0580A:  MOVWF  xAC
0580C:  MOVLW  92
0580E:  MOVWF  xAB
05810:  MOVLB  0
05812:  CALL   26BE
....................    }
05816:  GOTO   599A
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
0581A:  MOVLB  3
0581C:  DECFSZ x19,W
0581E:  BRA    5824
05820:  BRA    582A
05822:  MOVLB  0
05824:  MOVLB  0
05826:  GOTO   599A
0582A:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
0582C:  MOVLW  06
0582E:  MOVLB  3
05830:  MOVWF  x25
05832:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
05834:  MOVLW  21
05836:  MOVLB  3
05838:  MOVWF  x26
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
0583A:  MOVFF  31F,32D
0583E:  CLRF   x2E
05840:  CLRF   x2F
05842:  CLRF   x30
05844:  MOVF   x2D,W
05846:  MOVWF  00
05848:  CLRF   01
0584A:  CLRF   02
0584C:  CLRF   03
0584E:  MOVFF  00,327
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
05852:  MOVFF  31E,32D
05856:  MOVFF  31F,32E
0585A:  CLRF   x2F
0585C:  CLRF   x30
0585E:  MOVF   x2D,W
05860:  MOVWF  00
05862:  CLRF   01
05864:  CLRF   02
05866:  CLRF   03
05868:  MOVFF  00,328
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0586C:  MOVFF  31D,32D
05870:  MOVFF  31E,32E
05874:  MOVFF  31F,32F
05878:  CLRF   x30
0587A:  MOVF   x2D,W
0587C:  MOVWF  00
0587E:  CLRF   01
05880:  CLRF   02
05882:  CLRF   03
05884:  MOVFF  00,329
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
05888:  MOVF   x1C,W
0588A:  MOVWF  00
0588C:  CLRF   01
0588E:  CLRF   02
05890:  CLRF   03
05892:  MOVFF  00,32A
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
05896:  MOVFF  31A,BA9
0589A:  MOVLB  B
0589C:  CLRF   xAA
0589E:  MOVLW  0F
058A0:  MOVWF  xAC
058A2:  MOVLW  89
058A4:  MOVWF  xAB
058A6:  MOVLB  0
058A8:  CALL   26BE
058AC:  MOVFF  31A,BA9
058B0:  MOVLB  B
058B2:  CLRF   xAA
058B4:  MOVLW  0F
058B6:  MOVWF  xAC
058B8:  MOVLW  92
058BA:  MOVWF  xAB
058BC:  MOVLB  0
058BE:  CALL   26BE
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
058C2:  MOVFF  31B,BA6
058C6:  MOVFF  31A,BA5
058CA:  MOVFF  319,BA4
058CE:  MOVFF  318,BA3
058D2:  MOVLW  03
058D4:  MOVLB  B
058D6:  MOVWF  xA8
058D8:  MOVLW  25
058DA:  MOVWF  xA7
058DC:  CLRF   xAA
058DE:  MOVLW  01
058E0:  MOVWF  xA9
058E2:  MOVLB  0
058E4:  CALL   380E
....................       output_high(flash_stream.cs_pin);
058E8:  MOVFF  31A,BA9
058EC:  MOVLW  01
058EE:  MOVLB  B
058F0:  MOVWF  xAA
058F2:  MOVLW  0F
058F4:  MOVWF  xAC
058F6:  MOVLW  89
058F8:  MOVWF  xAB
058FA:  MOVLB  0
058FC:  CALL   26BE
05900:  MOVFF  31A,BA9
05904:  MOVLB  B
05906:  CLRF   xAA
05908:  MOVLW  0F
0590A:  MOVWF  xAC
0590C:  MOVLW  92
0590E:  MOVWF  xAB
05910:  MOVLB  0
05912:  CALL   26BE
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
05916:  MOVFF  31A,BA9
0591A:  MOVLB  B
0591C:  CLRF   xAA
0591E:  MOVLW  0F
05920:  MOVWF  xAC
05922:  MOVLW  89
05924:  MOVWF  xAB
05926:  MOVLB  0
05928:  CALL   26BE
0592C:  MOVFF  31A,BA9
05930:  MOVLB  B
05932:  CLRF   xAA
05934:  MOVLW  0F
05936:  MOVWF  xAC
05938:  MOVLW  92
0593A:  MOVWF  xAB
0593C:  MOVLB  0
0593E:  CALL   26BE
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
05942:  MOVFF  31B,BA6
05946:  MOVFF  31A,BA5
0594A:  MOVFF  319,BA4
0594E:  MOVFF  318,BA3
05952:  MOVLW  03
05954:  MOVLB  B
05956:  MOVWF  xA8
05958:  MOVLW  26
0595A:  MOVWF  xA7
0595C:  CLRF   xAA
0595E:  MOVLW  05
05960:  MOVWF  xA9
05962:  MOVLB  0
05964:  CALL   380E
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
05968:  MOVFF  31A,BA9
0596C:  MOVLW  01
0596E:  MOVLB  B
05970:  MOVWF  xAA
05972:  MOVLW  0F
05974:  MOVWF  xAC
05976:  MOVLW  89
05978:  MOVWF  xAB
0597A:  MOVLB  0
0597C:  CALL   26BE
05980:  MOVFF  31A,BA9
05984:  MOVLB  B
05986:  CLRF   xAA
05988:  MOVLW  0F
0598A:  MOVWF  xAC
0598C:  MOVLW  92
0598E:  MOVWF  xAB
05990:  MOVLB  0
05992:  CALL   26BE
....................    }
05996:  GOTO   599A
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
0599A:  MOVLB  3
0599C:  CLRF   x2B
0599E:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
059A0:  MOVFF  31B,BA6
059A4:  MOVFF  31A,BA5
059A8:  MOVFF  319,BA4
059AC:  MOVFF  318,BA3
059B0:  CALL   3A7A
059B4:  MOVF   01,W
059B6:  ANDLW  01
059B8:  SUBLW  01
059BA:  BTFSS  FD8.2
059BC:  GOTO   5A0E
....................       if(timeout_counter > 10)
059C0:  MOVLB  3
059C2:  MOVF   x2B,W
059C4:  SUBLW  0A
059C6:  BTFSS  FD8.0
059C8:  BRA    59D0
059CA:  MOVLB  0
059CC:  GOTO   59E2
059D0:  MOVLB  0
....................          delay_ms(200);
059D2:  MOVLW  C8
059D4:  MOVLB  B
059D6:  MOVWF  xA3
059D8:  MOVLB  0
059DA:  CALL   1EAE
059DE:  GOTO   59EE
....................       else
....................          delay_ms(10);   
059E2:  MOVLW  0A
059E4:  MOVLB  B
059E6:  MOVWF  xA3
059E8:  MOVLB  0
059EA:  CALL   1EAE
....................       
....................       if(timeout_counter > 100){
059EE:  MOVLB  3
059F0:  MOVF   x2B,W
059F2:  SUBLW  64
059F4:  BTFSS  FD8.0
059F6:  BRA    59FE
059F8:  MOVLB  0
059FA:  GOTO   5A04
059FE:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
05A00:  GOTO   5A0E
....................       }  
....................       timeout_counter++;
05A04:  MOVLB  3
05A06:  INCF   x2B,F
05A08:  MOVLB  0
05A0A:  GOTO   59A0
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
05A0E:  RETURN 0
.................... }
....................  
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address)
.................... {
....................    unsigned int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................    
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    return read_data;
.................... }
....................  
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
02B2A:  MOVLB  B
02B2C:  MOVF   x48,F
02B2E:  BTFSC  FD8.2
02B30:  BRA    2B38
02B32:  MOVLB  0
02B34:  GOTO   2C28
02B38:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
02B3A:  MOVLW  03
02B3C:  MOVLB  B
02B3E:  MOVWF  x55
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02B40:  MOVFF  B4D,B5F
02B44:  MOVFF  B4E,B60
02B48:  CLRF   x61
02B4A:  CLRF   x62
02B4C:  MOVF   x5F,W
02B4E:  MOVWF  00
02B50:  CLRF   01
02B52:  CLRF   02
02B54:  CLRF   03
02B56:  MOVFF  00,B56
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02B5A:  MOVFF  B4C,B5F
02B5E:  MOVFF  B4D,B60
02B62:  MOVFF  B4E,B61
02B66:  CLRF   x62
02B68:  MOVF   x5F,W
02B6A:  MOVWF  00
02B6C:  CLRF   01
02B6E:  CLRF   02
02B70:  CLRF   03
02B72:  MOVFF  00,B57
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02B76:  MOVF   x4B,W
02B78:  MOVWF  00
02B7A:  CLRF   01
02B7C:  CLRF   02
02B7E:  CLRF   03
02B80:  MOVFF  00,B58
....................             
....................       output_low(flash_stream.cs_pin);
02B84:  MOVFF  B49,BA9
02B88:  CLRF   xAA
02B8A:  MOVLW  0F
02B8C:  MOVWF  xAC
02B8E:  MOVLW  89
02B90:  MOVWF  xAB
02B92:  MOVLB  0
02B94:  CALL   26BE
02B98:  MOVFF  B49,BA9
02B9C:  MOVLB  B
02B9E:  CLRF   xAA
02BA0:  MOVLW  0F
02BA2:  MOVWF  xAC
02BA4:  MOVLW  92
02BA6:  MOVWF  xAB
02BA8:  MOVLB  0
02BAA:  CALL   26BE
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
02BAE:  MOVFF  B4A,BAC
02BB2:  MOVFF  B49,BAB
02BB6:  MOVFF  B48,BAA
02BBA:  MOVFF  B47,BA9
02BBE:  MOVLW  0B
02BC0:  MOVLB  B
02BC2:  MOVWF  xAE
02BC4:  MOVLW  55
02BC6:  MOVWF  xAD
02BC8:  CLRF   xB0
02BCA:  MOVLW  04
02BCC:  MOVWF  xAF
02BCE:  MOVFF  B50,BB2
02BD2:  MOVFF  B4F,BB1
02BD6:  MOVFF  B54,BB6
02BDA:  MOVFF  B53,BB5
02BDE:  MOVFF  B52,BB4
02BE2:  MOVFF  B51,BB3
02BE6:  MOVLB  0
02BE8:  CALL   280A
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
02BEC:  MOVLW  02
02BEE:  MOVWF  00
02BF0:  DECFSZ 00,F
02BF2:  BRA    2BF0
02BF4:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02BF6:  MOVFF  B49,BA9
02BFA:  MOVLW  01
02BFC:  MOVLB  B
02BFE:  MOVWF  xAA
02C00:  MOVLW  0F
02C02:  MOVWF  xAC
02C04:  MOVLW  89
02C06:  MOVWF  xAB
02C08:  MOVLB  0
02C0A:  CALL   26BE
02C0E:  MOVFF  B49,BA9
02C12:  MOVLB  B
02C14:  CLRF   xAA
02C16:  MOVLW  0F
02C18:  MOVWF  xAC
02C1A:  MOVLW  92
02C1C:  MOVWF  xAB
02C1E:  MOVLB  0
02C20:  CALL   26BE
....................    }
02C24:  GOTO   2D3C
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
02C28:  MOVLB  B
02C2A:  DECFSZ x48,W
02C2C:  BRA    2C32
02C2E:  BRA    2C38
02C30:  MOVLB  0
02C32:  MOVLB  0
02C34:  GOTO   2D3C
02C38:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
02C3A:  MOVLW  13
02C3C:  MOVLB  B
02C3E:  MOVWF  x59
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
02C40:  MOVFF  B4E,B5F
02C44:  CLRF   x60
02C46:  CLRF   x61
02C48:  CLRF   x62
02C4A:  MOVF   x5F,W
02C4C:  MOVWF  00
02C4E:  CLRF   01
02C50:  CLRF   02
02C52:  CLRF   03
02C54:  MOVFF  00,B5A
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02C58:  MOVFF  B4D,B5F
02C5C:  MOVFF  B4E,B60
02C60:  CLRF   x61
02C62:  CLRF   x62
02C64:  MOVF   x5F,W
02C66:  MOVWF  00
02C68:  CLRF   01
02C6A:  CLRF   02
02C6C:  CLRF   03
02C6E:  MOVFF  00,B5B
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02C72:  MOVFF  B4C,B5F
02C76:  MOVFF  B4D,B60
02C7A:  MOVFF  B4E,B61
02C7E:  CLRF   x62
02C80:  MOVF   x5F,W
02C82:  MOVWF  00
02C84:  CLRF   01
02C86:  CLRF   02
02C88:  CLRF   03
02C8A:  MOVFF  00,B5C
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02C8E:  MOVF   x4B,W
02C90:  MOVWF  00
02C92:  CLRF   01
02C94:  CLRF   02
02C96:  CLRF   03
02C98:  MOVFF  00,B5D
....................    
....................       output_low(flash_stream.cs_pin);
02C9C:  MOVFF  B49,BA9
02CA0:  CLRF   xAA
02CA2:  MOVLW  0F
02CA4:  MOVWF  xAC
02CA6:  MOVLW  89
02CA8:  MOVWF  xAB
02CAA:  MOVLB  0
02CAC:  CALL   26BE
02CB0:  MOVFF  B49,BA9
02CB4:  MOVLB  B
02CB6:  CLRF   xAA
02CB8:  MOVLW  0F
02CBA:  MOVWF  xAC
02CBC:  MOVLW  92
02CBE:  MOVWF  xAB
02CC0:  MOVLB  0
02CC2:  CALL   26BE
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
02CC6:  MOVFF  B4A,BAC
02CCA:  MOVFF  B49,BAB
02CCE:  MOVFF  B48,BAA
02CD2:  MOVFF  B47,BA9
02CD6:  MOVLW  0B
02CD8:  MOVLB  B
02CDA:  MOVWF  xAE
02CDC:  MOVLW  59
02CDE:  MOVWF  xAD
02CE0:  CLRF   xB0
02CE2:  MOVLW  05
02CE4:  MOVWF  xAF
02CE6:  MOVFF  B50,BB2
02CEA:  MOVFF  B4F,BB1
02CEE:  MOVFF  B54,BB6
02CF2:  MOVFF  B53,BB5
02CF6:  MOVFF  B52,BB4
02CFA:  MOVFF  B51,BB3
02CFE:  MOVLB  0
02D00:  CALL   280A
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
02D04:  MOVLW  02
02D06:  MOVWF  00
02D08:  DECFSZ 00,F
02D0A:  BRA    2D08
02D0C:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02D0E:  MOVFF  B49,BA9
02D12:  MOVLW  01
02D14:  MOVLB  B
02D16:  MOVWF  xAA
02D18:  MOVLW  0F
02D1A:  MOVWF  xAC
02D1C:  MOVLW  89
02D1E:  MOVWF  xAB
02D20:  MOVLB  0
02D22:  CALL   26BE
02D26:  MOVFF  B49,BA9
02D2A:  MOVLB  B
02D2C:  CLRF   xAA
02D2E:  MOVLW  0F
02D30:  MOVWF  xAC
02D32:  MOVLW  92
02D34:  MOVWF  xAB
02D36:  MOVLB  0
02D38:  CALL   26BE
....................    }
....................    return;
02D3C:  RETURN 0
.................... }
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
....................       flash_cmd[4] = write_data;
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
....................       flash_cmd[5] = write_data;
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
03B1A:  MOVLB  B
03B1C:  MOVF   x8C,F
03B1E:  BTFSC  FD8.2
03B20:  BRA    3B28
03B22:  MOVLB  0
03B24:  GOTO   3C96
03B28:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
03B2A:  MOVLW  06
03B2C:  MOVLB  B
03B2E:  MOVWF  x97
03B30:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
03B32:  MOVLW  02
03B34:  MOVLB  B
03B36:  MOVWF  x98
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03B38:  MOVFF  B91,BA4
03B3C:  MOVFF  B92,BA5
03B40:  CLRF   xA6
03B42:  CLRF   xA7
03B44:  MOVF   xA4,W
03B46:  MOVWF  00
03B48:  CLRF   01
03B4A:  CLRF   02
03B4C:  CLRF   03
03B4E:  MOVFF  00,B99
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03B52:  MOVFF  B90,BA4
03B56:  MOVFF  B91,BA5
03B5A:  MOVFF  B92,BA6
03B5E:  CLRF   xA7
03B60:  MOVF   xA4,W
03B62:  MOVWF  00
03B64:  CLRF   01
03B66:  CLRF   02
03B68:  CLRF   03
03B6A:  MOVFF  00,B9A
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
03B6E:  MOVF   x8F,W
03B70:  MOVWF  00
03B72:  CLRF   01
03B74:  CLRF   02
03B76:  CLRF   03
03B78:  MOVFF  00,B9B
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03B7C:  MOVFF  B8D,BA9
03B80:  CLRF   xAA
03B82:  MOVLW  0F
03B84:  MOVWF  xAC
03B86:  MOVLW  89
03B88:  MOVWF  xAB
03B8A:  MOVLB  0
03B8C:  CALL   26BE
03B90:  MOVFF  B8D,BA9
03B94:  MOVLB  B
03B96:  CLRF   xAA
03B98:  MOVLW  0F
03B9A:  MOVWF  xAC
03B9C:  MOVLW  92
03B9E:  MOVWF  xAB
03BA0:  MOVLB  0
03BA2:  CALL   26BE
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03BA6:  MOVFF  B8E,BA6
03BAA:  MOVFF  B8D,BA5
03BAE:  MOVFF  B8C,BA4
03BB2:  MOVFF  B8B,BA3
03BB6:  MOVLW  0B
03BB8:  MOVLB  B
03BBA:  MOVWF  xA8
03BBC:  MOVLW  97
03BBE:  MOVWF  xA7
03BC0:  CLRF   xAA
03BC2:  MOVLW  01
03BC4:  MOVWF  xA9
03BC6:  MOVLB  0
03BC8:  CALL   380E
....................       output_high(flash_stream.cs_pin);
03BCC:  MOVFF  B8D,BA9
03BD0:  MOVLW  01
03BD2:  MOVLB  B
03BD4:  MOVWF  xAA
03BD6:  MOVLW  0F
03BD8:  MOVWF  xAC
03BDA:  MOVLW  89
03BDC:  MOVWF  xAB
03BDE:  MOVLB  0
03BE0:  CALL   26BE
03BE4:  MOVFF  B8D,BA9
03BE8:  MOVLB  B
03BEA:  CLRF   xAA
03BEC:  MOVLW  0F
03BEE:  MOVWF  xAC
03BF0:  MOVLW  92
03BF2:  MOVWF  xAB
03BF4:  MOVLB  0
03BF6:  CALL   26BE
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
03BFA:  MOVFF  B8D,BA9
03BFE:  MOVLB  B
03C00:  CLRF   xAA
03C02:  MOVLW  0F
03C04:  MOVWF  xAC
03C06:  MOVLW  89
03C08:  MOVWF  xAB
03C0A:  MOVLB  0
03C0C:  CALL   26BE
03C10:  MOVFF  B8D,BA9
03C14:  MOVLB  B
03C16:  CLRF   xAA
03C18:  MOVLW  0F
03C1A:  MOVWF  xAC
03C1C:  MOVLW  92
03C1E:  MOVWF  xAB
03C20:  MOVLB  0
03C22:  CALL   26BE
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
03C26:  MOVFF  B8E,BA6
03C2A:  MOVFF  B8D,BA5
03C2E:  MOVFF  B8C,BA4
03C32:  MOVFF  B8B,BA3
03C36:  MOVLW  0B
03C38:  MOVLB  B
03C3A:  MOVWF  xA8
03C3C:  MOVLW  98
03C3E:  MOVWF  xA7
03C40:  MOVLW  04
03C42:  MOVWF  xA9
03C44:  MOVFF  B94,BAB
03C48:  MOVFF  B93,BAA
03C4C:  MOVFF  B96,BAD
03C50:  MOVFF  B95,BAC
03C54:  MOVLB  0
03C56:  CALL   38FE
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
03C5A:  MOVLW  02
03C5C:  MOVWF  00
03C5E:  DECFSZ 00,F
03C60:  BRA    3C5E
03C62:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03C64:  MOVFF  B8D,BA9
03C68:  MOVLW  01
03C6A:  MOVLB  B
03C6C:  MOVWF  xAA
03C6E:  MOVLW  0F
03C70:  MOVWF  xAC
03C72:  MOVLW  89
03C74:  MOVWF  xAB
03C76:  MOVLB  0
03C78:  CALL   26BE
03C7C:  MOVFF  B8D,BA9
03C80:  MOVLB  B
03C82:  CLRF   xAA
03C84:  MOVLW  0F
03C86:  MOVWF  xAC
03C88:  MOVLW  92
03C8A:  MOVWF  xAB
03C8C:  MOVLB  0
03C8E:  CALL   26BE
....................    }
03C92:  GOTO   3E28
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
03C96:  MOVLB  B
03C98:  DECFSZ x8C,W
03C9A:  BRA    3CA0
03C9C:  BRA    3CA6
03C9E:  MOVLB  0
03CA0:  MOVLB  0
03CA2:  GOTO   3E28
03CA6:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
03CA8:  MOVLW  06
03CAA:  MOVLB  B
03CAC:  MOVWF  x9C
03CAE:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
03CB0:  MOVLW  12
03CB2:  MOVLB  B
03CB4:  MOVWF  x9D
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
03CB6:  MOVFF  B92,BA4
03CBA:  CLRF   xA5
03CBC:  CLRF   xA6
03CBE:  CLRF   xA7
03CC0:  MOVF   xA4,W
03CC2:  MOVWF  00
03CC4:  CLRF   01
03CC6:  CLRF   02
03CC8:  CLRF   03
03CCA:  MOVFF  00,B9E
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03CCE:  MOVFF  B91,BA4
03CD2:  MOVFF  B92,BA5
03CD6:  CLRF   xA6
03CD8:  CLRF   xA7
03CDA:  MOVF   xA4,W
03CDC:  MOVWF  00
03CDE:  CLRF   01
03CE0:  CLRF   02
03CE2:  CLRF   03
03CE4:  MOVFF  00,B9F
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03CE8:  MOVFF  B90,BA4
03CEC:  MOVFF  B91,BA5
03CF0:  MOVFF  B92,BA6
03CF4:  CLRF   xA7
03CF6:  MOVF   xA4,W
03CF8:  MOVWF  00
03CFA:  CLRF   01
03CFC:  CLRF   02
03CFE:  CLRF   03
03D00:  MOVFF  00,BA0
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
03D04:  MOVF   x8F,W
03D06:  MOVWF  00
03D08:  CLRF   01
03D0A:  CLRF   02
03D0C:  CLRF   03
03D0E:  MOVFF  00,BA1
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03D12:  MOVFF  B8D,BA9
03D16:  CLRF   xAA
03D18:  MOVLW  0F
03D1A:  MOVWF  xAC
03D1C:  MOVLW  89
03D1E:  MOVWF  xAB
03D20:  MOVLB  0
03D22:  CALL   26BE
03D26:  MOVFF  B8D,BA9
03D2A:  MOVLB  B
03D2C:  CLRF   xAA
03D2E:  MOVLW  0F
03D30:  MOVWF  xAC
03D32:  MOVLW  92
03D34:  MOVWF  xAB
03D36:  MOVLB  0
03D38:  CALL   26BE
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03D3C:  MOVFF  B8E,BA6
03D40:  MOVFF  B8D,BA5
03D44:  MOVFF  B8C,BA4
03D48:  MOVFF  B8B,BA3
03D4C:  MOVLW  0B
03D4E:  MOVLB  B
03D50:  MOVWF  xA8
03D52:  MOVLW  9C
03D54:  MOVWF  xA7
03D56:  CLRF   xAA
03D58:  MOVLW  01
03D5A:  MOVWF  xA9
03D5C:  MOVLB  0
03D5E:  CALL   380E
....................       output_high(flash_stream.cs_pin);
03D62:  MOVFF  B8D,BA9
03D66:  MOVLW  01
03D68:  MOVLB  B
03D6A:  MOVWF  xAA
03D6C:  MOVLW  0F
03D6E:  MOVWF  xAC
03D70:  MOVLW  89
03D72:  MOVWF  xAB
03D74:  MOVLB  0
03D76:  CALL   26BE
03D7A:  MOVFF  B8D,BA9
03D7E:  MOVLB  B
03D80:  CLRF   xAA
03D82:  MOVLW  0F
03D84:  MOVWF  xAC
03D86:  MOVLW  92
03D88:  MOVWF  xAB
03D8A:  MOVLB  0
03D8C:  CALL   26BE
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
03D90:  MOVFF  B8D,BA9
03D94:  MOVLB  B
03D96:  CLRF   xAA
03D98:  MOVLW  0F
03D9A:  MOVWF  xAC
03D9C:  MOVLW  89
03D9E:  MOVWF  xAB
03DA0:  MOVLB  0
03DA2:  CALL   26BE
03DA6:  MOVFF  B8D,BA9
03DAA:  MOVLB  B
03DAC:  CLRF   xAA
03DAE:  MOVLW  0F
03DB0:  MOVWF  xAC
03DB2:  MOVLW  92
03DB4:  MOVWF  xAB
03DB6:  MOVLB  0
03DB8:  CALL   26BE
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
03DBC:  MOVFF  B8E,BA6
03DC0:  MOVFF  B8D,BA5
03DC4:  MOVFF  B8C,BA4
03DC8:  MOVFF  B8B,BA3
03DCC:  MOVLW  0B
03DCE:  MOVLB  B
03DD0:  MOVWF  xA8
03DD2:  MOVLW  9D
03DD4:  MOVWF  xA7
03DD6:  MOVLW  05
03DD8:  MOVWF  xA9
03DDA:  MOVFF  B94,BAB
03DDE:  MOVFF  B93,BAA
03DE2:  MOVFF  B96,BAD
03DE6:  MOVFF  B95,BAC
03DEA:  MOVLB  0
03DEC:  CALL   38FE
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
03DF0:  MOVLW  02
03DF2:  MOVWF  00
03DF4:  DECFSZ 00,F
03DF6:  BRA    3DF4
03DF8:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03DFA:  MOVFF  B8D,BA9
03DFE:  MOVLW  01
03E00:  MOVLB  B
03E02:  MOVWF  xAA
03E04:  MOVLW  0F
03E06:  MOVWF  xAC
03E08:  MOVLW  89
03E0A:  MOVWF  xAB
03E0C:  MOVLB  0
03E0E:  CALL   26BE
03E12:  MOVFF  B8D,BA9
03E16:  MOVLB  B
03E18:  CLRF   xAA
03E1A:  MOVLW  0F
03E1C:  MOVWF  xAC
03E1E:  MOVLW  92
03E20:  MOVWF  xAB
03E22:  MOVLB  0
03E24:  CALL   26BE
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
03E28:  MOVLB  B
03E2A:  CLRF   xA2
03E2C:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
03E2E:  MOVFF  B8E,BA6
03E32:  MOVFF  B8D,BA5
03E36:  MOVFF  B8C,BA4
03E3A:  MOVFF  B8B,BA3
03E3E:  CALL   3A7A
03E42:  MOVF   01,W
03E44:  ANDLW  01
03E46:  SUBLW  01
03E48:  BTFSS  FD8.2
03E4A:  GOTO   3E9C
....................       if(timeout_counter > 10)
03E4E:  MOVLB  B
03E50:  MOVF   xA2,W
03E52:  SUBLW  0A
03E54:  BTFSS  FD8.0
03E56:  BRA    3E5E
03E58:  MOVLB  0
03E5A:  GOTO   3E70
03E5E:  MOVLB  0
....................          delay_ms(200);
03E60:  MOVLW  C8
03E62:  MOVLB  B
03E64:  MOVWF  xA3
03E66:  MOVLB  0
03E68:  CALL   1EAE
03E6C:  GOTO   3E7C
....................       else
....................          delay_ms(10);   
03E70:  MOVLW  0A
03E72:  MOVLB  B
03E74:  MOVWF  xA3
03E76:  MOVLB  0
03E78:  CALL   1EAE
....................       
....................       if(timeout_counter > 100){
03E7C:  MOVLB  B
03E7E:  MOVF   xA2,W
03E80:  SUBLW  64
03E82:  BTFSS  FD8.0
03E84:  BRA    3E8C
03E86:  MOVLB  0
03E88:  GOTO   3E92
03E8C:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
03E8E:  GOTO   3E9C
....................       }  
....................       timeout_counter++;
03E92:  MOVLB  B
03E94:  INCF   xA2,F
03E96:  MOVLB  0
03E98:  GOTO   3E2E
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
03E9C:  RETURN 0
.................... }
.................... 
....................  
.................... int1 is_connect(Flash flash_stream){
*
02A3E:  MOVLW  9F
02A40:  MOVLB  2
02A42:  MOVWF  xE9
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
02A44:  MOVFF  2D3,BA9
02A48:  MOVLB  B
02A4A:  CLRF   xAA
02A4C:  MOVLW  0F
02A4E:  MOVWF  xAC
02A50:  MOVLW  89
02A52:  MOVWF  xAB
02A54:  MOVLB  0
02A56:  CALL   26BE
02A5A:  MOVFF  2D3,BA9
02A5E:  MOVLB  B
02A60:  CLRF   xAA
02A62:  MOVLW  0F
02A64:  MOVWF  xAC
02A66:  MOVLW  92
02A68:  MOVWF  xAB
02A6A:  MOVLB  0
02A6C:  CALL   26BE
....................    delay_us(10);  
02A70:  MOVLW  0D
02A72:  MOVWF  00
02A74:  DECFSZ 00,F
02A76:  BRA    2A74
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
02A78:  MOVFF  2D4,BAC
02A7C:  MOVFF  2D3,BAB
02A80:  MOVFF  2D2,BAA
02A84:  MOVFF  2D1,BA9
02A88:  MOVLW  02
02A8A:  MOVLB  B
02A8C:  MOVWF  xAE
02A8E:  MOVLW  E9
02A90:  MOVWF  xAD
02A92:  CLRF   xB0
02A94:  MOVLW  01
02A96:  MOVWF  xAF
02A98:  MOVLW  02
02A9A:  MOVWF  xB2
02A9C:  MOVLW  D5
02A9E:  MOVWF  xB1
02AA0:  CLRF   xB6
02AA2:  CLRF   xB5
02AA4:  CLRF   xB4
02AA6:  MOVLW  14
02AA8:  MOVWF  xB3
02AAA:  MOVLB  0
02AAC:  CALL   280A
....................    output_high(flash_stream.cs_pin);
02AB0:  MOVFF  2D3,BA9
02AB4:  MOVLW  01
02AB6:  MOVLB  B
02AB8:  MOVWF  xAA
02ABA:  MOVLW  0F
02ABC:  MOVWF  xAC
02ABE:  MOVLW  89
02AC0:  MOVWF  xAB
02AC2:  MOVLB  0
02AC4:  CALL   26BE
02AC8:  MOVFF  2D3,BA9
02ACC:  MOVLB  B
02ACE:  CLRF   xAA
02AD0:  MOVLW  0F
02AD2:  MOVWF  xAC
02AD4:  MOVLW  92
02AD6:  MOVWF  xAB
02AD8:  MOVLB  0
02ADA:  CALL   26BE
....................    //fprintf(PC,"Read ID:%02X", read_id_data.fields.manufacturer_id);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
02ADE:  MOVLB  2
02AE0:  MOVF   xD5,W
02AE2:  SUBLW  20
02AE4:  BTFSC  FD8.2
02AE6:  BRA    2AEE
02AE8:  MOVLB  0
02AEA:  GOTO   2AFC
02AEE:  MOVLB  0
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
02AF0:  MOVLW  01
02AF2:  MOVWF  01
02AF4:  GOTO   2B04
....................    }
02AF8:  GOTO   2B04
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
02AFC:  MOVLW  00
02AFE:  MOVWF  01
02B00:  GOTO   2B04
....................    }
02B04:  RETURN 0
.................... }
.................... 
.................... #include "../lib/tool/calc_tools.c"
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size)
.................... {
....................    if (payload_size <= 0) return 0;
*
02D3E:  MOVLB  B
02D40:  MOVF   xD7,F
02D42:  BTFSC  FD8.2
02D44:  BRA    2D4C
02D46:  MOVLB  0
02D48:  GOTO   2D56
02D4C:  MOVLB  0
02D4E:  MOVLW  00
02D50:  MOVWF  01
02D52:  GOTO   2DA8
.................... 
....................    unsigned int8 crc = *frame++;
02D56:  MOVLB  B
02D58:  MOVF   xD6,W
02D5A:  MOVWF  03
02D5C:  MOVF   xD5,W
02D5E:  INCF   xD5,F
02D60:  BTFSC  FD8.2
02D62:  INCF   xD6,F
02D64:  MOVWF  FE9
02D66:  MOVFF  03,FEA
02D6A:  MOVFF  FEF,BD8
02D6E:  MOVLB  0
....................    while (--payload_size > 0)
02D70:  MOVLB  B
02D72:  DECF   xD7,F
02D74:  MOVF   xD7,F
02D76:  BTFSS  FD8.2
02D78:  BRA    2D80
02D7A:  MOVLB  0
02D7C:  GOTO   2DA0
02D80:  MOVLB  0
....................       crc ^= *frame++;
02D82:  MOVLB  B
02D84:  MOVF   xD6,W
02D86:  MOVWF  03
02D88:  MOVF   xD5,W
02D8A:  INCF   xD5,F
02D8C:  BTFSC  FD8.2
02D8E:  INCF   xD6,F
02D90:  MOVWF  FE9
02D92:  MOVFF  03,FEA
02D96:  MOVF   FEF,W
02D98:  XORWF  xD8,F
02D9A:  MOVLB  0
02D9C:  GOTO   2D70
.................... 
....................    return crc;
02DA0:  MOVLB  B
02DA2:  MOVF   xD8,W
02DA4:  MOVWF  01
02DA6:  MOVLB  0
02DA8:  RETURN 0
.................... }
.................... 
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size)
*
0E044:  MOVLW  01
0E046:  MOVLB  3
0E048:  SUBWF  x17,W
0E04A:  ADDWF  x15,W
0E04C:  MOVWF  FE9
0E04E:  MOVLW  00
0E050:  ADDWFC x16,W
0E052:  MOVWF  FEA
0E054:  MOVFF  FEF,318
0E058:  MOVLW  01
0E05A:  SUBWF  x17,W
0E05C:  MOVWF  x1A
0E05E:  MOVFF  316,BD6
0E062:  MOVFF  315,BD5
0E066:  MOVFF  31A,BD7
0E06A:  MOVLB  0
0E06C:  CALL   2D3E
0E070:  MOVFF  01,319
.................... {
....................    unsigned int8 received_crc = frame[payload_size - 1]; // CRC is the last byte
....................    unsigned int8 calculated_crc = calc_crc8(frame, payload_size - 1);
....................    return (received_crc == calculated_crc);
0E074:  MOVLB  3
0E076:  MOVF   x19,W
0E078:  SUBWF  x18,W
0E07A:  BTFSS  FD8.2
0E07C:  BRA    E084
0E07E:  MOVLB  0
0E080:  GOTO   E08C
0E084:  MOVLB  0
0E086:  MOVLW  00
0E088:  GOTO   E08E
0E08C:  MOVLW  01
0E08E:  MOVWF  01
0E090:  RETURN 0
.................... }
.................... 
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index)
.................... {
....................     buf[index + 0] = (int8)(value >> 24);   // MSB
....................     buf[index + 1] = (int8)(value >> 16);
....................     buf[index + 2] = (int8)(value >>  8);
....................     buf[index + 3] = (int8)(value      );   // LSB
.................... }
.................... 
.................... int32 lsb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] <<  0) |
....................            ((int32)buf[index + 1] <<  8) |
....................            ((int32)buf[index + 2] << 16) |
....................            ((int32)buf[index + 3] << 24);
.................... }
.................... 
.................... 
.................... int32 msb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] << 24) |
....................            ((int32)buf[index + 1] << 16) |
....................            ((int32)buf[index + 2] <<  8) |
....................            ((int32)buf[index + 3]);
.................... }
.................... 
.................... unsigned int32 int32_lsb_to_msb(unsigned int32 value)
.................... {
....................     return ((value & 0x000000FF) << 24) |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0xFF000000) >> 24);
.................... }
.................... 
.................... unsigned int32 int32_msb_to_lsb(unsigned int32 value)
.................... {
....................     return ((value & 0xFF000000) >> 24) |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x000000FF) << 24);
.................... }
.................... // End of file
.................... 
.................... #include "../lib/tool/smf_queue.c"
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x06AA1FFF
.................... #define CIGS_ENVIRO_START_ADDRESS 0x06AA2000
.................... #define CIGS_ENVIRO_END_ADDRESS 0x06B41FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS 0x06B42000
.................... #define CIGS_IV1_HEADER_END_ADDRESS 0x06BE1FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS 0x06BE2000
.................... #define CIGS_IV1_DATA_END_ADDRESS 0x06FE2FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS 0x06FE3000
.................... #define CIGS_IV2_HEADER_END_ADDRESS 0x07082FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS 0x07083000
.................... #define CIGS_IV2_DATA_END_ADDRESS 0x07483FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data)
.................... {   
....................    fprintf(PC, "Enqueue Flash Operation\r\n");
*
09BC8:  MOVLW  5A
09BCA:  MOVWF  FF6
09BCC:  MOVLW  03
09BCE:  MOVWF  FF7
09BD0:  MOVLW  00
09BD2:  MOVWF  FF8
09BD4:  CALL   1EDC
....................    int8 next_tail = (flash_queue.tail_index + 1) % SMF_QUEUE_SIZE;
09BD8:  MOVLW  01
09BDA:  MOVLB  1
09BDC:  ADDWF  x11,W
09BDE:  ANDLW  0F
09BE0:  MOVLB  2
09BE2:  MOVWF  x51
.................... 
....................    if(next_tail == flash_queue.head_index)
09BE4:  MOVLB  1
09BE6:  MOVF   x10,W
09BE8:  MOVLB  2
09BEA:  SUBWF  x51,W
09BEC:  BTFSC  FD8.2
09BEE:  BRA    9BF6
09BF0:  MOVLB  0
09BF2:  GOTO   9C0C
09BF6:  MOVLB  0
....................       printf("Flash queue is full!!!\r\n");
09BF8:  MOVLW  74
09BFA:  MOVWF  FF6
09BFC:  MOVLW  03
09BFE:  MOVWF  FF7
09C00:  MOVLW  00
09C02:  MOVWF  FF8
09C04:  CALL   1EDC
09C08:  GOTO   9E3E
....................       
....................    else
....................    {
....................       flash_queue.entries[flash_queue.tail_index].mission_id = data->mission_id;
09C0C:  MOVLB  1
09C0E:  MOVF   x11,W
09C10:  MULLW  0C
09C12:  MOVF   FF3,W
09C14:  MOVLB  2
09C16:  CLRF   x53
09C18:  MOVWF  x52
09C1A:  MOVLW  50
09C1C:  ADDWF  x52,W
09C1E:  MOVWF  01
09C20:  MOVLW  00
09C22:  ADDWFC x53,W
09C24:  MOVWF  03
09C26:  MOVF   01,W
09C28:  MOVWF  x54
09C2A:  MOVFF  03,255
09C2E:  MOVF   x4F,W
09C30:  MOVWF  FE9
09C32:  MOVF   x50,W
09C34:  MOVWF  FEA
09C36:  MOVF   FEF,W
09C38:  MOVWF  x56
09C3A:  MOVFF  255,FEA
09C3E:  MOVFF  254,FE9
09C42:  MOVFF  256,FEF
....................       flash_queue.entries[flash_queue.tail_index].func_type  = data->func_type;
09C46:  MOVLB  1
09C48:  MOVF   x11,W
09C4A:  MULLW  0C
09C4C:  MOVF   FF3,W
09C4E:  MOVLB  2
09C50:  CLRF   x53
09C52:  MOVWF  x52
09C54:  MOVLW  01
09C56:  ADDWF  x52,W
09C58:  MOVWF  01
09C5A:  MOVLW  00
09C5C:  ADDWFC x53,W
09C5E:  MOVWF  03
09C60:  MOVF   01,W
09C62:  ADDLW  50
09C64:  MOVWF  01
09C66:  MOVLW  00
09C68:  ADDWFC 03,F
09C6A:  MOVF   01,W
09C6C:  MOVWF  x52
09C6E:  MOVFF  03,253
09C72:  MOVLW  01
09C74:  ADDWF  x4F,W
09C76:  MOVWF  FE9
09C78:  MOVLW  00
09C7A:  ADDWFC x50,W
09C7C:  MOVWF  FEA
09C7E:  MOVF   FEF,W
09C80:  MOVWF  x54
09C82:  MOVFF  253,FEA
09C86:  MOVFF  252,FE9
09C8A:  MOVFF  254,FEF
....................       flash_queue.entries[flash_queue.tail_index].write_mode = data->write_mode;
09C8E:  MOVLB  1
09C90:  MOVF   x11,W
09C92:  MULLW  0C
09C94:  MOVF   FF3,W
09C96:  MOVLB  2
09C98:  CLRF   x53
09C9A:  MOVWF  x52
09C9C:  MOVLW  02
09C9E:  ADDWF  x52,W
09CA0:  MOVWF  01
09CA2:  MOVLW  00
09CA4:  ADDWFC x53,W
09CA6:  MOVWF  03
09CA8:  MOVF   01,W
09CAA:  ADDLW  50
09CAC:  MOVWF  01
09CAE:  MOVLW  00
09CB0:  ADDWFC 03,F
09CB2:  MOVF   01,W
09CB4:  MOVWF  x52
09CB6:  MOVFF  03,253
09CBA:  MOVLW  02
09CBC:  ADDWF  x4F,W
09CBE:  MOVWF  FE9
09CC0:  MOVLW  00
09CC2:  ADDWFC x50,W
09CC4:  MOVWF  FEA
09CC6:  MOVF   FEF,W
09CC8:  MOVWF  x54
09CCA:  MOVFF  253,FEA
09CCE:  MOVFF  252,FE9
09CD2:  MOVFF  254,FEF
....................       flash_queue.entries[flash_queue.tail_index].source_type = data->source_type;
09CD6:  MOVLB  1
09CD8:  MOVF   x11,W
09CDA:  MULLW  0C
09CDC:  MOVF   FF3,W
09CDE:  MOVLB  2
09CE0:  CLRF   x53
09CE2:  MOVWF  x52
09CE4:  MOVLW  03
09CE6:  ADDWF  x52,W
09CE8:  MOVWF  01
09CEA:  MOVLW  00
09CEC:  ADDWFC x53,W
09CEE:  MOVWF  03
09CF0:  MOVF   01,W
09CF2:  ADDLW  50
09CF4:  MOVWF  01
09CF6:  MOVLW  00
09CF8:  ADDWFC 03,F
09CFA:  MOVF   01,W
09CFC:  MOVWF  x52
09CFE:  MOVFF  03,253
09D02:  MOVLW  03
09D04:  ADDWF  x4F,W
09D06:  MOVWF  01
09D08:  MOVLW  00
09D0A:  ADDWFC x50,W
09D0C:  MOVWF  03
09D0E:  MOVF   01,W
09D10:  MOVWF  FE9
09D12:  MOVFF  03,FEA
09D16:  MOVLW  00
09D18:  BTFSC  FEF.0
09D1A:  MOVLW  01
09D1C:  MOVWF  01
09D1E:  BTFSS  01.0
09D20:  BRA    9D28
09D22:  MOVLB  0
09D24:  GOTO   9D38
09D28:  MOVLB  0
09D2A:  MOVFF  253,FEA
09D2E:  MOVFF  252,FE9
09D32:  BCF    FEF.0
09D34:  GOTO   9D42
09D38:  MOVFF  253,FEA
09D3C:  MOVFF  252,FE9
09D40:  BSF    FEF.0
....................       flash_queue.entries[flash_queue.tail_index].misf_start_addr = data->misf_start_addr;
09D42:  MOVLB  1
09D44:  MOVF   x11,W
09D46:  MULLW  0C
09D48:  MOVF   FF3,W
09D4A:  MOVLB  2
09D4C:  CLRF   x53
09D4E:  MOVWF  x52
09D50:  MOVLW  04
09D52:  ADDWF  x52,W
09D54:  MOVWF  01
09D56:  MOVLW  00
09D58:  ADDWFC x53,W
09D5A:  MOVWF  03
09D5C:  MOVF   01,W
09D5E:  ADDLW  50
09D60:  MOVWF  01
09D62:  MOVLW  00
09D64:  ADDWFC 03,F
09D66:  MOVF   01,W
09D68:  MOVWF  x52
09D6A:  MOVFF  03,253
09D6E:  MOVLW  04
09D70:  ADDWF  x4F,W
09D72:  MOVWF  FE9
09D74:  MOVLW  00
09D76:  ADDWFC x50,W
09D78:  MOVWF  FEA
09D7A:  MOVFF  FEF,00
09D7E:  MOVFF  FEC,01
09D82:  MOVFF  FEC,02
09D86:  MOVFF  FEC,03
09D8A:  MOVF   FED,F
09D8C:  MOVF   FED,F
09D8E:  MOVF   FED,F
09D90:  MOVFF  03,257
09D94:  MOVFF  02,256
09D98:  MOVFF  01,255
09D9C:  MOVFF  00,254
09DA0:  MOVFF  253,FEA
09DA4:  MOVFF  252,FE9
09DA8:  MOVFF  254,FEF
09DAC:  MOVFF  255,FEC
09DB0:  MOVFF  256,FEC
09DB4:  MOVFF  257,FEC
09DB8:  MOVF   FED,F
09DBA:  MOVF   FED,F
09DBC:  MOVF   FED,F
....................       flash_queue.entries[flash_queue.tail_index].misf_size = data->misf_size;
09DBE:  MOVLB  1
09DC0:  MOVF   x11,W
09DC2:  MULLW  0C
09DC4:  MOVF   FF3,W
09DC6:  MOVLB  2
09DC8:  CLRF   x53
09DCA:  MOVWF  x52
09DCC:  MOVLW  08
09DCE:  ADDWF  x52,W
09DD0:  MOVWF  01
09DD2:  MOVLW  00
09DD4:  ADDWFC x53,W
09DD6:  MOVWF  03
09DD8:  MOVF   01,W
09DDA:  ADDLW  50
09DDC:  MOVWF  01
09DDE:  MOVLW  00
09DE0:  ADDWFC 03,F
09DE2:  MOVF   01,W
09DE4:  MOVWF  x52
09DE6:  MOVFF  03,253
09DEA:  MOVLW  08
09DEC:  ADDWF  x4F,W
09DEE:  MOVWF  FE9
09DF0:  MOVLW  00
09DF2:  ADDWFC x50,W
09DF4:  MOVWF  FEA
09DF6:  MOVFF  FEF,00
09DFA:  MOVFF  FEC,01
09DFE:  MOVFF  FEC,02
09E02:  MOVFF  FEC,03
09E06:  MOVF   FED,F
09E08:  MOVF   FED,F
09E0A:  MOVF   FED,F
09E0C:  MOVFF  03,257
09E10:  MOVFF  02,256
09E14:  MOVFF  01,255
09E18:  MOVFF  00,254
09E1C:  MOVFF  253,FEA
09E20:  MOVFF  252,FE9
09E24:  MOVFF  254,FEF
09E28:  MOVFF  255,FEC
09E2C:  MOVFF  256,FEC
09E30:  MOVFF  257,FEC
09E34:  MOVF   FED,F
09E36:  MOVF   FED,F
09E38:  MOVF   FED,F
....................       flash_queue.tail_index = next_tail;
09E3A:  MOVFF  251,111
09E3E:  MOVLB  0
....................    }
09E40:  GOTO   A2C2 (RETURN)
.................... 
.................... 
.................... }
.................... 
.................... 
.................... FlashOperationStruct *dequeue_flash_operation()
.................... {
....................    if (flash_queue.head_index == flash_queue.tail_index)
*
0D94C:  MOVLB  1
0D94E:  MOVF   x11,W
0D950:  SUBWF  x10,W
0D952:  BTFSC  FD8.2
0D954:  BRA    D95C
0D956:  MOVLB  0
0D958:  GOTO   D97E
0D95C:  MOVLB  0
....................    {
....................       printf("Flash queue is empty\r\n");
0D95E:  MOVLW  8E
0D960:  MOVWF  FF6
0D962:  MOVLW  03
0D964:  MOVWF  FF7
0D966:  MOVLW  00
0D968:  MOVWF  FF8
0D96A:  CALL   1EDC
....................       return 0x00;
0D96E:  MOVLW  00
0D970:  MOVWF  01
0D972:  MOVLW  00
0D974:  MOVWF  02
0D976:  GOTO   D9AC
....................    }
0D97A:  GOTO   D9AC
....................    else
....................    {
....................       int8 current_head = flash_queue.head_index;
0D97E:  MOVFF  110,22B
....................       flash_queue.head_index = (flash_queue.head_index + 1) % SMF_QUEUE_SIZE;
0D982:  MOVLW  01
0D984:  MOVLB  1
0D986:  ADDWF  x10,W
0D988:  ANDLW  0F
0D98A:  MOVWF  x10
.................... 
.................... 
....................       return &flash_queue.entries[current_head];
0D98C:  MOVLB  2
0D98E:  MOVF   x2B,W
0D990:  MULLW  0C
0D992:  MOVF   FF3,W
0D994:  CLRF   03
0D996:  ADDLW  50
0D998:  MOVWF  01
0D99A:  MOVLW  00
0D99C:  ADDWFC 03,F
0D99E:  MOVF   01,W
0D9A0:  MOVWF  01
0D9A2:  MOVF   03,W
0D9A4:  MOVWF  02
0D9A6:  MOVLB  0
0D9A8:  GOTO   D9AC
....................    }
0D9AC:  GOTO   10084 (RETURN)
.................... }
.................... 
.................... int1 is_empty_flash_queue(void)
.................... {
....................    return flash_queue.head_index == flash_queue.tail_index;
*
0D856:  MOVLB  1
0D858:  MOVF   x11,W
0D85A:  SUBWF  x10,W
0D85C:  BTFSS  FD8.2
0D85E:  BRA    D866
0D860:  MOVLB  0
0D862:  GOTO   D86E
0D866:  MOVLB  0
0D868:  MOVLW  00
0D86A:  GOTO   D870
0D86E:  MOVLW  01
0D870:  MOVWF  01
0D872:  RETURN 0
.................... }
.................... 
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id)
.................... {
....................    SmfAddressStruct mis_struct = {0};
*
0F02C:  MOVLB  2
0F02E:  CLRF   x95
0F030:  CLRF   x96
0F032:  CLRF   x97
0F034:  CLRF   x98
0F036:  CLRF   x99
0F038:  CLRF   x9A
0F03A:  CLRF   x9B
0F03C:  CLRF   x9C
.................... 
....................    if (mission_id == CIGS_DATA_TABLE)
0F03E:  MOVF   x94,F
0F040:  BTFSC  FD8.2
0F042:  BRA    F04A
0F044:  MOVLB  0
0F046:  GOTO   F06E
0F04A:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_DATA_TABLE_START_ADDRESS;
0F04C:  MOVLW  06
0F04E:  MOVLB  2
0F050:  MOVWF  x98
0F052:  MOVLW  AA
0F054:  MOVWF  x97
0F056:  CLRF   x96
0F058:  CLRF   x95
....................       mis_struct.end_address   = CIGS_DATA_TABLE_END_ADDRESS;
0F05A:  MOVLW  06
0F05C:  MOVWF  x9C
0F05E:  MOVLW  AA
0F060:  MOVWF  x9B
0F062:  MOVLW  0F
0F064:  MOVWF  x9A
0F066:  SETF   x99
0F068:  MOVLB  0
....................    }
0F06A:  GOTO   F1AE
....................    else if (mission_id == CIGS_PICLOG_DATA)
0F06E:  MOVLB  2
0F070:  DECFSZ x94,W
0F072:  BRA    F078
0F074:  BRA    F07E
0F076:  MOVLB  0
0F078:  MOVLB  0
0F07A:  GOTO   F0A4
0F07E:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
0F080:  MOVLW  06
0F082:  MOVLB  2
0F084:  MOVWF  x98
0F086:  MOVLW  AA
0F088:  MOVWF  x97
0F08A:  MOVLW  10
0F08C:  MOVWF  x96
0F08E:  CLRF   x95
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
0F090:  MOVLW  06
0F092:  MOVWF  x9C
0F094:  MOVLW  AA
0F096:  MOVWF  x9B
0F098:  MOVLW  1F
0F09A:  MOVWF  x9A
0F09C:  SETF   x99
0F09E:  MOVLB  0
....................    }
0F0A0:  GOTO   F1AE
....................    else if (mission_id == CIGS_ENVIRO_DATA)
0F0A4:  MOVLB  2
0F0A6:  MOVF   x94,W
0F0A8:  SUBLW  02
0F0AA:  BTFSC  FD8.2
0F0AC:  BRA    F0B4
0F0AE:  MOVLB  0
0F0B0:  GOTO   F0DA
0F0B4:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
0F0B6:  MOVLW  06
0F0B8:  MOVLB  2
0F0BA:  MOVWF  x98
0F0BC:  MOVLW  AA
0F0BE:  MOVWF  x97
0F0C0:  MOVLW  10
0F0C2:  MOVWF  x96
0F0C4:  CLRF   x95
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
0F0C6:  MOVLW  06
0F0C8:  MOVWF  x9C
0F0CA:  MOVLW  AA
0F0CC:  MOVWF  x9B
0F0CE:  MOVLW  1F
0F0D0:  MOVWF  x9A
0F0D2:  SETF   x99
0F0D4:  MOVLB  0
....................    }
0F0D6:  GOTO   F1AE
....................    else if (mission_id == CIGS_IV1_HEADER)
0F0DA:  MOVLB  2
0F0DC:  MOVF   x94,W
0F0DE:  SUBLW  03
0F0E0:  BTFSC  FD8.2
0F0E2:  BRA    F0EA
0F0E4:  MOVLB  0
0F0E6:  GOTO   F110
0F0EA:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV1_HEADER_START_ADDRESS;
0F0EC:  MOVLW  06
0F0EE:  MOVLB  2
0F0F0:  MOVWF  x98
0F0F2:  MOVLW  B4
0F0F4:  MOVWF  x97
0F0F6:  MOVLW  20
0F0F8:  MOVWF  x96
0F0FA:  CLRF   x95
....................       mis_struct.end_address   = CIGS_IV1_HEADER_END_ADDRESS;
0F0FC:  MOVLW  06
0F0FE:  MOVWF  x9C
0F100:  MOVLW  BE
0F102:  MOVWF  x9B
0F104:  MOVLW  1F
0F106:  MOVWF  x9A
0F108:  SETF   x99
0F10A:  MOVLB  0
....................    }
0F10C:  GOTO   F1AE
....................    else if (mission_id == CIGS_IV1_DATA)
0F110:  MOVLB  2
0F112:  MOVF   x94,W
0F114:  SUBLW  04
0F116:  BTFSC  FD8.2
0F118:  BRA    F120
0F11A:  MOVLB  0
0F11C:  GOTO   F146
0F120:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV1_DATA_START_ADDRESS;
0F122:  MOVLW  06
0F124:  MOVLB  2
0F126:  MOVWF  x98
0F128:  MOVLW  BE
0F12A:  MOVWF  x97
0F12C:  MOVLW  20
0F12E:  MOVWF  x96
0F130:  CLRF   x95
....................       mis_struct.end_address   = CIGS_IV1_DATA_END_ADDRESS;
0F132:  MOVLW  06
0F134:  MOVWF  x9C
0F136:  MOVLW  FE
0F138:  MOVWF  x9B
0F13A:  MOVLW  2F
0F13C:  MOVWF  x9A
0F13E:  SETF   x99
0F140:  MOVLB  0
....................    }
0F142:  GOTO   F1AE
....................       else if (mission_id == CIGS_IV2_HEADER)
0F146:  MOVLB  2
0F148:  MOVF   x94,W
0F14A:  SUBLW  05
0F14C:  BTFSC  FD8.2
0F14E:  BRA    F156
0F150:  MOVLB  0
0F152:  GOTO   F17C
0F156:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV2_HEADER_START_ADDRESS;
0F158:  MOVLW  06
0F15A:  MOVLB  2
0F15C:  MOVWF  x98
0F15E:  MOVLW  FE
0F160:  MOVWF  x97
0F162:  MOVLW  30
0F164:  MOVWF  x96
0F166:  CLRF   x95
....................       mis_struct.end_address   = CIGS_IV2_HEADER_END_ADDRESS;
0F168:  MOVLW  07
0F16A:  MOVWF  x9C
0F16C:  MOVLW  08
0F16E:  MOVWF  x9B
0F170:  MOVLW  2F
0F172:  MOVWF  x9A
0F174:  SETF   x99
0F176:  MOVLB  0
....................    }
0F178:  GOTO   F1AE
....................    else if (mission_id == CIGS_IV2_DATA)
0F17C:  MOVLB  2
0F17E:  MOVF   x94,W
0F180:  SUBLW  06
0F182:  BTFSC  FD8.2
0F184:  BRA    F18C
0F186:  MOVLB  0
0F188:  GOTO   F1AE
0F18C:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV2_DATA_START_ADDRESS;
0F18E:  MOVLW  07
0F190:  MOVLB  2
0F192:  MOVWF  x98
0F194:  MOVLW  08
0F196:  MOVWF  x97
0F198:  MOVLW  30
0F19A:  MOVWF  x96
0F19C:  CLRF   x95
....................       mis_struct.end_address   = CIGS_IV2_DATA_END_ADDRESS;
0F19E:  MOVLW  07
0F1A0:  MOVWF  x9C
0F1A2:  MOVLW  48
0F1A4:  MOVWF  x9B
0F1A6:  MOVLW  3F
0F1A8:  MOVWF  x9A
0F1AA:  SETF   x99
0F1AC:  MOVLB  0
....................    }
....................    return mis_struct;
0F1AE:  MOVLW  95
0F1B0:  MOVWF  01
0F1B2:  MOVLW  02
0F1B4:  MOVWF  02
0F1B6:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "../lib/communication/communication.c"
.................... // #include "communication.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #include "mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
0508A:  MOVLB  2
0508C:  CLRF   x2D
0508E:  CLRF   x2E
05090:  CLRF   x2F
05092:  CLRF   x30
05094:  CLRF   x31
05096:  CLRF   x32
05098:  CLRF   x33
0509A:  CLRF   x34
0509C:  CLRF   x35
0509E:  CLRF   x36
050A0:  CLRF   x37
050A2:  CLRF   x38
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
050A4:  MOVLW  A6
050A6:  MOVWF  FF6
050A8:  MOVLW  03
050AA:  MOVWF  FF7
050AC:  MOVLW  00
050AE:  MOVWF  FF8
050B0:  MOVLB  0
050B2:  CALL   1EDC
....................    fprintf(PC, "\t[BOSS] >>> ");
050B6:  MOVLW  C6
050B8:  MOVWF  FF6
050BA:  MOVLW  03
050BC:  MOVWF  FF7
050BE:  MOVLW  00
050C0:  MOVWF  FF8
050C2:  CALL   1EDC
....................    for (int8 i = 0; i < receive_signal_size; i++)
050C6:  MOVLB  2
050C8:  CLRF   x39
050CA:  MOVLB  0
050CC:  MOVLB  2
050CE:  MOVF   x2C,W
050D0:  SUBWF  x39,W
050D2:  BTFSS  FD8.0
050D4:  BRA    50DC
050D6:  MOVLB  0
050D8:  GOTO   5118
050DC:  MOVLB  0
....................       fprintf(PC, "%X ", receive_signal[i]);
050DE:  MOVLB  2
050E0:  MOVF   x39,W
050E2:  ADDWF  x2A,W
050E4:  MOVWF  FE9
050E6:  MOVLW  00
050E8:  ADDWFC x2B,W
050EA:  MOVWF  FEA
050EC:  MOVFF  FEF,240
050F0:  MOVFF  240,A62
050F4:  MOVLW  37
050F6:  MOVLB  A
050F8:  MOVWF  x63
050FA:  MOVLB  0
050FC:  CALL   2126
05100:  MOVLW  20
05102:  BTFSS  FA6.6
05104:  GOTO   5102
05108:  MOVLB  E
0510A:  MOVWF  xF9
0510C:  MOVLB  0
0510E:  MOVLB  2
05110:  INCF   x39,F
05112:  MOVLB  0
05114:  GOTO   50CC
....................    fprintf(PC, "\r\n");
05118:  MOVLW  0D
0511A:  BTFSS  FA6.6
0511C:  GOTO   511A
05120:  MOVLB  E
05122:  MOVWF  xF9
05124:  MOVLW  0A
05126:  MOVLB  0
05128:  BTFSS  FA6.6
0512A:  GOTO   5128
0512E:  MOVLB  E
05130:  MOVWF  xF9
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
05132:  MOVFF  22B,241
05136:  MOVFF  22A,240
0513A:  MOVFF  22C,242
0513E:  MOVLB  0
05140:  GOTO   4D72
05144:  MOVFF  01,23A
....................    if (frame_start_position == -1)
05148:  MOVLB  2
0514A:  MOVF   x3A,W
0514C:  SUBLW  FF
0514E:  BTFSC  FD8.2
05150:  BRA    5158
05152:  MOVLB  0
05154:  GOTO   5166
05158:  MOVLB  0
....................       return command;
0515A:  MOVLW  2D
0515C:  MOVWF  01
0515E:  MOVLW  02
05160:  MOVWF  02
05162:  GOTO   5288
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
05166:  MOVLB  2
05168:  MOVF   x3A,W
0516A:  ADDWF  x2A,W
0516C:  MOVWF  01
0516E:  MOVLW  00
05170:  ADDWFC x2B,W
05172:  MOVWF  03
05174:  MOVF   01,W
05176:  MOVWF  x3B
05178:  MOVFF  03,23C
0517C:  MOVF   x3B,W
0517E:  MOVWF  FE9
05180:  MOVF   x3C,W
05182:  MOVWF  FEA
05184:  MOVF   FEF,W
05186:  ANDLW  0F
05188:  MOVWF  x3D
0518A:  MOVFF  23D,240
0518E:  MOVLB  0
05190:  GOTO   4E1A
05194:  MOVFF  01,23E
....................    if (content_size == -1)
05198:  MOVLB  2
0519A:  MOVF   x3E,W
0519C:  SUBLW  FF
0519E:  BTFSC  FD8.2
051A0:  BRA    51A8
051A2:  MOVLB  0
051A4:  GOTO   51B6
051A8:  MOVLB  0
....................       return command;
051AA:  MOVLW  2D
051AC:  MOVWF  01
051AE:  MOVLW  02
051B0:  MOVWF  02
051B2:  GOTO   5288
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
051B6:  MOVLB  2
051B8:  MOVF   x3A,W
051BA:  SUBWF  x2C,W
051BC:  MOVWF  x3F
....................    
....................    if (!check_crc(frame, receive_frame_size))
051BE:  MOVFF  23C,241
051C2:  MOVFF  23B,240
051C6:  MOVFF  23F,242
051CA:  MOVLB  0
051CC:  GOTO   4EDA
051D0:  MOVF   01,F
051D2:  BTFSS  FD8.2
051D4:  GOTO   51E4
....................       return command;
051D8:  MOVLW  2D
051DA:  MOVWF  01
051DC:  MOVLW  02
051DE:  MOVWF  02
051E0:  GOTO   5288
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
051E4:  MOVLB  2
051E6:  MOVF   x3B,W
051E8:  MOVWF  FE9
051EA:  MOVF   x3C,W
051EC:  MOVWF  FEA
051EE:  MOVF   FEF,W
051F0:  ANDLW  F0
051F2:  MOVWF  00
051F4:  SWAPF  00,W
051F6:  MOVWF  x40
051F8:  MOVLW  0F
051FA:  ANDWF  x40,F
051FC:  MOVFF  240,241
05200:  MOVLB  0
05202:  GOTO   4FCA
05206:  MOVF   01,F
05208:  BTFSS  FD8.2
0520A:  GOTO   521A
....................       return command;
0520E:  MOVLW  2D
05210:  MOVWF  01
05212:  MOVLW  02
05214:  MOVWF  02
05216:  GOTO   5288
.................... 
....................    command.frame_id = frame_id;
0521A:  MOVFF  23D,22D
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
0521E:  MOVLW  01
05220:  MOVLB  2
05222:  ADDWF  x3B,W
05224:  MOVWF  01
05226:  MOVLW  00
05228:  ADDWFC x3C,W
0522A:  MOVWF  03
0522C:  MOVF   01,W
0522E:  MOVWF  x40
05230:  MOVFF  03,241
05234:  MOVLW  02
05236:  SUBWF  x3F,W
05238:  MOVWF  x42
0523A:  MOVLW  02
0523C:  MOVWF  FEA
0523E:  MOVLW  30
05240:  MOVWF  FE9
05242:  MOVFF  241,FE2
05246:  MOVFF  240,FE1
0524A:  MOVF   x42,W
0524C:  MOVWF  01
0524E:  BTFSS  FD8.2
05250:  BRA    5258
05252:  MOVLB  0
05254:  GOTO   5264
05258:  MOVLB  0
0525A:  MOVFF  FE6,FEE
0525E:  DECFSZ 01,F
05260:  GOTO   525A
....................    command.size = receive_frame_size-2;
05264:  MOVLW  02
05266:  MOVLB  2
05268:  SUBWF  x3F,W
0526A:  MOVWF  x2E
....................    command.is_exist = TRUE;
0526C:  BSF    x2F.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
0526E:  MOVLW  D4
05270:  MOVWF  FF6
05272:  MOVLW  03
05274:  MOVWF  FF7
05276:  MOVLW  00
05278:  MOVWF  FF8
0527A:  MOVLB  0
0527C:  CALL   1EDC
....................    return command;
05280:  MOVLW  2D
05282:  MOVWF  01
05284:  MOVLW  02
05286:  MOVWF  02
05288:  GOTO   10864 (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
04D72:  MOVLB  2
04D74:  CLRF   x43
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
04D76:  CLRF   x43
04D78:  MOVLB  0
04D7A:  MOVLW  01
04D7C:  MOVLB  2
04D7E:  SUBWF  x42,W
04D80:  SUBWF  x43,W
04D82:  BTFSS  FD8.0
04D84:  BRA    4D8C
04D86:  MOVLB  0
04D88:  GOTO   4DC4
04D8C:  MOVLB  0
....................       if(receive_signal[i] == SFD)
04D8E:  MOVLB  2
04D90:  MOVF   x43,W
04D92:  ADDWF  x40,W
04D94:  MOVWF  FE9
04D96:  MOVLW  00
04D98:  ADDWFC x41,W
04D9A:  MOVWF  FEA
04D9C:  MOVF   FEF,W
04D9E:  SUBLW  AA
04DA0:  BTFSC  FD8.2
04DA2:  BRA    4DAA
04DA4:  MOVLB  0
04DA6:  GOTO   4DBA
04DAA:  MOVLB  0
....................          return i+1;
04DAC:  MOVLW  01
04DAE:  MOVLB  2
04DB0:  ADDWF  x43,W
04DB2:  MOVWF  01
04DB4:  MOVLB  0
04DB6:  GOTO   4E16
04DBA:  MOVLB  2
04DBC:  INCF   x43,F
04DBE:  MOVLB  0
04DC0:  GOTO   4D7A
....................    if (receive_signal[i] == SFD)
04DC4:  MOVLB  2
04DC6:  MOVF   x43,W
04DC8:  ADDWF  x40,W
04DCA:  MOVWF  FE9
04DCC:  MOVLW  00
04DCE:  ADDWFC x41,W
04DD0:  MOVWF  FEA
04DD2:  MOVF   FEF,W
04DD4:  SUBLW  AA
04DD6:  BTFSC  FD8.2
04DD8:  BRA    4DE0
04DDA:  MOVLB  0
04DDC:  GOTO   4DFE
04DE0:  MOVLB  0
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
04DE2:  MOVLW  F0
04DE4:  MOVWF  FF6
04DE6:  MOVLW  03
04DE8:  MOVWF  FF7
04DEA:  MOVLW  00
04DEC:  MOVWF  FF8
04DEE:  CALL   1EDC
....................       return -1;
04DF2:  MOVLW  FF
04DF4:  MOVWF  01
04DF6:  GOTO   4E16
....................    }
04DFA:  GOTO   4E16
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
04DFE:  MOVLW  06
04E00:  MOVWF  FF6
04E02:  MOVLW  04
04E04:  MOVWF  FF7
04E06:  MOVLW  00
04E08:  MOVWF  FF8
04E0A:  CALL   1EDC
....................       return -1;
04E0E:  MOVLW  FF
04E10:  MOVWF  01
04E12:  GOTO   4E16
....................    }
04E16:  GOTO   5144 (RETURN)
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
04E1A:  MOVLB  2
04E1C:  CLRF   x41
04E1E:  MOVLB  0
04E20:  MOVLB  2
04E22:  MOVF   x41,W
04E24:  SUBLW  02
04E26:  BTFSC  FD8.0
04E28:  BRA    4E30
04E2A:  MOVLB  0
04E2C:  GOTO   4E8E
04E30:  MOVLB  0
....................       if (frame_id == frame_ids[i].id)
04E32:  BCF    FD8.0
04E34:  MOVLB  2
04E36:  RLCF   x41,W
04E38:  CLRF   x43
04E3A:  MOVWF  x42
04E3C:  MOVLW  1A
04E3E:  ADDWF  x42,W
04E40:  MOVWF  FE9
04E42:  MOVLW  01
04E44:  ADDWFC x43,W
04E46:  MOVWF  FEA
04E48:  MOVF   FEF,W
04E4A:  SUBWF  x40,W
04E4C:  BTFSC  FD8.2
04E4E:  BRA    4E56
04E50:  MOVLB  0
04E52:  GOTO   4E84
04E56:  MOVLB  0
....................          return frame_ids[i].length;
04E58:  BCF    FD8.0
04E5A:  MOVLB  2
04E5C:  RLCF   x41,W
04E5E:  CLRF   x43
04E60:  MOVWF  x42
04E62:  MOVLW  01
04E64:  ADDWF  x42,W
04E66:  MOVWF  01
04E68:  MOVLW  00
04E6A:  ADDWFC x43,W
04E6C:  MOVWF  03
04E6E:  MOVF   01,W
04E70:  ADDLW  1A
04E72:  MOVWF  FE9
04E74:  MOVLW  01
04E76:  ADDWFC 03,W
04E78:  MOVWF  FEA
04E7A:  MOVF   FEF,W
04E7C:  MOVWF  01
04E7E:  MOVLB  0
04E80:  GOTO   4ED4
04E84:  MOVLB  2
04E86:  INCF   x41,F
04E88:  MOVLB  0
04E8A:  GOTO   4E20
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
04E8E:  MOVLW  18
04E90:  MOVWF  FF6
04E92:  MOVLW  04
04E94:  MOVWF  FF7
04E96:  MOVLW  00
04E98:  MOVWF  FF8
04E9A:  MOVLW  1F
04E9C:  MOVLB  3
04E9E:  MOVWF  x16
04EA0:  MOVLB  0
04EA2:  CALL   1F12
04EA6:  MOVFF  240,A62
04EAA:  MOVLW  37
04EAC:  MOVLB  A
04EAE:  MOVWF  x63
04EB0:  MOVLB  0
04EB2:  CALL   2126
04EB6:  MOVLW  0D
04EB8:  BTFSS  FA6.6
04EBA:  GOTO   4EB8
04EBE:  MOVLB  E
04EC0:  MOVWF  xF9
04EC2:  MOVLW  0A
04EC4:  MOVLB  0
04EC6:  BTFSS  FA6.6
04EC8:  GOTO   4EC6
04ECC:  MOVLB  E
04ECE:  MOVWF  xF9
....................    return -1;
04ED0:  MOVLW  FF
04ED2:  MOVWF  01
04ED4:  MOVLB  0
04ED6:  GOTO   5194 (RETURN)
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
04EDA:  MOVLW  01
04EDC:  MOVLB  2
04EDE:  SUBWF  x42,W
04EE0:  ADDWF  x40,W
04EE2:  MOVWF  FE9
04EE4:  MOVLW  00
04EE6:  ADDWFC x41,W
04EE8:  MOVWF  FEA
04EEA:  MOVFF  FEF,243
04EEE:  MOVLW  01
04EF0:  SUBWF  x42,W
04EF2:  MOVWF  x45
04EF4:  MOVFF  241,BD6
04EF8:  MOVFF  240,BD5
04EFC:  MOVFF  245,BD7
04F00:  MOVLB  0
04F02:  CALL   2D3E
04F06:  MOVFF  01,244
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
04F0A:  MOVLB  2
04F0C:  MOVF   x44,W
04F0E:  SUBWF  x43,W
04F10:  BTFSC  FD8.2
04F12:  BRA    4F1A
04F14:  MOVLB  0
04F16:  GOTO   4F28
04F1A:  MOVLB  0
....................       return TRUE;
04F1C:  MOVLW  01
04F1E:  MOVWF  01
04F20:  GOTO   4FC6
04F24:  GOTO   4FC6
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
04F28:  MOVLW  3C
04F2A:  MOVWF  FF6
04F2C:  MOVLW  04
04F2E:  MOVWF  FF7
04F30:  MOVLW  00
04F32:  MOVWF  FF8
04F34:  CALL   1EDC
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
04F38:  MOVLW  4E
04F3A:  MOVWF  FF6
04F3C:  MOVLW  04
04F3E:  MOVWF  FF7
04F40:  MOVLW  00
04F42:  MOVWF  FF8
04F44:  MOVLW  13
04F46:  MOVLB  3
04F48:  MOVWF  x16
04F4A:  MOVLB  0
04F4C:  CALL   1F12
04F50:  MOVFF  243,A62
04F54:  MOVLW  37
04F56:  MOVLB  A
04F58:  MOVWF  x63
04F5A:  MOVLB  0
04F5C:  CALL   2126
04F60:  MOVLW  0D
04F62:  BTFSS  FA6.6
04F64:  GOTO   4F62
04F68:  MOVLB  E
04F6A:  MOVWF  xF9
04F6C:  MOVLW  0A
04F6E:  MOVLB  0
04F70:  BTFSS  FA6.6
04F72:  GOTO   4F70
04F76:  MOVLB  E
04F78:  MOVWF  xF9
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
04F7A:  MOVLW  66
04F7C:  MOVWF  FF6
04F7E:  MOVLW  04
04F80:  MOVWF  FF7
04F82:  MOVLW  00
04F84:  MOVWF  FF8
04F86:  MOVLW  13
04F88:  MOVLB  3
04F8A:  MOVWF  x16
04F8C:  MOVLB  0
04F8E:  CALL   1F12
04F92:  MOVFF  244,A62
04F96:  MOVLW  37
04F98:  MOVLB  A
04F9A:  MOVWF  x63
04F9C:  MOVLB  0
04F9E:  CALL   2126
04FA2:  MOVLW  0D
04FA4:  BTFSS  FA6.6
04FA6:  GOTO   4FA4
04FAA:  MOVLB  E
04FAC:  MOVWF  xF9
04FAE:  MOVLW  0A
04FB0:  MOVLB  0
04FB2:  BTFSS  FA6.6
04FB4:  GOTO   4FB2
04FB8:  MOVLB  E
04FBA:  MOVWF  xF9
....................       return FALSE;
04FBC:  MOVLW  00
04FBE:  MOVWF  01
04FC0:  MOVLB  0
04FC2:  GOTO   4FC6
....................    }
04FC6:  GOTO   51D0 (RETURN)
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
04FCA:  MOVLB  2
04FCC:  MOVF   x41,W
04FCE:  SUBLW  0C
04FD0:  BTFSC  FD8.2
04FD2:  BRA    4FDA
04FD4:  MOVLB  0
04FD6:  GOTO   4FE8
04FDA:  MOVLB  0
....................       return TRUE;
04FDC:  MOVLW  01
04FDE:  MOVWF  01
04FE0:  GOTO   5086
04FE4:  GOTO   5086
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
04FE8:  MOVLW  7E
04FEA:  MOVWF  FF6
04FEC:  MOVLW  04
04FEE:  MOVWF  FF7
04FF0:  MOVLW  00
04FF2:  MOVWF  FF8
04FF4:  CALL   1EDC
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
04FF8:  MOVLW  A0
04FFA:  MOVWF  FF6
04FFC:  MOVLW  04
04FFE:  MOVWF  FF7
05000:  MOVLW  00
05002:  MOVWF  FF8
05004:  MOVLW  13
05006:  MOVLB  3
05008:  MOVWF  x16
0500A:  MOVLB  0
0500C:  CALL   1F12
05010:  MOVFF  241,A62
05014:  MOVLW  37
05016:  MOVLB  A
05018:  MOVWF  x63
0501A:  MOVLB  0
0501C:  CALL   2126
05020:  MOVLW  0D
05022:  BTFSS  FA6.6
05024:  GOTO   5022
05028:  MOVLB  E
0502A:  MOVWF  xF9
0502C:  MOVLW  0A
0502E:  MOVLB  0
05030:  BTFSS  FA6.6
05032:  GOTO   5030
05036:  MOVLB  E
05038:  MOVWF  xF9
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
0503A:  MOVLW  B8
0503C:  MOVWF  FF6
0503E:  MOVLW  04
05040:  MOVWF  FF7
05042:  MOVLW  00
05044:  MOVWF  FF8
05046:  MOVLW  13
05048:  MOVLB  3
0504A:  MOVWF  x16
0504C:  MOVLB  0
0504E:  CALL   1F12
05052:  MOVLW  0C
05054:  MOVLB  A
05056:  MOVWF  x62
05058:  MOVLW  37
0505A:  MOVWF  x63
0505C:  MOVLB  0
0505E:  CALL   2126
05062:  MOVLW  0D
05064:  BTFSS  FA6.6
05066:  GOTO   5064
0506A:  MOVLB  E
0506C:  MOVWF  xF9
0506E:  MOVLW  0A
05070:  MOVLB  0
05072:  BTFSS  FA6.6
05074:  GOTO   5072
05078:  MOVLB  E
0507A:  MOVWF  xF9
....................       return FALSE;  
0507C:  MOVLW  00
0507E:  MOVWF  01
05080:  MOVLB  0
05082:  GOTO   5086
....................    }
05086:  GOTO   5206 (RETURN)
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
05398:  MOVLW  AA
0539A:  MOVLB  2
0539C:  MOVWF  x2F
....................    data[1] = (BOSS_PIC << 4) | frame_id;
0539E:  MOVF   x2B,W
053A0:  IORLW  50
053A2:  MOVWF  x30
....................    memcpy(&data[2], content, size);
053A4:  MOVLW  02
053A6:  MOVWF  FEA
053A8:  MOVLW  31
053AA:  MOVWF  FE9
053AC:  MOVFF  22D,FE2
053B0:  MOVFF  22C,FE1
053B4:  MOVF   x2E,W
053B6:  MOVWF  01
053B8:  BTFSS  FD8.2
053BA:  BRA    53C2
053BC:  MOVLB  0
053BE:  GOTO   53CE
053C2:  MOVLB  0
053C4:  MOVFF  FE6,FEE
053C8:  DECFSZ 01,F
053CA:  GOTO   53C4
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
053CE:  MOVLW  02
053D0:  MOVLB  2
053D2:  ADDWF  x2E,W
053D4:  MOVWF  x3F
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
053D6:  CLRF   03
053D8:  MOVF   x3F,W
053DA:  ADDLW  2F
053DC:  MOVWF  01
053DE:  MOVLW  02
053E0:  ADDWFC 03,F
053E2:  MOVF   01,W
053E4:  MOVWF  x41
053E6:  MOVFF  03,242
053EA:  MOVLW  01
053EC:  SUBWF  x3F,W
053EE:  MOVWF  x43
053F0:  MOVLW  02
053F2:  MOVLB  B
053F4:  MOVWF  xD6
053F6:  MOVLW  30
053F8:  MOVWF  xD5
053FA:  MOVFF  243,BD7
053FE:  MOVLB  0
05400:  CALL   2D3E
05404:  MOVFF  242,FEA
05408:  MOVFF  241,FE9
0540C:  MOVFF  01,FEF
....................    int8 data_size = payload_size + 1; // '1' is for CRC
05410:  MOVLW  01
05412:  MOVLB  2
05414:  ADDWF  x3F,W
05416:  MOVWF  x40
....................    
....................    transmit(data, data_size);
05418:  MOVLW  02
0541A:  MOVWF  x42
0541C:  MOVLW  2F
0541E:  MOVWF  x41
05420:  MOVFF  240,243
05424:  MOVLB  0
05426:  GOTO   52DA
0542A:  RETURN 0
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
052DA:  MOVLB  2
052DC:  CLRF   x44
052DE:  MOVLB  0
052E0:  MOVLB  2
052E2:  MOVF   x43,W
052E4:  SUBWF  x44,W
052E6:  BTFSS  FD8.0
052E8:  BRA    52F0
052EA:  MOVLB  0
052EC:  GOTO   5316
052F0:  MOVLB  0
....................       fputc(data[i], BOSS);
052F2:  MOVLB  2
052F4:  MOVF   x44,W
052F6:  ADDWF  x41,W
052F8:  MOVWF  FE9
052FA:  MOVLW  00
052FC:  ADDWFC x42,W
052FE:  MOVWF  FEA
05300:  MOVFF  FEF,246
05304:  MOVF   x46,W
05306:  MOVLB  0
05308:  GOTO   52CA
0530C:  MOVLB  2
0530E:  INCF   x44,F
05310:  MOVLB  0
05312:  GOTO   52E0
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
05316:  MOVLW  D0
05318:  MOVWF  FF6
0531A:  MOVLW  04
0531C:  MOVWF  FF7
0531E:  MOVLW  00
05320:  MOVWF  FF8
05322:  CALL   1EDC
....................    for(int i = 0; i < data_size; i++)
05326:  MOVLB  2
05328:  CLRF   x45
0532A:  MOVLB  0
0532C:  MOVLB  2
0532E:  MOVF   x43,W
05330:  SUBWF  x45,W
05332:  BTFSS  FD8.0
05334:  BRA    533C
05336:  MOVLB  0
05338:  GOTO   5378
0533C:  MOVLB  0
....................       fprintf(PC, "%X ", data[i]);
0533E:  MOVLB  2
05340:  MOVF   x45,W
05342:  ADDWF  x41,W
05344:  MOVWF  FE9
05346:  MOVLW  00
05348:  ADDWFC x42,W
0534A:  MOVWF  FEA
0534C:  MOVFF  FEF,246
05350:  MOVFF  246,A62
05354:  MOVLW  37
05356:  MOVLB  A
05358:  MOVWF  x63
0535A:  MOVLB  0
0535C:  CALL   2126
05360:  MOVLW  20
05362:  BTFSS  FA6.6
05364:  GOTO   5362
05368:  MOVLB  E
0536A:  MOVWF  xF9
0536C:  MOVLB  0
0536E:  MOVLB  2
05370:  INCF   x45,F
05372:  MOVLB  0
05374:  GOTO   532C
....................    fprintf(PC, "\r\n");
05378:  MOVLW  0D
0537A:  BTFSS  FA6.6
0537C:  GOTO   537A
05380:  MOVLB  E
05382:  MOVWF  xF9
05384:  MOVLW  0A
05386:  MOVLB  0
05388:  BTFSS  FA6.6
0538A:  GOTO   5388
0538E:  MOVLB  E
05390:  MOVWF  xF9
05392:  MOVLB  0
05394:  GOTO   542A (RETURN)
.................... }
.................... 
.................... #include "../lib/communication/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    return command;
.................... }
.................... 
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
0542C:  MOVLW  0F
0542E:  MOVLB  2
05430:  MOVWF  x2B
05432:  CLRF   x2D
05434:  CLRF   x2C
05436:  CLRF   x2E
05438:  MOVLB  0
0543A:  CALL   5398
0543E:  RETURN 0
.................... }
.................... 
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
0D8DC:  MOVLW  03
0D8DE:  MOVLB  2
0D8E0:  MOVWF  x2B
0D8E2:  CLRF   x2D
0D8E4:  MOVLW  4C
0D8E6:  MOVWF  x2C
0D8E8:  MOVLW  04
0D8EA:  MOVWF  x2E
0D8EC:  MOVLB  0
0D8EE:  CALL   5398
0D8F2:  GOTO   D91A (RETURN)
.................... }
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (kbhit())
....................    {
....................       fgetc(BOSS);
....................       transmit_status();
....................    }
.................... }
.................... 
.................... 
.................... 
.................... // コア機能実装ファイル
.................... #include "domain/mmj_cigs_iv.c"
.................... #include "mmj_cigs_iv.h"              
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFFFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE-1];
.................... 
....................     struct {
....................         unsigned int16 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int16 time_msec;
....................         meas_data_t env_data[2];
....................         meas_data_t iv_data[16];
.................... 
....................     }header;
....................     struct {
....................         meas_data_t iv_data[21];
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/mmj_cigs_config.h"      
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../device_driver/ad7490_driver.h"  
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../device_driver/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_flash.h"               
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/mission_tools.h"   
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../hal/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... 
.................... unsigned int32 get_current_msec();
.................... void set_current_msec(unsigned int32 msec);
.................... void add_current_msec(unsigned int32 msec);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... void sweep_with_print()
*
0C016:  MOVLW  01
0C018:  MOVLB  2
0C01A:  MOVWF  x2E
0C01C:  MOVLW  2C
0C01E:  MOVWF  x2D
0C020:  MOVLW  02
0C022:  MOVWF  x30
0C024:  MOVLW  BC
0C026:  MOVWF  x2F
.................... {
....................     unsigned int16 curr_threshold = 300;
....................     unsigned int16 curr_limit = 700;
.................... 
....................     // Enable both CIGS ports
....................     connect_port1();
0C028:  MOVLB  0
0C02A:  CALL   4D3E
....................     connect_port2();
0C02E:  CALL   4D46
....................     mcp4901_1_write(0); 
0C032:  MOVLB  A
0C034:  CLRF   x64
0C036:  CLRF   x63
0C038:  MOVLB  0
0C03A:  CALL   246E
....................     mcp4901_2_write(0);
0C03E:  MOVLB  A
0C040:  CLRF   x64
0C042:  CLRF   x63
0C044:  MOVLB  0
0C046:  CALL   24B0
....................     delay_ms(100);
0C04A:  MOVLW  64
0C04C:  MOVLB  B
0C04E:  MOVWF  xA3
0C050:  MOVLB  0
0C052:  CALL   1EAE
....................     
....................     // Init Port1
....................     sweep_config_t port1 = {0};
0C056:  MOVLB  2
0C058:  CLRF   x31
0C05A:  CLRF   x32
0C05C:  CLRF   x33
0C05E:  CLRF   x34
0C060:  CLRF   x35
0C062:  CLRF   x36
0C064:  CLRF   x37
0C066:  CLRF   x38
0C068:  CLRF   x39
0C06A:  CLRF   x3A
0C06C:  CLRF   x3B
0C06E:  CLRF   x3C
0C070:  CLRF   x3D
0C072:  CLRF   x3E
0C074:  CLRF   x3F
0C076:  CLRF   x40
0C078:  CLRF   x41
0C07A:  CLRF   x42
0C07C:  CLRF   x43
0C07E:  CLRF   x44
0C080:  CLRF   x45
0C082:  CLRF   x46
0C084:  CLRF   x47
0C086:  CLRF   x48
0C088:  CLRF   x49
0C08A:  CLRF   x4A
0C08C:  CLRF   x4B
0C08E:  CLRF   x4C
0C090:  CLRF   x4D
0C092:  CLRF   x4E
0C094:  CLRF   x4F
0C096:  CLRF   x50
0C098:  CLRF   x51
0C09A:  CLRF   x52
0C09C:  CLRF   x53
0C09E:  CLRF   x54
0C0A0:  CLRF   x55
0C0A2:  CLRF   x56
0C0A4:  CLRF   x57
0C0A6:  CLRF   x58
0C0A8:  CLRF   x59
0C0AA:  CLRF   x5A
0C0AC:  CLRF   x5B
0C0AE:  CLRF   x5C
0C0B0:  CLRF   x5D
0C0B2:  CLRF   x5E
0C0B4:  CLRF   x5F
0C0B6:  CLRF   x60
0C0B8:  CLRF   x61
0C0BA:  CLRF   x62
0C0BC:  CLRF   x63
0C0BE:  CLRF   x64
0C0C0:  CLRF   x65
0C0C2:  CLRF   x66
0C0C4:  CLRF   x67
0C0C6:  CLRF   x68
0C0C8:  CLRF   x69
0C0CA:  CLRF   x6A
0C0CC:  CLRF   x6B
0C0CE:  CLRF   x6C
0C0D0:  CLRF   x6D
0C0D2:  CLRF   x6E
0C0D4:  CLRF   x6F
0C0D6:  CLRF   x70
0C0D8:  CLRF   x71
0C0DA:  CLRF   x72
0C0DC:  CLRF   x73
0C0DE:  CLRF   x74
0C0E0:  CLRF   x75
0C0E2:  CLRF   x76
0C0E4:  CLRF   x77
0C0E6:  CLRF   x78
0C0E8:  CLRF   x79
0C0EA:  CLRF   x7A
0C0EC:  CLRF   x7B
0C0EE:  CLRF   x7C
0C0F0:  CLRF   x7D
0C0F2:  CLRF   x7E
0C0F4:  CLRF   x7F
0C0F6:  CLRF   x80
0C0F8:  CLRF   x81
0C0FA:  CLRF   x82
0C0FC:  CLRF   x83
0C0FE:  CLRF   x84
0C100:  CLRF   x85
0C102:  CLRF   x86
0C104:  CLRF   x87
0C106:  CLRF   x88
0C108:  CLRF   x89
0C10A:  CLRF   x8A
0C10C:  CLRF   x8B
0C10E:  CLRF   x8C
0C110:  CLRF   x8D
0C112:  CLRF   x8E
0C114:  CLRF   x8F
0C116:  CLRF   x90
0C118:  CLRF   x91
0C11A:  CLRF   x92
0C11C:  CLRF   x93
0C11E:  CLRF   x94
0C120:  CLRF   x95
0C122:  CLRF   x96
0C124:  CLRF   x97
0C126:  CLRF   x98
0C128:  CLRF   x99
0C12A:  CLRF   x9A
0C12C:  CLRF   x9B
0C12E:  CLRF   x9C
0C130:  CLRF   x9D
0C132:  CLRF   x9E
0C134:  CLRF   x9F
0C136:  CLRF   xA0
0C138:  CLRF   xA1
0C13A:  CLRF   xA2
0C13C:  CLRF   xA3
0C13E:  CLRF   xA4
0C140:  CLRF   xA5
0C142:  CLRF   xA6
0C144:  CLRF   xA7
0C146:  CLRF   xA8
0C148:  CLRF   xA9
0C14A:  CLRF   xAA
0C14C:  CLRF   xAB
0C14E:  CLRF   xAC
0C150:  CLRF   xAD
0C152:  CLRF   xAE
0C154:  CLRF   xAF
0C156:  CLRF   xB0
0C158:  CLRF   xB1
0C15A:  CLRF   xB2
0C15C:  CLRF   xB3
0C15E:  CLRF   xB4
0C160:  CLRF   xB5
0C162:  CLRF   xB6
0C164:  CLRF   xB7
0C166:  CLRF   xB8
0C168:  CLRF   xB9
0C16A:  CLRF   xBA
0C16C:  CLRF   xBB
0C16E:  CLRF   xBC
0C170:  CLRF   xBD
0C172:  CLRF   xBE
0C174:  CLRF   xBF
0C176:  CLRF   xC0
0C178:  CLRF   xC1
0C17A:  CLRF   xC2
0C17C:  CLRF   xC3
0C17E:  CLRF   xC4
0C180:  CLRF   xC5
0C182:  CLRF   xC6
0C184:  CLRF   xC7
0C186:  CLRF   xC8
0C188:  CLRF   xC9
0C18A:  CLRF   xCA
0C18C:  CLRF   xCB
0C18E:  CLRF   xCC
0C190:  CLRF   xCD
0C192:  CLRF   xCE
0C194:  CLRF   xCF
0C196:  CLRF   xD0
0C198:  CLRF   xD1
0C19A:  CLRF   xD2
0C19C:  CLRF   xD3
0C19E:  CLRF   xD4
0C1A0:  CLRF   xD5
0C1A2:  CLRF   xD6
0C1A4:  CLRF   xD7
0C1A6:  CLRF   xD8
0C1A8:  CLRF   xD9
0C1AA:  CLRF   xDA
0C1AC:  CLRF   xDB
0C1AE:  CLRF   xDC
0C1B0:  CLRF   xDD
0C1B2:  CLRF   xDE
0C1B4:  CLRF   xDF
0C1B6:  CLRF   xE0
0C1B8:  CLRF   xE1
0C1BA:  CLRF   xE2
0C1BC:  CLRF   xE3
0C1BE:  CLRF   xE4
0C1C0:  CLRF   xE5
0C1C2:  CLRF   xE6
0C1C4:  CLRF   xE7
0C1C6:  CLRF   xE8
0C1C8:  CLRF   xE9
0C1CA:  CLRF   xEA
0C1CC:  CLRF   xEB
0C1CE:  CLRF   xEC
0C1D0:  CLRF   xED
0C1D2:  CLRF   xEE
0C1D4:  CLRF   xEF
0C1D6:  CLRF   xF0
0C1D8:  CLRF   xF1
0C1DA:  CLRF   xF2
0C1DC:  CLRF   xF3
0C1DE:  CLRF   xF4
0C1E0:  CLRF   xF5
0C1E2:  CLRF   xF6
0C1E4:  CLRF   xF7
0C1E6:  CLRF   xF8
0C1E8:  CLRF   xF9
0C1EA:  CLRF   xFA
0C1EC:  CLRF   xFB
0C1EE:  CLRF   xFC
0C1F0:  CLRF   xFD
0C1F2:  CLRF   xFE
0C1F4:  CLRF   xFF
0C1F6:  MOVLB  3
0C1F8:  CLRF   x00
0C1FA:  CLRF   x01
0C1FC:  CLRF   x02
0C1FE:  CLRF   x03
0C200:  CLRF   x04
0C202:  CLRF   x05
0C204:  CLRF   x06
0C206:  CLRF   x07
0C208:  CLRF   x08
0C20A:  CLRF   x09
0C20C:  CLRF   x0A
0C20E:  CLRF   x0B
0C210:  CLRF   x0C
0C212:  CLRF   x0D
0C214:  CLRF   x0E
0C216:  CLRF   x0F
0C218:  CLRF   x10
0C21A:  CLRF   x11
0C21C:  CLRF   x12
0C21E:  CLRF   x13
0C220:  CLRF   x14
0C222:  CLRF   x15
0C224:  CLRF   x16
0C226:  CLRF   x17
0C228:  CLRF   x18
0C22A:  CLRF   x19
0C22C:  CLRF   x1A
0C22E:  CLRF   x1B
0C230:  CLRF   x1C
0C232:  CLRF   x1D
0C234:  CLRF   x1E
0C236:  CLRF   x1F
0C238:  CLRF   x20
0C23A:  CLRF   x21
0C23C:  CLRF   x22
0C23E:  CLRF   x23
0C240:  CLRF   x24
0C242:  CLRF   x25
0C244:  CLRF   x26
0C246:  CLRF   x27
0C248:  CLRF   x28
0C24A:  CLRF   x29
0C24C:  CLRF   x2A
0C24E:  CLRF   x2B
0C250:  CLRF   x2C
0C252:  CLRF   x2D
0C254:  CLRF   x2E
0C256:  CLRF   x2F
0C258:  CLRF   x30
0C25A:  CLRF   x31
0C25C:  CLRF   x32
0C25E:  CLRF   x33
0C260:  CLRF   x34
0C262:  CLRF   x35
0C264:  CLRF   x36
0C266:  CLRF   x37
0C268:  CLRF   x38
0C26A:  CLRF   x39
0C26C:  CLRF   x3A
0C26E:  CLRF   x3B
0C270:  CLRF   x3C
0C272:  CLRF   x3D
0C274:  CLRF   x3E
0C276:  CLRF   x3F
0C278:  CLRF   x40
0C27A:  CLRF   x41
0C27C:  CLRF   x42
0C27E:  CLRF   x43
0C280:  CLRF   x44
0C282:  CLRF   x45
0C284:  CLRF   x46
0C286:  CLRF   x47
0C288:  CLRF   x48
0C28A:  CLRF   x49
0C28C:  CLRF   x4A
0C28E:  CLRF   x4B
0C290:  CLRF   x4C
0C292:  CLRF   x4D
0C294:  CLRF   x4E
0C296:  CLRF   x4F
0C298:  CLRF   x50
0C29A:  CLRF   x51
0C29C:  CLRF   x52
0C29E:  CLRF   x53
0C2A0:  CLRF   x54
0C2A2:  CLRF   x55
0C2A4:  CLRF   x56
0C2A6:  CLRF   x57
0C2A8:  CLRF   x58
0C2AA:  CLRF   x59
0C2AC:  CLRF   x5A
0C2AE:  CLRF   x5B
0C2B0:  CLRF   x5C
0C2B2:  CLRF   x5D
0C2B4:  CLRF   x5E
0C2B6:  CLRF   x5F
0C2B8:  CLRF   x60
0C2BA:  CLRF   x61
0C2BC:  CLRF   x62
0C2BE:  CLRF   x63
0C2C0:  CLRF   x64
0C2C2:  CLRF   x65
0C2C4:  CLRF   x66
0C2C6:  CLRF   x67
0C2C8:  CLRF   x68
0C2CA:  CLRF   x69
0C2CC:  CLRF   x6A
0C2CE:  CLRF   x6B
0C2D0:  CLRF   x6C
0C2D2:  CLRF   x6D
0C2D4:  CLRF   x6E
0C2D6:  CLRF   x6F
0C2D8:  CLRF   x70
0C2DA:  CLRF   x71
0C2DC:  CLRF   x72
0C2DE:  CLRF   x73
0C2E0:  CLRF   x74
0C2E2:  CLRF   x75
0C2E4:  CLRF   x76
0C2E6:  CLRF   x77
0C2E8:  CLRF   x78
0C2EA:  CLRF   x79
0C2EC:  CLRF   x7A
0C2EE:  CLRF   x7B
0C2F0:  CLRF   x7C
0C2F2:  CLRF   x7D
0C2F4:  CLRF   x7E
0C2F6:  CLRF   x7F
0C2F8:  CLRF   x80
0C2FA:  CLRF   x81
0C2FC:  CLRF   x82
0C2FE:  CLRF   x83
0C300:  CLRF   x84
0C302:  CLRF   x85
0C304:  CLRF   x86
0C306:  CLRF   x87
0C308:  CLRF   x88
0C30A:  CLRF   x89
0C30C:  CLRF   x8A
0C30E:  CLRF   x8B
0C310:  CLRF   x8C
0C312:  CLRF   x8D
0C314:  CLRF   x8E
0C316:  CLRF   x8F
0C318:  CLRF   x90
0C31A:  CLRF   x91
0C31C:  CLRF   x92
0C31E:  CLRF   x93
0C320:  CLRF   x94
0C322:  CLRF   x95
0C324:  CLRF   x96
0C326:  CLRF   x97
0C328:  CLRF   x98
0C32A:  CLRF   x99
0C32C:  CLRF   x9A
0C32E:  CLRF   x9B
0C330:  CLRF   x9C
0C332:  CLRF   x9D
0C334:  CLRF   x9E
0C336:  CLRF   x9F
0C338:  CLRF   xA0
0C33A:  CLRF   xA1
0C33C:  CLRF   xA2
0C33E:  CLRF   xA3
0C340:  CLRF   xA4
0C342:  CLRF   xA5
0C344:  CLRF   xA6
0C346:  CLRF   xA7
0C348:  CLRF   xA8
0C34A:  CLRF   xA9
0C34C:  CLRF   xAA
0C34E:  CLRF   xAB
0C350:  CLRF   xAC
0C352:  CLRF   xAD
0C354:  CLRF   xAE
0C356:  CLRF   xAF
0C358:  CLRF   xB0
0C35A:  CLRF   xB1
0C35C:  CLRF   xB2
0C35E:  CLRF   xB3
0C360:  CLRF   xB4
0C362:  CLRF   xB5
0C364:  CLRF   xB6
0C366:  CLRF   xB7
0C368:  CLRF   xB8
0C36A:  CLRF   xB9
0C36C:  CLRF   xBA
0C36E:  CLRF   xBB
0C370:  CLRF   xBC
0C372:  CLRF   xBD
0C374:  CLRF   xBE
0C376:  CLRF   xBF
0C378:  CLRF   xC0
0C37A:  CLRF   xC1
0C37C:  CLRF   xC2
0C37E:  CLRF   xC3
0C380:  CLRF   xC4
0C382:  CLRF   xC5
0C384:  CLRF   xC6
0C386:  CLRF   xC7
0C388:  CLRF   xC8
0C38A:  CLRF   xC9
0C38C:  CLRF   xCA
0C38E:  CLRF   xCB
0C390:  CLRF   xCC
0C392:  CLRF   xCD
0C394:  CLRF   xCE
0C396:  CLRF   xCF
0C398:  CLRF   xD0
0C39A:  CLRF   xD1
0C39C:  CLRF   xD2
0C39E:  CLRF   xD3
0C3A0:  CLRF   xD4
0C3A2:  CLRF   xD5
0C3A4:  CLRF   xD6
0C3A6:  CLRF   xD7
0C3A8:  CLRF   xD8
0C3AA:  CLRF   xD9
0C3AC:  CLRF   xDA
0C3AE:  CLRF   xDB
0C3B0:  CLRF   xDC
0C3B2:  CLRF   xDD
0C3B4:  CLRF   xDE
0C3B6:  CLRF   xDF
0C3B8:  CLRF   xE0
0C3BA:  CLRF   xE1
0C3BC:  CLRF   xE2
0C3BE:  CLRF   xE3
0C3C0:  CLRF   xE4
0C3C2:  CLRF   xE5
0C3C4:  CLRF   xE6
0C3C6:  CLRF   xE7
0C3C8:  CLRF   xE8
0C3CA:  CLRF   xE9
0C3CC:  CLRF   xEA
0C3CE:  CLRF   xEB
0C3D0:  CLRF   xEC
0C3D2:  CLRF   xED
0C3D4:  CLRF   xEE
0C3D6:  CLRF   xEF
0C3D8:  CLRF   xF0
0C3DA:  CLRF   xF1
0C3DC:  CLRF   xF2
0C3DE:  CLRF   xF3
0C3E0:  CLRF   xF4
0C3E2:  CLRF   xF5
0C3E4:  CLRF   xF6
0C3E6:  CLRF   xF7
0C3E8:  CLRF   xF8
0C3EA:  CLRF   xF9
0C3EC:  CLRF   xFA
0C3EE:  CLRF   xFB
0C3F0:  CLRF   xFC
0C3F2:  CLRF   xFD
0C3F4:  CLRF   xFE
0C3F6:  CLRF   xFF
0C3F8:  MOVLB  4
0C3FA:  CLRF   x00
0C3FC:  CLRF   x01
0C3FE:  CLRF   x02
0C400:  CLRF   x03
0C402:  CLRF   x04
0C404:  CLRF   x05
0C406:  CLRF   x06
0C408:  CLRF   x07
0C40A:  CLRF   x08
0C40C:  CLRF   x09
0C40E:  CLRF   x0A
0C410:  CLRF   x0B
0C412:  CLRF   x0C
0C414:  CLRF   x0D
0C416:  CLRF   x0E
0C418:  CLRF   x0F
0C41A:  CLRF   x10
0C41C:  CLRF   x11
0C41E:  CLRF   x12
0C420:  CLRF   x13
0C422:  CLRF   x14
0C424:  CLRF   x15
0C426:  CLRF   x16
0C428:  CLRF   x17
0C42A:  CLRF   x18
0C42C:  CLRF   x19
0C42E:  CLRF   x1A
0C430:  CLRF   x1B
0C432:  CLRF   x1C
0C434:  CLRF   x1D
0C436:  CLRF   x1E
0C438:  CLRF   x1F
0C43A:  CLRF   x20
0C43C:  CLRF   x21
0C43E:  CLRF   x22
0C440:  CLRF   x23
0C442:  CLRF   x24
0C444:  CLRF   x25
0C446:  CLRF   x26
0C448:  CLRF   x27
0C44A:  CLRF   x28
0C44C:  CLRF   x29
0C44E:  CLRF   x2A
0C450:  CLRF   x2B
0C452:  CLRF   x2C
0C454:  CLRF   x2D
0C456:  CLRF   x2E
0C458:  CLRF   x2F
0C45A:  CLRF   x30
0C45C:  CLRF   x31
0C45E:  CLRF   x32
0C460:  CLRF   x33
0C462:  CLRF   x34
0C464:  CLRF   x35
0C466:  CLRF   x36
0C468:  CLRF   x37
0C46A:  CLRF   x38
0C46C:  CLRF   x39
0C46E:  CLRF   x3A
0C470:  CLRF   x3B
0C472:  CLRF   x3C
0C474:  CLRF   x3D
0C476:  CLRF   x3E
0C478:  CLRF   x3F
0C47A:  CLRF   x40
0C47C:  CLRF   x41
0C47E:  CLRF   x42
0C480:  CLRF   x43
0C482:  CLRF   x44
0C484:  CLRF   x45
0C486:  CLRF   x46
0C488:  CLRF   x47
0C48A:  CLRF   x48
0C48C:  CLRF   x49
0C48E:  CLRF   x4A
0C490:  CLRF   x4B
0C492:  CLRF   x4C
0C494:  CLRF   x4D
0C496:  CLRF   x4E
0C498:  CLRF   x4F
0C49A:  CLRF   x50
0C49C:  CLRF   x51
0C49E:  CLRF   x52
0C4A0:  CLRF   x53
0C4A2:  CLRF   x54
0C4A4:  CLRF   x55
0C4A6:  CLRF   x56
0C4A8:  CLRF   x57
0C4AA:  CLRF   x58
0C4AC:  CLRF   x59
0C4AE:  CLRF   x5A
0C4B0:  CLRF   x5B
0C4B2:  CLRF   x5C
0C4B4:  CLRF   x5D
0C4B6:  CLRF   x5E
0C4B8:  CLRF   x5F
0C4BA:  CLRF   x60
0C4BC:  CLRF   x61
0C4BE:  CLRF   x62
0C4C0:  CLRF   x63
0C4C2:  CLRF   x64
0C4C4:  CLRF   x65
0C4C6:  CLRF   x66
0C4C8:  CLRF   x67
0C4CA:  CLRF   x68
0C4CC:  CLRF   x69
0C4CE:  CLRF   x6A
0C4D0:  CLRF   x6B
0C4D2:  CLRF   x6C
0C4D4:  CLRF   x6D
0C4D6:  CLRF   x6E
0C4D8:  CLRF   x6F
0C4DA:  CLRF   x70
0C4DC:  CLRF   x71
0C4DE:  CLRF   x72
0C4E0:  CLRF   x73
0C4E2:  CLRF   x74
0C4E4:  CLRF   x75
0C4E6:  CLRF   x76
0C4E8:  CLRF   x77
0C4EA:  CLRF   x78
0C4EC:  CLRF   x79
0C4EE:  CLRF   x7A
0C4F0:  CLRF   x7B
0C4F2:  CLRF   x7C
0C4F4:  CLRF   x7D
0C4F6:  CLRF   x7E
0C4F8:  CLRF   x7F
0C4FA:  CLRF   x80
0C4FC:  CLRF   x81
0C4FE:  CLRF   x82
0C500:  CLRF   x83
0C502:  CLRF   x84
0C504:  CLRF   x85
0C506:  CLRF   x86
0C508:  CLRF   x87
0C50A:  CLRF   x88
0C50C:  CLRF   x89
0C50E:  CLRF   x8A
0C510:  CLRF   x8B
0C512:  CLRF   x8C
0C514:  CLRF   x8D
0C516:  CLRF   x8E
0C518:  CLRF   x8F
0C51A:  CLRF   x90
0C51C:  CLRF   x91
0C51E:  CLRF   x92
0C520:  CLRF   x93
0C522:  CLRF   x94
0C524:  CLRF   x95
0C526:  CLRF   x96
0C528:  CLRF   x97
0C52A:  CLRF   x98
0C52C:  CLRF   x99
0C52E:  CLRF   x9A
0C530:  CLRF   x9B
0C532:  CLRF   x9C
0C534:  CLRF   x9D
0C536:  CLRF   x9E
0C538:  CLRF   x9F
0C53A:  CLRF   xA0
0C53C:  CLRF   xA1
0C53E:  CLRF   xA2
0C540:  CLRF   xA3
0C542:  CLRF   xA4
0C544:  CLRF   xA5
0C546:  CLRF   xA6
0C548:  CLRF   xA7
0C54A:  CLRF   xA8
0C54C:  CLRF   xA9
0C54E:  CLRF   xAA
0C550:  CLRF   xAB
0C552:  CLRF   xAC
0C554:  CLRF   xAD
0C556:  CLRF   xAE
0C558:  CLRF   xAF
0C55A:  CLRF   xB0
0C55C:  CLRF   xB1
0C55E:  CLRF   xB2
0C560:  CLRF   xB3
0C562:  CLRF   xB4
0C564:  CLRF   xB5
0C566:  CLRF   xB6
0C568:  CLRF   xB7
0C56A:  CLRF   xB8
0C56C:  CLRF   xB9
0C56E:  CLRF   xBA
0C570:  CLRF   xBB
0C572:  CLRF   xBC
0C574:  CLRF   xBD
0C576:  CLRF   xBE
0C578:  CLRF   xBF
0C57A:  CLRF   xC0
0C57C:  CLRF   xC1
0C57E:  CLRF   xC2
0C580:  CLRF   xC3
0C582:  CLRF   xC4
0C584:  CLRF   xC5
0C586:  CLRF   xC6
0C588:  CLRF   xC7
0C58A:  CLRF   xC8
0C58C:  CLRF   xC9
0C58E:  CLRF   xCA
0C590:  CLRF   xCB
0C592:  CLRF   xCC
0C594:  CLRF   xCD
0C596:  CLRF   xCE
0C598:  CLRF   xCF
0C59A:  CLRF   xD0
0C59C:  CLRF   xD1
0C59E:  CLRF   xD2
0C5A0:  CLRF   xD3
0C5A2:  CLRF   xD4
0C5A4:  CLRF   xD5
0C5A6:  CLRF   xD6
0C5A8:  CLRF   xD7
0C5AA:  CLRF   xD8
0C5AC:  CLRF   xD9
0C5AE:  CLRF   xDA
0C5B0:  CLRF   xDB
0C5B2:  CLRF   xDC
0C5B4:  CLRF   xDD
0C5B6:  CLRF   xDE
0C5B8:  CLRF   xDF
0C5BA:  CLRF   xE0
0C5BC:  CLRF   xE1
0C5BE:  CLRF   xE2
0C5C0:  CLRF   xE3
0C5C2:  CLRF   xE4
0C5C4:  CLRF   xE5
0C5C6:  CLRF   xE6
0C5C8:  CLRF   xE7
0C5CA:  CLRF   xE8
0C5CC:  CLRF   xE9
0C5CE:  CLRF   xEA
0C5D0:  CLRF   xEB
0C5D2:  CLRF   xEC
0C5D4:  CLRF   xED
0C5D6:  CLRF   xEE
0C5D8:  CLRF   xEF
0C5DA:  CLRF   xF0
0C5DC:  CLRF   xF1
0C5DE:  CLRF   xF2
0C5E0:  CLRF   xF3
0C5E2:  CLRF   xF4
0C5E4:  CLRF   xF5
0C5E6:  CLRF   xF6
0C5E8:  CLRF   xF7
0C5EA:  CLRF   xF8
0C5EC:  CLRF   xF9
0C5EE:  CLRF   xFA
0C5F0:  CLRF   xFB
0C5F2:  CLRF   xFC
0C5F4:  CLRF   xFD
0C5F6:  CLRF   xFE
0C5F8:  CLRF   xFF
0C5FA:  MOVLB  5
0C5FC:  CLRF   x00
0C5FE:  CLRF   x01
0C600:  CLRF   x02
0C602:  CLRF   x03
0C604:  CLRF   x04
0C606:  CLRF   x05
0C608:  CLRF   x06
0C60A:  CLRF   x07
0C60C:  CLRF   x08
0C60E:  CLRF   x09
0C610:  CLRF   x0A
0C612:  CLRF   x0B
0C614:  CLRF   x0C
0C616:  CLRF   x0D
0C618:  CLRF   x0E
0C61A:  CLRF   x0F
0C61C:  CLRF   x10
0C61E:  CLRF   x11
0C620:  CLRF   x12
0C622:  CLRF   x13
0C624:  CLRF   x14
0C626:  CLRF   x15
0C628:  CLRF   x16
0C62A:  CLRF   x17
0C62C:  CLRF   x18
0C62E:  CLRF   x19
0C630:  CLRF   x1A
0C632:  CLRF   x1B
0C634:  CLRF   x1C
0C636:  CLRF   x1D
0C638:  CLRF   x1E
0C63A:  CLRF   x1F
0C63C:  CLRF   x20
0C63E:  CLRF   x21
0C640:  CLRF   x22
0C642:  CLRF   x23
0C644:  CLRF   x24
0C646:  CLRF   x25
0C648:  CLRF   x26
0C64A:  CLRF   x27
0C64C:  CLRF   x28
0C64E:  CLRF   x29
0C650:  CLRF   x2A
0C652:  CLRF   x2B
0C654:  CLRF   x2C
0C656:  CLRF   x2D
0C658:  CLRF   x2E
0C65A:  CLRF   x2F
0C65C:  CLRF   x30
0C65E:  CLRF   x31
0C660:  CLRF   x32
0C662:  CLRF   x33
0C664:  CLRF   x34
0C666:  CLRF   x35
0C668:  CLRF   x36
0C66A:  CLRF   x37
0C66C:  CLRF   x38
0C66E:  CLRF   x39
0C670:  CLRF   x3A
0C672:  CLRF   x3B
0C674:  CLRF   x3C
0C676:  CLRF   x3D
0C678:  CLRF   x3E
0C67A:  CLRF   x3F
0C67C:  CLRF   x40
0C67E:  CLRF   x41
0C680:  CLRF   x42
0C682:  CLRF   x43
0C684:  CLRF   x44
0C686:  CLRF   x45
0C688:  CLRF   x46
0C68A:  CLRF   x47
0C68C:  CLRF   x48
0C68E:  CLRF   x49
0C690:  CLRF   x4A
0C692:  CLRF   x4B
0C694:  CLRF   x4C
0C696:  CLRF   x4D
0C698:  CLRF   x4E
0C69A:  CLRF   x4F
0C69C:  CLRF   x50
0C69E:  CLRF   x51
0C6A0:  CLRF   x52
0C6A2:  CLRF   x53
0C6A4:  CLRF   x54
0C6A6:  CLRF   x55
0C6A8:  CLRF   x56
0C6AA:  CLRF   x57
0C6AC:  CLRF   x58
0C6AE:  CLRF   x59
0C6B0:  CLRF   x5A
0C6B2:  CLRF   x5B
0C6B4:  CLRF   x5C
0C6B6:  CLRF   x5D
0C6B8:  CLRF   x5E
0C6BA:  CLRF   x5F
0C6BC:  CLRF   x60
0C6BE:  CLRF   x61
0C6C0:  CLRF   x62
0C6C2:  CLRF   x63
0C6C4:  CLRF   x64
0C6C6:  CLRF   x65
0C6C8:  CLRF   x66
0C6CA:  CLRF   x67
0C6CC:  CLRF   x68
0C6CE:  CLRF   x69
0C6D0:  CLRF   x6A
0C6D2:  CLRF   x6B
0C6D4:  CLRF   x6C
0C6D6:  CLRF   x6D
0C6D8:  CLRF   x6E
0C6DA:  CLRF   x6F
0C6DC:  CLRF   x70
0C6DE:  CLRF   x71
0C6E0:  CLRF   x72
0C6E2:  CLRF   x73
0C6E4:  CLRF   x74
0C6E6:  CLRF   x75
0C6E8:  CLRF   x76
0C6EA:  CLRF   x77
0C6EC:  CLRF   x78
0C6EE:  CLRF   x79
0C6F0:  CLRF   x7A
0C6F2:  CLRF   x7B
0C6F4:  CLRF   x7C
0C6F6:  CLRF   x7D
0C6F8:  CLRF   x7E
0C6FA:  CLRF   x7F
0C6FC:  CLRF   x80
0C6FE:  CLRF   x81
0C700:  CLRF   x82
0C702:  CLRF   x83
0C704:  CLRF   x84
0C706:  CLRF   x85
0C708:  CLRF   x86
0C70A:  CLRF   x87
0C70C:  CLRF   x88
0C70E:  CLRF   x89
0C710:  CLRF   x8A
0C712:  CLRF   x8B
0C714:  CLRF   x8C
0C716:  CLRF   x8D
0C718:  CLRF   x8E
0C71A:  CLRF   x8F
0C71C:  CLRF   x90
0C71E:  CLRF   x91
0C720:  CLRF   x92
0C722:  CLRF   x93
0C724:  CLRF   x94
0C726:  CLRF   x95
0C728:  CLRF   x96
0C72A:  CLRF   x97
0C72C:  CLRF   x98
0C72E:  CLRF   x99
0C730:  CLRF   x9A
0C732:  CLRF   x9B
0C734:  CLRF   x9C
0C736:  CLRF   x9D
0C738:  CLRF   x9E
0C73A:  CLRF   x9F
0C73C:  CLRF   xA0
0C73E:  CLRF   xA1
0C740:  CLRF   xA2
0C742:  CLRF   xA3
0C744:  CLRF   xA4
0C746:  CLRF   xA5
0C748:  CLRF   xA6
0C74A:  CLRF   xA7
0C74C:  CLRF   xA8
0C74E:  CLRF   xA9
0C750:  CLRF   xAA
0C752:  CLRF   xAB
0C754:  CLRF   xAC
0C756:  CLRF   xAD
0C758:  CLRF   xAE
0C75A:  CLRF   xAF
0C75C:  CLRF   xB0
0C75E:  CLRF   xB1
0C760:  CLRF   xB2
0C762:  CLRF   xB3
0C764:  CLRF   xB4
0C766:  CLRF   xB5
0C768:  CLRF   xB6
0C76A:  CLRF   xB7
0C76C:  CLRF   xB8
0C76E:  CLRF   xB9
0C770:  CLRF   xBA
0C772:  CLRF   xBB
0C774:  CLRF   xBC
0C776:  CLRF   xBD
0C778:  CLRF   xBE
0C77A:  CLRF   xBF
0C77C:  CLRF   xC0
0C77E:  CLRF   xC1
0C780:  CLRF   xC2
0C782:  CLRF   xC3
0C784:  CLRF   xC4
0C786:  CLRF   xC5
0C788:  CLRF   xC6
0C78A:  CLRF   xC7
0C78C:  CLRF   xC8
0C78E:  CLRF   xC9
0C790:  CLRF   xCA
0C792:  CLRF   xCB
0C794:  CLRF   xCC
0C796:  CLRF   xCD
0C798:  CLRF   xCE
0C79A:  CLRF   xCF
0C79C:  CLRF   xD0
0C79E:  CLRF   xD1
0C7A0:  CLRF   xD2
0C7A2:  CLRF   xD3
0C7A4:  CLRF   xD4
0C7A6:  CLRF   xD5
0C7A8:  CLRF   xD6
0C7AA:  CLRF   xD7
0C7AC:  CLRF   xD8
0C7AE:  CLRF   xD9
0C7B0:  CLRF   xDA
0C7B2:  CLRF   xDB
0C7B4:  CLRF   xDC
0C7B6:  CLRF   xDD
0C7B8:  CLRF   xDE
0C7BA:  CLRF   xDF
0C7BC:  CLRF   xE0
0C7BE:  CLRF   xE1
0C7C0:  CLRF   xE2
0C7C2:  CLRF   xE3
0C7C4:  CLRF   xE4
0C7C6:  CLRF   xE5
0C7C8:  CLRF   xE6
0C7CA:  CLRF   xE7
0C7CC:  CLRF   xE8
0C7CE:  CLRF   xE9
0C7D0:  CLRF   xEA
0C7D2:  CLRF   xEB
0C7D4:  CLRF   xEC
0C7D6:  CLRF   xED
0C7D8:  CLRF   xEE
0C7DA:  CLRF   xEF
0C7DC:  CLRF   xF0
0C7DE:  CLRF   xF1
0C7E0:  CLRF   xF2
0C7E2:  CLRF   xF3
0C7E4:  CLRF   xF4
0C7E6:  CLRF   xF5
0C7E8:  CLRF   xF6
0C7EA:  CLRF   xF7
0C7EC:  CLRF   xF8
0C7EE:  CLRF   xF9
0C7F0:  CLRF   xFA
0C7F2:  CLRF   xFB
0C7F4:  CLRF   xFC
0C7F6:  CLRF   xFD
0C7F8:  CLRF   xFE
0C7FA:  CLRF   xFF
0C7FC:  MOVLB  6
0C7FE:  CLRF   x00
0C800:  CLRF   x01
0C802:  CLRF   x02
0C804:  CLRF   x03
0C806:  CLRF   x04
0C808:  CLRF   x05
0C80A:  CLRF   x06
0C80C:  CLRF   x07
0C80E:  CLRF   x08
0C810:  CLRF   x09
0C812:  CLRF   x0A
0C814:  CLRF   x0B
0C816:  CLRF   x0C
0C818:  CLRF   x0D
0C81A:  CLRF   x0E
0C81C:  CLRF   x0F
0C81E:  CLRF   x10
0C820:  CLRF   x11
0C822:  CLRF   x12
0C824:  CLRF   x13
0C826:  CLRF   x14
0C828:  CLRF   x15
0C82A:  CLRF   x16
0C82C:  CLRF   x17
0C82E:  CLRF   x18
0C830:  CLRF   x19
0C832:  CLRF   x1A
0C834:  CLRF   x1B
0C836:  CLRF   x1C
0C838:  CLRF   x1D
0C83A:  CLRF   x1E
0C83C:  CLRF   x1F
0C83E:  CLRF   x20
0C840:  CLRF   x21
0C842:  CLRF   x22
0C844:  CLRF   x23
0C846:  CLRF   x24
0C848:  CLRF   x25
0C84A:  CLRF   x26
0C84C:  CLRF   x27
0C84E:  CLRF   x28
0C850:  CLRF   x29
0C852:  CLRF   x2A
0C854:  CLRF   x2B
0C856:  CLRF   x2C
0C858:  CLRF   x2D
0C85A:  CLRF   x2E
0C85C:  CLRF   x2F
0C85E:  CLRF   x30
....................     port1.port_num = 1;
0C860:  MOVLW  01
0C862:  MOVLB  2
0C864:  MOVWF  x31
....................     port1.sweep_step = 0;
0C866:  CLRF   x33
0C868:  CLRF   x32
....................     port1.active = 1;
0C86A:  MOVLB  6
0C86C:  BSF    x30.0
.................... 
....................     // Init Port2
....................     sweep_config_t port2 = {0};
0C86E:  CLRF   x31
0C870:  CLRF   x32
0C872:  CLRF   x33
0C874:  CLRF   x34
0C876:  CLRF   x35
0C878:  CLRF   x36
0C87A:  CLRF   x37
0C87C:  CLRF   x38
0C87E:  CLRF   x39
0C880:  CLRF   x3A
0C882:  CLRF   x3B
0C884:  CLRF   x3C
0C886:  CLRF   x3D
0C888:  CLRF   x3E
0C88A:  CLRF   x3F
0C88C:  CLRF   x40
0C88E:  CLRF   x41
0C890:  CLRF   x42
0C892:  CLRF   x43
0C894:  CLRF   x44
0C896:  CLRF   x45
0C898:  CLRF   x46
0C89A:  CLRF   x47
0C89C:  CLRF   x48
0C89E:  CLRF   x49
0C8A0:  CLRF   x4A
0C8A2:  CLRF   x4B
0C8A4:  CLRF   x4C
0C8A6:  CLRF   x4D
0C8A8:  CLRF   x4E
0C8AA:  CLRF   x4F
0C8AC:  CLRF   x50
0C8AE:  CLRF   x51
0C8B0:  CLRF   x52
0C8B2:  CLRF   x53
0C8B4:  CLRF   x54
0C8B6:  CLRF   x55
0C8B8:  CLRF   x56
0C8BA:  CLRF   x57
0C8BC:  CLRF   x58
0C8BE:  CLRF   x59
0C8C0:  CLRF   x5A
0C8C2:  CLRF   x5B
0C8C4:  CLRF   x5C
0C8C6:  CLRF   x5D
0C8C8:  CLRF   x5E
0C8CA:  CLRF   x5F
0C8CC:  CLRF   x60
0C8CE:  CLRF   x61
0C8D0:  CLRF   x62
0C8D2:  CLRF   x63
0C8D4:  CLRF   x64
0C8D6:  CLRF   x65
0C8D8:  CLRF   x66
0C8DA:  CLRF   x67
0C8DC:  CLRF   x68
0C8DE:  CLRF   x69
0C8E0:  CLRF   x6A
0C8E2:  CLRF   x6B
0C8E4:  CLRF   x6C
0C8E6:  CLRF   x6D
0C8E8:  CLRF   x6E
0C8EA:  CLRF   x6F
0C8EC:  CLRF   x70
0C8EE:  CLRF   x71
0C8F0:  CLRF   x72
0C8F2:  CLRF   x73
0C8F4:  CLRF   x74
0C8F6:  CLRF   x75
0C8F8:  CLRF   x76
0C8FA:  CLRF   x77
0C8FC:  CLRF   x78
0C8FE:  CLRF   x79
0C900:  CLRF   x7A
0C902:  CLRF   x7B
0C904:  CLRF   x7C
0C906:  CLRF   x7D
0C908:  CLRF   x7E
0C90A:  CLRF   x7F
0C90C:  CLRF   x80
0C90E:  CLRF   x81
0C910:  CLRF   x82
0C912:  CLRF   x83
0C914:  CLRF   x84
0C916:  CLRF   x85
0C918:  CLRF   x86
0C91A:  CLRF   x87
0C91C:  CLRF   x88
0C91E:  CLRF   x89
0C920:  CLRF   x8A
0C922:  CLRF   x8B
0C924:  CLRF   x8C
0C926:  CLRF   x8D
0C928:  CLRF   x8E
0C92A:  CLRF   x8F
0C92C:  CLRF   x90
0C92E:  CLRF   x91
0C930:  CLRF   x92
0C932:  CLRF   x93
0C934:  CLRF   x94
0C936:  CLRF   x95
0C938:  CLRF   x96
0C93A:  CLRF   x97
0C93C:  CLRF   x98
0C93E:  CLRF   x99
0C940:  CLRF   x9A
0C942:  CLRF   x9B
0C944:  CLRF   x9C
0C946:  CLRF   x9D
0C948:  CLRF   x9E
0C94A:  CLRF   x9F
0C94C:  CLRF   xA0
0C94E:  CLRF   xA1
0C950:  CLRF   xA2
0C952:  CLRF   xA3
0C954:  CLRF   xA4
0C956:  CLRF   xA5
0C958:  CLRF   xA6
0C95A:  CLRF   xA7
0C95C:  CLRF   xA8
0C95E:  CLRF   xA9
0C960:  CLRF   xAA
0C962:  CLRF   xAB
0C964:  CLRF   xAC
0C966:  CLRF   xAD
0C968:  CLRF   xAE
0C96A:  CLRF   xAF
0C96C:  CLRF   xB0
0C96E:  CLRF   xB1
0C970:  CLRF   xB2
0C972:  CLRF   xB3
0C974:  CLRF   xB4
0C976:  CLRF   xB5
0C978:  CLRF   xB6
0C97A:  CLRF   xB7
0C97C:  CLRF   xB8
0C97E:  CLRF   xB9
0C980:  CLRF   xBA
0C982:  CLRF   xBB
0C984:  CLRF   xBC
0C986:  CLRF   xBD
0C988:  CLRF   xBE
0C98A:  CLRF   xBF
0C98C:  CLRF   xC0
0C98E:  CLRF   xC1
0C990:  CLRF   xC2
0C992:  CLRF   xC3
0C994:  CLRF   xC4
0C996:  CLRF   xC5
0C998:  CLRF   xC6
0C99A:  CLRF   xC7
0C99C:  CLRF   xC8
0C99E:  CLRF   xC9
0C9A0:  CLRF   xCA
0C9A2:  CLRF   xCB
0C9A4:  CLRF   xCC
0C9A6:  CLRF   xCD
0C9A8:  CLRF   xCE
0C9AA:  CLRF   xCF
0C9AC:  CLRF   xD0
0C9AE:  CLRF   xD1
0C9B0:  CLRF   xD2
0C9B2:  CLRF   xD3
0C9B4:  CLRF   xD4
0C9B6:  CLRF   xD5
0C9B8:  CLRF   xD6
0C9BA:  CLRF   xD7
0C9BC:  CLRF   xD8
0C9BE:  CLRF   xD9
0C9C0:  CLRF   xDA
0C9C2:  CLRF   xDB
0C9C4:  CLRF   xDC
0C9C6:  CLRF   xDD
0C9C8:  CLRF   xDE
0C9CA:  CLRF   xDF
0C9CC:  CLRF   xE0
0C9CE:  CLRF   xE1
0C9D0:  CLRF   xE2
0C9D2:  CLRF   xE3
0C9D4:  CLRF   xE4
0C9D6:  CLRF   xE5
0C9D8:  CLRF   xE6
0C9DA:  CLRF   xE7
0C9DC:  CLRF   xE8
0C9DE:  CLRF   xE9
0C9E0:  CLRF   xEA
0C9E2:  CLRF   xEB
0C9E4:  CLRF   xEC
0C9E6:  CLRF   xED
0C9E8:  CLRF   xEE
0C9EA:  CLRF   xEF
0C9EC:  CLRF   xF0
0C9EE:  CLRF   xF1
0C9F0:  CLRF   xF2
0C9F2:  CLRF   xF3
0C9F4:  CLRF   xF4
0C9F6:  CLRF   xF5
0C9F8:  CLRF   xF6
0C9FA:  CLRF   xF7
0C9FC:  CLRF   xF8
0C9FE:  CLRF   xF9
0CA00:  CLRF   xFA
0CA02:  CLRF   xFB
0CA04:  CLRF   xFC
0CA06:  CLRF   xFD
0CA08:  CLRF   xFE
0CA0A:  CLRF   xFF
0CA0C:  MOVLB  7
0CA0E:  CLRF   x00
0CA10:  CLRF   x01
0CA12:  CLRF   x02
0CA14:  CLRF   x03
0CA16:  CLRF   x04
0CA18:  CLRF   x05
0CA1A:  CLRF   x06
0CA1C:  CLRF   x07
0CA1E:  CLRF   x08
0CA20:  CLRF   x09
0CA22:  CLRF   x0A
0CA24:  CLRF   x0B
0CA26:  CLRF   x0C
0CA28:  CLRF   x0D
0CA2A:  CLRF   x0E
0CA2C:  CLRF   x0F
0CA2E:  CLRF   x10
0CA30:  CLRF   x11
0CA32:  CLRF   x12
0CA34:  CLRF   x13
0CA36:  CLRF   x14
0CA38:  CLRF   x15
0CA3A:  CLRF   x16
0CA3C:  CLRF   x17
0CA3E:  CLRF   x18
0CA40:  CLRF   x19
0CA42:  CLRF   x1A
0CA44:  CLRF   x1B
0CA46:  CLRF   x1C
0CA48:  CLRF   x1D
0CA4A:  CLRF   x1E
0CA4C:  CLRF   x1F
0CA4E:  CLRF   x20
0CA50:  CLRF   x21
0CA52:  CLRF   x22
0CA54:  CLRF   x23
0CA56:  CLRF   x24
0CA58:  CLRF   x25
0CA5A:  CLRF   x26
0CA5C:  CLRF   x27
0CA5E:  CLRF   x28
0CA60:  CLRF   x29
0CA62:  CLRF   x2A
0CA64:  CLRF   x2B
0CA66:  CLRF   x2C
0CA68:  CLRF   x2D
0CA6A:  CLRF   x2E
0CA6C:  CLRF   x2F
0CA6E:  CLRF   x30
0CA70:  CLRF   x31
0CA72:  CLRF   x32
0CA74:  CLRF   x33
0CA76:  CLRF   x34
0CA78:  CLRF   x35
0CA7A:  CLRF   x36
0CA7C:  CLRF   x37
0CA7E:  CLRF   x38
0CA80:  CLRF   x39
0CA82:  CLRF   x3A
0CA84:  CLRF   x3B
0CA86:  CLRF   x3C
0CA88:  CLRF   x3D
0CA8A:  CLRF   x3E
0CA8C:  CLRF   x3F
0CA8E:  CLRF   x40
0CA90:  CLRF   x41
0CA92:  CLRF   x42
0CA94:  CLRF   x43
0CA96:  CLRF   x44
0CA98:  CLRF   x45
0CA9A:  CLRF   x46
0CA9C:  CLRF   x47
0CA9E:  CLRF   x48
0CAA0:  CLRF   x49
0CAA2:  CLRF   x4A
0CAA4:  CLRF   x4B
0CAA6:  CLRF   x4C
0CAA8:  CLRF   x4D
0CAAA:  CLRF   x4E
0CAAC:  CLRF   x4F
0CAAE:  CLRF   x50
0CAB0:  CLRF   x51
0CAB2:  CLRF   x52
0CAB4:  CLRF   x53
0CAB6:  CLRF   x54
0CAB8:  CLRF   x55
0CABA:  CLRF   x56
0CABC:  CLRF   x57
0CABE:  CLRF   x58
0CAC0:  CLRF   x59
0CAC2:  CLRF   x5A
0CAC4:  CLRF   x5B
0CAC6:  CLRF   x5C
0CAC8:  CLRF   x5D
0CACA:  CLRF   x5E
0CACC:  CLRF   x5F
0CACE:  CLRF   x60
0CAD0:  CLRF   x61
0CAD2:  CLRF   x62
0CAD4:  CLRF   x63
0CAD6:  CLRF   x64
0CAD8:  CLRF   x65
0CADA:  CLRF   x66
0CADC:  CLRF   x67
0CADE:  CLRF   x68
0CAE0:  CLRF   x69
0CAE2:  CLRF   x6A
0CAE4:  CLRF   x6B
0CAE6:  CLRF   x6C
0CAE8:  CLRF   x6D
0CAEA:  CLRF   x6E
0CAEC:  CLRF   x6F
0CAEE:  CLRF   x70
0CAF0:  CLRF   x71
0CAF2:  CLRF   x72
0CAF4:  CLRF   x73
0CAF6:  CLRF   x74
0CAF8:  CLRF   x75
0CAFA:  CLRF   x76
0CAFC:  CLRF   x77
0CAFE:  CLRF   x78
0CB00:  CLRF   x79
0CB02:  CLRF   x7A
0CB04:  CLRF   x7B
0CB06:  CLRF   x7C
0CB08:  CLRF   x7D
0CB0A:  CLRF   x7E
0CB0C:  CLRF   x7F
0CB0E:  CLRF   x80
0CB10:  CLRF   x81
0CB12:  CLRF   x82
0CB14:  CLRF   x83
0CB16:  CLRF   x84
0CB18:  CLRF   x85
0CB1A:  CLRF   x86
0CB1C:  CLRF   x87
0CB1E:  CLRF   x88
0CB20:  CLRF   x89
0CB22:  CLRF   x8A
0CB24:  CLRF   x8B
0CB26:  CLRF   x8C
0CB28:  CLRF   x8D
0CB2A:  CLRF   x8E
0CB2C:  CLRF   x8F
0CB2E:  CLRF   x90
0CB30:  CLRF   x91
0CB32:  CLRF   x92
0CB34:  CLRF   x93
0CB36:  CLRF   x94
0CB38:  CLRF   x95
0CB3A:  CLRF   x96
0CB3C:  CLRF   x97
0CB3E:  CLRF   x98
0CB40:  CLRF   x99
0CB42:  CLRF   x9A
0CB44:  CLRF   x9B
0CB46:  CLRF   x9C
0CB48:  CLRF   x9D
0CB4A:  CLRF   x9E
0CB4C:  CLRF   x9F
0CB4E:  CLRF   xA0
0CB50:  CLRF   xA1
0CB52:  CLRF   xA2
0CB54:  CLRF   xA3
0CB56:  CLRF   xA4
0CB58:  CLRF   xA5
0CB5A:  CLRF   xA6
0CB5C:  CLRF   xA7
0CB5E:  CLRF   xA8
0CB60:  CLRF   xA9
0CB62:  CLRF   xAA
0CB64:  CLRF   xAB
0CB66:  CLRF   xAC
0CB68:  CLRF   xAD
0CB6A:  CLRF   xAE
0CB6C:  CLRF   xAF
0CB6E:  CLRF   xB0
0CB70:  CLRF   xB1
0CB72:  CLRF   xB2
0CB74:  CLRF   xB3
0CB76:  CLRF   xB4
0CB78:  CLRF   xB5
0CB7A:  CLRF   xB6
0CB7C:  CLRF   xB7
0CB7E:  CLRF   xB8
0CB80:  CLRF   xB9
0CB82:  CLRF   xBA
0CB84:  CLRF   xBB
0CB86:  CLRF   xBC
0CB88:  CLRF   xBD
0CB8A:  CLRF   xBE
0CB8C:  CLRF   xBF
0CB8E:  CLRF   xC0
0CB90:  CLRF   xC1
0CB92:  CLRF   xC2
0CB94:  CLRF   xC3
0CB96:  CLRF   xC4
0CB98:  CLRF   xC5
0CB9A:  CLRF   xC6
0CB9C:  CLRF   xC7
0CB9E:  CLRF   xC8
0CBA0:  CLRF   xC9
0CBA2:  CLRF   xCA
0CBA4:  CLRF   xCB
0CBA6:  CLRF   xCC
0CBA8:  CLRF   xCD
0CBAA:  CLRF   xCE
0CBAC:  CLRF   xCF
0CBAE:  CLRF   xD0
0CBB0:  CLRF   xD1
0CBB2:  CLRF   xD2
0CBB4:  CLRF   xD3
0CBB6:  CLRF   xD4
0CBB8:  CLRF   xD5
0CBBA:  CLRF   xD6
0CBBC:  CLRF   xD7
0CBBE:  CLRF   xD8
0CBC0:  CLRF   xD9
0CBC2:  CLRF   xDA
0CBC4:  CLRF   xDB
0CBC6:  CLRF   xDC
0CBC8:  CLRF   xDD
0CBCA:  CLRF   xDE
0CBCC:  CLRF   xDF
0CBCE:  CLRF   xE0
0CBD0:  CLRF   xE1
0CBD2:  CLRF   xE2
0CBD4:  CLRF   xE3
0CBD6:  CLRF   xE4
0CBD8:  CLRF   xE5
0CBDA:  CLRF   xE6
0CBDC:  CLRF   xE7
0CBDE:  CLRF   xE8
0CBE0:  CLRF   xE9
0CBE2:  CLRF   xEA
0CBE4:  CLRF   xEB
0CBE6:  CLRF   xEC
0CBE8:  CLRF   xED
0CBEA:  CLRF   xEE
0CBEC:  CLRF   xEF
0CBEE:  CLRF   xF0
0CBF0:  CLRF   xF1
0CBF2:  CLRF   xF2
0CBF4:  CLRF   xF3
0CBF6:  CLRF   xF4
0CBF8:  CLRF   xF5
0CBFA:  CLRF   xF6
0CBFC:  CLRF   xF7
0CBFE:  CLRF   xF8
0CC00:  CLRF   xF9
0CC02:  CLRF   xFA
0CC04:  CLRF   xFB
0CC06:  CLRF   xFC
0CC08:  CLRF   xFD
0CC0A:  CLRF   xFE
0CC0C:  CLRF   xFF
0CC0E:  MOVLB  8
0CC10:  CLRF   x00
0CC12:  CLRF   x01
0CC14:  CLRF   x02
0CC16:  CLRF   x03
0CC18:  CLRF   x04
0CC1A:  CLRF   x05
0CC1C:  CLRF   x06
0CC1E:  CLRF   x07
0CC20:  CLRF   x08
0CC22:  CLRF   x09
0CC24:  CLRF   x0A
0CC26:  CLRF   x0B
0CC28:  CLRF   x0C
0CC2A:  CLRF   x0D
0CC2C:  CLRF   x0E
0CC2E:  CLRF   x0F
0CC30:  CLRF   x10
0CC32:  CLRF   x11
0CC34:  CLRF   x12
0CC36:  CLRF   x13
0CC38:  CLRF   x14
0CC3A:  CLRF   x15
0CC3C:  CLRF   x16
0CC3E:  CLRF   x17
0CC40:  CLRF   x18
0CC42:  CLRF   x19
0CC44:  CLRF   x1A
0CC46:  CLRF   x1B
0CC48:  CLRF   x1C
0CC4A:  CLRF   x1D
0CC4C:  CLRF   x1E
0CC4E:  CLRF   x1F
0CC50:  CLRF   x20
0CC52:  CLRF   x21
0CC54:  CLRF   x22
0CC56:  CLRF   x23
0CC58:  CLRF   x24
0CC5A:  CLRF   x25
0CC5C:  CLRF   x26
0CC5E:  CLRF   x27
0CC60:  CLRF   x28
0CC62:  CLRF   x29
0CC64:  CLRF   x2A
0CC66:  CLRF   x2B
0CC68:  CLRF   x2C
0CC6A:  CLRF   x2D
0CC6C:  CLRF   x2E
0CC6E:  CLRF   x2F
0CC70:  CLRF   x30
0CC72:  CLRF   x31
0CC74:  CLRF   x32
0CC76:  CLRF   x33
0CC78:  CLRF   x34
0CC7A:  CLRF   x35
0CC7C:  CLRF   x36
0CC7E:  CLRF   x37
0CC80:  CLRF   x38
0CC82:  CLRF   x39
0CC84:  CLRF   x3A
0CC86:  CLRF   x3B
0CC88:  CLRF   x3C
0CC8A:  CLRF   x3D
0CC8C:  CLRF   x3E
0CC8E:  CLRF   x3F
0CC90:  CLRF   x40
0CC92:  CLRF   x41
0CC94:  CLRF   x42
0CC96:  CLRF   x43
0CC98:  CLRF   x44
0CC9A:  CLRF   x45
0CC9C:  CLRF   x46
0CC9E:  CLRF   x47
0CCA0:  CLRF   x48
0CCA2:  CLRF   x49
0CCA4:  CLRF   x4A
0CCA6:  CLRF   x4B
0CCA8:  CLRF   x4C
0CCAA:  CLRF   x4D
0CCAC:  CLRF   x4E
0CCAE:  CLRF   x4F
0CCB0:  CLRF   x50
0CCB2:  CLRF   x51
0CCB4:  CLRF   x52
0CCB6:  CLRF   x53
0CCB8:  CLRF   x54
0CCBA:  CLRF   x55
0CCBC:  CLRF   x56
0CCBE:  CLRF   x57
0CCC0:  CLRF   x58
0CCC2:  CLRF   x59
0CCC4:  CLRF   x5A
0CCC6:  CLRF   x5B
0CCC8:  CLRF   x5C
0CCCA:  CLRF   x5D
0CCCC:  CLRF   x5E
0CCCE:  CLRF   x5F
0CCD0:  CLRF   x60
0CCD2:  CLRF   x61
0CCD4:  CLRF   x62
0CCD6:  CLRF   x63
0CCD8:  CLRF   x64
0CCDA:  CLRF   x65
0CCDC:  CLRF   x66
0CCDE:  CLRF   x67
0CCE0:  CLRF   x68
0CCE2:  CLRF   x69
0CCE4:  CLRF   x6A
0CCE6:  CLRF   x6B
0CCE8:  CLRF   x6C
0CCEA:  CLRF   x6D
0CCEC:  CLRF   x6E
0CCEE:  CLRF   x6F
0CCF0:  CLRF   x70
0CCF2:  CLRF   x71
0CCF4:  CLRF   x72
0CCF6:  CLRF   x73
0CCF8:  CLRF   x74
0CCFA:  CLRF   x75
0CCFC:  CLRF   x76
0CCFE:  CLRF   x77
0CD00:  CLRF   x78
0CD02:  CLRF   x79
0CD04:  CLRF   x7A
0CD06:  CLRF   x7B
0CD08:  CLRF   x7C
0CD0A:  CLRF   x7D
0CD0C:  CLRF   x7E
0CD0E:  CLRF   x7F
0CD10:  CLRF   x80
0CD12:  CLRF   x81
0CD14:  CLRF   x82
0CD16:  CLRF   x83
0CD18:  CLRF   x84
0CD1A:  CLRF   x85
0CD1C:  CLRF   x86
0CD1E:  CLRF   x87
0CD20:  CLRF   x88
0CD22:  CLRF   x89
0CD24:  CLRF   x8A
0CD26:  CLRF   x8B
0CD28:  CLRF   x8C
0CD2A:  CLRF   x8D
0CD2C:  CLRF   x8E
0CD2E:  CLRF   x8F
0CD30:  CLRF   x90
0CD32:  CLRF   x91
0CD34:  CLRF   x92
0CD36:  CLRF   x93
0CD38:  CLRF   x94
0CD3A:  CLRF   x95
0CD3C:  CLRF   x96
0CD3E:  CLRF   x97
0CD40:  CLRF   x98
0CD42:  CLRF   x99
0CD44:  CLRF   x9A
0CD46:  CLRF   x9B
0CD48:  CLRF   x9C
0CD4A:  CLRF   x9D
0CD4C:  CLRF   x9E
0CD4E:  CLRF   x9F
0CD50:  CLRF   xA0
0CD52:  CLRF   xA1
0CD54:  CLRF   xA2
0CD56:  CLRF   xA3
0CD58:  CLRF   xA4
0CD5A:  CLRF   xA5
0CD5C:  CLRF   xA6
0CD5E:  CLRF   xA7
0CD60:  CLRF   xA8
0CD62:  CLRF   xA9
0CD64:  CLRF   xAA
0CD66:  CLRF   xAB
0CD68:  CLRF   xAC
0CD6A:  CLRF   xAD
0CD6C:  CLRF   xAE
0CD6E:  CLRF   xAF
0CD70:  CLRF   xB0
0CD72:  CLRF   xB1
0CD74:  CLRF   xB2
0CD76:  CLRF   xB3
0CD78:  CLRF   xB4
0CD7A:  CLRF   xB5
0CD7C:  CLRF   xB6
0CD7E:  CLRF   xB7
0CD80:  CLRF   xB8
0CD82:  CLRF   xB9
0CD84:  CLRF   xBA
0CD86:  CLRF   xBB
0CD88:  CLRF   xBC
0CD8A:  CLRF   xBD
0CD8C:  CLRF   xBE
0CD8E:  CLRF   xBF
0CD90:  CLRF   xC0
0CD92:  CLRF   xC1
0CD94:  CLRF   xC2
0CD96:  CLRF   xC3
0CD98:  CLRF   xC4
0CD9A:  CLRF   xC5
0CD9C:  CLRF   xC6
0CD9E:  CLRF   xC7
0CDA0:  CLRF   xC8
0CDA2:  CLRF   xC9
0CDA4:  CLRF   xCA
0CDA6:  CLRF   xCB
0CDA8:  CLRF   xCC
0CDAA:  CLRF   xCD
0CDAC:  CLRF   xCE
0CDAE:  CLRF   xCF
0CDB0:  CLRF   xD0
0CDB2:  CLRF   xD1
0CDB4:  CLRF   xD2
0CDB6:  CLRF   xD3
0CDB8:  CLRF   xD4
0CDBA:  CLRF   xD5
0CDBC:  CLRF   xD6
0CDBE:  CLRF   xD7
0CDC0:  CLRF   xD8
0CDC2:  CLRF   xD9
0CDC4:  CLRF   xDA
0CDC6:  CLRF   xDB
0CDC8:  CLRF   xDC
0CDCA:  CLRF   xDD
0CDCC:  CLRF   xDE
0CDCE:  CLRF   xDF
0CDD0:  CLRF   xE0
0CDD2:  CLRF   xE1
0CDD4:  CLRF   xE2
0CDD6:  CLRF   xE3
0CDD8:  CLRF   xE4
0CDDA:  CLRF   xE5
0CDDC:  CLRF   xE6
0CDDE:  CLRF   xE7
0CDE0:  CLRF   xE8
0CDE2:  CLRF   xE9
0CDE4:  CLRF   xEA
0CDE6:  CLRF   xEB
0CDE8:  CLRF   xEC
0CDEA:  CLRF   xED
0CDEC:  CLRF   xEE
0CDEE:  CLRF   xEF
0CDF0:  CLRF   xF0
0CDF2:  CLRF   xF1
0CDF4:  CLRF   xF2
0CDF6:  CLRF   xF3
0CDF8:  CLRF   xF4
0CDFA:  CLRF   xF5
0CDFC:  CLRF   xF6
0CDFE:  CLRF   xF7
0CE00:  CLRF   xF8
0CE02:  CLRF   xF9
0CE04:  CLRF   xFA
0CE06:  CLRF   xFB
0CE08:  CLRF   xFC
0CE0A:  CLRF   xFD
0CE0C:  CLRF   xFE
0CE0E:  CLRF   xFF
0CE10:  MOVLB  9
0CE12:  CLRF   x00
0CE14:  CLRF   x01
0CE16:  CLRF   x02
0CE18:  CLRF   x03
0CE1A:  CLRF   x04
0CE1C:  CLRF   x05
0CE1E:  CLRF   x06
0CE20:  CLRF   x07
0CE22:  CLRF   x08
0CE24:  CLRF   x09
0CE26:  CLRF   x0A
0CE28:  CLRF   x0B
0CE2A:  CLRF   x0C
0CE2C:  CLRF   x0D
0CE2E:  CLRF   x0E
0CE30:  CLRF   x0F
0CE32:  CLRF   x10
0CE34:  CLRF   x11
0CE36:  CLRF   x12
0CE38:  CLRF   x13
0CE3A:  CLRF   x14
0CE3C:  CLRF   x15
0CE3E:  CLRF   x16
0CE40:  CLRF   x17
0CE42:  CLRF   x18
0CE44:  CLRF   x19
0CE46:  CLRF   x1A
0CE48:  CLRF   x1B
0CE4A:  CLRF   x1C
0CE4C:  CLRF   x1D
0CE4E:  CLRF   x1E
0CE50:  CLRF   x1F
0CE52:  CLRF   x20
0CE54:  CLRF   x21
0CE56:  CLRF   x22
0CE58:  CLRF   x23
0CE5A:  CLRF   x24
0CE5C:  CLRF   x25
0CE5E:  CLRF   x26
0CE60:  CLRF   x27
0CE62:  CLRF   x28
0CE64:  CLRF   x29
0CE66:  CLRF   x2A
0CE68:  CLRF   x2B
0CE6A:  CLRF   x2C
0CE6C:  CLRF   x2D
0CE6E:  CLRF   x2E
0CE70:  CLRF   x2F
0CE72:  CLRF   x30
0CE74:  CLRF   x31
0CE76:  CLRF   x32
0CE78:  CLRF   x33
0CE7A:  CLRF   x34
0CE7C:  CLRF   x35
0CE7E:  CLRF   x36
0CE80:  CLRF   x37
0CE82:  CLRF   x38
0CE84:  CLRF   x39
0CE86:  CLRF   x3A
0CE88:  CLRF   x3B
0CE8A:  CLRF   x3C
0CE8C:  CLRF   x3D
0CE8E:  CLRF   x3E
0CE90:  CLRF   x3F
0CE92:  CLRF   x40
0CE94:  CLRF   x41
0CE96:  CLRF   x42
0CE98:  CLRF   x43
0CE9A:  CLRF   x44
0CE9C:  CLRF   x45
0CE9E:  CLRF   x46
0CEA0:  CLRF   x47
0CEA2:  CLRF   x48
0CEA4:  CLRF   x49
0CEA6:  CLRF   x4A
0CEA8:  CLRF   x4B
0CEAA:  CLRF   x4C
0CEAC:  CLRF   x4D
0CEAE:  CLRF   x4E
0CEB0:  CLRF   x4F
0CEB2:  CLRF   x50
0CEB4:  CLRF   x51
0CEB6:  CLRF   x52
0CEB8:  CLRF   x53
0CEBA:  CLRF   x54
0CEBC:  CLRF   x55
0CEBE:  CLRF   x56
0CEC0:  CLRF   x57
0CEC2:  CLRF   x58
0CEC4:  CLRF   x59
0CEC6:  CLRF   x5A
0CEC8:  CLRF   x5B
0CECA:  CLRF   x5C
0CECC:  CLRF   x5D
0CECE:  CLRF   x5E
0CED0:  CLRF   x5F
0CED2:  CLRF   x60
0CED4:  CLRF   x61
0CED6:  CLRF   x62
0CED8:  CLRF   x63
0CEDA:  CLRF   x64
0CEDC:  CLRF   x65
0CEDE:  CLRF   x66
0CEE0:  CLRF   x67
0CEE2:  CLRF   x68
0CEE4:  CLRF   x69
0CEE6:  CLRF   x6A
0CEE8:  CLRF   x6B
0CEEA:  CLRF   x6C
0CEEC:  CLRF   x6D
0CEEE:  CLRF   x6E
0CEF0:  CLRF   x6F
0CEF2:  CLRF   x70
0CEF4:  CLRF   x71
0CEF6:  CLRF   x72
0CEF8:  CLRF   x73
0CEFA:  CLRF   x74
0CEFC:  CLRF   x75
0CEFE:  CLRF   x76
0CF00:  CLRF   x77
0CF02:  CLRF   x78
0CF04:  CLRF   x79
0CF06:  CLRF   x7A
0CF08:  CLRF   x7B
0CF0A:  CLRF   x7C
0CF0C:  CLRF   x7D
0CF0E:  CLRF   x7E
0CF10:  CLRF   x7F
0CF12:  CLRF   x80
0CF14:  CLRF   x81
0CF16:  CLRF   x82
0CF18:  CLRF   x83
0CF1A:  CLRF   x84
0CF1C:  CLRF   x85
0CF1E:  CLRF   x86
0CF20:  CLRF   x87
0CF22:  CLRF   x88
0CF24:  CLRF   x89
0CF26:  CLRF   x8A
0CF28:  CLRF   x8B
0CF2A:  CLRF   x8C
0CF2C:  CLRF   x8D
0CF2E:  CLRF   x8E
0CF30:  CLRF   x8F
0CF32:  CLRF   x90
0CF34:  CLRF   x91
0CF36:  CLRF   x92
0CF38:  CLRF   x93
0CF3A:  CLRF   x94
0CF3C:  CLRF   x95
0CF3E:  CLRF   x96
0CF40:  CLRF   x97
0CF42:  CLRF   x98
0CF44:  CLRF   x99
0CF46:  CLRF   x9A
0CF48:  CLRF   x9B
0CF4A:  CLRF   x9C
0CF4C:  CLRF   x9D
0CF4E:  CLRF   x9E
0CF50:  CLRF   x9F
0CF52:  CLRF   xA0
0CF54:  CLRF   xA1
0CF56:  CLRF   xA2
0CF58:  CLRF   xA3
0CF5A:  CLRF   xA4
0CF5C:  CLRF   xA5
0CF5E:  CLRF   xA6
0CF60:  CLRF   xA7
0CF62:  CLRF   xA8
0CF64:  CLRF   xA9
0CF66:  CLRF   xAA
0CF68:  CLRF   xAB
0CF6A:  CLRF   xAC
0CF6C:  CLRF   xAD
0CF6E:  CLRF   xAE
0CF70:  CLRF   xAF
0CF72:  CLRF   xB0
0CF74:  CLRF   xB1
0CF76:  CLRF   xB2
0CF78:  CLRF   xB3
0CF7A:  CLRF   xB4
0CF7C:  CLRF   xB5
0CF7E:  CLRF   xB6
0CF80:  CLRF   xB7
0CF82:  CLRF   xB8
0CF84:  CLRF   xB9
0CF86:  CLRF   xBA
0CF88:  CLRF   xBB
0CF8A:  CLRF   xBC
0CF8C:  CLRF   xBD
0CF8E:  CLRF   xBE
0CF90:  CLRF   xBF
0CF92:  CLRF   xC0
0CF94:  CLRF   xC1
0CF96:  CLRF   xC2
0CF98:  CLRF   xC3
0CF9A:  CLRF   xC4
0CF9C:  CLRF   xC5
0CF9E:  CLRF   xC6
0CFA0:  CLRF   xC7
0CFA2:  CLRF   xC8
0CFA4:  CLRF   xC9
0CFA6:  CLRF   xCA
0CFA8:  CLRF   xCB
0CFAA:  CLRF   xCC
0CFAC:  CLRF   xCD
0CFAE:  CLRF   xCE
0CFB0:  CLRF   xCF
0CFB2:  CLRF   xD0
0CFB4:  CLRF   xD1
0CFB6:  CLRF   xD2
0CFB8:  CLRF   xD3
0CFBA:  CLRF   xD4
0CFBC:  CLRF   xD5
0CFBE:  CLRF   xD6
0CFC0:  CLRF   xD7
0CFC2:  CLRF   xD8
0CFC4:  CLRF   xD9
0CFC6:  CLRF   xDA
0CFC8:  CLRF   xDB
0CFCA:  CLRF   xDC
0CFCC:  CLRF   xDD
0CFCE:  CLRF   xDE
0CFD0:  CLRF   xDF
0CFD2:  CLRF   xE0
0CFD4:  CLRF   xE1
0CFD6:  CLRF   xE2
0CFD8:  CLRF   xE3
0CFDA:  CLRF   xE4
0CFDC:  CLRF   xE5
0CFDE:  CLRF   xE6
0CFE0:  CLRF   xE7
0CFE2:  CLRF   xE8
0CFE4:  CLRF   xE9
0CFE6:  CLRF   xEA
0CFE8:  CLRF   xEB
0CFEA:  CLRF   xEC
0CFEC:  CLRF   xED
0CFEE:  CLRF   xEE
0CFF0:  CLRF   xEF
0CFF2:  CLRF   xF0
0CFF4:  CLRF   xF1
0CFF6:  CLRF   xF2
0CFF8:  CLRF   xF3
0CFFA:  CLRF   xF4
0CFFC:  CLRF   xF5
0CFFE:  CLRF   xF6
0D000:  CLRF   xF7
0D002:  CLRF   xF8
0D004:  CLRF   xF9
0D006:  CLRF   xFA
0D008:  CLRF   xFB
0D00A:  CLRF   xFC
0D00C:  CLRF   xFD
0D00E:  CLRF   xFE
0D010:  CLRF   xFF
0D012:  MOVLB  A
0D014:  CLRF   x00
0D016:  CLRF   x01
0D018:  CLRF   x02
0D01A:  CLRF   x03
0D01C:  CLRF   x04
0D01E:  CLRF   x05
0D020:  CLRF   x06
0D022:  CLRF   x07
0D024:  CLRF   x08
0D026:  CLRF   x09
0D028:  CLRF   x0A
0D02A:  CLRF   x0B
0D02C:  CLRF   x0C
0D02E:  CLRF   x0D
0D030:  CLRF   x0E
0D032:  CLRF   x0F
0D034:  CLRF   x10
0D036:  CLRF   x11
0D038:  CLRF   x12
0D03A:  CLRF   x13
0D03C:  CLRF   x14
0D03E:  CLRF   x15
0D040:  CLRF   x16
0D042:  CLRF   x17
0D044:  CLRF   x18
0D046:  CLRF   x19
0D048:  CLRF   x1A
0D04A:  CLRF   x1B
0D04C:  CLRF   x1C
0D04E:  CLRF   x1D
0D050:  CLRF   x1E
0D052:  CLRF   x1F
0D054:  CLRF   x20
0D056:  CLRF   x21
0D058:  CLRF   x22
0D05A:  CLRF   x23
0D05C:  CLRF   x24
0D05E:  CLRF   x25
0D060:  CLRF   x26
0D062:  CLRF   x27
0D064:  CLRF   x28
0D066:  CLRF   x29
0D068:  CLRF   x2A
0D06A:  CLRF   x2B
0D06C:  CLRF   x2C
0D06E:  CLRF   x2D
0D070:  CLRF   x2E
0D072:  CLRF   x2F
0D074:  CLRF   x30
....................     port2.port_num = 2; 
0D076:  MOVLW  02
0D078:  MOVLB  6
0D07A:  MOVWF  x31
....................     port2.sweep_step = 0;
0D07C:  CLRF   x33
0D07E:  CLRF   x32
....................     port2.active = 1;
0D080:  MOVLB  A
0D082:  BSF    x30.0
.................... 
....................     int16 count = 1;
....................     iv_env_t measured_data = create_meas_data();
0D084:  CLRF   x32
0D086:  MOVLW  01
0D088:  MOVWF  x31
0D08A:  MOVLB  0
0D08C:  CALL   7D40
0D090:  MOVFF  02,03
0D094:  MOVF   01,W
0D096:  MOVWF  FE1
0D098:  MOVFF  03,FE2
0D09C:  MOVLW  0A
0D09E:  MOVWF  FEA
0D0A0:  MOVLW  33
0D0A2:  MOVWF  FE9
0D0A4:  MOVLW  0C
0D0A6:  MOVWF  01
0D0A8:  MOVFF  FE6,FEE
0D0AC:  DECFSZ 01,F
0D0AE:  GOTO   D0A8
.................... 
....................     while (port1.active || port2.active)
0D0B2:  MOVLB  6
0D0B4:  BTFSS  x30.0
0D0B6:  BRA    D0BE
0D0B8:  MOVLB  0
0D0BA:  GOTO   D0CE
0D0BE:  MOVLB  0
0D0C0:  MOVLB  A
0D0C2:  BTFSC  x30.0
0D0C4:  BRA    D0CC
0D0C6:  MOVLB  0
0D0C8:  GOTO   D3B2
0D0CC:  MOVLB  0
....................     {
....................         // 出力設定
....................         if (port1.active) {
0D0CE:  MOVLB  6
0D0D0:  BTFSC  x30.0
0D0D2:  BRA    D0DA
0D0D4:  MOVLB  0
0D0D6:  GOTO   D0EC
0D0DA:  MOVLB  0
....................             mcp4901_1_write(count);
0D0DC:  MOVFF  A32,A64
0D0E0:  MOVFF  A31,A63
0D0E4:  CALL   246E
....................         } else {
0D0E8:  GOTO   D0F8
....................             mcp4901_1_write(0);  // 閾値到達後は0出力
0D0EC:  MOVLB  A
0D0EE:  CLRF   x64
0D0F0:  CLRF   x63
0D0F2:  MOVLB  0
0D0F4:  CALL   246E
....................         }
.................... 
....................         if (port2.active) {
0D0F8:  MOVLB  A
0D0FA:  BTFSC  x30.0
0D0FC:  BRA    D104
0D0FE:  MOVLB  0
0D100:  GOTO   D116
0D104:  MOVLB  0
....................             mcp4901_2_write(count);
0D106:  MOVFF  A32,A64
0D10A:  MOVFF  A31,A63
0D10E:  CALL   24B0
....................         } else {
0D112:  GOTO   D122
....................             mcp4901_2_write(0);
0D116:  MOVLB  A
0D118:  CLRF   x64
0D11A:  CLRF   x63
0D11C:  MOVLB  0
0D11E:  CALL   24B0
....................         }
.................... 
....................         delay_us(100);
0D122:  MOVLW  85
0D124:  MOVWF  00
0D126:  DECFSZ 00,F
0D128:  BRA    D126
.................... 
....................         // データ取得
....................         if (port1.active) {
0D12A:  MOVLB  6
0D12C:  BTFSC  x30.0
0D12E:  BRA    D136
0D130:  MOVLB  0
0D132:  GOTO   D256
0D136:  MOVLB  0
....................             port1.data_buffer[count].voltage = ad7490_read(ADC_CIGS1_AMP);
0D138:  MOVLB  A
0D13A:  RLCF   x31,W
0D13C:  MOVWF  02
0D13E:  RLCF   x32,W
0D140:  MOVWF  03
0D142:  RLCF   02,F
0D144:  RLCF   03,F
0D146:  MOVLW  FC
0D148:  ANDWF  02,F
0D14A:  MOVF   02,W
0D14C:  ADDLW  34
0D14E:  MOVWF  01
0D150:  MOVLW  02
0D152:  ADDWFC 03,F
0D154:  MOVF   01,W
0D156:  MOVWF  x42
0D158:  MOVFF  03,A43
0D15C:  MOVLW  02
0D15E:  MOVWF  x75
0D160:  MOVLB  0
0D162:  CALL   209A
0D166:  MOVFF  A43,FEA
0D16A:  MOVFF  A42,FE9
0D16E:  MOVFF  02,FEC
0D172:  MOVF   FED,F
0D174:  MOVFF  01,FEF
....................             port1.data_buffer[count].current = ad7490_read(ADC_CIGS1_CURR);
0D178:  MOVLB  A
0D17A:  RLCF   x31,W
0D17C:  MOVWF  02
0D17E:  RLCF   x32,W
0D180:  MOVWF  03
0D182:  RLCF   02,F
0D184:  RLCF   03,F
0D186:  MOVLW  FC
0D188:  ANDWF  02,F
0D18A:  MOVF   02,W
0D18C:  ADDLW  03
0D18E:  MOVWF  x40
0D190:  MOVLW  00
0D192:  ADDWFC 03,W
0D194:  MOVWF  x41
0D196:  MOVLW  02
0D198:  ADDWF  x40,W
0D19A:  MOVWF  01
0D19C:  MOVLW  00
0D19E:  ADDWFC x41,W
0D1A0:  MOVWF  03
0D1A2:  MOVF   01,W
0D1A4:  ADDLW  31
0D1A6:  MOVWF  01
0D1A8:  MOVLW  02
0D1AA:  ADDWFC 03,F
0D1AC:  MOVF   01,W
0D1AE:  MOVWF  x40
0D1B0:  MOVFF  03,A41
0D1B4:  MOVLW  01
0D1B6:  MOVWF  x75
0D1B8:  MOVLB  0
0D1BA:  CALL   209A
0D1BE:  MOVFF  A41,FEA
0D1C2:  MOVFF  A40,FE9
0D1C6:  MOVFF  02,FEC
0D1CA:  MOVF   FED,F
0D1CC:  MOVFF  01,FEF
....................             port1.sweep_step = count + 1;
0D1D0:  MOVLW  01
0D1D2:  MOVLB  A
0D1D4:  ADDWF  x31,W
0D1D6:  MOVLB  2
0D1D8:  MOVWF  x32
0D1DA:  MOVLW  00
0D1DC:  MOVLB  A
0D1DE:  ADDWFC x32,W
0D1E0:  MOVLB  2
0D1E2:  MOVWF  x33
....................             if (port1.data_buffer[count].current < curr_limit) {
0D1E4:  MOVLB  A
0D1E6:  RLCF   x31,W
0D1E8:  MOVWF  02
0D1EA:  RLCF   x32,W
0D1EC:  MOVWF  03
0D1EE:  RLCF   02,F
0D1F0:  RLCF   03,F
0D1F2:  MOVLW  FC
0D1F4:  ANDWF  02,F
0D1F6:  MOVF   02,W
0D1F8:  ADDLW  03
0D1FA:  MOVWF  x40
0D1FC:  MOVLW  00
0D1FE:  ADDWFC 03,W
0D200:  MOVWF  x41
0D202:  MOVLW  02
0D204:  ADDWF  x40,W
0D206:  MOVWF  01
0D208:  MOVLW  00
0D20A:  ADDWFC x41,W
0D20C:  MOVWF  03
0D20E:  MOVF   01,W
0D210:  ADDLW  31
0D212:  MOVWF  FE9
0D214:  MOVLW  02
0D216:  ADDWFC 03,W
0D218:  MOVWF  FEA
0D21A:  MOVFF  FEC,A41
0D21E:  MOVF   FED,F
0D220:  MOVFF  FEF,A40
0D224:  MOVF   x41,W
0D226:  MOVLB  2
0D228:  SUBWF  x30,W
0D22A:  BTFSC  FD8.0
0D22C:  BRA    D234
0D22E:  MOVLB  0
0D230:  GOTO   D256
0D234:  MOVLB  0
0D236:  BTFSS  FD8.2
0D238:  GOTO   D250
0D23C:  MOVLB  2
0D23E:  MOVF   x2F,W
0D240:  MOVLB  A
0D242:  SUBWF  x40,W
0D244:  BTFSS  FD8.0
0D246:  BRA    D24E
0D248:  MOVLB  0
0D24A:  GOTO   D256
0D24E:  MOVLB  0
....................                 port1.active = 0;  // 閾値到達で測定終了
0D250:  MOVLB  6
0D252:  BCF    x30.0
0D254:  MOVLB  0
....................             }
....................         }
.................... 
....................         if (port2.active) {
0D256:  MOVLB  A
0D258:  BTFSC  x30.0
0D25A:  BRA    D262
0D25C:  MOVLB  0
0D25E:  GOTO   D382
0D262:  MOVLB  0
....................             port2.data_buffer[count].voltage = ad7490_read(ADC_CIGS2_AMP);
0D264:  MOVLB  A
0D266:  RLCF   x31,W
0D268:  MOVWF  02
0D26A:  RLCF   x32,W
0D26C:  MOVWF  03
0D26E:  RLCF   02,F
0D270:  RLCF   03,F
0D272:  MOVLW  FC
0D274:  ANDWF  02,F
0D276:  MOVF   02,W
0D278:  ADDLW  34
0D27A:  MOVWF  01
0D27C:  MOVLW  06
0D27E:  ADDWFC 03,F
0D280:  MOVF   01,W
0D282:  MOVWF  x42
0D284:  MOVFF  03,A43
0D288:  MOVLW  06
0D28A:  MOVWF  x75
0D28C:  MOVLB  0
0D28E:  CALL   209A
0D292:  MOVFF  A43,FEA
0D296:  MOVFF  A42,FE9
0D29A:  MOVFF  02,FEC
0D29E:  MOVF   FED,F
0D2A0:  MOVFF  01,FEF
....................             port2.data_buffer[count].current = ad7490_read(ADC_CIGS2_CURR);
0D2A4:  MOVLB  A
0D2A6:  RLCF   x31,W
0D2A8:  MOVWF  02
0D2AA:  RLCF   x32,W
0D2AC:  MOVWF  03
0D2AE:  RLCF   02,F
0D2B0:  RLCF   03,F
0D2B2:  MOVLW  FC
0D2B4:  ANDWF  02,F
0D2B6:  MOVF   02,W
0D2B8:  ADDLW  03
0D2BA:  MOVWF  x40
0D2BC:  MOVLW  00
0D2BE:  ADDWFC 03,W
0D2C0:  MOVWF  x41
0D2C2:  MOVLW  02
0D2C4:  ADDWF  x40,W
0D2C6:  MOVWF  01
0D2C8:  MOVLW  00
0D2CA:  ADDWFC x41,W
0D2CC:  MOVWF  03
0D2CE:  MOVF   01,W
0D2D0:  ADDLW  31
0D2D2:  MOVWF  01
0D2D4:  MOVLW  06
0D2D6:  ADDWFC 03,F
0D2D8:  MOVF   01,W
0D2DA:  MOVWF  x40
0D2DC:  MOVFF  03,A41
0D2E0:  MOVLW  05
0D2E2:  MOVWF  x75
0D2E4:  MOVLB  0
0D2E6:  CALL   209A
0D2EA:  MOVFF  A41,FEA
0D2EE:  MOVFF  A40,FE9
0D2F2:  MOVFF  02,FEC
0D2F6:  MOVF   FED,F
0D2F8:  MOVFF  01,FEF
....................             port2.sweep_step = count + 1;
0D2FC:  MOVLW  01
0D2FE:  MOVLB  A
0D300:  ADDWF  x31,W
0D302:  MOVLB  6
0D304:  MOVWF  x32
0D306:  MOVLW  00
0D308:  MOVLB  A
0D30A:  ADDWFC x32,W
0D30C:  MOVLB  6
0D30E:  MOVWF  x33
....................             if (port2.data_buffer[count].current < curr_limit) {
0D310:  MOVLB  A
0D312:  RLCF   x31,W
0D314:  MOVWF  02
0D316:  RLCF   x32,W
0D318:  MOVWF  03
0D31A:  RLCF   02,F
0D31C:  RLCF   03,F
0D31E:  MOVLW  FC
0D320:  ANDWF  02,F
0D322:  MOVF   02,W
0D324:  ADDLW  03
0D326:  MOVWF  x40
0D328:  MOVLW  00
0D32A:  ADDWFC 03,W
0D32C:  MOVWF  x41
0D32E:  MOVLW  02
0D330:  ADDWF  x40,W
0D332:  MOVWF  01
0D334:  MOVLW  00
0D336:  ADDWFC x41,W
0D338:  MOVWF  03
0D33A:  MOVF   01,W
0D33C:  ADDLW  31
0D33E:  MOVWF  FE9
0D340:  MOVLW  06
0D342:  ADDWFC 03,W
0D344:  MOVWF  FEA
0D346:  MOVFF  FEC,A41
0D34A:  MOVF   FED,F
0D34C:  MOVFF  FEF,A40
0D350:  MOVF   x41,W
0D352:  MOVLB  2
0D354:  SUBWF  x30,W
0D356:  BTFSC  FD8.0
0D358:  BRA    D360
0D35A:  MOVLB  0
0D35C:  GOTO   D382
0D360:  MOVLB  0
0D362:  BTFSS  FD8.2
0D364:  GOTO   D37C
0D368:  MOVLB  2
0D36A:  MOVF   x2F,W
0D36C:  MOVLB  A
0D36E:  SUBWF  x40,W
0D370:  BTFSS  FD8.0
0D372:  BRA    D37A
0D374:  MOVLB  0
0D376:  GOTO   D382
0D37A:  MOVLB  0
....................                 port2.active = 0;
0D37C:  MOVLB  A
0D37E:  BCF    x30.0
0D380:  MOVLB  0
....................             }
....................         }
.................... 
....................         count++;
0D382:  MOVLB  A
0D384:  INCF   x31,F
0D386:  BTFSC  FD8.2
0D388:  INCF   x32,F
....................         if (count >= 255) {
0D38A:  MOVF   x32,F
0D38C:  BTFSC  FD8.2
0D38E:  BRA    D396
0D390:  MOVLB  0
0D392:  GOTO   D3AA
0D396:  MOVLB  0
0D398:  MOVLB  A
0D39A:  MOVF   x31,W
0D39C:  SUBLW  FE
0D39E:  BTFSS  FD8.0
0D3A0:  BRA    D3A8
0D3A2:  MOVLB  0
0D3A4:  GOTO   D3AE
0D3A8:  MOVLB  0
....................             break;
0D3AA:  GOTO   D3B2
....................         }
0D3AE:  GOTO   D0B2
....................     }
.................... 
....................     // Print I-V data
....................     fprintf(PC, "Volt1,Curr1,Volt2,Curr2\r\n");
0D3B2:  MOVLW  E4
0D3B4:  MOVWF  FF6
0D3B6:  MOVLW  05
0D3B8:  MOVWF  FF7
0D3BA:  MOVLW  00
0D3BC:  MOVWF  FF8
0D3BE:  CALL   1EDC
....................     for (int i = 0; i < count; i++) {
0D3C2:  MOVLB  A
0D3C4:  CLRF   x3F
0D3C6:  MOVLB  0
0D3C8:  MOVLB  A
0D3CA:  MOVF   x32,F
0D3CC:  BTFSC  FD8.2
0D3CE:  BRA    D3D6
0D3D0:  MOVLB  0
0D3D2:  GOTO   D3EA
0D3D6:  MOVLB  0
0D3D8:  MOVLB  A
0D3DA:  MOVF   x31,W
0D3DC:  SUBWF  x3F,W
0D3DE:  BTFSS  FD8.0
0D3E0:  BRA    D3E8
0D3E2:  MOVLB  0
0D3E4:  GOTO   D59C
0D3E8:  MOVLB  0
.................... 
....................         fprintf(PC, "%04LX,%04LX,%04LX,%04LX\r\n",
....................             port1.data_buffer[i].voltage, port1.data_buffer[i].current,
....................             port2.data_buffer[i].voltage, port2.data_buffer[i].current);
0D3EA:  MOVLB  A
0D3EC:  CLRF   xAF
0D3EE:  MOVFF  A3F,AAE
0D3F2:  CLRF   xB1
0D3F4:  MOVLW  04
0D3F6:  MOVWF  xB0
0D3F8:  MOVLB  0
0D3FA:  CALL   7DD2
0D3FE:  MOVFF  02,03
0D402:  MOVF   01,W
0D404:  ADDLW  34
0D406:  MOVWF  FE9
0D408:  MOVLW  02
0D40A:  ADDWFC 03,W
0D40C:  MOVWF  FEA
0D40E:  MOVFF  FEC,A43
0D412:  MOVF   FED,F
0D414:  MOVFF  FEF,A42
0D418:  MOVLB  A
0D41A:  CLRF   xAF
0D41C:  MOVFF  A3F,AAE
0D420:  CLRF   xB1
0D422:  MOVLW  04
0D424:  MOVWF  xB0
0D426:  MOVLB  0
0D428:  CALL   7DD2
0D42C:  MOVFF  02,03
0D430:  MOVF   01,W
0D432:  ADDLW  03
0D434:  MOVLB  A
0D436:  MOVWF  x44
0D438:  MOVLW  00
0D43A:  ADDWFC 03,W
0D43C:  MOVWF  x45
0D43E:  MOVLW  02
0D440:  ADDWF  x44,W
0D442:  MOVWF  01
0D444:  MOVLW  00
0D446:  ADDWFC x45,W
0D448:  MOVWF  03
0D44A:  MOVF   01,W
0D44C:  ADDLW  31
0D44E:  MOVWF  FE9
0D450:  MOVLW  02
0D452:  ADDWFC 03,W
0D454:  MOVWF  FEA
0D456:  MOVFF  FEC,A45
0D45A:  MOVF   FED,F
0D45C:  MOVFF  FEF,A44
0D460:  CLRF   xAF
0D462:  MOVFF  A3F,AAE
0D466:  CLRF   xB1
0D468:  MOVLW  04
0D46A:  MOVWF  xB0
0D46C:  MOVLB  0
0D46E:  CALL   7DD2
0D472:  MOVFF  02,03
0D476:  MOVF   01,W
0D478:  ADDLW  34
0D47A:  MOVWF  FE9
0D47C:  MOVLW  06
0D47E:  ADDWFC 03,W
0D480:  MOVWF  FEA
0D482:  MOVFF  FEC,A49
0D486:  MOVF   FED,F
0D488:  MOVFF  FEF,A48
0D48C:  MOVLB  A
0D48E:  CLRF   xAF
0D490:  MOVFF  A3F,AAE
0D494:  CLRF   xB1
0D496:  MOVLW  04
0D498:  MOVWF  xB0
0D49A:  MOVLB  0
0D49C:  CALL   7DD2
0D4A0:  MOVFF  02,03
0D4A4:  MOVF   01,W
0D4A6:  ADDLW  03
0D4A8:  MOVLB  A
0D4AA:  MOVWF  x4A
0D4AC:  MOVLW  00
0D4AE:  ADDWFC 03,W
0D4B0:  MOVWF  x4B
0D4B2:  MOVLW  02
0D4B4:  ADDWF  x4A,W
0D4B6:  MOVWF  01
0D4B8:  MOVLW  00
0D4BA:  ADDWFC x4B,W
0D4BC:  MOVWF  03
0D4BE:  MOVF   01,W
0D4C0:  ADDLW  31
0D4C2:  MOVWF  FE9
0D4C4:  MOVLW  06
0D4C6:  ADDWFC 03,W
0D4C8:  MOVWF  FEA
0D4CA:  MOVFF  FEC,A4B
0D4CE:  MOVF   FED,F
0D4D0:  MOVFF  FEF,A4A
0D4D4:  MOVFF  A43,A62
0D4D8:  MOVLW  37
0D4DA:  MOVWF  x63
0D4DC:  MOVLB  0
0D4DE:  CALL   2126
0D4E2:  MOVFF  A42,A62
0D4E6:  MOVLW  37
0D4E8:  MOVLB  A
0D4EA:  MOVWF  x63
0D4EC:  MOVLB  0
0D4EE:  CALL   2126
0D4F2:  MOVLW  2C
0D4F4:  BTFSS  FA6.6
0D4F6:  GOTO   D4F4
0D4FA:  MOVLB  E
0D4FC:  MOVWF  xF9
0D4FE:  MOVFF  A45,A62
0D502:  MOVLW  37
0D504:  MOVLB  A
0D506:  MOVWF  x63
0D508:  MOVLB  0
0D50A:  CALL   2126
0D50E:  MOVFF  A44,A62
0D512:  MOVLW  37
0D514:  MOVLB  A
0D516:  MOVWF  x63
0D518:  MOVLB  0
0D51A:  CALL   2126
0D51E:  MOVLW  2C
0D520:  BTFSS  FA6.6
0D522:  GOTO   D520
0D526:  MOVLB  E
0D528:  MOVWF  xF9
0D52A:  MOVFF  A49,A62
0D52E:  MOVLW  37
0D530:  MOVLB  A
0D532:  MOVWF  x63
0D534:  MOVLB  0
0D536:  CALL   2126
0D53A:  MOVFF  A48,A62
0D53E:  MOVLW  37
0D540:  MOVLB  A
0D542:  MOVWF  x63
0D544:  MOVLB  0
0D546:  CALL   2126
0D54A:  MOVLW  2C
0D54C:  BTFSS  FA6.6
0D54E:  GOTO   D54C
0D552:  MOVLB  E
0D554:  MOVWF  xF9
0D556:  MOVFF  A4B,A62
0D55A:  MOVLW  37
0D55C:  MOVLB  A
0D55E:  MOVWF  x63
0D560:  MOVLB  0
0D562:  CALL   2126
0D566:  MOVFF  A4A,A62
0D56A:  MOVLW  37
0D56C:  MOVLB  A
0D56E:  MOVWF  x63
0D570:  MOVLB  0
0D572:  CALL   2126
0D576:  MOVLW  0D
0D578:  BTFSS  FA6.6
0D57A:  GOTO   D578
0D57E:  MOVLB  E
0D580:  MOVWF  xF9
0D582:  MOVLW  0A
0D584:  MOVLB  0
0D586:  BTFSS  FA6.6
0D588:  GOTO   D586
0D58C:  MOVLB  E
0D58E:  MOVWF  xF9
0D590:  MOVLB  0
0D592:  MOVLB  A
0D594:  INCF   x3F,F
0D596:  MOVLB  0
0D598:  GOTO   D3C8
....................     }
0D59C:  GOTO   D82A (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit)
.................... {
....................     fprintf(PC, ".");
*
0A2E8:  MOVLW  2E
0A2EA:  BTFSS  FA6.6
0A2EC:  GOTO   A2EA
0A2F0:  MOVLB  E
0A2F2:  MOVWF  xF9
....................     
....................     // Enable both CIGS ports
....................     connect_port1();
0A2F4:  MOVLB  0
0A2F6:  CALL   4D3E
....................     connect_port2();
0A2FA:  CALL   4D46
....................     mcp4901_1_write(0); 
0A2FE:  MOVLB  A
0A300:  CLRF   x64
0A302:  CLRF   x63
0A304:  MOVLB  0
0A306:  CALL   246E
....................     mcp4901_2_write(0);
0A30A:  MOVLB  A
0A30C:  CLRF   x64
0A30E:  CLRF   x63
0A310:  MOVLB  0
0A312:  CALL   24B0
....................     delay_ms(100);
0A316:  MOVLW  64
0A318:  MOVLB  B
0A31A:  MOVWF  xA3
0A31C:  MOVLB  0
0A31E:  CALL   1EAE
....................     
....................     // Init Port1
....................     sweep_config_t port1 = {0};
0A322:  MOVLB  2
0A324:  CLRF   x47
0A326:  CLRF   x48
0A328:  CLRF   x49
0A32A:  CLRF   x4A
0A32C:  CLRF   x4B
0A32E:  CLRF   x4C
0A330:  CLRF   x4D
0A332:  CLRF   x4E
0A334:  CLRF   x4F
0A336:  CLRF   x50
0A338:  CLRF   x51
0A33A:  CLRF   x52
0A33C:  CLRF   x53
0A33E:  CLRF   x54
0A340:  CLRF   x55
0A342:  CLRF   x56
0A344:  CLRF   x57
0A346:  CLRF   x58
0A348:  CLRF   x59
0A34A:  CLRF   x5A
0A34C:  CLRF   x5B
0A34E:  CLRF   x5C
0A350:  CLRF   x5D
0A352:  CLRF   x5E
0A354:  CLRF   x5F
0A356:  CLRF   x60
0A358:  CLRF   x61
0A35A:  CLRF   x62
0A35C:  CLRF   x63
0A35E:  CLRF   x64
0A360:  CLRF   x65
0A362:  CLRF   x66
0A364:  CLRF   x67
0A366:  CLRF   x68
0A368:  CLRF   x69
0A36A:  CLRF   x6A
0A36C:  CLRF   x6B
0A36E:  CLRF   x6C
0A370:  CLRF   x6D
0A372:  CLRF   x6E
0A374:  CLRF   x6F
0A376:  CLRF   x70
0A378:  CLRF   x71
0A37A:  CLRF   x72
0A37C:  CLRF   x73
0A37E:  CLRF   x74
0A380:  CLRF   x75
0A382:  CLRF   x76
0A384:  CLRF   x77
0A386:  CLRF   x78
0A388:  CLRF   x79
0A38A:  CLRF   x7A
0A38C:  CLRF   x7B
0A38E:  CLRF   x7C
0A390:  CLRF   x7D
0A392:  CLRF   x7E
0A394:  CLRF   x7F
0A396:  CLRF   x80
0A398:  CLRF   x81
0A39A:  CLRF   x82
0A39C:  CLRF   x83
0A39E:  CLRF   x84
0A3A0:  CLRF   x85
0A3A2:  CLRF   x86
0A3A4:  CLRF   x87
0A3A6:  CLRF   x88
0A3A8:  CLRF   x89
0A3AA:  CLRF   x8A
0A3AC:  CLRF   x8B
0A3AE:  CLRF   x8C
0A3B0:  CLRF   x8D
0A3B2:  CLRF   x8E
0A3B4:  CLRF   x8F
0A3B6:  CLRF   x90
0A3B8:  CLRF   x91
0A3BA:  CLRF   x92
0A3BC:  CLRF   x93
0A3BE:  CLRF   x94
0A3C0:  CLRF   x95
0A3C2:  CLRF   x96
0A3C4:  CLRF   x97
0A3C6:  CLRF   x98
0A3C8:  CLRF   x99
0A3CA:  CLRF   x9A
0A3CC:  CLRF   x9B
0A3CE:  CLRF   x9C
0A3D0:  CLRF   x9D
0A3D2:  CLRF   x9E
0A3D4:  CLRF   x9F
0A3D6:  CLRF   xA0
0A3D8:  CLRF   xA1
0A3DA:  CLRF   xA2
0A3DC:  CLRF   xA3
0A3DE:  CLRF   xA4
0A3E0:  CLRF   xA5
0A3E2:  CLRF   xA6
0A3E4:  CLRF   xA7
0A3E6:  CLRF   xA8
0A3E8:  CLRF   xA9
0A3EA:  CLRF   xAA
0A3EC:  CLRF   xAB
0A3EE:  CLRF   xAC
0A3F0:  CLRF   xAD
0A3F2:  CLRF   xAE
0A3F4:  CLRF   xAF
0A3F6:  CLRF   xB0
0A3F8:  CLRF   xB1
0A3FA:  CLRF   xB2
0A3FC:  CLRF   xB3
0A3FE:  CLRF   xB4
0A400:  CLRF   xB5
0A402:  CLRF   xB6
0A404:  CLRF   xB7
0A406:  CLRF   xB8
0A408:  CLRF   xB9
0A40A:  CLRF   xBA
0A40C:  CLRF   xBB
0A40E:  CLRF   xBC
0A410:  CLRF   xBD
0A412:  CLRF   xBE
0A414:  CLRF   xBF
0A416:  CLRF   xC0
0A418:  CLRF   xC1
0A41A:  CLRF   xC2
0A41C:  CLRF   xC3
0A41E:  CLRF   xC4
0A420:  CLRF   xC5
0A422:  CLRF   xC6
0A424:  CLRF   xC7
0A426:  CLRF   xC8
0A428:  CLRF   xC9
0A42A:  CLRF   xCA
0A42C:  CLRF   xCB
0A42E:  CLRF   xCC
0A430:  CLRF   xCD
0A432:  CLRF   xCE
0A434:  CLRF   xCF
0A436:  CLRF   xD0
0A438:  CLRF   xD1
0A43A:  CLRF   xD2
0A43C:  CLRF   xD3
0A43E:  CLRF   xD4
0A440:  CLRF   xD5
0A442:  CLRF   xD6
0A444:  CLRF   xD7
0A446:  CLRF   xD8
0A448:  CLRF   xD9
0A44A:  CLRF   xDA
0A44C:  CLRF   xDB
0A44E:  CLRF   xDC
0A450:  CLRF   xDD
0A452:  CLRF   xDE
0A454:  CLRF   xDF
0A456:  CLRF   xE0
0A458:  CLRF   xE1
0A45A:  CLRF   xE2
0A45C:  CLRF   xE3
0A45E:  CLRF   xE4
0A460:  CLRF   xE5
0A462:  CLRF   xE6
0A464:  CLRF   xE7
0A466:  CLRF   xE8
0A468:  CLRF   xE9
0A46A:  CLRF   xEA
0A46C:  CLRF   xEB
0A46E:  CLRF   xEC
0A470:  CLRF   xED
0A472:  CLRF   xEE
0A474:  CLRF   xEF
0A476:  CLRF   xF0
0A478:  CLRF   xF1
0A47A:  CLRF   xF2
0A47C:  CLRF   xF3
0A47E:  CLRF   xF4
0A480:  CLRF   xF5
0A482:  CLRF   xF6
0A484:  CLRF   xF7
0A486:  CLRF   xF8
0A488:  CLRF   xF9
0A48A:  CLRF   xFA
0A48C:  CLRF   xFB
0A48E:  CLRF   xFC
0A490:  CLRF   xFD
0A492:  CLRF   xFE
0A494:  CLRF   xFF
0A496:  MOVLB  3
0A498:  CLRF   x00
0A49A:  CLRF   x01
0A49C:  CLRF   x02
0A49E:  CLRF   x03
0A4A0:  CLRF   x04
0A4A2:  CLRF   x05
0A4A4:  CLRF   x06
0A4A6:  CLRF   x07
0A4A8:  CLRF   x08
0A4AA:  CLRF   x09
0A4AC:  CLRF   x0A
0A4AE:  CLRF   x0B
0A4B0:  CLRF   x0C
0A4B2:  CLRF   x0D
0A4B4:  CLRF   x0E
0A4B6:  CLRF   x0F
0A4B8:  CLRF   x10
0A4BA:  CLRF   x11
0A4BC:  CLRF   x12
0A4BE:  CLRF   x13
0A4C0:  CLRF   x14
0A4C2:  CLRF   x15
0A4C4:  CLRF   x16
0A4C6:  CLRF   x17
0A4C8:  CLRF   x18
0A4CA:  CLRF   x19
0A4CC:  CLRF   x1A
0A4CE:  CLRF   x1B
0A4D0:  CLRF   x1C
0A4D2:  CLRF   x1D
0A4D4:  CLRF   x1E
0A4D6:  CLRF   x1F
0A4D8:  CLRF   x20
0A4DA:  CLRF   x21
0A4DC:  CLRF   x22
0A4DE:  CLRF   x23
0A4E0:  CLRF   x24
0A4E2:  CLRF   x25
0A4E4:  CLRF   x26
0A4E6:  CLRF   x27
0A4E8:  CLRF   x28
0A4EA:  CLRF   x29
0A4EC:  CLRF   x2A
0A4EE:  CLRF   x2B
0A4F0:  CLRF   x2C
0A4F2:  CLRF   x2D
0A4F4:  CLRF   x2E
0A4F6:  CLRF   x2F
0A4F8:  CLRF   x30
0A4FA:  CLRF   x31
0A4FC:  CLRF   x32
0A4FE:  CLRF   x33
0A500:  CLRF   x34
0A502:  CLRF   x35
0A504:  CLRF   x36
0A506:  CLRF   x37
0A508:  CLRF   x38
0A50A:  CLRF   x39
0A50C:  CLRF   x3A
0A50E:  CLRF   x3B
0A510:  CLRF   x3C
0A512:  CLRF   x3D
0A514:  CLRF   x3E
0A516:  CLRF   x3F
0A518:  CLRF   x40
0A51A:  CLRF   x41
0A51C:  CLRF   x42
0A51E:  CLRF   x43
0A520:  CLRF   x44
0A522:  CLRF   x45
0A524:  CLRF   x46
0A526:  CLRF   x47
0A528:  CLRF   x48
0A52A:  CLRF   x49
0A52C:  CLRF   x4A
0A52E:  CLRF   x4B
0A530:  CLRF   x4C
0A532:  CLRF   x4D
0A534:  CLRF   x4E
0A536:  CLRF   x4F
0A538:  CLRF   x50
0A53A:  CLRF   x51
0A53C:  CLRF   x52
0A53E:  CLRF   x53
0A540:  CLRF   x54
0A542:  CLRF   x55
0A544:  CLRF   x56
0A546:  CLRF   x57
0A548:  CLRF   x58
0A54A:  CLRF   x59
0A54C:  CLRF   x5A
0A54E:  CLRF   x5B
0A550:  CLRF   x5C
0A552:  CLRF   x5D
0A554:  CLRF   x5E
0A556:  CLRF   x5F
0A558:  CLRF   x60
0A55A:  CLRF   x61
0A55C:  CLRF   x62
0A55E:  CLRF   x63
0A560:  CLRF   x64
0A562:  CLRF   x65
0A564:  CLRF   x66
0A566:  CLRF   x67
0A568:  CLRF   x68
0A56A:  CLRF   x69
0A56C:  CLRF   x6A
0A56E:  CLRF   x6B
0A570:  CLRF   x6C
0A572:  CLRF   x6D
0A574:  CLRF   x6E
0A576:  CLRF   x6F
0A578:  CLRF   x70
0A57A:  CLRF   x71
0A57C:  CLRF   x72
0A57E:  CLRF   x73
0A580:  CLRF   x74
0A582:  CLRF   x75
0A584:  CLRF   x76
0A586:  CLRF   x77
0A588:  CLRF   x78
0A58A:  CLRF   x79
0A58C:  CLRF   x7A
0A58E:  CLRF   x7B
0A590:  CLRF   x7C
0A592:  CLRF   x7D
0A594:  CLRF   x7E
0A596:  CLRF   x7F
0A598:  CLRF   x80
0A59A:  CLRF   x81
0A59C:  CLRF   x82
0A59E:  CLRF   x83
0A5A0:  CLRF   x84
0A5A2:  CLRF   x85
0A5A4:  CLRF   x86
0A5A6:  CLRF   x87
0A5A8:  CLRF   x88
0A5AA:  CLRF   x89
0A5AC:  CLRF   x8A
0A5AE:  CLRF   x8B
0A5B0:  CLRF   x8C
0A5B2:  CLRF   x8D
0A5B4:  CLRF   x8E
0A5B6:  CLRF   x8F
0A5B8:  CLRF   x90
0A5BA:  CLRF   x91
0A5BC:  CLRF   x92
0A5BE:  CLRF   x93
0A5C0:  CLRF   x94
0A5C2:  CLRF   x95
0A5C4:  CLRF   x96
0A5C6:  CLRF   x97
0A5C8:  CLRF   x98
0A5CA:  CLRF   x99
0A5CC:  CLRF   x9A
0A5CE:  CLRF   x9B
0A5D0:  CLRF   x9C
0A5D2:  CLRF   x9D
0A5D4:  CLRF   x9E
0A5D6:  CLRF   x9F
0A5D8:  CLRF   xA0
0A5DA:  CLRF   xA1
0A5DC:  CLRF   xA2
0A5DE:  CLRF   xA3
0A5E0:  CLRF   xA4
0A5E2:  CLRF   xA5
0A5E4:  CLRF   xA6
0A5E6:  CLRF   xA7
0A5E8:  CLRF   xA8
0A5EA:  CLRF   xA9
0A5EC:  CLRF   xAA
0A5EE:  CLRF   xAB
0A5F0:  CLRF   xAC
0A5F2:  CLRF   xAD
0A5F4:  CLRF   xAE
0A5F6:  CLRF   xAF
0A5F8:  CLRF   xB0
0A5FA:  CLRF   xB1
0A5FC:  CLRF   xB2
0A5FE:  CLRF   xB3
0A600:  CLRF   xB4
0A602:  CLRF   xB5
0A604:  CLRF   xB6
0A606:  CLRF   xB7
0A608:  CLRF   xB8
0A60A:  CLRF   xB9
0A60C:  CLRF   xBA
0A60E:  CLRF   xBB
0A610:  CLRF   xBC
0A612:  CLRF   xBD
0A614:  CLRF   xBE
0A616:  CLRF   xBF
0A618:  CLRF   xC0
0A61A:  CLRF   xC1
0A61C:  CLRF   xC2
0A61E:  CLRF   xC3
0A620:  CLRF   xC4
0A622:  CLRF   xC5
0A624:  CLRF   xC6
0A626:  CLRF   xC7
0A628:  CLRF   xC8
0A62A:  CLRF   xC9
0A62C:  CLRF   xCA
0A62E:  CLRF   xCB
0A630:  CLRF   xCC
0A632:  CLRF   xCD
0A634:  CLRF   xCE
0A636:  CLRF   xCF
0A638:  CLRF   xD0
0A63A:  CLRF   xD1
0A63C:  CLRF   xD2
0A63E:  CLRF   xD3
0A640:  CLRF   xD4
0A642:  CLRF   xD5
0A644:  CLRF   xD6
0A646:  CLRF   xD7
0A648:  CLRF   xD8
0A64A:  CLRF   xD9
0A64C:  CLRF   xDA
0A64E:  CLRF   xDB
0A650:  CLRF   xDC
0A652:  CLRF   xDD
0A654:  CLRF   xDE
0A656:  CLRF   xDF
0A658:  CLRF   xE0
0A65A:  CLRF   xE1
0A65C:  CLRF   xE2
0A65E:  CLRF   xE3
0A660:  CLRF   xE4
0A662:  CLRF   xE5
0A664:  CLRF   xE6
0A666:  CLRF   xE7
0A668:  CLRF   xE8
0A66A:  CLRF   xE9
0A66C:  CLRF   xEA
0A66E:  CLRF   xEB
0A670:  CLRF   xEC
0A672:  CLRF   xED
0A674:  CLRF   xEE
0A676:  CLRF   xEF
0A678:  CLRF   xF0
0A67A:  CLRF   xF1
0A67C:  CLRF   xF2
0A67E:  CLRF   xF3
0A680:  CLRF   xF4
0A682:  CLRF   xF5
0A684:  CLRF   xF6
0A686:  CLRF   xF7
0A688:  CLRF   xF8
0A68A:  CLRF   xF9
0A68C:  CLRF   xFA
0A68E:  CLRF   xFB
0A690:  CLRF   xFC
0A692:  CLRF   xFD
0A694:  CLRF   xFE
0A696:  CLRF   xFF
0A698:  MOVLB  4
0A69A:  CLRF   x00
0A69C:  CLRF   x01
0A69E:  CLRF   x02
0A6A0:  CLRF   x03
0A6A2:  CLRF   x04
0A6A4:  CLRF   x05
0A6A6:  CLRF   x06
0A6A8:  CLRF   x07
0A6AA:  CLRF   x08
0A6AC:  CLRF   x09
0A6AE:  CLRF   x0A
0A6B0:  CLRF   x0B
0A6B2:  CLRF   x0C
0A6B4:  CLRF   x0D
0A6B6:  CLRF   x0E
0A6B8:  CLRF   x0F
0A6BA:  CLRF   x10
0A6BC:  CLRF   x11
0A6BE:  CLRF   x12
0A6C0:  CLRF   x13
0A6C2:  CLRF   x14
0A6C4:  CLRF   x15
0A6C6:  CLRF   x16
0A6C8:  CLRF   x17
0A6CA:  CLRF   x18
0A6CC:  CLRF   x19
0A6CE:  CLRF   x1A
0A6D0:  CLRF   x1B
0A6D2:  CLRF   x1C
0A6D4:  CLRF   x1D
0A6D6:  CLRF   x1E
0A6D8:  CLRF   x1F
0A6DA:  CLRF   x20
0A6DC:  CLRF   x21
0A6DE:  CLRF   x22
0A6E0:  CLRF   x23
0A6E2:  CLRF   x24
0A6E4:  CLRF   x25
0A6E6:  CLRF   x26
0A6E8:  CLRF   x27
0A6EA:  CLRF   x28
0A6EC:  CLRF   x29
0A6EE:  CLRF   x2A
0A6F0:  CLRF   x2B
0A6F2:  CLRF   x2C
0A6F4:  CLRF   x2D
0A6F6:  CLRF   x2E
0A6F8:  CLRF   x2F
0A6FA:  CLRF   x30
0A6FC:  CLRF   x31
0A6FE:  CLRF   x32
0A700:  CLRF   x33
0A702:  CLRF   x34
0A704:  CLRF   x35
0A706:  CLRF   x36
0A708:  CLRF   x37
0A70A:  CLRF   x38
0A70C:  CLRF   x39
0A70E:  CLRF   x3A
0A710:  CLRF   x3B
0A712:  CLRF   x3C
0A714:  CLRF   x3D
0A716:  CLRF   x3E
0A718:  CLRF   x3F
0A71A:  CLRF   x40
0A71C:  CLRF   x41
0A71E:  CLRF   x42
0A720:  CLRF   x43
0A722:  CLRF   x44
0A724:  CLRF   x45
0A726:  CLRF   x46
0A728:  CLRF   x47
0A72A:  CLRF   x48
0A72C:  CLRF   x49
0A72E:  CLRF   x4A
0A730:  CLRF   x4B
0A732:  CLRF   x4C
0A734:  CLRF   x4D
0A736:  CLRF   x4E
0A738:  CLRF   x4F
0A73A:  CLRF   x50
0A73C:  CLRF   x51
0A73E:  CLRF   x52
0A740:  CLRF   x53
0A742:  CLRF   x54
0A744:  CLRF   x55
0A746:  CLRF   x56
0A748:  CLRF   x57
0A74A:  CLRF   x58
0A74C:  CLRF   x59
0A74E:  CLRF   x5A
0A750:  CLRF   x5B
0A752:  CLRF   x5C
0A754:  CLRF   x5D
0A756:  CLRF   x5E
0A758:  CLRF   x5F
0A75A:  CLRF   x60
0A75C:  CLRF   x61
0A75E:  CLRF   x62
0A760:  CLRF   x63
0A762:  CLRF   x64
0A764:  CLRF   x65
0A766:  CLRF   x66
0A768:  CLRF   x67
0A76A:  CLRF   x68
0A76C:  CLRF   x69
0A76E:  CLRF   x6A
0A770:  CLRF   x6B
0A772:  CLRF   x6C
0A774:  CLRF   x6D
0A776:  CLRF   x6E
0A778:  CLRF   x6F
0A77A:  CLRF   x70
0A77C:  CLRF   x71
0A77E:  CLRF   x72
0A780:  CLRF   x73
0A782:  CLRF   x74
0A784:  CLRF   x75
0A786:  CLRF   x76
0A788:  CLRF   x77
0A78A:  CLRF   x78
0A78C:  CLRF   x79
0A78E:  CLRF   x7A
0A790:  CLRF   x7B
0A792:  CLRF   x7C
0A794:  CLRF   x7D
0A796:  CLRF   x7E
0A798:  CLRF   x7F
0A79A:  CLRF   x80
0A79C:  CLRF   x81
0A79E:  CLRF   x82
0A7A0:  CLRF   x83
0A7A2:  CLRF   x84
0A7A4:  CLRF   x85
0A7A6:  CLRF   x86
0A7A8:  CLRF   x87
0A7AA:  CLRF   x88
0A7AC:  CLRF   x89
0A7AE:  CLRF   x8A
0A7B0:  CLRF   x8B
0A7B2:  CLRF   x8C
0A7B4:  CLRF   x8D
0A7B6:  CLRF   x8E
0A7B8:  CLRF   x8F
0A7BA:  CLRF   x90
0A7BC:  CLRF   x91
0A7BE:  CLRF   x92
0A7C0:  CLRF   x93
0A7C2:  CLRF   x94
0A7C4:  CLRF   x95
0A7C6:  CLRF   x96
0A7C8:  CLRF   x97
0A7CA:  CLRF   x98
0A7CC:  CLRF   x99
0A7CE:  CLRF   x9A
0A7D0:  CLRF   x9B
0A7D2:  CLRF   x9C
0A7D4:  CLRF   x9D
0A7D6:  CLRF   x9E
0A7D8:  CLRF   x9F
0A7DA:  CLRF   xA0
0A7DC:  CLRF   xA1
0A7DE:  CLRF   xA2
0A7E0:  CLRF   xA3
0A7E2:  CLRF   xA4
0A7E4:  CLRF   xA5
0A7E6:  CLRF   xA6
0A7E8:  CLRF   xA7
0A7EA:  CLRF   xA8
0A7EC:  CLRF   xA9
0A7EE:  CLRF   xAA
0A7F0:  CLRF   xAB
0A7F2:  CLRF   xAC
0A7F4:  CLRF   xAD
0A7F6:  CLRF   xAE
0A7F8:  CLRF   xAF
0A7FA:  CLRF   xB0
0A7FC:  CLRF   xB1
0A7FE:  CLRF   xB2
0A800:  CLRF   xB3
0A802:  CLRF   xB4
0A804:  CLRF   xB5
0A806:  CLRF   xB6
0A808:  CLRF   xB7
0A80A:  CLRF   xB8
0A80C:  CLRF   xB9
0A80E:  CLRF   xBA
0A810:  CLRF   xBB
0A812:  CLRF   xBC
0A814:  CLRF   xBD
0A816:  CLRF   xBE
0A818:  CLRF   xBF
0A81A:  CLRF   xC0
0A81C:  CLRF   xC1
0A81E:  CLRF   xC2
0A820:  CLRF   xC3
0A822:  CLRF   xC4
0A824:  CLRF   xC5
0A826:  CLRF   xC6
0A828:  CLRF   xC7
0A82A:  CLRF   xC8
0A82C:  CLRF   xC9
0A82E:  CLRF   xCA
0A830:  CLRF   xCB
0A832:  CLRF   xCC
0A834:  CLRF   xCD
0A836:  CLRF   xCE
0A838:  CLRF   xCF
0A83A:  CLRF   xD0
0A83C:  CLRF   xD1
0A83E:  CLRF   xD2
0A840:  CLRF   xD3
0A842:  CLRF   xD4
0A844:  CLRF   xD5
0A846:  CLRF   xD6
0A848:  CLRF   xD7
0A84A:  CLRF   xD8
0A84C:  CLRF   xD9
0A84E:  CLRF   xDA
0A850:  CLRF   xDB
0A852:  CLRF   xDC
0A854:  CLRF   xDD
0A856:  CLRF   xDE
0A858:  CLRF   xDF
0A85A:  CLRF   xE0
0A85C:  CLRF   xE1
0A85E:  CLRF   xE2
0A860:  CLRF   xE3
0A862:  CLRF   xE4
0A864:  CLRF   xE5
0A866:  CLRF   xE6
0A868:  CLRF   xE7
0A86A:  CLRF   xE8
0A86C:  CLRF   xE9
0A86E:  CLRF   xEA
0A870:  CLRF   xEB
0A872:  CLRF   xEC
0A874:  CLRF   xED
0A876:  CLRF   xEE
0A878:  CLRF   xEF
0A87A:  CLRF   xF0
0A87C:  CLRF   xF1
0A87E:  CLRF   xF2
0A880:  CLRF   xF3
0A882:  CLRF   xF4
0A884:  CLRF   xF5
0A886:  CLRF   xF6
0A888:  CLRF   xF7
0A88A:  CLRF   xF8
0A88C:  CLRF   xF9
0A88E:  CLRF   xFA
0A890:  CLRF   xFB
0A892:  CLRF   xFC
0A894:  CLRF   xFD
0A896:  CLRF   xFE
0A898:  CLRF   xFF
0A89A:  MOVLB  5
0A89C:  CLRF   x00
0A89E:  CLRF   x01
0A8A0:  CLRF   x02
0A8A2:  CLRF   x03
0A8A4:  CLRF   x04
0A8A6:  CLRF   x05
0A8A8:  CLRF   x06
0A8AA:  CLRF   x07
0A8AC:  CLRF   x08
0A8AE:  CLRF   x09
0A8B0:  CLRF   x0A
0A8B2:  CLRF   x0B
0A8B4:  CLRF   x0C
0A8B6:  CLRF   x0D
0A8B8:  CLRF   x0E
0A8BA:  CLRF   x0F
0A8BC:  CLRF   x10
0A8BE:  CLRF   x11
0A8C0:  CLRF   x12
0A8C2:  CLRF   x13
0A8C4:  CLRF   x14
0A8C6:  CLRF   x15
0A8C8:  CLRF   x16
0A8CA:  CLRF   x17
0A8CC:  CLRF   x18
0A8CE:  CLRF   x19
0A8D0:  CLRF   x1A
0A8D2:  CLRF   x1B
0A8D4:  CLRF   x1C
0A8D6:  CLRF   x1D
0A8D8:  CLRF   x1E
0A8DA:  CLRF   x1F
0A8DC:  CLRF   x20
0A8DE:  CLRF   x21
0A8E0:  CLRF   x22
0A8E2:  CLRF   x23
0A8E4:  CLRF   x24
0A8E6:  CLRF   x25
0A8E8:  CLRF   x26
0A8EA:  CLRF   x27
0A8EC:  CLRF   x28
0A8EE:  CLRF   x29
0A8F0:  CLRF   x2A
0A8F2:  CLRF   x2B
0A8F4:  CLRF   x2C
0A8F6:  CLRF   x2D
0A8F8:  CLRF   x2E
0A8FA:  CLRF   x2F
0A8FC:  CLRF   x30
0A8FE:  CLRF   x31
0A900:  CLRF   x32
0A902:  CLRF   x33
0A904:  CLRF   x34
0A906:  CLRF   x35
0A908:  CLRF   x36
0A90A:  CLRF   x37
0A90C:  CLRF   x38
0A90E:  CLRF   x39
0A910:  CLRF   x3A
0A912:  CLRF   x3B
0A914:  CLRF   x3C
0A916:  CLRF   x3D
0A918:  CLRF   x3E
0A91A:  CLRF   x3F
0A91C:  CLRF   x40
0A91E:  CLRF   x41
0A920:  CLRF   x42
0A922:  CLRF   x43
0A924:  CLRF   x44
0A926:  CLRF   x45
0A928:  CLRF   x46
0A92A:  CLRF   x47
0A92C:  CLRF   x48
0A92E:  CLRF   x49
0A930:  CLRF   x4A
0A932:  CLRF   x4B
0A934:  CLRF   x4C
0A936:  CLRF   x4D
0A938:  CLRF   x4E
0A93A:  CLRF   x4F
0A93C:  CLRF   x50
0A93E:  CLRF   x51
0A940:  CLRF   x52
0A942:  CLRF   x53
0A944:  CLRF   x54
0A946:  CLRF   x55
0A948:  CLRF   x56
0A94A:  CLRF   x57
0A94C:  CLRF   x58
0A94E:  CLRF   x59
0A950:  CLRF   x5A
0A952:  CLRF   x5B
0A954:  CLRF   x5C
0A956:  CLRF   x5D
0A958:  CLRF   x5E
0A95A:  CLRF   x5F
0A95C:  CLRF   x60
0A95E:  CLRF   x61
0A960:  CLRF   x62
0A962:  CLRF   x63
0A964:  CLRF   x64
0A966:  CLRF   x65
0A968:  CLRF   x66
0A96A:  CLRF   x67
0A96C:  CLRF   x68
0A96E:  CLRF   x69
0A970:  CLRF   x6A
0A972:  CLRF   x6B
0A974:  CLRF   x6C
0A976:  CLRF   x6D
0A978:  CLRF   x6E
0A97A:  CLRF   x6F
0A97C:  CLRF   x70
0A97E:  CLRF   x71
0A980:  CLRF   x72
0A982:  CLRF   x73
0A984:  CLRF   x74
0A986:  CLRF   x75
0A988:  CLRF   x76
0A98A:  CLRF   x77
0A98C:  CLRF   x78
0A98E:  CLRF   x79
0A990:  CLRF   x7A
0A992:  CLRF   x7B
0A994:  CLRF   x7C
0A996:  CLRF   x7D
0A998:  CLRF   x7E
0A99A:  CLRF   x7F
0A99C:  CLRF   x80
0A99E:  CLRF   x81
0A9A0:  CLRF   x82
0A9A2:  CLRF   x83
0A9A4:  CLRF   x84
0A9A6:  CLRF   x85
0A9A8:  CLRF   x86
0A9AA:  CLRF   x87
0A9AC:  CLRF   x88
0A9AE:  CLRF   x89
0A9B0:  CLRF   x8A
0A9B2:  CLRF   x8B
0A9B4:  CLRF   x8C
0A9B6:  CLRF   x8D
0A9B8:  CLRF   x8E
0A9BA:  CLRF   x8F
0A9BC:  CLRF   x90
0A9BE:  CLRF   x91
0A9C0:  CLRF   x92
0A9C2:  CLRF   x93
0A9C4:  CLRF   x94
0A9C6:  CLRF   x95
0A9C8:  CLRF   x96
0A9CA:  CLRF   x97
0A9CC:  CLRF   x98
0A9CE:  CLRF   x99
0A9D0:  CLRF   x9A
0A9D2:  CLRF   x9B
0A9D4:  CLRF   x9C
0A9D6:  CLRF   x9D
0A9D8:  CLRF   x9E
0A9DA:  CLRF   x9F
0A9DC:  CLRF   xA0
0A9DE:  CLRF   xA1
0A9E0:  CLRF   xA2
0A9E2:  CLRF   xA3
0A9E4:  CLRF   xA4
0A9E6:  CLRF   xA5
0A9E8:  CLRF   xA6
0A9EA:  CLRF   xA7
0A9EC:  CLRF   xA8
0A9EE:  CLRF   xA9
0A9F0:  CLRF   xAA
0A9F2:  CLRF   xAB
0A9F4:  CLRF   xAC
0A9F6:  CLRF   xAD
0A9F8:  CLRF   xAE
0A9FA:  CLRF   xAF
0A9FC:  CLRF   xB0
0A9FE:  CLRF   xB1
0AA00:  CLRF   xB2
0AA02:  CLRF   xB3
0AA04:  CLRF   xB4
0AA06:  CLRF   xB5
0AA08:  CLRF   xB6
0AA0A:  CLRF   xB7
0AA0C:  CLRF   xB8
0AA0E:  CLRF   xB9
0AA10:  CLRF   xBA
0AA12:  CLRF   xBB
0AA14:  CLRF   xBC
0AA16:  CLRF   xBD
0AA18:  CLRF   xBE
0AA1A:  CLRF   xBF
0AA1C:  CLRF   xC0
0AA1E:  CLRF   xC1
0AA20:  CLRF   xC2
0AA22:  CLRF   xC3
0AA24:  CLRF   xC4
0AA26:  CLRF   xC5
0AA28:  CLRF   xC6
0AA2A:  CLRF   xC7
0AA2C:  CLRF   xC8
0AA2E:  CLRF   xC9
0AA30:  CLRF   xCA
0AA32:  CLRF   xCB
0AA34:  CLRF   xCC
0AA36:  CLRF   xCD
0AA38:  CLRF   xCE
0AA3A:  CLRF   xCF
0AA3C:  CLRF   xD0
0AA3E:  CLRF   xD1
0AA40:  CLRF   xD2
0AA42:  CLRF   xD3
0AA44:  CLRF   xD4
0AA46:  CLRF   xD5
0AA48:  CLRF   xD6
0AA4A:  CLRF   xD7
0AA4C:  CLRF   xD8
0AA4E:  CLRF   xD9
0AA50:  CLRF   xDA
0AA52:  CLRF   xDB
0AA54:  CLRF   xDC
0AA56:  CLRF   xDD
0AA58:  CLRF   xDE
0AA5A:  CLRF   xDF
0AA5C:  CLRF   xE0
0AA5E:  CLRF   xE1
0AA60:  CLRF   xE2
0AA62:  CLRF   xE3
0AA64:  CLRF   xE4
0AA66:  CLRF   xE5
0AA68:  CLRF   xE6
0AA6A:  CLRF   xE7
0AA6C:  CLRF   xE8
0AA6E:  CLRF   xE9
0AA70:  CLRF   xEA
0AA72:  CLRF   xEB
0AA74:  CLRF   xEC
0AA76:  CLRF   xED
0AA78:  CLRF   xEE
0AA7A:  CLRF   xEF
0AA7C:  CLRF   xF0
0AA7E:  CLRF   xF1
0AA80:  CLRF   xF2
0AA82:  CLRF   xF3
0AA84:  CLRF   xF4
0AA86:  CLRF   xF5
0AA88:  CLRF   xF6
0AA8A:  CLRF   xF7
0AA8C:  CLRF   xF8
0AA8E:  CLRF   xF9
0AA90:  CLRF   xFA
0AA92:  CLRF   xFB
0AA94:  CLRF   xFC
0AA96:  CLRF   xFD
0AA98:  CLRF   xFE
0AA9A:  CLRF   xFF
0AA9C:  MOVLB  6
0AA9E:  CLRF   x00
0AAA0:  CLRF   x01
0AAA2:  CLRF   x02
0AAA4:  CLRF   x03
0AAA6:  CLRF   x04
0AAA8:  CLRF   x05
0AAAA:  CLRF   x06
0AAAC:  CLRF   x07
0AAAE:  CLRF   x08
0AAB0:  CLRF   x09
0AAB2:  CLRF   x0A
0AAB4:  CLRF   x0B
0AAB6:  CLRF   x0C
0AAB8:  CLRF   x0D
0AABA:  CLRF   x0E
0AABC:  CLRF   x0F
0AABE:  CLRF   x10
0AAC0:  CLRF   x11
0AAC2:  CLRF   x12
0AAC4:  CLRF   x13
0AAC6:  CLRF   x14
0AAC8:  CLRF   x15
0AACA:  CLRF   x16
0AACC:  CLRF   x17
0AACE:  CLRF   x18
0AAD0:  CLRF   x19
0AAD2:  CLRF   x1A
0AAD4:  CLRF   x1B
0AAD6:  CLRF   x1C
0AAD8:  CLRF   x1D
0AADA:  CLRF   x1E
0AADC:  CLRF   x1F
0AADE:  CLRF   x20
0AAE0:  CLRF   x21
0AAE2:  CLRF   x22
0AAE4:  CLRF   x23
0AAE6:  CLRF   x24
0AAE8:  CLRF   x25
0AAEA:  CLRF   x26
0AAEC:  CLRF   x27
0AAEE:  CLRF   x28
0AAF0:  CLRF   x29
0AAF2:  CLRF   x2A
0AAF4:  CLRF   x2B
0AAF6:  CLRF   x2C
0AAF8:  CLRF   x2D
0AAFA:  CLRF   x2E
0AAFC:  CLRF   x2F
0AAFE:  CLRF   x30
0AB00:  CLRF   x31
0AB02:  CLRF   x32
0AB04:  CLRF   x33
0AB06:  CLRF   x34
0AB08:  CLRF   x35
0AB0A:  CLRF   x36
0AB0C:  CLRF   x37
0AB0E:  CLRF   x38
0AB10:  CLRF   x39
0AB12:  CLRF   x3A
0AB14:  CLRF   x3B
0AB16:  CLRF   x3C
0AB18:  CLRF   x3D
0AB1A:  CLRF   x3E
0AB1C:  CLRF   x3F
0AB1E:  CLRF   x40
0AB20:  CLRF   x41
0AB22:  CLRF   x42
0AB24:  CLRF   x43
0AB26:  CLRF   x44
0AB28:  CLRF   x45
0AB2A:  CLRF   x46
....................     port1.port_num = 1;
0AB2C:  MOVLW  01
0AB2E:  MOVLB  2
0AB30:  MOVWF  x47
....................     port1.sweep_step = 0;
0AB32:  CLRF   x49
0AB34:  CLRF   x48
....................     port1.active = 1;
0AB36:  MOVLB  6
0AB38:  BSF    x46.0
.................... 
....................     // Init Port2
....................     sweep_config_t port2 = {0};
0AB3A:  CLRF   x47
0AB3C:  CLRF   x48
0AB3E:  CLRF   x49
0AB40:  CLRF   x4A
0AB42:  CLRF   x4B
0AB44:  CLRF   x4C
0AB46:  CLRF   x4D
0AB48:  CLRF   x4E
0AB4A:  CLRF   x4F
0AB4C:  CLRF   x50
0AB4E:  CLRF   x51
0AB50:  CLRF   x52
0AB52:  CLRF   x53
0AB54:  CLRF   x54
0AB56:  CLRF   x55
0AB58:  CLRF   x56
0AB5A:  CLRF   x57
0AB5C:  CLRF   x58
0AB5E:  CLRF   x59
0AB60:  CLRF   x5A
0AB62:  CLRF   x5B
0AB64:  CLRF   x5C
0AB66:  CLRF   x5D
0AB68:  CLRF   x5E
0AB6A:  CLRF   x5F
0AB6C:  CLRF   x60
0AB6E:  CLRF   x61
0AB70:  CLRF   x62
0AB72:  CLRF   x63
0AB74:  CLRF   x64
0AB76:  CLRF   x65
0AB78:  CLRF   x66
0AB7A:  CLRF   x67
0AB7C:  CLRF   x68
0AB7E:  CLRF   x69
0AB80:  CLRF   x6A
0AB82:  CLRF   x6B
0AB84:  CLRF   x6C
0AB86:  CLRF   x6D
0AB88:  CLRF   x6E
0AB8A:  CLRF   x6F
0AB8C:  CLRF   x70
0AB8E:  CLRF   x71
0AB90:  CLRF   x72
0AB92:  CLRF   x73
0AB94:  CLRF   x74
0AB96:  CLRF   x75
0AB98:  CLRF   x76
0AB9A:  CLRF   x77
0AB9C:  CLRF   x78
0AB9E:  CLRF   x79
0ABA0:  CLRF   x7A
0ABA2:  CLRF   x7B
0ABA4:  CLRF   x7C
0ABA6:  CLRF   x7D
0ABA8:  CLRF   x7E
0ABAA:  CLRF   x7F
0ABAC:  CLRF   x80
0ABAE:  CLRF   x81
0ABB0:  CLRF   x82
0ABB2:  CLRF   x83
0ABB4:  CLRF   x84
0ABB6:  CLRF   x85
0ABB8:  CLRF   x86
0ABBA:  CLRF   x87
0ABBC:  CLRF   x88
0ABBE:  CLRF   x89
0ABC0:  CLRF   x8A
0ABC2:  CLRF   x8B
0ABC4:  CLRF   x8C
0ABC6:  CLRF   x8D
0ABC8:  CLRF   x8E
0ABCA:  CLRF   x8F
0ABCC:  CLRF   x90
0ABCE:  CLRF   x91
0ABD0:  CLRF   x92
0ABD2:  CLRF   x93
0ABD4:  CLRF   x94
0ABD6:  CLRF   x95
0ABD8:  CLRF   x96
0ABDA:  CLRF   x97
0ABDC:  CLRF   x98
0ABDE:  CLRF   x99
0ABE0:  CLRF   x9A
0ABE2:  CLRF   x9B
0ABE4:  CLRF   x9C
0ABE6:  CLRF   x9D
0ABE8:  CLRF   x9E
0ABEA:  CLRF   x9F
0ABEC:  CLRF   xA0
0ABEE:  CLRF   xA1
0ABF0:  CLRF   xA2
0ABF2:  CLRF   xA3
0ABF4:  CLRF   xA4
0ABF6:  CLRF   xA5
0ABF8:  CLRF   xA6
0ABFA:  CLRF   xA7
0ABFC:  CLRF   xA8
0ABFE:  CLRF   xA9
0AC00:  CLRF   xAA
0AC02:  CLRF   xAB
0AC04:  CLRF   xAC
0AC06:  CLRF   xAD
0AC08:  CLRF   xAE
0AC0A:  CLRF   xAF
0AC0C:  CLRF   xB0
0AC0E:  CLRF   xB1
0AC10:  CLRF   xB2
0AC12:  CLRF   xB3
0AC14:  CLRF   xB4
0AC16:  CLRF   xB5
0AC18:  CLRF   xB6
0AC1A:  CLRF   xB7
0AC1C:  CLRF   xB8
0AC1E:  CLRF   xB9
0AC20:  CLRF   xBA
0AC22:  CLRF   xBB
0AC24:  CLRF   xBC
0AC26:  CLRF   xBD
0AC28:  CLRF   xBE
0AC2A:  CLRF   xBF
0AC2C:  CLRF   xC0
0AC2E:  CLRF   xC1
0AC30:  CLRF   xC2
0AC32:  CLRF   xC3
0AC34:  CLRF   xC4
0AC36:  CLRF   xC5
0AC38:  CLRF   xC6
0AC3A:  CLRF   xC7
0AC3C:  CLRF   xC8
0AC3E:  CLRF   xC9
0AC40:  CLRF   xCA
0AC42:  CLRF   xCB
0AC44:  CLRF   xCC
0AC46:  CLRF   xCD
0AC48:  CLRF   xCE
0AC4A:  CLRF   xCF
0AC4C:  CLRF   xD0
0AC4E:  CLRF   xD1
0AC50:  CLRF   xD2
0AC52:  CLRF   xD3
0AC54:  CLRF   xD4
0AC56:  CLRF   xD5
0AC58:  CLRF   xD6
0AC5A:  CLRF   xD7
0AC5C:  CLRF   xD8
0AC5E:  CLRF   xD9
0AC60:  CLRF   xDA
0AC62:  CLRF   xDB
0AC64:  CLRF   xDC
0AC66:  CLRF   xDD
0AC68:  CLRF   xDE
0AC6A:  CLRF   xDF
0AC6C:  CLRF   xE0
0AC6E:  CLRF   xE1
0AC70:  CLRF   xE2
0AC72:  CLRF   xE3
0AC74:  CLRF   xE4
0AC76:  CLRF   xE5
0AC78:  CLRF   xE6
0AC7A:  CLRF   xE7
0AC7C:  CLRF   xE8
0AC7E:  CLRF   xE9
0AC80:  CLRF   xEA
0AC82:  CLRF   xEB
0AC84:  CLRF   xEC
0AC86:  CLRF   xED
0AC88:  CLRF   xEE
0AC8A:  CLRF   xEF
0AC8C:  CLRF   xF0
0AC8E:  CLRF   xF1
0AC90:  CLRF   xF2
0AC92:  CLRF   xF3
0AC94:  CLRF   xF4
0AC96:  CLRF   xF5
0AC98:  CLRF   xF6
0AC9A:  CLRF   xF7
0AC9C:  CLRF   xF8
0AC9E:  CLRF   xF9
0ACA0:  CLRF   xFA
0ACA2:  CLRF   xFB
0ACA4:  CLRF   xFC
0ACA6:  CLRF   xFD
0ACA8:  CLRF   xFE
0ACAA:  CLRF   xFF
0ACAC:  MOVLB  7
0ACAE:  CLRF   x00
0ACB0:  CLRF   x01
0ACB2:  CLRF   x02
0ACB4:  CLRF   x03
0ACB6:  CLRF   x04
0ACB8:  CLRF   x05
0ACBA:  CLRF   x06
0ACBC:  CLRF   x07
0ACBE:  CLRF   x08
0ACC0:  CLRF   x09
0ACC2:  CLRF   x0A
0ACC4:  CLRF   x0B
0ACC6:  CLRF   x0C
0ACC8:  CLRF   x0D
0ACCA:  CLRF   x0E
0ACCC:  CLRF   x0F
0ACCE:  CLRF   x10
0ACD0:  CLRF   x11
0ACD2:  CLRF   x12
0ACD4:  CLRF   x13
0ACD6:  CLRF   x14
0ACD8:  CLRF   x15
0ACDA:  CLRF   x16
0ACDC:  CLRF   x17
0ACDE:  CLRF   x18
0ACE0:  CLRF   x19
0ACE2:  CLRF   x1A
0ACE4:  CLRF   x1B
0ACE6:  CLRF   x1C
0ACE8:  CLRF   x1D
0ACEA:  CLRF   x1E
0ACEC:  CLRF   x1F
0ACEE:  CLRF   x20
0ACF0:  CLRF   x21
0ACF2:  CLRF   x22
0ACF4:  CLRF   x23
0ACF6:  CLRF   x24
0ACF8:  CLRF   x25
0ACFA:  CLRF   x26
0ACFC:  CLRF   x27
0ACFE:  CLRF   x28
0AD00:  CLRF   x29
0AD02:  CLRF   x2A
0AD04:  CLRF   x2B
0AD06:  CLRF   x2C
0AD08:  CLRF   x2D
0AD0A:  CLRF   x2E
0AD0C:  CLRF   x2F
0AD0E:  CLRF   x30
0AD10:  CLRF   x31
0AD12:  CLRF   x32
0AD14:  CLRF   x33
0AD16:  CLRF   x34
0AD18:  CLRF   x35
0AD1A:  CLRF   x36
0AD1C:  CLRF   x37
0AD1E:  CLRF   x38
0AD20:  CLRF   x39
0AD22:  CLRF   x3A
0AD24:  CLRF   x3B
0AD26:  CLRF   x3C
0AD28:  CLRF   x3D
0AD2A:  CLRF   x3E
0AD2C:  CLRF   x3F
0AD2E:  CLRF   x40
0AD30:  CLRF   x41
0AD32:  CLRF   x42
0AD34:  CLRF   x43
0AD36:  CLRF   x44
0AD38:  CLRF   x45
0AD3A:  CLRF   x46
0AD3C:  CLRF   x47
0AD3E:  CLRF   x48
0AD40:  CLRF   x49
0AD42:  CLRF   x4A
0AD44:  CLRF   x4B
0AD46:  CLRF   x4C
0AD48:  CLRF   x4D
0AD4A:  CLRF   x4E
0AD4C:  CLRF   x4F
0AD4E:  CLRF   x50
0AD50:  CLRF   x51
0AD52:  CLRF   x52
0AD54:  CLRF   x53
0AD56:  CLRF   x54
0AD58:  CLRF   x55
0AD5A:  CLRF   x56
0AD5C:  CLRF   x57
0AD5E:  CLRF   x58
0AD60:  CLRF   x59
0AD62:  CLRF   x5A
0AD64:  CLRF   x5B
0AD66:  CLRF   x5C
0AD68:  CLRF   x5D
0AD6A:  CLRF   x5E
0AD6C:  CLRF   x5F
0AD6E:  CLRF   x60
0AD70:  CLRF   x61
0AD72:  CLRF   x62
0AD74:  CLRF   x63
0AD76:  CLRF   x64
0AD78:  CLRF   x65
0AD7A:  CLRF   x66
0AD7C:  CLRF   x67
0AD7E:  CLRF   x68
0AD80:  CLRF   x69
0AD82:  CLRF   x6A
0AD84:  CLRF   x6B
0AD86:  CLRF   x6C
0AD88:  CLRF   x6D
0AD8A:  CLRF   x6E
0AD8C:  CLRF   x6F
0AD8E:  CLRF   x70
0AD90:  CLRF   x71
0AD92:  CLRF   x72
0AD94:  CLRF   x73
0AD96:  CLRF   x74
0AD98:  CLRF   x75
0AD9A:  CLRF   x76
0AD9C:  CLRF   x77
0AD9E:  CLRF   x78
0ADA0:  CLRF   x79
0ADA2:  CLRF   x7A
0ADA4:  CLRF   x7B
0ADA6:  CLRF   x7C
0ADA8:  CLRF   x7D
0ADAA:  CLRF   x7E
0ADAC:  CLRF   x7F
0ADAE:  CLRF   x80
0ADB0:  CLRF   x81
0ADB2:  CLRF   x82
0ADB4:  CLRF   x83
0ADB6:  CLRF   x84
0ADB8:  CLRF   x85
0ADBA:  CLRF   x86
0ADBC:  CLRF   x87
0ADBE:  CLRF   x88
0ADC0:  CLRF   x89
0ADC2:  CLRF   x8A
0ADC4:  CLRF   x8B
0ADC6:  CLRF   x8C
0ADC8:  CLRF   x8D
0ADCA:  CLRF   x8E
0ADCC:  CLRF   x8F
0ADCE:  CLRF   x90
0ADD0:  CLRF   x91
0ADD2:  CLRF   x92
0ADD4:  CLRF   x93
0ADD6:  CLRF   x94
0ADD8:  CLRF   x95
0ADDA:  CLRF   x96
0ADDC:  CLRF   x97
0ADDE:  CLRF   x98
0ADE0:  CLRF   x99
0ADE2:  CLRF   x9A
0ADE4:  CLRF   x9B
0ADE6:  CLRF   x9C
0ADE8:  CLRF   x9D
0ADEA:  CLRF   x9E
0ADEC:  CLRF   x9F
0ADEE:  CLRF   xA0
0ADF0:  CLRF   xA1
0ADF2:  CLRF   xA2
0ADF4:  CLRF   xA3
0ADF6:  CLRF   xA4
0ADF8:  CLRF   xA5
0ADFA:  CLRF   xA6
0ADFC:  CLRF   xA7
0ADFE:  CLRF   xA8
0AE00:  CLRF   xA9
0AE02:  CLRF   xAA
0AE04:  CLRF   xAB
0AE06:  CLRF   xAC
0AE08:  CLRF   xAD
0AE0A:  CLRF   xAE
0AE0C:  CLRF   xAF
0AE0E:  CLRF   xB0
0AE10:  CLRF   xB1
0AE12:  CLRF   xB2
0AE14:  CLRF   xB3
0AE16:  CLRF   xB4
0AE18:  CLRF   xB5
0AE1A:  CLRF   xB6
0AE1C:  CLRF   xB7
0AE1E:  CLRF   xB8
0AE20:  CLRF   xB9
0AE22:  CLRF   xBA
0AE24:  CLRF   xBB
0AE26:  CLRF   xBC
0AE28:  CLRF   xBD
0AE2A:  CLRF   xBE
0AE2C:  CLRF   xBF
0AE2E:  CLRF   xC0
0AE30:  CLRF   xC1
0AE32:  CLRF   xC2
0AE34:  CLRF   xC3
0AE36:  CLRF   xC4
0AE38:  CLRF   xC5
0AE3A:  CLRF   xC6
0AE3C:  CLRF   xC7
0AE3E:  CLRF   xC8
0AE40:  CLRF   xC9
0AE42:  CLRF   xCA
0AE44:  CLRF   xCB
0AE46:  CLRF   xCC
0AE48:  CLRF   xCD
0AE4A:  CLRF   xCE
0AE4C:  CLRF   xCF
0AE4E:  CLRF   xD0
0AE50:  CLRF   xD1
0AE52:  CLRF   xD2
0AE54:  CLRF   xD3
0AE56:  CLRF   xD4
0AE58:  CLRF   xD5
0AE5A:  CLRF   xD6
0AE5C:  CLRF   xD7
0AE5E:  CLRF   xD8
0AE60:  CLRF   xD9
0AE62:  CLRF   xDA
0AE64:  CLRF   xDB
0AE66:  CLRF   xDC
0AE68:  CLRF   xDD
0AE6A:  CLRF   xDE
0AE6C:  CLRF   xDF
0AE6E:  CLRF   xE0
0AE70:  CLRF   xE1
0AE72:  CLRF   xE2
0AE74:  CLRF   xE3
0AE76:  CLRF   xE4
0AE78:  CLRF   xE5
0AE7A:  CLRF   xE6
0AE7C:  CLRF   xE7
0AE7E:  CLRF   xE8
0AE80:  CLRF   xE9
0AE82:  CLRF   xEA
0AE84:  CLRF   xEB
0AE86:  CLRF   xEC
0AE88:  CLRF   xED
0AE8A:  CLRF   xEE
0AE8C:  CLRF   xEF
0AE8E:  CLRF   xF0
0AE90:  CLRF   xF1
0AE92:  CLRF   xF2
0AE94:  CLRF   xF3
0AE96:  CLRF   xF4
0AE98:  CLRF   xF5
0AE9A:  CLRF   xF6
0AE9C:  CLRF   xF7
0AE9E:  CLRF   xF8
0AEA0:  CLRF   xF9
0AEA2:  CLRF   xFA
0AEA4:  CLRF   xFB
0AEA6:  CLRF   xFC
0AEA8:  CLRF   xFD
0AEAA:  CLRF   xFE
0AEAC:  CLRF   xFF
0AEAE:  MOVLB  8
0AEB0:  CLRF   x00
0AEB2:  CLRF   x01
0AEB4:  CLRF   x02
0AEB6:  CLRF   x03
0AEB8:  CLRF   x04
0AEBA:  CLRF   x05
0AEBC:  CLRF   x06
0AEBE:  CLRF   x07
0AEC0:  CLRF   x08
0AEC2:  CLRF   x09
0AEC4:  CLRF   x0A
0AEC6:  CLRF   x0B
0AEC8:  CLRF   x0C
0AECA:  CLRF   x0D
0AECC:  CLRF   x0E
0AECE:  CLRF   x0F
0AED0:  CLRF   x10
0AED2:  CLRF   x11
0AED4:  CLRF   x12
0AED6:  CLRF   x13
0AED8:  CLRF   x14
0AEDA:  CLRF   x15
0AEDC:  CLRF   x16
0AEDE:  CLRF   x17
0AEE0:  CLRF   x18
0AEE2:  CLRF   x19
0AEE4:  CLRF   x1A
0AEE6:  CLRF   x1B
0AEE8:  CLRF   x1C
0AEEA:  CLRF   x1D
0AEEC:  CLRF   x1E
0AEEE:  CLRF   x1F
0AEF0:  CLRF   x20
0AEF2:  CLRF   x21
0AEF4:  CLRF   x22
0AEF6:  CLRF   x23
0AEF8:  CLRF   x24
0AEFA:  CLRF   x25
0AEFC:  CLRF   x26
0AEFE:  CLRF   x27
0AF00:  CLRF   x28
0AF02:  CLRF   x29
0AF04:  CLRF   x2A
0AF06:  CLRF   x2B
0AF08:  CLRF   x2C
0AF0A:  CLRF   x2D
0AF0C:  CLRF   x2E
0AF0E:  CLRF   x2F
0AF10:  CLRF   x30
0AF12:  CLRF   x31
0AF14:  CLRF   x32
0AF16:  CLRF   x33
0AF18:  CLRF   x34
0AF1A:  CLRF   x35
0AF1C:  CLRF   x36
0AF1E:  CLRF   x37
0AF20:  CLRF   x38
0AF22:  CLRF   x39
0AF24:  CLRF   x3A
0AF26:  CLRF   x3B
0AF28:  CLRF   x3C
0AF2A:  CLRF   x3D
0AF2C:  CLRF   x3E
0AF2E:  CLRF   x3F
0AF30:  CLRF   x40
0AF32:  CLRF   x41
0AF34:  CLRF   x42
0AF36:  CLRF   x43
0AF38:  CLRF   x44
0AF3A:  CLRF   x45
0AF3C:  CLRF   x46
0AF3E:  CLRF   x47
0AF40:  CLRF   x48
0AF42:  CLRF   x49
0AF44:  CLRF   x4A
0AF46:  CLRF   x4B
0AF48:  CLRF   x4C
0AF4A:  CLRF   x4D
0AF4C:  CLRF   x4E
0AF4E:  CLRF   x4F
0AF50:  CLRF   x50
0AF52:  CLRF   x51
0AF54:  CLRF   x52
0AF56:  CLRF   x53
0AF58:  CLRF   x54
0AF5A:  CLRF   x55
0AF5C:  CLRF   x56
0AF5E:  CLRF   x57
0AF60:  CLRF   x58
0AF62:  CLRF   x59
0AF64:  CLRF   x5A
0AF66:  CLRF   x5B
0AF68:  CLRF   x5C
0AF6A:  CLRF   x5D
0AF6C:  CLRF   x5E
0AF6E:  CLRF   x5F
0AF70:  CLRF   x60
0AF72:  CLRF   x61
0AF74:  CLRF   x62
0AF76:  CLRF   x63
0AF78:  CLRF   x64
0AF7A:  CLRF   x65
0AF7C:  CLRF   x66
0AF7E:  CLRF   x67
0AF80:  CLRF   x68
0AF82:  CLRF   x69
0AF84:  CLRF   x6A
0AF86:  CLRF   x6B
0AF88:  CLRF   x6C
0AF8A:  CLRF   x6D
0AF8C:  CLRF   x6E
0AF8E:  CLRF   x6F
0AF90:  CLRF   x70
0AF92:  CLRF   x71
0AF94:  CLRF   x72
0AF96:  CLRF   x73
0AF98:  CLRF   x74
0AF9A:  CLRF   x75
0AF9C:  CLRF   x76
0AF9E:  CLRF   x77
0AFA0:  CLRF   x78
0AFA2:  CLRF   x79
0AFA4:  CLRF   x7A
0AFA6:  CLRF   x7B
0AFA8:  CLRF   x7C
0AFAA:  CLRF   x7D
0AFAC:  CLRF   x7E
0AFAE:  CLRF   x7F
0AFB0:  CLRF   x80
0AFB2:  CLRF   x81
0AFB4:  CLRF   x82
0AFB6:  CLRF   x83
0AFB8:  CLRF   x84
0AFBA:  CLRF   x85
0AFBC:  CLRF   x86
0AFBE:  CLRF   x87
0AFC0:  CLRF   x88
0AFC2:  CLRF   x89
0AFC4:  CLRF   x8A
0AFC6:  CLRF   x8B
0AFC8:  CLRF   x8C
0AFCA:  CLRF   x8D
0AFCC:  CLRF   x8E
0AFCE:  CLRF   x8F
0AFD0:  CLRF   x90
0AFD2:  CLRF   x91
0AFD4:  CLRF   x92
0AFD6:  CLRF   x93
0AFD8:  CLRF   x94
0AFDA:  CLRF   x95
0AFDC:  CLRF   x96
0AFDE:  CLRF   x97
0AFE0:  CLRF   x98
0AFE2:  CLRF   x99
0AFE4:  CLRF   x9A
0AFE6:  CLRF   x9B
0AFE8:  CLRF   x9C
0AFEA:  CLRF   x9D
0AFEC:  CLRF   x9E
0AFEE:  CLRF   x9F
0AFF0:  CLRF   xA0
0AFF2:  CLRF   xA1
0AFF4:  CLRF   xA2
0AFF6:  CLRF   xA3
0AFF8:  CLRF   xA4
0AFFA:  CLRF   xA5
0AFFC:  CLRF   xA6
0AFFE:  CLRF   xA7
0B000:  CLRF   xA8
0B002:  CLRF   xA9
0B004:  CLRF   xAA
0B006:  CLRF   xAB
0B008:  CLRF   xAC
0B00A:  CLRF   xAD
0B00C:  CLRF   xAE
0B00E:  CLRF   xAF
0B010:  CLRF   xB0
0B012:  CLRF   xB1
0B014:  CLRF   xB2
0B016:  CLRF   xB3
0B018:  CLRF   xB4
0B01A:  CLRF   xB5
0B01C:  CLRF   xB6
0B01E:  CLRF   xB7
0B020:  CLRF   xB8
0B022:  CLRF   xB9
0B024:  CLRF   xBA
0B026:  CLRF   xBB
0B028:  CLRF   xBC
0B02A:  CLRF   xBD
0B02C:  CLRF   xBE
0B02E:  CLRF   xBF
0B030:  CLRF   xC0
0B032:  CLRF   xC1
0B034:  CLRF   xC2
0B036:  CLRF   xC3
0B038:  CLRF   xC4
0B03A:  CLRF   xC5
0B03C:  CLRF   xC6
0B03E:  CLRF   xC7
0B040:  CLRF   xC8
0B042:  CLRF   xC9
0B044:  CLRF   xCA
0B046:  CLRF   xCB
0B048:  CLRF   xCC
0B04A:  CLRF   xCD
0B04C:  CLRF   xCE
0B04E:  CLRF   xCF
0B050:  CLRF   xD0
0B052:  CLRF   xD1
0B054:  CLRF   xD2
0B056:  CLRF   xD3
0B058:  CLRF   xD4
0B05A:  CLRF   xD5
0B05C:  CLRF   xD6
0B05E:  CLRF   xD7
0B060:  CLRF   xD8
0B062:  CLRF   xD9
0B064:  CLRF   xDA
0B066:  CLRF   xDB
0B068:  CLRF   xDC
0B06A:  CLRF   xDD
0B06C:  CLRF   xDE
0B06E:  CLRF   xDF
0B070:  CLRF   xE0
0B072:  CLRF   xE1
0B074:  CLRF   xE2
0B076:  CLRF   xE3
0B078:  CLRF   xE4
0B07A:  CLRF   xE5
0B07C:  CLRF   xE6
0B07E:  CLRF   xE7
0B080:  CLRF   xE8
0B082:  CLRF   xE9
0B084:  CLRF   xEA
0B086:  CLRF   xEB
0B088:  CLRF   xEC
0B08A:  CLRF   xED
0B08C:  CLRF   xEE
0B08E:  CLRF   xEF
0B090:  CLRF   xF0
0B092:  CLRF   xF1
0B094:  CLRF   xF2
0B096:  CLRF   xF3
0B098:  CLRF   xF4
0B09A:  CLRF   xF5
0B09C:  CLRF   xF6
0B09E:  CLRF   xF7
0B0A0:  CLRF   xF8
0B0A2:  CLRF   xF9
0B0A4:  CLRF   xFA
0B0A6:  CLRF   xFB
0B0A8:  CLRF   xFC
0B0AA:  CLRF   xFD
0B0AC:  CLRF   xFE
0B0AE:  CLRF   xFF
0B0B0:  MOVLB  9
0B0B2:  CLRF   x00
0B0B4:  CLRF   x01
0B0B6:  CLRF   x02
0B0B8:  CLRF   x03
0B0BA:  CLRF   x04
0B0BC:  CLRF   x05
0B0BE:  CLRF   x06
0B0C0:  CLRF   x07
0B0C2:  CLRF   x08
0B0C4:  CLRF   x09
0B0C6:  CLRF   x0A
0B0C8:  CLRF   x0B
0B0CA:  CLRF   x0C
0B0CC:  CLRF   x0D
0B0CE:  CLRF   x0E
0B0D0:  CLRF   x0F
0B0D2:  CLRF   x10
0B0D4:  CLRF   x11
0B0D6:  CLRF   x12
0B0D8:  CLRF   x13
0B0DA:  CLRF   x14
0B0DC:  CLRF   x15
0B0DE:  CLRF   x16
0B0E0:  CLRF   x17
0B0E2:  CLRF   x18
0B0E4:  CLRF   x19
0B0E6:  CLRF   x1A
0B0E8:  CLRF   x1B
0B0EA:  CLRF   x1C
0B0EC:  CLRF   x1D
0B0EE:  CLRF   x1E
0B0F0:  CLRF   x1F
0B0F2:  CLRF   x20
0B0F4:  CLRF   x21
0B0F6:  CLRF   x22
0B0F8:  CLRF   x23
0B0FA:  CLRF   x24
0B0FC:  CLRF   x25
0B0FE:  CLRF   x26
0B100:  CLRF   x27
0B102:  CLRF   x28
0B104:  CLRF   x29
0B106:  CLRF   x2A
0B108:  CLRF   x2B
0B10A:  CLRF   x2C
0B10C:  CLRF   x2D
0B10E:  CLRF   x2E
0B110:  CLRF   x2F
0B112:  CLRF   x30
0B114:  CLRF   x31
0B116:  CLRF   x32
0B118:  CLRF   x33
0B11A:  CLRF   x34
0B11C:  CLRF   x35
0B11E:  CLRF   x36
0B120:  CLRF   x37
0B122:  CLRF   x38
0B124:  CLRF   x39
0B126:  CLRF   x3A
0B128:  CLRF   x3B
0B12A:  CLRF   x3C
0B12C:  CLRF   x3D
0B12E:  CLRF   x3E
0B130:  CLRF   x3F
0B132:  CLRF   x40
0B134:  CLRF   x41
0B136:  CLRF   x42
0B138:  CLRF   x43
0B13A:  CLRF   x44
0B13C:  CLRF   x45
0B13E:  CLRF   x46
0B140:  CLRF   x47
0B142:  CLRF   x48
0B144:  CLRF   x49
0B146:  CLRF   x4A
0B148:  CLRF   x4B
0B14A:  CLRF   x4C
0B14C:  CLRF   x4D
0B14E:  CLRF   x4E
0B150:  CLRF   x4F
0B152:  CLRF   x50
0B154:  CLRF   x51
0B156:  CLRF   x52
0B158:  CLRF   x53
0B15A:  CLRF   x54
0B15C:  CLRF   x55
0B15E:  CLRF   x56
0B160:  CLRF   x57
0B162:  CLRF   x58
0B164:  CLRF   x59
0B166:  CLRF   x5A
0B168:  CLRF   x5B
0B16A:  CLRF   x5C
0B16C:  CLRF   x5D
0B16E:  CLRF   x5E
0B170:  CLRF   x5F
0B172:  CLRF   x60
0B174:  CLRF   x61
0B176:  CLRF   x62
0B178:  CLRF   x63
0B17A:  CLRF   x64
0B17C:  CLRF   x65
0B17E:  CLRF   x66
0B180:  CLRF   x67
0B182:  CLRF   x68
0B184:  CLRF   x69
0B186:  CLRF   x6A
0B188:  CLRF   x6B
0B18A:  CLRF   x6C
0B18C:  CLRF   x6D
0B18E:  CLRF   x6E
0B190:  CLRF   x6F
0B192:  CLRF   x70
0B194:  CLRF   x71
0B196:  CLRF   x72
0B198:  CLRF   x73
0B19A:  CLRF   x74
0B19C:  CLRF   x75
0B19E:  CLRF   x76
0B1A0:  CLRF   x77
0B1A2:  CLRF   x78
0B1A4:  CLRF   x79
0B1A6:  CLRF   x7A
0B1A8:  CLRF   x7B
0B1AA:  CLRF   x7C
0B1AC:  CLRF   x7D
0B1AE:  CLRF   x7E
0B1B0:  CLRF   x7F
0B1B2:  CLRF   x80
0B1B4:  CLRF   x81
0B1B6:  CLRF   x82
0B1B8:  CLRF   x83
0B1BA:  CLRF   x84
0B1BC:  CLRF   x85
0B1BE:  CLRF   x86
0B1C0:  CLRF   x87
0B1C2:  CLRF   x88
0B1C4:  CLRF   x89
0B1C6:  CLRF   x8A
0B1C8:  CLRF   x8B
0B1CA:  CLRF   x8C
0B1CC:  CLRF   x8D
0B1CE:  CLRF   x8E
0B1D0:  CLRF   x8F
0B1D2:  CLRF   x90
0B1D4:  CLRF   x91
0B1D6:  CLRF   x92
0B1D8:  CLRF   x93
0B1DA:  CLRF   x94
0B1DC:  CLRF   x95
0B1DE:  CLRF   x96
0B1E0:  CLRF   x97
0B1E2:  CLRF   x98
0B1E4:  CLRF   x99
0B1E6:  CLRF   x9A
0B1E8:  CLRF   x9B
0B1EA:  CLRF   x9C
0B1EC:  CLRF   x9D
0B1EE:  CLRF   x9E
0B1F0:  CLRF   x9F
0B1F2:  CLRF   xA0
0B1F4:  CLRF   xA1
0B1F6:  CLRF   xA2
0B1F8:  CLRF   xA3
0B1FA:  CLRF   xA4
0B1FC:  CLRF   xA5
0B1FE:  CLRF   xA6
0B200:  CLRF   xA7
0B202:  CLRF   xA8
0B204:  CLRF   xA9
0B206:  CLRF   xAA
0B208:  CLRF   xAB
0B20A:  CLRF   xAC
0B20C:  CLRF   xAD
0B20E:  CLRF   xAE
0B210:  CLRF   xAF
0B212:  CLRF   xB0
0B214:  CLRF   xB1
0B216:  CLRF   xB2
0B218:  CLRF   xB3
0B21A:  CLRF   xB4
0B21C:  CLRF   xB5
0B21E:  CLRF   xB6
0B220:  CLRF   xB7
0B222:  CLRF   xB8
0B224:  CLRF   xB9
0B226:  CLRF   xBA
0B228:  CLRF   xBB
0B22A:  CLRF   xBC
0B22C:  CLRF   xBD
0B22E:  CLRF   xBE
0B230:  CLRF   xBF
0B232:  CLRF   xC0
0B234:  CLRF   xC1
0B236:  CLRF   xC2
0B238:  CLRF   xC3
0B23A:  CLRF   xC4
0B23C:  CLRF   xC5
0B23E:  CLRF   xC6
0B240:  CLRF   xC7
0B242:  CLRF   xC8
0B244:  CLRF   xC9
0B246:  CLRF   xCA
0B248:  CLRF   xCB
0B24A:  CLRF   xCC
0B24C:  CLRF   xCD
0B24E:  CLRF   xCE
0B250:  CLRF   xCF
0B252:  CLRF   xD0
0B254:  CLRF   xD1
0B256:  CLRF   xD2
0B258:  CLRF   xD3
0B25A:  CLRF   xD4
0B25C:  CLRF   xD5
0B25E:  CLRF   xD6
0B260:  CLRF   xD7
0B262:  CLRF   xD8
0B264:  CLRF   xD9
0B266:  CLRF   xDA
0B268:  CLRF   xDB
0B26A:  CLRF   xDC
0B26C:  CLRF   xDD
0B26E:  CLRF   xDE
0B270:  CLRF   xDF
0B272:  CLRF   xE0
0B274:  CLRF   xE1
0B276:  CLRF   xE2
0B278:  CLRF   xE3
0B27A:  CLRF   xE4
0B27C:  CLRF   xE5
0B27E:  CLRF   xE6
0B280:  CLRF   xE7
0B282:  CLRF   xE8
0B284:  CLRF   xE9
0B286:  CLRF   xEA
0B288:  CLRF   xEB
0B28A:  CLRF   xEC
0B28C:  CLRF   xED
0B28E:  CLRF   xEE
0B290:  CLRF   xEF
0B292:  CLRF   xF0
0B294:  CLRF   xF1
0B296:  CLRF   xF2
0B298:  CLRF   xF3
0B29A:  CLRF   xF4
0B29C:  CLRF   xF5
0B29E:  CLRF   xF6
0B2A0:  CLRF   xF7
0B2A2:  CLRF   xF8
0B2A4:  CLRF   xF9
0B2A6:  CLRF   xFA
0B2A8:  CLRF   xFB
0B2AA:  CLRF   xFC
0B2AC:  CLRF   xFD
0B2AE:  CLRF   xFE
0B2B0:  CLRF   xFF
0B2B2:  MOVLB  A
0B2B4:  CLRF   x00
0B2B6:  CLRF   x01
0B2B8:  CLRF   x02
0B2BA:  CLRF   x03
0B2BC:  CLRF   x04
0B2BE:  CLRF   x05
0B2C0:  CLRF   x06
0B2C2:  CLRF   x07
0B2C4:  CLRF   x08
0B2C6:  CLRF   x09
0B2C8:  CLRF   x0A
0B2CA:  CLRF   x0B
0B2CC:  CLRF   x0C
0B2CE:  CLRF   x0D
0B2D0:  CLRF   x0E
0B2D2:  CLRF   x0F
0B2D4:  CLRF   x10
0B2D6:  CLRF   x11
0B2D8:  CLRF   x12
0B2DA:  CLRF   x13
0B2DC:  CLRF   x14
0B2DE:  CLRF   x15
0B2E0:  CLRF   x16
0B2E2:  CLRF   x17
0B2E4:  CLRF   x18
0B2E6:  CLRF   x19
0B2E8:  CLRF   x1A
0B2EA:  CLRF   x1B
0B2EC:  CLRF   x1C
0B2EE:  CLRF   x1D
0B2F0:  CLRF   x1E
0B2F2:  CLRF   x1F
0B2F4:  CLRF   x20
0B2F6:  CLRF   x21
0B2F8:  CLRF   x22
0B2FA:  CLRF   x23
0B2FC:  CLRF   x24
0B2FE:  CLRF   x25
0B300:  CLRF   x26
0B302:  CLRF   x27
0B304:  CLRF   x28
0B306:  CLRF   x29
0B308:  CLRF   x2A
0B30A:  CLRF   x2B
0B30C:  CLRF   x2C
0B30E:  CLRF   x2D
0B310:  CLRF   x2E
0B312:  CLRF   x2F
0B314:  CLRF   x30
0B316:  CLRF   x31
0B318:  CLRF   x32
0B31A:  CLRF   x33
0B31C:  CLRF   x34
0B31E:  CLRF   x35
0B320:  CLRF   x36
0B322:  CLRF   x37
0B324:  CLRF   x38
0B326:  CLRF   x39
0B328:  CLRF   x3A
0B32A:  CLRF   x3B
0B32C:  CLRF   x3C
0B32E:  CLRF   x3D
0B330:  CLRF   x3E
0B332:  CLRF   x3F
0B334:  CLRF   x40
0B336:  CLRF   x41
0B338:  CLRF   x42
0B33A:  CLRF   x43
0B33C:  CLRF   x44
0B33E:  CLRF   x45
0B340:  CLRF   x46
....................     port2.port_num = 2; 
0B342:  MOVLW  02
0B344:  MOVLB  6
0B346:  MOVWF  x47
....................     port2.sweep_step = 0;
0B348:  CLRF   x49
0B34A:  CLRF   x48
....................     port2.active = 1;
0B34C:  MOVLB  A
0B34E:  BSF    x46.0
.................... 
....................     int16 count = 1;
....................     iv_env_t measured_data = create_meas_data();
0B350:  CLRF   x48
0B352:  MOVLW  01
0B354:  MOVWF  x47
0B356:  MOVLB  0
0B358:  CALL   7D40
0B35C:  MOVFF  02,03
0B360:  MOVF   01,W
0B362:  MOVWF  FE1
0B364:  MOVFF  03,FE2
0B368:  MOVLW  0A
0B36A:  MOVWF  FEA
0B36C:  MOVLW  49
0B36E:  MOVWF  FE9
0B370:  MOVLW  0C
0B372:  MOVWF  01
0B374:  MOVFF  FE6,FEE
0B378:  DECFSZ 01,F
0B37A:  GOTO   B374
....................     while (port1.active || port2.active)
0B37E:  MOVLB  6
0B380:  BTFSS  x46.0
0B382:  BRA    B38A
0B384:  MOVLB  0
0B386:  GOTO   B39A
0B38A:  MOVLB  0
0B38C:  MOVLB  A
0B38E:  BTFSC  x46.0
0B390:  BRA    B398
0B392:  MOVLB  0
0B394:  GOTO   B64A
0B398:  MOVLB  0
....................     {
....................         mcp4901_1_write(count);
0B39A:  MOVFF  A48,A64
0B39E:  MOVFF  A47,A63
0B3A2:  CALL   246E
....................         mcp4901_2_write(count);
0B3A6:  MOVFF  A48,A64
0B3AA:  MOVFF  A47,A63
0B3AE:  CALL   24B0
....................         delay_us(10); 
0B3B2:  MOVLW  0D
0B3B4:  MOVWF  00
0B3B6:  DECFSZ 00,F
0B3B8:  BRA    B3B6
....................         if (port1.active) {
0B3BA:  MOVLB  6
0B3BC:  BTFSC  x46.0
0B3BE:  BRA    B3C6
0B3C0:  MOVLB  0
0B3C2:  GOTO   B4EA
0B3C6:  MOVLB  0
....................             port1.data_buffer[count].voltage = ad7490_read(ADC_CIGS1_AMP);
0B3C8:  MOVLB  A
0B3CA:  RLCF   x47,W
0B3CC:  MOVWF  02
0B3CE:  RLCF   x48,W
0B3D0:  MOVWF  03
0B3D2:  RLCF   02,F
0B3D4:  RLCF   03,F
0B3D6:  MOVLW  FC
0B3D8:  ANDWF  02,F
0B3DA:  MOVF   02,W
0B3DC:  ADDLW  4A
0B3DE:  MOVWF  01
0B3E0:  MOVLW  02
0B3E2:  ADDWFC 03,F
0B3E4:  MOVF   01,W
0B3E6:  MOVWF  x58
0B3E8:  MOVFF  03,A59
0B3EC:  MOVLW  02
0B3EE:  MOVWF  x75
0B3F0:  MOVLB  0
0B3F2:  CALL   209A
0B3F6:  MOVFF  A59,FEA
0B3FA:  MOVFF  A58,FE9
0B3FE:  MOVFF  02,FEC
0B402:  MOVF   FED,F
0B404:  MOVFF  01,FEF
....................             port1.data_buffer[count].current = ad7490_read(ADC_CIGS1_CURR);
0B408:  MOVLB  A
0B40A:  RLCF   x47,W
0B40C:  MOVWF  02
0B40E:  RLCF   x48,W
0B410:  MOVWF  03
0B412:  RLCF   02,F
0B414:  RLCF   03,F
0B416:  MOVLW  FC
0B418:  ANDWF  02,F
0B41A:  MOVF   02,W
0B41C:  ADDLW  03
0B41E:  MOVWF  x56
0B420:  MOVLW  00
0B422:  ADDWFC 03,W
0B424:  MOVWF  x57
0B426:  MOVLW  02
0B428:  ADDWF  x56,W
0B42A:  MOVWF  01
0B42C:  MOVLW  00
0B42E:  ADDWFC x57,W
0B430:  MOVWF  03
0B432:  MOVF   01,W
0B434:  ADDLW  47
0B436:  MOVWF  01
0B438:  MOVLW  02
0B43A:  ADDWFC 03,F
0B43C:  MOVF   01,W
0B43E:  MOVWF  x56
0B440:  MOVFF  03,A57
0B444:  MOVLW  01
0B446:  MOVWF  x75
0B448:  MOVLB  0
0B44A:  CALL   209A
0B44E:  MOVFF  A57,FEA
0B452:  MOVFF  A56,FE9
0B456:  MOVFF  02,FEC
0B45A:  MOVF   FED,F
0B45C:  MOVFF  01,FEF
....................             port1.sweep_step = count + 1; 
0B460:  MOVLW  01
0B462:  MOVLB  A
0B464:  ADDWF  x47,W
0B466:  MOVLB  2
0B468:  MOVWF  x48
0B46A:  MOVLW  00
0B46C:  MOVLB  A
0B46E:  ADDWFC x48,W
0B470:  MOVLB  2
0B472:  MOVWF  x49
....................             // fprintf(PC, "%04LX,%04LX,", port1.data_buffer[count].voltage, port1.data_buffer[count].current);
....................             if (port1.data_buffer[count].current < curr_limit) {
0B474:  MOVLB  A
0B476:  RLCF   x47,W
0B478:  MOVWF  02
0B47A:  RLCF   x48,W
0B47C:  MOVWF  03
0B47E:  RLCF   02,F
0B480:  RLCF   03,F
0B482:  MOVLW  FC
0B484:  ANDWF  02,F
0B486:  MOVF   02,W
0B488:  ADDLW  03
0B48A:  MOVWF  x56
0B48C:  MOVLW  00
0B48E:  ADDWFC 03,W
0B490:  MOVWF  x57
0B492:  MOVLW  02
0B494:  ADDWF  x56,W
0B496:  MOVWF  01
0B498:  MOVLW  00
0B49A:  ADDWFC x57,W
0B49C:  MOVWF  03
0B49E:  MOVF   01,W
0B4A0:  ADDLW  47
0B4A2:  MOVWF  FE9
0B4A4:  MOVLW  02
0B4A6:  ADDWFC 03,W
0B4A8:  MOVWF  FEA
0B4AA:  MOVFF  FEC,A57
0B4AE:  MOVF   FED,F
0B4B0:  MOVFF  FEF,A56
0B4B4:  MOVF   x57,W
0B4B6:  MOVLB  2
0B4B8:  SUBWF  x46,W
0B4BA:  BTFSC  FD8.0
0B4BC:  BRA    B4C4
0B4BE:  MOVLB  0
0B4C0:  GOTO   B4EA
0B4C4:  MOVLB  0
0B4C6:  BTFSS  FD8.2
0B4C8:  GOTO   B4E0
0B4CC:  MOVLB  2
0B4CE:  MOVF   x45,W
0B4D0:  MOVLB  A
0B4D2:  SUBWF  x56,W
0B4D4:  BTFSS  FD8.0
0B4D6:  BRA    B4DE
0B4D8:  MOVLB  0
0B4DA:  GOTO   B4EA
0B4DE:  MOVLB  0
....................                 port1.active = 0;
0B4E0:  MOVLB  6
0B4E2:  BCF    x46.0
....................                 disconnect_port1();
0B4E4:  MOVLB  0
0B4E6:  CALL   7DC2
....................             }
....................         }
....................         if (port2.active) {
0B4EA:  MOVLB  A
0B4EC:  BTFSC  x46.0
0B4EE:  BRA    B4F6
0B4F0:  MOVLB  0
0B4F2:  GOTO   B61A
0B4F6:  MOVLB  0
....................             port2.data_buffer[count].voltage = ad7490_read(ADC_CIGS2_AMP);
0B4F8:  MOVLB  A
0B4FA:  RLCF   x47,W
0B4FC:  MOVWF  02
0B4FE:  RLCF   x48,W
0B500:  MOVWF  03
0B502:  RLCF   02,F
0B504:  RLCF   03,F
0B506:  MOVLW  FC
0B508:  ANDWF  02,F
0B50A:  MOVF   02,W
0B50C:  ADDLW  4A
0B50E:  MOVWF  01
0B510:  MOVLW  06
0B512:  ADDWFC 03,F
0B514:  MOVF   01,W
0B516:  MOVWF  x58
0B518:  MOVFF  03,A59
0B51C:  MOVLW  06
0B51E:  MOVWF  x75
0B520:  MOVLB  0
0B522:  CALL   209A
0B526:  MOVFF  A59,FEA
0B52A:  MOVFF  A58,FE9
0B52E:  MOVFF  02,FEC
0B532:  MOVF   FED,F
0B534:  MOVFF  01,FEF
....................             port2.data_buffer[count].current = ad7490_read(ADC_CIGS2_CURR);
0B538:  MOVLB  A
0B53A:  RLCF   x47,W
0B53C:  MOVWF  02
0B53E:  RLCF   x48,W
0B540:  MOVWF  03
0B542:  RLCF   02,F
0B544:  RLCF   03,F
0B546:  MOVLW  FC
0B548:  ANDWF  02,F
0B54A:  MOVF   02,W
0B54C:  ADDLW  03
0B54E:  MOVWF  x56
0B550:  MOVLW  00
0B552:  ADDWFC 03,W
0B554:  MOVWF  x57
0B556:  MOVLW  02
0B558:  ADDWF  x56,W
0B55A:  MOVWF  01
0B55C:  MOVLW  00
0B55E:  ADDWFC x57,W
0B560:  MOVWF  03
0B562:  MOVF   01,W
0B564:  ADDLW  47
0B566:  MOVWF  01
0B568:  MOVLW  06
0B56A:  ADDWFC 03,F
0B56C:  MOVF   01,W
0B56E:  MOVWF  x56
0B570:  MOVFF  03,A57
0B574:  MOVLW  05
0B576:  MOVWF  x75
0B578:  MOVLB  0
0B57A:  CALL   209A
0B57E:  MOVFF  A57,FEA
0B582:  MOVFF  A56,FE9
0B586:  MOVFF  02,FEC
0B58A:  MOVF   FED,F
0B58C:  MOVFF  01,FEF
....................             port2.sweep_step = count + 1;
0B590:  MOVLW  01
0B592:  MOVLB  A
0B594:  ADDWF  x47,W
0B596:  MOVLB  6
0B598:  MOVWF  x48
0B59A:  MOVLW  00
0B59C:  MOVLB  A
0B59E:  ADDWFC x48,W
0B5A0:  MOVLB  6
0B5A2:  MOVWF  x49
....................             if (port2.data_buffer[count].current < curr_limit) {
0B5A4:  MOVLB  A
0B5A6:  RLCF   x47,W
0B5A8:  MOVWF  02
0B5AA:  RLCF   x48,W
0B5AC:  MOVWF  03
0B5AE:  RLCF   02,F
0B5B0:  RLCF   03,F
0B5B2:  MOVLW  FC
0B5B4:  ANDWF  02,F
0B5B6:  MOVF   02,W
0B5B8:  ADDLW  03
0B5BA:  MOVWF  x56
0B5BC:  MOVLW  00
0B5BE:  ADDWFC 03,W
0B5C0:  MOVWF  x57
0B5C2:  MOVLW  02
0B5C4:  ADDWF  x56,W
0B5C6:  MOVWF  01
0B5C8:  MOVLW  00
0B5CA:  ADDWFC x57,W
0B5CC:  MOVWF  03
0B5CE:  MOVF   01,W
0B5D0:  ADDLW  47
0B5D2:  MOVWF  FE9
0B5D4:  MOVLW  06
0B5D6:  ADDWFC 03,W
0B5D8:  MOVWF  FEA
0B5DA:  MOVFF  FEC,A57
0B5DE:  MOVF   FED,F
0B5E0:  MOVFF  FEF,A56
0B5E4:  MOVF   x57,W
0B5E6:  MOVLB  2
0B5E8:  SUBWF  x46,W
0B5EA:  BTFSC  FD8.0
0B5EC:  BRA    B5F4
0B5EE:  MOVLB  0
0B5F0:  GOTO   B61A
0B5F4:  MOVLB  0
0B5F6:  BTFSS  FD8.2
0B5F8:  GOTO   B610
0B5FC:  MOVLB  2
0B5FE:  MOVF   x45,W
0B600:  MOVLB  A
0B602:  SUBWF  x56,W
0B604:  BTFSS  FD8.0
0B606:  BRA    B60E
0B608:  MOVLB  0
0B60A:  GOTO   B61A
0B60E:  MOVLB  0
....................                 port2.active = 0;
0B610:  MOVLB  A
0B612:  BCF    x46.0
....................                 disconnect_port2();
0B614:  MOVLB  0
0B616:  CALL   7DCA
....................             } 
....................         }
....................         count++;
0B61A:  MOVLB  A
0B61C:  INCF   x47,F
0B61E:  BTFSC  FD8.2
0B620:  INCF   x48,F
....................         if (count >= 255) {
0B622:  MOVF   x48,F
0B624:  BTFSC  FD8.2
0B626:  BRA    B62E
0B628:  MOVLB  0
0B62A:  GOTO   B642
0B62E:  MOVLB  0
0B630:  MOVLB  A
0B632:  MOVF   x47,W
0B634:  SUBLW  FE
0B636:  BTFSS  FD8.0
0B638:  BRA    B640
0B63A:  MOVLB  0
0B63C:  GOTO   B646
0B640:  MOVLB  0
....................             // fprintf(PC, "Maximum step count reached: %ld\r\n", count);
....................             break;
0B642:  GOTO   B64A
....................         }
0B646:  GOTO   B37E
....................     }
.................... 
....................     for (int i = 0; i < count; i++) {
0B64A:  MOVLB  A
0B64C:  CLRF   x55
0B64E:  MOVLB  0
0B650:  MOVLB  A
0B652:  MOVF   x48,F
0B654:  BTFSC  FD8.2
0B656:  BRA    B65E
0B658:  MOVLB  0
0B65A:  GOTO   B672
0B65E:  MOVLB  0
0B660:  MOVLB  A
0B662:  MOVF   x47,W
0B664:  SUBWF  x55,W
0B666:  BTFSS  FD8.0
0B668:  BRA    B670
0B66A:  MOVLB  0
0B66C:  GOTO   B824
0B670:  MOVLB  0
.................... 
....................         fprintf(PC, "%04LX,%04LX,%04LX,%04LX\r\n",
....................             port1.data_buffer[i].voltage, port1.data_buffer[i].current,
....................             port2.data_buffer[i].voltage, port2.data_buffer[i].current);
0B672:  MOVLB  A
0B674:  CLRF   xAF
0B676:  MOVFF  A55,AAE
0B67A:  CLRF   xB1
0B67C:  MOVLW  04
0B67E:  MOVWF  xB0
0B680:  MOVLB  0
0B682:  CALL   7DD2
0B686:  MOVFF  02,03
0B68A:  MOVF   01,W
0B68C:  ADDLW  4A
0B68E:  MOVWF  FE9
0B690:  MOVLW  02
0B692:  ADDWFC 03,W
0B694:  MOVWF  FEA
0B696:  MOVFF  FEC,A59
0B69A:  MOVF   FED,F
0B69C:  MOVFF  FEF,A58
0B6A0:  MOVLB  A
0B6A2:  CLRF   xAF
0B6A4:  MOVFF  A55,AAE
0B6A8:  CLRF   xB1
0B6AA:  MOVLW  04
0B6AC:  MOVWF  xB0
0B6AE:  MOVLB  0
0B6B0:  CALL   7DD2
0B6B4:  MOVFF  02,03
0B6B8:  MOVF   01,W
0B6BA:  ADDLW  03
0B6BC:  MOVLB  A
0B6BE:  MOVWF  x5A
0B6C0:  MOVLW  00
0B6C2:  ADDWFC 03,W
0B6C4:  MOVWF  x5B
0B6C6:  MOVLW  02
0B6C8:  ADDWF  x5A,W
0B6CA:  MOVWF  01
0B6CC:  MOVLW  00
0B6CE:  ADDWFC x5B,W
0B6D0:  MOVWF  03
0B6D2:  MOVF   01,W
0B6D4:  ADDLW  47
0B6D6:  MOVWF  FE9
0B6D8:  MOVLW  02
0B6DA:  ADDWFC 03,W
0B6DC:  MOVWF  FEA
0B6DE:  MOVFF  FEC,A5B
0B6E2:  MOVF   FED,F
0B6E4:  MOVFF  FEF,A5A
0B6E8:  CLRF   xAF
0B6EA:  MOVFF  A55,AAE
0B6EE:  CLRF   xB1
0B6F0:  MOVLW  04
0B6F2:  MOVWF  xB0
0B6F4:  MOVLB  0
0B6F6:  CALL   7DD2
0B6FA:  MOVFF  02,03
0B6FE:  MOVF   01,W
0B700:  ADDLW  4A
0B702:  MOVWF  FE9
0B704:  MOVLW  06
0B706:  ADDWFC 03,W
0B708:  MOVWF  FEA
0B70A:  MOVFF  FEC,A5F
0B70E:  MOVF   FED,F
0B710:  MOVFF  FEF,A5E
0B714:  MOVLB  A
0B716:  CLRF   xAF
0B718:  MOVFF  A55,AAE
0B71C:  CLRF   xB1
0B71E:  MOVLW  04
0B720:  MOVWF  xB0
0B722:  MOVLB  0
0B724:  CALL   7DD2
0B728:  MOVFF  02,03
0B72C:  MOVF   01,W
0B72E:  ADDLW  03
0B730:  MOVLB  A
0B732:  MOVWF  x60
0B734:  MOVLW  00
0B736:  ADDWFC 03,W
0B738:  MOVWF  x61
0B73A:  MOVLW  02
0B73C:  ADDWF  x60,W
0B73E:  MOVWF  01
0B740:  MOVLW  00
0B742:  ADDWFC x61,W
0B744:  MOVWF  03
0B746:  MOVF   01,W
0B748:  ADDLW  47
0B74A:  MOVWF  FE9
0B74C:  MOVLW  06
0B74E:  ADDWFC 03,W
0B750:  MOVWF  FEA
0B752:  MOVFF  FEC,A61
0B756:  MOVF   FED,F
0B758:  MOVFF  FEF,A60
0B75C:  MOVFF  A59,A62
0B760:  MOVLW  37
0B762:  MOVWF  x63
0B764:  MOVLB  0
0B766:  CALL   2126
0B76A:  MOVFF  A58,A62
0B76E:  MOVLW  37
0B770:  MOVLB  A
0B772:  MOVWF  x63
0B774:  MOVLB  0
0B776:  CALL   2126
0B77A:  MOVLW  2C
0B77C:  BTFSS  FA6.6
0B77E:  GOTO   B77C
0B782:  MOVLB  E
0B784:  MOVWF  xF9
0B786:  MOVFF  A5B,A62
0B78A:  MOVLW  37
0B78C:  MOVLB  A
0B78E:  MOVWF  x63
0B790:  MOVLB  0
0B792:  CALL   2126
0B796:  MOVFF  A5A,A62
0B79A:  MOVLW  37
0B79C:  MOVLB  A
0B79E:  MOVWF  x63
0B7A0:  MOVLB  0
0B7A2:  CALL   2126
0B7A6:  MOVLW  2C
0B7A8:  BTFSS  FA6.6
0B7AA:  GOTO   B7A8
0B7AE:  MOVLB  E
0B7B0:  MOVWF  xF9
0B7B2:  MOVFF  A5F,A62
0B7B6:  MOVLW  37
0B7B8:  MOVLB  A
0B7BA:  MOVWF  x63
0B7BC:  MOVLB  0
0B7BE:  CALL   2126
0B7C2:  MOVFF  A5E,A62
0B7C6:  MOVLW  37
0B7C8:  MOVLB  A
0B7CA:  MOVWF  x63
0B7CC:  MOVLB  0
0B7CE:  CALL   2126
0B7D2:  MOVLW  2C
0B7D4:  BTFSS  FA6.6
0B7D6:  GOTO   B7D4
0B7DA:  MOVLB  E
0B7DC:  MOVWF  xF9
0B7DE:  MOVFF  A61,A62
0B7E2:  MOVLW  37
0B7E4:  MOVLB  A
0B7E6:  MOVWF  x63
0B7E8:  MOVLB  0
0B7EA:  CALL   2126
0B7EE:  MOVFF  A60,A62
0B7F2:  MOVLW  37
0B7F4:  MOVLB  A
0B7F6:  MOVWF  x63
0B7F8:  MOVLB  0
0B7FA:  CALL   2126
0B7FE:  MOVLW  0D
0B800:  BTFSS  FA6.6
0B802:  GOTO   B800
0B806:  MOVLB  E
0B808:  MOVWF  xF9
0B80A:  MOVLW  0A
0B80C:  MOVLB  0
0B80E:  BTFSS  FA6.6
0B810:  GOTO   B80E
0B814:  MOVLB  E
0B816:  MOVWF  xF9
0B818:  MOVLB  0
0B81A:  MOVLB  A
0B81C:  INCF   x55,F
0B81E:  MOVLB  0
0B820:  GOTO   B650
....................     }
0B824:  GOTO   BAE8 (RETURN)
.................... 
.................... }
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_limit)
.................... {
....................     fprintf(PC, ".");
*
08838:  MOVLW  2E
0883A:  BTFSS  FA6.6
0883C:  GOTO   883A
08840:  MOVLB  E
08842:  MOVWF  xF9
....................     // Enable both CIGS ports
....................     connect_port1();
08844:  MOVLB  0
08846:  CALL   4D3E
....................     connect_port2();
0884A:  CALL   4D46
.................... 
....................     // delay_us(100); // wait for the CIGS to stabilize
.................... 
....................     // Init Port1
....................     sweep_config_t port1 = {0};
0884E:  MOVLB  2
08850:  CLRF   x55
08852:  CLRF   x56
08854:  CLRF   x57
08856:  CLRF   x58
08858:  CLRF   x59
0885A:  CLRF   x5A
0885C:  CLRF   x5B
0885E:  CLRF   x5C
08860:  CLRF   x5D
08862:  CLRF   x5E
08864:  CLRF   x5F
08866:  CLRF   x60
08868:  CLRF   x61
0886A:  CLRF   x62
0886C:  CLRF   x63
0886E:  CLRF   x64
08870:  CLRF   x65
08872:  CLRF   x66
08874:  CLRF   x67
08876:  CLRF   x68
08878:  CLRF   x69
0887A:  CLRF   x6A
0887C:  CLRF   x6B
0887E:  CLRF   x6C
08880:  CLRF   x6D
08882:  CLRF   x6E
08884:  CLRF   x6F
08886:  CLRF   x70
08888:  CLRF   x71
0888A:  CLRF   x72
0888C:  CLRF   x73
0888E:  CLRF   x74
08890:  CLRF   x75
08892:  CLRF   x76
08894:  CLRF   x77
08896:  CLRF   x78
08898:  CLRF   x79
0889A:  CLRF   x7A
0889C:  CLRF   x7B
0889E:  CLRF   x7C
088A0:  CLRF   x7D
088A2:  CLRF   x7E
088A4:  CLRF   x7F
088A6:  CLRF   x80
088A8:  CLRF   x81
088AA:  CLRF   x82
088AC:  CLRF   x83
088AE:  CLRF   x84
088B0:  CLRF   x85
088B2:  CLRF   x86
088B4:  CLRF   x87
088B6:  CLRF   x88
088B8:  CLRF   x89
088BA:  CLRF   x8A
088BC:  CLRF   x8B
088BE:  CLRF   x8C
088C0:  CLRF   x8D
088C2:  CLRF   x8E
088C4:  CLRF   x8F
088C6:  CLRF   x90
088C8:  CLRF   x91
088CA:  CLRF   x92
088CC:  CLRF   x93
088CE:  CLRF   x94
088D0:  CLRF   x95
088D2:  CLRF   x96
088D4:  CLRF   x97
088D6:  CLRF   x98
088D8:  CLRF   x99
088DA:  CLRF   x9A
088DC:  CLRF   x9B
088DE:  CLRF   x9C
088E0:  CLRF   x9D
088E2:  CLRF   x9E
088E4:  CLRF   x9F
088E6:  CLRF   xA0
088E8:  CLRF   xA1
088EA:  CLRF   xA2
088EC:  CLRF   xA3
088EE:  CLRF   xA4
088F0:  CLRF   xA5
088F2:  CLRF   xA6
088F4:  CLRF   xA7
088F6:  CLRF   xA8
088F8:  CLRF   xA9
088FA:  CLRF   xAA
088FC:  CLRF   xAB
088FE:  CLRF   xAC
08900:  CLRF   xAD
08902:  CLRF   xAE
08904:  CLRF   xAF
08906:  CLRF   xB0
08908:  CLRF   xB1
0890A:  CLRF   xB2
0890C:  CLRF   xB3
0890E:  CLRF   xB4
08910:  CLRF   xB5
08912:  CLRF   xB6
08914:  CLRF   xB7
08916:  CLRF   xB8
08918:  CLRF   xB9
0891A:  CLRF   xBA
0891C:  CLRF   xBB
0891E:  CLRF   xBC
08920:  CLRF   xBD
08922:  CLRF   xBE
08924:  CLRF   xBF
08926:  CLRF   xC0
08928:  CLRF   xC1
0892A:  CLRF   xC2
0892C:  CLRF   xC3
0892E:  CLRF   xC4
08930:  CLRF   xC5
08932:  CLRF   xC6
08934:  CLRF   xC7
08936:  CLRF   xC8
08938:  CLRF   xC9
0893A:  CLRF   xCA
0893C:  CLRF   xCB
0893E:  CLRF   xCC
08940:  CLRF   xCD
08942:  CLRF   xCE
08944:  CLRF   xCF
08946:  CLRF   xD0
08948:  CLRF   xD1
0894A:  CLRF   xD2
0894C:  CLRF   xD3
0894E:  CLRF   xD4
08950:  CLRF   xD5
08952:  CLRF   xD6
08954:  CLRF   xD7
08956:  CLRF   xD8
08958:  CLRF   xD9
0895A:  CLRF   xDA
0895C:  CLRF   xDB
0895E:  CLRF   xDC
08960:  CLRF   xDD
08962:  CLRF   xDE
08964:  CLRF   xDF
08966:  CLRF   xE0
08968:  CLRF   xE1
0896A:  CLRF   xE2
0896C:  CLRF   xE3
0896E:  CLRF   xE4
08970:  CLRF   xE5
08972:  CLRF   xE6
08974:  CLRF   xE7
08976:  CLRF   xE8
08978:  CLRF   xE9
0897A:  CLRF   xEA
0897C:  CLRF   xEB
0897E:  CLRF   xEC
08980:  CLRF   xED
08982:  CLRF   xEE
08984:  CLRF   xEF
08986:  CLRF   xF0
08988:  CLRF   xF1
0898A:  CLRF   xF2
0898C:  CLRF   xF3
0898E:  CLRF   xF4
08990:  CLRF   xF5
08992:  CLRF   xF6
08994:  CLRF   xF7
08996:  CLRF   xF8
08998:  CLRF   xF9
0899A:  CLRF   xFA
0899C:  CLRF   xFB
0899E:  CLRF   xFC
089A0:  CLRF   xFD
089A2:  CLRF   xFE
089A4:  CLRF   xFF
089A6:  MOVLB  3
089A8:  CLRF   x00
089AA:  CLRF   x01
089AC:  CLRF   x02
089AE:  CLRF   x03
089B0:  CLRF   x04
089B2:  CLRF   x05
089B4:  CLRF   x06
089B6:  CLRF   x07
089B8:  CLRF   x08
089BA:  CLRF   x09
089BC:  CLRF   x0A
089BE:  CLRF   x0B
089C0:  CLRF   x0C
089C2:  CLRF   x0D
089C4:  CLRF   x0E
089C6:  CLRF   x0F
089C8:  CLRF   x10
089CA:  CLRF   x11
089CC:  CLRF   x12
089CE:  CLRF   x13
089D0:  CLRF   x14
089D2:  CLRF   x15
089D4:  CLRF   x16
089D6:  CLRF   x17
089D8:  CLRF   x18
089DA:  CLRF   x19
089DC:  CLRF   x1A
089DE:  CLRF   x1B
089E0:  CLRF   x1C
089E2:  CLRF   x1D
089E4:  CLRF   x1E
089E6:  CLRF   x1F
089E8:  CLRF   x20
089EA:  CLRF   x21
089EC:  CLRF   x22
089EE:  CLRF   x23
089F0:  CLRF   x24
089F2:  CLRF   x25
089F4:  CLRF   x26
089F6:  CLRF   x27
089F8:  CLRF   x28
089FA:  CLRF   x29
089FC:  CLRF   x2A
089FE:  CLRF   x2B
08A00:  CLRF   x2C
08A02:  CLRF   x2D
08A04:  CLRF   x2E
08A06:  CLRF   x2F
08A08:  CLRF   x30
08A0A:  CLRF   x31
08A0C:  CLRF   x32
08A0E:  CLRF   x33
08A10:  CLRF   x34
08A12:  CLRF   x35
08A14:  CLRF   x36
08A16:  CLRF   x37
08A18:  CLRF   x38
08A1A:  CLRF   x39
08A1C:  CLRF   x3A
08A1E:  CLRF   x3B
08A20:  CLRF   x3C
08A22:  CLRF   x3D
08A24:  CLRF   x3E
08A26:  CLRF   x3F
08A28:  CLRF   x40
08A2A:  CLRF   x41
08A2C:  CLRF   x42
08A2E:  CLRF   x43
08A30:  CLRF   x44
08A32:  CLRF   x45
08A34:  CLRF   x46
08A36:  CLRF   x47
08A38:  CLRF   x48
08A3A:  CLRF   x49
08A3C:  CLRF   x4A
08A3E:  CLRF   x4B
08A40:  CLRF   x4C
08A42:  CLRF   x4D
08A44:  CLRF   x4E
08A46:  CLRF   x4F
08A48:  CLRF   x50
08A4A:  CLRF   x51
08A4C:  CLRF   x52
08A4E:  CLRF   x53
08A50:  CLRF   x54
08A52:  CLRF   x55
08A54:  CLRF   x56
08A56:  CLRF   x57
08A58:  CLRF   x58
08A5A:  CLRF   x59
08A5C:  CLRF   x5A
08A5E:  CLRF   x5B
08A60:  CLRF   x5C
08A62:  CLRF   x5D
08A64:  CLRF   x5E
08A66:  CLRF   x5F
08A68:  CLRF   x60
08A6A:  CLRF   x61
08A6C:  CLRF   x62
08A6E:  CLRF   x63
08A70:  CLRF   x64
08A72:  CLRF   x65
08A74:  CLRF   x66
08A76:  CLRF   x67
08A78:  CLRF   x68
08A7A:  CLRF   x69
08A7C:  CLRF   x6A
08A7E:  CLRF   x6B
08A80:  CLRF   x6C
08A82:  CLRF   x6D
08A84:  CLRF   x6E
08A86:  CLRF   x6F
08A88:  CLRF   x70
08A8A:  CLRF   x71
08A8C:  CLRF   x72
08A8E:  CLRF   x73
08A90:  CLRF   x74
08A92:  CLRF   x75
08A94:  CLRF   x76
08A96:  CLRF   x77
08A98:  CLRF   x78
08A9A:  CLRF   x79
08A9C:  CLRF   x7A
08A9E:  CLRF   x7B
08AA0:  CLRF   x7C
08AA2:  CLRF   x7D
08AA4:  CLRF   x7E
08AA6:  CLRF   x7F
08AA8:  CLRF   x80
08AAA:  CLRF   x81
08AAC:  CLRF   x82
08AAE:  CLRF   x83
08AB0:  CLRF   x84
08AB2:  CLRF   x85
08AB4:  CLRF   x86
08AB6:  CLRF   x87
08AB8:  CLRF   x88
08ABA:  CLRF   x89
08ABC:  CLRF   x8A
08ABE:  CLRF   x8B
08AC0:  CLRF   x8C
08AC2:  CLRF   x8D
08AC4:  CLRF   x8E
08AC6:  CLRF   x8F
08AC8:  CLRF   x90
08ACA:  CLRF   x91
08ACC:  CLRF   x92
08ACE:  CLRF   x93
08AD0:  CLRF   x94
08AD2:  CLRF   x95
08AD4:  CLRF   x96
08AD6:  CLRF   x97
08AD8:  CLRF   x98
08ADA:  CLRF   x99
08ADC:  CLRF   x9A
08ADE:  CLRF   x9B
08AE0:  CLRF   x9C
08AE2:  CLRF   x9D
08AE4:  CLRF   x9E
08AE6:  CLRF   x9F
08AE8:  CLRF   xA0
08AEA:  CLRF   xA1
08AEC:  CLRF   xA2
08AEE:  CLRF   xA3
08AF0:  CLRF   xA4
08AF2:  CLRF   xA5
08AF4:  CLRF   xA6
08AF6:  CLRF   xA7
08AF8:  CLRF   xA8
08AFA:  CLRF   xA9
08AFC:  CLRF   xAA
08AFE:  CLRF   xAB
08B00:  CLRF   xAC
08B02:  CLRF   xAD
08B04:  CLRF   xAE
08B06:  CLRF   xAF
08B08:  CLRF   xB0
08B0A:  CLRF   xB1
08B0C:  CLRF   xB2
08B0E:  CLRF   xB3
08B10:  CLRF   xB4
08B12:  CLRF   xB5
08B14:  CLRF   xB6
08B16:  CLRF   xB7
08B18:  CLRF   xB8
08B1A:  CLRF   xB9
08B1C:  CLRF   xBA
08B1E:  CLRF   xBB
08B20:  CLRF   xBC
08B22:  CLRF   xBD
08B24:  CLRF   xBE
08B26:  CLRF   xBF
08B28:  CLRF   xC0
08B2A:  CLRF   xC1
08B2C:  CLRF   xC2
08B2E:  CLRF   xC3
08B30:  CLRF   xC4
08B32:  CLRF   xC5
08B34:  CLRF   xC6
08B36:  CLRF   xC7
08B38:  CLRF   xC8
08B3A:  CLRF   xC9
08B3C:  CLRF   xCA
08B3E:  CLRF   xCB
08B40:  CLRF   xCC
08B42:  CLRF   xCD
08B44:  CLRF   xCE
08B46:  CLRF   xCF
08B48:  CLRF   xD0
08B4A:  CLRF   xD1
08B4C:  CLRF   xD2
08B4E:  CLRF   xD3
08B50:  CLRF   xD4
08B52:  CLRF   xD5
08B54:  CLRF   xD6
08B56:  CLRF   xD7
08B58:  CLRF   xD8
08B5A:  CLRF   xD9
08B5C:  CLRF   xDA
08B5E:  CLRF   xDB
08B60:  CLRF   xDC
08B62:  CLRF   xDD
08B64:  CLRF   xDE
08B66:  CLRF   xDF
08B68:  CLRF   xE0
08B6A:  CLRF   xE1
08B6C:  CLRF   xE2
08B6E:  CLRF   xE3
08B70:  CLRF   xE4
08B72:  CLRF   xE5
08B74:  CLRF   xE6
08B76:  CLRF   xE7
08B78:  CLRF   xE8
08B7A:  CLRF   xE9
08B7C:  CLRF   xEA
08B7E:  CLRF   xEB
08B80:  CLRF   xEC
08B82:  CLRF   xED
08B84:  CLRF   xEE
08B86:  CLRF   xEF
08B88:  CLRF   xF0
08B8A:  CLRF   xF1
08B8C:  CLRF   xF2
08B8E:  CLRF   xF3
08B90:  CLRF   xF4
08B92:  CLRF   xF5
08B94:  CLRF   xF6
08B96:  CLRF   xF7
08B98:  CLRF   xF8
08B9A:  CLRF   xF9
08B9C:  CLRF   xFA
08B9E:  CLRF   xFB
08BA0:  CLRF   xFC
08BA2:  CLRF   xFD
08BA4:  CLRF   xFE
08BA6:  CLRF   xFF
08BA8:  MOVLB  4
08BAA:  CLRF   x00
08BAC:  CLRF   x01
08BAE:  CLRF   x02
08BB0:  CLRF   x03
08BB2:  CLRF   x04
08BB4:  CLRF   x05
08BB6:  CLRF   x06
08BB8:  CLRF   x07
08BBA:  CLRF   x08
08BBC:  CLRF   x09
08BBE:  CLRF   x0A
08BC0:  CLRF   x0B
08BC2:  CLRF   x0C
08BC4:  CLRF   x0D
08BC6:  CLRF   x0E
08BC8:  CLRF   x0F
08BCA:  CLRF   x10
08BCC:  CLRF   x11
08BCE:  CLRF   x12
08BD0:  CLRF   x13
08BD2:  CLRF   x14
08BD4:  CLRF   x15
08BD6:  CLRF   x16
08BD8:  CLRF   x17
08BDA:  CLRF   x18
08BDC:  CLRF   x19
08BDE:  CLRF   x1A
08BE0:  CLRF   x1B
08BE2:  CLRF   x1C
08BE4:  CLRF   x1D
08BE6:  CLRF   x1E
08BE8:  CLRF   x1F
08BEA:  CLRF   x20
08BEC:  CLRF   x21
08BEE:  CLRF   x22
08BF0:  CLRF   x23
08BF2:  CLRF   x24
08BF4:  CLRF   x25
08BF6:  CLRF   x26
08BF8:  CLRF   x27
08BFA:  CLRF   x28
08BFC:  CLRF   x29
08BFE:  CLRF   x2A
08C00:  CLRF   x2B
08C02:  CLRF   x2C
08C04:  CLRF   x2D
08C06:  CLRF   x2E
08C08:  CLRF   x2F
08C0A:  CLRF   x30
08C0C:  CLRF   x31
08C0E:  CLRF   x32
08C10:  CLRF   x33
08C12:  CLRF   x34
08C14:  CLRF   x35
08C16:  CLRF   x36
08C18:  CLRF   x37
08C1A:  CLRF   x38
08C1C:  CLRF   x39
08C1E:  CLRF   x3A
08C20:  CLRF   x3B
08C22:  CLRF   x3C
08C24:  CLRF   x3D
08C26:  CLRF   x3E
08C28:  CLRF   x3F
08C2A:  CLRF   x40
08C2C:  CLRF   x41
08C2E:  CLRF   x42
08C30:  CLRF   x43
08C32:  CLRF   x44
08C34:  CLRF   x45
08C36:  CLRF   x46
08C38:  CLRF   x47
08C3A:  CLRF   x48
08C3C:  CLRF   x49
08C3E:  CLRF   x4A
08C40:  CLRF   x4B
08C42:  CLRF   x4C
08C44:  CLRF   x4D
08C46:  CLRF   x4E
08C48:  CLRF   x4F
08C4A:  CLRF   x50
08C4C:  CLRF   x51
08C4E:  CLRF   x52
08C50:  CLRF   x53
08C52:  CLRF   x54
08C54:  CLRF   x55
08C56:  CLRF   x56
08C58:  CLRF   x57
08C5A:  CLRF   x58
08C5C:  CLRF   x59
08C5E:  CLRF   x5A
08C60:  CLRF   x5B
08C62:  CLRF   x5C
08C64:  CLRF   x5D
08C66:  CLRF   x5E
08C68:  CLRF   x5F
08C6A:  CLRF   x60
08C6C:  CLRF   x61
08C6E:  CLRF   x62
08C70:  CLRF   x63
08C72:  CLRF   x64
08C74:  CLRF   x65
08C76:  CLRF   x66
08C78:  CLRF   x67
08C7A:  CLRF   x68
08C7C:  CLRF   x69
08C7E:  CLRF   x6A
08C80:  CLRF   x6B
08C82:  CLRF   x6C
08C84:  CLRF   x6D
08C86:  CLRF   x6E
08C88:  CLRF   x6F
08C8A:  CLRF   x70
08C8C:  CLRF   x71
08C8E:  CLRF   x72
08C90:  CLRF   x73
08C92:  CLRF   x74
08C94:  CLRF   x75
08C96:  CLRF   x76
08C98:  CLRF   x77
08C9A:  CLRF   x78
08C9C:  CLRF   x79
08C9E:  CLRF   x7A
08CA0:  CLRF   x7B
08CA2:  CLRF   x7C
08CA4:  CLRF   x7D
08CA6:  CLRF   x7E
08CA8:  CLRF   x7F
08CAA:  CLRF   x80
08CAC:  CLRF   x81
08CAE:  CLRF   x82
08CB0:  CLRF   x83
08CB2:  CLRF   x84
08CB4:  CLRF   x85
08CB6:  CLRF   x86
08CB8:  CLRF   x87
08CBA:  CLRF   x88
08CBC:  CLRF   x89
08CBE:  CLRF   x8A
08CC0:  CLRF   x8B
08CC2:  CLRF   x8C
08CC4:  CLRF   x8D
08CC6:  CLRF   x8E
08CC8:  CLRF   x8F
08CCA:  CLRF   x90
08CCC:  CLRF   x91
08CCE:  CLRF   x92
08CD0:  CLRF   x93
08CD2:  CLRF   x94
08CD4:  CLRF   x95
08CD6:  CLRF   x96
08CD8:  CLRF   x97
08CDA:  CLRF   x98
08CDC:  CLRF   x99
08CDE:  CLRF   x9A
08CE0:  CLRF   x9B
08CE2:  CLRF   x9C
08CE4:  CLRF   x9D
08CE6:  CLRF   x9E
08CE8:  CLRF   x9F
08CEA:  CLRF   xA0
08CEC:  CLRF   xA1
08CEE:  CLRF   xA2
08CF0:  CLRF   xA3
08CF2:  CLRF   xA4
08CF4:  CLRF   xA5
08CF6:  CLRF   xA6
08CF8:  CLRF   xA7
08CFA:  CLRF   xA8
08CFC:  CLRF   xA9
08CFE:  CLRF   xAA
08D00:  CLRF   xAB
08D02:  CLRF   xAC
08D04:  CLRF   xAD
08D06:  CLRF   xAE
08D08:  CLRF   xAF
08D0A:  CLRF   xB0
08D0C:  CLRF   xB1
08D0E:  CLRF   xB2
08D10:  CLRF   xB3
08D12:  CLRF   xB4
08D14:  CLRF   xB5
08D16:  CLRF   xB6
08D18:  CLRF   xB7
08D1A:  CLRF   xB8
08D1C:  CLRF   xB9
08D1E:  CLRF   xBA
08D20:  CLRF   xBB
08D22:  CLRF   xBC
08D24:  CLRF   xBD
08D26:  CLRF   xBE
08D28:  CLRF   xBF
08D2A:  CLRF   xC0
08D2C:  CLRF   xC1
08D2E:  CLRF   xC2
08D30:  CLRF   xC3
08D32:  CLRF   xC4
08D34:  CLRF   xC5
08D36:  CLRF   xC6
08D38:  CLRF   xC7
08D3A:  CLRF   xC8
08D3C:  CLRF   xC9
08D3E:  CLRF   xCA
08D40:  CLRF   xCB
08D42:  CLRF   xCC
08D44:  CLRF   xCD
08D46:  CLRF   xCE
08D48:  CLRF   xCF
08D4A:  CLRF   xD0
08D4C:  CLRF   xD1
08D4E:  CLRF   xD2
08D50:  CLRF   xD3
08D52:  CLRF   xD4
08D54:  CLRF   xD5
08D56:  CLRF   xD6
08D58:  CLRF   xD7
08D5A:  CLRF   xD8
08D5C:  CLRF   xD9
08D5E:  CLRF   xDA
08D60:  CLRF   xDB
08D62:  CLRF   xDC
08D64:  CLRF   xDD
08D66:  CLRF   xDE
08D68:  CLRF   xDF
08D6A:  CLRF   xE0
08D6C:  CLRF   xE1
08D6E:  CLRF   xE2
08D70:  CLRF   xE3
08D72:  CLRF   xE4
08D74:  CLRF   xE5
08D76:  CLRF   xE6
08D78:  CLRF   xE7
08D7A:  CLRF   xE8
08D7C:  CLRF   xE9
08D7E:  CLRF   xEA
08D80:  CLRF   xEB
08D82:  CLRF   xEC
08D84:  CLRF   xED
08D86:  CLRF   xEE
08D88:  CLRF   xEF
08D8A:  CLRF   xF0
08D8C:  CLRF   xF1
08D8E:  CLRF   xF2
08D90:  CLRF   xF3
08D92:  CLRF   xF4
08D94:  CLRF   xF5
08D96:  CLRF   xF6
08D98:  CLRF   xF7
08D9A:  CLRF   xF8
08D9C:  CLRF   xF9
08D9E:  CLRF   xFA
08DA0:  CLRF   xFB
08DA2:  CLRF   xFC
08DA4:  CLRF   xFD
08DA6:  CLRF   xFE
08DA8:  CLRF   xFF
08DAA:  MOVLB  5
08DAC:  CLRF   x00
08DAE:  CLRF   x01
08DB0:  CLRF   x02
08DB2:  CLRF   x03
08DB4:  CLRF   x04
08DB6:  CLRF   x05
08DB8:  CLRF   x06
08DBA:  CLRF   x07
08DBC:  CLRF   x08
08DBE:  CLRF   x09
08DC0:  CLRF   x0A
08DC2:  CLRF   x0B
08DC4:  CLRF   x0C
08DC6:  CLRF   x0D
08DC8:  CLRF   x0E
08DCA:  CLRF   x0F
08DCC:  CLRF   x10
08DCE:  CLRF   x11
08DD0:  CLRF   x12
08DD2:  CLRF   x13
08DD4:  CLRF   x14
08DD6:  CLRF   x15
08DD8:  CLRF   x16
08DDA:  CLRF   x17
08DDC:  CLRF   x18
08DDE:  CLRF   x19
08DE0:  CLRF   x1A
08DE2:  CLRF   x1B
08DE4:  CLRF   x1C
08DE6:  CLRF   x1D
08DE8:  CLRF   x1E
08DEA:  CLRF   x1F
08DEC:  CLRF   x20
08DEE:  CLRF   x21
08DF0:  CLRF   x22
08DF2:  CLRF   x23
08DF4:  CLRF   x24
08DF6:  CLRF   x25
08DF8:  CLRF   x26
08DFA:  CLRF   x27
08DFC:  CLRF   x28
08DFE:  CLRF   x29
08E00:  CLRF   x2A
08E02:  CLRF   x2B
08E04:  CLRF   x2C
08E06:  CLRF   x2D
08E08:  CLRF   x2E
08E0A:  CLRF   x2F
08E0C:  CLRF   x30
08E0E:  CLRF   x31
08E10:  CLRF   x32
08E12:  CLRF   x33
08E14:  CLRF   x34
08E16:  CLRF   x35
08E18:  CLRF   x36
08E1A:  CLRF   x37
08E1C:  CLRF   x38
08E1E:  CLRF   x39
08E20:  CLRF   x3A
08E22:  CLRF   x3B
08E24:  CLRF   x3C
08E26:  CLRF   x3D
08E28:  CLRF   x3E
08E2A:  CLRF   x3F
08E2C:  CLRF   x40
08E2E:  CLRF   x41
08E30:  CLRF   x42
08E32:  CLRF   x43
08E34:  CLRF   x44
08E36:  CLRF   x45
08E38:  CLRF   x46
08E3A:  CLRF   x47
08E3C:  CLRF   x48
08E3E:  CLRF   x49
08E40:  CLRF   x4A
08E42:  CLRF   x4B
08E44:  CLRF   x4C
08E46:  CLRF   x4D
08E48:  CLRF   x4E
08E4A:  CLRF   x4F
08E4C:  CLRF   x50
08E4E:  CLRF   x51
08E50:  CLRF   x52
08E52:  CLRF   x53
08E54:  CLRF   x54
08E56:  CLRF   x55
08E58:  CLRF   x56
08E5A:  CLRF   x57
08E5C:  CLRF   x58
08E5E:  CLRF   x59
08E60:  CLRF   x5A
08E62:  CLRF   x5B
08E64:  CLRF   x5C
08E66:  CLRF   x5D
08E68:  CLRF   x5E
08E6A:  CLRF   x5F
08E6C:  CLRF   x60
08E6E:  CLRF   x61
08E70:  CLRF   x62
08E72:  CLRF   x63
08E74:  CLRF   x64
08E76:  CLRF   x65
08E78:  CLRF   x66
08E7A:  CLRF   x67
08E7C:  CLRF   x68
08E7E:  CLRF   x69
08E80:  CLRF   x6A
08E82:  CLRF   x6B
08E84:  CLRF   x6C
08E86:  CLRF   x6D
08E88:  CLRF   x6E
08E8A:  CLRF   x6F
08E8C:  CLRF   x70
08E8E:  CLRF   x71
08E90:  CLRF   x72
08E92:  CLRF   x73
08E94:  CLRF   x74
08E96:  CLRF   x75
08E98:  CLRF   x76
08E9A:  CLRF   x77
08E9C:  CLRF   x78
08E9E:  CLRF   x79
08EA0:  CLRF   x7A
08EA2:  CLRF   x7B
08EA4:  CLRF   x7C
08EA6:  CLRF   x7D
08EA8:  CLRF   x7E
08EAA:  CLRF   x7F
08EAC:  CLRF   x80
08EAE:  CLRF   x81
08EB0:  CLRF   x82
08EB2:  CLRF   x83
08EB4:  CLRF   x84
08EB6:  CLRF   x85
08EB8:  CLRF   x86
08EBA:  CLRF   x87
08EBC:  CLRF   x88
08EBE:  CLRF   x89
08EC0:  CLRF   x8A
08EC2:  CLRF   x8B
08EC4:  CLRF   x8C
08EC6:  CLRF   x8D
08EC8:  CLRF   x8E
08ECA:  CLRF   x8F
08ECC:  CLRF   x90
08ECE:  CLRF   x91
08ED0:  CLRF   x92
08ED2:  CLRF   x93
08ED4:  CLRF   x94
08ED6:  CLRF   x95
08ED8:  CLRF   x96
08EDA:  CLRF   x97
08EDC:  CLRF   x98
08EDE:  CLRF   x99
08EE0:  CLRF   x9A
08EE2:  CLRF   x9B
08EE4:  CLRF   x9C
08EE6:  CLRF   x9D
08EE8:  CLRF   x9E
08EEA:  CLRF   x9F
08EEC:  CLRF   xA0
08EEE:  CLRF   xA1
08EF0:  CLRF   xA2
08EF2:  CLRF   xA3
08EF4:  CLRF   xA4
08EF6:  CLRF   xA5
08EF8:  CLRF   xA6
08EFA:  CLRF   xA7
08EFC:  CLRF   xA8
08EFE:  CLRF   xA9
08F00:  CLRF   xAA
08F02:  CLRF   xAB
08F04:  CLRF   xAC
08F06:  CLRF   xAD
08F08:  CLRF   xAE
08F0A:  CLRF   xAF
08F0C:  CLRF   xB0
08F0E:  CLRF   xB1
08F10:  CLRF   xB2
08F12:  CLRF   xB3
08F14:  CLRF   xB4
08F16:  CLRF   xB5
08F18:  CLRF   xB6
08F1A:  CLRF   xB7
08F1C:  CLRF   xB8
08F1E:  CLRF   xB9
08F20:  CLRF   xBA
08F22:  CLRF   xBB
08F24:  CLRF   xBC
08F26:  CLRF   xBD
08F28:  CLRF   xBE
08F2A:  CLRF   xBF
08F2C:  CLRF   xC0
08F2E:  CLRF   xC1
08F30:  CLRF   xC2
08F32:  CLRF   xC3
08F34:  CLRF   xC4
08F36:  CLRF   xC5
08F38:  CLRF   xC6
08F3A:  CLRF   xC7
08F3C:  CLRF   xC8
08F3E:  CLRF   xC9
08F40:  CLRF   xCA
08F42:  CLRF   xCB
08F44:  CLRF   xCC
08F46:  CLRF   xCD
08F48:  CLRF   xCE
08F4A:  CLRF   xCF
08F4C:  CLRF   xD0
08F4E:  CLRF   xD1
08F50:  CLRF   xD2
08F52:  CLRF   xD3
08F54:  CLRF   xD4
08F56:  CLRF   xD5
08F58:  CLRF   xD6
08F5A:  CLRF   xD7
08F5C:  CLRF   xD8
08F5E:  CLRF   xD9
08F60:  CLRF   xDA
08F62:  CLRF   xDB
08F64:  CLRF   xDC
08F66:  CLRF   xDD
08F68:  CLRF   xDE
08F6A:  CLRF   xDF
08F6C:  CLRF   xE0
08F6E:  CLRF   xE1
08F70:  CLRF   xE2
08F72:  CLRF   xE3
08F74:  CLRF   xE4
08F76:  CLRF   xE5
08F78:  CLRF   xE6
08F7A:  CLRF   xE7
08F7C:  CLRF   xE8
08F7E:  CLRF   xE9
08F80:  CLRF   xEA
08F82:  CLRF   xEB
08F84:  CLRF   xEC
08F86:  CLRF   xED
08F88:  CLRF   xEE
08F8A:  CLRF   xEF
08F8C:  CLRF   xF0
08F8E:  CLRF   xF1
08F90:  CLRF   xF2
08F92:  CLRF   xF3
08F94:  CLRF   xF4
08F96:  CLRF   xF5
08F98:  CLRF   xF6
08F9A:  CLRF   xF7
08F9C:  CLRF   xF8
08F9E:  CLRF   xF9
08FA0:  CLRF   xFA
08FA2:  CLRF   xFB
08FA4:  CLRF   xFC
08FA6:  CLRF   xFD
08FA8:  CLRF   xFE
08FAA:  CLRF   xFF
08FAC:  MOVLB  6
08FAE:  CLRF   x00
08FB0:  CLRF   x01
08FB2:  CLRF   x02
08FB4:  CLRF   x03
08FB6:  CLRF   x04
08FB8:  CLRF   x05
08FBA:  CLRF   x06
08FBC:  CLRF   x07
08FBE:  CLRF   x08
08FC0:  CLRF   x09
08FC2:  CLRF   x0A
08FC4:  CLRF   x0B
08FC6:  CLRF   x0C
08FC8:  CLRF   x0D
08FCA:  CLRF   x0E
08FCC:  CLRF   x0F
08FCE:  CLRF   x10
08FD0:  CLRF   x11
08FD2:  CLRF   x12
08FD4:  CLRF   x13
08FD6:  CLRF   x14
08FD8:  CLRF   x15
08FDA:  CLRF   x16
08FDC:  CLRF   x17
08FDE:  CLRF   x18
08FE0:  CLRF   x19
08FE2:  CLRF   x1A
08FE4:  CLRF   x1B
08FE6:  CLRF   x1C
08FE8:  CLRF   x1D
08FEA:  CLRF   x1E
08FEC:  CLRF   x1F
08FEE:  CLRF   x20
08FF0:  CLRF   x21
08FF2:  CLRF   x22
08FF4:  CLRF   x23
08FF6:  CLRF   x24
08FF8:  CLRF   x25
08FFA:  CLRF   x26
08FFC:  CLRF   x27
08FFE:  CLRF   x28
09000:  CLRF   x29
09002:  CLRF   x2A
09004:  CLRF   x2B
09006:  CLRF   x2C
09008:  CLRF   x2D
0900A:  CLRF   x2E
0900C:  CLRF   x2F
0900E:  CLRF   x30
09010:  CLRF   x31
09012:  CLRF   x32
09014:  CLRF   x33
09016:  CLRF   x34
09018:  CLRF   x35
0901A:  CLRF   x36
0901C:  CLRF   x37
0901E:  CLRF   x38
09020:  CLRF   x39
09022:  CLRF   x3A
09024:  CLRF   x3B
09026:  CLRF   x3C
09028:  CLRF   x3D
0902A:  CLRF   x3E
0902C:  CLRF   x3F
0902E:  CLRF   x40
09030:  CLRF   x41
09032:  CLRF   x42
09034:  CLRF   x43
09036:  CLRF   x44
09038:  CLRF   x45
0903A:  CLRF   x46
0903C:  CLRF   x47
0903E:  CLRF   x48
09040:  CLRF   x49
09042:  CLRF   x4A
09044:  CLRF   x4B
09046:  CLRF   x4C
09048:  CLRF   x4D
0904A:  CLRF   x4E
0904C:  CLRF   x4F
0904E:  CLRF   x50
09050:  CLRF   x51
09052:  CLRF   x52
09054:  CLRF   x53
09056:  CLRF   x54
....................     port1.port_num = 1;
09058:  MOVLW  01
0905A:  MOVLB  2
0905C:  MOVWF  x55
....................     port1.sweep_step = 0;
0905E:  CLRF   x57
09060:  CLRF   x56
....................     port1.active = 1;
09062:  MOVLB  6
09064:  BSF    x54.0
.................... 
....................     // Init Port2
....................     sweep_config_t port2 = {0};
09066:  CLRF   x55
09068:  CLRF   x56
0906A:  CLRF   x57
0906C:  CLRF   x58
0906E:  CLRF   x59
09070:  CLRF   x5A
09072:  CLRF   x5B
09074:  CLRF   x5C
09076:  CLRF   x5D
09078:  CLRF   x5E
0907A:  CLRF   x5F
0907C:  CLRF   x60
0907E:  CLRF   x61
09080:  CLRF   x62
09082:  CLRF   x63
09084:  CLRF   x64
09086:  CLRF   x65
09088:  CLRF   x66
0908A:  CLRF   x67
0908C:  CLRF   x68
0908E:  CLRF   x69
09090:  CLRF   x6A
09092:  CLRF   x6B
09094:  CLRF   x6C
09096:  CLRF   x6D
09098:  CLRF   x6E
0909A:  CLRF   x6F
0909C:  CLRF   x70
0909E:  CLRF   x71
090A0:  CLRF   x72
090A2:  CLRF   x73
090A4:  CLRF   x74
090A6:  CLRF   x75
090A8:  CLRF   x76
090AA:  CLRF   x77
090AC:  CLRF   x78
090AE:  CLRF   x79
090B0:  CLRF   x7A
090B2:  CLRF   x7B
090B4:  CLRF   x7C
090B6:  CLRF   x7D
090B8:  CLRF   x7E
090BA:  CLRF   x7F
090BC:  CLRF   x80
090BE:  CLRF   x81
090C0:  CLRF   x82
090C2:  CLRF   x83
090C4:  CLRF   x84
090C6:  CLRF   x85
090C8:  CLRF   x86
090CA:  CLRF   x87
090CC:  CLRF   x88
090CE:  CLRF   x89
090D0:  CLRF   x8A
090D2:  CLRF   x8B
090D4:  CLRF   x8C
090D6:  CLRF   x8D
090D8:  CLRF   x8E
090DA:  CLRF   x8F
090DC:  CLRF   x90
090DE:  CLRF   x91
090E0:  CLRF   x92
090E2:  CLRF   x93
090E4:  CLRF   x94
090E6:  CLRF   x95
090E8:  CLRF   x96
090EA:  CLRF   x97
090EC:  CLRF   x98
090EE:  CLRF   x99
090F0:  CLRF   x9A
090F2:  CLRF   x9B
090F4:  CLRF   x9C
090F6:  CLRF   x9D
090F8:  CLRF   x9E
090FA:  CLRF   x9F
090FC:  CLRF   xA0
090FE:  CLRF   xA1
09100:  CLRF   xA2
09102:  CLRF   xA3
09104:  CLRF   xA4
09106:  CLRF   xA5
09108:  CLRF   xA6
0910A:  CLRF   xA7
0910C:  CLRF   xA8
0910E:  CLRF   xA9
09110:  CLRF   xAA
09112:  CLRF   xAB
09114:  CLRF   xAC
09116:  CLRF   xAD
09118:  CLRF   xAE
0911A:  CLRF   xAF
0911C:  CLRF   xB0
0911E:  CLRF   xB1
09120:  CLRF   xB2
09122:  CLRF   xB3
09124:  CLRF   xB4
09126:  CLRF   xB5
09128:  CLRF   xB6
0912A:  CLRF   xB7
0912C:  CLRF   xB8
0912E:  CLRF   xB9
09130:  CLRF   xBA
09132:  CLRF   xBB
09134:  CLRF   xBC
09136:  CLRF   xBD
09138:  CLRF   xBE
0913A:  CLRF   xBF
0913C:  CLRF   xC0
0913E:  CLRF   xC1
09140:  CLRF   xC2
09142:  CLRF   xC3
09144:  CLRF   xC4
09146:  CLRF   xC5
09148:  CLRF   xC6
0914A:  CLRF   xC7
0914C:  CLRF   xC8
0914E:  CLRF   xC9
09150:  CLRF   xCA
09152:  CLRF   xCB
09154:  CLRF   xCC
09156:  CLRF   xCD
09158:  CLRF   xCE
0915A:  CLRF   xCF
0915C:  CLRF   xD0
0915E:  CLRF   xD1
09160:  CLRF   xD2
09162:  CLRF   xD3
09164:  CLRF   xD4
09166:  CLRF   xD5
09168:  CLRF   xD6
0916A:  CLRF   xD7
0916C:  CLRF   xD8
0916E:  CLRF   xD9
09170:  CLRF   xDA
09172:  CLRF   xDB
09174:  CLRF   xDC
09176:  CLRF   xDD
09178:  CLRF   xDE
0917A:  CLRF   xDF
0917C:  CLRF   xE0
0917E:  CLRF   xE1
09180:  CLRF   xE2
09182:  CLRF   xE3
09184:  CLRF   xE4
09186:  CLRF   xE5
09188:  CLRF   xE6
0918A:  CLRF   xE7
0918C:  CLRF   xE8
0918E:  CLRF   xE9
09190:  CLRF   xEA
09192:  CLRF   xEB
09194:  CLRF   xEC
09196:  CLRF   xED
09198:  CLRF   xEE
0919A:  CLRF   xEF
0919C:  CLRF   xF0
0919E:  CLRF   xF1
091A0:  CLRF   xF2
091A2:  CLRF   xF3
091A4:  CLRF   xF4
091A6:  CLRF   xF5
091A8:  CLRF   xF6
091AA:  CLRF   xF7
091AC:  CLRF   xF8
091AE:  CLRF   xF9
091B0:  CLRF   xFA
091B2:  CLRF   xFB
091B4:  CLRF   xFC
091B6:  CLRF   xFD
091B8:  CLRF   xFE
091BA:  CLRF   xFF
091BC:  MOVLB  7
091BE:  CLRF   x00
091C0:  CLRF   x01
091C2:  CLRF   x02
091C4:  CLRF   x03
091C6:  CLRF   x04
091C8:  CLRF   x05
091CA:  CLRF   x06
091CC:  CLRF   x07
091CE:  CLRF   x08
091D0:  CLRF   x09
091D2:  CLRF   x0A
091D4:  CLRF   x0B
091D6:  CLRF   x0C
091D8:  CLRF   x0D
091DA:  CLRF   x0E
091DC:  CLRF   x0F
091DE:  CLRF   x10
091E0:  CLRF   x11
091E2:  CLRF   x12
091E4:  CLRF   x13
091E6:  CLRF   x14
091E8:  CLRF   x15
091EA:  CLRF   x16
091EC:  CLRF   x17
091EE:  CLRF   x18
091F0:  CLRF   x19
091F2:  CLRF   x1A
091F4:  CLRF   x1B
091F6:  CLRF   x1C
091F8:  CLRF   x1D
091FA:  CLRF   x1E
091FC:  CLRF   x1F
091FE:  CLRF   x20
09200:  CLRF   x21
09202:  CLRF   x22
09204:  CLRF   x23
09206:  CLRF   x24
09208:  CLRF   x25
0920A:  CLRF   x26
0920C:  CLRF   x27
0920E:  CLRF   x28
09210:  CLRF   x29
09212:  CLRF   x2A
09214:  CLRF   x2B
09216:  CLRF   x2C
09218:  CLRF   x2D
0921A:  CLRF   x2E
0921C:  CLRF   x2F
0921E:  CLRF   x30
09220:  CLRF   x31
09222:  CLRF   x32
09224:  CLRF   x33
09226:  CLRF   x34
09228:  CLRF   x35
0922A:  CLRF   x36
0922C:  CLRF   x37
0922E:  CLRF   x38
09230:  CLRF   x39
09232:  CLRF   x3A
09234:  CLRF   x3B
09236:  CLRF   x3C
09238:  CLRF   x3D
0923A:  CLRF   x3E
0923C:  CLRF   x3F
0923E:  CLRF   x40
09240:  CLRF   x41
09242:  CLRF   x42
09244:  CLRF   x43
09246:  CLRF   x44
09248:  CLRF   x45
0924A:  CLRF   x46
0924C:  CLRF   x47
0924E:  CLRF   x48
09250:  CLRF   x49
09252:  CLRF   x4A
09254:  CLRF   x4B
09256:  CLRF   x4C
09258:  CLRF   x4D
0925A:  CLRF   x4E
0925C:  CLRF   x4F
0925E:  CLRF   x50
09260:  CLRF   x51
09262:  CLRF   x52
09264:  CLRF   x53
09266:  CLRF   x54
09268:  CLRF   x55
0926A:  CLRF   x56
0926C:  CLRF   x57
0926E:  CLRF   x58
09270:  CLRF   x59
09272:  CLRF   x5A
09274:  CLRF   x5B
09276:  CLRF   x5C
09278:  CLRF   x5D
0927A:  CLRF   x5E
0927C:  CLRF   x5F
0927E:  CLRF   x60
09280:  CLRF   x61
09282:  CLRF   x62
09284:  CLRF   x63
09286:  CLRF   x64
09288:  CLRF   x65
0928A:  CLRF   x66
0928C:  CLRF   x67
0928E:  CLRF   x68
09290:  CLRF   x69
09292:  CLRF   x6A
09294:  CLRF   x6B
09296:  CLRF   x6C
09298:  CLRF   x6D
0929A:  CLRF   x6E
0929C:  CLRF   x6F
0929E:  CLRF   x70
092A0:  CLRF   x71
092A2:  CLRF   x72
092A4:  CLRF   x73
092A6:  CLRF   x74
092A8:  CLRF   x75
092AA:  CLRF   x76
092AC:  CLRF   x77
092AE:  CLRF   x78
092B0:  CLRF   x79
092B2:  CLRF   x7A
092B4:  CLRF   x7B
092B6:  CLRF   x7C
092B8:  CLRF   x7D
092BA:  CLRF   x7E
092BC:  CLRF   x7F
092BE:  CLRF   x80
092C0:  CLRF   x81
092C2:  CLRF   x82
092C4:  CLRF   x83
092C6:  CLRF   x84
092C8:  CLRF   x85
092CA:  CLRF   x86
092CC:  CLRF   x87
092CE:  CLRF   x88
092D0:  CLRF   x89
092D2:  CLRF   x8A
092D4:  CLRF   x8B
092D6:  CLRF   x8C
092D8:  CLRF   x8D
092DA:  CLRF   x8E
092DC:  CLRF   x8F
092DE:  CLRF   x90
092E0:  CLRF   x91
092E2:  CLRF   x92
092E4:  CLRF   x93
092E6:  CLRF   x94
092E8:  CLRF   x95
092EA:  CLRF   x96
092EC:  CLRF   x97
092EE:  CLRF   x98
092F0:  CLRF   x99
092F2:  CLRF   x9A
092F4:  CLRF   x9B
092F6:  CLRF   x9C
092F8:  CLRF   x9D
092FA:  CLRF   x9E
092FC:  CLRF   x9F
092FE:  CLRF   xA0
09300:  CLRF   xA1
09302:  CLRF   xA2
09304:  CLRF   xA3
09306:  CLRF   xA4
09308:  CLRF   xA5
0930A:  CLRF   xA6
0930C:  CLRF   xA7
0930E:  CLRF   xA8
09310:  CLRF   xA9
09312:  CLRF   xAA
09314:  CLRF   xAB
09316:  CLRF   xAC
09318:  CLRF   xAD
0931A:  CLRF   xAE
0931C:  CLRF   xAF
0931E:  CLRF   xB0
09320:  CLRF   xB1
09322:  CLRF   xB2
09324:  CLRF   xB3
09326:  CLRF   xB4
09328:  CLRF   xB5
0932A:  CLRF   xB6
0932C:  CLRF   xB7
0932E:  CLRF   xB8
09330:  CLRF   xB9
09332:  CLRF   xBA
09334:  CLRF   xBB
09336:  CLRF   xBC
09338:  CLRF   xBD
0933A:  CLRF   xBE
0933C:  CLRF   xBF
0933E:  CLRF   xC0
09340:  CLRF   xC1
09342:  CLRF   xC2
09344:  CLRF   xC3
09346:  CLRF   xC4
09348:  CLRF   xC5
0934A:  CLRF   xC6
0934C:  CLRF   xC7
0934E:  CLRF   xC8
09350:  CLRF   xC9
09352:  CLRF   xCA
09354:  CLRF   xCB
09356:  CLRF   xCC
09358:  CLRF   xCD
0935A:  CLRF   xCE
0935C:  CLRF   xCF
0935E:  CLRF   xD0
09360:  CLRF   xD1
09362:  CLRF   xD2
09364:  CLRF   xD3
09366:  CLRF   xD4
09368:  CLRF   xD5
0936A:  CLRF   xD6
0936C:  CLRF   xD7
0936E:  CLRF   xD8
09370:  CLRF   xD9
09372:  CLRF   xDA
09374:  CLRF   xDB
09376:  CLRF   xDC
09378:  CLRF   xDD
0937A:  CLRF   xDE
0937C:  CLRF   xDF
0937E:  CLRF   xE0
09380:  CLRF   xE1
09382:  CLRF   xE2
09384:  CLRF   xE3
09386:  CLRF   xE4
09388:  CLRF   xE5
0938A:  CLRF   xE6
0938C:  CLRF   xE7
0938E:  CLRF   xE8
09390:  CLRF   xE9
09392:  CLRF   xEA
09394:  CLRF   xEB
09396:  CLRF   xEC
09398:  CLRF   xED
0939A:  CLRF   xEE
0939C:  CLRF   xEF
0939E:  CLRF   xF0
093A0:  CLRF   xF1
093A2:  CLRF   xF2
093A4:  CLRF   xF3
093A6:  CLRF   xF4
093A8:  CLRF   xF5
093AA:  CLRF   xF6
093AC:  CLRF   xF7
093AE:  CLRF   xF8
093B0:  CLRF   xF9
093B2:  CLRF   xFA
093B4:  CLRF   xFB
093B6:  CLRF   xFC
093B8:  CLRF   xFD
093BA:  CLRF   xFE
093BC:  CLRF   xFF
093BE:  MOVLB  8
093C0:  CLRF   x00
093C2:  CLRF   x01
093C4:  CLRF   x02
093C6:  CLRF   x03
093C8:  CLRF   x04
093CA:  CLRF   x05
093CC:  CLRF   x06
093CE:  CLRF   x07
093D0:  CLRF   x08
093D2:  CLRF   x09
093D4:  CLRF   x0A
093D6:  CLRF   x0B
093D8:  CLRF   x0C
093DA:  CLRF   x0D
093DC:  CLRF   x0E
093DE:  CLRF   x0F
093E0:  CLRF   x10
093E2:  CLRF   x11
093E4:  CLRF   x12
093E6:  CLRF   x13
093E8:  CLRF   x14
093EA:  CLRF   x15
093EC:  CLRF   x16
093EE:  CLRF   x17
093F0:  CLRF   x18
093F2:  CLRF   x19
093F4:  CLRF   x1A
093F6:  CLRF   x1B
093F8:  CLRF   x1C
093FA:  CLRF   x1D
093FC:  CLRF   x1E
093FE:  CLRF   x1F
09400:  CLRF   x20
09402:  CLRF   x21
09404:  CLRF   x22
09406:  CLRF   x23
09408:  CLRF   x24
0940A:  CLRF   x25
0940C:  CLRF   x26
0940E:  CLRF   x27
09410:  CLRF   x28
09412:  CLRF   x29
09414:  CLRF   x2A
09416:  CLRF   x2B
09418:  CLRF   x2C
0941A:  CLRF   x2D
0941C:  CLRF   x2E
0941E:  CLRF   x2F
09420:  CLRF   x30
09422:  CLRF   x31
09424:  CLRF   x32
09426:  CLRF   x33
09428:  CLRF   x34
0942A:  CLRF   x35
0942C:  CLRF   x36
0942E:  CLRF   x37
09430:  CLRF   x38
09432:  CLRF   x39
09434:  CLRF   x3A
09436:  CLRF   x3B
09438:  CLRF   x3C
0943A:  CLRF   x3D
0943C:  CLRF   x3E
0943E:  CLRF   x3F
09440:  CLRF   x40
09442:  CLRF   x41
09444:  CLRF   x42
09446:  CLRF   x43
09448:  CLRF   x44
0944A:  CLRF   x45
0944C:  CLRF   x46
0944E:  CLRF   x47
09450:  CLRF   x48
09452:  CLRF   x49
09454:  CLRF   x4A
09456:  CLRF   x4B
09458:  CLRF   x4C
0945A:  CLRF   x4D
0945C:  CLRF   x4E
0945E:  CLRF   x4F
09460:  CLRF   x50
09462:  CLRF   x51
09464:  CLRF   x52
09466:  CLRF   x53
09468:  CLRF   x54
0946A:  CLRF   x55
0946C:  CLRF   x56
0946E:  CLRF   x57
09470:  CLRF   x58
09472:  CLRF   x59
09474:  CLRF   x5A
09476:  CLRF   x5B
09478:  CLRF   x5C
0947A:  CLRF   x5D
0947C:  CLRF   x5E
0947E:  CLRF   x5F
09480:  CLRF   x60
09482:  CLRF   x61
09484:  CLRF   x62
09486:  CLRF   x63
09488:  CLRF   x64
0948A:  CLRF   x65
0948C:  CLRF   x66
0948E:  CLRF   x67
09490:  CLRF   x68
09492:  CLRF   x69
09494:  CLRF   x6A
09496:  CLRF   x6B
09498:  CLRF   x6C
0949A:  CLRF   x6D
0949C:  CLRF   x6E
0949E:  CLRF   x6F
094A0:  CLRF   x70
094A2:  CLRF   x71
094A4:  CLRF   x72
094A6:  CLRF   x73
094A8:  CLRF   x74
094AA:  CLRF   x75
094AC:  CLRF   x76
094AE:  CLRF   x77
094B0:  CLRF   x78
094B2:  CLRF   x79
094B4:  CLRF   x7A
094B6:  CLRF   x7B
094B8:  CLRF   x7C
094BA:  CLRF   x7D
094BC:  CLRF   x7E
094BE:  CLRF   x7F
094C0:  CLRF   x80
094C2:  CLRF   x81
094C4:  CLRF   x82
094C6:  CLRF   x83
094C8:  CLRF   x84
094CA:  CLRF   x85
094CC:  CLRF   x86
094CE:  CLRF   x87
094D0:  CLRF   x88
094D2:  CLRF   x89
094D4:  CLRF   x8A
094D6:  CLRF   x8B
094D8:  CLRF   x8C
094DA:  CLRF   x8D
094DC:  CLRF   x8E
094DE:  CLRF   x8F
094E0:  CLRF   x90
094E2:  CLRF   x91
094E4:  CLRF   x92
094E6:  CLRF   x93
094E8:  CLRF   x94
094EA:  CLRF   x95
094EC:  CLRF   x96
094EE:  CLRF   x97
094F0:  CLRF   x98
094F2:  CLRF   x99
094F4:  CLRF   x9A
094F6:  CLRF   x9B
094F8:  CLRF   x9C
094FA:  CLRF   x9D
094FC:  CLRF   x9E
094FE:  CLRF   x9F
09500:  CLRF   xA0
09502:  CLRF   xA1
09504:  CLRF   xA2
09506:  CLRF   xA3
09508:  CLRF   xA4
0950A:  CLRF   xA5
0950C:  CLRF   xA6
0950E:  CLRF   xA7
09510:  CLRF   xA8
09512:  CLRF   xA9
09514:  CLRF   xAA
09516:  CLRF   xAB
09518:  CLRF   xAC
0951A:  CLRF   xAD
0951C:  CLRF   xAE
0951E:  CLRF   xAF
09520:  CLRF   xB0
09522:  CLRF   xB1
09524:  CLRF   xB2
09526:  CLRF   xB3
09528:  CLRF   xB4
0952A:  CLRF   xB5
0952C:  CLRF   xB6
0952E:  CLRF   xB7
09530:  CLRF   xB8
09532:  CLRF   xB9
09534:  CLRF   xBA
09536:  CLRF   xBB
09538:  CLRF   xBC
0953A:  CLRF   xBD
0953C:  CLRF   xBE
0953E:  CLRF   xBF
09540:  CLRF   xC0
09542:  CLRF   xC1
09544:  CLRF   xC2
09546:  CLRF   xC3
09548:  CLRF   xC4
0954A:  CLRF   xC5
0954C:  CLRF   xC6
0954E:  CLRF   xC7
09550:  CLRF   xC8
09552:  CLRF   xC9
09554:  CLRF   xCA
09556:  CLRF   xCB
09558:  CLRF   xCC
0955A:  CLRF   xCD
0955C:  CLRF   xCE
0955E:  CLRF   xCF
09560:  CLRF   xD0
09562:  CLRF   xD1
09564:  CLRF   xD2
09566:  CLRF   xD3
09568:  CLRF   xD4
0956A:  CLRF   xD5
0956C:  CLRF   xD6
0956E:  CLRF   xD7
09570:  CLRF   xD8
09572:  CLRF   xD9
09574:  CLRF   xDA
09576:  CLRF   xDB
09578:  CLRF   xDC
0957A:  CLRF   xDD
0957C:  CLRF   xDE
0957E:  CLRF   xDF
09580:  CLRF   xE0
09582:  CLRF   xE1
09584:  CLRF   xE2
09586:  CLRF   xE3
09588:  CLRF   xE4
0958A:  CLRF   xE5
0958C:  CLRF   xE6
0958E:  CLRF   xE7
09590:  CLRF   xE8
09592:  CLRF   xE9
09594:  CLRF   xEA
09596:  CLRF   xEB
09598:  CLRF   xEC
0959A:  CLRF   xED
0959C:  CLRF   xEE
0959E:  CLRF   xEF
095A0:  CLRF   xF0
095A2:  CLRF   xF1
095A4:  CLRF   xF2
095A6:  CLRF   xF3
095A8:  CLRF   xF4
095AA:  CLRF   xF5
095AC:  CLRF   xF6
095AE:  CLRF   xF7
095B0:  CLRF   xF8
095B2:  CLRF   xF9
095B4:  CLRF   xFA
095B6:  CLRF   xFB
095B8:  CLRF   xFC
095BA:  CLRF   xFD
095BC:  CLRF   xFE
095BE:  CLRF   xFF
095C0:  MOVLB  9
095C2:  CLRF   x00
095C4:  CLRF   x01
095C6:  CLRF   x02
095C8:  CLRF   x03
095CA:  CLRF   x04
095CC:  CLRF   x05
095CE:  CLRF   x06
095D0:  CLRF   x07
095D2:  CLRF   x08
095D4:  CLRF   x09
095D6:  CLRF   x0A
095D8:  CLRF   x0B
095DA:  CLRF   x0C
095DC:  CLRF   x0D
095DE:  CLRF   x0E
095E0:  CLRF   x0F
095E2:  CLRF   x10
095E4:  CLRF   x11
095E6:  CLRF   x12
095E8:  CLRF   x13
095EA:  CLRF   x14
095EC:  CLRF   x15
095EE:  CLRF   x16
095F0:  CLRF   x17
095F2:  CLRF   x18
095F4:  CLRF   x19
095F6:  CLRF   x1A
095F8:  CLRF   x1B
095FA:  CLRF   x1C
095FC:  CLRF   x1D
095FE:  CLRF   x1E
09600:  CLRF   x1F
09602:  CLRF   x20
09604:  CLRF   x21
09606:  CLRF   x22
09608:  CLRF   x23
0960A:  CLRF   x24
0960C:  CLRF   x25
0960E:  CLRF   x26
09610:  CLRF   x27
09612:  CLRF   x28
09614:  CLRF   x29
09616:  CLRF   x2A
09618:  CLRF   x2B
0961A:  CLRF   x2C
0961C:  CLRF   x2D
0961E:  CLRF   x2E
09620:  CLRF   x2F
09622:  CLRF   x30
09624:  CLRF   x31
09626:  CLRF   x32
09628:  CLRF   x33
0962A:  CLRF   x34
0962C:  CLRF   x35
0962E:  CLRF   x36
09630:  CLRF   x37
09632:  CLRF   x38
09634:  CLRF   x39
09636:  CLRF   x3A
09638:  CLRF   x3B
0963A:  CLRF   x3C
0963C:  CLRF   x3D
0963E:  CLRF   x3E
09640:  CLRF   x3F
09642:  CLRF   x40
09644:  CLRF   x41
09646:  CLRF   x42
09648:  CLRF   x43
0964A:  CLRF   x44
0964C:  CLRF   x45
0964E:  CLRF   x46
09650:  CLRF   x47
09652:  CLRF   x48
09654:  CLRF   x49
09656:  CLRF   x4A
09658:  CLRF   x4B
0965A:  CLRF   x4C
0965C:  CLRF   x4D
0965E:  CLRF   x4E
09660:  CLRF   x4F
09662:  CLRF   x50
09664:  CLRF   x51
09666:  CLRF   x52
09668:  CLRF   x53
0966A:  CLRF   x54
0966C:  CLRF   x55
0966E:  CLRF   x56
09670:  CLRF   x57
09672:  CLRF   x58
09674:  CLRF   x59
09676:  CLRF   x5A
09678:  CLRF   x5B
0967A:  CLRF   x5C
0967C:  CLRF   x5D
0967E:  CLRF   x5E
09680:  CLRF   x5F
09682:  CLRF   x60
09684:  CLRF   x61
09686:  CLRF   x62
09688:  CLRF   x63
0968A:  CLRF   x64
0968C:  CLRF   x65
0968E:  CLRF   x66
09690:  CLRF   x67
09692:  CLRF   x68
09694:  CLRF   x69
09696:  CLRF   x6A
09698:  CLRF   x6B
0969A:  CLRF   x6C
0969C:  CLRF   x6D
0969E:  CLRF   x6E
096A0:  CLRF   x6F
096A2:  CLRF   x70
096A4:  CLRF   x71
096A6:  CLRF   x72
096A8:  CLRF   x73
096AA:  CLRF   x74
096AC:  CLRF   x75
096AE:  CLRF   x76
096B0:  CLRF   x77
096B2:  CLRF   x78
096B4:  CLRF   x79
096B6:  CLRF   x7A
096B8:  CLRF   x7B
096BA:  CLRF   x7C
096BC:  CLRF   x7D
096BE:  CLRF   x7E
096C0:  CLRF   x7F
096C2:  CLRF   x80
096C4:  CLRF   x81
096C6:  CLRF   x82
096C8:  CLRF   x83
096CA:  CLRF   x84
096CC:  CLRF   x85
096CE:  CLRF   x86
096D0:  CLRF   x87
096D2:  CLRF   x88
096D4:  CLRF   x89
096D6:  CLRF   x8A
096D8:  CLRF   x8B
096DA:  CLRF   x8C
096DC:  CLRF   x8D
096DE:  CLRF   x8E
096E0:  CLRF   x8F
096E2:  CLRF   x90
096E4:  CLRF   x91
096E6:  CLRF   x92
096E8:  CLRF   x93
096EA:  CLRF   x94
096EC:  CLRF   x95
096EE:  CLRF   x96
096F0:  CLRF   x97
096F2:  CLRF   x98
096F4:  CLRF   x99
096F6:  CLRF   x9A
096F8:  CLRF   x9B
096FA:  CLRF   x9C
096FC:  CLRF   x9D
096FE:  CLRF   x9E
09700:  CLRF   x9F
09702:  CLRF   xA0
09704:  CLRF   xA1
09706:  CLRF   xA2
09708:  CLRF   xA3
0970A:  CLRF   xA4
0970C:  CLRF   xA5
0970E:  CLRF   xA6
09710:  CLRF   xA7
09712:  CLRF   xA8
09714:  CLRF   xA9
09716:  CLRF   xAA
09718:  CLRF   xAB
0971A:  CLRF   xAC
0971C:  CLRF   xAD
0971E:  CLRF   xAE
09720:  CLRF   xAF
09722:  CLRF   xB0
09724:  CLRF   xB1
09726:  CLRF   xB2
09728:  CLRF   xB3
0972A:  CLRF   xB4
0972C:  CLRF   xB5
0972E:  CLRF   xB6
09730:  CLRF   xB7
09732:  CLRF   xB8
09734:  CLRF   xB9
09736:  CLRF   xBA
09738:  CLRF   xBB
0973A:  CLRF   xBC
0973C:  CLRF   xBD
0973E:  CLRF   xBE
09740:  CLRF   xBF
09742:  CLRF   xC0
09744:  CLRF   xC1
09746:  CLRF   xC2
09748:  CLRF   xC3
0974A:  CLRF   xC4
0974C:  CLRF   xC5
0974E:  CLRF   xC6
09750:  CLRF   xC7
09752:  CLRF   xC8
09754:  CLRF   xC9
09756:  CLRF   xCA
09758:  CLRF   xCB
0975A:  CLRF   xCC
0975C:  CLRF   xCD
0975E:  CLRF   xCE
09760:  CLRF   xCF
09762:  CLRF   xD0
09764:  CLRF   xD1
09766:  CLRF   xD2
09768:  CLRF   xD3
0976A:  CLRF   xD4
0976C:  CLRF   xD5
0976E:  CLRF   xD6
09770:  CLRF   xD7
09772:  CLRF   xD8
09774:  CLRF   xD9
09776:  CLRF   xDA
09778:  CLRF   xDB
0977A:  CLRF   xDC
0977C:  CLRF   xDD
0977E:  CLRF   xDE
09780:  CLRF   xDF
09782:  CLRF   xE0
09784:  CLRF   xE1
09786:  CLRF   xE2
09788:  CLRF   xE3
0978A:  CLRF   xE4
0978C:  CLRF   xE5
0978E:  CLRF   xE6
09790:  CLRF   xE7
09792:  CLRF   xE8
09794:  CLRF   xE9
09796:  CLRF   xEA
09798:  CLRF   xEB
0979A:  CLRF   xEC
0979C:  CLRF   xED
0979E:  CLRF   xEE
097A0:  CLRF   xEF
097A2:  CLRF   xF0
097A4:  CLRF   xF1
097A6:  CLRF   xF2
097A8:  CLRF   xF3
097AA:  CLRF   xF4
097AC:  CLRF   xF5
097AE:  CLRF   xF6
097B0:  CLRF   xF7
097B2:  CLRF   xF8
097B4:  CLRF   xF9
097B6:  CLRF   xFA
097B8:  CLRF   xFB
097BA:  CLRF   xFC
097BC:  CLRF   xFD
097BE:  CLRF   xFE
097C0:  CLRF   xFF
097C2:  MOVLB  A
097C4:  CLRF   x00
097C6:  CLRF   x01
097C8:  CLRF   x02
097CA:  CLRF   x03
097CC:  CLRF   x04
097CE:  CLRF   x05
097D0:  CLRF   x06
097D2:  CLRF   x07
097D4:  CLRF   x08
097D6:  CLRF   x09
097D8:  CLRF   x0A
097DA:  CLRF   x0B
097DC:  CLRF   x0C
097DE:  CLRF   x0D
097E0:  CLRF   x0E
097E2:  CLRF   x0F
097E4:  CLRF   x10
097E6:  CLRF   x11
097E8:  CLRF   x12
097EA:  CLRF   x13
097EC:  CLRF   x14
097EE:  CLRF   x15
097F0:  CLRF   x16
097F2:  CLRF   x17
097F4:  CLRF   x18
097F6:  CLRF   x19
097F8:  CLRF   x1A
097FA:  CLRF   x1B
097FC:  CLRF   x1C
097FE:  CLRF   x1D
09800:  CLRF   x1E
09802:  CLRF   x1F
09804:  CLRF   x20
09806:  CLRF   x21
09808:  CLRF   x22
0980A:  CLRF   x23
0980C:  CLRF   x24
0980E:  CLRF   x25
09810:  CLRF   x26
09812:  CLRF   x27
09814:  CLRF   x28
09816:  CLRF   x29
09818:  CLRF   x2A
0981A:  CLRF   x2B
0981C:  CLRF   x2C
0981E:  CLRF   x2D
09820:  CLRF   x2E
09822:  CLRF   x2F
09824:  CLRF   x30
09826:  CLRF   x31
09828:  CLRF   x32
0982A:  CLRF   x33
0982C:  CLRF   x34
0982E:  CLRF   x35
09830:  CLRF   x36
09832:  CLRF   x37
09834:  CLRF   x38
09836:  CLRF   x39
09838:  CLRF   x3A
0983A:  CLRF   x3B
0983C:  CLRF   x3C
0983E:  CLRF   x3D
09840:  CLRF   x3E
09842:  CLRF   x3F
09844:  CLRF   x40
09846:  CLRF   x41
09848:  CLRF   x42
0984A:  CLRF   x43
0984C:  CLRF   x44
0984E:  CLRF   x45
09850:  CLRF   x46
09852:  CLRF   x47
09854:  CLRF   x48
09856:  CLRF   x49
09858:  CLRF   x4A
0985A:  CLRF   x4B
0985C:  CLRF   x4C
0985E:  CLRF   x4D
09860:  CLRF   x4E
09862:  CLRF   x4F
09864:  CLRF   x50
09866:  CLRF   x51
09868:  CLRF   x52
0986A:  CLRF   x53
0986C:  CLRF   x54
....................     port2.port_num = 2;
0986E:  MOVLW  02
09870:  MOVLB  6
09872:  MOVWF  x55
....................     port2.sweep_step = 0;
09874:  CLRF   x57
09876:  CLRF   x56
....................     port2.active = 1;
09878:  MOVLB  A
0987A:  BSF    x54.0
.................... 
....................     int16 count = 0;
0987C:  CLRF   x56
0987E:  CLRF   x55
....................     
....................     // Initialize DACs to 0
....................     mcp4901_1_write(1);
09880:  CLRF   x64
09882:  MOVLW  01
09884:  MOVWF  x63
09886:  MOVLB  0
09888:  CALL   246E
....................     mcp4901_2_write(1);
0988C:  MOVLB  A
0988E:  CLRF   x64
09890:  MOVLW  01
09892:  MOVWF  x63
09894:  MOVLB  0
09896:  CALL   24B0
.................... 
....................     iv_env_t measured_data = create_meas_data();
0989A:  CALL   7D40
0989E:  MOVFF  02,03
098A2:  MOVF   01,W
098A4:  MOVWF  FE1
098A6:  MOVFF  03,FE2
098AA:  MOVLW  0A
098AC:  MOVWF  FEA
098AE:  MOVLW  57
098B0:  MOVWF  FE9
098B2:  MOVLW  0C
098B4:  MOVWF  01
098B6:  MOVFF  FE6,FEE
098BA:  DECFSZ 01,F
098BC:  GOTO   98B6
....................     while (port1.active || port2.active)
098C0:  MOVLB  6
098C2:  BTFSS  x54.0
098C4:  BRA    98CC
098C6:  MOVLB  0
098C8:  GOTO   98DC
098CC:  MOVLB  0
098CE:  MOVLB  A
098D0:  BTFSC  x54.0
098D2:  BRA    98DA
098D4:  MOVLB  0
098D6:  GOTO   9B8C
098DA:  MOVLB  0
....................     {
....................         mcp4901_1_write(count);
098DC:  MOVFF  A56,A64
098E0:  MOVFF  A55,A63
098E4:  CALL   246E
....................         mcp4901_2_write(count);
098E8:  MOVFF  A56,A64
098EC:  MOVFF  A55,A63
098F0:  CALL   24B0
....................         delay_us(10); 
098F4:  MOVLW  0D
098F6:  MOVWF  00
098F8:  DECFSZ 00,F
098FA:  BRA    98F8
....................         if (port1.active) {
098FC:  MOVLB  6
098FE:  BTFSC  x54.0
09900:  BRA    9908
09902:  MOVLB  0
09904:  GOTO   9A2C
09908:  MOVLB  0
....................             port1.data_buffer[count].voltage = ad7490_read(ADC_CIGS1_AMP);
0990A:  MOVLB  A
0990C:  RLCF   x55,W
0990E:  MOVWF  02
09910:  RLCF   x56,W
09912:  MOVWF  03
09914:  RLCF   02,F
09916:  RLCF   03,F
09918:  MOVLW  FC
0991A:  ANDWF  02,F
0991C:  MOVF   02,W
0991E:  ADDLW  58
09920:  MOVWF  01
09922:  MOVLW  02
09924:  ADDWFC 03,F
09926:  MOVF   01,W
09928:  MOVWF  x65
0992A:  MOVFF  03,A66
0992E:  MOVLW  02
09930:  MOVWF  x75
09932:  MOVLB  0
09934:  CALL   209A
09938:  MOVFF  A66,FEA
0993C:  MOVFF  A65,FE9
09940:  MOVFF  02,FEC
09944:  MOVF   FED,F
09946:  MOVFF  01,FEF
....................             port1.data_buffer[count].current = ad7490_read(ADC_CIGS1_CURR);
0994A:  MOVLB  A
0994C:  RLCF   x55,W
0994E:  MOVWF  02
09950:  RLCF   x56,W
09952:  MOVWF  03
09954:  RLCF   02,F
09956:  RLCF   03,F
09958:  MOVLW  FC
0995A:  ANDWF  02,F
0995C:  MOVF   02,W
0995E:  ADDLW  03
09960:  MOVWF  x63
09962:  MOVLW  00
09964:  ADDWFC 03,W
09966:  MOVWF  x64
09968:  MOVLW  02
0996A:  ADDWF  x63,W
0996C:  MOVWF  01
0996E:  MOVLW  00
09970:  ADDWFC x64,W
09972:  MOVWF  03
09974:  MOVF   01,W
09976:  ADDLW  55
09978:  MOVWF  01
0997A:  MOVLW  02
0997C:  ADDWFC 03,F
0997E:  MOVF   01,W
09980:  MOVWF  x63
09982:  MOVFF  03,A64
09986:  MOVLW  01
09988:  MOVWF  x75
0998A:  MOVLB  0
0998C:  CALL   209A
09990:  MOVFF  A64,FEA
09994:  MOVFF  A63,FE9
09998:  MOVFF  02,FEC
0999C:  MOVF   FED,F
0999E:  MOVFF  01,FEF
....................             port1.sweep_step = count + 1; 
099A2:  MOVLW  01
099A4:  MOVLB  A
099A6:  ADDWF  x55,W
099A8:  MOVLB  2
099AA:  MOVWF  x56
099AC:  MOVLW  00
099AE:  MOVLB  A
099B0:  ADDWFC x56,W
099B2:  MOVLB  2
099B4:  MOVWF  x57
....................             // fprintf(PC, "%04LX,%04LX,", port1.data_buffer[count].voltage, port1.data_buffer[count].current);
....................             if (port1.data_buffer[count].current < curr_limit) {
099B6:  MOVLB  A
099B8:  RLCF   x55,W
099BA:  MOVWF  02
099BC:  RLCF   x56,W
099BE:  MOVWF  03
099C0:  RLCF   02,F
099C2:  RLCF   03,F
099C4:  MOVLW  FC
099C6:  ANDWF  02,F
099C8:  MOVF   02,W
099CA:  ADDLW  03
099CC:  MOVWF  x63
099CE:  MOVLW  00
099D0:  ADDWFC 03,W
099D2:  MOVWF  x64
099D4:  MOVLW  02
099D6:  ADDWF  x63,W
099D8:  MOVWF  01
099DA:  MOVLW  00
099DC:  ADDWFC x64,W
099DE:  MOVWF  03
099E0:  MOVF   01,W
099E2:  ADDLW  55
099E4:  MOVWF  FE9
099E6:  MOVLW  02
099E8:  ADDWFC 03,W
099EA:  MOVWF  FEA
099EC:  MOVFF  FEC,A64
099F0:  MOVF   FED,F
099F2:  MOVFF  FEF,A63
099F6:  MOVF   x64,W
099F8:  MOVLB  2
099FA:  SUBWF  x52,W
099FC:  BTFSC  FD8.0
099FE:  BRA    9A06
09A00:  MOVLB  0
09A02:  GOTO   9A2C
09A06:  MOVLB  0
09A08:  BTFSS  FD8.2
09A0A:  GOTO   9A22
09A0E:  MOVLB  2
09A10:  MOVF   x51,W
09A12:  MOVLB  A
09A14:  SUBWF  x63,W
09A16:  BTFSS  FD8.0
09A18:  BRA    9A20
09A1A:  MOVLB  0
09A1C:  GOTO   9A2C
09A20:  MOVLB  0
....................                 port1.active = 0;
09A22:  MOVLB  6
09A24:  BCF    x54.0
....................                 disconnect_port1();
09A26:  MOVLB  0
09A28:  CALL   7DC2
....................             }
....................         }
....................         if (port2.active) {
09A2C:  MOVLB  A
09A2E:  BTFSC  x54.0
09A30:  BRA    9A38
09A32:  MOVLB  0
09A34:  GOTO   9B5C
09A38:  MOVLB  0
....................             port2.data_buffer[count].voltage = ad7490_read(ADC_CIGS2_AMP);
09A3A:  MOVLB  A
09A3C:  RLCF   x55,W
09A3E:  MOVWF  02
09A40:  RLCF   x56,W
09A42:  MOVWF  03
09A44:  RLCF   02,F
09A46:  RLCF   03,F
09A48:  MOVLW  FC
09A4A:  ANDWF  02,F
09A4C:  MOVF   02,W
09A4E:  ADDLW  58
09A50:  MOVWF  01
09A52:  MOVLW  06
09A54:  ADDWFC 03,F
09A56:  MOVF   01,W
09A58:  MOVWF  x65
09A5A:  MOVFF  03,A66
09A5E:  MOVLW  06
09A60:  MOVWF  x75
09A62:  MOVLB  0
09A64:  CALL   209A
09A68:  MOVFF  A66,FEA
09A6C:  MOVFF  A65,FE9
09A70:  MOVFF  02,FEC
09A74:  MOVF   FED,F
09A76:  MOVFF  01,FEF
....................             port2.data_buffer[count].current = ad7490_read(ADC_CIGS2_CURR);
09A7A:  MOVLB  A
09A7C:  RLCF   x55,W
09A7E:  MOVWF  02
09A80:  RLCF   x56,W
09A82:  MOVWF  03
09A84:  RLCF   02,F
09A86:  RLCF   03,F
09A88:  MOVLW  FC
09A8A:  ANDWF  02,F
09A8C:  MOVF   02,W
09A8E:  ADDLW  03
09A90:  MOVWF  x63
09A92:  MOVLW  00
09A94:  ADDWFC 03,W
09A96:  MOVWF  x64
09A98:  MOVLW  02
09A9A:  ADDWF  x63,W
09A9C:  MOVWF  01
09A9E:  MOVLW  00
09AA0:  ADDWFC x64,W
09AA2:  MOVWF  03
09AA4:  MOVF   01,W
09AA6:  ADDLW  55
09AA8:  MOVWF  01
09AAA:  MOVLW  06
09AAC:  ADDWFC 03,F
09AAE:  MOVF   01,W
09AB0:  MOVWF  x63
09AB2:  MOVFF  03,A64
09AB6:  MOVLW  05
09AB8:  MOVWF  x75
09ABA:  MOVLB  0
09ABC:  CALL   209A
09AC0:  MOVFF  A64,FEA
09AC4:  MOVFF  A63,FE9
09AC8:  MOVFF  02,FEC
09ACC:  MOVF   FED,F
09ACE:  MOVFF  01,FEF
....................             port2.sweep_step = count + 1;
09AD2:  MOVLW  01
09AD4:  MOVLB  A
09AD6:  ADDWF  x55,W
09AD8:  MOVLB  6
09ADA:  MOVWF  x56
09ADC:  MOVLW  00
09ADE:  MOVLB  A
09AE0:  ADDWFC x56,W
09AE2:  MOVLB  6
09AE4:  MOVWF  x57
....................             if (port2.data_buffer[count].current < curr_limit) {
09AE6:  MOVLB  A
09AE8:  RLCF   x55,W
09AEA:  MOVWF  02
09AEC:  RLCF   x56,W
09AEE:  MOVWF  03
09AF0:  RLCF   02,F
09AF2:  RLCF   03,F
09AF4:  MOVLW  FC
09AF6:  ANDWF  02,F
09AF8:  MOVF   02,W
09AFA:  ADDLW  03
09AFC:  MOVWF  x63
09AFE:  MOVLW  00
09B00:  ADDWFC 03,W
09B02:  MOVWF  x64
09B04:  MOVLW  02
09B06:  ADDWF  x63,W
09B08:  MOVWF  01
09B0A:  MOVLW  00
09B0C:  ADDWFC x64,W
09B0E:  MOVWF  03
09B10:  MOVF   01,W
09B12:  ADDLW  55
09B14:  MOVWF  FE9
09B16:  MOVLW  06
09B18:  ADDWFC 03,W
09B1A:  MOVWF  FEA
09B1C:  MOVFF  FEC,A64
09B20:  MOVF   FED,F
09B22:  MOVFF  FEF,A63
09B26:  MOVF   x64,W
09B28:  MOVLB  2
09B2A:  SUBWF  x52,W
09B2C:  BTFSC  FD8.0
09B2E:  BRA    9B36
09B30:  MOVLB  0
09B32:  GOTO   9B5C
09B36:  MOVLB  0
09B38:  BTFSS  FD8.2
09B3A:  GOTO   9B52
09B3E:  MOVLB  2
09B40:  MOVF   x51,W
09B42:  MOVLB  A
09B44:  SUBWF  x63,W
09B46:  BTFSS  FD8.0
09B48:  BRA    9B50
09B4A:  MOVLB  0
09B4C:  GOTO   9B5C
09B50:  MOVLB  0
....................                 port2.active = 0;
09B52:  MOVLB  A
09B54:  BCF    x54.0
....................                 disconnect_port2();
09B56:  MOVLB  0
09B58:  CALL   7DCA
....................             } 
....................         }
....................         count++;
09B5C:  MOVLB  A
09B5E:  INCF   x55,F
09B60:  BTFSC  FD8.2
09B62:  INCF   x56,F
....................         if (count >= 255) {
09B64:  MOVF   x56,F
09B66:  BTFSC  FD8.2
09B68:  BRA    9B70
09B6A:  MOVLB  0
09B6C:  GOTO   9B84
09B70:  MOVLB  0
09B72:  MOVLB  A
09B74:  MOVF   x55,W
09B76:  SUBLW  FE
09B78:  BTFSS  FD8.0
09B7A:  BRA    9B82
09B7C:  MOVLB  0
09B7E:  GOTO   9B88
09B82:  MOVLB  0
....................             // fprintf(PC, "Maximum step count reached: %ld\r\n", count);
....................             break;
09B84:  GOTO   9B8C
....................         }
09B88:  GOTO   98C0
....................     }
.................... 
....................     // Ensure all connections are disabled
....................     disconnect_port1();
09B8C:  CALL   7DC2
....................     disconnect_port2();
09B90:  CALL   7DCA
....................     log_meas_data(&measured_data, &port1);
09B94:  MOVLW  0A
09B96:  MOVLB  A
09B98:  MOVWF  x64
09B9A:  MOVLW  57
09B9C:  MOVWF  x63
09B9E:  MOVLW  02
09BA0:  MOVWF  x66
09BA2:  MOVLW  55
09BA4:  MOVWF  x65
09BA6:  MOVLB  0
09BA8:  CALL   7DF4
....................     log_meas_data(&measured_data, &port2);
09BAC:  MOVLW  0A
09BAE:  MOVLB  A
09BB0:  MOVWF  x64
09BB2:  MOVLW  57
09BB4:  MOVWF  x63
09BB6:  MOVLW  06
09BB8:  MOVWF  x66
09BBA:  MOVLW  55
09BBC:  MOVWF  x65
09BBE:  MOVLB  0
09BC0:  CALL   7DF4
09BC4:  GOTO   A066 (RETURN)
.................... }
.................... 
.................... 
.................... void log_meas_data(iv_env_t *measured_data_ptr, sweep_config_t *port_data_ptr)
*
07E74:  MOVLW  0A
07E76:  MOVWF  xA7
07E78:  MOVLW  67
07E7A:  MOVWF  xA6
.................... {
....................     iv_data_packet_t data_packet = {0};
*
07DF4:  MOVLB  A
07DF6:  CLRF   x67
07DF8:  CLRF   x68
07DFA:  CLRF   x69
07DFC:  CLRF   x6A
07DFE:  CLRF   x6B
07E00:  CLRF   x6C
07E02:  CLRF   x6D
07E04:  CLRF   x6E
07E06:  CLRF   x6F
07E08:  CLRF   x70
07E0A:  CLRF   x71
07E0C:  CLRF   x72
07E0E:  CLRF   x73
07E10:  CLRF   x74
07E12:  CLRF   x75
07E14:  CLRF   x76
07E16:  CLRF   x77
07E18:  CLRF   x78
07E1A:  CLRF   x79
07E1C:  CLRF   x7A
07E1E:  CLRF   x7B
07E20:  CLRF   x7C
07E22:  CLRF   x7D
07E24:  CLRF   x7E
07E26:  CLRF   x7F
07E28:  CLRF   x80
07E2A:  CLRF   x81
07E2C:  CLRF   x82
07E2E:  CLRF   x83
07E30:  CLRF   x84
07E32:  CLRF   x85
07E34:  CLRF   x86
07E36:  CLRF   x87
07E38:  CLRF   x88
07E3A:  CLRF   x89
07E3C:  CLRF   x8A
07E3E:  CLRF   x8B
07E40:  CLRF   x8C
07E42:  CLRF   x8D
07E44:  CLRF   x8E
07E46:  CLRF   x8F
07E48:  CLRF   x90
07E4A:  CLRF   x91
07E4C:  CLRF   x92
07E4E:  CLRF   x93
07E50:  CLRF   x94
07E52:  CLRF   x95
07E54:  CLRF   x96
07E56:  CLRF   x97
07E58:  CLRF   x98
07E5A:  CLRF   x99
07E5C:  CLRF   x9A
07E5E:  CLRF   x9B
07E60:  CLRF   x9C
07E62:  CLRF   x9D
07E64:  CLRF   x9E
07E66:  CLRF   x9F
07E68:  CLRF   xA0
07E6A:  CLRF   xA1
07E6C:  CLRF   xA2
07E6E:  CLRF   xA3
07E70:  CLRF   xA4
07E72:  CLRF   xA5
....................     iv_data_packet_t *data_packet_ptr = &data_packet;
....................     
....................     // ヘッダ情報の設定
....................     data_packet.header.start_marker = START_MAKER;
*
07E7C:  SETF   x68
07E7E:  SETF   x67
....................     data_packet.header.time_sec = measured_data_ptr->time / 1000;
07E80:  MOVF   x63,W
07E82:  MOVWF  FE9
07E84:  MOVF   x64,W
07E86:  MOVWF  FEA
07E88:  MOVFF  FEF,AAE
07E8C:  MOVFF  FEC,AAF
07E90:  MOVFF  FEC,AB0
07E94:  MOVFF  FEC,AB1
07E98:  MOVF   FED,F
07E9A:  MOVF   FED,F
07E9C:  MOVF   FED,F
07E9E:  MOVFF  FEA,AB3
07EA2:  MOVFF  FE9,AB2
07EA6:  BCF    FD8.1
07EA8:  MOVFF  AB1,ABB
07EAC:  MOVFF  AB0,ABA
07EB0:  MOVFF  AAF,AB9
07EB4:  MOVFF  AAE,AB8
07EB8:  CLRF   xBF
07EBA:  CLRF   xBE
07EBC:  MOVLW  03
07EBE:  MOVWF  xBD
07EC0:  MOVLW  E8
07EC2:  MOVWF  xBC
07EC4:  MOVLB  0
07EC6:  CALL   5D1C
07ECA:  MOVFF  AB3,FEA
07ECE:  MOVFF  AB2,FE9
07ED2:  MOVFF  03,A6C
07ED6:  MOVFF  02,A6B
07EDA:  MOVFF  01,A6A
07EDE:  MOVFF  00,A69
....................     data_packet.header.time_msec = measured_data_ptr->time % 1000;
07EE2:  MOVLB  A
07EE4:  MOVF   x63,W
07EE6:  MOVWF  FE9
07EE8:  MOVF   x64,W
07EEA:  MOVWF  FEA
07EEC:  MOVFF  FEF,AAE
07EF0:  MOVFF  FEC,AAF
07EF4:  MOVFF  FEC,AB0
07EF8:  MOVFF  FEC,AB1
07EFC:  MOVF   FED,F
07EFE:  MOVF   FED,F
07F00:  MOVF   FED,F
07F02:  MOVFF  FEA,AB3
07F06:  MOVFF  FE9,AB2
07F0A:  BSF    FD8.1
07F0C:  MOVLW  0A
07F0E:  MOVWF  FEA
07F10:  MOVLW  B4
07F12:  MOVWF  FE9
07F14:  MOVFF  AB1,ABB
07F18:  MOVFF  AB0,ABA
07F1C:  MOVFF  AAF,AB9
07F20:  MOVFF  AAE,AB8
07F24:  CLRF   xBF
07F26:  CLRF   xBE
07F28:  MOVLW  03
07F2A:  MOVWF  xBD
07F2C:  MOVLW  E8
07F2E:  MOVWF  xBC
07F30:  MOVLB  0
07F32:  CALL   5D1C
07F36:  MOVFF  AB4,00
07F3A:  MOVFF  AB5,01
07F3E:  MOVFF  AB6,02
07F42:  MOVFF  AB7,03
07F46:  MOVFF  AB3,FEA
07F4A:  MOVFF  AB2,FE9
07F4E:  MOVFF  01,A6E
07F52:  MOVFF  00,A6D
.................... 
....................     // 環境データの設定
....................     data_packet.header.env_data[0].data[0] = (measured_data_ptr->pd >> 4) & 0xFF;
07F56:  MOVLW  04
07F58:  MOVLB  A
07F5A:  ADDWF  x63,W
07F5C:  MOVWF  FE9
07F5E:  MOVLW  00
07F60:  ADDWFC x64,W
07F62:  MOVWF  FEA
07F64:  MOVFF  FEC,AAF
07F68:  MOVF   FED,F
07F6A:  MOVFF  FEF,AAE
07F6E:  RRCF   xAF,F
07F70:  RRCF   xAE,F
07F72:  RRCF   xAF,F
07F74:  RRCF   xAE,F
07F76:  RRCF   xAF,F
07F78:  RRCF   xAE,F
07F7A:  RRCF   xAF,F
07F7C:  RRCF   xAE,F
07F7E:  MOVLW  0F
07F80:  ANDWF  xAF,F
07F82:  MOVF   xAE,W
07F84:  MOVWF  x6F
....................     data_packet.header.env_data[0].data[1] = ((measured_data_ptr->pd & 0x0F) << 4) | ((measured_data_ptr->temp_py_top >> 8) & 0x0F);
07F86:  MOVLW  04
07F88:  ADDWF  x63,W
07F8A:  MOVWF  FE9
07F8C:  MOVLW  00
07F8E:  ADDWFC x64,W
07F90:  MOVWF  FEA
07F92:  MOVFF  FEC,AAF
07F96:  MOVF   FED,F
07F98:  MOVFF  FEF,AAE
07F9C:  MOVLW  0F
07F9E:  ANDWF  xAE,F
07FA0:  CLRF   xAF
07FA2:  RLCF   xAE,F
07FA4:  RLCF   xAF,F
07FA6:  RLCF   xAE,F
07FA8:  RLCF   xAF,F
07FAA:  RLCF   xAE,F
07FAC:  RLCF   xAF,F
07FAE:  RLCF   xAE,F
07FB0:  RLCF   xAF,F
07FB2:  MOVLW  F0
07FB4:  ANDWF  xAE,F
07FB6:  MOVLW  06
07FB8:  ADDWF  x63,W
07FBA:  MOVWF  FE9
07FBC:  MOVLW  00
07FBE:  ADDWFC x64,W
07FC0:  MOVWF  FEA
07FC2:  MOVFF  FEC,AB1
07FC6:  MOVF   FED,F
07FC8:  MOVFF  FEF,AB0
07FCC:  MOVFF  AB1,AB0
07FD0:  CLRF   xB1
07FD2:  MOVF   xB0,W
07FD4:  ANDLW  0F
07FD6:  MOVWF  00
07FD8:  CLRF   03
07FDA:  MOVF   00,W
07FDC:  IORWF  xAE,W
07FDE:  MOVWF  x70
....................     data_packet.header.env_data[0].data[2] = measured_data_ptr->temp_py_top & 0xFF;
07FE0:  MOVLW  06
07FE2:  ADDWF  x63,W
07FE4:  MOVWF  FE9
07FE6:  MOVLW  00
07FE8:  ADDWFC x64,W
07FEA:  MOVWF  FEA
07FEC:  MOVFF  FEC,AAF
07FF0:  MOVF   FED,F
07FF2:  MOVFF  FEF,AAE
07FF6:  MOVF   xAE,W
07FF8:  MOVWF  x71
....................     data_packet.header.env_data[1].data[0] = (measured_data_ptr->temp_py_bot >> 4) & 0xFF;
07FFA:  MOVLW  08
07FFC:  ADDWF  x63,W
07FFE:  MOVWF  FE9
08000:  MOVLW  00
08002:  ADDWFC x64,W
08004:  MOVWF  FEA
08006:  MOVFF  FEC,AAF
0800A:  MOVF   FED,F
0800C:  MOVFF  FEF,AAE
08010:  RRCF   xAF,F
08012:  RRCF   xAE,F
08014:  RRCF   xAF,F
08016:  RRCF   xAE,F
08018:  RRCF   xAF,F
0801A:  RRCF   xAE,F
0801C:  RRCF   xAF,F
0801E:  RRCF   xAE,F
08020:  MOVLW  0F
08022:  ANDWF  xAF,F
08024:  MOVF   xAE,W
08026:  MOVWF  x72
....................     data_packet.header.env_data[1].data[1] = ((measured_data_ptr->temp_py_bot & 0x0F) << 4) | ((measured_data_ptr->temp_mis7 >> 8) & 0x0F);
08028:  MOVLW  08
0802A:  ADDWF  x63,W
0802C:  MOVWF  FE9
0802E:  MOVLW  00
08030:  ADDWFC x64,W
08032:  MOVWF  FEA
08034:  MOVFF  FEC,AAF
08038:  MOVF   FED,F
0803A:  MOVFF  FEF,AAE
0803E:  MOVLW  0F
08040:  ANDWF  xAE,F
08042:  CLRF   xAF
08044:  RLCF   xAE,F
08046:  RLCF   xAF,F
08048:  RLCF   xAE,F
0804A:  RLCF   xAF,F
0804C:  RLCF   xAE,F
0804E:  RLCF   xAF,F
08050:  RLCF   xAE,F
08052:  RLCF   xAF,F
08054:  MOVLW  F0
08056:  ANDWF  xAE,F
08058:  MOVLW  0A
0805A:  ADDWF  x63,W
0805C:  MOVWF  FE9
0805E:  MOVLW  00
08060:  ADDWFC x64,W
08062:  MOVWF  FEA
08064:  MOVFF  FEC,AB1
08068:  MOVF   FED,F
0806A:  MOVFF  FEF,AB0
0806E:  MOVFF  AB1,AB0
08072:  CLRF   xB1
08074:  MOVF   xB0,W
08076:  ANDLW  0F
08078:  MOVWF  00
0807A:  CLRF   03
0807C:  MOVF   00,W
0807E:  IORWF  xAE,W
08080:  MOVWF  x73
....................     data_packet.header.env_data[1].data[2] = measured_data_ptr->temp_mis7 & 0xFF;
08082:  MOVLW  0A
08084:  ADDWF  x63,W
08086:  MOVWF  FE9
08088:  MOVLW  00
0808A:  ADDWFC x64,W
0808C:  MOVWF  FEA
0808E:  MOVFF  FEC,AAF
08092:  MOVF   FED,F
08094:  MOVFF  FEF,AAE
08098:  MOVF   xAE,W
0809A:  MOVWF  x74
....................     
....................     // IVデータの1パケット目
....................     unsigned int16 iv_index = 0;
0809C:  CLRF   xA9
0809E:  CLRF   xA8
....................     for (unsigned int16 i = 0; i < 16 && iv_index < port_data_ptr->sweep_step; i++, iv_index++){
080A0:  CLRF   xAB
080A2:  CLRF   xAA
080A4:  MOVLB  0
080A6:  MOVLB  A
080A8:  MOVF   xAB,F
080AA:  BTFSC  FD8.2
080AC:  BRA    80B4
080AE:  MOVLB  0
080B0:  GOTO   834A
080B4:  MOVLB  0
080B6:  MOVLB  A
080B8:  MOVF   xAA,W
080BA:  SUBLW  0F
080BC:  BTFSC  FD8.0
080BE:  BRA    80C6
080C0:  MOVLB  0
080C2:  GOTO   834A
080C6:  MOVLB  0
080C8:  MOVLW  01
080CA:  MOVLB  A
080CC:  ADDWF  x65,W
080CE:  MOVWF  FE9
080D0:  MOVLW  00
080D2:  ADDWFC x66,W
080D4:  MOVWF  FEA
080D6:  MOVFF  FEC,03
080DA:  MOVF   FED,F
080DC:  MOVF   FEF,W
080DE:  MOVWF  01
080E0:  MOVF   xA9,W
080E2:  SUBWF  03,W
080E4:  BTFSC  FD8.0
080E6:  BRA    80EE
080E8:  MOVLB  0
080EA:  GOTO   834A
080EE:  MOVLB  0
080F0:  BTFSS  FD8.2
080F2:  GOTO   8108
080F6:  MOVF   01,W
080F8:  MOVLB  A
080FA:  SUBWF  xA8,W
080FC:  BTFSS  FD8.0
080FE:  BRA    8106
08100:  MOVLB  0
08102:  GOTO   834A
08106:  MOVLB  0
....................         data_packet.header.iv_data[i].data[0] = (port_data_ptr->data_buffer[i].voltage >> 4) & 0xFF;
08108:  MOVFF  AAB,AAF
0810C:  MOVFF  AAA,AAE
08110:  MOVLB  A
08112:  CLRF   xB1
08114:  MOVLW  03
08116:  MOVWF  xB0
08118:  MOVLB  0
0811A:  CALL   7DD2
0811E:  MOVFF  02,03
08122:  MOVF   01,W
08124:  ADDLW  75
08126:  MOVWF  01
08128:  MOVLW  0A
0812A:  ADDWFC 03,F
0812C:  MOVF   01,W
0812E:  MOVLB  A
08130:  MOVWF  xB0
08132:  MOVFF  03,AB1
08136:  RLCF   xAA,W
08138:  MOVWF  02
0813A:  RLCF   xAB,W
0813C:  MOVWF  03
0813E:  RLCF   02,F
08140:  RLCF   03,F
08142:  MOVLW  FC
08144:  ANDWF  02,F
08146:  MOVF   02,W
08148:  ADDLW  03
0814A:  MOVWF  xB2
0814C:  MOVLW  00
0814E:  ADDWFC 03,W
08150:  MOVWF  xB3
08152:  MOVF   x65,W
08154:  ADDWF  xB2,W
08156:  MOVWF  FE9
08158:  MOVF   x66,W
0815A:  ADDWFC xB3,W
0815C:  MOVWF  FEA
0815E:  MOVFF  FEC,AB5
08162:  MOVF   FED,F
08164:  MOVFF  FEF,AB4
08168:  RRCF   xB5,F
0816A:  RRCF   xB4,F
0816C:  RRCF   xB5,F
0816E:  RRCF   xB4,F
08170:  RRCF   xB5,F
08172:  RRCF   xB4,F
08174:  RRCF   xB5,F
08176:  RRCF   xB4,F
08178:  MOVLW  0F
0817A:  ANDWF  xB5,F
0817C:  MOVF   xB4,W
0817E:  MOVWF  00
08180:  CLRF   03
08182:  MOVF   00,W
08184:  MOVWF  xB4
08186:  MOVFF  03,AB5
0818A:  MOVFF  AB1,FEA
0818E:  MOVFF  AB0,FE9
08192:  MOVFF  AB4,FEF
....................         data_packet.header.iv_data[i].data[1] = ((port_data_ptr->data_buffer[i].voltage & 0x0F) << 4) | ((port_data_ptr->data_buffer[i].current >> 8) & 0x0F);
08196:  MOVFF  AAB,AAF
0819A:  MOVFF  AAA,AAE
0819E:  CLRF   xB1
081A0:  MOVLW  03
081A2:  MOVWF  xB0
081A4:  MOVLB  0
081A6:  CALL   7DD2
081AA:  MOVFF  02,03
081AE:  MOVF   01,W
081B0:  ADDLW  0E
081B2:  MOVLB  A
081B4:  MOVWF  xAE
081B6:  MOVLW  00
081B8:  ADDWFC 03,W
081BA:  MOVWF  xAF
081BC:  MOVLW  01
081BE:  ADDWF  xAE,W
081C0:  MOVWF  01
081C2:  MOVLW  00
081C4:  ADDWFC xAF,W
081C6:  MOVWF  03
081C8:  MOVF   01,W
081CA:  ADDLW  67
081CC:  MOVWF  01
081CE:  MOVLW  0A
081D0:  ADDWFC 03,F
081D2:  MOVF   01,W
081D4:  MOVWF  xAE
081D6:  MOVFF  03,AAF
081DA:  RLCF   xAA,W
081DC:  MOVWF  02
081DE:  RLCF   xAB,W
081E0:  MOVWF  03
081E2:  RLCF   02,F
081E4:  RLCF   03,F
081E6:  MOVLW  FC
081E8:  ANDWF  02,F
081EA:  MOVF   02,W
081EC:  ADDLW  03
081EE:  MOVWF  xB0
081F0:  MOVLW  00
081F2:  ADDWFC 03,W
081F4:  MOVWF  xB1
081F6:  MOVF   x65,W
081F8:  ADDWF  xB0,W
081FA:  MOVWF  FE9
081FC:  MOVF   x66,W
081FE:  ADDWFC xB1,W
08200:  MOVWF  FEA
08202:  MOVFF  FEC,AB3
08206:  MOVF   FED,F
08208:  MOVFF  FEF,AB2
0820C:  MOVLW  0F
0820E:  ANDWF  xB2,F
08210:  CLRF   xB3
08212:  RLCF   xB2,F
08214:  RLCF   xB3,F
08216:  RLCF   xB2,F
08218:  RLCF   xB3,F
0821A:  RLCF   xB2,F
0821C:  RLCF   xB3,F
0821E:  RLCF   xB2,F
08220:  RLCF   xB3,F
08222:  MOVLW  F0
08224:  ANDWF  xB2,F
08226:  RLCF   xAA,W
08228:  MOVWF  02
0822A:  RLCF   xAB,W
0822C:  MOVWF  03
0822E:  RLCF   02,F
08230:  RLCF   03,F
08232:  MOVLW  FC
08234:  ANDWF  02,F
08236:  MOVF   02,W
08238:  ADDLW  03
0823A:  MOVWF  xB4
0823C:  MOVLW  00
0823E:  ADDWFC 03,W
08240:  MOVWF  xB5
08242:  MOVLW  02
08244:  ADDWF  xB4,W
08246:  MOVWF  01
08248:  MOVLW  00
0824A:  ADDWFC xB5,W
0824C:  MOVWF  03
0824E:  MOVF   01,W
08250:  ADDWF  x65,W
08252:  MOVWF  FE9
08254:  MOVF   x66,W
08256:  ADDWFC 03,W
08258:  MOVWF  FEA
0825A:  MOVFF  FEC,AB5
0825E:  MOVF   FED,F
08260:  MOVFF  FEF,AB4
08264:  MOVFF  AB5,AB4
08268:  CLRF   xB5
0826A:  MOVF   xB4,W
0826C:  ANDLW  0F
0826E:  MOVWF  00
08270:  CLRF   03
08272:  MOVF   00,W
08274:  IORWF  xB2,W
08276:  MOVWF  00
08278:  MOVF   03,W
0827A:  IORWF  xB3,W
0827C:  MOVWF  03
0827E:  MOVF   00,W
08280:  MOVWF  xB2
08282:  MOVFF  03,AB3
08286:  MOVFF  AAF,FEA
0828A:  MOVFF  AAE,FE9
0828E:  MOVFF  AB2,FEF
....................         data_packet.header.iv_data[i].data[2] = port_data_ptr->data_buffer[i].current & 0xFF;
08292:  MOVFF  AAB,AAF
08296:  MOVFF  AAA,AAE
0829A:  CLRF   xB1
0829C:  MOVLW  03
0829E:  MOVWF  xB0
082A0:  MOVLB  0
082A2:  CALL   7DD2
082A6:  MOVFF  02,03
082AA:  MOVF   01,W
082AC:  ADDLW  0E
082AE:  MOVLB  A
082B0:  MOVWF  xAE
082B2:  MOVLW  00
082B4:  ADDWFC 03,W
082B6:  MOVWF  xAF
082B8:  MOVLW  02
082BA:  ADDWF  xAE,W
082BC:  MOVWF  01
082BE:  MOVLW  00
082C0:  ADDWFC xAF,W
082C2:  MOVWF  03
082C4:  MOVF   01,W
082C6:  ADDLW  67
082C8:  MOVWF  01
082CA:  MOVLW  0A
082CC:  ADDWFC 03,F
082CE:  MOVF   01,W
082D0:  MOVWF  xAE
082D2:  MOVFF  03,AAF
082D6:  RLCF   xAA,W
082D8:  MOVWF  02
082DA:  RLCF   xAB,W
082DC:  MOVWF  03
082DE:  RLCF   02,F
082E0:  RLCF   03,F
082E2:  MOVLW  FC
082E4:  ANDWF  02,F
082E6:  MOVF   02,W
082E8:  ADDLW  03
082EA:  MOVWF  xB0
082EC:  MOVLW  00
082EE:  ADDWFC 03,W
082F0:  MOVWF  xB1
082F2:  MOVLW  02
082F4:  ADDWF  xB0,W
082F6:  MOVWF  01
082F8:  MOVLW  00
082FA:  ADDWFC xB1,W
082FC:  MOVWF  03
082FE:  MOVF   01,W
08300:  ADDWF  x65,W
08302:  MOVWF  FE9
08304:  MOVF   x66,W
08306:  ADDWFC 03,W
08308:  MOVWF  FEA
0830A:  MOVFF  FEC,AB1
0830E:  MOVF   FED,F
08310:  MOVFF  FEF,AB0
08314:  MOVF   xB0,W
08316:  MOVWF  00
08318:  CLRF   03
0831A:  MOVF   00,W
0831C:  MOVWF  xB0
0831E:  MOVFF  03,AB1
08322:  MOVFF  AAF,FEA
08326:  MOVFF  AAE,FE9
0832A:  MOVFF  AB0,FEF
0832E:  MOVLB  0
08330:  MOVLB  A
08332:  MOVF   xAB,W
08334:  MOVWF  03
08336:  MOVF   xAA,W
08338:  INCF   xAA,F
0833A:  BTFSC  FD8.2
0833C:  INCF   xAB,F
0833E:  INCF   xA8,F
08340:  BTFSC  FD8.2
08342:  INCF   xA9,F
08344:  MOVLB  0
08346:  GOTO   80A6
....................     }
....................     switch (port_data_ptr -> port_num) {
0834A:  MOVLB  A
0834C:  MOVF   x65,W
0834E:  MOVWF  FE9
08350:  MOVF   x66,W
08352:  MOVWF  FEA
08354:  MOVF   FEF,W
08356:  XORLW  01
08358:  MOVLB  0
0835A:  BTFSC  FD8.2
0835C:  GOTO   836C
08360:  XORLW  03
08362:  BTFSC  FD8.2
08364:  GOTO   839A
08368:  GOTO   83C8
....................         case 1:
....................             misf_write_data(FLASH_ID_IV1_DATA, data_packet_ptr->raw, PACKET_SIZE-1);
0836C:  MOVLB  A
0836E:  MOVF   xA6,W
08370:  MOVWF  01
08372:  MOVF   xA7,W
08374:  MOVWF  03
08376:  MOVF   01,W
08378:  MOVWF  xAE
0837A:  MOVFF  03,AAF
0837E:  MOVLW  04
08380:  MOVWF  xB0
08382:  MOVFF  AAF,AB2
08386:  MOVFF  AAE,AB1
0838A:  CLRF   xB4
0838C:  MOVLW  3F
0838E:  MOVWF  xB3
08390:  MOVLB  0
08392:  CALL   43E4
....................             break;
08396:  GOTO   83CC
....................         case 2:
....................             misf_write_data(FLASH_ID_IV2_DATA, data_packet_ptr->raw, PACKET_SIZE-1);
0839A:  MOVLB  A
0839C:  MOVF   xA6,W
0839E:  MOVWF  01
083A0:  MOVF   xA7,W
083A2:  MOVWF  03
083A4:  MOVF   01,W
083A6:  MOVWF  xAE
083A8:  MOVFF  03,AAF
083AC:  MOVLW  06
083AE:  MOVWF  xB0
083B0:  MOVFF  AAF,AB2
083B4:  MOVFF  AAE,AB1
083B8:  CLRF   xB4
083BA:  MOVLW  3F
083BC:  MOVWF  xB3
083BE:  MOVLB  0
083C0:  CALL   43E4
....................             break;
083C4:  GOTO   83CC
....................         default:
....................             break;
083C8:  GOTO   83CC
....................     }
.................... 
....................     // 2パケット目以降のIVデータ
....................     while (iv_index < port_data_ptr->sweep_step) {
083CC:  MOVLW  01
083CE:  MOVLB  A
083D0:  ADDWF  x65,W
083D2:  MOVWF  FE9
083D4:  MOVLW  00
083D6:  ADDWFC x66,W
083D8:  MOVWF  FEA
083DA:  MOVFF  FEC,03
083DE:  MOVF   FED,F
083E0:  MOVF   FEF,W
083E2:  MOVWF  01
083E4:  MOVF   xA9,W
083E6:  SUBWF  03,W
083E8:  BTFSC  FD8.0
083EA:  BRA    83F2
083EC:  MOVLB  0
083EE:  GOTO   8836
083F2:  MOVLB  0
083F4:  BTFSS  FD8.2
083F6:  GOTO   840C
083FA:  MOVF   01,W
083FC:  MOVLB  A
083FE:  SUBWF  xA8,W
08400:  BTFSS  FD8.0
08402:  BRA    840A
08404:  MOVLB  0
08406:  GOTO   8836
0840A:  MOVLB  0
....................         // 新しいパケットの初期化（ゼロクリア）
....................         memset(data_packet_ptr->raw, 0x00, sizeof(data_packet.raw));
0840C:  MOVLB  A
0840E:  MOVF   xA6,W
08410:  MOVWF  01
08412:  MOVF   xA7,W
08414:  MOVWF  03
08416:  MOVF   01,W
08418:  MOVWF  xAE
0841A:  MOVFF  03,AAF
0841E:  MOVFF  AAF,FEA
08422:  MOVFF  AAE,FE9
08426:  CLRF   00
08428:  CLRF   02
0842A:  MOVLW  3F
0842C:  MOVWF  01
0842E:  MOVLB  0
08430:  CALL   2B06
.................... 
....................         unsigned int16 step_in_packet = 0;
08434:  MOVLB  A
08436:  CLRF   xAD
08438:  CLRF   xAC
0843A:  MOVLB  0
.................... 
....................         // データを詰める
....................         for (; step_in_packet < 21 && iv_index < port_data_ptr->sweep_step;
0843C:  MOVLB  A
0843E:  MOVF   xAD,F
08440:  BTFSC  FD8.2
08442:  BRA    844A
08444:  MOVLB  0
08446:  GOTO   86D6
0844A:  MOVLB  0
0844C:  MOVLB  A
0844E:  MOVF   xAC,W
08450:  SUBLW  14
08452:  BTFSC  FD8.0
08454:  BRA    845C
08456:  MOVLB  0
08458:  GOTO   86D6
0845C:  MOVLB  0
0845E:  MOVLW  01
08460:  MOVLB  A
08462:  ADDWF  x65,W
08464:  MOVWF  FE9
08466:  MOVLW  00
08468:  ADDWFC x66,W
0846A:  MOVWF  FEA
0846C:  MOVFF  FEC,03
08470:  MOVF   FED,F
08472:  MOVF   FEF,W
08474:  MOVWF  01
08476:  MOVF   xA9,W
08478:  SUBWF  03,W
0847A:  BTFSC  FD8.0
0847C:  BRA    8484
0847E:  MOVLB  0
08480:  GOTO   86D6
08484:  MOVLB  0
08486:  BTFSS  FD8.2
08488:  GOTO   849E
0848C:  MOVF   01,W
0848E:  MOVLB  A
08490:  SUBWF  xA8,W
08492:  BTFSS  FD8.0
08494:  BRA    849C
08496:  MOVLB  0
08498:  GOTO   86D6
0849C:  MOVLB  0
....................             step_in_packet++, iv_index++) {
....................             data_packet.data.iv_data[step_in_packet].data[0] =
....................                 (port_data_ptr->data_buffer[iv_index].voltage >> 4) & 0xFF;
0849E:  MOVFF  AAD,AAF
084A2:  MOVFF  AAC,AAE
084A6:  MOVLB  A
084A8:  CLRF   xB1
084AA:  MOVLW  03
084AC:  MOVWF  xB0
084AE:  MOVLB  0
084B0:  CALL   7DD2
084B4:  MOVFF  02,AAF
084B8:  MOVFF  01,AAE
084BC:  MOVLW  67
084BE:  MOVLB  A
084C0:  ADDWF  xAE,W
084C2:  MOVWF  01
084C4:  MOVLW  0A
084C6:  ADDWFC xAF,W
084C8:  MOVWF  03
084CA:  MOVF   01,W
084CC:  MOVWF  xB0
084CE:  MOVFF  03,AB1
084D2:  RLCF   xA8,W
084D4:  MOVWF  02
084D6:  RLCF   xA9,W
084D8:  MOVWF  03
084DA:  RLCF   02,F
084DC:  RLCF   03,F
084DE:  MOVLW  FC
084E0:  ANDWF  02,F
084E2:  MOVF   02,W
084E4:  ADDLW  03
084E6:  MOVWF  xB2
084E8:  MOVLW  00
084EA:  ADDWFC 03,W
084EC:  MOVWF  xB3
084EE:  MOVF   x65,W
084F0:  ADDWF  xB2,W
084F2:  MOVWF  FE9
084F4:  MOVF   x66,W
084F6:  ADDWFC xB3,W
084F8:  MOVWF  FEA
084FA:  MOVFF  FEC,AB5
084FE:  MOVF   FED,F
08500:  MOVFF  FEF,AB4
08504:  RRCF   xB5,F
08506:  RRCF   xB4,F
08508:  RRCF   xB5,F
0850A:  RRCF   xB4,F
0850C:  RRCF   xB5,F
0850E:  RRCF   xB4,F
08510:  RRCF   xB5,F
08512:  RRCF   xB4,F
08514:  MOVLW  0F
08516:  ANDWF  xB5,F
08518:  MOVF   xB4,W
0851A:  MOVWF  00
0851C:  CLRF   03
0851E:  MOVF   00,W
08520:  MOVWF  xB4
08522:  MOVFF  03,AB5
08526:  MOVFF  AB1,FEA
0852A:  MOVFF  AB0,FE9
0852E:  MOVFF  AB4,FEF
....................             data_packet.data.iv_data[step_in_packet].data[1] =
....................                 ((port_data_ptr->data_buffer[iv_index].voltage & 0x0F) << 4) |
....................                 ((port_data_ptr->data_buffer[iv_index].current >> 8) & 0x0F);
08532:  MOVFF  AAD,AAF
08536:  MOVFF  AAC,AAE
0853A:  CLRF   xB1
0853C:  MOVLW  03
0853E:  MOVWF  xB0
08540:  MOVLB  0
08542:  CALL   7DD2
08546:  MOVFF  02,AAF
0854A:  MOVFF  01,AAE
0854E:  MOVLW  01
08550:  MOVLB  A
08552:  ADDWF  xAE,W
08554:  MOVWF  01
08556:  MOVLW  00
08558:  ADDWFC xAF,W
0855A:  MOVWF  03
0855C:  MOVF   01,W
0855E:  ADDLW  67
08560:  MOVWF  01
08562:  MOVLW  0A
08564:  ADDWFC 03,F
08566:  MOVF   01,W
08568:  MOVWF  xAE
0856A:  MOVFF  03,AAF
0856E:  RLCF   xA8,W
08570:  MOVWF  02
08572:  RLCF   xA9,W
08574:  MOVWF  03
08576:  RLCF   02,F
08578:  RLCF   03,F
0857A:  MOVLW  FC
0857C:  ANDWF  02,F
0857E:  MOVF   02,W
08580:  ADDLW  03
08582:  MOVWF  xB0
08584:  MOVLW  00
08586:  ADDWFC 03,W
08588:  MOVWF  xB1
0858A:  MOVF   x65,W
0858C:  ADDWF  xB0,W
0858E:  MOVWF  FE9
08590:  MOVF   x66,W
08592:  ADDWFC xB1,W
08594:  MOVWF  FEA
08596:  MOVFF  FEC,AB3
0859A:  MOVF   FED,F
0859C:  MOVFF  FEF,AB2
085A0:  MOVLW  0F
085A2:  ANDWF  xB2,F
085A4:  CLRF   xB3
085A6:  RLCF   xB2,F
085A8:  RLCF   xB3,F
085AA:  RLCF   xB2,F
085AC:  RLCF   xB3,F
085AE:  RLCF   xB2,F
085B0:  RLCF   xB3,F
085B2:  RLCF   xB2,F
085B4:  RLCF   xB3,F
085B6:  MOVLW  F0
085B8:  ANDWF  xB2,F
085BA:  RLCF   xA8,W
085BC:  MOVWF  02
085BE:  RLCF   xA9,W
085C0:  MOVWF  03
085C2:  RLCF   02,F
085C4:  RLCF   03,F
085C6:  MOVLW  FC
085C8:  ANDWF  02,F
085CA:  MOVF   02,W
085CC:  ADDLW  03
085CE:  MOVWF  xB4
085D0:  MOVLW  00
085D2:  ADDWFC 03,W
085D4:  MOVWF  xB5
085D6:  MOVLW  02
085D8:  ADDWF  xB4,W
085DA:  MOVWF  01
085DC:  MOVLW  00
085DE:  ADDWFC xB5,W
085E0:  MOVWF  03
085E2:  MOVF   01,W
085E4:  ADDWF  x65,W
085E6:  MOVWF  FE9
085E8:  MOVF   x66,W
085EA:  ADDWFC 03,W
085EC:  MOVWF  FEA
085EE:  MOVFF  FEC,AB5
085F2:  MOVF   FED,F
085F4:  MOVFF  FEF,AB4
085F8:  MOVFF  AB5,AB4
085FC:  CLRF   xB5
085FE:  MOVF   xB4,W
08600:  ANDLW  0F
08602:  MOVWF  00
08604:  CLRF   03
08606:  MOVF   00,W
08608:  IORWF  xB2,W
0860A:  MOVWF  00
0860C:  MOVF   03,W
0860E:  IORWF  xB3,W
08610:  MOVWF  03
08612:  MOVF   00,W
08614:  MOVWF  xB2
08616:  MOVFF  03,AB3
0861A:  MOVFF  AAF,FEA
0861E:  MOVFF  AAE,FE9
08622:  MOVFF  AB2,FEF
....................             data_packet.data.iv_data[step_in_packet].data[2] =
....................                 port_data_ptr->data_buffer[iv_index].current & 0xFF;
08626:  MOVFF  AAD,AAF
0862A:  MOVFF  AAC,AAE
0862E:  CLRF   xB1
08630:  MOVLW  03
08632:  MOVWF  xB0
08634:  MOVLB  0
08636:  CALL   7DD2
0863A:  MOVFF  02,AAF
0863E:  MOVFF  01,AAE
08642:  MOVLW  02
08644:  MOVLB  A
08646:  ADDWF  xAE,W
08648:  MOVWF  01
0864A:  MOVLW  00
0864C:  ADDWFC xAF,W
0864E:  MOVWF  03
08650:  MOVF   01,W
08652:  ADDLW  67
08654:  MOVWF  01
08656:  MOVLW  0A
08658:  ADDWFC 03,F
0865A:  MOVF   01,W
0865C:  MOVWF  xAE
0865E:  MOVFF  03,AAF
08662:  RLCF   xA8,W
08664:  MOVWF  02
08666:  RLCF   xA9,W
08668:  MOVWF  03
0866A:  RLCF   02,F
0866C:  RLCF   03,F
0866E:  MOVLW  FC
08670:  ANDWF  02,F
08672:  MOVF   02,W
08674:  ADDLW  03
08676:  MOVWF  xB0
08678:  MOVLW  00
0867A:  ADDWFC 03,W
0867C:  MOVWF  xB1
0867E:  MOVLW  02
08680:  ADDWF  xB0,W
08682:  MOVWF  01
08684:  MOVLW  00
08686:  ADDWFC xB1,W
08688:  MOVWF  03
0868A:  MOVF   01,W
0868C:  ADDWF  x65,W
0868E:  MOVWF  FE9
08690:  MOVF   x66,W
08692:  ADDWFC 03,W
08694:  MOVWF  FEA
08696:  MOVFF  FEC,AB1
0869A:  MOVF   FED,F
0869C:  MOVFF  FEF,AB0
086A0:  MOVF   xB0,W
086A2:  MOVWF  00
086A4:  CLRF   03
086A6:  MOVF   00,W
086A8:  MOVWF  xB0
086AA:  MOVFF  03,AB1
086AE:  MOVFF  AAF,FEA
086B2:  MOVFF  AAE,FE9
086B6:  MOVFF  AB0,FEF
086BA:  MOVLB  0
086BC:  MOVLB  A
086BE:  MOVF   xAD,W
086C0:  MOVWF  03
086C2:  MOVF   xAC,W
086C4:  INCF   xAC,F
086C6:  BTFSC  FD8.2
086C8:  INCF   xAD,F
086CA:  INCF   xA8,F
086CC:  BTFSC  FD8.2
086CE:  INCF   xA9,F
086D0:  MOVLB  0
086D2:  GOTO   843C
....................         }
.................... 
....................         // 残り領域を 0x00 で埋める（未使用部分）
....................         for (; step_in_packet < 21; step_in_packet++) {
086D6:  MOVLB  A
086D8:  MOVF   xAD,F
086DA:  BTFSC  FD8.2
086DC:  BRA    86E4
086DE:  MOVLB  0
086E0:  GOTO   87A6
086E4:  MOVLB  0
086E6:  MOVLB  A
086E8:  MOVF   xAC,W
086EA:  SUBLW  14
086EC:  BTFSC  FD8.0
086EE:  BRA    86F6
086F0:  MOVLB  0
086F2:  GOTO   87A6
086F6:  MOVLB  0
....................             data_packet.data.iv_data[step_in_packet].data[0] = 0x00;
086F8:  MOVFF  AAD,AAF
086FC:  MOVFF  AAC,AAE
08700:  MOVLB  A
08702:  CLRF   xB1
08704:  MOVLW  03
08706:  MOVWF  xB0
08708:  MOVLB  0
0870A:  CALL   7DD2
0870E:  MOVFF  02,AAF
08712:  MOVFF  01,AAE
08716:  MOVLW  67
08718:  MOVLB  A
0871A:  ADDWF  xAE,W
0871C:  MOVWF  FE9
0871E:  MOVLW  0A
08720:  ADDWFC xAF,W
08722:  MOVWF  FEA
08724:  CLRF   FEF
....................             data_packet.data.iv_data[step_in_packet].data[1] = 0x00;
08726:  MOVFF  AAD,AAF
0872A:  MOVFF  AAC,AAE
0872E:  CLRF   xB1
08730:  MOVLW  03
08732:  MOVWF  xB0
08734:  MOVLB  0
08736:  CALL   7DD2
0873A:  MOVFF  02,AAF
0873E:  MOVFF  01,AAE
08742:  MOVLW  01
08744:  MOVLB  A
08746:  ADDWF  xAE,W
08748:  MOVWF  01
0874A:  MOVLW  00
0874C:  ADDWFC xAF,W
0874E:  MOVWF  03
08750:  MOVF   01,W
08752:  ADDLW  67
08754:  MOVWF  FE9
08756:  MOVLW  0A
08758:  ADDWFC 03,W
0875A:  MOVWF  FEA
0875C:  CLRF   FEF
....................             data_packet.data.iv_data[step_in_packet].data[2] = 0x00;
0875E:  MOVFF  AAD,AAF
08762:  MOVFF  AAC,AAE
08766:  CLRF   xB1
08768:  MOVLW  03
0876A:  MOVWF  xB0
0876C:  MOVLB  0
0876E:  CALL   7DD2
08772:  MOVFF  02,AAF
08776:  MOVFF  01,AAE
0877A:  MOVLW  02
0877C:  MOVLB  A
0877E:  ADDWF  xAE,W
08780:  MOVWF  01
08782:  MOVLW  00
08784:  ADDWFC xAF,W
08786:  MOVWF  03
08788:  MOVF   01,W
0878A:  ADDLW  67
0878C:  MOVWF  FE9
0878E:  MOVLW  0A
08790:  ADDWFC 03,W
08792:  MOVWF  FEA
08794:  CLRF   FEF
08796:  MOVLB  0
08798:  MOVLB  A
0879A:  INCF   xAC,F
0879C:  BTFSC  FD8.2
0879E:  INCF   xAD,F
087A0:  MOVLB  0
087A2:  GOTO   86D6
....................         }
.................... 
....................         // フラッシュに書き込み
....................         if (port_data_ptr->port_num == 1) {
087A6:  MOVLB  A
087A8:  MOVF   x65,W
087AA:  MOVWF  FE9
087AC:  MOVF   x66,W
087AE:  MOVWF  FEA
087B0:  DECFSZ FEF,W
087B2:  BRA    87B8
087B4:  BRA    87BE
087B6:  MOVLB  0
087B8:  MOVLB  0
087BA:  GOTO   87EE
087BE:  MOVLB  0
....................             misf_write_data(FLASH_ID_IV1_DATA, data_packet_ptr->raw, PACKET_SIZE - 1);
087C0:  MOVLB  A
087C2:  MOVF   xA6,W
087C4:  MOVWF  01
087C6:  MOVF   xA7,W
087C8:  MOVWF  03
087CA:  MOVF   01,W
087CC:  MOVWF  xAE
087CE:  MOVFF  03,AAF
087D2:  MOVLW  04
087D4:  MOVWF  xB0
087D6:  MOVFF  AAF,AB2
087DA:  MOVFF  AAE,AB1
087DE:  CLRF   xB4
087E0:  MOVLW  3F
087E2:  MOVWF  xB3
087E4:  MOVLB  0
087E6:  CALL   43E4
....................         } else if (port_data_ptr->port_num == 2) {
087EA:  GOTO   8832
087EE:  MOVLB  A
087F0:  MOVF   x65,W
087F2:  MOVWF  FE9
087F4:  MOVF   x66,W
087F6:  MOVWF  FEA
087F8:  MOVF   FEF,W
087FA:  SUBLW  02
087FC:  BTFSC  FD8.2
087FE:  BRA    8806
08800:  MOVLB  0
08802:  GOTO   8832
08806:  MOVLB  0
....................             misf_write_data(FLASH_ID_IV2_DATA, data_packet_ptr->raw, PACKET_SIZE - 1);
08808:  MOVLB  A
0880A:  MOVF   xA6,W
0880C:  MOVWF  01
0880E:  MOVF   xA7,W
08810:  MOVWF  03
08812:  MOVF   01,W
08814:  MOVWF  xAE
08816:  MOVFF  03,AAF
0881A:  MOVLW  06
0881C:  MOVWF  xB0
0881E:  MOVFF  AAF,AB2
08822:  MOVFF  AAE,AB1
08826:  CLRF   xB4
08828:  MOVLW  3F
0882A:  MOVWF  xB3
0882C:  MOVLB  0
0882E:  CALL   43E4
....................         }
08832:  GOTO   83CC
....................     }
08836:  RETURN 0
.................... }
.................... 
.................... void log_meas_data_with_print(iv_env_t *measured_data_ptr, sweep_config_t *port_data_ptr)
.................... {
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; 
....................     unsigned int8 packet_index = 0;
....................     int1 first_packet = true; // 最初のパケットフラグ
.................... 
.................... 
....................     unsigned int16 sweep_index = 0;
....................     // ==== データステップ書き込み ====
....................     for (unsigned int16 i = 0; i < port_data_ptr->sweep_step; i++) {
....................         unsigned int16 data0 = port_data_ptr->data_buffer[i].voltage;
....................         unsigned int16 data1 = port_data_ptr->data_buffer[i].current;
.................... 
....................         // パケットがいっぱいになる前にヘッダ＋環境データを入れる
....................         if (packet_index == 0) {
....................             unsigned int8 idx = 0;
....................             if (first_packet) {
....................                 packetdata[idx++] = START_MAKER;  // 最初のパケットだけ
....................                 first_packet = false;
....................             }
.................... 
....................             // timeヘッダ
....................             packetdata[idx++] = (measured_data_ptr->time >> 24) & 0xFF;
....................             packetdata[idx++] = (measured_data_ptr->time >> 16) & 0xFF;
....................             packetdata[idx++] = (measured_data_ptr->time >> 8) & 0xFF;
....................             packetdata[idx++] = measured_data_ptr->time & 0xFF;
.................... 
....................             // 環境データ
....................             packetdata[idx++] = (measured_data_ptr->pd >> 4) & 0xFF;
....................             packetdata[idx++] = ((measured_data_ptr->pd & 0x0F) << 4) | ((measured_data_ptr->temp_py_top >> 8) & 0x0F);
....................             packetdata[idx++] = measured_data_ptr->temp_py_top & 0xFF;
....................             packetdata[idx++] = (measured_data_ptr->temp_py_bot >> 4) & 0xFF;
....................             packetdata[idx++] = ((measured_data_ptr->temp_py_bot & 0x0F) << 4) | ((measured_data_ptr->temp_mis7 >> 8) & 0x0F);
....................             packetdata[idx++] = measured_data_ptr->temp_mis7 & 0xFF;
.................... 
....................             packet_index = idx;
....................         }
.................... 
....................         // パケットに収まるかチェック
....................         if (packet_index + DATA_SIZE_PER_STEP >= PACKET_SIZE) {
....................             // フラッシュ書き込み
....................             unsigned int32 write_address = MISF_CIGS_IV1_DATA_START;
....................             switch (port_data_ptr->port_num) {
....................                 case 1:
....................                     write_address += iv1_data_ptr->used_counter;
....................                     write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................                     iv1_data_ptr->used_counter += PACKET_SIZE;
....................                     iv1_data_ptr->uncopied_counter += PACKET_SIZE;
....................                     break;
....................                 case 2:
....................                     write_address += iv2_data_ptr->used_counter;
....................                     write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................                     iv2_data_ptr->used_counter += PACKET_SIZE;
....................                     iv2_data_ptr->uncopied_counter += PACKET_SIZE;
....................                     break;
....................                 default:
....................                     break;
....................             }
.................... 
....................             // デバッグ表示
....................             fprintf(PC, "\r\n");
....................             for (unsigned int32 j = 0; j < PACKET_SIZE; j++) {
....................                 fprintf(PC, "%02X ", packetdata[j]);
....................             }
.................... 
....................             // パケット初期化
....................             packet_index = 0;
....................             memset(packetdata, 0x00, PACKET_SIZE);
....................         }
.................... 
....................         // データ書き込み
....................         packetdata[packet_index++] = (data0 >> 4) & 0xFF;
....................         packetdata[packet_index++] = ((data0 & 0x0F) << 4) | ((data1 >> 8) & 0x0F);
....................         packetdata[packet_index++] = data1 & 0xFF;
....................     }
.................... 
....................     // 最後に残ったデータの処理
....................     if (packet_index > 0) {
....................         for (unsigned int8 j = packet_index; j < PACKET_SIZE - 1; j++) {
....................             packetdata[j] = 0x00;
....................         }
....................         packetdata[PACKET_SIZE - 1] = calc_crc8(packetdata, PACKET_SIZE - 1);
....................       unsigned int32 write_address;
....................         switch (port_data_ptr->port_num)
....................         {
....................         case 1:
....................             write_address = MISF_CIGS_IV1_DATA_START + iv1_data_ptr->used_counter;
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................             iv1_data_ptr->used_counter += PACKET_SIZE;
....................             iv1_data_ptr->uncopied_counter += PACKET_SIZE;
....................             break;
....................         case 2:
....................          write_address = MISF_CIGS_IV2_DATA_START + iv2_data_ptr->used_counter;
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................             iv2_data_ptr->used_counter += PACKET_SIZE;
....................             iv2_data_ptr->uncopied_counter += PACKET_SIZE;
....................             break;
....................         default:
....................             break;
....................         }
.................... 
....................     }
....................                 // デバッグ表示
....................     fprintf(PC, "\r\n");
....................     for (unsigned int32 j = 0; j < PACKET_SIZE; j++) {
....................         fprintf(PC, "%02X ", packetdata[j]);
....................     }
....................     // fprintf(PC, "End CIGS data conversion\r\n");
....................     misf_update_address_area(); // Write the mission flash address area
.................... }
.................... 
.................... 
.................... iv_env_t create_meas_data()
.................... {
....................     iv_env_t data;
....................     memset(&data, 0, sizeof(data));
*
07D40:  MOVLW  0A
07D42:  MOVWF  FEA
07D44:  MOVLW  69
07D46:  MOVWF  FE9
07D48:  CLRF   00
07D4A:  CLRF   02
07D4C:  MOVLW  0C
07D4E:  MOVWF  01
07D50:  CALL   2B06
....................     data.time           = get_current_sec();
07D54:  CALL   3802
07D58:  MOVFF  03,A6C
07D5C:  MOVFF  02,A6B
07D60:  MOVFF  01,A6A
07D64:  MOVFF  00,A69
....................     data.temp_py_top    = ad7490_read(ADC_TEMP_PY_TOP);
07D68:  MOVLW  0D
07D6A:  MOVLB  A
07D6C:  MOVWF  x75
07D6E:  MOVLB  0
07D70:  CALL   209A
07D74:  MOVFF  02,A70
07D78:  MOVFF  01,A6F
....................     data.temp_py_bot    = ad7490_read(ADC_TEMP_PY_BOT);
07D7C:  MOVLW  0E
07D7E:  MOVLB  A
07D80:  MOVWF  x75
07D82:  MOVLB  0
07D84:  CALL   209A
07D88:  MOVFF  02,A72
07D8C:  MOVFF  01,A71
....................     data.temp_mis7      = ad7490_read(ADC_TEMP_MIS7);
07D90:  MOVLW  0C
07D92:  MOVLB  A
07D94:  MOVWF  x75
07D96:  MOVLB  0
07D98:  CALL   209A
07D9C:  MOVFF  02,A74
07DA0:  MOVFF  01,A73
....................     data.pd             = ad7490_read(ADC_PD);
07DA4:  MOVLW  0F
07DA6:  MOVLB  A
07DA8:  MOVWF  x75
07DAA:  MOVLB  0
07DAC:  CALL   209A
07DB0:  MOVFF  02,A6E
07DB4:  MOVFF  01,A6D
....................     return data;
07DB8:  MOVLW  69
07DBA:  MOVWF  01
07DBC:  MOVLW  0A
07DBE:  MOVWF  02
07DC0:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "domain/mmj_cigs_piclog.c"
.................... #include "mmj_cigs_piclog.h"                          // 同じフォルダのヘッダー
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/timer.h"                   // タイマーライブラリ  
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... 
.................... unsigned int32 get_current_msec();
.................... void set_current_msec(unsigned int32 msec);
.................... void add_current_msec(unsigned int32 msec);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "mmj_cigs_flash.h"                 // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"               // フラッシュ操作キュー
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                 // フラッシュデバイス
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // #define PICLOG_DEBUG
.................... #define MISSION_ID_PICLOG 0x03  // PICLOGミッションID
.................... 
.................... void piclog_make(int8 function, int8 parameter)
*
04C1A:  MOVLW  02
04C1C:  MOVLB  2
04C1E:  MOVWF  x8D
04C20:  MOVLW  86
04C22:  MOVWF  x8C
.................... {
....................     piclog_t piclog;
....................     piclog_t *piclog_ptr = &piclog;
....................     memset(piclog_ptr, 0x00, PICLOG_PACKET_SIZE);
04C24:  MOVFF  28D,FEA
04C28:  MOVFF  28C,FE9
04C2C:  CLRF   00
04C2E:  CLRF   02
04C30:  MOVLW  06
04C32:  MOVWF  01
04C34:  MOVLB  0
04C36:  CALL   2B06
....................     piclog_ptr->fields.time = get_current_sec();
04C3A:  MOVLB  2
04C3C:  MOVF   x8C,W
04C3E:  MOVWF  01
04C40:  MOVF   x8D,W
04C42:  MOVWF  03
04C44:  MOVF   01,W
04C46:  MOVWF  x8F
04C48:  MOVFF  03,290
04C4C:  MOVLB  0
04C4E:  CALL   3802
04C52:  MOVFF  290,FEA
04C56:  MOVFF  28F,FE9
04C5A:  MOVFF  00,FEF
04C5E:  MOVFF  01,FEC
04C62:  MOVFF  02,FEC
04C66:  MOVFF  03,FEC
04C6A:  MOVF   FED,F
04C6C:  MOVF   FED,F
04C6E:  MOVF   FED,F
....................     piclog_ptr->fields.function = function;
04C70:  MOVLW  04
04C72:  MOVLB  2
04C74:  ADDWF  x8C,W
04C76:  MOVWF  FE9
04C78:  MOVLW  00
04C7A:  ADDWFC x8D,W
04C7C:  MOVWF  FEA
04C7E:  MOVFF  284,FEF
....................     piclog_ptr->fields.parameter = parameter;
04C82:  MOVLW  05
04C84:  ADDWF  x8C,W
04C86:  MOVWF  FE9
04C88:  MOVLW  00
04C8A:  ADDWFC x8D,W
04C8C:  MOVWF  FEA
04C8E:  MOVFF  285,FEF
.................... 
....................     printf("[PICLOG] : ");
04C92:  MOVLW  FE
04C94:  MOVWF  FF6
04C96:  MOVLW  05
04C98:  MOVWF  FF7
04C9A:  MOVLW  00
04C9C:  MOVWF  FF8
04C9E:  MOVLB  0
04CA0:  CALL   1EDC
....................     for (int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
04CA4:  MOVLB  2
04CA6:  CLRF   x8E
04CA8:  MOVLB  0
04CAA:  MOVLB  2
04CAC:  MOVF   x8E,W
04CAE:  SUBLW  05
04CB0:  BTFSC  FD8.0
04CB2:  BRA    4CBA
04CB4:  MOVLB  0
04CB6:  GOTO   4CF6
04CBA:  MOVLB  0
....................         printf("%02X ", piclog_ptr->bytes[i]);
04CBC:  MOVLB  2
04CBE:  MOVF   x8E,W
04CC0:  ADDWF  x8C,W
04CC2:  MOVWF  FE9
04CC4:  MOVLW  00
04CC6:  ADDWFC x8D,W
04CC8:  MOVWF  FEA
04CCA:  MOVFF  FEF,28F
04CCE:  MOVFF  28F,A62
04CD2:  MOVLW  37
04CD4:  MOVLB  A
04CD6:  MOVWF  x63
04CD8:  MOVLB  0
04CDA:  CALL   2126
04CDE:  MOVLW  20
04CE0:  BTFSS  FA6.6
04CE2:  GOTO   4CE0
04CE6:  MOVLB  E
04CE8:  MOVWF  xF9
04CEA:  MOVLB  0
04CEC:  MOVLB  2
04CEE:  INCF   x8E,F
04CF0:  MOVLB  0
04CF2:  GOTO   4CAA
....................     }
....................     printf("\r\n");
04CF6:  MOVLW  0D
04CF8:  BTFSS  FA6.6
04CFA:  GOTO   4CF8
04CFE:  MOVLB  E
04D00:  MOVWF  xF9
04D02:  MOVLW  0A
04D04:  MOVLB  0
04D06:  BTFSS  FA6.6
04D08:  GOTO   4D06
04D0C:  MOVLB  E
04D0E:  MOVWF  xF9
.................... 
....................     misf_write_data(FLASH_ID_PICLOG, piclog_ptr->bytes, PICLOG_PACKET_SIZE);
04D10:  MOVLB  2
04D12:  MOVF   x8C,W
04D14:  MOVWF  01
04D16:  MOVF   x8D,W
04D18:  MOVWF  03
04D1A:  MOVF   01,W
04D1C:  MOVWF  x8F
04D1E:  MOVFF  03,290
04D22:  MOVLW  01
04D24:  MOVLB  A
04D26:  MOVWF  xB0
04D28:  MOVFF  290,AB2
04D2C:  MOVFF  28F,AB1
04D30:  CLRF   xB4
04D32:  MOVLW  06
04D34:  MOVWF  xB3
04D36:  MOVLB  0
04D38:  CALL   43E4
04D3C:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "domain/mmj_cigs_smf.c"
.................... #include "mmj_cigs_smf.h"  
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../hal/mmj_cigs_config.h" // int8,int32 型など(CCS C) 依存
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_flash.h"       // MISF_ADDRESS_TABLE, misf_counter_table 依存
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int8 loop_counter;
....................     int8 reserved[3];
.................... } SMF_PARTITION;
.................... 
.................... // パーティション管理構造体
.................... typedef struct {
....................     SMF_PARTITION piclog;     // データテーブル領域は利用しないため削除
....................     SMF_PARTITION env;
....................     SMF_PARTITION iv1_header;
....................     SMF_PARTITION iv1_data;
....................     SMF_PARTITION iv2_header;
....................     SMF_PARTITION iv2_data;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... extern PartitionParam param;  // extern宣言に変更
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         SMF_PARTITION headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table);
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "mmj_cigs_flash.h"
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mt25q.h"              // Flash device definitions
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/tool/smf_queue.h"            // システム設定 
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/tool/calc_tools.h"           // SMF処理関数 
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/mmj_smf_memorymap.h" 
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x06AA1FFF
.................... #define CIGS_ENVIRO_START_ADDRESS 0x06AA2000
.................... #define CIGS_ENVIRO_END_ADDRESS 0x06B41FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS 0x06B42000
.................... #define CIGS_IV1_HEADER_END_ADDRESS 0x06BE1FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS 0x06BE2000
.................... #define CIGS_IV1_DATA_END_ADDRESS 0x06FE2FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS 0x06FE3000
.................... #define CIGS_IV2_HEADER_END_ADDRESS 0x07082FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS 0x07083000
.................... #define CIGS_IV2_DATA_END_ADDRESS 0x07483FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... #define CRC_RETRY_COUNT 5     // CRC検証のリトライ回数 (smf_queue.hの値と整合するなら一元化検討)
.................... 
.................... 
.................... 
.................... PartitionParam param = {0};
.................... 
.................... 
.................... const ADDRESS_AREA_T SMF_ADDRESS_TABLE[FLASH_ID_COUNT] = {
....................     { CIGS_DATA_TABLE_START_ADDRESS,   CIGS_DATA_TABLE_END_ADDRESS,   MISF_CIGS_DATA_TABLE_SIZE },
....................     { CIGS_PICLOG_START_ADDRESS,       CIGS_PICLOG_END_ADDRESS,       MISF_CIGS_PICLOG_SIZE },
....................     { CIGS_ENVIRO_START_ADDRESS,       CIGS_ENVIRO_END_ADDRESS,       MISF_CIGS_ENVIRO_SIZE },
....................     { CIGS_IV1_HEADER_START_ADDRESS,   CIGS_IV1_HEADER_END_ADDRESS,   MISF_CIGS_IV1_HEADER_SIZE },
....................     { CIGS_IV1_DATA_START_ADDRESS,     CIGS_IV1_DATA_END_ADDRESS,     MISF_CIGS_IV1_DATA_SIZE },
....................     { CIGS_IV2_HEADER_START_ADDRESS,   CIGS_IV2_HEADER_END_ADDRESS,   MISF_CIGS_IV2_HEADER_SIZE },
....................     { CIGS_IV2_DATA_START_ADDRESS,     CIGS_IV2_DATA_END_ADDRESS,     MISF_CIGS_IV2_DATA_SIZE }
.................... };
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void smf_data_table_init()
.................... {
....................     fprintf(PC, "SMF Data Table Initialize\r\n");
*
07470:  MOVLW  0A
07472:  MOVWF  FF6
07474:  MOVLW  06
07476:  MOVWF  FF7
07478:  MOVLW  00
0747A:  MOVWF  FF8
0747C:  CALL   1EDC
....................     for ( unsigned int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_IV2_DATA_END_ADDRESS; address += SUBSECTOR_SIZE )
07480:  MOVLW  06
07482:  MOVLB  2
07484:  MOVWF  xD7
07486:  MOVLW  AA
07488:  MOVWF  xD6
0748A:  CLRF   xD5
0748C:  CLRF   xD4
0748E:  MOVLB  0
07490:  MOVLB  2
07492:  MOVF   xD7,W
07494:  SUBLW  07
07496:  BTFSC  FD8.0
07498:  BRA    74A0
0749A:  MOVLB  0
0749C:  GOTO   7522
074A0:  MOVLB  0
074A2:  BTFSS  FD8.2
074A4:  GOTO   74EA
074A8:  MOVLB  2
074AA:  MOVF   xD6,W
074AC:  SUBLW  48
074AE:  BTFSC  FD8.0
074B0:  BRA    74B8
074B2:  MOVLB  0
074B4:  GOTO   7522
074B8:  MOVLB  0
074BA:  BTFSS  FD8.2
074BC:  GOTO   74EA
074C0:  MOVLB  2
074C2:  MOVF   xD5,W
074C4:  SUBLW  3F
074C6:  BTFSC  FD8.0
074C8:  BRA    74D0
074CA:  MOVLB  0
074CC:  GOTO   7522
074D0:  MOVLB  0
074D2:  BTFSS  FD8.2
074D4:  GOTO   74EA
074D8:  MOVLB  2
074DA:  MOVF   xD4,W
074DC:  SUBLW  FE
074DE:  BTFSC  FD8.0
074E0:  BRA    74E8
074E2:  MOVLB  0
074E4:  GOTO   7522
074E8:  MOVLB  0
....................     {
....................         subsector_4kByte_erase(smf, address);
074EA:  MOVFF  119,31B
074EE:  MOVFF  118,31A
074F2:  MOVFF  117,319
074F6:  MOVFF  116,318
074FA:  MOVFF  2D7,31F
074FE:  MOVFF  2D6,31E
07502:  MOVFF  2D5,31D
07506:  MOVFF  2D4,31C
0750A:  CALL   56B4
0750E:  MOVLW  10
07510:  MOVLB  2
07512:  ADDWF  xD5,F
07514:  MOVLW  00
07516:  ADDWFC xD6,F
07518:  MOVLW  00
0751A:  ADDWFC xD7,F
0751C:  MOVLB  0
0751E:  GOTO   7490
....................     }
....................     smf_data_table_t smf_data_table = {0};
07522:  MOVLB  2
07524:  CLRF   xD8
07526:  CLRF   xD9
07528:  CLRF   xDA
0752A:  CLRF   xDB
0752C:  CLRF   xDC
0752E:  CLRF   xDD
07530:  CLRF   xDE
07532:  CLRF   xDF
07534:  CLRF   xE0
07536:  CLRF   xE1
07538:  CLRF   xE2
0753A:  CLRF   xE3
0753C:  CLRF   xE4
0753E:  CLRF   xE5
07540:  CLRF   xE6
07542:  CLRF   xE7
07544:  CLRF   xE8
07546:  CLRF   xE9
07548:  CLRF   xEA
0754A:  CLRF   xEB
0754C:  CLRF   xEC
0754E:  CLRF   xED
07550:  CLRF   xEE
07552:  CLRF   xEF
07554:  CLRF   xF0
07556:  CLRF   xF1
07558:  CLRF   xF2
0755A:  CLRF   xF3
0755C:  CLRF   xF4
0755E:  CLRF   xF5
07560:  CLRF   xF6
07562:  CLRF   xF7
07564:  CLRF   xF8
07566:  CLRF   xF9
07568:  CLRF   xFA
0756A:  CLRF   xFB
0756C:  CLRF   xFC
0756E:  CLRF   xFD
07570:  CLRF   xFE
07572:  CLRF   xFF
07574:  MOVLB  3
07576:  CLRF   x00
07578:  CLRF   x01
0757A:  CLRF   x02
0757C:  CLRF   x03
0757E:  CLRF   x04
07580:  CLRF   x05
07582:  CLRF   x06
07584:  CLRF   x07
07586:  CLRF   x08
07588:  CLRF   x09
0758A:  CLRF   x0A
0758C:  CLRF   x0B
0758E:  CLRF   x0C
07590:  CLRF   x0D
07592:  CLRF   x0E
07594:  CLRF   x0F
07596:  CLRF   x10
07598:  CLRF   x11
0759A:  CLRF   x12
0759C:  CLRF   x13
0759E:  CLRF   x14
075A0:  CLRF   x15
075A2:  CLRF   x16
075A4:  CLRF   x17
....................     smf_data_table.fields.crc = calc_crc8(smf_data_table.bytes, PACKET_SIZE - 1); // CRCを計算して初期化    
075A6:  MOVLW  02
075A8:  MOVLB  B
075AA:  MOVWF  xD6
075AC:  MOVLW  D8
075AE:  MOVWF  xD5
075B0:  MOVLW  3F
075B2:  MOVWF  xD7
075B4:  MOVLB  0
075B6:  CALL   2D3E
075BA:  MOVFF  01,317
....................     write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table.bytes, PACKET_SIZE);
075BE:  MOVFF  119,B8E
075C2:  MOVFF  118,B8D
075C6:  MOVFF  117,B8C
075CA:  MOVFF  116,B8B
075CE:  MOVLW  06
075D0:  MOVLB  B
075D2:  MOVWF  x92
075D4:  MOVLW  AA
075D6:  MOVWF  x91
075D8:  CLRF   x90
075DA:  CLRF   x8F
075DC:  MOVLW  02
075DE:  MOVWF  x94
075E0:  MOVLW  D8
075E2:  MOVWF  x93
075E4:  CLRF   x96
075E6:  MOVLW  40
075E8:  MOVWF  x95
075EA:  MOVLB  0
075EC:  CALL   3B1A
075F0:  RETURN 0
.................... }
.................... 
.................... void read_smf_header(smf_data_table_t *smf_data_table)
.................... {
....................     int8 retry_count;
.................... 
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
*
0E1C8:  MOVLB  2
0E1CA:  CLRF   xD3
0E1CC:  MOVLB  0
0E1CE:  MOVLB  2
0E1D0:  MOVF   xD3,W
0E1D2:  SUBLW  04
0E1D4:  BTFSC  FD8.0
0E1D6:  BRA    E1DE
0E1D8:  MOVLB  0
0E1DA:  GOTO   E2C8
0E1DE:  MOVLB  0
....................     {
....................         // ヘッダを読み出し
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
0E1E0:  MOVLB  2
0E1E2:  MOVF   xD1,W
0E1E4:  MOVWF  01
0E1E6:  MOVF   xD2,W
0E1E8:  MOVWF  03
0E1EA:  MOVF   01,W
0E1EC:  MOVWF  xD4
0E1EE:  MOVFF  03,2D5
0E1F2:  MOVFF  119,B4A
0E1F6:  MOVFF  118,B49
0E1FA:  MOVFF  117,B48
0E1FE:  MOVFF  116,B47
0E202:  MOVLW  06
0E204:  MOVLB  B
0E206:  MOVWF  x4E
0E208:  MOVLW  AA
0E20A:  MOVWF  x4D
0E20C:  CLRF   x4C
0E20E:  CLRF   x4B
0E210:  MOVFF  2D5,B50
0E214:  MOVFF  2D4,B4F
0E218:  CLRF   x54
0E21A:  CLRF   x53
0E21C:  CLRF   x52
0E21E:  MOVLW  40
0E220:  MOVWF  x51
0E222:  MOVLB  0
0E224:  CALL   2B2A
....................         print_smf_counter_status(smf_data_table);
0E228:  MOVFF  2D2,2D5
0E22C:  MOVFF  2D1,2D4
0E230:  GOTO   DC3A
....................         // CRC検証
....................         if (is_crc_valid(smf_data_table->bytes, PACKET_SIZE-1))
0E234:  MOVLB  2
0E236:  MOVF   xD1,W
0E238:  MOVWF  01
0E23A:  MOVF   xD2,W
0E23C:  MOVWF  03
0E23E:  MOVF   01,W
0E240:  MOVWF  xD4
0E242:  MOVFF  03,2D5
0E246:  MOVFF  2D5,316
0E24A:  MOVFF  2D4,315
0E24E:  MOVLW  3F
0E250:  MOVLB  3
0E252:  MOVWF  x17
0E254:  MOVLB  0
0E256:  CALL   E044
0E25A:  MOVF   01,F
0E25C:  BTFSC  FD8.2
0E25E:  GOTO   E2B2
....................         {
....................             printf("CRC verification passed on attempt %d\r\n", retry_count + 1);
0E262:  MOVLW  01
0E264:  MOVLB  2
0E266:  ADDWF  xD3,W
0E268:  MOVWF  xD4
0E26A:  MOVLW  26
0E26C:  MOVWF  FF6
0E26E:  MOVLW  06
0E270:  MOVWF  FF7
0E272:  MOVLW  00
0E274:  MOVWF  FF8
0E276:  MOVLW  23
0E278:  MOVLB  3
0E27A:  MOVWF  x16
0E27C:  MOVLB  0
0E27E:  CALL   1F12
0E282:  MOVFF  2D4,316
0E286:  MOVLW  18
0E288:  MOVLB  3
0E28A:  MOVWF  x17
0E28C:  MOVLB  0
0E28E:  CALL   E092
0E292:  MOVLW  0D
0E294:  BTFSS  FA6.6
0E296:  GOTO   E294
0E29A:  MOVLB  E
0E29C:  MOVWF  xF9
0E29E:  MOVLW  0A
0E2A0:  MOVLB  0
0E2A2:  BTFSS  FA6.6
0E2A4:  GOTO   E2A2
0E2A8:  MOVLB  E
0E2AA:  MOVWF  xF9
....................             return; // 成功したら終了
0E2AC:  MOVLB  0
0E2AE:  GOTO   E354
....................         }
....................         // NGなら少し待って再試行
....................         delay_ms(5);
0E2B2:  MOVLW  05
0E2B4:  MOVLB  B
0E2B6:  MOVWF  xA3
0E2B8:  MOVLB  0
0E2BA:  CALL   1EAE
0E2BE:  MOVLB  2
0E2C0:  INCF   xD3,F
0E2C2:  MOVLB  0
0E2C4:  GOTO   E1CE
....................     }
.................... 
....................     // ここまで来たら失敗
....................     printf("CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
0E2C8:  MOVLW  4E
0E2CA:  MOVWF  FF6
0E2CC:  MOVLW  06
0E2CE:  MOVWF  FF7
0E2D0:  MOVLW  00
0E2D2:  MOVWF  FF8
0E2D4:  MOVLW  1E
0E2D6:  MOVLB  3
0E2D8:  MOVWF  x16
0E2DA:  MOVLB  0
0E2DC:  CALL   1F12
0E2E0:  MOVLW  05
0E2E2:  MOVLB  3
0E2E4:  MOVWF  x16
0E2E6:  MOVLW  18
0E2E8:  MOVWF  x17
0E2EA:  MOVLB  0
0E2EC:  CALL   E092
0E2F0:  MOVLW  6E
0E2F2:  MOVWF  FF6
0E2F4:  MOVLW  06
0E2F6:  MOVWF  FF7
0E2F8:  MOVLW  00
0E2FA:  MOVWF  FF8
0E2FC:  MOVLW  0B
0E2FE:  MOVLB  3
0E300:  MOVWF  x16
0E302:  MOVLB  0
0E304:  CALL   1F12
.................... 
....................     // 読み込み失敗時は初期化しておく
....................     smf_data_table_init();
0E308:  CALL   7470
....................     read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
0E30C:  MOVLB  2
0E30E:  MOVF   xD1,W
0E310:  MOVWF  01
0E312:  MOVF   xD2,W
0E314:  MOVWF  03
0E316:  MOVF   01,W
0E318:  MOVWF  xD4
0E31A:  MOVFF  03,2D5
0E31E:  MOVFF  119,B4A
0E322:  MOVFF  118,B49
0E326:  MOVFF  117,B48
0E32A:  MOVFF  116,B47
0E32E:  MOVLW  06
0E330:  MOVLB  B
0E332:  MOVWF  x4E
0E334:  MOVLW  AA
0E336:  MOVWF  x4D
0E338:  CLRF   x4C
0E33A:  CLRF   x4B
0E33C:  MOVFF  2D5,B50
0E340:  MOVFF  2D4,B4F
0E344:  CLRF   x54
0E346:  CLRF   x53
0E348:  CLRF   x52
0E34A:  MOVLW  40
0E34C:  MOVWF  x51
0E34E:  MOVLB  0
0E350:  CALL   2B2A
.................... 
....................     return;
0E354:  GOTO   E5B8 (RETURN)
.................... }
.................... 
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table)
0E358:  MOVLB  2
0E35A:  BCF    xD3.0
.................... {
....................     int1 crc_valid = 0;
....................     int8 readdata[PACKET_SIZE];
....................     smf_data_table->fields.crc = calc_crc8(smf_data_table->bytes, PACKET_SIZE - 1); // CRCを更新
0E35C:  MOVLW  3F
0E35E:  ADDWF  xD1,W
0E360:  MOVWF  01
0E362:  MOVLW  00
0E364:  ADDWFC xD2,W
0E366:  MOVWF  03
0E368:  MOVF   01,W
0E36A:  MOVLB  3
0E36C:  MOVWF  x15
0E36E:  MOVFF  03,316
0E372:  MOVLB  2
0E374:  MOVF   xD1,W
0E376:  MOVWF  01
0E378:  MOVF   xD2,W
0E37A:  MOVWF  03
0E37C:  MOVF   01,W
0E37E:  MOVLB  3
0E380:  MOVWF  x17
0E382:  MOVFF  03,318
0E386:  MOVFF  318,BD6
0E38A:  MOVFF  317,BD5
0E38E:  MOVLW  3F
0E390:  MOVLB  B
0E392:  MOVWF  xD7
0E394:  MOVLB  0
0E396:  CALL   2D3E
0E39A:  MOVFF  316,FEA
0E39E:  MOVFF  315,FE9
0E3A2:  MOVFF  01,FEF
.................... 
....................     for (int8 retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
0E3A6:  MOVLB  3
0E3A8:  CLRF   x14
0E3AA:  MOVLB  0
0E3AC:  MOVLB  3
0E3AE:  MOVF   x14,W
0E3B0:  SUBLW  04
0E3B2:  BTFSC  FD8.0
0E3B4:  BRA    E3BC
0E3B6:  MOVLB  0
0E3B8:  GOTO   E4D6
0E3BC:  MOVLB  0
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
0E3BE:  MOVFF  119,31B
0E3C2:  MOVFF  118,31A
0E3C6:  MOVFF  117,319
0E3CA:  MOVFF  116,318
0E3CE:  MOVLW  06
0E3D0:  MOVLB  3
0E3D2:  MOVWF  x1F
0E3D4:  MOVLW  AA
0E3D6:  MOVWF  x1E
0E3D8:  CLRF   x1D
0E3DA:  CLRF   x1C
0E3DC:  MOVLB  0
0E3DE:  CALL   56B4
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE); // ヘッダーを書き込み
0E3E2:  MOVLB  2
0E3E4:  MOVF   xD1,W
0E3E6:  MOVWF  01
0E3E8:  MOVF   xD2,W
0E3EA:  MOVWF  03
0E3EC:  MOVF   01,W
0E3EE:  MOVLB  3
0E3F0:  MOVWF  x15
0E3F2:  MOVFF  03,316
0E3F6:  MOVFF  119,B8E
0E3FA:  MOVFF  118,B8D
0E3FE:  MOVFF  117,B8C
0E402:  MOVFF  116,B8B
0E406:  MOVLW  06
0E408:  MOVLB  B
0E40A:  MOVWF  x92
0E40C:  MOVLW  AA
0E40E:  MOVWF  x91
0E410:  CLRF   x90
0E412:  CLRF   x8F
0E414:  MOVFF  316,B94
0E418:  MOVFF  315,B93
0E41C:  CLRF   x96
0E41E:  MOVLW  40
0E420:  MOVWF  x95
0E422:  MOVLB  0
0E424:  CALL   3B1A
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
0E428:  MOVFF  119,B4A
0E42C:  MOVFF  118,B49
0E430:  MOVFF  117,B48
0E434:  MOVFF  116,B47
0E438:  MOVLW  06
0E43A:  MOVLB  B
0E43C:  MOVWF  x4E
0E43E:  MOVLW  AA
0E440:  MOVWF  x4D
0E442:  CLRF   x4C
0E444:  CLRF   x4B
0E446:  MOVLW  02
0E448:  MOVWF  x50
0E44A:  MOVLW  D4
0E44C:  MOVWF  x4F
0E44E:  CLRF   x54
0E450:  CLRF   x53
0E452:  CLRF   x52
0E454:  MOVLW  40
0E456:  MOVWF  x51
0E458:  MOVLB  0
0E45A:  CALL   2B2A
....................         if (is_crc_valid(readdata, PACKET_SIZE-1))
0E45E:  MOVLW  02
0E460:  MOVLB  3
0E462:  MOVWF  x16
0E464:  MOVLW  D4
0E466:  MOVWF  x15
0E468:  MOVLW  3F
0E46A:  MOVWF  x17
0E46C:  MOVLB  0
0E46E:  CALL   E044
0E472:  MOVF   01,F
0E474:  BTFSC  FD8.2
0E476:  GOTO   E4CC
....................         {
....................             crc_valid = 1; // FIX
0E47A:  MOVLB  2
0E47C:  BSF    xD3.0
....................             fprintf(PC, "CRC verification passed on attempt %d\r\n", retry_count + 1);
0E47E:  MOVLW  01
0E480:  MOVLB  3
0E482:  ADDWF  x14,W
0E484:  MOVWF  x15
0E486:  MOVLW  7A
0E488:  MOVWF  FF6
0E48A:  MOVLW  06
0E48C:  MOVWF  FF7
0E48E:  MOVLW  00
0E490:  MOVWF  FF8
0E492:  MOVLW  23
0E494:  MOVWF  x16
0E496:  MOVLB  0
0E498:  CALL   1F12
0E49C:  MOVFF  315,316
0E4A0:  MOVLW  18
0E4A2:  MOVLB  3
0E4A4:  MOVWF  x17
0E4A6:  MOVLB  0
0E4A8:  CALL   E092
0E4AC:  MOVLW  0D
0E4AE:  BTFSS  FA6.6
0E4B0:  GOTO   E4AE
0E4B4:  MOVLB  E
0E4B6:  MOVWF  xF9
0E4B8:  MOVLW  0A
0E4BA:  MOVLB  0
0E4BC:  BTFSS  FA6.6
0E4BE:  GOTO   E4BC
0E4C2:  MOVLB  E
0E4C4:  MOVWF  xF9
....................             break;
0E4C6:  MOVLB  0
0E4C8:  GOTO   E4D6
....................         }
0E4CC:  MOVLB  3
0E4CE:  INCF   x14,F
0E4D0:  MOVLB  0
0E4D2:  GOTO   E3AC
....................     }
....................     if (!crc_valid)
0E4D6:  MOVLB  2
0E4D8:  BTFSS  xD3.0
0E4DA:  BRA    E4E2
0E4DC:  MOVLB  0
0E4DE:  GOTO   E524
0E4E2:  MOVLB  0
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
0E4E4:  MOVLW  A2
0E4E6:  MOVWF  FF6
0E4E8:  MOVLW  06
0E4EA:  MOVWF  FF7
0E4EC:  MOVLW  00
0E4EE:  MOVWF  FF8
0E4F0:  MOVLW  25
0E4F2:  MOVLB  3
0E4F4:  MOVWF  x16
0E4F6:  MOVLB  0
0E4F8:  CALL   1F12
0E4FC:  MOVLW  05
0E4FE:  MOVLB  3
0E500:  MOVWF  x16
0E502:  MOVLW  18
0E504:  MOVWF  x17
0E506:  MOVLB  0
0E508:  CALL   E092
0E50C:  MOVLW  C9
0E50E:  MOVWF  FF6
0E510:  MOVLW  06
0E512:  MOVWF  FF7
0E514:  MOVLW  00
0E516:  MOVWF  FF8
0E518:  MOVLW  0B
0E51A:  MOVLB  3
0E51C:  MOVWF  x16
0E51E:  MOVLB  0
0E520:  CALL   1F12
....................         // return; 
....................     }
0E524:  GOTO   F008 (RETURN)
.................... }
.................... 
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table)
.................... {
....................     fprintf(PC, "\r\n[SMF Counter Status]\r\n");
*
0DC3A:  MOVLW  D6
0DC3C:  MOVWF  FF6
0DC3E:  MOVLW  06
0DC40:  MOVWF  FF7
0DC42:  MOVLW  00
0DC44:  MOVWF  FF8
0DC46:  CALL   1EDC
....................     fprintf(PC, "PICLOG     : Used=%lu, Uncopied=%u\r\n", smf_data_table->fields.headers[CIGS_PICLOG_DATA].used_size, smf_data_table->fields.headers[CIGS_PICLOG_DATA].loop_counter);
0DC4A:  MOVLW  08
0DC4C:  MOVLB  2
0DC4E:  ADDWF  xD4,W
0DC50:  MOVWF  FE9
0DC52:  MOVLW  00
0DC54:  ADDWFC xD5,W
0DC56:  MOVWF  FEA
0DC58:  MOVFF  FEF,2D6
0DC5C:  MOVFF  FEC,2D7
0DC60:  MOVFF  FEC,2D8
0DC64:  MOVFF  FEC,2D9
0DC68:  MOVF   FED,F
0DC6A:  MOVF   FED,F
0DC6C:  MOVF   FED,F
0DC6E:  MOVLW  0C
0DC70:  ADDWF  xD4,W
0DC72:  MOVWF  FE9
0DC74:  MOVLW  00
0DC76:  ADDWFC xD5,W
0DC78:  MOVWF  FEA
0DC7A:  MOVFF  FEF,2DA
0DC7E:  MOVLW  F0
0DC80:  MOVWF  FF6
0DC82:  MOVLW  06
0DC84:  MOVWF  FF7
0DC86:  MOVLW  00
0DC88:  MOVWF  FF8
0DC8A:  MOVLW  12
0DC8C:  MOVLB  3
0DC8E:  MOVWF  x16
0DC90:  MOVLB  0
0DC92:  CALL   1F12
0DC96:  MOVLW  41
0DC98:  MOVWF  FE9
0DC9A:  MOVFF  2D9,2DE
0DC9E:  MOVFF  2D8,2DD
0DCA2:  MOVFF  2D7,2DC
0DCA6:  MOVFF  2D6,2DB
0DCAA:  CALL   5DF6
0DCAE:  MOVLW  05
0DCB0:  MOVWF  FF6
0DCB2:  MOVLW  07
0DCB4:  MOVWF  FF7
0DCB6:  MOVLW  00
0DCB8:  MOVWF  FF8
0DCBA:  MOVLW  0B
0DCBC:  MOVLB  3
0DCBE:  MOVWF  x16
0DCC0:  MOVLB  0
0DCC2:  CALL   1F12
0DCC6:  MOVFF  2DA,2DB
0DCCA:  MOVLW  1B
0DCCC:  MOVLB  2
0DCCE:  MOVWF  xDC
0DCD0:  MOVLB  0
0DCD2:  CALL   D9F8
0DCD6:  MOVLW  0D
0DCD8:  BTFSS  FA6.6
0DCDA:  GOTO   DCD8
0DCDE:  MOVLB  E
0DCE0:  MOVWF  xF9
0DCE2:  MOVLW  0A
0DCE4:  MOVLB  0
0DCE6:  BTFSS  FA6.6
0DCE8:  GOTO   DCE6
0DCEC:  MOVLB  E
0DCEE:  MOVWF  xF9
....................     fprintf(PC, "ENVIRO     : Used=%lu, Uncopied=%u\r\n", smf_data_table->fields.headers[CIGS_ENVIRO_DATA].used_size, smf_data_table->fields.headers[CIGS_ENVIRO_DATA].loop_counter);
0DCF0:  MOVLW  10
0DCF2:  MOVLB  2
0DCF4:  ADDWF  xD4,W
0DCF6:  MOVWF  FE9
0DCF8:  MOVLW  00
0DCFA:  ADDWFC xD5,W
0DCFC:  MOVWF  FEA
0DCFE:  MOVFF  FEF,2D6
0DD02:  MOVFF  FEC,2D7
0DD06:  MOVFF  FEC,2D8
0DD0A:  MOVFF  FEC,2D9
0DD0E:  MOVF   FED,F
0DD10:  MOVF   FED,F
0DD12:  MOVF   FED,F
0DD14:  MOVLW  14
0DD16:  ADDWF  xD4,W
0DD18:  MOVWF  FE9
0DD1A:  MOVLW  00
0DD1C:  ADDWFC xD5,W
0DD1E:  MOVWF  FEA
0DD20:  MOVFF  FEF,2DA
0DD24:  MOVLW  16
0DD26:  MOVWF  FF6
0DD28:  MOVLW  07
0DD2A:  MOVWF  FF7
0DD2C:  MOVLW  00
0DD2E:  MOVWF  FF8
0DD30:  MOVLW  12
0DD32:  MOVLB  3
0DD34:  MOVWF  x16
0DD36:  MOVLB  0
0DD38:  CALL   1F12
0DD3C:  MOVLW  41
0DD3E:  MOVWF  FE9
0DD40:  MOVFF  2D9,2DE
0DD44:  MOVFF  2D8,2DD
0DD48:  MOVFF  2D7,2DC
0DD4C:  MOVFF  2D6,2DB
0DD50:  CALL   5DF6
0DD54:  MOVLW  2B
0DD56:  MOVWF  FF6
0DD58:  MOVLW  07
0DD5A:  MOVWF  FF7
0DD5C:  MOVLW  00
0DD5E:  MOVWF  FF8
0DD60:  MOVLW  0B
0DD62:  MOVLB  3
0DD64:  MOVWF  x16
0DD66:  MOVLB  0
0DD68:  CALL   1F12
0DD6C:  MOVFF  2DA,2DB
0DD70:  MOVLW  1B
0DD72:  MOVLB  2
0DD74:  MOVWF  xDC
0DD76:  MOVLB  0
0DD78:  CALL   D9F8
0DD7C:  MOVLW  0D
0DD7E:  BTFSS  FA6.6
0DD80:  GOTO   DD7E
0DD84:  MOVLB  E
0DD86:  MOVWF  xF9
0DD88:  MOVLW  0A
0DD8A:  MOVLB  0
0DD8C:  BTFSS  FA6.6
0DD8E:  GOTO   DD8C
0DD92:  MOVLB  E
0DD94:  MOVWF  xF9
....................     fprintf(PC, "IV1_HEADER : Used=%lu, Uncopied=%u\r\n", smf_data_table->fields.headers[CIGS_IV1_HEADER].used_size, smf_data_table->fields.headers[CIGS_IV1_HEADER].loop_counter);
0DD96:  MOVLW  18
0DD98:  MOVLB  2
0DD9A:  ADDWF  xD4,W
0DD9C:  MOVWF  FE9
0DD9E:  MOVLW  00
0DDA0:  ADDWFC xD5,W
0DDA2:  MOVWF  FEA
0DDA4:  MOVFF  FEF,2D6
0DDA8:  MOVFF  FEC,2D7
0DDAC:  MOVFF  FEC,2D8
0DDB0:  MOVFF  FEC,2D9
0DDB4:  MOVF   FED,F
0DDB6:  MOVF   FED,F
0DDB8:  MOVF   FED,F
0DDBA:  MOVLW  1C
0DDBC:  ADDWF  xD4,W
0DDBE:  MOVWF  FE9
0DDC0:  MOVLW  00
0DDC2:  ADDWFC xD5,W
0DDC4:  MOVWF  FEA
0DDC6:  MOVFF  FEF,2DA
0DDCA:  MOVLW  3C
0DDCC:  MOVWF  FF6
0DDCE:  MOVLW  07
0DDD0:  MOVWF  FF7
0DDD2:  MOVLW  00
0DDD4:  MOVWF  FF8
0DDD6:  MOVLW  12
0DDD8:  MOVLB  3
0DDDA:  MOVWF  x16
0DDDC:  MOVLB  0
0DDDE:  CALL   1F12
0DDE2:  MOVLW  41
0DDE4:  MOVWF  FE9
0DDE6:  MOVFF  2D9,2DE
0DDEA:  MOVFF  2D8,2DD
0DDEE:  MOVFF  2D7,2DC
0DDF2:  MOVFF  2D6,2DB
0DDF6:  CALL   5DF6
0DDFA:  MOVLW  51
0DDFC:  MOVWF  FF6
0DDFE:  MOVLW  07
0DE00:  MOVWF  FF7
0DE02:  MOVLW  00
0DE04:  MOVWF  FF8
0DE06:  MOVLW  0B
0DE08:  MOVLB  3
0DE0A:  MOVWF  x16
0DE0C:  MOVLB  0
0DE0E:  CALL   1F12
0DE12:  MOVFF  2DA,2DB
0DE16:  MOVLW  1B
0DE18:  MOVLB  2
0DE1A:  MOVWF  xDC
0DE1C:  MOVLB  0
0DE1E:  CALL   D9F8
0DE22:  MOVLW  0D
0DE24:  BTFSS  FA6.6
0DE26:  GOTO   DE24
0DE2A:  MOVLB  E
0DE2C:  MOVWF  xF9
0DE2E:  MOVLW  0A
0DE30:  MOVLB  0
0DE32:  BTFSS  FA6.6
0DE34:  GOTO   DE32
0DE38:  MOVLB  E
0DE3A:  MOVWF  xF9
....................     fprintf(PC, "IV1_DATA   : Used=%lu, Uncopied=%u\r\n", smf_data_table->fields.headers[CIGS_IV1_DATA].used_size, smf_data_table->fields.headers[CIGS_IV1_DATA].loop_counter);
0DE3C:  MOVLW  20
0DE3E:  MOVLB  2
0DE40:  ADDWF  xD4,W
0DE42:  MOVWF  FE9
0DE44:  MOVLW  00
0DE46:  ADDWFC xD5,W
0DE48:  MOVWF  FEA
0DE4A:  MOVFF  FEF,2D6
0DE4E:  MOVFF  FEC,2D7
0DE52:  MOVFF  FEC,2D8
0DE56:  MOVFF  FEC,2D9
0DE5A:  MOVF   FED,F
0DE5C:  MOVF   FED,F
0DE5E:  MOVF   FED,F
0DE60:  MOVLW  24
0DE62:  ADDWF  xD4,W
0DE64:  MOVWF  FE9
0DE66:  MOVLW  00
0DE68:  ADDWFC xD5,W
0DE6A:  MOVWF  FEA
0DE6C:  MOVFF  FEF,2DA
0DE70:  MOVLW  62
0DE72:  MOVWF  FF6
0DE74:  MOVLW  07
0DE76:  MOVWF  FF7
0DE78:  MOVLW  00
0DE7A:  MOVWF  FF8
0DE7C:  MOVLW  12
0DE7E:  MOVLB  3
0DE80:  MOVWF  x16
0DE82:  MOVLB  0
0DE84:  CALL   1F12
0DE88:  MOVLW  41
0DE8A:  MOVWF  FE9
0DE8C:  MOVFF  2D9,2DE
0DE90:  MOVFF  2D8,2DD
0DE94:  MOVFF  2D7,2DC
0DE98:  MOVFF  2D6,2DB
0DE9C:  CALL   5DF6
0DEA0:  MOVLW  77
0DEA2:  MOVWF  FF6
0DEA4:  MOVLW  07
0DEA6:  MOVWF  FF7
0DEA8:  MOVLW  00
0DEAA:  MOVWF  FF8
0DEAC:  MOVLW  0B
0DEAE:  MOVLB  3
0DEB0:  MOVWF  x16
0DEB2:  MOVLB  0
0DEB4:  CALL   1F12
0DEB8:  MOVFF  2DA,2DB
0DEBC:  MOVLW  1B
0DEBE:  MOVLB  2
0DEC0:  MOVWF  xDC
0DEC2:  MOVLB  0
0DEC4:  CALL   D9F8
0DEC8:  MOVLW  0D
0DECA:  BTFSS  FA6.6
0DECC:  GOTO   DECA
0DED0:  MOVLB  E
0DED2:  MOVWF  xF9
0DED4:  MOVLW  0A
0DED6:  MOVLB  0
0DED8:  BTFSS  FA6.6
0DEDA:  GOTO   DED8
0DEDE:  MOVLB  E
0DEE0:  MOVWF  xF9
....................     fprintf(PC, "IV2_HEADER : Used=%lu, Uncopied=%u\r\n", smf_data_table->fields.headers[CIGS_IV2_HEADER].used_size, smf_data_table->fields.headers[CIGS_IV2_HEADER].loop_counter);
0DEE2:  MOVLW  28
0DEE4:  MOVLB  2
0DEE6:  ADDWF  xD4,W
0DEE8:  MOVWF  FE9
0DEEA:  MOVLW  00
0DEEC:  ADDWFC xD5,W
0DEEE:  MOVWF  FEA
0DEF0:  MOVFF  FEF,2D6
0DEF4:  MOVFF  FEC,2D7
0DEF8:  MOVFF  FEC,2D8
0DEFC:  MOVFF  FEC,2D9
0DF00:  MOVF   FED,F
0DF02:  MOVF   FED,F
0DF04:  MOVF   FED,F
0DF06:  MOVLW  2C
0DF08:  ADDWF  xD4,W
0DF0A:  MOVWF  FE9
0DF0C:  MOVLW  00
0DF0E:  ADDWFC xD5,W
0DF10:  MOVWF  FEA
0DF12:  MOVFF  FEF,2DA
0DF16:  MOVLW  88
0DF18:  MOVWF  FF6
0DF1A:  MOVLW  07
0DF1C:  MOVWF  FF7
0DF1E:  MOVLW  00
0DF20:  MOVWF  FF8
0DF22:  MOVLW  12
0DF24:  MOVLB  3
0DF26:  MOVWF  x16
0DF28:  MOVLB  0
0DF2A:  CALL   1F12
0DF2E:  MOVLW  41
0DF30:  MOVWF  FE9
0DF32:  MOVFF  2D9,2DE
0DF36:  MOVFF  2D8,2DD
0DF3A:  MOVFF  2D7,2DC
0DF3E:  MOVFF  2D6,2DB
0DF42:  CALL   5DF6
0DF46:  MOVLW  9D
0DF48:  MOVWF  FF6
0DF4A:  MOVLW  07
0DF4C:  MOVWF  FF7
0DF4E:  MOVLW  00
0DF50:  MOVWF  FF8
0DF52:  MOVLW  0B
0DF54:  MOVLB  3
0DF56:  MOVWF  x16
0DF58:  MOVLB  0
0DF5A:  CALL   1F12
0DF5E:  MOVFF  2DA,2DB
0DF62:  MOVLW  1B
0DF64:  MOVLB  2
0DF66:  MOVWF  xDC
0DF68:  MOVLB  0
0DF6A:  CALL   D9F8
0DF6E:  MOVLW  0D
0DF70:  BTFSS  FA6.6
0DF72:  GOTO   DF70
0DF76:  MOVLB  E
0DF78:  MOVWF  xF9
0DF7A:  MOVLW  0A
0DF7C:  MOVLB  0
0DF7E:  BTFSS  FA6.6
0DF80:  GOTO   DF7E
0DF84:  MOVLB  E
0DF86:  MOVWF  xF9
....................     fprintf(PC, "IV2_DATA   : Used=%lu, Uncopied=%u\r\n", smf_data_table->fields.headers[CIGS_IV2_DATA].used_size, smf_data_table->fields.headers[CIGS_IV2_DATA].loop_counter);
0DF88:  MOVLW  30
0DF8A:  MOVLB  2
0DF8C:  ADDWF  xD4,W
0DF8E:  MOVWF  FE9
0DF90:  MOVLW  00
0DF92:  ADDWFC xD5,W
0DF94:  MOVWF  FEA
0DF96:  MOVFF  FEF,2D6
0DF9A:  MOVFF  FEC,2D7
0DF9E:  MOVFF  FEC,2D8
0DFA2:  MOVFF  FEC,2D9
0DFA6:  MOVF   FED,F
0DFA8:  MOVF   FED,F
0DFAA:  MOVF   FED,F
0DFAC:  MOVLW  34
0DFAE:  ADDWF  xD4,W
0DFB0:  MOVWF  FE9
0DFB2:  MOVLW  00
0DFB4:  ADDWFC xD5,W
0DFB6:  MOVWF  FEA
0DFB8:  MOVFF  FEF,2DA
0DFBC:  MOVLW  AE
0DFBE:  MOVWF  FF6
0DFC0:  MOVLW  07
0DFC2:  MOVWF  FF7
0DFC4:  MOVLW  00
0DFC6:  MOVWF  FF8
0DFC8:  MOVLW  12
0DFCA:  MOVLB  3
0DFCC:  MOVWF  x16
0DFCE:  MOVLB  0
0DFD0:  CALL   1F12
0DFD4:  MOVLW  41
0DFD6:  MOVWF  FE9
0DFD8:  MOVFF  2D9,2DE
0DFDC:  MOVFF  2D8,2DD
0DFE0:  MOVFF  2D7,2DC
0DFE4:  MOVFF  2D6,2DB
0DFE8:  CALL   5DF6
0DFEC:  MOVLW  C3
0DFEE:  MOVWF  FF6
0DFF0:  MOVLW  07
0DFF2:  MOVWF  FF7
0DFF4:  MOVLW  00
0DFF6:  MOVWF  FF8
0DFF8:  MOVLW  0B
0DFFA:  MOVLB  3
0DFFC:  MOVWF  x16
0DFFE:  MOVLB  0
0E000:  CALL   1F12
0E004:  MOVFF  2DA,2DB
0E008:  MOVLW  1B
0E00A:  MOVLB  2
0E00C:  MOVWF  xDC
0E00E:  MOVLB  0
0E010:  CALL   D9F8
0E014:  MOVLW  0D
0E016:  BTFSS  FA6.6
0E018:  GOTO   E016
0E01C:  MOVLB  E
0E01E:  MOVWF  xF9
0E020:  MOVLW  0A
0E022:  MOVLB  0
0E024:  BTFSS  FA6.6
0E026:  GOTO   E024
0E02A:  MOVLB  E
0E02C:  MOVWF  xF9
....................     fprintf(PC, "------------------------------\r\n\r\n");
0E02E:  MOVLW  D4
0E030:  MOVWF  FF6
0E032:  MOVLW  07
0E034:  MOVWF  FF7
0E036:  MOVLW  00
0E038:  MOVWF  FF8
0E03A:  MOVLB  0
0E03C:  CALL   1EDC
0E040:  GOTO   E234 (RETURN)
.................... }
.................... 
.................... void smf_write(FlashOperationStruct *smf_data_ptr)
.................... {
....................     fprintf(PC, "\r\n_______________________________\r\n");
*
0E528:  MOVLW  F8
0E52A:  MOVWF  FF6
0E52C:  MOVLW  07
0E52E:  MOVWF  FF7
0E530:  MOVLW  00
0E532:  MOVWF  FF8
0E534:  CALL   1EDC
....................     fprintf(PC, "_________Start copy_data_________\r\n");
0E538:  MOVLW  1C
0E53A:  MOVWF  FF6
0E53C:  MOVLW  08
0E53E:  MOVWF  FF7
0E540:  MOVLW  00
0E542:  MOVWF  FF8
0E544:  CALL   1EDC
....................     
....................     // 接続確認
....................     if (!is_connect(mis_fm))
0E548:  MOVFF  115,2D4
0E54C:  MOVFF  114,2D3
0E550:  MOVFF  113,2D2
0E554:  MOVFF  112,2D1
0E558:  CALL   2A3E
0E55C:  MOVF   01,F
0E55E:  BTFSS  FD8.2
0E560:  GOTO   E578
....................     {
....................         fprintf(PC, "Error: MIS FM is not connected\r\n");
0E564:  MOVLW  40
0E566:  MOVWF  FF6
0E568:  MOVLW  08
0E56A:  MOVWF  FF7
0E56C:  MOVLW  00
0E56E:  MOVWF  FF8
0E570:  CALL   1EDC
....................         return;
0E574:  GOTO   F028
....................     }    
....................     if (!is_connect(smf))
0E578:  MOVFF  119,2D4
0E57C:  MOVFF  118,2D3
0E580:  MOVFF  117,2D2
0E584:  MOVFF  116,2D1
0E588:  CALL   2A3E
0E58C:  MOVF   01,F
0E58E:  BTFSS  FD8.2
0E590:  GOTO   E5A8
....................     {
....................         fprintf(PC, "Error: SMF is not connected\r\n");
0E594:  MOVLW  62
0E596:  MOVWF  FF6
0E598:  MOVLW  08
0E59A:  MOVWF  FF7
0E59C:  MOVLW  00
0E59E:  MOVWF  FF8
0E5A0:  CALL   1EDC
....................         return;
0E5A4:  GOTO   F028
....................     }    
.................... 
.................... 
....................     smf_data_table_t smf_data_table;
....................     read_smf_header(&smf_data_table);
0E5A8:  MOVLW  02
0E5AA:  MOVLB  2
0E5AC:  MOVWF  xD2
0E5AE:  MOVLW  2D
0E5B0:  MOVWF  xD1
0E5B2:  MOVLB  0
0E5B4:  GOTO   E1C8
.................... 
.................... 
....................     unsigned int32 write_src;
....................     unsigned int32 write_size;
.................... 
....................     //アドレスと自動更新
....................     if (smf_data_ptr->source_type == SOURCE_MISF_UNCOPIED )
0E5B8:  MOVLW  03
0E5BA:  MOVLB  2
0E5BC:  ADDWF  x2B,W
0E5BE:  MOVWF  01
0E5C0:  MOVLW  00
0E5C2:  ADDWFC x2C,W
0E5C4:  MOVWF  03
0E5C6:  MOVF   01,W
0E5C8:  MOVWF  FE9
0E5CA:  MOVFF  03,FEA
0E5CE:  BTFSS  FEF.0
0E5D0:  BRA    E5D8
0E5D2:  MOVLB  0
0E5D4:  GOTO   E702
0E5D8:  MOVLB  0
....................     {
....................         write_src = MISF_ADDRESS_TABLE[smf_data_ptr->mission_id].start + misf_counter_table[smf_data_ptr->mission_id].used_counter - misf_counter_table[smf_data_ptr->mission_id].uncopied_counter;
0E5DA:  MOVLB  2
0E5DC:  MOVF   x2B,W
0E5DE:  MOVWF  FE9
0E5E0:  MOVF   x2C,W
0E5E2:  MOVWF  FEA
0E5E4:  MOVF   FEF,W
0E5E6:  MULLW  0C
0E5E8:  MOVF   FF3,W
0E5EA:  CLRF   xD2
0E5EC:  MOVWF  xD1
0E5EE:  MOVFF  2D2,03
0E5F2:  MOVF   xD1,W
0E5F4:  MOVLB  0
0E5F6:  CALL   0132
0E5FA:  MOVWF  00
0E5FC:  TBLRD*+
0E5FE:  MOVFF  FF5,01
0E602:  TBLRD*+
0E604:  MOVFF  FF5,02
0E608:  TBLRD*+
0E60A:  MOVFF  FF5,03
0E60E:  MOVFF  03,2D6
0E612:  MOVFF  02,2D5
0E616:  MOVFF  01,2D4
0E61A:  MOVFF  00,2D3
0E61E:  MOVLB  2
0E620:  MOVF   x2B,W
0E622:  MOVWF  FE9
0E624:  MOVF   x2C,W
0E626:  MOVWF  FEA
0E628:  MOVF   FEF,W
0E62A:  MULLW  0A
0E62C:  MOVF   FF3,W
0E62E:  CLRF   xD8
0E630:  MOVWF  xD7
0E632:  MOVLW  2E
0E634:  ADDWF  xD7,W
0E636:  MOVWF  FE9
0E638:  MOVLW  01
0E63A:  ADDWFC xD8,W
0E63C:  MOVWF  FEA
0E63E:  MOVFF  FEF,00
0E642:  MOVFF  FEC,01
0E646:  MOVFF  FEC,02
0E64A:  MOVFF  FEC,03
0E64E:  MOVF   FED,F
0E650:  MOVF   FED,F
0E652:  MOVF   FED,F
0E654:  MOVF   00,W
0E656:  ADDWF  xD3,F
0E658:  MOVF   01,W
0E65A:  ADDWFC xD4,F
0E65C:  MOVF   02,W
0E65E:  ADDWFC xD5,F
0E660:  MOVF   03,W
0E662:  ADDWFC xD6,F
0E664:  MOVF   x2B,W
0E666:  MOVWF  FE9
0E668:  MOVF   x2C,W
0E66A:  MOVWF  FEA
0E66C:  MOVF   FEF,W
0E66E:  MULLW  0A
0E670:  MOVF   FF3,W
0E672:  CLRF   xDA
0E674:  MOVWF  xD9
0E676:  MOVLW  04
0E678:  ADDWF  xD9,W
0E67A:  MOVWF  01
0E67C:  MOVLW  00
0E67E:  ADDWFC xDA,W
0E680:  MOVWF  03
0E682:  MOVF   01,W
0E684:  ADDLW  2E
0E686:  MOVWF  FE9
0E688:  MOVLW  01
0E68A:  ADDWFC 03,W
0E68C:  MOVWF  FEA
0E68E:  MOVFF  FEF,00
0E692:  MOVFF  FEC,01
0E696:  MOVFF  FEC,02
0E69A:  MOVFF  FEC,03
0E69E:  MOVF   FED,F
0E6A0:  MOVF   FED,F
0E6A2:  MOVF   FED,F
0E6A4:  MOVF   00,W
0E6A6:  SUBWF  xD3,W
0E6A8:  MOVWF  x6D
0E6AA:  MOVF   01,W
0E6AC:  SUBWFB xD4,W
0E6AE:  MOVWF  x6E
0E6B0:  MOVF   02,W
0E6B2:  SUBWFB xD5,W
0E6B4:  MOVWF  x6F
0E6B6:  MOVF   03,W
0E6B8:  SUBWFB xD6,W
0E6BA:  MOVWF  x70
....................         write_size = misf_counter_table[smf_data_ptr->mission_id].uncopied_counter;
0E6BC:  MOVF   x2B,W
0E6BE:  MOVWF  FE9
0E6C0:  MOVF   x2C,W
0E6C2:  MOVWF  FEA
0E6C4:  MOVF   FEF,W
0E6C6:  MULLW  0A
0E6C8:  MOVF   FF3,W
0E6CA:  CLRF   xD2
0E6CC:  MOVWF  xD1
0E6CE:  MOVLW  04
0E6D0:  ADDWF  xD1,W
0E6D2:  MOVWF  01
0E6D4:  MOVLW  00
0E6D6:  ADDWFC xD2,W
0E6D8:  MOVWF  03
0E6DA:  MOVF   01,W
0E6DC:  ADDLW  2E
0E6DE:  MOVWF  FE9
0E6E0:  MOVLW  01
0E6E2:  ADDWFC 03,W
0E6E4:  MOVWF  FEA
0E6E6:  MOVFF  FEF,271
0E6EA:  MOVFF  FEC,272
0E6EE:  MOVFF  FEC,273
0E6F2:  MOVFF  FEC,274
0E6F6:  MOVF   FED,F
0E6F8:  MOVF   FED,F
0E6FA:  MOVF   FED,F
0E6FC:  MOVLB  0
....................     }else if(smf_data_ptr->source_type == SOURCE_MISF_MANUAL)
0E6FE:  GOTO   E76C
0E702:  MOVLW  03
0E704:  MOVLB  2
0E706:  ADDWF  x2B,W
0E708:  MOVWF  01
0E70A:  MOVLW  00
0E70C:  ADDWFC x2C,W
0E70E:  MOVWF  03
0E710:  MOVF   01,W
0E712:  MOVWF  FE9
0E714:  MOVFF  03,FEA
0E718:  BTFSC  FEF.0
0E71A:  BRA    E722
0E71C:  MOVLB  0
0E71E:  GOTO   E76C
0E722:  MOVLB  0
....................     {
....................         write_src = smf_data_ptr->misf_start_addr;
0E724:  MOVLW  04
0E726:  MOVLB  2
0E728:  ADDWF  x2B,W
0E72A:  MOVWF  FE9
0E72C:  MOVLW  00
0E72E:  ADDWFC x2C,W
0E730:  MOVWF  FEA
0E732:  MOVFF  FEF,26D
0E736:  MOVFF  FEC,26E
0E73A:  MOVFF  FEC,26F
0E73E:  MOVFF  FEC,270
0E742:  MOVF   FED,F
0E744:  MOVF   FED,F
0E746:  MOVF   FED,F
....................         write_size = smf_data_ptr->misf_size;
0E748:  MOVLW  08
0E74A:  ADDWF  x2B,W
0E74C:  MOVWF  FE9
0E74E:  MOVLW  00
0E750:  ADDWFC x2C,W
0E752:  MOVWF  FEA
0E754:  MOVFF  FEF,271
0E758:  MOVFF  FEC,272
0E75C:  MOVFF  FEC,273
0E760:  MOVFF  FEC,274
0E764:  MOVF   FED,F
0E766:  MOVF   FED,F
0E768:  MOVF   FED,F
0E76A:  MOVLB  0
....................     }
.................... 
....................     unsigned int32 smf_address_start = SMF_ADDRESS_TABLE[smf_data_ptr->mission_id].start;
....................     unsigned int32 smf_address_end   = SMF_ADDRESS_TABLE[smf_data_ptr->mission_id].end;
....................     unsigned int32 misf_address_start = MISF_ADDRESS_TABLE[smf_data_ptr->mission_id].start;
....................     unsigned int32 misf_address_end   = MISF_ADDRESS_TABLE[smf_data_ptr->mission_id].end;
0E76C:  MOVLB  2
0E76E:  MOVF   x2B,W
0E770:  MOVWF  FE9
0E772:  MOVF   x2C,W
0E774:  MOVWF  FEA
0E776:  MOVF   FEF,W
0E778:  MULLW  0C
0E77A:  MOVF   FF3,W
0E77C:  CLRF   xD2
0E77E:  MOVWF  xD1
0E780:  MOVFF  2D2,03
0E784:  MOVF   xD1,W
0E786:  MOVLB  0
0E788:  CALL   00CA
0E78C:  MOVWF  00
0E78E:  TBLRD*+
0E790:  MOVFF  FF5,01
0E794:  TBLRD*+
0E796:  MOVFF  FF5,02
0E79A:  TBLRD*+
0E79C:  MOVFF  FF5,03
0E7A0:  MOVFF  03,278
0E7A4:  MOVFF  02,277
0E7A8:  MOVFF  01,276
0E7AC:  MOVFF  00,275
0E7B0:  MOVLB  2
0E7B2:  MOVF   x2B,W
0E7B4:  MOVWF  FE9
0E7B6:  MOVF   x2C,W
0E7B8:  MOVWF  FEA
0E7BA:  MOVF   FEF,W
0E7BC:  MULLW  0C
0E7BE:  MOVF   FF3,W
0E7C0:  CLRF   xD4
0E7C2:  MOVWF  xD3
0E7C4:  MOVLW  04
0E7C6:  ADDWF  xD3,W
0E7C8:  MOVWF  01
0E7CA:  MOVLW  00
0E7CC:  ADDWFC xD4,W
0E7CE:  MOVWF  03
0E7D0:  MOVF   01,W
0E7D2:  MOVLB  0
0E7D4:  CALL   00CA
0E7D8:  MOVWF  00
0E7DA:  TBLRD*+
0E7DC:  MOVFF  FF5,01
0E7E0:  TBLRD*+
0E7E2:  MOVFF  FF5,02
0E7E6:  TBLRD*+
0E7E8:  MOVFF  FF5,03
0E7EC:  MOVFF  03,27C
0E7F0:  MOVFF  02,27B
0E7F4:  MOVFF  01,27A
0E7F8:  MOVFF  00,279
0E7FC:  MOVLB  2
0E7FE:  MOVF   x2B,W
0E800:  MOVWF  FE9
0E802:  MOVF   x2C,W
0E804:  MOVWF  FEA
0E806:  MOVF   FEF,W
0E808:  MULLW  0C
0E80A:  MOVF   FF3,W
0E80C:  CLRF   xD4
0E80E:  MOVWF  xD3
0E810:  MOVFF  2D4,03
0E814:  MOVF   xD3,W
0E816:  MOVLB  0
0E818:  CALL   0132
0E81C:  MOVWF  00
0E81E:  TBLRD*+
0E820:  MOVFF  FF5,01
0E824:  TBLRD*+
0E826:  MOVFF  FF5,02
0E82A:  TBLRD*+
0E82C:  MOVFF  FF5,03
0E830:  MOVFF  03,280
0E834:  MOVFF  02,27F
0E838:  MOVFF  01,27E
0E83C:  MOVFF  00,27D
0E840:  MOVLB  2
0E842:  MOVF   x2B,W
0E844:  MOVWF  FE9
0E846:  MOVF   x2C,W
0E848:  MOVWF  FEA
0E84A:  MOVF   FEF,W
0E84C:  MULLW  0C
0E84E:  MOVF   FF3,W
0E850:  CLRF   xD6
0E852:  MOVWF  xD5
0E854:  MOVLW  04
0E856:  ADDWF  xD5,W
0E858:  MOVWF  01
0E85A:  MOVLW  00
0E85C:  ADDWFC xD6,W
0E85E:  MOVWF  03
0E860:  MOVF   01,W
0E862:  MOVLB  0
0E864:  CALL   0132
0E868:  MOVWF  00
0E86A:  TBLRD*+
0E86C:  MOVFF  FF5,01
0E870:  TBLRD*+
0E872:  MOVFF  FF5,02
0E876:  TBLRD*+
0E878:  MOVFF  FF5,03
0E87C:  MOVFF  03,284
0E880:  MOVFF  02,283
0E884:  MOVFF  01,282
0E888:  MOVFF  00,281
.................... 
.................... 
.................... 
....................     // Print SMF ADDRESS
....................     fprintf(PC,"[SMF ADDRESS]\r\n");
0E88C:  MOVLW  80
0E88E:  MOVWF  FF6
0E890:  MOVLW  08
0E892:  MOVWF  FF7
0E894:  MOVLW  00
0E896:  MOVWF  FF8
0E898:  CALL   1EDC
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
0E89C:  MOVLW  90
0E89E:  MOVWF  FF6
0E8A0:  MOVLW  08
0E8A2:  MOVWF  FF7
0E8A4:  MOVLW  00
0E8A6:  MOVWF  FF8
0E8A8:  CALL   1EDC
....................     fprintf(PC, "\tSTART\t0x%08LX\r\n", smf_address_start);
0E8AC:  MOVLW  BC
0E8AE:  MOVWF  FF6
0E8B0:  MOVLW  08
0E8B2:  MOVWF  FF7
0E8B4:  MOVLW  00
0E8B6:  MOVWF  FF8
0E8B8:  MOVLW  09
0E8BA:  MOVLB  3
0E8BC:  MOVWF  x16
0E8BE:  MOVLB  0
0E8C0:  CALL   1F12
0E8C4:  MOVFF  278,A62
0E8C8:  MOVLW  37
0E8CA:  MOVLB  A
0E8CC:  MOVWF  x63
0E8CE:  MOVLB  0
0E8D0:  CALL   2126
0E8D4:  MOVFF  277,A62
0E8D8:  MOVLW  37
0E8DA:  MOVLB  A
0E8DC:  MOVWF  x63
0E8DE:  MOVLB  0
0E8E0:  CALL   2126
0E8E4:  MOVFF  276,A62
0E8E8:  MOVLW  37
0E8EA:  MOVLB  A
0E8EC:  MOVWF  x63
0E8EE:  MOVLB  0
0E8F0:  CALL   2126
0E8F4:  MOVFF  275,A62
0E8F8:  MOVLW  37
0E8FA:  MOVLB  A
0E8FC:  MOVWF  x63
0E8FE:  MOVLB  0
0E900:  CALL   2126
0E904:  MOVLW  0D
0E906:  BTFSS  FA6.6
0E908:  GOTO   E906
0E90C:  MOVLB  E
0E90E:  MOVWF  xF9
0E910:  MOVLW  0A
0E912:  MOVLB  0
0E914:  BTFSS  FA6.6
0E916:  GOTO   E914
0E91A:  MOVLB  E
0E91C:  MOVWF  xF9
....................     fprintf(PC, "\tEND\t0x%08LX\r\n", smf_address_end);
0E91E:  MOVLW  CE
0E920:  MOVWF  FF6
0E922:  MOVLW  08
0E924:  MOVWF  FF7
0E926:  MOVLW  00
0E928:  MOVWF  FF8
0E92A:  MOVLW  07
0E92C:  MOVLB  3
0E92E:  MOVWF  x16
0E930:  MOVLB  0
0E932:  CALL   1F12
0E936:  MOVFF  27C,A62
0E93A:  MOVLW  37
0E93C:  MOVLB  A
0E93E:  MOVWF  x63
0E940:  MOVLB  0
0E942:  CALL   2126
0E946:  MOVFF  27B,A62
0E94A:  MOVLW  37
0E94C:  MOVLB  A
0E94E:  MOVWF  x63
0E950:  MOVLB  0
0E952:  CALL   2126
0E956:  MOVFF  27A,A62
0E95A:  MOVLW  37
0E95C:  MOVLB  A
0E95E:  MOVWF  x63
0E960:  MOVLB  0
0E962:  CALL   2126
0E966:  MOVFF  279,A62
0E96A:  MOVLW  37
0E96C:  MOVLB  A
0E96E:  MOVWF  x63
0E970:  MOVLB  0
0E972:  CALL   2126
0E976:  MOVLW  0D
0E978:  BTFSS  FA6.6
0E97A:  GOTO   E978
0E97E:  MOVLB  E
0E980:  MOVWF  xF9
0E982:  MOVLW  0A
0E984:  MOVLB  0
0E986:  BTFSS  FA6.6
0E988:  GOTO   E986
0E98C:  MOVLB  E
0E98E:  MOVWF  xF9
....................     fprintf(PC, "\tUSED\t0x%08LX\r\n", smf_data_table.fields.headers[smf_data_ptr->mission_id].used_size);
0E990:  MOVLB  2
0E992:  MOVF   x2B,W
0E994:  MOVWF  FE9
0E996:  MOVF   x2C,W
0E998:  MOVWF  FEA
0E99A:  MOVF   FEF,W
0E99C:  MULLW  08
0E99E:  MOVF   FF3,W
0E9A0:  CLRF   xD2
0E9A2:  MOVWF  xD1
0E9A4:  MOVLW  2D
0E9A6:  ADDWF  xD1,W
0E9A8:  MOVWF  FE9
0E9AA:  MOVLW  02
0E9AC:  ADDWFC xD2,W
0E9AE:  MOVWF  FEA
0E9B0:  MOVFF  FEF,2D3
0E9B4:  MOVFF  FEC,2D4
0E9B8:  MOVFF  FEC,2D5
0E9BC:  MOVFF  FEC,2D6
0E9C0:  MOVF   FED,F
0E9C2:  MOVF   FED,F
0E9C4:  MOVF   FED,F
0E9C6:  MOVLW  DE
0E9C8:  MOVWF  FF6
0E9CA:  MOVLW  08
0E9CC:  MOVWF  FF7
0E9CE:  MOVLW  00
0E9D0:  MOVWF  FF8
0E9D2:  MOVLW  08
0E9D4:  MOVLB  3
0E9D6:  MOVWF  x16
0E9D8:  MOVLB  0
0E9DA:  CALL   1F12
0E9DE:  MOVFF  2D6,A62
0E9E2:  MOVLW  37
0E9E4:  MOVLB  A
0E9E6:  MOVWF  x63
0E9E8:  MOVLB  0
0E9EA:  CALL   2126
0E9EE:  MOVFF  2D5,A62
0E9F2:  MOVLW  37
0E9F4:  MOVLB  A
0E9F6:  MOVWF  x63
0E9F8:  MOVLB  0
0E9FA:  CALL   2126
0E9FE:  MOVFF  2D4,A62
0EA02:  MOVLW  37
0EA04:  MOVLB  A
0EA06:  MOVWF  x63
0EA08:  MOVLB  0
0EA0A:  CALL   2126
0EA0E:  MOVFF  2D3,A62
0EA12:  MOVLW  37
0EA14:  MOVLB  A
0EA16:  MOVWF  x63
0EA18:  MOVLB  0
0EA1A:  CALL   2126
0EA1E:  MOVLW  0D
0EA20:  BTFSS  FA6.6
0EA22:  GOTO   EA20
0EA26:  MOVLB  E
0EA28:  MOVWF  xF9
0EA2A:  MOVLW  0A
0EA2C:  MOVLB  0
0EA2E:  BTFSS  FA6.6
0EA30:  GOTO   EA2E
0EA34:  MOVLB  E
0EA36:  MOVWF  xF9
....................     fprintf(PC, "\tNEXT\t0x%08LX\r\n", smf_address_start + smf_data_table.fields.headers[smf_data_ptr->mission_id].used_size);
0EA38:  MOVLB  2
0EA3A:  MOVF   x2B,W
0EA3C:  MOVWF  FE9
0EA3E:  MOVF   x2C,W
0EA40:  MOVWF  FEA
0EA42:  MOVF   FEF,W
0EA44:  MULLW  08
0EA46:  MOVF   FF3,W
0EA48:  CLRF   xD2
0EA4A:  MOVWF  xD1
0EA4C:  MOVLW  2D
0EA4E:  ADDWF  xD1,W
0EA50:  MOVWF  FE9
0EA52:  MOVLW  02
0EA54:  ADDWFC xD2,W
0EA56:  MOVWF  FEA
0EA58:  MOVFF  FEF,00
0EA5C:  MOVFF  FEC,01
0EA60:  MOVFF  FEC,02
0EA64:  MOVFF  FEC,03
0EA68:  MOVF   FED,F
0EA6A:  MOVF   FED,F
0EA6C:  MOVF   FED,F
0EA6E:  MOVF   00,W
0EA70:  ADDWF  x75,W
0EA72:  MOVWF  xD3
0EA74:  MOVF   01,W
0EA76:  ADDWFC x76,W
0EA78:  MOVWF  xD4
0EA7A:  MOVF   02,W
0EA7C:  ADDWFC x77,W
0EA7E:  MOVWF  xD5
0EA80:  MOVF   03,W
0EA82:  ADDWFC x78,W
0EA84:  MOVWF  xD6
0EA86:  MOVLW  EE
0EA88:  MOVWF  FF6
0EA8A:  MOVLW  08
0EA8C:  MOVWF  FF7
0EA8E:  MOVLW  00
0EA90:  MOVWF  FF8
0EA92:  MOVLW  08
0EA94:  MOVLB  3
0EA96:  MOVWF  x16
0EA98:  MOVLB  0
0EA9A:  CALL   1F12
0EA9E:  MOVFF  2D6,A62
0EAA2:  MOVLW  37
0EAA4:  MOVLB  A
0EAA6:  MOVWF  x63
0EAA8:  MOVLB  0
0EAAA:  CALL   2126
0EAAE:  MOVFF  2D5,A62
0EAB2:  MOVLW  37
0EAB4:  MOVLB  A
0EAB6:  MOVWF  x63
0EAB8:  MOVLB  0
0EABA:  CALL   2126
0EABE:  MOVFF  2D4,A62
0EAC2:  MOVLW  37
0EAC4:  MOVLB  A
0EAC6:  MOVWF  x63
0EAC8:  MOVLB  0
0EACA:  CALL   2126
0EACE:  MOVFF  2D3,A62
0EAD2:  MOVLW  37
0EAD4:  MOVLB  A
0EAD6:  MOVWF  x63
0EAD8:  MOVLB  0
0EADA:  CALL   2126
0EADE:  MOVLW  0D
0EAE0:  BTFSS  FA6.6
0EAE2:  GOTO   EAE0
0EAE6:  MOVLB  E
0EAE8:  MOVWF  xF9
0EAEA:  MOVLW  0A
0EAEC:  MOVLB  0
0EAEE:  BTFSS  FA6.6
0EAF0:  GOTO   EAEE
0EAF4:  MOVLB  E
0EAF6:  MOVWF  xF9
.................... 
....................     // Print MISF ADDRESS
....................     fprintf(PC,"[MISF ADDRESS]\r\n");
0EAF8:  MOVLW  FE
0EAFA:  MOVWF  FF6
0EAFC:  MOVLW  08
0EAFE:  MOVWF  FF7
0EB00:  MOVLW  00
0EB02:  MOVWF  FF8
0EB04:  MOVLB  0
0EB06:  CALL   1EDC
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
0EB0A:  MOVLW  10
0EB0C:  MOVWF  FF6
0EB0E:  MOVLW  09
0EB10:  MOVWF  FF7
0EB12:  MOVLW  00
0EB14:  MOVWF  FF8
0EB16:  CALL   1EDC
....................     fprintf(PC, "\tSTART\t0x%08LX\r\n", misf_address_start);
0EB1A:  MOVLW  3C
0EB1C:  MOVWF  FF6
0EB1E:  MOVLW  09
0EB20:  MOVWF  FF7
0EB22:  MOVLW  00
0EB24:  MOVWF  FF8
0EB26:  MOVLW  09
0EB28:  MOVLB  3
0EB2A:  MOVWF  x16
0EB2C:  MOVLB  0
0EB2E:  CALL   1F12
0EB32:  MOVFF  280,A62
0EB36:  MOVLW  37
0EB38:  MOVLB  A
0EB3A:  MOVWF  x63
0EB3C:  MOVLB  0
0EB3E:  CALL   2126
0EB42:  MOVFF  27F,A62
0EB46:  MOVLW  37
0EB48:  MOVLB  A
0EB4A:  MOVWF  x63
0EB4C:  MOVLB  0
0EB4E:  CALL   2126
0EB52:  MOVFF  27E,A62
0EB56:  MOVLW  37
0EB58:  MOVLB  A
0EB5A:  MOVWF  x63
0EB5C:  MOVLB  0
0EB5E:  CALL   2126
0EB62:  MOVFF  27D,A62
0EB66:  MOVLW  37
0EB68:  MOVLB  A
0EB6A:  MOVWF  x63
0EB6C:  MOVLB  0
0EB6E:  CALL   2126
0EB72:  MOVLW  0D
0EB74:  BTFSS  FA6.6
0EB76:  GOTO   EB74
0EB7A:  MOVLB  E
0EB7C:  MOVWF  xF9
0EB7E:  MOVLW  0A
0EB80:  MOVLB  0
0EB82:  BTFSS  FA6.6
0EB84:  GOTO   EB82
0EB88:  MOVLB  E
0EB8A:  MOVWF  xF9
....................     fprintf(PC, "\tEND\t0x%08LX\r\n", misf_address_end);
0EB8C:  MOVLW  4E
0EB8E:  MOVWF  FF6
0EB90:  MOVLW  09
0EB92:  MOVWF  FF7
0EB94:  MOVLW  00
0EB96:  MOVWF  FF8
0EB98:  MOVLW  07
0EB9A:  MOVLB  3
0EB9C:  MOVWF  x16
0EB9E:  MOVLB  0
0EBA0:  CALL   1F12
0EBA4:  MOVFF  284,A62
0EBA8:  MOVLW  37
0EBAA:  MOVLB  A
0EBAC:  MOVWF  x63
0EBAE:  MOVLB  0
0EBB0:  CALL   2126
0EBB4:  MOVFF  283,A62
0EBB8:  MOVLW  37
0EBBA:  MOVLB  A
0EBBC:  MOVWF  x63
0EBBE:  MOVLB  0
0EBC0:  CALL   2126
0EBC4:  MOVFF  282,A62
0EBC8:  MOVLW  37
0EBCA:  MOVLB  A
0EBCC:  MOVWF  x63
0EBCE:  MOVLB  0
0EBD0:  CALL   2126
0EBD4:  MOVFF  281,A62
0EBD8:  MOVLW  37
0EBDA:  MOVLB  A
0EBDC:  MOVWF  x63
0EBDE:  MOVLB  0
0EBE0:  CALL   2126
0EBE4:  MOVLW  0D
0EBE6:  BTFSS  FA6.6
0EBE8:  GOTO   EBE6
0EBEC:  MOVLB  E
0EBEE:  MOVWF  xF9
0EBF0:  MOVLW  0A
0EBF2:  MOVLB  0
0EBF4:  BTFSS  FA6.6
0EBF6:  GOTO   EBF4
0EBFA:  MOVLB  E
0EBFC:  MOVWF  xF9
....................     fprintf(PC, "\tSRC\t0x%08LX\r\n", write_src);
0EBFE:  MOVLW  5E
0EC00:  MOVWF  FF6
0EC02:  MOVLW  09
0EC04:  MOVWF  FF7
0EC06:  MOVLW  00
0EC08:  MOVWF  FF8
0EC0A:  MOVLW  07
0EC0C:  MOVLB  3
0EC0E:  MOVWF  x16
0EC10:  MOVLB  0
0EC12:  CALL   1F12
0EC16:  MOVFF  270,A62
0EC1A:  MOVLW  37
0EC1C:  MOVLB  A
0EC1E:  MOVWF  x63
0EC20:  MOVLB  0
0EC22:  CALL   2126
0EC26:  MOVFF  26F,A62
0EC2A:  MOVLW  37
0EC2C:  MOVLB  A
0EC2E:  MOVWF  x63
0EC30:  MOVLB  0
0EC32:  CALL   2126
0EC36:  MOVFF  26E,A62
0EC3A:  MOVLW  37
0EC3C:  MOVLB  A
0EC3E:  MOVWF  x63
0EC40:  MOVLB  0
0EC42:  CALL   2126
0EC46:  MOVFF  26D,A62
0EC4A:  MOVLW  37
0EC4C:  MOVLB  A
0EC4E:  MOVWF  x63
0EC50:  MOVLB  0
0EC52:  CALL   2126
0EC56:  MOVLW  0D
0EC58:  BTFSS  FA6.6
0EC5A:  GOTO   EC58
0EC5E:  MOVLB  E
0EC60:  MOVWF  xF9
0EC62:  MOVLW  0A
0EC64:  MOVLB  0
0EC66:  BTFSS  FA6.6
0EC68:  GOTO   EC66
0EC6C:  MOVLB  E
0EC6E:  MOVWF  xF9
....................     fprintf(PC, "\tSIZE\t0x%08LX\r\n", write_size);
0EC70:  MOVLW  6E
0EC72:  MOVWF  FF6
0EC74:  MOVLW  09
0EC76:  MOVWF  FF7
0EC78:  MOVLW  00
0EC7A:  MOVWF  FF8
0EC7C:  MOVLW  08
0EC7E:  MOVLB  3
0EC80:  MOVWF  x16
0EC82:  MOVLB  0
0EC84:  CALL   1F12
0EC88:  MOVFF  274,A62
0EC8C:  MOVLW  37
0EC8E:  MOVLB  A
0EC90:  MOVWF  x63
0EC92:  MOVLB  0
0EC94:  CALL   2126
0EC98:  MOVFF  273,A62
0EC9C:  MOVLW  37
0EC9E:  MOVLB  A
0ECA0:  MOVWF  x63
0ECA2:  MOVLB  0
0ECA4:  CALL   2126
0ECA8:  MOVFF  272,A62
0ECAC:  MOVLW  37
0ECAE:  MOVLB  A
0ECB0:  MOVWF  x63
0ECB2:  MOVLB  0
0ECB4:  CALL   2126
0ECB8:  MOVFF  271,A62
0ECBC:  MOVLW  37
0ECBE:  MOVLB  A
0ECC0:  MOVWF  x63
0ECC2:  MOVLB  0
0ECC4:  CALL   2126
0ECC8:  MOVLW  0D
0ECCA:  BTFSS  FA6.6
0ECCC:  GOTO   ECCA
0ECD0:  MOVLB  E
0ECD2:  MOVWF  xF9
0ECD4:  MOVLW  0A
0ECD6:  MOVLB  0
0ECD8:  BTFSS  FA6.6
0ECDA:  GOTO   ECD8
0ECDE:  MOVLB  E
0ECE0:  MOVWF  xF9
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
0ECE2:  MOVLW  7E
0ECE4:  MOVWF  FF6
0ECE6:  MOVLW  09
0ECE8:  MOVWF  FF7
0ECEA:  MOVLW  00
0ECEC:  MOVWF  FF8
0ECEE:  MOVLB  0
0ECF0:  CALL   1EDC
.................... 
.................... 
....................     unsigned int8 buffer[PACKET_SIZE];
....................     unsigned int32 smf_write_address;
....................     unsigned int32 misf_read_address;
.................... 
....................     while (write_size > 0)
0ECF4:  MOVLB  2
0ECF6:  MOVF   x71,F
0ECF8:  BTFSC  FD8.2
0ECFA:  BRA    ED02
0ECFC:  MOVLB  0
0ECFE:  GOTO   ED34
0ED02:  MOVLB  0
0ED04:  MOVLB  2
0ED06:  MOVF   x72,F
0ED08:  BTFSC  FD8.2
0ED0A:  BRA    ED12
0ED0C:  MOVLB  0
0ED0E:  GOTO   ED34
0ED12:  MOVLB  0
0ED14:  MOVLB  2
0ED16:  MOVF   x73,F
0ED18:  BTFSC  FD8.2
0ED1A:  BRA    ED22
0ED1C:  MOVLB  0
0ED1E:  GOTO   ED34
0ED22:  MOVLB  0
0ED24:  MOVLB  2
0ED26:  MOVF   x74,F
0ED28:  BTFSS  FD8.2
0ED2A:  BRA    ED32
0ED2C:  MOVLB  0
0ED2E:  GOTO   EFF8
0ED32:  MOVLB  0
....................     {
....................         fprintf(PC, "Remaining size to write: %lu bytes\r\n", write_size);
0ED34:  MOVLW  AA
0ED36:  MOVWF  FF6
0ED38:  MOVLW  09
0ED3A:  MOVWF  FF7
0ED3C:  MOVLW  00
0ED3E:  MOVWF  FF8
0ED40:  MOVLW  19
0ED42:  MOVLB  3
0ED44:  MOVWF  x16
0ED46:  MOVLB  0
0ED48:  CALL   1F12
0ED4C:  MOVLW  41
0ED4E:  MOVWF  FE9
0ED50:  MOVFF  274,2DE
0ED54:  MOVFF  273,2DD
0ED58:  MOVFF  272,2DC
0ED5C:  MOVFF  271,2DB
0ED60:  CALL   5DF6
0ED64:  MOVLW  C6
0ED66:  MOVWF  FF6
0ED68:  MOVLW  09
0ED6A:  MOVWF  FF7
0ED6C:  MOVLW  00
0ED6E:  MOVWF  FF8
0ED70:  MOVLW  08
0ED72:  MOVLB  3
0ED74:  MOVWF  x16
0ED76:  MOVLB  0
0ED78:  CALL   1F12
....................         memset(buffer, 0x11, PACKET_SIZE);
0ED7C:  MOVLW  02
0ED7E:  MOVWF  FEA
0ED80:  MOVLW  85
0ED82:  MOVWF  FE9
0ED84:  MOVLW  11
0ED86:  MOVWF  00
0ED88:  CLRF   02
0ED8A:  MOVLW  40
0ED8C:  MOVWF  01
0ED8E:  CALL   2B06
....................         smf_write_address = smf_address_start + smf_data_table.fields.headers[smf_data_ptr->mission_id].used_size;
0ED92:  MOVLB  2
0ED94:  MOVF   x2B,W
0ED96:  MOVWF  FE9
0ED98:  MOVF   x2C,W
0ED9A:  MOVWF  FEA
0ED9C:  MOVF   FEF,W
0ED9E:  MULLW  08
0EDA0:  MOVF   FF3,W
0EDA2:  CLRF   xD2
0EDA4:  MOVWF  xD1
0EDA6:  MOVLW  2D
0EDA8:  ADDWF  xD1,W
0EDAA:  MOVWF  FE9
0EDAC:  MOVLW  02
0EDAE:  ADDWFC xD2,W
0EDB0:  MOVWF  FEA
0EDB2:  MOVFF  FEF,00
0EDB6:  MOVFF  FEC,01
0EDBA:  MOVFF  FEC,02
0EDBE:  MOVFF  FEC,03
0EDC2:  MOVF   FED,F
0EDC4:  MOVF   FED,F
0EDC6:  MOVF   FED,F
0EDC8:  MOVF   00,W
0EDCA:  ADDWF  x75,W
0EDCC:  MOVWF  xC5
0EDCE:  MOVF   01,W
0EDD0:  ADDWFC x76,W
0EDD2:  MOVWF  xC6
0EDD4:  MOVF   02,W
0EDD6:  ADDWFC x77,W
0EDD8:  MOVWF  xC7
0EDDA:  MOVF   03,W
0EDDC:  ADDWFC x78,W
0EDDE:  MOVWF  xC8
....................         misf_read_address = write_src;
0EDE0:  MOVFF  270,2CC
0EDE4:  MOVFF  26F,2CB
0EDE8:  MOVFF  26E,2CA
0EDEC:  MOVFF  26D,2C9
.................... 
....................         read_data_bytes(mis_fm, misf_read_address, buffer, PACKET_SIZE);
0EDF0:  MOVFF  115,B4A
0EDF4:  MOVFF  114,B49
0EDF8:  MOVFF  113,B48
0EDFC:  MOVFF  112,B47
0EE00:  MOVFF  2CC,B4E
0EE04:  MOVFF  2CB,B4D
0EE08:  MOVFF  2CA,B4C
0EE0C:  MOVFF  2C9,B4B
0EE10:  MOVLW  02
0EE12:  MOVLB  B
0EE14:  MOVWF  x50
0EE16:  MOVLW  85
0EE18:  MOVWF  x4F
0EE1A:  CLRF   x54
0EE1C:  CLRF   x53
0EE1E:  CLRF   x52
0EE20:  MOVLW  40
0EE22:  MOVWF  x51
0EE24:  MOVLB  0
0EE26:  CALL   2B2A
....................         fprintf(PC, "MISF DATA\r\n");
0EE2A:  MOVLW  D0
0EE2C:  MOVWF  FF6
0EE2E:  MOVLW  09
0EE30:  MOVWF  FF7
0EE32:  MOVLW  00
0EE34:  MOVWF  FF8
0EE36:  CALL   1EDC
....................         for (unsigned int32 j = 0; j < PACKET_SIZE; j++) {
0EE3A:  MOVLB  2
0EE3C:  CLRF   xD0
0EE3E:  CLRF   xCF
0EE40:  CLRF   xCE
0EE42:  CLRF   xCD
0EE44:  MOVLB  0
0EE46:  MOVLB  2
0EE48:  MOVF   xD0,F
0EE4A:  BTFSC  FD8.2
0EE4C:  BRA    EE54
0EE4E:  MOVLB  0
0EE50:  GOTO   EED0
0EE54:  MOVLB  0
0EE56:  MOVLB  2
0EE58:  MOVF   xCF,F
0EE5A:  BTFSC  FD8.2
0EE5C:  BRA    EE64
0EE5E:  MOVLB  0
0EE60:  GOTO   EED0
0EE64:  MOVLB  0
0EE66:  MOVLB  2
0EE68:  MOVF   xCE,F
0EE6A:  BTFSC  FD8.2
0EE6C:  BRA    EE74
0EE6E:  MOVLB  0
0EE70:  GOTO   EED0
0EE74:  MOVLB  0
0EE76:  MOVLB  2
0EE78:  MOVF   xCD,W
0EE7A:  SUBLW  3F
0EE7C:  BTFSC  FD8.0
0EE7E:  BRA    EE86
0EE80:  MOVLB  0
0EE82:  GOTO   EED0
0EE86:  MOVLB  0
....................             fprintf(PC, "%02X ", buffer[j]);
0EE88:  MOVLW  85
0EE8A:  MOVLB  2
0EE8C:  ADDWF  xCD,W
0EE8E:  MOVWF  FE9
0EE90:  MOVLW  02
0EE92:  ADDWFC xCE,W
0EE94:  MOVWF  FEA
0EE96:  MOVFF  FEF,2D1
0EE9A:  MOVFF  2D1,A62
0EE9E:  MOVLW  37
0EEA0:  MOVLB  A
0EEA2:  MOVWF  x63
0EEA4:  MOVLB  0
0EEA6:  CALL   2126
0EEAA:  MOVLW  20
0EEAC:  BTFSS  FA6.6
0EEAE:  GOTO   EEAC
0EEB2:  MOVLB  E
0EEB4:  MOVWF  xF9
0EEB6:  MOVLB  0
0EEB8:  MOVLW  01
0EEBA:  MOVLB  2
0EEBC:  ADDWF  xCD,F
0EEBE:  BTFSC  FD8.0
0EEC0:  INCF   xCE,F
0EEC2:  BTFSC  FD8.2
0EEC4:  INCF   xCF,F
0EEC6:  BTFSC  FD8.2
0EEC8:  INCF   xD0,F
0EECA:  MOVLB  0
0EECC:  GOTO   EE46
....................         }
....................         fprintf(PC, "\r\n");
0EED0:  MOVLW  0D
0EED2:  BTFSS  FA6.6
0EED4:  GOTO   EED2
0EED8:  MOVLB  E
0EEDA:  MOVWF  xF9
0EEDC:  MOVLW  0A
0EEDE:  MOVLB  0
0EEE0:  BTFSS  FA6.6
0EEE2:  GOTO   EEE0
0EEE6:  MOVLB  E
0EEE8:  MOVWF  xF9
.................... 
....................         write_data_bytes(smf, smf_write_address, buffer, PACKET_SIZE);
0EEEA:  MOVFF  119,B8E
0EEEE:  MOVFF  118,B8D
0EEF2:  MOVFF  117,B8C
0EEF6:  MOVFF  116,B8B
0EEFA:  MOVFF  2C8,B92
0EEFE:  MOVFF  2C7,B91
0EF02:  MOVFF  2C6,B90
0EF06:  MOVFF  2C5,B8F
0EF0A:  MOVLW  02
0EF0C:  MOVLB  B
0EF0E:  MOVWF  x94
0EF10:  MOVLW  85
0EF12:  MOVWF  x93
0EF14:  CLRF   x96
0EF16:  MOVLW  40
0EF18:  MOVWF  x95
0EF1A:  MOVLB  0
0EF1C:  CALL   3B1A
....................         smf_data_table.fields.headers[smf_data_ptr->mission_id].used_size += PACKET_SIZE;
0EF20:  MOVLB  2
0EF22:  MOVF   x2B,W
0EF24:  MOVWF  FE9
0EF26:  MOVF   x2C,W
0EF28:  MOVWF  FEA
0EF2A:  MOVF   FEF,W
0EF2C:  MULLW  08
0EF2E:  MOVF   FF3,W
0EF30:  CLRF   xD2
0EF32:  MOVWF  xD1
0EF34:  MOVLW  2D
0EF36:  ADDWF  xD1,W
0EF38:  MOVWF  FE9
0EF3A:  MOVLW  02
0EF3C:  ADDWFC xD2,W
0EF3E:  MOVWF  FEA
0EF40:  MOVLW  40
0EF42:  ADDWF  FEF,W
0EF44:  MOVWF  00
0EF46:  MOVLW  00
0EF48:  ADDWFC FEC,W
0EF4A:  MOVWF  01
0EF4C:  MOVLW  00
0EF4E:  ADDWFC FEC,W
0EF50:  MOVWF  02
0EF52:  MOVLW  00
0EF54:  ADDWFC FEC,W
0EF56:  MOVWF  03
0EF58:  MOVF   FED,F
0EF5A:  MOVF   FED,F
0EF5C:  MOVF   FED,F
0EF5E:  MOVFF  00,FEF
0EF62:  MOVFF  01,FEC
0EF66:  MOVFF  02,FEC
0EF6A:  MOVFF  03,FEC
0EF6E:  MOVF   FED,F
0EF70:  MOVF   FED,F
0EF72:  MOVF   FED,F
....................         misf_counter_table[smf_data_ptr->mission_id].uncopied_counter -= PACKET_SIZE;
0EF74:  MOVF   x2B,W
0EF76:  MOVWF  FE9
0EF78:  MOVF   x2C,W
0EF7A:  MOVWF  FEA
0EF7C:  MOVF   FEF,W
0EF7E:  MULLW  0A
0EF80:  MOVF   FF3,W
0EF82:  CLRF   xD2
0EF84:  MOVWF  xD1
0EF86:  MOVLW  04
0EF88:  ADDWF  xD1,W
0EF8A:  MOVWF  01
0EF8C:  MOVLW  00
0EF8E:  ADDWFC xD2,W
0EF90:  MOVWF  03
0EF92:  MOVF   01,W
0EF94:  ADDLW  2E
0EF96:  MOVWF  FE9
0EF98:  MOVLW  01
0EF9A:  ADDWFC 03,W
0EF9C:  MOVWF  FEA
0EF9E:  MOVLW  40
0EFA0:  SUBWF  FEF,W
0EFA2:  MOVWF  00
0EFA4:  MOVLW  00
0EFA6:  SUBWFB FEC,W
0EFA8:  MOVWF  01
0EFAA:  MOVLW  00
0EFAC:  SUBWFB FEC,W
0EFAE:  MOVWF  02
0EFB0:  MOVLW  00
0EFB2:  SUBWFB FEC,W
0EFB4:  MOVWF  03
0EFB6:  MOVF   FED,F
0EFB8:  MOVF   FED,F
0EFBA:  MOVF   FED,F
0EFBC:  MOVFF  00,FEF
0EFC0:  MOVFF  01,FEC
0EFC4:  MOVFF  02,FEC
0EFC8:  MOVFF  03,FEC
0EFCC:  MOVF   FED,F
0EFCE:  MOVF   FED,F
0EFD0:  MOVF   FED,F
....................         
....................         write_src += PACKET_SIZE;
0EFD2:  MOVLW  40
0EFD4:  ADDWF  x6D,F
0EFD6:  MOVLW  00
0EFD8:  ADDWFC x6E,F
0EFDA:  MOVLW  00
0EFDC:  ADDWFC x6F,F
0EFDE:  MOVLW  00
0EFE0:  ADDWFC x70,F
....................         write_size -= PACKET_SIZE;
0EFE2:  MOVLW  40
0EFE4:  SUBWF  x71,F
0EFE6:  MOVLW  00
0EFE8:  SUBWFB x72,F
0EFEA:  MOVLW  00
0EFEC:  SUBWFB x73,F
0EFEE:  MOVLW  00
0EFF0:  SUBWFB x74,F
0EFF2:  MOVLB  0
0EFF4:  GOTO   ECF4
....................     }
.................... 
.................... 
....................     // write size area
....................     smf_write_header(&smf_data_table);
0EFF8:  MOVLW  02
0EFFA:  MOVLB  2
0EFFC:  MOVWF  xD2
0EFFE:  MOVLW  2D
0F000:  MOVWF  xD1
0F002:  MOVLB  0
0F004:  GOTO   E358
....................     
....................     fprintf(PC, "\r\n_________End copy_data__________\r\n");
0F008:  MOVLW  DC
0F00A:  MOVWF  FF6
0F00C:  MOVLW  09
0F00E:  MOVWF  FF7
0F010:  MOVLW  00
0F012:  MOVWF  FF8
0F014:  CALL   1EDC
....................     fprintf(PC, "_______________________________\r\n\r\n");
0F018:  MOVLW  02
0F01A:  MOVWF  FF6
0F01C:  MOVLW  0A
0F01E:  MOVWF  FF7
0F020:  MOVLW  00
0F022:  MOVWF  FF8
0F024:  CALL   1EDC
0F028:  GOTO   101F2 (RETURN)
.................... }
.................... 
.................... void smf_read(FlashOperationStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
0F1B8:  MOVLW  26
0F1BA:  MOVWF  FF6
0F1BC:  MOVLW  0A
0F1BE:  MOVWF  FF7
0F1C0:  MOVLW  00
0F1C2:  MOVWF  FF8
0F1C4:  CALL   1EDC
....................     fprintf(PC, "___Start SMF Read____\r\n");
0F1C8:  MOVLW  40
0F1CA:  MOVWF  FF6
0F1CC:  MOVLW  0A
0F1CE:  MOVWF  FF7
0F1D0:  MOVLW  00
0F1D2:  MOVWF  FF8
0F1D4:  CALL   1EDC
.................... 
....................     int8 buffer[PACKET_SIZE];
.................... 
....................     SmfAddressStruct smf_address = get_smf_address_struct(smf_data->mission_id);
....................     unsigned int32 read_address = smf_data->misf_start_addr; // 呼び出し側でSMF内アドレスを設定する前提
....................     unsigned int32 read_size = smf_data->misf_size;
0F1D8:  MOVLB  2
0F1DA:  MOVF   x2B,W
0F1DC:  MOVWF  FE9
0F1DE:  MOVF   x2C,W
0F1E0:  MOVWF  FEA
0F1E2:  MOVFF  FEF,28D
0F1E6:  MOVFF  28D,294
0F1EA:  MOVLB  0
0F1EC:  CALL   F02C
0F1F0:  MOVFF  02,03
0F1F4:  MOVF   01,W
0F1F6:  MOVWF  FE1
0F1F8:  MOVFF  03,FE2
0F1FC:  MOVLW  02
0F1FE:  MOVWF  FEA
0F200:  MOVLW  6D
0F202:  MOVWF  FE9
0F204:  MOVLW  08
0F206:  MOVWF  01
0F208:  MOVFF  FE6,FEE
0F20C:  DECFSZ 01,F
0F20E:  GOTO   F208
0F212:  MOVLW  04
0F214:  MOVLB  2
0F216:  ADDWF  x2B,W
0F218:  MOVWF  FE9
0F21A:  MOVLW  00
0F21C:  ADDWFC x2C,W
0F21E:  MOVWF  FEA
0F220:  MOVFF  FEF,275
0F224:  MOVFF  FEC,276
0F228:  MOVFF  FEC,277
0F22C:  MOVFF  FEC,278
0F230:  MOVF   FED,F
0F232:  MOVF   FED,F
0F234:  MOVF   FED,F
0F236:  MOVLW  08
0F238:  ADDWF  x2B,W
0F23A:  MOVWF  FE9
0F23C:  MOVLW  00
0F23E:  ADDWFC x2C,W
0F240:  MOVWF  FEA
0F242:  MOVFF  FEF,279
0F246:  MOVFF  FEC,27A
0F24A:  MOVFF  FEC,27B
0F24E:  MOVFF  FEC,27C
0F252:  MOVF   FED,F
0F254:  MOVF   FED,F
0F256:  MOVF   FED,F
.................... 
....................     // 境界チェック (start/end は [start_address, end_address) の半開区間想定)
....................     if (read_address < (unsigned int32)smf_address.start_address || read_address >= (unsigned int32)smf_address.end_address) {
0F258:  MOVF   x78,W
0F25A:  SUBWF  x70,W
0F25C:  BTFSC  FD8.0
0F25E:  BRA    F266
0F260:  MOVLB  0
0F262:  GOTO   F2B0
0F266:  MOVLB  0
0F268:  BTFSS  FD8.2
0F26A:  GOTO   F30A
0F26E:  MOVLB  2
0F270:  MOVF   x77,W
0F272:  SUBWF  x6F,W
0F274:  BTFSC  FD8.0
0F276:  BRA    F27E
0F278:  MOVLB  0
0F27A:  GOTO   F2B0
0F27E:  MOVLB  0
0F280:  BTFSS  FD8.2
0F282:  GOTO   F30A
0F286:  MOVLB  2
0F288:  MOVF   x76,W
0F28A:  SUBWF  x6E,W
0F28C:  BTFSC  FD8.0
0F28E:  BRA    F296
0F290:  MOVLB  0
0F292:  GOTO   F2B0
0F296:  MOVLB  0
0F298:  BTFSS  FD8.2
0F29A:  GOTO   F30A
0F29E:  MOVLB  2
0F2A0:  MOVF   x6D,W
0F2A2:  SUBWF  x75,W
0F2A4:  BTFSC  FD8.0
0F2A6:  BRA    F2AE
0F2A8:  MOVLB  0
0F2AA:  GOTO   F30A
0F2AE:  MOVLB  0
0F2B0:  MOVLB  2
0F2B2:  MOVF   x74,W
0F2B4:  SUBWF  x78,W
0F2B6:  BTFSC  FD8.0
0F2B8:  BRA    F2C0
0F2BA:  MOVLB  0
0F2BC:  GOTO   F42E
0F2C0:  MOVLB  0
0F2C2:  BTFSS  FD8.2
0F2C4:  GOTO   F30A
0F2C8:  MOVLB  2
0F2CA:  MOVF   x73,W
0F2CC:  SUBWF  x77,W
0F2CE:  BTFSC  FD8.0
0F2D0:  BRA    F2D8
0F2D2:  MOVLB  0
0F2D4:  GOTO   F42E
0F2D8:  MOVLB  0
0F2DA:  BTFSS  FD8.2
0F2DC:  GOTO   F30A
0F2E0:  MOVLB  2
0F2E2:  MOVF   x72,W
0F2E4:  SUBWF  x76,W
0F2E6:  BTFSC  FD8.0
0F2E8:  BRA    F2F0
0F2EA:  MOVLB  0
0F2EC:  GOTO   F42E
0F2F0:  MOVLB  0
0F2F2:  BTFSS  FD8.2
0F2F4:  GOTO   F30A
0F2F8:  MOVLB  2
0F2FA:  MOVF   x71,W
0F2FC:  SUBWF  x75,W
0F2FE:  BTFSC  FD8.0
0F300:  BRA    F308
0F302:  MOVLB  0
0F304:  GOTO   F42E
0F308:  MOVLB  0
....................         fprintf(PC, "Error: Read address 0x%08LX out of SMF mission range [0x%08LX - 0x%08LX)\r\n",
....................                 read_address, (unsigned int32)smf_address.start_address, (unsigned int32)smf_address.end_address);
0F30A:  MOVLW  58
0F30C:  MOVWF  FF6
0F30E:  MOVLW  0A
0F310:  MOVWF  FF7
0F312:  MOVLW  00
0F314:  MOVWF  FF8
0F316:  MOVLW  16
0F318:  MOVLB  3
0F31A:  MOVWF  x16
0F31C:  MOVLB  0
0F31E:  CALL   1F12
0F322:  MOVFF  278,A62
0F326:  MOVLW  37
0F328:  MOVLB  A
0F32A:  MOVWF  x63
0F32C:  MOVLB  0
0F32E:  CALL   2126
0F332:  MOVFF  277,A62
0F336:  MOVLW  37
0F338:  MOVLB  A
0F33A:  MOVWF  x63
0F33C:  MOVLB  0
0F33E:  CALL   2126
0F342:  MOVFF  276,A62
0F346:  MOVLW  37
0F348:  MOVLB  A
0F34A:  MOVWF  x63
0F34C:  MOVLB  0
0F34E:  CALL   2126
0F352:  MOVFF  275,A62
0F356:  MOVLW  37
0F358:  MOVLB  A
0F35A:  MOVWF  x63
0F35C:  MOVLB  0
0F35E:  CALL   2126
0F362:  MOVLW  73
0F364:  MOVWF  FF6
0F366:  MOVLW  0A
0F368:  MOVWF  FF7
0F36A:  MOVLW  00
0F36C:  MOVWF  FF8
0F36E:  MOVLW  1D
0F370:  MOVLB  3
0F372:  MOVWF  x16
0F374:  MOVLB  0
0F376:  CALL   1F12
0F37A:  MOVFF  270,A62
0F37E:  MOVLW  37
0F380:  MOVLB  A
0F382:  MOVWF  x63
0F384:  MOVLB  0
0F386:  CALL   2126
0F38A:  MOVFF  26F,A62
0F38E:  MOVLW  37
0F390:  MOVLB  A
0F392:  MOVWF  x63
0F394:  MOVLB  0
0F396:  CALL   2126
0F39A:  MOVFF  26E,A62
0F39E:  MOVLW  37
0F3A0:  MOVLB  A
0F3A2:  MOVWF  x63
0F3A4:  MOVLB  0
0F3A6:  CALL   2126
0F3AA:  MOVFF  26D,A62
0F3AE:  MOVLW  37
0F3B0:  MOVLB  A
0F3B2:  MOVWF  x63
0F3B4:  MOVLB  0
0F3B6:  CALL   2126
0F3BA:  MOVLW  95
0F3BC:  MOVWF  FF6
0F3BE:  MOVLW  0A
0F3C0:  MOVWF  FF7
0F3C2:  MOVLW  00
0F3C4:  MOVWF  FF8
0F3C6:  MOVLW  05
0F3C8:  MOVLB  3
0F3CA:  MOVWF  x16
0F3CC:  MOVLB  0
0F3CE:  CALL   1F12
0F3D2:  MOVFF  274,A62
0F3D6:  MOVLW  37
0F3D8:  MOVLB  A
0F3DA:  MOVWF  x63
0F3DC:  MOVLB  0
0F3DE:  CALL   2126
0F3E2:  MOVFF  273,A62
0F3E6:  MOVLW  37
0F3E8:  MOVLB  A
0F3EA:  MOVWF  x63
0F3EC:  MOVLB  0
0F3EE:  CALL   2126
0F3F2:  MOVFF  272,A62
0F3F6:  MOVLW  37
0F3F8:  MOVLB  A
0F3FA:  MOVWF  x63
0F3FC:  MOVLB  0
0F3FE:  CALL   2126
0F402:  MOVFF  271,A62
0F406:  MOVLW  37
0F408:  MOVLB  A
0F40A:  MOVWF  x63
0F40C:  MOVLB  0
0F40E:  CALL   2126
0F412:  MOVLW  9F
0F414:  MOVWF  FF6
0F416:  MOVLW  0A
0F418:  MOVWF  FF7
0F41A:  MOVLW  00
0F41C:  MOVWF  FF8
0F41E:  MOVLW  03
0F420:  MOVLB  3
0F422:  MOVWF  x16
0F424:  MOVLB  0
0F426:  CALL   1F12
....................         return;
0F42A:  GOTO   F8DE
....................     }
....................     unsigned int32 mission_remaining = (unsigned int32)smf_address.end_address - read_address; // 読める残り
0F42E:  MOVLB  2
0F430:  MOVF   x75,W
0F432:  SUBWF  x71,W
0F434:  MOVWF  x7D
0F436:  MOVF   x76,W
0F438:  SUBWFB x72,W
0F43A:  MOVWF  x7E
0F43C:  MOVF   x77,W
0F43E:  SUBWFB x73,W
0F440:  MOVWF  x7F
0F442:  MOVF   x78,W
0F444:  SUBWFB x74,W
0F446:  MOVWF  x80
....................     if (read_size > mission_remaining) {
0F448:  MOVF   x80,W
0F44A:  SUBWF  x7C,W
0F44C:  BTFSC  FD8.0
0F44E:  BRA    F456
0F450:  MOVLB  0
0F452:  GOTO   F528
0F456:  MOVLB  0
0F458:  BTFSS  FD8.2
0F45A:  GOTO   F4A0
0F45E:  MOVLB  2
0F460:  MOVF   x7F,W
0F462:  SUBWF  x7B,W
0F464:  BTFSC  FD8.0
0F466:  BRA    F46E
0F468:  MOVLB  0
0F46A:  GOTO   F528
0F46E:  MOVLB  0
0F470:  BTFSS  FD8.2
0F472:  GOTO   F4A0
0F476:  MOVLB  2
0F478:  MOVF   x7E,W
0F47A:  SUBWF  x7A,W
0F47C:  BTFSC  FD8.0
0F47E:  BRA    F486
0F480:  MOVLB  0
0F482:  GOTO   F528
0F486:  MOVLB  0
0F488:  BTFSS  FD8.2
0F48A:  GOTO   F4A0
0F48E:  MOVLB  2
0F490:  MOVF   x79,W
0F492:  SUBWF  x7D,W
0F494:  BTFSS  FD8.0
0F496:  BRA    F49E
0F498:  MOVLB  0
0F49A:  GOTO   F528
0F49E:  MOVLB  0
....................         fprintf(PC, "Warn: Adjust read size from %lu to %lu (mission end)\r\n", read_size, mission_remaining);
0F4A0:  MOVLW  A4
0F4A2:  MOVWF  FF6
0F4A4:  MOVLW  0A
0F4A6:  MOVWF  FF7
0F4A8:  MOVLW  00
0F4AA:  MOVWF  FF8
0F4AC:  MOVLW  1C
0F4AE:  MOVLB  3
0F4B0:  MOVWF  x16
0F4B2:  MOVLB  0
0F4B4:  CALL   1F12
0F4B8:  MOVLW  41
0F4BA:  MOVWF  FE9
0F4BC:  MOVFF  27C,2DE
0F4C0:  MOVFF  27B,2DD
0F4C4:  MOVFF  27A,2DC
0F4C8:  MOVFF  279,2DB
0F4CC:  CALL   5DF6
0F4D0:  MOVLW  C3
0F4D2:  MOVWF  FF6
0F4D4:  MOVLW  0A
0F4D6:  MOVWF  FF7
0F4D8:  MOVLW  00
0F4DA:  MOVWF  FF8
0F4DC:  MOVLW  04
0F4DE:  MOVLB  3
0F4E0:  MOVWF  x16
0F4E2:  MOVLB  0
0F4E4:  CALL   1F12
0F4E8:  MOVLW  41
0F4EA:  MOVWF  FE9
0F4EC:  MOVFF  280,2DE
0F4F0:  MOVFF  27F,2DD
0F4F4:  MOVFF  27E,2DC
0F4F8:  MOVFF  27D,2DB
0F4FC:  CALL   5DF6
0F500:  MOVLW  CA
0F502:  MOVWF  FF6
0F504:  MOVLW  0A
0F506:  MOVWF  FF7
0F508:  MOVLW  00
0F50A:  MOVWF  FF8
0F50C:  MOVLW  10
0F50E:  MOVLB  3
0F510:  MOVWF  x16
0F512:  MOVLB  0
0F514:  CALL   1F12
....................         read_size = mission_remaining;
0F518:  MOVFF  280,27C
0F51C:  MOVFF  27F,27B
0F520:  MOVFF  27E,27A
0F524:  MOVFF  27D,279
....................     }
....................     if (read_size == 0) {
0F528:  MOVLB  2
0F52A:  MOVF   x79,F
0F52C:  BTFSC  FD8.2
0F52E:  BRA    F536
0F530:  MOVLB  0
0F532:  GOTO   F57C
0F536:  MOVLB  0
0F538:  MOVLB  2
0F53A:  MOVF   x7A,F
0F53C:  BTFSC  FD8.2
0F53E:  BRA    F546
0F540:  MOVLB  0
0F542:  GOTO   F57C
0F546:  MOVLB  0
0F548:  MOVLB  2
0F54A:  MOVF   x7B,F
0F54C:  BTFSC  FD8.2
0F54E:  BRA    F556
0F550:  MOVLB  0
0F552:  GOTO   F57C
0F556:  MOVLB  0
0F558:  MOVLB  2
0F55A:  MOVF   x7C,F
0F55C:  BTFSC  FD8.2
0F55E:  BRA    F566
0F560:  MOVLB  0
0F562:  GOTO   F57C
0F566:  MOVLB  0
....................         fprintf(PC, "Info: Nothing to read (size=0)\r\n");
0F568:  MOVLW  DC
0F56A:  MOVWF  FF6
0F56C:  MOVLW  0A
0F56E:  MOVWF  FF7
0F570:  MOVLW  00
0F572:  MOVWF  FF8
0F574:  CALL   1EDC
....................         return;
0F578:  GOTO   F8DE
....................     }
.................... 
....................     fprintf(PC, "In SMF Read source data address: %LX\r\n", read_address);
0F57C:  MOVLW  FE
0F57E:  MOVWF  FF6
0F580:  MOVLW  0A
0F582:  MOVWF  FF7
0F584:  MOVLW  00
0F586:  MOVWF  FF8
0F588:  MOVLW  21
0F58A:  MOVLB  3
0F58C:  MOVWF  x16
0F58E:  MOVLB  0
0F590:  CALL   1F12
0F594:  MOVFF  278,A62
0F598:  MOVLW  37
0F59A:  MOVLB  A
0F59C:  MOVWF  x63
0F59E:  MOVLB  0
0F5A0:  CALL   2126
0F5A4:  MOVFF  277,A62
0F5A8:  MOVLW  37
0F5AA:  MOVLB  A
0F5AC:  MOVWF  x63
0F5AE:  MOVLB  0
0F5B0:  CALL   2126
0F5B4:  MOVFF  276,A62
0F5B8:  MOVLW  37
0F5BA:  MOVLB  A
0F5BC:  MOVWF  x63
0F5BE:  MOVLB  0
0F5C0:  CALL   2126
0F5C4:  MOVFF  275,A62
0F5C8:  MOVLW  37
0F5CA:  MOVLB  A
0F5CC:  MOVWF  x63
0F5CE:  MOVLB  0
0F5D0:  CALL   2126
0F5D4:  MOVLW  0D
0F5D6:  BTFSS  FA6.6
0F5D8:  GOTO   F5D6
0F5DC:  MOVLB  E
0F5DE:  MOVWF  xF9
0F5E0:  MOVLW  0A
0F5E2:  MOVLB  0
0F5E4:  BTFSS  FA6.6
0F5E6:  GOTO   F5E4
0F5EA:  MOVLB  E
0F5EC:  MOVWF  xF9
....................     fprintf(PC, "In SMF Read data size          : %lu (0x%lx)\r\n\r\n", read_size, read_size);
0F5EE:  MOVLW  26
0F5F0:  MOVWF  FF6
0F5F2:  MOVLW  0B
0F5F4:  MOVWF  FF7
0F5F6:  MOVLW  00
0F5F8:  MOVWF  FF8
0F5FA:  MOVLW  21
0F5FC:  MOVLB  3
0F5FE:  MOVWF  x16
0F600:  MOVLB  0
0F602:  CALL   1F12
0F606:  MOVLW  41
0F608:  MOVWF  FE9
0F60A:  MOVFF  27C,2DE
0F60E:  MOVFF  27B,2DD
0F612:  MOVFF  27A,2DC
0F616:  MOVFF  279,2DB
0F61A:  CALL   5DF6
0F61E:  MOVLW  4A
0F620:  MOVWF  FF6
0F622:  MOVLW  0B
0F624:  MOVWF  FF7
0F626:  MOVLW  00
0F628:  MOVWF  FF8
0F62A:  MOVLW  04
0F62C:  MOVLB  3
0F62E:  MOVWF  x16
0F630:  MOVLB  0
0F632:  CALL   1F12
0F636:  MOVFF  27C,A62
0F63A:  MOVLW  57
0F63C:  MOVLB  A
0F63E:  MOVWF  x63
0F640:  MOVLB  0
0F642:  CALL   2126
0F646:  MOVFF  27B,A62
0F64A:  MOVLW  57
0F64C:  MOVLB  A
0F64E:  MOVWF  x63
0F650:  MOVLB  0
0F652:  CALL   2126
0F656:  MOVFF  27A,A62
0F65A:  MOVLW  57
0F65C:  MOVLB  A
0F65E:  MOVWF  x63
0F660:  MOVLB  0
0F662:  CALL   2126
0F666:  MOVFF  279,A62
0F66A:  MOVLW  57
0F66C:  MOVLB  A
0F66E:  MOVWF  x63
0F670:  MOVLB  0
0F672:  CALL   2126
0F676:  MOVLW  51
0F678:  MOVWF  FF6
0F67A:  MOVLW  0B
0F67C:  MOVWF  FF7
0F67E:  MOVLW  00
0F680:  MOVWF  FF8
0F682:  MOVLW  05
0F684:  MOVLB  3
0F686:  MOVWF  x16
0F688:  MOVLB  0
0F68A:  CALL   1F12
.................... 
....................     if (!is_connect(smf)){
0F68E:  MOVFF  119,2D4
0F692:  MOVFF  118,2D3
0F696:  MOVFF  117,2D2
0F69A:  MOVFF  116,2D1
0F69E:  CALL   2A3E
0F6A2:  MOVF   01,F
0F6A4:  BTFSS  FD8.2
0F6A6:  GOTO   F6BA
....................         fprintf(PC, "Error: SMF is not connected\r\n");
0F6AA:  MOVLW  58
0F6AC:  MOVWF  FF6
0F6AE:  MOVLW  0B
0F6B0:  MOVWF  FF7
0F6B2:  MOVLW  00
0F6B4:  MOVWF  FF8
0F6B6:  CALL   1EDC
....................     }
....................     fprintf(PC, "READ DATA FROM SMF...\r\n");
0F6BA:  MOVLW  76
0F6BC:  MOVWF  FF6
0F6BE:  MOVLW  0B
0F6C0:  MOVWF  FF7
0F6C2:  MOVLW  00
0F6C4:  MOVWF  FF8
0F6C6:  CALL   1EDC
....................     unsigned int32 end_address = read_address + read_size;
0F6CA:  MOVLB  2
0F6CC:  MOVF   x79,W
0F6CE:  ADDWF  x75,W
0F6D0:  MOVWF  x81
0F6D2:  MOVF   x7A,W
0F6D4:  ADDWFC x76,W
0F6D6:  MOVWF  x82
0F6D8:  MOVF   x7B,W
0F6DA:  ADDWFC x77,W
0F6DC:  MOVWF  x83
0F6DE:  MOVF   x7C,W
0F6E0:  ADDWFC x78,W
0F6E2:  MOVWF  x84
....................     for (unsigned int32 addr = read_address; addr < end_address; addr += PACKET_SIZE) {
0F6E4:  MOVFF  278,288
0F6E8:  MOVFF  277,287
0F6EC:  MOVFF  276,286
0F6F0:  MOVFF  275,285
0F6F4:  MOVLB  0
0F6F6:  MOVLB  2
0F6F8:  MOVF   x88,W
0F6FA:  SUBWF  x84,W
0F6FC:  BTFSC  FD8.0
0F6FE:  BRA    F706
0F700:  MOVLB  0
0F702:  GOTO   F8BE
0F706:  MOVLB  0
0F708:  BTFSS  FD8.2
0F70A:  GOTO   F750
0F70E:  MOVLB  2
0F710:  MOVF   x87,W
0F712:  SUBWF  x83,W
0F714:  BTFSC  FD8.0
0F716:  BRA    F71E
0F718:  MOVLB  0
0F71A:  GOTO   F8BE
0F71E:  MOVLB  0
0F720:  BTFSS  FD8.2
0F722:  GOTO   F750
0F726:  MOVLB  2
0F728:  MOVF   x86,W
0F72A:  SUBWF  x82,W
0F72C:  BTFSC  FD8.0
0F72E:  BRA    F736
0F730:  MOVLB  0
0F732:  GOTO   F8BE
0F736:  MOVLB  0
0F738:  BTFSS  FD8.2
0F73A:  GOTO   F750
0F73E:  MOVLB  2
0F740:  MOVF   x81,W
0F742:  SUBWF  x85,W
0F744:  BTFSS  FD8.0
0F746:  BRA    F74E
0F748:  MOVLB  0
0F74A:  GOTO   F8BE
0F74E:  MOVLB  0
....................         unsigned int16 chunk = (end_address - addr) >= PACKET_SIZE ? PACKET_SIZE : (unsigned int16)(end_address - addr);
0F750:  MOVLB  2
0F752:  MOVF   x85,W
0F754:  SUBWF  x81,W
0F756:  MOVWF  x8D
0F758:  MOVF   x86,W
0F75A:  SUBWFB x82,W
0F75C:  MOVWF  x8E
0F75E:  MOVF   x87,W
0F760:  SUBWFB x83,W
0F762:  MOVWF  x8F
0F764:  MOVF   x88,W
0F766:  SUBWFB x84,W
0F768:  MOVWF  x90
0F76A:  MOVF   x90,F
0F76C:  BTFSC  FD8.2
0F76E:  BRA    F776
0F770:  MOVLB  0
0F772:  GOTO   F7AA
0F776:  MOVLB  0
0F778:  MOVLB  2
0F77A:  MOVF   x8F,F
0F77C:  BTFSC  FD8.2
0F77E:  BRA    F786
0F780:  MOVLB  0
0F782:  GOTO   F7AA
0F786:  MOVLB  0
0F788:  MOVLB  2
0F78A:  MOVF   x8E,F
0F78C:  BTFSC  FD8.2
0F78E:  BRA    F796
0F790:  MOVLB  0
0F792:  GOTO   F7AA
0F796:  MOVLB  0
0F798:  MOVLB  2
0F79A:  MOVF   x8D,W
0F79C:  SUBLW  3F
0F79E:  BTFSS  FD8.0
0F7A0:  BRA    F7A8
0F7A2:  MOVLB  0
0F7A4:  GOTO   F7B2
0F7A8:  MOVLB  0
0F7AA:  CLRF   03
0F7AC:  MOVLW  40
0F7AE:  GOTO   F7D4
0F7B2:  MOVLB  2
0F7B4:  MOVF   x85,W
0F7B6:  SUBWF  x81,W
0F7B8:  MOVWF  00
0F7BA:  MOVF   x86,W
0F7BC:  SUBWFB x82,W
0F7BE:  MOVWF  01
0F7C0:  MOVF   x87,W
0F7C2:  SUBWFB x83,W
0F7C4:  MOVWF  02
0F7C6:  MOVF   x88,W
0F7C8:  SUBWFB x84,W
0F7CA:  MOVWF  03
0F7CC:  MOVFF  01,03
0F7D0:  MOVF   00,W
0F7D2:  MOVLB  0
0F7D4:  MOVLB  2
0F7D6:  MOVWF  x89
0F7D8:  MOVFF  03,28A
0F7DC:  MOVLB  0
....................         read_data_bytes(smf, addr, buffer, chunk);
0F7DE:  MOVFF  119,B4A
0F7E2:  MOVFF  118,B49
0F7E6:  MOVFF  117,B48
0F7EA:  MOVFF  116,B47
0F7EE:  MOVFF  288,B4E
0F7F2:  MOVFF  287,B4D
0F7F6:  MOVFF  286,B4C
0F7FA:  MOVFF  285,B4B
0F7FE:  MOVLW  02
0F800:  MOVLB  B
0F802:  MOVWF  x50
0F804:  MOVLW  2D
0F806:  MOVWF  x4F
0F808:  CLRF   x54
0F80A:  CLRF   x53
0F80C:  MOVFF  28A,B52
0F810:  MOVFF  289,B51
0F814:  MOVLB  0
0F816:  CALL   2B2A
....................         for (unsigned int16 i = 0; i < chunk; i++) fprintf(PC, "%02X ", buffer[i]);
0F81A:  MOVLB  2
0F81C:  CLRF   x8C
0F81E:  CLRF   x8B
0F820:  MOVLB  0
0F822:  MOVLB  2
0F824:  MOVF   x8C,W
0F826:  SUBWF  x8A,W
0F828:  BTFSC  FD8.0
0F82A:  BRA    F832
0F82C:  MOVLB  0
0F82E:  GOTO   F88A
0F832:  MOVLB  0
0F834:  BTFSS  FD8.2
0F836:  GOTO   F84C
0F83A:  MOVLB  2
0F83C:  MOVF   x89,W
0F83E:  SUBWF  x8B,W
0F840:  BTFSS  FD8.0
0F842:  BRA    F84A
0F844:  MOVLB  0
0F846:  GOTO   F88A
0F84A:  MOVLB  0
0F84C:  MOVLW  2D
0F84E:  MOVLB  2
0F850:  ADDWF  x8B,W
0F852:  MOVWF  FE9
0F854:  MOVLW  02
0F856:  ADDWFC x8C,W
0F858:  MOVWF  FEA
0F85A:  MOVFF  FEF,28D
0F85E:  MOVFF  28D,A62
0F862:  MOVLW  37
0F864:  MOVLB  A
0F866:  MOVWF  x63
0F868:  MOVLB  0
0F86A:  CALL   2126
0F86E:  MOVLW  20
0F870:  BTFSS  FA6.6
0F872:  GOTO   F870
0F876:  MOVLB  E
0F878:  MOVWF  xF9
0F87A:  MOVLB  0
0F87C:  MOVLB  2
0F87E:  INCF   x8B,F
0F880:  BTFSC  FD8.2
0F882:  INCF   x8C,F
0F884:  MOVLB  0
0F886:  GOTO   F822
....................         fprintf(PC, "\r\n");
0F88A:  MOVLW  0D
0F88C:  BTFSS  FA6.6
0F88E:  GOTO   F88C
0F892:  MOVLB  E
0F894:  MOVWF  xF9
0F896:  MOVLW  0A
0F898:  MOVLB  0
0F89A:  BTFSS  FA6.6
0F89C:  GOTO   F89A
0F8A0:  MOVLB  E
0F8A2:  MOVWF  xF9
0F8A4:  MOVLB  0
0F8A6:  MOVLW  40
0F8A8:  MOVLB  2
0F8AA:  ADDWF  x85,F
0F8AC:  MOVLW  00
0F8AE:  ADDWFC x86,F
0F8B0:  MOVLW  00
0F8B2:  ADDWFC x87,F
0F8B4:  MOVLW  00
0F8B6:  ADDWFC x88,F
0F8B8:  MOVLB  0
0F8BA:  GOTO   F6F6
....................     }
....................     fprintf(PC, "\r\n___End SMF Read____\r\n");
0F8BE:  MOVLW  8E
0F8C0:  MOVWF  FF6
0F8C2:  MOVLW  0B
0F8C4:  MOVWF  FF7
0F8C6:  MOVLW  00
0F8C8:  MOVWF  FF8
0F8CA:  CALL   1EDC
....................     fprintf(PC, "____________________\r\n\r\n");
0F8CE:  MOVLW  A6
0F8D0:  MOVWF  FF6
0F8D2:  MOVLW  0B
0F8D4:  MOVWF  FF7
0F8D6:  MOVLW  00
0F8D8:  MOVWF  FF8
0F8DA:  CALL   1EDC
0F8DE:  GOTO   10202 (RETURN)
.................... }
.................... 
.................... void smf_erase(FlashOperationStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
0F8E2:  MOVLW  C0
0F8E4:  MOVWF  FF6
0F8E6:  MOVLW  0B
0F8E8:  MOVWF  FF7
0F8EA:  MOVLW  00
0F8EC:  MOVWF  FF8
0F8EE:  CALL   1EDC
....................     fprintf(PC, "___Start smf_erase____\r\n");
0F8F2:  MOVLW  DA
0F8F4:  MOVWF  FF6
0F8F6:  MOVLW  0B
0F8F8:  MOVWF  FF7
0F8FA:  MOVLW  00
0F8FC:  MOVWF  FF8
0F8FE:  CALL   1EDC
.................... 
....................     SmfAddressStruct mission_type = get_smf_address_struct(smf_data->mission_id);
....................     unsigned int32 erase_address = smf_data->misf_start_addr;
....................     unsigned int32 erase_size = smf_data->misf_size;
0F902:  MOVLB  2
0F904:  MOVF   x2B,W
0F906:  MOVWF  FE9
0F908:  MOVF   x2C,W
0F90A:  MOVWF  FEA
0F90C:  MOVFF  FEF,245
0F910:  MOVFF  245,294
0F914:  MOVLB  0
0F916:  CALL   F02C
0F91A:  MOVFF  02,03
0F91E:  MOVF   01,W
0F920:  MOVWF  FE1
0F922:  MOVFF  03,FE2
0F926:  MOVLW  02
0F928:  MOVWF  FEA
0F92A:  MOVLW  2D
0F92C:  MOVWF  FE9
0F92E:  MOVLW  08
0F930:  MOVWF  01
0F932:  MOVFF  FE6,FEE
0F936:  DECFSZ 01,F
0F938:  GOTO   F932
0F93C:  MOVLW  04
0F93E:  MOVLB  2
0F940:  ADDWF  x2B,W
0F942:  MOVWF  FE9
0F944:  MOVLW  00
0F946:  ADDWFC x2C,W
0F948:  MOVWF  FEA
0F94A:  MOVFF  FEF,235
0F94E:  MOVFF  FEC,236
0F952:  MOVFF  FEC,237
0F956:  MOVFF  FEC,238
0F95A:  MOVF   FED,F
0F95C:  MOVF   FED,F
0F95E:  MOVF   FED,F
0F960:  MOVLW  08
0F962:  ADDWF  x2B,W
0F964:  MOVWF  FE9
0F966:  MOVLW  00
0F968:  ADDWFC x2C,W
0F96A:  MOVWF  FEA
0F96C:  MOVFF  FEF,239
0F970:  MOVFF  FEC,23A
0F974:  MOVFF  FEC,23B
0F978:  MOVFF  FEC,23C
0F97C:  MOVF   FED,F
0F97E:  MOVF   FED,F
0F980:  MOVF   FED,F
....................     fprintf(PC, "[SMF] Erase address   : %LX\r\n", erase_address);
0F982:  MOVLW  F4
0F984:  MOVWF  FF6
0F986:  MOVLW  0B
0F988:  MOVWF  FF7
0F98A:  MOVLW  00
0F98C:  MOVWF  FF8
0F98E:  MOVLW  18
0F990:  MOVLB  3
0F992:  MOVWF  x16
0F994:  MOVLB  0
0F996:  CALL   1F12
0F99A:  MOVFF  238,A62
0F99E:  MOVLW  37
0F9A0:  MOVLB  A
0F9A2:  MOVWF  x63
0F9A4:  MOVLB  0
0F9A6:  CALL   2126
0F9AA:  MOVFF  237,A62
0F9AE:  MOVLW  37
0F9B0:  MOVLB  A
0F9B2:  MOVWF  x63
0F9B4:  MOVLB  0
0F9B6:  CALL   2126
0F9BA:  MOVFF  236,A62
0F9BE:  MOVLW  37
0F9C0:  MOVLB  A
0F9C2:  MOVWF  x63
0F9C4:  MOVLB  0
0F9C6:  CALL   2126
0F9CA:  MOVFF  235,A62
0F9CE:  MOVLW  37
0F9D0:  MOVLB  A
0F9D2:  MOVWF  x63
0F9D4:  MOVLB  0
0F9D6:  CALL   2126
0F9DA:  MOVLW  0D
0F9DC:  BTFSS  FA6.6
0F9DE:  GOTO   F9DC
0F9E2:  MOVLB  E
0F9E4:  MOVWF  xF9
0F9E6:  MOVLW  0A
0F9E8:  MOVLB  0
0F9EA:  BTFSS  FA6.6
0F9EC:  GOTO   F9EA
0F9F0:  MOVLB  E
0F9F2:  MOVWF  xF9
....................     fprintf(PC, "[SMF] Erase data size : %lu (0x%lx)\r\n\r\n", erase_size, erase_size);
0F9F4:  MOVLW  12
0F9F6:  MOVWF  FF6
0F9F8:  MOVLW  0C
0F9FA:  MOVWF  FF7
0F9FC:  MOVLW  00
0F9FE:  MOVWF  FF8
0FA00:  MOVLW  18
0FA02:  MOVLB  3
0FA04:  MOVWF  x16
0FA06:  MOVLB  0
0FA08:  CALL   1F12
0FA0C:  MOVLW  41
0FA0E:  MOVWF  FE9
0FA10:  MOVFF  23C,2DE
0FA14:  MOVFF  23B,2DD
0FA18:  MOVFF  23A,2DC
0FA1C:  MOVFF  239,2DB
0FA20:  CALL   5DF6
0FA24:  MOVLW  2D
0FA26:  MOVWF  FF6
0FA28:  MOVLW  0C
0FA2A:  MOVWF  FF7
0FA2C:  MOVLW  00
0FA2E:  MOVWF  FF8
0FA30:  MOVLW  04
0FA32:  MOVLB  3
0FA34:  MOVWF  x16
0FA36:  MOVLB  0
0FA38:  CALL   1F12
0FA3C:  MOVFF  23C,A62
0FA40:  MOVLW  57
0FA42:  MOVLB  A
0FA44:  MOVWF  x63
0FA46:  MOVLB  0
0FA48:  CALL   2126
0FA4C:  MOVFF  23B,A62
0FA50:  MOVLW  57
0FA52:  MOVLB  A
0FA54:  MOVWF  x63
0FA56:  MOVLB  0
0FA58:  CALL   2126
0FA5C:  MOVFF  23A,A62
0FA60:  MOVLW  57
0FA62:  MOVLB  A
0FA64:  MOVWF  x63
0FA66:  MOVLB  0
0FA68:  CALL   2126
0FA6C:  MOVFF  239,A62
0FA70:  MOVLW  57
0FA72:  MOVLB  A
0FA74:  MOVWF  x63
0FA76:  MOVLB  0
0FA78:  CALL   2126
0FA7C:  MOVLW  34
0FA7E:  MOVWF  FF6
0FA80:  MOVLW  0C
0FA82:  MOVWF  FF7
0FA84:  MOVLW  00
0FA86:  MOVWF  FF8
0FA88:  MOVLW  05
0FA8A:  MOVLB  3
0FA8C:  MOVWF  x16
0FA8E:  MOVLB  0
0FA90:  CALL   1F12
.................... 
....................     if (!is_connect(smf)){
0FA94:  MOVFF  119,2D4
0FA98:  MOVFF  118,2D3
0FA9C:  MOVFF  117,2D2
0FAA0:  MOVFF  116,2D1
0FAA4:  CALL   2A3E
0FAA8:  MOVF   01,F
0FAAA:  BTFSS  FD8.2
0FAAC:  GOTO   FAC4
....................         fprintf(PC, "Error: SMF is not connected\r\n");
0FAB0:  MOVLW  3A
0FAB2:  MOVWF  FF6
0FAB4:  MOVLW  0C
0FAB6:  MOVWF  FF7
0FAB8:  MOVLW  00
0FABA:  MOVWF  FF8
0FABC:  CALL   1EDC
....................         return;
0FAC0:  GOTO   FF60
....................     }
.................... 
....................     // Check if erase operation is within mission_type range
....................     if (erase_address < mission_type.start_address || erase_address >= mission_type.end_address) {
0FAC4:  MOVLB  2
0FAC6:  MOVF   x38,W
0FAC8:  SUBWF  x30,W
0FACA:  BTFSC  FD8.0
0FACC:  BRA    FAD4
0FACE:  MOVLB  0
0FAD0:  GOTO   FB1E
0FAD4:  MOVLB  0
0FAD6:  BTFSS  FD8.2
0FAD8:  GOTO   FB78
0FADC:  MOVLB  2
0FADE:  MOVF   x37,W
0FAE0:  SUBWF  x2F,W
0FAE2:  BTFSC  FD8.0
0FAE4:  BRA    FAEC
0FAE6:  MOVLB  0
0FAE8:  GOTO   FB1E
0FAEC:  MOVLB  0
0FAEE:  BTFSS  FD8.2
0FAF0:  GOTO   FB78
0FAF4:  MOVLB  2
0FAF6:  MOVF   x36,W
0FAF8:  SUBWF  x2E,W
0FAFA:  BTFSC  FD8.0
0FAFC:  BRA    FB04
0FAFE:  MOVLB  0
0FB00:  GOTO   FB1E
0FB04:  MOVLB  0
0FB06:  BTFSS  FD8.2
0FB08:  GOTO   FB78
0FB0C:  MOVLB  2
0FB0E:  MOVF   x2D,W
0FB10:  SUBWF  x35,W
0FB12:  BTFSC  FD8.0
0FB14:  BRA    FB1C
0FB16:  MOVLB  0
0FB18:  GOTO   FB78
0FB1C:  MOVLB  0
0FB1E:  MOVLB  2
0FB20:  MOVF   x34,W
0FB22:  SUBWF  x38,W
0FB24:  BTFSC  FD8.0
0FB26:  BRA    FB2E
0FB28:  MOVLB  0
0FB2A:  GOTO   FC9C
0FB2E:  MOVLB  0
0FB30:  BTFSS  FD8.2
0FB32:  GOTO   FB78
0FB36:  MOVLB  2
0FB38:  MOVF   x33,W
0FB3A:  SUBWF  x37,W
0FB3C:  BTFSC  FD8.0
0FB3E:  BRA    FB46
0FB40:  MOVLB  0
0FB42:  GOTO   FC9C
0FB46:  MOVLB  0
0FB48:  BTFSS  FD8.2
0FB4A:  GOTO   FB78
0FB4E:  MOVLB  2
0FB50:  MOVF   x32,W
0FB52:  SUBWF  x36,W
0FB54:  BTFSC  FD8.0
0FB56:  BRA    FB5E
0FB58:  MOVLB  0
0FB5A:  GOTO   FC9C
0FB5E:  MOVLB  0
0FB60:  BTFSS  FD8.2
0FB62:  GOTO   FB78
0FB66:  MOVLB  2
0FB68:  MOVF   x31,W
0FB6A:  SUBWF  x35,W
0FB6C:  BTFSC  FD8.0
0FB6E:  BRA    FB76
0FB70:  MOVLB  0
0FB72:  GOTO   FC9C
0FB76:  MOVLB  0
....................         fprintf(PC, "Error: Erase source address 0x%LX is outside mission range [0x%LX - 0x%LX]\r\n", 
....................                 erase_address, mission_type.start_address, mission_type.end_address);
0FB78:  MOVLW  58
0FB7A:  MOVWF  FF6
0FB7C:  MOVLW  0C
0FB7E:  MOVWF  FF7
0FB80:  MOVLW  00
0FB82:  MOVWF  FF8
0FB84:  MOVLW  1E
0FB86:  MOVLB  3
0FB88:  MOVWF  x16
0FB8A:  MOVLB  0
0FB8C:  CALL   1F12
0FB90:  MOVFF  238,A62
0FB94:  MOVLW  37
0FB96:  MOVLB  A
0FB98:  MOVWF  x63
0FB9A:  MOVLB  0
0FB9C:  CALL   2126
0FBA0:  MOVFF  237,A62
0FBA4:  MOVLW  37
0FBA6:  MOVLB  A
0FBA8:  MOVWF  x63
0FBAA:  MOVLB  0
0FBAC:  CALL   2126
0FBB0:  MOVFF  236,A62
0FBB4:  MOVLW  37
0FBB6:  MOVLB  A
0FBB8:  MOVWF  x63
0FBBA:  MOVLB  0
0FBBC:  CALL   2126
0FBC0:  MOVFF  235,A62
0FBC4:  MOVLW  37
0FBC6:  MOVLB  A
0FBC8:  MOVWF  x63
0FBCA:  MOVLB  0
0FBCC:  CALL   2126
0FBD0:  MOVLW  79
0FBD2:  MOVWF  FF6
0FBD4:  MOVLW  0C
0FBD6:  MOVWF  FF7
0FBD8:  MOVLW  00
0FBDA:  MOVWF  FF8
0FBDC:  MOVLW  1D
0FBDE:  MOVLB  3
0FBE0:  MOVWF  x16
0FBE2:  MOVLB  0
0FBE4:  CALL   1F12
0FBE8:  MOVFF  230,A62
0FBEC:  MOVLW  37
0FBEE:  MOVLB  A
0FBF0:  MOVWF  x63
0FBF2:  MOVLB  0
0FBF4:  CALL   2126
0FBF8:  MOVFF  22F,A62
0FBFC:  MOVLW  37
0FBFE:  MOVLB  A
0FC00:  MOVWF  x63
0FC02:  MOVLB  0
0FC04:  CALL   2126
0FC08:  MOVFF  22E,A62
0FC0C:  MOVLW  37
0FC0E:  MOVLB  A
0FC10:  MOVWF  x63
0FC12:  MOVLB  0
0FC14:  CALL   2126
0FC18:  MOVFF  22D,A62
0FC1C:  MOVLW  37
0FC1E:  MOVLB  A
0FC20:  MOVWF  x63
0FC22:  MOVLB  0
0FC24:  CALL   2126
0FC28:  MOVLW  99
0FC2A:  MOVWF  FF6
0FC2C:  MOVLW  0C
0FC2E:  MOVWF  FF7
0FC30:  MOVLW  00
0FC32:  MOVWF  FF8
0FC34:  MOVLW  05
0FC36:  MOVLB  3
0FC38:  MOVWF  x16
0FC3A:  MOVLB  0
0FC3C:  CALL   1F12
0FC40:  MOVFF  234,A62
0FC44:  MOVLW  37
0FC46:  MOVLB  A
0FC48:  MOVWF  x63
0FC4A:  MOVLB  0
0FC4C:  CALL   2126
0FC50:  MOVFF  233,A62
0FC54:  MOVLW  37
0FC56:  MOVLB  A
0FC58:  MOVWF  x63
0FC5A:  MOVLB  0
0FC5C:  CALL   2126
0FC60:  MOVFF  232,A62
0FC64:  MOVLW  37
0FC66:  MOVLB  A
0FC68:  MOVWF  x63
0FC6A:  MOVLB  0
0FC6C:  CALL   2126
0FC70:  MOVFF  231,A62
0FC74:  MOVLW  37
0FC76:  MOVLB  A
0FC78:  MOVWF  x63
0FC7A:  MOVLB  0
0FC7C:  CALL   2126
0FC80:  MOVLW  A1
0FC82:  MOVWF  FF6
0FC84:  MOVLW  0C
0FC86:  MOVWF  FF7
0FC88:  MOVLW  00
0FC8A:  MOVWF  FF8
0FC8C:  MOVLW  03
0FC8E:  MOVLB  3
0FC90:  MOVWF  x16
0FC92:  MOVLB  0
0FC94:  CALL   1F12
....................         return;
0FC98:  GOTO   FF60
....................     }
.................... 
....................     if ((erase_address + erase_size) > mission_type.end_address) {
0FC9C:  MOVLB  2
0FC9E:  MOVF   x39,W
0FCA0:  ADDWF  x35,W
0FCA2:  MOVWF  x45
0FCA4:  MOVF   x3A,W
0FCA6:  ADDWFC x36,W
0FCA8:  MOVWF  x46
0FCAA:  MOVF   x3B,W
0FCAC:  ADDWFC x37,W
0FCAE:  MOVWF  x47
0FCB0:  MOVF   x3C,W
0FCB2:  ADDWFC x38,W
0FCB4:  MOVWF  x48
0FCB6:  MOVF   x34,W
0FCB8:  SUBWF  x48,W
0FCBA:  BTFSC  FD8.0
0FCBC:  BRA    FCC4
0FCBE:  MOVLB  0
0FCC0:  GOTO   FDAE
0FCC4:  MOVLB  0
0FCC6:  BTFSS  FD8.2
0FCC8:  GOTO   FD0E
0FCCC:  MOVLB  2
0FCCE:  MOVF   x33,W
0FCD0:  SUBWF  x47,W
0FCD2:  BTFSC  FD8.0
0FCD4:  BRA    FCDC
0FCD6:  MOVLB  0
0FCD8:  GOTO   FDAE
0FCDC:  MOVLB  0
0FCDE:  BTFSS  FD8.2
0FCE0:  GOTO   FD0E
0FCE4:  MOVLB  2
0FCE6:  MOVF   x32,W
0FCE8:  SUBWF  x46,W
0FCEA:  BTFSC  FD8.0
0FCEC:  BRA    FCF4
0FCEE:  MOVLB  0
0FCF0:  GOTO   FDAE
0FCF4:  MOVLB  0
0FCF6:  BTFSS  FD8.2
0FCF8:  GOTO   FD0E
0FCFC:  MOVLB  2
0FCFE:  MOVF   x45,W
0FD00:  SUBWF  x31,W
0FD02:  BTFSS  FD8.0
0FD04:  BRA    FD0C
0FD06:  MOVLB  0
0FD08:  GOTO   FDAE
0FD0C:  MOVLB  0
....................         fprintf(PC, "Error: Erase operation would exceed mission end address 0x%LX\r\n", mission_type.end_address);
0FD0E:  MOVLW  A6
0FD10:  MOVWF  FF6
0FD12:  MOVLW  0C
0FD14:  MOVWF  FF7
0FD16:  MOVLW  00
0FD18:  MOVWF  FF8
0FD1A:  MOVLW  3A
0FD1C:  MOVLB  3
0FD1E:  MOVWF  x16
0FD20:  MOVLB  0
0FD22:  CALL   1F12
0FD26:  MOVFF  234,A62
0FD2A:  MOVLW  37
0FD2C:  MOVLB  A
0FD2E:  MOVWF  x63
0FD30:  MOVLB  0
0FD32:  CALL   2126
0FD36:  MOVFF  233,A62
0FD3A:  MOVLW  37
0FD3C:  MOVLB  A
0FD3E:  MOVWF  x63
0FD40:  MOVLB  0
0FD42:  CALL   2126
0FD46:  MOVFF  232,A62
0FD4A:  MOVLW  37
0FD4C:  MOVLB  A
0FD4E:  MOVWF  x63
0FD50:  MOVLB  0
0FD52:  CALL   2126
0FD56:  MOVFF  231,A62
0FD5A:  MOVLW  37
0FD5C:  MOVLB  A
0FD5E:  MOVWF  x63
0FD60:  MOVLB  0
0FD62:  CALL   2126
0FD66:  MOVLW  0D
0FD68:  BTFSS  FA6.6
0FD6A:  GOTO   FD68
0FD6E:  MOVLB  E
0FD70:  MOVWF  xF9
0FD72:  MOVLW  0A
0FD74:  MOVLB  0
0FD76:  BTFSS  FA6.6
0FD78:  GOTO   FD76
0FD7C:  MOVLB  E
0FD7E:  MOVWF  xF9
....................         fprintf(PC, "Limiting erase size to stay within mission bounds\r\n");
0FD80:  MOVLW  E6
0FD82:  MOVWF  FF6
0FD84:  MOVLW  0C
0FD86:  MOVWF  FF7
0FD88:  MOVLW  00
0FD8A:  MOVWF  FF8
0FD8C:  MOVLB  0
0FD8E:  CALL   1EDC
....................         erase_size = mission_type.end_address - erase_address;
0FD92:  MOVLB  2
0FD94:  MOVF   x35,W
0FD96:  SUBWF  x31,W
0FD98:  MOVWF  x39
0FD9A:  MOVF   x36,W
0FD9C:  SUBWFB x32,W
0FD9E:  MOVWF  x3A
0FDA0:  MOVF   x37,W
0FDA2:  SUBWFB x33,W
0FDA4:  MOVWF  x3B
0FDA6:  MOVF   x38,W
0FDA8:  SUBWFB x34,W
0FDAA:  MOVWF  x3C
0FDAC:  MOVLB  0
....................     }
.................... 
....................     fprintf(PC, "Erase operation validated within mission range\r\n");
0FDAE:  MOVLW  1A
0FDB0:  MOVWF  FF6
0FDB2:  MOVLW  0D
0FDB4:  MOVWF  FF7
0FDB6:  MOVLW  00
0FDB8:  MOVWF  FF8
0FDBA:  CALL   1EDC
....................     unsigned int32 erase_end = erase_address + erase_size;
....................     // 4KB境界開始へアライン
....................     unsigned int32 current = erase_address & ~0xFFF;
0FDBE:  MOVLB  2
0FDC0:  MOVF   x39,W
0FDC2:  ADDWF  x35,W
0FDC4:  MOVWF  x3D
0FDC6:  MOVF   x3A,W
0FDC8:  ADDWFC x36,W
0FDCA:  MOVWF  x3E
0FDCC:  MOVF   x3B,W
0FDCE:  ADDWFC x37,W
0FDD0:  MOVWF  x3F
0FDD2:  MOVF   x3C,W
0FDD4:  ADDWFC x38,W
0FDD6:  MOVWF  x40
0FDD8:  CLRF   x41
0FDDA:  MOVF   x36,W
0FDDC:  ANDLW  F0
0FDDE:  MOVWF  x42
0FDE0:  CLRF   x43
0FDE2:  CLRF   x44
0FDE4:  MOVLB  0
....................     while (current < erase_end && current < (unsigned int32)mission_type.end_address) {
0FDE6:  MOVLB  2
0FDE8:  MOVF   x44,W
0FDEA:  SUBWF  x40,W
0FDEC:  BTFSC  FD8.0
0FDEE:  BRA    FDF6
0FDF0:  MOVLB  0
0FDF2:  GOTO   FED2
0FDF6:  MOVLB  0
0FDF8:  BTFSS  FD8.2
0FDFA:  GOTO   FE40
0FDFE:  MOVLB  2
0FE00:  MOVF   x43,W
0FE02:  SUBWF  x3F,W
0FE04:  BTFSC  FD8.0
0FE06:  BRA    FE0E
0FE08:  MOVLB  0
0FE0A:  GOTO   FED2
0FE0E:  MOVLB  0
0FE10:  BTFSS  FD8.2
0FE12:  GOTO   FE40
0FE16:  MOVLB  2
0FE18:  MOVF   x42,W
0FE1A:  SUBWF  x3E,W
0FE1C:  BTFSC  FD8.0
0FE1E:  BRA    FE26
0FE20:  MOVLB  0
0FE22:  GOTO   FED2
0FE26:  MOVLB  0
0FE28:  BTFSS  FD8.2
0FE2A:  GOTO   FE40
0FE2E:  MOVLB  2
0FE30:  MOVF   x3D,W
0FE32:  SUBWF  x41,W
0FE34:  BTFSS  FD8.0
0FE36:  BRA    FE3E
0FE38:  MOVLB  0
0FE3A:  GOTO   FED2
0FE3E:  MOVLB  0
0FE40:  MOVLB  2
0FE42:  MOVF   x44,W
0FE44:  SUBWF  x34,W
0FE46:  BTFSC  FD8.0
0FE48:  BRA    FE50
0FE4A:  MOVLB  0
0FE4C:  GOTO   FED2
0FE50:  MOVLB  0
0FE52:  BTFSS  FD8.2
0FE54:  GOTO   FE9A
0FE58:  MOVLB  2
0FE5A:  MOVF   x43,W
0FE5C:  SUBWF  x33,W
0FE5E:  BTFSC  FD8.0
0FE60:  BRA    FE68
0FE62:  MOVLB  0
0FE64:  GOTO   FED2
0FE68:  MOVLB  0
0FE6A:  BTFSS  FD8.2
0FE6C:  GOTO   FE9A
0FE70:  MOVLB  2
0FE72:  MOVF   x42,W
0FE74:  SUBWF  x32,W
0FE76:  BTFSC  FD8.0
0FE78:  BRA    FE80
0FE7A:  MOVLB  0
0FE7C:  GOTO   FED2
0FE80:  MOVLB  0
0FE82:  BTFSS  FD8.2
0FE84:  GOTO   FE9A
0FE88:  MOVLB  2
0FE8A:  MOVF   x31,W
0FE8C:  SUBWF  x41,W
0FE8E:  BTFSS  FD8.0
0FE90:  BRA    FE98
0FE92:  MOVLB  0
0FE94:  GOTO   FED2
0FE98:  MOVLB  0
....................         subsector_4kByte_erase(smf, current);
0FE9A:  MOVFF  119,31B
0FE9E:  MOVFF  118,31A
0FEA2:  MOVFF  117,319
0FEA6:  MOVFF  116,318
0FEAA:  MOVFF  244,31F
0FEAE:  MOVFF  243,31E
0FEB2:  MOVFF  242,31D
0FEB6:  MOVFF  241,31C
0FEBA:  CALL   56B4
....................         current += SUBSECTOR_SIZE;
0FEBE:  MOVLW  10
0FEC0:  MOVLB  2
0FEC2:  ADDWF  x42,F
0FEC4:  MOVLW  00
0FEC6:  ADDWFC x43,F
0FEC8:  MOVLW  00
0FECA:  ADDWFC x44,F
0FECC:  MOVLB  0
0FECE:  GOTO   FDE6
....................     }
....................     fprintf(PC, "Erased %lu bytes (aligned)\r\n", (current - (erase_address & ~0xFFF)));
0FED2:  CLRF   00
0FED4:  MOVLB  2
0FED6:  MOVF   x36,W
0FED8:  ANDLW  F0
0FEDA:  MOVWF  01
0FEDC:  CLRF   02
0FEDE:  CLRF   03
0FEE0:  MOVF   00,W
0FEE2:  SUBWF  x41,W
0FEE4:  MOVWF  x45
0FEE6:  MOVF   01,W
0FEE8:  SUBWFB x42,W
0FEEA:  MOVWF  x46
0FEEC:  MOVF   02,W
0FEEE:  SUBWFB x43,W
0FEF0:  MOVWF  x47
0FEF2:  MOVF   03,W
0FEF4:  SUBWFB x44,W
0FEF6:  MOVWF  x48
0FEF8:  MOVLW  4C
0FEFA:  MOVWF  FF6
0FEFC:  MOVLW  0D
0FEFE:  MOVWF  FF7
0FF00:  MOVLW  00
0FF02:  MOVWF  FF8
0FF04:  MOVLW  07
0FF06:  MOVLB  3
0FF08:  MOVWF  x16
0FF0A:  MOVLB  0
0FF0C:  CALL   1F12
0FF10:  MOVLW  41
0FF12:  MOVWF  FE9
0FF14:  MOVFF  248,2DE
0FF18:  MOVFF  247,2DD
0FF1C:  MOVFF  246,2DC
0FF20:  MOVFF  245,2DB
0FF24:  CALL   5DF6
0FF28:  MOVLW  56
0FF2A:  MOVWF  FF6
0FF2C:  MOVLW  0D
0FF2E:  MOVWF  FF7
0FF30:  MOVLW  00
0FF32:  MOVWF  FF8
0FF34:  MOVLW  12
0FF36:  MOVLB  3
0FF38:  MOVWF  x16
0FF3A:  MOVLB  0
0FF3C:  CALL   1F12
.................... 
....................     fprintf(PC, "\r\n___End smf_erase____\r\n");
0FF40:  MOVLW  6A
0FF42:  MOVWF  FF6
0FF44:  MOVLW  0D
0FF46:  MOVWF  FF7
0FF48:  MOVLW  00
0FF4A:  MOVWF  FF8
0FF4C:  CALL   1EDC
....................     fprintf(PC, "____________________\r\n\r\n");
0FF50:  MOVLW  84
0FF52:  MOVWF  FF6
0FF54:  MOVLW  0D
0FF56:  MOVWF  FF7
0FF58:  MOVLW  00
0FF5A:  MOVWF  FF8
0FF5C:  CALL   1EDC
0FF60:  GOTO   10212 (RETURN)
.................... }
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id)
.................... {
....................     switch(mission_id)
....................     {
....................         case 0x01:  // CIGS_MEASURE_DATA
....................             return &param.iv1_data;
....................         case 0x02:  // CIGS_PICLOG
....................             return &param.piclog;
....................         default:
....................             fprintf(PC, "Error: Unknown mission_id: %02X\r\n", mission_id);
....................             return 0x00;  // NULL pointer
....................     }
.................... }
.................... 
.................... // mission_idに対応するパーティション情報を更新する関数
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter)
.................... {
....................     SMF_PARTITION* partition = get_smf_partition_by_mission_id(mission_id);
....................     if (partition != 0x00)
....................     {
....................         partition->used_size = used_size;
....................         partition->loop_counter = loop_counter;
....................         fprintf(PC, "Updated partition for mission_id %02X: used_size=%ld, loop_counter=%ld\r\n", 
....................                 mission_id, used_size, loop_counter);
....................     }
.................... }
.................... 
.................... // カウンター更新関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size)
.................... {
....................     // MISF 側 uncopied_counter を転送サイズ分減少 (下限0)
....................     Flash_t *target = 0x00;
....................     switch(mission_id){
....................         case CIGS_PICLOG_DATA: target = piclog_data_ptr; break;
....................         case CIGS_ENVIRO_DATA: target = environment_data_ptr; break;
....................         case CIGS_IV1_HEADER:  target = iv1_header_ptr; break;
....................         case CIGS_IV1_DATA:    target = iv1_data_ptr; break;
....................         case CIGS_IV2_HEADER:  target = iv2_header_ptr; break;
....................         case CIGS_IV2_DATA:    target = iv2_data_ptr; break;
....................         default: break; // DATA_TABLE などは対象外
....................     }
....................     if(target){
....................         unsigned int32 before = target->uncopied_counter;
....................         if(transfer_size >= before) target->uncopied_counter = 0; else target->uncopied_counter -= transfer_size;
....................         fprintf(PC, "[MISF] mission %u uncopied_counter %08LX -> %08LX (-%lu)\r\n", mission_id, before, target->uncopied_counter, transfer_size);
....................         misf_update_address_area();
....................     } else {
....................         fprintf(PC, "[MISF] update_misf_counters: mission %u not handled\r\n", mission_id);
....................     }
.................... }
.................... 
.................... // カウンター初期化関数
.................... void reset_misf_counters(int8 mission_id)
.................... {
....................     Flash_t *target = 0x00;
....................     switch(mission_id){
....................         case CIGS_PICLOG_DATA: target = piclog_data_ptr; break;
....................         case CIGS_ENVIRO_DATA: target = environment_data_ptr; break;
....................         case CIGS_IV1_HEADER:  target = iv1_header_ptr; break;
....................         case CIGS_IV1_DATA:    target = iv1_data_ptr; break;
....................         case CIGS_IV2_HEADER:  target = iv2_header_ptr; break;
....................         case CIGS_IV2_DATA:    target = iv2_data_ptr; break;
....................         default: break;
....................     }
....................     if(target){
....................         target->uncopied_counter = 0;
....................         misf_update_address_area();
....................         fprintf(PC, "[MISF] mission %u uncopied_counter reset\r\n", mission_id);
....................     }
.................... }
.................... 
.................... // カウンター状態表示関数
.................... void print_misf_counter_status(int8 mission_id)
.................... {
....................     Flash_t *target = 0x00;
....................     switch(mission_id){
....................         case CIGS_PICLOG_DATA: target = piclog_data_ptr; break;
....................         case CIGS_ENVIRO_DATA: target = environment_data_ptr; break;
....................         case CIGS_IV1_HEADER:  target = iv1_header_ptr; break;
....................         case CIGS_IV1_DATA:    target = iv1_data_ptr; break;
....................         case CIGS_IV2_HEADER:  target = iv2_header_ptr; break;
....................         case CIGS_IV2_DATA:    target = iv2_data_ptr; break;
....................         default: break;
....................     }
....................     if(target){
....................         fprintf(PC, "[MISF] mission %u status: used=0x%08LX uncopied=0x%08LX r1=0x%02X r2=0x%02X\r\n",
....................                 mission_id, target->used_counter, target->uncopied_counter,
....................                 target->reserve_counter1, target->reserve_counter2);
....................     } else {
....................         fprintf(PC, "[MISF] print status: mission %u not handled\r\n", mission_id);
....................     }
.................... }
.................... // End of file
.................... 
.................... #include "domain/mmj_cigs_flash.c"
.................... #include "mmj_cigs_flash.h"                           
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/mmj_cigs_config.h"             
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mt25q.h"                
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/tool/calc_tools.h"             
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/smf_queue.h"              
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... 
.................... // 実体宣言
.................... Flash_t data_table = {FLASH_ID_DATA_TABLE, 0, 0, 0};
.................... Flash_t piclog_data = {FLASH_ID_PICLOG, 0, 0, 0};
.................... Flash_t environment_data = {FLASH_ID_ENVIRONMENT, 0, 0, 0};
.................... Flash_t iv1_header = {FLASH_ID_IV1_HEADER, 0, 0, 0};
.................... Flash_t iv1_data = {FLASH_ID_IV1_DATA, 0, 0, 0};
.................... Flash_t iv2_header = {FLASH_ID_IV2_HEADER, 0, 0, 0};
.................... Flash_t iv2_data = {FLASH_ID_IV2_DATA, 0, 0, 0};
.................... 
.................... // ポインタ設定
.................... Flash_t *data_table_ptr = &data_table;
.................... Flash_t *piclog_data_ptr = &piclog_data;
.................... Flash_t *environment_data_ptr = &environment_data;
.................... Flash_t *iv1_header_ptr = &iv1_header;
.................... Flash_t *iv1_data_ptr = &iv1_data;
.................... Flash_t *iv2_header_ptr = &iv2_header;
.................... Flash_t *iv2_data_ptr = &iv2_data;
.................... 
.................... const ADDRESS_AREA_T MISF_ADDRESS_TABLE[FLASH_ID_COUNT] = {
....................     { MISF_CIGS_DATA_TABLE_START,   MISF_CIGS_DATA_TABLE_END,   MISF_CIGS_DATA_TABLE_SIZE },
....................     { MISF_CIGS_PICLOG_START,       MISF_CIGS_PICLOG_END,       MISF_CIGS_PICLOG_SIZE },
....................     { MISF_CIGS_ENVIRO_START,       MISF_CIGS_ENVIRO_END,       MISF_CIGS_ENVIRO_SIZE },
....................     { MISF_CIGS_IV1_HEADER_START,   MISF_CIGS_IV1_HEADER_END,   MISF_CIGS_IV1_HEADER_SIZE },
....................     { MISF_CIGS_IV1_DATA_START,     MISF_CIGS_IV1_DATA_END,     MISF_CIGS_IV1_DATA_SIZE },
....................     { MISF_CIGS_IV2_HEADER_START,   MISF_CIGS_IV2_HEADER_END,   MISF_CIGS_IV2_HEADER_SIZE },
....................     { MISF_CIGS_IV2_DATA_START,     MISF_CIGS_IV2_DATA_END,     MISF_CIGS_IV2_DATA_SIZE }
.................... };
.................... 
.................... FlashCounter_t misf_counter_table[FLASH_ID_COUNT];
.................... FlashCounter_t *misf_counter_table_ptr[FLASH_ID_COUNT] = {&misf_counter_table[0], &misf_counter_table[1], &misf_counter_table[2], &misf_counter_table[3], &misf_counter_table[4], &misf_counter_table[5], &misf_counter_table[6]};
.................... 
.................... 
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
035B4:  MOVLW  24
035B6:  MOVWF  FF6
035B8:  MOVLW  0F
035BA:  MOVWF  FF7
035BC:  MOVLW  00
035BE:  MOVWF  FF8
035C0:  CALL   1EDC
....................     output_high(MIS_FM_CS);
035C4:  MOVLW  FE
035C6:  MOVWF  F98
035C8:  BSF    F8F.0
....................     output_high(SMF_CS);
035CA:  MOVLW  FB
035CC:  MOVWF  F92
035CE:  BSF    F89.2
.................... 
....................     // 接続処理
....................     if (is_connect(mis_fm)) {
035D0:  MOVFF  115,2D4
035D4:  MOVFF  114,2D3
035D8:  MOVFF  113,2D2
035DC:  MOVFF  112,2D1
035E0:  CALL   2A3E
035E4:  MOVF   01,F
035E6:  BTFSC  FD8.2
035E8:  GOTO   3600
....................         fprintf(PC, "\t[MIS FM] Connected\r\n");
035EC:  MOVLW  40
035EE:  MOVWF  FF6
035F0:  MOVLW  0F
035F2:  MOVWF  FF7
035F4:  MOVLW  00
035F6:  MOVWF  FF8
035F8:  CALL   1EDC
....................     } else {
035FC:  GOTO   3610
....................         fprintf(PC, "\t[MIS FM] Not Connected\r\n");
03600:  MOVLW  56
03602:  MOVWF  FF6
03604:  MOVLW  0F
03606:  MOVWF  FF7
03608:  MOVLW  00
0360A:  MOVWF  FF8
0360C:  CALL   1EDC
....................     }
....................     if (is_connect(smf)) {
03610:  MOVFF  119,2D4
03614:  MOVFF  118,2D3
03618:  MOVFF  117,2D2
0361C:  MOVFF  116,2D1
03620:  CALL   2A3E
03624:  MOVF   01,F
03626:  BTFSC  FD8.2
03628:  GOTO   3640
....................         fprintf(PC, "\t[SMF] Connected\r\n");
0362C:  MOVLW  70
0362E:  MOVWF  FF6
03630:  MOVLW  0F
03632:  MOVWF  FF7
03634:  MOVLW  00
03636:  MOVWF  FF8
03638:  CALL   1EDC
....................     } else {
0363C:  GOTO   3650
....................         fprintf(PC, "\t[SMF] Not Connected\r\n");
03640:  MOVLW  84
03642:  MOVWF  FF6
03644:  MOVLW  0F
03646:  MOVWF  FF7
03648:  MOVLW  00
0364A:  MOVWF  FF8
0364C:  CALL   1EDC
....................     }
.................... 
....................     //=== MIS_FM カウンタテーブル読出し ===//
....................     FlashData_t read_header;
....................     FlashData_t *read_header_ptr = &read_header;
03650:  MOVLW  02
03652:  MOVLB  2
03654:  MOVWF  xB4
03656:  MOVLW  73
03658:  MOVWF  xB3
....................     memset(read_header_ptr, 0x00, sizeof(FlashData_t));
0365A:  MOVFF  2B4,FEA
0365E:  MOVFF  2B3,FE9
03662:  CLRF   00
03664:  CLRF   02
03666:  MOVLW  40
03668:  MOVWF  01
0366A:  MOVLB  0
0366C:  CALL   2B06
....................     read_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, read_header_ptr->bytes, PACKET_SIZE);
03670:  MOVLB  2
03672:  MOVF   xB3,W
03674:  MOVWF  01
03676:  MOVF   xB4,W
03678:  MOVWF  03
0367A:  MOVF   01,W
0367C:  MOVWF  xB5
0367E:  MOVFF  03,2B6
03682:  MOVFF  115,B4A
03686:  MOVFF  114,B49
0368A:  MOVFF  113,B48
0368E:  MOVFF  112,B47
03692:  MOVLB  B
03694:  CLRF   x4E
03696:  CLRF   x4D
03698:  CLRF   x4C
0369A:  CLRF   x4B
0369C:  MOVFF  2B6,B50
036A0:  MOVFF  2B5,B4F
036A4:  CLRF   x54
036A6:  CLRF   x53
036A8:  CLRF   x52
036AA:  MOVLW  40
036AC:  MOVWF  x51
036AE:  MOVLB  0
036B0:  CALL   2B2A
.................... 
....................     // CRC 検証
....................     if (read_header_ptr->packet.crc != calc_crc8(read_header_ptr->bytes, PACKET_SIZE - 1)) {
036B4:  MOVLW  3F
036B6:  MOVLB  2
036B8:  ADDWF  xB3,W
036BA:  MOVWF  FE9
036BC:  MOVLW  00
036BE:  ADDWFC xB4,W
036C0:  MOVWF  FEA
036C2:  MOVFF  FEF,2B5
036C6:  MOVF   xB3,W
036C8:  MOVWF  01
036CA:  MOVF   xB4,W
036CC:  MOVWF  03
036CE:  MOVF   01,W
036D0:  MOVWF  xB6
036D2:  MOVFF  03,2B7
036D6:  MOVFF  2B7,BD6
036DA:  MOVFF  2B6,BD5
036DE:  MOVLW  3F
036E0:  MOVLB  B
036E2:  MOVWF  xD7
036E4:  MOVLB  0
036E6:  CALL   2D3E
036EA:  MOVF   01,W
036EC:  MOVLB  2
036EE:  SUBWF  xB5,W
036F0:  BTFSS  FD8.2
036F2:  BRA    36FA
036F4:  MOVLB  0
036F6:  GOTO   370C
036FA:  MOVLB  0
....................         fprintf(PC, "\t[MIS FM] CRC error -> initialize counters\r\n");
036FC:  MOVLW  9C
036FE:  MOVWF  FF6
03700:  MOVLW  0F
03702:  MOVWF  FF7
03704:  MOVLW  00
03706:  MOVWF  FF8
03708:  CALL   1EDC
....................         // デフォルト初期化
....................         /*
....................         piclog_data.id        = FLASH_ID_PICLOG;
....................         environment_data.id   = FLASH_ID_ENVIRONMENT;
....................         iv_header.id          = FLASH_ID_IV_HEADER;
....................         iv_data.id            = FLASH_ID_IV_DATA;
....................         piclog_data.used_counter = 0;
....................         piclog_data.uncopied_counter = 0;
....................         environment_data.used_counter = 0;
....................         environment_data.uncopied_counter = 0;
....................         iv_header.used_counter = 0;
....................         iv_header.uncopied_counter = 0;
....................         iv_data.used_counter = 0;
....................         iv_data.uncopied_counter = 0;
....................         misf_update_address_area();   // 初期テーブル書込み
....................         print_flash_status();
....................         return;
....................         */
....................     }
....................     misf_counter_table[FLASH_ID_PICLOG]       = read_header_ptr->packet.payload.logdata.piclog;
0370C:  MOVLB  2
0370E:  MOVF   xB3,W
03710:  MOVWF  FE1
03712:  MOVF   xB4,W
03714:  MOVWF  FE2
03716:  MOVLW  01
03718:  MOVWF  FEA
0371A:  MOVLW  38
0371C:  MOVWF  FE9
0371E:  MOVLW  0A
03720:  MOVWF  01
03722:  MOVLB  0
03724:  MOVFF  FE6,FEE
03728:  DECFSZ 01,F
0372A:  GOTO   3724
....................     misf_counter_table[FLASH_ID_ENVIRONMENT]  = read_header_ptr->packet.payload.logdata.environment;
0372E:  MOVLW  0A
03730:  MOVLB  2
03732:  ADDWF  xB3,W
03734:  MOVWF  FE1
03736:  MOVLW  00
03738:  ADDWFC xB4,W
0373A:  MOVWF  FE2
0373C:  MOVLW  01
0373E:  MOVWF  FEA
03740:  MOVLW  42
03742:  MOVWF  FE9
03744:  MOVLW  0A
03746:  MOVWF  01
03748:  MOVLB  0
0374A:  MOVFF  FE6,FEE
0374E:  DECFSZ 01,F
03750:  GOTO   374A
....................     misf_counter_table[FLASH_ID_IV1_HEADER]   = read_header_ptr->packet.payload.logdata.iv1_header;
03754:  MOVLW  14
03756:  MOVLB  2
03758:  ADDWF  xB3,W
0375A:  MOVWF  FE1
0375C:  MOVLW  00
0375E:  ADDWFC xB4,W
03760:  MOVWF  FE2
03762:  MOVLW  01
03764:  MOVWF  FEA
03766:  MOVLW  4C
03768:  MOVWF  FE9
0376A:  MOVLW  0A
0376C:  MOVWF  01
0376E:  MOVLB  0
03770:  MOVFF  FE6,FEE
03774:  DECFSZ 01,F
03776:  GOTO   3770
....................     misf_counter_table[FLASH_ID_IV1_DATA]     = read_header_ptr->packet.payload.logdata.iv1_data;
0377A:  MOVLW  1E
0377C:  MOVLB  2
0377E:  ADDWF  xB3,W
03780:  MOVWF  FE1
03782:  MOVLW  00
03784:  ADDWFC xB4,W
03786:  MOVWF  FE2
03788:  MOVLW  01
0378A:  MOVWF  FEA
0378C:  MOVLW  56
0378E:  MOVWF  FE9
03790:  MOVLW  0A
03792:  MOVWF  01
03794:  MOVLB  0
03796:  MOVFF  FE6,FEE
0379A:  DECFSZ 01,F
0379C:  GOTO   3796
....................     misf_counter_table[FLASH_ID_IV2_HEADER]   = read_header_ptr->packet.payload.logdata.iv2_header;
037A0:  MOVLW  28
037A2:  MOVLB  2
037A4:  ADDWF  xB3,W
037A6:  MOVWF  FE1
037A8:  MOVLW  00
037AA:  ADDWFC xB4,W
037AC:  MOVWF  FE2
037AE:  MOVLW  01
037B0:  MOVWF  FEA
037B2:  MOVLW  60
037B4:  MOVWF  FE9
037B6:  MOVLW  0A
037B8:  MOVWF  01
037BA:  MOVLB  0
037BC:  MOVFF  FE6,FEE
037C0:  DECFSZ 01,F
037C2:  GOTO   37BC
....................     misf_counter_table[FLASH_ID_IV2_DATA]     = read_header_ptr->packet.payload.logdata.iv2_data;
037C6:  MOVLW  32
037C8:  MOVLB  2
037CA:  ADDWF  xB3,W
037CC:  MOVWF  FE1
037CE:  MOVLW  00
037D0:  ADDWFC xB4,W
037D2:  MOVWF  FE2
037D4:  MOVLW  01
037D6:  MOVWF  FEA
037D8:  MOVLW  6A
037DA:  MOVWF  FE9
037DC:  MOVLW  0A
037DE:  MOVWF  01
037E0:  MOVLB  0
037E2:  MOVFF  FE6,FEE
037E6:  DECFSZ 01,F
037E8:  GOTO   37E2
.................... 
....................     print_misf_address_table();
037EC:  GOTO   2DAA
.................... 
....................     fprintf(PC, "\tComplete\r\n");
037F0:  MOVLW  CA
037F2:  MOVWF  FF6
037F4:  MOVLW  0F
037F6:  MOVWF  FF7
037F8:  MOVLW  00
037FA:  MOVWF  FF8
037FC:  CALL   1EDC
03800:  RETURN 0
.................... }
.................... 
.................... void print_misf_address_table()
.................... {
....................     fprintf(PC, "\tField\t\tCounterName\tValue\r\n");
*
02DAA:  MOVLW  D6
02DAC:  MOVWF  FF6
02DAE:  MOVLW  0F
02DB0:  MOVWF  FF7
02DB2:  MOVLW  00
02DB4:  MOVWF  FF8
02DB6:  CALL   1EDC
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
02DBA:  MOVLW  F2
02DBC:  MOVWF  FF6
02DBE:  MOVLW  0F
02DC0:  MOVWF  FF7
02DC2:  MOVLW  00
02DC4:  MOVWF  FF8
02DC6:  CALL   1EDC
....................     fprintf(PC, "\tPICLOG\t\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_PICLOG].used_counter);
02DCA:  MOVLW  1E
02DCC:  MOVWF  FF6
02DCE:  MOVLW  10
02DD0:  MOVWF  FF7
02DD2:  MOVLW  00
02DD4:  MOVWF  FF8
02DD6:  MOVLW  11
02DD8:  MOVLB  3
02DDA:  MOVWF  x16
02DDC:  MOVLB  0
02DDE:  CALL   1F12
02DE2:  MOVFF  13B,A62
02DE6:  MOVLW  37
02DE8:  MOVLB  A
02DEA:  MOVWF  x63
02DEC:  MOVLB  0
02DEE:  CALL   2126
02DF2:  MOVFF  13A,A62
02DF6:  MOVLW  37
02DF8:  MOVLB  A
02DFA:  MOVWF  x63
02DFC:  MOVLB  0
02DFE:  CALL   2126
02E02:  MOVFF  139,A62
02E06:  MOVLW  37
02E08:  MOVLB  A
02E0A:  MOVWF  x63
02E0C:  MOVLB  0
02E0E:  CALL   2126
02E12:  MOVFF  138,A62
02E16:  MOVLW  37
02E18:  MOVLB  A
02E1A:  MOVWF  x63
02E1C:  MOVLB  0
02E1E:  CALL   2126
02E22:  MOVLW  0D
02E24:  BTFSS  FA6.6
02E26:  GOTO   2E24
02E2A:  MOVLB  E
02E2C:  MOVWF  xF9
02E2E:  MOVLW  0A
02E30:  MOVLB  0
02E32:  BTFSS  FA6.6
02E34:  GOTO   2E32
02E38:  MOVLB  E
02E3A:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_PICLOG].uncopied_counter);
02E3C:  MOVLW  38
02E3E:  MOVWF  FF6
02E40:  MOVLW  10
02E42:  MOVWF  FF7
02E44:  MOVLW  00
02E46:  MOVWF  FF8
02E48:  MOVLW  0E
02E4A:  MOVLB  3
02E4C:  MOVWF  x16
02E4E:  MOVLB  0
02E50:  CALL   1F12
02E54:  MOVFF  13F,A62
02E58:  MOVLW  37
02E5A:  MOVLB  A
02E5C:  MOVWF  x63
02E5E:  MOVLB  0
02E60:  CALL   2126
02E64:  MOVFF  13E,A62
02E68:  MOVLW  37
02E6A:  MOVLB  A
02E6C:  MOVWF  x63
02E6E:  MOVLB  0
02E70:  CALL   2126
02E74:  MOVFF  13D,A62
02E78:  MOVLW  37
02E7A:  MOVLB  A
02E7C:  MOVWF  x63
02E7E:  MOVLB  0
02E80:  CALL   2126
02E84:  MOVFF  13C,A62
02E88:  MOVLW  37
02E8A:  MOVLB  A
02E8C:  MOVWF  x63
02E8E:  MOVLB  0
02E90:  CALL   2126
02E94:  MOVLW  0D
02E96:  BTFSS  FA6.6
02E98:  GOTO   2E96
02E9C:  MOVLB  E
02E9E:  MOVWF  xF9
02EA0:  MOVLW  0A
02EA2:  MOVLB  0
02EA4:  BTFSS  FA6.6
02EA6:  GOTO   2EA4
02EAA:  MOVLB  E
02EAC:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_PICLOG].reserve_counter1,misf_counter_table[FLASH_ID_PICLOG].reserve_counter2);
02EAE:  MOVLW  4E
02EB0:  MOVWF  FF6
02EB2:  MOVLW  10
02EB4:  MOVWF  FF7
02EB6:  MOVLW  00
02EB8:  MOVWF  FF8
02EBA:  MOVLW  0E
02EBC:  MOVLB  3
02EBE:  MOVWF  x16
02EC0:  MOVLB  0
02EC2:  CALL   1F12
02EC6:  MOVFF  140,A62
02ECA:  MOVLW  37
02ECC:  MOVLB  A
02ECE:  MOVWF  x63
02ED0:  MOVLB  0
02ED2:  CALL   2126
02ED6:  MOVLW  60
02ED8:  MOVWF  FF6
02EDA:  MOVLW  10
02EDC:  MOVWF  FF7
02EDE:  MOVLW  00
02EE0:  MOVWF  FF8
02EE2:  MOVLW  04
02EE4:  MOVLB  3
02EE6:  MOVWF  x16
02EE8:  MOVLB  0
02EEA:  CALL   1F12
02EEE:  MOVFF  141,A62
02EF2:  MOVLW  37
02EF4:  MOVLB  A
02EF6:  MOVWF  x63
02EF8:  MOVLB  0
02EFA:  CALL   2126
02EFE:  MOVLW  0D
02F00:  BTFSS  FA6.6
02F02:  GOTO   2F00
02F06:  MOVLB  E
02F08:  MOVWF  xF9
02F0A:  MOVLW  0A
02F0C:  MOVLB  0
02F0E:  BTFSS  FA6.6
02F10:  GOTO   2F0E
02F14:  MOVLB  E
02F16:  MOVWF  xF9
....................     fprintf(PC, "\tENVIRO\t\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_ENVIRONMENT].used_counter);
02F18:  MOVLW  6C
02F1A:  MOVWF  FF6
02F1C:  MOVLW  10
02F1E:  MOVWF  FF7
02F20:  MOVLW  00
02F22:  MOVWF  FF8
02F24:  MOVLW  11
02F26:  MOVLB  3
02F28:  MOVWF  x16
02F2A:  MOVLB  0
02F2C:  CALL   1F12
02F30:  MOVFF  145,A62
02F34:  MOVLW  37
02F36:  MOVLB  A
02F38:  MOVWF  x63
02F3A:  MOVLB  0
02F3C:  CALL   2126
02F40:  MOVFF  144,A62
02F44:  MOVLW  37
02F46:  MOVLB  A
02F48:  MOVWF  x63
02F4A:  MOVLB  0
02F4C:  CALL   2126
02F50:  MOVFF  143,A62
02F54:  MOVLW  37
02F56:  MOVLB  A
02F58:  MOVWF  x63
02F5A:  MOVLB  0
02F5C:  CALL   2126
02F60:  MOVFF  142,A62
02F64:  MOVLW  37
02F66:  MOVLB  A
02F68:  MOVWF  x63
02F6A:  MOVLB  0
02F6C:  CALL   2126
02F70:  MOVLW  0D
02F72:  BTFSS  FA6.6
02F74:  GOTO   2F72
02F78:  MOVLB  E
02F7A:  MOVWF  xF9
02F7C:  MOVLW  0A
02F7E:  MOVLB  0
02F80:  BTFSS  FA6.6
02F82:  GOTO   2F80
02F86:  MOVLB  E
02F88:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_ENVIRONMENT].uncopied_counter);
02F8A:  MOVLW  86
02F8C:  MOVWF  FF6
02F8E:  MOVLW  10
02F90:  MOVWF  FF7
02F92:  MOVLW  00
02F94:  MOVWF  FF8
02F96:  MOVLW  0E
02F98:  MOVLB  3
02F9A:  MOVWF  x16
02F9C:  MOVLB  0
02F9E:  CALL   1F12
02FA2:  MOVFF  149,A62
02FA6:  MOVLW  37
02FA8:  MOVLB  A
02FAA:  MOVWF  x63
02FAC:  MOVLB  0
02FAE:  CALL   2126
02FB2:  MOVFF  148,A62
02FB6:  MOVLW  37
02FB8:  MOVLB  A
02FBA:  MOVWF  x63
02FBC:  MOVLB  0
02FBE:  CALL   2126
02FC2:  MOVFF  147,A62
02FC6:  MOVLW  37
02FC8:  MOVLB  A
02FCA:  MOVWF  x63
02FCC:  MOVLB  0
02FCE:  CALL   2126
02FD2:  MOVFF  146,A62
02FD6:  MOVLW  37
02FD8:  MOVLB  A
02FDA:  MOVWF  x63
02FDC:  MOVLB  0
02FDE:  CALL   2126
02FE2:  MOVLW  0D
02FE4:  BTFSS  FA6.6
02FE6:  GOTO   2FE4
02FEA:  MOVLB  E
02FEC:  MOVWF  xF9
02FEE:  MOVLW  0A
02FF0:  MOVLB  0
02FF2:  BTFSS  FA6.6
02FF4:  GOTO   2FF2
02FF8:  MOVLB  E
02FFA:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_ENVIRONMENT].reserve_counter1,misf_counter_table[FLASH_ID_ENVIRONMENT].reserve_counter2);
02FFC:  MOVLW  9C
02FFE:  MOVWF  FF6
03000:  MOVLW  10
03002:  MOVWF  FF7
03004:  MOVLW  00
03006:  MOVWF  FF8
03008:  MOVLW  0E
0300A:  MOVLB  3
0300C:  MOVWF  x16
0300E:  MOVLB  0
03010:  CALL   1F12
03014:  MOVFF  14A,A62
03018:  MOVLW  37
0301A:  MOVLB  A
0301C:  MOVWF  x63
0301E:  MOVLB  0
03020:  CALL   2126
03024:  MOVLW  AE
03026:  MOVWF  FF6
03028:  MOVLW  10
0302A:  MOVWF  FF7
0302C:  MOVLW  00
0302E:  MOVWF  FF8
03030:  MOVLW  04
03032:  MOVLB  3
03034:  MOVWF  x16
03036:  MOVLB  0
03038:  CALL   1F12
0303C:  MOVFF  14B,A62
03040:  MOVLW  37
03042:  MOVLB  A
03044:  MOVWF  x63
03046:  MOVLB  0
03048:  CALL   2126
0304C:  MOVLW  0D
0304E:  BTFSS  FA6.6
03050:  GOTO   304E
03054:  MOVLB  E
03056:  MOVWF  xF9
03058:  MOVLW  0A
0305A:  MOVLB  0
0305C:  BTFSS  FA6.6
0305E:  GOTO   305C
03062:  MOVLB  E
03064:  MOVWF  xF9
....................     fprintf(PC, "\tIV1 HEADER\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_HEADER].used_counter);
03066:  MOVLW  BA
03068:  MOVWF  FF6
0306A:  MOVLW  10
0306C:  MOVWF  FF7
0306E:  MOVLW  00
03070:  MOVWF  FF8
03072:  MOVLW  14
03074:  MOVLB  3
03076:  MOVWF  x16
03078:  MOVLB  0
0307A:  CALL   1F12
0307E:  MOVFF  14F,A62
03082:  MOVLW  37
03084:  MOVLB  A
03086:  MOVWF  x63
03088:  MOVLB  0
0308A:  CALL   2126
0308E:  MOVFF  14E,A62
03092:  MOVLW  37
03094:  MOVLB  A
03096:  MOVWF  x63
03098:  MOVLB  0
0309A:  CALL   2126
0309E:  MOVFF  14D,A62
030A2:  MOVLW  37
030A4:  MOVLB  A
030A6:  MOVWF  x63
030A8:  MOVLB  0
030AA:  CALL   2126
030AE:  MOVFF  14C,A62
030B2:  MOVLW  37
030B4:  MOVLB  A
030B6:  MOVWF  x63
030B8:  MOVLB  0
030BA:  CALL   2126
030BE:  MOVLW  0D
030C0:  BTFSS  FA6.6
030C2:  GOTO   30C0
030C6:  MOVLB  E
030C8:  MOVWF  xF9
030CA:  MOVLW  0A
030CC:  MOVLB  0
030CE:  BTFSS  FA6.6
030D0:  GOTO   30CE
030D4:  MOVLB  E
030D6:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_HEADER].uncopied_counter);
030D8:  MOVLW  D6
030DA:  MOVWF  FF6
030DC:  MOVLW  10
030DE:  MOVWF  FF7
030E0:  MOVLW  00
030E2:  MOVWF  FF8
030E4:  MOVLW  0E
030E6:  MOVLB  3
030E8:  MOVWF  x16
030EA:  MOVLB  0
030EC:  CALL   1F12
030F0:  MOVFF  153,A62
030F4:  MOVLW  37
030F6:  MOVLB  A
030F8:  MOVWF  x63
030FA:  MOVLB  0
030FC:  CALL   2126
03100:  MOVFF  152,A62
03104:  MOVLW  37
03106:  MOVLB  A
03108:  MOVWF  x63
0310A:  MOVLB  0
0310C:  CALL   2126
03110:  MOVFF  151,A62
03114:  MOVLW  37
03116:  MOVLB  A
03118:  MOVWF  x63
0311A:  MOVLB  0
0311C:  CALL   2126
03120:  MOVFF  150,A62
03124:  MOVLW  37
03126:  MOVLB  A
03128:  MOVWF  x63
0312A:  MOVLB  0
0312C:  CALL   2126
03130:  MOVLW  0D
03132:  BTFSS  FA6.6
03134:  GOTO   3132
03138:  MOVLB  E
0313A:  MOVWF  xF9
0313C:  MOVLW  0A
0313E:  MOVLB  0
03140:  BTFSS  FA6.6
03142:  GOTO   3140
03146:  MOVLB  E
03148:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV1_HEADER].reserve_counter1,misf_counter_table[FLASH_ID_IV1_HEADER].reserve_counter2);
0314A:  MOVLW  EC
0314C:  MOVWF  FF6
0314E:  MOVLW  10
03150:  MOVWF  FF7
03152:  MOVLW  00
03154:  MOVWF  FF8
03156:  MOVLW  0E
03158:  MOVLB  3
0315A:  MOVWF  x16
0315C:  MOVLB  0
0315E:  CALL   1F12
03162:  MOVFF  154,A62
03166:  MOVLW  37
03168:  MOVLB  A
0316A:  MOVWF  x63
0316C:  MOVLB  0
0316E:  CALL   2126
03172:  MOVLW  FE
03174:  MOVWF  FF6
03176:  MOVLW  10
03178:  MOVWF  FF7
0317A:  MOVLW  00
0317C:  MOVWF  FF8
0317E:  MOVLW  04
03180:  MOVLB  3
03182:  MOVWF  x16
03184:  MOVLB  0
03186:  CALL   1F12
0318A:  MOVFF  155,A62
0318E:  MOVLW  37
03190:  MOVLB  A
03192:  MOVWF  x63
03194:  MOVLB  0
03196:  CALL   2126
0319A:  MOVLW  0D
0319C:  BTFSS  FA6.6
0319E:  GOTO   319C
031A2:  MOVLB  E
031A4:  MOVWF  xF9
031A6:  MOVLW  0A
031A8:  MOVLB  0
031AA:  BTFSS  FA6.6
031AC:  GOTO   31AA
031B0:  MOVLB  E
031B2:  MOVWF  xF9
....................     fprintf(PC, "\tIV1 DATA\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_DATA].used_counter);
031B4:  MOVLW  0A
031B6:  MOVWF  FF6
031B8:  MOVLW  11
031BA:  MOVWF  FF7
031BC:  MOVLW  00
031BE:  MOVWF  FF8
031C0:  MOVLW  12
031C2:  MOVLB  3
031C4:  MOVWF  x16
031C6:  MOVLB  0
031C8:  CALL   1F12
031CC:  MOVFF  159,A62
031D0:  MOVLW  37
031D2:  MOVLB  A
031D4:  MOVWF  x63
031D6:  MOVLB  0
031D8:  CALL   2126
031DC:  MOVFF  158,A62
031E0:  MOVLW  37
031E2:  MOVLB  A
031E4:  MOVWF  x63
031E6:  MOVLB  0
031E8:  CALL   2126
031EC:  MOVFF  157,A62
031F0:  MOVLW  37
031F2:  MOVLB  A
031F4:  MOVWF  x63
031F6:  MOVLB  0
031F8:  CALL   2126
031FC:  MOVFF  156,A62
03200:  MOVLW  37
03202:  MOVLB  A
03204:  MOVWF  x63
03206:  MOVLB  0
03208:  CALL   2126
0320C:  MOVLW  0D
0320E:  BTFSS  FA6.6
03210:  GOTO   320E
03214:  MOVLB  E
03216:  MOVWF  xF9
03218:  MOVLW  0A
0321A:  MOVLB  0
0321C:  BTFSS  FA6.6
0321E:  GOTO   321C
03222:  MOVLB  E
03224:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_DATA].uncopied_counter);
03226:  MOVLW  24
03228:  MOVWF  FF6
0322A:  MOVLW  11
0322C:  MOVWF  FF7
0322E:  MOVLW  00
03230:  MOVWF  FF8
03232:  MOVLW  0E
03234:  MOVLB  3
03236:  MOVWF  x16
03238:  MOVLB  0
0323A:  CALL   1F12
0323E:  MOVFF  15D,A62
03242:  MOVLW  37
03244:  MOVLB  A
03246:  MOVWF  x63
03248:  MOVLB  0
0324A:  CALL   2126
0324E:  MOVFF  15C,A62
03252:  MOVLW  37
03254:  MOVLB  A
03256:  MOVWF  x63
03258:  MOVLB  0
0325A:  CALL   2126
0325E:  MOVFF  15B,A62
03262:  MOVLW  37
03264:  MOVLB  A
03266:  MOVWF  x63
03268:  MOVLB  0
0326A:  CALL   2126
0326E:  MOVFF  15A,A62
03272:  MOVLW  37
03274:  MOVLB  A
03276:  MOVWF  x63
03278:  MOVLB  0
0327A:  CALL   2126
0327E:  MOVLW  0D
03280:  BTFSS  FA6.6
03282:  GOTO   3280
03286:  MOVLB  E
03288:  MOVWF  xF9
0328A:  MOVLW  0A
0328C:  MOVLB  0
0328E:  BTFSS  FA6.6
03290:  GOTO   328E
03294:  MOVLB  E
03296:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV1_DATA].reserve_counter1,misf_counter_table[FLASH_ID_IV1_DATA].reserve_counter2);
03298:  MOVLW  3A
0329A:  MOVWF  FF6
0329C:  MOVLW  11
0329E:  MOVWF  FF7
032A0:  MOVLW  00
032A2:  MOVWF  FF8
032A4:  MOVLW  0E
032A6:  MOVLB  3
032A8:  MOVWF  x16
032AA:  MOVLB  0
032AC:  CALL   1F12
032B0:  MOVFF  15E,A62
032B4:  MOVLW  37
032B6:  MOVLB  A
032B8:  MOVWF  x63
032BA:  MOVLB  0
032BC:  CALL   2126
032C0:  MOVLW  4C
032C2:  MOVWF  FF6
032C4:  MOVLW  11
032C6:  MOVWF  FF7
032C8:  MOVLW  00
032CA:  MOVWF  FF8
032CC:  MOVLW  04
032CE:  MOVLB  3
032D0:  MOVWF  x16
032D2:  MOVLB  0
032D4:  CALL   1F12
032D8:  MOVFF  15F,A62
032DC:  MOVLW  37
032DE:  MOVLB  A
032E0:  MOVWF  x63
032E2:  MOVLB  0
032E4:  CALL   2126
032E8:  MOVLW  0D
032EA:  BTFSS  FA6.6
032EC:  GOTO   32EA
032F0:  MOVLB  E
032F2:  MOVWF  xF9
032F4:  MOVLW  0A
032F6:  MOVLB  0
032F8:  BTFSS  FA6.6
032FA:  GOTO   32F8
032FE:  MOVLB  E
03300:  MOVWF  xF9
....................     fprintf(PC, "\tIV2 HEADER\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_HEADER].used_counter);
03302:  MOVLW  58
03304:  MOVWF  FF6
03306:  MOVLW  11
03308:  MOVWF  FF7
0330A:  MOVLW  00
0330C:  MOVWF  FF8
0330E:  MOVLW  14
03310:  MOVLB  3
03312:  MOVWF  x16
03314:  MOVLB  0
03316:  CALL   1F12
0331A:  MOVFF  163,A62
0331E:  MOVLW  37
03320:  MOVLB  A
03322:  MOVWF  x63
03324:  MOVLB  0
03326:  CALL   2126
0332A:  MOVFF  162,A62
0332E:  MOVLW  37
03330:  MOVLB  A
03332:  MOVWF  x63
03334:  MOVLB  0
03336:  CALL   2126
0333A:  MOVFF  161,A62
0333E:  MOVLW  37
03340:  MOVLB  A
03342:  MOVWF  x63
03344:  MOVLB  0
03346:  CALL   2126
0334A:  MOVFF  160,A62
0334E:  MOVLW  37
03350:  MOVLB  A
03352:  MOVWF  x63
03354:  MOVLB  0
03356:  CALL   2126
0335A:  MOVLW  0D
0335C:  BTFSS  FA6.6
0335E:  GOTO   335C
03362:  MOVLB  E
03364:  MOVWF  xF9
03366:  MOVLW  0A
03368:  MOVLB  0
0336A:  BTFSS  FA6.6
0336C:  GOTO   336A
03370:  MOVLB  E
03372:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_HEADER].uncopied_counter);
03374:  MOVLW  74
03376:  MOVWF  FF6
03378:  MOVLW  11
0337A:  MOVWF  FF7
0337C:  MOVLW  00
0337E:  MOVWF  FF8
03380:  MOVLW  0E
03382:  MOVLB  3
03384:  MOVWF  x16
03386:  MOVLB  0
03388:  CALL   1F12
0338C:  MOVFF  167,A62
03390:  MOVLW  37
03392:  MOVLB  A
03394:  MOVWF  x63
03396:  MOVLB  0
03398:  CALL   2126
0339C:  MOVFF  166,A62
033A0:  MOVLW  37
033A2:  MOVLB  A
033A4:  MOVWF  x63
033A6:  MOVLB  0
033A8:  CALL   2126
033AC:  MOVFF  165,A62
033B0:  MOVLW  37
033B2:  MOVLB  A
033B4:  MOVWF  x63
033B6:  MOVLB  0
033B8:  CALL   2126
033BC:  MOVFF  164,A62
033C0:  MOVLW  37
033C2:  MOVLB  A
033C4:  MOVWF  x63
033C6:  MOVLB  0
033C8:  CALL   2126
033CC:  MOVLW  0D
033CE:  BTFSS  FA6.6
033D0:  GOTO   33CE
033D4:  MOVLB  E
033D6:  MOVWF  xF9
033D8:  MOVLW  0A
033DA:  MOVLB  0
033DC:  BTFSS  FA6.6
033DE:  GOTO   33DC
033E2:  MOVLB  E
033E4:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV2_HEADER].reserve_counter1,misf_counter_table[FLASH_ID_IV2_HEADER].reserve_counter2);
033E6:  MOVLW  8A
033E8:  MOVWF  FF6
033EA:  MOVLW  11
033EC:  MOVWF  FF7
033EE:  MOVLW  00
033F0:  MOVWF  FF8
033F2:  MOVLW  0E
033F4:  MOVLB  3
033F6:  MOVWF  x16
033F8:  MOVLB  0
033FA:  CALL   1F12
033FE:  MOVFF  168,A62
03402:  MOVLW  37
03404:  MOVLB  A
03406:  MOVWF  x63
03408:  MOVLB  0
0340A:  CALL   2126
0340E:  MOVLW  9C
03410:  MOVWF  FF6
03412:  MOVLW  11
03414:  MOVWF  FF7
03416:  MOVLW  00
03418:  MOVWF  FF8
0341A:  MOVLW  04
0341C:  MOVLB  3
0341E:  MOVWF  x16
03420:  MOVLB  0
03422:  CALL   1F12
03426:  MOVFF  169,A62
0342A:  MOVLW  37
0342C:  MOVLB  A
0342E:  MOVWF  x63
03430:  MOVLB  0
03432:  CALL   2126
03436:  MOVLW  0D
03438:  BTFSS  FA6.6
0343A:  GOTO   3438
0343E:  MOVLB  E
03440:  MOVWF  xF9
03442:  MOVLW  0A
03444:  MOVLB  0
03446:  BTFSS  FA6.6
03448:  GOTO   3446
0344C:  MOVLB  E
0344E:  MOVWF  xF9
....................     fprintf(PC, "\tIV2 DATA\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_DATA].used_counter);
03450:  MOVLW  A8
03452:  MOVWF  FF6
03454:  MOVLW  11
03456:  MOVWF  FF7
03458:  MOVLW  00
0345A:  MOVWF  FF8
0345C:  MOVLW  12
0345E:  MOVLB  3
03460:  MOVWF  x16
03462:  MOVLB  0
03464:  CALL   1F12
03468:  MOVFF  16D,A62
0346C:  MOVLW  37
0346E:  MOVLB  A
03470:  MOVWF  x63
03472:  MOVLB  0
03474:  CALL   2126
03478:  MOVFF  16C,A62
0347C:  MOVLW  37
0347E:  MOVLB  A
03480:  MOVWF  x63
03482:  MOVLB  0
03484:  CALL   2126
03488:  MOVFF  16B,A62
0348C:  MOVLW  37
0348E:  MOVLB  A
03490:  MOVWF  x63
03492:  MOVLB  0
03494:  CALL   2126
03498:  MOVFF  16A,A62
0349C:  MOVLW  37
0349E:  MOVLB  A
034A0:  MOVWF  x63
034A2:  MOVLB  0
034A4:  CALL   2126
034A8:  MOVLW  0D
034AA:  BTFSS  FA6.6
034AC:  GOTO   34AA
034B0:  MOVLB  E
034B2:  MOVWF  xF9
034B4:  MOVLW  0A
034B6:  MOVLB  0
034B8:  BTFSS  FA6.6
034BA:  GOTO   34B8
034BE:  MOVLB  E
034C0:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_DATA].uncopied_counter);
034C2:  MOVLW  C2
034C4:  MOVWF  FF6
034C6:  MOVLW  11
034C8:  MOVWF  FF7
034CA:  MOVLW  00
034CC:  MOVWF  FF8
034CE:  MOVLW  0E
034D0:  MOVLB  3
034D2:  MOVWF  x16
034D4:  MOVLB  0
034D6:  CALL   1F12
034DA:  MOVFF  171,A62
034DE:  MOVLW  37
034E0:  MOVLB  A
034E2:  MOVWF  x63
034E4:  MOVLB  0
034E6:  CALL   2126
034EA:  MOVFF  170,A62
034EE:  MOVLW  37
034F0:  MOVLB  A
034F2:  MOVWF  x63
034F4:  MOVLB  0
034F6:  CALL   2126
034FA:  MOVFF  16F,A62
034FE:  MOVLW  37
03500:  MOVLB  A
03502:  MOVWF  x63
03504:  MOVLB  0
03506:  CALL   2126
0350A:  MOVFF  16E,A62
0350E:  MOVLW  37
03510:  MOVLB  A
03512:  MOVWF  x63
03514:  MOVLB  0
03516:  CALL   2126
0351A:  MOVLW  0D
0351C:  BTFSS  FA6.6
0351E:  GOTO   351C
03522:  MOVLB  E
03524:  MOVWF  xF9
03526:  MOVLW  0A
03528:  MOVLB  0
0352A:  BTFSS  FA6.6
0352C:  GOTO   352A
03530:  MOVLB  E
03532:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV2_DATA].reserve_counter1,misf_counter_table[FLASH_ID_IV2_DATA].reserve_counter2);
03534:  MOVLW  D8
03536:  MOVWF  FF6
03538:  MOVLW  11
0353A:  MOVWF  FF7
0353C:  MOVLW  00
0353E:  MOVWF  FF8
03540:  MOVLW  0E
03542:  MOVLB  3
03544:  MOVWF  x16
03546:  MOVLB  0
03548:  CALL   1F12
0354C:  MOVFF  172,A62
03550:  MOVLW  37
03552:  MOVLB  A
03554:  MOVWF  x63
03556:  MOVLB  0
03558:  CALL   2126
0355C:  MOVLW  EA
0355E:  MOVWF  FF6
03560:  MOVLW  11
03562:  MOVWF  FF7
03564:  MOVLW  00
03566:  MOVWF  FF8
03568:  MOVLW  04
0356A:  MOVLB  3
0356C:  MOVWF  x16
0356E:  MOVLB  0
03570:  CALL   1F12
03574:  MOVFF  173,A62
03578:  MOVLW  37
0357A:  MOVLB  A
0357C:  MOVWF  x63
0357E:  MOVLB  0
03580:  CALL   2126
03584:  MOVLW  0D
03586:  BTFSS  FA6.6
03588:  GOTO   3586
0358C:  MOVLB  E
0358E:  MOVWF  xF9
03590:  MOVLW  0A
03592:  MOVLB  0
03594:  BTFSS  FA6.6
03596:  GOTO   3594
0359A:  MOVLB  E
0359C:  MOVWF  xF9
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
0359E:  MOVLW  F6
035A0:  MOVWF  FF6
035A2:  MOVLW  11
035A4:  MOVWF  FF7
035A6:  MOVLW  00
035A8:  MOVWF  FF8
035AA:  MOVLB  0
035AC:  CALL   1EDC
035B0:  GOTO   37F0 (RETURN)
.................... }
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size)
.................... {
....................     // パケット境界チェック
....................     if (misf_counter_table[id].reserve_counter1 + size > PACKET_SIZE-1) {
*
043E4:  MOVLB  A
043E6:  MOVF   xB0,W
043E8:  MULLW  0A
043EA:  MOVF   FF3,W
043EC:  MOVLB  B
043EE:  CLRF   x48
043F0:  MOVWF  x47
043F2:  MOVLW  08
043F4:  ADDWF  x47,W
043F6:  MOVWF  01
043F8:  MOVLW  00
043FA:  ADDWFC x48,W
043FC:  MOVWF  03
043FE:  MOVF   01,W
04400:  ADDLW  2E
04402:  MOVWF  FE9
04404:  MOVLW  01
04406:  ADDWFC 03,W
04408:  MOVWF  FEA
0440A:  MOVF   FEF,W
0440C:  MOVLB  A
0440E:  ADDWF  xB3,W
04410:  MOVLB  B
04412:  MOVWF  x47
04414:  MOVLW  00
04416:  MOVLB  A
04418:  ADDWFC xB4,W
0441A:  MOVLB  B
0441C:  MOVWF  x48
0441E:  MOVF   x48,F
04420:  BTFSC  FD8.2
04422:  BRA    442A
04424:  MOVLB  0
04426:  GOTO   443E
0442A:  MOVLB  0
0442C:  MOVLB  B
0442E:  MOVF   x47,W
04430:  SUBLW  3F
04432:  BTFSS  FD8.0
04434:  BRA    443C
04436:  MOVLB  0
04438:  GOTO   470C
0443C:  MOVLB  0
....................         unsigned int8 blank_size = PACKET_SIZE - 1 - misf_counter_table[id].reserve_counter1;
....................         // fprintf(PC, "0x%02X", blank_size);
....................         unsigned int8 blank_data[PACKET_SIZE];
0443E:  MOVLB  A
04440:  MOVF   xB0,W
04442:  MULLW  0A
04444:  MOVF   FF3,W
04446:  MOVLB  B
04448:  CLRF   x48
0444A:  MOVWF  x47
0444C:  MOVLW  08
0444E:  ADDWF  x47,W
04450:  MOVWF  01
04452:  MOVLW  00
04454:  ADDWFC x48,W
04456:  MOVWF  03
04458:  MOVF   01,W
0445A:  ADDLW  2E
0445C:  MOVWF  FE9
0445E:  MOVLW  01
04460:  ADDWFC 03,W
04462:  MOVWF  FEA
04464:  MOVF   FEF,W
04466:  XORLW  FF
04468:  ADDLW  40
0446A:  MOVLB  A
0446C:  MOVWF  xB5
0446E:  MOVLB  0
....................         memset(blank_data, 0, blank_size);
04470:  MOVLW  0A
04472:  MOVWF  FEA
04474:  MOVLW  B6
04476:  MOVWF  FE9
04478:  CLRF   00
0447A:  CLRF   02
0447C:  MOVFF  AB5,01
04480:  CALL   2B06
.................... 
....................         // アドレス再計算
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
04484:  MOVLB  A
04486:  MOVF   xB0,W
04488:  MULLW  0C
0448A:  MOVF   FF3,W
0448C:  MOVLB  B
0448E:  CLRF   x48
04490:  MOVWF  x47
04492:  MOVFF  B48,03
04496:  MOVF   x47,W
04498:  MOVLB  0
0449A:  CALL   0132
0449E:  MOVWF  00
044A0:  TBLRD*+
044A2:  MOVFF  FF5,01
044A6:  TBLRD*+
044A8:  MOVFF  FF5,02
044AC:  TBLRD*+
044AE:  MOVFF  FF5,03
044B2:  MOVFF  03,B4C
044B6:  MOVFF  02,B4B
044BA:  MOVFF  01,B4A
044BE:  MOVFF  00,B49
044C2:  MOVLB  A
044C4:  MOVF   xB0,W
044C6:  MULLW  0A
044C8:  MOVF   FF3,W
044CA:  MOVLB  B
044CC:  CLRF   x4E
044CE:  MOVWF  x4D
044D0:  MOVLW  2E
044D2:  ADDWF  x4D,W
044D4:  MOVWF  FE9
044D6:  MOVLW  01
044D8:  ADDWFC x4E,W
044DA:  MOVWF  FEA
044DC:  MOVFF  FEF,00
044E0:  MOVFF  FEC,01
044E4:  MOVFF  FEC,02
044E8:  MOVFF  FEC,03
044EC:  MOVF   FED,F
044EE:  MOVF   FED,F
044F0:  MOVF   FED,F
044F2:  MOVF   00,W
044F4:  ADDWF  x49,W
044F6:  MOVLB  A
044F8:  MOVWF  xF6
044FA:  MOVF   01,W
044FC:  MOVLB  B
044FE:  ADDWFC x4A,W
04500:  MOVLB  A
04502:  MOVWF  xF7
04504:  MOVF   02,W
04506:  MOVLB  B
04508:  ADDWFC x4B,W
0450A:  MOVLB  A
0450C:  MOVWF  xF8
0450E:  MOVF   03,W
04510:  MOVLB  B
04512:  ADDWFC x4C,W
04514:  MOVLB  A
04516:  MOVWF  xF9
.................... 
....................         // 未使用部分を 0 埋め
....................         write_data_bytes(mis_fm, write_address, blank_data, blank_size);
04518:  MOVFF  115,B8E
0451C:  MOVFF  114,B8D
04520:  MOVFF  113,B8C
04524:  MOVFF  112,B8B
04528:  MOVFF  AF9,B92
0452C:  MOVFF  AF8,B91
04530:  MOVFF  AF7,B90
04534:  MOVFF  AF6,B8F
04538:  MOVLW  0A
0453A:  MOVLB  B
0453C:  MOVWF  x94
0453E:  MOVLW  B6
04540:  MOVWF  x93
04542:  CLRF   x96
04544:  MOVFF  AB5,B95
04548:  MOVLB  0
0454A:  CALL   3B1A
.................... 
....................         // CRC 計算（本体部分だけ読む）
....................         unsigned int8 packet_data[PACKET_SIZE - 1];
....................         unsigned int32 read_address = write_address + blank_size - PACKET_SIZE - 1;
0454E:  MOVLB  A
04550:  MOVF   xB5,W
04552:  ADDWF  xF6,W
04554:  MOVLB  B
04556:  MOVWF  x47
04558:  MOVLW  00
0455A:  MOVLB  A
0455C:  ADDWFC xF7,W
0455E:  MOVLB  B
04560:  MOVWF  x48
04562:  MOVLW  00
04564:  MOVLB  A
04566:  ADDWFC xF8,W
04568:  MOVLB  B
0456A:  MOVWF  x49
0456C:  MOVLW  00
0456E:  MOVLB  A
04570:  ADDWFC xF9,W
04572:  MOVLB  B
04574:  MOVWF  x4A
04576:  MOVLW  40
04578:  SUBWF  x47,F
0457A:  MOVLW  00
0457C:  SUBWFB x48,F
0457E:  MOVLW  00
04580:  SUBWFB x49,F
04582:  MOVLW  00
04584:  SUBWFB x4A,F
04586:  MOVLW  01
04588:  SUBWF  x47,W
0458A:  MOVWF  x39
0458C:  MOVLW  00
0458E:  SUBWFB x48,W
04590:  MOVWF  x3A
04592:  MOVLW  00
04594:  SUBWFB x49,W
04596:  MOVWF  x3B
04598:  MOVLW  00
0459A:  SUBWFB x4A,W
0459C:  MOVWF  x3C
....................         read_data_bytes(mis_fm, read_address, packet_data, PACKET_SIZE - 1);
0459E:  MOVFF  115,B4A
045A2:  MOVFF  114,B49
045A6:  MOVFF  113,B48
045AA:  MOVFF  112,B47
045AE:  MOVFF  B3C,B4E
045B2:  MOVFF  B3B,B4D
045B6:  MOVFF  B3A,B4C
045BA:  MOVFF  B39,B4B
045BE:  MOVLW  0A
045C0:  MOVWF  x50
045C2:  MOVLW  FA
045C4:  MOVWF  x4F
045C6:  CLRF   x54
045C8:  CLRF   x53
045CA:  CLRF   x52
045CC:  MOVLW  3F
045CE:  MOVWF  x51
045D0:  MOVLB  0
045D2:  CALL   2B2A
....................         unsigned int8 crc = calc_crc8(packet_data, PACKET_SIZE - 1);
045D6:  MOVLW  0A
045D8:  MOVLB  B
045DA:  MOVWF  xD6
045DC:  MOVLW  FA
045DE:  MOVWF  xD5
045E0:  MOVLW  3F
045E2:  MOVWF  xD7
045E4:  MOVLB  0
045E6:  CALL   2D3E
045EA:  MOVFF  01,B3D
....................         // fprintf(PC, "0x%02X", crc);
....................         // CRC 書き込み
....................         write_address += blank_size;
045EE:  MOVLB  A
045F0:  MOVF   xB5,W
045F2:  ADDWF  xF6,F
045F4:  MOVLW  00
045F6:  ADDWFC xF7,F
045F8:  MOVLW  00
045FA:  ADDWFC xF8,F
045FC:  MOVLW  00
045FE:  ADDWFC xF9,F
....................         write_data_bytes(mis_fm, write_address, &crc, 1);
04600:  MOVFF  115,B8E
04604:  MOVFF  114,B8D
04608:  MOVFF  113,B8C
0460C:  MOVFF  112,B8B
04610:  MOVFF  AF9,B92
04614:  MOVFF  AF8,B91
04618:  MOVFF  AF7,B90
0461C:  MOVFF  AF6,B8F
04620:  MOVLW  0B
04622:  MOVLB  B
04624:  MOVWF  x94
04626:  MOVLW  3D
04628:  MOVWF  x93
0462A:  CLRF   x96
0462C:  MOVLW  01
0462E:  MOVWF  x95
04630:  MOVLB  0
04632:  CALL   3B1A
.................... 
....................         // カウンタ更新
....................         misf_counter_table[id].used_counter     += blank_size + 1;
04636:  MOVLB  A
04638:  MOVF   xB0,W
0463A:  MULLW  0A
0463C:  MOVF   FF3,W
0463E:  MOVLB  B
04640:  CLRF   x48
04642:  MOVWF  x47
04644:  MOVLW  2E
04646:  ADDWF  x47,W
04648:  MOVWF  FE9
0464A:  MOVLW  01
0464C:  ADDWFC x48,W
0464E:  MOVWF  FEA
04650:  MOVLW  01
04652:  MOVLB  A
04654:  ADDWF  xB5,W
04656:  ADDWF  FEF,W
04658:  MOVWF  00
0465A:  MOVLW  00
0465C:  ADDWFC FEC,W
0465E:  MOVWF  01
04660:  MOVLW  00
04662:  ADDWFC FEC,W
04664:  MOVWF  02
04666:  MOVLW  00
04668:  ADDWFC FEC,W
0466A:  MOVWF  03
0466C:  MOVF   FED,F
0466E:  MOVF   FED,F
04670:  MOVF   FED,F
04672:  MOVFF  00,FEF
04676:  MOVFF  01,FEC
0467A:  MOVFF  02,FEC
0467E:  MOVFF  03,FEC
04682:  MOVF   FED,F
04684:  MOVF   FED,F
04686:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += blank_size + 1;
04688:  MOVF   xB0,W
0468A:  MULLW  0A
0468C:  MOVF   FF3,W
0468E:  MOVLB  B
04690:  CLRF   x48
04692:  MOVWF  x47
04694:  MOVLW  04
04696:  ADDWF  x47,W
04698:  MOVWF  01
0469A:  MOVLW  00
0469C:  ADDWFC x48,W
0469E:  MOVWF  03
046A0:  MOVF   01,W
046A2:  ADDLW  2E
046A4:  MOVWF  FE9
046A6:  MOVLW  01
046A8:  ADDWFC 03,W
046AA:  MOVWF  FEA
046AC:  MOVLW  01
046AE:  MOVLB  A
046B0:  ADDWF  xB5,W
046B2:  ADDWF  FEF,W
046B4:  MOVWF  00
046B6:  MOVLW  00
046B8:  ADDWFC FEC,W
046BA:  MOVWF  01
046BC:  MOVLW  00
046BE:  ADDWFC FEC,W
046C0:  MOVWF  02
046C2:  MOVLW  00
046C4:  ADDWFC FEC,W
046C6:  MOVWF  03
046C8:  MOVF   FED,F
046CA:  MOVF   FED,F
046CC:  MOVF   FED,F
046CE:  MOVFF  00,FEF
046D2:  MOVFF  01,FEC
046D6:  MOVFF  02,FEC
046DA:  MOVFF  03,FEC
046DE:  MOVF   FED,F
046E0:  MOVF   FED,F
046E2:  MOVF   FED,F
....................         misf_counter_table[id].reserve_counter1  = 0;
046E4:  MOVF   xB0,W
046E6:  MULLW  0A
046E8:  MOVF   FF3,W
046EA:  MOVLB  B
046EC:  CLRF   x48
046EE:  MOVWF  x47
046F0:  MOVLW  08
046F2:  ADDWF  x47,W
046F4:  MOVWF  01
046F6:  MOVLW  00
046F8:  ADDWFC x48,W
046FA:  MOVWF  03
046FC:  MOVF   01,W
046FE:  ADDLW  2E
04700:  MOVWF  FE9
04702:  MOVLW  01
04704:  ADDWFC 03,W
04706:  MOVWF  FEA
04708:  CLRF   FEF
0470A:  MOVLB  0
....................     }
....................     if (misf_counter_table[id].reserve_counter1 + size == PACKET_SIZE-1){
0470C:  MOVLB  A
0470E:  MOVF   xB0,W
04710:  MULLW  0A
04712:  MOVF   FF3,W
04714:  MOVLB  B
04716:  CLRF   x48
04718:  MOVWF  x47
0471A:  MOVLW  08
0471C:  ADDWF  x47,W
0471E:  MOVWF  01
04720:  MOVLW  00
04722:  ADDWFC x48,W
04724:  MOVWF  03
04726:  MOVF   01,W
04728:  ADDLW  2E
0472A:  MOVWF  FE9
0472C:  MOVLW  01
0472E:  ADDWFC 03,W
04730:  MOVWF  FEA
04732:  MOVF   FEF,W
04734:  MOVLB  A
04736:  ADDWF  xB3,W
04738:  MOVLB  B
0473A:  MOVWF  x47
0473C:  MOVLW  00
0473E:  MOVLB  A
04740:  ADDWFC xB4,W
04742:  MOVLB  B
04744:  MOVWF  x48
04746:  MOVF   x47,W
04748:  SUBLW  3F
0474A:  BTFSC  FD8.2
0474C:  BRA    4754
0474E:  MOVLB  0
04750:  GOTO   4A76
04754:  MOVLB  0
04756:  MOVLB  B
04758:  MOVF   x48,F
0475A:  BTFSC  FD8.2
0475C:  BRA    4764
0475E:  MOVLB  0
04760:  GOTO   4A76
04764:  MOVLB  0
....................         // データ書き込み
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
04766:  MOVLB  A
04768:  MOVF   xB0,W
0476A:  MULLW  0C
0476C:  MOVF   FF3,W
0476E:  MOVLB  B
04770:  CLRF   x48
04772:  MOVWF  x47
04774:  MOVFF  B48,03
04778:  MOVF   x47,W
0477A:  MOVLB  0
0477C:  CALL   0132
04780:  MOVWF  00
04782:  TBLRD*+
04784:  MOVFF  FF5,01
04788:  TBLRD*+
0478A:  MOVFF  FF5,02
0478E:  TBLRD*+
04790:  MOVFF  FF5,03
04794:  MOVFF  03,B4C
04798:  MOVFF  02,B4B
0479C:  MOVFF  01,B4A
047A0:  MOVFF  00,B49
047A4:  MOVLB  A
047A6:  MOVF   xB0,W
047A8:  MULLW  0A
047AA:  MOVF   FF3,W
047AC:  MOVLB  B
047AE:  CLRF   x4E
047B0:  MOVWF  x4D
047B2:  MOVLW  2E
047B4:  ADDWF  x4D,W
047B6:  MOVWF  FE9
047B8:  MOVLW  01
047BA:  ADDWFC x4E,W
047BC:  MOVWF  FEA
047BE:  MOVFF  FEF,00
047C2:  MOVFF  FEC,01
047C6:  MOVFF  FEC,02
047CA:  MOVFF  FEC,03
047CE:  MOVF   FED,F
047D0:  MOVF   FED,F
047D2:  MOVF   FED,F
047D4:  MOVF   00,W
047D6:  ADDWF  x49,W
047D8:  MOVWF  x3E
047DA:  MOVF   01,W
047DC:  ADDWFC x4A,W
047DE:  MOVWF  x3F
047E0:  MOVF   02,W
047E2:  ADDWFC x4B,W
047E4:  MOVWF  x40
047E6:  MOVF   03,W
047E8:  ADDWFC x4C,W
047EA:  MOVWF  x41
047EC:  MOVLB  0
....................         write_data_bytes(mis_fm, write_address, data_ptr, size);
047EE:  MOVFF  115,B8E
047F2:  MOVFF  114,B8D
047F6:  MOVFF  113,B8C
047FA:  MOVFF  112,B8B
047FE:  MOVFF  B41,B92
04802:  MOVFF  B40,B91
04806:  MOVFF  B3F,B90
0480A:  MOVFF  B3E,B8F
0480E:  MOVFF  AB2,B94
04812:  MOVFF  AB1,B93
04816:  MOVFF  AB4,B96
0481A:  MOVFF  AB3,B95
0481E:  CALL   3B1A
....................         // fprintf(PC, "ADDRESS 0x%08LX DATA ", write_address);
....................         // for (unsigned int32 j = 0; j < size; j++) {
....................             // fprintf(PC, "%02X ", data_ptr[j]);
....................         // }
....................         // fprintf(PC, "\Sr\n");
.................... 
....................         misf_counter_table[id].used_counter     += size;
04822:  MOVLB  A
04824:  MOVF   xB0,W
04826:  MULLW  0A
04828:  MOVF   FF3,W
0482A:  MOVLB  B
0482C:  CLRF   x48
0482E:  MOVWF  x47
04830:  MOVLW  2E
04832:  ADDWF  x47,W
04834:  MOVWF  FE9
04836:  MOVLW  01
04838:  ADDWFC x48,W
0483A:  MOVWF  FEA
0483C:  MOVLB  A
0483E:  MOVF   xB3,W
04840:  ADDWF  FEF,W
04842:  MOVWF  00
04844:  MOVF   xB4,W
04846:  ADDWFC FEC,W
04848:  MOVWF  01
0484A:  MOVLW  00
0484C:  ADDWFC FEC,W
0484E:  MOVWF  02
04850:  MOVLW  00
04852:  ADDWFC FEC,W
04854:  MOVWF  03
04856:  MOVF   FED,F
04858:  MOVF   FED,F
0485A:  MOVF   FED,F
0485C:  MOVFF  00,FEF
04860:  MOVFF  01,FEC
04864:  MOVFF  02,FEC
04868:  MOVFF  03,FEC
0486C:  MOVF   FED,F
0486E:  MOVF   FED,F
04870:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += size;
04872:  MOVF   xB0,W
04874:  MULLW  0A
04876:  MOVF   FF3,W
04878:  MOVLB  B
0487A:  CLRF   x48
0487C:  MOVWF  x47
0487E:  MOVLW  04
04880:  ADDWF  x47,W
04882:  MOVWF  01
04884:  MOVLW  00
04886:  ADDWFC x48,W
04888:  MOVWF  03
0488A:  MOVF   01,W
0488C:  ADDLW  2E
0488E:  MOVWF  FE9
04890:  MOVLW  01
04892:  ADDWFC 03,W
04894:  MOVWF  FEA
04896:  MOVLB  A
04898:  MOVF   xB3,W
0489A:  ADDWF  FEF,W
0489C:  MOVWF  00
0489E:  MOVF   xB4,W
048A0:  ADDWFC FEC,W
048A2:  MOVWF  01
048A4:  MOVLW  00
048A6:  ADDWFC FEC,W
048A8:  MOVWF  02
048AA:  MOVLW  00
048AC:  ADDWFC FEC,W
048AE:  MOVWF  03
048B0:  MOVF   FED,F
048B2:  MOVF   FED,F
048B4:  MOVF   FED,F
048B6:  MOVFF  00,FEF
048BA:  MOVFF  01,FEC
048BE:  MOVFF  02,FEC
048C2:  MOVFF  03,FEC
048C6:  MOVF   FED,F
048C8:  MOVF   FED,F
048CA:  MOVF   FED,F
....................         unsigned int8 crc = calc_crc8(data_ptr, size);
048CC:  MOVFF  AB2,BD6
048D0:  MOVFF  AB1,BD5
048D4:  MOVFF  AB3,BD7
048D8:  MOVLB  0
048DA:  CALL   2D3E
048DE:  MOVFF  01,B42
.................... 
....................         // CRC 書き込み
....................         write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
048E2:  MOVLB  A
048E4:  MOVF   xB0,W
048E6:  MULLW  0C
048E8:  MOVF   FF3,W
048EA:  MOVLB  B
048EC:  CLRF   x48
048EE:  MOVWF  x47
048F0:  MOVFF  B48,03
048F4:  MOVF   x47,W
048F6:  MOVLB  0
048F8:  CALL   0132
048FC:  MOVWF  00
048FE:  TBLRD*+
04900:  MOVFF  FF5,01
04904:  TBLRD*+
04906:  MOVFF  FF5,02
0490A:  TBLRD*+
0490C:  MOVFF  FF5,03
04910:  MOVFF  03,B4C
04914:  MOVFF  02,B4B
04918:  MOVFF  01,B4A
0491C:  MOVFF  00,B49
04920:  MOVLB  A
04922:  MOVF   xB0,W
04924:  MULLW  0A
04926:  MOVF   FF3,W
04928:  MOVLB  B
0492A:  CLRF   x4E
0492C:  MOVWF  x4D
0492E:  MOVLW  2E
04930:  ADDWF  x4D,W
04932:  MOVWF  FE9
04934:  MOVLW  01
04936:  ADDWFC x4E,W
04938:  MOVWF  FEA
0493A:  MOVFF  FEF,00
0493E:  MOVFF  FEC,01
04942:  MOVFF  FEC,02
04946:  MOVFF  FEC,03
0494A:  MOVF   FED,F
0494C:  MOVF   FED,F
0494E:  MOVF   FED,F
04950:  MOVF   00,W
04952:  ADDWF  x49,W
04954:  MOVWF  x3E
04956:  MOVF   01,W
04958:  ADDWFC x4A,W
0495A:  MOVWF  x3F
0495C:  MOVF   02,W
0495E:  ADDWFC x4B,W
04960:  MOVWF  x40
04962:  MOVF   03,W
04964:  ADDWFC x4C,W
04966:  MOVWF  x41
....................         write_data_bytes(mis_fm, write_address, &crc, 1);
04968:  MOVFF  115,B8E
0496C:  MOVFF  114,B8D
04970:  MOVFF  113,B8C
04974:  MOVFF  112,B8B
04978:  MOVFF  B41,B92
0497C:  MOVFF  B40,B91
04980:  MOVFF  B3F,B90
04984:  MOVFF  B3E,B8F
04988:  MOVLW  0B
0498A:  MOVWF  x94
0498C:  MOVLW  42
0498E:  MOVWF  x93
04990:  CLRF   x96
04992:  MOVLW  01
04994:  MOVWF  x95
04996:  MOVLB  0
04998:  CALL   3B1A
.................... 
....................         // カウンタ更新
....................         misf_counter_table[id].used_counter     += 1;
0499C:  MOVLB  A
0499E:  MOVF   xB0,W
049A0:  MULLW  0A
049A2:  MOVF   FF3,W
049A4:  MOVLB  B
049A6:  CLRF   x48
049A8:  MOVWF  x47
049AA:  MOVLW  2E
049AC:  ADDWF  x47,W
049AE:  MOVWF  FE9
049B0:  MOVLW  01
049B2:  ADDWFC x48,W
049B4:  MOVWF  FEA
049B6:  MOVLW  01
049B8:  ADDWF  FEF,W
049BA:  MOVWF  00
049BC:  MOVLW  00
049BE:  ADDWFC FEC,W
049C0:  MOVWF  01
049C2:  MOVLW  00
049C4:  ADDWFC FEC,W
049C6:  MOVWF  02
049C8:  MOVLW  00
049CA:  ADDWFC FEC,W
049CC:  MOVWF  03
049CE:  MOVF   FED,F
049D0:  MOVF   FED,F
049D2:  MOVF   FED,F
049D4:  MOVFF  00,FEF
049D8:  MOVFF  01,FEC
049DC:  MOVFF  02,FEC
049E0:  MOVFF  03,FEC
049E4:  MOVF   FED,F
049E6:  MOVF   FED,F
049E8:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += 1;
049EA:  MOVLB  A
049EC:  MOVF   xB0,W
049EE:  MULLW  0A
049F0:  MOVF   FF3,W
049F2:  MOVLB  B
049F4:  CLRF   x48
049F6:  MOVWF  x47
049F8:  MOVLW  04
049FA:  ADDWF  x47,W
049FC:  MOVWF  01
049FE:  MOVLW  00
04A00:  ADDWFC x48,W
04A02:  MOVWF  03
04A04:  MOVF   01,W
04A06:  ADDLW  2E
04A08:  MOVWF  FE9
04A0A:  MOVLW  01
04A0C:  ADDWFC 03,W
04A0E:  MOVWF  FEA
04A10:  MOVLW  01
04A12:  ADDWF  FEF,W
04A14:  MOVWF  00
04A16:  MOVLW  00
04A18:  ADDWFC FEC,W
04A1A:  MOVWF  01
04A1C:  MOVLW  00
04A1E:  ADDWFC FEC,W
04A20:  MOVWF  02
04A22:  MOVLW  00
04A24:  ADDWFC FEC,W
04A26:  MOVWF  03
04A28:  MOVF   FED,F
04A2A:  MOVF   FED,F
04A2C:  MOVF   FED,F
04A2E:  MOVFF  00,FEF
04A32:  MOVFF  01,FEC
04A36:  MOVFF  02,FEC
04A3A:  MOVFF  03,FEC
04A3E:  MOVF   FED,F
04A40:  MOVF   FED,F
04A42:  MOVF   FED,F
....................         misf_counter_table[id].reserve_counter1  = 0;
04A44:  MOVLB  A
04A46:  MOVF   xB0,W
04A48:  MULLW  0A
04A4A:  MOVF   FF3,W
04A4C:  MOVLB  B
04A4E:  CLRF   x48
04A50:  MOVWF  x47
04A52:  MOVLW  08
04A54:  ADDWF  x47,W
04A56:  MOVWF  01
04A58:  MOVLW  00
04A5A:  ADDWFC x48,W
04A5C:  MOVWF  03
04A5E:  MOVF   01,W
04A60:  ADDLW  2E
04A62:  MOVWF  FE9
04A64:  MOVLW  01
04A66:  ADDWFC 03,W
04A68:  MOVWF  FEA
04A6A:  CLRF   FEF
.................... 
....................         // アドレステーブル更新
....................         misf_update_address_area();
04A6C:  MOVLB  0
04A6E:  CALL   4356
....................         return;
04A72:  GOTO   4C18
....................     }
.................... 
....................     // データ書き込み
....................     unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
04A76:  MOVLB  A
04A78:  MOVF   xB0,W
04A7A:  MULLW  0C
04A7C:  MOVF   FF3,W
04A7E:  MOVLB  B
04A80:  CLRF   x48
04A82:  MOVWF  x47
04A84:  MOVFF  B48,03
04A88:  MOVF   x47,W
04A8A:  MOVLB  0
04A8C:  CALL   0132
04A90:  MOVWF  00
04A92:  TBLRD*+
04A94:  MOVFF  FF5,01
04A98:  TBLRD*+
04A9A:  MOVFF  FF5,02
04A9E:  TBLRD*+
04AA0:  MOVFF  FF5,03
04AA4:  MOVFF  03,B4C
04AA8:  MOVFF  02,B4B
04AAC:  MOVFF  01,B4A
04AB0:  MOVFF  00,B49
04AB4:  MOVLB  A
04AB6:  MOVF   xB0,W
04AB8:  MULLW  0A
04ABA:  MOVF   FF3,W
04ABC:  MOVLB  B
04ABE:  CLRF   x4E
04AC0:  MOVWF  x4D
04AC2:  MOVLW  2E
04AC4:  ADDWF  x4D,W
04AC6:  MOVWF  FE9
04AC8:  MOVLW  01
04ACA:  ADDWFC x4E,W
04ACC:  MOVWF  FEA
04ACE:  MOVFF  FEF,00
04AD2:  MOVFF  FEC,01
04AD6:  MOVFF  FEC,02
04ADA:  MOVFF  FEC,03
04ADE:  MOVF   FED,F
04AE0:  MOVF   FED,F
04AE2:  MOVF   FED,F
04AE4:  MOVF   00,W
04AE6:  ADDWF  x49,W
04AE8:  MOVWF  x43
04AEA:  MOVF   01,W
04AEC:  ADDWFC x4A,W
04AEE:  MOVWF  x44
04AF0:  MOVF   02,W
04AF2:  ADDWFC x4B,W
04AF4:  MOVWF  x45
04AF6:  MOVF   03,W
04AF8:  ADDWFC x4C,W
04AFA:  MOVWF  x46
....................     write_data_bytes(mis_fm, write_address, data_ptr, size);
04AFC:  MOVFF  115,B8E
04B00:  MOVFF  114,B8D
04B04:  MOVFF  113,B8C
04B08:  MOVFF  112,B8B
04B0C:  MOVFF  B46,B92
04B10:  MOVFF  B45,B91
04B14:  MOVFF  B44,B90
04B18:  MOVFF  B43,B8F
04B1C:  MOVFF  AB2,B94
04B20:  MOVFF  AB1,B93
04B24:  MOVFF  AB4,B96
04B28:  MOVFF  AB3,B95
04B2C:  MOVLB  0
04B2E:  CALL   3B1A
.................... 
....................     // カウンタ更新
....................     misf_counter_table[id].used_counter     += size;
04B32:  MOVLB  A
04B34:  MOVF   xB0,W
04B36:  MULLW  0A
04B38:  MOVF   FF3,W
04B3A:  MOVLB  B
04B3C:  CLRF   x48
04B3E:  MOVWF  x47
04B40:  MOVLW  2E
04B42:  ADDWF  x47,W
04B44:  MOVWF  FE9
04B46:  MOVLW  01
04B48:  ADDWFC x48,W
04B4A:  MOVWF  FEA
04B4C:  MOVLB  A
04B4E:  MOVF   xB3,W
04B50:  ADDWF  FEF,W
04B52:  MOVWF  00
04B54:  MOVF   xB4,W
04B56:  ADDWFC FEC,W
04B58:  MOVWF  01
04B5A:  MOVLW  00
04B5C:  ADDWFC FEC,W
04B5E:  MOVWF  02
04B60:  MOVLW  00
04B62:  ADDWFC FEC,W
04B64:  MOVWF  03
04B66:  MOVF   FED,F
04B68:  MOVF   FED,F
04B6A:  MOVF   FED,F
04B6C:  MOVFF  00,FEF
04B70:  MOVFF  01,FEC
04B74:  MOVFF  02,FEC
04B78:  MOVFF  03,FEC
04B7C:  MOVF   FED,F
04B7E:  MOVF   FED,F
04B80:  MOVF   FED,F
....................     misf_counter_table[id].uncopied_counter += size;
04B82:  MOVF   xB0,W
04B84:  MULLW  0A
04B86:  MOVF   FF3,W
04B88:  MOVLB  B
04B8A:  CLRF   x48
04B8C:  MOVWF  x47
04B8E:  MOVLW  04
04B90:  ADDWF  x47,W
04B92:  MOVWF  01
04B94:  MOVLW  00
04B96:  ADDWFC x48,W
04B98:  MOVWF  03
04B9A:  MOVF   01,W
04B9C:  ADDLW  2E
04B9E:  MOVWF  FE9
04BA0:  MOVLW  01
04BA2:  ADDWFC 03,W
04BA4:  MOVWF  FEA
04BA6:  MOVLB  A
04BA8:  MOVF   xB3,W
04BAA:  ADDWF  FEF,W
04BAC:  MOVWF  00
04BAE:  MOVF   xB4,W
04BB0:  ADDWFC FEC,W
04BB2:  MOVWF  01
04BB4:  MOVLW  00
04BB6:  ADDWFC FEC,W
04BB8:  MOVWF  02
04BBA:  MOVLW  00
04BBC:  ADDWFC FEC,W
04BBE:  MOVWF  03
04BC0:  MOVF   FED,F
04BC2:  MOVF   FED,F
04BC4:  MOVF   FED,F
04BC6:  MOVFF  00,FEF
04BCA:  MOVFF  01,FEC
04BCE:  MOVFF  02,FEC
04BD2:  MOVFF  03,FEC
04BD6:  MOVF   FED,F
04BD8:  MOVF   FED,F
04BDA:  MOVF   FED,F
....................     misf_counter_table[id].reserve_counter1 += size;
04BDC:  MOVF   xB0,W
04BDE:  MULLW  0A
04BE0:  MOVF   FF3,W
04BE2:  MOVLB  B
04BE4:  CLRF   x48
04BE6:  MOVWF  x47
04BE8:  MOVLW  08
04BEA:  ADDWF  x47,W
04BEC:  MOVWF  01
04BEE:  MOVLW  00
04BF0:  ADDWFC x48,W
04BF2:  MOVWF  03
04BF4:  MOVF   01,W
04BF6:  ADDLW  2E
04BF8:  MOVWF  FE9
04BFA:  MOVLW  01
04BFC:  ADDWFC 03,W
04BFE:  MOVWF  FEA
04C00:  MOVF   FEF,W
04C02:  MOVLB  A
04C04:  ADDWF  xB3,W
04C06:  MOVWF  01
04C08:  MOVLW  00
04C0A:  ADDWFC xB4,W
04C0C:  MOVWF  03
04C0E:  MOVF   01,W
04C10:  MOVWF  FEF
.................... 
....................     // アドレステーブル更新
....................     misf_update_address_area();
04C12:  MOVLB  0
04C14:  CALL   4356
04C18:  RETURN 0
.................... }
.................... 
.................... FlashData_t make_flash_data_table(void)
*
03E9E:  MOVLW  0B
03EA0:  MOVLB  B
03EA2:  MOVWF  xD0
03EA4:  MOVLW  8F
03EA6:  MOVWF  xCF
.................... {
....................     FlashData_t flash_data;
....................     FlashData_t *flash_data_ptr = &flash_data;
.................... 
....................     // 初期化
....................     memset(flash_data_ptr->bytes, 0, sizeof(flash_data_ptr->bytes));
03EA8:  MOVF   xCF,W
03EAA:  MOVWF  01
03EAC:  MOVF   xD0,W
03EAE:  MOVWF  03
03EB0:  MOVF   01,W
03EB2:  MOVWF  xD1
03EB4:  MOVFF  03,BD2
03EB8:  MOVFF  BD2,FEA
03EBC:  MOVFF  BD1,FE9
03EC0:  CLRF   00
03EC2:  CLRF   02
03EC4:  MOVLW  40
03EC6:  MOVWF  01
03EC8:  MOVLB  0
03ECA:  CALL   2B06
.................... 
....................     flash_data_ptr->packet.payload.logdata.piclog = misf_counter_table[FLASH_ID_PICLOG];
03ECE:  MOVLB  B
03ED0:  MOVF   xCF,W
03ED2:  MOVWF  FE9
03ED4:  MOVF   xD0,W
03ED6:  MOVWF  FEA
03ED8:  MOVLW  01
03EDA:  MOVWF  FE2
03EDC:  MOVLW  38
03EDE:  MOVWF  FE1
03EE0:  MOVLW  0A
03EE2:  MOVWF  01
03EE4:  MOVLB  0
03EE6:  MOVFF  FE6,FEE
03EEA:  DECFSZ 01,F
03EEC:  GOTO   3EE6
....................     flash_data_ptr->packet.payload.logdata.environment = misf_counter_table[FLASH_ID_ENVIRONMENT];
03EF0:  MOVLW  0A
03EF2:  MOVLB  B
03EF4:  ADDWF  xCF,W
03EF6:  MOVWF  FE9
03EF8:  MOVLW  00
03EFA:  ADDWFC xD0,W
03EFC:  MOVWF  FEA
03EFE:  MOVLW  01
03F00:  MOVWF  FE2
03F02:  MOVLW  42
03F04:  MOVWF  FE1
03F06:  MOVLW  0A
03F08:  MOVWF  01
03F0A:  MOVLB  0
03F0C:  MOVFF  FE6,FEE
03F10:  DECFSZ 01,F
03F12:  GOTO   3F0C
....................     flash_data_ptr->packet.payload.logdata.iv1_header = misf_counter_table[FLASH_ID_IV1_HEADER];
03F16:  MOVLW  14
03F18:  MOVLB  B
03F1A:  ADDWF  xCF,W
03F1C:  MOVWF  FE9
03F1E:  MOVLW  00
03F20:  ADDWFC xD0,W
03F22:  MOVWF  FEA
03F24:  MOVLW  01
03F26:  MOVWF  FE2
03F28:  MOVLW  4C
03F2A:  MOVWF  FE1
03F2C:  MOVLW  0A
03F2E:  MOVWF  01
03F30:  MOVLB  0
03F32:  MOVFF  FE6,FEE
03F36:  DECFSZ 01,F
03F38:  GOTO   3F32
....................     flash_data_ptr->packet.payload.logdata.iv1_data = misf_counter_table[FLASH_ID_IV1_DATA];
03F3C:  MOVLW  1E
03F3E:  MOVLB  B
03F40:  ADDWF  xCF,W
03F42:  MOVWF  FE9
03F44:  MOVLW  00
03F46:  ADDWFC xD0,W
03F48:  MOVWF  FEA
03F4A:  MOVLW  01
03F4C:  MOVWF  FE2
03F4E:  MOVLW  56
03F50:  MOVWF  FE1
03F52:  MOVLW  0A
03F54:  MOVWF  01
03F56:  MOVLB  0
03F58:  MOVFF  FE6,FEE
03F5C:  DECFSZ 01,F
03F5E:  GOTO   3F58
....................     flash_data_ptr->packet.payload.logdata.iv2_header = misf_counter_table[FLASH_ID_IV2_HEADER];
03F62:  MOVLW  28
03F64:  MOVLB  B
03F66:  ADDWF  xCF,W
03F68:  MOVWF  FE9
03F6A:  MOVLW  00
03F6C:  ADDWFC xD0,W
03F6E:  MOVWF  FEA
03F70:  MOVLW  01
03F72:  MOVWF  FE2
03F74:  MOVLW  60
03F76:  MOVWF  FE1
03F78:  MOVLW  0A
03F7A:  MOVWF  01
03F7C:  MOVLB  0
03F7E:  MOVFF  FE6,FEE
03F82:  DECFSZ 01,F
03F84:  GOTO   3F7E
....................     flash_data_ptr->packet.payload.logdata.iv2_data = misf_counter_table[FLASH_ID_IV2_DATA];
03F88:  MOVLW  32
03F8A:  MOVLB  B
03F8C:  ADDWF  xCF,W
03F8E:  MOVWF  FE9
03F90:  MOVLW  00
03F92:  ADDWFC xD0,W
03F94:  MOVWF  FEA
03F96:  MOVLW  01
03F98:  MOVWF  FE2
03F9A:  MOVLW  6A
03F9C:  MOVWF  FE1
03F9E:  MOVLW  0A
03FA0:  MOVWF  01
03FA2:  MOVLB  0
03FA4:  MOVFF  FE6,FEE
03FA8:  DECFSZ 01,F
03FAA:  GOTO   3FA4
.................... 
....................     // CRC 計算
....................     flash_data_ptr->packet.crc = calc_crc8(flash_data_ptr->bytes, PACKET_SIZE - 1);
03FAE:  MOVLW  3F
03FB0:  MOVLB  B
03FB2:  ADDWF  xCF,W
03FB4:  MOVWF  01
03FB6:  MOVLW  00
03FB8:  ADDWFC xD0,W
03FBA:  MOVWF  03
03FBC:  MOVF   01,W
03FBE:  MOVWF  xD1
03FC0:  MOVFF  03,BD2
03FC4:  MOVF   xCF,W
03FC6:  MOVWF  01
03FC8:  MOVF   xD0,W
03FCA:  MOVWF  03
03FCC:  MOVF   01,W
03FCE:  MOVWF  xD3
03FD0:  MOVFF  03,BD4
03FD4:  MOVFF  BD4,BD6
03FD8:  MOVFF  BD3,BD5
03FDC:  MOVLW  3F
03FDE:  MOVWF  xD7
03FE0:  MOVLB  0
03FE2:  CALL   2D3E
03FE6:  MOVFF  BD2,FEA
03FEA:  MOVFF  BD1,FE9
03FEE:  MOVFF  01,FEF
.................... 
....................     return flash_data;
03FF2:  MOVLW  8F
03FF4:  MOVWF  01
03FF6:  MOVLW  0B
03FF8:  MOVWF  02
03FFA:  GOTO   435A (RETURN)
.................... }
.................... 
.................... void misf_update_address_area(void)
*
04356:  GOTO   3E9E
0435A:  MOVFF  02,03
0435E:  MOVF   01,W
04360:  MOVWF  FE1
04362:  MOVFF  03,FE2
04366:  MOVLW  0B
04368:  MOVWF  FEA
0436A:  MOVLW  47
0436C:  MOVWF  FE9
0436E:  MOVLW  40
04370:  MOVWF  01
04372:  MOVFF  FE6,FEE
04376:  DECFSZ 01,F
04378:  GOTO   4372
0437C:  MOVLW  0B
0437E:  MOVLB  B
04380:  MOVWF  x88
04382:  MOVLW  47
04384:  MOVWF  x87
.................... {
....................     FlashData_t flash_data = make_flash_data_table();
....................     FlashData_t *flash_data_ptr = &flash_data;
.................... 
....................     sector_erase(mis_fm, MISF_CIGS_DATA_TABLE_START);
04386:  MOVFF  115,B8C
0438A:  MOVFF  114,B8B
0438E:  MOVFF  113,B8A
04392:  MOVFF  112,B89
04396:  CLRF   x90
04398:  CLRF   x8F
0439A:  CLRF   x8E
0439C:  CLRF   x8D
0439E:  MOVLB  0
043A0:  CALL   3FFE
....................     write_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, flash_data_ptr->bytes, PACKET_SIZE);
043A4:  MOVLB  B
043A6:  MOVF   x87,W
043A8:  MOVWF  01
043AA:  MOVF   x88,W
043AC:  MOVWF  03
043AE:  MOVF   01,W
043B0:  MOVWF  x89
043B2:  MOVFF  03,B8A
043B6:  MOVFF  115,B8E
043BA:  MOVFF  114,B8D
043BE:  MOVFF  113,B8C
043C2:  MOVFF  112,B8B
043C6:  CLRF   x92
043C8:  CLRF   x91
043CA:  CLRF   x90
043CC:  CLRF   x8F
043CE:  MOVFF  B8A,B94
043D2:  MOVFF  B89,B93
043D6:  CLRF   x96
043D8:  MOVLW  40
043DA:  MOVWF  x95
043DC:  MOVLB  0
043DE:  CALL   3B1A
043E2:  RETURN 0
.................... }
.................... 
.................... 
.................... // PICLOG 更新後に呼ばれる関数例 (piclog_write 内で既に misf_update_address_area 呼んでいる場合は不要)
.................... static void update_piclog_counters_after_write(unsigned int16 wrote_size)
.................... {
....................     piclog_data.used_counter     += wrote_size;
....................     piclog_data.uncopied_counter += wrote_size;
....................     // 必要なら wrap 処理追加
....................     misf_update_address_area();
.................... }
.................... 
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode)
.................... {
....................     FlashOperationStruct data;
....................     // 構造体の初期化
....................     data.mission_id = mission_id;
....................     data.func_type = func_type;
....................     data.write_mode = write_mode;
....................     data.source_type = SOURCE_MISF_UNCOPIED;
....................     enqueue_flash_operation(&data);
.................... }
.................... 
.................... void write_smf_header(smf_data_table_t *smf_data_table)
.................... {
.................... 
....................     int8 readdata[PACKET_SIZE];
....................     int8 retry_count;
....................     int1 crc_valid = 0;
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
....................         if (is_crc_valid(readdata, PACKET_SIZE-1))
....................         {
....................             crc_valid = 1; // FIX: フラグ更新
....................             fprintf(PC, "CRC verification passed on attempt %d\r\n", retry_count + 1);
....................             break;
....................         }
....................     }
....................     if (!crc_valid)
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
....................         // return; 
....................     }
.................... }
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id)
.................... {
....................    MisfAddressStruct mis_struct = {0};
.................... 
....................    if (mission_id == CIGS_DATA_TABLE)
....................    {
....................       mis_struct.start_address = MISF_CIGS_DATA_TABLE_START;
....................       mis_struct.end_address   = MISF_CIGS_DATA_TABLE_END;
....................    }
....................    else if (mission_id == CIGS_PICLOG_DATA)
....................    {
....................       mis_struct.start_address = MISF_CIGS_PICLOG_START;
....................       mis_struct.end_address   = MISF_CIGS_PICLOG_END;
....................    }
....................    else if (mission_id == CIGS_ENVIRO_DATA)
....................    {
....................       mis_struct.start_address = MISF_CIGS_ENVIRO_START;
....................       mis_struct.end_address   = MISF_CIGS_ENVIRO_END;
....................    }
....................    else if (mission_id == CIGS_IV1_HEADER)
....................    {
....................       mis_struct.start_address = MISF_CIGS_IV1_HEADER_START;
....................       mis_struct.end_address   = MISF_CIGS_IV1_HEADER_END;
....................    }
....................    else if (mission_id == CIGS_IV1_DATA)
....................    {
....................       mis_struct.start_address = MISF_CIGS_IV1_DATA_START;
....................       mis_struct.end_address   = MISF_CIGS_IV1_DATA_END;
....................    }
....................    return mis_struct;
.................... }
.................... 
.................... MisfWriteStruct get_misf_write_struct(MissionID mission_id)
.................... {
....................     MisfWriteStruct mis_write_struct = {0};
.................... 
....................     if (mission_id == CIGS_DATA_TABLE)
....................     {
....................         mis_write_struct.start_address = MISF_CIGS_DATA_TABLE_START;
....................         mis_write_struct.size = MISF_CIGS_DATA_TABLE_SIZE;
....................     }
....................     else if (mission_id == CIGS_PICLOG_DATA)
....................     {
....................         mis_write_struct.start_address = MISF_CIGS_PICLOG_START + piclog_data.used_counter - piclog_data.uncopied_counter;
....................         mis_write_struct.size = piclog_data.uncopied_counter;
....................     }
....................     else if (mission_id == CIGS_ENVIRO_DATA)
....................     {
....................         mis_write_struct.start_address = MISF_CIGS_ENVIRO_START + environment_data.used_counter - environment_data.uncopied_counter;
....................         mis_write_struct.size = environment_data.uncopied_counter;
....................     }
....................     else if (mission_id == CIGS_IV1_HEADER)
....................     {
....................         mis_write_struct.start_address = MISF_CIGS_IV1_HEADER_START + iv1_header.used_counter - iv1_header.uncopied_counter;
....................         mis_write_struct.size = iv1_header.uncopied_counter;
....................     }
....................     else if (mission_id == CIGS_IV1_DATA)
....................     {
....................         mis_write_struct.start_address = MISF_CIGS_IV1_DATA_START + iv1_data.used_counter - iv1_data.uncopied_counter;
....................         mis_write_struct.size = iv1_data.uncopied_counter;
....................     }
....................     return mis_write_struct;
.................... }
.................... // End of file
.................... 
.................... 
.................... // アプリケーション実装ファイル
.................... #include "application/mmj_cigs_excute_mission.c"
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../hal/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/value_status.h"    // ステータス定義
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "mmj_cigs_excute_mission.h"                  // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_DEBUG 0xA3
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "../domain/mmj_cigs_smf.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #include "../hal/mmj_cigs_config.h" // int8,int32 型など(CCS C) 依存
.................... #include "mmj_cigs_flash.h"       // MISF_ADDRESS_TABLE, misf_counter_table 依存
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int8 loop_counter;
....................     int8 reserved[3];
.................... } SMF_PARTITION;
.................... 
.................... // パーティション管理構造体
.................... typedef struct {
....................     SMF_PARTITION piclog;     // データテーブル領域は利用しないため削除
....................     SMF_PARTITION env;
....................     SMF_PARTITION iv1_header;
....................     SMF_PARTITION iv1_data;
....................     SMF_PARTITION iv2_header;
....................     SMF_PARTITION iv2_data;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... extern PartitionParam param;  // extern宣言に変更
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         SMF_PARTITION headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table);
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/communication/typedef_content.h"    // 通信ライブラリ
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.h"      // ミッションツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../domain/mmj_cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFFFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE-1];
.................... 
....................     struct {
....................         unsigned int16 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int16 time_msec;
....................         meas_data_t env_data[2];
....................         meas_data_t iv_data[16];
.................... 
....................     }header;
....................     struct {
....................         meas_data_t iv_data[21];
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/communication_driver.h" // 通信ドライバー
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *content)
*
0D5A0:  MOVLB  2
0D5A2:  MOVF   x2A,W
0D5A4:  MOVWF  FE9
0D5A6:  MOVF   x2B,W
0D5A8:  MOVWF  FEA
0D5AA:  MOVFF  FEF,22C
.................... {
....................    // record to executed mission list
....................    int8 command_id = content[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
0D5AE:  MOVLW  7E
0D5B0:  MOVWF  FF6
0D5B2:  MOVLW  12
0D5B4:  MOVWF  FF7
0D5B6:  MOVLW  00
0D5B8:  MOVWF  FF8
0D5BA:  MOVLB  0
0D5BC:  CALL   1EDC
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
0D5C0:  MOVLW  C4
0D5C2:  MOVWF  FF6
0D5C4:  MOVLW  12
0D5C6:  MOVWF  FF7
0D5C8:  MOVLW  00
0D5CA:  MOVWF  FF8
0D5CC:  MOVLW  0C
0D5CE:  MOVLB  3
0D5D0:  MOVWF  x16
0D5D2:  MOVLB  0
0D5D4:  CALL   1F12
0D5D8:  MOVFF  22C,A62
0D5DC:  MOVLW  37
0D5DE:  MOVLB  A
0D5E0:  MOVWF  x63
0D5E2:  MOVLB  0
0D5E4:  CALL   2126
0D5E8:  MOVLW  D2
0D5EA:  MOVWF  FF6
0D5EC:  MOVLW  12
0D5EE:  MOVWF  FF7
0D5F0:  MOVLW  00
0D5F2:  MOVWF  FF8
0D5F4:  MOVLW  04
0D5F6:  MOVLB  3
0D5F8:  MOVWF  x16
0D5FA:  MOVLB  0
0D5FC:  CALL   1F12
....................    switch(command_id)
0D600:  MOVLB  2
0D602:  MOVF   x2C,W
0D604:  XORLW  10
0D606:  MOVLB  0
0D608:  BTFSC  FD8.2
0D60A:  GOTO   D6DA
0D60E:  XORLW  01
0D610:  BTFSC  FD8.2
0D612:  GOTO   D6DE
0D616:  XORLW  03
0D618:  BTFSC  FD8.2
0D61A:  GOTO   D6E2
0D61E:  XORLW  13
0D620:  BTFSC  FD8.2
0D622:  GOTO   D6E6
0D626:  XORLW  12
0D628:  BTFSC  FD8.2
0D62A:  GOTO   D6EA
0D62E:  XORLW  93
0D630:  BTFSC  FD8.2
0D632:  GOTO   D6EE
0D636:  XORLW  01
0D638:  BTFSC  FD8.2
0D63A:  GOTO   D6FE
0D63E:  XORLW  03
0D640:  BTFSC  FD8.2
0D642:  GOTO   D70E
0D646:  XORLW  01
0D648:  BTFSC  FD8.2
0D64A:  GOTO   D71E
0D64E:  XORLW  07
0D650:  BTFSC  FD8.2
0D652:  GOTO   D72E
0D656:  XORLW  01
0D658:  BTFSC  FD8.2
0D65A:  GOTO   D73E
0D65E:  XORLW  03
0D660:  BTFSC  FD8.2
0D662:  GOTO   D74E
0D666:  XORLW  01
0D668:  BTFSC  FD8.2
0D66A:  GOTO   D75E
0D66E:  XORLW  0F
0D670:  BTFSC  FD8.2
0D672:  GOTO   D76E
0D676:  XORLW  18
0D678:  BTFSC  FD8.2
0D67A:  GOTO   D77E
0D67E:  XORLW  01
0D680:  BTFSC  FD8.2
0D682:  GOTO   D78E
0D686:  XORLW  03
0D688:  BTFSC  FD8.2
0D68A:  GOTO   D79E
0D68E:  XORLW  01
0D690:  BTFSC  FD8.2
0D692:  GOTO   D7AE
0D696:  XORLW  07
0D698:  BTFSC  FD8.2
0D69A:  GOTO   D7BE
0D69E:  XORLW  01
0D6A0:  BTFSC  FD8.2
0D6A2:  GOTO   D7CE
0D6A6:  XORLW  03
0D6A8:  BTFSC  FD8.2
0D6AA:  GOTO   D7DE
0D6AE:  XORLW  36
0D6B0:  BTFSC  FD8.2
0D6B2:  GOTO   D7E6
0D6B6:  XORLW  01
0D6B8:  BTFSC  FD8.2
0D6BA:  GOTO   D7F6
0D6BE:  XORLW  03
0D6C0:  BTFSC  FD8.2
0D6C2:  GOTO   D806
0D6C6:  XORLW  01
0D6C8:  BTFSC  FD8.2
0D6CA:  GOTO   D816
0D6CE:  XORLW  07
0D6D0:  BTFSC  FD8.2
0D6D2:  GOTO   D826
0D6D6:  GOTO   D82E
....................    {
....................       case 0x10: // example command
....................          // mode_dummy(content);
....................          //mode_iv_meas_adc();
....................          break;
0D6DA:  GOTO   D842
....................       case 0x11:
....................          // mode_test_iv(content);
....................          break;
0D6DE:  GOTO   D842
....................       case 0x12:
....................          // test_adc();
....................          break;
0D6E2:  GOTO   D842
....................       case 0x01:
....................          //mode_measure(content); // check if the flash is connected
....................          break;
0D6E6:  GOTO   D842
....................       case 0x13:
....................          // mode_sweep_port1(content[1]); // Sweep Port 1 with the given step
....................          break;
0D6EA:  GOTO   D842
.................... 
....................       // ___________________ MISF Commands ______________________
....................       case ID_MISF_ERASE_ALL:
....................          mode_misf_erase_all(content);
0D6EE:  MOVFF  22B,230
0D6F2:  MOVFF  22A,22F
0D6F6:  CALL   5440
....................          break;
0D6FA:  GOTO   D842
....................       case ID_MISF_ERASE_1SECTOR:
....................          mode_misf_erase_1sector(content);
0D6FE:  MOVFF  22B,22E
0D702:  MOVFF  22A,22D
0D706:  GOTO   551C
....................          break;
0D70A:  GOTO   D842
....................       case ID_MISF_ERASE_4kByte_SUBSECTOR:
....................          mode_misf_erase_4kbyte_subsector(content);
0D70E:  MOVFF  22B,22E
0D712:  MOVFF  22A,22D
0D716:  GOTO   5A10
....................          break;
0D71A:  GOTO   D842
....................       case ID_MISF_ERASE_64kByte_SUBSECTOR:
....................          mode_misf_erase_64kbyte_subsector(content);
0D71E:  MOVFF  22B,22E
0D722:  MOVFF  22A,22D
0D726:  GOTO   5BA8
....................          break;
0D72A:  GOTO   D842
....................       case ID_MISF_WRITE_DEMO:
....................          mode_misf_write_demo(content);
0D72E:  MOVFF  22B,22E
0D732:  MOVFF  22A,22D
0D736:  GOTO   5EFC
....................          break;
0D73A:  GOTO   D842
....................       case ID_MISF_WRITE_4kByte_SUBSECTOR:
....................          mode_misf_write_4kbyte_subsector(content);
0D73E:  MOVFF  22B,22E
0D742:  MOVFF  22A,22D
0D746:  GOTO   652E
....................          break;
0D74A:  GOTO   D842
....................       case ID_MISF_READ:
....................          mode_misf_read(content);
0D74E:  MOVFF  22B,22E
0D752:  MOVFF  22A,22D
0D756:  GOTO   65A2
....................          break;
0D75A:  GOTO   D842
....................       case ID_MISF_READ_ADDRESS:
....................          mode_misf_read_address(content);
0D75E:  MOVFF  22B,22E
0D762:  MOVFF  22A,22D
0D766:  GOTO   6D08
....................          break;
0D76A:  GOTO   D842
....................       case ID_MISF_ERASE_AND_RESET:
....................          mode_misf_erase_and_reset(content);
0D76E:  MOVFF  22B,22E
0D772:  MOVFF  22A,22D
0D776:  GOTO   700C
....................          break;
0D77A:  GOTO   D842
.................... 
....................       // ___________________ SMF Commands ______________________
....................       case ID_SMF_COPY:
....................          mode_smf_copy(content);
0D77E:  MOVFF  22B,22E
0D782:  MOVFF  22A,22D
0D786:  GOTO   7062
....................          break;
0D78A:  GOTO   D842
....................       case ID_SMF_READ:
....................          mode_smf_read(content);
0D78E:  MOVFF  22B,22E
0D792:  MOVFF  22A,22D
0D796:  GOTO   713E
....................          break;
0D79A:  GOTO   D842
....................       case ID_SMF_ERASE:
....................          mode_smf_erase(content);
0D79E:  MOVFF  22B,22E
0D7A2:  MOVFF  22A,22D
0D7A6:  GOTO   7408
....................          break;
0D7AA:  GOTO   D842
....................       case ID_SMF_COPY_FORCE:
....................          mode_smf_address_reset(content);
0D7AE:  MOVFF  22B,22E
0D7B2:  MOVFF  22A,22D
0D7B6:  GOTO   75F2
....................          break;
0D7BA:  GOTO   D842
....................       case ID_SMF_READ_FORCE:
....................          mode_smf_read_force(content);
0D7BE:  MOVFF  22B,22E
0D7C2:  MOVFF  22A,22D
0D7C6:  GOTO   776C
....................          break;
0D7CA:  GOTO   D842
....................       case ID_SMF_ERASE_FORCE:
....................          mode_smf_erase_force(content);
0D7CE:  MOVFF  22B,22E
0D7D2:  MOVFF  22A,22D
0D7D6:  GOTO   7B5A
....................          break;
0D7DA:  GOTO   D842
....................       case ID_SMF_RESET:
....................          smf_data_table_init();
0D7DE:  CALL   7470
....................          break;
0D7E2:  GOTO   D842
....................          
....................          
....................       // ________________MEAS________________________________
....................       case ID_MEAS_IV:
....................          mode_meas_iv(content);
0D7E6:  MOVFF  22B,22E
0D7EA:  MOVFF  22A,22D
0D7EE:  GOTO   9E44
....................          break;
0D7F2:  GOTO   D842
....................       case ID_MEAS_DEBUG:
....................          mode_meas_iv_debug(content);
0D7F6:  MOVFF  22B,22E
0D7FA:  MOVFF  22A,22D
0D7FE:  GOTO   B828
....................          break;;
0D802:  GOTO   D842
....................       case ID_MEAS_ENV:
....................          mode_meas_env(content);
0D806:  MOVFF  22B,22E
0D80A:  MOVFF  22A,22D
0D80E:  GOTO   BB0A
....................          break;
0D812:  GOTO   D842
....................       case ID_MEAS_ENV_DEBUG:
....................          mode_meas_env_debug(content);
0D816:  MOVFF  22B,22E
0D81A:  MOVFF  22A,22D
0D81E:  GOTO   BFF2
....................          break;
0D822:  GOTO   D842
....................      
....................      case 0xA4:
....................           sweep_with_print();
0D826:  GOTO   C016
....................           break;
0D82A:  GOTO   D842
....................      
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
0D82E:  MOVLW  D8
0D830:  MOVWF  FF6
0D832:  MOVLW  12
0D834:  MOVWF  FF7
0D836:  MOVLW  00
0D838:  MOVWF  FF8
0D83A:  CALL   1EDC
....................          break;
0D83E:  GOTO   D842
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
0D842:  MOVLW  F0
0D844:  MOVWF  FF6
0D846:  MOVLW  12
0D848:  MOVWF  FF7
0D84A:  MOVLW  00
0D84C:  MOVWF  FF8
0D84E:  CALL   1EDC
0D852:  GOTO   D8C0 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
0FF64:  MOVLW  36
0FF66:  MOVWF  FF6
0FF68:  MOVLW  13
0FF6A:  MOVWF  FF7
0FF6C:  MOVLW  00
0FF6E:  MOVWF  FF8
0FF70:  CALL   1EDC
....................    
....................    switch(command->frame_id)
0FF74:  MOVLB  2
0FF76:  MOVF   x24,W
0FF78:  MOVWF  FE9
0FF7A:  MOVF   x25,W
0FF7C:  MOVWF  FEA
0FF7E:  MOVF   FEF,W
0FF80:  XORLW  00
0FF82:  MOVLB  0
0FF84:  BTFSC  FD8.2
0FF86:  GOTO   FF9E
0FF8A:  XORLW  01
0FF8C:  BTFSC  FD8.2
0FF8E:  GOTO   FFAE
0FF92:  XORLW  03
0FF94:  BTFSC  FD8.2
0FF96:  GOTO   FFCE
0FF9A:  GOTO   FFDE
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
0FF9E:  MOVFF  225,227
0FFA2:  MOVFF  224,226
0FFA6:  GOTO   D874
....................          break;
0FFAA:  GOTO   FFDE
....................          
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
0FFAE:  MOVFF  225,227
0FFB2:  MOVFF  224,226
0FFB6:  GOTO   D8F6
0FFBA:  MOVF   01,F
0FFBC:  BTFSC  FD8.2
0FFBE:  GOTO   FFCA
....................             return TRUE; // if status is finished, return TRUE
0FFC2:  MOVLW  01
0FFC4:  MOVWF  01
0FFC6:  GOTO   FFE2
....................          }        
....................          break;
0FFCA:  GOTO   FFDE
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
0FFCE:  MOVFF  225,227
0FFD2:  MOVFF  224,226
0FFD6:  GOTO   10000
....................          break;
0FFDA:  GOTO   FFDE
....................    }
....................    return FALSE;
0FFDE:  MOVLW  00
0FFE0:  MOVWF  01
0FFE2:  GOTO   108B8 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
0D874:  MOVLW  4E
0D876:  MOVWF  FF6
0D878:  MOVLW  13
0D87A:  MOVWF  FF7
0D87C:  MOVLW  00
0D87E:  MOVWF  FF8
0D880:  CALL   1EDC
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
0D884:  MOVLW  64
0D886:  MOVWF  FF6
0D888:  MOVLW  13
0D88A:  MOVWF  FF7
0D88C:  MOVLW  00
0D88E:  MOVWF  FF8
0D890:  CALL   1EDC
....................    transmit_ack();
0D894:  CALL   542C
.................... 
....................    status[0] = EXECUTING_MISSION;
0D898:  MOVLW  02
0D89A:  MOVWF  4C
....................    execute_mission(command->content);
0D89C:  MOVLW  03
0D89E:  MOVLB  2
0D8A0:  ADDWF  x26,W
0D8A2:  MOVWF  01
0D8A4:  MOVLW  00
0D8A6:  ADDWFC x27,W
0D8A8:  MOVWF  03
0D8AA:  MOVF   01,W
0D8AC:  MOVWF  x28
0D8AE:  MOVFF  03,229
0D8B2:  MOVFF  229,22B
0D8B6:  MOVFF  228,22A
0D8BA:  MOVLB  0
0D8BC:  GOTO   D5A0
....................    if (is_empty_flash_queue())
0D8C0:  CALL   D856
0D8C4:  MOVF   01,F
0D8C6:  BTFSC  FD8.2
0D8C8:  GOTO   D8D4
....................       status[0] = FINISHED;
0D8CC:  MOVLW  06
0D8CE:  MOVWF  4C
0D8D0:  GOTO   D8D8
....................    else
....................       status[0] = SMF_USE_REQ;
0D8D4:  MOVLW  04
0D8D6:  MOVWF  4C
0D8D8:  GOTO   FFAA (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... 
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
*
0D8F6:  MOVLW  7E
0D8F8:  MOVWF  FF6
0D8FA:  MOVLW  13
0D8FC:  MOVWF  FF7
0D8FE:  MOVLW  00
0D900:  MOVWF  FF8
0D902:  CALL   1EDC
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
0D906:  MOVLW  92
0D908:  MOVWF  FF6
0D90A:  MOVLW  13
0D90C:  MOVWF  FF7
0D90E:  MOVLW  00
0D910:  MOVWF  FF8
0D912:  CALL   1EDC
....................    transmit_status();
0D916:  GOTO   D8DC
....................    if (status[0] == FINISHED)
0D91A:  MOVF   4C,W
0D91C:  SUBLW  06
0D91E:  BTFSS  FD8.2
0D920:  GOTO   D940
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
0D924:  MOVLW  B0
0D926:  MOVWF  FF6
0D928:  MOVLW  13
0D92A:  MOVWF  FF7
0D92C:  MOVLW  00
0D92E:  MOVWF  FF8
0D930:  CALL   1EDC
....................       return TRUE;
0D934:  MOVLW  01
0D936:  MOVWF  01
0D938:  GOTO   D948
....................    }
0D93C:  GOTO   D948
....................    else{
....................       return FALSE;
0D940:  MOVLW  00
0D942:  MOVWF  01
0D944:  GOTO   D948
....................    }
0D948:  GOTO   FFBA (RETURN)
.................... }
.................... 
.................... 
.................... void handle_smf_available(Command *command)
.................... {
....................     fprintf(PC, "\t-> SMF available check\r\n");
*
10000:  MOVLW  CC
10002:  MOVWF  FF6
10004:  MOVLW  13
10006:  MOVWF  FF7
10008:  MOVLW  00
1000A:  MOVWF  FF8
1000C:  CALL   1EDC
....................     fprintf(PC, "\t   Transmit Acknowledgement\r\n");
10010:  MOVLW  E6
10012:  MOVWF  FF6
10014:  MOVLW  13
10016:  MOVWF  FF7
10018:  MOVLW  00
1001A:  MOVWF  FF8
1001C:  CALL   1EDC
....................     transmit_ack();
10020:  CALL   542C
.................... 
....................     if (command->content[0] != ALLOW) {
10024:  MOVLW  03
10026:  MOVLB  2
10028:  ADDWF  x26,W
1002A:  MOVWF  FE9
1002C:  MOVLW  00
1002E:  ADDWFC x27,W
10030:  MOVWF  FEA
10032:  DECFSZ FEF,W
10034:  BRA    1003A
10036:  BRA    10040
10038:  MOVLB  0
1003A:  MOVLB  0
1003C:  GOTO   10046
10040:  MOVLB  0
10042:  GOTO   1005A
....................         fprintf(PC, "\t\t-> denied\r\n");
10046:  MOVLW  06
10048:  MOVWF  FF6
1004A:  MOVLW  14
1004C:  MOVWF  FF7
1004E:  MOVLW  00
10050:  MOVWF  FF8
10052:  CALL   1EDC
....................         return;
10056:  GOTO   102BE
....................     }
.................... 
....................     fprintf(PC, "\t\t-> allowed\r\n");
1005A:  MOVLW  14
1005C:  MOVWF  FF6
1005E:  MOVLW  14
10060:  MOVWF  FF7
10062:  MOVLW  00
10064:  MOVWF  FF8
10066:  CALL   1EDC
....................     status[0] = COPYING;
1006A:  MOVLW  05
1006C:  MOVWF  4C
.................... 
....................     int8 processed_count = 0;
1006E:  MOVLB  2
10070:  CLRF   x28
10072:  MOVLB  0
.................... 
....................     while (!is_empty_flash_queue()) {
10074:  CALL   D856
10078:  MOVF   01,F
1007A:  BTFSS  FD8.2
1007C:  GOTO   1027A
....................         FlashOperationStruct *smf_data = dequeue_flash_operation();
10080:  GOTO   D94C
10084:  MOVFF  02,22A
10088:  MOVFF  01,229
....................         /*
....................         if (smf_data == NULL) {
....................             fprintf(PC, "\t\t-> dequeue NULL (break)\r\n");
....................             break;
....................         }
....................          */
....................         fprintf(PC, "\t\t-> Dequeued: func=%u mission=%u size=%ld addr=%ld\r\n",
....................                 (unsigned int)smf_data->func_type,
....................                 (unsigned int)smf_data->mission_id,
....................                 smf_data->misf_size,
....................                 smf_data->misf_start_addr);
1008C:  MOVLW  01
1008E:  MOVLB  2
10090:  ADDWF  x29,W
10092:  MOVWF  FE9
10094:  MOVLW  00
10096:  ADDWFC x2A,W
10098:  MOVWF  FEA
1009A:  MOVFF  FEF,22B
1009E:  MOVF   x29,W
100A0:  MOVWF  FE9
100A2:  MOVF   x2A,W
100A4:  MOVWF  FEA
100A6:  MOVFF  FEF,22C
100AA:  MOVLW  08
100AC:  ADDWF  x29,W
100AE:  MOVWF  FE9
100B0:  MOVLW  00
100B2:  ADDWFC x2A,W
100B4:  MOVWF  FEA
100B6:  MOVFF  FEF,22D
100BA:  MOVFF  FEC,22E
100BE:  MOVFF  FEC,22F
100C2:  MOVFF  FEC,230
100C6:  MOVF   FED,F
100C8:  MOVF   FED,F
100CA:  MOVF   FED,F
100CC:  MOVLW  04
100CE:  ADDWF  x29,W
100D0:  MOVWF  FE9
100D2:  MOVLW  00
100D4:  ADDWFC x2A,W
100D6:  MOVWF  FEA
100D8:  MOVFF  FEF,231
100DC:  MOVFF  FEC,232
100E0:  MOVFF  FEC,233
100E4:  MOVFF  FEC,234
100E8:  MOVF   FED,F
100EA:  MOVF   FED,F
100EC:  MOVF   FED,F
100EE:  MOVLW  24
100F0:  MOVWF  FF6
100F2:  MOVLW  14
100F4:  MOVWF  FF7
100F6:  MOVLW  00
100F8:  MOVWF  FF8
100FA:  MOVLW  14
100FC:  MOVLB  3
100FE:  MOVWF  x16
10100:  MOVLB  0
10102:  CALL   1F12
10106:  MOVFF  22B,2DB
1010A:  MOVLW  1B
1010C:  MOVLB  2
1010E:  MOVWF  xDC
10110:  MOVLB  0
10112:  CALL   D9F8
10116:  MOVLW  3A
10118:  MOVWF  FF6
1011A:  MOVLW  14
1011C:  MOVWF  FF7
1011E:  MOVLW  00
10120:  MOVWF  FF8
10122:  MOVLW  09
10124:  MOVLB  3
10126:  MOVWF  x16
10128:  MOVLB  0
1012A:  CALL   1F12
1012E:  MOVFF  22C,2DB
10132:  MOVLW  1B
10134:  MOVLB  2
10136:  MOVWF  xDC
10138:  MOVLB  0
1013A:  CALL   D9F8
1013E:  MOVLW  45
10140:  MOVWF  FF6
10142:  MOVLW  14
10144:  MOVWF  FF7
10146:  MOVLW  00
10148:  MOVWF  FF8
1014A:  MOVLW  06
1014C:  MOVLB  3
1014E:  MOVWF  x16
10150:  MOVLB  0
10152:  CALL   1F12
10156:  MOVLW  41
10158:  MOVWF  FE9
1015A:  MOVFF  230,238
1015E:  MOVFF  22F,237
10162:  MOVFF  22E,236
10166:  MOVFF  22D,235
1016A:  CALL   DAB4
1016E:  MOVLW  4E
10170:  MOVWF  FF6
10172:  MOVLW  14
10174:  MOVWF  FF7
10176:  MOVLW  00
10178:  MOVWF  FF8
1017A:  MOVLW  06
1017C:  MOVLB  3
1017E:  MOVWF  x16
10180:  MOVLB  0
10182:  CALL   1F12
10186:  MOVLW  41
10188:  MOVWF  FE9
1018A:  MOVFF  234,238
1018E:  MOVFF  233,237
10192:  MOVFF  232,236
10196:  MOVFF  231,235
1019A:  CALL   DAB4
1019E:  MOVLW  0D
101A0:  BTFSS  FA6.6
101A2:  GOTO   101A0
101A6:  MOVLB  E
101A8:  MOVWF  xF9
101AA:  MOVLW  0A
101AC:  MOVLB  0
101AE:  BTFSS  FA6.6
101B0:  GOTO   101AE
101B4:  MOVLB  E
101B6:  MOVWF  xF9
.................... 
....................         switch (smf_data->func_type) {
101B8:  MOVLW  01
101BA:  MOVLB  2
101BC:  ADDWF  x29,W
101BE:  MOVWF  FE9
101C0:  MOVLW  00
101C2:  ADDWFC x2A,W
101C4:  MOVWF  FEA
101C6:  MOVF   FEF,W
101C8:  XORLW  00
101CA:  MOVLB  0
101CC:  BTFSC  FD8.2
101CE:  GOTO   101E6
101D2:  XORLW  01
101D4:  BTFSC  FD8.2
101D6:  GOTO   101F6
101DA:  XORLW  03
101DC:  BTFSC  FD8.2
101DE:  GOTO   10206
101E2:  GOTO   10216
....................             case ENUM_SMF_WRITE:
....................                 smf_write(smf_data);
101E6:  MOVFF  22A,22C
101EA:  MOVFF  229,22B
101EE:  GOTO   E528
....................                 break;
101F2:  GOTO   10270
....................             case ENUM_SMF_READ:
....................                 smf_read(smf_data);
101F6:  MOVFF  22A,22C
101FA:  MOVFF  229,22B
101FE:  GOTO   F1B8
....................                 break;
10202:  GOTO   10270
....................             case ENUM_SMF_ERASE:
....................                 smf_erase(smf_data);
10206:  MOVFF  22A,22C
1020A:  MOVFF  229,22B
1020E:  GOTO   F8E2
....................                 break;
10212:  GOTO   10270
....................             default:
....................                 fprintf(PC, "\t\t   Unknown func_type=%u\r\n",
....................                         (unsigned int)smf_data->func_type);
10216:  MOVLW  01
10218:  MOVLB  2
1021A:  ADDWF  x29,W
1021C:  MOVWF  FE9
1021E:  MOVLW  00
10220:  ADDWFC x2A,W
10222:  MOVWF  FEA
10224:  MOVFF  FEF,22B
10228:  MOVLW  5A
1022A:  MOVWF  FF6
1022C:  MOVLW  14
1022E:  MOVWF  FF7
10230:  MOVLW  00
10232:  MOVWF  FF8
10234:  MOVLW  17
10236:  MOVLB  3
10238:  MOVWF  x16
1023A:  MOVLB  0
1023C:  CALL   1F12
10240:  MOVFF  22B,2DB
10244:  MOVLW  1B
10246:  MOVLB  2
10248:  MOVWF  xDC
1024A:  MOVLB  0
1024C:  CALL   D9F8
10250:  MOVLW  0D
10252:  BTFSS  FA6.6
10254:  GOTO   10252
10258:  MOVLB  E
1025A:  MOVWF  xF9
1025C:  MOVLW  0A
1025E:  MOVLB  0
10260:  BTFSS  FA6.6
10262:  GOTO   10260
10266:  MOVLB  E
10268:  MOVWF  xF9
....................                 break;
1026A:  MOVLB  0
1026C:  GOTO   10270
....................         }
....................         processed_count++;
10270:  MOVLB  2
10272:  INCF   x28,F
10274:  MOVLB  0
10276:  GOTO   10074
....................     }
.................... 
....................     fprintf(PC, "\t\t-> Completed %u operations\r\n",
....................             (unsigned int)processed_count);
1027A:  MOVLW  76
1027C:  MOVWF  FF6
1027E:  MOVLW  14
10280:  MOVWF  FF7
10282:  MOVLW  00
10284:  MOVWF  FF8
10286:  MOVLW  0F
10288:  MOVLB  3
1028A:  MOVWF  x16
1028C:  MOVLB  0
1028E:  CALL   1F12
10292:  MOVFF  228,2DB
10296:  MOVLW  1B
10298:  MOVLB  2
1029A:  MOVWF  xDC
1029C:  MOVLB  0
1029E:  CALL   D9F8
102A2:  MOVLW  87
102A4:  MOVWF  FF6
102A6:  MOVLW  14
102A8:  MOVWF  FF7
102AA:  MOVLW  00
102AC:  MOVWF  FF8
102AE:  MOVLW  0D
102B0:  MOVLB  3
102B2:  MOVWF  x16
102B4:  MOVLB  0
102B6:  CALL   1F12
.................... 
....................     status[0] = FINISHED;
102BA:  MOVLW  06
102BC:  MOVWF  4C
102BE:  GOTO   FFDA (RETURN)
.................... }
.................... // End of file
.................... 
.................... #include "application/mmj_cigs_mode_mission.c"
.................... #include "mmj_cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_DEBUG 0xA3
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/mmj_cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFFFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE-1];
.................... 
....................     struct {
....................         unsigned int16 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int16 time_msec;
....................         meas_data_t env_data[2];
....................         meas_data_t iv_data[16];
.................... 
....................     }header;
....................     struct {
....................         meas_data_t iv_data[21];
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/device/ad7490.h"                    // ADCライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/mmj_cigs_flash.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/mmj_cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS IV\r\n");
*
09E44:  MOVLW  96
09E46:  MOVWF  FF6
09E48:  MOVLW  14
09E4A:  MOVWF  FF7
09E4C:  MOVLW  00
09E4E:  MOVWF  FF8
09E50:  CALL   1EDC
....................    MEAS_IV_CMD cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
09E54:  MOVFF  22E,256
09E58:  MOVFF  22D,255
09E5C:  CALL   7C44
09E60:  MOVFF  02,03
09E64:  MOVF   01,W
09E66:  MOVWF  FE1
09E68:  MOVFF  03,FE2
09E6C:  MOVLW  02
09E6E:  MOVWF  FEA
09E70:  MOVLW  2F
09E72:  MOVWF  FE9
09E74:  MOVLW  0C
09E76:  MOVWF  01
09E78:  MOVFF  FE6,FEE
09E7C:  DECFSZ 01,F
09E7E:  GOTO   9E78
....................    fprintf(PC, "\tSleepTime:        %04LX\r\n", cmd.sleep_time);
09E82:  MOVLW  AC
09E84:  MOVWF  FF6
09E86:  MOVLW  14
09E88:  MOVWF  FF7
09E8A:  MOVLW  00
09E8C:  MOVWF  FF8
09E8E:  MOVLW  13
09E90:  MOVLB  3
09E92:  MOVWF  x16
09E94:  MOVLB  0
09E96:  CALL   1F12
09E9A:  MOVFF  231,A62
09E9E:  MOVLW  37
09EA0:  MOVLB  A
09EA2:  MOVWF  x63
09EA4:  MOVLB  0
09EA6:  CALL   2126
09EAA:  MOVFF  230,A62
09EAE:  MOVLW  37
09EB0:  MOVLB  A
09EB2:  MOVWF  x63
09EB4:  MOVLB  0
09EB6:  CALL   2126
09EBA:  MOVLW  0D
09EBC:  BTFSS  FA6.6
09EBE:  GOTO   9EBC
09EC2:  MOVLB  E
09EC4:  MOVWF  xF9
09EC6:  MOVLW  0A
09EC8:  MOVLB  0
09ECA:  BTFSS  FA6.6
09ECC:  GOTO   9ECA
09ED0:  MOVLB  E
09ED2:  MOVWF  xF9
....................    fprintf(PC, "\tCurrentThreshold: %04LX\r\n", cmd.curr_threshold);
09ED4:  MOVLW  C8
09ED6:  MOVWF  FF6
09ED8:  MOVLW  14
09EDA:  MOVWF  FF7
09EDC:  MOVLW  00
09EDE:  MOVWF  FF8
09EE0:  MOVLW  13
09EE2:  MOVLB  3
09EE4:  MOVWF  x16
09EE6:  MOVLB  0
09EE8:  CALL   1F12
09EEC:  MOVFF  233,A62
09EF0:  MOVLW  37
09EF2:  MOVLB  A
09EF4:  MOVWF  x63
09EF6:  MOVLB  0
09EF8:  CALL   2126
09EFC:  MOVFF  232,A62
09F00:  MOVLW  37
09F02:  MOVLB  A
09F04:  MOVWF  x63
09F06:  MOVLB  0
09F08:  CALL   2126
09F0C:  MOVLW  0D
09F0E:  BTFSS  FA6.6
09F10:  GOTO   9F0E
09F14:  MOVLB  E
09F16:  MOVWF  xF9
09F18:  MOVLW  0A
09F1A:  MOVLB  0
09F1C:  BTFSS  FA6.6
09F1E:  GOTO   9F1C
09F22:  MOVLB  E
09F24:  MOVWF  xF9
....................    fprintf(PC, "\tPDThreshold:      %04LX\r\n", cmd.pd_threshold);
09F26:  MOVLW  E4
09F28:  MOVWF  FF6
09F2A:  MOVLW  14
09F2C:  MOVWF  FF7
09F2E:  MOVLW  00
09F30:  MOVWF  FF8
09F32:  MOVLW  13
09F34:  MOVLB  3
09F36:  MOVWF  x16
09F38:  MOVLB  0
09F3A:  CALL   1F12
09F3E:  MOVFF  235,A62
09F42:  MOVLW  37
09F44:  MOVLB  A
09F46:  MOVWF  x63
09F48:  MOVLB  0
09F4A:  CALL   2126
09F4E:  MOVFF  234,A62
09F52:  MOVLW  37
09F54:  MOVLB  A
09F56:  MOVWF  x63
09F58:  MOVLB  0
09F5A:  CALL   2126
09F5E:  MOVLW  0D
09F60:  BTFSS  FA6.6
09F62:  GOTO   9F60
09F66:  MOVLB  E
09F68:  MOVWF  xF9
09F6A:  MOVLW  0A
09F6C:  MOVLB  0
09F6E:  BTFSS  FA6.6
09F70:  GOTO   9F6E
09F74:  MOVLB  E
09F76:  MOVWF  xF9
....................    fprintf(PC, "\tCurrentLimit:     %04LX\r\n", cmd.curr_limit);
09F78:  MOVLW  00
09F7A:  MOVWF  FF6
09F7C:  MOVLW  15
09F7E:  MOVWF  FF7
09F80:  MOVLW  00
09F82:  MOVWF  FF8
09F84:  MOVLW  13
09F86:  MOVLB  3
09F88:  MOVWF  x16
09F8A:  MOVLB  0
09F8C:  CALL   1F12
09F90:  MOVFF  237,A62
09F94:  MOVLW  37
09F96:  MOVLB  A
09F98:  MOVWF  x63
09F9A:  MOVLB  0
09F9C:  CALL   2126
09FA0:  MOVFF  236,A62
09FA4:  MOVLW  37
09FA6:  MOVLB  A
09FA8:  MOVWF  x63
09FAA:  MOVLB  0
09FAC:  CALL   2126
09FB0:  MOVLW  0D
09FB2:  BTFSS  FA6.6
09FB4:  GOTO   9FB2
09FB8:  MOVLB  E
09FBA:  MOVWF  xF9
09FBC:  MOVLW  0A
09FBE:  MOVLB  0
09FC0:  BTFSS  FA6.6
09FC2:  GOTO   9FC0
09FC6:  MOVLB  E
09FC8:  MOVWF  xF9
....................    fprintf(PC, "\tMeasurementTime:  %04LX\r\n", cmd.meas_time);
09FCA:  MOVLW  1C
09FCC:  MOVWF  FF6
09FCE:  MOVLW  15
09FD0:  MOVWF  FF7
09FD2:  MOVLW  00
09FD4:  MOVWF  FF8
09FD6:  MOVLW  13
09FD8:  MOVLB  3
09FDA:  MOVWF  x16
09FDC:  MOVLB  0
09FDE:  CALL   1F12
09FE2:  MOVFF  239,A62
09FE6:  MOVLW  37
09FE8:  MOVLB  A
09FEA:  MOVWF  x63
09FEC:  MOVLB  0
09FEE:  CALL   2126
09FF2:  MOVFF  238,A62
09FF6:  MOVLW  37
09FF8:  MOVLB  A
09FFA:  MOVWF  x63
09FFC:  MOVLB  0
09FFE:  CALL   2126
0A002:  MOVLW  0D
0A004:  BTFSS  FA6.6
0A006:  GOTO   A004
0A00A:  MOVLB  E
0A00C:  MOVWF  xF9
0A00E:  MOVLW  0A
0A010:  MOVLB  0
0A012:  BTFSS  FA6.6
0A014:  GOTO   A012
0A018:  MOVLB  E
0A01A:  MOVWF  xF9
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_START); // Log the start of the command execution
0A01C:  MOVFF  22F,284
0A020:  MOVLB  2
0A022:  CLRF   x85
0A024:  MOVLB  0
0A026:  CALL   4C1A
.................... 
....................    unsigned int32 start_time = get_current_sec();
....................    unsigned int32 current_sec = 0;
0A02A:  CALL   3802
0A02E:  MOVFF  03,23E
0A032:  MOVFF  02,23D
0A036:  MOVFF  01,23C
0A03A:  MOVFF  00,23B
0A03E:  MOVLB  2
0A040:  CLRF   x42
0A042:  CLRF   x41
0A044:  CLRF   x40
0A046:  CLRF   x3F
....................    
....................    sweep(cmd.curr_threshold, cmd.curr_limit, cmd.pd_threshold); // Perform the sweep with thresholds
0A048:  MOVFF  233,250
0A04C:  MOVFF  232,24F
0A050:  MOVFF  237,252
0A054:  MOVFF  236,251
0A058:  MOVFF  235,254
0A05C:  MOVFF  234,253
0A060:  MOVLB  0
0A062:  GOTO   8838
....................    delay_ms(cmd.sleep_time);
0A066:  MOVFF  231,24F
0A06A:  MOVLB  2
0A06C:  INCF   x4F,F
0A06E:  MOVLB  0
0A070:  MOVLB  2
0A072:  DECFSZ x4F,F
0A074:  BRA    A07A
0A076:  MOVLB  0
0A078:  BRA    A086
0A07A:  MOVLB  B
0A07C:  SETF   xA3
0A07E:  MOVLB  0
0A080:  CALL   1EAE
0A084:  BRA    A070
0A086:  MOVFF  230,BA3
0A08A:  CALL   1EAE
....................    /*
....................    while(get_current_sec() - start_time < cmd.meas_time)
....................    {
....................       sweep(cmd.curr_threshold, cmd.curr_limit, cmd.pd_threshold); // Perform the sweep with thresholds
....................       delay_ms(cmd.sleep_time);
....................    }
....................    */
....................    piclog_make(cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
0A08E:  MOVFF  22F,284
0A092:  MOVLB  2
0A094:  SETF   x85
0A096:  MOVLB  0
0A098:  CALL   4C1A
.................... 
.................... 
.................... 
....................    FlashOperationStruct data = {0};
0A09C:  MOVLB  2
0A09E:  CLRF   x43
0A0A0:  CLRF   x44
0A0A2:  CLRF   x45
0A0A4:  CLRF   x46
0A0A6:  CLRF   x47
0A0A8:  CLRF   x48
0A0AA:  CLRF   x49
0A0AC:  CLRF   x4A
0A0AE:  CLRF   x4B
0A0B0:  CLRF   x4C
0A0B2:  CLRF   x4D
0A0B4:  CLRF   x4E
....................    data.func_type = ENUM_SMF_WRITE;
0A0B6:  CLRF   x44
....................    data.mission_id = CIGS_IV1_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0A0B8:  MOVLW  04
0A0BA:  MOVWF  x43
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0A0BC:  MOVLW  02
0A0BE:  MOVWF  x45
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0A0C0:  BCF    x46.0
.................... 
.................... 
....................    fprintf(PC, "Enqueue Flash Operation\r\n");
0A0C2:  MOVLW  38
0A0C4:  MOVWF  FF6
0A0C6:  MOVLW  15
0A0C8:  MOVWF  FF7
0A0CA:  MOVLW  00
0A0CC:  MOVWF  FF8
0A0CE:  MOVLB  0
0A0D0:  CALL   1EDC
....................    fprintf(PC, "Mission ID:   %02X\r\n", data.mission_id);
0A0D4:  MOVLW  52
0A0D6:  MOVWF  FF6
0A0D8:  MOVLW  15
0A0DA:  MOVWF  FF7
0A0DC:  MOVLW  00
0A0DE:  MOVWF  FF8
0A0E0:  MOVLW  0E
0A0E2:  MOVLB  3
0A0E4:  MOVWF  x16
0A0E6:  MOVLB  0
0A0E8:  CALL   1F12
0A0EC:  MOVFF  243,A62
0A0F0:  MOVLW  37
0A0F2:  MOVLB  A
0A0F4:  MOVWF  x63
0A0F6:  MOVLB  0
0A0F8:  CALL   2126
0A0FC:  MOVLW  0D
0A0FE:  BTFSS  FA6.6
0A100:  GOTO   A0FE
0A104:  MOVLB  E
0A106:  MOVWF  xF9
0A108:  MOVLW  0A
0A10A:  MOVLB  0
0A10C:  BTFSS  FA6.6
0A10E:  GOTO   A10C
0A112:  MOVLB  E
0A114:  MOVWF  xF9
....................    fprintf(PC, "Function Type:%02X\r\n", data.func_type);
0A116:  MOVLW  68
0A118:  MOVWF  FF6
0A11A:  MOVLW  15
0A11C:  MOVWF  FF7
0A11E:  MOVLW  00
0A120:  MOVWF  FF8
0A122:  MOVLW  0E
0A124:  MOVLB  3
0A126:  MOVWF  x16
0A128:  MOVLB  0
0A12A:  CALL   1F12
0A12E:  MOVFF  244,A62
0A132:  MOVLW  37
0A134:  MOVLB  A
0A136:  MOVWF  x63
0A138:  MOVLB  0
0A13A:  CALL   2126
0A13E:  MOVLW  0D
0A140:  BTFSS  FA6.6
0A142:  GOTO   A140
0A146:  MOVLB  E
0A148:  MOVWF  xF9
0A14A:  MOVLW  0A
0A14C:  MOVLB  0
0A14E:  BTFSS  FA6.6
0A150:  GOTO   A14E
0A154:  MOVLB  E
0A156:  MOVWF  xF9
....................    fprintf(PC, "Write Mode:   %02X\r\n", data.write_mode);
0A158:  MOVLW  7E
0A15A:  MOVWF  FF6
0A15C:  MOVLW  15
0A15E:  MOVWF  FF7
0A160:  MOVLW  00
0A162:  MOVWF  FF8
0A164:  MOVLW  0E
0A166:  MOVLB  3
0A168:  MOVWF  x16
0A16A:  MOVLB  0
0A16C:  CALL   1F12
0A170:  MOVFF  245,A62
0A174:  MOVLW  37
0A176:  MOVLB  A
0A178:  MOVWF  x63
0A17A:  MOVLB  0
0A17C:  CALL   2126
0A180:  MOVLW  0D
0A182:  BTFSS  FA6.6
0A184:  GOTO   A182
0A188:  MOVLB  E
0A18A:  MOVWF  xF9
0A18C:  MOVLW  0A
0A18E:  MOVLB  0
0A190:  BTFSS  FA6.6
0A192:  GOTO   A190
0A196:  MOVLB  E
0A198:  MOVWF  xF9
....................    fprintf(PC, "Source Type:  %02X\r\n", data.source_type);
0A19A:  MOVLW  00
0A19C:  MOVLB  2
0A19E:  BTFSC  x46.0
0A1A0:  MOVLW  01
0A1A2:  MOVWF  x4F
0A1A4:  MOVLW  94
0A1A6:  MOVWF  FF6
0A1A8:  MOVLW  15
0A1AA:  MOVWF  FF7
0A1AC:  MOVLW  00
0A1AE:  MOVWF  FF8
0A1B0:  MOVLW  0E
0A1B2:  MOVLB  3
0A1B4:  MOVWF  x16
0A1B6:  MOVLB  0
0A1B8:  CALL   1F12
0A1BC:  MOVFF  24F,A62
0A1C0:  MOVLW  37
0A1C2:  MOVLB  A
0A1C4:  MOVWF  x63
0A1C6:  MOVLB  0
0A1C8:  CALL   2126
0A1CC:  MOVLW  0D
0A1CE:  BTFSS  FA6.6
0A1D0:  GOTO   A1CE
0A1D4:  MOVLB  E
0A1D6:  MOVWF  xF9
0A1D8:  MOVLW  0A
0A1DA:  MOVLB  0
0A1DC:  BTFSS  FA6.6
0A1DE:  GOTO   A1DC
0A1E2:  MOVLB  E
0A1E4:  MOVWF  xF9
....................    fprintf(PC, "Start Address:%04X\r\n", data.misf_start_addr);
0A1E6:  MOVLW  AA
0A1E8:  MOVWF  FF6
0A1EA:  MOVLW  15
0A1EC:  MOVWF  FF7
0A1EE:  MOVLW  00
0A1F0:  MOVWF  FF8
0A1F2:  MOVLW  0E
0A1F4:  MOVLB  3
0A1F6:  MOVWF  x16
0A1F8:  MOVLB  0
0A1FA:  CALL   1F12
0A1FE:  MOVLW  02
0A200:  MOVLB  2
0A202:  MOVWF  x4F
0A204:  MOVLB  0
0A206:  MOVLW  30
0A208:  BTFSS  FA6.6
0A20A:  GOTO   A208
0A20E:  MOVLB  E
0A210:  MOVWF  xF9
0A212:  MOVLB  2
0A214:  DECFSZ x4F,F
0A216:  BRA    A21C
0A218:  BRA    A222
0A21A:  MOVLB  0
0A21C:  MOVLB  0
0A21E:  GOTO   A206
0A222:  MOVFF  247,A62
0A226:  MOVLW  37
0A228:  MOVLB  A
0A22A:  MOVWF  x63
0A22C:  MOVLB  0
0A22E:  CALL   2126
0A232:  MOVLW  0D
0A234:  BTFSS  FA6.6
0A236:  GOTO   A234
0A23A:  MOVLB  E
0A23C:  MOVWF  xF9
0A23E:  MOVLW  0A
0A240:  MOVLB  0
0A242:  BTFSS  FA6.6
0A244:  GOTO   A242
0A248:  MOVLB  E
0A24A:  MOVWF  xF9
....................    fprintf(PC, "Size:         %04X\r\n", misf_counter_table[CIGS_IV1_DATA].uncopied_counter);
0A24C:  MOVLW  C0
0A24E:  MOVWF  FF6
0A250:  MOVLW  15
0A252:  MOVWF  FF7
0A254:  MOVLW  00
0A256:  MOVWF  FF8
0A258:  MOVLW  0E
0A25A:  MOVLB  3
0A25C:  MOVWF  x16
0A25E:  MOVLB  0
0A260:  CALL   1F12
0A264:  MOVLW  02
0A266:  MOVLB  2
0A268:  MOVWF  x4F
0A26A:  MOVLB  0
0A26C:  MOVLW  30
0A26E:  BTFSS  FA6.6
0A270:  GOTO   A26E
0A274:  MOVLB  E
0A276:  MOVWF  xF9
0A278:  MOVLB  2
0A27A:  DECFSZ x4F,F
0A27C:  BRA    A282
0A27E:  BRA    A288
0A280:  MOVLB  0
0A282:  MOVLB  0
0A284:  GOTO   A26C
0A288:  MOVFF  15A,A62
0A28C:  MOVLW  37
0A28E:  MOVLB  A
0A290:  MOVWF  x63
0A292:  MOVLB  0
0A294:  CALL   2126
0A298:  MOVLW  0D
0A29A:  BTFSS  FA6.6
0A29C:  GOTO   A29A
0A2A0:  MOVLB  E
0A2A2:  MOVWF  xF9
0A2A4:  MOVLW  0A
0A2A6:  MOVLB  0
0A2A8:  BTFSS  FA6.6
0A2AA:  GOTO   A2A8
0A2AE:  MOVLB  E
0A2B0:  MOVWF  xF9
.................... 
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0A2B2:  MOVLW  02
0A2B4:  MOVLB  2
0A2B6:  MOVWF  x50
0A2B8:  MOVLW  43
0A2BA:  MOVWF  x4F
0A2BC:  MOVLB  0
0A2BE:  GOTO   9BC8
.................... 
....................    fprintf(PC, "End MODE MEAS IV mission\r\n");
0A2C2:  MOVLW  D6
0A2C4:  MOVWF  FF6
0A2C6:  MOVLW  15
0A2C8:  MOVWF  FF7
0A2CA:  MOVLW  00
0A2CC:  MOVWF  FF8
0A2CE:  CALL   1EDC
0A2D2:  GOTO   D7F2 (RETURN)
.................... }
.................... 
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE IV DEBUG\r\n");
*
0B828:  MOVLW  F2
0B82A:  MOVWF  FF6
0B82C:  MOVLW  15
0B82E:  MOVWF  FF7
0B830:  MOVLW  00
0B832:  MOVWF  FF8
0B834:  CALL   1EDC
.................... 
....................    MEAS_IV_CMD cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0B838:  MOVFF  22E,256
0B83C:  MOVFF  22D,255
0B840:  CALL   7C44
0B844:  MOVFF  02,03
0B848:  MOVF   01,W
0B84A:  MOVWF  FE1
0B84C:  MOVFF  03,FE2
0B850:  MOVLW  02
0B852:  MOVWF  FEA
0B854:  MOVLW  2F
0B856:  MOVWF  FE9
0B858:  MOVLW  0C
0B85A:  MOVWF  01
0B85C:  MOVFF  FE6,FEE
0B860:  DECFSZ 01,F
0B862:  GOTO   B85C
.................... 
....................    fprintf(PC, "\tID: %02X\r\n", cmd.id);
0B866:  MOVLW  08
0B868:  MOVWF  FF6
0B86A:  MOVLW  16
0B86C:  MOVWF  FF7
0B86E:  MOVLW  00
0B870:  MOVWF  FF8
0B872:  MOVLW  05
0B874:  MOVLB  3
0B876:  MOVWF  x16
0B878:  MOVLB  0
0B87A:  CALL   1F12
0B87E:  MOVFF  22F,A62
0B882:  MOVLW  37
0B884:  MOVLB  A
0B886:  MOVWF  x63
0B888:  MOVLB  0
0B88A:  CALL   2126
0B88E:  MOVLW  0D
0B890:  BTFSS  FA6.6
0B892:  GOTO   B890
0B896:  MOVLB  E
0B898:  MOVWF  xF9
0B89A:  MOVLW  0A
0B89C:  MOVLB  0
0B89E:  BTFSS  FA6.6
0B8A0:  GOTO   B89E
0B8A4:  MOVLB  E
0B8A6:  MOVWF  xF9
....................    fprintf(PC, "\tSleepTime:        0x%04X\r\n", cmd.sleep_time);
0B8A8:  MOVLW  14
0B8AA:  MOVWF  FF6
0B8AC:  MOVLW  16
0B8AE:  MOVWF  FF7
0B8B0:  MOVLW  00
0B8B2:  MOVWF  FF8
0B8B4:  MOVLW  15
0B8B6:  MOVLB  3
0B8B8:  MOVWF  x16
0B8BA:  MOVLB  0
0B8BC:  CALL   1F12
0B8C0:  MOVLW  02
0B8C2:  MOVLB  2
0B8C4:  MOVWF  x43
0B8C6:  MOVLB  0
0B8C8:  MOVLW  30
0B8CA:  BTFSS  FA6.6
0B8CC:  GOTO   B8CA
0B8D0:  MOVLB  E
0B8D2:  MOVWF  xF9
0B8D4:  MOVLB  2
0B8D6:  DECFSZ x43,F
0B8D8:  BRA    B8DE
0B8DA:  BRA    B8E4
0B8DC:  MOVLB  0
0B8DE:  MOVLB  0
0B8E0:  GOTO   B8C8
0B8E4:  MOVFF  230,A62
0B8E8:  MOVLW  37
0B8EA:  MOVLB  A
0B8EC:  MOVWF  x63
0B8EE:  MOVLB  0
0B8F0:  CALL   2126
0B8F4:  MOVLW  0D
0B8F6:  BTFSS  FA6.6
0B8F8:  GOTO   B8F6
0B8FC:  MOVLB  E
0B8FE:  MOVWF  xF9
0B900:  MOVLW  0A
0B902:  MOVLB  0
0B904:  BTFSS  FA6.6
0B906:  GOTO   B904
0B90A:  MOVLB  E
0B90C:  MOVWF  xF9
....................    fprintf(PC, "\tLogCurrThreshold: 0x%04X\r\n", cmd.curr_threshold);
0B90E:  MOVLW  30
0B910:  MOVWF  FF6
0B912:  MOVLW  16
0B914:  MOVWF  FF7
0B916:  MOVLW  00
0B918:  MOVWF  FF8
0B91A:  MOVLW  15
0B91C:  MOVLB  3
0B91E:  MOVWF  x16
0B920:  MOVLB  0
0B922:  CALL   1F12
0B926:  MOVLW  02
0B928:  MOVLB  2
0B92A:  MOVWF  x43
0B92C:  MOVLB  0
0B92E:  MOVLW  30
0B930:  BTFSS  FA6.6
0B932:  GOTO   B930
0B936:  MOVLB  E
0B938:  MOVWF  xF9
0B93A:  MOVLB  2
0B93C:  DECFSZ x43,F
0B93E:  BRA    B944
0B940:  BRA    B94A
0B942:  MOVLB  0
0B944:  MOVLB  0
0B946:  GOTO   B92E
0B94A:  MOVFF  232,A62
0B94E:  MOVLW  37
0B950:  MOVLB  A
0B952:  MOVWF  x63
0B954:  MOVLB  0
0B956:  CALL   2126
0B95A:  MOVLW  0D
0B95C:  BTFSS  FA6.6
0B95E:  GOTO   B95C
0B962:  MOVLB  E
0B964:  MOVWF  xF9
0B966:  MOVLW  0A
0B968:  MOVLB  0
0B96A:  BTFSS  FA6.6
0B96C:  GOTO   B96A
0B970:  MOVLB  E
0B972:  MOVWF  xF9
....................    fprintf(PC, "\tPDThreshold:      0x%04X\r\n", cmd.pd_threshold);
0B974:  MOVLW  4C
0B976:  MOVWF  FF6
0B978:  MOVLW  16
0B97A:  MOVWF  FF7
0B97C:  MOVLW  00
0B97E:  MOVWF  FF8
0B980:  MOVLW  15
0B982:  MOVLB  3
0B984:  MOVWF  x16
0B986:  MOVLB  0
0B988:  CALL   1F12
0B98C:  MOVLW  02
0B98E:  MOVLB  2
0B990:  MOVWF  x43
0B992:  MOVLB  0
0B994:  MOVLW  30
0B996:  BTFSS  FA6.6
0B998:  GOTO   B996
0B99C:  MOVLB  E
0B99E:  MOVWF  xF9
0B9A0:  MOVLB  2
0B9A2:  DECFSZ x43,F
0B9A4:  BRA    B9AA
0B9A6:  BRA    B9B0
0B9A8:  MOVLB  0
0B9AA:  MOVLB  0
0B9AC:  GOTO   B994
0B9B0:  MOVFF  234,A62
0B9B4:  MOVLW  37
0B9B6:  MOVLB  A
0B9B8:  MOVWF  x63
0B9BA:  MOVLB  0
0B9BC:  CALL   2126
0B9C0:  MOVLW  0D
0B9C2:  BTFSS  FA6.6
0B9C4:  GOTO   B9C2
0B9C8:  MOVLB  E
0B9CA:  MOVWF  xF9
0B9CC:  MOVLW  0A
0B9CE:  MOVLB  0
0B9D0:  BTFSS  FA6.6
0B9D2:  GOTO   B9D0
0B9D6:  MOVLB  E
0B9D8:  MOVWF  xF9
....................    fprintf(PC, "\tCurrentLimit:     0x%04X\r\n", cmd.curr_limit);
0B9DA:  MOVLW  68
0B9DC:  MOVWF  FF6
0B9DE:  MOVLW  16
0B9E0:  MOVWF  FF7
0B9E2:  MOVLW  00
0B9E4:  MOVWF  FF8
0B9E6:  MOVLW  15
0B9E8:  MOVLB  3
0B9EA:  MOVWF  x16
0B9EC:  MOVLB  0
0B9EE:  CALL   1F12
0B9F2:  MOVLW  02
0B9F4:  MOVLB  2
0B9F6:  MOVWF  x43
0B9F8:  MOVLB  0
0B9FA:  MOVLW  30
0B9FC:  BTFSS  FA6.6
0B9FE:  GOTO   B9FC
0BA02:  MOVLB  E
0BA04:  MOVWF  xF9
0BA06:  MOVLB  2
0BA08:  DECFSZ x43,F
0BA0A:  BRA    BA10
0BA0C:  BRA    BA16
0BA0E:  MOVLB  0
0BA10:  MOVLB  0
0BA12:  GOTO   B9FA
0BA16:  MOVFF  236,A62
0BA1A:  MOVLW  37
0BA1C:  MOVLB  A
0BA1E:  MOVWF  x63
0BA20:  MOVLB  0
0BA22:  CALL   2126
0BA26:  MOVLW  0D
0BA28:  BTFSS  FA6.6
0BA2A:  GOTO   BA28
0BA2E:  MOVLB  E
0BA30:  MOVWF  xF9
0BA32:  MOVLW  0A
0BA34:  MOVLB  0
0BA36:  BTFSS  FA6.6
0BA38:  GOTO   BA36
0BA3C:  MOVLB  E
0BA3E:  MOVWF  xF9
....................    fprintf(PC, "\tMeasurementTime:  0x%04X\r\n", cmd.meas_time);
0BA40:  MOVLW  84
0BA42:  MOVWF  FF6
0BA44:  MOVLW  16
0BA46:  MOVWF  FF7
0BA48:  MOVLW  00
0BA4A:  MOVWF  FF8
0BA4C:  MOVLW  15
0BA4E:  MOVLB  3
0BA50:  MOVWF  x16
0BA52:  MOVLB  0
0BA54:  CALL   1F12
0BA58:  MOVLW  02
0BA5A:  MOVLB  2
0BA5C:  MOVWF  x43
0BA5E:  MOVLB  0
0BA60:  MOVLW  30
0BA62:  BTFSS  FA6.6
0BA64:  GOTO   BA62
0BA68:  MOVLB  E
0BA6A:  MOVWF  xF9
0BA6C:  MOVLB  2
0BA6E:  DECFSZ x43,F
0BA70:  BRA    BA76
0BA72:  BRA    BA7C
0BA74:  MOVLB  0
0BA76:  MOVLB  0
0BA78:  GOTO   BA60
0BA7C:  MOVFF  238,A62
0BA80:  MOVLW  37
0BA82:  MOVLB  A
0BA84:  MOVWF  x63
0BA86:  MOVLB  0
0BA88:  CALL   2126
0BA8C:  MOVLW  0D
0BA8E:  BTFSS  FA6.6
0BA90:  GOTO   BA8E
0BA94:  MOVLB  E
0BA96:  MOVWF  xF9
0BA98:  MOVLW  0A
0BA9A:  MOVLB  0
0BA9C:  BTFSS  FA6.6
0BA9E:  GOTO   BA9C
0BAA2:  MOVLB  E
0BAA4:  MOVWF  xF9
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_START); // Log start
0BAA6:  MOVFF  22F,284
0BAAA:  MOVLB  2
0BAAC:  CLRF   x85
0BAAE:  MOVLB  0
0BAB0:  CALL   4C1A
.................... 
....................    unsigned int32 start_time = get_current_time_10ms();
....................    unsigned int32 current_time = 0;
0BAB4:  CALL   A2D6
0BAB8:  MOVFF  03,23E
0BABC:  MOVFF  02,23D
0BAC0:  MOVFF  01,23C
0BAC4:  MOVFF  00,23B
0BAC8:  MOVLB  2
0BACA:  CLRF   x42
0BACC:  CLRF   x41
0BACE:  CLRF   x40
0BAD0:  CLRF   x3F
....................    test_sweep(cmd.curr_threshold, cmd.curr_limit);
0BAD2:  MOVFF  233,244
0BAD6:  MOVFF  232,243
0BADA:  MOVFF  237,246
0BADE:  MOVFF  236,245
0BAE2:  MOVLB  0
0BAE4:  GOTO   A2E8
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_END);
0BAE8:  MOVFF  22F,284
0BAEC:  MOVLB  2
0BAEE:  SETF   x85
0BAF0:  MOVLB  0
0BAF2:  CALL   4C1A
....................    fprintf(PC, "[IVDBG] End MODE IV DEBUG\r\n");
0BAF6:  MOVLW  A0
0BAF8:  MOVWF  FF6
0BAFA:  MOVLW  16
0BAFC:  MOVWF  FF7
0BAFE:  MOVLW  00
0BB00:  MOVWF  FF8
0BB02:  CALL   1EDC
0BB06:  GOTO   D802 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 *uplinkcmd[])
.................... {
....................    MEAS_IV_CMD cmd;
....................    cmd.id = uplinkcmd[0];
*
07C44:  MOVLB  2
07C46:  MOVF   x55,W
07C48:  MOVWF  FE9
07C4A:  MOVF   x56,W
07C4C:  MOVWF  FEA
07C4E:  MOVFF  FEF,257
....................    cmd.sleep_time = ((unsigned int16)uplinkcmd[1] << 8) | ((unsigned int16)uplinkcmd[2]);
07C52:  MOVLW  01
07C54:  ADDWF  x55,W
07C56:  MOVWF  FE9
07C58:  MOVLW  00
07C5A:  ADDWFC x56,W
07C5C:  MOVWF  FEA
07C5E:  MOVF   FEF,W
07C60:  CLRF   x64
07C62:  MOVWF  x63
07C64:  MOVFF  263,264
07C68:  CLRF   x63
07C6A:  MOVLW  02
07C6C:  ADDWF  x55,W
07C6E:  MOVWF  FE9
07C70:  MOVLW  00
07C72:  ADDWFC x56,W
07C74:  MOVWF  FEA
07C76:  MOVF   FEF,W
07C78:  CLRF   03
07C7A:  IORWF  x63,W
07C7C:  MOVWF  x58
07C7E:  MOVF   03,W
07C80:  IORWF  x64,W
07C82:  MOVWF  x59
....................    cmd.curr_threshold = (unsigned int16)uplinkcmd[3]<< 4;
07C84:  MOVLW  03
07C86:  ADDWF  x55,W
07C88:  MOVWF  FE9
07C8A:  MOVLW  00
07C8C:  ADDWFC x56,W
07C8E:  MOVWF  FEA
07C90:  MOVF   FEF,W
07C92:  CLRF   x64
07C94:  MOVWF  x63
07C96:  RLCF   x63,W
07C98:  MOVWF  x5A
07C9A:  RLCF   x64,W
07C9C:  MOVWF  x5B
07C9E:  RLCF   x5A,F
07CA0:  RLCF   x5B,F
07CA2:  RLCF   x5A,F
07CA4:  RLCF   x5B,F
07CA6:  RLCF   x5A,F
07CA8:  RLCF   x5B,F
07CAA:  MOVLW  F0
07CAC:  ANDWF  x5A,F
....................    cmd.pd_threshold = (unsigned int16)uplinkcmd[4]<< 4;
07CAE:  MOVLW  04
07CB0:  ADDWF  x55,W
07CB2:  MOVWF  FE9
07CB4:  MOVLW  00
07CB6:  ADDWFC x56,W
07CB8:  MOVWF  FEA
07CBA:  MOVF   FEF,W
07CBC:  CLRF   x64
07CBE:  MOVWF  x63
07CC0:  RLCF   x63,W
07CC2:  MOVWF  x5C
07CC4:  RLCF   x64,W
07CC6:  MOVWF  x5D
07CC8:  RLCF   x5C,F
07CCA:  RLCF   x5D,F
07CCC:  RLCF   x5C,F
07CCE:  RLCF   x5D,F
07CD0:  RLCF   x5C,F
07CD2:  RLCF   x5D,F
07CD4:  MOVLW  F0
07CD6:  ANDWF  x5C,F
....................    cmd.curr_limit = (unsigned int16)uplinkcmd[5]<< 4;
07CD8:  MOVLW  05
07CDA:  ADDWF  x55,W
07CDC:  MOVWF  FE9
07CDE:  MOVLW  00
07CE0:  ADDWFC x56,W
07CE2:  MOVWF  FEA
07CE4:  MOVF   FEF,W
07CE6:  CLRF   x64
07CE8:  MOVWF  x63
07CEA:  RLCF   x63,W
07CEC:  MOVWF  x5E
07CEE:  RLCF   x64,W
07CF0:  MOVWF  x5F
07CF2:  RLCF   x5E,F
07CF4:  RLCF   x5F,F
07CF6:  RLCF   x5E,F
07CF8:  RLCF   x5F,F
07CFA:  RLCF   x5E,F
07CFC:  RLCF   x5F,F
07CFE:  MOVLW  F0
07D00:  ANDWF  x5E,F
....................    cmd.meas_time = ((unsigned int16)uplinkcmd[6] << 8) | ((unsigned int16)uplinkcmd[7]);
07D02:  MOVLW  06
07D04:  ADDWF  x55,W
07D06:  MOVWF  FE9
07D08:  MOVLW  00
07D0A:  ADDWFC x56,W
07D0C:  MOVWF  FEA
07D0E:  MOVF   FEF,W
07D10:  CLRF   x64
07D12:  MOVWF  x63
07D14:  MOVFF  263,264
07D18:  CLRF   x63
07D1A:  MOVLW  07
07D1C:  ADDWF  x55,W
07D1E:  MOVWF  FE9
07D20:  MOVLW  00
07D22:  ADDWFC x56,W
07D24:  MOVWF  FEA
07D26:  MOVF   FEF,W
07D28:  CLRF   03
07D2A:  IORWF  x63,W
07D2C:  MOVWF  x60
07D2E:  MOVF   03,W
07D30:  IORWF  x64,W
07D32:  MOVWF  x61
.................... //!  cmd.is_finished = uplinkcmd[8];
....................    return cmd;
07D34:  MOVLW  57
07D36:  MOVWF  01
07D38:  MOVLW  02
07D3A:  MOVWF  02
07D3C:  MOVLB  0
07D3E:  RETURN 0
.................... }
.................... 
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr)
*
0BB0A:  MOVLB  2
0BB0C:  CLRF   x30
0BB0E:  MOVLW  64
0BB10:  MOVWF  x2F
0BB12:  SETF   x32
0BB14:  SETF   x31
0BB16:  MOVLB  0
0BB18:  CALL   A2D6
0BB1C:  MOVFF  03,236
0BB20:  MOVFF  02,235
0BB24:  MOVFF  01,234
0BB28:  MOVFF  00,233
0BB2C:  MOVLB  2
0BB2E:  MOVF   x2F,W
0BB30:  SUBWF  x33,W
0BB32:  MOVWF  x37
0BB34:  MOVF   x30,W
0BB36:  SUBWFB x34,W
0BB38:  MOVWF  x38
0BB3A:  MOVLW  00
0BB3C:  SUBWFB x35,W
0BB3E:  MOVWF  x39
0BB40:  MOVLW  00
0BB42:  SUBWFB x36,W
0BB44:  MOVWF  x3A
.................... {
....................    unsigned int16 interval = 100;   // 測定間隔 [秒]
....................    unsigned int16 end_time = 0xFFFF;
.................... 
....................    unsigned int32 current_time = get_current_time_10ms();
....................    unsigned int32 last_time = current_time - interval;  // 最初にすぐ測定するため
.................... 
....................    // loging data
....................    unsigned int8 logdata[6];
....................    unsigned int16 temp_top;
....................    unsigned int16 temp_bot;
....................    unsigned int16 temp_mis7;
....................    unsigned int16 PD;
.................... 
....................    // Flash Write 
....................    unsigned int32 write_address;
.................... 
....................    fprintf(PC, "temp_top, temp_bot, temp_mis7, pd\r\n");
0BB46:  MOVLW  BC
0BB48:  MOVWF  FF6
0BB4A:  MOVLW  16
0BB4C:  MOVWF  FF7
0BB4E:  MOVLW  00
0BB50:  MOVWF  FF8
0BB52:  MOVLB  0
0BB54:  CALL   1EDC
.................... 
....................    while (true) {
....................        current_time = get_current_time_10ms();
0BB58:  CALL   A2D6
0BB5C:  MOVFF  03,236
0BB60:  MOVFF  02,235
0BB64:  MOVFF  01,234
0BB68:  MOVFF  00,233
.................... 
....................        // intervalごとに測定
....................        if ((current_time - last_time) >= interval) {
0BB6C:  MOVLB  2
0BB6E:  MOVF   x37,W
0BB70:  SUBWF  x33,W
0BB72:  MOVWF  x51
0BB74:  MOVF   x38,W
0BB76:  SUBWFB x34,W
0BB78:  MOVWF  x52
0BB7A:  MOVF   x39,W
0BB7C:  SUBWFB x35,W
0BB7E:  MOVWF  x53
0BB80:  MOVF   x3A,W
0BB82:  SUBWFB x36,W
0BB84:  MOVWF  x54
0BB86:  MOVF   x54,F
0BB88:  BTFSC  FD8.2
0BB8A:  BRA    BB92
0BB8C:  MOVLB  0
0BB8E:  GOTO   BBCE
0BB92:  MOVLB  0
0BB94:  MOVLB  2
0BB96:  MOVF   x53,F
0BB98:  BTFSC  FD8.2
0BB9A:  BRA    BBA2
0BB9C:  MOVLB  0
0BB9E:  GOTO   BBCE
0BBA2:  MOVLB  0
0BBA4:  MOVLB  2
0BBA6:  MOVF   x30,W
0BBA8:  SUBWF  x52,W
0BBAA:  BTFSC  FD8.0
0BBAC:  BRA    BBB4
0BBAE:  MOVLB  0
0BBB0:  GOTO   BFDE
0BBB4:  MOVLB  0
0BBB6:  BTFSS  FD8.2
0BBB8:  GOTO   BBCE
0BBBC:  MOVLB  2
0BBBE:  MOVF   x2F,W
0BBC0:  SUBWF  x51,W
0BBC2:  BTFSC  FD8.0
0BBC4:  BRA    BBCC
0BBC6:  MOVLB  0
0BBC8:  GOTO   BFDE
0BBCC:  MOVLB  0
....................            last_time = current_time;
0BBCE:  MOVFF  236,23A
0BBD2:  MOVFF  235,239
0BBD6:  MOVFF  234,238
0BBDA:  MOVFF  233,237
.................... 
....................            // ★ 次の測定データ(6バイト)で64バイト境界を超えるか確認
....................            if (environment_data_ptr->reserve_counter1 + 6 > PACKET_SIZE) {
0BBDE:  MOVLW  09
0BBE0:  MOVLB  1
0BBE2:  ADDWF  x24,W
0BBE4:  MOVWF  FE9
0BBE6:  MOVLW  00
0BBE8:  ADDWFC x25,W
0BBEA:  MOVWF  FEA
0BBEC:  MOVLW  06
0BBEE:  ADDWF  FEF,W
0BBF0:  SUBLW  40
0BBF2:  BTFSS  FD8.0
0BBF4:  BRA    BBFC
0BBF6:  MOVLB  0
0BBF8:  GOTO   BD12
0BBFC:  MOVLB  0
....................                unsigned int8 bankdata[4] = {0};
0BBFE:  MOVLB  2
0BC00:  CLRF   x4D
0BC02:  CLRF   x4E
0BC04:  CLRF   x4F
0BC06:  CLRF   x50
0BC08:  MOVLB  0
....................                write_address = MISF_CIGS_ENVIRO_START + environment_data_ptr->used_counter;
0BC0A:  MOVLW  01
0BC0C:  MOVLB  1
0BC0E:  ADDWF  x24,W
0BC10:  MOVWF  FE9
0BC12:  MOVLW  00
0BC14:  ADDWFC x25,W
0BC16:  MOVWF  FEA
0BC18:  MOVFF  FEF,00
0BC1C:  MOVFF  FEC,01
0BC20:  MOVFF  FEC,02
0BC24:  MOVFF  FEC,03
0BC28:  MOVF   FED,F
0BC2A:  MOVF   FED,F
0BC2C:  MOVF   FED,F
0BC2E:  MOVF   00,W
0BC30:  MOVLB  2
0BC32:  MOVWF  x49
0BC34:  MOVLW  10
0BC36:  ADDWF  01,W
0BC38:  MOVWF  x4A
0BC3A:  MOVLW  28
0BC3C:  ADDWFC 02,W
0BC3E:  MOVWF  x4B
0BC40:  MOVLW  00
0BC42:  ADDWFC 03,W
0BC44:  MOVWF  x4C
....................                write_data_bytes(mis_fm, write_address, bankdata, 4);
0BC46:  MOVFF  115,B8E
0BC4A:  MOVFF  114,B8D
0BC4E:  MOVFF  113,B8C
0BC52:  MOVFF  112,B8B
0BC56:  MOVFF  24C,B92
0BC5A:  MOVFF  24B,B91
0BC5E:  MOVFF  24A,B90
0BC62:  MOVFF  249,B8F
0BC66:  MOVLW  02
0BC68:  MOVLB  B
0BC6A:  MOVWF  x94
0BC6C:  MOVLW  4D
0BC6E:  MOVWF  x93
0BC70:  CLRF   x96
0BC72:  MOVLW  04
0BC74:  MOVWF  x95
0BC76:  MOVLB  0
0BC78:  CALL   3B1A
....................                environment_data_ptr->used_counter   += 4;
0BC7C:  MOVLW  01
0BC7E:  MOVLB  1
0BC80:  ADDWF  x24,W
0BC82:  MOVWF  FE9
0BC84:  MOVLW  00
0BC86:  ADDWFC x25,W
0BC88:  MOVWF  FEA
0BC8A:  MOVLW  04
0BC8C:  ADDWF  FEF,W
0BC8E:  MOVWF  00
0BC90:  MOVLW  00
0BC92:  ADDWFC FEC,W
0BC94:  MOVWF  01
0BC96:  MOVLW  00
0BC98:  ADDWFC FEC,W
0BC9A:  MOVWF  02
0BC9C:  MOVLW  00
0BC9E:  ADDWFC FEC,W
0BCA0:  MOVWF  03
0BCA2:  MOVF   FED,F
0BCA4:  MOVF   FED,F
0BCA6:  MOVF   FED,F
0BCA8:  MOVFF  00,FEF
0BCAC:  MOVFF  01,FEC
0BCB0:  MOVFF  02,FEC
0BCB4:  MOVFF  03,FEC
0BCB8:  MOVF   FED,F
0BCBA:  MOVF   FED,F
0BCBC:  MOVF   FED,F
....................                environment_data_ptr->uncopied_counter += 4;
0BCBE:  MOVLW  05
0BCC0:  ADDWF  x24,W
0BCC2:  MOVWF  FE9
0BCC4:  MOVLW  00
0BCC6:  ADDWFC x25,W
0BCC8:  MOVWF  FEA
0BCCA:  MOVLW  04
0BCCC:  ADDWF  FEF,W
0BCCE:  MOVWF  00
0BCD0:  MOVLW  00
0BCD2:  ADDWFC FEC,W
0BCD4:  MOVWF  01
0BCD6:  MOVLW  00
0BCD8:  ADDWFC FEC,W
0BCDA:  MOVWF  02
0BCDC:  MOVLW  00
0BCDE:  ADDWFC FEC,W
0BCE0:  MOVWF  03
0BCE2:  MOVF   FED,F
0BCE4:  MOVF   FED,F
0BCE6:  MOVF   FED,F
0BCE8:  MOVFF  00,FEF
0BCEC:  MOVFF  01,FEC
0BCF0:  MOVFF  02,FEC
0BCF4:  MOVFF  03,FEC
0BCF8:  MOVF   FED,F
0BCFA:  MOVF   FED,F
0BCFC:  MOVF   FED,F
....................                environment_data_ptr->reserve_counter1 = 0;
0BCFE:  MOVLW  09
0BD00:  ADDWF  x24,W
0BD02:  MOVWF  FE9
0BD04:  MOVLW  00
0BD06:  ADDWFC x25,W
0BD08:  MOVWF  FEA
0BD0A:  CLRF   FEF
....................                misf_update_address_area();
0BD0C:  MOVLB  0
0BD0E:  CALL   4356
....................            }
.................... 
....................            // 環境データ読み取り
....................            temp_top  = ad7490_read(ADC_TEMP_PY_TOP);
0BD12:  MOVLW  0D
0BD14:  MOVLB  A
0BD16:  MOVWF  x75
0BD18:  MOVLB  0
0BD1A:  CALL   209A
0BD1E:  MOVFF  02,242
0BD22:  MOVFF  01,241
....................            temp_bot  = ad7490_read(ADC_TEMP_PY_BOT);
0BD26:  MOVLW  0E
0BD28:  MOVLB  A
0BD2A:  MOVWF  x75
0BD2C:  MOVLB  0
0BD2E:  CALL   209A
0BD32:  MOVFF  02,244
0BD36:  MOVFF  01,243
....................            temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
0BD3A:  MOVLW  0C
0BD3C:  MOVLB  A
0BD3E:  MOVWF  x75
0BD40:  MOVLB  0
0BD42:  CALL   209A
0BD46:  MOVFF  02,246
0BD4A:  MOVFF  01,245
....................            PD        = ad7490_read(ADC_PD);
0BD4E:  MOVLW  0F
0BD50:  MOVLB  A
0BD52:  MOVWF  x75
0BD54:  MOVLB  0
0BD56:  CALL   209A
0BD5A:  MOVFF  02,248
0BD5E:  MOVFF  01,247
.................... 
....................            logdata[0] = (temp_top >> 4) & 0xFF;
0BD62:  MOVLB  2
0BD64:  RRCF   x42,W
0BD66:  MOVWF  x52
0BD68:  RRCF   x41,W
0BD6A:  MOVWF  x51
0BD6C:  RRCF   x52,F
0BD6E:  RRCF   x51,F
0BD70:  RRCF   x52,F
0BD72:  RRCF   x51,F
0BD74:  RRCF   x52,F
0BD76:  RRCF   x51,F
0BD78:  MOVLW  0F
0BD7A:  ANDWF  x52,F
0BD7C:  MOVF   x51,W
0BD7E:  MOVWF  x3B
....................            logdata[1] = ((temp_top & 0x0F) << 4) | ((temp_bot >> 8) & 0x0F);
0BD80:  MOVF   x41,W
0BD82:  ANDLW  0F
0BD84:  MOVWF  x51
0BD86:  CLRF   x52
0BD88:  RLCF   x51,F
0BD8A:  RLCF   x52,F
0BD8C:  RLCF   x51,F
0BD8E:  RLCF   x52,F
0BD90:  RLCF   x51,F
0BD92:  RLCF   x52,F
0BD94:  RLCF   x51,F
0BD96:  RLCF   x52,F
0BD98:  MOVLW  F0
0BD9A:  ANDWF  x51,F
0BD9C:  MOVFF  244,253
0BDA0:  CLRF   x54
0BDA2:  MOVF   x53,W
0BDA4:  ANDLW  0F
0BDA6:  MOVWF  00
0BDA8:  CLRF   03
0BDAA:  MOVF   00,W
0BDAC:  IORWF  x51,W
0BDAE:  MOVWF  x3C
....................            logdata[2] = temp_bot & 0xFF;
0BDB0:  MOVF   x43,W
0BDB2:  MOVWF  x3D
....................            logdata[3] = (temp_mis7 >> 4) & 0xFF;
0BDB4:  RRCF   x46,W
0BDB6:  MOVWF  x52
0BDB8:  RRCF   x45,W
0BDBA:  MOVWF  x51
0BDBC:  RRCF   x52,F
0BDBE:  RRCF   x51,F
0BDC0:  RRCF   x52,F
0BDC2:  RRCF   x51,F
0BDC4:  RRCF   x52,F
0BDC6:  RRCF   x51,F
0BDC8:  MOVLW  0F
0BDCA:  ANDWF  x52,F
0BDCC:  MOVF   x51,W
0BDCE:  MOVWF  x3E
....................            logdata[4] = temp_mis7 & 0xFF;
0BDD0:  MOVF   x45,W
0BDD2:  MOVWF  x3F
....................            logdata[5] = PD & 0xFF;
0BDD4:  MOVF   x47,W
0BDD6:  MOVWF  x40
.................... 
....................            // 書き込み
....................            write_address = MISF_CIGS_ENVIRO_START + environment_data_ptr->used_counter;
0BDD8:  MOVLW  01
0BDDA:  MOVLB  1
0BDDC:  ADDWF  x24,W
0BDDE:  MOVWF  FE9
0BDE0:  MOVLW  00
0BDE2:  ADDWFC x25,W
0BDE4:  MOVWF  FEA
0BDE6:  MOVFF  FEF,00
0BDEA:  MOVFF  FEC,01
0BDEE:  MOVFF  FEC,02
0BDF2:  MOVFF  FEC,03
0BDF6:  MOVF   FED,F
0BDF8:  MOVF   FED,F
0BDFA:  MOVF   FED,F
0BDFC:  MOVF   00,W
0BDFE:  MOVLB  2
0BE00:  MOVWF  x49
0BE02:  MOVLW  10
0BE04:  ADDWF  01,W
0BE06:  MOVWF  x4A
0BE08:  MOVLW  28
0BE0A:  ADDWFC 02,W
0BE0C:  MOVWF  x4B
0BE0E:  MOVLW  00
0BE10:  ADDWFC 03,W
0BE12:  MOVWF  x4C
....................            write_data_bytes(mis_fm, write_address, logdata, 6);
0BE14:  MOVFF  115,B8E
0BE18:  MOVFF  114,B8D
0BE1C:  MOVFF  113,B8C
0BE20:  MOVFF  112,B8B
0BE24:  MOVFF  24C,B92
0BE28:  MOVFF  24B,B91
0BE2C:  MOVFF  24A,B90
0BE30:  MOVFF  249,B8F
0BE34:  MOVLW  02
0BE36:  MOVLB  B
0BE38:  MOVWF  x94
0BE3A:  MOVLW  3B
0BE3C:  MOVWF  x93
0BE3E:  CLRF   x96
0BE40:  MOVLW  06
0BE42:  MOVWF  x95
0BE44:  MOVLB  0
0BE46:  CALL   3B1A
....................            environment_data_ptr->used_counter   += 6;
0BE4A:  MOVLW  01
0BE4C:  MOVLB  1
0BE4E:  ADDWF  x24,W
0BE50:  MOVWF  FE9
0BE52:  MOVLW  00
0BE54:  ADDWFC x25,W
0BE56:  MOVWF  FEA
0BE58:  MOVLW  06
0BE5A:  ADDWF  FEF,W
0BE5C:  MOVWF  00
0BE5E:  MOVLW  00
0BE60:  ADDWFC FEC,W
0BE62:  MOVWF  01
0BE64:  MOVLW  00
0BE66:  ADDWFC FEC,W
0BE68:  MOVWF  02
0BE6A:  MOVLW  00
0BE6C:  ADDWFC FEC,W
0BE6E:  MOVWF  03
0BE70:  MOVF   FED,F
0BE72:  MOVF   FED,F
0BE74:  MOVF   FED,F
0BE76:  MOVFF  00,FEF
0BE7A:  MOVFF  01,FEC
0BE7E:  MOVFF  02,FEC
0BE82:  MOVFF  03,FEC
0BE86:  MOVF   FED,F
0BE88:  MOVF   FED,F
0BE8A:  MOVF   FED,F
....................            environment_data_ptr->uncopied_counter += 6;
0BE8C:  MOVLW  05
0BE8E:  ADDWF  x24,W
0BE90:  MOVWF  FE9
0BE92:  MOVLW  00
0BE94:  ADDWFC x25,W
0BE96:  MOVWF  FEA
0BE98:  MOVLW  06
0BE9A:  ADDWF  FEF,W
0BE9C:  MOVWF  00
0BE9E:  MOVLW  00
0BEA0:  ADDWFC FEC,W
0BEA2:  MOVWF  01
0BEA4:  MOVLW  00
0BEA6:  ADDWFC FEC,W
0BEA8:  MOVWF  02
0BEAA:  MOVLW  00
0BEAC:  ADDWFC FEC,W
0BEAE:  MOVWF  03
0BEB0:  MOVF   FED,F
0BEB2:  MOVF   FED,F
0BEB4:  MOVF   FED,F
0BEB6:  MOVFF  00,FEF
0BEBA:  MOVFF  01,FEC
0BEBE:  MOVFF  02,FEC
0BEC2:  MOVFF  03,FEC
0BEC6:  MOVF   FED,F
0BEC8:  MOVF   FED,F
0BECA:  MOVF   FED,F
....................            environment_data_ptr->reserve_counter1 += 6;
0BECC:  MOVLW  09
0BECE:  ADDWF  x24,W
0BED0:  MOVWF  FE9
0BED2:  MOVLW  00
0BED4:  ADDWFC x25,W
0BED6:  MOVWF  FEA
0BED8:  MOVLW  06
0BEDA:  ADDWF  FEF,W
0BEDC:  MOVWF  FEF
....................            fprintf(PC, "0x%04LX, 0x%04LX, 0x%04LX, 0x%04LX\r\n", temp_top, temp_bot, temp_mis7, PD);
0BEDE:  MOVLW  30
0BEE0:  MOVLB  0
0BEE2:  BTFSS  FA6.6
0BEE4:  GOTO   BEE2
0BEE8:  MOVLB  E
0BEEA:  MOVWF  xF9
0BEEC:  MOVLW  78
0BEEE:  MOVLB  0
0BEF0:  BTFSS  FA6.6
0BEF2:  GOTO   BEF0
0BEF6:  MOVLB  E
0BEF8:  MOVWF  xF9
0BEFA:  MOVFF  242,A62
0BEFE:  MOVLW  37
0BF00:  MOVLB  A
0BF02:  MOVWF  x63
0BF04:  MOVLB  0
0BF06:  CALL   2126
0BF0A:  MOVFF  241,A62
0BF0E:  MOVLW  37
0BF10:  MOVLB  A
0BF12:  MOVWF  x63
0BF14:  MOVLB  0
0BF16:  CALL   2126
0BF1A:  MOVLW  E7
0BF1C:  MOVWF  FF6
0BF1E:  MOVLW  16
0BF20:  MOVWF  FF7
0BF22:  MOVLW  00
0BF24:  MOVWF  FF8
0BF26:  MOVLW  04
0BF28:  MOVLB  3
0BF2A:  MOVWF  x16
0BF2C:  MOVLB  0
0BF2E:  CALL   1F12
0BF32:  MOVFF  244,A62
0BF36:  MOVLW  37
0BF38:  MOVLB  A
0BF3A:  MOVWF  x63
0BF3C:  MOVLB  0
0BF3E:  CALL   2126
0BF42:  MOVFF  243,A62
0BF46:  MOVLW  37
0BF48:  MOVLB  A
0BF4A:  MOVWF  x63
0BF4C:  MOVLB  0
0BF4E:  CALL   2126
0BF52:  MOVLW  F0
0BF54:  MOVWF  FF6
0BF56:  MOVLW  16
0BF58:  MOVWF  FF7
0BF5A:  MOVLW  00
0BF5C:  MOVWF  FF8
0BF5E:  MOVLW  04
0BF60:  MOVLB  3
0BF62:  MOVWF  x16
0BF64:  MOVLB  0
0BF66:  CALL   1F12
0BF6A:  MOVFF  246,A62
0BF6E:  MOVLW  37
0BF70:  MOVLB  A
0BF72:  MOVWF  x63
0BF74:  MOVLB  0
0BF76:  CALL   2126
0BF7A:  MOVFF  245,A62
0BF7E:  MOVLW  37
0BF80:  MOVLB  A
0BF82:  MOVWF  x63
0BF84:  MOVLB  0
0BF86:  CALL   2126
0BF8A:  MOVLW  F9
0BF8C:  MOVWF  FF6
0BF8E:  MOVLW  16
0BF90:  MOVWF  FF7
0BF92:  MOVLW  00
0BF94:  MOVWF  FF8
0BF96:  MOVLW  04
0BF98:  MOVLB  3
0BF9A:  MOVWF  x16
0BF9C:  MOVLB  0
0BF9E:  CALL   1F12
0BFA2:  MOVFF  248,A62
0BFA6:  MOVLW  37
0BFA8:  MOVLB  A
0BFAA:  MOVWF  x63
0BFAC:  MOVLB  0
0BFAE:  CALL   2126
0BFB2:  MOVFF  247,A62
0BFB6:  MOVLW  37
0BFB8:  MOVLB  A
0BFBA:  MOVWF  x63
0BFBC:  MOVLB  0
0BFBE:  CALL   2126
0BFC2:  MOVLW  0D
0BFC4:  BTFSS  FA6.6
0BFC6:  GOTO   BFC4
0BFCA:  MOVLB  E
0BFCC:  MOVWF  xF9
0BFCE:  MOVLW  0A
0BFD0:  MOVLB  0
0BFD2:  BTFSS  FA6.6
0BFD4:  GOTO   BFD2
0BFD8:  MOVLB  E
0BFDA:  MOVWF  xF9
0BFDC:  MOVLB  0
....................        }
.................... 
....................        delay_ms(1);  // 過負荷防止用
0BFDE:  MOVLW  01
0BFE0:  MOVLB  B
0BFE2:  MOVWF  xA3
0BFE4:  MOVLB  0
0BFE6:  CALL   1EAE
0BFEA:  GOTO   BB58
....................    }
0BFEE:  GOTO   D812 (RETURN)
.................... }
.................... 
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS ENV DEBUG\r\n");
0BFF2:  MOVLW  06
0BFF4:  MOVWF  FF6
0BFF6:  MOVLW  17
0BFF8:  MOVWF  FF7
0BFFA:  MOVLW  00
0BFFC:  MOVWF  FF8
0BFFE:  CALL   1EDC
....................    // Add debug-specific implementation here
....................    fprintf(PC, "End MODE MEAS ENV DEBUG\r\n");
0C002:  MOVLW  22
0C004:  MOVWF  FF6
0C006:  MOVLW  17
0C008:  MOVWF  FF7
0C00A:  MOVLW  00
0C00C:  MOVWF  FF8
0C00E:  CALL   1EDC
0C012:  GOTO   D822 (RETURN)
.................... }
.................... 
.................... #include "application/mmj_cigs_mode_flash.c"
.................... #include "mmj_cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/mmj_cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFFFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE-1];
.................... 
....................     struct {
....................         unsigned int16 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int16 time_msec;
....................         meas_data_t env_data[2];
....................         meas_data_t iv_data[16];
.................... 
....................     }header;
....................     struct {
....................         meas_data_t iv_data[21];
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../domain/mmj_cigs_flash.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/mmj_cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... 
.................... // ========================== MISF Command ============================
.................... void mode_misf_erase_all(int8 parameter[])
.................... {
....................    printf("Start Flash Erase All\r\n");
*
05440:  MOVLW  3C
05442:  MOVWF  FF6
05444:  MOVLW  17
05446:  MOVWF  FF7
05448:  MOVLW  00
0544A:  MOVWF  FF8
0544C:  CALL   1EDC
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
05450:  MOVLB  2
05452:  MOVF   x2F,W
05454:  MOVWF  FE9
05456:  MOVF   x30,W
05458:  MOVWF  FEA
0545A:  MOVFF  FEF,231
....................    piclog_make(cmd, 0x00); // Log the command execution
0545E:  MOVFF  231,284
05462:  CLRF   x85
05464:  MOVLB  0
05466:  CALL   4C1A
....................    
....................    for (int32 address = MISF_START; address < MISF_END; address += SECTOR_64K_BYTE) {
0546A:  MOVLB  2
0546C:  CLRF   x35
0546E:  CLRF   x34
05470:  CLRF   x33
05472:  CLRF   x32
05474:  MOVLB  0
05476:  MOVLB  2
05478:  MOVF   x35,F
0547A:  BTFSC  FD8.2
0547C:  BRA    5484
0547E:  MOVLB  0
05480:  GOTO   54FC
05484:  MOVLB  0
05486:  MOVLB  2
05488:  MOVF   x34,W
0548A:  SUBLW  BC
0548C:  BTFSC  FD8.0
0548E:  BRA    5496
05490:  MOVLB  0
05492:  GOTO   54FC
05496:  MOVLB  0
05498:  BTFSS  FD8.2
0549A:  GOTO   54C8
0549E:  MOVLB  2
054A0:  MOVF   x33,W
054A2:  SUBLW  0F
054A4:  BTFSC  FD8.0
054A6:  BRA    54AE
054A8:  MOVLB  0
054AA:  GOTO   54FC
054AE:  MOVLB  0
054B0:  BTFSS  FD8.2
054B2:  GOTO   54C8
054B6:  MOVLB  2
054B8:  MOVF   x32,W
054BA:  SUBLW  FE
054BC:  BTFSC  FD8.0
054BE:  BRA    54C6
054C0:  MOVLB  0
054C2:  GOTO   54FC
054C6:  MOVLB  0
....................       sector_erase(mis_fm, address); // Erase each sector
054C8:  MOVFF  115,B8C
054CC:  MOVFF  114,B8B
054D0:  MOVFF  113,B8A
054D4:  MOVFF  112,B89
054D8:  MOVFF  235,B90
054DC:  MOVFF  234,B8F
054E0:  MOVFF  233,B8E
054E4:  MOVFF  232,B8D
054E8:  CALL   3FFE
054EC:  MOVLW  01
054EE:  MOVLB  2
054F0:  ADDWF  x34,F
054F2:  MOVLW  00
054F4:  ADDWFC x35,F
054F6:  MOVLB  0
054F8:  GOTO   5476
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
054FC:  MOVFF  231,284
05500:  MOVLB  2
05502:  SETF   x85
05504:  MOVLB  0
05506:  CALL   4C1A
....................    printf("End Flash Erase All\r\n");
0550A:  MOVLW  54
0550C:  MOVWF  FF6
0550E:  MOVLW  17
05510:  MOVWF  FF7
05512:  MOVLW  00
05514:  MOVWF  FF8
05516:  CALL   1EDC
0551A:  RETURN 0
.................... }
.................... 
.................... void mode_misf_erase_1sector(int8 parameter[])
.................... {
....................    printf("Start Flash Erase 1 Sector\r\n");
0551C:  MOVLW  6A
0551E:  MOVWF  FF6
05520:  MOVLW  17
05522:  MOVWF  FF7
05524:  MOVLW  00
05526:  MOVWF  FF8
05528:  CALL   1EDC
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    int32 sector_address = 
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
0552C:  MOVLB  2
0552E:  MOVF   x2D,W
05530:  MOVWF  FE9
05532:  MOVF   x2E,W
05534:  MOVWF  FEA
05536:  MOVFF  FEF,22F
0553A:  MOVLW  01
0553C:  ADDWF  x2D,W
0553E:  MOVWF  FE9
05540:  MOVLW  00
05542:  ADDWFC x2E,W
05544:  MOVWF  FEA
05546:  MOVF   FEF,W
05548:  CLRF   x37
0554A:  CLRF   x36
0554C:  CLRF   x35
0554E:  MOVWF  x34
05550:  MOVFF  234,237
05554:  CLRF   x34
05556:  CLRF   x35
05558:  CLRF   x36
0555A:  MOVLW  02
0555C:  ADDWF  x2D,W
0555E:  MOVWF  FE9
05560:  MOVLW  00
05562:  ADDWFC x2E,W
05564:  MOVWF  FEA
05566:  MOVF   FEF,W
05568:  CLRF   x3C
0556A:  CLRF   x3B
0556C:  CLRF   x3A
0556E:  MOVWF  x39
05570:  MOVFF  23A,03
05574:  MOVFF  239,02
05578:  CLRF   00
0557A:  CLRF   01
0557C:  MOVF   00,W
0557E:  IORWF  x34,F
05580:  MOVF   01,W
05582:  IORWF  x35,F
05584:  MOVF   02,W
05586:  IORWF  x36,F
05588:  MOVF   03,W
0558A:  IORWF  x37,F
0558C:  MOVLW  03
0558E:  ADDWF  x2D,W
05590:  MOVWF  FE9
05592:  MOVLW  00
05594:  ADDWFC x2E,W
05596:  MOVWF  FEA
05598:  MOVF   FEF,W
0559A:  CLRF   x3C
0559C:  CLRF   x3B
0559E:  CLRF   x3A
055A0:  MOVWF  x39
055A2:  MOVFF  23B,03
055A6:  MOVFF  23A,02
055AA:  MOVFF  239,01
055AE:  CLRF   00
055B0:  MOVF   00,W
055B2:  IORWF  x34,F
055B4:  MOVF   01,W
055B6:  IORWF  x35,F
055B8:  MOVF   02,W
055BA:  IORWF  x36,F
055BC:  MOVF   03,W
055BE:  IORWF  x37,F
055C0:  MOVLW  04
055C2:  ADDWF  x2D,W
055C4:  MOVWF  FE9
055C6:  MOVLW  00
055C8:  ADDWFC x2E,W
055CA:  MOVWF  FEA
055CC:  MOVF   FEF,W
055CE:  MOVWF  00
055D0:  CLRF   01
055D2:  CLRF   02
055D4:  CLRF   03
055D6:  MOVF   00,W
055D8:  IORWF  x34,W
055DA:  MOVWF  x30
055DC:  MOVF   01,W
055DE:  IORWF  x35,W
055E0:  MOVWF  x31
055E2:  MOVF   02,W
055E4:  IORWF  x36,W
055E6:  MOVWF  x32
055E8:  MOVF   03,W
055EA:  IORWF  x37,W
055EC:  MOVWF  x33
.................... 
....................    printf("\tSector Address: 0x%08LX\r\n", sector_address);
055EE:  MOVLW  88
055F0:  MOVWF  FF6
055F2:  MOVLW  17
055F4:  MOVWF  FF7
055F6:  MOVLW  00
055F8:  MOVWF  FF8
055FA:  MOVLW  13
055FC:  MOVLB  3
055FE:  MOVWF  x16
05600:  MOVLB  0
05602:  CALL   1F12
05606:  MOVFF  233,A62
0560A:  MOVLW  37
0560C:  MOVLB  A
0560E:  MOVWF  x63
05610:  MOVLB  0
05612:  CALL   2126
05616:  MOVFF  232,A62
0561A:  MOVLW  37
0561C:  MOVLB  A
0561E:  MOVWF  x63
05620:  MOVLB  0
05622:  CALL   2126
05626:  MOVFF  231,A62
0562A:  MOVLW  37
0562C:  MOVLB  A
0562E:  MOVWF  x63
05630:  MOVLB  0
05632:  CALL   2126
05636:  MOVFF  230,A62
0563A:  MOVLW  37
0563C:  MOVLB  A
0563E:  MOVWF  x63
05640:  MOVLB  0
05642:  CALL   2126
05646:  MOVLW  0D
05648:  BTFSS  FA6.6
0564A:  GOTO   5648
0564E:  MOVLB  E
05650:  MOVWF  xF9
05652:  MOVLW  0A
05654:  MOVLB  0
05656:  BTFSS  FA6.6
05658:  GOTO   5656
0565C:  MOVLB  E
0565E:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05660:  MOVFF  22F,284
05664:  MOVLB  2
05666:  CLRF   x85
05668:  MOVLB  0
0566A:  CALL   4C1A
....................    
....................    sector_erase(mis_fm, sector_address);
0566E:  MOVFF  115,B8C
05672:  MOVFF  114,B8B
05676:  MOVFF  113,B8A
0567A:  MOVFF  112,B89
0567E:  MOVFF  233,B90
05682:  MOVFF  232,B8F
05686:  MOVFF  231,B8E
0568A:  MOVFF  230,B8D
0568E:  CALL   3FFE
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05692:  MOVFF  22F,284
05696:  MOVLB  2
05698:  SETF   x85
0569A:  MOVLB  0
0569C:  CALL   4C1A
....................    printf("End Flash Erase 1 Sector\r\n");
056A0:  MOVLW  A4
056A2:  MOVWF  FF6
056A4:  MOVLW  17
056A6:  MOVWF  FF7
056A8:  MOVLW  00
056AA:  MOVWF  FF8
056AC:  CALL   1EDC
056B0:  GOTO   D70A (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_4kbyte_subsector(int8 parameter[])
.................... {
....................    printf("Start Flash Erase 4kByte Subsector\r\n");
*
05A10:  MOVLW  C0
05A12:  MOVWF  FF6
05A14:  MOVLW  17
05A16:  MOVWF  FF7
05A18:  MOVLW  00
05A1A:  MOVWF  FF8
05A1C:  CALL   1EDC
....................    int8 cmd = parameter[0];
....................    int32 subsector_address =
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
05A20:  MOVLB  2
05A22:  MOVF   x2D,W
05A24:  MOVWF  FE9
05A26:  MOVF   x2E,W
05A28:  MOVWF  FEA
05A2A:  MOVFF  FEF,22F
05A2E:  MOVLW  01
05A30:  ADDWF  x2D,W
05A32:  MOVWF  FE9
05A34:  MOVLW  00
05A36:  ADDWFC x2E,W
05A38:  MOVWF  FEA
05A3A:  MOVF   FEF,W
05A3C:  CLRF   x37
05A3E:  CLRF   x36
05A40:  CLRF   x35
05A42:  MOVWF  x34
05A44:  MOVFF  234,237
05A48:  CLRF   x34
05A4A:  CLRF   x35
05A4C:  CLRF   x36
05A4E:  MOVLW  02
05A50:  ADDWF  x2D,W
05A52:  MOVWF  FE9
05A54:  MOVLW  00
05A56:  ADDWFC x2E,W
05A58:  MOVWF  FEA
05A5A:  MOVF   FEF,W
05A5C:  CLRF   x3C
05A5E:  CLRF   x3B
05A60:  CLRF   x3A
05A62:  MOVWF  x39
05A64:  MOVFF  23A,03
05A68:  MOVFF  239,02
05A6C:  CLRF   00
05A6E:  CLRF   01
05A70:  MOVF   00,W
05A72:  IORWF  x34,F
05A74:  MOVF   01,W
05A76:  IORWF  x35,F
05A78:  MOVF   02,W
05A7A:  IORWF  x36,F
05A7C:  MOVF   03,W
05A7E:  IORWF  x37,F
05A80:  MOVLW  03
05A82:  ADDWF  x2D,W
05A84:  MOVWF  FE9
05A86:  MOVLW  00
05A88:  ADDWFC x2E,W
05A8A:  MOVWF  FEA
05A8C:  MOVF   FEF,W
05A8E:  CLRF   x3C
05A90:  CLRF   x3B
05A92:  CLRF   x3A
05A94:  MOVWF  x39
05A96:  MOVFF  23B,03
05A9A:  MOVFF  23A,02
05A9E:  MOVFF  239,01
05AA2:  CLRF   00
05AA4:  MOVF   00,W
05AA6:  IORWF  x34,F
05AA8:  MOVF   01,W
05AAA:  IORWF  x35,F
05AAC:  MOVF   02,W
05AAE:  IORWF  x36,F
05AB0:  MOVF   03,W
05AB2:  IORWF  x37,F
05AB4:  MOVLW  04
05AB6:  ADDWF  x2D,W
05AB8:  MOVWF  FE9
05ABA:  MOVLW  00
05ABC:  ADDWFC x2E,W
05ABE:  MOVWF  FEA
05AC0:  MOVF   FEF,W
05AC2:  MOVWF  00
05AC4:  CLRF   01
05AC6:  CLRF   02
05AC8:  CLRF   03
05ACA:  MOVF   00,W
05ACC:  IORWF  x34,W
05ACE:  MOVWF  x30
05AD0:  MOVF   01,W
05AD2:  IORWF  x35,W
05AD4:  MOVWF  x31
05AD6:  MOVF   02,W
05AD8:  IORWF  x36,W
05ADA:  MOVWF  x32
05ADC:  MOVF   03,W
05ADE:  IORWF  x37,W
05AE0:  MOVWF  x33
....................    printf("\tSubsector Address: 0x%08LX\r\n", subsector_address);
05AE2:  MOVLW  E6
05AE4:  MOVWF  FF6
05AE6:  MOVLW  17
05AE8:  MOVWF  FF7
05AEA:  MOVLW  00
05AEC:  MOVWF  FF8
05AEE:  MOVLW  16
05AF0:  MOVLB  3
05AF2:  MOVWF  x16
05AF4:  MOVLB  0
05AF6:  CALL   1F12
05AFA:  MOVFF  233,A62
05AFE:  MOVLW  37
05B00:  MOVLB  A
05B02:  MOVWF  x63
05B04:  MOVLB  0
05B06:  CALL   2126
05B0A:  MOVFF  232,A62
05B0E:  MOVLW  37
05B10:  MOVLB  A
05B12:  MOVWF  x63
05B14:  MOVLB  0
05B16:  CALL   2126
05B1A:  MOVFF  231,A62
05B1E:  MOVLW  37
05B20:  MOVLB  A
05B22:  MOVWF  x63
05B24:  MOVLB  0
05B26:  CALL   2126
05B2A:  MOVFF  230,A62
05B2E:  MOVLW  37
05B30:  MOVLB  A
05B32:  MOVWF  x63
05B34:  MOVLB  0
05B36:  CALL   2126
05B3A:  MOVLW  0D
05B3C:  BTFSS  FA6.6
05B3E:  GOTO   5B3C
05B42:  MOVLB  E
05B44:  MOVWF  xF9
05B46:  MOVLW  0A
05B48:  MOVLB  0
05B4A:  BTFSS  FA6.6
05B4C:  GOTO   5B4A
05B50:  MOVLB  E
05B52:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START);
05B54:  MOVFF  22F,284
05B58:  MOVLB  2
05B5A:  CLRF   x85
05B5C:  MOVLB  0
05B5E:  CALL   4C1A
....................    subsector_4kByte_erase(mis_fm, subsector_address); // FIX: 固定0消去→指定アドレス
05B62:  MOVFF  115,31B
05B66:  MOVFF  114,31A
05B6A:  MOVFF  113,319
05B6E:  MOVFF  112,318
05B72:  MOVFF  233,31F
05B76:  MOVFF  232,31E
05B7A:  MOVFF  231,31D
05B7E:  MOVFF  230,31C
05B82:  CALL   56B4
....................    piclog_make(cmd, PICLOG_PARAM_END);
05B86:  MOVFF  22F,284
05B8A:  MOVLB  2
05B8C:  SETF   x85
05B8E:  MOVLB  0
05B90:  CALL   4C1A
....................    printf("End Flash Erase 4kByte Subsector\r\n");
05B94:  MOVLW  04
05B96:  MOVWF  FF6
05B98:  MOVLW  18
05B9A:  MOVWF  FF7
05B9C:  MOVLW  00
05B9E:  MOVWF  FF8
05BA0:  CALL   1EDC
05BA4:  GOTO   D71A (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 64kByte Subsector\r\n");
05BA8:  MOVLW  28
05BAA:  MOVWF  FF6
05BAC:  MOVLW  18
05BAE:  MOVWF  FF7
05BB0:  MOVLW  00
05BB2:  MOVWF  FF8
05BB4:  CALL   1EDC
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
05BB8:  MOVLB  2
05BBA:  MOVF   x2D,W
05BBC:  MOVWF  FE9
05BBE:  MOVF   x2E,W
05BC0:  MOVWF  FEA
05BC2:  MOVFF  FEF,22F
05BC6:  MOVLW  01
05BC8:  ADDWF  x2D,W
05BCA:  MOVWF  FE9
05BCC:  MOVLW  00
05BCE:  ADDWFC x2E,W
05BD0:  MOVWF  FEA
05BD2:  MOVF   FEF,W
05BD4:  CLRF   x37
05BD6:  CLRF   x36
05BD8:  CLRF   x35
05BDA:  MOVWF  x34
05BDC:  MOVFF  234,237
05BE0:  CLRF   x34
05BE2:  CLRF   x35
05BE4:  CLRF   x36
05BE6:  MOVLW  02
05BE8:  ADDWF  x2D,W
05BEA:  MOVWF  FE9
05BEC:  MOVLW  00
05BEE:  ADDWFC x2E,W
05BF0:  MOVWF  FEA
05BF2:  MOVF   FEF,W
05BF4:  CLRF   x3C
05BF6:  CLRF   x3B
05BF8:  CLRF   x3A
05BFA:  MOVWF  x39
05BFC:  MOVFF  23A,03
05C00:  MOVFF  239,02
05C04:  CLRF   00
05C06:  CLRF   01
05C08:  MOVF   00,W
05C0A:  IORWF  x34,F
05C0C:  MOVF   01,W
05C0E:  IORWF  x35,F
05C10:  MOVF   02,W
05C12:  IORWF  x36,F
05C14:  MOVF   03,W
05C16:  IORWF  x37,F
05C18:  MOVLW  03
05C1A:  ADDWF  x2D,W
05C1C:  MOVWF  FE9
05C1E:  MOVLW  00
05C20:  ADDWFC x2E,W
05C22:  MOVWF  FEA
05C24:  MOVF   FEF,W
05C26:  CLRF   x3C
05C28:  CLRF   x3B
05C2A:  CLRF   x3A
05C2C:  MOVWF  x39
05C2E:  MOVFF  23B,03
05C32:  MOVFF  23A,02
05C36:  MOVFF  239,01
05C3A:  CLRF   00
05C3C:  MOVF   00,W
05C3E:  IORWF  x34,F
05C40:  MOVF   01,W
05C42:  IORWF  x35,F
05C44:  MOVF   02,W
05C46:  IORWF  x36,F
05C48:  MOVF   03,W
05C4A:  IORWF  x37,F
05C4C:  MOVLW  04
05C4E:  ADDWF  x2D,W
05C50:  MOVWF  FE9
05C52:  MOVLW  00
05C54:  ADDWFC x2E,W
05C56:  MOVWF  FEA
05C58:  MOVF   FEF,W
05C5A:  MOVWF  00
05C5C:  CLRF   01
05C5E:  CLRF   02
05C60:  CLRF   03
05C62:  MOVF   00,W
05C64:  IORWF  x34,W
05C66:  MOVWF  x30
05C68:  MOVF   01,W
05C6A:  IORWF  x35,W
05C6C:  MOVWF  x31
05C6E:  MOVF   02,W
05C70:  IORWF  x36,W
05C72:  MOVWF  x32
05C74:  MOVF   03,W
05C76:  IORWF  x37,W
05C78:  MOVWF  x33
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
05C7A:  MOVLW  4E
05C7C:  MOVWF  FF6
05C7E:  MOVLW  18
05C80:  MOVWF  FF7
05C82:  MOVLW  00
05C84:  MOVWF  FF8
05C86:  MOVLW  16
05C88:  MOVLB  3
05C8A:  MOVWF  x16
05C8C:  MOVLB  0
05C8E:  CALL   1F12
05C92:  MOVFF  233,A62
05C96:  MOVLW  37
05C98:  MOVLB  A
05C9A:  MOVWF  x63
05C9C:  MOVLB  0
05C9E:  CALL   2126
05CA2:  MOVFF  232,A62
05CA6:  MOVLW  37
05CA8:  MOVLB  A
05CAA:  MOVWF  x63
05CAC:  MOVLB  0
05CAE:  CALL   2126
05CB2:  MOVFF  231,A62
05CB6:  MOVLW  37
05CB8:  MOVLB  A
05CBA:  MOVWF  x63
05CBC:  MOVLB  0
05CBE:  CALL   2126
05CC2:  MOVFF  230,A62
05CC6:  MOVLW  37
05CC8:  MOVLB  A
05CCA:  MOVWF  x63
05CCC:  MOVLB  0
05CCE:  CALL   2126
05CD2:  MOVLW  0D
05CD4:  BTFSS  FA6.6
05CD6:  GOTO   5CD4
05CDA:  MOVLB  E
05CDC:  MOVWF  xF9
05CDE:  MOVLW  0A
05CE0:  MOVLB  0
05CE2:  BTFSS  FA6.6
05CE4:  GOTO   5CE2
05CE8:  MOVLB  E
05CEA:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05CEC:  MOVFF  22F,284
05CF0:  MOVLB  2
05CF2:  CLRF   x85
05CF4:  MOVLB  0
05CF6:  CALL   4C1A
....................    
....................    //subsector_64kByte_erase(mis_fm, subsector_address);
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05CFA:  MOVFF  22F,284
05CFE:  MOVLB  2
05D00:  SETF   x85
05D02:  MOVLB  0
05D04:  CALL   4C1A
....................    fprintf(PC, "End Flash Erase 64kByte Subsector\r\n");
05D08:  MOVLW  6C
05D0A:  MOVWF  FF6
05D0C:  MOVLW  18
05D0E:  MOVWF  FF7
05D10:  MOVLW  00
05D12:  MOVWF  FF8
05D14:  CALL   1EDC
05D18:  GOTO   D72A (RETURN)
.................... }
.................... 
.................... void mode_misf_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
*
05EFC:  MOVLW  90
05EFE:  MOVWF  FF6
05F00:  MOVLW  18
05F02:  MOVWF  FF7
05F04:  MOVLW  00
05F06:  MOVWF  FF8
05F08:  CALL   1EDC
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
05F0C:  MOVLB  2
05F0E:  MOVF   x2D,W
05F10:  MOVWF  FE9
05F12:  MOVF   x2E,W
05F14:  MOVWF  FEA
05F16:  MOVFF  FEF,283
05F1A:  MOVFF  283,284
05F1E:  CLRF   x85
05F20:  MOVLB  0
05F22:  CALL   4C1A
.................... 
....................    FLASH_WRITE_PARAM flash_write_param = {0};
05F26:  MOVLB  2
05F28:  CLRF   x2F
05F2A:  CLRF   x30
05F2C:  CLRF   x31
05F2E:  CLRF   x32
05F30:  CLRF   x33
05F32:  CLRF   x34
05F34:  CLRF   x35
....................    
....................    flash_write_param.id = parameter[0];
05F36:  MOVF   x2D,W
05F38:  MOVWF  FE9
05F3A:  MOVF   x2E,W
05F3C:  MOVWF  FEA
05F3E:  MOVFF  FEF,22F
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
05F42:  MOVLW  01
05F44:  ADDWF  x2D,W
05F46:  MOVWF  FE9
05F48:  MOVLW  00
05F4A:  ADDWFC x2E,W
05F4C:  MOVWF  FEA
05F4E:  MOVF   FEF,W
05F50:  CLRF   x86
05F52:  CLRF   x85
05F54:  CLRF   x84
05F56:  MOVWF  x83
05F58:  MOVFF  283,286
05F5C:  CLRF   x83
05F5E:  CLRF   x84
05F60:  CLRF   x85
05F62:  MOVLW  02
05F64:  ADDWF  x2D,W
05F66:  MOVWF  FE9
05F68:  MOVLW  00
05F6A:  ADDWFC x2E,W
05F6C:  MOVWF  FEA
05F6E:  MOVF   FEF,W
05F70:  CLRF   x8B
05F72:  CLRF   x8A
05F74:  CLRF   x89
05F76:  MOVWF  x88
05F78:  MOVFF  289,03
05F7C:  MOVFF  288,02
05F80:  CLRF   00
05F82:  CLRF   01
05F84:  MOVF   00,W
05F86:  IORWF  x83,F
05F88:  MOVF   01,W
05F8A:  IORWF  x84,F
05F8C:  MOVF   02,W
05F8E:  IORWF  x85,F
05F90:  MOVF   03,W
05F92:  IORWF  x86,F
05F94:  MOVLW  03
05F96:  ADDWF  x2D,W
05F98:  MOVWF  FE9
05F9A:  MOVLW  00
05F9C:  ADDWFC x2E,W
05F9E:  MOVWF  FEA
05FA0:  MOVF   FEF,W
05FA2:  CLRF   x8B
05FA4:  CLRF   x8A
05FA6:  CLRF   x89
05FA8:  MOVWF  x88
05FAA:  MOVFF  28A,03
05FAE:  MOVFF  289,02
05FB2:  MOVFF  288,01
05FB6:  CLRF   00
05FB8:  MOVF   00,W
05FBA:  IORWF  x83,F
05FBC:  MOVF   01,W
05FBE:  IORWF  x84,F
05FC0:  MOVF   02,W
05FC2:  IORWF  x85,F
05FC4:  MOVF   03,W
05FC6:  IORWF  x86,F
05FC8:  MOVLW  04
05FCA:  ADDWF  x2D,W
05FCC:  MOVWF  FE9
05FCE:  MOVLW  00
05FD0:  ADDWFC x2E,W
05FD2:  MOVWF  FEA
05FD4:  MOVF   FEF,W
05FD6:  MOVWF  00
05FD8:  CLRF   01
05FDA:  CLRF   02
05FDC:  CLRF   03
05FDE:  MOVF   00,W
05FE0:  IORWF  x83,W
05FE2:  MOVWF  x30
05FE4:  MOVF   01,W
05FE6:  IORWF  x84,W
05FE8:  MOVWF  x31
05FEA:  MOVF   02,W
05FEC:  IORWF  x85,W
05FEE:  MOVWF  x32
05FF0:  MOVF   03,W
05FF2:  IORWF  x86,W
05FF4:  MOVWF  x33
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
05FF6:  MOVLW  07
05FF8:  ADDWF  x2D,W
05FFA:  MOVWF  FE9
05FFC:  MOVLW  00
05FFE:  ADDWFC x2E,W
06000:  MOVWF  FEA
06002:  MOVF   FEF,W
06004:  CLRF   x84
06006:  MOVWF  x83
06008:  MOVFF  283,284
0600C:  CLRF   x83
0600E:  MOVLW  08
06010:  ADDWF  x2D,W
06012:  MOVWF  FE9
06014:  MOVLW  00
06016:  ADDWFC x2E,W
06018:  MOVWF  FEA
0601A:  MOVF   FEF,W
0601C:  CLRF   03
0601E:  IORWF  x83,W
06020:  MOVWF  x34
06022:  MOVF   03,W
06024:  IORWF  x84,W
06026:  MOVWF  x35
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
06028:  MOVLW  AA
0602A:  MOVWF  FF6
0602C:  MOVLW  18
0602E:  MOVWF  FF7
06030:  MOVLW  00
06032:  MOVWF  FF8
06034:  MOVLW  0C
06036:  MOVLB  3
06038:  MOVWF  x16
0603A:  MOVLB  0
0603C:  CALL   1F12
06040:  MOVFF  22F,A62
06044:  MOVLW  37
06046:  MOVLB  A
06048:  MOVWF  x63
0604A:  MOVLB  0
0604C:  CALL   2126
06050:  MOVLW  0D
06052:  BTFSS  FA6.6
06054:  GOTO   6052
06058:  MOVLB  E
0605A:  MOVWF  xF9
0605C:  MOVLW  0A
0605E:  MOVLB  0
06060:  BTFSS  FA6.6
06062:  GOTO   6060
06066:  MOVLB  E
06068:  MOVWF  xF9
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
0606A:  MOVLW  BE
0606C:  MOVWF  FF6
0606E:  MOVLW  18
06070:  MOVWF  FF7
06072:  MOVLW  00
06074:  MOVWF  FF8
06076:  MOVLW  0E
06078:  MOVLB  3
0607A:  MOVWF  x16
0607C:  MOVLB  0
0607E:  CALL   1F12
06082:  MOVFF  233,A62
06086:  MOVLW  37
06088:  MOVLB  A
0608A:  MOVWF  x63
0608C:  MOVLB  0
0608E:  CALL   2126
06092:  MOVFF  232,A62
06096:  MOVLW  37
06098:  MOVLB  A
0609A:  MOVWF  x63
0609C:  MOVLB  0
0609E:  CALL   2126
060A2:  MOVFF  231,A62
060A6:  MOVLW  37
060A8:  MOVLB  A
060AA:  MOVWF  x63
060AC:  MOVLB  0
060AE:  CALL   2126
060B2:  MOVFF  230,A62
060B6:  MOVLW  37
060B8:  MOVLB  A
060BA:  MOVWF  x63
060BC:  MOVLB  0
060BE:  CALL   2126
060C2:  MOVLW  0D
060C4:  BTFSS  FA6.6
060C6:  GOTO   60C4
060CA:  MOVLB  E
060CC:  MOVWF  xF9
060CE:  MOVLW  0A
060D0:  MOVLB  0
060D2:  BTFSS  FA6.6
060D4:  GOTO   60D2
060D8:  MOVLB  E
060DA:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
060DC:  MOVLW  D4
060DE:  MOVWF  FF6
060E0:  MOVLW  18
060E2:  MOVWF  FF7
060E4:  MOVLW  00
060E6:  MOVWF  FF8
060E8:  MOVLW  0E
060EA:  MOVLB  3
060EC:  MOVWF  x16
060EE:  MOVLB  0
060F0:  CALL   1F12
060F4:  MOVFF  235,A62
060F8:  MOVLW  37
060FA:  MOVLB  A
060FC:  MOVWF  x63
060FE:  MOVLB  0
06100:  CALL   2126
06104:  MOVFF  234,A62
06108:  MOVLW  37
0610A:  MOVLB  A
0610C:  MOVWF  x63
0610E:  MOVLB  0
06110:  CALL   2126
06114:  MOVLW  0D
06116:  BTFSS  FA6.6
06118:  GOTO   6116
0611C:  MOVLB  E
0611E:  MOVWF  xF9
06120:  MOVLW  0A
06122:  MOVLB  0
06124:  BTFSS  FA6.6
06126:  GOTO   6124
0612A:  MOVLB  E
0612C:  MOVWF  xF9
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
0612E:  MOVFF  22F,284
06132:  MOVLB  2
06134:  CLRF   x85
06136:  MOVLB  0
06138:  CALL   4C1A
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
0613C:  MOVLW  EA
0613E:  MOVWF  FF6
06140:  MOVLW  18
06142:  MOVWF  FF7
06144:  MOVLW  00
06146:  MOVWF  FF8
06148:  CALL   1EDC
....................    for (p = 0; p < flash_write_param.packetnum; p++)
0614C:  MOVLB  2
0614E:  CLRF   x77
06150:  CLRF   x76
06152:  MOVLB  0
06154:  MOVLB  2
06156:  MOVF   x77,W
06158:  SUBWF  x35,W
0615A:  BTFSC  FD8.0
0615C:  BRA    6164
0615E:  MOVLB  0
06160:  GOTO   64C0
06164:  MOVLB  0
06166:  BTFSS  FD8.2
06168:  GOTO   617E
0616C:  MOVLB  2
0616E:  MOVF   x34,W
06170:  SUBWF  x76,W
06172:  BTFSS  FD8.0
06174:  BRA    617C
06176:  MOVLB  0
06178:  GOTO   64C0
0617C:  MOVLB  0
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
0617E:  MOVLB  2
06180:  RLCF   x76,W
06182:  MOVWF  x78
06184:  RLCF   x77,W
06186:  MOVWF  x79
06188:  RLCF   x78,F
0618A:  RLCF   x79,F
0618C:  RLCF   x78,F
0618E:  RLCF   x79,F
06190:  RLCF   x78,F
06192:  RLCF   x79,F
06194:  RLCF   x78,F
06196:  RLCF   x79,F
06198:  RLCF   x78,F
0619A:  RLCF   x79,F
0619C:  MOVLW  C0
0619E:  ANDWF  x78,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
061A0:  CLRF   x7A
061A2:  MOVLB  0
061A4:  MOVLB  2
061A6:  MOVF   x7A,W
061A8:  SUBLW  3F
061AA:  BTFSC  FD8.0
061AC:  BRA    61B4
061AE:  MOVLB  0
061B0:  GOTO   6216
061B4:  MOVLB  0
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
061B6:  CLRF   03
061B8:  MOVLB  2
061BA:  MOVF   x7A,W
061BC:  ADDLW  36
061BE:  MOVWF  FE9
061C0:  MOVLW  02
061C2:  ADDWFC 03,W
061C4:  MOVWF  FEA
061C6:  MOVF   x7A,W
061C8:  ADDWF  x78,W
061CA:  MOVWF  x85
061CC:  MOVLW  00
061CE:  ADDWFC x79,W
061D0:  MOVWF  x86
061D2:  MOVF   x85,W
061D4:  MOVWF  00
061D6:  CLRF   03
061D8:  MOVF   00,W
061DA:  MOVWF  FEF
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
061DC:  CLRF   03
061DE:  MOVF   x7A,W
061E0:  ADDLW  36
061E2:  MOVWF  FE9
061E4:  MOVLW  02
061E6:  ADDWFC 03,W
061E8:  MOVWF  FEA
061EA:  MOVFF  FEF,283
061EE:  MOVFF  283,A62
061F2:  MOVLW  37
061F4:  MOVLB  A
061F6:  MOVWF  x63
061F8:  MOVLB  0
061FA:  CALL   2126
061FE:  MOVLW  20
06200:  BTFSS  FA6.6
06202:  GOTO   6200
06206:  MOVLB  E
06208:  MOVWF  xF9
0620A:  MOVLB  0
0620C:  MOVLB  2
0620E:  INCF   x7A,F
06210:  MOVLB  0
06212:  GOTO   61A4
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
06216:  MOVLB  2
06218:  RLCF   x76,W
0621A:  MOVWF  02
0621C:  RLCF   x77,W
0621E:  MOVWF  03
06220:  RLCF   02,F
06222:  RLCF   03,F
06224:  RLCF   02,F
06226:  RLCF   03,F
06228:  RLCF   02,F
0622A:  RLCF   03,F
0622C:  RLCF   02,F
0622E:  RLCF   03,F
06230:  RLCF   02,F
06232:  RLCF   03,F
06234:  MOVLW  C0
06236:  ANDWF  02,F
06238:  MOVF   02,W
0623A:  ADDWF  x30,W
0623C:  MOVWF  x7B
0623E:  MOVF   03,W
06240:  ADDWFC x31,W
06242:  MOVWF  x7C
06244:  MOVLW  00
06246:  ADDWFC x32,W
06248:  MOVWF  x7D
0624A:  MOVLW  00
0624C:  ADDWFC x33,W
0624E:  MOVWF  x7E
....................       // FLASH 終端チェック (MISF_END は最終アドレス想定: inclusive)
....................       if(current_address > MISF_END){
06250:  MOVF   x7E,F
06252:  BTFSC  FD8.2
06254:  BRA    625C
06256:  MOVLB  0
06258:  GOTO   628A
0625C:  MOVLB  0
0625E:  MOVLB  2
06260:  MOVF   x7D,W
06262:  SUBLW  BB
06264:  BTFSS  FD8.0
06266:  BRA    626E
06268:  MOVLB  0
0626A:  GOTO   6360
0626E:  MOVLB  0
06270:  XORLW  FF
06272:  BTFSS  FD8.2
06274:  GOTO   628A
06278:  MOVLB  2
0627A:  MOVF   x7C,W
0627C:  SUBLW  0F
0627E:  BTFSS  FD8.0
06280:  BRA    6288
06282:  MOVLB  0
06284:  GOTO   6360
06288:  MOVLB  0
....................          fprintf(PC, "\r\n[FLASH] Write address 0x%08LX exceeds device end 0x%08LX -> abort\r\n", current_address, (unsigned int32)MISF_END);
0628A:  MOVLW  F8
0628C:  MOVWF  FF6
0628E:  MOVLW  18
06290:  MOVWF  FF7
06292:  MOVLW  00
06294:  MOVWF  FF8
06296:  MOVLW  1A
06298:  MOVLB  3
0629A:  MOVWF  x16
0629C:  MOVLB  0
0629E:  CALL   1F12
062A2:  MOVFF  27E,A62
062A6:  MOVLW  37
062A8:  MOVLB  A
062AA:  MOVWF  x63
062AC:  MOVLB  0
062AE:  CALL   2126
062B2:  MOVFF  27D,A62
062B6:  MOVLW  37
062B8:  MOVLB  A
062BA:  MOVWF  x63
062BC:  MOVLB  0
062BE:  CALL   2126
062C2:  MOVFF  27C,A62
062C6:  MOVLW  37
062C8:  MOVLB  A
062CA:  MOVWF  x63
062CC:  MOVLB  0
062CE:  CALL   2126
062D2:  MOVFF  27B,A62
062D6:  MOVLW  37
062D8:  MOVLB  A
062DA:  MOVWF  x63
062DC:  MOVLB  0
062DE:  CALL   2126
062E2:  MOVLW  17
062E4:  MOVWF  FF6
062E6:  MOVLW  19
062E8:  MOVWF  FF7
062EA:  MOVLW  00
062EC:  MOVWF  FF8
062EE:  MOVLW  16
062F0:  MOVLB  3
062F2:  MOVWF  x16
062F4:  MOVLB  0
062F6:  CALL   1F12
062FA:  MOVLB  A
062FC:  CLRF   x62
062FE:  MOVLW  37
06300:  MOVWF  x63
06302:  MOVLB  0
06304:  CALL   2126
06308:  MOVLW  BC
0630A:  MOVLB  A
0630C:  MOVWF  x62
0630E:  MOVLW  37
06310:  MOVWF  x63
06312:  MOVLB  0
06314:  CALL   2126
06318:  MOVLW  0F
0631A:  MOVLB  A
0631C:  MOVWF  x62
0631E:  MOVLW  37
06320:  MOVWF  x63
06322:  MOVLB  0
06324:  CALL   2126
06328:  MOVLB  A
0632A:  SETF   x62
0632C:  MOVLW  37
0632E:  MOVWF  x63
06330:  MOVLB  0
06332:  CALL   2126
06336:  MOVLW  32
06338:  MOVWF  FF6
0633A:  MOVLW  19
0633C:  MOVWF  FF7
0633E:  MOVLW  00
06340:  MOVWF  FF8
06342:  MOVLW  0B
06344:  MOVLB  3
06346:  MOVWF  x16
06348:  MOVLB  0
0634A:  CALL   1F12
....................          piclog_make(flash_write_param.id, PICLOG_PARAM_END);
0634E:  MOVFF  22F,284
06352:  MOVLB  2
06354:  SETF   x85
06356:  MOVLB  0
06358:  CALL   4C1A
....................          break;
0635C:  GOTO   64C0
....................       }
....................       if(current_address + (PACKET_SIZE - 1) > MISF_END){
06360:  MOVLW  3F
06362:  MOVLB  2
06364:  ADDWF  x7B,W
06366:  MOVWF  x83
06368:  MOVLW  00
0636A:  ADDWFC x7C,W
0636C:  MOVWF  x84
0636E:  MOVLW  00
06370:  ADDWFC x7D,W
06372:  MOVWF  x85
06374:  MOVLW  00
06376:  ADDWFC x7E,W
06378:  MOVWF  x86
0637A:  MOVF   x86,F
0637C:  BTFSC  FD8.2
0637E:  BRA    6386
06380:  MOVLB  0
06382:  GOTO   63B4
06386:  MOVLB  0
06388:  MOVLB  2
0638A:  MOVF   x85,W
0638C:  SUBLW  BB
0638E:  BTFSS  FD8.0
06390:  BRA    6398
06392:  MOVLB  0
06394:  GOTO   647C
06398:  MOVLB  0
0639A:  XORLW  FF
0639C:  BTFSS  FD8.2
0639E:  GOTO   63B4
063A2:  MOVLB  2
063A4:  MOVF   x84,W
063A6:  SUBLW  0F
063A8:  BTFSS  FD8.0
063AA:  BRA    63B2
063AC:  MOVLB  0
063AE:  GOTO   647C
063B2:  MOVLB  0
....................          unsigned int32 remain = (MISF_END - current_address) + 1; // 書込可能残り
063B4:  MOVLW  FF
063B6:  BSF    FD8.0
063B8:  MOVLB  2
063BA:  SUBFWB x7B,W
063BC:  MOVWF  x83
063BE:  MOVLW  0F
063C0:  SUBFWB x7C,W
063C2:  MOVWF  x84
063C4:  MOVLW  BC
063C6:  SUBFWB x7D,W
063C8:  MOVWF  x85
063CA:  MOVLW  00
063CC:  SUBFWB x7E,W
063CE:  MOVWF  x86
063D0:  MOVLW  01
063D2:  ADDWF  x83,W
063D4:  MOVWF  x7F
063D6:  MOVLW  00
063D8:  ADDWFC x84,W
063DA:  MOVWF  x80
063DC:  MOVLW  00
063DE:  ADDWFC x85,W
063E0:  MOVWF  x81
063E2:  MOVLW  00
063E4:  ADDWFC x86,W
063E6:  MOVWF  x82
063E8:  MOVLB  0
....................          fprintf(PC, "\r\n[FLASH] Reached end. Partial write %lu bytes (packet truncated).\r\n", remain);
063EA:  MOVLW  3E
063EC:  MOVWF  FF6
063EE:  MOVLW  19
063F0:  MOVWF  FF7
063F2:  MOVLW  00
063F4:  MOVWF  FF8
063F6:  MOVLW  25
063F8:  MOVLB  3
063FA:  MOVWF  x16
063FC:  MOVLB  0
063FE:  CALL   1F12
06402:  MOVLW  41
06404:  MOVWF  FE9
06406:  MOVFF  282,2DE
0640A:  MOVFF  281,2DD
0640E:  MOVFF  280,2DC
06412:  MOVFF  27F,2DB
06416:  CALL   5DF6
0641A:  MOVLW  66
0641C:  MOVWF  FF6
0641E:  MOVLW  19
06420:  MOVWF  FF7
06422:  MOVLW  00
06424:  MOVWF  FF8
06426:  MOVLW  1C
06428:  MOVLB  3
0642A:  MOVWF  x16
0642C:  MOVLB  0
0642E:  CALL   1F12
....................          write_data_bytes(mis_fm, current_address, writedata, (unsigned int16)remain);
06432:  MOVFF  115,B8E
06436:  MOVFF  114,B8D
0643A:  MOVFF  113,B8C
0643E:  MOVFF  112,B8B
06442:  MOVFF  27E,B92
06446:  MOVFF  27D,B91
0644A:  MOVFF  27C,B90
0644E:  MOVFF  27B,B8F
06452:  MOVLW  02
06454:  MOVLB  B
06456:  MOVWF  x94
06458:  MOVLW  36
0645A:  MOVWF  x93
0645C:  MOVFF  280,B96
06460:  MOVFF  27F,B95
06464:  MOVLB  0
06466:  CALL   3B1A
....................          piclog_make(flash_write_param.id, PICLOG_PARAM_END);
0646A:  MOVFF  22F,284
0646E:  MOVLB  2
06470:  SETF   x85
06472:  MOVLB  0
06474:  CALL   4C1A
....................          break;
06478:  GOTO   64C0
....................       }
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
0647C:  MOVFF  115,B8E
06480:  MOVFF  114,B8D
06484:  MOVFF  113,B8C
06488:  MOVFF  112,B8B
0648C:  MOVFF  27E,B92
06490:  MOVFF  27D,B91
06494:  MOVFF  27C,B90
06498:  MOVFF  27B,B8F
0649C:  MOVLW  02
0649E:  MOVLB  B
064A0:  MOVWF  x94
064A2:  MOVLW  36
064A4:  MOVWF  x93
064A6:  CLRF   x96
064A8:  MOVLW  40
064AA:  MOVWF  x95
064AC:  MOVLB  0
064AE:  CALL   3B1A
064B2:  MOVLB  2
064B4:  INCF   x76,F
064B6:  BTFSC  FD8.2
064B8:  INCF   x77,F
064BA:  MOVLB  0
064BC:  GOTO   6154
....................    }
.................... 
....................    piclog_make(flash_write_param.id, PICLOG_PARAM_END); // Log the end of the command execution
064C0:  MOVFF  22F,284
064C4:  MOVLB  2
064C6:  SETF   x85
064C8:  MOVLB  0
064CA:  CALL   4C1A
....................    fprintf(PC, "\r\n");
064CE:  MOVLW  0D
064D0:  BTFSS  FA6.6
064D2:  GOTO   64D0
064D6:  MOVLB  E
064D8:  MOVWF  xF9
064DA:  MOVLW  0A
064DC:  MOVLB  0
064DE:  BTFSS  FA6.6
064E0:  GOTO   64DE
064E4:  MOVLB  E
064E6:  MOVWF  xF9
....................    fprintf(PC, "End Flash Write Demo\r\n");
064E8:  MOVLW  84
064EA:  MOVWF  FF6
064EC:  MOVLW  19
064EE:  MOVWF  FF7
064F0:  MOVLW  00
064F2:  MOVWF  FF8
064F4:  MOVLB  0
064F6:  CALL   1EDC
064FA:  GOTO   D73A (RETURN)
.................... }
.................... 
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
*
0652E:  MOVLW  9C
06530:  MOVWF  FF6
06532:  MOVLW  19
06534:  MOVWF  FF7
06536:  MOVLW  00
06538:  MOVWF  FF8
0653A:  CALL   1EDC
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
0653E:  MOVLB  2
06540:  MOVF   x2D,W
06542:  MOVWF  FE9
06544:  MOVF   x2E,W
06546:  MOVWF  FEA
06548:  MOVFF  FEF,233
0654C:  MOVFF  233,284
06550:  CLRF   x85
06552:  MOVLB  0
06554:  CALL   4C1A
....................    flash_setting(mis_fm);
06558:  MOVFF  115,33B
0655C:  MOVFF  114,33A
06560:  MOVFF  113,339
06564:  MOVFF  112,338
06568:  CALL   64FE
....................    unsigned int32 write_address = 0x00000000;
0656C:  MOVLB  2
0656E:  CLRF   x32
06570:  CLRF   x31
06572:  CLRF   x30
06574:  CLRF   x2F
....................    //int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
....................    //write_data_bytes(mis_fm, write_address, write_data, 256);
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06576:  MOVF   x2D,W
06578:  MOVWF  FE9
0657A:  MOVF   x2E,W
0657C:  MOVWF  FEA
0657E:  MOVFF  FEF,233
06582:  MOVFF  233,284
06586:  SETF   x85
06588:  MOVLB  0
0658A:  CALL   4C1A
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
0658E:  MOVLW  C2
06590:  MOVWF  FF6
06592:  MOVLW  19
06594:  MOVWF  FF7
06596:  MOVLW  00
06598:  MOVWF  FF8
0659A:  CALL   1EDC
0659E:  GOTO   D74A (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
065A2:  MOVLW  E6
065A4:  MOVWF  FF6
065A6:  MOVLW  19
065A8:  MOVWF  FF7
065AA:  MOVLW  00
065AC:  MOVWF  FF8
065AE:  CALL   1EDC
.................... 
.................... 
....................    FLASH_PARAM flash_param = {0};
065B2:  MOVLB  2
065B4:  CLRF   x2F
065B6:  CLRF   x30
065B8:  CLRF   x31
065BA:  CLRF   x32
065BC:  CLRF   x33
065BE:  CLRF   x34
065C0:  CLRF   x35
....................    flash_param.id = uplinkcmd_ptr[0];
065C2:  MOVF   x2D,W
065C4:  MOVWF  FE9
065C6:  MOVF   x2E,W
065C8:  MOVWF  FEA
065CA:  MOVFF  FEF,22F
....................    flash_param.readaddress = -
....................       ((unsigned int32)uplinkcmd_ptr[1] << 24) |
....................       ((unsigned int32)uplinkcmd_ptr[2] << 16) |
....................       ((unsigned int32)uplinkcmd_ptr[3] << 8)  |
....................       ((unsigned int32)uplinkcmd_ptr[4]);
065CE:  MOVLW  01
065D0:  ADDWF  x2D,W
065D2:  MOVWF  FE9
065D4:  MOVLW  00
065D6:  ADDWFC x2E,W
065D8:  MOVWF  FEA
065DA:  MOVF   FEF,W
065DC:  CLRF   x87
065DE:  CLRF   x86
065E0:  CLRF   x85
065E2:  MOVWF  x84
065E4:  MOVFF  284,03
065E8:  CLRF   00
065EA:  CLRF   01
065EC:  CLRF   02
065EE:  MOVLW  00
065F0:  BSF    FD8.0
065F2:  SUBFWB 00,W
065F4:  MOVWF  x84
065F6:  MOVLW  00
065F8:  SUBFWB 01,W
065FA:  MOVWF  x85
065FC:  MOVLW  00
065FE:  SUBFWB 02,W
06600:  MOVWF  x86
06602:  MOVLW  00
06604:  SUBFWB 03,W
06606:  MOVWF  x87
06608:  MOVLW  02
0660A:  ADDWF  x2D,W
0660C:  MOVWF  FE9
0660E:  MOVLW  00
06610:  ADDWFC x2E,W
06612:  MOVWF  FEA
06614:  MOVF   FEF,W
06616:  CLRF   x8C
06618:  CLRF   x8B
0661A:  CLRF   x8A
0661C:  MOVWF  x89
0661E:  MOVFF  28A,03
06622:  MOVFF  289,02
06626:  CLRF   00
06628:  CLRF   01
0662A:  MOVF   00,W
0662C:  IORWF  x84,F
0662E:  MOVF   01,W
06630:  IORWF  x85,F
06632:  MOVF   02,W
06634:  IORWF  x86,F
06636:  MOVF   03,W
06638:  IORWF  x87,F
0663A:  MOVLW  03
0663C:  ADDWF  x2D,W
0663E:  MOVWF  FE9
06640:  MOVLW  00
06642:  ADDWFC x2E,W
06644:  MOVWF  FEA
06646:  MOVF   FEF,W
06648:  CLRF   x8C
0664A:  CLRF   x8B
0664C:  CLRF   x8A
0664E:  MOVWF  x89
06650:  MOVFF  28B,03
06654:  MOVFF  28A,02
06658:  MOVFF  289,01
0665C:  CLRF   00
0665E:  MOVF   00,W
06660:  IORWF  x84,F
06662:  MOVF   01,W
06664:  IORWF  x85,F
06666:  MOVF   02,W
06668:  IORWF  x86,F
0666A:  MOVF   03,W
0666C:  IORWF  x87,F
0666E:  MOVLW  04
06670:  ADDWF  x2D,W
06672:  MOVWF  FE9
06674:  MOVLW  00
06676:  ADDWFC x2E,W
06678:  MOVWF  FEA
0667A:  MOVF   FEF,W
0667C:  MOVWF  00
0667E:  CLRF   01
06680:  CLRF   02
06682:  CLRF   03
06684:  MOVF   00,W
06686:  IORWF  x84,W
06688:  MOVWF  x32
0668A:  MOVF   01,W
0668C:  IORWF  x85,W
0668E:  MOVWF  x33
06690:  MOVF   02,W
06692:  IORWF  x86,W
06694:  MOVWF  x34
06696:  MOVF   03,W
06698:  IORWF  x87,W
0669A:  MOVWF  x35
....................    flash_param.readpacketnum = 
....................       ((unsigned int16)uplinkcmd_ptr[6] << 8) |
....................       ((unsigned int16)uplinkcmd_ptr[7]);
0669C:  MOVLW  06
0669E:  ADDWF  x2D,W
066A0:  MOVWF  FE9
066A2:  MOVLW  00
066A4:  ADDWFC x2E,W
066A6:  MOVWF  FEA
066A8:  MOVF   FEF,W
066AA:  CLRF   x85
066AC:  MOVWF  x84
066AE:  MOVFF  284,285
066B2:  CLRF   x84
066B4:  MOVLW  07
066B6:  ADDWF  x2D,W
066B8:  MOVWF  FE9
066BA:  MOVLW  00
066BC:  ADDWFC x2E,W
066BE:  MOVWF  FEA
066C0:  MOVF   FEF,W
066C2:  CLRF   03
066C4:  IORWF  x84,W
066C6:  MOVWF  x30
066C8:  MOVF   03,W
066CA:  IORWF  x85,W
066CC:  MOVWF  x31
....................       piclog_make(flash_param.id, PICLOG_PARAM_START); // Log the command execution
066CE:  MOVFF  22F,284
066D2:  CLRF   x85
066D4:  MOVLB  0
066D6:  CALL   4C1A
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
066DA:  MOVLW  FA
066DC:  MOVWF  FF6
066DE:  MOVLW  19
066E0:  MOVWF  FF7
066E2:  MOVLW  00
066E4:  MOVWF  FF8
066E6:  MOVLW  0C
066E8:  MOVLB  3
066EA:  MOVWF  x16
066EC:  MOVLB  0
066EE:  CALL   1F12
066F2:  MOVFF  22F,A62
066F6:  MOVLW  37
066F8:  MOVLB  A
066FA:  MOVWF  x63
066FC:  MOVLB  0
066FE:  CALL   2126
06702:  MOVLW  0D
06704:  BTFSS  FA6.6
06706:  GOTO   6704
0670A:  MOVLB  E
0670C:  MOVWF  xF9
0670E:  MOVLW  0A
06710:  MOVLB  0
06712:  BTFSS  FA6.6
06714:  GOTO   6712
06718:  MOVLB  E
0671A:  MOVWF  xF9
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
0671C:  MOVLW  0E
0671E:  MOVWF  FF6
06720:  MOVLW  1A
06722:  MOVWF  FF7
06724:  MOVLW  00
06726:  MOVWF  FF8
06728:  MOVLW  0E
0672A:  MOVLB  3
0672C:  MOVWF  x16
0672E:  MOVLB  0
06730:  CALL   1F12
06734:  MOVFF  235,A62
06738:  MOVLW  37
0673A:  MOVLB  A
0673C:  MOVWF  x63
0673E:  MOVLB  0
06740:  CALL   2126
06744:  MOVFF  234,A62
06748:  MOVLW  37
0674A:  MOVLB  A
0674C:  MOVWF  x63
0674E:  MOVLB  0
06750:  CALL   2126
06754:  MOVFF  233,A62
06758:  MOVLW  37
0675A:  MOVLB  A
0675C:  MOVWF  x63
0675E:  MOVLB  0
06760:  CALL   2126
06764:  MOVFF  232,A62
06768:  MOVLW  37
0676A:  MOVLB  A
0676C:  MOVWF  x63
0676E:  MOVLB  0
06770:  CALL   2126
06774:  MOVLW  0D
06776:  BTFSS  FA6.6
06778:  GOTO   6776
0677C:  MOVLB  E
0677E:  MOVWF  xF9
06780:  MOVLW  0A
06782:  MOVLB  0
06784:  BTFSS  FA6.6
06786:  GOTO   6784
0678A:  MOVLB  E
0678C:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
0678E:  MOVLW  24
06790:  MOVWF  FF6
06792:  MOVLW  1A
06794:  MOVWF  FF7
06796:  MOVLW  00
06798:  MOVWF  FF8
0679A:  MOVLW  0E
0679C:  MOVLB  3
0679E:  MOVWF  x16
067A0:  MOVLB  0
067A2:  CALL   1F12
067A6:  MOVFF  231,A62
067AA:  MOVLW  37
067AC:  MOVLB  A
067AE:  MOVWF  x63
067B0:  MOVLB  0
067B2:  CALL   2126
067B6:  MOVFF  230,A62
067BA:  MOVLW  37
067BC:  MOVLB  A
067BE:  MOVWF  x63
067C0:  MOVLB  0
067C2:  CALL   2126
067C6:  MOVLW  0D
067C8:  BTFSS  FA6.6
067CA:  GOTO   67C8
067CE:  MOVLB  E
067D0:  MOVWF  xF9
067D2:  MOVLW  0A
067D4:  MOVLB  0
067D6:  BTFSS  FA6.6
067D8:  GOTO   67D6
067DC:  MOVLB  E
067DE:  MOVWF  xF9
....................    
....................    piclog_make(flash_param.id, 0x00);
067E0:  MOVFF  22F,284
067E4:  MOVLB  2
067E6:  CLRF   x85
067E8:  MOVLB  0
067EA:  CALL   4C1A
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
067EE:  MOVLB  2
067F0:  CLRF   x36
067F2:  CLRF   x37
067F4:  CLRF   x38
067F6:  CLRF   x39
067F8:  CLRF   x3A
067FA:  CLRF   x3B
067FC:  CLRF   x3C
067FE:  CLRF   x3D
06800:  CLRF   x3E
06802:  CLRF   x3F
06804:  CLRF   x40
06806:  CLRF   x41
06808:  CLRF   x42
0680A:  CLRF   x43
0680C:  CLRF   x44
0680E:  CLRF   x45
06810:  CLRF   x46
06812:  CLRF   x47
06814:  CLRF   x48
06816:  CLRF   x49
06818:  CLRF   x4A
0681A:  CLRF   x4B
0681C:  CLRF   x4C
0681E:  CLRF   x4D
06820:  CLRF   x4E
06822:  CLRF   x4F
06824:  CLRF   x50
06826:  CLRF   x51
06828:  CLRF   x52
0682A:  CLRF   x53
0682C:  CLRF   x54
0682E:  CLRF   x55
06830:  CLRF   x56
06832:  CLRF   x57
06834:  CLRF   x58
06836:  CLRF   x59
06838:  CLRF   x5A
0683A:  CLRF   x5B
0683C:  CLRF   x5C
0683E:  CLRF   x5D
06840:  CLRF   x5E
06842:  CLRF   x5F
06844:  CLRF   x60
06846:  CLRF   x61
06848:  CLRF   x62
0684A:  CLRF   x63
0684C:  CLRF   x64
0684E:  CLRF   x65
06850:  CLRF   x66
06852:  CLRF   x67
06854:  CLRF   x68
06856:  CLRF   x69
06858:  CLRF   x6A
0685A:  CLRF   x6B
0685C:  CLRF   x6C
0685E:  CLRF   x6D
06860:  CLRF   x6E
06862:  CLRF   x6F
06864:  CLRF   x70
06866:  CLRF   x71
06868:  CLRF   x72
0686A:  CLRF   x73
0686C:  CLRF   x74
0686E:  CLRF   x75
....................    unsigned int32 read_address;
....................    fprintf(PC, "READ DATA\r\n");
06870:  MOVLW  3A
06872:  MOVWF  FF6
06874:  MOVLW  1A
06876:  MOVWF  FF7
06878:  MOVLW  00
0687A:  MOVWF  FF8
0687C:  MOVLB  0
0687E:  CALL   1EDC
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
06882:  MOVFF  115,2D4
06886:  MOVFF  114,2D3
0688A:  MOVFF  113,2D2
0688E:  MOVFF  112,2D1
06892:  CALL   2A3E
06896:  MOVF   01,F
06898:  BTFSS  FD8.2
0689A:  GOTO   68C0
....................       fprintf(PC, "Mission Flash is not connected\r\n");
0689E:  MOVLW  46
068A0:  MOVWF  FF6
068A2:  MOVLW  1A
068A4:  MOVWF  FF7
068A6:  MOVLW  00
068A8:  MOVWF  FF8
068AA:  CALL   1EDC
....................       piclog_make(flash_param.id, PICLOG_PARAM_END);
068AE:  MOVFF  22F,284
068B2:  MOVLB  2
068B4:  SETF   x85
068B6:  MOVLB  0
068B8:  CALL   4C1A
....................       return; // FIX: 接続失敗時終了
068BC:  GOTO   6D04
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
068C0:  MOVLB  2
068C2:  CLRF   x7D
068C4:  CLRF   x7C
068C6:  CLRF   x7B
068C8:  CLRF   x7A
068CA:  MOVLB  0
068CC:  MOVLB  2
068CE:  MOVF   x7D,F
068D0:  BTFSC  FD8.2
068D2:  BRA    68DA
068D4:  MOVLB  0
068D6:  GOTO   6CE6
068DA:  MOVLB  0
068DC:  MOVLB  2
068DE:  MOVF   x7C,F
068E0:  BTFSC  FD8.2
068E2:  BRA    68EA
068E4:  MOVLB  0
068E6:  GOTO   6CE6
068EA:  MOVLB  0
068EC:  MOVLB  2
068EE:  MOVF   x7B,W
068F0:  SUBWF  x31,W
068F2:  BTFSC  FD8.0
068F4:  BRA    68FC
068F6:  MOVLB  0
068F8:  GOTO   6CE6
068FC:  MOVLB  0
068FE:  BTFSS  FD8.2
06900:  GOTO   6916
06904:  MOVLB  2
06906:  MOVF   x30,W
06908:  SUBWF  x7A,W
0690A:  BTFSS  FD8.0
0690C:  BRA    6914
0690E:  MOVLB  0
06910:  GOTO   6CE6
06914:  MOVLB  0
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
06916:  MOVLB  2
06918:  RLCF   x7A,W
0691A:  MOVWF  00
0691C:  RLCF   x7B,W
0691E:  MOVWF  01
06920:  RLCF   x7C,W
06922:  MOVWF  02
06924:  RLCF   x7D,W
06926:  MOVWF  03
06928:  RLCF   00,F
0692A:  RLCF   01,F
0692C:  RLCF   02,F
0692E:  RLCF   03,F
06930:  RLCF   00,F
06932:  RLCF   01,F
06934:  RLCF   02,F
06936:  RLCF   03,F
06938:  RLCF   00,F
0693A:  RLCF   01,F
0693C:  RLCF   02,F
0693E:  RLCF   03,F
06940:  RLCF   00,F
06942:  RLCF   01,F
06944:  RLCF   02,F
06946:  RLCF   03,F
06948:  RLCF   00,F
0694A:  RLCF   01,F
0694C:  RLCF   02,F
0694E:  RLCF   03,F
06950:  MOVLW  C0
06952:  ANDWF  00,F
06954:  MOVF   00,W
06956:  ADDWF  x32,W
06958:  MOVWF  x76
0695A:  MOVF   01,W
0695C:  ADDWFC x33,W
0695E:  MOVWF  x77
06960:  MOVF   02,W
06962:  ADDWFC x34,W
06964:  MOVWF  x78
06966:  MOVF   03,W
06968:  ADDWFC x35,W
0696A:  MOVWF  x79
....................       // 終端チェック
....................       if(read_address > MISF_END){
0696C:  MOVF   x79,F
0696E:  BTFSC  FD8.2
06970:  BRA    6978
06972:  MOVLB  0
06974:  GOTO   69A6
06978:  MOVLB  0
0697A:  MOVLB  2
0697C:  MOVF   x78,W
0697E:  SUBLW  BB
06980:  BTFSS  FD8.0
06982:  BRA    698A
06984:  MOVLB  0
06986:  GOTO   6A6E
0698A:  MOVLB  0
0698C:  XORLW  FF
0698E:  BTFSS  FD8.2
06990:  GOTO   69A6
06994:  MOVLB  2
06996:  MOVF   x77,W
06998:  SUBLW  0F
0699A:  BTFSS  FD8.0
0699C:  BRA    69A4
0699E:  MOVLB  0
069A0:  GOTO   6A6E
069A4:  MOVLB  0
....................          fprintf(PC, "[FLASH] Read address 0x%08LX exceeds device end 0x%08LX -> stop\r\n", read_address, (unsigned int32)MISF_END);
069A6:  MOVLW  68
069A8:  MOVWF  FF6
069AA:  MOVLW  1A
069AC:  MOVWF  FF7
069AE:  MOVLW  00
069B0:  MOVWF  FF8
069B2:  MOVLW  17
069B4:  MOVLB  3
069B6:  MOVWF  x16
069B8:  MOVLB  0
069BA:  CALL   1F12
069BE:  MOVFF  279,A62
069C2:  MOVLW  37
069C4:  MOVLB  A
069C6:  MOVWF  x63
069C8:  MOVLB  0
069CA:  CALL   2126
069CE:  MOVFF  278,A62
069D2:  MOVLW  37
069D4:  MOVLB  A
069D6:  MOVWF  x63
069D8:  MOVLB  0
069DA:  CALL   2126
069DE:  MOVFF  277,A62
069E2:  MOVLW  37
069E4:  MOVLB  A
069E6:  MOVWF  x63
069E8:  MOVLB  0
069EA:  CALL   2126
069EE:  MOVFF  276,A62
069F2:  MOVLW  37
069F4:  MOVLB  A
069F6:  MOVWF  x63
069F8:  MOVLB  0
069FA:  CALL   2126
069FE:  MOVLW  84
06A00:  MOVWF  FF6
06A02:  MOVLW  1A
06A04:  MOVWF  FF7
06A06:  MOVLW  00
06A08:  MOVWF  FF8
06A0A:  MOVLW  16
06A0C:  MOVLB  3
06A0E:  MOVWF  x16
06A10:  MOVLB  0
06A12:  CALL   1F12
06A16:  MOVLB  A
06A18:  CLRF   x62
06A1A:  MOVLW  37
06A1C:  MOVWF  x63
06A1E:  MOVLB  0
06A20:  CALL   2126
06A24:  MOVLW  BC
06A26:  MOVLB  A
06A28:  MOVWF  x62
06A2A:  MOVLW  37
06A2C:  MOVWF  x63
06A2E:  MOVLB  0
06A30:  CALL   2126
06A34:  MOVLW  0F
06A36:  MOVLB  A
06A38:  MOVWF  x62
06A3A:  MOVLW  37
06A3C:  MOVWF  x63
06A3E:  MOVLB  0
06A40:  CALL   2126
06A44:  MOVLB  A
06A46:  SETF   x62
06A48:  MOVLW  37
06A4A:  MOVWF  x63
06A4C:  MOVLB  0
06A4E:  CALL   2126
06A52:  MOVLW  9F
06A54:  MOVWF  FF6
06A56:  MOVLW  1A
06A58:  MOVWF  FF7
06A5A:  MOVLW  00
06A5C:  MOVWF  FF8
06A5E:  MOVLW  0A
06A60:  MOVLB  3
06A62:  MOVWF  x16
06A64:  MOVLB  0
06A66:  CALL   1F12
....................          break;
06A6A:  GOTO   6CE6
....................       }
....................       if(read_address + (PACKET_SIZE - 1) > MISF_END){
06A6E:  MOVLW  3F
06A70:  MOVLB  2
06A72:  ADDWF  x76,W
06A74:  MOVWF  x84
06A76:  MOVLW  00
06A78:  ADDWFC x77,W
06A7A:  MOVWF  x85
06A7C:  MOVLW  00
06A7E:  ADDWFC x78,W
06A80:  MOVWF  x86
06A82:  MOVLW  00
06A84:  ADDWFC x79,W
06A86:  MOVWF  x87
06A88:  MOVF   x87,F
06A8A:  BTFSC  FD8.2
06A8C:  BRA    6A94
06A8E:  MOVLB  0
06A90:  GOTO   6AC2
06A94:  MOVLB  0
06A96:  MOVLB  2
06A98:  MOVF   x86,W
06A9A:  SUBLW  BB
06A9C:  BTFSS  FD8.0
06A9E:  BRA    6AA6
06AA0:  MOVLB  0
06AA2:  GOTO   6C24
06AA6:  MOVLB  0
06AA8:  XORLW  FF
06AAA:  BTFSS  FD8.2
06AAC:  GOTO   6AC2
06AB0:  MOVLB  2
06AB2:  MOVF   x85,W
06AB4:  SUBLW  0F
06AB6:  BTFSS  FD8.0
06AB8:  BRA    6AC0
06ABA:  MOVLB  0
06ABC:  GOTO   6C24
06AC0:  MOVLB  0
....................          unsigned int32 remain = (MISF_END - read_address) + 1;
06AC2:  MOVLW  FF
06AC4:  BSF    FD8.0
06AC6:  MOVLB  2
06AC8:  SUBFWB x76,W
06ACA:  MOVWF  x84
06ACC:  MOVLW  0F
06ACE:  SUBFWB x77,W
06AD0:  MOVWF  x85
06AD2:  MOVLW  BC
06AD4:  SUBFWB x78,W
06AD6:  MOVWF  x86
06AD8:  MOVLW  00
06ADA:  SUBFWB x79,W
06ADC:  MOVWF  x87
06ADE:  MOVLW  01
06AE0:  ADDWF  x84,W
06AE2:  MOVWF  x7E
06AE4:  MOVLW  00
06AE6:  ADDWFC x85,W
06AE8:  MOVWF  x7F
06AEA:  MOVLW  00
06AEC:  ADDWFC x86,W
06AEE:  MOVWF  x80
06AF0:  MOVLW  00
06AF2:  ADDWFC x87,W
06AF4:  MOVWF  x81
06AF6:  MOVLB  0
....................          fprintf(PC, "[FLASH] End reached. Partial read %lu bytes.\r\n", remain);
06AF8:  MOVLW  AA
06AFA:  MOVWF  FF6
06AFC:  MOVLW  1A
06AFE:  MOVWF  FF7
06B00:  MOVLW  00
06B02:  MOVWF  FF8
06B04:  MOVLW  22
06B06:  MOVLB  3
06B08:  MOVWF  x16
06B0A:  MOVLB  0
06B0C:  CALL   1F12
06B10:  MOVLW  41
06B12:  MOVWF  FE9
06B14:  MOVFF  281,2DE
06B18:  MOVFF  280,2DD
06B1C:  MOVFF  27F,2DC
06B20:  MOVFF  27E,2DB
06B24:  CALL   5DF6
06B28:  MOVLW  CF
06B2A:  MOVWF  FF6
06B2C:  MOVLW  1A
06B2E:  MOVWF  FF7
06B30:  MOVLW  00
06B32:  MOVWF  FF8
06B34:  MOVLW  09
06B36:  MOVLB  3
06B38:  MOVWF  x16
06B3A:  MOVLB  0
06B3C:  CALL   1F12
....................          read_data_bytes(mis_fm, read_address, readdata, remain);
06B40:  MOVFF  115,B4A
06B44:  MOVFF  114,B49
06B48:  MOVFF  113,B48
06B4C:  MOVFF  112,B47
06B50:  MOVFF  279,B4E
06B54:  MOVFF  278,B4D
06B58:  MOVFF  277,B4C
06B5C:  MOVFF  276,B4B
06B60:  MOVLW  02
06B62:  MOVLB  B
06B64:  MOVWF  x50
06B66:  MOVLW  36
06B68:  MOVWF  x4F
06B6A:  MOVFF  281,B54
06B6E:  MOVFF  280,B53
06B72:  MOVFF  27F,B52
06B76:  MOVFF  27E,B51
06B7A:  MOVLB  0
06B7C:  CALL   2B2A
....................          for (unsigned int8 bytecount = 0; bytecount < remain; bytecount++)
06B80:  MOVLB  2
06B82:  CLRF   x82
06B84:  MOVLB  0
06B86:  MOVLB  2
06B88:  MOVF   x81,F
06B8A:  BTFSC  FD8.2
06B8C:  BRA    6B94
06B8E:  MOVLB  0
06B90:  GOTO   6BC8
06B94:  MOVLB  0
06B96:  MOVLB  2
06B98:  MOVF   x80,F
06B9A:  BTFSC  FD8.2
06B9C:  BRA    6BA4
06B9E:  MOVLB  0
06BA0:  GOTO   6BC8
06BA4:  MOVLB  0
06BA6:  MOVLB  2
06BA8:  MOVF   x7F,F
06BAA:  BTFSC  FD8.2
06BAC:  BRA    6BB4
06BAE:  MOVLB  0
06BB0:  GOTO   6BC8
06BB4:  MOVLB  0
06BB6:  MOVLB  2
06BB8:  MOVF   x7E,W
06BBA:  SUBWF  x82,W
06BBC:  BTFSS  FD8.0
06BBE:  BRA    6BC6
06BC0:  MOVLB  0
06BC2:  GOTO   6C04
06BC6:  MOVLB  0
....................             fprintf(PC, "%02X ", readdata[bytecount]);
06BC8:  CLRF   03
06BCA:  MOVLB  2
06BCC:  MOVF   x82,W
06BCE:  ADDLW  36
06BD0:  MOVWF  FE9
06BD2:  MOVLW  02
06BD4:  ADDWFC 03,W
06BD6:  MOVWF  FEA
06BD8:  MOVFF  FEF,284
06BDC:  MOVFF  284,A62
06BE0:  MOVLW  37
06BE2:  MOVLB  A
06BE4:  MOVWF  x63
06BE6:  MOVLB  0
06BE8:  CALL   2126
06BEC:  MOVLW  20
06BEE:  BTFSS  FA6.6
06BF0:  GOTO   6BEE
06BF4:  MOVLB  E
06BF6:  MOVWF  xF9
06BF8:  MOVLB  0
06BFA:  MOVLB  2
06BFC:  INCF   x82,F
06BFE:  MOVLB  0
06C00:  GOTO   6B86
....................          fprintf(PC, "\r\n");
06C04:  MOVLW  0D
06C06:  BTFSS  FA6.6
06C08:  GOTO   6C06
06C0C:  MOVLB  E
06C0E:  MOVWF  xF9
06C10:  MOVLW  0A
06C12:  MOVLB  0
06C14:  BTFSS  FA6.6
06C16:  GOTO   6C14
06C1A:  MOVLB  E
06C1C:  MOVWF  xF9
....................          break;
06C1E:  MOVLB  0
06C20:  GOTO   6CE6
....................       }
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
06C24:  MOVFF  115,B4A
06C28:  MOVFF  114,B49
06C2C:  MOVFF  113,B48
06C30:  MOVFF  112,B47
06C34:  MOVFF  279,B4E
06C38:  MOVFF  278,B4D
06C3C:  MOVFF  277,B4C
06C40:  MOVFF  276,B4B
06C44:  MOVLW  02
06C46:  MOVLB  B
06C48:  MOVWF  x50
06C4A:  MOVLW  36
06C4C:  MOVWF  x4F
06C4E:  CLRF   x54
06C50:  CLRF   x53
06C52:  CLRF   x52
06C54:  MOVLW  40
06C56:  MOVWF  x51
06C58:  MOVLB  0
06C5A:  CALL   2B2A
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
06C5E:  MOVLB  2
06C60:  CLRF   x83
06C62:  MOVLB  0
06C64:  MOVLB  2
06C66:  MOVF   x83,W
06C68:  SUBLW  3F
06C6A:  BTFSC  FD8.0
06C6C:  BRA    6C74
06C6E:  MOVLB  0
06C70:  GOTO   6CB2
06C74:  MOVLB  0
....................          fprintf(PC,"%02X ",readdata[bytecount]);
06C76:  CLRF   03
06C78:  MOVLB  2
06C7A:  MOVF   x83,W
06C7C:  ADDLW  36
06C7E:  MOVWF  FE9
06C80:  MOVLW  02
06C82:  ADDWFC 03,W
06C84:  MOVWF  FEA
06C86:  MOVFF  FEF,284
06C8A:  MOVFF  284,A62
06C8E:  MOVLW  37
06C90:  MOVLB  A
06C92:  MOVWF  x63
06C94:  MOVLB  0
06C96:  CALL   2126
06C9A:  MOVLW  20
06C9C:  BTFSS  FA6.6
06C9E:  GOTO   6C9C
06CA2:  MOVLB  E
06CA4:  MOVWF  xF9
06CA6:  MOVLB  0
06CA8:  MOVLB  2
06CAA:  INCF   x83,F
06CAC:  MOVLB  0
06CAE:  GOTO   6C64
....................       }
....................       fprintf(PC,"\r\n");
06CB2:  MOVLW  0D
06CB4:  BTFSS  FA6.6
06CB6:  GOTO   6CB4
06CBA:  MOVLB  E
06CBC:  MOVWF  xF9
06CBE:  MOVLW  0A
06CC0:  MOVLB  0
06CC2:  BTFSS  FA6.6
06CC4:  GOTO   6CC2
06CC8:  MOVLB  E
06CCA:  MOVWF  xF9
06CCC:  MOVLB  0
06CCE:  MOVLW  01
06CD0:  MOVLB  2
06CD2:  ADDWF  x7A,F
06CD4:  BTFSC  FD8.0
06CD6:  INCF   x7B,F
06CD8:  BTFSC  FD8.2
06CDA:  INCF   x7C,F
06CDC:  BTFSC  FD8.2
06CDE:  INCF   x7D,F
06CE0:  MOVLB  0
06CE2:  GOTO   68CC
....................    }
....................    piclog_make(flash_param.id, PICLOG_PARAM_END); // Log the end of the command execution
06CE6:  MOVFF  22F,284
06CEA:  MOVLB  2
06CEC:  SETF   x85
06CEE:  MOVLB  0
06CF0:  CALL   4C1A
....................    fprintf(PC, "End Flash Read\r\n");
06CF4:  MOVLW  DA
06CF6:  MOVWF  FF6
06CF8:  MOVLW  1A
06CFA:  MOVWF  FF7
06CFC:  MOVLW  00
06CFE:  MOVWF  FF8
06D00:  CALL   1EDC
06D04:  GOTO   D75A (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
06D08:  MOVLW  EC
06D0A:  MOVWF  FF6
06D0C:  MOVLW  1A
06D0E:  MOVWF  FF7
06D10:  MOVLW  00
06D12:  MOVWF  FF8
06D14:  CALL   1EDC
....................    flash_setting(mis_fm);
06D18:  MOVFF  115,33B
06D1C:  MOVFF  114,33A
06D20:  MOVFF  113,339
06D24:  MOVFF  112,338
06D28:  CALL   64FE
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
06D2C:  MOVLB  2
06D2E:  CLRF   x32
06D30:  CLRF   x31
06D32:  CLRF   x30
06D34:  CLRF   x2F
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
06D36:  MOVFF  115,B4A
06D3A:  MOVFF  114,B49
06D3E:  MOVFF  113,B48
06D42:  MOVFF  112,B47
06D46:  MOVFF  232,B4E
06D4A:  MOVFF  231,B4D
06D4E:  MOVFF  230,B4C
06D52:  MOVFF  22F,B4B
06D56:  MOVLW  02
06D58:  MOVLB  B
06D5A:  MOVWF  x50
06D5C:  MOVLW  33
06D5E:  MOVWF  x4F
06D60:  CLRF   x54
06D62:  CLRF   x53
06D64:  CLRF   x52
06D66:  MOVLW  04
06D68:  MOVWF  x51
06D6A:  MOVLB  0
06D6C:  CALL   2B2A
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
06D70:  MOVLW  08
06D72:  MOVWF  FF6
06D74:  MOVLW  1B
06D76:  MOVWF  FF7
06D78:  MOVLW  00
06D7A:  MOVWF  FF8
06D7C:  MOVLW  0B
06D7E:  MOVLB  3
06D80:  MOVWF  x16
06D82:  MOVLB  0
06D84:  CALL   1F12
06D88:  MOVFF  233,A62
06D8C:  MOVLW  37
06D8E:  MOVLB  A
06D90:  MOVWF  x63
06D92:  MOVLB  0
06D94:  CALL   2126
06D98:  MOVLW  20
06D9A:  BTFSS  FA6.6
06D9C:  GOTO   6D9A
06DA0:  MOVLB  E
06DA2:  MOVWF  xF9
06DA4:  MOVFF  234,A62
06DA8:  MOVLW  37
06DAA:  MOVLB  A
06DAC:  MOVWF  x63
06DAE:  MOVLB  0
06DB0:  CALL   2126
06DB4:  MOVLW  20
06DB6:  BTFSS  FA6.6
06DB8:  GOTO   6DB6
06DBC:  MOVLB  E
06DBE:  MOVWF  xF9
06DC0:  MOVFF  235,A62
06DC4:  MOVLW  37
06DC6:  MOVLB  A
06DC8:  MOVWF  x63
06DCA:  MOVLB  0
06DCC:  CALL   2126
06DD0:  MOVLW  20
06DD2:  BTFSS  FA6.6
06DD4:  GOTO   6DD2
06DD8:  MOVLB  E
06DDA:  MOVWF  xF9
06DDC:  MOVFF  236,A62
06DE0:  MOVLW  37
06DE2:  MOVLB  A
06DE4:  MOVWF  x63
06DE6:  MOVLB  0
06DE8:  CALL   2126
06DEC:  MOVLW  0D
06DEE:  BTFSS  FA6.6
06DF0:  GOTO   6DEE
06DF4:  MOVLB  E
06DF6:  MOVWF  xF9
06DF8:  MOVLW  0A
06DFA:  MOVLB  0
06DFC:  BTFSS  FA6.6
06DFE:  GOTO   6DFC
06E02:  MOVLB  E
06E04:  MOVWF  xF9
....................    fprintf(PC, "End Flash Read Address\r\n");
06E06:  MOVLW  2A
06E08:  MOVWF  FF6
06E0A:  MOVLW  1B
06E0C:  MOVWF  FF7
06E0E:  MOVLW  00
06E10:  MOVWF  FF8
06E12:  MOVLB  0
06E14:  CALL   1EDC
06E18:  GOTO   D76A (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase and Reset\r\n");
*
0700C:  MOVLW  44
0700E:  MOVWF  FF6
07010:  MOVLW  1B
07012:  MOVWF  FF7
07014:  MOVLW  00
07016:  MOVWF  FF8
07018:  CALL   1EDC
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
0701C:  MOVLB  2
0701E:  MOVF   x2D,W
07020:  MOVWF  FE9
07022:  MOVF   x2E,W
07024:  MOVWF  FEA
07026:  MOVFF  FEF,22F
0702A:  MOVFF  22F,284
0702E:  CLRF   x85
07030:  MOVLB  0
07032:  CALL   4C1A
.................... 
....................    mode_misf_erase_all(parameter); // Erase all flash memory
07036:  MOVFF  22E,230
0703A:  MOVFF  22D,22F
0703E:  CALL   5440
....................    mode_misf_address_reset(parameter); // Reset the address area
07042:  MOVFF  22E,230
07046:  MOVFF  22D,22F
0704A:  GOTO   6E1C
.................... 
....................    fprintf(PC, "End Flash Erase and Reset\r\n");
0704E:  MOVLW  62
07050:  MOVWF  FF6
07052:  MOVLW  1B
07054:  MOVWF  FF7
07056:  MOVLW  00
07058:  MOVWF  FF8
0705A:  CALL   1EDC
0705E:  GOTO   D77A (RETURN)
.................... }
.................... // ========================== SMF Command ============================
.................... void mode_smf_copy(int8 parameter[])
.................... {
....................    printf("Start Flash SMF Copy\r\n");
07062:  MOVLW  7E
07064:  MOVWF  FF6
07066:  MOVLW  1B
07068:  MOVWF  FF7
0706A:  MOVLW  00
0706C:  MOVWF  FF8
0706E:  CALL   1EDC
....................    flash_setting(mis_fm);
07072:  MOVFF  115,33B
07076:  MOVFF  114,33A
0707A:  MOVFF  113,339
0707E:  MOVFF  112,338
07082:  CALL   64FE
....................    flash_setting(smf);
07086:  MOVFF  119,33B
0708A:  MOVFF  118,33A
0708E:  MOVFF  117,339
07092:  MOVFF  116,338
07096:  CALL   64FE
....................    
....................    // 統合管理システムを使用したコピー操作
....................    int8 mission_id = parameter[0];
....................    
....................    // 未コピーデータの自動転送をキューに追加
....................    //enqueue_auto_transfer(mission_id);
....................    
....................    // Example copy operation with integration system
....................    int32 src_address = 0x00000000;
....................    int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
0709A:  MOVLB  2
0709C:  MOVF   x2D,W
0709E:  MOVWF  FE9
070A0:  MOVF   x2E,W
070A2:  MOVWF  FEA
070A4:  MOVFF  FEF,22F
070A8:  CLRF   x33
070AA:  CLRF   x32
070AC:  CLRF   x31
070AE:  CLRF   x30
070B0:  CLRF   x37
070B2:  CLRF   x36
070B4:  MOVLW  10
070B6:  MOVWF  x35
070B8:  CLRF   x34
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
070BA:  MOVFF  115,B4A
070BE:  MOVFF  114,B49
070C2:  MOVFF  113,B48
070C6:  MOVFF  112,B47
070CA:  MOVFF  233,B4E
070CE:  MOVFF  232,B4D
070D2:  MOVFF  231,B4C
070D6:  MOVFF  230,B4B
070DA:  MOVLW  02
070DC:  MOVLB  B
070DE:  MOVWF  x50
070E0:  MOVLW  38
070E2:  MOVWF  x4F
070E4:  CLRF   x54
070E6:  CLRF   x53
070E8:  MOVLW  01
070EA:  MOVWF  x52
070EC:  CLRF   x51
070EE:  MOVLB  0
070F0:  CALL   2B2A
....................    write_data_bytes(smf, dest_address, read_data, 256);
070F4:  MOVFF  119,B8E
070F8:  MOVFF  118,B8D
070FC:  MOVFF  117,B8C
07100:  MOVFF  116,B8B
07104:  MOVFF  237,B92
07108:  MOVFF  236,B91
0710C:  MOVFF  235,B90
07110:  MOVFF  234,B8F
07114:  MOVLW  02
07116:  MOVLB  B
07118:  MOVWF  x94
0711A:  MOVLW  38
0711C:  MOVWF  x93
0711E:  MOVLW  01
07120:  MOVWF  x96
07122:  CLRF   x95
07124:  MOVLB  0
07126:  CALL   3B1A
....................    
....................    // 転送完了後のカウンタ更新
....................    //complete_transfer_and_update_counter(mission_id, 256);
....................    
....................    printf("End Flash SMF Copy\r\n");
0712A:  MOVLW  96
0712C:  MOVWF  FF6
0712E:  MOVLW  1B
07130:  MOVWF  FF7
07132:  MOVLW  00
07134:  MOVWF  FF8
07136:  CALL   1EDC
0713A:  GOTO   D78A (RETURN)
.................... }
.................... 
.................... 
.................... void mode_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
0713E:  MOVLW  AC
07140:  MOVWF  FF6
07142:  MOVLW  1B
07144:  MOVWF  FF7
07146:  MOVLW  00
07148:  MOVWF  FF8
0714A:  CALL   1EDC
....................    unsigned int32 read_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
....................    unsigned int16 read_packetnum = 
....................       ((unsigned int16)parameter[6] << 8) |
....................       ((unsigned int16)parameter[7]);
....................    
....................    unsigned int8 read_data[PACKET_SIZE];
0714E:  MOVLW  01
07150:  MOVLB  2
07152:  ADDWF  x2D,W
07154:  MOVWF  FE9
07156:  MOVLW  00
07158:  ADDWFC x2E,W
0715A:  MOVWF  FEA
0715C:  MOVF   FEF,W
0715E:  CLRF   x79
07160:  CLRF   x78
07162:  CLRF   x77
07164:  MOVWF  x76
07166:  MOVFF  276,279
0716A:  CLRF   x76
0716C:  CLRF   x77
0716E:  CLRF   x78
07170:  MOVLW  02
07172:  ADDWF  x2D,W
07174:  MOVWF  FE9
07176:  MOVLW  00
07178:  ADDWFC x2E,W
0717A:  MOVWF  FEA
0717C:  MOVF   FEF,W
0717E:  CLRF   x7E
07180:  CLRF   x7D
07182:  CLRF   x7C
07184:  MOVWF  x7B
07186:  MOVFF  27C,03
0718A:  MOVFF  27B,02
0718E:  CLRF   00
07190:  CLRF   01
07192:  MOVF   00,W
07194:  IORWF  x76,F
07196:  MOVF   01,W
07198:  IORWF  x77,F
0719A:  MOVF   02,W
0719C:  IORWF  x78,F
0719E:  MOVF   03,W
071A0:  IORWF  x79,F
071A2:  MOVLW  03
071A4:  ADDWF  x2D,W
071A6:  MOVWF  FE9
071A8:  MOVLW  00
071AA:  ADDWFC x2E,W
071AC:  MOVWF  FEA
071AE:  MOVF   FEF,W
071B0:  CLRF   x7E
071B2:  CLRF   x7D
071B4:  CLRF   x7C
071B6:  MOVWF  x7B
071B8:  MOVFF  27D,03
071BC:  MOVFF  27C,02
071C0:  MOVFF  27B,01
071C4:  CLRF   00
071C6:  MOVF   00,W
071C8:  IORWF  x76,F
071CA:  MOVF   01,W
071CC:  IORWF  x77,F
071CE:  MOVF   02,W
071D0:  IORWF  x78,F
071D2:  MOVF   03,W
071D4:  IORWF  x79,F
071D6:  MOVLW  04
071D8:  ADDWF  x2D,W
071DA:  MOVWF  FE9
071DC:  MOVLW  00
071DE:  ADDWFC x2E,W
071E0:  MOVWF  FEA
071E2:  MOVF   FEF,W
071E4:  MOVWF  00
071E6:  CLRF   01
071E8:  CLRF   02
071EA:  CLRF   03
071EC:  MOVF   00,W
071EE:  IORWF  x76,W
071F0:  MOVWF  x2F
071F2:  MOVF   01,W
071F4:  IORWF  x77,W
071F6:  MOVWF  x30
071F8:  MOVF   02,W
071FA:  IORWF  x78,W
071FC:  MOVWF  x31
071FE:  MOVF   03,W
07200:  IORWF  x79,W
07202:  MOVWF  x32
07204:  MOVLW  06
07206:  ADDWF  x2D,W
07208:  MOVWF  FE9
0720A:  MOVLW  00
0720C:  ADDWFC x2E,W
0720E:  MOVWF  FEA
07210:  MOVF   FEF,W
07212:  CLRF   x77
07214:  MOVWF  x76
07216:  MOVFF  276,277
0721A:  CLRF   x76
0721C:  MOVLW  07
0721E:  ADDWF  x2D,W
07220:  MOVWF  FE9
07222:  MOVLW  00
07224:  ADDWFC x2E,W
07226:  MOVWF  FEA
07228:  MOVF   FEF,W
0722A:  CLRF   03
0722C:  IORWF  x76,W
0722E:  MOVWF  x33
07230:  MOVF   03,W
07232:  IORWF  x77,W
07234:  MOVWF  x34
.................... 
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", read_address);
07236:  MOVLW  C4
07238:  MOVWF  FF6
0723A:  MOVLW  1B
0723C:  MOVWF  FF7
0723E:  MOVLW  00
07240:  MOVWF  FF8
07242:  MOVLW  0E
07244:  MOVLB  3
07246:  MOVWF  x16
07248:  MOVLB  0
0724A:  CALL   1F12
0724E:  MOVFF  232,A62
07252:  MOVLW  37
07254:  MOVLB  A
07256:  MOVWF  x63
07258:  MOVLB  0
0725A:  CALL   2126
0725E:  MOVFF  231,A62
07262:  MOVLW  37
07264:  MOVLB  A
07266:  MOVWF  x63
07268:  MOVLB  0
0726A:  CALL   2126
0726E:  MOVFF  230,A62
07272:  MOVLW  37
07274:  MOVLB  A
07276:  MOVWF  x63
07278:  MOVLB  0
0727A:  CALL   2126
0727E:  MOVFF  22F,A62
07282:  MOVLW  37
07284:  MOVLB  A
07286:  MOVWF  x63
07288:  MOVLB  0
0728A:  CALL   2126
0728E:  MOVLW  0D
07290:  BTFSS  FA6.6
07292:  GOTO   7290
07296:  MOVLB  E
07298:  MOVWF  xF9
0729A:  MOVLW  0A
0729C:  MOVLB  0
0729E:  BTFSS  FA6.6
072A0:  GOTO   729E
072A4:  MOVLB  E
072A6:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", read_packetnum);
072A8:  MOVLW  DA
072AA:  MOVWF  FF6
072AC:  MOVLW  1B
072AE:  MOVWF  FF7
072B0:  MOVLW  00
072B2:  MOVWF  FF8
072B4:  MOVLW  0E
072B6:  MOVLB  3
072B8:  MOVWF  x16
072BA:  MOVLB  0
072BC:  CALL   1F12
072C0:  MOVFF  234,A62
072C4:  MOVLW  37
072C6:  MOVLB  A
072C8:  MOVWF  x63
072CA:  MOVLB  0
072CC:  CALL   2126
072D0:  MOVFF  233,A62
072D4:  MOVLW  37
072D6:  MOVLB  A
072D8:  MOVWF  x63
072DA:  MOVLB  0
072DC:  CALL   2126
072E0:  MOVLW  0D
072E2:  BTFSS  FA6.6
072E4:  GOTO   72E2
072E8:  MOVLB  E
072EA:  MOVWF  xF9
072EC:  MOVLW  0A
072EE:  MOVLB  0
072F0:  BTFSS  FA6.6
072F2:  GOTO   72F0
072F6:  MOVLB  E
072F8:  MOVWF  xF9
....................    fprintf(PC, "Read Data\r\n");
072FA:  MOVLW  F0
072FC:  MOVWF  FF6
072FE:  MOVLW  1B
07300:  MOVWF  FF7
07302:  MOVLW  00
07304:  MOVWF  FF8
07306:  MOVLB  0
07308:  CALL   1EDC
.................... 
....................    while (read_packetnum > 0) {
0730C:  MOVLB  2
0730E:  MOVF   x33,F
07310:  BTFSC  FD8.2
07312:  BRA    731A
07314:  MOVLB  0
07316:  GOTO   732C
0731A:  MOVLB  0
0731C:  MOVLB  2
0731E:  MOVF   x34,F
07320:  BTFSS  FD8.2
07322:  BRA    732A
07324:  MOVLB  0
07326:  GOTO   73F4
0732A:  MOVLB  0
....................       read_data_bytes(smf, read_address, read_data, PACKET_SIZE);
0732C:  MOVFF  119,B4A
07330:  MOVFF  118,B49
07334:  MOVFF  117,B48
07338:  MOVFF  116,B47
0733C:  MOVFF  232,B4E
07340:  MOVFF  231,B4D
07344:  MOVFF  230,B4C
07348:  MOVFF  22F,B4B
0734C:  MOVLW  02
0734E:  MOVLB  B
07350:  MOVWF  x50
07352:  MOVLW  35
07354:  MOVWF  x4F
07356:  CLRF   x54
07358:  CLRF   x53
0735A:  CLRF   x52
0735C:  MOVLW  40
0735E:  MOVWF  x51
07360:  MOVLB  0
07362:  CALL   2B2A
.................... 
....................       for (int i = 0; i < PACKET_SIZE; i++) {
07366:  MOVLB  2
07368:  CLRF   x75
0736A:  MOVLB  0
0736C:  MOVLB  2
0736E:  MOVF   x75,W
07370:  SUBLW  3F
07372:  BTFSC  FD8.0
07374:  BRA    737C
07376:  MOVLB  0
07378:  GOTO   73BA
0737C:  MOVLB  0
....................          fprintf(PC, "%02X ", read_data[i]);
0737E:  CLRF   03
07380:  MOVLB  2
07382:  MOVF   x75,W
07384:  ADDLW  35
07386:  MOVWF  FE9
07388:  MOVLW  02
0738A:  ADDWFC 03,W
0738C:  MOVWF  FEA
0738E:  MOVFF  FEF,276
07392:  MOVFF  276,A62
07396:  MOVLW  37
07398:  MOVLB  A
0739A:  MOVWF  x63
0739C:  MOVLB  0
0739E:  CALL   2126
073A2:  MOVLW  20
073A4:  BTFSS  FA6.6
073A6:  GOTO   73A4
073AA:  MOVLB  E
073AC:  MOVWF  xF9
073AE:  MOVLB  0
073B0:  MOVLB  2
073B2:  INCF   x75,F
073B4:  MOVLB  0
073B6:  GOTO   736C
....................       }
....................       fprintf(PC, "\r\n");
073BA:  MOVLW  0D
073BC:  BTFSS  FA6.6
073BE:  GOTO   73BC
073C2:  MOVLB  E
073C4:  MOVWF  xF9
073C6:  MOVLW  0A
073C8:  MOVLB  0
073CA:  BTFSS  FA6.6
073CC:  GOTO   73CA
073D0:  MOVLB  E
073D2:  MOVWF  xF9
....................       read_address += PACKET_SIZE;
073D4:  MOVLW  40
073D6:  MOVLB  2
073D8:  ADDWF  x2F,F
073DA:  MOVLW  00
073DC:  ADDWFC x30,F
073DE:  MOVLW  00
073E0:  ADDWFC x31,F
073E2:  MOVLW  00
073E4:  ADDWFC x32,F
....................       read_packetnum--;
073E6:  MOVF   x33,W
073E8:  BTFSC  FD8.2
073EA:  DECF   x34,F
073EC:  DECF   x33,F
073EE:  MOVLB  0
073F0:  GOTO   730C
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
073F4:  MOVLW  FC
073F6:  MOVWF  FF6
073F8:  MOVLW  1B
073FA:  MOVWF  FF7
073FC:  MOVLW  00
073FE:  MOVWF  FF8
07400:  CALL   1EDC
07404:  GOTO   D79A (RETURN)
.................... }
.................... 
.................... 
.................... void mode_smf_erase(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Erase\r\n");
07408:  MOVLW  14
0740A:  MOVWF  FF6
0740C:  MOVLW  1C
0740E:  MOVWF  FF7
07410:  MOVLW  00
07412:  MOVWF  FF8
07414:  CALL   1EDC
....................    flash_setting(smf);
07418:  MOVFF  119,33B
0741C:  MOVFF  118,33A
07420:  MOVFF  117,339
07424:  MOVFF  116,338
07428:  CALL   64FE
....................    unsigned int32 erase_address = 0x00000000; // Example address
0742C:  MOVLB  2
0742E:  CLRF   x32
07430:  CLRF   x31
07432:  CLRF   x30
07434:  CLRF   x2F
....................    sector_erase(smf, erase_address); // Erase the sector
07436:  MOVFF  119,B8C
0743A:  MOVFF  118,B8B
0743E:  MOVFF  117,B8A
07442:  MOVFF  116,B89
07446:  MOVFF  232,B90
0744A:  MOVFF  231,B8F
0744E:  MOVFF  230,B8E
07452:  MOVFF  22F,B8D
07456:  MOVLB  0
07458:  CALL   3FFE
....................    fprintf(PC, "End Flash SMF Erase\r\n");
0745C:  MOVLW  2C
0745E:  MOVWF  FF6
07460:  MOVLW  1C
07462:  MOVWF  FF7
07464:  MOVLW  00
07466:  MOVWF  FF8
07468:  CALL   1EDC
0746C:  GOTO   D7AA (RETURN)
.................... }  
.................... 
.................... void mode_misf_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
*
06E1C:  MOVLW  42
06E1E:  MOVWF  FF6
06E20:  MOVLW  1C
06E22:  MOVWF  FF7
06E24:  MOVLW  00
06E26:  MOVWF  FF8
06E28:  CALL   1EDC
....................    piclog_make(parameter[0], PICLOG_PARAM_START); 
06E2C:  MOVLB  2
06E2E:  MOVF   x2F,W
06E30:  MOVWF  FE9
06E32:  MOVF   x30,W
06E34:  MOVWF  FEA
06E36:  MOVFF  FEF,273
06E3A:  MOVFF  273,284
06E3E:  CLRF   x85
06E40:  MOVLB  0
06E42:  CALL   4C1A
....................    FlashData_t flash_data;
....................    memset(flash_data.bytes, 0, PACKET_SIZE);
06E46:  MOVLW  02
06E48:  MOVWF  FEA
06E4A:  MOVLW  31
06E4C:  MOVWF  FE9
06E4E:  CLRF   00
06E50:  CLRF   02
06E52:  MOVLW  40
06E54:  MOVWF  01
06E56:  CALL   2B06
....................    /*
....................    for (int i = 0; i < PACKET_SIZE; i++) {
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
....................    }
....................    */
....................    fprintf(PC, "\r\n");
06E5A:  MOVLW  0D
06E5C:  BTFSS  FA6.6
06E5E:  GOTO   6E5C
06E62:  MOVLB  E
06E64:  MOVWF  xF9
06E66:  MOVLW  0A
06E68:  MOVLB  0
06E6A:  BTFSS  FA6.6
06E6C:  GOTO   6E6A
06E70:  MOVLB  E
06E72:  MOVWF  xF9
....................    flash_data.packet.crc = calc_crc8(flash_data.bytes, PACKET_SIZE-1);
06E74:  MOVLW  02
06E76:  MOVLB  B
06E78:  MOVWF  xD6
06E7A:  MOVLW  31
06E7C:  MOVWF  xD5
06E7E:  MOVLW  3F
06E80:  MOVWF  xD7
06E82:  MOVLB  0
06E84:  CALL   2D3E
06E88:  MOVFF  01,270
....................    for (int i = 0; i < PACKET_SIZE; i++) {
06E8C:  MOVLB  2
06E8E:  CLRF   x71
06E90:  MOVLB  0
06E92:  MOVLB  2
06E94:  MOVF   x71,W
06E96:  SUBLW  3F
06E98:  BTFSC  FD8.0
06E9A:  BRA    6EA2
06E9C:  MOVLB  0
06E9E:  GOTO   6EE0
06EA2:  MOVLB  0
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
06EA4:  CLRF   03
06EA6:  MOVLB  2
06EA8:  MOVF   x71,W
06EAA:  ADDLW  31
06EAC:  MOVWF  FE9
06EAE:  MOVLW  02
06EB0:  ADDWFC 03,W
06EB2:  MOVWF  FEA
06EB4:  MOVFF  FEF,273
06EB8:  MOVFF  273,A62
06EBC:  MOVLW  37
06EBE:  MOVLB  A
06EC0:  MOVWF  x63
06EC2:  MOVLB  0
06EC4:  CALL   2126
06EC8:  MOVLW  20
06ECA:  BTFSS  FA6.6
06ECC:  GOTO   6ECA
06ED0:  MOVLB  E
06ED2:  MOVWF  xF9
06ED4:  MOVLB  0
06ED6:  MOVLB  2
06ED8:  INCF   x71,F
06EDA:  MOVLB  0
06EDC:  GOTO   6E92
....................    }
....................    fprintf(PC, "\r\n");
06EE0:  MOVLW  0D
06EE2:  BTFSS  FA6.6
06EE4:  GOTO   6EE2
06EE8:  MOVLB  E
06EEA:  MOVWF  xF9
06EEC:  MOVLW  0A
06EEE:  MOVLB  0
06EF0:  BTFSS  FA6.6
06EF2:  GOTO   6EF0
06EF6:  MOVLB  E
06EF8:  MOVWF  xF9
....................    write_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, flash_data.bytes, PACKET_SIZE);
06EFA:  MOVFF  115,B8E
06EFE:  MOVFF  114,B8D
06F02:  MOVFF  113,B8C
06F06:  MOVFF  112,B8B
06F0A:  MOVLB  B
06F0C:  CLRF   x92
06F0E:  CLRF   x91
06F10:  CLRF   x90
06F12:  CLRF   x8F
06F14:  MOVLW  02
06F16:  MOVWF  x94
06F18:  MOVLW  31
06F1A:  MOVWF  x93
06F1C:  CLRF   x96
06F1E:  MOVLW  40
06F20:  MOVWF  x95
06F22:  MOVLB  0
06F24:  CALL   3B1A
....................    memset(flash_data.bytes, 0, PACKET_SIZE);
06F28:  MOVLW  02
06F2A:  MOVWF  FEA
06F2C:  MOVLW  31
06F2E:  MOVWF  FE9
06F30:  CLRF   00
06F32:  CLRF   02
06F34:  MOVLW  40
06F36:  MOVWF  01
06F38:  CALL   2B06
....................    read_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, flash_data.bytes, PACKET_SIZE);
06F3C:  MOVFF  115,B4A
06F40:  MOVFF  114,B49
06F44:  MOVFF  113,B48
06F48:  MOVFF  112,B47
06F4C:  MOVLB  B
06F4E:  CLRF   x4E
06F50:  CLRF   x4D
06F52:  CLRF   x4C
06F54:  CLRF   x4B
06F56:  MOVLW  02
06F58:  MOVWF  x50
06F5A:  MOVLW  31
06F5C:  MOVWF  x4F
06F5E:  CLRF   x54
06F60:  CLRF   x53
06F62:  CLRF   x52
06F64:  MOVLW  40
06F66:  MOVWF  x51
06F68:  MOVLB  0
06F6A:  CALL   2B2A
....................    flash_data.packet.crc = calc_crc8(flash_data.bytes, PACKET_SIZE-1);
06F6E:  MOVLW  02
06F70:  MOVLB  B
06F72:  MOVWF  xD6
06F74:  MOVLW  31
06F76:  MOVWF  xD5
06F78:  MOVLW  3F
06F7A:  MOVWF  xD7
06F7C:  MOVLB  0
06F7E:  CALL   2D3E
06F82:  MOVFF  01,270
....................    for (int i = 0; i < PACKET_SIZE; i++) {
06F86:  MOVLB  2
06F88:  CLRF   x72
06F8A:  MOVLB  0
06F8C:  MOVLB  2
06F8E:  MOVF   x72,W
06F90:  SUBLW  3F
06F92:  BTFSC  FD8.0
06F94:  BRA    6F9C
06F96:  MOVLB  0
06F98:  GOTO   6FDA
06F9C:  MOVLB  0
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
06F9E:  CLRF   03
06FA0:  MOVLB  2
06FA2:  MOVF   x72,W
06FA4:  ADDLW  31
06FA6:  MOVWF  FE9
06FA8:  MOVLW  02
06FAA:  ADDWFC 03,W
06FAC:  MOVWF  FEA
06FAE:  MOVFF  FEF,273
06FB2:  MOVFF  273,A62
06FB6:  MOVLW  37
06FB8:  MOVLB  A
06FBA:  MOVWF  x63
06FBC:  MOVLB  0
06FBE:  CALL   2126
06FC2:  MOVLW  20
06FC4:  BTFSS  FA6.6
06FC6:  GOTO   6FC4
06FCA:  MOVLB  E
06FCC:  MOVWF  xF9
06FCE:  MOVLB  0
06FD0:  MOVLB  2
06FD2:  INCF   x72,F
06FD4:  MOVLB  0
06FD6:  GOTO   6F8C
....................    }
....................    misf_init(); // Update the address area after writing
06FDA:  CALL   35B4
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06FDE:  MOVLB  2
06FE0:  MOVF   x2F,W
06FE2:  MOVWF  FE9
06FE4:  MOVF   x30,W
06FE6:  MOVWF  FEA
06FE8:  MOVFF  FEF,273
06FEC:  MOVFF  273,284
06FF0:  SETF   x85
06FF2:  MOVLB  0
06FF4:  CALL   4C1A
....................    fprintf(PC, "End Flash Address Reset\r\n");
06FF8:  MOVLW  5E
06FFA:  MOVWF  FF6
06FFC:  MOVLW  1C
06FFE:  MOVWF  FF7
07000:  MOVLW  00
07002:  MOVWF  FF8
07004:  CALL   1EDC
07008:  GOTO   704E (RETURN)
.................... }
.................... 
.................... 
.................... // ---------- SMF Command Functions ----------
.................... void mode_smf_read_force(int8 parameter[])
*
0776C:  MOVLW  01
0776E:  MOVLB  2
07770:  ADDWF  x2D,W
07772:  MOVWF  FE9
07774:  MOVLW  00
07776:  ADDWFC x2E,W
07778:  MOVWF  FEA
0777A:  MOVF   FEF,W
0777C:  CLRF   x7F
0777E:  CLRF   x7E
07780:  CLRF   x7D
07782:  MOVWF  x7C
07784:  MOVFF  27C,27F
07788:  CLRF   x7C
0778A:  CLRF   x7D
0778C:  CLRF   x7E
0778E:  MOVLW  02
07790:  ADDWF  x2D,W
07792:  MOVWF  FE9
07794:  MOVLW  00
07796:  ADDWFC x2E,W
07798:  MOVWF  FEA
0779A:  MOVF   FEF,W
0779C:  CLRF   x84
0779E:  CLRF   x83
077A0:  CLRF   x82
077A2:  MOVWF  x81
077A4:  MOVFF  282,03
077A8:  MOVFF  281,02
077AC:  CLRF   00
077AE:  CLRF   01
077B0:  MOVF   00,W
077B2:  IORWF  x7C,F
077B4:  MOVF   01,W
077B6:  IORWF  x7D,F
077B8:  MOVF   02,W
077BA:  IORWF  x7E,F
077BC:  MOVF   03,W
077BE:  IORWF  x7F,F
077C0:  MOVLW  03
077C2:  ADDWF  x2D,W
077C4:  MOVWF  FE9
077C6:  MOVLW  00
077C8:  ADDWFC x2E,W
077CA:  MOVWF  FEA
077CC:  MOVF   FEF,W
077CE:  CLRF   x84
077D0:  CLRF   x83
077D2:  CLRF   x82
077D4:  MOVWF  x81
077D6:  MOVFF  283,03
077DA:  MOVFF  282,02
077DE:  MOVFF  281,01
077E2:  CLRF   00
077E4:  MOVF   00,W
077E6:  IORWF  x7C,F
077E8:  MOVF   01,W
077EA:  IORWF  x7D,F
077EC:  MOVF   02,W
077EE:  IORWF  x7E,F
077F0:  MOVF   03,W
077F2:  IORWF  x7F,F
077F4:  MOVLW  04
077F6:  ADDWF  x2D,W
077F8:  MOVWF  FE9
077FA:  MOVLW  00
077FC:  ADDWFC x2E,W
077FE:  MOVWF  FEA
07800:  MOVF   FEF,W
07802:  MOVWF  00
07804:  CLRF   01
07806:  CLRF   02
07808:  CLRF   03
0780A:  MOVF   00,W
0780C:  IORWF  x7C,W
0780E:  MOVWF  x2F
07810:  MOVF   01,W
07812:  IORWF  x7D,W
07814:  MOVWF  x30
07816:  MOVF   02,W
07818:  IORWF  x7E,W
0781A:  MOVWF  x31
0781C:  MOVF   03,W
0781E:  IORWF  x7F,W
07820:  MOVWF  x32
07822:  MOVLW  07
07824:  ADDWF  x2D,W
07826:  MOVWF  FE9
07828:  MOVLW  00
0782A:  ADDWFC x2E,W
0782C:  MOVWF  FEA
0782E:  MOVF   FEF,W
07830:  CLRF   x7D
07832:  MOVWF  x7C
07834:  MOVFF  27C,27D
07838:  CLRF   x7C
0783A:  MOVLW  08
0783C:  ADDWF  x2D,W
0783E:  MOVWF  FE9
07840:  MOVLW  00
07842:  ADDWFC x2E,W
07844:  MOVWF  FEA
07846:  MOVF   FEF,W
07848:  CLRF   03
0784A:  IORWF  x7C,W
0784C:  MOVWF  x33
0784E:  MOVF   03,W
07850:  IORWF  x7D,W
07852:  MOVWF  x34
.................... {
....................    int32 address = 
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
....................    
....................    int16 packet_num = 
....................       ((int16)parameter[7] << 8) |
....................       ((int16)parameter[8]);
....................       
....................    int8 read_data[PACKET_SIZE] = {0x00}; // Initialize read data buffer
07854:  CLRF   x35
07856:  CLRF   x36
07858:  CLRF   x37
0785A:  CLRF   x38
0785C:  CLRF   x39
0785E:  CLRF   x3A
07860:  CLRF   x3B
07862:  CLRF   x3C
07864:  CLRF   x3D
07866:  CLRF   x3E
07868:  CLRF   x3F
0786A:  CLRF   x40
0786C:  CLRF   x41
0786E:  CLRF   x42
07870:  CLRF   x43
07872:  CLRF   x44
07874:  CLRF   x45
07876:  CLRF   x46
07878:  CLRF   x47
0787A:  CLRF   x48
0787C:  CLRF   x49
0787E:  CLRF   x4A
07880:  CLRF   x4B
07882:  CLRF   x4C
07884:  CLRF   x4D
07886:  CLRF   x4E
07888:  CLRF   x4F
0788A:  CLRF   x50
0788C:  CLRF   x51
0788E:  CLRF   x52
07890:  CLRF   x53
07892:  CLRF   x54
07894:  CLRF   x55
07896:  CLRF   x56
07898:  CLRF   x57
0789A:  CLRF   x58
0789C:  CLRF   x59
0789E:  CLRF   x5A
078A0:  CLRF   x5B
078A2:  CLRF   x5C
078A4:  CLRF   x5D
078A6:  CLRF   x5E
078A8:  CLRF   x5F
078AA:  CLRF   x60
078AC:  CLRF   x61
078AE:  CLRF   x62
078B0:  CLRF   x63
078B2:  CLRF   x64
078B4:  CLRF   x65
078B6:  CLRF   x66
078B8:  CLRF   x67
078BA:  CLRF   x68
078BC:  CLRF   x69
078BE:  CLRF   x6A
078C0:  CLRF   x6B
078C2:  CLRF   x6C
078C4:  CLRF   x6D
078C6:  CLRF   x6E
078C8:  CLRF   x6F
078CA:  CLRF   x70
078CC:  CLRF   x71
078CE:  CLRF   x72
078D0:  CLRF   x73
078D2:  CLRF   x74
....................    if(!is_connect(smf)) {
078D4:  MOVFF  119,2D4
078D8:  MOVFF  118,2D3
078DC:  MOVFF  117,2D2
078E0:  MOVFF  116,2D1
078E4:  MOVLB  0
078E6:  CALL   2A3E
078EA:  MOVF   01,F
078EC:  BTFSS  FD8.2
078EE:  GOTO   7906
....................       printf("SMF is not connected\r\n");
078F2:  MOVLW  78
078F4:  MOVWF  FF6
078F6:  MOVLW  1C
078F8:  MOVWF  FF7
078FA:  MOVLW  00
078FC:  MOVWF  FF8
078FE:  CALL   1EDC
....................       return;
07902:  GOTO   7B56
....................    }
....................    printf("Start Flash SMF Read Force\r\n");
07906:  MOVLW  90
07908:  MOVWF  FF6
0790A:  MOVLW  1C
0790C:  MOVWF  FF7
0790E:  MOVLW  00
07910:  MOVWF  FF8
07912:  CALL   1EDC
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
07916:  MOVLB  2
07918:  MOVF   x2D,W
0791A:  MOVWF  FE9
0791C:  MOVF   x2E,W
0791E:  MOVWF  FEA
07920:  MOVFF  FEF,27C
07924:  MOVFF  27C,284
07928:  CLRF   x85
0792A:  MOVLB  0
0792C:  CALL   4C1A
.................... 
....................    // 統合管理システムからキューに追加
....................    // enqueue_read_data(address, packet_num * PACKET_SIZE);
.................... 
....................    printf("\tAddress  : 0x%08LX\r\n", address);
07930:  MOVLW  AE
07932:  MOVWF  FF6
07934:  MOVLW  1C
07936:  MOVWF  FF7
07938:  MOVLW  00
0793A:  MOVWF  FF8
0793C:  MOVLW  0E
0793E:  MOVLB  3
07940:  MOVWF  x16
07942:  MOVLB  0
07944:  CALL   1F12
07948:  MOVFF  232,A62
0794C:  MOVLW  37
0794E:  MOVLB  A
07950:  MOVWF  x63
07952:  MOVLB  0
07954:  CALL   2126
07958:  MOVFF  231,A62
0795C:  MOVLW  37
0795E:  MOVLB  A
07960:  MOVWF  x63
07962:  MOVLB  0
07964:  CALL   2126
07968:  MOVFF  230,A62
0796C:  MOVLW  37
0796E:  MOVLB  A
07970:  MOVWF  x63
07972:  MOVLB  0
07974:  CALL   2126
07978:  MOVFF  22F,A62
0797C:  MOVLW  37
0797E:  MOVLB  A
07980:  MOVWF  x63
07982:  MOVLB  0
07984:  CALL   2126
07988:  MOVLW  0D
0798A:  BTFSS  FA6.6
0798C:  GOTO   798A
07990:  MOVLB  E
07992:  MOVWF  xF9
07994:  MOVLW  0A
07996:  MOVLB  0
07998:  BTFSS  FA6.6
0799A:  GOTO   7998
0799E:  MOVLB  E
079A0:  MOVWF  xF9
....................    printf("\tPacketNum: 0x%04LX\r\n", packet_num);
079A2:  MOVLW  C4
079A4:  MOVWF  FF6
079A6:  MOVLW  1C
079A8:  MOVWF  FF7
079AA:  MOVLW  00
079AC:  MOVWF  FF8
079AE:  MOVLW  0E
079B0:  MOVLB  3
079B2:  MOVWF  x16
079B4:  MOVLB  0
079B6:  CALL   1F12
079BA:  MOVFF  234,A62
079BE:  MOVLW  37
079C0:  MOVLB  A
079C2:  MOVWF  x63
079C4:  MOVLB  0
079C6:  CALL   2126
079CA:  MOVFF  233,A62
079CE:  MOVLW  37
079D0:  MOVLB  A
079D2:  MOVWF  x63
079D4:  MOVLB  0
079D6:  CALL   2126
079DA:  MOVLW  0D
079DC:  BTFSS  FA6.6
079DE:  GOTO   79DC
079E2:  MOVLB  E
079E4:  MOVWF  xF9
079E6:  MOVLW  0A
079E8:  MOVLB  0
079EA:  BTFSS  FA6.6
079EC:  GOTO   79EA
079F0:  MOVLB  E
079F2:  MOVWF  xF9
....................    printf("read data\r\n");
079F4:  MOVLW  DA
079F6:  MOVWF  FF6
079F8:  MOVLW  1C
079FA:  MOVWF  FF7
079FC:  MOVLW  00
079FE:  MOVWF  FF8
07A00:  MOVLB  0
07A02:  CALL   1EDC
....................    for (int16 packet_count = 0; packet_count < packet_num; packet_count++)
07A06:  MOVLB  2
07A08:  CLRF   x76
07A0A:  CLRF   x75
07A0C:  MOVLB  0
07A0E:  MOVLB  2
07A10:  MOVF   x76,W
07A12:  SUBWF  x34,W
07A14:  BTFSC  FD8.0
07A16:  BRA    7A1E
07A18:  MOVLB  0
07A1A:  GOTO   7B2C
07A1E:  MOVLB  0
07A20:  BTFSS  FD8.2
07A22:  GOTO   7A38
07A26:  MOVLB  2
07A28:  MOVF   x33,W
07A2A:  SUBWF  x75,W
07A2C:  BTFSS  FD8.0
07A2E:  BRA    7A36
07A30:  MOVLB  0
07A32:  GOTO   7B2C
07A36:  MOVLB  0
....................    {
....................       int32 current_address = address + (packet_count * PACKET_SIZE);
07A38:  MOVLB  2
07A3A:  RLCF   x75,W
07A3C:  MOVWF  02
07A3E:  RLCF   x76,W
07A40:  MOVWF  03
07A42:  RLCF   02,F
07A44:  RLCF   03,F
07A46:  RLCF   02,F
07A48:  RLCF   03,F
07A4A:  RLCF   02,F
07A4C:  RLCF   03,F
07A4E:  RLCF   02,F
07A50:  RLCF   03,F
07A52:  RLCF   02,F
07A54:  RLCF   03,F
07A56:  MOVLW  C0
07A58:  ANDWF  02,F
07A5A:  MOVF   02,W
07A5C:  ADDWF  x2F,W
07A5E:  MOVWF  x77
07A60:  MOVF   03,W
07A62:  ADDWFC x30,W
07A64:  MOVWF  x78
07A66:  MOVLW  00
07A68:  ADDWFC x31,W
07A6A:  MOVWF  x79
07A6C:  MOVLW  00
07A6E:  ADDWFC x32,W
07A70:  MOVWF  x7A
07A72:  MOVLB  0
....................       read_data_bytes(smf, current_address, read_data, PACKET_SIZE);
07A74:  MOVFF  119,B4A
07A78:  MOVFF  118,B49
07A7C:  MOVFF  117,B48
07A80:  MOVFF  116,B47
07A84:  MOVFF  27A,B4E
07A88:  MOVFF  279,B4D
07A8C:  MOVFF  278,B4C
07A90:  MOVFF  277,B4B
07A94:  MOVLW  02
07A96:  MOVLB  B
07A98:  MOVWF  x50
07A9A:  MOVLW  35
07A9C:  MOVWF  x4F
07A9E:  CLRF   x54
07AA0:  CLRF   x53
07AA2:  CLRF   x52
07AA4:  MOVLW  40
07AA6:  MOVWF  x51
07AA8:  MOVLB  0
07AAA:  CALL   2B2A
....................       for (int8 byte_count = 0; byte_count < PACKET_SIZE; byte_count++)
07AAE:  MOVLB  2
07AB0:  CLRF   x7B
07AB2:  MOVLB  0
07AB4:  MOVLB  2
07AB6:  MOVF   x7B,W
07AB8:  SUBLW  3F
07ABA:  BTFSC  FD8.0
07ABC:  BRA    7AC4
07ABE:  MOVLB  0
07AC0:  GOTO   7B02
07AC4:  MOVLB  0
....................       {
....................          printf("%02X ", read_data[byte_count]);
07AC6:  CLRF   03
07AC8:  MOVLB  2
07ACA:  MOVF   x7B,W
07ACC:  ADDLW  35
07ACE:  MOVWF  FE9
07AD0:  MOVLW  02
07AD2:  ADDWFC 03,W
07AD4:  MOVWF  FEA
07AD6:  MOVFF  FEF,27C
07ADA:  MOVFF  27C,A62
07ADE:  MOVLW  37
07AE0:  MOVLB  A
07AE2:  MOVWF  x63
07AE4:  MOVLB  0
07AE6:  CALL   2126
07AEA:  MOVLW  20
07AEC:  BTFSS  FA6.6
07AEE:  GOTO   7AEC
07AF2:  MOVLB  E
07AF4:  MOVWF  xF9
07AF6:  MOVLB  0
07AF8:  MOVLB  2
07AFA:  INCF   x7B,F
07AFC:  MOVLB  0
07AFE:  GOTO   7AB4
....................       }
....................       printf("\r\n");
07B02:  MOVLW  0D
07B04:  BTFSS  FA6.6
07B06:  GOTO   7B04
07B0A:  MOVLB  E
07B0C:  MOVWF  xF9
07B0E:  MOVLW  0A
07B10:  MOVLB  0
07B12:  BTFSS  FA6.6
07B14:  GOTO   7B12
07B18:  MOVLB  E
07B1A:  MOVWF  xF9
07B1C:  MOVLB  0
07B1E:  MOVLB  2
07B20:  INCF   x75,F
07B22:  BTFSC  FD8.2
07B24:  INCF   x76,F
07B26:  MOVLB  0
07B28:  GOTO   7A0E
....................    }
.................... 
....................    printf("\r\nEnd Flash SMF Read Force\r\n");
07B2C:  MOVLW  E6
07B2E:  MOVWF  FF6
07B30:  MOVLW  1C
07B32:  MOVWF  FF7
07B34:  MOVLW  00
07B36:  MOVWF  FF8
07B38:  CALL   1EDC
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
07B3C:  MOVLB  2
07B3E:  MOVF   x2D,W
07B40:  MOVWF  FE9
07B42:  MOVF   x2E,W
07B44:  MOVWF  FEA
07B46:  MOVFF  FEF,27C
07B4A:  MOVFF  27C,284
07B4E:  SETF   x85
07B50:  MOVLB  0
07B52:  CALL   4C1A
07B56:  GOTO   D7CA (RETURN)
.................... }
.................... 
.................... void mode_smf_erase_force(int8 parameter[])
.................... {
....................    printf("Start SMF Erase All\r\n");
07B5A:  MOVLW  04
07B5C:  MOVWF  FF6
07B5E:  MOVLW  1D
07B60:  MOVWF  FF7
07B62:  MOVLW  00
07B64:  MOVWF  FF8
07B66:  CALL   1EDC
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
07B6A:  MOVLB  2
07B6C:  MOVF   x2D,W
07B6E:  MOVWF  FE9
07B70:  MOVF   x2E,W
07B72:  MOVWF  FEA
07B74:  MOVFF  FEF,22F
....................    piclog_make(cmd, 0x00); // Log the command execution
07B78:  MOVFF  22F,284
07B7C:  CLRF   x85
07B7E:  MOVLB  0
07B80:  CALL   4C1A
....................    
.................... 
....................    
....................    for (int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_PICLOG_END_ADDRESS; address += SECTOR_64K_BYTE) {
07B84:  MOVLW  06
07B86:  MOVLB  2
07B88:  MOVWF  x33
07B8A:  MOVLW  AA
07B8C:  MOVWF  x32
07B8E:  CLRF   x31
07B90:  CLRF   x30
07B92:  MOVLB  0
07B94:  MOVLB  2
07B96:  MOVF   x33,W
07B98:  SUBLW  06
07B9A:  BTFSC  FD8.0
07B9C:  BRA    7BA4
07B9E:  MOVLB  0
07BA0:  GOTO   7C22
07BA4:  MOVLB  0
07BA6:  BTFSS  FD8.2
07BA8:  GOTO   7BEE
07BAC:  MOVLB  2
07BAE:  MOVF   x32,W
07BB0:  SUBLW  AA
07BB2:  BTFSC  FD8.0
07BB4:  BRA    7BBC
07BB6:  MOVLB  0
07BB8:  GOTO   7C22
07BBC:  MOVLB  0
07BBE:  BTFSS  FD8.2
07BC0:  GOTO   7BEE
07BC4:  MOVLB  2
07BC6:  MOVF   x31,W
07BC8:  SUBLW  1F
07BCA:  BTFSC  FD8.0
07BCC:  BRA    7BD4
07BCE:  MOVLB  0
07BD0:  GOTO   7C22
07BD4:  MOVLB  0
07BD6:  BTFSS  FD8.2
07BD8:  GOTO   7BEE
07BDC:  MOVLB  2
07BDE:  MOVF   x30,W
07BE0:  SUBLW  FE
07BE2:  BTFSC  FD8.0
07BE4:  BRA    7BEC
07BE6:  MOVLB  0
07BE8:  GOTO   7C22
07BEC:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
07BEE:  MOVFF  119,B8C
07BF2:  MOVFF  118,B8B
07BF6:  MOVFF  117,B8A
07BFA:  MOVFF  116,B89
07BFE:  MOVFF  233,B90
07C02:  MOVFF  232,B8F
07C06:  MOVFF  231,B8E
07C0A:  MOVFF  230,B8D
07C0E:  CALL   3FFE
07C12:  MOVLW  01
07C14:  MOVLB  2
07C16:  ADDWF  x32,F
07C18:  MOVLW  00
07C1A:  ADDWFC x33,F
07C1C:  MOVLB  0
07C1E:  GOTO   7B94
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
07C22:  MOVFF  22F,284
07C26:  MOVLB  2
07C28:  SETF   x85
07C2A:  MOVLB  0
07C2C:  CALL   4C1A
....................    printf("End SMF Erase All\r\n");
07C30:  MOVLW  1A
07C32:  MOVWF  FF6
07C34:  MOVLW  1D
07C36:  MOVWF  FF7
07C38:  MOVLW  00
07C3A:  MOVWF  FF8
07C3C:  CALL   1EDC
07C40:  GOTO   D7DA (RETURN)
.................... }
.................... 
.................... void mode_smf_address_reset(int8 parameter[])
.................... {
....................    printf("Start SMF Reset\r\n");
*
075F2:  MOVLW  2E
075F4:  MOVWF  FF6
075F6:  MOVLW  1D
075F8:  MOVWF  FF7
075FA:  MOVLW  00
075FC:  MOVWF  FF8
075FE:  CALL   1EDC
....................    piclog_make(parameter[0], PICLOG_PARAM_START);
07602:  MOVLB  2
07604:  MOVF   x2D,W
07606:  MOVWF  FE9
07608:  MOVF   x2E,W
0760A:  MOVWF  FEA
0760C:  MOVFF  FEF,273
07610:  MOVFF  273,284
07614:  CLRF   x85
07616:  MOVLB  0
07618:  CALL   4C1A
....................    int8 writedata[PACKET_SIZE] = {0x00}; 
0761C:  MOVLB  2
0761E:  CLRF   x2F
07620:  CLRF   x30
07622:  CLRF   x31
07624:  CLRF   x32
07626:  CLRF   x33
07628:  CLRF   x34
0762A:  CLRF   x35
0762C:  CLRF   x36
0762E:  CLRF   x37
07630:  CLRF   x38
07632:  CLRF   x39
07634:  CLRF   x3A
07636:  CLRF   x3B
07638:  CLRF   x3C
0763A:  CLRF   x3D
0763C:  CLRF   x3E
0763E:  CLRF   x3F
07640:  CLRF   x40
07642:  CLRF   x41
07644:  CLRF   x42
07646:  CLRF   x43
07648:  CLRF   x44
0764A:  CLRF   x45
0764C:  CLRF   x46
0764E:  CLRF   x47
07650:  CLRF   x48
07652:  CLRF   x49
07654:  CLRF   x4A
07656:  CLRF   x4B
07658:  CLRF   x4C
0765A:  CLRF   x4D
0765C:  CLRF   x4E
0765E:  CLRF   x4F
07660:  CLRF   x50
07662:  CLRF   x51
07664:  CLRF   x52
07666:  CLRF   x53
07668:  CLRF   x54
0766A:  CLRF   x55
0766C:  CLRF   x56
0766E:  CLRF   x57
07670:  CLRF   x58
07672:  CLRF   x59
07674:  CLRF   x5A
07676:  CLRF   x5B
07678:  CLRF   x5C
0767A:  CLRF   x5D
0767C:  CLRF   x5E
0767E:  CLRF   x5F
07680:  CLRF   x60
07682:  CLRF   x61
07684:  CLRF   x62
07686:  CLRF   x63
07688:  CLRF   x64
0768A:  CLRF   x65
0768C:  CLRF   x66
0768E:  CLRF   x67
07690:  CLRF   x68
07692:  CLRF   x69
07694:  CLRF   x6A
07696:  CLRF   x6B
07698:  CLRF   x6C
0769A:  CLRF   x6D
0769C:  CLRF   x6E
....................    for (int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_IV2_DATA_END_ADDRESS; address += SECTOR_64K_BYTE) {
0769E:  MOVLW  06
076A0:  MOVWF  x72
076A2:  MOVLW  AA
076A4:  MOVWF  x71
076A6:  CLRF   x70
076A8:  CLRF   x6F
076AA:  MOVLB  0
076AC:  MOVLB  2
076AE:  MOVF   x72,W
076B0:  SUBLW  07
076B2:  BTFSC  FD8.0
076B4:  BRA    76BC
076B6:  MOVLB  0
076B8:  GOTO   773A
076BC:  MOVLB  0
076BE:  BTFSS  FD8.2
076C0:  GOTO   7706
076C4:  MOVLB  2
076C6:  MOVF   x71,W
076C8:  SUBLW  48
076CA:  BTFSC  FD8.0
076CC:  BRA    76D4
076CE:  MOVLB  0
076D0:  GOTO   773A
076D4:  MOVLB  0
076D6:  BTFSS  FD8.2
076D8:  GOTO   7706
076DC:  MOVLB  2
076DE:  MOVF   x70,W
076E0:  SUBLW  3F
076E2:  BTFSC  FD8.0
076E4:  BRA    76EC
076E6:  MOVLB  0
076E8:  GOTO   773A
076EC:  MOVLB  0
076EE:  BTFSS  FD8.2
076F0:  GOTO   7706
076F4:  MOVLB  2
076F6:  MOVF   x6F,W
076F8:  SUBLW  FE
076FA:  BTFSC  FD8.0
076FC:  BRA    7704
076FE:  MOVLB  0
07700:  GOTO   773A
07704:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
07706:  MOVFF  119,B8C
0770A:  MOVFF  118,B8B
0770E:  MOVFF  117,B8A
07712:  MOVFF  116,B89
07716:  MOVFF  272,B90
0771A:  MOVFF  271,B8F
0771E:  MOVFF  270,B8E
07722:  MOVFF  26F,B8D
07726:  CALL   3FFE
0772A:  MOVLW  01
0772C:  MOVLB  2
0772E:  ADDWF  x71,F
07730:  MOVLW  00
07732:  ADDWFC x72,F
07734:  MOVLB  0
07736:  GOTO   76AC
....................    }
....................    smf_data_table_init(); // Update the address area after writing
0773A:  CALL   7470
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
0773E:  MOVLB  2
07740:  MOVF   x2D,W
07742:  MOVWF  FE9
07744:  MOVF   x2E,W
07746:  MOVWF  FEA
07748:  MOVFF  FEF,273
0774C:  MOVFF  273,284
07750:  SETF   x85
07752:  MOVLB  0
07754:  CALL   4C1A
....................    printf("End SMF Reset\r\n");
07758:  MOVLW  40
0775A:  MOVWF  FF6
0775C:  MOVLW  1D
0775E:  MOVWF  FF7
07760:  MOVLW  00
07762:  MOVWF  FF8
07764:  CALL   1EDC
07768:  GOTO   D7BA (RETURN)
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
102C2:  CLRF   FF8
102C4:  BCF    FD0.7
102C6:  BSF    07.7
102C8:  MOVLB  E
102CA:  MOVLW  55
102CC:  MOVWF  F7E
102CE:  MOVLW  AA
102D0:  MOVWF  F7E
102D2:  BCF    F66.6
102D4:  MOVLW  F9
102D6:  MOVWF  x2C
102D8:  MOVLW  F6
102DA:  MOVWF  x2D
102DC:  MOVLW  0F
102DE:  MOVWF  x2E
102E0:  MOVLW  40
102E2:  MOVWF  x12
102E4:  MOVLW  30
102E6:  MOVWF  x13
102E8:  MOVLW  20
102EA:  MOVWF  x22
102EC:  MOVLW  30
102EE:  MOVWF  x24
102F0:  MOVLW  55
102F2:  MOVWF  F7E
102F4:  MOVLW  AA
102F6:  MOVWF  F7E
102F8:  BSF    F66.6
102FA:  CLRF   F9B
102FC:  CLRF   F64
102FE:  CLRF   F65
10300:  CLRF   F66
10302:  MOVLW  02
10304:  MOVWF  FD3
10306:  CLRF   1B
10308:  MOVLB  F
1030A:  BSF    x2D.3
1030C:  MOVLW  A0
1030E:  MOVWF  x2B
10310:  MOVLW  01
10312:  MOVWF  x2C
10314:  MOVLW  A6
10316:  MOVWF  x2E
10318:  MOVLW  90
1031A:  MOVWF  x2F
1031C:  MOVLB  E
1031E:  BSF    xFD.3
10320:  MOVLW  A0
10322:  MOVWF  xFB
10324:  MOVLW  01
10326:  MOVWF  xFC
10328:  MOVLW  A6
1032A:  MOVWF  xFE
1032C:  MOVLW  90
1032E:  MOVWF  xFF
10330:  BSF    F92.1
10332:  BCF    F92.0
10334:  BCF    F92.3
10336:  BCF    F89.3
10338:  BSF    F96.0
1033A:  BCF    F96.6
1033C:  BCF    F96.1
1033E:  BCF    F8D.1
10340:  BSF    F93.4
10342:  BCF    F93.5
10344:  BCF    F93.2
10346:  BSF    F8A.2
10348:  BCF    F95.4
1034A:  BCF    F95.5
1034C:  BSF    F8C.5
1034E:  CLRF   1F
10350:  CLRF   1E
10352:  CLRF   1D
10354:  CLRF   1C
10356:  CLRF   23
10358:  CLRF   22
1035A:  CLRF   21
1035C:  CLRF   20
1035E:  CLRF   27
10360:  CLRF   26
10362:  CLRF   25
10364:  CLRF   24
10366:  CLRF   29
10368:  CLRF   28
1036A:  CLRF   4A
1036C:  BCF    4B.0
1036E:  MOVLW  1E
10370:  MOVLB  1
10372:  MOVWF  x86
10374:  CLRF   x89
10376:  CLRF   x88
10378:  MOVLW  01
1037A:  MOVWF  x21
1037C:  MOVLW  CA
1037E:  MOVWF  x20
10380:  MOVLW  01
10382:  MOVWF  x23
10384:  MOVLW  D5
10386:  MOVWF  x22
10388:  MOVLW  01
1038A:  MOVWF  x25
1038C:  MOVLW  E0
1038E:  MOVWF  x24
10390:  MOVLW  01
10392:  MOVWF  x27
10394:  MOVLW  EB
10396:  MOVWF  x26
10398:  MOVLW  01
1039A:  MOVWF  x29
1039C:  MOVLW  F6
1039E:  MOVWF  x28
103A0:  MOVLW  02
103A2:  MOVWF  x2B
103A4:  MOVLW  01
103A6:  MOVWF  x2A
103A8:  MOVLW  02
103AA:  MOVWF  x2D
103AC:  MOVLW  0C
103AE:  MOVWF  x2C
103B0:  MOVLB  E
103B2:  CLRF   xD9
103B4:  CLRF   xDA
103B6:  CLRF   xCE
103B8:  CLRF   xCF
103BA:  CLRF   xD0
103BC:  CLRF   xD1
103BE:  CLRF   xD2
103C0:  CLRF   xD3
103C2:  CLRF   xD4
103C4:  CLRF   xD5
103C6:  CLRF   x45
103C8:  CLRF   x46
103CA:  CLRF   x47
103CC:  BCF    x8D.7
103CE:  BCF    x8D.6
103D0:  BCF    x8D.5
103D2:  MOVLB  F
103D4:  CLRF   x53
103D6:  CLRF   x38
103D8:  CLRF   x37
103DA:  MOVLB  0
103DC:  CLRF   2A
103DE:  CLRF   2B
103E0:  CLRF   2C
103E2:  CLRF   2D
103E4:  CLRF   2E
103E6:  CLRF   2F
103E8:  CLRF   30
103EA:  CLRF   31
103EC:  CLRF   32
103EE:  CLRF   33
103F0:  CLRF   34
103F2:  CLRF   35
103F4:  CLRF   36
103F6:  CLRF   37
103F8:  CLRF   38
103FA:  CLRF   39
103FC:  CLRF   3A
103FE:  CLRF   3B
10400:  CLRF   3C
10402:  CLRF   3D
10404:  CLRF   3E
10406:  CLRF   3F
10408:  CLRF   40
1040A:  CLRF   41
1040C:  CLRF   42
1040E:  CLRF   43
10410:  CLRF   44
10412:  CLRF   45
10414:  CLRF   46
10416:  CLRF   47
10418:  CLRF   48
1041A:  CLRF   49
1041C:  MOVLW  03
1041E:  MOVWF  4C
10420:  CLRF   4D
10422:  CLRF   4E
10424:  CLRF   4F
10426:  CLRF   50
10428:  CLRF   51
1042A:  CLRF   52
1042C:  CLRF   53
1042E:  CLRF   54
10430:  CLRF   55
10432:  CLRF   56
10434:  CLRF   57
10436:  CLRF   58
10438:  CLRF   59
1043A:  CLRF   5A
1043C:  CLRF   5B
1043E:  CLRF   5C
10440:  CLRF   5D
10442:  CLRF   5E
10444:  CLRF   5F
10446:  CLRF   x60
10448:  CLRF   x61
1044A:  CLRF   x62
1044C:  CLRF   x63
1044E:  CLRF   x64
10450:  CLRF   x65
10452:  CLRF   x66
10454:  CLRF   x67
10456:  CLRF   x68
10458:  CLRF   x69
1045A:  CLRF   x6A
1045C:  CLRF   x6B
1045E:  CLRF   x6C
10460:  CLRF   x6D
10462:  CLRF   x6E
10464:  CLRF   x6F
10466:  CLRF   x70
10468:  CLRF   x71
1046A:  CLRF   x72
1046C:  CLRF   x73
1046E:  CLRF   x74
10470:  CLRF   x75
10472:  CLRF   x76
10474:  CLRF   x77
10476:  CLRF   x78
10478:  CLRF   x79
1047A:  CLRF   x7A
1047C:  CLRF   x7B
1047E:  CLRF   x7C
10480:  CLRF   x7D
10482:  CLRF   x7E
10484:  CLRF   x7F
10486:  CLRF   x80
10488:  CLRF   x81
1048A:  CLRF   x82
1048C:  CLRF   x83
1048E:  CLRF   x84
10490:  CLRF   x85
10492:  CLRF   x86
10494:  CLRF   x87
10496:  CLRF   x88
10498:  CLRF   x89
1049A:  CLRF   x8A
1049C:  CLRF   x8B
1049E:  CLRF   x8C
104A0:  CLRF   x8D
104A2:  CLRF   x8E
104A4:  CLRF   x8F
104A6:  CLRF   x90
104A8:  CLRF   x91
104AA:  CLRF   x92
104AC:  CLRF   x93
104AE:  CLRF   x94
104B0:  CLRF   x95
104B2:  CLRF   x96
104B4:  CLRF   x97
104B6:  CLRF   x98
104B8:  CLRF   x99
104BA:  CLRF   x9A
104BC:  CLRF   x9B
104BE:  CLRF   x9C
104C0:  CLRF   x9D
104C2:  CLRF   x9E
104C4:  CLRF   x9F
104C6:  CLRF   xA0
104C8:  CLRF   xA1
104CA:  CLRF   xA2
104CC:  CLRF   xA3
104CE:  CLRF   xA4
104D0:  CLRF   xA5
104D2:  CLRF   xA6
104D4:  CLRF   xA7
104D6:  CLRF   xA8
104D8:  CLRF   xA9
104DA:  CLRF   xAA
104DC:  CLRF   xAB
104DE:  CLRF   xAC
104E0:  CLRF   xAD
104E2:  CLRF   xAE
104E4:  CLRF   xAF
104E6:  CLRF   xB0
104E8:  CLRF   xB1
104EA:  CLRF   xB2
104EC:  CLRF   xB3
104EE:  CLRF   xB4
104F0:  CLRF   xB5
104F2:  CLRF   xB6
104F4:  CLRF   xB7
104F6:  CLRF   xB8
104F8:  CLRF   xB9
104FA:  CLRF   xBA
104FC:  CLRF   xBB
104FE:  CLRF   xBC
10500:  CLRF   xBD
10502:  CLRF   xBE
10504:  CLRF   xBF
10506:  CLRF   xC0
10508:  CLRF   xC1
1050A:  CLRF   xC2
1050C:  CLRF   xC3
1050E:  CLRF   xC4
10510:  CLRF   xC5
10512:  CLRF   xC6
10514:  CLRF   xC7
10516:  CLRF   xC8
10518:  CLRF   xC9
1051A:  CLRF   xCA
1051C:  CLRF   xCB
1051E:  CLRF   xCC
10520:  CLRF   xCD
10522:  CLRF   xCE
10524:  CLRF   xCF
10526:  CLRF   xD0
10528:  CLRF   xD1
1052A:  CLRF   xD2
1052C:  CLRF   xD3
1052E:  CLRF   xD4
10530:  CLRF   xD5
10532:  CLRF   xD6
10534:  CLRF   xD7
10536:  CLRF   xD8
10538:  CLRF   xD9
1053A:  CLRF   xDA
1053C:  CLRF   xDB
1053E:  CLRF   xDC
10540:  CLRF   xDD
10542:  CLRF   xDE
10544:  CLRF   xDF
10546:  CLRF   xE0
10548:  CLRF   xE1
1054A:  CLRF   xE2
1054C:  CLRF   xE3
1054E:  CLRF   xE4
10550:  CLRF   xE5
10552:  CLRF   xE6
10554:  CLRF   xE7
10556:  CLRF   xE8
10558:  CLRF   xE9
1055A:  CLRF   xEA
1055C:  CLRF   xEB
1055E:  CLRF   xEC
10560:  CLRF   xED
10562:  CLRF   xEE
10564:  CLRF   xEF
10566:  CLRF   xF0
10568:  CLRF   xF1
1056A:  CLRF   xF2
1056C:  CLRF   xF3
1056E:  CLRF   xF4
10570:  CLRF   xF5
10572:  CLRF   xF6
10574:  CLRF   xF7
10576:  CLRF   xF8
10578:  CLRF   xF9
1057A:  CLRF   xFA
1057C:  CLRF   xFB
1057E:  CLRF   xFC
10580:  CLRF   xFD
10582:  CLRF   xFE
10584:  CLRF   xFF
10586:  MOVLB  1
10588:  CLRF   x00
1058A:  CLRF   x01
1058C:  CLRF   x02
1058E:  CLRF   x03
10590:  CLRF   x04
10592:  CLRF   x05
10594:  CLRF   x06
10596:  CLRF   x07
10598:  CLRF   x08
1059A:  CLRF   x09
1059C:  CLRF   x0A
1059E:  CLRF   x0B
105A0:  CLRF   x0C
105A2:  CLRF   x0D
105A4:  CLRF   x0E
105A6:  CLRF   x0F
105A8:  CLRF   x10
105AA:  CLRF   x11
105AC:  CLRF   x12
105AE:  CLRF   x13
105B0:  MOVLW  30
105B2:  MOVWF  x14
105B4:  MOVLW  7C
105B6:  MOVWF  x15
105B8:  MOVLW  01
105BA:  MOVWF  x16
105BC:  MOVLW  01
105BE:  MOVWF  x17
105C0:  MOVLW  02
105C2:  MOVWF  x18
105C4:  MOVLW  7C
105C6:  MOVWF  x19
105C8:  CLRF   x1A
105CA:  MOVLW  09
105CC:  MOVWF  x1B
105CE:  MOVLW  01
105D0:  MOVWF  x1C
105D2:  CLRF   x1D
105D4:  MOVLW  02
105D6:  MOVWF  x1E
105D8:  MOVLW  01
105DA:  MOVWF  x1F
105DC:  CLRF   x8A
105DE:  CLRF   x8B
105E0:  CLRF   x8C
105E2:  CLRF   x8D
105E4:  CLRF   x8E
105E6:  CLRF   x8F
105E8:  CLRF   x90
105EA:  CLRF   x91
105EC:  CLRF   x92
105EE:  CLRF   x93
105F0:  CLRF   x94
105F2:  CLRF   x95
105F4:  CLRF   x96
105F6:  CLRF   x97
105F8:  CLRF   x98
105FA:  CLRF   x99
105FC:  CLRF   x9A
105FE:  CLRF   x9B
10600:  CLRF   x9C
10602:  CLRF   x9D
10604:  CLRF   x9E
10606:  CLRF   x9F
10608:  CLRF   xA0
1060A:  CLRF   xA1
1060C:  CLRF   xA2
1060E:  CLRF   xA3
10610:  CLRF   xA4
10612:  CLRF   xA5
10614:  CLRF   xA6
10616:  CLRF   xA7
10618:  CLRF   xA8
1061A:  CLRF   xA9
1061C:  CLRF   xAA
1061E:  CLRF   xAB
10620:  CLRF   xAC
10622:  CLRF   xAD
10624:  CLRF   xAE
10626:  CLRF   xAF
10628:  CLRF   xB0
1062A:  CLRF   xB1
1062C:  CLRF   xB2
1062E:  CLRF   xB3
10630:  CLRF   xB4
10632:  CLRF   xB5
10634:  CLRF   xB6
10636:  CLRF   xB7
10638:  CLRF   xB8
1063A:  CLRF   xB9
1063C:  CLRF   xBA
1063E:  CLRF   xBB
10640:  CLRF   xBC
10642:  CLRF   xBD
10644:  CLRF   xBE
10646:  CLRF   xBF
10648:  CLRF   xC0
1064A:  CLRF   xC1
1064C:  CLRF   xC2
1064E:  CLRF   xC3
10650:  CLRF   xC4
10652:  CLRF   xC5
10654:  CLRF   xC6
10656:  CLRF   xC7
10658:  CLRF   xC8
1065A:  CLRF   xC9
1065C:  CLRF   xCA
1065E:  CLRF   xCB
10660:  CLRF   xCC
10662:  CLRF   xCD
10664:  CLRF   xCE
10666:  CLRF   xCF
10668:  CLRF   xD0
1066A:  CLRF   xD1
1066C:  CLRF   xD2
1066E:  CLRF   xD3
10670:  CLRF   xD4
10672:  MOVLW  01
10674:  MOVWF  xD5
10676:  CLRF   xD6
10678:  CLRF   xD7
1067A:  CLRF   xD8
1067C:  CLRF   xD9
1067E:  CLRF   xDA
10680:  CLRF   xDB
10682:  CLRF   xDC
10684:  CLRF   xDD
10686:  CLRF   xDE
10688:  CLRF   xDF
1068A:  MOVLW  02
1068C:  MOVWF  xE0
1068E:  CLRF   xE1
10690:  CLRF   xE2
10692:  CLRF   xE3
10694:  CLRF   xE4
10696:  CLRF   xE5
10698:  CLRF   xE6
1069A:  CLRF   xE7
1069C:  CLRF   xE8
1069E:  CLRF   xE9
106A0:  CLRF   xEA
106A2:  MOVLW  03
106A4:  MOVWF  xEB
106A6:  CLRF   xEC
106A8:  CLRF   xED
106AA:  CLRF   xEE
106AC:  CLRF   xEF
106AE:  CLRF   xF0
106B0:  CLRF   xF1
106B2:  CLRF   xF2
106B4:  CLRF   xF3
106B6:  CLRF   xF4
106B8:  CLRF   xF5
106BA:  MOVLW  04
106BC:  MOVWF  xF6
106BE:  CLRF   xF7
106C0:  CLRF   xF8
106C2:  CLRF   xF9
106C4:  CLRF   xFA
106C6:  CLRF   xFB
106C8:  CLRF   xFC
106CA:  CLRF   xFD
106CC:  CLRF   xFE
106CE:  CLRF   xFF
106D0:  MOVLB  2
106D2:  CLRF   x00
106D4:  MOVLW  05
106D6:  MOVWF  x01
106D8:  CLRF   x02
106DA:  CLRF   x03
106DC:  CLRF   x04
106DE:  CLRF   x05
106E0:  CLRF   x06
106E2:  CLRF   x07
106E4:  CLRF   x08
106E6:  CLRF   x09
106E8:  CLRF   x0A
106EA:  CLRF   x0B
106EC:  MOVLW  06
106EE:  MOVWF  x0C
106F0:  CLRF   x0D
106F2:  CLRF   x0E
106F4:  CLRF   x0F
106F6:  CLRF   x10
106F8:  CLRF   x11
106FA:  CLRF   x12
106FC:  CLRF   x13
106FE:  CLRF   x14
10700:  CLRF   x15
10702:  CLRF   x16
10704:  MOVLW  01
10706:  MOVLB  1
10708:  MOVWF  x75
1070A:  MOVLW  2E
1070C:  MOVWF  x74
1070E:  MOVLW  01
10710:  MOVWF  x77
10712:  MOVLW  38
10714:  MOVWF  x76
10716:  MOVLW  01
10718:  MOVWF  x79
1071A:  MOVLW  42
1071C:  MOVWF  x78
1071E:  MOVLW  01
10720:  MOVWF  x7B
10722:  MOVLW  4C
10724:  MOVWF  x7A
10726:  MOVLW  01
10728:  MOVWF  x7D
1072A:  MOVLW  56
1072C:  MOVWF  x7C
1072E:  MOVLW  01
10730:  MOVWF  x7F
10732:  MOVLW  60
10734:  MOVWF  x7E
10736:  MOVLW  01
10738:  MOVWF  x81
1073A:  MOVLW  6A
1073C:  MOVWF  x80
1073E:  MOVLB  0
.................... { 
....................    delay_ms(100); // wait for power stable
10740:  MOVLW  64
10742:  MOVLB  B
10744:  MOVWF  xA3
10746:  MOVLB  0
10748:  CALL   1EAE
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
1074C:  MOVLW  50
1074E:  MOVWF  FF6
10750:  MOVLW  1D
10752:  MOVWF  FF7
10754:  MOVLW  00
10756:  MOVWF  FF8
10758:  CALL   1EDC
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM6.\r\n");
1075C:  MOVLW  96
1075E:  MOVWF  FF6
10760:  MOVLW  1D
10762:  MOVWF  FF7
10764:  MOVLW  00
10766:  MOVWF  FF8
10768:  CALL   1EDC
....................    fprintf(PC,"Last updated on %s %s, by Inoue.\r\n\r\n", __DATE__, __TIME__);
1076C:  MOVLW  C4
1076E:  MOVWF  FF6
10770:  MOVLW  1D
10772:  MOVWF  FF7
10774:  MOVLW  00
10776:  MOVWF  FF8
10778:  MOVLW  10
1077A:  MOVLB  3
1077C:  MOVWF  x16
1077E:  MOVLB  0
10780:  CALL   1F12
10784:  MOVLW  EA
10786:  MOVWF  FF6
10788:  MOVLW  1D
1078A:  MOVWF  FF7
1078C:  MOVLW  00
1078E:  MOVWF  FF8
10790:  CALL   1EDC
10794:  MOVLW  20
10796:  BTFSS  FA6.6
10798:  GOTO   10796
1079C:  MOVLB  E
1079E:  MOVWF  xF9
107A0:  MOVLW  F4
107A2:  MOVWF  FF6
107A4:  MOVLW  1D
107A6:  MOVWF  FF7
107A8:  MOVLW  00
107AA:  MOVWF  FF8
107AC:  MOVLB  0
107AE:  CALL   1EDC
107B2:  MOVLW  D9
107B4:  MOVWF  FF6
107B6:  MOVLW  1D
107B8:  MOVWF  FF7
107BA:  MOVLW  00
107BC:  MOVWF  FF8
107BE:  MOVLW  0F
107C0:  MOVLB  3
107C2:  MOVWF  x16
107C4:  MOVLB  0
107C6:  CALL   1F12
....................    
....................    // io_init();
....................    setup_uart_to_boss();
107CA:  GOTO   1F4C
....................    timer_init();
107CE:  GOTO   1F76
....................    ad7490_init();
107D2:  GOTO   21A2
....................    mcp4901_init();
107D6:  GOTO   24F2
....................    misf_init();
107DA:  CALL   35B4
....................    
....................    piclog_make(PICLOG_STARTUP,0x00);
107DE:  MOVLB  2
107E0:  CLRF   x84
107E2:  CLRF   x85
107E4:  MOVLB  0
107E6:  CALL   4C1A
.................... 
....................    int1 is_finished = FALSE;
107EA:  MOVLB  2
107EC:  BCF    x17.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
107EE:  MOVLW  FE
107F0:  MOVWF  FF6
107F2:  MOVLW  1D
107F4:  MOVWF  FF7
107F6:  MOVLW  00
107F8:  MOVWF  FF8
107FA:  MOVLB  0
107FC:  CALL   1EDC
....................    
....................    //enable_negative_power();
....................    connect_port1();
10800:  CALL   4D3E
....................    connect_port2();
10804:  CALL   4D46
....................    mcp4901_1_write(0);
10808:  MOVLB  A
1080A:  CLRF   x64
1080C:  CLRF   x63
1080E:  MOVLB  0
10810:  CALL   246E
....................    mcp4901_2_write(0);
10814:  MOVLB  A
10816:  CLRF   x64
10818:  CLRF   x63
1081A:  MOVLB  0
1081C:  CALL   24B0
....................    connect_negative_power1(TRUE); // CIGS1 Negative Power ON
10820:  MOVLW  01
10822:  MOVLB  2
10824:  MOVWF  x24
10826:  MOVLB  0
10828:  GOTO   4D4E
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
1082C:  MOVLW  24
1082E:  MOVWF  FF6
10830:  MOVLW  1E
10832:  MOVWF  FF7
10834:  MOVLW  00
10836:  MOVWF  FF8
10838:  CALL   1EDC
....................    
....................    //Start loop
....................    while(!is_finished)
1083C:  MOVLB  2
1083E:  BTFSS  x17.0
10840:  BRA    10848
10842:  MOVLB  0
10844:  GOTO   1091A
10848:  MOVLB  0
....................    {
....................       // unsigned int16 cigs1_amp = ad7490_read(ADC_CIGS2_AMP);
....................       // unsigned int16 cigs1_curr = ad7490_read(ADC_CIGS2_CURR);
....................       // unsigned int16 cigs1_volt = ad7490_read(ADC_CIGS2_VOLT);
....................       
....................       // fprintf(PC, "CIGS1 Amp: %04LX, Current: %04LX, Voltage: %04LX\r\n", cigs1_amp, cigs1_curr, cigs1_volt);
....................       
....................       // handle from boss commands
....................       if(boss_receive_buffer_size > 0)
1084A:  MOVF   4A,F
1084C:  BTFSC  FD8.2
1084E:  GOTO   108D2
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
10852:  MOVLB  2
10854:  CLRF   x2B
10856:  MOVLW  2A
10858:  MOVWF  x2A
1085A:  MOVFF  4A,22C
1085E:  MOVLB  0
10860:  GOTO   508A
10864:  MOVFF  02,03
10868:  MOVF   01,W
1086A:  MOVWF  FE1
1086C:  MOVFF  03,FE2
10870:  MOVLW  02
10872:  MOVWF  FEA
10874:  MOVLW  18
10876:  MOVWF  FE9
10878:  MOVLW  0C
1087A:  MOVWF  01
1087C:  MOVFF  FE6,FEE
10880:  DECFSZ 01,F
10882:  GOTO   1087C
....................          /*
....................          fprintf(PC, "Frame ID: %X\r\n", recieve_cmd.frame_id);
....................          fprintf(PC, "Content size: %u\r\n", recieve_cmd.size);
....................          fprintf(PC, "payload: ");
....................          for(int8 i = 0; i < recieve_cmd.size; i++)
....................             fprintf(PC, "%X ", recieve_cmd.content[i]);
....................          fprintf(PC, "\r\n\r\n");
....................          fprintf(PC, "is_exist: %d\r\n", recieve_cmd.is_exist);
....................          */
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
10886:  MOVLB  2
10888:  CLRF   x25
1088A:  MOVLW  2A
1088C:  MOVWF  x24
1088E:  CLRF   x27
10890:  MOVLW  4A
10892:  MOVWF  x26
10894:  MOVLB  0
10896:  GOTO   528C
....................          
....................          if(recieve_cmd.is_exist){
1089A:  MOVLB  2
1089C:  BTFSC  x1A.0
1089E:  BRA    108A6
108A0:  MOVLB  0
108A2:  GOTO   108D2
108A6:  MOVLB  0
....................             is_finished = execute_command(&recieve_cmd); // FIX: 戻り値を保持
108A8:  MOVLW  02
108AA:  MOVLB  2
108AC:  MOVWF  x25
108AE:  MOVLW  18
108B0:  MOVWF  x24
108B2:  MOVLB  0
108B4:  GOTO   FF64
108B8:  MOVLB  2
108BA:  BCF    x17.0
108BC:  BTFSC  01.0
108BE:  BSF    x17.0
....................             fprintf(PC,"\r\nwaiting for BOSS PIC command");
108C0:  MOVLW  42
108C2:  MOVWF  FF6
108C4:  MOVLW  1E
108C6:  MOVWF  FF7
108C8:  MOVLW  00
108CA:  MOVWF  FF8
108CC:  MOVLB  0
108CE:  CALL   1EDC
....................          }
....................       }
....................       
....................       // check `is break while loop`
....................       if(is_finished == TRUE)
108D2:  MOVLB  2
108D4:  BTFSC  x17.0
108D6:  BRA    108DE
108D8:  MOVLB  0
108DA:  GOTO   108E4
108DE:  MOVLB  0
....................          break;
108E0:  GOTO   1091A
....................          
....................       delay_ms(400);
108E4:  MOVLW  02
108E6:  MOVLB  2
108E8:  MOVWF  x24
108EA:  MOVLB  0
108EC:  MOVLW  C8
108EE:  MOVLB  B
108F0:  MOVWF  xA3
108F2:  MOVLB  0
108F4:  CALL   1EAE
108F8:  MOVLB  2
108FA:  DECFSZ x24,F
108FC:  BRA    10902
108FE:  BRA    10906
10900:  MOVLB  0
10902:  MOVLB  0
10904:  BRA    108EC
....................       fprintf(PC, ".");
10906:  MOVLW  2E
10908:  MOVLB  0
1090A:  BTFSS  FA6.6
1090C:  GOTO   1090A
10910:  MOVLB  E
10912:  MOVWF  xF9
10914:  MOVLB  0
10916:  GOTO   1083C
....................    }
....................    
....................    
....................    fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\nWait for BOSS PIC turn off me");
1091A:  MOVLW  62
1091C:  MOVWF  FF6
1091E:  MOVLW  1E
10920:  MOVWF  FF7
10922:  MOVLW  00
10924:  MOVWF  FF8
10926:  CALL   1EDC
....................    
....................    while (TRUE)
....................    {
....................       fprintf(PC, ".");
1092A:  MOVLW  2E
1092C:  BTFSS  FA6.6
1092E:  GOTO   1092C
10932:  MOVLB  E
10934:  MOVWF  xF9
....................       delay_ms(1000);
10936:  MOVLW  04
10938:  MOVLB  2
1093A:  MOVWF  x24
1093C:  MOVLB  0
1093E:  MOVLW  FA
10940:  MOVLB  B
10942:  MOVWF  xA3
10944:  MOVLB  0
10946:  CALL   1EAE
1094A:  MOVLB  2
1094C:  DECFSZ x24,F
1094E:  BRA    10954
10950:  BRA    10958
10952:  MOVLB  0
10954:  MOVLB  0
10956:  BRA    1093E
10958:  MOVLB  0
1095A:  GOTO   1092A
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
1095E:  MOVLW  A2
10960:  MOVWF  FF6
10962:  MOVLW  1E
10964:  MOVWF  FF7
10966:  MOVLW  00
10968:  MOVWF  FF8
1096A:  CALL   1EDC
....................    
.................... }
.................... // Enf of files
1096E:  SLEEP 

Configuration Fuses:
   Word  1: F6A0   STVREN NOXINST NODEBUG NOBROWNOUT BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS NODSWDT DSWDTOSC_INT
