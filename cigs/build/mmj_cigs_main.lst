CCS PCH C Compiler, Version 5.104, 57077               25-9-25 13:41

               Filename:   build\mmj_cigs_main.lst

               ROM used:   72862 bytes (56%)
                           Largest free fragment is 57918
               RAM used:   557 (16%) at main() level
                           3066 (86%) worst case
               Stack used: 9 locations (8 in main + 1 for interrupts)
               Stack size: 31

*
00000:  NOP   
00002:  GOTO   11730
*
00008:  NOP   
0000A:  NOP   
0000C:  NOP   
0000E:  NOP   
00010:  NOP   
00012:  NOP   
00014:  NOP   
00016:  NOP   
00018:  MOVWF  04
0001A:  MOVFF  FD8,05
0001E:  MOVFF  FE0,06
00022:  MOVLB  0
00024:  MOVFF  FE9,0C
00028:  MOVFF  FEA,07
0002C:  MOVFF  FE1,08
00030:  MOVFF  FE2,09
00034:  MOVFF  FD9,0A
00038:  MOVFF  FDA,0B
0003C:  MOVFF  FF3,12
00040:  MOVFF  FF4,13
00044:  MOVFF  FFA,14
00048:  MOVFF  FF5,15
0004C:  MOVFF  FF6,16
00050:  MOVFF  FF7,17
00054:  MOVFF  FF8,18
00058:  MOVFF  FFB,19
0005C:  MOVFF  00,0E
00060:  MOVFF  01,0F
00064:  MOVFF  02,10
00068:  MOVFF  03,11
0006C:  BTFSS  FF2.5
0006E:  GOTO   0078
00072:  BTFSC  FF2.2
00074:  GOTO   01B6
00078:  BTFSS  F9D.0
0007A:  GOTO   0084
0007E:  BTFSC  F9E.0
00080:  GOTO   0202
00084:  BTFSS  F61.5
00086:  GOTO   0090
0008A:  BTFSC  FA6.5
0008C:  GOTO   02A4
00090:  MOVFF  0E,00
00094:  MOVFF  0F,01
00098:  MOVFF  10,02
0009C:  MOVFF  11,03
000A0:  MOVFF  0C,FE9
000A4:  MOVFF  07,FEA
000A8:  BSF    07.7
000AA:  MOVFF  08,FE1
000AE:  MOVFF  09,FE2
000B2:  MOVFF  0A,FD9
000B6:  MOVFF  0B,FDA
000BA:  MOVFF  12,FF3
000BE:  MOVFF  13,FF4
000C2:  MOVFF  14,FFA
000C6:  MOVFF  15,FF5
000CA:  MOVFF  16,FF6
000CE:  MOVFF  17,FF7
000D2:  MOVFF  18,FF8
000D6:  MOVFF  19,FFB
000DA:  MOVF   04,W
000DC:  MOVFF  06,FE0
000E0:  MOVFF  05,FD8
000E4:  RETFIE 0
.................... #include "mmj_cigs_main.h"  // ルート直下のヘッダー
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... #opt 0 // 0 = no optimization
.................... 
.................... //==============================================================================
.................... // CCS C 最適化構造: ヘッダー分散 + .cファイル統合
.................... //==============================================================================
.................... 
.................... // レベル1: システム設定
.................... #include "hal/mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
000E6:  CLRF   FF7
000E8:  ADDLW  FA
000EA:  MOVWF  FF6
000EC:  MOVLW  00
000EE:  ADDWFC FF7,F
000F0:  MOVLW  00
000F2:  MOVWF  FF8
000F4:  TBLRD*+
000F6:  MOVF   FF5,W
000F8:  RETURN 0
000FA:  DATA 00,00
000FC:  DATA AA,06
000FE:  DATA FF,0F
00100:  DATA AA,06
00102:  DATA 00,10
00104:  DATA 00,00
00106:  DATA 00,10
00108:  DATA AA,06
0010A:  DATA FF,1F
0010C:  DATA AA,06
0010E:  DATA 00,00
00110:  DATA 14,00
00112:  DATA 00,20
00114:  DATA AA,06
00116:  DATA FF,1F
00118:  DATA B4,06
0011A:  DATA 00,00
0011C:  DATA 14,00
0011E:  DATA 00,20
00120:  DATA B4,06
00122:  DATA FF,1F
00124:  DATA BE,06
00126:  DATA 00,00
00128:  DATA 0A,00
0012A:  DATA 00,20
0012C:  DATA BE,06
0012E:  DATA FF,2F
00130:  DATA FE,06
00132:  DATA 00,00
00134:  DATA 40,00
00136:  DATA 00,30
00138:  DATA FE,06
0013A:  DATA FF,2F
0013C:  DATA 08,07
0013E:  DATA 00,00
00140:  DATA 0A,00
00142:  DATA 00,30
00144:  DATA 08,07
00146:  DATA FF,3F
00148:  DATA 48,07
0014A:  DATA 00,00
0014C:  DATA 40,00
0014E:  CLRF   FF7
00150:  ADDLW  62
00152:  MOVWF  FF6
00154:  MOVLW  01
00156:  ADDWFC FF7,F
00158:  MOVLW  00
0015A:  MOVWF  FF8
0015C:  TBLRD*+
0015E:  MOVF   FF5,W
00160:  RETURN 0
00162:  DATA 00,00
00164:  DATA 00,00
00166:  DATA FF,0F
00168:  DATA 00,00
0016A:  DATA 00,10
0016C:  DATA 00,00
0016E:  DATA 00,00
00170:  DATA 01,00
00172:  DATA FF,0F
00174:  DATA 14,00
00176:  DATA 00,00
00178:  DATA 14,00
0017A:  DATA 00,10
0017C:  DATA 28,00
0017E:  DATA FF,0F
00180:  DATA 32,00
00182:  DATA 00,00
00184:  DATA 14,00
00186:  DATA 00,10
00188:  DATA 72,00
0018A:  DATA FF,0F
0018C:  DATA 7C,00
0018E:  DATA 00,00
00190:  DATA 0A,00
00192:  DATA 00,10
00194:  DATA 7C,00
00196:  DATA FF,0F
00198:  DATA BC,00
0019A:  DATA 00,00
0019C:  DATA 40,00
0019E:  DATA 00,10
001A0:  DATA 72,00
001A2:  DATA FF,0F
001A4:  DATA 7C,00
001A6:  DATA 00,00
001A8:  DATA 0A,00
001AA:  DATA 00,10
001AC:  DATA 7C,00
001AE:  DATA FF,0F
001B0:  DATA BC,00
001B2:  DATA 00,00
001B4:  DATA 40,00
*
0025C:  DATA 54,69
0025E:  DATA 6D,65
00260:  DATA 72,20
00262:  DATA 49,6E
00264:  DATA 69,74
00266:  DATA 69,61
00268:  DATA 6C,69
0026A:  DATA 7A,65
0026C:  DATA 0D,0A
0026E:  DATA 00,00
00270:  DATA 09,43
00272:  DATA 6F,6D
00274:  DATA 70,6C
00276:  DATA 65,74
00278:  DATA 65,0D
0027A:  DATA 0A,00
*
002EC:  DATA 55,41
002EE:  DATA 52,54
002F0:  DATA 20,49
002F2:  DATA 6E,69
002F4:  DATA 74,69
002F6:  DATA 61,6C
002F8:  DATA 69,7A
002FA:  DATA 65,0D
002FC:  DATA 0A,00
002FE:  DATA 09,43
00300:  DATA 6F,6D
00302:  DATA 70,6C
00304:  DATA 65,74
00306:  DATA 65,0D
00308:  DATA 0A,00
0030A:  DATA 41,44
0030C:  DATA 37,34
0030E:  DATA 39,30
00310:  DATA 20,49
00312:  DATA 6E,69
00314:  DATA 74,69
00316:  DATA 61,6C
00318:  DATA 69,7A
0031A:  DATA 65,0D
0031C:  DATA 0A,00
0031E:  DATA 09,43
00320:  DATA 6F,6E
00322:  DATA 6E,65
00324:  DATA 63,74
00326:  DATA 20,65
00328:  DATA 72,72
0032A:  DATA 6F,72
0032C:  DATA 21,0D
0032E:  DATA 0A,00
00330:  DATA 09,43
00332:  DATA 6F,6E
00334:  DATA 6E,65
00336:  DATA 63,74
00338:  DATA 20,73
0033A:  DATA 75,63
0033C:  DATA 63,65
0033E:  DATA 73,73
00340:  DATA 66,75
00342:  DATA 6C,0D
00344:  DATA 0A,00
00346:  DATA 09,43
00348:  DATA 6F,6D
0034A:  DATA 70,6C
0034C:  DATA 65,74
0034E:  DATA 65,0D
00350:  DATA 0A,00
00352:  DATA 4D,43
00354:  DATA 50,34
00356:  DATA 39,30
00358:  DATA 31,20
0035A:  DATA 49,6E
0035C:  DATA 69,74
0035E:  DATA 69,61
00360:  DATA 6C,69
00362:  DATA 7A,65
00364:  DATA 0D,0A
00366:  DATA 00,00
00368:  DATA 09,5B
0036A:  DATA 44,41
0036C:  DATA 43,20
0036E:  DATA 50,6F
00370:  DATA 72,74
00372:  DATA 20,31
00374:  DATA 5D,20
00376:  DATA 43,6F
00378:  DATA 6E,6E
0037A:  DATA 65,63
0037C:  DATA 74,20
0037E:  DATA 65,72
00380:  DATA 72,6F
00382:  DATA 72,21
00384:  DATA 0D,0A
00386:  DATA 00,00
00388:  DATA 09,5B
0038A:  DATA 44,41
0038C:  DATA 43,20
0038E:  DATA 50,6F
00390:  DATA 72,74
00392:  DATA 20,31
00394:  DATA 5D,20
00396:  DATA 43,6F
00398:  DATA 6E,6E
0039A:  DATA 65,63
0039C:  DATA 74,20
0039E:  DATA 73,75
003A0:  DATA 63,63
003A2:  DATA 65,73
003A4:  DATA 73,66
003A6:  DATA 75,6C
003A8:  DATA 0D,0A
003AA:  DATA 00,00
003AC:  DATA 09,5B
003AE:  DATA 44,41
003B0:  DATA 43,20
003B2:  DATA 50,6F
003B4:  DATA 72,74
003B6:  DATA 20,32
003B8:  DATA 5D,20
003BA:  DATA 43,6F
003BC:  DATA 6E,6E
003BE:  DATA 65,63
003C0:  DATA 74,20
003C2:  DATA 65,72
003C4:  DATA 72,6F
003C6:  DATA 72,21
003C8:  DATA 0D,0A
003CA:  DATA 00,00
003CC:  DATA 09,5B
003CE:  DATA 44,41
003D0:  DATA 43,20
003D2:  DATA 50,6F
003D4:  DATA 72,74
003D6:  DATA 20,32
003D8:  DATA 5D,20
003DA:  DATA 43,6F
003DC:  DATA 6E,6E
003DE:  DATA 65,63
003E0:  DATA 74,20
003E2:  DATA 73,75
003E4:  DATA 63,63
003E6:  DATA 65,73
003E8:  DATA 73,66
003EA:  DATA 75,6C
003EC:  DATA 0D,0A
003EE:  DATA 00,00
003F0:  DATA 09,43
003F2:  DATA 6F,6D
003F4:  DATA 70,6C
003F6:  DATA 65,74
003F8:  DATA 65,0D
003FA:  DATA 0A,00
003FC:  DATA 45,6E
003FE:  DATA 71,75
00400:  DATA 65,75
00402:  DATA 65,20
00404:  DATA 46,6C
00406:  DATA 61,73
00408:  DATA 68,20
0040A:  DATA 4F,70
0040C:  DATA 65,72
0040E:  DATA 61,74
00410:  DATA 69,6F
00412:  DATA 6E,0D
00414:  DATA 0A,00
00416:  DATA 46,6C
00418:  DATA 61,73
0041A:  DATA 68,20
0041C:  DATA 71,75
0041E:  DATA 65,75
00420:  DATA 65,20
00422:  DATA 69,73
00424:  DATA 20,66
00426:  DATA 75,6C
00428:  DATA 6C,21
0042A:  DATA 21,21
0042C:  DATA 0D,0A
0042E:  DATA 00,00
00430:  DATA 46,6C
00432:  DATA 61,73
00434:  DATA 68,20
00436:  DATA 71,75
00438:  DATA 65,75
0043A:  DATA 65,20
0043C:  DATA 69,73
0043E:  DATA 20,65
00440:  DATA 6D,70
00442:  DATA 74,79
00444:  DATA 0D,0A
00446:  DATA 00,00
00448:  DATA 0D,0A
0044A:  DATA 53,74
0044C:  DATA 61,72
0044E:  DATA 74,20
00450:  DATA 6D,61
00452:  DATA 6B,65
00454:  DATA 5F,72
00456:  DATA 65,63
00458:  DATA 65,69
0045A:  DATA 76,65
0045C:  DATA 5F,63
0045E:  DATA 6F,6D
00460:  DATA 6D,61
00462:  DATA 6E,64
00464:  DATA 0D,0A
00466:  DATA 00,00
00468:  DATA 09,5B
0046A:  DATA 42,4F
0046C:  DATA 53,53
0046E:  DATA 5D,20
00470:  DATA 3E,3E
00472:  DATA 3E,20
00474:  DATA 00,00
00476:  DATA 45,6E
00478:  DATA 64,20
0047A:  DATA 6D,61
0047C:  DATA 6B,65
0047E:  DATA 5F,72
00480:  DATA 65,63
00482:  DATA 69,76
00484:  DATA 65,5F
00486:  DATA 63,6F
00488:  DATA 6D,6D
0048A:  DATA 61,6E
0048C:  DATA 64,0D
0048E:  DATA 0A,0D
00490:  DATA 0A,00
00492:  DATA 73,69
00494:  DATA 67,6E
00496:  DATA 61,6C
00498:  DATA 20,65
0049A:  DATA 6E,64
0049C:  DATA 20,77
0049E:  DATA 69,74
004A0:  DATA 68,20
004A2:  DATA 53,46
004A4:  DATA 44,0D
004A6:  DATA 0A,00
004A8:  DATA 64,6F
004AA:  DATA 6E,27
004AC:  DATA 74,20
004AE:  DATA 66,69
004B0:  DATA 6E,64
004B2:  DATA 20,53
004B4:  DATA 46,44
004B6:  DATA 0D,0A
004B8:  DATA 00,00
004BA:  DATA 09,2D
004BC:  DATA 3E,20
004BE:  DATA 49,6E
004C0:  DATA 76,61
004C2:  DATA 6C,69
004C4:  DATA 64,20
004C6:  DATA 46,72
004C8:  DATA 61,6D
004CA:  DATA 65,20
004CC:  DATA 49,44
004CE:  DATA 20,72
004D0:  DATA 65,63
004D2:  DATA 65,69
004D4:  DATA 76,65
004D6:  DATA 64,3A
004D8:  DATA 20,25
004DA:  DATA 58,0D
004DC:  DATA 0A,00
004DE:  DATA 09,2D
004E0:  DATA 3E,20
004E2:  DATA 43,52
004E4:  DATA 43,20
004E6:  DATA 65,72
004E8:  DATA 72,6F
004EA:  DATA 72,21
004EC:  DATA 0D,0A
004EE:  DATA 00,00
004F0:  DATA 09,09
004F2:  DATA 2D,3E
004F4:  DATA 20,72
004F6:  DATA 65,63
004F8:  DATA 65,69
004FA:  DATA 76,65
004FC:  DATA 64,20
004FE:  DATA 43,52
00500:  DATA 43,3A
00502:  DATA 20,25
00504:  DATA 58,0D
00506:  DATA 0A,00
00508:  DATA 09,09
0050A:  DATA 20,20
0050C:  DATA 20,63
0050E:  DATA 6F,6C
00510:  DATA 6C,65
00512:  DATA 63,74
00514:  DATA 20,43
00516:  DATA 52,43
00518:  DATA 20,3A
0051A:  DATA 20,25
0051C:  DATA 58,0D
0051E:  DATA 0A,00
00520:  DATA 09,2D
00522:  DATA 3E,20
00524:  DATA 49,6E
00526:  DATA 76,61
00528:  DATA 6C,69
0052A:  DATA 64,20
0052C:  DATA 64,65
0052E:  DATA 76,69
00530:  DATA 63,65
00532:  DATA 20,49
00534:  DATA 44,20
00536:  DATA 72,65
00538:  DATA 63,65
0053A:  DATA 69,76
0053C:  DATA 65,64
0053E:  DATA 0D,0A
00540:  DATA 00,00
00542:  DATA 09,09
00544:  DATA 2D,3E
00546:  DATA 20,72
00548:  DATA 65,63
0054A:  DATA 65,69
0054C:  DATA 76,65
0054E:  DATA 64,3A
00550:  DATA 20,20
00552:  DATA 20,20
00554:  DATA 20,25
00556:  DATA 58,0D
00558:  DATA 0A,00
0055A:  DATA 09,09
0055C:  DATA 20,20
0055E:  DATA 20,4D
00560:  DATA 79,20
00562:  DATA 64,65
00564:  DATA 76,69
00566:  DATA 63,65
00568:  DATA 20,49
0056A:  DATA 44,3A
0056C:  DATA 20,25
0056E:  DATA 58,0D
00570:  DATA 0A,00
00572:  DATA 09,5B
00574:  DATA 42,4F
00576:  DATA 53,53
00578:  DATA 5D,20
0057A:  DATA 3C,3C
0057C:  DATA 3C,20
0057E:  DATA 00,00
00580:  DATA 53,74
00582:  DATA 61,72
00584:  DATA 74,20
00586:  DATA 53,4D
00588:  DATA 46,20
0058A:  DATA 75,73
0058C:  DATA 69,6E
0058E:  DATA 67,20
00590:  DATA 72,65
00592:  DATA 71,65
00594:  DATA 73,74
00596:  DATA 20,73
00598:  DATA 65,61
0059A:  DATA 71,75
0059C:  DATA 65,6E
0059E:  DATA 63,65
005A0:  DATA 0D,0A
005A2:  DATA 00,00
005A4:  DATA 45,72
005A6:  DATA 72,6F
005A8:  DATA 72,21
005AA:  DATA 20,52
005AC:  DATA 65,63
005AE:  DATA 65,69
005B0:  DATA 76,69
005B2:  DATA 6E,67
005B4:  DATA 20,63
005B6:  DATA 6F,6D
005B8:  DATA 6D,61
005BA:  DATA 6E,64
005BC:  DATA 20,69
005BE:  DATA 6E,63
005C0:  DATA 6F,6E
005C2:  DATA 73,69
005C4:  DATA 73,74
005C6:  DATA 65,6E
005C8:  DATA 74,20
005CA:  DATA 77,69
005CC:  DATA 74,68
005CE:  DATA 20,74
005D0:  DATA 68,65
005D2:  DATA 20,64
005D4:  DATA 65,73
005D6:  DATA 69,67
005D8:  DATA 6E,0D
005DA:  DATA 0A,00
005DC:  DATA 53,4D
005DE:  DATA 46,20
005E0:  DATA 75,73
005E2:  DATA 65,20
005E4:  DATA 72,65
005E6:  DATA 71,75
005E8:  DATA 65,73
005EA:  DATA 74,20
005EC:  DATA 61,6C
005EE:  DATA 6C,6F
005F0:  DATA 77,65
005F2:  DATA 64,0D
005F4:  DATA 0A,00
005F6:  DATA 53,4D
005F8:  DATA 46,20
005FA:  DATA 75,73
005FC:  DATA 65,20
005FE:  DATA 72,65
00600:  DATA 71,75
00602:  DATA 65,73
00604:  DATA 74,20
00606:  DATA 64,65
00608:  DATA 6E,79
0060A:  DATA 65,64
0060C:  DATA 0D,0A
0060E:  DATA 00,00
00610:  DATA 52,65
00612:  DATA 74,72
00614:  DATA 79,20
00616:  DATA 72,65
00618:  DATA 71,75
0061A:  DATA 65,73
0061C:  DATA 74,20
0061E:  DATA 74,6F
00620:  DATA 20,42
00622:  DATA 4F,53
00624:  DATA 53,20
00626:  DATA 50,49
00628:  DATA 43,0D
0062A:  DATA 0A,00
0062C:  DATA 45,72
0062E:  DATA 72,6F
00630:  DATA 72,21
00632:  DATA 20,52
00634:  DATA 65,63
00636:  DATA 65,69
00638:  DATA 76,69
0063A:  DATA 6E,67
0063C:  DATA 20,63
0063E:  DATA 6F,6D
00640:  DATA 6D,61
00642:  DATA 6E,64
00644:  DATA 20,69
00646:  DATA 6E,63
00648:  DATA 6F,6E
0064A:  DATA 73,69
0064C:  DATA 73,74
0064E:  DATA 65,6E
00650:  DATA 74,20
00652:  DATA 77,69
00654:  DATA 74,68
00656:  DATA 20,74
00658:  DATA 68,65
0065A:  DATA 20,64
0065C:  DATA 65,73
0065E:  DATA 69,67
00660:  DATA 6E,0D
00662:  DATA 0A,00
00664:  DATA 45,6E
00666:  DATA 64,20
00668:  DATA 53,4D
0066A:  DATA 46,20
0066C:  DATA 75,73
0066E:  DATA 69,6E
00670:  DATA 67,20
00672:  DATA 72,65
00674:  DATA 71,65
00676:  DATA 73,74
00678:  DATA 20,73
0067A:  DATA 65,61
0067C:  DATA 71,75
0067E:  DATA 65,6E
00680:  DATA 63,65
00682:  DATA 0D,0A
00684:  DATA 00,00
00686:  DATA 56,6F
00688:  DATA 6C,74
0068A:  DATA 31,2C
0068C:  DATA 43,75
0068E:  DATA 72,72
00690:  DATA 31,2C
00692:  DATA 56,6F
00694:  DATA 6C,74
00696:  DATA 32,2C
00698:  DATA 43,75
0069A:  DATA 72,72
0069C:  DATA 32,0D
0069E:  DATA 0A,00
006A0:  DATA 5B,50
006A2:  DATA 49,43
006A4:  DATA 4C,4F
006A6:  DATA 47,5D
006A8:  DATA 20,3A
006AA:  DATA 20,00
006AC:  DATA 53,4D
006AE:  DATA 46,20
006B0:  DATA 44,61
006B2:  DATA 74,61
006B4:  DATA 20,54
006B6:  DATA 61,62
006B8:  DATA 6C,65
006BA:  DATA 20,49
006BC:  DATA 6E,69
006BE:  DATA 74,69
006C0:  DATA 61,6C
006C2:  DATA 69,7A
006C4:  DATA 65,0D
006C6:  DATA 0A,00
006C8:  DATA 43,52
006CA:  DATA 43,20
006CC:  DATA 76,65
006CE:  DATA 72,69
006D0:  DATA 66,69
006D2:  DATA 63,61
006D4:  DATA 74,69
006D6:  DATA 6F,6E
006D8:  DATA 20,70
006DA:  DATA 61,73
006DC:  DATA 73,65
006DE:  DATA 64,20
006E0:  DATA 6F,6E
006E2:  DATA 20,61
006E4:  DATA 74,74
006E6:  DATA 65,6D
006E8:  DATA 70,74
006EA:  DATA 20,25
006EC:  DATA 64,0D
006EE:  DATA 0A,00
006F0:  DATA 43,52
006F2:  DATA 43,20
006F4:  DATA 76,65
006F6:  DATA 72,69
006F8:  DATA 66,69
006FA:  DATA 63,61
006FC:  DATA 74,69
006FE:  DATA 6F,6E
00700:  DATA 20,66
00702:  DATA 61,69
00704:  DATA 6C,65
00706:  DATA 64,20
00708:  DATA 61,66
0070A:  DATA 74,65
0070C:  DATA 72,20
0070E:  DATA 25,64
00710:  DATA 20,61
00712:  DATA 74,74
00714:  DATA 65,6D
00716:  DATA 70,74
00718:  DATA 73,0D
0071A:  DATA 0A,00
0071C:  DATA 43,52
0071E:  DATA 43,20
00720:  DATA 76,65
00722:  DATA 72,69
00724:  DATA 66,69
00726:  DATA 63,61
00728:  DATA 74,69
0072A:  DATA 6F,6E
0072C:  DATA 20,70
0072E:  DATA 61,73
00730:  DATA 73,65
00732:  DATA 64,20
00734:  DATA 6F,6E
00736:  DATA 20,61
00738:  DATA 74,74
0073A:  DATA 65,6D
0073C:  DATA 70,74
0073E:  DATA 20,25
00740:  DATA 64,0D
00742:  DATA 0A,00
00744:  DATA 45,72
00746:  DATA 72,6F
00748:  DATA 72,3A
0074A:  DATA 20,43
0074C:  DATA 52,43
0074E:  DATA 20,76
00750:  DATA 65,72
00752:  DATA 69,66
00754:  DATA 69,63
00756:  DATA 61,74
00758:  DATA 69,6F
0075A:  DATA 6E,20
0075C:  DATA 66,61
0075E:  DATA 69,6C
00760:  DATA 65,64
00762:  DATA 20,61
00764:  DATA 66,74
00766:  DATA 65,72
00768:  DATA 20,25
0076A:  DATA 64,20
0076C:  DATA 61,74
0076E:  DATA 74,65
00770:  DATA 6D,70
00772:  DATA 74,73
00774:  DATA 0D,0A
00776:  DATA 00,00
00778:  DATA 0D,0A
0077A:  DATA 5B,53
0077C:  DATA 4D,46
0077E:  DATA 20,43
00780:  DATA 6F,75
00782:  DATA 6E,74
00784:  DATA 65,72
00786:  DATA 20,53
00788:  DATA 74,61
0078A:  DATA 74,75
0078C:  DATA 73,5D
0078E:  DATA 0D,0A
00790:  DATA 00,00
00792:  DATA 50,49
00794:  DATA 43,4C
00796:  DATA 4F,47
00798:  DATA 20,20
0079A:  DATA 20,20
0079C:  DATA 20,3A
0079E:  DATA 20,55
007A0:  DATA 73,65
007A2:  DATA 64,3D
007A4:  DATA 25,6C
007A6:  DATA 75,2C
007A8:  DATA 20,55
007AA:  DATA 6E,63
007AC:  DATA 6F,70
007AE:  DATA 69,65
007B0:  DATA 64,3D
007B2:  DATA 25,75
007B4:  DATA 0D,0A
007B6:  DATA 00,00
007B8:  DATA 45,4E
007BA:  DATA 56,49
007BC:  DATA 52,4F
007BE:  DATA 20,20
007C0:  DATA 20,20
007C2:  DATA 20,3A
007C4:  DATA 20,55
007C6:  DATA 73,65
007C8:  DATA 64,3D
007CA:  DATA 25,6C
007CC:  DATA 75,2C
007CE:  DATA 20,55
007D0:  DATA 6E,63
007D2:  DATA 6F,70
007D4:  DATA 69,65
007D6:  DATA 64,3D
007D8:  DATA 25,75
007DA:  DATA 0D,0A
007DC:  DATA 00,00
007DE:  DATA 49,56
007E0:  DATA 31,5F
007E2:  DATA 48,45
007E4:  DATA 41,44
007E6:  DATA 45,52
007E8:  DATA 20,3A
007EA:  DATA 20,55
007EC:  DATA 73,65
007EE:  DATA 64,3D
007F0:  DATA 25,6C
007F2:  DATA 75,2C
007F4:  DATA 20,55
007F6:  DATA 6E,63
007F8:  DATA 6F,70
007FA:  DATA 69,65
007FC:  DATA 64,3D
007FE:  DATA 25,75
00800:  DATA 0D,0A
00802:  DATA 00,00
00804:  DATA 49,56
00806:  DATA 31,5F
00808:  DATA 44,41
0080A:  DATA 54,41
0080C:  DATA 20,20
0080E:  DATA 20,3A
00810:  DATA 20,55
00812:  DATA 73,65
00814:  DATA 64,3D
00816:  DATA 25,6C
00818:  DATA 75,2C
0081A:  DATA 20,55
0081C:  DATA 6E,63
0081E:  DATA 6F,70
00820:  DATA 69,65
00822:  DATA 64,3D
00824:  DATA 25,75
00826:  DATA 0D,0A
00828:  DATA 00,00
0082A:  DATA 49,56
0082C:  DATA 32,5F
0082E:  DATA 48,45
00830:  DATA 41,44
00832:  DATA 45,52
00834:  DATA 20,3A
00836:  DATA 20,55
00838:  DATA 73,65
0083A:  DATA 64,3D
0083C:  DATA 25,6C
0083E:  DATA 75,2C
00840:  DATA 20,55
00842:  DATA 6E,63
00844:  DATA 6F,70
00846:  DATA 69,65
00848:  DATA 64,3D
0084A:  DATA 25,75
0084C:  DATA 0D,0A
0084E:  DATA 00,00
00850:  DATA 49,56
00852:  DATA 32,5F
00854:  DATA 44,41
00856:  DATA 54,41
00858:  DATA 20,20
0085A:  DATA 20,3A
0085C:  DATA 20,55
0085E:  DATA 73,65
00860:  DATA 64,3D
00862:  DATA 25,6C
00864:  DATA 75,2C
00866:  DATA 20,55
00868:  DATA 6E,63
0086A:  DATA 6F,70
0086C:  DATA 69,65
0086E:  DATA 64,3D
00870:  DATA 25,75
00872:  DATA 0D,0A
00874:  DATA 00,00
00876:  DATA 2D,2D
00878:  DATA 2D,2D
0087A:  DATA 2D,2D
0087C:  DATA 2D,2D
0087E:  DATA 2D,2D
00880:  DATA 2D,2D
00882:  DATA 2D,2D
00884:  DATA 2D,2D
00886:  DATA 2D,2D
00888:  DATA 2D,2D
0088A:  DATA 2D,2D
0088C:  DATA 2D,2D
0088E:  DATA 2D,2D
00890:  DATA 2D,2D
00892:  DATA 2D,2D
00894:  DATA 0D,0A
00896:  DATA 0D,0A
00898:  DATA 00,00
0089A:  DATA 0D,0A
0089C:  DATA 5F,5F
0089E:  DATA 5F,5F
008A0:  DATA 5F,5F
008A2:  DATA 5F,5F
008A4:  DATA 5F,5F
008A6:  DATA 5F,5F
008A8:  DATA 5F,5F
008AA:  DATA 5F,5F
008AC:  DATA 5F,5F
008AE:  DATA 5F,5F
008B0:  DATA 5F,5F
008B2:  DATA 5F,5F
008B4:  DATA 5F,5F
008B6:  DATA 5F,5F
008B8:  DATA 5F,5F
008BA:  DATA 5F,0D
008BC:  DATA 0A,00
008BE:  DATA 5F,5F
008C0:  DATA 5F,5F
008C2:  DATA 5F,5F
008C4:  DATA 5F,5F
008C6:  DATA 5F,53
008C8:  DATA 74,61
008CA:  DATA 72,74
008CC:  DATA 20,63
008CE:  DATA 6F,70
008D0:  DATA 79,5F
008D2:  DATA 64,61
008D4:  DATA 74,61
008D6:  DATA 5F,5F
008D8:  DATA 5F,5F
008DA:  DATA 5F,5F
008DC:  DATA 5F,5F
008DE:  DATA 5F,0D
008E0:  DATA 0A,00
008E2:  DATA 45,72
008E4:  DATA 72,6F
008E6:  DATA 72,3A
008E8:  DATA 20,4D
008EA:  DATA 49,53
008EC:  DATA 20,46
008EE:  DATA 4D,20
008F0:  DATA 69,73
008F2:  DATA 20,6E
008F4:  DATA 6F,74
008F6:  DATA 20,63
008F8:  DATA 6F,6E
008FA:  DATA 6E,65
008FC:  DATA 63,74
008FE:  DATA 65,64
00900:  DATA 0D,0A
00902:  DATA 00,00
00904:  DATA 45,72
00906:  DATA 72,6F
00908:  DATA 72,3A
0090A:  DATA 20,53
0090C:  DATA 4D,46
0090E:  DATA 20,69
00910:  DATA 73,20
00912:  DATA 6E,6F
00914:  DATA 74,20
00916:  DATA 63,6F
00918:  DATA 6E,6E
0091A:  DATA 65,63
0091C:  DATA 74,65
0091E:  DATA 64,0D
00920:  DATA 0A,00
00922:  DATA 5B,53
00924:  DATA 4D,46
00926:  DATA 20,41
00928:  DATA 44,44
0092A:  DATA 52,45
0092C:  DATA 53,53
0092E:  DATA 5D,0D
00930:  DATA 0A,00
00932:  DATA 09,2D
00934:  DATA 2D,2D
00936:  DATA 2D,2D
00938:  DATA 2D,2D
0093A:  DATA 2D,2D
0093C:  DATA 2D,2D
0093E:  DATA 2D,09
00940:  DATA 2D,2D
00942:  DATA 2D,2D
00944:  DATA 2D,2D
00946:  DATA 2D,2D
00948:  DATA 2D,2D
0094A:  DATA 2D,2D
0094C:  DATA 2D,09
0094E:  DATA 2D,2D
00950:  DATA 2D,2D
00952:  DATA 2D,2D
00954:  DATA 2D,2D
00956:  DATA 2D,2D
00958:  DATA 2D,2D
0095A:  DATA 2D,0D
0095C:  DATA 0A,00
0095E:  DATA 09,53
00960:  DATA 54,41
00962:  DATA 52,54
00964:  DATA 09,30
00966:  DATA 78,25
00968:  DATA 30,38
0096A:  DATA 4C,58
0096C:  DATA 0D,0A
0096E:  DATA 00,00
00970:  DATA 09,45
00972:  DATA 4E,44
00974:  DATA 09,30
00976:  DATA 78,25
00978:  DATA 30,38
0097A:  DATA 4C,58
0097C:  DATA 0D,0A
0097E:  DATA 00,00
00980:  DATA 09,55
00982:  DATA 53,45
00984:  DATA 44,09
00986:  DATA 30,78
00988:  DATA 25,30
0098A:  DATA 38,4C
0098C:  DATA 58,0D
0098E:  DATA 0A,00
00990:  DATA 09,4E
00992:  DATA 45,58
00994:  DATA 54,09
00996:  DATA 30,78
00998:  DATA 25,30
0099A:  DATA 38,4C
0099C:  DATA 58,0D
0099E:  DATA 0A,00
009A0:  DATA 5B,4D
009A2:  DATA 49,53
009A4:  DATA 46,20
009A6:  DATA 41,44
009A8:  DATA 44,52
009AA:  DATA 45,53
009AC:  DATA 53,5D
009AE:  DATA 0D,0A
009B0:  DATA 00,00
009B2:  DATA 09,2D
009B4:  DATA 2D,2D
009B6:  DATA 2D,2D
009B8:  DATA 2D,2D
009BA:  DATA 2D,2D
009BC:  DATA 2D,2D
009BE:  DATA 2D,09
009C0:  DATA 2D,2D
009C2:  DATA 2D,2D
009C4:  DATA 2D,2D
009C6:  DATA 2D,2D
009C8:  DATA 2D,2D
009CA:  DATA 2D,2D
009CC:  DATA 2D,09
009CE:  DATA 2D,2D
009D0:  DATA 2D,2D
009D2:  DATA 2D,2D
009D4:  DATA 2D,2D
009D6:  DATA 2D,2D
009D8:  DATA 2D,2D
009DA:  DATA 2D,0D
009DC:  DATA 0A,00
009DE:  DATA 09,53
009E0:  DATA 54,41
009E2:  DATA 52,54
009E4:  DATA 09,30
009E6:  DATA 78,25
009E8:  DATA 30,38
009EA:  DATA 4C,58
009EC:  DATA 0D,0A
009EE:  DATA 00,00
009F0:  DATA 09,45
009F2:  DATA 4E,44
009F4:  DATA 09,30
009F6:  DATA 78,25
009F8:  DATA 30,38
009FA:  DATA 4C,58
009FC:  DATA 0D,0A
009FE:  DATA 00,00
00A00:  DATA 09,53
00A02:  DATA 52,43
00A04:  DATA 09,30
00A06:  DATA 78,25
00A08:  DATA 30,38
00A0A:  DATA 4C,58
00A0C:  DATA 0D,0A
00A0E:  DATA 00,00
00A10:  DATA 09,53
00A12:  DATA 49,5A
00A14:  DATA 45,09
00A16:  DATA 30,78
00A18:  DATA 25,30
00A1A:  DATA 38,4C
00A1C:  DATA 58,0D
00A1E:  DATA 0A,00
00A20:  DATA 09,2D
00A22:  DATA 2D,2D
00A24:  DATA 2D,2D
00A26:  DATA 2D,2D
00A28:  DATA 2D,2D
00A2A:  DATA 2D,2D
00A2C:  DATA 2D,09
00A2E:  DATA 2D,2D
00A30:  DATA 2D,2D
00A32:  DATA 2D,2D
00A34:  DATA 2D,2D
00A36:  DATA 2D,2D
00A38:  DATA 2D,2D
00A3A:  DATA 2D,09
00A3C:  DATA 2D,2D
00A3E:  DATA 2D,2D
00A40:  DATA 2D,2D
00A42:  DATA 2D,2D
00A44:  DATA 2D,2D
00A46:  DATA 2D,2D
00A48:  DATA 2D,0D
00A4A:  DATA 0A,00
00A4C:  DATA 52,65
00A4E:  DATA 6D,61
00A50:  DATA 69,6E
00A52:  DATA 69,6E
00A54:  DATA 67,20
00A56:  DATA 73,69
00A58:  DATA 7A,65
00A5A:  DATA 20,74
00A5C:  DATA 6F,20
00A5E:  DATA 77,72
00A60:  DATA 69,74
00A62:  DATA 65,3A
00A64:  DATA 20,25
00A66:  DATA 6C,75
00A68:  DATA 20,62
00A6A:  DATA 79,74
00A6C:  DATA 65,73
00A6E:  DATA 0D,0A
00A70:  DATA 00,00
00A72:  DATA 4D,49
00A74:  DATA 53,46
00A76:  DATA 20,44
00A78:  DATA 41,54
00A7A:  DATA 41,0D
00A7C:  DATA 0A,00
00A7E:  DATA 0D,0A
00A80:  DATA 5F,5F
00A82:  DATA 5F,5F
00A84:  DATA 5F,5F
00A86:  DATA 5F,5F
00A88:  DATA 5F,45
00A8A:  DATA 6E,64
00A8C:  DATA 20,63
00A8E:  DATA 6F,70
00A90:  DATA 79,5F
00A92:  DATA 64,61
00A94:  DATA 74,61
00A96:  DATA 5F,5F
00A98:  DATA 5F,5F
00A9A:  DATA 5F,5F
00A9C:  DATA 5F,5F
00A9E:  DATA 5F,5F
00AA0:  DATA 0D,0A
00AA2:  DATA 00,00
00AA4:  DATA 5F,5F
00AA6:  DATA 5F,5F
00AA8:  DATA 5F,5F
00AAA:  DATA 5F,5F
00AAC:  DATA 5F,5F
00AAE:  DATA 5F,5F
00AB0:  DATA 5F,5F
00AB2:  DATA 5F,5F
00AB4:  DATA 5F,5F
00AB6:  DATA 5F,5F
00AB8:  DATA 5F,5F
00ABA:  DATA 5F,5F
00ABC:  DATA 5F,5F
00ABE:  DATA 5F,5F
00AC0:  DATA 5F,5F
00AC2:  DATA 5F,0D
00AC4:  DATA 0A,0D
00AC6:  DATA 0A,00
00AC8:  DATA 0D,0A
00ACA:  DATA 5F,5F
00ACC:  DATA 5F,5F
00ACE:  DATA 5F,5F
00AD0:  DATA 5F,5F
00AD2:  DATA 5F,5F
00AD4:  DATA 5F,5F
00AD6:  DATA 5F,5F
00AD8:  DATA 5F,5F
00ADA:  DATA 5F,5F
00ADC:  DATA 5F,5F
00ADE:  DATA 0D,0A
00AE0:  DATA 00,00
00AE2:  DATA 5F,5F
00AE4:  DATA 5F,53
00AE6:  DATA 74,61
00AE8:  DATA 72,74
00AEA:  DATA 20,53
00AEC:  DATA 4D,46
00AEE:  DATA 20,52
00AF0:  DATA 65,61
00AF2:  DATA 64,5F
00AF4:  DATA 5F,5F
00AF6:  DATA 5F,0D
00AF8:  DATA 0A,00
00AFA:  DATA 45,72
00AFC:  DATA 72,6F
00AFE:  DATA 72,3A
00B00:  DATA 20,52
00B02:  DATA 65,61
00B04:  DATA 64,20
00B06:  DATA 61,64
00B08:  DATA 64,72
00B0A:  DATA 65,73
00B0C:  DATA 73,20
00B0E:  DATA 30,78
00B10:  DATA 25,30
00B12:  DATA 38,4C
00B14:  DATA 58,20
00B16:  DATA 6F,75
00B18:  DATA 74,20
00B1A:  DATA 6F,66
00B1C:  DATA 20,53
00B1E:  DATA 4D,46
00B20:  DATA 20,6D
00B22:  DATA 69,73
00B24:  DATA 73,69
00B26:  DATA 6F,6E
00B28:  DATA 20,72
00B2A:  DATA 61,6E
00B2C:  DATA 67,65
00B2E:  DATA 20,5B
00B30:  DATA 30,78
00B32:  DATA 25,30
00B34:  DATA 38,4C
00B36:  DATA 58,20
00B38:  DATA 2D,20
00B3A:  DATA 30,78
00B3C:  DATA 25,30
00B3E:  DATA 38,4C
00B40:  DATA 58,29
00B42:  DATA 0D,0A
00B44:  DATA 00,00
00B46:  DATA 57,61
00B48:  DATA 72,6E
00B4A:  DATA 3A,20
00B4C:  DATA 41,64
00B4E:  DATA 6A,75
00B50:  DATA 73,74
00B52:  DATA 20,72
00B54:  DATA 65,61
00B56:  DATA 64,20
00B58:  DATA 73,69
00B5A:  DATA 7A,65
00B5C:  DATA 20,66
00B5E:  DATA 72,6F
00B60:  DATA 6D,20
00B62:  DATA 25,6C
00B64:  DATA 75,20
00B66:  DATA 74,6F
00B68:  DATA 20,25
00B6A:  DATA 6C,75
00B6C:  DATA 20,28
00B6E:  DATA 6D,69
00B70:  DATA 73,73
00B72:  DATA 69,6F
00B74:  DATA 6E,20
00B76:  DATA 65,6E
00B78:  DATA 64,29
00B7A:  DATA 0D,0A
00B7C:  DATA 00,00
00B7E:  DATA 49,6E
00B80:  DATA 66,6F
00B82:  DATA 3A,20
00B84:  DATA 4E,6F
00B86:  DATA 74,68
00B88:  DATA 69,6E
00B8A:  DATA 67,20
00B8C:  DATA 74,6F
00B8E:  DATA 20,72
00B90:  DATA 65,61
00B92:  DATA 64,20
00B94:  DATA 28,73
00B96:  DATA 69,7A
00B98:  DATA 65,3D
00B9A:  DATA 30,29
00B9C:  DATA 0D,0A
00B9E:  DATA 00,00
00BA0:  DATA 49,6E
00BA2:  DATA 20,53
00BA4:  DATA 4D,46
00BA6:  DATA 20,52
00BA8:  DATA 65,61
00BAA:  DATA 64,20
00BAC:  DATA 73,6F
00BAE:  DATA 75,72
00BB0:  DATA 63,65
00BB2:  DATA 20,64
00BB4:  DATA 61,74
00BB6:  DATA 61,20
00BB8:  DATA 61,64
00BBA:  DATA 64,72
00BBC:  DATA 65,73
00BBE:  DATA 73,3A
00BC0:  DATA 20,25
00BC2:  DATA 4C,58
00BC4:  DATA 0D,0A
00BC6:  DATA 00,00
00BC8:  DATA 49,6E
00BCA:  DATA 20,53
00BCC:  DATA 4D,46
00BCE:  DATA 20,52
00BD0:  DATA 65,61
00BD2:  DATA 64,20
00BD4:  DATA 64,61
00BD6:  DATA 74,61
00BD8:  DATA 20,73
00BDA:  DATA 69,7A
00BDC:  DATA 65,20
00BDE:  DATA 20,20
00BE0:  DATA 20,20
00BE2:  DATA 20,20
00BE4:  DATA 20,20
00BE6:  DATA 20,3A
00BE8:  DATA 20,25
00BEA:  DATA 6C,75
00BEC:  DATA 20,28
00BEE:  DATA 30,78
00BF0:  DATA 25,6C
00BF2:  DATA 78,29
00BF4:  DATA 0D,0A
00BF6:  DATA 0D,0A
00BF8:  DATA 00,00
00BFA:  DATA 45,72
00BFC:  DATA 72,6F
00BFE:  DATA 72,3A
00C00:  DATA 20,53
00C02:  DATA 4D,46
00C04:  DATA 20,69
00C06:  DATA 73,20
00C08:  DATA 6E,6F
00C0A:  DATA 74,20
00C0C:  DATA 63,6F
00C0E:  DATA 6E,6E
00C10:  DATA 65,63
00C12:  DATA 74,65
00C14:  DATA 64,0D
00C16:  DATA 0A,00
00C18:  DATA 52,45
00C1A:  DATA 41,44
00C1C:  DATA 20,44
00C1E:  DATA 41,54
00C20:  DATA 41,20
00C22:  DATA 46,52
00C24:  DATA 4F,4D
00C26:  DATA 20,53
00C28:  DATA 4D,46
00C2A:  DATA 2E,2E
00C2C:  DATA 2E,0D
00C2E:  DATA 0A,00
00C30:  DATA 0D,0A
00C32:  DATA 5F,5F
00C34:  DATA 5F,45
00C36:  DATA 6E,64
00C38:  DATA 20,53
00C3A:  DATA 4D,46
00C3C:  DATA 20,52
00C3E:  DATA 65,61
00C40:  DATA 64,5F
00C42:  DATA 5F,5F
00C44:  DATA 5F,0D
00C46:  DATA 0A,00
00C48:  DATA 5F,5F
00C4A:  DATA 5F,5F
00C4C:  DATA 5F,5F
00C4E:  DATA 5F,5F
00C50:  DATA 5F,5F
00C52:  DATA 5F,5F
00C54:  DATA 5F,5F
00C56:  DATA 5F,5F
00C58:  DATA 5F,5F
00C5A:  DATA 5F,5F
00C5C:  DATA 0D,0A
00C5E:  DATA 0D,0A
00C60:  DATA 00,00
00C62:  DATA 0D,0A
00C64:  DATA 5F,5F
00C66:  DATA 5F,5F
00C68:  DATA 5F,5F
00C6A:  DATA 5F,5F
00C6C:  DATA 5F,5F
00C6E:  DATA 5F,5F
00C70:  DATA 5F,5F
00C72:  DATA 5F,5F
00C74:  DATA 5F,5F
00C76:  DATA 5F,5F
00C78:  DATA 0D,0A
00C7A:  DATA 00,00
00C7C:  DATA 5F,5F
00C7E:  DATA 5F,53
00C80:  DATA 74,61
00C82:  DATA 72,74
00C84:  DATA 20,73
00C86:  DATA 6D,66
00C88:  DATA 5F,65
00C8A:  DATA 72,61
00C8C:  DATA 73,65
00C8E:  DATA 5F,5F
00C90:  DATA 5F,5F
00C92:  DATA 0D,0A
00C94:  DATA 00,00
00C96:  DATA 5B,53
00C98:  DATA 4D,46
00C9A:  DATA 5D,20
00C9C:  DATA 45,72
00C9E:  DATA 61,73
00CA0:  DATA 65,20
00CA2:  DATA 61,64
00CA4:  DATA 64,72
00CA6:  DATA 65,73
00CA8:  DATA 73,20
00CAA:  DATA 20,20
00CAC:  DATA 3A,20
00CAE:  DATA 25,4C
00CB0:  DATA 58,0D
00CB2:  DATA 0A,00
00CB4:  DATA 5B,53
00CB6:  DATA 4D,46
00CB8:  DATA 5D,20
00CBA:  DATA 45,72
00CBC:  DATA 61,73
00CBE:  DATA 65,20
00CC0:  DATA 64,61
00CC2:  DATA 74,61
00CC4:  DATA 20,73
00CC6:  DATA 69,7A
00CC8:  DATA 65,20
00CCA:  DATA 3A,20
00CCC:  DATA 25,6C
00CCE:  DATA 75,20
00CD0:  DATA 28,30
00CD2:  DATA 78,25
00CD4:  DATA 6C,78
00CD6:  DATA 29,0D
00CD8:  DATA 0A,0D
00CDA:  DATA 0A,00
00CDC:  DATA 45,72
00CDE:  DATA 72,6F
00CE0:  DATA 72,3A
00CE2:  DATA 20,53
00CE4:  DATA 4D,46
00CE6:  DATA 20,69
00CE8:  DATA 73,20
00CEA:  DATA 6E,6F
00CEC:  DATA 74,20
00CEE:  DATA 63,6F
00CF0:  DATA 6E,6E
00CF2:  DATA 65,63
00CF4:  DATA 74,65
00CF6:  DATA 64,0D
00CF8:  DATA 0A,00
00CFA:  DATA 45,72
00CFC:  DATA 72,6F
00CFE:  DATA 72,3A
00D00:  DATA 20,45
00D02:  DATA 72,61
00D04:  DATA 73,65
00D06:  DATA 20,73
00D08:  DATA 6F,75
00D0A:  DATA 72,63
00D0C:  DATA 65,20
00D0E:  DATA 61,64
00D10:  DATA 64,72
00D12:  DATA 65,73
00D14:  DATA 73,20
00D16:  DATA 30,78
00D18:  DATA 25,4C
00D1A:  DATA 58,20
00D1C:  DATA 69,73
00D1E:  DATA 20,6F
00D20:  DATA 75,74
00D22:  DATA 73,69
00D24:  DATA 64,65
00D26:  DATA 20,6D
00D28:  DATA 69,73
00D2A:  DATA 73,69
00D2C:  DATA 6F,6E
00D2E:  DATA 20,72
00D30:  DATA 61,6E
00D32:  DATA 67,65
00D34:  DATA 20,5B
00D36:  DATA 30,78
00D38:  DATA 25,4C
00D3A:  DATA 58,20
00D3C:  DATA 2D,20
00D3E:  DATA 30,78
00D40:  DATA 25,4C
00D42:  DATA 58,5D
00D44:  DATA 0D,0A
00D46:  DATA 00,00
00D48:  DATA 45,72
00D4A:  DATA 72,6F
00D4C:  DATA 72,3A
00D4E:  DATA 20,45
00D50:  DATA 72,61
00D52:  DATA 73,65
00D54:  DATA 20,6F
00D56:  DATA 70,65
00D58:  DATA 72,61
00D5A:  DATA 74,69
00D5C:  DATA 6F,6E
00D5E:  DATA 20,77
00D60:  DATA 6F,75
00D62:  DATA 6C,64
00D64:  DATA 20,65
00D66:  DATA 78,63
00D68:  DATA 65,65
00D6A:  DATA 64,20
00D6C:  DATA 6D,69
00D6E:  DATA 73,73
00D70:  DATA 69,6F
00D72:  DATA 6E,20
00D74:  DATA 65,6E
00D76:  DATA 64,20
00D78:  DATA 61,64
00D7A:  DATA 64,72
00D7C:  DATA 65,73
00D7E:  DATA 73,20
00D80:  DATA 30,78
00D82:  DATA 25,4C
00D84:  DATA 58,0D
00D86:  DATA 0A,00
00D88:  DATA 4C,69
00D8A:  DATA 6D,69
00D8C:  DATA 74,69
00D8E:  DATA 6E,67
00D90:  DATA 20,65
00D92:  DATA 72,61
00D94:  DATA 73,65
00D96:  DATA 20,73
00D98:  DATA 69,7A
00D9A:  DATA 65,20
00D9C:  DATA 74,6F
00D9E:  DATA 20,73
00DA0:  DATA 74,61
00DA2:  DATA 79,20
00DA4:  DATA 77,69
00DA6:  DATA 74,68
00DA8:  DATA 69,6E
00DAA:  DATA 20,6D
00DAC:  DATA 69,73
00DAE:  DATA 73,69
00DB0:  DATA 6F,6E
00DB2:  DATA 20,62
00DB4:  DATA 6F,75
00DB6:  DATA 6E,64
00DB8:  DATA 73,0D
00DBA:  DATA 0A,00
00DBC:  DATA 45,72
00DBE:  DATA 61,73
00DC0:  DATA 65,20
00DC2:  DATA 6F,70
00DC4:  DATA 65,72
00DC6:  DATA 61,74
00DC8:  DATA 69,6F
00DCA:  DATA 6E,20
00DCC:  DATA 76,61
00DCE:  DATA 6C,69
00DD0:  DATA 64,61
00DD2:  DATA 74,65
00DD4:  DATA 64,20
00DD6:  DATA 77,69
00DD8:  DATA 74,68
00DDA:  DATA 69,6E
00DDC:  DATA 20,6D
00DDE:  DATA 69,73
00DE0:  DATA 73,69
00DE2:  DATA 6F,6E
00DE4:  DATA 20,72
00DE6:  DATA 61,6E
00DE8:  DATA 67,65
00DEA:  DATA 0D,0A
00DEC:  DATA 00,00
00DEE:  DATA 45,72
00DF0:  DATA 61,73
00DF2:  DATA 65,64
00DF4:  DATA 20,25
00DF6:  DATA 6C,75
00DF8:  DATA 20,62
00DFA:  DATA 79,74
00DFC:  DATA 65,73
00DFE:  DATA 20,28
00E00:  DATA 61,6C
00E02:  DATA 69,67
00E04:  DATA 6E,65
00E06:  DATA 64,29
00E08:  DATA 0D,0A
00E0A:  DATA 00,00
00E0C:  DATA 0D,0A
00E0E:  DATA 5F,5F
00E10:  DATA 5F,45
00E12:  DATA 6E,64
00E14:  DATA 20,73
00E16:  DATA 6D,66
00E18:  DATA 5F,65
00E1A:  DATA 72,61
00E1C:  DATA 73,65
00E1E:  DATA 5F,5F
00E20:  DATA 5F,5F
00E22:  DATA 0D,0A
00E24:  DATA 00,00
00E26:  DATA 5F,5F
00E28:  DATA 5F,5F
00E2A:  DATA 5F,5F
00E2C:  DATA 5F,5F
00E2E:  DATA 5F,5F
00E30:  DATA 5F,5F
00E32:  DATA 5F,5F
00E34:  DATA 5F,5F
00E36:  DATA 5F,5F
00E38:  DATA 5F,5F
00E3A:  DATA 0D,0A
00E3C:  DATA 0D,0A
00E3E:  DATA 00,00
00E40:  DATA 45,72
00E42:  DATA 72,6F
00E44:  DATA 72,3A
00E46:  DATA 20,55
00E48:  DATA 6E,6B
00E4A:  DATA 6E,6F
00E4C:  DATA 77,6E
00E4E:  DATA 20,6D
00E50:  DATA 69,73
00E52:  DATA 73,69
00E54:  DATA 6F,6E
00E56:  DATA 5F,69
00E58:  DATA 64,3A
00E5A:  DATA 20,25
00E5C:  DATA 30,32
00E5E:  DATA 58,0D
00E60:  DATA 0A,00
00E62:  DATA 55,70
00E64:  DATA 64,61
00E66:  DATA 74,65
00E68:  DATA 64,20
00E6A:  DATA 70,61
00E6C:  DATA 72,74
00E6E:  DATA 69,74
00E70:  DATA 69,6F
00E72:  DATA 6E,20
00E74:  DATA 66,6F
00E76:  DATA 72,20
00E78:  DATA 6D,69
00E7A:  DATA 73,73
00E7C:  DATA 69,6F
00E7E:  DATA 6E,5F
00E80:  DATA 69,64
00E82:  DATA 20,25
00E84:  DATA 30,32
00E86:  DATA 58,3A
00E88:  DATA 20,75
00E8A:  DATA 73,65
00E8C:  DATA 64,5F
00E8E:  DATA 73,69
00E90:  DATA 7A,65
00E92:  DATA 3D,25
00E94:  DATA 6C,64
00E96:  DATA 2C,20
00E98:  DATA 6C,6F
00E9A:  DATA 6F,70
00E9C:  DATA 5F,63
00E9E:  DATA 6F,75
00EA0:  DATA 6E,74
00EA2:  DATA 65,72
00EA4:  DATA 3D,25
00EA6:  DATA 6C,64
00EA8:  DATA 0D,0A
00EAA:  DATA 00,00
00EAC:  DATA 5B,4D
00EAE:  DATA 49,53
00EB0:  DATA 46,5D
00EB2:  DATA 20,6D
00EB4:  DATA 69,73
00EB6:  DATA 73,69
00EB8:  DATA 6F,6E
00EBA:  DATA 20,25
00EBC:  DATA 75,20
00EBE:  DATA 75,6E
00EC0:  DATA 63,6F
00EC2:  DATA 70,69
00EC4:  DATA 65,64
00EC6:  DATA 5F,63
00EC8:  DATA 6F,75
00ECA:  DATA 6E,74
00ECC:  DATA 65,72
00ECE:  DATA 20,25
00ED0:  DATA 30,38
00ED2:  DATA 4C,58
00ED4:  DATA 20,2D
00ED6:  DATA 3E,20
00ED8:  DATA 25,30
00EDA:  DATA 38,4C
00EDC:  DATA 58,20
00EDE:  DATA 28,2D
00EE0:  DATA 25,6C
00EE2:  DATA 75,29
00EE4:  DATA 0D,0A
00EE6:  DATA 00,00
00EE8:  DATA 5B,4D
00EEA:  DATA 49,53
00EEC:  DATA 46,5D
00EEE:  DATA 20,75
00EF0:  DATA 70,64
00EF2:  DATA 61,74
00EF4:  DATA 65,5F
00EF6:  DATA 6D,69
00EF8:  DATA 73,66
00EFA:  DATA 5F,63
00EFC:  DATA 6F,75
00EFE:  DATA 6E,74
00F00:  DATA 65,72
00F02:  DATA 73,3A
00F04:  DATA 20,6D
00F06:  DATA 69,73
00F08:  DATA 73,69
00F0A:  DATA 6F,6E
00F0C:  DATA 20,25
00F0E:  DATA 75,20
00F10:  DATA 6E,6F
00F12:  DATA 74,20
00F14:  DATA 68,61
00F16:  DATA 6E,64
00F18:  DATA 6C,65
00F1A:  DATA 64,0D
00F1C:  DATA 0A,00
00F1E:  DATA 5B,4D
00F20:  DATA 49,53
00F22:  DATA 46,5D
00F24:  DATA 20,6D
00F26:  DATA 69,73
00F28:  DATA 73,69
00F2A:  DATA 6F,6E
00F2C:  DATA 20,25
00F2E:  DATA 75,20
00F30:  DATA 75,6E
00F32:  DATA 63,6F
00F34:  DATA 70,69
00F36:  DATA 65,64
00F38:  DATA 5F,63
00F3A:  DATA 6F,75
00F3C:  DATA 6E,74
00F3E:  DATA 65,72
00F40:  DATA 20,72
00F42:  DATA 65,73
00F44:  DATA 65,74
00F46:  DATA 0D,0A
00F48:  DATA 00,00
00F4A:  DATA 5B,4D
00F4C:  DATA 49,53
00F4E:  DATA 46,5D
00F50:  DATA 20,6D
00F52:  DATA 69,73
00F54:  DATA 73,69
00F56:  DATA 6F,6E
00F58:  DATA 20,25
00F5A:  DATA 75,20
00F5C:  DATA 73,74
00F5E:  DATA 61,74
00F60:  DATA 75,73
00F62:  DATA 3A,20
00F64:  DATA 75,73
00F66:  DATA 65,64
00F68:  DATA 3D,30
00F6A:  DATA 78,25
00F6C:  DATA 30,38
00F6E:  DATA 4C,58
00F70:  DATA 20,75
00F72:  DATA 6E,63
00F74:  DATA 6F,70
00F76:  DATA 69,65
00F78:  DATA 64,3D
00F7A:  DATA 30,78
00F7C:  DATA 25,30
00F7E:  DATA 38,4C
00F80:  DATA 58,20
00F82:  DATA 72,31
00F84:  DATA 3D,30
00F86:  DATA 78,25
00F88:  DATA 30,32
00F8A:  DATA 58,20
00F8C:  DATA 72,32
00F8E:  DATA 3D,30
00F90:  DATA 78,25
00F92:  DATA 30,32
00F94:  DATA 58,0D
00F96:  DATA 0A,00
00F98:  DATA 5B,4D
00F9A:  DATA 49,53
00F9C:  DATA 46,5D
00F9E:  DATA 20,70
00FA0:  DATA 72,69
00FA2:  DATA 6E,74
00FA4:  DATA 20,73
00FA6:  DATA 74,61
00FA8:  DATA 74,75
00FAA:  DATA 73,3A
00FAC:  DATA 20,6D
00FAE:  DATA 69,73
00FB0:  DATA 73,69
00FB2:  DATA 6F,6E
00FB4:  DATA 20,25
00FB6:  DATA 75,20
00FB8:  DATA 6E,6F
00FBA:  DATA 74,20
00FBC:  DATA 68,61
00FBE:  DATA 6E,64
00FC0:  DATA 6C,65
00FC2:  DATA 64,0D
00FC4:  DATA 0A,00
00FC6:  DATA 4D,49
00FC8:  DATA 53,53
00FCA:  DATA 49,4F
00FCC:  DATA 4E,20
00FCE:  DATA 46,4C
00FD0:  DATA 41,53
00FD2:  DATA 48,20
00FD4:  DATA 49,6E
00FD6:  DATA 69,74
00FD8:  DATA 69,61
00FDA:  DATA 6C,69
00FDC:  DATA 7A,65
00FDE:  DATA 0D,0A
00FE0:  DATA 00,00
00FE2:  DATA 09,5B
00FE4:  DATA 4D,49
00FE6:  DATA 53,20
00FE8:  DATA 46,4D
00FEA:  DATA 5D,20
00FEC:  DATA 43,6F
00FEE:  DATA 6E,6E
00FF0:  DATA 65,63
00FF2:  DATA 74,65
00FF4:  DATA 64,0D
00FF6:  DATA 0A,00
00FF8:  DATA 09,5B
00FFA:  DATA 4D,49
00FFC:  DATA 53,20
00FFE:  DATA 46,4D
01000:  DATA 5D,20
01002:  DATA 4E,6F
01004:  DATA 74,20
01006:  DATA 43,6F
01008:  DATA 6E,6E
0100A:  DATA 65,63
0100C:  DATA 74,65
0100E:  DATA 64,0D
01010:  DATA 0A,00
01012:  DATA 09,5B
01014:  DATA 53,4D
01016:  DATA 46,5D
01018:  DATA 20,43
0101A:  DATA 6F,6E
0101C:  DATA 6E,65
0101E:  DATA 63,74
01020:  DATA 65,64
01022:  DATA 0D,0A
01024:  DATA 00,00
01026:  DATA 09,5B
01028:  DATA 53,4D
0102A:  DATA 46,5D
0102C:  DATA 20,4E
0102E:  DATA 6F,74
01030:  DATA 20,43
01032:  DATA 6F,6E
01034:  DATA 6E,65
01036:  DATA 63,74
01038:  DATA 65,64
0103A:  DATA 0D,0A
0103C:  DATA 00,00
0103E:  DATA 09,5B
01040:  DATA 4D,49
01042:  DATA 53,20
01044:  DATA 46,4D
01046:  DATA 5D,20
01048:  DATA 43,52
0104A:  DATA 43,20
0104C:  DATA 65,72
0104E:  DATA 72,6F
01050:  DATA 72,20
01052:  DATA 2D,3E
01054:  DATA 20,69
01056:  DATA 6E,69
01058:  DATA 74,69
0105A:  DATA 61,6C
0105C:  DATA 69,7A
0105E:  DATA 65,20
01060:  DATA 63,6F
01062:  DATA 75,6E
01064:  DATA 74,65
01066:  DATA 72,73
01068:  DATA 0D,0A
0106A:  DATA 00,00
0106C:  DATA 09,43
0106E:  DATA 6F,6D
01070:  DATA 70,6C
01072:  DATA 65,74
01074:  DATA 65,0D
01076:  DATA 0A,00
01078:  DATA 09,46
0107A:  DATA 69,65
0107C:  DATA 6C,64
0107E:  DATA 09,09
01080:  DATA 43,6F
01082:  DATA 75,6E
01084:  DATA 74,65
01086:  DATA 72,4E
01088:  DATA 61,6D
0108A:  DATA 65,09
0108C:  DATA 56,61
0108E:  DATA 6C,75
01090:  DATA 65,0D
01092:  DATA 0A,00
01094:  DATA 09,2D
01096:  DATA 2D,2D
01098:  DATA 2D,2D
0109A:  DATA 2D,2D
0109C:  DATA 2D,2D
0109E:  DATA 2D,2D
010A0:  DATA 2D,09
010A2:  DATA 2D,2D
010A4:  DATA 2D,2D
010A6:  DATA 2D,2D
010A8:  DATA 2D,2D
010AA:  DATA 2D,2D
010AC:  DATA 2D,2D
010AE:  DATA 2D,09
010B0:  DATA 2D,2D
010B2:  DATA 2D,2D
010B4:  DATA 2D,2D
010B6:  DATA 2D,2D
010B8:  DATA 2D,2D
010BA:  DATA 2D,2D
010BC:  DATA 2D,0D
010BE:  DATA 0A,00
010C0:  DATA 09,50
010C2:  DATA 49,43
010C4:  DATA 4C,4F
010C6:  DATA 47,09
010C8:  DATA 09,55
010CA:  DATA 73,65
010CC:  DATA 64,09
010CE:  DATA 09,30
010D0:  DATA 78,25
010D2:  DATA 30,38
010D4:  DATA 4C,58
010D6:  DATA 0D,0A
010D8:  DATA 00,00
010DA:  DATA 09,09
010DC:  DATA 09,55
010DE:  DATA 6E,63
010E0:  DATA 6F,70
010E2:  DATA 79,65
010E4:  DATA 64,09
010E6:  DATA 30,78
010E8:  DATA 25,30
010EA:  DATA 38,4C
010EC:  DATA 58,0D
010EE:  DATA 0A,00
010F0:  DATA 09,09
010F2:  DATA 09,52
010F4:  DATA 65,73
010F6:  DATA 65,72
010F8:  DATA 76,65
010FA:  DATA 09,09
010FC:  DATA 30,78
010FE:  DATA 25,30
01100:  DATA 32,58
01102:  DATA 2F,20
01104:  DATA 30,78
01106:  DATA 25,30
01108:  DATA 32,58
0110A:  DATA 0D,0A
0110C:  DATA 00,00
0110E:  DATA 09,45
01110:  DATA 4E,56
01112:  DATA 49,52
01114:  DATA 4F,09
01116:  DATA 09,55
01118:  DATA 73,65
0111A:  DATA 64,09
0111C:  DATA 09,30
0111E:  DATA 78,25
01120:  DATA 30,38
01122:  DATA 4C,58
01124:  DATA 0D,0A
01126:  DATA 00,00
01128:  DATA 09,09
0112A:  DATA 09,55
0112C:  DATA 6E,63
0112E:  DATA 6F,70
01130:  DATA 79,65
01132:  DATA 64,09
01134:  DATA 30,78
01136:  DATA 25,30
01138:  DATA 38,4C
0113A:  DATA 58,0D
0113C:  DATA 0A,00
0113E:  DATA 09,09
01140:  DATA 09,52
01142:  DATA 65,73
01144:  DATA 65,72
01146:  DATA 76,65
01148:  DATA 09,09
0114A:  DATA 30,78
0114C:  DATA 25,30
0114E:  DATA 32,58
01150:  DATA 2F,20
01152:  DATA 30,78
01154:  DATA 25,30
01156:  DATA 32,58
01158:  DATA 0D,0A
0115A:  DATA 00,00
0115C:  DATA 09,49
0115E:  DATA 56,31
01160:  DATA 20,48
01162:  DATA 45,41
01164:  DATA 44,45
01166:  DATA 52,09
01168:  DATA 55,73
0116A:  DATA 65,64
0116C:  DATA 09,09
0116E:  DATA 30,78
01170:  DATA 25,30
01172:  DATA 38,4C
01174:  DATA 58,0D
01176:  DATA 0A,00
01178:  DATA 09,09
0117A:  DATA 09,55
0117C:  DATA 6E,63
0117E:  DATA 6F,70
01180:  DATA 79,65
01182:  DATA 64,09
01184:  DATA 30,78
01186:  DATA 25,30
01188:  DATA 38,4C
0118A:  DATA 58,0D
0118C:  DATA 0A,00
0118E:  DATA 09,09
01190:  DATA 09,52
01192:  DATA 65,73
01194:  DATA 65,72
01196:  DATA 76,65
01198:  DATA 09,09
0119A:  DATA 30,78
0119C:  DATA 25,30
0119E:  DATA 32,58
011A0:  DATA 2F,20
011A2:  DATA 30,78
011A4:  DATA 25,30
011A6:  DATA 32,58
011A8:  DATA 0D,0A
011AA:  DATA 00,00
011AC:  DATA 09,49
011AE:  DATA 56,31
011B0:  DATA 20,44
011B2:  DATA 41,54
011B4:  DATA 41,09
011B6:  DATA 55,73
011B8:  DATA 65,64
011BA:  DATA 09,09
011BC:  DATA 30,78
011BE:  DATA 25,30
011C0:  DATA 38,4C
011C2:  DATA 58,0D
011C4:  DATA 0A,00
011C6:  DATA 09,09
011C8:  DATA 09,55
011CA:  DATA 6E,63
011CC:  DATA 6F,70
011CE:  DATA 79,65
011D0:  DATA 64,09
011D2:  DATA 30,78
011D4:  DATA 25,30
011D6:  DATA 38,4C
011D8:  DATA 58,0D
011DA:  DATA 0A,00
011DC:  DATA 09,09
011DE:  DATA 09,52
011E0:  DATA 65,73
011E2:  DATA 65,72
011E4:  DATA 76,65
011E6:  DATA 09,09
011E8:  DATA 30,78
011EA:  DATA 25,30
011EC:  DATA 32,58
011EE:  DATA 2F,20
011F0:  DATA 30,78
011F2:  DATA 25,30
011F4:  DATA 32,58
011F6:  DATA 0D,0A
011F8:  DATA 00,00
011FA:  DATA 09,49
011FC:  DATA 56,32
011FE:  DATA 20,48
01200:  DATA 45,41
01202:  DATA 44,45
01204:  DATA 52,09
01206:  DATA 55,73
01208:  DATA 65,64
0120A:  DATA 09,09
0120C:  DATA 30,78
0120E:  DATA 25,30
01210:  DATA 38,4C
01212:  DATA 58,0D
01214:  DATA 0A,00
01216:  DATA 09,09
01218:  DATA 09,55
0121A:  DATA 6E,63
0121C:  DATA 6F,70
0121E:  DATA 79,65
01220:  DATA 64,09
01222:  DATA 30,78
01224:  DATA 25,30
01226:  DATA 38,4C
01228:  DATA 58,0D
0122A:  DATA 0A,00
0122C:  DATA 09,09
0122E:  DATA 09,52
01230:  DATA 65,73
01232:  DATA 65,72
01234:  DATA 76,65
01236:  DATA 09,09
01238:  DATA 30,78
0123A:  DATA 25,30
0123C:  DATA 32,58
0123E:  DATA 2F,20
01240:  DATA 30,78
01242:  DATA 25,30
01244:  DATA 32,58
01246:  DATA 0D,0A
01248:  DATA 00,00
0124A:  DATA 09,49
0124C:  DATA 56,32
0124E:  DATA 20,44
01250:  DATA 41,54
01252:  DATA 41,09
01254:  DATA 55,73
01256:  DATA 65,64
01258:  DATA 09,09
0125A:  DATA 30,78
0125C:  DATA 25,30
0125E:  DATA 38,4C
01260:  DATA 58,0D
01262:  DATA 0A,00
01264:  DATA 09,09
01266:  DATA 09,55
01268:  DATA 6E,63
0126A:  DATA 6F,70
0126C:  DATA 79,65
0126E:  DATA 64,09
01270:  DATA 30,78
01272:  DATA 25,30
01274:  DATA 38,4C
01276:  DATA 58,0D
01278:  DATA 0A,00
0127A:  DATA 09,09
0127C:  DATA 09,52
0127E:  DATA 65,73
01280:  DATA 65,72
01282:  DATA 76,65
01284:  DATA 09,09
01286:  DATA 30,78
01288:  DATA 25,30
0128A:  DATA 32,58
0128C:  DATA 2F,20
0128E:  DATA 30,78
01290:  DATA 25,30
01292:  DATA 32,58
01294:  DATA 0D,0A
01296:  DATA 00,00
01298:  DATA 09,2D
0129A:  DATA 2D,2D
0129C:  DATA 2D,2D
0129E:  DATA 2D,2D
012A0:  DATA 2D,2D
012A2:  DATA 2D,2D
012A4:  DATA 2D,09
012A6:  DATA 2D,2D
012A8:  DATA 2D,2D
012AA:  DATA 2D,2D
012AC:  DATA 2D,2D
012AE:  DATA 2D,2D
012B0:  DATA 2D,2D
012B2:  DATA 2D,09
012B4:  DATA 2D,2D
012B6:  DATA 2D,2D
012B8:  DATA 2D,2D
012BA:  DATA 2D,2D
012BC:  DATA 2D,2D
012BE:  DATA 2D,2D
012C0:  DATA 2D,0D
012C2:  DATA 0A,00
012C4:  DATA 43,52
012C6:  DATA 43,20
012C8:  DATA 76,65
012CA:  DATA 72,69
012CC:  DATA 66,69
012CE:  DATA 63,61
012D0:  DATA 74,69
012D2:  DATA 6F,6E
012D4:  DATA 20,70
012D6:  DATA 61,73
012D8:  DATA 73,65
012DA:  DATA 64,20
012DC:  DATA 6F,6E
012DE:  DATA 20,61
012E0:  DATA 74,74
012E2:  DATA 65,6D
012E4:  DATA 70,74
012E6:  DATA 20,25
012E8:  DATA 64,0D
012EA:  DATA 0A,00
012EC:  DATA 45,72
012EE:  DATA 72,6F
012F0:  DATA 72,3A
012F2:  DATA 20,43
012F4:  DATA 52,43
012F6:  DATA 20,76
012F8:  DATA 65,72
012FA:  DATA 69,66
012FC:  DATA 69,63
012FE:  DATA 61,74
01300:  DATA 69,6F
01302:  DATA 6E,20
01304:  DATA 66,61
01306:  DATA 69,6C
01308:  DATA 65,64
0130A:  DATA 20,61
0130C:  DATA 66,74
0130E:  DATA 65,72
01310:  DATA 20,25
01312:  DATA 64,20
01314:  DATA 61,74
01316:  DATA 74,65
01318:  DATA 6D,70
0131A:  DATA 74,73
0131C:  DATA 0D,0A
0131E:  DATA 00,00
01320:  DATA 0D,0A
01322:  DATA 5F,5F
01324:  DATA 5F,5F
01326:  DATA 5F,5F
01328:  DATA 5F,5F
0132A:  DATA 5F,5F
0132C:  DATA 5F,5F
0132E:  DATA 5F,5F
01330:  DATA 5F,5F
01332:  DATA 5F,5F
01334:  DATA 5F,5F
01336:  DATA 5F,5F
01338:  DATA 5F,5F
0133A:  DATA 5F,5F
0133C:  DATA 5F,5F
0133E:  DATA 5F,5F
01340:  DATA 0D,0A
01342:  DATA 5F,5F
01344:  DATA 5F,5F
01346:  DATA 5F,53
01348:  DATA 74,61
0134A:  DATA 72,74
0134C:  DATA 20,65
0134E:  DATA 78,65
01350:  DATA 63,75
01352:  DATA 74,65
01354:  DATA 5F,6D
01356:  DATA 69,73
01358:  DATA 73,69
0135A:  DATA 6F,6E
0135C:  DATA 5F,5F
0135E:  DATA 5F,5F
01360:  DATA 5F,0D
01362:  DATA 0A,0D
01364:  DATA 0A,00
01366:  DATA 43,6F
01368:  DATA 6D,6D
0136A:  DATA 61,6E
0136C:  DATA 64,20
0136E:  DATA 49,44
01370:  DATA 3A,20
01372:  DATA 25,58
01374:  DATA 0D,0A
01376:  DATA 0D,0A
01378:  DATA 00,00
0137A:  DATA 09,09
0137C:  DATA 2D,3E
0137E:  DATA 20,47
01380:  DATA 65,74
01382:  DATA 20,74
01384:  DATA 69,6D
01386:  DATA 65,20
01388:  DATA 74,6F
0138A:  DATA 20,25
0138C:  DATA 6C,75
0138E:  DATA 20,64
01390:  DATA 61,79
01392:  DATA 73,2C
01394:  DATA 20,25
01396:  DATA 30,32
01398:  DATA 75,3A
0139A:  DATA 25,30
0139C:  DATA 32,75
0139E:  DATA 3A,25
013A0:  DATA 30,32
013A2:  DATA 75,0D
013A4:  DATA 0A,00
013A6:  DATA 09,09
013A8:  DATA 2D,3E
013AA:  DATA 20,49
013AC:  DATA 6E,76
013AE:  DATA 61,6C
013B0:  DATA 69,64
013B2:  DATA 20,43
013B4:  DATA 4D,44
013B6:  DATA 20,49
013B8:  DATA 44,21
013BA:  DATA 0D,0A
013BC:  DATA 00,00
013BE:  DATA 0D,0A
013C0:  DATA 5F,5F
013C2:  DATA 5F,5F
013C4:  DATA 5F,5F
013C6:  DATA 45,6E
013C8:  DATA 64,20
013CA:  DATA 65,78
013CC:  DATA 65,63
013CE:  DATA 75,74
013D0:  DATA 65,5F
013D2:  DATA 6D,69
013D4:  DATA 73,73
013D6:  DATA 69,6F
013D8:  DATA 6E,5F
013DA:  DATA 5F,5F
013DC:  DATA 5F,5F
013DE:  DATA 5F,0D
013E0:  DATA 0A,5F
013E2:  DATA 5F,5F
013E4:  DATA 5F,5F
013E6:  DATA 5F,5F
013E8:  DATA 5F,5F
013EA:  DATA 5F,5F
013EC:  DATA 5F,5F
013EE:  DATA 5F,5F
013F0:  DATA 5F,5F
013F2:  DATA 5F,5F
013F4:  DATA 5F,5F
013F6:  DATA 5F,5F
013F8:  DATA 5F,5F
013FA:  DATA 5F,5F
013FC:  DATA 5F,5F
013FE:  DATA 5F,5F
01400:  DATA 0D,0A
01402:  DATA 00,00
01404:  DATA 53,74
01406:  DATA 61,72
01408:  DATA 74,20
0140A:  DATA 65,78
0140C:  DATA 65,63
0140E:  DATA 75,74
01410:  DATA 65,5F
01412:  DATA 63,6F
01414:  DATA 6D,6D
01416:  DATA 61,6E
01418:  DATA 64,0D
0141A:  DATA 0A,00
0141C:  DATA 09,2D
0141E:  DATA 3E,20
01420:  DATA 55,70
01422:  DATA 6C,69
01424:  DATA 6E,6B
01426:  DATA 20,63
01428:  DATA 6F,6D
0142A:  DATA 6D,61
0142C:  DATA 6E,64
0142E:  DATA 0D,0A
01430:  DATA 00,00
01432:  DATA 09,20
01434:  DATA 20,20
01436:  DATA 54,72
01438:  DATA 61,6E
0143A:  DATA 73,6D
0143C:  DATA 69,74
0143E:  DATA 20,41
01440:  DATA 63,6B
01442:  DATA 6E,6F
01444:  DATA 6C,65
01446:  DATA 67,64
01448:  DATA 65,0D
0144A:  DATA 0A,00
0144C:  DATA 09,2D
0144E:  DATA 3E,20
01450:  DATA 53,74
01452:  DATA 61,74
01454:  DATA 75,73
01456:  DATA 20,63
01458:  DATA 68,65
0145A:  DATA 63,6B
0145C:  DATA 0D,0A
0145E:  DATA 00,00
01460:  DATA 09,20
01462:  DATA 20,20
01464:  DATA 54,72
01466:  DATA 61,6E
01468:  DATA 73,6D
0146A:  DATA 69,74
0146C:  DATA 20,4D
0146E:  DATA 49,53
01470:  DATA 20,4D
01472:  DATA 43,55
01474:  DATA 20,53
01476:  DATA 74,61
01478:  DATA 74,75
0147A:  DATA 73,0D
0147C:  DATA 0A,00
0147E:  DATA 66,69
01480:  DATA 6E,69
01482:  DATA 73,68
01484:  DATA 65,64
01486:  DATA 20,69
01488:  DATA 6E,20
0148A:  DATA 73,74
0148C:  DATA 61,74
0148E:  DATA 75,73
01490:  DATA 5F,63
01492:  DATA 68,65
01494:  DATA 63,6B
01496:  DATA 0D,0A
01498:  DATA 00,00
0149A:  DATA 09,2D
0149C:  DATA 3E,20
0149E:  DATA 53,4D
014A0:  DATA 46,20
014A2:  DATA 61,76
014A4:  DATA 61,69
014A6:  DATA 6C,61
014A8:  DATA 62,6C
014AA:  DATA 65,20
014AC:  DATA 63,68
014AE:  DATA 65,63
014B0:  DATA 6B,0D
014B2:  DATA 0A,00
014B4:  DATA 09,20
014B6:  DATA 20,20
014B8:  DATA 54,72
014BA:  DATA 61,6E
014BC:  DATA 73,6D
014BE:  DATA 69,74
014C0:  DATA 20,41
014C2:  DATA 63,6B
014C4:  DATA 6E,6F
014C6:  DATA 77,6C
014C8:  DATA 65,64
014CA:  DATA 67,65
014CC:  DATA 6D,65
014CE:  DATA 6E,74
014D0:  DATA 0D,0A
014D2:  DATA 00,00
014D4:  DATA 09,09
014D6:  DATA 2D,3E
014D8:  DATA 20,64
014DA:  DATA 65,6E
014DC:  DATA 69,65
014DE:  DATA 64,0D
014E0:  DATA 0A,00
014E2:  DATA 09,09
014E4:  DATA 2D,3E
014E6:  DATA 20,61
014E8:  DATA 6C,6C
014EA:  DATA 6F,77
014EC:  DATA 65,64
014EE:  DATA 0D,0A
014F0:  DATA 00,00
014F2:  DATA 09,09
014F4:  DATA 2D,3E
014F6:  DATA 20,44
014F8:  DATA 65,71
014FA:  DATA 75,65
014FC:  DATA 75,65
014FE:  DATA 64,3A
01500:  DATA 20,66
01502:  DATA 75,6E
01504:  DATA 63,3D
01506:  DATA 25,75
01508:  DATA 20,6D
0150A:  DATA 69,73
0150C:  DATA 73,69
0150E:  DATA 6F,6E
01510:  DATA 3D,25
01512:  DATA 75,20
01514:  DATA 73,69
01516:  DATA 7A,65
01518:  DATA 3D,25
0151A:  DATA 6C,64
0151C:  DATA 20,61
0151E:  DATA 64,64
01520:  DATA 72,3D
01522:  DATA 25,6C
01524:  DATA 64,0D
01526:  DATA 0A,00
01528:  DATA 09,09
0152A:  DATA 20,20
0152C:  DATA 20,55
0152E:  DATA 6E,6B
01530:  DATA 6E,6F
01532:  DATA 77,6E
01534:  DATA 20,66
01536:  DATA 75,6E
01538:  DATA 63,5F
0153A:  DATA 74,79
0153C:  DATA 70,65
0153E:  DATA 3D,25
01540:  DATA 75,0D
01542:  DATA 0A,00
01544:  DATA 09,09
01546:  DATA 2D,3E
01548:  DATA 20,43
0154A:  DATA 6F,6D
0154C:  DATA 70,6C
0154E:  DATA 65,74
01550:  DATA 65,64
01552:  DATA 20,25
01554:  DATA 75,20
01556:  DATA 6F,70
01558:  DATA 65,72
0155A:  DATA 61,74
0155C:  DATA 69,6F
0155E:  DATA 6E,73
01560:  DATA 0D,0A
01562:  DATA 00,00
01564:  DATA 09,2D
01566:  DATA 3E,20
01568:  DATA 54,49
0156A:  DATA 4D,45
0156C:  DATA 20,52
0156E:  DATA 65,63
01570:  DATA 65,69
01572:  DATA 76,65
01574:  DATA 0D,0A
01576:  DATA 00,00
01578:  DATA 09,20
0157A:  DATA 20,20
0157C:  DATA 54,72
0157E:  DATA 61,6E
01580:  DATA 73,6D
01582:  DATA 69,74
01584:  DATA 20,41
01586:  DATA 63,6B
01588:  DATA 6E,6F
0158A:  DATA 6C,65
0158C:  DATA 67,64
0158E:  DATA 65,0D
01590:  DATA 0A,00
01592:  DATA 09,09
01594:  DATA 2D,3E
01596:  DATA 20,53
01598:  DATA 65,74
0159A:  DATA 20,74
0159C:  DATA 69,6D
0159E:  DATA 65,20
015A0:  DATA 74,6F
015A2:  DATA 20,25
015A4:  DATA 6C,75
015A6:  DATA 20,64
015A8:  DATA 61,79
015AA:  DATA 73,2C
015AC:  DATA 20,25
015AE:  DATA 30,32
015B0:  DATA 75,3A
015B2:  DATA 25,30
015B4:  DATA 32,75
015B6:  DATA 3A,25
015B8:  DATA 30,32
015BA:  DATA 75,0D
015BC:  DATA 0A,00
015BE:  DATA 53,74
015C0:  DATA 61,72
015C2:  DATA 74,20
015C4:  DATA 4D,4F
015C6:  DATA 44,45
015C8:  DATA 20,4D
015CA:  DATA 45,41
015CC:  DATA 53,20
015CE:  DATA 49,56
015D0:  DATA 0D,0A
015D2:  DATA 00,00
015D4:  DATA 09,53
015D6:  DATA 6C,65
015D8:  DATA 65,70
015DA:  DATA 54,69
015DC:  DATA 6D,65
015DE:  DATA 3A,20
015E0:  DATA 20,20
015E2:  DATA 20,20
015E4:  DATA 20,20
015E6:  DATA 20,25
015E8:  DATA 30,34
015EA:  DATA 4C,58
015EC:  DATA 0D,0A
015EE:  DATA 00,00
015F0:  DATA 09,43
015F2:  DATA 75,72
015F4:  DATA 72,65
015F6:  DATA 6E,74
015F8:  DATA 54,68
015FA:  DATA 72,65
015FC:  DATA 73,68
015FE:  DATA 6F,6C
01600:  DATA 64,3A
01602:  DATA 20,25
01604:  DATA 30,34
01606:  DATA 4C,58
01608:  DATA 0D,0A
0160A:  DATA 00,00
0160C:  DATA 09,50
0160E:  DATA 44,54
01610:  DATA 68,72
01612:  DATA 65,73
01614:  DATA 68,6F
01616:  DATA 6C,64
01618:  DATA 3A,20
0161A:  DATA 20,20
0161C:  DATA 20,20
0161E:  DATA 20,25
01620:  DATA 30,34
01622:  DATA 4C,58
01624:  DATA 0D,0A
01626:  DATA 00,00
01628:  DATA 09,43
0162A:  DATA 75,72
0162C:  DATA 72,65
0162E:  DATA 6E,74
01630:  DATA 4C,69
01632:  DATA 6D,69
01634:  DATA 74,3A
01636:  DATA 20,20
01638:  DATA 20,20
0163A:  DATA 20,25
0163C:  DATA 30,34
0163E:  DATA 4C,58
01640:  DATA 0D,0A
01642:  DATA 00,00
01644:  DATA 09,4D
01646:  DATA 65,61
01648:  DATA 73,75
0164A:  DATA 72,65
0164C:  DATA 6D,65
0164E:  DATA 6E,74
01650:  DATA 54,69
01652:  DATA 6D,65
01654:  DATA 3A,20
01656:  DATA 20,25
01658:  DATA 30,34
0165A:  DATA 4C,58
0165C:  DATA 0D,0A
0165E:  DATA 00,00
01660:  DATA 45,6E
01662:  DATA 71,75
01664:  DATA 65,75
01666:  DATA 65,20
01668:  DATA 46,6C
0166A:  DATA 61,73
0166C:  DATA 68,20
0166E:  DATA 4F,70
01670:  DATA 65,72
01672:  DATA 61,74
01674:  DATA 69,6F
01676:  DATA 6E,0D
01678:  DATA 0A,00
0167A:  DATA 09,4D
0167C:  DATA 69,73
0167E:  DATA 73,69
01680:  DATA 6F,6E
01682:  DATA 20,49
01684:  DATA 44,3A
01686:  DATA 20,20
01688:  DATA 20,25
0168A:  DATA 30,32
0168C:  DATA 58,0D
0168E:  DATA 0A,00
01690:  DATA 09,46
01692:  DATA 75,6E
01694:  DATA 63,74
01696:  DATA 69,6F
01698:  DATA 6E,20
0169A:  DATA 54,79
0169C:  DATA 70,65
0169E:  DATA 3A,25
016A0:  DATA 30,32
016A2:  DATA 58,0D
016A4:  DATA 0A,00
016A6:  DATA 09,57
016A8:  DATA 72,69
016AA:  DATA 74,65
016AC:  DATA 20,4D
016AE:  DATA 6F,64
016B0:  DATA 65,3A
016B2:  DATA 20,20
016B4:  DATA 20,25
016B6:  DATA 30,32
016B8:  DATA 58,0D
016BA:  DATA 0A,00
016BC:  DATA 09,53
016BE:  DATA 6F,75
016C0:  DATA 72,63
016C2:  DATA 65,20
016C4:  DATA 54,79
016C6:  DATA 70,65
016C8:  DATA 3A,20
016CA:  DATA 20,25
016CC:  DATA 30,32
016CE:  DATA 58,0D
016D0:  DATA 0A,00
016D2:  DATA 09,53
016D4:  DATA 74,61
016D6:  DATA 72,74
016D8:  DATA 20,41
016DA:  DATA 64,64
016DC:  DATA 72,65
016DE:  DATA 73,73
016E0:  DATA 3A,25
016E2:  DATA 30,34
016E4:  DATA 58,0D
016E6:  DATA 0A,00
016E8:  DATA 09,53
016EA:  DATA 69,7A
016EC:  DATA 65,3A
016EE:  DATA 20,20
016F0:  DATA 20,20
016F2:  DATA 20,20
016F4:  DATA 20,20
016F6:  DATA 20,25
016F8:  DATA 30,34
016FA:  DATA 58,0D
016FC:  DATA 0A,00
016FE:  DATA 45,6E
01700:  DATA 71,75
01702:  DATA 65,75
01704:  DATA 65,20
01706:  DATA 46,6C
01708:  DATA 61,73
0170A:  DATA 68,20
0170C:  DATA 4F,70
0170E:  DATA 65,72
01710:  DATA 61,74
01712:  DATA 69,6F
01714:  DATA 6E,0D
01716:  DATA 0A,00
01718:  DATA 09,4D
0171A:  DATA 69,73
0171C:  DATA 73,69
0171E:  DATA 6F,6E
01720:  DATA 20,49
01722:  DATA 44,3A
01724:  DATA 20,20
01726:  DATA 20,25
01728:  DATA 30,32
0172A:  DATA 58,0D
0172C:  DATA 0A,00
0172E:  DATA 09,46
01730:  DATA 75,6E
01732:  DATA 63,74
01734:  DATA 69,6F
01736:  DATA 6E,20
01738:  DATA 54,79
0173A:  DATA 70,65
0173C:  DATA 3A,25
0173E:  DATA 30,32
01740:  DATA 58,0D
01742:  DATA 0A,00
01744:  DATA 09,57
01746:  DATA 72,69
01748:  DATA 74,65
0174A:  DATA 20,4D
0174C:  DATA 6F,64
0174E:  DATA 65,3A
01750:  DATA 20,20
01752:  DATA 20,25
01754:  DATA 30,32
01756:  DATA 58,0D
01758:  DATA 0A,00
0175A:  DATA 09,53
0175C:  DATA 6F,75
0175E:  DATA 72,63
01760:  DATA 65,20
01762:  DATA 54,79
01764:  DATA 70,65
01766:  DATA 3A,20
01768:  DATA 20,25
0176A:  DATA 30,32
0176C:  DATA 58,0D
0176E:  DATA 0A,00
01770:  DATA 09,53
01772:  DATA 74,61
01774:  DATA 72,74
01776:  DATA 20,41
01778:  DATA 64,64
0177A:  DATA 72,65
0177C:  DATA 73,73
0177E:  DATA 3A,25
01780:  DATA 30,34
01782:  DATA 58,0D
01784:  DATA 0A,00
01786:  DATA 09,53
01788:  DATA 69,7A
0178A:  DATA 65,3A
0178C:  DATA 20,20
0178E:  DATA 20,20
01790:  DATA 20,20
01792:  DATA 20,20
01794:  DATA 20,25
01796:  DATA 30,34
01798:  DATA 58,0D
0179A:  DATA 0A,00
0179C:  DATA 45,6E
0179E:  DATA 64,20
017A0:  DATA 4D,4F
017A2:  DATA 44,45
017A4:  DATA 20,4D
017A6:  DATA 45,41
017A8:  DATA 53,20
017AA:  DATA 49,56
017AC:  DATA 20,6D
017AE:  DATA 69,73
017B0:  DATA 73,69
017B2:  DATA 6F,6E
017B4:  DATA 0D,0A
017B6:  DATA 00,00
017B8:  DATA 53,74
017BA:  DATA 61,72
017BC:  DATA 74,20
017BE:  DATA 4D,4F
017C0:  DATA 44,45
017C2:  DATA 20,49
017C4:  DATA 56,20
017C6:  DATA 44,45
017C8:  DATA 42,55
017CA:  DATA 47,0D
017CC:  DATA 0A,00
017CE:  DATA 09,49
017D0:  DATA 44,3A
017D2:  DATA 20,25
017D4:  DATA 30,32
017D6:  DATA 58,0D
017D8:  DATA 0A,00
017DA:  DATA 09,53
017DC:  DATA 6C,65
017DE:  DATA 65,70
017E0:  DATA 54,69
017E2:  DATA 6D,65
017E4:  DATA 3A,20
017E6:  DATA 20,20
017E8:  DATA 20,20
017EA:  DATA 20,20
017EC:  DATA 20,30
017EE:  DATA 78,25
017F0:  DATA 30,34
017F2:  DATA 58,0D
017F4:  DATA 0A,00
017F6:  DATA 09,4C
017F8:  DATA 6F,67
017FA:  DATA 43,75
017FC:  DATA 72,72
017FE:  DATA 54,68
01800:  DATA 72,65
01802:  DATA 73,68
01804:  DATA 6F,6C
01806:  DATA 64,3A
01808:  DATA 20,30
0180A:  DATA 78,25
0180C:  DATA 30,34
0180E:  DATA 58,0D
01810:  DATA 0A,00
01812:  DATA 09,50
01814:  DATA 44,54
01816:  DATA 68,72
01818:  DATA 65,73
0181A:  DATA 68,6F
0181C:  DATA 6C,64
0181E:  DATA 3A,20
01820:  DATA 20,20
01822:  DATA 20,20
01824:  DATA 20,30
01826:  DATA 78,25
01828:  DATA 30,34
0182A:  DATA 58,0D
0182C:  DATA 0A,00
0182E:  DATA 09,43
01830:  DATA 75,72
01832:  DATA 72,65
01834:  DATA 6E,74
01836:  DATA 4C,69
01838:  DATA 6D,69
0183A:  DATA 74,3A
0183C:  DATA 20,20
0183E:  DATA 20,20
01840:  DATA 20,30
01842:  DATA 78,25
01844:  DATA 30,34
01846:  DATA 58,0D
01848:  DATA 0A,00
0184A:  DATA 09,4D
0184C:  DATA 65,61
0184E:  DATA 73,75
01850:  DATA 72,65
01852:  DATA 6D,65
01854:  DATA 6E,74
01856:  DATA 54,69
01858:  DATA 6D,65
0185A:  DATA 3A,20
0185C:  DATA 20,30
0185E:  DATA 78,25
01860:  DATA 30,34
01862:  DATA 58,0D
01864:  DATA 0A,00
01866:  DATA 5B,49
01868:  DATA 56,44
0186A:  DATA 42,47
0186C:  DATA 5D,20
0186E:  DATA 45,6E
01870:  DATA 64,20
01872:  DATA 4D,4F
01874:  DATA 44,45
01876:  DATA 20,49
01878:  DATA 56,20
0187A:  DATA 44,45
0187C:  DATA 42,55
0187E:  DATA 47,0D
01880:  DATA 0A,00
01882:  DATA 74,65
01884:  DATA 6D,70
01886:  DATA 5F,74
01888:  DATA 6F,70
0188A:  DATA 2C,20
0188C:  DATA 74,65
0188E:  DATA 6D,70
01890:  DATA 5F,62
01892:  DATA 6F,74
01894:  DATA 2C,20
01896:  DATA 74,65
01898:  DATA 6D,70
0189A:  DATA 5F,6D
0189C:  DATA 69,73
0189E:  DATA 37,2C
018A0:  DATA 20,70
018A2:  DATA 64,0D
018A4:  DATA 0A,00
018A6:  DATA 30,78
018A8:  DATA 25,30
018AA:  DATA 34,4C
018AC:  DATA 58,2C
018AE:  DATA 20,30
018B0:  DATA 78,25
018B2:  DATA 30,34
018B4:  DATA 4C,58
018B6:  DATA 2C,20
018B8:  DATA 30,78
018BA:  DATA 25,30
018BC:  DATA 34,4C
018BE:  DATA 58,2C
018C0:  DATA 20,30
018C2:  DATA 78,25
018C4:  DATA 30,34
018C6:  DATA 4C,58
018C8:  DATA 0D,0A
018CA:  DATA 00,00
018CC:  DATA 53,74
018CE:  DATA 61,72
018D0:  DATA 74,20
018D2:  DATA 4D,4F
018D4:  DATA 44,45
018D6:  DATA 20,4D
018D8:  DATA 45,41
018DA:  DATA 53,20
018DC:  DATA 45,4E
018DE:  DATA 56,20
018E0:  DATA 44,45
018E2:  DATA 42,55
018E4:  DATA 47,0D
018E6:  DATA 0A,00
018E8:  DATA 45,6E
018EA:  DATA 64,20
018EC:  DATA 4D,4F
018EE:  DATA 44,45
018F0:  DATA 20,4D
018F2:  DATA 45,41
018F4:  DATA 53,20
018F6:  DATA 45,4E
018F8:  DATA 56,20
018FA:  DATA 44,45
018FC:  DATA 42,55
018FE:  DATA 47,0D
01900:  DATA 0A,00
01902:  DATA 53,74
01904:  DATA 61,72
01906:  DATA 74,20
01908:  DATA 46,6C
0190A:  DATA 61,73
0190C:  DATA 68,20
0190E:  DATA 45,72
01910:  DATA 61,73
01912:  DATA 65,20
01914:  DATA 41,6C
01916:  DATA 6C,0D
01918:  DATA 0A,00
0191A:  DATA 45,6E
0191C:  DATA 64,20
0191E:  DATA 46,6C
01920:  DATA 61,73
01922:  DATA 68,20
01924:  DATA 45,72
01926:  DATA 61,73
01928:  DATA 65,20
0192A:  DATA 41,6C
0192C:  DATA 6C,0D
0192E:  DATA 0A,00
01930:  DATA 53,74
01932:  DATA 61,72
01934:  DATA 74,20
01936:  DATA 46,6C
01938:  DATA 61,73
0193A:  DATA 68,20
0193C:  DATA 45,72
0193E:  DATA 61,73
01940:  DATA 65,20
01942:  DATA 31,20
01944:  DATA 53,65
01946:  DATA 63,74
01948:  DATA 6F,72
0194A:  DATA 0D,0A
0194C:  DATA 00,00
0194E:  DATA 09,53
01950:  DATA 65,63
01952:  DATA 74,6F
01954:  DATA 72,20
01956:  DATA 41,64
01958:  DATA 64,72
0195A:  DATA 65,73
0195C:  DATA 73,3A
0195E:  DATA 20,30
01960:  DATA 78,25
01962:  DATA 30,38
01964:  DATA 4C,58
01966:  DATA 0D,0A
01968:  DATA 00,00
0196A:  DATA 45,6E
0196C:  DATA 64,20
0196E:  DATA 46,6C
01970:  DATA 61,73
01972:  DATA 68,20
01974:  DATA 45,72
01976:  DATA 61,73
01978:  DATA 65,20
0197A:  DATA 31,20
0197C:  DATA 53,65
0197E:  DATA 63,74
01980:  DATA 6F,72
01982:  DATA 0D,0A
01984:  DATA 00,00
01986:  DATA 53,74
01988:  DATA 61,72
0198A:  DATA 74,20
0198C:  DATA 46,6C
0198E:  DATA 61,73
01990:  DATA 68,20
01992:  DATA 45,72
01994:  DATA 61,73
01996:  DATA 65,20
01998:  DATA 34,6B
0199A:  DATA 42,79
0199C:  DATA 74,65
0199E:  DATA 20,53
019A0:  DATA 75,62
019A2:  DATA 73,65
019A4:  DATA 63,74
019A6:  DATA 6F,72
019A8:  DATA 0D,0A
019AA:  DATA 00,00
019AC:  DATA 09,53
019AE:  DATA 75,62
019B0:  DATA 73,65
019B2:  DATA 63,74
019B4:  DATA 6F,72
019B6:  DATA 20,41
019B8:  DATA 64,64
019BA:  DATA 72,65
019BC:  DATA 73,73
019BE:  DATA 3A,20
019C0:  DATA 30,78
019C2:  DATA 25,30
019C4:  DATA 38,4C
019C6:  DATA 58,0D
019C8:  DATA 0A,00
019CA:  DATA 45,6E
019CC:  DATA 64,20
019CE:  DATA 46,6C
019D0:  DATA 61,73
019D2:  DATA 68,20
019D4:  DATA 45,72
019D6:  DATA 61,73
019D8:  DATA 65,20
019DA:  DATA 34,6B
019DC:  DATA 42,79
019DE:  DATA 74,65
019E0:  DATA 20,53
019E2:  DATA 75,62
019E4:  DATA 73,65
019E6:  DATA 63,74
019E8:  DATA 6F,72
019EA:  DATA 0D,0A
019EC:  DATA 00,00
019EE:  DATA 53,74
019F0:  DATA 61,72
019F2:  DATA 74,20
019F4:  DATA 46,6C
019F6:  DATA 61,73
019F8:  DATA 68,20
019FA:  DATA 45,72
019FC:  DATA 61,73
019FE:  DATA 65,20
01A00:  DATA 36,34
01A02:  DATA 6B,42
01A04:  DATA 79,74
01A06:  DATA 65,20
01A08:  DATA 53,75
01A0A:  DATA 62,73
01A0C:  DATA 65,63
01A0E:  DATA 74,6F
01A10:  DATA 72,0D
01A12:  DATA 0A,00
01A14:  DATA 09,53
01A16:  DATA 75,62
01A18:  DATA 73,65
01A1A:  DATA 63,74
01A1C:  DATA 6F,72
01A1E:  DATA 20,41
01A20:  DATA 64,64
01A22:  DATA 72,65
01A24:  DATA 73,73
01A26:  DATA 3A,20
01A28:  DATA 30,78
01A2A:  DATA 25,30
01A2C:  DATA 38,4C
01A2E:  DATA 58,0D
01A30:  DATA 0A,00
01A32:  DATA 45,6E
01A34:  DATA 64,20
01A36:  DATA 46,6C
01A38:  DATA 61,73
01A3A:  DATA 68,20
01A3C:  DATA 45,72
01A3E:  DATA 61,73
01A40:  DATA 65,20
01A42:  DATA 36,34
01A44:  DATA 6B,42
01A46:  DATA 79,74
01A48:  DATA 65,20
01A4A:  DATA 53,75
01A4C:  DATA 62,73
01A4E:  DATA 65,63
01A50:  DATA 74,6F
01A52:  DATA 72,0D
01A54:  DATA 0A,00
01A56:  DATA 53,74
01A58:  DATA 61,72
01A5A:  DATA 74,20
01A5C:  DATA 46,6C
01A5E:  DATA 61,73
01A60:  DATA 68,20
01A62:  DATA 57,72
01A64:  DATA 69,74
01A66:  DATA 65,20
01A68:  DATA 44,65
01A6A:  DATA 6D,6F
01A6C:  DATA 0D,0A
01A6E:  DATA 00,00
01A70:  DATA 09,4D
01A72:  DATA 4F,44
01A74:  DATA 45,20
01A76:  DATA 20,20
01A78:  DATA 20,20
01A7A:  DATA 3A,20
01A7C:  DATA 25,30
01A7E:  DATA 32,58
01A80:  DATA 0D,0A
01A82:  DATA 00,00
01A84:  DATA 09,41
01A86:  DATA 64,64
01A88:  DATA 72,65
01A8A:  DATA 73,73
01A8C:  DATA 20,20
01A8E:  DATA 3A,20
01A90:  DATA 30,78
01A92:  DATA 25,30
01A94:  DATA 38,4C
01A96:  DATA 58,0D
01A98:  DATA 0A,00
01A9A:  DATA 09,50
01A9C:  DATA 61,63
01A9E:  DATA 6B,65
01AA0:  DATA 74,4E
01AA2:  DATA 75,6D
01AA4:  DATA 3A,20
01AA6:  DATA 30,78
01AA8:  DATA 25,30
01AAA:  DATA 34,4C
01AAC:  DATA 58,0D
01AAE:  DATA 0A,00
01AB0:  DATA 57,72
01AB2:  DATA 69,74
01AB4:  DATA 65,20
01AB6:  DATA 44,61
01AB8:  DATA 74,61
01ABA:  DATA 0D,0A
01ABC:  DATA 00,00
01ABE:  DATA 0D,0A
01AC0:  DATA 5B,46
01AC2:  DATA 4C,41
01AC4:  DATA 53,48
01AC6:  DATA 5D,20
01AC8:  DATA 57,72
01ACA:  DATA 69,74
01ACC:  DATA 65,20
01ACE:  DATA 61,64
01AD0:  DATA 64,72
01AD2:  DATA 65,73
01AD4:  DATA 73,20
01AD6:  DATA 30,78
01AD8:  DATA 25,30
01ADA:  DATA 38,4C
01ADC:  DATA 58,20
01ADE:  DATA 65,78
01AE0:  DATA 63,65
01AE2:  DATA 65,64
01AE4:  DATA 73,20
01AE6:  DATA 64,65
01AE8:  DATA 76,69
01AEA:  DATA 63,65
01AEC:  DATA 20,65
01AEE:  DATA 6E,64
01AF0:  DATA 20,30
01AF2:  DATA 78,25
01AF4:  DATA 30,38
01AF6:  DATA 4C,58
01AF8:  DATA 20,2D
01AFA:  DATA 3E,20
01AFC:  DATA 61,62
01AFE:  DATA 6F,72
01B00:  DATA 74,0D
01B02:  DATA 0A,00
01B04:  DATA 0D,0A
01B06:  DATA 5B,46
01B08:  DATA 4C,41
01B0A:  DATA 53,48
01B0C:  DATA 5D,20
01B0E:  DATA 52,65
01B10:  DATA 61,63
01B12:  DATA 68,65
01B14:  DATA 64,20
01B16:  DATA 65,6E
01B18:  DATA 64,2E
01B1A:  DATA 20,50
01B1C:  DATA 61,72
01B1E:  DATA 74,69
01B20:  DATA 61,6C
01B22:  DATA 20,77
01B24:  DATA 72,69
01B26:  DATA 74,65
01B28:  DATA 20,25
01B2A:  DATA 6C,75
01B2C:  DATA 20,62
01B2E:  DATA 79,74
01B30:  DATA 65,73
01B32:  DATA 20,28
01B34:  DATA 70,61
01B36:  DATA 63,6B
01B38:  DATA 65,74
01B3A:  DATA 20,74
01B3C:  DATA 72,75
01B3E:  DATA 6E,63
01B40:  DATA 61,74
01B42:  DATA 65,64
01B44:  DATA 29,2E
01B46:  DATA 0D,0A
01B48:  DATA 00,00
01B4A:  DATA 45,6E
01B4C:  DATA 64,20
01B4E:  DATA 46,6C
01B50:  DATA 61,73
01B52:  DATA 68,20
01B54:  DATA 57,72
01B56:  DATA 69,74
01B58:  DATA 65,20
01B5A:  DATA 44,65
01B5C:  DATA 6D,6F
01B5E:  DATA 0D,0A
01B60:  DATA 00,00
01B62:  DATA 53,74
01B64:  DATA 61,72
01B66:  DATA 74,20
01B68:  DATA 46,6C
01B6A:  DATA 61,73
01B6C:  DATA 68,20
01B6E:  DATA 57,72
01B70:  DATA 69,74
01B72:  DATA 65,20
01B74:  DATA 34,6B
01B76:  DATA 42,79
01B78:  DATA 74,65
01B7A:  DATA 20,53
01B7C:  DATA 75,62
01B7E:  DATA 73,65
01B80:  DATA 63,74
01B82:  DATA 6F,72
01B84:  DATA 0D,0A
01B86:  DATA 00,00
01B88:  DATA 45,6E
01B8A:  DATA 64,20
01B8C:  DATA 46,6C
01B8E:  DATA 61,73
01B90:  DATA 68,20
01B92:  DATA 57,72
01B94:  DATA 69,74
01B96:  DATA 65,20
01B98:  DATA 34,6B
01B9A:  DATA 42,79
01B9C:  DATA 74,65
01B9E:  DATA 20,53
01BA0:  DATA 75,62
01BA2:  DATA 73,65
01BA4:  DATA 63,74
01BA6:  DATA 6F,72
01BA8:  DATA 0D,0A
01BAA:  DATA 00,00
01BAC:  DATA 53,74
01BAE:  DATA 61,72
01BB0:  DATA 74,20
01BB2:  DATA 46,6C
01BB4:  DATA 61,73
01BB6:  DATA 68,20
01BB8:  DATA 52,65
01BBA:  DATA 61,64
01BBC:  DATA 0D,0A
01BBE:  DATA 00,00
01BC0:  DATA 09,4D
01BC2:  DATA 4F,44
01BC4:  DATA 45,20
01BC6:  DATA 20,20
01BC8:  DATA 20,20
01BCA:  DATA 3A,20
01BCC:  DATA 25,30
01BCE:  DATA 32,58
01BD0:  DATA 0D,0A
01BD2:  DATA 00,00
01BD4:  DATA 09,41
01BD6:  DATA 64,64
01BD8:  DATA 72,65
01BDA:  DATA 73,73
01BDC:  DATA 20,20
01BDE:  DATA 3A,20
01BE0:  DATA 30,78
01BE2:  DATA 25,30
01BE4:  DATA 38,4C
01BE6:  DATA 58,0D
01BE8:  DATA 0A,00
01BEA:  DATA 09,50
01BEC:  DATA 61,63
01BEE:  DATA 6B,65
01BF0:  DATA 74,4E
01BF2:  DATA 75,6D
01BF4:  DATA 3A,20
01BF6:  DATA 30,78
01BF8:  DATA 25,30
01BFA:  DATA 34,4C
01BFC:  DATA 58,0D
01BFE:  DATA 0A,00
01C00:  DATA 52,45
01C02:  DATA 41,44
01C04:  DATA 20,44
01C06:  DATA 41,54
01C08:  DATA 41,0D
01C0A:  DATA 0A,00
01C0C:  DATA 4D,69
01C0E:  DATA 73,73
01C10:  DATA 69,6F
01C12:  DATA 6E,20
01C14:  DATA 46,6C
01C16:  DATA 61,73
01C18:  DATA 68,20
01C1A:  DATA 69,73
01C1C:  DATA 20,6E
01C1E:  DATA 6F,74
01C20:  DATA 20,63
01C22:  DATA 6F,6E
01C24:  DATA 6E,65
01C26:  DATA 63,74
01C28:  DATA 65,64
01C2A:  DATA 0D,0A
01C2C:  DATA 00,00
01C2E:  DATA 5B,46
01C30:  DATA 4C,41
01C32:  DATA 53,48
01C34:  DATA 5D,20
01C36:  DATA 52,65
01C38:  DATA 61,64
01C3A:  DATA 20,61
01C3C:  DATA 64,64
01C3E:  DATA 72,65
01C40:  DATA 73,73
01C42:  DATA 20,30
01C44:  DATA 78,25
01C46:  DATA 30,38
01C48:  DATA 4C,58
01C4A:  DATA 20,65
01C4C:  DATA 78,63
01C4E:  DATA 65,65
01C50:  DATA 64,73
01C52:  DATA 20,64
01C54:  DATA 65,76
01C56:  DATA 69,63
01C58:  DATA 65,20
01C5A:  DATA 65,6E
01C5C:  DATA 64,20
01C5E:  DATA 30,78
01C60:  DATA 25,30
01C62:  DATA 38,4C
01C64:  DATA 58,20
01C66:  DATA 2D,3E
01C68:  DATA 20,73
01C6A:  DATA 74,6F
01C6C:  DATA 70,0D
01C6E:  DATA 0A,00
01C70:  DATA 5B,46
01C72:  DATA 4C,41
01C74:  DATA 53,48
01C76:  DATA 5D,20
01C78:  DATA 45,6E
01C7A:  DATA 64,20
01C7C:  DATA 72,65
01C7E:  DATA 61,63
01C80:  DATA 68,65
01C82:  DATA 64,2E
01C84:  DATA 20,50
01C86:  DATA 61,72
01C88:  DATA 74,69
01C8A:  DATA 61,6C
01C8C:  DATA 20,72
01C8E:  DATA 65,61
01C90:  DATA 64,20
01C92:  DATA 25,6C
01C94:  DATA 75,20
01C96:  DATA 62,79
01C98:  DATA 74,65
01C9A:  DATA 73,2E
01C9C:  DATA 0D,0A
01C9E:  DATA 00,00
01CA0:  DATA 45,6E
01CA2:  DATA 64,20
01CA4:  DATA 46,6C
01CA6:  DATA 61,73
01CA8:  DATA 68,20
01CAA:  DATA 52,65
01CAC:  DATA 61,64
01CAE:  DATA 0D,0A
01CB0:  DATA 00,00
01CB2:  DATA 53,74
01CB4:  DATA 61,72
01CB6:  DATA 74,20
01CB8:  DATA 46,6C
01CBA:  DATA 61,73
01CBC:  DATA 68,20
01CBE:  DATA 52,65
01CC0:  DATA 61,64
01CC2:  DATA 20,41
01CC4:  DATA 64,64
01CC6:  DATA 72,65
01CC8:  DATA 73,73
01CCA:  DATA 0D,0A
01CCC:  DATA 00,00
01CCE:  DATA 52,65
01CD0:  DATA 61,64
01CD2:  DATA 20,44
01CD4:  DATA 61,74
01CD6:  DATA 61,3A
01CD8:  DATA 20,25
01CDA:  DATA 30,32
01CDC:  DATA 58,20
01CDE:  DATA 25,30
01CE0:  DATA 32,58
01CE2:  DATA 20,25
01CE4:  DATA 30,32
01CE6:  DATA 58,20
01CE8:  DATA 25,30
01CEA:  DATA 32,58
01CEC:  DATA 0D,0A
01CEE:  DATA 00,00
01CF0:  DATA 45,6E
01CF2:  DATA 64,20
01CF4:  DATA 46,6C
01CF6:  DATA 61,73
01CF8:  DATA 68,20
01CFA:  DATA 52,65
01CFC:  DATA 61,64
01CFE:  DATA 20,41
01D00:  DATA 64,64
01D02:  DATA 72,65
01D04:  DATA 73,73
01D06:  DATA 0D,0A
01D08:  DATA 00,00
01D0A:  DATA 53,74
01D0C:  DATA 61,72
01D0E:  DATA 74,20
01D10:  DATA 46,6C
01D12:  DATA 61,73
01D14:  DATA 68,20
01D16:  DATA 45,72
01D18:  DATA 61,73
01D1A:  DATA 65,20
01D1C:  DATA 61,6E
01D1E:  DATA 64,20
01D20:  DATA 52,65
01D22:  DATA 73,65
01D24:  DATA 74,0D
01D26:  DATA 0A,00
01D28:  DATA 45,6E
01D2A:  DATA 64,20
01D2C:  DATA 46,6C
01D2E:  DATA 61,73
01D30:  DATA 68,20
01D32:  DATA 45,72
01D34:  DATA 61,73
01D36:  DATA 65,20
01D38:  DATA 61,6E
01D3A:  DATA 64,20
01D3C:  DATA 52,65
01D3E:  DATA 73,65
01D40:  DATA 74,0D
01D42:  DATA 0A,00
01D44:  DATA 53,74
01D46:  DATA 61,72
01D48:  DATA 74,20
01D4A:  DATA 46,6C
01D4C:  DATA 61,73
01D4E:  DATA 68,20
01D50:  DATA 53,4D
01D52:  DATA 46,20
01D54:  DATA 43,6F
01D56:  DATA 70,79
01D58:  DATA 0D,0A
01D5A:  DATA 00,00
01D5C:  DATA 45,6E
01D5E:  DATA 64,20
01D60:  DATA 46,6C
01D62:  DATA 61,73
01D64:  DATA 68,20
01D66:  DATA 53,4D
01D68:  DATA 46,20
01D6A:  DATA 43,6F
01D6C:  DATA 70,79
01D6E:  DATA 0D,0A
01D70:  DATA 00,00
01D72:  DATA 53,74
01D74:  DATA 61,72
01D76:  DATA 74,20
01D78:  DATA 46,6C
01D7A:  DATA 61,73
01D7C:  DATA 68,20
01D7E:  DATA 53,4D
01D80:  DATA 46,20
01D82:  DATA 52,65
01D84:  DATA 61,64
01D86:  DATA 0D,0A
01D88:  DATA 00,00
01D8A:  DATA 09,41
01D8C:  DATA 64,64
01D8E:  DATA 72,65
01D90:  DATA 73,73
01D92:  DATA 20,20
01D94:  DATA 3A,20
01D96:  DATA 30,78
01D98:  DATA 25,30
01D9A:  DATA 38,4C
01D9C:  DATA 58,0D
01D9E:  DATA 0A,00
01DA0:  DATA 09,50
01DA2:  DATA 61,63
01DA4:  DATA 6B,65
01DA6:  DATA 74,4E
01DA8:  DATA 75,6D
01DAA:  DATA 3A,20
01DAC:  DATA 30,78
01DAE:  DATA 25,30
01DB0:  DATA 34,4C
01DB2:  DATA 58,0D
01DB4:  DATA 0A,00
01DB6:  DATA 52,65
01DB8:  DATA 61,64
01DBA:  DATA 20,44
01DBC:  DATA 61,74
01DBE:  DATA 61,0D
01DC0:  DATA 0A,00
01DC2:  DATA 0D,0A
01DC4:  DATA 45,6E
01DC6:  DATA 64,20
01DC8:  DATA 46,6C
01DCA:  DATA 61,73
01DCC:  DATA 68,20
01DCE:  DATA 53,4D
01DD0:  DATA 46,20
01DD2:  DATA 52,65
01DD4:  DATA 61,64
01DD6:  DATA 0D,0A
01DD8:  DATA 00,00
01DDA:  DATA 53,74
01DDC:  DATA 61,72
01DDE:  DATA 74,20
01DE0:  DATA 46,6C
01DE2:  DATA 61,73
01DE4:  DATA 68,20
01DE6:  DATA 53,4D
01DE8:  DATA 46,20
01DEA:  DATA 45,72
01DEC:  DATA 61,73
01DEE:  DATA 65,0D
01DF0:  DATA 0A,00
01DF2:  DATA 45,6E
01DF4:  DATA 64,20
01DF6:  DATA 46,6C
01DF8:  DATA 61,73
01DFA:  DATA 68,20
01DFC:  DATA 53,4D
01DFE:  DATA 46,20
01E00:  DATA 45,72
01E02:  DATA 61,73
01E04:  DATA 65,0D
01E06:  DATA 0A,00
01E08:  DATA 53,74
01E0A:  DATA 61,72
01E0C:  DATA 74,20
01E0E:  DATA 46,6C
01E10:  DATA 61,73
01E12:  DATA 68,20
01E14:  DATA 41,64
01E16:  DATA 64,72
01E18:  DATA 65,73
01E1A:  DATA 73,20
01E1C:  DATA 52,65
01E1E:  DATA 73,65
01E20:  DATA 74,0D
01E22:  DATA 0A,00
01E24:  DATA 45,6E
01E26:  DATA 64,20
01E28:  DATA 46,6C
01E2A:  DATA 61,73
01E2C:  DATA 68,20
01E2E:  DATA 41,64
01E30:  DATA 64,72
01E32:  DATA 65,73
01E34:  DATA 73,20
01E36:  DATA 52,65
01E38:  DATA 73,65
01E3A:  DATA 74,0D
01E3C:  DATA 0A,00
01E3E:  DATA 53,4D
01E40:  DATA 46,20
01E42:  DATA 69,73
01E44:  DATA 20,6E
01E46:  DATA 6F,74
01E48:  DATA 20,63
01E4A:  DATA 6F,6E
01E4C:  DATA 6E,65
01E4E:  DATA 63,74
01E50:  DATA 65,64
01E52:  DATA 0D,0A
01E54:  DATA 00,00
01E56:  DATA 53,74
01E58:  DATA 61,72
01E5A:  DATA 74,20
01E5C:  DATA 46,6C
01E5E:  DATA 61,73
01E60:  DATA 68,20
01E62:  DATA 53,4D
01E64:  DATA 46,20
01E66:  DATA 52,65
01E68:  DATA 61,64
01E6A:  DATA 20,46
01E6C:  DATA 6F,72
01E6E:  DATA 63,65
01E70:  DATA 0D,0A
01E72:  DATA 00,00
01E74:  DATA 09,41
01E76:  DATA 64,64
01E78:  DATA 72,65
01E7A:  DATA 73,73
01E7C:  DATA 20,20
01E7E:  DATA 3A,20
01E80:  DATA 30,78
01E82:  DATA 25,30
01E84:  DATA 38,4C
01E86:  DATA 58,0D
01E88:  DATA 0A,00
01E8A:  DATA 09,50
01E8C:  DATA 61,63
01E8E:  DATA 6B,65
01E90:  DATA 74,4E
01E92:  DATA 75,6D
01E94:  DATA 3A,20
01E96:  DATA 30,78
01E98:  DATA 25,30
01E9A:  DATA 34,4C
01E9C:  DATA 58,0D
01E9E:  DATA 0A,00
01EA0:  DATA 72,65
01EA2:  DATA 61,64
01EA4:  DATA 20,64
01EA6:  DATA 61,74
01EA8:  DATA 61,0D
01EAA:  DATA 0A,00
01EAC:  DATA 0D,0A
01EAE:  DATA 45,6E
01EB0:  DATA 64,20
01EB2:  DATA 46,6C
01EB4:  DATA 61,73
01EB6:  DATA 68,20
01EB8:  DATA 53,4D
01EBA:  DATA 46,20
01EBC:  DATA 52,65
01EBE:  DATA 61,64
01EC0:  DATA 20,46
01EC2:  DATA 6F,72
01EC4:  DATA 63,65
01EC6:  DATA 0D,0A
01EC8:  DATA 00,00
01ECA:  DATA 53,74
01ECC:  DATA 61,72
01ECE:  DATA 74,20
01ED0:  DATA 53,4D
01ED2:  DATA 46,20
01ED4:  DATA 45,72
01ED6:  DATA 61,73
01ED8:  DATA 65,20
01EDA:  DATA 41,6C
01EDC:  DATA 6C,0D
01EDE:  DATA 0A,00
01EE0:  DATA 45,6E
01EE2:  DATA 64,20
01EE4:  DATA 53,4D
01EE6:  DATA 46,20
01EE8:  DATA 45,72
01EEA:  DATA 61,73
01EEC:  DATA 65,20
01EEE:  DATA 41,6C
01EF0:  DATA 6C,0D
01EF2:  DATA 0A,00
01EF4:  DATA 53,74
01EF6:  DATA 61,72
01EF8:  DATA 74,20
01EFA:  DATA 53,4D
01EFC:  DATA 46,20
01EFE:  DATA 52,65
01F00:  DATA 73,65
01F02:  DATA 74,0D
01F04:  DATA 0A,00
01F06:  DATA 45,6E
01F08:  DATA 64,20
01F0A:  DATA 53,4D
01F0C:  DATA 46,20
01F0E:  DATA 52,65
01F10:  DATA 73,65
01F12:  DATA 74,0D
01F14:  DATA 0A,00
01F16:  DATA 0D,0A
01F18:  DATA 0D,0A
01F1A:  DATA 0D,0A
01F1C:  DATA 3D,3D
01F1E:  DATA 3D,3D
01F20:  DATA 3D,3D
01F22:  DATA 3D,3D
01F24:  DATA 3D,3D
01F26:  DATA 3D,3D
01F28:  DATA 3D,3D
01F2A:  DATA 3D,3D
01F2C:  DATA 3D,3D
01F2E:  DATA 3D,3D
01F30:  DATA 3D,3D
01F32:  DATA 3D,3D
01F34:  DATA 3D,3D
01F36:  DATA 3D,3D
01F38:  DATA 3D,3D
01F3A:  DATA 3D,3D
01F3C:  DATA 3D,3D
01F3E:  DATA 3D,3D
01F40:  DATA 3D,3D
01F42:  DATA 3D,3D
01F44:  DATA 3D,3D
01F46:  DATA 3D,3D
01F48:  DATA 3D,3D
01F4A:  DATA 3D,3D
01F4C:  DATA 3D,3D
01F4E:  DATA 3D,3D
01F50:  DATA 3D,3D
01F52:  DATA 3D,3D
01F54:  DATA 3D,3D
01F56:  DATA 3D,3D
01F58:  DATA 0D,0A
01F5A:  DATA 00,00
01F5C:  DATA 54,68
01F5E:  DATA 69,73
01F60:  DATA 20,69
01F62:  DATA 73,20
01F64:  DATA 4D,4F
01F66:  DATA 4D,49
01F68:  DATA 4A,49
01F6A:  DATA 20,43
01F6C:  DATA 49,47
01F6E:  DATA 53,20
01F70:  DATA 50,49
01F72:  DATA 43,20
01F74:  DATA 42,42
01F76:  DATA 4D,20
01F78:  DATA 66,6F
01F7A:  DATA 72,20
01F7C:  DATA 4D,49
01F7E:  DATA 53,37
01F80:  DATA 5F,42
01F82:  DATA 42,4D
01F84:  DATA 36,2E
01F86:  DATA 0D,0A
01F88:  DATA 00,00
01F8A:  DATA 4C,61
01F8C:  DATA 73,74
01F8E:  DATA 20,75
01F90:  DATA 70,64
01F92:  DATA 61,74
01F94:  DATA 65,64
01F96:  DATA 20,6F
01F98:  DATA 6E,20
01F9A:  DATA 25,73
01F9C:  DATA 20,25
01F9E:  DATA 73,2C
01FA0:  DATA 20,62
01FA2:  DATA 79,20
01FA4:  DATA 49,6E
01FA6:  DATA 6F,75
01FA8:  DATA 65,2E
01FAA:  DATA 0D,0A
01FAC:  DATA 0D,0A
01FAE:  DATA 00,00
01FB0:  DATA 32,35
01FB2:  DATA 2D,53
01FB4:  DATA 65,70
01FB6:  DATA 2D,32
01FB8:  DATA 35,00
01FBA:  DATA 31,33
01FBC:  DATA 3A,34
01FBE:  DATA 31,3A
01FC0:  DATA 33,31
01FC2:  DATA 00,00
01FC4:  DATA 5F,5F
01FC6:  DATA 5F,5F
01FC8:  DATA 43,49
01FCA:  DATA 47,53
01FCC:  DATA 20,50
01FCE:  DATA 49,43
01FD0:  DATA 20,53
01FD2:  DATA 74,61
01FD4:  DATA 72,74
01FD6:  DATA 20,4F
01FD8:  DATA 70,65
01FDA:  DATA 72,61
01FDC:  DATA 74,69
01FDE:  DATA 6F,6E
01FE0:  DATA 5F,5F
01FE2:  DATA 5F,5F
01FE4:  DATA 5F,0D
01FE6:  DATA 0A,0D
01FE8:  DATA 0A,00
01FEA:  DATA 77,61
01FEC:  DATA 69,74
01FEE:  DATA 69,6E
01FF0:  DATA 67,20
01FF2:  DATA 66,6F
01FF4:  DATA 72,20
01FF6:  DATA 42,4F
01FF8:  DATA 53,53
01FFA:  DATA 20,50
01FFC:  DATA 49,43
01FFE:  DATA 20,63
02000:  DATA 6F,6D
02002:  DATA 6D,61
02004:  DATA 6E,64
02006:  DATA 00,00
02008:  DATA 0D,0A
0200A:  DATA 0D,0A
0200C:  DATA 3D,3D
0200E:  DATA 3D,3D
02010:  DATA 3D,3D
02012:  DATA 0D,0A
02014:  DATA 0D,0A
02016:  DATA 46,69
02018:  DATA 6E,69
0201A:  DATA 73,68
0201C:  DATA 65,64
0201E:  DATA 20,70
02020:  DATA 72,6F
02022:  DATA 63,65
02024:  DATA 73,73
02026:  DATA 2E,0D
02028:  DATA 0A,00
0202A:  DATA 0D,0A
0202C:  DATA 77,61
0202E:  DATA 69,74
02030:  DATA 69,6E
02032:  DATA 67,20
02034:  DATA 66,6F
02036:  DATA 72,20
02038:  DATA 42,4F
0203A:  DATA 53,53
0203C:  DATA 20,50
0203E:  DATA 49,43
02040:  DATA 20,63
02042:  DATA 6F,6D
02044:  DATA 6D,61
02046:  DATA 6E,64
02048:  DATA 00,00
0204A:  DATA 45,6E
0204C:  DATA 64,20
0204E:  DATA 6D,61
02050:  DATA 69,6E
02052:  DATA 0D,0A
02054:  DATA 00,00
*
02084:  TBLRD*+
02086:  MOVF   FF5,F
02088:  BTFSC  FD8.2
0208A:  GOTO   20B8
0208E:  MOVFF  FF6,A51
02092:  MOVFF  FF7,A52
02096:  MOVFF  FF8,A53
0209A:  MOVF   FF5,W
0209C:  BTFSS  FA6.6
0209E:  GOTO   209C
020A2:  MOVLB  E
020A4:  MOVWF  xF9
020A6:  MOVFF  A51,FF6
020AA:  MOVFF  A52,FF7
020AE:  MOVFF  A53,FF8
020B2:  MOVLB  0
020B4:  GOTO   2084
020B8:  RETURN 0
020BA:  TBLRD*+
020BC:  MOVFF  FF6,31F
020C0:  MOVFF  FF7,320
020C4:  MOVFF  FF8,321
020C8:  MOVF   FF5,W
020CA:  BTFSS  FA6.6
020CC:  GOTO   20CA
020D0:  MOVLB  E
020D2:  MOVWF  xF9
020D4:  MOVFF  31F,FF6
020D8:  MOVFF  320,FF7
020DC:  MOVFF  321,FF8
020E0:  MOVLB  3
020E2:  DECFSZ x1E,F
020E4:  BRA    20EA
020E6:  BRA    20F0
020E8:  MOVLB  0
020EA:  MOVLB  0
020EC:  GOTO   20BA
020F0:  MOVLB  0
020F2:  RETURN 0
*
022D0:  MOVLB  A
022D2:  BTFSS  x78.7
022D4:  BRA    22DC
022D6:  MOVLB  0
022D8:  GOTO   2312
022DC:  MOVLW  0F
022DE:  MOVWF  00
022E0:  SWAPF  x77,W
022E2:  ANDWF  00,F
022E4:  MOVLW  0A
022E6:  SUBWF  00,W
022E8:  BTFSS  FD8.0
022EA:  BRA    22F2
022EC:  MOVLB  0
022EE:  GOTO   22FC
022F2:  MOVLW  30
022F4:  ADDWF  00,F
022F6:  MOVLB  0
022F8:  GOTO   2304
022FC:  MOVLB  A
022FE:  MOVF   x78,W
02300:  ADDWF  00,F
02302:  MOVLB  0
02304:  MOVF   00,W
02306:  BTFSS  FA6.6
02308:  GOTO   2306
0230C:  MOVLB  E
0230E:  MOVWF  xF9
02310:  MOVLB  0
02312:  MOVLW  0F
02314:  MOVLB  A
02316:  ANDWF  x77,F
02318:  MOVLW  0A
0231A:  SUBWF  x77,W
0231C:  BTFSS  FD8.0
0231E:  BRA    2326
02320:  MOVLB  0
02322:  GOTO   232E
02326:  MOVLW  30
02328:  MOVLB  0
0232A:  GOTO   2336
0232E:  MOVLB  A
02330:  BCF    x78.7
02332:  MOVF   x78,W
02334:  MOVLB  0
02336:  MOVLB  A
02338:  ADDWF  x77,F
0233A:  MOVF   x77,W
0233C:  MOVLB  0
0233E:  BTFSS  FA6.6
02340:  GOTO   233E
02344:  MOVLB  E
02346:  MOVWF  xF9
02348:  MOVLB  0
0234A:  RETURN 0
*
02852:  MOVLB  B
02854:  MOVF   xC6,W
02856:  ANDLW  07
02858:  MOVWF  00
0285A:  RRCF   xC6,W
0285C:  MOVWF  01
0285E:  RRCF   01,F
02860:  RRCF   01,F
02862:  MOVLW  1F
02864:  ANDWF  01,F
02866:  MOVF   01,W
02868:  ADDWF  xC8,W
0286A:  MOVWF  FE9
0286C:  MOVLW  00
0286E:  ADDWFC xC9,W
02870:  MOVWF  FEA
02872:  CLRF   01
02874:  INCF   01,F
02876:  INCF   00,F
02878:  MOVLB  0
0287A:  GOTO   2880
0287E:  RLCF   01,F
02880:  DECFSZ 00,F
02882:  GOTO   287E
02886:  MOVLB  B
02888:  MOVF   xC7,F
0288A:  BTFSS  FD8.2
0288C:  BRA    2894
0288E:  MOVLB  0
02890:  GOTO   289E
02894:  MOVF   01,W
02896:  IORWF  FEF,F
02898:  MOVLB  0
0289A:  GOTO   28A4
0289E:  COMF   01,F
028A0:  MOVF   01,W
028A2:  ANDWF  FEF,F
028A4:  RETURN 0
*
02C62:  TSTFSZ 01
02C64:  GOTO   2C72
02C68:  TSTFSZ 02
02C6A:  GOTO   2C74
02C6E:  GOTO   2C84
02C72:  INCF   02,F
02C74:  MOVFF  00,FEE
02C78:  DECFSZ 01,F
02C7A:  GOTO   2C74
02C7E:  DECFSZ 02,F
02C80:  GOTO   2C74
02C84:  RETURN 0
*
05E62:  BTFSC  FD8.1
05E64:  GOTO   5E70
05E68:  MOVLW  0A
05E6A:  MOVWF  FEA
05E6C:  MOVLW  DD
05E6E:  MOVWF  FE9
05E70:  CLRF   00
05E72:  CLRF   01
05E74:  CLRF   02
05E76:  CLRF   03
05E78:  MOVLB  A
05E7A:  CLRF   xDD
05E7C:  CLRF   xDE
05E7E:  CLRF   xDF
05E80:  CLRF   xE0
05E82:  MOVF   xDC,W
05E84:  IORWF  xDB,W
05E86:  IORWF  xDA,W
05E88:  IORWF  xD9,W
05E8A:  BTFSS  FD8.2
05E8C:  BRA    5E94
05E8E:  MOVLB  0
05E90:  GOTO   5F24
05E94:  MOVLB  0
05E96:  MOVLW  20
05E98:  MOVLB  A
05E9A:  MOVWF  xE1
05E9C:  MOVLB  0
05E9E:  BCF    FD8.0
05EA0:  MOVLB  A
05EA2:  RLCF   xD5,F
05EA4:  RLCF   xD6,F
05EA6:  RLCF   xD7,F
05EA8:  RLCF   xD8,F
05EAA:  RLCF   xDD,F
05EAC:  RLCF   xDE,F
05EAE:  RLCF   xDF,F
05EB0:  RLCF   xE0,F
05EB2:  MOVF   xDC,W
05EB4:  SUBWF  xE0,W
05EB6:  BTFSC  FD8.2
05EB8:  BRA    5EC0
05EBA:  MOVLB  0
05EBC:  GOTO   5EE2
05EC0:  MOVF   xDB,W
05EC2:  SUBWF  xDF,W
05EC4:  BTFSC  FD8.2
05EC6:  BRA    5ECE
05EC8:  MOVLB  0
05ECA:  GOTO   5EE2
05ECE:  MOVF   xDA,W
05ED0:  SUBWF  xDE,W
05ED2:  BTFSC  FD8.2
05ED4:  BRA    5EDC
05ED6:  MOVLB  0
05ED8:  GOTO   5EE2
05EDC:  MOVF   xD9,W
05EDE:  SUBWF  xDD,W
05EE0:  MOVLB  0
05EE2:  BTFSS  FD8.0
05EE4:  GOTO   5F0A
05EE8:  MOVLB  A
05EEA:  MOVF   xD9,W
05EEC:  SUBWF  xDD,F
05EEE:  MOVF   xDA,W
05EF0:  BTFSS  FD8.0
05EF2:  INCFSZ xDA,W
05EF4:  SUBWF  xDE,F
05EF6:  MOVF   xDB,W
05EF8:  BTFSS  FD8.0
05EFA:  INCFSZ xDB,W
05EFC:  SUBWF  xDF,F
05EFE:  MOVF   xDC,W
05F00:  BTFSS  FD8.0
05F02:  INCFSZ xDC,W
05F04:  SUBWF  xE0,F
05F06:  BSF    FD8.0
05F08:  MOVLB  0
05F0A:  RLCF   00,F
05F0C:  RLCF   01,F
05F0E:  RLCF   02,F
05F10:  RLCF   03,F
05F12:  MOVLB  A
05F14:  DECFSZ xE1,F
05F16:  BRA    5F1C
05F18:  BRA    5F22
05F1A:  MOVLB  0
05F1C:  MOVLB  0
05F1E:  GOTO   5E9E
05F22:  MOVLB  0
05F24:  MOVFF  ADD,FEF
05F28:  MOVFF  ADE,FEC
05F2C:  MOVFF  ADF,FEC
05F30:  MOVFF  AE0,FEC
05F34:  MOVF   FED,F
05F36:  MOVF   FED,F
05F38:  MOVF   FED,F
05F3A:  RETURN 0
05F3C:  MOVF   FE9,W
05F3E:  MOVLB  2
05F40:  MOVWF  xE7
05F42:  MOVLW  3B
05F44:  MOVWF  xEE
05F46:  MOVLW  9A
05F48:  MOVWF  xED
05F4A:  MOVLW  CA
05F4C:  MOVWF  xEC
05F4E:  CLRF   xEB
05F50:  MOVLW  0A
05F52:  MOVWF  xE9
05F54:  MOVLB  0
05F56:  BSF    FD8.1
05F58:  MOVLW  02
05F5A:  MOVWF  FEA
05F5C:  MOVLW  E3
05F5E:  MOVWF  FE9
05F60:  MOVFF  2E6,AD8
05F64:  MOVFF  2E5,AD7
05F68:  MOVFF  2E4,AD6
05F6C:  MOVFF  2E3,AD5
05F70:  MOVFF  2EE,ADC
05F74:  MOVFF  2ED,ADB
05F78:  MOVFF  2EC,ADA
05F7C:  MOVFF  2EB,AD9
05F80:  CALL   5E62
05F84:  MOVF   01,W
05F86:  MOVF   00,F
05F88:  BTFSS  FD8.2
05F8A:  GOTO   5FE2
05F8E:  MOVLB  2
05F90:  MOVF   xE9,W
05F92:  XORLW  01
05F94:  BTFSS  FD8.2
05F96:  BRA    5F9E
05F98:  MOVLB  0
05F9A:  GOTO   5FE2
05F9E:  MOVF   xE7,W
05FA0:  BTFSS  FD8.2
05FA2:  BRA    5FAA
05FA4:  MOVLB  0
05FA6:  GOTO   5FE8
05FAA:  ANDLW  0F
05FAC:  SUBWF  xE9,W
05FAE:  BTFSS  FD8.2
05FB0:  BRA    5FB8
05FB2:  MOVLB  0
05FB4:  GOTO   5FC4
05FB8:  BTFSS  FD8.0
05FBA:  BRA    5FC2
05FBC:  MOVLB  0
05FBE:  GOTO   5FFA
05FC2:  MOVLB  0
05FC4:  MOVLB  2
05FC6:  BTFSS  xE7.7
05FC8:  BRA    5FD0
05FCA:  MOVLB  0
05FCC:  GOTO   5FFA
05FD0:  BTFSS  xE7.6
05FD2:  BRA    5FDA
05FD4:  MOVLB  0
05FD6:  GOTO   5FE8
05FDA:  MOVLW  20
05FDC:  MOVLB  0
05FDE:  GOTO   5FEA
05FE2:  MOVLB  2
05FE4:  CLRF   xE7
05FE6:  MOVLB  0
05FE8:  MOVLW  30
05FEA:  ADDWF  00,F
05FEC:  MOVF   00,W
05FEE:  BTFSS  FA6.6
05FF0:  GOTO   5FEE
05FF4:  MOVLB  E
05FF6:  MOVWF  xF9
05FF8:  MOVLB  0
05FFA:  BCF    FD8.1
05FFC:  MOVFF  2EE,AD8
06000:  MOVFF  2ED,AD7
06004:  MOVFF  2EC,AD6
06008:  MOVFF  2EB,AD5
0600C:  MOVLB  A
0600E:  CLRF   xDC
06010:  CLRF   xDB
06012:  CLRF   xDA
06014:  MOVLW  0A
06016:  MOVWF  xD9
06018:  MOVLB  0
0601A:  CALL   5E62
0601E:  MOVFF  03,2EE
06022:  MOVFF  02,2ED
06026:  MOVFF  01,2EC
0602A:  MOVFF  00,2EB
0602E:  MOVLB  2
06030:  DECFSZ xE9,F
06032:  BRA    6038
06034:  BRA    603E
06036:  MOVLB  0
06038:  MOVLB  0
0603A:  GOTO   5F56
0603E:  MOVLB  0
06040:  RETURN 0
*
07D8A:  MOVLB  A
07D8C:  MOVF   xCB,W
07D8E:  MULWF  xCD
07D90:  MOVFF  FF3,01
07D94:  MOVFF  FF4,00
07D98:  MULWF  xCE
07D9A:  MOVF   FF3,W
07D9C:  ADDWF  00,F
07D9E:  MOVF   xCC,W
07DA0:  MULWF  xCD
07DA2:  MOVF   FF3,W
07DA4:  ADDWFC 00,W
07DA6:  MOVWF  02
07DA8:  MOVLB  0
07DAA:  RETURN 0
07DAC:  CLRF   01
07DAE:  CLRF   02
07DB0:  CLRF   00
07DB2:  CLRF   03
07DB4:  MOVLB  2
07DB6:  MOVF   x91,W
07DB8:  BTFSC  FD8.2
07DBA:  BRA    7DC2
07DBC:  MOVLB  0
07DBE:  GOTO   7DD0
07DC2:  MOVF   x90,W
07DC4:  BTFSS  FD8.2
07DC6:  BRA    7DCE
07DC8:  MOVLB  0
07DCA:  GOTO   7E24
07DCE:  MOVLB  0
07DD0:  MOVLW  10
07DD2:  MOVLB  2
07DD4:  MOVWF  x92
07DD6:  MOVLB  0
07DD8:  BCF    FD8.0
07DDA:  MOVLB  2
07DDC:  RLCF   x8E,F
07DDE:  RLCF   x8F,F
07DE0:  RLCF   00,F
07DE2:  RLCF   03,F
07DE4:  MOVF   x91,W
07DE6:  SUBWF  03,W
07DE8:  BTFSC  FD8.2
07DEA:  BRA    7DF2
07DEC:  MOVLB  0
07DEE:  GOTO   7DF8
07DF2:  MOVF   x90,W
07DF4:  SUBWF  00,W
07DF6:  MOVLB  0
07DF8:  BTFSS  FD8.0
07DFA:  GOTO   7E10
07DFE:  MOVLB  2
07E00:  MOVF   x90,W
07E02:  SUBWF  00,F
07E04:  BTFSS  FD8.0
07E06:  DECF   03,F
07E08:  MOVF   x91,W
07E0A:  SUBWF  03,F
07E0C:  BSF    FD8.0
07E0E:  MOVLB  0
07E10:  RLCF   01,F
07E12:  RLCF   02,F
07E14:  MOVLB  2
07E16:  DECFSZ x92,F
07E18:  BRA    7E1E
07E1A:  BRA    7E24
07E1C:  MOVLB  0
07E1E:  MOVLB  0
07E20:  GOTO   7DD8
07E24:  MOVLB  0
07E26:  GOTO   8674 (RETURN)
07E2A:  MOVLW  8E
07E2C:  MOVWF  00
07E2E:  MOVFF  28D,01
07E32:  MOVFF  28C,02
07E36:  CLRF   03
07E38:  MOVF   01,F
07E3A:  BTFSS  FD8.2
07E3C:  GOTO   7E58
07E40:  MOVFF  02,01
07E44:  CLRF   02
07E46:  MOVLW  08
07E48:  SUBWF  00,F
07E4A:  MOVF   01,F
07E4C:  BTFSS  FD8.2
07E4E:  GOTO   7E58
07E52:  CLRF   00
07E54:  GOTO   7E6C
07E58:  BCF    FD8.0
07E5A:  BTFSC  01.7
07E5C:  GOTO   7E6A
07E60:  RLCF   02,F
07E62:  RLCF   01,F
07E64:  DECF   00,F
07E66:  GOTO   7E58
07E6A:  BCF    01.7
07E6C:  GOTO   8688 (RETURN)
07E70:  MOVLW  80
07E72:  BTFSS  FD8.1
07E74:  BRA    7E7C
07E76:  MOVLB  2
07E78:  XORWF  x91,F
07E7A:  MOVLB  0
07E7C:  MOVLB  2
07E7E:  CLRF   x96
07E80:  CLRF   x97
07E82:  MOVFF  28D,295
07E86:  MOVF   x91,W
07E88:  XORWF  x95,F
07E8A:  MOVF   x8C,W
07E8C:  BTFSS  FD8.2
07E8E:  BRA    7E96
07E90:  MOVLB  0
07E92:  GOTO   8212
07E96:  MOVWF  x94
07E98:  MOVFF  294,00
07E9C:  MOVF   x90,W
07E9E:  BTFSS  FD8.2
07EA0:  BRA    7EA8
07EA2:  MOVLB  0
07EA4:  GOTO   8226
07EA8:  SUBWF  x94,F
07EAA:  BTFSS  FD8.2
07EAC:  BRA    7EB4
07EAE:  MOVLB  0
07EB0:  GOTO   80A0
07EB4:  BTFSS  FD8.0
07EB6:  BRA    7EBE
07EB8:  MOVLB  0
07EBA:  GOTO   7EC4
07EBE:  MOVLB  0
07EC0:  GOTO   7FAC
07EC4:  MOVFF  291,29A
07EC8:  MOVLB  2
07ECA:  BSF    x9A.7
07ECC:  MOVFF  292,299
07ED0:  MOVFF  293,298
07ED4:  MOVLB  0
07ED6:  MOVLB  2
07ED8:  CLRF   x97
07EDA:  BCF    FD8.0
07EDC:  RRCF   x9A,F
07EDE:  RRCF   x99,F
07EE0:  RRCF   x98,F
07EE2:  RRCF   x97,F
07EE4:  DECFSZ x94,F
07EE6:  BRA    7EEC
07EE8:  BRA    7EF2
07EEA:  MOVLB  0
07EEC:  MOVLB  0
07EEE:  GOTO   7ED6
07EF2:  MOVLB  0
07EF4:  MOVLB  2
07EF6:  BTFSC  x95.7
07EF8:  BRA    7F00
07EFA:  MOVLB  0
07EFC:  GOTO   7F0E
07F00:  BSF    x96.0
07F02:  MOVLB  0
07F04:  GOTO   8252
07F08:  MOVLB  2
07F0A:  BCF    x96.0
07F0C:  MOVLB  0
07F0E:  MOVLB  2
07F10:  BCF    x94.0
07F12:  BSF    x96.4
07F14:  MOVLW  02
07F16:  MOVWF  FEA
07F18:  MOVLW  8F
07F1A:  MOVWF  FE9
07F1C:  MOVLB  0
07F1E:  GOTO   82AC
07F22:  MOVLB  2
07F24:  BCF    x96.4
07F26:  BTFSS  x95.7
07F28:  BRA    7F30
07F2A:  MOVLB  0
07F2C:  GOTO   7F54
07F30:  BTFSC  x94.0
07F32:  BRA    7F3A
07F34:  MOVLB  0
07F36:  GOTO   7F7A
07F3A:  RRCF   x9A,F
07F3C:  RRCF   x99,F
07F3E:  RRCF   x98,F
07F40:  RRCF   x97,F
07F42:  INCF   00,F
07F44:  BTFSS  FD8.2
07F46:  BRA    7F4E
07F48:  MOVLB  0
07F4A:  GOTO   8246
07F4E:  MOVLB  0
07F50:  GOTO   7F7A
07F54:  MOVLB  2
07F56:  BTFSS  x9A.7
07F58:  BRA    7F60
07F5A:  MOVLB  0
07F5C:  GOTO   7F8A
07F60:  BCF    FD8.0
07F62:  RLCF   x97,F
07F64:  RLCF   x98,F
07F66:  RLCF   x99,F
07F68:  RLCF   x9A,F
07F6A:  DECFSZ 00,F
07F6C:  BRA    7F74
07F6E:  MOVLB  0
07F70:  GOTO   8246
07F74:  MOVLB  0
07F76:  GOTO   7F54
07F7A:  MOVLB  2
07F7C:  BSF    x96.6
07F7E:  MOVLB  0
07F80:  GOTO   8112
07F84:  MOVLB  2
07F86:  BCF    x96.6
07F88:  MOVLB  0
07F8A:  MOVFF  28D,295
07F8E:  MOVLB  2
07F90:  BTFSC  x95.7
07F92:  BRA    7F9A
07F94:  MOVLB  0
07F96:  GOTO   7FA2
07F9A:  BSF    x9A.7
07F9C:  MOVLB  0
07F9E:  GOTO   8236
07FA2:  MOVLB  2
07FA4:  BCF    x9A.7
07FA6:  MOVLB  0
07FA8:  GOTO   8236
07FAC:  MOVFF  290,294
07FB0:  MOVFF  294,00
07FB4:  MOVLB  2
07FB6:  MOVF   x8C,W
07FB8:  SUBWF  x94,F
07FBA:  MOVFF  28D,29A
07FBE:  BSF    x9A.7
07FC0:  MOVFF  28E,299
07FC4:  MOVFF  28F,298
07FC8:  MOVLB  0
07FCA:  MOVLB  2
07FCC:  CLRF   x97
07FCE:  BCF    FD8.0
07FD0:  RRCF   x9A,F
07FD2:  RRCF   x99,F
07FD4:  RRCF   x98,F
07FD6:  RRCF   x97,F
07FD8:  DECFSZ x94,F
07FDA:  BRA    7FE0
07FDC:  BRA    7FE6
07FDE:  MOVLB  0
07FE0:  MOVLB  0
07FE2:  GOTO   7FCA
07FE6:  MOVLB  0
07FE8:  MOVLB  2
07FEA:  BTFSC  x95.7
07FEC:  BRA    7FF4
07FEE:  MOVLB  0
07FF0:  GOTO   8002
07FF4:  BSF    x96.1
07FF6:  MOVLB  0
07FF8:  GOTO   8252
07FFC:  MOVLB  2
07FFE:  BCF    x96.1
08000:  MOVLB  0
08002:  MOVLB  2
08004:  BCF    x94.0
08006:  BSF    x96.5
08008:  MOVLW  02
0800A:  MOVWF  FEA
0800C:  MOVLW  93
0800E:  MOVWF  FE9
08010:  MOVLB  0
08012:  GOTO   82AC
08016:  MOVLB  2
08018:  BCF    x96.5
0801A:  BTFSS  x95.7
0801C:  BRA    8024
0801E:  MOVLB  0
08020:  GOTO   8048
08024:  BTFSC  x94.0
08026:  BRA    802E
08028:  MOVLB  0
0802A:  GOTO   806E
0802E:  RRCF   x9A,F
08030:  RRCF   x99,F
08032:  RRCF   x98,F
08034:  RRCF   x97,F
08036:  INCF   00,F
08038:  BTFSS  FD8.2
0803A:  BRA    8042
0803C:  MOVLB  0
0803E:  GOTO   8246
08042:  MOVLB  0
08044:  GOTO   806E
08048:  MOVLB  2
0804A:  BTFSS  x9A.7
0804C:  BRA    8054
0804E:  MOVLB  0
08050:  GOTO   807E
08054:  BCF    FD8.0
08056:  RLCF   x97,F
08058:  RLCF   x98,F
0805A:  RLCF   x99,F
0805C:  RLCF   x9A,F
0805E:  DECFSZ 00,F
08060:  BRA    8068
08062:  MOVLB  0
08064:  GOTO   8246
08068:  MOVLB  0
0806A:  GOTO   8048
0806E:  MOVLB  2
08070:  BSF    x96.7
08072:  MOVLB  0
08074:  GOTO   8112
08078:  MOVLB  2
0807A:  BCF    x96.7
0807C:  MOVLB  0
0807E:  MOVFF  291,295
08082:  MOVLB  2
08084:  BTFSC  x95.7
08086:  BRA    808E
08088:  MOVLB  0
0808A:  GOTO   8096
0808E:  BSF    x9A.7
08090:  MOVLB  0
08092:  GOTO   8236
08096:  MOVLB  2
08098:  BCF    x9A.7
0809A:  MOVLB  0
0809C:  GOTO   8236
080A0:  MOVFF  291,29A
080A4:  MOVLB  2
080A6:  BSF    x9A.7
080A8:  MOVFF  292,299
080AC:  MOVFF  293,298
080B0:  BTFSC  x95.7
080B2:  BRA    80BA
080B4:  MOVLB  0
080B6:  GOTO   80CA
080BA:  BCF    x9A.7
080BC:  BSF    x96.2
080BE:  MOVLB  0
080C0:  GOTO   8252
080C4:  MOVLB  2
080C6:  BCF    x96.2
080C8:  MOVLB  0
080CA:  MOVLB  2
080CC:  CLRF   x97
080CE:  BCF    x94.0
080D0:  MOVLW  02
080D2:  MOVWF  FEA
080D4:  MOVLW  8F
080D6:  MOVWF  FE9
080D8:  MOVLB  0
080DA:  GOTO   82AC
080DE:  MOVLB  2
080E0:  BTFSS  x95.7
080E2:  BRA    80EA
080E4:  MOVLB  0
080E6:  GOTO   8172
080EA:  MOVFF  28D,295
080EE:  MOVLB  0
080F0:  MOVLB  2
080F2:  BTFSC  x94.0
080F4:  BRA    80FC
080F6:  MOVLB  0
080F8:  GOTO   8112
080FC:  RRCF   x9A,F
080FE:  RRCF   x99,F
08100:  RRCF   x98,F
08102:  RRCF   x97,F
08104:  INCF   00,F
08106:  BTFSS  FD8.2
08108:  BRA    8110
0810A:  MOVLB  0
0810C:  GOTO   8246
08110:  MOVLB  0
08112:  MOVLB  2
08114:  BTFSC  x97.7
08116:  BRA    811E
08118:  MOVLB  0
0811A:  GOTO   8156
0811E:  INCF   x98,F
08120:  BTFSC  FD8.2
08122:  BRA    812A
08124:  MOVLB  0
08126:  GOTO   8156
0812A:  INCF   x99,F
0812C:  BTFSC  FD8.2
0812E:  BRA    8136
08130:  MOVLB  0
08132:  GOTO   8156
08136:  INCF   x9A,F
08138:  BTFSC  FD8.2
0813A:  BRA    8142
0813C:  MOVLB  0
0813E:  GOTO   8156
08142:  RRCF   x9A,F
08144:  RRCF   x99,F
08146:  RRCF   x98,F
08148:  INCF   00,F
0814A:  BTFSS  FD8.2
0814C:  BRA    8154
0814E:  MOVLB  0
08150:  GOTO   8246
08154:  MOVLB  0
08156:  MOVLB  2
08158:  BTFSS  x96.6
0815A:  BRA    8162
0815C:  MOVLB  0
0815E:  GOTO   7F84
08162:  BTFSS  x96.7
08164:  BRA    816C
08166:  MOVLB  0
08168:  GOTO   8078
0816C:  MOVLB  0
0816E:  GOTO   81F4
08172:  MOVLW  80
08174:  MOVLB  2
08176:  XORWF  x9A,F
08178:  BTFSC  x9A.7
0817A:  BRA    8182
0817C:  MOVLB  0
0817E:  GOTO   8190
08182:  MOVLB  0
08184:  GOTO   8252
08188:  MOVFF  291,295
0818C:  GOTO   81CA
08190:  MOVFF  28D,295
08194:  MOVLB  2
08196:  MOVF   x9A,F
08198:  BTFSC  FD8.2
0819A:  BRA    81A2
0819C:  MOVLB  0
0819E:  GOTO   81CA
081A2:  MOVLB  0
081A4:  MOVLB  2
081A6:  MOVF   x99,F
081A8:  BTFSC  FD8.2
081AA:  BRA    81B2
081AC:  MOVLB  0
081AE:  GOTO   81CA
081B2:  MOVLB  0
081B4:  MOVLB  2
081B6:  MOVF   x98,F
081B8:  BTFSC  FD8.2
081BA:  BRA    81C2
081BC:  MOVLB  0
081BE:  GOTO   81CA
081C2:  MOVLB  0
081C4:  CLRF   00
081C6:  GOTO   8236
081CA:  MOVLB  2
081CC:  BTFSS  x9A.7
081CE:  BRA    81D6
081D0:  MOVLB  0
081D2:  GOTO   81F4
081D6:  BCF    FD8.0
081D8:  RLCF   x97,F
081DA:  RLCF   x98,F
081DC:  RLCF   x99,F
081DE:  RLCF   x9A,F
081E0:  DECFSZ 00,F
081E2:  BRA    81E8
081E4:  BRA    81EE
081E6:  MOVLB  0
081E8:  MOVLB  0
081EA:  GOTO   81CA
081EE:  MOVLB  0
081F0:  GOTO   8246
081F4:  MOVLB  2
081F6:  BTFSC  x95.7
081F8:  BRA    8200
081FA:  MOVLB  0
081FC:  GOTO   8208
08200:  BSF    x9A.7
08202:  MOVLB  0
08204:  GOTO   8236
08208:  MOVLB  2
0820A:  BCF    x9A.7
0820C:  MOVLB  0
0820E:  GOTO   8236
08212:  MOVFF  290,00
08216:  MOVFF  291,29A
0821A:  MOVFF  292,299
0821E:  MOVFF  293,298
08222:  GOTO   8236
08226:  MOVFF  28C,00
0822A:  MOVFF  28D,29A
0822E:  MOVFF  28E,299
08232:  MOVFF  28F,298
08236:  MOVFF  29A,01
0823A:  MOVFF  299,02
0823E:  MOVFF  298,03
08242:  GOTO   8318
08246:  CLRF   00
08248:  CLRF   01
0824A:  CLRF   02
0824C:  CLRF   03
0824E:  GOTO   8318
08252:  MOVLB  2
08254:  CLRF   x97
08256:  COMF   x98,F
08258:  COMF   x99,F
0825A:  COMF   x9A,F
0825C:  COMF   x97,F
0825E:  INCF   x97,F
08260:  BTFSC  FD8.2
08262:  BRA    826A
08264:  MOVLB  0
08266:  GOTO   8286
0826A:  INCF   x98,F
0826C:  BTFSC  FD8.2
0826E:  BRA    8276
08270:  MOVLB  0
08272:  GOTO   8286
08276:  INCF   x99,F
08278:  BTFSC  FD8.2
0827A:  BRA    8282
0827C:  MOVLB  0
0827E:  GOTO   8286
08282:  INCF   x9A,F
08284:  MOVLB  0
08286:  MOVLB  2
08288:  BTFSS  x96.0
0828A:  BRA    8292
0828C:  MOVLB  0
0828E:  GOTO   7F08
08292:  BTFSS  x96.1
08294:  BRA    829C
08296:  MOVLB  0
08298:  GOTO   7FFC
0829C:  BTFSS  x96.2
0829E:  BRA    82A6
082A0:  MOVLB  0
082A2:  GOTO   80C4
082A6:  MOVLB  0
082A8:  GOTO   8188
082AC:  MOVF   FEF,W
082AE:  MOVLB  2
082B0:  ADDWF  x98,F
082B2:  BTFSC  FD8.0
082B4:  BRA    82BC
082B6:  MOVLB  0
082B8:  GOTO   82D0
082BC:  INCF   x99,F
082BE:  BTFSC  FD8.2
082C0:  BRA    82C8
082C2:  MOVLB  0
082C4:  GOTO   82D0
082C8:  INCF   x9A,F
082CA:  BTFSC  FD8.2
082CC:  BSF    x94.0
082CE:  MOVLB  0
082D0:  MOVF   FED,F
082D2:  MOVF   FEF,W
082D4:  MOVLB  2
082D6:  ADDWF  x99,F
082D8:  BTFSC  FD8.0
082DA:  BRA    82E2
082DC:  MOVLB  0
082DE:  GOTO   82EA
082E2:  INCF   x9A,F
082E4:  BTFSC  FD8.2
082E6:  BSF    x94.0
082E8:  MOVLB  0
082EA:  MOVF   FED,F
082EC:  MOVF   FEF,W
082EE:  BTFSC  FEF.7
082F0:  GOTO   82F6
082F4:  XORLW  80
082F6:  MOVLB  2
082F8:  ADDWF  x9A,F
082FA:  BTFSC  FD8.0
082FC:  BSF    x94.0
082FE:  BTFSS  x96.4
08300:  BRA    8308
08302:  MOVLB  0
08304:  GOTO   7F22
08308:  BTFSS  x96.5
0830A:  BRA    8312
0830C:  MOVLB  0
0830E:  GOTO   8016
08312:  MOVLB  0
08314:  GOTO   80DE
08318:  GOTO   86C0 (RETURN)
0831C:  MOVLB  2
0831E:  MOVF   x90,W
08320:  BTFSS  FD8.2
08322:  BRA    832A
08324:  MOVLB  0
08326:  GOTO   85D8
0832A:  MOVWF  x9C
0832C:  MOVF   x94,W
0832E:  BTFSS  FD8.2
08330:  BRA    8338
08332:  MOVLB  0
08334:  GOTO   85D8
08338:  SUBWF  x9C,F
0833A:  BTFSS  FD8.0
0833C:  BRA    8344
0833E:  MOVLB  0
08340:  GOTO   834A
08344:  MOVLB  0
08346:  GOTO   8360
0834A:  MOVLW  7F
0834C:  MOVLB  2
0834E:  ADDWF  x9C,F
08350:  BTFSS  FD8.0
08352:  BRA    835A
08354:  MOVLB  0
08356:  GOTO   85D8
0835A:  MOVLB  0
0835C:  GOTO   837C
08360:  MOVLW  81
08362:  MOVLB  2
08364:  SUBWF  x9C,F
08366:  BTFSC  FD8.0
08368:  BRA    8370
0836A:  MOVLB  0
0836C:  GOTO   85D8
08370:  BTFSS  FD8.2
08372:  BRA    837A
08374:  MOVLB  0
08376:  GOTO   85D8
0837A:  MOVLB  0
0837C:  MOVFF  29C,00
08380:  CLRF   01
08382:  CLRF   02
08384:  CLRF   03
08386:  MOVLB  2
08388:  CLRF   x9B
0838A:  MOVFF  291,29A
0838E:  BSF    x9A.7
08390:  MOVFF  292,299
08394:  MOVFF  293,298
08398:  MOVLW  19
0839A:  MOVWF  x9C
0839C:  MOVLB  0
0839E:  MOVLB  2
083A0:  MOVF   x97,W
083A2:  SUBWF  x98,F
083A4:  BTFSS  FD8.0
083A6:  BRA    83AE
083A8:  MOVLB  0
083AA:  GOTO   83E4
083AE:  MOVLW  01
083B0:  SUBWF  x99,F
083B2:  BTFSS  FD8.0
083B4:  BRA    83BC
083B6:  MOVLB  0
083B8:  GOTO   83E4
083BC:  SUBWF  x9A,F
083BE:  BTFSS  FD8.0
083C0:  BRA    83C8
083C2:  MOVLB  0
083C4:  GOTO   83E4
083C8:  SUBWF  x9B,F
083CA:  BTFSS  FD8.0
083CC:  BRA    83D4
083CE:  MOVLB  0
083D0:  GOTO   83E4
083D4:  INCF   x9B,F
083D6:  INCF   x9A,F
083D8:  INCF   x99,F
083DA:  MOVF   x97,W
083DC:  ADDWF  x98,F
083DE:  MOVLB  0
083E0:  GOTO   8498
083E4:  MOVLB  2
083E6:  MOVF   x96,W
083E8:  SUBWF  x99,F
083EA:  BTFSS  FD8.0
083EC:  BRA    83F4
083EE:  MOVLB  0
083F0:  GOTO   844C
083F4:  MOVLW  01
083F6:  SUBWF  x9A,F
083F8:  BTFSS  FD8.0
083FA:  BRA    8402
083FC:  MOVLB  0
083FE:  GOTO   844C
08402:  SUBWF  x9B,F
08404:  BTFSS  FD8.0
08406:  BRA    840E
08408:  MOVLB  0
0840A:  GOTO   844C
0840E:  MOVLB  0
08410:  MOVLB  2
08412:  INCF   x9B,F
08414:  INCF   x9A,F
08416:  MOVF   x96,W
08418:  ADDWF  x99,F
0841A:  MOVLB  0
0841C:  MOVLB  2
0841E:  MOVF   x97,W
08420:  ADDWF  x98,F
08422:  BTFSC  FD8.0
08424:  BRA    842C
08426:  MOVLB  0
08428:  GOTO   8498
0842C:  INCF   x99,F
0842E:  BTFSC  FD8.2
08430:  BRA    8438
08432:  MOVLB  0
08434:  GOTO   8498
08438:  INCF   x9A,F
0843A:  BTFSC  FD8.2
0843C:  BRA    8444
0843E:  MOVLB  0
08440:  GOTO   8498
08444:  INCF   x9B,F
08446:  MOVLB  0
08448:  GOTO   8498
0844C:  MOVLB  2
0844E:  MOVF   x95,W
08450:  IORLW  80
08452:  SUBWF  x9A,F
08454:  BTFSS  FD8.0
08456:  BRA    845E
08458:  MOVLB  0
0845A:  GOTO   8496
0845E:  MOVLW  01
08460:  SUBWF  x9B,F
08462:  BTFSS  FD8.0
08464:  BRA    846C
08466:  MOVLB  0
08468:  GOTO   8496
0846C:  INCF   x9B,F
0846E:  MOVF   x95,W
08470:  IORLW  80
08472:  ADDWF  x9A,F
08474:  MOVF   x96,W
08476:  ADDWF  x99,F
08478:  BTFSC  FD8.0
0847A:  BRA    8482
0847C:  MOVLB  0
0847E:  GOTO   841C
08482:  INCF   x9A,F
08484:  BTFSC  FD8.2
08486:  BRA    848E
08488:  MOVLB  0
0848A:  GOTO   841C
0848E:  INCF   x9B,F
08490:  MOVLB  0
08492:  GOTO   841C
08496:  BSF    03.0
08498:  MOVLB  2
0849A:  DECFSZ x9C,F
0849C:  BRA    84A2
0849E:  BRA    84A8
084A0:  MOVLB  0
084A2:  MOVLB  0
084A4:  GOTO   84AE
084A8:  MOVLB  0
084AA:  GOTO   84CA
084AE:  BCF    FD8.0
084B0:  MOVLB  2
084B2:  RLCF   x98,F
084B4:  RLCF   x99,F
084B6:  RLCF   x9A,F
084B8:  RLCF   x9B,F
084BA:  BCF    FD8.0
084BC:  RLCF   03,F
084BE:  RLCF   02,F
084C0:  RLCF   01,F
084C2:  RLCF   x9D,F
084C4:  MOVLB  0
084C6:  GOTO   839E
084CA:  MOVLB  2
084CC:  BTFSC  x9D.0
084CE:  BRA    84D6
084D0:  MOVLB  0
084D2:  GOTO   84E6
084D6:  BCF    FD8.0
084D8:  RRCF   01,F
084DA:  RRCF   02,F
084DC:  RRCF   03,F
084DE:  RRCF   x9D,F
084E0:  MOVLB  0
084E2:  GOTO   84EE
084E6:  DECF   00,F
084E8:  BTFSC  FD8.2
084EA:  GOTO   85D8
084EE:  MOVLB  2
084F0:  BTFSS  x9D.7
084F2:  BRA    84FA
084F4:  MOVLB  0
084F6:  GOTO   8590
084FA:  BCF    FD8.0
084FC:  RLCF   x98,F
084FE:  RLCF   x99,F
08500:  RLCF   x9A,F
08502:  RLCF   x9B,F
08504:  MOVLB  0
08506:  MOVLB  2
08508:  MOVF   x97,W
0850A:  SUBWF  x98,F
0850C:  BTFSS  FD8.0
0850E:  BRA    8516
08510:  MOVLB  0
08512:  GOTO   853E
08516:  MOVLW  01
08518:  SUBWF  x99,F
0851A:  BTFSS  FD8.0
0851C:  BRA    8524
0851E:  MOVLB  0
08520:  GOTO   853E
08524:  SUBWF  x9A,F
08526:  BTFSS  FD8.0
08528:  BRA    8530
0852A:  MOVLB  0
0852C:  GOTO   853E
08530:  SUBWF  x9B,F
08532:  BTFSC  FD8.0
08534:  BRA    853C
08536:  MOVLB  0
08538:  GOTO   85B6
0853C:  MOVLB  0
0853E:  MOVLB  2
08540:  MOVF   x96,W
08542:  SUBWF  x99,F
08544:  BTFSS  FD8.0
08546:  BRA    854E
08548:  MOVLB  0
0854A:  GOTO   856A
0854E:  MOVLW  01
08550:  SUBWF  x9A,F
08552:  BTFSS  FD8.0
08554:  BRA    855C
08556:  MOVLB  0
08558:  GOTO   856A
0855C:  SUBWF  x9B,F
0855E:  BTFSC  FD8.0
08560:  BRA    8568
08562:  MOVLB  0
08564:  GOTO   85B6
08568:  MOVLB  0
0856A:  MOVLB  2
0856C:  MOVF   x95,W
0856E:  IORLW  80
08570:  MOVLB  0
08572:  MOVLB  2
08574:  SUBWF  x9A,F
08576:  BTFSS  FD8.0
08578:  BRA    8580
0857A:  MOVLB  0
0857C:  GOTO   8590
08580:  MOVLW  01
08582:  SUBWF  x9B,F
08584:  BTFSC  FD8.0
08586:  BRA    858E
08588:  MOVLB  0
0858A:  GOTO   85B6
0858E:  MOVLB  0
08590:  INCF   03,F
08592:  BTFSS  FD8.2
08594:  GOTO   85B6
08598:  INCF   02,F
0859A:  BTFSS  FD8.2
0859C:  GOTO   85B6
085A0:  INCF   01,F
085A2:  BTFSS  FD8.2
085A4:  GOTO   85B6
085A8:  INCF   00,F
085AA:  BTFSC  FD8.2
085AC:  GOTO   85D8
085B0:  RRCF   01,F
085B2:  RRCF   02,F
085B4:  RRCF   03,F
085B6:  MOVFF  291,29C
085BA:  MOVLB  2
085BC:  MOVF   x95,W
085BE:  XORWF  x9C,F
085C0:  BTFSC  x9C.7
085C2:  BRA    85CA
085C4:  MOVLB  0
085C6:  GOTO   85D2
085CA:  BSF    01.7
085CC:  MOVLB  0
085CE:  GOTO   85E0
085D2:  BCF    01.7
085D4:  GOTO   85E0
085D8:  CLRF   00
085DA:  CLRF   01
085DC:  CLRF   02
085DE:  CLRF   03
085E0:  GOTO   86F4 (RETURN)
085E4:  MOVLW  8E
085E6:  MOVWF  00
085E8:  MOVLB  2
085EA:  MOVF   x8C,W
085EC:  SUBWF  00,F
085EE:  MOVFF  28D,02
085F2:  MOVFF  28E,01
085F6:  BSF    02.7
085F8:  MOVF   00,F
085FA:  BTFSS  FD8.2
085FC:  BRA    8604
085FE:  MOVLB  0
08600:  GOTO   8622
08604:  MOVLB  0
08606:  BCF    FD8.0
08608:  MOVF   02,F
0860A:  BTFSS  FD8.2
0860C:  GOTO   8618
08610:  MOVF   01,F
08612:  BTFSC  FD8.2
08614:  GOTO   8622
08618:  RRCF   02,F
0861A:  RRCF   01,F
0861C:  DECFSZ 00,F
0861E:  GOTO   8606
08622:  MOVLB  2
08624:  BTFSC  x8D.7
08626:  BRA    862E
08628:  MOVLB  0
0862A:  GOTO   863A
0862E:  MOVLB  0
08630:  COMF   01,F
08632:  COMF   02,F
08634:  INCF   01,F
08636:  BTFSC  FD8.2
08638:  INCF   02,F
0863A:  GOTO   8718 (RETURN)
*
0E2B8:  MOVFF  FEA,246
0E2BC:  MOVFF  FE9,245
0E2C0:  MOVLB  2
0E2C2:  SWAPF  x3F,W
0E2C4:  IORLW  F0
0E2C6:  MOVWF  x41
0E2C8:  ADDWF  x41,F
0E2CA:  ADDLW  E2
0E2CC:  MOVWF  x42
0E2CE:  ADDLW  32
0E2D0:  MOVWF  x44
0E2D2:  MOVF   x3F,W
0E2D4:  ANDLW  0F
0E2D6:  ADDWF  x42,F
0E2D8:  ADDWF  x42,F
0E2DA:  ADDWF  x44,F
0E2DC:  ADDLW  E9
0E2DE:  MOVWF  x43
0E2E0:  ADDWF  x43,F
0E2E2:  ADDWF  x43,F
0E2E4:  SWAPF  x3E,W
0E2E6:  ANDLW  0F
0E2E8:  ADDWF  x43,F
0E2EA:  ADDWF  x44,F
0E2EC:  RLCF   x43,F
0E2EE:  RLCF   x44,F
0E2F0:  COMF   x44,F
0E2F2:  RLCF   x44,F
0E2F4:  MOVF   x3E,W
0E2F6:  ANDLW  0F
0E2F8:  ADDWF  x44,F
0E2FA:  RLCF   x41,F
0E2FC:  MOVLW  07
0E2FE:  MOVWF  x40
0E300:  MOVLW  0A
0E302:  MOVLB  0
0E304:  MOVLB  2
0E306:  DECF   x43,F
0E308:  ADDWF  x44,F
0E30A:  BTFSC  FD8.0
0E30C:  BRA    E314
0E30E:  MOVLB  0
0E310:  GOTO   E304
0E314:  MOVLB  0
0E316:  MOVLB  2
0E318:  DECF   x42,F
0E31A:  ADDWF  x43,F
0E31C:  BTFSC  FD8.0
0E31E:  BRA    E326
0E320:  MOVLB  0
0E322:  GOTO   E316
0E326:  MOVLB  0
0E328:  MOVLB  2
0E32A:  DECF   x41,F
0E32C:  ADDWF  x42,F
0E32E:  BTFSC  FD8.0
0E330:  BRA    E338
0E332:  MOVLB  0
0E334:  GOTO   E328
0E338:  MOVLB  0
0E33A:  MOVLB  2
0E33C:  DECF   x40,F
0E33E:  ADDWF  x41,F
0E340:  BTFSC  FD8.0
0E342:  BRA    E34A
0E344:  MOVLB  0
0E346:  GOTO   E33A
0E34A:  MOVLW  02
0E34C:  MOVWF  FEA
0E34E:  MOVLW  40
0E350:  MOVWF  FE9
0E352:  MOVLW  07
0E354:  ANDWF  x45,W
0E356:  BCF    x45.6
0E358:  MOVLB  0
0E35A:  ADDWF  FE9,F
0E35C:  MOVLW  00
0E35E:  ADDWFC FEA,F
0E360:  MOVF   FE9,W
0E362:  SUBLW  44
0E364:  BTFSS  FD8.2
0E366:  GOTO   E37A
0E36A:  MOVF   FEA,W
0E36C:  SUBLW  02
0E36E:  BTFSS  FD8.2
0E370:  GOTO   E37A
0E374:  MOVLB  2
0E376:  BSF    x45.6
0E378:  MOVLB  0
0E37A:  MOVF   FEF,W
0E37C:  MOVWF  00
0E37E:  BTFSS  FD8.2
0E380:  GOTO   E3AC
0E384:  MOVLB  2
0E386:  BTFSS  x45.6
0E388:  BRA    E390
0E38A:  MOVLB  0
0E38C:  GOTO   E3AC
0E390:  BTFSS  x45.4
0E392:  BRA    E39A
0E394:  MOVLB  0
0E396:  GOTO   E3C6
0E39A:  BTFSS  x45.3
0E39C:  BRA    E3A4
0E39E:  MOVLB  0
0E3A0:  GOTO   E3AC
0E3A4:  MOVLW  20
0E3A6:  MOVLB  0
0E3A8:  GOTO   E3B6
0E3AC:  MOVLB  2
0E3AE:  BSF    x45.3
0E3B0:  BCF    x45.4
0E3B2:  MOVLW  30
0E3B4:  MOVLB  0
0E3B6:  ADDWF  00,F
0E3B8:  MOVF   00,W
0E3BA:  BTFSS  FA6.6
0E3BC:  GOTO   E3BA
0E3C0:  MOVLB  E
0E3C2:  MOVWF  xF9
0E3C4:  MOVLB  0
0E3C6:  MOVF   FEE,W
0E3C8:  MOVLB  2
0E3CA:  BTFSC  x45.6
0E3CC:  BRA    E3D4
0E3CE:  MOVLB  0
0E3D0:  GOTO   E360
0E3D4:  MOVLB  0
0E3D6:  RETURN 0
0E3D8:  MOVLB  3
0E3DA:  MOVF   x25,W
0E3DC:  CLRF   01
0E3DE:  SUBWF  x24,W
0E3E0:  BTFSS  FD8.0
0E3E2:  BRA    E3EA
0E3E4:  MOVLB  0
0E3E6:  GOTO   E3F4
0E3EA:  MOVF   x24,W
0E3EC:  MOVWF  00
0E3EE:  MOVLB  0
0E3F0:  GOTO   E41E
0E3F4:  CLRF   00
0E3F6:  MOVLW  08
0E3F8:  MOVLB  3
0E3FA:  MOVWF  x26
0E3FC:  MOVLB  0
0E3FE:  MOVLB  3
0E400:  RLCF   x24,F
0E402:  RLCF   00,F
0E404:  MOVF   x25,W
0E406:  SUBWF  00,W
0E408:  BTFSC  FD8.0
0E40A:  MOVWF  00
0E40C:  RLCF   01,F
0E40E:  DECFSZ x26,F
0E410:  BRA    E416
0E412:  BRA    E41C
0E414:  MOVLB  0
0E416:  MOVLB  0
0E418:  GOTO   E3FE
0E41C:  MOVLB  0
0E41E:  RETURN 0
0E420:  MOVF   01,W
0E422:  MOVFF  2E3,324
0E426:  MOVLW  64
0E428:  MOVLB  3
0E42A:  MOVWF  x25
0E42C:  MOVLB  0
0E42E:  CALL   E3D8
0E432:  MOVFF  00,2E3
0E436:  MOVF   01,W
0E438:  MOVLW  30
0E43A:  BTFSS  FD8.2
0E43C:  GOTO   E460
0E440:  MOVLB  2
0E442:  BTFSC  xE4.1
0E444:  BRA    E44C
0E446:  MOVLB  0
0E448:  GOTO   E47A
0E44C:  BTFSS  xE4.3
0E44E:  BRA    E456
0E450:  MOVLB  0
0E452:  GOTO   E47A
0E456:  BTFSC  xE4.4
0E458:  MOVLW  20
0E45A:  MOVLB  0
0E45C:  GOTO   E46A
0E460:  MOVLB  2
0E462:  BCF    xE4.3
0E464:  BCF    xE4.4
0E466:  BSF    xE4.0
0E468:  MOVLB  0
0E46A:  ADDWF  01,F
0E46C:  MOVF   01,W
0E46E:  BTFSS  FA6.6
0E470:  GOTO   E46E
0E474:  MOVLB  E
0E476:  MOVWF  xF9
0E478:  MOVLB  0
0E47A:  MOVFF  2E3,324
0E47E:  MOVLW  0A
0E480:  MOVLB  3
0E482:  MOVWF  x25
0E484:  MOVLB  0
0E486:  CALL   E3D8
0E48A:  MOVFF  00,2E3
0E48E:  MOVF   01,W
0E490:  MOVLW  30
0E492:  BTFSS  FD8.2
0E494:  GOTO   E4B4
0E498:  MOVLB  2
0E49A:  BTFSS  xE4.3
0E49C:  BRA    E4A4
0E49E:  MOVLB  0
0E4A0:  GOTO   E4C4
0E4A4:  BTFSC  xE4.0
0E4A6:  BRA    E4AE
0E4A8:  MOVLB  0
0E4AA:  GOTO   E4C4
0E4AE:  BTFSC  xE4.4
0E4B0:  MOVLW  20
0E4B2:  MOVLB  0
0E4B4:  ADDWF  01,F
0E4B6:  MOVF   01,W
0E4B8:  BTFSS  FA6.6
0E4BA:  GOTO   E4B8
0E4BE:  MOVLB  E
0E4C0:  MOVWF  xF9
0E4C2:  MOVLB  0
0E4C4:  MOVLW  30
0E4C6:  MOVLB  2
0E4C8:  ADDWF  xE3,F
0E4CA:  MOVF   xE3,W
0E4CC:  MOVLB  0
0E4CE:  BTFSS  FA6.6
0E4D0:  GOTO   E4CE
0E4D4:  MOVLB  E
0E4D6:  MOVWF  xF9
0E4D8:  MOVLB  0
0E4DA:  RETURN 0
*
0EB00:  MOVF   FE9,W
0EB02:  MOVLB  2
0EB04:  MOVWF  x41
0EB06:  BTFSC  x40.7
0EB08:  BRA    EB10
0EB0A:  MOVLB  0
0EB0C:  GOTO   EB2C
0EB10:  DECF   x41,F
0EB12:  BSF    x41.5
0EB14:  COMF   x3D,F
0EB16:  COMF   x3E,F
0EB18:  COMF   x3F,F
0EB1A:  COMF   x40,F
0EB1C:  INCF   x3D,F
0EB1E:  BTFSC  FD8.2
0EB20:  INCF   x3E,F
0EB22:  BTFSC  FD8.2
0EB24:  INCF   x3F,F
0EB26:  BTFSC  FD8.2
0EB28:  INCF   x40,F
0EB2A:  MOVLB  0
0EB2C:  MOVLW  3B
0EB2E:  MOVLB  2
0EB30:  MOVWF  x48
0EB32:  MOVLW  9A
0EB34:  MOVWF  x47
0EB36:  MOVLW  CA
0EB38:  MOVWF  x46
0EB3A:  CLRF   x45
0EB3C:  MOVLW  0A
0EB3E:  MOVWF  x43
0EB40:  MOVLB  0
0EB42:  BSF    FD8.1
0EB44:  MOVLW  02
0EB46:  MOVWF  FEA
0EB48:  MOVLW  3D
0EB4A:  MOVWF  FE9
0EB4C:  MOVFF  240,AD8
0EB50:  MOVFF  23F,AD7
0EB54:  MOVFF  23E,AD6
0EB58:  MOVFF  23D,AD5
0EB5C:  MOVFF  248,ADC
0EB60:  MOVFF  247,ADB
0EB64:  MOVFF  246,ADA
0EB68:  MOVFF  245,AD9
0EB6C:  CALL   5E62
0EB70:  MOVF   01,W
0EB72:  MOVF   00,F
0EB74:  BTFSS  FD8.2
0EB76:  GOTO   EBCE
0EB7A:  MOVLB  2
0EB7C:  MOVF   x43,W
0EB7E:  XORLW  01
0EB80:  BTFSS  FD8.2
0EB82:  BRA    EB8A
0EB84:  MOVLB  0
0EB86:  GOTO   EBCE
0EB8A:  MOVF   x41,W
0EB8C:  BTFSS  FD8.2
0EB8E:  BRA    EB96
0EB90:  MOVLB  0
0EB92:  GOTO   EBD6
0EB96:  ANDLW  0F
0EB98:  SUBWF  x43,W
0EB9A:  BTFSS  FD8.2
0EB9C:  BRA    EBA4
0EB9E:  MOVLB  0
0EBA0:  GOTO   EBB0
0EBA4:  BTFSS  FD8.0
0EBA6:  BRA    EBAE
0EBA8:  MOVLB  0
0EBAA:  GOTO   EC3E
0EBAE:  MOVLB  0
0EBB0:  MOVLB  2
0EBB2:  BTFSS  x41.7
0EBB4:  BRA    EBBC
0EBB6:  MOVLB  0
0EBB8:  GOTO   EC3E
0EBBC:  BTFSS  x41.6
0EBBE:  BRA    EBC6
0EBC0:  MOVLB  0
0EBC2:  GOTO   EBD6
0EBC6:  MOVLW  20
0EBC8:  MOVLB  0
0EBCA:  GOTO   EC2E
0EBCE:  MOVLW  20
0EBD0:  MOVLB  2
0EBD2:  ANDWF  x41,F
0EBD4:  MOVLB  0
0EBD6:  MOVLB  2
0EBD8:  BTFSC  x41.5
0EBDA:  BRA    EBE2
0EBDC:  MOVLB  0
0EBDE:  GOTO   EC00
0EBE2:  BCF    x41.5
0EBE4:  MOVF   00,W
0EBE6:  MOVWF  x41
0EBE8:  MOVLW  2D
0EBEA:  MOVLB  0
0EBEC:  BTFSS  FA6.6
0EBEE:  GOTO   EBEC
0EBF2:  MOVLB  E
0EBF4:  MOVWF  xF9
0EBF6:  MOVLB  2
0EBF8:  MOVF   x41,W
0EBFA:  MOVWF  00
0EBFC:  CLRF   x41
0EBFE:  MOVLB  0
0EC00:  MOVLW  30
0EC02:  MOVLB  2
0EC04:  BTFSC  x41.5
0EC06:  BRA    EC0E
0EC08:  MOVLB  0
0EC0A:  GOTO   EC2E
0EC0E:  BCF    x41.5
0EC10:  MOVF   00,W
0EC12:  MOVWF  x41
0EC14:  MOVLW  2D
0EC16:  MOVLB  0
0EC18:  BTFSS  FA6.6
0EC1A:  GOTO   EC18
0EC1E:  MOVLB  E
0EC20:  MOVWF  xF9
0EC22:  MOVLB  2
0EC24:  MOVF   x41,W
0EC26:  MOVWF  00
0EC28:  CLRF   x41
0EC2A:  MOVLW  30
0EC2C:  MOVLB  0
0EC2E:  ADDWF  00,F
0EC30:  MOVF   00,W
0EC32:  BTFSS  FA6.6
0EC34:  GOTO   EC32
0EC38:  MOVLB  E
0EC3A:  MOVWF  xF9
0EC3C:  MOVLB  0
0EC3E:  BCF    FD8.1
0EC40:  MOVFF  248,AD8
0EC44:  MOVFF  247,AD7
0EC48:  MOVFF  246,AD6
0EC4C:  MOVFF  245,AD5
0EC50:  MOVLB  A
0EC52:  CLRF   xDC
0EC54:  CLRF   xDB
0EC56:  CLRF   xDA
0EC58:  MOVLW  0A
0EC5A:  MOVWF  xD9
0EC5C:  MOVLB  0
0EC5E:  CALL   5E62
0EC62:  MOVFF  03,248
0EC66:  MOVFF  02,247
0EC6A:  MOVFF  01,246
0EC6E:  MOVFF  00,245
0EC72:  MOVLB  2
0EC74:  DECFSZ x43,F
0EC76:  BRA    EC7C
0EC78:  BRA    EC82
0EC7A:  MOVLB  0
0EC7C:  MOVLB  0
0EC7E:  GOTO   EB42
0EC82:  MOVLB  0
0EC84:  RETURN 0
*
0F0DE:  MOVLW  20
0F0E0:  MOVLB  3
0F0E2:  BTFSS  x1F.4
0F0E4:  MOVLW  30
0F0E6:  MOVWF  x20
0F0E8:  MOVFF  31E,00
0F0EC:  BTFSC  00.7
0F0EE:  BRA    F0F6
0F0F0:  MOVLB  0
0F0F2:  GOTO   F108
0F0F6:  COMF   00,F
0F0F8:  INCF   00,F
0F0FA:  MOVFF  00,31E
0F0FE:  MOVLW  2D
0F100:  MOVWF  x20
0F102:  BSF    x1F.7
0F104:  BSF    x1F.0
0F106:  MOVLB  0
0F108:  MOVF   01,W
0F10A:  MOVFF  31E,324
0F10E:  MOVLW  64
0F110:  MOVLB  3
0F112:  MOVWF  x25
0F114:  MOVLB  0
0F116:  CALL   E3D8
0F11A:  MOVFF  00,31E
0F11E:  MOVLW  30
0F120:  ADDWF  01,W
0F122:  MOVLB  3
0F124:  MOVWF  x21
0F126:  MOVFF  31E,324
0F12A:  MOVLW  0A
0F12C:  MOVWF  x25
0F12E:  MOVLB  0
0F130:  CALL   E3D8
0F134:  MOVLW  30
0F136:  ADDWF  00,W
0F138:  MOVLB  3
0F13A:  MOVWF  x23
0F13C:  MOVLW  30
0F13E:  ADDWF  01,W
0F140:  MOVWF  x22
0F142:  MOVFF  320,00
0F146:  MOVLB  0
0F148:  MOVLW  30
0F14A:  MOVLB  3
0F14C:  SUBWF  x21,W
0F14E:  BTFSS  FD8.2
0F150:  BRA    F158
0F152:  MOVLB  0
0F154:  GOTO   F164
0F158:  BSF    x1F.1
0F15A:  BTFSC  x1F.7
0F15C:  BSF    x1F.2
0F15E:  MOVLB  0
0F160:  GOTO   F1A4
0F164:  MOVFF  320,321
0F168:  MOVLW  20
0F16A:  MOVLB  3
0F16C:  MOVWF  x20
0F16E:  MOVLW  30
0F170:  SUBWF  x22,W
0F172:  BTFSS  FD8.2
0F174:  BRA    F17C
0F176:  MOVLB  0
0F178:  GOTO   F188
0F17C:  BSF    x1F.0
0F17E:  BTFSC  x1F.7
0F180:  BSF    x1F.1
0F182:  MOVLB  0
0F184:  GOTO   F1A4
0F188:  BTFSC  FD8.2
0F18A:  BRA    F192
0F18C:  MOVLB  3
0F18E:  BSF    x1F.0
0F190:  MOVLB  0
0F192:  BTFSS  FD8.2
0F194:  GOTO   F1A4
0F198:  MOVFF  321,322
0F19C:  MOVLW  20
0F19E:  MOVLB  3
0F1A0:  MOVWF  x21
0F1A2:  MOVLB  0
0F1A4:  MOVLB  3
0F1A6:  BTFSS  x1F.2
0F1A8:  BRA    F1B0
0F1AA:  MOVLB  0
0F1AC:  GOTO   F1CA
0F1B0:  BTFSS  x1F.1
0F1B2:  BRA    F1BA
0F1B4:  MOVLB  0
0F1B6:  GOTO   F1DC
0F1BA:  BTFSS  x1F.0
0F1BC:  BRA    F1C4
0F1BE:  MOVLB  0
0F1C0:  GOTO   F1EE
0F1C4:  MOVLB  0
0F1C6:  GOTO   F200
0F1CA:  MOVLB  3
0F1CC:  MOVF   x20,W
0F1CE:  MOVLB  0
0F1D0:  BTFSS  FA6.6
0F1D2:  GOTO   F1D0
0F1D6:  MOVLB  E
0F1D8:  MOVWF  xF9
0F1DA:  MOVLB  0
0F1DC:  MOVLB  3
0F1DE:  MOVF   x21,W
0F1E0:  MOVLB  0
0F1E2:  BTFSS  FA6.6
0F1E4:  GOTO   F1E2
0F1E8:  MOVLB  E
0F1EA:  MOVWF  xF9
0F1EC:  MOVLB  0
0F1EE:  MOVLB  3
0F1F0:  MOVF   x22,W
0F1F2:  MOVLB  0
0F1F4:  BTFSS  FA6.6
0F1F6:  GOTO   F1F4
0F1FA:  MOVLB  E
0F1FC:  MOVWF  xF9
0F1FE:  MOVLB  0
0F200:  MOVLB  3
0F202:  MOVF   x23,W
0F204:  MOVLB  0
0F206:  BTFSS  FA6.6
0F208:  GOTO   F206
0F20C:  MOVLB  E
0F20E:  MOVWF  xF9
0F210:  MOVLB  0
0F212:  RETURN 0
*
0FEC6:  ADDWF  FE8,W
0FEC8:  CLRF   FF7
0FECA:  RLCF   FF7,F
0FECC:  ADDLW  E7
0FECE:  MOVWF  FF6
0FED0:  MOVLW  FE
0FED2:  ADDWFC FF7,F
0FED4:  MOVLW  00
0FED6:  MOVWF  FF8
0FED8:  MOVWF  FFB
0FEDA:  TBLRD*-
0FEDC:  MOVF   FF5,W
0FEDE:  MOVWF  FFA
0FEE0:  TBLRD*
0FEE2:  MOVF   FF5,W
0FEE4:  MOVWF  FF9
0FEE6:  DATA 6E,FE
0FEE8:  DATA 7E,FE
0FEEA:  DATA 9E,FE
0FEEC:  DATA AE,FE
.................... 
.................... #list
.................... 
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
*
02056:  MOVLW  0B
02058:  MOVWF  FEA
0205A:  MOVLW  C0
0205C:  MOVWF  FE9
0205E:  MOVF   FEF,W
02060:  BTFSC  FD8.2
02062:  GOTO   2082
02066:  MOVLW  05
02068:  MOVWF  01
0206A:  CLRF   00
0206C:  DECFSZ 00,F
0206E:  BRA    206C
02070:  DECFSZ 01,F
02072:  BRA    206A
02074:  MOVLW  2E
02076:  MOVWF  00
02078:  DECFSZ 00,F
0207A:  BRA    2078
0207C:  BRA    207E
0207E:  DECFSZ FEF,F
02080:  BRA    2066
02082:  RETURN 0
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
*
0027C:  BTFSS  FA6.5
0027E:  GOTO   027C
00282:  MOVLB  F
00284:  MOVF   x2F,W
00286:  MOVWF  1B
00288:  MOVLB  0
0028A:  MOVLB  F
0028C:  MOVF   x2A,W
0028E:  MOVWF  01
00290:  BTFSC  1B.1
00292:  BRA    029A
00294:  MOVLB  0
00296:  GOTO   029E
0029A:  BCF    x2F.4
0029C:  BSF    x2F.4
0029E:  MOVLB  0
002A0:  GOTO   02DA (RETURN)
*
05410:  BTFSS  FA6.4
05412:  GOTO   5410
05416:  MOVLB  F
05418:  MOVWF  x29
0541A:  MOVLB  0
0541C:  GOTO   5452 (RETURN)
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=2000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
*
02906:  MOVLB  B
02908:  MOVF   xE3,W
0290A:  SUBLW  08
0290C:  BTFSS  FD8.2
0290E:  BRA    2916
02910:  MOVLB  0
02912:  GOTO   292E
02916:  MOVWF  xE5
02918:  MOVLB  0
0291A:  MOVLB  B
0291C:  RLCF   xE2,F
0291E:  DECFSZ xE5,F
02920:  BRA    2926
02922:  BRA    292C
02924:  MOVLB  0
02926:  MOVLB  0
02928:  GOTO   291A
0292C:  MOVLB  0
0292E:  BSF    F92.1
02930:  BCF    F92.0
02932:  BCF    F92.3
02934:  BCF    F89.3
02936:  MOVFF  BE3,BE5
0293A:  MOVLB  B
0293C:  BTFSS  xE2.7
0293E:  BCF    F89.0
02940:  BTFSC  xE2.7
02942:  BSF    F89.0
02944:  RLCF   xE2,F
02946:  BSF    F89.3
02948:  RLCF   01,F
0294A:  BTFSS  F80.1
0294C:  BCF    01.0
0294E:  BTFSC  F80.1
02950:  BSF    01.0
02952:  BCF    F89.3
02954:  DECFSZ xE5,F
02956:  BRA    295C
02958:  BRA    2962
0295A:  MOVLB  0
0295C:  MOVLB  0
0295E:  GOTO   293A
02962:  MOVLB  0
02964:  RETURN 0
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=2000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
*
028A6:  MOVLB  B
028A8:  MOVF   xE3,W
028AA:  SUBLW  08
028AC:  BTFSS  FD8.2
028AE:  BRA    28B6
028B0:  MOVLB  0
028B2:  GOTO   28CE
028B6:  MOVWF  xE5
028B8:  MOVLB  0
028BA:  MOVLB  B
028BC:  RLCF   xE2,F
028BE:  DECFSZ xE5,F
028C0:  BRA    28C6
028C2:  BRA    28CC
028C4:  MOVLB  0
028C6:  MOVLB  0
028C8:  GOTO   28BA
028CC:  MOVLB  0
028CE:  BSF    F96.0
028D0:  BCF    F96.6
028D2:  BCF    F96.1
028D4:  BCF    F8D.1
028D6:  MOVFF  BE3,BE5
028DA:  MOVLB  B
028DC:  BTFSS  xE2.7
028DE:  BCF    F8D.6
028E0:  BTFSC  xE2.7
028E2:  BSF    F8D.6
028E4:  RLCF   xE2,F
028E6:  BSF    F8D.1
028E8:  RLCF   01,F
028EA:  BTFSS  F84.0
028EC:  BCF    01.0
028EE:  BTFSC  F84.0
028F0:  BSF    01.0
028F2:  BCF    F8D.1
028F4:  DECFSZ xE5,F
028F6:  BRA    28FC
028F8:  BRA    2902
028FA:  MOVLB  0
028FC:  MOVLB  0
028FE:  GOTO   28DA
02902:  MOVLB  0
02904:  RETURN 0
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=1000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
*
021DE:  MOVLB  A
021E0:  MOVF   x9B,W
021E2:  SUBLW  10
021E4:  BTFSS  FD8.2
021E6:  BRA    21EE
021E8:  MOVLB  0
021EA:  GOTO   2208
021EE:  MOVWF  x9D
021F0:  MOVLB  0
021F2:  MOVLB  A
021F4:  RLCF   x99,F
021F6:  RLCF   x9A,F
021F8:  DECFSZ x9D,F
021FA:  BRA    2200
021FC:  BRA    2206
021FE:  MOVLB  0
02200:  MOVLB  0
02202:  GOTO   21F2
02206:  MOVLB  0
02208:  BSF    F93.4
0220A:  BCF    F93.5
0220C:  BCF    F93.2
0220E:  BSF    F8A.2
02210:  MOVFF  A9B,A9D
02214:  MOVLB  A
02216:  BTFSS  x9A.7
02218:  BCF    F8A.5
0221A:  BTFSC  x9A.7
0221C:  BSF    F8A.5
0221E:  RLCF   x99,F
02220:  RLCF   x9A,F
02222:  BCF    F8A.2
02224:  RLCF   01,F
02226:  RLCF   02,F
02228:  BTFSS  F81.4
0222A:  BCF    01.0
0222C:  BTFSC  F81.4
0222E:  BSF    01.0
02230:  BSF    F8A.2
02232:  DECFSZ x9D,F
02234:  BRA    223A
02236:  BRA    2240
02238:  MOVLB  0
0223A:  MOVLB  0
0223C:  GOTO   2214
02240:  MOVLB  0
02242:  RETURN 0
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=2000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
*
025A8:  MOVLB  A
025AA:  MOVF   x86,W
025AC:  SUBLW  10
025AE:  BTFSS  FD8.2
025B0:  BRA    25B8
025B2:  MOVLB  0
025B4:  GOTO   25D2
025B8:  MOVWF  x88
025BA:  MOVLB  0
025BC:  MOVLB  A
025BE:  RLCF   x84,F
025C0:  RLCF   x85,F
025C2:  DECFSZ x88,F
025C4:  BRA    25CA
025C6:  BRA    25D0
025C8:  MOVLB  0
025CA:  MOVLB  0
025CC:  GOTO   25BC
025D0:  MOVLB  0
025D2:  BCF    F95.4
025D4:  BCF    F95.5
025D6:  BSF    F8C.5
025D8:  MOVFF  A86,A88
025DC:  MOVLB  A
025DE:  BTFSS  x85.7
025E0:  BCF    F8C.4
025E2:  BTFSC  x85.7
025E4:  BSF    F8C.4
025E6:  RLCF   x84,F
025E8:  RLCF   x85,F
025EA:  BCF    F8C.5
025EC:  NOP   
025EE:  BSF    F8C.5
025F0:  DECFSZ x88,F
025F2:  BRA    25F8
025F4:  BRA    25FE
025F6:  MOVLB  0
025F8:  MOVLB  0
025FA:  GOTO   25DC
025FE:  MOVLB  0
02600:  RETURN 0
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル2: ハードウェア抽象化層  
.................... #include "hal/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... void set_current_sec(unsigned int32 new_sec);
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "hal/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "hal/gpio.h"
.................... #ifndef GPIO_H
.................... #define GPIO_H
.................... 
.................... void gpio_init();
.................... void enable_negative_power();
.................... void disable_negative_power();
.................... void connect_port1();
.................... void disconnect_port1();
.................... void connect_port2();
.................... void disconnect_port2();
.................... 
.................... 
.................... // 
.................... void connect_negative_power1(int1 state);
.................... void connect_negative_power2(int1 state);
.................... #endif // GPIO_H
.................... 
.................... #include "device_driver/ad7490_driver.h"
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "device_driver/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル3: 基本ライブラリヘッダー（型定義・通信・ツール）
.................... #include "../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06,
....................     TIME_REQ          = 0x07
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/tool/mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x06AA1FFF
.................... #define CIGS_ENVIRO_START_ADDRESS 0x06AA2000
.................... #define CIGS_ENVIRO_END_ADDRESS 0x06B41FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS 0x06B42000
.................... #define CIGS_IV1_HEADER_END_ADDRESS 0x06BE1FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS 0x06BE2000
.................... #define CIGS_IV1_DATA_END_ADDRESS 0x06FE2FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS 0x06FE3000
.................... #define CIGS_IV2_HEADER_END_ADDRESS 0x07082FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS 0x07083000
.................... #define CIGS_IV2_DATA_END_ADDRESS 0x07483FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... // レベル4: デバイスドライバヘッダー
.................... #include "../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/device/ad7490.h"
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // レベル5: 通信ライブラリヘッダー
.................... #include "../lib/communication/communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... #define SEND_TIME             0x03
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... #define SEND_TIME_LENGTH         4
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH},
....................    {SEND_TIME, SEND_TIME_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // レベル6: コア機能ヘッダー
.................... #include "domain/mmj_cigs_iv.h"
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFFFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE-1];
.................... 
....................     struct {
....................         unsigned int16 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int16 time_msec;
....................         meas_data_t env_data[2];
....................         meas_data_t iv_data[16];
.................... 
....................     }header;
....................     struct {
....................         meas_data_t iv_data[21];
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.1
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "domain/mmj_cigs_flash.h"
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=2000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=2000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=1000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=2000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "domain/mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル7: アプリケーションヘッダー
.................... #include "application/mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... void handle_recieve_time(Command *command);
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "application/mmj_cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_DEBUG 0xA3
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "application/mmj_cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... //==============================================================================
.................... // .cファイル統合（CCS C単一コンパイル単位）
.................... //==============================================================================
.................... 
.................... // ハードウェア層実装ファイル
.................... // 実装は各 .c からビルドするためヘッダーでの取り込みは不要。必要なら下記のように直下参照に修正。
.................... #include "hal/timer.c"
.................... #include "timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... void set_current_sec(unsigned int32 new_sec);
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... int8 subsec;
.................... unsigned int16 time_ms = 0;
.................... unsigned int32 time_sec = 0;
.................... 
.................... #INT_TIMER0
.................... void TIMER0_isr()
.................... {
....................    set_timer0(0xEC78);  // 10msごとにリロード
*
001B6:  MOVLW  EC
001B8:  MOVWF  FD7
001BA:  MOVLW  78
001BC:  MOVWF  FD6
001BE:  NOP   
....................    time_ms += 10;
001C0:  MOVLW  0A
001C2:  MOVLB  1
001C4:  ADDWF  x8A,F
001C6:  MOVLW  00
001C8:  ADDWFC x8B,F
....................    if (time_ms >= 1000) {
001CA:  MOVF   x8B,W
001CC:  SUBLW  02
001CE:  BTFSS  FD8.0
001D0:  BRA    01D8
001D2:  MOVLB  0
001D4:  GOTO   01FC
001D8:  MOVLB  0
001DA:  XORLW  FF
001DC:  BTFSS  FD8.2
001DE:  GOTO   01F4
001E2:  MOVLB  1
001E4:  MOVF   x8A,W
001E6:  SUBLW  E7
001E8:  BTFSS  FD8.0
001EA:  BRA    01F2
001EC:  MOVLB  0
001EE:  GOTO   01FC
001F2:  MOVLB  0
....................       time_ms = 0;
001F4:  MOVLB  1
001F6:  CLRF   x8B
001F8:  CLRF   x8A
001FA:  MOVLB  0
....................    }
.................... }
.................... 
001FC:  BCF    FF2.2
001FE:  GOTO   0090
.................... #INT_TIMER1 
.................... void TIMER1_isr()
.................... {
....................    set_timer1(TIMER_ISR_1S); 
00202:  MOVLW  80
00204:  MOVWF  FCF
00206:  CLRF   FCE
00208:  NOP   
....................    time_ms += 1000;
0020A:  MOVLW  E8
0020C:  MOVLB  1
0020E:  ADDWF  x8A,F
00210:  MOVLW  03
00212:  ADDWFC x8B,F
....................    if (time_ms >= 1000) {
00214:  MOVF   x8B,W
00216:  SUBLW  02
00218:  BTFSS  FD8.0
0021A:  BRA    0222
0021C:  MOVLB  0
0021E:  GOTO   0256
00222:  MOVLB  0
00224:  XORLW  FF
00226:  BTFSS  FD8.2
00228:  GOTO   023E
0022C:  MOVLB  1
0022E:  MOVF   x8A,W
00230:  SUBLW  E7
00232:  BTFSS  FD8.0
00234:  BRA    023C
00236:  MOVLB  0
00238:  GOTO   0256
0023C:  MOVLB  0
....................       time_ms = 0;
0023E:  MOVLB  1
00240:  CLRF   x8B
00242:  CLRF   x8A
....................       time_sec++;
00244:  MOVLW  01
00246:  ADDWF  x8C,F
00248:  BTFSC  FD8.0
0024A:  INCF   x8D,F
0024C:  BTFSC  FD8.2
0024E:  INCF   x8E,F
00250:  BTFSC  FD8.2
00252:  INCF   x8F,F
00254:  MOVLB  0
....................    }
00256:  BCF    F9E.0
00258:  GOTO   0090
.................... }
.................... 
.................... void timer_init()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
*
0211E:  MOVLW  5C
02120:  MOVWF  FF6
02122:  MOVLW  02
02124:  MOVWF  FF7
02126:  MOVLW  00
02128:  MOVWF  FF8
0212A:  CALL   2084
....................    clear_interrupt(INT_TIMER1);
0212E:  BCF    F9E.0
....................    time_ms = 0;
02130:  MOVLB  1
02132:  CLRF   x8B
02134:  CLRF   x8A
....................    time_sec = 0;
02136:  CLRF   x8F
02138:  CLRF   x8E
0213A:  CLRF   x8D
0213C:  CLRF   x8C
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
0213E:  MOVLW  8F
02140:  MOVWF  FCD
02142:  CLRF   FAA
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_64|RTCC_8_BIT);
02144:  MOVLW  D5
02146:  MOVWF  FD5
....................    set_timer1(TIMER_ISR_1S); 
02148:  MOVLW  80
0214A:  MOVWF  FCF
0214C:  CLRF   FCE
0214E:  NOP   
....................    enable_interrupts(INT_TIMER1);   
02150:  BSF    F9D.0
....................    enable_interrupts(INT_TIMER0);
02152:  BSF    FF2.5
....................    enable_interrupts(GLOBAL);
02154:  MOVLW  C0
02156:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
02158:  MOVLW  70
0215A:  MOVWF  FF6
0215C:  MOVLW  02
0215E:  MOVWF  FF7
02160:  MOVLW  00
02162:  MOVWF  FF8
02164:  MOVLB  0
02166:  CALL   2084
0216A:  GOTO   11C5A (RETURN)
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    time_sec = new_sec;
*
0FE2A:  MOVFF  23C,18F
0FE2E:  MOVFF  23B,18E
0FE32:  MOVFF  23A,18D
0FE36:  MOVFF  239,18C
0FE3A:  GOTO   11538 (RETURN)
.................... }
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return time_sec;
*
0395E:  MOVFF  18C,00
03962:  MOVFF  18D,01
03966:  MOVFF  18E,02
0396A:  MOVFF  18F,03
0396E:  RETURN 0
.................... }
.................... 
.................... unsigned int16 get_current_msec()
.................... {
....................    return time_ms;
.................... }
.................... 
.................... 
.................... #include "hal/uart.c"
.................... #include "uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
002A4:  GOTO   02A8
002A8:  GOTO   02B2
002AC:  BTFSS  4B.0
002AE:  GOTO   02E6
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
002B2:  MOVF   4A,W
002B4:  SUBLW  1F
002B6:  BTFSS  FD8.0
002B8:  GOTO   02E6
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
002BC:  MOVF   4A,W
002BE:  INCF   4A,F
002C0:  ANDLW  1F
002C2:  CLRF   03
002C4:  ADDLW  2A
002C6:  MOVWF  FE9
002C8:  MOVLW  00
002CA:  ADDWFC 03,W
002CC:  MOVWF  FEA
002CE:  MOVFF  FEA,BF9
002D2:  MOVFF  FE9,BF8
002D6:  GOTO   027C
002DA:  MOVFF  BF9,FEA
002DE:  MOVFF  BF8,FE9
002E2:  MOVF   01,W
002E4:  MOVWF  FEF
002E6:  BCF    FA6.5
002E8:  GOTO   0090
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
020F4:  MOVLW  EC
020F6:  MOVWF  FF6
020F8:  MOVLW  02
020FA:  MOVWF  FF7
020FC:  MOVLW  00
020FE:  MOVWF  FF8
02100:  CALL   2084
....................    enable_interrupts(INT_RDA3);
02104:  BSF    F61.5
....................    enable_interrupts(GLOBAL);
02106:  MOVLW  C0
02108:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
0210A:  MOVLW  FE
0210C:  MOVWF  FF6
0210E:  MOVLW  02
02110:  MOVWF  FF7
02112:  MOVLW  00
02114:  MOVWF  FF8
02116:  CALL   2084
0211A:  GOTO   11C56 (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
053D2:  MOVFF  22F,03
053D6:  MOVLB  2
053D8:  MOVF   x2E,W
053DA:  MOVWF  FE9
053DC:  MOVFF  03,FEA
053E0:  MOVFF  FEF,230
053E4:  MOVFF  22D,FEA
053E8:  MOVFF  22C,FE9
053EC:  CLRF   00
053EE:  CLRF   02
053F0:  MOVFF  230,01
053F4:  MOVLB  0
053F6:  CALL   2C62
....................    *receive_signal_size = 0;
053FA:  MOVFF  22F,03
053FE:  MOVLB  2
05400:  MOVF   x2E,W
05402:  MOVWF  FE9
05404:  MOVFF  03,FEA
05408:  CLRF   FEF
0540A:  MOVLB  0
0540C:  GOTO   11D14 (RETURN)
.................... }
.................... // End of file
.................... 
.................... #include "hal/gpio.c"
.................... #include "mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=2000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=2000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=1000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=2000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "gpio.h"
.................... #ifndef GPIO_H
.................... #define GPIO_H
.................... 
.................... void gpio_init();
.................... void enable_negative_power();
.................... void disable_negative_power();
.................... void connect_port1();
.................... void disconnect_port1();
.................... void connect_port2();
.................... void disconnect_port2();
.................... 
.................... 
.................... // 
.................... void connect_negative_power1(int1 state);
.................... void connect_negative_power2(int1 state);
.................... #endif // GPIO_H
.................... 
.................... #include "../../lib/tool/types.h"
.................... #ifndef TYPES_H
.................... #define TYPES_H
.................... 
.................... #define bool int1
.................... 
.................... 
.................... 
.................... #endif // TYPES_H
.................... // End of types.h
.................... 
.................... 
.................... 
.................... void gpio_init() {
....................     enable_negative_power();
....................     disconnect_port1();
....................     disconnect_port2();
.................... }
.................... 
.................... void enable_negative_power() {
....................     output_low(EN_NPWR1);
.................... }
.................... 
.................... void connect_negative_power1(int1 state) {
....................     if (state) {
*
04E94:  MOVLB  2
04E96:  MOVF   x2C,F
04E98:  BTFSS  FD8.2
04E9A:  BRA    4EA2
04E9C:  MOVLB  0
04E9E:  GOTO   4EAE
04EA2:  MOVLB  0
....................         output_low(EN_NPWR1);
04EA4:  MOVLW  17
04EA6:  MOVWF  F94
04EA8:  BCF    F8B.7
....................     } else {
04EAA:  GOTO   4EB4
....................         output_high(EN_NPWR1);
04EAE:  MOVLW  17
04EB0:  MOVWF  F94
04EB2:  BSF    F8B.7
....................     }
04EB4:  GOTO   11CB4 (RETURN)
.................... }
.................... 
.................... void connect_negative_power2(int1 state) {
....................     if (state) {
....................         output_high(EN_NPWR2);
....................     } else {
....................         output_low(EN_NPWR2);
....................     }
.................... }
.................... 
.................... void connect_port1(){
....................     output_high(CONNECT_CIGS1);
*
04E84:  MOVLW  17
04E86:  MOVWF  F94
04E88:  BSF    F8B.3
04E8A:  RETURN 0
.................... }
.................... 
.................... void disconnect_port1(){
....................     output_low(CONNECT_CIGS1);
*
088B6:  MOVLW  17
088B8:  MOVWF  F94
088BA:  BCF    F8B.3
088BC:  RETURN 0
.................... }
.................... 
.................... void connect_port2(){
....................     output_high(CONNECT_CIGS2);
*
04E8C:  MOVLW  17
04E8E:  MOVWF  F94
04E90:  BSF    F8B.5
04E92:  RETURN 0
.................... }
.................... 
.................... void disconnect_port2(){
....................     output_low(CONNECT_CIGS2);
*
088BE:  MOVLW  17
088C0:  MOVWF  F94
088C2:  BCF    F8B.5
088C4:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "device_driver/ad7490_driver.c"
.................... #include "ad7490_driver.h"                          // 同じデバイスフォルダのヘッダー
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=2000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=2000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=1000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=2000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/ad7490.h"               // ADCデバイスライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void ad7490_init()
.................... {
....................     fprintf(PC, "AD7490 Initialize\r\n");
*
0234C:  MOVLW  0A
0234E:  MOVWF  FF6
02350:  MOVLW  03
02352:  MOVWF  FF7
02354:  MOVLW  00
02356:  MOVWF  FF8
02358:  CALL   2084
....................     output_high(ADC_CS); 
0235C:  MOVLW  FD
0235E:  MOVWF  F93
02360:  BSF    F8A.1
....................     delay_ms(10); 
02362:  MOVLW  0A
02364:  MOVLB  B
02366:  MOVWF  xC0
02368:  MOVLB  0
0236A:  CALL   2056
....................     unsigned int16 readdata = ad7490_read(ADC_CIGS2_CURR);
0236E:  MOVLW  05
02370:  MOVLB  A
02372:  MOVWF  x92
02374:  MOVLB  0
02376:  CALL   2244
0237A:  MOVFF  02,22D
0237E:  MOVFF  01,22C
....................     delay_ms(1);
02382:  MOVLW  01
02384:  MOVLB  B
02386:  MOVWF  xC0
02388:  MOVLB  0
0238A:  CALL   2056
....................     fprintf(PC, "\t%04LX\r\n", readdata);
0238E:  MOVLW  09
02390:  BTFSS  FA6.6
02392:  GOTO   2390
02396:  MOVLB  E
02398:  MOVWF  xF9
0239A:  MOVFF  22D,A77
0239E:  MOVLW  37
023A0:  MOVLB  A
023A2:  MOVWF  x78
023A4:  MOVLB  0
023A6:  CALL   22D0
023AA:  MOVFF  22C,A77
023AE:  MOVLW  37
023B0:  MOVLB  A
023B2:  MOVWF  x78
023B4:  MOVLB  0
023B6:  CALL   22D0
023BA:  MOVLW  0D
023BC:  BTFSS  FA6.6
023BE:  GOTO   23BC
023C2:  MOVLB  E
023C4:  MOVWF  xF9
023C6:  MOVLW  0A
023C8:  MOVLB  0
023CA:  BTFSS  FA6.6
023CC:  GOTO   23CA
023D0:  MOVLB  E
023D2:  MOVWF  xF9
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
023D4:  MOVLB  2
023D6:  INCFSZ x2C,W
023D8:  BRA    23DE
023DA:  BRA    23E4
023DC:  MOVLB  0
023DE:  MOVLB  0
023E0:  GOTO   23FC
023E4:  MOVLB  0
023E6:  MOVLB  2
023E8:  INCFSZ x2D,W
023EA:  BRA    23F0
023EC:  BRA    23F6
023EE:  MOVLB  0
023F0:  MOVLB  0
023F2:  GOTO   23FC
023F6:  MOVLB  0
023F8:  GOTO   241C
023FC:  MOVLB  2
023FE:  MOVF   x2C,F
02400:  BTFSC  FD8.2
02402:  BRA    240A
02404:  MOVLB  0
02406:  GOTO   2430
0240A:  MOVLB  0
0240C:  MOVLB  2
0240E:  MOVF   x2D,F
02410:  BTFSC  FD8.2
02412:  BRA    241A
02414:  MOVLB  0
02416:  GOTO   2430
0241A:  MOVLB  0
....................         fprintf(PC, "\tConnect error!\r\n");
0241C:  MOVLW  1E
0241E:  MOVWF  FF6
02420:  MOVLW  03
02422:  MOVWF  FF7
02424:  MOVLW  00
02426:  MOVWF  FF8
02428:  CALL   2084
....................     } else {
0242C:  GOTO   2440
....................         fprintf(PC, "\tConnect successful\r\n");
02430:  MOVLW  30
02432:  MOVWF  FF6
02434:  MOVLW  03
02436:  MOVWF  FF7
02438:  MOVLW  00
0243A:  MOVWF  FF8
0243C:  CALL   2084
....................     }
....................     fprintf(PC, "\tComplete\r\n");
02440:  MOVLW  46
02442:  MOVWF  FF6
02444:  MOVLW  03
02446:  MOVWF  FF7
02448:  MOVLW  00
0244A:  MOVWF  FF8
0244C:  CALL   2084
02450:  GOTO   11C5E (RETURN)
.................... }
.................... 
.................... unsigned int16 ad7490_read(int8 channel)
*
02244:  MOVFF  A92,A99
02248:  GOTO   216E
0224C:  MOVFF  02,A94
02250:  MOVFF  01,A93
.................... {   
....................     unsigned int16 cmd = ad7490_make_cmd(channel);
....................     // fprintf(PC, "\t[ADC] Command: %04LX\r\n", cmd);
....................     output_low(ADC_CS); 
02254:  MOVLW  FD
02256:  MOVWF  F93
02258:  BCF    F8A.1
....................     delay_us(10); 
0225A:  MOVLW  0D
0225C:  MOVWF  00
0225E:  DECFSZ 00,F
02260:  BRA    225E
....................     spi_xfer(ADC_STREAM, cmd); 
02262:  MOVFF  A94,A9A
02266:  MOVFF  A93,A99
0226A:  MOVLW  10
0226C:  MOVLB  A
0226E:  MOVWF  x9B
02270:  MOVLW  01
02272:  MOVWF  x9C
02274:  MOVLB  0
02276:  CALL   21DE
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd);
....................     #endif
....................     output_high(ADC_CS); 
0227A:  MOVLW  FD
0227C:  MOVWF  F93
0227E:  BSF    F8A.1
....................     delay_us(10);
02280:  MOVLW  0D
02282:  MOVWF  00
02284:  DECFSZ 00,F
02286:  BRA    2284
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
02288:  MOVLW  FD
0228A:  MOVWF  F93
0228C:  BCF    F8A.1
....................     delay_us(10);
0228E:  MOVLW  0D
02290:  MOVWF  00
02292:  DECFSZ 00,F
02294:  BRA    2292
....................     unsigned int16 ans = spi_xfer(ADC_STREAM, 0x0000);
02296:  MOVLB  A
02298:  CLRF   x9A
0229A:  CLRF   x99
0229C:  MOVLW  10
0229E:  MOVWF  x9B
022A0:  MOVLW  01
022A2:  MOVWF  x9C
022A4:  MOVLB  0
022A6:  CALL   21DE
022AA:  MOVFF  02,A96
022AE:  MOVFF  01,A95
....................     output_high(ADC_CS); 
022B2:  MOVLW  FD
022B4:  MOVWF  F93
022B6:  BSF    F8A.1
....................     unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
022B8:  MOVLB  A
022BA:  MOVF   x95,W
022BC:  MOVWF  x97
022BE:  MOVF   x96,W
022C0:  ANDLW  0F
022C2:  MOVWF  x98
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata);
....................     #endif
....................     return readdata;
022C4:  MOVF   x97,W
022C6:  MOVWF  01
022C8:  MOVF   x98,W
022CA:  MOVWF  02
022CC:  MOVLB  0
022CE:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "device_driver/mcp4901_driver.c"
.................... #include "mcp4901_driver.h"                        
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/mmj_cigs_config.h"             
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=2000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=2000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=1000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=2000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mcp4901.h"       
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // #define MCP4901_DEBUG
.................... 
.................... void mcp4901_init()
.................... {
....................     fprintf(PC, "MCP4901 Initialize\r\n");
*
02686:  MOVLW  52
02688:  MOVWF  FF6
0268A:  MOVLW  03
0268C:  MOVWF  FF7
0268E:  MOVLW  00
02690:  MOVWF  FF8
02692:  CALL   2084
....................     output_high(DAC1_CS); 
02696:  MOVLW  3F
02698:  MOVWF  F95
0269A:  BSF    F8C.7
....................     output_high(DAC2_CS); 
0269C:  MOVLW  3F
0269E:  MOVWF  F95
026A0:  BSF    F8C.6
....................     delay_ms(10); 
026A2:  MOVLW  0A
026A4:  MOVLB  B
026A6:  MOVWF  xC0
026A8:  MOVLB  0
026AA:  CALL   2056
....................     mcp4901_1_write(10); 
026AE:  MOVLB  A
026B0:  CLRF   x81
026B2:  MOVLW  0A
026B4:  MOVWF  x80
026B6:  MOVLB  0
026B8:  CALL   2602
....................     mcp4901_2_write(10); 
026BC:  MOVLB  A
026BE:  CLRF   x81
026C0:  MOVLW  0A
026C2:  MOVWF  x80
026C4:  MOVLB  0
026C6:  CALL   2644
....................     unsigned int16 readdata;
....................     readdata = ad7490_read(ADC_CIGS1_VREF); 
026CA:  MOVLW  03
026CC:  MOVLB  A
026CE:  MOVWF  x92
026D0:  MOVLB  0
026D2:  CALL   2244
026D6:  MOVFF  02,22D
026DA:  MOVFF  01,22C
....................     fprintf(PC, "%04LX\r\n", readdata);
026DE:  MOVFF  22D,A77
026E2:  MOVLW  37
026E4:  MOVLB  A
026E6:  MOVWF  x78
026E8:  MOVLB  0
026EA:  CALL   22D0
026EE:  MOVFF  22C,A77
026F2:  MOVLW  37
026F4:  MOVLB  A
026F6:  MOVWF  x78
026F8:  MOVLB  0
026FA:  CALL   22D0
026FE:  MOVLW  0D
02700:  BTFSS  FA6.6
02702:  GOTO   2700
02706:  MOVLB  E
02708:  MOVWF  xF9
0270A:  MOVLW  0A
0270C:  MOVLB  0
0270E:  BTFSS  FA6.6
02710:  GOTO   270E
02714:  MOVLB  E
02716:  MOVWF  xF9
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
02718:  MOVLB  2
0271A:  INCFSZ x2C,W
0271C:  BRA    2722
0271E:  BRA    2728
02720:  MOVLB  0
02722:  MOVLB  0
02724:  GOTO   2740
02728:  MOVLB  0
0272A:  MOVLB  2
0272C:  INCFSZ x2D,W
0272E:  BRA    2734
02730:  BRA    273A
02732:  MOVLB  0
02734:  MOVLB  0
02736:  GOTO   2740
0273A:  MOVLB  0
0273C:  GOTO   2760
02740:  MOVLB  2
02742:  MOVF   x2C,F
02744:  BTFSC  FD8.2
02746:  BRA    274E
02748:  MOVLB  0
0274A:  GOTO   2774
0274E:  MOVLB  0
02750:  MOVLB  2
02752:  MOVF   x2D,F
02754:  BTFSC  FD8.2
02756:  BRA    275E
02758:  MOVLB  0
0275A:  GOTO   2774
0275E:  MOVLB  0
....................         fprintf(PC, "\t[DAC Port 1] Connect error!\r\n");
02760:  MOVLW  68
02762:  MOVWF  FF6
02764:  MOVLW  03
02766:  MOVWF  FF7
02768:  MOVLW  00
0276A:  MOVWF  FF8
0276C:  CALL   2084
....................     } else {
02770:  GOTO   2784
....................         fprintf(PC, "\t[DAC Port 1] Connect successful\r\n");
02774:  MOVLW  88
02776:  MOVWF  FF6
02778:  MOVLW  03
0277A:  MOVWF  FF7
0277C:  MOVLW  00
0277E:  MOVWF  FF8
02780:  CALL   2084
....................     }
....................     fprintf(PC, "%04LX\r\n", readdata);
02784:  MOVFF  22D,A77
02788:  MOVLW  37
0278A:  MOVLB  A
0278C:  MOVWF  x78
0278E:  MOVLB  0
02790:  CALL   22D0
02794:  MOVFF  22C,A77
02798:  MOVLW  37
0279A:  MOVLB  A
0279C:  MOVWF  x78
0279E:  MOVLB  0
027A0:  CALL   22D0
027A4:  MOVLW  0D
027A6:  BTFSS  FA6.6
027A8:  GOTO   27A6
027AC:  MOVLB  E
027AE:  MOVWF  xF9
027B0:  MOVLW  0A
027B2:  MOVLB  0
027B4:  BTFSS  FA6.6
027B6:  GOTO   27B4
027BA:  MOVLB  E
027BC:  MOVWF  xF9
....................     readdata = ad7490_read(ADC_CIGS2_VREF); 
027BE:  MOVLW  07
027C0:  MOVLB  A
027C2:  MOVWF  x92
027C4:  MOVLB  0
027C6:  CALL   2244
027CA:  MOVFF  02,22D
027CE:  MOVFF  01,22C
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
027D2:  MOVLB  2
027D4:  INCFSZ x2C,W
027D6:  BRA    27DC
027D8:  BRA    27E2
027DA:  MOVLB  0
027DC:  MOVLB  0
027DE:  GOTO   27FA
027E2:  MOVLB  0
027E4:  MOVLB  2
027E6:  INCFSZ x2D,W
027E8:  BRA    27EE
027EA:  BRA    27F4
027EC:  MOVLB  0
027EE:  MOVLB  0
027F0:  GOTO   27FA
027F4:  MOVLB  0
027F6:  GOTO   281A
027FA:  MOVLB  2
027FC:  MOVF   x2C,F
027FE:  BTFSC  FD8.2
02800:  BRA    2808
02802:  MOVLB  0
02804:  GOTO   282E
02808:  MOVLB  0
0280A:  MOVLB  2
0280C:  MOVF   x2D,F
0280E:  BTFSC  FD8.2
02810:  BRA    2818
02812:  MOVLB  0
02814:  GOTO   282E
02818:  MOVLB  0
....................         fprintf(PC, "\t[DAC Port 2] Connect error!\r\n");
0281A:  MOVLW  AC
0281C:  MOVWF  FF6
0281E:  MOVLW  03
02820:  MOVWF  FF7
02822:  MOVLW  00
02824:  MOVWF  FF8
02826:  CALL   2084
....................     } else {
0282A:  GOTO   283E
....................         fprintf(PC, "\t[DAC Port 2] Connect successful\r\n");
0282E:  MOVLW  CC
02830:  MOVWF  FF6
02832:  MOVLW  03
02834:  MOVWF  FF7
02836:  MOVLW  00
02838:  MOVWF  FF8
0283A:  CALL   2084
....................     }
....................     fprintf(PC, "\tComplete\r\n");
0283E:  MOVLW  F0
02840:  MOVWF  FF6
02842:  MOVLW  03
02844:  MOVWF  FF7
02846:  MOVLW  00
02848:  MOVWF  FF8
0284A:  CALL   2084
0284E:  GOTO   11C62 (RETURN)
.................... }
.................... 
.................... 
.................... void mcp4901_1_write(unsigned int16 value)
*
02602:  MOVFF  A81,A85
02606:  MOVFF  A80,A84
0260A:  CALL   2454
0260E:  MOVFF  02,A83
02612:  MOVFF  01,A82
.................... {
....................     unsigned int16 cmd = mcp4901_make_cmd(value);
....................     #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................     #endif
....................     output_low(DAC1_CS); 
02616:  MOVLW  3F
02618:  MOVWF  F95
0261A:  BCF    F8C.7
....................     delay_us(10); 
0261C:  MOVLW  0D
0261E:  MOVWF  00
02620:  DECFSZ 00,F
02622:  BRA    2620
....................     spi_xfer(DAC_STREAM, cmd); 
02624:  MOVFF  A83,A85
02628:  MOVFF  A82,A84
0262C:  MOVLW  10
0262E:  MOVLB  A
02630:  MOVWF  x86
02632:  MOVLW  01
02634:  MOVWF  x87
02636:  MOVLB  0
02638:  CALL   25A8
....................     output_high(DAC1_CS); 
0263C:  MOVLW  3F
0263E:  MOVWF  F95
02640:  BSF    F8C.7
02642:  RETURN 0
.................... }
.................... 
.................... void mcp4901_2_write(unsigned int16 value)
02644:  MOVFF  A81,A85
02648:  MOVFF  A80,A84
0264C:  CALL   2454
02650:  MOVFF  02,A83
02654:  MOVFF  01,A82
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC2_CS); 
02658:  MOVLW  3F
0265A:  MOVWF  F95
0265C:  BCF    F8C.6
....................    delay_us(100); 
0265E:  MOVLW  85
02660:  MOVWF  00
02662:  DECFSZ 00,F
02664:  BRA    2662
....................    spi_xfer(DAC_STREAM, cmd); 
02666:  MOVFF  A83,A85
0266A:  MOVFF  A82,A84
0266E:  MOVLW  10
02670:  MOVLB  A
02672:  MOVWF  x86
02674:  MOVLW  01
02676:  MOVWF  x87
02678:  MOVLB  0
0267A:  CALL   25A8
....................    output_high(DAC2_CS); 
0267E:  MOVLW  3F
02680:  MOVWF  F95
02682:  BSF    F8C.6
02684:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... 
.................... // ライブラリ実装ファイル
.................... #include "../lib/device/ad7490.c"
.................... // #include "ad7490.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 ad7490_readdata(unsigned int16 channel)
.................... {
....................     spi_xfer(ADC_STREAM, channel); // Dummy transfer to start communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC, "\t[ADC] <<< %04LX\r\n", channel);
....................     #endif
....................     unsigned int16 ans = spi_xfer(ADC_STREAM);
....................     return ans & 0x0FFF; //Conver LSB <--> MSB
.................... }
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     cmd.fields.reserved0 = 0; // Reserved bits
*
0216E:  MOVLB  A
02170:  BCF    x9A.0
....................     cmd.fields.reserved1 = 0; // Reserved bits
02172:  BCF    x9A.1
....................     cmd.fields.reserved2 = 0; // Reserved bits
02174:  BCF    x9A.2
....................     cmd.fields.reserved3 = 0;
02176:  BCF    x9A.3
....................     cmd.fields.coding = 1; // Two's complement
02178:  BSF    x9A.4
....................     cmd.fields.range = 0; // Normal mode
0217A:  BCF    x9A.5
....................     cmd.fields.weak_tri = 0; // Strong trigger
0217C:  BCF    x9A.6
....................     cmd.fields.shadow = 0; // Direct access
0217E:  BCF    x9A.7
....................     cmd.fields.pm0 = AD7490_PM_AUTO_STANDBY & 0b00000001; // Power mode bits
02180:  BSF    x9B.0
....................     cmd.fields.pm1 = (AD7490_PM_AUTO_STANDBY >> 1) & 0b00000001; // Power mode bits
02182:  BSF    x9B.1
....................     cmd.fields.add0 = (channel >> 0) & 0b00000001; // Channel address bits
02184:  MOVF   x99,W
02186:  ANDLW  01
02188:  MOVWF  01
0218A:  BCF    x9B.2
0218C:  BTFSC  01.0
0218E:  BSF    x9B.2
....................     cmd.fields.add1 = (channel >> 1) & 0b00000001; // Channel address bits
02190:  BCF    FD8.0
02192:  RRCF   x99,W
02194:  ANDLW  01
02196:  MOVWF  01
02198:  BCF    x9B.3
0219A:  BTFSC  01.0
0219C:  BSF    x9B.3
....................     cmd.fields.add2 = (channel >> 2) & 0b00000001; // Channel address bits
0219E:  RRCF   x99,W
021A0:  MOVWF  00
021A2:  RRCF   00,F
021A4:  MOVLW  3F
021A6:  ANDWF  00,F
021A8:  MOVF   00,W
021AA:  ANDLW  01
021AC:  MOVWF  01
021AE:  BCF    x9B.4
021B0:  BTFSC  01.0
021B2:  BSF    x9B.4
....................     cmd.fields.add3 = (channel >> 3) & 0b00000001; // Channel address bits
021B4:  RRCF   x99,W
021B6:  MOVWF  00
021B8:  RRCF   00,F
021BA:  RRCF   00,F
021BC:  MOVLW  1F
021BE:  ANDWF  00,F
021C0:  MOVF   00,W
021C2:  ANDLW  01
021C4:  MOVWF  01
021C6:  BCF    x9B.5
021C8:  BTFSC  01.0
021CA:  BSF    x9B.5
....................     cmd.fields.seq = 0; // Random mode
021CC:  BCF    x9B.6
....................     cmd.fields.write = 1; // Read operation
021CE:  BSF    x9B.7
.................... 
.................... 
....................     return cmd.value;
021D0:  MOVF   x9A,W
021D2:  MOVWF  01
021D4:  MOVF   x9B,W
021D6:  MOVWF  02
021D8:  MOVLB  0
021DA:  GOTO   224C (RETURN)
.................... }
.................... 
.................... #include "../lib/device/mcp4901.c"
.................... // #include "mcp4901.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value)
.................... {
....................    mcp4901_cmd_t cmd;
....................    cmd.fields.startbit = 0; // Start bit
*
02454:  MOVLB  A
02456:  BCF    x87.7
....................    cmd.fields.buffer = 1; // Buffer used
02458:  BSF    x87.6
....................    cmd.fields.gain = 1; // Gain 1x
0245A:  BSF    x87.5
....................    cmd.fields.shutdown = 1; // Normal operation
0245C:  BSF    x87.4
....................    cmd.fields.data7 = (value >> 7) & 0x01;
0245E:  RRCF   x85,W
02460:  MOVWF  x89
02462:  RRCF   x84,W
02464:  MOVWF  x88
02466:  RRCF   x89,F
02468:  RRCF   x88,F
0246A:  RRCF   x89,F
0246C:  RRCF   x88,F
0246E:  RRCF   x89,F
02470:  RRCF   x88,F
02472:  RRCF   x89,F
02474:  RRCF   x88,F
02476:  RRCF   x89,F
02478:  RRCF   x88,F
0247A:  RRCF   x89,F
0247C:  RRCF   x88,F
0247E:  MOVLW  01
02480:  ANDWF  x89,F
02482:  MOVF   x88,W
02484:  ANDLW  01
02486:  MOVWF  00
02488:  CLRF   03
0248A:  MOVF   00,W
0248C:  MOVWF  01
0248E:  BCF    x87.3
02490:  BTFSC  01.0
02492:  BSF    x87.3
....................    cmd.fields.data6 = (value >> 6) & 0x01;
02494:  RRCF   x85,W
02496:  MOVWF  x89
02498:  RRCF   x84,W
0249A:  MOVWF  x88
0249C:  RRCF   x89,F
0249E:  RRCF   x88,F
024A0:  RRCF   x89,F
024A2:  RRCF   x88,F
024A4:  RRCF   x89,F
024A6:  RRCF   x88,F
024A8:  RRCF   x89,F
024AA:  RRCF   x88,F
024AC:  RRCF   x89,F
024AE:  RRCF   x88,F
024B0:  MOVLW  03
024B2:  ANDWF  x89,F
024B4:  MOVF   x88,W
024B6:  ANDLW  01
024B8:  MOVWF  00
024BA:  CLRF   03
024BC:  MOVF   00,W
024BE:  MOVWF  01
024C0:  BCF    x87.2
024C2:  BTFSC  01.0
024C4:  BSF    x87.2
....................    cmd.fields.data5 = (value >> 5) & 0x01;
024C6:  RRCF   x85,W
024C8:  MOVWF  x89
024CA:  RRCF   x84,W
024CC:  MOVWF  x88
024CE:  RRCF   x89,F
024D0:  RRCF   x88,F
024D2:  RRCF   x89,F
024D4:  RRCF   x88,F
024D6:  RRCF   x89,F
024D8:  RRCF   x88,F
024DA:  RRCF   x89,F
024DC:  RRCF   x88,F
024DE:  MOVLW  07
024E0:  ANDWF  x89,F
024E2:  MOVF   x88,W
024E4:  ANDLW  01
024E6:  MOVWF  00
024E8:  CLRF   03
024EA:  MOVF   00,W
024EC:  MOVWF  01
024EE:  BCF    x87.1
024F0:  BTFSC  01.0
024F2:  BSF    x87.1
....................    cmd.fields.data4 = (value >> 4) & 0x01;
024F4:  RRCF   x85,W
024F6:  MOVWF  x89
024F8:  RRCF   x84,W
024FA:  MOVWF  x88
024FC:  RRCF   x89,F
024FE:  RRCF   x88,F
02500:  RRCF   x89,F
02502:  RRCF   x88,F
02504:  RRCF   x89,F
02506:  RRCF   x88,F
02508:  MOVLW  0F
0250A:  ANDWF  x89,F
0250C:  MOVF   x88,W
0250E:  ANDLW  01
02510:  MOVWF  00
02512:  CLRF   03
02514:  MOVF   00,W
02516:  MOVWF  01
02518:  BCF    x87.0
0251A:  BTFSC  01.0
0251C:  BSF    x87.0
....................    cmd.fields.data3 = (value >> 3) & 0x01;
0251E:  RRCF   x85,W
02520:  MOVWF  x89
02522:  RRCF   x84,W
02524:  MOVWF  x88
02526:  RRCF   x89,F
02528:  RRCF   x88,F
0252A:  RRCF   x89,F
0252C:  RRCF   x88,F
0252E:  MOVLW  1F
02530:  ANDWF  x89,F
02532:  MOVF   x88,W
02534:  ANDLW  01
02536:  MOVWF  00
02538:  CLRF   03
0253A:  MOVF   00,W
0253C:  MOVWF  01
0253E:  BCF    x86.7
02540:  BTFSC  01.0
02542:  BSF    x86.7
....................    cmd.fields.data2 = (value >> 2) & 0x01;
02544:  RRCF   x85,W
02546:  MOVWF  x89
02548:  RRCF   x84,W
0254A:  MOVWF  x88
0254C:  RRCF   x89,F
0254E:  RRCF   x88,F
02550:  MOVLW  3F
02552:  ANDWF  x89,F
02554:  MOVF   x88,W
02556:  ANDLW  01
02558:  MOVWF  00
0255A:  CLRF   03
0255C:  MOVF   00,W
0255E:  MOVWF  01
02560:  BCF    x86.6
02562:  BTFSC  01.0
02564:  BSF    x86.6
....................    cmd.fields.data1 = (value >> 1) & 0x01;
02566:  BCF    FD8.0
02568:  RRCF   x85,W
0256A:  MOVWF  x89
0256C:  RRCF   x84,W
0256E:  MOVWF  x88
02570:  MOVF   x88,W
02572:  ANDLW  01
02574:  MOVWF  00
02576:  CLRF   03
02578:  MOVF   00,W
0257A:  MOVWF  01
0257C:  BCF    x86.5
0257E:  BTFSC  01.0
02580:  BSF    x86.5
....................    cmd.fields.data0 = value & 0x01; // LSB of the data
02582:  MOVF   x84,W
02584:  ANDLW  01
02586:  MOVWF  00
02588:  CLRF   03
0258A:  MOVF   00,W
0258C:  MOVWF  01
0258E:  BCF    x86.4
02590:  BTFSC  01.0
02592:  BSF    x86.4
....................    cmd.fields.reserved = 0; // Reserved bits
02594:  BCF    x86.3
....................    cmd.fields.reserved2 = 0; // Reserved bits
02596:  BCF    x86.2
....................    cmd.fields.reserved3 = 0; // Reserved bits
02598:  BCF    x86.1
....................    cmd.fields.reserved4 = 0; // Reserved bits
0259A:  BCF    x86.0
.................... 
....................    return cmd.value;
0259C:  MOVF   x86,W
0259E:  MOVWF  01
025A0:  MOVF   x87,W
025A2:  MOVWF  02
025A4:  MOVLB  0
025A6:  RETURN 0
.................... }
.................... 
.................... #include "../lib/device/mt25q.c"
.................... #include "mt25q.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
03970:  MOVLB  B
03972:  MOVF   xC0,W
03974:  XORLW  00
03976:  MOVLB  0
03978:  BTFSC  FD8.2
0397A:  GOTO   398A
0397E:  XORLW  01
03980:  BTFSC  FD8.2
03982:  GOTO   39F2
03986:  GOTO   3A5A
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0398A:  MOVLB  B
0398C:  CLRF   xC9
0398E:  CLRF   xC8
03990:  MOVLB  0
03992:  MOVLB  B
03994:  MOVF   xC9,W
03996:  SUBWF  xC7,W
03998:  BTFSC  FD8.0
0399A:  BRA    39A2
0399C:  MOVLB  0
0399E:  GOTO   39EE
039A2:  MOVLB  0
039A4:  BTFSS  FD8.2
039A6:  GOTO   39BC
039AA:  MOVLB  B
039AC:  MOVF   xC6,W
039AE:  SUBWF  xC8,W
039B0:  BTFSS  FD8.0
039B2:  BRA    39BA
039B4:  MOVLB  0
039B6:  GOTO   39EE
039BA:  MOVLB  0
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
039BC:  MOVLB  B
039BE:  MOVF   xC4,W
039C0:  ADDWF  xC8,W
039C2:  MOVWF  FE9
039C4:  MOVF   xC5,W
039C6:  ADDWFC xC9,W
039C8:  MOVWF  FEA
039CA:  MOVFF  FEF,BCC
039CE:  MOVFF  BCC,BE2
039D2:  MOVLW  08
039D4:  MOVWF  xE3
039D6:  MOVLW  01
039D8:  MOVWF  xE4
039DA:  MOVLB  0
039DC:  CALL   28A6
039E0:  MOVLB  B
039E2:  INCF   xC8,F
039E4:  BTFSC  FD8.2
039E6:  INCF   xC9,F
039E8:  MOVLB  0
039EA:  GOTO   3992
....................          break;
039EE:  GOTO   3A5E
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
039F2:  MOVLB  B
039F4:  CLRF   xCB
039F6:  CLRF   xCA
039F8:  MOVLB  0
039FA:  MOVLB  B
039FC:  MOVF   xCB,W
039FE:  SUBWF  xC7,W
03A00:  BTFSC  FD8.0
03A02:  BRA    3A0A
03A04:  MOVLB  0
03A06:  GOTO   3A56
03A0A:  MOVLB  0
03A0C:  BTFSS  FD8.2
03A0E:  GOTO   3A24
03A12:  MOVLB  B
03A14:  MOVF   xC6,W
03A16:  SUBWF  xCA,W
03A18:  BTFSS  FD8.0
03A1A:  BRA    3A22
03A1C:  MOVLB  0
03A1E:  GOTO   3A56
03A22:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
03A24:  MOVLB  B
03A26:  MOVF   xC4,W
03A28:  ADDWF  xCA,W
03A2A:  MOVWF  FE9
03A2C:  MOVF   xC5,W
03A2E:  ADDWFC xCB,W
03A30:  MOVWF  FEA
03A32:  MOVFF  FEF,BCC
03A36:  MOVFF  BCC,BE2
03A3A:  MOVLW  08
03A3C:  MOVWF  xE3
03A3E:  MOVLW  01
03A40:  MOVWF  xE4
03A42:  MOVLB  0
03A44:  CALL   2906
03A48:  MOVLB  B
03A4A:  INCF   xCA,F
03A4C:  BTFSC  FD8.2
03A4E:  INCF   xCB,F
03A50:  MOVLB  0
03A52:  GOTO   39FA
....................          break;
03A56:  GOTO   3A5E
....................          
....................       default:
....................          break;
03A5A:  GOTO   3A5E
....................    }
....................    return;
03A5E:  RETURN 0
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount, int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
02966:  MOVLB  B
02968:  MOVF   xC6,W
0296A:  XORLW  00
0296C:  MOVLB  0
0296E:  BTFSC  FD8.2
02970:  GOTO   2980
02974:  XORLW  01
02976:  BTFSC  FD8.2
02978:  GOTO   2A8A
0297C:  GOTO   2B94
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02980:  MOVLB  B
02982:  CLRF   xD5
02984:  CLRF   xD4
02986:  MOVLB  0
02988:  MOVLB  B
0298A:  MOVF   xD5,W
0298C:  SUBWF  xCD,W
0298E:  BTFSC  FD8.0
02990:  BRA    2998
02992:  MOVLB  0
02994:  GOTO   29E4
02998:  MOVLB  0
0299A:  BTFSS  FD8.2
0299C:  GOTO   29B2
029A0:  MOVLB  B
029A2:  MOVF   xCC,W
029A4:  SUBWF  xD4,W
029A6:  BTFSS  FD8.0
029A8:  BRA    29B0
029AA:  MOVLB  0
029AC:  GOTO   29E4
029B0:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
029B2:  MOVLB  B
029B4:  MOVF   xCA,W
029B6:  ADDWF  xD4,W
029B8:  MOVWF  FE9
029BA:  MOVF   xCB,W
029BC:  ADDWFC xD5,W
029BE:  MOVWF  FEA
029C0:  MOVFF  FEF,BE0
029C4:  MOVFF  BE0,BE2
029C8:  MOVLW  08
029CA:  MOVWF  xE3
029CC:  MOVLW  01
029CE:  MOVWF  xE4
029D0:  MOVLB  0
029D2:  CALL   28A6
029D6:  MOVLB  B
029D8:  INCF   xD4,F
029DA:  BTFSC  FD8.2
029DC:  INCF   xD5,F
029DE:  MOVLB  0
029E0:  GOTO   2988
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
029E4:  MOVLB  B
029E6:  CLRF   xD9
029E8:  CLRF   xD8
029EA:  CLRF   xD7
029EC:  CLRF   xD6
029EE:  MOVLB  0
029F0:  MOVLB  B
029F2:  MOVF   xD9,W
029F4:  SUBWF  xD3,W
029F6:  BTFSC  FD8.0
029F8:  BRA    2A00
029FA:  MOVLB  0
029FC:  GOTO   2A86
02A00:  MOVLB  0
02A02:  BTFSS  FD8.2
02A04:  GOTO   2A4A
02A08:  MOVLB  B
02A0A:  MOVF   xD8,W
02A0C:  SUBWF  xD2,W
02A0E:  BTFSC  FD8.0
02A10:  BRA    2A18
02A12:  MOVLB  0
02A14:  GOTO   2A86
02A18:  MOVLB  0
02A1A:  BTFSS  FD8.2
02A1C:  GOTO   2A4A
02A20:  MOVLB  B
02A22:  MOVF   xD7,W
02A24:  SUBWF  xD1,W
02A26:  BTFSC  FD8.0
02A28:  BRA    2A30
02A2A:  MOVLB  0
02A2C:  GOTO   2A86
02A30:  MOVLB  0
02A32:  BTFSS  FD8.2
02A34:  GOTO   2A4A
02A38:  MOVLB  B
02A3A:  MOVF   xD0,W
02A3C:  SUBWF  xD6,W
02A3E:  BTFSS  FD8.0
02A40:  BRA    2A48
02A42:  MOVLB  0
02A44:  GOTO   2A86
02A48:  MOVLB  0
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
02A4A:  MOVLB  B
02A4C:  MOVF   xCE,W
02A4E:  ADDWF  xD6,W
02A50:  MOVWF  FE9
02A52:  MOVF   xCF,W
02A54:  ADDWFC xD7,W
02A56:  MOVWF  FEA
02A58:  MOVLW  02
02A5A:  MOVWF  xE2
02A5C:  MOVLW  08
02A5E:  MOVWF  xE3
02A60:  MOVLW  01
02A62:  MOVWF  xE4
02A64:  MOVLB  0
02A66:  CALL   28A6
02A6A:  MOVFF  01,FEF
02A6E:  MOVLW  01
02A70:  MOVLB  B
02A72:  ADDWF  xD6,F
02A74:  BTFSC  FD8.0
02A76:  INCF   xD7,F
02A78:  BTFSC  FD8.2
02A7A:  INCF   xD8,F
02A7C:  BTFSC  FD8.2
02A7E:  INCF   xD9,F
02A80:  MOVLB  0
02A82:  GOTO   29F0
....................          break;
02A86:  GOTO   2B98
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02A8A:  MOVLB  B
02A8C:  CLRF   xDB
02A8E:  CLRF   xDA
02A90:  MOVLB  0
02A92:  MOVLB  B
02A94:  MOVF   xDB,W
02A96:  SUBWF  xCD,W
02A98:  BTFSC  FD8.0
02A9A:  BRA    2AA2
02A9C:  MOVLB  0
02A9E:  GOTO   2AEE
02AA2:  MOVLB  0
02AA4:  BTFSS  FD8.2
02AA6:  GOTO   2ABC
02AAA:  MOVLB  B
02AAC:  MOVF   xCC,W
02AAE:  SUBWF  xDA,W
02AB0:  BTFSS  FD8.0
02AB2:  BRA    2ABA
02AB4:  MOVLB  0
02AB6:  GOTO   2AEE
02ABA:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
02ABC:  MOVLB  B
02ABE:  MOVF   xCA,W
02AC0:  ADDWF  xDA,W
02AC2:  MOVWF  FE9
02AC4:  MOVF   xCB,W
02AC6:  ADDWFC xDB,W
02AC8:  MOVWF  FEA
02ACA:  MOVFF  FEF,BE0
02ACE:  MOVFF  BE0,BE2
02AD2:  MOVLW  08
02AD4:  MOVWF  xE3
02AD6:  MOVLW  01
02AD8:  MOVWF  xE4
02ADA:  MOVLB  0
02ADC:  CALL   2906
02AE0:  MOVLB  B
02AE2:  INCF   xDA,F
02AE4:  BTFSC  FD8.2
02AE6:  INCF   xDB,F
02AE8:  MOVLB  0
02AEA:  GOTO   2A92
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
02AEE:  MOVLB  B
02AF0:  CLRF   xDF
02AF2:  CLRF   xDE
02AF4:  CLRF   xDD
02AF6:  CLRF   xDC
02AF8:  MOVLB  0
02AFA:  MOVLB  B
02AFC:  MOVF   xDF,W
02AFE:  SUBWF  xD3,W
02B00:  BTFSC  FD8.0
02B02:  BRA    2B0A
02B04:  MOVLB  0
02B06:  GOTO   2B90
02B0A:  MOVLB  0
02B0C:  BTFSS  FD8.2
02B0E:  GOTO   2B54
02B12:  MOVLB  B
02B14:  MOVF   xDE,W
02B16:  SUBWF  xD2,W
02B18:  BTFSC  FD8.0
02B1A:  BRA    2B22
02B1C:  MOVLB  0
02B1E:  GOTO   2B90
02B22:  MOVLB  0
02B24:  BTFSS  FD8.2
02B26:  GOTO   2B54
02B2A:  MOVLB  B
02B2C:  MOVF   xDD,W
02B2E:  SUBWF  xD1,W
02B30:  BTFSC  FD8.0
02B32:  BRA    2B3A
02B34:  MOVLB  0
02B36:  GOTO   2B90
02B3A:  MOVLB  0
02B3C:  BTFSS  FD8.2
02B3E:  GOTO   2B54
02B42:  MOVLB  B
02B44:  MOVF   xD0,W
02B46:  SUBWF  xDC,W
02B48:  BTFSS  FD8.0
02B4A:  BRA    2B52
02B4C:  MOVLB  0
02B4E:  GOTO   2B90
02B52:  MOVLB  0
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
02B54:  MOVLB  B
02B56:  MOVF   xCE,W
02B58:  ADDWF  xDC,W
02B5A:  MOVWF  FE9
02B5C:  MOVF   xCF,W
02B5E:  ADDWFC xDD,W
02B60:  MOVWF  FEA
02B62:  MOVLW  01
02B64:  MOVWF  xE2
02B66:  MOVLW  08
02B68:  MOVWF  xE3
02B6A:  MOVLW  01
02B6C:  MOVWF  xE4
02B6E:  MOVLB  0
02B70:  CALL   2906
02B74:  MOVFF  01,FEF
02B78:  MOVLW  01
02B7A:  MOVLB  B
02B7C:  ADDWF  xDC,F
02B7E:  BTFSC  FD8.0
02B80:  INCF   xDD,F
02B82:  BTFSC  FD8.2
02B84:  INCF   xDE,F
02B86:  BTFSC  FD8.2
02B88:  INCF   xDF,F
02B8A:  MOVLB  0
02B8C:  GOTO   2AFA
....................          break;
02B90:  GOTO   2B98
....................    
....................          
....................       default:
....................          break;
02B94:  GOTO   2B98
....................    }
....................    return;
02B98:  RETURN 0
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, int8 *cmd_data, unsigned int8 cmd_amount, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
03A60:  MOVLB  B
03A62:  MOVF   xC0,W
03A64:  XORLW  00
03A66:  MOVLB  0
03A68:  BTFSC  FD8.2
03A6A:  GOTO   3A7A
03A6E:  XORLW  01
03A70:  BTFSC  FD8.2
03A72:  GOTO   3B28
03A76:  GOTO   3BD6
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
03A7A:  MOVLB  B
03A7C:  CLRF   xCB
03A7E:  MOVLB  0
03A80:  MOVLB  B
03A82:  MOVF   xC6,W
03A84:  SUBWF  xCB,W
03A86:  BTFSS  FD8.0
03A88:  BRA    3A90
03A8A:  MOVLB  0
03A8C:  GOTO   3AC0
03A90:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
03A92:  MOVLB  B
03A94:  MOVF   xCB,W
03A96:  ADDWF  xC4,W
03A98:  MOVWF  FE9
03A9A:  MOVLW  00
03A9C:  ADDWFC xC5,W
03A9E:  MOVWF  FEA
03AA0:  MOVFF  FEF,BD1
03AA4:  MOVFF  BD1,BE2
03AA8:  MOVLW  08
03AAA:  MOVWF  xE3
03AAC:  MOVLW  01
03AAE:  MOVWF  xE4
03AB0:  MOVLB  0
03AB2:  CALL   28A6
03AB6:  MOVLB  B
03AB8:  INCF   xCB,F
03ABA:  MOVLB  0
03ABC:  GOTO   3A80
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03AC0:  MOVLB  B
03AC2:  CLRF   xCD
03AC4:  CLRF   xCC
03AC6:  MOVLB  0
03AC8:  MOVLB  B
03ACA:  MOVF   xCD,W
03ACC:  SUBWF  xCA,W
03ACE:  BTFSC  FD8.0
03AD0:  BRA    3AD8
03AD2:  MOVLB  0
03AD4:  GOTO   3B24
03AD8:  MOVLB  0
03ADA:  BTFSS  FD8.2
03ADC:  GOTO   3AF2
03AE0:  MOVLB  B
03AE2:  MOVF   xC9,W
03AE4:  SUBWF  xCC,W
03AE6:  BTFSS  FD8.0
03AE8:  BRA    3AF0
03AEA:  MOVLB  0
03AEC:  GOTO   3B24
03AF0:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
03AF2:  MOVLB  B
03AF4:  MOVF   xC7,W
03AF6:  ADDWF  xCC,W
03AF8:  MOVWF  FE9
03AFA:  MOVF   xC8,W
03AFC:  ADDWFC xCD,W
03AFE:  MOVWF  FEA
03B00:  MOVFF  FEF,BD1
03B04:  MOVFF  BD1,BE2
03B08:  MOVLW  08
03B0A:  MOVWF  xE3
03B0C:  MOVLW  01
03B0E:  MOVWF  xE4
03B10:  MOVLB  0
03B12:  CALL   28A6
03B16:  MOVLB  B
03B18:  INCF   xCC,F
03B1A:  BTFSC  FD8.2
03B1C:  INCF   xCD,F
03B1E:  MOVLB  0
03B20:  GOTO   3AC8
....................          break;
03B24:  GOTO   3BDA
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
03B28:  MOVLB  B
03B2A:  CLRF   xCE
03B2C:  MOVLB  0
03B2E:  MOVLB  B
03B30:  MOVF   xC6,W
03B32:  SUBWF  xCE,W
03B34:  BTFSS  FD8.0
03B36:  BRA    3B3E
03B38:  MOVLB  0
03B3A:  GOTO   3B6E
03B3E:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
03B40:  MOVLB  B
03B42:  MOVF   xCE,W
03B44:  ADDWF  xC4,W
03B46:  MOVWF  FE9
03B48:  MOVLW  00
03B4A:  ADDWFC xC5,W
03B4C:  MOVWF  FEA
03B4E:  MOVFF  FEF,BD1
03B52:  MOVFF  BD1,BE2
03B56:  MOVLW  08
03B58:  MOVWF  xE3
03B5A:  MOVLW  01
03B5C:  MOVWF  xE4
03B5E:  MOVLB  0
03B60:  CALL   2906
03B64:  MOVLB  B
03B66:  INCF   xCE,F
03B68:  MOVLB  0
03B6A:  GOTO   3B2E
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03B6E:  MOVLB  B
03B70:  CLRF   xD0
03B72:  CLRF   xCF
03B74:  MOVLB  0
03B76:  MOVLB  B
03B78:  MOVF   xD0,W
03B7A:  SUBWF  xCA,W
03B7C:  BTFSC  FD8.0
03B7E:  BRA    3B86
03B80:  MOVLB  0
03B82:  GOTO   3BD2
03B86:  MOVLB  0
03B88:  BTFSS  FD8.2
03B8A:  GOTO   3BA0
03B8E:  MOVLB  B
03B90:  MOVF   xC9,W
03B92:  SUBWF  xCF,W
03B94:  BTFSS  FD8.0
03B96:  BRA    3B9E
03B98:  MOVLB  0
03B9A:  GOTO   3BD2
03B9E:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
03BA0:  MOVLB  B
03BA2:  MOVF   xC7,W
03BA4:  ADDWF  xCF,W
03BA6:  MOVWF  FE9
03BA8:  MOVF   xC8,W
03BAA:  ADDWFC xD0,W
03BAC:  MOVWF  FEA
03BAE:  MOVFF  FEF,BD1
03BB2:  MOVFF  BD1,BE2
03BB6:  MOVLW  08
03BB8:  MOVWF  xE3
03BBA:  MOVLW  01
03BBC:  MOVWF  xE4
03BBE:  MOVLB  0
03BC0:  CALL   2906
03BC4:  MOVLB  B
03BC6:  INCF   xCF,F
03BC8:  BTFSC  FD8.2
03BCA:  INCF   xD0,F
03BCC:  MOVLB  0
03BCE:  GOTO   3B76
....................          break;
03BD2:  GOTO   3BDA
....................          
....................       default:
....................          break;
03BD6:  GOTO   3BDA
....................    }
....................    return;
03BDA:  RETURN 0
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
06644:  MOVFF  34B,BC6
06648:  MOVLW  01
0664A:  MOVLB  B
0664C:  MOVWF  xC7
0664E:  MOVLW  0F
06650:  MOVWF  xC9
06652:  MOVLW  89
06654:  MOVWF  xC8
06656:  MOVLB  0
06658:  CALL   2852
0665C:  MOVFF  34B,BC6
06660:  MOVLB  B
06662:  CLRF   xC7
06664:  MOVLW  0F
06666:  MOVWF  xC9
06668:  MOVLW  92
0666A:  MOVWF  xC8
0666C:  MOVLB  0
0666E:  CALL   2852
06672:  RETURN 0
.................... }
....................  
.................... int8 status_register(Flash flash_stream){
*
03BDC:  MOVLW  05
03BDE:  MOVLB  B
03BE0:  MOVWF  xC4
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
03BE2:  MOVFF  BC2,BC6
03BE6:  CLRF   xC7
03BE8:  MOVLW  0F
03BEA:  MOVWF  xC9
03BEC:  MOVLW  89
03BEE:  MOVWF  xC8
03BF0:  MOVLB  0
03BF2:  CALL   2852
03BF6:  MOVFF  BC2,BC6
03BFA:  MOVLB  B
03BFC:  CLRF   xC7
03BFE:  MOVLW  0F
03C00:  MOVWF  xC9
03C02:  MOVLW  92
03C04:  MOVWF  xC8
03C06:  MOVLB  0
03C08:  CALL   2852
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
03C0C:  MOVFF  BC3,BC9
03C10:  MOVFF  BC2,BC8
03C14:  MOVFF  BC1,BC7
03C18:  MOVFF  BC0,BC6
03C1C:  MOVLW  0B
03C1E:  MOVLB  B
03C20:  MOVWF  xCB
03C22:  MOVLW  C4
03C24:  MOVWF  xCA
03C26:  CLRF   xCD
03C28:  MOVLW  01
03C2A:  MOVWF  xCC
03C2C:  MOVLW  0B
03C2E:  MOVWF  xCF
03C30:  MOVLW  C5
03C32:  MOVWF  xCE
03C34:  CLRF   xD3
03C36:  CLRF   xD2
03C38:  CLRF   xD1
03C3A:  MOVLW  01
03C3C:  MOVWF  xD0
03C3E:  MOVLB  0
03C40:  CALL   2966
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
03C44:  MOVFF  BC2,BC6
03C48:  MOVLW  01
03C4A:  MOVLB  B
03C4C:  MOVWF  xC7
03C4E:  MOVLW  0F
03C50:  MOVWF  xC9
03C52:  MOVLW  89
03C54:  MOVWF  xC8
03C56:  MOVLB  0
03C58:  CALL   2852
03C5C:  MOVFF  BC2,BC6
03C60:  MOVLB  B
03C62:  CLRF   xC7
03C64:  MOVLW  0F
03C66:  MOVWF  xC9
03C68:  MOVLW  92
03C6A:  MOVWF  xC8
03C6C:  MOVLB  0
03C6E:  CALL   2852
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
03C72:  MOVLB  B
03C74:  MOVF   xC5,W
03C76:  MOVWF  01
03C78:  MOVLB  0
03C7A:  RETURN 0
.................... }
.................... 
.................... //
.................... //->success:True,fail:false 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 16);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == MANUFACTURER_ID_MICRON){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
....................  
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
04160:  MOVLB  B
04162:  MOVF   xA7,F
04164:  BTFSC  FD8.2
04166:  BRA    416E
04168:  MOVLB  0
0416A:  GOTO   42C4
0416E:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
04170:  MOVLW  06
04172:  MOVLB  B
04174:  MOVWF  xAE
04176:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
04178:  MOVLW  D8
0417A:  MOVLB  B
0417C:  MOVWF  xAF
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0417E:  MOVFF  BAC,BBB
04182:  MOVFF  BAD,BBC
04186:  CLRF   xBD
04188:  CLRF   xBE
0418A:  MOVF   xBB,W
0418C:  MOVWF  00
0418E:  CLRF   01
04190:  CLRF   02
04192:  CLRF   03
04194:  MOVFF  00,BB0
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
04198:  MOVFF  BAB,BBB
0419C:  MOVFF  BAC,BBC
041A0:  MOVFF  BAD,BBD
041A4:  CLRF   xBE
041A6:  MOVF   xBB,W
041A8:  MOVWF  00
041AA:  CLRF   01
041AC:  CLRF   02
041AE:  CLRF   03
041B0:  MOVFF  00,BB1
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
041B4:  MOVF   xAA,W
041B6:  MOVWF  00
041B8:  CLRF   01
041BA:  CLRF   02
041BC:  CLRF   03
041BE:  MOVFF  00,BB2
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
041C2:  MOVFF  BA8,BC6
041C6:  CLRF   xC7
041C8:  MOVLW  0F
041CA:  MOVWF  xC9
041CC:  MOVLW  89
041CE:  MOVWF  xC8
041D0:  MOVLB  0
041D2:  CALL   2852
041D6:  MOVFF  BA8,BC6
041DA:  MOVLB  B
041DC:  CLRF   xC7
041DE:  MOVLW  0F
041E0:  MOVWF  xC9
041E2:  MOVLW  92
041E4:  MOVWF  xC8
041E6:  MOVLB  0
041E8:  CALL   2852
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
041EC:  MOVFF  BA9,BC3
041F0:  MOVFF  BA8,BC2
041F4:  MOVFF  BA7,BC1
041F8:  MOVFF  BA6,BC0
041FC:  MOVLW  0B
041FE:  MOVLB  B
04200:  MOVWF  xC5
04202:  MOVLW  AE
04204:  MOVWF  xC4
04206:  CLRF   xC7
04208:  MOVLW  01
0420A:  MOVWF  xC6
0420C:  MOVLB  0
0420E:  CALL   3970
....................       output_high(flash_stream.cs_pin);
04212:  MOVFF  BA8,BC6
04216:  MOVLW  01
04218:  MOVLB  B
0421A:  MOVWF  xC7
0421C:  MOVLW  0F
0421E:  MOVWF  xC9
04220:  MOVLW  89
04222:  MOVWF  xC8
04224:  MOVLB  0
04226:  CALL   2852
0422A:  MOVFF  BA8,BC6
0422E:  MOVLB  B
04230:  CLRF   xC7
04232:  MOVLW  0F
04234:  MOVWF  xC9
04236:  MOVLW  92
04238:  MOVWF  xC8
0423A:  MOVLB  0
0423C:  CALL   2852
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
04240:  MOVFF  BA8,BC6
04244:  MOVLB  B
04246:  CLRF   xC7
04248:  MOVLW  0F
0424A:  MOVWF  xC9
0424C:  MOVLW  89
0424E:  MOVWF  xC8
04250:  MOVLB  0
04252:  CALL   2852
04256:  MOVFF  BA8,BC6
0425A:  MOVLB  B
0425C:  CLRF   xC7
0425E:  MOVLW  0F
04260:  MOVWF  xC9
04262:  MOVLW  92
04264:  MOVWF  xC8
04266:  MOVLB  0
04268:  CALL   2852
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
0426C:  MOVFF  BA9,BC3
04270:  MOVFF  BA8,BC2
04274:  MOVFF  BA7,BC1
04278:  MOVFF  BA6,BC0
0427C:  MOVLW  0B
0427E:  MOVLB  B
04280:  MOVWF  xC5
04282:  MOVLW  AF
04284:  MOVWF  xC4
04286:  CLRF   xC7
04288:  MOVLW  04
0428A:  MOVWF  xC6
0428C:  MOVLB  0
0428E:  CALL   3970
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04292:  MOVFF  BA8,BC6
04296:  MOVLW  01
04298:  MOVLB  B
0429A:  MOVWF  xC7
0429C:  MOVLW  0F
0429E:  MOVWF  xC9
042A0:  MOVLW  89
042A2:  MOVWF  xC8
042A4:  MOVLB  0
042A6:  CALL   2852
042AA:  MOVFF  BA8,BC6
042AE:  MOVLB  B
042B0:  CLRF   xC7
042B2:  MOVLW  0F
042B4:  MOVWF  xC9
042B6:  MOVLW  92
042B8:  MOVWF  xC8
042BA:  MOVLB  0
042BC:  CALL   2852
....................    }
042C0:  GOTO   4442
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
042C4:  MOVLB  B
042C6:  DECFSZ xA7,W
042C8:  BRA    42CE
042CA:  BRA    42D4
042CC:  MOVLB  0
042CE:  MOVLB  0
042D0:  GOTO   4442
042D4:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
042D6:  MOVLW  06
042D8:  MOVLB  B
042DA:  MOVWF  xB3
042DC:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
042DE:  MOVLW  DC
042E0:  MOVLB  B
042E2:  MOVWF  xB4
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
042E4:  MOVFF  BAD,BBB
042E8:  CLRF   xBC
042EA:  CLRF   xBD
042EC:  CLRF   xBE
042EE:  MOVF   xBB,W
042F0:  MOVWF  00
042F2:  CLRF   01
042F4:  CLRF   02
042F6:  CLRF   03
042F8:  MOVFF  00,BB5
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
042FC:  MOVFF  BAC,BBB
04300:  MOVFF  BAD,BBC
04304:  CLRF   xBD
04306:  CLRF   xBE
04308:  MOVF   xBB,W
0430A:  MOVWF  00
0430C:  CLRF   01
0430E:  CLRF   02
04310:  CLRF   03
04312:  MOVFF  00,BB6
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
04316:  MOVFF  BAB,BBB
0431A:  MOVFF  BAC,BBC
0431E:  MOVFF  BAD,BBD
04322:  CLRF   xBE
04324:  MOVF   xBB,W
04326:  MOVWF  00
04328:  CLRF   01
0432A:  CLRF   02
0432C:  CLRF   03
0432E:  MOVFF  00,BB7
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
04332:  MOVF   xAA,W
04334:  MOVWF  00
04336:  CLRF   01
04338:  CLRF   02
0433A:  CLRF   03
0433C:  MOVFF  00,BB8
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04340:  MOVFF  BA8,BC6
04344:  CLRF   xC7
04346:  MOVLW  0F
04348:  MOVWF  xC9
0434A:  MOVLW  89
0434C:  MOVWF  xC8
0434E:  MOVLB  0
04350:  CALL   2852
04354:  MOVFF  BA8,BC6
04358:  MOVLB  B
0435A:  CLRF   xC7
0435C:  MOVLW  0F
0435E:  MOVWF  xC9
04360:  MOVLW  92
04362:  MOVWF  xC8
04364:  MOVLB  0
04366:  CALL   2852
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0436A:  MOVFF  BA9,BC3
0436E:  MOVFF  BA8,BC2
04372:  MOVFF  BA7,BC1
04376:  MOVFF  BA6,BC0
0437A:  MOVLW  0B
0437C:  MOVLB  B
0437E:  MOVWF  xC5
04380:  MOVLW  B3
04382:  MOVWF  xC4
04384:  CLRF   xC7
04386:  MOVLW  01
04388:  MOVWF  xC6
0438A:  MOVLB  0
0438C:  CALL   3970
....................       output_high(flash_stream.cs_pin);
04390:  MOVFF  BA8,BC6
04394:  MOVLW  01
04396:  MOVLB  B
04398:  MOVWF  xC7
0439A:  MOVLW  0F
0439C:  MOVWF  xC9
0439E:  MOVLW  89
043A0:  MOVWF  xC8
043A2:  MOVLB  0
043A4:  CALL   2852
043A8:  MOVFF  BA8,BC6
043AC:  MOVLB  B
043AE:  CLRF   xC7
043B0:  MOVLW  0F
043B2:  MOVWF  xC9
043B4:  MOVLW  92
043B6:  MOVWF  xC8
043B8:  MOVLB  0
043BA:  CALL   2852
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
043BE:  MOVFF  BA8,BC6
043C2:  MOVLB  B
043C4:  CLRF   xC7
043C6:  MOVLW  0F
043C8:  MOVWF  xC9
043CA:  MOVLW  89
043CC:  MOVWF  xC8
043CE:  MOVLB  0
043D0:  CALL   2852
043D4:  MOVFF  BA8,BC6
043D8:  MOVLB  B
043DA:  CLRF   xC7
043DC:  MOVLW  0F
043DE:  MOVWF  xC9
043E0:  MOVLW  92
043E2:  MOVWF  xC8
043E4:  MOVLB  0
043E6:  CALL   2852
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
043EA:  MOVFF  BA9,BC3
043EE:  MOVFF  BA8,BC2
043F2:  MOVFF  BA7,BC1
043F6:  MOVFF  BA6,BC0
043FA:  MOVLW  0B
043FC:  MOVLB  B
043FE:  MOVWF  xC5
04400:  MOVLW  B4
04402:  MOVWF  xC4
04404:  CLRF   xC7
04406:  MOVLW  05
04408:  MOVWF  xC6
0440A:  MOVLB  0
0440C:  CALL   3970
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04410:  MOVFF  BA8,BC6
04414:  MOVLW  01
04416:  MOVLB  B
04418:  MOVWF  xC7
0441A:  MOVLW  0F
0441C:  MOVWF  xC9
0441E:  MOVLW  89
04420:  MOVWF  xC8
04422:  MOVLB  0
04424:  CALL   2852
04428:  MOVFF  BA8,BC6
0442C:  MOVLB  B
0442E:  CLRF   xC7
04430:  MOVLW  0F
04432:  MOVWF  xC9
04434:  MOVLW  92
04436:  MOVWF  xC8
04438:  MOVLB  0
0443A:  CALL   2852
....................    }
0443E:  GOTO   4442
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
04442:  MOVLB  B
04444:  CLRF   xB9
04446:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
04448:  MOVFF  BA9,BC3
0444C:  MOVFF  BA8,BC2
04450:  MOVFF  BA7,BC1
04454:  MOVFF  BA6,BC0
04458:  CALL   3BDC
0445C:  MOVF   01,W
0445E:  ANDLW  01
04460:  SUBLW  01
04462:  BTFSS  FD8.2
04464:  GOTO   44B6
....................       if(timeout_counter > 10)
04468:  MOVLB  B
0446A:  MOVF   xB9,W
0446C:  SUBLW  0A
0446E:  BTFSS  FD8.0
04470:  BRA    4478
04472:  MOVLB  0
04474:  GOTO   448A
04478:  MOVLB  0
....................          delay_ms(200);
0447A:  MOVLW  C8
0447C:  MOVLB  B
0447E:  MOVWF  xC0
04480:  MOVLB  0
04482:  CALL   2056
04486:  GOTO   4496
....................       else
....................          delay_ms(10);   
0448A:  MOVLW  0A
0448C:  MOVLB  B
0448E:  MOVWF  xC0
04490:  MOVLB  0
04492:  CALL   2056
....................       
....................       if(timeout_counter > 100){
04496:  MOVLB  B
04498:  MOVF   xB9,W
0449A:  SUBLW  64
0449C:  BTFSS  FD8.0
0449E:  BRA    44A6
044A0:  MOVLB  0
044A2:  GOTO   44AC
044A6:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
044A8:  GOTO   44B6
....................       }  
....................       timeout_counter++;
044AC:  MOVLB  B
044AE:  INCF   xB9,F
044B0:  MOVLB  0
044B2:  GOTO   4448
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
044B6:  RETURN 0
.................... }
....................  
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x __ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 __ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 __ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 __
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
057FA:  MOVLB  3
057FC:  MOVF   x21,F
057FE:  BTFSC  FD8.2
05800:  BRA    5808
05802:  MOVLB  0
05804:  GOTO   5960
05808:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
0580A:  MOVLW  06
0580C:  MOVLB  3
0580E:  MOVWF  x28
05810:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
05812:  MOVLW  20
05814:  MOVLB  3
05816:  MOVWF  x29
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
05818:  MOVFF  326,335
0581C:  MOVFF  327,336
05820:  CLRF   x37
05822:  CLRF   x38
05824:  MOVF   x35,W
05826:  MOVWF  00
05828:  CLRF   01
0582A:  CLRF   02
0582C:  CLRF   03
0582E:  MOVFF  00,32A
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
05832:  MOVFF  325,335
05836:  MOVFF  326,336
0583A:  MOVFF  327,337
0583E:  CLRF   x38
05840:  MOVF   x35,W
05842:  MOVWF  00
05844:  CLRF   01
05846:  CLRF   02
05848:  CLRF   03
0584A:  MOVFF  00,32B
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
0584E:  MOVF   x24,W
05850:  MOVWF  00
05852:  CLRF   01
05854:  CLRF   02
05856:  CLRF   03
05858:  MOVFF  00,32C
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
0585C:  MOVFF  322,BC6
05860:  MOVLB  B
05862:  CLRF   xC7
05864:  MOVLW  0F
05866:  MOVWF  xC9
05868:  MOVLW  89
0586A:  MOVWF  xC8
0586C:  MOVLB  0
0586E:  CALL   2852
05872:  MOVFF  322,BC6
05876:  MOVLB  B
05878:  CLRF   xC7
0587A:  MOVLW  0F
0587C:  MOVWF  xC9
0587E:  MOVLW  92
05880:  MOVWF  xC8
05882:  MOVLB  0
05884:  CALL   2852
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
05888:  MOVFF  323,BC3
0588C:  MOVFF  322,BC2
05890:  MOVFF  321,BC1
05894:  MOVFF  320,BC0
05898:  MOVLW  03
0589A:  MOVLB  B
0589C:  MOVWF  xC5
0589E:  MOVLW  28
058A0:  MOVWF  xC4
058A2:  CLRF   xC7
058A4:  MOVLW  01
058A6:  MOVWF  xC6
058A8:  MOVLB  0
058AA:  CALL   3970
....................       output_high(flash_stream.cs_pin);
058AE:  MOVFF  322,BC6
058B2:  MOVLW  01
058B4:  MOVLB  B
058B6:  MOVWF  xC7
058B8:  MOVLW  0F
058BA:  MOVWF  xC9
058BC:  MOVLW  89
058BE:  MOVWF  xC8
058C0:  MOVLB  0
058C2:  CALL   2852
058C6:  MOVFF  322,BC6
058CA:  MOVLB  B
058CC:  CLRF   xC7
058CE:  MOVLW  0F
058D0:  MOVWF  xC9
058D2:  MOVLW  92
058D4:  MOVWF  xC8
058D6:  MOVLB  0
058D8:  CALL   2852
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
058DC:  MOVFF  322,BC6
058E0:  MOVLB  B
058E2:  CLRF   xC7
058E4:  MOVLW  0F
058E6:  MOVWF  xC9
058E8:  MOVLW  89
058EA:  MOVWF  xC8
058EC:  MOVLB  0
058EE:  CALL   2852
058F2:  MOVFF  322,BC6
058F6:  MOVLB  B
058F8:  CLRF   xC7
058FA:  MOVLW  0F
058FC:  MOVWF  xC9
058FE:  MOVLW  92
05900:  MOVWF  xC8
05902:  MOVLB  0
05904:  CALL   2852
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
05908:  MOVFF  323,BC3
0590C:  MOVFF  322,BC2
05910:  MOVFF  321,BC1
05914:  MOVFF  320,BC0
05918:  MOVLW  03
0591A:  MOVLB  B
0591C:  MOVWF  xC5
0591E:  MOVLW  29
05920:  MOVWF  xC4
05922:  CLRF   xC7
05924:  MOVLW  04
05926:  MOVWF  xC6
05928:  MOVLB  0
0592A:  CALL   3970
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0592E:  MOVFF  322,BC6
05932:  MOVLW  01
05934:  MOVLB  B
05936:  MOVWF  xC7
05938:  MOVLW  0F
0593A:  MOVWF  xC9
0593C:  MOVLW  89
0593E:  MOVWF  xC8
05940:  MOVLB  0
05942:  CALL   2852
05946:  MOVFF  322,BC6
0594A:  MOVLB  B
0594C:  CLRF   xC7
0594E:  MOVLW  0F
05950:  MOVWF  xC9
05952:  MOVLW  92
05954:  MOVWF  xC8
05956:  MOVLB  0
05958:  CALL   2852
....................    }
0595C:  GOTO   5AE0
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
05960:  MOVLB  3
05962:  DECFSZ x21,W
05964:  BRA    596A
05966:  BRA    5970
05968:  MOVLB  0
0596A:  MOVLB  0
0596C:  GOTO   5AE0
05970:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
05972:  MOVLW  06
05974:  MOVLB  3
05976:  MOVWF  x2D
05978:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
0597A:  MOVLW  21
0597C:  MOVLB  3
0597E:  MOVWF  x2E
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
05980:  MOVFF  327,335
05984:  CLRF   x36
05986:  CLRF   x37
05988:  CLRF   x38
0598A:  MOVF   x35,W
0598C:  MOVWF  00
0598E:  CLRF   01
05990:  CLRF   02
05992:  CLRF   03
05994:  MOVFF  00,32F
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
05998:  MOVFF  326,335
0599C:  MOVFF  327,336
059A0:  CLRF   x37
059A2:  CLRF   x38
059A4:  MOVF   x35,W
059A6:  MOVWF  00
059A8:  CLRF   01
059AA:  CLRF   02
059AC:  CLRF   03
059AE:  MOVFF  00,330
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
059B2:  MOVFF  325,335
059B6:  MOVFF  326,336
059BA:  MOVFF  327,337
059BE:  CLRF   x38
059C0:  MOVF   x35,W
059C2:  MOVWF  00
059C4:  CLRF   01
059C6:  CLRF   02
059C8:  CLRF   03
059CA:  MOVFF  00,331
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
059CE:  MOVF   x24,W
059D0:  MOVWF  00
059D2:  CLRF   01
059D4:  CLRF   02
059D6:  CLRF   03
059D8:  MOVFF  00,332
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
059DC:  MOVFF  322,BC6
059E0:  MOVLB  B
059E2:  CLRF   xC7
059E4:  MOVLW  0F
059E6:  MOVWF  xC9
059E8:  MOVLW  89
059EA:  MOVWF  xC8
059EC:  MOVLB  0
059EE:  CALL   2852
059F2:  MOVFF  322,BC6
059F6:  MOVLB  B
059F8:  CLRF   xC7
059FA:  MOVLW  0F
059FC:  MOVWF  xC9
059FE:  MOVLW  92
05A00:  MOVWF  xC8
05A02:  MOVLB  0
05A04:  CALL   2852
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
05A08:  MOVFF  323,BC3
05A0C:  MOVFF  322,BC2
05A10:  MOVFF  321,BC1
05A14:  MOVFF  320,BC0
05A18:  MOVLW  03
05A1A:  MOVLB  B
05A1C:  MOVWF  xC5
05A1E:  MOVLW  2D
05A20:  MOVWF  xC4
05A22:  CLRF   xC7
05A24:  MOVLW  01
05A26:  MOVWF  xC6
05A28:  MOVLB  0
05A2A:  CALL   3970
....................       output_high(flash_stream.cs_pin);
05A2E:  MOVFF  322,BC6
05A32:  MOVLW  01
05A34:  MOVLB  B
05A36:  MOVWF  xC7
05A38:  MOVLW  0F
05A3A:  MOVWF  xC9
05A3C:  MOVLW  89
05A3E:  MOVWF  xC8
05A40:  MOVLB  0
05A42:  CALL   2852
05A46:  MOVFF  322,BC6
05A4A:  MOVLB  B
05A4C:  CLRF   xC7
05A4E:  MOVLW  0F
05A50:  MOVWF  xC9
05A52:  MOVLW  92
05A54:  MOVWF  xC8
05A56:  MOVLB  0
05A58:  CALL   2852
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
05A5C:  MOVFF  322,BC6
05A60:  MOVLB  B
05A62:  CLRF   xC7
05A64:  MOVLW  0F
05A66:  MOVWF  xC9
05A68:  MOVLW  89
05A6A:  MOVWF  xC8
05A6C:  MOVLB  0
05A6E:  CALL   2852
05A72:  MOVFF  322,BC6
05A76:  MOVLB  B
05A78:  CLRF   xC7
05A7A:  MOVLW  0F
05A7C:  MOVWF  xC9
05A7E:  MOVLW  92
05A80:  MOVWF  xC8
05A82:  MOVLB  0
05A84:  CALL   2852
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
05A88:  MOVFF  323,BC3
05A8C:  MOVFF  322,BC2
05A90:  MOVFF  321,BC1
05A94:  MOVFF  320,BC0
05A98:  MOVLW  03
05A9A:  MOVLB  B
05A9C:  MOVWF  xC5
05A9E:  MOVLW  2E
05AA0:  MOVWF  xC4
05AA2:  CLRF   xC7
05AA4:  MOVLW  05
05AA6:  MOVWF  xC6
05AA8:  MOVLB  0
05AAA:  CALL   3970
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
05AAE:  MOVFF  322,BC6
05AB2:  MOVLW  01
05AB4:  MOVLB  B
05AB6:  MOVWF  xC7
05AB8:  MOVLW  0F
05ABA:  MOVWF  xC9
05ABC:  MOVLW  89
05ABE:  MOVWF  xC8
05AC0:  MOVLB  0
05AC2:  CALL   2852
05AC6:  MOVFF  322,BC6
05ACA:  MOVLB  B
05ACC:  CLRF   xC7
05ACE:  MOVLW  0F
05AD0:  MOVWF  xC9
05AD2:  MOVLW  92
05AD4:  MOVWF  xC8
05AD6:  MOVLB  0
05AD8:  CALL   2852
....................    }
05ADC:  GOTO   5AE0
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
05AE0:  MOVLB  3
05AE2:  CLRF   x33
05AE4:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
05AE6:  MOVFF  323,BC3
05AEA:  MOVFF  322,BC2
05AEE:  MOVFF  321,BC1
05AF2:  MOVFF  320,BC0
05AF6:  CALL   3BDC
05AFA:  MOVF   01,W
05AFC:  ANDLW  01
05AFE:  SUBLW  01
05B00:  BTFSS  FD8.2
05B02:  GOTO   5B54
....................       if(timeout_counter > 10)
05B06:  MOVLB  3
05B08:  MOVF   x33,W
05B0A:  SUBLW  0A
05B0C:  BTFSS  FD8.0
05B0E:  BRA    5B16
05B10:  MOVLB  0
05B12:  GOTO   5B28
05B16:  MOVLB  0
....................          delay_ms(200);
05B18:  MOVLW  C8
05B1A:  MOVLB  B
05B1C:  MOVWF  xC0
05B1E:  MOVLB  0
05B20:  CALL   2056
05B24:  GOTO   5B34
....................       else
....................          delay_ms(10);   
05B28:  MOVLW  0A
05B2A:  MOVLB  B
05B2C:  MOVWF  xC0
05B2E:  MOVLB  0
05B30:  CALL   2056
....................       
....................       if(timeout_counter > 100){
05B34:  MOVLB  3
05B36:  MOVF   x33,W
05B38:  SUBLW  64
05B3A:  BTFSS  FD8.0
05B3C:  BRA    5B44
05B3E:  MOVLB  0
05B40:  GOTO   5B4A
05B44:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
05B46:  GOTO   5B54
....................       }  
....................       timeout_counter++;
05B4A:  MOVLB  3
05B4C:  INCF   x33,F
05B4E:  MOVLB  0
05B50:  GOTO   5AE6
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
05B54:  RETURN 0
.................... }
....................  
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address)
.................... {
....................    unsigned int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................    
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    return read_data;
.................... }
....................  
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
02C86:  MOVLB  B
02C88:  MOVF   x65,F
02C8A:  BTFSC  FD8.2
02C8C:  BRA    2C94
02C8E:  MOVLB  0
02C90:  GOTO   2D84
02C94:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
02C96:  MOVLW  03
02C98:  MOVLB  B
02C9A:  MOVWF  x72
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02C9C:  MOVFF  B6A,B7C
02CA0:  MOVFF  B6B,B7D
02CA4:  CLRF   x7E
02CA6:  CLRF   x7F
02CA8:  MOVF   x7C,W
02CAA:  MOVWF  00
02CAC:  CLRF   01
02CAE:  CLRF   02
02CB0:  CLRF   03
02CB2:  MOVFF  00,B73
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02CB6:  MOVFF  B69,B7C
02CBA:  MOVFF  B6A,B7D
02CBE:  MOVFF  B6B,B7E
02CC2:  CLRF   x7F
02CC4:  MOVF   x7C,W
02CC6:  MOVWF  00
02CC8:  CLRF   01
02CCA:  CLRF   02
02CCC:  CLRF   03
02CCE:  MOVFF  00,B74
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02CD2:  MOVF   x68,W
02CD4:  MOVWF  00
02CD6:  CLRF   01
02CD8:  CLRF   02
02CDA:  CLRF   03
02CDC:  MOVFF  00,B75
....................             
....................       output_low(flash_stream.cs_pin);
02CE0:  MOVFF  B66,BC6
02CE4:  CLRF   xC7
02CE6:  MOVLW  0F
02CE8:  MOVWF  xC9
02CEA:  MOVLW  89
02CEC:  MOVWF  xC8
02CEE:  MOVLB  0
02CF0:  CALL   2852
02CF4:  MOVFF  B66,BC6
02CF8:  MOVLB  B
02CFA:  CLRF   xC7
02CFC:  MOVLW  0F
02CFE:  MOVWF  xC9
02D00:  MOVLW  92
02D02:  MOVWF  xC8
02D04:  MOVLB  0
02D06:  CALL   2852
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
02D0A:  MOVFF  B67,BC9
02D0E:  MOVFF  B66,BC8
02D12:  MOVFF  B65,BC7
02D16:  MOVFF  B64,BC6
02D1A:  MOVLW  0B
02D1C:  MOVLB  B
02D1E:  MOVWF  xCB
02D20:  MOVLW  72
02D22:  MOVWF  xCA
02D24:  CLRF   xCD
02D26:  MOVLW  04
02D28:  MOVWF  xCC
02D2A:  MOVFF  B6D,BCF
02D2E:  MOVFF  B6C,BCE
02D32:  MOVFF  B71,BD3
02D36:  MOVFF  B70,BD2
02D3A:  MOVFF  B6F,BD1
02D3E:  MOVFF  B6E,BD0
02D42:  MOVLB  0
02D44:  CALL   2966
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
02D48:  MOVLW  02
02D4A:  MOVWF  00
02D4C:  DECFSZ 00,F
02D4E:  BRA    2D4C
02D50:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02D52:  MOVFF  B66,BC6
02D56:  MOVLW  01
02D58:  MOVLB  B
02D5A:  MOVWF  xC7
02D5C:  MOVLW  0F
02D5E:  MOVWF  xC9
02D60:  MOVLW  89
02D62:  MOVWF  xC8
02D64:  MOVLB  0
02D66:  CALL   2852
02D6A:  MOVFF  B66,BC6
02D6E:  MOVLB  B
02D70:  CLRF   xC7
02D72:  MOVLW  0F
02D74:  MOVWF  xC9
02D76:  MOVLW  92
02D78:  MOVWF  xC8
02D7A:  MOVLB  0
02D7C:  CALL   2852
....................    }
02D80:  GOTO   2E98
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
02D84:  MOVLB  B
02D86:  DECFSZ x65,W
02D88:  BRA    2D8E
02D8A:  BRA    2D94
02D8C:  MOVLB  0
02D8E:  MOVLB  0
02D90:  GOTO   2E98
02D94:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
02D96:  MOVLW  13
02D98:  MOVLB  B
02D9A:  MOVWF  x76
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
02D9C:  MOVFF  B6B,B7C
02DA0:  CLRF   x7D
02DA2:  CLRF   x7E
02DA4:  CLRF   x7F
02DA6:  MOVF   x7C,W
02DA8:  MOVWF  00
02DAA:  CLRF   01
02DAC:  CLRF   02
02DAE:  CLRF   03
02DB0:  MOVFF  00,B77
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02DB4:  MOVFF  B6A,B7C
02DB8:  MOVFF  B6B,B7D
02DBC:  CLRF   x7E
02DBE:  CLRF   x7F
02DC0:  MOVF   x7C,W
02DC2:  MOVWF  00
02DC4:  CLRF   01
02DC6:  CLRF   02
02DC8:  CLRF   03
02DCA:  MOVFF  00,B78
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02DCE:  MOVFF  B69,B7C
02DD2:  MOVFF  B6A,B7D
02DD6:  MOVFF  B6B,B7E
02DDA:  CLRF   x7F
02DDC:  MOVF   x7C,W
02DDE:  MOVWF  00
02DE0:  CLRF   01
02DE2:  CLRF   02
02DE4:  CLRF   03
02DE6:  MOVFF  00,B79
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02DEA:  MOVF   x68,W
02DEC:  MOVWF  00
02DEE:  CLRF   01
02DF0:  CLRF   02
02DF2:  CLRF   03
02DF4:  MOVFF  00,B7A
....................    
....................       output_low(flash_stream.cs_pin);
02DF8:  MOVFF  B66,BC6
02DFC:  CLRF   xC7
02DFE:  MOVLW  0F
02E00:  MOVWF  xC9
02E02:  MOVLW  89
02E04:  MOVWF  xC8
02E06:  MOVLB  0
02E08:  CALL   2852
02E0C:  MOVFF  B66,BC6
02E10:  MOVLB  B
02E12:  CLRF   xC7
02E14:  MOVLW  0F
02E16:  MOVWF  xC9
02E18:  MOVLW  92
02E1A:  MOVWF  xC8
02E1C:  MOVLB  0
02E1E:  CALL   2852
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
02E22:  MOVFF  B67,BC9
02E26:  MOVFF  B66,BC8
02E2A:  MOVFF  B65,BC7
02E2E:  MOVFF  B64,BC6
02E32:  MOVLW  0B
02E34:  MOVLB  B
02E36:  MOVWF  xCB
02E38:  MOVLW  76
02E3A:  MOVWF  xCA
02E3C:  CLRF   xCD
02E3E:  MOVLW  05
02E40:  MOVWF  xCC
02E42:  MOVFF  B6D,BCF
02E46:  MOVFF  B6C,BCE
02E4A:  MOVFF  B71,BD3
02E4E:  MOVFF  B70,BD2
02E52:  MOVFF  B6F,BD1
02E56:  MOVFF  B6E,BD0
02E5A:  MOVLB  0
02E5C:  CALL   2966
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
02E60:  MOVLW  02
02E62:  MOVWF  00
02E64:  DECFSZ 00,F
02E66:  BRA    2E64
02E68:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02E6A:  MOVFF  B66,BC6
02E6E:  MOVLW  01
02E70:  MOVLB  B
02E72:  MOVWF  xC7
02E74:  MOVLW  0F
02E76:  MOVWF  xC9
02E78:  MOVLW  89
02E7A:  MOVWF  xC8
02E7C:  MOVLB  0
02E7E:  CALL   2852
02E82:  MOVFF  B66,BC6
02E86:  MOVLB  B
02E88:  CLRF   xC7
02E8A:  MOVLW  0F
02E8C:  MOVWF  xC9
02E8E:  MOVLW  92
02E90:  MOVWF  xC8
02E92:  MOVLB  0
02E94:  CALL   2852
....................    }
....................    return;
02E98:  RETURN 0
.................... }
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
....................       flash_cmd[4] = write_data;
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
....................       flash_cmd[5] = write_data;
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
03C7C:  MOVLB  B
03C7E:  MOVF   xA9,F
03C80:  BTFSC  FD8.2
03C82:  BRA    3C8A
03C84:  MOVLB  0
03C86:  GOTO   3DF8
03C8A:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
03C8C:  MOVLW  06
03C8E:  MOVLB  B
03C90:  MOVWF  xB4
03C92:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
03C94:  MOVLW  02
03C96:  MOVLB  B
03C98:  MOVWF  xB5
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03C9A:  MOVFF  BAE,BC1
03C9E:  MOVFF  BAF,BC2
03CA2:  CLRF   xC3
03CA4:  CLRF   xC4
03CA6:  MOVF   xC1,W
03CA8:  MOVWF  00
03CAA:  CLRF   01
03CAC:  CLRF   02
03CAE:  CLRF   03
03CB0:  MOVFF  00,BB6
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03CB4:  MOVFF  BAD,BC1
03CB8:  MOVFF  BAE,BC2
03CBC:  MOVFF  BAF,BC3
03CC0:  CLRF   xC4
03CC2:  MOVF   xC1,W
03CC4:  MOVWF  00
03CC6:  CLRF   01
03CC8:  CLRF   02
03CCA:  CLRF   03
03CCC:  MOVFF  00,BB7
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
03CD0:  MOVF   xAC,W
03CD2:  MOVWF  00
03CD4:  CLRF   01
03CD6:  CLRF   02
03CD8:  CLRF   03
03CDA:  MOVFF  00,BB8
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03CDE:  MOVFF  BAA,BC6
03CE2:  CLRF   xC7
03CE4:  MOVLW  0F
03CE6:  MOVWF  xC9
03CE8:  MOVLW  89
03CEA:  MOVWF  xC8
03CEC:  MOVLB  0
03CEE:  CALL   2852
03CF2:  MOVFF  BAA,BC6
03CF6:  MOVLB  B
03CF8:  CLRF   xC7
03CFA:  MOVLW  0F
03CFC:  MOVWF  xC9
03CFE:  MOVLW  92
03D00:  MOVWF  xC8
03D02:  MOVLB  0
03D04:  CALL   2852
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03D08:  MOVFF  BAB,BC3
03D0C:  MOVFF  BAA,BC2
03D10:  MOVFF  BA9,BC1
03D14:  MOVFF  BA8,BC0
03D18:  MOVLW  0B
03D1A:  MOVLB  B
03D1C:  MOVWF  xC5
03D1E:  MOVLW  B4
03D20:  MOVWF  xC4
03D22:  CLRF   xC7
03D24:  MOVLW  01
03D26:  MOVWF  xC6
03D28:  MOVLB  0
03D2A:  CALL   3970
....................       output_high(flash_stream.cs_pin);
03D2E:  MOVFF  BAA,BC6
03D32:  MOVLW  01
03D34:  MOVLB  B
03D36:  MOVWF  xC7
03D38:  MOVLW  0F
03D3A:  MOVWF  xC9
03D3C:  MOVLW  89
03D3E:  MOVWF  xC8
03D40:  MOVLB  0
03D42:  CALL   2852
03D46:  MOVFF  BAA,BC6
03D4A:  MOVLB  B
03D4C:  CLRF   xC7
03D4E:  MOVLW  0F
03D50:  MOVWF  xC9
03D52:  MOVLW  92
03D54:  MOVWF  xC8
03D56:  MOVLB  0
03D58:  CALL   2852
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
03D5C:  MOVFF  BAA,BC6
03D60:  MOVLB  B
03D62:  CLRF   xC7
03D64:  MOVLW  0F
03D66:  MOVWF  xC9
03D68:  MOVLW  89
03D6A:  MOVWF  xC8
03D6C:  MOVLB  0
03D6E:  CALL   2852
03D72:  MOVFF  BAA,BC6
03D76:  MOVLB  B
03D78:  CLRF   xC7
03D7A:  MOVLW  0F
03D7C:  MOVWF  xC9
03D7E:  MOVLW  92
03D80:  MOVWF  xC8
03D82:  MOVLB  0
03D84:  CALL   2852
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
03D88:  MOVFF  BAB,BC3
03D8C:  MOVFF  BAA,BC2
03D90:  MOVFF  BA9,BC1
03D94:  MOVFF  BA8,BC0
03D98:  MOVLW  0B
03D9A:  MOVLB  B
03D9C:  MOVWF  xC5
03D9E:  MOVLW  B5
03DA0:  MOVWF  xC4
03DA2:  MOVLW  04
03DA4:  MOVWF  xC6
03DA6:  MOVFF  BB1,BC8
03DAA:  MOVFF  BB0,BC7
03DAE:  MOVFF  BB3,BCA
03DB2:  MOVFF  BB2,BC9
03DB6:  MOVLB  0
03DB8:  CALL   3A60
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
03DBC:  MOVLW  02
03DBE:  MOVWF  00
03DC0:  DECFSZ 00,F
03DC2:  BRA    3DC0
03DC4:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03DC6:  MOVFF  BAA,BC6
03DCA:  MOVLW  01
03DCC:  MOVLB  B
03DCE:  MOVWF  xC7
03DD0:  MOVLW  0F
03DD2:  MOVWF  xC9
03DD4:  MOVLW  89
03DD6:  MOVWF  xC8
03DD8:  MOVLB  0
03DDA:  CALL   2852
03DDE:  MOVFF  BAA,BC6
03DE2:  MOVLB  B
03DE4:  CLRF   xC7
03DE6:  MOVLW  0F
03DE8:  MOVWF  xC9
03DEA:  MOVLW  92
03DEC:  MOVWF  xC8
03DEE:  MOVLB  0
03DF0:  CALL   2852
....................    }
03DF4:  GOTO   3F8A
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
03DF8:  MOVLB  B
03DFA:  DECFSZ xA9,W
03DFC:  BRA    3E02
03DFE:  BRA    3E08
03E00:  MOVLB  0
03E02:  MOVLB  0
03E04:  GOTO   3F8A
03E08:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
03E0A:  MOVLW  06
03E0C:  MOVLB  B
03E0E:  MOVWF  xB9
03E10:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
03E12:  MOVLW  12
03E14:  MOVLB  B
03E16:  MOVWF  xBA
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
03E18:  MOVFF  BAF,BC1
03E1C:  CLRF   xC2
03E1E:  CLRF   xC3
03E20:  CLRF   xC4
03E22:  MOVF   xC1,W
03E24:  MOVWF  00
03E26:  CLRF   01
03E28:  CLRF   02
03E2A:  CLRF   03
03E2C:  MOVFF  00,BBB
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03E30:  MOVFF  BAE,BC1
03E34:  MOVFF  BAF,BC2
03E38:  CLRF   xC3
03E3A:  CLRF   xC4
03E3C:  MOVF   xC1,W
03E3E:  MOVWF  00
03E40:  CLRF   01
03E42:  CLRF   02
03E44:  CLRF   03
03E46:  MOVFF  00,BBC
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03E4A:  MOVFF  BAD,BC1
03E4E:  MOVFF  BAE,BC2
03E52:  MOVFF  BAF,BC3
03E56:  CLRF   xC4
03E58:  MOVF   xC1,W
03E5A:  MOVWF  00
03E5C:  CLRF   01
03E5E:  CLRF   02
03E60:  CLRF   03
03E62:  MOVFF  00,BBD
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
03E66:  MOVF   xAC,W
03E68:  MOVWF  00
03E6A:  CLRF   01
03E6C:  CLRF   02
03E6E:  CLRF   03
03E70:  MOVFF  00,BBE
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03E74:  MOVFF  BAA,BC6
03E78:  CLRF   xC7
03E7A:  MOVLW  0F
03E7C:  MOVWF  xC9
03E7E:  MOVLW  89
03E80:  MOVWF  xC8
03E82:  MOVLB  0
03E84:  CALL   2852
03E88:  MOVFF  BAA,BC6
03E8C:  MOVLB  B
03E8E:  CLRF   xC7
03E90:  MOVLW  0F
03E92:  MOVWF  xC9
03E94:  MOVLW  92
03E96:  MOVWF  xC8
03E98:  MOVLB  0
03E9A:  CALL   2852
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03E9E:  MOVFF  BAB,BC3
03EA2:  MOVFF  BAA,BC2
03EA6:  MOVFF  BA9,BC1
03EAA:  MOVFF  BA8,BC0
03EAE:  MOVLW  0B
03EB0:  MOVLB  B
03EB2:  MOVWF  xC5
03EB4:  MOVLW  B9
03EB6:  MOVWF  xC4
03EB8:  CLRF   xC7
03EBA:  MOVLW  01
03EBC:  MOVWF  xC6
03EBE:  MOVLB  0
03EC0:  CALL   3970
....................       output_high(flash_stream.cs_pin);
03EC4:  MOVFF  BAA,BC6
03EC8:  MOVLW  01
03ECA:  MOVLB  B
03ECC:  MOVWF  xC7
03ECE:  MOVLW  0F
03ED0:  MOVWF  xC9
03ED2:  MOVLW  89
03ED4:  MOVWF  xC8
03ED6:  MOVLB  0
03ED8:  CALL   2852
03EDC:  MOVFF  BAA,BC6
03EE0:  MOVLB  B
03EE2:  CLRF   xC7
03EE4:  MOVLW  0F
03EE6:  MOVWF  xC9
03EE8:  MOVLW  92
03EEA:  MOVWF  xC8
03EEC:  MOVLB  0
03EEE:  CALL   2852
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
03EF2:  MOVFF  BAA,BC6
03EF6:  MOVLB  B
03EF8:  CLRF   xC7
03EFA:  MOVLW  0F
03EFC:  MOVWF  xC9
03EFE:  MOVLW  89
03F00:  MOVWF  xC8
03F02:  MOVLB  0
03F04:  CALL   2852
03F08:  MOVFF  BAA,BC6
03F0C:  MOVLB  B
03F0E:  CLRF   xC7
03F10:  MOVLW  0F
03F12:  MOVWF  xC9
03F14:  MOVLW  92
03F16:  MOVWF  xC8
03F18:  MOVLB  0
03F1A:  CALL   2852
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
03F1E:  MOVFF  BAB,BC3
03F22:  MOVFF  BAA,BC2
03F26:  MOVFF  BA9,BC1
03F2A:  MOVFF  BA8,BC0
03F2E:  MOVLW  0B
03F30:  MOVLB  B
03F32:  MOVWF  xC5
03F34:  MOVLW  BA
03F36:  MOVWF  xC4
03F38:  MOVLW  05
03F3A:  MOVWF  xC6
03F3C:  MOVFF  BB1,BC8
03F40:  MOVFF  BB0,BC7
03F44:  MOVFF  BB3,BCA
03F48:  MOVFF  BB2,BC9
03F4C:  MOVLB  0
03F4E:  CALL   3A60
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
03F52:  MOVLW  02
03F54:  MOVWF  00
03F56:  DECFSZ 00,F
03F58:  BRA    3F56
03F5A:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03F5C:  MOVFF  BAA,BC6
03F60:  MOVLW  01
03F62:  MOVLB  B
03F64:  MOVWF  xC7
03F66:  MOVLW  0F
03F68:  MOVWF  xC9
03F6A:  MOVLW  89
03F6C:  MOVWF  xC8
03F6E:  MOVLB  0
03F70:  CALL   2852
03F74:  MOVFF  BAA,BC6
03F78:  MOVLB  B
03F7A:  CLRF   xC7
03F7C:  MOVLW  0F
03F7E:  MOVWF  xC9
03F80:  MOVLW  92
03F82:  MOVWF  xC8
03F84:  MOVLB  0
03F86:  CALL   2852
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
03F8A:  MOVLB  B
03F8C:  CLRF   xBF
03F8E:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
03F90:  MOVFF  BAB,BC3
03F94:  MOVFF  BAA,BC2
03F98:  MOVFF  BA9,BC1
03F9C:  MOVFF  BA8,BC0
03FA0:  CALL   3BDC
03FA4:  MOVF   01,W
03FA6:  ANDLW  01
03FA8:  SUBLW  01
03FAA:  BTFSS  FD8.2
03FAC:  GOTO   3FFE
....................       if(timeout_counter > 10)
03FB0:  MOVLB  B
03FB2:  MOVF   xBF,W
03FB4:  SUBLW  0A
03FB6:  BTFSS  FD8.0
03FB8:  BRA    3FC0
03FBA:  MOVLB  0
03FBC:  GOTO   3FD2
03FC0:  MOVLB  0
....................          delay_ms(200);
03FC2:  MOVLW  C8
03FC4:  MOVLB  B
03FC6:  MOVWF  xC0
03FC8:  MOVLB  0
03FCA:  CALL   2056
03FCE:  GOTO   3FDE
....................       else
....................          delay_ms(10);   
03FD2:  MOVLW  0A
03FD4:  MOVLB  B
03FD6:  MOVWF  xC0
03FD8:  MOVLB  0
03FDA:  CALL   2056
....................       
....................       if(timeout_counter > 100){
03FDE:  MOVLB  B
03FE0:  MOVF   xBF,W
03FE2:  SUBLW  64
03FE4:  BTFSS  FD8.0
03FE6:  BRA    3FEE
03FE8:  MOVLB  0
03FEA:  GOTO   3FF4
03FEE:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
03FF0:  GOTO   3FFE
....................       }  
....................       timeout_counter++;
03FF4:  MOVLB  B
03FF6:  INCF   xBF,F
03FF8:  MOVLB  0
03FFA:  GOTO   3F90
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
03FFE:  RETURN 0
.................... }
.................... 
....................  
.................... int1 is_connect(Flash flash_stream){
*
02B9A:  MOVLW  9F
02B9C:  MOVLB  2
02B9E:  MOVWF  xF1
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
02BA0:  MOVFF  2DB,BC6
02BA4:  MOVLB  B
02BA6:  CLRF   xC7
02BA8:  MOVLW  0F
02BAA:  MOVWF  xC9
02BAC:  MOVLW  89
02BAE:  MOVWF  xC8
02BB0:  MOVLB  0
02BB2:  CALL   2852
02BB6:  MOVFF  2DB,BC6
02BBA:  MOVLB  B
02BBC:  CLRF   xC7
02BBE:  MOVLW  0F
02BC0:  MOVWF  xC9
02BC2:  MOVLW  92
02BC4:  MOVWF  xC8
02BC6:  MOVLB  0
02BC8:  CALL   2852
....................    delay_us(10);  
02BCC:  MOVLW  0D
02BCE:  MOVWF  00
02BD0:  DECFSZ 00,F
02BD2:  BRA    2BD0
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
02BD4:  MOVFF  2DC,BC9
02BD8:  MOVFF  2DB,BC8
02BDC:  MOVFF  2DA,BC7
02BE0:  MOVFF  2D9,BC6
02BE4:  MOVLW  02
02BE6:  MOVLB  B
02BE8:  MOVWF  xCB
02BEA:  MOVLW  F1
02BEC:  MOVWF  xCA
02BEE:  CLRF   xCD
02BF0:  MOVLW  01
02BF2:  MOVWF  xCC
02BF4:  MOVLW  02
02BF6:  MOVWF  xCF
02BF8:  MOVLW  DD
02BFA:  MOVWF  xCE
02BFC:  CLRF   xD3
02BFE:  CLRF   xD2
02C00:  CLRF   xD1
02C02:  MOVLW  14
02C04:  MOVWF  xD0
02C06:  MOVLB  0
02C08:  CALL   2966
....................    output_high(flash_stream.cs_pin);
02C0C:  MOVFF  2DB,BC6
02C10:  MOVLW  01
02C12:  MOVLB  B
02C14:  MOVWF  xC7
02C16:  MOVLW  0F
02C18:  MOVWF  xC9
02C1A:  MOVLW  89
02C1C:  MOVWF  xC8
02C1E:  MOVLB  0
02C20:  CALL   2852
02C24:  MOVFF  2DB,BC6
02C28:  MOVLB  B
02C2A:  CLRF   xC7
02C2C:  MOVLW  0F
02C2E:  MOVWF  xC9
02C30:  MOVLW  92
02C32:  MOVWF  xC8
02C34:  MOVLB  0
02C36:  CALL   2852
....................    //fprintf(PC,"Read ID:%02X", read_id_data.fields.manufacturer_id);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
02C3A:  MOVLB  2
02C3C:  MOVF   xDD,W
02C3E:  SUBLW  20
02C40:  BTFSC  FD8.2
02C42:  BRA    2C4A
02C44:  MOVLB  0
02C46:  GOTO   2C58
02C4A:  MOVLB  0
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
02C4C:  MOVLW  01
02C4E:  MOVWF  01
02C50:  GOTO   2C60
....................    }
02C54:  GOTO   2C60
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
02C58:  MOVLW  00
02C5A:  MOVWF  01
02C5C:  GOTO   2C60
....................    }
02C60:  RETURN 0
.................... }
.................... 
.................... #include "../lib/tool/calc_tools.c"
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size)
.................... {
....................    if (payload_size <= 0) return 0;
*
02E9A:  MOVLB  B
02E9C:  MOVF   xF4,F
02E9E:  BTFSC  FD8.2
02EA0:  BRA    2EA8
02EA2:  MOVLB  0
02EA4:  GOTO   2EB2
02EA8:  MOVLB  0
02EAA:  MOVLW  00
02EAC:  MOVWF  01
02EAE:  GOTO   2F04
.................... 
....................    unsigned int8 crc = *frame++;
02EB2:  MOVLB  B
02EB4:  MOVF   xF3,W
02EB6:  MOVWF  03
02EB8:  MOVF   xF2,W
02EBA:  INCF   xF2,F
02EBC:  BTFSC  FD8.2
02EBE:  INCF   xF3,F
02EC0:  MOVWF  FE9
02EC2:  MOVFF  03,FEA
02EC6:  MOVFF  FEF,BF5
02ECA:  MOVLB  0
....................    while (--payload_size > 0)
02ECC:  MOVLB  B
02ECE:  DECF   xF4,F
02ED0:  MOVF   xF4,F
02ED2:  BTFSS  FD8.2
02ED4:  BRA    2EDC
02ED6:  MOVLB  0
02ED8:  GOTO   2EFC
02EDC:  MOVLB  0
....................       crc ^= *frame++;
02EDE:  MOVLB  B
02EE0:  MOVF   xF3,W
02EE2:  MOVWF  03
02EE4:  MOVF   xF2,W
02EE6:  INCF   xF2,F
02EE8:  BTFSC  FD8.2
02EEA:  INCF   xF3,F
02EEC:  MOVWF  FE9
02EEE:  MOVFF  03,FEA
02EF2:  MOVF   FEF,W
02EF4:  XORWF  xF5,F
02EF6:  MOVLB  0
02EF8:  GOTO   2ECC
.................... 
....................    return crc;
02EFC:  MOVLB  B
02EFE:  MOVF   xF5,W
02F00:  MOVWF  01
02F02:  MOVLB  0
02F04:  RETURN 0
.................... }
.................... 
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size)
*
0F090:  MOVLW  01
0F092:  MOVLB  3
0F094:  SUBWF  x1F,W
0F096:  ADDWF  x1D,W
0F098:  MOVWF  FE9
0F09A:  MOVLW  00
0F09C:  ADDWFC x1E,W
0F09E:  MOVWF  FEA
0F0A0:  MOVFF  FEF,320
0F0A4:  MOVLW  01
0F0A6:  SUBWF  x1F,W
0F0A8:  MOVWF  x22
0F0AA:  MOVFF  31E,BF3
0F0AE:  MOVFF  31D,BF2
0F0B2:  MOVFF  322,BF4
0F0B6:  MOVLB  0
0F0B8:  CALL   2E9A
0F0BC:  MOVFF  01,321
.................... {
....................    unsigned int8 received_crc = frame[payload_size - 1]; // CRC is the last byte
....................    unsigned int8 calculated_crc = calc_crc8(frame, payload_size - 1);
....................    return (received_crc == calculated_crc);
0F0C0:  MOVLB  3
0F0C2:  MOVF   x21,W
0F0C4:  SUBWF  x20,W
0F0C6:  BTFSS  FD8.2
0F0C8:  BRA    F0D0
0F0CA:  MOVLB  0
0F0CC:  GOTO   F0D8
0F0D0:  MOVLB  0
0F0D2:  MOVLW  00
0F0D4:  GOTO   F0DA
0F0D8:  MOVLW  01
0F0DA:  MOVWF  01
0F0DC:  RETURN 0
.................... }
.................... 
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index)
.................... {
....................     buf[index + 0] = (int8)(value >> 24);   // MSB
....................     buf[index + 1] = (int8)(value >> 16);
....................     buf[index + 2] = (int8)(value >>  8);
....................     buf[index + 3] = (int8)(value      );   // LSB
.................... }
.................... 
.................... int32 lsb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] <<  0) |
....................            ((int32)buf[index + 1] <<  8) |
....................            ((int32)buf[index + 2] << 16) |
....................            ((int32)buf[index + 3] << 24);
.................... }
.................... 
.................... 
.................... int32 msb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] << 24) |
....................            ((int32)buf[index + 1] << 16) |
....................            ((int32)buf[index + 2] <<  8) |
....................            ((int32)buf[index + 3]);
.................... }
.................... 
.................... unsigned int32 int32_lsb_to_msb(unsigned int32 value)
.................... {
....................     return ((value & 0x000000FF) << 24) |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0xFF000000) >> 24);
.................... }
.................... 
.................... unsigned int32 int32_msb_to_lsb(unsigned int32 value)
.................... {
....................     return ((value & 0xFF000000) >> 24) |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x000000FF) << 24);
.................... }
.................... // End of file
.................... 
.................... #include "../lib/tool/smf_queue.c"
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x06AA1FFF
.................... #define CIGS_ENVIRO_START_ADDRESS 0x06AA2000
.................... #define CIGS_ENVIRO_END_ADDRESS 0x06B41FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS 0x06B42000
.................... #define CIGS_IV1_HEADER_END_ADDRESS 0x06BE1FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS 0x06BE2000
.................... #define CIGS_IV1_DATA_END_ADDRESS 0x06FE2FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS 0x06FE3000
.................... #define CIGS_IV2_HEADER_END_ADDRESS 0x07082FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS 0x07083000
.................... #define CIGS_IV2_DATA_END_ADDRESS 0x07483FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data)
.................... {   
....................    fprintf(PC, "Enqueue Flash Operation\r\n");
*
0A69A:  MOVLW  FC
0A69C:  MOVWF  FF6
0A69E:  MOVLW  03
0A6A0:  MOVWF  FF7
0A6A2:  MOVLW  00
0A6A4:  MOVWF  FF8
0A6A6:  CALL   2084
....................    int8 next_tail = (flash_queue.tail_index + 1) % SMF_QUEUE_SIZE;
0A6AA:  MOVLW  01
0A6AC:  MOVLB  1
0A6AE:  ADDWF  x11,W
0A6B0:  ANDLW  0F
0A6B2:  MOVLB  2
0A6B4:  MOVWF  x6E
.................... 
....................    if(next_tail == flash_queue.head_index)
0A6B6:  MOVLB  1
0A6B8:  MOVF   x10,W
0A6BA:  MOVLB  2
0A6BC:  SUBWF  x6E,W
0A6BE:  BTFSC  FD8.2
0A6C0:  BRA    A6C8
0A6C2:  MOVLB  0
0A6C4:  GOTO   A6DE
0A6C8:  MOVLB  0
....................       printf("Flash queue is full!!!\r\n");
0A6CA:  MOVLW  16
0A6CC:  MOVWF  FF6
0A6CE:  MOVLW  04
0A6D0:  MOVWF  FF7
0A6D2:  MOVLW  00
0A6D4:  MOVWF  FF8
0A6D6:  CALL   2084
0A6DA:  GOTO   A912
....................       
....................    else
....................    {
....................       flash_queue.entries[flash_queue.tail_index].mission_id = data->mission_id;
0A6DE:  MOVLB  1
0A6E0:  MOVF   x11,W
0A6E2:  MULLW  0C
0A6E4:  MOVF   FF3,W
0A6E6:  MOVLB  2
0A6E8:  CLRF   x70
0A6EA:  MOVWF  x6F
0A6EC:  MOVLW  50
0A6EE:  ADDWF  x6F,W
0A6F0:  MOVWF  01
0A6F2:  MOVLW  00
0A6F4:  ADDWFC x70,W
0A6F6:  MOVWF  03
0A6F8:  MOVF   01,W
0A6FA:  MOVWF  x71
0A6FC:  MOVFF  03,272
0A700:  MOVF   x6C,W
0A702:  MOVWF  FE9
0A704:  MOVF   x6D,W
0A706:  MOVWF  FEA
0A708:  MOVF   FEF,W
0A70A:  MOVWF  x73
0A70C:  MOVFF  272,FEA
0A710:  MOVFF  271,FE9
0A714:  MOVFF  273,FEF
....................       flash_queue.entries[flash_queue.tail_index].func_type  = data->func_type;
0A718:  MOVLB  1
0A71A:  MOVF   x11,W
0A71C:  MULLW  0C
0A71E:  MOVF   FF3,W
0A720:  MOVLB  2
0A722:  CLRF   x70
0A724:  MOVWF  x6F
0A726:  MOVLW  01
0A728:  ADDWF  x6F,W
0A72A:  MOVWF  01
0A72C:  MOVLW  00
0A72E:  ADDWFC x70,W
0A730:  MOVWF  03
0A732:  MOVF   01,W
0A734:  ADDLW  50
0A736:  MOVWF  01
0A738:  MOVLW  00
0A73A:  ADDWFC 03,F
0A73C:  MOVF   01,W
0A73E:  MOVWF  x6F
0A740:  MOVFF  03,270
0A744:  MOVLW  01
0A746:  ADDWF  x6C,W
0A748:  MOVWF  FE9
0A74A:  MOVLW  00
0A74C:  ADDWFC x6D,W
0A74E:  MOVWF  FEA
0A750:  MOVF   FEF,W
0A752:  MOVWF  x71
0A754:  MOVFF  270,FEA
0A758:  MOVFF  26F,FE9
0A75C:  MOVFF  271,FEF
....................       flash_queue.entries[flash_queue.tail_index].write_mode = data->write_mode;
0A760:  MOVLB  1
0A762:  MOVF   x11,W
0A764:  MULLW  0C
0A766:  MOVF   FF3,W
0A768:  MOVLB  2
0A76A:  CLRF   x70
0A76C:  MOVWF  x6F
0A76E:  MOVLW  02
0A770:  ADDWF  x6F,W
0A772:  MOVWF  01
0A774:  MOVLW  00
0A776:  ADDWFC x70,W
0A778:  MOVWF  03
0A77A:  MOVF   01,W
0A77C:  ADDLW  50
0A77E:  MOVWF  01
0A780:  MOVLW  00
0A782:  ADDWFC 03,F
0A784:  MOVF   01,W
0A786:  MOVWF  x6F
0A788:  MOVFF  03,270
0A78C:  MOVLW  02
0A78E:  ADDWF  x6C,W
0A790:  MOVWF  FE9
0A792:  MOVLW  00
0A794:  ADDWFC x6D,W
0A796:  MOVWF  FEA
0A798:  MOVF   FEF,W
0A79A:  MOVWF  x71
0A79C:  MOVFF  270,FEA
0A7A0:  MOVFF  26F,FE9
0A7A4:  MOVFF  271,FEF
....................       flash_queue.entries[flash_queue.tail_index].source_type = data->source_type;
0A7A8:  MOVLB  1
0A7AA:  MOVF   x11,W
0A7AC:  MULLW  0C
0A7AE:  MOVF   FF3,W
0A7B0:  MOVLB  2
0A7B2:  CLRF   x70
0A7B4:  MOVWF  x6F
0A7B6:  MOVLW  03
0A7B8:  ADDWF  x6F,W
0A7BA:  MOVWF  01
0A7BC:  MOVLW  00
0A7BE:  ADDWFC x70,W
0A7C0:  MOVWF  03
0A7C2:  MOVF   01,W
0A7C4:  ADDLW  50
0A7C6:  MOVWF  01
0A7C8:  MOVLW  00
0A7CA:  ADDWFC 03,F
0A7CC:  MOVF   01,W
0A7CE:  MOVWF  x6F
0A7D0:  MOVFF  03,270
0A7D4:  MOVLW  03
0A7D6:  ADDWF  x6C,W
0A7D8:  MOVWF  01
0A7DA:  MOVLW  00
0A7DC:  ADDWFC x6D,W
0A7DE:  MOVWF  03
0A7E0:  MOVF   01,W
0A7E2:  MOVWF  FE9
0A7E4:  MOVFF  03,FEA
0A7E8:  MOVLW  00
0A7EA:  BTFSC  FEF.0
0A7EC:  MOVLW  01
0A7EE:  MOVWF  01
0A7F0:  BTFSS  01.0
0A7F2:  BRA    A7FA
0A7F4:  MOVLB  0
0A7F6:  GOTO   A80A
0A7FA:  MOVLB  0
0A7FC:  MOVFF  270,FEA
0A800:  MOVFF  26F,FE9
0A804:  BCF    FEF.0
0A806:  GOTO   A814
0A80A:  MOVFF  270,FEA
0A80E:  MOVFF  26F,FE9
0A812:  BSF    FEF.0
....................       flash_queue.entries[flash_queue.tail_index].misf_start_addr = data->misf_start_addr;
0A814:  MOVLB  1
0A816:  MOVF   x11,W
0A818:  MULLW  0C
0A81A:  MOVF   FF3,W
0A81C:  MOVLB  2
0A81E:  CLRF   x70
0A820:  MOVWF  x6F
0A822:  MOVLW  04
0A824:  ADDWF  x6F,W
0A826:  MOVWF  01
0A828:  MOVLW  00
0A82A:  ADDWFC x70,W
0A82C:  MOVWF  03
0A82E:  MOVF   01,W
0A830:  ADDLW  50
0A832:  MOVWF  01
0A834:  MOVLW  00
0A836:  ADDWFC 03,F
0A838:  MOVF   01,W
0A83A:  MOVWF  x6F
0A83C:  MOVFF  03,270
0A840:  MOVLW  04
0A842:  ADDWF  x6C,W
0A844:  MOVWF  FE9
0A846:  MOVLW  00
0A848:  ADDWFC x6D,W
0A84A:  MOVWF  FEA
0A84C:  MOVFF  FEF,00
0A850:  MOVFF  FEC,01
0A854:  MOVFF  FEC,02
0A858:  MOVFF  FEC,03
0A85C:  MOVF   FED,F
0A85E:  MOVF   FED,F
0A860:  MOVF   FED,F
0A862:  MOVFF  03,274
0A866:  MOVFF  02,273
0A86A:  MOVFF  01,272
0A86E:  MOVFF  00,271
0A872:  MOVFF  270,FEA
0A876:  MOVFF  26F,FE9
0A87A:  MOVFF  271,FEF
0A87E:  MOVFF  272,FEC
0A882:  MOVFF  273,FEC
0A886:  MOVFF  274,FEC
0A88A:  MOVF   FED,F
0A88C:  MOVF   FED,F
0A88E:  MOVF   FED,F
....................       flash_queue.entries[flash_queue.tail_index].misf_size = data->misf_size;
0A890:  MOVLB  1
0A892:  MOVF   x11,W
0A894:  MULLW  0C
0A896:  MOVF   FF3,W
0A898:  MOVLB  2
0A89A:  CLRF   x70
0A89C:  MOVWF  x6F
0A89E:  MOVLW  08
0A8A0:  ADDWF  x6F,W
0A8A2:  MOVWF  01
0A8A4:  MOVLW  00
0A8A6:  ADDWFC x70,W
0A8A8:  MOVWF  03
0A8AA:  MOVF   01,W
0A8AC:  ADDLW  50
0A8AE:  MOVWF  01
0A8B0:  MOVLW  00
0A8B2:  ADDWFC 03,F
0A8B4:  MOVF   01,W
0A8B6:  MOVWF  x6F
0A8B8:  MOVFF  03,270
0A8BC:  MOVLW  08
0A8BE:  ADDWF  x6C,W
0A8C0:  MOVWF  FE9
0A8C2:  MOVLW  00
0A8C4:  ADDWFC x6D,W
0A8C6:  MOVWF  FEA
0A8C8:  MOVFF  FEF,00
0A8CC:  MOVFF  FEC,01
0A8D0:  MOVFF  FEC,02
0A8D4:  MOVFF  FEC,03
0A8D8:  MOVF   FED,F
0A8DA:  MOVF   FED,F
0A8DC:  MOVF   FED,F
0A8DE:  MOVFF  03,274
0A8E2:  MOVFF  02,273
0A8E6:  MOVFF  01,272
0A8EA:  MOVFF  00,271
0A8EE:  MOVFF  270,FEA
0A8F2:  MOVFF  26F,FE9
0A8F6:  MOVFF  271,FEF
0A8FA:  MOVFF  272,FEC
0A8FE:  MOVFF  273,FEC
0A902:  MOVFF  274,FEC
0A906:  MOVF   FED,F
0A908:  MOVF   FED,F
0A90A:  MOVF   FED,F
....................       flash_queue.tail_index = next_tail;
0A90C:  MOVFF  26E,111
0A910:  MOVLB  0
....................    }
0A912:  RETURN 0
.................... 
.................... 
.................... }
.................... 
.................... 
.................... FlashOperationStruct *dequeue_flash_operation()
.................... {
....................    if (flash_queue.head_index == flash_queue.tail_index)
*
0EA9C:  MOVLB  1
0EA9E:  MOVF   x11,W
0EAA0:  SUBWF  x10,W
0EAA2:  BTFSC  FD8.2
0EAA4:  BRA    EAAC
0EAA6:  MOVLB  0
0EAA8:  GOTO   EACE
0EAAC:  MOVLB  0
....................    {
....................       printf("Flash queue is empty\r\n");
0EAAE:  MOVLW  30
0EAB0:  MOVWF  FF6
0EAB2:  MOVLW  04
0EAB4:  MOVWF  FF7
0EAB6:  MOVLW  00
0EAB8:  MOVWF  FF8
0EABA:  CALL   2084
....................       return 0x00;
0EABE:  MOVLW  00
0EAC0:  MOVWF  01
0EAC2:  MOVLW  00
0EAC4:  MOVWF  02
0EAC6:  GOTO   EAFC
....................    }
0EACA:  GOTO   EAFC
....................    else
....................    {
....................       int8 current_head = flash_queue.head_index;
0EACE:  MOVFF  110,233
....................       flash_queue.head_index = (flash_queue.head_index + 1) % SMF_QUEUE_SIZE;
0EAD2:  MOVLW  01
0EAD4:  MOVLB  1
0EAD6:  ADDWF  x10,W
0EAD8:  ANDLW  0F
0EADA:  MOVWF  x10
.................... 
.................... 
....................       return &flash_queue.entries[current_head];
0EADC:  MOVLB  2
0EADE:  MOVF   x33,W
0EAE0:  MULLW  0C
0EAE2:  MOVF   FF3,W
0EAE4:  CLRF   03
0EAE6:  ADDLW  50
0EAE8:  MOVWF  01
0EAEA:  MOVLW  00
0EAEC:  ADDWFC 03,F
0EAEE:  MOVF   01,W
0EAF0:  MOVWF  01
0EAF2:  MOVF   03,W
0EAF4:  MOVWF  02
0EAF6:  MOVLB  0
0EAF8:  GOTO   EAFC
....................    }
0EAFC:  GOTO   1120A (RETURN)
.................... }
.................... 
.................... int1 is_empty_flash_queue(void)
.................... {
....................    return flash_queue.head_index == flash_queue.tail_index;
*
0E9A6:  MOVLB  1
0E9A8:  MOVF   x11,W
0E9AA:  SUBWF  x10,W
0E9AC:  BTFSS  FD8.2
0E9AE:  BRA    E9B6
0E9B0:  MOVLB  0
0E9B2:  GOTO   E9BE
0E9B6:  MOVLB  0
0E9B8:  MOVLW  00
0E9BA:  GOTO   E9C0
0E9BE:  MOVLW  01
0E9C0:  MOVWF  01
0E9C2:  RETURN 0
.................... }
.................... 
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id)
.................... {
....................    SmfAddressStruct mis_struct = {0};
*
0F574:  MOVLB  2
0F576:  CLRF   x9D
0F578:  CLRF   x9E
0F57A:  CLRF   x9F
0F57C:  CLRF   xA0
0F57E:  CLRF   xA1
0F580:  CLRF   xA2
0F582:  CLRF   xA3
0F584:  CLRF   xA4
.................... 
....................    if (mission_id == CIGS_DATA_TABLE)
0F586:  MOVF   x9C,F
0F588:  BTFSC  FD8.2
0F58A:  BRA    F592
0F58C:  MOVLB  0
0F58E:  GOTO   F5B6
0F592:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_DATA_TABLE_START_ADDRESS;
0F594:  MOVLW  06
0F596:  MOVLB  2
0F598:  MOVWF  xA0
0F59A:  MOVLW  AA
0F59C:  MOVWF  x9F
0F59E:  CLRF   x9E
0F5A0:  CLRF   x9D
....................       mis_struct.end_address   = CIGS_DATA_TABLE_END_ADDRESS;
0F5A2:  MOVLW  06
0F5A4:  MOVWF  xA4
0F5A6:  MOVLW  AA
0F5A8:  MOVWF  xA3
0F5AA:  MOVLW  0F
0F5AC:  MOVWF  xA2
0F5AE:  SETF   xA1
0F5B0:  MOVLB  0
....................    }
0F5B2:  GOTO   F6F6
....................    else if (mission_id == CIGS_PICLOG_DATA)
0F5B6:  MOVLB  2
0F5B8:  DECFSZ x9C,W
0F5BA:  BRA    F5C0
0F5BC:  BRA    F5C6
0F5BE:  MOVLB  0
0F5C0:  MOVLB  0
0F5C2:  GOTO   F5EC
0F5C6:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
0F5C8:  MOVLW  06
0F5CA:  MOVLB  2
0F5CC:  MOVWF  xA0
0F5CE:  MOVLW  AA
0F5D0:  MOVWF  x9F
0F5D2:  MOVLW  10
0F5D4:  MOVWF  x9E
0F5D6:  CLRF   x9D
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
0F5D8:  MOVLW  06
0F5DA:  MOVWF  xA4
0F5DC:  MOVLW  AA
0F5DE:  MOVWF  xA3
0F5E0:  MOVLW  1F
0F5E2:  MOVWF  xA2
0F5E4:  SETF   xA1
0F5E6:  MOVLB  0
....................    }
0F5E8:  GOTO   F6F6
....................    else if (mission_id == CIGS_ENVIRO_DATA)
0F5EC:  MOVLB  2
0F5EE:  MOVF   x9C,W
0F5F0:  SUBLW  02
0F5F2:  BTFSC  FD8.2
0F5F4:  BRA    F5FC
0F5F6:  MOVLB  0
0F5F8:  GOTO   F622
0F5FC:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
0F5FE:  MOVLW  06
0F600:  MOVLB  2
0F602:  MOVWF  xA0
0F604:  MOVLW  AA
0F606:  MOVWF  x9F
0F608:  MOVLW  10
0F60A:  MOVWF  x9E
0F60C:  CLRF   x9D
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
0F60E:  MOVLW  06
0F610:  MOVWF  xA4
0F612:  MOVLW  AA
0F614:  MOVWF  xA3
0F616:  MOVLW  1F
0F618:  MOVWF  xA2
0F61A:  SETF   xA1
0F61C:  MOVLB  0
....................    }
0F61E:  GOTO   F6F6
....................    else if (mission_id == CIGS_IV1_HEADER)
0F622:  MOVLB  2
0F624:  MOVF   x9C,W
0F626:  SUBLW  03
0F628:  BTFSC  FD8.2
0F62A:  BRA    F632
0F62C:  MOVLB  0
0F62E:  GOTO   F658
0F632:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV1_HEADER_START_ADDRESS;
0F634:  MOVLW  06
0F636:  MOVLB  2
0F638:  MOVWF  xA0
0F63A:  MOVLW  B4
0F63C:  MOVWF  x9F
0F63E:  MOVLW  20
0F640:  MOVWF  x9E
0F642:  CLRF   x9D
....................       mis_struct.end_address   = CIGS_IV1_HEADER_END_ADDRESS;
0F644:  MOVLW  06
0F646:  MOVWF  xA4
0F648:  MOVLW  BE
0F64A:  MOVWF  xA3
0F64C:  MOVLW  1F
0F64E:  MOVWF  xA2
0F650:  SETF   xA1
0F652:  MOVLB  0
....................    }
0F654:  GOTO   F6F6
....................    else if (mission_id == CIGS_IV1_DATA)
0F658:  MOVLB  2
0F65A:  MOVF   x9C,W
0F65C:  SUBLW  04
0F65E:  BTFSC  FD8.2
0F660:  BRA    F668
0F662:  MOVLB  0
0F664:  GOTO   F68E
0F668:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV1_DATA_START_ADDRESS;
0F66A:  MOVLW  06
0F66C:  MOVLB  2
0F66E:  MOVWF  xA0
0F670:  MOVLW  BE
0F672:  MOVWF  x9F
0F674:  MOVLW  20
0F676:  MOVWF  x9E
0F678:  CLRF   x9D
....................       mis_struct.end_address   = CIGS_IV1_DATA_END_ADDRESS;
0F67A:  MOVLW  06
0F67C:  MOVWF  xA4
0F67E:  MOVLW  FE
0F680:  MOVWF  xA3
0F682:  MOVLW  2F
0F684:  MOVWF  xA2
0F686:  SETF   xA1
0F688:  MOVLB  0
....................    }
0F68A:  GOTO   F6F6
....................       else if (mission_id == CIGS_IV2_HEADER)
0F68E:  MOVLB  2
0F690:  MOVF   x9C,W
0F692:  SUBLW  05
0F694:  BTFSC  FD8.2
0F696:  BRA    F69E
0F698:  MOVLB  0
0F69A:  GOTO   F6C4
0F69E:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV2_HEADER_START_ADDRESS;
0F6A0:  MOVLW  06
0F6A2:  MOVLB  2
0F6A4:  MOVWF  xA0
0F6A6:  MOVLW  FE
0F6A8:  MOVWF  x9F
0F6AA:  MOVLW  30
0F6AC:  MOVWF  x9E
0F6AE:  CLRF   x9D
....................       mis_struct.end_address   = CIGS_IV2_HEADER_END_ADDRESS;
0F6B0:  MOVLW  07
0F6B2:  MOVWF  xA4
0F6B4:  MOVLW  08
0F6B6:  MOVWF  xA3
0F6B8:  MOVLW  2F
0F6BA:  MOVWF  xA2
0F6BC:  SETF   xA1
0F6BE:  MOVLB  0
....................    }
0F6C0:  GOTO   F6F6
....................    else if (mission_id == CIGS_IV2_DATA)
0F6C4:  MOVLB  2
0F6C6:  MOVF   x9C,W
0F6C8:  SUBLW  06
0F6CA:  BTFSC  FD8.2
0F6CC:  BRA    F6D4
0F6CE:  MOVLB  0
0F6D0:  GOTO   F6F6
0F6D4:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV2_DATA_START_ADDRESS;
0F6D6:  MOVLW  07
0F6D8:  MOVLB  2
0F6DA:  MOVWF  xA0
0F6DC:  MOVLW  08
0F6DE:  MOVWF  x9F
0F6E0:  MOVLW  30
0F6E2:  MOVWF  x9E
0F6E4:  CLRF   x9D
....................       mis_struct.end_address   = CIGS_IV2_DATA_END_ADDRESS;
0F6E6:  MOVLW  07
0F6E8:  MOVWF  xA4
0F6EA:  MOVLW  48
0F6EC:  MOVWF  xA3
0F6EE:  MOVLW  3F
0F6F0:  MOVWF  xA2
0F6F2:  SETF   xA1
0F6F4:  MOVLB  0
....................    }
....................    return mis_struct;
0F6F6:  MOVLW  9D
0F6F8:  MOVWF  01
0F6FA:  MOVLW  02
0F6FC:  MOVWF  02
0F6FE:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "../lib/communication/communication.c"
.................... // #include "communication.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #include "mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
051D0:  MOVLB  2
051D2:  CLRF   x35
051D4:  CLRF   x36
051D6:  CLRF   x37
051D8:  CLRF   x38
051DA:  CLRF   x39
051DC:  CLRF   x3A
051DE:  CLRF   x3B
051E0:  CLRF   x3C
051E2:  CLRF   x3D
051E4:  CLRF   x3E
051E6:  CLRF   x3F
051E8:  CLRF   x40
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
051EA:  MOVLW  48
051EC:  MOVWF  FF6
051EE:  MOVLW  04
051F0:  MOVWF  FF7
051F2:  MOVLW  00
051F4:  MOVWF  FF8
051F6:  MOVLB  0
051F8:  CALL   2084
....................    fprintf(PC, "\t[BOSS] >>> ");
051FC:  MOVLW  68
051FE:  MOVWF  FF6
05200:  MOVLW  04
05202:  MOVWF  FF7
05204:  MOVLW  00
05206:  MOVWF  FF8
05208:  CALL   2084
....................    for (int8 i = 0; i < receive_signal_size; i++)
0520C:  MOVLB  2
0520E:  CLRF   x41
05210:  MOVLB  0
05212:  MOVLB  2
05214:  MOVF   x34,W
05216:  SUBWF  x41,W
05218:  BTFSS  FD8.0
0521A:  BRA    5222
0521C:  MOVLB  0
0521E:  GOTO   525E
05222:  MOVLB  0
....................       fprintf(PC, "%X ", receive_signal[i]);
05224:  MOVLB  2
05226:  MOVF   x41,W
05228:  ADDWF  x32,W
0522A:  MOVWF  FE9
0522C:  MOVLW  00
0522E:  ADDWFC x33,W
05230:  MOVWF  FEA
05232:  MOVFF  FEF,248
05236:  MOVFF  248,A77
0523A:  MOVLW  37
0523C:  MOVLB  A
0523E:  MOVWF  x78
05240:  MOVLB  0
05242:  CALL   22D0
05246:  MOVLW  20
05248:  BTFSS  FA6.6
0524A:  GOTO   5248
0524E:  MOVLB  E
05250:  MOVWF  xF9
05252:  MOVLB  0
05254:  MOVLB  2
05256:  INCF   x41,F
05258:  MOVLB  0
0525A:  GOTO   5212
....................    fprintf(PC, "\r\n");
0525E:  MOVLW  0D
05260:  BTFSS  FA6.6
05262:  GOTO   5260
05266:  MOVLB  E
05268:  MOVWF  xF9
0526A:  MOVLW  0A
0526C:  MOVLB  0
0526E:  BTFSS  FA6.6
05270:  GOTO   526E
05274:  MOVLB  E
05276:  MOVWF  xF9
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
05278:  MOVFF  233,249
0527C:  MOVFF  232,248
05280:  MOVFF  234,24A
05284:  MOVLB  0
05286:  GOTO   4EB8
0528A:  MOVFF  01,242
....................    if (frame_start_position == -1)
0528E:  MOVLB  2
05290:  MOVF   x42,W
05292:  SUBLW  FF
05294:  BTFSC  FD8.2
05296:  BRA    529E
05298:  MOVLB  0
0529A:  GOTO   52AC
0529E:  MOVLB  0
....................       return command;
052A0:  MOVLW  35
052A2:  MOVWF  01
052A4:  MOVLW  02
052A6:  MOVWF  02
052A8:  GOTO   53CE
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
052AC:  MOVLB  2
052AE:  MOVF   x42,W
052B0:  ADDWF  x32,W
052B2:  MOVWF  01
052B4:  MOVLW  00
052B6:  ADDWFC x33,W
052B8:  MOVWF  03
052BA:  MOVF   01,W
052BC:  MOVWF  x43
052BE:  MOVFF  03,244
052C2:  MOVF   x43,W
052C4:  MOVWF  FE9
052C6:  MOVF   x44,W
052C8:  MOVWF  FEA
052CA:  MOVF   FEF,W
052CC:  ANDLW  0F
052CE:  MOVWF  x45
052D0:  MOVFF  245,248
052D4:  MOVLB  0
052D6:  GOTO   4F60
052DA:  MOVFF  01,246
....................    if (content_size == -1)
052DE:  MOVLB  2
052E0:  MOVF   x46,W
052E2:  SUBLW  FF
052E4:  BTFSC  FD8.2
052E6:  BRA    52EE
052E8:  MOVLB  0
052EA:  GOTO   52FC
052EE:  MOVLB  0
....................       return command;
052F0:  MOVLW  35
052F2:  MOVWF  01
052F4:  MOVLW  02
052F6:  MOVWF  02
052F8:  GOTO   53CE
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
052FC:  MOVLB  2
052FE:  MOVF   x42,W
05300:  SUBWF  x34,W
05302:  MOVWF  x47
....................    
....................    if (!check_crc(frame, receive_frame_size))
05304:  MOVFF  244,249
05308:  MOVFF  243,248
0530C:  MOVFF  247,24A
05310:  MOVLB  0
05312:  GOTO   5020
05316:  MOVF   01,F
05318:  BTFSS  FD8.2
0531A:  GOTO   532A
....................       return command;
0531E:  MOVLW  35
05320:  MOVWF  01
05322:  MOVLW  02
05324:  MOVWF  02
05326:  GOTO   53CE
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
0532A:  MOVLB  2
0532C:  MOVF   x43,W
0532E:  MOVWF  FE9
05330:  MOVF   x44,W
05332:  MOVWF  FEA
05334:  MOVF   FEF,W
05336:  ANDLW  F0
05338:  MOVWF  00
0533A:  SWAPF  00,W
0533C:  MOVWF  x48
0533E:  MOVLW  0F
05340:  ANDWF  x48,F
05342:  MOVFF  248,249
05346:  MOVLB  0
05348:  GOTO   5110
0534C:  MOVF   01,F
0534E:  BTFSS  FD8.2
05350:  GOTO   5360
....................       return command;
05354:  MOVLW  35
05356:  MOVWF  01
05358:  MOVLW  02
0535A:  MOVWF  02
0535C:  GOTO   53CE
.................... 
....................    command.frame_id = frame_id;
05360:  MOVFF  245,235
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
05364:  MOVLW  01
05366:  MOVLB  2
05368:  ADDWF  x43,W
0536A:  MOVWF  01
0536C:  MOVLW  00
0536E:  ADDWFC x44,W
05370:  MOVWF  03
05372:  MOVF   01,W
05374:  MOVWF  x48
05376:  MOVFF  03,249
0537A:  MOVLW  02
0537C:  SUBWF  x47,W
0537E:  MOVWF  x4A
05380:  MOVLW  02
05382:  MOVWF  FEA
05384:  MOVLW  38
05386:  MOVWF  FE9
05388:  MOVFF  249,FE2
0538C:  MOVFF  248,FE1
05390:  MOVF   x4A,W
05392:  MOVWF  01
05394:  BTFSS  FD8.2
05396:  BRA    539E
05398:  MOVLB  0
0539A:  GOTO   53AA
0539E:  MOVLB  0
053A0:  MOVFF  FE6,FEE
053A4:  DECFSZ 01,F
053A6:  GOTO   53A0
....................    command.size = receive_frame_size-2;
053AA:  MOVLW  02
053AC:  MOVLB  2
053AE:  SUBWF  x47,W
053B0:  MOVWF  x36
....................    command.is_exist = TRUE;
053B2:  BSF    x37.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
053B4:  MOVLW  76
053B6:  MOVWF  FF6
053B8:  MOVLW  04
053BA:  MOVWF  FF7
053BC:  MOVLW  00
053BE:  MOVWF  FF8
053C0:  MOVLB  0
053C2:  CALL   2084
....................    return command;
053C6:  MOVLW  35
053C8:  MOVWF  01
053CA:  MOVLW  02
053CC:  MOVWF  02
053CE:  GOTO   11CDE (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
04EB8:  MOVLB  2
04EBA:  CLRF   x4B
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
04EBC:  CLRF   x4B
04EBE:  MOVLB  0
04EC0:  MOVLW  01
04EC2:  MOVLB  2
04EC4:  SUBWF  x4A,W
04EC6:  SUBWF  x4B,W
04EC8:  BTFSS  FD8.0
04ECA:  BRA    4ED2
04ECC:  MOVLB  0
04ECE:  GOTO   4F0A
04ED2:  MOVLB  0
....................       if(receive_signal[i] == SFD)
04ED4:  MOVLB  2
04ED6:  MOVF   x4B,W
04ED8:  ADDWF  x48,W
04EDA:  MOVWF  FE9
04EDC:  MOVLW  00
04EDE:  ADDWFC x49,W
04EE0:  MOVWF  FEA
04EE2:  MOVF   FEF,W
04EE4:  SUBLW  AA
04EE6:  BTFSC  FD8.2
04EE8:  BRA    4EF0
04EEA:  MOVLB  0
04EEC:  GOTO   4F00
04EF0:  MOVLB  0
....................          return i+1;
04EF2:  MOVLW  01
04EF4:  MOVLB  2
04EF6:  ADDWF  x4B,W
04EF8:  MOVWF  01
04EFA:  MOVLB  0
04EFC:  GOTO   4F5C
04F00:  MOVLB  2
04F02:  INCF   x4B,F
04F04:  MOVLB  0
04F06:  GOTO   4EC0
....................    if (receive_signal[i] == SFD)
04F0A:  MOVLB  2
04F0C:  MOVF   x4B,W
04F0E:  ADDWF  x48,W
04F10:  MOVWF  FE9
04F12:  MOVLW  00
04F14:  ADDWFC x49,W
04F16:  MOVWF  FEA
04F18:  MOVF   FEF,W
04F1A:  SUBLW  AA
04F1C:  BTFSC  FD8.2
04F1E:  BRA    4F26
04F20:  MOVLB  0
04F22:  GOTO   4F44
04F26:  MOVLB  0
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
04F28:  MOVLW  92
04F2A:  MOVWF  FF6
04F2C:  MOVLW  04
04F2E:  MOVWF  FF7
04F30:  MOVLW  00
04F32:  MOVWF  FF8
04F34:  CALL   2084
....................       return -1;
04F38:  MOVLW  FF
04F3A:  MOVWF  01
04F3C:  GOTO   4F5C
....................    }
04F40:  GOTO   4F5C
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
04F44:  MOVLW  A8
04F46:  MOVWF  FF6
04F48:  MOVLW  04
04F4A:  MOVWF  FF7
04F4C:  MOVLW  00
04F4E:  MOVWF  FF8
04F50:  CALL   2084
....................       return -1;
04F54:  MOVLW  FF
04F56:  MOVWF  01
04F58:  GOTO   4F5C
....................    }
04F5C:  GOTO   528A (RETURN)
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
04F60:  MOVLB  2
04F62:  CLRF   x49
04F64:  MOVLB  0
04F66:  MOVLB  2
04F68:  MOVF   x49,W
04F6A:  SUBLW  03
04F6C:  BTFSC  FD8.0
04F6E:  BRA    4F76
04F70:  MOVLB  0
04F72:  GOTO   4FD4
04F76:  MOVLB  0
....................       if (frame_id == frame_ids[i].id)
04F78:  BCF    FD8.0
04F7A:  MOVLB  2
04F7C:  RLCF   x49,W
04F7E:  CLRF   x4B
04F80:  MOVWF  x4A
04F82:  MOVLW  1A
04F84:  ADDWF  x4A,W
04F86:  MOVWF  FE9
04F88:  MOVLW  01
04F8A:  ADDWFC x4B,W
04F8C:  MOVWF  FEA
04F8E:  MOVF   FEF,W
04F90:  SUBWF  x48,W
04F92:  BTFSC  FD8.2
04F94:  BRA    4F9C
04F96:  MOVLB  0
04F98:  GOTO   4FCA
04F9C:  MOVLB  0
....................          return frame_ids[i].length;
04F9E:  BCF    FD8.0
04FA0:  MOVLB  2
04FA2:  RLCF   x49,W
04FA4:  CLRF   x4B
04FA6:  MOVWF  x4A
04FA8:  MOVLW  01
04FAA:  ADDWF  x4A,W
04FAC:  MOVWF  01
04FAE:  MOVLW  00
04FB0:  ADDWFC x4B,W
04FB2:  MOVWF  03
04FB4:  MOVF   01,W
04FB6:  ADDLW  1A
04FB8:  MOVWF  FE9
04FBA:  MOVLW  01
04FBC:  ADDWFC 03,W
04FBE:  MOVWF  FEA
04FC0:  MOVF   FEF,W
04FC2:  MOVWF  01
04FC4:  MOVLB  0
04FC6:  GOTO   501A
04FCA:  MOVLB  2
04FCC:  INCF   x49,F
04FCE:  MOVLB  0
04FD0:  GOTO   4F66
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
04FD4:  MOVLW  BA
04FD6:  MOVWF  FF6
04FD8:  MOVLW  04
04FDA:  MOVWF  FF7
04FDC:  MOVLW  00
04FDE:  MOVWF  FF8
04FE0:  MOVLW  1F
04FE2:  MOVLB  3
04FE4:  MOVWF  x1E
04FE6:  MOVLB  0
04FE8:  CALL   20BA
04FEC:  MOVFF  248,A77
04FF0:  MOVLW  37
04FF2:  MOVLB  A
04FF4:  MOVWF  x78
04FF6:  MOVLB  0
04FF8:  CALL   22D0
04FFC:  MOVLW  0D
04FFE:  BTFSS  FA6.6
05000:  GOTO   4FFE
05004:  MOVLB  E
05006:  MOVWF  xF9
05008:  MOVLW  0A
0500A:  MOVLB  0
0500C:  BTFSS  FA6.6
0500E:  GOTO   500C
05012:  MOVLB  E
05014:  MOVWF  xF9
....................    return -1;
05016:  MOVLW  FF
05018:  MOVWF  01
0501A:  MOVLB  0
0501C:  GOTO   52DA (RETURN)
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
05020:  MOVLW  01
05022:  MOVLB  2
05024:  SUBWF  x4A,W
05026:  ADDWF  x48,W
05028:  MOVWF  FE9
0502A:  MOVLW  00
0502C:  ADDWFC x49,W
0502E:  MOVWF  FEA
05030:  MOVFF  FEF,24B
05034:  MOVLW  01
05036:  SUBWF  x4A,W
05038:  MOVWF  x4D
0503A:  MOVFF  249,BF3
0503E:  MOVFF  248,BF2
05042:  MOVFF  24D,BF4
05046:  MOVLB  0
05048:  CALL   2E9A
0504C:  MOVFF  01,24C
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
05050:  MOVLB  2
05052:  MOVF   x4C,W
05054:  SUBWF  x4B,W
05056:  BTFSC  FD8.2
05058:  BRA    5060
0505A:  MOVLB  0
0505C:  GOTO   506E
05060:  MOVLB  0
....................       return TRUE;
05062:  MOVLW  01
05064:  MOVWF  01
05066:  GOTO   510C
0506A:  GOTO   510C
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
0506E:  MOVLW  DE
05070:  MOVWF  FF6
05072:  MOVLW  04
05074:  MOVWF  FF7
05076:  MOVLW  00
05078:  MOVWF  FF8
0507A:  CALL   2084
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
0507E:  MOVLW  F0
05080:  MOVWF  FF6
05082:  MOVLW  04
05084:  MOVWF  FF7
05086:  MOVLW  00
05088:  MOVWF  FF8
0508A:  MOVLW  13
0508C:  MOVLB  3
0508E:  MOVWF  x1E
05090:  MOVLB  0
05092:  CALL   20BA
05096:  MOVFF  24B,A77
0509A:  MOVLW  37
0509C:  MOVLB  A
0509E:  MOVWF  x78
050A0:  MOVLB  0
050A2:  CALL   22D0
050A6:  MOVLW  0D
050A8:  BTFSS  FA6.6
050AA:  GOTO   50A8
050AE:  MOVLB  E
050B0:  MOVWF  xF9
050B2:  MOVLW  0A
050B4:  MOVLB  0
050B6:  BTFSS  FA6.6
050B8:  GOTO   50B6
050BC:  MOVLB  E
050BE:  MOVWF  xF9
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
050C0:  MOVLW  08
050C2:  MOVWF  FF6
050C4:  MOVLW  05
050C6:  MOVWF  FF7
050C8:  MOVLW  00
050CA:  MOVWF  FF8
050CC:  MOVLW  13
050CE:  MOVLB  3
050D0:  MOVWF  x1E
050D2:  MOVLB  0
050D4:  CALL   20BA
050D8:  MOVFF  24C,A77
050DC:  MOVLW  37
050DE:  MOVLB  A
050E0:  MOVWF  x78
050E2:  MOVLB  0
050E4:  CALL   22D0
050E8:  MOVLW  0D
050EA:  BTFSS  FA6.6
050EC:  GOTO   50EA
050F0:  MOVLB  E
050F2:  MOVWF  xF9
050F4:  MOVLW  0A
050F6:  MOVLB  0
050F8:  BTFSS  FA6.6
050FA:  GOTO   50F8
050FE:  MOVLB  E
05100:  MOVWF  xF9
....................       return FALSE;
05102:  MOVLW  00
05104:  MOVWF  01
05106:  MOVLB  0
05108:  GOTO   510C
....................    }
0510C:  GOTO   5316 (RETURN)
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
05110:  MOVLB  2
05112:  MOVF   x49,W
05114:  SUBLW  0C
05116:  BTFSC  FD8.2
05118:  BRA    5120
0511A:  MOVLB  0
0511C:  GOTO   512E
05120:  MOVLB  0
....................       return TRUE;
05122:  MOVLW  01
05124:  MOVWF  01
05126:  GOTO   51CC
0512A:  GOTO   51CC
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
0512E:  MOVLW  20
05130:  MOVWF  FF6
05132:  MOVLW  05
05134:  MOVWF  FF7
05136:  MOVLW  00
05138:  MOVWF  FF8
0513A:  CALL   2084
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
0513E:  MOVLW  42
05140:  MOVWF  FF6
05142:  MOVLW  05
05144:  MOVWF  FF7
05146:  MOVLW  00
05148:  MOVWF  FF8
0514A:  MOVLW  13
0514C:  MOVLB  3
0514E:  MOVWF  x1E
05150:  MOVLB  0
05152:  CALL   20BA
05156:  MOVFF  249,A77
0515A:  MOVLW  37
0515C:  MOVLB  A
0515E:  MOVWF  x78
05160:  MOVLB  0
05162:  CALL   22D0
05166:  MOVLW  0D
05168:  BTFSS  FA6.6
0516A:  GOTO   5168
0516E:  MOVLB  E
05170:  MOVWF  xF9
05172:  MOVLW  0A
05174:  MOVLB  0
05176:  BTFSS  FA6.6
05178:  GOTO   5176
0517C:  MOVLB  E
0517E:  MOVWF  xF9
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
05180:  MOVLW  5A
05182:  MOVWF  FF6
05184:  MOVLW  05
05186:  MOVWF  FF7
05188:  MOVLW  00
0518A:  MOVWF  FF8
0518C:  MOVLW  13
0518E:  MOVLB  3
05190:  MOVWF  x1E
05192:  MOVLB  0
05194:  CALL   20BA
05198:  MOVLW  0C
0519A:  MOVLB  A
0519C:  MOVWF  x77
0519E:  MOVLW  37
051A0:  MOVWF  x78
051A2:  MOVLB  0
051A4:  CALL   22D0
051A8:  MOVLW  0D
051AA:  BTFSS  FA6.6
051AC:  GOTO   51AA
051B0:  MOVLB  E
051B2:  MOVWF  xF9
051B4:  MOVLW  0A
051B6:  MOVLB  0
051B8:  BTFSS  FA6.6
051BA:  GOTO   51B8
051BE:  MOVLB  E
051C0:  MOVWF  xF9
....................       return FALSE;  
051C2:  MOVLW  00
051C4:  MOVWF  01
051C6:  MOVLB  0
051C8:  GOTO   51CC
....................    }
051CC:  GOTO   534C (RETURN)
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
054DE:  MOVLW  AA
054E0:  MOVLB  2
054E2:  MOVWF  x3D
....................    data[1] = (BOSS_PIC << 4) | frame_id;
054E4:  MOVF   x39,W
054E6:  IORLW  50
054E8:  MOVWF  x3E
....................    memcpy(&data[2], content, size);
054EA:  MOVLW  02
054EC:  MOVWF  FEA
054EE:  MOVLW  3F
054F0:  MOVWF  FE9
054F2:  MOVFF  23B,FE2
054F6:  MOVFF  23A,FE1
054FA:  MOVF   x3C,W
054FC:  MOVWF  01
054FE:  BTFSS  FD8.2
05500:  BRA    5508
05502:  MOVLB  0
05504:  GOTO   5514
05508:  MOVLB  0
0550A:  MOVFF  FE6,FEE
0550E:  DECFSZ 01,F
05510:  GOTO   550A
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
05514:  MOVLW  02
05516:  MOVLB  2
05518:  ADDWF  x3C,W
0551A:  MOVWF  x4D
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
0551C:  CLRF   03
0551E:  MOVF   x4D,W
05520:  ADDLW  3D
05522:  MOVWF  01
05524:  MOVLW  02
05526:  ADDWFC 03,F
05528:  MOVF   01,W
0552A:  MOVWF  x4F
0552C:  MOVFF  03,250
05530:  MOVLW  01
05532:  SUBWF  x4D,W
05534:  MOVWF  x51
05536:  MOVLW  02
05538:  MOVLB  B
0553A:  MOVWF  xF3
0553C:  MOVLW  3E
0553E:  MOVWF  xF2
05540:  MOVFF  251,BF4
05544:  MOVLB  0
05546:  CALL   2E9A
0554A:  MOVFF  250,FEA
0554E:  MOVFF  24F,FE9
05552:  MOVFF  01,FEF
....................    int8 data_size = payload_size + 1; // '1' is for CRC
05556:  MOVLW  01
05558:  MOVLB  2
0555A:  ADDWF  x4D,W
0555C:  MOVWF  x4E
....................    
....................    transmit(data, data_size);
0555E:  MOVLW  02
05560:  MOVWF  x50
05562:  MOVLW  3D
05564:  MOVWF  x4F
05566:  MOVFF  24E,251
0556A:  MOVLB  0
0556C:  GOTO   5420
05570:  RETURN 0
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
05420:  MOVLB  2
05422:  CLRF   x52
05424:  MOVLB  0
05426:  MOVLB  2
05428:  MOVF   x51,W
0542A:  SUBWF  x52,W
0542C:  BTFSS  FD8.0
0542E:  BRA    5436
05430:  MOVLB  0
05432:  GOTO   545C
05436:  MOVLB  0
....................       fputc(data[i], BOSS);
05438:  MOVLB  2
0543A:  MOVF   x52,W
0543C:  ADDWF  x4F,W
0543E:  MOVWF  FE9
05440:  MOVLW  00
05442:  ADDWFC x50,W
05444:  MOVWF  FEA
05446:  MOVFF  FEF,254
0544A:  MOVF   x54,W
0544C:  MOVLB  0
0544E:  GOTO   5410
05452:  MOVLB  2
05454:  INCF   x52,F
05456:  MOVLB  0
05458:  GOTO   5426
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
0545C:  MOVLW  72
0545E:  MOVWF  FF6
05460:  MOVLW  05
05462:  MOVWF  FF7
05464:  MOVLW  00
05466:  MOVWF  FF8
05468:  CALL   2084
....................    for(int i = 0; i < data_size; i++)
0546C:  MOVLB  2
0546E:  CLRF   x53
05470:  MOVLB  0
05472:  MOVLB  2
05474:  MOVF   x51,W
05476:  SUBWF  x53,W
05478:  BTFSS  FD8.0
0547A:  BRA    5482
0547C:  MOVLB  0
0547E:  GOTO   54BE
05482:  MOVLB  0
....................       fprintf(PC, "%X ", data[i]);
05484:  MOVLB  2
05486:  MOVF   x53,W
05488:  ADDWF  x4F,W
0548A:  MOVWF  FE9
0548C:  MOVLW  00
0548E:  ADDWFC x50,W
05490:  MOVWF  FEA
05492:  MOVFF  FEF,254
05496:  MOVFF  254,A77
0549A:  MOVLW  37
0549C:  MOVLB  A
0549E:  MOVWF  x78
054A0:  MOVLB  0
054A2:  CALL   22D0
054A6:  MOVLW  20
054A8:  BTFSS  FA6.6
054AA:  GOTO   54A8
054AE:  MOVLB  E
054B0:  MOVWF  xF9
054B2:  MOVLB  0
054B4:  MOVLB  2
054B6:  INCF   x53,F
054B8:  MOVLB  0
054BA:  GOTO   5472
....................    fprintf(PC, "\r\n");
054BE:  MOVLW  0D
054C0:  BTFSS  FA6.6
054C2:  GOTO   54C0
054C6:  MOVLB  E
054C8:  MOVWF  xF9
054CA:  MOVLW  0A
054CC:  MOVLB  0
054CE:  BTFSS  FA6.6
054D0:  GOTO   54CE
054D4:  MOVLB  E
054D6:  MOVWF  xF9
054D8:  MOVLB  0
054DA:  GOTO   5570 (RETURN)
.................... }
.................... 
.................... #include "../lib/communication/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    return command;
.................... }
.................... 
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
05572:  MOVLW  0F
05574:  MOVLB  2
05576:  MOVWF  x39
05578:  CLRF   x3B
0557A:  CLRF   x3A
0557C:  CLRF   x3C
0557E:  MOVLB  0
05580:  CALL   54DE
05584:  RETURN 0
.................... }
.................... 
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
0EA2C:  MOVLW  03
0EA2E:  MOVLB  2
0EA30:  MOVWF  x39
0EA32:  CLRF   x3B
0EA34:  MOVLW  4C
0EA36:  MOVWF  x3A
0EA38:  MOVLW  04
0EA3A:  MOVWF  x3C
0EA3C:  MOVLB  0
0EA3E:  CALL   54DE
0EA42:  GOTO   EA6A (RETURN)
.................... }
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (kbhit())
....................    {
....................       fgetc(BOSS);
....................       transmit_status();
....................    }
.................... }
.................... 
.................... 
.................... 
.................... // コア機能実装ファイル
.................... #include "domain/mmj_cigs_iv.c"
.................... #include "mmj_cigs_iv.h"              
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFFFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE-1];
.................... 
....................     struct {
....................         unsigned int16 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int16 time_msec;
....................         meas_data_t env_data[2];
....................         meas_data_t iv_data[16];
.................... 
....................     }header;
....................     struct {
....................         meas_data_t iv_data[21];
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.1
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/mmj_cigs_config.h"      
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=2000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=2000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=1000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=2000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../device_driver/ad7490_driver.h"  
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../device_driver/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_flash.h"               
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/mission_tools.h"   
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../hal/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... void set_current_sec(unsigned int32 new_sec);
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... void sweep_with_print()
*
0CD2E:  MOVLW  01
0CD30:  MOVLB  2
0CD32:  MOVWF  x3F
0CD34:  MOVLW  2C
0CD36:  MOVWF  x3E
0CD38:  MOVLW  02
0CD3A:  MOVWF  x41
0CD3C:  MOVLW  BC
0CD3E:  MOVWF  x40
.................... {
....................     unsigned int16 curr_threshold = 300;
....................     unsigned int16 curr_limit = 700;
.................... 
....................     // Enable both CIGS ports
....................     connect_port1();
0CD40:  MOVLB  0
0CD42:  CALL   4E84
....................     connect_port2();
0CD46:  CALL   4E8C
....................     mcp4901_1_write(0); 
0CD4A:  MOVLB  A
0CD4C:  CLRF   x81
0CD4E:  CLRF   x80
0CD50:  MOVLB  0
0CD52:  CALL   2602
....................     mcp4901_2_write(0);
0CD56:  MOVLB  A
0CD58:  CLRF   x81
0CD5A:  CLRF   x80
0CD5C:  MOVLB  0
0CD5E:  CALL   2644
....................     delay_ms(100);
0CD62:  MOVLW  64
0CD64:  MOVLB  B
0CD66:  MOVWF  xC0
0CD68:  MOVLB  0
0CD6A:  CALL   2056
....................     
....................     // Init Port1
....................     sweep_config_t port1 = {0};
0CD6E:  MOVLB  2
0CD70:  CLRF   x42
0CD72:  CLRF   x43
0CD74:  CLRF   x44
0CD76:  CLRF   x45
0CD78:  CLRF   x46
0CD7A:  CLRF   x47
0CD7C:  CLRF   x48
0CD7E:  CLRF   x49
0CD80:  CLRF   x4A
0CD82:  CLRF   x4B
0CD84:  CLRF   x4C
0CD86:  CLRF   x4D
0CD88:  CLRF   x4E
0CD8A:  CLRF   x4F
0CD8C:  CLRF   x50
0CD8E:  CLRF   x51
0CD90:  CLRF   x52
0CD92:  CLRF   x53
0CD94:  CLRF   x54
0CD96:  CLRF   x55
0CD98:  CLRF   x56
0CD9A:  CLRF   x57
0CD9C:  CLRF   x58
0CD9E:  CLRF   x59
0CDA0:  CLRF   x5A
0CDA2:  CLRF   x5B
0CDA4:  CLRF   x5C
0CDA6:  CLRF   x5D
0CDA8:  CLRF   x5E
0CDAA:  CLRF   x5F
0CDAC:  CLRF   x60
0CDAE:  CLRF   x61
0CDB0:  CLRF   x62
0CDB2:  CLRF   x63
0CDB4:  CLRF   x64
0CDB6:  CLRF   x65
0CDB8:  CLRF   x66
0CDBA:  CLRF   x67
0CDBC:  CLRF   x68
0CDBE:  CLRF   x69
0CDC0:  CLRF   x6A
0CDC2:  CLRF   x6B
0CDC4:  CLRF   x6C
0CDC6:  CLRF   x6D
0CDC8:  CLRF   x6E
0CDCA:  CLRF   x6F
0CDCC:  CLRF   x70
0CDCE:  CLRF   x71
0CDD0:  CLRF   x72
0CDD2:  CLRF   x73
0CDD4:  CLRF   x74
0CDD6:  CLRF   x75
0CDD8:  CLRF   x76
0CDDA:  CLRF   x77
0CDDC:  CLRF   x78
0CDDE:  CLRF   x79
0CDE0:  CLRF   x7A
0CDE2:  CLRF   x7B
0CDE4:  CLRF   x7C
0CDE6:  CLRF   x7D
0CDE8:  CLRF   x7E
0CDEA:  CLRF   x7F
0CDEC:  CLRF   x80
0CDEE:  CLRF   x81
0CDF0:  CLRF   x82
0CDF2:  CLRF   x83
0CDF4:  CLRF   x84
0CDF6:  CLRF   x85
0CDF8:  CLRF   x86
0CDFA:  CLRF   x87
0CDFC:  CLRF   x88
0CDFE:  CLRF   x89
0CE00:  CLRF   x8A
0CE02:  CLRF   x8B
0CE04:  CLRF   x8C
0CE06:  CLRF   x8D
0CE08:  CLRF   x8E
0CE0A:  CLRF   x8F
0CE0C:  CLRF   x90
0CE0E:  CLRF   x91
0CE10:  CLRF   x92
0CE12:  CLRF   x93
0CE14:  CLRF   x94
0CE16:  CLRF   x95
0CE18:  CLRF   x96
0CE1A:  CLRF   x97
0CE1C:  CLRF   x98
0CE1E:  CLRF   x99
0CE20:  CLRF   x9A
0CE22:  CLRF   x9B
0CE24:  CLRF   x9C
0CE26:  CLRF   x9D
0CE28:  CLRF   x9E
0CE2A:  CLRF   x9F
0CE2C:  CLRF   xA0
0CE2E:  CLRF   xA1
0CE30:  CLRF   xA2
0CE32:  CLRF   xA3
0CE34:  CLRF   xA4
0CE36:  CLRF   xA5
0CE38:  CLRF   xA6
0CE3A:  CLRF   xA7
0CE3C:  CLRF   xA8
0CE3E:  CLRF   xA9
0CE40:  CLRF   xAA
0CE42:  CLRF   xAB
0CE44:  CLRF   xAC
0CE46:  CLRF   xAD
0CE48:  CLRF   xAE
0CE4A:  CLRF   xAF
0CE4C:  CLRF   xB0
0CE4E:  CLRF   xB1
0CE50:  CLRF   xB2
0CE52:  CLRF   xB3
0CE54:  CLRF   xB4
0CE56:  CLRF   xB5
0CE58:  CLRF   xB6
0CE5A:  CLRF   xB7
0CE5C:  CLRF   xB8
0CE5E:  CLRF   xB9
0CE60:  CLRF   xBA
0CE62:  CLRF   xBB
0CE64:  CLRF   xBC
0CE66:  CLRF   xBD
0CE68:  CLRF   xBE
0CE6A:  CLRF   xBF
0CE6C:  CLRF   xC0
0CE6E:  CLRF   xC1
0CE70:  CLRF   xC2
0CE72:  CLRF   xC3
0CE74:  CLRF   xC4
0CE76:  CLRF   xC5
0CE78:  CLRF   xC6
0CE7A:  CLRF   xC7
0CE7C:  CLRF   xC8
0CE7E:  CLRF   xC9
0CE80:  CLRF   xCA
0CE82:  CLRF   xCB
0CE84:  CLRF   xCC
0CE86:  CLRF   xCD
0CE88:  CLRF   xCE
0CE8A:  CLRF   xCF
0CE8C:  CLRF   xD0
0CE8E:  CLRF   xD1
0CE90:  CLRF   xD2
0CE92:  CLRF   xD3
0CE94:  CLRF   xD4
0CE96:  CLRF   xD5
0CE98:  CLRF   xD6
0CE9A:  CLRF   xD7
0CE9C:  CLRF   xD8
0CE9E:  CLRF   xD9
0CEA0:  CLRF   xDA
0CEA2:  CLRF   xDB
0CEA4:  CLRF   xDC
0CEA6:  CLRF   xDD
0CEA8:  CLRF   xDE
0CEAA:  CLRF   xDF
0CEAC:  CLRF   xE0
0CEAE:  CLRF   xE1
0CEB0:  CLRF   xE2
0CEB2:  CLRF   xE3
0CEB4:  CLRF   xE4
0CEB6:  CLRF   xE5
0CEB8:  CLRF   xE6
0CEBA:  CLRF   xE7
0CEBC:  CLRF   xE8
0CEBE:  CLRF   xE9
0CEC0:  CLRF   xEA
0CEC2:  CLRF   xEB
0CEC4:  CLRF   xEC
0CEC6:  CLRF   xED
0CEC8:  CLRF   xEE
0CECA:  CLRF   xEF
0CECC:  CLRF   xF0
0CECE:  CLRF   xF1
0CED0:  CLRF   xF2
0CED2:  CLRF   xF3
0CED4:  CLRF   xF4
0CED6:  CLRF   xF5
0CED8:  CLRF   xF6
0CEDA:  CLRF   xF7
0CEDC:  CLRF   xF8
0CEDE:  CLRF   xF9
0CEE0:  CLRF   xFA
0CEE2:  CLRF   xFB
0CEE4:  CLRF   xFC
0CEE6:  CLRF   xFD
0CEE8:  CLRF   xFE
0CEEA:  CLRF   xFF
0CEEC:  MOVLB  3
0CEEE:  CLRF   x00
0CEF0:  CLRF   x01
0CEF2:  CLRF   x02
0CEF4:  CLRF   x03
0CEF6:  CLRF   x04
0CEF8:  CLRF   x05
0CEFA:  CLRF   x06
0CEFC:  CLRF   x07
0CEFE:  CLRF   x08
0CF00:  CLRF   x09
0CF02:  CLRF   x0A
0CF04:  CLRF   x0B
0CF06:  CLRF   x0C
0CF08:  CLRF   x0D
0CF0A:  CLRF   x0E
0CF0C:  CLRF   x0F
0CF0E:  CLRF   x10
0CF10:  CLRF   x11
0CF12:  CLRF   x12
0CF14:  CLRF   x13
0CF16:  CLRF   x14
0CF18:  CLRF   x15
0CF1A:  CLRF   x16
0CF1C:  CLRF   x17
0CF1E:  CLRF   x18
0CF20:  CLRF   x19
0CF22:  CLRF   x1A
0CF24:  CLRF   x1B
0CF26:  CLRF   x1C
0CF28:  CLRF   x1D
0CF2A:  CLRF   x1E
0CF2C:  CLRF   x1F
0CF2E:  CLRF   x20
0CF30:  CLRF   x21
0CF32:  CLRF   x22
0CF34:  CLRF   x23
0CF36:  CLRF   x24
0CF38:  CLRF   x25
0CF3A:  CLRF   x26
0CF3C:  CLRF   x27
0CF3E:  CLRF   x28
0CF40:  CLRF   x29
0CF42:  CLRF   x2A
0CF44:  CLRF   x2B
0CF46:  CLRF   x2C
0CF48:  CLRF   x2D
0CF4A:  CLRF   x2E
0CF4C:  CLRF   x2F
0CF4E:  CLRF   x30
0CF50:  CLRF   x31
0CF52:  CLRF   x32
0CF54:  CLRF   x33
0CF56:  CLRF   x34
0CF58:  CLRF   x35
0CF5A:  CLRF   x36
0CF5C:  CLRF   x37
0CF5E:  CLRF   x38
0CF60:  CLRF   x39
0CF62:  CLRF   x3A
0CF64:  CLRF   x3B
0CF66:  CLRF   x3C
0CF68:  CLRF   x3D
0CF6A:  CLRF   x3E
0CF6C:  CLRF   x3F
0CF6E:  CLRF   x40
0CF70:  CLRF   x41
0CF72:  CLRF   x42
0CF74:  CLRF   x43
0CF76:  CLRF   x44
0CF78:  CLRF   x45
0CF7A:  CLRF   x46
0CF7C:  CLRF   x47
0CF7E:  CLRF   x48
0CF80:  CLRF   x49
0CF82:  CLRF   x4A
0CF84:  CLRF   x4B
0CF86:  CLRF   x4C
0CF88:  CLRF   x4D
0CF8A:  CLRF   x4E
0CF8C:  CLRF   x4F
0CF8E:  CLRF   x50
0CF90:  CLRF   x51
0CF92:  CLRF   x52
0CF94:  CLRF   x53
0CF96:  CLRF   x54
0CF98:  CLRF   x55
0CF9A:  CLRF   x56
0CF9C:  CLRF   x57
0CF9E:  CLRF   x58
0CFA0:  CLRF   x59
0CFA2:  CLRF   x5A
0CFA4:  CLRF   x5B
0CFA6:  CLRF   x5C
0CFA8:  CLRF   x5D
0CFAA:  CLRF   x5E
0CFAC:  CLRF   x5F
0CFAE:  CLRF   x60
0CFB0:  CLRF   x61
0CFB2:  CLRF   x62
0CFB4:  CLRF   x63
0CFB6:  CLRF   x64
0CFB8:  CLRF   x65
0CFBA:  CLRF   x66
0CFBC:  CLRF   x67
0CFBE:  CLRF   x68
0CFC0:  CLRF   x69
0CFC2:  CLRF   x6A
0CFC4:  CLRF   x6B
0CFC6:  CLRF   x6C
0CFC8:  CLRF   x6D
0CFCA:  CLRF   x6E
0CFCC:  CLRF   x6F
0CFCE:  CLRF   x70
0CFD0:  CLRF   x71
0CFD2:  CLRF   x72
0CFD4:  CLRF   x73
0CFD6:  CLRF   x74
0CFD8:  CLRF   x75
0CFDA:  CLRF   x76
0CFDC:  CLRF   x77
0CFDE:  CLRF   x78
0CFE0:  CLRF   x79
0CFE2:  CLRF   x7A
0CFE4:  CLRF   x7B
0CFE6:  CLRF   x7C
0CFE8:  CLRF   x7D
0CFEA:  CLRF   x7E
0CFEC:  CLRF   x7F
0CFEE:  CLRF   x80
0CFF0:  CLRF   x81
0CFF2:  CLRF   x82
0CFF4:  CLRF   x83
0CFF6:  CLRF   x84
0CFF8:  CLRF   x85
0CFFA:  CLRF   x86
0CFFC:  CLRF   x87
0CFFE:  CLRF   x88
0D000:  CLRF   x89
0D002:  CLRF   x8A
0D004:  CLRF   x8B
0D006:  CLRF   x8C
0D008:  CLRF   x8D
0D00A:  CLRF   x8E
0D00C:  CLRF   x8F
0D00E:  CLRF   x90
0D010:  CLRF   x91
0D012:  CLRF   x92
0D014:  CLRF   x93
0D016:  CLRF   x94
0D018:  CLRF   x95
0D01A:  CLRF   x96
0D01C:  CLRF   x97
0D01E:  CLRF   x98
0D020:  CLRF   x99
0D022:  CLRF   x9A
0D024:  CLRF   x9B
0D026:  CLRF   x9C
0D028:  CLRF   x9D
0D02A:  CLRF   x9E
0D02C:  CLRF   x9F
0D02E:  CLRF   xA0
0D030:  CLRF   xA1
0D032:  CLRF   xA2
0D034:  CLRF   xA3
0D036:  CLRF   xA4
0D038:  CLRF   xA5
0D03A:  CLRF   xA6
0D03C:  CLRF   xA7
0D03E:  CLRF   xA8
0D040:  CLRF   xA9
0D042:  CLRF   xAA
0D044:  CLRF   xAB
0D046:  CLRF   xAC
0D048:  CLRF   xAD
0D04A:  CLRF   xAE
0D04C:  CLRF   xAF
0D04E:  CLRF   xB0
0D050:  CLRF   xB1
0D052:  CLRF   xB2
0D054:  CLRF   xB3
0D056:  CLRF   xB4
0D058:  CLRF   xB5
0D05A:  CLRF   xB6
0D05C:  CLRF   xB7
0D05E:  CLRF   xB8
0D060:  CLRF   xB9
0D062:  CLRF   xBA
0D064:  CLRF   xBB
0D066:  CLRF   xBC
0D068:  CLRF   xBD
0D06A:  CLRF   xBE
0D06C:  CLRF   xBF
0D06E:  CLRF   xC0
0D070:  CLRF   xC1
0D072:  CLRF   xC2
0D074:  CLRF   xC3
0D076:  CLRF   xC4
0D078:  CLRF   xC5
0D07A:  CLRF   xC6
0D07C:  CLRF   xC7
0D07E:  CLRF   xC8
0D080:  CLRF   xC9
0D082:  CLRF   xCA
0D084:  CLRF   xCB
0D086:  CLRF   xCC
0D088:  CLRF   xCD
0D08A:  CLRF   xCE
0D08C:  CLRF   xCF
0D08E:  CLRF   xD0
0D090:  CLRF   xD1
0D092:  CLRF   xD2
0D094:  CLRF   xD3
0D096:  CLRF   xD4
0D098:  CLRF   xD5
0D09A:  CLRF   xD6
0D09C:  CLRF   xD7
0D09E:  CLRF   xD8
0D0A0:  CLRF   xD9
0D0A2:  CLRF   xDA
0D0A4:  CLRF   xDB
0D0A6:  CLRF   xDC
0D0A8:  CLRF   xDD
0D0AA:  CLRF   xDE
0D0AC:  CLRF   xDF
0D0AE:  CLRF   xE0
0D0B0:  CLRF   xE1
0D0B2:  CLRF   xE2
0D0B4:  CLRF   xE3
0D0B6:  CLRF   xE4
0D0B8:  CLRF   xE5
0D0BA:  CLRF   xE6
0D0BC:  CLRF   xE7
0D0BE:  CLRF   xE8
0D0C0:  CLRF   xE9
0D0C2:  CLRF   xEA
0D0C4:  CLRF   xEB
0D0C6:  CLRF   xEC
0D0C8:  CLRF   xED
0D0CA:  CLRF   xEE
0D0CC:  CLRF   xEF
0D0CE:  CLRF   xF0
0D0D0:  CLRF   xF1
0D0D2:  CLRF   xF2
0D0D4:  CLRF   xF3
0D0D6:  CLRF   xF4
0D0D8:  CLRF   xF5
0D0DA:  CLRF   xF6
0D0DC:  CLRF   xF7
0D0DE:  CLRF   xF8
0D0E0:  CLRF   xF9
0D0E2:  CLRF   xFA
0D0E4:  CLRF   xFB
0D0E6:  CLRF   xFC
0D0E8:  CLRF   xFD
0D0EA:  CLRF   xFE
0D0EC:  CLRF   xFF
0D0EE:  MOVLB  4
0D0F0:  CLRF   x00
0D0F2:  CLRF   x01
0D0F4:  CLRF   x02
0D0F6:  CLRF   x03
0D0F8:  CLRF   x04
0D0FA:  CLRF   x05
0D0FC:  CLRF   x06
0D0FE:  CLRF   x07
0D100:  CLRF   x08
0D102:  CLRF   x09
0D104:  CLRF   x0A
0D106:  CLRF   x0B
0D108:  CLRF   x0C
0D10A:  CLRF   x0D
0D10C:  CLRF   x0E
0D10E:  CLRF   x0F
0D110:  CLRF   x10
0D112:  CLRF   x11
0D114:  CLRF   x12
0D116:  CLRF   x13
0D118:  CLRF   x14
0D11A:  CLRF   x15
0D11C:  CLRF   x16
0D11E:  CLRF   x17
0D120:  CLRF   x18
0D122:  CLRF   x19
0D124:  CLRF   x1A
0D126:  CLRF   x1B
0D128:  CLRF   x1C
0D12A:  CLRF   x1D
0D12C:  CLRF   x1E
0D12E:  CLRF   x1F
0D130:  CLRF   x20
0D132:  CLRF   x21
0D134:  CLRF   x22
0D136:  CLRF   x23
0D138:  CLRF   x24
0D13A:  CLRF   x25
0D13C:  CLRF   x26
0D13E:  CLRF   x27
0D140:  CLRF   x28
0D142:  CLRF   x29
0D144:  CLRF   x2A
0D146:  CLRF   x2B
0D148:  CLRF   x2C
0D14A:  CLRF   x2D
0D14C:  CLRF   x2E
0D14E:  CLRF   x2F
0D150:  CLRF   x30
0D152:  CLRF   x31
0D154:  CLRF   x32
0D156:  CLRF   x33
0D158:  CLRF   x34
0D15A:  CLRF   x35
0D15C:  CLRF   x36
0D15E:  CLRF   x37
0D160:  CLRF   x38
0D162:  CLRF   x39
0D164:  CLRF   x3A
0D166:  CLRF   x3B
0D168:  CLRF   x3C
0D16A:  CLRF   x3D
0D16C:  CLRF   x3E
0D16E:  CLRF   x3F
0D170:  CLRF   x40
0D172:  CLRF   x41
0D174:  CLRF   x42
0D176:  CLRF   x43
0D178:  CLRF   x44
0D17A:  CLRF   x45
0D17C:  CLRF   x46
0D17E:  CLRF   x47
0D180:  CLRF   x48
0D182:  CLRF   x49
0D184:  CLRF   x4A
0D186:  CLRF   x4B
0D188:  CLRF   x4C
0D18A:  CLRF   x4D
0D18C:  CLRF   x4E
0D18E:  CLRF   x4F
0D190:  CLRF   x50
0D192:  CLRF   x51
0D194:  CLRF   x52
0D196:  CLRF   x53
0D198:  CLRF   x54
0D19A:  CLRF   x55
0D19C:  CLRF   x56
0D19E:  CLRF   x57
0D1A0:  CLRF   x58
0D1A2:  CLRF   x59
0D1A4:  CLRF   x5A
0D1A6:  CLRF   x5B
0D1A8:  CLRF   x5C
0D1AA:  CLRF   x5D
0D1AC:  CLRF   x5E
0D1AE:  CLRF   x5F
0D1B0:  CLRF   x60
0D1B2:  CLRF   x61
0D1B4:  CLRF   x62
0D1B6:  CLRF   x63
0D1B8:  CLRF   x64
0D1BA:  CLRF   x65
0D1BC:  CLRF   x66
0D1BE:  CLRF   x67
0D1C0:  CLRF   x68
0D1C2:  CLRF   x69
0D1C4:  CLRF   x6A
0D1C6:  CLRF   x6B
0D1C8:  CLRF   x6C
0D1CA:  CLRF   x6D
0D1CC:  CLRF   x6E
0D1CE:  CLRF   x6F
0D1D0:  CLRF   x70
0D1D2:  CLRF   x71
0D1D4:  CLRF   x72
0D1D6:  CLRF   x73
0D1D8:  CLRF   x74
0D1DA:  CLRF   x75
0D1DC:  CLRF   x76
0D1DE:  CLRF   x77
0D1E0:  CLRF   x78
0D1E2:  CLRF   x79
0D1E4:  CLRF   x7A
0D1E6:  CLRF   x7B
0D1E8:  CLRF   x7C
0D1EA:  CLRF   x7D
0D1EC:  CLRF   x7E
0D1EE:  CLRF   x7F
0D1F0:  CLRF   x80
0D1F2:  CLRF   x81
0D1F4:  CLRF   x82
0D1F6:  CLRF   x83
0D1F8:  CLRF   x84
0D1FA:  CLRF   x85
0D1FC:  CLRF   x86
0D1FE:  CLRF   x87
0D200:  CLRF   x88
0D202:  CLRF   x89
0D204:  CLRF   x8A
0D206:  CLRF   x8B
0D208:  CLRF   x8C
0D20A:  CLRF   x8D
0D20C:  CLRF   x8E
0D20E:  CLRF   x8F
0D210:  CLRF   x90
0D212:  CLRF   x91
0D214:  CLRF   x92
0D216:  CLRF   x93
0D218:  CLRF   x94
0D21A:  CLRF   x95
0D21C:  CLRF   x96
0D21E:  CLRF   x97
0D220:  CLRF   x98
0D222:  CLRF   x99
0D224:  CLRF   x9A
0D226:  CLRF   x9B
0D228:  CLRF   x9C
0D22A:  CLRF   x9D
0D22C:  CLRF   x9E
0D22E:  CLRF   x9F
0D230:  CLRF   xA0
0D232:  CLRF   xA1
0D234:  CLRF   xA2
0D236:  CLRF   xA3
0D238:  CLRF   xA4
0D23A:  CLRF   xA5
0D23C:  CLRF   xA6
0D23E:  CLRF   xA7
0D240:  CLRF   xA8
0D242:  CLRF   xA9
0D244:  CLRF   xAA
0D246:  CLRF   xAB
0D248:  CLRF   xAC
0D24A:  CLRF   xAD
0D24C:  CLRF   xAE
0D24E:  CLRF   xAF
0D250:  CLRF   xB0
0D252:  CLRF   xB1
0D254:  CLRF   xB2
0D256:  CLRF   xB3
0D258:  CLRF   xB4
0D25A:  CLRF   xB5
0D25C:  CLRF   xB6
0D25E:  CLRF   xB7
0D260:  CLRF   xB8
0D262:  CLRF   xB9
0D264:  CLRF   xBA
0D266:  CLRF   xBB
0D268:  CLRF   xBC
0D26A:  CLRF   xBD
0D26C:  CLRF   xBE
0D26E:  CLRF   xBF
0D270:  CLRF   xC0
0D272:  CLRF   xC1
0D274:  CLRF   xC2
0D276:  CLRF   xC3
0D278:  CLRF   xC4
0D27A:  CLRF   xC5
0D27C:  CLRF   xC6
0D27E:  CLRF   xC7
0D280:  CLRF   xC8
0D282:  CLRF   xC9
0D284:  CLRF   xCA
0D286:  CLRF   xCB
0D288:  CLRF   xCC
0D28A:  CLRF   xCD
0D28C:  CLRF   xCE
0D28E:  CLRF   xCF
0D290:  CLRF   xD0
0D292:  CLRF   xD1
0D294:  CLRF   xD2
0D296:  CLRF   xD3
0D298:  CLRF   xD4
0D29A:  CLRF   xD5
0D29C:  CLRF   xD6
0D29E:  CLRF   xD7
0D2A0:  CLRF   xD8
0D2A2:  CLRF   xD9
0D2A4:  CLRF   xDA
0D2A6:  CLRF   xDB
0D2A8:  CLRF   xDC
0D2AA:  CLRF   xDD
0D2AC:  CLRF   xDE
0D2AE:  CLRF   xDF
0D2B0:  CLRF   xE0
0D2B2:  CLRF   xE1
0D2B4:  CLRF   xE2
0D2B6:  CLRF   xE3
0D2B8:  CLRF   xE4
0D2BA:  CLRF   xE5
0D2BC:  CLRF   xE6
0D2BE:  CLRF   xE7
0D2C0:  CLRF   xE8
0D2C2:  CLRF   xE9
0D2C4:  CLRF   xEA
0D2C6:  CLRF   xEB
0D2C8:  CLRF   xEC
0D2CA:  CLRF   xED
0D2CC:  CLRF   xEE
0D2CE:  CLRF   xEF
0D2D0:  CLRF   xF0
0D2D2:  CLRF   xF1
0D2D4:  CLRF   xF2
0D2D6:  CLRF   xF3
0D2D8:  CLRF   xF4
0D2DA:  CLRF   xF5
0D2DC:  CLRF   xF6
0D2DE:  CLRF   xF7
0D2E0:  CLRF   xF8
0D2E2:  CLRF   xF9
0D2E4:  CLRF   xFA
0D2E6:  CLRF   xFB
0D2E8:  CLRF   xFC
0D2EA:  CLRF   xFD
0D2EC:  CLRF   xFE
0D2EE:  CLRF   xFF
0D2F0:  MOVLB  5
0D2F2:  CLRF   x00
0D2F4:  CLRF   x01
0D2F6:  CLRF   x02
0D2F8:  CLRF   x03
0D2FA:  CLRF   x04
0D2FC:  CLRF   x05
0D2FE:  CLRF   x06
0D300:  CLRF   x07
0D302:  CLRF   x08
0D304:  CLRF   x09
0D306:  CLRF   x0A
0D308:  CLRF   x0B
0D30A:  CLRF   x0C
0D30C:  CLRF   x0D
0D30E:  CLRF   x0E
0D310:  CLRF   x0F
0D312:  CLRF   x10
0D314:  CLRF   x11
0D316:  CLRF   x12
0D318:  CLRF   x13
0D31A:  CLRF   x14
0D31C:  CLRF   x15
0D31E:  CLRF   x16
0D320:  CLRF   x17
0D322:  CLRF   x18
0D324:  CLRF   x19
0D326:  CLRF   x1A
0D328:  CLRF   x1B
0D32A:  CLRF   x1C
0D32C:  CLRF   x1D
0D32E:  CLRF   x1E
0D330:  CLRF   x1F
0D332:  CLRF   x20
0D334:  CLRF   x21
0D336:  CLRF   x22
0D338:  CLRF   x23
0D33A:  CLRF   x24
0D33C:  CLRF   x25
0D33E:  CLRF   x26
0D340:  CLRF   x27
0D342:  CLRF   x28
0D344:  CLRF   x29
0D346:  CLRF   x2A
0D348:  CLRF   x2B
0D34A:  CLRF   x2C
0D34C:  CLRF   x2D
0D34E:  CLRF   x2E
0D350:  CLRF   x2F
0D352:  CLRF   x30
0D354:  CLRF   x31
0D356:  CLRF   x32
0D358:  CLRF   x33
0D35A:  CLRF   x34
0D35C:  CLRF   x35
0D35E:  CLRF   x36
0D360:  CLRF   x37
0D362:  CLRF   x38
0D364:  CLRF   x39
0D366:  CLRF   x3A
0D368:  CLRF   x3B
0D36A:  CLRF   x3C
0D36C:  CLRF   x3D
0D36E:  CLRF   x3E
0D370:  CLRF   x3F
0D372:  CLRF   x40
0D374:  CLRF   x41
0D376:  CLRF   x42
0D378:  CLRF   x43
0D37A:  CLRF   x44
0D37C:  CLRF   x45
0D37E:  CLRF   x46
0D380:  CLRF   x47
0D382:  CLRF   x48
0D384:  CLRF   x49
0D386:  CLRF   x4A
0D388:  CLRF   x4B
0D38A:  CLRF   x4C
0D38C:  CLRF   x4D
0D38E:  CLRF   x4E
0D390:  CLRF   x4F
0D392:  CLRF   x50
0D394:  CLRF   x51
0D396:  CLRF   x52
0D398:  CLRF   x53
0D39A:  CLRF   x54
0D39C:  CLRF   x55
0D39E:  CLRF   x56
0D3A0:  CLRF   x57
0D3A2:  CLRF   x58
0D3A4:  CLRF   x59
0D3A6:  CLRF   x5A
0D3A8:  CLRF   x5B
0D3AA:  CLRF   x5C
0D3AC:  CLRF   x5D
0D3AE:  CLRF   x5E
0D3B0:  CLRF   x5F
0D3B2:  CLRF   x60
0D3B4:  CLRF   x61
0D3B6:  CLRF   x62
0D3B8:  CLRF   x63
0D3BA:  CLRF   x64
0D3BC:  CLRF   x65
0D3BE:  CLRF   x66
0D3C0:  CLRF   x67
0D3C2:  CLRF   x68
0D3C4:  CLRF   x69
0D3C6:  CLRF   x6A
0D3C8:  CLRF   x6B
0D3CA:  CLRF   x6C
0D3CC:  CLRF   x6D
0D3CE:  CLRF   x6E
0D3D0:  CLRF   x6F
0D3D2:  CLRF   x70
0D3D4:  CLRF   x71
0D3D6:  CLRF   x72
0D3D8:  CLRF   x73
0D3DA:  CLRF   x74
0D3DC:  CLRF   x75
0D3DE:  CLRF   x76
0D3E0:  CLRF   x77
0D3E2:  CLRF   x78
0D3E4:  CLRF   x79
0D3E6:  CLRF   x7A
0D3E8:  CLRF   x7B
0D3EA:  CLRF   x7C
0D3EC:  CLRF   x7D
0D3EE:  CLRF   x7E
0D3F0:  CLRF   x7F
0D3F2:  CLRF   x80
0D3F4:  CLRF   x81
0D3F6:  CLRF   x82
0D3F8:  CLRF   x83
0D3FA:  CLRF   x84
0D3FC:  CLRF   x85
0D3FE:  CLRF   x86
0D400:  CLRF   x87
0D402:  CLRF   x88
0D404:  CLRF   x89
0D406:  CLRF   x8A
0D408:  CLRF   x8B
0D40A:  CLRF   x8C
0D40C:  CLRF   x8D
0D40E:  CLRF   x8E
0D410:  CLRF   x8F
0D412:  CLRF   x90
0D414:  CLRF   x91
0D416:  CLRF   x92
0D418:  CLRF   x93
0D41A:  CLRF   x94
0D41C:  CLRF   x95
0D41E:  CLRF   x96
0D420:  CLRF   x97
0D422:  CLRF   x98
0D424:  CLRF   x99
0D426:  CLRF   x9A
0D428:  CLRF   x9B
0D42A:  CLRF   x9C
0D42C:  CLRF   x9D
0D42E:  CLRF   x9E
0D430:  CLRF   x9F
0D432:  CLRF   xA0
0D434:  CLRF   xA1
0D436:  CLRF   xA2
0D438:  CLRF   xA3
0D43A:  CLRF   xA4
0D43C:  CLRF   xA5
0D43E:  CLRF   xA6
0D440:  CLRF   xA7
0D442:  CLRF   xA8
0D444:  CLRF   xA9
0D446:  CLRF   xAA
0D448:  CLRF   xAB
0D44A:  CLRF   xAC
0D44C:  CLRF   xAD
0D44E:  CLRF   xAE
0D450:  CLRF   xAF
0D452:  CLRF   xB0
0D454:  CLRF   xB1
0D456:  CLRF   xB2
0D458:  CLRF   xB3
0D45A:  CLRF   xB4
0D45C:  CLRF   xB5
0D45E:  CLRF   xB6
0D460:  CLRF   xB7
0D462:  CLRF   xB8
0D464:  CLRF   xB9
0D466:  CLRF   xBA
0D468:  CLRF   xBB
0D46A:  CLRF   xBC
0D46C:  CLRF   xBD
0D46E:  CLRF   xBE
0D470:  CLRF   xBF
0D472:  CLRF   xC0
0D474:  CLRF   xC1
0D476:  CLRF   xC2
0D478:  CLRF   xC3
0D47A:  CLRF   xC4
0D47C:  CLRF   xC5
0D47E:  CLRF   xC6
0D480:  CLRF   xC7
0D482:  CLRF   xC8
0D484:  CLRF   xC9
0D486:  CLRF   xCA
0D488:  CLRF   xCB
0D48A:  CLRF   xCC
0D48C:  CLRF   xCD
0D48E:  CLRF   xCE
0D490:  CLRF   xCF
0D492:  CLRF   xD0
0D494:  CLRF   xD1
0D496:  CLRF   xD2
0D498:  CLRF   xD3
0D49A:  CLRF   xD4
0D49C:  CLRF   xD5
0D49E:  CLRF   xD6
0D4A0:  CLRF   xD7
0D4A2:  CLRF   xD8
0D4A4:  CLRF   xD9
0D4A6:  CLRF   xDA
0D4A8:  CLRF   xDB
0D4AA:  CLRF   xDC
0D4AC:  CLRF   xDD
0D4AE:  CLRF   xDE
0D4B0:  CLRF   xDF
0D4B2:  CLRF   xE0
0D4B4:  CLRF   xE1
0D4B6:  CLRF   xE2
0D4B8:  CLRF   xE3
0D4BA:  CLRF   xE4
0D4BC:  CLRF   xE5
0D4BE:  CLRF   xE6
0D4C0:  CLRF   xE7
0D4C2:  CLRF   xE8
0D4C4:  CLRF   xE9
0D4C6:  CLRF   xEA
0D4C8:  CLRF   xEB
0D4CA:  CLRF   xEC
0D4CC:  CLRF   xED
0D4CE:  CLRF   xEE
0D4D0:  CLRF   xEF
0D4D2:  CLRF   xF0
0D4D4:  CLRF   xF1
0D4D6:  CLRF   xF2
0D4D8:  CLRF   xF3
0D4DA:  CLRF   xF4
0D4DC:  CLRF   xF5
0D4DE:  CLRF   xF6
0D4E0:  CLRF   xF7
0D4E2:  CLRF   xF8
0D4E4:  CLRF   xF9
0D4E6:  CLRF   xFA
0D4E8:  CLRF   xFB
0D4EA:  CLRF   xFC
0D4EC:  CLRF   xFD
0D4EE:  CLRF   xFE
0D4F0:  CLRF   xFF
0D4F2:  MOVLB  6
0D4F4:  CLRF   x00
0D4F6:  CLRF   x01
0D4F8:  CLRF   x02
0D4FA:  CLRF   x03
0D4FC:  CLRF   x04
0D4FE:  CLRF   x05
0D500:  CLRF   x06
0D502:  CLRF   x07
0D504:  CLRF   x08
0D506:  CLRF   x09
0D508:  CLRF   x0A
0D50A:  CLRF   x0B
0D50C:  CLRF   x0C
0D50E:  CLRF   x0D
0D510:  CLRF   x0E
0D512:  CLRF   x0F
0D514:  CLRF   x10
0D516:  CLRF   x11
0D518:  CLRF   x12
0D51A:  CLRF   x13
0D51C:  CLRF   x14
0D51E:  CLRF   x15
0D520:  CLRF   x16
0D522:  CLRF   x17
0D524:  CLRF   x18
0D526:  CLRF   x19
0D528:  CLRF   x1A
0D52A:  CLRF   x1B
0D52C:  CLRF   x1C
0D52E:  CLRF   x1D
0D530:  CLRF   x1E
0D532:  CLRF   x1F
0D534:  CLRF   x20
0D536:  CLRF   x21
0D538:  CLRF   x22
0D53A:  CLRF   x23
0D53C:  CLRF   x24
0D53E:  CLRF   x25
0D540:  CLRF   x26
0D542:  CLRF   x27
0D544:  CLRF   x28
0D546:  CLRF   x29
0D548:  CLRF   x2A
0D54A:  CLRF   x2B
0D54C:  CLRF   x2C
0D54E:  CLRF   x2D
0D550:  CLRF   x2E
0D552:  CLRF   x2F
0D554:  CLRF   x30
0D556:  CLRF   x31
0D558:  CLRF   x32
0D55A:  CLRF   x33
0D55C:  CLRF   x34
0D55E:  CLRF   x35
0D560:  CLRF   x36
0D562:  CLRF   x37
0D564:  CLRF   x38
0D566:  CLRF   x39
0D568:  CLRF   x3A
0D56A:  CLRF   x3B
0D56C:  CLRF   x3C
0D56E:  CLRF   x3D
0D570:  CLRF   x3E
0D572:  CLRF   x3F
0D574:  CLRF   x40
0D576:  CLRF   x41
....................     port1.port_num = 1;
0D578:  MOVLW  01
0D57A:  MOVLB  2
0D57C:  MOVWF  x42
....................     port1.sweep_step = 0;
0D57E:  CLRF   x44
0D580:  CLRF   x43
....................     port1.active = 1;
0D582:  MOVLB  6
0D584:  BSF    x41.0
.................... 
....................     // Init Port2
....................     sweep_config_t port2 = {0};
0D586:  CLRF   x42
0D588:  CLRF   x43
0D58A:  CLRF   x44
0D58C:  CLRF   x45
0D58E:  CLRF   x46
0D590:  CLRF   x47
0D592:  CLRF   x48
0D594:  CLRF   x49
0D596:  CLRF   x4A
0D598:  CLRF   x4B
0D59A:  CLRF   x4C
0D59C:  CLRF   x4D
0D59E:  CLRF   x4E
0D5A0:  CLRF   x4F
0D5A2:  CLRF   x50
0D5A4:  CLRF   x51
0D5A6:  CLRF   x52
0D5A8:  CLRF   x53
0D5AA:  CLRF   x54
0D5AC:  CLRF   x55
0D5AE:  CLRF   x56
0D5B0:  CLRF   x57
0D5B2:  CLRF   x58
0D5B4:  CLRF   x59
0D5B6:  CLRF   x5A
0D5B8:  CLRF   x5B
0D5BA:  CLRF   x5C
0D5BC:  CLRF   x5D
0D5BE:  CLRF   x5E
0D5C0:  CLRF   x5F
0D5C2:  CLRF   x60
0D5C4:  CLRF   x61
0D5C6:  CLRF   x62
0D5C8:  CLRF   x63
0D5CA:  CLRF   x64
0D5CC:  CLRF   x65
0D5CE:  CLRF   x66
0D5D0:  CLRF   x67
0D5D2:  CLRF   x68
0D5D4:  CLRF   x69
0D5D6:  CLRF   x6A
0D5D8:  CLRF   x6B
0D5DA:  CLRF   x6C
0D5DC:  CLRF   x6D
0D5DE:  CLRF   x6E
0D5E0:  CLRF   x6F
0D5E2:  CLRF   x70
0D5E4:  CLRF   x71
0D5E6:  CLRF   x72
0D5E8:  CLRF   x73
0D5EA:  CLRF   x74
0D5EC:  CLRF   x75
0D5EE:  CLRF   x76
0D5F0:  CLRF   x77
0D5F2:  CLRF   x78
0D5F4:  CLRF   x79
0D5F6:  CLRF   x7A
0D5F8:  CLRF   x7B
0D5FA:  CLRF   x7C
0D5FC:  CLRF   x7D
0D5FE:  CLRF   x7E
0D600:  CLRF   x7F
0D602:  CLRF   x80
0D604:  CLRF   x81
0D606:  CLRF   x82
0D608:  CLRF   x83
0D60A:  CLRF   x84
0D60C:  CLRF   x85
0D60E:  CLRF   x86
0D610:  CLRF   x87
0D612:  CLRF   x88
0D614:  CLRF   x89
0D616:  CLRF   x8A
0D618:  CLRF   x8B
0D61A:  CLRF   x8C
0D61C:  CLRF   x8D
0D61E:  CLRF   x8E
0D620:  CLRF   x8F
0D622:  CLRF   x90
0D624:  CLRF   x91
0D626:  CLRF   x92
0D628:  CLRF   x93
0D62A:  CLRF   x94
0D62C:  CLRF   x95
0D62E:  CLRF   x96
0D630:  CLRF   x97
0D632:  CLRF   x98
0D634:  CLRF   x99
0D636:  CLRF   x9A
0D638:  CLRF   x9B
0D63A:  CLRF   x9C
0D63C:  CLRF   x9D
0D63E:  CLRF   x9E
0D640:  CLRF   x9F
0D642:  CLRF   xA0
0D644:  CLRF   xA1
0D646:  CLRF   xA2
0D648:  CLRF   xA3
0D64A:  CLRF   xA4
0D64C:  CLRF   xA5
0D64E:  CLRF   xA6
0D650:  CLRF   xA7
0D652:  CLRF   xA8
0D654:  CLRF   xA9
0D656:  CLRF   xAA
0D658:  CLRF   xAB
0D65A:  CLRF   xAC
0D65C:  CLRF   xAD
0D65E:  CLRF   xAE
0D660:  CLRF   xAF
0D662:  CLRF   xB0
0D664:  CLRF   xB1
0D666:  CLRF   xB2
0D668:  CLRF   xB3
0D66A:  CLRF   xB4
0D66C:  CLRF   xB5
0D66E:  CLRF   xB6
0D670:  CLRF   xB7
0D672:  CLRF   xB8
0D674:  CLRF   xB9
0D676:  CLRF   xBA
0D678:  CLRF   xBB
0D67A:  CLRF   xBC
0D67C:  CLRF   xBD
0D67E:  CLRF   xBE
0D680:  CLRF   xBF
0D682:  CLRF   xC0
0D684:  CLRF   xC1
0D686:  CLRF   xC2
0D688:  CLRF   xC3
0D68A:  CLRF   xC4
0D68C:  CLRF   xC5
0D68E:  CLRF   xC6
0D690:  CLRF   xC7
0D692:  CLRF   xC8
0D694:  CLRF   xC9
0D696:  CLRF   xCA
0D698:  CLRF   xCB
0D69A:  CLRF   xCC
0D69C:  CLRF   xCD
0D69E:  CLRF   xCE
0D6A0:  CLRF   xCF
0D6A2:  CLRF   xD0
0D6A4:  CLRF   xD1
0D6A6:  CLRF   xD2
0D6A8:  CLRF   xD3
0D6AA:  CLRF   xD4
0D6AC:  CLRF   xD5
0D6AE:  CLRF   xD6
0D6B0:  CLRF   xD7
0D6B2:  CLRF   xD8
0D6B4:  CLRF   xD9
0D6B6:  CLRF   xDA
0D6B8:  CLRF   xDB
0D6BA:  CLRF   xDC
0D6BC:  CLRF   xDD
0D6BE:  CLRF   xDE
0D6C0:  CLRF   xDF
0D6C2:  CLRF   xE0
0D6C4:  CLRF   xE1
0D6C6:  CLRF   xE2
0D6C8:  CLRF   xE3
0D6CA:  CLRF   xE4
0D6CC:  CLRF   xE5
0D6CE:  CLRF   xE6
0D6D0:  CLRF   xE7
0D6D2:  CLRF   xE8
0D6D4:  CLRF   xE9
0D6D6:  CLRF   xEA
0D6D8:  CLRF   xEB
0D6DA:  CLRF   xEC
0D6DC:  CLRF   xED
0D6DE:  CLRF   xEE
0D6E0:  CLRF   xEF
0D6E2:  CLRF   xF0
0D6E4:  CLRF   xF1
0D6E6:  CLRF   xF2
0D6E8:  CLRF   xF3
0D6EA:  CLRF   xF4
0D6EC:  CLRF   xF5
0D6EE:  CLRF   xF6
0D6F0:  CLRF   xF7
0D6F2:  CLRF   xF8
0D6F4:  CLRF   xF9
0D6F6:  CLRF   xFA
0D6F8:  CLRF   xFB
0D6FA:  CLRF   xFC
0D6FC:  CLRF   xFD
0D6FE:  CLRF   xFE
0D700:  CLRF   xFF
0D702:  MOVLB  7
0D704:  CLRF   x00
0D706:  CLRF   x01
0D708:  CLRF   x02
0D70A:  CLRF   x03
0D70C:  CLRF   x04
0D70E:  CLRF   x05
0D710:  CLRF   x06
0D712:  CLRF   x07
0D714:  CLRF   x08
0D716:  CLRF   x09
0D718:  CLRF   x0A
0D71A:  CLRF   x0B
0D71C:  CLRF   x0C
0D71E:  CLRF   x0D
0D720:  CLRF   x0E
0D722:  CLRF   x0F
0D724:  CLRF   x10
0D726:  CLRF   x11
0D728:  CLRF   x12
0D72A:  CLRF   x13
0D72C:  CLRF   x14
0D72E:  CLRF   x15
0D730:  CLRF   x16
0D732:  CLRF   x17
0D734:  CLRF   x18
0D736:  CLRF   x19
0D738:  CLRF   x1A
0D73A:  CLRF   x1B
0D73C:  CLRF   x1C
0D73E:  CLRF   x1D
0D740:  CLRF   x1E
0D742:  CLRF   x1F
0D744:  CLRF   x20
0D746:  CLRF   x21
0D748:  CLRF   x22
0D74A:  CLRF   x23
0D74C:  CLRF   x24
0D74E:  CLRF   x25
0D750:  CLRF   x26
0D752:  CLRF   x27
0D754:  CLRF   x28
0D756:  CLRF   x29
0D758:  CLRF   x2A
0D75A:  CLRF   x2B
0D75C:  CLRF   x2C
0D75E:  CLRF   x2D
0D760:  CLRF   x2E
0D762:  CLRF   x2F
0D764:  CLRF   x30
0D766:  CLRF   x31
0D768:  CLRF   x32
0D76A:  CLRF   x33
0D76C:  CLRF   x34
0D76E:  CLRF   x35
0D770:  CLRF   x36
0D772:  CLRF   x37
0D774:  CLRF   x38
0D776:  CLRF   x39
0D778:  CLRF   x3A
0D77A:  CLRF   x3B
0D77C:  CLRF   x3C
0D77E:  CLRF   x3D
0D780:  CLRF   x3E
0D782:  CLRF   x3F
0D784:  CLRF   x40
0D786:  CLRF   x41
0D788:  CLRF   x42
0D78A:  CLRF   x43
0D78C:  CLRF   x44
0D78E:  CLRF   x45
0D790:  CLRF   x46
0D792:  CLRF   x47
0D794:  CLRF   x48
0D796:  CLRF   x49
0D798:  CLRF   x4A
0D79A:  CLRF   x4B
0D79C:  CLRF   x4C
0D79E:  CLRF   x4D
0D7A0:  CLRF   x4E
0D7A2:  CLRF   x4F
0D7A4:  CLRF   x50
0D7A6:  CLRF   x51
0D7A8:  CLRF   x52
0D7AA:  CLRF   x53
0D7AC:  CLRF   x54
0D7AE:  CLRF   x55
0D7B0:  CLRF   x56
0D7B2:  CLRF   x57
0D7B4:  CLRF   x58
0D7B6:  CLRF   x59
0D7B8:  CLRF   x5A
0D7BA:  CLRF   x5B
0D7BC:  CLRF   x5C
0D7BE:  CLRF   x5D
0D7C0:  CLRF   x5E
0D7C2:  CLRF   x5F
0D7C4:  CLRF   x60
0D7C6:  CLRF   x61
0D7C8:  CLRF   x62
0D7CA:  CLRF   x63
0D7CC:  CLRF   x64
0D7CE:  CLRF   x65
0D7D0:  CLRF   x66
0D7D2:  CLRF   x67
0D7D4:  CLRF   x68
0D7D6:  CLRF   x69
0D7D8:  CLRF   x6A
0D7DA:  CLRF   x6B
0D7DC:  CLRF   x6C
0D7DE:  CLRF   x6D
0D7E0:  CLRF   x6E
0D7E2:  CLRF   x6F
0D7E4:  CLRF   x70
0D7E6:  CLRF   x71
0D7E8:  CLRF   x72
0D7EA:  CLRF   x73
0D7EC:  CLRF   x74
0D7EE:  CLRF   x75
0D7F0:  CLRF   x76
0D7F2:  CLRF   x77
0D7F4:  CLRF   x78
0D7F6:  CLRF   x79
0D7F8:  CLRF   x7A
0D7FA:  CLRF   x7B
0D7FC:  CLRF   x7C
0D7FE:  CLRF   x7D
0D800:  CLRF   x7E
0D802:  CLRF   x7F
0D804:  CLRF   x80
0D806:  CLRF   x81
0D808:  CLRF   x82
0D80A:  CLRF   x83
0D80C:  CLRF   x84
0D80E:  CLRF   x85
0D810:  CLRF   x86
0D812:  CLRF   x87
0D814:  CLRF   x88
0D816:  CLRF   x89
0D818:  CLRF   x8A
0D81A:  CLRF   x8B
0D81C:  CLRF   x8C
0D81E:  CLRF   x8D
0D820:  CLRF   x8E
0D822:  CLRF   x8F
0D824:  CLRF   x90
0D826:  CLRF   x91
0D828:  CLRF   x92
0D82A:  CLRF   x93
0D82C:  CLRF   x94
0D82E:  CLRF   x95
0D830:  CLRF   x96
0D832:  CLRF   x97
0D834:  CLRF   x98
0D836:  CLRF   x99
0D838:  CLRF   x9A
0D83A:  CLRF   x9B
0D83C:  CLRF   x9C
0D83E:  CLRF   x9D
0D840:  CLRF   x9E
0D842:  CLRF   x9F
0D844:  CLRF   xA0
0D846:  CLRF   xA1
0D848:  CLRF   xA2
0D84A:  CLRF   xA3
0D84C:  CLRF   xA4
0D84E:  CLRF   xA5
0D850:  CLRF   xA6
0D852:  CLRF   xA7
0D854:  CLRF   xA8
0D856:  CLRF   xA9
0D858:  CLRF   xAA
0D85A:  CLRF   xAB
0D85C:  CLRF   xAC
0D85E:  CLRF   xAD
0D860:  CLRF   xAE
0D862:  CLRF   xAF
0D864:  CLRF   xB0
0D866:  CLRF   xB1
0D868:  CLRF   xB2
0D86A:  CLRF   xB3
0D86C:  CLRF   xB4
0D86E:  CLRF   xB5
0D870:  CLRF   xB6
0D872:  CLRF   xB7
0D874:  CLRF   xB8
0D876:  CLRF   xB9
0D878:  CLRF   xBA
0D87A:  CLRF   xBB
0D87C:  CLRF   xBC
0D87E:  CLRF   xBD
0D880:  CLRF   xBE
0D882:  CLRF   xBF
0D884:  CLRF   xC0
0D886:  CLRF   xC1
0D888:  CLRF   xC2
0D88A:  CLRF   xC3
0D88C:  CLRF   xC4
0D88E:  CLRF   xC5
0D890:  CLRF   xC6
0D892:  CLRF   xC7
0D894:  CLRF   xC8
0D896:  CLRF   xC9
0D898:  CLRF   xCA
0D89A:  CLRF   xCB
0D89C:  CLRF   xCC
0D89E:  CLRF   xCD
0D8A0:  CLRF   xCE
0D8A2:  CLRF   xCF
0D8A4:  CLRF   xD0
0D8A6:  CLRF   xD1
0D8A8:  CLRF   xD2
0D8AA:  CLRF   xD3
0D8AC:  CLRF   xD4
0D8AE:  CLRF   xD5
0D8B0:  CLRF   xD6
0D8B2:  CLRF   xD7
0D8B4:  CLRF   xD8
0D8B6:  CLRF   xD9
0D8B8:  CLRF   xDA
0D8BA:  CLRF   xDB
0D8BC:  CLRF   xDC
0D8BE:  CLRF   xDD
0D8C0:  CLRF   xDE
0D8C2:  CLRF   xDF
0D8C4:  CLRF   xE0
0D8C6:  CLRF   xE1
0D8C8:  CLRF   xE2
0D8CA:  CLRF   xE3
0D8CC:  CLRF   xE4
0D8CE:  CLRF   xE5
0D8D0:  CLRF   xE6
0D8D2:  CLRF   xE7
0D8D4:  CLRF   xE8
0D8D6:  CLRF   xE9
0D8D8:  CLRF   xEA
0D8DA:  CLRF   xEB
0D8DC:  CLRF   xEC
0D8DE:  CLRF   xED
0D8E0:  CLRF   xEE
0D8E2:  CLRF   xEF
0D8E4:  CLRF   xF0
0D8E6:  CLRF   xF1
0D8E8:  CLRF   xF2
0D8EA:  CLRF   xF3
0D8EC:  CLRF   xF4
0D8EE:  CLRF   xF5
0D8F0:  CLRF   xF6
0D8F2:  CLRF   xF7
0D8F4:  CLRF   xF8
0D8F6:  CLRF   xF9
0D8F8:  CLRF   xFA
0D8FA:  CLRF   xFB
0D8FC:  CLRF   xFC
0D8FE:  CLRF   xFD
0D900:  CLRF   xFE
0D902:  CLRF   xFF
0D904:  MOVLB  8
0D906:  CLRF   x00
0D908:  CLRF   x01
0D90A:  CLRF   x02
0D90C:  CLRF   x03
0D90E:  CLRF   x04
0D910:  CLRF   x05
0D912:  CLRF   x06
0D914:  CLRF   x07
0D916:  CLRF   x08
0D918:  CLRF   x09
0D91A:  CLRF   x0A
0D91C:  CLRF   x0B
0D91E:  CLRF   x0C
0D920:  CLRF   x0D
0D922:  CLRF   x0E
0D924:  CLRF   x0F
0D926:  CLRF   x10
0D928:  CLRF   x11
0D92A:  CLRF   x12
0D92C:  CLRF   x13
0D92E:  CLRF   x14
0D930:  CLRF   x15
0D932:  CLRF   x16
0D934:  CLRF   x17
0D936:  CLRF   x18
0D938:  CLRF   x19
0D93A:  CLRF   x1A
0D93C:  CLRF   x1B
0D93E:  CLRF   x1C
0D940:  CLRF   x1D
0D942:  CLRF   x1E
0D944:  CLRF   x1F
0D946:  CLRF   x20
0D948:  CLRF   x21
0D94A:  CLRF   x22
0D94C:  CLRF   x23
0D94E:  CLRF   x24
0D950:  CLRF   x25
0D952:  CLRF   x26
0D954:  CLRF   x27
0D956:  CLRF   x28
0D958:  CLRF   x29
0D95A:  CLRF   x2A
0D95C:  CLRF   x2B
0D95E:  CLRF   x2C
0D960:  CLRF   x2D
0D962:  CLRF   x2E
0D964:  CLRF   x2F
0D966:  CLRF   x30
0D968:  CLRF   x31
0D96A:  CLRF   x32
0D96C:  CLRF   x33
0D96E:  CLRF   x34
0D970:  CLRF   x35
0D972:  CLRF   x36
0D974:  CLRF   x37
0D976:  CLRF   x38
0D978:  CLRF   x39
0D97A:  CLRF   x3A
0D97C:  CLRF   x3B
0D97E:  CLRF   x3C
0D980:  CLRF   x3D
0D982:  CLRF   x3E
0D984:  CLRF   x3F
0D986:  CLRF   x40
0D988:  CLRF   x41
0D98A:  CLRF   x42
0D98C:  CLRF   x43
0D98E:  CLRF   x44
0D990:  CLRF   x45
0D992:  CLRF   x46
0D994:  CLRF   x47
0D996:  CLRF   x48
0D998:  CLRF   x49
0D99A:  CLRF   x4A
0D99C:  CLRF   x4B
0D99E:  CLRF   x4C
0D9A0:  CLRF   x4D
0D9A2:  CLRF   x4E
0D9A4:  CLRF   x4F
0D9A6:  CLRF   x50
0D9A8:  CLRF   x51
0D9AA:  CLRF   x52
0D9AC:  CLRF   x53
0D9AE:  CLRF   x54
0D9B0:  CLRF   x55
0D9B2:  CLRF   x56
0D9B4:  CLRF   x57
0D9B6:  CLRF   x58
0D9B8:  CLRF   x59
0D9BA:  CLRF   x5A
0D9BC:  CLRF   x5B
0D9BE:  CLRF   x5C
0D9C0:  CLRF   x5D
0D9C2:  CLRF   x5E
0D9C4:  CLRF   x5F
0D9C6:  CLRF   x60
0D9C8:  CLRF   x61
0D9CA:  CLRF   x62
0D9CC:  CLRF   x63
0D9CE:  CLRF   x64
0D9D0:  CLRF   x65
0D9D2:  CLRF   x66
0D9D4:  CLRF   x67
0D9D6:  CLRF   x68
0D9D8:  CLRF   x69
0D9DA:  CLRF   x6A
0D9DC:  CLRF   x6B
0D9DE:  CLRF   x6C
0D9E0:  CLRF   x6D
0D9E2:  CLRF   x6E
0D9E4:  CLRF   x6F
0D9E6:  CLRF   x70
0D9E8:  CLRF   x71
0D9EA:  CLRF   x72
0D9EC:  CLRF   x73
0D9EE:  CLRF   x74
0D9F0:  CLRF   x75
0D9F2:  CLRF   x76
0D9F4:  CLRF   x77
0D9F6:  CLRF   x78
0D9F8:  CLRF   x79
0D9FA:  CLRF   x7A
0D9FC:  CLRF   x7B
0D9FE:  CLRF   x7C
0DA00:  CLRF   x7D
0DA02:  CLRF   x7E
0DA04:  CLRF   x7F
0DA06:  CLRF   x80
0DA08:  CLRF   x81
0DA0A:  CLRF   x82
0DA0C:  CLRF   x83
0DA0E:  CLRF   x84
0DA10:  CLRF   x85
0DA12:  CLRF   x86
0DA14:  CLRF   x87
0DA16:  CLRF   x88
0DA18:  CLRF   x89
0DA1A:  CLRF   x8A
0DA1C:  CLRF   x8B
0DA1E:  CLRF   x8C
0DA20:  CLRF   x8D
0DA22:  CLRF   x8E
0DA24:  CLRF   x8F
0DA26:  CLRF   x90
0DA28:  CLRF   x91
0DA2A:  CLRF   x92
0DA2C:  CLRF   x93
0DA2E:  CLRF   x94
0DA30:  CLRF   x95
0DA32:  CLRF   x96
0DA34:  CLRF   x97
0DA36:  CLRF   x98
0DA38:  CLRF   x99
0DA3A:  CLRF   x9A
0DA3C:  CLRF   x9B
0DA3E:  CLRF   x9C
0DA40:  CLRF   x9D
0DA42:  CLRF   x9E
0DA44:  CLRF   x9F
0DA46:  CLRF   xA0
0DA48:  CLRF   xA1
0DA4A:  CLRF   xA2
0DA4C:  CLRF   xA3
0DA4E:  CLRF   xA4
0DA50:  CLRF   xA5
0DA52:  CLRF   xA6
0DA54:  CLRF   xA7
0DA56:  CLRF   xA8
0DA58:  CLRF   xA9
0DA5A:  CLRF   xAA
0DA5C:  CLRF   xAB
0DA5E:  CLRF   xAC
0DA60:  CLRF   xAD
0DA62:  CLRF   xAE
0DA64:  CLRF   xAF
0DA66:  CLRF   xB0
0DA68:  CLRF   xB1
0DA6A:  CLRF   xB2
0DA6C:  CLRF   xB3
0DA6E:  CLRF   xB4
0DA70:  CLRF   xB5
0DA72:  CLRF   xB6
0DA74:  CLRF   xB7
0DA76:  CLRF   xB8
0DA78:  CLRF   xB9
0DA7A:  CLRF   xBA
0DA7C:  CLRF   xBB
0DA7E:  CLRF   xBC
0DA80:  CLRF   xBD
0DA82:  CLRF   xBE
0DA84:  CLRF   xBF
0DA86:  CLRF   xC0
0DA88:  CLRF   xC1
0DA8A:  CLRF   xC2
0DA8C:  CLRF   xC3
0DA8E:  CLRF   xC4
0DA90:  CLRF   xC5
0DA92:  CLRF   xC6
0DA94:  CLRF   xC7
0DA96:  CLRF   xC8
0DA98:  CLRF   xC9
0DA9A:  CLRF   xCA
0DA9C:  CLRF   xCB
0DA9E:  CLRF   xCC
0DAA0:  CLRF   xCD
0DAA2:  CLRF   xCE
0DAA4:  CLRF   xCF
0DAA6:  CLRF   xD0
0DAA8:  CLRF   xD1
0DAAA:  CLRF   xD2
0DAAC:  CLRF   xD3
0DAAE:  CLRF   xD4
0DAB0:  CLRF   xD5
0DAB2:  CLRF   xD6
0DAB4:  CLRF   xD7
0DAB6:  CLRF   xD8
0DAB8:  CLRF   xD9
0DABA:  CLRF   xDA
0DABC:  CLRF   xDB
0DABE:  CLRF   xDC
0DAC0:  CLRF   xDD
0DAC2:  CLRF   xDE
0DAC4:  CLRF   xDF
0DAC6:  CLRF   xE0
0DAC8:  CLRF   xE1
0DACA:  CLRF   xE2
0DACC:  CLRF   xE3
0DACE:  CLRF   xE4
0DAD0:  CLRF   xE5
0DAD2:  CLRF   xE6
0DAD4:  CLRF   xE7
0DAD6:  CLRF   xE8
0DAD8:  CLRF   xE9
0DADA:  CLRF   xEA
0DADC:  CLRF   xEB
0DADE:  CLRF   xEC
0DAE0:  CLRF   xED
0DAE2:  CLRF   xEE
0DAE4:  CLRF   xEF
0DAE6:  CLRF   xF0
0DAE8:  CLRF   xF1
0DAEA:  CLRF   xF2
0DAEC:  CLRF   xF3
0DAEE:  CLRF   xF4
0DAF0:  CLRF   xF5
0DAF2:  CLRF   xF6
0DAF4:  CLRF   xF7
0DAF6:  CLRF   xF8
0DAF8:  CLRF   xF9
0DAFA:  CLRF   xFA
0DAFC:  CLRF   xFB
0DAFE:  CLRF   xFC
0DB00:  CLRF   xFD
0DB02:  CLRF   xFE
0DB04:  CLRF   xFF
0DB06:  MOVLB  9
0DB08:  CLRF   x00
0DB0A:  CLRF   x01
0DB0C:  CLRF   x02
0DB0E:  CLRF   x03
0DB10:  CLRF   x04
0DB12:  CLRF   x05
0DB14:  CLRF   x06
0DB16:  CLRF   x07
0DB18:  CLRF   x08
0DB1A:  CLRF   x09
0DB1C:  CLRF   x0A
0DB1E:  CLRF   x0B
0DB20:  CLRF   x0C
0DB22:  CLRF   x0D
0DB24:  CLRF   x0E
0DB26:  CLRF   x0F
0DB28:  CLRF   x10
0DB2A:  CLRF   x11
0DB2C:  CLRF   x12
0DB2E:  CLRF   x13
0DB30:  CLRF   x14
0DB32:  CLRF   x15
0DB34:  CLRF   x16
0DB36:  CLRF   x17
0DB38:  CLRF   x18
0DB3A:  CLRF   x19
0DB3C:  CLRF   x1A
0DB3E:  CLRF   x1B
0DB40:  CLRF   x1C
0DB42:  CLRF   x1D
0DB44:  CLRF   x1E
0DB46:  CLRF   x1F
0DB48:  CLRF   x20
0DB4A:  CLRF   x21
0DB4C:  CLRF   x22
0DB4E:  CLRF   x23
0DB50:  CLRF   x24
0DB52:  CLRF   x25
0DB54:  CLRF   x26
0DB56:  CLRF   x27
0DB58:  CLRF   x28
0DB5A:  CLRF   x29
0DB5C:  CLRF   x2A
0DB5E:  CLRF   x2B
0DB60:  CLRF   x2C
0DB62:  CLRF   x2D
0DB64:  CLRF   x2E
0DB66:  CLRF   x2F
0DB68:  CLRF   x30
0DB6A:  CLRF   x31
0DB6C:  CLRF   x32
0DB6E:  CLRF   x33
0DB70:  CLRF   x34
0DB72:  CLRF   x35
0DB74:  CLRF   x36
0DB76:  CLRF   x37
0DB78:  CLRF   x38
0DB7A:  CLRF   x39
0DB7C:  CLRF   x3A
0DB7E:  CLRF   x3B
0DB80:  CLRF   x3C
0DB82:  CLRF   x3D
0DB84:  CLRF   x3E
0DB86:  CLRF   x3F
0DB88:  CLRF   x40
0DB8A:  CLRF   x41
0DB8C:  CLRF   x42
0DB8E:  CLRF   x43
0DB90:  CLRF   x44
0DB92:  CLRF   x45
0DB94:  CLRF   x46
0DB96:  CLRF   x47
0DB98:  CLRF   x48
0DB9A:  CLRF   x49
0DB9C:  CLRF   x4A
0DB9E:  CLRF   x4B
0DBA0:  CLRF   x4C
0DBA2:  CLRF   x4D
0DBA4:  CLRF   x4E
0DBA6:  CLRF   x4F
0DBA8:  CLRF   x50
0DBAA:  CLRF   x51
0DBAC:  CLRF   x52
0DBAE:  CLRF   x53
0DBB0:  CLRF   x54
0DBB2:  CLRF   x55
0DBB4:  CLRF   x56
0DBB6:  CLRF   x57
0DBB8:  CLRF   x58
0DBBA:  CLRF   x59
0DBBC:  CLRF   x5A
0DBBE:  CLRF   x5B
0DBC0:  CLRF   x5C
0DBC2:  CLRF   x5D
0DBC4:  CLRF   x5E
0DBC6:  CLRF   x5F
0DBC8:  CLRF   x60
0DBCA:  CLRF   x61
0DBCC:  CLRF   x62
0DBCE:  CLRF   x63
0DBD0:  CLRF   x64
0DBD2:  CLRF   x65
0DBD4:  CLRF   x66
0DBD6:  CLRF   x67
0DBD8:  CLRF   x68
0DBDA:  CLRF   x69
0DBDC:  CLRF   x6A
0DBDE:  CLRF   x6B
0DBE0:  CLRF   x6C
0DBE2:  CLRF   x6D
0DBE4:  CLRF   x6E
0DBE6:  CLRF   x6F
0DBE8:  CLRF   x70
0DBEA:  CLRF   x71
0DBEC:  CLRF   x72
0DBEE:  CLRF   x73
0DBF0:  CLRF   x74
0DBF2:  CLRF   x75
0DBF4:  CLRF   x76
0DBF6:  CLRF   x77
0DBF8:  CLRF   x78
0DBFA:  CLRF   x79
0DBFC:  CLRF   x7A
0DBFE:  CLRF   x7B
0DC00:  CLRF   x7C
0DC02:  CLRF   x7D
0DC04:  CLRF   x7E
0DC06:  CLRF   x7F
0DC08:  CLRF   x80
0DC0A:  CLRF   x81
0DC0C:  CLRF   x82
0DC0E:  CLRF   x83
0DC10:  CLRF   x84
0DC12:  CLRF   x85
0DC14:  CLRF   x86
0DC16:  CLRF   x87
0DC18:  CLRF   x88
0DC1A:  CLRF   x89
0DC1C:  CLRF   x8A
0DC1E:  CLRF   x8B
0DC20:  CLRF   x8C
0DC22:  CLRF   x8D
0DC24:  CLRF   x8E
0DC26:  CLRF   x8F
0DC28:  CLRF   x90
0DC2A:  CLRF   x91
0DC2C:  CLRF   x92
0DC2E:  CLRF   x93
0DC30:  CLRF   x94
0DC32:  CLRF   x95
0DC34:  CLRF   x96
0DC36:  CLRF   x97
0DC38:  CLRF   x98
0DC3A:  CLRF   x99
0DC3C:  CLRF   x9A
0DC3E:  CLRF   x9B
0DC40:  CLRF   x9C
0DC42:  CLRF   x9D
0DC44:  CLRF   x9E
0DC46:  CLRF   x9F
0DC48:  CLRF   xA0
0DC4A:  CLRF   xA1
0DC4C:  CLRF   xA2
0DC4E:  CLRF   xA3
0DC50:  CLRF   xA4
0DC52:  CLRF   xA5
0DC54:  CLRF   xA6
0DC56:  CLRF   xA7
0DC58:  CLRF   xA8
0DC5A:  CLRF   xA9
0DC5C:  CLRF   xAA
0DC5E:  CLRF   xAB
0DC60:  CLRF   xAC
0DC62:  CLRF   xAD
0DC64:  CLRF   xAE
0DC66:  CLRF   xAF
0DC68:  CLRF   xB0
0DC6A:  CLRF   xB1
0DC6C:  CLRF   xB2
0DC6E:  CLRF   xB3
0DC70:  CLRF   xB4
0DC72:  CLRF   xB5
0DC74:  CLRF   xB6
0DC76:  CLRF   xB7
0DC78:  CLRF   xB8
0DC7A:  CLRF   xB9
0DC7C:  CLRF   xBA
0DC7E:  CLRF   xBB
0DC80:  CLRF   xBC
0DC82:  CLRF   xBD
0DC84:  CLRF   xBE
0DC86:  CLRF   xBF
0DC88:  CLRF   xC0
0DC8A:  CLRF   xC1
0DC8C:  CLRF   xC2
0DC8E:  CLRF   xC3
0DC90:  CLRF   xC4
0DC92:  CLRF   xC5
0DC94:  CLRF   xC6
0DC96:  CLRF   xC7
0DC98:  CLRF   xC8
0DC9A:  CLRF   xC9
0DC9C:  CLRF   xCA
0DC9E:  CLRF   xCB
0DCA0:  CLRF   xCC
0DCA2:  CLRF   xCD
0DCA4:  CLRF   xCE
0DCA6:  CLRF   xCF
0DCA8:  CLRF   xD0
0DCAA:  CLRF   xD1
0DCAC:  CLRF   xD2
0DCAE:  CLRF   xD3
0DCB0:  CLRF   xD4
0DCB2:  CLRF   xD5
0DCB4:  CLRF   xD6
0DCB6:  CLRF   xD7
0DCB8:  CLRF   xD8
0DCBA:  CLRF   xD9
0DCBC:  CLRF   xDA
0DCBE:  CLRF   xDB
0DCC0:  CLRF   xDC
0DCC2:  CLRF   xDD
0DCC4:  CLRF   xDE
0DCC6:  CLRF   xDF
0DCC8:  CLRF   xE0
0DCCA:  CLRF   xE1
0DCCC:  CLRF   xE2
0DCCE:  CLRF   xE3
0DCD0:  CLRF   xE4
0DCD2:  CLRF   xE5
0DCD4:  CLRF   xE6
0DCD6:  CLRF   xE7
0DCD8:  CLRF   xE8
0DCDA:  CLRF   xE9
0DCDC:  CLRF   xEA
0DCDE:  CLRF   xEB
0DCE0:  CLRF   xEC
0DCE2:  CLRF   xED
0DCE4:  CLRF   xEE
0DCE6:  CLRF   xEF
0DCE8:  CLRF   xF0
0DCEA:  CLRF   xF1
0DCEC:  CLRF   xF2
0DCEE:  CLRF   xF3
0DCF0:  CLRF   xF4
0DCF2:  CLRF   xF5
0DCF4:  CLRF   xF6
0DCF6:  CLRF   xF7
0DCF8:  CLRF   xF8
0DCFA:  CLRF   xF9
0DCFC:  CLRF   xFA
0DCFE:  CLRF   xFB
0DD00:  CLRF   xFC
0DD02:  CLRF   xFD
0DD04:  CLRF   xFE
0DD06:  CLRF   xFF
0DD08:  MOVLB  A
0DD0A:  CLRF   x00
0DD0C:  CLRF   x01
0DD0E:  CLRF   x02
0DD10:  CLRF   x03
0DD12:  CLRF   x04
0DD14:  CLRF   x05
0DD16:  CLRF   x06
0DD18:  CLRF   x07
0DD1A:  CLRF   x08
0DD1C:  CLRF   x09
0DD1E:  CLRF   x0A
0DD20:  CLRF   x0B
0DD22:  CLRF   x0C
0DD24:  CLRF   x0D
0DD26:  CLRF   x0E
0DD28:  CLRF   x0F
0DD2A:  CLRF   x10
0DD2C:  CLRF   x11
0DD2E:  CLRF   x12
0DD30:  CLRF   x13
0DD32:  CLRF   x14
0DD34:  CLRF   x15
0DD36:  CLRF   x16
0DD38:  CLRF   x17
0DD3A:  CLRF   x18
0DD3C:  CLRF   x19
0DD3E:  CLRF   x1A
0DD40:  CLRF   x1B
0DD42:  CLRF   x1C
0DD44:  CLRF   x1D
0DD46:  CLRF   x1E
0DD48:  CLRF   x1F
0DD4A:  CLRF   x20
0DD4C:  CLRF   x21
0DD4E:  CLRF   x22
0DD50:  CLRF   x23
0DD52:  CLRF   x24
0DD54:  CLRF   x25
0DD56:  CLRF   x26
0DD58:  CLRF   x27
0DD5A:  CLRF   x28
0DD5C:  CLRF   x29
0DD5E:  CLRF   x2A
0DD60:  CLRF   x2B
0DD62:  CLRF   x2C
0DD64:  CLRF   x2D
0DD66:  CLRF   x2E
0DD68:  CLRF   x2F
0DD6A:  CLRF   x30
0DD6C:  CLRF   x31
0DD6E:  CLRF   x32
0DD70:  CLRF   x33
0DD72:  CLRF   x34
0DD74:  CLRF   x35
0DD76:  CLRF   x36
0DD78:  CLRF   x37
0DD7A:  CLRF   x38
0DD7C:  CLRF   x39
0DD7E:  CLRF   x3A
0DD80:  CLRF   x3B
0DD82:  CLRF   x3C
0DD84:  CLRF   x3D
0DD86:  CLRF   x3E
0DD88:  CLRF   x3F
0DD8A:  CLRF   x40
0DD8C:  CLRF   x41
....................     port2.port_num = 2; 
0DD8E:  MOVLW  02
0DD90:  MOVLB  6
0DD92:  MOVWF  x42
....................     port2.sweep_step = 0;
0DD94:  CLRF   x44
0DD96:  CLRF   x43
....................     port2.active = 1;
0DD98:  MOVLB  A
0DD9A:  BSF    x41.0
.................... 
....................     int16 count = 1;
....................     iv_env_t measured_data = create_meas_data();
0DD9C:  CLRF   x43
0DD9E:  MOVLW  01
0DDA0:  MOVWF  x42
0DDA2:  MOVLB  0
0DDA4:  CALL   8834
0DDA8:  MOVFF  02,03
0DDAC:  MOVF   01,W
0DDAE:  MOVWF  FE1
0DDB0:  MOVFF  03,FE2
0DDB4:  MOVLW  0A
0DDB6:  MOVWF  FEA
0DDB8:  MOVLW  44
0DDBA:  MOVWF  FE9
0DDBC:  MOVLW  0C
0DDBE:  MOVWF  01
0DDC0:  MOVFF  FE6,FEE
0DDC4:  DECFSZ 01,F
0DDC6:  GOTO   DDC0
.................... 
....................     while (port1.active || port2.active)
0DDCA:  MOVLB  6
0DDCC:  BTFSS  x41.0
0DDCE:  BRA    DDD6
0DDD0:  MOVLB  0
0DDD2:  GOTO   DDE6
0DDD6:  MOVLB  0
0DDD8:  MOVLB  A
0DDDA:  BTFSC  x41.0
0DDDC:  BRA    DDE4
0DDDE:  MOVLB  0
0DDE0:  GOTO   E0CA
0DDE4:  MOVLB  0
....................     {
....................         // 出力設定
....................         if (port1.active) {
0DDE6:  MOVLB  6
0DDE8:  BTFSC  x41.0
0DDEA:  BRA    DDF2
0DDEC:  MOVLB  0
0DDEE:  GOTO   DE04
0DDF2:  MOVLB  0
....................             mcp4901_1_write(count);
0DDF4:  MOVFF  A43,A81
0DDF8:  MOVFF  A42,A80
0DDFC:  CALL   2602
....................         } else {
0DE00:  GOTO   DE10
....................             mcp4901_1_write(0);  // 閾値到達後は0出力
0DE04:  MOVLB  A
0DE06:  CLRF   x81
0DE08:  CLRF   x80
0DE0A:  MOVLB  0
0DE0C:  CALL   2602
....................         }
.................... 
....................         if (port2.active) {
0DE10:  MOVLB  A
0DE12:  BTFSC  x41.0
0DE14:  BRA    DE1C
0DE16:  MOVLB  0
0DE18:  GOTO   DE2E
0DE1C:  MOVLB  0
....................             mcp4901_2_write(count);
0DE1E:  MOVFF  A43,A81
0DE22:  MOVFF  A42,A80
0DE26:  CALL   2644
....................         } else {
0DE2A:  GOTO   DE3A
....................             mcp4901_2_write(0);
0DE2E:  MOVLB  A
0DE30:  CLRF   x81
0DE32:  CLRF   x80
0DE34:  MOVLB  0
0DE36:  CALL   2644
....................         }
.................... 
....................         delay_us(100);
0DE3A:  MOVLW  85
0DE3C:  MOVWF  00
0DE3E:  DECFSZ 00,F
0DE40:  BRA    DE3E
.................... 
....................         // データ取得
....................         if (port1.active) {
0DE42:  MOVLB  6
0DE44:  BTFSC  x41.0
0DE46:  BRA    DE4E
0DE48:  MOVLB  0
0DE4A:  GOTO   DF6E
0DE4E:  MOVLB  0
....................             port1.data_buffer[count].voltage = ad7490_read(ADC_CIGS1_AMP);
0DE50:  MOVLB  A
0DE52:  RLCF   x42,W
0DE54:  MOVWF  02
0DE56:  RLCF   x43,W
0DE58:  MOVWF  03
0DE5A:  RLCF   02,F
0DE5C:  RLCF   03,F
0DE5E:  MOVLW  FC
0DE60:  ANDWF  02,F
0DE62:  MOVF   02,W
0DE64:  ADDLW  45
0DE66:  MOVWF  01
0DE68:  MOVLW  02
0DE6A:  ADDWFC 03,F
0DE6C:  MOVF   01,W
0DE6E:  MOVWF  x53
0DE70:  MOVFF  03,A54
0DE74:  MOVLW  02
0DE76:  MOVWF  x92
0DE78:  MOVLB  0
0DE7A:  CALL   2244
0DE7E:  MOVFF  A54,FEA
0DE82:  MOVFF  A53,FE9
0DE86:  MOVFF  02,FEC
0DE8A:  MOVF   FED,F
0DE8C:  MOVFF  01,FEF
....................             port1.data_buffer[count].current = ad7490_read(ADC_CIGS1_CURR);
0DE90:  MOVLB  A
0DE92:  RLCF   x42,W
0DE94:  MOVWF  02
0DE96:  RLCF   x43,W
0DE98:  MOVWF  03
0DE9A:  RLCF   02,F
0DE9C:  RLCF   03,F
0DE9E:  MOVLW  FC
0DEA0:  ANDWF  02,F
0DEA2:  MOVF   02,W
0DEA4:  ADDLW  03
0DEA6:  MOVWF  x51
0DEA8:  MOVLW  00
0DEAA:  ADDWFC 03,W
0DEAC:  MOVWF  x52
0DEAE:  MOVLW  02
0DEB0:  ADDWF  x51,W
0DEB2:  MOVWF  01
0DEB4:  MOVLW  00
0DEB6:  ADDWFC x52,W
0DEB8:  MOVWF  03
0DEBA:  MOVF   01,W
0DEBC:  ADDLW  42
0DEBE:  MOVWF  01
0DEC0:  MOVLW  02
0DEC2:  ADDWFC 03,F
0DEC4:  MOVF   01,W
0DEC6:  MOVWF  x51
0DEC8:  MOVFF  03,A52
0DECC:  MOVLW  01
0DECE:  MOVWF  x92
0DED0:  MOVLB  0
0DED2:  CALL   2244
0DED6:  MOVFF  A52,FEA
0DEDA:  MOVFF  A51,FE9
0DEDE:  MOVFF  02,FEC
0DEE2:  MOVF   FED,F
0DEE4:  MOVFF  01,FEF
....................             port1.sweep_step = count + 1;
0DEE8:  MOVLW  01
0DEEA:  MOVLB  A
0DEEC:  ADDWF  x42,W
0DEEE:  MOVLB  2
0DEF0:  MOVWF  x43
0DEF2:  MOVLW  00
0DEF4:  MOVLB  A
0DEF6:  ADDWFC x43,W
0DEF8:  MOVLB  2
0DEFA:  MOVWF  x44
....................             if (port1.data_buffer[count].current < curr_limit) {
0DEFC:  MOVLB  A
0DEFE:  RLCF   x42,W
0DF00:  MOVWF  02
0DF02:  RLCF   x43,W
0DF04:  MOVWF  03
0DF06:  RLCF   02,F
0DF08:  RLCF   03,F
0DF0A:  MOVLW  FC
0DF0C:  ANDWF  02,F
0DF0E:  MOVF   02,W
0DF10:  ADDLW  03
0DF12:  MOVWF  x51
0DF14:  MOVLW  00
0DF16:  ADDWFC 03,W
0DF18:  MOVWF  x52
0DF1A:  MOVLW  02
0DF1C:  ADDWF  x51,W
0DF1E:  MOVWF  01
0DF20:  MOVLW  00
0DF22:  ADDWFC x52,W
0DF24:  MOVWF  03
0DF26:  MOVF   01,W
0DF28:  ADDLW  42
0DF2A:  MOVWF  FE9
0DF2C:  MOVLW  02
0DF2E:  ADDWFC 03,W
0DF30:  MOVWF  FEA
0DF32:  MOVFF  FEC,A52
0DF36:  MOVF   FED,F
0DF38:  MOVFF  FEF,A51
0DF3C:  MOVF   x52,W
0DF3E:  MOVLB  2
0DF40:  SUBWF  x41,W
0DF42:  BTFSC  FD8.0
0DF44:  BRA    DF4C
0DF46:  MOVLB  0
0DF48:  GOTO   DF6E
0DF4C:  MOVLB  0
0DF4E:  BTFSS  FD8.2
0DF50:  GOTO   DF68
0DF54:  MOVLB  2
0DF56:  MOVF   x40,W
0DF58:  MOVLB  A
0DF5A:  SUBWF  x51,W
0DF5C:  BTFSS  FD8.0
0DF5E:  BRA    DF66
0DF60:  MOVLB  0
0DF62:  GOTO   DF6E
0DF66:  MOVLB  0
....................                 port1.active = 0;  // 閾値到達で測定終了
0DF68:  MOVLB  6
0DF6A:  BCF    x41.0
0DF6C:  MOVLB  0
....................             }
....................         }
.................... 
....................         if (port2.active) {
0DF6E:  MOVLB  A
0DF70:  BTFSC  x41.0
0DF72:  BRA    DF7A
0DF74:  MOVLB  0
0DF76:  GOTO   E09A
0DF7A:  MOVLB  0
....................             port2.data_buffer[count].voltage = ad7490_read(ADC_CIGS2_AMP);
0DF7C:  MOVLB  A
0DF7E:  RLCF   x42,W
0DF80:  MOVWF  02
0DF82:  RLCF   x43,W
0DF84:  MOVWF  03
0DF86:  RLCF   02,F
0DF88:  RLCF   03,F
0DF8A:  MOVLW  FC
0DF8C:  ANDWF  02,F
0DF8E:  MOVF   02,W
0DF90:  ADDLW  45
0DF92:  MOVWF  01
0DF94:  MOVLW  06
0DF96:  ADDWFC 03,F
0DF98:  MOVF   01,W
0DF9A:  MOVWF  x53
0DF9C:  MOVFF  03,A54
0DFA0:  MOVLW  06
0DFA2:  MOVWF  x92
0DFA4:  MOVLB  0
0DFA6:  CALL   2244
0DFAA:  MOVFF  A54,FEA
0DFAE:  MOVFF  A53,FE9
0DFB2:  MOVFF  02,FEC
0DFB6:  MOVF   FED,F
0DFB8:  MOVFF  01,FEF
....................             port2.data_buffer[count].current = ad7490_read(ADC_CIGS2_CURR);
0DFBC:  MOVLB  A
0DFBE:  RLCF   x42,W
0DFC0:  MOVWF  02
0DFC2:  RLCF   x43,W
0DFC4:  MOVWF  03
0DFC6:  RLCF   02,F
0DFC8:  RLCF   03,F
0DFCA:  MOVLW  FC
0DFCC:  ANDWF  02,F
0DFCE:  MOVF   02,W
0DFD0:  ADDLW  03
0DFD2:  MOVWF  x51
0DFD4:  MOVLW  00
0DFD6:  ADDWFC 03,W
0DFD8:  MOVWF  x52
0DFDA:  MOVLW  02
0DFDC:  ADDWF  x51,W
0DFDE:  MOVWF  01
0DFE0:  MOVLW  00
0DFE2:  ADDWFC x52,W
0DFE4:  MOVWF  03
0DFE6:  MOVF   01,W
0DFE8:  ADDLW  42
0DFEA:  MOVWF  01
0DFEC:  MOVLW  06
0DFEE:  ADDWFC 03,F
0DFF0:  MOVF   01,W
0DFF2:  MOVWF  x51
0DFF4:  MOVFF  03,A52
0DFF8:  MOVLW  05
0DFFA:  MOVWF  x92
0DFFC:  MOVLB  0
0DFFE:  CALL   2244
0E002:  MOVFF  A52,FEA
0E006:  MOVFF  A51,FE9
0E00A:  MOVFF  02,FEC
0E00E:  MOVF   FED,F
0E010:  MOVFF  01,FEF
....................             port2.sweep_step = count + 1;
0E014:  MOVLW  01
0E016:  MOVLB  A
0E018:  ADDWF  x42,W
0E01A:  MOVLB  6
0E01C:  MOVWF  x43
0E01E:  MOVLW  00
0E020:  MOVLB  A
0E022:  ADDWFC x43,W
0E024:  MOVLB  6
0E026:  MOVWF  x44
....................             if (port2.data_buffer[count].current < curr_limit) {
0E028:  MOVLB  A
0E02A:  RLCF   x42,W
0E02C:  MOVWF  02
0E02E:  RLCF   x43,W
0E030:  MOVWF  03
0E032:  RLCF   02,F
0E034:  RLCF   03,F
0E036:  MOVLW  FC
0E038:  ANDWF  02,F
0E03A:  MOVF   02,W
0E03C:  ADDLW  03
0E03E:  MOVWF  x51
0E040:  MOVLW  00
0E042:  ADDWFC 03,W
0E044:  MOVWF  x52
0E046:  MOVLW  02
0E048:  ADDWF  x51,W
0E04A:  MOVWF  01
0E04C:  MOVLW  00
0E04E:  ADDWFC x52,W
0E050:  MOVWF  03
0E052:  MOVF   01,W
0E054:  ADDLW  42
0E056:  MOVWF  FE9
0E058:  MOVLW  06
0E05A:  ADDWFC 03,W
0E05C:  MOVWF  FEA
0E05E:  MOVFF  FEC,A52
0E062:  MOVF   FED,F
0E064:  MOVFF  FEF,A51
0E068:  MOVF   x52,W
0E06A:  MOVLB  2
0E06C:  SUBWF  x41,W
0E06E:  BTFSC  FD8.0
0E070:  BRA    E078
0E072:  MOVLB  0
0E074:  GOTO   E09A
0E078:  MOVLB  0
0E07A:  BTFSS  FD8.2
0E07C:  GOTO   E094
0E080:  MOVLB  2
0E082:  MOVF   x40,W
0E084:  MOVLB  A
0E086:  SUBWF  x51,W
0E088:  BTFSS  FD8.0
0E08A:  BRA    E092
0E08C:  MOVLB  0
0E08E:  GOTO   E09A
0E092:  MOVLB  0
....................                 port2.active = 0;
0E094:  MOVLB  A
0E096:  BCF    x41.0
0E098:  MOVLB  0
....................             }
....................         }
.................... 
....................         count++;
0E09A:  MOVLB  A
0E09C:  INCF   x42,F
0E09E:  BTFSC  FD8.2
0E0A0:  INCF   x43,F
....................         if (count >= 255) {
0E0A2:  MOVF   x43,F
0E0A4:  BTFSC  FD8.2
0E0A6:  BRA    E0AE
0E0A8:  MOVLB  0
0E0AA:  GOTO   E0C2
0E0AE:  MOVLB  0
0E0B0:  MOVLB  A
0E0B2:  MOVF   x42,W
0E0B4:  SUBLW  FE
0E0B6:  BTFSS  FD8.0
0E0B8:  BRA    E0C0
0E0BA:  MOVLB  0
0E0BC:  GOTO   E0C6
0E0C0:  MOVLB  0
....................             break;
0E0C2:  GOTO   E0CA
....................         }
0E0C6:  GOTO   DDCA
....................     }
.................... 
....................     // Print I-V data
....................     fprintf(PC, "Volt1,Curr1,Volt2,Curr2\r\n");
0E0CA:  MOVLW  86
0E0CC:  MOVWF  FF6
0E0CE:  MOVLW  06
0E0D0:  MOVWF  FF7
0E0D2:  MOVLW  00
0E0D4:  MOVWF  FF8
0E0D6:  CALL   2084
....................     for (int i = 0; i < count; i++) {
0E0DA:  MOVLB  A
0E0DC:  CLRF   x50
0E0DE:  MOVLB  0
0E0E0:  MOVLB  A
0E0E2:  MOVF   x43,F
0E0E4:  BTFSC  FD8.2
0E0E6:  BRA    E0EE
0E0E8:  MOVLB  0
0E0EA:  GOTO   E102
0E0EE:  MOVLB  0
0E0F0:  MOVLB  A
0E0F2:  MOVF   x42,W
0E0F4:  SUBWF  x50,W
0E0F6:  BTFSS  FD8.0
0E0F8:  BRA    E100
0E0FA:  MOVLB  0
0E0FC:  GOTO   E2B4
0E100:  MOVLB  0
.................... 
....................         fprintf(PC, "%04LX,%04LX,%04LX,%04LX\r\n",
....................             port1.data_buffer[i].voltage, port1.data_buffer[i].current,
....................             port2.data_buffer[i].voltage, port2.data_buffer[i].current);
0E102:  MOVLB  A
0E104:  CLRF   xCC
0E106:  MOVFF  A50,ACB
0E10A:  CLRF   xCE
0E10C:  MOVLW  04
0E10E:  MOVWF  xCD
0E110:  MOVLB  0
0E112:  CALL   7D8A
0E116:  MOVFF  02,03
0E11A:  MOVF   01,W
0E11C:  ADDLW  45
0E11E:  MOVWF  FE9
0E120:  MOVLW  02
0E122:  ADDWFC 03,W
0E124:  MOVWF  FEA
0E126:  MOVFF  FEC,A54
0E12A:  MOVF   FED,F
0E12C:  MOVFF  FEF,A53
0E130:  MOVLB  A
0E132:  CLRF   xCC
0E134:  MOVFF  A50,ACB
0E138:  CLRF   xCE
0E13A:  MOVLW  04
0E13C:  MOVWF  xCD
0E13E:  MOVLB  0
0E140:  CALL   7D8A
0E144:  MOVFF  02,03
0E148:  MOVF   01,W
0E14A:  ADDLW  03
0E14C:  MOVLB  A
0E14E:  MOVWF  x55
0E150:  MOVLW  00
0E152:  ADDWFC 03,W
0E154:  MOVWF  x56
0E156:  MOVLW  02
0E158:  ADDWF  x55,W
0E15A:  MOVWF  01
0E15C:  MOVLW  00
0E15E:  ADDWFC x56,W
0E160:  MOVWF  03
0E162:  MOVF   01,W
0E164:  ADDLW  42
0E166:  MOVWF  FE9
0E168:  MOVLW  02
0E16A:  ADDWFC 03,W
0E16C:  MOVWF  FEA
0E16E:  MOVFF  FEC,A56
0E172:  MOVF   FED,F
0E174:  MOVFF  FEF,A55
0E178:  CLRF   xCC
0E17A:  MOVFF  A50,ACB
0E17E:  CLRF   xCE
0E180:  MOVLW  04
0E182:  MOVWF  xCD
0E184:  MOVLB  0
0E186:  CALL   7D8A
0E18A:  MOVFF  02,03
0E18E:  MOVF   01,W
0E190:  ADDLW  45
0E192:  MOVWF  FE9
0E194:  MOVLW  06
0E196:  ADDWFC 03,W
0E198:  MOVWF  FEA
0E19A:  MOVFF  FEC,A5A
0E19E:  MOVF   FED,F
0E1A0:  MOVFF  FEF,A59
0E1A4:  MOVLB  A
0E1A6:  CLRF   xCC
0E1A8:  MOVFF  A50,ACB
0E1AC:  CLRF   xCE
0E1AE:  MOVLW  04
0E1B0:  MOVWF  xCD
0E1B2:  MOVLB  0
0E1B4:  CALL   7D8A
0E1B8:  MOVFF  02,03
0E1BC:  MOVF   01,W
0E1BE:  ADDLW  03
0E1C0:  MOVLB  A
0E1C2:  MOVWF  x5B
0E1C4:  MOVLW  00
0E1C6:  ADDWFC 03,W
0E1C8:  MOVWF  x5C
0E1CA:  MOVLW  02
0E1CC:  ADDWF  x5B,W
0E1CE:  MOVWF  01
0E1D0:  MOVLW  00
0E1D2:  ADDWFC x5C,W
0E1D4:  MOVWF  03
0E1D6:  MOVF   01,W
0E1D8:  ADDLW  42
0E1DA:  MOVWF  FE9
0E1DC:  MOVLW  06
0E1DE:  ADDWFC 03,W
0E1E0:  MOVWF  FEA
0E1E2:  MOVFF  FEC,A5C
0E1E6:  MOVF   FED,F
0E1E8:  MOVFF  FEF,A5B
0E1EC:  MOVFF  A54,A77
0E1F0:  MOVLW  37
0E1F2:  MOVWF  x78
0E1F4:  MOVLB  0
0E1F6:  CALL   22D0
0E1FA:  MOVFF  A53,A77
0E1FE:  MOVLW  37
0E200:  MOVLB  A
0E202:  MOVWF  x78
0E204:  MOVLB  0
0E206:  CALL   22D0
0E20A:  MOVLW  2C
0E20C:  BTFSS  FA6.6
0E20E:  GOTO   E20C
0E212:  MOVLB  E
0E214:  MOVWF  xF9
0E216:  MOVFF  A56,A77
0E21A:  MOVLW  37
0E21C:  MOVLB  A
0E21E:  MOVWF  x78
0E220:  MOVLB  0
0E222:  CALL   22D0
0E226:  MOVFF  A55,A77
0E22A:  MOVLW  37
0E22C:  MOVLB  A
0E22E:  MOVWF  x78
0E230:  MOVLB  0
0E232:  CALL   22D0
0E236:  MOVLW  2C
0E238:  BTFSS  FA6.6
0E23A:  GOTO   E238
0E23E:  MOVLB  E
0E240:  MOVWF  xF9
0E242:  MOVFF  A5A,A77
0E246:  MOVLW  37
0E248:  MOVLB  A
0E24A:  MOVWF  x78
0E24C:  MOVLB  0
0E24E:  CALL   22D0
0E252:  MOVFF  A59,A77
0E256:  MOVLW  37
0E258:  MOVLB  A
0E25A:  MOVWF  x78
0E25C:  MOVLB  0
0E25E:  CALL   22D0
0E262:  MOVLW  2C
0E264:  BTFSS  FA6.6
0E266:  GOTO   E264
0E26A:  MOVLB  E
0E26C:  MOVWF  xF9
0E26E:  MOVFF  A5C,A77
0E272:  MOVLW  37
0E274:  MOVLB  A
0E276:  MOVWF  x78
0E278:  MOVLB  0
0E27A:  CALL   22D0
0E27E:  MOVFF  A5B,A77
0E282:  MOVLW  37
0E284:  MOVLB  A
0E286:  MOVWF  x78
0E288:  MOVLB  0
0E28A:  CALL   22D0
0E28E:  MOVLW  0D
0E290:  BTFSS  FA6.6
0E292:  GOTO   E290
0E296:  MOVLB  E
0E298:  MOVWF  xF9
0E29A:  MOVLW  0A
0E29C:  MOVLB  0
0E29E:  BTFSS  FA6.6
0E2A0:  GOTO   E29E
0E2A4:  MOVLB  E
0E2A6:  MOVWF  xF9
0E2A8:  MOVLB  0
0E2AA:  MOVLB  A
0E2AC:  INCF   x50,F
0E2AE:  MOVLB  0
0E2B0:  GOTO   E0E0
....................     }
0E2B4:  GOTO   E76E (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit)
.................... {
....................     fprintf(PC, ".");
*
0AFCC:  MOVLW  2E
0AFCE:  BTFSS  FA6.6
0AFD0:  GOTO   AFCE
0AFD4:  MOVLB  E
0AFD6:  MOVWF  xF9
....................     
....................     
....................     connect_port1();
0AFD8:  MOVLB  0
0AFDA:  CALL   4E84
....................     connect_port2();
0AFDE:  CALL   4E8C
....................     // Enable both CIGS ports
....................     mcp4901_1_write(0); 
0AFE2:  MOVLB  A
0AFE4:  CLRF   x81
0AFE6:  CLRF   x80
0AFE8:  MOVLB  0
0AFEA:  CALL   2602
....................     mcp4901_2_write(0);
0AFEE:  MOVLB  A
0AFF0:  CLRF   x81
0AFF2:  CLRF   x80
0AFF4:  MOVLB  0
0AFF6:  CALL   2644
....................     connect_port1();
0AFFA:  CALL   4E84
....................     connect_port2();
0AFFE:  CALL   4E8C
.................... 
....................     // Stabilization wait
....................     delay_ms(100);
0B002:  MOVLW  64
0B004:  MOVLB  B
0B006:  MOVWF  xC0
0B008:  MOVLB  0
0B00A:  CALL   2056
....................     
....................     // Init Port1
....................     sweep_config_t port1 = {0};
0B00E:  MOVLB  2
0B010:  CLRF   x58
0B012:  CLRF   x59
0B014:  CLRF   x5A
0B016:  CLRF   x5B
0B018:  CLRF   x5C
0B01A:  CLRF   x5D
0B01C:  CLRF   x5E
0B01E:  CLRF   x5F
0B020:  CLRF   x60
0B022:  CLRF   x61
0B024:  CLRF   x62
0B026:  CLRF   x63
0B028:  CLRF   x64
0B02A:  CLRF   x65
0B02C:  CLRF   x66
0B02E:  CLRF   x67
0B030:  CLRF   x68
0B032:  CLRF   x69
0B034:  CLRF   x6A
0B036:  CLRF   x6B
0B038:  CLRF   x6C
0B03A:  CLRF   x6D
0B03C:  CLRF   x6E
0B03E:  CLRF   x6F
0B040:  CLRF   x70
0B042:  CLRF   x71
0B044:  CLRF   x72
0B046:  CLRF   x73
0B048:  CLRF   x74
0B04A:  CLRF   x75
0B04C:  CLRF   x76
0B04E:  CLRF   x77
0B050:  CLRF   x78
0B052:  CLRF   x79
0B054:  CLRF   x7A
0B056:  CLRF   x7B
0B058:  CLRF   x7C
0B05A:  CLRF   x7D
0B05C:  CLRF   x7E
0B05E:  CLRF   x7F
0B060:  CLRF   x80
0B062:  CLRF   x81
0B064:  CLRF   x82
0B066:  CLRF   x83
0B068:  CLRF   x84
0B06A:  CLRF   x85
0B06C:  CLRF   x86
0B06E:  CLRF   x87
0B070:  CLRF   x88
0B072:  CLRF   x89
0B074:  CLRF   x8A
0B076:  CLRF   x8B
0B078:  CLRF   x8C
0B07A:  CLRF   x8D
0B07C:  CLRF   x8E
0B07E:  CLRF   x8F
0B080:  CLRF   x90
0B082:  CLRF   x91
0B084:  CLRF   x92
0B086:  CLRF   x93
0B088:  CLRF   x94
0B08A:  CLRF   x95
0B08C:  CLRF   x96
0B08E:  CLRF   x97
0B090:  CLRF   x98
0B092:  CLRF   x99
0B094:  CLRF   x9A
0B096:  CLRF   x9B
0B098:  CLRF   x9C
0B09A:  CLRF   x9D
0B09C:  CLRF   x9E
0B09E:  CLRF   x9F
0B0A0:  CLRF   xA0
0B0A2:  CLRF   xA1
0B0A4:  CLRF   xA2
0B0A6:  CLRF   xA3
0B0A8:  CLRF   xA4
0B0AA:  CLRF   xA5
0B0AC:  CLRF   xA6
0B0AE:  CLRF   xA7
0B0B0:  CLRF   xA8
0B0B2:  CLRF   xA9
0B0B4:  CLRF   xAA
0B0B6:  CLRF   xAB
0B0B8:  CLRF   xAC
0B0BA:  CLRF   xAD
0B0BC:  CLRF   xAE
0B0BE:  CLRF   xAF
0B0C0:  CLRF   xB0
0B0C2:  CLRF   xB1
0B0C4:  CLRF   xB2
0B0C6:  CLRF   xB3
0B0C8:  CLRF   xB4
0B0CA:  CLRF   xB5
0B0CC:  CLRF   xB6
0B0CE:  CLRF   xB7
0B0D0:  CLRF   xB8
0B0D2:  CLRF   xB9
0B0D4:  CLRF   xBA
0B0D6:  CLRF   xBB
0B0D8:  CLRF   xBC
0B0DA:  CLRF   xBD
0B0DC:  CLRF   xBE
0B0DE:  CLRF   xBF
0B0E0:  CLRF   xC0
0B0E2:  CLRF   xC1
0B0E4:  CLRF   xC2
0B0E6:  CLRF   xC3
0B0E8:  CLRF   xC4
0B0EA:  CLRF   xC5
0B0EC:  CLRF   xC6
0B0EE:  CLRF   xC7
0B0F0:  CLRF   xC8
0B0F2:  CLRF   xC9
0B0F4:  CLRF   xCA
0B0F6:  CLRF   xCB
0B0F8:  CLRF   xCC
0B0FA:  CLRF   xCD
0B0FC:  CLRF   xCE
0B0FE:  CLRF   xCF
0B100:  CLRF   xD0
0B102:  CLRF   xD1
0B104:  CLRF   xD2
0B106:  CLRF   xD3
0B108:  CLRF   xD4
0B10A:  CLRF   xD5
0B10C:  CLRF   xD6
0B10E:  CLRF   xD7
0B110:  CLRF   xD8
0B112:  CLRF   xD9
0B114:  CLRF   xDA
0B116:  CLRF   xDB
0B118:  CLRF   xDC
0B11A:  CLRF   xDD
0B11C:  CLRF   xDE
0B11E:  CLRF   xDF
0B120:  CLRF   xE0
0B122:  CLRF   xE1
0B124:  CLRF   xE2
0B126:  CLRF   xE3
0B128:  CLRF   xE4
0B12A:  CLRF   xE5
0B12C:  CLRF   xE6
0B12E:  CLRF   xE7
0B130:  CLRF   xE8
0B132:  CLRF   xE9
0B134:  CLRF   xEA
0B136:  CLRF   xEB
0B138:  CLRF   xEC
0B13A:  CLRF   xED
0B13C:  CLRF   xEE
0B13E:  CLRF   xEF
0B140:  CLRF   xF0
0B142:  CLRF   xF1
0B144:  CLRF   xF2
0B146:  CLRF   xF3
0B148:  CLRF   xF4
0B14A:  CLRF   xF5
0B14C:  CLRF   xF6
0B14E:  CLRF   xF7
0B150:  CLRF   xF8
0B152:  CLRF   xF9
0B154:  CLRF   xFA
0B156:  CLRF   xFB
0B158:  CLRF   xFC
0B15A:  CLRF   xFD
0B15C:  CLRF   xFE
0B15E:  CLRF   xFF
0B160:  MOVLB  3
0B162:  CLRF   x00
0B164:  CLRF   x01
0B166:  CLRF   x02
0B168:  CLRF   x03
0B16A:  CLRF   x04
0B16C:  CLRF   x05
0B16E:  CLRF   x06
0B170:  CLRF   x07
0B172:  CLRF   x08
0B174:  CLRF   x09
0B176:  CLRF   x0A
0B178:  CLRF   x0B
0B17A:  CLRF   x0C
0B17C:  CLRF   x0D
0B17E:  CLRF   x0E
0B180:  CLRF   x0F
0B182:  CLRF   x10
0B184:  CLRF   x11
0B186:  CLRF   x12
0B188:  CLRF   x13
0B18A:  CLRF   x14
0B18C:  CLRF   x15
0B18E:  CLRF   x16
0B190:  CLRF   x17
0B192:  CLRF   x18
0B194:  CLRF   x19
0B196:  CLRF   x1A
0B198:  CLRF   x1B
0B19A:  CLRF   x1C
0B19C:  CLRF   x1D
0B19E:  CLRF   x1E
0B1A0:  CLRF   x1F
0B1A2:  CLRF   x20
0B1A4:  CLRF   x21
0B1A6:  CLRF   x22
0B1A8:  CLRF   x23
0B1AA:  CLRF   x24
0B1AC:  CLRF   x25
0B1AE:  CLRF   x26
0B1B0:  CLRF   x27
0B1B2:  CLRF   x28
0B1B4:  CLRF   x29
0B1B6:  CLRF   x2A
0B1B8:  CLRF   x2B
0B1BA:  CLRF   x2C
0B1BC:  CLRF   x2D
0B1BE:  CLRF   x2E
0B1C0:  CLRF   x2F
0B1C2:  CLRF   x30
0B1C4:  CLRF   x31
0B1C6:  CLRF   x32
0B1C8:  CLRF   x33
0B1CA:  CLRF   x34
0B1CC:  CLRF   x35
0B1CE:  CLRF   x36
0B1D0:  CLRF   x37
0B1D2:  CLRF   x38
0B1D4:  CLRF   x39
0B1D6:  CLRF   x3A
0B1D8:  CLRF   x3B
0B1DA:  CLRF   x3C
0B1DC:  CLRF   x3D
0B1DE:  CLRF   x3E
0B1E0:  CLRF   x3F
0B1E2:  CLRF   x40
0B1E4:  CLRF   x41
0B1E6:  CLRF   x42
0B1E8:  CLRF   x43
0B1EA:  CLRF   x44
0B1EC:  CLRF   x45
0B1EE:  CLRF   x46
0B1F0:  CLRF   x47
0B1F2:  CLRF   x48
0B1F4:  CLRF   x49
0B1F6:  CLRF   x4A
0B1F8:  CLRF   x4B
0B1FA:  CLRF   x4C
0B1FC:  CLRF   x4D
0B1FE:  CLRF   x4E
0B200:  CLRF   x4F
0B202:  CLRF   x50
0B204:  CLRF   x51
0B206:  CLRF   x52
0B208:  CLRF   x53
0B20A:  CLRF   x54
0B20C:  CLRF   x55
0B20E:  CLRF   x56
0B210:  CLRF   x57
0B212:  CLRF   x58
0B214:  CLRF   x59
0B216:  CLRF   x5A
0B218:  CLRF   x5B
0B21A:  CLRF   x5C
0B21C:  CLRF   x5D
0B21E:  CLRF   x5E
0B220:  CLRF   x5F
0B222:  CLRF   x60
0B224:  CLRF   x61
0B226:  CLRF   x62
0B228:  CLRF   x63
0B22A:  CLRF   x64
0B22C:  CLRF   x65
0B22E:  CLRF   x66
0B230:  CLRF   x67
0B232:  CLRF   x68
0B234:  CLRF   x69
0B236:  CLRF   x6A
0B238:  CLRF   x6B
0B23A:  CLRF   x6C
0B23C:  CLRF   x6D
0B23E:  CLRF   x6E
0B240:  CLRF   x6F
0B242:  CLRF   x70
0B244:  CLRF   x71
0B246:  CLRF   x72
0B248:  CLRF   x73
0B24A:  CLRF   x74
0B24C:  CLRF   x75
0B24E:  CLRF   x76
0B250:  CLRF   x77
0B252:  CLRF   x78
0B254:  CLRF   x79
0B256:  CLRF   x7A
0B258:  CLRF   x7B
0B25A:  CLRF   x7C
0B25C:  CLRF   x7D
0B25E:  CLRF   x7E
0B260:  CLRF   x7F
0B262:  CLRF   x80
0B264:  CLRF   x81
0B266:  CLRF   x82
0B268:  CLRF   x83
0B26A:  CLRF   x84
0B26C:  CLRF   x85
0B26E:  CLRF   x86
0B270:  CLRF   x87
0B272:  CLRF   x88
0B274:  CLRF   x89
0B276:  CLRF   x8A
0B278:  CLRF   x8B
0B27A:  CLRF   x8C
0B27C:  CLRF   x8D
0B27E:  CLRF   x8E
0B280:  CLRF   x8F
0B282:  CLRF   x90
0B284:  CLRF   x91
0B286:  CLRF   x92
0B288:  CLRF   x93
0B28A:  CLRF   x94
0B28C:  CLRF   x95
0B28E:  CLRF   x96
0B290:  CLRF   x97
0B292:  CLRF   x98
0B294:  CLRF   x99
0B296:  CLRF   x9A
0B298:  CLRF   x9B
0B29A:  CLRF   x9C
0B29C:  CLRF   x9D
0B29E:  CLRF   x9E
0B2A0:  CLRF   x9F
0B2A2:  CLRF   xA0
0B2A4:  CLRF   xA1
0B2A6:  CLRF   xA2
0B2A8:  CLRF   xA3
0B2AA:  CLRF   xA4
0B2AC:  CLRF   xA5
0B2AE:  CLRF   xA6
0B2B0:  CLRF   xA7
0B2B2:  CLRF   xA8
0B2B4:  CLRF   xA9
0B2B6:  CLRF   xAA
0B2B8:  CLRF   xAB
0B2BA:  CLRF   xAC
0B2BC:  CLRF   xAD
0B2BE:  CLRF   xAE
0B2C0:  CLRF   xAF
0B2C2:  CLRF   xB0
0B2C4:  CLRF   xB1
0B2C6:  CLRF   xB2
0B2C8:  CLRF   xB3
0B2CA:  CLRF   xB4
0B2CC:  CLRF   xB5
0B2CE:  CLRF   xB6
0B2D0:  CLRF   xB7
0B2D2:  CLRF   xB8
0B2D4:  CLRF   xB9
0B2D6:  CLRF   xBA
0B2D8:  CLRF   xBB
0B2DA:  CLRF   xBC
0B2DC:  CLRF   xBD
0B2DE:  CLRF   xBE
0B2E0:  CLRF   xBF
0B2E2:  CLRF   xC0
0B2E4:  CLRF   xC1
0B2E6:  CLRF   xC2
0B2E8:  CLRF   xC3
0B2EA:  CLRF   xC4
0B2EC:  CLRF   xC5
0B2EE:  CLRF   xC6
0B2F0:  CLRF   xC7
0B2F2:  CLRF   xC8
0B2F4:  CLRF   xC9
0B2F6:  CLRF   xCA
0B2F8:  CLRF   xCB
0B2FA:  CLRF   xCC
0B2FC:  CLRF   xCD
0B2FE:  CLRF   xCE
0B300:  CLRF   xCF
0B302:  CLRF   xD0
0B304:  CLRF   xD1
0B306:  CLRF   xD2
0B308:  CLRF   xD3
0B30A:  CLRF   xD4
0B30C:  CLRF   xD5
0B30E:  CLRF   xD6
0B310:  CLRF   xD7
0B312:  CLRF   xD8
0B314:  CLRF   xD9
0B316:  CLRF   xDA
0B318:  CLRF   xDB
0B31A:  CLRF   xDC
0B31C:  CLRF   xDD
0B31E:  CLRF   xDE
0B320:  CLRF   xDF
0B322:  CLRF   xE0
0B324:  CLRF   xE1
0B326:  CLRF   xE2
0B328:  CLRF   xE3
0B32A:  CLRF   xE4
0B32C:  CLRF   xE5
0B32E:  CLRF   xE6
0B330:  CLRF   xE7
0B332:  CLRF   xE8
0B334:  CLRF   xE9
0B336:  CLRF   xEA
0B338:  CLRF   xEB
0B33A:  CLRF   xEC
0B33C:  CLRF   xED
0B33E:  CLRF   xEE
0B340:  CLRF   xEF
0B342:  CLRF   xF0
0B344:  CLRF   xF1
0B346:  CLRF   xF2
0B348:  CLRF   xF3
0B34A:  CLRF   xF4
0B34C:  CLRF   xF5
0B34E:  CLRF   xF6
0B350:  CLRF   xF7
0B352:  CLRF   xF8
0B354:  CLRF   xF9
0B356:  CLRF   xFA
0B358:  CLRF   xFB
0B35A:  CLRF   xFC
0B35C:  CLRF   xFD
0B35E:  CLRF   xFE
0B360:  CLRF   xFF
0B362:  MOVLB  4
0B364:  CLRF   x00
0B366:  CLRF   x01
0B368:  CLRF   x02
0B36A:  CLRF   x03
0B36C:  CLRF   x04
0B36E:  CLRF   x05
0B370:  CLRF   x06
0B372:  CLRF   x07
0B374:  CLRF   x08
0B376:  CLRF   x09
0B378:  CLRF   x0A
0B37A:  CLRF   x0B
0B37C:  CLRF   x0C
0B37E:  CLRF   x0D
0B380:  CLRF   x0E
0B382:  CLRF   x0F
0B384:  CLRF   x10
0B386:  CLRF   x11
0B388:  CLRF   x12
0B38A:  CLRF   x13
0B38C:  CLRF   x14
0B38E:  CLRF   x15
0B390:  CLRF   x16
0B392:  CLRF   x17
0B394:  CLRF   x18
0B396:  CLRF   x19
0B398:  CLRF   x1A
0B39A:  CLRF   x1B
0B39C:  CLRF   x1C
0B39E:  CLRF   x1D
0B3A0:  CLRF   x1E
0B3A2:  CLRF   x1F
0B3A4:  CLRF   x20
0B3A6:  CLRF   x21
0B3A8:  CLRF   x22
0B3AA:  CLRF   x23
0B3AC:  CLRF   x24
0B3AE:  CLRF   x25
0B3B0:  CLRF   x26
0B3B2:  CLRF   x27
0B3B4:  CLRF   x28
0B3B6:  CLRF   x29
0B3B8:  CLRF   x2A
0B3BA:  CLRF   x2B
0B3BC:  CLRF   x2C
0B3BE:  CLRF   x2D
0B3C0:  CLRF   x2E
0B3C2:  CLRF   x2F
0B3C4:  CLRF   x30
0B3C6:  CLRF   x31
0B3C8:  CLRF   x32
0B3CA:  CLRF   x33
0B3CC:  CLRF   x34
0B3CE:  CLRF   x35
0B3D0:  CLRF   x36
0B3D2:  CLRF   x37
0B3D4:  CLRF   x38
0B3D6:  CLRF   x39
0B3D8:  CLRF   x3A
0B3DA:  CLRF   x3B
0B3DC:  CLRF   x3C
0B3DE:  CLRF   x3D
0B3E0:  CLRF   x3E
0B3E2:  CLRF   x3F
0B3E4:  CLRF   x40
0B3E6:  CLRF   x41
0B3E8:  CLRF   x42
0B3EA:  CLRF   x43
0B3EC:  CLRF   x44
0B3EE:  CLRF   x45
0B3F0:  CLRF   x46
0B3F2:  CLRF   x47
0B3F4:  CLRF   x48
0B3F6:  CLRF   x49
0B3F8:  CLRF   x4A
0B3FA:  CLRF   x4B
0B3FC:  CLRF   x4C
0B3FE:  CLRF   x4D
0B400:  CLRF   x4E
0B402:  CLRF   x4F
0B404:  CLRF   x50
0B406:  CLRF   x51
0B408:  CLRF   x52
0B40A:  CLRF   x53
0B40C:  CLRF   x54
0B40E:  CLRF   x55
0B410:  CLRF   x56
0B412:  CLRF   x57
0B414:  CLRF   x58
0B416:  CLRF   x59
0B418:  CLRF   x5A
0B41A:  CLRF   x5B
0B41C:  CLRF   x5C
0B41E:  CLRF   x5D
0B420:  CLRF   x5E
0B422:  CLRF   x5F
0B424:  CLRF   x60
0B426:  CLRF   x61
0B428:  CLRF   x62
0B42A:  CLRF   x63
0B42C:  CLRF   x64
0B42E:  CLRF   x65
0B430:  CLRF   x66
0B432:  CLRF   x67
0B434:  CLRF   x68
0B436:  CLRF   x69
0B438:  CLRF   x6A
0B43A:  CLRF   x6B
0B43C:  CLRF   x6C
0B43E:  CLRF   x6D
0B440:  CLRF   x6E
0B442:  CLRF   x6F
0B444:  CLRF   x70
0B446:  CLRF   x71
0B448:  CLRF   x72
0B44A:  CLRF   x73
0B44C:  CLRF   x74
0B44E:  CLRF   x75
0B450:  CLRF   x76
0B452:  CLRF   x77
0B454:  CLRF   x78
0B456:  CLRF   x79
0B458:  CLRF   x7A
0B45A:  CLRF   x7B
0B45C:  CLRF   x7C
0B45E:  CLRF   x7D
0B460:  CLRF   x7E
0B462:  CLRF   x7F
0B464:  CLRF   x80
0B466:  CLRF   x81
0B468:  CLRF   x82
0B46A:  CLRF   x83
0B46C:  CLRF   x84
0B46E:  CLRF   x85
0B470:  CLRF   x86
0B472:  CLRF   x87
0B474:  CLRF   x88
0B476:  CLRF   x89
0B478:  CLRF   x8A
0B47A:  CLRF   x8B
0B47C:  CLRF   x8C
0B47E:  CLRF   x8D
0B480:  CLRF   x8E
0B482:  CLRF   x8F
0B484:  CLRF   x90
0B486:  CLRF   x91
0B488:  CLRF   x92
0B48A:  CLRF   x93
0B48C:  CLRF   x94
0B48E:  CLRF   x95
0B490:  CLRF   x96
0B492:  CLRF   x97
0B494:  CLRF   x98
0B496:  CLRF   x99
0B498:  CLRF   x9A
0B49A:  CLRF   x9B
0B49C:  CLRF   x9C
0B49E:  CLRF   x9D
0B4A0:  CLRF   x9E
0B4A2:  CLRF   x9F
0B4A4:  CLRF   xA0
0B4A6:  CLRF   xA1
0B4A8:  CLRF   xA2
0B4AA:  CLRF   xA3
0B4AC:  CLRF   xA4
0B4AE:  CLRF   xA5
0B4B0:  CLRF   xA6
0B4B2:  CLRF   xA7
0B4B4:  CLRF   xA8
0B4B6:  CLRF   xA9
0B4B8:  CLRF   xAA
0B4BA:  CLRF   xAB
0B4BC:  CLRF   xAC
0B4BE:  CLRF   xAD
0B4C0:  CLRF   xAE
0B4C2:  CLRF   xAF
0B4C4:  CLRF   xB0
0B4C6:  CLRF   xB1
0B4C8:  CLRF   xB2
0B4CA:  CLRF   xB3
0B4CC:  CLRF   xB4
0B4CE:  CLRF   xB5
0B4D0:  CLRF   xB6
0B4D2:  CLRF   xB7
0B4D4:  CLRF   xB8
0B4D6:  CLRF   xB9
0B4D8:  CLRF   xBA
0B4DA:  CLRF   xBB
0B4DC:  CLRF   xBC
0B4DE:  CLRF   xBD
0B4E0:  CLRF   xBE
0B4E2:  CLRF   xBF
0B4E4:  CLRF   xC0
0B4E6:  CLRF   xC1
0B4E8:  CLRF   xC2
0B4EA:  CLRF   xC3
0B4EC:  CLRF   xC4
0B4EE:  CLRF   xC5
0B4F0:  CLRF   xC6
0B4F2:  CLRF   xC7
0B4F4:  CLRF   xC8
0B4F6:  CLRF   xC9
0B4F8:  CLRF   xCA
0B4FA:  CLRF   xCB
0B4FC:  CLRF   xCC
0B4FE:  CLRF   xCD
0B500:  CLRF   xCE
0B502:  CLRF   xCF
0B504:  CLRF   xD0
0B506:  CLRF   xD1
0B508:  CLRF   xD2
0B50A:  CLRF   xD3
0B50C:  CLRF   xD4
0B50E:  CLRF   xD5
0B510:  CLRF   xD6
0B512:  CLRF   xD7
0B514:  CLRF   xD8
0B516:  CLRF   xD9
0B518:  CLRF   xDA
0B51A:  CLRF   xDB
0B51C:  CLRF   xDC
0B51E:  CLRF   xDD
0B520:  CLRF   xDE
0B522:  CLRF   xDF
0B524:  CLRF   xE0
0B526:  CLRF   xE1
0B528:  CLRF   xE2
0B52A:  CLRF   xE3
0B52C:  CLRF   xE4
0B52E:  CLRF   xE5
0B530:  CLRF   xE6
0B532:  CLRF   xE7
0B534:  CLRF   xE8
0B536:  CLRF   xE9
0B538:  CLRF   xEA
0B53A:  CLRF   xEB
0B53C:  CLRF   xEC
0B53E:  CLRF   xED
0B540:  CLRF   xEE
0B542:  CLRF   xEF
0B544:  CLRF   xF0
0B546:  CLRF   xF1
0B548:  CLRF   xF2
0B54A:  CLRF   xF3
0B54C:  CLRF   xF4
0B54E:  CLRF   xF5
0B550:  CLRF   xF6
0B552:  CLRF   xF7
0B554:  CLRF   xF8
0B556:  CLRF   xF9
0B558:  CLRF   xFA
0B55A:  CLRF   xFB
0B55C:  CLRF   xFC
0B55E:  CLRF   xFD
0B560:  CLRF   xFE
0B562:  CLRF   xFF
0B564:  MOVLB  5
0B566:  CLRF   x00
0B568:  CLRF   x01
0B56A:  CLRF   x02
0B56C:  CLRF   x03
0B56E:  CLRF   x04
0B570:  CLRF   x05
0B572:  CLRF   x06
0B574:  CLRF   x07
0B576:  CLRF   x08
0B578:  CLRF   x09
0B57A:  CLRF   x0A
0B57C:  CLRF   x0B
0B57E:  CLRF   x0C
0B580:  CLRF   x0D
0B582:  CLRF   x0E
0B584:  CLRF   x0F
0B586:  CLRF   x10
0B588:  CLRF   x11
0B58A:  CLRF   x12
0B58C:  CLRF   x13
0B58E:  CLRF   x14
0B590:  CLRF   x15
0B592:  CLRF   x16
0B594:  CLRF   x17
0B596:  CLRF   x18
0B598:  CLRF   x19
0B59A:  CLRF   x1A
0B59C:  CLRF   x1B
0B59E:  CLRF   x1C
0B5A0:  CLRF   x1D
0B5A2:  CLRF   x1E
0B5A4:  CLRF   x1F
0B5A6:  CLRF   x20
0B5A8:  CLRF   x21
0B5AA:  CLRF   x22
0B5AC:  CLRF   x23
0B5AE:  CLRF   x24
0B5B0:  CLRF   x25
0B5B2:  CLRF   x26
0B5B4:  CLRF   x27
0B5B6:  CLRF   x28
0B5B8:  CLRF   x29
0B5BA:  CLRF   x2A
0B5BC:  CLRF   x2B
0B5BE:  CLRF   x2C
0B5C0:  CLRF   x2D
0B5C2:  CLRF   x2E
0B5C4:  CLRF   x2F
0B5C6:  CLRF   x30
0B5C8:  CLRF   x31
0B5CA:  CLRF   x32
0B5CC:  CLRF   x33
0B5CE:  CLRF   x34
0B5D0:  CLRF   x35
0B5D2:  CLRF   x36
0B5D4:  CLRF   x37
0B5D6:  CLRF   x38
0B5D8:  CLRF   x39
0B5DA:  CLRF   x3A
0B5DC:  CLRF   x3B
0B5DE:  CLRF   x3C
0B5E0:  CLRF   x3D
0B5E2:  CLRF   x3E
0B5E4:  CLRF   x3F
0B5E6:  CLRF   x40
0B5E8:  CLRF   x41
0B5EA:  CLRF   x42
0B5EC:  CLRF   x43
0B5EE:  CLRF   x44
0B5F0:  CLRF   x45
0B5F2:  CLRF   x46
0B5F4:  CLRF   x47
0B5F6:  CLRF   x48
0B5F8:  CLRF   x49
0B5FA:  CLRF   x4A
0B5FC:  CLRF   x4B
0B5FE:  CLRF   x4C
0B600:  CLRF   x4D
0B602:  CLRF   x4E
0B604:  CLRF   x4F
0B606:  CLRF   x50
0B608:  CLRF   x51
0B60A:  CLRF   x52
0B60C:  CLRF   x53
0B60E:  CLRF   x54
0B610:  CLRF   x55
0B612:  CLRF   x56
0B614:  CLRF   x57
0B616:  CLRF   x58
0B618:  CLRF   x59
0B61A:  CLRF   x5A
0B61C:  CLRF   x5B
0B61E:  CLRF   x5C
0B620:  CLRF   x5D
0B622:  CLRF   x5E
0B624:  CLRF   x5F
0B626:  CLRF   x60
0B628:  CLRF   x61
0B62A:  CLRF   x62
0B62C:  CLRF   x63
0B62E:  CLRF   x64
0B630:  CLRF   x65
0B632:  CLRF   x66
0B634:  CLRF   x67
0B636:  CLRF   x68
0B638:  CLRF   x69
0B63A:  CLRF   x6A
0B63C:  CLRF   x6B
0B63E:  CLRF   x6C
0B640:  CLRF   x6D
0B642:  CLRF   x6E
0B644:  CLRF   x6F
0B646:  CLRF   x70
0B648:  CLRF   x71
0B64A:  CLRF   x72
0B64C:  CLRF   x73
0B64E:  CLRF   x74
0B650:  CLRF   x75
0B652:  CLRF   x76
0B654:  CLRF   x77
0B656:  CLRF   x78
0B658:  CLRF   x79
0B65A:  CLRF   x7A
0B65C:  CLRF   x7B
0B65E:  CLRF   x7C
0B660:  CLRF   x7D
0B662:  CLRF   x7E
0B664:  CLRF   x7F
0B666:  CLRF   x80
0B668:  CLRF   x81
0B66A:  CLRF   x82
0B66C:  CLRF   x83
0B66E:  CLRF   x84
0B670:  CLRF   x85
0B672:  CLRF   x86
0B674:  CLRF   x87
0B676:  CLRF   x88
0B678:  CLRF   x89
0B67A:  CLRF   x8A
0B67C:  CLRF   x8B
0B67E:  CLRF   x8C
0B680:  CLRF   x8D
0B682:  CLRF   x8E
0B684:  CLRF   x8F
0B686:  CLRF   x90
0B688:  CLRF   x91
0B68A:  CLRF   x92
0B68C:  CLRF   x93
0B68E:  CLRF   x94
0B690:  CLRF   x95
0B692:  CLRF   x96
0B694:  CLRF   x97
0B696:  CLRF   x98
0B698:  CLRF   x99
0B69A:  CLRF   x9A
0B69C:  CLRF   x9B
0B69E:  CLRF   x9C
0B6A0:  CLRF   x9D
0B6A2:  CLRF   x9E
0B6A4:  CLRF   x9F
0B6A6:  CLRF   xA0
0B6A8:  CLRF   xA1
0B6AA:  CLRF   xA2
0B6AC:  CLRF   xA3
0B6AE:  CLRF   xA4
0B6B0:  CLRF   xA5
0B6B2:  CLRF   xA6
0B6B4:  CLRF   xA7
0B6B6:  CLRF   xA8
0B6B8:  CLRF   xA9
0B6BA:  CLRF   xAA
0B6BC:  CLRF   xAB
0B6BE:  CLRF   xAC
0B6C0:  CLRF   xAD
0B6C2:  CLRF   xAE
0B6C4:  CLRF   xAF
0B6C6:  CLRF   xB0
0B6C8:  CLRF   xB1
0B6CA:  CLRF   xB2
0B6CC:  CLRF   xB3
0B6CE:  CLRF   xB4
0B6D0:  CLRF   xB5
0B6D2:  CLRF   xB6
0B6D4:  CLRF   xB7
0B6D6:  CLRF   xB8
0B6D8:  CLRF   xB9
0B6DA:  CLRF   xBA
0B6DC:  CLRF   xBB
0B6DE:  CLRF   xBC
0B6E0:  CLRF   xBD
0B6E2:  CLRF   xBE
0B6E4:  CLRF   xBF
0B6E6:  CLRF   xC0
0B6E8:  CLRF   xC1
0B6EA:  CLRF   xC2
0B6EC:  CLRF   xC3
0B6EE:  CLRF   xC4
0B6F0:  CLRF   xC5
0B6F2:  CLRF   xC6
0B6F4:  CLRF   xC7
0B6F6:  CLRF   xC8
0B6F8:  CLRF   xC9
0B6FA:  CLRF   xCA
0B6FC:  CLRF   xCB
0B6FE:  CLRF   xCC
0B700:  CLRF   xCD
0B702:  CLRF   xCE
0B704:  CLRF   xCF
0B706:  CLRF   xD0
0B708:  CLRF   xD1
0B70A:  CLRF   xD2
0B70C:  CLRF   xD3
0B70E:  CLRF   xD4
0B710:  CLRF   xD5
0B712:  CLRF   xD6
0B714:  CLRF   xD7
0B716:  CLRF   xD8
0B718:  CLRF   xD9
0B71A:  CLRF   xDA
0B71C:  CLRF   xDB
0B71E:  CLRF   xDC
0B720:  CLRF   xDD
0B722:  CLRF   xDE
0B724:  CLRF   xDF
0B726:  CLRF   xE0
0B728:  CLRF   xE1
0B72A:  CLRF   xE2
0B72C:  CLRF   xE3
0B72E:  CLRF   xE4
0B730:  CLRF   xE5
0B732:  CLRF   xE6
0B734:  CLRF   xE7
0B736:  CLRF   xE8
0B738:  CLRF   xE9
0B73A:  CLRF   xEA
0B73C:  CLRF   xEB
0B73E:  CLRF   xEC
0B740:  CLRF   xED
0B742:  CLRF   xEE
0B744:  CLRF   xEF
0B746:  CLRF   xF0
0B748:  CLRF   xF1
0B74A:  CLRF   xF2
0B74C:  CLRF   xF3
0B74E:  CLRF   xF4
0B750:  CLRF   xF5
0B752:  CLRF   xF6
0B754:  CLRF   xF7
0B756:  CLRF   xF8
0B758:  CLRF   xF9
0B75A:  CLRF   xFA
0B75C:  CLRF   xFB
0B75E:  CLRF   xFC
0B760:  CLRF   xFD
0B762:  CLRF   xFE
0B764:  CLRF   xFF
0B766:  MOVLB  6
0B768:  CLRF   x00
0B76A:  CLRF   x01
0B76C:  CLRF   x02
0B76E:  CLRF   x03
0B770:  CLRF   x04
0B772:  CLRF   x05
0B774:  CLRF   x06
0B776:  CLRF   x07
0B778:  CLRF   x08
0B77A:  CLRF   x09
0B77C:  CLRF   x0A
0B77E:  CLRF   x0B
0B780:  CLRF   x0C
0B782:  CLRF   x0D
0B784:  CLRF   x0E
0B786:  CLRF   x0F
0B788:  CLRF   x10
0B78A:  CLRF   x11
0B78C:  CLRF   x12
0B78E:  CLRF   x13
0B790:  CLRF   x14
0B792:  CLRF   x15
0B794:  CLRF   x16
0B796:  CLRF   x17
0B798:  CLRF   x18
0B79A:  CLRF   x19
0B79C:  CLRF   x1A
0B79E:  CLRF   x1B
0B7A0:  CLRF   x1C
0B7A2:  CLRF   x1D
0B7A4:  CLRF   x1E
0B7A6:  CLRF   x1F
0B7A8:  CLRF   x20
0B7AA:  CLRF   x21
0B7AC:  CLRF   x22
0B7AE:  CLRF   x23
0B7B0:  CLRF   x24
0B7B2:  CLRF   x25
0B7B4:  CLRF   x26
0B7B6:  CLRF   x27
0B7B8:  CLRF   x28
0B7BA:  CLRF   x29
0B7BC:  CLRF   x2A
0B7BE:  CLRF   x2B
0B7C0:  CLRF   x2C
0B7C2:  CLRF   x2D
0B7C4:  CLRF   x2E
0B7C6:  CLRF   x2F
0B7C8:  CLRF   x30
0B7CA:  CLRF   x31
0B7CC:  CLRF   x32
0B7CE:  CLRF   x33
0B7D0:  CLRF   x34
0B7D2:  CLRF   x35
0B7D4:  CLRF   x36
0B7D6:  CLRF   x37
0B7D8:  CLRF   x38
0B7DA:  CLRF   x39
0B7DC:  CLRF   x3A
0B7DE:  CLRF   x3B
0B7E0:  CLRF   x3C
0B7E2:  CLRF   x3D
0B7E4:  CLRF   x3E
0B7E6:  CLRF   x3F
0B7E8:  CLRF   x40
0B7EA:  CLRF   x41
0B7EC:  CLRF   x42
0B7EE:  CLRF   x43
0B7F0:  CLRF   x44
0B7F2:  CLRF   x45
0B7F4:  CLRF   x46
0B7F6:  CLRF   x47
0B7F8:  CLRF   x48
0B7FA:  CLRF   x49
0B7FC:  CLRF   x4A
0B7FE:  CLRF   x4B
0B800:  CLRF   x4C
0B802:  CLRF   x4D
0B804:  CLRF   x4E
0B806:  CLRF   x4F
0B808:  CLRF   x50
0B80A:  CLRF   x51
0B80C:  CLRF   x52
0B80E:  CLRF   x53
0B810:  CLRF   x54
0B812:  CLRF   x55
0B814:  CLRF   x56
0B816:  CLRF   x57
....................     port1.port_num = 1;
0B818:  MOVLW  01
0B81A:  MOVLB  2
0B81C:  MOVWF  x58
....................     port1.sweep_step = 0;
0B81E:  CLRF   x5A
0B820:  CLRF   x59
....................     port1.active = 1;
0B822:  MOVLB  6
0B824:  BSF    x57.0
.................... 
....................     // Init Port2
....................     sweep_config_t port2 = {0};
0B826:  CLRF   x58
0B828:  CLRF   x59
0B82A:  CLRF   x5A
0B82C:  CLRF   x5B
0B82E:  CLRF   x5C
0B830:  CLRF   x5D
0B832:  CLRF   x5E
0B834:  CLRF   x5F
0B836:  CLRF   x60
0B838:  CLRF   x61
0B83A:  CLRF   x62
0B83C:  CLRF   x63
0B83E:  CLRF   x64
0B840:  CLRF   x65
0B842:  CLRF   x66
0B844:  CLRF   x67
0B846:  CLRF   x68
0B848:  CLRF   x69
0B84A:  CLRF   x6A
0B84C:  CLRF   x6B
0B84E:  CLRF   x6C
0B850:  CLRF   x6D
0B852:  CLRF   x6E
0B854:  CLRF   x6F
0B856:  CLRF   x70
0B858:  CLRF   x71
0B85A:  CLRF   x72
0B85C:  CLRF   x73
0B85E:  CLRF   x74
0B860:  CLRF   x75
0B862:  CLRF   x76
0B864:  CLRF   x77
0B866:  CLRF   x78
0B868:  CLRF   x79
0B86A:  CLRF   x7A
0B86C:  CLRF   x7B
0B86E:  CLRF   x7C
0B870:  CLRF   x7D
0B872:  CLRF   x7E
0B874:  CLRF   x7F
0B876:  CLRF   x80
0B878:  CLRF   x81
0B87A:  CLRF   x82
0B87C:  CLRF   x83
0B87E:  CLRF   x84
0B880:  CLRF   x85
0B882:  CLRF   x86
0B884:  CLRF   x87
0B886:  CLRF   x88
0B888:  CLRF   x89
0B88A:  CLRF   x8A
0B88C:  CLRF   x8B
0B88E:  CLRF   x8C
0B890:  CLRF   x8D
0B892:  CLRF   x8E
0B894:  CLRF   x8F
0B896:  CLRF   x90
0B898:  CLRF   x91
0B89A:  CLRF   x92
0B89C:  CLRF   x93
0B89E:  CLRF   x94
0B8A0:  CLRF   x95
0B8A2:  CLRF   x96
0B8A4:  CLRF   x97
0B8A6:  CLRF   x98
0B8A8:  CLRF   x99
0B8AA:  CLRF   x9A
0B8AC:  CLRF   x9B
0B8AE:  CLRF   x9C
0B8B0:  CLRF   x9D
0B8B2:  CLRF   x9E
0B8B4:  CLRF   x9F
0B8B6:  CLRF   xA0
0B8B8:  CLRF   xA1
0B8BA:  CLRF   xA2
0B8BC:  CLRF   xA3
0B8BE:  CLRF   xA4
0B8C0:  CLRF   xA5
0B8C2:  CLRF   xA6
0B8C4:  CLRF   xA7
0B8C6:  CLRF   xA8
0B8C8:  CLRF   xA9
0B8CA:  CLRF   xAA
0B8CC:  CLRF   xAB
0B8CE:  CLRF   xAC
0B8D0:  CLRF   xAD
0B8D2:  CLRF   xAE
0B8D4:  CLRF   xAF
0B8D6:  CLRF   xB0
0B8D8:  CLRF   xB1
0B8DA:  CLRF   xB2
0B8DC:  CLRF   xB3
0B8DE:  CLRF   xB4
0B8E0:  CLRF   xB5
0B8E2:  CLRF   xB6
0B8E4:  CLRF   xB7
0B8E6:  CLRF   xB8
0B8E8:  CLRF   xB9
0B8EA:  CLRF   xBA
0B8EC:  CLRF   xBB
0B8EE:  CLRF   xBC
0B8F0:  CLRF   xBD
0B8F2:  CLRF   xBE
0B8F4:  CLRF   xBF
0B8F6:  CLRF   xC0
0B8F8:  CLRF   xC1
0B8FA:  CLRF   xC2
0B8FC:  CLRF   xC3
0B8FE:  CLRF   xC4
0B900:  CLRF   xC5
0B902:  CLRF   xC6
0B904:  CLRF   xC7
0B906:  CLRF   xC8
0B908:  CLRF   xC9
0B90A:  CLRF   xCA
0B90C:  CLRF   xCB
0B90E:  CLRF   xCC
0B910:  CLRF   xCD
0B912:  CLRF   xCE
0B914:  CLRF   xCF
0B916:  CLRF   xD0
0B918:  CLRF   xD1
0B91A:  CLRF   xD2
0B91C:  CLRF   xD3
0B91E:  CLRF   xD4
0B920:  CLRF   xD5
0B922:  CLRF   xD6
0B924:  CLRF   xD7
0B926:  CLRF   xD8
0B928:  CLRF   xD9
0B92A:  CLRF   xDA
0B92C:  CLRF   xDB
0B92E:  CLRF   xDC
0B930:  CLRF   xDD
0B932:  CLRF   xDE
0B934:  CLRF   xDF
0B936:  CLRF   xE0
0B938:  CLRF   xE1
0B93A:  CLRF   xE2
0B93C:  CLRF   xE3
0B93E:  CLRF   xE4
0B940:  CLRF   xE5
0B942:  CLRF   xE6
0B944:  CLRF   xE7
0B946:  CLRF   xE8
0B948:  CLRF   xE9
0B94A:  CLRF   xEA
0B94C:  CLRF   xEB
0B94E:  CLRF   xEC
0B950:  CLRF   xED
0B952:  CLRF   xEE
0B954:  CLRF   xEF
0B956:  CLRF   xF0
0B958:  CLRF   xF1
0B95A:  CLRF   xF2
0B95C:  CLRF   xF3
0B95E:  CLRF   xF4
0B960:  CLRF   xF5
0B962:  CLRF   xF6
0B964:  CLRF   xF7
0B966:  CLRF   xF8
0B968:  CLRF   xF9
0B96A:  CLRF   xFA
0B96C:  CLRF   xFB
0B96E:  CLRF   xFC
0B970:  CLRF   xFD
0B972:  CLRF   xFE
0B974:  CLRF   xFF
0B976:  MOVLB  7
0B978:  CLRF   x00
0B97A:  CLRF   x01
0B97C:  CLRF   x02
0B97E:  CLRF   x03
0B980:  CLRF   x04
0B982:  CLRF   x05
0B984:  CLRF   x06
0B986:  CLRF   x07
0B988:  CLRF   x08
0B98A:  CLRF   x09
0B98C:  CLRF   x0A
0B98E:  CLRF   x0B
0B990:  CLRF   x0C
0B992:  CLRF   x0D
0B994:  CLRF   x0E
0B996:  CLRF   x0F
0B998:  CLRF   x10
0B99A:  CLRF   x11
0B99C:  CLRF   x12
0B99E:  CLRF   x13
0B9A0:  CLRF   x14
0B9A2:  CLRF   x15
0B9A4:  CLRF   x16
0B9A6:  CLRF   x17
0B9A8:  CLRF   x18
0B9AA:  CLRF   x19
0B9AC:  CLRF   x1A
0B9AE:  CLRF   x1B
0B9B0:  CLRF   x1C
0B9B2:  CLRF   x1D
0B9B4:  CLRF   x1E
0B9B6:  CLRF   x1F
0B9B8:  CLRF   x20
0B9BA:  CLRF   x21
0B9BC:  CLRF   x22
0B9BE:  CLRF   x23
0B9C0:  CLRF   x24
0B9C2:  CLRF   x25
0B9C4:  CLRF   x26
0B9C6:  CLRF   x27
0B9C8:  CLRF   x28
0B9CA:  CLRF   x29
0B9CC:  CLRF   x2A
0B9CE:  CLRF   x2B
0B9D0:  CLRF   x2C
0B9D2:  CLRF   x2D
0B9D4:  CLRF   x2E
0B9D6:  CLRF   x2F
0B9D8:  CLRF   x30
0B9DA:  CLRF   x31
0B9DC:  CLRF   x32
0B9DE:  CLRF   x33
0B9E0:  CLRF   x34
0B9E2:  CLRF   x35
0B9E4:  CLRF   x36
0B9E6:  CLRF   x37
0B9E8:  CLRF   x38
0B9EA:  CLRF   x39
0B9EC:  CLRF   x3A
0B9EE:  CLRF   x3B
0B9F0:  CLRF   x3C
0B9F2:  CLRF   x3D
0B9F4:  CLRF   x3E
0B9F6:  CLRF   x3F
0B9F8:  CLRF   x40
0B9FA:  CLRF   x41
0B9FC:  CLRF   x42
0B9FE:  CLRF   x43
0BA00:  CLRF   x44
0BA02:  CLRF   x45
0BA04:  CLRF   x46
0BA06:  CLRF   x47
0BA08:  CLRF   x48
0BA0A:  CLRF   x49
0BA0C:  CLRF   x4A
0BA0E:  CLRF   x4B
0BA10:  CLRF   x4C
0BA12:  CLRF   x4D
0BA14:  CLRF   x4E
0BA16:  CLRF   x4F
0BA18:  CLRF   x50
0BA1A:  CLRF   x51
0BA1C:  CLRF   x52
0BA1E:  CLRF   x53
0BA20:  CLRF   x54
0BA22:  CLRF   x55
0BA24:  CLRF   x56
0BA26:  CLRF   x57
0BA28:  CLRF   x58
0BA2A:  CLRF   x59
0BA2C:  CLRF   x5A
0BA2E:  CLRF   x5B
0BA30:  CLRF   x5C
0BA32:  CLRF   x5D
0BA34:  CLRF   x5E
0BA36:  CLRF   x5F
0BA38:  CLRF   x60
0BA3A:  CLRF   x61
0BA3C:  CLRF   x62
0BA3E:  CLRF   x63
0BA40:  CLRF   x64
0BA42:  CLRF   x65
0BA44:  CLRF   x66
0BA46:  CLRF   x67
0BA48:  CLRF   x68
0BA4A:  CLRF   x69
0BA4C:  CLRF   x6A
0BA4E:  CLRF   x6B
0BA50:  CLRF   x6C
0BA52:  CLRF   x6D
0BA54:  CLRF   x6E
0BA56:  CLRF   x6F
0BA58:  CLRF   x70
0BA5A:  CLRF   x71
0BA5C:  CLRF   x72
0BA5E:  CLRF   x73
0BA60:  CLRF   x74
0BA62:  CLRF   x75
0BA64:  CLRF   x76
0BA66:  CLRF   x77
0BA68:  CLRF   x78
0BA6A:  CLRF   x79
0BA6C:  CLRF   x7A
0BA6E:  CLRF   x7B
0BA70:  CLRF   x7C
0BA72:  CLRF   x7D
0BA74:  CLRF   x7E
0BA76:  CLRF   x7F
0BA78:  CLRF   x80
0BA7A:  CLRF   x81
0BA7C:  CLRF   x82
0BA7E:  CLRF   x83
0BA80:  CLRF   x84
0BA82:  CLRF   x85
0BA84:  CLRF   x86
0BA86:  CLRF   x87
0BA88:  CLRF   x88
0BA8A:  CLRF   x89
0BA8C:  CLRF   x8A
0BA8E:  CLRF   x8B
0BA90:  CLRF   x8C
0BA92:  CLRF   x8D
0BA94:  CLRF   x8E
0BA96:  CLRF   x8F
0BA98:  CLRF   x90
0BA9A:  CLRF   x91
0BA9C:  CLRF   x92
0BA9E:  CLRF   x93
0BAA0:  CLRF   x94
0BAA2:  CLRF   x95
0BAA4:  CLRF   x96
0BAA6:  CLRF   x97
0BAA8:  CLRF   x98
0BAAA:  CLRF   x99
0BAAC:  CLRF   x9A
0BAAE:  CLRF   x9B
0BAB0:  CLRF   x9C
0BAB2:  CLRF   x9D
0BAB4:  CLRF   x9E
0BAB6:  CLRF   x9F
0BAB8:  CLRF   xA0
0BABA:  CLRF   xA1
0BABC:  CLRF   xA2
0BABE:  CLRF   xA3
0BAC0:  CLRF   xA4
0BAC2:  CLRF   xA5
0BAC4:  CLRF   xA6
0BAC6:  CLRF   xA7
0BAC8:  CLRF   xA8
0BACA:  CLRF   xA9
0BACC:  CLRF   xAA
0BACE:  CLRF   xAB
0BAD0:  CLRF   xAC
0BAD2:  CLRF   xAD
0BAD4:  CLRF   xAE
0BAD6:  CLRF   xAF
0BAD8:  CLRF   xB0
0BADA:  CLRF   xB1
0BADC:  CLRF   xB2
0BADE:  CLRF   xB3
0BAE0:  CLRF   xB4
0BAE2:  CLRF   xB5
0BAE4:  CLRF   xB6
0BAE6:  CLRF   xB7
0BAE8:  CLRF   xB8
0BAEA:  CLRF   xB9
0BAEC:  CLRF   xBA
0BAEE:  CLRF   xBB
0BAF0:  CLRF   xBC
0BAF2:  CLRF   xBD
0BAF4:  CLRF   xBE
0BAF6:  CLRF   xBF
0BAF8:  CLRF   xC0
0BAFA:  CLRF   xC1
0BAFC:  CLRF   xC2
0BAFE:  CLRF   xC3
0BB00:  CLRF   xC4
0BB02:  CLRF   xC5
0BB04:  CLRF   xC6
0BB06:  CLRF   xC7
0BB08:  CLRF   xC8
0BB0A:  CLRF   xC9
0BB0C:  CLRF   xCA
0BB0E:  CLRF   xCB
0BB10:  CLRF   xCC
0BB12:  CLRF   xCD
0BB14:  CLRF   xCE
0BB16:  CLRF   xCF
0BB18:  CLRF   xD0
0BB1A:  CLRF   xD1
0BB1C:  CLRF   xD2
0BB1E:  CLRF   xD3
0BB20:  CLRF   xD4
0BB22:  CLRF   xD5
0BB24:  CLRF   xD6
0BB26:  CLRF   xD7
0BB28:  CLRF   xD8
0BB2A:  CLRF   xD9
0BB2C:  CLRF   xDA
0BB2E:  CLRF   xDB
0BB30:  CLRF   xDC
0BB32:  CLRF   xDD
0BB34:  CLRF   xDE
0BB36:  CLRF   xDF
0BB38:  CLRF   xE0
0BB3A:  CLRF   xE1
0BB3C:  CLRF   xE2
0BB3E:  CLRF   xE3
0BB40:  CLRF   xE4
0BB42:  CLRF   xE5
0BB44:  CLRF   xE6
0BB46:  CLRF   xE7
0BB48:  CLRF   xE8
0BB4A:  CLRF   xE9
0BB4C:  CLRF   xEA
0BB4E:  CLRF   xEB
0BB50:  CLRF   xEC
0BB52:  CLRF   xED
0BB54:  CLRF   xEE
0BB56:  CLRF   xEF
0BB58:  CLRF   xF0
0BB5A:  CLRF   xF1
0BB5C:  CLRF   xF2
0BB5E:  CLRF   xF3
0BB60:  CLRF   xF4
0BB62:  CLRF   xF5
0BB64:  CLRF   xF6
0BB66:  CLRF   xF7
0BB68:  CLRF   xF8
0BB6A:  CLRF   xF9
0BB6C:  CLRF   xFA
0BB6E:  CLRF   xFB
0BB70:  CLRF   xFC
0BB72:  CLRF   xFD
0BB74:  CLRF   xFE
0BB76:  CLRF   xFF
0BB78:  MOVLB  8
0BB7A:  CLRF   x00
0BB7C:  CLRF   x01
0BB7E:  CLRF   x02
0BB80:  CLRF   x03
0BB82:  CLRF   x04
0BB84:  CLRF   x05
0BB86:  CLRF   x06
0BB88:  CLRF   x07
0BB8A:  CLRF   x08
0BB8C:  CLRF   x09
0BB8E:  CLRF   x0A
0BB90:  CLRF   x0B
0BB92:  CLRF   x0C
0BB94:  CLRF   x0D
0BB96:  CLRF   x0E
0BB98:  CLRF   x0F
0BB9A:  CLRF   x10
0BB9C:  CLRF   x11
0BB9E:  CLRF   x12
0BBA0:  CLRF   x13
0BBA2:  CLRF   x14
0BBA4:  CLRF   x15
0BBA6:  CLRF   x16
0BBA8:  CLRF   x17
0BBAA:  CLRF   x18
0BBAC:  CLRF   x19
0BBAE:  CLRF   x1A
0BBB0:  CLRF   x1B
0BBB2:  CLRF   x1C
0BBB4:  CLRF   x1D
0BBB6:  CLRF   x1E
0BBB8:  CLRF   x1F
0BBBA:  CLRF   x20
0BBBC:  CLRF   x21
0BBBE:  CLRF   x22
0BBC0:  CLRF   x23
0BBC2:  CLRF   x24
0BBC4:  CLRF   x25
0BBC6:  CLRF   x26
0BBC8:  CLRF   x27
0BBCA:  CLRF   x28
0BBCC:  CLRF   x29
0BBCE:  CLRF   x2A
0BBD0:  CLRF   x2B
0BBD2:  CLRF   x2C
0BBD4:  CLRF   x2D
0BBD6:  CLRF   x2E
0BBD8:  CLRF   x2F
0BBDA:  CLRF   x30
0BBDC:  CLRF   x31
0BBDE:  CLRF   x32
0BBE0:  CLRF   x33
0BBE2:  CLRF   x34
0BBE4:  CLRF   x35
0BBE6:  CLRF   x36
0BBE8:  CLRF   x37
0BBEA:  CLRF   x38
0BBEC:  CLRF   x39
0BBEE:  CLRF   x3A
0BBF0:  CLRF   x3B
0BBF2:  CLRF   x3C
0BBF4:  CLRF   x3D
0BBF6:  CLRF   x3E
0BBF8:  CLRF   x3F
0BBFA:  CLRF   x40
0BBFC:  CLRF   x41
0BBFE:  CLRF   x42
0BC00:  CLRF   x43
0BC02:  CLRF   x44
0BC04:  CLRF   x45
0BC06:  CLRF   x46
0BC08:  CLRF   x47
0BC0A:  CLRF   x48
0BC0C:  CLRF   x49
0BC0E:  CLRF   x4A
0BC10:  CLRF   x4B
0BC12:  CLRF   x4C
0BC14:  CLRF   x4D
0BC16:  CLRF   x4E
0BC18:  CLRF   x4F
0BC1A:  CLRF   x50
0BC1C:  CLRF   x51
0BC1E:  CLRF   x52
0BC20:  CLRF   x53
0BC22:  CLRF   x54
0BC24:  CLRF   x55
0BC26:  CLRF   x56
0BC28:  CLRF   x57
0BC2A:  CLRF   x58
0BC2C:  CLRF   x59
0BC2E:  CLRF   x5A
0BC30:  CLRF   x5B
0BC32:  CLRF   x5C
0BC34:  CLRF   x5D
0BC36:  CLRF   x5E
0BC38:  CLRF   x5F
0BC3A:  CLRF   x60
0BC3C:  CLRF   x61
0BC3E:  CLRF   x62
0BC40:  CLRF   x63
0BC42:  CLRF   x64
0BC44:  CLRF   x65
0BC46:  CLRF   x66
0BC48:  CLRF   x67
0BC4A:  CLRF   x68
0BC4C:  CLRF   x69
0BC4E:  CLRF   x6A
0BC50:  CLRF   x6B
0BC52:  CLRF   x6C
0BC54:  CLRF   x6D
0BC56:  CLRF   x6E
0BC58:  CLRF   x6F
0BC5A:  CLRF   x70
0BC5C:  CLRF   x71
0BC5E:  CLRF   x72
0BC60:  CLRF   x73
0BC62:  CLRF   x74
0BC64:  CLRF   x75
0BC66:  CLRF   x76
0BC68:  CLRF   x77
0BC6A:  CLRF   x78
0BC6C:  CLRF   x79
0BC6E:  CLRF   x7A
0BC70:  CLRF   x7B
0BC72:  CLRF   x7C
0BC74:  CLRF   x7D
0BC76:  CLRF   x7E
0BC78:  CLRF   x7F
0BC7A:  CLRF   x80
0BC7C:  CLRF   x81
0BC7E:  CLRF   x82
0BC80:  CLRF   x83
0BC82:  CLRF   x84
0BC84:  CLRF   x85
0BC86:  CLRF   x86
0BC88:  CLRF   x87
0BC8A:  CLRF   x88
0BC8C:  CLRF   x89
0BC8E:  CLRF   x8A
0BC90:  CLRF   x8B
0BC92:  CLRF   x8C
0BC94:  CLRF   x8D
0BC96:  CLRF   x8E
0BC98:  CLRF   x8F
0BC9A:  CLRF   x90
0BC9C:  CLRF   x91
0BC9E:  CLRF   x92
0BCA0:  CLRF   x93
0BCA2:  CLRF   x94
0BCA4:  CLRF   x95
0BCA6:  CLRF   x96
0BCA8:  CLRF   x97
0BCAA:  CLRF   x98
0BCAC:  CLRF   x99
0BCAE:  CLRF   x9A
0BCB0:  CLRF   x9B
0BCB2:  CLRF   x9C
0BCB4:  CLRF   x9D
0BCB6:  CLRF   x9E
0BCB8:  CLRF   x9F
0BCBA:  CLRF   xA0
0BCBC:  CLRF   xA1
0BCBE:  CLRF   xA2
0BCC0:  CLRF   xA3
0BCC2:  CLRF   xA4
0BCC4:  CLRF   xA5
0BCC6:  CLRF   xA6
0BCC8:  CLRF   xA7
0BCCA:  CLRF   xA8
0BCCC:  CLRF   xA9
0BCCE:  CLRF   xAA
0BCD0:  CLRF   xAB
0BCD2:  CLRF   xAC
0BCD4:  CLRF   xAD
0BCD6:  CLRF   xAE
0BCD8:  CLRF   xAF
0BCDA:  CLRF   xB0
0BCDC:  CLRF   xB1
0BCDE:  CLRF   xB2
0BCE0:  CLRF   xB3
0BCE2:  CLRF   xB4
0BCE4:  CLRF   xB5
0BCE6:  CLRF   xB6
0BCE8:  CLRF   xB7
0BCEA:  CLRF   xB8
0BCEC:  CLRF   xB9
0BCEE:  CLRF   xBA
0BCF0:  CLRF   xBB
0BCF2:  CLRF   xBC
0BCF4:  CLRF   xBD
0BCF6:  CLRF   xBE
0BCF8:  CLRF   xBF
0BCFA:  CLRF   xC0
0BCFC:  CLRF   xC1
0BCFE:  CLRF   xC2
0BD00:  CLRF   xC3
0BD02:  CLRF   xC4
0BD04:  CLRF   xC5
0BD06:  CLRF   xC6
0BD08:  CLRF   xC7
0BD0A:  CLRF   xC8
0BD0C:  CLRF   xC9
0BD0E:  CLRF   xCA
0BD10:  CLRF   xCB
0BD12:  CLRF   xCC
0BD14:  CLRF   xCD
0BD16:  CLRF   xCE
0BD18:  CLRF   xCF
0BD1A:  CLRF   xD0
0BD1C:  CLRF   xD1
0BD1E:  CLRF   xD2
0BD20:  CLRF   xD3
0BD22:  CLRF   xD4
0BD24:  CLRF   xD5
0BD26:  CLRF   xD6
0BD28:  CLRF   xD7
0BD2A:  CLRF   xD8
0BD2C:  CLRF   xD9
0BD2E:  CLRF   xDA
0BD30:  CLRF   xDB
0BD32:  CLRF   xDC
0BD34:  CLRF   xDD
0BD36:  CLRF   xDE
0BD38:  CLRF   xDF
0BD3A:  CLRF   xE0
0BD3C:  CLRF   xE1
0BD3E:  CLRF   xE2
0BD40:  CLRF   xE3
0BD42:  CLRF   xE4
0BD44:  CLRF   xE5
0BD46:  CLRF   xE6
0BD48:  CLRF   xE7
0BD4A:  CLRF   xE8
0BD4C:  CLRF   xE9
0BD4E:  CLRF   xEA
0BD50:  CLRF   xEB
0BD52:  CLRF   xEC
0BD54:  CLRF   xED
0BD56:  CLRF   xEE
0BD58:  CLRF   xEF
0BD5A:  CLRF   xF0
0BD5C:  CLRF   xF1
0BD5E:  CLRF   xF2
0BD60:  CLRF   xF3
0BD62:  CLRF   xF4
0BD64:  CLRF   xF5
0BD66:  CLRF   xF6
0BD68:  CLRF   xF7
0BD6A:  CLRF   xF8
0BD6C:  CLRF   xF9
0BD6E:  CLRF   xFA
0BD70:  CLRF   xFB
0BD72:  CLRF   xFC
0BD74:  CLRF   xFD
0BD76:  CLRF   xFE
0BD78:  CLRF   xFF
0BD7A:  MOVLB  9
0BD7C:  CLRF   x00
0BD7E:  CLRF   x01
0BD80:  CLRF   x02
0BD82:  CLRF   x03
0BD84:  CLRF   x04
0BD86:  CLRF   x05
0BD88:  CLRF   x06
0BD8A:  CLRF   x07
0BD8C:  CLRF   x08
0BD8E:  CLRF   x09
0BD90:  CLRF   x0A
0BD92:  CLRF   x0B
0BD94:  CLRF   x0C
0BD96:  CLRF   x0D
0BD98:  CLRF   x0E
0BD9A:  CLRF   x0F
0BD9C:  CLRF   x10
0BD9E:  CLRF   x11
0BDA0:  CLRF   x12
0BDA2:  CLRF   x13
0BDA4:  CLRF   x14
0BDA6:  CLRF   x15
0BDA8:  CLRF   x16
0BDAA:  CLRF   x17
0BDAC:  CLRF   x18
0BDAE:  CLRF   x19
0BDB0:  CLRF   x1A
0BDB2:  CLRF   x1B
0BDB4:  CLRF   x1C
0BDB6:  CLRF   x1D
0BDB8:  CLRF   x1E
0BDBA:  CLRF   x1F
0BDBC:  CLRF   x20
0BDBE:  CLRF   x21
0BDC0:  CLRF   x22
0BDC2:  CLRF   x23
0BDC4:  CLRF   x24
0BDC6:  CLRF   x25
0BDC8:  CLRF   x26
0BDCA:  CLRF   x27
0BDCC:  CLRF   x28
0BDCE:  CLRF   x29
0BDD0:  CLRF   x2A
0BDD2:  CLRF   x2B
0BDD4:  CLRF   x2C
0BDD6:  CLRF   x2D
0BDD8:  CLRF   x2E
0BDDA:  CLRF   x2F
0BDDC:  CLRF   x30
0BDDE:  CLRF   x31
0BDE0:  CLRF   x32
0BDE2:  CLRF   x33
0BDE4:  CLRF   x34
0BDE6:  CLRF   x35
0BDE8:  CLRF   x36
0BDEA:  CLRF   x37
0BDEC:  CLRF   x38
0BDEE:  CLRF   x39
0BDF0:  CLRF   x3A
0BDF2:  CLRF   x3B
0BDF4:  CLRF   x3C
0BDF6:  CLRF   x3D
0BDF8:  CLRF   x3E
0BDFA:  CLRF   x3F
0BDFC:  CLRF   x40
0BDFE:  CLRF   x41
0BE00:  CLRF   x42
0BE02:  CLRF   x43
0BE04:  CLRF   x44
0BE06:  CLRF   x45
0BE08:  CLRF   x46
0BE0A:  CLRF   x47
0BE0C:  CLRF   x48
0BE0E:  CLRF   x49
0BE10:  CLRF   x4A
0BE12:  CLRF   x4B
0BE14:  CLRF   x4C
0BE16:  CLRF   x4D
0BE18:  CLRF   x4E
0BE1A:  CLRF   x4F
0BE1C:  CLRF   x50
0BE1E:  CLRF   x51
0BE20:  CLRF   x52
0BE22:  CLRF   x53
0BE24:  CLRF   x54
0BE26:  CLRF   x55
0BE28:  CLRF   x56
0BE2A:  CLRF   x57
0BE2C:  CLRF   x58
0BE2E:  CLRF   x59
0BE30:  CLRF   x5A
0BE32:  CLRF   x5B
0BE34:  CLRF   x5C
0BE36:  CLRF   x5D
0BE38:  CLRF   x5E
0BE3A:  CLRF   x5F
0BE3C:  CLRF   x60
0BE3E:  CLRF   x61
0BE40:  CLRF   x62
0BE42:  CLRF   x63
0BE44:  CLRF   x64
0BE46:  CLRF   x65
0BE48:  CLRF   x66
0BE4A:  CLRF   x67
0BE4C:  CLRF   x68
0BE4E:  CLRF   x69
0BE50:  CLRF   x6A
0BE52:  CLRF   x6B
0BE54:  CLRF   x6C
0BE56:  CLRF   x6D
0BE58:  CLRF   x6E
0BE5A:  CLRF   x6F
0BE5C:  CLRF   x70
0BE5E:  CLRF   x71
0BE60:  CLRF   x72
0BE62:  CLRF   x73
0BE64:  CLRF   x74
0BE66:  CLRF   x75
0BE68:  CLRF   x76
0BE6A:  CLRF   x77
0BE6C:  CLRF   x78
0BE6E:  CLRF   x79
0BE70:  CLRF   x7A
0BE72:  CLRF   x7B
0BE74:  CLRF   x7C
0BE76:  CLRF   x7D
0BE78:  CLRF   x7E
0BE7A:  CLRF   x7F
0BE7C:  CLRF   x80
0BE7E:  CLRF   x81
0BE80:  CLRF   x82
0BE82:  CLRF   x83
0BE84:  CLRF   x84
0BE86:  CLRF   x85
0BE88:  CLRF   x86
0BE8A:  CLRF   x87
0BE8C:  CLRF   x88
0BE8E:  CLRF   x89
0BE90:  CLRF   x8A
0BE92:  CLRF   x8B
0BE94:  CLRF   x8C
0BE96:  CLRF   x8D
0BE98:  CLRF   x8E
0BE9A:  CLRF   x8F
0BE9C:  CLRF   x90
0BE9E:  CLRF   x91
0BEA0:  CLRF   x92
0BEA2:  CLRF   x93
0BEA4:  CLRF   x94
0BEA6:  CLRF   x95
0BEA8:  CLRF   x96
0BEAA:  CLRF   x97
0BEAC:  CLRF   x98
0BEAE:  CLRF   x99
0BEB0:  CLRF   x9A
0BEB2:  CLRF   x9B
0BEB4:  CLRF   x9C
0BEB6:  CLRF   x9D
0BEB8:  CLRF   x9E
0BEBA:  CLRF   x9F
0BEBC:  CLRF   xA0
0BEBE:  CLRF   xA1
0BEC0:  CLRF   xA2
0BEC2:  CLRF   xA3
0BEC4:  CLRF   xA4
0BEC6:  CLRF   xA5
0BEC8:  CLRF   xA6
0BECA:  CLRF   xA7
0BECC:  CLRF   xA8
0BECE:  CLRF   xA9
0BED0:  CLRF   xAA
0BED2:  CLRF   xAB
0BED4:  CLRF   xAC
0BED6:  CLRF   xAD
0BED8:  CLRF   xAE
0BEDA:  CLRF   xAF
0BEDC:  CLRF   xB0
0BEDE:  CLRF   xB1
0BEE0:  CLRF   xB2
0BEE2:  CLRF   xB3
0BEE4:  CLRF   xB4
0BEE6:  CLRF   xB5
0BEE8:  CLRF   xB6
0BEEA:  CLRF   xB7
0BEEC:  CLRF   xB8
0BEEE:  CLRF   xB9
0BEF0:  CLRF   xBA
0BEF2:  CLRF   xBB
0BEF4:  CLRF   xBC
0BEF6:  CLRF   xBD
0BEF8:  CLRF   xBE
0BEFA:  CLRF   xBF
0BEFC:  CLRF   xC0
0BEFE:  CLRF   xC1
0BF00:  CLRF   xC2
0BF02:  CLRF   xC3
0BF04:  CLRF   xC4
0BF06:  CLRF   xC5
0BF08:  CLRF   xC6
0BF0A:  CLRF   xC7
0BF0C:  CLRF   xC8
0BF0E:  CLRF   xC9
0BF10:  CLRF   xCA
0BF12:  CLRF   xCB
0BF14:  CLRF   xCC
0BF16:  CLRF   xCD
0BF18:  CLRF   xCE
0BF1A:  CLRF   xCF
0BF1C:  CLRF   xD0
0BF1E:  CLRF   xD1
0BF20:  CLRF   xD2
0BF22:  CLRF   xD3
0BF24:  CLRF   xD4
0BF26:  CLRF   xD5
0BF28:  CLRF   xD6
0BF2A:  CLRF   xD7
0BF2C:  CLRF   xD8
0BF2E:  CLRF   xD9
0BF30:  CLRF   xDA
0BF32:  CLRF   xDB
0BF34:  CLRF   xDC
0BF36:  CLRF   xDD
0BF38:  CLRF   xDE
0BF3A:  CLRF   xDF
0BF3C:  CLRF   xE0
0BF3E:  CLRF   xE1
0BF40:  CLRF   xE2
0BF42:  CLRF   xE3
0BF44:  CLRF   xE4
0BF46:  CLRF   xE5
0BF48:  CLRF   xE6
0BF4A:  CLRF   xE7
0BF4C:  CLRF   xE8
0BF4E:  CLRF   xE9
0BF50:  CLRF   xEA
0BF52:  CLRF   xEB
0BF54:  CLRF   xEC
0BF56:  CLRF   xED
0BF58:  CLRF   xEE
0BF5A:  CLRF   xEF
0BF5C:  CLRF   xF0
0BF5E:  CLRF   xF1
0BF60:  CLRF   xF2
0BF62:  CLRF   xF3
0BF64:  CLRF   xF4
0BF66:  CLRF   xF5
0BF68:  CLRF   xF6
0BF6A:  CLRF   xF7
0BF6C:  CLRF   xF8
0BF6E:  CLRF   xF9
0BF70:  CLRF   xFA
0BF72:  CLRF   xFB
0BF74:  CLRF   xFC
0BF76:  CLRF   xFD
0BF78:  CLRF   xFE
0BF7A:  CLRF   xFF
0BF7C:  MOVLB  A
0BF7E:  CLRF   x00
0BF80:  CLRF   x01
0BF82:  CLRF   x02
0BF84:  CLRF   x03
0BF86:  CLRF   x04
0BF88:  CLRF   x05
0BF8A:  CLRF   x06
0BF8C:  CLRF   x07
0BF8E:  CLRF   x08
0BF90:  CLRF   x09
0BF92:  CLRF   x0A
0BF94:  CLRF   x0B
0BF96:  CLRF   x0C
0BF98:  CLRF   x0D
0BF9A:  CLRF   x0E
0BF9C:  CLRF   x0F
0BF9E:  CLRF   x10
0BFA0:  CLRF   x11
0BFA2:  CLRF   x12
0BFA4:  CLRF   x13
0BFA6:  CLRF   x14
0BFA8:  CLRF   x15
0BFAA:  CLRF   x16
0BFAC:  CLRF   x17
0BFAE:  CLRF   x18
0BFB0:  CLRF   x19
0BFB2:  CLRF   x1A
0BFB4:  CLRF   x1B
0BFB6:  CLRF   x1C
0BFB8:  CLRF   x1D
0BFBA:  CLRF   x1E
0BFBC:  CLRF   x1F
0BFBE:  CLRF   x20
0BFC0:  CLRF   x21
0BFC2:  CLRF   x22
0BFC4:  CLRF   x23
0BFC6:  CLRF   x24
0BFC8:  CLRF   x25
0BFCA:  CLRF   x26
0BFCC:  CLRF   x27
0BFCE:  CLRF   x28
0BFD0:  CLRF   x29
0BFD2:  CLRF   x2A
0BFD4:  CLRF   x2B
0BFD6:  CLRF   x2C
0BFD8:  CLRF   x2D
0BFDA:  CLRF   x2E
0BFDC:  CLRF   x2F
0BFDE:  CLRF   x30
0BFE0:  CLRF   x31
0BFE2:  CLRF   x32
0BFE4:  CLRF   x33
0BFE6:  CLRF   x34
0BFE8:  CLRF   x35
0BFEA:  CLRF   x36
0BFEC:  CLRF   x37
0BFEE:  CLRF   x38
0BFF0:  CLRF   x39
0BFF2:  CLRF   x3A
0BFF4:  CLRF   x3B
0BFF6:  CLRF   x3C
0BFF8:  CLRF   x3D
0BFFA:  CLRF   x3E
0BFFC:  CLRF   x3F
0BFFE:  CLRF   x40
0C000:  CLRF   x41
0C002:  CLRF   x42
0C004:  CLRF   x43
0C006:  CLRF   x44
0C008:  CLRF   x45
0C00A:  CLRF   x46
0C00C:  CLRF   x47
0C00E:  CLRF   x48
0C010:  CLRF   x49
0C012:  CLRF   x4A
0C014:  CLRF   x4B
0C016:  CLRF   x4C
0C018:  CLRF   x4D
0C01A:  CLRF   x4E
0C01C:  CLRF   x4F
0C01E:  CLRF   x50
0C020:  CLRF   x51
0C022:  CLRF   x52
0C024:  CLRF   x53
0C026:  CLRF   x54
0C028:  CLRF   x55
0C02A:  CLRF   x56
0C02C:  CLRF   x57
....................     port2.port_num = 2; 
0C02E:  MOVLW  02
0C030:  MOVLB  6
0C032:  MOVWF  x58
....................     port2.sweep_step = 0;
0C034:  CLRF   x5A
0C036:  CLRF   x59
....................     port2.active = 1;
0C038:  MOVLB  A
0C03A:  BSF    x57.0
.................... 
....................     int16 count = 1;
....................     iv_env_t measured_data = create_meas_data();
0C03C:  CLRF   x59
0C03E:  MOVLW  01
0C040:  MOVWF  x58
0C042:  MOVLB  0
0C044:  CALL   8834
0C048:  MOVFF  02,03
0C04C:  MOVF   01,W
0C04E:  MOVWF  FE1
0C050:  MOVFF  03,FE2
0C054:  MOVLW  0A
0C056:  MOVWF  FEA
0C058:  MOVLW  5A
0C05A:  MOVWF  FE9
0C05C:  MOVLW  0C
0C05E:  MOVWF  01
0C060:  MOVFF  FE6,FEE
0C064:  DECFSZ 01,F
0C066:  GOTO   C060
....................     while (port1.active || port2.active)
0C06A:  MOVLB  6
0C06C:  BTFSS  x57.0
0C06E:  BRA    C076
0C070:  MOVLB  0
0C072:  GOTO   C086
0C076:  MOVLB  0
0C078:  MOVLB  A
0C07A:  BTFSC  x57.0
0C07C:  BRA    C084
0C07E:  MOVLB  0
0C080:  GOTO   C362
0C084:  MOVLB  0
....................     {
....................         mcp4901_1_write(count);
0C086:  MOVFF  A59,A81
0C08A:  MOVFF  A58,A80
0C08E:  CALL   2602
....................         mcp4901_2_write(count);
0C092:  MOVFF  A59,A81
0C096:  MOVFF  A58,A80
0C09A:  CALL   2644
....................         delay_us(10); 
0C09E:  MOVLW  0D
0C0A0:  MOVWF  00
0C0A2:  DECFSZ 00,F
0C0A4:  BRA    C0A2
....................         if (port1.active) {
0C0A6:  MOVLB  6
0C0A8:  BTFSC  x57.0
0C0AA:  BRA    C0B2
0C0AC:  MOVLB  0
0C0AE:  GOTO   C202
0C0B2:  MOVLB  0
....................             unsigned int32 ans = ad7490_read(ADC_CIGS1_CURR);
0C0B4:  MOVLW  01
0C0B6:  MOVLB  A
0C0B8:  MOVWF  x92
0C0BA:  MOVLB  0
0C0BC:  CALL   2244
0C0C0:  MOVLB  A
0C0C2:  CLRF   x69
0C0C4:  CLRF   x68
0C0C6:  MOVFF  02,A67
0C0CA:  MOVFF  01,A66
0C0CE:  MOVLB  0
....................             ans += ad7490_read(ADC_CIGS1_CURR);
0C0D0:  MOVLW  01
0C0D2:  MOVLB  A
0C0D4:  MOVWF  x92
0C0D6:  MOVLB  0
0C0D8:  CALL   2244
0C0DC:  MOVFF  02,03
0C0E0:  MOVF   01,W
0C0E2:  MOVLB  A
0C0E4:  ADDWF  x66,F
0C0E6:  MOVF   03,W
0C0E8:  ADDWFC x67,F
0C0EA:  MOVLW  00
0C0EC:  ADDWFC x68,F
0C0EE:  MOVLW  00
0C0F0:  ADDWFC x69,F
....................             ans = ans/2;
0C0F2:  BCF    FD8.0
0C0F4:  RRCF   x69,F
0C0F6:  RRCF   x68,F
0C0F8:  RRCF   x67,F
0C0FA:  RRCF   x66,F
....................             port1.data_buffer[count].voltage = ad7490_read(ADC_CIGS1_AMP);
0C0FC:  RLCF   x58,W
0C0FE:  MOVWF  02
0C100:  RLCF   x59,W
0C102:  MOVWF  03
0C104:  RLCF   02,F
0C106:  RLCF   03,F
0C108:  MOVLW  FC
0C10A:  ANDWF  02,F
0C10C:  MOVF   02,W
0C10E:  ADDLW  5B
0C110:  MOVWF  01
0C112:  MOVLW  02
0C114:  ADDWFC 03,F
0C116:  MOVF   01,W
0C118:  MOVWF  x6D
0C11A:  MOVFF  03,A6E
0C11E:  MOVLW  02
0C120:  MOVWF  x92
0C122:  MOVLB  0
0C124:  CALL   2244
0C128:  MOVFF  A6E,FEA
0C12C:  MOVFF  A6D,FE9
0C130:  MOVFF  02,FEC
0C134:  MOVF   FED,F
0C136:  MOVFF  01,FEF
....................             port1.data_buffer[count].current = ans;
0C13A:  MOVLB  A
0C13C:  RLCF   x58,W
0C13E:  MOVWF  02
0C140:  RLCF   x59,W
0C142:  MOVWF  03
0C144:  RLCF   02,F
0C146:  RLCF   03,F
0C148:  MOVLW  FC
0C14A:  ANDWF  02,F
0C14C:  MOVF   02,W
0C14E:  ADDLW  03
0C150:  MOVWF  x6B
0C152:  MOVLW  00
0C154:  ADDWFC 03,W
0C156:  MOVWF  x6C
0C158:  MOVLW  02
0C15A:  ADDWF  x6B,W
0C15C:  MOVWF  01
0C15E:  MOVLW  00
0C160:  ADDWFC x6C,W
0C162:  MOVWF  03
0C164:  MOVF   01,W
0C166:  ADDLW  58
0C168:  MOVWF  FE9
0C16A:  MOVLW  02
0C16C:  ADDWFC 03,W
0C16E:  MOVWF  FEA
0C170:  MOVFF  A66,FEF
0C174:  MOVFF  A67,FEC
0C178:  MOVF   FED,F
....................             port1.sweep_step = count + 1; 
0C17A:  MOVLW  01
0C17C:  ADDWF  x58,W
0C17E:  MOVLB  2
0C180:  MOVWF  x59
0C182:  MOVLW  00
0C184:  MOVLB  A
0C186:  ADDWFC x59,W
0C188:  MOVLB  2
0C18A:  MOVWF  x5A
....................             if (port1.data_buffer[count].current < curr_limit) {
0C18C:  MOVLB  A
0C18E:  RLCF   x58,W
0C190:  MOVWF  02
0C192:  RLCF   x59,W
0C194:  MOVWF  03
0C196:  RLCF   02,F
0C198:  RLCF   03,F
0C19A:  MOVLW  FC
0C19C:  ANDWF  02,F
0C19E:  MOVF   02,W
0C1A0:  ADDLW  03
0C1A2:  MOVWF  x6B
0C1A4:  MOVLW  00
0C1A6:  ADDWFC 03,W
0C1A8:  MOVWF  x6C
0C1AA:  MOVLW  02
0C1AC:  ADDWF  x6B,W
0C1AE:  MOVWF  01
0C1B0:  MOVLW  00
0C1B2:  ADDWFC x6C,W
0C1B4:  MOVWF  03
0C1B6:  MOVF   01,W
0C1B8:  ADDLW  58
0C1BA:  MOVWF  FE9
0C1BC:  MOVLW  02
0C1BE:  ADDWFC 03,W
0C1C0:  MOVWF  FEA
0C1C2:  MOVFF  FEC,A6C
0C1C6:  MOVF   FED,F
0C1C8:  MOVFF  FEF,A6B
0C1CC:  MOVF   x6C,W
0C1CE:  MOVLB  2
0C1D0:  SUBWF  x57,W
0C1D2:  BTFSC  FD8.0
0C1D4:  BRA    C1DC
0C1D6:  MOVLB  0
0C1D8:  GOTO   C202
0C1DC:  MOVLB  0
0C1DE:  BTFSS  FD8.2
0C1E0:  GOTO   C1F8
0C1E4:  MOVLB  2
0C1E6:  MOVF   x56,W
0C1E8:  MOVLB  A
0C1EA:  SUBWF  x6B,W
0C1EC:  BTFSS  FD8.0
0C1EE:  BRA    C1F6
0C1F0:  MOVLB  0
0C1F2:  GOTO   C202
0C1F6:  MOVLB  0
....................                 port1.active = 0;
0C1F8:  MOVLB  6
0C1FA:  BCF    x57.0
....................                 disconnect_port1();
0C1FC:  MOVLB  0
0C1FE:  CALL   88B6
....................             }
....................         }
....................         if (port2.active) {
0C202:  MOVLB  A
0C204:  BTFSC  x57.0
0C206:  BRA    C20E
0C208:  MOVLB  0
0C20A:  GOTO   C332
0C20E:  MOVLB  0
....................             port2.data_buffer[count].voltage = ad7490_read(ADC_CIGS2_AMP);
0C210:  MOVLB  A
0C212:  RLCF   x58,W
0C214:  MOVWF  02
0C216:  RLCF   x59,W
0C218:  MOVWF  03
0C21A:  RLCF   02,F
0C21C:  RLCF   03,F
0C21E:  MOVLW  FC
0C220:  ANDWF  02,F
0C222:  MOVF   02,W
0C224:  ADDLW  5B
0C226:  MOVWF  01
0C228:  MOVLW  06
0C22A:  ADDWFC 03,F
0C22C:  MOVF   01,W
0C22E:  MOVWF  x6D
0C230:  MOVFF  03,A6E
0C234:  MOVLW  06
0C236:  MOVWF  x92
0C238:  MOVLB  0
0C23A:  CALL   2244
0C23E:  MOVFF  A6E,FEA
0C242:  MOVFF  A6D,FE9
0C246:  MOVFF  02,FEC
0C24A:  MOVF   FED,F
0C24C:  MOVFF  01,FEF
....................             port2.data_buffer[count].current = ad7490_read(ADC_CIGS2_CURR);
0C250:  MOVLB  A
0C252:  RLCF   x58,W
0C254:  MOVWF  02
0C256:  RLCF   x59,W
0C258:  MOVWF  03
0C25A:  RLCF   02,F
0C25C:  RLCF   03,F
0C25E:  MOVLW  FC
0C260:  ANDWF  02,F
0C262:  MOVF   02,W
0C264:  ADDLW  03
0C266:  MOVWF  x6B
0C268:  MOVLW  00
0C26A:  ADDWFC 03,W
0C26C:  MOVWF  x6C
0C26E:  MOVLW  02
0C270:  ADDWF  x6B,W
0C272:  MOVWF  01
0C274:  MOVLW  00
0C276:  ADDWFC x6C,W
0C278:  MOVWF  03
0C27A:  MOVF   01,W
0C27C:  ADDLW  58
0C27E:  MOVWF  01
0C280:  MOVLW  06
0C282:  ADDWFC 03,F
0C284:  MOVF   01,W
0C286:  MOVWF  x6B
0C288:  MOVFF  03,A6C
0C28C:  MOVLW  05
0C28E:  MOVWF  x92
0C290:  MOVLB  0
0C292:  CALL   2244
0C296:  MOVFF  A6C,FEA
0C29A:  MOVFF  A6B,FE9
0C29E:  MOVFF  02,FEC
0C2A2:  MOVF   FED,F
0C2A4:  MOVFF  01,FEF
....................             port2.sweep_step = count + 1;
0C2A8:  MOVLW  01
0C2AA:  MOVLB  A
0C2AC:  ADDWF  x58,W
0C2AE:  MOVLB  6
0C2B0:  MOVWF  x59
0C2B2:  MOVLW  00
0C2B4:  MOVLB  A
0C2B6:  ADDWFC x59,W
0C2B8:  MOVLB  6
0C2BA:  MOVWF  x5A
....................             if (port2.data_buffer[count].current < curr_limit) {
0C2BC:  MOVLB  A
0C2BE:  RLCF   x58,W
0C2C0:  MOVWF  02
0C2C2:  RLCF   x59,W
0C2C4:  MOVWF  03
0C2C6:  RLCF   02,F
0C2C8:  RLCF   03,F
0C2CA:  MOVLW  FC
0C2CC:  ANDWF  02,F
0C2CE:  MOVF   02,W
0C2D0:  ADDLW  03
0C2D2:  MOVWF  x6B
0C2D4:  MOVLW  00
0C2D6:  ADDWFC 03,W
0C2D8:  MOVWF  x6C
0C2DA:  MOVLW  02
0C2DC:  ADDWF  x6B,W
0C2DE:  MOVWF  01
0C2E0:  MOVLW  00
0C2E2:  ADDWFC x6C,W
0C2E4:  MOVWF  03
0C2E6:  MOVF   01,W
0C2E8:  ADDLW  58
0C2EA:  MOVWF  FE9
0C2EC:  MOVLW  06
0C2EE:  ADDWFC 03,W
0C2F0:  MOVWF  FEA
0C2F2:  MOVFF  FEC,A6C
0C2F6:  MOVF   FED,F
0C2F8:  MOVFF  FEF,A6B
0C2FC:  MOVF   x6C,W
0C2FE:  MOVLB  2
0C300:  SUBWF  x57,W
0C302:  BTFSC  FD8.0
0C304:  BRA    C30C
0C306:  MOVLB  0
0C308:  GOTO   C332
0C30C:  MOVLB  0
0C30E:  BTFSS  FD8.2
0C310:  GOTO   C328
0C314:  MOVLB  2
0C316:  MOVF   x56,W
0C318:  MOVLB  A
0C31A:  SUBWF  x6B,W
0C31C:  BTFSS  FD8.0
0C31E:  BRA    C326
0C320:  MOVLB  0
0C322:  GOTO   C332
0C326:  MOVLB  0
....................                 port2.active = 0;
0C328:  MOVLB  A
0C32A:  BCF    x57.0
....................                 disconnect_port2();
0C32C:  MOVLB  0
0C32E:  CALL   88BE
....................             } 
....................         }
....................         count++;
0C332:  MOVLB  A
0C334:  INCF   x58,F
0C336:  BTFSC  FD8.2
0C338:  INCF   x59,F
....................         if (count >= 255) {
0C33A:  MOVF   x59,F
0C33C:  BTFSC  FD8.2
0C33E:  BRA    C346
0C340:  MOVLB  0
0C342:  GOTO   C35A
0C346:  MOVLB  0
0C348:  MOVLB  A
0C34A:  MOVF   x58,W
0C34C:  SUBLW  FE
0C34E:  BTFSS  FD8.0
0C350:  BRA    C358
0C352:  MOVLB  0
0C354:  GOTO   C35E
0C358:  MOVLB  0
....................             // fprintf(PC, "Maximum step count reached: %ld\r\n", count);
....................             break;
0C35A:  GOTO   C362
....................         }
0C35E:  GOTO   C06A
....................     }
.................... 
....................     for (int i = 0; i < count; i++) {
0C362:  MOVLB  A
0C364:  CLRF   x6A
0C366:  MOVLB  0
0C368:  MOVLB  A
0C36A:  MOVF   x59,F
0C36C:  BTFSC  FD8.2
0C36E:  BRA    C376
0C370:  MOVLB  0
0C372:  GOTO   C38A
0C376:  MOVLB  0
0C378:  MOVLB  A
0C37A:  MOVF   x58,W
0C37C:  SUBWF  x6A,W
0C37E:  BTFSS  FD8.0
0C380:  BRA    C388
0C382:  MOVLB  0
0C384:  GOTO   C53C
0C388:  MOVLB  0
.................... 
....................         fprintf(PC, "%04LX,%04LX,%04LX,%04LX\r\n",
....................             port1.data_buffer[i].voltage, port1.data_buffer[i].current,
....................             port2.data_buffer[i].voltage, port2.data_buffer[i].current);
0C38A:  MOVLB  A
0C38C:  CLRF   xCC
0C38E:  MOVFF  A6A,ACB
0C392:  CLRF   xCE
0C394:  MOVLW  04
0C396:  MOVWF  xCD
0C398:  MOVLB  0
0C39A:  CALL   7D8A
0C39E:  MOVFF  02,03
0C3A2:  MOVF   01,W
0C3A4:  ADDLW  5B
0C3A6:  MOVWF  FE9
0C3A8:  MOVLW  02
0C3AA:  ADDWFC 03,W
0C3AC:  MOVWF  FEA
0C3AE:  MOVFF  FEC,A6E
0C3B2:  MOVF   FED,F
0C3B4:  MOVFF  FEF,A6D
0C3B8:  MOVLB  A
0C3BA:  CLRF   xCC
0C3BC:  MOVFF  A6A,ACB
0C3C0:  CLRF   xCE
0C3C2:  MOVLW  04
0C3C4:  MOVWF  xCD
0C3C6:  MOVLB  0
0C3C8:  CALL   7D8A
0C3CC:  MOVFF  02,03
0C3D0:  MOVF   01,W
0C3D2:  ADDLW  03
0C3D4:  MOVLB  A
0C3D6:  MOVWF  x6F
0C3D8:  MOVLW  00
0C3DA:  ADDWFC 03,W
0C3DC:  MOVWF  x70
0C3DE:  MOVLW  02
0C3E0:  ADDWF  x6F,W
0C3E2:  MOVWF  01
0C3E4:  MOVLW  00
0C3E6:  ADDWFC x70,W
0C3E8:  MOVWF  03
0C3EA:  MOVF   01,W
0C3EC:  ADDLW  58
0C3EE:  MOVWF  FE9
0C3F0:  MOVLW  02
0C3F2:  ADDWFC 03,W
0C3F4:  MOVWF  FEA
0C3F6:  MOVFF  FEC,A70
0C3FA:  MOVF   FED,F
0C3FC:  MOVFF  FEF,A6F
0C400:  CLRF   xCC
0C402:  MOVFF  A6A,ACB
0C406:  CLRF   xCE
0C408:  MOVLW  04
0C40A:  MOVWF  xCD
0C40C:  MOVLB  0
0C40E:  CALL   7D8A
0C412:  MOVFF  02,03
0C416:  MOVF   01,W
0C418:  ADDLW  5B
0C41A:  MOVWF  FE9
0C41C:  MOVLW  06
0C41E:  ADDWFC 03,W
0C420:  MOVWF  FEA
0C422:  MOVFF  FEC,A74
0C426:  MOVF   FED,F
0C428:  MOVFF  FEF,A73
0C42C:  MOVLB  A
0C42E:  CLRF   xCC
0C430:  MOVFF  A6A,ACB
0C434:  CLRF   xCE
0C436:  MOVLW  04
0C438:  MOVWF  xCD
0C43A:  MOVLB  0
0C43C:  CALL   7D8A
0C440:  MOVFF  02,03
0C444:  MOVF   01,W
0C446:  ADDLW  03
0C448:  MOVLB  A
0C44A:  MOVWF  x75
0C44C:  MOVLW  00
0C44E:  ADDWFC 03,W
0C450:  MOVWF  x76
0C452:  MOVLW  02
0C454:  ADDWF  x75,W
0C456:  MOVWF  01
0C458:  MOVLW  00
0C45A:  ADDWFC x76,W
0C45C:  MOVWF  03
0C45E:  MOVF   01,W
0C460:  ADDLW  58
0C462:  MOVWF  FE9
0C464:  MOVLW  06
0C466:  ADDWFC 03,W
0C468:  MOVWF  FEA
0C46A:  MOVFF  FEC,A76
0C46E:  MOVF   FED,F
0C470:  MOVFF  FEF,A75
0C474:  MOVFF  A6E,A77
0C478:  MOVLW  37
0C47A:  MOVWF  x78
0C47C:  MOVLB  0
0C47E:  CALL   22D0
0C482:  MOVFF  A6D,A77
0C486:  MOVLW  37
0C488:  MOVLB  A
0C48A:  MOVWF  x78
0C48C:  MOVLB  0
0C48E:  CALL   22D0
0C492:  MOVLW  2C
0C494:  BTFSS  FA6.6
0C496:  GOTO   C494
0C49A:  MOVLB  E
0C49C:  MOVWF  xF9
0C49E:  MOVFF  A70,A77
0C4A2:  MOVLW  37
0C4A4:  MOVLB  A
0C4A6:  MOVWF  x78
0C4A8:  MOVLB  0
0C4AA:  CALL   22D0
0C4AE:  MOVFF  A6F,A77
0C4B2:  MOVLW  37
0C4B4:  MOVLB  A
0C4B6:  MOVWF  x78
0C4B8:  MOVLB  0
0C4BA:  CALL   22D0
0C4BE:  MOVLW  2C
0C4C0:  BTFSS  FA6.6
0C4C2:  GOTO   C4C0
0C4C6:  MOVLB  E
0C4C8:  MOVWF  xF9
0C4CA:  MOVFF  A74,A77
0C4CE:  MOVLW  37
0C4D0:  MOVLB  A
0C4D2:  MOVWF  x78
0C4D4:  MOVLB  0
0C4D6:  CALL   22D0
0C4DA:  MOVFF  A73,A77
0C4DE:  MOVLW  37
0C4E0:  MOVLB  A
0C4E2:  MOVWF  x78
0C4E4:  MOVLB  0
0C4E6:  CALL   22D0
0C4EA:  MOVLW  2C
0C4EC:  BTFSS  FA6.6
0C4EE:  GOTO   C4EC
0C4F2:  MOVLB  E
0C4F4:  MOVWF  xF9
0C4F6:  MOVFF  A76,A77
0C4FA:  MOVLW  37
0C4FC:  MOVLB  A
0C4FE:  MOVWF  x78
0C500:  MOVLB  0
0C502:  CALL   22D0
0C506:  MOVFF  A75,A77
0C50A:  MOVLW  37
0C50C:  MOVLB  A
0C50E:  MOVWF  x78
0C510:  MOVLB  0
0C512:  CALL   22D0
0C516:  MOVLW  0D
0C518:  BTFSS  FA6.6
0C51A:  GOTO   C518
0C51E:  MOVLB  E
0C520:  MOVWF  xF9
0C522:  MOVLW  0A
0C524:  MOVLB  0
0C526:  BTFSS  FA6.6
0C528:  GOTO   C526
0C52C:  MOVLB  E
0C52E:  MOVWF  xF9
0C530:  MOVLB  0
0C532:  MOVLB  A
0C534:  INCF   x6A,F
0C536:  MOVLB  0
0C538:  GOTO   C368
....................     }
0C53C:  GOTO   C800 (RETURN)
.................... 
.................... }
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_limit)
.................... {
....................     fprintf(PC, ".");
*
0930A:  MOVLW  2E
0930C:  BTFSS  FA6.6
0930E:  GOTO   930C
09312:  MOVLB  E
09314:  MOVWF  xF9
....................     // Enable both CIGS ports
....................     connect_port1();
09316:  MOVLB  0
09318:  CALL   4E84
....................     connect_port2();
0931C:  CALL   4E8C
.................... 
....................     // delay_us(100); // wait for the CIGS to stabilize
.................... 
....................     // Init Port1
....................     sweep_config_t port1 = {0};
09320:  MOVLB  2
09322:  CLRF   x72
09324:  CLRF   x73
09326:  CLRF   x74
09328:  CLRF   x75
0932A:  CLRF   x76
0932C:  CLRF   x77
0932E:  CLRF   x78
09330:  CLRF   x79
09332:  CLRF   x7A
09334:  CLRF   x7B
09336:  CLRF   x7C
09338:  CLRF   x7D
0933A:  CLRF   x7E
0933C:  CLRF   x7F
0933E:  CLRF   x80
09340:  CLRF   x81
09342:  CLRF   x82
09344:  CLRF   x83
09346:  CLRF   x84
09348:  CLRF   x85
0934A:  CLRF   x86
0934C:  CLRF   x87
0934E:  CLRF   x88
09350:  CLRF   x89
09352:  CLRF   x8A
09354:  CLRF   x8B
09356:  CLRF   x8C
09358:  CLRF   x8D
0935A:  CLRF   x8E
0935C:  CLRF   x8F
0935E:  CLRF   x90
09360:  CLRF   x91
09362:  CLRF   x92
09364:  CLRF   x93
09366:  CLRF   x94
09368:  CLRF   x95
0936A:  CLRF   x96
0936C:  CLRF   x97
0936E:  CLRF   x98
09370:  CLRF   x99
09372:  CLRF   x9A
09374:  CLRF   x9B
09376:  CLRF   x9C
09378:  CLRF   x9D
0937A:  CLRF   x9E
0937C:  CLRF   x9F
0937E:  CLRF   xA0
09380:  CLRF   xA1
09382:  CLRF   xA2
09384:  CLRF   xA3
09386:  CLRF   xA4
09388:  CLRF   xA5
0938A:  CLRF   xA6
0938C:  CLRF   xA7
0938E:  CLRF   xA8
09390:  CLRF   xA9
09392:  CLRF   xAA
09394:  CLRF   xAB
09396:  CLRF   xAC
09398:  CLRF   xAD
0939A:  CLRF   xAE
0939C:  CLRF   xAF
0939E:  CLRF   xB0
093A0:  CLRF   xB1
093A2:  CLRF   xB2
093A4:  CLRF   xB3
093A6:  CLRF   xB4
093A8:  CLRF   xB5
093AA:  CLRF   xB6
093AC:  CLRF   xB7
093AE:  CLRF   xB8
093B0:  CLRF   xB9
093B2:  CLRF   xBA
093B4:  CLRF   xBB
093B6:  CLRF   xBC
093B8:  CLRF   xBD
093BA:  CLRF   xBE
093BC:  CLRF   xBF
093BE:  CLRF   xC0
093C0:  CLRF   xC1
093C2:  CLRF   xC2
093C4:  CLRF   xC3
093C6:  CLRF   xC4
093C8:  CLRF   xC5
093CA:  CLRF   xC6
093CC:  CLRF   xC7
093CE:  CLRF   xC8
093D0:  CLRF   xC9
093D2:  CLRF   xCA
093D4:  CLRF   xCB
093D6:  CLRF   xCC
093D8:  CLRF   xCD
093DA:  CLRF   xCE
093DC:  CLRF   xCF
093DE:  CLRF   xD0
093E0:  CLRF   xD1
093E2:  CLRF   xD2
093E4:  CLRF   xD3
093E6:  CLRF   xD4
093E8:  CLRF   xD5
093EA:  CLRF   xD6
093EC:  CLRF   xD7
093EE:  CLRF   xD8
093F0:  CLRF   xD9
093F2:  CLRF   xDA
093F4:  CLRF   xDB
093F6:  CLRF   xDC
093F8:  CLRF   xDD
093FA:  CLRF   xDE
093FC:  CLRF   xDF
093FE:  CLRF   xE0
09400:  CLRF   xE1
09402:  CLRF   xE2
09404:  CLRF   xE3
09406:  CLRF   xE4
09408:  CLRF   xE5
0940A:  CLRF   xE6
0940C:  CLRF   xE7
0940E:  CLRF   xE8
09410:  CLRF   xE9
09412:  CLRF   xEA
09414:  CLRF   xEB
09416:  CLRF   xEC
09418:  CLRF   xED
0941A:  CLRF   xEE
0941C:  CLRF   xEF
0941E:  CLRF   xF0
09420:  CLRF   xF1
09422:  CLRF   xF2
09424:  CLRF   xF3
09426:  CLRF   xF4
09428:  CLRF   xF5
0942A:  CLRF   xF6
0942C:  CLRF   xF7
0942E:  CLRF   xF8
09430:  CLRF   xF9
09432:  CLRF   xFA
09434:  CLRF   xFB
09436:  CLRF   xFC
09438:  CLRF   xFD
0943A:  CLRF   xFE
0943C:  CLRF   xFF
0943E:  MOVLB  3
09440:  CLRF   x00
09442:  CLRF   x01
09444:  CLRF   x02
09446:  CLRF   x03
09448:  CLRF   x04
0944A:  CLRF   x05
0944C:  CLRF   x06
0944E:  CLRF   x07
09450:  CLRF   x08
09452:  CLRF   x09
09454:  CLRF   x0A
09456:  CLRF   x0B
09458:  CLRF   x0C
0945A:  CLRF   x0D
0945C:  CLRF   x0E
0945E:  CLRF   x0F
09460:  CLRF   x10
09462:  CLRF   x11
09464:  CLRF   x12
09466:  CLRF   x13
09468:  CLRF   x14
0946A:  CLRF   x15
0946C:  CLRF   x16
0946E:  CLRF   x17
09470:  CLRF   x18
09472:  CLRF   x19
09474:  CLRF   x1A
09476:  CLRF   x1B
09478:  CLRF   x1C
0947A:  CLRF   x1D
0947C:  CLRF   x1E
0947E:  CLRF   x1F
09480:  CLRF   x20
09482:  CLRF   x21
09484:  CLRF   x22
09486:  CLRF   x23
09488:  CLRF   x24
0948A:  CLRF   x25
0948C:  CLRF   x26
0948E:  CLRF   x27
09490:  CLRF   x28
09492:  CLRF   x29
09494:  CLRF   x2A
09496:  CLRF   x2B
09498:  CLRF   x2C
0949A:  CLRF   x2D
0949C:  CLRF   x2E
0949E:  CLRF   x2F
094A0:  CLRF   x30
094A2:  CLRF   x31
094A4:  CLRF   x32
094A6:  CLRF   x33
094A8:  CLRF   x34
094AA:  CLRF   x35
094AC:  CLRF   x36
094AE:  CLRF   x37
094B0:  CLRF   x38
094B2:  CLRF   x39
094B4:  CLRF   x3A
094B6:  CLRF   x3B
094B8:  CLRF   x3C
094BA:  CLRF   x3D
094BC:  CLRF   x3E
094BE:  CLRF   x3F
094C0:  CLRF   x40
094C2:  CLRF   x41
094C4:  CLRF   x42
094C6:  CLRF   x43
094C8:  CLRF   x44
094CA:  CLRF   x45
094CC:  CLRF   x46
094CE:  CLRF   x47
094D0:  CLRF   x48
094D2:  CLRF   x49
094D4:  CLRF   x4A
094D6:  CLRF   x4B
094D8:  CLRF   x4C
094DA:  CLRF   x4D
094DC:  CLRF   x4E
094DE:  CLRF   x4F
094E0:  CLRF   x50
094E2:  CLRF   x51
094E4:  CLRF   x52
094E6:  CLRF   x53
094E8:  CLRF   x54
094EA:  CLRF   x55
094EC:  CLRF   x56
094EE:  CLRF   x57
094F0:  CLRF   x58
094F2:  CLRF   x59
094F4:  CLRF   x5A
094F6:  CLRF   x5B
094F8:  CLRF   x5C
094FA:  CLRF   x5D
094FC:  CLRF   x5E
094FE:  CLRF   x5F
09500:  CLRF   x60
09502:  CLRF   x61
09504:  CLRF   x62
09506:  CLRF   x63
09508:  CLRF   x64
0950A:  CLRF   x65
0950C:  CLRF   x66
0950E:  CLRF   x67
09510:  CLRF   x68
09512:  CLRF   x69
09514:  CLRF   x6A
09516:  CLRF   x6B
09518:  CLRF   x6C
0951A:  CLRF   x6D
0951C:  CLRF   x6E
0951E:  CLRF   x6F
09520:  CLRF   x70
09522:  CLRF   x71
09524:  CLRF   x72
09526:  CLRF   x73
09528:  CLRF   x74
0952A:  CLRF   x75
0952C:  CLRF   x76
0952E:  CLRF   x77
09530:  CLRF   x78
09532:  CLRF   x79
09534:  CLRF   x7A
09536:  CLRF   x7B
09538:  CLRF   x7C
0953A:  CLRF   x7D
0953C:  CLRF   x7E
0953E:  CLRF   x7F
09540:  CLRF   x80
09542:  CLRF   x81
09544:  CLRF   x82
09546:  CLRF   x83
09548:  CLRF   x84
0954A:  CLRF   x85
0954C:  CLRF   x86
0954E:  CLRF   x87
09550:  CLRF   x88
09552:  CLRF   x89
09554:  CLRF   x8A
09556:  CLRF   x8B
09558:  CLRF   x8C
0955A:  CLRF   x8D
0955C:  CLRF   x8E
0955E:  CLRF   x8F
09560:  CLRF   x90
09562:  CLRF   x91
09564:  CLRF   x92
09566:  CLRF   x93
09568:  CLRF   x94
0956A:  CLRF   x95
0956C:  CLRF   x96
0956E:  CLRF   x97
09570:  CLRF   x98
09572:  CLRF   x99
09574:  CLRF   x9A
09576:  CLRF   x9B
09578:  CLRF   x9C
0957A:  CLRF   x9D
0957C:  CLRF   x9E
0957E:  CLRF   x9F
09580:  CLRF   xA0
09582:  CLRF   xA1
09584:  CLRF   xA2
09586:  CLRF   xA3
09588:  CLRF   xA4
0958A:  CLRF   xA5
0958C:  CLRF   xA6
0958E:  CLRF   xA7
09590:  CLRF   xA8
09592:  CLRF   xA9
09594:  CLRF   xAA
09596:  CLRF   xAB
09598:  CLRF   xAC
0959A:  CLRF   xAD
0959C:  CLRF   xAE
0959E:  CLRF   xAF
095A0:  CLRF   xB0
095A2:  CLRF   xB1
095A4:  CLRF   xB2
095A6:  CLRF   xB3
095A8:  CLRF   xB4
095AA:  CLRF   xB5
095AC:  CLRF   xB6
095AE:  CLRF   xB7
095B0:  CLRF   xB8
095B2:  CLRF   xB9
095B4:  CLRF   xBA
095B6:  CLRF   xBB
095B8:  CLRF   xBC
095BA:  CLRF   xBD
095BC:  CLRF   xBE
095BE:  CLRF   xBF
095C0:  CLRF   xC0
095C2:  CLRF   xC1
095C4:  CLRF   xC2
095C6:  CLRF   xC3
095C8:  CLRF   xC4
095CA:  CLRF   xC5
095CC:  CLRF   xC6
095CE:  CLRF   xC7
095D0:  CLRF   xC8
095D2:  CLRF   xC9
095D4:  CLRF   xCA
095D6:  CLRF   xCB
095D8:  CLRF   xCC
095DA:  CLRF   xCD
095DC:  CLRF   xCE
095DE:  CLRF   xCF
095E0:  CLRF   xD0
095E2:  CLRF   xD1
095E4:  CLRF   xD2
095E6:  CLRF   xD3
095E8:  CLRF   xD4
095EA:  CLRF   xD5
095EC:  CLRF   xD6
095EE:  CLRF   xD7
095F0:  CLRF   xD8
095F2:  CLRF   xD9
095F4:  CLRF   xDA
095F6:  CLRF   xDB
095F8:  CLRF   xDC
095FA:  CLRF   xDD
095FC:  CLRF   xDE
095FE:  CLRF   xDF
09600:  CLRF   xE0
09602:  CLRF   xE1
09604:  CLRF   xE2
09606:  CLRF   xE3
09608:  CLRF   xE4
0960A:  CLRF   xE5
0960C:  CLRF   xE6
0960E:  CLRF   xE7
09610:  CLRF   xE8
09612:  CLRF   xE9
09614:  CLRF   xEA
09616:  CLRF   xEB
09618:  CLRF   xEC
0961A:  CLRF   xED
0961C:  CLRF   xEE
0961E:  CLRF   xEF
09620:  CLRF   xF0
09622:  CLRF   xF1
09624:  CLRF   xF2
09626:  CLRF   xF3
09628:  CLRF   xF4
0962A:  CLRF   xF5
0962C:  CLRF   xF6
0962E:  CLRF   xF7
09630:  CLRF   xF8
09632:  CLRF   xF9
09634:  CLRF   xFA
09636:  CLRF   xFB
09638:  CLRF   xFC
0963A:  CLRF   xFD
0963C:  CLRF   xFE
0963E:  CLRF   xFF
09640:  MOVLB  4
09642:  CLRF   x00
09644:  CLRF   x01
09646:  CLRF   x02
09648:  CLRF   x03
0964A:  CLRF   x04
0964C:  CLRF   x05
0964E:  CLRF   x06
09650:  CLRF   x07
09652:  CLRF   x08
09654:  CLRF   x09
09656:  CLRF   x0A
09658:  CLRF   x0B
0965A:  CLRF   x0C
0965C:  CLRF   x0D
0965E:  CLRF   x0E
09660:  CLRF   x0F
09662:  CLRF   x10
09664:  CLRF   x11
09666:  CLRF   x12
09668:  CLRF   x13
0966A:  CLRF   x14
0966C:  CLRF   x15
0966E:  CLRF   x16
09670:  CLRF   x17
09672:  CLRF   x18
09674:  CLRF   x19
09676:  CLRF   x1A
09678:  CLRF   x1B
0967A:  CLRF   x1C
0967C:  CLRF   x1D
0967E:  CLRF   x1E
09680:  CLRF   x1F
09682:  CLRF   x20
09684:  CLRF   x21
09686:  CLRF   x22
09688:  CLRF   x23
0968A:  CLRF   x24
0968C:  CLRF   x25
0968E:  CLRF   x26
09690:  CLRF   x27
09692:  CLRF   x28
09694:  CLRF   x29
09696:  CLRF   x2A
09698:  CLRF   x2B
0969A:  CLRF   x2C
0969C:  CLRF   x2D
0969E:  CLRF   x2E
096A0:  CLRF   x2F
096A2:  CLRF   x30
096A4:  CLRF   x31
096A6:  CLRF   x32
096A8:  CLRF   x33
096AA:  CLRF   x34
096AC:  CLRF   x35
096AE:  CLRF   x36
096B0:  CLRF   x37
096B2:  CLRF   x38
096B4:  CLRF   x39
096B6:  CLRF   x3A
096B8:  CLRF   x3B
096BA:  CLRF   x3C
096BC:  CLRF   x3D
096BE:  CLRF   x3E
096C0:  CLRF   x3F
096C2:  CLRF   x40
096C4:  CLRF   x41
096C6:  CLRF   x42
096C8:  CLRF   x43
096CA:  CLRF   x44
096CC:  CLRF   x45
096CE:  CLRF   x46
096D0:  CLRF   x47
096D2:  CLRF   x48
096D4:  CLRF   x49
096D6:  CLRF   x4A
096D8:  CLRF   x4B
096DA:  CLRF   x4C
096DC:  CLRF   x4D
096DE:  CLRF   x4E
096E0:  CLRF   x4F
096E2:  CLRF   x50
096E4:  CLRF   x51
096E6:  CLRF   x52
096E8:  CLRF   x53
096EA:  CLRF   x54
096EC:  CLRF   x55
096EE:  CLRF   x56
096F0:  CLRF   x57
096F2:  CLRF   x58
096F4:  CLRF   x59
096F6:  CLRF   x5A
096F8:  CLRF   x5B
096FA:  CLRF   x5C
096FC:  CLRF   x5D
096FE:  CLRF   x5E
09700:  CLRF   x5F
09702:  CLRF   x60
09704:  CLRF   x61
09706:  CLRF   x62
09708:  CLRF   x63
0970A:  CLRF   x64
0970C:  CLRF   x65
0970E:  CLRF   x66
09710:  CLRF   x67
09712:  CLRF   x68
09714:  CLRF   x69
09716:  CLRF   x6A
09718:  CLRF   x6B
0971A:  CLRF   x6C
0971C:  CLRF   x6D
0971E:  CLRF   x6E
09720:  CLRF   x6F
09722:  CLRF   x70
09724:  CLRF   x71
09726:  CLRF   x72
09728:  CLRF   x73
0972A:  CLRF   x74
0972C:  CLRF   x75
0972E:  CLRF   x76
09730:  CLRF   x77
09732:  CLRF   x78
09734:  CLRF   x79
09736:  CLRF   x7A
09738:  CLRF   x7B
0973A:  CLRF   x7C
0973C:  CLRF   x7D
0973E:  CLRF   x7E
09740:  CLRF   x7F
09742:  CLRF   x80
09744:  CLRF   x81
09746:  CLRF   x82
09748:  CLRF   x83
0974A:  CLRF   x84
0974C:  CLRF   x85
0974E:  CLRF   x86
09750:  CLRF   x87
09752:  CLRF   x88
09754:  CLRF   x89
09756:  CLRF   x8A
09758:  CLRF   x8B
0975A:  CLRF   x8C
0975C:  CLRF   x8D
0975E:  CLRF   x8E
09760:  CLRF   x8F
09762:  CLRF   x90
09764:  CLRF   x91
09766:  CLRF   x92
09768:  CLRF   x93
0976A:  CLRF   x94
0976C:  CLRF   x95
0976E:  CLRF   x96
09770:  CLRF   x97
09772:  CLRF   x98
09774:  CLRF   x99
09776:  CLRF   x9A
09778:  CLRF   x9B
0977A:  CLRF   x9C
0977C:  CLRF   x9D
0977E:  CLRF   x9E
09780:  CLRF   x9F
09782:  CLRF   xA0
09784:  CLRF   xA1
09786:  CLRF   xA2
09788:  CLRF   xA3
0978A:  CLRF   xA4
0978C:  CLRF   xA5
0978E:  CLRF   xA6
09790:  CLRF   xA7
09792:  CLRF   xA8
09794:  CLRF   xA9
09796:  CLRF   xAA
09798:  CLRF   xAB
0979A:  CLRF   xAC
0979C:  CLRF   xAD
0979E:  CLRF   xAE
097A0:  CLRF   xAF
097A2:  CLRF   xB0
097A4:  CLRF   xB1
097A6:  CLRF   xB2
097A8:  CLRF   xB3
097AA:  CLRF   xB4
097AC:  CLRF   xB5
097AE:  CLRF   xB6
097B0:  CLRF   xB7
097B2:  CLRF   xB8
097B4:  CLRF   xB9
097B6:  CLRF   xBA
097B8:  CLRF   xBB
097BA:  CLRF   xBC
097BC:  CLRF   xBD
097BE:  CLRF   xBE
097C0:  CLRF   xBF
097C2:  CLRF   xC0
097C4:  CLRF   xC1
097C6:  CLRF   xC2
097C8:  CLRF   xC3
097CA:  CLRF   xC4
097CC:  CLRF   xC5
097CE:  CLRF   xC6
097D0:  CLRF   xC7
097D2:  CLRF   xC8
097D4:  CLRF   xC9
097D6:  CLRF   xCA
097D8:  CLRF   xCB
097DA:  CLRF   xCC
097DC:  CLRF   xCD
097DE:  CLRF   xCE
097E0:  CLRF   xCF
097E2:  CLRF   xD0
097E4:  CLRF   xD1
097E6:  CLRF   xD2
097E8:  CLRF   xD3
097EA:  CLRF   xD4
097EC:  CLRF   xD5
097EE:  CLRF   xD6
097F0:  CLRF   xD7
097F2:  CLRF   xD8
097F4:  CLRF   xD9
097F6:  CLRF   xDA
097F8:  CLRF   xDB
097FA:  CLRF   xDC
097FC:  CLRF   xDD
097FE:  CLRF   xDE
09800:  CLRF   xDF
09802:  CLRF   xE0
09804:  CLRF   xE1
09806:  CLRF   xE2
09808:  CLRF   xE3
0980A:  CLRF   xE4
0980C:  CLRF   xE5
0980E:  CLRF   xE6
09810:  CLRF   xE7
09812:  CLRF   xE8
09814:  CLRF   xE9
09816:  CLRF   xEA
09818:  CLRF   xEB
0981A:  CLRF   xEC
0981C:  CLRF   xED
0981E:  CLRF   xEE
09820:  CLRF   xEF
09822:  CLRF   xF0
09824:  CLRF   xF1
09826:  CLRF   xF2
09828:  CLRF   xF3
0982A:  CLRF   xF4
0982C:  CLRF   xF5
0982E:  CLRF   xF6
09830:  CLRF   xF7
09832:  CLRF   xF8
09834:  CLRF   xF9
09836:  CLRF   xFA
09838:  CLRF   xFB
0983A:  CLRF   xFC
0983C:  CLRF   xFD
0983E:  CLRF   xFE
09840:  CLRF   xFF
09842:  MOVLB  5
09844:  CLRF   x00
09846:  CLRF   x01
09848:  CLRF   x02
0984A:  CLRF   x03
0984C:  CLRF   x04
0984E:  CLRF   x05
09850:  CLRF   x06
09852:  CLRF   x07
09854:  CLRF   x08
09856:  CLRF   x09
09858:  CLRF   x0A
0985A:  CLRF   x0B
0985C:  CLRF   x0C
0985E:  CLRF   x0D
09860:  CLRF   x0E
09862:  CLRF   x0F
09864:  CLRF   x10
09866:  CLRF   x11
09868:  CLRF   x12
0986A:  CLRF   x13
0986C:  CLRF   x14
0986E:  CLRF   x15
09870:  CLRF   x16
09872:  CLRF   x17
09874:  CLRF   x18
09876:  CLRF   x19
09878:  CLRF   x1A
0987A:  CLRF   x1B
0987C:  CLRF   x1C
0987E:  CLRF   x1D
09880:  CLRF   x1E
09882:  CLRF   x1F
09884:  CLRF   x20
09886:  CLRF   x21
09888:  CLRF   x22
0988A:  CLRF   x23
0988C:  CLRF   x24
0988E:  CLRF   x25
09890:  CLRF   x26
09892:  CLRF   x27
09894:  CLRF   x28
09896:  CLRF   x29
09898:  CLRF   x2A
0989A:  CLRF   x2B
0989C:  CLRF   x2C
0989E:  CLRF   x2D
098A0:  CLRF   x2E
098A2:  CLRF   x2F
098A4:  CLRF   x30
098A6:  CLRF   x31
098A8:  CLRF   x32
098AA:  CLRF   x33
098AC:  CLRF   x34
098AE:  CLRF   x35
098B0:  CLRF   x36
098B2:  CLRF   x37
098B4:  CLRF   x38
098B6:  CLRF   x39
098B8:  CLRF   x3A
098BA:  CLRF   x3B
098BC:  CLRF   x3C
098BE:  CLRF   x3D
098C0:  CLRF   x3E
098C2:  CLRF   x3F
098C4:  CLRF   x40
098C6:  CLRF   x41
098C8:  CLRF   x42
098CA:  CLRF   x43
098CC:  CLRF   x44
098CE:  CLRF   x45
098D0:  CLRF   x46
098D2:  CLRF   x47
098D4:  CLRF   x48
098D6:  CLRF   x49
098D8:  CLRF   x4A
098DA:  CLRF   x4B
098DC:  CLRF   x4C
098DE:  CLRF   x4D
098E0:  CLRF   x4E
098E2:  CLRF   x4F
098E4:  CLRF   x50
098E6:  CLRF   x51
098E8:  CLRF   x52
098EA:  CLRF   x53
098EC:  CLRF   x54
098EE:  CLRF   x55
098F0:  CLRF   x56
098F2:  CLRF   x57
098F4:  CLRF   x58
098F6:  CLRF   x59
098F8:  CLRF   x5A
098FA:  CLRF   x5B
098FC:  CLRF   x5C
098FE:  CLRF   x5D
09900:  CLRF   x5E
09902:  CLRF   x5F
09904:  CLRF   x60
09906:  CLRF   x61
09908:  CLRF   x62
0990A:  CLRF   x63
0990C:  CLRF   x64
0990E:  CLRF   x65
09910:  CLRF   x66
09912:  CLRF   x67
09914:  CLRF   x68
09916:  CLRF   x69
09918:  CLRF   x6A
0991A:  CLRF   x6B
0991C:  CLRF   x6C
0991E:  CLRF   x6D
09920:  CLRF   x6E
09922:  CLRF   x6F
09924:  CLRF   x70
09926:  CLRF   x71
09928:  CLRF   x72
0992A:  CLRF   x73
0992C:  CLRF   x74
0992E:  CLRF   x75
09930:  CLRF   x76
09932:  CLRF   x77
09934:  CLRF   x78
09936:  CLRF   x79
09938:  CLRF   x7A
0993A:  CLRF   x7B
0993C:  CLRF   x7C
0993E:  CLRF   x7D
09940:  CLRF   x7E
09942:  CLRF   x7F
09944:  CLRF   x80
09946:  CLRF   x81
09948:  CLRF   x82
0994A:  CLRF   x83
0994C:  CLRF   x84
0994E:  CLRF   x85
09950:  CLRF   x86
09952:  CLRF   x87
09954:  CLRF   x88
09956:  CLRF   x89
09958:  CLRF   x8A
0995A:  CLRF   x8B
0995C:  CLRF   x8C
0995E:  CLRF   x8D
09960:  CLRF   x8E
09962:  CLRF   x8F
09964:  CLRF   x90
09966:  CLRF   x91
09968:  CLRF   x92
0996A:  CLRF   x93
0996C:  CLRF   x94
0996E:  CLRF   x95
09970:  CLRF   x96
09972:  CLRF   x97
09974:  CLRF   x98
09976:  CLRF   x99
09978:  CLRF   x9A
0997A:  CLRF   x9B
0997C:  CLRF   x9C
0997E:  CLRF   x9D
09980:  CLRF   x9E
09982:  CLRF   x9F
09984:  CLRF   xA0
09986:  CLRF   xA1
09988:  CLRF   xA2
0998A:  CLRF   xA3
0998C:  CLRF   xA4
0998E:  CLRF   xA5
09990:  CLRF   xA6
09992:  CLRF   xA7
09994:  CLRF   xA8
09996:  CLRF   xA9
09998:  CLRF   xAA
0999A:  CLRF   xAB
0999C:  CLRF   xAC
0999E:  CLRF   xAD
099A0:  CLRF   xAE
099A2:  CLRF   xAF
099A4:  CLRF   xB0
099A6:  CLRF   xB1
099A8:  CLRF   xB2
099AA:  CLRF   xB3
099AC:  CLRF   xB4
099AE:  CLRF   xB5
099B0:  CLRF   xB6
099B2:  CLRF   xB7
099B4:  CLRF   xB8
099B6:  CLRF   xB9
099B8:  CLRF   xBA
099BA:  CLRF   xBB
099BC:  CLRF   xBC
099BE:  CLRF   xBD
099C0:  CLRF   xBE
099C2:  CLRF   xBF
099C4:  CLRF   xC0
099C6:  CLRF   xC1
099C8:  CLRF   xC2
099CA:  CLRF   xC3
099CC:  CLRF   xC4
099CE:  CLRF   xC5
099D0:  CLRF   xC6
099D2:  CLRF   xC7
099D4:  CLRF   xC8
099D6:  CLRF   xC9
099D8:  CLRF   xCA
099DA:  CLRF   xCB
099DC:  CLRF   xCC
099DE:  CLRF   xCD
099E0:  CLRF   xCE
099E2:  CLRF   xCF
099E4:  CLRF   xD0
099E6:  CLRF   xD1
099E8:  CLRF   xD2
099EA:  CLRF   xD3
099EC:  CLRF   xD4
099EE:  CLRF   xD5
099F0:  CLRF   xD6
099F2:  CLRF   xD7
099F4:  CLRF   xD8
099F6:  CLRF   xD9
099F8:  CLRF   xDA
099FA:  CLRF   xDB
099FC:  CLRF   xDC
099FE:  CLRF   xDD
09A00:  CLRF   xDE
09A02:  CLRF   xDF
09A04:  CLRF   xE0
09A06:  CLRF   xE1
09A08:  CLRF   xE2
09A0A:  CLRF   xE3
09A0C:  CLRF   xE4
09A0E:  CLRF   xE5
09A10:  CLRF   xE6
09A12:  CLRF   xE7
09A14:  CLRF   xE8
09A16:  CLRF   xE9
09A18:  CLRF   xEA
09A1A:  CLRF   xEB
09A1C:  CLRF   xEC
09A1E:  CLRF   xED
09A20:  CLRF   xEE
09A22:  CLRF   xEF
09A24:  CLRF   xF0
09A26:  CLRF   xF1
09A28:  CLRF   xF2
09A2A:  CLRF   xF3
09A2C:  CLRF   xF4
09A2E:  CLRF   xF5
09A30:  CLRF   xF6
09A32:  CLRF   xF7
09A34:  CLRF   xF8
09A36:  CLRF   xF9
09A38:  CLRF   xFA
09A3A:  CLRF   xFB
09A3C:  CLRF   xFC
09A3E:  CLRF   xFD
09A40:  CLRF   xFE
09A42:  CLRF   xFF
09A44:  MOVLB  6
09A46:  CLRF   x00
09A48:  CLRF   x01
09A4A:  CLRF   x02
09A4C:  CLRF   x03
09A4E:  CLRF   x04
09A50:  CLRF   x05
09A52:  CLRF   x06
09A54:  CLRF   x07
09A56:  CLRF   x08
09A58:  CLRF   x09
09A5A:  CLRF   x0A
09A5C:  CLRF   x0B
09A5E:  CLRF   x0C
09A60:  CLRF   x0D
09A62:  CLRF   x0E
09A64:  CLRF   x0F
09A66:  CLRF   x10
09A68:  CLRF   x11
09A6A:  CLRF   x12
09A6C:  CLRF   x13
09A6E:  CLRF   x14
09A70:  CLRF   x15
09A72:  CLRF   x16
09A74:  CLRF   x17
09A76:  CLRF   x18
09A78:  CLRF   x19
09A7A:  CLRF   x1A
09A7C:  CLRF   x1B
09A7E:  CLRF   x1C
09A80:  CLRF   x1D
09A82:  CLRF   x1E
09A84:  CLRF   x1F
09A86:  CLRF   x20
09A88:  CLRF   x21
09A8A:  CLRF   x22
09A8C:  CLRF   x23
09A8E:  CLRF   x24
09A90:  CLRF   x25
09A92:  CLRF   x26
09A94:  CLRF   x27
09A96:  CLRF   x28
09A98:  CLRF   x29
09A9A:  CLRF   x2A
09A9C:  CLRF   x2B
09A9E:  CLRF   x2C
09AA0:  CLRF   x2D
09AA2:  CLRF   x2E
09AA4:  CLRF   x2F
09AA6:  CLRF   x30
09AA8:  CLRF   x31
09AAA:  CLRF   x32
09AAC:  CLRF   x33
09AAE:  CLRF   x34
09AB0:  CLRF   x35
09AB2:  CLRF   x36
09AB4:  CLRF   x37
09AB6:  CLRF   x38
09AB8:  CLRF   x39
09ABA:  CLRF   x3A
09ABC:  CLRF   x3B
09ABE:  CLRF   x3C
09AC0:  CLRF   x3D
09AC2:  CLRF   x3E
09AC4:  CLRF   x3F
09AC6:  CLRF   x40
09AC8:  CLRF   x41
09ACA:  CLRF   x42
09ACC:  CLRF   x43
09ACE:  CLRF   x44
09AD0:  CLRF   x45
09AD2:  CLRF   x46
09AD4:  CLRF   x47
09AD6:  CLRF   x48
09AD8:  CLRF   x49
09ADA:  CLRF   x4A
09ADC:  CLRF   x4B
09ADE:  CLRF   x4C
09AE0:  CLRF   x4D
09AE2:  CLRF   x4E
09AE4:  CLRF   x4F
09AE6:  CLRF   x50
09AE8:  CLRF   x51
09AEA:  CLRF   x52
09AEC:  CLRF   x53
09AEE:  CLRF   x54
09AF0:  CLRF   x55
09AF2:  CLRF   x56
09AF4:  CLRF   x57
09AF6:  CLRF   x58
09AF8:  CLRF   x59
09AFA:  CLRF   x5A
09AFC:  CLRF   x5B
09AFE:  CLRF   x5C
09B00:  CLRF   x5D
09B02:  CLRF   x5E
09B04:  CLRF   x5F
09B06:  CLRF   x60
09B08:  CLRF   x61
09B0A:  CLRF   x62
09B0C:  CLRF   x63
09B0E:  CLRF   x64
09B10:  CLRF   x65
09B12:  CLRF   x66
09B14:  CLRF   x67
09B16:  CLRF   x68
09B18:  CLRF   x69
09B1A:  CLRF   x6A
09B1C:  CLRF   x6B
09B1E:  CLRF   x6C
09B20:  CLRF   x6D
09B22:  CLRF   x6E
09B24:  CLRF   x6F
09B26:  CLRF   x70
09B28:  CLRF   x71
....................     port1.port_num = 1;
09B2A:  MOVLW  01
09B2C:  MOVLB  2
09B2E:  MOVWF  x72
....................     port1.sweep_step = 0;
09B30:  CLRF   x74
09B32:  CLRF   x73
....................     port1.active = 1;
09B34:  MOVLB  6
09B36:  BSF    x71.0
.................... 
....................     // Init Port2
....................     sweep_config_t port2 = {0};
09B38:  CLRF   x72
09B3A:  CLRF   x73
09B3C:  CLRF   x74
09B3E:  CLRF   x75
09B40:  CLRF   x76
09B42:  CLRF   x77
09B44:  CLRF   x78
09B46:  CLRF   x79
09B48:  CLRF   x7A
09B4A:  CLRF   x7B
09B4C:  CLRF   x7C
09B4E:  CLRF   x7D
09B50:  CLRF   x7E
09B52:  CLRF   x7F
09B54:  CLRF   x80
09B56:  CLRF   x81
09B58:  CLRF   x82
09B5A:  CLRF   x83
09B5C:  CLRF   x84
09B5E:  CLRF   x85
09B60:  CLRF   x86
09B62:  CLRF   x87
09B64:  CLRF   x88
09B66:  CLRF   x89
09B68:  CLRF   x8A
09B6A:  CLRF   x8B
09B6C:  CLRF   x8C
09B6E:  CLRF   x8D
09B70:  CLRF   x8E
09B72:  CLRF   x8F
09B74:  CLRF   x90
09B76:  CLRF   x91
09B78:  CLRF   x92
09B7A:  CLRF   x93
09B7C:  CLRF   x94
09B7E:  CLRF   x95
09B80:  CLRF   x96
09B82:  CLRF   x97
09B84:  CLRF   x98
09B86:  CLRF   x99
09B88:  CLRF   x9A
09B8A:  CLRF   x9B
09B8C:  CLRF   x9C
09B8E:  CLRF   x9D
09B90:  CLRF   x9E
09B92:  CLRF   x9F
09B94:  CLRF   xA0
09B96:  CLRF   xA1
09B98:  CLRF   xA2
09B9A:  CLRF   xA3
09B9C:  CLRF   xA4
09B9E:  CLRF   xA5
09BA0:  CLRF   xA6
09BA2:  CLRF   xA7
09BA4:  CLRF   xA8
09BA6:  CLRF   xA9
09BA8:  CLRF   xAA
09BAA:  CLRF   xAB
09BAC:  CLRF   xAC
09BAE:  CLRF   xAD
09BB0:  CLRF   xAE
09BB2:  CLRF   xAF
09BB4:  CLRF   xB0
09BB6:  CLRF   xB1
09BB8:  CLRF   xB2
09BBA:  CLRF   xB3
09BBC:  CLRF   xB4
09BBE:  CLRF   xB5
09BC0:  CLRF   xB6
09BC2:  CLRF   xB7
09BC4:  CLRF   xB8
09BC6:  CLRF   xB9
09BC8:  CLRF   xBA
09BCA:  CLRF   xBB
09BCC:  CLRF   xBC
09BCE:  CLRF   xBD
09BD0:  CLRF   xBE
09BD2:  CLRF   xBF
09BD4:  CLRF   xC0
09BD6:  CLRF   xC1
09BD8:  CLRF   xC2
09BDA:  CLRF   xC3
09BDC:  CLRF   xC4
09BDE:  CLRF   xC5
09BE0:  CLRF   xC6
09BE2:  CLRF   xC7
09BE4:  CLRF   xC8
09BE6:  CLRF   xC9
09BE8:  CLRF   xCA
09BEA:  CLRF   xCB
09BEC:  CLRF   xCC
09BEE:  CLRF   xCD
09BF0:  CLRF   xCE
09BF2:  CLRF   xCF
09BF4:  CLRF   xD0
09BF6:  CLRF   xD1
09BF8:  CLRF   xD2
09BFA:  CLRF   xD3
09BFC:  CLRF   xD4
09BFE:  CLRF   xD5
09C00:  CLRF   xD6
09C02:  CLRF   xD7
09C04:  CLRF   xD8
09C06:  CLRF   xD9
09C08:  CLRF   xDA
09C0A:  CLRF   xDB
09C0C:  CLRF   xDC
09C0E:  CLRF   xDD
09C10:  CLRF   xDE
09C12:  CLRF   xDF
09C14:  CLRF   xE0
09C16:  CLRF   xE1
09C18:  CLRF   xE2
09C1A:  CLRF   xE3
09C1C:  CLRF   xE4
09C1E:  CLRF   xE5
09C20:  CLRF   xE6
09C22:  CLRF   xE7
09C24:  CLRF   xE8
09C26:  CLRF   xE9
09C28:  CLRF   xEA
09C2A:  CLRF   xEB
09C2C:  CLRF   xEC
09C2E:  CLRF   xED
09C30:  CLRF   xEE
09C32:  CLRF   xEF
09C34:  CLRF   xF0
09C36:  CLRF   xF1
09C38:  CLRF   xF2
09C3A:  CLRF   xF3
09C3C:  CLRF   xF4
09C3E:  CLRF   xF5
09C40:  CLRF   xF6
09C42:  CLRF   xF7
09C44:  CLRF   xF8
09C46:  CLRF   xF9
09C48:  CLRF   xFA
09C4A:  CLRF   xFB
09C4C:  CLRF   xFC
09C4E:  CLRF   xFD
09C50:  CLRF   xFE
09C52:  CLRF   xFF
09C54:  MOVLB  7
09C56:  CLRF   x00
09C58:  CLRF   x01
09C5A:  CLRF   x02
09C5C:  CLRF   x03
09C5E:  CLRF   x04
09C60:  CLRF   x05
09C62:  CLRF   x06
09C64:  CLRF   x07
09C66:  CLRF   x08
09C68:  CLRF   x09
09C6A:  CLRF   x0A
09C6C:  CLRF   x0B
09C6E:  CLRF   x0C
09C70:  CLRF   x0D
09C72:  CLRF   x0E
09C74:  CLRF   x0F
09C76:  CLRF   x10
09C78:  CLRF   x11
09C7A:  CLRF   x12
09C7C:  CLRF   x13
09C7E:  CLRF   x14
09C80:  CLRF   x15
09C82:  CLRF   x16
09C84:  CLRF   x17
09C86:  CLRF   x18
09C88:  CLRF   x19
09C8A:  CLRF   x1A
09C8C:  CLRF   x1B
09C8E:  CLRF   x1C
09C90:  CLRF   x1D
09C92:  CLRF   x1E
09C94:  CLRF   x1F
09C96:  CLRF   x20
09C98:  CLRF   x21
09C9A:  CLRF   x22
09C9C:  CLRF   x23
09C9E:  CLRF   x24
09CA0:  CLRF   x25
09CA2:  CLRF   x26
09CA4:  CLRF   x27
09CA6:  CLRF   x28
09CA8:  CLRF   x29
09CAA:  CLRF   x2A
09CAC:  CLRF   x2B
09CAE:  CLRF   x2C
09CB0:  CLRF   x2D
09CB2:  CLRF   x2E
09CB4:  CLRF   x2F
09CB6:  CLRF   x30
09CB8:  CLRF   x31
09CBA:  CLRF   x32
09CBC:  CLRF   x33
09CBE:  CLRF   x34
09CC0:  CLRF   x35
09CC2:  CLRF   x36
09CC4:  CLRF   x37
09CC6:  CLRF   x38
09CC8:  CLRF   x39
09CCA:  CLRF   x3A
09CCC:  CLRF   x3B
09CCE:  CLRF   x3C
09CD0:  CLRF   x3D
09CD2:  CLRF   x3E
09CD4:  CLRF   x3F
09CD6:  CLRF   x40
09CD8:  CLRF   x41
09CDA:  CLRF   x42
09CDC:  CLRF   x43
09CDE:  CLRF   x44
09CE0:  CLRF   x45
09CE2:  CLRF   x46
09CE4:  CLRF   x47
09CE6:  CLRF   x48
09CE8:  CLRF   x49
09CEA:  CLRF   x4A
09CEC:  CLRF   x4B
09CEE:  CLRF   x4C
09CF0:  CLRF   x4D
09CF2:  CLRF   x4E
09CF4:  CLRF   x4F
09CF6:  CLRF   x50
09CF8:  CLRF   x51
09CFA:  CLRF   x52
09CFC:  CLRF   x53
09CFE:  CLRF   x54
09D00:  CLRF   x55
09D02:  CLRF   x56
09D04:  CLRF   x57
09D06:  CLRF   x58
09D08:  CLRF   x59
09D0A:  CLRF   x5A
09D0C:  CLRF   x5B
09D0E:  CLRF   x5C
09D10:  CLRF   x5D
09D12:  CLRF   x5E
09D14:  CLRF   x5F
09D16:  CLRF   x60
09D18:  CLRF   x61
09D1A:  CLRF   x62
09D1C:  CLRF   x63
09D1E:  CLRF   x64
09D20:  CLRF   x65
09D22:  CLRF   x66
09D24:  CLRF   x67
09D26:  CLRF   x68
09D28:  CLRF   x69
09D2A:  CLRF   x6A
09D2C:  CLRF   x6B
09D2E:  CLRF   x6C
09D30:  CLRF   x6D
09D32:  CLRF   x6E
09D34:  CLRF   x6F
09D36:  CLRF   x70
09D38:  CLRF   x71
09D3A:  CLRF   x72
09D3C:  CLRF   x73
09D3E:  CLRF   x74
09D40:  CLRF   x75
09D42:  CLRF   x76
09D44:  CLRF   x77
09D46:  CLRF   x78
09D48:  CLRF   x79
09D4A:  CLRF   x7A
09D4C:  CLRF   x7B
09D4E:  CLRF   x7C
09D50:  CLRF   x7D
09D52:  CLRF   x7E
09D54:  CLRF   x7F
09D56:  CLRF   x80
09D58:  CLRF   x81
09D5A:  CLRF   x82
09D5C:  CLRF   x83
09D5E:  CLRF   x84
09D60:  CLRF   x85
09D62:  CLRF   x86
09D64:  CLRF   x87
09D66:  CLRF   x88
09D68:  CLRF   x89
09D6A:  CLRF   x8A
09D6C:  CLRF   x8B
09D6E:  CLRF   x8C
09D70:  CLRF   x8D
09D72:  CLRF   x8E
09D74:  CLRF   x8F
09D76:  CLRF   x90
09D78:  CLRF   x91
09D7A:  CLRF   x92
09D7C:  CLRF   x93
09D7E:  CLRF   x94
09D80:  CLRF   x95
09D82:  CLRF   x96
09D84:  CLRF   x97
09D86:  CLRF   x98
09D88:  CLRF   x99
09D8A:  CLRF   x9A
09D8C:  CLRF   x9B
09D8E:  CLRF   x9C
09D90:  CLRF   x9D
09D92:  CLRF   x9E
09D94:  CLRF   x9F
09D96:  CLRF   xA0
09D98:  CLRF   xA1
09D9A:  CLRF   xA2
09D9C:  CLRF   xA3
09D9E:  CLRF   xA4
09DA0:  CLRF   xA5
09DA2:  CLRF   xA6
09DA4:  CLRF   xA7
09DA6:  CLRF   xA8
09DA8:  CLRF   xA9
09DAA:  CLRF   xAA
09DAC:  CLRF   xAB
09DAE:  CLRF   xAC
09DB0:  CLRF   xAD
09DB2:  CLRF   xAE
09DB4:  CLRF   xAF
09DB6:  CLRF   xB0
09DB8:  CLRF   xB1
09DBA:  CLRF   xB2
09DBC:  CLRF   xB3
09DBE:  CLRF   xB4
09DC0:  CLRF   xB5
09DC2:  CLRF   xB6
09DC4:  CLRF   xB7
09DC6:  CLRF   xB8
09DC8:  CLRF   xB9
09DCA:  CLRF   xBA
09DCC:  CLRF   xBB
09DCE:  CLRF   xBC
09DD0:  CLRF   xBD
09DD2:  CLRF   xBE
09DD4:  CLRF   xBF
09DD6:  CLRF   xC0
09DD8:  CLRF   xC1
09DDA:  CLRF   xC2
09DDC:  CLRF   xC3
09DDE:  CLRF   xC4
09DE0:  CLRF   xC5
09DE2:  CLRF   xC6
09DE4:  CLRF   xC7
09DE6:  CLRF   xC8
09DE8:  CLRF   xC9
09DEA:  CLRF   xCA
09DEC:  CLRF   xCB
09DEE:  CLRF   xCC
09DF0:  CLRF   xCD
09DF2:  CLRF   xCE
09DF4:  CLRF   xCF
09DF6:  CLRF   xD0
09DF8:  CLRF   xD1
09DFA:  CLRF   xD2
09DFC:  CLRF   xD3
09DFE:  CLRF   xD4
09E00:  CLRF   xD5
09E02:  CLRF   xD6
09E04:  CLRF   xD7
09E06:  CLRF   xD8
09E08:  CLRF   xD9
09E0A:  CLRF   xDA
09E0C:  CLRF   xDB
09E0E:  CLRF   xDC
09E10:  CLRF   xDD
09E12:  CLRF   xDE
09E14:  CLRF   xDF
09E16:  CLRF   xE0
09E18:  CLRF   xE1
09E1A:  CLRF   xE2
09E1C:  CLRF   xE3
09E1E:  CLRF   xE4
09E20:  CLRF   xE5
09E22:  CLRF   xE6
09E24:  CLRF   xE7
09E26:  CLRF   xE8
09E28:  CLRF   xE9
09E2A:  CLRF   xEA
09E2C:  CLRF   xEB
09E2E:  CLRF   xEC
09E30:  CLRF   xED
09E32:  CLRF   xEE
09E34:  CLRF   xEF
09E36:  CLRF   xF0
09E38:  CLRF   xF1
09E3A:  CLRF   xF2
09E3C:  CLRF   xF3
09E3E:  CLRF   xF4
09E40:  CLRF   xF5
09E42:  CLRF   xF6
09E44:  CLRF   xF7
09E46:  CLRF   xF8
09E48:  CLRF   xF9
09E4A:  CLRF   xFA
09E4C:  CLRF   xFB
09E4E:  CLRF   xFC
09E50:  CLRF   xFD
09E52:  CLRF   xFE
09E54:  CLRF   xFF
09E56:  MOVLB  8
09E58:  CLRF   x00
09E5A:  CLRF   x01
09E5C:  CLRF   x02
09E5E:  CLRF   x03
09E60:  CLRF   x04
09E62:  CLRF   x05
09E64:  CLRF   x06
09E66:  CLRF   x07
09E68:  CLRF   x08
09E6A:  CLRF   x09
09E6C:  CLRF   x0A
09E6E:  CLRF   x0B
09E70:  CLRF   x0C
09E72:  CLRF   x0D
09E74:  CLRF   x0E
09E76:  CLRF   x0F
09E78:  CLRF   x10
09E7A:  CLRF   x11
09E7C:  CLRF   x12
09E7E:  CLRF   x13
09E80:  CLRF   x14
09E82:  CLRF   x15
09E84:  CLRF   x16
09E86:  CLRF   x17
09E88:  CLRF   x18
09E8A:  CLRF   x19
09E8C:  CLRF   x1A
09E8E:  CLRF   x1B
09E90:  CLRF   x1C
09E92:  CLRF   x1D
09E94:  CLRF   x1E
09E96:  CLRF   x1F
09E98:  CLRF   x20
09E9A:  CLRF   x21
09E9C:  CLRF   x22
09E9E:  CLRF   x23
09EA0:  CLRF   x24
09EA2:  CLRF   x25
09EA4:  CLRF   x26
09EA6:  CLRF   x27
09EA8:  CLRF   x28
09EAA:  CLRF   x29
09EAC:  CLRF   x2A
09EAE:  CLRF   x2B
09EB0:  CLRF   x2C
09EB2:  CLRF   x2D
09EB4:  CLRF   x2E
09EB6:  CLRF   x2F
09EB8:  CLRF   x30
09EBA:  CLRF   x31
09EBC:  CLRF   x32
09EBE:  CLRF   x33
09EC0:  CLRF   x34
09EC2:  CLRF   x35
09EC4:  CLRF   x36
09EC6:  CLRF   x37
09EC8:  CLRF   x38
09ECA:  CLRF   x39
09ECC:  CLRF   x3A
09ECE:  CLRF   x3B
09ED0:  CLRF   x3C
09ED2:  CLRF   x3D
09ED4:  CLRF   x3E
09ED6:  CLRF   x3F
09ED8:  CLRF   x40
09EDA:  CLRF   x41
09EDC:  CLRF   x42
09EDE:  CLRF   x43
09EE0:  CLRF   x44
09EE2:  CLRF   x45
09EE4:  CLRF   x46
09EE6:  CLRF   x47
09EE8:  CLRF   x48
09EEA:  CLRF   x49
09EEC:  CLRF   x4A
09EEE:  CLRF   x4B
09EF0:  CLRF   x4C
09EF2:  CLRF   x4D
09EF4:  CLRF   x4E
09EF6:  CLRF   x4F
09EF8:  CLRF   x50
09EFA:  CLRF   x51
09EFC:  CLRF   x52
09EFE:  CLRF   x53
09F00:  CLRF   x54
09F02:  CLRF   x55
09F04:  CLRF   x56
09F06:  CLRF   x57
09F08:  CLRF   x58
09F0A:  CLRF   x59
09F0C:  CLRF   x5A
09F0E:  CLRF   x5B
09F10:  CLRF   x5C
09F12:  CLRF   x5D
09F14:  CLRF   x5E
09F16:  CLRF   x5F
09F18:  CLRF   x60
09F1A:  CLRF   x61
09F1C:  CLRF   x62
09F1E:  CLRF   x63
09F20:  CLRF   x64
09F22:  CLRF   x65
09F24:  CLRF   x66
09F26:  CLRF   x67
09F28:  CLRF   x68
09F2A:  CLRF   x69
09F2C:  CLRF   x6A
09F2E:  CLRF   x6B
09F30:  CLRF   x6C
09F32:  CLRF   x6D
09F34:  CLRF   x6E
09F36:  CLRF   x6F
09F38:  CLRF   x70
09F3A:  CLRF   x71
09F3C:  CLRF   x72
09F3E:  CLRF   x73
09F40:  CLRF   x74
09F42:  CLRF   x75
09F44:  CLRF   x76
09F46:  CLRF   x77
09F48:  CLRF   x78
09F4A:  CLRF   x79
09F4C:  CLRF   x7A
09F4E:  CLRF   x7B
09F50:  CLRF   x7C
09F52:  CLRF   x7D
09F54:  CLRF   x7E
09F56:  CLRF   x7F
09F58:  CLRF   x80
09F5A:  CLRF   x81
09F5C:  CLRF   x82
09F5E:  CLRF   x83
09F60:  CLRF   x84
09F62:  CLRF   x85
09F64:  CLRF   x86
09F66:  CLRF   x87
09F68:  CLRF   x88
09F6A:  CLRF   x89
09F6C:  CLRF   x8A
09F6E:  CLRF   x8B
09F70:  CLRF   x8C
09F72:  CLRF   x8D
09F74:  CLRF   x8E
09F76:  CLRF   x8F
09F78:  CLRF   x90
09F7A:  CLRF   x91
09F7C:  CLRF   x92
09F7E:  CLRF   x93
09F80:  CLRF   x94
09F82:  CLRF   x95
09F84:  CLRF   x96
09F86:  CLRF   x97
09F88:  CLRF   x98
09F8A:  CLRF   x99
09F8C:  CLRF   x9A
09F8E:  CLRF   x9B
09F90:  CLRF   x9C
09F92:  CLRF   x9D
09F94:  CLRF   x9E
09F96:  CLRF   x9F
09F98:  CLRF   xA0
09F9A:  CLRF   xA1
09F9C:  CLRF   xA2
09F9E:  CLRF   xA3
09FA0:  CLRF   xA4
09FA2:  CLRF   xA5
09FA4:  CLRF   xA6
09FA6:  CLRF   xA7
09FA8:  CLRF   xA8
09FAA:  CLRF   xA9
09FAC:  CLRF   xAA
09FAE:  CLRF   xAB
09FB0:  CLRF   xAC
09FB2:  CLRF   xAD
09FB4:  CLRF   xAE
09FB6:  CLRF   xAF
09FB8:  CLRF   xB0
09FBA:  CLRF   xB1
09FBC:  CLRF   xB2
09FBE:  CLRF   xB3
09FC0:  CLRF   xB4
09FC2:  CLRF   xB5
09FC4:  CLRF   xB6
09FC6:  CLRF   xB7
09FC8:  CLRF   xB8
09FCA:  CLRF   xB9
09FCC:  CLRF   xBA
09FCE:  CLRF   xBB
09FD0:  CLRF   xBC
09FD2:  CLRF   xBD
09FD4:  CLRF   xBE
09FD6:  CLRF   xBF
09FD8:  CLRF   xC0
09FDA:  CLRF   xC1
09FDC:  CLRF   xC2
09FDE:  CLRF   xC3
09FE0:  CLRF   xC4
09FE2:  CLRF   xC5
09FE4:  CLRF   xC6
09FE6:  CLRF   xC7
09FE8:  CLRF   xC8
09FEA:  CLRF   xC9
09FEC:  CLRF   xCA
09FEE:  CLRF   xCB
09FF0:  CLRF   xCC
09FF2:  CLRF   xCD
09FF4:  CLRF   xCE
09FF6:  CLRF   xCF
09FF8:  CLRF   xD0
09FFA:  CLRF   xD1
09FFC:  CLRF   xD2
09FFE:  CLRF   xD3
0A000:  CLRF   xD4
0A002:  CLRF   xD5
0A004:  CLRF   xD6
0A006:  CLRF   xD7
0A008:  CLRF   xD8
0A00A:  CLRF   xD9
0A00C:  CLRF   xDA
0A00E:  CLRF   xDB
0A010:  CLRF   xDC
0A012:  CLRF   xDD
0A014:  CLRF   xDE
0A016:  CLRF   xDF
0A018:  CLRF   xE0
0A01A:  CLRF   xE1
0A01C:  CLRF   xE2
0A01E:  CLRF   xE3
0A020:  CLRF   xE4
0A022:  CLRF   xE5
0A024:  CLRF   xE6
0A026:  CLRF   xE7
0A028:  CLRF   xE8
0A02A:  CLRF   xE9
0A02C:  CLRF   xEA
0A02E:  CLRF   xEB
0A030:  CLRF   xEC
0A032:  CLRF   xED
0A034:  CLRF   xEE
0A036:  CLRF   xEF
0A038:  CLRF   xF0
0A03A:  CLRF   xF1
0A03C:  CLRF   xF2
0A03E:  CLRF   xF3
0A040:  CLRF   xF4
0A042:  CLRF   xF5
0A044:  CLRF   xF6
0A046:  CLRF   xF7
0A048:  CLRF   xF8
0A04A:  CLRF   xF9
0A04C:  CLRF   xFA
0A04E:  CLRF   xFB
0A050:  CLRF   xFC
0A052:  CLRF   xFD
0A054:  CLRF   xFE
0A056:  CLRF   xFF
0A058:  MOVLB  9
0A05A:  CLRF   x00
0A05C:  CLRF   x01
0A05E:  CLRF   x02
0A060:  CLRF   x03
0A062:  CLRF   x04
0A064:  CLRF   x05
0A066:  CLRF   x06
0A068:  CLRF   x07
0A06A:  CLRF   x08
0A06C:  CLRF   x09
0A06E:  CLRF   x0A
0A070:  CLRF   x0B
0A072:  CLRF   x0C
0A074:  CLRF   x0D
0A076:  CLRF   x0E
0A078:  CLRF   x0F
0A07A:  CLRF   x10
0A07C:  CLRF   x11
0A07E:  CLRF   x12
0A080:  CLRF   x13
0A082:  CLRF   x14
0A084:  CLRF   x15
0A086:  CLRF   x16
0A088:  CLRF   x17
0A08A:  CLRF   x18
0A08C:  CLRF   x19
0A08E:  CLRF   x1A
0A090:  CLRF   x1B
0A092:  CLRF   x1C
0A094:  CLRF   x1D
0A096:  CLRF   x1E
0A098:  CLRF   x1F
0A09A:  CLRF   x20
0A09C:  CLRF   x21
0A09E:  CLRF   x22
0A0A0:  CLRF   x23
0A0A2:  CLRF   x24
0A0A4:  CLRF   x25
0A0A6:  CLRF   x26
0A0A8:  CLRF   x27
0A0AA:  CLRF   x28
0A0AC:  CLRF   x29
0A0AE:  CLRF   x2A
0A0B0:  CLRF   x2B
0A0B2:  CLRF   x2C
0A0B4:  CLRF   x2D
0A0B6:  CLRF   x2E
0A0B8:  CLRF   x2F
0A0BA:  CLRF   x30
0A0BC:  CLRF   x31
0A0BE:  CLRF   x32
0A0C0:  CLRF   x33
0A0C2:  CLRF   x34
0A0C4:  CLRF   x35
0A0C6:  CLRF   x36
0A0C8:  CLRF   x37
0A0CA:  CLRF   x38
0A0CC:  CLRF   x39
0A0CE:  CLRF   x3A
0A0D0:  CLRF   x3B
0A0D2:  CLRF   x3C
0A0D4:  CLRF   x3D
0A0D6:  CLRF   x3E
0A0D8:  CLRF   x3F
0A0DA:  CLRF   x40
0A0DC:  CLRF   x41
0A0DE:  CLRF   x42
0A0E0:  CLRF   x43
0A0E2:  CLRF   x44
0A0E4:  CLRF   x45
0A0E6:  CLRF   x46
0A0E8:  CLRF   x47
0A0EA:  CLRF   x48
0A0EC:  CLRF   x49
0A0EE:  CLRF   x4A
0A0F0:  CLRF   x4B
0A0F2:  CLRF   x4C
0A0F4:  CLRF   x4D
0A0F6:  CLRF   x4E
0A0F8:  CLRF   x4F
0A0FA:  CLRF   x50
0A0FC:  CLRF   x51
0A0FE:  CLRF   x52
0A100:  CLRF   x53
0A102:  CLRF   x54
0A104:  CLRF   x55
0A106:  CLRF   x56
0A108:  CLRF   x57
0A10A:  CLRF   x58
0A10C:  CLRF   x59
0A10E:  CLRF   x5A
0A110:  CLRF   x5B
0A112:  CLRF   x5C
0A114:  CLRF   x5D
0A116:  CLRF   x5E
0A118:  CLRF   x5F
0A11A:  CLRF   x60
0A11C:  CLRF   x61
0A11E:  CLRF   x62
0A120:  CLRF   x63
0A122:  CLRF   x64
0A124:  CLRF   x65
0A126:  CLRF   x66
0A128:  CLRF   x67
0A12A:  CLRF   x68
0A12C:  CLRF   x69
0A12E:  CLRF   x6A
0A130:  CLRF   x6B
0A132:  CLRF   x6C
0A134:  CLRF   x6D
0A136:  CLRF   x6E
0A138:  CLRF   x6F
0A13A:  CLRF   x70
0A13C:  CLRF   x71
0A13E:  CLRF   x72
0A140:  CLRF   x73
0A142:  CLRF   x74
0A144:  CLRF   x75
0A146:  CLRF   x76
0A148:  CLRF   x77
0A14A:  CLRF   x78
0A14C:  CLRF   x79
0A14E:  CLRF   x7A
0A150:  CLRF   x7B
0A152:  CLRF   x7C
0A154:  CLRF   x7D
0A156:  CLRF   x7E
0A158:  CLRF   x7F
0A15A:  CLRF   x80
0A15C:  CLRF   x81
0A15E:  CLRF   x82
0A160:  CLRF   x83
0A162:  CLRF   x84
0A164:  CLRF   x85
0A166:  CLRF   x86
0A168:  CLRF   x87
0A16A:  CLRF   x88
0A16C:  CLRF   x89
0A16E:  CLRF   x8A
0A170:  CLRF   x8B
0A172:  CLRF   x8C
0A174:  CLRF   x8D
0A176:  CLRF   x8E
0A178:  CLRF   x8F
0A17A:  CLRF   x90
0A17C:  CLRF   x91
0A17E:  CLRF   x92
0A180:  CLRF   x93
0A182:  CLRF   x94
0A184:  CLRF   x95
0A186:  CLRF   x96
0A188:  CLRF   x97
0A18A:  CLRF   x98
0A18C:  CLRF   x99
0A18E:  CLRF   x9A
0A190:  CLRF   x9B
0A192:  CLRF   x9C
0A194:  CLRF   x9D
0A196:  CLRF   x9E
0A198:  CLRF   x9F
0A19A:  CLRF   xA0
0A19C:  CLRF   xA1
0A19E:  CLRF   xA2
0A1A0:  CLRF   xA3
0A1A2:  CLRF   xA4
0A1A4:  CLRF   xA5
0A1A6:  CLRF   xA6
0A1A8:  CLRF   xA7
0A1AA:  CLRF   xA8
0A1AC:  CLRF   xA9
0A1AE:  CLRF   xAA
0A1B0:  CLRF   xAB
0A1B2:  CLRF   xAC
0A1B4:  CLRF   xAD
0A1B6:  CLRF   xAE
0A1B8:  CLRF   xAF
0A1BA:  CLRF   xB0
0A1BC:  CLRF   xB1
0A1BE:  CLRF   xB2
0A1C0:  CLRF   xB3
0A1C2:  CLRF   xB4
0A1C4:  CLRF   xB5
0A1C6:  CLRF   xB6
0A1C8:  CLRF   xB7
0A1CA:  CLRF   xB8
0A1CC:  CLRF   xB9
0A1CE:  CLRF   xBA
0A1D0:  CLRF   xBB
0A1D2:  CLRF   xBC
0A1D4:  CLRF   xBD
0A1D6:  CLRF   xBE
0A1D8:  CLRF   xBF
0A1DA:  CLRF   xC0
0A1DC:  CLRF   xC1
0A1DE:  CLRF   xC2
0A1E0:  CLRF   xC3
0A1E2:  CLRF   xC4
0A1E4:  CLRF   xC5
0A1E6:  CLRF   xC6
0A1E8:  CLRF   xC7
0A1EA:  CLRF   xC8
0A1EC:  CLRF   xC9
0A1EE:  CLRF   xCA
0A1F0:  CLRF   xCB
0A1F2:  CLRF   xCC
0A1F4:  CLRF   xCD
0A1F6:  CLRF   xCE
0A1F8:  CLRF   xCF
0A1FA:  CLRF   xD0
0A1FC:  CLRF   xD1
0A1FE:  CLRF   xD2
0A200:  CLRF   xD3
0A202:  CLRF   xD4
0A204:  CLRF   xD5
0A206:  CLRF   xD6
0A208:  CLRF   xD7
0A20A:  CLRF   xD8
0A20C:  CLRF   xD9
0A20E:  CLRF   xDA
0A210:  CLRF   xDB
0A212:  CLRF   xDC
0A214:  CLRF   xDD
0A216:  CLRF   xDE
0A218:  CLRF   xDF
0A21A:  CLRF   xE0
0A21C:  CLRF   xE1
0A21E:  CLRF   xE2
0A220:  CLRF   xE3
0A222:  CLRF   xE4
0A224:  CLRF   xE5
0A226:  CLRF   xE6
0A228:  CLRF   xE7
0A22A:  CLRF   xE8
0A22C:  CLRF   xE9
0A22E:  CLRF   xEA
0A230:  CLRF   xEB
0A232:  CLRF   xEC
0A234:  CLRF   xED
0A236:  CLRF   xEE
0A238:  CLRF   xEF
0A23A:  CLRF   xF0
0A23C:  CLRF   xF1
0A23E:  CLRF   xF2
0A240:  CLRF   xF3
0A242:  CLRF   xF4
0A244:  CLRF   xF5
0A246:  CLRF   xF6
0A248:  CLRF   xF7
0A24A:  CLRF   xF8
0A24C:  CLRF   xF9
0A24E:  CLRF   xFA
0A250:  CLRF   xFB
0A252:  CLRF   xFC
0A254:  CLRF   xFD
0A256:  CLRF   xFE
0A258:  CLRF   xFF
0A25A:  MOVLB  A
0A25C:  CLRF   x00
0A25E:  CLRF   x01
0A260:  CLRF   x02
0A262:  CLRF   x03
0A264:  CLRF   x04
0A266:  CLRF   x05
0A268:  CLRF   x06
0A26A:  CLRF   x07
0A26C:  CLRF   x08
0A26E:  CLRF   x09
0A270:  CLRF   x0A
0A272:  CLRF   x0B
0A274:  CLRF   x0C
0A276:  CLRF   x0D
0A278:  CLRF   x0E
0A27A:  CLRF   x0F
0A27C:  CLRF   x10
0A27E:  CLRF   x11
0A280:  CLRF   x12
0A282:  CLRF   x13
0A284:  CLRF   x14
0A286:  CLRF   x15
0A288:  CLRF   x16
0A28A:  CLRF   x17
0A28C:  CLRF   x18
0A28E:  CLRF   x19
0A290:  CLRF   x1A
0A292:  CLRF   x1B
0A294:  CLRF   x1C
0A296:  CLRF   x1D
0A298:  CLRF   x1E
0A29A:  CLRF   x1F
0A29C:  CLRF   x20
0A29E:  CLRF   x21
0A2A0:  CLRF   x22
0A2A2:  CLRF   x23
0A2A4:  CLRF   x24
0A2A6:  CLRF   x25
0A2A8:  CLRF   x26
0A2AA:  CLRF   x27
0A2AC:  CLRF   x28
0A2AE:  CLRF   x29
0A2B0:  CLRF   x2A
0A2B2:  CLRF   x2B
0A2B4:  CLRF   x2C
0A2B6:  CLRF   x2D
0A2B8:  CLRF   x2E
0A2BA:  CLRF   x2F
0A2BC:  CLRF   x30
0A2BE:  CLRF   x31
0A2C0:  CLRF   x32
0A2C2:  CLRF   x33
0A2C4:  CLRF   x34
0A2C6:  CLRF   x35
0A2C8:  CLRF   x36
0A2CA:  CLRF   x37
0A2CC:  CLRF   x38
0A2CE:  CLRF   x39
0A2D0:  CLRF   x3A
0A2D2:  CLRF   x3B
0A2D4:  CLRF   x3C
0A2D6:  CLRF   x3D
0A2D8:  CLRF   x3E
0A2DA:  CLRF   x3F
0A2DC:  CLRF   x40
0A2DE:  CLRF   x41
0A2E0:  CLRF   x42
0A2E2:  CLRF   x43
0A2E4:  CLRF   x44
0A2E6:  CLRF   x45
0A2E8:  CLRF   x46
0A2EA:  CLRF   x47
0A2EC:  CLRF   x48
0A2EE:  CLRF   x49
0A2F0:  CLRF   x4A
0A2F2:  CLRF   x4B
0A2F4:  CLRF   x4C
0A2F6:  CLRF   x4D
0A2F8:  CLRF   x4E
0A2FA:  CLRF   x4F
0A2FC:  CLRF   x50
0A2FE:  CLRF   x51
0A300:  CLRF   x52
0A302:  CLRF   x53
0A304:  CLRF   x54
0A306:  CLRF   x55
0A308:  CLRF   x56
0A30A:  CLRF   x57
0A30C:  CLRF   x58
0A30E:  CLRF   x59
0A310:  CLRF   x5A
0A312:  CLRF   x5B
0A314:  CLRF   x5C
0A316:  CLRF   x5D
0A318:  CLRF   x5E
0A31A:  CLRF   x5F
0A31C:  CLRF   x60
0A31E:  CLRF   x61
0A320:  CLRF   x62
0A322:  CLRF   x63
0A324:  CLRF   x64
0A326:  CLRF   x65
0A328:  CLRF   x66
0A32A:  CLRF   x67
0A32C:  CLRF   x68
0A32E:  CLRF   x69
0A330:  CLRF   x6A
0A332:  CLRF   x6B
0A334:  CLRF   x6C
0A336:  CLRF   x6D
0A338:  CLRF   x6E
0A33A:  CLRF   x6F
0A33C:  CLRF   x70
0A33E:  CLRF   x71
....................     port2.port_num = 2;
0A340:  MOVLW  02
0A342:  MOVLB  6
0A344:  MOVWF  x72
....................     port2.sweep_step = 0;
0A346:  CLRF   x74
0A348:  CLRF   x73
....................     port2.active = 1;
0A34A:  MOVLB  A
0A34C:  BSF    x71.0
.................... 
....................     int16 count = 0;
0A34E:  CLRF   x73
0A350:  CLRF   x72
....................     
....................     // Initialize DACs to 0
....................     mcp4901_1_write(1);
0A352:  CLRF   x81
0A354:  MOVLW  01
0A356:  MOVWF  x80
0A358:  MOVLB  0
0A35A:  CALL   2602
....................     mcp4901_2_write(1);
0A35E:  MOVLB  A
0A360:  CLRF   x81
0A362:  MOVLW  01
0A364:  MOVWF  x80
0A366:  MOVLB  0
0A368:  CALL   2644
.................... 
....................     iv_env_t measured_data = create_meas_data();
0A36C:  CALL   8834
0A370:  MOVFF  02,03
0A374:  MOVF   01,W
0A376:  MOVWF  FE1
0A378:  MOVFF  03,FE2
0A37C:  MOVLW  0A
0A37E:  MOVWF  FEA
0A380:  MOVLW  74
0A382:  MOVWF  FE9
0A384:  MOVLW  0C
0A386:  MOVWF  01
0A388:  MOVFF  FE6,FEE
0A38C:  DECFSZ 01,F
0A38E:  GOTO   A388
....................     while (port1.active || port2.active)
0A392:  MOVLB  6
0A394:  BTFSS  x71.0
0A396:  BRA    A39E
0A398:  MOVLB  0
0A39A:  GOTO   A3AE
0A39E:  MOVLB  0
0A3A0:  MOVLB  A
0A3A2:  BTFSC  x71.0
0A3A4:  BRA    A3AC
0A3A6:  MOVLB  0
0A3A8:  GOTO   A65E
0A3AC:  MOVLB  0
....................     {
....................         mcp4901_1_write(count);
0A3AE:  MOVFF  A73,A81
0A3B2:  MOVFF  A72,A80
0A3B6:  CALL   2602
....................         mcp4901_2_write(count);
0A3BA:  MOVFF  A73,A81
0A3BE:  MOVFF  A72,A80
0A3C2:  CALL   2644
....................         delay_us(10); 
0A3C6:  MOVLW  0D
0A3C8:  MOVWF  00
0A3CA:  DECFSZ 00,F
0A3CC:  BRA    A3CA
....................         if (port1.active) {
0A3CE:  MOVLB  6
0A3D0:  BTFSC  x71.0
0A3D2:  BRA    A3DA
0A3D4:  MOVLB  0
0A3D6:  GOTO   A4FE
0A3DA:  MOVLB  0
....................             port1.data_buffer[count].voltage = ad7490_read(ADC_CIGS1_AMP);
0A3DC:  MOVLB  A
0A3DE:  RLCF   x72,W
0A3E0:  MOVWF  02
0A3E2:  RLCF   x73,W
0A3E4:  MOVWF  03
0A3E6:  RLCF   02,F
0A3E8:  RLCF   03,F
0A3EA:  MOVLW  FC
0A3EC:  ANDWF  02,F
0A3EE:  MOVF   02,W
0A3F0:  ADDLW  75
0A3F2:  MOVWF  01
0A3F4:  MOVLW  02
0A3F6:  ADDWFC 03,F
0A3F8:  MOVF   01,W
0A3FA:  MOVWF  x82
0A3FC:  MOVFF  03,A83
0A400:  MOVLW  02
0A402:  MOVWF  x92
0A404:  MOVLB  0
0A406:  CALL   2244
0A40A:  MOVFF  A83,FEA
0A40E:  MOVFF  A82,FE9
0A412:  MOVFF  02,FEC
0A416:  MOVF   FED,F
0A418:  MOVFF  01,FEF
....................             port1.data_buffer[count].current = ad7490_read(ADC_CIGS1_CURR);
0A41C:  MOVLB  A
0A41E:  RLCF   x72,W
0A420:  MOVWF  02
0A422:  RLCF   x73,W
0A424:  MOVWF  03
0A426:  RLCF   02,F
0A428:  RLCF   03,F
0A42A:  MOVLW  FC
0A42C:  ANDWF  02,F
0A42E:  MOVF   02,W
0A430:  ADDLW  03
0A432:  MOVWF  x80
0A434:  MOVLW  00
0A436:  ADDWFC 03,W
0A438:  MOVWF  x81
0A43A:  MOVLW  02
0A43C:  ADDWF  x80,W
0A43E:  MOVWF  01
0A440:  MOVLW  00
0A442:  ADDWFC x81,W
0A444:  MOVWF  03
0A446:  MOVF   01,W
0A448:  ADDLW  72
0A44A:  MOVWF  01
0A44C:  MOVLW  02
0A44E:  ADDWFC 03,F
0A450:  MOVF   01,W
0A452:  MOVWF  x80
0A454:  MOVFF  03,A81
0A458:  MOVLW  01
0A45A:  MOVWF  x92
0A45C:  MOVLB  0
0A45E:  CALL   2244
0A462:  MOVFF  A81,FEA
0A466:  MOVFF  A80,FE9
0A46A:  MOVFF  02,FEC
0A46E:  MOVF   FED,F
0A470:  MOVFF  01,FEF
....................             port1.sweep_step = count + 1; 
0A474:  MOVLW  01
0A476:  MOVLB  A
0A478:  ADDWF  x72,W
0A47A:  MOVLB  2
0A47C:  MOVWF  x73
0A47E:  MOVLW  00
0A480:  MOVLB  A
0A482:  ADDWFC x73,W
0A484:  MOVLB  2
0A486:  MOVWF  x74
....................             // fprintf(PC, "%04LX,%04LX,", port1.data_buffer[count].voltage, port1.data_buffer[count].current);
....................             if (port1.data_buffer[count].current < curr_limit) {
0A488:  MOVLB  A
0A48A:  RLCF   x72,W
0A48C:  MOVWF  02
0A48E:  RLCF   x73,W
0A490:  MOVWF  03
0A492:  RLCF   02,F
0A494:  RLCF   03,F
0A496:  MOVLW  FC
0A498:  ANDWF  02,F
0A49A:  MOVF   02,W
0A49C:  ADDLW  03
0A49E:  MOVWF  x80
0A4A0:  MOVLW  00
0A4A2:  ADDWFC 03,W
0A4A4:  MOVWF  x81
0A4A6:  MOVLW  02
0A4A8:  ADDWF  x80,W
0A4AA:  MOVWF  01
0A4AC:  MOVLW  00
0A4AE:  ADDWFC x81,W
0A4B0:  MOVWF  03
0A4B2:  MOVF   01,W
0A4B4:  ADDLW  72
0A4B6:  MOVWF  FE9
0A4B8:  MOVLW  02
0A4BA:  ADDWFC 03,W
0A4BC:  MOVWF  FEA
0A4BE:  MOVFF  FEC,A81
0A4C2:  MOVF   FED,F
0A4C4:  MOVFF  FEF,A80
0A4C8:  MOVF   x81,W
0A4CA:  MOVLB  2
0A4CC:  SUBWF  x6F,W
0A4CE:  BTFSC  FD8.0
0A4D0:  BRA    A4D8
0A4D2:  MOVLB  0
0A4D4:  GOTO   A4FE
0A4D8:  MOVLB  0
0A4DA:  BTFSS  FD8.2
0A4DC:  GOTO   A4F4
0A4E0:  MOVLB  2
0A4E2:  MOVF   x6E,W
0A4E4:  MOVLB  A
0A4E6:  SUBWF  x80,W
0A4E8:  BTFSS  FD8.0
0A4EA:  BRA    A4F2
0A4EC:  MOVLB  0
0A4EE:  GOTO   A4FE
0A4F2:  MOVLB  0
....................                 port1.active = 0;
0A4F4:  MOVLB  6
0A4F6:  BCF    x71.0
....................                 disconnect_port1();
0A4F8:  MOVLB  0
0A4FA:  CALL   88B6
....................             }
....................         }
....................         if (port2.active) {
0A4FE:  MOVLB  A
0A500:  BTFSC  x71.0
0A502:  BRA    A50A
0A504:  MOVLB  0
0A506:  GOTO   A62E
0A50A:  MOVLB  0
....................             port2.data_buffer[count].voltage = ad7490_read(ADC_CIGS2_AMP);
0A50C:  MOVLB  A
0A50E:  RLCF   x72,W
0A510:  MOVWF  02
0A512:  RLCF   x73,W
0A514:  MOVWF  03
0A516:  RLCF   02,F
0A518:  RLCF   03,F
0A51A:  MOVLW  FC
0A51C:  ANDWF  02,F
0A51E:  MOVF   02,W
0A520:  ADDLW  75
0A522:  MOVWF  01
0A524:  MOVLW  06
0A526:  ADDWFC 03,F
0A528:  MOVF   01,W
0A52A:  MOVWF  x82
0A52C:  MOVFF  03,A83
0A530:  MOVLW  06
0A532:  MOVWF  x92
0A534:  MOVLB  0
0A536:  CALL   2244
0A53A:  MOVFF  A83,FEA
0A53E:  MOVFF  A82,FE9
0A542:  MOVFF  02,FEC
0A546:  MOVF   FED,F
0A548:  MOVFF  01,FEF
....................             port2.data_buffer[count].current = ad7490_read(ADC_CIGS2_CURR);
0A54C:  MOVLB  A
0A54E:  RLCF   x72,W
0A550:  MOVWF  02
0A552:  RLCF   x73,W
0A554:  MOVWF  03
0A556:  RLCF   02,F
0A558:  RLCF   03,F
0A55A:  MOVLW  FC
0A55C:  ANDWF  02,F
0A55E:  MOVF   02,W
0A560:  ADDLW  03
0A562:  MOVWF  x80
0A564:  MOVLW  00
0A566:  ADDWFC 03,W
0A568:  MOVWF  x81
0A56A:  MOVLW  02
0A56C:  ADDWF  x80,W
0A56E:  MOVWF  01
0A570:  MOVLW  00
0A572:  ADDWFC x81,W
0A574:  MOVWF  03
0A576:  MOVF   01,W
0A578:  ADDLW  72
0A57A:  MOVWF  01
0A57C:  MOVLW  06
0A57E:  ADDWFC 03,F
0A580:  MOVF   01,W
0A582:  MOVWF  x80
0A584:  MOVFF  03,A81
0A588:  MOVLW  05
0A58A:  MOVWF  x92
0A58C:  MOVLB  0
0A58E:  CALL   2244
0A592:  MOVFF  A81,FEA
0A596:  MOVFF  A80,FE9
0A59A:  MOVFF  02,FEC
0A59E:  MOVF   FED,F
0A5A0:  MOVFF  01,FEF
....................             port2.sweep_step = count + 1;
0A5A4:  MOVLW  01
0A5A6:  MOVLB  A
0A5A8:  ADDWF  x72,W
0A5AA:  MOVLB  6
0A5AC:  MOVWF  x73
0A5AE:  MOVLW  00
0A5B0:  MOVLB  A
0A5B2:  ADDWFC x73,W
0A5B4:  MOVLB  6
0A5B6:  MOVWF  x74
....................             if (port2.data_buffer[count].current < curr_limit) {
0A5B8:  MOVLB  A
0A5BA:  RLCF   x72,W
0A5BC:  MOVWF  02
0A5BE:  RLCF   x73,W
0A5C0:  MOVWF  03
0A5C2:  RLCF   02,F
0A5C4:  RLCF   03,F
0A5C6:  MOVLW  FC
0A5C8:  ANDWF  02,F
0A5CA:  MOVF   02,W
0A5CC:  ADDLW  03
0A5CE:  MOVWF  x80
0A5D0:  MOVLW  00
0A5D2:  ADDWFC 03,W
0A5D4:  MOVWF  x81
0A5D6:  MOVLW  02
0A5D8:  ADDWF  x80,W
0A5DA:  MOVWF  01
0A5DC:  MOVLW  00
0A5DE:  ADDWFC x81,W
0A5E0:  MOVWF  03
0A5E2:  MOVF   01,W
0A5E4:  ADDLW  72
0A5E6:  MOVWF  FE9
0A5E8:  MOVLW  06
0A5EA:  ADDWFC 03,W
0A5EC:  MOVWF  FEA
0A5EE:  MOVFF  FEC,A81
0A5F2:  MOVF   FED,F
0A5F4:  MOVFF  FEF,A80
0A5F8:  MOVF   x81,W
0A5FA:  MOVLB  2
0A5FC:  SUBWF  x6F,W
0A5FE:  BTFSC  FD8.0
0A600:  BRA    A608
0A602:  MOVLB  0
0A604:  GOTO   A62E
0A608:  MOVLB  0
0A60A:  BTFSS  FD8.2
0A60C:  GOTO   A624
0A610:  MOVLB  2
0A612:  MOVF   x6E,W
0A614:  MOVLB  A
0A616:  SUBWF  x80,W
0A618:  BTFSS  FD8.0
0A61A:  BRA    A622
0A61C:  MOVLB  0
0A61E:  GOTO   A62E
0A622:  MOVLB  0
....................                 port2.active = 0;
0A624:  MOVLB  A
0A626:  BCF    x71.0
....................                 disconnect_port2();
0A628:  MOVLB  0
0A62A:  CALL   88BE
....................             } 
....................         }
....................         count++;
0A62E:  MOVLB  A
0A630:  INCF   x72,F
0A632:  BTFSC  FD8.2
0A634:  INCF   x73,F
....................         if (count >= 255) {
0A636:  MOVF   x73,F
0A638:  BTFSC  FD8.2
0A63A:  BRA    A642
0A63C:  MOVLB  0
0A63E:  GOTO   A656
0A642:  MOVLB  0
0A644:  MOVLB  A
0A646:  MOVF   x72,W
0A648:  SUBLW  FE
0A64A:  BTFSS  FD8.0
0A64C:  BRA    A654
0A64E:  MOVLB  0
0A650:  GOTO   A65A
0A654:  MOVLB  0
....................             // fprintf(PC, "Maximum step count reached: %ld\r\n", count);
....................             break;
0A656:  GOTO   A65E
....................         }
0A65A:  GOTO   A392
....................     }
.................... 
....................     // Ensure all connections are disabled
....................     disconnect_port1();
0A65E:  CALL   88B6
....................     disconnect_port2();
0A662:  CALL   88BE
....................     log_meas_data(&measured_data, &port1);
0A666:  MOVLW  0A
0A668:  MOVLB  A
0A66A:  MOVWF  x81
0A66C:  MOVLW  74
0A66E:  MOVWF  x80
0A670:  MOVLW  02
0A672:  MOVWF  x83
0A674:  MOVLW  72
0A676:  MOVWF  x82
0A678:  MOVLB  0
0A67A:  CALL   88C6
....................     log_meas_data(&measured_data, &port2);
0A67E:  MOVLW  0A
0A680:  MOVLB  A
0A682:  MOVWF  x81
0A684:  MOVLW  74
0A686:  MOVWF  x80
0A688:  MOVLW  06
0A68A:  MOVWF  x83
0A68C:  MOVLW  72
0A68E:  MOVWF  x82
0A690:  MOVLB  0
0A692:  CALL   88C6
0A696:  GOTO   AB36 (RETURN)
.................... }
.................... 
.................... 
.................... void log_meas_data(iv_env_t *measured_data_ptr, sweep_config_t *port_data_ptr)
*
08946:  MOVLW  0A
08948:  MOVWF  xC4
0894A:  MOVLW  84
0894C:  MOVWF  xC3
.................... {
....................     iv_data_packet_t data_packet = {0};
*
088C6:  MOVLB  A
088C8:  CLRF   x84
088CA:  CLRF   x85
088CC:  CLRF   x86
088CE:  CLRF   x87
088D0:  CLRF   x88
088D2:  CLRF   x89
088D4:  CLRF   x8A
088D6:  CLRF   x8B
088D8:  CLRF   x8C
088DA:  CLRF   x8D
088DC:  CLRF   x8E
088DE:  CLRF   x8F
088E0:  CLRF   x90
088E2:  CLRF   x91
088E4:  CLRF   x92
088E6:  CLRF   x93
088E8:  CLRF   x94
088EA:  CLRF   x95
088EC:  CLRF   x96
088EE:  CLRF   x97
088F0:  CLRF   x98
088F2:  CLRF   x99
088F4:  CLRF   x9A
088F6:  CLRF   x9B
088F8:  CLRF   x9C
088FA:  CLRF   x9D
088FC:  CLRF   x9E
088FE:  CLRF   x9F
08900:  CLRF   xA0
08902:  CLRF   xA1
08904:  CLRF   xA2
08906:  CLRF   xA3
08908:  CLRF   xA4
0890A:  CLRF   xA5
0890C:  CLRF   xA6
0890E:  CLRF   xA7
08910:  CLRF   xA8
08912:  CLRF   xA9
08914:  CLRF   xAA
08916:  CLRF   xAB
08918:  CLRF   xAC
0891A:  CLRF   xAD
0891C:  CLRF   xAE
0891E:  CLRF   xAF
08920:  CLRF   xB0
08922:  CLRF   xB1
08924:  CLRF   xB2
08926:  CLRF   xB3
08928:  CLRF   xB4
0892A:  CLRF   xB5
0892C:  CLRF   xB6
0892E:  CLRF   xB7
08930:  CLRF   xB8
08932:  CLRF   xB9
08934:  CLRF   xBA
08936:  CLRF   xBB
08938:  CLRF   xBC
0893A:  CLRF   xBD
0893C:  CLRF   xBE
0893E:  CLRF   xBF
08940:  CLRF   xC0
08942:  CLRF   xC1
08944:  CLRF   xC2
....................     iv_data_packet_t *data_packet_ptr = &data_packet;
....................     
....................     // ヘッダ情報の設定n
....................     data_packet.header.start_marker = START_MAKER;
*
0894E:  SETF   x85
08950:  SETF   x84
....................     data_packet.header.time_sec = measured_data_ptr->time / 1000;
08952:  MOVF   x80,W
08954:  MOVWF  FE9
08956:  MOVF   x81,W
08958:  MOVWF  FEA
0895A:  MOVFF  FEF,ACB
0895E:  MOVFF  FEC,ACC
08962:  MOVFF  FEC,ACD
08966:  MOVFF  FEC,ACE
0896A:  MOVF   FED,F
0896C:  MOVF   FED,F
0896E:  MOVF   FED,F
08970:  MOVFF  FEA,AD0
08974:  MOVFF  FE9,ACF
08978:  BCF    FD8.1
0897A:  MOVFF  ACE,AD8
0897E:  MOVFF  ACD,AD7
08982:  MOVFF  ACC,AD6
08986:  MOVFF  ACB,AD5
0898A:  CLRF   xDC
0898C:  CLRF   xDB
0898E:  MOVLW  03
08990:  MOVWF  xDA
08992:  MOVLW  E8
08994:  MOVWF  xD9
08996:  MOVLB  0
08998:  CALL   5E62
0899C:  MOVFF  AD0,FEA
089A0:  MOVFF  ACF,FE9
089A4:  MOVFF  03,A89
089A8:  MOVFF  02,A88
089AC:  MOVFF  01,A87
089B0:  MOVFF  00,A86
....................     data_packet.header.time_msec = measured_data_ptr->time % 1000;
089B4:  MOVLB  A
089B6:  MOVF   x80,W
089B8:  MOVWF  FE9
089BA:  MOVF   x81,W
089BC:  MOVWF  FEA
089BE:  MOVFF  FEF,ACB
089C2:  MOVFF  FEC,ACC
089C6:  MOVFF  FEC,ACD
089CA:  MOVFF  FEC,ACE
089CE:  MOVF   FED,F
089D0:  MOVF   FED,F
089D2:  MOVF   FED,F
089D4:  MOVFF  FEA,AD0
089D8:  MOVFF  FE9,ACF
089DC:  BSF    FD8.1
089DE:  MOVLW  0A
089E0:  MOVWF  FEA
089E2:  MOVLW  D1
089E4:  MOVWF  FE9
089E6:  MOVFF  ACE,AD8
089EA:  MOVFF  ACD,AD7
089EE:  MOVFF  ACC,AD6
089F2:  MOVFF  ACB,AD5
089F6:  CLRF   xDC
089F8:  CLRF   xDB
089FA:  MOVLW  03
089FC:  MOVWF  xDA
089FE:  MOVLW  E8
08A00:  MOVWF  xD9
08A02:  MOVLB  0
08A04:  CALL   5E62
08A08:  MOVFF  AD1,00
08A0C:  MOVFF  AD2,01
08A10:  MOVFF  AD3,02
08A14:  MOVFF  AD4,03
08A18:  MOVFF  AD0,FEA
08A1C:  MOVFF  ACF,FE9
08A20:  MOVFF  01,A8B
08A24:  MOVFF  00,A8A
.................... 
....................     // 環境データの設定
....................     data_packet.header.env_data[0].data[0] = (measured_data_ptr->pd >> 4) & 0xFF;
08A28:  MOVLW  04
08A2A:  MOVLB  A
08A2C:  ADDWF  x80,W
08A2E:  MOVWF  FE9
08A30:  MOVLW  00
08A32:  ADDWFC x81,W
08A34:  MOVWF  FEA
08A36:  MOVFF  FEC,ACC
08A3A:  MOVF   FED,F
08A3C:  MOVFF  FEF,ACB
08A40:  RRCF   xCC,F
08A42:  RRCF   xCB,F
08A44:  RRCF   xCC,F
08A46:  RRCF   xCB,F
08A48:  RRCF   xCC,F
08A4A:  RRCF   xCB,F
08A4C:  RRCF   xCC,F
08A4E:  RRCF   xCB,F
08A50:  MOVLW  0F
08A52:  ANDWF  xCC,F
08A54:  MOVF   xCB,W
08A56:  MOVWF  x8C
....................     data_packet.header.env_data[0].data[1] = ((measured_data_ptr->pd & 0x0F) << 4) | ((measured_data_ptr->temp_py_top >> 8) & 0x0F);
08A58:  MOVLW  04
08A5A:  ADDWF  x80,W
08A5C:  MOVWF  FE9
08A5E:  MOVLW  00
08A60:  ADDWFC x81,W
08A62:  MOVWF  FEA
08A64:  MOVFF  FEC,ACC
08A68:  MOVF   FED,F
08A6A:  MOVFF  FEF,ACB
08A6E:  MOVLW  0F
08A70:  ANDWF  xCB,F
08A72:  CLRF   xCC
08A74:  RLCF   xCB,F
08A76:  RLCF   xCC,F
08A78:  RLCF   xCB,F
08A7A:  RLCF   xCC,F
08A7C:  RLCF   xCB,F
08A7E:  RLCF   xCC,F
08A80:  RLCF   xCB,F
08A82:  RLCF   xCC,F
08A84:  MOVLW  F0
08A86:  ANDWF  xCB,F
08A88:  MOVLW  06
08A8A:  ADDWF  x80,W
08A8C:  MOVWF  FE9
08A8E:  MOVLW  00
08A90:  ADDWFC x81,W
08A92:  MOVWF  FEA
08A94:  MOVFF  FEC,ACE
08A98:  MOVF   FED,F
08A9A:  MOVFF  FEF,ACD
08A9E:  MOVFF  ACE,ACD
08AA2:  CLRF   xCE
08AA4:  MOVF   xCD,W
08AA6:  ANDLW  0F
08AA8:  MOVWF  00
08AAA:  CLRF   03
08AAC:  MOVF   00,W
08AAE:  IORWF  xCB,W
08AB0:  MOVWF  x8D
....................     data_packet.header.env_data[0].data[2] = measured_data_ptr->temp_py_top & 0xFF;
08AB2:  MOVLW  06
08AB4:  ADDWF  x80,W
08AB6:  MOVWF  FE9
08AB8:  MOVLW  00
08ABA:  ADDWFC x81,W
08ABC:  MOVWF  FEA
08ABE:  MOVFF  FEC,ACC
08AC2:  MOVF   FED,F
08AC4:  MOVFF  FEF,ACB
08AC8:  MOVF   xCB,W
08ACA:  MOVWF  x8E
....................     data_packet.header.env_data[1].data[0] = (measured_data_ptr->temp_py_bot >> 4) & 0xFF;
08ACC:  MOVLW  08
08ACE:  ADDWF  x80,W
08AD0:  MOVWF  FE9
08AD2:  MOVLW  00
08AD4:  ADDWFC x81,W
08AD6:  MOVWF  FEA
08AD8:  MOVFF  FEC,ACC
08ADC:  MOVF   FED,F
08ADE:  MOVFF  FEF,ACB
08AE2:  RRCF   xCC,F
08AE4:  RRCF   xCB,F
08AE6:  RRCF   xCC,F
08AE8:  RRCF   xCB,F
08AEA:  RRCF   xCC,F
08AEC:  RRCF   xCB,F
08AEE:  RRCF   xCC,F
08AF0:  RRCF   xCB,F
08AF2:  MOVLW  0F
08AF4:  ANDWF  xCC,F
08AF6:  MOVF   xCB,W
08AF8:  MOVWF  x8F
....................     data_packet.header.env_data[1].data[1] = ((measured_data_ptr->temp_py_bot & 0x0F) << 4) | ((measured_data_ptr->temp_mis7 >> 8) & 0x0F);
08AFA:  MOVLW  08
08AFC:  ADDWF  x80,W
08AFE:  MOVWF  FE9
08B00:  MOVLW  00
08B02:  ADDWFC x81,W
08B04:  MOVWF  FEA
08B06:  MOVFF  FEC,ACC
08B0A:  MOVF   FED,F
08B0C:  MOVFF  FEF,ACB
08B10:  MOVLW  0F
08B12:  ANDWF  xCB,F
08B14:  CLRF   xCC
08B16:  RLCF   xCB,F
08B18:  RLCF   xCC,F
08B1A:  RLCF   xCB,F
08B1C:  RLCF   xCC,F
08B1E:  RLCF   xCB,F
08B20:  RLCF   xCC,F
08B22:  RLCF   xCB,F
08B24:  RLCF   xCC,F
08B26:  MOVLW  F0
08B28:  ANDWF  xCB,F
08B2A:  MOVLW  0A
08B2C:  ADDWF  x80,W
08B2E:  MOVWF  FE9
08B30:  MOVLW  00
08B32:  ADDWFC x81,W
08B34:  MOVWF  FEA
08B36:  MOVFF  FEC,ACE
08B3A:  MOVF   FED,F
08B3C:  MOVFF  FEF,ACD
08B40:  MOVFF  ACE,ACD
08B44:  CLRF   xCE
08B46:  MOVF   xCD,W
08B48:  ANDLW  0F
08B4A:  MOVWF  00
08B4C:  CLRF   03
08B4E:  MOVF   00,W
08B50:  IORWF  xCB,W
08B52:  MOVWF  x90
....................     data_packet.header.env_data[1].data[2] = measured_data_ptr->temp_mis7 & 0xFF;
08B54:  MOVLW  0A
08B56:  ADDWF  x80,W
08B58:  MOVWF  FE9
08B5A:  MOVLW  00
08B5C:  ADDWFC x81,W
08B5E:  MOVWF  FEA
08B60:  MOVFF  FEC,ACC
08B64:  MOVF   FED,F
08B66:  MOVFF  FEF,ACB
08B6A:  MOVF   xCB,W
08B6C:  MOVWF  x91
....................     
....................     // IVデータの1パケット目
....................     unsigned int16 iv_index = 0;
08B6E:  CLRF   xC6
08B70:  CLRF   xC5
....................     for (unsigned int16 i = 0; i < 16 && iv_index < port_data_ptr->sweep_step; i++, iv_index++){
08B72:  CLRF   xC8
08B74:  CLRF   xC7
08B76:  MOVLB  0
08B78:  MOVLB  A
08B7A:  MOVF   xC8,F
08B7C:  BTFSC  FD8.2
08B7E:  BRA    8B86
08B80:  MOVLB  0
08B82:  GOTO   8E1C
08B86:  MOVLB  0
08B88:  MOVLB  A
08B8A:  MOVF   xC7,W
08B8C:  SUBLW  0F
08B8E:  BTFSC  FD8.0
08B90:  BRA    8B98
08B92:  MOVLB  0
08B94:  GOTO   8E1C
08B98:  MOVLB  0
08B9A:  MOVLW  01
08B9C:  MOVLB  A
08B9E:  ADDWF  x82,W
08BA0:  MOVWF  FE9
08BA2:  MOVLW  00
08BA4:  ADDWFC x83,W
08BA6:  MOVWF  FEA
08BA8:  MOVFF  FEC,03
08BAC:  MOVF   FED,F
08BAE:  MOVF   FEF,W
08BB0:  MOVWF  01
08BB2:  MOVF   xC6,W
08BB4:  SUBWF  03,W
08BB6:  BTFSC  FD8.0
08BB8:  BRA    8BC0
08BBA:  MOVLB  0
08BBC:  GOTO   8E1C
08BC0:  MOVLB  0
08BC2:  BTFSS  FD8.2
08BC4:  GOTO   8BDA
08BC8:  MOVF   01,W
08BCA:  MOVLB  A
08BCC:  SUBWF  xC5,W
08BCE:  BTFSS  FD8.0
08BD0:  BRA    8BD8
08BD2:  MOVLB  0
08BD4:  GOTO   8E1C
08BD8:  MOVLB  0
....................         data_packet.header.iv_data[i].data[0] = (port_data_ptr->data_buffer[i].voltage >> 4) & 0xFF;
08BDA:  MOVFF  AC8,ACC
08BDE:  MOVFF  AC7,ACB
08BE2:  MOVLB  A
08BE4:  CLRF   xCE
08BE6:  MOVLW  03
08BE8:  MOVWF  xCD
08BEA:  MOVLB  0
08BEC:  CALL   7D8A
08BF0:  MOVFF  02,03
08BF4:  MOVF   01,W
08BF6:  ADDLW  92
08BF8:  MOVWF  01
08BFA:  MOVLW  0A
08BFC:  ADDWFC 03,F
08BFE:  MOVF   01,W
08C00:  MOVLB  A
08C02:  MOVWF  xCD
08C04:  MOVFF  03,ACE
08C08:  RLCF   xC7,W
08C0A:  MOVWF  02
08C0C:  RLCF   xC8,W
08C0E:  MOVWF  03
08C10:  RLCF   02,F
08C12:  RLCF   03,F
08C14:  MOVLW  FC
08C16:  ANDWF  02,F
08C18:  MOVF   02,W
08C1A:  ADDLW  03
08C1C:  MOVWF  xCF
08C1E:  MOVLW  00
08C20:  ADDWFC 03,W
08C22:  MOVWF  xD0
08C24:  MOVF   x82,W
08C26:  ADDWF  xCF,W
08C28:  MOVWF  FE9
08C2A:  MOVF   x83,W
08C2C:  ADDWFC xD0,W
08C2E:  MOVWF  FEA
08C30:  MOVFF  FEC,AD2
08C34:  MOVF   FED,F
08C36:  MOVFF  FEF,AD1
08C3A:  RRCF   xD2,F
08C3C:  RRCF   xD1,F
08C3E:  RRCF   xD2,F
08C40:  RRCF   xD1,F
08C42:  RRCF   xD2,F
08C44:  RRCF   xD1,F
08C46:  RRCF   xD2,F
08C48:  RRCF   xD1,F
08C4A:  MOVLW  0F
08C4C:  ANDWF  xD2,F
08C4E:  MOVF   xD1,W
08C50:  MOVWF  00
08C52:  CLRF   03
08C54:  MOVF   00,W
08C56:  MOVWF  xD1
08C58:  MOVFF  03,AD2
08C5C:  MOVFF  ACE,FEA
08C60:  MOVFF  ACD,FE9
08C64:  MOVFF  AD1,FEF
....................         data_packet.header.iv_data[i].data[1] = ((port_data_ptr->data_buffer[i].voltage & 0x0F) << 4) | ((port_data_ptr->data_buffer[i].current >> 8) & 0x0F);
08C68:  MOVFF  AC8,ACC
08C6C:  MOVFF  AC7,ACB
08C70:  CLRF   xCE
08C72:  MOVLW  03
08C74:  MOVWF  xCD
08C76:  MOVLB  0
08C78:  CALL   7D8A
08C7C:  MOVFF  02,03
08C80:  MOVF   01,W
08C82:  ADDLW  0E
08C84:  MOVLB  A
08C86:  MOVWF  xCB
08C88:  MOVLW  00
08C8A:  ADDWFC 03,W
08C8C:  MOVWF  xCC
08C8E:  MOVLW  01
08C90:  ADDWF  xCB,W
08C92:  MOVWF  01
08C94:  MOVLW  00
08C96:  ADDWFC xCC,W
08C98:  MOVWF  03
08C9A:  MOVF   01,W
08C9C:  ADDLW  84
08C9E:  MOVWF  01
08CA0:  MOVLW  0A
08CA2:  ADDWFC 03,F
08CA4:  MOVF   01,W
08CA6:  MOVWF  xCB
08CA8:  MOVFF  03,ACC
08CAC:  RLCF   xC7,W
08CAE:  MOVWF  02
08CB0:  RLCF   xC8,W
08CB2:  MOVWF  03
08CB4:  RLCF   02,F
08CB6:  RLCF   03,F
08CB8:  MOVLW  FC
08CBA:  ANDWF  02,F
08CBC:  MOVF   02,W
08CBE:  ADDLW  03
08CC0:  MOVWF  xCD
08CC2:  MOVLW  00
08CC4:  ADDWFC 03,W
08CC6:  MOVWF  xCE
08CC8:  MOVF   x82,W
08CCA:  ADDWF  xCD,W
08CCC:  MOVWF  FE9
08CCE:  MOVF   x83,W
08CD0:  ADDWFC xCE,W
08CD2:  MOVWF  FEA
08CD4:  MOVFF  FEC,AD0
08CD8:  MOVF   FED,F
08CDA:  MOVFF  FEF,ACF
08CDE:  MOVLW  0F
08CE0:  ANDWF  xCF,F
08CE2:  CLRF   xD0
08CE4:  RLCF   xCF,F
08CE6:  RLCF   xD0,F
08CE8:  RLCF   xCF,F
08CEA:  RLCF   xD0,F
08CEC:  RLCF   xCF,F
08CEE:  RLCF   xD0,F
08CF0:  RLCF   xCF,F
08CF2:  RLCF   xD0,F
08CF4:  MOVLW  F0
08CF6:  ANDWF  xCF,F
08CF8:  RLCF   xC7,W
08CFA:  MOVWF  02
08CFC:  RLCF   xC8,W
08CFE:  MOVWF  03
08D00:  RLCF   02,F
08D02:  RLCF   03,F
08D04:  MOVLW  FC
08D06:  ANDWF  02,F
08D08:  MOVF   02,W
08D0A:  ADDLW  03
08D0C:  MOVWF  xD1
08D0E:  MOVLW  00
08D10:  ADDWFC 03,W
08D12:  MOVWF  xD2
08D14:  MOVLW  02
08D16:  ADDWF  xD1,W
08D18:  MOVWF  01
08D1A:  MOVLW  00
08D1C:  ADDWFC xD2,W
08D1E:  MOVWF  03
08D20:  MOVF   01,W
08D22:  ADDWF  x82,W
08D24:  MOVWF  FE9
08D26:  MOVF   x83,W
08D28:  ADDWFC 03,W
08D2A:  MOVWF  FEA
08D2C:  MOVFF  FEC,AD2
08D30:  MOVF   FED,F
08D32:  MOVFF  FEF,AD1
08D36:  MOVFF  AD2,AD1
08D3A:  CLRF   xD2
08D3C:  MOVF   xD1,W
08D3E:  ANDLW  0F
08D40:  MOVWF  00
08D42:  CLRF   03
08D44:  MOVF   00,W
08D46:  IORWF  xCF,W
08D48:  MOVWF  00
08D4A:  MOVF   03,W
08D4C:  IORWF  xD0,W
08D4E:  MOVWF  03
08D50:  MOVF   00,W
08D52:  MOVWF  xCF
08D54:  MOVFF  03,AD0
08D58:  MOVFF  ACC,FEA
08D5C:  MOVFF  ACB,FE9
08D60:  MOVFF  ACF,FEF
....................         data_packet.header.iv_data[i].data[2] = port_data_ptr->data_buffer[i].current & 0xFF;
08D64:  MOVFF  AC8,ACC
08D68:  MOVFF  AC7,ACB
08D6C:  CLRF   xCE
08D6E:  MOVLW  03
08D70:  MOVWF  xCD
08D72:  MOVLB  0
08D74:  CALL   7D8A
08D78:  MOVFF  02,03
08D7C:  MOVF   01,W
08D7E:  ADDLW  0E
08D80:  MOVLB  A
08D82:  MOVWF  xCB
08D84:  MOVLW  00
08D86:  ADDWFC 03,W
08D88:  MOVWF  xCC
08D8A:  MOVLW  02
08D8C:  ADDWF  xCB,W
08D8E:  MOVWF  01
08D90:  MOVLW  00
08D92:  ADDWFC xCC,W
08D94:  MOVWF  03
08D96:  MOVF   01,W
08D98:  ADDLW  84
08D9A:  MOVWF  01
08D9C:  MOVLW  0A
08D9E:  ADDWFC 03,F
08DA0:  MOVF   01,W
08DA2:  MOVWF  xCB
08DA4:  MOVFF  03,ACC
08DA8:  RLCF   xC7,W
08DAA:  MOVWF  02
08DAC:  RLCF   xC8,W
08DAE:  MOVWF  03
08DB0:  RLCF   02,F
08DB2:  RLCF   03,F
08DB4:  MOVLW  FC
08DB6:  ANDWF  02,F
08DB8:  MOVF   02,W
08DBA:  ADDLW  03
08DBC:  MOVWF  xCD
08DBE:  MOVLW  00
08DC0:  ADDWFC 03,W
08DC2:  MOVWF  xCE
08DC4:  MOVLW  02
08DC6:  ADDWF  xCD,W
08DC8:  MOVWF  01
08DCA:  MOVLW  00
08DCC:  ADDWFC xCE,W
08DCE:  MOVWF  03
08DD0:  MOVF   01,W
08DD2:  ADDWF  x82,W
08DD4:  MOVWF  FE9
08DD6:  MOVF   x83,W
08DD8:  ADDWFC 03,W
08DDA:  MOVWF  FEA
08DDC:  MOVFF  FEC,ACE
08DE0:  MOVF   FED,F
08DE2:  MOVFF  FEF,ACD
08DE6:  MOVF   xCD,W
08DE8:  MOVWF  00
08DEA:  CLRF   03
08DEC:  MOVF   00,W
08DEE:  MOVWF  xCD
08DF0:  MOVFF  03,ACE
08DF4:  MOVFF  ACC,FEA
08DF8:  MOVFF  ACB,FE9
08DFC:  MOVFF  ACD,FEF
08E00:  MOVLB  0
08E02:  MOVLB  A
08E04:  MOVF   xC8,W
08E06:  MOVWF  03
08E08:  MOVF   xC7,W
08E0A:  INCF   xC7,F
08E0C:  BTFSC  FD8.2
08E0E:  INCF   xC8,F
08E10:  INCF   xC5,F
08E12:  BTFSC  FD8.2
08E14:  INCF   xC6,F
08E16:  MOVLB  0
08E18:  GOTO   8B78
....................     }
....................     switch (port_data_ptr -> port_num) {
08E1C:  MOVLB  A
08E1E:  MOVF   x82,W
08E20:  MOVWF  FE9
08E22:  MOVF   x83,W
08E24:  MOVWF  FEA
08E26:  MOVF   FEF,W
08E28:  XORLW  01
08E2A:  MOVLB  0
08E2C:  BTFSC  FD8.2
08E2E:  GOTO   8E3E
08E32:  XORLW  03
08E34:  BTFSC  FD8.2
08E36:  GOTO   8E6C
08E3A:  GOTO   8E9A
....................         case 1:
....................             misf_write_data(FLASH_ID_IV1_DATA, data_packet_ptr->raw, PACKET_SIZE-1);
08E3E:  MOVLB  A
08E40:  MOVF   xC3,W
08E42:  MOVWF  01
08E44:  MOVF   xC4,W
08E46:  MOVWF  03
08E48:  MOVF   01,W
08E4A:  MOVWF  xCB
08E4C:  MOVFF  03,ACC
08E50:  MOVLW  04
08E52:  MOVWF  xCD
08E54:  MOVFF  ACC,ACF
08E58:  MOVFF  ACB,ACE
08E5C:  CLRF   xD1
08E5E:  MOVLW  3F
08E60:  MOVWF  xD0
08E62:  MOVLB  0
08E64:  CALL   4546
....................             break;
08E68:  GOTO   8E9E
....................         case 2:
....................             misf_write_data(FLASH_ID_IV2_DATA, data_packet_ptr->raw, PACKET_SIZE-1);
08E6C:  MOVLB  A
08E6E:  MOVF   xC3,W
08E70:  MOVWF  01
08E72:  MOVF   xC4,W
08E74:  MOVWF  03
08E76:  MOVF   01,W
08E78:  MOVWF  xCB
08E7A:  MOVFF  03,ACC
08E7E:  MOVLW  06
08E80:  MOVWF  xCD
08E82:  MOVFF  ACC,ACF
08E86:  MOVFF  ACB,ACE
08E8A:  CLRF   xD1
08E8C:  MOVLW  3F
08E8E:  MOVWF  xD0
08E90:  MOVLB  0
08E92:  CALL   4546
....................             break;
08E96:  GOTO   8E9E
....................         default:
....................             break;
08E9A:  GOTO   8E9E
....................     }
.................... 
....................     // 2パケット目以降のIVデータ
....................     while (iv_index < port_data_ptr->sweep_step) {
08E9E:  MOVLW  01
08EA0:  MOVLB  A
08EA2:  ADDWF  x82,W
08EA4:  MOVWF  FE9
08EA6:  MOVLW  00
08EA8:  ADDWFC x83,W
08EAA:  MOVWF  FEA
08EAC:  MOVFF  FEC,03
08EB0:  MOVF   FED,F
08EB2:  MOVF   FEF,W
08EB4:  MOVWF  01
08EB6:  MOVF   xC6,W
08EB8:  SUBWF  03,W
08EBA:  BTFSC  FD8.0
08EBC:  BRA    8EC4
08EBE:  MOVLB  0
08EC0:  GOTO   9308
08EC4:  MOVLB  0
08EC6:  BTFSS  FD8.2
08EC8:  GOTO   8EDE
08ECC:  MOVF   01,W
08ECE:  MOVLB  A
08ED0:  SUBWF  xC5,W
08ED2:  BTFSS  FD8.0
08ED4:  BRA    8EDC
08ED6:  MOVLB  0
08ED8:  GOTO   9308
08EDC:  MOVLB  0
....................         // 新しいパケットの初期化（ゼロクリア）
....................         memset(data_packet_ptr->raw, 0x00, sizeof(data_packet.raw));
08EDE:  MOVLB  A
08EE0:  MOVF   xC3,W
08EE2:  MOVWF  01
08EE4:  MOVF   xC4,W
08EE6:  MOVWF  03
08EE8:  MOVF   01,W
08EEA:  MOVWF  xCB
08EEC:  MOVFF  03,ACC
08EF0:  MOVFF  ACC,FEA
08EF4:  MOVFF  ACB,FE9
08EF8:  CLRF   00
08EFA:  CLRF   02
08EFC:  MOVLW  3F
08EFE:  MOVWF  01
08F00:  MOVLB  0
08F02:  CALL   2C62
.................... 
....................         unsigned int16 step_in_packet = 0;
08F06:  MOVLB  A
08F08:  CLRF   xCA
08F0A:  CLRF   xC9
08F0C:  MOVLB  0
.................... 
....................         // データを詰める
....................         for (; step_in_packet < 21 && iv_index < port_data_ptr->sweep_step;
08F0E:  MOVLB  A
08F10:  MOVF   xCA,F
08F12:  BTFSC  FD8.2
08F14:  BRA    8F1C
08F16:  MOVLB  0
08F18:  GOTO   91A8
08F1C:  MOVLB  0
08F1E:  MOVLB  A
08F20:  MOVF   xC9,W
08F22:  SUBLW  14
08F24:  BTFSC  FD8.0
08F26:  BRA    8F2E
08F28:  MOVLB  0
08F2A:  GOTO   91A8
08F2E:  MOVLB  0
08F30:  MOVLW  01
08F32:  MOVLB  A
08F34:  ADDWF  x82,W
08F36:  MOVWF  FE9
08F38:  MOVLW  00
08F3A:  ADDWFC x83,W
08F3C:  MOVWF  FEA
08F3E:  MOVFF  FEC,03
08F42:  MOVF   FED,F
08F44:  MOVF   FEF,W
08F46:  MOVWF  01
08F48:  MOVF   xC6,W
08F4A:  SUBWF  03,W
08F4C:  BTFSC  FD8.0
08F4E:  BRA    8F56
08F50:  MOVLB  0
08F52:  GOTO   91A8
08F56:  MOVLB  0
08F58:  BTFSS  FD8.2
08F5A:  GOTO   8F70
08F5E:  MOVF   01,W
08F60:  MOVLB  A
08F62:  SUBWF  xC5,W
08F64:  BTFSS  FD8.0
08F66:  BRA    8F6E
08F68:  MOVLB  0
08F6A:  GOTO   91A8
08F6E:  MOVLB  0
....................             step_in_packet++, iv_index++) {
....................             data_packet.data.iv_data[step_in_packet].data[0] =
....................                 (port_data_ptr->data_buffer[iv_index].voltage >> 4) & 0xFF;
08F70:  MOVFF  ACA,ACC
08F74:  MOVFF  AC9,ACB
08F78:  MOVLB  A
08F7A:  CLRF   xCE
08F7C:  MOVLW  03
08F7E:  MOVWF  xCD
08F80:  MOVLB  0
08F82:  CALL   7D8A
08F86:  MOVFF  02,ACC
08F8A:  MOVFF  01,ACB
08F8E:  MOVLW  84
08F90:  MOVLB  A
08F92:  ADDWF  xCB,W
08F94:  MOVWF  01
08F96:  MOVLW  0A
08F98:  ADDWFC xCC,W
08F9A:  MOVWF  03
08F9C:  MOVF   01,W
08F9E:  MOVWF  xCD
08FA0:  MOVFF  03,ACE
08FA4:  RLCF   xC5,W
08FA6:  MOVWF  02
08FA8:  RLCF   xC6,W
08FAA:  MOVWF  03
08FAC:  RLCF   02,F
08FAE:  RLCF   03,F
08FB0:  MOVLW  FC
08FB2:  ANDWF  02,F
08FB4:  MOVF   02,W
08FB6:  ADDLW  03
08FB8:  MOVWF  xCF
08FBA:  MOVLW  00
08FBC:  ADDWFC 03,W
08FBE:  MOVWF  xD0
08FC0:  MOVF   x82,W
08FC2:  ADDWF  xCF,W
08FC4:  MOVWF  FE9
08FC6:  MOVF   x83,W
08FC8:  ADDWFC xD0,W
08FCA:  MOVWF  FEA
08FCC:  MOVFF  FEC,AD2
08FD0:  MOVF   FED,F
08FD2:  MOVFF  FEF,AD1
08FD6:  RRCF   xD2,F
08FD8:  RRCF   xD1,F
08FDA:  RRCF   xD2,F
08FDC:  RRCF   xD1,F
08FDE:  RRCF   xD2,F
08FE0:  RRCF   xD1,F
08FE2:  RRCF   xD2,F
08FE4:  RRCF   xD1,F
08FE6:  MOVLW  0F
08FE8:  ANDWF  xD2,F
08FEA:  MOVF   xD1,W
08FEC:  MOVWF  00
08FEE:  CLRF   03
08FF0:  MOVF   00,W
08FF2:  MOVWF  xD1
08FF4:  MOVFF  03,AD2
08FF8:  MOVFF  ACE,FEA
08FFC:  MOVFF  ACD,FE9
09000:  MOVFF  AD1,FEF
....................             data_packet.data.iv_data[step_in_packet].data[1] =
....................                 ((port_data_ptr->data_buffer[iv_index].voltage & 0x0F) << 4) |
....................                 ((port_data_ptr->data_buffer[iv_index].current >> 8) & 0x0F);
09004:  MOVFF  ACA,ACC
09008:  MOVFF  AC9,ACB
0900C:  CLRF   xCE
0900E:  MOVLW  03
09010:  MOVWF  xCD
09012:  MOVLB  0
09014:  CALL   7D8A
09018:  MOVFF  02,ACC
0901C:  MOVFF  01,ACB
09020:  MOVLW  01
09022:  MOVLB  A
09024:  ADDWF  xCB,W
09026:  MOVWF  01
09028:  MOVLW  00
0902A:  ADDWFC xCC,W
0902C:  MOVWF  03
0902E:  MOVF   01,W
09030:  ADDLW  84
09032:  MOVWF  01
09034:  MOVLW  0A
09036:  ADDWFC 03,F
09038:  MOVF   01,W
0903A:  MOVWF  xCB
0903C:  MOVFF  03,ACC
09040:  RLCF   xC5,W
09042:  MOVWF  02
09044:  RLCF   xC6,W
09046:  MOVWF  03
09048:  RLCF   02,F
0904A:  RLCF   03,F
0904C:  MOVLW  FC
0904E:  ANDWF  02,F
09050:  MOVF   02,W
09052:  ADDLW  03
09054:  MOVWF  xCD
09056:  MOVLW  00
09058:  ADDWFC 03,W
0905A:  MOVWF  xCE
0905C:  MOVF   x82,W
0905E:  ADDWF  xCD,W
09060:  MOVWF  FE9
09062:  MOVF   x83,W
09064:  ADDWFC xCE,W
09066:  MOVWF  FEA
09068:  MOVFF  FEC,AD0
0906C:  MOVF   FED,F
0906E:  MOVFF  FEF,ACF
09072:  MOVLW  0F
09074:  ANDWF  xCF,F
09076:  CLRF   xD0
09078:  RLCF   xCF,F
0907A:  RLCF   xD0,F
0907C:  RLCF   xCF,F
0907E:  RLCF   xD0,F
09080:  RLCF   xCF,F
09082:  RLCF   xD0,F
09084:  RLCF   xCF,F
09086:  RLCF   xD0,F
09088:  MOVLW  F0
0908A:  ANDWF  xCF,F
0908C:  RLCF   xC5,W
0908E:  MOVWF  02
09090:  RLCF   xC6,W
09092:  MOVWF  03
09094:  RLCF   02,F
09096:  RLCF   03,F
09098:  MOVLW  FC
0909A:  ANDWF  02,F
0909C:  MOVF   02,W
0909E:  ADDLW  03
090A0:  MOVWF  xD1
090A2:  MOVLW  00
090A4:  ADDWFC 03,W
090A6:  MOVWF  xD2
090A8:  MOVLW  02
090AA:  ADDWF  xD1,W
090AC:  MOVWF  01
090AE:  MOVLW  00
090B0:  ADDWFC xD2,W
090B2:  MOVWF  03
090B4:  MOVF   01,W
090B6:  ADDWF  x82,W
090B8:  MOVWF  FE9
090BA:  MOVF   x83,W
090BC:  ADDWFC 03,W
090BE:  MOVWF  FEA
090C0:  MOVFF  FEC,AD2
090C4:  MOVF   FED,F
090C6:  MOVFF  FEF,AD1
090CA:  MOVFF  AD2,AD1
090CE:  CLRF   xD2
090D0:  MOVF   xD1,W
090D2:  ANDLW  0F
090D4:  MOVWF  00
090D6:  CLRF   03
090D8:  MOVF   00,W
090DA:  IORWF  xCF,W
090DC:  MOVWF  00
090DE:  MOVF   03,W
090E0:  IORWF  xD0,W
090E2:  MOVWF  03
090E4:  MOVF   00,W
090E6:  MOVWF  xCF
090E8:  MOVFF  03,AD0
090EC:  MOVFF  ACC,FEA
090F0:  MOVFF  ACB,FE9
090F4:  MOVFF  ACF,FEF
....................             data_packet.data.iv_data[step_in_packet].data[2] =
....................                 port_data_ptr->data_buffer[iv_index].current & 0xFF;
090F8:  MOVFF  ACA,ACC
090FC:  MOVFF  AC9,ACB
09100:  CLRF   xCE
09102:  MOVLW  03
09104:  MOVWF  xCD
09106:  MOVLB  0
09108:  CALL   7D8A
0910C:  MOVFF  02,ACC
09110:  MOVFF  01,ACB
09114:  MOVLW  02
09116:  MOVLB  A
09118:  ADDWF  xCB,W
0911A:  MOVWF  01
0911C:  MOVLW  00
0911E:  ADDWFC xCC,W
09120:  MOVWF  03
09122:  MOVF   01,W
09124:  ADDLW  84
09126:  MOVWF  01
09128:  MOVLW  0A
0912A:  ADDWFC 03,F
0912C:  MOVF   01,W
0912E:  MOVWF  xCB
09130:  MOVFF  03,ACC
09134:  RLCF   xC5,W
09136:  MOVWF  02
09138:  RLCF   xC6,W
0913A:  MOVWF  03
0913C:  RLCF   02,F
0913E:  RLCF   03,F
09140:  MOVLW  FC
09142:  ANDWF  02,F
09144:  MOVF   02,W
09146:  ADDLW  03
09148:  MOVWF  xCD
0914A:  MOVLW  00
0914C:  ADDWFC 03,W
0914E:  MOVWF  xCE
09150:  MOVLW  02
09152:  ADDWF  xCD,W
09154:  MOVWF  01
09156:  MOVLW  00
09158:  ADDWFC xCE,W
0915A:  MOVWF  03
0915C:  MOVF   01,W
0915E:  ADDWF  x82,W
09160:  MOVWF  FE9
09162:  MOVF   x83,W
09164:  ADDWFC 03,W
09166:  MOVWF  FEA
09168:  MOVFF  FEC,ACE
0916C:  MOVF   FED,F
0916E:  MOVFF  FEF,ACD
09172:  MOVF   xCD,W
09174:  MOVWF  00
09176:  CLRF   03
09178:  MOVF   00,W
0917A:  MOVWF  xCD
0917C:  MOVFF  03,ACE
09180:  MOVFF  ACC,FEA
09184:  MOVFF  ACB,FE9
09188:  MOVFF  ACD,FEF
0918C:  MOVLB  0
0918E:  MOVLB  A
09190:  MOVF   xCA,W
09192:  MOVWF  03
09194:  MOVF   xC9,W
09196:  INCF   xC9,F
09198:  BTFSC  FD8.2
0919A:  INCF   xCA,F
0919C:  INCF   xC5,F
0919E:  BTFSC  FD8.2
091A0:  INCF   xC6,F
091A2:  MOVLB  0
091A4:  GOTO   8F0E
....................         }
.................... 
....................         // 残り領域を 0x00 で埋める（未使用部分）
....................         for (; step_in_packet < 21; step_in_packet++) {
091A8:  MOVLB  A
091AA:  MOVF   xCA,F
091AC:  BTFSC  FD8.2
091AE:  BRA    91B6
091B0:  MOVLB  0
091B2:  GOTO   9278
091B6:  MOVLB  0
091B8:  MOVLB  A
091BA:  MOVF   xC9,W
091BC:  SUBLW  14
091BE:  BTFSC  FD8.0
091C0:  BRA    91C8
091C2:  MOVLB  0
091C4:  GOTO   9278
091C8:  MOVLB  0
....................             data_packet.data.iv_data[step_in_packet].data[0] = 0x00;
091CA:  MOVFF  ACA,ACC
091CE:  MOVFF  AC9,ACB
091D2:  MOVLB  A
091D4:  CLRF   xCE
091D6:  MOVLW  03
091D8:  MOVWF  xCD
091DA:  MOVLB  0
091DC:  CALL   7D8A
091E0:  MOVFF  02,ACC
091E4:  MOVFF  01,ACB
091E8:  MOVLW  84
091EA:  MOVLB  A
091EC:  ADDWF  xCB,W
091EE:  MOVWF  FE9
091F0:  MOVLW  0A
091F2:  ADDWFC xCC,W
091F4:  MOVWF  FEA
091F6:  CLRF   FEF
....................             data_packet.data.iv_data[step_in_packet].data[1] = 0x00;
091F8:  MOVFF  ACA,ACC
091FC:  MOVFF  AC9,ACB
09200:  CLRF   xCE
09202:  MOVLW  03
09204:  MOVWF  xCD
09206:  MOVLB  0
09208:  CALL   7D8A
0920C:  MOVFF  02,ACC
09210:  MOVFF  01,ACB
09214:  MOVLW  01
09216:  MOVLB  A
09218:  ADDWF  xCB,W
0921A:  MOVWF  01
0921C:  MOVLW  00
0921E:  ADDWFC xCC,W
09220:  MOVWF  03
09222:  MOVF   01,W
09224:  ADDLW  84
09226:  MOVWF  FE9
09228:  MOVLW  0A
0922A:  ADDWFC 03,W
0922C:  MOVWF  FEA
0922E:  CLRF   FEF
....................             data_packet.data.iv_data[step_in_packet].data[2] = 0x00;
09230:  MOVFF  ACA,ACC
09234:  MOVFF  AC9,ACB
09238:  CLRF   xCE
0923A:  MOVLW  03
0923C:  MOVWF  xCD
0923E:  MOVLB  0
09240:  CALL   7D8A
09244:  MOVFF  02,ACC
09248:  MOVFF  01,ACB
0924C:  MOVLW  02
0924E:  MOVLB  A
09250:  ADDWF  xCB,W
09252:  MOVWF  01
09254:  MOVLW  00
09256:  ADDWFC xCC,W
09258:  MOVWF  03
0925A:  MOVF   01,W
0925C:  ADDLW  84
0925E:  MOVWF  FE9
09260:  MOVLW  0A
09262:  ADDWFC 03,W
09264:  MOVWF  FEA
09266:  CLRF   FEF
09268:  MOVLB  0
0926A:  MOVLB  A
0926C:  INCF   xC9,F
0926E:  BTFSC  FD8.2
09270:  INCF   xCA,F
09272:  MOVLB  0
09274:  GOTO   91A8
....................         }
.................... 
....................         // フラッシュに書き込み
....................         if (port_data_ptr->port_num == 1) {
09278:  MOVLB  A
0927A:  MOVF   x82,W
0927C:  MOVWF  FE9
0927E:  MOVF   x83,W
09280:  MOVWF  FEA
09282:  DECFSZ FEF,W
09284:  BRA    928A
09286:  BRA    9290
09288:  MOVLB  0
0928A:  MOVLB  0
0928C:  GOTO   92C0
09290:  MOVLB  0
....................             misf_write_data(FLASH_ID_IV1_DATA, data_packet_ptr->raw, PACKET_SIZE - 1);
09292:  MOVLB  A
09294:  MOVF   xC3,W
09296:  MOVWF  01
09298:  MOVF   xC4,W
0929A:  MOVWF  03
0929C:  MOVF   01,W
0929E:  MOVWF  xCB
092A0:  MOVFF  03,ACC
092A4:  MOVLW  04
092A6:  MOVWF  xCD
092A8:  MOVFF  ACC,ACF
092AC:  MOVFF  ACB,ACE
092B0:  CLRF   xD1
092B2:  MOVLW  3F
092B4:  MOVWF  xD0
092B6:  MOVLB  0
092B8:  CALL   4546
....................         } else if (port_data_ptr->port_num == 2) {
092BC:  GOTO   9304
092C0:  MOVLB  A
092C2:  MOVF   x82,W
092C4:  MOVWF  FE9
092C6:  MOVF   x83,W
092C8:  MOVWF  FEA
092CA:  MOVF   FEF,W
092CC:  SUBLW  02
092CE:  BTFSC  FD8.2
092D0:  BRA    92D8
092D2:  MOVLB  0
092D4:  GOTO   9304
092D8:  MOVLB  0
....................             misf_write_data(FLASH_ID_IV2_DATA, data_packet_ptr->raw, PACKET_SIZE - 1);
092DA:  MOVLB  A
092DC:  MOVF   xC3,W
092DE:  MOVWF  01
092E0:  MOVF   xC4,W
092E2:  MOVWF  03
092E4:  MOVF   01,W
092E6:  MOVWF  xCB
092E8:  MOVFF  03,ACC
092EC:  MOVLW  06
092EE:  MOVWF  xCD
092F0:  MOVFF  ACC,ACF
092F4:  MOVFF  ACB,ACE
092F8:  CLRF   xD1
092FA:  MOVLW  3F
092FC:  MOVWF  xD0
092FE:  MOVLB  0
09300:  CALL   4546
....................         }
09304:  GOTO   8E9E
....................     }
09308:  RETURN 0
.................... }
.................... 
.................... void log_meas_data_with_print(iv_env_t *measured_data_ptr, sweep_config_t *port_data_ptr)
.................... {
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; 
....................     unsigned int8 packet_index = 0;
....................     int1 first_packet = true; // 最初のパケットフラグ
.................... 
.................... 
....................     unsigned int16 sweep_index = 0;
....................     // ==== データステップ書き込み ====
....................     for (unsigned int16 i = 0; i < port_data_ptr->sweep_step; i++) {
....................         unsigned int16 data0 = port_data_ptr->data_buffer[i].voltage;
....................         unsigned int16 data1 = port_data_ptr->data_buffer[i].current;
.................... 
....................         // パケットがいっぱいになる前にヘッダ＋環境データを入れる
....................         if (packet_index == 0) {
....................             unsigned int8 idx = 0;
....................             if (first_packet) {
....................                 packetdata[idx++] = START_MAKER;  // 最初のパケットだけ
....................                 first_packet = false;
....................             }
.................... 
....................             // timeヘッダ
....................             packetdata[idx++] = (measured_data_ptr->time >> 24) & 0xFF;
....................             packetdata[idx++] = (measured_data_ptr->time >> 16) & 0xFF;
....................             packetdata[idx++] = (measured_data_ptr->time >> 8) & 0xFF;
....................             packetdata[idx++] = measured_data_ptr->time & 0xFF;
.................... 
....................             // 環境データ
....................             packetdata[idx++] = (measured_data_ptr->pd >> 4) & 0xFF;
....................             packetdata[idx++] = ((measured_data_ptr->pd & 0x0F) << 4) | ((measured_data_ptr->temp_py_top >> 8) & 0x0F);
....................             packetdata[idx++] = measured_data_ptr->temp_py_top & 0xFF;
....................             packetdata[idx++] = (measured_data_ptr->temp_py_bot >> 4) & 0xFF;
....................             packetdata[idx++] = ((measured_data_ptr->temp_py_bot & 0x0F) << 4) | ((measured_data_ptr->temp_mis7 >> 8) & 0x0F);
....................             packetdata[idx++] = measured_data_ptr->temp_mis7 & 0xFF;
.................... 
....................             packet_index = idx;
....................         }
.................... 
....................         // パケットに収まるかチェック
....................         if (packet_index + DATA_SIZE_PER_STEP >= PACKET_SIZE) {
....................             // フラッシュ書き込み
....................             unsigned int32 write_address = MISF_CIGS_IV1_DATA_START;
....................             switch (port_data_ptr->port_num) {
....................                 case 1:
....................                     write_address += iv1_data_ptr->used_counter;
....................                     write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................                     iv1_data_ptr->used_counter += PACKET_SIZE;
....................                     iv1_data_ptr->uncopied_counter += PACKET_SIZE;
....................                     break;
....................                 case 2:
....................                     write_address += iv2_data_ptr->used_counter;
....................                     write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................                     iv2_data_ptr->used_counter += PACKET_SIZE;
....................                     iv2_data_ptr->uncopied_counter += PACKET_SIZE;
....................                     break;
....................                 default:
....................                     break;
....................             }
.................... 
....................             // デバッグ表示
....................             fprintf(PC, "\r\n");
....................             for (unsigned int32 j = 0; j < PACKET_SIZE; j++) {
....................                 fprintf(PC, "%02X ", packetdata[j]);
....................             }
.................... 
....................             // パケット初期化
....................             packet_index = 0;
....................             memset(packetdata, 0x00, PACKET_SIZE);
....................         }
.................... 
....................         // データ書き込み
....................         packetdata[packet_index++] = (data0 >> 4) & 0xFF;
....................         packetdata[packet_index++] = ((data0 & 0x0F) << 4) | ((data1 >> 8) & 0x0F);
....................         packetdata[packet_index++] = data1 & 0xFF;
....................     }
.................... 
....................     // 最後に残ったデータの処理
....................     if (packet_index > 0) {
....................         for (unsigned int8 j = packet_index; j < PACKET_SIZE - 1; j++) {
....................             packetdata[j] = 0x00;
....................         }
....................         packetdata[PACKET_SIZE - 1] = calc_crc8(packetdata, PACKET_SIZE - 1);
....................       unsigned int32 write_address;
....................         switch (port_data_ptr->port_num)
....................         {
....................         case 1:
....................             write_address = MISF_CIGS_IV1_DATA_START + iv1_data_ptr->used_counter;
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................             iv1_data_ptr->used_counter += PACKET_SIZE;
....................             iv1_data_ptr->uncopied_counter += PACKET_SIZE;
....................             break;
....................         case 2:
....................          write_address = MISF_CIGS_IV2_DATA_START + iv2_data_ptr->used_counter;
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................             iv2_data_ptr->used_counter += PACKET_SIZE;
....................             iv2_data_ptr->uncopied_counter += PACKET_SIZE;
....................             break;
....................         default:
....................             break;
....................         }
.................... 
....................     }
....................                 // デバッグ表示
....................     fprintf(PC, "\r\n");
....................     for (unsigned int32 j = 0; j < PACKET_SIZE; j++) {
....................         fprintf(PC, "%02X ", packetdata[j]);
....................     }
....................     // fprintf(PC, "End CIGS data conversion\r\n");
....................     misf_update_address_area(); // Write the mission flash address area
.................... }
.................... 
.................... 
.................... iv_env_t create_meas_data()
.................... {
....................     iv_env_t data;
....................     memset(&data, 0, sizeof(data));
*
08834:  MOVLW  0A
08836:  MOVWF  FEA
08838:  MOVLW  86
0883A:  MOVWF  FE9
0883C:  CLRF   00
0883E:  CLRF   02
08840:  MOVLW  0C
08842:  MOVWF  01
08844:  CALL   2C62
....................     data.time           = get_current_sec();
08848:  CALL   395E
0884C:  MOVFF  03,A89
08850:  MOVFF  02,A88
08854:  MOVFF  01,A87
08858:  MOVFF  00,A86
....................     data.temp_py_top    = ad7490_read(ADC_TEMP_PY_TOP);
0885C:  MOVLW  0D
0885E:  MOVLB  A
08860:  MOVWF  x92
08862:  MOVLB  0
08864:  CALL   2244
08868:  MOVFF  02,A8D
0886C:  MOVFF  01,A8C
....................     data.temp_py_bot    = ad7490_read(ADC_TEMP_PY_BOT);
08870:  MOVLW  0E
08872:  MOVLB  A
08874:  MOVWF  x92
08876:  MOVLB  0
08878:  CALL   2244
0887C:  MOVFF  02,A8F
08880:  MOVFF  01,A8E
....................     data.temp_mis7      = ad7490_read(ADC_TEMP_MIS7);
08884:  MOVLW  0C
08886:  MOVLB  A
08888:  MOVWF  x92
0888A:  MOVLB  0
0888C:  CALL   2244
08890:  MOVFF  02,A91
08894:  MOVFF  01,A90
....................     data.pd             = ad7490_read(ADC_PD);
08898:  MOVLW  0F
0889A:  MOVLB  A
0889C:  MOVWF  x92
0889E:  MOVLB  0
088A0:  CALL   2244
088A4:  MOVFF  02,A8B
088A8:  MOVFF  01,A8A
....................     return data;
088AC:  MOVLW  86
088AE:  MOVWF  01
088B0:  MOVLW  0A
088B2:  MOVWF  02
088B4:  RETURN 0
.................... }
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data)
.................... {
....................     // ADCの12ビット値を電力密度（mW/cm²）に変換する例
....................     // ここでは仮に1 LSB = 0.1 mW/cm²とする
....................     return (unsigned int16)(data * 0.1);
.................... }
.................... 
.................... unsigned int16 calc_curr_value(unsigned int16 data)
*
0863E:  MOVFF  283,ACC
08642:  MOVFF  282,ACB
08646:  MOVLW  09
08648:  MOVLB  A
0864A:  MOVWF  xCE
0864C:  MOVLW  C4
0864E:  MOVWF  xCD
08650:  MOVLB  0
08652:  CALL   7D8A
08656:  MOVFF  02,28D
0865A:  MOVFF  01,28C
0865E:  MOVFF  28D,28F
08662:  MOVFF  28C,28E
08666:  MOVLW  0F
08668:  MOVLB  2
0866A:  MOVWF  x91
0866C:  SETF   x90
0866E:  MOVLB  0
08670:  GOTO   7DAC
08674:  MOVFF  02,03
08678:  MOVF   01,W
0867A:  MOVLB  2
0867C:  MOVWF  x8C
0867E:  MOVFF  03,28D
08682:  MOVLB  0
08684:  GOTO   7E2A
08688:  MOVFF  03,287
0868C:  MOVFF  02,286
08690:  MOVFF  01,285
08694:  MOVFF  00,284
08698:  BSF    FD8.1
0869A:  MOVLB  2
0869C:  CLRF   x8F
0869E:  MOVLW  40
086A0:  MOVWF  x8E
086A2:  MOVLW  1C
086A4:  MOVWF  x8D
086A6:  MOVLW  89
086A8:  MOVWF  x8C
086AA:  MOVFF  287,293
086AE:  MOVFF  286,292
086B2:  MOVFF  285,291
086B6:  MOVFF  284,290
086BA:  MOVLB  0
086BC:  GOTO   7E70
086C0:  MOVFF  03,28F
086C4:  MOVFF  02,28E
086C8:  MOVFF  01,28D
086CC:  MOVFF  00,28C
086D0:  MOVFF  28F,293
086D4:  MOVFF  28E,292
086D8:  MOVFF  28D,291
086DC:  MOVFF  28C,290
086E0:  MOVLB  2
086E2:  CLRF   x97
086E4:  CLRF   x96
086E6:  MOVLW  20
086E8:  MOVWF  x95
086EA:  MOVLW  83
086EC:  MOVWF  x94
086EE:  MOVLB  0
086F0:  GOTO   831C
086F4:  MOVFF  03,28B
086F8:  MOVFF  02,28A
086FC:  MOVFF  01,289
08700:  MOVFF  00,288
.................... {
....................     float voltage_mv = (float)(data * ADC_REF_VOLTAGE_MV / ADC_MAX_READING); // 12ビットADCの場合
....................     float current_ma = (ADC_CURR_REF_VOLTAGE_MV - voltage_mv) / (SHUNT_RESISTANCE_OHM * AMP_GAIN); // mA単位
....................     return (unsigned int16)current_ma;
08704:  MOVFF  28B,28F
08708:  MOVFF  28A,28E
0870C:  MOVFF  289,28D
08710:  MOVFF  288,28C
08714:  GOTO   85E4
08718:  MOVF   01,W
0871A:  MOVWF  01
0871C:  MOVF   02,W
0871E:  MOVWF  02
08720:  GOTO   87EC (RETURN)
.................... }
.................... // End of file
.................... 
.................... #include "domain/mmj_cigs_piclog.c"
.................... #include "mmj_cigs_piclog.h"                          // 同じフォルダのヘッダー
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/timer.h"                   // タイマーライブラリ  
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... void set_current_sec(unsigned int32 new_sec);
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "mmj_cigs_flash.h"                 // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"               // フラッシュ操作キュー
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                 // フラッシュデバイス
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // #define PICLOG_DEBUG
.................... #define MISSION_ID_PICLOG 0x03  // PICLOGミッションID
.................... 
.................... void piclog_make(int8 function, int8 parameter)
*
04D60:  MOVLW  02
04D62:  MOVLB  2
04D64:  MOVWF  x9E
04D66:  MOVLW  97
04D68:  MOVWF  x9D
.................... {
....................     piclog_t piclog;
....................     piclog_t *piclog_ptr = &piclog;
....................     memset(piclog_ptr, 0x00, PICLOG_PACKET_SIZE);
04D6A:  MOVFF  29E,FEA
04D6E:  MOVFF  29D,FE9
04D72:  CLRF   00
04D74:  CLRF   02
04D76:  MOVLW  06
04D78:  MOVWF  01
04D7A:  MOVLB  0
04D7C:  CALL   2C62
....................     piclog_ptr->fields.time = get_current_sec();
04D80:  MOVLB  2
04D82:  MOVF   x9D,W
04D84:  MOVWF  01
04D86:  MOVF   x9E,W
04D88:  MOVWF  03
04D8A:  MOVF   01,W
04D8C:  MOVWF  xA0
04D8E:  MOVFF  03,2A1
04D92:  MOVLB  0
04D94:  CALL   395E
04D98:  MOVFF  2A1,FEA
04D9C:  MOVFF  2A0,FE9
04DA0:  MOVFF  00,FEF
04DA4:  MOVFF  01,FEC
04DA8:  MOVFF  02,FEC
04DAC:  MOVFF  03,FEC
04DB0:  MOVF   FED,F
04DB2:  MOVF   FED,F
04DB4:  MOVF   FED,F
....................     piclog_ptr->fields.function = function;
04DB6:  MOVLW  04
04DB8:  MOVLB  2
04DBA:  ADDWF  x9D,W
04DBC:  MOVWF  FE9
04DBE:  MOVLW  00
04DC0:  ADDWFC x9E,W
04DC2:  MOVWF  FEA
04DC4:  MOVFF  295,FEF
....................     piclog_ptr->fields.parameter = parameter;
04DC8:  MOVLW  05
04DCA:  ADDWF  x9D,W
04DCC:  MOVWF  FE9
04DCE:  MOVLW  00
04DD0:  ADDWFC x9E,W
04DD2:  MOVWF  FEA
04DD4:  MOVFF  296,FEF
.................... 
....................     printf("[PICLOG] : ");
04DD8:  MOVLW  A0
04DDA:  MOVWF  FF6
04DDC:  MOVLW  06
04DDE:  MOVWF  FF7
04DE0:  MOVLW  00
04DE2:  MOVWF  FF8
04DE4:  MOVLB  0
04DE6:  CALL   2084
....................     for (int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
04DEA:  MOVLB  2
04DEC:  CLRF   x9F
04DEE:  MOVLB  0
04DF0:  MOVLB  2
04DF2:  MOVF   x9F,W
04DF4:  SUBLW  05
04DF6:  BTFSC  FD8.0
04DF8:  BRA    4E00
04DFA:  MOVLB  0
04DFC:  GOTO   4E3C
04E00:  MOVLB  0
....................         printf("%02X ", piclog_ptr->bytes[i]);
04E02:  MOVLB  2
04E04:  MOVF   x9F,W
04E06:  ADDWF  x9D,W
04E08:  MOVWF  FE9
04E0A:  MOVLW  00
04E0C:  ADDWFC x9E,W
04E0E:  MOVWF  FEA
04E10:  MOVFF  FEF,2A0
04E14:  MOVFF  2A0,A77
04E18:  MOVLW  37
04E1A:  MOVLB  A
04E1C:  MOVWF  x78
04E1E:  MOVLB  0
04E20:  CALL   22D0
04E24:  MOVLW  20
04E26:  BTFSS  FA6.6
04E28:  GOTO   4E26
04E2C:  MOVLB  E
04E2E:  MOVWF  xF9
04E30:  MOVLB  0
04E32:  MOVLB  2
04E34:  INCF   x9F,F
04E36:  MOVLB  0
04E38:  GOTO   4DF0
....................     }
....................     printf("\r\n");
04E3C:  MOVLW  0D
04E3E:  BTFSS  FA6.6
04E40:  GOTO   4E3E
04E44:  MOVLB  E
04E46:  MOVWF  xF9
04E48:  MOVLW  0A
04E4A:  MOVLB  0
04E4C:  BTFSS  FA6.6
04E4E:  GOTO   4E4C
04E52:  MOVLB  E
04E54:  MOVWF  xF9
.................... 
....................     misf_write_data(FLASH_ID_PICLOG, piclog_ptr->bytes, PICLOG_PACKET_SIZE);
04E56:  MOVLB  2
04E58:  MOVF   x9D,W
04E5A:  MOVWF  01
04E5C:  MOVF   x9E,W
04E5E:  MOVWF  03
04E60:  MOVF   01,W
04E62:  MOVWF  xA0
04E64:  MOVFF  03,2A1
04E68:  MOVLW  01
04E6A:  MOVLB  A
04E6C:  MOVWF  xCD
04E6E:  MOVFF  2A1,ACF
04E72:  MOVFF  2A0,ACE
04E76:  CLRF   xD1
04E78:  MOVLW  06
04E7A:  MOVWF  xD0
04E7C:  MOVLB  0
04E7E:  CALL   4546
04E82:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "domain/mmj_cigs_smf.c"
.................... #include "mmj_cigs_smf.h"  
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../hal/mmj_cigs_config.h" // int8,int32 型など(CCS C) 依存
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=2000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=2000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=1000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=2000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_flash.h"       // MISF_ADDRESS_TABLE, misf_counter_table 依存
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int8 loop_counter;
....................     int8 reserved[3];
.................... } SMF_PARTITION;
.................... 
.................... // パーティション管理構造体
.................... typedef struct {
....................     SMF_PARTITION piclog;     // データテーブル領域は利用しないため削除
....................     SMF_PARTITION env;
....................     SMF_PARTITION iv1_header;
....................     SMF_PARTITION iv1_data;
....................     SMF_PARTITION iv2_header;
....................     SMF_PARTITION iv2_data;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... extern PartitionParam param;  // extern宣言に変更
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         SMF_PARTITION headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table);
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "mmj_cigs_flash.h"
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mt25q.h"              // Flash device definitions
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/tool/smf_queue.h"            // システム設定 
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/tool/calc_tools.h"           // SMF処理関数 
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/mmj_smf_memorymap.h" 
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x06AA1FFF
.................... #define CIGS_ENVIRO_START_ADDRESS 0x06AA2000
.................... #define CIGS_ENVIRO_END_ADDRESS 0x06B41FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS 0x06B42000
.................... #define CIGS_IV1_HEADER_END_ADDRESS 0x06BE1FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS 0x06BE2000
.................... #define CIGS_IV1_DATA_END_ADDRESS 0x06FE2FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS 0x06FE3000
.................... #define CIGS_IV2_HEADER_END_ADDRESS 0x07082FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS 0x07083000
.................... #define CIGS_IV2_DATA_END_ADDRESS 0x07483FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... #define CRC_RETRY_COUNT 5     // CRC検証のリトライ回数 (smf_queue.hの値と整合するなら一元化検討)
.................... 
.................... 
.................... 
.................... PartitionParam param = {0};
.................... 
.................... 
.................... const ADDRESS_AREA_T SMF_ADDRESS_TABLE[FLASH_ID_COUNT] = {
....................     { CIGS_DATA_TABLE_START_ADDRESS,   CIGS_DATA_TABLE_END_ADDRESS,   MISF_CIGS_DATA_TABLE_SIZE },
....................     { CIGS_PICLOG_START_ADDRESS,       CIGS_PICLOG_END_ADDRESS,       MISF_CIGS_PICLOG_SIZE },
....................     { CIGS_ENVIRO_START_ADDRESS,       CIGS_ENVIRO_END_ADDRESS,       MISF_CIGS_ENVIRO_SIZE },
....................     { CIGS_IV1_HEADER_START_ADDRESS,   CIGS_IV1_HEADER_END_ADDRESS,   MISF_CIGS_IV1_HEADER_SIZE },
....................     { CIGS_IV1_DATA_START_ADDRESS,     CIGS_IV1_DATA_END_ADDRESS,     MISF_CIGS_IV1_DATA_SIZE },
....................     { CIGS_IV2_HEADER_START_ADDRESS,   CIGS_IV2_HEADER_END_ADDRESS,   MISF_CIGS_IV2_HEADER_SIZE },
....................     { CIGS_IV2_DATA_START_ADDRESS,     CIGS_IV2_DATA_END_ADDRESS,     MISF_CIGS_IV2_DATA_SIZE }
.................... };
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void smf_data_table_init()
.................... {
....................     fprintf(PC, "SMF Data Table Initialize\r\n");
*
075B6:  MOVLW  AC
075B8:  MOVWF  FF6
075BA:  MOVLW  06
075BC:  MOVWF  FF7
075BE:  MOVLW  00
075C0:  MOVWF  FF8
075C2:  CALL   2084
....................     for ( unsigned int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_IV2_DATA_END_ADDRESS; address += SUBSECTOR_SIZE )
075C6:  MOVLW  06
075C8:  MOVLB  2
075CA:  MOVWF  xDF
075CC:  MOVLW  AA
075CE:  MOVWF  xDE
075D0:  CLRF   xDD
075D2:  CLRF   xDC
075D4:  MOVLB  0
075D6:  MOVLB  2
075D8:  MOVF   xDF,W
075DA:  SUBLW  07
075DC:  BTFSC  FD8.0
075DE:  BRA    75E6
075E0:  MOVLB  0
075E2:  GOTO   7668
075E6:  MOVLB  0
075E8:  BTFSS  FD8.2
075EA:  GOTO   7630
075EE:  MOVLB  2
075F0:  MOVF   xDE,W
075F2:  SUBLW  48
075F4:  BTFSC  FD8.0
075F6:  BRA    75FE
075F8:  MOVLB  0
075FA:  GOTO   7668
075FE:  MOVLB  0
07600:  BTFSS  FD8.2
07602:  GOTO   7630
07606:  MOVLB  2
07608:  MOVF   xDD,W
0760A:  SUBLW  3F
0760C:  BTFSC  FD8.0
0760E:  BRA    7616
07610:  MOVLB  0
07612:  GOTO   7668
07616:  MOVLB  0
07618:  BTFSS  FD8.2
0761A:  GOTO   7630
0761E:  MOVLB  2
07620:  MOVF   xDC,W
07622:  SUBLW  FE
07624:  BTFSC  FD8.0
07626:  BRA    762E
07628:  MOVLB  0
0762A:  GOTO   7668
0762E:  MOVLB  0
....................     {
....................         subsector_4kByte_erase(smf, address);
07630:  MOVFF  119,323
07634:  MOVFF  118,322
07638:  MOVFF  117,321
0763C:  MOVFF  116,320
07640:  MOVFF  2DF,327
07644:  MOVFF  2DE,326
07648:  MOVFF  2DD,325
0764C:  MOVFF  2DC,324
07650:  CALL   57FA
07654:  MOVLW  10
07656:  MOVLB  2
07658:  ADDWF  xDD,F
0765A:  MOVLW  00
0765C:  ADDWFC xDE,F
0765E:  MOVLW  00
07660:  ADDWFC xDF,F
07662:  MOVLB  0
07664:  GOTO   75D6
....................     }
....................     smf_data_table_t smf_data_table = {0};
07668:  MOVLB  2
0766A:  CLRF   xE0
0766C:  CLRF   xE1
0766E:  CLRF   xE2
07670:  CLRF   xE3
07672:  CLRF   xE4
07674:  CLRF   xE5
07676:  CLRF   xE6
07678:  CLRF   xE7
0767A:  CLRF   xE8
0767C:  CLRF   xE9
0767E:  CLRF   xEA
07680:  CLRF   xEB
07682:  CLRF   xEC
07684:  CLRF   xED
07686:  CLRF   xEE
07688:  CLRF   xEF
0768A:  CLRF   xF0
0768C:  CLRF   xF1
0768E:  CLRF   xF2
07690:  CLRF   xF3
07692:  CLRF   xF4
07694:  CLRF   xF5
07696:  CLRF   xF6
07698:  CLRF   xF7
0769A:  CLRF   xF8
0769C:  CLRF   xF9
0769E:  CLRF   xFA
076A0:  CLRF   xFB
076A2:  CLRF   xFC
076A4:  CLRF   xFD
076A6:  CLRF   xFE
076A8:  CLRF   xFF
076AA:  MOVLB  3
076AC:  CLRF   x00
076AE:  CLRF   x01
076B0:  CLRF   x02
076B2:  CLRF   x03
076B4:  CLRF   x04
076B6:  CLRF   x05
076B8:  CLRF   x06
076BA:  CLRF   x07
076BC:  CLRF   x08
076BE:  CLRF   x09
076C0:  CLRF   x0A
076C2:  CLRF   x0B
076C4:  CLRF   x0C
076C6:  CLRF   x0D
076C8:  CLRF   x0E
076CA:  CLRF   x0F
076CC:  CLRF   x10
076CE:  CLRF   x11
076D0:  CLRF   x12
076D2:  CLRF   x13
076D4:  CLRF   x14
076D6:  CLRF   x15
076D8:  CLRF   x16
076DA:  CLRF   x17
076DC:  CLRF   x18
076DE:  CLRF   x19
076E0:  CLRF   x1A
076E2:  CLRF   x1B
076E4:  CLRF   x1C
076E6:  CLRF   x1D
076E8:  CLRF   x1E
076EA:  CLRF   x1F
....................     smf_data_table.fields.crc = calc_crc8(smf_data_table.bytes, PACKET_SIZE - 1); // CRCを計算して初期化    
076EC:  MOVLW  02
076EE:  MOVLB  B
076F0:  MOVWF  xF3
076F2:  MOVLW  E0
076F4:  MOVWF  xF2
076F6:  MOVLW  3F
076F8:  MOVWF  xF4
076FA:  MOVLB  0
076FC:  CALL   2E9A
07700:  MOVFF  01,31F
....................     write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table.bytes, PACKET_SIZE);
07704:  MOVFF  119,BAB
07708:  MOVFF  118,BAA
0770C:  MOVFF  117,BA9
07710:  MOVFF  116,BA8
07714:  MOVLW  06
07716:  MOVLB  B
07718:  MOVWF  xAF
0771A:  MOVLW  AA
0771C:  MOVWF  xAE
0771E:  CLRF   xAD
07720:  CLRF   xAC
07722:  MOVLW  02
07724:  MOVWF  xB1
07726:  MOVLW  E0
07728:  MOVWF  xB0
0772A:  CLRF   xB3
0772C:  MOVLW  40
0772E:  MOVWF  xB2
07730:  MOVLB  0
07732:  CALL   3C7C
07736:  RETURN 0
.................... }
.................... 
.................... void read_smf_header(smf_data_table_t *smf_data_table)
.................... {
....................     int8 retry_count;
.................... 
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
*
0F214:  MOVLB  2
0F216:  CLRF   xDB
0F218:  MOVLB  0
0F21A:  MOVLB  2
0F21C:  MOVF   xDB,W
0F21E:  SUBLW  04
0F220:  BTFSC  FD8.0
0F222:  BRA    F22A
0F224:  MOVLB  0
0F226:  GOTO   F314
0F22A:  MOVLB  0
....................     {
....................         // ヘッダを読み出し
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
0F22C:  MOVLB  2
0F22E:  MOVF   xD9,W
0F230:  MOVWF  01
0F232:  MOVF   xDA,W
0F234:  MOVWF  03
0F236:  MOVF   01,W
0F238:  MOVWF  xDC
0F23A:  MOVFF  03,2DD
0F23E:  MOVFF  119,B67
0F242:  MOVFF  118,B66
0F246:  MOVFF  117,B65
0F24A:  MOVFF  116,B64
0F24E:  MOVLW  06
0F250:  MOVLB  B
0F252:  MOVWF  x6B
0F254:  MOVLW  AA
0F256:  MOVWF  x6A
0F258:  CLRF   x69
0F25A:  CLRF   x68
0F25C:  MOVFF  2DD,B6D
0F260:  MOVFF  2DC,B6C
0F264:  CLRF   x71
0F266:  CLRF   x70
0F268:  CLRF   x6F
0F26A:  MOVLW  40
0F26C:  MOVWF  x6E
0F26E:  MOVLB  0
0F270:  CALL   2C86
....................         print_smf_counter_status(smf_data_table);
0F274:  MOVFF  2DA,2DD
0F278:  MOVFF  2D9,2DC
0F27C:  GOTO   EC86
....................         // CRC検証
....................         if (is_crc_valid(smf_data_table->bytes, PACKET_SIZE-1))
0F280:  MOVLB  2
0F282:  MOVF   xD9,W
0F284:  MOVWF  01
0F286:  MOVF   xDA,W
0F288:  MOVWF  03
0F28A:  MOVF   01,W
0F28C:  MOVWF  xDC
0F28E:  MOVFF  03,2DD
0F292:  MOVFF  2DD,31E
0F296:  MOVFF  2DC,31D
0F29A:  MOVLW  3F
0F29C:  MOVLB  3
0F29E:  MOVWF  x1F
0F2A0:  MOVLB  0
0F2A2:  CALL   F090
0F2A6:  MOVF   01,F
0F2A8:  BTFSC  FD8.2
0F2AA:  GOTO   F2FE
....................         {
....................             printf("CRC verification passed on attempt %d\r\n", retry_count + 1);
0F2AE:  MOVLW  01
0F2B0:  MOVLB  2
0F2B2:  ADDWF  xDB,W
0F2B4:  MOVWF  xDC
0F2B6:  MOVLW  C8
0F2B8:  MOVWF  FF6
0F2BA:  MOVLW  06
0F2BC:  MOVWF  FF7
0F2BE:  MOVLW  00
0F2C0:  MOVWF  FF8
0F2C2:  MOVLW  23
0F2C4:  MOVLB  3
0F2C6:  MOVWF  x1E
0F2C8:  MOVLB  0
0F2CA:  CALL   20BA
0F2CE:  MOVFF  2DC,31E
0F2D2:  MOVLW  18
0F2D4:  MOVLB  3
0F2D6:  MOVWF  x1F
0F2D8:  MOVLB  0
0F2DA:  CALL   F0DE
0F2DE:  MOVLW  0D
0F2E0:  BTFSS  FA6.6
0F2E2:  GOTO   F2E0
0F2E6:  MOVLB  E
0F2E8:  MOVWF  xF9
0F2EA:  MOVLW  0A
0F2EC:  MOVLB  0
0F2EE:  BTFSS  FA6.6
0F2F0:  GOTO   F2EE
0F2F4:  MOVLB  E
0F2F6:  MOVWF  xF9
....................             return; // 成功したら終了
0F2F8:  MOVLB  0
0F2FA:  GOTO   F3A0
....................         }
....................         // NGなら少し待って再試行
....................         delay_ms(5);
0F2FE:  MOVLW  05
0F300:  MOVLB  B
0F302:  MOVWF  xC0
0F304:  MOVLB  0
0F306:  CALL   2056
0F30A:  MOVLB  2
0F30C:  INCF   xDB,F
0F30E:  MOVLB  0
0F310:  GOTO   F21A
....................     }
.................... 
....................     // ここまで来たら失敗
....................     printf("CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
0F314:  MOVLW  F0
0F316:  MOVWF  FF6
0F318:  MOVLW  06
0F31A:  MOVWF  FF7
0F31C:  MOVLW  00
0F31E:  MOVWF  FF8
0F320:  MOVLW  1E
0F322:  MOVLB  3
0F324:  MOVWF  x1E
0F326:  MOVLB  0
0F328:  CALL   20BA
0F32C:  MOVLW  05
0F32E:  MOVLB  3
0F330:  MOVWF  x1E
0F332:  MOVLW  18
0F334:  MOVWF  x1F
0F336:  MOVLB  0
0F338:  CALL   F0DE
0F33C:  MOVLW  10
0F33E:  MOVWF  FF6
0F340:  MOVLW  07
0F342:  MOVWF  FF7
0F344:  MOVLW  00
0F346:  MOVWF  FF8
0F348:  MOVLW  0B
0F34A:  MOVLB  3
0F34C:  MOVWF  x1E
0F34E:  MOVLB  0
0F350:  CALL   20BA
.................... 
....................     // 読み込み失敗時は初期化しておく
....................     smf_data_table_init();
0F354:  CALL   75B6
....................     read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
0F358:  MOVLB  2
0F35A:  MOVF   xD9,W
0F35C:  MOVWF  01
0F35E:  MOVF   xDA,W
0F360:  MOVWF  03
0F362:  MOVF   01,W
0F364:  MOVWF  xDC
0F366:  MOVFF  03,2DD
0F36A:  MOVFF  119,B67
0F36E:  MOVFF  118,B66
0F372:  MOVFF  117,B65
0F376:  MOVFF  116,B64
0F37A:  MOVLW  06
0F37C:  MOVLB  B
0F37E:  MOVWF  x6B
0F380:  MOVLW  AA
0F382:  MOVWF  x6A
0F384:  CLRF   x69
0F386:  CLRF   x68
0F388:  MOVFF  2DD,B6D
0F38C:  MOVFF  2DC,B6C
0F390:  CLRF   x71
0F392:  CLRF   x70
0F394:  CLRF   x6F
0F396:  MOVLW  40
0F398:  MOVWF  x6E
0F39A:  MOVLB  0
0F39C:  CALL   2C86
.................... 
....................     return;
0F3A0:  GOTO   10090 (RETURN)
.................... }
.................... 
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table)
0F3A4:  MOVLB  2
0F3A6:  BCF    xDB.0
.................... {
....................     int1 crc_valid = 0;
....................     int8 readdata[PACKET_SIZE];
....................     smf_data_table->fields.crc = calc_crc8(smf_data_table->bytes, PACKET_SIZE - 1); // CRCを更新
0F3A8:  MOVLW  3F
0F3AA:  ADDWF  xD9,W
0F3AC:  MOVWF  01
0F3AE:  MOVLW  00
0F3B0:  ADDWFC xDA,W
0F3B2:  MOVWF  03
0F3B4:  MOVF   01,W
0F3B6:  MOVLB  3
0F3B8:  MOVWF  x1D
0F3BA:  MOVFF  03,31E
0F3BE:  MOVLB  2
0F3C0:  MOVF   xD9,W
0F3C2:  MOVWF  01
0F3C4:  MOVF   xDA,W
0F3C6:  MOVWF  03
0F3C8:  MOVF   01,W
0F3CA:  MOVLB  3
0F3CC:  MOVWF  x1F
0F3CE:  MOVFF  03,320
0F3D2:  MOVFF  320,BF3
0F3D6:  MOVFF  31F,BF2
0F3DA:  MOVLW  3F
0F3DC:  MOVLB  B
0F3DE:  MOVWF  xF4
0F3E0:  MOVLB  0
0F3E2:  CALL   2E9A
0F3E6:  MOVFF  31E,FEA
0F3EA:  MOVFF  31D,FE9
0F3EE:  MOVFF  01,FEF
.................... 
....................     for (int8 retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
0F3F2:  MOVLB  3
0F3F4:  CLRF   x1C
0F3F6:  MOVLB  0
0F3F8:  MOVLB  3
0F3FA:  MOVF   x1C,W
0F3FC:  SUBLW  04
0F3FE:  BTFSC  FD8.0
0F400:  BRA    F408
0F402:  MOVLB  0
0F404:  GOTO   F522
0F408:  MOVLB  0
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
0F40A:  MOVFF  119,323
0F40E:  MOVFF  118,322
0F412:  MOVFF  117,321
0F416:  MOVFF  116,320
0F41A:  MOVLW  06
0F41C:  MOVLB  3
0F41E:  MOVWF  x27
0F420:  MOVLW  AA
0F422:  MOVWF  x26
0F424:  CLRF   x25
0F426:  CLRF   x24
0F428:  MOVLB  0
0F42A:  CALL   57FA
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE); // ヘッダーを書き込み
0F42E:  MOVLB  2
0F430:  MOVF   xD9,W
0F432:  MOVWF  01
0F434:  MOVF   xDA,W
0F436:  MOVWF  03
0F438:  MOVF   01,W
0F43A:  MOVLB  3
0F43C:  MOVWF  x1D
0F43E:  MOVFF  03,31E
0F442:  MOVFF  119,BAB
0F446:  MOVFF  118,BAA
0F44A:  MOVFF  117,BA9
0F44E:  MOVFF  116,BA8
0F452:  MOVLW  06
0F454:  MOVLB  B
0F456:  MOVWF  xAF
0F458:  MOVLW  AA
0F45A:  MOVWF  xAE
0F45C:  CLRF   xAD
0F45E:  CLRF   xAC
0F460:  MOVFF  31E,BB1
0F464:  MOVFF  31D,BB0
0F468:  CLRF   xB3
0F46A:  MOVLW  40
0F46C:  MOVWF  xB2
0F46E:  MOVLB  0
0F470:  CALL   3C7C
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
0F474:  MOVFF  119,B67
0F478:  MOVFF  118,B66
0F47C:  MOVFF  117,B65
0F480:  MOVFF  116,B64
0F484:  MOVLW  06
0F486:  MOVLB  B
0F488:  MOVWF  x6B
0F48A:  MOVLW  AA
0F48C:  MOVWF  x6A
0F48E:  CLRF   x69
0F490:  CLRF   x68
0F492:  MOVLW  02
0F494:  MOVWF  x6D
0F496:  MOVLW  DC
0F498:  MOVWF  x6C
0F49A:  CLRF   x71
0F49C:  CLRF   x70
0F49E:  CLRF   x6F
0F4A0:  MOVLW  40
0F4A2:  MOVWF  x6E
0F4A4:  MOVLB  0
0F4A6:  CALL   2C86
....................         if (is_crc_valid(readdata, PACKET_SIZE-1))
0F4AA:  MOVLW  02
0F4AC:  MOVLB  3
0F4AE:  MOVWF  x1E
0F4B0:  MOVLW  DC
0F4B2:  MOVWF  x1D
0F4B4:  MOVLW  3F
0F4B6:  MOVWF  x1F
0F4B8:  MOVLB  0
0F4BA:  CALL   F090
0F4BE:  MOVF   01,F
0F4C0:  BTFSC  FD8.2
0F4C2:  GOTO   F518
....................         {
....................             crc_valid = 1; // FIX
0F4C6:  MOVLB  2
0F4C8:  BSF    xDB.0
....................             fprintf(PC, "CRC verification passed on attempt %d\r\n", retry_count + 1);
0F4CA:  MOVLW  01
0F4CC:  MOVLB  3
0F4CE:  ADDWF  x1C,W
0F4D0:  MOVWF  x1D
0F4D2:  MOVLW  1C
0F4D4:  MOVWF  FF6
0F4D6:  MOVLW  07
0F4D8:  MOVWF  FF7
0F4DA:  MOVLW  00
0F4DC:  MOVWF  FF8
0F4DE:  MOVLW  23
0F4E0:  MOVWF  x1E
0F4E2:  MOVLB  0
0F4E4:  CALL   20BA
0F4E8:  MOVFF  31D,31E
0F4EC:  MOVLW  18
0F4EE:  MOVLB  3
0F4F0:  MOVWF  x1F
0F4F2:  MOVLB  0
0F4F4:  CALL   F0DE
0F4F8:  MOVLW  0D
0F4FA:  BTFSS  FA6.6
0F4FC:  GOTO   F4FA
0F500:  MOVLB  E
0F502:  MOVWF  xF9
0F504:  MOVLW  0A
0F506:  MOVLB  0
0F508:  BTFSS  FA6.6
0F50A:  GOTO   F508
0F50E:  MOVLB  E
0F510:  MOVWF  xF9
....................             break;
0F512:  MOVLB  0
0F514:  GOTO   F522
....................         }
0F518:  MOVLB  3
0F51A:  INCF   x1C,F
0F51C:  MOVLB  0
0F51E:  GOTO   F3F8
....................     }
....................     if (!crc_valid)
0F522:  MOVLB  2
0F524:  BTFSS  xDB.0
0F526:  BRA    F52E
0F528:  MOVLB  0
0F52A:  GOTO   F570
0F52E:  MOVLB  0
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
0F530:  MOVLW  44
0F532:  MOVWF  FF6
0F534:  MOVLW  07
0F536:  MOVWF  FF7
0F538:  MOVLW  00
0F53A:  MOVWF  FF8
0F53C:  MOVLW  25
0F53E:  MOVLB  3
0F540:  MOVWF  x1E
0F542:  MOVLB  0
0F544:  CALL   20BA
0F548:  MOVLW  05
0F54A:  MOVLB  3
0F54C:  MOVWF  x1E
0F54E:  MOVLW  18
0F550:  MOVWF  x1F
0F552:  MOVLB  0
0F554:  CALL   F0DE
0F558:  MOVLW  6B
0F55A:  MOVWF  FF6
0F55C:  MOVLW  07
0F55E:  MOVWF  FF7
0F560:  MOVLW  00
0F562:  MOVWF  FF8
0F564:  MOVLW  0B
0F566:  MOVLB  3
0F568:  MOVWF  x1E
0F56A:  MOVLB  0
0F56C:  CALL   20BA
....................         // return; 
....................     }
0F570:  GOTO   10AE0 (RETURN)
.................... }
.................... 
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table)
.................... {
....................     fprintf(PC, "\r\n[SMF Counter Status]\r\n");
*
0EC86:  MOVLW  78
0EC88:  MOVWF  FF6
0EC8A:  MOVLW  07
0EC8C:  MOVWF  FF7
0EC8E:  MOVLW  00
0EC90:  MOVWF  FF8
0EC92:  CALL   2084
....................     fprintf(PC, "PICLOG     : Used=%lu, Uncopied=%u\r\n", smf_data_table->fields.headers[CIGS_PICLOG_DATA].used_size, smf_data_table->fields.headers[CIGS_PICLOG_DATA].loop_counter);
0EC96:  MOVLW  08
0EC98:  MOVLB  2
0EC9A:  ADDWF  xDC,W
0EC9C:  MOVWF  FE9
0EC9E:  MOVLW  00
0ECA0:  ADDWFC xDD,W
0ECA2:  MOVWF  FEA
0ECA4:  MOVFF  FEF,2DE
0ECA8:  MOVFF  FEC,2DF
0ECAC:  MOVFF  FEC,2E0
0ECB0:  MOVFF  FEC,2E1
0ECB4:  MOVF   FED,F
0ECB6:  MOVF   FED,F
0ECB8:  MOVF   FED,F
0ECBA:  MOVLW  0C
0ECBC:  ADDWF  xDC,W
0ECBE:  MOVWF  FE9
0ECC0:  MOVLW  00
0ECC2:  ADDWFC xDD,W
0ECC4:  MOVWF  FEA
0ECC6:  MOVFF  FEF,2E2
0ECCA:  MOVLW  92
0ECCC:  MOVWF  FF6
0ECCE:  MOVLW  07
0ECD0:  MOVWF  FF7
0ECD2:  MOVLW  00
0ECD4:  MOVWF  FF8
0ECD6:  MOVLW  12
0ECD8:  MOVLB  3
0ECDA:  MOVWF  x1E
0ECDC:  MOVLB  0
0ECDE:  CALL   20BA
0ECE2:  MOVLW  41
0ECE4:  MOVWF  FE9
0ECE6:  MOVFF  2E1,2E6
0ECEA:  MOVFF  2E0,2E5
0ECEE:  MOVFF  2DF,2E4
0ECF2:  MOVFF  2DE,2E3
0ECF6:  CALL   5F3C
0ECFA:  MOVLW  A7
0ECFC:  MOVWF  FF6
0ECFE:  MOVLW  07
0ED00:  MOVWF  FF7
0ED02:  MOVLW  00
0ED04:  MOVWF  FF8
0ED06:  MOVLW  0B
0ED08:  MOVLB  3
0ED0A:  MOVWF  x1E
0ED0C:  MOVLB  0
0ED0E:  CALL   20BA
0ED12:  MOVFF  2E2,2E3
0ED16:  MOVLW  1B
0ED18:  MOVLB  2
0ED1A:  MOVWF  xE4
0ED1C:  MOVLB  0
0ED1E:  CALL   E420
0ED22:  MOVLW  0D
0ED24:  BTFSS  FA6.6
0ED26:  GOTO   ED24
0ED2A:  MOVLB  E
0ED2C:  MOVWF  xF9
0ED2E:  MOVLW  0A
0ED30:  MOVLB  0
0ED32:  BTFSS  FA6.6
0ED34:  GOTO   ED32
0ED38:  MOVLB  E
0ED3A:  MOVWF  xF9
....................     fprintf(PC, "ENVIRO     : Used=%lu, Uncopied=%u\r\n", smf_data_table->fields.headers[CIGS_ENVIRO_DATA].used_size, smf_data_table->fields.headers[CIGS_ENVIRO_DATA].loop_counter);
0ED3C:  MOVLW  10
0ED3E:  MOVLB  2
0ED40:  ADDWF  xDC,W
0ED42:  MOVWF  FE9
0ED44:  MOVLW  00
0ED46:  ADDWFC xDD,W
0ED48:  MOVWF  FEA
0ED4A:  MOVFF  FEF,2DE
0ED4E:  MOVFF  FEC,2DF
0ED52:  MOVFF  FEC,2E0
0ED56:  MOVFF  FEC,2E1
0ED5A:  MOVF   FED,F
0ED5C:  MOVF   FED,F
0ED5E:  MOVF   FED,F
0ED60:  MOVLW  14
0ED62:  ADDWF  xDC,W
0ED64:  MOVWF  FE9
0ED66:  MOVLW  00
0ED68:  ADDWFC xDD,W
0ED6A:  MOVWF  FEA
0ED6C:  MOVFF  FEF,2E2
0ED70:  MOVLW  B8
0ED72:  MOVWF  FF6
0ED74:  MOVLW  07
0ED76:  MOVWF  FF7
0ED78:  MOVLW  00
0ED7A:  MOVWF  FF8
0ED7C:  MOVLW  12
0ED7E:  MOVLB  3
0ED80:  MOVWF  x1E
0ED82:  MOVLB  0
0ED84:  CALL   20BA
0ED88:  MOVLW  41
0ED8A:  MOVWF  FE9
0ED8C:  MOVFF  2E1,2E6
0ED90:  MOVFF  2E0,2E5
0ED94:  MOVFF  2DF,2E4
0ED98:  MOVFF  2DE,2E3
0ED9C:  CALL   5F3C
0EDA0:  MOVLW  CD
0EDA2:  MOVWF  FF6
0EDA4:  MOVLW  07
0EDA6:  MOVWF  FF7
0EDA8:  MOVLW  00
0EDAA:  MOVWF  FF8
0EDAC:  MOVLW  0B
0EDAE:  MOVLB  3
0EDB0:  MOVWF  x1E
0EDB2:  MOVLB  0
0EDB4:  CALL   20BA
0EDB8:  MOVFF  2E2,2E3
0EDBC:  MOVLW  1B
0EDBE:  MOVLB  2
0EDC0:  MOVWF  xE4
0EDC2:  MOVLB  0
0EDC4:  CALL   E420
0EDC8:  MOVLW  0D
0EDCA:  BTFSS  FA6.6
0EDCC:  GOTO   EDCA
0EDD0:  MOVLB  E
0EDD2:  MOVWF  xF9
0EDD4:  MOVLW  0A
0EDD6:  MOVLB  0
0EDD8:  BTFSS  FA6.6
0EDDA:  GOTO   EDD8
0EDDE:  MOVLB  E
0EDE0:  MOVWF  xF9
....................     fprintf(PC, "IV1_HEADER : Used=%lu, Uncopied=%u\r\n", smf_data_table->fields.headers[CIGS_IV1_HEADER].used_size, smf_data_table->fields.headers[CIGS_IV1_HEADER].loop_counter);
0EDE2:  MOVLW  18
0EDE4:  MOVLB  2
0EDE6:  ADDWF  xDC,W
0EDE8:  MOVWF  FE9
0EDEA:  MOVLW  00
0EDEC:  ADDWFC xDD,W
0EDEE:  MOVWF  FEA
0EDF0:  MOVFF  FEF,2DE
0EDF4:  MOVFF  FEC,2DF
0EDF8:  MOVFF  FEC,2E0
0EDFC:  MOVFF  FEC,2E1
0EE00:  MOVF   FED,F
0EE02:  MOVF   FED,F
0EE04:  MOVF   FED,F
0EE06:  MOVLW  1C
0EE08:  ADDWF  xDC,W
0EE0A:  MOVWF  FE9
0EE0C:  MOVLW  00
0EE0E:  ADDWFC xDD,W
0EE10:  MOVWF  FEA
0EE12:  MOVFF  FEF,2E2
0EE16:  MOVLW  DE
0EE18:  MOVWF  FF6
0EE1A:  MOVLW  07
0EE1C:  MOVWF  FF7
0EE1E:  MOVLW  00
0EE20:  MOVWF  FF8
0EE22:  MOVLW  12
0EE24:  MOVLB  3
0EE26:  MOVWF  x1E
0EE28:  MOVLB  0
0EE2A:  CALL   20BA
0EE2E:  MOVLW  41
0EE30:  MOVWF  FE9
0EE32:  MOVFF  2E1,2E6
0EE36:  MOVFF  2E0,2E5
0EE3A:  MOVFF  2DF,2E4
0EE3E:  MOVFF  2DE,2E3
0EE42:  CALL   5F3C
0EE46:  MOVLW  F3
0EE48:  MOVWF  FF6
0EE4A:  MOVLW  07
0EE4C:  MOVWF  FF7
0EE4E:  MOVLW  00
0EE50:  MOVWF  FF8
0EE52:  MOVLW  0B
0EE54:  MOVLB  3
0EE56:  MOVWF  x1E
0EE58:  MOVLB  0
0EE5A:  CALL   20BA
0EE5E:  MOVFF  2E2,2E3
0EE62:  MOVLW  1B
0EE64:  MOVLB  2
0EE66:  MOVWF  xE4
0EE68:  MOVLB  0
0EE6A:  CALL   E420
0EE6E:  MOVLW  0D
0EE70:  BTFSS  FA6.6
0EE72:  GOTO   EE70
0EE76:  MOVLB  E
0EE78:  MOVWF  xF9
0EE7A:  MOVLW  0A
0EE7C:  MOVLB  0
0EE7E:  BTFSS  FA6.6
0EE80:  GOTO   EE7E
0EE84:  MOVLB  E
0EE86:  MOVWF  xF9
....................     fprintf(PC, "IV1_DATA   : Used=%lu, Uncopied=%u\r\n", smf_data_table->fields.headers[CIGS_IV1_DATA].used_size, smf_data_table->fields.headers[CIGS_IV1_DATA].loop_counter);
0EE88:  MOVLW  20
0EE8A:  MOVLB  2
0EE8C:  ADDWF  xDC,W
0EE8E:  MOVWF  FE9
0EE90:  MOVLW  00
0EE92:  ADDWFC xDD,W
0EE94:  MOVWF  FEA
0EE96:  MOVFF  FEF,2DE
0EE9A:  MOVFF  FEC,2DF
0EE9E:  MOVFF  FEC,2E0
0EEA2:  MOVFF  FEC,2E1
0EEA6:  MOVF   FED,F
0EEA8:  MOVF   FED,F
0EEAA:  MOVF   FED,F
0EEAC:  MOVLW  24
0EEAE:  ADDWF  xDC,W
0EEB0:  MOVWF  FE9
0EEB2:  MOVLW  00
0EEB4:  ADDWFC xDD,W
0EEB6:  MOVWF  FEA
0EEB8:  MOVFF  FEF,2E2
0EEBC:  MOVLW  04
0EEBE:  MOVWF  FF6
0EEC0:  MOVLW  08
0EEC2:  MOVWF  FF7
0EEC4:  MOVLW  00
0EEC6:  MOVWF  FF8
0EEC8:  MOVLW  12
0EECA:  MOVLB  3
0EECC:  MOVWF  x1E
0EECE:  MOVLB  0
0EED0:  CALL   20BA
0EED4:  MOVLW  41
0EED6:  MOVWF  FE9
0EED8:  MOVFF  2E1,2E6
0EEDC:  MOVFF  2E0,2E5
0EEE0:  MOVFF  2DF,2E4
0EEE4:  MOVFF  2DE,2E3
0EEE8:  CALL   5F3C
0EEEC:  MOVLW  19
0EEEE:  MOVWF  FF6
0EEF0:  MOVLW  08
0EEF2:  MOVWF  FF7
0EEF4:  MOVLW  00
0EEF6:  MOVWF  FF8
0EEF8:  MOVLW  0B
0EEFA:  MOVLB  3
0EEFC:  MOVWF  x1E
0EEFE:  MOVLB  0
0EF00:  CALL   20BA
0EF04:  MOVFF  2E2,2E3
0EF08:  MOVLW  1B
0EF0A:  MOVLB  2
0EF0C:  MOVWF  xE4
0EF0E:  MOVLB  0
0EF10:  CALL   E420
0EF14:  MOVLW  0D
0EF16:  BTFSS  FA6.6
0EF18:  GOTO   EF16
0EF1C:  MOVLB  E
0EF1E:  MOVWF  xF9
0EF20:  MOVLW  0A
0EF22:  MOVLB  0
0EF24:  BTFSS  FA6.6
0EF26:  GOTO   EF24
0EF2A:  MOVLB  E
0EF2C:  MOVWF  xF9
....................     fprintf(PC, "IV2_HEADER : Used=%lu, Uncopied=%u\r\n", smf_data_table->fields.headers[CIGS_IV2_HEADER].used_size, smf_data_table->fields.headers[CIGS_IV2_HEADER].loop_counter);
0EF2E:  MOVLW  28
0EF30:  MOVLB  2
0EF32:  ADDWF  xDC,W
0EF34:  MOVWF  FE9
0EF36:  MOVLW  00
0EF38:  ADDWFC xDD,W
0EF3A:  MOVWF  FEA
0EF3C:  MOVFF  FEF,2DE
0EF40:  MOVFF  FEC,2DF
0EF44:  MOVFF  FEC,2E0
0EF48:  MOVFF  FEC,2E1
0EF4C:  MOVF   FED,F
0EF4E:  MOVF   FED,F
0EF50:  MOVF   FED,F
0EF52:  MOVLW  2C
0EF54:  ADDWF  xDC,W
0EF56:  MOVWF  FE9
0EF58:  MOVLW  00
0EF5A:  ADDWFC xDD,W
0EF5C:  MOVWF  FEA
0EF5E:  MOVFF  FEF,2E2
0EF62:  MOVLW  2A
0EF64:  MOVWF  FF6
0EF66:  MOVLW  08
0EF68:  MOVWF  FF7
0EF6A:  MOVLW  00
0EF6C:  MOVWF  FF8
0EF6E:  MOVLW  12
0EF70:  MOVLB  3
0EF72:  MOVWF  x1E
0EF74:  MOVLB  0
0EF76:  CALL   20BA
0EF7A:  MOVLW  41
0EF7C:  MOVWF  FE9
0EF7E:  MOVFF  2E1,2E6
0EF82:  MOVFF  2E0,2E5
0EF86:  MOVFF  2DF,2E4
0EF8A:  MOVFF  2DE,2E3
0EF8E:  CALL   5F3C
0EF92:  MOVLW  3F
0EF94:  MOVWF  FF6
0EF96:  MOVLW  08
0EF98:  MOVWF  FF7
0EF9A:  MOVLW  00
0EF9C:  MOVWF  FF8
0EF9E:  MOVLW  0B
0EFA0:  MOVLB  3
0EFA2:  MOVWF  x1E
0EFA4:  MOVLB  0
0EFA6:  CALL   20BA
0EFAA:  MOVFF  2E2,2E3
0EFAE:  MOVLW  1B
0EFB0:  MOVLB  2
0EFB2:  MOVWF  xE4
0EFB4:  MOVLB  0
0EFB6:  CALL   E420
0EFBA:  MOVLW  0D
0EFBC:  BTFSS  FA6.6
0EFBE:  GOTO   EFBC
0EFC2:  MOVLB  E
0EFC4:  MOVWF  xF9
0EFC6:  MOVLW  0A
0EFC8:  MOVLB  0
0EFCA:  BTFSS  FA6.6
0EFCC:  GOTO   EFCA
0EFD0:  MOVLB  E
0EFD2:  MOVWF  xF9
....................     fprintf(PC, "IV2_DATA   : Used=%lu, Uncopied=%u\r\n", smf_data_table->fields.headers[CIGS_IV2_DATA].used_size, smf_data_table->fields.headers[CIGS_IV2_DATA].loop_counter);
0EFD4:  MOVLW  30
0EFD6:  MOVLB  2
0EFD8:  ADDWF  xDC,W
0EFDA:  MOVWF  FE9
0EFDC:  MOVLW  00
0EFDE:  ADDWFC xDD,W
0EFE0:  MOVWF  FEA
0EFE2:  MOVFF  FEF,2DE
0EFE6:  MOVFF  FEC,2DF
0EFEA:  MOVFF  FEC,2E0
0EFEE:  MOVFF  FEC,2E1
0EFF2:  MOVF   FED,F
0EFF4:  MOVF   FED,F
0EFF6:  MOVF   FED,F
0EFF8:  MOVLW  34
0EFFA:  ADDWF  xDC,W
0EFFC:  MOVWF  FE9
0EFFE:  MOVLW  00
0F000:  ADDWFC xDD,W
0F002:  MOVWF  FEA
0F004:  MOVFF  FEF,2E2
0F008:  MOVLW  50
0F00A:  MOVWF  FF6
0F00C:  MOVLW  08
0F00E:  MOVWF  FF7
0F010:  MOVLW  00
0F012:  MOVWF  FF8
0F014:  MOVLW  12
0F016:  MOVLB  3
0F018:  MOVWF  x1E
0F01A:  MOVLB  0
0F01C:  CALL   20BA
0F020:  MOVLW  41
0F022:  MOVWF  FE9
0F024:  MOVFF  2E1,2E6
0F028:  MOVFF  2E0,2E5
0F02C:  MOVFF  2DF,2E4
0F030:  MOVFF  2DE,2E3
0F034:  CALL   5F3C
0F038:  MOVLW  65
0F03A:  MOVWF  FF6
0F03C:  MOVLW  08
0F03E:  MOVWF  FF7
0F040:  MOVLW  00
0F042:  MOVWF  FF8
0F044:  MOVLW  0B
0F046:  MOVLB  3
0F048:  MOVWF  x1E
0F04A:  MOVLB  0
0F04C:  CALL   20BA
0F050:  MOVFF  2E2,2E3
0F054:  MOVLW  1B
0F056:  MOVLB  2
0F058:  MOVWF  xE4
0F05A:  MOVLB  0
0F05C:  CALL   E420
0F060:  MOVLW  0D
0F062:  BTFSS  FA6.6
0F064:  GOTO   F062
0F068:  MOVLB  E
0F06A:  MOVWF  xF9
0F06C:  MOVLW  0A
0F06E:  MOVLB  0
0F070:  BTFSS  FA6.6
0F072:  GOTO   F070
0F076:  MOVLB  E
0F078:  MOVWF  xF9
....................     fprintf(PC, "------------------------------\r\n\r\n");
0F07A:  MOVLW  76
0F07C:  MOVWF  FF6
0F07E:  MOVLW  08
0F080:  MOVWF  FF7
0F082:  MOVLW  00
0F084:  MOVWF  FF8
0F086:  MOVLB  0
0F088:  CALL   2084
0F08C:  GOTO   F280 (RETURN)
.................... }
.................... 
.................... void smf_write(FlashOperationStruct *smf_data_ptr)
.................... {
....................     fprintf(PC, "\r\n_______________________________\r\n");
*
10000:  MOVLW  9A
10002:  MOVWF  FF6
10004:  MOVLW  08
10006:  MOVWF  FF7
10008:  MOVLW  00
1000A:  MOVWF  FF8
1000C:  CALL   2084
....................     fprintf(PC, "_________Start copy_data_________\r\n");
10010:  MOVLW  BE
10012:  MOVWF  FF6
10014:  MOVLW  08
10016:  MOVWF  FF7
10018:  MOVLW  00
1001A:  MOVWF  FF8
1001C:  CALL   2084
....................     
....................     // 接続確認
....................     if (!is_connect(mis_fm))
10020:  MOVFF  115,2DC
10024:  MOVFF  114,2DB
10028:  MOVFF  113,2DA
1002C:  MOVFF  112,2D9
10030:  CALL   2B9A
10034:  MOVF   01,F
10036:  BTFSS  FD8.2
10038:  GOTO   10050
....................     {
....................         fprintf(PC, "Error: MIS FM is not connected\r\n");
1003C:  MOVLW  E2
1003E:  MOVWF  FF6
10040:  MOVLW  08
10042:  MOVWF  FF7
10044:  MOVLW  00
10046:  MOVWF  FF8
10048:  CALL   2084
....................         return;
1004C:  GOTO   10B00
....................     }    
....................     if (!is_connect(smf))
10050:  MOVFF  119,2DC
10054:  MOVFF  118,2DB
10058:  MOVFF  117,2DA
1005C:  MOVFF  116,2D9
10060:  CALL   2B9A
10064:  MOVF   01,F
10066:  BTFSS  FD8.2
10068:  GOTO   10080
....................     {
....................         fprintf(PC, "Error: SMF is not connected\r\n");
1006C:  MOVLW  04
1006E:  MOVWF  FF6
10070:  MOVLW  09
10072:  MOVWF  FF7
10074:  MOVLW  00
10076:  MOVWF  FF8
10078:  CALL   2084
....................         return;
1007C:  GOTO   10B00
....................     }    
.................... 
.................... 
....................     smf_data_table_t smf_data_table;
....................     read_smf_header(&smf_data_table);
10080:  MOVLW  02
10082:  MOVLB  2
10084:  MOVWF  xDA
10086:  MOVLW  35
10088:  MOVWF  xD9
1008A:  MOVLB  0
1008C:  GOTO   F214
.................... 
.................... 
....................     unsigned int32 write_src;
....................     unsigned int32 write_size;
.................... 
....................     //アドレスと自動更新
....................     if (smf_data_ptr->source_type == SOURCE_MISF_UNCOPIED )
10090:  MOVLW  03
10092:  MOVLB  2
10094:  ADDWF  x33,W
10096:  MOVWF  01
10098:  MOVLW  00
1009A:  ADDWFC x34,W
1009C:  MOVWF  03
1009E:  MOVF   01,W
100A0:  MOVWF  FE9
100A2:  MOVFF  03,FEA
100A6:  BTFSS  FEF.0
100A8:  BRA    100B0
100AA:  MOVLB  0
100AC:  GOTO   101DA
100B0:  MOVLB  0
....................     {
....................         write_src = MISF_ADDRESS_TABLE[smf_data_ptr->mission_id].start + misf_counter_table[smf_data_ptr->mission_id].used_counter - misf_counter_table[smf_data_ptr->mission_id].uncopied_counter;
100B2:  MOVLB  2
100B4:  MOVF   x33,W
100B6:  MOVWF  FE9
100B8:  MOVF   x34,W
100BA:  MOVWF  FEA
100BC:  MOVF   FEF,W
100BE:  MULLW  0C
100C0:  MOVF   FF3,W
100C2:  CLRF   xDA
100C4:  MOVWF  xD9
100C6:  MOVFF  2DA,03
100CA:  MOVF   xD9,W
100CC:  MOVLB  0
100CE:  CALL   014E
100D2:  MOVWF  00
100D4:  TBLRD*+
100D6:  MOVFF  FF5,01
100DA:  TBLRD*+
100DC:  MOVFF  FF5,02
100E0:  TBLRD*+
100E2:  MOVFF  FF5,03
100E6:  MOVFF  03,2DE
100EA:  MOVFF  02,2DD
100EE:  MOVFF  01,2DC
100F2:  MOVFF  00,2DB
100F6:  MOVLB  2
100F8:  MOVF   x33,W
100FA:  MOVWF  FE9
100FC:  MOVF   x34,W
100FE:  MOVWF  FEA
10100:  MOVF   FEF,W
10102:  MULLW  0A
10104:  MOVF   FF3,W
10106:  CLRF   xE0
10108:  MOVWF  xDF
1010A:  MOVLW  30
1010C:  ADDWF  xDF,W
1010E:  MOVWF  FE9
10110:  MOVLW  01
10112:  ADDWFC xE0,W
10114:  MOVWF  FEA
10116:  MOVFF  FEF,00
1011A:  MOVFF  FEC,01
1011E:  MOVFF  FEC,02
10122:  MOVFF  FEC,03
10126:  MOVF   FED,F
10128:  MOVF   FED,F
1012A:  MOVF   FED,F
1012C:  MOVF   00,W
1012E:  ADDWF  xDB,F
10130:  MOVF   01,W
10132:  ADDWFC xDC,F
10134:  MOVF   02,W
10136:  ADDWFC xDD,F
10138:  MOVF   03,W
1013A:  ADDWFC xDE,F
1013C:  MOVF   x33,W
1013E:  MOVWF  FE9
10140:  MOVF   x34,W
10142:  MOVWF  FEA
10144:  MOVF   FEF,W
10146:  MULLW  0A
10148:  MOVF   FF3,W
1014A:  CLRF   xE2
1014C:  MOVWF  xE1
1014E:  MOVLW  04
10150:  ADDWF  xE1,W
10152:  MOVWF  01
10154:  MOVLW  00
10156:  ADDWFC xE2,W
10158:  MOVWF  03
1015A:  MOVF   01,W
1015C:  ADDLW  30
1015E:  MOVWF  FE9
10160:  MOVLW  01
10162:  ADDWFC 03,W
10164:  MOVWF  FEA
10166:  MOVFF  FEF,00
1016A:  MOVFF  FEC,01
1016E:  MOVFF  FEC,02
10172:  MOVFF  FEC,03
10176:  MOVF   FED,F
10178:  MOVF   FED,F
1017A:  MOVF   FED,F
1017C:  MOVF   00,W
1017E:  SUBWF  xDB,W
10180:  MOVWF  x75
10182:  MOVF   01,W
10184:  SUBWFB xDC,W
10186:  MOVWF  x76
10188:  MOVF   02,W
1018A:  SUBWFB xDD,W
1018C:  MOVWF  x77
1018E:  MOVF   03,W
10190:  SUBWFB xDE,W
10192:  MOVWF  x78
....................         write_size = misf_counter_table[smf_data_ptr->mission_id].uncopied_counter;
10194:  MOVF   x33,W
10196:  MOVWF  FE9
10198:  MOVF   x34,W
1019A:  MOVWF  FEA
1019C:  MOVF   FEF,W
1019E:  MULLW  0A
101A0:  MOVF   FF3,W
101A2:  CLRF   xDA
101A4:  MOVWF  xD9
101A6:  MOVLW  04
101A8:  ADDWF  xD9,W
101AA:  MOVWF  01
101AC:  MOVLW  00
101AE:  ADDWFC xDA,W
101B0:  MOVWF  03
101B2:  MOVF   01,W
101B4:  ADDLW  30
101B6:  MOVWF  FE9
101B8:  MOVLW  01
101BA:  ADDWFC 03,W
101BC:  MOVWF  FEA
101BE:  MOVFF  FEF,279
101C2:  MOVFF  FEC,27A
101C6:  MOVFF  FEC,27B
101CA:  MOVFF  FEC,27C
101CE:  MOVF   FED,F
101D0:  MOVF   FED,F
101D2:  MOVF   FED,F
101D4:  MOVLB  0
....................     }else if(smf_data_ptr->source_type == SOURCE_MISF_MANUAL)
101D6:  GOTO   10244
101DA:  MOVLW  03
101DC:  MOVLB  2
101DE:  ADDWF  x33,W
101E0:  MOVWF  01
101E2:  MOVLW  00
101E4:  ADDWFC x34,W
101E6:  MOVWF  03
101E8:  MOVF   01,W
101EA:  MOVWF  FE9
101EC:  MOVFF  03,FEA
101F0:  BTFSC  FEF.0
101F2:  BRA    101FA
101F4:  MOVLB  0
101F6:  GOTO   10244
101FA:  MOVLB  0
....................     {
....................         write_src = smf_data_ptr->misf_start_addr;
101FC:  MOVLW  04
101FE:  MOVLB  2
10200:  ADDWF  x33,W
10202:  MOVWF  FE9
10204:  MOVLW  00
10206:  ADDWFC x34,W
10208:  MOVWF  FEA
1020A:  MOVFF  FEF,275
1020E:  MOVFF  FEC,276
10212:  MOVFF  FEC,277
10216:  MOVFF  FEC,278
1021A:  MOVF   FED,F
1021C:  MOVF   FED,F
1021E:  MOVF   FED,F
....................         write_size = smf_data_ptr->misf_size;
10220:  MOVLW  08
10222:  ADDWF  x33,W
10224:  MOVWF  FE9
10226:  MOVLW  00
10228:  ADDWFC x34,W
1022A:  MOVWF  FEA
1022C:  MOVFF  FEF,279
10230:  MOVFF  FEC,27A
10234:  MOVFF  FEC,27B
10238:  MOVFF  FEC,27C
1023C:  MOVF   FED,F
1023E:  MOVF   FED,F
10240:  MOVF   FED,F
10242:  MOVLB  0
....................     }
.................... 
....................     unsigned int32 smf_address_start = SMF_ADDRESS_TABLE[smf_data_ptr->mission_id].start;
....................     unsigned int32 smf_address_end   = SMF_ADDRESS_TABLE[smf_data_ptr->mission_id].end;
....................     unsigned int32 misf_address_start = MISF_ADDRESS_TABLE[smf_data_ptr->mission_id].start;
....................     unsigned int32 misf_address_end   = MISF_ADDRESS_TABLE[smf_data_ptr->mission_id].end;
10244:  MOVLB  2
10246:  MOVF   x33,W
10248:  MOVWF  FE9
1024A:  MOVF   x34,W
1024C:  MOVWF  FEA
1024E:  MOVF   FEF,W
10250:  MULLW  0C
10252:  MOVF   FF3,W
10254:  CLRF   xDA
10256:  MOVWF  xD9
10258:  MOVFF  2DA,03
1025C:  MOVF   xD9,W
1025E:  MOVLB  0
10260:  CALL   00E6
10264:  MOVWF  00
10266:  TBLRD*+
10268:  MOVFF  FF5,01
1026C:  TBLRD*+
1026E:  MOVFF  FF5,02
10272:  TBLRD*+
10274:  MOVFF  FF5,03
10278:  MOVFF  03,280
1027C:  MOVFF  02,27F
10280:  MOVFF  01,27E
10284:  MOVFF  00,27D
10288:  MOVLB  2
1028A:  MOVF   x33,W
1028C:  MOVWF  FE9
1028E:  MOVF   x34,W
10290:  MOVWF  FEA
10292:  MOVF   FEF,W
10294:  MULLW  0C
10296:  MOVF   FF3,W
10298:  CLRF   xDC
1029A:  MOVWF  xDB
1029C:  MOVLW  04
1029E:  ADDWF  xDB,W
102A0:  MOVWF  01
102A2:  MOVLW  00
102A4:  ADDWFC xDC,W
102A6:  MOVWF  03
102A8:  MOVF   01,W
102AA:  MOVLB  0
102AC:  CALL   00E6
102B0:  MOVWF  00
102B2:  TBLRD*+
102B4:  MOVFF  FF5,01
102B8:  TBLRD*+
102BA:  MOVFF  FF5,02
102BE:  TBLRD*+
102C0:  MOVFF  FF5,03
102C4:  MOVFF  03,284
102C8:  MOVFF  02,283
102CC:  MOVFF  01,282
102D0:  MOVFF  00,281
102D4:  MOVLB  2
102D6:  MOVF   x33,W
102D8:  MOVWF  FE9
102DA:  MOVF   x34,W
102DC:  MOVWF  FEA
102DE:  MOVF   FEF,W
102E0:  MULLW  0C
102E2:  MOVF   FF3,W
102E4:  CLRF   xDC
102E6:  MOVWF  xDB
102E8:  MOVFF  2DC,03
102EC:  MOVF   xDB,W
102EE:  MOVLB  0
102F0:  CALL   014E
102F4:  MOVWF  00
102F6:  TBLRD*+
102F8:  MOVFF  FF5,01
102FC:  TBLRD*+
102FE:  MOVFF  FF5,02
10302:  TBLRD*+
10304:  MOVFF  FF5,03
10308:  MOVFF  03,288
1030C:  MOVFF  02,287
10310:  MOVFF  01,286
10314:  MOVFF  00,285
10318:  MOVLB  2
1031A:  MOVF   x33,W
1031C:  MOVWF  FE9
1031E:  MOVF   x34,W
10320:  MOVWF  FEA
10322:  MOVF   FEF,W
10324:  MULLW  0C
10326:  MOVF   FF3,W
10328:  CLRF   xDE
1032A:  MOVWF  xDD
1032C:  MOVLW  04
1032E:  ADDWF  xDD,W
10330:  MOVWF  01
10332:  MOVLW  00
10334:  ADDWFC xDE,W
10336:  MOVWF  03
10338:  MOVF   01,W
1033A:  MOVLB  0
1033C:  CALL   014E
10340:  MOVWF  00
10342:  TBLRD*+
10344:  MOVFF  FF5,01
10348:  TBLRD*+
1034A:  MOVFF  FF5,02
1034E:  TBLRD*+
10350:  MOVFF  FF5,03
10354:  MOVFF  03,28C
10358:  MOVFF  02,28B
1035C:  MOVFF  01,28A
10360:  MOVFF  00,289
.................... 
.................... 
.................... 
....................     // Print SMF ADDRESS
....................     fprintf(PC,"[SMF ADDRESS]\r\n");
10364:  MOVLW  22
10366:  MOVWF  FF6
10368:  MOVLW  09
1036A:  MOVWF  FF7
1036C:  MOVLW  00
1036E:  MOVWF  FF8
10370:  CALL   2084
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
10374:  MOVLW  32
10376:  MOVWF  FF6
10378:  MOVLW  09
1037A:  MOVWF  FF7
1037C:  MOVLW  00
1037E:  MOVWF  FF8
10380:  CALL   2084
....................     fprintf(PC, "\tSTART\t0x%08LX\r\n", smf_address_start);
10384:  MOVLW  5E
10386:  MOVWF  FF6
10388:  MOVLW  09
1038A:  MOVWF  FF7
1038C:  MOVLW  00
1038E:  MOVWF  FF8
10390:  MOVLW  09
10392:  MOVLB  3
10394:  MOVWF  x1E
10396:  MOVLB  0
10398:  CALL   20BA
1039C:  MOVFF  280,A77
103A0:  MOVLW  37
103A2:  MOVLB  A
103A4:  MOVWF  x78
103A6:  MOVLB  0
103A8:  CALL   22D0
103AC:  MOVFF  27F,A77
103B0:  MOVLW  37
103B2:  MOVLB  A
103B4:  MOVWF  x78
103B6:  MOVLB  0
103B8:  CALL   22D0
103BC:  MOVFF  27E,A77
103C0:  MOVLW  37
103C2:  MOVLB  A
103C4:  MOVWF  x78
103C6:  MOVLB  0
103C8:  CALL   22D0
103CC:  MOVFF  27D,A77
103D0:  MOVLW  37
103D2:  MOVLB  A
103D4:  MOVWF  x78
103D6:  MOVLB  0
103D8:  CALL   22D0
103DC:  MOVLW  0D
103DE:  BTFSS  FA6.6
103E0:  GOTO   103DE
103E4:  MOVLB  E
103E6:  MOVWF  xF9
103E8:  MOVLW  0A
103EA:  MOVLB  0
103EC:  BTFSS  FA6.6
103EE:  GOTO   103EC
103F2:  MOVLB  E
103F4:  MOVWF  xF9
....................     fprintf(PC, "\tEND\t0x%08LX\r\n", smf_address_end);
103F6:  MOVLW  70
103F8:  MOVWF  FF6
103FA:  MOVLW  09
103FC:  MOVWF  FF7
103FE:  MOVLW  00
10400:  MOVWF  FF8
10402:  MOVLW  07
10404:  MOVLB  3
10406:  MOVWF  x1E
10408:  MOVLB  0
1040A:  CALL   20BA
1040E:  MOVFF  284,A77
10412:  MOVLW  37
10414:  MOVLB  A
10416:  MOVWF  x78
10418:  MOVLB  0
1041A:  CALL   22D0
1041E:  MOVFF  283,A77
10422:  MOVLW  37
10424:  MOVLB  A
10426:  MOVWF  x78
10428:  MOVLB  0
1042A:  CALL   22D0
1042E:  MOVFF  282,A77
10432:  MOVLW  37
10434:  MOVLB  A
10436:  MOVWF  x78
10438:  MOVLB  0
1043A:  CALL   22D0
1043E:  MOVFF  281,A77
10442:  MOVLW  37
10444:  MOVLB  A
10446:  MOVWF  x78
10448:  MOVLB  0
1044A:  CALL   22D0
1044E:  MOVLW  0D
10450:  BTFSS  FA6.6
10452:  GOTO   10450
10456:  MOVLB  E
10458:  MOVWF  xF9
1045A:  MOVLW  0A
1045C:  MOVLB  0
1045E:  BTFSS  FA6.6
10460:  GOTO   1045E
10464:  MOVLB  E
10466:  MOVWF  xF9
....................     fprintf(PC, "\tUSED\t0x%08LX\r\n", smf_data_table.fields.headers[smf_data_ptr->mission_id].used_size);
10468:  MOVLB  2
1046A:  MOVF   x33,W
1046C:  MOVWF  FE9
1046E:  MOVF   x34,W
10470:  MOVWF  FEA
10472:  MOVF   FEF,W
10474:  MULLW  08
10476:  MOVF   FF3,W
10478:  CLRF   xDA
1047A:  MOVWF  xD9
1047C:  MOVLW  35
1047E:  ADDWF  xD9,W
10480:  MOVWF  FE9
10482:  MOVLW  02
10484:  ADDWFC xDA,W
10486:  MOVWF  FEA
10488:  MOVFF  FEF,2DB
1048C:  MOVFF  FEC,2DC
10490:  MOVFF  FEC,2DD
10494:  MOVFF  FEC,2DE
10498:  MOVF   FED,F
1049A:  MOVF   FED,F
1049C:  MOVF   FED,F
1049E:  MOVLW  80
104A0:  MOVWF  FF6
104A2:  MOVLW  09
104A4:  MOVWF  FF7
104A6:  MOVLW  00
104A8:  MOVWF  FF8
104AA:  MOVLW  08
104AC:  MOVLB  3
104AE:  MOVWF  x1E
104B0:  MOVLB  0
104B2:  CALL   20BA
104B6:  MOVFF  2DE,A77
104BA:  MOVLW  37
104BC:  MOVLB  A
104BE:  MOVWF  x78
104C0:  MOVLB  0
104C2:  CALL   22D0
104C6:  MOVFF  2DD,A77
104CA:  MOVLW  37
104CC:  MOVLB  A
104CE:  MOVWF  x78
104D0:  MOVLB  0
104D2:  CALL   22D0
104D6:  MOVFF  2DC,A77
104DA:  MOVLW  37
104DC:  MOVLB  A
104DE:  MOVWF  x78
104E0:  MOVLB  0
104E2:  CALL   22D0
104E6:  MOVFF  2DB,A77
104EA:  MOVLW  37
104EC:  MOVLB  A
104EE:  MOVWF  x78
104F0:  MOVLB  0
104F2:  CALL   22D0
104F6:  MOVLW  0D
104F8:  BTFSS  FA6.6
104FA:  GOTO   104F8
104FE:  MOVLB  E
10500:  MOVWF  xF9
10502:  MOVLW  0A
10504:  MOVLB  0
10506:  BTFSS  FA6.6
10508:  GOTO   10506
1050C:  MOVLB  E
1050E:  MOVWF  xF9
....................     fprintf(PC, "\tNEXT\t0x%08LX\r\n", smf_address_start + smf_data_table.fields.headers[smf_data_ptr->mission_id].used_size);
10510:  MOVLB  2
10512:  MOVF   x33,W
10514:  MOVWF  FE9
10516:  MOVF   x34,W
10518:  MOVWF  FEA
1051A:  MOVF   FEF,W
1051C:  MULLW  08
1051E:  MOVF   FF3,W
10520:  CLRF   xDA
10522:  MOVWF  xD9
10524:  MOVLW  35
10526:  ADDWF  xD9,W
10528:  MOVWF  FE9
1052A:  MOVLW  02
1052C:  ADDWFC xDA,W
1052E:  MOVWF  FEA
10530:  MOVFF  FEF,00
10534:  MOVFF  FEC,01
10538:  MOVFF  FEC,02
1053C:  MOVFF  FEC,03
10540:  MOVF   FED,F
10542:  MOVF   FED,F
10544:  MOVF   FED,F
10546:  MOVF   00,W
10548:  ADDWF  x7D,W
1054A:  MOVWF  xDB
1054C:  MOVF   01,W
1054E:  ADDWFC x7E,W
10550:  MOVWF  xDC
10552:  MOVF   02,W
10554:  ADDWFC x7F,W
10556:  MOVWF  xDD
10558:  MOVF   03,W
1055A:  ADDWFC x80,W
1055C:  MOVWF  xDE
1055E:  MOVLW  90
10560:  MOVWF  FF6
10562:  MOVLW  09
10564:  MOVWF  FF7
10566:  MOVLW  00
10568:  MOVWF  FF8
1056A:  MOVLW  08
1056C:  MOVLB  3
1056E:  MOVWF  x1E
10570:  MOVLB  0
10572:  CALL   20BA
10576:  MOVFF  2DE,A77
1057A:  MOVLW  37
1057C:  MOVLB  A
1057E:  MOVWF  x78
10580:  MOVLB  0
10582:  CALL   22D0
10586:  MOVFF  2DD,A77
1058A:  MOVLW  37
1058C:  MOVLB  A
1058E:  MOVWF  x78
10590:  MOVLB  0
10592:  CALL   22D0
10596:  MOVFF  2DC,A77
1059A:  MOVLW  37
1059C:  MOVLB  A
1059E:  MOVWF  x78
105A0:  MOVLB  0
105A2:  CALL   22D0
105A6:  MOVFF  2DB,A77
105AA:  MOVLW  37
105AC:  MOVLB  A
105AE:  MOVWF  x78
105B0:  MOVLB  0
105B2:  CALL   22D0
105B6:  MOVLW  0D
105B8:  BTFSS  FA6.6
105BA:  GOTO   105B8
105BE:  MOVLB  E
105C0:  MOVWF  xF9
105C2:  MOVLW  0A
105C4:  MOVLB  0
105C6:  BTFSS  FA6.6
105C8:  GOTO   105C6
105CC:  MOVLB  E
105CE:  MOVWF  xF9
.................... 
....................     // Print MISF ADDRESS
....................     fprintf(PC,"[MISF ADDRESS]\r\n");
105D0:  MOVLW  A0
105D2:  MOVWF  FF6
105D4:  MOVLW  09
105D6:  MOVWF  FF7
105D8:  MOVLW  00
105DA:  MOVWF  FF8
105DC:  MOVLB  0
105DE:  CALL   2084
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
105E2:  MOVLW  B2
105E4:  MOVWF  FF6
105E6:  MOVLW  09
105E8:  MOVWF  FF7
105EA:  MOVLW  00
105EC:  MOVWF  FF8
105EE:  CALL   2084
....................     fprintf(PC, "\tSTART\t0x%08LX\r\n", misf_address_start);
105F2:  MOVLW  DE
105F4:  MOVWF  FF6
105F6:  MOVLW  09
105F8:  MOVWF  FF7
105FA:  MOVLW  00
105FC:  MOVWF  FF8
105FE:  MOVLW  09
10600:  MOVLB  3
10602:  MOVWF  x1E
10604:  MOVLB  0
10606:  CALL   20BA
1060A:  MOVFF  288,A77
1060E:  MOVLW  37
10610:  MOVLB  A
10612:  MOVWF  x78
10614:  MOVLB  0
10616:  CALL   22D0
1061A:  MOVFF  287,A77
1061E:  MOVLW  37
10620:  MOVLB  A
10622:  MOVWF  x78
10624:  MOVLB  0
10626:  CALL   22D0
1062A:  MOVFF  286,A77
1062E:  MOVLW  37
10630:  MOVLB  A
10632:  MOVWF  x78
10634:  MOVLB  0
10636:  CALL   22D0
1063A:  MOVFF  285,A77
1063E:  MOVLW  37
10640:  MOVLB  A
10642:  MOVWF  x78
10644:  MOVLB  0
10646:  CALL   22D0
1064A:  MOVLW  0D
1064C:  BTFSS  FA6.6
1064E:  GOTO   1064C
10652:  MOVLB  E
10654:  MOVWF  xF9
10656:  MOVLW  0A
10658:  MOVLB  0
1065A:  BTFSS  FA6.6
1065C:  GOTO   1065A
10660:  MOVLB  E
10662:  MOVWF  xF9
....................     fprintf(PC, "\tEND\t0x%08LX\r\n", misf_address_end);
10664:  MOVLW  F0
10666:  MOVWF  FF6
10668:  MOVLW  09
1066A:  MOVWF  FF7
1066C:  MOVLW  00
1066E:  MOVWF  FF8
10670:  MOVLW  07
10672:  MOVLB  3
10674:  MOVWF  x1E
10676:  MOVLB  0
10678:  CALL   20BA
1067C:  MOVFF  28C,A77
10680:  MOVLW  37
10682:  MOVLB  A
10684:  MOVWF  x78
10686:  MOVLB  0
10688:  CALL   22D0
1068C:  MOVFF  28B,A77
10690:  MOVLW  37
10692:  MOVLB  A
10694:  MOVWF  x78
10696:  MOVLB  0
10698:  CALL   22D0
1069C:  MOVFF  28A,A77
106A0:  MOVLW  37
106A2:  MOVLB  A
106A4:  MOVWF  x78
106A6:  MOVLB  0
106A8:  CALL   22D0
106AC:  MOVFF  289,A77
106B0:  MOVLW  37
106B2:  MOVLB  A
106B4:  MOVWF  x78
106B6:  MOVLB  0
106B8:  CALL   22D0
106BC:  MOVLW  0D
106BE:  BTFSS  FA6.6
106C0:  GOTO   106BE
106C4:  MOVLB  E
106C6:  MOVWF  xF9
106C8:  MOVLW  0A
106CA:  MOVLB  0
106CC:  BTFSS  FA6.6
106CE:  GOTO   106CC
106D2:  MOVLB  E
106D4:  MOVWF  xF9
....................     fprintf(PC, "\tSRC\t0x%08LX\r\n", write_src);
106D6:  MOVLW  00
106D8:  MOVWF  FF6
106DA:  MOVLW  0A
106DC:  MOVWF  FF7
106DE:  MOVLW  00
106E0:  MOVWF  FF8
106E2:  MOVLW  07
106E4:  MOVLB  3
106E6:  MOVWF  x1E
106E8:  MOVLB  0
106EA:  CALL   20BA
106EE:  MOVFF  278,A77
106F2:  MOVLW  37
106F4:  MOVLB  A
106F6:  MOVWF  x78
106F8:  MOVLB  0
106FA:  CALL   22D0
106FE:  MOVFF  277,A77
10702:  MOVLW  37
10704:  MOVLB  A
10706:  MOVWF  x78
10708:  MOVLB  0
1070A:  CALL   22D0
1070E:  MOVFF  276,A77
10712:  MOVLW  37
10714:  MOVLB  A
10716:  MOVWF  x78
10718:  MOVLB  0
1071A:  CALL   22D0
1071E:  MOVFF  275,A77
10722:  MOVLW  37
10724:  MOVLB  A
10726:  MOVWF  x78
10728:  MOVLB  0
1072A:  CALL   22D0
1072E:  MOVLW  0D
10730:  BTFSS  FA6.6
10732:  GOTO   10730
10736:  MOVLB  E
10738:  MOVWF  xF9
1073A:  MOVLW  0A
1073C:  MOVLB  0
1073E:  BTFSS  FA6.6
10740:  GOTO   1073E
10744:  MOVLB  E
10746:  MOVWF  xF9
....................     fprintf(PC, "\tSIZE\t0x%08LX\r\n", write_size);
10748:  MOVLW  10
1074A:  MOVWF  FF6
1074C:  MOVLW  0A
1074E:  MOVWF  FF7
10750:  MOVLW  00
10752:  MOVWF  FF8
10754:  MOVLW  08
10756:  MOVLB  3
10758:  MOVWF  x1E
1075A:  MOVLB  0
1075C:  CALL   20BA
10760:  MOVFF  27C,A77
10764:  MOVLW  37
10766:  MOVLB  A
10768:  MOVWF  x78
1076A:  MOVLB  0
1076C:  CALL   22D0
10770:  MOVFF  27B,A77
10774:  MOVLW  37
10776:  MOVLB  A
10778:  MOVWF  x78
1077A:  MOVLB  0
1077C:  CALL   22D0
10780:  MOVFF  27A,A77
10784:  MOVLW  37
10786:  MOVLB  A
10788:  MOVWF  x78
1078A:  MOVLB  0
1078C:  CALL   22D0
10790:  MOVFF  279,A77
10794:  MOVLW  37
10796:  MOVLB  A
10798:  MOVWF  x78
1079A:  MOVLB  0
1079C:  CALL   22D0
107A0:  MOVLW  0D
107A2:  BTFSS  FA6.6
107A4:  GOTO   107A2
107A8:  MOVLB  E
107AA:  MOVWF  xF9
107AC:  MOVLW  0A
107AE:  MOVLB  0
107B0:  BTFSS  FA6.6
107B2:  GOTO   107B0
107B6:  MOVLB  E
107B8:  MOVWF  xF9
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
107BA:  MOVLW  20
107BC:  MOVWF  FF6
107BE:  MOVLW  0A
107C0:  MOVWF  FF7
107C2:  MOVLW  00
107C4:  MOVWF  FF8
107C6:  MOVLB  0
107C8:  CALL   2084
.................... 
.................... 
....................     unsigned int8 buffer[PACKET_SIZE];
....................     unsigned int32 smf_write_address;
....................     unsigned int32 misf_read_address;
.................... 
....................     while (write_size > 0)
107CC:  MOVLB  2
107CE:  MOVF   x79,F
107D0:  BTFSC  FD8.2
107D2:  BRA    107DA
107D4:  MOVLB  0
107D6:  GOTO   1080C
107DA:  MOVLB  0
107DC:  MOVLB  2
107DE:  MOVF   x7A,F
107E0:  BTFSC  FD8.2
107E2:  BRA    107EA
107E4:  MOVLB  0
107E6:  GOTO   1080C
107EA:  MOVLB  0
107EC:  MOVLB  2
107EE:  MOVF   x7B,F
107F0:  BTFSC  FD8.2
107F2:  BRA    107FA
107F4:  MOVLB  0
107F6:  GOTO   1080C
107FA:  MOVLB  0
107FC:  MOVLB  2
107FE:  MOVF   x7C,F
10800:  BTFSS  FD8.2
10802:  BRA    1080A
10804:  MOVLB  0
10806:  GOTO   10AD0
1080A:  MOVLB  0
....................     {
....................         fprintf(PC, "Remaining size to write: %lu bytes\r\n", write_size);
1080C:  MOVLW  4C
1080E:  MOVWF  FF6
10810:  MOVLW  0A
10812:  MOVWF  FF7
10814:  MOVLW  00
10816:  MOVWF  FF8
10818:  MOVLW  19
1081A:  MOVLB  3
1081C:  MOVWF  x1E
1081E:  MOVLB  0
10820:  CALL   20BA
10824:  MOVLW  41
10826:  MOVWF  FE9
10828:  MOVFF  27C,2E6
1082C:  MOVFF  27B,2E5
10830:  MOVFF  27A,2E4
10834:  MOVFF  279,2E3
10838:  CALL   5F3C
1083C:  MOVLW  68
1083E:  MOVWF  FF6
10840:  MOVLW  0A
10842:  MOVWF  FF7
10844:  MOVLW  00
10846:  MOVWF  FF8
10848:  MOVLW  08
1084A:  MOVLB  3
1084C:  MOVWF  x1E
1084E:  MOVLB  0
10850:  CALL   20BA
....................         memset(buffer, 0x11, PACKET_SIZE);
10854:  MOVLW  02
10856:  MOVWF  FEA
10858:  MOVLW  8D
1085A:  MOVWF  FE9
1085C:  MOVLW  11
1085E:  MOVWF  00
10860:  CLRF   02
10862:  MOVLW  40
10864:  MOVWF  01
10866:  CALL   2C62
....................         smf_write_address = smf_address_start + smf_data_table.fields.headers[smf_data_ptr->mission_id].used_size;
1086A:  MOVLB  2
1086C:  MOVF   x33,W
1086E:  MOVWF  FE9
10870:  MOVF   x34,W
10872:  MOVWF  FEA
10874:  MOVF   FEF,W
10876:  MULLW  08
10878:  MOVF   FF3,W
1087A:  CLRF   xDA
1087C:  MOVWF  xD9
1087E:  MOVLW  35
10880:  ADDWF  xD9,W
10882:  MOVWF  FE9
10884:  MOVLW  02
10886:  ADDWFC xDA,W
10888:  MOVWF  FEA
1088A:  MOVFF  FEF,00
1088E:  MOVFF  FEC,01
10892:  MOVFF  FEC,02
10896:  MOVFF  FEC,03
1089A:  MOVF   FED,F
1089C:  MOVF   FED,F
1089E:  MOVF   FED,F
108A0:  MOVF   00,W
108A2:  ADDWF  x7D,W
108A4:  MOVWF  xCD
108A6:  MOVF   01,W
108A8:  ADDWFC x7E,W
108AA:  MOVWF  xCE
108AC:  MOVF   02,W
108AE:  ADDWFC x7F,W
108B0:  MOVWF  xCF
108B2:  MOVF   03,W
108B4:  ADDWFC x80,W
108B6:  MOVWF  xD0
....................         misf_read_address = write_src;
108B8:  MOVFF  278,2D4
108BC:  MOVFF  277,2D3
108C0:  MOVFF  276,2D2
108C4:  MOVFF  275,2D1
.................... 
....................         read_data_bytes(mis_fm, misf_read_address, buffer, PACKET_SIZE);
108C8:  MOVFF  115,B67
108CC:  MOVFF  114,B66
108D0:  MOVFF  113,B65
108D4:  MOVFF  112,B64
108D8:  MOVFF  2D4,B6B
108DC:  MOVFF  2D3,B6A
108E0:  MOVFF  2D2,B69
108E4:  MOVFF  2D1,B68
108E8:  MOVLW  02
108EA:  MOVLB  B
108EC:  MOVWF  x6D
108EE:  MOVLW  8D
108F0:  MOVWF  x6C
108F2:  CLRF   x71
108F4:  CLRF   x70
108F6:  CLRF   x6F
108F8:  MOVLW  40
108FA:  MOVWF  x6E
108FC:  MOVLB  0
108FE:  CALL   2C86
....................         fprintf(PC, "MISF DATA\r\n");
10902:  MOVLW  72
10904:  MOVWF  FF6
10906:  MOVLW  0A
10908:  MOVWF  FF7
1090A:  MOVLW  00
1090C:  MOVWF  FF8
1090E:  CALL   2084
....................         for (unsigned int32 j = 0; j < PACKET_SIZE; j++) {
10912:  MOVLB  2
10914:  CLRF   xD8
10916:  CLRF   xD7
10918:  CLRF   xD6
1091A:  CLRF   xD5
1091C:  MOVLB  0
1091E:  MOVLB  2
10920:  MOVF   xD8,F
10922:  BTFSC  FD8.2
10924:  BRA    1092C
10926:  MOVLB  0
10928:  GOTO   109A8
1092C:  MOVLB  0
1092E:  MOVLB  2
10930:  MOVF   xD7,F
10932:  BTFSC  FD8.2
10934:  BRA    1093C
10936:  MOVLB  0
10938:  GOTO   109A8
1093C:  MOVLB  0
1093E:  MOVLB  2
10940:  MOVF   xD6,F
10942:  BTFSC  FD8.2
10944:  BRA    1094C
10946:  MOVLB  0
10948:  GOTO   109A8
1094C:  MOVLB  0
1094E:  MOVLB  2
10950:  MOVF   xD5,W
10952:  SUBLW  3F
10954:  BTFSC  FD8.0
10956:  BRA    1095E
10958:  MOVLB  0
1095A:  GOTO   109A8
1095E:  MOVLB  0
....................             fprintf(PC, "%02X ", buffer[j]);
10960:  MOVLW  8D
10962:  MOVLB  2
10964:  ADDWF  xD5,W
10966:  MOVWF  FE9
10968:  MOVLW  02
1096A:  ADDWFC xD6,W
1096C:  MOVWF  FEA
1096E:  MOVFF  FEF,2D9
10972:  MOVFF  2D9,A77
10976:  MOVLW  37
10978:  MOVLB  A
1097A:  MOVWF  x78
1097C:  MOVLB  0
1097E:  CALL   22D0
10982:  MOVLW  20
10984:  BTFSS  FA6.6
10986:  GOTO   10984
1098A:  MOVLB  E
1098C:  MOVWF  xF9
1098E:  MOVLB  0
10990:  MOVLW  01
10992:  MOVLB  2
10994:  ADDWF  xD5,F
10996:  BTFSC  FD8.0
10998:  INCF   xD6,F
1099A:  BTFSC  FD8.2
1099C:  INCF   xD7,F
1099E:  BTFSC  FD8.2
109A0:  INCF   xD8,F
109A2:  MOVLB  0
109A4:  GOTO   1091E
....................         }
....................         fprintf(PC, "\r\n");
109A8:  MOVLW  0D
109AA:  BTFSS  FA6.6
109AC:  GOTO   109AA
109B0:  MOVLB  E
109B2:  MOVWF  xF9
109B4:  MOVLW  0A
109B6:  MOVLB  0
109B8:  BTFSS  FA6.6
109BA:  GOTO   109B8
109BE:  MOVLB  E
109C0:  MOVWF  xF9
.................... 
....................         write_data_bytes(smf, smf_write_address, buffer, PACKET_SIZE);
109C2:  MOVFF  119,BAB
109C6:  MOVFF  118,BAA
109CA:  MOVFF  117,BA9
109CE:  MOVFF  116,BA8
109D2:  MOVFF  2D0,BAF
109D6:  MOVFF  2CF,BAE
109DA:  MOVFF  2CE,BAD
109DE:  MOVFF  2CD,BAC
109E2:  MOVLW  02
109E4:  MOVLB  B
109E6:  MOVWF  xB1
109E8:  MOVLW  8D
109EA:  MOVWF  xB0
109EC:  CLRF   xB3
109EE:  MOVLW  40
109F0:  MOVWF  xB2
109F2:  MOVLB  0
109F4:  CALL   3C7C
....................         smf_data_table.fields.headers[smf_data_ptr->mission_id].used_size += PACKET_SIZE;
109F8:  MOVLB  2
109FA:  MOVF   x33,W
109FC:  MOVWF  FE9
109FE:  MOVF   x34,W
10A00:  MOVWF  FEA
10A02:  MOVF   FEF,W
10A04:  MULLW  08
10A06:  MOVF   FF3,W
10A08:  CLRF   xDA
10A0A:  MOVWF  xD9
10A0C:  MOVLW  35
10A0E:  ADDWF  xD9,W
10A10:  MOVWF  FE9
10A12:  MOVLW  02
10A14:  ADDWFC xDA,W
10A16:  MOVWF  FEA
10A18:  MOVLW  40
10A1A:  ADDWF  FEF,W
10A1C:  MOVWF  00
10A1E:  MOVLW  00
10A20:  ADDWFC FEC,W
10A22:  MOVWF  01
10A24:  MOVLW  00
10A26:  ADDWFC FEC,W
10A28:  MOVWF  02
10A2A:  MOVLW  00
10A2C:  ADDWFC FEC,W
10A2E:  MOVWF  03
10A30:  MOVF   FED,F
10A32:  MOVF   FED,F
10A34:  MOVF   FED,F
10A36:  MOVFF  00,FEF
10A3A:  MOVFF  01,FEC
10A3E:  MOVFF  02,FEC
10A42:  MOVFF  03,FEC
10A46:  MOVF   FED,F
10A48:  MOVF   FED,F
10A4A:  MOVF   FED,F
....................         misf_counter_table[smf_data_ptr->mission_id].uncopied_counter -= PACKET_SIZE;
10A4C:  MOVF   x33,W
10A4E:  MOVWF  FE9
10A50:  MOVF   x34,W
10A52:  MOVWF  FEA
10A54:  MOVF   FEF,W
10A56:  MULLW  0A
10A58:  MOVF   FF3,W
10A5A:  CLRF   xDA
10A5C:  MOVWF  xD9
10A5E:  MOVLW  04
10A60:  ADDWF  xD9,W
10A62:  MOVWF  01
10A64:  MOVLW  00
10A66:  ADDWFC xDA,W
10A68:  MOVWF  03
10A6A:  MOVF   01,W
10A6C:  ADDLW  30
10A6E:  MOVWF  FE9
10A70:  MOVLW  01
10A72:  ADDWFC 03,W
10A74:  MOVWF  FEA
10A76:  MOVLW  40
10A78:  SUBWF  FEF,W
10A7A:  MOVWF  00
10A7C:  MOVLW  00
10A7E:  SUBWFB FEC,W
10A80:  MOVWF  01
10A82:  MOVLW  00
10A84:  SUBWFB FEC,W
10A86:  MOVWF  02
10A88:  MOVLW  00
10A8A:  SUBWFB FEC,W
10A8C:  MOVWF  03
10A8E:  MOVF   FED,F
10A90:  MOVF   FED,F
10A92:  MOVF   FED,F
10A94:  MOVFF  00,FEF
10A98:  MOVFF  01,FEC
10A9C:  MOVFF  02,FEC
10AA0:  MOVFF  03,FEC
10AA4:  MOVF   FED,F
10AA6:  MOVF   FED,F
10AA8:  MOVF   FED,F
....................         
....................         write_src += PACKET_SIZE;
10AAA:  MOVLW  40
10AAC:  ADDWF  x75,F
10AAE:  MOVLW  00
10AB0:  ADDWFC x76,F
10AB2:  MOVLW  00
10AB4:  ADDWFC x77,F
10AB6:  MOVLW  00
10AB8:  ADDWFC x78,F
....................         write_size -= PACKET_SIZE;
10ABA:  MOVLW  40
10ABC:  SUBWF  x79,F
10ABE:  MOVLW  00
10AC0:  SUBWFB x7A,F
10AC2:  MOVLW  00
10AC4:  SUBWFB x7B,F
10AC6:  MOVLW  00
10AC8:  SUBWFB x7C,F
10ACA:  MOVLB  0
10ACC:  GOTO   107CC
....................     }
.................... 
.................... 
....................     // write size area
....................     smf_write_header(&smf_data_table);
10AD0:  MOVLW  02
10AD2:  MOVLB  2
10AD4:  MOVWF  xDA
10AD6:  MOVLW  35
10AD8:  MOVWF  xD9
10ADA:  MOVLB  0
10ADC:  GOTO   F3A4
....................     
....................     fprintf(PC, "\r\n_________End copy_data__________\r\n");
10AE0:  MOVLW  7E
10AE2:  MOVWF  FF6
10AE4:  MOVLW  0A
10AE6:  MOVWF  FF7
10AE8:  MOVLW  00
10AEA:  MOVWF  FF8
10AEC:  CALL   2084
....................     fprintf(PC, "_______________________________\r\n\r\n");
10AF0:  MOVLW  A4
10AF2:  MOVWF  FF6
10AF4:  MOVLW  0A
10AF6:  MOVWF  FF7
10AF8:  MOVLW  00
10AFA:  MOVWF  FF8
10AFC:  CALL   2084
10B00:  GOTO   11378 (RETURN)
.................... }
.................... 
.................... void smf_read(FlashOperationStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
0F700:  MOVLW  C8
0F702:  MOVWF  FF6
0F704:  MOVLW  0A
0F706:  MOVWF  FF7
0F708:  MOVLW  00
0F70A:  MOVWF  FF8
0F70C:  CALL   2084
....................     fprintf(PC, "___Start SMF Read____\r\n");
0F710:  MOVLW  E2
0F712:  MOVWF  FF6
0F714:  MOVLW  0A
0F716:  MOVWF  FF7
0F718:  MOVLW  00
0F71A:  MOVWF  FF8
0F71C:  CALL   2084
.................... 
....................     int8 buffer[PACKET_SIZE];
.................... 
....................     SmfAddressStruct smf_address = get_smf_address_struct(smf_data->mission_id);
....................     unsigned int32 read_address = smf_data->misf_start_addr; // 呼び出し側でSMF内アドレスを設定する前提
....................     unsigned int32 read_size = smf_data->misf_size;
0F720:  MOVLB  2
0F722:  MOVF   x33,W
0F724:  MOVWF  FE9
0F726:  MOVF   x34,W
0F728:  MOVWF  FEA
0F72A:  MOVFF  FEF,295
0F72E:  MOVFF  295,29C
0F732:  MOVLB  0
0F734:  CALL   F574
0F738:  MOVFF  02,03
0F73C:  MOVF   01,W
0F73E:  MOVWF  FE1
0F740:  MOVFF  03,FE2
0F744:  MOVLW  02
0F746:  MOVWF  FEA
0F748:  MOVLW  75
0F74A:  MOVWF  FE9
0F74C:  MOVLW  08
0F74E:  MOVWF  01
0F750:  MOVFF  FE6,FEE
0F754:  DECFSZ 01,F
0F756:  GOTO   F750
0F75A:  MOVLW  04
0F75C:  MOVLB  2
0F75E:  ADDWF  x33,W
0F760:  MOVWF  FE9
0F762:  MOVLW  00
0F764:  ADDWFC x34,W
0F766:  MOVWF  FEA
0F768:  MOVFF  FEF,27D
0F76C:  MOVFF  FEC,27E
0F770:  MOVFF  FEC,27F
0F774:  MOVFF  FEC,280
0F778:  MOVF   FED,F
0F77A:  MOVF   FED,F
0F77C:  MOVF   FED,F
0F77E:  MOVLW  08
0F780:  ADDWF  x33,W
0F782:  MOVWF  FE9
0F784:  MOVLW  00
0F786:  ADDWFC x34,W
0F788:  MOVWF  FEA
0F78A:  MOVFF  FEF,281
0F78E:  MOVFF  FEC,282
0F792:  MOVFF  FEC,283
0F796:  MOVFF  FEC,284
0F79A:  MOVF   FED,F
0F79C:  MOVF   FED,F
0F79E:  MOVF   FED,F
.................... 
....................     // 境界チェック (start/end は [start_address, end_address) の半開区間想定)
....................     if (read_address < (unsigned int32)smf_address.start_address || read_address >= (unsigned int32)smf_address.end_address) {
0F7A0:  MOVF   x80,W
0F7A2:  SUBWF  x78,W
0F7A4:  BTFSC  FD8.0
0F7A6:  BRA    F7AE
0F7A8:  MOVLB  0
0F7AA:  GOTO   F7F8
0F7AE:  MOVLB  0
0F7B0:  BTFSS  FD8.2
0F7B2:  GOTO   F852
0F7B6:  MOVLB  2
0F7B8:  MOVF   x7F,W
0F7BA:  SUBWF  x77,W
0F7BC:  BTFSC  FD8.0
0F7BE:  BRA    F7C6
0F7C0:  MOVLB  0
0F7C2:  GOTO   F7F8
0F7C6:  MOVLB  0
0F7C8:  BTFSS  FD8.2
0F7CA:  GOTO   F852
0F7CE:  MOVLB  2
0F7D0:  MOVF   x7E,W
0F7D2:  SUBWF  x76,W
0F7D4:  BTFSC  FD8.0
0F7D6:  BRA    F7DE
0F7D8:  MOVLB  0
0F7DA:  GOTO   F7F8
0F7DE:  MOVLB  0
0F7E0:  BTFSS  FD8.2
0F7E2:  GOTO   F852
0F7E6:  MOVLB  2
0F7E8:  MOVF   x75,W
0F7EA:  SUBWF  x7D,W
0F7EC:  BTFSC  FD8.0
0F7EE:  BRA    F7F6
0F7F0:  MOVLB  0
0F7F2:  GOTO   F852
0F7F6:  MOVLB  0
0F7F8:  MOVLB  2
0F7FA:  MOVF   x7C,W
0F7FC:  SUBWF  x80,W
0F7FE:  BTFSC  FD8.0
0F800:  BRA    F808
0F802:  MOVLB  0
0F804:  GOTO   F976
0F808:  MOVLB  0
0F80A:  BTFSS  FD8.2
0F80C:  GOTO   F852
0F810:  MOVLB  2
0F812:  MOVF   x7B,W
0F814:  SUBWF  x7F,W
0F816:  BTFSC  FD8.0
0F818:  BRA    F820
0F81A:  MOVLB  0
0F81C:  GOTO   F976
0F820:  MOVLB  0
0F822:  BTFSS  FD8.2
0F824:  GOTO   F852
0F828:  MOVLB  2
0F82A:  MOVF   x7A,W
0F82C:  SUBWF  x7E,W
0F82E:  BTFSC  FD8.0
0F830:  BRA    F838
0F832:  MOVLB  0
0F834:  GOTO   F976
0F838:  MOVLB  0
0F83A:  BTFSS  FD8.2
0F83C:  GOTO   F852
0F840:  MOVLB  2
0F842:  MOVF   x79,W
0F844:  SUBWF  x7D,W
0F846:  BTFSC  FD8.0
0F848:  BRA    F850
0F84A:  MOVLB  0
0F84C:  GOTO   F976
0F850:  MOVLB  0
....................         fprintf(PC, "Error: Read address 0x%08LX out of SMF mission range [0x%08LX - 0x%08LX)\r\n",
....................                 read_address, (unsigned int32)smf_address.start_address, (unsigned int32)smf_address.end_address);
0F852:  MOVLW  FA
0F854:  MOVWF  FF6
0F856:  MOVLW  0A
0F858:  MOVWF  FF7
0F85A:  MOVLW  00
0F85C:  MOVWF  FF8
0F85E:  MOVLW  16
0F860:  MOVLB  3
0F862:  MOVWF  x1E
0F864:  MOVLB  0
0F866:  CALL   20BA
0F86A:  MOVFF  280,A77
0F86E:  MOVLW  37
0F870:  MOVLB  A
0F872:  MOVWF  x78
0F874:  MOVLB  0
0F876:  CALL   22D0
0F87A:  MOVFF  27F,A77
0F87E:  MOVLW  37
0F880:  MOVLB  A
0F882:  MOVWF  x78
0F884:  MOVLB  0
0F886:  CALL   22D0
0F88A:  MOVFF  27E,A77
0F88E:  MOVLW  37
0F890:  MOVLB  A
0F892:  MOVWF  x78
0F894:  MOVLB  0
0F896:  CALL   22D0
0F89A:  MOVFF  27D,A77
0F89E:  MOVLW  37
0F8A0:  MOVLB  A
0F8A2:  MOVWF  x78
0F8A4:  MOVLB  0
0F8A6:  CALL   22D0
0F8AA:  MOVLW  15
0F8AC:  MOVWF  FF6
0F8AE:  MOVLW  0B
0F8B0:  MOVWF  FF7
0F8B2:  MOVLW  00
0F8B4:  MOVWF  FF8
0F8B6:  MOVLW  1D
0F8B8:  MOVLB  3
0F8BA:  MOVWF  x1E
0F8BC:  MOVLB  0
0F8BE:  CALL   20BA
0F8C2:  MOVFF  278,A77
0F8C6:  MOVLW  37
0F8C8:  MOVLB  A
0F8CA:  MOVWF  x78
0F8CC:  MOVLB  0
0F8CE:  CALL   22D0
0F8D2:  MOVFF  277,A77
0F8D6:  MOVLW  37
0F8D8:  MOVLB  A
0F8DA:  MOVWF  x78
0F8DC:  MOVLB  0
0F8DE:  CALL   22D0
0F8E2:  MOVFF  276,A77
0F8E6:  MOVLW  37
0F8E8:  MOVLB  A
0F8EA:  MOVWF  x78
0F8EC:  MOVLB  0
0F8EE:  CALL   22D0
0F8F2:  MOVFF  275,A77
0F8F6:  MOVLW  37
0F8F8:  MOVLB  A
0F8FA:  MOVWF  x78
0F8FC:  MOVLB  0
0F8FE:  CALL   22D0
0F902:  MOVLW  37
0F904:  MOVWF  FF6
0F906:  MOVLW  0B
0F908:  MOVWF  FF7
0F90A:  MOVLW  00
0F90C:  MOVWF  FF8
0F90E:  MOVLW  05
0F910:  MOVLB  3
0F912:  MOVWF  x1E
0F914:  MOVLB  0
0F916:  CALL   20BA
0F91A:  MOVFF  27C,A77
0F91E:  MOVLW  37
0F920:  MOVLB  A
0F922:  MOVWF  x78
0F924:  MOVLB  0
0F926:  CALL   22D0
0F92A:  MOVFF  27B,A77
0F92E:  MOVLW  37
0F930:  MOVLB  A
0F932:  MOVWF  x78
0F934:  MOVLB  0
0F936:  CALL   22D0
0F93A:  MOVFF  27A,A77
0F93E:  MOVLW  37
0F940:  MOVLB  A
0F942:  MOVWF  x78
0F944:  MOVLB  0
0F946:  CALL   22D0
0F94A:  MOVFF  279,A77
0F94E:  MOVLW  37
0F950:  MOVLB  A
0F952:  MOVWF  x78
0F954:  MOVLB  0
0F956:  CALL   22D0
0F95A:  MOVLW  41
0F95C:  MOVWF  FF6
0F95E:  MOVLW  0B
0F960:  MOVWF  FF7
0F962:  MOVLW  00
0F964:  MOVWF  FF8
0F966:  MOVLW  03
0F968:  MOVLB  3
0F96A:  MOVWF  x1E
0F96C:  MOVLB  0
0F96E:  CALL   20BA
....................         return;
0F972:  GOTO   FE26
....................     }
....................     unsigned int32 mission_remaining = (unsigned int32)smf_address.end_address - read_address; // 読める残り
0F976:  MOVLB  2
0F978:  MOVF   x7D,W
0F97A:  SUBWF  x79,W
0F97C:  MOVWF  x85
0F97E:  MOVF   x7E,W
0F980:  SUBWFB x7A,W
0F982:  MOVWF  x86
0F984:  MOVF   x7F,W
0F986:  SUBWFB x7B,W
0F988:  MOVWF  x87
0F98A:  MOVF   x80,W
0F98C:  SUBWFB x7C,W
0F98E:  MOVWF  x88
....................     if (read_size > mission_remaining) {
0F990:  MOVF   x88,W
0F992:  SUBWF  x84,W
0F994:  BTFSC  FD8.0
0F996:  BRA    F99E
0F998:  MOVLB  0
0F99A:  GOTO   FA70
0F99E:  MOVLB  0
0F9A0:  BTFSS  FD8.2
0F9A2:  GOTO   F9E8
0F9A6:  MOVLB  2
0F9A8:  MOVF   x87,W
0F9AA:  SUBWF  x83,W
0F9AC:  BTFSC  FD8.0
0F9AE:  BRA    F9B6
0F9B0:  MOVLB  0
0F9B2:  GOTO   FA70
0F9B6:  MOVLB  0
0F9B8:  BTFSS  FD8.2
0F9BA:  GOTO   F9E8
0F9BE:  MOVLB  2
0F9C0:  MOVF   x86,W
0F9C2:  SUBWF  x82,W
0F9C4:  BTFSC  FD8.0
0F9C6:  BRA    F9CE
0F9C8:  MOVLB  0
0F9CA:  GOTO   FA70
0F9CE:  MOVLB  0
0F9D0:  BTFSS  FD8.2
0F9D2:  GOTO   F9E8
0F9D6:  MOVLB  2
0F9D8:  MOVF   x81,W
0F9DA:  SUBWF  x85,W
0F9DC:  BTFSS  FD8.0
0F9DE:  BRA    F9E6
0F9E0:  MOVLB  0
0F9E2:  GOTO   FA70
0F9E6:  MOVLB  0
....................         fprintf(PC, "Warn: Adjust read size from %lu to %lu (mission end)\r\n", read_size, mission_remaining);
0F9E8:  MOVLW  46
0F9EA:  MOVWF  FF6
0F9EC:  MOVLW  0B
0F9EE:  MOVWF  FF7
0F9F0:  MOVLW  00
0F9F2:  MOVWF  FF8
0F9F4:  MOVLW  1C
0F9F6:  MOVLB  3
0F9F8:  MOVWF  x1E
0F9FA:  MOVLB  0
0F9FC:  CALL   20BA
0FA00:  MOVLW  41
0FA02:  MOVWF  FE9
0FA04:  MOVFF  284,2E6
0FA08:  MOVFF  283,2E5
0FA0C:  MOVFF  282,2E4
0FA10:  MOVFF  281,2E3
0FA14:  CALL   5F3C
0FA18:  MOVLW  65
0FA1A:  MOVWF  FF6
0FA1C:  MOVLW  0B
0FA1E:  MOVWF  FF7
0FA20:  MOVLW  00
0FA22:  MOVWF  FF8
0FA24:  MOVLW  04
0FA26:  MOVLB  3
0FA28:  MOVWF  x1E
0FA2A:  MOVLB  0
0FA2C:  CALL   20BA
0FA30:  MOVLW  41
0FA32:  MOVWF  FE9
0FA34:  MOVFF  288,2E6
0FA38:  MOVFF  287,2E5
0FA3C:  MOVFF  286,2E4
0FA40:  MOVFF  285,2E3
0FA44:  CALL   5F3C
0FA48:  MOVLW  6C
0FA4A:  MOVWF  FF6
0FA4C:  MOVLW  0B
0FA4E:  MOVWF  FF7
0FA50:  MOVLW  00
0FA52:  MOVWF  FF8
0FA54:  MOVLW  10
0FA56:  MOVLB  3
0FA58:  MOVWF  x1E
0FA5A:  MOVLB  0
0FA5C:  CALL   20BA
....................         read_size = mission_remaining;
0FA60:  MOVFF  288,284
0FA64:  MOVFF  287,283
0FA68:  MOVFF  286,282
0FA6C:  MOVFF  285,281
....................     }
....................     if (read_size == 0) {
0FA70:  MOVLB  2
0FA72:  MOVF   x81,F
0FA74:  BTFSC  FD8.2
0FA76:  BRA    FA7E
0FA78:  MOVLB  0
0FA7A:  GOTO   FAC4
0FA7E:  MOVLB  0
0FA80:  MOVLB  2
0FA82:  MOVF   x82,F
0FA84:  BTFSC  FD8.2
0FA86:  BRA    FA8E
0FA88:  MOVLB  0
0FA8A:  GOTO   FAC4
0FA8E:  MOVLB  0
0FA90:  MOVLB  2
0FA92:  MOVF   x83,F
0FA94:  BTFSC  FD8.2
0FA96:  BRA    FA9E
0FA98:  MOVLB  0
0FA9A:  GOTO   FAC4
0FA9E:  MOVLB  0
0FAA0:  MOVLB  2
0FAA2:  MOVF   x84,F
0FAA4:  BTFSC  FD8.2
0FAA6:  BRA    FAAE
0FAA8:  MOVLB  0
0FAAA:  GOTO   FAC4
0FAAE:  MOVLB  0
....................         fprintf(PC, "Info: Nothing to read (size=0)\r\n");
0FAB0:  MOVLW  7E
0FAB2:  MOVWF  FF6
0FAB4:  MOVLW  0B
0FAB6:  MOVWF  FF7
0FAB8:  MOVLW  00
0FABA:  MOVWF  FF8
0FABC:  CALL   2084
....................         return;
0FAC0:  GOTO   FE26
....................     }
.................... 
....................     fprintf(PC, "In SMF Read source data address: %LX\r\n", read_address);
0FAC4:  MOVLW  A0
0FAC6:  MOVWF  FF6
0FAC8:  MOVLW  0B
0FACA:  MOVWF  FF7
0FACC:  MOVLW  00
0FACE:  MOVWF  FF8
0FAD0:  MOVLW  21
0FAD2:  MOVLB  3
0FAD4:  MOVWF  x1E
0FAD6:  MOVLB  0
0FAD8:  CALL   20BA
0FADC:  MOVFF  280,A77
0FAE0:  MOVLW  37
0FAE2:  MOVLB  A
0FAE4:  MOVWF  x78
0FAE6:  MOVLB  0
0FAE8:  CALL   22D0
0FAEC:  MOVFF  27F,A77
0FAF0:  MOVLW  37
0FAF2:  MOVLB  A
0FAF4:  MOVWF  x78
0FAF6:  MOVLB  0
0FAF8:  CALL   22D0
0FAFC:  MOVFF  27E,A77
0FB00:  MOVLW  37
0FB02:  MOVLB  A
0FB04:  MOVWF  x78
0FB06:  MOVLB  0
0FB08:  CALL   22D0
0FB0C:  MOVFF  27D,A77
0FB10:  MOVLW  37
0FB12:  MOVLB  A
0FB14:  MOVWF  x78
0FB16:  MOVLB  0
0FB18:  CALL   22D0
0FB1C:  MOVLW  0D
0FB1E:  BTFSS  FA6.6
0FB20:  GOTO   FB1E
0FB24:  MOVLB  E
0FB26:  MOVWF  xF9
0FB28:  MOVLW  0A
0FB2A:  MOVLB  0
0FB2C:  BTFSS  FA6.6
0FB2E:  GOTO   FB2C
0FB32:  MOVLB  E
0FB34:  MOVWF  xF9
....................     fprintf(PC, "In SMF Read data size          : %lu (0x%lx)\r\n\r\n", read_size, read_size);
0FB36:  MOVLW  C8
0FB38:  MOVWF  FF6
0FB3A:  MOVLW  0B
0FB3C:  MOVWF  FF7
0FB3E:  MOVLW  00
0FB40:  MOVWF  FF8
0FB42:  MOVLW  21
0FB44:  MOVLB  3
0FB46:  MOVWF  x1E
0FB48:  MOVLB  0
0FB4A:  CALL   20BA
0FB4E:  MOVLW  41
0FB50:  MOVWF  FE9
0FB52:  MOVFF  284,2E6
0FB56:  MOVFF  283,2E5
0FB5A:  MOVFF  282,2E4
0FB5E:  MOVFF  281,2E3
0FB62:  CALL   5F3C
0FB66:  MOVLW  EC
0FB68:  MOVWF  FF6
0FB6A:  MOVLW  0B
0FB6C:  MOVWF  FF7
0FB6E:  MOVLW  00
0FB70:  MOVWF  FF8
0FB72:  MOVLW  04
0FB74:  MOVLB  3
0FB76:  MOVWF  x1E
0FB78:  MOVLB  0
0FB7A:  CALL   20BA
0FB7E:  MOVFF  284,A77
0FB82:  MOVLW  57
0FB84:  MOVLB  A
0FB86:  MOVWF  x78
0FB88:  MOVLB  0
0FB8A:  CALL   22D0
0FB8E:  MOVFF  283,A77
0FB92:  MOVLW  57
0FB94:  MOVLB  A
0FB96:  MOVWF  x78
0FB98:  MOVLB  0
0FB9A:  CALL   22D0
0FB9E:  MOVFF  282,A77
0FBA2:  MOVLW  57
0FBA4:  MOVLB  A
0FBA6:  MOVWF  x78
0FBA8:  MOVLB  0
0FBAA:  CALL   22D0
0FBAE:  MOVFF  281,A77
0FBB2:  MOVLW  57
0FBB4:  MOVLB  A
0FBB6:  MOVWF  x78
0FBB8:  MOVLB  0
0FBBA:  CALL   22D0
0FBBE:  MOVLW  F3
0FBC0:  MOVWF  FF6
0FBC2:  MOVLW  0B
0FBC4:  MOVWF  FF7
0FBC6:  MOVLW  00
0FBC8:  MOVWF  FF8
0FBCA:  MOVLW  05
0FBCC:  MOVLB  3
0FBCE:  MOVWF  x1E
0FBD0:  MOVLB  0
0FBD2:  CALL   20BA
.................... 
....................     if (!is_connect(smf)){
0FBD6:  MOVFF  119,2DC
0FBDA:  MOVFF  118,2DB
0FBDE:  MOVFF  117,2DA
0FBE2:  MOVFF  116,2D9
0FBE6:  CALL   2B9A
0FBEA:  MOVF   01,F
0FBEC:  BTFSS  FD8.2
0FBEE:  GOTO   FC02
....................         fprintf(PC, "Error: SMF is not connected\r\n");
0FBF2:  MOVLW  FA
0FBF4:  MOVWF  FF6
0FBF6:  MOVLW  0B
0FBF8:  MOVWF  FF7
0FBFA:  MOVLW  00
0FBFC:  MOVWF  FF8
0FBFE:  CALL   2084
....................     }
....................     fprintf(PC, "READ DATA FROM SMF...\r\n");
0FC02:  MOVLW  18
0FC04:  MOVWF  FF6
0FC06:  MOVLW  0C
0FC08:  MOVWF  FF7
0FC0A:  MOVLW  00
0FC0C:  MOVWF  FF8
0FC0E:  CALL   2084
....................     unsigned int32 end_address = read_address + read_size;
0FC12:  MOVLB  2
0FC14:  MOVF   x81,W
0FC16:  ADDWF  x7D,W
0FC18:  MOVWF  x89
0FC1A:  MOVF   x82,W
0FC1C:  ADDWFC x7E,W
0FC1E:  MOVWF  x8A
0FC20:  MOVF   x83,W
0FC22:  ADDWFC x7F,W
0FC24:  MOVWF  x8B
0FC26:  MOVF   x84,W
0FC28:  ADDWFC x80,W
0FC2A:  MOVWF  x8C
....................     for (unsigned int32 addr = read_address; addr < end_address; addr += PACKET_SIZE) {
0FC2C:  MOVFF  280,290
0FC30:  MOVFF  27F,28F
0FC34:  MOVFF  27E,28E
0FC38:  MOVFF  27D,28D
0FC3C:  MOVLB  0
0FC3E:  MOVLB  2
0FC40:  MOVF   x90,W
0FC42:  SUBWF  x8C,W
0FC44:  BTFSC  FD8.0
0FC46:  BRA    FC4E
0FC48:  MOVLB  0
0FC4A:  GOTO   FE06
0FC4E:  MOVLB  0
0FC50:  BTFSS  FD8.2
0FC52:  GOTO   FC98
0FC56:  MOVLB  2
0FC58:  MOVF   x8F,W
0FC5A:  SUBWF  x8B,W
0FC5C:  BTFSC  FD8.0
0FC5E:  BRA    FC66
0FC60:  MOVLB  0
0FC62:  GOTO   FE06
0FC66:  MOVLB  0
0FC68:  BTFSS  FD8.2
0FC6A:  GOTO   FC98
0FC6E:  MOVLB  2
0FC70:  MOVF   x8E,W
0FC72:  SUBWF  x8A,W
0FC74:  BTFSC  FD8.0
0FC76:  BRA    FC7E
0FC78:  MOVLB  0
0FC7A:  GOTO   FE06
0FC7E:  MOVLB  0
0FC80:  BTFSS  FD8.2
0FC82:  GOTO   FC98
0FC86:  MOVLB  2
0FC88:  MOVF   x89,W
0FC8A:  SUBWF  x8D,W
0FC8C:  BTFSS  FD8.0
0FC8E:  BRA    FC96
0FC90:  MOVLB  0
0FC92:  GOTO   FE06
0FC96:  MOVLB  0
....................         unsigned int16 chunk = (end_address - addr) >= PACKET_SIZE ? PACKET_SIZE : (unsigned int16)(end_address - addr);
0FC98:  MOVLB  2
0FC9A:  MOVF   x8D,W
0FC9C:  SUBWF  x89,W
0FC9E:  MOVWF  x95
0FCA0:  MOVF   x8E,W
0FCA2:  SUBWFB x8A,W
0FCA4:  MOVWF  x96
0FCA6:  MOVF   x8F,W
0FCA8:  SUBWFB x8B,W
0FCAA:  MOVWF  x97
0FCAC:  MOVF   x90,W
0FCAE:  SUBWFB x8C,W
0FCB0:  MOVWF  x98
0FCB2:  MOVF   x98,F
0FCB4:  BTFSC  FD8.2
0FCB6:  BRA    FCBE
0FCB8:  MOVLB  0
0FCBA:  GOTO   FCF2
0FCBE:  MOVLB  0
0FCC0:  MOVLB  2
0FCC2:  MOVF   x97,F
0FCC4:  BTFSC  FD8.2
0FCC6:  BRA    FCCE
0FCC8:  MOVLB  0
0FCCA:  GOTO   FCF2
0FCCE:  MOVLB  0
0FCD0:  MOVLB  2
0FCD2:  MOVF   x96,F
0FCD4:  BTFSC  FD8.2
0FCD6:  BRA    FCDE
0FCD8:  MOVLB  0
0FCDA:  GOTO   FCF2
0FCDE:  MOVLB  0
0FCE0:  MOVLB  2
0FCE2:  MOVF   x95,W
0FCE4:  SUBLW  3F
0FCE6:  BTFSS  FD8.0
0FCE8:  BRA    FCF0
0FCEA:  MOVLB  0
0FCEC:  GOTO   FCFA
0FCF0:  MOVLB  0
0FCF2:  CLRF   03
0FCF4:  MOVLW  40
0FCF6:  GOTO   FD1C
0FCFA:  MOVLB  2
0FCFC:  MOVF   x8D,W
0FCFE:  SUBWF  x89,W
0FD00:  MOVWF  00
0FD02:  MOVF   x8E,W
0FD04:  SUBWFB x8A,W
0FD06:  MOVWF  01
0FD08:  MOVF   x8F,W
0FD0A:  SUBWFB x8B,W
0FD0C:  MOVWF  02
0FD0E:  MOVF   x90,W
0FD10:  SUBWFB x8C,W
0FD12:  MOVWF  03
0FD14:  MOVFF  01,03
0FD18:  MOVF   00,W
0FD1A:  MOVLB  0
0FD1C:  MOVLB  2
0FD1E:  MOVWF  x91
0FD20:  MOVFF  03,292
0FD24:  MOVLB  0
....................         read_data_bytes(smf, addr, buffer, chunk);
0FD26:  MOVFF  119,B67
0FD2A:  MOVFF  118,B66
0FD2E:  MOVFF  117,B65
0FD32:  MOVFF  116,B64
0FD36:  MOVFF  290,B6B
0FD3A:  MOVFF  28F,B6A
0FD3E:  MOVFF  28E,B69
0FD42:  MOVFF  28D,B68
0FD46:  MOVLW  02
0FD48:  MOVLB  B
0FD4A:  MOVWF  x6D
0FD4C:  MOVLW  35
0FD4E:  MOVWF  x6C
0FD50:  CLRF   x71
0FD52:  CLRF   x70
0FD54:  MOVFF  292,B6F
0FD58:  MOVFF  291,B6E
0FD5C:  MOVLB  0
0FD5E:  CALL   2C86
....................         for (unsigned int16 i = 0; i < chunk; i++) fprintf(PC, "%02X ", buffer[i]);
0FD62:  MOVLB  2
0FD64:  CLRF   x94
0FD66:  CLRF   x93
0FD68:  MOVLB  0
0FD6A:  MOVLB  2
0FD6C:  MOVF   x94,W
0FD6E:  SUBWF  x92,W
0FD70:  BTFSC  FD8.0
0FD72:  BRA    FD7A
0FD74:  MOVLB  0
0FD76:  GOTO   FDD2
0FD7A:  MOVLB  0
0FD7C:  BTFSS  FD8.2
0FD7E:  GOTO   FD94
0FD82:  MOVLB  2
0FD84:  MOVF   x91,W
0FD86:  SUBWF  x93,W
0FD88:  BTFSS  FD8.0
0FD8A:  BRA    FD92
0FD8C:  MOVLB  0
0FD8E:  GOTO   FDD2
0FD92:  MOVLB  0
0FD94:  MOVLW  35
0FD96:  MOVLB  2
0FD98:  ADDWF  x93,W
0FD9A:  MOVWF  FE9
0FD9C:  MOVLW  02
0FD9E:  ADDWFC x94,W
0FDA0:  MOVWF  FEA
0FDA2:  MOVFF  FEF,295
0FDA6:  MOVFF  295,A77
0FDAA:  MOVLW  37
0FDAC:  MOVLB  A
0FDAE:  MOVWF  x78
0FDB0:  MOVLB  0
0FDB2:  CALL   22D0
0FDB6:  MOVLW  20
0FDB8:  BTFSS  FA6.6
0FDBA:  GOTO   FDB8
0FDBE:  MOVLB  E
0FDC0:  MOVWF  xF9
0FDC2:  MOVLB  0
0FDC4:  MOVLB  2
0FDC6:  INCF   x93,F
0FDC8:  BTFSC  FD8.2
0FDCA:  INCF   x94,F
0FDCC:  MOVLB  0
0FDCE:  GOTO   FD6A
....................         fprintf(PC, "\r\n");
0FDD2:  MOVLW  0D
0FDD4:  BTFSS  FA6.6
0FDD6:  GOTO   FDD4
0FDDA:  MOVLB  E
0FDDC:  MOVWF  xF9
0FDDE:  MOVLW  0A
0FDE0:  MOVLB  0
0FDE2:  BTFSS  FA6.6
0FDE4:  GOTO   FDE2
0FDE8:  MOVLB  E
0FDEA:  MOVWF  xF9
0FDEC:  MOVLB  0
0FDEE:  MOVLW  40
0FDF0:  MOVLB  2
0FDF2:  ADDWF  x8D,F
0FDF4:  MOVLW  00
0FDF6:  ADDWFC x8E,F
0FDF8:  MOVLW  00
0FDFA:  ADDWFC x8F,F
0FDFC:  MOVLW  00
0FDFE:  ADDWFC x90,F
0FE00:  MOVLB  0
0FE02:  GOTO   FC3E
....................     }
....................     fprintf(PC, "\r\n___End SMF Read____\r\n");
0FE06:  MOVLW  30
0FE08:  MOVWF  FF6
0FE0A:  MOVLW  0C
0FE0C:  MOVWF  FF7
0FE0E:  MOVLW  00
0FE10:  MOVWF  FF8
0FE12:  CALL   2084
....................     fprintf(PC, "____________________\r\n\r\n");
0FE16:  MOVLW  48
0FE18:  MOVWF  FF6
0FE1A:  MOVLW  0C
0FE1C:  MOVWF  FF7
0FE1E:  MOVLW  00
0FE20:  MOVWF  FF8
0FE22:  CALL   2084
0FE26:  GOTO   11388 (RETURN)
.................... }
.................... 
.................... void smf_erase(FlashOperationStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
10B04:  MOVLW  62
10B06:  MOVWF  FF6
10B08:  MOVLW  0C
10B0A:  MOVWF  FF7
10B0C:  MOVLW  00
10B0E:  MOVWF  FF8
10B10:  CALL   2084
....................     fprintf(PC, "___Start smf_erase____\r\n");
10B14:  MOVLW  7C
10B16:  MOVWF  FF6
10B18:  MOVLW  0C
10B1A:  MOVWF  FF7
10B1C:  MOVLW  00
10B1E:  MOVWF  FF8
10B20:  CALL   2084
.................... 
....................     SmfAddressStruct mission_type = get_smf_address_struct(smf_data->mission_id);
....................     unsigned int32 erase_address = smf_data->misf_start_addr;
....................     unsigned int32 erase_size = smf_data->misf_size;
10B24:  MOVLB  2
10B26:  MOVF   x33,W
10B28:  MOVWF  FE9
10B2A:  MOVF   x34,W
10B2C:  MOVWF  FEA
10B2E:  MOVFF  FEF,24D
10B32:  MOVFF  24D,29C
10B36:  MOVLB  0
10B38:  CALL   F574
10B3C:  MOVFF  02,03
10B40:  MOVF   01,W
10B42:  MOVWF  FE1
10B44:  MOVFF  03,FE2
10B48:  MOVLW  02
10B4A:  MOVWF  FEA
10B4C:  MOVLW  35
10B4E:  MOVWF  FE9
10B50:  MOVLW  08
10B52:  MOVWF  01
10B54:  MOVFF  FE6,FEE
10B58:  DECFSZ 01,F
10B5A:  GOTO   10B54
10B5E:  MOVLW  04
10B60:  MOVLB  2
10B62:  ADDWF  x33,W
10B64:  MOVWF  FE9
10B66:  MOVLW  00
10B68:  ADDWFC x34,W
10B6A:  MOVWF  FEA
10B6C:  MOVFF  FEF,23D
10B70:  MOVFF  FEC,23E
10B74:  MOVFF  FEC,23F
10B78:  MOVFF  FEC,240
10B7C:  MOVF   FED,F
10B7E:  MOVF   FED,F
10B80:  MOVF   FED,F
10B82:  MOVLW  08
10B84:  ADDWF  x33,W
10B86:  MOVWF  FE9
10B88:  MOVLW  00
10B8A:  ADDWFC x34,W
10B8C:  MOVWF  FEA
10B8E:  MOVFF  FEF,241
10B92:  MOVFF  FEC,242
10B96:  MOVFF  FEC,243
10B9A:  MOVFF  FEC,244
10B9E:  MOVF   FED,F
10BA0:  MOVF   FED,F
10BA2:  MOVF   FED,F
....................     fprintf(PC, "[SMF] Erase address   : %LX\r\n", erase_address);
10BA4:  MOVLW  96
10BA6:  MOVWF  FF6
10BA8:  MOVLW  0C
10BAA:  MOVWF  FF7
10BAC:  MOVLW  00
10BAE:  MOVWF  FF8
10BB0:  MOVLW  18
10BB2:  MOVLB  3
10BB4:  MOVWF  x1E
10BB6:  MOVLB  0
10BB8:  CALL   20BA
10BBC:  MOVFF  240,A77
10BC0:  MOVLW  37
10BC2:  MOVLB  A
10BC4:  MOVWF  x78
10BC6:  MOVLB  0
10BC8:  CALL   22D0
10BCC:  MOVFF  23F,A77
10BD0:  MOVLW  37
10BD2:  MOVLB  A
10BD4:  MOVWF  x78
10BD6:  MOVLB  0
10BD8:  CALL   22D0
10BDC:  MOVFF  23E,A77
10BE0:  MOVLW  37
10BE2:  MOVLB  A
10BE4:  MOVWF  x78
10BE6:  MOVLB  0
10BE8:  CALL   22D0
10BEC:  MOVFF  23D,A77
10BF0:  MOVLW  37
10BF2:  MOVLB  A
10BF4:  MOVWF  x78
10BF6:  MOVLB  0
10BF8:  CALL   22D0
10BFC:  MOVLW  0D
10BFE:  BTFSS  FA6.6
10C00:  GOTO   10BFE
10C04:  MOVLB  E
10C06:  MOVWF  xF9
10C08:  MOVLW  0A
10C0A:  MOVLB  0
10C0C:  BTFSS  FA6.6
10C0E:  GOTO   10C0C
10C12:  MOVLB  E
10C14:  MOVWF  xF9
....................     fprintf(PC, "[SMF] Erase data size : %lu (0x%lx)\r\n\r\n", erase_size, erase_size);
10C16:  MOVLW  B4
10C18:  MOVWF  FF6
10C1A:  MOVLW  0C
10C1C:  MOVWF  FF7
10C1E:  MOVLW  00
10C20:  MOVWF  FF8
10C22:  MOVLW  18
10C24:  MOVLB  3
10C26:  MOVWF  x1E
10C28:  MOVLB  0
10C2A:  CALL   20BA
10C2E:  MOVLW  41
10C30:  MOVWF  FE9
10C32:  MOVFF  244,2E6
10C36:  MOVFF  243,2E5
10C3A:  MOVFF  242,2E4
10C3E:  MOVFF  241,2E3
10C42:  CALL   5F3C
10C46:  MOVLW  CF
10C48:  MOVWF  FF6
10C4A:  MOVLW  0C
10C4C:  MOVWF  FF7
10C4E:  MOVLW  00
10C50:  MOVWF  FF8
10C52:  MOVLW  04
10C54:  MOVLB  3
10C56:  MOVWF  x1E
10C58:  MOVLB  0
10C5A:  CALL   20BA
10C5E:  MOVFF  244,A77
10C62:  MOVLW  57
10C64:  MOVLB  A
10C66:  MOVWF  x78
10C68:  MOVLB  0
10C6A:  CALL   22D0
10C6E:  MOVFF  243,A77
10C72:  MOVLW  57
10C74:  MOVLB  A
10C76:  MOVWF  x78
10C78:  MOVLB  0
10C7A:  CALL   22D0
10C7E:  MOVFF  242,A77
10C82:  MOVLW  57
10C84:  MOVLB  A
10C86:  MOVWF  x78
10C88:  MOVLB  0
10C8A:  CALL   22D0
10C8E:  MOVFF  241,A77
10C92:  MOVLW  57
10C94:  MOVLB  A
10C96:  MOVWF  x78
10C98:  MOVLB  0
10C9A:  CALL   22D0
10C9E:  MOVLW  D6
10CA0:  MOVWF  FF6
10CA2:  MOVLW  0C
10CA4:  MOVWF  FF7
10CA6:  MOVLW  00
10CA8:  MOVWF  FF8
10CAA:  MOVLW  05
10CAC:  MOVLB  3
10CAE:  MOVWF  x1E
10CB0:  MOVLB  0
10CB2:  CALL   20BA
.................... 
....................     if (!is_connect(smf)){
10CB6:  MOVFF  119,2DC
10CBA:  MOVFF  118,2DB
10CBE:  MOVFF  117,2DA
10CC2:  MOVFF  116,2D9
10CC6:  CALL   2B9A
10CCA:  MOVF   01,F
10CCC:  BTFSS  FD8.2
10CCE:  GOTO   10CE6
....................         fprintf(PC, "Error: SMF is not connected\r\n");
10CD2:  MOVLW  DC
10CD4:  MOVWF  FF6
10CD6:  MOVLW  0C
10CD8:  MOVWF  FF7
10CDA:  MOVLW  00
10CDC:  MOVWF  FF8
10CDE:  CALL   2084
....................         return;
10CE2:  GOTO   11182
....................     }
.................... 
....................     // Check if erase operation is within mission_type range
....................     if (erase_address < mission_type.start_address || erase_address >= mission_type.end_address) {
10CE6:  MOVLB  2
10CE8:  MOVF   x40,W
10CEA:  SUBWF  x38,W
10CEC:  BTFSC  FD8.0
10CEE:  BRA    10CF6
10CF0:  MOVLB  0
10CF2:  GOTO   10D40
10CF6:  MOVLB  0
10CF8:  BTFSS  FD8.2
10CFA:  GOTO   10D9A
10CFE:  MOVLB  2
10D00:  MOVF   x3F,W
10D02:  SUBWF  x37,W
10D04:  BTFSC  FD8.0
10D06:  BRA    10D0E
10D08:  MOVLB  0
10D0A:  GOTO   10D40
10D0E:  MOVLB  0
10D10:  BTFSS  FD8.2
10D12:  GOTO   10D9A
10D16:  MOVLB  2
10D18:  MOVF   x3E,W
10D1A:  SUBWF  x36,W
10D1C:  BTFSC  FD8.0
10D1E:  BRA    10D26
10D20:  MOVLB  0
10D22:  GOTO   10D40
10D26:  MOVLB  0
10D28:  BTFSS  FD8.2
10D2A:  GOTO   10D9A
10D2E:  MOVLB  2
10D30:  MOVF   x35,W
10D32:  SUBWF  x3D,W
10D34:  BTFSC  FD8.0
10D36:  BRA    10D3E
10D38:  MOVLB  0
10D3A:  GOTO   10D9A
10D3E:  MOVLB  0
10D40:  MOVLB  2
10D42:  MOVF   x3C,W
10D44:  SUBWF  x40,W
10D46:  BTFSC  FD8.0
10D48:  BRA    10D50
10D4A:  MOVLB  0
10D4C:  GOTO   10EBE
10D50:  MOVLB  0
10D52:  BTFSS  FD8.2
10D54:  GOTO   10D9A
10D58:  MOVLB  2
10D5A:  MOVF   x3B,W
10D5C:  SUBWF  x3F,W
10D5E:  BTFSC  FD8.0
10D60:  BRA    10D68
10D62:  MOVLB  0
10D64:  GOTO   10EBE
10D68:  MOVLB  0
10D6A:  BTFSS  FD8.2
10D6C:  GOTO   10D9A
10D70:  MOVLB  2
10D72:  MOVF   x3A,W
10D74:  SUBWF  x3E,W
10D76:  BTFSC  FD8.0
10D78:  BRA    10D80
10D7A:  MOVLB  0
10D7C:  GOTO   10EBE
10D80:  MOVLB  0
10D82:  BTFSS  FD8.2
10D84:  GOTO   10D9A
10D88:  MOVLB  2
10D8A:  MOVF   x39,W
10D8C:  SUBWF  x3D,W
10D8E:  BTFSC  FD8.0
10D90:  BRA    10D98
10D92:  MOVLB  0
10D94:  GOTO   10EBE
10D98:  MOVLB  0
....................         fprintf(PC, "Error: Erase source address 0x%LX is outside mission range [0x%LX - 0x%LX]\r\n", 
....................                 erase_address, mission_type.start_address, mission_type.end_address);
10D9A:  MOVLW  FA
10D9C:  MOVWF  FF6
10D9E:  MOVLW  0C
10DA0:  MOVWF  FF7
10DA2:  MOVLW  00
10DA4:  MOVWF  FF8
10DA6:  MOVLW  1E
10DA8:  MOVLB  3
10DAA:  MOVWF  x1E
10DAC:  MOVLB  0
10DAE:  CALL   20BA
10DB2:  MOVFF  240,A77
10DB6:  MOVLW  37
10DB8:  MOVLB  A
10DBA:  MOVWF  x78
10DBC:  MOVLB  0
10DBE:  CALL   22D0
10DC2:  MOVFF  23F,A77
10DC6:  MOVLW  37
10DC8:  MOVLB  A
10DCA:  MOVWF  x78
10DCC:  MOVLB  0
10DCE:  CALL   22D0
10DD2:  MOVFF  23E,A77
10DD6:  MOVLW  37
10DD8:  MOVLB  A
10DDA:  MOVWF  x78
10DDC:  MOVLB  0
10DDE:  CALL   22D0
10DE2:  MOVFF  23D,A77
10DE6:  MOVLW  37
10DE8:  MOVLB  A
10DEA:  MOVWF  x78
10DEC:  MOVLB  0
10DEE:  CALL   22D0
10DF2:  MOVLW  1B
10DF4:  MOVWF  FF6
10DF6:  MOVLW  0D
10DF8:  MOVWF  FF7
10DFA:  MOVLW  00
10DFC:  MOVWF  FF8
10DFE:  MOVLW  1D
10E00:  MOVLB  3
10E02:  MOVWF  x1E
10E04:  MOVLB  0
10E06:  CALL   20BA
10E0A:  MOVFF  238,A77
10E0E:  MOVLW  37
10E10:  MOVLB  A
10E12:  MOVWF  x78
10E14:  MOVLB  0
10E16:  CALL   22D0
10E1A:  MOVFF  237,A77
10E1E:  MOVLW  37
10E20:  MOVLB  A
10E22:  MOVWF  x78
10E24:  MOVLB  0
10E26:  CALL   22D0
10E2A:  MOVFF  236,A77
10E2E:  MOVLW  37
10E30:  MOVLB  A
10E32:  MOVWF  x78
10E34:  MOVLB  0
10E36:  CALL   22D0
10E3A:  MOVFF  235,A77
10E3E:  MOVLW  37
10E40:  MOVLB  A
10E42:  MOVWF  x78
10E44:  MOVLB  0
10E46:  CALL   22D0
10E4A:  MOVLW  3B
10E4C:  MOVWF  FF6
10E4E:  MOVLW  0D
10E50:  MOVWF  FF7
10E52:  MOVLW  00
10E54:  MOVWF  FF8
10E56:  MOVLW  05
10E58:  MOVLB  3
10E5A:  MOVWF  x1E
10E5C:  MOVLB  0
10E5E:  CALL   20BA
10E62:  MOVFF  23C,A77
10E66:  MOVLW  37
10E68:  MOVLB  A
10E6A:  MOVWF  x78
10E6C:  MOVLB  0
10E6E:  CALL   22D0
10E72:  MOVFF  23B,A77
10E76:  MOVLW  37
10E78:  MOVLB  A
10E7A:  MOVWF  x78
10E7C:  MOVLB  0
10E7E:  CALL   22D0
10E82:  MOVFF  23A,A77
10E86:  MOVLW  37
10E88:  MOVLB  A
10E8A:  MOVWF  x78
10E8C:  MOVLB  0
10E8E:  CALL   22D0
10E92:  MOVFF  239,A77
10E96:  MOVLW  37
10E98:  MOVLB  A
10E9A:  MOVWF  x78
10E9C:  MOVLB  0
10E9E:  CALL   22D0
10EA2:  MOVLW  43
10EA4:  MOVWF  FF6
10EA6:  MOVLW  0D
10EA8:  MOVWF  FF7
10EAA:  MOVLW  00
10EAC:  MOVWF  FF8
10EAE:  MOVLW  03
10EB0:  MOVLB  3
10EB2:  MOVWF  x1E
10EB4:  MOVLB  0
10EB6:  CALL   20BA
....................         return;
10EBA:  GOTO   11182
....................     }
.................... 
....................     if ((erase_address + erase_size) > mission_type.end_address) {
10EBE:  MOVLB  2
10EC0:  MOVF   x41,W
10EC2:  ADDWF  x3D,W
10EC4:  MOVWF  x4D
10EC6:  MOVF   x42,W
10EC8:  ADDWFC x3E,W
10ECA:  MOVWF  x4E
10ECC:  MOVF   x43,W
10ECE:  ADDWFC x3F,W
10ED0:  MOVWF  x4F
10ED2:  MOVF   x44,W
10ED4:  ADDWFC x40,W
10ED6:  MOVWF  x50
10ED8:  MOVF   x3C,W
10EDA:  SUBWF  x50,W
10EDC:  BTFSC  FD8.0
10EDE:  BRA    10EE6
10EE0:  MOVLB  0
10EE2:  GOTO   10FD0
10EE6:  MOVLB  0
10EE8:  BTFSS  FD8.2
10EEA:  GOTO   10F30
10EEE:  MOVLB  2
10EF0:  MOVF   x3B,W
10EF2:  SUBWF  x4F,W
10EF4:  BTFSC  FD8.0
10EF6:  BRA    10EFE
10EF8:  MOVLB  0
10EFA:  GOTO   10FD0
10EFE:  MOVLB  0
10F00:  BTFSS  FD8.2
10F02:  GOTO   10F30
10F06:  MOVLB  2
10F08:  MOVF   x3A,W
10F0A:  SUBWF  x4E,W
10F0C:  BTFSC  FD8.0
10F0E:  BRA    10F16
10F10:  MOVLB  0
10F12:  GOTO   10FD0
10F16:  MOVLB  0
10F18:  BTFSS  FD8.2
10F1A:  GOTO   10F30
10F1E:  MOVLB  2
10F20:  MOVF   x4D,W
10F22:  SUBWF  x39,W
10F24:  BTFSS  FD8.0
10F26:  BRA    10F2E
10F28:  MOVLB  0
10F2A:  GOTO   10FD0
10F2E:  MOVLB  0
....................         fprintf(PC, "Error: Erase operation would exceed mission end address 0x%LX\r\n", mission_type.end_address);
10F30:  MOVLW  48
10F32:  MOVWF  FF6
10F34:  MOVLW  0D
10F36:  MOVWF  FF7
10F38:  MOVLW  00
10F3A:  MOVWF  FF8
10F3C:  MOVLW  3A
10F3E:  MOVLB  3
10F40:  MOVWF  x1E
10F42:  MOVLB  0
10F44:  CALL   20BA
10F48:  MOVFF  23C,A77
10F4C:  MOVLW  37
10F4E:  MOVLB  A
10F50:  MOVWF  x78
10F52:  MOVLB  0
10F54:  CALL   22D0
10F58:  MOVFF  23B,A77
10F5C:  MOVLW  37
10F5E:  MOVLB  A
10F60:  MOVWF  x78
10F62:  MOVLB  0
10F64:  CALL   22D0
10F68:  MOVFF  23A,A77
10F6C:  MOVLW  37
10F6E:  MOVLB  A
10F70:  MOVWF  x78
10F72:  MOVLB  0
10F74:  CALL   22D0
10F78:  MOVFF  239,A77
10F7C:  MOVLW  37
10F7E:  MOVLB  A
10F80:  MOVWF  x78
10F82:  MOVLB  0
10F84:  CALL   22D0
10F88:  MOVLW  0D
10F8A:  BTFSS  FA6.6
10F8C:  GOTO   10F8A
10F90:  MOVLB  E
10F92:  MOVWF  xF9
10F94:  MOVLW  0A
10F96:  MOVLB  0
10F98:  BTFSS  FA6.6
10F9A:  GOTO   10F98
10F9E:  MOVLB  E
10FA0:  MOVWF  xF9
....................         fprintf(PC, "Limiting erase size to stay within mission bounds\r\n");
10FA2:  MOVLW  88
10FA4:  MOVWF  FF6
10FA6:  MOVLW  0D
10FA8:  MOVWF  FF7
10FAA:  MOVLW  00
10FAC:  MOVWF  FF8
10FAE:  MOVLB  0
10FB0:  CALL   2084
....................         erase_size = mission_type.end_address - erase_address;
10FB4:  MOVLB  2
10FB6:  MOVF   x3D,W
10FB8:  SUBWF  x39,W
10FBA:  MOVWF  x41
10FBC:  MOVF   x3E,W
10FBE:  SUBWFB x3A,W
10FC0:  MOVWF  x42
10FC2:  MOVF   x3F,W
10FC4:  SUBWFB x3B,W
10FC6:  MOVWF  x43
10FC8:  MOVF   x40,W
10FCA:  SUBWFB x3C,W
10FCC:  MOVWF  x44
10FCE:  MOVLB  0
....................     }
.................... 
....................     fprintf(PC, "Erase operation validated within mission range\r\n");
10FD0:  MOVLW  BC
10FD2:  MOVWF  FF6
10FD4:  MOVLW  0D
10FD6:  MOVWF  FF7
10FD8:  MOVLW  00
10FDA:  MOVWF  FF8
10FDC:  CALL   2084
....................     unsigned int32 erase_end = erase_address + erase_size;
....................     // 4KB境界開始へアライン
....................     unsigned int32 current = erase_address & ~0xFFF;
10FE0:  MOVLB  2
10FE2:  MOVF   x41,W
10FE4:  ADDWF  x3D,W
10FE6:  MOVWF  x45
10FE8:  MOVF   x42,W
10FEA:  ADDWFC x3E,W
10FEC:  MOVWF  x46
10FEE:  MOVF   x43,W
10FF0:  ADDWFC x3F,W
10FF2:  MOVWF  x47
10FF4:  MOVF   x44,W
10FF6:  ADDWFC x40,W
10FF8:  MOVWF  x48
10FFA:  CLRF   x49
10FFC:  MOVF   x3E,W
10FFE:  ANDLW  F0
11000:  MOVWF  x4A
11002:  CLRF   x4B
11004:  CLRF   x4C
11006:  MOVLB  0
....................     while (current < erase_end && current < (unsigned int32)mission_type.end_address) {
11008:  MOVLB  2
1100A:  MOVF   x4C,W
1100C:  SUBWF  x48,W
1100E:  BTFSC  FD8.0
11010:  BRA    11018
11012:  MOVLB  0
11014:  GOTO   110F4
11018:  MOVLB  0
1101A:  BTFSS  FD8.2
1101C:  GOTO   11062
11020:  MOVLB  2
11022:  MOVF   x4B,W
11024:  SUBWF  x47,W
11026:  BTFSC  FD8.0
11028:  BRA    11030
1102A:  MOVLB  0
1102C:  GOTO   110F4
11030:  MOVLB  0
11032:  BTFSS  FD8.2
11034:  GOTO   11062
11038:  MOVLB  2
1103A:  MOVF   x4A,W
1103C:  SUBWF  x46,W
1103E:  BTFSC  FD8.0
11040:  BRA    11048
11042:  MOVLB  0
11044:  GOTO   110F4
11048:  MOVLB  0
1104A:  BTFSS  FD8.2
1104C:  GOTO   11062
11050:  MOVLB  2
11052:  MOVF   x45,W
11054:  SUBWF  x49,W
11056:  BTFSS  FD8.0
11058:  BRA    11060
1105A:  MOVLB  0
1105C:  GOTO   110F4
11060:  MOVLB  0
11062:  MOVLB  2
11064:  MOVF   x4C,W
11066:  SUBWF  x3C,W
11068:  BTFSC  FD8.0
1106A:  BRA    11072
1106C:  MOVLB  0
1106E:  GOTO   110F4
11072:  MOVLB  0
11074:  BTFSS  FD8.2
11076:  GOTO   110BC
1107A:  MOVLB  2
1107C:  MOVF   x4B,W
1107E:  SUBWF  x3B,W
11080:  BTFSC  FD8.0
11082:  BRA    1108A
11084:  MOVLB  0
11086:  GOTO   110F4
1108A:  MOVLB  0
1108C:  BTFSS  FD8.2
1108E:  GOTO   110BC
11092:  MOVLB  2
11094:  MOVF   x4A,W
11096:  SUBWF  x3A,W
11098:  BTFSC  FD8.0
1109A:  BRA    110A2
1109C:  MOVLB  0
1109E:  GOTO   110F4
110A2:  MOVLB  0
110A4:  BTFSS  FD8.2
110A6:  GOTO   110BC
110AA:  MOVLB  2
110AC:  MOVF   x39,W
110AE:  SUBWF  x49,W
110B0:  BTFSS  FD8.0
110B2:  BRA    110BA
110B4:  MOVLB  0
110B6:  GOTO   110F4
110BA:  MOVLB  0
....................         subsector_4kByte_erase(smf, current);
110BC:  MOVFF  119,323
110C0:  MOVFF  118,322
110C4:  MOVFF  117,321
110C8:  MOVFF  116,320
110CC:  MOVFF  24C,327
110D0:  MOVFF  24B,326
110D4:  MOVFF  24A,325
110D8:  MOVFF  249,324
110DC:  CALL   57FA
....................         current += SUBSECTOR_SIZE;
110E0:  MOVLW  10
110E2:  MOVLB  2
110E4:  ADDWF  x4A,F
110E6:  MOVLW  00
110E8:  ADDWFC x4B,F
110EA:  MOVLW  00
110EC:  ADDWFC x4C,F
110EE:  MOVLB  0
110F0:  GOTO   11008
....................     }
....................     fprintf(PC, "Erased %lu bytes (aligned)\r\n", (current - (erase_address & ~0xFFF)));
110F4:  CLRF   00
110F6:  MOVLB  2
110F8:  MOVF   x3E,W
110FA:  ANDLW  F0
110FC:  MOVWF  01
110FE:  CLRF   02
11100:  CLRF   03
11102:  MOVF   00,W
11104:  SUBWF  x49,W
11106:  MOVWF  x4D
11108:  MOVF   01,W
1110A:  SUBWFB x4A,W
1110C:  MOVWF  x4E
1110E:  MOVF   02,W
11110:  SUBWFB x4B,W
11112:  MOVWF  x4F
11114:  MOVF   03,W
11116:  SUBWFB x4C,W
11118:  MOVWF  x50
1111A:  MOVLW  EE
1111C:  MOVWF  FF6
1111E:  MOVLW  0D
11120:  MOVWF  FF7
11122:  MOVLW  00
11124:  MOVWF  FF8
11126:  MOVLW  07
11128:  MOVLB  3
1112A:  MOVWF  x1E
1112C:  MOVLB  0
1112E:  CALL   20BA
11132:  MOVLW  41
11134:  MOVWF  FE9
11136:  MOVFF  250,2E6
1113A:  MOVFF  24F,2E5
1113E:  MOVFF  24E,2E4
11142:  MOVFF  24D,2E3
11146:  CALL   5F3C
1114A:  MOVLW  F8
1114C:  MOVWF  FF6
1114E:  MOVLW  0D
11150:  MOVWF  FF7
11152:  MOVLW  00
11154:  MOVWF  FF8
11156:  MOVLW  12
11158:  MOVLB  3
1115A:  MOVWF  x1E
1115C:  MOVLB  0
1115E:  CALL   20BA
.................... 
....................     fprintf(PC, "\r\n___End smf_erase____\r\n");
11162:  MOVLW  0C
11164:  MOVWF  FF6
11166:  MOVLW  0E
11168:  MOVWF  FF7
1116A:  MOVLW  00
1116C:  MOVWF  FF8
1116E:  CALL   2084
....................     fprintf(PC, "____________________\r\n\r\n");
11172:  MOVLW  26
11174:  MOVWF  FF6
11176:  MOVLW  0E
11178:  MOVWF  FF7
1117A:  MOVLW  00
1117C:  MOVWF  FF8
1117E:  CALL   2084
11182:  GOTO   11398 (RETURN)
.................... }
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id)
.................... {
....................     switch(mission_id)
....................     {
....................         case 0x01:  // CIGS_MEASURE_DATA
....................             return &param.iv1_data;
....................         case 0x02:  // CIGS_PICLOG
....................             return &param.piclog;
....................         default:
....................             fprintf(PC, "Error: Unknown mission_id: %02X\r\n", mission_id);
....................             return 0x00;  // NULL pointer
....................     }
.................... }
.................... 
.................... // mission_idに対応するパーティション情報を更新する関数
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter)
.................... {
....................     SMF_PARTITION* partition = get_smf_partition_by_mission_id(mission_id);
....................     if (partition != 0x00)
....................     {
....................         partition->used_size = used_size;
....................         partition->loop_counter = loop_counter;
....................         fprintf(PC, "Updated partition for mission_id %02X: used_size=%ld, loop_counter=%ld\r\n", 
....................                 mission_id, used_size, loop_counter);
....................     }
.................... }
.................... 
.................... // カウンター更新関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size)
.................... {
....................     // MISF 側 uncopied_counter を転送サイズ分減少 (下限0)
....................     Flash_t *target = 0x00;
....................     switch(mission_id){
....................         case CIGS_PICLOG_DATA: target = piclog_data_ptr; break;
....................         case CIGS_ENVIRO_DATA: target = environment_data_ptr; break;
....................         case CIGS_IV1_HEADER:  target = iv1_header_ptr; break;
....................         case CIGS_IV1_DATA:    target = iv1_data_ptr; break;
....................         case CIGS_IV2_HEADER:  target = iv2_header_ptr; break;
....................         case CIGS_IV2_DATA:    target = iv2_data_ptr; break;
....................         default: break; // DATA_TABLE などは対象外
....................     }
....................     if(target){
....................         unsigned int32 before = target->uncopied_counter;
....................         if(transfer_size >= before) target->uncopied_counter = 0; else target->uncopied_counter -= transfer_size;
....................         fprintf(PC, "[MISF] mission %u uncopied_counter %08LX -> %08LX (-%lu)\r\n", mission_id, before, target->uncopied_counter, transfer_size);
....................         misf_update_address_area();
....................     } else {
....................         fprintf(PC, "[MISF] update_misf_counters: mission %u not handled\r\n", mission_id);
....................     }
.................... }
.................... 
.................... // カウンター初期化関数
.................... void reset_misf_counters(int8 mission_id)
.................... {
....................     Flash_t *target = 0x00;
....................     switch(mission_id){
....................         case CIGS_PICLOG_DATA: target = piclog_data_ptr; break;
....................         case CIGS_ENVIRO_DATA: target = environment_data_ptr; break;
....................         case CIGS_IV1_HEADER:  target = iv1_header_ptr; break;
....................         case CIGS_IV1_DATA:    target = iv1_data_ptr; break;
....................         case CIGS_IV2_HEADER:  target = iv2_header_ptr; break;
....................         case CIGS_IV2_DATA:    target = iv2_data_ptr; break;
....................         default: break;
....................     }
....................     if(target){
....................         target->uncopied_counter = 0;
....................         misf_update_address_area();
....................         fprintf(PC, "[MISF] mission %u uncopied_counter reset\r\n", mission_id);
....................     }
.................... }
.................... 
.................... // カウンター状態表示関数
.................... void print_misf_counter_status(int8 mission_id)
.................... {
....................     Flash_t *target = 0x00;
....................     switch(mission_id){
....................         case CIGS_PICLOG_DATA: target = piclog_data_ptr; break;
....................         case CIGS_ENVIRO_DATA: target = environment_data_ptr; break;
....................         case CIGS_IV1_HEADER:  target = iv1_header_ptr; break;
....................         case CIGS_IV1_DATA:    target = iv1_data_ptr; break;
....................         case CIGS_IV2_HEADER:  target = iv2_header_ptr; break;
....................         case CIGS_IV2_DATA:    target = iv2_data_ptr; break;
....................         default: break;
....................     }
....................     if(target){
....................         fprintf(PC, "[MISF] mission %u status: used=0x%08LX uncopied=0x%08LX r1=0x%02X r2=0x%02X\r\n",
....................                 mission_id, target->used_counter, target->uncopied_counter,
....................                 target->reserve_counter1, target->reserve_counter2);
....................     } else {
....................         fprintf(PC, "[MISF] print status: mission %u not handled\r\n", mission_id);
....................     }
.................... }
.................... // End of file
.................... 
.................... #include "domain/mmj_cigs_flash.c"
.................... #include "mmj_cigs_flash.h"                           
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/mmj_cigs_config.h"             
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=2000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=2000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=1000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=2000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mt25q.h"                
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/tool/calc_tools.h"             
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/smf_queue.h"              
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... 
.................... // 実体宣言
.................... Flash_t data_table = {FLASH_ID_DATA_TABLE, 0, 0, 0};
.................... Flash_t piclog_data = {FLASH_ID_PICLOG, 0, 0, 0};
.................... Flash_t environment_data = {FLASH_ID_ENVIRONMENT, 0, 0, 0};
.................... Flash_t iv1_header = {FLASH_ID_IV1_HEADER, 0, 0, 0};
.................... Flash_t iv1_data = {FLASH_ID_IV1_DATA, 0, 0, 0};
.................... Flash_t iv2_header = {FLASH_ID_IV2_HEADER, 0, 0, 0};
.................... Flash_t iv2_data = {FLASH_ID_IV2_DATA, 0, 0, 0};
.................... 
.................... // ポインタ設定
.................... Flash_t *data_table_ptr = &data_table;
.................... Flash_t *piclog_data_ptr = &piclog_data;
.................... Flash_t *environment_data_ptr = &environment_data;
.................... Flash_t *iv1_header_ptr = &iv1_header;
.................... Flash_t *iv1_data_ptr = &iv1_data;
.................... Flash_t *iv2_header_ptr = &iv2_header;
.................... Flash_t *iv2_data_ptr = &iv2_data;
.................... 
.................... const ADDRESS_AREA_T MISF_ADDRESS_TABLE[FLASH_ID_COUNT] = {
....................     { MISF_CIGS_DATA_TABLE_START,   MISF_CIGS_DATA_TABLE_END,   MISF_CIGS_DATA_TABLE_SIZE },
....................     { MISF_CIGS_PICLOG_START,       MISF_CIGS_PICLOG_END,       MISF_CIGS_PICLOG_SIZE },
....................     { MISF_CIGS_ENVIRO_START,       MISF_CIGS_ENVIRO_END,       MISF_CIGS_ENVIRO_SIZE },
....................     { MISF_CIGS_IV1_HEADER_START,   MISF_CIGS_IV1_HEADER_END,   MISF_CIGS_IV1_HEADER_SIZE },
....................     { MISF_CIGS_IV1_DATA_START,     MISF_CIGS_IV1_DATA_END,     MISF_CIGS_IV1_DATA_SIZE },
....................     { MISF_CIGS_IV2_HEADER_START,   MISF_CIGS_IV2_HEADER_END,   MISF_CIGS_IV2_HEADER_SIZE },
....................     { MISF_CIGS_IV2_DATA_START,     MISF_CIGS_IV2_DATA_END,     MISF_CIGS_IV2_DATA_SIZE }
.................... };
.................... 
.................... FlashCounter_t misf_counter_table[FLASH_ID_COUNT];
.................... FlashCounter_t *misf_counter_table_ptr[FLASH_ID_COUNT] = {&misf_counter_table[0], &misf_counter_table[1], &misf_counter_table[2], &misf_counter_table[3], &misf_counter_table[4], &misf_counter_table[5], &misf_counter_table[6]};
.................... 
.................... 
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
03710:  MOVLW  C6
03712:  MOVWF  FF6
03714:  MOVLW  0F
03716:  MOVWF  FF7
03718:  MOVLW  00
0371A:  MOVWF  FF8
0371C:  CALL   2084
....................     output_high(MIS_FM_CS);
03720:  MOVLW  FE
03722:  MOVWF  F98
03724:  BSF    F8F.0
....................     output_high(SMF_CS);
03726:  MOVLW  FB
03728:  MOVWF  F92
0372A:  BSF    F89.2
.................... 
....................     // 接続処理
....................     if (is_connect(mis_fm)) {
0372C:  MOVFF  115,2DC
03730:  MOVFF  114,2DB
03734:  MOVFF  113,2DA
03738:  MOVFF  112,2D9
0373C:  CALL   2B9A
03740:  MOVF   01,F
03742:  BTFSC  FD8.2
03744:  GOTO   375C
....................         fprintf(PC, "\t[MIS FM] Connected\r\n");
03748:  MOVLW  E2
0374A:  MOVWF  FF6
0374C:  MOVLW  0F
0374E:  MOVWF  FF7
03750:  MOVLW  00
03752:  MOVWF  FF8
03754:  CALL   2084
....................     } else {
03758:  GOTO   376C
....................         fprintf(PC, "\t[MIS FM] Not Connected\r\n");
0375C:  MOVLW  F8
0375E:  MOVWF  FF6
03760:  MOVLW  0F
03762:  MOVWF  FF7
03764:  MOVLW  00
03766:  MOVWF  FF8
03768:  CALL   2084
....................     }
....................     if (is_connect(smf)) {
0376C:  MOVFF  119,2DC
03770:  MOVFF  118,2DB
03774:  MOVFF  117,2DA
03778:  MOVFF  116,2D9
0377C:  CALL   2B9A
03780:  MOVF   01,F
03782:  BTFSC  FD8.2
03784:  GOTO   379C
....................         fprintf(PC, "\t[SMF] Connected\r\n");
03788:  MOVLW  12
0378A:  MOVWF  FF6
0378C:  MOVLW  10
0378E:  MOVWF  FF7
03790:  MOVLW  00
03792:  MOVWF  FF8
03794:  CALL   2084
....................     } else {
03798:  GOTO   37AC
....................         fprintf(PC, "\t[SMF] Not Connected\r\n");
0379C:  MOVLW  26
0379E:  MOVWF  FF6
037A0:  MOVLW  10
037A2:  MOVWF  FF7
037A4:  MOVLW  00
037A6:  MOVWF  FF8
037A8:  CALL   2084
....................     }
.................... 
....................     //=== MIS_FM カウンタテーブル読出し ===//
....................     FlashData_t read_header;
....................     FlashData_t *read_header_ptr = &read_header;
037AC:  MOVLW  02
037AE:  MOVLB  2
037B0:  MOVWF  xC5
037B2:  MOVLW  84
037B4:  MOVWF  xC4
....................     memset(read_header_ptr, 0x00, sizeof(FlashData_t));
037B6:  MOVFF  2C5,FEA
037BA:  MOVFF  2C4,FE9
037BE:  CLRF   00
037C0:  CLRF   02
037C2:  MOVLW  40
037C4:  MOVWF  01
037C6:  MOVLB  0
037C8:  CALL   2C62
....................     read_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, read_header_ptr->bytes, PACKET_SIZE);
037CC:  MOVLB  2
037CE:  MOVF   xC4,W
037D0:  MOVWF  01
037D2:  MOVF   xC5,W
037D4:  MOVWF  03
037D6:  MOVF   01,W
037D8:  MOVWF  xC6
037DA:  MOVFF  03,2C7
037DE:  MOVFF  115,B67
037E2:  MOVFF  114,B66
037E6:  MOVFF  113,B65
037EA:  MOVFF  112,B64
037EE:  MOVLB  B
037F0:  CLRF   x6B
037F2:  CLRF   x6A
037F4:  CLRF   x69
037F6:  CLRF   x68
037F8:  MOVFF  2C7,B6D
037FC:  MOVFF  2C6,B6C
03800:  CLRF   x71
03802:  CLRF   x70
03804:  CLRF   x6F
03806:  MOVLW  40
03808:  MOVWF  x6E
0380A:  MOVLB  0
0380C:  CALL   2C86
.................... 
....................     // CRC 検証
....................     if (read_header_ptr->packet.crc != calc_crc8(read_header_ptr->bytes, PACKET_SIZE - 1)) {
03810:  MOVLW  3F
03812:  MOVLB  2
03814:  ADDWF  xC4,W
03816:  MOVWF  FE9
03818:  MOVLW  00
0381A:  ADDWFC xC5,W
0381C:  MOVWF  FEA
0381E:  MOVFF  FEF,2C6
03822:  MOVF   xC4,W
03824:  MOVWF  01
03826:  MOVF   xC5,W
03828:  MOVWF  03
0382A:  MOVF   01,W
0382C:  MOVWF  xC7
0382E:  MOVFF  03,2C8
03832:  MOVFF  2C8,BF3
03836:  MOVFF  2C7,BF2
0383A:  MOVLW  3F
0383C:  MOVLB  B
0383E:  MOVWF  xF4
03840:  MOVLB  0
03842:  CALL   2E9A
03846:  MOVF   01,W
03848:  MOVLB  2
0384A:  SUBWF  xC6,W
0384C:  BTFSS  FD8.2
0384E:  BRA    3856
03850:  MOVLB  0
03852:  GOTO   3868
03856:  MOVLB  0
....................         fprintf(PC, "\t[MIS FM] CRC error -> initialize counters\r\n");
03858:  MOVLW  3E
0385A:  MOVWF  FF6
0385C:  MOVLW  10
0385E:  MOVWF  FF7
03860:  MOVLW  00
03862:  MOVWF  FF8
03864:  CALL   2084
....................         // デフォルト初期化
....................         /*
....................         piclog_data.id        = FLASH_ID_PICLOG;
....................         environment_data.id   = FLASH_ID_ENVIRONMENT;
....................         iv_header.id          = FLASH_ID_IV_HEADER;
....................         iv_data.id            = FLASH_ID_IV_DATA;
....................         piclog_data.used_counter = 0;
....................         piclog_data.uncopied_counter = 0;
....................         environment_data.used_counter = 0;
....................         environment_data.uncopied_counter = 0;
....................         iv_header.used_counter = 0;
....................         iv_header.uncopied_counter = 0;
....................         iv_data.used_counter = 0;
....................         iv_data.uncopied_counter = 0;
....................         misf_update_address_area();   // 初期テーブル書込み
....................         print_flash_status();
....................         return;
....................         */
....................     }
....................     misf_counter_table[FLASH_ID_PICLOG]       = read_header_ptr->packet.payload.logdata.piclog;
03868:  MOVLB  2
0386A:  MOVF   xC4,W
0386C:  MOVWF  FE1
0386E:  MOVF   xC5,W
03870:  MOVWF  FE2
03872:  MOVLW  01
03874:  MOVWF  FEA
03876:  MOVLW  3A
03878:  MOVWF  FE9
0387A:  MOVLW  0A
0387C:  MOVWF  01
0387E:  MOVLB  0
03880:  MOVFF  FE6,FEE
03884:  DECFSZ 01,F
03886:  GOTO   3880
....................     misf_counter_table[FLASH_ID_ENVIRONMENT]  = read_header_ptr->packet.payload.logdata.environment;
0388A:  MOVLW  0A
0388C:  MOVLB  2
0388E:  ADDWF  xC4,W
03890:  MOVWF  FE1
03892:  MOVLW  00
03894:  ADDWFC xC5,W
03896:  MOVWF  FE2
03898:  MOVLW  01
0389A:  MOVWF  FEA
0389C:  MOVLW  44
0389E:  MOVWF  FE9
038A0:  MOVLW  0A
038A2:  MOVWF  01
038A4:  MOVLB  0
038A6:  MOVFF  FE6,FEE
038AA:  DECFSZ 01,F
038AC:  GOTO   38A6
....................     misf_counter_table[FLASH_ID_IV1_HEADER]   = read_header_ptr->packet.payload.logdata.iv1_header;
038B0:  MOVLW  14
038B2:  MOVLB  2
038B4:  ADDWF  xC4,W
038B6:  MOVWF  FE1
038B8:  MOVLW  00
038BA:  ADDWFC xC5,W
038BC:  MOVWF  FE2
038BE:  MOVLW  01
038C0:  MOVWF  FEA
038C2:  MOVLW  4E
038C4:  MOVWF  FE9
038C6:  MOVLW  0A
038C8:  MOVWF  01
038CA:  MOVLB  0
038CC:  MOVFF  FE6,FEE
038D0:  DECFSZ 01,F
038D2:  GOTO   38CC
....................     misf_counter_table[FLASH_ID_IV1_DATA]     = read_header_ptr->packet.payload.logdata.iv1_data;
038D6:  MOVLW  1E
038D8:  MOVLB  2
038DA:  ADDWF  xC4,W
038DC:  MOVWF  FE1
038DE:  MOVLW  00
038E0:  ADDWFC xC5,W
038E2:  MOVWF  FE2
038E4:  MOVLW  01
038E6:  MOVWF  FEA
038E8:  MOVLW  58
038EA:  MOVWF  FE9
038EC:  MOVLW  0A
038EE:  MOVWF  01
038F0:  MOVLB  0
038F2:  MOVFF  FE6,FEE
038F6:  DECFSZ 01,F
038F8:  GOTO   38F2
....................     misf_counter_table[FLASH_ID_IV2_HEADER]   = read_header_ptr->packet.payload.logdata.iv2_header;
038FC:  MOVLW  28
038FE:  MOVLB  2
03900:  ADDWF  xC4,W
03902:  MOVWF  FE1
03904:  MOVLW  00
03906:  ADDWFC xC5,W
03908:  MOVWF  FE2
0390A:  MOVLW  01
0390C:  MOVWF  FEA
0390E:  MOVLW  62
03910:  MOVWF  FE9
03912:  MOVLW  0A
03914:  MOVWF  01
03916:  MOVLB  0
03918:  MOVFF  FE6,FEE
0391C:  DECFSZ 01,F
0391E:  GOTO   3918
....................     misf_counter_table[FLASH_ID_IV2_DATA]     = read_header_ptr->packet.payload.logdata.iv2_data;
03922:  MOVLW  32
03924:  MOVLB  2
03926:  ADDWF  xC4,W
03928:  MOVWF  FE1
0392A:  MOVLW  00
0392C:  ADDWFC xC5,W
0392E:  MOVWF  FE2
03930:  MOVLW  01
03932:  MOVWF  FEA
03934:  MOVLW  6C
03936:  MOVWF  FE9
03938:  MOVLW  0A
0393A:  MOVWF  01
0393C:  MOVLB  0
0393E:  MOVFF  FE6,FEE
03942:  DECFSZ 01,F
03944:  GOTO   393E
.................... 
....................     print_misf_address_table();
03948:  GOTO   2F06
.................... 
....................     fprintf(PC, "\tComplete\r\n");
0394C:  MOVLW  6C
0394E:  MOVWF  FF6
03950:  MOVLW  10
03952:  MOVWF  FF7
03954:  MOVLW  00
03956:  MOVWF  FF8
03958:  CALL   2084
0395C:  RETURN 0
.................... }
.................... 
.................... void print_misf_address_table()
.................... {
....................     fprintf(PC, "\tField\t\tCounterName\tValue\r\n");
*
02F06:  MOVLW  78
02F08:  MOVWF  FF6
02F0A:  MOVLW  10
02F0C:  MOVWF  FF7
02F0E:  MOVLW  00
02F10:  MOVWF  FF8
02F12:  CALL   2084
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
02F16:  MOVLW  94
02F18:  MOVWF  FF6
02F1A:  MOVLW  10
02F1C:  MOVWF  FF7
02F1E:  MOVLW  00
02F20:  MOVWF  FF8
02F22:  CALL   2084
....................     fprintf(PC, "\tPICLOG\t\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_PICLOG].used_counter);
02F26:  MOVLW  C0
02F28:  MOVWF  FF6
02F2A:  MOVLW  10
02F2C:  MOVWF  FF7
02F2E:  MOVLW  00
02F30:  MOVWF  FF8
02F32:  MOVLW  11
02F34:  MOVLB  3
02F36:  MOVWF  x1E
02F38:  MOVLB  0
02F3A:  CALL   20BA
02F3E:  MOVFF  13D,A77
02F42:  MOVLW  37
02F44:  MOVLB  A
02F46:  MOVWF  x78
02F48:  MOVLB  0
02F4A:  CALL   22D0
02F4E:  MOVFF  13C,A77
02F52:  MOVLW  37
02F54:  MOVLB  A
02F56:  MOVWF  x78
02F58:  MOVLB  0
02F5A:  CALL   22D0
02F5E:  MOVFF  13B,A77
02F62:  MOVLW  37
02F64:  MOVLB  A
02F66:  MOVWF  x78
02F68:  MOVLB  0
02F6A:  CALL   22D0
02F6E:  MOVFF  13A,A77
02F72:  MOVLW  37
02F74:  MOVLB  A
02F76:  MOVWF  x78
02F78:  MOVLB  0
02F7A:  CALL   22D0
02F7E:  MOVLW  0D
02F80:  BTFSS  FA6.6
02F82:  GOTO   2F80
02F86:  MOVLB  E
02F88:  MOVWF  xF9
02F8A:  MOVLW  0A
02F8C:  MOVLB  0
02F8E:  BTFSS  FA6.6
02F90:  GOTO   2F8E
02F94:  MOVLB  E
02F96:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_PICLOG].uncopied_counter);
02F98:  MOVLW  DA
02F9A:  MOVWF  FF6
02F9C:  MOVLW  10
02F9E:  MOVWF  FF7
02FA0:  MOVLW  00
02FA2:  MOVWF  FF8
02FA4:  MOVLW  0E
02FA6:  MOVLB  3
02FA8:  MOVWF  x1E
02FAA:  MOVLB  0
02FAC:  CALL   20BA
02FB0:  MOVFF  141,A77
02FB4:  MOVLW  37
02FB6:  MOVLB  A
02FB8:  MOVWF  x78
02FBA:  MOVLB  0
02FBC:  CALL   22D0
02FC0:  MOVFF  140,A77
02FC4:  MOVLW  37
02FC6:  MOVLB  A
02FC8:  MOVWF  x78
02FCA:  MOVLB  0
02FCC:  CALL   22D0
02FD0:  MOVFF  13F,A77
02FD4:  MOVLW  37
02FD6:  MOVLB  A
02FD8:  MOVWF  x78
02FDA:  MOVLB  0
02FDC:  CALL   22D0
02FE0:  MOVFF  13E,A77
02FE4:  MOVLW  37
02FE6:  MOVLB  A
02FE8:  MOVWF  x78
02FEA:  MOVLB  0
02FEC:  CALL   22D0
02FF0:  MOVLW  0D
02FF2:  BTFSS  FA6.6
02FF4:  GOTO   2FF2
02FF8:  MOVLB  E
02FFA:  MOVWF  xF9
02FFC:  MOVLW  0A
02FFE:  MOVLB  0
03000:  BTFSS  FA6.6
03002:  GOTO   3000
03006:  MOVLB  E
03008:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_PICLOG].reserve_counter1,misf_counter_table[FLASH_ID_PICLOG].reserve_counter2);
0300A:  MOVLW  F0
0300C:  MOVWF  FF6
0300E:  MOVLW  10
03010:  MOVWF  FF7
03012:  MOVLW  00
03014:  MOVWF  FF8
03016:  MOVLW  0E
03018:  MOVLB  3
0301A:  MOVWF  x1E
0301C:  MOVLB  0
0301E:  CALL   20BA
03022:  MOVFF  142,A77
03026:  MOVLW  37
03028:  MOVLB  A
0302A:  MOVWF  x78
0302C:  MOVLB  0
0302E:  CALL   22D0
03032:  MOVLW  02
03034:  MOVWF  FF6
03036:  MOVLW  11
03038:  MOVWF  FF7
0303A:  MOVLW  00
0303C:  MOVWF  FF8
0303E:  MOVLW  04
03040:  MOVLB  3
03042:  MOVWF  x1E
03044:  MOVLB  0
03046:  CALL   20BA
0304A:  MOVFF  143,A77
0304E:  MOVLW  37
03050:  MOVLB  A
03052:  MOVWF  x78
03054:  MOVLB  0
03056:  CALL   22D0
0305A:  MOVLW  0D
0305C:  BTFSS  FA6.6
0305E:  GOTO   305C
03062:  MOVLB  E
03064:  MOVWF  xF9
03066:  MOVLW  0A
03068:  MOVLB  0
0306A:  BTFSS  FA6.6
0306C:  GOTO   306A
03070:  MOVLB  E
03072:  MOVWF  xF9
....................     fprintf(PC, "\tENVIRO\t\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_ENVIRONMENT].used_counter);
03074:  MOVLW  0E
03076:  MOVWF  FF6
03078:  MOVLW  11
0307A:  MOVWF  FF7
0307C:  MOVLW  00
0307E:  MOVWF  FF8
03080:  MOVLW  11
03082:  MOVLB  3
03084:  MOVWF  x1E
03086:  MOVLB  0
03088:  CALL   20BA
0308C:  MOVFF  147,A77
03090:  MOVLW  37
03092:  MOVLB  A
03094:  MOVWF  x78
03096:  MOVLB  0
03098:  CALL   22D0
0309C:  MOVFF  146,A77
030A0:  MOVLW  37
030A2:  MOVLB  A
030A4:  MOVWF  x78
030A6:  MOVLB  0
030A8:  CALL   22D0
030AC:  MOVFF  145,A77
030B0:  MOVLW  37
030B2:  MOVLB  A
030B4:  MOVWF  x78
030B6:  MOVLB  0
030B8:  CALL   22D0
030BC:  MOVFF  144,A77
030C0:  MOVLW  37
030C2:  MOVLB  A
030C4:  MOVWF  x78
030C6:  MOVLB  0
030C8:  CALL   22D0
030CC:  MOVLW  0D
030CE:  BTFSS  FA6.6
030D0:  GOTO   30CE
030D4:  MOVLB  E
030D6:  MOVWF  xF9
030D8:  MOVLW  0A
030DA:  MOVLB  0
030DC:  BTFSS  FA6.6
030DE:  GOTO   30DC
030E2:  MOVLB  E
030E4:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_ENVIRONMENT].uncopied_counter);
030E6:  MOVLW  28
030E8:  MOVWF  FF6
030EA:  MOVLW  11
030EC:  MOVWF  FF7
030EE:  MOVLW  00
030F0:  MOVWF  FF8
030F2:  MOVLW  0E
030F4:  MOVLB  3
030F6:  MOVWF  x1E
030F8:  MOVLB  0
030FA:  CALL   20BA
030FE:  MOVFF  14B,A77
03102:  MOVLW  37
03104:  MOVLB  A
03106:  MOVWF  x78
03108:  MOVLB  0
0310A:  CALL   22D0
0310E:  MOVFF  14A,A77
03112:  MOVLW  37
03114:  MOVLB  A
03116:  MOVWF  x78
03118:  MOVLB  0
0311A:  CALL   22D0
0311E:  MOVFF  149,A77
03122:  MOVLW  37
03124:  MOVLB  A
03126:  MOVWF  x78
03128:  MOVLB  0
0312A:  CALL   22D0
0312E:  MOVFF  148,A77
03132:  MOVLW  37
03134:  MOVLB  A
03136:  MOVWF  x78
03138:  MOVLB  0
0313A:  CALL   22D0
0313E:  MOVLW  0D
03140:  BTFSS  FA6.6
03142:  GOTO   3140
03146:  MOVLB  E
03148:  MOVWF  xF9
0314A:  MOVLW  0A
0314C:  MOVLB  0
0314E:  BTFSS  FA6.6
03150:  GOTO   314E
03154:  MOVLB  E
03156:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_ENVIRONMENT].reserve_counter1,misf_counter_table[FLASH_ID_ENVIRONMENT].reserve_counter2);
03158:  MOVLW  3E
0315A:  MOVWF  FF6
0315C:  MOVLW  11
0315E:  MOVWF  FF7
03160:  MOVLW  00
03162:  MOVWF  FF8
03164:  MOVLW  0E
03166:  MOVLB  3
03168:  MOVWF  x1E
0316A:  MOVLB  0
0316C:  CALL   20BA
03170:  MOVFF  14C,A77
03174:  MOVLW  37
03176:  MOVLB  A
03178:  MOVWF  x78
0317A:  MOVLB  0
0317C:  CALL   22D0
03180:  MOVLW  50
03182:  MOVWF  FF6
03184:  MOVLW  11
03186:  MOVWF  FF7
03188:  MOVLW  00
0318A:  MOVWF  FF8
0318C:  MOVLW  04
0318E:  MOVLB  3
03190:  MOVWF  x1E
03192:  MOVLB  0
03194:  CALL   20BA
03198:  MOVFF  14D,A77
0319C:  MOVLW  37
0319E:  MOVLB  A
031A0:  MOVWF  x78
031A2:  MOVLB  0
031A4:  CALL   22D0
031A8:  MOVLW  0D
031AA:  BTFSS  FA6.6
031AC:  GOTO   31AA
031B0:  MOVLB  E
031B2:  MOVWF  xF9
031B4:  MOVLW  0A
031B6:  MOVLB  0
031B8:  BTFSS  FA6.6
031BA:  GOTO   31B8
031BE:  MOVLB  E
031C0:  MOVWF  xF9
....................     fprintf(PC, "\tIV1 HEADER\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_HEADER].used_counter);
031C2:  MOVLW  5C
031C4:  MOVWF  FF6
031C6:  MOVLW  11
031C8:  MOVWF  FF7
031CA:  MOVLW  00
031CC:  MOVWF  FF8
031CE:  MOVLW  14
031D0:  MOVLB  3
031D2:  MOVWF  x1E
031D4:  MOVLB  0
031D6:  CALL   20BA
031DA:  MOVFF  151,A77
031DE:  MOVLW  37
031E0:  MOVLB  A
031E2:  MOVWF  x78
031E4:  MOVLB  0
031E6:  CALL   22D0
031EA:  MOVFF  150,A77
031EE:  MOVLW  37
031F0:  MOVLB  A
031F2:  MOVWF  x78
031F4:  MOVLB  0
031F6:  CALL   22D0
031FA:  MOVFF  14F,A77
031FE:  MOVLW  37
03200:  MOVLB  A
03202:  MOVWF  x78
03204:  MOVLB  0
03206:  CALL   22D0
0320A:  MOVFF  14E,A77
0320E:  MOVLW  37
03210:  MOVLB  A
03212:  MOVWF  x78
03214:  MOVLB  0
03216:  CALL   22D0
0321A:  MOVLW  0D
0321C:  BTFSS  FA6.6
0321E:  GOTO   321C
03222:  MOVLB  E
03224:  MOVWF  xF9
03226:  MOVLW  0A
03228:  MOVLB  0
0322A:  BTFSS  FA6.6
0322C:  GOTO   322A
03230:  MOVLB  E
03232:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_HEADER].uncopied_counter);
03234:  MOVLW  78
03236:  MOVWF  FF6
03238:  MOVLW  11
0323A:  MOVWF  FF7
0323C:  MOVLW  00
0323E:  MOVWF  FF8
03240:  MOVLW  0E
03242:  MOVLB  3
03244:  MOVWF  x1E
03246:  MOVLB  0
03248:  CALL   20BA
0324C:  MOVFF  155,A77
03250:  MOVLW  37
03252:  MOVLB  A
03254:  MOVWF  x78
03256:  MOVLB  0
03258:  CALL   22D0
0325C:  MOVFF  154,A77
03260:  MOVLW  37
03262:  MOVLB  A
03264:  MOVWF  x78
03266:  MOVLB  0
03268:  CALL   22D0
0326C:  MOVFF  153,A77
03270:  MOVLW  37
03272:  MOVLB  A
03274:  MOVWF  x78
03276:  MOVLB  0
03278:  CALL   22D0
0327C:  MOVFF  152,A77
03280:  MOVLW  37
03282:  MOVLB  A
03284:  MOVWF  x78
03286:  MOVLB  0
03288:  CALL   22D0
0328C:  MOVLW  0D
0328E:  BTFSS  FA6.6
03290:  GOTO   328E
03294:  MOVLB  E
03296:  MOVWF  xF9
03298:  MOVLW  0A
0329A:  MOVLB  0
0329C:  BTFSS  FA6.6
0329E:  GOTO   329C
032A2:  MOVLB  E
032A4:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV1_HEADER].reserve_counter1,misf_counter_table[FLASH_ID_IV1_HEADER].reserve_counter2);
032A6:  MOVLW  8E
032A8:  MOVWF  FF6
032AA:  MOVLW  11
032AC:  MOVWF  FF7
032AE:  MOVLW  00
032B0:  MOVWF  FF8
032B2:  MOVLW  0E
032B4:  MOVLB  3
032B6:  MOVWF  x1E
032B8:  MOVLB  0
032BA:  CALL   20BA
032BE:  MOVFF  156,A77
032C2:  MOVLW  37
032C4:  MOVLB  A
032C6:  MOVWF  x78
032C8:  MOVLB  0
032CA:  CALL   22D0
032CE:  MOVLW  A0
032D0:  MOVWF  FF6
032D2:  MOVLW  11
032D4:  MOVWF  FF7
032D6:  MOVLW  00
032D8:  MOVWF  FF8
032DA:  MOVLW  04
032DC:  MOVLB  3
032DE:  MOVWF  x1E
032E0:  MOVLB  0
032E2:  CALL   20BA
032E6:  MOVFF  157,A77
032EA:  MOVLW  37
032EC:  MOVLB  A
032EE:  MOVWF  x78
032F0:  MOVLB  0
032F2:  CALL   22D0
032F6:  MOVLW  0D
032F8:  BTFSS  FA6.6
032FA:  GOTO   32F8
032FE:  MOVLB  E
03300:  MOVWF  xF9
03302:  MOVLW  0A
03304:  MOVLB  0
03306:  BTFSS  FA6.6
03308:  GOTO   3306
0330C:  MOVLB  E
0330E:  MOVWF  xF9
....................     fprintf(PC, "\tIV1 DATA\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_DATA].used_counter);
03310:  MOVLW  AC
03312:  MOVWF  FF6
03314:  MOVLW  11
03316:  MOVWF  FF7
03318:  MOVLW  00
0331A:  MOVWF  FF8
0331C:  MOVLW  12
0331E:  MOVLB  3
03320:  MOVWF  x1E
03322:  MOVLB  0
03324:  CALL   20BA
03328:  MOVFF  15B,A77
0332C:  MOVLW  37
0332E:  MOVLB  A
03330:  MOVWF  x78
03332:  MOVLB  0
03334:  CALL   22D0
03338:  MOVFF  15A,A77
0333C:  MOVLW  37
0333E:  MOVLB  A
03340:  MOVWF  x78
03342:  MOVLB  0
03344:  CALL   22D0
03348:  MOVFF  159,A77
0334C:  MOVLW  37
0334E:  MOVLB  A
03350:  MOVWF  x78
03352:  MOVLB  0
03354:  CALL   22D0
03358:  MOVFF  158,A77
0335C:  MOVLW  37
0335E:  MOVLB  A
03360:  MOVWF  x78
03362:  MOVLB  0
03364:  CALL   22D0
03368:  MOVLW  0D
0336A:  BTFSS  FA6.6
0336C:  GOTO   336A
03370:  MOVLB  E
03372:  MOVWF  xF9
03374:  MOVLW  0A
03376:  MOVLB  0
03378:  BTFSS  FA6.6
0337A:  GOTO   3378
0337E:  MOVLB  E
03380:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_DATA].uncopied_counter);
03382:  MOVLW  C6
03384:  MOVWF  FF6
03386:  MOVLW  11
03388:  MOVWF  FF7
0338A:  MOVLW  00
0338C:  MOVWF  FF8
0338E:  MOVLW  0E
03390:  MOVLB  3
03392:  MOVWF  x1E
03394:  MOVLB  0
03396:  CALL   20BA
0339A:  MOVFF  15F,A77
0339E:  MOVLW  37
033A0:  MOVLB  A
033A2:  MOVWF  x78
033A4:  MOVLB  0
033A6:  CALL   22D0
033AA:  MOVFF  15E,A77
033AE:  MOVLW  37
033B0:  MOVLB  A
033B2:  MOVWF  x78
033B4:  MOVLB  0
033B6:  CALL   22D0
033BA:  MOVFF  15D,A77
033BE:  MOVLW  37
033C0:  MOVLB  A
033C2:  MOVWF  x78
033C4:  MOVLB  0
033C6:  CALL   22D0
033CA:  MOVFF  15C,A77
033CE:  MOVLW  37
033D0:  MOVLB  A
033D2:  MOVWF  x78
033D4:  MOVLB  0
033D6:  CALL   22D0
033DA:  MOVLW  0D
033DC:  BTFSS  FA6.6
033DE:  GOTO   33DC
033E2:  MOVLB  E
033E4:  MOVWF  xF9
033E6:  MOVLW  0A
033E8:  MOVLB  0
033EA:  BTFSS  FA6.6
033EC:  GOTO   33EA
033F0:  MOVLB  E
033F2:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV1_DATA].reserve_counter1,misf_counter_table[FLASH_ID_IV1_DATA].reserve_counter2);
033F4:  MOVLW  DC
033F6:  MOVWF  FF6
033F8:  MOVLW  11
033FA:  MOVWF  FF7
033FC:  MOVLW  00
033FE:  MOVWF  FF8
03400:  MOVLW  0E
03402:  MOVLB  3
03404:  MOVWF  x1E
03406:  MOVLB  0
03408:  CALL   20BA
0340C:  MOVFF  160,A77
03410:  MOVLW  37
03412:  MOVLB  A
03414:  MOVWF  x78
03416:  MOVLB  0
03418:  CALL   22D0
0341C:  MOVLW  EE
0341E:  MOVWF  FF6
03420:  MOVLW  11
03422:  MOVWF  FF7
03424:  MOVLW  00
03426:  MOVWF  FF8
03428:  MOVLW  04
0342A:  MOVLB  3
0342C:  MOVWF  x1E
0342E:  MOVLB  0
03430:  CALL   20BA
03434:  MOVFF  161,A77
03438:  MOVLW  37
0343A:  MOVLB  A
0343C:  MOVWF  x78
0343E:  MOVLB  0
03440:  CALL   22D0
03444:  MOVLW  0D
03446:  BTFSS  FA6.6
03448:  GOTO   3446
0344C:  MOVLB  E
0344E:  MOVWF  xF9
03450:  MOVLW  0A
03452:  MOVLB  0
03454:  BTFSS  FA6.6
03456:  GOTO   3454
0345A:  MOVLB  E
0345C:  MOVWF  xF9
....................     fprintf(PC, "\tIV2 HEADER\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_HEADER].used_counter);
0345E:  MOVLW  FA
03460:  MOVWF  FF6
03462:  MOVLW  11
03464:  MOVWF  FF7
03466:  MOVLW  00
03468:  MOVWF  FF8
0346A:  MOVLW  14
0346C:  MOVLB  3
0346E:  MOVWF  x1E
03470:  MOVLB  0
03472:  CALL   20BA
03476:  MOVFF  165,A77
0347A:  MOVLW  37
0347C:  MOVLB  A
0347E:  MOVWF  x78
03480:  MOVLB  0
03482:  CALL   22D0
03486:  MOVFF  164,A77
0348A:  MOVLW  37
0348C:  MOVLB  A
0348E:  MOVWF  x78
03490:  MOVLB  0
03492:  CALL   22D0
03496:  MOVFF  163,A77
0349A:  MOVLW  37
0349C:  MOVLB  A
0349E:  MOVWF  x78
034A0:  MOVLB  0
034A2:  CALL   22D0
034A6:  MOVFF  162,A77
034AA:  MOVLW  37
034AC:  MOVLB  A
034AE:  MOVWF  x78
034B0:  MOVLB  0
034B2:  CALL   22D0
034B6:  MOVLW  0D
034B8:  BTFSS  FA6.6
034BA:  GOTO   34B8
034BE:  MOVLB  E
034C0:  MOVWF  xF9
034C2:  MOVLW  0A
034C4:  MOVLB  0
034C6:  BTFSS  FA6.6
034C8:  GOTO   34C6
034CC:  MOVLB  E
034CE:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_HEADER].uncopied_counter);
034D0:  MOVLW  16
034D2:  MOVWF  FF6
034D4:  MOVLW  12
034D6:  MOVWF  FF7
034D8:  MOVLW  00
034DA:  MOVWF  FF8
034DC:  MOVLW  0E
034DE:  MOVLB  3
034E0:  MOVWF  x1E
034E2:  MOVLB  0
034E4:  CALL   20BA
034E8:  MOVFF  169,A77
034EC:  MOVLW  37
034EE:  MOVLB  A
034F0:  MOVWF  x78
034F2:  MOVLB  0
034F4:  CALL   22D0
034F8:  MOVFF  168,A77
034FC:  MOVLW  37
034FE:  MOVLB  A
03500:  MOVWF  x78
03502:  MOVLB  0
03504:  CALL   22D0
03508:  MOVFF  167,A77
0350C:  MOVLW  37
0350E:  MOVLB  A
03510:  MOVWF  x78
03512:  MOVLB  0
03514:  CALL   22D0
03518:  MOVFF  166,A77
0351C:  MOVLW  37
0351E:  MOVLB  A
03520:  MOVWF  x78
03522:  MOVLB  0
03524:  CALL   22D0
03528:  MOVLW  0D
0352A:  BTFSS  FA6.6
0352C:  GOTO   352A
03530:  MOVLB  E
03532:  MOVWF  xF9
03534:  MOVLW  0A
03536:  MOVLB  0
03538:  BTFSS  FA6.6
0353A:  GOTO   3538
0353E:  MOVLB  E
03540:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV2_HEADER].reserve_counter1,misf_counter_table[FLASH_ID_IV2_HEADER].reserve_counter2);
03542:  MOVLW  2C
03544:  MOVWF  FF6
03546:  MOVLW  12
03548:  MOVWF  FF7
0354A:  MOVLW  00
0354C:  MOVWF  FF8
0354E:  MOVLW  0E
03550:  MOVLB  3
03552:  MOVWF  x1E
03554:  MOVLB  0
03556:  CALL   20BA
0355A:  MOVFF  16A,A77
0355E:  MOVLW  37
03560:  MOVLB  A
03562:  MOVWF  x78
03564:  MOVLB  0
03566:  CALL   22D0
0356A:  MOVLW  3E
0356C:  MOVWF  FF6
0356E:  MOVLW  12
03570:  MOVWF  FF7
03572:  MOVLW  00
03574:  MOVWF  FF8
03576:  MOVLW  04
03578:  MOVLB  3
0357A:  MOVWF  x1E
0357C:  MOVLB  0
0357E:  CALL   20BA
03582:  MOVFF  16B,A77
03586:  MOVLW  37
03588:  MOVLB  A
0358A:  MOVWF  x78
0358C:  MOVLB  0
0358E:  CALL   22D0
03592:  MOVLW  0D
03594:  BTFSS  FA6.6
03596:  GOTO   3594
0359A:  MOVLB  E
0359C:  MOVWF  xF9
0359E:  MOVLW  0A
035A0:  MOVLB  0
035A2:  BTFSS  FA6.6
035A4:  GOTO   35A2
035A8:  MOVLB  E
035AA:  MOVWF  xF9
....................     fprintf(PC, "\tIV2 DATA\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_DATA].used_counter);
035AC:  MOVLW  4A
035AE:  MOVWF  FF6
035B0:  MOVLW  12
035B2:  MOVWF  FF7
035B4:  MOVLW  00
035B6:  MOVWF  FF8
035B8:  MOVLW  12
035BA:  MOVLB  3
035BC:  MOVWF  x1E
035BE:  MOVLB  0
035C0:  CALL   20BA
035C4:  MOVFF  16F,A77
035C8:  MOVLW  37
035CA:  MOVLB  A
035CC:  MOVWF  x78
035CE:  MOVLB  0
035D0:  CALL   22D0
035D4:  MOVFF  16E,A77
035D8:  MOVLW  37
035DA:  MOVLB  A
035DC:  MOVWF  x78
035DE:  MOVLB  0
035E0:  CALL   22D0
035E4:  MOVFF  16D,A77
035E8:  MOVLW  37
035EA:  MOVLB  A
035EC:  MOVWF  x78
035EE:  MOVLB  0
035F0:  CALL   22D0
035F4:  MOVFF  16C,A77
035F8:  MOVLW  37
035FA:  MOVLB  A
035FC:  MOVWF  x78
035FE:  MOVLB  0
03600:  CALL   22D0
03604:  MOVLW  0D
03606:  BTFSS  FA6.6
03608:  GOTO   3606
0360C:  MOVLB  E
0360E:  MOVWF  xF9
03610:  MOVLW  0A
03612:  MOVLB  0
03614:  BTFSS  FA6.6
03616:  GOTO   3614
0361A:  MOVLB  E
0361C:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_DATA].uncopied_counter);
0361E:  MOVLW  64
03620:  MOVWF  FF6
03622:  MOVLW  12
03624:  MOVWF  FF7
03626:  MOVLW  00
03628:  MOVWF  FF8
0362A:  MOVLW  0E
0362C:  MOVLB  3
0362E:  MOVWF  x1E
03630:  MOVLB  0
03632:  CALL   20BA
03636:  MOVFF  173,A77
0363A:  MOVLW  37
0363C:  MOVLB  A
0363E:  MOVWF  x78
03640:  MOVLB  0
03642:  CALL   22D0
03646:  MOVFF  172,A77
0364A:  MOVLW  37
0364C:  MOVLB  A
0364E:  MOVWF  x78
03650:  MOVLB  0
03652:  CALL   22D0
03656:  MOVFF  171,A77
0365A:  MOVLW  37
0365C:  MOVLB  A
0365E:  MOVWF  x78
03660:  MOVLB  0
03662:  CALL   22D0
03666:  MOVFF  170,A77
0366A:  MOVLW  37
0366C:  MOVLB  A
0366E:  MOVWF  x78
03670:  MOVLB  0
03672:  CALL   22D0
03676:  MOVLW  0D
03678:  BTFSS  FA6.6
0367A:  GOTO   3678
0367E:  MOVLB  E
03680:  MOVWF  xF9
03682:  MOVLW  0A
03684:  MOVLB  0
03686:  BTFSS  FA6.6
03688:  GOTO   3686
0368C:  MOVLB  E
0368E:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV2_DATA].reserve_counter1,misf_counter_table[FLASH_ID_IV2_DATA].reserve_counter2);
03690:  MOVLW  7A
03692:  MOVWF  FF6
03694:  MOVLW  12
03696:  MOVWF  FF7
03698:  MOVLW  00
0369A:  MOVWF  FF8
0369C:  MOVLW  0E
0369E:  MOVLB  3
036A0:  MOVWF  x1E
036A2:  MOVLB  0
036A4:  CALL   20BA
036A8:  MOVFF  174,A77
036AC:  MOVLW  37
036AE:  MOVLB  A
036B0:  MOVWF  x78
036B2:  MOVLB  0
036B4:  CALL   22D0
036B8:  MOVLW  8C
036BA:  MOVWF  FF6
036BC:  MOVLW  12
036BE:  MOVWF  FF7
036C0:  MOVLW  00
036C2:  MOVWF  FF8
036C4:  MOVLW  04
036C6:  MOVLB  3
036C8:  MOVWF  x1E
036CA:  MOVLB  0
036CC:  CALL   20BA
036D0:  MOVFF  175,A77
036D4:  MOVLW  37
036D6:  MOVLB  A
036D8:  MOVWF  x78
036DA:  MOVLB  0
036DC:  CALL   22D0
036E0:  MOVLW  0D
036E2:  BTFSS  FA6.6
036E4:  GOTO   36E2
036E8:  MOVLB  E
036EA:  MOVWF  xF9
036EC:  MOVLW  0A
036EE:  MOVLB  0
036F0:  BTFSS  FA6.6
036F2:  GOTO   36F0
036F6:  MOVLB  E
036F8:  MOVWF  xF9
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
036FA:  MOVLW  98
036FC:  MOVWF  FF6
036FE:  MOVLW  12
03700:  MOVWF  FF7
03702:  MOVLW  00
03704:  MOVWF  FF8
03706:  MOVLB  0
03708:  CALL   2084
0370C:  GOTO   394C (RETURN)
.................... }
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size)
.................... {
....................     // パケット境界チェック
....................     if (misf_counter_table[id].reserve_counter1 + size > PACKET_SIZE-1) {
*
04546:  MOVLB  A
04548:  MOVF   xCD,W
0454A:  MULLW  0A
0454C:  MOVF   FF3,W
0454E:  MOVLB  B
04550:  CLRF   x65
04552:  MOVWF  x64
04554:  MOVLW  08
04556:  ADDWF  x64,W
04558:  MOVWF  01
0455A:  MOVLW  00
0455C:  ADDWFC x65,W
0455E:  MOVWF  03
04560:  MOVF   01,W
04562:  ADDLW  30
04564:  MOVWF  FE9
04566:  MOVLW  01
04568:  ADDWFC 03,W
0456A:  MOVWF  FEA
0456C:  MOVF   FEF,W
0456E:  MOVLB  A
04570:  ADDWF  xD0,W
04572:  MOVLB  B
04574:  MOVWF  x64
04576:  MOVLW  00
04578:  MOVLB  A
0457A:  ADDWFC xD1,W
0457C:  MOVLB  B
0457E:  MOVWF  x65
04580:  MOVF   x65,F
04582:  BTFSC  FD8.2
04584:  BRA    458C
04586:  MOVLB  0
04588:  GOTO   45A0
0458C:  MOVLB  0
0458E:  MOVLB  B
04590:  MOVF   x64,W
04592:  SUBLW  3F
04594:  BTFSS  FD8.0
04596:  BRA    459E
04598:  MOVLB  0
0459A:  GOTO   4852
0459E:  MOVLB  0
....................         unsigned int8 blank_size = PACKET_SIZE - 1 - misf_counter_table[id].reserve_counter1;
....................         // fprintf(PC, "0x%02X", blank_size);
....................         unsigned int8 blank_data[PACKET_SIZE];
045A0:  MOVLB  A
045A2:  MOVF   xCD,W
045A4:  MULLW  0A
045A6:  MOVF   FF3,W
045A8:  MOVLB  B
045AA:  CLRF   x65
045AC:  MOVWF  x64
045AE:  MOVLW  08
045B0:  ADDWF  x64,W
045B2:  MOVWF  01
045B4:  MOVLW  00
045B6:  ADDWFC x65,W
045B8:  MOVWF  03
045BA:  MOVF   01,W
045BC:  ADDLW  30
045BE:  MOVWF  FE9
045C0:  MOVLW  01
045C2:  ADDWFC 03,W
045C4:  MOVWF  FEA
045C6:  MOVF   FEF,W
045C8:  XORLW  FF
045CA:  ADDLW  40
045CC:  MOVLB  A
045CE:  MOVWF  xD2
045D0:  MOVLB  0
....................         memset(blank_data, 0, blank_size);
045D2:  MOVLW  0A
045D4:  MOVWF  FEA
045D6:  MOVLW  D3
045D8:  MOVWF  FE9
045DA:  CLRF   00
045DC:  CLRF   02
045DE:  MOVFF  AD2,01
045E2:  CALL   2C62
.................... 
....................         // アドレス再計算
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
045E6:  MOVLB  A
045E8:  MOVF   xCD,W
045EA:  MULLW  0C
045EC:  MOVF   FF3,W
045EE:  MOVLB  B
045F0:  CLRF   x65
045F2:  MOVWF  x64
045F4:  MOVFF  B65,03
045F8:  MOVF   x64,W
045FA:  MOVLB  0
045FC:  CALL   014E
04600:  MOVWF  00
04602:  TBLRD*+
04604:  MOVFF  FF5,01
04608:  TBLRD*+
0460A:  MOVFF  FF5,02
0460E:  TBLRD*+
04610:  MOVFF  FF5,03
04614:  MOVFF  03,B69
04618:  MOVFF  02,B68
0461C:  MOVFF  01,B67
04620:  MOVFF  00,B66
04624:  MOVLB  A
04626:  MOVF   xCD,W
04628:  MULLW  0A
0462A:  MOVF   FF3,W
0462C:  MOVLB  B
0462E:  CLRF   x6B
04630:  MOVWF  x6A
04632:  MOVLW  30
04634:  ADDWF  x6A,W
04636:  MOVWF  FE9
04638:  MOVLW  01
0463A:  ADDWFC x6B,W
0463C:  MOVWF  FEA
0463E:  MOVFF  FEF,00
04642:  MOVFF  FEC,01
04646:  MOVFF  FEC,02
0464A:  MOVFF  FEC,03
0464E:  MOVF   FED,F
04650:  MOVF   FED,F
04652:  MOVF   FED,F
04654:  MOVF   00,W
04656:  ADDWF  x66,W
04658:  MOVWF  x13
0465A:  MOVF   01,W
0465C:  ADDWFC x67,W
0465E:  MOVWF  x14
04660:  MOVF   02,W
04662:  ADDWFC x68,W
04664:  MOVWF  x15
04666:  MOVF   03,W
04668:  ADDWFC x69,W
0466A:  MOVWF  x16
.................... 
....................         // 未使用部分を 0 埋め
....................         write_data_bytes(mis_fm, write_address, blank_data, blank_size);
0466C:  MOVFF  115,BAB
04670:  MOVFF  114,BAA
04674:  MOVFF  113,BA9
04678:  MOVFF  112,BA8
0467C:  MOVFF  B16,BAF
04680:  MOVFF  B15,BAE
04684:  MOVFF  B14,BAD
04688:  MOVFF  B13,BAC
0468C:  MOVLW  0A
0468E:  MOVWF  xB1
04690:  MOVLW  D3
04692:  MOVWF  xB0
04694:  CLRF   xB3
04696:  MOVFF  AD2,BB2
0469A:  MOVLB  0
0469C:  CALL   3C7C
.................... 
....................         // CRC 計算（本体部分だけ読む）
....................         unsigned int8 packet_data[PACKET_SIZE - 1];
....................         unsigned int32 read_address = write_address + blank_size - PACKET_SIZE - 1;
046A0:  MOVLB  A
046A2:  MOVF   xD2,W
046A4:  MOVLB  B
046A6:  ADDWF  x13,W
046A8:  MOVWF  x64
046AA:  MOVLW  00
046AC:  ADDWFC x14,W
046AE:  MOVWF  x65
046B0:  MOVLW  00
046B2:  ADDWFC x15,W
046B4:  MOVWF  x66
046B6:  MOVLW  00
046B8:  ADDWFC x16,W
046BA:  MOVWF  x67
046BC:  MOVLW  40
046BE:  SUBWF  x64,F
046C0:  MOVLW  00
046C2:  SUBWFB x65,F
046C4:  MOVLW  00
046C6:  SUBWFB x66,F
046C8:  MOVLW  00
046CA:  SUBWFB x67,F
046CC:  MOVLW  01
046CE:  SUBWF  x64,W
046D0:  MOVWF  x56
046D2:  MOVLW  00
046D4:  SUBWFB x65,W
046D6:  MOVWF  x57
046D8:  MOVLW  00
046DA:  SUBWFB x66,W
046DC:  MOVWF  x58
046DE:  MOVLW  00
046E0:  SUBWFB x67,W
046E2:  MOVWF  x59
....................         read_data_bytes(mis_fm, read_address, packet_data, PACKET_SIZE - 1);
046E4:  MOVFF  115,B67
046E8:  MOVFF  114,B66
046EC:  MOVFF  113,B65
046F0:  MOVFF  112,B64
046F4:  MOVFF  B59,B6B
046F8:  MOVFF  B58,B6A
046FC:  MOVFF  B57,B69
04700:  MOVFF  B56,B68
04704:  MOVLW  0B
04706:  MOVWF  x6D
04708:  MOVLW  17
0470A:  MOVWF  x6C
0470C:  CLRF   x71
0470E:  CLRF   x70
04710:  CLRF   x6F
04712:  MOVLW  3F
04714:  MOVWF  x6E
04716:  MOVLB  0
04718:  CALL   2C86
....................         unsigned int8 crc = calc_crc8(packet_data, PACKET_SIZE - 1);
0471C:  MOVLW  0B
0471E:  MOVLB  B
04720:  MOVWF  xF3
04722:  MOVLW  17
04724:  MOVWF  xF2
04726:  MOVLW  3F
04728:  MOVWF  xF4
0472A:  MOVLB  0
0472C:  CALL   2E9A
04730:  MOVFF  01,B5A
....................         // fprintf(PC, "0x%02X", crc);
....................         // CRC 書き込み
....................         write_address += blank_size;
04734:  MOVLB  A
04736:  MOVF   xD2,W
04738:  MOVLB  B
0473A:  ADDWF  x13,F
0473C:  MOVLW  00
0473E:  ADDWFC x14,F
04740:  MOVLW  00
04742:  ADDWFC x15,F
04744:  MOVLW  00
04746:  ADDWFC x16,F
....................         write_data_bytes(mis_fm, write_address, &crc, 1);
04748:  MOVFF  115,BAB
0474C:  MOVFF  114,BAA
04750:  MOVFF  113,BA9
04754:  MOVFF  112,BA8
04758:  MOVFF  B16,BAF
0475C:  MOVFF  B15,BAE
04760:  MOVFF  B14,BAD
04764:  MOVFF  B13,BAC
04768:  MOVLW  0B
0476A:  MOVWF  xB1
0476C:  MOVLW  5A
0476E:  MOVWF  xB0
04770:  CLRF   xB3
04772:  MOVLW  01
04774:  MOVWF  xB2
04776:  MOVLB  0
04778:  CALL   3C7C
.................... 
....................         // カウンタ更新
....................         misf_counter_table[id].used_counter     += blank_size + 1;
0477C:  MOVLB  A
0477E:  MOVF   xCD,W
04780:  MULLW  0A
04782:  MOVF   FF3,W
04784:  MOVLB  B
04786:  CLRF   x65
04788:  MOVWF  x64
0478A:  MOVLW  30
0478C:  ADDWF  x64,W
0478E:  MOVWF  FE9
04790:  MOVLW  01
04792:  ADDWFC x65,W
04794:  MOVWF  FEA
04796:  MOVLW  01
04798:  MOVLB  A
0479A:  ADDWF  xD2,W
0479C:  ADDWF  FEF,W
0479E:  MOVWF  00
047A0:  MOVLW  00
047A2:  ADDWFC FEC,W
047A4:  MOVWF  01
047A6:  MOVLW  00
047A8:  ADDWFC FEC,W
047AA:  MOVWF  02
047AC:  MOVLW  00
047AE:  ADDWFC FEC,W
047B0:  MOVWF  03
047B2:  MOVF   FED,F
047B4:  MOVF   FED,F
047B6:  MOVF   FED,F
047B8:  MOVFF  00,FEF
047BC:  MOVFF  01,FEC
047C0:  MOVFF  02,FEC
047C4:  MOVFF  03,FEC
047C8:  MOVF   FED,F
047CA:  MOVF   FED,F
047CC:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += blank_size + 1;
047CE:  MOVF   xCD,W
047D0:  MULLW  0A
047D2:  MOVF   FF3,W
047D4:  MOVLB  B
047D6:  CLRF   x65
047D8:  MOVWF  x64
047DA:  MOVLW  04
047DC:  ADDWF  x64,W
047DE:  MOVWF  01
047E0:  MOVLW  00
047E2:  ADDWFC x65,W
047E4:  MOVWF  03
047E6:  MOVF   01,W
047E8:  ADDLW  30
047EA:  MOVWF  FE9
047EC:  MOVLW  01
047EE:  ADDWFC 03,W
047F0:  MOVWF  FEA
047F2:  MOVLW  01
047F4:  MOVLB  A
047F6:  ADDWF  xD2,W
047F8:  ADDWF  FEF,W
047FA:  MOVWF  00
047FC:  MOVLW  00
047FE:  ADDWFC FEC,W
04800:  MOVWF  01
04802:  MOVLW  00
04804:  ADDWFC FEC,W
04806:  MOVWF  02
04808:  MOVLW  00
0480A:  ADDWFC FEC,W
0480C:  MOVWF  03
0480E:  MOVF   FED,F
04810:  MOVF   FED,F
04812:  MOVF   FED,F
04814:  MOVFF  00,FEF
04818:  MOVFF  01,FEC
0481C:  MOVFF  02,FEC
04820:  MOVFF  03,FEC
04824:  MOVF   FED,F
04826:  MOVF   FED,F
04828:  MOVF   FED,F
....................         misf_counter_table[id].reserve_counter1  = 0;
0482A:  MOVF   xCD,W
0482C:  MULLW  0A
0482E:  MOVF   FF3,W
04830:  MOVLB  B
04832:  CLRF   x65
04834:  MOVWF  x64
04836:  MOVLW  08
04838:  ADDWF  x64,W
0483A:  MOVWF  01
0483C:  MOVLW  00
0483E:  ADDWFC x65,W
04840:  MOVWF  03
04842:  MOVF   01,W
04844:  ADDLW  30
04846:  MOVWF  FE9
04848:  MOVLW  01
0484A:  ADDWFC 03,W
0484C:  MOVWF  FEA
0484E:  CLRF   FEF
04850:  MOVLB  0
....................     }
....................     if (misf_counter_table[id].reserve_counter1 + size == PACKET_SIZE-1){
04852:  MOVLB  A
04854:  MOVF   xCD,W
04856:  MULLW  0A
04858:  MOVF   FF3,W
0485A:  MOVLB  B
0485C:  CLRF   x65
0485E:  MOVWF  x64
04860:  MOVLW  08
04862:  ADDWF  x64,W
04864:  MOVWF  01
04866:  MOVLW  00
04868:  ADDWFC x65,W
0486A:  MOVWF  03
0486C:  MOVF   01,W
0486E:  ADDLW  30
04870:  MOVWF  FE9
04872:  MOVLW  01
04874:  ADDWFC 03,W
04876:  MOVWF  FEA
04878:  MOVF   FEF,W
0487A:  MOVLB  A
0487C:  ADDWF  xD0,W
0487E:  MOVLB  B
04880:  MOVWF  x64
04882:  MOVLW  00
04884:  MOVLB  A
04886:  ADDWFC xD1,W
04888:  MOVLB  B
0488A:  MOVWF  x65
0488C:  MOVF   x64,W
0488E:  SUBLW  3F
04890:  BTFSC  FD8.2
04892:  BRA    489A
04894:  MOVLB  0
04896:  GOTO   4BBC
0489A:  MOVLB  0
0489C:  MOVLB  B
0489E:  MOVF   x65,F
048A0:  BTFSC  FD8.2
048A2:  BRA    48AA
048A4:  MOVLB  0
048A6:  GOTO   4BBC
048AA:  MOVLB  0
....................         // データ書き込み
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
048AC:  MOVLB  A
048AE:  MOVF   xCD,W
048B0:  MULLW  0C
048B2:  MOVF   FF3,W
048B4:  MOVLB  B
048B6:  CLRF   x65
048B8:  MOVWF  x64
048BA:  MOVFF  B65,03
048BE:  MOVF   x64,W
048C0:  MOVLB  0
048C2:  CALL   014E
048C6:  MOVWF  00
048C8:  TBLRD*+
048CA:  MOVFF  FF5,01
048CE:  TBLRD*+
048D0:  MOVFF  FF5,02
048D4:  TBLRD*+
048D6:  MOVFF  FF5,03
048DA:  MOVFF  03,B69
048DE:  MOVFF  02,B68
048E2:  MOVFF  01,B67
048E6:  MOVFF  00,B66
048EA:  MOVLB  A
048EC:  MOVF   xCD,W
048EE:  MULLW  0A
048F0:  MOVF   FF3,W
048F2:  MOVLB  B
048F4:  CLRF   x6B
048F6:  MOVWF  x6A
048F8:  MOVLW  30
048FA:  ADDWF  x6A,W
048FC:  MOVWF  FE9
048FE:  MOVLW  01
04900:  ADDWFC x6B,W
04902:  MOVWF  FEA
04904:  MOVFF  FEF,00
04908:  MOVFF  FEC,01
0490C:  MOVFF  FEC,02
04910:  MOVFF  FEC,03
04914:  MOVF   FED,F
04916:  MOVF   FED,F
04918:  MOVF   FED,F
0491A:  MOVF   00,W
0491C:  ADDWF  x66,W
0491E:  MOVWF  x5B
04920:  MOVF   01,W
04922:  ADDWFC x67,W
04924:  MOVWF  x5C
04926:  MOVF   02,W
04928:  ADDWFC x68,W
0492A:  MOVWF  x5D
0492C:  MOVF   03,W
0492E:  ADDWFC x69,W
04930:  MOVWF  x5E
04932:  MOVLB  0
....................         write_data_bytes(mis_fm, write_address, data_ptr, size);
04934:  MOVFF  115,BAB
04938:  MOVFF  114,BAA
0493C:  MOVFF  113,BA9
04940:  MOVFF  112,BA8
04944:  MOVFF  B5E,BAF
04948:  MOVFF  B5D,BAE
0494C:  MOVFF  B5C,BAD
04950:  MOVFF  B5B,BAC
04954:  MOVFF  ACF,BB1
04958:  MOVFF  ACE,BB0
0495C:  MOVFF  AD1,BB3
04960:  MOVFF  AD0,BB2
04964:  CALL   3C7C
....................         // fprintf(PC, "ADDRESS 0x%08LX DATA ", write_address);
....................         // for (unsigned int32 j = 0; j < size; j++) {
....................             // fprintf(PC, "%02X ", data_ptr[j]);
....................         // }
....................         // fprintf(PC, "\Sr\n");
.................... 
....................         misf_counter_table[id].used_counter     += size;
04968:  MOVLB  A
0496A:  MOVF   xCD,W
0496C:  MULLW  0A
0496E:  MOVF   FF3,W
04970:  MOVLB  B
04972:  CLRF   x65
04974:  MOVWF  x64
04976:  MOVLW  30
04978:  ADDWF  x64,W
0497A:  MOVWF  FE9
0497C:  MOVLW  01
0497E:  ADDWFC x65,W
04980:  MOVWF  FEA
04982:  MOVLB  A
04984:  MOVF   xD0,W
04986:  ADDWF  FEF,W
04988:  MOVWF  00
0498A:  MOVF   xD1,W
0498C:  ADDWFC FEC,W
0498E:  MOVWF  01
04990:  MOVLW  00
04992:  ADDWFC FEC,W
04994:  MOVWF  02
04996:  MOVLW  00
04998:  ADDWFC FEC,W
0499A:  MOVWF  03
0499C:  MOVF   FED,F
0499E:  MOVF   FED,F
049A0:  MOVF   FED,F
049A2:  MOVFF  00,FEF
049A6:  MOVFF  01,FEC
049AA:  MOVFF  02,FEC
049AE:  MOVFF  03,FEC
049B2:  MOVF   FED,F
049B4:  MOVF   FED,F
049B6:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += size;
049B8:  MOVF   xCD,W
049BA:  MULLW  0A
049BC:  MOVF   FF3,W
049BE:  MOVLB  B
049C0:  CLRF   x65
049C2:  MOVWF  x64
049C4:  MOVLW  04
049C6:  ADDWF  x64,W
049C8:  MOVWF  01
049CA:  MOVLW  00
049CC:  ADDWFC x65,W
049CE:  MOVWF  03
049D0:  MOVF   01,W
049D2:  ADDLW  30
049D4:  MOVWF  FE9
049D6:  MOVLW  01
049D8:  ADDWFC 03,W
049DA:  MOVWF  FEA
049DC:  MOVLB  A
049DE:  MOVF   xD0,W
049E0:  ADDWF  FEF,W
049E2:  MOVWF  00
049E4:  MOVF   xD1,W
049E6:  ADDWFC FEC,W
049E8:  MOVWF  01
049EA:  MOVLW  00
049EC:  ADDWFC FEC,W
049EE:  MOVWF  02
049F0:  MOVLW  00
049F2:  ADDWFC FEC,W
049F4:  MOVWF  03
049F6:  MOVF   FED,F
049F8:  MOVF   FED,F
049FA:  MOVF   FED,F
049FC:  MOVFF  00,FEF
04A00:  MOVFF  01,FEC
04A04:  MOVFF  02,FEC
04A08:  MOVFF  03,FEC
04A0C:  MOVF   FED,F
04A0E:  MOVF   FED,F
04A10:  MOVF   FED,F
....................         unsigned int8 crc = calc_crc8(data_ptr, size);
04A12:  MOVFF  ACF,BF3
04A16:  MOVFF  ACE,BF2
04A1A:  MOVFF  AD0,BF4
04A1E:  MOVLB  0
04A20:  CALL   2E9A
04A24:  MOVFF  01,B5F
.................... 
....................         // CRC 書き込み
....................         write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
04A28:  MOVLB  A
04A2A:  MOVF   xCD,W
04A2C:  MULLW  0C
04A2E:  MOVF   FF3,W
04A30:  MOVLB  B
04A32:  CLRF   x65
04A34:  MOVWF  x64
04A36:  MOVFF  B65,03
04A3A:  MOVF   x64,W
04A3C:  MOVLB  0
04A3E:  CALL   014E
04A42:  MOVWF  00
04A44:  TBLRD*+
04A46:  MOVFF  FF5,01
04A4A:  TBLRD*+
04A4C:  MOVFF  FF5,02
04A50:  TBLRD*+
04A52:  MOVFF  FF5,03
04A56:  MOVFF  03,B69
04A5A:  MOVFF  02,B68
04A5E:  MOVFF  01,B67
04A62:  MOVFF  00,B66
04A66:  MOVLB  A
04A68:  MOVF   xCD,W
04A6A:  MULLW  0A
04A6C:  MOVF   FF3,W
04A6E:  MOVLB  B
04A70:  CLRF   x6B
04A72:  MOVWF  x6A
04A74:  MOVLW  30
04A76:  ADDWF  x6A,W
04A78:  MOVWF  FE9
04A7A:  MOVLW  01
04A7C:  ADDWFC x6B,W
04A7E:  MOVWF  FEA
04A80:  MOVFF  FEF,00
04A84:  MOVFF  FEC,01
04A88:  MOVFF  FEC,02
04A8C:  MOVFF  FEC,03
04A90:  MOVF   FED,F
04A92:  MOVF   FED,F
04A94:  MOVF   FED,F
04A96:  MOVF   00,W
04A98:  ADDWF  x66,W
04A9A:  MOVWF  x5B
04A9C:  MOVF   01,W
04A9E:  ADDWFC x67,W
04AA0:  MOVWF  x5C
04AA2:  MOVF   02,W
04AA4:  ADDWFC x68,W
04AA6:  MOVWF  x5D
04AA8:  MOVF   03,W
04AAA:  ADDWFC x69,W
04AAC:  MOVWF  x5E
....................         write_data_bytes(mis_fm, write_address, &crc, 1);
04AAE:  MOVFF  115,BAB
04AB2:  MOVFF  114,BAA
04AB6:  MOVFF  113,BA9
04ABA:  MOVFF  112,BA8
04ABE:  MOVFF  B5E,BAF
04AC2:  MOVFF  B5D,BAE
04AC6:  MOVFF  B5C,BAD
04ACA:  MOVFF  B5B,BAC
04ACE:  MOVLW  0B
04AD0:  MOVWF  xB1
04AD2:  MOVLW  5F
04AD4:  MOVWF  xB0
04AD6:  CLRF   xB3
04AD8:  MOVLW  01
04ADA:  MOVWF  xB2
04ADC:  MOVLB  0
04ADE:  CALL   3C7C
.................... 
....................         // カウンタ更新
....................         misf_counter_table[id].used_counter     += 1;
04AE2:  MOVLB  A
04AE4:  MOVF   xCD,W
04AE6:  MULLW  0A
04AE8:  MOVF   FF3,W
04AEA:  MOVLB  B
04AEC:  CLRF   x65
04AEE:  MOVWF  x64
04AF0:  MOVLW  30
04AF2:  ADDWF  x64,W
04AF4:  MOVWF  FE9
04AF6:  MOVLW  01
04AF8:  ADDWFC x65,W
04AFA:  MOVWF  FEA
04AFC:  MOVLW  01
04AFE:  ADDWF  FEF,W
04B00:  MOVWF  00
04B02:  MOVLW  00
04B04:  ADDWFC FEC,W
04B06:  MOVWF  01
04B08:  MOVLW  00
04B0A:  ADDWFC FEC,W
04B0C:  MOVWF  02
04B0E:  MOVLW  00
04B10:  ADDWFC FEC,W
04B12:  MOVWF  03
04B14:  MOVF   FED,F
04B16:  MOVF   FED,F
04B18:  MOVF   FED,F
04B1A:  MOVFF  00,FEF
04B1E:  MOVFF  01,FEC
04B22:  MOVFF  02,FEC
04B26:  MOVFF  03,FEC
04B2A:  MOVF   FED,F
04B2C:  MOVF   FED,F
04B2E:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += 1;
04B30:  MOVLB  A
04B32:  MOVF   xCD,W
04B34:  MULLW  0A
04B36:  MOVF   FF3,W
04B38:  MOVLB  B
04B3A:  CLRF   x65
04B3C:  MOVWF  x64
04B3E:  MOVLW  04
04B40:  ADDWF  x64,W
04B42:  MOVWF  01
04B44:  MOVLW  00
04B46:  ADDWFC x65,W
04B48:  MOVWF  03
04B4A:  MOVF   01,W
04B4C:  ADDLW  30
04B4E:  MOVWF  FE9
04B50:  MOVLW  01
04B52:  ADDWFC 03,W
04B54:  MOVWF  FEA
04B56:  MOVLW  01
04B58:  ADDWF  FEF,W
04B5A:  MOVWF  00
04B5C:  MOVLW  00
04B5E:  ADDWFC FEC,W
04B60:  MOVWF  01
04B62:  MOVLW  00
04B64:  ADDWFC FEC,W
04B66:  MOVWF  02
04B68:  MOVLW  00
04B6A:  ADDWFC FEC,W
04B6C:  MOVWF  03
04B6E:  MOVF   FED,F
04B70:  MOVF   FED,F
04B72:  MOVF   FED,F
04B74:  MOVFF  00,FEF
04B78:  MOVFF  01,FEC
04B7C:  MOVFF  02,FEC
04B80:  MOVFF  03,FEC
04B84:  MOVF   FED,F
04B86:  MOVF   FED,F
04B88:  MOVF   FED,F
....................         misf_counter_table[id].reserve_counter1  = 0;
04B8A:  MOVLB  A
04B8C:  MOVF   xCD,W
04B8E:  MULLW  0A
04B90:  MOVF   FF3,W
04B92:  MOVLB  B
04B94:  CLRF   x65
04B96:  MOVWF  x64
04B98:  MOVLW  08
04B9A:  ADDWF  x64,W
04B9C:  MOVWF  01
04B9E:  MOVLW  00
04BA0:  ADDWFC x65,W
04BA2:  MOVWF  03
04BA4:  MOVF   01,W
04BA6:  ADDLW  30
04BA8:  MOVWF  FE9
04BAA:  MOVLW  01
04BAC:  ADDWFC 03,W
04BAE:  MOVWF  FEA
04BB0:  CLRF   FEF
.................... 
....................         // アドレステーブル更新
....................         misf_update_address_area();
04BB2:  MOVLB  0
04BB4:  CALL   44B8
....................         return;
04BB8:  GOTO   4D5E
....................     }
.................... 
....................     // データ書き込み
....................     unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
04BBC:  MOVLB  A
04BBE:  MOVF   xCD,W
04BC0:  MULLW  0C
04BC2:  MOVF   FF3,W
04BC4:  MOVLB  B
04BC6:  CLRF   x65
04BC8:  MOVWF  x64
04BCA:  MOVFF  B65,03
04BCE:  MOVF   x64,W
04BD0:  MOVLB  0
04BD2:  CALL   014E
04BD6:  MOVWF  00
04BD8:  TBLRD*+
04BDA:  MOVFF  FF5,01
04BDE:  TBLRD*+
04BE0:  MOVFF  FF5,02
04BE4:  TBLRD*+
04BE6:  MOVFF  FF5,03
04BEA:  MOVFF  03,B69
04BEE:  MOVFF  02,B68
04BF2:  MOVFF  01,B67
04BF6:  MOVFF  00,B66
04BFA:  MOVLB  A
04BFC:  MOVF   xCD,W
04BFE:  MULLW  0A
04C00:  MOVF   FF3,W
04C02:  MOVLB  B
04C04:  CLRF   x6B
04C06:  MOVWF  x6A
04C08:  MOVLW  30
04C0A:  ADDWF  x6A,W
04C0C:  MOVWF  FE9
04C0E:  MOVLW  01
04C10:  ADDWFC x6B,W
04C12:  MOVWF  FEA
04C14:  MOVFF  FEF,00
04C18:  MOVFF  FEC,01
04C1C:  MOVFF  FEC,02
04C20:  MOVFF  FEC,03
04C24:  MOVF   FED,F
04C26:  MOVF   FED,F
04C28:  MOVF   FED,F
04C2A:  MOVF   00,W
04C2C:  ADDWF  x66,W
04C2E:  MOVWF  x60
04C30:  MOVF   01,W
04C32:  ADDWFC x67,W
04C34:  MOVWF  x61
04C36:  MOVF   02,W
04C38:  ADDWFC x68,W
04C3A:  MOVWF  x62
04C3C:  MOVF   03,W
04C3E:  ADDWFC x69,W
04C40:  MOVWF  x63
....................     write_data_bytes(mis_fm, write_address, data_ptr, size);
04C42:  MOVFF  115,BAB
04C46:  MOVFF  114,BAA
04C4A:  MOVFF  113,BA9
04C4E:  MOVFF  112,BA8
04C52:  MOVFF  B63,BAF
04C56:  MOVFF  B62,BAE
04C5A:  MOVFF  B61,BAD
04C5E:  MOVFF  B60,BAC
04C62:  MOVFF  ACF,BB1
04C66:  MOVFF  ACE,BB0
04C6A:  MOVFF  AD1,BB3
04C6E:  MOVFF  AD0,BB2
04C72:  MOVLB  0
04C74:  CALL   3C7C
.................... 
....................     // カウンタ更新
....................     misf_counter_table[id].used_counter     += size;
04C78:  MOVLB  A
04C7A:  MOVF   xCD,W
04C7C:  MULLW  0A
04C7E:  MOVF   FF3,W
04C80:  MOVLB  B
04C82:  CLRF   x65
04C84:  MOVWF  x64
04C86:  MOVLW  30
04C88:  ADDWF  x64,W
04C8A:  MOVWF  FE9
04C8C:  MOVLW  01
04C8E:  ADDWFC x65,W
04C90:  MOVWF  FEA
04C92:  MOVLB  A
04C94:  MOVF   xD0,W
04C96:  ADDWF  FEF,W
04C98:  MOVWF  00
04C9A:  MOVF   xD1,W
04C9C:  ADDWFC FEC,W
04C9E:  MOVWF  01
04CA0:  MOVLW  00
04CA2:  ADDWFC FEC,W
04CA4:  MOVWF  02
04CA6:  MOVLW  00
04CA8:  ADDWFC FEC,W
04CAA:  MOVWF  03
04CAC:  MOVF   FED,F
04CAE:  MOVF   FED,F
04CB0:  MOVF   FED,F
04CB2:  MOVFF  00,FEF
04CB6:  MOVFF  01,FEC
04CBA:  MOVFF  02,FEC
04CBE:  MOVFF  03,FEC
04CC2:  MOVF   FED,F
04CC4:  MOVF   FED,F
04CC6:  MOVF   FED,F
....................     misf_counter_table[id].uncopied_counter += size;
04CC8:  MOVF   xCD,W
04CCA:  MULLW  0A
04CCC:  MOVF   FF3,W
04CCE:  MOVLB  B
04CD0:  CLRF   x65
04CD2:  MOVWF  x64
04CD4:  MOVLW  04
04CD6:  ADDWF  x64,W
04CD8:  MOVWF  01
04CDA:  MOVLW  00
04CDC:  ADDWFC x65,W
04CDE:  MOVWF  03
04CE0:  MOVF   01,W
04CE2:  ADDLW  30
04CE4:  MOVWF  FE9
04CE6:  MOVLW  01
04CE8:  ADDWFC 03,W
04CEA:  MOVWF  FEA
04CEC:  MOVLB  A
04CEE:  MOVF   xD0,W
04CF0:  ADDWF  FEF,W
04CF2:  MOVWF  00
04CF4:  MOVF   xD1,W
04CF6:  ADDWFC FEC,W
04CF8:  MOVWF  01
04CFA:  MOVLW  00
04CFC:  ADDWFC FEC,W
04CFE:  MOVWF  02
04D00:  MOVLW  00
04D02:  ADDWFC FEC,W
04D04:  MOVWF  03
04D06:  MOVF   FED,F
04D08:  MOVF   FED,F
04D0A:  MOVF   FED,F
04D0C:  MOVFF  00,FEF
04D10:  MOVFF  01,FEC
04D14:  MOVFF  02,FEC
04D18:  MOVFF  03,FEC
04D1C:  MOVF   FED,F
04D1E:  MOVF   FED,F
04D20:  MOVF   FED,F
....................     misf_counter_table[id].reserve_counter1 += size;
04D22:  MOVF   xCD,W
04D24:  MULLW  0A
04D26:  MOVF   FF3,W
04D28:  MOVLB  B
04D2A:  CLRF   x65
04D2C:  MOVWF  x64
04D2E:  MOVLW  08
04D30:  ADDWF  x64,W
04D32:  MOVWF  01
04D34:  MOVLW  00
04D36:  ADDWFC x65,W
04D38:  MOVWF  03
04D3A:  MOVF   01,W
04D3C:  ADDLW  30
04D3E:  MOVWF  FE9
04D40:  MOVLW  01
04D42:  ADDWFC 03,W
04D44:  MOVWF  FEA
04D46:  MOVF   FEF,W
04D48:  MOVLB  A
04D4A:  ADDWF  xD0,W
04D4C:  MOVWF  01
04D4E:  MOVLW  00
04D50:  ADDWFC xD1,W
04D52:  MOVWF  03
04D54:  MOVF   01,W
04D56:  MOVWF  FEF
.................... 
....................     // アドレステーブル更新
....................     misf_update_address_area();
04D58:  MOVLB  0
04D5A:  CALL   44B8
04D5E:  RETURN 0
.................... }
.................... 
.................... FlashData_t make_flash_data_table(void)
*
04000:  MOVLW  0B
04002:  MOVLB  B
04004:  MOVWF  xED
04006:  MOVLW  AC
04008:  MOVWF  xEC
.................... {
....................     FlashData_t flash_data;
....................     FlashData_t *flash_data_ptr = &flash_data;
.................... 
....................     // 初期化
....................     memset(flash_data_ptr->bytes, 0, sizeof(flash_data_ptr->bytes));
0400A:  MOVF   xEC,W
0400C:  MOVWF  01
0400E:  MOVF   xED,W
04010:  MOVWF  03
04012:  MOVF   01,W
04014:  MOVWF  xEE
04016:  MOVFF  03,BEF
0401A:  MOVFF  BEF,FEA
0401E:  MOVFF  BEE,FE9
04022:  CLRF   00
04024:  CLRF   02
04026:  MOVLW  40
04028:  MOVWF  01
0402A:  MOVLB  0
0402C:  CALL   2C62
.................... 
....................     flash_data_ptr->packet.payload.logdata.piclog = misf_counter_table[FLASH_ID_PICLOG];
04030:  MOVLB  B
04032:  MOVF   xEC,W
04034:  MOVWF  FE9
04036:  MOVF   xED,W
04038:  MOVWF  FEA
0403A:  MOVLW  01
0403C:  MOVWF  FE2
0403E:  MOVLW  3A
04040:  MOVWF  FE1
04042:  MOVLW  0A
04044:  MOVWF  01
04046:  MOVLB  0
04048:  MOVFF  FE6,FEE
0404C:  DECFSZ 01,F
0404E:  GOTO   4048
....................     flash_data_ptr->packet.payload.logdata.environment = misf_counter_table[FLASH_ID_ENVIRONMENT];
04052:  MOVLW  0A
04054:  MOVLB  B
04056:  ADDWF  xEC,W
04058:  MOVWF  FE9
0405A:  MOVLW  00
0405C:  ADDWFC xED,W
0405E:  MOVWF  FEA
04060:  MOVLW  01
04062:  MOVWF  FE2
04064:  MOVLW  44
04066:  MOVWF  FE1
04068:  MOVLW  0A
0406A:  MOVWF  01
0406C:  MOVLB  0
0406E:  MOVFF  FE6,FEE
04072:  DECFSZ 01,F
04074:  GOTO   406E
....................     flash_data_ptr->packet.payload.logdata.iv1_header = misf_counter_table[FLASH_ID_IV1_HEADER];
04078:  MOVLW  14
0407A:  MOVLB  B
0407C:  ADDWF  xEC,W
0407E:  MOVWF  FE9
04080:  MOVLW  00
04082:  ADDWFC xED,W
04084:  MOVWF  FEA
04086:  MOVLW  01
04088:  MOVWF  FE2
0408A:  MOVLW  4E
0408C:  MOVWF  FE1
0408E:  MOVLW  0A
04090:  MOVWF  01
04092:  MOVLB  0
04094:  MOVFF  FE6,FEE
04098:  DECFSZ 01,F
0409A:  GOTO   4094
....................     flash_data_ptr->packet.payload.logdata.iv1_data = misf_counter_table[FLASH_ID_IV1_DATA];
0409E:  MOVLW  1E
040A0:  MOVLB  B
040A2:  ADDWF  xEC,W
040A4:  MOVWF  FE9
040A6:  MOVLW  00
040A8:  ADDWFC xED,W
040AA:  MOVWF  FEA
040AC:  MOVLW  01
040AE:  MOVWF  FE2
040B0:  MOVLW  58
040B2:  MOVWF  FE1
040B4:  MOVLW  0A
040B6:  MOVWF  01
040B8:  MOVLB  0
040BA:  MOVFF  FE6,FEE
040BE:  DECFSZ 01,F
040C0:  GOTO   40BA
....................     flash_data_ptr->packet.payload.logdata.iv2_header = misf_counter_table[FLASH_ID_IV2_HEADER];
040C4:  MOVLW  28
040C6:  MOVLB  B
040C8:  ADDWF  xEC,W
040CA:  MOVWF  FE9
040CC:  MOVLW  00
040CE:  ADDWFC xED,W
040D0:  MOVWF  FEA
040D2:  MOVLW  01
040D4:  MOVWF  FE2
040D6:  MOVLW  62
040D8:  MOVWF  FE1
040DA:  MOVLW  0A
040DC:  MOVWF  01
040DE:  MOVLB  0
040E0:  MOVFF  FE6,FEE
040E4:  DECFSZ 01,F
040E6:  GOTO   40E0
....................     flash_data_ptr->packet.payload.logdata.iv2_data = misf_counter_table[FLASH_ID_IV2_DATA];
040EA:  MOVLW  32
040EC:  MOVLB  B
040EE:  ADDWF  xEC,W
040F0:  MOVWF  FE9
040F2:  MOVLW  00
040F4:  ADDWFC xED,W
040F6:  MOVWF  FEA
040F8:  MOVLW  01
040FA:  MOVWF  FE2
040FC:  MOVLW  6C
040FE:  MOVWF  FE1
04100:  MOVLW  0A
04102:  MOVWF  01
04104:  MOVLB  0
04106:  MOVFF  FE6,FEE
0410A:  DECFSZ 01,F
0410C:  GOTO   4106
.................... 
....................     // CRC 計算
....................     flash_data_ptr->packet.crc = calc_crc8(flash_data_ptr->bytes, PACKET_SIZE - 1);
04110:  MOVLW  3F
04112:  MOVLB  B
04114:  ADDWF  xEC,W
04116:  MOVWF  01
04118:  MOVLW  00
0411A:  ADDWFC xED,W
0411C:  MOVWF  03
0411E:  MOVF   01,W
04120:  MOVWF  xEE
04122:  MOVFF  03,BEF
04126:  MOVF   xEC,W
04128:  MOVWF  01
0412A:  MOVF   xED,W
0412C:  MOVWF  03
0412E:  MOVF   01,W
04130:  MOVWF  xF0
04132:  MOVFF  03,BF1
04136:  MOVFF  BF1,BF3
0413A:  MOVFF  BF0,BF2
0413E:  MOVLW  3F
04140:  MOVWF  xF4
04142:  MOVLB  0
04144:  CALL   2E9A
04148:  MOVFF  BEF,FEA
0414C:  MOVFF  BEE,FE9
04150:  MOVFF  01,FEF
.................... 
....................     return flash_data;
04154:  MOVLW  AC
04156:  MOVWF  01
04158:  MOVLW  0B
0415A:  MOVWF  02
0415C:  GOTO   44BC (RETURN)
.................... }
.................... 
.................... void misf_update_address_area(void)
*
044B8:  GOTO   4000
044BC:  MOVFF  02,03
044C0:  MOVF   01,W
044C2:  MOVWF  FE1
044C4:  MOVFF  03,FE2
044C8:  MOVLW  0B
044CA:  MOVWF  FEA
044CC:  MOVLW  64
044CE:  MOVWF  FE9
044D0:  MOVLW  40
044D2:  MOVWF  01
044D4:  MOVFF  FE6,FEE
044D8:  DECFSZ 01,F
044DA:  GOTO   44D4
044DE:  MOVLW  0B
044E0:  MOVLB  B
044E2:  MOVWF  xA5
044E4:  MOVLW  64
044E6:  MOVWF  xA4
.................... {
....................     FlashData_t flash_data = make_flash_data_table();
....................     FlashData_t *flash_data_ptr = &flash_data;
.................... 
....................     sector_erase(mis_fm, MISF_CIGS_DATA_TABLE_START);
044E8:  MOVFF  115,BA9
044EC:  MOVFF  114,BA8
044F0:  MOVFF  113,BA7
044F4:  MOVFF  112,BA6
044F8:  CLRF   xAD
044FA:  CLRF   xAC
044FC:  CLRF   xAB
044FE:  CLRF   xAA
04500:  MOVLB  0
04502:  CALL   4160
....................     write_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, flash_data_ptr->bytes, PACKET_SIZE);
04506:  MOVLB  B
04508:  MOVF   xA4,W
0450A:  MOVWF  01
0450C:  MOVF   xA5,W
0450E:  MOVWF  03
04510:  MOVF   01,W
04512:  MOVWF  xA6
04514:  MOVFF  03,BA7
04518:  MOVFF  115,BAB
0451C:  MOVFF  114,BAA
04520:  MOVFF  113,BA9
04524:  MOVFF  112,BA8
04528:  CLRF   xAF
0452A:  CLRF   xAE
0452C:  CLRF   xAD
0452E:  CLRF   xAC
04530:  MOVFF  BA7,BB1
04534:  MOVFF  BA6,BB0
04538:  CLRF   xB3
0453A:  MOVLW  40
0453C:  MOVWF  xB2
0453E:  MOVLB  0
04540:  CALL   3C7C
04544:  RETURN 0
.................... }
.................... 
.................... 
.................... // PICLOG 更新後に呼ばれる関数例 (piclog_write 内で既に misf_update_address_area 呼んでいる場合は不要)
.................... static void update_piclog_counters_after_write(unsigned int16 wrote_size)
.................... {
....................     piclog_data.used_counter     += wrote_size;
....................     piclog_data.uncopied_counter += wrote_size;
....................     // 必要なら wrap 処理追加
....................     misf_update_address_area();
.................... }
.................... 
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode)
.................... {
....................     FlashOperationStruct data;
....................     // 構造体の初期化
....................     data.mission_id = mission_id;
....................     data.func_type = func_type;
....................     data.write_mode = write_mode;
....................     data.source_type = SOURCE_MISF_UNCOPIED;
....................     enqueue_flash_operation(&data);
.................... }
.................... 
.................... void write_smf_header(smf_data_table_t *smf_data_table)
.................... {
.................... 
....................     int8 readdata[PACKET_SIZE];
....................     int8 retry_count;
....................     int1 crc_valid = 0;
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
....................         if (is_crc_valid(readdata, PACKET_SIZE-1))
....................         {
....................             crc_valid = 1; // FIX: フラグ更新
....................             fprintf(PC, "CRC verification passed on attempt %d\r\n", retry_count + 1);
....................             break;
....................         }
....................     }
....................     if (!crc_valid)
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
....................         // return; 
....................     }
.................... }
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id)
.................... {
....................    MisfAddressStruct mis_struct = {0};
.................... 
....................    if (mission_id == CIGS_DATA_TABLE)
....................    {
....................       mis_struct.start_address = MISF_CIGS_DATA_TABLE_START;
....................       mis_struct.end_address   = MISF_CIGS_DATA_TABLE_END;
....................    }
....................    else if (mission_id == CIGS_PICLOG_DATA)
....................    {
....................       mis_struct.start_address = MISF_CIGS_PICLOG_START;
....................       mis_struct.end_address   = MISF_CIGS_PICLOG_END;
....................    }
....................    else if (mission_id == CIGS_ENVIRO_DATA)
....................    {
....................       mis_struct.start_address = MISF_CIGS_ENVIRO_START;
....................       mis_struct.end_address   = MISF_CIGS_ENVIRO_END;
....................    }
....................    else if (mission_id == CIGS_IV1_HEADER)
....................    {
....................       mis_struct.start_address = MISF_CIGS_IV1_HEADER_START;
....................       mis_struct.end_address   = MISF_CIGS_IV1_HEADER_END;
....................    }
....................    else if (mission_id == CIGS_IV1_DATA)
....................    {
....................       mis_struct.start_address = MISF_CIGS_IV1_DATA_START;
....................       mis_struct.end_address   = MISF_CIGS_IV1_DATA_END;
....................    }
....................    return mis_struct;
.................... }
.................... 
.................... MisfWriteStruct get_misf_write_struct(MissionID mission_id)
.................... {
....................     MisfWriteStruct mis_write_struct = {0};
.................... 
....................     if (mission_id == CIGS_DATA_TABLE)
....................     {
....................         mis_write_struct.start_address = MISF_CIGS_DATA_TABLE_START;
....................         mis_write_struct.size = MISF_CIGS_DATA_TABLE_SIZE;
....................     }
....................     else if (mission_id == CIGS_PICLOG_DATA)
....................     {
....................         mis_write_struct.start_address = MISF_CIGS_PICLOG_START + piclog_data.used_counter - piclog_data.uncopied_counter;
....................         mis_write_struct.size = piclog_data.uncopied_counter;
....................     }
....................     else if (mission_id == CIGS_ENVIRO_DATA)
....................     {
....................         mis_write_struct.start_address = MISF_CIGS_ENVIRO_START + environment_data.used_counter - environment_data.uncopied_counter;
....................         mis_write_struct.size = environment_data.uncopied_counter;
....................     }
....................     else if (mission_id == CIGS_IV1_HEADER)
....................     {
....................         mis_write_struct.start_address = MISF_CIGS_IV1_HEADER_START + iv1_header.used_counter - iv1_header.uncopied_counter;
....................         mis_write_struct.size = iv1_header.uncopied_counter;
....................     }
....................     else if (mission_id == CIGS_IV1_DATA)
....................     {
....................         mis_write_struct.start_address = MISF_CIGS_IV1_DATA_START + iv1_data.used_counter - iv1_data.uncopied_counter;
....................         mis_write_struct.size = iv1_data.uncopied_counter;
....................     }
....................     return mis_write_struct;
.................... }
.................... // End of file
.................... 
.................... 
.................... // アプリケーション実装ファイル
.................... #include "application/mmj_cigs_excute_mission.c"
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../hal/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=2000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=2000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=1000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=2000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/value_status.h"    // ステータス定義
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "mmj_cigs_excute_mission.h"                  // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... void handle_recieve_time(Command *command);
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_DEBUG 0xA3
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "../domain/mmj_cigs_smf.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #include "../hal/mmj_cigs_config.h" // int8,int32 型など(CCS C) 依存
.................... #include "mmj_cigs_flash.h"       // MISF_ADDRESS_TABLE, misf_counter_table 依存
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int8 loop_counter;
....................     int8 reserved[3];
.................... } SMF_PARTITION;
.................... 
.................... // パーティション管理構造体
.................... typedef struct {
....................     SMF_PARTITION piclog;     // データテーブル領域は利用しないため削除
....................     SMF_PARTITION env;
....................     SMF_PARTITION iv1_header;
....................     SMF_PARTITION iv1_data;
....................     SMF_PARTITION iv2_header;
....................     SMF_PARTITION iv2_data;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... extern PartitionParam param;  // extern宣言に変更
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         SMF_PARTITION headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table);
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/communication/typedef_content.h"    // 通信ライブラリ
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06,
....................     TIME_REQ          = 0x07
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.h"      // ミッションツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../domain/mmj_cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFFFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE-1];
.................... 
....................     struct {
....................         unsigned int16 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int16 time_msec;
....................         meas_data_t env_data[2];
....................         meas_data_t iv_data[16];
.................... 
....................     }header;
....................     struct {
....................         meas_data_t iv_data[21];
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.1
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/communication_driver.h" // 通信ドライバー
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *content)
*
0E4DC:  MOVLB  2
0E4DE:  MOVF   x32,W
0E4E0:  MOVWF  FE9
0E4E2:  MOVF   x33,W
0E4E4:  MOVWF  FEA
0E4E6:  MOVFF  FEF,234
.................... {
....................    // record to executed mission list
....................    int8 command_id = content[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
0E4EA:  MOVLW  20
0E4EC:  MOVWF  FF6
0E4EE:  MOVLW  13
0E4F0:  MOVWF  FF7
0E4F2:  MOVLW  00
0E4F4:  MOVWF  FF8
0E4F6:  MOVLB  0
0E4F8:  CALL   2084
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
0E4FC:  MOVLW  66
0E4FE:  MOVWF  FF6
0E500:  MOVLW  13
0E502:  MOVWF  FF7
0E504:  MOVLW  00
0E506:  MOVWF  FF8
0E508:  MOVLW  0C
0E50A:  MOVLB  3
0E50C:  MOVWF  x1E
0E50E:  MOVLB  0
0E510:  CALL   20BA
0E514:  MOVFF  234,A77
0E518:  MOVLW  37
0E51A:  MOVLB  A
0E51C:  MOVWF  x78
0E51E:  MOVLB  0
0E520:  CALL   22D0
0E524:  MOVLW  74
0E526:  MOVWF  FF6
0E528:  MOVLW  13
0E52A:  MOVWF  FF7
0E52C:  MOVLW  00
0E52E:  MOVWF  FF8
0E530:  MOVLW  04
0E532:  MOVLB  3
0E534:  MOVWF  x1E
0E536:  MOVLB  0
0E538:  CALL   20BA
....................    switch(command_id)
0E53C:  MOVLB  2
0E53E:  MOVF   x34,W
0E540:  XORLW  10
0E542:  MOVLB  0
0E544:  BTFSC  FD8.2
0E546:  GOTO   E61E
0E54A:  XORLW  01
0E54C:  BTFSC  FD8.2
0E54E:  GOTO   E622
0E552:  XORLW  03
0E554:  BTFSC  FD8.2
0E556:  GOTO   E626
0E55A:  XORLW  13
0E55C:  BTFSC  FD8.2
0E55E:  GOTO   E62A
0E562:  XORLW  12
0E564:  BTFSC  FD8.2
0E566:  GOTO   E62E
0E56A:  XORLW  93
0E56C:  BTFSC  FD8.2
0E56E:  GOTO   E632
0E572:  XORLW  01
0E574:  BTFSC  FD8.2
0E576:  GOTO   E642
0E57A:  XORLW  03
0E57C:  BTFSC  FD8.2
0E57E:  GOTO   E652
0E582:  XORLW  01
0E584:  BTFSC  FD8.2
0E586:  GOTO   E662
0E58A:  XORLW  07
0E58C:  BTFSC  FD8.2
0E58E:  GOTO   E672
0E592:  XORLW  01
0E594:  BTFSC  FD8.2
0E596:  GOTO   E682
0E59A:  XORLW  03
0E59C:  BTFSC  FD8.2
0E59E:  GOTO   E692
0E5A2:  XORLW  01
0E5A4:  BTFSC  FD8.2
0E5A6:  GOTO   E6A2
0E5AA:  XORLW  0F
0E5AC:  BTFSC  FD8.2
0E5AE:  GOTO   E6B2
0E5B2:  XORLW  18
0E5B4:  BTFSC  FD8.2
0E5B6:  GOTO   E6C2
0E5BA:  XORLW  01
0E5BC:  BTFSC  FD8.2
0E5BE:  GOTO   E6D2
0E5C2:  XORLW  03
0E5C4:  BTFSC  FD8.2
0E5C6:  GOTO   E6E2
0E5CA:  XORLW  01
0E5CC:  BTFSC  FD8.2
0E5CE:  GOTO   E6F2
0E5D2:  XORLW  07
0E5D4:  BTFSC  FD8.2
0E5D6:  GOTO   E702
0E5DA:  XORLW  01
0E5DC:  BTFSC  FD8.2
0E5DE:  GOTO   E712
0E5E2:  XORLW  03
0E5E4:  BTFSC  FD8.2
0E5E6:  GOTO   E722
0E5EA:  XORLW  36
0E5EC:  BTFSC  FD8.2
0E5EE:  GOTO   E72A
0E5F2:  XORLW  01
0E5F4:  BTFSC  FD8.2
0E5F6:  GOTO   E73A
0E5FA:  XORLW  03
0E5FC:  BTFSC  FD8.2
0E5FE:  GOTO   E74A
0E602:  XORLW  01
0E604:  BTFSC  FD8.2
0E606:  GOTO   E75A
0E60A:  XORLW  07
0E60C:  BTFSC  FD8.2
0E60E:  GOTO   E76A
0E612:  XORLW  14
0E614:  BTFSC  FD8.2
0E616:  GOTO   E772
0E61A:  GOTO   E97E
....................    {
....................       case 0x10: // example command
....................          // mode_dummy(content);
....................          //mode_iv_meas_adc();
....................          break;
0E61E:  GOTO   E992
....................       case 0x11:
....................          // mode_test_iv(content);
....................          break;
0E622:  GOTO   E992
....................       case 0x12:
....................          // test_adc();
....................          break;
0E626:  GOTO   E992
....................       case 0x01:
....................          //mode_measure(content); // check if the flash is connected
....................          break;
0E62A:  GOTO   E992
....................       case 0x13:
....................          // mode_sweep_port1(content[1]); // Sweep Port 1 with the given step
....................          break;
0E62E:  GOTO   E992
.................... 
....................       // ___________________ MISF Commands ______________________
....................       case ID_MISF_ERASE_ALL:
....................          mode_misf_erase_all(content);
0E632:  MOVFF  233,241
0E636:  MOVFF  232,240
0E63A:  CALL   5586
....................          break;
0E63E:  GOTO   E992
....................       case ID_MISF_ERASE_1SECTOR:
....................          mode_misf_erase_1sector(content);
0E642:  MOVFF  233,23F
0E646:  MOVFF  232,23E
0E64A:  GOTO   5662
....................          break;
0E64E:  GOTO   E992
....................       case ID_MISF_ERASE_4kByte_SUBSECTOR:
....................          mode_misf_erase_4kbyte_subsector(content);
0E652:  MOVFF  233,23F
0E656:  MOVFF  232,23E
0E65A:  GOTO   5B56
....................          break;
0E65E:  GOTO   E992
....................       case ID_MISF_ERASE_64kByte_SUBSECTOR:
....................          mode_misf_erase_64kbyte_subsector(content);
0E662:  MOVFF  233,23F
0E666:  MOVFF  232,23E
0E66A:  GOTO   5CEE
....................          break;
0E66E:  GOTO   E992
....................       case ID_MISF_WRITE_DEMO:
....................          mode_misf_write_demo(content);
0E672:  MOVFF  233,23F
0E676:  MOVFF  232,23E
0E67A:  GOTO   6042
....................          break;
0E67E:  GOTO   E992
....................       case ID_MISF_WRITE_4kByte_SUBSECTOR:
....................          mode_misf_write_4kbyte_subsector(content);
0E682:  MOVFF  233,23F
0E686:  MOVFF  232,23E
0E68A:  GOTO   6674
....................          break;
0E68E:  GOTO   E992
....................       case ID_MISF_READ:
....................          mode_misf_read(content);
0E692:  MOVFF  233,23F
0E696:  MOVFF  232,23E
0E69A:  GOTO   66E8
....................          break;
0E69E:  GOTO   E992
....................       case ID_MISF_READ_ADDRESS:
....................          mode_misf_read_address(content);
0E6A2:  MOVFF  233,23F
0E6A6:  MOVFF  232,23E
0E6AA:  GOTO   6E4E
....................          break;
0E6AE:  GOTO   E992
....................       case ID_MISF_ERASE_AND_RESET:
....................          mode_misf_erase_and_reset(content);
0E6B2:  MOVFF  233,23F
0E6B6:  MOVFF  232,23E
0E6BA:  GOTO   7152
....................          break;
0E6BE:  GOTO   E992
.................... 
....................       // ___________________ SMF Commands ______________________
....................       case ID_SMF_COPY:
....................          mode_smf_copy(content);
0E6C2:  MOVFF  233,23F
0E6C6:  MOVFF  232,23E
0E6CA:  GOTO   71A8
....................          break;
0E6CE:  GOTO   E992
....................       case ID_SMF_READ:
....................          mode_smf_read(content);
0E6D2:  MOVFF  233,23F
0E6D6:  MOVFF  232,23E
0E6DA:  GOTO   7284
....................          break;
0E6DE:  GOTO   E992
....................       case ID_SMF_ERASE:
....................          mode_smf_erase(content);
0E6E2:  MOVFF  233,23F
0E6E6:  MOVFF  232,23E
0E6EA:  GOTO   754E
....................          break;
0E6EE:  GOTO   E992
....................       case ID_SMF_COPY_FORCE:
....................          mode_smf_address_reset(content);
0E6F2:  MOVFF  233,23F
0E6F6:  MOVFF  232,23E
0E6FA:  GOTO   7738
....................          break;
0E6FE:  GOTO   E992
....................       case ID_SMF_READ_FORCE:
....................          mode_smf_read_force(content);
0E702:  MOVFF  233,23F
0E706:  MOVFF  232,23E
0E70A:  GOTO   78B2
....................          break;
0E70E:  GOTO   E992
....................       case ID_SMF_ERASE_FORCE:
....................          mode_smf_erase_force(content);
0E712:  MOVFF  233,23F
0E716:  MOVFF  232,23E
0E71A:  GOTO   7CA0
....................          break;
0E71E:  GOTO   E992
....................       case ID_SMF_RESET:
....................          smf_data_table_init();
0E722:  CALL   75B6
....................          break;
0E726:  GOTO   E992
....................          
....................          
....................       // ________________MEAS________________________________
....................       case ID_MEAS_IV:
....................          mode_meas_iv(content);
0E72A:  MOVFF  233,23F
0E72E:  MOVFF  232,23E
0E732:  GOTO   A914
....................          break;
0E736:  GOTO   E992
....................       case ID_MEAS_DEBUG:
....................          mode_meas_iv_debug(content);
0E73A:  MOVFF  233,23F
0E73E:  MOVFF  232,23E
0E742:  GOTO   C540
....................          break;;
0E746:  GOTO   E992
....................       case ID_MEAS_ENV:
....................          mode_meas_env(content);
0E74A:  MOVFF  233,23F
0E74E:  MOVFF  232,23E
0E752:  GOTO   C822
....................          break;
0E756:  GOTO   E992
....................       case ID_MEAS_ENV_DEBUG:
....................          mode_meas_env_debug(content);
0E75A:  MOVFF  233,23F
0E75E:  MOVFF  232,23E
0E762:  GOTO   CD0A
....................          break;
0E766:  GOTO   E992
....................       
....................       case 0xA4:
....................           sweep_with_print();
0E76A:  GOTO   CD2E
....................           break;
0E76E:  GOTO   E992
....................       
.................... 
....................       // ________________Others______________________________
....................       case 0xB0:
....................          unsigned int32 total_seconds = get_current_sec();
....................          unsigned int16 days;
....................          unsigned int8 hours, minutes, seconds;
0E772:  CALL   395E
0E776:  MOVFF  03,238
0E77A:  MOVFF  02,237
0E77E:  MOVFF  01,236
0E782:  MOVFF  00,235
....................          days    = total_seconds / 86400;
0E786:  BCF    FD8.1
0E788:  MOVFF  238,AD8
0E78C:  MOVFF  237,AD7
0E790:  MOVFF  236,AD6
0E794:  MOVFF  235,AD5
0E798:  MOVLB  A
0E79A:  CLRF   xDC
0E79C:  MOVLW  01
0E79E:  MOVWF  xDB
0E7A0:  MOVLW  51
0E7A2:  MOVWF  xDA
0E7A4:  MOVLW  80
0E7A6:  MOVWF  xD9
0E7A8:  MOVLB  0
0E7AA:  CALL   5E62
0E7AE:  MOVFF  01,23A
0E7B2:  MOVFF  00,239
....................          hours   = (total_seconds % 86400) / 3600;
0E7B6:  BSF    FD8.1
0E7B8:  MOVLW  02
0E7BA:  MOVWF  FEA
0E7BC:  MOVLW  3E
0E7BE:  MOVWF  FE9
0E7C0:  MOVFF  238,AD8
0E7C4:  MOVFF  237,AD7
0E7C8:  MOVFF  236,AD6
0E7CC:  MOVFF  235,AD5
0E7D0:  MOVLB  A
0E7D2:  CLRF   xDC
0E7D4:  MOVLW  01
0E7D6:  MOVWF  xDB
0E7D8:  MOVLW  51
0E7DA:  MOVWF  xDA
0E7DC:  MOVLW  80
0E7DE:  MOVWF  xD9
0E7E0:  MOVLB  0
0E7E2:  CALL   5E62
0E7E6:  MOVFF  241,245
0E7EA:  MOVFF  240,244
0E7EE:  MOVFF  23F,243
0E7F2:  MOVFF  23E,242
0E7F6:  MOVFF  FEA,247
0E7FA:  MOVFF  FE9,246
0E7FE:  BCF    FD8.1
0E800:  MOVFF  245,AD8
0E804:  MOVFF  244,AD7
0E808:  MOVFF  243,AD6
0E80C:  MOVFF  242,AD5
0E810:  MOVLB  A
0E812:  CLRF   xDC
0E814:  CLRF   xDB
0E816:  MOVLW  0E
0E818:  MOVWF  xDA
0E81A:  MOVLW  10
0E81C:  MOVWF  xD9
0E81E:  MOVLB  0
0E820:  CALL   5E62
0E824:  MOVFF  247,FEA
0E828:  MOVFF  246,FE9
0E82C:  MOVFF  00,23B
....................          minutes = (total_seconds % 3600) / 60;
0E830:  BSF    FD8.1
0E832:  MOVLW  02
0E834:  MOVWF  FEA
0E836:  MOVLW  3E
0E838:  MOVWF  FE9
0E83A:  MOVFF  238,AD8
0E83E:  MOVFF  237,AD7
0E842:  MOVFF  236,AD6
0E846:  MOVFF  235,AD5
0E84A:  MOVLB  A
0E84C:  CLRF   xDC
0E84E:  CLRF   xDB
0E850:  MOVLW  0E
0E852:  MOVWF  xDA
0E854:  MOVLW  10
0E856:  MOVWF  xD9
0E858:  MOVLB  0
0E85A:  CALL   5E62
0E85E:  MOVFF  241,245
0E862:  MOVFF  240,244
0E866:  MOVFF  23F,243
0E86A:  MOVFF  23E,242
0E86E:  MOVFF  FEA,247
0E872:  MOVFF  FE9,246
0E876:  BCF    FD8.1
0E878:  MOVFF  245,AD8
0E87C:  MOVFF  244,AD7
0E880:  MOVFF  243,AD6
0E884:  MOVFF  242,AD5
0E888:  MOVLB  A
0E88A:  CLRF   xDC
0E88C:  CLRF   xDB
0E88E:  CLRF   xDA
0E890:  MOVLW  3C
0E892:  MOVWF  xD9
0E894:  MOVLB  0
0E896:  CALL   5E62
0E89A:  MOVFF  247,FEA
0E89E:  MOVFF  246,FE9
0E8A2:  MOVFF  00,23C
....................          seconds = total_seconds % 60;
0E8A6:  BSF    FD8.1
0E8A8:  MOVLW  02
0E8AA:  MOVWF  FEA
0E8AC:  MOVLW  3E
0E8AE:  MOVWF  FE9
0E8B0:  MOVFF  238,AD8
0E8B4:  MOVFF  237,AD7
0E8B8:  MOVFF  236,AD6
0E8BC:  MOVFF  235,AD5
0E8C0:  MOVLB  A
0E8C2:  CLRF   xDC
0E8C4:  CLRF   xDB
0E8C6:  CLRF   xDA
0E8C8:  MOVLW  3C
0E8CA:  MOVWF  xD9
0E8CC:  MOVLB  0
0E8CE:  CALL   5E62
0E8D2:  MOVFF  23E,23D
.................... 
....................          fprintf(PC, "\t\t-> Get time to %lu days, %02u:%02u:%02u\r\n",
....................                days, hours, minutes, seconds);
0E8D6:  MOVLW  7A
0E8D8:  MOVWF  FF6
0E8DA:  MOVLW  13
0E8DC:  MOVWF  FF7
0E8DE:  MOVLW  00
0E8E0:  MOVWF  FF8
0E8E2:  MOVLW  11
0E8E4:  MOVLB  3
0E8E6:  MOVWF  x1E
0E8E8:  MOVLB  0
0E8EA:  CALL   20BA
0E8EE:  MOVLW  10
0E8F0:  MOVWF  FE9
0E8F2:  MOVFF  23A,23F
0E8F6:  MOVFF  239,23E
0E8FA:  CALL   E2B8
0E8FE:  MOVLW  8E
0E900:  MOVWF  FF6
0E902:  MOVLW  13
0E904:  MOVWF  FF7
0E906:  MOVLW  00
0E908:  MOVWF  FF8
0E90A:  MOVLW  07
0E90C:  MOVLB  3
0E90E:  MOVWF  x1E
0E910:  MOVLB  0
0E912:  CALL   20BA
0E916:  MOVFF  23B,2E3
0E91A:  MOVLW  01
0E91C:  MOVLB  2
0E91E:  MOVWF  xE4
0E920:  MOVLB  0
0E922:  CALL   E420
0E926:  MOVLW  3A
0E928:  BTFSS  FA6.6
0E92A:  GOTO   E928
0E92E:  MOVLB  E
0E930:  MOVWF  xF9
0E932:  MOVFF  23C,2E3
0E936:  MOVLW  01
0E938:  MOVLB  2
0E93A:  MOVWF  xE4
0E93C:  MOVLB  0
0E93E:  CALL   E420
0E942:  MOVLW  3A
0E944:  BTFSS  FA6.6
0E946:  GOTO   E944
0E94A:  MOVLB  E
0E94C:  MOVWF  xF9
0E94E:  MOVFF  23D,2E3
0E952:  MOVLW  01
0E954:  MOVLB  2
0E956:  MOVWF  xE4
0E958:  MOVLB  0
0E95A:  CALL   E420
0E95E:  MOVLW  0D
0E960:  BTFSS  FA6.6
0E962:  GOTO   E960
0E966:  MOVLB  E
0E968:  MOVWF  xF9
0E96A:  MOVLW  0A
0E96C:  MOVLB  0
0E96E:  BTFSS  FA6.6
0E970:  GOTO   E96E
0E974:  MOVLB  E
0E976:  MOVWF  xF9
....................          break;
0E978:  MOVLB  0
0E97A:  GOTO   E992
.................... 
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
0E97E:  MOVLW  A6
0E980:  MOVWF  FF6
0E982:  MOVLW  13
0E984:  MOVWF  FF7
0E986:  MOVLW  00
0E988:  MOVWF  FF8
0E98A:  CALL   2084
....................          break;
0E98E:  GOTO   E992
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
0E992:  MOVLW  BE
0E994:  MOVWF  FF6
0E996:  MOVLW  13
0E998:  MOVWF  FF7
0E99A:  MOVLW  00
0E99C:  MOVWF  FF8
0E99E:  CALL   2084
0E9A2:  GOTO   EA10 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
0FE3E:  MOVLW  04
0FE40:  MOVWF  FF6
0FE42:  MOVLW  14
0FE44:  MOVWF  FF7
0FE46:  MOVLW  00
0FE48:  MOVWF  FF8
0FE4A:  CALL   2084
....................    
....................    switch(command->frame_id)
0FE4E:  MOVLB  2
0FE50:  MOVF   x2C,W
0FE52:  MOVWF  FE9
0FE54:  MOVF   x2D,W
0FE56:  MOVWF  FEA
0FE58:  MOVF   FEF,W
0FE5A:  ADDLW  FC
0FE5C:  BTFSS  FD8.0
0FE5E:  BRA    FE66
0FE60:  MOVLB  0
0FE62:  GOTO   FEBE
0FE66:  ADDLW  04
0FE68:  MOVLB  0
0FE6A:  GOTO   FEC6
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
0FE6E:  MOVFF  22D,22F
0FE72:  MOVFF  22C,22E
0FE76:  GOTO   E9C4
....................          break;
0FE7A:  GOTO   FEBE
....................          
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
0FE7E:  MOVFF  22D,22F
0FE82:  MOVFF  22C,22E
0FE86:  GOTO   EA46
0FE8A:  MOVF   01,F
0FE8C:  BTFSC  FD8.2
0FE8E:  GOTO   FE9A
....................             return TRUE; // if status is finished, return TRUE
0FE92:  MOVLW  01
0FE94:  MOVWF  01
0FE96:  GOTO   FEC2
....................          }        
....................          break;
0FE9A:  GOTO   FEBE
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
0FE9E:  MOVFF  22D,22F
0FEA2:  MOVFF  22C,22E
0FEA6:  GOTO   11186
....................          break;
0FEAA:  GOTO   FEBE
....................       
....................       case SEND_TIME:
....................          handle_recieve_time(command);
0FEAE:  MOVFF  22D,22F
0FEB2:  MOVFF  22C,22E
0FEB6:  GOTO   11448
....................          break;
0FEBA:  GOTO   FEBE
....................    }
....................    return FALSE;
0FEBE:  MOVLW  00
0FEC0:  MOVWF  01
0FEC2:  GOTO   11D32 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
0E9C4:  MOVLW  1C
0E9C6:  MOVWF  FF6
0E9C8:  MOVLW  14
0E9CA:  MOVWF  FF7
0E9CC:  MOVLW  00
0E9CE:  MOVWF  FF8
0E9D0:  CALL   2084
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
0E9D4:  MOVLW  32
0E9D6:  MOVWF  FF6
0E9D8:  MOVLW  14
0E9DA:  MOVWF  FF7
0E9DC:  MOVLW  00
0E9DE:  MOVWF  FF8
0E9E0:  CALL   2084
....................    transmit_ack();
0E9E4:  CALL   5572
.................... 
....................    status[0] = EXECUTING_MISSION;
0E9E8:  MOVLW  02
0E9EA:  MOVWF  4C
....................    execute_mission(command->content);
0E9EC:  MOVLW  03
0E9EE:  MOVLB  2
0E9F0:  ADDWF  x2E,W
0E9F2:  MOVWF  01
0E9F4:  MOVLW  00
0E9F6:  ADDWFC x2F,W
0E9F8:  MOVWF  03
0E9FA:  MOVF   01,W
0E9FC:  MOVWF  x30
0E9FE:  MOVFF  03,231
0EA02:  MOVFF  231,233
0EA06:  MOVFF  230,232
0EA0A:  MOVLB  0
0EA0C:  GOTO   E4DC
....................    if (is_empty_flash_queue())
0EA10:  CALL   E9A6
0EA14:  MOVF   01,F
0EA16:  BTFSC  FD8.2
0EA18:  GOTO   EA24
....................       status[0] = FINISHED;
0EA1C:  MOVLW  06
0EA1E:  MOVWF  4C
0EA20:  GOTO   EA28
....................    else
....................       status[0] = SMF_USE_REQ;
0EA24:  MOVLW  04
0EA26:  MOVWF  4C
0EA28:  GOTO   FE7A (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... 
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
*
0EA46:  MOVLW  4C
0EA48:  MOVWF  FF6
0EA4A:  MOVLW  14
0EA4C:  MOVWF  FF7
0EA4E:  MOVLW  00
0EA50:  MOVWF  FF8
0EA52:  CALL   2084
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
0EA56:  MOVLW  60
0EA58:  MOVWF  FF6
0EA5A:  MOVLW  14
0EA5C:  MOVWF  FF7
0EA5E:  MOVLW  00
0EA60:  MOVWF  FF8
0EA62:  CALL   2084
....................    transmit_status();
0EA66:  GOTO   EA2C
....................    if (status[0] == FINISHED)
0EA6A:  MOVF   4C,W
0EA6C:  SUBLW  06
0EA6E:  BTFSS  FD8.2
0EA70:  GOTO   EA90
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
0EA74:  MOVLW  7E
0EA76:  MOVWF  FF6
0EA78:  MOVLW  14
0EA7A:  MOVWF  FF7
0EA7C:  MOVLW  00
0EA7E:  MOVWF  FF8
0EA80:  CALL   2084
....................       return TRUE;
0EA84:  MOVLW  01
0EA86:  MOVWF  01
0EA88:  GOTO   EA98
....................    }
0EA8C:  GOTO   EA98
....................    else{
....................       return FALSE;
0EA90:  MOVLW  00
0EA92:  MOVWF  01
0EA94:  GOTO   EA98
....................    }
0EA98:  GOTO   FE8A (RETURN)
.................... }
.................... 
.................... 
.................... void handle_smf_available(Command *command)
.................... {
....................     fprintf(PC, "\t-> SMF available check\r\n");
*
11186:  MOVLW  9A
11188:  MOVWF  FF6
1118A:  MOVLW  14
1118C:  MOVWF  FF7
1118E:  MOVLW  00
11190:  MOVWF  FF8
11192:  CALL   2084
....................     fprintf(PC, "\t   Transmit Acknowledgement\r\n");
11196:  MOVLW  B4
11198:  MOVWF  FF6
1119A:  MOVLW  14
1119C:  MOVWF  FF7
1119E:  MOVLW  00
111A0:  MOVWF  FF8
111A2:  CALL   2084
....................     transmit_ack();
111A6:  CALL   5572
.................... 
....................     if (command->content[0] != ALLOW) {
111AA:  MOVLW  03
111AC:  MOVLB  2
111AE:  ADDWF  x2E,W
111B0:  MOVWF  FE9
111B2:  MOVLW  00
111B4:  ADDWFC x2F,W
111B6:  MOVWF  FEA
111B8:  DECFSZ FEF,W
111BA:  BRA    111C0
111BC:  BRA    111C6
111BE:  MOVLB  0
111C0:  MOVLB  0
111C2:  GOTO   111CC
111C6:  MOVLB  0
111C8:  GOTO   111E0
....................         fprintf(PC, "\t\t-> denied\r\n");
111CC:  MOVLW  D4
111CE:  MOVWF  FF6
111D0:  MOVLW  14
111D2:  MOVWF  FF7
111D4:  MOVLW  00
111D6:  MOVWF  FF8
111D8:  CALL   2084
....................         return;
111DC:  GOTO   11444
....................     }
.................... 
....................     fprintf(PC, "\t\t-> allowed\r\n");
111E0:  MOVLW  E2
111E2:  MOVWF  FF6
111E4:  MOVLW  14
111E6:  MOVWF  FF7
111E8:  MOVLW  00
111EA:  MOVWF  FF8
111EC:  CALL   2084
....................     status[0] = COPYING;
111F0:  MOVLW  05
111F2:  MOVWF  4C
.................... 
....................     int8 processed_count = 0;
111F4:  MOVLB  2
111F6:  CLRF   x30
111F8:  MOVLB  0
.................... 
....................     while (!is_empty_flash_queue()) {
111FA:  CALL   E9A6
111FE:  MOVF   01,F
11200:  BTFSS  FD8.2
11202:  GOTO   11400
....................         FlashOperationStruct *smf_data = dequeue_flash_operation();
11206:  GOTO   EA9C
1120A:  MOVFF  02,232
1120E:  MOVFF  01,231
....................         /*
....................         if (smf_data == NULL) {
....................             fprintf(PC, "\t\t-> dequeue NULL (break)\r\n");
....................             break;
....................         }
....................          */
....................         fprintf(PC, "\t\t-> Dequeued: func=%u mission=%u size=%ld addr=%ld\r\n",
....................                 (unsigned int)smf_data->func_type,
....................                 (unsigned int)smf_data->mission_id,
....................                 smf_data->misf_size,
....................                 smf_data->misf_start_addr);
11212:  MOVLW  01
11214:  MOVLB  2
11216:  ADDWF  x31,W
11218:  MOVWF  FE9
1121A:  MOVLW  00
1121C:  ADDWFC x32,W
1121E:  MOVWF  FEA
11220:  MOVFF  FEF,233
11224:  MOVF   x31,W
11226:  MOVWF  FE9
11228:  MOVF   x32,W
1122A:  MOVWF  FEA
1122C:  MOVFF  FEF,234
11230:  MOVLW  08
11232:  ADDWF  x31,W
11234:  MOVWF  FE9
11236:  MOVLW  00
11238:  ADDWFC x32,W
1123A:  MOVWF  FEA
1123C:  MOVFF  FEF,235
11240:  MOVFF  FEC,236
11244:  MOVFF  FEC,237
11248:  MOVFF  FEC,238
1124C:  MOVF   FED,F
1124E:  MOVF   FED,F
11250:  MOVF   FED,F
11252:  MOVLW  04
11254:  ADDWF  x31,W
11256:  MOVWF  FE9
11258:  MOVLW  00
1125A:  ADDWFC x32,W
1125C:  MOVWF  FEA
1125E:  MOVFF  FEF,239
11262:  MOVFF  FEC,23A
11266:  MOVFF  FEC,23B
1126A:  MOVFF  FEC,23C
1126E:  MOVF   FED,F
11270:  MOVF   FED,F
11272:  MOVF   FED,F
11274:  MOVLW  F2
11276:  MOVWF  FF6
11278:  MOVLW  14
1127A:  MOVWF  FF7
1127C:  MOVLW  00
1127E:  MOVWF  FF8
11280:  MOVLW  14
11282:  MOVLB  3
11284:  MOVWF  x1E
11286:  MOVLB  0
11288:  CALL   20BA
1128C:  MOVFF  233,2E3
11290:  MOVLW  1B
11292:  MOVLB  2
11294:  MOVWF  xE4
11296:  MOVLB  0
11298:  CALL   E420
1129C:  MOVLW  08
1129E:  MOVWF  FF6
112A0:  MOVLW  15
112A2:  MOVWF  FF7
112A4:  MOVLW  00
112A6:  MOVWF  FF8
112A8:  MOVLW  09
112AA:  MOVLB  3
112AC:  MOVWF  x1E
112AE:  MOVLB  0
112B0:  CALL   20BA
112B4:  MOVFF  234,2E3
112B8:  MOVLW  1B
112BA:  MOVLB  2
112BC:  MOVWF  xE4
112BE:  MOVLB  0
112C0:  CALL   E420
112C4:  MOVLW  13
112C6:  MOVWF  FF6
112C8:  MOVLW  15
112CA:  MOVWF  FF7
112CC:  MOVLW  00
112CE:  MOVWF  FF8
112D0:  MOVLW  06
112D2:  MOVLB  3
112D4:  MOVWF  x1E
112D6:  MOVLB  0
112D8:  CALL   20BA
112DC:  MOVLW  41
112DE:  MOVWF  FE9
112E0:  MOVFF  238,240
112E4:  MOVFF  237,23F
112E8:  MOVFF  236,23E
112EC:  MOVFF  235,23D
112F0:  CALL   EB00
112F4:  MOVLW  1C
112F6:  MOVWF  FF6
112F8:  MOVLW  15
112FA:  MOVWF  FF7
112FC:  MOVLW  00
112FE:  MOVWF  FF8
11300:  MOVLW  06
11302:  MOVLB  3
11304:  MOVWF  x1E
11306:  MOVLB  0
11308:  CALL   20BA
1130C:  MOVLW  41
1130E:  MOVWF  FE9
11310:  MOVFF  23C,240
11314:  MOVFF  23B,23F
11318:  MOVFF  23A,23E
1131C:  MOVFF  239,23D
11320:  CALL   EB00
11324:  MOVLW  0D
11326:  BTFSS  FA6.6
11328:  GOTO   11326
1132C:  MOVLB  E
1132E:  MOVWF  xF9
11330:  MOVLW  0A
11332:  MOVLB  0
11334:  BTFSS  FA6.6
11336:  GOTO   11334
1133A:  MOVLB  E
1133C:  MOVWF  xF9
.................... 
....................         switch (smf_data->func_type) {
1133E:  MOVLW  01
11340:  MOVLB  2
11342:  ADDWF  x31,W
11344:  MOVWF  FE9
11346:  MOVLW  00
11348:  ADDWFC x32,W
1134A:  MOVWF  FEA
1134C:  MOVF   FEF,W
1134E:  XORLW  00
11350:  MOVLB  0
11352:  BTFSC  FD8.2
11354:  GOTO   1136C
11358:  XORLW  01
1135A:  BTFSC  FD8.2
1135C:  GOTO   1137C
11360:  XORLW  03
11362:  BTFSC  FD8.2
11364:  GOTO   1138C
11368:  GOTO   1139C
....................             case ENUM_SMF_WRITE:
....................                 smf_write(smf_data);
1136C:  MOVFF  232,234
11370:  MOVFF  231,233
11374:  GOTO   10000
....................                 break;
11378:  GOTO   113F6
....................             case ENUM_SMF_READ:
....................                 smf_read(smf_data);
1137C:  MOVFF  232,234
11380:  MOVFF  231,233
11384:  GOTO   F700
....................                 break;
11388:  GOTO   113F6
....................             case ENUM_SMF_ERASE:
....................                 smf_erase(smf_data);
1138C:  MOVFF  232,234
11390:  MOVFF  231,233
11394:  GOTO   10B04
....................                 break;
11398:  GOTO   113F6
....................             default:
....................                 fprintf(PC, "\t\t   Unknown func_type=%u\r\n",
....................                         (unsigned int)smf_data->func_type);
1139C:  MOVLW  01
1139E:  MOVLB  2
113A0:  ADDWF  x31,W
113A2:  MOVWF  FE9
113A4:  MOVLW  00
113A6:  ADDWFC x32,W
113A8:  MOVWF  FEA
113AA:  MOVFF  FEF,233
113AE:  MOVLW  28
113B0:  MOVWF  FF6
113B2:  MOVLW  15
113B4:  MOVWF  FF7
113B6:  MOVLW  00
113B8:  MOVWF  FF8
113BA:  MOVLW  17
113BC:  MOVLB  3
113BE:  MOVWF  x1E
113C0:  MOVLB  0
113C2:  CALL   20BA
113C6:  MOVFF  233,2E3
113CA:  MOVLW  1B
113CC:  MOVLB  2
113CE:  MOVWF  xE4
113D0:  MOVLB  0
113D2:  CALL   E420
113D6:  MOVLW  0D
113D8:  BTFSS  FA6.6
113DA:  GOTO   113D8
113DE:  MOVLB  E
113E0:  MOVWF  xF9
113E2:  MOVLW  0A
113E4:  MOVLB  0
113E6:  BTFSS  FA6.6
113E8:  GOTO   113E6
113EC:  MOVLB  E
113EE:  MOVWF  xF9
....................                 break;
113F0:  MOVLB  0
113F2:  GOTO   113F6
....................         }
....................         processed_count++;
113F6:  MOVLB  2
113F8:  INCF   x30,F
113FA:  MOVLB  0
113FC:  GOTO   111FA
....................     }
.................... 
....................     fprintf(PC, "\t\t-> Completed %u operations\r\n",
....................             (unsigned int)processed_count);
11400:  MOVLW  44
11402:  MOVWF  FF6
11404:  MOVLW  15
11406:  MOVWF  FF7
11408:  MOVLW  00
1140A:  MOVWF  FF8
1140C:  MOVLW  0F
1140E:  MOVLB  3
11410:  MOVWF  x1E
11412:  MOVLB  0
11414:  CALL   20BA
11418:  MOVFF  230,2E3
1141C:  MOVLW  1B
1141E:  MOVLB  2
11420:  MOVWF  xE4
11422:  MOVLB  0
11424:  CALL   E420
11428:  MOVLW  55
1142A:  MOVWF  FF6
1142C:  MOVLW  15
1142E:  MOVWF  FF7
11430:  MOVLW  00
11432:  MOVWF  FF8
11434:  MOVLW  0D
11436:  MOVLB  3
11438:  MOVWF  x1E
1143A:  MOVLB  0
1143C:  CALL   20BA
.................... 
....................     status[0] = FINISHED;
11440:  MOVLW  06
11442:  MOVWF  4C
11444:  GOTO   FEAA (RETURN)
.................... }
.................... 
.................... void handle_recieve_time(Command *command)
.................... {
....................    fprintf(PC, "\t-> TIME Receive\r\n");
11448:  MOVLW  64
1144A:  MOVWF  FF6
1144C:  MOVLW  15
1144E:  MOVWF  FF7
11450:  MOVLW  00
11452:  MOVWF  FF8
11454:  CALL   2084
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
11458:  MOVLW  78
1145A:  MOVWF  FF6
1145C:  MOVLW  15
1145E:  MOVWF  FF7
11460:  MOVLW  00
11462:  MOVWF  FF8
11464:  CALL   2084
....................    transmit_ack();
11468:  CALL   5572
.................... 
....................    // 4バイト(MSB, big-endian)に詰められた MM/DD hh:mm:ss を復元
....................    // [31:26]=0, [25:22]=month(1-12), [21:17]=day(1-31), [16:12]=hour(0-23), [11:6]=minute(0-59), [5:0]=second(0-59)
....................    unsigned int32 total_seconds = ((unsigned int32)command->content[0] << 24) |
....................                       ((unsigned int32)command->content[1] << 16) |
....................                       ((unsigned int32)command->content[2] << 8)  |
....................                       ((unsigned int32)command->content[3]);
1146C:  MOVLW  03
1146E:  MOVLB  2
11470:  ADDWF  x2E,W
11472:  MOVWF  FE9
11474:  MOVLW  00
11476:  ADDWFC x2F,W
11478:  MOVWF  FEA
1147A:  MOVF   FEF,W
1147C:  CLRF   x3C
1147E:  CLRF   x3B
11480:  CLRF   x3A
11482:  MOVWF  x39
11484:  MOVFF  239,23C
11488:  CLRF   x39
1148A:  CLRF   x3A
1148C:  CLRF   x3B
1148E:  MOVLW  04
11490:  ADDWF  x2E,W
11492:  MOVWF  FE9
11494:  MOVLW  00
11496:  ADDWFC x2F,W
11498:  MOVWF  FEA
1149A:  MOVF   FEF,W
1149C:  CLRF   x41
1149E:  CLRF   x40
114A0:  CLRF   x3F
114A2:  MOVWF  x3E
114A4:  MOVFF  23F,03
114A8:  MOVFF  23E,02
114AC:  CLRF   00
114AE:  CLRF   01
114B0:  MOVF   00,W
114B2:  IORWF  x39,F
114B4:  MOVF   01,W
114B6:  IORWF  x3A,F
114B8:  MOVF   02,W
114BA:  IORWF  x3B,F
114BC:  MOVF   03,W
114BE:  IORWF  x3C,F
114C0:  MOVLW  05
114C2:  ADDWF  x2E,W
114C4:  MOVWF  FE9
114C6:  MOVLW  00
114C8:  ADDWFC x2F,W
114CA:  MOVWF  FEA
114CC:  MOVF   FEF,W
114CE:  CLRF   x41
114D0:  CLRF   x40
114D2:  CLRF   x3F
114D4:  MOVWF  x3E
114D6:  MOVFF  240,03
114DA:  MOVFF  23F,02
114DE:  MOVFF  23E,01
114E2:  CLRF   00
114E4:  MOVF   00,W
114E6:  IORWF  x39,F
114E8:  MOVF   01,W
114EA:  IORWF  x3A,F
114EC:  MOVF   02,W
114EE:  IORWF  x3B,F
114F0:  MOVF   03,W
114F2:  IORWF  x3C,F
114F4:  MOVLW  06
114F6:  ADDWF  x2E,W
114F8:  MOVWF  FE9
114FA:  MOVLW  00
114FC:  ADDWFC x2F,W
114FE:  MOVWF  FEA
11500:  MOVF   FEF,W
11502:  MOVWF  00
11504:  CLRF   01
11506:  CLRF   02
11508:  CLRF   03
1150A:  MOVF   00,W
1150C:  IORWF  x39,W
1150E:  MOVWF  x30
11510:  MOVF   01,W
11512:  IORWF  x3A,W
11514:  MOVWF  x31
11516:  MOVF   02,W
11518:  IORWF  x3B,W
1151A:  MOVWF  x32
1151C:  MOVF   03,W
1151E:  IORWF  x3C,W
11520:  MOVWF  x33
.................... 
....................    set_current_sec(total_seconds);
11522:  MOVFF  233,23C
11526:  MOVFF  232,23B
1152A:  MOVFF  231,23A
1152E:  MOVFF  230,239
11532:  MOVLB  0
11534:  GOTO   FE2A
....................    unsigned int16 days;
....................    unsigned int8 hours, minutes, seconds;
....................    days    = total_seconds / 86400;
11538:  BCF    FD8.1
1153A:  MOVFF  233,AD8
1153E:  MOVFF  232,AD7
11542:  MOVFF  231,AD6
11546:  MOVFF  230,AD5
1154A:  MOVLB  A
1154C:  CLRF   xDC
1154E:  MOVLW  01
11550:  MOVWF  xDB
11552:  MOVLW  51
11554:  MOVWF  xDA
11556:  MOVLW  80
11558:  MOVWF  xD9
1155A:  MOVLB  0
1155C:  CALL   5E62
11560:  MOVFF  01,235
11564:  MOVFF  00,234
....................    hours   = (total_seconds % 86400) / 3600;
11568:  BSF    FD8.1
1156A:  MOVLW  02
1156C:  MOVWF  FEA
1156E:  MOVLW  39
11570:  MOVWF  FE9
11572:  MOVFF  233,AD8
11576:  MOVFF  232,AD7
1157A:  MOVFF  231,AD6
1157E:  MOVFF  230,AD5
11582:  MOVLB  A
11584:  CLRF   xDC
11586:  MOVLW  01
11588:  MOVWF  xDB
1158A:  MOVLW  51
1158C:  MOVWF  xDA
1158E:  MOVLW  80
11590:  MOVWF  xD9
11592:  MOVLB  0
11594:  CALL   5E62
11598:  MOVFF  23C,240
1159C:  MOVFF  23B,23F
115A0:  MOVFF  23A,23E
115A4:  MOVFF  239,23D
115A8:  MOVFF  FEA,242
115AC:  MOVFF  FE9,241
115B0:  BCF    FD8.1
115B2:  MOVFF  240,AD8
115B6:  MOVFF  23F,AD7
115BA:  MOVFF  23E,AD6
115BE:  MOVFF  23D,AD5
115C2:  MOVLB  A
115C4:  CLRF   xDC
115C6:  CLRF   xDB
115C8:  MOVLW  0E
115CA:  MOVWF  xDA
115CC:  MOVLW  10
115CE:  MOVWF  xD9
115D0:  MOVLB  0
115D2:  CALL   5E62
115D6:  MOVFF  242,FEA
115DA:  MOVFF  241,FE9
115DE:  MOVFF  00,236
....................    minutes = (total_seconds % 3600) / 60;
115E2:  BSF    FD8.1
115E4:  MOVLW  02
115E6:  MOVWF  FEA
115E8:  MOVLW  39
115EA:  MOVWF  FE9
115EC:  MOVFF  233,AD8
115F0:  MOVFF  232,AD7
115F4:  MOVFF  231,AD6
115F8:  MOVFF  230,AD5
115FC:  MOVLB  A
115FE:  CLRF   xDC
11600:  CLRF   xDB
11602:  MOVLW  0E
11604:  MOVWF  xDA
11606:  MOVLW  10
11608:  MOVWF  xD9
1160A:  MOVLB  0
1160C:  CALL   5E62
11610:  MOVFF  23C,240
11614:  MOVFF  23B,23F
11618:  MOVFF  23A,23E
1161C:  MOVFF  239,23D
11620:  MOVFF  FEA,242
11624:  MOVFF  FE9,241
11628:  BCF    FD8.1
1162A:  MOVFF  240,AD8
1162E:  MOVFF  23F,AD7
11632:  MOVFF  23E,AD6
11636:  MOVFF  23D,AD5
1163A:  MOVLB  A
1163C:  CLRF   xDC
1163E:  CLRF   xDB
11640:  CLRF   xDA
11642:  MOVLW  3C
11644:  MOVWF  xD9
11646:  MOVLB  0
11648:  CALL   5E62
1164C:  MOVFF  242,FEA
11650:  MOVFF  241,FE9
11654:  MOVFF  00,237
....................    seconds = total_seconds % 60;
11658:  BSF    FD8.1
1165A:  MOVLW  02
1165C:  MOVWF  FEA
1165E:  MOVLW  39
11660:  MOVWF  FE9
11662:  MOVFF  233,AD8
11666:  MOVFF  232,AD7
1166A:  MOVFF  231,AD6
1166E:  MOVFF  230,AD5
11672:  MOVLB  A
11674:  CLRF   xDC
11676:  CLRF   xDB
11678:  CLRF   xDA
1167A:  MOVLW  3C
1167C:  MOVWF  xD9
1167E:  MOVLB  0
11680:  CALL   5E62
11684:  MOVFF  239,238
.................... 
....................    fprintf(PC, "\t\t-> Set time to %lu days, %02u:%02u:%02u\r\n",
....................            days, hours, minutes, seconds);
11688:  MOVLW  92
1168A:  MOVWF  FF6
1168C:  MOVLW  15
1168E:  MOVWF  FF7
11690:  MOVLW  00
11692:  MOVWF  FF8
11694:  MOVLW  11
11696:  MOVLB  3
11698:  MOVWF  x1E
1169A:  MOVLB  0
1169C:  CALL   20BA
116A0:  MOVLW  10
116A2:  MOVWF  FE9
116A4:  MOVFF  235,23F
116A8:  MOVFF  234,23E
116AC:  CALL   E2B8
116B0:  MOVLW  A6
116B2:  MOVWF  FF6
116B4:  MOVLW  15
116B6:  MOVWF  FF7
116B8:  MOVLW  00
116BA:  MOVWF  FF8
116BC:  MOVLW  07
116BE:  MOVLB  3
116C0:  MOVWF  x1E
116C2:  MOVLB  0
116C4:  CALL   20BA
116C8:  MOVFF  236,2E3
116CC:  MOVLW  01
116CE:  MOVLB  2
116D0:  MOVWF  xE4
116D2:  MOVLB  0
116D4:  CALL   E420
116D8:  MOVLW  3A
116DA:  BTFSS  FA6.6
116DC:  GOTO   116DA
116E0:  MOVLB  E
116E2:  MOVWF  xF9
116E4:  MOVFF  237,2E3
116E8:  MOVLW  01
116EA:  MOVLB  2
116EC:  MOVWF  xE4
116EE:  MOVLB  0
116F0:  CALL   E420
116F4:  MOVLW  3A
116F6:  BTFSS  FA6.6
116F8:  GOTO   116F6
116FC:  MOVLB  E
116FE:  MOVWF  xF9
11700:  MOVFF  238,2E3
11704:  MOVLW  01
11706:  MOVLB  2
11708:  MOVWF  xE4
1170A:  MOVLB  0
1170C:  CALL   E420
11710:  MOVLW  0D
11712:  BTFSS  FA6.6
11714:  GOTO   11712
11718:  MOVLB  E
1171A:  MOVWF  xF9
1171C:  MOVLW  0A
1171E:  MOVLB  0
11720:  BTFSS  FA6.6
11722:  GOTO   11720
11726:  MOVLB  E
11728:  MOVWF  xF9
1172A:  MOVLB  0
1172C:  GOTO   FEBA (RETURN)
.................... 
.................... }
.................... // End of file
.................... 
.................... #include "application/mmj_cigs_mode_mission.c"
.................... #include "mmj_cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_DEBUG 0xA3
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/mmj_cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFFFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE-1];
.................... 
....................     struct {
....................         unsigned int16 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int16 time_msec;
....................         meas_data_t env_data[2];
....................         meas_data_t iv_data[16];
.................... 
....................     }header;
....................     struct {
....................         meas_data_t iv_data[21];
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.1
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/device/ad7490.h"                    // ADCライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/mmj_cigs_flash.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/mmj_cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS IV\r\n");
*
0A914:  MOVLW  BE
0A916:  MOVWF  FF6
0A918:  MOVLW  15
0A91A:  MOVWF  FF7
0A91C:  MOVLW  00
0A91E:  MOVWF  FF8
0A920:  CALL   2084
....................    MEAS_IV_CMD cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0A924:  MOVFF  23F,273
0A928:  MOVFF  23E,272
0A92C:  CALL   8724
0A930:  MOVFF  02,03
0A934:  MOVF   01,W
0A936:  MOVWF  FE1
0A938:  MOVFF  03,FE2
0A93C:  MOVLW  02
0A93E:  MOVWF  FEA
0A940:  MOVLW  40
0A942:  MOVWF  FE9
0A944:  MOVLW  0C
0A946:  MOVWF  01
0A948:  MOVFF  FE6,FEE
0A94C:  DECFSZ 01,F
0A94E:  GOTO   A948
....................    fprintf(PC, "\tSleepTime:        %04LX\r\n", cmd.sleep_time);
0A952:  MOVLW  D4
0A954:  MOVWF  FF6
0A956:  MOVLW  15
0A958:  MOVWF  FF7
0A95A:  MOVLW  00
0A95C:  MOVWF  FF8
0A95E:  MOVLW  13
0A960:  MOVLB  3
0A962:  MOVWF  x1E
0A964:  MOVLB  0
0A966:  CALL   20BA
0A96A:  MOVFF  242,A77
0A96E:  MOVLW  37
0A970:  MOVLB  A
0A972:  MOVWF  x78
0A974:  MOVLB  0
0A976:  CALL   22D0
0A97A:  MOVFF  241,A77
0A97E:  MOVLW  37
0A980:  MOVLB  A
0A982:  MOVWF  x78
0A984:  MOVLB  0
0A986:  CALL   22D0
0A98A:  MOVLW  0D
0A98C:  BTFSS  FA6.6
0A98E:  GOTO   A98C
0A992:  MOVLB  E
0A994:  MOVWF  xF9
0A996:  MOVLW  0A
0A998:  MOVLB  0
0A99A:  BTFSS  FA6.6
0A99C:  GOTO   A99A
0A9A0:  MOVLB  E
0A9A2:  MOVWF  xF9
....................    fprintf(PC, "\tCurrentThreshold: %04LX\r\n", cmd.curr_threshold);
0A9A4:  MOVLW  F0
0A9A6:  MOVWF  FF6
0A9A8:  MOVLW  15
0A9AA:  MOVWF  FF7
0A9AC:  MOVLW  00
0A9AE:  MOVWF  FF8
0A9B0:  MOVLW  13
0A9B2:  MOVLB  3
0A9B4:  MOVWF  x1E
0A9B6:  MOVLB  0
0A9B8:  CALL   20BA
0A9BC:  MOVFF  244,A77
0A9C0:  MOVLW  37
0A9C2:  MOVLB  A
0A9C4:  MOVWF  x78
0A9C6:  MOVLB  0
0A9C8:  CALL   22D0
0A9CC:  MOVFF  243,A77
0A9D0:  MOVLW  37
0A9D2:  MOVLB  A
0A9D4:  MOVWF  x78
0A9D6:  MOVLB  0
0A9D8:  CALL   22D0
0A9DC:  MOVLW  0D
0A9DE:  BTFSS  FA6.6
0A9E0:  GOTO   A9DE
0A9E4:  MOVLB  E
0A9E6:  MOVWF  xF9
0A9E8:  MOVLW  0A
0A9EA:  MOVLB  0
0A9EC:  BTFSS  FA6.6
0A9EE:  GOTO   A9EC
0A9F2:  MOVLB  E
0A9F4:  MOVWF  xF9
....................    fprintf(PC, "\tPDThreshold:      %04LX\r\n", cmd.pd_threshold);
0A9F6:  MOVLW  0C
0A9F8:  MOVWF  FF6
0A9FA:  MOVLW  16
0A9FC:  MOVWF  FF7
0A9FE:  MOVLW  00
0AA00:  MOVWF  FF8
0AA02:  MOVLW  13
0AA04:  MOVLB  3
0AA06:  MOVWF  x1E
0AA08:  MOVLB  0
0AA0A:  CALL   20BA
0AA0E:  MOVFF  246,A77
0AA12:  MOVLW  37
0AA14:  MOVLB  A
0AA16:  MOVWF  x78
0AA18:  MOVLB  0
0AA1A:  CALL   22D0
0AA1E:  MOVFF  245,A77
0AA22:  MOVLW  37
0AA24:  MOVLB  A
0AA26:  MOVWF  x78
0AA28:  MOVLB  0
0AA2A:  CALL   22D0
0AA2E:  MOVLW  0D
0AA30:  BTFSS  FA6.6
0AA32:  GOTO   AA30
0AA36:  MOVLB  E
0AA38:  MOVWF  xF9
0AA3A:  MOVLW  0A
0AA3C:  MOVLB  0
0AA3E:  BTFSS  FA6.6
0AA40:  GOTO   AA3E
0AA44:  MOVLB  E
0AA46:  MOVWF  xF9
....................    fprintf(PC, "\tCurrentLimit:     %04LX\r\n", cmd.curr_limit);
0AA48:  MOVLW  28
0AA4A:  MOVWF  FF6
0AA4C:  MOVLW  16
0AA4E:  MOVWF  FF7
0AA50:  MOVLW  00
0AA52:  MOVWF  FF8
0AA54:  MOVLW  13
0AA56:  MOVLB  3
0AA58:  MOVWF  x1E
0AA5A:  MOVLB  0
0AA5C:  CALL   20BA
0AA60:  MOVFF  248,A77
0AA64:  MOVLW  37
0AA66:  MOVLB  A
0AA68:  MOVWF  x78
0AA6A:  MOVLB  0
0AA6C:  CALL   22D0
0AA70:  MOVFF  247,A77
0AA74:  MOVLW  37
0AA76:  MOVLB  A
0AA78:  MOVWF  x78
0AA7A:  MOVLB  0
0AA7C:  CALL   22D0
0AA80:  MOVLW  0D
0AA82:  BTFSS  FA6.6
0AA84:  GOTO   AA82
0AA88:  MOVLB  E
0AA8A:  MOVWF  xF9
0AA8C:  MOVLW  0A
0AA8E:  MOVLB  0
0AA90:  BTFSS  FA6.6
0AA92:  GOTO   AA90
0AA96:  MOVLB  E
0AA98:  MOVWF  xF9
....................    fprintf(PC, "\tMeasurementTime:  %04LX\r\n", cmd.meas_time);
0AA9A:  MOVLW  44
0AA9C:  MOVWF  FF6
0AA9E:  MOVLW  16
0AAA0:  MOVWF  FF7
0AAA2:  MOVLW  00
0AAA4:  MOVWF  FF8
0AAA6:  MOVLW  13
0AAA8:  MOVLB  3
0AAAA:  MOVWF  x1E
0AAAC:  MOVLB  0
0AAAE:  CALL   20BA
0AAB2:  MOVFF  24A,A77
0AAB6:  MOVLW  37
0AAB8:  MOVLB  A
0AABA:  MOVWF  x78
0AABC:  MOVLB  0
0AABE:  CALL   22D0
0AAC2:  MOVFF  249,A77
0AAC6:  MOVLW  37
0AAC8:  MOVLB  A
0AACA:  MOVWF  x78
0AACC:  MOVLB  0
0AACE:  CALL   22D0
0AAD2:  MOVLW  0D
0AAD4:  BTFSS  FA6.6
0AAD6:  GOTO   AAD4
0AADA:  MOVLB  E
0AADC:  MOVWF  xF9
0AADE:  MOVLW  0A
0AAE0:  MOVLB  0
0AAE2:  BTFSS  FA6.6
0AAE4:  GOTO   AAE2
0AAE8:  MOVLB  E
0AAEA:  MOVWF  xF9
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_START); // Log the start of the command execution
0AAEC:  MOVFF  240,295
0AAF0:  MOVLB  2
0AAF2:  CLRF   x96
0AAF4:  MOVLB  0
0AAF6:  CALL   4D60
.................... 
....................    unsigned int32 start_time = get_current_sec();
....................    unsigned int32 current_sec = 0;
0AAFA:  CALL   395E
0AAFE:  MOVFF  03,24F
0AB02:  MOVFF  02,24E
0AB06:  MOVFF  01,24D
0AB0A:  MOVFF  00,24C
0AB0E:  MOVLB  2
0AB10:  CLRF   x53
0AB12:  CLRF   x52
0AB14:  CLRF   x51
0AB16:  CLRF   x50
....................    
....................    sweep(cmd.curr_threshold, cmd.curr_limit, cmd.pd_threshold); // Perform the sweep with thresholds
0AB18:  MOVFF  244,26D
0AB1C:  MOVFF  243,26C
0AB20:  MOVFF  248,26F
0AB24:  MOVFF  247,26E
0AB28:  MOVFF  246,271
0AB2C:  MOVFF  245,270
0AB30:  MOVLB  0
0AB32:  GOTO   930A
....................    delay_ms(cmd.sleep_time);
0AB36:  MOVFF  242,26C
0AB3A:  MOVLB  2
0AB3C:  INCF   x6C,F
0AB3E:  MOVLB  0
0AB40:  MOVLB  2
0AB42:  DECFSZ x6C,F
0AB44:  BRA    AB4A
0AB46:  MOVLB  0
0AB48:  BRA    AB56
0AB4A:  MOVLB  B
0AB4C:  SETF   xC0
0AB4E:  MOVLB  0
0AB50:  CALL   2056
0AB54:  BRA    AB40
0AB56:  MOVFF  241,BC0
0AB5A:  CALL   2056
....................    /*
....................    while(get_current_sec() - start_time < cmd.meas_time)
....................    {
....................       sweep(cmd.curr_threshold, cmd.curr_limit, cmd.pd_threshold); // Perform the sweep with thresholds
....................       delay_ms(cmd.sleep_time);
....................    }
....................    */
....................    piclog_make(cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
0AB5E:  MOVFF  240,295
0AB62:  MOVLB  2
0AB64:  SETF   x96
0AB66:  MOVLB  0
0AB68:  CALL   4D60
.................... 
.................... 
.................... 
....................    FlashOperationStruct data = {0};
0AB6C:  MOVLB  2
0AB6E:  CLRF   x54
0AB70:  CLRF   x55
0AB72:  CLRF   x56
0AB74:  CLRF   x57
0AB76:  CLRF   x58
0AB78:  CLRF   x59
0AB7A:  CLRF   x5A
0AB7C:  CLRF   x5B
0AB7E:  CLRF   x5C
0AB80:  CLRF   x5D
0AB82:  CLRF   x5E
0AB84:  CLRF   x5F
....................    data.func_type = ENUM_SMF_WRITE;
0AB86:  CLRF   x55
....................    data.mission_id = CIGS_IV1_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0AB88:  MOVLW  04
0AB8A:  MOVWF  x54
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0AB8C:  MOVLW  02
0AB8E:  MOVWF  x56
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0AB90:  BCF    x57.0
.................... 
.................... 
....................    fprintf(PC, "Enqueue Flash Operation\r\n");
0AB92:  MOVLW  60
0AB94:  MOVWF  FF6
0AB96:  MOVLW  16
0AB98:  MOVWF  FF7
0AB9A:  MOVLW  00
0AB9C:  MOVWF  FF8
0AB9E:  MOVLB  0
0ABA0:  CALL   2084
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0ABA4:  MOVLW  7A
0ABA6:  MOVWF  FF6
0ABA8:  MOVLW  16
0ABAA:  MOVWF  FF7
0ABAC:  MOVLW  00
0ABAE:  MOVWF  FF8
0ABB0:  MOVLW  0F
0ABB2:  MOVLB  3
0ABB4:  MOVWF  x1E
0ABB6:  MOVLB  0
0ABB8:  CALL   20BA
0ABBC:  MOVFF  254,A77
0ABC0:  MOVLW  37
0ABC2:  MOVLB  A
0ABC4:  MOVWF  x78
0ABC6:  MOVLB  0
0ABC8:  CALL   22D0
0ABCC:  MOVLW  0D
0ABCE:  BTFSS  FA6.6
0ABD0:  GOTO   ABCE
0ABD4:  MOVLB  E
0ABD6:  MOVWF  xF9
0ABD8:  MOVLW  0A
0ABDA:  MOVLB  0
0ABDC:  BTFSS  FA6.6
0ABDE:  GOTO   ABDC
0ABE2:  MOVLB  E
0ABE4:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0ABE6:  MOVLW  90
0ABE8:  MOVWF  FF6
0ABEA:  MOVLW  16
0ABEC:  MOVWF  FF7
0ABEE:  MOVLW  00
0ABF0:  MOVWF  FF8
0ABF2:  MOVLW  0F
0ABF4:  MOVLB  3
0ABF6:  MOVWF  x1E
0ABF8:  MOVLB  0
0ABFA:  CALL   20BA
0ABFE:  MOVFF  255,A77
0AC02:  MOVLW  37
0AC04:  MOVLB  A
0AC06:  MOVWF  x78
0AC08:  MOVLB  0
0AC0A:  CALL   22D0
0AC0E:  MOVLW  0D
0AC10:  BTFSS  FA6.6
0AC12:  GOTO   AC10
0AC16:  MOVLB  E
0AC18:  MOVWF  xF9
0AC1A:  MOVLW  0A
0AC1C:  MOVLB  0
0AC1E:  BTFSS  FA6.6
0AC20:  GOTO   AC1E
0AC24:  MOVLB  E
0AC26:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0AC28:  MOVLW  A6
0AC2A:  MOVWF  FF6
0AC2C:  MOVLW  16
0AC2E:  MOVWF  FF7
0AC30:  MOVLW  00
0AC32:  MOVWF  FF8
0AC34:  MOVLW  0F
0AC36:  MOVLB  3
0AC38:  MOVWF  x1E
0AC3A:  MOVLB  0
0AC3C:  CALL   20BA
0AC40:  MOVFF  256,A77
0AC44:  MOVLW  37
0AC46:  MOVLB  A
0AC48:  MOVWF  x78
0AC4A:  MOVLB  0
0AC4C:  CALL   22D0
0AC50:  MOVLW  0D
0AC52:  BTFSS  FA6.6
0AC54:  GOTO   AC52
0AC58:  MOVLB  E
0AC5A:  MOVWF  xF9
0AC5C:  MOVLW  0A
0AC5E:  MOVLB  0
0AC60:  BTFSS  FA6.6
0AC62:  GOTO   AC60
0AC66:  MOVLB  E
0AC68:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0AC6A:  MOVLW  00
0AC6C:  MOVLB  2
0AC6E:  BTFSC  x57.0
0AC70:  MOVLW  01
0AC72:  MOVWF  x6C
0AC74:  MOVLW  BC
0AC76:  MOVWF  FF6
0AC78:  MOVLW  16
0AC7A:  MOVWF  FF7
0AC7C:  MOVLW  00
0AC7E:  MOVWF  FF8
0AC80:  MOVLW  0F
0AC82:  MOVLB  3
0AC84:  MOVWF  x1E
0AC86:  MOVLB  0
0AC88:  CALL   20BA
0AC8C:  MOVFF  26C,A77
0AC90:  MOVLW  37
0AC92:  MOVLB  A
0AC94:  MOVWF  x78
0AC96:  MOVLB  0
0AC98:  CALL   22D0
0AC9C:  MOVLW  0D
0AC9E:  BTFSS  FA6.6
0ACA0:  GOTO   AC9E
0ACA4:  MOVLB  E
0ACA6:  MOVWF  xF9
0ACA8:  MOVLW  0A
0ACAA:  MOVLB  0
0ACAC:  BTFSS  FA6.6
0ACAE:  GOTO   ACAC
0ACB2:  MOVLB  E
0ACB4:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0ACB6:  MOVLW  D2
0ACB8:  MOVWF  FF6
0ACBA:  MOVLW  16
0ACBC:  MOVWF  FF7
0ACBE:  MOVLW  00
0ACC0:  MOVWF  FF8
0ACC2:  MOVLW  0F
0ACC4:  MOVLB  3
0ACC6:  MOVWF  x1E
0ACC8:  MOVLB  0
0ACCA:  CALL   20BA
0ACCE:  MOVLW  02
0ACD0:  MOVLB  2
0ACD2:  MOVWF  x6C
0ACD4:  MOVLB  0
0ACD6:  MOVLW  30
0ACD8:  BTFSS  FA6.6
0ACDA:  GOTO   ACD8
0ACDE:  MOVLB  E
0ACE0:  MOVWF  xF9
0ACE2:  MOVLB  2
0ACE4:  DECFSZ x6C,F
0ACE6:  BRA    ACEC
0ACE8:  BRA    ACF2
0ACEA:  MOVLB  0
0ACEC:  MOVLB  0
0ACEE:  GOTO   ACD6
0ACF2:  MOVFF  258,A77
0ACF6:  MOVLW  37
0ACF8:  MOVLB  A
0ACFA:  MOVWF  x78
0ACFC:  MOVLB  0
0ACFE:  CALL   22D0
0AD02:  MOVLW  0D
0AD04:  BTFSS  FA6.6
0AD06:  GOTO   AD04
0AD0A:  MOVLB  E
0AD0C:  MOVWF  xF9
0AD0E:  MOVLW  0A
0AD10:  MOVLB  0
0AD12:  BTFSS  FA6.6
0AD14:  GOTO   AD12
0AD18:  MOVLB  E
0AD1A:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV1_DATA].uncopied_counter);
0AD1C:  MOVLW  E8
0AD1E:  MOVWF  FF6
0AD20:  MOVLW  16
0AD22:  MOVWF  FF7
0AD24:  MOVLW  00
0AD26:  MOVWF  FF8
0AD28:  MOVLW  0F
0AD2A:  MOVLB  3
0AD2C:  MOVWF  x1E
0AD2E:  MOVLB  0
0AD30:  CALL   20BA
0AD34:  MOVLW  02
0AD36:  MOVLB  2
0AD38:  MOVWF  x6C
0AD3A:  MOVLB  0
0AD3C:  MOVLW  30
0AD3E:  BTFSS  FA6.6
0AD40:  GOTO   AD3E
0AD44:  MOVLB  E
0AD46:  MOVWF  xF9
0AD48:  MOVLB  2
0AD4A:  DECFSZ x6C,F
0AD4C:  BRA    AD52
0AD4E:  BRA    AD58
0AD50:  MOVLB  0
0AD52:  MOVLB  0
0AD54:  GOTO   AD3C
0AD58:  MOVFF  15C,A77
0AD5C:  MOVLW  37
0AD5E:  MOVLB  A
0AD60:  MOVWF  x78
0AD62:  MOVLB  0
0AD64:  CALL   22D0
0AD68:  MOVLW  0D
0AD6A:  BTFSS  FA6.6
0AD6C:  GOTO   AD6A
0AD70:  MOVLB  E
0AD72:  MOVWF  xF9
0AD74:  MOVLW  0A
0AD76:  MOVLB  0
0AD78:  BTFSS  FA6.6
0AD7A:  GOTO   AD78
0AD7E:  MOVLB  E
0AD80:  MOVWF  xF9
.................... 
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0AD82:  MOVLW  02
0AD84:  MOVLB  2
0AD86:  MOVWF  x6D
0AD88:  MOVLW  54
0AD8A:  MOVWF  x6C
0AD8C:  MOVLB  0
0AD8E:  CALL   A69A
.................... 
....................    FlashOperationStruct piclog = {0};
0AD92:  MOVLB  2
0AD94:  CLRF   x60
0AD96:  CLRF   x61
0AD98:  CLRF   x62
0AD9A:  CLRF   x63
0AD9C:  CLRF   x64
0AD9E:  CLRF   x65
0ADA0:  CLRF   x66
0ADA2:  CLRF   x67
0ADA4:  CLRF   x68
0ADA6:  CLRF   x69
0ADA8:  CLRF   x6A
0ADAA:  CLRF   x6B
....................    piclog.func_type = ENUM_SMF_WRITE;
0ADAC:  CLRF   x61
....................    piclog.mission_id = FLASH_ID_PICLOG; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0ADAE:  MOVLW  01
0ADB0:  MOVWF  x60
....................    piclog.write_mode = SMF_WRITE_CIRCULAR;
0ADB2:  MOVLW  02
0ADB4:  MOVWF  x62
....................    piclog.source_type = SOURCE_MISF_UNCOPIED;
0ADB6:  BCF    x63.0
.................... 
....................    fprintf(PC, "Enqueue Flash Operation\r\n");
0ADB8:  MOVLW  FE
0ADBA:  MOVWF  FF6
0ADBC:  MOVLW  16
0ADBE:  MOVWF  FF7
0ADC0:  MOVLW  00
0ADC2:  MOVWF  FF8
0ADC4:  MOVLB  0
0ADC6:  CALL   2084
....................    fprintf(PC, "\tMission ID:   %02X\r\n", piclog.mission_id);
0ADCA:  MOVLW  18
0ADCC:  MOVWF  FF6
0ADCE:  MOVLW  17
0ADD0:  MOVWF  FF7
0ADD2:  MOVLW  00
0ADD4:  MOVWF  FF8
0ADD6:  MOVLW  0F
0ADD8:  MOVLB  3
0ADDA:  MOVWF  x1E
0ADDC:  MOVLB  0
0ADDE:  CALL   20BA
0ADE2:  MOVFF  260,A77
0ADE6:  MOVLW  37
0ADE8:  MOVLB  A
0ADEA:  MOVWF  x78
0ADEC:  MOVLB  0
0ADEE:  CALL   22D0
0ADF2:  MOVLW  0D
0ADF4:  BTFSS  FA6.6
0ADF6:  GOTO   ADF4
0ADFA:  MOVLB  E
0ADFC:  MOVWF  xF9
0ADFE:  MOVLW  0A
0AE00:  MOVLB  0
0AE02:  BTFSS  FA6.6
0AE04:  GOTO   AE02
0AE08:  MOVLB  E
0AE0A:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", piclog.func_type);
0AE0C:  MOVLW  2E
0AE0E:  MOVWF  FF6
0AE10:  MOVLW  17
0AE12:  MOVWF  FF7
0AE14:  MOVLW  00
0AE16:  MOVWF  FF8
0AE18:  MOVLW  0F
0AE1A:  MOVLB  3
0AE1C:  MOVWF  x1E
0AE1E:  MOVLB  0
0AE20:  CALL   20BA
0AE24:  MOVFF  261,A77
0AE28:  MOVLW  37
0AE2A:  MOVLB  A
0AE2C:  MOVWF  x78
0AE2E:  MOVLB  0
0AE30:  CALL   22D0
0AE34:  MOVLW  0D
0AE36:  BTFSS  FA6.6
0AE38:  GOTO   AE36
0AE3C:  MOVLB  E
0AE3E:  MOVWF  xF9
0AE40:  MOVLW  0A
0AE42:  MOVLB  0
0AE44:  BTFSS  FA6.6
0AE46:  GOTO   AE44
0AE4A:  MOVLB  E
0AE4C:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", piclog.write_mode);
0AE4E:  MOVLW  44
0AE50:  MOVWF  FF6
0AE52:  MOVLW  17
0AE54:  MOVWF  FF7
0AE56:  MOVLW  00
0AE58:  MOVWF  FF8
0AE5A:  MOVLW  0F
0AE5C:  MOVLB  3
0AE5E:  MOVWF  x1E
0AE60:  MOVLB  0
0AE62:  CALL   20BA
0AE66:  MOVFF  262,A77
0AE6A:  MOVLW  37
0AE6C:  MOVLB  A
0AE6E:  MOVWF  x78
0AE70:  MOVLB  0
0AE72:  CALL   22D0
0AE76:  MOVLW  0D
0AE78:  BTFSS  FA6.6
0AE7A:  GOTO   AE78
0AE7E:  MOVLB  E
0AE80:  MOVWF  xF9
0AE82:  MOVLW  0A
0AE84:  MOVLB  0
0AE86:  BTFSS  FA6.6
0AE88:  GOTO   AE86
0AE8C:  MOVLB  E
0AE8E:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", piclog.source_type);
0AE90:  MOVLW  00
0AE92:  MOVLB  2
0AE94:  BTFSC  x63.0
0AE96:  MOVLW  01
0AE98:  MOVWF  x6C
0AE9A:  MOVLW  5A
0AE9C:  MOVWF  FF6
0AE9E:  MOVLW  17
0AEA0:  MOVWF  FF7
0AEA2:  MOVLW  00
0AEA4:  MOVWF  FF8
0AEA6:  MOVLW  0F
0AEA8:  MOVLB  3
0AEAA:  MOVWF  x1E
0AEAC:  MOVLB  0
0AEAE:  CALL   20BA
0AEB2:  MOVFF  26C,A77
0AEB6:  MOVLW  37
0AEB8:  MOVLB  A
0AEBA:  MOVWF  x78
0AEBC:  MOVLB  0
0AEBE:  CALL   22D0
0AEC2:  MOVLW  0D
0AEC4:  BTFSS  FA6.6
0AEC6:  GOTO   AEC4
0AECA:  MOVLB  E
0AECC:  MOVWF  xF9
0AECE:  MOVLW  0A
0AED0:  MOVLB  0
0AED2:  BTFSS  FA6.6
0AED4:  GOTO   AED2
0AED8:  MOVLB  E
0AEDA:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", piclog.misf_start_addr);
0AEDC:  MOVLW  70
0AEDE:  MOVWF  FF6
0AEE0:  MOVLW  17
0AEE2:  MOVWF  FF7
0AEE4:  MOVLW  00
0AEE6:  MOVWF  FF8
0AEE8:  MOVLW  0F
0AEEA:  MOVLB  3
0AEEC:  MOVWF  x1E
0AEEE:  MOVLB  0
0AEF0:  CALL   20BA
0AEF4:  MOVLW  02
0AEF6:  MOVLB  2
0AEF8:  MOVWF  x6C
0AEFA:  MOVLB  0
0AEFC:  MOVLW  30
0AEFE:  BTFSS  FA6.6
0AF00:  GOTO   AEFE
0AF04:  MOVLB  E
0AF06:  MOVWF  xF9
0AF08:  MOVLB  2
0AF0A:  DECFSZ x6C,F
0AF0C:  BRA    AF12
0AF0E:  BRA    AF18
0AF10:  MOVLB  0
0AF12:  MOVLB  0
0AF14:  GOTO   AEFC
0AF18:  MOVFF  264,A77
0AF1C:  MOVLW  37
0AF1E:  MOVLB  A
0AF20:  MOVWF  x78
0AF22:  MOVLB  0
0AF24:  CALL   22D0
0AF28:  MOVLW  0D
0AF2A:  BTFSS  FA6.6
0AF2C:  GOTO   AF2A
0AF30:  MOVLB  E
0AF32:  MOVWF  xF9
0AF34:  MOVLW  0A
0AF36:  MOVLB  0
0AF38:  BTFSS  FA6.6
0AF3A:  GOTO   AF38
0AF3E:  MOVLB  E
0AF40:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[FLASH_ID_PICLOG].uncopied_counter);
0AF42:  MOVLW  86
0AF44:  MOVWF  FF6
0AF46:  MOVLW  17
0AF48:  MOVWF  FF7
0AF4A:  MOVLW  00
0AF4C:  MOVWF  FF8
0AF4E:  MOVLW  0F
0AF50:  MOVLB  3
0AF52:  MOVWF  x1E
0AF54:  MOVLB  0
0AF56:  CALL   20BA
0AF5A:  MOVLW  02
0AF5C:  MOVLB  2
0AF5E:  MOVWF  x6C
0AF60:  MOVLB  0
0AF62:  MOVLW  30
0AF64:  BTFSS  FA6.6
0AF66:  GOTO   AF64
0AF6A:  MOVLB  E
0AF6C:  MOVWF  xF9
0AF6E:  MOVLB  2
0AF70:  DECFSZ x6C,F
0AF72:  BRA    AF78
0AF74:  BRA    AF7E
0AF76:  MOVLB  0
0AF78:  MOVLB  0
0AF7A:  GOTO   AF62
0AF7E:  MOVFF  13E,A77
0AF82:  MOVLW  37
0AF84:  MOVLB  A
0AF86:  MOVWF  x78
0AF88:  MOVLB  0
0AF8A:  CALL   22D0
0AF8E:  MOVLW  0D
0AF90:  BTFSS  FA6.6
0AF92:  GOTO   AF90
0AF96:  MOVLB  E
0AF98:  MOVWF  xF9
0AF9A:  MOVLW  0A
0AF9C:  MOVLB  0
0AF9E:  BTFSS  FA6.6
0AFA0:  GOTO   AF9E
0AFA4:  MOVLB  E
0AFA6:  MOVWF  xF9
....................    enqueue_flash_operation(&piclog); // SMFへのデータコピーを実行する
0AFA8:  MOVLW  02
0AFAA:  MOVLB  2
0AFAC:  MOVWF  x6D
0AFAE:  MOVLW  60
0AFB0:  MOVWF  x6C
0AFB2:  MOVLB  0
0AFB4:  CALL   A69A
....................    fprintf(PC, "End MODE MEAS IV mission\r\n");
0AFB8:  MOVLW  9C
0AFBA:  MOVWF  FF6
0AFBC:  MOVLW  17
0AFBE:  MOVWF  FF7
0AFC0:  MOVLW  00
0AFC2:  MOVWF  FF8
0AFC4:  CALL   2084
0AFC8:  GOTO   E736 (RETURN)
.................... }
.................... 
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE IV DEBUG\r\n");
*
0C540:  MOVLW  B8
0C542:  MOVWF  FF6
0C544:  MOVLW  17
0C546:  MOVWF  FF7
0C548:  MOVLW  00
0C54A:  MOVWF  FF8
0C54C:  CALL   2084
.................... 
....................    MEAS_IV_CMD cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0C550:  MOVFF  23F,273
0C554:  MOVFF  23E,272
0C558:  CALL   8724
0C55C:  MOVFF  02,03
0C560:  MOVF   01,W
0C562:  MOVWF  FE1
0C564:  MOVFF  03,FE2
0C568:  MOVLW  02
0C56A:  MOVWF  FEA
0C56C:  MOVLW  40
0C56E:  MOVWF  FE9
0C570:  MOVLW  0C
0C572:  MOVWF  01
0C574:  MOVFF  FE6,FEE
0C578:  DECFSZ 01,F
0C57A:  GOTO   C574
....................    
....................    fprintf(PC, "\tID: %02X\r\n", cmd.id);
0C57E:  MOVLW  CE
0C580:  MOVWF  FF6
0C582:  MOVLW  17
0C584:  MOVWF  FF7
0C586:  MOVLW  00
0C588:  MOVWF  FF8
0C58A:  MOVLW  05
0C58C:  MOVLB  3
0C58E:  MOVWF  x1E
0C590:  MOVLB  0
0C592:  CALL   20BA
0C596:  MOVFF  240,A77
0C59A:  MOVLW  37
0C59C:  MOVLB  A
0C59E:  MOVWF  x78
0C5A0:  MOVLB  0
0C5A2:  CALL   22D0
0C5A6:  MOVLW  0D
0C5A8:  BTFSS  FA6.6
0C5AA:  GOTO   C5A8
0C5AE:  MOVLB  E
0C5B0:  MOVWF  xF9
0C5B2:  MOVLW  0A
0C5B4:  MOVLB  0
0C5B6:  BTFSS  FA6.6
0C5B8:  GOTO   C5B6
0C5BC:  MOVLB  E
0C5BE:  MOVWF  xF9
....................    fprintf(PC, "\tSleepTime:        0x%04X\r\n", cmd.sleep_time);
0C5C0:  MOVLW  DA
0C5C2:  MOVWF  FF6
0C5C4:  MOVLW  17
0C5C6:  MOVWF  FF7
0C5C8:  MOVLW  00
0C5CA:  MOVWF  FF8
0C5CC:  MOVLW  15
0C5CE:  MOVLB  3
0C5D0:  MOVWF  x1E
0C5D2:  MOVLB  0
0C5D4:  CALL   20BA
0C5D8:  MOVLW  02
0C5DA:  MOVLB  2
0C5DC:  MOVWF  x54
0C5DE:  MOVLB  0
0C5E0:  MOVLW  30
0C5E2:  BTFSS  FA6.6
0C5E4:  GOTO   C5E2
0C5E8:  MOVLB  E
0C5EA:  MOVWF  xF9
0C5EC:  MOVLB  2
0C5EE:  DECFSZ x54,F
0C5F0:  BRA    C5F6
0C5F2:  BRA    C5FC
0C5F4:  MOVLB  0
0C5F6:  MOVLB  0
0C5F8:  GOTO   C5E0
0C5FC:  MOVFF  241,A77
0C600:  MOVLW  37
0C602:  MOVLB  A
0C604:  MOVWF  x78
0C606:  MOVLB  0
0C608:  CALL   22D0
0C60C:  MOVLW  0D
0C60E:  BTFSS  FA6.6
0C610:  GOTO   C60E
0C614:  MOVLB  E
0C616:  MOVWF  xF9
0C618:  MOVLW  0A
0C61A:  MOVLB  0
0C61C:  BTFSS  FA6.6
0C61E:  GOTO   C61C
0C622:  MOVLB  E
0C624:  MOVWF  xF9
....................    fprintf(PC, "\tLogCurrThreshold: 0x%04X\r\n", cmd.curr_threshold);
0C626:  MOVLW  F6
0C628:  MOVWF  FF6
0C62A:  MOVLW  17
0C62C:  MOVWF  FF7
0C62E:  MOVLW  00
0C630:  MOVWF  FF8
0C632:  MOVLW  15
0C634:  MOVLB  3
0C636:  MOVWF  x1E
0C638:  MOVLB  0
0C63A:  CALL   20BA
0C63E:  MOVLW  02
0C640:  MOVLB  2
0C642:  MOVWF  x54
0C644:  MOVLB  0
0C646:  MOVLW  30
0C648:  BTFSS  FA6.6
0C64A:  GOTO   C648
0C64E:  MOVLB  E
0C650:  MOVWF  xF9
0C652:  MOVLB  2
0C654:  DECFSZ x54,F
0C656:  BRA    C65C
0C658:  BRA    C662
0C65A:  MOVLB  0
0C65C:  MOVLB  0
0C65E:  GOTO   C646
0C662:  MOVFF  243,A77
0C666:  MOVLW  37
0C668:  MOVLB  A
0C66A:  MOVWF  x78
0C66C:  MOVLB  0
0C66E:  CALL   22D0
0C672:  MOVLW  0D
0C674:  BTFSS  FA6.6
0C676:  GOTO   C674
0C67A:  MOVLB  E
0C67C:  MOVWF  xF9
0C67E:  MOVLW  0A
0C680:  MOVLB  0
0C682:  BTFSS  FA6.6
0C684:  GOTO   C682
0C688:  MOVLB  E
0C68A:  MOVWF  xF9
....................    fprintf(PC, "\tPDThreshold:      0x%04X\r\n", cmd.pd_threshold);
0C68C:  MOVLW  12
0C68E:  MOVWF  FF6
0C690:  MOVLW  18
0C692:  MOVWF  FF7
0C694:  MOVLW  00
0C696:  MOVWF  FF8
0C698:  MOVLW  15
0C69A:  MOVLB  3
0C69C:  MOVWF  x1E
0C69E:  MOVLB  0
0C6A0:  CALL   20BA
0C6A4:  MOVLW  02
0C6A6:  MOVLB  2
0C6A8:  MOVWF  x54
0C6AA:  MOVLB  0
0C6AC:  MOVLW  30
0C6AE:  BTFSS  FA6.6
0C6B0:  GOTO   C6AE
0C6B4:  MOVLB  E
0C6B6:  MOVWF  xF9
0C6B8:  MOVLB  2
0C6BA:  DECFSZ x54,F
0C6BC:  BRA    C6C2
0C6BE:  BRA    C6C8
0C6C0:  MOVLB  0
0C6C2:  MOVLB  0
0C6C4:  GOTO   C6AC
0C6C8:  MOVFF  245,A77
0C6CC:  MOVLW  37
0C6CE:  MOVLB  A
0C6D0:  MOVWF  x78
0C6D2:  MOVLB  0
0C6D4:  CALL   22D0
0C6D8:  MOVLW  0D
0C6DA:  BTFSS  FA6.6
0C6DC:  GOTO   C6DA
0C6E0:  MOVLB  E
0C6E2:  MOVWF  xF9
0C6E4:  MOVLW  0A
0C6E6:  MOVLB  0
0C6E8:  BTFSS  FA6.6
0C6EA:  GOTO   C6E8
0C6EE:  MOVLB  E
0C6F0:  MOVWF  xF9
....................    fprintf(PC, "\tCurrentLimit:     0x%04X\r\n", cmd.curr_limit);
0C6F2:  MOVLW  2E
0C6F4:  MOVWF  FF6
0C6F6:  MOVLW  18
0C6F8:  MOVWF  FF7
0C6FA:  MOVLW  00
0C6FC:  MOVWF  FF8
0C6FE:  MOVLW  15
0C700:  MOVLB  3
0C702:  MOVWF  x1E
0C704:  MOVLB  0
0C706:  CALL   20BA
0C70A:  MOVLW  02
0C70C:  MOVLB  2
0C70E:  MOVWF  x54
0C710:  MOVLB  0
0C712:  MOVLW  30
0C714:  BTFSS  FA6.6
0C716:  GOTO   C714
0C71A:  MOVLB  E
0C71C:  MOVWF  xF9
0C71E:  MOVLB  2
0C720:  DECFSZ x54,F
0C722:  BRA    C728
0C724:  BRA    C72E
0C726:  MOVLB  0
0C728:  MOVLB  0
0C72A:  GOTO   C712
0C72E:  MOVFF  247,A77
0C732:  MOVLW  37
0C734:  MOVLB  A
0C736:  MOVWF  x78
0C738:  MOVLB  0
0C73A:  CALL   22D0
0C73E:  MOVLW  0D
0C740:  BTFSS  FA6.6
0C742:  GOTO   C740
0C746:  MOVLB  E
0C748:  MOVWF  xF9
0C74A:  MOVLW  0A
0C74C:  MOVLB  0
0C74E:  BTFSS  FA6.6
0C750:  GOTO   C74E
0C754:  MOVLB  E
0C756:  MOVWF  xF9
....................    fprintf(PC, "\tMeasurementTime:  0x%04X\r\n", cmd.meas_time);
0C758:  MOVLW  4A
0C75A:  MOVWF  FF6
0C75C:  MOVLW  18
0C75E:  MOVWF  FF7
0C760:  MOVLW  00
0C762:  MOVWF  FF8
0C764:  MOVLW  15
0C766:  MOVLB  3
0C768:  MOVWF  x1E
0C76A:  MOVLB  0
0C76C:  CALL   20BA
0C770:  MOVLW  02
0C772:  MOVLB  2
0C774:  MOVWF  x54
0C776:  MOVLB  0
0C778:  MOVLW  30
0C77A:  BTFSS  FA6.6
0C77C:  GOTO   C77A
0C780:  MOVLB  E
0C782:  MOVWF  xF9
0C784:  MOVLB  2
0C786:  DECFSZ x54,F
0C788:  BRA    C78E
0C78A:  BRA    C794
0C78C:  MOVLB  0
0C78E:  MOVLB  0
0C790:  GOTO   C778
0C794:  MOVFF  249,A77
0C798:  MOVLW  37
0C79A:  MOVLB  A
0C79C:  MOVWF  x78
0C79E:  MOVLB  0
0C7A0:  CALL   22D0
0C7A4:  MOVLW  0D
0C7A6:  BTFSS  FA6.6
0C7A8:  GOTO   C7A6
0C7AC:  MOVLB  E
0C7AE:  MOVWF  xF9
0C7B0:  MOVLW  0A
0C7B2:  MOVLB  0
0C7B4:  BTFSS  FA6.6
0C7B6:  GOTO   C7B4
0C7BA:  MOVLB  E
0C7BC:  MOVWF  xF9
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_START); // Log start
0C7BE:  MOVFF  240,295
0C7C2:  MOVLB  2
0C7C4:  CLRF   x96
0C7C6:  MOVLB  0
0C7C8:  CALL   4D60
.................... 
....................    unsigned int32 start_time = get_current_sec();
....................    unsigned int32 current_time = 0;
0C7CC:  CALL   395E
0C7D0:  MOVFF  03,24F
0C7D4:  MOVFF  02,24E
0C7D8:  MOVFF  01,24D
0C7DC:  MOVFF  00,24C
0C7E0:  MOVLB  2
0C7E2:  CLRF   x53
0C7E4:  CLRF   x52
0C7E6:  CLRF   x51
0C7E8:  CLRF   x50
....................    test_sweep(cmd.curr_threshold, cmd.curr_limit);
0C7EA:  MOVFF  244,255
0C7EE:  MOVFF  243,254
0C7F2:  MOVFF  248,257
0C7F6:  MOVFF  247,256
0C7FA:  MOVLB  0
0C7FC:  GOTO   AFCC
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_END);
0C800:  MOVFF  240,295
0C804:  MOVLB  2
0C806:  SETF   x96
0C808:  MOVLB  0
0C80A:  CALL   4D60
....................    fprintf(PC, "[IVDBG] End MODE IV DEBUG\r\n");
0C80E:  MOVLW  66
0C810:  MOVWF  FF6
0C812:  MOVLW  18
0C814:  MOVWF  FF7
0C816:  MOVLW  00
0C818:  MOVWF  FF8
0C81A:  CALL   2084
0C81E:  GOTO   E746 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 *uplinkcmd[])
.................... {
....................    MEAS_IV_CMD cmd;
....................    cmd.id = uplinkcmd[0];
*
08724:  MOVLB  2
08726:  MOVF   x72,W
08728:  MOVWF  FE9
0872A:  MOVF   x73,W
0872C:  MOVWF  FEA
0872E:  MOVFF  FEF,274
....................    cmd.sleep_time = ((unsigned int16)uplinkcmd[1] << 8) | ((unsigned int16)uplinkcmd[2]);
08732:  MOVLW  01
08734:  ADDWF  x72,W
08736:  MOVWF  FE9
08738:  MOVLW  00
0873A:  ADDWFC x73,W
0873C:  MOVWF  FEA
0873E:  MOVF   FEF,W
08740:  CLRF   x81
08742:  MOVWF  x80
08744:  MOVFF  280,281
08748:  CLRF   x80
0874A:  MOVLW  02
0874C:  ADDWF  x72,W
0874E:  MOVWF  FE9
08750:  MOVLW  00
08752:  ADDWFC x73,W
08754:  MOVWF  FEA
08756:  MOVF   FEF,W
08758:  CLRF   03
0875A:  IORWF  x80,W
0875C:  MOVWF  x75
0875E:  MOVF   03,W
08760:  IORWF  x81,W
08762:  MOVWF  x76
....................    cmd.curr_threshold = (unsigned int16)uplinkcmd[3]<< 4;
08764:  MOVLW  03
08766:  ADDWF  x72,W
08768:  MOVWF  FE9
0876A:  MOVLW  00
0876C:  ADDWFC x73,W
0876E:  MOVWF  FEA
08770:  MOVF   FEF,W
08772:  CLRF   x81
08774:  MOVWF  x80
08776:  RLCF   x80,W
08778:  MOVWF  x77
0877A:  RLCF   x81,W
0877C:  MOVWF  x78
0877E:  RLCF   x77,F
08780:  RLCF   x78,F
08782:  RLCF   x77,F
08784:  RLCF   x78,F
08786:  RLCF   x77,F
08788:  RLCF   x78,F
0878A:  MOVLW  F0
0878C:  ANDWF  x77,F
....................    cmd.pd_threshold = (unsigned int16)uplinkcmd[4]<< 4;
0878E:  MOVLW  04
08790:  ADDWF  x72,W
08792:  MOVWF  FE9
08794:  MOVLW  00
08796:  ADDWFC x73,W
08798:  MOVWF  FEA
0879A:  MOVF   FEF,W
0879C:  CLRF   x81
0879E:  MOVWF  x80
087A0:  RLCF   x80,W
087A2:  MOVWF  x79
087A4:  RLCF   x81,W
087A6:  MOVWF  x7A
087A8:  RLCF   x79,F
087AA:  RLCF   x7A,F
087AC:  RLCF   x79,F
087AE:  RLCF   x7A,F
087B0:  RLCF   x79,F
087B2:  RLCF   x7A,F
087B4:  MOVLW  F0
087B6:  ANDWF  x79,F
....................    cmd.curr_limit = calc_curr_value((unsigned int16)uplinkcmd[5]<< 4);
087B8:  MOVLW  05
087BA:  ADDWF  x72,W
087BC:  MOVWF  FE9
087BE:  MOVLW  00
087C0:  ADDWFC x73,W
087C2:  MOVWF  FEA
087C4:  MOVF   FEF,W
087C6:  CLRF   x81
087C8:  MOVWF  x80
087CA:  RLCF   x80,F
087CC:  RLCF   x81,F
087CE:  RLCF   x80,F
087D0:  RLCF   x81,F
087D2:  RLCF   x80,F
087D4:  RLCF   x81,F
087D6:  RLCF   x80,F
087D8:  RLCF   x81,F
087DA:  MOVLW  F0
087DC:  ANDWF  x80,F
087DE:  MOVFF  281,283
087E2:  MOVFF  280,282
087E6:  MOVLB  0
087E8:  GOTO   863E
087EC:  MOVFF  02,27C
087F0:  MOVFF  01,27B
....................    cmd.meas_time = ((unsigned int16)uplinkcmd[6] << 8) | ((unsigned int16)uplinkcmd[7]);
087F4:  MOVLW  06
087F6:  MOVLB  2
087F8:  ADDWF  x72,W
087FA:  MOVWF  FE9
087FC:  MOVLW  00
087FE:  ADDWFC x73,W
08800:  MOVWF  FEA
08802:  MOVF   FEF,W
08804:  CLRF   x81
08806:  MOVWF  x80
08808:  MOVFF  280,281
0880C:  CLRF   x80
0880E:  MOVLW  07
08810:  ADDWF  x72,W
08812:  MOVWF  FE9
08814:  MOVLW  00
08816:  ADDWFC x73,W
08818:  MOVWF  FEA
0881A:  MOVF   FEF,W
0881C:  CLRF   03
0881E:  IORWF  x80,W
08820:  MOVWF  x7D
08822:  MOVF   03,W
08824:  IORWF  x81,W
08826:  MOVWF  x7E
.................... //!  cmd.is_finished = uplinkcmd[8];
....................    return cmd;
08828:  MOVLW  74
0882A:  MOVWF  01
0882C:  MOVLW  02
0882E:  MOVWF  02
08830:  MOVLB  0
08832:  RETURN 0
.................... }
.................... 
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr)
*
0C822:  MOVLB  2
0C824:  CLRF   x41
0C826:  MOVLW  64
0C828:  MOVWF  x40
0C82A:  SETF   x43
0C82C:  SETF   x42
0C82E:  MOVLB  0
0C830:  CALL   395E
0C834:  MOVFF  03,247
0C838:  MOVFF  02,246
0C83C:  MOVFF  01,245
0C840:  MOVFF  00,244
0C844:  MOVLB  2
0C846:  MOVF   x40,W
0C848:  SUBWF  x44,W
0C84A:  MOVWF  x48
0C84C:  MOVF   x41,W
0C84E:  SUBWFB x45,W
0C850:  MOVWF  x49
0C852:  MOVLW  00
0C854:  SUBWFB x46,W
0C856:  MOVWF  x4A
0C858:  MOVLW  00
0C85A:  SUBWFB x47,W
0C85C:  MOVWF  x4B
.................... {
....................    unsigned int16 interval = 100;   // 測定間隔 [秒]
....................    unsigned int16 end_time = 0xFFFF;
.................... 
....................    unsigned int32 current_time = get_current_sec();
....................    unsigned int32 last_time = current_time - interval;  // 最初にすぐ測定するため
.................... 
....................    // loging data
....................    unsigned int8 logdata[6];
....................    unsigned int16 temp_top;
....................    unsigned int16 temp_bot;
....................    unsigned int16 temp_mis7;
....................    unsigned int16 PD;
.................... 
....................    // Flash Write 
....................    unsigned int32 write_address;
.................... 
....................    fprintf(PC, "temp_top, temp_bot, temp_mis7, pd\r\n");
0C85E:  MOVLW  82
0C860:  MOVWF  FF6
0C862:  MOVLW  18
0C864:  MOVWF  FF7
0C866:  MOVLW  00
0C868:  MOVWF  FF8
0C86A:  MOVLB  0
0C86C:  CALL   2084
.................... 
....................    while (true) {
....................        current_time = get_current_sec();
0C870:  CALL   395E
0C874:  MOVFF  03,247
0C878:  MOVFF  02,246
0C87C:  MOVFF  01,245
0C880:  MOVFF  00,244
.................... 
....................        // intervalごとに測定
....................        if ((current_time - last_time) >= interval) {
0C884:  MOVLB  2
0C886:  MOVF   x48,W
0C888:  SUBWF  x44,W
0C88A:  MOVWF  x62
0C88C:  MOVF   x49,W
0C88E:  SUBWFB x45,W
0C890:  MOVWF  x63
0C892:  MOVF   x4A,W
0C894:  SUBWFB x46,W
0C896:  MOVWF  x64
0C898:  MOVF   x4B,W
0C89A:  SUBWFB x47,W
0C89C:  MOVWF  x65
0C89E:  MOVF   x65,F
0C8A0:  BTFSC  FD8.2
0C8A2:  BRA    C8AA
0C8A4:  MOVLB  0
0C8A6:  GOTO   C8E6
0C8AA:  MOVLB  0
0C8AC:  MOVLB  2
0C8AE:  MOVF   x64,F
0C8B0:  BTFSC  FD8.2
0C8B2:  BRA    C8BA
0C8B4:  MOVLB  0
0C8B6:  GOTO   C8E6
0C8BA:  MOVLB  0
0C8BC:  MOVLB  2
0C8BE:  MOVF   x41,W
0C8C0:  SUBWF  x63,W
0C8C2:  BTFSC  FD8.0
0C8C4:  BRA    C8CC
0C8C6:  MOVLB  0
0C8C8:  GOTO   CCF6
0C8CC:  MOVLB  0
0C8CE:  BTFSS  FD8.2
0C8D0:  GOTO   C8E6
0C8D4:  MOVLB  2
0C8D6:  MOVF   x40,W
0C8D8:  SUBWF  x62,W
0C8DA:  BTFSC  FD8.0
0C8DC:  BRA    C8E4
0C8DE:  MOVLB  0
0C8E0:  GOTO   CCF6
0C8E4:  MOVLB  0
....................            last_time = current_time;
0C8E6:  MOVFF  247,24B
0C8EA:  MOVFF  246,24A
0C8EE:  MOVFF  245,249
0C8F2:  MOVFF  244,248
.................... 
....................            // ★ 次の測定データ(6バイト)で64バイト境界を超えるか確認
....................            if (environment_data_ptr->reserve_counter1 + 6 > PACKET_SIZE) {
0C8F6:  MOVLW  09
0C8F8:  MOVLB  1
0C8FA:  ADDWF  x26,W
0C8FC:  MOVWF  FE9
0C8FE:  MOVLW  00
0C900:  ADDWFC x27,W
0C902:  MOVWF  FEA
0C904:  MOVLW  06
0C906:  ADDWF  FEF,W
0C908:  SUBLW  40
0C90A:  BTFSS  FD8.0
0C90C:  BRA    C914
0C90E:  MOVLB  0
0C910:  GOTO   CA2A
0C914:  MOVLB  0
....................                unsigned int8 bankdata[4] = {0};
0C916:  MOVLB  2
0C918:  CLRF   x5E
0C91A:  CLRF   x5F
0C91C:  CLRF   x60
0C91E:  CLRF   x61
0C920:  MOVLB  0
....................                write_address = MISF_CIGS_ENVIRO_START + environment_data_ptr->used_counter;
0C922:  MOVLW  01
0C924:  MOVLB  1
0C926:  ADDWF  x26,W
0C928:  MOVWF  FE9
0C92A:  MOVLW  00
0C92C:  ADDWFC x27,W
0C92E:  MOVWF  FEA
0C930:  MOVFF  FEF,00
0C934:  MOVFF  FEC,01
0C938:  MOVFF  FEC,02
0C93C:  MOVFF  FEC,03
0C940:  MOVF   FED,F
0C942:  MOVF   FED,F
0C944:  MOVF   FED,F
0C946:  MOVF   00,W
0C948:  MOVLB  2
0C94A:  MOVWF  x5A
0C94C:  MOVLW  10
0C94E:  ADDWF  01,W
0C950:  MOVWF  x5B
0C952:  MOVLW  28
0C954:  ADDWFC 02,W
0C956:  MOVWF  x5C
0C958:  MOVLW  00
0C95A:  ADDWFC 03,W
0C95C:  MOVWF  x5D
....................                write_data_bytes(mis_fm, write_address, bankdata, 4);
0C95E:  MOVFF  115,BAB
0C962:  MOVFF  114,BAA
0C966:  MOVFF  113,BA9
0C96A:  MOVFF  112,BA8
0C96E:  MOVFF  25D,BAF
0C972:  MOVFF  25C,BAE
0C976:  MOVFF  25B,BAD
0C97A:  MOVFF  25A,BAC
0C97E:  MOVLW  02
0C980:  MOVLB  B
0C982:  MOVWF  xB1
0C984:  MOVLW  5E
0C986:  MOVWF  xB0
0C988:  CLRF   xB3
0C98A:  MOVLW  04
0C98C:  MOVWF  xB2
0C98E:  MOVLB  0
0C990:  CALL   3C7C
....................                environment_data_ptr->used_counter   += 4;
0C994:  MOVLW  01
0C996:  MOVLB  1
0C998:  ADDWF  x26,W
0C99A:  MOVWF  FE9
0C99C:  MOVLW  00
0C99E:  ADDWFC x27,W
0C9A0:  MOVWF  FEA
0C9A2:  MOVLW  04
0C9A4:  ADDWF  FEF,W
0C9A6:  MOVWF  00
0C9A8:  MOVLW  00
0C9AA:  ADDWFC FEC,W
0C9AC:  MOVWF  01
0C9AE:  MOVLW  00
0C9B0:  ADDWFC FEC,W
0C9B2:  MOVWF  02
0C9B4:  MOVLW  00
0C9B6:  ADDWFC FEC,W
0C9B8:  MOVWF  03
0C9BA:  MOVF   FED,F
0C9BC:  MOVF   FED,F
0C9BE:  MOVF   FED,F
0C9C0:  MOVFF  00,FEF
0C9C4:  MOVFF  01,FEC
0C9C8:  MOVFF  02,FEC
0C9CC:  MOVFF  03,FEC
0C9D0:  MOVF   FED,F
0C9D2:  MOVF   FED,F
0C9D4:  MOVF   FED,F
....................                environment_data_ptr->uncopied_counter += 4;
0C9D6:  MOVLW  05
0C9D8:  ADDWF  x26,W
0C9DA:  MOVWF  FE9
0C9DC:  MOVLW  00
0C9DE:  ADDWFC x27,W
0C9E0:  MOVWF  FEA
0C9E2:  MOVLW  04
0C9E4:  ADDWF  FEF,W
0C9E6:  MOVWF  00
0C9E8:  MOVLW  00
0C9EA:  ADDWFC FEC,W
0C9EC:  MOVWF  01
0C9EE:  MOVLW  00
0C9F0:  ADDWFC FEC,W
0C9F2:  MOVWF  02
0C9F4:  MOVLW  00
0C9F6:  ADDWFC FEC,W
0C9F8:  MOVWF  03
0C9FA:  MOVF   FED,F
0C9FC:  MOVF   FED,F
0C9FE:  MOVF   FED,F
0CA00:  MOVFF  00,FEF
0CA04:  MOVFF  01,FEC
0CA08:  MOVFF  02,FEC
0CA0C:  MOVFF  03,FEC
0CA10:  MOVF   FED,F
0CA12:  MOVF   FED,F
0CA14:  MOVF   FED,F
....................                environment_data_ptr->reserve_counter1 = 0;
0CA16:  MOVLW  09
0CA18:  ADDWF  x26,W
0CA1A:  MOVWF  FE9
0CA1C:  MOVLW  00
0CA1E:  ADDWFC x27,W
0CA20:  MOVWF  FEA
0CA22:  CLRF   FEF
....................                misf_update_address_area();
0CA24:  MOVLB  0
0CA26:  CALL   44B8
....................            }
.................... 
....................            // 環境データ読み取り
....................            temp_top  = ad7490_read(ADC_TEMP_PY_TOP);
0CA2A:  MOVLW  0D
0CA2C:  MOVLB  A
0CA2E:  MOVWF  x92
0CA30:  MOVLB  0
0CA32:  CALL   2244
0CA36:  MOVFF  02,253
0CA3A:  MOVFF  01,252
....................            temp_bot  = ad7490_read(ADC_TEMP_PY_BOT);
0CA3E:  MOVLW  0E
0CA40:  MOVLB  A
0CA42:  MOVWF  x92
0CA44:  MOVLB  0
0CA46:  CALL   2244
0CA4A:  MOVFF  02,255
0CA4E:  MOVFF  01,254
....................            temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
0CA52:  MOVLW  0C
0CA54:  MOVLB  A
0CA56:  MOVWF  x92
0CA58:  MOVLB  0
0CA5A:  CALL   2244
0CA5E:  MOVFF  02,257
0CA62:  MOVFF  01,256
....................            PD        = ad7490_read(ADC_PD);
0CA66:  MOVLW  0F
0CA68:  MOVLB  A
0CA6A:  MOVWF  x92
0CA6C:  MOVLB  0
0CA6E:  CALL   2244
0CA72:  MOVFF  02,259
0CA76:  MOVFF  01,258
.................... 
....................            logdata[0] = (temp_top >> 4) & 0xFF;
0CA7A:  MOVLB  2
0CA7C:  RRCF   x53,W
0CA7E:  MOVWF  x63
0CA80:  RRCF   x52,W
0CA82:  MOVWF  x62
0CA84:  RRCF   x63,F
0CA86:  RRCF   x62,F
0CA88:  RRCF   x63,F
0CA8A:  RRCF   x62,F
0CA8C:  RRCF   x63,F
0CA8E:  RRCF   x62,F
0CA90:  MOVLW  0F
0CA92:  ANDWF  x63,F
0CA94:  MOVF   x62,W
0CA96:  MOVWF  x4C
....................            logdata[1] = ((temp_top & 0x0F) << 4) | ((temp_bot >> 8) & 0x0F);
0CA98:  MOVF   x52,W
0CA9A:  ANDLW  0F
0CA9C:  MOVWF  x62
0CA9E:  CLRF   x63
0CAA0:  RLCF   x62,F
0CAA2:  RLCF   x63,F
0CAA4:  RLCF   x62,F
0CAA6:  RLCF   x63,F
0CAA8:  RLCF   x62,F
0CAAA:  RLCF   x63,F
0CAAC:  RLCF   x62,F
0CAAE:  RLCF   x63,F
0CAB0:  MOVLW  F0
0CAB2:  ANDWF  x62,F
0CAB4:  MOVFF  255,264
0CAB8:  CLRF   x65
0CABA:  MOVF   x64,W
0CABC:  ANDLW  0F
0CABE:  MOVWF  00
0CAC0:  CLRF   03
0CAC2:  MOVF   00,W
0CAC4:  IORWF  x62,W
0CAC6:  MOVWF  x4D
....................            logdata[2] = temp_bot & 0xFF;
0CAC8:  MOVF   x54,W
0CACA:  MOVWF  x4E
....................            logdata[3] = (temp_mis7 >> 4) & 0xFF;
0CACC:  RRCF   x57,W
0CACE:  MOVWF  x63
0CAD0:  RRCF   x56,W
0CAD2:  MOVWF  x62
0CAD4:  RRCF   x63,F
0CAD6:  RRCF   x62,F
0CAD8:  RRCF   x63,F
0CADA:  RRCF   x62,F
0CADC:  RRCF   x63,F
0CADE:  RRCF   x62,F
0CAE0:  MOVLW  0F
0CAE2:  ANDWF  x63,F
0CAE4:  MOVF   x62,W
0CAE6:  MOVWF  x4F
....................            logdata[4] = temp_mis7 & 0xFF;
0CAE8:  MOVF   x56,W
0CAEA:  MOVWF  x50
....................            logdata[5] = PD & 0xFF;
0CAEC:  MOVF   x58,W
0CAEE:  MOVWF  x51
.................... 
....................            // 書き込み
....................            write_address = MISF_CIGS_ENVIRO_START + environment_data_ptr->used_counter;
0CAF0:  MOVLW  01
0CAF2:  MOVLB  1
0CAF4:  ADDWF  x26,W
0CAF6:  MOVWF  FE9
0CAF8:  MOVLW  00
0CAFA:  ADDWFC x27,W
0CAFC:  MOVWF  FEA
0CAFE:  MOVFF  FEF,00
0CB02:  MOVFF  FEC,01
0CB06:  MOVFF  FEC,02
0CB0A:  MOVFF  FEC,03
0CB0E:  MOVF   FED,F
0CB10:  MOVF   FED,F
0CB12:  MOVF   FED,F
0CB14:  MOVF   00,W
0CB16:  MOVLB  2
0CB18:  MOVWF  x5A
0CB1A:  MOVLW  10
0CB1C:  ADDWF  01,W
0CB1E:  MOVWF  x5B
0CB20:  MOVLW  28
0CB22:  ADDWFC 02,W
0CB24:  MOVWF  x5C
0CB26:  MOVLW  00
0CB28:  ADDWFC 03,W
0CB2A:  MOVWF  x5D
....................            write_data_bytes(mis_fm, write_address, logdata, 6);
0CB2C:  MOVFF  115,BAB
0CB30:  MOVFF  114,BAA
0CB34:  MOVFF  113,BA9
0CB38:  MOVFF  112,BA8
0CB3C:  MOVFF  25D,BAF
0CB40:  MOVFF  25C,BAE
0CB44:  MOVFF  25B,BAD
0CB48:  MOVFF  25A,BAC
0CB4C:  MOVLW  02
0CB4E:  MOVLB  B
0CB50:  MOVWF  xB1
0CB52:  MOVLW  4C
0CB54:  MOVWF  xB0
0CB56:  CLRF   xB3
0CB58:  MOVLW  06
0CB5A:  MOVWF  xB2
0CB5C:  MOVLB  0
0CB5E:  CALL   3C7C
....................            environment_data_ptr->used_counter   += 6;
0CB62:  MOVLW  01
0CB64:  MOVLB  1
0CB66:  ADDWF  x26,W
0CB68:  MOVWF  FE9
0CB6A:  MOVLW  00
0CB6C:  ADDWFC x27,W
0CB6E:  MOVWF  FEA
0CB70:  MOVLW  06
0CB72:  ADDWF  FEF,W
0CB74:  MOVWF  00
0CB76:  MOVLW  00
0CB78:  ADDWFC FEC,W
0CB7A:  MOVWF  01
0CB7C:  MOVLW  00
0CB7E:  ADDWFC FEC,W
0CB80:  MOVWF  02
0CB82:  MOVLW  00
0CB84:  ADDWFC FEC,W
0CB86:  MOVWF  03
0CB88:  MOVF   FED,F
0CB8A:  MOVF   FED,F
0CB8C:  MOVF   FED,F
0CB8E:  MOVFF  00,FEF
0CB92:  MOVFF  01,FEC
0CB96:  MOVFF  02,FEC
0CB9A:  MOVFF  03,FEC
0CB9E:  MOVF   FED,F
0CBA0:  MOVF   FED,F
0CBA2:  MOVF   FED,F
....................            environment_data_ptr->uncopied_counter += 6;
0CBA4:  MOVLW  05
0CBA6:  ADDWF  x26,W
0CBA8:  MOVWF  FE9
0CBAA:  MOVLW  00
0CBAC:  ADDWFC x27,W
0CBAE:  MOVWF  FEA
0CBB0:  MOVLW  06
0CBB2:  ADDWF  FEF,W
0CBB4:  MOVWF  00
0CBB6:  MOVLW  00
0CBB8:  ADDWFC FEC,W
0CBBA:  MOVWF  01
0CBBC:  MOVLW  00
0CBBE:  ADDWFC FEC,W
0CBC0:  MOVWF  02
0CBC2:  MOVLW  00
0CBC4:  ADDWFC FEC,W
0CBC6:  MOVWF  03
0CBC8:  MOVF   FED,F
0CBCA:  MOVF   FED,F
0CBCC:  MOVF   FED,F
0CBCE:  MOVFF  00,FEF
0CBD2:  MOVFF  01,FEC
0CBD6:  MOVFF  02,FEC
0CBDA:  MOVFF  03,FEC
0CBDE:  MOVF   FED,F
0CBE0:  MOVF   FED,F
0CBE2:  MOVF   FED,F
....................            environment_data_ptr->reserve_counter1 += 6;
0CBE4:  MOVLW  09
0CBE6:  ADDWF  x26,W
0CBE8:  MOVWF  FE9
0CBEA:  MOVLW  00
0CBEC:  ADDWFC x27,W
0CBEE:  MOVWF  FEA
0CBF0:  MOVLW  06
0CBF2:  ADDWF  FEF,W
0CBF4:  MOVWF  FEF
....................            fprintf(PC, "0x%04LX, 0x%04LX, 0x%04LX, 0x%04LX\r\n", temp_top, temp_bot, temp_mis7, PD);
0CBF6:  MOVLW  30
0CBF8:  MOVLB  0
0CBFA:  BTFSS  FA6.6
0CBFC:  GOTO   CBFA
0CC00:  MOVLB  E
0CC02:  MOVWF  xF9
0CC04:  MOVLW  78
0CC06:  MOVLB  0
0CC08:  BTFSS  FA6.6
0CC0A:  GOTO   CC08
0CC0E:  MOVLB  E
0CC10:  MOVWF  xF9
0CC12:  MOVFF  253,A77
0CC16:  MOVLW  37
0CC18:  MOVLB  A
0CC1A:  MOVWF  x78
0CC1C:  MOVLB  0
0CC1E:  CALL   22D0
0CC22:  MOVFF  252,A77
0CC26:  MOVLW  37
0CC28:  MOVLB  A
0CC2A:  MOVWF  x78
0CC2C:  MOVLB  0
0CC2E:  CALL   22D0
0CC32:  MOVLW  AD
0CC34:  MOVWF  FF6
0CC36:  MOVLW  18
0CC38:  MOVWF  FF7
0CC3A:  MOVLW  00
0CC3C:  MOVWF  FF8
0CC3E:  MOVLW  04
0CC40:  MOVLB  3
0CC42:  MOVWF  x1E
0CC44:  MOVLB  0
0CC46:  CALL   20BA
0CC4A:  MOVFF  255,A77
0CC4E:  MOVLW  37
0CC50:  MOVLB  A
0CC52:  MOVWF  x78
0CC54:  MOVLB  0
0CC56:  CALL   22D0
0CC5A:  MOVFF  254,A77
0CC5E:  MOVLW  37
0CC60:  MOVLB  A
0CC62:  MOVWF  x78
0CC64:  MOVLB  0
0CC66:  CALL   22D0
0CC6A:  MOVLW  B6
0CC6C:  MOVWF  FF6
0CC6E:  MOVLW  18
0CC70:  MOVWF  FF7
0CC72:  MOVLW  00
0CC74:  MOVWF  FF8
0CC76:  MOVLW  04
0CC78:  MOVLB  3
0CC7A:  MOVWF  x1E
0CC7C:  MOVLB  0
0CC7E:  CALL   20BA
0CC82:  MOVFF  257,A77
0CC86:  MOVLW  37
0CC88:  MOVLB  A
0CC8A:  MOVWF  x78
0CC8C:  MOVLB  0
0CC8E:  CALL   22D0
0CC92:  MOVFF  256,A77
0CC96:  MOVLW  37
0CC98:  MOVLB  A
0CC9A:  MOVWF  x78
0CC9C:  MOVLB  0
0CC9E:  CALL   22D0
0CCA2:  MOVLW  BF
0CCA4:  MOVWF  FF6
0CCA6:  MOVLW  18
0CCA8:  MOVWF  FF7
0CCAA:  MOVLW  00
0CCAC:  MOVWF  FF8
0CCAE:  MOVLW  04
0CCB0:  MOVLB  3
0CCB2:  MOVWF  x1E
0CCB4:  MOVLB  0
0CCB6:  CALL   20BA
0CCBA:  MOVFF  259,A77
0CCBE:  MOVLW  37
0CCC0:  MOVLB  A
0CCC2:  MOVWF  x78
0CCC4:  MOVLB  0
0CCC6:  CALL   22D0
0CCCA:  MOVFF  258,A77
0CCCE:  MOVLW  37
0CCD0:  MOVLB  A
0CCD2:  MOVWF  x78
0CCD4:  MOVLB  0
0CCD6:  CALL   22D0
0CCDA:  MOVLW  0D
0CCDC:  BTFSS  FA6.6
0CCDE:  GOTO   CCDC
0CCE2:  MOVLB  E
0CCE4:  MOVWF  xF9
0CCE6:  MOVLW  0A
0CCE8:  MOVLB  0
0CCEA:  BTFSS  FA6.6
0CCEC:  GOTO   CCEA
0CCF0:  MOVLB  E
0CCF2:  MOVWF  xF9
0CCF4:  MOVLB  0
....................        }
.................... 
....................        delay_ms(1);  // 過負荷防止用
0CCF6:  MOVLW  01
0CCF8:  MOVLB  B
0CCFA:  MOVWF  xC0
0CCFC:  MOVLB  0
0CCFE:  CALL   2056
0CD02:  GOTO   C870
....................    }
0CD06:  GOTO   E756 (RETURN)
.................... }
.................... 
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS ENV DEBUG\r\n");
0CD0A:  MOVLW  CC
0CD0C:  MOVWF  FF6
0CD0E:  MOVLW  18
0CD10:  MOVWF  FF7
0CD12:  MOVLW  00
0CD14:  MOVWF  FF8
0CD16:  CALL   2084
....................    // Add debug-specific implementation here
....................    fprintf(PC, "End MODE MEAS ENV DEBUG\r\n");
0CD1A:  MOVLW  E8
0CD1C:  MOVWF  FF6
0CD1E:  MOVLW  18
0CD20:  MOVWF  FF7
0CD22:  MOVLW  00
0CD24:  MOVWF  FF8
0CD26:  CALL   2084
0CD2A:  GOTO   E766 (RETURN)
.................... }
.................... 
.................... #include "application/mmj_cigs_mode_flash.c"
.................... #include "mmj_cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/mmj_cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFFFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE-1];
.................... 
....................     struct {
....................         unsigned int16 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int16 time_msec;
....................         meas_data_t env_data[2];
....................         meas_data_t iv_data[16];
.................... 
....................     }header;
....................     struct {
....................         meas_data_t iv_data[21];
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.1
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../domain/mmj_cigs_flash.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/mmj_cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... 
.................... // ========================== MISF Command ============================
.................... void mode_misf_erase_all(int8 parameter[])
.................... {
....................    printf("Start Flash Erase All\r\n");
*
05586:  MOVLW  02
05588:  MOVWF  FF6
0558A:  MOVLW  19
0558C:  MOVWF  FF7
0558E:  MOVLW  00
05590:  MOVWF  FF8
05592:  CALL   2084
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
05596:  MOVLB  2
05598:  MOVF   x40,W
0559A:  MOVWF  FE9
0559C:  MOVF   x41,W
0559E:  MOVWF  FEA
055A0:  MOVFF  FEF,242
....................    piclog_make(cmd, 0x00); // Log the command execution
055A4:  MOVFF  242,295
055A8:  CLRF   x96
055AA:  MOVLB  0
055AC:  CALL   4D60
....................    
....................    for (int32 address = MISF_START; address < MISF_END; address += SECTOR_64K_BYTE) {
055B0:  MOVLB  2
055B2:  CLRF   x46
055B4:  CLRF   x45
055B6:  CLRF   x44
055B8:  CLRF   x43
055BA:  MOVLB  0
055BC:  MOVLB  2
055BE:  MOVF   x46,F
055C0:  BTFSC  FD8.2
055C2:  BRA    55CA
055C4:  MOVLB  0
055C6:  GOTO   5642
055CA:  MOVLB  0
055CC:  MOVLB  2
055CE:  MOVF   x45,W
055D0:  SUBLW  BC
055D2:  BTFSC  FD8.0
055D4:  BRA    55DC
055D6:  MOVLB  0
055D8:  GOTO   5642
055DC:  MOVLB  0
055DE:  BTFSS  FD8.2
055E0:  GOTO   560E
055E4:  MOVLB  2
055E6:  MOVF   x44,W
055E8:  SUBLW  0F
055EA:  BTFSC  FD8.0
055EC:  BRA    55F4
055EE:  MOVLB  0
055F0:  GOTO   5642
055F4:  MOVLB  0
055F6:  BTFSS  FD8.2
055F8:  GOTO   560E
055FC:  MOVLB  2
055FE:  MOVF   x43,W
05600:  SUBLW  FE
05602:  BTFSC  FD8.0
05604:  BRA    560C
05606:  MOVLB  0
05608:  GOTO   5642
0560C:  MOVLB  0
....................       sector_erase(mis_fm, address); // Erase each sector
0560E:  MOVFF  115,BA9
05612:  MOVFF  114,BA8
05616:  MOVFF  113,BA7
0561A:  MOVFF  112,BA6
0561E:  MOVFF  246,BAD
05622:  MOVFF  245,BAC
05626:  MOVFF  244,BAB
0562A:  MOVFF  243,BAA
0562E:  CALL   4160
05632:  MOVLW  01
05634:  MOVLB  2
05636:  ADDWF  x45,F
05638:  MOVLW  00
0563A:  ADDWFC x46,F
0563C:  MOVLB  0
0563E:  GOTO   55BC
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05642:  MOVFF  242,295
05646:  MOVLB  2
05648:  SETF   x96
0564A:  MOVLB  0
0564C:  CALL   4D60
....................    printf("End Flash Erase All\r\n");
05650:  MOVLW  1A
05652:  MOVWF  FF6
05654:  MOVLW  19
05656:  MOVWF  FF7
05658:  MOVLW  00
0565A:  MOVWF  FF8
0565C:  CALL   2084
05660:  RETURN 0
.................... }
.................... 
.................... void mode_misf_erase_1sector(int8 parameter[])
.................... {
....................    printf("Start Flash Erase 1 Sector\r\n");
05662:  MOVLW  30
05664:  MOVWF  FF6
05666:  MOVLW  19
05668:  MOVWF  FF7
0566A:  MOVLW  00
0566C:  MOVWF  FF8
0566E:  CALL   2084
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    int32 sector_address = 
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
05672:  MOVLB  2
05674:  MOVF   x3E,W
05676:  MOVWF  FE9
05678:  MOVF   x3F,W
0567A:  MOVWF  FEA
0567C:  MOVFF  FEF,240
05680:  MOVLW  01
05682:  ADDWF  x3E,W
05684:  MOVWF  FE9
05686:  MOVLW  00
05688:  ADDWFC x3F,W
0568A:  MOVWF  FEA
0568C:  MOVF   FEF,W
0568E:  CLRF   x48
05690:  CLRF   x47
05692:  CLRF   x46
05694:  MOVWF  x45
05696:  MOVFF  245,248
0569A:  CLRF   x45
0569C:  CLRF   x46
0569E:  CLRF   x47
056A0:  MOVLW  02
056A2:  ADDWF  x3E,W
056A4:  MOVWF  FE9
056A6:  MOVLW  00
056A8:  ADDWFC x3F,W
056AA:  MOVWF  FEA
056AC:  MOVF   FEF,W
056AE:  CLRF   x4D
056B0:  CLRF   x4C
056B2:  CLRF   x4B
056B4:  MOVWF  x4A
056B6:  MOVFF  24B,03
056BA:  MOVFF  24A,02
056BE:  CLRF   00
056C0:  CLRF   01
056C2:  MOVF   00,W
056C4:  IORWF  x45,F
056C6:  MOVF   01,W
056C8:  IORWF  x46,F
056CA:  MOVF   02,W
056CC:  IORWF  x47,F
056CE:  MOVF   03,W
056D0:  IORWF  x48,F
056D2:  MOVLW  03
056D4:  ADDWF  x3E,W
056D6:  MOVWF  FE9
056D8:  MOVLW  00
056DA:  ADDWFC x3F,W
056DC:  MOVWF  FEA
056DE:  MOVF   FEF,W
056E0:  CLRF   x4D
056E2:  CLRF   x4C
056E4:  CLRF   x4B
056E6:  MOVWF  x4A
056E8:  MOVFF  24C,03
056EC:  MOVFF  24B,02
056F0:  MOVFF  24A,01
056F4:  CLRF   00
056F6:  MOVF   00,W
056F8:  IORWF  x45,F
056FA:  MOVF   01,W
056FC:  IORWF  x46,F
056FE:  MOVF   02,W
05700:  IORWF  x47,F
05702:  MOVF   03,W
05704:  IORWF  x48,F
05706:  MOVLW  04
05708:  ADDWF  x3E,W
0570A:  MOVWF  FE9
0570C:  MOVLW  00
0570E:  ADDWFC x3F,W
05710:  MOVWF  FEA
05712:  MOVF   FEF,W
05714:  MOVWF  00
05716:  CLRF   01
05718:  CLRF   02
0571A:  CLRF   03
0571C:  MOVF   00,W
0571E:  IORWF  x45,W
05720:  MOVWF  x41
05722:  MOVF   01,W
05724:  IORWF  x46,W
05726:  MOVWF  x42
05728:  MOVF   02,W
0572A:  IORWF  x47,W
0572C:  MOVWF  x43
0572E:  MOVF   03,W
05730:  IORWF  x48,W
05732:  MOVWF  x44
.................... 
....................    printf("\tSector Address: 0x%08LX\r\n", sector_address);
05734:  MOVLW  4E
05736:  MOVWF  FF6
05738:  MOVLW  19
0573A:  MOVWF  FF7
0573C:  MOVLW  00
0573E:  MOVWF  FF8
05740:  MOVLW  13
05742:  MOVLB  3
05744:  MOVWF  x1E
05746:  MOVLB  0
05748:  CALL   20BA
0574C:  MOVFF  244,A77
05750:  MOVLW  37
05752:  MOVLB  A
05754:  MOVWF  x78
05756:  MOVLB  0
05758:  CALL   22D0
0575C:  MOVFF  243,A77
05760:  MOVLW  37
05762:  MOVLB  A
05764:  MOVWF  x78
05766:  MOVLB  0
05768:  CALL   22D0
0576C:  MOVFF  242,A77
05770:  MOVLW  37
05772:  MOVLB  A
05774:  MOVWF  x78
05776:  MOVLB  0
05778:  CALL   22D0
0577C:  MOVFF  241,A77
05780:  MOVLW  37
05782:  MOVLB  A
05784:  MOVWF  x78
05786:  MOVLB  0
05788:  CALL   22D0
0578C:  MOVLW  0D
0578E:  BTFSS  FA6.6
05790:  GOTO   578E
05794:  MOVLB  E
05796:  MOVWF  xF9
05798:  MOVLW  0A
0579A:  MOVLB  0
0579C:  BTFSS  FA6.6
0579E:  GOTO   579C
057A2:  MOVLB  E
057A4:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
057A6:  MOVFF  240,295
057AA:  MOVLB  2
057AC:  CLRF   x96
057AE:  MOVLB  0
057B0:  CALL   4D60
....................    
....................    sector_erase(mis_fm, sector_address);
057B4:  MOVFF  115,BA9
057B8:  MOVFF  114,BA8
057BC:  MOVFF  113,BA7
057C0:  MOVFF  112,BA6
057C4:  MOVFF  244,BAD
057C8:  MOVFF  243,BAC
057CC:  MOVFF  242,BAB
057D0:  MOVFF  241,BAA
057D4:  CALL   4160
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
057D8:  MOVFF  240,295
057DC:  MOVLB  2
057DE:  SETF   x96
057E0:  MOVLB  0
057E2:  CALL   4D60
....................    printf("End Flash Erase 1 Sector\r\n");
057E6:  MOVLW  6A
057E8:  MOVWF  FF6
057EA:  MOVLW  19
057EC:  MOVWF  FF7
057EE:  MOVLW  00
057F0:  MOVWF  FF8
057F2:  CALL   2084
057F6:  GOTO   E64E (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_4kbyte_subsector(int8 parameter[])
.................... {
....................    printf("Start Flash Erase 4kByte Subsector\r\n");
*
05B56:  MOVLW  86
05B58:  MOVWF  FF6
05B5A:  MOVLW  19
05B5C:  MOVWF  FF7
05B5E:  MOVLW  00
05B60:  MOVWF  FF8
05B62:  CALL   2084
....................    int8 cmd = parameter[0];
....................    int32 subsector_address =
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
05B66:  MOVLB  2
05B68:  MOVF   x3E,W
05B6A:  MOVWF  FE9
05B6C:  MOVF   x3F,W
05B6E:  MOVWF  FEA
05B70:  MOVFF  FEF,240
05B74:  MOVLW  01
05B76:  ADDWF  x3E,W
05B78:  MOVWF  FE9
05B7A:  MOVLW  00
05B7C:  ADDWFC x3F,W
05B7E:  MOVWF  FEA
05B80:  MOVF   FEF,W
05B82:  CLRF   x48
05B84:  CLRF   x47
05B86:  CLRF   x46
05B88:  MOVWF  x45
05B8A:  MOVFF  245,248
05B8E:  CLRF   x45
05B90:  CLRF   x46
05B92:  CLRF   x47
05B94:  MOVLW  02
05B96:  ADDWF  x3E,W
05B98:  MOVWF  FE9
05B9A:  MOVLW  00
05B9C:  ADDWFC x3F,W
05B9E:  MOVWF  FEA
05BA0:  MOVF   FEF,W
05BA2:  CLRF   x4D
05BA4:  CLRF   x4C
05BA6:  CLRF   x4B
05BA8:  MOVWF  x4A
05BAA:  MOVFF  24B,03
05BAE:  MOVFF  24A,02
05BB2:  CLRF   00
05BB4:  CLRF   01
05BB6:  MOVF   00,W
05BB8:  IORWF  x45,F
05BBA:  MOVF   01,W
05BBC:  IORWF  x46,F
05BBE:  MOVF   02,W
05BC0:  IORWF  x47,F
05BC2:  MOVF   03,W
05BC4:  IORWF  x48,F
05BC6:  MOVLW  03
05BC8:  ADDWF  x3E,W
05BCA:  MOVWF  FE9
05BCC:  MOVLW  00
05BCE:  ADDWFC x3F,W
05BD0:  MOVWF  FEA
05BD2:  MOVF   FEF,W
05BD4:  CLRF   x4D
05BD6:  CLRF   x4C
05BD8:  CLRF   x4B
05BDA:  MOVWF  x4A
05BDC:  MOVFF  24C,03
05BE0:  MOVFF  24B,02
05BE4:  MOVFF  24A,01
05BE8:  CLRF   00
05BEA:  MOVF   00,W
05BEC:  IORWF  x45,F
05BEE:  MOVF   01,W
05BF0:  IORWF  x46,F
05BF2:  MOVF   02,W
05BF4:  IORWF  x47,F
05BF6:  MOVF   03,W
05BF8:  IORWF  x48,F
05BFA:  MOVLW  04
05BFC:  ADDWF  x3E,W
05BFE:  MOVWF  FE9
05C00:  MOVLW  00
05C02:  ADDWFC x3F,W
05C04:  MOVWF  FEA
05C06:  MOVF   FEF,W
05C08:  MOVWF  00
05C0A:  CLRF   01
05C0C:  CLRF   02
05C0E:  CLRF   03
05C10:  MOVF   00,W
05C12:  IORWF  x45,W
05C14:  MOVWF  x41
05C16:  MOVF   01,W
05C18:  IORWF  x46,W
05C1A:  MOVWF  x42
05C1C:  MOVF   02,W
05C1E:  IORWF  x47,W
05C20:  MOVWF  x43
05C22:  MOVF   03,W
05C24:  IORWF  x48,W
05C26:  MOVWF  x44
....................    printf("\tSubsector Address: 0x%08LX\r\n", subsector_address);
05C28:  MOVLW  AC
05C2A:  MOVWF  FF6
05C2C:  MOVLW  19
05C2E:  MOVWF  FF7
05C30:  MOVLW  00
05C32:  MOVWF  FF8
05C34:  MOVLW  16
05C36:  MOVLB  3
05C38:  MOVWF  x1E
05C3A:  MOVLB  0
05C3C:  CALL   20BA
05C40:  MOVFF  244,A77
05C44:  MOVLW  37
05C46:  MOVLB  A
05C48:  MOVWF  x78
05C4A:  MOVLB  0
05C4C:  CALL   22D0
05C50:  MOVFF  243,A77
05C54:  MOVLW  37
05C56:  MOVLB  A
05C58:  MOVWF  x78
05C5A:  MOVLB  0
05C5C:  CALL   22D0
05C60:  MOVFF  242,A77
05C64:  MOVLW  37
05C66:  MOVLB  A
05C68:  MOVWF  x78
05C6A:  MOVLB  0
05C6C:  CALL   22D0
05C70:  MOVFF  241,A77
05C74:  MOVLW  37
05C76:  MOVLB  A
05C78:  MOVWF  x78
05C7A:  MOVLB  0
05C7C:  CALL   22D0
05C80:  MOVLW  0D
05C82:  BTFSS  FA6.6
05C84:  GOTO   5C82
05C88:  MOVLB  E
05C8A:  MOVWF  xF9
05C8C:  MOVLW  0A
05C8E:  MOVLB  0
05C90:  BTFSS  FA6.6
05C92:  GOTO   5C90
05C96:  MOVLB  E
05C98:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START);
05C9A:  MOVFF  240,295
05C9E:  MOVLB  2
05CA0:  CLRF   x96
05CA2:  MOVLB  0
05CA4:  CALL   4D60
....................    subsector_4kByte_erase(mis_fm, subsector_address); // FIX: 固定0消去→指定アドレス
05CA8:  MOVFF  115,323
05CAC:  MOVFF  114,322
05CB0:  MOVFF  113,321
05CB4:  MOVFF  112,320
05CB8:  MOVFF  244,327
05CBC:  MOVFF  243,326
05CC0:  MOVFF  242,325
05CC4:  MOVFF  241,324
05CC8:  CALL   57FA
....................    piclog_make(cmd, PICLOG_PARAM_END);
05CCC:  MOVFF  240,295
05CD0:  MOVLB  2
05CD2:  SETF   x96
05CD4:  MOVLB  0
05CD6:  CALL   4D60
....................    printf("End Flash Erase 4kByte Subsector\r\n");
05CDA:  MOVLW  CA
05CDC:  MOVWF  FF6
05CDE:  MOVLW  19
05CE0:  MOVWF  FF7
05CE2:  MOVLW  00
05CE4:  MOVWF  FF8
05CE6:  CALL   2084
05CEA:  GOTO   E65E (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 64kByte Subsector\r\n");
05CEE:  MOVLW  EE
05CF0:  MOVWF  FF6
05CF2:  MOVLW  19
05CF4:  MOVWF  FF7
05CF6:  MOVLW  00
05CF8:  MOVWF  FF8
05CFA:  CALL   2084
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
05CFE:  MOVLB  2
05D00:  MOVF   x3E,W
05D02:  MOVWF  FE9
05D04:  MOVF   x3F,W
05D06:  MOVWF  FEA
05D08:  MOVFF  FEF,240
05D0C:  MOVLW  01
05D0E:  ADDWF  x3E,W
05D10:  MOVWF  FE9
05D12:  MOVLW  00
05D14:  ADDWFC x3F,W
05D16:  MOVWF  FEA
05D18:  MOVF   FEF,W
05D1A:  CLRF   x48
05D1C:  CLRF   x47
05D1E:  CLRF   x46
05D20:  MOVWF  x45
05D22:  MOVFF  245,248
05D26:  CLRF   x45
05D28:  CLRF   x46
05D2A:  CLRF   x47
05D2C:  MOVLW  02
05D2E:  ADDWF  x3E,W
05D30:  MOVWF  FE9
05D32:  MOVLW  00
05D34:  ADDWFC x3F,W
05D36:  MOVWF  FEA
05D38:  MOVF   FEF,W
05D3A:  CLRF   x4D
05D3C:  CLRF   x4C
05D3E:  CLRF   x4B
05D40:  MOVWF  x4A
05D42:  MOVFF  24B,03
05D46:  MOVFF  24A,02
05D4A:  CLRF   00
05D4C:  CLRF   01
05D4E:  MOVF   00,W
05D50:  IORWF  x45,F
05D52:  MOVF   01,W
05D54:  IORWF  x46,F
05D56:  MOVF   02,W
05D58:  IORWF  x47,F
05D5A:  MOVF   03,W
05D5C:  IORWF  x48,F
05D5E:  MOVLW  03
05D60:  ADDWF  x3E,W
05D62:  MOVWF  FE9
05D64:  MOVLW  00
05D66:  ADDWFC x3F,W
05D68:  MOVWF  FEA
05D6A:  MOVF   FEF,W
05D6C:  CLRF   x4D
05D6E:  CLRF   x4C
05D70:  CLRF   x4B
05D72:  MOVWF  x4A
05D74:  MOVFF  24C,03
05D78:  MOVFF  24B,02
05D7C:  MOVFF  24A,01
05D80:  CLRF   00
05D82:  MOVF   00,W
05D84:  IORWF  x45,F
05D86:  MOVF   01,W
05D88:  IORWF  x46,F
05D8A:  MOVF   02,W
05D8C:  IORWF  x47,F
05D8E:  MOVF   03,W
05D90:  IORWF  x48,F
05D92:  MOVLW  04
05D94:  ADDWF  x3E,W
05D96:  MOVWF  FE9
05D98:  MOVLW  00
05D9A:  ADDWFC x3F,W
05D9C:  MOVWF  FEA
05D9E:  MOVF   FEF,W
05DA0:  MOVWF  00
05DA2:  CLRF   01
05DA4:  CLRF   02
05DA6:  CLRF   03
05DA8:  MOVF   00,W
05DAA:  IORWF  x45,W
05DAC:  MOVWF  x41
05DAE:  MOVF   01,W
05DB0:  IORWF  x46,W
05DB2:  MOVWF  x42
05DB4:  MOVF   02,W
05DB6:  IORWF  x47,W
05DB8:  MOVWF  x43
05DBA:  MOVF   03,W
05DBC:  IORWF  x48,W
05DBE:  MOVWF  x44
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
05DC0:  MOVLW  14
05DC2:  MOVWF  FF6
05DC4:  MOVLW  1A
05DC6:  MOVWF  FF7
05DC8:  MOVLW  00
05DCA:  MOVWF  FF8
05DCC:  MOVLW  16
05DCE:  MOVLB  3
05DD0:  MOVWF  x1E
05DD2:  MOVLB  0
05DD4:  CALL   20BA
05DD8:  MOVFF  244,A77
05DDC:  MOVLW  37
05DDE:  MOVLB  A
05DE0:  MOVWF  x78
05DE2:  MOVLB  0
05DE4:  CALL   22D0
05DE8:  MOVFF  243,A77
05DEC:  MOVLW  37
05DEE:  MOVLB  A
05DF0:  MOVWF  x78
05DF2:  MOVLB  0
05DF4:  CALL   22D0
05DF8:  MOVFF  242,A77
05DFC:  MOVLW  37
05DFE:  MOVLB  A
05E00:  MOVWF  x78
05E02:  MOVLB  0
05E04:  CALL   22D0
05E08:  MOVFF  241,A77
05E0C:  MOVLW  37
05E0E:  MOVLB  A
05E10:  MOVWF  x78
05E12:  MOVLB  0
05E14:  CALL   22D0
05E18:  MOVLW  0D
05E1A:  BTFSS  FA6.6
05E1C:  GOTO   5E1A
05E20:  MOVLB  E
05E22:  MOVWF  xF9
05E24:  MOVLW  0A
05E26:  MOVLB  0
05E28:  BTFSS  FA6.6
05E2A:  GOTO   5E28
05E2E:  MOVLB  E
05E30:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05E32:  MOVFF  240,295
05E36:  MOVLB  2
05E38:  CLRF   x96
05E3A:  MOVLB  0
05E3C:  CALL   4D60
....................    
....................    //subsector_64kByte_erase(mis_fm, subsector_address);
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05E40:  MOVFF  240,295
05E44:  MOVLB  2
05E46:  SETF   x96
05E48:  MOVLB  0
05E4A:  CALL   4D60
....................    fprintf(PC, "End Flash Erase 64kByte Subsector\r\n");
05E4E:  MOVLW  32
05E50:  MOVWF  FF6
05E52:  MOVLW  1A
05E54:  MOVWF  FF7
05E56:  MOVLW  00
05E58:  MOVWF  FF8
05E5A:  CALL   2084
05E5E:  GOTO   E66E (RETURN)
.................... }
.................... 
.................... void mode_misf_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
*
06042:  MOVLW  56
06044:  MOVWF  FF6
06046:  MOVLW  1A
06048:  MOVWF  FF7
0604A:  MOVLW  00
0604C:  MOVWF  FF8
0604E:  CALL   2084
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
06052:  MOVLB  2
06054:  MOVF   x3E,W
06056:  MOVWF  FE9
06058:  MOVF   x3F,W
0605A:  MOVWF  FEA
0605C:  MOVFF  FEF,294
06060:  MOVFF  294,295
06064:  CLRF   x96
06066:  MOVLB  0
06068:  CALL   4D60
.................... 
....................    FLASH_WRITE_PARAM flash_write_param = {0};
0606C:  MOVLB  2
0606E:  CLRF   x40
06070:  CLRF   x41
06072:  CLRF   x42
06074:  CLRF   x43
06076:  CLRF   x44
06078:  CLRF   x45
0607A:  CLRF   x46
....................    
....................    flash_write_param.id = parameter[0];
0607C:  MOVF   x3E,W
0607E:  MOVWF  FE9
06080:  MOVF   x3F,W
06082:  MOVWF  FEA
06084:  MOVFF  FEF,240
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
06088:  MOVLW  01
0608A:  ADDWF  x3E,W
0608C:  MOVWF  FE9
0608E:  MOVLW  00
06090:  ADDWFC x3F,W
06092:  MOVWF  FEA
06094:  MOVF   FEF,W
06096:  CLRF   x97
06098:  CLRF   x96
0609A:  CLRF   x95
0609C:  MOVWF  x94
0609E:  MOVFF  294,297
060A2:  CLRF   x94
060A4:  CLRF   x95
060A6:  CLRF   x96
060A8:  MOVLW  02
060AA:  ADDWF  x3E,W
060AC:  MOVWF  FE9
060AE:  MOVLW  00
060B0:  ADDWFC x3F,W
060B2:  MOVWF  FEA
060B4:  MOVF   FEF,W
060B6:  CLRF   x9C
060B8:  CLRF   x9B
060BA:  CLRF   x9A
060BC:  MOVWF  x99
060BE:  MOVFF  29A,03
060C2:  MOVFF  299,02
060C6:  CLRF   00
060C8:  CLRF   01
060CA:  MOVF   00,W
060CC:  IORWF  x94,F
060CE:  MOVF   01,W
060D0:  IORWF  x95,F
060D2:  MOVF   02,W
060D4:  IORWF  x96,F
060D6:  MOVF   03,W
060D8:  IORWF  x97,F
060DA:  MOVLW  03
060DC:  ADDWF  x3E,W
060DE:  MOVWF  FE9
060E0:  MOVLW  00
060E2:  ADDWFC x3F,W
060E4:  MOVWF  FEA
060E6:  MOVF   FEF,W
060E8:  CLRF   x9C
060EA:  CLRF   x9B
060EC:  CLRF   x9A
060EE:  MOVWF  x99
060F0:  MOVFF  29B,03
060F4:  MOVFF  29A,02
060F8:  MOVFF  299,01
060FC:  CLRF   00
060FE:  MOVF   00,W
06100:  IORWF  x94,F
06102:  MOVF   01,W
06104:  IORWF  x95,F
06106:  MOVF   02,W
06108:  IORWF  x96,F
0610A:  MOVF   03,W
0610C:  IORWF  x97,F
0610E:  MOVLW  04
06110:  ADDWF  x3E,W
06112:  MOVWF  FE9
06114:  MOVLW  00
06116:  ADDWFC x3F,W
06118:  MOVWF  FEA
0611A:  MOVF   FEF,W
0611C:  MOVWF  00
0611E:  CLRF   01
06120:  CLRF   02
06122:  CLRF   03
06124:  MOVF   00,W
06126:  IORWF  x94,W
06128:  MOVWF  x41
0612A:  MOVF   01,W
0612C:  IORWF  x95,W
0612E:  MOVWF  x42
06130:  MOVF   02,W
06132:  IORWF  x96,W
06134:  MOVWF  x43
06136:  MOVF   03,W
06138:  IORWF  x97,W
0613A:  MOVWF  x44
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
0613C:  MOVLW  07
0613E:  ADDWF  x3E,W
06140:  MOVWF  FE9
06142:  MOVLW  00
06144:  ADDWFC x3F,W
06146:  MOVWF  FEA
06148:  MOVF   FEF,W
0614A:  CLRF   x95
0614C:  MOVWF  x94
0614E:  MOVFF  294,295
06152:  CLRF   x94
06154:  MOVLW  08
06156:  ADDWF  x3E,W
06158:  MOVWF  FE9
0615A:  MOVLW  00
0615C:  ADDWFC x3F,W
0615E:  MOVWF  FEA
06160:  MOVF   FEF,W
06162:  CLRF   03
06164:  IORWF  x94,W
06166:  MOVWF  x45
06168:  MOVF   03,W
0616A:  IORWF  x95,W
0616C:  MOVWF  x46
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
0616E:  MOVLW  70
06170:  MOVWF  FF6
06172:  MOVLW  1A
06174:  MOVWF  FF7
06176:  MOVLW  00
06178:  MOVWF  FF8
0617A:  MOVLW  0C
0617C:  MOVLB  3
0617E:  MOVWF  x1E
06180:  MOVLB  0
06182:  CALL   20BA
06186:  MOVFF  240,A77
0618A:  MOVLW  37
0618C:  MOVLB  A
0618E:  MOVWF  x78
06190:  MOVLB  0
06192:  CALL   22D0
06196:  MOVLW  0D
06198:  BTFSS  FA6.6
0619A:  GOTO   6198
0619E:  MOVLB  E
061A0:  MOVWF  xF9
061A2:  MOVLW  0A
061A4:  MOVLB  0
061A6:  BTFSS  FA6.6
061A8:  GOTO   61A6
061AC:  MOVLB  E
061AE:  MOVWF  xF9
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
061B0:  MOVLW  84
061B2:  MOVWF  FF6
061B4:  MOVLW  1A
061B6:  MOVWF  FF7
061B8:  MOVLW  00
061BA:  MOVWF  FF8
061BC:  MOVLW  0E
061BE:  MOVLB  3
061C0:  MOVWF  x1E
061C2:  MOVLB  0
061C4:  CALL   20BA
061C8:  MOVFF  244,A77
061CC:  MOVLW  37
061CE:  MOVLB  A
061D0:  MOVWF  x78
061D2:  MOVLB  0
061D4:  CALL   22D0
061D8:  MOVFF  243,A77
061DC:  MOVLW  37
061DE:  MOVLB  A
061E0:  MOVWF  x78
061E2:  MOVLB  0
061E4:  CALL   22D0
061E8:  MOVFF  242,A77
061EC:  MOVLW  37
061EE:  MOVLB  A
061F0:  MOVWF  x78
061F2:  MOVLB  0
061F4:  CALL   22D0
061F8:  MOVFF  241,A77
061FC:  MOVLW  37
061FE:  MOVLB  A
06200:  MOVWF  x78
06202:  MOVLB  0
06204:  CALL   22D0
06208:  MOVLW  0D
0620A:  BTFSS  FA6.6
0620C:  GOTO   620A
06210:  MOVLB  E
06212:  MOVWF  xF9
06214:  MOVLW  0A
06216:  MOVLB  0
06218:  BTFSS  FA6.6
0621A:  GOTO   6218
0621E:  MOVLB  E
06220:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
06222:  MOVLW  9A
06224:  MOVWF  FF6
06226:  MOVLW  1A
06228:  MOVWF  FF7
0622A:  MOVLW  00
0622C:  MOVWF  FF8
0622E:  MOVLW  0E
06230:  MOVLB  3
06232:  MOVWF  x1E
06234:  MOVLB  0
06236:  CALL   20BA
0623A:  MOVFF  246,A77
0623E:  MOVLW  37
06240:  MOVLB  A
06242:  MOVWF  x78
06244:  MOVLB  0
06246:  CALL   22D0
0624A:  MOVFF  245,A77
0624E:  MOVLW  37
06250:  MOVLB  A
06252:  MOVWF  x78
06254:  MOVLB  0
06256:  CALL   22D0
0625A:  MOVLW  0D
0625C:  BTFSS  FA6.6
0625E:  GOTO   625C
06262:  MOVLB  E
06264:  MOVWF  xF9
06266:  MOVLW  0A
06268:  MOVLB  0
0626A:  BTFSS  FA6.6
0626C:  GOTO   626A
06270:  MOVLB  E
06272:  MOVWF  xF9
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
06274:  MOVFF  240,295
06278:  MOVLB  2
0627A:  CLRF   x96
0627C:  MOVLB  0
0627E:  CALL   4D60
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
06282:  MOVLW  B0
06284:  MOVWF  FF6
06286:  MOVLW  1A
06288:  MOVWF  FF7
0628A:  MOVLW  00
0628C:  MOVWF  FF8
0628E:  CALL   2084
....................    for (p = 0; p < flash_write_param.packetnum; p++)
06292:  MOVLB  2
06294:  CLRF   x88
06296:  CLRF   x87
06298:  MOVLB  0
0629A:  MOVLB  2
0629C:  MOVF   x88,W
0629E:  SUBWF  x46,W
062A0:  BTFSC  FD8.0
062A2:  BRA    62AA
062A4:  MOVLB  0
062A6:  GOTO   6606
062AA:  MOVLB  0
062AC:  BTFSS  FD8.2
062AE:  GOTO   62C4
062B2:  MOVLB  2
062B4:  MOVF   x45,W
062B6:  SUBWF  x87,W
062B8:  BTFSS  FD8.0
062BA:  BRA    62C2
062BC:  MOVLB  0
062BE:  GOTO   6606
062C2:  MOVLB  0
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
062C4:  MOVLB  2
062C6:  RLCF   x87,W
062C8:  MOVWF  x89
062CA:  RLCF   x88,W
062CC:  MOVWF  x8A
062CE:  RLCF   x89,F
062D0:  RLCF   x8A,F
062D2:  RLCF   x89,F
062D4:  RLCF   x8A,F
062D6:  RLCF   x89,F
062D8:  RLCF   x8A,F
062DA:  RLCF   x89,F
062DC:  RLCF   x8A,F
062DE:  RLCF   x89,F
062E0:  RLCF   x8A,F
062E2:  MOVLW  C0
062E4:  ANDWF  x89,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
062E6:  CLRF   x8B
062E8:  MOVLB  0
062EA:  MOVLB  2
062EC:  MOVF   x8B,W
062EE:  SUBLW  3F
062F0:  BTFSC  FD8.0
062F2:  BRA    62FA
062F4:  MOVLB  0
062F6:  GOTO   635C
062FA:  MOVLB  0
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
062FC:  CLRF   03
062FE:  MOVLB  2
06300:  MOVF   x8B,W
06302:  ADDLW  47
06304:  MOVWF  FE9
06306:  MOVLW  02
06308:  ADDWFC 03,W
0630A:  MOVWF  FEA
0630C:  MOVF   x8B,W
0630E:  ADDWF  x89,W
06310:  MOVWF  x96
06312:  MOVLW  00
06314:  ADDWFC x8A,W
06316:  MOVWF  x97
06318:  MOVF   x96,W
0631A:  MOVWF  00
0631C:  CLRF   03
0631E:  MOVF   00,W
06320:  MOVWF  FEF
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
06322:  CLRF   03
06324:  MOVF   x8B,W
06326:  ADDLW  47
06328:  MOVWF  FE9
0632A:  MOVLW  02
0632C:  ADDWFC 03,W
0632E:  MOVWF  FEA
06330:  MOVFF  FEF,294
06334:  MOVFF  294,A77
06338:  MOVLW  37
0633A:  MOVLB  A
0633C:  MOVWF  x78
0633E:  MOVLB  0
06340:  CALL   22D0
06344:  MOVLW  20
06346:  BTFSS  FA6.6
06348:  GOTO   6346
0634C:  MOVLB  E
0634E:  MOVWF  xF9
06350:  MOVLB  0
06352:  MOVLB  2
06354:  INCF   x8B,F
06356:  MOVLB  0
06358:  GOTO   62EA
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
0635C:  MOVLB  2
0635E:  RLCF   x87,W
06360:  MOVWF  02
06362:  RLCF   x88,W
06364:  MOVWF  03
06366:  RLCF   02,F
06368:  RLCF   03,F
0636A:  RLCF   02,F
0636C:  RLCF   03,F
0636E:  RLCF   02,F
06370:  RLCF   03,F
06372:  RLCF   02,F
06374:  RLCF   03,F
06376:  RLCF   02,F
06378:  RLCF   03,F
0637A:  MOVLW  C0
0637C:  ANDWF  02,F
0637E:  MOVF   02,W
06380:  ADDWF  x41,W
06382:  MOVWF  x8C
06384:  MOVF   03,W
06386:  ADDWFC x42,W
06388:  MOVWF  x8D
0638A:  MOVLW  00
0638C:  ADDWFC x43,W
0638E:  MOVWF  x8E
06390:  MOVLW  00
06392:  ADDWFC x44,W
06394:  MOVWF  x8F
....................       // FLASH 終端チェック (MISF_END は最終アドレス想定: inclusive)
....................       if(current_address > MISF_END){
06396:  MOVF   x8F,F
06398:  BTFSC  FD8.2
0639A:  BRA    63A2
0639C:  MOVLB  0
0639E:  GOTO   63D0
063A2:  MOVLB  0
063A4:  MOVLB  2
063A6:  MOVF   x8E,W
063A8:  SUBLW  BB
063AA:  BTFSS  FD8.0
063AC:  BRA    63B4
063AE:  MOVLB  0
063B0:  GOTO   64A6
063B4:  MOVLB  0
063B6:  XORLW  FF
063B8:  BTFSS  FD8.2
063BA:  GOTO   63D0
063BE:  MOVLB  2
063C0:  MOVF   x8D,W
063C2:  SUBLW  0F
063C4:  BTFSS  FD8.0
063C6:  BRA    63CE
063C8:  MOVLB  0
063CA:  GOTO   64A6
063CE:  MOVLB  0
....................          fprintf(PC, "\r\n[FLASH] Write address 0x%08LX exceeds device end 0x%08LX -> abort\r\n", current_address, (unsigned int32)MISF_END);
063D0:  MOVLW  BE
063D2:  MOVWF  FF6
063D4:  MOVLW  1A
063D6:  MOVWF  FF7
063D8:  MOVLW  00
063DA:  MOVWF  FF8
063DC:  MOVLW  1A
063DE:  MOVLB  3
063E0:  MOVWF  x1E
063E2:  MOVLB  0
063E4:  CALL   20BA
063E8:  MOVFF  28F,A77
063EC:  MOVLW  37
063EE:  MOVLB  A
063F0:  MOVWF  x78
063F2:  MOVLB  0
063F4:  CALL   22D0
063F8:  MOVFF  28E,A77
063FC:  MOVLW  37
063FE:  MOVLB  A
06400:  MOVWF  x78
06402:  MOVLB  0
06404:  CALL   22D0
06408:  MOVFF  28D,A77
0640C:  MOVLW  37
0640E:  MOVLB  A
06410:  MOVWF  x78
06412:  MOVLB  0
06414:  CALL   22D0
06418:  MOVFF  28C,A77
0641C:  MOVLW  37
0641E:  MOVLB  A
06420:  MOVWF  x78
06422:  MOVLB  0
06424:  CALL   22D0
06428:  MOVLW  DD
0642A:  MOVWF  FF6
0642C:  MOVLW  1A
0642E:  MOVWF  FF7
06430:  MOVLW  00
06432:  MOVWF  FF8
06434:  MOVLW  16
06436:  MOVLB  3
06438:  MOVWF  x1E
0643A:  MOVLB  0
0643C:  CALL   20BA
06440:  MOVLB  A
06442:  CLRF   x77
06444:  MOVLW  37
06446:  MOVWF  x78
06448:  MOVLB  0
0644A:  CALL   22D0
0644E:  MOVLW  BC
06450:  MOVLB  A
06452:  MOVWF  x77
06454:  MOVLW  37
06456:  MOVWF  x78
06458:  MOVLB  0
0645A:  CALL   22D0
0645E:  MOVLW  0F
06460:  MOVLB  A
06462:  MOVWF  x77
06464:  MOVLW  37
06466:  MOVWF  x78
06468:  MOVLB  0
0646A:  CALL   22D0
0646E:  MOVLB  A
06470:  SETF   x77
06472:  MOVLW  37
06474:  MOVWF  x78
06476:  MOVLB  0
06478:  CALL   22D0
0647C:  MOVLW  F8
0647E:  MOVWF  FF6
06480:  MOVLW  1A
06482:  MOVWF  FF7
06484:  MOVLW  00
06486:  MOVWF  FF8
06488:  MOVLW  0B
0648A:  MOVLB  3
0648C:  MOVWF  x1E
0648E:  MOVLB  0
06490:  CALL   20BA
....................          piclog_make(flash_write_param.id, PICLOG_PARAM_END);
06494:  MOVFF  240,295
06498:  MOVLB  2
0649A:  SETF   x96
0649C:  MOVLB  0
0649E:  CALL   4D60
....................          break;
064A2:  GOTO   6606
....................       }
....................       if(current_address + (PACKET_SIZE - 1) > MISF_END){
064A6:  MOVLW  3F
064A8:  MOVLB  2
064AA:  ADDWF  x8C,W
064AC:  MOVWF  x94
064AE:  MOVLW  00
064B0:  ADDWFC x8D,W
064B2:  MOVWF  x95
064B4:  MOVLW  00
064B6:  ADDWFC x8E,W
064B8:  MOVWF  x96
064BA:  MOVLW  00
064BC:  ADDWFC x8F,W
064BE:  MOVWF  x97
064C0:  MOVF   x97,F
064C2:  BTFSC  FD8.2
064C4:  BRA    64CC
064C6:  MOVLB  0
064C8:  GOTO   64FA
064CC:  MOVLB  0
064CE:  MOVLB  2
064D0:  MOVF   x96,W
064D2:  SUBLW  BB
064D4:  BTFSS  FD8.0
064D6:  BRA    64DE
064D8:  MOVLB  0
064DA:  GOTO   65C2
064DE:  MOVLB  0
064E0:  XORLW  FF
064E2:  BTFSS  FD8.2
064E4:  GOTO   64FA
064E8:  MOVLB  2
064EA:  MOVF   x95,W
064EC:  SUBLW  0F
064EE:  BTFSS  FD8.0
064F0:  BRA    64F8
064F2:  MOVLB  0
064F4:  GOTO   65C2
064F8:  MOVLB  0
....................          unsigned int32 remain = (MISF_END - current_address) + 1; // 書込可能残り
064FA:  MOVLW  FF
064FC:  BSF    FD8.0
064FE:  MOVLB  2
06500:  SUBFWB x8C,W
06502:  MOVWF  x94
06504:  MOVLW  0F
06506:  SUBFWB x8D,W
06508:  MOVWF  x95
0650A:  MOVLW  BC
0650C:  SUBFWB x8E,W
0650E:  MOVWF  x96
06510:  MOVLW  00
06512:  SUBFWB x8F,W
06514:  MOVWF  x97
06516:  MOVLW  01
06518:  ADDWF  x94,W
0651A:  MOVWF  x90
0651C:  MOVLW  00
0651E:  ADDWFC x95,W
06520:  MOVWF  x91
06522:  MOVLW  00
06524:  ADDWFC x96,W
06526:  MOVWF  x92
06528:  MOVLW  00
0652A:  ADDWFC x97,W
0652C:  MOVWF  x93
0652E:  MOVLB  0
....................          fprintf(PC, "\r\n[FLASH] Reached end. Partial write %lu bytes (packet truncated).\r\n", remain);
06530:  MOVLW  04
06532:  MOVWF  FF6
06534:  MOVLW  1B
06536:  MOVWF  FF7
06538:  MOVLW  00
0653A:  MOVWF  FF8
0653C:  MOVLW  25
0653E:  MOVLB  3
06540:  MOVWF  x1E
06542:  MOVLB  0
06544:  CALL   20BA
06548:  MOVLW  41
0654A:  MOVWF  FE9
0654C:  MOVFF  293,2E6
06550:  MOVFF  292,2E5
06554:  MOVFF  291,2E4
06558:  MOVFF  290,2E3
0655C:  CALL   5F3C
06560:  MOVLW  2C
06562:  MOVWF  FF6
06564:  MOVLW  1B
06566:  MOVWF  FF7
06568:  MOVLW  00
0656A:  MOVWF  FF8
0656C:  MOVLW  1C
0656E:  MOVLB  3
06570:  MOVWF  x1E
06572:  MOVLB  0
06574:  CALL   20BA
....................          write_data_bytes(mis_fm, current_address, writedata, (unsigned int16)remain);
06578:  MOVFF  115,BAB
0657C:  MOVFF  114,BAA
06580:  MOVFF  113,BA9
06584:  MOVFF  112,BA8
06588:  MOVFF  28F,BAF
0658C:  MOVFF  28E,BAE
06590:  MOVFF  28D,BAD
06594:  MOVFF  28C,BAC
06598:  MOVLW  02
0659A:  MOVLB  B
0659C:  MOVWF  xB1
0659E:  MOVLW  47
065A0:  MOVWF  xB0
065A2:  MOVFF  291,BB3
065A6:  MOVFF  290,BB2
065AA:  MOVLB  0
065AC:  CALL   3C7C
....................          piclog_make(flash_write_param.id, PICLOG_PARAM_END);
065B0:  MOVFF  240,295
065B4:  MOVLB  2
065B6:  SETF   x96
065B8:  MOVLB  0
065BA:  CALL   4D60
....................          break;
065BE:  GOTO   6606
....................       }
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
065C2:  MOVFF  115,BAB
065C6:  MOVFF  114,BAA
065CA:  MOVFF  113,BA9
065CE:  MOVFF  112,BA8
065D2:  MOVFF  28F,BAF
065D6:  MOVFF  28E,BAE
065DA:  MOVFF  28D,BAD
065DE:  MOVFF  28C,BAC
065E2:  MOVLW  02
065E4:  MOVLB  B
065E6:  MOVWF  xB1
065E8:  MOVLW  47
065EA:  MOVWF  xB0
065EC:  CLRF   xB3
065EE:  MOVLW  40
065F0:  MOVWF  xB2
065F2:  MOVLB  0
065F4:  CALL   3C7C
065F8:  MOVLB  2
065FA:  INCF   x87,F
065FC:  BTFSC  FD8.2
065FE:  INCF   x88,F
06600:  MOVLB  0
06602:  GOTO   629A
....................    }
.................... 
....................    piclog_make(flash_write_param.id, PICLOG_PARAM_END); // Log the end of the command execution
06606:  MOVFF  240,295
0660A:  MOVLB  2
0660C:  SETF   x96
0660E:  MOVLB  0
06610:  CALL   4D60
....................    fprintf(PC, "\r\n");
06614:  MOVLW  0D
06616:  BTFSS  FA6.6
06618:  GOTO   6616
0661C:  MOVLB  E
0661E:  MOVWF  xF9
06620:  MOVLW  0A
06622:  MOVLB  0
06624:  BTFSS  FA6.6
06626:  GOTO   6624
0662A:  MOVLB  E
0662C:  MOVWF  xF9
....................    fprintf(PC, "End Flash Write Demo\r\n");
0662E:  MOVLW  4A
06630:  MOVWF  FF6
06632:  MOVLW  1B
06634:  MOVWF  FF7
06636:  MOVLW  00
06638:  MOVWF  FF8
0663A:  MOVLB  0
0663C:  CALL   2084
06640:  GOTO   E67E (RETURN)
.................... }
.................... 
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
*
06674:  MOVLW  62
06676:  MOVWF  FF6
06678:  MOVLW  1B
0667A:  MOVWF  FF7
0667C:  MOVLW  00
0667E:  MOVWF  FF8
06680:  CALL   2084
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
06684:  MOVLB  2
06686:  MOVF   x3E,W
06688:  MOVWF  FE9
0668A:  MOVF   x3F,W
0668C:  MOVWF  FEA
0668E:  MOVFF  FEF,244
06692:  MOVFF  244,295
06696:  CLRF   x96
06698:  MOVLB  0
0669A:  CALL   4D60
....................    flash_setting(mis_fm);
0669E:  MOVFF  115,34C
066A2:  MOVFF  114,34B
066A6:  MOVFF  113,34A
066AA:  MOVFF  112,349
066AE:  CALL   6644
....................    unsigned int32 write_address = 0x00000000;
066B2:  MOVLB  2
066B4:  CLRF   x43
066B6:  CLRF   x42
066B8:  CLRF   x41
066BA:  CLRF   x40
....................    //int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
....................    //write_data_bytes(mis_fm, write_address, write_data, 256);
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
066BC:  MOVF   x3E,W
066BE:  MOVWF  FE9
066C0:  MOVF   x3F,W
066C2:  MOVWF  FEA
066C4:  MOVFF  FEF,244
066C8:  MOVFF  244,295
066CC:  SETF   x96
066CE:  MOVLB  0
066D0:  CALL   4D60
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
066D4:  MOVLW  88
066D6:  MOVWF  FF6
066D8:  MOVLW  1B
066DA:  MOVWF  FF7
066DC:  MOVLW  00
066DE:  MOVWF  FF8
066E0:  CALL   2084
066E4:  GOTO   E68E (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
066E8:  MOVLW  AC
066EA:  MOVWF  FF6
066EC:  MOVLW  1B
066EE:  MOVWF  FF7
066F0:  MOVLW  00
066F2:  MOVWF  FF8
066F4:  CALL   2084
.................... 
.................... 
....................    FLASH_PARAM flash_param = {0};
066F8:  MOVLB  2
066FA:  CLRF   x40
066FC:  CLRF   x41
066FE:  CLRF   x42
06700:  CLRF   x43
06702:  CLRF   x44
06704:  CLRF   x45
06706:  CLRF   x46
....................    flash_param.id = uplinkcmd_ptr[0];
06708:  MOVF   x3E,W
0670A:  MOVWF  FE9
0670C:  MOVF   x3F,W
0670E:  MOVWF  FEA
06710:  MOVFF  FEF,240
....................    flash_param.readaddress = -
....................       ((unsigned int32)uplinkcmd_ptr[1] << 24) |
....................       ((unsigned int32)uplinkcmd_ptr[2] << 16) |
....................       ((unsigned int32)uplinkcmd_ptr[3] << 8)  |
....................       ((unsigned int32)uplinkcmd_ptr[4]);
06714:  MOVLW  01
06716:  ADDWF  x3E,W
06718:  MOVWF  FE9
0671A:  MOVLW  00
0671C:  ADDWFC x3F,W
0671E:  MOVWF  FEA
06720:  MOVF   FEF,W
06722:  CLRF   x98
06724:  CLRF   x97
06726:  CLRF   x96
06728:  MOVWF  x95
0672A:  MOVFF  295,03
0672E:  CLRF   00
06730:  CLRF   01
06732:  CLRF   02
06734:  MOVLW  00
06736:  BSF    FD8.0
06738:  SUBFWB 00,W
0673A:  MOVWF  x95
0673C:  MOVLW  00
0673E:  SUBFWB 01,W
06740:  MOVWF  x96
06742:  MOVLW  00
06744:  SUBFWB 02,W
06746:  MOVWF  x97
06748:  MOVLW  00
0674A:  SUBFWB 03,W
0674C:  MOVWF  x98
0674E:  MOVLW  02
06750:  ADDWF  x3E,W
06752:  MOVWF  FE9
06754:  MOVLW  00
06756:  ADDWFC x3F,W
06758:  MOVWF  FEA
0675A:  MOVF   FEF,W
0675C:  CLRF   x9D
0675E:  CLRF   x9C
06760:  CLRF   x9B
06762:  MOVWF  x9A
06764:  MOVFF  29B,03
06768:  MOVFF  29A,02
0676C:  CLRF   00
0676E:  CLRF   01
06770:  MOVF   00,W
06772:  IORWF  x95,F
06774:  MOVF   01,W
06776:  IORWF  x96,F
06778:  MOVF   02,W
0677A:  IORWF  x97,F
0677C:  MOVF   03,W
0677E:  IORWF  x98,F
06780:  MOVLW  03
06782:  ADDWF  x3E,W
06784:  MOVWF  FE9
06786:  MOVLW  00
06788:  ADDWFC x3F,W
0678A:  MOVWF  FEA
0678C:  MOVF   FEF,W
0678E:  CLRF   x9D
06790:  CLRF   x9C
06792:  CLRF   x9B
06794:  MOVWF  x9A
06796:  MOVFF  29C,03
0679A:  MOVFF  29B,02
0679E:  MOVFF  29A,01
067A2:  CLRF   00
067A4:  MOVF   00,W
067A6:  IORWF  x95,F
067A8:  MOVF   01,W
067AA:  IORWF  x96,F
067AC:  MOVF   02,W
067AE:  IORWF  x97,F
067B0:  MOVF   03,W
067B2:  IORWF  x98,F
067B4:  MOVLW  04
067B6:  ADDWF  x3E,W
067B8:  MOVWF  FE9
067BA:  MOVLW  00
067BC:  ADDWFC x3F,W
067BE:  MOVWF  FEA
067C0:  MOVF   FEF,W
067C2:  MOVWF  00
067C4:  CLRF   01
067C6:  CLRF   02
067C8:  CLRF   03
067CA:  MOVF   00,W
067CC:  IORWF  x95,W
067CE:  MOVWF  x43
067D0:  MOVF   01,W
067D2:  IORWF  x96,W
067D4:  MOVWF  x44
067D6:  MOVF   02,W
067D8:  IORWF  x97,W
067DA:  MOVWF  x45
067DC:  MOVF   03,W
067DE:  IORWF  x98,W
067E0:  MOVWF  x46
....................    flash_param.readpacketnum = 
....................       ((unsigned int16)uplinkcmd_ptr[6] << 8) |
....................       ((unsigned int16)uplinkcmd_ptr[7]);
067E2:  MOVLW  06
067E4:  ADDWF  x3E,W
067E6:  MOVWF  FE9
067E8:  MOVLW  00
067EA:  ADDWFC x3F,W
067EC:  MOVWF  FEA
067EE:  MOVF   FEF,W
067F0:  CLRF   x96
067F2:  MOVWF  x95
067F4:  MOVFF  295,296
067F8:  CLRF   x95
067FA:  MOVLW  07
067FC:  ADDWF  x3E,W
067FE:  MOVWF  FE9
06800:  MOVLW  00
06802:  ADDWFC x3F,W
06804:  MOVWF  FEA
06806:  MOVF   FEF,W
06808:  CLRF   03
0680A:  IORWF  x95,W
0680C:  MOVWF  x41
0680E:  MOVF   03,W
06810:  IORWF  x96,W
06812:  MOVWF  x42
....................       piclog_make(flash_param.id, PICLOG_PARAM_START); // Log the command execution
06814:  MOVFF  240,295
06818:  CLRF   x96
0681A:  MOVLB  0
0681C:  CALL   4D60
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
06820:  MOVLW  C0
06822:  MOVWF  FF6
06824:  MOVLW  1B
06826:  MOVWF  FF7
06828:  MOVLW  00
0682A:  MOVWF  FF8
0682C:  MOVLW  0C
0682E:  MOVLB  3
06830:  MOVWF  x1E
06832:  MOVLB  0
06834:  CALL   20BA
06838:  MOVFF  240,A77
0683C:  MOVLW  37
0683E:  MOVLB  A
06840:  MOVWF  x78
06842:  MOVLB  0
06844:  CALL   22D0
06848:  MOVLW  0D
0684A:  BTFSS  FA6.6
0684C:  GOTO   684A
06850:  MOVLB  E
06852:  MOVWF  xF9
06854:  MOVLW  0A
06856:  MOVLB  0
06858:  BTFSS  FA6.6
0685A:  GOTO   6858
0685E:  MOVLB  E
06860:  MOVWF  xF9
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
06862:  MOVLW  D4
06864:  MOVWF  FF6
06866:  MOVLW  1B
06868:  MOVWF  FF7
0686A:  MOVLW  00
0686C:  MOVWF  FF8
0686E:  MOVLW  0E
06870:  MOVLB  3
06872:  MOVWF  x1E
06874:  MOVLB  0
06876:  CALL   20BA
0687A:  MOVFF  246,A77
0687E:  MOVLW  37
06880:  MOVLB  A
06882:  MOVWF  x78
06884:  MOVLB  0
06886:  CALL   22D0
0688A:  MOVFF  245,A77
0688E:  MOVLW  37
06890:  MOVLB  A
06892:  MOVWF  x78
06894:  MOVLB  0
06896:  CALL   22D0
0689A:  MOVFF  244,A77
0689E:  MOVLW  37
068A0:  MOVLB  A
068A2:  MOVWF  x78
068A4:  MOVLB  0
068A6:  CALL   22D0
068AA:  MOVFF  243,A77
068AE:  MOVLW  37
068B0:  MOVLB  A
068B2:  MOVWF  x78
068B4:  MOVLB  0
068B6:  CALL   22D0
068BA:  MOVLW  0D
068BC:  BTFSS  FA6.6
068BE:  GOTO   68BC
068C2:  MOVLB  E
068C4:  MOVWF  xF9
068C6:  MOVLW  0A
068C8:  MOVLB  0
068CA:  BTFSS  FA6.6
068CC:  GOTO   68CA
068D0:  MOVLB  E
068D2:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
068D4:  MOVLW  EA
068D6:  MOVWF  FF6
068D8:  MOVLW  1B
068DA:  MOVWF  FF7
068DC:  MOVLW  00
068DE:  MOVWF  FF8
068E0:  MOVLW  0E
068E2:  MOVLB  3
068E4:  MOVWF  x1E
068E6:  MOVLB  0
068E8:  CALL   20BA
068EC:  MOVFF  242,A77
068F0:  MOVLW  37
068F2:  MOVLB  A
068F4:  MOVWF  x78
068F6:  MOVLB  0
068F8:  CALL   22D0
068FC:  MOVFF  241,A77
06900:  MOVLW  37
06902:  MOVLB  A
06904:  MOVWF  x78
06906:  MOVLB  0
06908:  CALL   22D0
0690C:  MOVLW  0D
0690E:  BTFSS  FA6.6
06910:  GOTO   690E
06914:  MOVLB  E
06916:  MOVWF  xF9
06918:  MOVLW  0A
0691A:  MOVLB  0
0691C:  BTFSS  FA6.6
0691E:  GOTO   691C
06922:  MOVLB  E
06924:  MOVWF  xF9
....................    
....................    piclog_make(flash_param.id, 0x00);
06926:  MOVFF  240,295
0692A:  MOVLB  2
0692C:  CLRF   x96
0692E:  MOVLB  0
06930:  CALL   4D60
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
06934:  MOVLB  2
06936:  CLRF   x47
06938:  CLRF   x48
0693A:  CLRF   x49
0693C:  CLRF   x4A
0693E:  CLRF   x4B
06940:  CLRF   x4C
06942:  CLRF   x4D
06944:  CLRF   x4E
06946:  CLRF   x4F
06948:  CLRF   x50
0694A:  CLRF   x51
0694C:  CLRF   x52
0694E:  CLRF   x53
06950:  CLRF   x54
06952:  CLRF   x55
06954:  CLRF   x56
06956:  CLRF   x57
06958:  CLRF   x58
0695A:  CLRF   x59
0695C:  CLRF   x5A
0695E:  CLRF   x5B
06960:  CLRF   x5C
06962:  CLRF   x5D
06964:  CLRF   x5E
06966:  CLRF   x5F
06968:  CLRF   x60
0696A:  CLRF   x61
0696C:  CLRF   x62
0696E:  CLRF   x63
06970:  CLRF   x64
06972:  CLRF   x65
06974:  CLRF   x66
06976:  CLRF   x67
06978:  CLRF   x68
0697A:  CLRF   x69
0697C:  CLRF   x6A
0697E:  CLRF   x6B
06980:  CLRF   x6C
06982:  CLRF   x6D
06984:  CLRF   x6E
06986:  CLRF   x6F
06988:  CLRF   x70
0698A:  CLRF   x71
0698C:  CLRF   x72
0698E:  CLRF   x73
06990:  CLRF   x74
06992:  CLRF   x75
06994:  CLRF   x76
06996:  CLRF   x77
06998:  CLRF   x78
0699A:  CLRF   x79
0699C:  CLRF   x7A
0699E:  CLRF   x7B
069A0:  CLRF   x7C
069A2:  CLRF   x7D
069A4:  CLRF   x7E
069A6:  CLRF   x7F
069A8:  CLRF   x80
069AA:  CLRF   x81
069AC:  CLRF   x82
069AE:  CLRF   x83
069B0:  CLRF   x84
069B2:  CLRF   x85
069B4:  CLRF   x86
....................    unsigned int32 read_address;
....................    fprintf(PC, "READ DATA\r\n");
069B6:  MOVLW  00
069B8:  MOVWF  FF6
069BA:  MOVLW  1C
069BC:  MOVWF  FF7
069BE:  MOVLW  00
069C0:  MOVWF  FF8
069C2:  MOVLB  0
069C4:  CALL   2084
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
069C8:  MOVFF  115,2DC
069CC:  MOVFF  114,2DB
069D0:  MOVFF  113,2DA
069D4:  MOVFF  112,2D9
069D8:  CALL   2B9A
069DC:  MOVF   01,F
069DE:  BTFSS  FD8.2
069E0:  GOTO   6A06
....................       fprintf(PC, "Mission Flash is not connected\r\n");
069E4:  MOVLW  0C
069E6:  MOVWF  FF6
069E8:  MOVLW  1C
069EA:  MOVWF  FF7
069EC:  MOVLW  00
069EE:  MOVWF  FF8
069F0:  CALL   2084
....................       piclog_make(flash_param.id, PICLOG_PARAM_END);
069F4:  MOVFF  240,295
069F8:  MOVLB  2
069FA:  SETF   x96
069FC:  MOVLB  0
069FE:  CALL   4D60
....................       return; // FIX: 接続失敗時終了
06A02:  GOTO   6E4A
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
06A06:  MOVLB  2
06A08:  CLRF   x8E
06A0A:  CLRF   x8D
06A0C:  CLRF   x8C
06A0E:  CLRF   x8B
06A10:  MOVLB  0
06A12:  MOVLB  2
06A14:  MOVF   x8E,F
06A16:  BTFSC  FD8.2
06A18:  BRA    6A20
06A1A:  MOVLB  0
06A1C:  GOTO   6E2C
06A20:  MOVLB  0
06A22:  MOVLB  2
06A24:  MOVF   x8D,F
06A26:  BTFSC  FD8.2
06A28:  BRA    6A30
06A2A:  MOVLB  0
06A2C:  GOTO   6E2C
06A30:  MOVLB  0
06A32:  MOVLB  2
06A34:  MOVF   x8C,W
06A36:  SUBWF  x42,W
06A38:  BTFSC  FD8.0
06A3A:  BRA    6A42
06A3C:  MOVLB  0
06A3E:  GOTO   6E2C
06A42:  MOVLB  0
06A44:  BTFSS  FD8.2
06A46:  GOTO   6A5C
06A4A:  MOVLB  2
06A4C:  MOVF   x41,W
06A4E:  SUBWF  x8B,W
06A50:  BTFSS  FD8.0
06A52:  BRA    6A5A
06A54:  MOVLB  0
06A56:  GOTO   6E2C
06A5A:  MOVLB  0
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
06A5C:  MOVLB  2
06A5E:  RLCF   x8B,W
06A60:  MOVWF  00
06A62:  RLCF   x8C,W
06A64:  MOVWF  01
06A66:  RLCF   x8D,W
06A68:  MOVWF  02
06A6A:  RLCF   x8E,W
06A6C:  MOVWF  03
06A6E:  RLCF   00,F
06A70:  RLCF   01,F
06A72:  RLCF   02,F
06A74:  RLCF   03,F
06A76:  RLCF   00,F
06A78:  RLCF   01,F
06A7A:  RLCF   02,F
06A7C:  RLCF   03,F
06A7E:  RLCF   00,F
06A80:  RLCF   01,F
06A82:  RLCF   02,F
06A84:  RLCF   03,F
06A86:  RLCF   00,F
06A88:  RLCF   01,F
06A8A:  RLCF   02,F
06A8C:  RLCF   03,F
06A8E:  RLCF   00,F
06A90:  RLCF   01,F
06A92:  RLCF   02,F
06A94:  RLCF   03,F
06A96:  MOVLW  C0
06A98:  ANDWF  00,F
06A9A:  MOVF   00,W
06A9C:  ADDWF  x43,W
06A9E:  MOVWF  x87
06AA0:  MOVF   01,W
06AA2:  ADDWFC x44,W
06AA4:  MOVWF  x88
06AA6:  MOVF   02,W
06AA8:  ADDWFC x45,W
06AAA:  MOVWF  x89
06AAC:  MOVF   03,W
06AAE:  ADDWFC x46,W
06AB0:  MOVWF  x8A
....................       // 終端チェック
....................       if(read_address > MISF_END){
06AB2:  MOVF   x8A,F
06AB4:  BTFSC  FD8.2
06AB6:  BRA    6ABE
06AB8:  MOVLB  0
06ABA:  GOTO   6AEC
06ABE:  MOVLB  0
06AC0:  MOVLB  2
06AC2:  MOVF   x89,W
06AC4:  SUBLW  BB
06AC6:  BTFSS  FD8.0
06AC8:  BRA    6AD0
06ACA:  MOVLB  0
06ACC:  GOTO   6BB4
06AD0:  MOVLB  0
06AD2:  XORLW  FF
06AD4:  BTFSS  FD8.2
06AD6:  GOTO   6AEC
06ADA:  MOVLB  2
06ADC:  MOVF   x88,W
06ADE:  SUBLW  0F
06AE0:  BTFSS  FD8.0
06AE2:  BRA    6AEA
06AE4:  MOVLB  0
06AE6:  GOTO   6BB4
06AEA:  MOVLB  0
....................          fprintf(PC, "[FLASH] Read address 0x%08LX exceeds device end 0x%08LX -> stop\r\n", read_address, (unsigned int32)MISF_END);
06AEC:  MOVLW  2E
06AEE:  MOVWF  FF6
06AF0:  MOVLW  1C
06AF2:  MOVWF  FF7
06AF4:  MOVLW  00
06AF6:  MOVWF  FF8
06AF8:  MOVLW  17
06AFA:  MOVLB  3
06AFC:  MOVWF  x1E
06AFE:  MOVLB  0
06B00:  CALL   20BA
06B04:  MOVFF  28A,A77
06B08:  MOVLW  37
06B0A:  MOVLB  A
06B0C:  MOVWF  x78
06B0E:  MOVLB  0
06B10:  CALL   22D0
06B14:  MOVFF  289,A77
06B18:  MOVLW  37
06B1A:  MOVLB  A
06B1C:  MOVWF  x78
06B1E:  MOVLB  0
06B20:  CALL   22D0
06B24:  MOVFF  288,A77
06B28:  MOVLW  37
06B2A:  MOVLB  A
06B2C:  MOVWF  x78
06B2E:  MOVLB  0
06B30:  CALL   22D0
06B34:  MOVFF  287,A77
06B38:  MOVLW  37
06B3A:  MOVLB  A
06B3C:  MOVWF  x78
06B3E:  MOVLB  0
06B40:  CALL   22D0
06B44:  MOVLW  4A
06B46:  MOVWF  FF6
06B48:  MOVLW  1C
06B4A:  MOVWF  FF7
06B4C:  MOVLW  00
06B4E:  MOVWF  FF8
06B50:  MOVLW  16
06B52:  MOVLB  3
06B54:  MOVWF  x1E
06B56:  MOVLB  0
06B58:  CALL   20BA
06B5C:  MOVLB  A
06B5E:  CLRF   x77
06B60:  MOVLW  37
06B62:  MOVWF  x78
06B64:  MOVLB  0
06B66:  CALL   22D0
06B6A:  MOVLW  BC
06B6C:  MOVLB  A
06B6E:  MOVWF  x77
06B70:  MOVLW  37
06B72:  MOVWF  x78
06B74:  MOVLB  0
06B76:  CALL   22D0
06B7A:  MOVLW  0F
06B7C:  MOVLB  A
06B7E:  MOVWF  x77
06B80:  MOVLW  37
06B82:  MOVWF  x78
06B84:  MOVLB  0
06B86:  CALL   22D0
06B8A:  MOVLB  A
06B8C:  SETF   x77
06B8E:  MOVLW  37
06B90:  MOVWF  x78
06B92:  MOVLB  0
06B94:  CALL   22D0
06B98:  MOVLW  65
06B9A:  MOVWF  FF6
06B9C:  MOVLW  1C
06B9E:  MOVWF  FF7
06BA0:  MOVLW  00
06BA2:  MOVWF  FF8
06BA4:  MOVLW  0A
06BA6:  MOVLB  3
06BA8:  MOVWF  x1E
06BAA:  MOVLB  0
06BAC:  CALL   20BA
....................          break;
06BB0:  GOTO   6E2C
....................       }
....................       if(read_address + (PACKET_SIZE - 1) > MISF_END){
06BB4:  MOVLW  3F
06BB6:  MOVLB  2
06BB8:  ADDWF  x87,W
06BBA:  MOVWF  x95
06BBC:  MOVLW  00
06BBE:  ADDWFC x88,W
06BC0:  MOVWF  x96
06BC2:  MOVLW  00
06BC4:  ADDWFC x89,W
06BC6:  MOVWF  x97
06BC8:  MOVLW  00
06BCA:  ADDWFC x8A,W
06BCC:  MOVWF  x98
06BCE:  MOVF   x98,F
06BD0:  BTFSC  FD8.2
06BD2:  BRA    6BDA
06BD4:  MOVLB  0
06BD6:  GOTO   6C08
06BDA:  MOVLB  0
06BDC:  MOVLB  2
06BDE:  MOVF   x97,W
06BE0:  SUBLW  BB
06BE2:  BTFSS  FD8.0
06BE4:  BRA    6BEC
06BE6:  MOVLB  0
06BE8:  GOTO   6D6A
06BEC:  MOVLB  0
06BEE:  XORLW  FF
06BF0:  BTFSS  FD8.2
06BF2:  GOTO   6C08
06BF6:  MOVLB  2
06BF8:  MOVF   x96,W
06BFA:  SUBLW  0F
06BFC:  BTFSS  FD8.0
06BFE:  BRA    6C06
06C00:  MOVLB  0
06C02:  GOTO   6D6A
06C06:  MOVLB  0
....................          unsigned int32 remain = (MISF_END - read_address) + 1;
06C08:  MOVLW  FF
06C0A:  BSF    FD8.0
06C0C:  MOVLB  2
06C0E:  SUBFWB x87,W
06C10:  MOVWF  x95
06C12:  MOVLW  0F
06C14:  SUBFWB x88,W
06C16:  MOVWF  x96
06C18:  MOVLW  BC
06C1A:  SUBFWB x89,W
06C1C:  MOVWF  x97
06C1E:  MOVLW  00
06C20:  SUBFWB x8A,W
06C22:  MOVWF  x98
06C24:  MOVLW  01
06C26:  ADDWF  x95,W
06C28:  MOVWF  x8F
06C2A:  MOVLW  00
06C2C:  ADDWFC x96,W
06C2E:  MOVWF  x90
06C30:  MOVLW  00
06C32:  ADDWFC x97,W
06C34:  MOVWF  x91
06C36:  MOVLW  00
06C38:  ADDWFC x98,W
06C3A:  MOVWF  x92
06C3C:  MOVLB  0
....................          fprintf(PC, "[FLASH] End reached. Partial read %lu bytes.\r\n", remain);
06C3E:  MOVLW  70
06C40:  MOVWF  FF6
06C42:  MOVLW  1C
06C44:  MOVWF  FF7
06C46:  MOVLW  00
06C48:  MOVWF  FF8
06C4A:  MOVLW  22
06C4C:  MOVLB  3
06C4E:  MOVWF  x1E
06C50:  MOVLB  0
06C52:  CALL   20BA
06C56:  MOVLW  41
06C58:  MOVWF  FE9
06C5A:  MOVFF  292,2E6
06C5E:  MOVFF  291,2E5
06C62:  MOVFF  290,2E4
06C66:  MOVFF  28F,2E3
06C6A:  CALL   5F3C
06C6E:  MOVLW  95
06C70:  MOVWF  FF6
06C72:  MOVLW  1C
06C74:  MOVWF  FF7
06C76:  MOVLW  00
06C78:  MOVWF  FF8
06C7A:  MOVLW  09
06C7C:  MOVLB  3
06C7E:  MOVWF  x1E
06C80:  MOVLB  0
06C82:  CALL   20BA
....................          read_data_bytes(mis_fm, read_address, readdata, remain);
06C86:  MOVFF  115,B67
06C8A:  MOVFF  114,B66
06C8E:  MOVFF  113,B65
06C92:  MOVFF  112,B64
06C96:  MOVFF  28A,B6B
06C9A:  MOVFF  289,B6A
06C9E:  MOVFF  288,B69
06CA2:  MOVFF  287,B68
06CA6:  MOVLW  02
06CA8:  MOVLB  B
06CAA:  MOVWF  x6D
06CAC:  MOVLW  47
06CAE:  MOVWF  x6C
06CB0:  MOVFF  292,B71
06CB4:  MOVFF  291,B70
06CB8:  MOVFF  290,B6F
06CBC:  MOVFF  28F,B6E
06CC0:  MOVLB  0
06CC2:  CALL   2C86
....................          for (unsigned int8 bytecount = 0; bytecount < remain; bytecount++)
06CC6:  MOVLB  2
06CC8:  CLRF   x93
06CCA:  MOVLB  0
06CCC:  MOVLB  2
06CCE:  MOVF   x92,F
06CD0:  BTFSC  FD8.2
06CD2:  BRA    6CDA
06CD4:  MOVLB  0
06CD6:  GOTO   6D0E
06CDA:  MOVLB  0
06CDC:  MOVLB  2
06CDE:  MOVF   x91,F
06CE0:  BTFSC  FD8.2
06CE2:  BRA    6CEA
06CE4:  MOVLB  0
06CE6:  GOTO   6D0E
06CEA:  MOVLB  0
06CEC:  MOVLB  2
06CEE:  MOVF   x90,F
06CF0:  BTFSC  FD8.2
06CF2:  BRA    6CFA
06CF4:  MOVLB  0
06CF6:  GOTO   6D0E
06CFA:  MOVLB  0
06CFC:  MOVLB  2
06CFE:  MOVF   x8F,W
06D00:  SUBWF  x93,W
06D02:  BTFSS  FD8.0
06D04:  BRA    6D0C
06D06:  MOVLB  0
06D08:  GOTO   6D4A
06D0C:  MOVLB  0
....................             fprintf(PC, "%02X ", readdata[bytecount]);
06D0E:  CLRF   03
06D10:  MOVLB  2
06D12:  MOVF   x93,W
06D14:  ADDLW  47
06D16:  MOVWF  FE9
06D18:  MOVLW  02
06D1A:  ADDWFC 03,W
06D1C:  MOVWF  FEA
06D1E:  MOVFF  FEF,295
06D22:  MOVFF  295,A77
06D26:  MOVLW  37
06D28:  MOVLB  A
06D2A:  MOVWF  x78
06D2C:  MOVLB  0
06D2E:  CALL   22D0
06D32:  MOVLW  20
06D34:  BTFSS  FA6.6
06D36:  GOTO   6D34
06D3A:  MOVLB  E
06D3C:  MOVWF  xF9
06D3E:  MOVLB  0
06D40:  MOVLB  2
06D42:  INCF   x93,F
06D44:  MOVLB  0
06D46:  GOTO   6CCC
....................          fprintf(PC, "\r\n");
06D4A:  MOVLW  0D
06D4C:  BTFSS  FA6.6
06D4E:  GOTO   6D4C
06D52:  MOVLB  E
06D54:  MOVWF  xF9
06D56:  MOVLW  0A
06D58:  MOVLB  0
06D5A:  BTFSS  FA6.6
06D5C:  GOTO   6D5A
06D60:  MOVLB  E
06D62:  MOVWF  xF9
....................          break;
06D64:  MOVLB  0
06D66:  GOTO   6E2C
....................       }
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
06D6A:  MOVFF  115,B67
06D6E:  MOVFF  114,B66
06D72:  MOVFF  113,B65
06D76:  MOVFF  112,B64
06D7A:  MOVFF  28A,B6B
06D7E:  MOVFF  289,B6A
06D82:  MOVFF  288,B69
06D86:  MOVFF  287,B68
06D8A:  MOVLW  02
06D8C:  MOVLB  B
06D8E:  MOVWF  x6D
06D90:  MOVLW  47
06D92:  MOVWF  x6C
06D94:  CLRF   x71
06D96:  CLRF   x70
06D98:  CLRF   x6F
06D9A:  MOVLW  40
06D9C:  MOVWF  x6E
06D9E:  MOVLB  0
06DA0:  CALL   2C86
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
06DA4:  MOVLB  2
06DA6:  CLRF   x94
06DA8:  MOVLB  0
06DAA:  MOVLB  2
06DAC:  MOVF   x94,W
06DAE:  SUBLW  3F
06DB0:  BTFSC  FD8.0
06DB2:  BRA    6DBA
06DB4:  MOVLB  0
06DB6:  GOTO   6DF8
06DBA:  MOVLB  0
....................          fprintf(PC,"%02X ",readdata[bytecount]);
06DBC:  CLRF   03
06DBE:  MOVLB  2
06DC0:  MOVF   x94,W
06DC2:  ADDLW  47
06DC4:  MOVWF  FE9
06DC6:  MOVLW  02
06DC8:  ADDWFC 03,W
06DCA:  MOVWF  FEA
06DCC:  MOVFF  FEF,295
06DD0:  MOVFF  295,A77
06DD4:  MOVLW  37
06DD6:  MOVLB  A
06DD8:  MOVWF  x78
06DDA:  MOVLB  0
06DDC:  CALL   22D0
06DE0:  MOVLW  20
06DE2:  BTFSS  FA6.6
06DE4:  GOTO   6DE2
06DE8:  MOVLB  E
06DEA:  MOVWF  xF9
06DEC:  MOVLB  0
06DEE:  MOVLB  2
06DF0:  INCF   x94,F
06DF2:  MOVLB  0
06DF4:  GOTO   6DAA
....................       }
....................       fprintf(PC,"\r\n");
06DF8:  MOVLW  0D
06DFA:  BTFSS  FA6.6
06DFC:  GOTO   6DFA
06E00:  MOVLB  E
06E02:  MOVWF  xF9
06E04:  MOVLW  0A
06E06:  MOVLB  0
06E08:  BTFSS  FA6.6
06E0A:  GOTO   6E08
06E0E:  MOVLB  E
06E10:  MOVWF  xF9
06E12:  MOVLB  0
06E14:  MOVLW  01
06E16:  MOVLB  2
06E18:  ADDWF  x8B,F
06E1A:  BTFSC  FD8.0
06E1C:  INCF   x8C,F
06E1E:  BTFSC  FD8.2
06E20:  INCF   x8D,F
06E22:  BTFSC  FD8.2
06E24:  INCF   x8E,F
06E26:  MOVLB  0
06E28:  GOTO   6A12
....................    }
....................    piclog_make(flash_param.id, PICLOG_PARAM_END); // Log the end of the command execution
06E2C:  MOVFF  240,295
06E30:  MOVLB  2
06E32:  SETF   x96
06E34:  MOVLB  0
06E36:  CALL   4D60
....................    fprintf(PC, "End Flash Read\r\n");
06E3A:  MOVLW  A0
06E3C:  MOVWF  FF6
06E3E:  MOVLW  1C
06E40:  MOVWF  FF7
06E42:  MOVLW  00
06E44:  MOVWF  FF8
06E46:  CALL   2084
06E4A:  GOTO   E69E (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
06E4E:  MOVLW  B2
06E50:  MOVWF  FF6
06E52:  MOVLW  1C
06E54:  MOVWF  FF7
06E56:  MOVLW  00
06E58:  MOVWF  FF8
06E5A:  CALL   2084
....................    flash_setting(mis_fm);
06E5E:  MOVFF  115,34C
06E62:  MOVFF  114,34B
06E66:  MOVFF  113,34A
06E6A:  MOVFF  112,349
06E6E:  CALL   6644
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
06E72:  MOVLB  2
06E74:  CLRF   x43
06E76:  CLRF   x42
06E78:  CLRF   x41
06E7A:  CLRF   x40
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
06E7C:  MOVFF  115,B67
06E80:  MOVFF  114,B66
06E84:  MOVFF  113,B65
06E88:  MOVFF  112,B64
06E8C:  MOVFF  243,B6B
06E90:  MOVFF  242,B6A
06E94:  MOVFF  241,B69
06E98:  MOVFF  240,B68
06E9C:  MOVLW  02
06E9E:  MOVLB  B
06EA0:  MOVWF  x6D
06EA2:  MOVLW  44
06EA4:  MOVWF  x6C
06EA6:  CLRF   x71
06EA8:  CLRF   x70
06EAA:  CLRF   x6F
06EAC:  MOVLW  04
06EAE:  MOVWF  x6E
06EB0:  MOVLB  0
06EB2:  CALL   2C86
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
06EB6:  MOVLW  CE
06EB8:  MOVWF  FF6
06EBA:  MOVLW  1C
06EBC:  MOVWF  FF7
06EBE:  MOVLW  00
06EC0:  MOVWF  FF8
06EC2:  MOVLW  0B
06EC4:  MOVLB  3
06EC6:  MOVWF  x1E
06EC8:  MOVLB  0
06ECA:  CALL   20BA
06ECE:  MOVFF  244,A77
06ED2:  MOVLW  37
06ED4:  MOVLB  A
06ED6:  MOVWF  x78
06ED8:  MOVLB  0
06EDA:  CALL   22D0
06EDE:  MOVLW  20
06EE0:  BTFSS  FA6.6
06EE2:  GOTO   6EE0
06EE6:  MOVLB  E
06EE8:  MOVWF  xF9
06EEA:  MOVFF  245,A77
06EEE:  MOVLW  37
06EF0:  MOVLB  A
06EF2:  MOVWF  x78
06EF4:  MOVLB  0
06EF6:  CALL   22D0
06EFA:  MOVLW  20
06EFC:  BTFSS  FA6.6
06EFE:  GOTO   6EFC
06F02:  MOVLB  E
06F04:  MOVWF  xF9
06F06:  MOVFF  246,A77
06F0A:  MOVLW  37
06F0C:  MOVLB  A
06F0E:  MOVWF  x78
06F10:  MOVLB  0
06F12:  CALL   22D0
06F16:  MOVLW  20
06F18:  BTFSS  FA6.6
06F1A:  GOTO   6F18
06F1E:  MOVLB  E
06F20:  MOVWF  xF9
06F22:  MOVFF  247,A77
06F26:  MOVLW  37
06F28:  MOVLB  A
06F2A:  MOVWF  x78
06F2C:  MOVLB  0
06F2E:  CALL   22D0
06F32:  MOVLW  0D
06F34:  BTFSS  FA6.6
06F36:  GOTO   6F34
06F3A:  MOVLB  E
06F3C:  MOVWF  xF9
06F3E:  MOVLW  0A
06F40:  MOVLB  0
06F42:  BTFSS  FA6.6
06F44:  GOTO   6F42
06F48:  MOVLB  E
06F4A:  MOVWF  xF9
....................    fprintf(PC, "End Flash Read Address\r\n");
06F4C:  MOVLW  F0
06F4E:  MOVWF  FF6
06F50:  MOVLW  1C
06F52:  MOVWF  FF7
06F54:  MOVLW  00
06F56:  MOVWF  FF8
06F58:  MOVLB  0
06F5A:  CALL   2084
06F5E:  GOTO   E6AE (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase and Reset\r\n");
*
07152:  MOVLW  0A
07154:  MOVWF  FF6
07156:  MOVLW  1D
07158:  MOVWF  FF7
0715A:  MOVLW  00
0715C:  MOVWF  FF8
0715E:  CALL   2084
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
07162:  MOVLB  2
07164:  MOVF   x3E,W
07166:  MOVWF  FE9
07168:  MOVF   x3F,W
0716A:  MOVWF  FEA
0716C:  MOVFF  FEF,240
07170:  MOVFF  240,295
07174:  CLRF   x96
07176:  MOVLB  0
07178:  CALL   4D60
.................... 
....................    mode_misf_erase_all(parameter); // Erase all flash memory
0717C:  MOVFF  23F,241
07180:  MOVFF  23E,240
07184:  CALL   5586
....................    mode_misf_address_reset(parameter); // Reset the address area
07188:  MOVFF  23F,241
0718C:  MOVFF  23E,240
07190:  GOTO   6F62
.................... 
....................    fprintf(PC, "End Flash Erase and Reset\r\n");
07194:  MOVLW  28
07196:  MOVWF  FF6
07198:  MOVLW  1D
0719A:  MOVWF  FF7
0719C:  MOVLW  00
0719E:  MOVWF  FF8
071A0:  CALL   2084
071A4:  GOTO   E6BE (RETURN)
.................... }
.................... // ========================== SMF Command ============================
.................... void mode_smf_copy(int8 parameter[])
.................... {
....................    printf("Start Flash SMF Copy\r\n");
071A8:  MOVLW  44
071AA:  MOVWF  FF6
071AC:  MOVLW  1D
071AE:  MOVWF  FF7
071B0:  MOVLW  00
071B2:  MOVWF  FF8
071B4:  CALL   2084
....................    flash_setting(mis_fm);
071B8:  MOVFF  115,34C
071BC:  MOVFF  114,34B
071C0:  MOVFF  113,34A
071C4:  MOVFF  112,349
071C8:  CALL   6644
....................    flash_setting(smf);
071CC:  MOVFF  119,34C
071D0:  MOVFF  118,34B
071D4:  MOVFF  117,34A
071D8:  MOVFF  116,349
071DC:  CALL   6644
....................    
....................    // 統合管理システムを使用したコピー操作
....................    int8 mission_id = parameter[0];
....................    
....................    // 未コピーデータの自動転送をキューに追加
....................    //enqueue_auto_transfer(mission_id);
....................    
....................    // Example copy operation with integration system
....................    int32 src_address = 0x00000000;
....................    int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
071E0:  MOVLB  2
071E2:  MOVF   x3E,W
071E4:  MOVWF  FE9
071E6:  MOVF   x3F,W
071E8:  MOVWF  FEA
071EA:  MOVFF  FEF,240
071EE:  CLRF   x44
071F0:  CLRF   x43
071F2:  CLRF   x42
071F4:  CLRF   x41
071F6:  CLRF   x48
071F8:  CLRF   x47
071FA:  MOVLW  10
071FC:  MOVWF  x46
071FE:  CLRF   x45
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
07200:  MOVFF  115,B67
07204:  MOVFF  114,B66
07208:  MOVFF  113,B65
0720C:  MOVFF  112,B64
07210:  MOVFF  244,B6B
07214:  MOVFF  243,B6A
07218:  MOVFF  242,B69
0721C:  MOVFF  241,B68
07220:  MOVLW  02
07222:  MOVLB  B
07224:  MOVWF  x6D
07226:  MOVLW  49
07228:  MOVWF  x6C
0722A:  CLRF   x71
0722C:  CLRF   x70
0722E:  MOVLW  01
07230:  MOVWF  x6F
07232:  CLRF   x6E
07234:  MOVLB  0
07236:  CALL   2C86
....................    write_data_bytes(smf, dest_address, read_data, 256);
0723A:  MOVFF  119,BAB
0723E:  MOVFF  118,BAA
07242:  MOVFF  117,BA9
07246:  MOVFF  116,BA8
0724A:  MOVFF  248,BAF
0724E:  MOVFF  247,BAE
07252:  MOVFF  246,BAD
07256:  MOVFF  245,BAC
0725A:  MOVLW  02
0725C:  MOVLB  B
0725E:  MOVWF  xB1
07260:  MOVLW  49
07262:  MOVWF  xB0
07264:  MOVLW  01
07266:  MOVWF  xB3
07268:  CLRF   xB2
0726A:  MOVLB  0
0726C:  CALL   3C7C
....................    
....................    // 転送完了後のカウンタ更新
....................    //complete_transfer_and_update_counter(mission_id, 256);
....................    
....................    printf("End Flash SMF Copy\r\n");
07270:  MOVLW  5C
07272:  MOVWF  FF6
07274:  MOVLW  1D
07276:  MOVWF  FF7
07278:  MOVLW  00
0727A:  MOVWF  FF8
0727C:  CALL   2084
07280:  GOTO   E6CE (RETURN)
.................... }
.................... 
.................... 
.................... void mode_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
07284:  MOVLW  72
07286:  MOVWF  FF6
07288:  MOVLW  1D
0728A:  MOVWF  FF7
0728C:  MOVLW  00
0728E:  MOVWF  FF8
07290:  CALL   2084
....................    unsigned int32 read_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
....................    unsigned int16 read_packetnum = 
....................       ((unsigned int16)parameter[6] << 8) |
....................       ((unsigned int16)parameter[7]);
....................    
....................    unsigned int8 read_data[PACKET_SIZE];
07294:  MOVLW  01
07296:  MOVLB  2
07298:  ADDWF  x3E,W
0729A:  MOVWF  FE9
0729C:  MOVLW  00
0729E:  ADDWFC x3F,W
072A0:  MOVWF  FEA
072A2:  MOVF   FEF,W
072A4:  CLRF   x8A
072A6:  CLRF   x89
072A8:  CLRF   x88
072AA:  MOVWF  x87
072AC:  MOVFF  287,28A
072B0:  CLRF   x87
072B2:  CLRF   x88
072B4:  CLRF   x89
072B6:  MOVLW  02
072B8:  ADDWF  x3E,W
072BA:  MOVWF  FE9
072BC:  MOVLW  00
072BE:  ADDWFC x3F,W
072C0:  MOVWF  FEA
072C2:  MOVF   FEF,W
072C4:  CLRF   x8F
072C6:  CLRF   x8E
072C8:  CLRF   x8D
072CA:  MOVWF  x8C
072CC:  MOVFF  28D,03
072D0:  MOVFF  28C,02
072D4:  CLRF   00
072D6:  CLRF   01
072D8:  MOVF   00,W
072DA:  IORWF  x87,F
072DC:  MOVF   01,W
072DE:  IORWF  x88,F
072E0:  MOVF   02,W
072E2:  IORWF  x89,F
072E4:  MOVF   03,W
072E6:  IORWF  x8A,F
072E8:  MOVLW  03
072EA:  ADDWF  x3E,W
072EC:  MOVWF  FE9
072EE:  MOVLW  00
072F0:  ADDWFC x3F,W
072F2:  MOVWF  FEA
072F4:  MOVF   FEF,W
072F6:  CLRF   x8F
072F8:  CLRF   x8E
072FA:  CLRF   x8D
072FC:  MOVWF  x8C
072FE:  MOVFF  28E,03
07302:  MOVFF  28D,02
07306:  MOVFF  28C,01
0730A:  CLRF   00
0730C:  MOVF   00,W
0730E:  IORWF  x87,F
07310:  MOVF   01,W
07312:  IORWF  x88,F
07314:  MOVF   02,W
07316:  IORWF  x89,F
07318:  MOVF   03,W
0731A:  IORWF  x8A,F
0731C:  MOVLW  04
0731E:  ADDWF  x3E,W
07320:  MOVWF  FE9
07322:  MOVLW  00
07324:  ADDWFC x3F,W
07326:  MOVWF  FEA
07328:  MOVF   FEF,W
0732A:  MOVWF  00
0732C:  CLRF   01
0732E:  CLRF   02
07330:  CLRF   03
07332:  MOVF   00,W
07334:  IORWF  x87,W
07336:  MOVWF  x40
07338:  MOVF   01,W
0733A:  IORWF  x88,W
0733C:  MOVWF  x41
0733E:  MOVF   02,W
07340:  IORWF  x89,W
07342:  MOVWF  x42
07344:  MOVF   03,W
07346:  IORWF  x8A,W
07348:  MOVWF  x43
0734A:  MOVLW  06
0734C:  ADDWF  x3E,W
0734E:  MOVWF  FE9
07350:  MOVLW  00
07352:  ADDWFC x3F,W
07354:  MOVWF  FEA
07356:  MOVF   FEF,W
07358:  CLRF   x88
0735A:  MOVWF  x87
0735C:  MOVFF  287,288
07360:  CLRF   x87
07362:  MOVLW  07
07364:  ADDWF  x3E,W
07366:  MOVWF  FE9
07368:  MOVLW  00
0736A:  ADDWFC x3F,W
0736C:  MOVWF  FEA
0736E:  MOVF   FEF,W
07370:  CLRF   03
07372:  IORWF  x87,W
07374:  MOVWF  x44
07376:  MOVF   03,W
07378:  IORWF  x88,W
0737A:  MOVWF  x45
.................... 
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", read_address);
0737C:  MOVLW  8A
0737E:  MOVWF  FF6
07380:  MOVLW  1D
07382:  MOVWF  FF7
07384:  MOVLW  00
07386:  MOVWF  FF8
07388:  MOVLW  0E
0738A:  MOVLB  3
0738C:  MOVWF  x1E
0738E:  MOVLB  0
07390:  CALL   20BA
07394:  MOVFF  243,A77
07398:  MOVLW  37
0739A:  MOVLB  A
0739C:  MOVWF  x78
0739E:  MOVLB  0
073A0:  CALL   22D0
073A4:  MOVFF  242,A77
073A8:  MOVLW  37
073AA:  MOVLB  A
073AC:  MOVWF  x78
073AE:  MOVLB  0
073B0:  CALL   22D0
073B4:  MOVFF  241,A77
073B8:  MOVLW  37
073BA:  MOVLB  A
073BC:  MOVWF  x78
073BE:  MOVLB  0
073C0:  CALL   22D0
073C4:  MOVFF  240,A77
073C8:  MOVLW  37
073CA:  MOVLB  A
073CC:  MOVWF  x78
073CE:  MOVLB  0
073D0:  CALL   22D0
073D4:  MOVLW  0D
073D6:  BTFSS  FA6.6
073D8:  GOTO   73D6
073DC:  MOVLB  E
073DE:  MOVWF  xF9
073E0:  MOVLW  0A
073E2:  MOVLB  0
073E4:  BTFSS  FA6.6
073E6:  GOTO   73E4
073EA:  MOVLB  E
073EC:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", read_packetnum);
073EE:  MOVLW  A0
073F0:  MOVWF  FF6
073F2:  MOVLW  1D
073F4:  MOVWF  FF7
073F6:  MOVLW  00
073F8:  MOVWF  FF8
073FA:  MOVLW  0E
073FC:  MOVLB  3
073FE:  MOVWF  x1E
07400:  MOVLB  0
07402:  CALL   20BA
07406:  MOVFF  245,A77
0740A:  MOVLW  37
0740C:  MOVLB  A
0740E:  MOVWF  x78
07410:  MOVLB  0
07412:  CALL   22D0
07416:  MOVFF  244,A77
0741A:  MOVLW  37
0741C:  MOVLB  A
0741E:  MOVWF  x78
07420:  MOVLB  0
07422:  CALL   22D0
07426:  MOVLW  0D
07428:  BTFSS  FA6.6
0742A:  GOTO   7428
0742E:  MOVLB  E
07430:  MOVWF  xF9
07432:  MOVLW  0A
07434:  MOVLB  0
07436:  BTFSS  FA6.6
07438:  GOTO   7436
0743C:  MOVLB  E
0743E:  MOVWF  xF9
....................    fprintf(PC, "Read Data\r\n");
07440:  MOVLW  B6
07442:  MOVWF  FF6
07444:  MOVLW  1D
07446:  MOVWF  FF7
07448:  MOVLW  00
0744A:  MOVWF  FF8
0744C:  MOVLB  0
0744E:  CALL   2084
.................... 
....................    while (read_packetnum > 0) {
07452:  MOVLB  2
07454:  MOVF   x44,F
07456:  BTFSC  FD8.2
07458:  BRA    7460
0745A:  MOVLB  0
0745C:  GOTO   7472
07460:  MOVLB  0
07462:  MOVLB  2
07464:  MOVF   x45,F
07466:  BTFSS  FD8.2
07468:  BRA    7470
0746A:  MOVLB  0
0746C:  GOTO   753A
07470:  MOVLB  0
....................       read_data_bytes(smf, read_address, read_data, PACKET_SIZE);
07472:  MOVFF  119,B67
07476:  MOVFF  118,B66
0747A:  MOVFF  117,B65
0747E:  MOVFF  116,B64
07482:  MOVFF  243,B6B
07486:  MOVFF  242,B6A
0748A:  MOVFF  241,B69
0748E:  MOVFF  240,B68
07492:  MOVLW  02
07494:  MOVLB  B
07496:  MOVWF  x6D
07498:  MOVLW  46
0749A:  MOVWF  x6C
0749C:  CLRF   x71
0749E:  CLRF   x70
074A0:  CLRF   x6F
074A2:  MOVLW  40
074A4:  MOVWF  x6E
074A6:  MOVLB  0
074A8:  CALL   2C86
.................... 
....................       for (int i = 0; i < PACKET_SIZE; i++) {
074AC:  MOVLB  2
074AE:  CLRF   x86
074B0:  MOVLB  0
074B2:  MOVLB  2
074B4:  MOVF   x86,W
074B6:  SUBLW  3F
074B8:  BTFSC  FD8.0
074BA:  BRA    74C2
074BC:  MOVLB  0
074BE:  GOTO   7500
074C2:  MOVLB  0
....................          fprintf(PC, "%02X ", read_data[i]);
074C4:  CLRF   03
074C6:  MOVLB  2
074C8:  MOVF   x86,W
074CA:  ADDLW  46
074CC:  MOVWF  FE9
074CE:  MOVLW  02
074D0:  ADDWFC 03,W
074D2:  MOVWF  FEA
074D4:  MOVFF  FEF,287
074D8:  MOVFF  287,A77
074DC:  MOVLW  37
074DE:  MOVLB  A
074E0:  MOVWF  x78
074E2:  MOVLB  0
074E4:  CALL   22D0
074E8:  MOVLW  20
074EA:  BTFSS  FA6.6
074EC:  GOTO   74EA
074F0:  MOVLB  E
074F2:  MOVWF  xF9
074F4:  MOVLB  0
074F6:  MOVLB  2
074F8:  INCF   x86,F
074FA:  MOVLB  0
074FC:  GOTO   74B2
....................       }
....................       fprintf(PC, "\r\n");
07500:  MOVLW  0D
07502:  BTFSS  FA6.6
07504:  GOTO   7502
07508:  MOVLB  E
0750A:  MOVWF  xF9
0750C:  MOVLW  0A
0750E:  MOVLB  0
07510:  BTFSS  FA6.6
07512:  GOTO   7510
07516:  MOVLB  E
07518:  MOVWF  xF9
....................       read_address += PACKET_SIZE;
0751A:  MOVLW  40
0751C:  MOVLB  2
0751E:  ADDWF  x40,F
07520:  MOVLW  00
07522:  ADDWFC x41,F
07524:  MOVLW  00
07526:  ADDWFC x42,F
07528:  MOVLW  00
0752A:  ADDWFC x43,F
....................       read_packetnum--;
0752C:  MOVF   x44,W
0752E:  BTFSC  FD8.2
07530:  DECF   x45,F
07532:  DECF   x44,F
07534:  MOVLB  0
07536:  GOTO   7452
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
0753A:  MOVLW  C2
0753C:  MOVWF  FF6
0753E:  MOVLW  1D
07540:  MOVWF  FF7
07542:  MOVLW  00
07544:  MOVWF  FF8
07546:  CALL   2084
0754A:  GOTO   E6DE (RETURN)
.................... }
.................... 
.................... 
.................... void mode_smf_erase(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Erase\r\n");
0754E:  MOVLW  DA
07550:  MOVWF  FF6
07552:  MOVLW  1D
07554:  MOVWF  FF7
07556:  MOVLW  00
07558:  MOVWF  FF8
0755A:  CALL   2084
....................    flash_setting(smf);
0755E:  MOVFF  119,34C
07562:  MOVFF  118,34B
07566:  MOVFF  117,34A
0756A:  MOVFF  116,349
0756E:  CALL   6644
....................    unsigned int32 erase_address = 0x00000000; // Example address
07572:  MOVLB  2
07574:  CLRF   x43
07576:  CLRF   x42
07578:  CLRF   x41
0757A:  CLRF   x40
....................    sector_erase(smf, erase_address); // Erase the sector
0757C:  MOVFF  119,BA9
07580:  MOVFF  118,BA8
07584:  MOVFF  117,BA7
07588:  MOVFF  116,BA6
0758C:  MOVFF  243,BAD
07590:  MOVFF  242,BAC
07594:  MOVFF  241,BAB
07598:  MOVFF  240,BAA
0759C:  MOVLB  0
0759E:  CALL   4160
....................    fprintf(PC, "End Flash SMF Erase\r\n");
075A2:  MOVLW  F2
075A4:  MOVWF  FF6
075A6:  MOVLW  1D
075A8:  MOVWF  FF7
075AA:  MOVLW  00
075AC:  MOVWF  FF8
075AE:  CALL   2084
075B2:  GOTO   E6EE (RETURN)
.................... }  
.................... 
.................... void mode_misf_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
*
06F62:  MOVLW  08
06F64:  MOVWF  FF6
06F66:  MOVLW  1E
06F68:  MOVWF  FF7
06F6A:  MOVLW  00
06F6C:  MOVWF  FF8
06F6E:  CALL   2084
....................    piclog_make(parameter[0], PICLOG_PARAM_START); 
06F72:  MOVLB  2
06F74:  MOVF   x40,W
06F76:  MOVWF  FE9
06F78:  MOVF   x41,W
06F7A:  MOVWF  FEA
06F7C:  MOVFF  FEF,284
06F80:  MOVFF  284,295
06F84:  CLRF   x96
06F86:  MOVLB  0
06F88:  CALL   4D60
....................    FlashData_t flash_data;
....................    memset(flash_data.bytes, 0, PACKET_SIZE);
06F8C:  MOVLW  02
06F8E:  MOVWF  FEA
06F90:  MOVLW  42
06F92:  MOVWF  FE9
06F94:  CLRF   00
06F96:  CLRF   02
06F98:  MOVLW  40
06F9A:  MOVWF  01
06F9C:  CALL   2C62
....................    /*
....................    for (int i = 0; i < PACKET_SIZE; i++) {
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
....................    }
....................    */
....................    fprintf(PC, "\r\n");
06FA0:  MOVLW  0D
06FA2:  BTFSS  FA6.6
06FA4:  GOTO   6FA2
06FA8:  MOVLB  E
06FAA:  MOVWF  xF9
06FAC:  MOVLW  0A
06FAE:  MOVLB  0
06FB0:  BTFSS  FA6.6
06FB2:  GOTO   6FB0
06FB6:  MOVLB  E
06FB8:  MOVWF  xF9
....................    flash_data.packet.crc = calc_crc8(flash_data.bytes, PACKET_SIZE-1);
06FBA:  MOVLW  02
06FBC:  MOVLB  B
06FBE:  MOVWF  xF3
06FC0:  MOVLW  42
06FC2:  MOVWF  xF2
06FC4:  MOVLW  3F
06FC6:  MOVWF  xF4
06FC8:  MOVLB  0
06FCA:  CALL   2E9A
06FCE:  MOVFF  01,281
....................    for (int i = 0; i < PACKET_SIZE; i++) {
06FD2:  MOVLB  2
06FD4:  CLRF   x82
06FD6:  MOVLB  0
06FD8:  MOVLB  2
06FDA:  MOVF   x82,W
06FDC:  SUBLW  3F
06FDE:  BTFSC  FD8.0
06FE0:  BRA    6FE8
06FE2:  MOVLB  0
06FE4:  GOTO   7026
06FE8:  MOVLB  0
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
06FEA:  CLRF   03
06FEC:  MOVLB  2
06FEE:  MOVF   x82,W
06FF0:  ADDLW  42
06FF2:  MOVWF  FE9
06FF4:  MOVLW  02
06FF6:  ADDWFC 03,W
06FF8:  MOVWF  FEA
06FFA:  MOVFF  FEF,284
06FFE:  MOVFF  284,A77
07002:  MOVLW  37
07004:  MOVLB  A
07006:  MOVWF  x78
07008:  MOVLB  0
0700A:  CALL   22D0
0700E:  MOVLW  20
07010:  BTFSS  FA6.6
07012:  GOTO   7010
07016:  MOVLB  E
07018:  MOVWF  xF9
0701A:  MOVLB  0
0701C:  MOVLB  2
0701E:  INCF   x82,F
07020:  MOVLB  0
07022:  GOTO   6FD8
....................    }
....................    fprintf(PC, "\r\n");
07026:  MOVLW  0D
07028:  BTFSS  FA6.6
0702A:  GOTO   7028
0702E:  MOVLB  E
07030:  MOVWF  xF9
07032:  MOVLW  0A
07034:  MOVLB  0
07036:  BTFSS  FA6.6
07038:  GOTO   7036
0703C:  MOVLB  E
0703E:  MOVWF  xF9
....................    write_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, flash_data.bytes, PACKET_SIZE);
07040:  MOVFF  115,BAB
07044:  MOVFF  114,BAA
07048:  MOVFF  113,BA9
0704C:  MOVFF  112,BA8
07050:  MOVLB  B
07052:  CLRF   xAF
07054:  CLRF   xAE
07056:  CLRF   xAD
07058:  CLRF   xAC
0705A:  MOVLW  02
0705C:  MOVWF  xB1
0705E:  MOVLW  42
07060:  MOVWF  xB0
07062:  CLRF   xB3
07064:  MOVLW  40
07066:  MOVWF  xB2
07068:  MOVLB  0
0706A:  CALL   3C7C
....................    memset(flash_data.bytes, 0, PACKET_SIZE);
0706E:  MOVLW  02
07070:  MOVWF  FEA
07072:  MOVLW  42
07074:  MOVWF  FE9
07076:  CLRF   00
07078:  CLRF   02
0707A:  MOVLW  40
0707C:  MOVWF  01
0707E:  CALL   2C62
....................    read_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, flash_data.bytes, PACKET_SIZE);
07082:  MOVFF  115,B67
07086:  MOVFF  114,B66
0708A:  MOVFF  113,B65
0708E:  MOVFF  112,B64
07092:  MOVLB  B
07094:  CLRF   x6B
07096:  CLRF   x6A
07098:  CLRF   x69
0709A:  CLRF   x68
0709C:  MOVLW  02
0709E:  MOVWF  x6D
070A0:  MOVLW  42
070A2:  MOVWF  x6C
070A4:  CLRF   x71
070A6:  CLRF   x70
070A8:  CLRF   x6F
070AA:  MOVLW  40
070AC:  MOVWF  x6E
070AE:  MOVLB  0
070B0:  CALL   2C86
....................    flash_data.packet.crc = calc_crc8(flash_data.bytes, PACKET_SIZE-1);
070B4:  MOVLW  02
070B6:  MOVLB  B
070B8:  MOVWF  xF3
070BA:  MOVLW  42
070BC:  MOVWF  xF2
070BE:  MOVLW  3F
070C0:  MOVWF  xF4
070C2:  MOVLB  0
070C4:  CALL   2E9A
070C8:  MOVFF  01,281
....................    for (int i = 0; i < PACKET_SIZE; i++) {
070CC:  MOVLB  2
070CE:  CLRF   x83
070D0:  MOVLB  0
070D2:  MOVLB  2
070D4:  MOVF   x83,W
070D6:  SUBLW  3F
070D8:  BTFSC  FD8.0
070DA:  BRA    70E2
070DC:  MOVLB  0
070DE:  GOTO   7120
070E2:  MOVLB  0
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
070E4:  CLRF   03
070E6:  MOVLB  2
070E8:  MOVF   x83,W
070EA:  ADDLW  42
070EC:  MOVWF  FE9
070EE:  MOVLW  02
070F0:  ADDWFC 03,W
070F2:  MOVWF  FEA
070F4:  MOVFF  FEF,284
070F8:  MOVFF  284,A77
070FC:  MOVLW  37
070FE:  MOVLB  A
07100:  MOVWF  x78
07102:  MOVLB  0
07104:  CALL   22D0
07108:  MOVLW  20
0710A:  BTFSS  FA6.6
0710C:  GOTO   710A
07110:  MOVLB  E
07112:  MOVWF  xF9
07114:  MOVLB  0
07116:  MOVLB  2
07118:  INCF   x83,F
0711A:  MOVLB  0
0711C:  GOTO   70D2
....................    }
....................    misf_init(); // Update the address area after writing
07120:  CALL   3710
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
07124:  MOVLB  2
07126:  MOVF   x40,W
07128:  MOVWF  FE9
0712A:  MOVF   x41,W
0712C:  MOVWF  FEA
0712E:  MOVFF  FEF,284
07132:  MOVFF  284,295
07136:  SETF   x96
07138:  MOVLB  0
0713A:  CALL   4D60
....................    fprintf(PC, "End Flash Address Reset\r\n");
0713E:  MOVLW  24
07140:  MOVWF  FF6
07142:  MOVLW  1E
07144:  MOVWF  FF7
07146:  MOVLW  00
07148:  MOVWF  FF8
0714A:  CALL   2084
0714E:  GOTO   7194 (RETURN)
.................... }
.................... 
.................... // ---------- SMF Command Functions ----------
.................... void mode_smf_read_force(int8 parameter[])
*
078B2:  MOVLW  01
078B4:  MOVLB  2
078B6:  ADDWF  x3E,W
078B8:  MOVWF  FE9
078BA:  MOVLW  00
078BC:  ADDWFC x3F,W
078BE:  MOVWF  FEA
078C0:  MOVF   FEF,W
078C2:  CLRF   x90
078C4:  CLRF   x8F
078C6:  CLRF   x8E
078C8:  MOVWF  x8D
078CA:  MOVFF  28D,290
078CE:  CLRF   x8D
078D0:  CLRF   x8E
078D2:  CLRF   x8F
078D4:  MOVLW  02
078D6:  ADDWF  x3E,W
078D8:  MOVWF  FE9
078DA:  MOVLW  00
078DC:  ADDWFC x3F,W
078DE:  MOVWF  FEA
078E0:  MOVF   FEF,W
078E2:  CLRF   x95
078E4:  CLRF   x94
078E6:  CLRF   x93
078E8:  MOVWF  x92
078EA:  MOVFF  293,03
078EE:  MOVFF  292,02
078F2:  CLRF   00
078F4:  CLRF   01
078F6:  MOVF   00,W
078F8:  IORWF  x8D,F
078FA:  MOVF   01,W
078FC:  IORWF  x8E,F
078FE:  MOVF   02,W
07900:  IORWF  x8F,F
07902:  MOVF   03,W
07904:  IORWF  x90,F
07906:  MOVLW  03
07908:  ADDWF  x3E,W
0790A:  MOVWF  FE9
0790C:  MOVLW  00
0790E:  ADDWFC x3F,W
07910:  MOVWF  FEA
07912:  MOVF   FEF,W
07914:  CLRF   x95
07916:  CLRF   x94
07918:  CLRF   x93
0791A:  MOVWF  x92
0791C:  MOVFF  294,03
07920:  MOVFF  293,02
07924:  MOVFF  292,01
07928:  CLRF   00
0792A:  MOVF   00,W
0792C:  IORWF  x8D,F
0792E:  MOVF   01,W
07930:  IORWF  x8E,F
07932:  MOVF   02,W
07934:  IORWF  x8F,F
07936:  MOVF   03,W
07938:  IORWF  x90,F
0793A:  MOVLW  04
0793C:  ADDWF  x3E,W
0793E:  MOVWF  FE9
07940:  MOVLW  00
07942:  ADDWFC x3F,W
07944:  MOVWF  FEA
07946:  MOVF   FEF,W
07948:  MOVWF  00
0794A:  CLRF   01
0794C:  CLRF   02
0794E:  CLRF   03
07950:  MOVF   00,W
07952:  IORWF  x8D,W
07954:  MOVWF  x40
07956:  MOVF   01,W
07958:  IORWF  x8E,W
0795A:  MOVWF  x41
0795C:  MOVF   02,W
0795E:  IORWF  x8F,W
07960:  MOVWF  x42
07962:  MOVF   03,W
07964:  IORWF  x90,W
07966:  MOVWF  x43
07968:  MOVLW  07
0796A:  ADDWF  x3E,W
0796C:  MOVWF  FE9
0796E:  MOVLW  00
07970:  ADDWFC x3F,W
07972:  MOVWF  FEA
07974:  MOVF   FEF,W
07976:  CLRF   x8E
07978:  MOVWF  x8D
0797A:  MOVFF  28D,28E
0797E:  CLRF   x8D
07980:  MOVLW  08
07982:  ADDWF  x3E,W
07984:  MOVWF  FE9
07986:  MOVLW  00
07988:  ADDWFC x3F,W
0798A:  MOVWF  FEA
0798C:  MOVF   FEF,W
0798E:  CLRF   03
07990:  IORWF  x8D,W
07992:  MOVWF  x44
07994:  MOVF   03,W
07996:  IORWF  x8E,W
07998:  MOVWF  x45
.................... {
....................    int32 address = 
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
....................    
....................    int16 packet_num = 
....................       ((int16)parameter[7] << 8) |
....................       ((int16)parameter[8]);
....................       
....................    int8 read_data[PACKET_SIZE] = {0x00}; // Initialize read data buffer
0799A:  CLRF   x46
0799C:  CLRF   x47
0799E:  CLRF   x48
079A0:  CLRF   x49
079A2:  CLRF   x4A
079A4:  CLRF   x4B
079A6:  CLRF   x4C
079A8:  CLRF   x4D
079AA:  CLRF   x4E
079AC:  CLRF   x4F
079AE:  CLRF   x50
079B0:  CLRF   x51
079B2:  CLRF   x52
079B4:  CLRF   x53
079B6:  CLRF   x54
079B8:  CLRF   x55
079BA:  CLRF   x56
079BC:  CLRF   x57
079BE:  CLRF   x58
079C0:  CLRF   x59
079C2:  CLRF   x5A
079C4:  CLRF   x5B
079C6:  CLRF   x5C
079C8:  CLRF   x5D
079CA:  CLRF   x5E
079CC:  CLRF   x5F
079CE:  CLRF   x60
079D0:  CLRF   x61
079D2:  CLRF   x62
079D4:  CLRF   x63
079D6:  CLRF   x64
079D8:  CLRF   x65
079DA:  CLRF   x66
079DC:  CLRF   x67
079DE:  CLRF   x68
079E0:  CLRF   x69
079E2:  CLRF   x6A
079E4:  CLRF   x6B
079E6:  CLRF   x6C
079E8:  CLRF   x6D
079EA:  CLRF   x6E
079EC:  CLRF   x6F
079EE:  CLRF   x70
079F0:  CLRF   x71
079F2:  CLRF   x72
079F4:  CLRF   x73
079F6:  CLRF   x74
079F8:  CLRF   x75
079FA:  CLRF   x76
079FC:  CLRF   x77
079FE:  CLRF   x78
07A00:  CLRF   x79
07A02:  CLRF   x7A
07A04:  CLRF   x7B
07A06:  CLRF   x7C
07A08:  CLRF   x7D
07A0A:  CLRF   x7E
07A0C:  CLRF   x7F
07A0E:  CLRF   x80
07A10:  CLRF   x81
07A12:  CLRF   x82
07A14:  CLRF   x83
07A16:  CLRF   x84
07A18:  CLRF   x85
....................    if(!is_connect(smf)) {
07A1A:  MOVFF  119,2DC
07A1E:  MOVFF  118,2DB
07A22:  MOVFF  117,2DA
07A26:  MOVFF  116,2D9
07A2A:  MOVLB  0
07A2C:  CALL   2B9A
07A30:  MOVF   01,F
07A32:  BTFSS  FD8.2
07A34:  GOTO   7A4C
....................       printf("SMF is not connected\r\n");
07A38:  MOVLW  3E
07A3A:  MOVWF  FF6
07A3C:  MOVLW  1E
07A3E:  MOVWF  FF7
07A40:  MOVLW  00
07A42:  MOVWF  FF8
07A44:  CALL   2084
....................       return;
07A48:  GOTO   7C9C
....................    }
....................    printf("Start Flash SMF Read Force\r\n");
07A4C:  MOVLW  56
07A4E:  MOVWF  FF6
07A50:  MOVLW  1E
07A52:  MOVWF  FF7
07A54:  MOVLW  00
07A56:  MOVWF  FF8
07A58:  CALL   2084
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
07A5C:  MOVLB  2
07A5E:  MOVF   x3E,W
07A60:  MOVWF  FE9
07A62:  MOVF   x3F,W
07A64:  MOVWF  FEA
07A66:  MOVFF  FEF,28D
07A6A:  MOVFF  28D,295
07A6E:  CLRF   x96
07A70:  MOVLB  0
07A72:  CALL   4D60
.................... 
....................    // 統合管理システムからキューに追加
....................    // enqueue_read_data(address, packet_num * PACKET_SIZE);
.................... 
....................    printf("\tAddress  : 0x%08LX\r\n", address);
07A76:  MOVLW  74
07A78:  MOVWF  FF6
07A7A:  MOVLW  1E
07A7C:  MOVWF  FF7
07A7E:  MOVLW  00
07A80:  MOVWF  FF8
07A82:  MOVLW  0E
07A84:  MOVLB  3
07A86:  MOVWF  x1E
07A88:  MOVLB  0
07A8A:  CALL   20BA
07A8E:  MOVFF  243,A77
07A92:  MOVLW  37
07A94:  MOVLB  A
07A96:  MOVWF  x78
07A98:  MOVLB  0
07A9A:  CALL   22D0
07A9E:  MOVFF  242,A77
07AA2:  MOVLW  37
07AA4:  MOVLB  A
07AA6:  MOVWF  x78
07AA8:  MOVLB  0
07AAA:  CALL   22D0
07AAE:  MOVFF  241,A77
07AB2:  MOVLW  37
07AB4:  MOVLB  A
07AB6:  MOVWF  x78
07AB8:  MOVLB  0
07ABA:  CALL   22D0
07ABE:  MOVFF  240,A77
07AC2:  MOVLW  37
07AC4:  MOVLB  A
07AC6:  MOVWF  x78
07AC8:  MOVLB  0
07ACA:  CALL   22D0
07ACE:  MOVLW  0D
07AD0:  BTFSS  FA6.6
07AD2:  GOTO   7AD0
07AD6:  MOVLB  E
07AD8:  MOVWF  xF9
07ADA:  MOVLW  0A
07ADC:  MOVLB  0
07ADE:  BTFSS  FA6.6
07AE0:  GOTO   7ADE
07AE4:  MOVLB  E
07AE6:  MOVWF  xF9
....................    printf("\tPacketNum: 0x%04LX\r\n", packet_num);
07AE8:  MOVLW  8A
07AEA:  MOVWF  FF6
07AEC:  MOVLW  1E
07AEE:  MOVWF  FF7
07AF0:  MOVLW  00
07AF2:  MOVWF  FF8
07AF4:  MOVLW  0E
07AF6:  MOVLB  3
07AF8:  MOVWF  x1E
07AFA:  MOVLB  0
07AFC:  CALL   20BA
07B00:  MOVFF  245,A77
07B04:  MOVLW  37
07B06:  MOVLB  A
07B08:  MOVWF  x78
07B0A:  MOVLB  0
07B0C:  CALL   22D0
07B10:  MOVFF  244,A77
07B14:  MOVLW  37
07B16:  MOVLB  A
07B18:  MOVWF  x78
07B1A:  MOVLB  0
07B1C:  CALL   22D0
07B20:  MOVLW  0D
07B22:  BTFSS  FA6.6
07B24:  GOTO   7B22
07B28:  MOVLB  E
07B2A:  MOVWF  xF9
07B2C:  MOVLW  0A
07B2E:  MOVLB  0
07B30:  BTFSS  FA6.6
07B32:  GOTO   7B30
07B36:  MOVLB  E
07B38:  MOVWF  xF9
....................    printf("read data\r\n");
07B3A:  MOVLW  A0
07B3C:  MOVWF  FF6
07B3E:  MOVLW  1E
07B40:  MOVWF  FF7
07B42:  MOVLW  00
07B44:  MOVWF  FF8
07B46:  MOVLB  0
07B48:  CALL   2084
....................    for (int16 packet_count = 0; packet_count < packet_num; packet_count++)
07B4C:  MOVLB  2
07B4E:  CLRF   x87
07B50:  CLRF   x86
07B52:  MOVLB  0
07B54:  MOVLB  2
07B56:  MOVF   x87,W
07B58:  SUBWF  x45,W
07B5A:  BTFSC  FD8.0
07B5C:  BRA    7B64
07B5E:  MOVLB  0
07B60:  GOTO   7C72
07B64:  MOVLB  0
07B66:  BTFSS  FD8.2
07B68:  GOTO   7B7E
07B6C:  MOVLB  2
07B6E:  MOVF   x44,W
07B70:  SUBWF  x86,W
07B72:  BTFSS  FD8.0
07B74:  BRA    7B7C
07B76:  MOVLB  0
07B78:  GOTO   7C72
07B7C:  MOVLB  0
....................    {
....................       int32 current_address = address + (packet_count * PACKET_SIZE);
07B7E:  MOVLB  2
07B80:  RLCF   x86,W
07B82:  MOVWF  02
07B84:  RLCF   x87,W
07B86:  MOVWF  03
07B88:  RLCF   02,F
07B8A:  RLCF   03,F
07B8C:  RLCF   02,F
07B8E:  RLCF   03,F
07B90:  RLCF   02,F
07B92:  RLCF   03,F
07B94:  RLCF   02,F
07B96:  RLCF   03,F
07B98:  RLCF   02,F
07B9A:  RLCF   03,F
07B9C:  MOVLW  C0
07B9E:  ANDWF  02,F
07BA0:  MOVF   02,W
07BA2:  ADDWF  x40,W
07BA4:  MOVWF  x88
07BA6:  MOVF   03,W
07BA8:  ADDWFC x41,W
07BAA:  MOVWF  x89
07BAC:  MOVLW  00
07BAE:  ADDWFC x42,W
07BB0:  MOVWF  x8A
07BB2:  MOVLW  00
07BB4:  ADDWFC x43,W
07BB6:  MOVWF  x8B
07BB8:  MOVLB  0
....................       read_data_bytes(smf, current_address, read_data, PACKET_SIZE);
07BBA:  MOVFF  119,B67
07BBE:  MOVFF  118,B66
07BC2:  MOVFF  117,B65
07BC6:  MOVFF  116,B64
07BCA:  MOVFF  28B,B6B
07BCE:  MOVFF  28A,B6A
07BD2:  MOVFF  289,B69
07BD6:  MOVFF  288,B68
07BDA:  MOVLW  02
07BDC:  MOVLB  B
07BDE:  MOVWF  x6D
07BE0:  MOVLW  46
07BE2:  MOVWF  x6C
07BE4:  CLRF   x71
07BE6:  CLRF   x70
07BE8:  CLRF   x6F
07BEA:  MOVLW  40
07BEC:  MOVWF  x6E
07BEE:  MOVLB  0
07BF0:  CALL   2C86
....................       for (int8 byte_count = 0; byte_count < PACKET_SIZE; byte_count++)
07BF4:  MOVLB  2
07BF6:  CLRF   x8C
07BF8:  MOVLB  0
07BFA:  MOVLB  2
07BFC:  MOVF   x8C,W
07BFE:  SUBLW  3F
07C00:  BTFSC  FD8.0
07C02:  BRA    7C0A
07C04:  MOVLB  0
07C06:  GOTO   7C48
07C0A:  MOVLB  0
....................       {
....................          printf("%02X ", read_data[byte_count]);
07C0C:  CLRF   03
07C0E:  MOVLB  2
07C10:  MOVF   x8C,W
07C12:  ADDLW  46
07C14:  MOVWF  FE9
07C16:  MOVLW  02
07C18:  ADDWFC 03,W
07C1A:  MOVWF  FEA
07C1C:  MOVFF  FEF,28D
07C20:  MOVFF  28D,A77
07C24:  MOVLW  37
07C26:  MOVLB  A
07C28:  MOVWF  x78
07C2A:  MOVLB  0
07C2C:  CALL   22D0
07C30:  MOVLW  20
07C32:  BTFSS  FA6.6
07C34:  GOTO   7C32
07C38:  MOVLB  E
07C3A:  MOVWF  xF9
07C3C:  MOVLB  0
07C3E:  MOVLB  2
07C40:  INCF   x8C,F
07C42:  MOVLB  0
07C44:  GOTO   7BFA
....................       }
....................       printf("\r\n");
07C48:  MOVLW  0D
07C4A:  BTFSS  FA6.6
07C4C:  GOTO   7C4A
07C50:  MOVLB  E
07C52:  MOVWF  xF9
07C54:  MOVLW  0A
07C56:  MOVLB  0
07C58:  BTFSS  FA6.6
07C5A:  GOTO   7C58
07C5E:  MOVLB  E
07C60:  MOVWF  xF9
07C62:  MOVLB  0
07C64:  MOVLB  2
07C66:  INCF   x86,F
07C68:  BTFSC  FD8.2
07C6A:  INCF   x87,F
07C6C:  MOVLB  0
07C6E:  GOTO   7B54
....................    }
.................... 
....................    printf("\r\nEnd Flash SMF Read Force\r\n");
07C72:  MOVLW  AC
07C74:  MOVWF  FF6
07C76:  MOVLW  1E
07C78:  MOVWF  FF7
07C7A:  MOVLW  00
07C7C:  MOVWF  FF8
07C7E:  CALL   2084
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
07C82:  MOVLB  2
07C84:  MOVF   x3E,W
07C86:  MOVWF  FE9
07C88:  MOVF   x3F,W
07C8A:  MOVWF  FEA
07C8C:  MOVFF  FEF,28D
07C90:  MOVFF  28D,295
07C94:  SETF   x96
07C96:  MOVLB  0
07C98:  CALL   4D60
07C9C:  GOTO   E70E (RETURN)
.................... }
.................... 
.................... void mode_smf_erase_force(int8 parameter[])
.................... {
....................    printf("Start SMF Erase All\r\n");
07CA0:  MOVLW  CA
07CA2:  MOVWF  FF6
07CA4:  MOVLW  1E
07CA6:  MOVWF  FF7
07CA8:  MOVLW  00
07CAA:  MOVWF  FF8
07CAC:  CALL   2084
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
07CB0:  MOVLB  2
07CB2:  MOVF   x3E,W
07CB4:  MOVWF  FE9
07CB6:  MOVF   x3F,W
07CB8:  MOVWF  FEA
07CBA:  MOVFF  FEF,240
....................    piclog_make(cmd, 0x00); // Log the command execution
07CBE:  MOVFF  240,295
07CC2:  CLRF   x96
07CC4:  MOVLB  0
07CC6:  CALL   4D60
....................    
.................... 
....................    
....................    for (int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_PICLOG_END_ADDRESS; address += SECTOR_64K_BYTE) {
07CCA:  MOVLW  06
07CCC:  MOVLB  2
07CCE:  MOVWF  x44
07CD0:  MOVLW  AA
07CD2:  MOVWF  x43
07CD4:  CLRF   x42
07CD6:  CLRF   x41
07CD8:  MOVLB  0
07CDA:  MOVLB  2
07CDC:  MOVF   x44,W
07CDE:  SUBLW  06
07CE0:  BTFSC  FD8.0
07CE2:  BRA    7CEA
07CE4:  MOVLB  0
07CE6:  GOTO   7D68
07CEA:  MOVLB  0
07CEC:  BTFSS  FD8.2
07CEE:  GOTO   7D34
07CF2:  MOVLB  2
07CF4:  MOVF   x43,W
07CF6:  SUBLW  AA
07CF8:  BTFSC  FD8.0
07CFA:  BRA    7D02
07CFC:  MOVLB  0
07CFE:  GOTO   7D68
07D02:  MOVLB  0
07D04:  BTFSS  FD8.2
07D06:  GOTO   7D34
07D0A:  MOVLB  2
07D0C:  MOVF   x42,W
07D0E:  SUBLW  1F
07D10:  BTFSC  FD8.0
07D12:  BRA    7D1A
07D14:  MOVLB  0
07D16:  GOTO   7D68
07D1A:  MOVLB  0
07D1C:  BTFSS  FD8.2
07D1E:  GOTO   7D34
07D22:  MOVLB  2
07D24:  MOVF   x41,W
07D26:  SUBLW  FE
07D28:  BTFSC  FD8.0
07D2A:  BRA    7D32
07D2C:  MOVLB  0
07D2E:  GOTO   7D68
07D32:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
07D34:  MOVFF  119,BA9
07D38:  MOVFF  118,BA8
07D3C:  MOVFF  117,BA7
07D40:  MOVFF  116,BA6
07D44:  MOVFF  244,BAD
07D48:  MOVFF  243,BAC
07D4C:  MOVFF  242,BAB
07D50:  MOVFF  241,BAA
07D54:  CALL   4160
07D58:  MOVLW  01
07D5A:  MOVLB  2
07D5C:  ADDWF  x43,F
07D5E:  MOVLW  00
07D60:  ADDWFC x44,F
07D62:  MOVLB  0
07D64:  GOTO   7CDA
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
07D68:  MOVFF  240,295
07D6C:  MOVLB  2
07D6E:  SETF   x96
07D70:  MOVLB  0
07D72:  CALL   4D60
....................    printf("End SMF Erase All\r\n");
07D76:  MOVLW  E0
07D78:  MOVWF  FF6
07D7A:  MOVLW  1E
07D7C:  MOVWF  FF7
07D7E:  MOVLW  00
07D80:  MOVWF  FF8
07D82:  CALL   2084
07D86:  GOTO   E71E (RETURN)
.................... }
.................... 
.................... void mode_smf_address_reset(int8 parameter[])
.................... {
....................    printf("Start SMF Reset\r\n");
*
07738:  MOVLW  F4
0773A:  MOVWF  FF6
0773C:  MOVLW  1E
0773E:  MOVWF  FF7
07740:  MOVLW  00
07742:  MOVWF  FF8
07744:  CALL   2084
....................    piclog_make(parameter[0], PICLOG_PARAM_START);
07748:  MOVLB  2
0774A:  MOVF   x3E,W
0774C:  MOVWF  FE9
0774E:  MOVF   x3F,W
07750:  MOVWF  FEA
07752:  MOVFF  FEF,284
07756:  MOVFF  284,295
0775A:  CLRF   x96
0775C:  MOVLB  0
0775E:  CALL   4D60
....................    int8 writedata[PACKET_SIZE] = {0x00}; 
07762:  MOVLB  2
07764:  CLRF   x40
07766:  CLRF   x41
07768:  CLRF   x42
0776A:  CLRF   x43
0776C:  CLRF   x44
0776E:  CLRF   x45
07770:  CLRF   x46
07772:  CLRF   x47
07774:  CLRF   x48
07776:  CLRF   x49
07778:  CLRF   x4A
0777A:  CLRF   x4B
0777C:  CLRF   x4C
0777E:  CLRF   x4D
07780:  CLRF   x4E
07782:  CLRF   x4F
07784:  CLRF   x50
07786:  CLRF   x51
07788:  CLRF   x52
0778A:  CLRF   x53
0778C:  CLRF   x54
0778E:  CLRF   x55
07790:  CLRF   x56
07792:  CLRF   x57
07794:  CLRF   x58
07796:  CLRF   x59
07798:  CLRF   x5A
0779A:  CLRF   x5B
0779C:  CLRF   x5C
0779E:  CLRF   x5D
077A0:  CLRF   x5E
077A2:  CLRF   x5F
077A4:  CLRF   x60
077A6:  CLRF   x61
077A8:  CLRF   x62
077AA:  CLRF   x63
077AC:  CLRF   x64
077AE:  CLRF   x65
077B0:  CLRF   x66
077B2:  CLRF   x67
077B4:  CLRF   x68
077B6:  CLRF   x69
077B8:  CLRF   x6A
077BA:  CLRF   x6B
077BC:  CLRF   x6C
077BE:  CLRF   x6D
077C0:  CLRF   x6E
077C2:  CLRF   x6F
077C4:  CLRF   x70
077C6:  CLRF   x71
077C8:  CLRF   x72
077CA:  CLRF   x73
077CC:  CLRF   x74
077CE:  CLRF   x75
077D0:  CLRF   x76
077D2:  CLRF   x77
077D4:  CLRF   x78
077D6:  CLRF   x79
077D8:  CLRF   x7A
077DA:  CLRF   x7B
077DC:  CLRF   x7C
077DE:  CLRF   x7D
077E0:  CLRF   x7E
077E2:  CLRF   x7F
....................    for (int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_IV2_DATA_END_ADDRESS; address += SECTOR_64K_BYTE) {
077E4:  MOVLW  06
077E6:  MOVWF  x83
077E8:  MOVLW  AA
077EA:  MOVWF  x82
077EC:  CLRF   x81
077EE:  CLRF   x80
077F0:  MOVLB  0
077F2:  MOVLB  2
077F4:  MOVF   x83,W
077F6:  SUBLW  07
077F8:  BTFSC  FD8.0
077FA:  BRA    7802
077FC:  MOVLB  0
077FE:  GOTO   7880
07802:  MOVLB  0
07804:  BTFSS  FD8.2
07806:  GOTO   784C
0780A:  MOVLB  2
0780C:  MOVF   x82,W
0780E:  SUBLW  48
07810:  BTFSC  FD8.0
07812:  BRA    781A
07814:  MOVLB  0
07816:  GOTO   7880
0781A:  MOVLB  0
0781C:  BTFSS  FD8.2
0781E:  GOTO   784C
07822:  MOVLB  2
07824:  MOVF   x81,W
07826:  SUBLW  3F
07828:  BTFSC  FD8.0
0782A:  BRA    7832
0782C:  MOVLB  0
0782E:  GOTO   7880
07832:  MOVLB  0
07834:  BTFSS  FD8.2
07836:  GOTO   784C
0783A:  MOVLB  2
0783C:  MOVF   x80,W
0783E:  SUBLW  FE
07840:  BTFSC  FD8.0
07842:  BRA    784A
07844:  MOVLB  0
07846:  GOTO   7880
0784A:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
0784C:  MOVFF  119,BA9
07850:  MOVFF  118,BA8
07854:  MOVFF  117,BA7
07858:  MOVFF  116,BA6
0785C:  MOVFF  283,BAD
07860:  MOVFF  282,BAC
07864:  MOVFF  281,BAB
07868:  MOVFF  280,BAA
0786C:  CALL   4160
07870:  MOVLW  01
07872:  MOVLB  2
07874:  ADDWF  x82,F
07876:  MOVLW  00
07878:  ADDWFC x83,F
0787A:  MOVLB  0
0787C:  GOTO   77F2
....................    }
....................    smf_data_table_init(); // Update the address area after writing
07880:  CALL   75B6
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
07884:  MOVLB  2
07886:  MOVF   x3E,W
07888:  MOVWF  FE9
0788A:  MOVF   x3F,W
0788C:  MOVWF  FEA
0788E:  MOVFF  FEF,284
07892:  MOVFF  284,295
07896:  SETF   x96
07898:  MOVLB  0
0789A:  CALL   4D60
....................    printf("End SMF Reset\r\n");
0789E:  MOVLW  06
078A0:  MOVWF  FF6
078A2:  MOVLW  1F
078A4:  MOVWF  FF7
078A6:  MOVLW  00
078A8:  MOVWF  FF8
078AA:  CALL   2084
078AE:  GOTO   E6FE (RETURN)
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
11730:  CLRF   FF8
11732:  BCF    FF1.2
11734:  BCF    F9F.0
11736:  BCF    FA9.5
11738:  BSF    FD0.7
1173A:  BSF    07.7
1173C:  MOVLB  E
1173E:  MOVLW  55
11740:  MOVWF  F7E
11742:  MOVLW  AA
11744:  MOVWF  F7E
11746:  BCF    F66.6
11748:  MOVLW  F9
1174A:  MOVWF  x2C
1174C:  MOVLW  F6
1174E:  MOVWF  x2D
11750:  MOVLW  0F
11752:  MOVWF  x2E
11754:  MOVLW  40
11756:  MOVWF  x12
11758:  MOVLW  30
1175A:  MOVWF  x13
1175C:  MOVLW  20
1175E:  MOVWF  x22
11760:  MOVLW  30
11762:  MOVWF  x24
11764:  MOVLW  55
11766:  MOVWF  F7E
11768:  MOVLW  AA
1176A:  MOVWF  F7E
1176C:  BSF    F66.6
1176E:  CLRF   F9B
11770:  CLRF   F64
11772:  CLRF   F65
11774:  CLRF   F66
11776:  MOVLW  02
11778:  MOVWF  FD3
1177A:  CLRF   1B
1177C:  MOVLB  F
1177E:  BSF    x2D.3
11780:  MOVLW  A0
11782:  MOVWF  x2B
11784:  MOVLW  01
11786:  MOVWF  x2C
11788:  MOVLW  A6
1178A:  MOVWF  x2E
1178C:  MOVLW  90
1178E:  MOVWF  x2F
11790:  MOVLB  E
11792:  BSF    xFD.3
11794:  MOVLW  A0
11796:  MOVWF  xFB
11798:  MOVLW  01
1179A:  MOVWF  xFC
1179C:  MOVLW  A6
1179E:  MOVWF  xFE
117A0:  MOVLW  90
117A2:  MOVWF  xFF
117A4:  BSF    F92.1
117A6:  BCF    F92.0
117A8:  BCF    F92.3
117AA:  BCF    F89.3
117AC:  BSF    F96.0
117AE:  BCF    F96.6
117B0:  BCF    F96.1
117B2:  BCF    F8D.1
117B4:  BSF    F93.4
117B6:  BCF    F93.5
117B8:  BCF    F93.2
117BA:  BSF    F8A.2
117BC:  BCF    F95.4
117BE:  BCF    F95.5
117C0:  BSF    F8C.5
117C2:  CLRF   1F
117C4:  CLRF   1E
117C6:  CLRF   1D
117C8:  CLRF   1C
117CA:  CLRF   23
117CC:  CLRF   22
117CE:  CLRF   21
117D0:  CLRF   20
117D2:  CLRF   27
117D4:  CLRF   26
117D6:  CLRF   25
117D8:  CLRF   24
117DA:  CLRF   29
117DC:  CLRF   28
117DE:  CLRF   4A
117E0:  BCF    4B.0
117E2:  MOVLW  1E
117E4:  MOVLB  1
117E6:  MOVWF  x88
117E8:  CLRF   x8B
117EA:  CLRF   x8A
117EC:  CLRF   x8F
117EE:  CLRF   x8E
117F0:  CLRF   x8D
117F2:  CLRF   x8C
117F4:  CLRF   x91
117F6:  CLRF   x90
117F8:  MOVLW  01
117FA:  MOVWF  x23
117FC:  MOVLW  D2
117FE:  MOVWF  x22
11800:  MOVLW  01
11802:  MOVWF  x25
11804:  MOVLW  DD
11806:  MOVWF  x24
11808:  MOVLW  01
1180A:  MOVWF  x27
1180C:  MOVLW  E8
1180E:  MOVWF  x26
11810:  MOVLW  01
11812:  MOVWF  x29
11814:  MOVLW  F3
11816:  MOVWF  x28
11818:  MOVLW  01
1181A:  MOVWF  x2B
1181C:  MOVLW  FE
1181E:  MOVWF  x2A
11820:  MOVLW  02
11822:  MOVWF  x2D
11824:  MOVLW  09
11826:  MOVWF  x2C
11828:  MOVLW  02
1182A:  MOVWF  x2F
1182C:  MOVLW  14
1182E:  MOVWF  x2E
11830:  MOVLB  E
11832:  CLRF   xD9
11834:  CLRF   xDA
11836:  CLRF   xCE
11838:  CLRF   xCF
1183A:  CLRF   xD0
1183C:  CLRF   xD1
1183E:  CLRF   xD2
11840:  CLRF   xD3
11842:  CLRF   xD4
11844:  CLRF   xD5
11846:  CLRF   x45
11848:  CLRF   x46
1184A:  CLRF   x47
1184C:  BCF    x8D.7
1184E:  BCF    x8D.6
11850:  BCF    x8D.5
11852:  MOVLB  F
11854:  CLRF   x53
11856:  CLRF   x38
11858:  CLRF   x37
1185A:  MOVLB  0
1185C:  CLRF   2A
1185E:  CLRF   2B
11860:  CLRF   2C
11862:  CLRF   2D
11864:  CLRF   2E
11866:  CLRF   2F
11868:  CLRF   30
1186A:  CLRF   31
1186C:  CLRF   32
1186E:  CLRF   33
11870:  CLRF   34
11872:  CLRF   35
11874:  CLRF   36
11876:  CLRF   37
11878:  CLRF   38
1187A:  CLRF   39
1187C:  CLRF   3A
1187E:  CLRF   3B
11880:  CLRF   3C
11882:  CLRF   3D
11884:  CLRF   3E
11886:  CLRF   3F
11888:  CLRF   40
1188A:  CLRF   41
1188C:  CLRF   42
1188E:  CLRF   43
11890:  CLRF   44
11892:  CLRF   45
11894:  CLRF   46
11896:  CLRF   47
11898:  CLRF   48
1189A:  CLRF   49
1189C:  MOVLW  03
1189E:  MOVWF  4C
118A0:  CLRF   4D
118A2:  CLRF   4E
118A4:  CLRF   4F
118A6:  CLRF   50
118A8:  CLRF   51
118AA:  CLRF   52
118AC:  CLRF   53
118AE:  CLRF   54
118B0:  CLRF   55
118B2:  CLRF   56
118B4:  CLRF   57
118B6:  CLRF   58
118B8:  CLRF   59
118BA:  CLRF   5A
118BC:  CLRF   5B
118BE:  CLRF   5C
118C0:  CLRF   5D
118C2:  CLRF   5E
118C4:  CLRF   5F
118C6:  CLRF   x60
118C8:  CLRF   x61
118CA:  CLRF   x62
118CC:  CLRF   x63
118CE:  CLRF   x64
118D0:  CLRF   x65
118D2:  CLRF   x66
118D4:  CLRF   x67
118D6:  CLRF   x68
118D8:  CLRF   x69
118DA:  CLRF   x6A
118DC:  CLRF   x6B
118DE:  CLRF   x6C
118E0:  CLRF   x6D
118E2:  CLRF   x6E
118E4:  CLRF   x6F
118E6:  CLRF   x70
118E8:  CLRF   x71
118EA:  CLRF   x72
118EC:  CLRF   x73
118EE:  CLRF   x74
118F0:  CLRF   x75
118F2:  CLRF   x76
118F4:  CLRF   x77
118F6:  CLRF   x78
118F8:  CLRF   x79
118FA:  CLRF   x7A
118FC:  CLRF   x7B
118FE:  CLRF   x7C
11900:  CLRF   x7D
11902:  CLRF   x7E
11904:  CLRF   x7F
11906:  CLRF   x80
11908:  CLRF   x81
1190A:  CLRF   x82
1190C:  CLRF   x83
1190E:  CLRF   x84
11910:  CLRF   x85
11912:  CLRF   x86
11914:  CLRF   x87
11916:  CLRF   x88
11918:  CLRF   x89
1191A:  CLRF   x8A
1191C:  CLRF   x8B
1191E:  CLRF   x8C
11920:  CLRF   x8D
11922:  CLRF   x8E
11924:  CLRF   x8F
11926:  CLRF   x90
11928:  CLRF   x91
1192A:  CLRF   x92
1192C:  CLRF   x93
1192E:  CLRF   x94
11930:  CLRF   x95
11932:  CLRF   x96
11934:  CLRF   x97
11936:  CLRF   x98
11938:  CLRF   x99
1193A:  CLRF   x9A
1193C:  CLRF   x9B
1193E:  CLRF   x9C
11940:  CLRF   x9D
11942:  CLRF   x9E
11944:  CLRF   x9F
11946:  CLRF   xA0
11948:  CLRF   xA1
1194A:  CLRF   xA2
1194C:  CLRF   xA3
1194E:  CLRF   xA4
11950:  CLRF   xA5
11952:  CLRF   xA6
11954:  CLRF   xA7
11956:  CLRF   xA8
11958:  CLRF   xA9
1195A:  CLRF   xAA
1195C:  CLRF   xAB
1195E:  CLRF   xAC
11960:  CLRF   xAD
11962:  CLRF   xAE
11964:  CLRF   xAF
11966:  CLRF   xB0
11968:  CLRF   xB1
1196A:  CLRF   xB2
1196C:  CLRF   xB3
1196E:  CLRF   xB4
11970:  CLRF   xB5
11972:  CLRF   xB6
11974:  CLRF   xB7
11976:  CLRF   xB8
11978:  CLRF   xB9
1197A:  CLRF   xBA
1197C:  CLRF   xBB
1197E:  CLRF   xBC
11980:  CLRF   xBD
11982:  CLRF   xBE
11984:  CLRF   xBF
11986:  CLRF   xC0
11988:  CLRF   xC1
1198A:  CLRF   xC2
1198C:  CLRF   xC3
1198E:  CLRF   xC4
11990:  CLRF   xC5
11992:  CLRF   xC6
11994:  CLRF   xC7
11996:  CLRF   xC8
11998:  CLRF   xC9
1199A:  CLRF   xCA
1199C:  CLRF   xCB
1199E:  CLRF   xCC
119A0:  CLRF   xCD
119A2:  CLRF   xCE
119A4:  CLRF   xCF
119A6:  CLRF   xD0
119A8:  CLRF   xD1
119AA:  CLRF   xD2
119AC:  CLRF   xD3
119AE:  CLRF   xD4
119B0:  CLRF   xD5
119B2:  CLRF   xD6
119B4:  CLRF   xD7
119B6:  CLRF   xD8
119B8:  CLRF   xD9
119BA:  CLRF   xDA
119BC:  CLRF   xDB
119BE:  CLRF   xDC
119C0:  CLRF   xDD
119C2:  CLRF   xDE
119C4:  CLRF   xDF
119C6:  CLRF   xE0
119C8:  CLRF   xE1
119CA:  CLRF   xE2
119CC:  CLRF   xE3
119CE:  CLRF   xE4
119D0:  CLRF   xE5
119D2:  CLRF   xE6
119D4:  CLRF   xE7
119D6:  CLRF   xE8
119D8:  CLRF   xE9
119DA:  CLRF   xEA
119DC:  CLRF   xEB
119DE:  CLRF   xEC
119E0:  CLRF   xED
119E2:  CLRF   xEE
119E4:  CLRF   xEF
119E6:  CLRF   xF0
119E8:  CLRF   xF1
119EA:  CLRF   xF2
119EC:  CLRF   xF3
119EE:  CLRF   xF4
119F0:  CLRF   xF5
119F2:  CLRF   xF6
119F4:  CLRF   xF7
119F6:  CLRF   xF8
119F8:  CLRF   xF9
119FA:  CLRF   xFA
119FC:  CLRF   xFB
119FE:  CLRF   xFC
11A00:  CLRF   xFD
11A02:  CLRF   xFE
11A04:  CLRF   xFF
11A06:  MOVLB  1
11A08:  CLRF   x00
11A0A:  CLRF   x01
11A0C:  CLRF   x02
11A0E:  CLRF   x03
11A10:  CLRF   x04
11A12:  CLRF   x05
11A14:  CLRF   x06
11A16:  CLRF   x07
11A18:  CLRF   x08
11A1A:  CLRF   x09
11A1C:  CLRF   x0A
11A1E:  CLRF   x0B
11A20:  CLRF   x0C
11A22:  CLRF   x0D
11A24:  CLRF   x0E
11A26:  CLRF   x0F
11A28:  CLRF   x10
11A2A:  CLRF   x11
11A2C:  CLRF   x12
11A2E:  CLRF   x13
11A30:  MOVLW  30
11A32:  MOVWF  x14
11A34:  MOVLW  7C
11A36:  MOVWF  x15
11A38:  MOVLW  01
11A3A:  MOVWF  x16
11A3C:  MOVLW  01
11A3E:  MOVWF  x17
11A40:  MOVLW  02
11A42:  MOVWF  x18
11A44:  MOVLW  7C
11A46:  MOVWF  x19
11A48:  CLRF   x1A
11A4A:  MOVLW  09
11A4C:  MOVWF  x1B
11A4E:  MOVLW  01
11A50:  MOVWF  x1C
11A52:  CLRF   x1D
11A54:  MOVLW  02
11A56:  MOVWF  x1E
11A58:  MOVLW  01
11A5A:  MOVWF  x1F
11A5C:  MOVLW  03
11A5E:  MOVWF  x20
11A60:  MOVLW  04
11A62:  MOVWF  x21
11A64:  CLRF   x92
11A66:  CLRF   x93
11A68:  CLRF   x94
11A6A:  CLRF   x95
11A6C:  CLRF   x96
11A6E:  CLRF   x97
11A70:  CLRF   x98
11A72:  CLRF   x99
11A74:  CLRF   x9A
11A76:  CLRF   x9B
11A78:  CLRF   x9C
11A7A:  CLRF   x9D
11A7C:  CLRF   x9E
11A7E:  CLRF   x9F
11A80:  CLRF   xA0
11A82:  CLRF   xA1
11A84:  CLRF   xA2
11A86:  CLRF   xA3
11A88:  CLRF   xA4
11A8A:  CLRF   xA5
11A8C:  CLRF   xA6
11A8E:  CLRF   xA7
11A90:  CLRF   xA8
11A92:  CLRF   xA9
11A94:  CLRF   xAA
11A96:  CLRF   xAB
11A98:  CLRF   xAC
11A9A:  CLRF   xAD
11A9C:  CLRF   xAE
11A9E:  CLRF   xAF
11AA0:  CLRF   xB0
11AA2:  CLRF   xB1
11AA4:  CLRF   xB2
11AA6:  CLRF   xB3
11AA8:  CLRF   xB4
11AAA:  CLRF   xB5
11AAC:  CLRF   xB6
11AAE:  CLRF   xB7
11AB0:  CLRF   xB8
11AB2:  CLRF   xB9
11AB4:  CLRF   xBA
11AB6:  CLRF   xBB
11AB8:  CLRF   xBC
11ABA:  CLRF   xBD
11ABC:  CLRF   xBE
11ABE:  CLRF   xBF
11AC0:  CLRF   xC0
11AC2:  CLRF   xC1
11AC4:  CLRF   xC2
11AC6:  CLRF   xC3
11AC8:  CLRF   xC4
11ACA:  CLRF   xC5
11ACC:  CLRF   xC6
11ACE:  CLRF   xC7
11AD0:  CLRF   xC8
11AD2:  CLRF   xC9
11AD4:  CLRF   xCA
11AD6:  CLRF   xCB
11AD8:  CLRF   xCC
11ADA:  CLRF   xCD
11ADC:  CLRF   xCE
11ADE:  CLRF   xCF
11AE0:  CLRF   xD0
11AE2:  CLRF   xD1
11AE4:  CLRF   xD2
11AE6:  CLRF   xD3
11AE8:  CLRF   xD4
11AEA:  CLRF   xD5
11AEC:  CLRF   xD6
11AEE:  CLRF   xD7
11AF0:  CLRF   xD8
11AF2:  CLRF   xD9
11AF4:  CLRF   xDA
11AF6:  CLRF   xDB
11AF8:  CLRF   xDC
11AFA:  MOVLW  01
11AFC:  MOVWF  xDD
11AFE:  CLRF   xDE
11B00:  CLRF   xDF
11B02:  CLRF   xE0
11B04:  CLRF   xE1
11B06:  CLRF   xE2
11B08:  CLRF   xE3
11B0A:  CLRF   xE4
11B0C:  CLRF   xE5
11B0E:  CLRF   xE6
11B10:  CLRF   xE7
11B12:  MOVLW  02
11B14:  MOVWF  xE8
11B16:  CLRF   xE9
11B18:  CLRF   xEA
11B1A:  CLRF   xEB
11B1C:  CLRF   xEC
11B1E:  CLRF   xED
11B20:  CLRF   xEE
11B22:  CLRF   xEF
11B24:  CLRF   xF0
11B26:  CLRF   xF1
11B28:  CLRF   xF2
11B2A:  MOVLW  03
11B2C:  MOVWF  xF3
11B2E:  CLRF   xF4
11B30:  CLRF   xF5
11B32:  CLRF   xF6
11B34:  CLRF   xF7
11B36:  CLRF   xF8
11B38:  CLRF   xF9
11B3A:  CLRF   xFA
11B3C:  CLRF   xFB
11B3E:  CLRF   xFC
11B40:  CLRF   xFD
11B42:  MOVLW  04
11B44:  MOVWF  xFE
11B46:  CLRF   xFF
11B48:  MOVLB  2
11B4A:  CLRF   x00
11B4C:  CLRF   x01
11B4E:  CLRF   x02
11B50:  CLRF   x03
11B52:  CLRF   x04
11B54:  CLRF   x05
11B56:  CLRF   x06
11B58:  CLRF   x07
11B5A:  CLRF   x08
11B5C:  MOVLW  05
11B5E:  MOVWF  x09
11B60:  CLRF   x0A
11B62:  CLRF   x0B
11B64:  CLRF   x0C
11B66:  CLRF   x0D
11B68:  CLRF   x0E
11B6A:  CLRF   x0F
11B6C:  CLRF   x10
11B6E:  CLRF   x11
11B70:  CLRF   x12
11B72:  CLRF   x13
11B74:  MOVLW  06
11B76:  MOVWF  x14
11B78:  CLRF   x15
11B7A:  CLRF   x16
11B7C:  CLRF   x17
11B7E:  CLRF   x18
11B80:  CLRF   x19
11B82:  CLRF   x1A
11B84:  CLRF   x1B
11B86:  CLRF   x1C
11B88:  CLRF   x1D
11B8A:  CLRF   x1E
11B8C:  MOVLW  01
11B8E:  MOVLB  1
11B90:  MOVWF  x77
11B92:  MOVLW  30
11B94:  MOVWF  x76
11B96:  MOVLW  01
11B98:  MOVWF  x79
11B9A:  MOVLW  3A
11B9C:  MOVWF  x78
11B9E:  MOVLW  01
11BA0:  MOVWF  x7B
11BA2:  MOVLW  44
11BA4:  MOVWF  x7A
11BA6:  MOVLW  01
11BA8:  MOVWF  x7D
11BAA:  MOVLW  4E
11BAC:  MOVWF  x7C
11BAE:  MOVLW  01
11BB0:  MOVWF  x7F
11BB2:  MOVLW  58
11BB4:  MOVWF  x7E
11BB6:  MOVLW  01
11BB8:  MOVWF  x81
11BBA:  MOVLW  62
11BBC:  MOVWF  x80
11BBE:  MOVLW  01
11BC0:  MOVWF  x83
11BC2:  MOVLW  6C
11BC4:  MOVWF  x82
11BC6:  MOVLB  0
.................... { 
....................    delay_ms(100); // wait for power stable
11BC8:  MOVLW  64
11BCA:  MOVLB  B
11BCC:  MOVWF  xC0
11BCE:  MOVLB  0
11BD0:  CALL   2056
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
11BD4:  MOVLW  16
11BD6:  MOVWF  FF6
11BD8:  MOVLW  1F
11BDA:  MOVWF  FF7
11BDC:  MOVLW  00
11BDE:  MOVWF  FF8
11BE0:  CALL   2084
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM6.\r\n");
11BE4:  MOVLW  5C
11BE6:  MOVWF  FF6
11BE8:  MOVLW  1F
11BEA:  MOVWF  FF7
11BEC:  MOVLW  00
11BEE:  MOVWF  FF8
11BF0:  CALL   2084
....................    fprintf(PC,"Last updated on %s %s, by Inoue.\r\n\r\n", __DATE__, __TIME__);
11BF4:  MOVLW  8A
11BF6:  MOVWF  FF6
11BF8:  MOVLW  1F
11BFA:  MOVWF  FF7
11BFC:  MOVLW  00
11BFE:  MOVWF  FF8
11C00:  MOVLW  10
11C02:  MOVLB  3
11C04:  MOVWF  x1E
11C06:  MOVLB  0
11C08:  CALL   20BA
11C0C:  MOVLW  B0
11C0E:  MOVWF  FF6
11C10:  MOVLW  1F
11C12:  MOVWF  FF7
11C14:  MOVLW  00
11C16:  MOVWF  FF8
11C18:  CALL   2084
11C1C:  MOVLW  20
11C1E:  BTFSS  FA6.6
11C20:  GOTO   11C1E
11C24:  MOVLB  E
11C26:  MOVWF  xF9
11C28:  MOVLW  BA
11C2A:  MOVWF  FF6
11C2C:  MOVLW  1F
11C2E:  MOVWF  FF7
11C30:  MOVLW  00
11C32:  MOVWF  FF8
11C34:  MOVLB  0
11C36:  CALL   2084
11C3A:  MOVLW  9F
11C3C:  MOVWF  FF6
11C3E:  MOVLW  1F
11C40:  MOVWF  FF7
11C42:  MOVLW  00
11C44:  MOVWF  FF8
11C46:  MOVLW  0F
11C48:  MOVLB  3
11C4A:  MOVWF  x1E
11C4C:  MOVLB  0
11C4E:  CALL   20BA
....................    
....................    // io_init();
....................    setup_uart_to_boss();
11C52:  GOTO   20F4
....................    timer_init();
11C56:  GOTO   211E
....................    ad7490_init();
11C5A:  GOTO   234C
....................    mcp4901_init();
11C5E:  GOTO   2686
....................    misf_init();
11C62:  CALL   3710
....................    
....................    piclog_make(PICLOG_STARTUP,0x00);
11C66:  MOVLB  2
11C68:  CLRF   x95
11C6A:  CLRF   x96
11C6C:  MOVLB  0
11C6E:  CALL   4D60
.................... 
....................    int1 is_finished = FALSE;
11C72:  MOVLB  2
11C74:  BCF    x1F.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
11C76:  MOVLW  C4
11C78:  MOVWF  FF6
11C7A:  MOVLW  1F
11C7C:  MOVWF  FF7
11C7E:  MOVLW  00
11C80:  MOVWF  FF8
11C82:  MOVLB  0
11C84:  CALL   2084
....................    
....................    //enable_negative_power();
....................    connect_port1();
11C88:  CALL   4E84
....................    connect_port2();
11C8C:  CALL   4E8C
....................    mcp4901_1_write(0);
11C90:  MOVLB  A
11C92:  CLRF   x81
11C94:  CLRF   x80
11C96:  MOVLB  0
11C98:  CALL   2602
....................    mcp4901_2_write(0);
11C9C:  MOVLB  A
11C9E:  CLRF   x81
11CA0:  CLRF   x80
11CA2:  MOVLB  0
11CA4:  CALL   2644
....................    connect_negative_power1(TRUE); // CIGS1 Negative Power ON
11CA8:  MOVLW  01
11CAA:  MOVLB  2
11CAC:  MOVWF  x2C
11CAE:  MOVLB  0
11CB0:  GOTO   4E94
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
11CB4:  MOVLW  EA
11CB6:  MOVWF  FF6
11CB8:  MOVLW  1F
11CBA:  MOVWF  FF7
11CBC:  MOVLW  00
11CBE:  MOVWF  FF8
11CC0:  CALL   2084
.................... 
....................    //Start loop
....................    while(TRUE)
....................    {
....................       if(boss_receive_buffer_size > 0)
11CC4:  MOVF   4A,F
11CC6:  BTFSC  FD8.2
11CC8:  GOTO   11D6A
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
11CCC:  MOVLB  2
11CCE:  CLRF   x33
11CD0:  MOVLW  2A
11CD2:  MOVWF  x32
11CD4:  MOVFF  4A,234
11CD8:  MOVLB  0
11CDA:  GOTO   51D0
11CDE:  MOVFF  02,03
11CE2:  MOVF   01,W
11CE4:  MOVWF  FE1
11CE6:  MOVFF  03,FE2
11CEA:  MOVLW  02
11CEC:  MOVWF  FEA
11CEE:  MOVLW  20
11CF0:  MOVWF  FE9
11CF2:  MOVLW  0C
11CF4:  MOVWF  01
11CF6:  MOVFF  FE6,FEE
11CFA:  DECFSZ 01,F
11CFC:  GOTO   11CF6
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
11D00:  MOVLB  2
11D02:  CLRF   x2D
11D04:  MOVLW  2A
11D06:  MOVWF  x2C
11D08:  CLRF   x2F
11D0A:  MOVLW  4A
11D0C:  MOVWF  x2E
11D0E:  MOVLB  0
11D10:  GOTO   53D2
....................          
....................          if(recieve_cmd.is_exist){
11D14:  MOVLB  2
11D16:  BTFSC  x22.0
11D18:  BRA    11D20
11D1A:  MOVLB  0
11D1C:  GOTO   11D6A
11D20:  MOVLB  0
....................             is_finished = execute_command(&recieve_cmd); // FIX: 戻り値を保持
11D22:  MOVLW  02
11D24:  MOVLB  2
11D26:  MOVWF  x2D
11D28:  MOVLW  20
11D2A:  MOVWF  x2C
11D2C:  MOVLB  0
11D2E:  GOTO   FE3E
11D32:  MOVLB  2
11D34:  BCF    x1F.0
11D36:  BTFSC  01.0
11D38:  BSF    x1F.0
....................             if (is_finished == TRUE)
11D3A:  BTFSC  x1F.0
11D3C:  BRA    11D44
11D3E:  MOVLB  0
11D40:  GOTO   11D5A
11D44:  MOVLB  0
....................             {
....................                fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\n");
11D46:  MOVLW  08
11D48:  MOVWF  FF6
11D4A:  MOVLW  20
11D4C:  MOVWF  FF7
11D4E:  MOVLW  00
11D50:  MOVWF  FF8
11D52:  CALL   2084
....................             }else{
11D56:  GOTO   11D6A
....................                fprintf(PC,"\r\nwaiting for BOSS PIC command");
11D5A:  MOVLW  2A
11D5C:  MOVWF  FF6
11D5E:  MOVLW  20
11D60:  MOVWF  FF7
11D62:  MOVLW  00
11D64:  MOVWF  FF8
11D66:  CALL   2084
....................             }
....................          }
....................       }
....................          
....................       delay_ms(500);
11D6A:  MOVLW  02
11D6C:  MOVLB  2
11D6E:  MOVWF  x2C
11D70:  MOVLB  0
11D72:  MOVLW  FA
11D74:  MOVLB  B
11D76:  MOVWF  xC0
11D78:  MOVLB  0
11D7A:  CALL   2056
11D7E:  MOVLB  2
11D80:  DECFSZ x2C,F
11D82:  BRA    11D88
11D84:  BRA    11D8C
11D86:  MOVLB  0
11D88:  MOVLB  0
11D8A:  BRA    11D72
....................       fprintf(PC, ".");
11D8C:  MOVLW  2E
11D8E:  MOVLB  0
11D90:  BTFSS  FA6.6
11D92:  GOTO   11D90
11D96:  MOVLB  E
11D98:  MOVWF  xF9
11D9A:  MOVLB  0
11D9C:  GOTO   11CC4
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
11DA0:  MOVLW  4A
11DA2:  MOVWF  FF6
11DA4:  MOVLW  20
11DA6:  MOVWF  FF7
11DA8:  MOVLW  00
11DAA:  MOVWF  FF8
11DAC:  CALL   2084
....................    
.................... }
.................... // End of files
11DB0:  SLEEP 

Configuration Fuses:
   Word  1: F6A0   STVREN NOXINST NODEBUG NOBROWNOUT BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS NODSWDT DSWDTOSC_INT
