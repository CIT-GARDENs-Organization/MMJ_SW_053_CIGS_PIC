CCS PCH C Compiler, Version 5.104, 57077               28-10-25 20:30

               Filename:   c:\Users\shoin\source\repos\MMJ_SW_053_CIGS_PIC\cigs\build\mmj_cigs_main.lst

               ROM used:   77400 bytes (59%)
                           Largest free fragment is 53624
               RAM used:   410 (11%) at main() level
                           2862 (80%) worst case
               Stack used: 9 locations (8 in main + 1 for interrupts)
               Stack size: 31

*
00000:  NOP   
00002:  GOTO   12938
*
00008:  NOP   
0000A:  NOP   
0000C:  NOP   
0000E:  NOP   
00010:  NOP   
00012:  NOP   
00014:  NOP   
00016:  NOP   
00018:  MOVWF  04
0001A:  MOVFF  FD8,05
0001E:  MOVFF  FE0,06
00022:  MOVLB  0
00024:  MOVFF  FE9,0C
00028:  MOVFF  FEA,07
0002C:  MOVFF  FE1,08
00030:  MOVFF  FE2,09
00034:  MOVFF  FD9,0A
00038:  MOVFF  FDA,0B
0003C:  MOVFF  FF3,12
00040:  MOVFF  FF4,13
00044:  MOVFF  FFA,14
00048:  MOVFF  FF5,15
0004C:  MOVFF  FF6,16
00050:  MOVFF  FF7,17
00054:  MOVFF  FF8,18
00058:  MOVFF  FFB,19
0005C:  MOVFF  00,0E
00060:  MOVFF  01,0F
00064:  MOVFF  02,10
00068:  MOVFF  03,11
0006C:  BTFSS  FF2.5
0006E:  GOTO   0078
00072:  BTFSC  FF2.2
00074:  GOTO   014E
00078:  BTFSS  F9D.0
0007A:  GOTO   0084
0007E:  BTFSC  F9E.0
00080:  GOTO   01D6
00084:  BTFSS  F61.5
00086:  GOTO   0090
0008A:  BTFSC  FA6.5
0008C:  GOTO   0240
00090:  MOVFF  0E,00
00094:  MOVFF  0F,01
00098:  MOVFF  10,02
0009C:  MOVFF  11,03
000A0:  MOVFF  0C,FE9
000A4:  MOVFF  07,FEA
000A8:  BSF    07.7
000AA:  MOVFF  08,FE1
000AE:  MOVFF  09,FE2
000B2:  MOVFF  0A,FD9
000B6:  MOVFF  0B,FDA
000BA:  MOVFF  12,FF3
000BE:  MOVFF  13,FF4
000C2:  MOVFF  14,FFA
000C6:  MOVFF  15,FF5
000CA:  MOVFF  16,FF6
000CE:  MOVFF  17,FF7
000D2:  MOVFF  18,FF8
000D6:  MOVFF  19,FFB
000DA:  MOVF   04,W
000DC:  MOVFF  06,FE0
000E0:  MOVFF  05,FD8
000E4:  RETFIE 0
.................... #include "mmj_cigs_main.h"  // ルート直下のヘッダー
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... #opt 0 // 0 = no optimization
.................... 
.................... //==============================================================================
.................... // CCS C 最適化構造: ヘッダー分散 + .cファイル統合
.................... //==============================================================================
.................... 
.................... // レベル1: システム設定
.................... #include "hal/cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
000E6:  CLRF   FF7
000E8:  ADDLW  FA
000EA:  MOVWF  FF6
000EC:  MOVLW  00
000EE:  ADDWFC FF7,F
000F0:  MOVLW  00
000F2:  MOVWF  FF8
000F4:  TBLRD*+
000F6:  MOVF   FF5,W
000F8:  RETURN 0
000FA:  DATA 00,00
000FC:  DATA 00,00
000FE:  DATA FF,0F
00100:  DATA 00,00
00102:  DATA 00,10
00104:  DATA 00,00
00106:  DATA 00,00
00108:  DATA 01,00
0010A:  DATA FF,0F
0010C:  DATA 14,00
0010E:  DATA 00,00
00110:  DATA 14,00
00112:  DATA 00,10
00114:  DATA 14,00
00116:  DATA FF,0F
00118:  DATA 28,00
0011A:  DATA 00,00
0011C:  DATA 14,00
0011E:  DATA 00,10
00120:  DATA 28,00
00122:  DATA FF,0F
00124:  DATA 32,00
00126:  DATA 00,00
00128:  DATA 0A,00
0012A:  DATA 00,10
0012C:  DATA 32,00
0012E:  DATA FF,0F
00130:  DATA 72,00
00132:  DATA 00,00
00134:  DATA 40,00
00136:  DATA 00,10
00138:  DATA 72,00
0013A:  DATA FF,0F
0013C:  DATA 7C,00
0013E:  DATA 00,00
00140:  DATA 0A,00
00142:  DATA 00,10
00144:  DATA 7C,00
00146:  DATA FF,0F
00148:  DATA BC,00
0014A:  DATA 00,00
0014C:  DATA 40,00
*
001F8:  DATA 54,69
001FA:  DATA 6D,65
001FC:  DATA 72,20
001FE:  DATA 49,6E
00200:  DATA 69,74
00202:  DATA 69,61
00204:  DATA 6C,69
00206:  DATA 7A,65
00208:  DATA 0D,0A
0020A:  DATA 00,00
0020C:  DATA 09,43
0020E:  DATA 6F,6D
00210:  DATA 70,6C
00212:  DATA 65,74
00214:  DATA 65,0D
00216:  DATA 0A,00
*
00288:  DATA 55,41
0028A:  DATA 52,54
0028C:  DATA 20,49
0028E:  DATA 6E,69
00290:  DATA 74,69
00292:  DATA 61,6C
00294:  DATA 69,7A
00296:  DATA 65,0D
00298:  DATA 0A,00
0029A:  DATA 09,43
0029C:  DATA 6F,6D
0029E:  DATA 70,6C
002A0:  DATA 65,74
002A2:  DATA 65,0D
002A4:  DATA 0A,00
002A6:  DATA 41,44
002A8:  DATA 37,34
002AA:  DATA 39,30
002AC:  DATA 20,49
002AE:  DATA 6E,69
002B0:  DATA 74,69
002B2:  DATA 61,6C
002B4:  DATA 69,7A
002B6:  DATA 65,0D
002B8:  DATA 0A,00
002BA:  DATA 09,43
002BC:  DATA 6F,6E
002BE:  DATA 6E,65
002C0:  DATA 63,74
002C2:  DATA 20,65
002C4:  DATA 72,72
002C6:  DATA 6F,72
002C8:  DATA 21,0D
002CA:  DATA 0A,00
002CC:  DATA 09,43
002CE:  DATA 6F,6E
002D0:  DATA 6E,65
002D2:  DATA 63,74
002D4:  DATA 20,73
002D6:  DATA 75,63
002D8:  DATA 63,65
002DA:  DATA 73,73
002DC:  DATA 66,75
002DE:  DATA 6C,0D
002E0:  DATA 0A,00
002E2:  DATA 09,43
002E4:  DATA 6F,6D
002E6:  DATA 70,6C
002E8:  DATA 65,74
002EA:  DATA 65,0D
002EC:  DATA 0A,00
002EE:  DATA 4D,43
002F0:  DATA 50,34
002F2:  DATA 39,30
002F4:  DATA 31,20
002F6:  DATA 49,6E
002F8:  DATA 69,74
002FA:  DATA 69,61
002FC:  DATA 6C,69
002FE:  DATA 7A,65
00300:  DATA 0D,0A
00302:  DATA 00,00
00304:  DATA 09,5B
00306:  DATA 44,41
00308:  DATA 43,20
0030A:  DATA 50,6F
0030C:  DATA 72,74
0030E:  DATA 20,31
00310:  DATA 5D,20
00312:  DATA 43,6F
00314:  DATA 6E,6E
00316:  DATA 65,63
00318:  DATA 74,20
0031A:  DATA 65,72
0031C:  DATA 72,6F
0031E:  DATA 72,21
00320:  DATA 0D,0A
00322:  DATA 00,00
00324:  DATA 09,5B
00326:  DATA 44,41
00328:  DATA 43,20
0032A:  DATA 50,6F
0032C:  DATA 72,74
0032E:  DATA 20,31
00330:  DATA 5D,20
00332:  DATA 43,6F
00334:  DATA 6E,6E
00336:  DATA 65,63
00338:  DATA 74,20
0033A:  DATA 73,75
0033C:  DATA 63,63
0033E:  DATA 65,73
00340:  DATA 73,66
00342:  DATA 75,6C
00344:  DATA 0D,0A
00346:  DATA 00,00
00348:  DATA 09,5B
0034A:  DATA 44,41
0034C:  DATA 43,20
0034E:  DATA 50,6F
00350:  DATA 72,74
00352:  DATA 20,32
00354:  DATA 5D,20
00356:  DATA 43,6F
00358:  DATA 6E,6E
0035A:  DATA 65,63
0035C:  DATA 74,20
0035E:  DATA 65,72
00360:  DATA 72,6F
00362:  DATA 72,21
00364:  DATA 0D,0A
00366:  DATA 00,00
00368:  DATA 09,5B
0036A:  DATA 44,41
0036C:  DATA 43,20
0036E:  DATA 50,6F
00370:  DATA 72,74
00372:  DATA 20,32
00374:  DATA 5D,20
00376:  DATA 43,6F
00378:  DATA 6E,6E
0037A:  DATA 65,63
0037C:  DATA 74,20
0037E:  DATA 73,75
00380:  DATA 63,63
00382:  DATA 65,73
00384:  DATA 73,66
00386:  DATA 75,6C
00388:  DATA 0D,0A
0038A:  DATA 00,00
0038C:  DATA 09,43
0038E:  DATA 6F,6D
00390:  DATA 70,6C
00392:  DATA 65,74
00394:  DATA 65,0D
00396:  DATA 0A,00
00398:  DATA 45,6E
0039A:  DATA 71,75
0039C:  DATA 65,75
0039E:  DATA 65,20
003A0:  DATA 46,6C
003A2:  DATA 61,73
003A4:  DATA 68,20
003A6:  DATA 4F,70
003A8:  DATA 65,72
003AA:  DATA 61,74
003AC:  DATA 69,6F
003AE:  DATA 6E,0D
003B0:  DATA 0A,00
003B2:  DATA 46,6C
003B4:  DATA 61,73
003B6:  DATA 68,20
003B8:  DATA 71,75
003BA:  DATA 65,75
003BC:  DATA 65,20
003BE:  DATA 69,73
003C0:  DATA 20,66
003C2:  DATA 75,6C
003C4:  DATA 6C,21
003C6:  DATA 21,21
003C8:  DATA 0D,0A
003CA:  DATA 00,00
003CC:  DATA 46,6C
003CE:  DATA 61,73
003D0:  DATA 68,20
003D2:  DATA 71,75
003D4:  DATA 65,75
003D6:  DATA 65,20
003D8:  DATA 69,73
003DA:  DATA 20,65
003DC:  DATA 6D,70
003DE:  DATA 74,79
003E0:  DATA 0D,0A
003E2:  DATA 00,00
003E4:  DATA 0D,0A
003E6:  DATA 53,74
003E8:  DATA 61,72
003EA:  DATA 74,20
003EC:  DATA 6D,61
003EE:  DATA 6B,65
003F0:  DATA 5F,72
003F2:  DATA 65,63
003F4:  DATA 65,69
003F6:  DATA 76,65
003F8:  DATA 5F,63
003FA:  DATA 6F,6D
003FC:  DATA 6D,61
003FE:  DATA 6E,64
00400:  DATA 0D,0A
00402:  DATA 00,00
00404:  DATA 09,5B
00406:  DATA 42,4F
00408:  DATA 53,53
0040A:  DATA 5D,20
0040C:  DATA 3E,3E
0040E:  DATA 3E,20
00410:  DATA 00,00
00412:  DATA 45,6E
00414:  DATA 64,20
00416:  DATA 6D,61
00418:  DATA 6B,65
0041A:  DATA 5F,72
0041C:  DATA 65,63
0041E:  DATA 69,76
00420:  DATA 65,5F
00422:  DATA 63,6F
00424:  DATA 6D,6D
00426:  DATA 61,6E
00428:  DATA 64,0D
0042A:  DATA 0A,0D
0042C:  DATA 0A,00
0042E:  DATA 73,69
00430:  DATA 67,6E
00432:  DATA 61,6C
00434:  DATA 20,65
00436:  DATA 6E,64
00438:  DATA 20,77
0043A:  DATA 69,74
0043C:  DATA 68,20
0043E:  DATA 53,46
00440:  DATA 44,0D
00442:  DATA 0A,00
00444:  DATA 64,6F
00446:  DATA 6E,27
00448:  DATA 74,20
0044A:  DATA 66,69
0044C:  DATA 6E,64
0044E:  DATA 20,53
00450:  DATA 46,44
00452:  DATA 0D,0A
00454:  DATA 00,00
00456:  DATA 09,2D
00458:  DATA 3E,20
0045A:  DATA 49,6E
0045C:  DATA 76,61
0045E:  DATA 6C,69
00460:  DATA 64,20
00462:  DATA 46,72
00464:  DATA 61,6D
00466:  DATA 65,20
00468:  DATA 49,44
0046A:  DATA 20,72
0046C:  DATA 65,63
0046E:  DATA 65,69
00470:  DATA 76,65
00472:  DATA 64,3A
00474:  DATA 20,25
00476:  DATA 58,0D
00478:  DATA 0A,00
0047A:  DATA 09,2D
0047C:  DATA 3E,20
0047E:  DATA 43,52
00480:  DATA 43,20
00482:  DATA 65,72
00484:  DATA 72,6F
00486:  DATA 72,21
00488:  DATA 0D,0A
0048A:  DATA 00,00
0048C:  DATA 09,09
0048E:  DATA 2D,3E
00490:  DATA 20,72
00492:  DATA 65,63
00494:  DATA 65,69
00496:  DATA 76,65
00498:  DATA 64,20
0049A:  DATA 43,52
0049C:  DATA 43,3A
0049E:  DATA 20,25
004A0:  DATA 58,0D
004A2:  DATA 0A,00
004A4:  DATA 09,09
004A6:  DATA 20,20
004A8:  DATA 20,63
004AA:  DATA 6F,6C
004AC:  DATA 6C,65
004AE:  DATA 63,74
004B0:  DATA 20,43
004B2:  DATA 52,43
004B4:  DATA 20,3A
004B6:  DATA 20,25
004B8:  DATA 58,0D
004BA:  DATA 0A,00
004BC:  DATA 09,2D
004BE:  DATA 3E,20
004C0:  DATA 49,6E
004C2:  DATA 76,61
004C4:  DATA 6C,69
004C6:  DATA 64,20
004C8:  DATA 64,65
004CA:  DATA 76,69
004CC:  DATA 63,65
004CE:  DATA 20,49
004D0:  DATA 44,20
004D2:  DATA 72,65
004D4:  DATA 63,65
004D6:  DATA 69,76
004D8:  DATA 65,64
004DA:  DATA 0D,0A
004DC:  DATA 00,00
004DE:  DATA 09,09
004E0:  DATA 2D,3E
004E2:  DATA 20,72
004E4:  DATA 65,63
004E6:  DATA 65,69
004E8:  DATA 76,65
004EA:  DATA 64,3A
004EC:  DATA 20,20
004EE:  DATA 20,20
004F0:  DATA 20,25
004F2:  DATA 58,0D
004F4:  DATA 0A,00
004F6:  DATA 09,09
004F8:  DATA 20,20
004FA:  DATA 20,4D
004FC:  DATA 79,20
004FE:  DATA 64,65
00500:  DATA 76,69
00502:  DATA 63,65
00504:  DATA 20,49
00506:  DATA 44,3A
00508:  DATA 20,25
0050A:  DATA 58,0D
0050C:  DATA 0A,00
0050E:  DATA 09,5B
00510:  DATA 42,4F
00512:  DATA 53,53
00514:  DATA 5D,20
00516:  DATA 3C,3C
00518:  DATA 3C,20
0051A:  DATA 00,00
0051C:  DATA 53,74
0051E:  DATA 61,72
00520:  DATA 74,20
00522:  DATA 53,4D
00524:  DATA 46,20
00526:  DATA 75,73
00528:  DATA 69,6E
0052A:  DATA 67,20
0052C:  DATA 72,65
0052E:  DATA 71,65
00530:  DATA 73,74
00532:  DATA 20,73
00534:  DATA 65,61
00536:  DATA 71,75
00538:  DATA 65,6E
0053A:  DATA 63,65
0053C:  DATA 0D,0A
0053E:  DATA 00,00
00540:  DATA 45,72
00542:  DATA 72,6F
00544:  DATA 72,21
00546:  DATA 20,52
00548:  DATA 65,63
0054A:  DATA 65,69
0054C:  DATA 76,69
0054E:  DATA 6E,67
00550:  DATA 20,63
00552:  DATA 6F,6D
00554:  DATA 6D,61
00556:  DATA 6E,64
00558:  DATA 20,69
0055A:  DATA 6E,63
0055C:  DATA 6F,6E
0055E:  DATA 73,69
00560:  DATA 73,74
00562:  DATA 65,6E
00564:  DATA 74,20
00566:  DATA 77,69
00568:  DATA 74,68
0056A:  DATA 20,74
0056C:  DATA 68,65
0056E:  DATA 20,64
00570:  DATA 65,73
00572:  DATA 69,67
00574:  DATA 6E,0D
00576:  DATA 0A,00
00578:  DATA 53,4D
0057A:  DATA 46,20
0057C:  DATA 75,73
0057E:  DATA 65,20
00580:  DATA 72,65
00582:  DATA 71,75
00584:  DATA 65,73
00586:  DATA 74,20
00588:  DATA 61,6C
0058A:  DATA 6C,6F
0058C:  DATA 77,65
0058E:  DATA 64,0D
00590:  DATA 0A,00
00592:  DATA 53,4D
00594:  DATA 46,20
00596:  DATA 75,73
00598:  DATA 65,20
0059A:  DATA 72,65
0059C:  DATA 71,75
0059E:  DATA 65,73
005A0:  DATA 74,20
005A2:  DATA 64,65
005A4:  DATA 6E,79
005A6:  DATA 65,64
005A8:  DATA 0D,0A
005AA:  DATA 00,00
005AC:  DATA 52,65
005AE:  DATA 74,72
005B0:  DATA 79,20
005B2:  DATA 72,65
005B4:  DATA 71,75
005B6:  DATA 65,73
005B8:  DATA 74,20
005BA:  DATA 74,6F
005BC:  DATA 20,42
005BE:  DATA 4F,53
005C0:  DATA 53,20
005C2:  DATA 50,49
005C4:  DATA 43,0D
005C6:  DATA 0A,00
005C8:  DATA 45,72
005CA:  DATA 72,6F
005CC:  DATA 72,21
005CE:  DATA 20,52
005D0:  DATA 65,63
005D2:  DATA 65,69
005D4:  DATA 76,69
005D6:  DATA 6E,67
005D8:  DATA 20,63
005DA:  DATA 6F,6D
005DC:  DATA 6D,61
005DE:  DATA 6E,64
005E0:  DATA 20,69
005E2:  DATA 6E,63
005E4:  DATA 6F,6E
005E6:  DATA 73,69
005E8:  DATA 73,74
005EA:  DATA 65,6E
005EC:  DATA 74,20
005EE:  DATA 77,69
005F0:  DATA 74,68
005F2:  DATA 20,74
005F4:  DATA 68,65
005F6:  DATA 20,64
005F8:  DATA 65,73
005FA:  DATA 69,67
005FC:  DATA 6E,0D
005FE:  DATA 0A,00
00600:  DATA 45,6E
00602:  DATA 64,20
00604:  DATA 53,4D
00606:  DATA 46,20
00608:  DATA 75,73
0060A:  DATA 69,6E
0060C:  DATA 67,20
0060E:  DATA 72,65
00610:  DATA 71,65
00612:  DATA 73,74
00614:  DATA 20,73
00616:  DATA 65,61
00618:  DATA 71,75
0061A:  DATA 65,6E
0061C:  DATA 63,65
0061E:  DATA 0D,0A
00620:  DATA 00,00
00622:  DATA 74,65
00624:  DATA 6D,70
00626:  DATA 5F,74
00628:  DATA 6F,70
0062A:  DATA 3A,25
0062C:  DATA 30,34
0062E:  DATA 4C,58
00630:  DATA 0D,0A
00632:  DATA 00,00
00634:  DATA 74,65
00636:  DATA 6D,70
00638:  DATA 5F,62
0063A:  DATA 6F,74
0063C:  DATA 3A,25
0063E:  DATA 30,34
00640:  DATA 4C,58
00642:  DATA 0D,0A
00644:  DATA 00,00
00646:  DATA 74,65
00648:  DATA 6D,70
0064A:  DATA 5F,6D
0064C:  DATA 69,73
0064E:  DATA 37,3A
00650:  DATA 25,30
00652:  DATA 34,4C
00654:  DATA 58,0D
00656:  DATA 0A,00
00658:  DATA 70,64
0065A:  DATA 3A,25
0065C:  DATA 30,34
0065E:  DATA 4C,58
00660:  DATA 0D,0A
00662:  DATA 00,00
00664:  DATA 56,6F
00666:  DATA 6C,74
00668:  DATA 31,2C
0066A:  DATA 43,75
0066C:  DATA 72,72
0066E:  DATA 31,2C
00670:  DATA 56,6F
00672:  DATA 6C,74
00674:  DATA 32,2C
00676:  DATA 43,75
00678:  DATA 72,72
0067A:  DATA 32,0D
0067C:  DATA 0A,00
0067E:  DATA 5B,50
00680:  DATA 49,43
00682:  DATA 4C,4F
00684:  DATA 47,5D
00686:  DATA 20,3A
00688:  DATA 20,00
0068A:  DATA 53,4D
0068C:  DATA 46,20
0068E:  DATA 44,61
00690:  DATA 74,61
00692:  DATA 20,54
00694:  DATA 61,62
00696:  DATA 6C,65
00698:  DATA 20,49
0069A:  DATA 6E,69
0069C:  DATA 74,69
0069E:  DATA 61,6C
006A0:  DATA 69,7A
006A2:  DATA 65,0D
006A4:  DATA 0A,00
006A6:  DATA 43,52
006A8:  DATA 43,20
006AA:  DATA 45,52
006AC:  DATA 52,4F
006AE:  DATA 52,20
006B0:  DATA 25,64
006B2:  DATA 0D,0A
006B4:  DATA 00,00
006B6:  DATA 43,52
006B8:  DATA 43,20
006BA:  DATA 76,65
006BC:  DATA 72,69
006BE:  DATA 66,69
006C0:  DATA 63,61
006C2:  DATA 74,69
006C4:  DATA 6F,6E
006C6:  DATA 20,66
006C8:  DATA 61,69
006CA:  DATA 6C,65
006CC:  DATA 64,20
006CE:  DATA 61,66
006D0:  DATA 74,65
006D2:  DATA 72,20
006D4:  DATA 25,64
006D6:  DATA 20,61
006D8:  DATA 74,74
006DA:  DATA 65,6D
006DC:  DATA 70,74
006DE:  DATA 73,0D
006E0:  DATA 0A,00
006E2:  DATA 45,72
006E4:  DATA 72,6F
006E6:  DATA 72,3A
006E8:  DATA 20,43
006EA:  DATA 52,43
006EC:  DATA 20,76
006EE:  DATA 65,72
006F0:  DATA 69,66
006F2:  DATA 69,63
006F4:  DATA 61,74
006F6:  DATA 69,6F
006F8:  DATA 6E,20
006FA:  DATA 66,61
006FC:  DATA 69,6C
006FE:  DATA 65,64
00700:  DATA 20,61
00702:  DATA 66,74
00704:  DATA 65,72
00706:  DATA 20,25
00708:  DATA 64,20
0070A:  DATA 61,74
0070C:  DATA 74,65
0070E:  DATA 6D,70
00710:  DATA 74,73
00712:  DATA 0D,0A
00714:  DATA 00,00
00716:  DATA 0D,0A
00718:  DATA 5B,53
0071A:  DATA 4D,46
0071C:  DATA 20,43
0071E:  DATA 6F,75
00720:  DATA 6E,74
00722:  DATA 65,72
00724:  DATA 20,53
00726:  DATA 74,61
00728:  DATA 74,75
0072A:  DATA 73,5D
0072C:  DATA 0D,0A
0072E:  DATA 00,00
00730:  DATA 09,50
00732:  DATA 41,52
00734:  DATA 54,49
00736:  DATA 54,49
00738:  DATA 4F,4E
0073A:  DATA 09,55
0073C:  DATA 53,45
0073E:  DATA 44,09
00740:  DATA 09,52
00742:  DATA 45,53
00744:  DATA 45,52
00746:  DATA 56,45
00748:  DATA 0D,0A
0074A:  DATA 00,00
0074C:  DATA 09,2D
0074E:  DATA 2D,2D
00750:  DATA 2D,2D
00752:  DATA 2D,2D
00754:  DATA 2D,2D
00756:  DATA 09,2D
00758:  DATA 2D,2D
0075A:  DATA 2D,2D
0075C:  DATA 2D,2D
0075E:  DATA 2D,2D
00760:  DATA 2D,09
00762:  DATA 2D,2D
00764:  DATA 2D,2D
00766:  DATA 2D,2D
00768:  DATA 2D,2D
0076A:  DATA 2D,2D
0076C:  DATA 0D,0A
0076E:  DATA 00,00
00770:  DATA 09,50
00772:  DATA 49,43
00774:  DATA 4C,4F
00776:  DATA 47,09
00778:  DATA 09,30
0077A:  DATA 78,25
0077C:  DATA 30,38
0077E:  DATA 4C,58
00780:  DATA 09,30
00782:  DATA 78,25
00784:  DATA 30,38
00786:  DATA 4C,58
00788:  DATA 0D,0A
0078A:  DATA 00,00
0078C:  DATA 09,45
0078E:  DATA 4E,56
00790:  DATA 49,52
00792:  DATA 4F,09
00794:  DATA 09,30
00796:  DATA 78,25
00798:  DATA 30,38
0079A:  DATA 4C,58
0079C:  DATA 09,30
0079E:  DATA 78,25
007A0:  DATA 30,38
007A2:  DATA 4C,58
007A4:  DATA 0D,0A
007A6:  DATA 00,00
007A8:  DATA 09,49
007AA:  DATA 56,31
007AC:  DATA 5F,48
007AE:  DATA 45,41
007B0:  DATA 44,45
007B2:  DATA 52,09
007B4:  DATA 30,78
007B6:  DATA 25,30
007B8:  DATA 38,4C
007BA:  DATA 58,09
007BC:  DATA 30,78
007BE:  DATA 25,30
007C0:  DATA 38,4C
007C2:  DATA 58,0D
007C4:  DATA 0A,00
007C6:  DATA 09,49
007C8:  DATA 56,31
007CA:  DATA 5F,44
007CC:  DATA 41,54
007CE:  DATA 41,09
007D0:  DATA 30,78
007D2:  DATA 25,30
007D4:  DATA 38,4C
007D6:  DATA 58,09
007D8:  DATA 30,78
007DA:  DATA 25,30
007DC:  DATA 38,4C
007DE:  DATA 58,0D
007E0:  DATA 0A,00
007E2:  DATA 09,49
007E4:  DATA 56,32
007E6:  DATA 5F,48
007E8:  DATA 45,41
007EA:  DATA 44,45
007EC:  DATA 52,09
007EE:  DATA 30,78
007F0:  DATA 25,30
007F2:  DATA 38,4C
007F4:  DATA 58,09
007F6:  DATA 30,78
007F8:  DATA 25,30
007FA:  DATA 38,4C
007FC:  DATA 58,0D
007FE:  DATA 0A,00
00800:  DATA 09,49
00802:  DATA 56,32
00804:  DATA 5F,44
00806:  DATA 41,54
00808:  DATA 41,09
0080A:  DATA 30,78
0080C:  DATA 25,30
0080E:  DATA 38,4C
00810:  DATA 58,09
00812:  DATA 30,78
00814:  DATA 25,30
00816:  DATA 38,4C
00818:  DATA 58,0D
0081A:  DATA 0A,00
0081C:  DATA 09,3D
0081E:  DATA 3D,3D
00820:  DATA 3D,3D
00822:  DATA 3D,3D
00824:  DATA 3D,3D
00826:  DATA 3D,3D
00828:  DATA 3D,3D
0082A:  DATA 3D,3D
0082C:  DATA 3D,3D
0082E:  DATA 3D,3D
00830:  DATA 3D,3D
00832:  DATA 3D,3D
00834:  DATA 3D,3D
00836:  DATA 3D,3D
00838:  DATA 3D,3D
0083A:  DATA 3D,3D
0083C:  DATA 3D,3D
0083E:  DATA 3D,3D
00840:  DATA 3D,3D
00842:  DATA 3D,3D
00844:  DATA 3D,3D
00846:  DATA 3D,0D
00848:  DATA 0A,0D
0084A:  DATA 0A,00
0084C:  DATA 0D,0A
0084E:  DATA 5F,5F
00850:  DATA 5F,5F
00852:  DATA 5F,5F
00854:  DATA 5F,5F
00856:  DATA 5F,5F
00858:  DATA 5F,5F
0085A:  DATA 5F,5F
0085C:  DATA 5F,5F
0085E:  DATA 5F,5F
00860:  DATA 5F,5F
00862:  DATA 5F,5F
00864:  DATA 5F,5F
00866:  DATA 5F,5F
00868:  DATA 5F,5F
0086A:  DATA 5F,5F
0086C:  DATA 5F,0D
0086E:  DATA 0A,00
00870:  DATA 5F,5F
00872:  DATA 5F,5F
00874:  DATA 5F,5F
00876:  DATA 5F,5F
00878:  DATA 5F,53
0087A:  DATA 74,61
0087C:  DATA 72,74
0087E:  DATA 20,63
00880:  DATA 6F,70
00882:  DATA 79,5F
00884:  DATA 64,61
00886:  DATA 74,61
00888:  DATA 5F,5F
0088A:  DATA 5F,5F
0088C:  DATA 5F,5F
0088E:  DATA 5F,5F
00890:  DATA 5F,0D
00892:  DATA 0A,00
00894:  DATA 45,72
00896:  DATA 72,6F
00898:  DATA 72,3A
0089A:  DATA 20,4D
0089C:  DATA 49,53
0089E:  DATA 20,46
008A0:  DATA 4D,20
008A2:  DATA 69,73
008A4:  DATA 20,6E
008A6:  DATA 6F,74
008A8:  DATA 20,63
008AA:  DATA 6F,6E
008AC:  DATA 6E,65
008AE:  DATA 63,74
008B0:  DATA 65,64
008B2:  DATA 0D,0A
008B4:  DATA 00,00
008B6:  DATA 45,72
008B8:  DATA 72,6F
008BA:  DATA 72,3A
008BC:  DATA 20,53
008BE:  DATA 4D,46
008C0:  DATA 20,69
008C2:  DATA 73,20
008C4:  DATA 6E,6F
008C6:  DATA 74,20
008C8:  DATA 63,6F
008CA:  DATA 6E,6E
008CC:  DATA 65,63
008CE:  DATA 74,65
008D0:  DATA 64,0D
008D2:  DATA 0A,00
008D4:  DATA 46,4C
008D6:  DATA 41,53
008D8:  DATA 48,20
008DA:  DATA 49,44
008DC:  DATA 3A,20
008DE:  DATA 43,49
008E0:  DATA 47,53
008E2:  DATA 5F,44
008E4:  DATA 41,54
008E6:  DATA 41,5F
008E8:  DATA 54,41
008EA:  DATA 42,4C
008EC:  DATA 45,0D
008EE:  DATA 0A,00
008F0:  DATA 46,4C
008F2:  DATA 41,53
008F4:  DATA 48,20
008F6:  DATA 49,44
008F8:  DATA 3A,20
008FA:  DATA 43,49
008FC:  DATA 47,53
008FE:  DATA 5F,50
00900:  DATA 49,43
00902:  DATA 4C,4F
00904:  DATA 47,5F
00906:  DATA 44,41
00908:  DATA 54,41
0090A:  DATA 0D,0A
0090C:  DATA 00,00
0090E:  DATA 46,4C
00910:  DATA 41,53
00912:  DATA 48,20
00914:  DATA 49,44
00916:  DATA 3A,20
00918:  DATA 43,49
0091A:  DATA 47,53
0091C:  DATA 5F,45
0091E:  DATA 4E,56
00920:  DATA 49,52
00922:  DATA 4F,5F
00924:  DATA 44,41
00926:  DATA 54,41
00928:  DATA 0D,0A
0092A:  DATA 00,00
0092C:  DATA 46,4C
0092E:  DATA 41,53
00930:  DATA 48,20
00932:  DATA 49,44
00934:  DATA 3A,20
00936:  DATA 43,49
00938:  DATA 47,53
0093A:  DATA 5F,49
0093C:  DATA 56,31
0093E:  DATA 5F,48
00940:  DATA 45,41
00942:  DATA 44,45
00944:  DATA 52,0D
00946:  DATA 0A,00
00948:  DATA 46,4C
0094A:  DATA 41,53
0094C:  DATA 48,20
0094E:  DATA 49,44
00950:  DATA 3A,20
00952:  DATA 43,49
00954:  DATA 47,53
00956:  DATA 5F,49
00958:  DATA 56,31
0095A:  DATA 5F,44
0095C:  DATA 41,54
0095E:  DATA 41,0D
00960:  DATA 0A,00
00962:  DATA 46,4C
00964:  DATA 41,53
00966:  DATA 48,20
00968:  DATA 49,44
0096A:  DATA 3A,20
0096C:  DATA 43,49
0096E:  DATA 47,53
00970:  DATA 5F,49
00972:  DATA 56,32
00974:  DATA 5F,48
00976:  DATA 45,41
00978:  DATA 44,45
0097A:  DATA 52,0D
0097C:  DATA 0A,00
0097E:  DATA 46,4C
00980:  DATA 41,53
00982:  DATA 48,20
00984:  DATA 49,44
00986:  DATA 3A,20
00988:  DATA 43,49
0098A:  DATA 47,53
0098C:  DATA 5F,49
0098E:  DATA 56,32
00990:  DATA 5F,44
00992:  DATA 41,54
00994:  DATA 41,0D
00996:  DATA 0A,00
00998:  DATA 45,72
0099A:  DATA 72,6F
0099C:  DATA 72,3A
0099E:  DATA 20,49
009A0:  DATA 6E,76
009A2:  DATA 61,6C
009A4:  DATA 69,64
009A6:  DATA 20,6D
009A8:  DATA 69,73
009AA:  DATA 73,69
009AC:  DATA 6F,6E
009AE:  DATA 20,49
009B0:  DATA 44,20
009B2:  DATA 25,64
009B4:  DATA 0D,0A
009B6:  DATA 00,00
009B8:  DATA 5B,4D
009BA:  DATA 49,53
009BC:  DATA 46,20
009BE:  DATA 41,44
009C0:  DATA 44,52
009C2:  DATA 45,53
009C4:  DATA 53,5D
009C6:  DATA 0D,0A
009C8:  DATA 00,00
009CA:  DATA 09,50
009CC:  DATA 61,72
009CE:  DATA 61,6D
009D0:  DATA 09,44
009D2:  DATA 61,74
009D4:  DATA 61,0D
009D6:  DATA 0A,00
009D8:  DATA 09,2D
009DA:  DATA 2D,2D
009DC:  DATA 2D,2D
009DE:  DATA 09,2D
009E0:  DATA 2D,2D
009E2:  DATA 2D,2D
009E4:  DATA 2D,2D
009E6:  DATA 2D,2D
009E8:  DATA 2D,0D
009EA:  DATA 0A,00
009EC:  DATA 09,53
009EE:  DATA 54,41
009F0:  DATA 52,54
009F2:  DATA 09,30
009F4:  DATA 78,25
009F6:  DATA 30,38
009F8:  DATA 4C,58
009FA:  DATA 0D,0A
009FC:  DATA 00,00
009FE:  DATA 09,45
00A00:  DATA 4E,44
00A02:  DATA 09,30
00A04:  DATA 78,25
00A06:  DATA 30,38
00A08:  DATA 4C,58
00A0A:  DATA 0D,0A
00A0C:  DATA 00,00
00A0E:  DATA 09,53
00A10:  DATA 52,43
00A12:  DATA 09,30
00A14:  DATA 78,25
00A16:  DATA 30,38
00A18:  DATA 4C,58
00A1A:  DATA 0D,0A
00A1C:  DATA 00,00
00A1E:  DATA 09,53
00A20:  DATA 49,5A
00A22:  DATA 45,09
00A24:  DATA 30,78
00A26:  DATA 25,30
00A28:  DATA 38,4C
00A2A:  DATA 58,0D
00A2C:  DATA 0A,00
00A2E:  DATA 09,2D
00A30:  DATA 2D,2D
00A32:  DATA 2D,2D
00A34:  DATA 09,2D
00A36:  DATA 2D,2D
00A38:  DATA 2D,2D
00A3A:  DATA 2D,2D
00A3C:  DATA 2D,2D
00A3E:  DATA 2D,0D
00A40:  DATA 0A,00
00A42:  DATA 5B,53
00A44:  DATA 4D,46
00A46:  DATA 20,41
00A48:  DATA 44,44
00A4A:  DATA 52,45
00A4C:  DATA 53,53
00A4E:  DATA 5D,0D
00A50:  DATA 0A,00
00A52:  DATA 09,50
00A54:  DATA 61,72
00A56:  DATA 61,6D
00A58:  DATA 09,44
00A5A:  DATA 61,74
00A5C:  DATA 61,0D
00A5E:  DATA 0A,00
00A60:  DATA 09,2D
00A62:  DATA 2D,2D
00A64:  DATA 2D,2D
00A66:  DATA 09,2D
00A68:  DATA 2D,2D
00A6A:  DATA 2D,2D
00A6C:  DATA 2D,2D
00A6E:  DATA 2D,2D
00A70:  DATA 2D,0D
00A72:  DATA 0A,00
00A74:  DATA 09,53
00A76:  DATA 54,41
00A78:  DATA 52,54
00A7A:  DATA 09,30
00A7C:  DATA 78,25
00A7E:  DATA 30,38
00A80:  DATA 4C,58
00A82:  DATA 0D,0A
00A84:  DATA 00,00
00A86:  DATA 09,45
00A88:  DATA 4E,44
00A8A:  DATA 09,30
00A8C:  DATA 78,25
00A8E:  DATA 30,38
00A90:  DATA 4C,58
00A92:  DATA 0D,0A
00A94:  DATA 00,00
00A96:  DATA 09,2D
00A98:  DATA 2D,2D
00A9A:  DATA 2D,2D
00A9C:  DATA 09,2D
00A9E:  DATA 2D,2D
00AA0:  DATA 2D,2D
00AA2:  DATA 2D,2D
00AA4:  DATA 2D,2D
00AA6:  DATA 2D,0D
00AA8:  DATA 0A,00
00AAA:  DATA 45,52
00AAC:  DATA 41,53
00AAE:  DATA 45,20
00AB0:  DATA 53,4D
00AB2:  DATA 46,20
00AB4:  DATA 41,52
00AB6:  DATA 45,41
00AB8:  DATA 0D,0A
00ABA:  DATA 00,00
00ABC:  DATA 09,45
00ABE:  DATA 52,41
00AC0:  DATA 53,45
00AC2:  DATA 20,53
00AC4:  DATA 4D,46
00AC6:  DATA 20,41
00AC8:  DATA 52,45
00ACA:  DATA 41,20
00ACC:  DATA 44,4F
00ACE:  DATA 4E,45
00AD0:  DATA 0D,0A
00AD2:  DATA 00,00
00AD4:  DATA 57,52
00AD6:  DATA 49,54
00AD8:  DATA 45,20
00ADA:  DATA 44,41
00ADC:  DATA 54,41
00ADE:  DATA 20,54
00AE0:  DATA 4F,20
00AE2:  DATA 53,4D
00AE4:  DATA 46,0D
00AE6:  DATA 0A,00
00AE8:  DATA 55,50
00AEA:  DATA 44,41
00AEC:  DATA 54,45
00AEE:  DATA 20,53
00AF0:  DATA 4D,46
00AF2:  DATA 20,43
00AF4:  DATA 4F,55
00AF6:  DATA 4E,54
00AF8:  DATA 45,52
00AFA:  DATA 20,53
00AFC:  DATA 54,41
00AFE:  DATA 54,55
00B00:  DATA 53,0D
00B02:  DATA 0A,00
00B04:  DATA 0D,0A
00B06:  DATA 5F,5F
00B08:  DATA 5F,5F
00B0A:  DATA 5F,5F
00B0C:  DATA 5F,5F
00B0E:  DATA 5F,45
00B10:  DATA 6E,64
00B12:  DATA 20,63
00B14:  DATA 6F,70
00B16:  DATA 79,5F
00B18:  DATA 64,61
00B1A:  DATA 74,61
00B1C:  DATA 5F,5F
00B1E:  DATA 5F,5F
00B20:  DATA 5F,5F
00B22:  DATA 5F,5F
00B24:  DATA 5F,5F
00B26:  DATA 0D,0A
00B28:  DATA 00,00
00B2A:  DATA 5F,5F
00B2C:  DATA 5F,5F
00B2E:  DATA 5F,5F
00B30:  DATA 5F,5F
00B32:  DATA 5F,5F
00B34:  DATA 5F,5F
00B36:  DATA 5F,5F
00B38:  DATA 5F,5F
00B3A:  DATA 5F,5F
00B3C:  DATA 5F,5F
00B3E:  DATA 5F,5F
00B40:  DATA 5F,5F
00B42:  DATA 5F,5F
00B44:  DATA 5F,5F
00B46:  DATA 5F,5F
00B48:  DATA 5F,0D
00B4A:  DATA 0A,0D
00B4C:  DATA 0A,00
00B4E:  DATA 0D,0A
00B50:  DATA 5F,5F
00B52:  DATA 5F,5F
00B54:  DATA 5F,5F
00B56:  DATA 5F,5F
00B58:  DATA 5F,5F
00B5A:  DATA 5F,5F
00B5C:  DATA 5F,5F
00B5E:  DATA 5F,5F
00B60:  DATA 5F,5F
00B62:  DATA 5F,5F
00B64:  DATA 0D,0A
00B66:  DATA 00,00
00B68:  DATA 5F,5F
00B6A:  DATA 5F,53
00B6C:  DATA 74,61
00B6E:  DATA 72,74
00B70:  DATA 20,53
00B72:  DATA 4D,46
00B74:  DATA 20,52
00B76:  DATA 65,61
00B78:  DATA 64,5F
00B7A:  DATA 5F,5F
00B7C:  DATA 5F,0D
00B7E:  DATA 0A,00
00B80:  DATA 45,72
00B82:  DATA 72,6F
00B84:  DATA 72,3A
00B86:  DATA 20,52
00B88:  DATA 65,61
00B8A:  DATA 64,20
00B8C:  DATA 61,64
00B8E:  DATA 64,72
00B90:  DATA 65,73
00B92:  DATA 73,20
00B94:  DATA 30,78
00B96:  DATA 25,30
00B98:  DATA 38,4C
00B9A:  DATA 58,20
00B9C:  DATA 6F,75
00B9E:  DATA 74,20
00BA0:  DATA 6F,66
00BA2:  DATA 20,53
00BA4:  DATA 4D,46
00BA6:  DATA 20,6D
00BA8:  DATA 69,73
00BAA:  DATA 73,69
00BAC:  DATA 6F,6E
00BAE:  DATA 20,72
00BB0:  DATA 61,6E
00BB2:  DATA 67,65
00BB4:  DATA 20,5B
00BB6:  DATA 30,78
00BB8:  DATA 25,30
00BBA:  DATA 38,4C
00BBC:  DATA 58,20
00BBE:  DATA 2D,20
00BC0:  DATA 30,78
00BC2:  DATA 25,30
00BC4:  DATA 38,4C
00BC6:  DATA 58,29
00BC8:  DATA 0D,0A
00BCA:  DATA 00,00
00BCC:  DATA 57,61
00BCE:  DATA 72,6E
00BD0:  DATA 3A,20
00BD2:  DATA 41,64
00BD4:  DATA 6A,75
00BD6:  DATA 73,74
00BD8:  DATA 20,72
00BDA:  DATA 65,61
00BDC:  DATA 64,20
00BDE:  DATA 73,69
00BE0:  DATA 7A,65
00BE2:  DATA 20,66
00BE4:  DATA 72,6F
00BE6:  DATA 6D,20
00BE8:  DATA 25,6C
00BEA:  DATA 75,20
00BEC:  DATA 74,6F
00BEE:  DATA 20,25
00BF0:  DATA 6C,75
00BF2:  DATA 20,28
00BF4:  DATA 6D,69
00BF6:  DATA 73,73
00BF8:  DATA 69,6F
00BFA:  DATA 6E,20
00BFC:  DATA 65,6E
00BFE:  DATA 64,29
00C00:  DATA 0D,0A
00C02:  DATA 00,00
00C04:  DATA 49,6E
00C06:  DATA 66,6F
00C08:  DATA 3A,20
00C0A:  DATA 4E,6F
00C0C:  DATA 74,68
00C0E:  DATA 69,6E
00C10:  DATA 67,20
00C12:  DATA 74,6F
00C14:  DATA 20,72
00C16:  DATA 65,61
00C18:  DATA 64,20
00C1A:  DATA 28,73
00C1C:  DATA 69,7A
00C1E:  DATA 65,3D
00C20:  DATA 30,29
00C22:  DATA 0D,0A
00C24:  DATA 00,00
00C26:  DATA 49,6E
00C28:  DATA 20,53
00C2A:  DATA 4D,46
00C2C:  DATA 20,52
00C2E:  DATA 65,61
00C30:  DATA 64,20
00C32:  DATA 73,6F
00C34:  DATA 75,72
00C36:  DATA 63,65
00C38:  DATA 20,64
00C3A:  DATA 61,74
00C3C:  DATA 61,20
00C3E:  DATA 61,64
00C40:  DATA 64,72
00C42:  DATA 65,73
00C44:  DATA 73,3A
00C46:  DATA 20,25
00C48:  DATA 4C,58
00C4A:  DATA 0D,0A
00C4C:  DATA 00,00
00C4E:  DATA 49,6E
00C50:  DATA 20,53
00C52:  DATA 4D,46
00C54:  DATA 20,52
00C56:  DATA 65,61
00C58:  DATA 64,20
00C5A:  DATA 64,61
00C5C:  DATA 74,61
00C5E:  DATA 20,73
00C60:  DATA 69,7A
00C62:  DATA 65,20
00C64:  DATA 20,20
00C66:  DATA 20,20
00C68:  DATA 20,20
00C6A:  DATA 20,20
00C6C:  DATA 20,3A
00C6E:  DATA 20,25
00C70:  DATA 6C,75
00C72:  DATA 20,28
00C74:  DATA 30,78
00C76:  DATA 25,6C
00C78:  DATA 78,29
00C7A:  DATA 0D,0A
00C7C:  DATA 0D,0A
00C7E:  DATA 00,00
00C80:  DATA 45,72
00C82:  DATA 72,6F
00C84:  DATA 72,3A
00C86:  DATA 20,53
00C88:  DATA 4D,46
00C8A:  DATA 20,69
00C8C:  DATA 73,20
00C8E:  DATA 6E,6F
00C90:  DATA 74,20
00C92:  DATA 63,6F
00C94:  DATA 6E,6E
00C96:  DATA 65,63
00C98:  DATA 74,65
00C9A:  DATA 64,0D
00C9C:  DATA 0A,00
00C9E:  DATA 52,45
00CA0:  DATA 41,44
00CA2:  DATA 20,44
00CA4:  DATA 41,54
00CA6:  DATA 41,20
00CA8:  DATA 46,52
00CAA:  DATA 4F,4D
00CAC:  DATA 20,53
00CAE:  DATA 4D,46
00CB0:  DATA 2E,2E
00CB2:  DATA 2E,0D
00CB4:  DATA 0A,00
00CB6:  DATA 0D,0A
00CB8:  DATA 5F,5F
00CBA:  DATA 5F,45
00CBC:  DATA 6E,64
00CBE:  DATA 20,53
00CC0:  DATA 4D,46
00CC2:  DATA 20,52
00CC4:  DATA 65,61
00CC6:  DATA 64,5F
00CC8:  DATA 5F,5F
00CCA:  DATA 5F,0D
00CCC:  DATA 0A,00
00CCE:  DATA 5F,5F
00CD0:  DATA 5F,5F
00CD2:  DATA 5F,5F
00CD4:  DATA 5F,5F
00CD6:  DATA 5F,5F
00CD8:  DATA 5F,5F
00CDA:  DATA 5F,5F
00CDC:  DATA 5F,5F
00CDE:  DATA 5F,5F
00CE0:  DATA 5F,5F
00CE2:  DATA 0D,0A
00CE4:  DATA 0D,0A
00CE6:  DATA 00,00
00CE8:  DATA 0D,0A
00CEA:  DATA 5F,5F
00CEC:  DATA 5F,5F
00CEE:  DATA 5F,5F
00CF0:  DATA 5F,5F
00CF2:  DATA 5F,5F
00CF4:  DATA 5F,5F
00CF6:  DATA 5F,5F
00CF8:  DATA 5F,5F
00CFA:  DATA 5F,5F
00CFC:  DATA 5F,5F
00CFE:  DATA 0D,0A
00D00:  DATA 00,00
00D02:  DATA 5F,5F
00D04:  DATA 5F,53
00D06:  DATA 74,61
00D08:  DATA 72,74
00D0A:  DATA 20,73
00D0C:  DATA 6D,66
00D0E:  DATA 5F,65
00D10:  DATA 72,61
00D12:  DATA 73,65
00D14:  DATA 5F,5F
00D16:  DATA 5F,5F
00D18:  DATA 0D,0A
00D1A:  DATA 00,00
00D1C:  DATA 5B,53
00D1E:  DATA 4D,46
00D20:  DATA 5D,20
00D22:  DATA 45,72
00D24:  DATA 61,73
00D26:  DATA 65,20
00D28:  DATA 61,64
00D2A:  DATA 64,72
00D2C:  DATA 65,73
00D2E:  DATA 73,20
00D30:  DATA 20,20
00D32:  DATA 3A,20
00D34:  DATA 25,4C
00D36:  DATA 58,0D
00D38:  DATA 0A,00
00D3A:  DATA 5B,53
00D3C:  DATA 4D,46
00D3E:  DATA 5D,20
00D40:  DATA 45,72
00D42:  DATA 61,73
00D44:  DATA 65,20
00D46:  DATA 64,61
00D48:  DATA 74,61
00D4A:  DATA 20,73
00D4C:  DATA 69,7A
00D4E:  DATA 65,20
00D50:  DATA 3A,20
00D52:  DATA 25,6C
00D54:  DATA 75,20
00D56:  DATA 28,30
00D58:  DATA 78,25
00D5A:  DATA 6C,78
00D5C:  DATA 29,0D
00D5E:  DATA 0A,0D
00D60:  DATA 0A,00
00D62:  DATA 45,72
00D64:  DATA 72,6F
00D66:  DATA 72,3A
00D68:  DATA 20,53
00D6A:  DATA 4D,46
00D6C:  DATA 20,69
00D6E:  DATA 73,20
00D70:  DATA 6E,6F
00D72:  DATA 74,20
00D74:  DATA 63,6F
00D76:  DATA 6E,6E
00D78:  DATA 65,63
00D7A:  DATA 74,65
00D7C:  DATA 64,0D
00D7E:  DATA 0A,00
00D80:  DATA 45,72
00D82:  DATA 72,6F
00D84:  DATA 72,3A
00D86:  DATA 20,45
00D88:  DATA 72,61
00D8A:  DATA 73,65
00D8C:  DATA 20,73
00D8E:  DATA 6F,75
00D90:  DATA 72,63
00D92:  DATA 65,20
00D94:  DATA 61,64
00D96:  DATA 64,72
00D98:  DATA 65,73
00D9A:  DATA 73,20
00D9C:  DATA 30,78
00D9E:  DATA 25,4C
00DA0:  DATA 58,20
00DA2:  DATA 69,73
00DA4:  DATA 20,6F
00DA6:  DATA 75,74
00DA8:  DATA 73,69
00DAA:  DATA 64,65
00DAC:  DATA 20,6D
00DAE:  DATA 69,73
00DB0:  DATA 73,69
00DB2:  DATA 6F,6E
00DB4:  DATA 20,72
00DB6:  DATA 61,6E
00DB8:  DATA 67,65
00DBA:  DATA 20,5B
00DBC:  DATA 30,78
00DBE:  DATA 25,4C
00DC0:  DATA 58,20
00DC2:  DATA 2D,20
00DC4:  DATA 30,78
00DC6:  DATA 25,4C
00DC8:  DATA 58,5D
00DCA:  DATA 0D,0A
00DCC:  DATA 00,00
00DCE:  DATA 45,72
00DD0:  DATA 72,6F
00DD2:  DATA 72,3A
00DD4:  DATA 20,45
00DD6:  DATA 72,61
00DD8:  DATA 73,65
00DDA:  DATA 20,6F
00DDC:  DATA 70,65
00DDE:  DATA 72,61
00DE0:  DATA 74,69
00DE2:  DATA 6F,6E
00DE4:  DATA 20,77
00DE6:  DATA 6F,75
00DE8:  DATA 6C,64
00DEA:  DATA 20,65
00DEC:  DATA 78,63
00DEE:  DATA 65,65
00DF0:  DATA 64,20
00DF2:  DATA 6D,69
00DF4:  DATA 73,73
00DF6:  DATA 69,6F
00DF8:  DATA 6E,20
00DFA:  DATA 65,6E
00DFC:  DATA 64,20
00DFE:  DATA 61,64
00E00:  DATA 64,72
00E02:  DATA 65,73
00E04:  DATA 73,20
00E06:  DATA 30,78
00E08:  DATA 25,4C
00E0A:  DATA 58,0D
00E0C:  DATA 0A,00
00E0E:  DATA 4C,69
00E10:  DATA 6D,69
00E12:  DATA 74,69
00E14:  DATA 6E,67
00E16:  DATA 20,65
00E18:  DATA 72,61
00E1A:  DATA 73,65
00E1C:  DATA 20,73
00E1E:  DATA 69,7A
00E20:  DATA 65,20
00E22:  DATA 74,6F
00E24:  DATA 20,73
00E26:  DATA 74,61
00E28:  DATA 79,20
00E2A:  DATA 77,69
00E2C:  DATA 74,68
00E2E:  DATA 69,6E
00E30:  DATA 20,6D
00E32:  DATA 69,73
00E34:  DATA 73,69
00E36:  DATA 6F,6E
00E38:  DATA 20,62
00E3A:  DATA 6F,75
00E3C:  DATA 6E,64
00E3E:  DATA 73,0D
00E40:  DATA 0A,00
00E42:  DATA 45,72
00E44:  DATA 61,73
00E46:  DATA 65,20
00E48:  DATA 6F,70
00E4A:  DATA 65,72
00E4C:  DATA 61,74
00E4E:  DATA 69,6F
00E50:  DATA 6E,20
00E52:  DATA 76,61
00E54:  DATA 6C,69
00E56:  DATA 64,61
00E58:  DATA 74,65
00E5A:  DATA 64,20
00E5C:  DATA 77,69
00E5E:  DATA 74,68
00E60:  DATA 69,6E
00E62:  DATA 20,6D
00E64:  DATA 69,73
00E66:  DATA 73,69
00E68:  DATA 6F,6E
00E6A:  DATA 20,72
00E6C:  DATA 61,6E
00E6E:  DATA 67,65
00E70:  DATA 0D,0A
00E72:  DATA 00,00
00E74:  DATA 45,72
00E76:  DATA 61,73
00E78:  DATA 65,64
00E7A:  DATA 20,25
00E7C:  DATA 6C,75
00E7E:  DATA 20,62
00E80:  DATA 79,74
00E82:  DATA 65,73
00E84:  DATA 20,28
00E86:  DATA 61,6C
00E88:  DATA 69,67
00E8A:  DATA 6E,65
00E8C:  DATA 64,29
00E8E:  DATA 0D,0A
00E90:  DATA 00,00
00E92:  DATA 0D,0A
00E94:  DATA 5F,5F
00E96:  DATA 5F,45
00E98:  DATA 6E,64
00E9A:  DATA 20,73
00E9C:  DATA 6D,66
00E9E:  DATA 5F,65
00EA0:  DATA 72,61
00EA2:  DATA 73,65
00EA4:  DATA 5F,5F
00EA6:  DATA 5F,5F
00EA8:  DATA 0D,0A
00EAA:  DATA 00,00
00EAC:  DATA 5F,5F
00EAE:  DATA 5F,5F
00EB0:  DATA 5F,5F
00EB2:  DATA 5F,5F
00EB4:  DATA 5F,5F
00EB6:  DATA 5F,5F
00EB8:  DATA 5F,5F
00EBA:  DATA 5F,5F
00EBC:  DATA 5F,5F
00EBE:  DATA 5F,5F
00EC0:  DATA 0D,0A
00EC2:  DATA 0D,0A
00EC4:  DATA 00,00
00EC6:  DATA 4D,49
00EC8:  DATA 53,53
00ECA:  DATA 49,4F
00ECC:  DATA 4E,20
00ECE:  DATA 46,4C
00ED0:  DATA 41,53
00ED2:  DATA 48,20
00ED4:  DATA 49,6E
00ED6:  DATA 69,74
00ED8:  DATA 69,61
00EDA:  DATA 6C,69
00EDC:  DATA 7A,65
00EDE:  DATA 0D,0A
00EE0:  DATA 00,00
00EE2:  DATA 09,5B
00EE4:  DATA 4D,49
00EE6:  DATA 53,20
00EE8:  DATA 46,4D
00EEA:  DATA 5D,20
00EEC:  DATA 43,6F
00EEE:  DATA 6E,6E
00EF0:  DATA 65,63
00EF2:  DATA 74,65
00EF4:  DATA 64,0D
00EF6:  DATA 0A,00
00EF8:  DATA 09,5B
00EFA:  DATA 4D,49
00EFC:  DATA 53,20
00EFE:  DATA 46,4D
00F00:  DATA 5D,20
00F02:  DATA 4E,6F
00F04:  DATA 74,20
00F06:  DATA 43,6F
00F08:  DATA 6E,6E
00F0A:  DATA 65,63
00F0C:  DATA 74,65
00F0E:  DATA 64,0D
00F10:  DATA 0A,00
00F12:  DATA 09,5B
00F14:  DATA 53,4D
00F16:  DATA 46,5D
00F18:  DATA 20,43
00F1A:  DATA 6F,6E
00F1C:  DATA 6E,65
00F1E:  DATA 63,74
00F20:  DATA 65,64
00F22:  DATA 0D,0A
00F24:  DATA 00,00
00F26:  DATA 09,5B
00F28:  DATA 53,4D
00F2A:  DATA 46,5D
00F2C:  DATA 20,4E
00F2E:  DATA 6F,74
00F30:  DATA 20,43
00F32:  DATA 6F,6E
00F34:  DATA 6E,65
00F36:  DATA 63,74
00F38:  DATA 65,64
00F3A:  DATA 0D,0A
00F3C:  DATA 00,00
00F3E:  DATA 09,5B
00F40:  DATA 4D,49
00F42:  DATA 53,20
00F44:  DATA 46,4D
00F46:  DATA 5D,20
00F48:  DATA 25,30
00F4A:  DATA 38,4C
00F4C:  DATA 58,0D
00F4E:  DATA 0A,00
00F50:  DATA 09,5B
00F52:  DATA 4D,49
00F54:  DATA 53,20
00F56:  DATA 46,4D
00F58:  DATA 5D,20
00F5A:  DATA 43,52
00F5C:  DATA 43,20
00F5E:  DATA 65,72
00F60:  DATA 72,6F
00F62:  DATA 72,20
00F64:  DATA 2D,3E
00F66:  DATA 20,69
00F68:  DATA 6E,69
00F6A:  DATA 74,69
00F6C:  DATA 61,6C
00F6E:  DATA 69,7A
00F70:  DATA 65,20
00F72:  DATA 63,6F
00F74:  DATA 75,6E
00F76:  DATA 74,65
00F78:  DATA 72,73
00F7A:  DATA 0D,0A
00F7C:  DATA 00,00
00F7E:  DATA 09,43
00F80:  DATA 6F,6D
00F82:  DATA 70,6C
00F84:  DATA 65,74
00F86:  DATA 65,0D
00F88:  DATA 0A,00
00F8A:  DATA 09,46
00F8C:  DATA 69,65
00F8E:  DATA 6C,64
00F90:  DATA 09,09
00F92:  DATA 43,6F
00F94:  DATA 75,6E
00F96:  DATA 74,65
00F98:  DATA 72,4E
00F9A:  DATA 61,6D
00F9C:  DATA 65,09
00F9E:  DATA 56,61
00FA0:  DATA 6C,75
00FA2:  DATA 65,0D
00FA4:  DATA 0A,00
00FA6:  DATA 09,2D
00FA8:  DATA 2D,2D
00FAA:  DATA 2D,2D
00FAC:  DATA 2D,2D
00FAE:  DATA 2D,2D
00FB0:  DATA 2D,2D
00FB2:  DATA 2D,09
00FB4:  DATA 2D,2D
00FB6:  DATA 2D,2D
00FB8:  DATA 2D,2D
00FBA:  DATA 2D,2D
00FBC:  DATA 2D,2D
00FBE:  DATA 2D,2D
00FC0:  DATA 2D,09
00FC2:  DATA 2D,2D
00FC4:  DATA 2D,2D
00FC6:  DATA 2D,2D
00FC8:  DATA 2D,2D
00FCA:  DATA 2D,2D
00FCC:  DATA 2D,2D
00FCE:  DATA 2D,0D
00FD0:  DATA 0A,00
00FD2:  DATA 09,50
00FD4:  DATA 49,43
00FD6:  DATA 4C,4F
00FD8:  DATA 47,09
00FDA:  DATA 09,55
00FDC:  DATA 73,65
00FDE:  DATA 64,09
00FE0:  DATA 09,30
00FE2:  DATA 78,25
00FE4:  DATA 30,38
00FE6:  DATA 4C,58
00FE8:  DATA 0D,0A
00FEA:  DATA 00,00
00FEC:  DATA 09,09
00FEE:  DATA 09,55
00FF0:  DATA 6E,63
00FF2:  DATA 6F,70
00FF4:  DATA 79,65
00FF6:  DATA 64,09
00FF8:  DATA 30,78
00FFA:  DATA 25,30
00FFC:  DATA 38,4C
00FFE:  DATA 58,0D
01000:  DATA 0A,00
01002:  DATA 09,09
01004:  DATA 09,52
01006:  DATA 65,73
01008:  DATA 65,72
0100A:  DATA 76,65
0100C:  DATA 09,09
0100E:  DATA 30,78
01010:  DATA 25,30
01012:  DATA 32,58
01014:  DATA 2F,20
01016:  DATA 30,78
01018:  DATA 25,30
0101A:  DATA 32,58
0101C:  DATA 0D,0A
0101E:  DATA 00,00
01020:  DATA 09,45
01022:  DATA 4E,56
01024:  DATA 49,52
01026:  DATA 4F,09
01028:  DATA 09,55
0102A:  DATA 73,65
0102C:  DATA 64,09
0102E:  DATA 09,30
01030:  DATA 78,25
01032:  DATA 30,38
01034:  DATA 4C,58
01036:  DATA 0D,0A
01038:  DATA 00,00
0103A:  DATA 09,09
0103C:  DATA 09,55
0103E:  DATA 6E,63
01040:  DATA 6F,70
01042:  DATA 79,65
01044:  DATA 64,09
01046:  DATA 30,78
01048:  DATA 25,30
0104A:  DATA 38,4C
0104C:  DATA 58,0D
0104E:  DATA 0A,00
01050:  DATA 09,09
01052:  DATA 09,52
01054:  DATA 65,73
01056:  DATA 65,72
01058:  DATA 76,65
0105A:  DATA 09,09
0105C:  DATA 30,78
0105E:  DATA 25,30
01060:  DATA 32,58
01062:  DATA 2F,20
01064:  DATA 30,78
01066:  DATA 25,30
01068:  DATA 32,58
0106A:  DATA 0D,0A
0106C:  DATA 00,00
0106E:  DATA 09,49
01070:  DATA 56,31
01072:  DATA 20,48
01074:  DATA 45,41
01076:  DATA 44,45
01078:  DATA 52,09
0107A:  DATA 55,73
0107C:  DATA 65,64
0107E:  DATA 09,09
01080:  DATA 30,78
01082:  DATA 25,30
01084:  DATA 38,4C
01086:  DATA 58,0D
01088:  DATA 0A,00
0108A:  DATA 09,09
0108C:  DATA 09,55
0108E:  DATA 6E,63
01090:  DATA 6F,70
01092:  DATA 79,65
01094:  DATA 64,09
01096:  DATA 30,78
01098:  DATA 25,30
0109A:  DATA 38,4C
0109C:  DATA 58,0D
0109E:  DATA 0A,00
010A0:  DATA 09,09
010A2:  DATA 09,52
010A4:  DATA 65,73
010A6:  DATA 65,72
010A8:  DATA 76,65
010AA:  DATA 09,09
010AC:  DATA 30,78
010AE:  DATA 25,30
010B0:  DATA 32,58
010B2:  DATA 2F,20
010B4:  DATA 30,78
010B6:  DATA 25,30
010B8:  DATA 32,58
010BA:  DATA 0D,0A
010BC:  DATA 00,00
010BE:  DATA 09,49
010C0:  DATA 56,31
010C2:  DATA 20,44
010C4:  DATA 41,54
010C6:  DATA 41,09
010C8:  DATA 55,73
010CA:  DATA 65,64
010CC:  DATA 09,09
010CE:  DATA 30,78
010D0:  DATA 25,30
010D2:  DATA 38,4C
010D4:  DATA 58,0D
010D6:  DATA 0A,00
010D8:  DATA 09,09
010DA:  DATA 09,55
010DC:  DATA 6E,63
010DE:  DATA 6F,70
010E0:  DATA 79,65
010E2:  DATA 64,09
010E4:  DATA 30,78
010E6:  DATA 25,30
010E8:  DATA 38,4C
010EA:  DATA 58,0D
010EC:  DATA 0A,00
010EE:  DATA 09,09
010F0:  DATA 09,52
010F2:  DATA 65,73
010F4:  DATA 65,72
010F6:  DATA 76,65
010F8:  DATA 09,09
010FA:  DATA 30,78
010FC:  DATA 25,30
010FE:  DATA 32,58
01100:  DATA 2F,20
01102:  DATA 30,78
01104:  DATA 25,30
01106:  DATA 32,58
01108:  DATA 0D,0A
0110A:  DATA 00,00
0110C:  DATA 09,49
0110E:  DATA 56,32
01110:  DATA 20,48
01112:  DATA 45,41
01114:  DATA 44,45
01116:  DATA 52,09
01118:  DATA 55,73
0111A:  DATA 65,64
0111C:  DATA 09,09
0111E:  DATA 30,78
01120:  DATA 25,30
01122:  DATA 38,4C
01124:  DATA 58,0D
01126:  DATA 0A,00
01128:  DATA 09,09
0112A:  DATA 09,55
0112C:  DATA 6E,63
0112E:  DATA 6F,70
01130:  DATA 79,65
01132:  DATA 64,09
01134:  DATA 30,78
01136:  DATA 25,30
01138:  DATA 38,4C
0113A:  DATA 58,0D
0113C:  DATA 0A,00
0113E:  DATA 09,09
01140:  DATA 09,52
01142:  DATA 65,73
01144:  DATA 65,72
01146:  DATA 76,65
01148:  DATA 09,09
0114A:  DATA 30,78
0114C:  DATA 25,30
0114E:  DATA 32,58
01150:  DATA 2F,20
01152:  DATA 30,78
01154:  DATA 25,30
01156:  DATA 32,58
01158:  DATA 0D,0A
0115A:  DATA 00,00
0115C:  DATA 09,49
0115E:  DATA 56,32
01160:  DATA 20,44
01162:  DATA 41,54
01164:  DATA 41,09
01166:  DATA 55,73
01168:  DATA 65,64
0116A:  DATA 09,09
0116C:  DATA 30,78
0116E:  DATA 25,30
01170:  DATA 38,4C
01172:  DATA 58,0D
01174:  DATA 0A,00
01176:  DATA 09,09
01178:  DATA 09,55
0117A:  DATA 6E,63
0117C:  DATA 6F,70
0117E:  DATA 79,65
01180:  DATA 64,09
01182:  DATA 30,78
01184:  DATA 25,30
01186:  DATA 38,4C
01188:  DATA 58,0D
0118A:  DATA 0A,00
0118C:  DATA 09,09
0118E:  DATA 09,52
01190:  DATA 65,73
01192:  DATA 65,72
01194:  DATA 76,65
01196:  DATA 09,09
01198:  DATA 30,78
0119A:  DATA 25,30
0119C:  DATA 32,58
0119E:  DATA 2F,20
011A0:  DATA 30,78
011A2:  DATA 25,30
011A4:  DATA 32,58
011A6:  DATA 0D,0A
011A8:  DATA 00,00
011AA:  DATA 09,3D
011AC:  DATA 3D,3D
011AE:  DATA 3D,3D
011B0:  DATA 3D,3D
011B2:  DATA 3D,3D
011B4:  DATA 3D,3D
011B6:  DATA 3D,3D
011B8:  DATA 3D,3D
011BA:  DATA 3D,3D
011BC:  DATA 3D,3D
011BE:  DATA 3D,3D
011C0:  DATA 3D,3D
011C2:  DATA 3D,3D
011C4:  DATA 3D,3D
011C6:  DATA 3D,3D
011C8:  DATA 3D,3D
011CA:  DATA 3D,3D
011CC:  DATA 3D,3D
011CE:  DATA 3D,3D
011D0:  DATA 3D,3D
011D2:  DATA 3D,3D
011D4:  DATA 3D,3D
011D6:  DATA 3D,3D
011D8:  DATA 3D,3D
011DA:  DATA 3D,3D
011DC:  DATA 3D,0D
011DE:  DATA 0A,00
011E0:  DATA 43,52
011E2:  DATA 43,20
011E4:  DATA 76,65
011E6:  DATA 72,69
011E8:  DATA 66,69
011EA:  DATA 63,61
011EC:  DATA 74,69
011EE:  DATA 6F,6E
011F0:  DATA 20,70
011F2:  DATA 61,73
011F4:  DATA 73,65
011F6:  DATA 64,20
011F8:  DATA 6F,6E
011FA:  DATA 20,61
011FC:  DATA 74,74
011FE:  DATA 65,6D
01200:  DATA 70,74
01202:  DATA 20,25
01204:  DATA 64,0D
01206:  DATA 0A,00
01208:  DATA 45,72
0120A:  DATA 72,6F
0120C:  DATA 72,3A
0120E:  DATA 20,43
01210:  DATA 52,43
01212:  DATA 20,76
01214:  DATA 65,72
01216:  DATA 69,66
01218:  DATA 69,63
0121A:  DATA 61,74
0121C:  DATA 69,6F
0121E:  DATA 6E,20
01220:  DATA 66,61
01222:  DATA 69,6C
01224:  DATA 65,64
01226:  DATA 20,61
01228:  DATA 66,74
0122A:  DATA 65,72
0122C:  DATA 20,25
0122E:  DATA 64,20
01230:  DATA 61,74
01232:  DATA 74,65
01234:  DATA 6D,70
01236:  DATA 74,73
01238:  DATA 0D,0A
0123A:  DATA 00,00
0123C:  DATA 0D,0A
0123E:  DATA 5F,5F
01240:  DATA 5F,5F
01242:  DATA 5F,5F
01244:  DATA 5F,5F
01246:  DATA 5F,5F
01248:  DATA 5F,5F
0124A:  DATA 5F,5F
0124C:  DATA 5F,5F
0124E:  DATA 5F,5F
01250:  DATA 5F,5F
01252:  DATA 5F,5F
01254:  DATA 5F,5F
01256:  DATA 5F,5F
01258:  DATA 5F,5F
0125A:  DATA 5F,5F
0125C:  DATA 0D,0A
0125E:  DATA 5F,5F
01260:  DATA 5F,5F
01262:  DATA 5F,53
01264:  DATA 74,61
01266:  DATA 72,74
01268:  DATA 20,65
0126A:  DATA 78,65
0126C:  DATA 63,75
0126E:  DATA 74,65
01270:  DATA 5F,6D
01272:  DATA 69,73
01274:  DATA 73,69
01276:  DATA 6F,6E
01278:  DATA 5F,5F
0127A:  DATA 5F,5F
0127C:  DATA 5F,0D
0127E:  DATA 0A,0D
01280:  DATA 0A,00
01282:  DATA 43,6F
01284:  DATA 6D,6D
01286:  DATA 61,6E
01288:  DATA 64,20
0128A:  DATA 49,44
0128C:  DATA 3A,20
0128E:  DATA 25,58
01290:  DATA 0D,0A
01292:  DATA 0D,0A
01294:  DATA 00,00
01296:  DATA 09,09
01298:  DATA 2D,3E
0129A:  DATA 20,47
0129C:  DATA 65,74
0129E:  DATA 20,74
012A0:  DATA 69,6D
012A2:  DATA 65,20
012A4:  DATA 74,6F
012A6:  DATA 20,25
012A8:  DATA 6C,75
012AA:  DATA 20,64
012AC:  DATA 61,79
012AE:  DATA 73,2C
012B0:  DATA 20,25
012B2:  DATA 30,32
012B4:  DATA 75,3A
012B6:  DATA 25,30
012B8:  DATA 32,75
012BA:  DATA 3A,25
012BC:  DATA 30,32
012BE:  DATA 75,0D
012C0:  DATA 0A,00
012C2:  DATA 09,09
012C4:  DATA 2D,3E
012C6:  DATA 20,49
012C8:  DATA 6E,76
012CA:  DATA 61,6C
012CC:  DATA 69,64
012CE:  DATA 20,43
012D0:  DATA 4D,44
012D2:  DATA 20,49
012D4:  DATA 44,21
012D6:  DATA 0D,0A
012D8:  DATA 00,00
012DA:  DATA 0D,0A
012DC:  DATA 5F,5F
012DE:  DATA 5F,5F
012E0:  DATA 5F,5F
012E2:  DATA 45,6E
012E4:  DATA 64,20
012E6:  DATA 65,78
012E8:  DATA 65,63
012EA:  DATA 75,74
012EC:  DATA 65,5F
012EE:  DATA 6D,69
012F0:  DATA 73,73
012F2:  DATA 69,6F
012F4:  DATA 6E,5F
012F6:  DATA 5F,5F
012F8:  DATA 5F,5F
012FA:  DATA 5F,0D
012FC:  DATA 0A,5F
012FE:  DATA 5F,5F
01300:  DATA 5F,5F
01302:  DATA 5F,5F
01304:  DATA 5F,5F
01306:  DATA 5F,5F
01308:  DATA 5F,5F
0130A:  DATA 5F,5F
0130C:  DATA 5F,5F
0130E:  DATA 5F,5F
01310:  DATA 5F,5F
01312:  DATA 5F,5F
01314:  DATA 5F,5F
01316:  DATA 5F,5F
01318:  DATA 5F,5F
0131A:  DATA 5F,5F
0131C:  DATA 0D,0A
0131E:  DATA 00,00
01320:  DATA 53,74
01322:  DATA 61,72
01324:  DATA 74,20
01326:  DATA 65,78
01328:  DATA 65,63
0132A:  DATA 75,74
0132C:  DATA 65,5F
0132E:  DATA 63,6F
01330:  DATA 6D,6D
01332:  DATA 61,6E
01334:  DATA 64,0D
01336:  DATA 0A,00
01338:  DATA 09,2D
0133A:  DATA 3E,20
0133C:  DATA 55,70
0133E:  DATA 6C,69
01340:  DATA 6E,6B
01342:  DATA 20,63
01344:  DATA 6F,6D
01346:  DATA 6D,61
01348:  DATA 6E,64
0134A:  DATA 0D,0A
0134C:  DATA 00,00
0134E:  DATA 09,20
01350:  DATA 20,20
01352:  DATA 54,72
01354:  DATA 61,6E
01356:  DATA 73,6D
01358:  DATA 69,74
0135A:  DATA 20,41
0135C:  DATA 63,6B
0135E:  DATA 6E,6F
01360:  DATA 6C,65
01362:  DATA 67,64
01364:  DATA 65,0D
01366:  DATA 0A,00
01368:  DATA 09,2D
0136A:  DATA 3E,20
0136C:  DATA 53,74
0136E:  DATA 61,74
01370:  DATA 75,73
01372:  DATA 20,63
01374:  DATA 68,65
01376:  DATA 63,6B
01378:  DATA 0D,0A
0137A:  DATA 00,00
0137C:  DATA 09,20
0137E:  DATA 20,20
01380:  DATA 54,72
01382:  DATA 61,6E
01384:  DATA 73,6D
01386:  DATA 69,74
01388:  DATA 20,4D
0138A:  DATA 49,53
0138C:  DATA 20,4D
0138E:  DATA 43,55
01390:  DATA 20,53
01392:  DATA 74,61
01394:  DATA 74,75
01396:  DATA 73,0D
01398:  DATA 0A,00
0139A:  DATA 66,69
0139C:  DATA 6E,69
0139E:  DATA 73,68
013A0:  DATA 65,64
013A2:  DATA 20,69
013A4:  DATA 6E,20
013A6:  DATA 73,74
013A8:  DATA 61,74
013AA:  DATA 75,73
013AC:  DATA 5F,63
013AE:  DATA 68,65
013B0:  DATA 63,6B
013B2:  DATA 0D,0A
013B4:  DATA 00,00
013B6:  DATA 09,2D
013B8:  DATA 3E,20
013BA:  DATA 53,4D
013BC:  DATA 46,20
013BE:  DATA 61,76
013C0:  DATA 61,69
013C2:  DATA 6C,61
013C4:  DATA 62,6C
013C6:  DATA 65,20
013C8:  DATA 63,68
013CA:  DATA 65,63
013CC:  DATA 6B,0D
013CE:  DATA 0A,00
013D0:  DATA 09,20
013D2:  DATA 20,20
013D4:  DATA 54,72
013D6:  DATA 61,6E
013D8:  DATA 73,6D
013DA:  DATA 69,74
013DC:  DATA 20,41
013DE:  DATA 63,6B
013E0:  DATA 6E,6F
013E2:  DATA 77,6C
013E4:  DATA 65,64
013E6:  DATA 67,65
013E8:  DATA 6D,65
013EA:  DATA 6E,74
013EC:  DATA 0D,0A
013EE:  DATA 00,00
013F0:  DATA 09,09
013F2:  DATA 2D,3E
013F4:  DATA 20,64
013F6:  DATA 65,6E
013F8:  DATA 69,65
013FA:  DATA 64,0D
013FC:  DATA 0A,00
013FE:  DATA 09,09
01400:  DATA 2D,3E
01402:  DATA 20,61
01404:  DATA 6C,6C
01406:  DATA 6F,77
01408:  DATA 65,64
0140A:  DATA 0D,0A
0140C:  DATA 00,00
0140E:  DATA 09,09
01410:  DATA 2D,3E
01412:  DATA 20,44
01414:  DATA 65,71
01416:  DATA 75,65
01418:  DATA 75,65
0141A:  DATA 64,3A
0141C:  DATA 20,66
0141E:  DATA 75,6E
01420:  DATA 63,3D
01422:  DATA 25,75
01424:  DATA 20,6D
01426:  DATA 69,73
01428:  DATA 73,69
0142A:  DATA 6F,6E
0142C:  DATA 3D,25
0142E:  DATA 75,20
01430:  DATA 73,69
01432:  DATA 7A,65
01434:  DATA 3D,25
01436:  DATA 6C,64
01438:  DATA 20,61
0143A:  DATA 64,64
0143C:  DATA 72,3D
0143E:  DATA 25,6C
01440:  DATA 64,0D
01442:  DATA 0A,00
01444:  DATA 09,09
01446:  DATA 20,20
01448:  DATA 20,55
0144A:  DATA 6E,6B
0144C:  DATA 6E,6F
0144E:  DATA 77,6E
01450:  DATA 20,66
01452:  DATA 75,6E
01454:  DATA 63,5F
01456:  DATA 74,79
01458:  DATA 70,65
0145A:  DATA 3D,25
0145C:  DATA 75,0D
0145E:  DATA 0A,00
01460:  DATA 09,09
01462:  DATA 2D,3E
01464:  DATA 20,43
01466:  DATA 6F,6D
01468:  DATA 70,6C
0146A:  DATA 65,74
0146C:  DATA 65,64
0146E:  DATA 20,25
01470:  DATA 75,20
01472:  DATA 6F,70
01474:  DATA 65,72
01476:  DATA 61,74
01478:  DATA 69,6F
0147A:  DATA 6E,73
0147C:  DATA 0D,0A
0147E:  DATA 00,00
01480:  DATA 09,2D
01482:  DATA 3E,20
01484:  DATA 54,49
01486:  DATA 4D,45
01488:  DATA 20,52
0148A:  DATA 65,63
0148C:  DATA 65,69
0148E:  DATA 76,65
01490:  DATA 0D,0A
01492:  DATA 00,00
01494:  DATA 09,20
01496:  DATA 20,20
01498:  DATA 54,72
0149A:  DATA 61,6E
0149C:  DATA 73,6D
0149E:  DATA 69,74
014A0:  DATA 20,41
014A2:  DATA 63,6B
014A4:  DATA 6E,6F
014A6:  DATA 6C,65
014A8:  DATA 67,64
014AA:  DATA 65,0D
014AC:  DATA 0A,00
014AE:  DATA 09,09
014B0:  DATA 2D,3E
014B2:  DATA 20,53
014B4:  DATA 65,74
014B6:  DATA 20,74
014B8:  DATA 69,6D
014BA:  DATA 65,20
014BC:  DATA 74,6F
014BE:  DATA 20,25
014C0:  DATA 6C,75
014C2:  DATA 20,64
014C4:  DATA 61,79
014C6:  DATA 73,2C
014C8:  DATA 20,25
014CA:  DATA 30,32
014CC:  DATA 75,3A
014CE:  DATA 25,30
014D0:  DATA 32,75
014D2:  DATA 3A,25
014D4:  DATA 30,32
014D6:  DATA 75,0D
014D8:  DATA 0A,00
014DA:  DATA 53,74
014DC:  DATA 61,72
014DE:  DATA 74,20
014E0:  DATA 4D,4F
014E2:  DATA 44,45
014E4:  DATA 20,4D
014E6:  DATA 45,41
014E8:  DATA 53,20
014EA:  DATA 49,56
014EC:  DATA 20,31
014EE:  DATA 20,53
014F0:  DATA 57,45
014F2:  DATA 45,50
014F4:  DATA 0D,0A
014F6:  DATA 00,00
014F8:  DATA 0D,0A
014FA:  DATA 41,44
014FC:  DATA 44,20
014FE:  DATA 53,4D
01500:  DATA 46,20
01502:  DATA 51,55
01504:  DATA 45,55
01506:  DATA 45,0D
01508:  DATA 0A,00
0150A:  DATA 09,4D
0150C:  DATA 69,73
0150E:  DATA 73,69
01510:  DATA 6F,6E
01512:  DATA 20,49
01514:  DATA 44,3A
01516:  DATA 20,20
01518:  DATA 20,25
0151A:  DATA 30,32
0151C:  DATA 58,0D
0151E:  DATA 0A,00
01520:  DATA 09,46
01522:  DATA 75,6E
01524:  DATA 63,74
01526:  DATA 69,6F
01528:  DATA 6E,20
0152A:  DATA 54,79
0152C:  DATA 70,65
0152E:  DATA 3A,25
01530:  DATA 30,32
01532:  DATA 58,0D
01534:  DATA 0A,00
01536:  DATA 09,57
01538:  DATA 72,69
0153A:  DATA 74,65
0153C:  DATA 20,4D
0153E:  DATA 6F,64
01540:  DATA 65,3A
01542:  DATA 20,20
01544:  DATA 20,25
01546:  DATA 30,32
01548:  DATA 58,0D
0154A:  DATA 0A,00
0154C:  DATA 09,53
0154E:  DATA 6F,75
01550:  DATA 72,63
01552:  DATA 65,20
01554:  DATA 54,79
01556:  DATA 70,65
01558:  DATA 3A,20
0155A:  DATA 20,25
0155C:  DATA 30,32
0155E:  DATA 58,0D
01560:  DATA 0A,00
01562:  DATA 09,53
01564:  DATA 74,61
01566:  DATA 72,74
01568:  DATA 20,41
0156A:  DATA 64,64
0156C:  DATA 72,65
0156E:  DATA 73,73
01570:  DATA 3A,25
01572:  DATA 30,34
01574:  DATA 58,0D
01576:  DATA 0A,00
01578:  DATA 09,53
0157A:  DATA 69,7A
0157C:  DATA 65,3A
0157E:  DATA 20,20
01580:  DATA 20,20
01582:  DATA 20,20
01584:  DATA 20,20
01586:  DATA 20,25
01588:  DATA 30,34
0158A:  DATA 58,0D
0158C:  DATA 0A,00
0158E:  DATA 0D,0A
01590:  DATA 41,44
01592:  DATA 44,20
01594:  DATA 53,4D
01596:  DATA 46,20
01598:  DATA 51,55
0159A:  DATA 45,55
0159C:  DATA 45,0D
0159E:  DATA 0A,00
015A0:  DATA 09,4D
015A2:  DATA 69,73
015A4:  DATA 73,69
015A6:  DATA 6F,6E
015A8:  DATA 20,49
015AA:  DATA 44,3A
015AC:  DATA 20,20
015AE:  DATA 20,25
015B0:  DATA 30,32
015B2:  DATA 58,0D
015B4:  DATA 0A,00
015B6:  DATA 09,46
015B8:  DATA 75,6E
015BA:  DATA 63,74
015BC:  DATA 69,6F
015BE:  DATA 6E,20
015C0:  DATA 54,79
015C2:  DATA 70,65
015C4:  DATA 3A,25
015C6:  DATA 30,32
015C8:  DATA 58,0D
015CA:  DATA 0A,00
015CC:  DATA 09,57
015CE:  DATA 72,69
015D0:  DATA 74,65
015D2:  DATA 20,4D
015D4:  DATA 6F,64
015D6:  DATA 65,3A
015D8:  DATA 20,20
015DA:  DATA 20,25
015DC:  DATA 30,32
015DE:  DATA 58,0D
015E0:  DATA 0A,00
015E2:  DATA 09,53
015E4:  DATA 6F,75
015E6:  DATA 72,63
015E8:  DATA 65,20
015EA:  DATA 54,79
015EC:  DATA 70,65
015EE:  DATA 3A,20
015F0:  DATA 20,25
015F2:  DATA 30,32
015F4:  DATA 58,0D
015F6:  DATA 0A,00
015F8:  DATA 09,53
015FA:  DATA 74,61
015FC:  DATA 72,74
015FE:  DATA 20,41
01600:  DATA 64,64
01602:  DATA 72,65
01604:  DATA 73,73
01606:  DATA 3A,25
01608:  DATA 30,34
0160A:  DATA 58,0D
0160C:  DATA 0A,00
0160E:  DATA 09,53
01610:  DATA 69,7A
01612:  DATA 65,3A
01614:  DATA 20,20
01616:  DATA 20,20
01618:  DATA 20,20
0161A:  DATA 20,20
0161C:  DATA 20,25
0161E:  DATA 30,34
01620:  DATA 58,0D
01622:  DATA 0A,00
01624:  DATA 53,74
01626:  DATA 61,72
01628:  DATA 74,20
0162A:  DATA 4D,4F
0162C:  DATA 44,45
0162E:  DATA 20,4D
01630:  DATA 45,41
01632:  DATA 53,20
01634:  DATA 49,56
01636:  DATA 20,50
01638:  DATA 4F,52
0163A:  DATA 54,31
0163C:  DATA 0D,0A
0163E:  DATA 00,00
01640:  DATA 0D,0A
01642:  DATA 41,44
01644:  DATA 44,20
01646:  DATA 53,4D
01648:  DATA 46,20
0164A:  DATA 51,55
0164C:  DATA 45,55
0164E:  DATA 45,0D
01650:  DATA 0A,00
01652:  DATA 09,4D
01654:  DATA 69,73
01656:  DATA 73,69
01658:  DATA 6F,6E
0165A:  DATA 20,49
0165C:  DATA 44,3A
0165E:  DATA 20,20
01660:  DATA 20,25
01662:  DATA 30,32
01664:  DATA 58,0D
01666:  DATA 0A,00
01668:  DATA 09,46
0166A:  DATA 75,6E
0166C:  DATA 63,74
0166E:  DATA 69,6F
01670:  DATA 6E,20
01672:  DATA 54,79
01674:  DATA 70,65
01676:  DATA 3A,25
01678:  DATA 30,32
0167A:  DATA 58,0D
0167C:  DATA 0A,00
0167E:  DATA 09,57
01680:  DATA 72,69
01682:  DATA 74,65
01684:  DATA 20,4D
01686:  DATA 6F,64
01688:  DATA 65,3A
0168A:  DATA 20,20
0168C:  DATA 20,25
0168E:  DATA 30,32
01690:  DATA 58,0D
01692:  DATA 0A,00
01694:  DATA 09,53
01696:  DATA 6F,75
01698:  DATA 72,63
0169A:  DATA 65,20
0169C:  DATA 54,79
0169E:  DATA 70,65
016A0:  DATA 3A,20
016A2:  DATA 20,25
016A4:  DATA 30,32
016A6:  DATA 58,0D
016A8:  DATA 0A,00
016AA:  DATA 09,53
016AC:  DATA 74,61
016AE:  DATA 72,74
016B0:  DATA 20,41
016B2:  DATA 64,64
016B4:  DATA 72,65
016B6:  DATA 73,73
016B8:  DATA 3A,25
016BA:  DATA 30,34
016BC:  DATA 58,0D
016BE:  DATA 0A,00
016C0:  DATA 09,53
016C2:  DATA 69,7A
016C4:  DATA 65,3A
016C6:  DATA 20,20
016C8:  DATA 20,20
016CA:  DATA 20,20
016CC:  DATA 20,20
016CE:  DATA 20,25
016D0:  DATA 30,34
016D2:  DATA 58,0D
016D4:  DATA 0A,00
016D6:  DATA 53,74
016D8:  DATA 61,72
016DA:  DATA 74,20
016DC:  DATA 4D,4F
016DE:  DATA 44,45
016E0:  DATA 20,4D
016E2:  DATA 45,41
016E4:  DATA 53,20
016E6:  DATA 49,56
016E8:  DATA 20,50
016EA:  DATA 4F,52
016EC:  DATA 54,32
016EE:  DATA 0D,0A
016F0:  DATA 00,00
016F2:  DATA 0D,0A
016F4:  DATA 41,44
016F6:  DATA 44,20
016F8:  DATA 53,4D
016FA:  DATA 46,20
016FC:  DATA 51,55
016FE:  DATA 45,55
01700:  DATA 45,0D
01702:  DATA 0A,00
01704:  DATA 09,4D
01706:  DATA 69,73
01708:  DATA 73,69
0170A:  DATA 6F,6E
0170C:  DATA 20,49
0170E:  DATA 44,3A
01710:  DATA 20,20
01712:  DATA 20,25
01714:  DATA 30,32
01716:  DATA 58,0D
01718:  DATA 0A,00
0171A:  DATA 09,46
0171C:  DATA 75,6E
0171E:  DATA 63,74
01720:  DATA 69,6F
01722:  DATA 6E,20
01724:  DATA 54,79
01726:  DATA 70,65
01728:  DATA 3A,25
0172A:  DATA 30,32
0172C:  DATA 58,0D
0172E:  DATA 0A,00
01730:  DATA 09,57
01732:  DATA 72,69
01734:  DATA 74,65
01736:  DATA 20,4D
01738:  DATA 6F,64
0173A:  DATA 65,3A
0173C:  DATA 20,20
0173E:  DATA 20,25
01740:  DATA 30,32
01742:  DATA 58,0D
01744:  DATA 0A,00
01746:  DATA 09,53
01748:  DATA 6F,75
0174A:  DATA 72,63
0174C:  DATA 65,20
0174E:  DATA 54,79
01750:  DATA 70,65
01752:  DATA 3A,20
01754:  DATA 20,25
01756:  DATA 30,32
01758:  DATA 58,0D
0175A:  DATA 0A,00
0175C:  DATA 09,53
0175E:  DATA 74,61
01760:  DATA 72,74
01762:  DATA 20,41
01764:  DATA 64,64
01766:  DATA 72,65
01768:  DATA 73,73
0176A:  DATA 3A,25
0176C:  DATA 30,34
0176E:  DATA 58,0D
01770:  DATA 0A,00
01772:  DATA 09,53
01774:  DATA 69,7A
01776:  DATA 65,3A
01778:  DATA 20,20
0177A:  DATA 20,20
0177C:  DATA 20,20
0177E:  DATA 20,20
01780:  DATA 20,25
01782:  DATA 30,34
01784:  DATA 58,0D
01786:  DATA 0A,00
01788:  DATA 53,74
0178A:  DATA 61,72
0178C:  DATA 74,20
0178E:  DATA 4D,4F
01790:  DATA 44,45
01792:  DATA 20,4D
01794:  DATA 45,41
01796:  DATA 53,20
01798:  DATA 49,56
0179A:  DATA 0D,0A
0179C:  DATA 00,00
0179E:  DATA 0D,0A
017A0:  DATA 41,44
017A2:  DATA 44,20
017A4:  DATA 53,4D
017A6:  DATA 46,20
017A8:  DATA 51,55
017AA:  DATA 45,55
017AC:  DATA 45,0D
017AE:  DATA 0A,00
017B0:  DATA 09,4D
017B2:  DATA 69,73
017B4:  DATA 73,69
017B6:  DATA 6F,6E
017B8:  DATA 20,49
017BA:  DATA 44,3A
017BC:  DATA 20,20
017BE:  DATA 20,25
017C0:  DATA 30,32
017C2:  DATA 58,0D
017C4:  DATA 0A,00
017C6:  DATA 09,46
017C8:  DATA 75,6E
017CA:  DATA 63,74
017CC:  DATA 69,6F
017CE:  DATA 6E,20
017D0:  DATA 54,79
017D2:  DATA 70,65
017D4:  DATA 3A,25
017D6:  DATA 30,32
017D8:  DATA 58,0D
017DA:  DATA 0A,00
017DC:  DATA 09,57
017DE:  DATA 72,69
017E0:  DATA 74,65
017E2:  DATA 20,4D
017E4:  DATA 6F,64
017E6:  DATA 65,3A
017E8:  DATA 20,20
017EA:  DATA 20,25
017EC:  DATA 30,32
017EE:  DATA 58,0D
017F0:  DATA 0A,00
017F2:  DATA 09,53
017F4:  DATA 6F,75
017F6:  DATA 72,63
017F8:  DATA 65,20
017FA:  DATA 54,79
017FC:  DATA 70,65
017FE:  DATA 3A,20
01800:  DATA 20,25
01802:  DATA 30,32
01804:  DATA 58,0D
01806:  DATA 0A,00
01808:  DATA 09,53
0180A:  DATA 74,61
0180C:  DATA 72,74
0180E:  DATA 20,41
01810:  DATA 64,64
01812:  DATA 72,65
01814:  DATA 73,73
01816:  DATA 3A,25
01818:  DATA 30,34
0181A:  DATA 58,0D
0181C:  DATA 0A,00
0181E:  DATA 09,53
01820:  DATA 69,7A
01822:  DATA 65,3A
01824:  DATA 20,20
01826:  DATA 20,20
01828:  DATA 20,20
0182A:  DATA 20,20
0182C:  DATA 20,25
0182E:  DATA 30,34
01830:  DATA 58,0D
01832:  DATA 0A,00
01834:  DATA 0D,0A
01836:  DATA 41,44
01838:  DATA 44,20
0183A:  DATA 53,4D
0183C:  DATA 46,20
0183E:  DATA 51,55
01840:  DATA 45,55
01842:  DATA 45,0D
01844:  DATA 0A,00
01846:  DATA 09,4D
01848:  DATA 69,73
0184A:  DATA 73,69
0184C:  DATA 6F,6E
0184E:  DATA 20,49
01850:  DATA 44,3A
01852:  DATA 20,20
01854:  DATA 20,25
01856:  DATA 30,32
01858:  DATA 58,0D
0185A:  DATA 0A,00
0185C:  DATA 09,46
0185E:  DATA 75,6E
01860:  DATA 63,74
01862:  DATA 69,6F
01864:  DATA 6E,20
01866:  DATA 54,79
01868:  DATA 70,65
0186A:  DATA 3A,25
0186C:  DATA 30,32
0186E:  DATA 58,0D
01870:  DATA 0A,00
01872:  DATA 09,57
01874:  DATA 72,69
01876:  DATA 74,65
01878:  DATA 20,4D
0187A:  DATA 6F,64
0187C:  DATA 65,3A
0187E:  DATA 20,20
01880:  DATA 20,25
01882:  DATA 30,32
01884:  DATA 58,0D
01886:  DATA 0A,00
01888:  DATA 09,53
0188A:  DATA 6F,75
0188C:  DATA 72,63
0188E:  DATA 65,20
01890:  DATA 54,79
01892:  DATA 70,65
01894:  DATA 3A,20
01896:  DATA 20,25
01898:  DATA 30,32
0189A:  DATA 58,0D
0189C:  DATA 0A,00
0189E:  DATA 09,53
018A0:  DATA 74,61
018A2:  DATA 72,74
018A4:  DATA 20,41
018A6:  DATA 64,64
018A8:  DATA 72,65
018AA:  DATA 73,73
018AC:  DATA 3A,25
018AE:  DATA 30,34
018B0:  DATA 58,0D
018B2:  DATA 0A,00
018B4:  DATA 09,53
018B6:  DATA 69,7A
018B8:  DATA 65,3A
018BA:  DATA 20,20
018BC:  DATA 20,20
018BE:  DATA 20,20
018C0:  DATA 20,20
018C2:  DATA 20,25
018C4:  DATA 30,34
018C6:  DATA 58,0D
018C8:  DATA 0A,00
018CA:  DATA 0D,0A
018CC:  DATA 41,44
018CE:  DATA 44,20
018D0:  DATA 53,4D
018D2:  DATA 46,20
018D4:  DATA 51,55
018D6:  DATA 45,55
018D8:  DATA 45,0D
018DA:  DATA 0A,00
018DC:  DATA 09,4D
018DE:  DATA 69,73
018E0:  DATA 73,69
018E2:  DATA 6F,6E
018E4:  DATA 20,49
018E6:  DATA 44,3A
018E8:  DATA 20,20
018EA:  DATA 20,25
018EC:  DATA 30,32
018EE:  DATA 58,0D
018F0:  DATA 0A,00
018F2:  DATA 09,46
018F4:  DATA 75,6E
018F6:  DATA 63,74
018F8:  DATA 69,6F
018FA:  DATA 6E,20
018FC:  DATA 54,79
018FE:  DATA 70,65
01900:  DATA 3A,25
01902:  DATA 30,32
01904:  DATA 58,0D
01906:  DATA 0A,00
01908:  DATA 09,57
0190A:  DATA 72,69
0190C:  DATA 74,65
0190E:  DATA 20,4D
01910:  DATA 6F,64
01912:  DATA 65,3A
01914:  DATA 20,20
01916:  DATA 20,25
01918:  DATA 30,32
0191A:  DATA 58,0D
0191C:  DATA 0A,00
0191E:  DATA 09,53
01920:  DATA 6F,75
01922:  DATA 72,63
01924:  DATA 65,20
01926:  DATA 54,79
01928:  DATA 70,65
0192A:  DATA 3A,20
0192C:  DATA 20,25
0192E:  DATA 30,32
01930:  DATA 58,0D
01932:  DATA 0A,00
01934:  DATA 09,53
01936:  DATA 74,61
01938:  DATA 72,74
0193A:  DATA 20,41
0193C:  DATA 64,64
0193E:  DATA 72,65
01940:  DATA 73,73
01942:  DATA 3A,25
01944:  DATA 30,34
01946:  DATA 58,0D
01948:  DATA 0A,00
0194A:  DATA 09,53
0194C:  DATA 69,7A
0194E:  DATA 65,3A
01950:  DATA 20,20
01952:  DATA 20,20
01954:  DATA 20,20
01956:  DATA 20,20
01958:  DATA 20,25
0195A:  DATA 30,34
0195C:  DATA 58,0D
0195E:  DATA 0A,00
01960:  DATA 45,6E
01962:  DATA 64,20
01964:  DATA 4D,4F
01966:  DATA 44,45
01968:  DATA 20,4D
0196A:  DATA 45,41
0196C:  DATA 53,20
0196E:  DATA 49,56
01970:  DATA 20,6D
01972:  DATA 69,73
01974:  DATA 73,69
01976:  DATA 6F,6E
01978:  DATA 0D,0A
0197A:  DATA 00,00
0197C:  DATA 53,74
0197E:  DATA 61,72
01980:  DATA 74,20
01982:  DATA 4D,4F
01984:  DATA 44,45
01986:  DATA 20,49
01988:  DATA 56,20
0198A:  DATA 44,45
0198C:  DATA 42,55
0198E:  DATA 47,0D
01990:  DATA 0A,00
01992:  DATA 09,49
01994:  DATA 44,3A
01996:  DATA 20,25
01998:  DATA 30,32
0199A:  DATA 58,0D
0199C:  DATA 0A,00
0199E:  DATA 09,53
019A0:  DATA 6C,65
019A2:  DATA 65,70
019A4:  DATA 54,69
019A6:  DATA 6D,65
019A8:  DATA 3A,20
019AA:  DATA 20,20
019AC:  DATA 20,20
019AE:  DATA 20,20
019B0:  DATA 20,30
019B2:  DATA 78,25
019B4:  DATA 30,34
019B6:  DATA 58,0D
019B8:  DATA 0A,00
019BA:  DATA 09,4C
019BC:  DATA 6F,67
019BE:  DATA 43,75
019C0:  DATA 72,72
019C2:  DATA 54,68
019C4:  DATA 72,65
019C6:  DATA 73,68
019C8:  DATA 6F,6C
019CA:  DATA 64,3A
019CC:  DATA 20,30
019CE:  DATA 78,25
019D0:  DATA 30,34
019D2:  DATA 58,0D
019D4:  DATA 0A,00
019D6:  DATA 09,50
019D8:  DATA 44,54
019DA:  DATA 68,72
019DC:  DATA 65,73
019DE:  DATA 68,6F
019E0:  DATA 6C,64
019E2:  DATA 3A,20
019E4:  DATA 20,20
019E6:  DATA 20,20
019E8:  DATA 20,30
019EA:  DATA 78,25
019EC:  DATA 30,34
019EE:  DATA 58,0D
019F0:  DATA 0A,00
019F2:  DATA 09,43
019F4:  DATA 75,72
019F6:  DATA 72,65
019F8:  DATA 6E,74
019FA:  DATA 4C,69
019FC:  DATA 6D,69
019FE:  DATA 74,3A
01A00:  DATA 20,20
01A02:  DATA 20,20
01A04:  DATA 20,30
01A06:  DATA 78,25
01A08:  DATA 30,34
01A0A:  DATA 58,0D
01A0C:  DATA 0A,00
01A0E:  DATA 09,4D
01A10:  DATA 65,61
01A12:  DATA 73,75
01A14:  DATA 72,65
01A16:  DATA 6D,65
01A18:  DATA 6E,74
01A1A:  DATA 54,69
01A1C:  DATA 6D,65
01A1E:  DATA 3A,20
01A20:  DATA 20,30
01A22:  DATA 78,25
01A24:  DATA 30,34
01A26:  DATA 58,0D
01A28:  DATA 0A,00
01A2A:  DATA 5B,49
01A2C:  DATA 56,44
01A2E:  DATA 42,47
01A30:  DATA 5D,20
01A32:  DATA 45,6E
01A34:  DATA 64,20
01A36:  DATA 4D,4F
01A38:  DATA 44,45
01A3A:  DATA 20,49
01A3C:  DATA 56,20
01A3E:  DATA 44,45
01A40:  DATA 42,55
01A42:  DATA 47,0D
01A44:  DATA 0A,00
01A46:  DATA 74,65
01A48:  DATA 6D,70
01A4A:  DATA 5F,74
01A4C:  DATA 6F,70
01A4E:  DATA 2C,20
01A50:  DATA 74,65
01A52:  DATA 6D,70
01A54:  DATA 5F,62
01A56:  DATA 6F,74
01A58:  DATA 2C,20
01A5A:  DATA 74,65
01A5C:  DATA 6D,70
01A5E:  DATA 5F,6D
01A60:  DATA 69,73
01A62:  DATA 37,2C
01A64:  DATA 20,70
01A66:  DATA 64,0D
01A68:  DATA 0A,00
01A6A:  DATA 4D,45
01A6C:  DATA 41,53
01A6E:  DATA 20,49
01A70:  DATA 56,20
01A72:  DATA 43,6F
01A74:  DATA 6D,6D
01A76:  DATA 61,6E
01A78:  DATA 64,20
01A7A:  DATA 50,61
01A7C:  DATA 72,61
01A7E:  DATA 6D,65
01A80:  DATA 74,65
01A82:  DATA 72,73
01A84:  DATA 3A,0D
01A86:  DATA 0A,00
01A88:  DATA 09,49
01A8A:  DATA 44,3A
01A8C:  DATA 20,25
01A8E:  DATA 30,32
01A90:  DATA 58,0D
01A92:  DATA 0A,00
01A94:  DATA 09,53
01A96:  DATA 77,65
01A98:  DATA 65,70
01A9A:  DATA 49,6E
01A9C:  DATA 74,65
01A9E:  DATA 72,76
01AA0:  DATA 61,6C
01AA2:  DATA 20,20
01AA4:  DATA 20,3A
01AA6:  DATA 25,6C
01AA8:  DATA 75,5B
01AAA:  DATA 6D,73
01AAC:  DATA 5D,0D
01AAE:  DATA 0A,00
01AB0:  DATA 09,50
01AB2:  DATA 44,20
01AB4:  DATA 54,68
01AB6:  DATA 72,65
01AB8:  DATA 73,68
01ABA:  DATA 6F,6C
01ABC:  DATA 64,20
01ABE:  DATA 20,20
01AC0:  DATA 20,3A
01AC2:  DATA 25,6C
01AC4:  DATA 75,5B
01AC6:  DATA 57,2F
01AC8:  DATA 6D,32
01ACA:  DATA 5D,0D
01ACC:  DATA 0A,00
01ACE:  DATA 09,53
01AD0:  DATA 77,65
01AD2:  DATA 65,70
01AD4:  DATA 4C,69
01AD6:  DATA 6D,69
01AD8:  DATA 74,20
01ADA:  DATA 20,20
01ADC:  DATA 20,20
01ADE:  DATA 20,3A
01AE0:  DATA 25,6C
01AE2:  DATA 75,5B
01AE4:  DATA 6D,41
01AE6:  DATA 5D,0D
01AE8:  DATA 0A,00
01AEA:  DATA 09,4C
01AEC:  DATA 6F,67
01AEE:  DATA 54,68
01AF0:  DATA 72,65
01AF2:  DATA 73,68
01AF4:  DATA 6F,6C
01AF6:  DATA 64,20
01AF8:  DATA 20,20
01AFA:  DATA 20,3A
01AFC:  DATA 25,6C
01AFE:  DATA 75,5B
01B00:  DATA 6D,41
01B02:  DATA 5D,0D
01B04:  DATA 0A,00
01B06:  DATA 09,4D
01B08:  DATA 65,61
01B0A:  DATA 73,75
01B0C:  DATA 72,65
01B0E:  DATA 6D,65
01B10:  DATA 6E,74
01B12:  DATA 54,69
01B14:  DATA 6D,65
01B16:  DATA 20,3A
01B18:  DATA 25,6C
01B1A:  DATA 75,5B
01B1C:  DATA 73,5D
01B1E:  DATA 0D,0A
01B20:  DATA 0D,0A
01B22:  DATA 00,00
01B24:  DATA 53,74
01B26:  DATA 61,72
01B28:  DATA 74,20
01B2A:  DATA 4D,4F
01B2C:  DATA 44,45
01B2E:  DATA 20,4D
01B30:  DATA 45,41
01B32:  DATA 53,20
01B34:  DATA 50,44
01B36:  DATA 0D,0A
01B38:  DATA 00,00
01B3A:  DATA 45,6E
01B3C:  DATA 64,20
01B3E:  DATA 4D,4F
01B40:  DATA 44,45
01B42:  DATA 20,4D
01B44:  DATA 45,41
01B46:  DATA 53,20
01B48:  DATA 50,44
01B4A:  DATA 0D,0A
01B4C:  DATA 00,00
01B4E:  DATA 53,74
01B50:  DATA 61,72
01B52:  DATA 74,20
01B54:  DATA 46,6C
01B56:  DATA 61,73
01B58:  DATA 68,20
01B5A:  DATA 45,72
01B5C:  DATA 61,73
01B5E:  DATA 65,20
01B60:  DATA 41,6C
01B62:  DATA 6C,0D
01B64:  DATA 0A,00
01B66:  DATA 45,6E
01B68:  DATA 64,20
01B6A:  DATA 46,6C
01B6C:  DATA 61,73
01B6E:  DATA 68,20
01B70:  DATA 45,72
01B72:  DATA 61,73
01B74:  DATA 65,20
01B76:  DATA 41,6C
01B78:  DATA 6C,0D
01B7A:  DATA 0A,00
01B7C:  DATA 53,74
01B7E:  DATA 61,72
01B80:  DATA 74,20
01B82:  DATA 46,6C
01B84:  DATA 61,73
01B86:  DATA 68,20
01B88:  DATA 45,72
01B8A:  DATA 61,73
01B8C:  DATA 65,20
01B8E:  DATA 31,20
01B90:  DATA 53,65
01B92:  DATA 63,74
01B94:  DATA 6F,72
01B96:  DATA 0D,0A
01B98:  DATA 00,00
01B9A:  DATA 09,53
01B9C:  DATA 65,63
01B9E:  DATA 74,6F
01BA0:  DATA 72,20
01BA2:  DATA 41,64
01BA4:  DATA 64,72
01BA6:  DATA 65,73
01BA8:  DATA 73,3A
01BAA:  DATA 20,30
01BAC:  DATA 78,25
01BAE:  DATA 30,38
01BB0:  DATA 4C,58
01BB2:  DATA 0D,0A
01BB4:  DATA 00,00
01BB6:  DATA 45,6E
01BB8:  DATA 64,20
01BBA:  DATA 46,6C
01BBC:  DATA 61,73
01BBE:  DATA 68,20
01BC0:  DATA 45,72
01BC2:  DATA 61,73
01BC4:  DATA 65,20
01BC6:  DATA 31,20
01BC8:  DATA 53,65
01BCA:  DATA 63,74
01BCC:  DATA 6F,72
01BCE:  DATA 0D,0A
01BD0:  DATA 00,00
01BD2:  DATA 53,74
01BD4:  DATA 61,72
01BD6:  DATA 74,20
01BD8:  DATA 46,6C
01BDA:  DATA 61,73
01BDC:  DATA 68,20
01BDE:  DATA 45,72
01BE0:  DATA 61,73
01BE2:  DATA 65,20
01BE4:  DATA 34,6B
01BE6:  DATA 42,79
01BE8:  DATA 74,65
01BEA:  DATA 20,53
01BEC:  DATA 75,62
01BEE:  DATA 73,65
01BF0:  DATA 63,74
01BF2:  DATA 6F,72
01BF4:  DATA 0D,0A
01BF6:  DATA 00,00
01BF8:  DATA 09,53
01BFA:  DATA 75,62
01BFC:  DATA 73,65
01BFE:  DATA 63,74
01C00:  DATA 6F,72
01C02:  DATA 20,41
01C04:  DATA 64,64
01C06:  DATA 72,65
01C08:  DATA 73,73
01C0A:  DATA 3A,20
01C0C:  DATA 30,78
01C0E:  DATA 25,30
01C10:  DATA 38,4C
01C12:  DATA 58,0D
01C14:  DATA 0A,00
01C16:  DATA 45,6E
01C18:  DATA 64,20
01C1A:  DATA 46,6C
01C1C:  DATA 61,73
01C1E:  DATA 68,20
01C20:  DATA 45,72
01C22:  DATA 61,73
01C24:  DATA 65,20
01C26:  DATA 34,6B
01C28:  DATA 42,79
01C2A:  DATA 74,65
01C2C:  DATA 20,53
01C2E:  DATA 75,62
01C30:  DATA 73,65
01C32:  DATA 63,74
01C34:  DATA 6F,72
01C36:  DATA 0D,0A
01C38:  DATA 00,00
01C3A:  DATA 53,74
01C3C:  DATA 61,72
01C3E:  DATA 74,20
01C40:  DATA 46,6C
01C42:  DATA 61,73
01C44:  DATA 68,20
01C46:  DATA 45,72
01C48:  DATA 61,73
01C4A:  DATA 65,20
01C4C:  DATA 36,34
01C4E:  DATA 6B,42
01C50:  DATA 79,74
01C52:  DATA 65,20
01C54:  DATA 53,75
01C56:  DATA 62,73
01C58:  DATA 65,63
01C5A:  DATA 74,6F
01C5C:  DATA 72,0D
01C5E:  DATA 0A,00
01C60:  DATA 09,53
01C62:  DATA 75,62
01C64:  DATA 73,65
01C66:  DATA 63,74
01C68:  DATA 6F,72
01C6A:  DATA 20,41
01C6C:  DATA 64,64
01C6E:  DATA 72,65
01C70:  DATA 73,73
01C72:  DATA 3A,20
01C74:  DATA 30,78
01C76:  DATA 25,30
01C78:  DATA 38,4C
01C7A:  DATA 58,0D
01C7C:  DATA 0A,00
01C7E:  DATA 45,6E
01C80:  DATA 64,20
01C82:  DATA 46,6C
01C84:  DATA 61,73
01C86:  DATA 68,20
01C88:  DATA 45,72
01C8A:  DATA 61,73
01C8C:  DATA 65,20
01C8E:  DATA 36,34
01C90:  DATA 6B,42
01C92:  DATA 79,74
01C94:  DATA 65,20
01C96:  DATA 53,75
01C98:  DATA 62,73
01C9A:  DATA 65,63
01C9C:  DATA 74,6F
01C9E:  DATA 72,0D
01CA0:  DATA 0A,00
01CA2:  DATA 53,74
01CA4:  DATA 61,72
01CA6:  DATA 74,20
01CA8:  DATA 46,6C
01CAA:  DATA 61,73
01CAC:  DATA 68,20
01CAE:  DATA 57,72
01CB0:  DATA 69,74
01CB2:  DATA 65,20
01CB4:  DATA 44,65
01CB6:  DATA 6D,6F
01CB8:  DATA 0D,0A
01CBA:  DATA 00,00
01CBC:  DATA 09,4D
01CBE:  DATA 4F,44
01CC0:  DATA 45,20
01CC2:  DATA 20,20
01CC4:  DATA 20,20
01CC6:  DATA 3A,20
01CC8:  DATA 25,30
01CCA:  DATA 32,58
01CCC:  DATA 0D,0A
01CCE:  DATA 00,00
01CD0:  DATA 09,41
01CD2:  DATA 64,64
01CD4:  DATA 72,65
01CD6:  DATA 73,73
01CD8:  DATA 20,20
01CDA:  DATA 3A,20
01CDC:  DATA 30,78
01CDE:  DATA 25,30
01CE0:  DATA 38,4C
01CE2:  DATA 58,0D
01CE4:  DATA 0A,00
01CE6:  DATA 09,50
01CE8:  DATA 61,63
01CEA:  DATA 6B,65
01CEC:  DATA 74,4E
01CEE:  DATA 75,6D
01CF0:  DATA 3A,20
01CF2:  DATA 30,78
01CF4:  DATA 25,30
01CF6:  DATA 34,4C
01CF8:  DATA 58,0D
01CFA:  DATA 0A,00
01CFC:  DATA 57,72
01CFE:  DATA 69,74
01D00:  DATA 65,20
01D02:  DATA 44,61
01D04:  DATA 74,61
01D06:  DATA 0D,0A
01D08:  DATA 00,00
01D0A:  DATA 0D,0A
01D0C:  DATA 5B,46
01D0E:  DATA 4C,41
01D10:  DATA 53,48
01D12:  DATA 5D,20
01D14:  DATA 57,72
01D16:  DATA 69,74
01D18:  DATA 65,20
01D1A:  DATA 61,64
01D1C:  DATA 64,72
01D1E:  DATA 65,73
01D20:  DATA 73,20
01D22:  DATA 30,78
01D24:  DATA 25,30
01D26:  DATA 38,4C
01D28:  DATA 58,20
01D2A:  DATA 65,78
01D2C:  DATA 63,65
01D2E:  DATA 65,64
01D30:  DATA 73,20
01D32:  DATA 64,65
01D34:  DATA 76,69
01D36:  DATA 63,65
01D38:  DATA 20,65
01D3A:  DATA 6E,64
01D3C:  DATA 20,30
01D3E:  DATA 78,25
01D40:  DATA 30,38
01D42:  DATA 4C,58
01D44:  DATA 20,2D
01D46:  DATA 3E,20
01D48:  DATA 61,62
01D4A:  DATA 6F,72
01D4C:  DATA 74,0D
01D4E:  DATA 0A,00
01D50:  DATA 0D,0A
01D52:  DATA 5B,46
01D54:  DATA 4C,41
01D56:  DATA 53,48
01D58:  DATA 5D,20
01D5A:  DATA 52,65
01D5C:  DATA 61,63
01D5E:  DATA 68,65
01D60:  DATA 64,20
01D62:  DATA 65,6E
01D64:  DATA 64,2E
01D66:  DATA 20,50
01D68:  DATA 61,72
01D6A:  DATA 74,69
01D6C:  DATA 61,6C
01D6E:  DATA 20,77
01D70:  DATA 72,69
01D72:  DATA 74,65
01D74:  DATA 20,25
01D76:  DATA 6C,75
01D78:  DATA 20,62
01D7A:  DATA 79,74
01D7C:  DATA 65,73
01D7E:  DATA 20,28
01D80:  DATA 70,61
01D82:  DATA 63,6B
01D84:  DATA 65,74
01D86:  DATA 20,74
01D88:  DATA 72,75
01D8A:  DATA 6E,63
01D8C:  DATA 61,74
01D8E:  DATA 65,64
01D90:  DATA 29,2E
01D92:  DATA 0D,0A
01D94:  DATA 00,00
01D96:  DATA 45,6E
01D98:  DATA 64,20
01D9A:  DATA 46,6C
01D9C:  DATA 61,73
01D9E:  DATA 68,20
01DA0:  DATA 57,72
01DA2:  DATA 69,74
01DA4:  DATA 65,20
01DA6:  DATA 44,65
01DA8:  DATA 6D,6F
01DAA:  DATA 0D,0A
01DAC:  DATA 00,00
01DAE:  DATA 53,74
01DB0:  DATA 61,72
01DB2:  DATA 74,20
01DB4:  DATA 46,6C
01DB6:  DATA 61,73
01DB8:  DATA 68,20
01DBA:  DATA 57,72
01DBC:  DATA 69,74
01DBE:  DATA 65,20
01DC0:  DATA 34,6B
01DC2:  DATA 42,79
01DC4:  DATA 74,65
01DC6:  DATA 20,53
01DC8:  DATA 75,62
01DCA:  DATA 73,65
01DCC:  DATA 63,74
01DCE:  DATA 6F,72
01DD0:  DATA 0D,0A
01DD2:  DATA 00,00
01DD4:  DATA 45,6E
01DD6:  DATA 64,20
01DD8:  DATA 46,6C
01DDA:  DATA 61,73
01DDC:  DATA 68,20
01DDE:  DATA 57,72
01DE0:  DATA 69,74
01DE2:  DATA 65,20
01DE4:  DATA 34,6B
01DE6:  DATA 42,79
01DE8:  DATA 74,65
01DEA:  DATA 20,53
01DEC:  DATA 75,62
01DEE:  DATA 73,65
01DF0:  DATA 63,74
01DF2:  DATA 6F,72
01DF4:  DATA 0D,0A
01DF6:  DATA 00,00
01DF8:  DATA 53,74
01DFA:  DATA 61,72
01DFC:  DATA 74,20
01DFE:  DATA 46,6C
01E00:  DATA 61,73
01E02:  DATA 68,20
01E04:  DATA 52,65
01E06:  DATA 61,64
01E08:  DATA 0D,0A
01E0A:  DATA 00,00
01E0C:  DATA 09,4D
01E0E:  DATA 4F,44
01E10:  DATA 45,20
01E12:  DATA 20,20
01E14:  DATA 20,20
01E16:  DATA 3A,20
01E18:  DATA 25,30
01E1A:  DATA 32,58
01E1C:  DATA 0D,0A
01E1E:  DATA 00,00
01E20:  DATA 09,41
01E22:  DATA 64,64
01E24:  DATA 72,65
01E26:  DATA 73,73
01E28:  DATA 20,20
01E2A:  DATA 3A,20
01E2C:  DATA 30,78
01E2E:  DATA 25,30
01E30:  DATA 38,4C
01E32:  DATA 58,0D
01E34:  DATA 0A,00
01E36:  DATA 09,50
01E38:  DATA 61,63
01E3A:  DATA 6B,65
01E3C:  DATA 74,4E
01E3E:  DATA 75,6D
01E40:  DATA 3A,20
01E42:  DATA 30,78
01E44:  DATA 25,30
01E46:  DATA 34,4C
01E48:  DATA 58,0D
01E4A:  DATA 0A,00
01E4C:  DATA 41,44
01E4E:  DATA 44,52
01E50:  DATA 45,53
01E52:  DATA 53,20
01E54:  DATA 20,3A
01E56:  DATA 0D,0A
01E58:  DATA 00,00
01E5A:  DATA 4D,69
01E5C:  DATA 73,73
01E5E:  DATA 69,6F
01E60:  DATA 6E,20
01E62:  DATA 46,6C
01E64:  DATA 61,73
01E66:  DATA 68,20
01E68:  DATA 69,73
01E6A:  DATA 20,6E
01E6C:  DATA 6F,74
01E6E:  DATA 20,63
01E70:  DATA 6F,6E
01E72:  DATA 6E,65
01E74:  DATA 63,74
01E76:  DATA 65,64
01E78:  DATA 0D,0A
01E7A:  DATA 00,00
01E7C:  DATA 5B,46
01E7E:  DATA 4C,41
01E80:  DATA 53,48
01E82:  DATA 5D,20
01E84:  DATA 52,65
01E86:  DATA 61,64
01E88:  DATA 20,61
01E8A:  DATA 64,64
01E8C:  DATA 72,65
01E8E:  DATA 73,73
01E90:  DATA 20,30
01E92:  DATA 78,25
01E94:  DATA 30,38
01E96:  DATA 4C,58
01E98:  DATA 20,65
01E9A:  DATA 78,63
01E9C:  DATA 65,65
01E9E:  DATA 64,73
01EA0:  DATA 20,64
01EA2:  DATA 65,76
01EA4:  DATA 69,63
01EA6:  DATA 65,20
01EA8:  DATA 65,6E
01EAA:  DATA 64,20
01EAC:  DATA 30,78
01EAE:  DATA 25,30
01EB0:  DATA 38,4C
01EB2:  DATA 58,20
01EB4:  DATA 2D,3E
01EB6:  DATA 20,73
01EB8:  DATA 74,6F
01EBA:  DATA 70,0D
01EBC:  DATA 0A,00
01EBE:  DATA 5B,46
01EC0:  DATA 4C,41
01EC2:  DATA 53,48
01EC4:  DATA 5D,20
01EC6:  DATA 45,6E
01EC8:  DATA 64,20
01ECA:  DATA 72,65
01ECC:  DATA 61,63
01ECE:  DATA 68,65
01ED0:  DATA 64,2E
01ED2:  DATA 20,50
01ED4:  DATA 61,72
01ED6:  DATA 74,69
01ED8:  DATA 61,6C
01EDA:  DATA 20,72
01EDC:  DATA 65,61
01EDE:  DATA 64,20
01EE0:  DATA 25,6C
01EE2:  DATA 75,20
01EE4:  DATA 62,79
01EE6:  DATA 74,65
01EE8:  DATA 73,2E
01EEA:  DATA 0D,0A
01EEC:  DATA 00,00
01EEE:  DATA 25,30
01EF0:  DATA 38,4C
01EF2:  DATA 58,20
01EF4:  DATA 3A,20
01EF6:  DATA 00,00
01EF8:  DATA 45,6E
01EFA:  DATA 64,20
01EFC:  DATA 46,6C
01EFE:  DATA 61,73
01F00:  DATA 68,20
01F02:  DATA 52,65
01F04:  DATA 61,64
01F06:  DATA 0D,0A
01F08:  DATA 00,00
01F0A:  DATA 53,74
01F0C:  DATA 61,72
01F0E:  DATA 74,20
01F10:  DATA 46,6C
01F12:  DATA 61,73
01F14:  DATA 68,20
01F16:  DATA 52,65
01F18:  DATA 61,64
01F1A:  DATA 20,41
01F1C:  DATA 64,64
01F1E:  DATA 72,65
01F20:  DATA 73,73
01F22:  DATA 0D,0A
01F24:  DATA 00,00
01F26:  DATA 52,65
01F28:  DATA 61,64
01F2A:  DATA 20,44
01F2C:  DATA 61,74
01F2E:  DATA 61,3A
01F30:  DATA 20,25
01F32:  DATA 30,32
01F34:  DATA 58,20
01F36:  DATA 25,30
01F38:  DATA 32,58
01F3A:  DATA 20,25
01F3C:  DATA 30,32
01F3E:  DATA 58,20
01F40:  DATA 25,30
01F42:  DATA 32,58
01F44:  DATA 0D,0A
01F46:  DATA 00,00
01F48:  DATA 45,6E
01F4A:  DATA 64,20
01F4C:  DATA 46,6C
01F4E:  DATA 61,73
01F50:  DATA 68,20
01F52:  DATA 52,65
01F54:  DATA 61,64
01F56:  DATA 20,41
01F58:  DATA 64,64
01F5A:  DATA 72,65
01F5C:  DATA 73,73
01F5E:  DATA 0D,0A
01F60:  DATA 00,00
01F62:  DATA 53,74
01F64:  DATA 61,72
01F66:  DATA 74,20
01F68:  DATA 46,6C
01F6A:  DATA 61,73
01F6C:  DATA 68,20
01F6E:  DATA 45,72
01F70:  DATA 61,73
01F72:  DATA 65,20
01F74:  DATA 61,6E
01F76:  DATA 64,20
01F78:  DATA 52,65
01F7A:  DATA 73,65
01F7C:  DATA 74,0D
01F7E:  DATA 0A,00
01F80:  DATA 45,6E
01F82:  DATA 64,20
01F84:  DATA 46,6C
01F86:  DATA 61,73
01F88:  DATA 68,20
01F8A:  DATA 45,72
01F8C:  DATA 61,73
01F8E:  DATA 65,20
01F90:  DATA 61,6E
01F92:  DATA 64,20
01F94:  DATA 52,65
01F96:  DATA 73,65
01F98:  DATA 74,0D
01F9A:  DATA 0A,00
01F9C:  DATA 53,74
01F9E:  DATA 61,72
01FA0:  DATA 74,20
01FA2:  DATA 46,6C
01FA4:  DATA 61,73
01FA6:  DATA 68,20
01FA8:  DATA 53,4D
01FAA:  DATA 46,20
01FAC:  DATA 43,6F
01FAE:  DATA 70,79
01FB0:  DATA 0D,0A
01FB2:  DATA 00,00
01FB4:  DATA 45,6E
01FB6:  DATA 64,20
01FB8:  DATA 46,6C
01FBA:  DATA 61,73
01FBC:  DATA 68,20
01FBE:  DATA 53,4D
01FC0:  DATA 46,20
01FC2:  DATA 43,6F
01FC4:  DATA 70,79
01FC6:  DATA 0D,0A
01FC8:  DATA 00,00
01FCA:  DATA 53,74
01FCC:  DATA 61,72
01FCE:  DATA 74,20
01FD0:  DATA 46,6C
01FD2:  DATA 61,73
01FD4:  DATA 68,20
01FD6:  DATA 53,4D
01FD8:  DATA 46,20
01FDA:  DATA 52,65
01FDC:  DATA 61,64
01FDE:  DATA 0D,0A
01FE0:  DATA 00,00
01FE2:  DATA 09,41
01FE4:  DATA 64,64
01FE6:  DATA 72,65
01FE8:  DATA 73,73
01FEA:  DATA 20,20
01FEC:  DATA 3A,20
01FEE:  DATA 30,78
01FF0:  DATA 25,30
01FF2:  DATA 38,4C
01FF4:  DATA 58,0D
01FF6:  DATA 0A,00
01FF8:  DATA 09,50
01FFA:  DATA 61,63
01FFC:  DATA 6B,65
01FFE:  DATA 74,4E
02000:  DATA 75,6D
02002:  DATA 3A,20
02004:  DATA 30,78
02006:  DATA 25,30
02008:  DATA 34,4C
0200A:  DATA 58,0D
0200C:  DATA 0A,00
0200E:  DATA 52,65
02010:  DATA 61,64
02012:  DATA 20,44
02014:  DATA 61,74
02016:  DATA 61,0D
02018:  DATA 0A,00
0201A:  DATA 0D,0A
0201C:  DATA 45,6E
0201E:  DATA 64,20
02020:  DATA 46,6C
02022:  DATA 61,73
02024:  DATA 68,20
02026:  DATA 53,4D
02028:  DATA 46,20
0202A:  DATA 52,65
0202C:  DATA 61,64
0202E:  DATA 0D,0A
02030:  DATA 00,00
02032:  DATA 53,74
02034:  DATA 61,72
02036:  DATA 74,20
02038:  DATA 46,6C
0203A:  DATA 61,73
0203C:  DATA 68,20
0203E:  DATA 53,4D
02040:  DATA 46,20
02042:  DATA 45,72
02044:  DATA 61,73
02046:  DATA 65,0D
02048:  DATA 0A,00
0204A:  DATA 45,6E
0204C:  DATA 64,20
0204E:  DATA 46,6C
02050:  DATA 61,73
02052:  DATA 68,20
02054:  DATA 53,4D
02056:  DATA 46,20
02058:  DATA 45,72
0205A:  DATA 61,73
0205C:  DATA 65,0D
0205E:  DATA 0A,00
02060:  DATA 53,74
02062:  DATA 61,72
02064:  DATA 74,20
02066:  DATA 46,6C
02068:  DATA 61,73
0206A:  DATA 68,20
0206C:  DATA 41,64
0206E:  DATA 64,72
02070:  DATA 65,73
02072:  DATA 73,20
02074:  DATA 52,65
02076:  DATA 73,65
02078:  DATA 74,0D
0207A:  DATA 0A,00
0207C:  DATA 45,6E
0207E:  DATA 64,20
02080:  DATA 46,6C
02082:  DATA 61,73
02084:  DATA 68,20
02086:  DATA 41,64
02088:  DATA 64,72
0208A:  DATA 65,73
0208C:  DATA 73,20
0208E:  DATA 52,65
02090:  DATA 73,65
02092:  DATA 74,0D
02094:  DATA 0A,00
02096:  DATA 53,4D
02098:  DATA 46,20
0209A:  DATA 69,73
0209C:  DATA 20,6E
0209E:  DATA 6F,74
020A0:  DATA 20,63
020A2:  DATA 6F,6E
020A4:  DATA 6E,65
020A6:  DATA 63,74
020A8:  DATA 65,64
020AA:  DATA 0D,0A
020AC:  DATA 00,00
020AE:  DATA 53,74
020B0:  DATA 61,72
020B2:  DATA 74,20
020B4:  DATA 46,6C
020B6:  DATA 61,73
020B8:  DATA 68,20
020BA:  DATA 53,4D
020BC:  DATA 46,20
020BE:  DATA 52,65
020C0:  DATA 61,64
020C2:  DATA 20,46
020C4:  DATA 6F,72
020C6:  DATA 63,65
020C8:  DATA 0D,0A
020CA:  DATA 00,00
020CC:  DATA 09,41
020CE:  DATA 64,64
020D0:  DATA 72,65
020D2:  DATA 73,73
020D4:  DATA 20,20
020D6:  DATA 3A,20
020D8:  DATA 30,78
020DA:  DATA 25,30
020DC:  DATA 38,4C
020DE:  DATA 58,0D
020E0:  DATA 0A,00
020E2:  DATA 09,50
020E4:  DATA 61,63
020E6:  DATA 6B,65
020E8:  DATA 74,4E
020EA:  DATA 75,6D
020EC:  DATA 3A,20
020EE:  DATA 30,78
020F0:  DATA 25,30
020F2:  DATA 34,4C
020F4:  DATA 58,0D
020F6:  DATA 0A,00
020F8:  DATA 72,65
020FA:  DATA 61,64
020FC:  DATA 20,64
020FE:  DATA 61,74
02100:  DATA 61,0D
02102:  DATA 0A,00
02104:  DATA 0D,0A
02106:  DATA 45,6E
02108:  DATA 64,20
0210A:  DATA 46,6C
0210C:  DATA 61,73
0210E:  DATA 68,20
02110:  DATA 53,4D
02112:  DATA 46,20
02114:  DATA 52,65
02116:  DATA 61,64
02118:  DATA 20,46
0211A:  DATA 6F,72
0211C:  DATA 63,65
0211E:  DATA 0D,0A
02120:  DATA 00,00
02122:  DATA 53,74
02124:  DATA 61,72
02126:  DATA 74,20
02128:  DATA 53,4D
0212A:  DATA 46,20
0212C:  DATA 45,72
0212E:  DATA 61,73
02130:  DATA 65,20
02132:  DATA 41,6C
02134:  DATA 6C,0D
02136:  DATA 0A,00
02138:  DATA 45,6E
0213A:  DATA 64,20
0213C:  DATA 53,4D
0213E:  DATA 46,20
02140:  DATA 45,72
02142:  DATA 61,73
02144:  DATA 65,20
02146:  DATA 41,6C
02148:  DATA 6C,0D
0214A:  DATA 0A,00
0214C:  DATA 53,74
0214E:  DATA 61,72
02150:  DATA 74,20
02152:  DATA 53,4D
02154:  DATA 46,20
02156:  DATA 52,65
02158:  DATA 73,65
0215A:  DATA 74,0D
0215C:  DATA 0A,00
0215E:  DATA 45,6E
02160:  DATA 64,20
02162:  DATA 53,4D
02164:  DATA 46,20
02166:  DATA 52,65
02168:  DATA 73,65
0216A:  DATA 74,0D
0216C:  DATA 0A,00
0216E:  DATA 0D,0A
02170:  DATA 0D,0A
02172:  DATA 0D,0A
02174:  DATA 3D,3D
02176:  DATA 3D,3D
02178:  DATA 3D,3D
0217A:  DATA 3D,3D
0217C:  DATA 3D,3D
0217E:  DATA 3D,3D
02180:  DATA 3D,3D
02182:  DATA 3D,3D
02184:  DATA 3D,3D
02186:  DATA 3D,3D
02188:  DATA 3D,3D
0218A:  DATA 3D,3D
0218C:  DATA 3D,3D
0218E:  DATA 3D,3D
02190:  DATA 3D,3D
02192:  DATA 3D,3D
02194:  DATA 3D,3D
02196:  DATA 3D,3D
02198:  DATA 3D,3D
0219A:  DATA 3D,3D
0219C:  DATA 3D,3D
0219E:  DATA 3D,3D
021A0:  DATA 3D,3D
021A2:  DATA 3D,3D
021A4:  DATA 3D,3D
021A6:  DATA 3D,3D
021A8:  DATA 3D,3D
021AA:  DATA 3D,3D
021AC:  DATA 3D,3D
021AE:  DATA 3D,3D
021B0:  DATA 0D,0A
021B2:  DATA 00,00
021B4:  DATA 54,68
021B6:  DATA 69,73
021B8:  DATA 20,69
021BA:  DATA 73,20
021BC:  DATA 4D,4F
021BE:  DATA 4D,49
021C0:  DATA 4A,49
021C2:  DATA 20,43
021C4:  DATA 49,47
021C6:  DATA 53,20
021C8:  DATA 50,49
021CA:  DATA 43,20
021CC:  DATA 42,42
021CE:  DATA 4D,20
021D0:  DATA 66,6F
021D2:  DATA 72,20
021D4:  DATA 4D,49
021D6:  DATA 53,37
021D8:  DATA 5F,42
021DA:  DATA 42,4D
021DC:  DATA 36,2E
021DE:  DATA 0D,0A
021E0:  DATA 00,00
021E2:  DATA 4C,61
021E4:  DATA 73,74
021E6:  DATA 20,75
021E8:  DATA 70,64
021EA:  DATA 61,74
021EC:  DATA 65,64
021EE:  DATA 20,6F
021F0:  DATA 6E,20
021F2:  DATA 25,73
021F4:  DATA 20,25
021F6:  DATA 73,2C
021F8:  DATA 20,62
021FA:  DATA 79,20
021FC:  DATA 49,6E
021FE:  DATA 6F,75
02200:  DATA 65,2E
02202:  DATA 0D,0A
02204:  DATA 0D,0A
02206:  DATA 00,00
02208:  DATA 32,38
0220A:  DATA 2D,4F
0220C:  DATA 63,74
0220E:  DATA 2D,32
02210:  DATA 35,00
02212:  DATA 32,30
02214:  DATA 3A,33
02216:  DATA 30,3A
02218:  DATA 31,34
0221A:  DATA 00,00
0221C:  DATA 5F,5F
0221E:  DATA 5F,5F
02220:  DATA 43,49
02222:  DATA 47,53
02224:  DATA 20,50
02226:  DATA 49,43
02228:  DATA 20,53
0222A:  DATA 74,61
0222C:  DATA 72,74
0222E:  DATA 20,4F
02230:  DATA 70,65
02232:  DATA 72,61
02234:  DATA 74,69
02236:  DATA 6F,6E
02238:  DATA 5F,5F
0223A:  DATA 5F,5F
0223C:  DATA 5F,0D
0223E:  DATA 0A,0D
02240:  DATA 0A,00
02242:  DATA 77,61
02244:  DATA 69,74
02246:  DATA 69,6E
02248:  DATA 67,20
0224A:  DATA 66,6F
0224C:  DATA 72,20
0224E:  DATA 42,4F
02250:  DATA 53,53
02252:  DATA 20,50
02254:  DATA 49,43
02256:  DATA 20,63
02258:  DATA 6F,6D
0225A:  DATA 6D,61
0225C:  DATA 6E,64
0225E:  DATA 00,00
02260:  DATA 0D,0A
02262:  DATA 0D,0A
02264:  DATA 3D,3D
02266:  DATA 3D,3D
02268:  DATA 3D,3D
0226A:  DATA 0D,0A
0226C:  DATA 0D,0A
0226E:  DATA 46,69
02270:  DATA 6E,69
02272:  DATA 73,68
02274:  DATA 65,64
02276:  DATA 20,70
02278:  DATA 72,6F
0227A:  DATA 63,65
0227C:  DATA 73,73
0227E:  DATA 2E,0D
02280:  DATA 0A,00
02282:  DATA 0D,0A
02284:  DATA 77,61
02286:  DATA 69,74
02288:  DATA 69,6E
0228A:  DATA 67,20
0228C:  DATA 66,6F
0228E:  DATA 72,20
02290:  DATA 42,4F
02292:  DATA 53,53
02294:  DATA 20,50
02296:  DATA 49,43
02298:  DATA 20,63
0229A:  DATA 6F,6D
0229C:  DATA 6D,61
0229E:  DATA 6E,64
022A0:  DATA 00,00
022A2:  DATA 45,6E
022A4:  DATA 64,20
022A6:  DATA 6D,61
022A8:  DATA 69,6E
022AA:  DATA 0D,0A
022AC:  DATA 00,00
*
022DC:  TBLRD*+
022DE:  MOVF   FF5,F
022E0:  BTFSC  FD8.2
022E2:  GOTO   2310
022E6:  MOVFF  FF6,9C2
022EA:  MOVFF  FF7,9C3
022EE:  MOVFF  FF8,9C4
022F2:  MOVF   FF5,W
022F4:  BTFSS  FA6.6
022F6:  GOTO   22F4
022FA:  MOVLB  E
022FC:  MOVWF  xF9
022FE:  MOVFF  9C2,FF6
02302:  MOVFF  9C3,FF7
02306:  MOVFF  9C4,FF8
0230A:  MOVLB  0
0230C:  GOTO   22DC
02310:  RETURN 0
02312:  TBLRD*+
02314:  MOVFF  FF6,9C3
02318:  MOVFF  FF7,9C4
0231C:  MOVFF  FF8,9C5
02320:  MOVF   FF5,W
02322:  BTFSS  FA6.6
02324:  GOTO   2322
02328:  MOVLB  E
0232A:  MOVWF  xF9
0232C:  MOVFF  9C3,FF6
02330:  MOVFF  9C4,FF7
02334:  MOVFF  9C5,FF8
02338:  MOVLB  9
0233A:  DECFSZ xC2,F
0233C:  BRA    2342
0233E:  BRA    2348
02340:  MOVLB  0
02342:  MOVLB  0
02344:  GOTO   2312
02348:  MOVLB  0
0234A:  RETURN 0
0234C:  TSTFSZ 01
0234E:  GOTO   235C
02352:  TSTFSZ 02
02354:  GOTO   235E
02358:  GOTO   236E
0235C:  INCF   02,F
0235E:  MOVFF  00,FEE
02362:  DECFSZ 01,F
02364:  GOTO   235E
02368:  DECFSZ 02,F
0236A:  GOTO   235E
0236E:  RETURN 0
*
02542:  MOVLB  9
02544:  BTFSS  xE9.7
02546:  BRA    254E
02548:  MOVLB  0
0254A:  GOTO   2584
0254E:  MOVLW  0F
02550:  MOVWF  00
02552:  SWAPF  xE8,W
02554:  ANDWF  00,F
02556:  MOVLW  0A
02558:  SUBWF  00,W
0255A:  BTFSS  FD8.0
0255C:  BRA    2564
0255E:  MOVLB  0
02560:  GOTO   256E
02564:  MOVLW  30
02566:  ADDWF  00,F
02568:  MOVLB  0
0256A:  GOTO   2576
0256E:  MOVLB  9
02570:  MOVF   xE9,W
02572:  ADDWF  00,F
02574:  MOVLB  0
02576:  MOVF   00,W
02578:  BTFSS  FA6.6
0257A:  GOTO   2578
0257E:  MOVLB  E
02580:  MOVWF  xF9
02582:  MOVLB  0
02584:  MOVLW  0F
02586:  MOVLB  9
02588:  ANDWF  xE8,F
0258A:  MOVLW  0A
0258C:  SUBWF  xE8,W
0258E:  BTFSS  FD8.0
02590:  BRA    2598
02592:  MOVLB  0
02594:  GOTO   25A0
02598:  MOVLW  30
0259A:  MOVLB  0
0259C:  GOTO   25A8
025A0:  MOVLB  9
025A2:  BCF    xE9.7
025A4:  MOVF   xE9,W
025A6:  MOVLB  0
025A8:  MOVLB  9
025AA:  ADDWF  xE8,F
025AC:  MOVF   xE8,W
025AE:  MOVLB  0
025B0:  BTFSS  FA6.6
025B2:  GOTO   25B0
025B6:  MOVLB  E
025B8:  MOVWF  xF9
025BA:  MOVLB  0
025BC:  RETURN 0
*
02ABA:  MOVLB  B
02ABC:  MOVF   x08,W
02ABE:  ANDLW  07
02AC0:  MOVWF  00
02AC2:  RRCF   x08,W
02AC4:  MOVWF  01
02AC6:  RRCF   01,F
02AC8:  RRCF   01,F
02ACA:  MOVLW  1F
02ACC:  ANDWF  01,F
02ACE:  MOVF   01,W
02AD0:  ADDWF  x0A,W
02AD2:  MOVWF  FE9
02AD4:  MOVLW  00
02AD6:  ADDWFC x0B,W
02AD8:  MOVWF  FEA
02ADA:  CLRF   01
02ADC:  INCF   01,F
02ADE:  INCF   00,F
02AE0:  MOVLB  0
02AE2:  GOTO   2AE8
02AE6:  RLCF   01,F
02AE8:  DECFSZ 00,F
02AEA:  GOTO   2AE6
02AEE:  MOVLB  B
02AF0:  MOVF   x09,F
02AF2:  BTFSS  FD8.2
02AF4:  BRA    2AFC
02AF6:  MOVLB  0
02AF8:  GOTO   2B06
02AFC:  MOVF   01,W
02AFE:  IORWF  FEF,F
02B00:  MOVLB  0
02B02:  GOTO   2B0C
02B06:  COMF   01,F
02B08:  MOVF   01,W
02B0A:  ANDWF  FEF,F
02B0C:  RETURN 0
*
061F6:  BTFSC  FD8.1
061F8:  GOTO   6204
061FC:  MOVLW  02
061FE:  MOVWF  FEA
06200:  MOVLW  1A
06202:  MOVWF  FE9
06204:  CLRF   00
06206:  CLRF   01
06208:  CLRF   02
0620A:  CLRF   03
0620C:  MOVLB  2
0620E:  CLRF   x1A
06210:  CLRF   x1B
06212:  CLRF   x1C
06214:  CLRF   x1D
06216:  MOVF   x19,W
06218:  IORWF  x18,W
0621A:  IORWF  x17,W
0621C:  IORWF  x16,W
0621E:  BTFSS  FD8.2
06220:  BRA    6228
06222:  MOVLB  0
06224:  GOTO   62B8
06228:  MOVLB  0
0622A:  MOVLW  20
0622C:  MOVLB  2
0622E:  MOVWF  x1E
06230:  MOVLB  0
06232:  BCF    FD8.0
06234:  MOVLB  2
06236:  RLCF   x12,F
06238:  RLCF   x13,F
0623A:  RLCF   x14,F
0623C:  RLCF   x15,F
0623E:  RLCF   x1A,F
06240:  RLCF   x1B,F
06242:  RLCF   x1C,F
06244:  RLCF   x1D,F
06246:  MOVF   x19,W
06248:  SUBWF  x1D,W
0624A:  BTFSC  FD8.2
0624C:  BRA    6254
0624E:  MOVLB  0
06250:  GOTO   6276
06254:  MOVF   x18,W
06256:  SUBWF  x1C,W
06258:  BTFSC  FD8.2
0625A:  BRA    6262
0625C:  MOVLB  0
0625E:  GOTO   6276
06262:  MOVF   x17,W
06264:  SUBWF  x1B,W
06266:  BTFSC  FD8.2
06268:  BRA    6270
0626A:  MOVLB  0
0626C:  GOTO   6276
06270:  MOVF   x16,W
06272:  SUBWF  x1A,W
06274:  MOVLB  0
06276:  BTFSS  FD8.0
06278:  GOTO   629E
0627C:  MOVLB  2
0627E:  MOVF   x16,W
06280:  SUBWF  x1A,F
06282:  MOVF   x17,W
06284:  BTFSS  FD8.0
06286:  INCFSZ x17,W
06288:  SUBWF  x1B,F
0628A:  MOVF   x18,W
0628C:  BTFSS  FD8.0
0628E:  INCFSZ x18,W
06290:  SUBWF  x1C,F
06292:  MOVF   x19,W
06294:  BTFSS  FD8.0
06296:  INCFSZ x19,W
06298:  SUBWF  x1D,F
0629A:  BSF    FD8.0
0629C:  MOVLB  0
0629E:  RLCF   00,F
062A0:  RLCF   01,F
062A2:  RLCF   02,F
062A4:  RLCF   03,F
062A6:  MOVLB  2
062A8:  DECFSZ x1E,F
062AA:  BRA    62B0
062AC:  BRA    62B6
062AE:  MOVLB  0
062B0:  MOVLB  0
062B2:  GOTO   6232
062B6:  MOVLB  0
062B8:  MOVFF  21A,FEF
062BC:  MOVFF  21B,FEC
062C0:  MOVFF  21C,FEC
062C4:  MOVFF  21D,FEC
062C8:  MOVF   FED,F
062CA:  MOVF   FED,F
062CC:  MOVF   FED,F
062CE:  RETURN 0
062D0:  MOVF   FE9,W
062D2:  MOVLB  2
062D4:  MOVWF  x0A
062D6:  MOVLW  3B
062D8:  MOVWF  x11
062DA:  MOVLW  9A
062DC:  MOVWF  x10
062DE:  MOVLW  CA
062E0:  MOVWF  x0F
062E2:  CLRF   x0E
062E4:  MOVLW  0A
062E6:  MOVWF  x0C
062E8:  MOVLB  0
062EA:  BSF    FD8.1
062EC:  MOVLW  02
062EE:  MOVWF  FEA
062F0:  MOVLW  06
062F2:  MOVWF  FE9
062F4:  MOVFF  209,215
062F8:  MOVFF  208,214
062FC:  MOVFF  207,213
06300:  MOVFF  206,212
06304:  MOVFF  211,219
06308:  MOVFF  210,218
0630C:  MOVFF  20F,217
06310:  MOVFF  20E,216
06314:  CALL   61F6
06318:  MOVF   01,W
0631A:  MOVF   00,F
0631C:  BTFSS  FD8.2
0631E:  GOTO   6376
06322:  MOVLB  2
06324:  MOVF   x0C,W
06326:  XORLW  01
06328:  BTFSS  FD8.2
0632A:  BRA    6332
0632C:  MOVLB  0
0632E:  GOTO   6376
06332:  MOVF   x0A,W
06334:  BTFSS  FD8.2
06336:  BRA    633E
06338:  MOVLB  0
0633A:  GOTO   637C
0633E:  ANDLW  0F
06340:  SUBWF  x0C,W
06342:  BTFSS  FD8.2
06344:  BRA    634C
06346:  MOVLB  0
06348:  GOTO   6358
0634C:  BTFSS  FD8.0
0634E:  BRA    6356
06350:  MOVLB  0
06352:  GOTO   638E
06356:  MOVLB  0
06358:  MOVLB  2
0635A:  BTFSS  x0A.7
0635C:  BRA    6364
0635E:  MOVLB  0
06360:  GOTO   638E
06364:  BTFSS  x0A.6
06366:  BRA    636E
06368:  MOVLB  0
0636A:  GOTO   637C
0636E:  MOVLW  20
06370:  MOVLB  0
06372:  GOTO   637E
06376:  MOVLB  2
06378:  CLRF   x0A
0637A:  MOVLB  0
0637C:  MOVLW  30
0637E:  ADDWF  00,F
06380:  MOVF   00,W
06382:  BTFSS  FA6.6
06384:  GOTO   6382
06388:  MOVLB  E
0638A:  MOVWF  xF9
0638C:  MOVLB  0
0638E:  BCF    FD8.1
06390:  MOVFF  211,215
06394:  MOVFF  210,214
06398:  MOVFF  20F,213
0639C:  MOVFF  20E,212
063A0:  MOVLB  2
063A2:  CLRF   x19
063A4:  CLRF   x18
063A6:  CLRF   x17
063A8:  MOVLW  0A
063AA:  MOVWF  x16
063AC:  MOVLB  0
063AE:  CALL   61F6
063B2:  MOVFF  03,211
063B6:  MOVFF  02,210
063BA:  MOVFF  01,20F
063BE:  MOVFF  00,20E
063C2:  MOVLB  2
063C4:  DECFSZ x0C,F
063C6:  BRA    63CC
063C8:  BRA    63D2
063CA:  MOVLB  0
063CC:  MOVLB  0
063CE:  GOTO   62EA
063D2:  MOVLB  0
063D4:  RETURN 0
*
0823E:  MOVLB  A
08240:  MOVF   x51,W
08242:  MULWF  x53
08244:  MOVFF  FF3,01
08248:  MOVFF  FF4,00
0824C:  MULWF  x54
0824E:  MOVF   FF3,W
08250:  ADDWF  00,F
08252:  MOVF   x52,W
08254:  MULWF  x53
08256:  MOVF   FF3,W
08258:  ADDWFC 00,W
0825A:  MOVWF  02
0825C:  MOVLB  0
0825E:  RETURN 0
*
08368:  MOVLW  8E
0836A:  MOVWF  00
0836C:  MOVFF  1F4,01
08370:  MOVFF  1F3,02
08374:  CLRF   03
08376:  MOVF   01,F
08378:  BTFSS  FD8.2
0837A:  GOTO   8396
0837E:  MOVFF  02,01
08382:  CLRF   02
08384:  MOVLW  08
08386:  SUBWF  00,F
08388:  MOVF   01,F
0838A:  BTFSS  FD8.2
0838C:  GOTO   8396
08390:  CLRF   00
08392:  GOTO   83AA
08396:  BCF    FD8.0
08398:  BTFSC  01.7
0839A:  GOTO   83A8
0839E:  RLCF   02,F
083A0:  RLCF   01,F
083A2:  DECF   00,F
083A4:  GOTO   8396
083A8:  BCF    01.7
083AA:  GOTO   8D5A (RETURN)
083AE:  MOVLB  1
083B0:  MOVF   xF7,W
083B2:  BTFSS  FD8.2
083B4:  BRA    83BC
083B6:  MOVLB  0
083B8:  GOTO   8500
083BC:  MOVWF  00
083BE:  MOVF   xFB,W
083C0:  BTFSS  FD8.2
083C2:  BRA    83CA
083C4:  MOVLB  0
083C6:  GOTO   8500
083CA:  ADDWF  00,F
083CC:  BTFSC  FD8.0
083CE:  BRA    83D6
083D0:  MOVLB  0
083D2:  GOTO   83E6
083D6:  MOVLB  0
083D8:  MOVLW  81
083DA:  ADDWF  00,F
083DC:  BTFSC  FD8.0
083DE:  GOTO   8500
083E2:  GOTO   83F6
083E6:  MOVLW  7F
083E8:  SUBWF  00,F
083EA:  BTFSS  FD8.0
083EC:  GOTO   8500
083F0:  BTFSC  FD8.2
083F2:  GOTO   8500
083F6:  MOVFF  1F8,1FF
083FA:  MOVLB  1
083FC:  MOVF   xFC,W
083FE:  XORWF  xFF,F
08400:  BSF    xF8.7
08402:  BSF    xFC.7
08404:  MOVF   xFA,W
08406:  MULWF  xFE
08408:  MOVFF  FF4,201
0840C:  MOVF   xF9,W
0840E:  MULWF  xFD
08410:  MOVFF  FF4,03
08414:  MOVFF  FF3,200
08418:  MULWF  xFE
0841A:  MOVF   FF3,W
0841C:  MOVLB  2
0841E:  ADDWF  x01,F
08420:  MOVF   FF4,W
08422:  ADDWFC x00,F
08424:  MOVLW  00
08426:  ADDWFC 03,F
08428:  MOVLB  1
0842A:  MOVF   xFA,W
0842C:  MULWF  xFD
0842E:  MOVF   FF3,W
08430:  MOVLB  2
08432:  ADDWF  x01,F
08434:  MOVF   FF4,W
08436:  ADDWFC x00,F
08438:  MOVLW  00
0843A:  CLRF   02
0843C:  ADDWFC 03,F
0843E:  ADDWFC 02,F
08440:  MOVLB  1
08442:  MOVF   xF8,W
08444:  MULWF  xFE
08446:  MOVF   FF3,W
08448:  MOVLB  2
0844A:  ADDWF  x00,F
0844C:  MOVF   FF4,W
0844E:  ADDWFC 03,F
08450:  MOVLW  00
08452:  ADDWFC 02,F
08454:  MOVLB  1
08456:  MOVF   xF8,W
08458:  MULWF  xFD
0845A:  MOVF   FF3,W
0845C:  ADDWF  03,F
0845E:  MOVF   FF4,W
08460:  ADDWFC 02,F
08462:  MOVLW  00
08464:  CLRF   01
08466:  ADDWFC 01,F
08468:  MOVF   xFA,W
0846A:  MULWF  xFC
0846C:  MOVF   FF3,W
0846E:  MOVLB  2
08470:  ADDWF  x00,F
08472:  MOVF   FF4,W
08474:  ADDWFC 03,F
08476:  MOVLW  00
08478:  ADDWFC 02,F
0847A:  ADDWFC 01,F
0847C:  MOVLB  1
0847E:  MOVF   xF9,W
08480:  MULWF  xFC
08482:  MOVF   FF3,W
08484:  ADDWF  03,F
08486:  MOVF   FF4,W
08488:  ADDWFC 02,F
0848A:  MOVLW  00
0848C:  ADDWFC 01,F
0848E:  MOVF   xF8,W
08490:  MULWF  xFC
08492:  MOVF   FF3,W
08494:  ADDWF  02,F
08496:  MOVF   FF4,W
08498:  ADDWFC 01,F
0849A:  INCF   00,F
0849C:  BTFSS  01.7
0849E:  BRA    84A6
084A0:  MOVLB  0
084A2:  GOTO   84B4
084A6:  MOVLB  2
084A8:  RLCF   x00,F
084AA:  RLCF   03,F
084AC:  RLCF   02,F
084AE:  RLCF   01,F
084B0:  DECF   00,F
084B2:  MOVLB  0
084B4:  MOVLW  00
084B6:  MOVLB  2
084B8:  BTFSC  x00.7
084BA:  BRA    84C2
084BC:  MOVLB  0
084BE:  GOTO   84F0
084C2:  INCF   03,F
084C4:  ADDWFC 02,F
084C6:  ADDWFC 01,F
084C8:  MOVF   01,W
084CA:  BTFSC  FD8.2
084CC:  BRA    84D4
084CE:  MOVLB  0
084D0:  GOTO   84F0
084D4:  MOVF   02,W
084D6:  BTFSC  FD8.2
084D8:  BRA    84E0
084DA:  MOVLB  0
084DC:  GOTO   84F0
084E0:  MOVF   03,W
084E2:  BTFSC  FD8.2
084E4:  BRA    84EC
084E6:  MOVLB  0
084E8:  GOTO   84F0
084EC:  INCF   00,F
084EE:  MOVLB  0
084F0:  MOVLB  1
084F2:  BTFSC  xFF.7
084F4:  BSF    01.7
084F6:  BTFSS  xFF.7
084F8:  BCF    01.7
084FA:  MOVLB  0
084FC:  GOTO   8508
08500:  CLRF   00
08502:  CLRF   01
08504:  CLRF   02
08506:  CLRF   03
08508:  GOTO   8D90 (RETURN)
0850C:  MOVLB  1
0850E:  MOVF   xF7,W
08510:  BTFSS  FD8.2
08512:  BRA    851A
08514:  MOVLB  0
08516:  GOTO   87F0
0851A:  MOVLB  2
0851C:  MOVWF  x03
0851E:  MOVLB  1
08520:  MOVF   xFB,W
08522:  BTFSS  FD8.2
08524:  BRA    852C
08526:  MOVLB  0
08528:  GOTO   87F0
0852C:  MOVLB  2
0852E:  SUBWF  x03,F
08530:  BTFSS  FD8.0
08532:  BRA    853A
08534:  MOVLB  0
08536:  GOTO   8540
0853A:  MOVLB  0
0853C:  GOTO   8556
08540:  MOVLW  7F
08542:  MOVLB  2
08544:  ADDWF  x03,F
08546:  BTFSS  FD8.0
08548:  BRA    8550
0854A:  MOVLB  0
0854C:  GOTO   87F0
08550:  MOVLB  0
08552:  GOTO   8572
08556:  MOVLW  81
08558:  MOVLB  2
0855A:  SUBWF  x03,F
0855C:  BTFSC  FD8.0
0855E:  BRA    8566
08560:  MOVLB  0
08562:  GOTO   87F0
08566:  BTFSS  FD8.2
08568:  BRA    8570
0856A:  MOVLB  0
0856C:  GOTO   87F0
08570:  MOVLB  0
08572:  MOVFF  203,00
08576:  CLRF   01
08578:  CLRF   02
0857A:  CLRF   03
0857C:  MOVLB  2
0857E:  CLRF   x02
08580:  MOVFF  1F8,201
08584:  BSF    x01.7
08586:  MOVFF  1F9,200
0858A:  MOVFF  1FA,1FF
0858E:  MOVLW  19
08590:  MOVWF  x03
08592:  MOVLB  0
08594:  MOVLB  1
08596:  MOVF   xFE,W
08598:  SUBWF  xFF,F
0859A:  BTFSS  FD8.0
0859C:  BRA    85A4
0859E:  MOVLB  0
085A0:  GOTO   85DE
085A4:  MOVLW  01
085A6:  MOVLB  2
085A8:  SUBWF  x00,F
085AA:  BTFSS  FD8.0
085AC:  BRA    85B4
085AE:  MOVLB  0
085B0:  GOTO   85DE
085B4:  SUBWF  x01,F
085B6:  BTFSS  FD8.0
085B8:  BRA    85C0
085BA:  MOVLB  0
085BC:  GOTO   85DE
085C0:  SUBWF  x02,F
085C2:  BTFSS  FD8.0
085C4:  BRA    85CC
085C6:  MOVLB  0
085C8:  GOTO   85DE
085CC:  INCF   x02,F
085CE:  INCF   x01,F
085D0:  INCF   x00,F
085D2:  MOVLB  1
085D4:  MOVF   xFE,W
085D6:  ADDWF  xFF,F
085D8:  MOVLB  0
085DA:  GOTO   86A4
085DE:  MOVLB  1
085E0:  MOVF   xFD,W
085E2:  MOVLB  2
085E4:  SUBWF  x00,F
085E6:  BTFSS  FD8.0
085E8:  BRA    85F0
085EA:  MOVLB  0
085EC:  GOTO   864E
085F0:  MOVLW  01
085F2:  SUBWF  x01,F
085F4:  BTFSS  FD8.0
085F6:  BRA    85FE
085F8:  MOVLB  0
085FA:  GOTO   864E
085FE:  SUBWF  x02,F
08600:  BTFSS  FD8.0
08602:  BRA    860A
08604:  MOVLB  0
08606:  GOTO   864E
0860A:  MOVLB  0
0860C:  MOVLB  2
0860E:  INCF   x02,F
08610:  INCF   x01,F
08612:  MOVLB  1
08614:  MOVF   xFD,W
08616:  MOVLB  2
08618:  ADDWF  x00,F
0861A:  MOVLB  0
0861C:  MOVLB  1
0861E:  MOVF   xFE,W
08620:  ADDWF  xFF,F
08622:  BTFSC  FD8.0
08624:  BRA    862C
08626:  MOVLB  0
08628:  GOTO   86A4
0862C:  MOVLB  2
0862E:  INCF   x00,F
08630:  BTFSC  FD8.2
08632:  BRA    863A
08634:  MOVLB  0
08636:  GOTO   86A4
0863A:  INCF   x01,F
0863C:  BTFSC  FD8.2
0863E:  BRA    8646
08640:  MOVLB  0
08642:  GOTO   86A4
08646:  INCF   x02,F
08648:  MOVLB  0
0864A:  GOTO   86A4
0864E:  MOVLB  1
08650:  MOVF   xFC,W
08652:  IORLW  80
08654:  MOVLB  2
08656:  SUBWF  x01,F
08658:  BTFSS  FD8.0
0865A:  BRA    8662
0865C:  MOVLB  0
0865E:  GOTO   86A2
08662:  MOVLW  01
08664:  SUBWF  x02,F
08666:  BTFSS  FD8.0
08668:  BRA    8670
0866A:  MOVLB  0
0866C:  GOTO   86A2
08670:  INCF   x02,F
08672:  MOVLB  1
08674:  MOVF   xFC,W
08676:  IORLW  80
08678:  MOVLB  2
0867A:  ADDWF  x01,F
0867C:  MOVLB  1
0867E:  MOVF   xFD,W
08680:  MOVLB  2
08682:  ADDWF  x00,F
08684:  BTFSC  FD8.0
08686:  BRA    868E
08688:  MOVLB  0
0868A:  GOTO   861C
0868E:  INCF   x01,F
08690:  BTFSC  FD8.2
08692:  BRA    869A
08694:  MOVLB  0
08696:  GOTO   861C
0869A:  INCF   x02,F
0869C:  MOVLB  0
0869E:  GOTO   861C
086A2:  BSF    03.0
086A4:  MOVLB  2
086A6:  DECFSZ x03,F
086A8:  BRA    86AE
086AA:  BRA    86B4
086AC:  MOVLB  0
086AE:  MOVLB  0
086B0:  GOTO   86BA
086B4:  MOVLB  0
086B6:  GOTO   86D8
086BA:  BCF    FD8.0
086BC:  MOVLB  1
086BE:  RLCF   xFF,F
086C0:  MOVLB  2
086C2:  RLCF   x00,F
086C4:  RLCF   x01,F
086C6:  RLCF   x02,F
086C8:  BCF    FD8.0
086CA:  RLCF   03,F
086CC:  RLCF   02,F
086CE:  RLCF   01,F
086D0:  RLCF   x04,F
086D2:  MOVLB  0
086D4:  GOTO   8594
086D8:  MOVLB  2
086DA:  BTFSC  x04.0
086DC:  BRA    86E4
086DE:  MOVLB  0
086E0:  GOTO   86F4
086E4:  BCF    FD8.0
086E6:  RRCF   01,F
086E8:  RRCF   02,F
086EA:  RRCF   03,F
086EC:  RRCF   x04,F
086EE:  MOVLB  0
086F0:  GOTO   86FC
086F4:  DECF   00,F
086F6:  BTFSC  FD8.2
086F8:  GOTO   87F0
086FC:  MOVLB  2
086FE:  BTFSS  x04.7
08700:  BRA    8708
08702:  MOVLB  0
08704:  GOTO   87A6
08708:  BCF    FD8.0
0870A:  MOVLB  1
0870C:  RLCF   xFF,F
0870E:  MOVLB  2
08710:  RLCF   x00,F
08712:  RLCF   x01,F
08714:  RLCF   x02,F
08716:  MOVLB  0
08718:  MOVLB  1
0871A:  MOVF   xFE,W
0871C:  SUBWF  xFF,F
0871E:  BTFSS  FD8.0
08720:  BRA    8728
08722:  MOVLB  0
08724:  GOTO   8752
08728:  MOVLW  01
0872A:  MOVLB  2
0872C:  SUBWF  x00,F
0872E:  BTFSS  FD8.0
08730:  BRA    8738
08732:  MOVLB  0
08734:  GOTO   8752
08738:  SUBWF  x01,F
0873A:  BTFSS  FD8.0
0873C:  BRA    8744
0873E:  MOVLB  0
08740:  GOTO   8752
08744:  SUBWF  x02,F
08746:  BTFSC  FD8.0
08748:  BRA    8750
0874A:  MOVLB  0
0874C:  GOTO   87CC
08750:  MOVLB  0
08752:  MOVLB  1
08754:  MOVF   xFD,W
08756:  MOVLB  2
08758:  SUBWF  x00,F
0875A:  BTFSS  FD8.0
0875C:  BRA    8764
0875E:  MOVLB  0
08760:  GOTO   8780
08764:  MOVLW  01
08766:  SUBWF  x01,F
08768:  BTFSS  FD8.0
0876A:  BRA    8772
0876C:  MOVLB  0
0876E:  GOTO   8780
08772:  SUBWF  x02,F
08774:  BTFSC  FD8.0
08776:  BRA    877E
08778:  MOVLB  0
0877A:  GOTO   87CC
0877E:  MOVLB  0
08780:  MOVLB  1
08782:  MOVF   xFC,W
08784:  IORLW  80
08786:  MOVLB  0
08788:  MOVLB  2
0878A:  SUBWF  x01,F
0878C:  BTFSS  FD8.0
0878E:  BRA    8796
08790:  MOVLB  0
08792:  GOTO   87A6
08796:  MOVLW  01
08798:  SUBWF  x02,F
0879A:  BTFSC  FD8.0
0879C:  BRA    87A4
0879E:  MOVLB  0
087A0:  GOTO   87CC
087A4:  MOVLB  0
087A6:  INCF   03,F
087A8:  BTFSS  FD8.2
087AA:  GOTO   87CC
087AE:  INCF   02,F
087B0:  BTFSS  FD8.2
087B2:  GOTO   87CC
087B6:  INCF   01,F
087B8:  BTFSS  FD8.2
087BA:  GOTO   87CC
087BE:  INCF   00,F
087C0:  BTFSC  FD8.2
087C2:  GOTO   87F0
087C6:  RRCF   01,F
087C8:  RRCF   02,F
087CA:  RRCF   03,F
087CC:  MOVFF  1F8,203
087D0:  MOVLB  1
087D2:  MOVF   xFC,W
087D4:  MOVLB  2
087D6:  XORWF  x03,F
087D8:  BTFSC  x03.7
087DA:  BRA    87E2
087DC:  MOVLB  0
087DE:  GOTO   87EA
087E2:  BSF    01.7
087E4:  MOVLB  0
087E6:  GOTO   87F8
087EA:  BCF    01.7
087EC:  GOTO   87F8
087F0:  CLRF   00
087F2:  CLRF   01
087F4:  CLRF   02
087F6:  CLRF   03
087F8:  RETURN 0
087FA:  MOVLW  80
087FC:  BTFSS  FD8.1
087FE:  BRA    8806
08800:  MOVLB  1
08802:  XORWF  xF8,F
08804:  MOVLB  0
08806:  MOVLB  1
08808:  CLRF   xFD
0880A:  CLRF   xFE
0880C:  MOVFF  1F4,1FC
08810:  MOVF   xF8,W
08812:  XORWF  xFC,F
08814:  MOVF   xF3,W
08816:  BTFSS  FD8.2
08818:  BRA    8820
0881A:  MOVLB  0
0881C:  GOTO   8BCE
08820:  MOVWF  xFB
08822:  MOVFF  1FB,00
08826:  MOVF   xF7,W
08828:  BTFSS  FD8.2
0882A:  BRA    8832
0882C:  MOVLB  0
0882E:  GOTO   8BE2
08832:  SUBWF  xFB,F
08834:  BTFSS  FD8.2
08836:  BRA    883E
08838:  MOVLB  0
0883A:  GOTO   8A48
0883E:  BTFSS  FD8.0
08840:  BRA    8848
08842:  MOVLB  0
08844:  GOTO   884E
08848:  MOVLB  0
0884A:  GOTO   8944
0884E:  MOVFF  1F8,201
08852:  MOVLB  2
08854:  BSF    x01.7
08856:  MOVFF  1F9,200
0885A:  MOVFF  1FA,1FF
0885E:  MOVLB  0
08860:  MOVLB  1
08862:  CLRF   xFE
08864:  BCF    FD8.0
08866:  MOVLB  2
08868:  RRCF   x01,F
0886A:  RRCF   x00,F
0886C:  MOVLB  1
0886E:  RRCF   xFF,F
08870:  RRCF   xFE,F
08872:  DECFSZ xFB,F
08874:  BRA    887A
08876:  BRA    8880
08878:  MOVLB  0
0887A:  MOVLB  0
0887C:  GOTO   8860
08880:  MOVLB  0
08882:  MOVLB  1
08884:  BTFSC  xFC.7
08886:  BRA    888E
08888:  MOVLB  0
0888A:  GOTO   889C
0888E:  BSF    xFD.0
08890:  MOVLB  0
08892:  GOTO   8C0E
08896:  MOVLB  1
08898:  BCF    xFD.0
0889A:  MOVLB  0
0889C:  MOVLB  1
0889E:  BCF    xFB.0
088A0:  BSF    xFD.4
088A2:  MOVLW  01
088A4:  MOVWF  FEA
088A6:  MOVLW  F6
088A8:  MOVWF  FE9
088AA:  MOVLB  0
088AC:  GOTO   8C6E
088B0:  MOVLB  1
088B2:  BCF    xFD.4
088B4:  BTFSS  xFC.7
088B6:  BRA    88BE
088B8:  MOVLB  0
088BA:  GOTO   88E6
088BE:  BTFSC  xFB.0
088C0:  BRA    88C8
088C2:  MOVLB  0
088C4:  GOTO   8910
088C8:  MOVLB  2
088CA:  RRCF   x01,F
088CC:  RRCF   x00,F
088CE:  MOVLB  1
088D0:  RRCF   xFF,F
088D2:  RRCF   xFE,F
088D4:  INCF   00,F
088D6:  BTFSS  FD8.2
088D8:  BRA    88E0
088DA:  MOVLB  0
088DC:  GOTO   8C02
088E0:  MOVLB  0
088E2:  GOTO   8910
088E6:  MOVLB  2
088E8:  BTFSS  x01.7
088EA:  BRA    88F2
088EC:  MOVLB  0
088EE:  GOTO   8920
088F2:  BCF    FD8.0
088F4:  MOVLB  1
088F6:  RLCF   xFE,F
088F8:  RLCF   xFF,F
088FA:  MOVLB  2
088FC:  RLCF   x00,F
088FE:  RLCF   x01,F
08900:  DECFSZ 00,F
08902:  BRA    890A
08904:  MOVLB  0
08906:  GOTO   8C02
0890A:  MOVLB  0
0890C:  GOTO   88E6
08910:  MOVLB  1
08912:  BSF    xFD.6
08914:  MOVLB  0
08916:  GOTO   8AC4
0891A:  MOVLB  1
0891C:  BCF    xFD.6
0891E:  MOVLB  0
08920:  MOVFF  1F4,1FC
08924:  MOVLB  1
08926:  BTFSC  xFC.7
08928:  BRA    8930
0892A:  MOVLB  0
0892C:  GOTO   893A
08930:  MOVLB  2
08932:  BSF    x01.7
08934:  MOVLB  0
08936:  GOTO   8BF2
0893A:  MOVLB  2
0893C:  BCF    x01.7
0893E:  MOVLB  0
08940:  GOTO   8BF2
08944:  MOVFF  1F7,1FB
08948:  MOVFF  1FB,00
0894C:  MOVLB  1
0894E:  MOVF   xF3,W
08950:  SUBWF  xFB,F
08952:  MOVFF  1F4,201
08956:  MOVLB  2
08958:  BSF    x01.7
0895A:  MOVFF  1F5,200
0895E:  MOVFF  1F6,1FF
08962:  MOVLB  0
08964:  MOVLB  1
08966:  CLRF   xFE
08968:  BCF    FD8.0
0896A:  MOVLB  2
0896C:  RRCF   x01,F
0896E:  RRCF   x00,F
08970:  MOVLB  1
08972:  RRCF   xFF,F
08974:  RRCF   xFE,F
08976:  DECFSZ xFB,F
08978:  BRA    897E
0897A:  BRA    8984
0897C:  MOVLB  0
0897E:  MOVLB  0
08980:  GOTO   8964
08984:  MOVLB  0
08986:  MOVLB  1
08988:  BTFSC  xFC.7
0898A:  BRA    8992
0898C:  MOVLB  0
0898E:  GOTO   89A0
08992:  BSF    xFD.1
08994:  MOVLB  0
08996:  GOTO   8C0E
0899A:  MOVLB  1
0899C:  BCF    xFD.1
0899E:  MOVLB  0
089A0:  MOVLB  1
089A2:  BCF    xFB.0
089A4:  BSF    xFD.5
089A6:  MOVLW  01
089A8:  MOVWF  FEA
089AA:  MOVLW  FA
089AC:  MOVWF  FE9
089AE:  MOVLB  0
089B0:  GOTO   8C6E
089B4:  MOVLB  1
089B6:  BCF    xFD.5
089B8:  BTFSS  xFC.7
089BA:  BRA    89C2
089BC:  MOVLB  0
089BE:  GOTO   89EA
089C2:  BTFSC  xFB.0
089C4:  BRA    89CC
089C6:  MOVLB  0
089C8:  GOTO   8A14
089CC:  MOVLB  2
089CE:  RRCF   x01,F
089D0:  RRCF   x00,F
089D2:  MOVLB  1
089D4:  RRCF   xFF,F
089D6:  RRCF   xFE,F
089D8:  INCF   00,F
089DA:  BTFSS  FD8.2
089DC:  BRA    89E4
089DE:  MOVLB  0
089E0:  GOTO   8C02
089E4:  MOVLB  0
089E6:  GOTO   8A14
089EA:  MOVLB  2
089EC:  BTFSS  x01.7
089EE:  BRA    89F6
089F0:  MOVLB  0
089F2:  GOTO   8A24
089F6:  BCF    FD8.0
089F8:  MOVLB  1
089FA:  RLCF   xFE,F
089FC:  RLCF   xFF,F
089FE:  MOVLB  2
08A00:  RLCF   x00,F
08A02:  RLCF   x01,F
08A04:  DECFSZ 00,F
08A06:  BRA    8A0E
08A08:  MOVLB  0
08A0A:  GOTO   8C02
08A0E:  MOVLB  0
08A10:  GOTO   89EA
08A14:  MOVLB  1
08A16:  BSF    xFD.7
08A18:  MOVLB  0
08A1A:  GOTO   8AC4
08A1E:  MOVLB  1
08A20:  BCF    xFD.7
08A22:  MOVLB  0
08A24:  MOVFF  1F8,1FC
08A28:  MOVLB  1
08A2A:  BTFSC  xFC.7
08A2C:  BRA    8A34
08A2E:  MOVLB  0
08A30:  GOTO   8A3E
08A34:  MOVLB  2
08A36:  BSF    x01.7
08A38:  MOVLB  0
08A3A:  GOTO   8BF2
08A3E:  MOVLB  2
08A40:  BCF    x01.7
08A42:  MOVLB  0
08A44:  GOTO   8BF2
08A48:  MOVFF  1F8,201
08A4C:  MOVLB  2
08A4E:  BSF    x01.7
08A50:  MOVFF  1F9,200
08A54:  MOVFF  1FA,1FF
08A58:  MOVLB  1
08A5A:  BTFSC  xFC.7
08A5C:  BRA    8A64
08A5E:  MOVLB  0
08A60:  GOTO   8A78
08A64:  MOVLB  2
08A66:  BCF    x01.7
08A68:  MOVLB  1
08A6A:  BSF    xFD.2
08A6C:  MOVLB  0
08A6E:  GOTO   8C0E
08A72:  MOVLB  1
08A74:  BCF    xFD.2
08A76:  MOVLB  0
08A78:  MOVLB  1
08A7A:  CLRF   xFE
08A7C:  BCF    xFB.0
08A7E:  MOVLW  01
08A80:  MOVWF  FEA
08A82:  MOVLW  F6
08A84:  MOVWF  FE9
08A86:  MOVLB  0
08A88:  GOTO   8C6E
08A8C:  MOVLB  1
08A8E:  BTFSS  xFC.7
08A90:  BRA    8A98
08A92:  MOVLB  0
08A94:  GOTO   8B28
08A98:  MOVFF  1F4,1FC
08A9C:  MOVLB  0
08A9E:  MOVLB  1
08AA0:  BTFSC  xFB.0
08AA2:  BRA    8AAA
08AA4:  MOVLB  0
08AA6:  GOTO   8AC4
08AAA:  MOVLB  2
08AAC:  RRCF   x01,F
08AAE:  RRCF   x00,F
08AB0:  MOVLB  1
08AB2:  RRCF   xFF,F
08AB4:  RRCF   xFE,F
08AB6:  INCF   00,F
08AB8:  BTFSS  FD8.2
08ABA:  BRA    8AC2
08ABC:  MOVLB  0
08ABE:  GOTO   8C02
08AC2:  MOVLB  0
08AC4:  MOVLB  1
08AC6:  BTFSC  xFE.7
08AC8:  BRA    8AD0
08ACA:  MOVLB  0
08ACC:  GOTO   8B0C
08AD0:  INCF   xFF,F
08AD2:  BTFSC  FD8.2
08AD4:  BRA    8ADC
08AD6:  MOVLB  0
08AD8:  GOTO   8B0C
08ADC:  MOVLB  2
08ADE:  INCF   x00,F
08AE0:  BTFSC  FD8.2
08AE2:  BRA    8AEA
08AE4:  MOVLB  0
08AE6:  GOTO   8B0C
08AEA:  INCF   x01,F
08AEC:  BTFSC  FD8.2
08AEE:  BRA    8AF6
08AF0:  MOVLB  0
08AF2:  GOTO   8B0C
08AF6:  RRCF   x01,F
08AF8:  RRCF   x00,F
08AFA:  MOVLB  1
08AFC:  RRCF   xFF,F
08AFE:  INCF   00,F
08B00:  BTFSS  FD8.2
08B02:  BRA    8B0A
08B04:  MOVLB  0
08B06:  GOTO   8C02
08B0A:  MOVLB  0
08B0C:  MOVLB  1
08B0E:  BTFSS  xFD.6
08B10:  BRA    8B18
08B12:  MOVLB  0
08B14:  GOTO   891A
08B18:  BTFSS  xFD.7
08B1A:  BRA    8B22
08B1C:  MOVLB  0
08B1E:  GOTO   8A1E
08B22:  MOVLB  0
08B24:  GOTO   8BAE
08B28:  MOVLW  80
08B2A:  MOVLB  2
08B2C:  XORWF  x01,F
08B2E:  BTFSC  x01.7
08B30:  BRA    8B38
08B32:  MOVLB  0
08B34:  GOTO   8B46
08B38:  MOVLB  0
08B3A:  GOTO   8C0E
08B3E:  MOVFF  1F8,1FC
08B42:  GOTO   8B80
08B46:  MOVFF  1F4,1FC
08B4A:  MOVLB  2
08B4C:  MOVF   x01,F
08B4E:  BTFSC  FD8.2
08B50:  BRA    8B58
08B52:  MOVLB  0
08B54:  GOTO   8B80
08B58:  MOVLB  0
08B5A:  MOVLB  2
08B5C:  MOVF   x00,F
08B5E:  BTFSC  FD8.2
08B60:  BRA    8B68
08B62:  MOVLB  0
08B64:  GOTO   8B80
08B68:  MOVLB  0
08B6A:  MOVLB  1
08B6C:  MOVF   xFF,F
08B6E:  BTFSC  FD8.2
08B70:  BRA    8B78
08B72:  MOVLB  0
08B74:  GOTO   8B80
08B78:  MOVLB  0
08B7A:  CLRF   00
08B7C:  GOTO   8BF2
08B80:  MOVLB  2
08B82:  BTFSS  x01.7
08B84:  BRA    8B8C
08B86:  MOVLB  0
08B88:  GOTO   8BAE
08B8C:  BCF    FD8.0
08B8E:  MOVLB  1
08B90:  RLCF   xFE,F
08B92:  RLCF   xFF,F
08B94:  MOVLB  2
08B96:  RLCF   x00,F
08B98:  RLCF   x01,F
08B9A:  DECFSZ 00,F
08B9C:  BRA    8BA2
08B9E:  BRA    8BA8
08BA0:  MOVLB  0
08BA2:  MOVLB  0
08BA4:  GOTO   8B80
08BA8:  MOVLB  0
08BAA:  GOTO   8C02
08BAE:  MOVLB  1
08BB0:  BTFSC  xFC.7
08BB2:  BRA    8BBA
08BB4:  MOVLB  0
08BB6:  GOTO   8BC4
08BBA:  MOVLB  2
08BBC:  BSF    x01.7
08BBE:  MOVLB  0
08BC0:  GOTO   8BF2
08BC4:  MOVLB  2
08BC6:  BCF    x01.7
08BC8:  MOVLB  0
08BCA:  GOTO   8BF2
08BCE:  MOVFF  1F7,00
08BD2:  MOVFF  1F8,201
08BD6:  MOVFF  1F9,200
08BDA:  MOVFF  1FA,1FF
08BDE:  GOTO   8BF2
08BE2:  MOVFF  1F3,00
08BE6:  MOVFF  1F4,201
08BEA:  MOVFF  1F5,200
08BEE:  MOVFF  1F6,1FF
08BF2:  MOVFF  201,01
08BF6:  MOVFF  200,02
08BFA:  MOVFF  1FF,03
08BFE:  GOTO   8CF0
08C02:  CLRF   00
08C04:  CLRF   01
08C06:  CLRF   02
08C08:  CLRF   03
08C0A:  GOTO   8CF0
08C0E:  MOVLB  1
08C10:  CLRF   xFE
08C12:  COMF   xFF,F
08C14:  MOVLB  2
08C16:  COMF   x00,F
08C18:  COMF   x01,F
08C1A:  MOVLB  1
08C1C:  COMF   xFE,F
08C1E:  INCF   xFE,F
08C20:  BTFSC  FD8.2
08C22:  BRA    8C2A
08C24:  MOVLB  0
08C26:  GOTO   8C48
08C2A:  INCF   xFF,F
08C2C:  BTFSC  FD8.2
08C2E:  BRA    8C36
08C30:  MOVLB  0
08C32:  GOTO   8C48
08C36:  MOVLB  2
08C38:  INCF   x00,F
08C3A:  BTFSC  FD8.2
08C3C:  BRA    8C44
08C3E:  MOVLB  0
08C40:  GOTO   8C48
08C44:  INCF   x01,F
08C46:  MOVLB  0
08C48:  MOVLB  1
08C4A:  BTFSS  xFD.0
08C4C:  BRA    8C54
08C4E:  MOVLB  0
08C50:  GOTO   8896
08C54:  BTFSS  xFD.1
08C56:  BRA    8C5E
08C58:  MOVLB  0
08C5A:  GOTO   899A
08C5E:  BTFSS  xFD.2
08C60:  BRA    8C68
08C62:  MOVLB  0
08C64:  GOTO   8A72
08C68:  MOVLB  0
08C6A:  GOTO   8B3E
08C6E:  MOVF   FEF,W
08C70:  MOVLB  1
08C72:  ADDWF  xFF,F
08C74:  BTFSC  FD8.0
08C76:  BRA    8C7E
08C78:  MOVLB  0
08C7A:  GOTO   8C9A
08C7E:  MOVLB  2
08C80:  INCF   x00,F
08C82:  BTFSC  FD8.2
08C84:  BRA    8C8C
08C86:  MOVLB  0
08C88:  GOTO   8C9A
08C8C:  INCF   x01,F
08C8E:  BTFSS  FD8.2
08C90:  BRA    8C98
08C92:  MOVLB  1
08C94:  BSF    xFB.0
08C96:  MOVLB  2
08C98:  MOVLB  0
08C9A:  MOVF   FED,F
08C9C:  MOVF   FEF,W
08C9E:  MOVLB  2
08CA0:  ADDWF  x00,F
08CA2:  BTFSC  FD8.0
08CA4:  BRA    8CAC
08CA6:  MOVLB  0
08CA8:  GOTO   8CBA
08CAC:  INCF   x01,F
08CAE:  BTFSS  FD8.2
08CB0:  BRA    8CB8
08CB2:  MOVLB  1
08CB4:  BSF    xFB.0
08CB6:  MOVLB  2
08CB8:  MOVLB  0
08CBA:  MOVF   FED,F
08CBC:  MOVF   FEF,W
08CBE:  BTFSC  FEF.7
08CC0:  GOTO   8CC6
08CC4:  XORLW  80
08CC6:  MOVLB  2
08CC8:  ADDWF  x01,F
08CCA:  BTFSS  FD8.0
08CCC:  BRA    8CD4
08CCE:  MOVLB  1
08CD0:  BSF    xFB.0
08CD2:  MOVLB  2
08CD4:  MOVLB  1
08CD6:  BTFSS  xFD.4
08CD8:  BRA    8CE0
08CDA:  MOVLB  0
08CDC:  GOTO   88B0
08CE0:  BTFSS  xFD.5
08CE2:  BRA    8CEA
08CE4:  MOVLB  0
08CE6:  GOTO   89B4
08CEA:  MOVLB  0
08CEC:  GOTO   8A8C
08CF0:  GOTO   8DFE (RETURN)
08CF4:  MOVLW  8E
08CF6:  MOVWF  00
08CF8:  MOVLB  1
08CFA:  MOVF   xF3,W
08CFC:  SUBWF  00,F
08CFE:  MOVFF  1F4,02
08D02:  MOVFF  1F5,01
08D06:  BSF    02.7
08D08:  MOVF   00,F
08D0A:  BTFSS  FD8.2
08D0C:  BRA    8D14
08D0E:  MOVLB  0
08D10:  GOTO   8D32
08D14:  MOVLB  0
08D16:  BCF    FD8.0
08D18:  MOVF   02,F
08D1A:  BTFSS  FD8.2
08D1C:  GOTO   8D28
08D20:  MOVF   01,F
08D22:  BTFSC  FD8.2
08D24:  GOTO   8D32
08D28:  RRCF   02,F
08D2A:  RRCF   01,F
08D2C:  DECFSZ 00,F
08D2E:  GOTO   8D16
08D32:  MOVLB  1
08D34:  BTFSC  xF4.7
08D36:  BRA    8D3E
08D38:  MOVLB  0
08D3A:  GOTO   8D4A
08D3E:  MOVLB  0
08D40:  COMF   01,F
08D42:  COMF   02,F
08D44:  INCF   01,F
08D46:  BTFSC  FD8.2
08D48:  INCF   02,F
08D4A:  GOTO   8E56 (RETURN)
*
08E60:  MOVFF  FEA,1F1
08E64:  MOVFF  FE9,1F0
08E68:  MOVLB  1
08E6A:  SWAPF  xEA,W
08E6C:  IORLW  F0
08E6E:  MOVWF  xEC
08E70:  ADDWF  xEC,F
08E72:  ADDLW  E2
08E74:  MOVWF  xED
08E76:  ADDLW  32
08E78:  MOVWF  xEF
08E7A:  MOVF   xEA,W
08E7C:  ANDLW  0F
08E7E:  ADDWF  xED,F
08E80:  ADDWF  xED,F
08E82:  ADDWF  xEF,F
08E84:  ADDLW  E9
08E86:  MOVWF  xEE
08E88:  ADDWF  xEE,F
08E8A:  ADDWF  xEE,F
08E8C:  SWAPF  xE9,W
08E8E:  ANDLW  0F
08E90:  ADDWF  xEE,F
08E92:  ADDWF  xEF,F
08E94:  RLCF   xEE,F
08E96:  RLCF   xEF,F
08E98:  COMF   xEF,F
08E9A:  RLCF   xEF,F
08E9C:  MOVF   xE9,W
08E9E:  ANDLW  0F
08EA0:  ADDWF  xEF,F
08EA2:  RLCF   xEC,F
08EA4:  MOVLW  07
08EA6:  MOVWF  xEB
08EA8:  MOVLW  0A
08EAA:  MOVLB  0
08EAC:  MOVLB  1
08EAE:  DECF   xEE,F
08EB0:  ADDWF  xEF,F
08EB2:  BTFSC  FD8.0
08EB4:  BRA    8EBC
08EB6:  MOVLB  0
08EB8:  GOTO   8EAC
08EBC:  MOVLB  0
08EBE:  MOVLB  1
08EC0:  DECF   xED,F
08EC2:  ADDWF  xEE,F
08EC4:  BTFSC  FD8.0
08EC6:  BRA    8ECE
08EC8:  MOVLB  0
08ECA:  GOTO   8EBE
08ECE:  MOVLB  0
08ED0:  MOVLB  1
08ED2:  DECF   xEC,F
08ED4:  ADDWF  xED,F
08ED6:  BTFSC  FD8.0
08ED8:  BRA    8EE0
08EDA:  MOVLB  0
08EDC:  GOTO   8ED0
08EE0:  MOVLB  0
08EE2:  MOVLB  1
08EE4:  DECF   xEB,F
08EE6:  ADDWF  xEC,F
08EE8:  BTFSC  FD8.0
08EEA:  BRA    8EF2
08EEC:  MOVLB  0
08EEE:  GOTO   8EE2
08EF2:  MOVLW  01
08EF4:  MOVWF  FEA
08EF6:  MOVLW  EB
08EF8:  MOVWF  FE9
08EFA:  MOVLW  07
08EFC:  ANDWF  xF0,W
08EFE:  BCF    xF0.6
08F00:  MOVLB  0
08F02:  ADDWF  FE9,F
08F04:  MOVLW  00
08F06:  ADDWFC FEA,F
08F08:  MOVF   FE9,W
08F0A:  SUBLW  EF
08F0C:  BTFSS  FD8.2
08F0E:  GOTO   8F1E
08F12:  DECFSZ FEA,W
08F14:  GOTO   8F1E
08F18:  MOVLB  1
08F1A:  BSF    xF0.6
08F1C:  MOVLB  0
08F1E:  MOVF   FEF,W
08F20:  MOVWF  00
08F22:  BTFSS  FD8.2
08F24:  GOTO   8F50
08F28:  MOVLB  1
08F2A:  BTFSS  xF0.6
08F2C:  BRA    8F34
08F2E:  MOVLB  0
08F30:  GOTO   8F50
08F34:  BTFSS  xF0.4
08F36:  BRA    8F3E
08F38:  MOVLB  0
08F3A:  GOTO   8F6A
08F3E:  BTFSS  xF0.3
08F40:  BRA    8F48
08F42:  MOVLB  0
08F44:  GOTO   8F50
08F48:  MOVLW  20
08F4A:  MOVLB  0
08F4C:  GOTO   8F5A
08F50:  MOVLB  1
08F52:  BSF    xF0.3
08F54:  BCF    xF0.4
08F56:  MOVLW  30
08F58:  MOVLB  0
08F5A:  ADDWF  00,F
08F5C:  MOVF   00,W
08F5E:  BTFSS  FA6.6
08F60:  GOTO   8F5E
08F64:  MOVLB  E
08F66:  MOVWF  xF9
08F68:  MOVLB  0
08F6A:  MOVF   FEE,W
08F6C:  MOVLB  1
08F6E:  BTFSC  xF0.6
08F70:  BRA    8F78
08F72:  MOVLB  0
08F74:  GOTO   8F08
08F78:  MOVLB  0
08F7A:  RETURN 0
*
0E2BE:  MOVLB  1
0E2C0:  CLRF   xD1
0E2C2:  CLRF   xD2
0E2C4:  MOVLW  01
0E2C6:  MOVWF  xD3
0E2C8:  CLRF   FDA
0E2CA:  CLRF   FD9
0E2CC:  MOVLW  01
0E2CE:  MOVWF  xD6
0E2D0:  MOVLW  C9
0E2D2:  MOVWF  xD5
0E2D4:  MOVLB  0
0E2D6:  MOVLW  01
0E2D8:  MOVWF  FEA
0E2DA:  MOVLW  CD
0E2DC:  MOVWF  FE9
0E2DE:  MOVFF  1D6,FE2
0E2E2:  MOVFF  1D5,FE1
0E2E6:  MOVFF  1D3,1D4
0E2EA:  BCF    FD8.0
0E2EC:  MOVF   FE5,W
0E2EE:  MULWF  FEE
0E2F0:  MOVF   FF3,W
0E2F2:  MOVLB  1
0E2F4:  ADDWFC xD1,F
0E2F6:  MOVF   FF4,W
0E2F8:  ADDWFC xD2,F
0E2FA:  DECFSZ xD4,F
0E2FC:  BRA    E302
0E2FE:  BRA    E308
0E300:  MOVLB  0
0E302:  MOVLB  0
0E304:  GOTO   E2EA
0E308:  MOVFF  1D1,FDE
0E30C:  MOVFF  1D2,1D1
0E310:  CLRF   xD2
0E312:  BTFSC  FD8.0
0E314:  INCF   xD2,F
0E316:  INCF   xD5,F
0E318:  BTFSC  FD8.2
0E31A:  INCF   xD6,F
0E31C:  INCF   xD3,F
0E31E:  MOVF   xD3,W
0E320:  SUBLW  05
0E322:  BTFSC  FD8.2
0E324:  BRA    E32C
0E326:  MOVLB  0
0E328:  GOTO   E2D6
0E32C:  MOVLB  0
0E32E:  GOTO   E3F2 (RETURN)
*
0F53A:  MOVLB  2
0F53C:  MOVF   x18,W
0F53E:  CLRF   01
0F540:  SUBWF  x17,W
0F542:  BTFSS  FD8.0
0F544:  BRA    F54C
0F546:  MOVLB  0
0F548:  GOTO   F556
0F54C:  MOVF   x17,W
0F54E:  MOVWF  00
0F550:  MOVLB  0
0F552:  GOTO   F580
0F556:  CLRF   00
0F558:  MOVLW  08
0F55A:  MOVLB  2
0F55C:  MOVWF  x19
0F55E:  MOVLB  0
0F560:  MOVLB  2
0F562:  RLCF   x17,F
0F564:  RLCF   00,F
0F566:  MOVF   x18,W
0F568:  SUBWF  00,W
0F56A:  BTFSC  FD8.0
0F56C:  MOVWF  00
0F56E:  RLCF   01,F
0F570:  DECFSZ x19,F
0F572:  BRA    F578
0F574:  BRA    F57E
0F576:  MOVLB  0
0F578:  MOVLB  0
0F57A:  GOTO   F560
0F57E:  MOVLB  0
0F580:  RETURN 0
0F582:  MOVF   01,W
0F584:  MOVFF  1AF,217
0F588:  MOVLW  64
0F58A:  MOVLB  2
0F58C:  MOVWF  x18
0F58E:  MOVLB  0
0F590:  CALL   F53A
0F594:  MOVFF  00,1AF
0F598:  MOVF   01,W
0F59A:  MOVLW  30
0F59C:  BTFSS  FD8.2
0F59E:  GOTO   F5C2
0F5A2:  MOVLB  1
0F5A4:  BTFSC  xB0.1
0F5A6:  BRA    F5AE
0F5A8:  MOVLB  0
0F5AA:  GOTO   F5DC
0F5AE:  BTFSS  xB0.3
0F5B0:  BRA    F5B8
0F5B2:  MOVLB  0
0F5B4:  GOTO   F5DC
0F5B8:  BTFSC  xB0.4
0F5BA:  MOVLW  20
0F5BC:  MOVLB  0
0F5BE:  GOTO   F5CC
0F5C2:  MOVLB  1
0F5C4:  BCF    xB0.3
0F5C6:  BCF    xB0.4
0F5C8:  BSF    xB0.0
0F5CA:  MOVLB  0
0F5CC:  ADDWF  01,F
0F5CE:  MOVF   01,W
0F5D0:  BTFSS  FA6.6
0F5D2:  GOTO   F5D0
0F5D6:  MOVLB  E
0F5D8:  MOVWF  xF9
0F5DA:  MOVLB  0
0F5DC:  MOVFF  1AF,217
0F5E0:  MOVLW  0A
0F5E2:  MOVLB  2
0F5E4:  MOVWF  x18
0F5E6:  MOVLB  0
0F5E8:  CALL   F53A
0F5EC:  MOVFF  00,1AF
0F5F0:  MOVF   01,W
0F5F2:  MOVLW  30
0F5F4:  BTFSS  FD8.2
0F5F6:  GOTO   F616
0F5FA:  MOVLB  1
0F5FC:  BTFSS  xB0.3
0F5FE:  BRA    F606
0F600:  MOVLB  0
0F602:  GOTO   F626
0F606:  BTFSC  xB0.0
0F608:  BRA    F610
0F60A:  MOVLB  0
0F60C:  GOTO   F626
0F610:  BTFSC  xB0.4
0F612:  MOVLW  20
0F614:  MOVLB  0
0F616:  ADDWF  01,F
0F618:  MOVF   01,W
0F61A:  BTFSS  FA6.6
0F61C:  GOTO   F61A
0F620:  MOVLB  E
0F622:  MOVWF  xF9
0F624:  MOVLB  0
0F626:  MOVLW  30
0F628:  MOVLB  1
0F62A:  ADDWF  xAF,F
0F62C:  MOVF   xAF,W
0F62E:  MOVLB  0
0F630:  BTFSS  FA6.6
0F632:  GOTO   F630
0F636:  MOVLB  E
0F638:  MOVWF  xF9
0F63A:  MOVLB  0
0F63C:  RETURN 0
*
0FD98:  MOVF   FE9,W
0FD9A:  MOVLB  1
0FD9C:  MOVWF  xAF
0FD9E:  BTFSC  xAE.7
0FDA0:  BRA    FDA8
0FDA2:  MOVLB  0
0FDA4:  GOTO   FDC4
0FDA8:  DECF   xAF,F
0FDAA:  BSF    xAF.5
0FDAC:  COMF   xAB,F
0FDAE:  COMF   xAC,F
0FDB0:  COMF   xAD,F
0FDB2:  COMF   xAE,F
0FDB4:  INCF   xAB,F
0FDB6:  BTFSC  FD8.2
0FDB8:  INCF   xAC,F
0FDBA:  BTFSC  FD8.2
0FDBC:  INCF   xAD,F
0FDBE:  BTFSC  FD8.2
0FDC0:  INCF   xAE,F
0FDC2:  MOVLB  0
0FDC4:  MOVLW  3B
0FDC6:  MOVLB  1
0FDC8:  MOVWF  xB6
0FDCA:  MOVLW  9A
0FDCC:  MOVWF  xB5
0FDCE:  MOVLW  CA
0FDD0:  MOVWF  xB4
0FDD2:  CLRF   xB3
0FDD4:  MOVLW  0A
0FDD6:  MOVWF  xB1
0FDD8:  MOVLB  0
0FDDA:  BSF    FD8.1
0FDDC:  MOVLW  01
0FDDE:  MOVWF  FEA
0FDE0:  MOVLW  AB
0FDE2:  MOVWF  FE9
0FDE4:  MOVFF  1AE,215
0FDE8:  MOVFF  1AD,214
0FDEC:  MOVFF  1AC,213
0FDF0:  MOVFF  1AB,212
0FDF4:  MOVFF  1B6,219
0FDF8:  MOVFF  1B5,218
0FDFC:  MOVFF  1B4,217
0FE00:  MOVFF  1B3,216
0FE04:  CALL   61F6
0FE08:  MOVF   01,W
0FE0A:  MOVF   00,F
0FE0C:  BTFSS  FD8.2
0FE0E:  GOTO   FE66
0FE12:  MOVLB  1
0FE14:  MOVF   xB1,W
0FE16:  XORLW  01
0FE18:  BTFSS  FD8.2
0FE1A:  BRA    FE22
0FE1C:  MOVLB  0
0FE1E:  GOTO   FE66
0FE22:  MOVF   xAF,W
0FE24:  BTFSS  FD8.2
0FE26:  BRA    FE2E
0FE28:  MOVLB  0
0FE2A:  GOTO   FE6E
0FE2E:  ANDLW  0F
0FE30:  SUBWF  xB1,W
0FE32:  BTFSS  FD8.2
0FE34:  BRA    FE3C
0FE36:  MOVLB  0
0FE38:  GOTO   FE48
0FE3C:  BTFSS  FD8.0
0FE3E:  BRA    FE46
0FE40:  MOVLB  0
0FE42:  GOTO   FED6
0FE46:  MOVLB  0
0FE48:  MOVLB  1
0FE4A:  BTFSS  xAF.7
0FE4C:  BRA    FE54
0FE4E:  MOVLB  0
0FE50:  GOTO   FED6
0FE54:  BTFSS  xAF.6
0FE56:  BRA    FE5E
0FE58:  MOVLB  0
0FE5A:  GOTO   FE6E
0FE5E:  MOVLW  20
0FE60:  MOVLB  0
0FE62:  GOTO   FEC6
0FE66:  MOVLW  20
0FE68:  MOVLB  1
0FE6A:  ANDWF  xAF,F
0FE6C:  MOVLB  0
0FE6E:  MOVLB  1
0FE70:  BTFSC  xAF.5
0FE72:  BRA    FE7A
0FE74:  MOVLB  0
0FE76:  GOTO   FE98
0FE7A:  BCF    xAF.5
0FE7C:  MOVF   00,W
0FE7E:  MOVWF  xAF
0FE80:  MOVLW  2D
0FE82:  MOVLB  0
0FE84:  BTFSS  FA6.6
0FE86:  GOTO   FE84
0FE8A:  MOVLB  E
0FE8C:  MOVWF  xF9
0FE8E:  MOVLB  1
0FE90:  MOVF   xAF,W
0FE92:  MOVWF  00
0FE94:  CLRF   xAF
0FE96:  MOVLB  0
0FE98:  MOVLW  30
0FE9A:  MOVLB  1
0FE9C:  BTFSC  xAF.5
0FE9E:  BRA    FEA6
0FEA0:  MOVLB  0
0FEA2:  GOTO   FEC6
0FEA6:  BCF    xAF.5
0FEA8:  MOVF   00,W
0FEAA:  MOVWF  xAF
0FEAC:  MOVLW  2D
0FEAE:  MOVLB  0
0FEB0:  BTFSS  FA6.6
0FEB2:  GOTO   FEB0
0FEB6:  MOVLB  E
0FEB8:  MOVWF  xF9
0FEBA:  MOVLB  1
0FEBC:  MOVF   xAF,W
0FEBE:  MOVWF  00
0FEC0:  CLRF   xAF
0FEC2:  MOVLW  30
0FEC4:  MOVLB  0
0FEC6:  ADDWF  00,F
0FEC8:  MOVF   00,W
0FECA:  BTFSS  FA6.6
0FECC:  GOTO   FECA
0FED0:  MOVLB  E
0FED2:  MOVWF  xF9
0FED4:  MOVLB  0
0FED6:  BCF    FD8.1
0FED8:  MOVFF  1B6,215
0FEDC:  MOVFF  1B5,214
0FEE0:  MOVFF  1B4,213
0FEE4:  MOVFF  1B3,212
0FEE8:  MOVLB  2
0FEEA:  CLRF   x19
0FEEC:  CLRF   x18
0FEEE:  CLRF   x17
0FEF0:  MOVLW  0A
0FEF2:  MOVWF  x16
0FEF4:  MOVLB  0
0FEF6:  CALL   61F6
0FEFA:  MOVFF  03,1B6
0FEFE:  MOVFF  02,1B5
0FF02:  MOVFF  01,1B4
0FF06:  MOVFF  00,1B3
0FF0A:  MOVLB  1
0FF0C:  DECFSZ xB1,F
0FF0E:  BRA    FF14
0FF10:  BRA    FF1A
0FF12:  MOVLB  0
0FF14:  MOVLB  0
0FF16:  GOTO   FDDA
0FF1A:  MOVLB  0
0FF1C:  RETURN 0
*
0FFBA:  ADDWF  FE8,W
0FFBC:  CLRF   FF7
0FFBE:  RLCF   FF7,F
0FFC0:  ADDLW  DB
0FFC2:  MOVWF  FF6
0FFC4:  MOVLW  FF
0FFC6:  ADDWFC FF7,F
0FFC8:  MOVLW  00
0FFCA:  MOVWF  FF8
0FFCC:  MOVWF  FFB
0FFCE:  TBLRD*-
0FFD0:  MOVF   FF5,W
0FFD2:  MOVWF  FFA
0FFD4:  TBLRD*
0FFD6:  MOVF   FF5,W
0FFD8:  MOVWF  FF9
0FFDA:  DATA 62,FF
0FFDC:  DATA 72,FF
0FFDE:  DATA 92,FF
0FFE0:  DATA A2,FF
*
10000:  MOVLW  20
10002:  MOVLB  2
10004:  BTFSS  x12.4
10006:  MOVLW  30
10008:  MOVWF  x13
1000A:  MOVFF  211,00
1000E:  BTFSC  00.7
10010:  BRA    10018
10012:  MOVLB  0
10014:  GOTO   1002A
10018:  COMF   00,F
1001A:  INCF   00,F
1001C:  MOVFF  00,211
10020:  MOVLW  2D
10022:  MOVWF  x13
10024:  BSF    x12.7
10026:  BSF    x12.0
10028:  MOVLB  0
1002A:  MOVF   01,W
1002C:  MOVFF  211,217
10030:  MOVLW  64
10032:  MOVLB  2
10034:  MOVWF  x18
10036:  MOVLB  0
10038:  CALL   F53A
1003C:  MOVFF  00,211
10040:  MOVLW  30
10042:  ADDWF  01,W
10044:  MOVLB  2
10046:  MOVWF  x14
10048:  MOVFF  211,217
1004C:  MOVLW  0A
1004E:  MOVWF  x18
10050:  MOVLB  0
10052:  CALL   F53A
10056:  MOVLW  30
10058:  ADDWF  00,W
1005A:  MOVLB  2
1005C:  MOVWF  x16
1005E:  MOVLW  30
10060:  ADDWF  01,W
10062:  MOVWF  x15
10064:  MOVFF  213,00
10068:  MOVLB  0
1006A:  MOVLW  30
1006C:  MOVLB  2
1006E:  SUBWF  x14,W
10070:  BTFSS  FD8.2
10072:  BRA    1007A
10074:  MOVLB  0
10076:  GOTO   10086
1007A:  BSF    x12.1
1007C:  BTFSC  x12.7
1007E:  BSF    x12.2
10080:  MOVLB  0
10082:  GOTO   100C6
10086:  MOVFF  213,214
1008A:  MOVLW  20
1008C:  MOVLB  2
1008E:  MOVWF  x13
10090:  MOVLW  30
10092:  SUBWF  x15,W
10094:  BTFSS  FD8.2
10096:  BRA    1009E
10098:  MOVLB  0
1009A:  GOTO   100AA
1009E:  BSF    x12.0
100A0:  BTFSC  x12.7
100A2:  BSF    x12.1
100A4:  MOVLB  0
100A6:  GOTO   100C6
100AA:  BTFSC  FD8.2
100AC:  BRA    100B4
100AE:  MOVLB  2
100B0:  BSF    x12.0
100B2:  MOVLB  0
100B4:  BTFSS  FD8.2
100B6:  GOTO   100C6
100BA:  MOVFF  214,215
100BE:  MOVLW  20
100C0:  MOVLB  2
100C2:  MOVWF  x14
100C4:  MOVLB  0
100C6:  MOVLB  2
100C8:  BTFSS  x12.2
100CA:  BRA    100D2
100CC:  MOVLB  0
100CE:  GOTO   100EC
100D2:  BTFSS  x12.1
100D4:  BRA    100DC
100D6:  MOVLB  0
100D8:  GOTO   100FE
100DC:  BTFSS  x12.0
100DE:  BRA    100E6
100E0:  MOVLB  0
100E2:  GOTO   10110
100E6:  MOVLB  0
100E8:  GOTO   10122
100EC:  MOVLB  2
100EE:  MOVF   x13,W
100F0:  MOVLB  0
100F2:  BTFSS  FA6.6
100F4:  GOTO   100F2
100F8:  MOVLB  E
100FA:  MOVWF  xF9
100FC:  MOVLB  0
100FE:  MOVLB  2
10100:  MOVF   x14,W
10102:  MOVLB  0
10104:  BTFSS  FA6.6
10106:  GOTO   10104
1010A:  MOVLB  E
1010C:  MOVWF  xF9
1010E:  MOVLB  0
10110:  MOVLB  2
10112:  MOVF   x15,W
10114:  MOVLB  0
10116:  BTFSS  FA6.6
10118:  GOTO   10116
1011C:  MOVLB  E
1011E:  MOVWF  xF9
10120:  MOVLB  0
10122:  MOVLB  2
10124:  MOVF   x16,W
10126:  MOVLB  0
10128:  BTFSS  FA6.6
1012A:  GOTO   10128
1012E:  MOVLB  E
10130:  MOVWF  xF9
10132:  MOVLB  0
10134:  GOTO   10A18 (RETURN)
.................... 
.................... #list
.................... 
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
*
022AE:  MOVLW  0B
022B0:  MOVWF  FEA
022B2:  MOVLW  02
022B4:  MOVWF  FE9
022B6:  MOVF   FEF,W
022B8:  BTFSC  FD8.2
022BA:  GOTO   22DA
022BE:  MOVLW  05
022C0:  MOVWF  01
022C2:  CLRF   00
022C4:  DECFSZ 00,F
022C6:  BRA    22C4
022C8:  DECFSZ 01,F
022CA:  BRA    22C2
022CC:  MOVLW  2E
022CE:  MOVWF  00
022D0:  DECFSZ 00,F
022D2:  BRA    22D0
022D4:  BRA    22D6
022D6:  DECFSZ FEF,F
022D8:  BRA    22BE
022DA:  RETURN 0
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
*
00218:  BTFSS  FA6.5
0021A:  GOTO   0218
0021E:  MOVLB  F
00220:  MOVF   x2F,W
00222:  MOVWF  1B
00224:  MOVLB  0
00226:  MOVLB  F
00228:  MOVF   x2A,W
0022A:  MOVWF  01
0022C:  BTFSC  1B.1
0022E:  BRA    0236
00230:  MOVLB  0
00232:  GOTO   023A
00236:  BCF    x2F.4
00238:  BSF    x2F.4
0023A:  MOVLB  0
0023C:  GOTO   0276 (RETURN)
*
0579C:  BTFSS  FA6.4
0579E:  GOTO   579C
057A2:  MOVLB  F
057A4:  MOVWF  x29
057A6:  MOVLB  0
057A8:  GOTO   57DE (RETURN)
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
*
091DA:  BTFSS  FA6.6
091DC:  GOTO   91DA
091E0:  MOVLB  E
091E2:  MOVWF  xF9
091E4:  MOVLB  0
091E6:  RETURN 0
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
*
02B6E:  MOVLB  B
02B70:  MOVF   x25,W
02B72:  SUBLW  08
02B74:  BTFSS  FD8.2
02B76:  BRA    2B7E
02B78:  MOVLB  0
02B7A:  GOTO   2B96
02B7E:  MOVWF  x27
02B80:  MOVLB  0
02B82:  MOVLB  B
02B84:  RLCF   x24,F
02B86:  DECFSZ x27,F
02B88:  BRA    2B8E
02B8A:  BRA    2B94
02B8C:  MOVLB  0
02B8E:  MOVLB  0
02B90:  GOTO   2B82
02B94:  MOVLB  0
02B96:  BSF    F92.1
02B98:  BCF    F92.0
02B9A:  BCF    F92.3
02B9C:  BCF    F89.3
02B9E:  MOVFF  B25,B27
02BA2:  MOVLB  B
02BA4:  BTFSS  x24.7
02BA6:  BCF    F89.0
02BA8:  BTFSC  x24.7
02BAA:  BSF    F89.0
02BAC:  RLCF   x24,F
02BAE:  BSF    F89.3
02BB0:  RLCF   01,F
02BB2:  BTFSS  F80.1
02BB4:  BCF    01.0
02BB6:  BTFSC  F80.1
02BB8:  BSF    01.0
02BBA:  BCF    F89.3
02BBC:  DECFSZ x27,F
02BBE:  BRA    2BC4
02BC0:  BRA    2BCA
02BC2:  MOVLB  0
02BC4:  MOVLB  0
02BC6:  GOTO   2BA2
02BCA:  MOVLB  0
02BCC:  RETURN 0
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
*
02B0E:  MOVLB  B
02B10:  MOVF   x25,W
02B12:  SUBLW  08
02B14:  BTFSS  FD8.2
02B16:  BRA    2B1E
02B18:  MOVLB  0
02B1A:  GOTO   2B36
02B1E:  MOVWF  x27
02B20:  MOVLB  0
02B22:  MOVLB  B
02B24:  RLCF   x24,F
02B26:  DECFSZ x27,F
02B28:  BRA    2B2E
02B2A:  BRA    2B34
02B2C:  MOVLB  0
02B2E:  MOVLB  0
02B30:  GOTO   2B22
02B34:  MOVLB  0
02B36:  BSF    F96.0
02B38:  BCF    F96.6
02B3A:  BCF    F96.1
02B3C:  BCF    F8D.1
02B3E:  MOVFF  B25,B27
02B42:  MOVLB  B
02B44:  BTFSS  x24.7
02B46:  BCF    F8D.6
02B48:  BTFSC  x24.7
02B4A:  BSF    F8D.6
02B4C:  RLCF   x24,F
02B4E:  BSF    F8D.1
02B50:  RLCF   01,F
02B52:  BTFSS  F84.0
02B54:  BCF    01.0
02B56:  BTFSC  F84.0
02B58:  BSF    01.0
02B5A:  BCF    F8D.1
02B5C:  DECFSZ x27,F
02B5E:  BRA    2B64
02B60:  BRA    2B6A
02B62:  MOVLB  0
02B64:  MOVLB  0
02B66:  GOTO   2B42
02B6A:  MOVLB  0
02B6C:  RETURN 0
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
*
0245C:  MOVLB  9
0245E:  MOVF   xF7,W
02460:  SUBLW  10
02462:  BTFSS  FD8.2
02464:  BRA    246C
02466:  MOVLB  0
02468:  GOTO   2486
0246C:  MOVWF  xF9
0246E:  MOVLB  0
02470:  MOVLB  9
02472:  RLCF   xF5,F
02474:  RLCF   xF6,F
02476:  DECFSZ xF9,F
02478:  BRA    247E
0247A:  BRA    2484
0247C:  MOVLB  0
0247E:  MOVLB  0
02480:  GOTO   2470
02484:  MOVLB  0
02486:  BSF    F93.4
02488:  BCF    F93.5
0248A:  BCF    F93.2
0248C:  BSF    F8A.2
0248E:  MOVFF  9F7,9F9
02492:  MOVLB  9
02494:  BTFSS  xF6.7
02496:  BCF    F8A.5
02498:  BTFSC  xF6.7
0249A:  BSF    F8A.5
0249C:  RLCF   xF5,F
0249E:  RLCF   xF6,F
024A0:  BCF    F8A.2
024A2:  RLCF   01,F
024A4:  RLCF   02,F
024A6:  BTFSS  F81.4
024A8:  BCF    01.0
024AA:  BTFSC  F81.4
024AC:  BSF    01.0
024AE:  BSF    F8A.2
024B0:  DECFSZ xF9,F
024B2:  BRA    24B8
024B4:  BRA    24BE
024B6:  MOVLB  0
024B8:  MOVLB  0
024BA:  GOTO   2492
024BE:  MOVLB  0
024C0:  RETURN 0
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
*
0281A:  MOVLB  9
0281C:  MOVF   xE2,W
0281E:  SUBLW  10
02820:  BTFSS  FD8.2
02822:  BRA    282A
02824:  MOVLB  0
02826:  GOTO   2844
0282A:  MOVWF  xE4
0282C:  MOVLB  0
0282E:  MOVLB  9
02830:  RLCF   xE0,F
02832:  RLCF   xE1,F
02834:  DECFSZ xE4,F
02836:  BRA    283C
02838:  BRA    2842
0283A:  MOVLB  0
0283C:  MOVLB  0
0283E:  GOTO   282E
02842:  MOVLB  0
02844:  BCF    F95.4
02846:  BCF    F95.5
02848:  BSF    F8C.5
0284A:  MOVFF  9E2,9E4
0284E:  MOVLB  9
02850:  BTFSS  xE1.7
02852:  BCF    F8C.4
02854:  BTFSC  xE1.7
02856:  BSF    F8C.4
02858:  RLCF   xE0,F
0285A:  RLCF   xE1,F
0285C:  BCF    F8C.5
0285E:  BSF    F8C.5
02860:  DECFSZ xE4,F
02862:  BRA    2868
02864:  BRA    286E
02866:  MOVLB  0
02868:  MOVLB  0
0286A:  GOTO   284E
0286E:  MOVLB  0
02870:  RETURN 0
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル2: ハードウェア抽象化層  
.................... #include "hal/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... #INT_TIMER1 
.................... static void TIMER1_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... void set_current_sec(unsigned int32 new_sec);
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "hal/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "hal/gpio.h"
.................... #ifndef GPIO_H
.................... #define GPIO_H
.................... 
.................... void gpio_init();
.................... void enable_negative_power();
.................... void disable_negative_power();
.................... void connect_port1();
.................... void disconnect_port1();
.................... void connect_port2();
.................... void disconnect_port2();
.................... 
.................... 
.................... // 
.................... void connect_negative_power1(int1 state);
.................... void connect_negative_power2(int1 state);
.................... #endif // GPIO_H
.................... 
.................... #include "device_driver/ad7490_driver.h"
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "device_driver/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル3: 基本ライブラリヘッダー（型定義・通信・ツール）
.................... #include "../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06,
....................     TIME_REQ          = 0x07
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/tool/mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... typedef enum smf_memory_id_t{
....................     // SATO
....................     SMF_SATO_DATA_TABLE = 0xA0,
....................     SMF_SATO_PICLOG = 0xA1,
....................     SMF_SATO_INNER_DIODE_HEADER = 0xA2,
....................     SMF_SATO_INNER_DIODE_DATA = 0xA3,
....................     SMF_SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SMF_SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     SMF_CIGS_DATA_TABLE = 0xC0,
....................     SMF_CIGS_PICLOG = 0xC1,
....................     SMF_CIGS_ENVIRO = 0xC2,
....................     SMF_CIGS_IV1_HEADER = 0xC3,
....................     SMF_CIGS_IV1_DATA = 0xC4,
....................     SMF_CIGS_IV2_HEADER = 0xC5,
....................     SMF_CIGS_IV2_DATA = 0xC6,
.................... };
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS   0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS   0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS     0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS       0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS         0x06AB0FFF
.................... #define CIGS_ENVIRO_START_ADDRESS       0x06AB1000
.................... #define CIGS_ENVIRO_END_ADDRESS         0x06B50FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS   0x06B51000
.................... #define CIGS_IV1_HEADER_END_ADDRESS     0x06BF0FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS     0x06BF1000
.................... #define CIGS_IV1_DATA_END_ADDRESS       0x06FF0FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS   0x06FF1000
.................... #define CIGS_IV2_HEADER_END_ADDRESS     0x07090FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS     0x07091000
.................... #define CIGS_IV2_DATA_END_ADDRESS       0x07490FFF
.................... 
.................... /*
.................... enum smf_memory_id{
....................     // SATO
....................     SATO_DATA_TABLE = 0xA0,
....................     SATO_PICLOG = 0xA1,
....................     SATO_INNER_DIODE_HEADER = 0xA2,
....................     SATO_INNER_DIODE_DATA = 0xA3,
....................     SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     IDF_CIGS_DATA_TABLE = 0xC0,
....................     IDF_CIGS_PICLOG = 0xC1,
....................     IDF_CIGS_ENVIRO = 0xC2,
....................     IDF_CIGS_IV1_HEADER = 0xC3,
....................     IDF_CIGS_IV1_DATA = 0xC4,
....................     IDF_CIGS_IV2_HEADER = 0xC5,
....................     IDF_CIGS_IV2_DATA = 0xC6,
.................... }
.................... */
.................... // DATA ID for CIGS
.................... #define DATA_ID_CIGS_DATA_TABLE 0xC0
.................... #define DATA_ID_CIGS_PICLOG 0xC1
.................... #define DATA_ID_CIGS_ENVIRO 0xC2
.................... #define DATA_ID_CIGS_IV1_HEADER 0xC3
.................... #define DATA_ID_CIGS_IV1_DATA 0xC4
.................... #define DATA_ID_CIGS_IV2_HEADER 0xC5
.................... #define DATA_ID_CIGS_IV2_DATA 0xC6
.................... 
.................... // FLASH ADDRESS for CIGS
.................... #define SMF_DATA_TABLE_HEADER_START_ADDRESS   0x07284000
.................... #define SMF_DATA_TABLE_HEADER_END_ADDRESS     0x07284FFF
.................... #define SMF_DATA_TABLE_DATA_START_ADDRESS     0x07285000
.................... #define SMF_DATA_TABLE_DATA_END_ADDRESS       0x07285FFF
.................... 
.................... #define SMF_PICLOG_HEADER_START_ADDRESS       0x07286000
.................... #define SMF_PICLOG_HEADER_END_ADDRESS         0x07286FFF
.................... #define SMF_PICLOG_DATA_START_ADDRESS         0x07287000
.................... #define SMF_PICLOG_DATA_END_ADDRESS           0x07296FFF
.................... 
.................... #define SMF_ENVIRO_HEADER_START_ADDRESS       0x07297000
.................... #define SMF_ENVIRO_HEADER_END_ADDRESS         0x07297FFF
.................... #define SMF_ENVIRO_DATA_START_ADDRESS         0x07298000
.................... #define SMF_ENVIRO_DATA_END_ADDRESS           0x07337FFF
.................... 
.................... #define SMF_IV1_HEADER_HEADER_START_ADDRESS   0x07338000
.................... #define SMF_IV1_HEADER_HEADER_END_ADDRESS     0x07338FFF
.................... #define SMF_IV1_HEADER_DATA_START_ADDRESS     0x07339000
.................... #define SMF_IV1_HEADER_DATA_END_ADDRESS       0x073D8FFF
.................... 
.................... #define SMF_IV1_DATA_HEADER_START_ADDRESS     0x073D9000
.................... #define SMF_IV1_DATA_HEADER_END_ADDRESS       0x073D9FFF
.................... #define SMF_IV1_DATA_DATA_START_ADDRESS       0x073DA000
.................... #define SMF_IV1_DATA_DATA_END_ADDRESS         0x077D9FFF
.................... 
.................... #define SMF_IV2_HEADER_HEADER_START_ADDRESS   0x077DA000
.................... #define SMF_IV2_HEADER_HEADER_END_ADDRESS     0x077DAFFF
.................... #define SMF_IV2_HEADER_DATA_START_ADDRESS     0x077DB000
.................... #define SMF_IV2_HEADER_DATA_END_ADDRESS       0x0787AFFF
.................... 
.................... #define SMF_IV2_DATA_HEADER_START_ADDRESS     0x0787B000
.................... #define SMF_IV2_DATA_HEADER_END_ADDRESS       0x0787BFFF
.................... #define SMF_IV2_DATA_DATA_START_ADDRESS       0x0787C000
.................... #define SMF_IV2_DATA_DATA_END_ADDRESS         0x07C7BFFF
.................... 
.................... 
.................... // FLASH SIZE for CIGS
.................... #define SMF_DATA_TABLE_SIZE  4096
.................... #define SMF_PICLOG_SIZE     1310720
.................... #define SMF_ENVIRO_SIZE     1310720
.................... #define SMF_IV1_HEADER_SIZE  655360
.................... #define SMF_IV1_DATA_SIZE    4194304
.................... #define SMF_IV2_HEADER_SIZE  655360
.................... #define SMF_IV2_DATA_SIZE    4194304
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // レベル4: デバイスドライバヘッダー
.................... #include "../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/device/ad7490.h"
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... // === AD7490 Control Word ===
.................... // Bit[15]   : WRITE (常に0)
.................... // Bit[14:13]: SEQ mode (シーケンス設定)
.................... // Bit[12]   : SHADOW (0=disabled, 1=enabled)
.................... // Bit[11]   : Don't Care
.................... // Bit[10]   : PM1 (Power Management)
.................... // Bit[9]    : PM0
.................... // Bit[8]    : REFSEL (0=internal, 1=external)
.................... // Bit[7]    : Coding (0=straight binary, 1=twos complement)
.................... // Bit[6]    : Don't Care
.................... // Bit[5]    : ADD2
.................... // Bit[4]    : ADD1
.................... // Bit[3]    : ADD0
.................... // Bit[2]    : DIFF (0=single-ended, 1=differential)
.................... // Bit[1:0]  : Don't Care
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000011
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000000
.................... 
.................... 
.................... // ----------------------------
.................... // WRITE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_WRITE_DISABLE = 0,  // 書き込み無効
....................     AD7490_WRITE_ENABLE  = 1   // 書き込み有効
.................... } ad7490_write_t;
.................... 
.................... // ----------------------------
.................... // SEQ bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SEQ_DISABLE = 0,
....................     AD7490_SEQ_ENABLE  = 1
.................... } ad7490_seq_t;
.................... 
.................... // ----------------------------
.................... // CODING bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CODING_BINARY  = 0, // ストレートバイナリ
....................     AD7490_CODING_TWOS    = 1  // Two’s complement
.................... } ad7490_coding_t;
.................... 
.................... // ----------------------------
.................... // RANGE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_RANGE_2REF  = 0, // 0〜2*REFIN
....................     AD7490_RANGE_REF   = 1  // 0〜REFIN
.................... } ad7490_range_t;
.................... 
.................... // ----------------------------
.................... // WEAK/TRI bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_DOUT_TRI   = 0, // Three-state
....................     AD7490_DOUT_WEAK  = 1  // Weakly driven
.................... } ad7490_dout_t;
.................... 
.................... // ----------------------------
.................... // SHADOW bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SHADOW_DISABLE = 0,
....................     AD7490_SHADOW_ENABLE  = 1
.................... } ad7490_shadow_t;
.................... 
.................... // ----------------------------
.................... // Power Mode (PM1, PM0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_PWR_NORMAL    = 0, // 00
....................     AD7490_PWR_FULLDOWN  = 1, // 01
....................     AD7490_PWR_AUTO      = 2, // 10
....................     AD7490_PWR_SHUTDOWN  = 3  // 11
.................... } ad7490_pwr_mode_t;
.................... 
.................... // ----------------------------
.................... // Channel Address (ADD3–ADD0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CH0  = 0,
....................     AD7490_CH1  = 1,
....................     AD7490_CH2  = 2,
....................     AD7490_CH3  = 3,
....................     AD7490_CH4  = 4,
....................     AD7490_CH5  = 5,
....................     AD7490_CH6  = 6,
....................     AD7490_CH7  = 7,
....................     AD7490_CH8  = 8,
....................     AD7490_CH9  = 9,
....................     AD7490_CH10 = 10,
....................     AD7490_CH11 = 11,
....................     AD7490_CH12 = 12,
....................     AD7490_CH13 = 13,
....................     AD7490_CH14 = 14,
....................     AD7490_CH15 = 15
.................... } ad7490_channel_t;
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // レベル5: 通信ライブラリヘッダー
.................... #include "../lib/communication/communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... #define SEND_TIME             0x03
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... #define SEND_TIME_LENGTH         4
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH},
....................    {SEND_TIME, SEND_TIME_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // レベル6: コア機能ヘッダー
.................... #include "domain/cigs_iv.h"
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "domain/cigs_flash.h"
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "domain/cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "domain/cigs_smf.h"
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../hal/cigs_config.h" // int8,int32 型など(CCS C) 依存
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "cigs_flash.h"       // MISF_ADDRESS_TABLE, misf_counter_table 依存
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... extern int1 smf_update_flag[10]; // SMF更新フラグ
.................... 
.................... 
.................... // SMF管理用構造体
.................... typedef struct {
....................     ADDRESS_AREA_T header_area;
....................     ADDRESS_AREA_T data_area;
.................... } SMF_AREA_T;
.................... #define SMF_ID_COUNT 7
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 reserved;
.................... } SMF_PARTITION;
.................... 
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         SMF_PARTITION headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table);
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... 
.................... // レベル7: アプリケーションヘッダー
.................... #include "application/cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... // #include "../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... void handle_recieve_time(Command *command);
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "application/cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_PRINT 0xA3
.................... #define ID_MEAS_IV_PRINT 0xA4
.................... #define ID_MEAS_PD 0xA5
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_pd(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_1sweep(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_port1(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_port2(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int16 interval;
....................     unsigned int16 pd_threshold;
....................     unsigned int16 meas_time;
....................     unsigned int16 log_threshold;
....................     unsigned int16 sweep_limit;
.................... } meas_iv_param_t;
.................... 
.................... 
.................... // MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... meas_iv_param_t make_meas_iv_cmd(int8 *uplinkcmd_ptr);
.................... void print_meas_iv_cmd(meas_iv_param_t *cmd_ptr);
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "application/cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... //==============================================================================
.................... // .cファイル統合（CCS C単一コンパイル単位）
.................... //==============================================================================
.................... 
.................... // ハードウェア層実装ファイル
.................... // 実装は各 .c からビルドするためヘッダーでの取り込みは不要。必要なら下記のように直下参照に修正。
.................... #include "hal/timer.c"
.................... #include "timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... #INT_TIMER1 
.................... static void TIMER1_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... void set_current_sec(unsigned int32 new_sec);
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... int8 subsec;
.................... unsigned int32 time_ms = 0;
.................... unsigned int32 time_sec = 0;
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr()
.................... {
....................    set_timer0(0);  // 10msごとにリロード
*
0014E:  CLRF   FD7
00150:  CLRF   FD6
00152:  NOP   
....................    time_ms += 4;
00154:  MOVLW  04
00156:  MOVLB  1
00158:  ADDWF  x7E,F
0015A:  MOVLW  00
0015C:  ADDWFC x7F,F
0015E:  MOVLW  00
00160:  ADDWFC x80,F
00162:  MOVLW  00
00164:  ADDWFC x81,F
....................    if (time_ms >= 4294967290) {
00166:  MOVF   x81,W
00168:  SUBLW  FE
0016A:  BTFSS  FD8.0
0016C:  BRA    0174
0016E:  MOVLB  0
00170:  GOTO   01D0
00174:  MOVLB  0
00176:  XORLW  FF
00178:  BTFSS  FD8.2
0017A:  GOTO   01C4
0017E:  MOVLB  1
00180:  MOVF   x80,W
00182:  SUBLW  FE
00184:  BTFSS  FD8.0
00186:  BRA    018E
00188:  MOVLB  0
0018A:  GOTO   01D0
0018E:  MOVLB  0
00190:  XORLW  FF
00192:  BTFSS  FD8.2
00194:  GOTO   01C4
00198:  MOVLB  1
0019A:  MOVF   x7F,W
0019C:  SUBLW  FE
0019E:  BTFSS  FD8.0
001A0:  BRA    01A8
001A2:  MOVLB  0
001A4:  GOTO   01D0
001A8:  MOVLB  0
001AA:  XORLW  FF
001AC:  BTFSS  FD8.2
001AE:  GOTO   01C4
001B2:  MOVLB  1
001B4:  MOVF   x7E,W
001B6:  SUBLW  F9
001B8:  BTFSS  FD8.0
001BA:  BRA    01C2
001BC:  MOVLB  0
001BE:  GOTO   01D0
001C2:  MOVLB  0
....................       time_ms = 0;
001C4:  MOVLB  1
001C6:  CLRF   x81
001C8:  CLRF   x80
001CA:  CLRF   x7F
001CC:  CLRF   x7E
001CE:  MOVLB  0
....................    }
.................... }
.................... 
001D0:  BCF    FF2.2
001D2:  GOTO   0090
.................... #INT_TIMER1 
.................... static void TIMER1_isr()
.................... {
....................    set_timer1(0x8000); 
001D6:  MOVLW  80
001D8:  MOVWF  FCF
001DA:  CLRF   FCE
001DC:  NOP   
....................    time_sec++;
001DE:  MOVLW  01
001E0:  MOVLB  1
001E2:  ADDWF  x82,F
001E4:  BTFSC  FD8.0
001E6:  INCF   x83,F
001E8:  BTFSC  FD8.2
001EA:  INCF   x84,F
001EC:  BTFSC  FD8.2
001EE:  INCF   x85,F
001F0:  MOVLB  0
001F2:  BCF    F9E.0
001F4:  GOTO   0090
.................... }
.................... 
.................... void timer_init()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
*
0239A:  MOVLW  F8
0239C:  MOVWF  FF6
0239E:  MOVLW  01
023A0:  MOVWF  FF7
023A2:  MOVLW  00
023A4:  MOVWF  FF8
023A6:  CALL   22DC
....................    clear_interrupt(INT_TIMER1);
023AA:  BCF    F9E.0
....................    time_ms = 0;
023AC:  MOVLB  1
023AE:  CLRF   x81
023B0:  CLRF   x80
023B2:  CLRF   x7F
023B4:  CLRF   x7E
....................    time_sec = 0;
023B6:  CLRF   x85
023B8:  CLRF   x84
023BA:  CLRF   x83
023BC:  CLRF   x82
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
023BE:  MOVLW  8F
023C0:  MOVWF  FCD
023C2:  CLRF   FAA
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256|RTCC_8_BIT);
023C4:  MOVLW  D7
023C6:  MOVWF  FD5
....................    set_timer1(0); 
023C8:  CLRF   FCF
023CA:  CLRF   FCE
023CC:  NOP   
....................    enable_interrupts(INT_TIMER1);   
023CE:  BSF    F9D.0
....................    enable_interrupts(INT_TIMER0);
023D0:  BSF    FF2.5
....................    enable_interrupts(GLOBAL);
023D2:  MOVLW  C0
023D4:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
023D6:  MOVLW  0C
023D8:  MOVWF  FF6
023DA:  MOVLW  02
023DC:  MOVWF  FF7
023DE:  MOVLW  00
023E0:  MOVWF  FF8
023E2:  MOVLB  0
023E4:  CALL   22DC
023E8:  GOTO   12D20 (RETURN)
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    time_sec = new_sec;
*
0FF1E:  MOVFF  1A9,185
0FF22:  MOVFF  1A8,184
0FF26:  MOVFF  1A7,183
0FF2A:  MOVFF  1A6,182
0FF2E:  GOTO   12740 (RETURN)
.................... }
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return time_sec;
*
03C16:  MOVFF  182,00
03C1A:  MOVFF  183,01
03C1E:  MOVFF  184,02
03C22:  MOVFF  185,03
03C26:  RETURN 0
.................... }
.................... 
.................... unsigned int16 get_current_msec()
.................... {
....................    return time_ms;
*
09B3C:  MOVLB  1
09B3E:  MOVF   x7E,W
09B40:  MOVWF  01
09B42:  MOVF   x7F,W
09B44:  MOVWF  02
09B46:  MOVLB  0
09B48:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "hal/uart.c"
.................... #include "uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
00240:  GOTO   0244
00244:  GOTO   024E
00248:  BTFSS  4B.0
0024A:  GOTO   0282
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
0024E:  MOVF   4A,W
00250:  SUBLW  1F
00252:  BTFSS  FD8.0
00254:  GOTO   0282
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
00258:  MOVF   4A,W
0025A:  INCF   4A,F
0025C:  ANDLW  1F
0025E:  CLRF   03
00260:  ADDLW  2A
00262:  MOVWF  FE9
00264:  MOVLW  00
00266:  ADDWFC 03,W
00268:  MOVWF  FEA
0026A:  MOVFF  FEA,B2D
0026E:  MOVFF  FE9,B2C
00272:  GOTO   0218
00276:  MOVFF  B2D,FEA
0027A:  MOVFF  B2C,FE9
0027E:  MOVF   01,W
00280:  MOVWF  FEF
00282:  BCF    FA6.5
00284:  GOTO   0090
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
02370:  MOVLW  88
02372:  MOVWF  FF6
02374:  MOVLW  02
02376:  MOVWF  FF7
02378:  MOVLW  00
0237A:  MOVWF  FF8
0237C:  CALL   22DC
....................    enable_interrupts(INT_RDA3);
02380:  BSF    F61.5
....................    enable_interrupts(GLOBAL);
02382:  MOVLW  C0
02384:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
02386:  MOVLW  9A
02388:  MOVWF  FF6
0238A:  MOVLW  02
0238C:  MOVWF  FF7
0238E:  MOVLW  00
02390:  MOVWF  FF8
02392:  CALL   22DC
02396:  GOTO   12D1C (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
05760:  MOVFF  1E2,03
05764:  MOVLB  1
05766:  MOVF   xE1,W
05768:  MOVWF  FE9
0576A:  MOVFF  03,FEA
0576E:  MOVFF  FEF,1E3
05772:  MOVFF  1E0,FEA
05776:  MOVFF  1DF,FE9
0577A:  CLRF   00
0577C:  CLRF   02
0577E:  MOVFF  1E3,01
05782:  MOVLB  0
05784:  CALL   234C
....................    *receive_signal_size = 0;
05788:  MOVFF  1E2,03
0578C:  MOVLB  1
0578E:  MOVF   xE1,W
05790:  MOVWF  FE9
05792:  MOVFF  03,FEA
05796:  CLRF   FEF
05798:  MOVLB  0
0579A:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "hal/gpio.c"
.................... #include "cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "gpio.h"
.................... #ifndef GPIO_H
.................... #define GPIO_H
.................... 
.................... void gpio_init();
.................... void enable_negative_power();
.................... void disable_negative_power();
.................... void connect_port1();
.................... void disconnect_port1();
.................... void connect_port2();
.................... void disconnect_port2();
.................... 
.................... 
.................... // 
.................... void connect_negative_power1(int1 state);
.................... void connect_negative_power2(int1 state);
.................... #endif // GPIO_H
.................... 
.................... #include "../../lib/tool/types.h"
.................... #ifndef TYPES_H
.................... #define TYPES_H
.................... 
.................... #define bool int1
.................... 
.................... 
.................... 
.................... #endif // TYPES_H
.................... // End of types.h
.................... 
.................... 
.................... 
.................... void gpio_init() {
....................     enable_negative_power();
....................     disconnect_port1();
....................     disconnect_port2();
.................... }
.................... 
.................... void enable_negative_power() {
....................     output_low(EN_NPWR1);
.................... }
.................... 
.................... void connect_negative_power1(int1 state) {
....................     if (state) {
*
05222:  MOVLB  1
05224:  MOVF   x99,F
05226:  BTFSS  FD8.2
05228:  BRA    5230
0522A:  MOVLB  0
0522C:  GOTO   523C
05230:  MOVLB  0
....................         output_low(EN_NPWR1);
05232:  MOVLW  17
05234:  MOVWF  F94
05236:  BCF    F8B.7
....................     } else {
05238:  GOTO   5242
....................         output_high(EN_NPWR1);
0523C:  MOVLW  17
0523E:  MOVWF  F94
05240:  BSF    F8B.7
....................     }
05242:  GOTO   12D7A (RETURN)
.................... }
.................... 
.................... void connect_negative_power2(int1 state) {
....................     if (state) {
....................         output_high(EN_NPWR2);
....................     } else {
....................         output_low(EN_NPWR2);
....................     }
.................... }
.................... 
.................... void connect_port1(){
....................     output_high(CONNECT_CIGS1);
*
05212:  MOVLW  17
05214:  MOVWF  F94
05216:  BSF    F8B.3
05218:  RETURN 0
.................... }
.................... 
.................... void disconnect_port1(){
....................     output_low(CONNECT_CIGS1);
*
0926A:  MOVLW  17
0926C:  MOVWF  F94
0926E:  BCF    F8B.3
09270:  RETURN 0
.................... }
.................... 
.................... void connect_port2(){
....................     output_high(CONNECT_CIGS2);
*
0521A:  MOVLW  17
0521C:  MOVWF  F94
0521E:  BSF    F8B.5
05220:  RETURN 0
.................... }
.................... 
.................... void disconnect_port2(){
....................     output_low(CONNECT_CIGS2);
*
09272:  MOVLW  17
09274:  MOVWF  F94
09276:  BCF    F8B.5
09278:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "device_driver/ad7490_driver.c"
.................... #include "ad7490_driver.h"                          // 同じデバイスフォルダのヘッダー
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/ad7490.h"               // ADCデバイスライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... // === AD7490 Control Word ===
.................... // Bit[15]   : WRITE (常に0)
.................... // Bit[14:13]: SEQ mode (シーケンス設定)
.................... // Bit[12]   : SHADOW (0=disabled, 1=enabled)
.................... // Bit[11]   : Don't Care
.................... // Bit[10]   : PM1 (Power Management)
.................... // Bit[9]    : PM0
.................... // Bit[8]    : REFSEL (0=internal, 1=external)
.................... // Bit[7]    : Coding (0=straight binary, 1=twos complement)
.................... // Bit[6]    : Don't Care
.................... // Bit[5]    : ADD2
.................... // Bit[4]    : ADD1
.................... // Bit[3]    : ADD0
.................... // Bit[2]    : DIFF (0=single-ended, 1=differential)
.................... // Bit[1:0]  : Don't Care
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000011
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000000
.................... 
.................... 
.................... // ----------------------------
.................... // WRITE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_WRITE_DISABLE = 0,  // 書き込み無効
....................     AD7490_WRITE_ENABLE  = 1   // 書き込み有効
.................... } ad7490_write_t;
.................... 
.................... // ----------------------------
.................... // SEQ bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SEQ_DISABLE = 0,
....................     AD7490_SEQ_ENABLE  = 1
.................... } ad7490_seq_t;
.................... 
.................... // ----------------------------
.................... // CODING bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CODING_BINARY  = 0, // ストレートバイナリ
....................     AD7490_CODING_TWOS    = 1  // Two’s complement
.................... } ad7490_coding_t;
.................... 
.................... // ----------------------------
.................... // RANGE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_RANGE_2REF  = 0, // 0〜2*REFIN
....................     AD7490_RANGE_REF   = 1  // 0〜REFIN
.................... } ad7490_range_t;
.................... 
.................... // ----------------------------
.................... // WEAK/TRI bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_DOUT_TRI   = 0, // Three-state
....................     AD7490_DOUT_WEAK  = 1  // Weakly driven
.................... } ad7490_dout_t;
.................... 
.................... // ----------------------------
.................... // SHADOW bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SHADOW_DISABLE = 0,
....................     AD7490_SHADOW_ENABLE  = 1
.................... } ad7490_shadow_t;
.................... 
.................... // ----------------------------
.................... // Power Mode (PM1, PM0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_PWR_NORMAL    = 0, // 00
....................     AD7490_PWR_FULLDOWN  = 1, // 01
....................     AD7490_PWR_AUTO      = 2, // 10
....................     AD7490_PWR_SHUTDOWN  = 3  // 11
.................... } ad7490_pwr_mode_t;
.................... 
.................... // ----------------------------
.................... // Channel Address (ADD3–ADD0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CH0  = 0,
....................     AD7490_CH1  = 1,
....................     AD7490_CH2  = 2,
....................     AD7490_CH3  = 3,
....................     AD7490_CH4  = 4,
....................     AD7490_CH5  = 5,
....................     AD7490_CH6  = 6,
....................     AD7490_CH7  = 7,
....................     AD7490_CH8  = 8,
....................     AD7490_CH9  = 9,
....................     AD7490_CH10 = 10,
....................     AD7490_CH11 = 11,
....................     AD7490_CH12 = 12,
....................     AD7490_CH13 = 13,
....................     AD7490_CH14 = 14,
....................     AD7490_CH15 = 15
.................... } ad7490_channel_t;
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... #define AD7490_MULTI_CHANNEL_MAX 4
.................... 
.................... unsigned int16 ad7490_make_single_channel_cmd(unsigned int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     // Set default values for all fields
....................     cmd.fields.reserved0 = 0; 
....................     cmd.fields.reserved1 = 0; 
....................     cmd.fields.reserved2 = 0; 
....................     cmd.fields.reserved3 = 0;
....................     cmd.fields.coding = AD7490_CODING_BINARY; 
....................     cmd.fields.range = AD7490_RANGE_REF; 
....................     cmd.fields.weak_tri = AD7490_DOUT_TRI; 
....................     cmd.fields.shadow = AD7490_SHADOW_DISABLE; 
....................     cmd.fields.pm0 = (AD7490_PM_NORMAL >> 0) & 1; 
....................     cmd.fields.pm1 = (AD7490_PM_NORMAL >> 1) & 1; 
....................     cmd.fields.add0 = (channel >> 0) & 1; 
....................     cmd.fields.add1 = (channel >> 1) & 1; 
....................     cmd.fields.add2 = (channel >> 2) & 1;     
....................     cmd.fields.add3 = (channel >> 3) & 1; 
....................     cmd.fields.seq = AD7490_SEQ_DISABLE; 
....................     cmd.fields.write = AD7490_WRITE_ENABLE;
.................... 
....................     return cmd.value;
.................... }
.................... 
.................... void ad7490_set_multi_channel(ad7490_channel_t channel, unsigned int8 num_channels)
.................... {
....................     ad7490_cmd_t cmd;
....................     // Set default values for all fields
....................     cmd.fields.reserved0 = 0; 
....................     cmd.fields.reserved1 = 0; 
....................     cmd.fields.reserved2 = 0; 
....................     cmd.fields.reserved3 = 0;
....................     cmd.fields.coding = AD7490_CODING_BINARY; 
....................     cmd.fields.range = AD7490_RANGE_REF; 
....................     cmd.fields.weak_tri = AD7490_DOUT_TRI; 
....................     cmd.fields.shadow = AD7490_SHADOW_DISABLE; 
....................     cmd.fields.pm0 = (AD7490_PM_NORMAL >> 0) & 1; 
....................     cmd.fields.pm1 = (AD7490_PM_NORMAL >> 1) & 1; 
....................     cmd.fields.add0 = (channel >> 0) & 1; 
....................     cmd.fields.add1 = (channel >> 1) & 1; 
....................     cmd.fields.add2 = (channel >> 2) & 1;     
....................     cmd.fields.add3 = (channel >> 3) & 1; 
....................     cmd.fields.seq = AD7490_SEQ_ENABLE; 
....................     cmd.fields.write = AD7490_WRITE_ENABLE;
.................... }
.................... 
.................... void ad7490_init()
.................... {
....................     fprintf(PC, "AD7490 Initialize\r\n");
*
025BE:  MOVLW  A6
025C0:  MOVWF  FF6
025C2:  MOVLW  02
025C4:  MOVWF  FF7
025C6:  MOVLW  00
025C8:  MOVWF  FF8
025CA:  CALL   22DC
....................     output_high(ADC_CS); 
025CE:  MOVLW  FD
025D0:  MOVWF  F93
025D2:  BSF    F8A.1
....................     delay_ms(10); 
025D4:  MOVLW  0A
025D6:  MOVLB  B
025D8:  MOVWF  x02
025DA:  MOVLB  0
025DC:  CALL   22AE
....................     unsigned int16 readdata = ad7490_read(ADC_CIGS1_CURR);
025E0:  MOVLW  01
025E2:  MOVLB  9
025E4:  MOVWF  xEE
025E6:  MOVLB  0
025E8:  CALL   24C2
025EC:  MOVFF  02,19A
025F0:  MOVFF  01,199
....................     delay_ms(1);
025F4:  MOVLW  01
025F6:  MOVLB  B
025F8:  MOVWF  x02
025FA:  MOVLB  0
025FC:  CALL   22AE
....................     fprintf(PC, "\t%04LX\r\n", readdata);
02600:  MOVLW  09
02602:  BTFSS  FA6.6
02604:  GOTO   2602
02608:  MOVLB  E
0260A:  MOVWF  xF9
0260C:  MOVFF  19A,9E8
02610:  MOVLW  37
02612:  MOVLB  9
02614:  MOVWF  xE9
02616:  MOVLB  0
02618:  CALL   2542
0261C:  MOVFF  199,9E8
02620:  MOVLW  37
02622:  MOVLB  9
02624:  MOVWF  xE9
02626:  MOVLB  0
02628:  CALL   2542
0262C:  MOVLW  0D
0262E:  BTFSS  FA6.6
02630:  GOTO   262E
02634:  MOVLB  E
02636:  MOVWF  xF9
02638:  MOVLW  0A
0263A:  MOVLB  0
0263C:  BTFSS  FA6.6
0263E:  GOTO   263C
02642:  MOVLB  E
02644:  MOVWF  xF9
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
02646:  MOVLB  1
02648:  INCFSZ x99,W
0264A:  BRA    2650
0264C:  BRA    2656
0264E:  MOVLB  0
02650:  MOVLB  0
02652:  GOTO   266E
02656:  MOVLB  0
02658:  MOVLB  1
0265A:  INCFSZ x9A,W
0265C:  BRA    2662
0265E:  BRA    2668
02660:  MOVLB  0
02662:  MOVLB  0
02664:  GOTO   266E
02668:  MOVLB  0
0266A:  GOTO   268E
0266E:  MOVLB  1
02670:  MOVF   x99,F
02672:  BTFSC  FD8.2
02674:  BRA    267C
02676:  MOVLB  0
02678:  GOTO   26A2
0267C:  MOVLB  0
0267E:  MOVLB  1
02680:  MOVF   x9A,F
02682:  BTFSC  FD8.2
02684:  BRA    268C
02686:  MOVLB  0
02688:  GOTO   26A2
0268C:  MOVLB  0
....................         fprintf(PC, "\tConnect error!\r\n");
0268E:  MOVLW  BA
02690:  MOVWF  FF6
02692:  MOVLW  02
02694:  MOVWF  FF7
02696:  MOVLW  00
02698:  MOVWF  FF8
0269A:  CALL   22DC
....................     } else {
0269E:  GOTO   26B2
....................         fprintf(PC, "\tConnect successful\r\n");
026A2:  MOVLW  CC
026A4:  MOVWF  FF6
026A6:  MOVLW  02
026A8:  MOVWF  FF7
026AA:  MOVLW  00
026AC:  MOVWF  FF8
026AE:  CALL   22DC
....................     }
....................     fprintf(PC, "\tComplete\r\n");
026B2:  MOVLW  E2
026B4:  MOVWF  FF6
026B6:  MOVLW  02
026B8:  MOVWF  FF7
026BA:  MOVLW  00
026BC:  MOVWF  FF8
026BE:  CALL   22DC
026C2:  GOTO   12D24 (RETURN)
.................... }
.................... 
.................... unsigned int16 ad7490_read(int8 channel)
*
024C2:  MOVFF  9EE,9F5
024C6:  GOTO   23EC
024CA:  MOVFF  02,9F0
024CE:  MOVFF  01,9EF
.................... {   
....................     unsigned int16 cmd = ad7490_make_cmd(channel);
....................     // fprintf(PC, "\t[ADC] Command: %04LX\r\n", cmd);
....................     output_low(ADC_CS); 
024D2:  MOVLW  FD
024D4:  MOVWF  F93
024D6:  BCF    F8A.1
....................     delay_us(1); 
024D8:  BRA    24DA
024DA:  BRA    24DC
....................     spi_xfer(ADC_STREAM, cmd); 
024DC:  MOVFF  9F0,9F6
024E0:  MOVFF  9EF,9F5
024E4:  MOVLW  10
024E6:  MOVLB  9
024E8:  MOVWF  xF7
024EA:  MOVLW  01
024EC:  MOVWF  xF8
024EE:  MOVLB  0
024F0:  CALL   245C
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd);
....................     #endif
....................     output_high(ADC_CS); 
024F4:  MOVLW  FD
024F6:  MOVWF  F93
024F8:  BSF    F8A.1
....................     delay_us(1);
024FA:  BRA    24FC
024FC:  BRA    24FE
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
024FE:  MOVLW  FD
02500:  MOVWF  F93
02502:  BCF    F8A.1
....................     delay_us(1);
02504:  BRA    2506
02506:  BRA    2508
....................     unsigned int16 ans = spi_xfer(ADC_STREAM, 0x0000);
02508:  MOVLB  9
0250A:  CLRF   xF6
0250C:  CLRF   xF5
0250E:  MOVLW  10
02510:  MOVWF  xF7
02512:  MOVLW  01
02514:  MOVWF  xF8
02516:  MOVLB  0
02518:  CALL   245C
0251C:  MOVFF  02,9F2
02520:  MOVFF  01,9F1
....................     output_high(ADC_CS); 
02524:  MOVLW  FD
02526:  MOVWF  F93
02528:  BSF    F8A.1
....................     unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
0252A:  MOVLB  9
0252C:  MOVF   xF1,W
0252E:  MOVWF  xF3
02530:  MOVF   xF2,W
02532:  ANDLW  0F
02534:  MOVWF  xF4
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata);
....................     #endif
....................     return readdata;
02536:  MOVF   xF3,W
02538:  MOVWF  01
0253A:  MOVF   xF4,W
0253C:  MOVWF  02
0253E:  MOVLB  0
02540:  RETURN 0
.................... }
.................... 
.................... void ad7490_read_2port(unsigned int8 channel1, unsigned int8 channel2, unsigned int16 *data1, unsigned int16 *data2)
.................... {   
....................     unsigned int16 cmd1 = ad7490_make_cmd(channel1);
....................     unsigned int16 cmd2 = ad7490_make_cmd(channel2);
....................     // fprintf(PC, "\t[ADC] Command: %04LX\r\n", cmd);
....................     output_low(ADC_CS); 
....................     delay_us(1); 
....................     spi_xfer(ADC_STREAM, cmd1); 
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd1);
....................     #endif
....................     output_high(ADC_CS); 
....................     delay_us(1);
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
....................     delay_us(1);
....................     unsigned int16 ans1 = spi_xfer(ADC_STREAM, cmd2);
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd2);
....................     #endif
....................     output_high(ADC_CS); 
....................     delay_us(1);
....................     unsigned int16 ans2 = spi_xfer(ADC_STREAM, 0x0000);
....................     output_high(ADC_CS); 
....................     unsigned int16 readdata1 = ans1 & 0x0FFF; //Conver LSB <--> MSB
....................     unsigned int16 readdata2 = ans2 & 0x0FFF; //Conver LSB <--> MSB
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata1);
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata2);
....................     #endif
....................     *data1 = readdata1;
....................     *data2 = readdata2;
.................... }
.................... 
.................... 
.................... // End of file
.................... 
.................... #include "device_driver/mcp4901_driver.c"
.................... #include "mcp4901_driver.h"                        
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/cigs_config.h"             
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mcp4901.h"       
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // #define MCP4901_DEBUG
.................... 
.................... void mcp4901_init()
.................... {
....................     fprintf(PC, "MCP4901 Initialize\r\n");
*
028EE:  MOVLW  EE
028F0:  MOVWF  FF6
028F2:  MOVLW  02
028F4:  MOVWF  FF7
028F6:  MOVLW  00
028F8:  MOVWF  FF8
028FA:  CALL   22DC
....................     output_high(DAC1_CS); 
028FE:  MOVLW  3F
02900:  MOVWF  F95
02902:  BSF    F8C.7
....................     output_high(DAC2_CS); 
02904:  MOVLW  3F
02906:  MOVWF  F95
02908:  BSF    F8C.6
....................     delay_ms(10); 
0290A:  MOVLW  0A
0290C:  MOVLB  B
0290E:  MOVWF  x02
02910:  MOVLB  0
02912:  CALL   22AE
....................     mcp4901_1_write(10); 
02916:  MOVLB  9
02918:  CLRF   xDD
0291A:  MOVLW  0A
0291C:  MOVWF  xDC
0291E:  MOVLB  0
02920:  CALL   2872
....................     mcp4901_2_write(10); 
02924:  MOVLB  9
02926:  CLRF   xDD
02928:  MOVLW  0A
0292A:  MOVWF  xDC
0292C:  MOVLB  0
0292E:  CALL   28B0
....................     unsigned int16 readdata;
....................     readdata = ad7490_read(ADC_CIGS1_CURR); 
02932:  MOVLW  01
02934:  MOVLB  9
02936:  MOVWF  xEE
02938:  MOVLB  0
0293A:  CALL   24C2
0293E:  MOVFF  02,19A
02942:  MOVFF  01,199
....................     fprintf(PC, "%04LX\r\n", readdata);
02946:  MOVFF  19A,9E8
0294A:  MOVLW  37
0294C:  MOVLB  9
0294E:  MOVWF  xE9
02950:  MOVLB  0
02952:  CALL   2542
02956:  MOVFF  199,9E8
0295A:  MOVLW  37
0295C:  MOVLB  9
0295E:  MOVWF  xE9
02960:  MOVLB  0
02962:  CALL   2542
02966:  MOVLW  0D
02968:  BTFSS  FA6.6
0296A:  GOTO   2968
0296E:  MOVLB  E
02970:  MOVWF  xF9
02972:  MOVLW  0A
02974:  MOVLB  0
02976:  BTFSS  FA6.6
02978:  GOTO   2976
0297C:  MOVLB  E
0297E:  MOVWF  xF9
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
02980:  MOVLB  1
02982:  INCFSZ x99,W
02984:  BRA    298A
02986:  BRA    2990
02988:  MOVLB  0
0298A:  MOVLB  0
0298C:  GOTO   29A8
02990:  MOVLB  0
02992:  MOVLB  1
02994:  INCFSZ x9A,W
02996:  BRA    299C
02998:  BRA    29A2
0299A:  MOVLB  0
0299C:  MOVLB  0
0299E:  GOTO   29A8
029A2:  MOVLB  0
029A4:  GOTO   29C8
029A8:  MOVLB  1
029AA:  MOVF   x99,F
029AC:  BTFSC  FD8.2
029AE:  BRA    29B6
029B0:  MOVLB  0
029B2:  GOTO   29DC
029B6:  MOVLB  0
029B8:  MOVLB  1
029BA:  MOVF   x9A,F
029BC:  BTFSC  FD8.2
029BE:  BRA    29C6
029C0:  MOVLB  0
029C2:  GOTO   29DC
029C6:  MOVLB  0
....................         fprintf(PC, "\t[DAC Port 1] Connect error!\r\n");
029C8:  MOVLW  04
029CA:  MOVWF  FF6
029CC:  MOVLW  03
029CE:  MOVWF  FF7
029D0:  MOVLW  00
029D2:  MOVWF  FF8
029D4:  CALL   22DC
....................     } else {
029D8:  GOTO   29EC
....................         fprintf(PC, "\t[DAC Port 1] Connect successful\r\n");
029DC:  MOVLW  24
029DE:  MOVWF  FF6
029E0:  MOVLW  03
029E2:  MOVWF  FF7
029E4:  MOVLW  00
029E6:  MOVWF  FF8
029E8:  CALL   22DC
....................     }
....................     fprintf(PC, "%04LX\r\n", readdata);
029EC:  MOVFF  19A,9E8
029F0:  MOVLW  37
029F2:  MOVLB  9
029F4:  MOVWF  xE9
029F6:  MOVLB  0
029F8:  CALL   2542
029FC:  MOVFF  199,9E8
02A00:  MOVLW  37
02A02:  MOVLB  9
02A04:  MOVWF  xE9
02A06:  MOVLB  0
02A08:  CALL   2542
02A0C:  MOVLW  0D
02A0E:  BTFSS  FA6.6
02A10:  GOTO   2A0E
02A14:  MOVLB  E
02A16:  MOVWF  xF9
02A18:  MOVLW  0A
02A1A:  MOVLB  0
02A1C:  BTFSS  FA6.6
02A1E:  GOTO   2A1C
02A22:  MOVLB  E
02A24:  MOVWF  xF9
....................     readdata = ad7490_read(ADC_CIGS2_CURR); 
02A26:  MOVLW  05
02A28:  MOVLB  9
02A2A:  MOVWF  xEE
02A2C:  MOVLB  0
02A2E:  CALL   24C2
02A32:  MOVFF  02,19A
02A36:  MOVFF  01,199
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
02A3A:  MOVLB  1
02A3C:  INCFSZ x99,W
02A3E:  BRA    2A44
02A40:  BRA    2A4A
02A42:  MOVLB  0
02A44:  MOVLB  0
02A46:  GOTO   2A62
02A4A:  MOVLB  0
02A4C:  MOVLB  1
02A4E:  INCFSZ x9A,W
02A50:  BRA    2A56
02A52:  BRA    2A5C
02A54:  MOVLB  0
02A56:  MOVLB  0
02A58:  GOTO   2A62
02A5C:  MOVLB  0
02A5E:  GOTO   2A82
02A62:  MOVLB  1
02A64:  MOVF   x99,F
02A66:  BTFSC  FD8.2
02A68:  BRA    2A70
02A6A:  MOVLB  0
02A6C:  GOTO   2A96
02A70:  MOVLB  0
02A72:  MOVLB  1
02A74:  MOVF   x9A,F
02A76:  BTFSC  FD8.2
02A78:  BRA    2A80
02A7A:  MOVLB  0
02A7C:  GOTO   2A96
02A80:  MOVLB  0
....................         fprintf(PC, "\t[DAC Port 2] Connect error!\r\n");
02A82:  MOVLW  48
02A84:  MOVWF  FF6
02A86:  MOVLW  03
02A88:  MOVWF  FF7
02A8A:  MOVLW  00
02A8C:  MOVWF  FF8
02A8E:  CALL   22DC
....................     } else {
02A92:  GOTO   2AA6
....................         fprintf(PC, "\t[DAC Port 2] Connect successful\r\n");
02A96:  MOVLW  68
02A98:  MOVWF  FF6
02A9A:  MOVLW  03
02A9C:  MOVWF  FF7
02A9E:  MOVLW  00
02AA0:  MOVWF  FF8
02AA2:  CALL   22DC
....................     }
....................     fprintf(PC, "\tComplete\r\n");
02AA6:  MOVLW  8C
02AA8:  MOVWF  FF6
02AAA:  MOVLW  03
02AAC:  MOVWF  FF7
02AAE:  MOVLW  00
02AB0:  MOVWF  FF8
02AB2:  CALL   22DC
02AB6:  GOTO   12D28 (RETURN)
.................... }
.................... 
.................... 
.................... void mcp4901_1_write(unsigned int16 value)
*
02872:  MOVFF  9DD,9E1
02876:  MOVFF  9DC,9E0
0287A:  CALL   26C6
0287E:  MOVFF  02,9DF
02882:  MOVFF  01,9DE
.................... {
....................     unsigned int16 cmd = mcp4901_make_cmd(value);
....................     #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................     #endif
....................     output_low(DAC1_CS); 
02886:  MOVLW  3F
02888:  MOVWF  F95
0288A:  BCF    F8C.7
....................     delay_us(1); 
0288C:  BRA    288E
0288E:  BRA    2890
....................     spi_xfer(DAC_STREAM, cmd); 
02890:  MOVFF  9DF,9E1
02894:  MOVFF  9DE,9E0
02898:  MOVLW  10
0289A:  MOVLB  9
0289C:  MOVWF  xE2
0289E:  MOVLW  01
028A0:  MOVWF  xE3
028A2:  MOVLB  0
028A4:  CALL   281A
....................     output_high(DAC1_CS); 
028A8:  MOVLW  3F
028AA:  MOVWF  F95
028AC:  BSF    F8C.7
028AE:  RETURN 0
.................... }
.................... 
.................... void mcp4901_2_write(unsigned int16 value)
028B0:  MOVFF  9DD,9E1
028B4:  MOVFF  9DC,9E0
028B8:  CALL   26C6
028BC:  MOVFF  02,9DF
028C0:  MOVFF  01,9DE
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC2_CS); 
028C4:  MOVLW  3F
028C6:  MOVWF  F95
028C8:  BCF    F8C.6
....................    delay_us(1); 
028CA:  BRA    28CC
028CC:  BRA    28CE
....................    spi_xfer(DAC_STREAM, cmd); 
028CE:  MOVFF  9DF,9E1
028D2:  MOVFF  9DE,9E0
028D6:  MOVLW  10
028D8:  MOVLB  9
028DA:  MOVWF  xE2
028DC:  MOVLW  01
028DE:  MOVWF  xE3
028E0:  MOVLB  0
028E2:  CALL   281A
....................    output_high(DAC2_CS); 
028E6:  MOVLW  3F
028E8:  MOVWF  F95
028EA:  BSF    F8C.6
028EC:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... 
.................... // ライブラリ実装ファイル
.................... #include "../lib/device/ad7490.c"
.................... // #include "ad7490.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 ad7490_readdata(unsigned int16 channel)
.................... {
....................     spi_xfer(ADC_STREAM, channel); // Dummy transfer to start communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC, "\t[ADC] <<< %04LX\r\n", channel);
....................     #endif
....................     unsigned int16 ans = spi_xfer(ADC_STREAM);
....................     return ans & 0x0FFF; //Conver LSB <--> MSB
.................... }
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     cmd.fields.reserved0 = 0; // Reserved bits
*
023EC:  MOVLB  9
023EE:  BCF    xF6.0
....................     cmd.fields.reserved1 = 0; // Reserved bits
023F0:  BCF    xF6.1
....................     cmd.fields.reserved2 = 0; // Reserved bits
023F2:  BCF    xF6.2
....................     cmd.fields.reserved3 = 0;
023F4:  BCF    xF6.3
....................     cmd.fields.coding = 1; // Two's complement
023F6:  BSF    xF6.4
....................     cmd.fields.range = 0; // Normal mode
023F8:  BCF    xF6.5
....................     cmd.fields.weak_tri = 0; // Strong trigger
023FA:  BCF    xF6.6
....................     cmd.fields.shadow = 0; // Direct access
023FC:  BCF    xF6.7
....................     cmd.fields.pm0 = AD7490_PM_NORMAL & 0b00000001; // Power mode bits
023FE:  BSF    xF7.0
....................     cmd.fields.pm1 = (AD7490_PM_NORMAL >> 1) & 0b00000001; // Power mode bits
02400:  BSF    xF7.1
....................     cmd.fields.add0 = (channel >> 0) & 0b00000001; // Channel address bits
02402:  MOVF   xF5,W
02404:  ANDLW  01
02406:  MOVWF  01
02408:  BCF    xF7.2
0240A:  BTFSC  01.0
0240C:  BSF    xF7.2
....................     cmd.fields.add1 = (channel >> 1) & 0b00000001; // Channel address bits
0240E:  BCF    FD8.0
02410:  RRCF   xF5,W
02412:  ANDLW  01
02414:  MOVWF  01
02416:  BCF    xF7.3
02418:  BTFSC  01.0
0241A:  BSF    xF7.3
....................     cmd.fields.add2 = (channel >> 2) & 0b00000001; // Channel address bits
0241C:  RRCF   xF5,W
0241E:  MOVWF  00
02420:  RRCF   00,F
02422:  MOVLW  3F
02424:  ANDWF  00,F
02426:  MOVF   00,W
02428:  ANDLW  01
0242A:  MOVWF  01
0242C:  BCF    xF7.4
0242E:  BTFSC  01.0
02430:  BSF    xF7.4
....................     cmd.fields.add3 = (channel >> 3) & 0b00000001; // Channel address bits
02432:  RRCF   xF5,W
02434:  MOVWF  00
02436:  RRCF   00,F
02438:  RRCF   00,F
0243A:  MOVLW  1F
0243C:  ANDWF  00,F
0243E:  MOVF   00,W
02440:  ANDLW  01
02442:  MOVWF  01
02444:  BCF    xF7.5
02446:  BTFSC  01.0
02448:  BSF    xF7.5
....................     cmd.fields.seq = 0; // Random mode
0244A:  BCF    xF7.6
....................     cmd.fields.write = 1; // Read operation
0244C:  BSF    xF7.7
....................     return cmd.value;
0244E:  MOVF   xF6,W
02450:  MOVWF  01
02452:  MOVF   xF7,W
02454:  MOVWF  02
02456:  MOVLB  0
02458:  GOTO   24CA (RETURN)
.................... }
.................... 
.................... #include "../lib/device/mcp4901.c"
.................... // #include "mcp4901.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value)
.................... {
....................    mcp4901_cmd_t cmd;
....................    cmd.fields.startbit = 0; // Start bit
*
026C6:  MOVLB  9
026C8:  BCF    xE3.7
....................    cmd.fields.buffer = 1; // Buffer used
026CA:  BSF    xE3.6
....................    cmd.fields.gain = 1; // Gain 1x
026CC:  BSF    xE3.5
....................    cmd.fields.shutdown = 1; // Normal operation
026CE:  BSF    xE3.4
....................    cmd.fields.data7 = (value >> 7) & 0x01;
026D0:  RRCF   xE1,W
026D2:  MOVWF  xE5
026D4:  RRCF   xE0,W
026D6:  MOVWF  xE4
026D8:  RRCF   xE5,F
026DA:  RRCF   xE4,F
026DC:  RRCF   xE5,F
026DE:  RRCF   xE4,F
026E0:  RRCF   xE5,F
026E2:  RRCF   xE4,F
026E4:  RRCF   xE5,F
026E6:  RRCF   xE4,F
026E8:  RRCF   xE5,F
026EA:  RRCF   xE4,F
026EC:  RRCF   xE5,F
026EE:  RRCF   xE4,F
026F0:  MOVLW  01
026F2:  ANDWF  xE5,F
026F4:  MOVF   xE4,W
026F6:  ANDLW  01
026F8:  MOVWF  00
026FA:  CLRF   03
026FC:  MOVF   00,W
026FE:  MOVWF  01
02700:  BCF    xE3.3
02702:  BTFSC  01.0
02704:  BSF    xE3.3
....................    cmd.fields.data6 = (value >> 6) & 0x01;
02706:  RRCF   xE1,W
02708:  MOVWF  xE5
0270A:  RRCF   xE0,W
0270C:  MOVWF  xE4
0270E:  RRCF   xE5,F
02710:  RRCF   xE4,F
02712:  RRCF   xE5,F
02714:  RRCF   xE4,F
02716:  RRCF   xE5,F
02718:  RRCF   xE4,F
0271A:  RRCF   xE5,F
0271C:  RRCF   xE4,F
0271E:  RRCF   xE5,F
02720:  RRCF   xE4,F
02722:  MOVLW  03
02724:  ANDWF  xE5,F
02726:  MOVF   xE4,W
02728:  ANDLW  01
0272A:  MOVWF  00
0272C:  CLRF   03
0272E:  MOVF   00,W
02730:  MOVWF  01
02732:  BCF    xE3.2
02734:  BTFSC  01.0
02736:  BSF    xE3.2
....................    cmd.fields.data5 = (value >> 5) & 0x01;
02738:  RRCF   xE1,W
0273A:  MOVWF  xE5
0273C:  RRCF   xE0,W
0273E:  MOVWF  xE4
02740:  RRCF   xE5,F
02742:  RRCF   xE4,F
02744:  RRCF   xE5,F
02746:  RRCF   xE4,F
02748:  RRCF   xE5,F
0274A:  RRCF   xE4,F
0274C:  RRCF   xE5,F
0274E:  RRCF   xE4,F
02750:  MOVLW  07
02752:  ANDWF  xE5,F
02754:  MOVF   xE4,W
02756:  ANDLW  01
02758:  MOVWF  00
0275A:  CLRF   03
0275C:  MOVF   00,W
0275E:  MOVWF  01
02760:  BCF    xE3.1
02762:  BTFSC  01.0
02764:  BSF    xE3.1
....................    cmd.fields.data4 = (value >> 4) & 0x01;
02766:  RRCF   xE1,W
02768:  MOVWF  xE5
0276A:  RRCF   xE0,W
0276C:  MOVWF  xE4
0276E:  RRCF   xE5,F
02770:  RRCF   xE4,F
02772:  RRCF   xE5,F
02774:  RRCF   xE4,F
02776:  RRCF   xE5,F
02778:  RRCF   xE4,F
0277A:  MOVLW  0F
0277C:  ANDWF  xE5,F
0277E:  MOVF   xE4,W
02780:  ANDLW  01
02782:  MOVWF  00
02784:  CLRF   03
02786:  MOVF   00,W
02788:  MOVWF  01
0278A:  BCF    xE3.0
0278C:  BTFSC  01.0
0278E:  BSF    xE3.0
....................    cmd.fields.data3 = (value >> 3) & 0x01;
02790:  RRCF   xE1,W
02792:  MOVWF  xE5
02794:  RRCF   xE0,W
02796:  MOVWF  xE4
02798:  RRCF   xE5,F
0279A:  RRCF   xE4,F
0279C:  RRCF   xE5,F
0279E:  RRCF   xE4,F
027A0:  MOVLW  1F
027A2:  ANDWF  xE5,F
027A4:  MOVF   xE4,W
027A6:  ANDLW  01
027A8:  MOVWF  00
027AA:  CLRF   03
027AC:  MOVF   00,W
027AE:  MOVWF  01
027B0:  BCF    xE2.7
027B2:  BTFSC  01.0
027B4:  BSF    xE2.7
....................    cmd.fields.data2 = (value >> 2) & 0x01;
027B6:  RRCF   xE1,W
027B8:  MOVWF  xE5
027BA:  RRCF   xE0,W
027BC:  MOVWF  xE4
027BE:  RRCF   xE5,F
027C0:  RRCF   xE4,F
027C2:  MOVLW  3F
027C4:  ANDWF  xE5,F
027C6:  MOVF   xE4,W
027C8:  ANDLW  01
027CA:  MOVWF  00
027CC:  CLRF   03
027CE:  MOVF   00,W
027D0:  MOVWF  01
027D2:  BCF    xE2.6
027D4:  BTFSC  01.0
027D6:  BSF    xE2.6
....................    cmd.fields.data1 = (value >> 1) & 0x01;
027D8:  BCF    FD8.0
027DA:  RRCF   xE1,W
027DC:  MOVWF  xE5
027DE:  RRCF   xE0,W
027E0:  MOVWF  xE4
027E2:  MOVF   xE4,W
027E4:  ANDLW  01
027E6:  MOVWF  00
027E8:  CLRF   03
027EA:  MOVF   00,W
027EC:  MOVWF  01
027EE:  BCF    xE2.5
027F0:  BTFSC  01.0
027F2:  BSF    xE2.5
....................    cmd.fields.data0 = value & 0x01; // LSB of the data
027F4:  MOVF   xE0,W
027F6:  ANDLW  01
027F8:  MOVWF  00
027FA:  CLRF   03
027FC:  MOVF   00,W
027FE:  MOVWF  01
02800:  BCF    xE2.4
02802:  BTFSC  01.0
02804:  BSF    xE2.4
....................    cmd.fields.reserved = 0; // Reserved bits
02806:  BCF    xE2.3
....................    cmd.fields.reserved2 = 0; // Reserved bits
02808:  BCF    xE2.2
....................    cmd.fields.reserved3 = 0; // Reserved bits
0280A:  BCF    xE2.1
....................    cmd.fields.reserved4 = 0; // Reserved bits
0280C:  BCF    xE2.0
.................... 
....................    return cmd.value;
0280E:  MOVF   xE2,W
02810:  MOVWF  01
02812:  MOVF   xE3,W
02814:  MOVWF  02
02816:  MOVLB  0
02818:  RETURN 0
.................... }
.................... 
.................... #include "../lib/device/mt25q.c"
.................... #include "mt25q.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, unsigned int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
03C28:  MOVLB  B
03C2A:  MOVF   x02,W
03C2C:  XORLW  00
03C2E:  MOVLB  0
03C30:  BTFSC  FD8.2
03C32:  GOTO   3C42
03C36:  XORLW  01
03C38:  BTFSC  FD8.2
03C3A:  GOTO   3CAA
03C3E:  GOTO   3D12
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03C42:  MOVLB  B
03C44:  CLRF   x0B
03C46:  CLRF   x0A
03C48:  MOVLB  0
03C4A:  MOVLB  B
03C4C:  MOVF   x0B,W
03C4E:  SUBWF  x09,W
03C50:  BTFSC  FD8.0
03C52:  BRA    3C5A
03C54:  MOVLB  0
03C56:  GOTO   3CA6
03C5A:  MOVLB  0
03C5C:  BTFSS  FD8.2
03C5E:  GOTO   3C74
03C62:  MOVLB  B
03C64:  MOVF   x08,W
03C66:  SUBWF  x0A,W
03C68:  BTFSS  FD8.0
03C6A:  BRA    3C72
03C6C:  MOVLB  0
03C6E:  GOTO   3CA6
03C72:  MOVLB  0
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
03C74:  MOVLB  B
03C76:  MOVF   x06,W
03C78:  ADDWF  x0A,W
03C7A:  MOVWF  FE9
03C7C:  MOVF   x07,W
03C7E:  ADDWFC x0B,W
03C80:  MOVWF  FEA
03C82:  MOVFF  FEF,B0E
03C86:  MOVFF  B0E,B24
03C8A:  MOVLW  08
03C8C:  MOVWF  x25
03C8E:  MOVLW  01
03C90:  MOVWF  x26
03C92:  MOVLB  0
03C94:  CALL   2B0E
03C98:  MOVLB  B
03C9A:  INCF   x0A,F
03C9C:  BTFSC  FD8.2
03C9E:  INCF   x0B,F
03CA0:  MOVLB  0
03CA2:  GOTO   3C4A
....................          break;
03CA6:  GOTO   3D16
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03CAA:  MOVLB  B
03CAC:  CLRF   x0D
03CAE:  CLRF   x0C
03CB0:  MOVLB  0
03CB2:  MOVLB  B
03CB4:  MOVF   x0D,W
03CB6:  SUBWF  x09,W
03CB8:  BTFSC  FD8.0
03CBA:  BRA    3CC2
03CBC:  MOVLB  0
03CBE:  GOTO   3D0E
03CC2:  MOVLB  0
03CC4:  BTFSS  FD8.2
03CC6:  GOTO   3CDC
03CCA:  MOVLB  B
03CCC:  MOVF   x08,W
03CCE:  SUBWF  x0C,W
03CD0:  BTFSS  FD8.0
03CD2:  BRA    3CDA
03CD4:  MOVLB  0
03CD6:  GOTO   3D0E
03CDA:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
03CDC:  MOVLB  B
03CDE:  MOVF   x06,W
03CE0:  ADDWF  x0C,W
03CE2:  MOVWF  FE9
03CE4:  MOVF   x07,W
03CE6:  ADDWFC x0D,W
03CE8:  MOVWF  FEA
03CEA:  MOVFF  FEF,B0E
03CEE:  MOVFF  B0E,B24
03CF2:  MOVLW  08
03CF4:  MOVWF  x25
03CF6:  MOVLW  01
03CF8:  MOVWF  x26
03CFA:  MOVLB  0
03CFC:  CALL   2B6E
03D00:  MOVLB  B
03D02:  INCF   x0C,F
03D04:  BTFSC  FD8.2
03D06:  INCF   x0D,F
03D08:  MOVLB  0
03D0A:  GOTO   3CB2
....................          break;
03D0E:  GOTO   3D16
....................          
....................       default:
....................          break;
03D12:  GOTO   3D16
....................    }
....................    return;
03D16:  RETURN 0
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, unsigned int8 *write_data, unsigned int16 write_amount, unsigned int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
02BCE:  MOVLB  B
02BD0:  MOVF   x08,W
02BD2:  XORLW  00
02BD4:  MOVLB  0
02BD6:  BTFSC  FD8.2
02BD8:  GOTO   2BE8
02BDC:  XORLW  01
02BDE:  BTFSC  FD8.2
02BE0:  GOTO   2CF2
02BE4:  GOTO   2DFC
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02BE8:  MOVLB  B
02BEA:  CLRF   x17
02BEC:  CLRF   x16
02BEE:  MOVLB  0
02BF0:  MOVLB  B
02BF2:  MOVF   x17,W
02BF4:  SUBWF  x0F,W
02BF6:  BTFSC  FD8.0
02BF8:  BRA    2C00
02BFA:  MOVLB  0
02BFC:  GOTO   2C4C
02C00:  MOVLB  0
02C02:  BTFSS  FD8.2
02C04:  GOTO   2C1A
02C08:  MOVLB  B
02C0A:  MOVF   x0E,W
02C0C:  SUBWF  x16,W
02C0E:  BTFSS  FD8.0
02C10:  BRA    2C18
02C12:  MOVLB  0
02C14:  GOTO   2C4C
02C18:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
02C1A:  MOVLB  B
02C1C:  MOVF   x0C,W
02C1E:  ADDWF  x16,W
02C20:  MOVWF  FE9
02C22:  MOVF   x0D,W
02C24:  ADDWFC x17,W
02C26:  MOVWF  FEA
02C28:  MOVFF  FEF,B22
02C2C:  MOVFF  B22,B24
02C30:  MOVLW  08
02C32:  MOVWF  x25
02C34:  MOVLW  01
02C36:  MOVWF  x26
02C38:  MOVLB  0
02C3A:  CALL   2B0E
02C3E:  MOVLB  B
02C40:  INCF   x16,F
02C42:  BTFSC  FD8.2
02C44:  INCF   x17,F
02C46:  MOVLB  0
02C48:  GOTO   2BF0
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
02C4C:  MOVLB  B
02C4E:  CLRF   x1B
02C50:  CLRF   x1A
02C52:  CLRF   x19
02C54:  CLRF   x18
02C56:  MOVLB  0
02C58:  MOVLB  B
02C5A:  MOVF   x1B,W
02C5C:  SUBWF  x15,W
02C5E:  BTFSC  FD8.0
02C60:  BRA    2C68
02C62:  MOVLB  0
02C64:  GOTO   2CEE
02C68:  MOVLB  0
02C6A:  BTFSS  FD8.2
02C6C:  GOTO   2CB2
02C70:  MOVLB  B
02C72:  MOVF   x1A,W
02C74:  SUBWF  x14,W
02C76:  BTFSC  FD8.0
02C78:  BRA    2C80
02C7A:  MOVLB  0
02C7C:  GOTO   2CEE
02C80:  MOVLB  0
02C82:  BTFSS  FD8.2
02C84:  GOTO   2CB2
02C88:  MOVLB  B
02C8A:  MOVF   x19,W
02C8C:  SUBWF  x13,W
02C8E:  BTFSC  FD8.0
02C90:  BRA    2C98
02C92:  MOVLB  0
02C94:  GOTO   2CEE
02C98:  MOVLB  0
02C9A:  BTFSS  FD8.2
02C9C:  GOTO   2CB2
02CA0:  MOVLB  B
02CA2:  MOVF   x12,W
02CA4:  SUBWF  x18,W
02CA6:  BTFSS  FD8.0
02CA8:  BRA    2CB0
02CAA:  MOVLB  0
02CAC:  GOTO   2CEE
02CB0:  MOVLB  0
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
02CB2:  MOVLB  B
02CB4:  MOVF   x10,W
02CB6:  ADDWF  x18,W
02CB8:  MOVWF  FE9
02CBA:  MOVF   x11,W
02CBC:  ADDWFC x19,W
02CBE:  MOVWF  FEA
02CC0:  MOVLW  02
02CC2:  MOVWF  x24
02CC4:  MOVLW  08
02CC6:  MOVWF  x25
02CC8:  MOVLW  01
02CCA:  MOVWF  x26
02CCC:  MOVLB  0
02CCE:  CALL   2B0E
02CD2:  MOVFF  01,FEF
02CD6:  MOVLW  01
02CD8:  MOVLB  B
02CDA:  ADDWF  x18,F
02CDC:  BTFSC  FD8.0
02CDE:  INCF   x19,F
02CE0:  BTFSC  FD8.2
02CE2:  INCF   x1A,F
02CE4:  BTFSC  FD8.2
02CE6:  INCF   x1B,F
02CE8:  MOVLB  0
02CEA:  GOTO   2C58
....................          break;
02CEE:  GOTO   2E00
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02CF2:  MOVLB  B
02CF4:  CLRF   x1D
02CF6:  CLRF   x1C
02CF8:  MOVLB  0
02CFA:  MOVLB  B
02CFC:  MOVF   x1D,W
02CFE:  SUBWF  x0F,W
02D00:  BTFSC  FD8.0
02D02:  BRA    2D0A
02D04:  MOVLB  0
02D06:  GOTO   2D56
02D0A:  MOVLB  0
02D0C:  BTFSS  FD8.2
02D0E:  GOTO   2D24
02D12:  MOVLB  B
02D14:  MOVF   x0E,W
02D16:  SUBWF  x1C,W
02D18:  BTFSS  FD8.0
02D1A:  BRA    2D22
02D1C:  MOVLB  0
02D1E:  GOTO   2D56
02D22:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
02D24:  MOVLB  B
02D26:  MOVF   x0C,W
02D28:  ADDWF  x1C,W
02D2A:  MOVWF  FE9
02D2C:  MOVF   x0D,W
02D2E:  ADDWFC x1D,W
02D30:  MOVWF  FEA
02D32:  MOVFF  FEF,B22
02D36:  MOVFF  B22,B24
02D3A:  MOVLW  08
02D3C:  MOVWF  x25
02D3E:  MOVLW  01
02D40:  MOVWF  x26
02D42:  MOVLB  0
02D44:  CALL   2B6E
02D48:  MOVLB  B
02D4A:  INCF   x1C,F
02D4C:  BTFSC  FD8.2
02D4E:  INCF   x1D,F
02D50:  MOVLB  0
02D52:  GOTO   2CFA
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
02D56:  MOVLB  B
02D58:  CLRF   x21
02D5A:  CLRF   x20
02D5C:  CLRF   x1F
02D5E:  CLRF   x1E
02D60:  MOVLB  0
02D62:  MOVLB  B
02D64:  MOVF   x21,W
02D66:  SUBWF  x15,W
02D68:  BTFSC  FD8.0
02D6A:  BRA    2D72
02D6C:  MOVLB  0
02D6E:  GOTO   2DF8
02D72:  MOVLB  0
02D74:  BTFSS  FD8.2
02D76:  GOTO   2DBC
02D7A:  MOVLB  B
02D7C:  MOVF   x20,W
02D7E:  SUBWF  x14,W
02D80:  BTFSC  FD8.0
02D82:  BRA    2D8A
02D84:  MOVLB  0
02D86:  GOTO   2DF8
02D8A:  MOVLB  0
02D8C:  BTFSS  FD8.2
02D8E:  GOTO   2DBC
02D92:  MOVLB  B
02D94:  MOVF   x1F,W
02D96:  SUBWF  x13,W
02D98:  BTFSC  FD8.0
02D9A:  BRA    2DA2
02D9C:  MOVLB  0
02D9E:  GOTO   2DF8
02DA2:  MOVLB  0
02DA4:  BTFSS  FD8.2
02DA6:  GOTO   2DBC
02DAA:  MOVLB  B
02DAC:  MOVF   x12,W
02DAE:  SUBWF  x1E,W
02DB0:  BTFSS  FD8.0
02DB2:  BRA    2DBA
02DB4:  MOVLB  0
02DB6:  GOTO   2DF8
02DBA:  MOVLB  0
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
02DBC:  MOVLB  B
02DBE:  MOVF   x10,W
02DC0:  ADDWF  x1E,W
02DC2:  MOVWF  FE9
02DC4:  MOVF   x11,W
02DC6:  ADDWFC x1F,W
02DC8:  MOVWF  FEA
02DCA:  MOVLW  01
02DCC:  MOVWF  x24
02DCE:  MOVLW  08
02DD0:  MOVWF  x25
02DD2:  MOVLW  01
02DD4:  MOVWF  x26
02DD6:  MOVLB  0
02DD8:  CALL   2B6E
02DDC:  MOVFF  01,FEF
02DE0:  MOVLW  01
02DE2:  MOVLB  B
02DE4:  ADDWF  x1E,F
02DE6:  BTFSC  FD8.0
02DE8:  INCF   x1F,F
02DEA:  BTFSC  FD8.2
02DEC:  INCF   x20,F
02DEE:  BTFSC  FD8.2
02DF0:  INCF   x21,F
02DF2:  MOVLB  0
02DF4:  GOTO   2D62
....................          break;
02DF8:  GOTO   2E00
....................    
....................          
....................       default:
....................          break;
02DFC:  GOTO   2E00
....................    }
....................    return;
02E00:  RETURN 0
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, unsigned int8 *cmd_data, unsigned int8 cmd_amount, unsigned int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
03D18:  MOVLB  B
03D1A:  MOVF   x02,W
03D1C:  XORLW  00
03D1E:  MOVLB  0
03D20:  BTFSC  FD8.2
03D22:  GOTO   3D32
03D26:  XORLW  01
03D28:  BTFSC  FD8.2
03D2A:  GOTO   3DE0
03D2E:  GOTO   3E8E
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
03D32:  MOVLB  B
03D34:  CLRF   x0D
03D36:  MOVLB  0
03D38:  MOVLB  B
03D3A:  MOVF   x08,W
03D3C:  SUBWF  x0D,W
03D3E:  BTFSS  FD8.0
03D40:  BRA    3D48
03D42:  MOVLB  0
03D44:  GOTO   3D78
03D48:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
03D4A:  MOVLB  B
03D4C:  MOVF   x0D,W
03D4E:  ADDWF  x06,W
03D50:  MOVWF  FE9
03D52:  MOVLW  00
03D54:  ADDWFC x07,W
03D56:  MOVWF  FEA
03D58:  MOVFF  FEF,B13
03D5C:  MOVFF  B13,B24
03D60:  MOVLW  08
03D62:  MOVWF  x25
03D64:  MOVLW  01
03D66:  MOVWF  x26
03D68:  MOVLB  0
03D6A:  CALL   2B0E
03D6E:  MOVLB  B
03D70:  INCF   x0D,F
03D72:  MOVLB  0
03D74:  GOTO   3D38
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03D78:  MOVLB  B
03D7A:  CLRF   x0F
03D7C:  CLRF   x0E
03D7E:  MOVLB  0
03D80:  MOVLB  B
03D82:  MOVF   x0F,W
03D84:  SUBWF  x0C,W
03D86:  BTFSC  FD8.0
03D88:  BRA    3D90
03D8A:  MOVLB  0
03D8C:  GOTO   3DDC
03D90:  MOVLB  0
03D92:  BTFSS  FD8.2
03D94:  GOTO   3DAA
03D98:  MOVLB  B
03D9A:  MOVF   x0B,W
03D9C:  SUBWF  x0E,W
03D9E:  BTFSS  FD8.0
03DA0:  BRA    3DA8
03DA2:  MOVLB  0
03DA4:  GOTO   3DDC
03DA8:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
03DAA:  MOVLB  B
03DAC:  MOVF   x09,W
03DAE:  ADDWF  x0E,W
03DB0:  MOVWF  FE9
03DB2:  MOVF   x0A,W
03DB4:  ADDWFC x0F,W
03DB6:  MOVWF  FEA
03DB8:  MOVFF  FEF,B13
03DBC:  MOVFF  B13,B24
03DC0:  MOVLW  08
03DC2:  MOVWF  x25
03DC4:  MOVLW  01
03DC6:  MOVWF  x26
03DC8:  MOVLB  0
03DCA:  CALL   2B0E
03DCE:  MOVLB  B
03DD0:  INCF   x0E,F
03DD2:  BTFSC  FD8.2
03DD4:  INCF   x0F,F
03DD6:  MOVLB  0
03DD8:  GOTO   3D80
....................          break;
03DDC:  GOTO   3E92
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
03DE0:  MOVLB  B
03DE2:  CLRF   x10
03DE4:  MOVLB  0
03DE6:  MOVLB  B
03DE8:  MOVF   x08,W
03DEA:  SUBWF  x10,W
03DEC:  BTFSS  FD8.0
03DEE:  BRA    3DF6
03DF0:  MOVLB  0
03DF2:  GOTO   3E26
03DF6:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
03DF8:  MOVLB  B
03DFA:  MOVF   x10,W
03DFC:  ADDWF  x06,W
03DFE:  MOVWF  FE9
03E00:  MOVLW  00
03E02:  ADDWFC x07,W
03E04:  MOVWF  FEA
03E06:  MOVFF  FEF,B13
03E0A:  MOVFF  B13,B24
03E0E:  MOVLW  08
03E10:  MOVWF  x25
03E12:  MOVLW  01
03E14:  MOVWF  x26
03E16:  MOVLB  0
03E18:  CALL   2B6E
03E1C:  MOVLB  B
03E1E:  INCF   x10,F
03E20:  MOVLB  0
03E22:  GOTO   3DE6
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03E26:  MOVLB  B
03E28:  CLRF   x12
03E2A:  CLRF   x11
03E2C:  MOVLB  0
03E2E:  MOVLB  B
03E30:  MOVF   x12,W
03E32:  SUBWF  x0C,W
03E34:  BTFSC  FD8.0
03E36:  BRA    3E3E
03E38:  MOVLB  0
03E3A:  GOTO   3E8A
03E3E:  MOVLB  0
03E40:  BTFSS  FD8.2
03E42:  GOTO   3E58
03E46:  MOVLB  B
03E48:  MOVF   x0B,W
03E4A:  SUBWF  x11,W
03E4C:  BTFSS  FD8.0
03E4E:  BRA    3E56
03E50:  MOVLB  0
03E52:  GOTO   3E8A
03E56:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
03E58:  MOVLB  B
03E5A:  MOVF   x09,W
03E5C:  ADDWF  x11,W
03E5E:  MOVWF  FE9
03E60:  MOVF   x0A,W
03E62:  ADDWFC x12,W
03E64:  MOVWF  FEA
03E66:  MOVFF  FEF,B13
03E6A:  MOVFF  B13,B24
03E6E:  MOVLW  08
03E70:  MOVWF  x25
03E72:  MOVLW  01
03E74:  MOVWF  x26
03E76:  MOVLB  0
03E78:  CALL   2B6E
03E7C:  MOVLB  B
03E7E:  INCF   x11,F
03E80:  BTFSC  FD8.2
03E82:  INCF   x12,F
03E84:  MOVLB  0
03E86:  GOTO   3E2E
....................          break;
03E8A:  GOTO   3E92
....................          
....................       default:
....................          break;
03E8E:  GOTO   3E92
....................    }
....................    return;
03E92:  RETURN 0
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
06A20:  MOVFF  2BC,B08
06A24:  MOVLW  01
06A26:  MOVLB  B
06A28:  MOVWF  x09
06A2A:  MOVLW  0F
06A2C:  MOVWF  x0B
06A2E:  MOVLW  89
06A30:  MOVWF  x0A
06A32:  MOVLB  0
06A34:  CALL   2ABA
06A38:  MOVFF  2BC,B08
06A3C:  MOVLB  B
06A3E:  CLRF   x09
06A40:  MOVLW  0F
06A42:  MOVWF  x0B
06A44:  MOVLW  92
06A46:  MOVWF  x0A
06A48:  MOVLB  0
06A4A:  CALL   2ABA
06A4E:  RETURN 0
.................... }
....................  
.................... int8 status_register(Flash flash_stream){
*
03E94:  MOVLW  05
03E96:  MOVLB  B
03E98:  MOVWF  x06
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
03E9A:  MOVFF  B04,B08
03E9E:  CLRF   x09
03EA0:  MOVLW  0F
03EA2:  MOVWF  x0B
03EA4:  MOVLW  89
03EA6:  MOVWF  x0A
03EA8:  MOVLB  0
03EAA:  CALL   2ABA
03EAE:  MOVFF  B04,B08
03EB2:  MOVLB  B
03EB4:  CLRF   x09
03EB6:  MOVLW  0F
03EB8:  MOVWF  x0B
03EBA:  MOVLW  92
03EBC:  MOVWF  x0A
03EBE:  MOVLB  0
03EC0:  CALL   2ABA
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
03EC4:  MOVFF  B05,B0B
03EC8:  MOVFF  B04,B0A
03ECC:  MOVFF  B03,B09
03ED0:  MOVFF  B02,B08
03ED4:  MOVLW  0B
03ED6:  MOVLB  B
03ED8:  MOVWF  x0D
03EDA:  MOVLW  06
03EDC:  MOVWF  x0C
03EDE:  CLRF   x0F
03EE0:  MOVLW  01
03EE2:  MOVWF  x0E
03EE4:  MOVLW  0B
03EE6:  MOVWF  x11
03EE8:  MOVLW  07
03EEA:  MOVWF  x10
03EEC:  CLRF   x15
03EEE:  CLRF   x14
03EF0:  CLRF   x13
03EF2:  MOVLW  01
03EF4:  MOVWF  x12
03EF6:  MOVLB  0
03EF8:  CALL   2BCE
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
03EFC:  MOVFF  B04,B08
03F00:  MOVLW  01
03F02:  MOVLB  B
03F04:  MOVWF  x09
03F06:  MOVLW  0F
03F08:  MOVWF  x0B
03F0A:  MOVLW  89
03F0C:  MOVWF  x0A
03F0E:  MOVLB  0
03F10:  CALL   2ABA
03F14:  MOVFF  B04,B08
03F18:  MOVLB  B
03F1A:  CLRF   x09
03F1C:  MOVLW  0F
03F1E:  MOVWF  x0B
03F20:  MOVLW  92
03F22:  MOVWF  x0A
03F24:  MOVLB  0
03F26:  CALL   2ABA
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
03F2A:  MOVLB  B
03F2C:  MOVF   x07,W
03F2E:  MOVWF  01
03F30:  MOVLB  0
03F32:  RETURN 0
.................... }
.................... 
.................... //
.................... //->success:True,fail:false 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 16);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == MANUFACTURER_ID_MICRON){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
....................  
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
05912:  MOVLB  1
05914:  MOVF   xF6,F
05916:  BTFSC  FD8.2
05918:  BRA    5920
0591A:  MOVLB  0
0591C:  GOTO   5A7C
05920:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
05922:  MOVLW  06
05924:  MOVLB  1
05926:  MOVWF  xFD
05928:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
0592A:  MOVLW  D8
0592C:  MOVLB  1
0592E:  MOVWF  xFE
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
05930:  MOVFF  1FB,20A
05934:  MOVFF  1FC,20B
05938:  MOVLB  2
0593A:  CLRF   x0C
0593C:  CLRF   x0D
0593E:  MOVF   x0A,W
05940:  MOVWF  00
05942:  CLRF   01
05944:  CLRF   02
05946:  CLRF   03
05948:  MOVFF  00,1FF
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0594C:  MOVFF  1FA,20A
05950:  MOVFF  1FB,20B
05954:  MOVFF  1FC,20C
05958:  CLRF   x0D
0595A:  MOVF   x0A,W
0595C:  MOVWF  00
0595E:  CLRF   01
05960:  CLRF   02
05962:  CLRF   03
05964:  MOVFF  00,200
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
05968:  MOVLB  1
0596A:  MOVF   xF9,W
0596C:  MOVWF  00
0596E:  CLRF   01
05970:  CLRF   02
05972:  CLRF   03
05974:  MOVFF  00,201
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
05978:  MOVFF  1F7,B08
0597C:  MOVLB  B
0597E:  CLRF   x09
05980:  MOVLW  0F
05982:  MOVWF  x0B
05984:  MOVLW  89
05986:  MOVWF  x0A
05988:  MOVLB  0
0598A:  CALL   2ABA
0598E:  MOVFF  1F7,B08
05992:  MOVLB  B
05994:  CLRF   x09
05996:  MOVLW  0F
05998:  MOVWF  x0B
0599A:  MOVLW  92
0599C:  MOVWF  x0A
0599E:  MOVLB  0
059A0:  CALL   2ABA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
059A4:  MOVFF  1F8,B05
059A8:  MOVFF  1F7,B04
059AC:  MOVFF  1F6,B03
059B0:  MOVFF  1F5,B02
059B4:  MOVLW  01
059B6:  MOVLB  B
059B8:  MOVWF  x07
059BA:  MOVLW  FD
059BC:  MOVWF  x06
059BE:  CLRF   x09
059C0:  MOVLW  01
059C2:  MOVWF  x08
059C4:  MOVLB  0
059C6:  CALL   3C28
....................       output_high(flash_stream.cs_pin);
059CA:  MOVFF  1F7,B08
059CE:  MOVLW  01
059D0:  MOVLB  B
059D2:  MOVWF  x09
059D4:  MOVLW  0F
059D6:  MOVWF  x0B
059D8:  MOVLW  89
059DA:  MOVWF  x0A
059DC:  MOVLB  0
059DE:  CALL   2ABA
059E2:  MOVFF  1F7,B08
059E6:  MOVLB  B
059E8:  CLRF   x09
059EA:  MOVLW  0F
059EC:  MOVWF  x0B
059EE:  MOVLW  92
059F0:  MOVWF  x0A
059F2:  MOVLB  0
059F4:  CALL   2ABA
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
059F8:  MOVFF  1F7,B08
059FC:  MOVLB  B
059FE:  CLRF   x09
05A00:  MOVLW  0F
05A02:  MOVWF  x0B
05A04:  MOVLW  89
05A06:  MOVWF  x0A
05A08:  MOVLB  0
05A0A:  CALL   2ABA
05A0E:  MOVFF  1F7,B08
05A12:  MOVLB  B
05A14:  CLRF   x09
05A16:  MOVLW  0F
05A18:  MOVWF  x0B
05A1A:  MOVLW  92
05A1C:  MOVWF  x0A
05A1E:  MOVLB  0
05A20:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
05A24:  MOVFF  1F8,B05
05A28:  MOVFF  1F7,B04
05A2C:  MOVFF  1F6,B03
05A30:  MOVFF  1F5,B02
05A34:  MOVLW  01
05A36:  MOVLB  B
05A38:  MOVWF  x07
05A3A:  MOVLW  FE
05A3C:  MOVWF  x06
05A3E:  CLRF   x09
05A40:  MOVLW  04
05A42:  MOVWF  x08
05A44:  MOVLB  0
05A46:  CALL   3C28
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
05A4A:  MOVFF  1F7,B08
05A4E:  MOVLW  01
05A50:  MOVLB  B
05A52:  MOVWF  x09
05A54:  MOVLW  0F
05A56:  MOVWF  x0B
05A58:  MOVLW  89
05A5A:  MOVWF  x0A
05A5C:  MOVLB  0
05A5E:  CALL   2ABA
05A62:  MOVFF  1F7,B08
05A66:  MOVLB  B
05A68:  CLRF   x09
05A6A:  MOVLW  0F
05A6C:  MOVWF  x0B
05A6E:  MOVLW  92
05A70:  MOVWF  x0A
05A72:  MOVLB  0
05A74:  CALL   2ABA
....................    }
05A78:  GOTO   5BFE
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
05A7C:  MOVLB  1
05A7E:  DECFSZ xF6,W
05A80:  BRA    5A86
05A82:  BRA    5A8C
05A84:  MOVLB  0
05A86:  MOVLB  0
05A88:  GOTO   5BFE
05A8C:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
05A8E:  MOVLW  06
05A90:  MOVLB  2
05A92:  MOVWF  x02
05A94:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
05A96:  MOVLW  DC
05A98:  MOVLB  2
05A9A:  MOVWF  x03
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
05A9C:  MOVFF  1FC,20A
05AA0:  CLRF   x0B
05AA2:  CLRF   x0C
05AA4:  CLRF   x0D
05AA6:  MOVF   x0A,W
05AA8:  MOVWF  00
05AAA:  CLRF   01
05AAC:  CLRF   02
05AAE:  CLRF   03
05AB0:  MOVFF  00,204
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
05AB4:  MOVFF  1FB,20A
05AB8:  MOVFF  1FC,20B
05ABC:  CLRF   x0C
05ABE:  CLRF   x0D
05AC0:  MOVF   x0A,W
05AC2:  MOVWF  00
05AC4:  CLRF   01
05AC6:  CLRF   02
05AC8:  CLRF   03
05ACA:  MOVFF  00,205
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
05ACE:  MOVFF  1FA,20A
05AD2:  MOVFF  1FB,20B
05AD6:  MOVFF  1FC,20C
05ADA:  CLRF   x0D
05ADC:  MOVF   x0A,W
05ADE:  MOVWF  00
05AE0:  CLRF   01
05AE2:  CLRF   02
05AE4:  CLRF   03
05AE6:  MOVFF  00,206
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
05AEA:  MOVLB  1
05AEC:  MOVF   xF9,W
05AEE:  MOVWF  00
05AF0:  CLRF   01
05AF2:  CLRF   02
05AF4:  CLRF   03
05AF6:  MOVFF  00,207
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
05AFA:  MOVFF  1F7,B08
05AFE:  MOVLB  B
05B00:  CLRF   x09
05B02:  MOVLW  0F
05B04:  MOVWF  x0B
05B06:  MOVLW  89
05B08:  MOVWF  x0A
05B0A:  MOVLB  0
05B0C:  CALL   2ABA
05B10:  MOVFF  1F7,B08
05B14:  MOVLB  B
05B16:  CLRF   x09
05B18:  MOVLW  0F
05B1A:  MOVWF  x0B
05B1C:  MOVLW  92
05B1E:  MOVWF  x0A
05B20:  MOVLB  0
05B22:  CALL   2ABA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
05B26:  MOVFF  1F8,B05
05B2A:  MOVFF  1F7,B04
05B2E:  MOVFF  1F6,B03
05B32:  MOVFF  1F5,B02
05B36:  MOVLW  02
05B38:  MOVLB  B
05B3A:  MOVWF  x07
05B3C:  MOVLW  02
05B3E:  MOVWF  x06
05B40:  CLRF   x09
05B42:  MOVLW  01
05B44:  MOVWF  x08
05B46:  MOVLB  0
05B48:  CALL   3C28
....................       output_high(flash_stream.cs_pin);
05B4C:  MOVFF  1F7,B08
05B50:  MOVLW  01
05B52:  MOVLB  B
05B54:  MOVWF  x09
05B56:  MOVLW  0F
05B58:  MOVWF  x0B
05B5A:  MOVLW  89
05B5C:  MOVWF  x0A
05B5E:  MOVLB  0
05B60:  CALL   2ABA
05B64:  MOVFF  1F7,B08
05B68:  MOVLB  B
05B6A:  CLRF   x09
05B6C:  MOVLW  0F
05B6E:  MOVWF  x0B
05B70:  MOVLW  92
05B72:  MOVWF  x0A
05B74:  MOVLB  0
05B76:  CALL   2ABA
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
05B7A:  MOVFF  1F7,B08
05B7E:  MOVLB  B
05B80:  CLRF   x09
05B82:  MOVLW  0F
05B84:  MOVWF  x0B
05B86:  MOVLW  89
05B88:  MOVWF  x0A
05B8A:  MOVLB  0
05B8C:  CALL   2ABA
05B90:  MOVFF  1F7,B08
05B94:  MOVLB  B
05B96:  CLRF   x09
05B98:  MOVLW  0F
05B9A:  MOVWF  x0B
05B9C:  MOVLW  92
05B9E:  MOVWF  x0A
05BA0:  MOVLB  0
05BA2:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
05BA6:  MOVFF  1F8,B05
05BAA:  MOVFF  1F7,B04
05BAE:  MOVFF  1F6,B03
05BB2:  MOVFF  1F5,B02
05BB6:  MOVLW  02
05BB8:  MOVLB  B
05BBA:  MOVWF  x07
05BBC:  MOVLW  03
05BBE:  MOVWF  x06
05BC0:  CLRF   x09
05BC2:  MOVLW  05
05BC4:  MOVWF  x08
05BC6:  MOVLB  0
05BC8:  CALL   3C28
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
05BCC:  MOVFF  1F7,B08
05BD0:  MOVLW  01
05BD2:  MOVLB  B
05BD4:  MOVWF  x09
05BD6:  MOVLW  0F
05BD8:  MOVWF  x0B
05BDA:  MOVLW  89
05BDC:  MOVWF  x0A
05BDE:  MOVLB  0
05BE0:  CALL   2ABA
05BE4:  MOVFF  1F7,B08
05BE8:  MOVLB  B
05BEA:  CLRF   x09
05BEC:  MOVLW  0F
05BEE:  MOVWF  x0B
05BF0:  MOVLW  92
05BF2:  MOVWF  x0A
05BF4:  MOVLB  0
05BF6:  CALL   2ABA
....................    }
05BFA:  GOTO   5BFE
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
05BFE:  MOVLB  2
05C00:  CLRF   x08
05C02:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
05C04:  MOVFF  1F8,B05
05C08:  MOVFF  1F7,B04
05C0C:  MOVFF  1F6,B03
05C10:  MOVFF  1F5,B02
05C14:  CALL   3E94
05C18:  MOVF   01,W
05C1A:  ANDLW  01
05C1C:  SUBLW  01
05C1E:  BTFSS  FD8.2
05C20:  GOTO   5C72
....................       if(timeout_counter > 10)
05C24:  MOVLB  2
05C26:  MOVF   x08,W
05C28:  SUBLW  0A
05C2A:  BTFSS  FD8.0
05C2C:  BRA    5C34
05C2E:  MOVLB  0
05C30:  GOTO   5C46
05C34:  MOVLB  0
....................          delay_ms(200);
05C36:  MOVLW  C8
05C38:  MOVLB  B
05C3A:  MOVWF  x02
05C3C:  MOVLB  0
05C3E:  CALL   22AE
05C42:  GOTO   5C52
....................       else
....................          delay_ms(10);   
05C46:  MOVLW  0A
05C48:  MOVLB  B
05C4A:  MOVWF  x02
05C4C:  MOVLB  0
05C4E:  CALL   22AE
....................       
....................       if(timeout_counter > 100){
05C52:  MOVLB  2
05C54:  MOVF   x08,W
05C56:  SUBLW  64
05C58:  BTFSS  FD8.0
05C5A:  BRA    5C62
05C5C:  MOVLB  0
05C5E:  GOTO   5C68
05C62:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
05C64:  GOTO   5C72
....................       }  
....................       timeout_counter++;
05C68:  MOVLB  2
05C6A:  INCF   x08,F
05C6C:  MOVLB  0
05C6E:  GOTO   5C04
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
05C72:  RETURN 0
.................... }
....................  
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x __ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 __ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 __ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 __
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
04D38:  MOVLB  A
04D3A:  MOVF   x90,F
04D3C:  BTFSC  FD8.2
04D3E:  BRA    4D46
04D40:  MOVLB  0
04D42:  GOTO   4E9E
04D46:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
04D48:  MOVLW  06
04D4A:  MOVLB  A
04D4C:  MOVWF  x97
04D4E:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
04D50:  MOVLW  20
04D52:  MOVLB  A
04D54:  MOVWF  x98
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
04D56:  MOVFF  A95,AA4
04D5A:  MOVFF  A96,AA5
04D5E:  CLRF   xA6
04D60:  CLRF   xA7
04D62:  MOVF   xA4,W
04D64:  MOVWF  00
04D66:  CLRF   01
04D68:  CLRF   02
04D6A:  CLRF   03
04D6C:  MOVFF  00,A99
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
04D70:  MOVFF  A94,AA4
04D74:  MOVFF  A95,AA5
04D78:  MOVFF  A96,AA6
04D7C:  CLRF   xA7
04D7E:  MOVF   xA4,W
04D80:  MOVWF  00
04D82:  CLRF   01
04D84:  CLRF   02
04D86:  CLRF   03
04D88:  MOVFF  00,A9A
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
04D8C:  MOVF   x93,W
04D8E:  MOVWF  00
04D90:  CLRF   01
04D92:  CLRF   02
04D94:  CLRF   03
04D96:  MOVFF  00,A9B
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04D9A:  MOVFF  A91,B08
04D9E:  MOVLB  B
04DA0:  CLRF   x09
04DA2:  MOVLW  0F
04DA4:  MOVWF  x0B
04DA6:  MOVLW  89
04DA8:  MOVWF  x0A
04DAA:  MOVLB  0
04DAC:  CALL   2ABA
04DB0:  MOVFF  A91,B08
04DB4:  MOVLB  B
04DB6:  CLRF   x09
04DB8:  MOVLW  0F
04DBA:  MOVWF  x0B
04DBC:  MOVLW  92
04DBE:  MOVWF  x0A
04DC0:  MOVLB  0
04DC2:  CALL   2ABA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
04DC6:  MOVFF  A92,B05
04DCA:  MOVFF  A91,B04
04DCE:  MOVFF  A90,B03
04DD2:  MOVFF  A8F,B02
04DD6:  MOVLW  0A
04DD8:  MOVLB  B
04DDA:  MOVWF  x07
04DDC:  MOVLW  97
04DDE:  MOVWF  x06
04DE0:  CLRF   x09
04DE2:  MOVLW  01
04DE4:  MOVWF  x08
04DE6:  MOVLB  0
04DE8:  CALL   3C28
....................       output_high(flash_stream.cs_pin);
04DEC:  MOVFF  A91,B08
04DF0:  MOVLW  01
04DF2:  MOVLB  B
04DF4:  MOVWF  x09
04DF6:  MOVLW  0F
04DF8:  MOVWF  x0B
04DFA:  MOVLW  89
04DFC:  MOVWF  x0A
04DFE:  MOVLB  0
04E00:  CALL   2ABA
04E04:  MOVFF  A91,B08
04E08:  MOVLB  B
04E0A:  CLRF   x09
04E0C:  MOVLW  0F
04E0E:  MOVWF  x0B
04E10:  MOVLW  92
04E12:  MOVWF  x0A
04E14:  MOVLB  0
04E16:  CALL   2ABA
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
04E1A:  MOVFF  A91,B08
04E1E:  MOVLB  B
04E20:  CLRF   x09
04E22:  MOVLW  0F
04E24:  MOVWF  x0B
04E26:  MOVLW  89
04E28:  MOVWF  x0A
04E2A:  MOVLB  0
04E2C:  CALL   2ABA
04E30:  MOVFF  A91,B08
04E34:  MOVLB  B
04E36:  CLRF   x09
04E38:  MOVLW  0F
04E3A:  MOVWF  x0B
04E3C:  MOVLW  92
04E3E:  MOVWF  x0A
04E40:  MOVLB  0
04E42:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
04E46:  MOVFF  A92,B05
04E4A:  MOVFF  A91,B04
04E4E:  MOVFF  A90,B03
04E52:  MOVFF  A8F,B02
04E56:  MOVLW  0A
04E58:  MOVLB  B
04E5A:  MOVWF  x07
04E5C:  MOVLW  98
04E5E:  MOVWF  x06
04E60:  CLRF   x09
04E62:  MOVLW  04
04E64:  MOVWF  x08
04E66:  MOVLB  0
04E68:  CALL   3C28
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04E6C:  MOVFF  A91,B08
04E70:  MOVLW  01
04E72:  MOVLB  B
04E74:  MOVWF  x09
04E76:  MOVLW  0F
04E78:  MOVWF  x0B
04E7A:  MOVLW  89
04E7C:  MOVWF  x0A
04E7E:  MOVLB  0
04E80:  CALL   2ABA
04E84:  MOVFF  A91,B08
04E88:  MOVLB  B
04E8A:  CLRF   x09
04E8C:  MOVLW  0F
04E8E:  MOVWF  x0B
04E90:  MOVLW  92
04E92:  MOVWF  x0A
04E94:  MOVLB  0
04E96:  CALL   2ABA
....................    }
04E9A:  GOTO   501E
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
04E9E:  MOVLB  A
04EA0:  DECFSZ x90,W
04EA2:  BRA    4EA8
04EA4:  BRA    4EAE
04EA6:  MOVLB  0
04EA8:  MOVLB  0
04EAA:  GOTO   501E
04EAE:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
04EB0:  MOVLW  06
04EB2:  MOVLB  A
04EB4:  MOVWF  x9C
04EB6:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
04EB8:  MOVLW  21
04EBA:  MOVLB  A
04EBC:  MOVWF  x9D
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
04EBE:  MOVFF  A96,AA4
04EC2:  CLRF   xA5
04EC4:  CLRF   xA6
04EC6:  CLRF   xA7
04EC8:  MOVF   xA4,W
04ECA:  MOVWF  00
04ECC:  CLRF   01
04ECE:  CLRF   02
04ED0:  CLRF   03
04ED2:  MOVFF  00,A9E
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
04ED6:  MOVFF  A95,AA4
04EDA:  MOVFF  A96,AA5
04EDE:  CLRF   xA6
04EE0:  CLRF   xA7
04EE2:  MOVF   xA4,W
04EE4:  MOVWF  00
04EE6:  CLRF   01
04EE8:  CLRF   02
04EEA:  CLRF   03
04EEC:  MOVFF  00,A9F
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
04EF0:  MOVFF  A94,AA4
04EF4:  MOVFF  A95,AA5
04EF8:  MOVFF  A96,AA6
04EFC:  CLRF   xA7
04EFE:  MOVF   xA4,W
04F00:  MOVWF  00
04F02:  CLRF   01
04F04:  CLRF   02
04F06:  CLRF   03
04F08:  MOVFF  00,AA0
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
04F0C:  MOVF   x93,W
04F0E:  MOVWF  00
04F10:  CLRF   01
04F12:  CLRF   02
04F14:  CLRF   03
04F16:  MOVFF  00,AA1
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04F1A:  MOVFF  A91,B08
04F1E:  MOVLB  B
04F20:  CLRF   x09
04F22:  MOVLW  0F
04F24:  MOVWF  x0B
04F26:  MOVLW  89
04F28:  MOVWF  x0A
04F2A:  MOVLB  0
04F2C:  CALL   2ABA
04F30:  MOVFF  A91,B08
04F34:  MOVLB  B
04F36:  CLRF   x09
04F38:  MOVLW  0F
04F3A:  MOVWF  x0B
04F3C:  MOVLW  92
04F3E:  MOVWF  x0A
04F40:  MOVLB  0
04F42:  CALL   2ABA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
04F46:  MOVFF  A92,B05
04F4A:  MOVFF  A91,B04
04F4E:  MOVFF  A90,B03
04F52:  MOVFF  A8F,B02
04F56:  MOVLW  0A
04F58:  MOVLB  B
04F5A:  MOVWF  x07
04F5C:  MOVLW  9C
04F5E:  MOVWF  x06
04F60:  CLRF   x09
04F62:  MOVLW  01
04F64:  MOVWF  x08
04F66:  MOVLB  0
04F68:  CALL   3C28
....................       output_high(flash_stream.cs_pin);
04F6C:  MOVFF  A91,B08
04F70:  MOVLW  01
04F72:  MOVLB  B
04F74:  MOVWF  x09
04F76:  MOVLW  0F
04F78:  MOVWF  x0B
04F7A:  MOVLW  89
04F7C:  MOVWF  x0A
04F7E:  MOVLB  0
04F80:  CALL   2ABA
04F84:  MOVFF  A91,B08
04F88:  MOVLB  B
04F8A:  CLRF   x09
04F8C:  MOVLW  0F
04F8E:  MOVWF  x0B
04F90:  MOVLW  92
04F92:  MOVWF  x0A
04F94:  MOVLB  0
04F96:  CALL   2ABA
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
04F9A:  MOVFF  A91,B08
04F9E:  MOVLB  B
04FA0:  CLRF   x09
04FA2:  MOVLW  0F
04FA4:  MOVWF  x0B
04FA6:  MOVLW  89
04FA8:  MOVWF  x0A
04FAA:  MOVLB  0
04FAC:  CALL   2ABA
04FB0:  MOVFF  A91,B08
04FB4:  MOVLB  B
04FB6:  CLRF   x09
04FB8:  MOVLW  0F
04FBA:  MOVWF  x0B
04FBC:  MOVLW  92
04FBE:  MOVWF  x0A
04FC0:  MOVLB  0
04FC2:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
04FC6:  MOVFF  A92,B05
04FCA:  MOVFF  A91,B04
04FCE:  MOVFF  A90,B03
04FD2:  MOVFF  A8F,B02
04FD6:  MOVLW  0A
04FD8:  MOVLB  B
04FDA:  MOVWF  x07
04FDC:  MOVLW  9D
04FDE:  MOVWF  x06
04FE0:  CLRF   x09
04FE2:  MOVLW  05
04FE4:  MOVWF  x08
04FE6:  MOVLB  0
04FE8:  CALL   3C28
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04FEC:  MOVFF  A91,B08
04FF0:  MOVLW  01
04FF2:  MOVLB  B
04FF4:  MOVWF  x09
04FF6:  MOVLW  0F
04FF8:  MOVWF  x0B
04FFA:  MOVLW  89
04FFC:  MOVWF  x0A
04FFE:  MOVLB  0
05000:  CALL   2ABA
05004:  MOVFF  A91,B08
05008:  MOVLB  B
0500A:  CLRF   x09
0500C:  MOVLW  0F
0500E:  MOVWF  x0B
05010:  MOVLW  92
05012:  MOVWF  x0A
05014:  MOVLB  0
05016:  CALL   2ABA
....................    }
0501A:  GOTO   501E
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
0501E:  MOVLB  A
05020:  CLRF   xA2
05022:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
05024:  MOVFF  A92,B05
05028:  MOVFF  A91,B04
0502C:  MOVFF  A90,B03
05030:  MOVFF  A8F,B02
05034:  CALL   3E94
05038:  MOVF   01,W
0503A:  ANDLW  01
0503C:  SUBLW  01
0503E:  BTFSS  FD8.2
05040:  GOTO   505A
....................       delay_ms(1);   
05044:  MOVLW  01
05046:  MOVLB  B
05048:  MOVWF  x02
0504A:  MOVLB  0
0504C:  CALL   22AE
....................       if(timeout_counter > 1000){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
05050:  MOVLB  A
05052:  INCF   xA2,F
05054:  MOVLB  0
05056:  GOTO   5024
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
0505A:  RETURN 0
.................... }
....................  
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address)
.................... {
....................    unsigned int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................    
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    return read_data;
.................... }
....................  
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
02ECA:  MOVLB  A
02ECC:  MOVF   xEB,F
02ECE:  BTFSC  FD8.2
02ED0:  BRA    2ED8
02ED2:  MOVLB  0
02ED4:  GOTO   2FCE
02ED8:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
02EDA:  MOVLW  03
02EDC:  MOVLB  A
02EDE:  MOVWF  xF8
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02EE0:  MOVFF  AF0,B02
02EE4:  MOVFF  AF1,B03
02EE8:  MOVLB  B
02EEA:  CLRF   x04
02EEC:  CLRF   x05
02EEE:  MOVF   x02,W
02EF0:  MOVWF  00
02EF2:  CLRF   01
02EF4:  CLRF   02
02EF6:  CLRF   03
02EF8:  MOVFF  00,AF9
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02EFC:  MOVFF  AEF,B02
02F00:  MOVFF  AF0,B03
02F04:  MOVFF  AF1,B04
02F08:  CLRF   x05
02F0A:  MOVF   x02,W
02F0C:  MOVWF  00
02F0E:  CLRF   01
02F10:  CLRF   02
02F12:  CLRF   03
02F14:  MOVFF  00,AFA
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02F18:  MOVLB  A
02F1A:  MOVF   xEE,W
02F1C:  MOVWF  00
02F1E:  CLRF   01
02F20:  CLRF   02
02F22:  CLRF   03
02F24:  MOVFF  00,AFB
....................             
....................       output_low(flash_stream.cs_pin);
02F28:  MOVFF  AEC,B08
02F2C:  MOVLB  B
02F2E:  CLRF   x09
02F30:  MOVLW  0F
02F32:  MOVWF  x0B
02F34:  MOVLW  89
02F36:  MOVWF  x0A
02F38:  MOVLB  0
02F3A:  CALL   2ABA
02F3E:  MOVFF  AEC,B08
02F42:  MOVLB  B
02F44:  CLRF   x09
02F46:  MOVLW  0F
02F48:  MOVWF  x0B
02F4A:  MOVLW  92
02F4C:  MOVWF  x0A
02F4E:  MOVLB  0
02F50:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
02F54:  MOVFF  AED,B0B
02F58:  MOVFF  AEC,B0A
02F5C:  MOVFF  AEB,B09
02F60:  MOVFF  AEA,B08
02F64:  MOVLW  0A
02F66:  MOVLB  B
02F68:  MOVWF  x0D
02F6A:  MOVLW  F8
02F6C:  MOVWF  x0C
02F6E:  CLRF   x0F
02F70:  MOVLW  04
02F72:  MOVWF  x0E
02F74:  MOVFF  AF3,B11
02F78:  MOVFF  AF2,B10
02F7C:  MOVFF  AF7,B15
02F80:  MOVFF  AF6,B14
02F84:  MOVFF  AF5,B13
02F88:  MOVFF  AF4,B12
02F8C:  MOVLB  0
02F8E:  CALL   2BCE
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
02F92:  MOVLW  02
02F94:  MOVWF  00
02F96:  DECFSZ 00,F
02F98:  BRA    2F96
02F9A:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02F9C:  MOVFF  AEC,B08
02FA0:  MOVLW  01
02FA2:  MOVLB  B
02FA4:  MOVWF  x09
02FA6:  MOVLW  0F
02FA8:  MOVWF  x0B
02FAA:  MOVLW  89
02FAC:  MOVWF  x0A
02FAE:  MOVLB  0
02FB0:  CALL   2ABA
02FB4:  MOVFF  AEC,B08
02FB8:  MOVLB  B
02FBA:  CLRF   x09
02FBC:  MOVLW  0F
02FBE:  MOVWF  x0B
02FC0:  MOVLW  92
02FC2:  MOVWF  x0A
02FC4:  MOVLB  0
02FC6:  CALL   2ABA
....................    }
02FCA:  GOTO   30E8
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
02FCE:  MOVLB  A
02FD0:  DECFSZ xEB,W
02FD2:  BRA    2FD8
02FD4:  BRA    2FDE
02FD6:  MOVLB  0
02FD8:  MOVLB  0
02FDA:  GOTO   30E8
02FDE:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
02FE0:  MOVLW  13
02FE2:  MOVLB  A
02FE4:  MOVWF  xFC
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
02FE6:  MOVFF  AF1,B02
02FEA:  MOVLB  B
02FEC:  CLRF   x03
02FEE:  CLRF   x04
02FF0:  CLRF   x05
02FF2:  MOVF   x02,W
02FF4:  MOVWF  00
02FF6:  CLRF   01
02FF8:  CLRF   02
02FFA:  CLRF   03
02FFC:  MOVFF  00,AFD
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03000:  MOVFF  AF0,B02
03004:  MOVFF  AF1,B03
03008:  CLRF   x04
0300A:  CLRF   x05
0300C:  MOVF   x02,W
0300E:  MOVWF  00
03010:  CLRF   01
03012:  CLRF   02
03014:  CLRF   03
03016:  MOVFF  00,AFE
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0301A:  MOVFF  AEF,B02
0301E:  MOVFF  AF0,B03
03022:  MOVFF  AF1,B04
03026:  CLRF   x05
03028:  MOVF   x02,W
0302A:  MOVWF  00
0302C:  CLRF   01
0302E:  CLRF   02
03030:  CLRF   03
03032:  MOVFF  00,AFF
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
03036:  MOVLB  A
03038:  MOVF   xEE,W
0303A:  MOVWF  00
0303C:  CLRF   01
0303E:  CLRF   02
03040:  CLRF   03
03042:  MOVFF  00,B00
....................    
....................       output_low(flash_stream.cs_pin);
03046:  MOVFF  AEC,B08
0304A:  MOVLB  B
0304C:  CLRF   x09
0304E:  MOVLW  0F
03050:  MOVWF  x0B
03052:  MOVLW  89
03054:  MOVWF  x0A
03056:  MOVLB  0
03058:  CALL   2ABA
0305C:  MOVFF  AEC,B08
03060:  MOVLB  B
03062:  CLRF   x09
03064:  MOVLW  0F
03066:  MOVWF  x0B
03068:  MOVLW  92
0306A:  MOVWF  x0A
0306C:  MOVLB  0
0306E:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
03072:  MOVFF  AED,B0B
03076:  MOVFF  AEC,B0A
0307A:  MOVFF  AEB,B09
0307E:  MOVFF  AEA,B08
03082:  MOVLW  0A
03084:  MOVLB  B
03086:  MOVWF  x0D
03088:  MOVLW  FC
0308A:  MOVWF  x0C
0308C:  CLRF   x0F
0308E:  MOVLW  05
03090:  MOVWF  x0E
03092:  MOVFF  AF3,B11
03096:  MOVFF  AF2,B10
0309A:  MOVFF  AF7,B15
0309E:  MOVFF  AF6,B14
030A2:  MOVFF  AF5,B13
030A6:  MOVFF  AF4,B12
030AA:  MOVLB  0
030AC:  CALL   2BCE
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
030B0:  MOVLW  02
030B2:  MOVWF  00
030B4:  DECFSZ 00,F
030B6:  BRA    30B4
030B8:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
030BA:  MOVFF  AEC,B08
030BE:  MOVLW  01
030C0:  MOVLB  B
030C2:  MOVWF  x09
030C4:  MOVLW  0F
030C6:  MOVWF  x0B
030C8:  MOVLW  89
030CA:  MOVWF  x0A
030CC:  MOVLB  0
030CE:  CALL   2ABA
030D2:  MOVFF  AEC,B08
030D6:  MOVLB  B
030D8:  CLRF   x09
030DA:  MOVLW  0F
030DC:  MOVWF  x0B
030DE:  MOVLW  92
030E0:  MOVWF  x0A
030E2:  MOVLB  0
030E4:  CALL   2ABA
....................    }
....................    return;
030E8:  RETURN 0
.................... }
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
10138:  MOVLB  2
1013A:  MOVF   x1A,F
1013C:  BTFSC  FD8.2
1013E:  BRA    10146
10140:  MOVLB  0
10142:  GOTO   102AC
10146:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
10148:  MOVLW  06
1014A:  MOVLB  2
1014C:  MOVWF  x22
1014E:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
10150:  MOVLW  02
10152:  MOVLB  2
10154:  MOVWF  x23
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
10156:  MOVFF  21F,231
1015A:  MOVFF  220,232
1015E:  CLRF   x33
10160:  CLRF   x34
10162:  MOVF   x31,W
10164:  MOVWF  00
10166:  CLRF   01
10168:  CLRF   02
1016A:  CLRF   03
1016C:  MOVFF  00,224
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
10170:  MOVFF  21E,231
10174:  MOVFF  21F,232
10178:  MOVFF  220,233
1017C:  CLRF   x34
1017E:  MOVF   x31,W
10180:  MOVWF  00
10182:  CLRF   01
10184:  CLRF   02
10186:  CLRF   03
10188:  MOVFF  00,225
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
1018C:  MOVF   x1D,W
1018E:  MOVWF  00
10190:  CLRF   01
10192:  CLRF   02
10194:  CLRF   03
10196:  MOVFF  00,226
....................       flash_cmd[4] = write_data;
1019A:  MOVFF  221,227
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
1019E:  MOVFF  21B,B08
101A2:  MOVLB  B
101A4:  CLRF   x09
101A6:  MOVLW  0F
101A8:  MOVWF  x0B
101AA:  MOVLW  89
101AC:  MOVWF  x0A
101AE:  MOVLB  0
101B0:  CALL   2ABA
101B4:  MOVFF  21B,B08
101B8:  MOVLB  B
101BA:  CLRF   x09
101BC:  MOVLW  0F
101BE:  MOVWF  x0B
101C0:  MOVLW  92
101C2:  MOVWF  x0A
101C4:  MOVLB  0
101C6:  CALL   2ABA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
101CA:  MOVFF  21C,B05
101CE:  MOVFF  21B,B04
101D2:  MOVFF  21A,B03
101D6:  MOVFF  219,B02
101DA:  MOVLW  02
101DC:  MOVLB  B
101DE:  MOVWF  x07
101E0:  MOVLW  22
101E2:  MOVWF  x06
101E4:  CLRF   x09
101E6:  MOVLW  01
101E8:  MOVWF  x08
101EA:  MOVLB  0
101EC:  CALL   3C28
....................       output_high(flash_stream.cs_pin);
101F0:  MOVFF  21B,B08
101F4:  MOVLW  01
101F6:  MOVLB  B
101F8:  MOVWF  x09
101FA:  MOVLW  0F
101FC:  MOVWF  x0B
101FE:  MOVLW  89
10200:  MOVWF  x0A
10202:  MOVLB  0
10204:  CALL   2ABA
10208:  MOVFF  21B,B08
1020C:  MOVLB  B
1020E:  CLRF   x09
10210:  MOVLW  0F
10212:  MOVWF  x0B
10214:  MOVLW  92
10216:  MOVWF  x0A
10218:  MOVLB  0
1021A:  CALL   2ABA
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
1021E:  MOVFF  21B,B08
10222:  MOVLB  B
10224:  CLRF   x09
10226:  MOVLW  0F
10228:  MOVWF  x0B
1022A:  MOVLW  89
1022C:  MOVWF  x0A
1022E:  MOVLB  0
10230:  CALL   2ABA
10234:  MOVFF  21B,B08
10238:  MOVLB  B
1023A:  CLRF   x09
1023C:  MOVLW  0F
1023E:  MOVWF  x0B
10240:  MOVLW  92
10242:  MOVWF  x0A
10244:  MOVLB  0
10246:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
1024A:  MOVFF  21C,B05
1024E:  MOVFF  21B,B04
10252:  MOVFF  21A,B03
10256:  MOVFF  219,B02
1025A:  MOVLW  02
1025C:  MOVLB  B
1025E:  MOVWF  x07
10260:  MOVLW  23
10262:  MOVWF  x06
10264:  CLRF   x09
10266:  MOVLW  05
10268:  MOVWF  x08
1026A:  MOVLB  0
1026C:  CALL   3C28
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
10270:  MOVLW  02
10272:  MOVWF  00
10274:  DECFSZ 00,F
10276:  BRA    10274
10278:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
1027A:  MOVFF  21B,B08
1027E:  MOVLW  01
10280:  MOVLB  B
10282:  MOVWF  x09
10284:  MOVLW  0F
10286:  MOVWF  x0B
10288:  MOVLW  89
1028A:  MOVWF  x0A
1028C:  MOVLB  0
1028E:  CALL   2ABA
10292:  MOVFF  21B,B08
10296:  MOVLB  B
10298:  CLRF   x09
1029A:  MOVLW  0F
1029C:  MOVWF  x0B
1029E:  MOVLW  92
102A0:  MOVWF  x0A
102A2:  MOVLB  0
102A4:  CALL   2ABA
....................    }
102A8:  GOTO   10436
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
102AC:  MOVLB  2
102AE:  DECFSZ x1A,W
102B0:  BRA    102B6
102B2:  BRA    102BC
102B4:  MOVLB  0
102B6:  MOVLB  0
102B8:  GOTO   10436
102BC:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
102BE:  MOVLW  06
102C0:  MOVLB  2
102C2:  MOVWF  x28
102C4:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
102C6:  MOVLW  12
102C8:  MOVLB  2
102CA:  MOVWF  x29
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
102CC:  MOVFF  220,231
102D0:  CLRF   x32
102D2:  CLRF   x33
102D4:  CLRF   x34
102D6:  MOVF   x31,W
102D8:  MOVWF  00
102DA:  CLRF   01
102DC:  CLRF   02
102DE:  CLRF   03
102E0:  MOVFF  00,22A
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
102E4:  MOVFF  21F,231
102E8:  MOVFF  220,232
102EC:  CLRF   x33
102EE:  CLRF   x34
102F0:  MOVF   x31,W
102F2:  MOVWF  00
102F4:  CLRF   01
102F6:  CLRF   02
102F8:  CLRF   03
102FA:  MOVFF  00,22B
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
102FE:  MOVFF  21E,231
10302:  MOVFF  21F,232
10306:  MOVFF  220,233
1030A:  CLRF   x34
1030C:  MOVF   x31,W
1030E:  MOVWF  00
10310:  CLRF   01
10312:  CLRF   02
10314:  CLRF   03
10316:  MOVFF  00,22C
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
1031A:  MOVF   x1D,W
1031C:  MOVWF  00
1031E:  CLRF   01
10320:  CLRF   02
10322:  CLRF   03
10324:  MOVFF  00,22D
....................       flash_cmd[5] = write_data;
10328:  MOVFF  221,22E
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
1032C:  MOVFF  21B,B08
10330:  MOVLB  B
10332:  CLRF   x09
10334:  MOVLW  0F
10336:  MOVWF  x0B
10338:  MOVLW  89
1033A:  MOVWF  x0A
1033C:  MOVLB  0
1033E:  CALL   2ABA
10342:  MOVFF  21B,B08
10346:  MOVLB  B
10348:  CLRF   x09
1034A:  MOVLW  0F
1034C:  MOVWF  x0B
1034E:  MOVLW  92
10350:  MOVWF  x0A
10352:  MOVLB  0
10354:  CALL   2ABA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
10358:  MOVFF  21C,B05
1035C:  MOVFF  21B,B04
10360:  MOVFF  21A,B03
10364:  MOVFF  219,B02
10368:  MOVLW  02
1036A:  MOVLB  B
1036C:  MOVWF  x07
1036E:  MOVLW  28
10370:  MOVWF  x06
10372:  CLRF   x09
10374:  MOVLW  01
10376:  MOVWF  x08
10378:  MOVLB  0
1037A:  CALL   3C28
....................       output_high(flash_stream.cs_pin);
1037E:  MOVFF  21B,B08
10382:  MOVLW  01
10384:  MOVLB  B
10386:  MOVWF  x09
10388:  MOVLW  0F
1038A:  MOVWF  x0B
1038C:  MOVLW  89
1038E:  MOVWF  x0A
10390:  MOVLB  0
10392:  CALL   2ABA
10396:  MOVFF  21B,B08
1039A:  MOVLB  B
1039C:  CLRF   x09
1039E:  MOVLW  0F
103A0:  MOVWF  x0B
103A2:  MOVLW  92
103A4:  MOVWF  x0A
103A6:  MOVLB  0
103A8:  CALL   2ABA
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
103AC:  MOVFF  21B,B08
103B0:  MOVLB  B
103B2:  CLRF   x09
103B4:  MOVLW  0F
103B6:  MOVWF  x0B
103B8:  MOVLW  89
103BA:  MOVWF  x0A
103BC:  MOVLB  0
103BE:  CALL   2ABA
103C2:  MOVFF  21B,B08
103C6:  MOVLB  B
103C8:  CLRF   x09
103CA:  MOVLW  0F
103CC:  MOVWF  x0B
103CE:  MOVLW  92
103D0:  MOVWF  x0A
103D2:  MOVLB  0
103D4:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
103D8:  MOVFF  21C,B05
103DC:  MOVFF  21B,B04
103E0:  MOVFF  21A,B03
103E4:  MOVFF  219,B02
103E8:  MOVLW  02
103EA:  MOVLB  B
103EC:  MOVWF  x07
103EE:  MOVLW  29
103F0:  MOVWF  x06
103F2:  CLRF   x09
103F4:  MOVLW  06
103F6:  MOVWF  x08
103F8:  MOVLB  0
103FA:  CALL   3C28
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
103FE:  MOVLW  02
10400:  MOVWF  00
10402:  DECFSZ 00,F
10404:  BRA    10402
10406:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
10408:  MOVFF  21B,B08
1040C:  MOVLW  01
1040E:  MOVLB  B
10410:  MOVWF  x09
10412:  MOVLW  0F
10414:  MOVWF  x0B
10416:  MOVLW  89
10418:  MOVWF  x0A
1041A:  MOVLB  0
1041C:  CALL   2ABA
10420:  MOVFF  21B,B08
10424:  MOVLB  B
10426:  CLRF   x09
10428:  MOVLW  0F
1042A:  MOVWF  x0B
1042C:  MOVLW  92
1042E:  MOVWF  x0A
10430:  MOVLB  0
10432:  CALL   2ABA
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
10436:  MOVLB  2
10438:  CLRF   x2F
1043A:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
1043C:  MOVFF  21C,B05
10440:  MOVFF  21B,B04
10444:  MOVFF  21A,B03
10448:  MOVFF  219,B02
1044C:  CALL   3E94
10450:  MOVF   01,W
10452:  ANDLW  01
10454:  SUBLW  01
10456:  BTFSS  FD8.2
10458:  GOTO   10472
....................       delay_ms(1);   
1045C:  MOVLW  01
1045E:  MOVLB  B
10460:  MOVWF  x02
10462:  MOVLB  0
10464:  CALL   22AE
....................       if(timeout_counter > 1000){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
10468:  MOVLB  2
1046A:  INCF   x2F,F
1046C:  MOVLB  0
1046E:  GOTO   1043C
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
10472:  RETURN 0
.................... }
....................  
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
03F34:  MOVLB  A
03F36:  MOVF   xEB,F
03F38:  BTFSC  FD8.2
03F3A:  BRA    3F42
03F3C:  MOVLB  0
03F3E:  GOTO   40B6
03F42:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
03F44:  MOVLW  06
03F46:  MOVLB  A
03F48:  MOVWF  xF6
03F4A:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
03F4C:  MOVLW  02
03F4E:  MOVLB  A
03F50:  MOVWF  xF7
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03F52:  MOVFF  AF0,B03
03F56:  MOVFF  AF1,B04
03F5A:  MOVLB  B
03F5C:  CLRF   x05
03F5E:  CLRF   x06
03F60:  MOVF   x03,W
03F62:  MOVWF  00
03F64:  CLRF   01
03F66:  CLRF   02
03F68:  CLRF   03
03F6A:  MOVFF  00,AF8
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03F6E:  MOVFF  AEF,B03
03F72:  MOVFF  AF0,B04
03F76:  MOVFF  AF1,B05
03F7A:  CLRF   x06
03F7C:  MOVF   x03,W
03F7E:  MOVWF  00
03F80:  CLRF   01
03F82:  CLRF   02
03F84:  CLRF   03
03F86:  MOVFF  00,AF9
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
03F8A:  MOVLB  A
03F8C:  MOVF   xEE,W
03F8E:  MOVWF  00
03F90:  CLRF   01
03F92:  CLRF   02
03F94:  CLRF   03
03F96:  MOVFF  00,AFA
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03F9A:  MOVFF  AEC,B08
03F9E:  MOVLB  B
03FA0:  CLRF   x09
03FA2:  MOVLW  0F
03FA4:  MOVWF  x0B
03FA6:  MOVLW  89
03FA8:  MOVWF  x0A
03FAA:  MOVLB  0
03FAC:  CALL   2ABA
03FB0:  MOVFF  AEC,B08
03FB4:  MOVLB  B
03FB6:  CLRF   x09
03FB8:  MOVLW  0F
03FBA:  MOVWF  x0B
03FBC:  MOVLW  92
03FBE:  MOVWF  x0A
03FC0:  MOVLB  0
03FC2:  CALL   2ABA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03FC6:  MOVFF  AED,B05
03FCA:  MOVFF  AEC,B04
03FCE:  MOVFF  AEB,B03
03FD2:  MOVFF  AEA,B02
03FD6:  MOVLW  0A
03FD8:  MOVLB  B
03FDA:  MOVWF  x07
03FDC:  MOVLW  F6
03FDE:  MOVWF  x06
03FE0:  CLRF   x09
03FE2:  MOVLW  01
03FE4:  MOVWF  x08
03FE6:  MOVLB  0
03FE8:  CALL   3C28
....................       output_high(flash_stream.cs_pin);
03FEC:  MOVFF  AEC,B08
03FF0:  MOVLW  01
03FF2:  MOVLB  B
03FF4:  MOVWF  x09
03FF6:  MOVLW  0F
03FF8:  MOVWF  x0B
03FFA:  MOVLW  89
03FFC:  MOVWF  x0A
03FFE:  MOVLB  0
04000:  CALL   2ABA
04004:  MOVFF  AEC,B08
04008:  MOVLB  B
0400A:  CLRF   x09
0400C:  MOVLW  0F
0400E:  MOVWF  x0B
04010:  MOVLW  92
04012:  MOVWF  x0A
04014:  MOVLB  0
04016:  CALL   2ABA
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
0401A:  MOVFF  AEC,B08
0401E:  MOVLB  B
04020:  CLRF   x09
04022:  MOVLW  0F
04024:  MOVWF  x0B
04026:  MOVLW  89
04028:  MOVWF  x0A
0402A:  MOVLB  0
0402C:  CALL   2ABA
04030:  MOVFF  AEC,B08
04034:  MOVLB  B
04036:  CLRF   x09
04038:  MOVLW  0F
0403A:  MOVWF  x0B
0403C:  MOVLW  92
0403E:  MOVWF  x0A
04040:  MOVLB  0
04042:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
04046:  MOVFF  AED,B05
0404A:  MOVFF  AEC,B04
0404E:  MOVFF  AEB,B03
04052:  MOVFF  AEA,B02
04056:  MOVLW  0A
04058:  MOVLB  B
0405A:  MOVWF  x07
0405C:  MOVLW  F7
0405E:  MOVWF  x06
04060:  MOVLW  04
04062:  MOVWF  x08
04064:  MOVFF  AF3,B0A
04068:  MOVFF  AF2,B09
0406C:  MOVFF  AF5,B0C
04070:  MOVFF  AF4,B0B
04074:  MOVLB  0
04076:  CALL   3D18
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0407A:  MOVLW  02
0407C:  MOVWF  00
0407E:  DECFSZ 00,F
04080:  BRA    407E
04082:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04084:  MOVFF  AEC,B08
04088:  MOVLW  01
0408A:  MOVLB  B
0408C:  MOVWF  x09
0408E:  MOVLW  0F
04090:  MOVWF  x0B
04092:  MOVLW  89
04094:  MOVWF  x0A
04096:  MOVLB  0
04098:  CALL   2ABA
0409C:  MOVFF  AEC,B08
040A0:  MOVLB  B
040A2:  CLRF   x09
040A4:  MOVLW  0F
040A6:  MOVWF  x0B
040A8:  MOVLW  92
040AA:  MOVWF  x0A
040AC:  MOVLB  0
040AE:  CALL   2ABA
....................    }
040B2:  GOTO   424E
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
040B6:  MOVLB  A
040B8:  DECFSZ xEB,W
040BA:  BRA    40C0
040BC:  BRA    40C6
040BE:  MOVLB  0
040C0:  MOVLB  0
040C2:  GOTO   424E
040C6:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
040C8:  MOVLW  06
040CA:  MOVLB  A
040CC:  MOVWF  xFB
040CE:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
040D0:  MOVLW  12
040D2:  MOVLB  A
040D4:  MOVWF  xFC
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
040D6:  MOVFF  AF1,B03
040DA:  MOVLB  B
040DC:  CLRF   x04
040DE:  CLRF   x05
040E0:  CLRF   x06
040E2:  MOVF   x03,W
040E4:  MOVWF  00
040E6:  CLRF   01
040E8:  CLRF   02
040EA:  CLRF   03
040EC:  MOVFF  00,AFD
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
040F0:  MOVFF  AF0,B03
040F4:  MOVFF  AF1,B04
040F8:  CLRF   x05
040FA:  CLRF   x06
040FC:  MOVF   x03,W
040FE:  MOVWF  00
04100:  CLRF   01
04102:  CLRF   02
04104:  CLRF   03
04106:  MOVFF  00,AFE
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0410A:  MOVFF  AEF,B03
0410E:  MOVFF  AF0,B04
04112:  MOVFF  AF1,B05
04116:  CLRF   x06
04118:  MOVF   x03,W
0411A:  MOVWF  00
0411C:  CLRF   01
0411E:  CLRF   02
04120:  CLRF   03
04122:  MOVFF  00,AFF
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
04126:  MOVLB  A
04128:  MOVF   xEE,W
0412A:  MOVWF  00
0412C:  CLRF   01
0412E:  CLRF   02
04130:  CLRF   03
04132:  MOVFF  00,B00
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04136:  MOVFF  AEC,B08
0413A:  MOVLB  B
0413C:  CLRF   x09
0413E:  MOVLW  0F
04140:  MOVWF  x0B
04142:  MOVLW  89
04144:  MOVWF  x0A
04146:  MOVLB  0
04148:  CALL   2ABA
0414C:  MOVFF  AEC,B08
04150:  MOVLB  B
04152:  CLRF   x09
04154:  MOVLW  0F
04156:  MOVWF  x0B
04158:  MOVLW  92
0415A:  MOVWF  x0A
0415C:  MOVLB  0
0415E:  CALL   2ABA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
04162:  MOVFF  AED,B05
04166:  MOVFF  AEC,B04
0416A:  MOVFF  AEB,B03
0416E:  MOVFF  AEA,B02
04172:  MOVLW  0A
04174:  MOVLB  B
04176:  MOVWF  x07
04178:  MOVLW  FB
0417A:  MOVWF  x06
0417C:  CLRF   x09
0417E:  MOVLW  01
04180:  MOVWF  x08
04182:  MOVLB  0
04184:  CALL   3C28
....................       output_high(flash_stream.cs_pin);
04188:  MOVFF  AEC,B08
0418C:  MOVLW  01
0418E:  MOVLB  B
04190:  MOVWF  x09
04192:  MOVLW  0F
04194:  MOVWF  x0B
04196:  MOVLW  89
04198:  MOVWF  x0A
0419A:  MOVLB  0
0419C:  CALL   2ABA
041A0:  MOVFF  AEC,B08
041A4:  MOVLB  B
041A6:  CLRF   x09
041A8:  MOVLW  0F
041AA:  MOVWF  x0B
041AC:  MOVLW  92
041AE:  MOVWF  x0A
041B0:  MOVLB  0
041B2:  CALL   2ABA
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
041B6:  MOVFF  AEC,B08
041BA:  MOVLB  B
041BC:  CLRF   x09
041BE:  MOVLW  0F
041C0:  MOVWF  x0B
041C2:  MOVLW  89
041C4:  MOVWF  x0A
041C6:  MOVLB  0
041C8:  CALL   2ABA
041CC:  MOVFF  AEC,B08
041D0:  MOVLB  B
041D2:  CLRF   x09
041D4:  MOVLW  0F
041D6:  MOVWF  x0B
041D8:  MOVLW  92
041DA:  MOVWF  x0A
041DC:  MOVLB  0
041DE:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
041E2:  MOVFF  AED,B05
041E6:  MOVFF  AEC,B04
041EA:  MOVFF  AEB,B03
041EE:  MOVFF  AEA,B02
041F2:  MOVLW  0A
041F4:  MOVLB  B
041F6:  MOVWF  x07
041F8:  MOVLW  FC
041FA:  MOVWF  x06
041FC:  MOVLW  05
041FE:  MOVWF  x08
04200:  MOVFF  AF3,B0A
04204:  MOVFF  AF2,B09
04208:  MOVFF  AF5,B0C
0420C:  MOVFF  AF4,B0B
04210:  MOVLB  0
04212:  CALL   3D18
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
04216:  MOVLW  02
04218:  MOVWF  00
0421A:  DECFSZ 00,F
0421C:  BRA    421A
0421E:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04220:  MOVFF  AEC,B08
04224:  MOVLW  01
04226:  MOVLB  B
04228:  MOVWF  x09
0422A:  MOVLW  0F
0422C:  MOVWF  x0B
0422E:  MOVLW  89
04230:  MOVWF  x0A
04232:  MOVLB  0
04234:  CALL   2ABA
04238:  MOVFF  AEC,B08
0423C:  MOVLB  B
0423E:  CLRF   x09
04240:  MOVLW  0F
04242:  MOVWF  x0B
04244:  MOVLW  92
04246:  MOVWF  x0A
04248:  MOVLB  0
0424A:  CALL   2ABA
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
0424E:  MOVLB  B
04250:  CLRF   x01
04252:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
04254:  MOVFF  AED,B05
04258:  MOVFF  AEC,B04
0425C:  MOVFF  AEB,B03
04260:  MOVFF  AEA,B02
04264:  CALL   3E94
04268:  MOVF   01,W
0426A:  ANDLW  01
0426C:  SUBLW  01
0426E:  BTFSS  FD8.2
04270:  GOTO   428A
....................       delay_ms(1);
04274:  MOVLW  01
04276:  MOVLB  B
04278:  MOVWF  x02
0427A:  MOVLB  0
0427C:  CALL   22AE
....................       if(timeout_counter > 1000){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
04280:  MOVLB  B
04282:  INCF   x01,F
04284:  MOVLB  0
04286:  GOTO   4254
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
0428A:  RETURN 0
.................... }
.................... 
....................  
.................... int1 is_connect(Flash flash_stream){
*
02E02:  MOVLW  9F
02E04:  MOVLB  2
02E06:  MOVWF  x68
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
02E08:  MOVFF  252,B08
02E0C:  MOVLB  B
02E0E:  CLRF   x09
02E10:  MOVLW  0F
02E12:  MOVWF  x0B
02E14:  MOVLW  89
02E16:  MOVWF  x0A
02E18:  MOVLB  0
02E1A:  CALL   2ABA
02E1E:  MOVFF  252,B08
02E22:  MOVLB  B
02E24:  CLRF   x09
02E26:  MOVLW  0F
02E28:  MOVWF  x0B
02E2A:  MOVLW  92
02E2C:  MOVWF  x0A
02E2E:  MOVLB  0
02E30:  CALL   2ABA
....................    delay_us(10);  
02E34:  MOVLW  0D
02E36:  MOVWF  00
02E38:  DECFSZ 00,F
02E3A:  BRA    2E38
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
02E3C:  MOVFF  253,B0B
02E40:  MOVFF  252,B0A
02E44:  MOVFF  251,B09
02E48:  MOVFF  250,B08
02E4C:  MOVLW  02
02E4E:  MOVLB  B
02E50:  MOVWF  x0D
02E52:  MOVLW  68
02E54:  MOVWF  x0C
02E56:  CLRF   x0F
02E58:  MOVLW  01
02E5A:  MOVWF  x0E
02E5C:  MOVLW  02
02E5E:  MOVWF  x11
02E60:  MOVLW  54
02E62:  MOVWF  x10
02E64:  CLRF   x15
02E66:  CLRF   x14
02E68:  CLRF   x13
02E6A:  MOVLW  14
02E6C:  MOVWF  x12
02E6E:  MOVLB  0
02E70:  CALL   2BCE
....................    output_high(flash_stream.cs_pin);
02E74:  MOVFF  252,B08
02E78:  MOVLW  01
02E7A:  MOVLB  B
02E7C:  MOVWF  x09
02E7E:  MOVLW  0F
02E80:  MOVWF  x0B
02E82:  MOVLW  89
02E84:  MOVWF  x0A
02E86:  MOVLB  0
02E88:  CALL   2ABA
02E8C:  MOVFF  252,B08
02E90:  MOVLB  B
02E92:  CLRF   x09
02E94:  MOVLW  0F
02E96:  MOVWF  x0B
02E98:  MOVLW  92
02E9A:  MOVWF  x0A
02E9C:  MOVLB  0
02E9E:  CALL   2ABA
....................    //fprintf(PC,"Read ID:%02X", read_id_data.fields.manufacturer_id);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
02EA2:  MOVLB  2
02EA4:  MOVF   x54,W
02EA6:  SUBLW  20
02EA8:  BTFSC  FD8.2
02EAA:  BRA    2EB2
02EAC:  MOVLB  0
02EAE:  GOTO   2EC0
02EB2:  MOVLB  0
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
02EB4:  MOVLW  01
02EB6:  MOVWF  01
02EB8:  GOTO   2EC8
....................    }
02EBC:  GOTO   2EC8
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
02EC0:  MOVLW  00
02EC2:  MOVWF  01
02EC4:  GOTO   2EC8
....................    }
02EC8:  RETURN 0
.................... }
.................... 
.................... #include "../lib/tool/calc_tools.c"
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size)
.................... {
....................    if (payload_size <= 0) return 0;
*
030EA:  MOVLB  A
030EC:  MOVF   xEC,F
030EE:  BTFSC  FD8.2
030F0:  BRA    30F8
030F2:  MOVLB  0
030F4:  GOTO   3102
030F8:  MOVLB  0
030FA:  MOVLW  00
030FC:  MOVWF  01
030FE:  GOTO   3154
.................... 
....................    unsigned int8 crc = *frame++;
03102:  MOVLB  A
03104:  MOVF   xEB,W
03106:  MOVWF  03
03108:  MOVF   xEA,W
0310A:  INCF   xEA,F
0310C:  BTFSC  FD8.2
0310E:  INCF   xEB,F
03110:  MOVWF  FE9
03112:  MOVFF  03,FEA
03116:  MOVFF  FEF,AED
0311A:  MOVLB  0
....................    while (--payload_size > 0)
0311C:  MOVLB  A
0311E:  DECF   xEC,F
03120:  MOVF   xEC,F
03122:  BTFSS  FD8.2
03124:  BRA    312C
03126:  MOVLB  0
03128:  GOTO   314C
0312C:  MOVLB  0
....................       crc ^= *frame++;
0312E:  MOVLB  A
03130:  MOVF   xEB,W
03132:  MOVWF  03
03134:  MOVF   xEA,W
03136:  INCF   xEA,F
03138:  BTFSC  FD8.2
0313A:  INCF   xEB,F
0313C:  MOVWF  FE9
0313E:  MOVFF  03,FEA
03142:  MOVF   FEF,W
03144:  XORWF  xED,F
03146:  MOVLB  0
03148:  GOTO   311C
.................... 
....................    return crc;
0314C:  MOVLB  A
0314E:  MOVF   xED,W
03150:  MOVWF  01
03152:  MOVLB  0
03154:  RETURN 0
.................... }
.................... 
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size)
.................... {
....................    unsigned int8 received_crc = frame[payload_size - 1]; // CRC is the last byte
....................    unsigned int8 calculated_crc = calc_crc8(frame, payload_size - 1);
....................    return (received_crc == calculated_crc);
.................... }
.................... 
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index)
.................... {
....................     buf[index + 0] = (int8)(value >> 24);   // MSB
....................     buf[index + 1] = (int8)(value >> 16);
....................     buf[index + 2] = (int8)(value >>  8);
....................     buf[index + 3] = (int8)(value      );   // LSB
.................... }
.................... 
.................... int32 lsb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] <<  0) |
....................            ((int32)buf[index + 1] <<  8) |
....................            ((int32)buf[index + 2] << 16) |
....................            ((int32)buf[index + 3] << 24);
.................... }
.................... 
.................... 
.................... int32 msb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] << 24) |
....................            ((int32)buf[index + 1] << 16) |
....................            ((int32)buf[index + 2] <<  8) |
....................            ((int32)buf[index + 3]);
.................... }
.................... 
.................... unsigned int32 int32_lsb_to_msb(unsigned int32 value)
.................... {
....................     return ((value & 0x000000FF) << 24) |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0xFF000000) >> 24);
.................... }
.................... 
.................... unsigned int32 int32_msb_to_lsb(unsigned int32 value)
.................... {
....................     return ((value & 0xFF000000) >> 24) |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x000000FF) << 24);
.................... }
.................... // End of file
.................... 
.................... #include "../lib/tool/smf_queue.c"
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... typedef enum smf_memory_id_t{
....................     // SATO
....................     SMF_SATO_DATA_TABLE = 0xA0,
....................     SMF_SATO_PICLOG = 0xA1,
....................     SMF_SATO_INNER_DIODE_HEADER = 0xA2,
....................     SMF_SATO_INNER_DIODE_DATA = 0xA3,
....................     SMF_SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SMF_SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     SMF_CIGS_DATA_TABLE = 0xC0,
....................     SMF_CIGS_PICLOG = 0xC1,
....................     SMF_CIGS_ENVIRO = 0xC2,
....................     SMF_CIGS_IV1_HEADER = 0xC3,
....................     SMF_CIGS_IV1_DATA = 0xC4,
....................     SMF_CIGS_IV2_HEADER = 0xC5,
....................     SMF_CIGS_IV2_DATA = 0xC6,
.................... };
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS   0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS   0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS     0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS       0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS         0x06AB0FFF
.................... #define CIGS_ENVIRO_START_ADDRESS       0x06AB1000
.................... #define CIGS_ENVIRO_END_ADDRESS         0x06B50FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS   0x06B51000
.................... #define CIGS_IV1_HEADER_END_ADDRESS     0x06BF0FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS     0x06BF1000
.................... #define CIGS_IV1_DATA_END_ADDRESS       0x06FF0FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS   0x06FF1000
.................... #define CIGS_IV2_HEADER_END_ADDRESS     0x07090FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS     0x07091000
.................... #define CIGS_IV2_DATA_END_ADDRESS       0x07490FFF
.................... 
.................... /*
.................... enum smf_memory_id{
....................     // SATO
....................     SATO_DATA_TABLE = 0xA0,
....................     SATO_PICLOG = 0xA1,
....................     SATO_INNER_DIODE_HEADER = 0xA2,
....................     SATO_INNER_DIODE_DATA = 0xA3,
....................     SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     IDF_CIGS_DATA_TABLE = 0xC0,
....................     IDF_CIGS_PICLOG = 0xC1,
....................     IDF_CIGS_ENVIRO = 0xC2,
....................     IDF_CIGS_IV1_HEADER = 0xC3,
....................     IDF_CIGS_IV1_DATA = 0xC4,
....................     IDF_CIGS_IV2_HEADER = 0xC5,
....................     IDF_CIGS_IV2_DATA = 0xC6,
.................... }
.................... */
.................... // DATA ID for CIGS
.................... #define DATA_ID_CIGS_DATA_TABLE 0xC0
.................... #define DATA_ID_CIGS_PICLOG 0xC1
.................... #define DATA_ID_CIGS_ENVIRO 0xC2
.................... #define DATA_ID_CIGS_IV1_HEADER 0xC3
.................... #define DATA_ID_CIGS_IV1_DATA 0xC4
.................... #define DATA_ID_CIGS_IV2_HEADER 0xC5
.................... #define DATA_ID_CIGS_IV2_DATA 0xC6
.................... 
.................... // FLASH ADDRESS for CIGS
.................... #define SMF_DATA_TABLE_HEADER_START_ADDRESS   0x07284000
.................... #define SMF_DATA_TABLE_HEADER_END_ADDRESS     0x07284FFF
.................... #define SMF_DATA_TABLE_DATA_START_ADDRESS     0x07285000
.................... #define SMF_DATA_TABLE_DATA_END_ADDRESS       0x07285FFF
.................... 
.................... #define SMF_PICLOG_HEADER_START_ADDRESS       0x07286000
.................... #define SMF_PICLOG_HEADER_END_ADDRESS         0x07286FFF
.................... #define SMF_PICLOG_DATA_START_ADDRESS         0x07287000
.................... #define SMF_PICLOG_DATA_END_ADDRESS           0x07296FFF
.................... 
.................... #define SMF_ENVIRO_HEADER_START_ADDRESS       0x07297000
.................... #define SMF_ENVIRO_HEADER_END_ADDRESS         0x07297FFF
.................... #define SMF_ENVIRO_DATA_START_ADDRESS         0x07298000
.................... #define SMF_ENVIRO_DATA_END_ADDRESS           0x07337FFF
.................... 
.................... #define SMF_IV1_HEADER_HEADER_START_ADDRESS   0x07338000
.................... #define SMF_IV1_HEADER_HEADER_END_ADDRESS     0x07338FFF
.................... #define SMF_IV1_HEADER_DATA_START_ADDRESS     0x07339000
.................... #define SMF_IV1_HEADER_DATA_END_ADDRESS       0x073D8FFF
.................... 
.................... #define SMF_IV1_DATA_HEADER_START_ADDRESS     0x073D9000
.................... #define SMF_IV1_DATA_HEADER_END_ADDRESS       0x073D9FFF
.................... #define SMF_IV1_DATA_DATA_START_ADDRESS       0x073DA000
.................... #define SMF_IV1_DATA_DATA_END_ADDRESS         0x077D9FFF
.................... 
.................... #define SMF_IV2_HEADER_HEADER_START_ADDRESS   0x077DA000
.................... #define SMF_IV2_HEADER_HEADER_END_ADDRESS     0x077DAFFF
.................... #define SMF_IV2_HEADER_DATA_START_ADDRESS     0x077DB000
.................... #define SMF_IV2_HEADER_DATA_END_ADDRESS       0x0787AFFF
.................... 
.................... #define SMF_IV2_DATA_HEADER_START_ADDRESS     0x0787B000
.................... #define SMF_IV2_DATA_HEADER_END_ADDRESS       0x0787BFFF
.................... #define SMF_IV2_DATA_DATA_START_ADDRESS       0x0787C000
.................... #define SMF_IV2_DATA_DATA_END_ADDRESS         0x07C7BFFF
.................... 
.................... 
.................... // FLASH SIZE for CIGS
.................... #define SMF_DATA_TABLE_SIZE  4096
.................... #define SMF_PICLOG_SIZE     1310720
.................... #define SMF_ENVIRO_SIZE     1310720
.................... #define SMF_IV1_HEADER_SIZE  655360
.................... #define SMF_IV1_DATA_SIZE    4194304
.................... #define SMF_IV2_HEADER_SIZE  655360
.................... #define SMF_IV2_DATA_SIZE    4194304
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data)
.................... {   
....................    fprintf(PC, "Enqueue Flash Operation\r\n");
*
0A83E:  MOVLW  98
0A840:  MOVWF  FF6
0A842:  MOVLW  03
0A844:  MOVWF  FF7
0A846:  MOVLW  00
0A848:  MOVWF  FF8
0A84A:  CALL   22DC
....................    int8 next_tail = (flash_queue.tail_index + 1) % SMF_QUEUE_SIZE;
0A84E:  MOVLW  01
0A850:  MOVLB  1
0A852:  ADDWF  x11,W
0A854:  ANDLW  0F
0A856:  MOVWF  xE1
.................... 
....................    if(next_tail == flash_queue.head_index)
0A858:  MOVF   x10,W
0A85A:  SUBWF  xE1,W
0A85C:  BTFSC  FD8.2
0A85E:  BRA    A866
0A860:  MOVLB  0
0A862:  GOTO   A87C
0A866:  MOVLB  0
....................       printf("Flash queue is full!!!\r\n");
0A868:  MOVLW  B2
0A86A:  MOVWF  FF6
0A86C:  MOVLW  03
0A86E:  MOVWF  FF7
0A870:  MOVLW  00
0A872:  MOVWF  FF8
0A874:  CALL   22DC
0A878:  GOTO   AA9C
....................       
....................    else
....................    {
....................       flash_queue.entries[flash_queue.tail_index].mission_id = data->mission_id;
0A87C:  MOVLB  1
0A87E:  MOVF   x11,W
0A880:  MULLW  0C
0A882:  MOVF   FF3,W
0A884:  CLRF   xE3
0A886:  MOVWF  xE2
0A888:  MOVLW  50
0A88A:  ADDWF  xE2,W
0A88C:  MOVWF  01
0A88E:  MOVLW  00
0A890:  ADDWFC xE3,W
0A892:  MOVWF  03
0A894:  MOVF   01,W
0A896:  MOVWF  xE4
0A898:  MOVFF  03,1E5
0A89C:  MOVF   xDF,W
0A89E:  MOVWF  FE9
0A8A0:  MOVF   xE0,W
0A8A2:  MOVWF  FEA
0A8A4:  MOVF   FEF,W
0A8A6:  MOVWF  xE6
0A8A8:  MOVFF  1E5,FEA
0A8AC:  MOVFF  1E4,FE9
0A8B0:  MOVFF  1E6,FEF
....................       flash_queue.entries[flash_queue.tail_index].func_type  = data->func_type;
0A8B4:  MOVF   x11,W
0A8B6:  MULLW  0C
0A8B8:  MOVF   FF3,W
0A8BA:  CLRF   xE3
0A8BC:  MOVWF  xE2
0A8BE:  MOVLW  01
0A8C0:  ADDWF  xE2,W
0A8C2:  MOVWF  01
0A8C4:  MOVLW  00
0A8C6:  ADDWFC xE3,W
0A8C8:  MOVWF  03
0A8CA:  MOVF   01,W
0A8CC:  ADDLW  50
0A8CE:  MOVWF  01
0A8D0:  MOVLW  00
0A8D2:  ADDWFC 03,F
0A8D4:  MOVF   01,W
0A8D6:  MOVWF  xE2
0A8D8:  MOVFF  03,1E3
0A8DC:  MOVLW  01
0A8DE:  ADDWF  xDF,W
0A8E0:  MOVWF  FE9
0A8E2:  MOVLW  00
0A8E4:  ADDWFC xE0,W
0A8E6:  MOVWF  FEA
0A8E8:  MOVF   FEF,W
0A8EA:  MOVWF  xE4
0A8EC:  MOVFF  1E3,FEA
0A8F0:  MOVFF  1E2,FE9
0A8F4:  MOVFF  1E4,FEF
....................       flash_queue.entries[flash_queue.tail_index].write_mode = data->write_mode;
0A8F8:  MOVF   x11,W
0A8FA:  MULLW  0C
0A8FC:  MOVF   FF3,W
0A8FE:  CLRF   xE3
0A900:  MOVWF  xE2
0A902:  MOVLW  02
0A904:  ADDWF  xE2,W
0A906:  MOVWF  01
0A908:  MOVLW  00
0A90A:  ADDWFC xE3,W
0A90C:  MOVWF  03
0A90E:  MOVF   01,W
0A910:  ADDLW  50
0A912:  MOVWF  01
0A914:  MOVLW  00
0A916:  ADDWFC 03,F
0A918:  MOVF   01,W
0A91A:  MOVWF  xE2
0A91C:  MOVFF  03,1E3
0A920:  MOVLW  02
0A922:  ADDWF  xDF,W
0A924:  MOVWF  FE9
0A926:  MOVLW  00
0A928:  ADDWFC xE0,W
0A92A:  MOVWF  FEA
0A92C:  MOVF   FEF,W
0A92E:  MOVWF  xE4
0A930:  MOVFF  1E3,FEA
0A934:  MOVFF  1E2,FE9
0A938:  MOVFF  1E4,FEF
....................       flash_queue.entries[flash_queue.tail_index].source_type = data->source_type;
0A93C:  MOVF   x11,W
0A93E:  MULLW  0C
0A940:  MOVF   FF3,W
0A942:  CLRF   xE3
0A944:  MOVWF  xE2
0A946:  MOVLW  03
0A948:  ADDWF  xE2,W
0A94A:  MOVWF  01
0A94C:  MOVLW  00
0A94E:  ADDWFC xE3,W
0A950:  MOVWF  03
0A952:  MOVF   01,W
0A954:  ADDLW  50
0A956:  MOVWF  01
0A958:  MOVLW  00
0A95A:  ADDWFC 03,F
0A95C:  MOVF   01,W
0A95E:  MOVWF  xE2
0A960:  MOVFF  03,1E3
0A964:  MOVLW  03
0A966:  ADDWF  xDF,W
0A968:  MOVWF  01
0A96A:  MOVLW  00
0A96C:  ADDWFC xE0,W
0A96E:  MOVWF  03
0A970:  MOVF   01,W
0A972:  MOVWF  FE9
0A974:  MOVFF  03,FEA
0A978:  MOVLW  00
0A97A:  BTFSC  FEF.0
0A97C:  MOVLW  01
0A97E:  MOVWF  01
0A980:  BTFSS  01.0
0A982:  BRA    A98A
0A984:  MOVLB  0
0A986:  GOTO   A99A
0A98A:  MOVLB  0
0A98C:  MOVFF  1E3,FEA
0A990:  MOVFF  1E2,FE9
0A994:  BCF    FEF.0
0A996:  GOTO   A9A4
0A99A:  MOVFF  1E3,FEA
0A99E:  MOVFF  1E2,FE9
0A9A2:  BSF    FEF.0
....................       flash_queue.entries[flash_queue.tail_index].misf_start_addr = data->misf_start_addr;
0A9A4:  MOVLB  1
0A9A6:  MOVF   x11,W
0A9A8:  MULLW  0C
0A9AA:  MOVF   FF3,W
0A9AC:  CLRF   xE3
0A9AE:  MOVWF  xE2
0A9B0:  MOVLW  04
0A9B2:  ADDWF  xE2,W
0A9B4:  MOVWF  01
0A9B6:  MOVLW  00
0A9B8:  ADDWFC xE3,W
0A9BA:  MOVWF  03
0A9BC:  MOVF   01,W
0A9BE:  ADDLW  50
0A9C0:  MOVWF  01
0A9C2:  MOVLW  00
0A9C4:  ADDWFC 03,F
0A9C6:  MOVF   01,W
0A9C8:  MOVWF  xE2
0A9CA:  MOVFF  03,1E3
0A9CE:  MOVLW  04
0A9D0:  ADDWF  xDF,W
0A9D2:  MOVWF  FE9
0A9D4:  MOVLW  00
0A9D6:  ADDWFC xE0,W
0A9D8:  MOVWF  FEA
0A9DA:  MOVFF  FEF,00
0A9DE:  MOVFF  FEC,01
0A9E2:  MOVFF  FEC,02
0A9E6:  MOVFF  FEC,03
0A9EA:  MOVF   FED,F
0A9EC:  MOVF   FED,F
0A9EE:  MOVF   FED,F
0A9F0:  MOVFF  03,1E7
0A9F4:  MOVFF  02,1E6
0A9F8:  MOVFF  01,1E5
0A9FC:  MOVFF  00,1E4
0AA00:  MOVFF  1E3,FEA
0AA04:  MOVFF  1E2,FE9
0AA08:  MOVFF  1E4,FEF
0AA0C:  MOVFF  1E5,FEC
0AA10:  MOVFF  1E6,FEC
0AA14:  MOVFF  1E7,FEC
0AA18:  MOVF   FED,F
0AA1A:  MOVF   FED,F
0AA1C:  MOVF   FED,F
....................       flash_queue.entries[flash_queue.tail_index].misf_size = data->misf_size;
0AA1E:  MOVF   x11,W
0AA20:  MULLW  0C
0AA22:  MOVF   FF3,W
0AA24:  CLRF   xE3
0AA26:  MOVWF  xE2
0AA28:  MOVLW  08
0AA2A:  ADDWF  xE2,W
0AA2C:  MOVWF  01
0AA2E:  MOVLW  00
0AA30:  ADDWFC xE3,W
0AA32:  MOVWF  03
0AA34:  MOVF   01,W
0AA36:  ADDLW  50
0AA38:  MOVWF  01
0AA3A:  MOVLW  00
0AA3C:  ADDWFC 03,F
0AA3E:  MOVF   01,W
0AA40:  MOVWF  xE2
0AA42:  MOVFF  03,1E3
0AA46:  MOVLW  08
0AA48:  ADDWF  xDF,W
0AA4A:  MOVWF  FE9
0AA4C:  MOVLW  00
0AA4E:  ADDWFC xE0,W
0AA50:  MOVWF  FEA
0AA52:  MOVFF  FEF,00
0AA56:  MOVFF  FEC,01
0AA5A:  MOVFF  FEC,02
0AA5E:  MOVFF  FEC,03
0AA62:  MOVF   FED,F
0AA64:  MOVF   FED,F
0AA66:  MOVF   FED,F
0AA68:  MOVFF  03,1E7
0AA6C:  MOVFF  02,1E6
0AA70:  MOVFF  01,1E5
0AA74:  MOVFF  00,1E4
0AA78:  MOVFF  1E3,FEA
0AA7C:  MOVFF  1E2,FE9
0AA80:  MOVFF  1E4,FEF
0AA84:  MOVFF  1E5,FEC
0AA88:  MOVFF  1E6,FEC
0AA8C:  MOVFF  1E7,FEC
0AA90:  MOVF   FED,F
0AA92:  MOVF   FED,F
0AA94:  MOVF   FED,F
....................       flash_queue.tail_index = next_tail;
0AA96:  MOVFF  1E1,111
0AA9A:  MOVLB  0
....................    }
0AA9C:  RETURN 0
.................... 
.................... 
.................... }
.................... 
.................... 
.................... FlashOperationStruct *dequeue_flash_operation()
.................... {
....................    if (flash_queue.head_index == flash_queue.tail_index)
*
0FD36:  MOVLB  1
0FD38:  MOVF   x11,W
0FD3A:  SUBWF  x10,W
0FD3C:  BTFSC  FD8.2
0FD3E:  BRA    FD46
0FD40:  MOVLB  0
0FD42:  GOTO   FD68
0FD46:  MOVLB  0
....................    {
....................       printf("Flash queue is empty\r\n");
0FD48:  MOVLW  CC
0FD4A:  MOVWF  FF6
0FD4C:  MOVLW  03
0FD4E:  MOVWF  FF7
0FD50:  MOVLW  00
0FD52:  MOVWF  FF8
0FD54:  CALL   22DC
....................       return 0x00;
0FD58:  MOVLW  00
0FD5A:  MOVWF  01
0FD5C:  MOVLW  00
0FD5E:  MOVWF  02
0FD60:  GOTO   FD94
....................    }
0FD64:  GOTO   FD94
....................    else
....................    {
....................       int8 current_head = flash_queue.head_index;
0FD68:  MOVFF  110,1A1
....................       flash_queue.head_index = (flash_queue.head_index + 1) % SMF_QUEUE_SIZE;
0FD6C:  MOVLW  01
0FD6E:  MOVLB  1
0FD70:  ADDWF  x10,W
0FD72:  ANDLW  0F
0FD74:  MOVWF  x10
.................... 
.................... 
....................       return &flash_queue.entries[current_head];
0FD76:  MOVF   xA1,W
0FD78:  MULLW  0C
0FD7A:  MOVF   FF3,W
0FD7C:  CLRF   03
0FD7E:  ADDLW  50
0FD80:  MOVWF  01
0FD82:  MOVLW  00
0FD84:  ADDWFC 03,F
0FD86:  MOVF   01,W
0FD88:  MOVWF  01
0FD8A:  MOVF   03,W
0FD8C:  MOVWF  02
0FD8E:  MOVLB  0
0FD90:  GOTO   FD94
....................    }
0FD94:  GOTO   12370 (RETURN)
.................... }
.................... 
.................... int1 is_empty_flash_queue(void)
.................... {
....................    return flash_queue.head_index == flash_queue.tail_index;
*
0FC5A:  MOVLB  1
0FC5C:  MOVF   x11,W
0FC5E:  SUBWF  x10,W
0FC60:  BTFSS  FD8.2
0FC62:  BRA    FC6A
0FC64:  MOVLB  0
0FC66:  GOTO   FC72
0FC6A:  MOVLB  0
0FC6C:  MOVLW  00
0FC6E:  GOTO   FC74
0FC72:  MOVLW  01
0FC74:  MOVWF  01
0FC76:  RETURN 0
.................... }
.................... 
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id)
.................... {
....................    SmfAddressStruct mis_struct = {0};
*
113A8:  MOVLB  2
113AA:  CLRF   x0B
113AC:  CLRF   x0C
113AE:  CLRF   x0D
113B0:  CLRF   x0E
113B2:  CLRF   x0F
113B4:  CLRF   x10
113B6:  CLRF   x11
113B8:  CLRF   x12
.................... 
....................    if (mission_id == CIGS_DATA_TABLE)
113BA:  MOVF   x0A,F
113BC:  BTFSC  FD8.2
113BE:  BRA    113C6
113C0:  MOVLB  0
113C2:  GOTO   113EA
113C6:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_DATA_TABLE_START_ADDRESS;
113C8:  MOVLW  06
113CA:  MOVLB  2
113CC:  MOVWF  x0E
113CE:  MOVLW  AA
113D0:  MOVWF  x0D
113D2:  CLRF   x0C
113D4:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_DATA_TABLE_END_ADDRESS;
113D6:  MOVLW  06
113D8:  MOVWF  x12
113DA:  MOVLW  AA
113DC:  MOVWF  x11
113DE:  MOVLW  0F
113E0:  MOVWF  x10
113E2:  SETF   x0F
113E4:  MOVLB  0
....................    }
113E6:  GOTO   11526
....................    else if (mission_id == CIGS_PICLOG_DATA)
113EA:  MOVLB  2
113EC:  DECFSZ x0A,W
113EE:  BRA    113F4
113F0:  BRA    113FA
113F2:  MOVLB  0
113F4:  MOVLB  0
113F6:  GOTO   11420
113FA:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
113FC:  MOVLW  06
113FE:  MOVLB  2
11400:  MOVWF  x0E
11402:  MOVLW  AA
11404:  MOVWF  x0D
11406:  MOVLW  10
11408:  MOVWF  x0C
1140A:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
1140C:  MOVLW  06
1140E:  MOVWF  x12
11410:  MOVLW  AB
11412:  MOVWF  x11
11414:  MOVLW  0F
11416:  MOVWF  x10
11418:  SETF   x0F
1141A:  MOVLB  0
....................    }
1141C:  GOTO   11526
....................    else if (mission_id == CIGS_ENVIRO_DATA)
11420:  MOVLB  2
11422:  MOVF   x0A,W
11424:  SUBLW  02
11426:  BTFSC  FD8.2
11428:  BRA    11430
1142A:  MOVLB  0
1142C:  GOTO   11456
11430:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
11432:  MOVLW  06
11434:  MOVLB  2
11436:  MOVWF  x0E
11438:  MOVLW  AA
1143A:  MOVWF  x0D
1143C:  MOVLW  10
1143E:  MOVWF  x0C
11440:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
11442:  MOVLW  06
11444:  MOVWF  x12
11446:  MOVLW  AB
11448:  MOVWF  x11
1144A:  MOVLW  0F
1144C:  MOVWF  x10
1144E:  SETF   x0F
11450:  MOVLB  0
....................    }
11452:  GOTO   11526
....................    else if (mission_id == CIGS_IV1_HEADER)
11456:  MOVLB  2
11458:  MOVF   x0A,W
1145A:  SUBLW  03
1145C:  BTFSC  FD8.2
1145E:  BRA    11466
11460:  MOVLB  0
11462:  GOTO   1148C
11466:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV1_HEADER_START_ADDRESS;
11468:  MOVLW  06
1146A:  MOVLB  2
1146C:  MOVWF  x0E
1146E:  MOVLW  B5
11470:  MOVWF  x0D
11472:  MOVLW  10
11474:  MOVWF  x0C
11476:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_IV1_HEADER_END_ADDRESS;
11478:  MOVLW  06
1147A:  MOVWF  x12
1147C:  MOVLW  BF
1147E:  MOVWF  x11
11480:  MOVLW  0F
11482:  MOVWF  x10
11484:  SETF   x0F
11486:  MOVLB  0
....................    }
11488:  GOTO   11526
....................    else if (mission_id == CIGS_IV1_DATA)
1148C:  MOVLB  2
1148E:  MOVF   x0A,W
11490:  SUBLW  04
11492:  BTFSC  FD8.2
11494:  BRA    1149C
11496:  MOVLB  0
11498:  GOTO   114C0
1149C:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV1_DATA_START_ADDRESS;
1149E:  MOVLW  06
114A0:  MOVLB  2
114A2:  MOVWF  x0E
114A4:  MOVLW  BF
114A6:  MOVWF  x0D
114A8:  MOVLW  10
114AA:  MOVWF  x0C
114AC:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_IV1_DATA_END_ADDRESS;
114AE:  MOVLW  06
114B0:  MOVWF  x12
114B2:  SETF   x11
114B4:  MOVLW  0F
114B6:  MOVWF  x10
114B8:  SETF   x0F
114BA:  MOVLB  0
....................    }
114BC:  GOTO   11526
....................       else if (mission_id == CIGS_IV2_HEADER)
114C0:  MOVLB  2
114C2:  MOVF   x0A,W
114C4:  SUBLW  05
114C6:  BTFSC  FD8.2
114C8:  BRA    114D0
114CA:  MOVLB  0
114CC:  GOTO   114F4
114D0:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV2_HEADER_START_ADDRESS;
114D2:  MOVLW  06
114D4:  MOVLB  2
114D6:  MOVWF  x0E
114D8:  SETF   x0D
114DA:  MOVLW  10
114DC:  MOVWF  x0C
114DE:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_IV2_HEADER_END_ADDRESS;
114E0:  MOVLW  07
114E2:  MOVWF  x12
114E4:  MOVLW  09
114E6:  MOVWF  x11
114E8:  MOVLW  0F
114EA:  MOVWF  x10
114EC:  SETF   x0F
114EE:  MOVLB  0
....................    }
114F0:  GOTO   11526
....................    else if (mission_id == CIGS_IV2_DATA)
114F4:  MOVLB  2
114F6:  MOVF   x0A,W
114F8:  SUBLW  06
114FA:  BTFSC  FD8.2
114FC:  BRA    11504
114FE:  MOVLB  0
11500:  GOTO   11526
11504:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV2_DATA_START_ADDRESS;
11506:  MOVLW  07
11508:  MOVLB  2
1150A:  MOVWF  x0E
1150C:  MOVLW  09
1150E:  MOVWF  x0D
11510:  MOVLW  10
11512:  MOVWF  x0C
11514:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_IV2_DATA_END_ADDRESS;
11516:  MOVLW  07
11518:  MOVWF  x12
1151A:  MOVLW  49
1151C:  MOVWF  x11
1151E:  MOVLW  0F
11520:  MOVWF  x10
11522:  SETF   x0F
11524:  MOVLB  0
....................    }
....................    return mis_struct;
11526:  MOVLW  0B
11528:  MOVWF  01
1152A:  MOVLW  02
1152C:  MOVWF  02
1152E:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "../lib/communication/communication.c"
.................... // #include "communication.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #include "mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
0555E:  MOVLB  1
05560:  CLRF   xA2
05562:  CLRF   xA3
05564:  CLRF   xA4
05566:  CLRF   xA5
05568:  CLRF   xA6
0556A:  CLRF   xA7
0556C:  CLRF   xA8
0556E:  CLRF   xA9
05570:  CLRF   xAA
05572:  CLRF   xAB
05574:  CLRF   xAC
05576:  CLRF   xAD
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
05578:  MOVLW  E4
0557A:  MOVWF  FF6
0557C:  MOVLW  03
0557E:  MOVWF  FF7
05580:  MOVLW  00
05582:  MOVWF  FF8
05584:  MOVLB  0
05586:  CALL   22DC
....................    fprintf(PC, "\t[BOSS] >>> ");
0558A:  MOVLW  04
0558C:  MOVWF  FF6
0558E:  MOVLW  04
05590:  MOVWF  FF7
05592:  MOVLW  00
05594:  MOVWF  FF8
05596:  CALL   22DC
....................    for (int8 i = 0; i < receive_signal_size; i++)
0559A:  MOVLB  1
0559C:  CLRF   xAE
0559E:  MOVLB  0
055A0:  MOVLB  1
055A2:  MOVF   xA1,W
055A4:  SUBWF  xAE,W
055A6:  BTFSS  FD8.0
055A8:  BRA    55B0
055AA:  MOVLB  0
055AC:  GOTO   55EC
055B0:  MOVLB  0
....................       fprintf(PC, "%X ", receive_signal[i]);
055B2:  MOVLB  1
055B4:  MOVF   xAE,W
055B6:  ADDWF  x9F,W
055B8:  MOVWF  FE9
055BA:  MOVLW  00
055BC:  ADDWFC xA0,W
055BE:  MOVWF  FEA
055C0:  MOVFF  FEF,1B5
055C4:  MOVFF  1B5,9E8
055C8:  MOVLW  37
055CA:  MOVLB  9
055CC:  MOVWF  xE9
055CE:  MOVLB  0
055D0:  CALL   2542
055D4:  MOVLW  20
055D6:  BTFSS  FA6.6
055D8:  GOTO   55D6
055DC:  MOVLB  E
055DE:  MOVWF  xF9
055E0:  MOVLB  0
055E2:  MOVLB  1
055E4:  INCF   xAE,F
055E6:  MOVLB  0
055E8:  GOTO   55A0
....................    fprintf(PC, "\r\n");
055EC:  MOVLW  0D
055EE:  BTFSS  FA6.6
055F0:  GOTO   55EE
055F4:  MOVLB  E
055F6:  MOVWF  xF9
055F8:  MOVLW  0A
055FA:  MOVLB  0
055FC:  BTFSS  FA6.6
055FE:  GOTO   55FC
05602:  MOVLB  E
05604:  MOVWF  xF9
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
05606:  MOVFF  1A0,1B6
0560A:  MOVFF  19F,1B5
0560E:  MOVFF  1A1,1B7
05612:  MOVLB  0
05614:  GOTO   5246
05618:  MOVFF  01,1AF
....................    if (frame_start_position == -1)
0561C:  MOVLB  1
0561E:  MOVF   xAF,W
05620:  SUBLW  FF
05622:  BTFSC  FD8.2
05624:  BRA    562C
05626:  MOVLB  0
05628:  GOTO   563A
0562C:  MOVLB  0
....................       return command;
0562E:  MOVLW  A2
05630:  MOVWF  01
05632:  MOVLW  01
05634:  MOVWF  02
05636:  GOTO   575C
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
0563A:  MOVLB  1
0563C:  MOVF   xAF,W
0563E:  ADDWF  x9F,W
05640:  MOVWF  01
05642:  MOVLW  00
05644:  ADDWFC xA0,W
05646:  MOVWF  03
05648:  MOVF   01,W
0564A:  MOVWF  xB0
0564C:  MOVFF  03,1B1
05650:  MOVF   xB0,W
05652:  MOVWF  FE9
05654:  MOVF   xB1,W
05656:  MOVWF  FEA
05658:  MOVF   FEF,W
0565A:  ANDLW  0F
0565C:  MOVWF  xB2
0565E:  MOVFF  1B2,1B5
05662:  MOVLB  0
05664:  GOTO   52EE
05668:  MOVFF  01,1B3
....................    if (content_size == -1)
0566C:  MOVLB  1
0566E:  MOVF   xB3,W
05670:  SUBLW  FF
05672:  BTFSC  FD8.2
05674:  BRA    567C
05676:  MOVLB  0
05678:  GOTO   568A
0567C:  MOVLB  0
....................       return command;
0567E:  MOVLW  A2
05680:  MOVWF  01
05682:  MOVLW  01
05684:  MOVWF  02
05686:  GOTO   575C
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
0568A:  MOVLB  1
0568C:  MOVF   xAF,W
0568E:  SUBWF  xA1,W
05690:  MOVWF  xB4
....................    
....................    if (!check_crc(frame, receive_frame_size))
05692:  MOVFF  1B1,1B6
05696:  MOVFF  1B0,1B5
0569A:  MOVFF  1B4,1B7
0569E:  MOVLB  0
056A0:  GOTO   53AE
056A4:  MOVF   01,F
056A6:  BTFSS  FD8.2
056A8:  GOTO   56B8
....................       return command;
056AC:  MOVLW  A2
056AE:  MOVWF  01
056B0:  MOVLW  01
056B2:  MOVWF  02
056B4:  GOTO   575C
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
056B8:  MOVLB  1
056BA:  MOVF   xB0,W
056BC:  MOVWF  FE9
056BE:  MOVF   xB1,W
056C0:  MOVWF  FEA
056C2:  MOVF   FEF,W
056C4:  ANDLW  F0
056C6:  MOVWF  00
056C8:  SWAPF  00,W
056CA:  MOVWF  xB5
056CC:  MOVLW  0F
056CE:  ANDWF  xB5,F
056D0:  MOVFF  1B5,1B6
056D4:  MOVLB  0
056D6:  GOTO   549E
056DA:  MOVF   01,F
056DC:  BTFSS  FD8.2
056DE:  GOTO   56EE
....................       return command;
056E2:  MOVLW  A2
056E4:  MOVWF  01
056E6:  MOVLW  01
056E8:  MOVWF  02
056EA:  GOTO   575C
.................... 
....................    command.frame_id = frame_id;
056EE:  MOVFF  1B2,1A2
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
056F2:  MOVLW  01
056F4:  MOVLB  1
056F6:  ADDWF  xB0,W
056F8:  MOVWF  01
056FA:  MOVLW  00
056FC:  ADDWFC xB1,W
056FE:  MOVWF  03
05700:  MOVF   01,W
05702:  MOVWF  xB5
05704:  MOVFF  03,1B6
05708:  MOVLW  02
0570A:  SUBWF  xB4,W
0570C:  MOVWF  xB7
0570E:  MOVLW  01
05710:  MOVWF  FEA
05712:  MOVLW  A5
05714:  MOVWF  FE9
05716:  MOVFF  1B6,FE2
0571A:  MOVFF  1B5,FE1
0571E:  MOVF   xB7,W
05720:  MOVWF  01
05722:  BTFSS  FD8.2
05724:  BRA    572C
05726:  MOVLB  0
05728:  GOTO   5738
0572C:  MOVLB  0
0572E:  MOVFF  FE6,FEE
05732:  DECFSZ 01,F
05734:  GOTO   572E
....................    command.size = receive_frame_size-2;
05738:  MOVLW  02
0573A:  MOVLB  1
0573C:  SUBWF  xB4,W
0573E:  MOVWF  xA3
....................    command.is_exist = TRUE;
05740:  BSF    xA4.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
05742:  MOVLW  12
05744:  MOVWF  FF6
05746:  MOVLW  04
05748:  MOVWF  FF7
0574A:  MOVLW  00
0574C:  MOVWF  FF8
0574E:  MOVLB  0
05750:  CALL   22DC
....................    return command;
05754:  MOVLW  A2
05756:  MOVWF  01
05758:  MOVLW  01
0575A:  MOVWF  02
0575C:  GOTO   12DA4 (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
05246:  MOVLB  1
05248:  CLRF   xB8
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
0524A:  CLRF   xB8
0524C:  MOVLB  0
0524E:  MOVLW  01
05250:  MOVLB  1
05252:  SUBWF  xB7,W
05254:  SUBWF  xB8,W
05256:  BTFSS  FD8.0
05258:  BRA    5260
0525A:  MOVLB  0
0525C:  GOTO   5298
05260:  MOVLB  0
....................       if(receive_signal[i] == SFD)
05262:  MOVLB  1
05264:  MOVF   xB8,W
05266:  ADDWF  xB5,W
05268:  MOVWF  FE9
0526A:  MOVLW  00
0526C:  ADDWFC xB6,W
0526E:  MOVWF  FEA
05270:  MOVF   FEF,W
05272:  SUBLW  AA
05274:  BTFSC  FD8.2
05276:  BRA    527E
05278:  MOVLB  0
0527A:  GOTO   528E
0527E:  MOVLB  0
....................          return i+1;
05280:  MOVLW  01
05282:  MOVLB  1
05284:  ADDWF  xB8,W
05286:  MOVWF  01
05288:  MOVLB  0
0528A:  GOTO   52EA
0528E:  MOVLB  1
05290:  INCF   xB8,F
05292:  MOVLB  0
05294:  GOTO   524E
....................    if (receive_signal[i] == SFD)
05298:  MOVLB  1
0529A:  MOVF   xB8,W
0529C:  ADDWF  xB5,W
0529E:  MOVWF  FE9
052A0:  MOVLW  00
052A2:  ADDWFC xB6,W
052A4:  MOVWF  FEA
052A6:  MOVF   FEF,W
052A8:  SUBLW  AA
052AA:  BTFSC  FD8.2
052AC:  BRA    52B4
052AE:  MOVLB  0
052B0:  GOTO   52D2
052B4:  MOVLB  0
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
052B6:  MOVLW  2E
052B8:  MOVWF  FF6
052BA:  MOVLW  04
052BC:  MOVWF  FF7
052BE:  MOVLW  00
052C0:  MOVWF  FF8
052C2:  CALL   22DC
....................       return -1;
052C6:  MOVLW  FF
052C8:  MOVWF  01
052CA:  GOTO   52EA
....................    }
052CE:  GOTO   52EA
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
052D2:  MOVLW  44
052D4:  MOVWF  FF6
052D6:  MOVLW  04
052D8:  MOVWF  FF7
052DA:  MOVLW  00
052DC:  MOVWF  FF8
052DE:  CALL   22DC
....................       return -1;
052E2:  MOVLW  FF
052E4:  MOVWF  01
052E6:  GOTO   52EA
....................    }
052EA:  GOTO   5618 (RETURN)
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
052EE:  MOVLB  1
052F0:  CLRF   xB6
052F2:  MOVLB  0
052F4:  MOVLB  1
052F6:  MOVF   xB6,W
052F8:  SUBLW  03
052FA:  BTFSC  FD8.0
052FC:  BRA    5304
052FE:  MOVLB  0
05300:  GOTO   5362
05304:  MOVLB  0
....................       if (frame_id == frame_ids[i].id)
05306:  BCF    FD8.0
05308:  MOVLB  1
0530A:  RLCF   xB6,W
0530C:  CLRF   xB8
0530E:  MOVWF  xB7
05310:  MOVLW  1A
05312:  ADDWF  xB7,W
05314:  MOVWF  FE9
05316:  MOVLW  01
05318:  ADDWFC xB8,W
0531A:  MOVWF  FEA
0531C:  MOVF   FEF,W
0531E:  SUBWF  xB5,W
05320:  BTFSC  FD8.2
05322:  BRA    532A
05324:  MOVLB  0
05326:  GOTO   5358
0532A:  MOVLB  0
....................          return frame_ids[i].length;
0532C:  BCF    FD8.0
0532E:  MOVLB  1
05330:  RLCF   xB6,W
05332:  CLRF   xB8
05334:  MOVWF  xB7
05336:  MOVLW  01
05338:  ADDWF  xB7,W
0533A:  MOVWF  01
0533C:  MOVLW  00
0533E:  ADDWFC xB8,W
05340:  MOVWF  03
05342:  MOVF   01,W
05344:  ADDLW  1A
05346:  MOVWF  FE9
05348:  MOVLW  01
0534A:  ADDWFC 03,W
0534C:  MOVWF  FEA
0534E:  MOVF   FEF,W
05350:  MOVWF  01
05352:  MOVLB  0
05354:  GOTO   53A8
05358:  MOVLB  1
0535A:  INCF   xB6,F
0535C:  MOVLB  0
0535E:  GOTO   52F4
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
05362:  MOVLW  56
05364:  MOVWF  FF6
05366:  MOVLW  04
05368:  MOVWF  FF7
0536A:  MOVLW  00
0536C:  MOVWF  FF8
0536E:  MOVLW  1F
05370:  MOVLB  9
05372:  MOVWF  xC2
05374:  MOVLB  0
05376:  CALL   2312
0537A:  MOVFF  1B5,9E8
0537E:  MOVLW  37
05380:  MOVLB  9
05382:  MOVWF  xE9
05384:  MOVLB  0
05386:  CALL   2542
0538A:  MOVLW  0D
0538C:  BTFSS  FA6.6
0538E:  GOTO   538C
05392:  MOVLB  E
05394:  MOVWF  xF9
05396:  MOVLW  0A
05398:  MOVLB  0
0539A:  BTFSS  FA6.6
0539C:  GOTO   539A
053A0:  MOVLB  E
053A2:  MOVWF  xF9
....................    return -1;
053A4:  MOVLW  FF
053A6:  MOVWF  01
053A8:  MOVLB  0
053AA:  GOTO   5668 (RETURN)
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
053AE:  MOVLW  01
053B0:  MOVLB  1
053B2:  SUBWF  xB7,W
053B4:  ADDWF  xB5,W
053B6:  MOVWF  FE9
053B8:  MOVLW  00
053BA:  ADDWFC xB6,W
053BC:  MOVWF  FEA
053BE:  MOVFF  FEF,1B8
053C2:  MOVLW  01
053C4:  SUBWF  xB7,W
053C6:  MOVWF  xBA
053C8:  MOVFF  1B6,AEB
053CC:  MOVFF  1B5,AEA
053D0:  MOVFF  1BA,AEC
053D4:  MOVLB  0
053D6:  CALL   30EA
053DA:  MOVFF  01,1B9
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
053DE:  MOVLB  1
053E0:  MOVF   xB9,W
053E2:  SUBWF  xB8,W
053E4:  BTFSC  FD8.2
053E6:  BRA    53EE
053E8:  MOVLB  0
053EA:  GOTO   53FC
053EE:  MOVLB  0
....................       return TRUE;
053F0:  MOVLW  01
053F2:  MOVWF  01
053F4:  GOTO   549A
053F8:  GOTO   549A
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
053FC:  MOVLW  7A
053FE:  MOVWF  FF6
05400:  MOVLW  04
05402:  MOVWF  FF7
05404:  MOVLW  00
05406:  MOVWF  FF8
05408:  CALL   22DC
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
0540C:  MOVLW  8C
0540E:  MOVWF  FF6
05410:  MOVLW  04
05412:  MOVWF  FF7
05414:  MOVLW  00
05416:  MOVWF  FF8
05418:  MOVLW  13
0541A:  MOVLB  9
0541C:  MOVWF  xC2
0541E:  MOVLB  0
05420:  CALL   2312
05424:  MOVFF  1B8,9E8
05428:  MOVLW  37
0542A:  MOVLB  9
0542C:  MOVWF  xE9
0542E:  MOVLB  0
05430:  CALL   2542
05434:  MOVLW  0D
05436:  BTFSS  FA6.6
05438:  GOTO   5436
0543C:  MOVLB  E
0543E:  MOVWF  xF9
05440:  MOVLW  0A
05442:  MOVLB  0
05444:  BTFSS  FA6.6
05446:  GOTO   5444
0544A:  MOVLB  E
0544C:  MOVWF  xF9
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
0544E:  MOVLW  A4
05450:  MOVWF  FF6
05452:  MOVLW  04
05454:  MOVWF  FF7
05456:  MOVLW  00
05458:  MOVWF  FF8
0545A:  MOVLW  13
0545C:  MOVLB  9
0545E:  MOVWF  xC2
05460:  MOVLB  0
05462:  CALL   2312
05466:  MOVFF  1B9,9E8
0546A:  MOVLW  37
0546C:  MOVLB  9
0546E:  MOVWF  xE9
05470:  MOVLB  0
05472:  CALL   2542
05476:  MOVLW  0D
05478:  BTFSS  FA6.6
0547A:  GOTO   5478
0547E:  MOVLB  E
05480:  MOVWF  xF9
05482:  MOVLW  0A
05484:  MOVLB  0
05486:  BTFSS  FA6.6
05488:  GOTO   5486
0548C:  MOVLB  E
0548E:  MOVWF  xF9
....................       return FALSE;
05490:  MOVLW  00
05492:  MOVWF  01
05494:  MOVLB  0
05496:  GOTO   549A
....................    }
0549A:  GOTO   56A4 (RETURN)
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
0549E:  MOVLB  1
054A0:  MOVF   xB6,W
054A2:  SUBLW  0C
054A4:  BTFSC  FD8.2
054A6:  BRA    54AE
054A8:  MOVLB  0
054AA:  GOTO   54BC
054AE:  MOVLB  0
....................       return TRUE;
054B0:  MOVLW  01
054B2:  MOVWF  01
054B4:  GOTO   555A
054B8:  GOTO   555A
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
054BC:  MOVLW  BC
054BE:  MOVWF  FF6
054C0:  MOVLW  04
054C2:  MOVWF  FF7
054C4:  MOVLW  00
054C6:  MOVWF  FF8
054C8:  CALL   22DC
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
054CC:  MOVLW  DE
054CE:  MOVWF  FF6
054D0:  MOVLW  04
054D2:  MOVWF  FF7
054D4:  MOVLW  00
054D6:  MOVWF  FF8
054D8:  MOVLW  13
054DA:  MOVLB  9
054DC:  MOVWF  xC2
054DE:  MOVLB  0
054E0:  CALL   2312
054E4:  MOVFF  1B6,9E8
054E8:  MOVLW  37
054EA:  MOVLB  9
054EC:  MOVWF  xE9
054EE:  MOVLB  0
054F0:  CALL   2542
054F4:  MOVLW  0D
054F6:  BTFSS  FA6.6
054F8:  GOTO   54F6
054FC:  MOVLB  E
054FE:  MOVWF  xF9
05500:  MOVLW  0A
05502:  MOVLB  0
05504:  BTFSS  FA6.6
05506:  GOTO   5504
0550A:  MOVLB  E
0550C:  MOVWF  xF9
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
0550E:  MOVLW  F6
05510:  MOVWF  FF6
05512:  MOVLW  04
05514:  MOVWF  FF7
05516:  MOVLW  00
05518:  MOVWF  FF8
0551A:  MOVLW  13
0551C:  MOVLB  9
0551E:  MOVWF  xC2
05520:  MOVLB  0
05522:  CALL   2312
05526:  MOVLW  0C
05528:  MOVLB  9
0552A:  MOVWF  xE8
0552C:  MOVLW  37
0552E:  MOVWF  xE9
05530:  MOVLB  0
05532:  CALL   2542
05536:  MOVLW  0D
05538:  BTFSS  FA6.6
0553A:  GOTO   5538
0553E:  MOVLB  E
05540:  MOVWF  xF9
05542:  MOVLW  0A
05544:  MOVLB  0
05546:  BTFSS  FA6.6
05548:  GOTO   5546
0554C:  MOVLB  E
0554E:  MOVWF  xF9
....................       return FALSE;  
05550:  MOVLW  00
05552:  MOVWF  01
05554:  MOVLB  0
05556:  GOTO   555A
....................    }
0555A:  GOTO   56DA (RETURN)
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
0586A:  MOVLW  AA
0586C:  MOVLB  1
0586E:  MOVWF  xE3
....................    data[1] = (BOSS_PIC << 4) | frame_id;
05870:  MOVF   xDF,W
05872:  IORLW  50
05874:  MOVWF  xE4
....................    memcpy(&data[2], content, size);
05876:  MOVLW  01
05878:  MOVWF  FEA
0587A:  MOVLW  E5
0587C:  MOVWF  FE9
0587E:  MOVFF  1E1,FE2
05882:  MOVFF  1E0,FE1
05886:  MOVF   xE2,W
05888:  MOVWF  01
0588A:  BTFSS  FD8.2
0588C:  BRA    5894
0588E:  MOVLB  0
05890:  GOTO   58A0
05894:  MOVLB  0
05896:  MOVFF  FE6,FEE
0589A:  DECFSZ 01,F
0589C:  GOTO   5896
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
058A0:  MOVLW  02
058A2:  MOVLB  1
058A4:  ADDWF  xE2,W
058A6:  MOVWF  xF3
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
058A8:  CLRF   03
058AA:  MOVF   xF3,W
058AC:  ADDLW  E3
058AE:  MOVWF  01
058B0:  MOVLW  01
058B2:  ADDWFC 03,F
058B4:  MOVF   01,W
058B6:  MOVWF  xF5
058B8:  MOVFF  03,1F6
058BC:  MOVLW  01
058BE:  SUBWF  xF3,W
058C0:  MOVWF  xF7
058C2:  MOVLW  01
058C4:  MOVLB  A
058C6:  MOVWF  xEB
058C8:  MOVLW  E4
058CA:  MOVWF  xEA
058CC:  MOVFF  1F7,AEC
058D0:  MOVLB  0
058D2:  CALL   30EA
058D6:  MOVFF  1F6,FEA
058DA:  MOVFF  1F5,FE9
058DE:  MOVFF  01,FEF
....................    int8 data_size = payload_size + 1; // '1' is for CRC
058E2:  MOVLW  01
058E4:  MOVLB  1
058E6:  ADDWF  xF3,W
058E8:  MOVWF  xF4
....................    
....................    transmit(data, data_size);
058EA:  MOVLW  01
058EC:  MOVWF  xF6
058EE:  MOVLW  E3
058F0:  MOVWF  xF5
058F2:  MOVFF  1F4,1F7
058F6:  MOVLB  0
058F8:  GOTO   57AC
058FC:  RETURN 0
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
057AC:  MOVLB  1
057AE:  CLRF   xF8
057B0:  MOVLB  0
057B2:  MOVLB  1
057B4:  MOVF   xF7,W
057B6:  SUBWF  xF8,W
057B8:  BTFSS  FD8.0
057BA:  BRA    57C2
057BC:  MOVLB  0
057BE:  GOTO   57E8
057C2:  MOVLB  0
....................       fputc(data[i], BOSS);
057C4:  MOVLB  1
057C6:  MOVF   xF8,W
057C8:  ADDWF  xF5,W
057CA:  MOVWF  FE9
057CC:  MOVLW  00
057CE:  ADDWFC xF6,W
057D0:  MOVWF  FEA
057D2:  MOVFF  FEF,1FA
057D6:  MOVF   xFA,W
057D8:  MOVLB  0
057DA:  GOTO   579C
057DE:  MOVLB  1
057E0:  INCF   xF8,F
057E2:  MOVLB  0
057E4:  GOTO   57B2
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
057E8:  MOVLW  0E
057EA:  MOVWF  FF6
057EC:  MOVLW  05
057EE:  MOVWF  FF7
057F0:  MOVLW  00
057F2:  MOVWF  FF8
057F4:  CALL   22DC
....................    for(int i = 0; i < data_size; i++)
057F8:  MOVLB  1
057FA:  CLRF   xF9
057FC:  MOVLB  0
057FE:  MOVLB  1
05800:  MOVF   xF7,W
05802:  SUBWF  xF9,W
05804:  BTFSS  FD8.0
05806:  BRA    580E
05808:  MOVLB  0
0580A:  GOTO   584A
0580E:  MOVLB  0
....................       fprintf(PC, "%X ", data[i]);
05810:  MOVLB  1
05812:  MOVF   xF9,W
05814:  ADDWF  xF5,W
05816:  MOVWF  FE9
05818:  MOVLW  00
0581A:  ADDWFC xF6,W
0581C:  MOVWF  FEA
0581E:  MOVFF  FEF,1FA
05822:  MOVFF  1FA,9E8
05826:  MOVLW  37
05828:  MOVLB  9
0582A:  MOVWF  xE9
0582C:  MOVLB  0
0582E:  CALL   2542
05832:  MOVLW  20
05834:  BTFSS  FA6.6
05836:  GOTO   5834
0583A:  MOVLB  E
0583C:  MOVWF  xF9
0583E:  MOVLB  0
05840:  MOVLB  1
05842:  INCF   xF9,F
05844:  MOVLB  0
05846:  GOTO   57FE
....................    fprintf(PC, "\r\n");
0584A:  MOVLW  0D
0584C:  BTFSS  FA6.6
0584E:  GOTO   584C
05852:  MOVLB  E
05854:  MOVWF  xF9
05856:  MOVLW  0A
05858:  MOVLB  0
0585A:  BTFSS  FA6.6
0585C:  GOTO   585A
05860:  MOVLB  E
05862:  MOVWF  xF9
05864:  MOVLB  0
05866:  GOTO   58FC (RETURN)
.................... }
.................... 
.................... #include "../lib/communication/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    return command;
.................... }
.................... 
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
058FE:  MOVLW  0F
05900:  MOVLB  1
05902:  MOVWF  xDF
05904:  CLRF   xE1
05906:  CLRF   xE0
05908:  CLRF   xE2
0590A:  MOVLB  0
0590C:  CALL   586A
05910:  RETURN 0
.................... }
.................... 
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
0A7E6:  MOVLW  03
0A7E8:  MOVLB  1
0A7EA:  MOVWF  xDF
0A7EC:  CLRF   xE1
0A7EE:  MOVLW  4C
0A7F0:  MOVWF  xE0
0A7F2:  MOVLW  04
0A7F4:  MOVWF  xE2
0A7F6:  MOVLB  0
0A7F8:  CALL   586A
0A7FC:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (boss_receive_buffer_size > 0)
0A7FE:  MOVF   4A,F
0A800:  BTFSC  FD8.2
0A802:  GOTO   A83A
....................    {
....................       clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
0A806:  MOVLB  1
0A808:  CLRF   xE0
0A80A:  MOVLW  2A
0A80C:  MOVWF  xDF
0A80E:  CLRF   xE2
0A810:  MOVLW  4A
0A812:  MOVWF  xE1
0A814:  MOVLB  0
0A816:  CALL   5760
....................       fprintf(PC, "\r\n");
0A81A:  MOVLW  0D
0A81C:  BTFSS  FA6.6
0A81E:  GOTO   A81C
0A822:  MOVLB  E
0A824:  MOVWF  xF9
0A826:  MOVLW  0A
0A828:  MOVLB  0
0A82A:  BTFSS  FA6.6
0A82C:  GOTO   A82A
0A830:  MOVLB  E
0A832:  MOVWF  xF9
....................       transmit_status();
0A834:  MOVLB  0
0A836:  CALL   A7E6
....................    }
0A83A:  GOTO   AB88 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... // コア機能実装ファイル
.................... #include "domain/cigs_iv.c"
.................... #include "cigs_iv.h"      
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/cigs_config.h"      
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../device_driver/ad7490_driver.h"  
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../device_driver/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "cigs_flash.h"               
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/mission_tools.h"   
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../hal/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... #INT_TIMER1 
.................... static void TIMER1_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... void set_current_sec(unsigned int32 new_sec);
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void sweep_with_print()
*
0CBB6:  MOVLW  03
0CBB8:  MOVLB  1
0CBBA:  MOVWF  xB0
0CBBC:  CLRF   xAF
0CBBE:  MOVLW  07
0CBC0:  MOVWF  xB2
0CBC2:  MOVLW  E0
0CBC4:  MOVWF  xB1
.................... {
....................     unsigned int16 curr_threshold = 0x300;
....................     unsigned int16 curr_limit = 0x7E0;
.................... 
....................     // Enable both CIGS ports
....................     connect_port1();
0CBC6:  MOVLB  0
0CBC8:  CALL   5212
....................     connect_port2();
0CBCC:  CALL   521A
....................     mcp4901_1_write(0); 
0CBD0:  MOVLB  9
0CBD2:  CLRF   xDD
0CBD4:  CLRF   xDC
0CBD6:  MOVLB  0
0CBD8:  CALL   2872
....................     mcp4901_2_write(0);
0CBDC:  MOVLB  9
0CBDE:  CLRF   xDD
0CBE0:  CLRF   xDC
0CBE2:  MOVLB  0
0CBE4:  CALL   28B0
....................     delay_ms(100);
0CBE8:  MOVLW  64
0CBEA:  MOVLB  B
0CBEC:  MOVWF  x02
0CBEE:  MOVLB  0
0CBF0:  CALL   22AE
....................     
....................     // Init Port1
....................     sweep_debug_config_t port1 = {0};
0CBF4:  MOVLB  1
0CBF6:  CLRF   xB3
0CBF8:  CLRF   xB4
0CBFA:  CLRF   xB5
0CBFC:  CLRF   xB6
0CBFE:  CLRF   xB7
0CC00:  CLRF   xB8
0CC02:  CLRF   xB9
0CC04:  CLRF   xBA
0CC06:  CLRF   xBB
0CC08:  CLRF   xBC
0CC0A:  CLRF   xBD
0CC0C:  CLRF   xBE
0CC0E:  CLRF   xBF
0CC10:  CLRF   xC0
0CC12:  CLRF   xC1
0CC14:  CLRF   xC2
0CC16:  CLRF   xC3
0CC18:  CLRF   xC4
0CC1A:  CLRF   xC5
0CC1C:  CLRF   xC6
0CC1E:  CLRF   xC7
0CC20:  CLRF   xC8
0CC22:  CLRF   xC9
0CC24:  CLRF   xCA
0CC26:  CLRF   xCB
0CC28:  CLRF   xCC
0CC2A:  CLRF   xCD
0CC2C:  CLRF   xCE
0CC2E:  CLRF   xCF
0CC30:  CLRF   xD0
0CC32:  CLRF   xD1
0CC34:  CLRF   xD2
0CC36:  CLRF   xD3
0CC38:  CLRF   xD4
0CC3A:  CLRF   xD5
0CC3C:  CLRF   xD6
0CC3E:  CLRF   xD7
0CC40:  CLRF   xD8
0CC42:  CLRF   xD9
0CC44:  CLRF   xDA
0CC46:  CLRF   xDB
0CC48:  CLRF   xDC
0CC4A:  CLRF   xDD
0CC4C:  CLRF   xDE
0CC4E:  CLRF   xDF
0CC50:  CLRF   xE0
0CC52:  CLRF   xE1
0CC54:  CLRF   xE2
0CC56:  CLRF   xE3
0CC58:  CLRF   xE4
0CC5A:  CLRF   xE5
0CC5C:  CLRF   xE6
0CC5E:  CLRF   xE7
0CC60:  CLRF   xE8
0CC62:  CLRF   xE9
0CC64:  CLRF   xEA
0CC66:  CLRF   xEB
0CC68:  CLRF   xEC
0CC6A:  CLRF   xED
0CC6C:  CLRF   xEE
0CC6E:  CLRF   xEF
0CC70:  CLRF   xF0
0CC72:  CLRF   xF1
0CC74:  CLRF   xF2
0CC76:  CLRF   xF3
0CC78:  CLRF   xF4
0CC7A:  CLRF   xF5
0CC7C:  CLRF   xF6
0CC7E:  CLRF   xF7
0CC80:  CLRF   xF8
0CC82:  CLRF   xF9
0CC84:  CLRF   xFA
0CC86:  CLRF   xFB
0CC88:  CLRF   xFC
0CC8A:  CLRF   xFD
0CC8C:  CLRF   xFE
0CC8E:  CLRF   xFF
0CC90:  MOVLB  2
0CC92:  CLRF   x00
0CC94:  CLRF   x01
0CC96:  CLRF   x02
0CC98:  CLRF   x03
0CC9A:  CLRF   x04
0CC9C:  CLRF   x05
0CC9E:  CLRF   x06
0CCA0:  CLRF   x07
0CCA2:  CLRF   x08
0CCA4:  CLRF   x09
0CCA6:  CLRF   x0A
0CCA8:  CLRF   x0B
0CCAA:  CLRF   x0C
0CCAC:  CLRF   x0D
0CCAE:  CLRF   x0E
0CCB0:  CLRF   x0F
0CCB2:  CLRF   x10
0CCB4:  CLRF   x11
0CCB6:  CLRF   x12
0CCB8:  CLRF   x13
0CCBA:  CLRF   x14
0CCBC:  CLRF   x15
0CCBE:  CLRF   x16
0CCC0:  CLRF   x17
0CCC2:  CLRF   x18
0CCC4:  CLRF   x19
0CCC6:  CLRF   x1A
0CCC8:  CLRF   x1B
0CCCA:  CLRF   x1C
0CCCC:  CLRF   x1D
0CCCE:  CLRF   x1E
0CCD0:  CLRF   x1F
0CCD2:  CLRF   x20
0CCD4:  CLRF   x21
0CCD6:  CLRF   x22
0CCD8:  CLRF   x23
0CCDA:  CLRF   x24
0CCDC:  CLRF   x25
0CCDE:  CLRF   x26
0CCE0:  CLRF   x27
0CCE2:  CLRF   x28
0CCE4:  CLRF   x29
0CCE6:  CLRF   x2A
0CCE8:  CLRF   x2B
0CCEA:  CLRF   x2C
0CCEC:  CLRF   x2D
0CCEE:  CLRF   x2E
0CCF0:  CLRF   x2F
0CCF2:  CLRF   x30
0CCF4:  CLRF   x31
0CCF6:  CLRF   x32
0CCF8:  CLRF   x33
0CCFA:  CLRF   x34
0CCFC:  CLRF   x35
0CCFE:  CLRF   x36
0CD00:  CLRF   x37
0CD02:  CLRF   x38
0CD04:  CLRF   x39
0CD06:  CLRF   x3A
0CD08:  CLRF   x3B
0CD0A:  CLRF   x3C
0CD0C:  CLRF   x3D
0CD0E:  CLRF   x3E
0CD10:  CLRF   x3F
0CD12:  CLRF   x40
0CD14:  CLRF   x41
0CD16:  CLRF   x42
0CD18:  CLRF   x43
0CD1A:  CLRF   x44
0CD1C:  CLRF   x45
0CD1E:  CLRF   x46
0CD20:  CLRF   x47
0CD22:  CLRF   x48
0CD24:  CLRF   x49
0CD26:  CLRF   x4A
0CD28:  CLRF   x4B
0CD2A:  CLRF   x4C
0CD2C:  CLRF   x4D
0CD2E:  CLRF   x4E
0CD30:  CLRF   x4F
0CD32:  CLRF   x50
0CD34:  CLRF   x51
0CD36:  CLRF   x52
0CD38:  CLRF   x53
0CD3A:  CLRF   x54
0CD3C:  CLRF   x55
0CD3E:  CLRF   x56
0CD40:  CLRF   x57
0CD42:  CLRF   x58
0CD44:  CLRF   x59
0CD46:  CLRF   x5A
0CD48:  CLRF   x5B
0CD4A:  CLRF   x5C
0CD4C:  CLRF   x5D
0CD4E:  CLRF   x5E
0CD50:  CLRF   x5F
0CD52:  CLRF   x60
0CD54:  CLRF   x61
0CD56:  CLRF   x62
0CD58:  CLRF   x63
0CD5A:  CLRF   x64
0CD5C:  CLRF   x65
0CD5E:  CLRF   x66
0CD60:  CLRF   x67
0CD62:  CLRF   x68
0CD64:  CLRF   x69
0CD66:  CLRF   x6A
0CD68:  CLRF   x6B
0CD6A:  CLRF   x6C
0CD6C:  CLRF   x6D
0CD6E:  CLRF   x6E
0CD70:  CLRF   x6F
0CD72:  CLRF   x70
0CD74:  CLRF   x71
0CD76:  CLRF   x72
0CD78:  CLRF   x73
0CD7A:  CLRF   x74
0CD7C:  CLRF   x75
0CD7E:  CLRF   x76
0CD80:  CLRF   x77
0CD82:  CLRF   x78
0CD84:  CLRF   x79
0CD86:  CLRF   x7A
0CD88:  CLRF   x7B
0CD8A:  CLRF   x7C
0CD8C:  CLRF   x7D
0CD8E:  CLRF   x7E
0CD90:  CLRF   x7F
0CD92:  CLRF   x80
0CD94:  CLRF   x81
0CD96:  CLRF   x82
0CD98:  CLRF   x83
0CD9A:  CLRF   x84
0CD9C:  CLRF   x85
0CD9E:  CLRF   x86
0CDA0:  CLRF   x87
0CDA2:  CLRF   x88
0CDA4:  CLRF   x89
0CDA6:  CLRF   x8A
0CDA8:  CLRF   x8B
0CDAA:  CLRF   x8C
0CDAC:  CLRF   x8D
0CDAE:  CLRF   x8E
0CDB0:  CLRF   x8F
0CDB2:  CLRF   x90
0CDB4:  CLRF   x91
0CDB6:  CLRF   x92
0CDB8:  CLRF   x93
0CDBA:  CLRF   x94
0CDBC:  CLRF   x95
0CDBE:  CLRF   x96
0CDC0:  CLRF   x97
0CDC2:  CLRF   x98
0CDC4:  CLRF   x99
0CDC6:  CLRF   x9A
0CDC8:  CLRF   x9B
0CDCA:  CLRF   x9C
0CDCC:  CLRF   x9D
0CDCE:  CLRF   x9E
0CDD0:  CLRF   x9F
0CDD2:  CLRF   xA0
0CDD4:  CLRF   xA1
0CDD6:  CLRF   xA2
0CDD8:  CLRF   xA3
0CDDA:  CLRF   xA4
0CDDC:  CLRF   xA5
0CDDE:  CLRF   xA6
0CDE0:  CLRF   xA7
0CDE2:  CLRF   xA8
0CDE4:  CLRF   xA9
0CDE6:  CLRF   xAA
0CDE8:  CLRF   xAB
0CDEA:  CLRF   xAC
0CDEC:  CLRF   xAD
0CDEE:  CLRF   xAE
0CDF0:  CLRF   xAF
0CDF2:  CLRF   xB0
0CDF4:  CLRF   xB1
0CDF6:  CLRF   xB2
0CDF8:  CLRF   xB3
0CDFA:  CLRF   xB4
0CDFC:  CLRF   xB5
0CDFE:  CLRF   xB6
0CE00:  CLRF   xB7
0CE02:  CLRF   xB8
0CE04:  CLRF   xB9
0CE06:  CLRF   xBA
0CE08:  CLRF   xBB
0CE0A:  CLRF   xBC
0CE0C:  CLRF   xBD
0CE0E:  CLRF   xBE
0CE10:  CLRF   xBF
0CE12:  CLRF   xC0
0CE14:  CLRF   xC1
0CE16:  CLRF   xC2
0CE18:  CLRF   xC3
0CE1A:  CLRF   xC4
0CE1C:  CLRF   xC5
0CE1E:  CLRF   xC6
0CE20:  CLRF   xC7
0CE22:  CLRF   xC8
0CE24:  CLRF   xC9
0CE26:  CLRF   xCA
0CE28:  CLRF   xCB
0CE2A:  CLRF   xCC
0CE2C:  CLRF   xCD
0CE2E:  CLRF   xCE
0CE30:  CLRF   xCF
0CE32:  CLRF   xD0
0CE34:  CLRF   xD1
0CE36:  CLRF   xD2
0CE38:  CLRF   xD3
0CE3A:  CLRF   xD4
0CE3C:  CLRF   xD5
0CE3E:  CLRF   xD6
0CE40:  CLRF   xD7
0CE42:  CLRF   xD8
0CE44:  CLRF   xD9
0CE46:  CLRF   xDA
0CE48:  CLRF   xDB
0CE4A:  CLRF   xDC
0CE4C:  CLRF   xDD
0CE4E:  CLRF   xDE
0CE50:  CLRF   xDF
0CE52:  CLRF   xE0
0CE54:  CLRF   xE1
0CE56:  CLRF   xE2
0CE58:  CLRF   xE3
0CE5A:  CLRF   xE4
0CE5C:  CLRF   xE5
0CE5E:  CLRF   xE6
0CE60:  CLRF   xE7
0CE62:  CLRF   xE8
0CE64:  CLRF   xE9
0CE66:  CLRF   xEA
0CE68:  CLRF   xEB
0CE6A:  CLRF   xEC
0CE6C:  CLRF   xED
0CE6E:  CLRF   xEE
0CE70:  CLRF   xEF
0CE72:  CLRF   xF0
0CE74:  CLRF   xF1
0CE76:  CLRF   xF2
0CE78:  CLRF   xF3
0CE7A:  CLRF   xF4
0CE7C:  CLRF   xF5
0CE7E:  CLRF   xF6
0CE80:  CLRF   xF7
0CE82:  CLRF   xF8
0CE84:  CLRF   xF9
0CE86:  CLRF   xFA
0CE88:  CLRF   xFB
0CE8A:  CLRF   xFC
0CE8C:  CLRF   xFD
0CE8E:  CLRF   xFE
0CE90:  CLRF   xFF
0CE92:  MOVLB  3
0CE94:  CLRF   x00
0CE96:  CLRF   x01
0CE98:  CLRF   x02
0CE9A:  CLRF   x03
0CE9C:  CLRF   x04
0CE9E:  CLRF   x05
0CEA0:  CLRF   x06
0CEA2:  CLRF   x07
0CEA4:  CLRF   x08
0CEA6:  CLRF   x09
0CEA8:  CLRF   x0A
0CEAA:  CLRF   x0B
0CEAC:  CLRF   x0C
0CEAE:  CLRF   x0D
0CEB0:  CLRF   x0E
0CEB2:  CLRF   x0F
0CEB4:  CLRF   x10
0CEB6:  CLRF   x11
0CEB8:  CLRF   x12
0CEBA:  CLRF   x13
0CEBC:  CLRF   x14
0CEBE:  CLRF   x15
0CEC0:  CLRF   x16
0CEC2:  CLRF   x17
0CEC4:  CLRF   x18
0CEC6:  CLRF   x19
0CEC8:  CLRF   x1A
0CECA:  CLRF   x1B
0CECC:  CLRF   x1C
0CECE:  CLRF   x1D
0CED0:  CLRF   x1E
0CED2:  CLRF   x1F
0CED4:  CLRF   x20
0CED6:  CLRF   x21
0CED8:  CLRF   x22
0CEDA:  CLRF   x23
0CEDC:  CLRF   x24
0CEDE:  CLRF   x25
0CEE0:  CLRF   x26
0CEE2:  CLRF   x27
0CEE4:  CLRF   x28
0CEE6:  CLRF   x29
0CEE8:  CLRF   x2A
0CEEA:  CLRF   x2B
0CEEC:  CLRF   x2C
0CEEE:  CLRF   x2D
0CEF0:  CLRF   x2E
0CEF2:  CLRF   x2F
0CEF4:  CLRF   x30
0CEF6:  CLRF   x31
0CEF8:  CLRF   x32
0CEFA:  CLRF   x33
0CEFC:  CLRF   x34
0CEFE:  CLRF   x35
0CF00:  CLRF   x36
0CF02:  CLRF   x37
0CF04:  CLRF   x38
0CF06:  CLRF   x39
0CF08:  CLRF   x3A
0CF0A:  CLRF   x3B
0CF0C:  CLRF   x3C
0CF0E:  CLRF   x3D
0CF10:  CLRF   x3E
0CF12:  CLRF   x3F
0CF14:  CLRF   x40
0CF16:  CLRF   x41
0CF18:  CLRF   x42
0CF1A:  CLRF   x43
0CF1C:  CLRF   x44
0CF1E:  CLRF   x45
0CF20:  CLRF   x46
0CF22:  CLRF   x47
0CF24:  CLRF   x48
0CF26:  CLRF   x49
0CF28:  CLRF   x4A
0CF2A:  CLRF   x4B
0CF2C:  CLRF   x4C
0CF2E:  CLRF   x4D
0CF30:  CLRF   x4E
0CF32:  CLRF   x4F
0CF34:  CLRF   x50
0CF36:  CLRF   x51
0CF38:  CLRF   x52
0CF3A:  CLRF   x53
0CF3C:  CLRF   x54
0CF3E:  CLRF   x55
0CF40:  CLRF   x56
0CF42:  CLRF   x57
0CF44:  CLRF   x58
0CF46:  CLRF   x59
0CF48:  CLRF   x5A
0CF4A:  CLRF   x5B
0CF4C:  CLRF   x5C
0CF4E:  CLRF   x5D
0CF50:  CLRF   x5E
0CF52:  CLRF   x5F
0CF54:  CLRF   x60
0CF56:  CLRF   x61
0CF58:  CLRF   x62
0CF5A:  CLRF   x63
0CF5C:  CLRF   x64
0CF5E:  CLRF   x65
0CF60:  CLRF   x66
0CF62:  CLRF   x67
0CF64:  CLRF   x68
0CF66:  CLRF   x69
0CF68:  CLRF   x6A
0CF6A:  CLRF   x6B
0CF6C:  CLRF   x6C
0CF6E:  CLRF   x6D
0CF70:  CLRF   x6E
0CF72:  CLRF   x6F
0CF74:  CLRF   x70
0CF76:  CLRF   x71
0CF78:  CLRF   x72
0CF7A:  CLRF   x73
0CF7C:  CLRF   x74
0CF7E:  CLRF   x75
0CF80:  CLRF   x76
0CF82:  CLRF   x77
0CF84:  CLRF   x78
0CF86:  CLRF   x79
0CF88:  CLRF   x7A
0CF8A:  CLRF   x7B
0CF8C:  CLRF   x7C
0CF8E:  CLRF   x7D
0CF90:  CLRF   x7E
0CF92:  CLRF   x7F
0CF94:  CLRF   x80
0CF96:  CLRF   x81
0CF98:  CLRF   x82
0CF9A:  CLRF   x83
0CF9C:  CLRF   x84
0CF9E:  CLRF   x85
0CFA0:  CLRF   x86
0CFA2:  CLRF   x87
0CFA4:  CLRF   x88
0CFA6:  CLRF   x89
0CFA8:  CLRF   x8A
0CFAA:  CLRF   x8B
0CFAC:  CLRF   x8C
0CFAE:  CLRF   x8D
0CFB0:  CLRF   x8E
0CFB2:  CLRF   x8F
0CFB4:  CLRF   x90
0CFB6:  CLRF   x91
0CFB8:  CLRF   x92
0CFBA:  CLRF   x93
0CFBC:  CLRF   x94
0CFBE:  CLRF   x95
0CFC0:  CLRF   x96
0CFC2:  CLRF   x97
0CFC4:  CLRF   x98
0CFC6:  CLRF   x99
0CFC8:  CLRF   x9A
0CFCA:  CLRF   x9B
0CFCC:  CLRF   x9C
0CFCE:  CLRF   x9D
0CFD0:  CLRF   x9E
0CFD2:  CLRF   x9F
0CFD4:  CLRF   xA0
0CFD6:  CLRF   xA1
0CFD8:  CLRF   xA2
0CFDA:  CLRF   xA3
0CFDC:  CLRF   xA4
0CFDE:  CLRF   xA5
0CFE0:  CLRF   xA6
0CFE2:  CLRF   xA7
0CFE4:  CLRF   xA8
0CFE6:  CLRF   xA9
0CFE8:  CLRF   xAA
0CFEA:  CLRF   xAB
0CFEC:  CLRF   xAC
0CFEE:  CLRF   xAD
0CFF0:  CLRF   xAE
0CFF2:  CLRF   xAF
0CFF4:  CLRF   xB0
0CFF6:  CLRF   xB1
0CFF8:  CLRF   xB2
0CFFA:  CLRF   xB3
0CFFC:  CLRF   xB4
0CFFE:  CLRF   xB5
0D000:  CLRF   xB6
0D002:  CLRF   xB7
0D004:  CLRF   xB8
0D006:  CLRF   xB9
0D008:  CLRF   xBA
0D00A:  CLRF   xBB
0D00C:  CLRF   xBC
0D00E:  CLRF   xBD
0D010:  CLRF   xBE
0D012:  CLRF   xBF
0D014:  CLRF   xC0
0D016:  CLRF   xC1
0D018:  CLRF   xC2
0D01A:  CLRF   xC3
0D01C:  CLRF   xC4
0D01E:  CLRF   xC5
0D020:  CLRF   xC6
0D022:  CLRF   xC7
0D024:  CLRF   xC8
0D026:  CLRF   xC9
0D028:  CLRF   xCA
0D02A:  CLRF   xCB
0D02C:  CLRF   xCC
0D02E:  CLRF   xCD
0D030:  CLRF   xCE
0D032:  CLRF   xCF
0D034:  CLRF   xD0
0D036:  CLRF   xD1
0D038:  CLRF   xD2
0D03A:  CLRF   xD3
0D03C:  CLRF   xD4
0D03E:  CLRF   xD5
0D040:  CLRF   xD6
0D042:  CLRF   xD7
0D044:  CLRF   xD8
0D046:  CLRF   xD9
0D048:  CLRF   xDA
0D04A:  CLRF   xDB
0D04C:  CLRF   xDC
0D04E:  CLRF   xDD
0D050:  CLRF   xDE
0D052:  CLRF   xDF
0D054:  CLRF   xE0
0D056:  CLRF   xE1
0D058:  CLRF   xE2
0D05A:  CLRF   xE3
0D05C:  CLRF   xE4
0D05E:  CLRF   xE5
0D060:  CLRF   xE6
0D062:  CLRF   xE7
0D064:  CLRF   xE8
0D066:  CLRF   xE9
0D068:  CLRF   xEA
0D06A:  CLRF   xEB
0D06C:  CLRF   xEC
0D06E:  CLRF   xED
0D070:  CLRF   xEE
0D072:  CLRF   xEF
0D074:  CLRF   xF0
0D076:  CLRF   xF1
0D078:  CLRF   xF2
0D07A:  CLRF   xF3
0D07C:  CLRF   xF4
0D07E:  CLRF   xF5
0D080:  CLRF   xF6
0D082:  CLRF   xF7
0D084:  CLRF   xF8
0D086:  CLRF   xF9
0D088:  CLRF   xFA
0D08A:  CLRF   xFB
0D08C:  CLRF   xFC
0D08E:  CLRF   xFD
0D090:  CLRF   xFE
0D092:  CLRF   xFF
0D094:  MOVLB  4
0D096:  CLRF   x00
0D098:  CLRF   x01
0D09A:  CLRF   x02
0D09C:  CLRF   x03
0D09E:  CLRF   x04
0D0A0:  CLRF   x05
0D0A2:  CLRF   x06
0D0A4:  CLRF   x07
0D0A6:  CLRF   x08
0D0A8:  CLRF   x09
0D0AA:  CLRF   x0A
0D0AC:  CLRF   x0B
0D0AE:  CLRF   x0C
0D0B0:  CLRF   x0D
0D0B2:  CLRF   x0E
0D0B4:  CLRF   x0F
0D0B6:  CLRF   x10
0D0B8:  CLRF   x11
0D0BA:  CLRF   x12
0D0BC:  CLRF   x13
0D0BE:  CLRF   x14
0D0C0:  CLRF   x15
0D0C2:  CLRF   x16
0D0C4:  CLRF   x17
0D0C6:  CLRF   x18
0D0C8:  CLRF   x19
0D0CA:  CLRF   x1A
0D0CC:  CLRF   x1B
0D0CE:  CLRF   x1C
0D0D0:  CLRF   x1D
0D0D2:  CLRF   x1E
0D0D4:  CLRF   x1F
0D0D6:  CLRF   x20
0D0D8:  CLRF   x21
0D0DA:  CLRF   x22
0D0DC:  CLRF   x23
0D0DE:  CLRF   x24
0D0E0:  CLRF   x25
0D0E2:  CLRF   x26
0D0E4:  CLRF   x27
0D0E6:  CLRF   x28
0D0E8:  CLRF   x29
0D0EA:  CLRF   x2A
0D0EC:  CLRF   x2B
0D0EE:  CLRF   x2C
0D0F0:  CLRF   x2D
0D0F2:  CLRF   x2E
0D0F4:  CLRF   x2F
0D0F6:  CLRF   x30
0D0F8:  CLRF   x31
0D0FA:  CLRF   x32
0D0FC:  CLRF   x33
0D0FE:  CLRF   x34
0D100:  CLRF   x35
0D102:  CLRF   x36
0D104:  CLRF   x37
0D106:  CLRF   x38
0D108:  CLRF   x39
0D10A:  CLRF   x3A
0D10C:  CLRF   x3B
0D10E:  CLRF   x3C
0D110:  CLRF   x3D
0D112:  CLRF   x3E
0D114:  CLRF   x3F
0D116:  CLRF   x40
0D118:  CLRF   x41
0D11A:  CLRF   x42
0D11C:  CLRF   x43
0D11E:  CLRF   x44
0D120:  CLRF   x45
0D122:  CLRF   x46
0D124:  CLRF   x47
0D126:  CLRF   x48
0D128:  CLRF   x49
0D12A:  CLRF   x4A
0D12C:  CLRF   x4B
0D12E:  CLRF   x4C
0D130:  CLRF   x4D
0D132:  CLRF   x4E
0D134:  CLRF   x4F
0D136:  CLRF   x50
0D138:  CLRF   x51
0D13A:  CLRF   x52
0D13C:  CLRF   x53
0D13E:  CLRF   x54
0D140:  CLRF   x55
0D142:  CLRF   x56
0D144:  CLRF   x57
0D146:  CLRF   x58
0D148:  CLRF   x59
0D14A:  CLRF   x5A
0D14C:  CLRF   x5B
0D14E:  CLRF   x5C
0D150:  CLRF   x5D
0D152:  CLRF   x5E
0D154:  CLRF   x5F
0D156:  CLRF   x60
0D158:  CLRF   x61
0D15A:  CLRF   x62
0D15C:  CLRF   x63
0D15E:  CLRF   x64
0D160:  CLRF   x65
0D162:  CLRF   x66
0D164:  CLRF   x67
0D166:  CLRF   x68
0D168:  CLRF   x69
0D16A:  CLRF   x6A
0D16C:  CLRF   x6B
0D16E:  CLRF   x6C
0D170:  CLRF   x6D
0D172:  CLRF   x6E
0D174:  CLRF   x6F
0D176:  CLRF   x70
0D178:  CLRF   x71
0D17A:  CLRF   x72
0D17C:  CLRF   x73
0D17E:  CLRF   x74
0D180:  CLRF   x75
0D182:  CLRF   x76
0D184:  CLRF   x77
0D186:  CLRF   x78
0D188:  CLRF   x79
0D18A:  CLRF   x7A
0D18C:  CLRF   x7B
0D18E:  CLRF   x7C
0D190:  CLRF   x7D
0D192:  CLRF   x7E
0D194:  CLRF   x7F
0D196:  CLRF   x80
0D198:  CLRF   x81
0D19A:  CLRF   x82
0D19C:  CLRF   x83
0D19E:  CLRF   x84
0D1A0:  CLRF   x85
0D1A2:  CLRF   x86
0D1A4:  CLRF   x87
0D1A6:  CLRF   x88
0D1A8:  CLRF   x89
0D1AA:  CLRF   x8A
0D1AC:  CLRF   x8B
0D1AE:  CLRF   x8C
0D1B0:  CLRF   x8D
0D1B2:  CLRF   x8E
0D1B4:  CLRF   x8F
0D1B6:  CLRF   x90
0D1B8:  CLRF   x91
0D1BA:  CLRF   x92
0D1BC:  CLRF   x93
0D1BE:  CLRF   x94
0D1C0:  CLRF   x95
0D1C2:  CLRF   x96
0D1C4:  CLRF   x97
0D1C6:  CLRF   x98
0D1C8:  CLRF   x99
0D1CA:  CLRF   x9A
0D1CC:  CLRF   x9B
0D1CE:  CLRF   x9C
0D1D0:  CLRF   x9D
0D1D2:  CLRF   x9E
0D1D4:  CLRF   x9F
0D1D6:  CLRF   xA0
0D1D8:  CLRF   xA1
0D1DA:  CLRF   xA2
0D1DC:  CLRF   xA3
0D1DE:  CLRF   xA4
0D1E0:  CLRF   xA5
0D1E2:  CLRF   xA6
0D1E4:  CLRF   xA7
0D1E6:  CLRF   xA8
0D1E8:  CLRF   xA9
0D1EA:  CLRF   xAA
0D1EC:  CLRF   xAB
0D1EE:  CLRF   xAC
0D1F0:  CLRF   xAD
0D1F2:  CLRF   xAE
0D1F4:  CLRF   xAF
0D1F6:  CLRF   xB0
0D1F8:  CLRF   xB1
0D1FA:  CLRF   xB2
0D1FC:  CLRF   xB3
0D1FE:  CLRF   xB4
0D200:  CLRF   xB5
0D202:  CLRF   xB6
0D204:  CLRF   xB7
0D206:  CLRF   xB8
0D208:  CLRF   xB9
0D20A:  CLRF   xBA
0D20C:  CLRF   xBB
0D20E:  CLRF   xBC
0D210:  CLRF   xBD
0D212:  CLRF   xBE
0D214:  CLRF   xBF
0D216:  CLRF   xC0
0D218:  CLRF   xC1
0D21A:  CLRF   xC2
0D21C:  CLRF   xC3
0D21E:  CLRF   xC4
0D220:  CLRF   xC5
0D222:  CLRF   xC6
0D224:  CLRF   xC7
0D226:  CLRF   xC8
0D228:  CLRF   xC9
0D22A:  CLRF   xCA
0D22C:  CLRF   xCB
0D22E:  CLRF   xCC
0D230:  CLRF   xCD
0D232:  CLRF   xCE
0D234:  CLRF   xCF
0D236:  CLRF   xD0
0D238:  CLRF   xD1
0D23A:  CLRF   xD2
0D23C:  CLRF   xD3
0D23E:  CLRF   xD4
0D240:  CLRF   xD5
0D242:  CLRF   xD6
0D244:  CLRF   xD7
0D246:  CLRF   xD8
0D248:  CLRF   xD9
0D24A:  CLRF   xDA
0D24C:  CLRF   xDB
0D24E:  CLRF   xDC
0D250:  CLRF   xDD
0D252:  CLRF   xDE
0D254:  CLRF   xDF
0D256:  CLRF   xE0
0D258:  CLRF   xE1
0D25A:  CLRF   xE2
0D25C:  CLRF   xE3
0D25E:  CLRF   xE4
0D260:  CLRF   xE5
0D262:  CLRF   xE6
0D264:  CLRF   xE7
0D266:  CLRF   xE8
0D268:  CLRF   xE9
0D26A:  CLRF   xEA
0D26C:  CLRF   xEB
0D26E:  CLRF   xEC
0D270:  CLRF   xED
0D272:  CLRF   xEE
0D274:  CLRF   xEF
0D276:  CLRF   xF0
0D278:  CLRF   xF1
0D27A:  CLRF   xF2
0D27C:  CLRF   xF3
0D27E:  CLRF   xF4
0D280:  CLRF   xF5
0D282:  CLRF   xF6
0D284:  CLRF   xF7
0D286:  CLRF   xF8
0D288:  CLRF   xF9
0D28A:  CLRF   xFA
0D28C:  CLRF   xFB
0D28E:  CLRF   xFC
0D290:  CLRF   xFD
0D292:  CLRF   xFE
0D294:  CLRF   xFF
0D296:  MOVLB  5
0D298:  CLRF   x00
0D29A:  CLRF   x01
0D29C:  CLRF   x02
0D29E:  CLRF   x03
0D2A0:  CLRF   x04
0D2A2:  CLRF   x05
0D2A4:  CLRF   x06
0D2A6:  CLRF   x07
0D2A8:  CLRF   x08
0D2AA:  CLRF   x09
0D2AC:  CLRF   x0A
0D2AE:  CLRF   x0B
0D2B0:  CLRF   x0C
0D2B2:  CLRF   x0D
0D2B4:  CLRF   x0E
0D2B6:  CLRF   x0F
0D2B8:  CLRF   x10
0D2BA:  CLRF   x11
0D2BC:  CLRF   x12
0D2BE:  CLRF   x13
0D2C0:  CLRF   x14
0D2C2:  CLRF   x15
0D2C4:  CLRF   x16
0D2C6:  CLRF   x17
0D2C8:  CLRF   x18
0D2CA:  CLRF   x19
0D2CC:  CLRF   x1A
0D2CE:  CLRF   x1B
0D2D0:  CLRF   x1C
0D2D2:  CLRF   x1D
0D2D4:  CLRF   x1E
0D2D6:  CLRF   x1F
0D2D8:  CLRF   x20
0D2DA:  CLRF   x21
0D2DC:  CLRF   x22
0D2DE:  CLRF   x23
0D2E0:  CLRF   x24
0D2E2:  CLRF   x25
0D2E4:  CLRF   x26
0D2E6:  CLRF   x27
0D2E8:  CLRF   x28
0D2EA:  CLRF   x29
0D2EC:  CLRF   x2A
0D2EE:  CLRF   x2B
0D2F0:  CLRF   x2C
0D2F2:  CLRF   x2D
0D2F4:  CLRF   x2E
0D2F6:  CLRF   x2F
0D2F8:  CLRF   x30
0D2FA:  CLRF   x31
0D2FC:  CLRF   x32
0D2FE:  CLRF   x33
0D300:  CLRF   x34
0D302:  CLRF   x35
0D304:  CLRF   x36
0D306:  CLRF   x37
0D308:  CLRF   x38
0D30A:  CLRF   x39
0D30C:  CLRF   x3A
0D30E:  CLRF   x3B
0D310:  CLRF   x3C
0D312:  CLRF   x3D
0D314:  CLRF   x3E
0D316:  CLRF   x3F
0D318:  CLRF   x40
0D31A:  CLRF   x41
0D31C:  CLRF   x42
0D31E:  CLRF   x43
0D320:  CLRF   x44
0D322:  CLRF   x45
0D324:  CLRF   x46
0D326:  CLRF   x47
0D328:  CLRF   x48
0D32A:  CLRF   x49
0D32C:  CLRF   x4A
0D32E:  CLRF   x4B
0D330:  CLRF   x4C
0D332:  CLRF   x4D
0D334:  CLRF   x4E
0D336:  CLRF   x4F
0D338:  CLRF   x50
0D33A:  CLRF   x51
0D33C:  CLRF   x52
0D33E:  CLRF   x53
0D340:  CLRF   x54
0D342:  CLRF   x55
0D344:  CLRF   x56
0D346:  CLRF   x57
0D348:  CLRF   x58
0D34A:  CLRF   x59
0D34C:  CLRF   x5A
0D34E:  CLRF   x5B
0D350:  CLRF   x5C
0D352:  CLRF   x5D
0D354:  CLRF   x5E
0D356:  CLRF   x5F
0D358:  CLRF   x60
0D35A:  CLRF   x61
0D35C:  CLRF   x62
0D35E:  CLRF   x63
0D360:  CLRF   x64
0D362:  CLRF   x65
0D364:  CLRF   x66
0D366:  CLRF   x67
0D368:  CLRF   x68
0D36A:  CLRF   x69
0D36C:  CLRF   x6A
0D36E:  CLRF   x6B
0D370:  CLRF   x6C
0D372:  CLRF   x6D
0D374:  CLRF   x6E
0D376:  CLRF   x6F
0D378:  CLRF   x70
0D37A:  CLRF   x71
0D37C:  CLRF   x72
0D37E:  CLRF   x73
0D380:  CLRF   x74
0D382:  CLRF   x75
0D384:  CLRF   x76
0D386:  CLRF   x77
0D388:  CLRF   x78
0D38A:  CLRF   x79
0D38C:  CLRF   x7A
0D38E:  CLRF   x7B
0D390:  CLRF   x7C
0D392:  CLRF   x7D
0D394:  CLRF   x7E
0D396:  CLRF   x7F
0D398:  CLRF   x80
0D39A:  CLRF   x81
0D39C:  CLRF   x82
0D39E:  CLRF   x83
0D3A0:  CLRF   x84
0D3A2:  CLRF   x85
0D3A4:  CLRF   x86
0D3A6:  CLRF   x87
0D3A8:  CLRF   x88
0D3AA:  CLRF   x89
0D3AC:  CLRF   x8A
0D3AE:  CLRF   x8B
0D3B0:  CLRF   x8C
0D3B2:  CLRF   x8D
0D3B4:  CLRF   x8E
0D3B6:  CLRF   x8F
0D3B8:  CLRF   x90
0D3BA:  CLRF   x91
0D3BC:  CLRF   x92
0D3BE:  CLRF   x93
0D3C0:  CLRF   x94
0D3C2:  CLRF   x95
0D3C4:  CLRF   x96
0D3C6:  CLRF   x97
0D3C8:  CLRF   x98
0D3CA:  CLRF   x99
0D3CC:  CLRF   x9A
0D3CE:  CLRF   x9B
0D3D0:  CLRF   x9C
0D3D2:  CLRF   x9D
0D3D4:  CLRF   x9E
0D3D6:  CLRF   x9F
0D3D8:  CLRF   xA0
0D3DA:  CLRF   xA1
0D3DC:  CLRF   xA2
0D3DE:  CLRF   xA3
0D3E0:  CLRF   xA4
0D3E2:  CLRF   xA5
0D3E4:  CLRF   xA6
0D3E6:  CLRF   xA7
0D3E8:  CLRF   xA8
0D3EA:  CLRF   xA9
0D3EC:  CLRF   xAA
0D3EE:  CLRF   xAB
0D3F0:  CLRF   xAC
0D3F2:  CLRF   xAD
0D3F4:  CLRF   xAE
0D3F6:  CLRF   xAF
0D3F8:  CLRF   xB0
0D3FA:  CLRF   xB1
0D3FC:  CLRF   xB2
....................     port1.port_num = 1;
0D3FE:  MOVLW  01
0D400:  MOVLB  1
0D402:  MOVWF  xB3
....................     port1.sweep_step = 0;
0D404:  CLRF   xB5
0D406:  CLRF   xB4
....................     port1.active = 1;
0D408:  MOVLB  5
0D40A:  BSF    xB2.0
.................... 
....................     // Init Port2
....................     sweep_debug_config_t port2 = {0};
0D40C:  CLRF   xB3
0D40E:  CLRF   xB4
0D410:  CLRF   xB5
0D412:  CLRF   xB6
0D414:  CLRF   xB7
0D416:  CLRF   xB8
0D418:  CLRF   xB9
0D41A:  CLRF   xBA
0D41C:  CLRF   xBB
0D41E:  CLRF   xBC
0D420:  CLRF   xBD
0D422:  CLRF   xBE
0D424:  CLRF   xBF
0D426:  CLRF   xC0
0D428:  CLRF   xC1
0D42A:  CLRF   xC2
0D42C:  CLRF   xC3
0D42E:  CLRF   xC4
0D430:  CLRF   xC5
0D432:  CLRF   xC6
0D434:  CLRF   xC7
0D436:  CLRF   xC8
0D438:  CLRF   xC9
0D43A:  CLRF   xCA
0D43C:  CLRF   xCB
0D43E:  CLRF   xCC
0D440:  CLRF   xCD
0D442:  CLRF   xCE
0D444:  CLRF   xCF
0D446:  CLRF   xD0
0D448:  CLRF   xD1
0D44A:  CLRF   xD2
0D44C:  CLRF   xD3
0D44E:  CLRF   xD4
0D450:  CLRF   xD5
0D452:  CLRF   xD6
0D454:  CLRF   xD7
0D456:  CLRF   xD8
0D458:  CLRF   xD9
0D45A:  CLRF   xDA
0D45C:  CLRF   xDB
0D45E:  CLRF   xDC
0D460:  CLRF   xDD
0D462:  CLRF   xDE
0D464:  CLRF   xDF
0D466:  CLRF   xE0
0D468:  CLRF   xE1
0D46A:  CLRF   xE2
0D46C:  CLRF   xE3
0D46E:  CLRF   xE4
0D470:  CLRF   xE5
0D472:  CLRF   xE6
0D474:  CLRF   xE7
0D476:  CLRF   xE8
0D478:  CLRF   xE9
0D47A:  CLRF   xEA
0D47C:  CLRF   xEB
0D47E:  CLRF   xEC
0D480:  CLRF   xED
0D482:  CLRF   xEE
0D484:  CLRF   xEF
0D486:  CLRF   xF0
0D488:  CLRF   xF1
0D48A:  CLRF   xF2
0D48C:  CLRF   xF3
0D48E:  CLRF   xF4
0D490:  CLRF   xF5
0D492:  CLRF   xF6
0D494:  CLRF   xF7
0D496:  CLRF   xF8
0D498:  CLRF   xF9
0D49A:  CLRF   xFA
0D49C:  CLRF   xFB
0D49E:  CLRF   xFC
0D4A0:  CLRF   xFD
0D4A2:  CLRF   xFE
0D4A4:  CLRF   xFF
0D4A6:  MOVLB  6
0D4A8:  CLRF   x00
0D4AA:  CLRF   x01
0D4AC:  CLRF   x02
0D4AE:  CLRF   x03
0D4B0:  CLRF   x04
0D4B2:  CLRF   x05
0D4B4:  CLRF   x06
0D4B6:  CLRF   x07
0D4B8:  CLRF   x08
0D4BA:  CLRF   x09
0D4BC:  CLRF   x0A
0D4BE:  CLRF   x0B
0D4C0:  CLRF   x0C
0D4C2:  CLRF   x0D
0D4C4:  CLRF   x0E
0D4C6:  CLRF   x0F
0D4C8:  CLRF   x10
0D4CA:  CLRF   x11
0D4CC:  CLRF   x12
0D4CE:  CLRF   x13
0D4D0:  CLRF   x14
0D4D2:  CLRF   x15
0D4D4:  CLRF   x16
0D4D6:  CLRF   x17
0D4D8:  CLRF   x18
0D4DA:  CLRF   x19
0D4DC:  CLRF   x1A
0D4DE:  CLRF   x1B
0D4E0:  CLRF   x1C
0D4E2:  CLRF   x1D
0D4E4:  CLRF   x1E
0D4E6:  CLRF   x1F
0D4E8:  CLRF   x20
0D4EA:  CLRF   x21
0D4EC:  CLRF   x22
0D4EE:  CLRF   x23
0D4F0:  CLRF   x24
0D4F2:  CLRF   x25
0D4F4:  CLRF   x26
0D4F6:  CLRF   x27
0D4F8:  CLRF   x28
0D4FA:  CLRF   x29
0D4FC:  CLRF   x2A
0D4FE:  CLRF   x2B
0D500:  CLRF   x2C
0D502:  CLRF   x2D
0D504:  CLRF   x2E
0D506:  CLRF   x2F
0D508:  CLRF   x30
0D50A:  CLRF   x31
0D50C:  CLRF   x32
0D50E:  CLRF   x33
0D510:  CLRF   x34
0D512:  CLRF   x35
0D514:  CLRF   x36
0D516:  CLRF   x37
0D518:  CLRF   x38
0D51A:  CLRF   x39
0D51C:  CLRF   x3A
0D51E:  CLRF   x3B
0D520:  CLRF   x3C
0D522:  CLRF   x3D
0D524:  CLRF   x3E
0D526:  CLRF   x3F
0D528:  CLRF   x40
0D52A:  CLRF   x41
0D52C:  CLRF   x42
0D52E:  CLRF   x43
0D530:  CLRF   x44
0D532:  CLRF   x45
0D534:  CLRF   x46
0D536:  CLRF   x47
0D538:  CLRF   x48
0D53A:  CLRF   x49
0D53C:  CLRF   x4A
0D53E:  CLRF   x4B
0D540:  CLRF   x4C
0D542:  CLRF   x4D
0D544:  CLRF   x4E
0D546:  CLRF   x4F
0D548:  CLRF   x50
0D54A:  CLRF   x51
0D54C:  CLRF   x52
0D54E:  CLRF   x53
0D550:  CLRF   x54
0D552:  CLRF   x55
0D554:  CLRF   x56
0D556:  CLRF   x57
0D558:  CLRF   x58
0D55A:  CLRF   x59
0D55C:  CLRF   x5A
0D55E:  CLRF   x5B
0D560:  CLRF   x5C
0D562:  CLRF   x5D
0D564:  CLRF   x5E
0D566:  CLRF   x5F
0D568:  CLRF   x60
0D56A:  CLRF   x61
0D56C:  CLRF   x62
0D56E:  CLRF   x63
0D570:  CLRF   x64
0D572:  CLRF   x65
0D574:  CLRF   x66
0D576:  CLRF   x67
0D578:  CLRF   x68
0D57A:  CLRF   x69
0D57C:  CLRF   x6A
0D57E:  CLRF   x6B
0D580:  CLRF   x6C
0D582:  CLRF   x6D
0D584:  CLRF   x6E
0D586:  CLRF   x6F
0D588:  CLRF   x70
0D58A:  CLRF   x71
0D58C:  CLRF   x72
0D58E:  CLRF   x73
0D590:  CLRF   x74
0D592:  CLRF   x75
0D594:  CLRF   x76
0D596:  CLRF   x77
0D598:  CLRF   x78
0D59A:  CLRF   x79
0D59C:  CLRF   x7A
0D59E:  CLRF   x7B
0D5A0:  CLRF   x7C
0D5A2:  CLRF   x7D
0D5A4:  CLRF   x7E
0D5A6:  CLRF   x7F
0D5A8:  CLRF   x80
0D5AA:  CLRF   x81
0D5AC:  CLRF   x82
0D5AE:  CLRF   x83
0D5B0:  CLRF   x84
0D5B2:  CLRF   x85
0D5B4:  CLRF   x86
0D5B6:  CLRF   x87
0D5B8:  CLRF   x88
0D5BA:  CLRF   x89
0D5BC:  CLRF   x8A
0D5BE:  CLRF   x8B
0D5C0:  CLRF   x8C
0D5C2:  CLRF   x8D
0D5C4:  CLRF   x8E
0D5C6:  CLRF   x8F
0D5C8:  CLRF   x90
0D5CA:  CLRF   x91
0D5CC:  CLRF   x92
0D5CE:  CLRF   x93
0D5D0:  CLRF   x94
0D5D2:  CLRF   x95
0D5D4:  CLRF   x96
0D5D6:  CLRF   x97
0D5D8:  CLRF   x98
0D5DA:  CLRF   x99
0D5DC:  CLRF   x9A
0D5DE:  CLRF   x9B
0D5E0:  CLRF   x9C
0D5E2:  CLRF   x9D
0D5E4:  CLRF   x9E
0D5E6:  CLRF   x9F
0D5E8:  CLRF   xA0
0D5EA:  CLRF   xA1
0D5EC:  CLRF   xA2
0D5EE:  CLRF   xA3
0D5F0:  CLRF   xA4
0D5F2:  CLRF   xA5
0D5F4:  CLRF   xA6
0D5F6:  CLRF   xA7
0D5F8:  CLRF   xA8
0D5FA:  CLRF   xA9
0D5FC:  CLRF   xAA
0D5FE:  CLRF   xAB
0D600:  CLRF   xAC
0D602:  CLRF   xAD
0D604:  CLRF   xAE
0D606:  CLRF   xAF
0D608:  CLRF   xB0
0D60A:  CLRF   xB1
0D60C:  CLRF   xB2
0D60E:  CLRF   xB3
0D610:  CLRF   xB4
0D612:  CLRF   xB5
0D614:  CLRF   xB6
0D616:  CLRF   xB7
0D618:  CLRF   xB8
0D61A:  CLRF   xB9
0D61C:  CLRF   xBA
0D61E:  CLRF   xBB
0D620:  CLRF   xBC
0D622:  CLRF   xBD
0D624:  CLRF   xBE
0D626:  CLRF   xBF
0D628:  CLRF   xC0
0D62A:  CLRF   xC1
0D62C:  CLRF   xC2
0D62E:  CLRF   xC3
0D630:  CLRF   xC4
0D632:  CLRF   xC5
0D634:  CLRF   xC6
0D636:  CLRF   xC7
0D638:  CLRF   xC8
0D63A:  CLRF   xC9
0D63C:  CLRF   xCA
0D63E:  CLRF   xCB
0D640:  CLRF   xCC
0D642:  CLRF   xCD
0D644:  CLRF   xCE
0D646:  CLRF   xCF
0D648:  CLRF   xD0
0D64A:  CLRF   xD1
0D64C:  CLRF   xD2
0D64E:  CLRF   xD3
0D650:  CLRF   xD4
0D652:  CLRF   xD5
0D654:  CLRF   xD6
0D656:  CLRF   xD7
0D658:  CLRF   xD8
0D65A:  CLRF   xD9
0D65C:  CLRF   xDA
0D65E:  CLRF   xDB
0D660:  CLRF   xDC
0D662:  CLRF   xDD
0D664:  CLRF   xDE
0D666:  CLRF   xDF
0D668:  CLRF   xE0
0D66A:  CLRF   xE1
0D66C:  CLRF   xE2
0D66E:  CLRF   xE3
0D670:  CLRF   xE4
0D672:  CLRF   xE5
0D674:  CLRF   xE6
0D676:  CLRF   xE7
0D678:  CLRF   xE8
0D67A:  CLRF   xE9
0D67C:  CLRF   xEA
0D67E:  CLRF   xEB
0D680:  CLRF   xEC
0D682:  CLRF   xED
0D684:  CLRF   xEE
0D686:  CLRF   xEF
0D688:  CLRF   xF0
0D68A:  CLRF   xF1
0D68C:  CLRF   xF2
0D68E:  CLRF   xF3
0D690:  CLRF   xF4
0D692:  CLRF   xF5
0D694:  CLRF   xF6
0D696:  CLRF   xF7
0D698:  CLRF   xF8
0D69A:  CLRF   xF9
0D69C:  CLRF   xFA
0D69E:  CLRF   xFB
0D6A0:  CLRF   xFC
0D6A2:  CLRF   xFD
0D6A4:  CLRF   xFE
0D6A6:  CLRF   xFF
0D6A8:  MOVLB  7
0D6AA:  CLRF   x00
0D6AC:  CLRF   x01
0D6AE:  CLRF   x02
0D6B0:  CLRF   x03
0D6B2:  CLRF   x04
0D6B4:  CLRF   x05
0D6B6:  CLRF   x06
0D6B8:  CLRF   x07
0D6BA:  CLRF   x08
0D6BC:  CLRF   x09
0D6BE:  CLRF   x0A
0D6C0:  CLRF   x0B
0D6C2:  CLRF   x0C
0D6C4:  CLRF   x0D
0D6C6:  CLRF   x0E
0D6C8:  CLRF   x0F
0D6CA:  CLRF   x10
0D6CC:  CLRF   x11
0D6CE:  CLRF   x12
0D6D0:  CLRF   x13
0D6D2:  CLRF   x14
0D6D4:  CLRF   x15
0D6D6:  CLRF   x16
0D6D8:  CLRF   x17
0D6DA:  CLRF   x18
0D6DC:  CLRF   x19
0D6DE:  CLRF   x1A
0D6E0:  CLRF   x1B
0D6E2:  CLRF   x1C
0D6E4:  CLRF   x1D
0D6E6:  CLRF   x1E
0D6E8:  CLRF   x1F
0D6EA:  CLRF   x20
0D6EC:  CLRF   x21
0D6EE:  CLRF   x22
0D6F0:  CLRF   x23
0D6F2:  CLRF   x24
0D6F4:  CLRF   x25
0D6F6:  CLRF   x26
0D6F8:  CLRF   x27
0D6FA:  CLRF   x28
0D6FC:  CLRF   x29
0D6FE:  CLRF   x2A
0D700:  CLRF   x2B
0D702:  CLRF   x2C
0D704:  CLRF   x2D
0D706:  CLRF   x2E
0D708:  CLRF   x2F
0D70A:  CLRF   x30
0D70C:  CLRF   x31
0D70E:  CLRF   x32
0D710:  CLRF   x33
0D712:  CLRF   x34
0D714:  CLRF   x35
0D716:  CLRF   x36
0D718:  CLRF   x37
0D71A:  CLRF   x38
0D71C:  CLRF   x39
0D71E:  CLRF   x3A
0D720:  CLRF   x3B
0D722:  CLRF   x3C
0D724:  CLRF   x3D
0D726:  CLRF   x3E
0D728:  CLRF   x3F
0D72A:  CLRF   x40
0D72C:  CLRF   x41
0D72E:  CLRF   x42
0D730:  CLRF   x43
0D732:  CLRF   x44
0D734:  CLRF   x45
0D736:  CLRF   x46
0D738:  CLRF   x47
0D73A:  CLRF   x48
0D73C:  CLRF   x49
0D73E:  CLRF   x4A
0D740:  CLRF   x4B
0D742:  CLRF   x4C
0D744:  CLRF   x4D
0D746:  CLRF   x4E
0D748:  CLRF   x4F
0D74A:  CLRF   x50
0D74C:  CLRF   x51
0D74E:  CLRF   x52
0D750:  CLRF   x53
0D752:  CLRF   x54
0D754:  CLRF   x55
0D756:  CLRF   x56
0D758:  CLRF   x57
0D75A:  CLRF   x58
0D75C:  CLRF   x59
0D75E:  CLRF   x5A
0D760:  CLRF   x5B
0D762:  CLRF   x5C
0D764:  CLRF   x5D
0D766:  CLRF   x5E
0D768:  CLRF   x5F
0D76A:  CLRF   x60
0D76C:  CLRF   x61
0D76E:  CLRF   x62
0D770:  CLRF   x63
0D772:  CLRF   x64
0D774:  CLRF   x65
0D776:  CLRF   x66
0D778:  CLRF   x67
0D77A:  CLRF   x68
0D77C:  CLRF   x69
0D77E:  CLRF   x6A
0D780:  CLRF   x6B
0D782:  CLRF   x6C
0D784:  CLRF   x6D
0D786:  CLRF   x6E
0D788:  CLRF   x6F
0D78A:  CLRF   x70
0D78C:  CLRF   x71
0D78E:  CLRF   x72
0D790:  CLRF   x73
0D792:  CLRF   x74
0D794:  CLRF   x75
0D796:  CLRF   x76
0D798:  CLRF   x77
0D79A:  CLRF   x78
0D79C:  CLRF   x79
0D79E:  CLRF   x7A
0D7A0:  CLRF   x7B
0D7A2:  CLRF   x7C
0D7A4:  CLRF   x7D
0D7A6:  CLRF   x7E
0D7A8:  CLRF   x7F
0D7AA:  CLRF   x80
0D7AC:  CLRF   x81
0D7AE:  CLRF   x82
0D7B0:  CLRF   x83
0D7B2:  CLRF   x84
0D7B4:  CLRF   x85
0D7B6:  CLRF   x86
0D7B8:  CLRF   x87
0D7BA:  CLRF   x88
0D7BC:  CLRF   x89
0D7BE:  CLRF   x8A
0D7C0:  CLRF   x8B
0D7C2:  CLRF   x8C
0D7C4:  CLRF   x8D
0D7C6:  CLRF   x8E
0D7C8:  CLRF   x8F
0D7CA:  CLRF   x90
0D7CC:  CLRF   x91
0D7CE:  CLRF   x92
0D7D0:  CLRF   x93
0D7D2:  CLRF   x94
0D7D4:  CLRF   x95
0D7D6:  CLRF   x96
0D7D8:  CLRF   x97
0D7DA:  CLRF   x98
0D7DC:  CLRF   x99
0D7DE:  CLRF   x9A
0D7E0:  CLRF   x9B
0D7E2:  CLRF   x9C
0D7E4:  CLRF   x9D
0D7E6:  CLRF   x9E
0D7E8:  CLRF   x9F
0D7EA:  CLRF   xA0
0D7EC:  CLRF   xA1
0D7EE:  CLRF   xA2
0D7F0:  CLRF   xA3
0D7F2:  CLRF   xA4
0D7F4:  CLRF   xA5
0D7F6:  CLRF   xA6
0D7F8:  CLRF   xA7
0D7FA:  CLRF   xA8
0D7FC:  CLRF   xA9
0D7FE:  CLRF   xAA
0D800:  CLRF   xAB
0D802:  CLRF   xAC
0D804:  CLRF   xAD
0D806:  CLRF   xAE
0D808:  CLRF   xAF
0D80A:  CLRF   xB0
0D80C:  CLRF   xB1
0D80E:  CLRF   xB2
0D810:  CLRF   xB3
0D812:  CLRF   xB4
0D814:  CLRF   xB5
0D816:  CLRF   xB6
0D818:  CLRF   xB7
0D81A:  CLRF   xB8
0D81C:  CLRF   xB9
0D81E:  CLRF   xBA
0D820:  CLRF   xBB
0D822:  CLRF   xBC
0D824:  CLRF   xBD
0D826:  CLRF   xBE
0D828:  CLRF   xBF
0D82A:  CLRF   xC0
0D82C:  CLRF   xC1
0D82E:  CLRF   xC2
0D830:  CLRF   xC3
0D832:  CLRF   xC4
0D834:  CLRF   xC5
0D836:  CLRF   xC6
0D838:  CLRF   xC7
0D83A:  CLRF   xC8
0D83C:  CLRF   xC9
0D83E:  CLRF   xCA
0D840:  CLRF   xCB
0D842:  CLRF   xCC
0D844:  CLRF   xCD
0D846:  CLRF   xCE
0D848:  CLRF   xCF
0D84A:  CLRF   xD0
0D84C:  CLRF   xD1
0D84E:  CLRF   xD2
0D850:  CLRF   xD3
0D852:  CLRF   xD4
0D854:  CLRF   xD5
0D856:  CLRF   xD6
0D858:  CLRF   xD7
0D85A:  CLRF   xD8
0D85C:  CLRF   xD9
0D85E:  CLRF   xDA
0D860:  CLRF   xDB
0D862:  CLRF   xDC
0D864:  CLRF   xDD
0D866:  CLRF   xDE
0D868:  CLRF   xDF
0D86A:  CLRF   xE0
0D86C:  CLRF   xE1
0D86E:  CLRF   xE2
0D870:  CLRF   xE3
0D872:  CLRF   xE4
0D874:  CLRF   xE5
0D876:  CLRF   xE6
0D878:  CLRF   xE7
0D87A:  CLRF   xE8
0D87C:  CLRF   xE9
0D87E:  CLRF   xEA
0D880:  CLRF   xEB
0D882:  CLRF   xEC
0D884:  CLRF   xED
0D886:  CLRF   xEE
0D888:  CLRF   xEF
0D88A:  CLRF   xF0
0D88C:  CLRF   xF1
0D88E:  CLRF   xF2
0D890:  CLRF   xF3
0D892:  CLRF   xF4
0D894:  CLRF   xF5
0D896:  CLRF   xF6
0D898:  CLRF   xF7
0D89A:  CLRF   xF8
0D89C:  CLRF   xF9
0D89E:  CLRF   xFA
0D8A0:  CLRF   xFB
0D8A2:  CLRF   xFC
0D8A4:  CLRF   xFD
0D8A6:  CLRF   xFE
0D8A8:  CLRF   xFF
0D8AA:  MOVLB  8
0D8AC:  CLRF   x00
0D8AE:  CLRF   x01
0D8B0:  CLRF   x02
0D8B2:  CLRF   x03
0D8B4:  CLRF   x04
0D8B6:  CLRF   x05
0D8B8:  CLRF   x06
0D8BA:  CLRF   x07
0D8BC:  CLRF   x08
0D8BE:  CLRF   x09
0D8C0:  CLRF   x0A
0D8C2:  CLRF   x0B
0D8C4:  CLRF   x0C
0D8C6:  CLRF   x0D
0D8C8:  CLRF   x0E
0D8CA:  CLRF   x0F
0D8CC:  CLRF   x10
0D8CE:  CLRF   x11
0D8D0:  CLRF   x12
0D8D2:  CLRF   x13
0D8D4:  CLRF   x14
0D8D6:  CLRF   x15
0D8D8:  CLRF   x16
0D8DA:  CLRF   x17
0D8DC:  CLRF   x18
0D8DE:  CLRF   x19
0D8E0:  CLRF   x1A
0D8E2:  CLRF   x1B
0D8E4:  CLRF   x1C
0D8E6:  CLRF   x1D
0D8E8:  CLRF   x1E
0D8EA:  CLRF   x1F
0D8EC:  CLRF   x20
0D8EE:  CLRF   x21
0D8F0:  CLRF   x22
0D8F2:  CLRF   x23
0D8F4:  CLRF   x24
0D8F6:  CLRF   x25
0D8F8:  CLRF   x26
0D8FA:  CLRF   x27
0D8FC:  CLRF   x28
0D8FE:  CLRF   x29
0D900:  CLRF   x2A
0D902:  CLRF   x2B
0D904:  CLRF   x2C
0D906:  CLRF   x2D
0D908:  CLRF   x2E
0D90A:  CLRF   x2F
0D90C:  CLRF   x30
0D90E:  CLRF   x31
0D910:  CLRF   x32
0D912:  CLRF   x33
0D914:  CLRF   x34
0D916:  CLRF   x35
0D918:  CLRF   x36
0D91A:  CLRF   x37
0D91C:  CLRF   x38
0D91E:  CLRF   x39
0D920:  CLRF   x3A
0D922:  CLRF   x3B
0D924:  CLRF   x3C
0D926:  CLRF   x3D
0D928:  CLRF   x3E
0D92A:  CLRF   x3F
0D92C:  CLRF   x40
0D92E:  CLRF   x41
0D930:  CLRF   x42
0D932:  CLRF   x43
0D934:  CLRF   x44
0D936:  CLRF   x45
0D938:  CLRF   x46
0D93A:  CLRF   x47
0D93C:  CLRF   x48
0D93E:  CLRF   x49
0D940:  CLRF   x4A
0D942:  CLRF   x4B
0D944:  CLRF   x4C
0D946:  CLRF   x4D
0D948:  CLRF   x4E
0D94A:  CLRF   x4F
0D94C:  CLRF   x50
0D94E:  CLRF   x51
0D950:  CLRF   x52
0D952:  CLRF   x53
0D954:  CLRF   x54
0D956:  CLRF   x55
0D958:  CLRF   x56
0D95A:  CLRF   x57
0D95C:  CLRF   x58
0D95E:  CLRF   x59
0D960:  CLRF   x5A
0D962:  CLRF   x5B
0D964:  CLRF   x5C
0D966:  CLRF   x5D
0D968:  CLRF   x5E
0D96A:  CLRF   x5F
0D96C:  CLRF   x60
0D96E:  CLRF   x61
0D970:  CLRF   x62
0D972:  CLRF   x63
0D974:  CLRF   x64
0D976:  CLRF   x65
0D978:  CLRF   x66
0D97A:  CLRF   x67
0D97C:  CLRF   x68
0D97E:  CLRF   x69
0D980:  CLRF   x6A
0D982:  CLRF   x6B
0D984:  CLRF   x6C
0D986:  CLRF   x6D
0D988:  CLRF   x6E
0D98A:  CLRF   x6F
0D98C:  CLRF   x70
0D98E:  CLRF   x71
0D990:  CLRF   x72
0D992:  CLRF   x73
0D994:  CLRF   x74
0D996:  CLRF   x75
0D998:  CLRF   x76
0D99A:  CLRF   x77
0D99C:  CLRF   x78
0D99E:  CLRF   x79
0D9A0:  CLRF   x7A
0D9A2:  CLRF   x7B
0D9A4:  CLRF   x7C
0D9A6:  CLRF   x7D
0D9A8:  CLRF   x7E
0D9AA:  CLRF   x7F
0D9AC:  CLRF   x80
0D9AE:  CLRF   x81
0D9B0:  CLRF   x82
0D9B2:  CLRF   x83
0D9B4:  CLRF   x84
0D9B6:  CLRF   x85
0D9B8:  CLRF   x86
0D9BA:  CLRF   x87
0D9BC:  CLRF   x88
0D9BE:  CLRF   x89
0D9C0:  CLRF   x8A
0D9C2:  CLRF   x8B
0D9C4:  CLRF   x8C
0D9C6:  CLRF   x8D
0D9C8:  CLRF   x8E
0D9CA:  CLRF   x8F
0D9CC:  CLRF   x90
0D9CE:  CLRF   x91
0D9D0:  CLRF   x92
0D9D2:  CLRF   x93
0D9D4:  CLRF   x94
0D9D6:  CLRF   x95
0D9D8:  CLRF   x96
0D9DA:  CLRF   x97
0D9DC:  CLRF   x98
0D9DE:  CLRF   x99
0D9E0:  CLRF   x9A
0D9E2:  CLRF   x9B
0D9E4:  CLRF   x9C
0D9E6:  CLRF   x9D
0D9E8:  CLRF   x9E
0D9EA:  CLRF   x9F
0D9EC:  CLRF   xA0
0D9EE:  CLRF   xA1
0D9F0:  CLRF   xA2
0D9F2:  CLRF   xA3
0D9F4:  CLRF   xA4
0D9F6:  CLRF   xA5
0D9F8:  CLRF   xA6
0D9FA:  CLRF   xA7
0D9FC:  CLRF   xA8
0D9FE:  CLRF   xA9
0DA00:  CLRF   xAA
0DA02:  CLRF   xAB
0DA04:  CLRF   xAC
0DA06:  CLRF   xAD
0DA08:  CLRF   xAE
0DA0A:  CLRF   xAF
0DA0C:  CLRF   xB0
0DA0E:  CLRF   xB1
0DA10:  CLRF   xB2
0DA12:  CLRF   xB3
0DA14:  CLRF   xB4
0DA16:  CLRF   xB5
0DA18:  CLRF   xB6
0DA1A:  CLRF   xB7
0DA1C:  CLRF   xB8
0DA1E:  CLRF   xB9
0DA20:  CLRF   xBA
0DA22:  CLRF   xBB
0DA24:  CLRF   xBC
0DA26:  CLRF   xBD
0DA28:  CLRF   xBE
0DA2A:  CLRF   xBF
0DA2C:  CLRF   xC0
0DA2E:  CLRF   xC1
0DA30:  CLRF   xC2
0DA32:  CLRF   xC3
0DA34:  CLRF   xC4
0DA36:  CLRF   xC5
0DA38:  CLRF   xC6
0DA3A:  CLRF   xC7
0DA3C:  CLRF   xC8
0DA3E:  CLRF   xC9
0DA40:  CLRF   xCA
0DA42:  CLRF   xCB
0DA44:  CLRF   xCC
0DA46:  CLRF   xCD
0DA48:  CLRF   xCE
0DA4A:  CLRF   xCF
0DA4C:  CLRF   xD0
0DA4E:  CLRF   xD1
0DA50:  CLRF   xD2
0DA52:  CLRF   xD3
0DA54:  CLRF   xD4
0DA56:  CLRF   xD5
0DA58:  CLRF   xD6
0DA5A:  CLRF   xD7
0DA5C:  CLRF   xD8
0DA5E:  CLRF   xD9
0DA60:  CLRF   xDA
0DA62:  CLRF   xDB
0DA64:  CLRF   xDC
0DA66:  CLRF   xDD
0DA68:  CLRF   xDE
0DA6A:  CLRF   xDF
0DA6C:  CLRF   xE0
0DA6E:  CLRF   xE1
0DA70:  CLRF   xE2
0DA72:  CLRF   xE3
0DA74:  CLRF   xE4
0DA76:  CLRF   xE5
0DA78:  CLRF   xE6
0DA7A:  CLRF   xE7
0DA7C:  CLRF   xE8
0DA7E:  CLRF   xE9
0DA80:  CLRF   xEA
0DA82:  CLRF   xEB
0DA84:  CLRF   xEC
0DA86:  CLRF   xED
0DA88:  CLRF   xEE
0DA8A:  CLRF   xEF
0DA8C:  CLRF   xF0
0DA8E:  CLRF   xF1
0DA90:  CLRF   xF2
0DA92:  CLRF   xF3
0DA94:  CLRF   xF4
0DA96:  CLRF   xF5
0DA98:  CLRF   xF6
0DA9A:  CLRF   xF7
0DA9C:  CLRF   xF8
0DA9E:  CLRF   xF9
0DAA0:  CLRF   xFA
0DAA2:  CLRF   xFB
0DAA4:  CLRF   xFC
0DAA6:  CLRF   xFD
0DAA8:  CLRF   xFE
0DAAA:  CLRF   xFF
0DAAC:  MOVLB  9
0DAAE:  CLRF   x00
0DAB0:  CLRF   x01
0DAB2:  CLRF   x02
0DAB4:  CLRF   x03
0DAB6:  CLRF   x04
0DAB8:  CLRF   x05
0DABA:  CLRF   x06
0DABC:  CLRF   x07
0DABE:  CLRF   x08
0DAC0:  CLRF   x09
0DAC2:  CLRF   x0A
0DAC4:  CLRF   x0B
0DAC6:  CLRF   x0C
0DAC8:  CLRF   x0D
0DACA:  CLRF   x0E
0DACC:  CLRF   x0F
0DACE:  CLRF   x10
0DAD0:  CLRF   x11
0DAD2:  CLRF   x12
0DAD4:  CLRF   x13
0DAD6:  CLRF   x14
0DAD8:  CLRF   x15
0DADA:  CLRF   x16
0DADC:  CLRF   x17
0DADE:  CLRF   x18
0DAE0:  CLRF   x19
0DAE2:  CLRF   x1A
0DAE4:  CLRF   x1B
0DAE6:  CLRF   x1C
0DAE8:  CLRF   x1D
0DAEA:  CLRF   x1E
0DAEC:  CLRF   x1F
0DAEE:  CLRF   x20
0DAF0:  CLRF   x21
0DAF2:  CLRF   x22
0DAF4:  CLRF   x23
0DAF6:  CLRF   x24
0DAF8:  CLRF   x25
0DAFA:  CLRF   x26
0DAFC:  CLRF   x27
0DAFE:  CLRF   x28
0DB00:  CLRF   x29
0DB02:  CLRF   x2A
0DB04:  CLRF   x2B
0DB06:  CLRF   x2C
0DB08:  CLRF   x2D
0DB0A:  CLRF   x2E
0DB0C:  CLRF   x2F
0DB0E:  CLRF   x30
0DB10:  CLRF   x31
0DB12:  CLRF   x32
0DB14:  CLRF   x33
0DB16:  CLRF   x34
0DB18:  CLRF   x35
0DB1A:  CLRF   x36
0DB1C:  CLRF   x37
0DB1E:  CLRF   x38
0DB20:  CLRF   x39
0DB22:  CLRF   x3A
0DB24:  CLRF   x3B
0DB26:  CLRF   x3C
0DB28:  CLRF   x3D
0DB2A:  CLRF   x3E
0DB2C:  CLRF   x3F
0DB2E:  CLRF   x40
0DB30:  CLRF   x41
0DB32:  CLRF   x42
0DB34:  CLRF   x43
0DB36:  CLRF   x44
0DB38:  CLRF   x45
0DB3A:  CLRF   x46
0DB3C:  CLRF   x47
0DB3E:  CLRF   x48
0DB40:  CLRF   x49
0DB42:  CLRF   x4A
0DB44:  CLRF   x4B
0DB46:  CLRF   x4C
0DB48:  CLRF   x4D
0DB4A:  CLRF   x4E
0DB4C:  CLRF   x4F
0DB4E:  CLRF   x50
0DB50:  CLRF   x51
0DB52:  CLRF   x52
0DB54:  CLRF   x53
0DB56:  CLRF   x54
0DB58:  CLRF   x55
0DB5A:  CLRF   x56
0DB5C:  CLRF   x57
0DB5E:  CLRF   x58
0DB60:  CLRF   x59
0DB62:  CLRF   x5A
0DB64:  CLRF   x5B
0DB66:  CLRF   x5C
0DB68:  CLRF   x5D
0DB6A:  CLRF   x5E
0DB6C:  CLRF   x5F
0DB6E:  CLRF   x60
0DB70:  CLRF   x61
0DB72:  CLRF   x62
0DB74:  CLRF   x63
0DB76:  CLRF   x64
0DB78:  CLRF   x65
0DB7A:  CLRF   x66
0DB7C:  CLRF   x67
0DB7E:  CLRF   x68
0DB80:  CLRF   x69
0DB82:  CLRF   x6A
0DB84:  CLRF   x6B
0DB86:  CLRF   x6C
0DB88:  CLRF   x6D
0DB8A:  CLRF   x6E
0DB8C:  CLRF   x6F
0DB8E:  CLRF   x70
0DB90:  CLRF   x71
0DB92:  CLRF   x72
0DB94:  CLRF   x73
0DB96:  CLRF   x74
0DB98:  CLRF   x75
0DB9A:  CLRF   x76
0DB9C:  CLRF   x77
0DB9E:  CLRF   x78
0DBA0:  CLRF   x79
0DBA2:  CLRF   x7A
0DBA4:  CLRF   x7B
0DBA6:  CLRF   x7C
0DBA8:  CLRF   x7D
0DBAA:  CLRF   x7E
0DBAC:  CLRF   x7F
0DBAE:  CLRF   x80
0DBB0:  CLRF   x81
0DBB2:  CLRF   x82
0DBB4:  CLRF   x83
0DBB6:  CLRF   x84
0DBB8:  CLRF   x85
0DBBA:  CLRF   x86
0DBBC:  CLRF   x87
0DBBE:  CLRF   x88
0DBC0:  CLRF   x89
0DBC2:  CLRF   x8A
0DBC4:  CLRF   x8B
0DBC6:  CLRF   x8C
0DBC8:  CLRF   x8D
0DBCA:  CLRF   x8E
0DBCC:  CLRF   x8F
0DBCE:  CLRF   x90
0DBD0:  CLRF   x91
0DBD2:  CLRF   x92
0DBD4:  CLRF   x93
0DBD6:  CLRF   x94
0DBD8:  CLRF   x95
0DBDA:  CLRF   x96
0DBDC:  CLRF   x97
0DBDE:  CLRF   x98
0DBE0:  CLRF   x99
0DBE2:  CLRF   x9A
0DBE4:  CLRF   x9B
0DBE6:  CLRF   x9C
0DBE8:  CLRF   x9D
0DBEA:  CLRF   x9E
0DBEC:  CLRF   x9F
0DBEE:  CLRF   xA0
0DBF0:  CLRF   xA1
0DBF2:  CLRF   xA2
0DBF4:  CLRF   xA3
0DBF6:  CLRF   xA4
0DBF8:  CLRF   xA5
0DBFA:  CLRF   xA6
0DBFC:  CLRF   xA7
0DBFE:  CLRF   xA8
0DC00:  CLRF   xA9
0DC02:  CLRF   xAA
0DC04:  CLRF   xAB
0DC06:  CLRF   xAC
0DC08:  CLRF   xAD
0DC0A:  CLRF   xAE
0DC0C:  CLRF   xAF
0DC0E:  CLRF   xB0
0DC10:  CLRF   xB1
0DC12:  CLRF   xB2
....................     port2.port_num = 2; 
0DC14:  MOVLW  02
0DC16:  MOVLB  5
0DC18:  MOVWF  xB3
....................     port2.sweep_step = 0;
0DC1A:  CLRF   xB5
0DC1C:  CLRF   xB4
....................     port2.active = 1;
0DC1E:  MOVLB  9
0DC20:  BSF    xB2.0
.................... 
....................     int16 count = 1;
....................     iv_env_t measured_data = create_meas_data();
0DC22:  CLRF   xB4
0DC24:  MOVLW  01
0DC26:  MOVWF  xB3
0DC28:  MOVLB  0
0DC2A:  CALL   91E8
0DC2E:  MOVFF  02,03
0DC32:  MOVF   01,W
0DC34:  MOVWF  FE1
0DC36:  MOVFF  03,FE2
0DC3A:  MOVLW  09
0DC3C:  MOVWF  FEA
0DC3E:  MOVLW  B5
0DC40:  MOVWF  FE9
0DC42:  MOVLW  0C
0DC44:  MOVWF  01
0DC46:  MOVFF  FE6,FEE
0DC4A:  DECFSZ 01,F
0DC4C:  GOTO   DC46
.................... 
....................     while (port1.active || port2.active)
0DC50:  MOVLB  5
0DC52:  BTFSS  xB2.0
0DC54:  BRA    DC5C
0DC56:  MOVLB  0
0DC58:  GOTO   DC6C
0DC5C:  MOVLB  0
0DC5E:  MOVLB  9
0DC60:  BTFSC  xB2.0
0DC62:  BRA    DC6A
0DC64:  MOVLB  0
0DC66:  GOTO   DF50
0DC6A:  MOVLB  0
....................     {
....................         // 出力設定
....................         if (port1.active) {
0DC6C:  MOVLB  5
0DC6E:  BTFSC  xB2.0
0DC70:  BRA    DC78
0DC72:  MOVLB  0
0DC74:  GOTO   DC8A
0DC78:  MOVLB  0
....................             mcp4901_1_write(count);
0DC7A:  MOVFF  9B4,9DD
0DC7E:  MOVFF  9B3,9DC
0DC82:  CALL   2872
....................         } else {
0DC86:  GOTO   DC96
....................             mcp4901_1_write(0);  // 閾値到達後は0出力
0DC8A:  MOVLB  9
0DC8C:  CLRF   xDD
0DC8E:  CLRF   xDC
0DC90:  MOVLB  0
0DC92:  CALL   2872
....................         }
.................... 
....................         if (port2.active) {
0DC96:  MOVLB  9
0DC98:  BTFSC  xB2.0
0DC9A:  BRA    DCA2
0DC9C:  MOVLB  0
0DC9E:  GOTO   DCB4
0DCA2:  MOVLB  0
....................             mcp4901_2_write(count);
0DCA4:  MOVFF  9B4,9DD
0DCA8:  MOVFF  9B3,9DC
0DCAC:  CALL   28B0
....................         } else {
0DCB0:  GOTO   DCC0
....................             mcp4901_2_write(0);
0DCB4:  MOVLB  9
0DCB6:  CLRF   xDD
0DCB8:  CLRF   xDC
0DCBA:  MOVLB  0
0DCBC:  CALL   28B0
....................         }
.................... 
....................         delay_us(100);
0DCC0:  MOVLW  85
0DCC2:  MOVWF  00
0DCC4:  DECFSZ 00,F
0DCC6:  BRA    DCC4
.................... 
....................         // データ取得
....................         if (port1.active) {
0DCC8:  MOVLB  5
0DCCA:  BTFSC  xB2.0
0DCCC:  BRA    DCD4
0DCCE:  MOVLB  0
0DCD0:  GOTO   DDF4
0DCD4:  MOVLB  0
....................             port1.data_buffer[count].voltage = ad7490_read(ADC_CIGS1_AMP);
0DCD6:  MOVLB  9
0DCD8:  RLCF   xB3,W
0DCDA:  MOVWF  02
0DCDC:  RLCF   xB4,W
0DCDE:  MOVWF  03
0DCE0:  RLCF   02,F
0DCE2:  RLCF   03,F
0DCE4:  MOVLW  FC
0DCE6:  ANDWF  02,F
0DCE8:  MOVF   02,W
0DCEA:  ADDLW  B6
0DCEC:  MOVWF  01
0DCEE:  MOVLW  01
0DCF0:  ADDWFC 03,F
0DCF2:  MOVF   01,W
0DCF4:  MOVWF  xC4
0DCF6:  MOVFF  03,9C5
0DCFA:  MOVLW  02
0DCFC:  MOVWF  xEE
0DCFE:  MOVLB  0
0DD00:  CALL   24C2
0DD04:  MOVFF  9C5,FEA
0DD08:  MOVFF  9C4,FE9
0DD0C:  MOVFF  02,FEC
0DD10:  MOVF   FED,F
0DD12:  MOVFF  01,FEF
....................             port1.data_buffer[count].current = ad7490_read(ADC_CIGS1_CURR);
0DD16:  MOVLB  9
0DD18:  RLCF   xB3,W
0DD1A:  MOVWF  02
0DD1C:  RLCF   xB4,W
0DD1E:  MOVWF  03
0DD20:  RLCF   02,F
0DD22:  RLCF   03,F
0DD24:  MOVLW  FC
0DD26:  ANDWF  02,F
0DD28:  MOVF   02,W
0DD2A:  ADDLW  03
0DD2C:  MOVWF  xC2
0DD2E:  MOVLW  00
0DD30:  ADDWFC 03,W
0DD32:  MOVWF  xC3
0DD34:  MOVLW  02
0DD36:  ADDWF  xC2,W
0DD38:  MOVWF  01
0DD3A:  MOVLW  00
0DD3C:  ADDWFC xC3,W
0DD3E:  MOVWF  03
0DD40:  MOVF   01,W
0DD42:  ADDLW  B3
0DD44:  MOVWF  01
0DD46:  MOVLW  01
0DD48:  ADDWFC 03,F
0DD4A:  MOVF   01,W
0DD4C:  MOVWF  xC2
0DD4E:  MOVFF  03,9C3
0DD52:  MOVLW  01
0DD54:  MOVWF  xEE
0DD56:  MOVLB  0
0DD58:  CALL   24C2
0DD5C:  MOVFF  9C3,FEA
0DD60:  MOVFF  9C2,FE9
0DD64:  MOVFF  02,FEC
0DD68:  MOVF   FED,F
0DD6A:  MOVFF  01,FEF
....................             port1.sweep_step = count + 1;
0DD6E:  MOVLW  01
0DD70:  MOVLB  9
0DD72:  ADDWF  xB3,W
0DD74:  MOVLB  1
0DD76:  MOVWF  xB4
0DD78:  MOVLW  00
0DD7A:  MOVLB  9
0DD7C:  ADDWFC xB4,W
0DD7E:  MOVLB  1
0DD80:  MOVWF  xB5
....................             if (port1.data_buffer[count].current < curr_limit) {
0DD82:  MOVLB  9
0DD84:  RLCF   xB3,W
0DD86:  MOVWF  02
0DD88:  RLCF   xB4,W
0DD8A:  MOVWF  03
0DD8C:  RLCF   02,F
0DD8E:  RLCF   03,F
0DD90:  MOVLW  FC
0DD92:  ANDWF  02,F
0DD94:  MOVF   02,W
0DD96:  ADDLW  03
0DD98:  MOVWF  xC2
0DD9A:  MOVLW  00
0DD9C:  ADDWFC 03,W
0DD9E:  MOVWF  xC3
0DDA0:  MOVLW  02
0DDA2:  ADDWF  xC2,W
0DDA4:  MOVWF  01
0DDA6:  MOVLW  00
0DDA8:  ADDWFC xC3,W
0DDAA:  MOVWF  03
0DDAC:  MOVF   01,W
0DDAE:  ADDLW  B3
0DDB0:  MOVWF  FE9
0DDB2:  MOVLW  01
0DDB4:  ADDWFC 03,W
0DDB6:  MOVWF  FEA
0DDB8:  MOVFF  FEC,9C3
0DDBC:  MOVF   FED,F
0DDBE:  MOVFF  FEF,9C2
0DDC2:  MOVF   xC3,W
0DDC4:  MOVLB  1
0DDC6:  SUBWF  xB2,W
0DDC8:  BTFSC  FD8.0
0DDCA:  BRA    DDD2
0DDCC:  MOVLB  0
0DDCE:  GOTO   DDF4
0DDD2:  MOVLB  0
0DDD4:  BTFSS  FD8.2
0DDD6:  GOTO   DDEE
0DDDA:  MOVLB  1
0DDDC:  MOVF   xB1,W
0DDDE:  MOVLB  9
0DDE0:  SUBWF  xC2,W
0DDE2:  BTFSS  FD8.0
0DDE4:  BRA    DDEC
0DDE6:  MOVLB  0
0DDE8:  GOTO   DDF4
0DDEC:  MOVLB  0
....................                 port1.active = 0;  // 閾値到達で測定終了
0DDEE:  MOVLB  5
0DDF0:  BCF    xB2.0
0DDF2:  MOVLB  0
....................             }
....................         }
.................... 
....................         if (port2.active) {
0DDF4:  MOVLB  9
0DDF6:  BTFSC  xB2.0
0DDF8:  BRA    DE00
0DDFA:  MOVLB  0
0DDFC:  GOTO   DF20
0DE00:  MOVLB  0
....................             port2.data_buffer[count].voltage = ad7490_read(ADC_CIGS2_AMP);
0DE02:  MOVLB  9
0DE04:  RLCF   xB3,W
0DE06:  MOVWF  02
0DE08:  RLCF   xB4,W
0DE0A:  MOVWF  03
0DE0C:  RLCF   02,F
0DE0E:  RLCF   03,F
0DE10:  MOVLW  FC
0DE12:  ANDWF  02,F
0DE14:  MOVF   02,W
0DE16:  ADDLW  B6
0DE18:  MOVWF  01
0DE1A:  MOVLW  05
0DE1C:  ADDWFC 03,F
0DE1E:  MOVF   01,W
0DE20:  MOVWF  xC4
0DE22:  MOVFF  03,9C5
0DE26:  MOVLW  06
0DE28:  MOVWF  xEE
0DE2A:  MOVLB  0
0DE2C:  CALL   24C2
0DE30:  MOVFF  9C5,FEA
0DE34:  MOVFF  9C4,FE9
0DE38:  MOVFF  02,FEC
0DE3C:  MOVF   FED,F
0DE3E:  MOVFF  01,FEF
....................             port2.data_buffer[count].current = ad7490_read(ADC_CIGS2_CURR);
0DE42:  MOVLB  9
0DE44:  RLCF   xB3,W
0DE46:  MOVWF  02
0DE48:  RLCF   xB4,W
0DE4A:  MOVWF  03
0DE4C:  RLCF   02,F
0DE4E:  RLCF   03,F
0DE50:  MOVLW  FC
0DE52:  ANDWF  02,F
0DE54:  MOVF   02,W
0DE56:  ADDLW  03
0DE58:  MOVWF  xC2
0DE5A:  MOVLW  00
0DE5C:  ADDWFC 03,W
0DE5E:  MOVWF  xC3
0DE60:  MOVLW  02
0DE62:  ADDWF  xC2,W
0DE64:  MOVWF  01
0DE66:  MOVLW  00
0DE68:  ADDWFC xC3,W
0DE6A:  MOVWF  03
0DE6C:  MOVF   01,W
0DE6E:  ADDLW  B3
0DE70:  MOVWF  01
0DE72:  MOVLW  05
0DE74:  ADDWFC 03,F
0DE76:  MOVF   01,W
0DE78:  MOVWF  xC2
0DE7A:  MOVFF  03,9C3
0DE7E:  MOVLW  05
0DE80:  MOVWF  xEE
0DE82:  MOVLB  0
0DE84:  CALL   24C2
0DE88:  MOVFF  9C3,FEA
0DE8C:  MOVFF  9C2,FE9
0DE90:  MOVFF  02,FEC
0DE94:  MOVF   FED,F
0DE96:  MOVFF  01,FEF
....................             port2.sweep_step = count + 1;
0DE9A:  MOVLW  01
0DE9C:  MOVLB  9
0DE9E:  ADDWF  xB3,W
0DEA0:  MOVLB  5
0DEA2:  MOVWF  xB4
0DEA4:  MOVLW  00
0DEA6:  MOVLB  9
0DEA8:  ADDWFC xB4,W
0DEAA:  MOVLB  5
0DEAC:  MOVWF  xB5
....................             if (port2.data_buffer[count].current < curr_limit) {
0DEAE:  MOVLB  9
0DEB0:  RLCF   xB3,W
0DEB2:  MOVWF  02
0DEB4:  RLCF   xB4,W
0DEB6:  MOVWF  03
0DEB8:  RLCF   02,F
0DEBA:  RLCF   03,F
0DEBC:  MOVLW  FC
0DEBE:  ANDWF  02,F
0DEC0:  MOVF   02,W
0DEC2:  ADDLW  03
0DEC4:  MOVWF  xC2
0DEC6:  MOVLW  00
0DEC8:  ADDWFC 03,W
0DECA:  MOVWF  xC3
0DECC:  MOVLW  02
0DECE:  ADDWF  xC2,W
0DED0:  MOVWF  01
0DED2:  MOVLW  00
0DED4:  ADDWFC xC3,W
0DED6:  MOVWF  03
0DED8:  MOVF   01,W
0DEDA:  ADDLW  B3
0DEDC:  MOVWF  FE9
0DEDE:  MOVLW  05
0DEE0:  ADDWFC 03,W
0DEE2:  MOVWF  FEA
0DEE4:  MOVFF  FEC,9C3
0DEE8:  MOVF   FED,F
0DEEA:  MOVFF  FEF,9C2
0DEEE:  MOVF   xC3,W
0DEF0:  MOVLB  1
0DEF2:  SUBWF  xB2,W
0DEF4:  BTFSC  FD8.0
0DEF6:  BRA    DEFE
0DEF8:  MOVLB  0
0DEFA:  GOTO   DF20
0DEFE:  MOVLB  0
0DF00:  BTFSS  FD8.2
0DF02:  GOTO   DF1A
0DF06:  MOVLB  1
0DF08:  MOVF   xB1,W
0DF0A:  MOVLB  9
0DF0C:  SUBWF  xC2,W
0DF0E:  BTFSS  FD8.0
0DF10:  BRA    DF18
0DF12:  MOVLB  0
0DF14:  GOTO   DF20
0DF18:  MOVLB  0
....................                 port2.active = 0;
0DF1A:  MOVLB  9
0DF1C:  BCF    xB2.0
0DF1E:  MOVLB  0
....................             }
....................         }
.................... 
....................         count++;
0DF20:  MOVLB  9
0DF22:  INCF   xB3,F
0DF24:  BTFSC  FD8.2
0DF26:  INCF   xB4,F
....................         if (count >= 255) {
0DF28:  MOVF   xB4,F
0DF2A:  BTFSC  FD8.2
0DF2C:  BRA    DF34
0DF2E:  MOVLB  0
0DF30:  GOTO   DF48
0DF34:  MOVLB  0
0DF36:  MOVLB  9
0DF38:  MOVF   xB3,W
0DF3A:  SUBLW  FE
0DF3C:  BTFSS  FD8.0
0DF3E:  BRA    DF46
0DF40:  MOVLB  0
0DF42:  GOTO   DF4C
0DF46:  MOVLB  0
....................             break;
0DF48:  GOTO   DF50
....................         }
0DF4C:  GOTO   DC50
....................     }
.................... 
....................     fprintf(PC, "temp_top:%04LX\r\n", measured_data.temp_py_top);
0DF50:  MOVLW  22
0DF52:  MOVWF  FF6
0DF54:  MOVLW  06
0DF56:  MOVWF  FF7
0DF58:  MOVLW  00
0DF5A:  MOVWF  FF8
0DF5C:  MOVLW  09
0DF5E:  MOVLB  9
0DF60:  MOVWF  xC2
0DF62:  MOVLB  0
0DF64:  CALL   2312
0DF68:  MOVFF  9BC,9E8
0DF6C:  MOVLW  37
0DF6E:  MOVLB  9
0DF70:  MOVWF  xE9
0DF72:  MOVLB  0
0DF74:  CALL   2542
0DF78:  MOVFF  9BB,9E8
0DF7C:  MOVLW  37
0DF7E:  MOVLB  9
0DF80:  MOVWF  xE9
0DF82:  MOVLB  0
0DF84:  CALL   2542
0DF88:  MOVLW  0D
0DF8A:  BTFSS  FA6.6
0DF8C:  GOTO   DF8A
0DF90:  MOVLB  E
0DF92:  MOVWF  xF9
0DF94:  MOVLW  0A
0DF96:  MOVLB  0
0DF98:  BTFSS  FA6.6
0DF9A:  GOTO   DF98
0DF9E:  MOVLB  E
0DFA0:  MOVWF  xF9
....................     fprintf(PC, "temp_bot:%04LX\r\n", measured_data.temp_py_bot);
0DFA2:  MOVLW  34
0DFA4:  MOVWF  FF6
0DFA6:  MOVLW  06
0DFA8:  MOVWF  FF7
0DFAA:  MOVLW  00
0DFAC:  MOVWF  FF8
0DFAE:  MOVLW  09
0DFB0:  MOVLB  9
0DFB2:  MOVWF  xC2
0DFB4:  MOVLB  0
0DFB6:  CALL   2312
0DFBA:  MOVFF  9BE,9E8
0DFBE:  MOVLW  37
0DFC0:  MOVLB  9
0DFC2:  MOVWF  xE9
0DFC4:  MOVLB  0
0DFC6:  CALL   2542
0DFCA:  MOVFF  9BD,9E8
0DFCE:  MOVLW  37
0DFD0:  MOVLB  9
0DFD2:  MOVWF  xE9
0DFD4:  MOVLB  0
0DFD6:  CALL   2542
0DFDA:  MOVLW  0D
0DFDC:  BTFSS  FA6.6
0DFDE:  GOTO   DFDC
0DFE2:  MOVLB  E
0DFE4:  MOVWF  xF9
0DFE6:  MOVLW  0A
0DFE8:  MOVLB  0
0DFEA:  BTFSS  FA6.6
0DFEC:  GOTO   DFEA
0DFF0:  MOVLB  E
0DFF2:  MOVWF  xF9
....................     fprintf(PC, "temp_mis7:%04LX\r\n", measured_data.temp_mis7);
0DFF4:  MOVLW  46
0DFF6:  MOVWF  FF6
0DFF8:  MOVLW  06
0DFFA:  MOVWF  FF7
0DFFC:  MOVLW  00
0DFFE:  MOVWF  FF8
0E000:  MOVLW  0A
0E002:  MOVLB  9
0E004:  MOVWF  xC2
0E006:  MOVLB  0
0E008:  CALL   2312
0E00C:  MOVFF  9C0,9E8
0E010:  MOVLW  37
0E012:  MOVLB  9
0E014:  MOVWF  xE9
0E016:  MOVLB  0
0E018:  CALL   2542
0E01C:  MOVFF  9BF,9E8
0E020:  MOVLW  37
0E022:  MOVLB  9
0E024:  MOVWF  xE9
0E026:  MOVLB  0
0E028:  CALL   2542
0E02C:  MOVLW  0D
0E02E:  BTFSS  FA6.6
0E030:  GOTO   E02E
0E034:  MOVLB  E
0E036:  MOVWF  xF9
0E038:  MOVLW  0A
0E03A:  MOVLB  0
0E03C:  BTFSS  FA6.6
0E03E:  GOTO   E03C
0E042:  MOVLB  E
0E044:  MOVWF  xF9
....................     fprintf(PC, "pd:%04LX\r\n", measured_data.pd);
0E046:  MOVLW  58
0E048:  MOVWF  FF6
0E04A:  MOVLW  06
0E04C:  MOVWF  FF7
0E04E:  MOVLW  00
0E050:  MOVWF  FF8
0E052:  MOVLW  03
0E054:  MOVLB  9
0E056:  MOVWF  xC2
0E058:  MOVLB  0
0E05A:  CALL   2312
0E05E:  MOVFF  9BA,9E8
0E062:  MOVLW  37
0E064:  MOVLB  9
0E066:  MOVWF  xE9
0E068:  MOVLB  0
0E06A:  CALL   2542
0E06E:  MOVFF  9B9,9E8
0E072:  MOVLW  37
0E074:  MOVLB  9
0E076:  MOVWF  xE9
0E078:  MOVLB  0
0E07A:  CALL   2542
0E07E:  MOVLW  0D
0E080:  BTFSS  FA6.6
0E082:  GOTO   E080
0E086:  MOVLB  E
0E088:  MOVWF  xF9
0E08A:  MOVLW  0A
0E08C:  MOVLB  0
0E08E:  BTFSS  FA6.6
0E090:  GOTO   E08E
0E094:  MOVLB  E
0E096:  MOVWF  xF9
....................     // Print I-V data
....................     fprintf(PC, "Volt1,Curr1,Volt2,Curr2\r\n");
0E098:  MOVLW  64
0E09A:  MOVWF  FF6
0E09C:  MOVLW  06
0E09E:  MOVWF  FF7
0E0A0:  MOVLW  00
0E0A2:  MOVWF  FF8
0E0A4:  MOVLB  0
0E0A6:  CALL   22DC
....................     for (int i = 0; i < count; i++) {
0E0AA:  MOVLB  9
0E0AC:  CLRF   xC1
0E0AE:  MOVLB  0
0E0B0:  MOVLB  9
0E0B2:  MOVF   xB4,F
0E0B4:  BTFSC  FD8.2
0E0B6:  BRA    E0BE
0E0B8:  MOVLB  0
0E0BA:  GOTO   E0D2
0E0BE:  MOVLB  0
0E0C0:  MOVLB  9
0E0C2:  MOVF   xB3,W
0E0C4:  SUBWF  xC1,W
0E0C6:  BTFSS  FD8.0
0E0C8:  BRA    E0D0
0E0CA:  MOVLB  0
0E0CC:  GOTO   E286
0E0D0:  MOVLB  0
.................... 
....................         fprintf(PC, "%04LX,%04LX,%04LX,%04LX\r\n",
....................             port1.data_buffer[i].voltage, port1.data_buffer[i].current,
....................             port2.data_buffer[i].voltage, port2.data_buffer[i].current);
0E0D2:  MOVLB  A
0E0D4:  CLRF   x52
0E0D6:  MOVFF  9C1,A51
0E0DA:  CLRF   x54
0E0DC:  MOVLW  04
0E0DE:  MOVWF  x53
0E0E0:  MOVLB  0
0E0E2:  CALL   823E
0E0E6:  MOVFF  02,03
0E0EA:  MOVF   01,W
0E0EC:  ADDLW  B6
0E0EE:  MOVWF  FE9
0E0F0:  MOVLW  01
0E0F2:  ADDWFC 03,W
0E0F4:  MOVWF  FEA
0E0F6:  MOVFF  FEC,9C5
0E0FA:  MOVF   FED,F
0E0FC:  MOVFF  FEF,9C4
0E100:  MOVLB  A
0E102:  CLRF   x52
0E104:  MOVFF  9C1,A51
0E108:  CLRF   x54
0E10A:  MOVLW  04
0E10C:  MOVWF  x53
0E10E:  MOVLB  0
0E110:  CALL   823E
0E114:  MOVFF  02,03
0E118:  MOVF   01,W
0E11A:  ADDLW  03
0E11C:  MOVLB  9
0E11E:  MOVWF  xC6
0E120:  MOVLW  00
0E122:  ADDWFC 03,W
0E124:  MOVWF  xC7
0E126:  MOVLW  02
0E128:  ADDWF  xC6,W
0E12A:  MOVWF  01
0E12C:  MOVLW  00
0E12E:  ADDWFC xC7,W
0E130:  MOVWF  03
0E132:  MOVF   01,W
0E134:  ADDLW  B3
0E136:  MOVWF  FE9
0E138:  MOVLW  01
0E13A:  ADDWFC 03,W
0E13C:  MOVWF  FEA
0E13E:  MOVFF  FEC,9C7
0E142:  MOVF   FED,F
0E144:  MOVFF  FEF,9C6
0E148:  MOVLB  A
0E14A:  CLRF   x52
0E14C:  MOVFF  9C1,A51
0E150:  CLRF   x54
0E152:  MOVLW  04
0E154:  MOVWF  x53
0E156:  MOVLB  0
0E158:  CALL   823E
0E15C:  MOVFF  02,03
0E160:  MOVF   01,W
0E162:  ADDLW  B6
0E164:  MOVWF  FE9
0E166:  MOVLW  05
0E168:  ADDWFC 03,W
0E16A:  MOVWF  FEA
0E16C:  MOVFF  FEC,9CB
0E170:  MOVF   FED,F
0E172:  MOVFF  FEF,9CA
0E176:  MOVLB  A
0E178:  CLRF   x52
0E17A:  MOVFF  9C1,A51
0E17E:  CLRF   x54
0E180:  MOVLW  04
0E182:  MOVWF  x53
0E184:  MOVLB  0
0E186:  CALL   823E
0E18A:  MOVFF  02,03
0E18E:  MOVF   01,W
0E190:  ADDLW  03
0E192:  MOVLB  9
0E194:  MOVWF  xCC
0E196:  MOVLW  00
0E198:  ADDWFC 03,W
0E19A:  MOVWF  xCD
0E19C:  MOVLW  02
0E19E:  ADDWF  xCC,W
0E1A0:  MOVWF  01
0E1A2:  MOVLW  00
0E1A4:  ADDWFC xCD,W
0E1A6:  MOVWF  03
0E1A8:  MOVF   01,W
0E1AA:  ADDLW  B3
0E1AC:  MOVWF  FE9
0E1AE:  MOVLW  05
0E1B0:  ADDWFC 03,W
0E1B2:  MOVWF  FEA
0E1B4:  MOVFF  FEC,9CD
0E1B8:  MOVF   FED,F
0E1BA:  MOVFF  FEF,9CC
0E1BE:  MOVFF  9C5,9E8
0E1C2:  MOVLW  37
0E1C4:  MOVWF  xE9
0E1C6:  MOVLB  0
0E1C8:  CALL   2542
0E1CC:  MOVFF  9C4,9E8
0E1D0:  MOVLW  37
0E1D2:  MOVLB  9
0E1D4:  MOVWF  xE9
0E1D6:  MOVLB  0
0E1D8:  CALL   2542
0E1DC:  MOVLW  2C
0E1DE:  BTFSS  FA6.6
0E1E0:  GOTO   E1DE
0E1E4:  MOVLB  E
0E1E6:  MOVWF  xF9
0E1E8:  MOVFF  9C7,9E8
0E1EC:  MOVLW  37
0E1EE:  MOVLB  9
0E1F0:  MOVWF  xE9
0E1F2:  MOVLB  0
0E1F4:  CALL   2542
0E1F8:  MOVFF  9C6,9E8
0E1FC:  MOVLW  37
0E1FE:  MOVLB  9
0E200:  MOVWF  xE9
0E202:  MOVLB  0
0E204:  CALL   2542
0E208:  MOVLW  2C
0E20A:  BTFSS  FA6.6
0E20C:  GOTO   E20A
0E210:  MOVLB  E
0E212:  MOVWF  xF9
0E214:  MOVFF  9CB,9E8
0E218:  MOVLW  37
0E21A:  MOVLB  9
0E21C:  MOVWF  xE9
0E21E:  MOVLB  0
0E220:  CALL   2542
0E224:  MOVFF  9CA,9E8
0E228:  MOVLW  37
0E22A:  MOVLB  9
0E22C:  MOVWF  xE9
0E22E:  MOVLB  0
0E230:  CALL   2542
0E234:  MOVLW  2C
0E236:  BTFSS  FA6.6
0E238:  GOTO   E236
0E23C:  MOVLB  E
0E23E:  MOVWF  xF9
0E240:  MOVFF  9CD,9E8
0E244:  MOVLW  37
0E246:  MOVLB  9
0E248:  MOVWF  xE9
0E24A:  MOVLB  0
0E24C:  CALL   2542
0E250:  MOVFF  9CC,9E8
0E254:  MOVLW  37
0E256:  MOVLB  9
0E258:  MOVWF  xE9
0E25A:  MOVLB  0
0E25C:  CALL   2542
0E260:  MOVLW  0D
0E262:  BTFSS  FA6.6
0E264:  GOTO   E262
0E268:  MOVLB  E
0E26A:  MOVWF  xF9
0E26C:  MOVLW  0A
0E26E:  MOVLB  0
0E270:  BTFSS  FA6.6
0E272:  GOTO   E270
0E276:  MOVLB  E
0E278:  MOVWF  xF9
0E27A:  MOVLB  0
0E27C:  MOVLB  9
0E27E:  INCF   xC1,F
0E280:  MOVLB  0
0E282:  GOTO   E0B0
....................     }
....................     log_meas_data(&measured_data, &port1);
0E286:  MOVLW  09
0E288:  MOVLB  9
0E28A:  MOVWF  xC3
0E28C:  MOVLW  B5
0E28E:  MOVWF  xC2
0E290:  MOVLW  01
0E292:  MOVWF  xC5
0E294:  MOVLW  B3
0E296:  MOVWF  xC4
0E298:  MOVLB  0
0E29A:  CALL   927A
....................     log_meas_data(&measured_data, &port2);
0E29E:  MOVLW  09
0E2A0:  MOVLB  9
0E2A2:  MOVWF  xC3
0E2A4:  MOVLW  B5
0E2A6:  MOVWF  xC2
0E2A8:  MOVLW  05
0E2AA:  MOVWF  xC5
0E2AC:  MOVLW  B3
0E2AE:  MOVWF  xC4
0E2B0:  MOVLB  0
0E2B2:  CALL   927A
....................     misf_update_address_area();
0E2B6:  CALL   505C
0E2BA:  GOTO   F8EC (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit)
.................... {
....................     fprintf(PC, ".");
*
0B276:  MOVLW  2E
0B278:  BTFSS  FA6.6
0B27A:  GOTO   B278
0B27E:  MOVLB  E
0B280:  MOVWF  xF9
....................     
....................     
....................     connect_port1();
0B282:  MOVLB  0
0B284:  CALL   5212
....................     connect_port2();
0B288:  CALL   521A
....................     // Enable both CIGS ports
....................     mcp4901_1_write(0); 
0B28C:  MOVLB  9
0B28E:  CLRF   xDD
0B290:  CLRF   xDC
0B292:  MOVLB  0
0B294:  CALL   2872
....................     mcp4901_2_write(0);
0B298:  MOVLB  9
0B29A:  CLRF   xDD
0B29C:  CLRF   xDC
0B29E:  MOVLB  0
0B2A0:  CALL   28B0
....................     connect_port1();
0B2A4:  CALL   5212
....................     connect_port2();
0B2A8:  CALL   521A
.................... 
....................     // Stabilization wait
....................     delay_ms(100);
0B2AC:  MOVLW  64
0B2AE:  MOVLB  B
0B2B0:  MOVWF  x02
0B2B2:  MOVLB  0
0B2B4:  CALL   22AE
....................     
....................     // Init Port1
....................     sweep_debug_config_t port1 = {0};
0B2B8:  MOVLB  1
0B2BA:  CLRF   xC9
0B2BC:  CLRF   xCA
0B2BE:  CLRF   xCB
0B2C0:  CLRF   xCC
0B2C2:  CLRF   xCD
0B2C4:  CLRF   xCE
0B2C6:  CLRF   xCF
0B2C8:  CLRF   xD0
0B2CA:  CLRF   xD1
0B2CC:  CLRF   xD2
0B2CE:  CLRF   xD3
0B2D0:  CLRF   xD4
0B2D2:  CLRF   xD5
0B2D4:  CLRF   xD6
0B2D6:  CLRF   xD7
0B2D8:  CLRF   xD8
0B2DA:  CLRF   xD9
0B2DC:  CLRF   xDA
0B2DE:  CLRF   xDB
0B2E0:  CLRF   xDC
0B2E2:  CLRF   xDD
0B2E4:  CLRF   xDE
0B2E6:  CLRF   xDF
0B2E8:  CLRF   xE0
0B2EA:  CLRF   xE1
0B2EC:  CLRF   xE2
0B2EE:  CLRF   xE3
0B2F0:  CLRF   xE4
0B2F2:  CLRF   xE5
0B2F4:  CLRF   xE6
0B2F6:  CLRF   xE7
0B2F8:  CLRF   xE8
0B2FA:  CLRF   xE9
0B2FC:  CLRF   xEA
0B2FE:  CLRF   xEB
0B300:  CLRF   xEC
0B302:  CLRF   xED
0B304:  CLRF   xEE
0B306:  CLRF   xEF
0B308:  CLRF   xF0
0B30A:  CLRF   xF1
0B30C:  CLRF   xF2
0B30E:  CLRF   xF3
0B310:  CLRF   xF4
0B312:  CLRF   xF5
0B314:  CLRF   xF6
0B316:  CLRF   xF7
0B318:  CLRF   xF8
0B31A:  CLRF   xF9
0B31C:  CLRF   xFA
0B31E:  CLRF   xFB
0B320:  CLRF   xFC
0B322:  CLRF   xFD
0B324:  CLRF   xFE
0B326:  CLRF   xFF
0B328:  MOVLB  2
0B32A:  CLRF   x00
0B32C:  CLRF   x01
0B32E:  CLRF   x02
0B330:  CLRF   x03
0B332:  CLRF   x04
0B334:  CLRF   x05
0B336:  CLRF   x06
0B338:  CLRF   x07
0B33A:  CLRF   x08
0B33C:  CLRF   x09
0B33E:  CLRF   x0A
0B340:  CLRF   x0B
0B342:  CLRF   x0C
0B344:  CLRF   x0D
0B346:  CLRF   x0E
0B348:  CLRF   x0F
0B34A:  CLRF   x10
0B34C:  CLRF   x11
0B34E:  CLRF   x12
0B350:  CLRF   x13
0B352:  CLRF   x14
0B354:  CLRF   x15
0B356:  CLRF   x16
0B358:  CLRF   x17
0B35A:  CLRF   x18
0B35C:  CLRF   x19
0B35E:  CLRF   x1A
0B360:  CLRF   x1B
0B362:  CLRF   x1C
0B364:  CLRF   x1D
0B366:  CLRF   x1E
0B368:  CLRF   x1F
0B36A:  CLRF   x20
0B36C:  CLRF   x21
0B36E:  CLRF   x22
0B370:  CLRF   x23
0B372:  CLRF   x24
0B374:  CLRF   x25
0B376:  CLRF   x26
0B378:  CLRF   x27
0B37A:  CLRF   x28
0B37C:  CLRF   x29
0B37E:  CLRF   x2A
0B380:  CLRF   x2B
0B382:  CLRF   x2C
0B384:  CLRF   x2D
0B386:  CLRF   x2E
0B388:  CLRF   x2F
0B38A:  CLRF   x30
0B38C:  CLRF   x31
0B38E:  CLRF   x32
0B390:  CLRF   x33
0B392:  CLRF   x34
0B394:  CLRF   x35
0B396:  CLRF   x36
0B398:  CLRF   x37
0B39A:  CLRF   x38
0B39C:  CLRF   x39
0B39E:  CLRF   x3A
0B3A0:  CLRF   x3B
0B3A2:  CLRF   x3C
0B3A4:  CLRF   x3D
0B3A6:  CLRF   x3E
0B3A8:  CLRF   x3F
0B3AA:  CLRF   x40
0B3AC:  CLRF   x41
0B3AE:  CLRF   x42
0B3B0:  CLRF   x43
0B3B2:  CLRF   x44
0B3B4:  CLRF   x45
0B3B6:  CLRF   x46
0B3B8:  CLRF   x47
0B3BA:  CLRF   x48
0B3BC:  CLRF   x49
0B3BE:  CLRF   x4A
0B3C0:  CLRF   x4B
0B3C2:  CLRF   x4C
0B3C4:  CLRF   x4D
0B3C6:  CLRF   x4E
0B3C8:  CLRF   x4F
0B3CA:  CLRF   x50
0B3CC:  CLRF   x51
0B3CE:  CLRF   x52
0B3D0:  CLRF   x53
0B3D2:  CLRF   x54
0B3D4:  CLRF   x55
0B3D6:  CLRF   x56
0B3D8:  CLRF   x57
0B3DA:  CLRF   x58
0B3DC:  CLRF   x59
0B3DE:  CLRF   x5A
0B3E0:  CLRF   x5B
0B3E2:  CLRF   x5C
0B3E4:  CLRF   x5D
0B3E6:  CLRF   x5E
0B3E8:  CLRF   x5F
0B3EA:  CLRF   x60
0B3EC:  CLRF   x61
0B3EE:  CLRF   x62
0B3F0:  CLRF   x63
0B3F2:  CLRF   x64
0B3F4:  CLRF   x65
0B3F6:  CLRF   x66
0B3F8:  CLRF   x67
0B3FA:  CLRF   x68
0B3FC:  CLRF   x69
0B3FE:  CLRF   x6A
0B400:  CLRF   x6B
0B402:  CLRF   x6C
0B404:  CLRF   x6D
0B406:  CLRF   x6E
0B408:  CLRF   x6F
0B40A:  CLRF   x70
0B40C:  CLRF   x71
0B40E:  CLRF   x72
0B410:  CLRF   x73
0B412:  CLRF   x74
0B414:  CLRF   x75
0B416:  CLRF   x76
0B418:  CLRF   x77
0B41A:  CLRF   x78
0B41C:  CLRF   x79
0B41E:  CLRF   x7A
0B420:  CLRF   x7B
0B422:  CLRF   x7C
0B424:  CLRF   x7D
0B426:  CLRF   x7E
0B428:  CLRF   x7F
0B42A:  CLRF   x80
0B42C:  CLRF   x81
0B42E:  CLRF   x82
0B430:  CLRF   x83
0B432:  CLRF   x84
0B434:  CLRF   x85
0B436:  CLRF   x86
0B438:  CLRF   x87
0B43A:  CLRF   x88
0B43C:  CLRF   x89
0B43E:  CLRF   x8A
0B440:  CLRF   x8B
0B442:  CLRF   x8C
0B444:  CLRF   x8D
0B446:  CLRF   x8E
0B448:  CLRF   x8F
0B44A:  CLRF   x90
0B44C:  CLRF   x91
0B44E:  CLRF   x92
0B450:  CLRF   x93
0B452:  CLRF   x94
0B454:  CLRF   x95
0B456:  CLRF   x96
0B458:  CLRF   x97
0B45A:  CLRF   x98
0B45C:  CLRF   x99
0B45E:  CLRF   x9A
0B460:  CLRF   x9B
0B462:  CLRF   x9C
0B464:  CLRF   x9D
0B466:  CLRF   x9E
0B468:  CLRF   x9F
0B46A:  CLRF   xA0
0B46C:  CLRF   xA1
0B46E:  CLRF   xA2
0B470:  CLRF   xA3
0B472:  CLRF   xA4
0B474:  CLRF   xA5
0B476:  CLRF   xA6
0B478:  CLRF   xA7
0B47A:  CLRF   xA8
0B47C:  CLRF   xA9
0B47E:  CLRF   xAA
0B480:  CLRF   xAB
0B482:  CLRF   xAC
0B484:  CLRF   xAD
0B486:  CLRF   xAE
0B488:  CLRF   xAF
0B48A:  CLRF   xB0
0B48C:  CLRF   xB1
0B48E:  CLRF   xB2
0B490:  CLRF   xB3
0B492:  CLRF   xB4
0B494:  CLRF   xB5
0B496:  CLRF   xB6
0B498:  CLRF   xB7
0B49A:  CLRF   xB8
0B49C:  CLRF   xB9
0B49E:  CLRF   xBA
0B4A0:  CLRF   xBB
0B4A2:  CLRF   xBC
0B4A4:  CLRF   xBD
0B4A6:  CLRF   xBE
0B4A8:  CLRF   xBF
0B4AA:  CLRF   xC0
0B4AC:  CLRF   xC1
0B4AE:  CLRF   xC2
0B4B0:  CLRF   xC3
0B4B2:  CLRF   xC4
0B4B4:  CLRF   xC5
0B4B6:  CLRF   xC6
0B4B8:  CLRF   xC7
0B4BA:  CLRF   xC8
0B4BC:  CLRF   xC9
0B4BE:  CLRF   xCA
0B4C0:  CLRF   xCB
0B4C2:  CLRF   xCC
0B4C4:  CLRF   xCD
0B4C6:  CLRF   xCE
0B4C8:  CLRF   xCF
0B4CA:  CLRF   xD0
0B4CC:  CLRF   xD1
0B4CE:  CLRF   xD2
0B4D0:  CLRF   xD3
0B4D2:  CLRF   xD4
0B4D4:  CLRF   xD5
0B4D6:  CLRF   xD6
0B4D8:  CLRF   xD7
0B4DA:  CLRF   xD8
0B4DC:  CLRF   xD9
0B4DE:  CLRF   xDA
0B4E0:  CLRF   xDB
0B4E2:  CLRF   xDC
0B4E4:  CLRF   xDD
0B4E6:  CLRF   xDE
0B4E8:  CLRF   xDF
0B4EA:  CLRF   xE0
0B4EC:  CLRF   xE1
0B4EE:  CLRF   xE2
0B4F0:  CLRF   xE3
0B4F2:  CLRF   xE4
0B4F4:  CLRF   xE5
0B4F6:  CLRF   xE6
0B4F8:  CLRF   xE7
0B4FA:  CLRF   xE8
0B4FC:  CLRF   xE9
0B4FE:  CLRF   xEA
0B500:  CLRF   xEB
0B502:  CLRF   xEC
0B504:  CLRF   xED
0B506:  CLRF   xEE
0B508:  CLRF   xEF
0B50A:  CLRF   xF0
0B50C:  CLRF   xF1
0B50E:  CLRF   xF2
0B510:  CLRF   xF3
0B512:  CLRF   xF4
0B514:  CLRF   xF5
0B516:  CLRF   xF6
0B518:  CLRF   xF7
0B51A:  CLRF   xF8
0B51C:  CLRF   xF9
0B51E:  CLRF   xFA
0B520:  CLRF   xFB
0B522:  CLRF   xFC
0B524:  CLRF   xFD
0B526:  CLRF   xFE
0B528:  CLRF   xFF
0B52A:  MOVLB  3
0B52C:  CLRF   x00
0B52E:  CLRF   x01
0B530:  CLRF   x02
0B532:  CLRF   x03
0B534:  CLRF   x04
0B536:  CLRF   x05
0B538:  CLRF   x06
0B53A:  CLRF   x07
0B53C:  CLRF   x08
0B53E:  CLRF   x09
0B540:  CLRF   x0A
0B542:  CLRF   x0B
0B544:  CLRF   x0C
0B546:  CLRF   x0D
0B548:  CLRF   x0E
0B54A:  CLRF   x0F
0B54C:  CLRF   x10
0B54E:  CLRF   x11
0B550:  CLRF   x12
0B552:  CLRF   x13
0B554:  CLRF   x14
0B556:  CLRF   x15
0B558:  CLRF   x16
0B55A:  CLRF   x17
0B55C:  CLRF   x18
0B55E:  CLRF   x19
0B560:  CLRF   x1A
0B562:  CLRF   x1B
0B564:  CLRF   x1C
0B566:  CLRF   x1D
0B568:  CLRF   x1E
0B56A:  CLRF   x1F
0B56C:  CLRF   x20
0B56E:  CLRF   x21
0B570:  CLRF   x22
0B572:  CLRF   x23
0B574:  CLRF   x24
0B576:  CLRF   x25
0B578:  CLRF   x26
0B57A:  CLRF   x27
0B57C:  CLRF   x28
0B57E:  CLRF   x29
0B580:  CLRF   x2A
0B582:  CLRF   x2B
0B584:  CLRF   x2C
0B586:  CLRF   x2D
0B588:  CLRF   x2E
0B58A:  CLRF   x2F
0B58C:  CLRF   x30
0B58E:  CLRF   x31
0B590:  CLRF   x32
0B592:  CLRF   x33
0B594:  CLRF   x34
0B596:  CLRF   x35
0B598:  CLRF   x36
0B59A:  CLRF   x37
0B59C:  CLRF   x38
0B59E:  CLRF   x39
0B5A0:  CLRF   x3A
0B5A2:  CLRF   x3B
0B5A4:  CLRF   x3C
0B5A6:  CLRF   x3D
0B5A8:  CLRF   x3E
0B5AA:  CLRF   x3F
0B5AC:  CLRF   x40
0B5AE:  CLRF   x41
0B5B0:  CLRF   x42
0B5B2:  CLRF   x43
0B5B4:  CLRF   x44
0B5B6:  CLRF   x45
0B5B8:  CLRF   x46
0B5BA:  CLRF   x47
0B5BC:  CLRF   x48
0B5BE:  CLRF   x49
0B5C0:  CLRF   x4A
0B5C2:  CLRF   x4B
0B5C4:  CLRF   x4C
0B5C6:  CLRF   x4D
0B5C8:  CLRF   x4E
0B5CA:  CLRF   x4F
0B5CC:  CLRF   x50
0B5CE:  CLRF   x51
0B5D0:  CLRF   x52
0B5D2:  CLRF   x53
0B5D4:  CLRF   x54
0B5D6:  CLRF   x55
0B5D8:  CLRF   x56
0B5DA:  CLRF   x57
0B5DC:  CLRF   x58
0B5DE:  CLRF   x59
0B5E0:  CLRF   x5A
0B5E2:  CLRF   x5B
0B5E4:  CLRF   x5C
0B5E6:  CLRF   x5D
0B5E8:  CLRF   x5E
0B5EA:  CLRF   x5F
0B5EC:  CLRF   x60
0B5EE:  CLRF   x61
0B5F0:  CLRF   x62
0B5F2:  CLRF   x63
0B5F4:  CLRF   x64
0B5F6:  CLRF   x65
0B5F8:  CLRF   x66
0B5FA:  CLRF   x67
0B5FC:  CLRF   x68
0B5FE:  CLRF   x69
0B600:  CLRF   x6A
0B602:  CLRF   x6B
0B604:  CLRF   x6C
0B606:  CLRF   x6D
0B608:  CLRF   x6E
0B60A:  CLRF   x6F
0B60C:  CLRF   x70
0B60E:  CLRF   x71
0B610:  CLRF   x72
0B612:  CLRF   x73
0B614:  CLRF   x74
0B616:  CLRF   x75
0B618:  CLRF   x76
0B61A:  CLRF   x77
0B61C:  CLRF   x78
0B61E:  CLRF   x79
0B620:  CLRF   x7A
0B622:  CLRF   x7B
0B624:  CLRF   x7C
0B626:  CLRF   x7D
0B628:  CLRF   x7E
0B62A:  CLRF   x7F
0B62C:  CLRF   x80
0B62E:  CLRF   x81
0B630:  CLRF   x82
0B632:  CLRF   x83
0B634:  CLRF   x84
0B636:  CLRF   x85
0B638:  CLRF   x86
0B63A:  CLRF   x87
0B63C:  CLRF   x88
0B63E:  CLRF   x89
0B640:  CLRF   x8A
0B642:  CLRF   x8B
0B644:  CLRF   x8C
0B646:  CLRF   x8D
0B648:  CLRF   x8E
0B64A:  CLRF   x8F
0B64C:  CLRF   x90
0B64E:  CLRF   x91
0B650:  CLRF   x92
0B652:  CLRF   x93
0B654:  CLRF   x94
0B656:  CLRF   x95
0B658:  CLRF   x96
0B65A:  CLRF   x97
0B65C:  CLRF   x98
0B65E:  CLRF   x99
0B660:  CLRF   x9A
0B662:  CLRF   x9B
0B664:  CLRF   x9C
0B666:  CLRF   x9D
0B668:  CLRF   x9E
0B66A:  CLRF   x9F
0B66C:  CLRF   xA0
0B66E:  CLRF   xA1
0B670:  CLRF   xA2
0B672:  CLRF   xA3
0B674:  CLRF   xA4
0B676:  CLRF   xA5
0B678:  CLRF   xA6
0B67A:  CLRF   xA7
0B67C:  CLRF   xA8
0B67E:  CLRF   xA9
0B680:  CLRF   xAA
0B682:  CLRF   xAB
0B684:  CLRF   xAC
0B686:  CLRF   xAD
0B688:  CLRF   xAE
0B68A:  CLRF   xAF
0B68C:  CLRF   xB0
0B68E:  CLRF   xB1
0B690:  CLRF   xB2
0B692:  CLRF   xB3
0B694:  CLRF   xB4
0B696:  CLRF   xB5
0B698:  CLRF   xB6
0B69A:  CLRF   xB7
0B69C:  CLRF   xB8
0B69E:  CLRF   xB9
0B6A0:  CLRF   xBA
0B6A2:  CLRF   xBB
0B6A4:  CLRF   xBC
0B6A6:  CLRF   xBD
0B6A8:  CLRF   xBE
0B6AA:  CLRF   xBF
0B6AC:  CLRF   xC0
0B6AE:  CLRF   xC1
0B6B0:  CLRF   xC2
0B6B2:  CLRF   xC3
0B6B4:  CLRF   xC4
0B6B6:  CLRF   xC5
0B6B8:  CLRF   xC6
0B6BA:  CLRF   xC7
0B6BC:  CLRF   xC8
0B6BE:  CLRF   xC9
0B6C0:  CLRF   xCA
0B6C2:  CLRF   xCB
0B6C4:  CLRF   xCC
0B6C6:  CLRF   xCD
0B6C8:  CLRF   xCE
0B6CA:  CLRF   xCF
0B6CC:  CLRF   xD0
0B6CE:  CLRF   xD1
0B6D0:  CLRF   xD2
0B6D2:  CLRF   xD3
0B6D4:  CLRF   xD4
0B6D6:  CLRF   xD5
0B6D8:  CLRF   xD6
0B6DA:  CLRF   xD7
0B6DC:  CLRF   xD8
0B6DE:  CLRF   xD9
0B6E0:  CLRF   xDA
0B6E2:  CLRF   xDB
0B6E4:  CLRF   xDC
0B6E6:  CLRF   xDD
0B6E8:  CLRF   xDE
0B6EA:  CLRF   xDF
0B6EC:  CLRF   xE0
0B6EE:  CLRF   xE1
0B6F0:  CLRF   xE2
0B6F2:  CLRF   xE3
0B6F4:  CLRF   xE4
0B6F6:  CLRF   xE5
0B6F8:  CLRF   xE6
0B6FA:  CLRF   xE7
0B6FC:  CLRF   xE8
0B6FE:  CLRF   xE9
0B700:  CLRF   xEA
0B702:  CLRF   xEB
0B704:  CLRF   xEC
0B706:  CLRF   xED
0B708:  CLRF   xEE
0B70A:  CLRF   xEF
0B70C:  CLRF   xF0
0B70E:  CLRF   xF1
0B710:  CLRF   xF2
0B712:  CLRF   xF3
0B714:  CLRF   xF4
0B716:  CLRF   xF5
0B718:  CLRF   xF6
0B71A:  CLRF   xF7
0B71C:  CLRF   xF8
0B71E:  CLRF   xF9
0B720:  CLRF   xFA
0B722:  CLRF   xFB
0B724:  CLRF   xFC
0B726:  CLRF   xFD
0B728:  CLRF   xFE
0B72A:  CLRF   xFF
0B72C:  MOVLB  4
0B72E:  CLRF   x00
0B730:  CLRF   x01
0B732:  CLRF   x02
0B734:  CLRF   x03
0B736:  CLRF   x04
0B738:  CLRF   x05
0B73A:  CLRF   x06
0B73C:  CLRF   x07
0B73E:  CLRF   x08
0B740:  CLRF   x09
0B742:  CLRF   x0A
0B744:  CLRF   x0B
0B746:  CLRF   x0C
0B748:  CLRF   x0D
0B74A:  CLRF   x0E
0B74C:  CLRF   x0F
0B74E:  CLRF   x10
0B750:  CLRF   x11
0B752:  CLRF   x12
0B754:  CLRF   x13
0B756:  CLRF   x14
0B758:  CLRF   x15
0B75A:  CLRF   x16
0B75C:  CLRF   x17
0B75E:  CLRF   x18
0B760:  CLRF   x19
0B762:  CLRF   x1A
0B764:  CLRF   x1B
0B766:  CLRF   x1C
0B768:  CLRF   x1D
0B76A:  CLRF   x1E
0B76C:  CLRF   x1F
0B76E:  CLRF   x20
0B770:  CLRF   x21
0B772:  CLRF   x22
0B774:  CLRF   x23
0B776:  CLRF   x24
0B778:  CLRF   x25
0B77A:  CLRF   x26
0B77C:  CLRF   x27
0B77E:  CLRF   x28
0B780:  CLRF   x29
0B782:  CLRF   x2A
0B784:  CLRF   x2B
0B786:  CLRF   x2C
0B788:  CLRF   x2D
0B78A:  CLRF   x2E
0B78C:  CLRF   x2F
0B78E:  CLRF   x30
0B790:  CLRF   x31
0B792:  CLRF   x32
0B794:  CLRF   x33
0B796:  CLRF   x34
0B798:  CLRF   x35
0B79A:  CLRF   x36
0B79C:  CLRF   x37
0B79E:  CLRF   x38
0B7A0:  CLRF   x39
0B7A2:  CLRF   x3A
0B7A4:  CLRF   x3B
0B7A6:  CLRF   x3C
0B7A8:  CLRF   x3D
0B7AA:  CLRF   x3E
0B7AC:  CLRF   x3F
0B7AE:  CLRF   x40
0B7B0:  CLRF   x41
0B7B2:  CLRF   x42
0B7B4:  CLRF   x43
0B7B6:  CLRF   x44
0B7B8:  CLRF   x45
0B7BA:  CLRF   x46
0B7BC:  CLRF   x47
0B7BE:  CLRF   x48
0B7C0:  CLRF   x49
0B7C2:  CLRF   x4A
0B7C4:  CLRF   x4B
0B7C6:  CLRF   x4C
0B7C8:  CLRF   x4D
0B7CA:  CLRF   x4E
0B7CC:  CLRF   x4F
0B7CE:  CLRF   x50
0B7D0:  CLRF   x51
0B7D2:  CLRF   x52
0B7D4:  CLRF   x53
0B7D6:  CLRF   x54
0B7D8:  CLRF   x55
0B7DA:  CLRF   x56
0B7DC:  CLRF   x57
0B7DE:  CLRF   x58
0B7E0:  CLRF   x59
0B7E2:  CLRF   x5A
0B7E4:  CLRF   x5B
0B7E6:  CLRF   x5C
0B7E8:  CLRF   x5D
0B7EA:  CLRF   x5E
0B7EC:  CLRF   x5F
0B7EE:  CLRF   x60
0B7F0:  CLRF   x61
0B7F2:  CLRF   x62
0B7F4:  CLRF   x63
0B7F6:  CLRF   x64
0B7F8:  CLRF   x65
0B7FA:  CLRF   x66
0B7FC:  CLRF   x67
0B7FE:  CLRF   x68
0B800:  CLRF   x69
0B802:  CLRF   x6A
0B804:  CLRF   x6B
0B806:  CLRF   x6C
0B808:  CLRF   x6D
0B80A:  CLRF   x6E
0B80C:  CLRF   x6F
0B80E:  CLRF   x70
0B810:  CLRF   x71
0B812:  CLRF   x72
0B814:  CLRF   x73
0B816:  CLRF   x74
0B818:  CLRF   x75
0B81A:  CLRF   x76
0B81C:  CLRF   x77
0B81E:  CLRF   x78
0B820:  CLRF   x79
0B822:  CLRF   x7A
0B824:  CLRF   x7B
0B826:  CLRF   x7C
0B828:  CLRF   x7D
0B82A:  CLRF   x7E
0B82C:  CLRF   x7F
0B82E:  CLRF   x80
0B830:  CLRF   x81
0B832:  CLRF   x82
0B834:  CLRF   x83
0B836:  CLRF   x84
0B838:  CLRF   x85
0B83A:  CLRF   x86
0B83C:  CLRF   x87
0B83E:  CLRF   x88
0B840:  CLRF   x89
0B842:  CLRF   x8A
0B844:  CLRF   x8B
0B846:  CLRF   x8C
0B848:  CLRF   x8D
0B84A:  CLRF   x8E
0B84C:  CLRF   x8F
0B84E:  CLRF   x90
0B850:  CLRF   x91
0B852:  CLRF   x92
0B854:  CLRF   x93
0B856:  CLRF   x94
0B858:  CLRF   x95
0B85A:  CLRF   x96
0B85C:  CLRF   x97
0B85E:  CLRF   x98
0B860:  CLRF   x99
0B862:  CLRF   x9A
0B864:  CLRF   x9B
0B866:  CLRF   x9C
0B868:  CLRF   x9D
0B86A:  CLRF   x9E
0B86C:  CLRF   x9F
0B86E:  CLRF   xA0
0B870:  CLRF   xA1
0B872:  CLRF   xA2
0B874:  CLRF   xA3
0B876:  CLRF   xA4
0B878:  CLRF   xA5
0B87A:  CLRF   xA6
0B87C:  CLRF   xA7
0B87E:  CLRF   xA8
0B880:  CLRF   xA9
0B882:  CLRF   xAA
0B884:  CLRF   xAB
0B886:  CLRF   xAC
0B888:  CLRF   xAD
0B88A:  CLRF   xAE
0B88C:  CLRF   xAF
0B88E:  CLRF   xB0
0B890:  CLRF   xB1
0B892:  CLRF   xB2
0B894:  CLRF   xB3
0B896:  CLRF   xB4
0B898:  CLRF   xB5
0B89A:  CLRF   xB6
0B89C:  CLRF   xB7
0B89E:  CLRF   xB8
0B8A0:  CLRF   xB9
0B8A2:  CLRF   xBA
0B8A4:  CLRF   xBB
0B8A6:  CLRF   xBC
0B8A8:  CLRF   xBD
0B8AA:  CLRF   xBE
0B8AC:  CLRF   xBF
0B8AE:  CLRF   xC0
0B8B0:  CLRF   xC1
0B8B2:  CLRF   xC2
0B8B4:  CLRF   xC3
0B8B6:  CLRF   xC4
0B8B8:  CLRF   xC5
0B8BA:  CLRF   xC6
0B8BC:  CLRF   xC7
0B8BE:  CLRF   xC8
0B8C0:  CLRF   xC9
0B8C2:  CLRF   xCA
0B8C4:  CLRF   xCB
0B8C6:  CLRF   xCC
0B8C8:  CLRF   xCD
0B8CA:  CLRF   xCE
0B8CC:  CLRF   xCF
0B8CE:  CLRF   xD0
0B8D0:  CLRF   xD1
0B8D2:  CLRF   xD2
0B8D4:  CLRF   xD3
0B8D6:  CLRF   xD4
0B8D8:  CLRF   xD5
0B8DA:  CLRF   xD6
0B8DC:  CLRF   xD7
0B8DE:  CLRF   xD8
0B8E0:  CLRF   xD9
0B8E2:  CLRF   xDA
0B8E4:  CLRF   xDB
0B8E6:  CLRF   xDC
0B8E8:  CLRF   xDD
0B8EA:  CLRF   xDE
0B8EC:  CLRF   xDF
0B8EE:  CLRF   xE0
0B8F0:  CLRF   xE1
0B8F2:  CLRF   xE2
0B8F4:  CLRF   xE3
0B8F6:  CLRF   xE4
0B8F8:  CLRF   xE5
0B8FA:  CLRF   xE6
0B8FC:  CLRF   xE7
0B8FE:  CLRF   xE8
0B900:  CLRF   xE9
0B902:  CLRF   xEA
0B904:  CLRF   xEB
0B906:  CLRF   xEC
0B908:  CLRF   xED
0B90A:  CLRF   xEE
0B90C:  CLRF   xEF
0B90E:  CLRF   xF0
0B910:  CLRF   xF1
0B912:  CLRF   xF2
0B914:  CLRF   xF3
0B916:  CLRF   xF4
0B918:  CLRF   xF5
0B91A:  CLRF   xF6
0B91C:  CLRF   xF7
0B91E:  CLRF   xF8
0B920:  CLRF   xF9
0B922:  CLRF   xFA
0B924:  CLRF   xFB
0B926:  CLRF   xFC
0B928:  CLRF   xFD
0B92A:  CLRF   xFE
0B92C:  CLRF   xFF
0B92E:  MOVLB  5
0B930:  CLRF   x00
0B932:  CLRF   x01
0B934:  CLRF   x02
0B936:  CLRF   x03
0B938:  CLRF   x04
0B93A:  CLRF   x05
0B93C:  CLRF   x06
0B93E:  CLRF   x07
0B940:  CLRF   x08
0B942:  CLRF   x09
0B944:  CLRF   x0A
0B946:  CLRF   x0B
0B948:  CLRF   x0C
0B94A:  CLRF   x0D
0B94C:  CLRF   x0E
0B94E:  CLRF   x0F
0B950:  CLRF   x10
0B952:  CLRF   x11
0B954:  CLRF   x12
0B956:  CLRF   x13
0B958:  CLRF   x14
0B95A:  CLRF   x15
0B95C:  CLRF   x16
0B95E:  CLRF   x17
0B960:  CLRF   x18
0B962:  CLRF   x19
0B964:  CLRF   x1A
0B966:  CLRF   x1B
0B968:  CLRF   x1C
0B96A:  CLRF   x1D
0B96C:  CLRF   x1E
0B96E:  CLRF   x1F
0B970:  CLRF   x20
0B972:  CLRF   x21
0B974:  CLRF   x22
0B976:  CLRF   x23
0B978:  CLRF   x24
0B97A:  CLRF   x25
0B97C:  CLRF   x26
0B97E:  CLRF   x27
0B980:  CLRF   x28
0B982:  CLRF   x29
0B984:  CLRF   x2A
0B986:  CLRF   x2B
0B988:  CLRF   x2C
0B98A:  CLRF   x2D
0B98C:  CLRF   x2E
0B98E:  CLRF   x2F
0B990:  CLRF   x30
0B992:  CLRF   x31
0B994:  CLRF   x32
0B996:  CLRF   x33
0B998:  CLRF   x34
0B99A:  CLRF   x35
0B99C:  CLRF   x36
0B99E:  CLRF   x37
0B9A0:  CLRF   x38
0B9A2:  CLRF   x39
0B9A4:  CLRF   x3A
0B9A6:  CLRF   x3B
0B9A8:  CLRF   x3C
0B9AA:  CLRF   x3D
0B9AC:  CLRF   x3E
0B9AE:  CLRF   x3F
0B9B0:  CLRF   x40
0B9B2:  CLRF   x41
0B9B4:  CLRF   x42
0B9B6:  CLRF   x43
0B9B8:  CLRF   x44
0B9BA:  CLRF   x45
0B9BC:  CLRF   x46
0B9BE:  CLRF   x47
0B9C0:  CLRF   x48
0B9C2:  CLRF   x49
0B9C4:  CLRF   x4A
0B9C6:  CLRF   x4B
0B9C8:  CLRF   x4C
0B9CA:  CLRF   x4D
0B9CC:  CLRF   x4E
0B9CE:  CLRF   x4F
0B9D0:  CLRF   x50
0B9D2:  CLRF   x51
0B9D4:  CLRF   x52
0B9D6:  CLRF   x53
0B9D8:  CLRF   x54
0B9DA:  CLRF   x55
0B9DC:  CLRF   x56
0B9DE:  CLRF   x57
0B9E0:  CLRF   x58
0B9E2:  CLRF   x59
0B9E4:  CLRF   x5A
0B9E6:  CLRF   x5B
0B9E8:  CLRF   x5C
0B9EA:  CLRF   x5D
0B9EC:  CLRF   x5E
0B9EE:  CLRF   x5F
0B9F0:  CLRF   x60
0B9F2:  CLRF   x61
0B9F4:  CLRF   x62
0B9F6:  CLRF   x63
0B9F8:  CLRF   x64
0B9FA:  CLRF   x65
0B9FC:  CLRF   x66
0B9FE:  CLRF   x67
0BA00:  CLRF   x68
0BA02:  CLRF   x69
0BA04:  CLRF   x6A
0BA06:  CLRF   x6B
0BA08:  CLRF   x6C
0BA0A:  CLRF   x6D
0BA0C:  CLRF   x6E
0BA0E:  CLRF   x6F
0BA10:  CLRF   x70
0BA12:  CLRF   x71
0BA14:  CLRF   x72
0BA16:  CLRF   x73
0BA18:  CLRF   x74
0BA1A:  CLRF   x75
0BA1C:  CLRF   x76
0BA1E:  CLRF   x77
0BA20:  CLRF   x78
0BA22:  CLRF   x79
0BA24:  CLRF   x7A
0BA26:  CLRF   x7B
0BA28:  CLRF   x7C
0BA2A:  CLRF   x7D
0BA2C:  CLRF   x7E
0BA2E:  CLRF   x7F
0BA30:  CLRF   x80
0BA32:  CLRF   x81
0BA34:  CLRF   x82
0BA36:  CLRF   x83
0BA38:  CLRF   x84
0BA3A:  CLRF   x85
0BA3C:  CLRF   x86
0BA3E:  CLRF   x87
0BA40:  CLRF   x88
0BA42:  CLRF   x89
0BA44:  CLRF   x8A
0BA46:  CLRF   x8B
0BA48:  CLRF   x8C
0BA4A:  CLRF   x8D
0BA4C:  CLRF   x8E
0BA4E:  CLRF   x8F
0BA50:  CLRF   x90
0BA52:  CLRF   x91
0BA54:  CLRF   x92
0BA56:  CLRF   x93
0BA58:  CLRF   x94
0BA5A:  CLRF   x95
0BA5C:  CLRF   x96
0BA5E:  CLRF   x97
0BA60:  CLRF   x98
0BA62:  CLRF   x99
0BA64:  CLRF   x9A
0BA66:  CLRF   x9B
0BA68:  CLRF   x9C
0BA6A:  CLRF   x9D
0BA6C:  CLRF   x9E
0BA6E:  CLRF   x9F
0BA70:  CLRF   xA0
0BA72:  CLRF   xA1
0BA74:  CLRF   xA2
0BA76:  CLRF   xA3
0BA78:  CLRF   xA4
0BA7A:  CLRF   xA5
0BA7C:  CLRF   xA6
0BA7E:  CLRF   xA7
0BA80:  CLRF   xA8
0BA82:  CLRF   xA9
0BA84:  CLRF   xAA
0BA86:  CLRF   xAB
0BA88:  CLRF   xAC
0BA8A:  CLRF   xAD
0BA8C:  CLRF   xAE
0BA8E:  CLRF   xAF
0BA90:  CLRF   xB0
0BA92:  CLRF   xB1
0BA94:  CLRF   xB2
0BA96:  CLRF   xB3
0BA98:  CLRF   xB4
0BA9A:  CLRF   xB5
0BA9C:  CLRF   xB6
0BA9E:  CLRF   xB7
0BAA0:  CLRF   xB8
0BAA2:  CLRF   xB9
0BAA4:  CLRF   xBA
0BAA6:  CLRF   xBB
0BAA8:  CLRF   xBC
0BAAA:  CLRF   xBD
0BAAC:  CLRF   xBE
0BAAE:  CLRF   xBF
0BAB0:  CLRF   xC0
0BAB2:  CLRF   xC1
0BAB4:  CLRF   xC2
0BAB6:  CLRF   xC3
0BAB8:  CLRF   xC4
0BABA:  CLRF   xC5
0BABC:  CLRF   xC6
0BABE:  CLRF   xC7
0BAC0:  CLRF   xC8
....................     port1.port_num = 1;
0BAC2:  MOVLW  01
0BAC4:  MOVLB  1
0BAC6:  MOVWF  xC9
....................     port1.sweep_step = 0;
0BAC8:  CLRF   xCB
0BACA:  CLRF   xCA
....................     port1.active = 1;
0BACC:  MOVLB  5
0BACE:  BSF    xC8.0
.................... 
....................     // Init Port2
....................     sweep_debug_config_t port2 = {0};
0BAD0:  CLRF   xC9
0BAD2:  CLRF   xCA
0BAD4:  CLRF   xCB
0BAD6:  CLRF   xCC
0BAD8:  CLRF   xCD
0BADA:  CLRF   xCE
0BADC:  CLRF   xCF
0BADE:  CLRF   xD0
0BAE0:  CLRF   xD1
0BAE2:  CLRF   xD2
0BAE4:  CLRF   xD3
0BAE6:  CLRF   xD4
0BAE8:  CLRF   xD5
0BAEA:  CLRF   xD6
0BAEC:  CLRF   xD7
0BAEE:  CLRF   xD8
0BAF0:  CLRF   xD9
0BAF2:  CLRF   xDA
0BAF4:  CLRF   xDB
0BAF6:  CLRF   xDC
0BAF8:  CLRF   xDD
0BAFA:  CLRF   xDE
0BAFC:  CLRF   xDF
0BAFE:  CLRF   xE0
0BB00:  CLRF   xE1
0BB02:  CLRF   xE2
0BB04:  CLRF   xE3
0BB06:  CLRF   xE4
0BB08:  CLRF   xE5
0BB0A:  CLRF   xE6
0BB0C:  CLRF   xE7
0BB0E:  CLRF   xE8
0BB10:  CLRF   xE9
0BB12:  CLRF   xEA
0BB14:  CLRF   xEB
0BB16:  CLRF   xEC
0BB18:  CLRF   xED
0BB1A:  CLRF   xEE
0BB1C:  CLRF   xEF
0BB1E:  CLRF   xF0
0BB20:  CLRF   xF1
0BB22:  CLRF   xF2
0BB24:  CLRF   xF3
0BB26:  CLRF   xF4
0BB28:  CLRF   xF5
0BB2A:  CLRF   xF6
0BB2C:  CLRF   xF7
0BB2E:  CLRF   xF8
0BB30:  CLRF   xF9
0BB32:  CLRF   xFA
0BB34:  CLRF   xFB
0BB36:  CLRF   xFC
0BB38:  CLRF   xFD
0BB3A:  CLRF   xFE
0BB3C:  CLRF   xFF
0BB3E:  MOVLB  6
0BB40:  CLRF   x00
0BB42:  CLRF   x01
0BB44:  CLRF   x02
0BB46:  CLRF   x03
0BB48:  CLRF   x04
0BB4A:  CLRF   x05
0BB4C:  CLRF   x06
0BB4E:  CLRF   x07
0BB50:  CLRF   x08
0BB52:  CLRF   x09
0BB54:  CLRF   x0A
0BB56:  CLRF   x0B
0BB58:  CLRF   x0C
0BB5A:  CLRF   x0D
0BB5C:  CLRF   x0E
0BB5E:  CLRF   x0F
0BB60:  CLRF   x10
0BB62:  CLRF   x11
0BB64:  CLRF   x12
0BB66:  CLRF   x13
0BB68:  CLRF   x14
0BB6A:  CLRF   x15
0BB6C:  CLRF   x16
0BB6E:  CLRF   x17
0BB70:  CLRF   x18
0BB72:  CLRF   x19
0BB74:  CLRF   x1A
0BB76:  CLRF   x1B
0BB78:  CLRF   x1C
0BB7A:  CLRF   x1D
0BB7C:  CLRF   x1E
0BB7E:  CLRF   x1F
0BB80:  CLRF   x20
0BB82:  CLRF   x21
0BB84:  CLRF   x22
0BB86:  CLRF   x23
0BB88:  CLRF   x24
0BB8A:  CLRF   x25
0BB8C:  CLRF   x26
0BB8E:  CLRF   x27
0BB90:  CLRF   x28
0BB92:  CLRF   x29
0BB94:  CLRF   x2A
0BB96:  CLRF   x2B
0BB98:  CLRF   x2C
0BB9A:  CLRF   x2D
0BB9C:  CLRF   x2E
0BB9E:  CLRF   x2F
0BBA0:  CLRF   x30
0BBA2:  CLRF   x31
0BBA4:  CLRF   x32
0BBA6:  CLRF   x33
0BBA8:  CLRF   x34
0BBAA:  CLRF   x35
0BBAC:  CLRF   x36
0BBAE:  CLRF   x37
0BBB0:  CLRF   x38
0BBB2:  CLRF   x39
0BBB4:  CLRF   x3A
0BBB6:  CLRF   x3B
0BBB8:  CLRF   x3C
0BBBA:  CLRF   x3D
0BBBC:  CLRF   x3E
0BBBE:  CLRF   x3F
0BBC0:  CLRF   x40
0BBC2:  CLRF   x41
0BBC4:  CLRF   x42
0BBC6:  CLRF   x43
0BBC8:  CLRF   x44
0BBCA:  CLRF   x45
0BBCC:  CLRF   x46
0BBCE:  CLRF   x47
0BBD0:  CLRF   x48
0BBD2:  CLRF   x49
0BBD4:  CLRF   x4A
0BBD6:  CLRF   x4B
0BBD8:  CLRF   x4C
0BBDA:  CLRF   x4D
0BBDC:  CLRF   x4E
0BBDE:  CLRF   x4F
0BBE0:  CLRF   x50
0BBE2:  CLRF   x51
0BBE4:  CLRF   x52
0BBE6:  CLRF   x53
0BBE8:  CLRF   x54
0BBEA:  CLRF   x55
0BBEC:  CLRF   x56
0BBEE:  CLRF   x57
0BBF0:  CLRF   x58
0BBF2:  CLRF   x59
0BBF4:  CLRF   x5A
0BBF6:  CLRF   x5B
0BBF8:  CLRF   x5C
0BBFA:  CLRF   x5D
0BBFC:  CLRF   x5E
0BBFE:  CLRF   x5F
0BC00:  CLRF   x60
0BC02:  CLRF   x61
0BC04:  CLRF   x62
0BC06:  CLRF   x63
0BC08:  CLRF   x64
0BC0A:  CLRF   x65
0BC0C:  CLRF   x66
0BC0E:  CLRF   x67
0BC10:  CLRF   x68
0BC12:  CLRF   x69
0BC14:  CLRF   x6A
0BC16:  CLRF   x6B
0BC18:  CLRF   x6C
0BC1A:  CLRF   x6D
0BC1C:  CLRF   x6E
0BC1E:  CLRF   x6F
0BC20:  CLRF   x70
0BC22:  CLRF   x71
0BC24:  CLRF   x72
0BC26:  CLRF   x73
0BC28:  CLRF   x74
0BC2A:  CLRF   x75
0BC2C:  CLRF   x76
0BC2E:  CLRF   x77
0BC30:  CLRF   x78
0BC32:  CLRF   x79
0BC34:  CLRF   x7A
0BC36:  CLRF   x7B
0BC38:  CLRF   x7C
0BC3A:  CLRF   x7D
0BC3C:  CLRF   x7E
0BC3E:  CLRF   x7F
0BC40:  CLRF   x80
0BC42:  CLRF   x81
0BC44:  CLRF   x82
0BC46:  CLRF   x83
0BC48:  CLRF   x84
0BC4A:  CLRF   x85
0BC4C:  CLRF   x86
0BC4E:  CLRF   x87
0BC50:  CLRF   x88
0BC52:  CLRF   x89
0BC54:  CLRF   x8A
0BC56:  CLRF   x8B
0BC58:  CLRF   x8C
0BC5A:  CLRF   x8D
0BC5C:  CLRF   x8E
0BC5E:  CLRF   x8F
0BC60:  CLRF   x90
0BC62:  CLRF   x91
0BC64:  CLRF   x92
0BC66:  CLRF   x93
0BC68:  CLRF   x94
0BC6A:  CLRF   x95
0BC6C:  CLRF   x96
0BC6E:  CLRF   x97
0BC70:  CLRF   x98
0BC72:  CLRF   x99
0BC74:  CLRF   x9A
0BC76:  CLRF   x9B
0BC78:  CLRF   x9C
0BC7A:  CLRF   x9D
0BC7C:  CLRF   x9E
0BC7E:  CLRF   x9F
0BC80:  CLRF   xA0
0BC82:  CLRF   xA1
0BC84:  CLRF   xA2
0BC86:  CLRF   xA3
0BC88:  CLRF   xA4
0BC8A:  CLRF   xA5
0BC8C:  CLRF   xA6
0BC8E:  CLRF   xA7
0BC90:  CLRF   xA8
0BC92:  CLRF   xA9
0BC94:  CLRF   xAA
0BC96:  CLRF   xAB
0BC98:  CLRF   xAC
0BC9A:  CLRF   xAD
0BC9C:  CLRF   xAE
0BC9E:  CLRF   xAF
0BCA0:  CLRF   xB0
0BCA2:  CLRF   xB1
0BCA4:  CLRF   xB2
0BCA6:  CLRF   xB3
0BCA8:  CLRF   xB4
0BCAA:  CLRF   xB5
0BCAC:  CLRF   xB6
0BCAE:  CLRF   xB7
0BCB0:  CLRF   xB8
0BCB2:  CLRF   xB9
0BCB4:  CLRF   xBA
0BCB6:  CLRF   xBB
0BCB8:  CLRF   xBC
0BCBA:  CLRF   xBD
0BCBC:  CLRF   xBE
0BCBE:  CLRF   xBF
0BCC0:  CLRF   xC0
0BCC2:  CLRF   xC1
0BCC4:  CLRF   xC2
0BCC6:  CLRF   xC3
0BCC8:  CLRF   xC4
0BCCA:  CLRF   xC5
0BCCC:  CLRF   xC6
0BCCE:  CLRF   xC7
0BCD0:  CLRF   xC8
0BCD2:  CLRF   xC9
0BCD4:  CLRF   xCA
0BCD6:  CLRF   xCB
0BCD8:  CLRF   xCC
0BCDA:  CLRF   xCD
0BCDC:  CLRF   xCE
0BCDE:  CLRF   xCF
0BCE0:  CLRF   xD0
0BCE2:  CLRF   xD1
0BCE4:  CLRF   xD2
0BCE6:  CLRF   xD3
0BCE8:  CLRF   xD4
0BCEA:  CLRF   xD5
0BCEC:  CLRF   xD6
0BCEE:  CLRF   xD7
0BCF0:  CLRF   xD8
0BCF2:  CLRF   xD9
0BCF4:  CLRF   xDA
0BCF6:  CLRF   xDB
0BCF8:  CLRF   xDC
0BCFA:  CLRF   xDD
0BCFC:  CLRF   xDE
0BCFE:  CLRF   xDF
0BD00:  CLRF   xE0
0BD02:  CLRF   xE1
0BD04:  CLRF   xE2
0BD06:  CLRF   xE3
0BD08:  CLRF   xE4
0BD0A:  CLRF   xE5
0BD0C:  CLRF   xE6
0BD0E:  CLRF   xE7
0BD10:  CLRF   xE8
0BD12:  CLRF   xE9
0BD14:  CLRF   xEA
0BD16:  CLRF   xEB
0BD18:  CLRF   xEC
0BD1A:  CLRF   xED
0BD1C:  CLRF   xEE
0BD1E:  CLRF   xEF
0BD20:  CLRF   xF0
0BD22:  CLRF   xF1
0BD24:  CLRF   xF2
0BD26:  CLRF   xF3
0BD28:  CLRF   xF4
0BD2A:  CLRF   xF5
0BD2C:  CLRF   xF6
0BD2E:  CLRF   xF7
0BD30:  CLRF   xF8
0BD32:  CLRF   xF9
0BD34:  CLRF   xFA
0BD36:  CLRF   xFB
0BD38:  CLRF   xFC
0BD3A:  CLRF   xFD
0BD3C:  CLRF   xFE
0BD3E:  CLRF   xFF
0BD40:  MOVLB  7
0BD42:  CLRF   x00
0BD44:  CLRF   x01
0BD46:  CLRF   x02
0BD48:  CLRF   x03
0BD4A:  CLRF   x04
0BD4C:  CLRF   x05
0BD4E:  CLRF   x06
0BD50:  CLRF   x07
0BD52:  CLRF   x08
0BD54:  CLRF   x09
0BD56:  CLRF   x0A
0BD58:  CLRF   x0B
0BD5A:  CLRF   x0C
0BD5C:  CLRF   x0D
0BD5E:  CLRF   x0E
0BD60:  CLRF   x0F
0BD62:  CLRF   x10
0BD64:  CLRF   x11
0BD66:  CLRF   x12
0BD68:  CLRF   x13
0BD6A:  CLRF   x14
0BD6C:  CLRF   x15
0BD6E:  CLRF   x16
0BD70:  CLRF   x17
0BD72:  CLRF   x18
0BD74:  CLRF   x19
0BD76:  CLRF   x1A
0BD78:  CLRF   x1B
0BD7A:  CLRF   x1C
0BD7C:  CLRF   x1D
0BD7E:  CLRF   x1E
0BD80:  CLRF   x1F
0BD82:  CLRF   x20
0BD84:  CLRF   x21
0BD86:  CLRF   x22
0BD88:  CLRF   x23
0BD8A:  CLRF   x24
0BD8C:  CLRF   x25
0BD8E:  CLRF   x26
0BD90:  CLRF   x27
0BD92:  CLRF   x28
0BD94:  CLRF   x29
0BD96:  CLRF   x2A
0BD98:  CLRF   x2B
0BD9A:  CLRF   x2C
0BD9C:  CLRF   x2D
0BD9E:  CLRF   x2E
0BDA0:  CLRF   x2F
0BDA2:  CLRF   x30
0BDA4:  CLRF   x31
0BDA6:  CLRF   x32
0BDA8:  CLRF   x33
0BDAA:  CLRF   x34
0BDAC:  CLRF   x35
0BDAE:  CLRF   x36
0BDB0:  CLRF   x37
0BDB2:  CLRF   x38
0BDB4:  CLRF   x39
0BDB6:  CLRF   x3A
0BDB8:  CLRF   x3B
0BDBA:  CLRF   x3C
0BDBC:  CLRF   x3D
0BDBE:  CLRF   x3E
0BDC0:  CLRF   x3F
0BDC2:  CLRF   x40
0BDC4:  CLRF   x41
0BDC6:  CLRF   x42
0BDC8:  CLRF   x43
0BDCA:  CLRF   x44
0BDCC:  CLRF   x45
0BDCE:  CLRF   x46
0BDD0:  CLRF   x47
0BDD2:  CLRF   x48
0BDD4:  CLRF   x49
0BDD6:  CLRF   x4A
0BDD8:  CLRF   x4B
0BDDA:  CLRF   x4C
0BDDC:  CLRF   x4D
0BDDE:  CLRF   x4E
0BDE0:  CLRF   x4F
0BDE2:  CLRF   x50
0BDE4:  CLRF   x51
0BDE6:  CLRF   x52
0BDE8:  CLRF   x53
0BDEA:  CLRF   x54
0BDEC:  CLRF   x55
0BDEE:  CLRF   x56
0BDF0:  CLRF   x57
0BDF2:  CLRF   x58
0BDF4:  CLRF   x59
0BDF6:  CLRF   x5A
0BDF8:  CLRF   x5B
0BDFA:  CLRF   x5C
0BDFC:  CLRF   x5D
0BDFE:  CLRF   x5E
0BE00:  CLRF   x5F
0BE02:  CLRF   x60
0BE04:  CLRF   x61
0BE06:  CLRF   x62
0BE08:  CLRF   x63
0BE0A:  CLRF   x64
0BE0C:  CLRF   x65
0BE0E:  CLRF   x66
0BE10:  CLRF   x67
0BE12:  CLRF   x68
0BE14:  CLRF   x69
0BE16:  CLRF   x6A
0BE18:  CLRF   x6B
0BE1A:  CLRF   x6C
0BE1C:  CLRF   x6D
0BE1E:  CLRF   x6E
0BE20:  CLRF   x6F
0BE22:  CLRF   x70
0BE24:  CLRF   x71
0BE26:  CLRF   x72
0BE28:  CLRF   x73
0BE2A:  CLRF   x74
0BE2C:  CLRF   x75
0BE2E:  CLRF   x76
0BE30:  CLRF   x77
0BE32:  CLRF   x78
0BE34:  CLRF   x79
0BE36:  CLRF   x7A
0BE38:  CLRF   x7B
0BE3A:  CLRF   x7C
0BE3C:  CLRF   x7D
0BE3E:  CLRF   x7E
0BE40:  CLRF   x7F
0BE42:  CLRF   x80
0BE44:  CLRF   x81
0BE46:  CLRF   x82
0BE48:  CLRF   x83
0BE4A:  CLRF   x84
0BE4C:  CLRF   x85
0BE4E:  CLRF   x86
0BE50:  CLRF   x87
0BE52:  CLRF   x88
0BE54:  CLRF   x89
0BE56:  CLRF   x8A
0BE58:  CLRF   x8B
0BE5A:  CLRF   x8C
0BE5C:  CLRF   x8D
0BE5E:  CLRF   x8E
0BE60:  CLRF   x8F
0BE62:  CLRF   x90
0BE64:  CLRF   x91
0BE66:  CLRF   x92
0BE68:  CLRF   x93
0BE6A:  CLRF   x94
0BE6C:  CLRF   x95
0BE6E:  CLRF   x96
0BE70:  CLRF   x97
0BE72:  CLRF   x98
0BE74:  CLRF   x99
0BE76:  CLRF   x9A
0BE78:  CLRF   x9B
0BE7A:  CLRF   x9C
0BE7C:  CLRF   x9D
0BE7E:  CLRF   x9E
0BE80:  CLRF   x9F
0BE82:  CLRF   xA0
0BE84:  CLRF   xA1
0BE86:  CLRF   xA2
0BE88:  CLRF   xA3
0BE8A:  CLRF   xA4
0BE8C:  CLRF   xA5
0BE8E:  CLRF   xA6
0BE90:  CLRF   xA7
0BE92:  CLRF   xA8
0BE94:  CLRF   xA9
0BE96:  CLRF   xAA
0BE98:  CLRF   xAB
0BE9A:  CLRF   xAC
0BE9C:  CLRF   xAD
0BE9E:  CLRF   xAE
0BEA0:  CLRF   xAF
0BEA2:  CLRF   xB0
0BEA4:  CLRF   xB1
0BEA6:  CLRF   xB2
0BEA8:  CLRF   xB3
0BEAA:  CLRF   xB4
0BEAC:  CLRF   xB5
0BEAE:  CLRF   xB6
0BEB0:  CLRF   xB7
0BEB2:  CLRF   xB8
0BEB4:  CLRF   xB9
0BEB6:  CLRF   xBA
0BEB8:  CLRF   xBB
0BEBA:  CLRF   xBC
0BEBC:  CLRF   xBD
0BEBE:  CLRF   xBE
0BEC0:  CLRF   xBF
0BEC2:  CLRF   xC0
0BEC4:  CLRF   xC1
0BEC6:  CLRF   xC2
0BEC8:  CLRF   xC3
0BECA:  CLRF   xC4
0BECC:  CLRF   xC5
0BECE:  CLRF   xC6
0BED0:  CLRF   xC7
0BED2:  CLRF   xC8
0BED4:  CLRF   xC9
0BED6:  CLRF   xCA
0BED8:  CLRF   xCB
0BEDA:  CLRF   xCC
0BEDC:  CLRF   xCD
0BEDE:  CLRF   xCE
0BEE0:  CLRF   xCF
0BEE2:  CLRF   xD0
0BEE4:  CLRF   xD1
0BEE6:  CLRF   xD2
0BEE8:  CLRF   xD3
0BEEA:  CLRF   xD4
0BEEC:  CLRF   xD5
0BEEE:  CLRF   xD6
0BEF0:  CLRF   xD7
0BEF2:  CLRF   xD8
0BEF4:  CLRF   xD9
0BEF6:  CLRF   xDA
0BEF8:  CLRF   xDB
0BEFA:  CLRF   xDC
0BEFC:  CLRF   xDD
0BEFE:  CLRF   xDE
0BF00:  CLRF   xDF
0BF02:  CLRF   xE0
0BF04:  CLRF   xE1
0BF06:  CLRF   xE2
0BF08:  CLRF   xE3
0BF0A:  CLRF   xE4
0BF0C:  CLRF   xE5
0BF0E:  CLRF   xE6
0BF10:  CLRF   xE7
0BF12:  CLRF   xE8
0BF14:  CLRF   xE9
0BF16:  CLRF   xEA
0BF18:  CLRF   xEB
0BF1A:  CLRF   xEC
0BF1C:  CLRF   xED
0BF1E:  CLRF   xEE
0BF20:  CLRF   xEF
0BF22:  CLRF   xF0
0BF24:  CLRF   xF1
0BF26:  CLRF   xF2
0BF28:  CLRF   xF3
0BF2A:  CLRF   xF4
0BF2C:  CLRF   xF5
0BF2E:  CLRF   xF6
0BF30:  CLRF   xF7
0BF32:  CLRF   xF8
0BF34:  CLRF   xF9
0BF36:  CLRF   xFA
0BF38:  CLRF   xFB
0BF3A:  CLRF   xFC
0BF3C:  CLRF   xFD
0BF3E:  CLRF   xFE
0BF40:  CLRF   xFF
0BF42:  MOVLB  8
0BF44:  CLRF   x00
0BF46:  CLRF   x01
0BF48:  CLRF   x02
0BF4A:  CLRF   x03
0BF4C:  CLRF   x04
0BF4E:  CLRF   x05
0BF50:  CLRF   x06
0BF52:  CLRF   x07
0BF54:  CLRF   x08
0BF56:  CLRF   x09
0BF58:  CLRF   x0A
0BF5A:  CLRF   x0B
0BF5C:  CLRF   x0C
0BF5E:  CLRF   x0D
0BF60:  CLRF   x0E
0BF62:  CLRF   x0F
0BF64:  CLRF   x10
0BF66:  CLRF   x11
0BF68:  CLRF   x12
0BF6A:  CLRF   x13
0BF6C:  CLRF   x14
0BF6E:  CLRF   x15
0BF70:  CLRF   x16
0BF72:  CLRF   x17
0BF74:  CLRF   x18
0BF76:  CLRF   x19
0BF78:  CLRF   x1A
0BF7A:  CLRF   x1B
0BF7C:  CLRF   x1C
0BF7E:  CLRF   x1D
0BF80:  CLRF   x1E
0BF82:  CLRF   x1F
0BF84:  CLRF   x20
0BF86:  CLRF   x21
0BF88:  CLRF   x22
0BF8A:  CLRF   x23
0BF8C:  CLRF   x24
0BF8E:  CLRF   x25
0BF90:  CLRF   x26
0BF92:  CLRF   x27
0BF94:  CLRF   x28
0BF96:  CLRF   x29
0BF98:  CLRF   x2A
0BF9A:  CLRF   x2B
0BF9C:  CLRF   x2C
0BF9E:  CLRF   x2D
0BFA0:  CLRF   x2E
0BFA2:  CLRF   x2F
0BFA4:  CLRF   x30
0BFA6:  CLRF   x31
0BFA8:  CLRF   x32
0BFAA:  CLRF   x33
0BFAC:  CLRF   x34
0BFAE:  CLRF   x35
0BFB0:  CLRF   x36
0BFB2:  CLRF   x37
0BFB4:  CLRF   x38
0BFB6:  CLRF   x39
0BFB8:  CLRF   x3A
0BFBA:  CLRF   x3B
0BFBC:  CLRF   x3C
0BFBE:  CLRF   x3D
0BFC0:  CLRF   x3E
0BFC2:  CLRF   x3F
0BFC4:  CLRF   x40
0BFC6:  CLRF   x41
0BFC8:  CLRF   x42
0BFCA:  CLRF   x43
0BFCC:  CLRF   x44
0BFCE:  CLRF   x45
0BFD0:  CLRF   x46
0BFD2:  CLRF   x47
0BFD4:  CLRF   x48
0BFD6:  CLRF   x49
0BFD8:  CLRF   x4A
0BFDA:  CLRF   x4B
0BFDC:  CLRF   x4C
0BFDE:  CLRF   x4D
0BFE0:  CLRF   x4E
0BFE2:  CLRF   x4F
0BFE4:  CLRF   x50
0BFE6:  CLRF   x51
0BFE8:  CLRF   x52
0BFEA:  CLRF   x53
0BFEC:  CLRF   x54
0BFEE:  CLRF   x55
0BFF0:  CLRF   x56
0BFF2:  CLRF   x57
0BFF4:  CLRF   x58
0BFF6:  CLRF   x59
0BFF8:  CLRF   x5A
0BFFA:  CLRF   x5B
0BFFC:  CLRF   x5C
0BFFE:  CLRF   x5D
0C000:  CLRF   x5E
0C002:  CLRF   x5F
0C004:  CLRF   x60
0C006:  CLRF   x61
0C008:  CLRF   x62
0C00A:  CLRF   x63
0C00C:  CLRF   x64
0C00E:  CLRF   x65
0C010:  CLRF   x66
0C012:  CLRF   x67
0C014:  CLRF   x68
0C016:  CLRF   x69
0C018:  CLRF   x6A
0C01A:  CLRF   x6B
0C01C:  CLRF   x6C
0C01E:  CLRF   x6D
0C020:  CLRF   x6E
0C022:  CLRF   x6F
0C024:  CLRF   x70
0C026:  CLRF   x71
0C028:  CLRF   x72
0C02A:  CLRF   x73
0C02C:  CLRF   x74
0C02E:  CLRF   x75
0C030:  CLRF   x76
0C032:  CLRF   x77
0C034:  CLRF   x78
0C036:  CLRF   x79
0C038:  CLRF   x7A
0C03A:  CLRF   x7B
0C03C:  CLRF   x7C
0C03E:  CLRF   x7D
0C040:  CLRF   x7E
0C042:  CLRF   x7F
0C044:  CLRF   x80
0C046:  CLRF   x81
0C048:  CLRF   x82
0C04A:  CLRF   x83
0C04C:  CLRF   x84
0C04E:  CLRF   x85
0C050:  CLRF   x86
0C052:  CLRF   x87
0C054:  CLRF   x88
0C056:  CLRF   x89
0C058:  CLRF   x8A
0C05A:  CLRF   x8B
0C05C:  CLRF   x8C
0C05E:  CLRF   x8D
0C060:  CLRF   x8E
0C062:  CLRF   x8F
0C064:  CLRF   x90
0C066:  CLRF   x91
0C068:  CLRF   x92
0C06A:  CLRF   x93
0C06C:  CLRF   x94
0C06E:  CLRF   x95
0C070:  CLRF   x96
0C072:  CLRF   x97
0C074:  CLRF   x98
0C076:  CLRF   x99
0C078:  CLRF   x9A
0C07A:  CLRF   x9B
0C07C:  CLRF   x9C
0C07E:  CLRF   x9D
0C080:  CLRF   x9E
0C082:  CLRF   x9F
0C084:  CLRF   xA0
0C086:  CLRF   xA1
0C088:  CLRF   xA2
0C08A:  CLRF   xA3
0C08C:  CLRF   xA4
0C08E:  CLRF   xA5
0C090:  CLRF   xA6
0C092:  CLRF   xA7
0C094:  CLRF   xA8
0C096:  CLRF   xA9
0C098:  CLRF   xAA
0C09A:  CLRF   xAB
0C09C:  CLRF   xAC
0C09E:  CLRF   xAD
0C0A0:  CLRF   xAE
0C0A2:  CLRF   xAF
0C0A4:  CLRF   xB0
0C0A6:  CLRF   xB1
0C0A8:  CLRF   xB2
0C0AA:  CLRF   xB3
0C0AC:  CLRF   xB4
0C0AE:  CLRF   xB5
0C0B0:  CLRF   xB6
0C0B2:  CLRF   xB7
0C0B4:  CLRF   xB8
0C0B6:  CLRF   xB9
0C0B8:  CLRF   xBA
0C0BA:  CLRF   xBB
0C0BC:  CLRF   xBC
0C0BE:  CLRF   xBD
0C0C0:  CLRF   xBE
0C0C2:  CLRF   xBF
0C0C4:  CLRF   xC0
0C0C6:  CLRF   xC1
0C0C8:  CLRF   xC2
0C0CA:  CLRF   xC3
0C0CC:  CLRF   xC4
0C0CE:  CLRF   xC5
0C0D0:  CLRF   xC6
0C0D2:  CLRF   xC7
0C0D4:  CLRF   xC8
0C0D6:  CLRF   xC9
0C0D8:  CLRF   xCA
0C0DA:  CLRF   xCB
0C0DC:  CLRF   xCC
0C0DE:  CLRF   xCD
0C0E0:  CLRF   xCE
0C0E2:  CLRF   xCF
0C0E4:  CLRF   xD0
0C0E6:  CLRF   xD1
0C0E8:  CLRF   xD2
0C0EA:  CLRF   xD3
0C0EC:  CLRF   xD4
0C0EE:  CLRF   xD5
0C0F0:  CLRF   xD6
0C0F2:  CLRF   xD7
0C0F4:  CLRF   xD8
0C0F6:  CLRF   xD9
0C0F8:  CLRF   xDA
0C0FA:  CLRF   xDB
0C0FC:  CLRF   xDC
0C0FE:  CLRF   xDD
0C100:  CLRF   xDE
0C102:  CLRF   xDF
0C104:  CLRF   xE0
0C106:  CLRF   xE1
0C108:  CLRF   xE2
0C10A:  CLRF   xE3
0C10C:  CLRF   xE4
0C10E:  CLRF   xE5
0C110:  CLRF   xE6
0C112:  CLRF   xE7
0C114:  CLRF   xE8
0C116:  CLRF   xE9
0C118:  CLRF   xEA
0C11A:  CLRF   xEB
0C11C:  CLRF   xEC
0C11E:  CLRF   xED
0C120:  CLRF   xEE
0C122:  CLRF   xEF
0C124:  CLRF   xF0
0C126:  CLRF   xF1
0C128:  CLRF   xF2
0C12A:  CLRF   xF3
0C12C:  CLRF   xF4
0C12E:  CLRF   xF5
0C130:  CLRF   xF6
0C132:  CLRF   xF7
0C134:  CLRF   xF8
0C136:  CLRF   xF9
0C138:  CLRF   xFA
0C13A:  CLRF   xFB
0C13C:  CLRF   xFC
0C13E:  CLRF   xFD
0C140:  CLRF   xFE
0C142:  CLRF   xFF
0C144:  MOVLB  9
0C146:  CLRF   x00
0C148:  CLRF   x01
0C14A:  CLRF   x02
0C14C:  CLRF   x03
0C14E:  CLRF   x04
0C150:  CLRF   x05
0C152:  CLRF   x06
0C154:  CLRF   x07
0C156:  CLRF   x08
0C158:  CLRF   x09
0C15A:  CLRF   x0A
0C15C:  CLRF   x0B
0C15E:  CLRF   x0C
0C160:  CLRF   x0D
0C162:  CLRF   x0E
0C164:  CLRF   x0F
0C166:  CLRF   x10
0C168:  CLRF   x11
0C16A:  CLRF   x12
0C16C:  CLRF   x13
0C16E:  CLRF   x14
0C170:  CLRF   x15
0C172:  CLRF   x16
0C174:  CLRF   x17
0C176:  CLRF   x18
0C178:  CLRF   x19
0C17A:  CLRF   x1A
0C17C:  CLRF   x1B
0C17E:  CLRF   x1C
0C180:  CLRF   x1D
0C182:  CLRF   x1E
0C184:  CLRF   x1F
0C186:  CLRF   x20
0C188:  CLRF   x21
0C18A:  CLRF   x22
0C18C:  CLRF   x23
0C18E:  CLRF   x24
0C190:  CLRF   x25
0C192:  CLRF   x26
0C194:  CLRF   x27
0C196:  CLRF   x28
0C198:  CLRF   x29
0C19A:  CLRF   x2A
0C19C:  CLRF   x2B
0C19E:  CLRF   x2C
0C1A0:  CLRF   x2D
0C1A2:  CLRF   x2E
0C1A4:  CLRF   x2F
0C1A6:  CLRF   x30
0C1A8:  CLRF   x31
0C1AA:  CLRF   x32
0C1AC:  CLRF   x33
0C1AE:  CLRF   x34
0C1B0:  CLRF   x35
0C1B2:  CLRF   x36
0C1B4:  CLRF   x37
0C1B6:  CLRF   x38
0C1B8:  CLRF   x39
0C1BA:  CLRF   x3A
0C1BC:  CLRF   x3B
0C1BE:  CLRF   x3C
0C1C0:  CLRF   x3D
0C1C2:  CLRF   x3E
0C1C4:  CLRF   x3F
0C1C6:  CLRF   x40
0C1C8:  CLRF   x41
0C1CA:  CLRF   x42
0C1CC:  CLRF   x43
0C1CE:  CLRF   x44
0C1D0:  CLRF   x45
0C1D2:  CLRF   x46
0C1D4:  CLRF   x47
0C1D6:  CLRF   x48
0C1D8:  CLRF   x49
0C1DA:  CLRF   x4A
0C1DC:  CLRF   x4B
0C1DE:  CLRF   x4C
0C1E0:  CLRF   x4D
0C1E2:  CLRF   x4E
0C1E4:  CLRF   x4F
0C1E6:  CLRF   x50
0C1E8:  CLRF   x51
0C1EA:  CLRF   x52
0C1EC:  CLRF   x53
0C1EE:  CLRF   x54
0C1F0:  CLRF   x55
0C1F2:  CLRF   x56
0C1F4:  CLRF   x57
0C1F6:  CLRF   x58
0C1F8:  CLRF   x59
0C1FA:  CLRF   x5A
0C1FC:  CLRF   x5B
0C1FE:  CLRF   x5C
0C200:  CLRF   x5D
0C202:  CLRF   x5E
0C204:  CLRF   x5F
0C206:  CLRF   x60
0C208:  CLRF   x61
0C20A:  CLRF   x62
0C20C:  CLRF   x63
0C20E:  CLRF   x64
0C210:  CLRF   x65
0C212:  CLRF   x66
0C214:  CLRF   x67
0C216:  CLRF   x68
0C218:  CLRF   x69
0C21A:  CLRF   x6A
0C21C:  CLRF   x6B
0C21E:  CLRF   x6C
0C220:  CLRF   x6D
0C222:  CLRF   x6E
0C224:  CLRF   x6F
0C226:  CLRF   x70
0C228:  CLRF   x71
0C22A:  CLRF   x72
0C22C:  CLRF   x73
0C22E:  CLRF   x74
0C230:  CLRF   x75
0C232:  CLRF   x76
0C234:  CLRF   x77
0C236:  CLRF   x78
0C238:  CLRF   x79
0C23A:  CLRF   x7A
0C23C:  CLRF   x7B
0C23E:  CLRF   x7C
0C240:  CLRF   x7D
0C242:  CLRF   x7E
0C244:  CLRF   x7F
0C246:  CLRF   x80
0C248:  CLRF   x81
0C24A:  CLRF   x82
0C24C:  CLRF   x83
0C24E:  CLRF   x84
0C250:  CLRF   x85
0C252:  CLRF   x86
0C254:  CLRF   x87
0C256:  CLRF   x88
0C258:  CLRF   x89
0C25A:  CLRF   x8A
0C25C:  CLRF   x8B
0C25E:  CLRF   x8C
0C260:  CLRF   x8D
0C262:  CLRF   x8E
0C264:  CLRF   x8F
0C266:  CLRF   x90
0C268:  CLRF   x91
0C26A:  CLRF   x92
0C26C:  CLRF   x93
0C26E:  CLRF   x94
0C270:  CLRF   x95
0C272:  CLRF   x96
0C274:  CLRF   x97
0C276:  CLRF   x98
0C278:  CLRF   x99
0C27A:  CLRF   x9A
0C27C:  CLRF   x9B
0C27E:  CLRF   x9C
0C280:  CLRF   x9D
0C282:  CLRF   x9E
0C284:  CLRF   x9F
0C286:  CLRF   xA0
0C288:  CLRF   xA1
0C28A:  CLRF   xA2
0C28C:  CLRF   xA3
0C28E:  CLRF   xA4
0C290:  CLRF   xA5
0C292:  CLRF   xA6
0C294:  CLRF   xA7
0C296:  CLRF   xA8
0C298:  CLRF   xA9
0C29A:  CLRF   xAA
0C29C:  CLRF   xAB
0C29E:  CLRF   xAC
0C2A0:  CLRF   xAD
0C2A2:  CLRF   xAE
0C2A4:  CLRF   xAF
0C2A6:  CLRF   xB0
0C2A8:  CLRF   xB1
0C2AA:  CLRF   xB2
0C2AC:  CLRF   xB3
0C2AE:  CLRF   xB4
0C2B0:  CLRF   xB5
0C2B2:  CLRF   xB6
0C2B4:  CLRF   xB7
0C2B6:  CLRF   xB8
0C2B8:  CLRF   xB9
0C2BA:  CLRF   xBA
0C2BC:  CLRF   xBB
0C2BE:  CLRF   xBC
0C2C0:  CLRF   xBD
0C2C2:  CLRF   xBE
0C2C4:  CLRF   xBF
0C2C6:  CLRF   xC0
0C2C8:  CLRF   xC1
0C2CA:  CLRF   xC2
0C2CC:  CLRF   xC3
0C2CE:  CLRF   xC4
0C2D0:  CLRF   xC5
0C2D2:  CLRF   xC6
0C2D4:  CLRF   xC7
0C2D6:  CLRF   xC8
....................     port2.port_num = 2; 
0C2D8:  MOVLW  02
0C2DA:  MOVLB  5
0C2DC:  MOVWF  xC9
....................     port2.sweep_step = 0;
0C2DE:  CLRF   xCB
0C2E0:  CLRF   xCA
....................     port2.active = 1;
0C2E2:  MOVLB  9
0C2E4:  BSF    xC8.0
.................... 
....................     int16 count = 1;
....................     iv_env_t measured_data = create_meas_data();
0C2E6:  CLRF   xCA
0C2E8:  MOVLW  01
0C2EA:  MOVWF  xC9
0C2EC:  MOVLB  0
0C2EE:  CALL   91E8
0C2F2:  MOVFF  02,03
0C2F6:  MOVF   01,W
0C2F8:  MOVWF  FE1
0C2FA:  MOVFF  03,FE2
0C2FE:  MOVLW  09
0C300:  MOVWF  FEA
0C302:  MOVLW  CB
0C304:  MOVWF  FE9
0C306:  MOVLW  0C
0C308:  MOVWF  01
0C30A:  MOVFF  FE6,FEE
0C30E:  DECFSZ 01,F
0C310:  GOTO   C30A
....................     while (port1.active || port2.active)
0C314:  MOVLB  5
0C316:  BTFSS  xC8.0
0C318:  BRA    C320
0C31A:  MOVLB  0
0C31C:  GOTO   C330
0C320:  MOVLB  0
0C322:  MOVLB  9
0C324:  BTFSC  xC8.0
0C326:  BRA    C32E
0C328:  MOVLB  0
0C32A:  GOTO   C60C
0C32E:  MOVLB  0
....................     {
....................         mcp4901_1_write(count);
0C330:  MOVFF  9CA,9DD
0C334:  MOVFF  9C9,9DC
0C338:  CALL   2872
....................         mcp4901_2_write(count);
0C33C:  MOVFF  9CA,9DD
0C340:  MOVFF  9C9,9DC
0C344:  CALL   28B0
....................         delay_us(10); 
0C348:  MOVLW  0D
0C34A:  MOVWF  00
0C34C:  DECFSZ 00,F
0C34E:  BRA    C34C
....................         if (port1.active) {
0C350:  MOVLB  5
0C352:  BTFSC  xC8.0
0C354:  BRA    C35C
0C356:  MOVLB  0
0C358:  GOTO   C4AC
0C35C:  MOVLB  0
....................             unsigned int32 ans = ad7490_read(ADC_CIGS1_CURR);
0C35E:  MOVLW  01
0C360:  MOVLB  9
0C362:  MOVWF  xEE
0C364:  MOVLB  0
0C366:  CALL   24C2
0C36A:  MOVLB  9
0C36C:  CLRF   xDA
0C36E:  CLRF   xD9
0C370:  MOVFF  02,9D8
0C374:  MOVFF  01,9D7
0C378:  MOVLB  0
....................             ans += ad7490_read(ADC_CIGS1_CURR);
0C37A:  MOVLW  01
0C37C:  MOVLB  9
0C37E:  MOVWF  xEE
0C380:  MOVLB  0
0C382:  CALL   24C2
0C386:  MOVFF  02,03
0C38A:  MOVF   01,W
0C38C:  MOVLB  9
0C38E:  ADDWF  xD7,F
0C390:  MOVF   03,W
0C392:  ADDWFC xD8,F
0C394:  MOVLW  00
0C396:  ADDWFC xD9,F
0C398:  MOVLW  00
0C39A:  ADDWFC xDA,F
....................             ans = ans/2;
0C39C:  BCF    FD8.0
0C39E:  RRCF   xDA,F
0C3A0:  RRCF   xD9,F
0C3A2:  RRCF   xD8,F
0C3A4:  RRCF   xD7,F
....................             port1.data_buffer[count].voltage = ad7490_read(ADC_CIGS1_AMP);
0C3A6:  RLCF   xC9,W
0C3A8:  MOVWF  02
0C3AA:  RLCF   xCA,W
0C3AC:  MOVWF  03
0C3AE:  RLCF   02,F
0C3B0:  RLCF   03,F
0C3B2:  MOVLW  FC
0C3B4:  ANDWF  02,F
0C3B6:  MOVF   02,W
0C3B8:  ADDLW  CC
0C3BA:  MOVWF  01
0C3BC:  MOVLW  01
0C3BE:  ADDWFC 03,F
0C3C0:  MOVF   01,W
0C3C2:  MOVWF  xDE
0C3C4:  MOVFF  03,9DF
0C3C8:  MOVLW  02
0C3CA:  MOVWF  xEE
0C3CC:  MOVLB  0
0C3CE:  CALL   24C2
0C3D2:  MOVFF  9DF,FEA
0C3D6:  MOVFF  9DE,FE9
0C3DA:  MOVFF  02,FEC
0C3DE:  MOVF   FED,F
0C3E0:  MOVFF  01,FEF
....................             port1.data_buffer[count].current = ans;
0C3E4:  MOVLB  9
0C3E6:  RLCF   xC9,W
0C3E8:  MOVWF  02
0C3EA:  RLCF   xCA,W
0C3EC:  MOVWF  03
0C3EE:  RLCF   02,F
0C3F0:  RLCF   03,F
0C3F2:  MOVLW  FC
0C3F4:  ANDWF  02,F
0C3F6:  MOVF   02,W
0C3F8:  ADDLW  03
0C3FA:  MOVWF  xDC
0C3FC:  MOVLW  00
0C3FE:  ADDWFC 03,W
0C400:  MOVWF  xDD
0C402:  MOVLW  02
0C404:  ADDWF  xDC,W
0C406:  MOVWF  01
0C408:  MOVLW  00
0C40A:  ADDWFC xDD,W
0C40C:  MOVWF  03
0C40E:  MOVF   01,W
0C410:  ADDLW  C9
0C412:  MOVWF  FE9
0C414:  MOVLW  01
0C416:  ADDWFC 03,W
0C418:  MOVWF  FEA
0C41A:  MOVFF  9D7,FEF
0C41E:  MOVFF  9D8,FEC
0C422:  MOVF   FED,F
....................             port1.sweep_step = count + 1; 
0C424:  MOVLW  01
0C426:  ADDWF  xC9,W
0C428:  MOVLB  1
0C42A:  MOVWF  xCA
0C42C:  MOVLW  00
0C42E:  MOVLB  9
0C430:  ADDWFC xCA,W
0C432:  MOVLB  1
0C434:  MOVWF  xCB
....................             if (port1.data_buffer[count].current < curr_limit) {
0C436:  MOVLB  9
0C438:  RLCF   xC9,W
0C43A:  MOVWF  02
0C43C:  RLCF   xCA,W
0C43E:  MOVWF  03
0C440:  RLCF   02,F
0C442:  RLCF   03,F
0C444:  MOVLW  FC
0C446:  ANDWF  02,F
0C448:  MOVF   02,W
0C44A:  ADDLW  03
0C44C:  MOVWF  xDC
0C44E:  MOVLW  00
0C450:  ADDWFC 03,W
0C452:  MOVWF  xDD
0C454:  MOVLW  02
0C456:  ADDWF  xDC,W
0C458:  MOVWF  01
0C45A:  MOVLW  00
0C45C:  ADDWFC xDD,W
0C45E:  MOVWF  03
0C460:  MOVF   01,W
0C462:  ADDLW  C9
0C464:  MOVWF  FE9
0C466:  MOVLW  01
0C468:  ADDWFC 03,W
0C46A:  MOVWF  FEA
0C46C:  MOVFF  FEC,9DD
0C470:  MOVF   FED,F
0C472:  MOVFF  FEF,9DC
0C476:  MOVF   xDD,W
0C478:  MOVLB  1
0C47A:  SUBWF  xC8,W
0C47C:  BTFSC  FD8.0
0C47E:  BRA    C486
0C480:  MOVLB  0
0C482:  GOTO   C4AC
0C486:  MOVLB  0
0C488:  BTFSS  FD8.2
0C48A:  GOTO   C4A2
0C48E:  MOVLB  1
0C490:  MOVF   xC7,W
0C492:  MOVLB  9
0C494:  SUBWF  xDC,W
0C496:  BTFSS  FD8.0
0C498:  BRA    C4A0
0C49A:  MOVLB  0
0C49C:  GOTO   C4AC
0C4A0:  MOVLB  0
....................                 port1.active = 0;
0C4A2:  MOVLB  5
0C4A4:  BCF    xC8.0
....................                 disconnect_port1();
0C4A6:  MOVLB  0
0C4A8:  CALL   926A
....................             }
....................         }
....................         if (port2.active) {
0C4AC:  MOVLB  9
0C4AE:  BTFSC  xC8.0
0C4B0:  BRA    C4B8
0C4B2:  MOVLB  0
0C4B4:  GOTO   C5DC
0C4B8:  MOVLB  0
....................             port2.data_buffer[count].voltage = ad7490_read(ADC_CIGS2_AMP);
0C4BA:  MOVLB  9
0C4BC:  RLCF   xC9,W
0C4BE:  MOVWF  02
0C4C0:  RLCF   xCA,W
0C4C2:  MOVWF  03
0C4C4:  RLCF   02,F
0C4C6:  RLCF   03,F
0C4C8:  MOVLW  FC
0C4CA:  ANDWF  02,F
0C4CC:  MOVF   02,W
0C4CE:  ADDLW  CC
0C4D0:  MOVWF  01
0C4D2:  MOVLW  05
0C4D4:  ADDWFC 03,F
0C4D6:  MOVF   01,W
0C4D8:  MOVWF  xDE
0C4DA:  MOVFF  03,9DF
0C4DE:  MOVLW  06
0C4E0:  MOVWF  xEE
0C4E2:  MOVLB  0
0C4E4:  CALL   24C2
0C4E8:  MOVFF  9DF,FEA
0C4EC:  MOVFF  9DE,FE9
0C4F0:  MOVFF  02,FEC
0C4F4:  MOVF   FED,F
0C4F6:  MOVFF  01,FEF
....................             port2.data_buffer[count].current = ad7490_read(ADC_CIGS2_CURR);
0C4FA:  MOVLB  9
0C4FC:  RLCF   xC9,W
0C4FE:  MOVWF  02
0C500:  RLCF   xCA,W
0C502:  MOVWF  03
0C504:  RLCF   02,F
0C506:  RLCF   03,F
0C508:  MOVLW  FC
0C50A:  ANDWF  02,F
0C50C:  MOVF   02,W
0C50E:  ADDLW  03
0C510:  MOVWF  xDC
0C512:  MOVLW  00
0C514:  ADDWFC 03,W
0C516:  MOVWF  xDD
0C518:  MOVLW  02
0C51A:  ADDWF  xDC,W
0C51C:  MOVWF  01
0C51E:  MOVLW  00
0C520:  ADDWFC xDD,W
0C522:  MOVWF  03
0C524:  MOVF   01,W
0C526:  ADDLW  C9
0C528:  MOVWF  01
0C52A:  MOVLW  05
0C52C:  ADDWFC 03,F
0C52E:  MOVF   01,W
0C530:  MOVWF  xDC
0C532:  MOVFF  03,9DD
0C536:  MOVLW  05
0C538:  MOVWF  xEE
0C53A:  MOVLB  0
0C53C:  CALL   24C2
0C540:  MOVFF  9DD,FEA
0C544:  MOVFF  9DC,FE9
0C548:  MOVFF  02,FEC
0C54C:  MOVF   FED,F
0C54E:  MOVFF  01,FEF
....................             port2.sweep_step = count + 1;
0C552:  MOVLW  01
0C554:  MOVLB  9
0C556:  ADDWF  xC9,W
0C558:  MOVLB  5
0C55A:  MOVWF  xCA
0C55C:  MOVLW  00
0C55E:  MOVLB  9
0C560:  ADDWFC xCA,W
0C562:  MOVLB  5
0C564:  MOVWF  xCB
....................             if (port2.data_buffer[count].current < curr_limit) {
0C566:  MOVLB  9
0C568:  RLCF   xC9,W
0C56A:  MOVWF  02
0C56C:  RLCF   xCA,W
0C56E:  MOVWF  03
0C570:  RLCF   02,F
0C572:  RLCF   03,F
0C574:  MOVLW  FC
0C576:  ANDWF  02,F
0C578:  MOVF   02,W
0C57A:  ADDLW  03
0C57C:  MOVWF  xDC
0C57E:  MOVLW  00
0C580:  ADDWFC 03,W
0C582:  MOVWF  xDD
0C584:  MOVLW  02
0C586:  ADDWF  xDC,W
0C588:  MOVWF  01
0C58A:  MOVLW  00
0C58C:  ADDWFC xDD,W
0C58E:  MOVWF  03
0C590:  MOVF   01,W
0C592:  ADDLW  C9
0C594:  MOVWF  FE9
0C596:  MOVLW  05
0C598:  ADDWFC 03,W
0C59A:  MOVWF  FEA
0C59C:  MOVFF  FEC,9DD
0C5A0:  MOVF   FED,F
0C5A2:  MOVFF  FEF,9DC
0C5A6:  MOVF   xDD,W
0C5A8:  MOVLB  1
0C5AA:  SUBWF  xC8,W
0C5AC:  BTFSC  FD8.0
0C5AE:  BRA    C5B6
0C5B0:  MOVLB  0
0C5B2:  GOTO   C5DC
0C5B6:  MOVLB  0
0C5B8:  BTFSS  FD8.2
0C5BA:  GOTO   C5D2
0C5BE:  MOVLB  1
0C5C0:  MOVF   xC7,W
0C5C2:  MOVLB  9
0C5C4:  SUBWF  xDC,W
0C5C6:  BTFSS  FD8.0
0C5C8:  BRA    C5D0
0C5CA:  MOVLB  0
0C5CC:  GOTO   C5DC
0C5D0:  MOVLB  0
....................                 port2.active = 0;
0C5D2:  MOVLB  9
0C5D4:  BCF    xC8.0
....................                 disconnect_port2();
0C5D6:  MOVLB  0
0C5D8:  CALL   9272
....................             } 
....................         }
....................         count++;
0C5DC:  MOVLB  9
0C5DE:  INCF   xC9,F
0C5E0:  BTFSC  FD8.2
0C5E2:  INCF   xCA,F
....................         if (count >= 255) {
0C5E4:  MOVF   xCA,F
0C5E6:  BTFSC  FD8.2
0C5E8:  BRA    C5F0
0C5EA:  MOVLB  0
0C5EC:  GOTO   C604
0C5F0:  MOVLB  0
0C5F2:  MOVLB  9
0C5F4:  MOVF   xC9,W
0C5F6:  SUBLW  FE
0C5F8:  BTFSS  FD8.0
0C5FA:  BRA    C602
0C5FC:  MOVLB  0
0C5FE:  GOTO   C608
0C602:  MOVLB  0
....................             // fprintf(PC, "Maximum step count reached: %ld\r\n", count);
....................             break;
0C604:  GOTO   C60C
....................         }
0C608:  GOTO   C314
....................     }
.................... 
....................     for (int i = 0; i < count; i++) {
0C60C:  MOVLB  9
0C60E:  CLRF   xDB
0C610:  MOVLB  0
0C612:  MOVLB  9
0C614:  MOVF   xCA,F
0C616:  BTFSC  FD8.2
0C618:  BRA    C620
0C61A:  MOVLB  0
0C61C:  GOTO   C634
0C620:  MOVLB  0
0C622:  MOVLB  9
0C624:  MOVF   xC9,W
0C626:  SUBWF  xDB,W
0C628:  BTFSS  FD8.0
0C62A:  BRA    C632
0C62C:  MOVLB  0
0C62E:  GOTO   C7E8
0C632:  MOVLB  0
.................... 
....................         fprintf(PC, "%04LX,%04LX,%04LX,%04LX\r\n",
....................             port1.data_buffer[i].voltage, port1.data_buffer[i].current,
....................             port2.data_buffer[i].voltage, port2.data_buffer[i].current);
0C634:  MOVLB  A
0C636:  CLRF   x52
0C638:  MOVFF  9DB,A51
0C63C:  CLRF   x54
0C63E:  MOVLW  04
0C640:  MOVWF  x53
0C642:  MOVLB  0
0C644:  CALL   823E
0C648:  MOVFF  02,03
0C64C:  MOVF   01,W
0C64E:  ADDLW  CC
0C650:  MOVWF  FE9
0C652:  MOVLW  01
0C654:  ADDWFC 03,W
0C656:  MOVWF  FEA
0C658:  MOVFF  FEC,9DF
0C65C:  MOVF   FED,F
0C65E:  MOVFF  FEF,9DE
0C662:  MOVLB  A
0C664:  CLRF   x52
0C666:  MOVFF  9DB,A51
0C66A:  CLRF   x54
0C66C:  MOVLW  04
0C66E:  MOVWF  x53
0C670:  MOVLB  0
0C672:  CALL   823E
0C676:  MOVFF  02,03
0C67A:  MOVF   01,W
0C67C:  ADDLW  03
0C67E:  MOVLB  9
0C680:  MOVWF  xE0
0C682:  MOVLW  00
0C684:  ADDWFC 03,W
0C686:  MOVWF  xE1
0C688:  MOVLW  02
0C68A:  ADDWF  xE0,W
0C68C:  MOVWF  01
0C68E:  MOVLW  00
0C690:  ADDWFC xE1,W
0C692:  MOVWF  03
0C694:  MOVF   01,W
0C696:  ADDLW  C9
0C698:  MOVWF  FE9
0C69A:  MOVLW  01
0C69C:  ADDWFC 03,W
0C69E:  MOVWF  FEA
0C6A0:  MOVFF  FEC,9E1
0C6A4:  MOVF   FED,F
0C6A6:  MOVFF  FEF,9E0
0C6AA:  MOVLB  A
0C6AC:  CLRF   x52
0C6AE:  MOVFF  9DB,A51
0C6B2:  CLRF   x54
0C6B4:  MOVLW  04
0C6B6:  MOVWF  x53
0C6B8:  MOVLB  0
0C6BA:  CALL   823E
0C6BE:  MOVFF  02,03
0C6C2:  MOVF   01,W
0C6C4:  ADDLW  CC
0C6C6:  MOVWF  FE9
0C6C8:  MOVLW  05
0C6CA:  ADDWFC 03,W
0C6CC:  MOVWF  FEA
0C6CE:  MOVFF  FEC,9E5
0C6D2:  MOVF   FED,F
0C6D4:  MOVFF  FEF,9E4
0C6D8:  MOVLB  A
0C6DA:  CLRF   x52
0C6DC:  MOVFF  9DB,A51
0C6E0:  CLRF   x54
0C6E2:  MOVLW  04
0C6E4:  MOVWF  x53
0C6E6:  MOVLB  0
0C6E8:  CALL   823E
0C6EC:  MOVFF  02,03
0C6F0:  MOVF   01,W
0C6F2:  ADDLW  03
0C6F4:  MOVLB  9
0C6F6:  MOVWF  xE6
0C6F8:  MOVLW  00
0C6FA:  ADDWFC 03,W
0C6FC:  MOVWF  xE7
0C6FE:  MOVLW  02
0C700:  ADDWF  xE6,W
0C702:  MOVWF  01
0C704:  MOVLW  00
0C706:  ADDWFC xE7,W
0C708:  MOVWF  03
0C70A:  MOVF   01,W
0C70C:  ADDLW  C9
0C70E:  MOVWF  FE9
0C710:  MOVLW  05
0C712:  ADDWFC 03,W
0C714:  MOVWF  FEA
0C716:  MOVFF  FEC,9E7
0C71A:  MOVF   FED,F
0C71C:  MOVFF  FEF,9E6
0C720:  MOVFF  9DF,9E8
0C724:  MOVLW  37
0C726:  MOVWF  xE9
0C728:  MOVLB  0
0C72A:  CALL   2542
0C72E:  MOVFF  9DE,9E8
0C732:  MOVLW  37
0C734:  MOVLB  9
0C736:  MOVWF  xE9
0C738:  MOVLB  0
0C73A:  CALL   2542
0C73E:  MOVLW  2C
0C740:  BTFSS  FA6.6
0C742:  GOTO   C740
0C746:  MOVLB  E
0C748:  MOVWF  xF9
0C74A:  MOVFF  9E1,9E8
0C74E:  MOVLW  37
0C750:  MOVLB  9
0C752:  MOVWF  xE9
0C754:  MOVLB  0
0C756:  CALL   2542
0C75A:  MOVFF  9E0,9E8
0C75E:  MOVLW  37
0C760:  MOVLB  9
0C762:  MOVWF  xE9
0C764:  MOVLB  0
0C766:  CALL   2542
0C76A:  MOVLW  2C
0C76C:  BTFSS  FA6.6
0C76E:  GOTO   C76C
0C772:  MOVLB  E
0C774:  MOVWF  xF9
0C776:  MOVFF  9E5,9E8
0C77A:  MOVLW  37
0C77C:  MOVLB  9
0C77E:  MOVWF  xE9
0C780:  MOVLB  0
0C782:  CALL   2542
0C786:  MOVFF  9E4,9E8
0C78A:  MOVLW  37
0C78C:  MOVLB  9
0C78E:  MOVWF  xE9
0C790:  MOVLB  0
0C792:  CALL   2542
0C796:  MOVLW  2C
0C798:  BTFSS  FA6.6
0C79A:  GOTO   C798
0C79E:  MOVLB  E
0C7A0:  MOVWF  xF9
0C7A2:  MOVFF  9E7,9E8
0C7A6:  MOVLW  37
0C7A8:  MOVLB  9
0C7AA:  MOVWF  xE9
0C7AC:  MOVLB  0
0C7AE:  CALL   2542
0C7B2:  MOVFF  9E6,9E8
0C7B6:  MOVLW  37
0C7B8:  MOVLB  9
0C7BA:  MOVWF  xE9
0C7BC:  MOVLB  0
0C7BE:  CALL   2542
0C7C2:  MOVLW  0D
0C7C4:  BTFSS  FA6.6
0C7C6:  GOTO   C7C4
0C7CA:  MOVLB  E
0C7CC:  MOVWF  xF9
0C7CE:  MOVLW  0A
0C7D0:  MOVLB  0
0C7D2:  BTFSS  FA6.6
0C7D4:  GOTO   C7D2
0C7D8:  MOVLB  E
0C7DA:  MOVWF  xF9
0C7DC:  MOVLB  0
0C7DE:  MOVLB  9
0C7E0:  INCF   xDB,F
0C7E2:  MOVLB  0
0C7E4:  GOTO   C612
....................     }
0C7E8:  GOTO   CAAC (RETURN)
.................... 
.................... }
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_limit)
*
09B4A:  CALL   3C16
09B4E:  MOVFF  03,1E8
09B52:  MOVFF  02,1E7
09B56:  MOVFF  01,1E6
09B5A:  MOVFF  00,1E5
.................... {
....................     unsigned int32 start_time_ms = get_current_sec();
....................     fputc('.', PC);
09B5E:  MOVLW  2E
09B60:  CALL   91DA
....................     // Enable both CIGS ports
....................     connect_port1();
09B64:  CALL   5212
....................     connect_port2();
09B68:  CALL   521A
.................... 
....................     delay_ms(100);
09B6C:  MOVLW  64
09B6E:  MOVLB  B
09B70:  MOVWF  x02
09B72:  MOVLB  0
09B74:  CALL   22AE
.................... 
....................     // Init Port1
....................     sweep_config_t port1 = {0};
09B78:  MOVLB  1
09B7A:  CLRF   xE9
09B7C:  CLRF   xEA
09B7E:  CLRF   xEB
09B80:  CLRF   xEC
09B82:  CLRF   xED
09B84:  CLRF   xEE
09B86:  CLRF   xEF
09B88:  CLRF   xF0
09B8A:  CLRF   xF1
09B8C:  CLRF   xF2
09B8E:  CLRF   xF3
09B90:  CLRF   xF4
09B92:  CLRF   xF5
09B94:  CLRF   xF6
09B96:  CLRF   xF7
09B98:  CLRF   xF8
09B9A:  CLRF   xF9
09B9C:  CLRF   xFA
09B9E:  CLRF   xFB
09BA0:  CLRF   xFC
09BA2:  CLRF   xFD
09BA4:  CLRF   xFE
09BA6:  CLRF   xFF
09BA8:  MOVLB  2
09BAA:  CLRF   x00
09BAC:  CLRF   x01
09BAE:  CLRF   x02
09BB0:  CLRF   x03
09BB2:  CLRF   x04
09BB4:  CLRF   x05
09BB6:  CLRF   x06
09BB8:  CLRF   x07
09BBA:  CLRF   x08
09BBC:  CLRF   x09
09BBE:  CLRF   x0A
09BC0:  CLRF   x0B
09BC2:  CLRF   x0C
09BC4:  CLRF   x0D
09BC6:  CLRF   x0E
09BC8:  CLRF   x0F
09BCA:  CLRF   x10
09BCC:  CLRF   x11
09BCE:  CLRF   x12
09BD0:  CLRF   x13
09BD2:  CLRF   x14
09BD4:  CLRF   x15
09BD6:  CLRF   x16
09BD8:  CLRF   x17
09BDA:  CLRF   x18
09BDC:  CLRF   x19
09BDE:  CLRF   x1A
09BE0:  CLRF   x1B
09BE2:  CLRF   x1C
09BE4:  CLRF   x1D
09BE6:  CLRF   x1E
09BE8:  CLRF   x1F
09BEA:  CLRF   x20
09BEC:  CLRF   x21
09BEE:  CLRF   x22
09BF0:  CLRF   x23
09BF2:  CLRF   x24
09BF4:  CLRF   x25
09BF6:  CLRF   x26
09BF8:  CLRF   x27
09BFA:  CLRF   x28
09BFC:  CLRF   x29
09BFE:  CLRF   x2A
09C00:  CLRF   x2B
09C02:  CLRF   x2C
09C04:  CLRF   x2D
09C06:  CLRF   x2E
09C08:  CLRF   x2F
09C0A:  CLRF   x30
09C0C:  CLRF   x31
09C0E:  CLRF   x32
09C10:  CLRF   x33
09C12:  CLRF   x34
09C14:  CLRF   x35
09C16:  CLRF   x36
09C18:  CLRF   x37
09C1A:  CLRF   x38
09C1C:  CLRF   x39
09C1E:  CLRF   x3A
09C20:  CLRF   x3B
09C22:  CLRF   x3C
09C24:  CLRF   x3D
09C26:  CLRF   x3E
09C28:  CLRF   x3F
09C2A:  CLRF   x40
09C2C:  CLRF   x41
09C2E:  CLRF   x42
09C30:  CLRF   x43
09C32:  CLRF   x44
09C34:  CLRF   x45
09C36:  CLRF   x46
09C38:  CLRF   x47
09C3A:  CLRF   x48
09C3C:  CLRF   x49
09C3E:  CLRF   x4A
09C40:  CLRF   x4B
09C42:  CLRF   x4C
09C44:  CLRF   x4D
09C46:  CLRF   x4E
09C48:  CLRF   x4F
09C4A:  CLRF   x50
09C4C:  CLRF   x51
09C4E:  CLRF   x52
09C50:  CLRF   x53
09C52:  CLRF   x54
09C54:  CLRF   x55
09C56:  CLRF   x56
09C58:  CLRF   x57
09C5A:  CLRF   x58
09C5C:  CLRF   x59
09C5E:  CLRF   x5A
09C60:  CLRF   x5B
09C62:  CLRF   x5C
09C64:  CLRF   x5D
09C66:  CLRF   x5E
09C68:  CLRF   x5F
09C6A:  CLRF   x60
09C6C:  CLRF   x61
09C6E:  CLRF   x62
09C70:  CLRF   x63
09C72:  CLRF   x64
09C74:  CLRF   x65
09C76:  CLRF   x66
09C78:  CLRF   x67
09C7A:  CLRF   x68
09C7C:  CLRF   x69
09C7E:  CLRF   x6A
09C80:  CLRF   x6B
09C82:  CLRF   x6C
09C84:  CLRF   x6D
09C86:  CLRF   x6E
09C88:  CLRF   x6F
09C8A:  CLRF   x70
09C8C:  CLRF   x71
09C8E:  CLRF   x72
09C90:  CLRF   x73
09C92:  CLRF   x74
09C94:  CLRF   x75
09C96:  CLRF   x76
09C98:  CLRF   x77
09C9A:  CLRF   x78
09C9C:  CLRF   x79
09C9E:  CLRF   x7A
09CA0:  CLRF   x7B
09CA2:  CLRF   x7C
09CA4:  CLRF   x7D
09CA6:  CLRF   x7E
09CA8:  CLRF   x7F
09CAA:  CLRF   x80
09CAC:  CLRF   x81
09CAE:  CLRF   x82
09CB0:  CLRF   x83
09CB2:  CLRF   x84
09CB4:  CLRF   x85
09CB6:  CLRF   x86
09CB8:  CLRF   x87
09CBA:  CLRF   x88
09CBC:  CLRF   x89
09CBE:  CLRF   x8A
09CC0:  CLRF   x8B
09CC2:  CLRF   x8C
09CC4:  CLRF   x8D
09CC6:  CLRF   x8E
09CC8:  CLRF   x8F
09CCA:  CLRF   x90
09CCC:  CLRF   x91
09CCE:  CLRF   x92
09CD0:  CLRF   x93
09CD2:  CLRF   x94
09CD4:  CLRF   x95
09CD6:  CLRF   x96
09CD8:  CLRF   x97
09CDA:  CLRF   x98
09CDC:  CLRF   x99
09CDE:  CLRF   x9A
09CE0:  CLRF   x9B
09CE2:  CLRF   x9C
09CE4:  CLRF   x9D
09CE6:  CLRF   x9E
09CE8:  CLRF   x9F
09CEA:  CLRF   xA0
09CEC:  CLRF   xA1
09CEE:  CLRF   xA2
09CF0:  CLRF   xA3
09CF2:  CLRF   xA4
09CF4:  CLRF   xA5
09CF6:  CLRF   xA6
09CF8:  CLRF   xA7
09CFA:  CLRF   xA8
09CFC:  CLRF   xA9
09CFE:  CLRF   xAA
09D00:  CLRF   xAB
09D02:  CLRF   xAC
09D04:  CLRF   xAD
09D06:  CLRF   xAE
09D08:  CLRF   xAF
09D0A:  CLRF   xB0
09D0C:  CLRF   xB1
09D0E:  CLRF   xB2
09D10:  CLRF   xB3
09D12:  CLRF   xB4
09D14:  CLRF   xB5
09D16:  CLRF   xB6
09D18:  CLRF   xB7
09D1A:  CLRF   xB8
09D1C:  CLRF   xB9
09D1E:  CLRF   xBA
09D20:  CLRF   xBB
09D22:  CLRF   xBC
09D24:  CLRF   xBD
09D26:  CLRF   xBE
09D28:  CLRF   xBF
09D2A:  CLRF   xC0
09D2C:  CLRF   xC1
09D2E:  CLRF   xC2
09D30:  CLRF   xC3
09D32:  CLRF   xC4
09D34:  CLRF   xC5
09D36:  CLRF   xC6
09D38:  CLRF   xC7
09D3A:  CLRF   xC8
09D3C:  CLRF   xC9
09D3E:  CLRF   xCA
09D40:  CLRF   xCB
09D42:  CLRF   xCC
09D44:  CLRF   xCD
09D46:  CLRF   xCE
09D48:  CLRF   xCF
09D4A:  CLRF   xD0
09D4C:  CLRF   xD1
09D4E:  CLRF   xD2
09D50:  CLRF   xD3
09D52:  CLRF   xD4
09D54:  CLRF   xD5
09D56:  CLRF   xD6
09D58:  CLRF   xD7
09D5A:  CLRF   xD8
09D5C:  CLRF   xD9
09D5E:  CLRF   xDA
09D60:  CLRF   xDB
09D62:  CLRF   xDC
09D64:  CLRF   xDD
09D66:  CLRF   xDE
09D68:  CLRF   xDF
09D6A:  CLRF   xE0
09D6C:  CLRF   xE1
09D6E:  CLRF   xE2
09D70:  CLRF   xE3
09D72:  CLRF   xE4
09D74:  CLRF   xE5
09D76:  CLRF   xE6
09D78:  CLRF   xE7
09D7A:  CLRF   xE8
09D7C:  CLRF   xE9
09D7E:  CLRF   xEA
09D80:  CLRF   xEB
09D82:  CLRF   xEC
09D84:  CLRF   xED
09D86:  CLRF   xEE
09D88:  CLRF   xEF
09D8A:  CLRF   xF0
09D8C:  CLRF   xF1
09D8E:  CLRF   xF2
09D90:  CLRF   xF3
09D92:  CLRF   xF4
09D94:  CLRF   xF5
09D96:  CLRF   xF6
09D98:  CLRF   xF7
09D9A:  CLRF   xF8
09D9C:  CLRF   xF9
09D9E:  CLRF   xFA
09DA0:  CLRF   xFB
09DA2:  CLRF   xFC
09DA4:  CLRF   xFD
09DA6:  CLRF   xFE
09DA8:  CLRF   xFF
09DAA:  MOVLB  3
09DAC:  CLRF   x00
09DAE:  CLRF   x01
09DB0:  CLRF   x02
09DB2:  CLRF   x03
09DB4:  CLRF   x04
09DB6:  CLRF   x05
09DB8:  CLRF   x06
09DBA:  CLRF   x07
09DBC:  CLRF   x08
09DBE:  CLRF   x09
09DC0:  CLRF   x0A
09DC2:  CLRF   x0B
09DC4:  CLRF   x0C
09DC6:  CLRF   x0D
09DC8:  CLRF   x0E
09DCA:  CLRF   x0F
09DCC:  CLRF   x10
09DCE:  CLRF   x11
09DD0:  CLRF   x12
09DD2:  CLRF   x13
09DD4:  CLRF   x14
09DD6:  CLRF   x15
09DD8:  CLRF   x16
09DDA:  CLRF   x17
09DDC:  CLRF   x18
09DDE:  CLRF   x19
09DE0:  CLRF   x1A
09DE2:  CLRF   x1B
09DE4:  CLRF   x1C
09DE6:  CLRF   x1D
09DE8:  CLRF   x1E
09DEA:  CLRF   x1F
09DEC:  CLRF   x20
09DEE:  CLRF   x21
09DF0:  CLRF   x22
09DF2:  CLRF   x23
09DF4:  CLRF   x24
09DF6:  CLRF   x25
09DF8:  CLRF   x26
09DFA:  CLRF   x27
09DFC:  CLRF   x28
09DFE:  CLRF   x29
09E00:  CLRF   x2A
09E02:  CLRF   x2B
09E04:  CLRF   x2C
09E06:  CLRF   x2D
09E08:  CLRF   x2E
09E0A:  CLRF   x2F
09E0C:  CLRF   x30
09E0E:  CLRF   x31
09E10:  CLRF   x32
09E12:  CLRF   x33
09E14:  CLRF   x34
09E16:  CLRF   x35
09E18:  CLRF   x36
09E1A:  CLRF   x37
09E1C:  CLRF   x38
09E1E:  CLRF   x39
09E20:  CLRF   x3A
09E22:  CLRF   x3B
09E24:  CLRF   x3C
09E26:  CLRF   x3D
09E28:  CLRF   x3E
09E2A:  CLRF   x3F
09E2C:  CLRF   x40
09E2E:  CLRF   x41
09E30:  CLRF   x42
09E32:  CLRF   x43
09E34:  CLRF   x44
09E36:  CLRF   x45
09E38:  CLRF   x46
09E3A:  CLRF   x47
09E3C:  CLRF   x48
09E3E:  CLRF   x49
09E40:  CLRF   x4A
09E42:  CLRF   x4B
09E44:  CLRF   x4C
09E46:  CLRF   x4D
09E48:  CLRF   x4E
09E4A:  CLRF   x4F
09E4C:  CLRF   x50
09E4E:  CLRF   x51
09E50:  CLRF   x52
09E52:  CLRF   x53
09E54:  CLRF   x54
09E56:  CLRF   x55
09E58:  CLRF   x56
09E5A:  CLRF   x57
09E5C:  CLRF   x58
09E5E:  CLRF   x59
09E60:  CLRF   x5A
09E62:  CLRF   x5B
09E64:  CLRF   x5C
09E66:  CLRF   x5D
09E68:  CLRF   x5E
09E6A:  CLRF   x5F
09E6C:  CLRF   x60
09E6E:  CLRF   x61
09E70:  CLRF   x62
09E72:  CLRF   x63
09E74:  CLRF   x64
09E76:  CLRF   x65
09E78:  CLRF   x66
09E7A:  CLRF   x67
09E7C:  CLRF   x68
09E7E:  CLRF   x69
09E80:  CLRF   x6A
09E82:  CLRF   x6B
09E84:  CLRF   x6C
09E86:  CLRF   x6D
09E88:  CLRF   x6E
09E8A:  CLRF   x6F
09E8C:  CLRF   x70
09E8E:  CLRF   x71
09E90:  CLRF   x72
09E92:  CLRF   x73
09E94:  CLRF   x74
09E96:  CLRF   x75
09E98:  CLRF   x76
09E9A:  CLRF   x77
09E9C:  CLRF   x78
09E9E:  CLRF   x79
09EA0:  CLRF   x7A
09EA2:  CLRF   x7B
09EA4:  CLRF   x7C
09EA6:  CLRF   x7D
09EA8:  CLRF   x7E
09EAA:  CLRF   x7F
09EAC:  CLRF   x80
09EAE:  CLRF   x81
09EB0:  CLRF   x82
09EB2:  CLRF   x83
09EB4:  CLRF   x84
09EB6:  CLRF   x85
09EB8:  CLRF   x86
09EBA:  CLRF   x87
09EBC:  CLRF   x88
09EBE:  CLRF   x89
09EC0:  CLRF   x8A
09EC2:  CLRF   x8B
09EC4:  CLRF   x8C
09EC6:  CLRF   x8D
09EC8:  CLRF   x8E
09ECA:  CLRF   x8F
09ECC:  CLRF   x90
09ECE:  CLRF   x91
09ED0:  CLRF   x92
09ED2:  CLRF   x93
09ED4:  CLRF   x94
09ED6:  CLRF   x95
09ED8:  CLRF   x96
09EDA:  CLRF   x97
09EDC:  CLRF   x98
09EDE:  CLRF   x99
09EE0:  CLRF   x9A
09EE2:  CLRF   x9B
09EE4:  CLRF   x9C
09EE6:  CLRF   x9D
09EE8:  CLRF   x9E
09EEA:  CLRF   x9F
09EEC:  CLRF   xA0
09EEE:  CLRF   xA1
09EF0:  CLRF   xA2
09EF2:  CLRF   xA3
09EF4:  CLRF   xA4
09EF6:  CLRF   xA5
09EF8:  CLRF   xA6
09EFA:  CLRF   xA7
09EFC:  CLRF   xA8
09EFE:  CLRF   xA9
09F00:  CLRF   xAA
09F02:  CLRF   xAB
09F04:  CLRF   xAC
09F06:  CLRF   xAD
09F08:  CLRF   xAE
09F0A:  CLRF   xAF
09F0C:  CLRF   xB0
09F0E:  CLRF   xB1
09F10:  CLRF   xB2
09F12:  CLRF   xB3
09F14:  CLRF   xB4
09F16:  CLRF   xB5
09F18:  CLRF   xB6
09F1A:  CLRF   xB7
09F1C:  CLRF   xB8
09F1E:  CLRF   xB9
09F20:  CLRF   xBA
09F22:  CLRF   xBB
09F24:  CLRF   xBC
09F26:  CLRF   xBD
09F28:  CLRF   xBE
09F2A:  CLRF   xBF
09F2C:  CLRF   xC0
09F2E:  CLRF   xC1
09F30:  CLRF   xC2
09F32:  CLRF   xC3
09F34:  CLRF   xC4
09F36:  CLRF   xC5
09F38:  CLRF   xC6
09F3A:  CLRF   xC7
09F3C:  CLRF   xC8
09F3E:  CLRF   xC9
09F40:  CLRF   xCA
09F42:  CLRF   xCB
09F44:  CLRF   xCC
09F46:  CLRF   xCD
09F48:  CLRF   xCE
09F4A:  CLRF   xCF
09F4C:  CLRF   xD0
09F4E:  CLRF   xD1
09F50:  CLRF   xD2
09F52:  CLRF   xD3
09F54:  CLRF   xD4
09F56:  CLRF   xD5
09F58:  CLRF   xD6
09F5A:  CLRF   xD7
09F5C:  CLRF   xD8
09F5E:  CLRF   xD9
09F60:  CLRF   xDA
09F62:  CLRF   xDB
09F64:  CLRF   xDC
09F66:  CLRF   xDD
09F68:  CLRF   xDE
09F6A:  CLRF   xDF
09F6C:  CLRF   xE0
09F6E:  CLRF   xE1
09F70:  CLRF   xE2
09F72:  CLRF   xE3
09F74:  CLRF   xE4
09F76:  CLRF   xE5
09F78:  CLRF   xE6
09F7A:  CLRF   xE7
09F7C:  CLRF   xE8
09F7E:  CLRF   xE9
09F80:  CLRF   xEA
09F82:  CLRF   xEB
09F84:  CLRF   xEC
....................     port1.port_num = 1;
09F86:  MOVLW  01
09F88:  MOVLB  1
09F8A:  MOVWF  xE9
....................     port1.sweep_step = 0;
09F8C:  CLRF   xEB
09F8E:  CLRF   xEA
....................     port1.active = 1;
09F90:  MOVLB  3
09F92:  BSF    xEC.0
.................... 
....................     // Init Port2
....................     sweep_config_t port2 = {0};
09F94:  CLRF   xED
09F96:  CLRF   xEE
09F98:  CLRF   xEF
09F9A:  CLRF   xF0
09F9C:  CLRF   xF1
09F9E:  CLRF   xF2
09FA0:  CLRF   xF3
09FA2:  CLRF   xF4
09FA4:  CLRF   xF5
09FA6:  CLRF   xF6
09FA8:  CLRF   xF7
09FAA:  CLRF   xF8
09FAC:  CLRF   xF9
09FAE:  CLRF   xFA
09FB0:  CLRF   xFB
09FB2:  CLRF   xFC
09FB4:  CLRF   xFD
09FB6:  CLRF   xFE
09FB8:  CLRF   xFF
09FBA:  MOVLB  4
09FBC:  CLRF   x00
09FBE:  CLRF   x01
09FC0:  CLRF   x02
09FC2:  CLRF   x03
09FC4:  CLRF   x04
09FC6:  CLRF   x05
09FC8:  CLRF   x06
09FCA:  CLRF   x07
09FCC:  CLRF   x08
09FCE:  CLRF   x09
09FD0:  CLRF   x0A
09FD2:  CLRF   x0B
09FD4:  CLRF   x0C
09FD6:  CLRF   x0D
09FD8:  CLRF   x0E
09FDA:  CLRF   x0F
09FDC:  CLRF   x10
09FDE:  CLRF   x11
09FE0:  CLRF   x12
09FE2:  CLRF   x13
09FE4:  CLRF   x14
09FE6:  CLRF   x15
09FE8:  CLRF   x16
09FEA:  CLRF   x17
09FEC:  CLRF   x18
09FEE:  CLRF   x19
09FF0:  CLRF   x1A
09FF2:  CLRF   x1B
09FF4:  CLRF   x1C
09FF6:  CLRF   x1D
09FF8:  CLRF   x1E
09FFA:  CLRF   x1F
09FFC:  CLRF   x20
09FFE:  CLRF   x21
0A000:  CLRF   x22
0A002:  CLRF   x23
0A004:  CLRF   x24
0A006:  CLRF   x25
0A008:  CLRF   x26
0A00A:  CLRF   x27
0A00C:  CLRF   x28
0A00E:  CLRF   x29
0A010:  CLRF   x2A
0A012:  CLRF   x2B
0A014:  CLRF   x2C
0A016:  CLRF   x2D
0A018:  CLRF   x2E
0A01A:  CLRF   x2F
0A01C:  CLRF   x30
0A01E:  CLRF   x31
0A020:  CLRF   x32
0A022:  CLRF   x33
0A024:  CLRF   x34
0A026:  CLRF   x35
0A028:  CLRF   x36
0A02A:  CLRF   x37
0A02C:  CLRF   x38
0A02E:  CLRF   x39
0A030:  CLRF   x3A
0A032:  CLRF   x3B
0A034:  CLRF   x3C
0A036:  CLRF   x3D
0A038:  CLRF   x3E
0A03A:  CLRF   x3F
0A03C:  CLRF   x40
0A03E:  CLRF   x41
0A040:  CLRF   x42
0A042:  CLRF   x43
0A044:  CLRF   x44
0A046:  CLRF   x45
0A048:  CLRF   x46
0A04A:  CLRF   x47
0A04C:  CLRF   x48
0A04E:  CLRF   x49
0A050:  CLRF   x4A
0A052:  CLRF   x4B
0A054:  CLRF   x4C
0A056:  CLRF   x4D
0A058:  CLRF   x4E
0A05A:  CLRF   x4F
0A05C:  CLRF   x50
0A05E:  CLRF   x51
0A060:  CLRF   x52
0A062:  CLRF   x53
0A064:  CLRF   x54
0A066:  CLRF   x55
0A068:  CLRF   x56
0A06A:  CLRF   x57
0A06C:  CLRF   x58
0A06E:  CLRF   x59
0A070:  CLRF   x5A
0A072:  CLRF   x5B
0A074:  CLRF   x5C
0A076:  CLRF   x5D
0A078:  CLRF   x5E
0A07A:  CLRF   x5F
0A07C:  CLRF   x60
0A07E:  CLRF   x61
0A080:  CLRF   x62
0A082:  CLRF   x63
0A084:  CLRF   x64
0A086:  CLRF   x65
0A088:  CLRF   x66
0A08A:  CLRF   x67
0A08C:  CLRF   x68
0A08E:  CLRF   x69
0A090:  CLRF   x6A
0A092:  CLRF   x6B
0A094:  CLRF   x6C
0A096:  CLRF   x6D
0A098:  CLRF   x6E
0A09A:  CLRF   x6F
0A09C:  CLRF   x70
0A09E:  CLRF   x71
0A0A0:  CLRF   x72
0A0A2:  CLRF   x73
0A0A4:  CLRF   x74
0A0A6:  CLRF   x75
0A0A8:  CLRF   x76
0A0AA:  CLRF   x77
0A0AC:  CLRF   x78
0A0AE:  CLRF   x79
0A0B0:  CLRF   x7A
0A0B2:  CLRF   x7B
0A0B4:  CLRF   x7C
0A0B6:  CLRF   x7D
0A0B8:  CLRF   x7E
0A0BA:  CLRF   x7F
0A0BC:  CLRF   x80
0A0BE:  CLRF   x81
0A0C0:  CLRF   x82
0A0C2:  CLRF   x83
0A0C4:  CLRF   x84
0A0C6:  CLRF   x85
0A0C8:  CLRF   x86
0A0CA:  CLRF   x87
0A0CC:  CLRF   x88
0A0CE:  CLRF   x89
0A0D0:  CLRF   x8A
0A0D2:  CLRF   x8B
0A0D4:  CLRF   x8C
0A0D6:  CLRF   x8D
0A0D8:  CLRF   x8E
0A0DA:  CLRF   x8F
0A0DC:  CLRF   x90
0A0DE:  CLRF   x91
0A0E0:  CLRF   x92
0A0E2:  CLRF   x93
0A0E4:  CLRF   x94
0A0E6:  CLRF   x95
0A0E8:  CLRF   x96
0A0EA:  CLRF   x97
0A0EC:  CLRF   x98
0A0EE:  CLRF   x99
0A0F0:  CLRF   x9A
0A0F2:  CLRF   x9B
0A0F4:  CLRF   x9C
0A0F6:  CLRF   x9D
0A0F8:  CLRF   x9E
0A0FA:  CLRF   x9F
0A0FC:  CLRF   xA0
0A0FE:  CLRF   xA1
0A100:  CLRF   xA2
0A102:  CLRF   xA3
0A104:  CLRF   xA4
0A106:  CLRF   xA5
0A108:  CLRF   xA6
0A10A:  CLRF   xA7
0A10C:  CLRF   xA8
0A10E:  CLRF   xA9
0A110:  CLRF   xAA
0A112:  CLRF   xAB
0A114:  CLRF   xAC
0A116:  CLRF   xAD
0A118:  CLRF   xAE
0A11A:  CLRF   xAF
0A11C:  CLRF   xB0
0A11E:  CLRF   xB1
0A120:  CLRF   xB2
0A122:  CLRF   xB3
0A124:  CLRF   xB4
0A126:  CLRF   xB5
0A128:  CLRF   xB6
0A12A:  CLRF   xB7
0A12C:  CLRF   xB8
0A12E:  CLRF   xB9
0A130:  CLRF   xBA
0A132:  CLRF   xBB
0A134:  CLRF   xBC
0A136:  CLRF   xBD
0A138:  CLRF   xBE
0A13A:  CLRF   xBF
0A13C:  CLRF   xC0
0A13E:  CLRF   xC1
0A140:  CLRF   xC2
0A142:  CLRF   xC3
0A144:  CLRF   xC4
0A146:  CLRF   xC5
0A148:  CLRF   xC6
0A14A:  CLRF   xC7
0A14C:  CLRF   xC8
0A14E:  CLRF   xC9
0A150:  CLRF   xCA
0A152:  CLRF   xCB
0A154:  CLRF   xCC
0A156:  CLRF   xCD
0A158:  CLRF   xCE
0A15A:  CLRF   xCF
0A15C:  CLRF   xD0
0A15E:  CLRF   xD1
0A160:  CLRF   xD2
0A162:  CLRF   xD3
0A164:  CLRF   xD4
0A166:  CLRF   xD5
0A168:  CLRF   xD6
0A16A:  CLRF   xD7
0A16C:  CLRF   xD8
0A16E:  CLRF   xD9
0A170:  CLRF   xDA
0A172:  CLRF   xDB
0A174:  CLRF   xDC
0A176:  CLRF   xDD
0A178:  CLRF   xDE
0A17A:  CLRF   xDF
0A17C:  CLRF   xE0
0A17E:  CLRF   xE1
0A180:  CLRF   xE2
0A182:  CLRF   xE3
0A184:  CLRF   xE4
0A186:  CLRF   xE5
0A188:  CLRF   xE6
0A18A:  CLRF   xE7
0A18C:  CLRF   xE8
0A18E:  CLRF   xE9
0A190:  CLRF   xEA
0A192:  CLRF   xEB
0A194:  CLRF   xEC
0A196:  CLRF   xED
0A198:  CLRF   xEE
0A19A:  CLRF   xEF
0A19C:  CLRF   xF0
0A19E:  CLRF   xF1
0A1A0:  CLRF   xF2
0A1A2:  CLRF   xF3
0A1A4:  CLRF   xF4
0A1A6:  CLRF   xF5
0A1A8:  CLRF   xF6
0A1AA:  CLRF   xF7
0A1AC:  CLRF   xF8
0A1AE:  CLRF   xF9
0A1B0:  CLRF   xFA
0A1B2:  CLRF   xFB
0A1B4:  CLRF   xFC
0A1B6:  CLRF   xFD
0A1B8:  CLRF   xFE
0A1BA:  CLRF   xFF
0A1BC:  MOVLB  5
0A1BE:  CLRF   x00
0A1C0:  CLRF   x01
0A1C2:  CLRF   x02
0A1C4:  CLRF   x03
0A1C6:  CLRF   x04
0A1C8:  CLRF   x05
0A1CA:  CLRF   x06
0A1CC:  CLRF   x07
0A1CE:  CLRF   x08
0A1D0:  CLRF   x09
0A1D2:  CLRF   x0A
0A1D4:  CLRF   x0B
0A1D6:  CLRF   x0C
0A1D8:  CLRF   x0D
0A1DA:  CLRF   x0E
0A1DC:  CLRF   x0F
0A1DE:  CLRF   x10
0A1E0:  CLRF   x11
0A1E2:  CLRF   x12
0A1E4:  CLRF   x13
0A1E6:  CLRF   x14
0A1E8:  CLRF   x15
0A1EA:  CLRF   x16
0A1EC:  CLRF   x17
0A1EE:  CLRF   x18
0A1F0:  CLRF   x19
0A1F2:  CLRF   x1A
0A1F4:  CLRF   x1B
0A1F6:  CLRF   x1C
0A1F8:  CLRF   x1D
0A1FA:  CLRF   x1E
0A1FC:  CLRF   x1F
0A1FE:  CLRF   x20
0A200:  CLRF   x21
0A202:  CLRF   x22
0A204:  CLRF   x23
0A206:  CLRF   x24
0A208:  CLRF   x25
0A20A:  CLRF   x26
0A20C:  CLRF   x27
0A20E:  CLRF   x28
0A210:  CLRF   x29
0A212:  CLRF   x2A
0A214:  CLRF   x2B
0A216:  CLRF   x2C
0A218:  CLRF   x2D
0A21A:  CLRF   x2E
0A21C:  CLRF   x2F
0A21E:  CLRF   x30
0A220:  CLRF   x31
0A222:  CLRF   x32
0A224:  CLRF   x33
0A226:  CLRF   x34
0A228:  CLRF   x35
0A22A:  CLRF   x36
0A22C:  CLRF   x37
0A22E:  CLRF   x38
0A230:  CLRF   x39
0A232:  CLRF   x3A
0A234:  CLRF   x3B
0A236:  CLRF   x3C
0A238:  CLRF   x3D
0A23A:  CLRF   x3E
0A23C:  CLRF   x3F
0A23E:  CLRF   x40
0A240:  CLRF   x41
0A242:  CLRF   x42
0A244:  CLRF   x43
0A246:  CLRF   x44
0A248:  CLRF   x45
0A24A:  CLRF   x46
0A24C:  CLRF   x47
0A24E:  CLRF   x48
0A250:  CLRF   x49
0A252:  CLRF   x4A
0A254:  CLRF   x4B
0A256:  CLRF   x4C
0A258:  CLRF   x4D
0A25A:  CLRF   x4E
0A25C:  CLRF   x4F
0A25E:  CLRF   x50
0A260:  CLRF   x51
0A262:  CLRF   x52
0A264:  CLRF   x53
0A266:  CLRF   x54
0A268:  CLRF   x55
0A26A:  CLRF   x56
0A26C:  CLRF   x57
0A26E:  CLRF   x58
0A270:  CLRF   x59
0A272:  CLRF   x5A
0A274:  CLRF   x5B
0A276:  CLRF   x5C
0A278:  CLRF   x5D
0A27A:  CLRF   x5E
0A27C:  CLRF   x5F
0A27E:  CLRF   x60
0A280:  CLRF   x61
0A282:  CLRF   x62
0A284:  CLRF   x63
0A286:  CLRF   x64
0A288:  CLRF   x65
0A28A:  CLRF   x66
0A28C:  CLRF   x67
0A28E:  CLRF   x68
0A290:  CLRF   x69
0A292:  CLRF   x6A
0A294:  CLRF   x6B
0A296:  CLRF   x6C
0A298:  CLRF   x6D
0A29A:  CLRF   x6E
0A29C:  CLRF   x6F
0A29E:  CLRF   x70
0A2A0:  CLRF   x71
0A2A2:  CLRF   x72
0A2A4:  CLRF   x73
0A2A6:  CLRF   x74
0A2A8:  CLRF   x75
0A2AA:  CLRF   x76
0A2AC:  CLRF   x77
0A2AE:  CLRF   x78
0A2B0:  CLRF   x79
0A2B2:  CLRF   x7A
0A2B4:  CLRF   x7B
0A2B6:  CLRF   x7C
0A2B8:  CLRF   x7D
0A2BA:  CLRF   x7E
0A2BC:  CLRF   x7F
0A2BE:  CLRF   x80
0A2C0:  CLRF   x81
0A2C2:  CLRF   x82
0A2C4:  CLRF   x83
0A2C6:  CLRF   x84
0A2C8:  CLRF   x85
0A2CA:  CLRF   x86
0A2CC:  CLRF   x87
0A2CE:  CLRF   x88
0A2D0:  CLRF   x89
0A2D2:  CLRF   x8A
0A2D4:  CLRF   x8B
0A2D6:  CLRF   x8C
0A2D8:  CLRF   x8D
0A2DA:  CLRF   x8E
0A2DC:  CLRF   x8F
0A2DE:  CLRF   x90
0A2E0:  CLRF   x91
0A2E2:  CLRF   x92
0A2E4:  CLRF   x93
0A2E6:  CLRF   x94
0A2E8:  CLRF   x95
0A2EA:  CLRF   x96
0A2EC:  CLRF   x97
0A2EE:  CLRF   x98
0A2F0:  CLRF   x99
0A2F2:  CLRF   x9A
0A2F4:  CLRF   x9B
0A2F6:  CLRF   x9C
0A2F8:  CLRF   x9D
0A2FA:  CLRF   x9E
0A2FC:  CLRF   x9F
0A2FE:  CLRF   xA0
0A300:  CLRF   xA1
0A302:  CLRF   xA2
0A304:  CLRF   xA3
0A306:  CLRF   xA4
0A308:  CLRF   xA5
0A30A:  CLRF   xA6
0A30C:  CLRF   xA7
0A30E:  CLRF   xA8
0A310:  CLRF   xA9
0A312:  CLRF   xAA
0A314:  CLRF   xAB
0A316:  CLRF   xAC
0A318:  CLRF   xAD
0A31A:  CLRF   xAE
0A31C:  CLRF   xAF
0A31E:  CLRF   xB0
0A320:  CLRF   xB1
0A322:  CLRF   xB2
0A324:  CLRF   xB3
0A326:  CLRF   xB4
0A328:  CLRF   xB5
0A32A:  CLRF   xB6
0A32C:  CLRF   xB7
0A32E:  CLRF   xB8
0A330:  CLRF   xB9
0A332:  CLRF   xBA
0A334:  CLRF   xBB
0A336:  CLRF   xBC
0A338:  CLRF   xBD
0A33A:  CLRF   xBE
0A33C:  CLRF   xBF
0A33E:  CLRF   xC0
0A340:  CLRF   xC1
0A342:  CLRF   xC2
0A344:  CLRF   xC3
0A346:  CLRF   xC4
0A348:  CLRF   xC5
0A34A:  CLRF   xC6
0A34C:  CLRF   xC7
0A34E:  CLRF   xC8
0A350:  CLRF   xC9
0A352:  CLRF   xCA
0A354:  CLRF   xCB
0A356:  CLRF   xCC
0A358:  CLRF   xCD
0A35A:  CLRF   xCE
0A35C:  CLRF   xCF
0A35E:  CLRF   xD0
0A360:  CLRF   xD1
0A362:  CLRF   xD2
0A364:  CLRF   xD3
0A366:  CLRF   xD4
0A368:  CLRF   xD5
0A36A:  CLRF   xD6
0A36C:  CLRF   xD7
0A36E:  CLRF   xD8
0A370:  CLRF   xD9
0A372:  CLRF   xDA
0A374:  CLRF   xDB
0A376:  CLRF   xDC
0A378:  CLRF   xDD
0A37A:  CLRF   xDE
0A37C:  CLRF   xDF
0A37E:  CLRF   xE0
0A380:  CLRF   xE1
0A382:  CLRF   xE2
0A384:  CLRF   xE3
0A386:  CLRF   xE4
0A388:  CLRF   xE5
0A38A:  CLRF   xE6
0A38C:  CLRF   xE7
0A38E:  CLRF   xE8
0A390:  CLRF   xE9
0A392:  CLRF   xEA
0A394:  CLRF   xEB
0A396:  CLRF   xEC
0A398:  CLRF   xED
0A39A:  CLRF   xEE
0A39C:  CLRF   xEF
0A39E:  CLRF   xF0
....................     port2.port_num = 2;
0A3A0:  MOVLW  02
0A3A2:  MOVLB  3
0A3A4:  MOVWF  xED
....................     port2.sweep_step = 0;
0A3A6:  CLRF   xEF
0A3A8:  CLRF   xEE
....................     port2.active = 1;
0A3AA:  MOVLB  5
0A3AC:  BSF    xF0.0
.................... 
....................     int16 count = 0;
0A3AE:  CLRF   xF2
0A3B0:  CLRF   xF1
....................     
....................     // Initialize DACs to 0
....................     mcp4901_1_write(1);
0A3B2:  MOVLB  9
0A3B4:  CLRF   xDD
0A3B6:  MOVLW  01
0A3B8:  MOVWF  xDC
0A3BA:  MOVLB  0
0A3BC:  CALL   2872
....................     mcp4901_2_write(1);
0A3C0:  MOVLB  9
0A3C2:  CLRF   xDD
0A3C4:  MOVLW  01
0A3C6:  MOVWF  xDC
0A3C8:  MOVLB  0
0A3CA:  CALL   28B0
.................... 
....................     unsigned int16 volt;
....................     unsigned int16 curr;
....................     iv_env_t measured_data = create_meas_data();
0A3CE:  CALL   91E8
0A3D2:  MOVFF  02,03
0A3D6:  MOVF   01,W
0A3D8:  MOVWF  FE1
0A3DA:  MOVFF  03,FE2
0A3DE:  MOVLW  05
0A3E0:  MOVWF  FEA
0A3E2:  MOVLW  F7
0A3E4:  MOVWF  FE9
0A3E6:  MOVLW  0C
0A3E8:  MOVWF  01
0A3EA:  MOVFF  FE6,FEE
0A3EE:  DECFSZ 01,F
0A3F0:  GOTO   A3EA
....................     while (port1.active || port2.active)
0A3F4:  MOVLB  3
0A3F6:  BTFSS  xEC.0
0A3F8:  BRA    A400
0A3FA:  MOVLB  0
0A3FC:  GOTO   A410
0A400:  MOVLB  0
0A402:  MOVLB  5
0A404:  BTFSC  xF0.0
0A406:  BRA    A40E
0A408:  MOVLB  0
0A40A:  GOTO   A770
0A40E:  MOVLB  0
....................     {
....................         mcp4901_1_write(count);
0A410:  MOVFF  5F2,9DD
0A414:  MOVFF  5F1,9DC
0A418:  CALL   2872
....................         mcp4901_2_write(count);
0A41C:  MOVFF  5F2,9DD
0A420:  MOVFF  5F1,9DC
0A424:  CALL   28B0
....................         delay_us(10); 
0A428:  MOVLW  0D
0A42A:  MOVWF  00
0A42C:  DECFSZ 00,F
0A42E:  BRA    A42C
....................         if (port1.active) {
0A430:  MOVLB  3
0A432:  BTFSC  xEC.0
0A434:  BRA    A43C
0A436:  MOVLB  0
0A438:  GOTO   A5B8
0A43C:  MOVLB  0
....................             volt = ad7490_read(ADC_CIGS1_AMP);
0A43E:  MOVLW  02
0A440:  MOVLB  9
0A442:  MOVWF  xEE
0A444:  MOVLB  0
0A446:  CALL   24C2
0A44A:  MOVFF  02,5F4
0A44E:  MOVFF  01,5F3
....................             curr = ad7490_read(ADC_CIGS1_CURR);
0A452:  MOVLW  01
0A454:  MOVLB  9
0A456:  MOVWF  xEE
0A458:  MOVLB  0
0A45A:  CALL   24C2
0A45E:  MOVFF  02,5F6
0A462:  MOVFF  01,5F5
....................             // ad7490_read_2port(ADC_CIGS1_AMP, ADC_CIGS1_CURR, &volt, &curr);
....................             // fprintf(PC, "%04LX,%04LX,", volt, curr);
....................             port1.data_buffer[count*3]= (volt  >> 4) & 0xFF;
0A466:  MOVFF  5F2,A52
0A46A:  MOVFF  5F1,A51
0A46E:  MOVLB  A
0A470:  CLRF   x54
0A472:  MOVLW  03
0A474:  MOVWF  x53
0A476:  MOVLB  0
0A478:  CALL   823E
0A47C:  MOVFF  02,60C
0A480:  MOVFF  01,60B
0A484:  MOVLW  EC
0A486:  MOVLB  6
0A488:  ADDWF  x0B,W
0A48A:  MOVWF  FE9
0A48C:  MOVLW  01
0A48E:  ADDWFC x0C,W
0A490:  MOVWF  FEA
0A492:  MOVLB  5
0A494:  RRCF   xF4,W
0A496:  MOVLB  6
0A498:  MOVWF  x10
0A49A:  MOVLB  5
0A49C:  RRCF   xF3,W
0A49E:  MOVLB  6
0A4A0:  MOVWF  x0F
0A4A2:  RRCF   x10,F
0A4A4:  RRCF   x0F,F
0A4A6:  RRCF   x10,F
0A4A8:  RRCF   x0F,F
0A4AA:  RRCF   x10,F
0A4AC:  RRCF   x0F,F
0A4AE:  MOVLW  0F
0A4B0:  ANDWF  x10,F
0A4B2:  MOVF   x0F,W
0A4B4:  MOVWF  00
0A4B6:  CLRF   03
0A4B8:  MOVF   00,W
0A4BA:  MOVWF  FEF
....................             port1.data_buffer[count*3+1]= ((volt & 0x0F) << 4) | ((curr >> 8) & 0x0F);
0A4BC:  MOVFF  5F2,A52
0A4C0:  MOVFF  5F1,A51
0A4C4:  MOVLB  A
0A4C6:  CLRF   x54
0A4C8:  MOVLW  03
0A4CA:  MOVWF  x53
0A4CC:  MOVLB  0
0A4CE:  CALL   823E
0A4D2:  MOVFF  02,60C
0A4D6:  MOVFF  01,60B
0A4DA:  MOVLW  01
0A4DC:  MOVLB  6
0A4DE:  ADDWF  x0B,F
0A4E0:  MOVLW  00
0A4E2:  ADDWFC x0C,F
0A4E4:  MOVLW  EC
0A4E6:  ADDWF  x0B,W
0A4E8:  MOVWF  FE9
0A4EA:  MOVLW  01
0A4EC:  ADDWFC x0C,W
0A4EE:  MOVWF  FEA
0A4F0:  MOVLB  5
0A4F2:  MOVF   xF3,W
0A4F4:  ANDLW  0F
0A4F6:  MOVLB  6
0A4F8:  MOVWF  x0F
0A4FA:  CLRF   x10
0A4FC:  RLCF   x0F,F
0A4FE:  RLCF   x10,F
0A500:  RLCF   x0F,F
0A502:  RLCF   x10,F
0A504:  RLCF   x0F,F
0A506:  RLCF   x10,F
0A508:  RLCF   x0F,F
0A50A:  RLCF   x10,F
0A50C:  MOVLW  F0
0A50E:  ANDWF  x0F,F
0A510:  MOVFF  5F6,611
0A514:  CLRF   x12
0A516:  MOVF   x11,W
0A518:  ANDLW  0F
0A51A:  MOVWF  00
0A51C:  CLRF   03
0A51E:  MOVF   00,W
0A520:  IORWF  x0F,W
0A522:  MOVWF  00
0A524:  MOVF   03,W
0A526:  IORWF  x10,W
0A528:  MOVWF  03
0A52A:  MOVF   00,W
0A52C:  MOVWF  FEF
....................             port1.data_buffer[count*3+2]= curr & 0xFF;
0A52E:  MOVFF  5F2,A52
0A532:  MOVFF  5F1,A51
0A536:  MOVLB  A
0A538:  CLRF   x54
0A53A:  MOVLW  03
0A53C:  MOVWF  x53
0A53E:  MOVLB  0
0A540:  CALL   823E
0A544:  MOVFF  02,60C
0A548:  MOVFF  01,60B
0A54C:  MOVLW  02
0A54E:  MOVLB  6
0A550:  ADDWF  x0B,F
0A552:  MOVLW  00
0A554:  ADDWFC x0C,F
0A556:  MOVLW  EC
0A558:  ADDWF  x0B,W
0A55A:  MOVWF  FE9
0A55C:  MOVLW  01
0A55E:  ADDWFC x0C,W
0A560:  MOVWF  FEA
0A562:  MOVLB  5
0A564:  MOVF   xF5,W
0A566:  MOVWF  00
0A568:  CLRF   03
0A56A:  MOVF   00,W
0A56C:  MOVWF  FEF
....................             port1.sweep_step = count + 1; 
0A56E:  MOVLW  01
0A570:  ADDWF  xF1,W
0A572:  MOVLB  1
0A574:  MOVWF  xEA
0A576:  MOVLW  00
0A578:  MOVLB  5
0A57A:  ADDWFC xF2,W
0A57C:  MOVLB  1
0A57E:  MOVWF  xEB
....................             // fprintf(PC, "%04LX,%04LX,", port1.data_buffer[count].voltage, port1.data_buffer[count].current);
....................             if (curr< curr_limit) {
0A580:  MOVLB  5
0A582:  MOVF   xF6,W
0A584:  MOVLB  1
0A586:  SUBWF  xE2,W
0A588:  BTFSC  FD8.0
0A58A:  BRA    A592
0A58C:  MOVLB  0
0A58E:  GOTO   A5B8
0A592:  MOVLB  0
0A594:  BTFSS  FD8.2
0A596:  GOTO   A5AE
0A59A:  MOVLB  1
0A59C:  MOVF   xE1,W
0A59E:  MOVLB  5
0A5A0:  SUBWF  xF5,W
0A5A2:  BTFSS  FD8.0
0A5A4:  BRA    A5AC
0A5A6:  MOVLB  0
0A5A8:  GOTO   A5B8
0A5AC:  MOVLB  0
....................                 port1.active = 0;
0A5AE:  MOVLB  3
0A5B0:  BCF    xEC.0
....................                 disconnect_port1();
0A5B2:  MOVLB  0
0A5B4:  CALL   926A
....................             }
....................         }
....................         if (port2.active) {
0A5B8:  MOVLB  5
0A5BA:  BTFSC  xF0.0
0A5BC:  BRA    A5C4
0A5BE:  MOVLB  0
0A5C0:  GOTO   A740
0A5C4:  MOVLB  0
....................             volt = ad7490_read(ADC_CIGS2_AMP);
0A5C6:  MOVLW  06
0A5C8:  MOVLB  9
0A5CA:  MOVWF  xEE
0A5CC:  MOVLB  0
0A5CE:  CALL   24C2
0A5D2:  MOVFF  02,5F4
0A5D6:  MOVFF  01,5F3
....................             curr = ad7490_read(ADC_CIGS2_CURR);
0A5DA:  MOVLW  05
0A5DC:  MOVLB  9
0A5DE:  MOVWF  xEE
0A5E0:  MOVLB  0
0A5E2:  CALL   24C2
0A5E6:  MOVFF  02,5F6
0A5EA:  MOVFF  01,5F5
....................             port2.data_buffer[count*3]= (volt  >> 4) & 0xFF;
0A5EE:  MOVFF  5F2,A52
0A5F2:  MOVFF  5F1,A51
0A5F6:  MOVLB  A
0A5F8:  CLRF   x54
0A5FA:  MOVLW  03
0A5FC:  MOVWF  x53
0A5FE:  MOVLB  0
0A600:  CALL   823E
0A604:  MOVFF  02,60C
0A608:  MOVFF  01,60B
0A60C:  MOVLW  F0
0A60E:  MOVLB  6
0A610:  ADDWF  x0B,W
0A612:  MOVWF  FE9
0A614:  MOVLW  03
0A616:  ADDWFC x0C,W
0A618:  MOVWF  FEA
0A61A:  MOVLB  5
0A61C:  RRCF   xF4,W
0A61E:  MOVLB  6
0A620:  MOVWF  x10
0A622:  MOVLB  5
0A624:  RRCF   xF3,W
0A626:  MOVLB  6
0A628:  MOVWF  x0F
0A62A:  RRCF   x10,F
0A62C:  RRCF   x0F,F
0A62E:  RRCF   x10,F
0A630:  RRCF   x0F,F
0A632:  RRCF   x10,F
0A634:  RRCF   x0F,F
0A636:  MOVLW  0F
0A638:  ANDWF  x10,F
0A63A:  MOVF   x0F,W
0A63C:  MOVWF  00
0A63E:  CLRF   03
0A640:  MOVF   00,W
0A642:  MOVWF  FEF
....................             port2.data_buffer[count*3+1]= ((volt & 0x0F) << 4) | ((curr >> 8) & 0x0F);
0A644:  MOVFF  5F2,A52
0A648:  MOVFF  5F1,A51
0A64C:  MOVLB  A
0A64E:  CLRF   x54
0A650:  MOVLW  03
0A652:  MOVWF  x53
0A654:  MOVLB  0
0A656:  CALL   823E
0A65A:  MOVFF  02,60C
0A65E:  MOVFF  01,60B
0A662:  MOVLW  01
0A664:  MOVLB  6
0A666:  ADDWF  x0B,F
0A668:  MOVLW  00
0A66A:  ADDWFC x0C,F
0A66C:  MOVLW  F0
0A66E:  ADDWF  x0B,W
0A670:  MOVWF  FE9
0A672:  MOVLW  03
0A674:  ADDWFC x0C,W
0A676:  MOVWF  FEA
0A678:  MOVLB  5
0A67A:  MOVF   xF3,W
0A67C:  ANDLW  0F
0A67E:  MOVLB  6
0A680:  MOVWF  x0F
0A682:  CLRF   x10
0A684:  RLCF   x0F,F
0A686:  RLCF   x10,F
0A688:  RLCF   x0F,F
0A68A:  RLCF   x10,F
0A68C:  RLCF   x0F,F
0A68E:  RLCF   x10,F
0A690:  RLCF   x0F,F
0A692:  RLCF   x10,F
0A694:  MOVLW  F0
0A696:  ANDWF  x0F,F
0A698:  MOVFF  5F6,611
0A69C:  CLRF   x12
0A69E:  MOVF   x11,W
0A6A0:  ANDLW  0F
0A6A2:  MOVWF  00
0A6A4:  CLRF   03
0A6A6:  MOVF   00,W
0A6A8:  IORWF  x0F,W
0A6AA:  MOVWF  00
0A6AC:  MOVF   03,W
0A6AE:  IORWF  x10,W
0A6B0:  MOVWF  03
0A6B2:  MOVF   00,W
0A6B4:  MOVWF  FEF
....................             port2.data_buffer[count*3+2]= curr & 0xFF;
0A6B6:  MOVFF  5F2,A52
0A6BA:  MOVFF  5F1,A51
0A6BE:  MOVLB  A
0A6C0:  CLRF   x54
0A6C2:  MOVLW  03
0A6C4:  MOVWF  x53
0A6C6:  MOVLB  0
0A6C8:  CALL   823E
0A6CC:  MOVFF  02,60C
0A6D0:  MOVFF  01,60B
0A6D4:  MOVLW  02
0A6D6:  MOVLB  6
0A6D8:  ADDWF  x0B,F
0A6DA:  MOVLW  00
0A6DC:  ADDWFC x0C,F
0A6DE:  MOVLW  F0
0A6E0:  ADDWF  x0B,W
0A6E2:  MOVWF  FE9
0A6E4:  MOVLW  03
0A6E6:  ADDWFC x0C,W
0A6E8:  MOVWF  FEA
0A6EA:  MOVLB  5
0A6EC:  MOVF   xF5,W
0A6EE:  MOVWF  00
0A6F0:  CLRF   03
0A6F2:  MOVF   00,W
0A6F4:  MOVWF  FEF
....................             port2.sweep_step = count + 1;
0A6F6:  MOVLW  01
0A6F8:  ADDWF  xF1,W
0A6FA:  MOVLB  3
0A6FC:  MOVWF  xEE
0A6FE:  MOVLW  00
0A700:  MOVLB  5
0A702:  ADDWFC xF2,W
0A704:  MOVLB  3
0A706:  MOVWF  xEF
....................             if (curr < curr_limit) {
0A708:  MOVLB  5
0A70A:  MOVF   xF6,W
0A70C:  MOVLB  1
0A70E:  SUBWF  xE2,W
0A710:  BTFSC  FD8.0
0A712:  BRA    A71A
0A714:  MOVLB  0
0A716:  GOTO   A740
0A71A:  MOVLB  0
0A71C:  BTFSS  FD8.2
0A71E:  GOTO   A736
0A722:  MOVLB  1
0A724:  MOVF   xE1,W
0A726:  MOVLB  5
0A728:  SUBWF  xF5,W
0A72A:  BTFSS  FD8.0
0A72C:  BRA    A734
0A72E:  MOVLB  0
0A730:  GOTO   A740
0A734:  MOVLB  0
....................                 port2.active = 0;
0A736:  MOVLB  5
0A738:  BCF    xF0.0
....................                 disconnect_port2();
0A73A:  MOVLB  0
0A73C:  CALL   9272
....................             } 
....................         }
....................         count++;
0A740:  MOVLB  5
0A742:  INCF   xF1,F
0A744:  BTFSC  FD8.2
0A746:  INCF   xF2,F
....................         if (count >= 255) {
0A748:  MOVF   xF2,F
0A74A:  BTFSC  FD8.2
0A74C:  BRA    A754
0A74E:  MOVLB  0
0A750:  GOTO   A768
0A754:  MOVLB  0
0A756:  MOVLB  5
0A758:  MOVF   xF1,W
0A75A:  SUBLW  FE
0A75C:  BTFSS  FD8.0
0A75E:  BRA    A766
0A760:  MOVLB  0
0A762:  GOTO   A76C
0A766:  MOVLB  0
....................             // fprintf(PC, "Maximum step count reached: %ld\r\n", count);
....................             break;
0A768:  GOTO   A770
....................         }
0A76C:  GOTO   A3F4
....................     }
....................     // unsigned int32 end_time_ms = get_current_msec();
....................     // Ensure all connections are disabled3
....................     disconnect_port1();
0A770:  CALL   926A
....................     disconnect_port2();
0A774:  CALL   9272
....................     log_meas_data(&measured_data, &port1);
0A778:  MOVLW  05
0A77A:  MOVLB  9
0A77C:  MOVWF  xC3
0A77E:  MOVLW  F7
0A780:  MOVWF  xC2
0A782:  MOVLW  01
0A784:  MOVWF  xC5
0A786:  MOVLW  E9
0A788:  MOVWF  xC4
0A78A:  MOVLB  0
0A78C:  CALL   927A
....................     log_meas_data(&measured_data, &port2);
0A790:  MOVLW  05
0A792:  MOVLB  9
0A794:  MOVWF  xC3
0A796:  MOVLW  F7
0A798:  MOVWF  xC2
0A79A:  MOVLW  03
0A79C:  MOVWF  xC5
0A79E:  MOVLW  ED
0A7A0:  MOVWF  xC4
0A7A2:  MOVLB  0
0A7A4:  CALL   927A
....................     // misf_update_address_area();
....................     unsigned int32 end_time_ms = get_current_msec();
....................     unsigned int32 elapsed_time_ms = end_time_ms - start_time_ms;
0A7A8:  CALL   9B3C
0A7AC:  MOVLB  6
0A7AE:  CLRF   x06
0A7B0:  CLRF   x05
0A7B2:  MOVFF  02,604
0A7B6:  MOVFF  01,603
0A7BA:  MOVLB  1
0A7BC:  MOVF   xE5,W
0A7BE:  MOVLB  6
0A7C0:  SUBWF  x03,W
0A7C2:  MOVWF  x07
0A7C4:  MOVLB  1
0A7C6:  MOVF   xE6,W
0A7C8:  MOVLB  6
0A7CA:  SUBWFB x04,W
0A7CC:  MOVWF  x08
0A7CE:  MOVLB  1
0A7D0:  MOVF   xE7,W
0A7D2:  MOVLB  6
0A7D4:  SUBWFB x05,W
0A7D6:  MOVWF  x09
0A7D8:  MOVLB  1
0A7DA:  MOVF   xE8,W
0A7DC:  MOVLB  6
0A7DE:  SUBWFB x06,W
0A7E0:  MOVWF  x0A
0A7E2:  MOVLB  0
0A7E4:  RETURN 0
.................... }
.................... 
.................... 
.................... void sweep_port1(unsigned int16 curr_limit)
*
0E9DA:  CALL   3C16
0E9DE:  MOVFF  03,1CD
0E9E2:  MOVFF  02,1CC
0E9E6:  MOVFF  01,1CB
0E9EA:  MOVFF  00,1CA
.................... {
....................     unsigned int32 start_time_ms = get_current_sec();
....................     fputc('.', PC);
0E9EE:  MOVLW  2E
0E9F0:  CALL   91DA
....................     // Enable both CIGS ports
....................     connect_port1();
0E9F4:  CALL   5212
.................... 
....................     // Init Port1
....................     sweep_config_t port1 = {0};
0E9F8:  MOVLB  1
0E9FA:  CLRF   xCE
0E9FC:  CLRF   xCF
0E9FE:  CLRF   xD0
0EA00:  CLRF   xD1
0EA02:  CLRF   xD2
0EA04:  CLRF   xD3
0EA06:  CLRF   xD4
0EA08:  CLRF   xD5
0EA0A:  CLRF   xD6
0EA0C:  CLRF   xD7
0EA0E:  CLRF   xD8
0EA10:  CLRF   xD9
0EA12:  CLRF   xDA
0EA14:  CLRF   xDB
0EA16:  CLRF   xDC
0EA18:  CLRF   xDD
0EA1A:  CLRF   xDE
0EA1C:  CLRF   xDF
0EA1E:  CLRF   xE0
0EA20:  CLRF   xE1
0EA22:  CLRF   xE2
0EA24:  CLRF   xE3
0EA26:  CLRF   xE4
0EA28:  CLRF   xE5
0EA2A:  CLRF   xE6
0EA2C:  CLRF   xE7
0EA2E:  CLRF   xE8
0EA30:  CLRF   xE9
0EA32:  CLRF   xEA
0EA34:  CLRF   xEB
0EA36:  CLRF   xEC
0EA38:  CLRF   xED
0EA3A:  CLRF   xEE
0EA3C:  CLRF   xEF
0EA3E:  CLRF   xF0
0EA40:  CLRF   xF1
0EA42:  CLRF   xF2
0EA44:  CLRF   xF3
0EA46:  CLRF   xF4
0EA48:  CLRF   xF5
0EA4A:  CLRF   xF6
0EA4C:  CLRF   xF7
0EA4E:  CLRF   xF8
0EA50:  CLRF   xF9
0EA52:  CLRF   xFA
0EA54:  CLRF   xFB
0EA56:  CLRF   xFC
0EA58:  CLRF   xFD
0EA5A:  CLRF   xFE
0EA5C:  CLRF   xFF
0EA5E:  MOVLB  2
0EA60:  CLRF   x00
0EA62:  CLRF   x01
0EA64:  CLRF   x02
0EA66:  CLRF   x03
0EA68:  CLRF   x04
0EA6A:  CLRF   x05
0EA6C:  CLRF   x06
0EA6E:  CLRF   x07
0EA70:  CLRF   x08
0EA72:  CLRF   x09
0EA74:  CLRF   x0A
0EA76:  CLRF   x0B
0EA78:  CLRF   x0C
0EA7A:  CLRF   x0D
0EA7C:  CLRF   x0E
0EA7E:  CLRF   x0F
0EA80:  CLRF   x10
0EA82:  CLRF   x11
0EA84:  CLRF   x12
0EA86:  CLRF   x13
0EA88:  CLRF   x14
0EA8A:  CLRF   x15
0EA8C:  CLRF   x16
0EA8E:  CLRF   x17
0EA90:  CLRF   x18
0EA92:  CLRF   x19
0EA94:  CLRF   x1A
0EA96:  CLRF   x1B
0EA98:  CLRF   x1C
0EA9A:  CLRF   x1D
0EA9C:  CLRF   x1E
0EA9E:  CLRF   x1F
0EAA0:  CLRF   x20
0EAA2:  CLRF   x21
0EAA4:  CLRF   x22
0EAA6:  CLRF   x23
0EAA8:  CLRF   x24
0EAAA:  CLRF   x25
0EAAC:  CLRF   x26
0EAAE:  CLRF   x27
0EAB0:  CLRF   x28
0EAB2:  CLRF   x29
0EAB4:  CLRF   x2A
0EAB6:  CLRF   x2B
0EAB8:  CLRF   x2C
0EABA:  CLRF   x2D
0EABC:  CLRF   x2E
0EABE:  CLRF   x2F
0EAC0:  CLRF   x30
0EAC2:  CLRF   x31
0EAC4:  CLRF   x32
0EAC6:  CLRF   x33
0EAC8:  CLRF   x34
0EACA:  CLRF   x35
0EACC:  CLRF   x36
0EACE:  CLRF   x37
0EAD0:  CLRF   x38
0EAD2:  CLRF   x39
0EAD4:  CLRF   x3A
0EAD6:  CLRF   x3B
0EAD8:  CLRF   x3C
0EADA:  CLRF   x3D
0EADC:  CLRF   x3E
0EADE:  CLRF   x3F
0EAE0:  CLRF   x40
0EAE2:  CLRF   x41
0EAE4:  CLRF   x42
0EAE6:  CLRF   x43
0EAE8:  CLRF   x44
0EAEA:  CLRF   x45
0EAEC:  CLRF   x46
0EAEE:  CLRF   x47
0EAF0:  CLRF   x48
0EAF2:  CLRF   x49
0EAF4:  CLRF   x4A
0EAF6:  CLRF   x4B
0EAF8:  CLRF   x4C
0EAFA:  CLRF   x4D
0EAFC:  CLRF   x4E
0EAFE:  CLRF   x4F
0EB00:  CLRF   x50
0EB02:  CLRF   x51
0EB04:  CLRF   x52
0EB06:  CLRF   x53
0EB08:  CLRF   x54
0EB0A:  CLRF   x55
0EB0C:  CLRF   x56
0EB0E:  CLRF   x57
0EB10:  CLRF   x58
0EB12:  CLRF   x59
0EB14:  CLRF   x5A
0EB16:  CLRF   x5B
0EB18:  CLRF   x5C
0EB1A:  CLRF   x5D
0EB1C:  CLRF   x5E
0EB1E:  CLRF   x5F
0EB20:  CLRF   x60
0EB22:  CLRF   x61
0EB24:  CLRF   x62
0EB26:  CLRF   x63
0EB28:  CLRF   x64
0EB2A:  CLRF   x65
0EB2C:  CLRF   x66
0EB2E:  CLRF   x67
0EB30:  CLRF   x68
0EB32:  CLRF   x69
0EB34:  CLRF   x6A
0EB36:  CLRF   x6B
0EB38:  CLRF   x6C
0EB3A:  CLRF   x6D
0EB3C:  CLRF   x6E
0EB3E:  CLRF   x6F
0EB40:  CLRF   x70
0EB42:  CLRF   x71
0EB44:  CLRF   x72
0EB46:  CLRF   x73
0EB48:  CLRF   x74
0EB4A:  CLRF   x75
0EB4C:  CLRF   x76
0EB4E:  CLRF   x77
0EB50:  CLRF   x78
0EB52:  CLRF   x79
0EB54:  CLRF   x7A
0EB56:  CLRF   x7B
0EB58:  CLRF   x7C
0EB5A:  CLRF   x7D
0EB5C:  CLRF   x7E
0EB5E:  CLRF   x7F
0EB60:  CLRF   x80
0EB62:  CLRF   x81
0EB64:  CLRF   x82
0EB66:  CLRF   x83
0EB68:  CLRF   x84
0EB6A:  CLRF   x85
0EB6C:  CLRF   x86
0EB6E:  CLRF   x87
0EB70:  CLRF   x88
0EB72:  CLRF   x89
0EB74:  CLRF   x8A
0EB76:  CLRF   x8B
0EB78:  CLRF   x8C
0EB7A:  CLRF   x8D
0EB7C:  CLRF   x8E
0EB7E:  CLRF   x8F
0EB80:  CLRF   x90
0EB82:  CLRF   x91
0EB84:  CLRF   x92
0EB86:  CLRF   x93
0EB88:  CLRF   x94
0EB8A:  CLRF   x95
0EB8C:  CLRF   x96
0EB8E:  CLRF   x97
0EB90:  CLRF   x98
0EB92:  CLRF   x99
0EB94:  CLRF   x9A
0EB96:  CLRF   x9B
0EB98:  CLRF   x9C
0EB9A:  CLRF   x9D
0EB9C:  CLRF   x9E
0EB9E:  CLRF   x9F
0EBA0:  CLRF   xA0
0EBA2:  CLRF   xA1
0EBA4:  CLRF   xA2
0EBA6:  CLRF   xA3
0EBA8:  CLRF   xA4
0EBAA:  CLRF   xA5
0EBAC:  CLRF   xA6
0EBAE:  CLRF   xA7
0EBB0:  CLRF   xA8
0EBB2:  CLRF   xA9
0EBB4:  CLRF   xAA
0EBB6:  CLRF   xAB
0EBB8:  CLRF   xAC
0EBBA:  CLRF   xAD
0EBBC:  CLRF   xAE
0EBBE:  CLRF   xAF
0EBC0:  CLRF   xB0
0EBC2:  CLRF   xB1
0EBC4:  CLRF   xB2
0EBC6:  CLRF   xB3
0EBC8:  CLRF   xB4
0EBCA:  CLRF   xB5
0EBCC:  CLRF   xB6
0EBCE:  CLRF   xB7
0EBD0:  CLRF   xB8
0EBD2:  CLRF   xB9
0EBD4:  CLRF   xBA
0EBD6:  CLRF   xBB
0EBD8:  CLRF   xBC
0EBDA:  CLRF   xBD
0EBDC:  CLRF   xBE
0EBDE:  CLRF   xBF
0EBE0:  CLRF   xC0
0EBE2:  CLRF   xC1
0EBE4:  CLRF   xC2
0EBE6:  CLRF   xC3
0EBE8:  CLRF   xC4
0EBEA:  CLRF   xC5
0EBEC:  CLRF   xC6
0EBEE:  CLRF   xC7
0EBF0:  CLRF   xC8
0EBF2:  CLRF   xC9
0EBF4:  CLRF   xCA
0EBF6:  CLRF   xCB
0EBF8:  CLRF   xCC
0EBFA:  CLRF   xCD
0EBFC:  CLRF   xCE
0EBFE:  CLRF   xCF
0EC00:  CLRF   xD0
0EC02:  CLRF   xD1
0EC04:  CLRF   xD2
0EC06:  CLRF   xD3
0EC08:  CLRF   xD4
0EC0A:  CLRF   xD5
0EC0C:  CLRF   xD6
0EC0E:  CLRF   xD7
0EC10:  CLRF   xD8
0EC12:  CLRF   xD9
0EC14:  CLRF   xDA
0EC16:  CLRF   xDB
0EC18:  CLRF   xDC
0EC1A:  CLRF   xDD
0EC1C:  CLRF   xDE
0EC1E:  CLRF   xDF
0EC20:  CLRF   xE0
0EC22:  CLRF   xE1
0EC24:  CLRF   xE2
0EC26:  CLRF   xE3
0EC28:  CLRF   xE4
0EC2A:  CLRF   xE5
0EC2C:  CLRF   xE6
0EC2E:  CLRF   xE7
0EC30:  CLRF   xE8
0EC32:  CLRF   xE9
0EC34:  CLRF   xEA
0EC36:  CLRF   xEB
0EC38:  CLRF   xEC
0EC3A:  CLRF   xED
0EC3C:  CLRF   xEE
0EC3E:  CLRF   xEF
0EC40:  CLRF   xF0
0EC42:  CLRF   xF1
0EC44:  CLRF   xF2
0EC46:  CLRF   xF3
0EC48:  CLRF   xF4
0EC4A:  CLRF   xF5
0EC4C:  CLRF   xF6
0EC4E:  CLRF   xF7
0EC50:  CLRF   xF8
0EC52:  CLRF   xF9
0EC54:  CLRF   xFA
0EC56:  CLRF   xFB
0EC58:  CLRF   xFC
0EC5A:  CLRF   xFD
0EC5C:  CLRF   xFE
0EC5E:  CLRF   xFF
0EC60:  MOVLB  3
0EC62:  CLRF   x00
0EC64:  CLRF   x01
0EC66:  CLRF   x02
0EC68:  CLRF   x03
0EC6A:  CLRF   x04
0EC6C:  CLRF   x05
0EC6E:  CLRF   x06
0EC70:  CLRF   x07
0EC72:  CLRF   x08
0EC74:  CLRF   x09
0EC76:  CLRF   x0A
0EC78:  CLRF   x0B
0EC7A:  CLRF   x0C
0EC7C:  CLRF   x0D
0EC7E:  CLRF   x0E
0EC80:  CLRF   x0F
0EC82:  CLRF   x10
0EC84:  CLRF   x11
0EC86:  CLRF   x12
0EC88:  CLRF   x13
0EC8A:  CLRF   x14
0EC8C:  CLRF   x15
0EC8E:  CLRF   x16
0EC90:  CLRF   x17
0EC92:  CLRF   x18
0EC94:  CLRF   x19
0EC96:  CLRF   x1A
0EC98:  CLRF   x1B
0EC9A:  CLRF   x1C
0EC9C:  CLRF   x1D
0EC9E:  CLRF   x1E
0ECA0:  CLRF   x1F
0ECA2:  CLRF   x20
0ECA4:  CLRF   x21
0ECA6:  CLRF   x22
0ECA8:  CLRF   x23
0ECAA:  CLRF   x24
0ECAC:  CLRF   x25
0ECAE:  CLRF   x26
0ECB0:  CLRF   x27
0ECB2:  CLRF   x28
0ECB4:  CLRF   x29
0ECB6:  CLRF   x2A
0ECB8:  CLRF   x2B
0ECBA:  CLRF   x2C
0ECBC:  CLRF   x2D
0ECBE:  CLRF   x2E
0ECC0:  CLRF   x2F
0ECC2:  CLRF   x30
0ECC4:  CLRF   x31
0ECC6:  CLRF   x32
0ECC8:  CLRF   x33
0ECCA:  CLRF   x34
0ECCC:  CLRF   x35
0ECCE:  CLRF   x36
0ECD0:  CLRF   x37
0ECD2:  CLRF   x38
0ECD4:  CLRF   x39
0ECD6:  CLRF   x3A
0ECD8:  CLRF   x3B
0ECDA:  CLRF   x3C
0ECDC:  CLRF   x3D
0ECDE:  CLRF   x3E
0ECE0:  CLRF   x3F
0ECE2:  CLRF   x40
0ECE4:  CLRF   x41
0ECE6:  CLRF   x42
0ECE8:  CLRF   x43
0ECEA:  CLRF   x44
0ECEC:  CLRF   x45
0ECEE:  CLRF   x46
0ECF0:  CLRF   x47
0ECF2:  CLRF   x48
0ECF4:  CLRF   x49
0ECF6:  CLRF   x4A
0ECF8:  CLRF   x4B
0ECFA:  CLRF   x4C
0ECFC:  CLRF   x4D
0ECFE:  CLRF   x4E
0ED00:  CLRF   x4F
0ED02:  CLRF   x50
0ED04:  CLRF   x51
0ED06:  CLRF   x52
0ED08:  CLRF   x53
0ED0A:  CLRF   x54
0ED0C:  CLRF   x55
0ED0E:  CLRF   x56
0ED10:  CLRF   x57
0ED12:  CLRF   x58
0ED14:  CLRF   x59
0ED16:  CLRF   x5A
0ED18:  CLRF   x5B
0ED1A:  CLRF   x5C
0ED1C:  CLRF   x5D
0ED1E:  CLRF   x5E
0ED20:  CLRF   x5F
0ED22:  CLRF   x60
0ED24:  CLRF   x61
0ED26:  CLRF   x62
0ED28:  CLRF   x63
0ED2A:  CLRF   x64
0ED2C:  CLRF   x65
0ED2E:  CLRF   x66
0ED30:  CLRF   x67
0ED32:  CLRF   x68
0ED34:  CLRF   x69
0ED36:  CLRF   x6A
0ED38:  CLRF   x6B
0ED3A:  CLRF   x6C
0ED3C:  CLRF   x6D
0ED3E:  CLRF   x6E
0ED40:  CLRF   x6F
0ED42:  CLRF   x70
0ED44:  CLRF   x71
0ED46:  CLRF   x72
0ED48:  CLRF   x73
0ED4A:  CLRF   x74
0ED4C:  CLRF   x75
0ED4E:  CLRF   x76
0ED50:  CLRF   x77
0ED52:  CLRF   x78
0ED54:  CLRF   x79
0ED56:  CLRF   x7A
0ED58:  CLRF   x7B
0ED5A:  CLRF   x7C
0ED5C:  CLRF   x7D
0ED5E:  CLRF   x7E
0ED60:  CLRF   x7F
0ED62:  CLRF   x80
0ED64:  CLRF   x81
0ED66:  CLRF   x82
0ED68:  CLRF   x83
0ED6A:  CLRF   x84
0ED6C:  CLRF   x85
0ED6E:  CLRF   x86
0ED70:  CLRF   x87
0ED72:  CLRF   x88
0ED74:  CLRF   x89
0ED76:  CLRF   x8A
0ED78:  CLRF   x8B
0ED7A:  CLRF   x8C
0ED7C:  CLRF   x8D
0ED7E:  CLRF   x8E
0ED80:  CLRF   x8F
0ED82:  CLRF   x90
0ED84:  CLRF   x91
0ED86:  CLRF   x92
0ED88:  CLRF   x93
0ED8A:  CLRF   x94
0ED8C:  CLRF   x95
0ED8E:  CLRF   x96
0ED90:  CLRF   x97
0ED92:  CLRF   x98
0ED94:  CLRF   x99
0ED96:  CLRF   x9A
0ED98:  CLRF   x9B
0ED9A:  CLRF   x9C
0ED9C:  CLRF   x9D
0ED9E:  CLRF   x9E
0EDA0:  CLRF   x9F
0EDA2:  CLRF   xA0
0EDA4:  CLRF   xA1
0EDA6:  CLRF   xA2
0EDA8:  CLRF   xA3
0EDAA:  CLRF   xA4
0EDAC:  CLRF   xA5
0EDAE:  CLRF   xA6
0EDB0:  CLRF   xA7
0EDB2:  CLRF   xA8
0EDB4:  CLRF   xA9
0EDB6:  CLRF   xAA
0EDB8:  CLRF   xAB
0EDBA:  CLRF   xAC
0EDBC:  CLRF   xAD
0EDBE:  CLRF   xAE
0EDC0:  CLRF   xAF
0EDC2:  CLRF   xB0
0EDC4:  CLRF   xB1
0EDC6:  CLRF   xB2
0EDC8:  CLRF   xB3
0EDCA:  CLRF   xB4
0EDCC:  CLRF   xB5
0EDCE:  CLRF   xB6
0EDD0:  CLRF   xB7
0EDD2:  CLRF   xB8
0EDD4:  CLRF   xB9
0EDD6:  CLRF   xBA
0EDD8:  CLRF   xBB
0EDDA:  CLRF   xBC
0EDDC:  CLRF   xBD
0EDDE:  CLRF   xBE
0EDE0:  CLRF   xBF
0EDE2:  CLRF   xC0
0EDE4:  CLRF   xC1
0EDE6:  CLRF   xC2
0EDE8:  CLRF   xC3
0EDEA:  CLRF   xC4
0EDEC:  CLRF   xC5
0EDEE:  CLRF   xC6
0EDF0:  CLRF   xC7
0EDF2:  CLRF   xC8
0EDF4:  CLRF   xC9
0EDF6:  CLRF   xCA
0EDF8:  CLRF   xCB
0EDFA:  CLRF   xCC
0EDFC:  CLRF   xCD
0EDFE:  CLRF   xCE
0EE00:  CLRF   xCF
0EE02:  CLRF   xD0
0EE04:  CLRF   xD1
....................     port1.port_num = 1;
0EE06:  MOVLW  01
0EE08:  MOVLB  1
0EE0A:  MOVWF  xCE
....................     port1.sweep_step = 0;
0EE0C:  CLRF   xD0
0EE0E:  CLRF   xCF
....................     port1.active = 1;
0EE10:  MOVLB  3
0EE12:  BSF    xD1.0
.................... 
....................     int16 count = 0;
0EE14:  CLRF   xD3
0EE16:  CLRF   xD2
....................     
....................     // Initialize DACs to 0
....................     mcp4901_1_write(1);
0EE18:  MOVLB  9
0EE1A:  CLRF   xDD
0EE1C:  MOVLW  01
0EE1E:  MOVWF  xDC
0EE20:  MOVLB  0
0EE22:  CALL   2872
....................     unsigned int16 volt;
....................     unsigned int16 curr;
....................     iv_env_t measured_data = create_meas_data();
0EE26:  CALL   91E8
0EE2A:  MOVFF  02,03
0EE2E:  MOVF   01,W
0EE30:  MOVWF  FE1
0EE32:  MOVFF  03,FE2
0EE36:  MOVLW  03
0EE38:  MOVWF  FEA
0EE3A:  MOVLW  D8
0EE3C:  MOVWF  FE9
0EE3E:  MOVLW  0C
0EE40:  MOVWF  01
0EE42:  MOVFF  FE6,FEE
0EE46:  DECFSZ 01,F
0EE48:  GOTO   EE42
....................     while (port1.active)
0EE4C:  MOVLB  3
0EE4E:  BTFSC  xD1.0
0EE50:  BRA    EE58
0EE52:  MOVLB  0
0EE54:  GOTO   F014
0EE58:  MOVLB  0
....................     {
....................         mcp4901_1_write(count);
0EE5A:  MOVFF  3D3,9DD
0EE5E:  MOVFF  3D2,9DC
0EE62:  CALL   2872
....................         // mcp4901_2_write(count);
....................         delay_us(1); 
0EE66:  BRA    EE68
0EE68:  BRA    EE6A
....................         if (port1.active) {
0EE6A:  MOVLB  3
0EE6C:  BTFSC  xD1.0
0EE6E:  BRA    EE76
0EE70:  MOVLB  0
0EE72:  GOTO   EFE4
0EE76:  MOVLB  0
....................             volt = ad7490_read(ADC_CIGS1_AMP);
0EE78:  MOVLW  02
0EE7A:  MOVLB  9
0EE7C:  MOVWF  xEE
0EE7E:  MOVLB  0
0EE80:  CALL   24C2
0EE84:  MOVFF  02,3D5
0EE88:  MOVFF  01,3D4
....................             curr = ad7490_read(ADC_CIGS1_CURR);
0EE8C:  MOVLW  01
0EE8E:  MOVLB  9
0EE90:  MOVWF  xEE
0EE92:  MOVLB  0
0EE94:  CALL   24C2
0EE98:  MOVFF  02,3D7
0EE9C:  MOVFF  01,3D6
....................             // ad7490_read_2port(ADC_CIGS1_AMP, ADC_CIGS1_CURR, &volt, &curr);
....................             // fprintf(PC, "%04LX,%04LX,", volt, curr);
....................             port1.data_buffer[count*3]= (volt  >> 4) & 0xFF;
0EEA0:  MOVFF  3D3,A52
0EEA4:  MOVFF  3D2,A51
0EEA8:  MOVLB  A
0EEAA:  CLRF   x54
0EEAC:  MOVLW  03
0EEAE:  MOVWF  x53
0EEB0:  MOVLB  0
0EEB2:  CALL   823E
0EEB6:  MOVFF  02,3E5
0EEBA:  MOVFF  01,3E4
0EEBE:  MOVLW  D1
0EEC0:  MOVLB  3
0EEC2:  ADDWF  xE4,W
0EEC4:  MOVWF  FE9
0EEC6:  MOVLW  01
0EEC8:  ADDWFC xE5,W
0EECA:  MOVWF  FEA
0EECC:  RRCF   xD5,W
0EECE:  MOVWF  xE9
0EED0:  RRCF   xD4,W
0EED2:  MOVWF  xE8
0EED4:  RRCF   xE9,F
0EED6:  RRCF   xE8,F
0EED8:  RRCF   xE9,F
0EEDA:  RRCF   xE8,F
0EEDC:  RRCF   xE9,F
0EEDE:  RRCF   xE8,F
0EEE0:  MOVLW  0F
0EEE2:  ANDWF  xE9,F
0EEE4:  MOVF   xE8,W
0EEE6:  MOVWF  00
0EEE8:  CLRF   03
0EEEA:  MOVF   00,W
0EEEC:  MOVWF  FEF
....................             port1.data_buffer[count*3+1]= ((volt & 0x0F) << 4) | ((curr >> 8) & 0x0F);
0EEEE:  MOVFF  3D3,A52
0EEF2:  MOVFF  3D2,A51
0EEF6:  MOVLB  A
0EEF8:  CLRF   x54
0EEFA:  MOVLW  03
0EEFC:  MOVWF  x53
0EEFE:  MOVLB  0
0EF00:  CALL   823E
0EF04:  MOVFF  02,3E5
0EF08:  MOVFF  01,3E4
0EF0C:  MOVLW  01
0EF0E:  MOVLB  3
0EF10:  ADDWF  xE4,F
0EF12:  MOVLW  00
0EF14:  ADDWFC xE5,F
0EF16:  MOVLW  D1
0EF18:  ADDWF  xE4,W
0EF1A:  MOVWF  FE9
0EF1C:  MOVLW  01
0EF1E:  ADDWFC xE5,W
0EF20:  MOVWF  FEA
0EF22:  MOVF   xD4,W
0EF24:  ANDLW  0F
0EF26:  MOVWF  xE8
0EF28:  CLRF   xE9
0EF2A:  RLCF   xE8,F
0EF2C:  RLCF   xE9,F
0EF2E:  RLCF   xE8,F
0EF30:  RLCF   xE9,F
0EF32:  RLCF   xE8,F
0EF34:  RLCF   xE9,F
0EF36:  RLCF   xE8,F
0EF38:  RLCF   xE9,F
0EF3A:  MOVLW  F0
0EF3C:  ANDWF  xE8,F
0EF3E:  MOVFF  3D7,3EA
0EF42:  CLRF   xEB
0EF44:  MOVF   xEA,W
0EF46:  ANDLW  0F
0EF48:  MOVWF  00
0EF4A:  CLRF   03
0EF4C:  MOVF   00,W
0EF4E:  IORWF  xE8,W
0EF50:  MOVWF  00
0EF52:  MOVF   03,W
0EF54:  IORWF  xE9,W
0EF56:  MOVWF  03
0EF58:  MOVF   00,W
0EF5A:  MOVWF  FEF
....................             port1.data_buffer[count*3+2]= curr & 0xFF;
0EF5C:  MOVFF  3D3,A52
0EF60:  MOVFF  3D2,A51
0EF64:  MOVLB  A
0EF66:  CLRF   x54
0EF68:  MOVLW  03
0EF6A:  MOVWF  x53
0EF6C:  MOVLB  0
0EF6E:  CALL   823E
0EF72:  MOVFF  02,3E5
0EF76:  MOVFF  01,3E4
0EF7A:  MOVLW  02
0EF7C:  MOVLB  3
0EF7E:  ADDWF  xE4,F
0EF80:  MOVLW  00
0EF82:  ADDWFC xE5,F
0EF84:  MOVLW  D1
0EF86:  ADDWF  xE4,W
0EF88:  MOVWF  FE9
0EF8A:  MOVLW  01
0EF8C:  ADDWFC xE5,W
0EF8E:  MOVWF  FEA
0EF90:  MOVF   xD6,W
0EF92:  MOVWF  00
0EF94:  CLRF   03
0EF96:  MOVF   00,W
0EF98:  MOVWF  FEF
....................             port1.sweep_step = count + 1; 
0EF9A:  MOVLW  01
0EF9C:  ADDWF  xD2,W
0EF9E:  MOVLB  1
0EFA0:  MOVWF  xCF
0EFA2:  MOVLW  00
0EFA4:  MOVLB  3
0EFA6:  ADDWFC xD3,W
0EFA8:  MOVLB  1
0EFAA:  MOVWF  xD0
....................             // fprintf(PC, "%04LX,%04LX,", port1.data_buffer[count].voltage, port1.data_buffer[count].current);
....................             if (curr< curr_limit) {
0EFAC:  MOVLB  3
0EFAE:  MOVF   xD7,W
0EFB0:  MOVLB  1
0EFB2:  SUBWF  xC9,W
0EFB4:  BTFSC  FD8.0
0EFB6:  BRA    EFBE
0EFB8:  MOVLB  0
0EFBA:  GOTO   EFE4
0EFBE:  MOVLB  0
0EFC0:  BTFSS  FD8.2
0EFC2:  GOTO   EFDA
0EFC6:  MOVLB  1
0EFC8:  MOVF   xC8,W
0EFCA:  MOVLB  3
0EFCC:  SUBWF  xD6,W
0EFCE:  BTFSS  FD8.0
0EFD0:  BRA    EFD8
0EFD2:  MOVLB  0
0EFD4:  GOTO   EFE4
0EFD8:  MOVLB  0
....................                 port1.active = 0;
0EFDA:  MOVLB  3
0EFDC:  BCF    xD1.0
....................                 disconnect_port1();
0EFDE:  MOVLB  0
0EFE0:  CALL   926A
....................             }
....................         }
....................         count++;
0EFE4:  MOVLB  3
0EFE6:  INCF   xD2,F
0EFE8:  BTFSC  FD8.2
0EFEA:  INCF   xD3,F
....................         if (count >= 255) {
0EFEC:  MOVF   xD3,F
0EFEE:  BTFSC  FD8.2
0EFF0:  BRA    EFF8
0EFF2:  MOVLB  0
0EFF4:  GOTO   F00C
0EFF8:  MOVLB  0
0EFFA:  MOVLB  3
0EFFC:  MOVF   xD2,W
0EFFE:  SUBLW  FE
0F000:  BTFSS  FD8.0
0F002:  BRA    F00A
0F004:  MOVLB  0
0F006:  GOTO   F010
0F00A:  MOVLB  0
....................             // fprintf(PC, "Maximum step count reached: %ld\r\n", count);
....................             break;
0F00C:  GOTO   F014
....................         }
0F010:  GOTO   EE4C
....................     }
....................     // unsigned int32 end_time_ms = get_current_msec();
....................     // Ensure all connections are disabled3
....................     disconnect_port1();
0F014:  CALL   926A
....................     log_meas_data(&measured_data, &port1);
0F018:  MOVLW  03
0F01A:  MOVLB  9
0F01C:  MOVWF  xC3
0F01E:  MOVLW  D8
0F020:  MOVWF  xC2
0F022:  MOVLW  01
0F024:  MOVWF  xC5
0F026:  MOVLW  CE
0F028:  MOVWF  xC4
0F02A:  MOVLB  0
0F02C:  CALL   927A
0F030:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... 
.................... void log_meas_data(iv_env_t *measured_data_ptr, sweep_config_t *port_data_ptr)
*
092FE:  MOVLW  09
09300:  MOVWF  x07
09302:  MOVLW  C6
09304:  MOVWF  x06
.................... {
....................     iv_data_packet_t data_packet = {0};
*
0927A:  MOVLB  9
0927C:  CLRF   xC6
0927E:  CLRF   xC7
09280:  CLRF   xC8
09282:  CLRF   xC9
09284:  CLRF   xCA
09286:  CLRF   xCB
09288:  CLRF   xCC
0928A:  CLRF   xCD
0928C:  CLRF   xCE
0928E:  CLRF   xCF
09290:  CLRF   xD0
09292:  CLRF   xD1
09294:  CLRF   xD2
09296:  CLRF   xD3
09298:  CLRF   xD4
0929A:  CLRF   xD5
0929C:  CLRF   xD6
0929E:  CLRF   xD7
092A0:  CLRF   xD8
092A2:  CLRF   xD9
092A4:  CLRF   xDA
092A6:  CLRF   xDB
092A8:  CLRF   xDC
092AA:  CLRF   xDD
092AC:  CLRF   xDE
092AE:  CLRF   xDF
092B0:  CLRF   xE0
092B2:  CLRF   xE1
092B4:  CLRF   xE2
092B6:  CLRF   xE3
092B8:  CLRF   xE4
092BA:  CLRF   xE5
092BC:  CLRF   xE6
092BE:  CLRF   xE7
092C0:  CLRF   xE8
092C2:  CLRF   xE9
092C4:  CLRF   xEA
092C6:  CLRF   xEB
092C8:  CLRF   xEC
092CA:  CLRF   xED
092CC:  CLRF   xEE
092CE:  CLRF   xEF
092D0:  CLRF   xF0
092D2:  CLRF   xF1
092D4:  CLRF   xF2
092D6:  CLRF   xF3
092D8:  CLRF   xF4
092DA:  CLRF   xF5
092DC:  CLRF   xF6
092DE:  CLRF   xF7
092E0:  CLRF   xF8
092E2:  CLRF   xF9
092E4:  CLRF   xFA
092E6:  CLRF   xFB
092E8:  CLRF   xFC
092EA:  CLRF   xFD
092EC:  CLRF   xFE
092EE:  CLRF   xFF
092F0:  MOVLB  A
092F2:  CLRF   x00
092F4:  CLRF   x01
092F6:  CLRF   x02
092F8:  CLRF   x03
092FA:  CLRF   x04
092FC:  CLRF   x05
....................     iv_data_packet_t *data_packet_ptr = &data_packet;
.................... 
....................     // ========================ヘッダーパケットの処理========================
....................     // ヘッダ情報の設定
....................     data_packet.header.start_marker = START_MAKER;
*
09306:  MOVLB  9
09308:  SETF   xC6
....................     data_packet.header.time_sec  = measured_data_ptr->time;
0930A:  MOVF   xC2,W
0930C:  MOVWF  FE9
0930E:  MOVF   xC3,W
09310:  MOVWF  FEA
09312:  MOVFF  FEF,9C7
09316:  MOVFF  FEC,9C8
0931A:  MOVFF  FEC,9C9
0931E:  MOVFF  FEC,9CA
09322:  MOVF   FED,F
09324:  MOVF   FED,F
09326:  MOVF   FED,F
....................     data_packet.header.time_msec = (unsigned int8)((measured_data_ptr->time >> 4) & 0xFF);
09328:  MOVF   xC2,W
0932A:  MOVWF  FE9
0932C:  MOVF   xC3,W
0932E:  MOVWF  FEA
09330:  MOVFF  FEF,A4D
09334:  MOVFF  FEC,A4E
09338:  MOVFF  FEC,A4F
0933C:  MOVFF  FEC,A50
09340:  MOVF   FED,F
09342:  MOVF   FED,F
09344:  MOVF   FED,F
09346:  MOVLB  A
09348:  RRCF   x50,F
0934A:  RRCF   x4F,F
0934C:  RRCF   x4E,F
0934E:  RRCF   x4D,F
09350:  RRCF   x50,F
09352:  RRCF   x4F,F
09354:  RRCF   x4E,F
09356:  RRCF   x4D,F
09358:  RRCF   x50,F
0935A:  RRCF   x4F,F
0935C:  RRCF   x4E,F
0935E:  RRCF   x4D,F
09360:  RRCF   x50,F
09362:  RRCF   x4F,F
09364:  RRCF   x4E,F
09366:  RRCF   x4D,F
09368:  MOVLW  0F
0936A:  ANDWF  x50,F
0936C:  MOVF   x4D,W
0936E:  MOVWF  00
09370:  CLRF   01
09372:  CLRF   02
09374:  CLRF   03
09376:  MOVFF  00,9CB
.................... 
....................     // 環境データの設定
....................     data_packet.header.env_data[0].data[0] = (measured_data_ptr->pd >> 4) & 0xFF;
0937A:  MOVLW  04
0937C:  MOVLB  9
0937E:  ADDWF  xC2,W
09380:  MOVWF  FE9
09382:  MOVLW  00
09384:  ADDWFC xC3,W
09386:  MOVWF  FEA
09388:  MOVFF  FEC,A4E
0938C:  MOVF   FED,F
0938E:  MOVFF  FEF,A4D
09392:  MOVLB  A
09394:  RRCF   x4E,F
09396:  RRCF   x4D,F
09398:  RRCF   x4E,F
0939A:  RRCF   x4D,F
0939C:  RRCF   x4E,F
0939E:  RRCF   x4D,F
093A0:  RRCF   x4E,F
093A2:  RRCF   x4D,F
093A4:  MOVLW  0F
093A6:  ANDWF  x4E,F
093A8:  MOVF   x4D,W
093AA:  MOVLB  9
093AC:  MOVWF  xCC
....................     data_packet.header.env_data[0].data[1] =
....................         ((measured_data_ptr->pd & 0x0F) << 4) |
....................         ((measured_data_ptr->temp_py_top >> 8) & 0x0F);
093AE:  MOVLW  04
093B0:  ADDWF  xC2,W
093B2:  MOVWF  FE9
093B4:  MOVLW  00
093B6:  ADDWFC xC3,W
093B8:  MOVWF  FEA
093BA:  MOVFF  FEC,A4E
093BE:  MOVF   FED,F
093C0:  MOVFF  FEF,A4D
093C4:  MOVLW  0F
093C6:  MOVLB  A
093C8:  ANDWF  x4D,F
093CA:  CLRF   x4E
093CC:  RLCF   x4D,F
093CE:  RLCF   x4E,F
093D0:  RLCF   x4D,F
093D2:  RLCF   x4E,F
093D4:  RLCF   x4D,F
093D6:  RLCF   x4E,F
093D8:  RLCF   x4D,F
093DA:  RLCF   x4E,F
093DC:  MOVLW  F0
093DE:  ANDWF  x4D,F
093E0:  MOVLW  06
093E2:  MOVLB  9
093E4:  ADDWF  xC2,W
093E6:  MOVWF  FE9
093E8:  MOVLW  00
093EA:  ADDWFC xC3,W
093EC:  MOVWF  FEA
093EE:  MOVFF  FEC,A50
093F2:  MOVF   FED,F
093F4:  MOVFF  FEF,A4F
093F8:  MOVFF  A50,A4F
093FC:  MOVLB  A
093FE:  CLRF   x50
09400:  MOVF   x4F,W
09402:  ANDLW  0F
09404:  MOVWF  00
09406:  CLRF   03
09408:  MOVF   00,W
0940A:  IORWF  x4D,W
0940C:  MOVLB  9
0940E:  MOVWF  xCD
....................     data_packet.header.env_data[0].data[2] = measured_data_ptr->temp_py_top & 0xFF;
09410:  MOVLW  06
09412:  ADDWF  xC2,W
09414:  MOVWF  FE9
09416:  MOVLW  00
09418:  ADDWFC xC3,W
0941A:  MOVWF  FEA
0941C:  MOVFF  FEC,A4E
09420:  MOVF   FED,F
09422:  MOVFF  FEF,A4D
09426:  MOVLB  A
09428:  MOVF   x4D,W
0942A:  MOVLB  9
0942C:  MOVWF  xCE
.................... 
....................     data_packet.header.env_data[1].data[0] = (measured_data_ptr->temp_py_bot >> 4) & 0xFF;
0942E:  MOVLW  08
09430:  ADDWF  xC2,W
09432:  MOVWF  FE9
09434:  MOVLW  00
09436:  ADDWFC xC3,W
09438:  MOVWF  FEA
0943A:  MOVFF  FEC,A4E
0943E:  MOVF   FED,F
09440:  MOVFF  FEF,A4D
09444:  MOVLB  A
09446:  RRCF   x4E,F
09448:  RRCF   x4D,F
0944A:  RRCF   x4E,F
0944C:  RRCF   x4D,F
0944E:  RRCF   x4E,F
09450:  RRCF   x4D,F
09452:  RRCF   x4E,F
09454:  RRCF   x4D,F
09456:  MOVLW  0F
09458:  ANDWF  x4E,F
0945A:  MOVF   x4D,W
0945C:  MOVLB  9
0945E:  MOVWF  xCF
....................     data_packet.header.env_data[1].data[1] =
....................         ((measured_data_ptr->temp_py_bot & 0x0F) << 4) |
....................         ((measured_data_ptr->temp_mis7 >> 8) & 0x0F);
09460:  MOVLW  08
09462:  ADDWF  xC2,W
09464:  MOVWF  FE9
09466:  MOVLW  00
09468:  ADDWFC xC3,W
0946A:  MOVWF  FEA
0946C:  MOVFF  FEC,A4E
09470:  MOVF   FED,F
09472:  MOVFF  FEF,A4D
09476:  MOVLW  0F
09478:  MOVLB  A
0947A:  ANDWF  x4D,F
0947C:  CLRF   x4E
0947E:  RLCF   x4D,F
09480:  RLCF   x4E,F
09482:  RLCF   x4D,F
09484:  RLCF   x4E,F
09486:  RLCF   x4D,F
09488:  RLCF   x4E,F
0948A:  RLCF   x4D,F
0948C:  RLCF   x4E,F
0948E:  MOVLW  F0
09490:  ANDWF  x4D,F
09492:  MOVLW  0A
09494:  MOVLB  9
09496:  ADDWF  xC2,W
09498:  MOVWF  FE9
0949A:  MOVLW  00
0949C:  ADDWFC xC3,W
0949E:  MOVWF  FEA
094A0:  MOVFF  FEC,A50
094A4:  MOVF   FED,F
094A6:  MOVFF  FEF,A4F
094AA:  MOVFF  A50,A4F
094AE:  MOVLB  A
094B0:  CLRF   x50
094B2:  MOVF   x4F,W
094B4:  ANDLW  0F
094B6:  MOVWF  00
094B8:  CLRF   03
094BA:  MOVF   00,W
094BC:  IORWF  x4D,W
094BE:  MOVLB  9
094C0:  MOVWF  xD0
....................     data_packet.header.env_data[1].data[2] = measured_data_ptr->temp_mis7 & 0xFF;
094C2:  MOVLW  0A
094C4:  ADDWF  xC2,W
094C6:  MOVWF  FE9
094C8:  MOVLW  00
094CA:  ADDWFC xC3,W
094CC:  MOVWF  FEA
094CE:  MOVFF  FEC,A4E
094D2:  MOVF   FED,F
094D4:  MOVFF  FEF,A4D
094D8:  MOVLB  A
094DA:  MOVF   x4D,W
094DC:  MOVLB  9
094DE:  MOVWF  xD1
.................... 
....................     // I-Vデータの設定
....................     for (unsigned int8 i = 0; i < IV_HEADER_SIZE; i++) {
094E0:  MOVLB  A
094E2:  CLRF   x08
094E4:  MOVLB  0
094E6:  MOVLB  A
094E8:  MOVF   x08,W
094EA:  SUBLW  10
094EC:  BTFSC  FD8.0
094EE:  BRA    94F6
094F0:  MOVLB  0
094F2:  GOTO   9648
094F6:  MOVLB  0
....................         if (i < port_data_ptr->sweep_step) {
094F8:  MOVLW  01
094FA:  MOVLB  9
094FC:  ADDWF  xC4,W
094FE:  MOVWF  FE9
09500:  MOVLW  00
09502:  ADDWFC xC5,W
09504:  MOVWF  FEA
09506:  MOVFF  FEC,03
0950A:  MOVF   FED,F
0950C:  MOVF   FEF,W
0950E:  MOVWF  01
09510:  MOVF   03,F
09512:  BTFSC  FD8.2
09514:  BRA    951C
09516:  MOVLB  0
09518:  GOTO   9530
0951C:  MOVLB  0
0951E:  MOVF   01,W
09520:  MOVLB  A
09522:  SUBWF  x08,W
09524:  BTFSS  FD8.0
09526:  BRA    952E
09528:  MOVLB  0
0952A:  GOTO   95FA
0952E:  MOVLB  0
....................             data_packet.header.ivdata[i*3]     = port_data_ptr->data_buffer[i*3];
09530:  MOVLB  A
09532:  MOVF   x08,W
09534:  MULLW  03
09536:  MOVF   FF3,W
09538:  CLRF   03
0953A:  ADDLW  D2
0953C:  MOVWF  01
0953E:  MOVLW  09
09540:  ADDWFC 03,F
09542:  MOVF   01,W
09544:  MOVWF  x4D
09546:  MOVFF  03,A4E
0954A:  MOVF   x08,W
0954C:  MULLW  03
0954E:  MOVF   FF3,W
09550:  ADDLW  03
09552:  MOVLB  9
09554:  ADDWF  xC4,W
09556:  MOVWF  FE9
09558:  MOVLW  00
0955A:  ADDWFC xC5,W
0955C:  MOVWF  FEA
0955E:  MOVF   FEF,W
09560:  MOVLB  A
09562:  MOVWF  x4F
09564:  MOVFF  A4E,FEA
09568:  MOVFF  A4D,FE9
0956C:  MOVFF  A4F,FEF
....................             data_packet.header.ivdata[i*3 + 1] = port_data_ptr->data_buffer[i*3 + 1];
09570:  MOVF   x08,W
09572:  MULLW  03
09574:  MOVF   FF3,W
09576:  ADDLW  01
09578:  CLRF   03
0957A:  ADDLW  D2
0957C:  MOVWF  01
0957E:  MOVLW  09
09580:  ADDWFC 03,F
09582:  MOVF   01,W
09584:  MOVWF  x4D
09586:  MOVFF  03,A4E
0958A:  MOVF   x08,W
0958C:  MULLW  03
0958E:  MOVF   FF3,W
09590:  ADDLW  01
09592:  ADDLW  03
09594:  MOVLB  9
09596:  ADDWF  xC4,W
09598:  MOVWF  FE9
0959A:  MOVLW  00
0959C:  ADDWFC xC5,W
0959E:  MOVWF  FEA
095A0:  MOVF   FEF,W
095A2:  MOVLB  A
095A4:  MOVWF  x4F
095A6:  MOVFF  A4E,FEA
095AA:  MOVFF  A4D,FE9
095AE:  MOVFF  A4F,FEF
....................             data_packet.header.ivdata[i*3 + 2] = port_data_ptr->data_buffer[i*3 + 2];
095B2:  MOVF   x08,W
095B4:  MULLW  03
095B6:  MOVF   FF3,W
095B8:  ADDLW  02
095BA:  CLRF   03
095BC:  ADDLW  D2
095BE:  MOVWF  01
095C0:  MOVLW  09
095C2:  ADDWFC 03,F
095C4:  MOVF   01,W
095C6:  MOVWF  x4D
095C8:  MOVFF  03,A4E
095CC:  MOVF   x08,W
095CE:  MULLW  03
095D0:  MOVF   FF3,W
095D2:  ADDLW  02
095D4:  ADDLW  03
095D6:  MOVLB  9
095D8:  ADDWF  xC4,W
095DA:  MOVWF  FE9
095DC:  MOVLW  00
095DE:  ADDWFC xC5,W
095E0:  MOVWF  FEA
095E2:  MOVF   FEF,W
095E4:  MOVLB  A
095E6:  MOVWF  x4F
095E8:  MOVFF  A4E,FEA
095EC:  MOVFF  A4D,FE9
095F0:  MOVFF  A4F,FEF
095F4:  MOVLB  0
....................         } else {
095F6:  GOTO   963E
....................             // 余りは0埋め
....................             data_packet.header.ivdata[i*3]     = 0;
095FA:  MOVLB  A
095FC:  MOVF   x08,W
095FE:  MULLW  03
09600:  MOVF   FF3,W
09602:  CLRF   03
09604:  ADDLW  D2
09606:  MOVWF  FE9
09608:  MOVLW  09
0960A:  ADDWFC 03,W
0960C:  MOVWF  FEA
0960E:  CLRF   FEF
....................             data_packet.header.ivdata[i*3 + 1] = 0;
09610:  MOVF   x08,W
09612:  MULLW  03
09614:  MOVF   FF3,W
09616:  ADDLW  01
09618:  CLRF   03
0961A:  ADDLW  D2
0961C:  MOVWF  FE9
0961E:  MOVLW  09
09620:  ADDWFC 03,W
09622:  MOVWF  FEA
09624:  CLRF   FEF
....................             data_packet.header.ivdata[i*3 + 2] = 0;
09626:  MOVF   x08,W
09628:  MULLW  03
0962A:  MOVF   FF3,W
0962C:  ADDLW  02
0962E:  CLRF   03
09630:  ADDLW  D2
09632:  MOVWF  FE9
09634:  MOVLW  09
09636:  ADDWFC 03,W
09638:  MOVWF  FEA
0963A:  CLRF   FEF
0963C:  MOVLB  0
....................         }
0963E:  MOVLB  A
09640:  INCF   x08,F
09642:  MOVLB  0
09644:  GOTO   94E6
....................     }
....................     // フラッシュに書き込み
....................     if (port_data_ptr->port_num == 1) {
09648:  MOVLB  9
0964A:  MOVF   xC4,W
0964C:  MOVWF  FE9
0964E:  MOVF   xC5,W
09650:  MOVWF  FEA
09652:  DECFSZ FEF,W
09654:  BRA    965A
09656:  BRA    9660
09658:  MOVLB  0
0965A:  MOVLB  0
0965C:  GOTO   96B8
09660:  MOVLB  0
....................         data_packet.header.crc = calc_crc8(data_packet_ptr->raw, PACKET_SIZE - 1);
09662:  MOVLB  A
09664:  MOVF   x06,W
09666:  MOVWF  01
09668:  MOVF   x07,W
0966A:  MOVWF  03
0966C:  MOVF   01,W
0966E:  MOVWF  x4D
09670:  MOVFF  03,A4E
09674:  MOVFF  A4E,AEB
09678:  MOVFF  A4D,AEA
0967C:  MOVLW  3F
0967E:  MOVWF  xEC
09680:  MOVLB  0
09682:  CALL   30EA
09686:  MOVFF  01,A05
....................         misf_write_data(FLASH_ID_IV1_DATA, data_packet_ptr->raw, PACKET_SIZE);
0968A:  MOVLB  A
0968C:  MOVF   x06,W
0968E:  MOVWF  01
09690:  MOVF   x07,W
09692:  MOVWF  03
09694:  MOVF   01,W
09696:  MOVWF  x4D
09698:  MOVFF  03,A4E
0969C:  MOVLW  04
0969E:  MOVWF  x4F
096A0:  MOVFF  A4E,A51
096A4:  MOVFF  A4D,A50
096A8:  CLRF   x53
096AA:  MOVLW  40
096AC:  MOVWF  x52
096AE:  MOVLB  0
096B0:  CALL   428C
....................         // for (int i = 0; i < PACKET_SIZE; i++) {
....................             // fprintf(PC, "%02X ", data_packet_ptr->raw[i]);
....................         // }
....................         unsigned int8 read_back[PACKET_SIZE];
....................         // read_data_bytes(mis_fm, MISF_ADDRESS_TABLE[FLASH_ID_IV1_DATA].start, read_back, PACKET_SIZE);
....................         // for (int j = 0; j < PACKET_SIZE; j++) {
....................             // fprintf(PC, "%02X ", read_back[j]);
....................         // }
....................     } else if (port_data_ptr->port_num == 2) {
096B4:  GOTO   9724
096B8:  MOVLB  9
096BA:  MOVF   xC4,W
096BC:  MOVWF  FE9
096BE:  MOVF   xC5,W
096C0:  MOVWF  FEA
096C2:  MOVF   FEF,W
096C4:  SUBLW  02
096C6:  BTFSC  FD8.2
096C8:  BRA    96D0
096CA:  MOVLB  0
096CC:  GOTO   9724
096D0:  MOVLB  0
....................         data_packet.header.crc = calc_crc8(data_packet_ptr->raw, PACKET_SIZE - 1);
096D2:  MOVLB  A
096D4:  MOVF   x06,W
096D6:  MOVWF  01
096D8:  MOVF   x07,W
096DA:  MOVWF  03
096DC:  MOVF   01,W
096DE:  MOVWF  x4D
096E0:  MOVFF  03,A4E
096E4:  MOVFF  A4E,AEB
096E8:  MOVFF  A4D,AEA
096EC:  MOVLW  3F
096EE:  MOVWF  xEC
096F0:  MOVLB  0
096F2:  CALL   30EA
096F6:  MOVFF  01,A05
....................         misf_write_data(FLASH_ID_IV2_DATA, data_packet_ptr->raw, PACKET_SIZE);
096FA:  MOVLB  A
096FC:  MOVF   x06,W
096FE:  MOVWF  01
09700:  MOVF   x07,W
09702:  MOVWF  03
09704:  MOVF   01,W
09706:  MOVWF  x4D
09708:  MOVFF  03,A4E
0970C:  MOVLW  06
0970E:  MOVWF  x4F
09710:  MOVFF  A4E,A51
09714:  MOVFF  A4D,A50
09718:  CLRF   x53
0971A:  MOVLW  40
0971C:  MOVWF  x52
0971E:  MOVLB  0
09720:  CALL   428C
....................     }
.................... 
....................     // ========================データパケットの処理========================
....................     unsigned int16 iv_index = IV_HEADER_SIZE;
09724:  MOVLB  A
09726:  CLRF   x4A
09728:  MOVLW  11
0972A:  MOVWF  x49
0972C:  MOVLB  0
....................     // パケットごとに繰り返す
....................     while (iv_index < port_data_ptr->sweep_step) {
0972E:  MOVLW  01
09730:  MOVLB  9
09732:  ADDWF  xC4,W
09734:  MOVWF  FE9
09736:  MOVLW  00
09738:  ADDWFC xC5,W
0973A:  MOVWF  FEA
0973C:  MOVFF  FEC,03
09740:  MOVF   FED,F
09742:  MOVF   FEF,W
09744:  MOVWF  01
09746:  MOVLB  A
09748:  MOVF   x4A,W
0974A:  SUBWF  03,W
0974C:  BTFSC  FD8.0
0974E:  BRA    9756
09750:  MOVLB  0
09752:  GOTO   9B36
09756:  MOVLB  0
09758:  BTFSS  FD8.2
0975A:  GOTO   9770
0975E:  MOVF   01,W
09760:  MOVLB  A
09762:  SUBWF  x49,W
09764:  BTFSS  FD8.0
09766:  BRA    976E
09768:  MOVLB  0
0976A:  GOTO   9B36
0976E:  MOVLB  0
....................         unsigned int16 step_in_packet = 0;
09770:  MOVLB  A
09772:  CLRF   x4C
09774:  CLRF   x4B
09776:  MOVLB  0
.................... 
....................         // データを詰める（最大21点/パケット）
....................         for (; step_in_packet < IV_DATA_SIZE && iv_index < port_data_ptr->sweep_step;
09778:  MOVLB  A
0977A:  MOVF   x4C,F
0977C:  BTFSC  FD8.2
0977E:  BRA    9786
09780:  MOVLB  0
09782:  GOTO   998E
09786:  MOVLB  0
09788:  MOVLB  A
0978A:  MOVF   x4B,W
0978C:  SUBLW  14
0978E:  BTFSC  FD8.0
09790:  BRA    9798
09792:  MOVLB  0
09794:  GOTO   998E
09798:  MOVLB  0
0979A:  MOVLW  01
0979C:  MOVLB  9
0979E:  ADDWF  xC4,W
097A0:  MOVWF  FE9
097A2:  MOVLW  00
097A4:  ADDWFC xC5,W
097A6:  MOVWF  FEA
097A8:  MOVFF  FEC,03
097AC:  MOVF   FED,F
097AE:  MOVF   FEF,W
097B0:  MOVWF  01
097B2:  MOVLB  A
097B4:  MOVF   x4A,W
097B6:  SUBWF  03,W
097B8:  BTFSC  FD8.0
097BA:  BRA    97C2
097BC:  MOVLB  0
097BE:  GOTO   998E
097C2:  MOVLB  0
097C4:  BTFSS  FD8.2
097C6:  GOTO   97DC
097CA:  MOVF   01,W
097CC:  MOVLB  A
097CE:  SUBWF  x49,W
097D0:  BTFSS  FD8.0
097D2:  BRA    97DA
097D4:  MOVLB  0
097D6:  GOTO   998E
097DA:  MOVLB  0
....................              step_in_packet++, iv_index++) {
....................             data_packet.data.iv_data[step_in_packet*3] = port_data_ptr->data_buffer[iv_index*3];
097DC:  MOVFF  A4C,A52
097E0:  MOVFF  A4B,A51
097E4:  MOVLB  A
097E6:  CLRF   x54
097E8:  MOVLW  03
097EA:  MOVWF  x53
097EC:  MOVLB  0
097EE:  CALL   823E
097F2:  MOVFF  02,A4E
097F6:  MOVFF  01,A4D
097FA:  MOVLW  C6
097FC:  MOVLB  A
097FE:  ADDWF  x4D,W
09800:  MOVWF  01
09802:  MOVLW  09
09804:  ADDWFC x4E,W
09806:  MOVWF  03
09808:  MOVF   01,W
0980A:  MOVWF  x4F
0980C:  MOVFF  03,A50
09810:  MOVFF  A4A,A52
09814:  MOVFF  A49,A51
09818:  CLRF   x54
0981A:  MOVLW  03
0981C:  MOVWF  x53
0981E:  MOVLB  0
09820:  CALL   823E
09824:  MOVFF  02,A52
09828:  MOVFF  01,A51
0982C:  MOVLW  03
0982E:  MOVLB  A
09830:  ADDWF  x51,W
09832:  MOVWF  01
09834:  MOVLW  00
09836:  ADDWFC x52,W
09838:  MOVWF  03
0983A:  MOVF   01,W
0983C:  MOVLB  9
0983E:  ADDWF  xC4,W
09840:  MOVWF  FE9
09842:  MOVF   xC5,W
09844:  ADDWFC 03,W
09846:  MOVWF  FEA
09848:  MOVF   FEF,W
0984A:  MOVLB  A
0984C:  MOVWF  x53
0984E:  MOVFF  A50,FEA
09852:  MOVFF  A4F,FE9
09856:  MOVFF  A53,FEF
....................             data_packet.data.iv_data[step_in_packet*3+1] = port_data_ptr->data_buffer[iv_index*3+1];
0985A:  MOVFF  A4C,A52
0985E:  MOVFF  A4B,A51
09862:  CLRF   x54
09864:  MOVLW  03
09866:  MOVWF  x53
09868:  MOVLB  0
0986A:  CALL   823E
0986E:  MOVFF  02,A4E
09872:  MOVFF  01,A4D
09876:  MOVLW  01
09878:  MOVLB  A
0987A:  ADDWF  x4D,F
0987C:  MOVLW  00
0987E:  ADDWFC x4E,F
09880:  MOVLW  C6
09882:  ADDWF  x4D,W
09884:  MOVWF  01
09886:  MOVLW  09
09888:  ADDWFC x4E,W
0988A:  MOVWF  03
0988C:  MOVF   01,W
0988E:  MOVWF  x4F
09890:  MOVFF  03,A50
09894:  MOVFF  A4A,A52
09898:  MOVFF  A49,A51
0989C:  CLRF   x54
0989E:  MOVLW  03
098A0:  MOVWF  x53
098A2:  MOVLB  0
098A4:  CALL   823E
098A8:  MOVFF  02,A52
098AC:  MOVFF  01,A51
098B0:  MOVLW  01
098B2:  MOVLB  A
098B4:  ADDWF  x51,F
098B6:  MOVLW  00
098B8:  ADDWFC x52,F
098BA:  MOVLW  03
098BC:  ADDWF  x51,W
098BE:  MOVWF  01
098C0:  MOVLW  00
098C2:  ADDWFC x52,W
098C4:  MOVWF  03
098C6:  MOVF   01,W
098C8:  MOVLB  9
098CA:  ADDWF  xC4,W
098CC:  MOVWF  FE9
098CE:  MOVF   xC5,W
098D0:  ADDWFC 03,W
098D2:  MOVWF  FEA
098D4:  MOVF   FEF,W
098D6:  MOVLB  A
098D8:  MOVWF  x53
098DA:  MOVFF  A50,FEA
098DE:  MOVFF  A4F,FE9
098E2:  MOVFF  A53,FEF
....................             data_packet.data.iv_data[step_in_packet*3+2] = port_data_ptr->data_buffer[iv_index*3+2];
098E6:  MOVFF  A4C,A52
098EA:  MOVFF  A4B,A51
098EE:  CLRF   x54
098F0:  MOVLW  03
098F2:  MOVWF  x53
098F4:  MOVLB  0
098F6:  CALL   823E
098FA:  MOVFF  02,A4E
098FE:  MOVFF  01,A4D
09902:  MOVLW  02
09904:  MOVLB  A
09906:  ADDWF  x4D,F
09908:  MOVLW  00
0990A:  ADDWFC x4E,F
0990C:  MOVLW  C6
0990E:  ADDWF  x4D,W
09910:  MOVWF  01
09912:  MOVLW  09
09914:  ADDWFC x4E,W
09916:  MOVWF  03
09918:  MOVF   01,W
0991A:  MOVWF  x4F
0991C:  MOVFF  03,A50
09920:  MOVFF  A4A,A52
09924:  MOVFF  A49,A51
09928:  CLRF   x54
0992A:  MOVLW  03
0992C:  MOVWF  x53
0992E:  MOVLB  0
09930:  CALL   823E
09934:  MOVFF  02,A52
09938:  MOVFF  01,A51
0993C:  MOVLW  02
0993E:  MOVLB  A
09940:  ADDWF  x51,F
09942:  MOVLW  00
09944:  ADDWFC x52,F
09946:  MOVLW  03
09948:  ADDWF  x51,W
0994A:  MOVWF  01
0994C:  MOVLW  00
0994E:  ADDWFC x52,W
09950:  MOVWF  03
09952:  MOVF   01,W
09954:  MOVLB  9
09956:  ADDWF  xC4,W
09958:  MOVWF  FE9
0995A:  MOVF   xC5,W
0995C:  ADDWFC 03,W
0995E:  MOVWF  FEA
09960:  MOVF   FEF,W
09962:  MOVLB  A
09964:  MOVWF  x53
09966:  MOVFF  A50,FEA
0996A:  MOVFF  A4F,FE9
0996E:  MOVFF  A53,FEF
09972:  MOVLB  0
09974:  MOVLB  A
09976:  MOVF   x4C,W
09978:  MOVWF  03
0997A:  MOVF   x4B,W
0997C:  INCF   x4B,F
0997E:  BTFSC  FD8.2
09980:  INCF   x4C,F
09982:  INCF   x49,F
09984:  BTFSC  FD8.2
09986:  INCF   x4A,F
09988:  MOVLB  0
0998A:  GOTO   9778
....................         }
.................... 
....................         // 残り領域を 0x00 で埋める（未使用部分）
....................         for (; step_in_packet < 21; step_in_packet++) {
0998E:  MOVLB  A
09990:  MOVF   x4C,F
09992:  BTFSC  FD8.2
09994:  BRA    999C
09996:  MOVLB  0
09998:  GOTO   9A56
0999C:  MOVLB  0
0999E:  MOVLB  A
099A0:  MOVF   x4B,W
099A2:  SUBLW  14
099A4:  BTFSC  FD8.0
099A6:  BRA    99AE
099A8:  MOVLB  0
099AA:  GOTO   9A56
099AE:  MOVLB  0
....................             data_packet.data.iv_data[step_in_packet*3]  = 0x00;
099B0:  MOVFF  A4C,A52
099B4:  MOVFF  A4B,A51
099B8:  MOVLB  A
099BA:  CLRF   x54
099BC:  MOVLW  03
099BE:  MOVWF  x53
099C0:  MOVLB  0
099C2:  CALL   823E
099C6:  MOVFF  02,A4E
099CA:  MOVFF  01,A4D
099CE:  MOVLW  C6
099D0:  MOVLB  A
099D2:  ADDWF  x4D,W
099D4:  MOVWF  FE9
099D6:  MOVLW  09
099D8:  ADDWFC x4E,W
099DA:  MOVWF  FEA
099DC:  CLRF   FEF
....................             data_packet.data.iv_data[step_in_packet*3+1] = 0x00;
099DE:  MOVFF  A4C,A52
099E2:  MOVFF  A4B,A51
099E6:  CLRF   x54
099E8:  MOVLW  03
099EA:  MOVWF  x53
099EC:  MOVLB  0
099EE:  CALL   823E
099F2:  MOVFF  02,A4E
099F6:  MOVFF  01,A4D
099FA:  MOVLW  01
099FC:  MOVLB  A
099FE:  ADDWF  x4D,F
09A00:  MOVLW  00
09A02:  ADDWFC x4E,F
09A04:  MOVLW  C6
09A06:  ADDWF  x4D,W
09A08:  MOVWF  FE9
09A0A:  MOVLW  09
09A0C:  ADDWFC x4E,W
09A0E:  MOVWF  FEA
09A10:  CLRF   FEF
....................             data_packet.data.iv_data[step_in_packet*3+2] = 0x00;
09A12:  MOVFF  A4C,A52
09A16:  MOVFF  A4B,A51
09A1A:  CLRF   x54
09A1C:  MOVLW  03
09A1E:  MOVWF  x53
09A20:  MOVLB  0
09A22:  CALL   823E
09A26:  MOVFF  02,A4E
09A2A:  MOVFF  01,A4D
09A2E:  MOVLW  02
09A30:  MOVLB  A
09A32:  ADDWF  x4D,F
09A34:  MOVLW  00
09A36:  ADDWFC x4E,F
09A38:  MOVLW  C6
09A3A:  ADDWF  x4D,W
09A3C:  MOVWF  FE9
09A3E:  MOVLW  09
09A40:  ADDWFC x4E,W
09A42:  MOVWF  FEA
09A44:  CLRF   FEF
09A46:  MOVLB  0
09A48:  MOVLB  A
09A4A:  INCF   x4B,F
09A4C:  BTFSC  FD8.2
09A4E:  INCF   x4C,F
09A50:  MOVLB  0
09A52:  GOTO   998E
....................         }
.................... 
....................         // フラッシュに書き込み
....................         if (port_data_ptr->port_num == 1) {
09A56:  MOVLB  9
09A58:  MOVF   xC4,W
09A5A:  MOVWF  FE9
09A5C:  MOVF   xC5,W
09A5E:  MOVWF  FEA
09A60:  DECFSZ FEF,W
09A62:  BRA    9A68
09A64:  BRA    9A6E
09A66:  MOVLB  0
09A68:  MOVLB  0
09A6A:  GOTO   9AC6
09A6E:  MOVLB  0
....................             data_packet.data.crc = calc_crc8(data_packet_ptr->raw, PACKET_SIZE - 1);
09A70:  MOVLB  A
09A72:  MOVF   x06,W
09A74:  MOVWF  01
09A76:  MOVF   x07,W
09A78:  MOVWF  03
09A7A:  MOVF   01,W
09A7C:  MOVWF  x4D
09A7E:  MOVFF  03,A4E
09A82:  MOVFF  A4E,AEB
09A86:  MOVFF  A4D,AEA
09A8A:  MOVLW  3F
09A8C:  MOVWF  xEC
09A8E:  MOVLB  0
09A90:  CALL   30EA
09A94:  MOVFF  01,A05
....................             misf_write_data(FLASH_ID_IV1_DATA, data_packet_ptr->raw, PACKET_SIZE);
09A98:  MOVLB  A
09A9A:  MOVF   x06,W
09A9C:  MOVWF  01
09A9E:  MOVF   x07,W
09AA0:  MOVWF  03
09AA2:  MOVF   01,W
09AA4:  MOVWF  x4D
09AA6:  MOVFF  03,A4E
09AAA:  MOVLW  04
09AAC:  MOVWF  x4F
09AAE:  MOVFF  A4E,A51
09AB2:  MOVFF  A4D,A50
09AB6:  CLRF   x53
09AB8:  MOVLW  40
09ABA:  MOVWF  x52
09ABC:  MOVLB  0
09ABE:  CALL   428C
....................             // for (int i = 0; i < PACKET_SIZE; i++) {
....................                 // fprintf(PC, "%02X ", data_packet_ptr->raw[i]);
....................             // }
....................         } else if (port_data_ptr->port_num == 2) {
09AC2:  GOTO   9B32
09AC6:  MOVLB  9
09AC8:  MOVF   xC4,W
09ACA:  MOVWF  FE9
09ACC:  MOVF   xC5,W
09ACE:  MOVWF  FEA
09AD0:  MOVF   FEF,W
09AD2:  SUBLW  02
09AD4:  BTFSC  FD8.2
09AD6:  BRA    9ADE
09AD8:  MOVLB  0
09ADA:  GOTO   9B32
09ADE:  MOVLB  0
....................             data_packet.data.crc = calc_crc8(data_packet_ptr->raw, PACKET_SIZE - 1);
09AE0:  MOVLB  A
09AE2:  MOVF   x06,W
09AE4:  MOVWF  01
09AE6:  MOVF   x07,W
09AE8:  MOVWF  03
09AEA:  MOVF   01,W
09AEC:  MOVWF  x4D
09AEE:  MOVFF  03,A4E
09AF2:  MOVFF  A4E,AEB
09AF6:  MOVFF  A4D,AEA
09AFA:  MOVLW  3F
09AFC:  MOVWF  xEC
09AFE:  MOVLB  0
09B00:  CALL   30EA
09B04:  MOVFF  01,A05
....................             misf_write_data(FLASH_ID_IV2_DATA, data_packet_ptr->raw, PACKET_SIZE);
09B08:  MOVLB  A
09B0A:  MOVF   x06,W
09B0C:  MOVWF  01
09B0E:  MOVF   x07,W
09B10:  MOVWF  03
09B12:  MOVF   01,W
09B14:  MOVWF  x4D
09B16:  MOVFF  03,A4E
09B1A:  MOVLW  06
09B1C:  MOVWF  x4F
09B1E:  MOVFF  A4E,A51
09B22:  MOVFF  A4D,A50
09B26:  CLRF   x53
09B28:  MOVLW  40
09B2A:  MOVWF  x52
09B2C:  MOVLB  0
09B2E:  CALL   428C
....................         }
09B32:  GOTO   972E
....................     }
.................... 
....................     misf_update_address_area(); // 必要なら有効化
09B36:  CALL   505C
09B3A:  RETURN 0
.................... }
.................... 
.................... iv_env_t create_meas_data()
.................... {
....................     iv_env_t data;
....................     memset(&data, 0, sizeof(data));
*
091E8:  MOVLW  09
091EA:  MOVWF  FEA
091EC:  MOVLW  E2
091EE:  MOVWF  FE9
091F0:  CLRF   00
091F2:  CLRF   02
091F4:  MOVLW  0C
091F6:  MOVWF  01
091F8:  CALL   234C
....................     data.time           = get_current_sec();
091FC:  CALL   3C16
09200:  MOVFF  03,9E5
09204:  MOVFF  02,9E4
09208:  MOVFF  01,9E3
0920C:  MOVFF  00,9E2
....................     data.temp_py_top    = ad7490_read(ADC_TEMP_PY_TOP);
09210:  MOVLW  0D
09212:  MOVLB  9
09214:  MOVWF  xEE
09216:  MOVLB  0
09218:  CALL   24C2
0921C:  MOVFF  02,9E9
09220:  MOVFF  01,9E8
....................     data.temp_py_bot    = ad7490_read(ADC_TEMP_PY_BOT);
09224:  MOVLW  0E
09226:  MOVLB  9
09228:  MOVWF  xEE
0922A:  MOVLB  0
0922C:  CALL   24C2
09230:  MOVFF  02,9EB
09234:  MOVFF  01,9EA
....................     data.temp_mis7      = ad7490_read(ADC_TEMP_MIS7);
09238:  MOVLW  0C
0923A:  MOVLB  9
0923C:  MOVWF  xEE
0923E:  MOVLB  0
09240:  CALL   24C2
09244:  MOVFF  02,9ED
09248:  MOVFF  01,9EC
....................     data.pd             = ad7490_read(ADC_PD);
0924C:  MOVLW  0F
0924E:  MOVLB  9
09250:  MOVWF  xEE
09252:  MOVLB  0
09254:  CALL   24C2
09258:  MOVFF  02,9E7
0925C:  MOVFF  01,9E6
....................     return data;
09260:  MOVLW  E2
09262:  MOVWF  01
09264:  MOVLW  09
09266:  MOVWF  02
09268:  RETURN 0
.................... }
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data)
.................... {
....................     // ADCの12ビット値を電力密度（mW/cm²）に変換する例
....................     // ここでは仮に1 LSB = 0.1 mW/cm²とする
....................     return (unsigned int16)(data);
*
08358:  MOVLB  1
0835A:  MOVF   xE9,W
0835C:  MOVWF  01
0835E:  MOVF   xEA,W
08360:  MOVWF  02
08362:  MOVLB  0
08364:  GOTO   8FA2 (RETURN)
.................... }
.................... 
.................... int16 calc_curr_value(unsigned int16 data){
....................     float voltage_mv;
....................     float current_ma;
.................... 
....................     // 12ビットADCの値を[mV]に変換
....................     voltage_mv = (float)data * ADC_REF_VOLTAGE_MV / ADC_MAX_READING;
*
08D4E:  MOVFF  1EA,1F4
08D52:  MOVFF  1E9,1F3
08D56:  GOTO   8368
08D5A:  MOVFF  03,1F6
08D5E:  MOVFF  02,1F5
08D62:  MOVFF  01,1F4
08D66:  MOVFF  00,1F3
08D6A:  MOVFF  1F6,1FA
08D6E:  MOVFF  1F5,1F9
08D72:  MOVFF  1F4,1F8
08D76:  MOVFF  1F3,1F7
08D7A:  MOVLB  1
08D7C:  CLRF   xFE
08D7E:  MOVLW  40
08D80:  MOVWF  xFD
08D82:  MOVLW  1C
08D84:  MOVWF  xFC
08D86:  MOVLW  8A
08D88:  MOVWF  xFB
08D8A:  MOVLB  0
08D8C:  GOTO   83AE
08D90:  MOVFF  03,1F6
08D94:  MOVFF  02,1F5
08D98:  MOVFF  01,1F4
08D9C:  MOVFF  00,1F3
08DA0:  MOVFF  1F6,1FA
08DA4:  MOVFF  1F5,1F9
08DA8:  MOVFF  1F4,1F8
08DAC:  MOVFF  1F3,1F7
08DB0:  MOVLB  1
08DB2:  CLRF   xFE
08DB4:  MOVLW  F0
08DB6:  MOVWF  xFD
08DB8:  MOVLW  7F
08DBA:  MOVWF  xFC
08DBC:  MOVLW  8A
08DBE:  MOVWF  xFB
08DC0:  MOVLB  0
08DC2:  CALL   850C
08DC6:  MOVFF  03,1EE
08DCA:  MOVFF  02,1ED
08DCE:  MOVFF  01,1EC
08DD2:  MOVFF  00,1EB
.................... 
....................     // オフセット電圧(ADC_CURR_REF_VOLTAGE_MV)との差から電流[mA]を算出
....................     current_ma = (voltage_mv - ADC_CURR_REF_VOLTAGE_MV) / (SHUNT_RESISTANCE_OHM * AMP_GAIN);
08DD6:  BSF    FD8.1
08DD8:  MOVFF  1EE,1F6
08DDC:  MOVFF  1ED,1F5
08DE0:  MOVFF  1EC,1F4
08DE4:  MOVFF  1EB,1F3
08DE8:  MOVLB  1
08DEA:  CLRF   xFA
08DEC:  MOVLW  40
08DEE:  MOVWF  xF9
08DF0:  MOVLW  1C
08DF2:  MOVWF  xF8
08DF4:  MOVLW  89
08DF6:  MOVWF  xF7
08DF8:  MOVLB  0
08DFA:  GOTO   87FA
08DFE:  MOVFF  03,1F6
08E02:  MOVFF  02,1F5
08E06:  MOVFF  01,1F4
08E0A:  MOVFF  00,1F3
08E0E:  MOVFF  1F6,1FA
08E12:  MOVFF  1F5,1F9
08E16:  MOVFF  1F4,1F8
08E1A:  MOVFF  1F3,1F7
08E1E:  MOVLB  1
08E20:  CLRF   xFE
08E22:  CLRF   xFD
08E24:  MOVLW  20
08E26:  MOVWF  xFC
08E28:  MOVLW  82
08E2A:  MOVWF  xFB
08E2C:  MOVLB  0
08E2E:  CALL   850C
08E32:  MOVFF  03,1F2
08E36:  MOVFF  02,1F1
08E3A:  MOVFF  01,1F0
08E3E:  MOVFF  00,1EF
.................... 
....................     return (int16)current_ma;
08E42:  MOVFF  1F2,1F6
08E46:  MOVFF  1F1,1F5
08E4A:  MOVFF  1F0,1F4
08E4E:  MOVFF  1EF,1F3
08E52:  GOTO   8CF4
08E56:  MOVF   01,W
08E58:  MOVWF  01
08E5A:  MOVF   02,W
08E5C:  MOVWF  02
08E5E:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "domain/cigs_piclog.c"
.................... #include "cigs_piclog.h"                          // 同じフォルダのヘッダー
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/timer.h"                   // タイマーライブラリ  
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... #INT_TIMER1 
.................... static void TIMER1_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... void set_current_sec(unsigned int32 new_sec);
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "cigs_flash.h"                 // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"               // フラッシュ操作キュー
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                 // フラッシュデバイス
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // #define PICLOG_DEBUG
.................... #define MISSION_ID_PICLOG 0x03  // PICLOGミッションID
.................... 
.................... void piclog_make(int8 function, int8 parameter)
*
050EA:  MOVLW  02
050EC:  MOVLB  2
050EE:  MOVWF  x18
050F0:  MOVLW  11
050F2:  MOVWF  x17
.................... {
....................     piclog_t piclog;
....................     piclog_t *piclog_ptr = &piclog;
....................     memset(piclog_ptr, 0x00, PICLOG_PACKET_SIZE);
050F4:  MOVFF  218,FEA
050F8:  MOVFF  217,FE9
050FC:  CLRF   00
050FE:  CLRF   02
05100:  MOVLW  06
05102:  MOVWF  01
05104:  MOVLB  0
05106:  CALL   234C
....................     piclog_ptr->fields.time = get_current_sec();
0510A:  MOVLB  2
0510C:  MOVF   x17,W
0510E:  MOVWF  01
05110:  MOVF   x18,W
05112:  MOVWF  03
05114:  MOVF   01,W
05116:  MOVWF  x1A
05118:  MOVFF  03,21B
0511C:  MOVLB  0
0511E:  CALL   3C16
05122:  MOVFF  21B,FEA
05126:  MOVFF  21A,FE9
0512A:  MOVFF  00,FEF
0512E:  MOVFF  01,FEC
05132:  MOVFF  02,FEC
05136:  MOVFF  03,FEC
0513A:  MOVF   FED,F
0513C:  MOVF   FED,F
0513E:  MOVF   FED,F
....................     piclog_ptr->fields.function = function;
05140:  MOVLW  04
05142:  MOVLB  2
05144:  ADDWF  x17,W
05146:  MOVWF  FE9
05148:  MOVLW  00
0514A:  ADDWFC x18,W
0514C:  MOVWF  FEA
0514E:  MOVFF  20F,FEF
....................     piclog_ptr->fields.parameter = parameter;
05152:  MOVLW  05
05154:  ADDWF  x17,W
05156:  MOVWF  FE9
05158:  MOVLW  00
0515A:  ADDWFC x18,W
0515C:  MOVWF  FEA
0515E:  MOVFF  210,FEF
.................... 
....................     printf("[PICLOG] : ");
05162:  MOVLW  7E
05164:  MOVWF  FF6
05166:  MOVLW  06
05168:  MOVWF  FF7
0516A:  MOVLW  00
0516C:  MOVWF  FF8
0516E:  MOVLB  0
05170:  CALL   22DC
....................     for (int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
05174:  MOVLB  2
05176:  CLRF   x19
05178:  MOVLB  0
0517A:  MOVLB  2
0517C:  MOVF   x19,W
0517E:  SUBLW  05
05180:  BTFSC  FD8.0
05182:  BRA    518A
05184:  MOVLB  0
05186:  GOTO   51C6
0518A:  MOVLB  0
....................         printf("%02X ", piclog_ptr->bytes[i]);
0518C:  MOVLB  2
0518E:  MOVF   x19,W
05190:  ADDWF  x17,W
05192:  MOVWF  FE9
05194:  MOVLW  00
05196:  ADDWFC x18,W
05198:  MOVWF  FEA
0519A:  MOVFF  FEF,21A
0519E:  MOVFF  21A,9E8
051A2:  MOVLW  37
051A4:  MOVLB  9
051A6:  MOVWF  xE9
051A8:  MOVLB  0
051AA:  CALL   2542
051AE:  MOVLW  20
051B0:  BTFSS  FA6.6
051B2:  GOTO   51B0
051B6:  MOVLB  E
051B8:  MOVWF  xF9
051BA:  MOVLB  0
051BC:  MOVLB  2
051BE:  INCF   x19,F
051C0:  MOVLB  0
051C2:  GOTO   517A
....................     }
....................     printf("\r\n");
051C6:  MOVLW  0D
051C8:  BTFSS  FA6.6
051CA:  GOTO   51C8
051CE:  MOVLB  E
051D0:  MOVWF  xF9
051D2:  MOVLW  0A
051D4:  MOVLB  0
051D6:  BTFSS  FA6.6
051D8:  GOTO   51D6
051DC:  MOVLB  E
051DE:  MOVWF  xF9
.................... 
....................     misf_write_data(FLASH_ID_PICLOG, piclog_ptr->bytes, PICLOG_PACKET_SIZE);
051E0:  MOVLB  2
051E2:  MOVF   x17,W
051E4:  MOVWF  01
051E6:  MOVF   x18,W
051E8:  MOVWF  03
051EA:  MOVF   01,W
051EC:  MOVWF  x1A
051EE:  MOVFF  03,21B
051F2:  MOVLW  01
051F4:  MOVLB  A
051F6:  MOVWF  x4F
051F8:  MOVFF  21B,A51
051FC:  MOVFF  21A,A50
05200:  CLRF   x53
05202:  MOVLW  06
05204:  MOVWF  x52
05206:  MOVLB  0
05208:  CALL   428C
....................     misf_update_address_area();
0520C:  CALL   505C
05210:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "domain/cigs_smf.c"
.................... #include "cigs_smf.h"  
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #include "../hal/cigs_config.h" // int8,int32 型など(CCS C) 依存
.................... #include "cigs_flash.h"       // MISF_ADDRESS_TABLE, misf_counter_table 依存
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... extern int1 smf_update_flag[10]; // SMF更新フラグ
.................... 
.................... 
.................... // SMF管理用構造体
.................... typedef struct {
....................     ADDRESS_AREA_T header_area;
....................     ADDRESS_AREA_T data_area;
.................... } SMF_AREA_T;
.................... #define SMF_ID_COUNT 7
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 reserved;
.................... } SMF_PARTITION;
.................... 
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         SMF_PARTITION headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table);
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "cigs_flash.h"
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mt25q.h"              // Flash device definitions
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/tool/smf_queue.h"            // システム設定 
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/tool/calc_tools.h"           // SMF処理関数 
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/mmj_smf_memorymap.h" 
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... typedef enum smf_memory_id_t{
....................     // SATO
....................     SMF_SATO_DATA_TABLE = 0xA0,
....................     SMF_SATO_PICLOG = 0xA1,
....................     SMF_SATO_INNER_DIODE_HEADER = 0xA2,
....................     SMF_SATO_INNER_DIODE_DATA = 0xA3,
....................     SMF_SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SMF_SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     SMF_CIGS_DATA_TABLE = 0xC0,
....................     SMF_CIGS_PICLOG = 0xC1,
....................     SMF_CIGS_ENVIRO = 0xC2,
....................     SMF_CIGS_IV1_HEADER = 0xC3,
....................     SMF_CIGS_IV1_DATA = 0xC4,
....................     SMF_CIGS_IV2_HEADER = 0xC5,
....................     SMF_CIGS_IV2_DATA = 0xC6,
.................... };
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS   0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS   0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS     0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS       0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS         0x06AB0FFF
.................... #define CIGS_ENVIRO_START_ADDRESS       0x06AB1000
.................... #define CIGS_ENVIRO_END_ADDRESS         0x06B50FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS   0x06B51000
.................... #define CIGS_IV1_HEADER_END_ADDRESS     0x06BF0FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS     0x06BF1000
.................... #define CIGS_IV1_DATA_END_ADDRESS       0x06FF0FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS   0x06FF1000
.................... #define CIGS_IV2_HEADER_END_ADDRESS     0x07090FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS     0x07091000
.................... #define CIGS_IV2_DATA_END_ADDRESS       0x07490FFF
.................... 
.................... /*
.................... enum smf_memory_id{
....................     // SATO
....................     SATO_DATA_TABLE = 0xA0,
....................     SATO_PICLOG = 0xA1,
....................     SATO_INNER_DIODE_HEADER = 0xA2,
....................     SATO_INNER_DIODE_DATA = 0xA3,
....................     SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     IDF_CIGS_DATA_TABLE = 0xC0,
....................     IDF_CIGS_PICLOG = 0xC1,
....................     IDF_CIGS_ENVIRO = 0xC2,
....................     IDF_CIGS_IV1_HEADER = 0xC3,
....................     IDF_CIGS_IV1_DATA = 0xC4,
....................     IDF_CIGS_IV2_HEADER = 0xC5,
....................     IDF_CIGS_IV2_DATA = 0xC6,
.................... }
.................... */
.................... // DATA ID for CIGS
.................... #define DATA_ID_CIGS_DATA_TABLE 0xC0
.................... #define DATA_ID_CIGS_PICLOG 0xC1
.................... #define DATA_ID_CIGS_ENVIRO 0xC2
.................... #define DATA_ID_CIGS_IV1_HEADER 0xC3
.................... #define DATA_ID_CIGS_IV1_DATA 0xC4
.................... #define DATA_ID_CIGS_IV2_HEADER 0xC5
.................... #define DATA_ID_CIGS_IV2_DATA 0xC6
.................... 
.................... // FLASH ADDRESS for CIGS
.................... #define SMF_DATA_TABLE_HEADER_START_ADDRESS   0x07284000
.................... #define SMF_DATA_TABLE_HEADER_END_ADDRESS     0x07284FFF
.................... #define SMF_DATA_TABLE_DATA_START_ADDRESS     0x07285000
.................... #define SMF_DATA_TABLE_DATA_END_ADDRESS       0x07285FFF
.................... 
.................... #define SMF_PICLOG_HEADER_START_ADDRESS       0x07286000
.................... #define SMF_PICLOG_HEADER_END_ADDRESS         0x07286FFF
.................... #define SMF_PICLOG_DATA_START_ADDRESS         0x07287000
.................... #define SMF_PICLOG_DATA_END_ADDRESS           0x07296FFF
.................... 
.................... #define SMF_ENVIRO_HEADER_START_ADDRESS       0x07297000
.................... #define SMF_ENVIRO_HEADER_END_ADDRESS         0x07297FFF
.................... #define SMF_ENVIRO_DATA_START_ADDRESS         0x07298000
.................... #define SMF_ENVIRO_DATA_END_ADDRESS           0x07337FFF
.................... 
.................... #define SMF_IV1_HEADER_HEADER_START_ADDRESS   0x07338000
.................... #define SMF_IV1_HEADER_HEADER_END_ADDRESS     0x07338FFF
.................... #define SMF_IV1_HEADER_DATA_START_ADDRESS     0x07339000
.................... #define SMF_IV1_HEADER_DATA_END_ADDRESS       0x073D8FFF
.................... 
.................... #define SMF_IV1_DATA_HEADER_START_ADDRESS     0x073D9000
.................... #define SMF_IV1_DATA_HEADER_END_ADDRESS       0x073D9FFF
.................... #define SMF_IV1_DATA_DATA_START_ADDRESS       0x073DA000
.................... #define SMF_IV1_DATA_DATA_END_ADDRESS         0x077D9FFF
.................... 
.................... #define SMF_IV2_HEADER_HEADER_START_ADDRESS   0x077DA000
.................... #define SMF_IV2_HEADER_HEADER_END_ADDRESS     0x077DAFFF
.................... #define SMF_IV2_HEADER_DATA_START_ADDRESS     0x077DB000
.................... #define SMF_IV2_HEADER_DATA_END_ADDRESS       0x0787AFFF
.................... 
.................... #define SMF_IV2_DATA_HEADER_START_ADDRESS     0x0787B000
.................... #define SMF_IV2_DATA_HEADER_END_ADDRESS       0x0787BFFF
.................... #define SMF_IV2_DATA_DATA_START_ADDRESS       0x0787C000
.................... #define SMF_IV2_DATA_DATA_END_ADDRESS         0x07C7BFFF
.................... 
.................... 
.................... // FLASH SIZE for CIGS
.................... #define SMF_DATA_TABLE_SIZE  4096
.................... #define SMF_PICLOG_SIZE     1310720
.................... #define SMF_ENVIRO_SIZE     1310720
.................... #define SMF_IV1_HEADER_SIZE  655360
.................... #define SMF_IV1_DATA_SIZE    4194304
.................... #define SMF_IV2_HEADER_SIZE  655360
.................... #define SMF_IV2_DATA_SIZE    4194304
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... #define CRC_RETRY_COUNT 5     // CRC検証のリトライ回数 (smf_queue.hの値と整合するなら一元化検討)
.................... 
.................... 
.................... const ADDRESS_AREA_T SMF_ADDRESS_TABLE[FLASH_ID_COUNT] = {
....................     { CIGS_DATA_TABLE_START_ADDRESS,   CIGS_DATA_TABLE_END_ADDRESS,   MISF_CIGS_DATA_TABLE_SIZE },
....................     { CIGS_PICLOG_START_ADDRESS,       CIGS_PICLOG_END_ADDRESS,       MISF_CIGS_PICLOG_SIZE },
....................     { CIGS_ENVIRO_START_ADDRESS,       CIGS_ENVIRO_END_ADDRESS,       MISF_CIGS_ENVIRO_SIZE },
....................     { CIGS_IV1_HEADER_START_ADDRESS,   CIGS_IV1_HEADER_END_ADDRESS,   MISF_CIGS_IV1_HEADER_SIZE },
....................     { CIGS_IV1_DATA_START_ADDRESS,     CIGS_IV1_DATA_END_ADDRESS,     MISF_CIGS_IV1_DATA_SIZE },
....................     { CIGS_IV2_HEADER_START_ADDRESS,   CIGS_IV2_HEADER_END_ADDRESS,   MISF_CIGS_IV2_HEADER_SIZE },
....................     { CIGS_IV2_DATA_START_ADDRESS,     CIGS_IV2_DATA_END_ADDRESS,     MISF_CIGS_IV2_DATA_SIZE }
.................... };
.................... 
.................... int1 smf_update_flag[10];
.................... 
.................... void update_smf_header()
.................... {
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... }
.................... 
.................... 
.................... void smf_data_table_init()
.................... {
....................     fprintf(PC, "SMF Data Table Initialize\r\n");
*
07A40:  MOVLW  8A
07A42:  MOVWF  FF6
07A44:  MOVLW  06
07A46:  MOVWF  FF7
07A48:  MOVLW  00
07A4A:  MOVWF  FF8
07A4C:  CALL   22DC
....................     for ( unsigned int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_IV2_DATA_END_ADDRESS; address += SUBSECTOR_SIZE )
07A50:  MOVLW  06
07A52:  MOVLB  1
07A54:  MOVWF  xF8
07A56:  MOVLW  AA
07A58:  MOVWF  xF7
07A5A:  CLRF   xF6
07A5C:  CLRF   xF5
07A5E:  MOVLB  0
07A60:  MOVLB  1
07A62:  MOVF   xF8,W
07A64:  SUBLW  07
07A66:  BTFSC  FD8.0
07A68:  BRA    7A70
07A6A:  MOVLB  0
07A6C:  GOTO   7AF2
07A70:  MOVLB  0
07A72:  BTFSS  FD8.2
07A74:  GOTO   7ABA
07A78:  MOVLB  1
07A7A:  MOVF   xF7,W
07A7C:  SUBLW  49
07A7E:  BTFSC  FD8.0
07A80:  BRA    7A88
07A82:  MOVLB  0
07A84:  GOTO   7AF2
07A88:  MOVLB  0
07A8A:  BTFSS  FD8.2
07A8C:  GOTO   7ABA
07A90:  MOVLB  1
07A92:  MOVF   xF6,W
07A94:  SUBLW  0F
07A96:  BTFSC  FD8.0
07A98:  BRA    7AA0
07A9A:  MOVLB  0
07A9C:  GOTO   7AF2
07AA0:  MOVLB  0
07AA2:  BTFSS  FD8.2
07AA4:  GOTO   7ABA
07AA8:  MOVLB  1
07AAA:  MOVF   xF5,W
07AAC:  SUBLW  FE
07AAE:  BTFSC  FD8.0
07AB0:  BRA    7AB8
07AB2:  MOVLB  0
07AB4:  GOTO   7AF2
07AB8:  MOVLB  0
....................     {
....................         subsector_4kByte_erase(smf, address);
07ABA:  MOVFF  119,A92
07ABE:  MOVFF  118,A91
07AC2:  MOVFF  117,A90
07AC6:  MOVFF  116,A8F
07ACA:  MOVFF  1F8,A96
07ACE:  MOVFF  1F7,A95
07AD2:  MOVFF  1F6,A94
07AD6:  MOVFF  1F5,A93
07ADA:  CALL   4D38
07ADE:  MOVLW  10
07AE0:  MOVLB  1
07AE2:  ADDWF  xF6,F
07AE4:  MOVLW  00
07AE6:  ADDWFC xF7,F
07AE8:  MOVLW  00
07AEA:  ADDWFC xF8,F
07AEC:  MOVLB  0
07AEE:  GOTO   7A60
....................     }
....................     smf_data_table_t smf_data_table = {0};
07AF2:  MOVLB  1
07AF4:  CLRF   xF9
07AF6:  CLRF   xFA
07AF8:  CLRF   xFB
07AFA:  CLRF   xFC
07AFC:  CLRF   xFD
07AFE:  CLRF   xFE
07B00:  CLRF   xFF
07B02:  MOVLB  2
07B04:  CLRF   x00
07B06:  CLRF   x01
07B08:  CLRF   x02
07B0A:  CLRF   x03
07B0C:  CLRF   x04
07B0E:  CLRF   x05
07B10:  CLRF   x06
07B12:  CLRF   x07
07B14:  CLRF   x08
07B16:  CLRF   x09
07B18:  CLRF   x0A
07B1A:  CLRF   x0B
07B1C:  CLRF   x0C
07B1E:  CLRF   x0D
07B20:  CLRF   x0E
07B22:  CLRF   x0F
07B24:  CLRF   x10
07B26:  CLRF   x11
07B28:  CLRF   x12
07B2A:  CLRF   x13
07B2C:  CLRF   x14
07B2E:  CLRF   x15
07B30:  CLRF   x16
07B32:  CLRF   x17
07B34:  CLRF   x18
07B36:  CLRF   x19
07B38:  CLRF   x1A
07B3A:  CLRF   x1B
07B3C:  CLRF   x1C
07B3E:  CLRF   x1D
07B40:  CLRF   x1E
07B42:  CLRF   x1F
07B44:  CLRF   x20
07B46:  CLRF   x21
07B48:  CLRF   x22
07B4A:  CLRF   x23
07B4C:  CLRF   x24
07B4E:  CLRF   x25
07B50:  CLRF   x26
07B52:  CLRF   x27
07B54:  CLRF   x28
07B56:  CLRF   x29
07B58:  CLRF   x2A
07B5A:  CLRF   x2B
07B5C:  CLRF   x2C
07B5E:  CLRF   x2D
07B60:  CLRF   x2E
07B62:  CLRF   x2F
07B64:  CLRF   x30
07B66:  CLRF   x31
07B68:  CLRF   x32
07B6A:  CLRF   x33
07B6C:  CLRF   x34
07B6E:  CLRF   x35
07B70:  CLRF   x36
07B72:  CLRF   x37
07B74:  CLRF   x38
....................     smf_data_table.fields.crc = calc_crc8(smf_data_table.bytes, PACKET_SIZE - 1); // CRCを計算して初期化    
07B76:  MOVLW  01
07B78:  MOVLB  A
07B7A:  MOVWF  xEB
07B7C:  MOVLW  F9
07B7E:  MOVWF  xEA
07B80:  MOVLW  3F
07B82:  MOVWF  xEC
07B84:  MOVLB  0
07B86:  CALL   30EA
07B8A:  MOVFF  01,238
....................     write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table.bytes, PACKET_SIZE);
07B8E:  MOVFF  119,AED
07B92:  MOVFF  118,AEC
07B96:  MOVFF  117,AEB
07B9A:  MOVFF  116,AEA
07B9E:  MOVLW  06
07BA0:  MOVLB  A
07BA2:  MOVWF  xF1
07BA4:  MOVLW  AA
07BA6:  MOVWF  xF0
07BA8:  CLRF   xEF
07BAA:  CLRF   xEE
07BAC:  MOVLW  01
07BAE:  MOVWF  xF3
07BB0:  MOVLW  F9
07BB2:  MOVWF  xF2
07BB4:  CLRF   xF5
07BB6:  MOVLW  40
07BB8:  MOVWF  xF4
07BBA:  MOVLB  0
07BBC:  CALL   3F34
07BC0:  RETURN 0
.................... }
.................... 
.................... void read_smf_header(smf_data_table_t *smf_data_table)
.................... {
....................     int8 retry_count;
.................... 
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
....................     {
....................         // ヘッダを読み出し
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
....................         print_smf_counter_status(smf_data_table);
.................... 
....................         // CRC検証
....................         if (is_crc_valid(smf_data_table->bytes, PACKET_SIZE))
....................         {
....................             return; // 成功したら終了
....................         }
....................         // NGなら少し待って再試行
....................         printf("CRC ERROR %d\r\n", retry_count + 1);
....................     }
.................... 
....................     // ここまで来たら失敗
....................     printf("CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
.................... 
....................     // 読み込み失敗時は初期化しておく
....................     smf_data_table_init();
....................     read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
.................... 
....................     return;
.................... }
.................... 
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table)
.................... {
....................     int1 crc_valid = 0;
....................     int8 readdata[PACKET_SIZE];
....................     smf_data_table->fields.crc = calc_crc8(smf_data_table->bytes, PACKET_SIZE - 1); // CRCを更新
.................... 
....................     for (int8 retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE); // ヘッダーを書き込み
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
....................         if (is_crc_valid(readdata, PACKET_SIZE))
....................         {
....................             crc_valid = 1; // FIX            break;
....................         }
....................     }
....................     if (!crc_valid)
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
....................         // return; 
....................     }
.................... }
.................... 
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table)
.................... {
....................     fprintf(PC, "\r\n[SMF Counter Status]\r\n");
....................     fprintf(PC, "\tPARTITION\tUSED\t\tRESERVE\r\n");
....................     fprintf(PC, "\t---------\t----------\t----------\r\n");
....................     fprintf(PC, "\tPICLOG\t\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_PICLOG_DATA].used_size, smf_data_table->fields.headers[CIGS_PICLOG_DATA].reserved);
....................     fprintf(PC, "\tENVIRO\t\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_ENVIRO_DATA].used_size, smf_data_table->fields.headers[CIGS_ENVIRO_DATA].reserved);
....................     fprintf(PC, "\tIV1_HEADER\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_IV1_HEADER].used_size, smf_data_table->fields.headers[CIGS_IV1_HEADER].reserved);
....................     fprintf(PC, "\tIV1_DATA\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_IV1_DATA].used_size, smf_data_table->fields.headers[CIGS_IV1_DATA].reserved);
....................     fprintf(PC, "\tIV2_HEADER\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_IV2_HEADER].used_size, smf_data_table->fields.headers[CIGS_IV2_HEADER].reserved);
....................     fprintf(PC, "\tIV2_DATA\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_IV2_DATA].used_size, smf_data_table->fields.headers[CIGS_IV2_DATA].reserved);
....................     fprintf(PC, "\t==========================================\r\n\r\n");
.................... }
.................... 
.................... void smf_write(FlashOperationStruct *smf_queue_ptr)
.................... {
....................     fprintf(PC, "\r\n_______________________________\r\n");
*
10474:  MOVLW  4C
10476:  MOVWF  FF6
10478:  MOVLW  08
1047A:  MOVWF  FF7
1047C:  MOVLW  00
1047E:  MOVWF  FF8
10480:  CALL   22DC
....................     fprintf(PC, "_________Start copy_data_________\r\n");
10484:  MOVLW  70
10486:  MOVWF  FF6
10488:  MOVLW  08
1048A:  MOVWF  FF7
1048C:  MOVLW  00
1048E:  MOVWF  FF8
10490:  CALL   22DC
....................     
....................     // 接続確認
....................     if (!is_connect(mis_fm))
10494:  MOVFF  115,253
10498:  MOVFF  114,252
1049C:  MOVFF  113,251
104A0:  MOVFF  112,250
104A4:  CALL   2E02
104A8:  MOVF   01,F
104AA:  BTFSS  FD8.2
104AC:  GOTO   104C4
....................     {
....................         fprintf(PC, "Error: MIS FM is not connected\r\n");
104B0:  MOVLW  94
104B2:  MOVWF  FF6
104B4:  MOVLW  08
104B6:  MOVWF  FF7
104B8:  MOVLW  00
104BA:  MOVWF  FF8
104BC:  CALL   22DC
....................         return;
104C0:  GOTO   113A4
....................     }    
....................     if (!is_connect(smf))
104C4:  MOVFF  119,253
104C8:  MOVFF  118,252
104CC:  MOVFF  117,251
104D0:  MOVFF  116,250
104D4:  CALL   2E02
104D8:  MOVF   01,F
104DA:  BTFSS  FD8.2
104DC:  GOTO   104F4
....................     {
....................         fprintf(PC, "Error: SMF is not connected\r\n");
104E0:  MOVLW  B6
104E2:  MOVWF  FF6
104E4:  MOVLW  08
104E6:  MOVWF  FF7
104E8:  MOVLW  00
104EA:  MOVWF  FF8
104EC:  CALL   22DC
....................         return;
104F0:  GOTO   113A4
....................     }    
.................... 
.................... 
....................     // smf_data_table_t smf_data_table;
....................     // read_smf_header(&smf_data_table);
.................... 
.................... 
....................     unsigned int32 misf_write_src;
....................     unsigned int32 misf_write_size;
....................     unsigned int32 used_size = misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter;
104F4:  MOVLB  1
104F6:  MOVF   xA1,W
104F8:  MOVWF  FE9
104FA:  MOVF   xA2,W
104FC:  MOVWF  FEA
104FE:  MOVF   FEF,W
10500:  MULLW  0A
10502:  MOVF   FF3,W
10504:  MOVLB  2
10506:  CLRF   x11
10508:  MOVWF  x10
1050A:  MOVLW  04
1050C:  ADDWF  x10,W
1050E:  MOVWF  01
10510:  MOVLW  00
10512:  ADDWFC x11,W
10514:  MOVWF  03
10516:  MOVF   01,W
10518:  ADDLW  22
1051A:  MOVWF  FE9
1051C:  MOVLW  01
1051E:  ADDWFC 03,W
10520:  MOVWF  FEA
10522:  MOVFF  FEF,1AB
10526:  MOVFF  FEC,1AC
1052A:  MOVFF  FEC,1AD
1052E:  MOVFF  FEC,1AE
10532:  MOVF   FED,F
10534:  MOVF   FED,F
10536:  MOVF   FED,F
....................     //アドレスと自動更新
....................     if (smf_queue_ptr->source_type == SOURCE_MISF_UNCOPIED )
10538:  MOVLW  03
1053A:  MOVLB  1
1053C:  ADDWF  xA1,W
1053E:  MOVWF  01
10540:  MOVLW  00
10542:  ADDWFC xA2,W
10544:  MOVWF  03
10546:  MOVF   01,W
10548:  MOVWF  FE9
1054A:  MOVFF  03,FEA
1054E:  BTFSS  FEF.0
10550:  BRA    10558
10552:  MOVLB  0
10554:  GOTO   1069A
10558:  MOVLB  0
....................     {
....................         misf_write_src = MISF_ADDRESS_TABLE[smf_queue_ptr->mission_id].start + misf_counter_table[smf_queue_ptr->mission_id].used_counter - misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter;
1055A:  MOVLB  1
1055C:  MOVF   xA1,W
1055E:  MOVWF  FE9
10560:  MOVF   xA2,W
10562:  MOVWF  FEA
10564:  MOVF   FEF,W
10566:  MULLW  0C
10568:  MOVF   FF3,W
1056A:  MOVLB  2
1056C:  CLRF   x11
1056E:  MOVWF  x10
10570:  MOVFF  211,03
10574:  MOVF   x10,W
10576:  MOVLB  0
10578:  CALL   00E6
1057C:  MOVWF  00
1057E:  TBLRD*+
10580:  MOVFF  FF5,01
10584:  TBLRD*+
10586:  MOVFF  FF5,02
1058A:  TBLRD*+
1058C:  MOVFF  FF5,03
10590:  MOVFF  03,215
10594:  MOVFF  02,214
10598:  MOVFF  01,213
1059C:  MOVFF  00,212
105A0:  MOVLB  1
105A2:  MOVF   xA1,W
105A4:  MOVWF  FE9
105A6:  MOVF   xA2,W
105A8:  MOVWF  FEA
105AA:  MOVF   FEF,W
105AC:  MULLW  0A
105AE:  MOVF   FF3,W
105B0:  MOVLB  2
105B2:  CLRF   x17
105B4:  MOVWF  x16
105B6:  MOVLW  22
105B8:  ADDWF  x16,W
105BA:  MOVWF  FE9
105BC:  MOVLW  01
105BE:  ADDWFC x17,W
105C0:  MOVWF  FEA
105C2:  MOVFF  FEF,00
105C6:  MOVFF  FEC,01
105CA:  MOVFF  FEC,02
105CE:  MOVFF  FEC,03
105D2:  MOVF   FED,F
105D4:  MOVF   FED,F
105D6:  MOVF   FED,F
105D8:  MOVF   00,W
105DA:  ADDWF  x12,F
105DC:  MOVF   01,W
105DE:  ADDWFC x13,F
105E0:  MOVF   02,W
105E2:  ADDWFC x14,F
105E4:  MOVF   03,W
105E6:  ADDWFC x15,F
105E8:  MOVLB  1
105EA:  MOVF   xA1,W
105EC:  MOVWF  FE9
105EE:  MOVF   xA2,W
105F0:  MOVWF  FEA
105F2:  MOVF   FEF,W
105F4:  MULLW  0A
105F6:  MOVF   FF3,W
105F8:  MOVLB  2
105FA:  CLRF   x19
105FC:  MOVWF  x18
105FE:  MOVLW  04
10600:  ADDWF  x18,W
10602:  MOVWF  01
10604:  MOVLW  00
10606:  ADDWFC x19,W
10608:  MOVWF  03
1060A:  MOVF   01,W
1060C:  ADDLW  22
1060E:  MOVWF  FE9
10610:  MOVLW  01
10612:  ADDWFC 03,W
10614:  MOVWF  FEA
10616:  MOVFF  FEF,00
1061A:  MOVFF  FEC,01
1061E:  MOVFF  FEC,02
10622:  MOVFF  FEC,03
10626:  MOVF   FED,F
10628:  MOVF   FED,F
1062A:  MOVF   FED,F
1062C:  MOVF   00,W
1062E:  SUBWF  x12,W
10630:  MOVLB  1
10632:  MOVWF  xA3
10634:  MOVF   01,W
10636:  MOVLB  2
10638:  SUBWFB x13,W
1063A:  MOVLB  1
1063C:  MOVWF  xA4
1063E:  MOVF   02,W
10640:  MOVLB  2
10642:  SUBWFB x14,W
10644:  MOVLB  1
10646:  MOVWF  xA5
10648:  MOVF   03,W
1064A:  MOVLB  2
1064C:  SUBWFB x15,W
1064E:  MOVLB  1
10650:  MOVWF  xA6
....................         misf_write_size = misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter;
10652:  MOVF   xA1,W
10654:  MOVWF  FE9
10656:  MOVF   xA2,W
10658:  MOVWF  FEA
1065A:  MOVF   FEF,W
1065C:  MULLW  0A
1065E:  MOVF   FF3,W
10660:  MOVLB  2
10662:  CLRF   x11
10664:  MOVWF  x10
10666:  MOVLW  04
10668:  ADDWF  x10,W
1066A:  MOVWF  01
1066C:  MOVLW  00
1066E:  ADDWFC x11,W
10670:  MOVWF  03
10672:  MOVF   01,W
10674:  ADDLW  22
10676:  MOVWF  FE9
10678:  MOVLW  01
1067A:  ADDWFC 03,W
1067C:  MOVWF  FEA
1067E:  MOVFF  FEF,1A7
10682:  MOVFF  FEC,1A8
10686:  MOVFF  FEC,1A9
1068A:  MOVFF  FEC,1AA
1068E:  MOVF   FED,F
10690:  MOVF   FED,F
10692:  MOVF   FED,F
10694:  MOVLB  0
....................     }else if(smf_queue_ptr->source_type == SOURCE_MISF_MANUAL)
10696:  GOTO   10704
1069A:  MOVLW  03
1069C:  MOVLB  1
1069E:  ADDWF  xA1,W
106A0:  MOVWF  01
106A2:  MOVLW  00
106A4:  ADDWFC xA2,W
106A6:  MOVWF  03
106A8:  MOVF   01,W
106AA:  MOVWF  FE9
106AC:  MOVFF  03,FEA
106B0:  BTFSC  FEF.0
106B2:  BRA    106BA
106B4:  MOVLB  0
106B6:  GOTO   10704
106BA:  MOVLB  0
....................     {
....................         misf_write_src = smf_queue_ptr->misf_start_addr;
106BC:  MOVLW  04
106BE:  MOVLB  1
106C0:  ADDWF  xA1,W
106C2:  MOVWF  FE9
106C4:  MOVLW  00
106C6:  ADDWFC xA2,W
106C8:  MOVWF  FEA
106CA:  MOVFF  FEF,1A3
106CE:  MOVFF  FEC,1A4
106D2:  MOVFF  FEC,1A5
106D6:  MOVFF  FEC,1A6
106DA:  MOVF   FED,F
106DC:  MOVF   FED,F
106DE:  MOVF   FED,F
....................         misf_write_size = smf_queue_ptr->misf_size;
106E0:  MOVLW  08
106E2:  ADDWF  xA1,W
106E4:  MOVWF  FE9
106E6:  MOVLW  00
106E8:  ADDWFC xA2,W
106EA:  MOVWF  FEA
106EC:  MOVFF  FEF,1A7
106F0:  MOVFF  FEC,1A8
106F4:  MOVFF  FEC,1A9
106F8:  MOVFF  FEC,1AA
106FC:  MOVF   FED,F
106FE:  MOVF   FED,F
10700:  MOVF   FED,F
10702:  MOVLB  0
....................     }
.................... 
....................     unsigned int32 smf_header_address_start;
....................     unsigned int32 smf_data_address_start;
....................     unsigned int32 smf_data_address_end;
....................     unsigned int32 misf_address_start = MISF_ADDRESS_TABLE[smf_queue_ptr->mission_id].start;
....................     unsigned int32 misf_address_end   = MISF_ADDRESS_TABLE[smf_queue_ptr->mission_id].end;
10704:  MOVLB  1
10706:  MOVF   xA1,W
10708:  MOVWF  FE9
1070A:  MOVF   xA2,W
1070C:  MOVWF  FEA
1070E:  MOVF   FEF,W
10710:  MULLW  0C
10712:  MOVF   FF3,W
10714:  MOVLB  2
10716:  CLRF   x11
10718:  MOVWF  x10
1071A:  MOVFF  211,03
1071E:  MOVF   x10,W
10720:  MOVLB  0
10722:  CALL   00E6
10726:  MOVWF  00
10728:  TBLRD*+
1072A:  MOVFF  FF5,01
1072E:  TBLRD*+
10730:  MOVFF  FF5,02
10734:  TBLRD*+
10736:  MOVFF  FF5,03
1073A:  MOVFF  03,1BE
1073E:  MOVFF  02,1BD
10742:  MOVFF  01,1BC
10746:  MOVFF  00,1BB
1074A:  MOVLB  1
1074C:  MOVF   xA1,W
1074E:  MOVWF  FE9
10750:  MOVF   xA2,W
10752:  MOVWF  FEA
10754:  MOVF   FEF,W
10756:  MULLW  0C
10758:  MOVF   FF3,W
1075A:  MOVLB  2
1075C:  CLRF   x13
1075E:  MOVWF  x12
10760:  MOVLW  04
10762:  ADDWF  x12,W
10764:  MOVWF  01
10766:  MOVLW  00
10768:  ADDWFC x13,W
1076A:  MOVWF  03
1076C:  MOVF   01,W
1076E:  MOVLB  0
10770:  CALL   00E6
10774:  MOVWF  00
10776:  TBLRD*+
10778:  MOVFF  FF5,01
1077C:  TBLRD*+
1077E:  MOVFF  FF5,02
10782:  TBLRD*+
10784:  MOVFF  FF5,03
10788:  MOVFF  03,1C2
1078C:  MOVFF  02,1C1
10790:  MOVFF  01,1C0
10794:  MOVFF  00,1BF
.................... 
....................     smf_update_flag[smf_queue_ptr->mission_id] = 1;
10798:  MOVLB  1
1079A:  MOVF   xA1,W
1079C:  MOVWF  FE9
1079E:  MOVF   xA2,W
107A0:  MOVWF  FEA
107A2:  MOVFF  FEA,211
107A6:  MOVFF  FE9,210
107AA:  MOVFF  FEF,B08
107AE:  MOVLW  01
107B0:  MOVLB  B
107B2:  MOVWF  x09
107B4:  MOVLW  01
107B6:  MOVWF  x0B
107B8:  MOVLW  7A
107BA:  MOVWF  x0A
107BC:  MOVLB  0
107BE:  CALL   2ABA
107C2:  MOVFF  211,FEA
107C6:  MOVFF  210,FE9
....................     switch ( smf_queue_ptr->mission_id )
107CA:  MOVLB  1
107CC:  MOVF   xA1,W
107CE:  MOVWF  FE9
107D0:  MOVF   xA2,W
107D2:  MOVWF  FEA
107D4:  MOVF   FEF,W
107D6:  XORLW  00
107D8:  MOVLB  0
107DA:  BTFSC  FD8.2
107DC:  GOTO   10814
107E0:  XORLW  01
107E2:  BTFSC  FD8.2
107E4:  GOTO   10856
107E8:  XORLW  03
107EA:  BTFSC  FD8.2
107EC:  GOTO   10898
107F0:  XORLW  01
107F2:  BTFSC  FD8.2
107F4:  GOTO   108DA
107F8:  XORLW  07
107FA:  BTFSC  FD8.2
107FC:  GOTO   1091C
10800:  XORLW  01
10802:  BTFSC  FD8.2
10804:  GOTO   1095E
10808:  XORLW  03
1080A:  BTFSC  FD8.2
1080C:  GOTO   109A0
10810:  GOTO   109E2
....................     {
....................         case CIGS_DATA_TABLE:
....................             fprintf(PC, "FLASH ID: CIGS_DATA_TABLE\r\n");
10814:  MOVLW  D4
10816:  MOVWF  FF6
10818:  MOVLW  08
1081A:  MOVWF  FF7
1081C:  MOVLW  00
1081E:  MOVWF  FF8
10820:  CALL   22DC
....................             smf_header_address_start = SMF_DATA_TABLE_HEADER_START_ADDRESS;
10824:  MOVLW  07
10826:  MOVLB  1
10828:  MOVWF  xB2
1082A:  MOVLW  28
1082C:  MOVWF  xB1
1082E:  MOVLW  40
10830:  MOVWF  xB0
10832:  CLRF   xAF
....................             smf_data_address_start = SMF_DATA_TABLE_DATA_START_ADDRESS;
10834:  MOVLW  07
10836:  MOVWF  xB6
10838:  MOVLW  28
1083A:  MOVWF  xB5
1083C:  MOVLW  50
1083E:  MOVWF  xB4
10840:  CLRF   xB3
....................             smf_data_address_end = SMF_DATA_TABLE_DATA_END_ADDRESS;
10842:  MOVLW  07
10844:  MOVWF  xBA
10846:  MOVLW  28
10848:  MOVWF  xB9
1084A:  MOVLW  5F
1084C:  MOVWF  xB8
1084E:  SETF   xB7
....................             break;
10850:  MOVLB  0
10852:  GOTO   10A38
....................         case CIGS_PICLOG_DATA:
....................             fprintf(PC, "FLASH ID: CIGS_PICLOG_DATA\r\n");
10856:  MOVLW  F0
10858:  MOVWF  FF6
1085A:  MOVLW  08
1085C:  MOVWF  FF7
1085E:  MOVLW  00
10860:  MOVWF  FF8
10862:  CALL   22DC
....................             smf_header_address_start = SMF_PICLOG_HEADER_START_ADDRESS;
10866:  MOVLW  07
10868:  MOVLB  1
1086A:  MOVWF  xB2
1086C:  MOVLW  28
1086E:  MOVWF  xB1
10870:  MOVLW  60
10872:  MOVWF  xB0
10874:  CLRF   xAF
....................             smf_data_address_start = SMF_PICLOG_DATA_START_ADDRESS;
10876:  MOVLW  07
10878:  MOVWF  xB6
1087A:  MOVLW  28
1087C:  MOVWF  xB5
1087E:  MOVLW  70
10880:  MOVWF  xB4
10882:  CLRF   xB3
....................             smf_data_address_end = SMF_PICLOG_DATA_END_ADDRESS;
10884:  MOVLW  07
10886:  MOVWF  xBA
10888:  MOVLW  29
1088A:  MOVWF  xB9
1088C:  MOVLW  6F
1088E:  MOVWF  xB8
10890:  SETF   xB7
....................             break;
10892:  MOVLB  0
10894:  GOTO   10A38
....................         case CIGS_ENVIRO_DATA:
....................             fprintf(PC, "FLASH ID: CIGS_ENVIRO_DATA\r\n");
10898:  MOVLW  0E
1089A:  MOVWF  FF6
1089C:  MOVLW  09
1089E:  MOVWF  FF7
108A0:  MOVLW  00
108A2:  MOVWF  FF8
108A4:  CALL   22DC
....................             smf_header_address_start = SMF_ENVIRO_HEADER_START_ADDRESS;
108A8:  MOVLW  07
108AA:  MOVLB  1
108AC:  MOVWF  xB2
108AE:  MOVLW  29
108B0:  MOVWF  xB1
108B2:  MOVLW  70
108B4:  MOVWF  xB0
108B6:  CLRF   xAF
....................             smf_data_address_start = SMF_ENVIRO_DATA_START_ADDRESS;
108B8:  MOVLW  07
108BA:  MOVWF  xB6
108BC:  MOVLW  29
108BE:  MOVWF  xB5
108C0:  MOVLW  80
108C2:  MOVWF  xB4
108C4:  CLRF   xB3
....................             smf_data_address_end = SMF_ENVIRO_DATA_END_ADDRESS;
108C6:  MOVLW  07
108C8:  MOVWF  xBA
108CA:  MOVLW  33
108CC:  MOVWF  xB9
108CE:  MOVLW  7F
108D0:  MOVWF  xB8
108D2:  SETF   xB7
....................             break;
108D4:  MOVLB  0
108D6:  GOTO   10A38
....................         case CIGS_IV1_HEADER:
....................             fprintf(PC, "FLASH ID: CIGS_IV1_HEADER\r\n");
108DA:  MOVLW  2C
108DC:  MOVWF  FF6
108DE:  MOVLW  09
108E0:  MOVWF  FF7
108E2:  MOVLW  00
108E4:  MOVWF  FF8
108E6:  CALL   22DC
....................             smf_header_address_start = SMF_IV1_HEADER_HEADER_START_ADDRESS;
108EA:  MOVLW  07
108EC:  MOVLB  1
108EE:  MOVWF  xB2
108F0:  MOVLW  33
108F2:  MOVWF  xB1
108F4:  MOVLW  80
108F6:  MOVWF  xB0
108F8:  CLRF   xAF
....................             smf_data_address_start = SMF_IV1_HEADER_DATA_START_ADDRESS;
108FA:  MOVLW  07
108FC:  MOVWF  xB6
108FE:  MOVLW  33
10900:  MOVWF  xB5
10902:  MOVLW  90
10904:  MOVWF  xB4
10906:  CLRF   xB3
....................             smf_data_address_end = SMF_IV1_HEADER_DATA_END_ADDRESS;
10908:  MOVLW  07
1090A:  MOVWF  xBA
1090C:  MOVLW  3D
1090E:  MOVWF  xB9
10910:  MOVLW  8F
10912:  MOVWF  xB8
10914:  SETF   xB7
....................             break;
10916:  MOVLB  0
10918:  GOTO   10A38
....................         case CIGS_IV1_DATA:
....................             fprintf(PC, "FLASH ID: CIGS_IV1_DATA\r\n");
1091C:  MOVLW  48
1091E:  MOVWF  FF6
10920:  MOVLW  09
10922:  MOVWF  FF7
10924:  MOVLW  00
10926:  MOVWF  FF8
10928:  CALL   22DC
....................             smf_header_address_start = SMF_IV1_DATA_HEADER_START_ADDRESS;
1092C:  MOVLW  07
1092E:  MOVLB  1
10930:  MOVWF  xB2
10932:  MOVLW  3D
10934:  MOVWF  xB1
10936:  MOVLW  90
10938:  MOVWF  xB0
1093A:  CLRF   xAF
....................             smf_data_address_start = SMF_IV1_DATA_DATA_START_ADDRESS;
1093C:  MOVLW  07
1093E:  MOVWF  xB6
10940:  MOVLW  3D
10942:  MOVWF  xB5
10944:  MOVLW  A0
10946:  MOVWF  xB4
10948:  CLRF   xB3
....................             smf_data_address_end = SMF_IV1_DATA_DATA_END_ADDRESS;
1094A:  MOVLW  07
1094C:  MOVWF  xBA
1094E:  MOVLW  7D
10950:  MOVWF  xB9
10952:  MOVLW  9F
10954:  MOVWF  xB8
10956:  SETF   xB7
....................             break;
10958:  MOVLB  0
1095A:  GOTO   10A38
....................         case CIGS_IV2_HEADER:
....................             fprintf(PC, "FLASH ID: CIGS_IV2_HEADER\r\n");
1095E:  MOVLW  62
10960:  MOVWF  FF6
10962:  MOVLW  09
10964:  MOVWF  FF7
10966:  MOVLW  00
10968:  MOVWF  FF8
1096A:  CALL   22DC
....................             smf_header_address_start = SMF_IV2_HEADER_HEADER_START_ADDRESS;
1096E:  MOVLW  07
10970:  MOVLB  1
10972:  MOVWF  xB2
10974:  MOVLW  7D
10976:  MOVWF  xB1
10978:  MOVLW  A0
1097A:  MOVWF  xB0
1097C:  CLRF   xAF
....................             smf_data_address_start = SMF_IV2_HEADER_DATA_START_ADDRESS;
1097E:  MOVLW  07
10980:  MOVWF  xB6
10982:  MOVLW  7D
10984:  MOVWF  xB5
10986:  MOVLW  B0
10988:  MOVWF  xB4
1098A:  CLRF   xB3
....................             smf_data_address_end = SMF_IV2_HEADER_DATA_END_ADDRESS;
1098C:  MOVLW  07
1098E:  MOVWF  xBA
10990:  MOVLW  87
10992:  MOVWF  xB9
10994:  MOVLW  AF
10996:  MOVWF  xB8
10998:  SETF   xB7
....................             break;
1099A:  MOVLB  0
1099C:  GOTO   10A38
....................         case CIGS_IV2_DATA:
....................             fprintf(PC, "FLASH ID: CIGS_IV2_DATA\r\n");
109A0:  MOVLW  7E
109A2:  MOVWF  FF6
109A4:  MOVLW  09
109A6:  MOVWF  FF7
109A8:  MOVLW  00
109AA:  MOVWF  FF8
109AC:  CALL   22DC
....................             smf_header_address_start = SMF_IV2_DATA_HEADER_START_ADDRESS;
109B0:  MOVLW  07
109B2:  MOVLB  1
109B4:  MOVWF  xB2
109B6:  MOVLW  87
109B8:  MOVWF  xB1
109BA:  MOVLW  B0
109BC:  MOVWF  xB0
109BE:  CLRF   xAF
....................             smf_data_address_start = SMF_IV2_DATA_DATA_START_ADDRESS;
109C0:  MOVLW  07
109C2:  MOVWF  xB6
109C4:  MOVLW  87
109C6:  MOVWF  xB5
109C8:  MOVLW  C0
109CA:  MOVWF  xB4
109CC:  CLRF   xB3
....................             smf_data_address_end = SMF_IV2_DATA_DATA_END_ADDRESS;
109CE:  MOVLW  07
109D0:  MOVWF  xBA
109D2:  MOVLW  C7
109D4:  MOVWF  xB9
109D6:  MOVLW  BF
109D8:  MOVWF  xB8
109DA:  SETF   xB7
....................             break;
109DC:  MOVLB  0
109DE:  GOTO   10A38
....................         default:
....................             fprintf(PC, "Error: Invalid mission ID %d\r\n", smf_queue_ptr->mission_id);
109E2:  MOVLB  1
109E4:  MOVF   xA1,W
109E6:  MOVWF  FE9
109E8:  MOVF   xA2,W
109EA:  MOVWF  FEA
109EC:  MOVFF  FEF,210
109F0:  MOVLW  98
109F2:  MOVWF  FF6
109F4:  MOVLW  09
109F6:  MOVWF  FF7
109F8:  MOVLW  00
109FA:  MOVWF  FF8
109FC:  MOVLW  1A
109FE:  MOVLB  9
10A00:  MOVWF  xC2
10A02:  MOVLB  0
10A04:  CALL   2312
10A08:  MOVFF  210,211
10A0C:  MOVLW  18
10A0E:  MOVLB  2
10A10:  MOVWF  x12
10A12:  MOVLB  0
10A14:  GOTO   10000
10A18:  MOVLW  0D
10A1A:  BTFSS  FA6.6
10A1C:  GOTO   10A1A
10A20:  MOVLB  E
10A22:  MOVWF  xF9
10A24:  MOVLW  0A
10A26:  MOVLB  0
10A28:  BTFSS  FA6.6
10A2A:  GOTO   10A28
10A2E:  MOVLB  E
10A30:  MOVWF  xF9
....................             return;
10A32:  MOVLB  0
10A34:  GOTO   113A4
....................     }
.................... 
....................     // Print MISF ADDRESS
....................     fprintf(PC,"[MISF ADDRESS]\r\n");
10A38:  MOVLW  B8
10A3A:  MOVWF  FF6
10A3C:  MOVLW  09
10A3E:  MOVWF  FF7
10A40:  MOVLW  00
10A42:  MOVWF  FF8
10A44:  CALL   22DC
....................     fprintf(PC, "\tParam\tData\r\n");
10A48:  MOVLW  CA
10A4A:  MOVWF  FF6
10A4C:  MOVLW  09
10A4E:  MOVWF  FF7
10A50:  MOVLW  00
10A52:  MOVWF  FF8
10A54:  CALL   22DC
....................     fprintf(PC, "\t-----\t----------\r\n");
10A58:  MOVLW  D8
10A5A:  MOVWF  FF6
10A5C:  MOVLW  09
10A5E:  MOVWF  FF7
10A60:  MOVLW  00
10A62:  MOVWF  FF8
10A64:  CALL   22DC
....................     fprintf(PC, "\tSTART\t0x%08LX\r\n", misf_address_start);
10A68:  MOVLW  EC
10A6A:  MOVWF  FF6
10A6C:  MOVLW  09
10A6E:  MOVWF  FF7
10A70:  MOVLW  00
10A72:  MOVWF  FF8
10A74:  MOVLW  09
10A76:  MOVLB  9
10A78:  MOVWF  xC2
10A7A:  MOVLB  0
10A7C:  CALL   2312
10A80:  MOVFF  1BE,9E8
10A84:  MOVLW  37
10A86:  MOVLB  9
10A88:  MOVWF  xE9
10A8A:  MOVLB  0
10A8C:  CALL   2542
10A90:  MOVFF  1BD,9E8
10A94:  MOVLW  37
10A96:  MOVLB  9
10A98:  MOVWF  xE9
10A9A:  MOVLB  0
10A9C:  CALL   2542
10AA0:  MOVFF  1BC,9E8
10AA4:  MOVLW  37
10AA6:  MOVLB  9
10AA8:  MOVWF  xE9
10AAA:  MOVLB  0
10AAC:  CALL   2542
10AB0:  MOVFF  1BB,9E8
10AB4:  MOVLW  37
10AB6:  MOVLB  9
10AB8:  MOVWF  xE9
10ABA:  MOVLB  0
10ABC:  CALL   2542
10AC0:  MOVLW  0D
10AC2:  BTFSS  FA6.6
10AC4:  GOTO   10AC2
10AC8:  MOVLB  E
10ACA:  MOVWF  xF9
10ACC:  MOVLW  0A
10ACE:  MOVLB  0
10AD0:  BTFSS  FA6.6
10AD2:  GOTO   10AD0
10AD6:  MOVLB  E
10AD8:  MOVWF  xF9
....................     fprintf(PC, "\tEND\t0x%08LX\r\n", misf_address_end);
10ADA:  MOVLW  FE
10ADC:  MOVWF  FF6
10ADE:  MOVLW  09
10AE0:  MOVWF  FF7
10AE2:  MOVLW  00
10AE4:  MOVWF  FF8
10AE6:  MOVLW  07
10AE8:  MOVLB  9
10AEA:  MOVWF  xC2
10AEC:  MOVLB  0
10AEE:  CALL   2312
10AF2:  MOVFF  1C2,9E8
10AF6:  MOVLW  37
10AF8:  MOVLB  9
10AFA:  MOVWF  xE9
10AFC:  MOVLB  0
10AFE:  CALL   2542
10B02:  MOVFF  1C1,9E8
10B06:  MOVLW  37
10B08:  MOVLB  9
10B0A:  MOVWF  xE9
10B0C:  MOVLB  0
10B0E:  CALL   2542
10B12:  MOVFF  1C0,9E8
10B16:  MOVLW  37
10B18:  MOVLB  9
10B1A:  MOVWF  xE9
10B1C:  MOVLB  0
10B1E:  CALL   2542
10B22:  MOVFF  1BF,9E8
10B26:  MOVLW  37
10B28:  MOVLB  9
10B2A:  MOVWF  xE9
10B2C:  MOVLB  0
10B2E:  CALL   2542
10B32:  MOVLW  0D
10B34:  BTFSS  FA6.6
10B36:  GOTO   10B34
10B3A:  MOVLB  E
10B3C:  MOVWF  xF9
10B3E:  MOVLW  0A
10B40:  MOVLB  0
10B42:  BTFSS  FA6.6
10B44:  GOTO   10B42
10B48:  MOVLB  E
10B4A:  MOVWF  xF9
....................     fprintf(PC, "\tSRC\t0x%08LX\r\n", misf_write_src);
10B4C:  MOVLW  0E
10B4E:  MOVWF  FF6
10B50:  MOVLW  0A
10B52:  MOVWF  FF7
10B54:  MOVLW  00
10B56:  MOVWF  FF8
10B58:  MOVLW  07
10B5A:  MOVLB  9
10B5C:  MOVWF  xC2
10B5E:  MOVLB  0
10B60:  CALL   2312
10B64:  MOVFF  1A6,9E8
10B68:  MOVLW  37
10B6A:  MOVLB  9
10B6C:  MOVWF  xE9
10B6E:  MOVLB  0
10B70:  CALL   2542
10B74:  MOVFF  1A5,9E8
10B78:  MOVLW  37
10B7A:  MOVLB  9
10B7C:  MOVWF  xE9
10B7E:  MOVLB  0
10B80:  CALL   2542
10B84:  MOVFF  1A4,9E8
10B88:  MOVLW  37
10B8A:  MOVLB  9
10B8C:  MOVWF  xE9
10B8E:  MOVLB  0
10B90:  CALL   2542
10B94:  MOVFF  1A3,9E8
10B98:  MOVLW  37
10B9A:  MOVLB  9
10B9C:  MOVWF  xE9
10B9E:  MOVLB  0
10BA0:  CALL   2542
10BA4:  MOVLW  0D
10BA6:  BTFSS  FA6.6
10BA8:  GOTO   10BA6
10BAC:  MOVLB  E
10BAE:  MOVWF  xF9
10BB0:  MOVLW  0A
10BB2:  MOVLB  0
10BB4:  BTFSS  FA6.6
10BB6:  GOTO   10BB4
10BBA:  MOVLB  E
10BBC:  MOVWF  xF9
....................     fprintf(PC, "\tSIZE\t0x%08LX\r\n", misf_write_size);
10BBE:  MOVLW  1E
10BC0:  MOVWF  FF6
10BC2:  MOVLW  0A
10BC4:  MOVWF  FF7
10BC6:  MOVLW  00
10BC8:  MOVWF  FF8
10BCA:  MOVLW  08
10BCC:  MOVLB  9
10BCE:  MOVWF  xC2
10BD0:  MOVLB  0
10BD2:  CALL   2312
10BD6:  MOVFF  1AA,9E8
10BDA:  MOVLW  37
10BDC:  MOVLB  9
10BDE:  MOVWF  xE9
10BE0:  MOVLB  0
10BE2:  CALL   2542
10BE6:  MOVFF  1A9,9E8
10BEA:  MOVLW  37
10BEC:  MOVLB  9
10BEE:  MOVWF  xE9
10BF0:  MOVLB  0
10BF2:  CALL   2542
10BF6:  MOVFF  1A8,9E8
10BFA:  MOVLW  37
10BFC:  MOVLB  9
10BFE:  MOVWF  xE9
10C00:  MOVLB  0
10C02:  CALL   2542
10C06:  MOVFF  1A7,9E8
10C0A:  MOVLW  37
10C0C:  MOVLB  9
10C0E:  MOVWF  xE9
10C10:  MOVLB  0
10C12:  CALL   2542
10C16:  MOVLW  0D
10C18:  BTFSS  FA6.6
10C1A:  GOTO   10C18
10C1E:  MOVLB  E
10C20:  MOVWF  xF9
10C22:  MOVLW  0A
10C24:  MOVLB  0
10C26:  BTFSS  FA6.6
10C28:  GOTO   10C26
10C2C:  MOVLB  E
10C2E:  MOVWF  xF9
....................     fprintf(PC, "\t-----\t----------\r\n");
10C30:  MOVLW  2E
10C32:  MOVWF  FF6
10C34:  MOVLW  0A
10C36:  MOVWF  FF7
10C38:  MOVLW  00
10C3A:  MOVWF  FF8
10C3C:  MOVLB  0
10C3E:  CALL   22DC
.................... 
....................     // Print SMF ADDRESS
....................     fprintf(PC,"[SMF ADDRESS]\r\n");
10C42:  MOVLW  42
10C44:  MOVWF  FF6
10C46:  MOVLW  0A
10C48:  MOVWF  FF7
10C4A:  MOVLW  00
10C4C:  MOVWF  FF8
10C4E:  CALL   22DC
....................     fprintf(PC, "\tParam\tData\r\n");
10C52:  MOVLW  52
10C54:  MOVWF  FF6
10C56:  MOVLW  0A
10C58:  MOVWF  FF7
10C5A:  MOVLW  00
10C5C:  MOVWF  FF8
10C5E:  CALL   22DC
....................     fprintf(PC, "\t-----\t----------\r\n");
10C62:  MOVLW  60
10C64:  MOVWF  FF6
10C66:  MOVLW  0A
10C68:  MOVWF  FF7
10C6A:  MOVLW  00
10C6C:  MOVWF  FF8
10C6E:  CALL   22DC
....................     fprintf(PC, "\tSTART\t0x%08LX\r\n", smf_data_address_start);
10C72:  MOVLW  74
10C74:  MOVWF  FF6
10C76:  MOVLW  0A
10C78:  MOVWF  FF7
10C7A:  MOVLW  00
10C7C:  MOVWF  FF8
10C7E:  MOVLW  09
10C80:  MOVLB  9
10C82:  MOVWF  xC2
10C84:  MOVLB  0
10C86:  CALL   2312
10C8A:  MOVFF  1B6,9E8
10C8E:  MOVLW  37
10C90:  MOVLB  9
10C92:  MOVWF  xE9
10C94:  MOVLB  0
10C96:  CALL   2542
10C9A:  MOVFF  1B5,9E8
10C9E:  MOVLW  37
10CA0:  MOVLB  9
10CA2:  MOVWF  xE9
10CA4:  MOVLB  0
10CA6:  CALL   2542
10CAA:  MOVFF  1B4,9E8
10CAE:  MOVLW  37
10CB0:  MOVLB  9
10CB2:  MOVWF  xE9
10CB4:  MOVLB  0
10CB6:  CALL   2542
10CBA:  MOVFF  1B3,9E8
10CBE:  MOVLW  37
10CC0:  MOVLB  9
10CC2:  MOVWF  xE9
10CC4:  MOVLB  0
10CC6:  CALL   2542
10CCA:  MOVLW  0D
10CCC:  BTFSS  FA6.6
10CCE:  GOTO   10CCC
10CD2:  MOVLB  E
10CD4:  MOVWF  xF9
10CD6:  MOVLW  0A
10CD8:  MOVLB  0
10CDA:  BTFSS  FA6.6
10CDC:  GOTO   10CDA
10CE0:  MOVLB  E
10CE2:  MOVWF  xF9
....................     fprintf(PC, "\tEND\t0x%08LX\r\n", smf_data_address_end);
10CE4:  MOVLW  86
10CE6:  MOVWF  FF6
10CE8:  MOVLW  0A
10CEA:  MOVWF  FF7
10CEC:  MOVLW  00
10CEE:  MOVWF  FF8
10CF0:  MOVLW  07
10CF2:  MOVLB  9
10CF4:  MOVWF  xC2
10CF6:  MOVLB  0
10CF8:  CALL   2312
10CFC:  MOVFF  1BA,9E8
10D00:  MOVLW  37
10D02:  MOVLB  9
10D04:  MOVWF  xE9
10D06:  MOVLB  0
10D08:  CALL   2542
10D0C:  MOVFF  1B9,9E8
10D10:  MOVLW  37
10D12:  MOVLB  9
10D14:  MOVWF  xE9
10D16:  MOVLB  0
10D18:  CALL   2542
10D1C:  MOVFF  1B8,9E8
10D20:  MOVLW  37
10D22:  MOVLB  9
10D24:  MOVWF  xE9
10D26:  MOVLB  0
10D28:  CALL   2542
10D2C:  MOVFF  1B7,9E8
10D30:  MOVLW  37
10D32:  MOVLB  9
10D34:  MOVWF  xE9
10D36:  MOVLB  0
10D38:  CALL   2542
10D3C:  MOVLW  0D
10D3E:  BTFSS  FA6.6
10D40:  GOTO   10D3E
10D44:  MOVLB  E
10D46:  MOVWF  xF9
10D48:  MOVLW  0A
10D4A:  MOVLB  0
10D4C:  BTFSS  FA6.6
10D4E:  GOTO   10D4C
10D52:  MOVLB  E
10D54:  MOVWF  xF9
....................     fprintf(PC, "\t-----\t----------\r\n");
10D56:  MOVLW  96
10D58:  MOVWF  FF6
10D5A:  MOVLW  0A
10D5C:  MOVWF  FF7
10D5E:  MOVLW  00
10D60:  MOVWF  FF8
10D62:  MOVLB  0
10D64:  CALL   22DC
.................... 
.................... 
....................     // Erase Area
....................     fprintf(PC, "ERASE SMF AREA\r\n");
10D68:  MOVLW  AA
10D6A:  MOVWF  FF6
10D6C:  MOVLW  0A
10D6E:  MOVWF  FF7
10D70:  MOVLW  00
10D72:  MOVWF  FF8
10D74:  CALL   22DC
....................     for ( unsigned int32 address = smf_data_address_start; address < smf_data_address_end; address += SUBSECTOR_SIZE )
10D78:  MOVFF  1B6,1C6
10D7C:  MOVFF  1B5,1C5
10D80:  MOVFF  1B4,1C4
10D84:  MOVFF  1B3,1C3
10D88:  MOVLB  1
10D8A:  MOVF   xC6,W
10D8C:  SUBWF  xBA,W
10D8E:  BTFSC  FD8.0
10D90:  BRA    10D98
10D92:  MOVLB  0
10D94:  GOTO   10E1A
10D98:  MOVLB  0
10D9A:  BTFSS  FD8.2
10D9C:  GOTO   10DE2
10DA0:  MOVLB  1
10DA2:  MOVF   xC5,W
10DA4:  SUBWF  xB9,W
10DA6:  BTFSC  FD8.0
10DA8:  BRA    10DB0
10DAA:  MOVLB  0
10DAC:  GOTO   10E1A
10DB0:  MOVLB  0
10DB2:  BTFSS  FD8.2
10DB4:  GOTO   10DE2
10DB8:  MOVLB  1
10DBA:  MOVF   xC4,W
10DBC:  SUBWF  xB8,W
10DBE:  BTFSC  FD8.0
10DC0:  BRA    10DC8
10DC2:  MOVLB  0
10DC4:  GOTO   10E1A
10DC8:  MOVLB  0
10DCA:  BTFSS  FD8.2
10DCC:  GOTO   10DE2
10DD0:  MOVLB  1
10DD2:  MOVF   xB7,W
10DD4:  SUBWF  xC3,W
10DD6:  BTFSS  FD8.0
10DD8:  BRA    10DE0
10DDA:  MOVLB  0
10DDC:  GOTO   10E1A
10DE0:  MOVLB  0
....................     {
....................         subsector_4kByte_erase(smf, address);
10DE2:  MOVFF  119,A92
10DE6:  MOVFF  118,A91
10DEA:  MOVFF  117,A90
10DEE:  MOVFF  116,A8F
10DF2:  MOVFF  1C6,A96
10DF6:  MOVFF  1C5,A95
10DFA:  MOVFF  1C4,A94
10DFE:  MOVFF  1C3,A93
10E02:  CALL   4D38
10E06:  MOVLW  10
10E08:  MOVLB  1
10E0A:  ADDWF  xC4,F
10E0C:  MOVLW  00
10E0E:  ADDWFC xC5,F
10E10:  MOVLW  00
10E12:  ADDWFC xC6,F
10E14:  MOVLB  0
10E16:  GOTO   10D88
....................     }
....................     fprintf(PC, "\tERASE SMF AREA DONE\r\n");
10E1A:  MOVLW  BC
10E1C:  MOVWF  FF6
10E1E:  MOVLW  0A
10E20:  MOVWF  FF7
10E22:  MOVLW  00
10E24:  MOVWF  FF8
10E26:  CALL   22DC
.................... 
....................     // Write Data
....................     unsigned int8 buffer[PACKET_SIZE];
....................     unsigned int32 smf_write_address = smf_data_address_start;
....................     unsigned int32 misf_read_address = misf_write_src;
10E2A:  MOVFF  1B6,20A
10E2E:  MOVFF  1B5,209
10E32:  MOVFF  1B4,208
10E36:  MOVFF  1B3,207
10E3A:  MOVFF  1A6,20E
10E3E:  MOVFF  1A5,20D
10E42:  MOVFF  1A4,20C
10E46:  MOVFF  1A3,20B
....................     fprintf(PC, "WRITE DATA TO SMF\r\n");
10E4A:  MOVLW  D4
10E4C:  MOVWF  FF6
10E4E:  MOVLW  0A
10E50:  MOVWF  FF7
10E52:  MOVLW  00
10E54:  MOVWF  FF8
10E56:  CALL   22DC
....................     while (misf_write_size > 0)
10E5A:  MOVLB  1
10E5C:  MOVF   xA7,F
10E5E:  BTFSC  FD8.2
10E60:  BRA    10E68
10E62:  MOVLB  0
10E64:  GOTO   10E9A
10E68:  MOVLB  0
10E6A:  MOVLB  1
10E6C:  MOVF   xA8,F
10E6E:  BTFSC  FD8.2
10E70:  BRA    10E78
10E72:  MOVLB  0
10E74:  GOTO   10E9A
10E78:  MOVLB  0
10E7A:  MOVLB  1
10E7C:  MOVF   xA9,F
10E7E:  BTFSC  FD8.2
10E80:  BRA    10E88
10E82:  MOVLB  0
10E84:  GOTO   10E9A
10E88:  MOVLB  0
10E8A:  MOVLB  1
10E8C:  MOVF   xAA,F
10E8E:  BTFSS  FD8.2
10E90:  BRA    10E98
10E92:  MOVLB  0
10E94:  GOTO   111C2
10E98:  MOVLB  0
....................     {
....................         memset(buffer, 0x11, PACKET_SIZE);
10E9A:  MOVLW  01
10E9C:  MOVWF  FEA
10E9E:  MOVLW  C7
10EA0:  MOVWF  FE9
10EA2:  MOVLW  11
10EA4:  MOVWF  00
10EA6:  CLRF   02
10EA8:  MOVLW  40
10EAA:  MOVWF  01
10EAC:  CALL   234C
....................         read_data_bytes(mis_fm, misf_read_address, buffer, PACKET_SIZE);
10EB0:  MOVFF  115,AED
10EB4:  MOVFF  114,AEC
10EB8:  MOVFF  113,AEB
10EBC:  MOVFF  112,AEA
10EC0:  MOVFF  20E,AF1
10EC4:  MOVFF  20D,AF0
10EC8:  MOVFF  20C,AEF
10ECC:  MOVFF  20B,AEE
10ED0:  MOVLW  01
10ED2:  MOVLB  A
10ED4:  MOVWF  xF3
10ED6:  MOVLW  C7
10ED8:  MOVWF  xF2
10EDA:  CLRF   xF7
10EDC:  CLRF   xF6
10EDE:  CLRF   xF5
10EE0:  MOVLW  40
10EE2:  MOVWF  xF4
10EE4:  MOVLB  0
10EE6:  CALL   2ECA
....................         fprintf(PC," ");
10EEA:  MOVLW  20
10EEC:  BTFSS  FA6.6
10EEE:  GOTO   10EEC
10EF2:  MOVLB  E
10EF4:  MOVWF  xF9
....................         write_data_bytes(smf, smf_write_address, buffer, PACKET_SIZE);
10EF6:  MOVFF  119,AED
10EFA:  MOVFF  118,AEC
10EFE:  MOVFF  117,AEB
10F02:  MOVFF  116,AEA
10F06:  MOVFF  20A,AF1
10F0A:  MOVFF  209,AF0
10F0E:  MOVFF  208,AEF
10F12:  MOVFF  207,AEE
10F16:  MOVLW  01
10F18:  MOVLB  A
10F1A:  MOVWF  xF3
10F1C:  MOVLW  C7
10F1E:  MOVWF  xF2
10F20:  CLRF   xF5
10F22:  MOVLW  40
10F24:  MOVWF  xF4
10F26:  MOVLB  0
10F28:  CALL   3F34
....................         fprintf(PC,".");
10F2C:  MOVLW  2E
10F2E:  BTFSS  FA6.6
10F30:  GOTO   10F2E
10F34:  MOVLB  E
10F36:  MOVWF  xF9
....................         // counter update
....................         if (misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter >= PACKET_SIZE){
10F38:  MOVLB  1
10F3A:  MOVF   xA1,W
10F3C:  MOVWF  FE9
10F3E:  MOVF   xA2,W
10F40:  MOVWF  FEA
10F42:  MOVF   FEF,W
10F44:  MULLW  0A
10F46:  MOVF   FF3,W
10F48:  MOVLB  2
10F4A:  CLRF   x11
10F4C:  MOVWF  x10
10F4E:  MOVLW  04
10F50:  ADDWF  x10,W
10F52:  MOVWF  01
10F54:  MOVLW  00
10F56:  ADDWFC x11,W
10F58:  MOVWF  03
10F5A:  MOVF   01,W
10F5C:  ADDLW  22
10F5E:  MOVWF  FE9
10F60:  MOVLW  01
10F62:  ADDWFC 03,W
10F64:  MOVWF  FEA
10F66:  MOVFF  FEF,210
10F6A:  MOVFF  FEC,211
10F6E:  MOVFF  FEC,212
10F72:  MOVFF  FEC,213
10F76:  MOVF   FED,F
10F78:  MOVF   FED,F
10F7A:  MOVF   FED,F
10F7C:  MOVF   x13,F
10F7E:  BTFSC  FD8.2
10F80:  BRA    10F88
10F82:  MOVLB  0
10F84:  GOTO   10FBC
10F88:  MOVLB  0
10F8A:  MOVLB  2
10F8C:  MOVF   x12,F
10F8E:  BTFSC  FD8.2
10F90:  BRA    10F98
10F92:  MOVLB  0
10F94:  GOTO   10FBC
10F98:  MOVLB  0
10F9A:  MOVLB  2
10F9C:  MOVF   x11,F
10F9E:  BTFSC  FD8.2
10FA0:  BRA    10FA8
10FA2:  MOVLB  0
10FA4:  GOTO   10FBC
10FA8:  MOVLB  0
10FAA:  MOVLB  2
10FAC:  MOVF   x10,W
10FAE:  SUBLW  3F
10FB0:  BTFSS  FD8.0
10FB2:  BRA    10FBA
10FB4:  MOVLB  0
10FB6:  GOTO   11024
10FBA:  MOVLB  0
....................             misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter -= PACKET_SIZE;
10FBC:  MOVLB  1
10FBE:  MOVF   xA1,W
10FC0:  MOVWF  FE9
10FC2:  MOVF   xA2,W
10FC4:  MOVWF  FEA
10FC6:  MOVF   FEF,W
10FC8:  MULLW  0A
10FCA:  MOVF   FF3,W
10FCC:  MOVLB  2
10FCE:  CLRF   x11
10FD0:  MOVWF  x10
10FD2:  MOVLW  04
10FD4:  ADDWF  x10,W
10FD6:  MOVWF  01
10FD8:  MOVLW  00
10FDA:  ADDWFC x11,W
10FDC:  MOVWF  03
10FDE:  MOVF   01,W
10FE0:  ADDLW  22
10FE2:  MOVWF  FE9
10FE4:  MOVLW  01
10FE6:  ADDWFC 03,W
10FE8:  MOVWF  FEA
10FEA:  MOVLW  40
10FEC:  SUBWF  FEF,W
10FEE:  MOVWF  00
10FF0:  MOVLW  00
10FF2:  SUBWFB FEC,W
10FF4:  MOVWF  01
10FF6:  MOVLW  00
10FF8:  SUBWFB FEC,W
10FFA:  MOVWF  02
10FFC:  MOVLW  00
10FFE:  SUBWFB FEC,W
11000:  MOVWF  03
11002:  MOVF   FED,F
11004:  MOVF   FED,F
11006:  MOVF   FED,F
11008:  MOVFF  00,FEF
1100C:  MOVFF  01,FEC
11010:  MOVFF  02,FEC
11014:  MOVFF  03,FEC
11018:  MOVF   FED,F
1101A:  MOVF   FED,F
1101C:  MOVF   FED,F
1101E:  MOVLB  0
....................         }else{
11020:  GOTO   11136
....................             unsigned int8 add = PACKET_SIZE - misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter;
11024:  MOVLB  1
11026:  MOVF   xA1,W
11028:  MOVWF  FE9
1102A:  MOVF   xA2,W
1102C:  MOVWF  FEA
1102E:  MOVF   FEF,W
11030:  MULLW  0A
11032:  MOVF   FF3,W
11034:  MOVLB  2
11036:  CLRF   x11
11038:  MOVWF  x10
1103A:  MOVLW  04
1103C:  ADDWF  x10,W
1103E:  MOVWF  01
11040:  MOVLW  00
11042:  ADDWFC x11,W
11044:  MOVWF  03
11046:  MOVF   01,W
11048:  ADDLW  22
1104A:  MOVWF  FE9
1104C:  MOVLW  01
1104E:  ADDWFC 03,W
11050:  MOVWF  FEA
11052:  MOVFF  FEF,00
11056:  MOVFF  FEC,01
1105A:  MOVFF  FEC,02
1105E:  MOVFF  FEC,03
11062:  MOVF   FED,F
11064:  MOVF   FED,F
11066:  MOVF   FED,F
11068:  MOVLW  40
1106A:  BSF    FD8.0
1106C:  SUBFWB 00,W
1106E:  MOVWF  x0F
11070:  MOVLB  0
....................             misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter = 0;
11072:  MOVLB  1
11074:  MOVF   xA1,W
11076:  MOVWF  FE9
11078:  MOVF   xA2,W
1107A:  MOVWF  FEA
1107C:  MOVF   FEF,W
1107E:  MULLW  0A
11080:  MOVF   FF3,W
11082:  MOVLB  2
11084:  CLRF   x11
11086:  MOVWF  x10
11088:  MOVLW  04
1108A:  ADDWF  x10,W
1108C:  MOVWF  01
1108E:  MOVLW  00
11090:  ADDWFC x11,W
11092:  MOVWF  03
11094:  MOVF   01,W
11096:  ADDLW  22
11098:  MOVWF  FE9
1109A:  MOVLW  01
1109C:  ADDWFC 03,W
1109E:  MOVWF  FEA
110A0:  CLRF   FEF
110A2:  CLRF   FEC
110A4:  CLRF   FEC
110A6:  CLRF   FEC
110A8:  MOVF   FED,F
110AA:  MOVF   FED,F
110AC:  MOVF   FED,F
....................             misf_counter_table[smf_queue_ptr->mission_id].used_counter += add;
110AE:  MOVLB  1
110B0:  MOVF   xA1,W
110B2:  MOVWF  FE9
110B4:  MOVF   xA2,W
110B6:  MOVWF  FEA
110B8:  MOVF   FEF,W
110BA:  MULLW  0A
110BC:  MOVF   FF3,W
110BE:  MOVLB  2
110C0:  CLRF   x11
110C2:  MOVWF  x10
110C4:  MOVLW  22
110C6:  ADDWF  x10,W
110C8:  MOVWF  FE9
110CA:  MOVLW  01
110CC:  ADDWFC x11,W
110CE:  MOVWF  FEA
110D0:  MOVF   x0F,W
110D2:  ADDWF  FEF,W
110D4:  MOVWF  00
110D6:  MOVLW  00
110D8:  ADDWFC FEC,W
110DA:  MOVWF  01
110DC:  MOVLW  00
110DE:  ADDWFC FEC,W
110E0:  MOVWF  02
110E2:  MOVLW  00
110E4:  ADDWFC FEC,W
110E6:  MOVWF  03
110E8:  MOVF   FED,F
110EA:  MOVF   FED,F
110EC:  MOVF   FED,F
110EE:  MOVFF  00,FEF
110F2:  MOVFF  01,FEC
110F6:  MOVFF  02,FEC
110FA:  MOVFF  03,FEC
110FE:  MOVF   FED,F
11100:  MOVF   FED,F
11102:  MOVF   FED,F
....................             misf_counter_table[smf_queue_ptr->mission_id].reserve_counter1 = 0;
11104:  MOVLB  1
11106:  MOVF   xA1,W
11108:  MOVWF  FE9
1110A:  MOVF   xA2,W
1110C:  MOVWF  FEA
1110E:  MOVF   FEF,W
11110:  MULLW  0A
11112:  MOVF   FF3,W
11114:  MOVLB  2
11116:  CLRF   x11
11118:  MOVWF  x10
1111A:  MOVLW  08
1111C:  ADDWF  x10,W
1111E:  MOVWF  01
11120:  MOVLW  00
11122:  ADDWFC x11,W
11124:  MOVWF  03
11126:  MOVF   01,W
11128:  ADDLW  22
1112A:  MOVWF  FE9
1112C:  MOVLW  01
1112E:  ADDWFC 03,W
11130:  MOVWF  FEA
11132:  CLRF   FEF
11134:  MOVLB  0
....................         }
....................         misf_read_address += PACKET_SIZE;
11136:  MOVLW  40
11138:  MOVLB  2
1113A:  ADDWF  x0B,F
1113C:  MOVLW  00
1113E:  ADDWFC x0C,F
11140:  MOVLW  00
11142:  ADDWFC x0D,F
11144:  MOVLW  00
11146:  ADDWFC x0E,F
....................         smf_write_address += PACKET_SIZE;
11148:  MOVLW  40
1114A:  ADDWF  x07,F
1114C:  MOVLW  00
1114E:  ADDWFC x08,F
11150:  MOVLW  00
11152:  ADDWFC x09,F
11154:  MOVLW  00
11156:  ADDWFC x0A,F
....................         if (misf_write_size > PACKET_SIZE){
11158:  MOVLB  1
1115A:  MOVF   xAA,F
1115C:  BTFSC  FD8.2
1115E:  BRA    11166
11160:  MOVLB  0
11162:  GOTO   1119A
11166:  MOVLB  0
11168:  MOVLB  1
1116A:  MOVF   xA9,F
1116C:  BTFSC  FD8.2
1116E:  BRA    11176
11170:  MOVLB  0
11172:  GOTO   1119A
11176:  MOVLB  0
11178:  MOVLB  1
1117A:  MOVF   xA8,F
1117C:  BTFSC  FD8.2
1117E:  BRA    11186
11180:  MOVLB  0
11182:  GOTO   1119A
11186:  MOVLB  0
11188:  MOVLB  1
1118A:  MOVF   xA7,W
1118C:  SUBLW  40
1118E:  BTFSS  FD8.0
11190:  BRA    11198
11192:  MOVLB  0
11194:  GOTO   111B2
11198:  MOVLB  0
....................             misf_write_size -= PACKET_SIZE;
1119A:  MOVLW  40
1119C:  MOVLB  1
1119E:  SUBWF  xA7,F
111A0:  MOVLW  00
111A2:  SUBWFB xA8,F
111A4:  MOVLW  00
111A6:  SUBWFB xA9,F
111A8:  MOVLW  00
111AA:  SUBWFB xAA,F
111AC:  MOVLB  0
....................         }else{
111AE:  GOTO   111BE
....................             misf_write_size = 0;
111B2:  MOVLB  1
111B4:  CLRF   xAA
111B6:  CLRF   xA9
111B8:  CLRF   xA8
111BA:  CLRF   xA7
111BC:  MOVLB  0
....................         }
111BE:  GOTO   10E5A
....................         
....................     }
....................     fprintf(PC, "\r\n");
111C2:  MOVLW  0D
111C4:  BTFSS  FA6.6
111C6:  GOTO   111C4
111CA:  MOVLB  E
111CC:  MOVWF  xF9
111CE:  MOVLW  0A
111D0:  MOVLB  0
111D2:  BTFSS  FA6.6
111D4:  GOTO   111D2
111D8:  MOVLB  E
111DA:  MOVWF  xF9
.................... 
....................     // Update SMF Counter Status
....................     fprintf(PC, "UPDATE SMF COUNTER STATUS\r\n");
111DC:  MOVLW  E8
111DE:  MOVWF  FF6
111E0:  MOVLW  0A
111E2:  MOVWF  FF7
111E4:  MOVLW  00
111E6:  MOVWF  FF8
111E8:  MOVLB  0
111EA:  CALL   22DC
....................     subsector_4kByte_erase(SMF, smf_header_address_start);
111EE:  MOVFF  119,A92
111F2:  MOVFF  118,A91
111F6:  MOVFF  117,A90
111FA:  MOVFF  116,A8F
111FE:  MOVFF  1B2,A96
11202:  MOVFF  1B1,A95
11206:  MOVFF  1B0,A94
1120A:  MOVFF  1AF,A93
1120E:  CALL   4D38
....................     write_data_byte(SMF, smf_header_address_start + 0, (used_size >> 24)  & 0xFF);
11212:  MOVFF  1AE,211
11216:  MOVLB  2
11218:  CLRF   x12
1121A:  CLRF   x13
1121C:  CLRF   x14
1121E:  CLRF   x12
11220:  CLRF   x13
11222:  CLRF   x14
11224:  MOVFF  119,21C
11228:  MOVFF  118,21B
1122C:  MOVFF  117,21A
11230:  MOVFF  116,219
11234:  MOVFF  1B2,220
11238:  MOVFF  1B1,21F
1123C:  MOVFF  1B0,21E
11240:  MOVFF  1AF,21D
11244:  MOVFF  211,221
11248:  MOVLB  0
1124A:  CALL   10138
....................     write_data_byte(SMF, smf_header_address_start + 1, (used_size >> 16)  & 0xFF);
1124E:  MOVLW  01
11250:  MOVLB  1
11252:  ADDWF  xAF,W
11254:  MOVLB  2
11256:  MOVWF  x10
11258:  MOVLW  00
1125A:  MOVLB  1
1125C:  ADDWFC xB0,W
1125E:  MOVLB  2
11260:  MOVWF  x11
11262:  MOVLW  00
11264:  MOVLB  1
11266:  ADDWFC xB1,W
11268:  MOVLB  2
1126A:  MOVWF  x12
1126C:  MOVLW  00
1126E:  MOVLB  1
11270:  ADDWFC xB2,W
11272:  MOVLB  2
11274:  MOVWF  x13
11276:  MOVFF  1AD,215
1127A:  MOVFF  1AE,216
1127E:  CLRF   x17
11280:  CLRF   x18
11282:  CLRF   x16
11284:  CLRF   x17
11286:  CLRF   x18
11288:  MOVFF  119,21C
1128C:  MOVFF  118,21B
11290:  MOVFF  117,21A
11294:  MOVFF  116,219
11298:  MOVFF  213,220
1129C:  MOVFF  212,21F
112A0:  MOVFF  211,21E
112A4:  MOVFF  210,21D
112A8:  MOVFF  215,221
112AC:  MOVLB  0
112AE:  CALL   10138
....................     write_data_byte(SMF, smf_header_address_start + 2, (used_size >> 8) & 0xFF);
112B2:  MOVLW  02
112B4:  MOVLB  1
112B6:  ADDWF  xAF,W
112B8:  MOVLB  2
112BA:  MOVWF  x10
112BC:  MOVLW  00
112BE:  MOVLB  1
112C0:  ADDWFC xB0,W
112C2:  MOVLB  2
112C4:  MOVWF  x11
112C6:  MOVLW  00
112C8:  MOVLB  1
112CA:  ADDWFC xB1,W
112CC:  MOVLB  2
112CE:  MOVWF  x12
112D0:  MOVLW  00
112D2:  MOVLB  1
112D4:  ADDWFC xB2,W
112D6:  MOVLB  2
112D8:  MOVWF  x13
112DA:  MOVFF  1AC,215
112DE:  MOVFF  1AD,216
112E2:  MOVFF  1AE,217
112E6:  CLRF   x18
112E8:  CLRF   x16
112EA:  CLRF   x17
112EC:  CLRF   x18
112EE:  MOVFF  119,21C
112F2:  MOVFF  118,21B
112F6:  MOVFF  117,21A
112FA:  MOVFF  116,219
112FE:  MOVFF  213,220
11302:  MOVFF  212,21F
11306:  MOVFF  211,21E
1130A:  MOVFF  210,21D
1130E:  MOVFF  215,221
11312:  MOVLB  0
11314:  CALL   10138
....................     write_data_byte(SMF, smf_header_address_start + 3, (used_size >> 0) & 0xFF);
11318:  MOVLW  03
1131A:  MOVLB  1
1131C:  ADDWF  xAF,W
1131E:  MOVLB  2
11320:  MOVWF  x10
11322:  MOVLW  00
11324:  MOVLB  1
11326:  ADDWFC xB0,W
11328:  MOVLB  2
1132A:  MOVWF  x11
1132C:  MOVLW  00
1132E:  MOVLB  1
11330:  ADDWFC xB1,W
11332:  MOVLB  2
11334:  MOVWF  x12
11336:  MOVLW  00
11338:  MOVLB  1
1133A:  ADDWFC xB2,W
1133C:  MOVLB  2
1133E:  MOVWF  x13
11340:  MOVFF  1AE,218
11344:  MOVFF  1AD,217
11348:  MOVFF  1AC,216
1134C:  MOVFF  1AB,215
11350:  CLRF   x16
11352:  CLRF   x17
11354:  CLRF   x18
11356:  MOVFF  119,21C
1135A:  MOVFF  118,21B
1135E:  MOVFF  117,21A
11362:  MOVFF  116,219
11366:  MOVFF  213,220
1136A:  MOVFF  212,21F
1136E:  MOVFF  211,21E
11372:  MOVFF  210,21D
11376:  MOVFF  215,221
1137A:  MOVLB  0
1137C:  CALL   10138
.................... 
....................     // print_smf_counter_status(&smf_data_table);
....................     // write size area
....................     // smf_write_header(&smf_data_table);
....................     misf_update_address_area();
11380:  CALL   505C
....................     fprintf(PC, "\r\n_________End copy_data__________\r\n");
11384:  MOVLW  04
11386:  MOVWF  FF6
11388:  MOVLW  0B
1138A:  MOVWF  FF7
1138C:  MOVLW  00
1138E:  MOVWF  FF8
11390:  CALL   22DC
....................     fprintf(PC, "_______________________________\r\n\r\n");
11394:  MOVLW  2A
11396:  MOVWF  FF6
11398:  MOVLW  0B
1139A:  MOVWF  FF7
1139C:  MOVLW  00
1139E:  MOVWF  FF8
113A0:  CALL   22DC
113A4:  GOTO   124DE (RETURN)
.................... }
.................... 
.................... void smf_read(FlashOperationStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
11530:  MOVLW  4E
11532:  MOVWF  FF6
11534:  MOVLW  0B
11536:  MOVWF  FF7
11538:  MOVLW  00
1153A:  MOVWF  FF8
1153C:  CALL   22DC
....................     fprintf(PC, "___Start SMF Read____\r\n");
11540:  MOVLW  68
11542:  MOVWF  FF6
11544:  MOVLW  0B
11546:  MOVWF  FF7
11548:  MOVLW  00
1154A:  MOVWF  FF8
1154C:  CALL   22DC
.................... 
....................     int8 buffer[PACKET_SIZE];
.................... 
....................     SmfAddressStruct smf_address = get_smf_address_struct(smf_data->mission_id);
....................     unsigned int32 read_address = smf_data->misf_start_addr; // 呼び出し側でSMF内アドレスを設定する前提
....................     unsigned int32 read_size = smf_data->misf_size;
11550:  MOVLB  1
11552:  MOVF   xA1,W
11554:  MOVWF  FE9
11556:  MOVF   xA2,W
11558:  MOVWF  FEA
1155A:  MOVFF  FEF,203
1155E:  MOVFF  203,20A
11562:  MOVLB  0
11564:  CALL   113A8
11568:  MOVFF  02,03
1156C:  MOVF   01,W
1156E:  MOVWF  FE1
11570:  MOVFF  03,FE2
11574:  MOVLW  01
11576:  MOVWF  FEA
11578:  MOVLW  E3
1157A:  MOVWF  FE9
1157C:  MOVLW  08
1157E:  MOVWF  01
11580:  MOVFF  FE6,FEE
11584:  DECFSZ 01,F
11586:  GOTO   11580
1158A:  MOVLW  04
1158C:  MOVLB  1
1158E:  ADDWF  xA1,W
11590:  MOVWF  FE9
11592:  MOVLW  00
11594:  ADDWFC xA2,W
11596:  MOVWF  FEA
11598:  MOVFF  FEF,1EB
1159C:  MOVFF  FEC,1EC
115A0:  MOVFF  FEC,1ED
115A4:  MOVFF  FEC,1EE
115A8:  MOVF   FED,F
115AA:  MOVF   FED,F
115AC:  MOVF   FED,F
115AE:  MOVLW  08
115B0:  ADDWF  xA1,W
115B2:  MOVWF  FE9
115B4:  MOVLW  00
115B6:  ADDWFC xA2,W
115B8:  MOVWF  FEA
115BA:  MOVFF  FEF,1EF
115BE:  MOVFF  FEC,1F0
115C2:  MOVFF  FEC,1F1
115C6:  MOVFF  FEC,1F2
115CA:  MOVF   FED,F
115CC:  MOVF   FED,F
115CE:  MOVF   FED,F
.................... 
....................     // 境界チェック (start/end は [start_address, end_address) の半開区間想定)
....................     if (read_address < (unsigned int32)smf_address.start_address || read_address >= (unsigned int32)smf_address.end_address) {
115D0:  MOVF   xEE,W
115D2:  SUBWF  xE6,W
115D4:  BTFSC  FD8.0
115D6:  BRA    115DE
115D8:  MOVLB  0
115DA:  GOTO   11628
115DE:  MOVLB  0
115E0:  BTFSS  FD8.2
115E2:  GOTO   11682
115E6:  MOVLB  1
115E8:  MOVF   xED,W
115EA:  SUBWF  xE5,W
115EC:  BTFSC  FD8.0
115EE:  BRA    115F6
115F0:  MOVLB  0
115F2:  GOTO   11628
115F6:  MOVLB  0
115F8:  BTFSS  FD8.2
115FA:  GOTO   11682
115FE:  MOVLB  1
11600:  MOVF   xEC,W
11602:  SUBWF  xE4,W
11604:  BTFSC  FD8.0
11606:  BRA    1160E
11608:  MOVLB  0
1160A:  GOTO   11628
1160E:  MOVLB  0
11610:  BTFSS  FD8.2
11612:  GOTO   11682
11616:  MOVLB  1
11618:  MOVF   xE3,W
1161A:  SUBWF  xEB,W
1161C:  BTFSC  FD8.0
1161E:  BRA    11626
11620:  MOVLB  0
11622:  GOTO   11682
11626:  MOVLB  0
11628:  MOVLB  1
1162A:  MOVF   xEA,W
1162C:  SUBWF  xEE,W
1162E:  BTFSC  FD8.0
11630:  BRA    11638
11632:  MOVLB  0
11634:  GOTO   117A6
11638:  MOVLB  0
1163A:  BTFSS  FD8.2
1163C:  GOTO   11682
11640:  MOVLB  1
11642:  MOVF   xE9,W
11644:  SUBWF  xED,W
11646:  BTFSC  FD8.0
11648:  BRA    11650
1164A:  MOVLB  0
1164C:  GOTO   117A6
11650:  MOVLB  0
11652:  BTFSS  FD8.2
11654:  GOTO   11682
11658:  MOVLB  1
1165A:  MOVF   xE8,W
1165C:  SUBWF  xEC,W
1165E:  BTFSC  FD8.0
11660:  BRA    11668
11662:  MOVLB  0
11664:  GOTO   117A6
11668:  MOVLB  0
1166A:  BTFSS  FD8.2
1166C:  GOTO   11682
11670:  MOVLB  1
11672:  MOVF   xE7,W
11674:  SUBWF  xEB,W
11676:  BTFSC  FD8.0
11678:  BRA    11680
1167A:  MOVLB  0
1167C:  GOTO   117A6
11680:  MOVLB  0
....................         fprintf(PC, "Error: Read address 0x%08LX out of SMF mission range [0x%08LX - 0x%08LX)\r\n",
....................                 read_address, (unsigned int32)smf_address.start_address, (unsigned int32)smf_address.end_address);
11682:  MOVLW  80
11684:  MOVWF  FF6
11686:  MOVLW  0B
11688:  MOVWF  FF7
1168A:  MOVLW  00
1168C:  MOVWF  FF8
1168E:  MOVLW  16
11690:  MOVLB  9
11692:  MOVWF  xC2
11694:  MOVLB  0
11696:  CALL   2312
1169A:  MOVFF  1EE,9E8
1169E:  MOVLW  37
116A0:  MOVLB  9
116A2:  MOVWF  xE9
116A4:  MOVLB  0
116A6:  CALL   2542
116AA:  MOVFF  1ED,9E8
116AE:  MOVLW  37
116B0:  MOVLB  9
116B2:  MOVWF  xE9
116B4:  MOVLB  0
116B6:  CALL   2542
116BA:  MOVFF  1EC,9E8
116BE:  MOVLW  37
116C0:  MOVLB  9
116C2:  MOVWF  xE9
116C4:  MOVLB  0
116C6:  CALL   2542
116CA:  MOVFF  1EB,9E8
116CE:  MOVLW  37
116D0:  MOVLB  9
116D2:  MOVWF  xE9
116D4:  MOVLB  0
116D6:  CALL   2542
116DA:  MOVLW  9B
116DC:  MOVWF  FF6
116DE:  MOVLW  0B
116E0:  MOVWF  FF7
116E2:  MOVLW  00
116E4:  MOVWF  FF8
116E6:  MOVLW  1D
116E8:  MOVLB  9
116EA:  MOVWF  xC2
116EC:  MOVLB  0
116EE:  CALL   2312
116F2:  MOVFF  1E6,9E8
116F6:  MOVLW  37
116F8:  MOVLB  9
116FA:  MOVWF  xE9
116FC:  MOVLB  0
116FE:  CALL   2542
11702:  MOVFF  1E5,9E8
11706:  MOVLW  37
11708:  MOVLB  9
1170A:  MOVWF  xE9
1170C:  MOVLB  0
1170E:  CALL   2542
11712:  MOVFF  1E4,9E8
11716:  MOVLW  37
11718:  MOVLB  9
1171A:  MOVWF  xE9
1171C:  MOVLB  0
1171E:  CALL   2542
11722:  MOVFF  1E3,9E8
11726:  MOVLW  37
11728:  MOVLB  9
1172A:  MOVWF  xE9
1172C:  MOVLB  0
1172E:  CALL   2542
11732:  MOVLW  BD
11734:  MOVWF  FF6
11736:  MOVLW  0B
11738:  MOVWF  FF7
1173A:  MOVLW  00
1173C:  MOVWF  FF8
1173E:  MOVLW  05
11740:  MOVLB  9
11742:  MOVWF  xC2
11744:  MOVLB  0
11746:  CALL   2312
1174A:  MOVFF  1EA,9E8
1174E:  MOVLW  37
11750:  MOVLB  9
11752:  MOVWF  xE9
11754:  MOVLB  0
11756:  CALL   2542
1175A:  MOVFF  1E9,9E8
1175E:  MOVLW  37
11760:  MOVLB  9
11762:  MOVWF  xE9
11764:  MOVLB  0
11766:  CALL   2542
1176A:  MOVFF  1E8,9E8
1176E:  MOVLW  37
11770:  MOVLB  9
11772:  MOVWF  xE9
11774:  MOVLB  0
11776:  CALL   2542
1177A:  MOVFF  1E7,9E8
1177E:  MOVLW  37
11780:  MOVLB  9
11782:  MOVWF  xE9
11784:  MOVLB  0
11786:  CALL   2542
1178A:  MOVLW  C7
1178C:  MOVWF  FF6
1178E:  MOVLW  0B
11790:  MOVWF  FF7
11792:  MOVLW  00
11794:  MOVWF  FF8
11796:  MOVLW  03
11798:  MOVLB  9
1179A:  MOVWF  xC2
1179C:  MOVLB  0
1179E:  CALL   2312
....................         return;
117A2:  GOTO   11C66
....................     }
....................     unsigned int32 mission_remaining = (unsigned int32)smf_address.end_address - read_address; // 読める残り
117A6:  MOVLB  1
117A8:  MOVF   xEB,W
117AA:  SUBWF  xE7,W
117AC:  MOVWF  xF3
117AE:  MOVF   xEC,W
117B0:  SUBWFB xE8,W
117B2:  MOVWF  xF4
117B4:  MOVF   xED,W
117B6:  SUBWFB xE9,W
117B8:  MOVWF  xF5
117BA:  MOVF   xEE,W
117BC:  SUBWFB xEA,W
117BE:  MOVWF  xF6
....................     if (read_size > mission_remaining) {
117C0:  MOVF   xF6,W
117C2:  SUBWF  xF2,W
117C4:  BTFSC  FD8.0
117C6:  BRA    117CE
117C8:  MOVLB  0
117CA:  GOTO   118A0
117CE:  MOVLB  0
117D0:  BTFSS  FD8.2
117D2:  GOTO   11818
117D6:  MOVLB  1
117D8:  MOVF   xF5,W
117DA:  SUBWF  xF1,W
117DC:  BTFSC  FD8.0
117DE:  BRA    117E6
117E0:  MOVLB  0
117E2:  GOTO   118A0
117E6:  MOVLB  0
117E8:  BTFSS  FD8.2
117EA:  GOTO   11818
117EE:  MOVLB  1
117F0:  MOVF   xF4,W
117F2:  SUBWF  xF0,W
117F4:  BTFSC  FD8.0
117F6:  BRA    117FE
117F8:  MOVLB  0
117FA:  GOTO   118A0
117FE:  MOVLB  0
11800:  BTFSS  FD8.2
11802:  GOTO   11818
11806:  MOVLB  1
11808:  MOVF   xEF,W
1180A:  SUBWF  xF3,W
1180C:  BTFSS  FD8.0
1180E:  BRA    11816
11810:  MOVLB  0
11812:  GOTO   118A0
11816:  MOVLB  0
....................         fprintf(PC, "Warn: Adjust read size from %lu to %lu (mission end)\r\n", read_size, mission_remaining);
11818:  MOVLW  CC
1181A:  MOVWF  FF6
1181C:  MOVLW  0B
1181E:  MOVWF  FF7
11820:  MOVLW  00
11822:  MOVWF  FF8
11824:  MOVLW  1C
11826:  MOVLB  9
11828:  MOVWF  xC2
1182A:  MOVLB  0
1182C:  CALL   2312
11830:  MOVLW  41
11832:  MOVWF  FE9
11834:  MOVFF  1F2,209
11838:  MOVFF  1F1,208
1183C:  MOVFF  1F0,207
11840:  MOVFF  1EF,206
11844:  CALL   62D0
11848:  MOVLW  EB
1184A:  MOVWF  FF6
1184C:  MOVLW  0B
1184E:  MOVWF  FF7
11850:  MOVLW  00
11852:  MOVWF  FF8
11854:  MOVLW  04
11856:  MOVLB  9
11858:  MOVWF  xC2
1185A:  MOVLB  0
1185C:  CALL   2312
11860:  MOVLW  41
11862:  MOVWF  FE9
11864:  MOVFF  1F6,209
11868:  MOVFF  1F5,208
1186C:  MOVFF  1F4,207
11870:  MOVFF  1F3,206
11874:  CALL   62D0
11878:  MOVLW  F2
1187A:  MOVWF  FF6
1187C:  MOVLW  0B
1187E:  MOVWF  FF7
11880:  MOVLW  00
11882:  MOVWF  FF8
11884:  MOVLW  10
11886:  MOVLB  9
11888:  MOVWF  xC2
1188A:  MOVLB  0
1188C:  CALL   2312
....................         read_size = mission_remaining;
11890:  MOVFF  1F6,1F2
11894:  MOVFF  1F5,1F1
11898:  MOVFF  1F4,1F0
1189C:  MOVFF  1F3,1EF
....................     }
....................     if (read_size == 0) {
118A0:  MOVLB  1
118A2:  MOVF   xEF,F
118A4:  BTFSC  FD8.2
118A6:  BRA    118AE
118A8:  MOVLB  0
118AA:  GOTO   118F4
118AE:  MOVLB  0
118B0:  MOVLB  1
118B2:  MOVF   xF0,F
118B4:  BTFSC  FD8.2
118B6:  BRA    118BE
118B8:  MOVLB  0
118BA:  GOTO   118F4
118BE:  MOVLB  0
118C0:  MOVLB  1
118C2:  MOVF   xF1,F
118C4:  BTFSC  FD8.2
118C6:  BRA    118CE
118C8:  MOVLB  0
118CA:  GOTO   118F4
118CE:  MOVLB  0
118D0:  MOVLB  1
118D2:  MOVF   xF2,F
118D4:  BTFSC  FD8.2
118D6:  BRA    118DE
118D8:  MOVLB  0
118DA:  GOTO   118F4
118DE:  MOVLB  0
....................         fprintf(PC, "Info: Nothing to read (size=0)\r\n");
118E0:  MOVLW  04
118E2:  MOVWF  FF6
118E4:  MOVLW  0C
118E6:  MOVWF  FF7
118E8:  MOVLW  00
118EA:  MOVWF  FF8
118EC:  CALL   22DC
....................         return;
118F0:  GOTO   11C66
....................     }
.................... 
....................     fprintf(PC, "In SMF Read source data address: %LX\r\n", read_address);
118F4:  MOVLW  26
118F6:  MOVWF  FF6
118F8:  MOVLW  0C
118FA:  MOVWF  FF7
118FC:  MOVLW  00
118FE:  MOVWF  FF8
11900:  MOVLW  21
11902:  MOVLB  9
11904:  MOVWF  xC2
11906:  MOVLB  0
11908:  CALL   2312
1190C:  MOVFF  1EE,9E8
11910:  MOVLW  37
11912:  MOVLB  9
11914:  MOVWF  xE9
11916:  MOVLB  0
11918:  CALL   2542
1191C:  MOVFF  1ED,9E8
11920:  MOVLW  37
11922:  MOVLB  9
11924:  MOVWF  xE9
11926:  MOVLB  0
11928:  CALL   2542
1192C:  MOVFF  1EC,9E8
11930:  MOVLW  37
11932:  MOVLB  9
11934:  MOVWF  xE9
11936:  MOVLB  0
11938:  CALL   2542
1193C:  MOVFF  1EB,9E8
11940:  MOVLW  37
11942:  MOVLB  9
11944:  MOVWF  xE9
11946:  MOVLB  0
11948:  CALL   2542
1194C:  MOVLW  0D
1194E:  BTFSS  FA6.6
11950:  GOTO   1194E
11954:  MOVLB  E
11956:  MOVWF  xF9
11958:  MOVLW  0A
1195A:  MOVLB  0
1195C:  BTFSS  FA6.6
1195E:  GOTO   1195C
11962:  MOVLB  E
11964:  MOVWF  xF9
....................     fprintf(PC, "In SMF Read data size          : %lu (0x%lx)\r\n\r\n", read_size, read_size);
11966:  MOVLW  4E
11968:  MOVWF  FF6
1196A:  MOVLW  0C
1196C:  MOVWF  FF7
1196E:  MOVLW  00
11970:  MOVWF  FF8
11972:  MOVLW  21
11974:  MOVLB  9
11976:  MOVWF  xC2
11978:  MOVLB  0
1197A:  CALL   2312
1197E:  MOVLW  41
11980:  MOVWF  FE9
11982:  MOVFF  1F2,209
11986:  MOVFF  1F1,208
1198A:  MOVFF  1F0,207
1198E:  MOVFF  1EF,206
11992:  CALL   62D0
11996:  MOVLW  72
11998:  MOVWF  FF6
1199A:  MOVLW  0C
1199C:  MOVWF  FF7
1199E:  MOVLW  00
119A0:  MOVWF  FF8
119A2:  MOVLW  04
119A4:  MOVLB  9
119A6:  MOVWF  xC2
119A8:  MOVLB  0
119AA:  CALL   2312
119AE:  MOVFF  1F2,9E8
119B2:  MOVLW  57
119B4:  MOVLB  9
119B6:  MOVWF  xE9
119B8:  MOVLB  0
119BA:  CALL   2542
119BE:  MOVFF  1F1,9E8
119C2:  MOVLW  57
119C4:  MOVLB  9
119C6:  MOVWF  xE9
119C8:  MOVLB  0
119CA:  CALL   2542
119CE:  MOVFF  1F0,9E8
119D2:  MOVLW  57
119D4:  MOVLB  9
119D6:  MOVWF  xE9
119D8:  MOVLB  0
119DA:  CALL   2542
119DE:  MOVFF  1EF,9E8
119E2:  MOVLW  57
119E4:  MOVLB  9
119E6:  MOVWF  xE9
119E8:  MOVLB  0
119EA:  CALL   2542
119EE:  MOVLW  79
119F0:  MOVWF  FF6
119F2:  MOVLW  0C
119F4:  MOVWF  FF7
119F6:  MOVLW  00
119F8:  MOVWF  FF8
119FA:  MOVLW  05
119FC:  MOVLB  9
119FE:  MOVWF  xC2
11A00:  MOVLB  0
11A02:  CALL   2312
.................... 
....................     if (!is_connect(smf)){
11A06:  MOVFF  119,253
11A0A:  MOVFF  118,252
11A0E:  MOVFF  117,251
11A12:  MOVFF  116,250
11A16:  CALL   2E02
11A1A:  MOVF   01,F
11A1C:  BTFSS  FD8.2
11A1E:  GOTO   11A32
....................         fprintf(PC, "Error: SMF is not connected\r\n");
11A22:  MOVLW  80
11A24:  MOVWF  FF6
11A26:  MOVLW  0C
11A28:  MOVWF  FF7
11A2A:  MOVLW  00
11A2C:  MOVWF  FF8
11A2E:  CALL   22DC
....................     }
....................     fprintf(PC, "READ DATA FROM SMF...\r\n");
11A32:  MOVLW  9E
11A34:  MOVWF  FF6
11A36:  MOVLW  0C
11A38:  MOVWF  FF7
11A3A:  MOVLW  00
11A3C:  MOVWF  FF8
11A3E:  CALL   22DC
....................     unsigned int32 end_address = read_address + read_size;
11A42:  MOVLB  1
11A44:  MOVF   xEF,W
11A46:  ADDWF  xEB,W
11A48:  MOVWF  xF7
11A4A:  MOVF   xF0,W
11A4C:  ADDWFC xEC,W
11A4E:  MOVWF  xF8
11A50:  MOVF   xF1,W
11A52:  ADDWFC xED,W
11A54:  MOVWF  xF9
11A56:  MOVF   xF2,W
11A58:  ADDWFC xEE,W
11A5A:  MOVWF  xFA
....................     for (unsigned int32 addr = read_address; addr < end_address; addr += PACKET_SIZE) {
11A5C:  MOVFF  1EE,1FE
11A60:  MOVFF  1ED,1FD
11A64:  MOVFF  1EC,1FC
11A68:  MOVFF  1EB,1FB
11A6C:  MOVLB  0
11A6E:  MOVLB  1
11A70:  MOVF   xFE,W
11A72:  SUBWF  xFA,W
11A74:  BTFSC  FD8.0
11A76:  BRA    11A7E
11A78:  MOVLB  0
11A7A:  GOTO   11C46
11A7E:  MOVLB  0
11A80:  BTFSS  FD8.2
11A82:  GOTO   11AC8
11A86:  MOVLB  1
11A88:  MOVF   xFD,W
11A8A:  SUBWF  xF9,W
11A8C:  BTFSC  FD8.0
11A8E:  BRA    11A96
11A90:  MOVLB  0
11A92:  GOTO   11C46
11A96:  MOVLB  0
11A98:  BTFSS  FD8.2
11A9A:  GOTO   11AC8
11A9E:  MOVLB  1
11AA0:  MOVF   xFC,W
11AA2:  SUBWF  xF8,W
11AA4:  BTFSC  FD8.0
11AA6:  BRA    11AAE
11AA8:  MOVLB  0
11AAA:  GOTO   11C46
11AAE:  MOVLB  0
11AB0:  BTFSS  FD8.2
11AB2:  GOTO   11AC8
11AB6:  MOVLB  1
11AB8:  MOVF   xF7,W
11ABA:  SUBWF  xFB,W
11ABC:  BTFSS  FD8.0
11ABE:  BRA    11AC6
11AC0:  MOVLB  0
11AC2:  GOTO   11C46
11AC6:  MOVLB  0
....................         unsigned int16 chunk = (end_address - addr) >= PACKET_SIZE ? PACKET_SIZE : (unsigned int16)(end_address - addr);
11AC8:  MOVLB  1
11ACA:  MOVF   xFB,W
11ACC:  SUBWF  xF7,W
11ACE:  MOVLB  2
11AD0:  MOVWF  x03
11AD2:  MOVLB  1
11AD4:  MOVF   xFC,W
11AD6:  SUBWFB xF8,W
11AD8:  MOVLB  2
11ADA:  MOVWF  x04
11ADC:  MOVLB  1
11ADE:  MOVF   xFD,W
11AE0:  SUBWFB xF9,W
11AE2:  MOVLB  2
11AE4:  MOVWF  x05
11AE6:  MOVLB  1
11AE8:  MOVF   xFE,W
11AEA:  SUBWFB xFA,W
11AEC:  MOVLB  2
11AEE:  MOVWF  x06
11AF0:  MOVF   x06,F
11AF2:  BTFSC  FD8.2
11AF4:  BRA    11AFC
11AF6:  MOVLB  0
11AF8:  GOTO   11B30
11AFC:  MOVLB  0
11AFE:  MOVLB  2
11B00:  MOVF   x05,F
11B02:  BTFSC  FD8.2
11B04:  BRA    11B0C
11B06:  MOVLB  0
11B08:  GOTO   11B30
11B0C:  MOVLB  0
11B0E:  MOVLB  2
11B10:  MOVF   x04,F
11B12:  BTFSC  FD8.2
11B14:  BRA    11B1C
11B16:  MOVLB  0
11B18:  GOTO   11B30
11B1C:  MOVLB  0
11B1E:  MOVLB  2
11B20:  MOVF   x03,W
11B22:  SUBLW  3F
11B24:  BTFSS  FD8.0
11B26:  BRA    11B2E
11B28:  MOVLB  0
11B2A:  GOTO   11B38
11B2E:  MOVLB  0
11B30:  CLRF   03
11B32:  MOVLW  40
11B34:  GOTO   11B5A
11B38:  MOVLB  1
11B3A:  MOVF   xFB,W
11B3C:  SUBWF  xF7,W
11B3E:  MOVWF  00
11B40:  MOVF   xFC,W
11B42:  SUBWFB xF8,W
11B44:  MOVWF  01
11B46:  MOVF   xFD,W
11B48:  SUBWFB xF9,W
11B4A:  MOVWF  02
11B4C:  MOVF   xFE,W
11B4E:  SUBWFB xFA,W
11B50:  MOVWF  03
11B52:  MOVFF  01,03
11B56:  MOVF   00,W
11B58:  MOVLB  0
11B5A:  MOVLB  1
11B5C:  MOVWF  xFF
11B5E:  MOVFF  03,200
11B62:  MOVLB  0
....................         read_data_bytes(smf, addr, buffer, chunk);
11B64:  MOVFF  119,AED
11B68:  MOVFF  118,AEC
11B6C:  MOVFF  117,AEB
11B70:  MOVFF  116,AEA
11B74:  MOVFF  1FE,AF1
11B78:  MOVFF  1FD,AF0
11B7C:  MOVFF  1FC,AEF
11B80:  MOVFF  1FB,AEE
11B84:  MOVLW  01
11B86:  MOVLB  A
11B88:  MOVWF  xF3
11B8A:  MOVLW  A3
11B8C:  MOVWF  xF2
11B8E:  CLRF   xF7
11B90:  CLRF   xF6
11B92:  MOVFF  200,AF5
11B96:  MOVFF  1FF,AF4
11B9A:  MOVLB  0
11B9C:  CALL   2ECA
....................         for (unsigned int16 i = 0; i < chunk; i++) fprintf(PC, "%02X ", buffer[i]);
11BA0:  MOVLB  2
11BA2:  CLRF   x02
11BA4:  CLRF   x01
11BA6:  MOVLB  0
11BA8:  MOVLB  2
11BAA:  MOVF   x02,W
11BAC:  SUBWF  x00,W
11BAE:  BTFSC  FD8.0
11BB0:  BRA    11BB8
11BB2:  MOVLB  0
11BB4:  GOTO   11C12
11BB8:  MOVLB  0
11BBA:  BTFSS  FD8.2
11BBC:  GOTO   11BD4
11BC0:  MOVLB  1
11BC2:  MOVF   xFF,W
11BC4:  MOVLB  2
11BC6:  SUBWF  x01,W
11BC8:  BTFSS  FD8.0
11BCA:  BRA    11BD2
11BCC:  MOVLB  0
11BCE:  GOTO   11C12
11BD2:  MOVLB  0
11BD4:  MOVLW  A3
11BD6:  MOVLB  2
11BD8:  ADDWF  x01,W
11BDA:  MOVWF  FE9
11BDC:  MOVLW  01
11BDE:  ADDWFC x02,W
11BE0:  MOVWF  FEA
11BE2:  MOVFF  FEF,203
11BE6:  MOVFF  203,9E8
11BEA:  MOVLW  37
11BEC:  MOVLB  9
11BEE:  MOVWF  xE9
11BF0:  MOVLB  0
11BF2:  CALL   2542
11BF6:  MOVLW  20
11BF8:  BTFSS  FA6.6
11BFA:  GOTO   11BF8
11BFE:  MOVLB  E
11C00:  MOVWF  xF9
11C02:  MOVLB  0
11C04:  MOVLB  2
11C06:  INCF   x01,F
11C08:  BTFSC  FD8.2
11C0A:  INCF   x02,F
11C0C:  MOVLB  0
11C0E:  GOTO   11BA8
....................         fprintf(PC, "\r\n");
11C12:  MOVLW  0D
11C14:  BTFSS  FA6.6
11C16:  GOTO   11C14
11C1A:  MOVLB  E
11C1C:  MOVWF  xF9
11C1E:  MOVLW  0A
11C20:  MOVLB  0
11C22:  BTFSS  FA6.6
11C24:  GOTO   11C22
11C28:  MOVLB  E
11C2A:  MOVWF  xF9
11C2C:  MOVLB  0
11C2E:  MOVLW  40
11C30:  MOVLB  1
11C32:  ADDWF  xFB,F
11C34:  MOVLW  00
11C36:  ADDWFC xFC,F
11C38:  MOVLW  00
11C3A:  ADDWFC xFD,F
11C3C:  MOVLW  00
11C3E:  ADDWFC xFE,F
11C40:  MOVLB  0
11C42:  GOTO   11A6E
....................     }
....................     fprintf(PC, "\r\n___End SMF Read____\r\n");
11C46:  MOVLW  B6
11C48:  MOVWF  FF6
11C4A:  MOVLW  0C
11C4C:  MOVWF  FF7
11C4E:  MOVLW  00
11C50:  MOVWF  FF8
11C52:  CALL   22DC
....................     fprintf(PC, "____________________\r\n\r\n");
11C56:  MOVLW  CE
11C58:  MOVWF  FF6
11C5A:  MOVLW  0C
11C5C:  MOVWF  FF7
11C5E:  MOVLW  00
11C60:  MOVWF  FF8
11C62:  CALL   22DC
11C66:  GOTO   124EE (RETURN)
.................... }
.................... 
.................... void smf_erase(FlashOperationStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
11C6A:  MOVLW  E8
11C6C:  MOVWF  FF6
11C6E:  MOVLW  0C
11C70:  MOVWF  FF7
11C72:  MOVLW  00
11C74:  MOVWF  FF8
11C76:  CALL   22DC
....................     fprintf(PC, "___Start smf_erase____\r\n");
11C7A:  MOVLW  02
11C7C:  MOVWF  FF6
11C7E:  MOVLW  0D
11C80:  MOVWF  FF7
11C82:  MOVLW  00
11C84:  MOVWF  FF8
11C86:  CALL   22DC
.................... 
....................     SmfAddressStruct mission_type = get_smf_address_struct(smf_data->mission_id);
....................     unsigned int32 erase_address = smf_data->misf_start_addr;
....................     unsigned int32 erase_size = smf_data->misf_size;
11C8A:  MOVLB  1
11C8C:  MOVF   xA1,W
11C8E:  MOVWF  FE9
11C90:  MOVF   xA2,W
11C92:  MOVWF  FEA
11C94:  MOVFF  FEF,1BB
11C98:  MOVFF  1BB,20A
11C9C:  MOVLB  0
11C9E:  CALL   113A8
11CA2:  MOVFF  02,03
11CA6:  MOVF   01,W
11CA8:  MOVWF  FE1
11CAA:  MOVFF  03,FE2
11CAE:  MOVLW  01
11CB0:  MOVWF  FEA
11CB2:  MOVLW  A3
11CB4:  MOVWF  FE9
11CB6:  MOVLW  08
11CB8:  MOVWF  01
11CBA:  MOVFF  FE6,FEE
11CBE:  DECFSZ 01,F
11CC0:  GOTO   11CBA
11CC4:  MOVLW  04
11CC6:  MOVLB  1
11CC8:  ADDWF  xA1,W
11CCA:  MOVWF  FE9
11CCC:  MOVLW  00
11CCE:  ADDWFC xA2,W
11CD0:  MOVWF  FEA
11CD2:  MOVFF  FEF,1AB
11CD6:  MOVFF  FEC,1AC
11CDA:  MOVFF  FEC,1AD
11CDE:  MOVFF  FEC,1AE
11CE2:  MOVF   FED,F
11CE4:  MOVF   FED,F
11CE6:  MOVF   FED,F
11CE8:  MOVLW  08
11CEA:  ADDWF  xA1,W
11CEC:  MOVWF  FE9
11CEE:  MOVLW  00
11CF0:  ADDWFC xA2,W
11CF2:  MOVWF  FEA
11CF4:  MOVFF  FEF,1AF
11CF8:  MOVFF  FEC,1B0
11CFC:  MOVFF  FEC,1B1
11D00:  MOVFF  FEC,1B2
11D04:  MOVF   FED,F
11D06:  MOVF   FED,F
11D08:  MOVF   FED,F
....................     fprintf(PC, "[SMF] Erase address   : %LX\r\n", erase_address);
11D0A:  MOVLW  1C
11D0C:  MOVWF  FF6
11D0E:  MOVLW  0D
11D10:  MOVWF  FF7
11D12:  MOVLW  00
11D14:  MOVWF  FF8
11D16:  MOVLW  18
11D18:  MOVLB  9
11D1A:  MOVWF  xC2
11D1C:  MOVLB  0
11D1E:  CALL   2312
11D22:  MOVFF  1AE,9E8
11D26:  MOVLW  37
11D28:  MOVLB  9
11D2A:  MOVWF  xE9
11D2C:  MOVLB  0
11D2E:  CALL   2542
11D32:  MOVFF  1AD,9E8
11D36:  MOVLW  37
11D38:  MOVLB  9
11D3A:  MOVWF  xE9
11D3C:  MOVLB  0
11D3E:  CALL   2542
11D42:  MOVFF  1AC,9E8
11D46:  MOVLW  37
11D48:  MOVLB  9
11D4A:  MOVWF  xE9
11D4C:  MOVLB  0
11D4E:  CALL   2542
11D52:  MOVFF  1AB,9E8
11D56:  MOVLW  37
11D58:  MOVLB  9
11D5A:  MOVWF  xE9
11D5C:  MOVLB  0
11D5E:  CALL   2542
11D62:  MOVLW  0D
11D64:  BTFSS  FA6.6
11D66:  GOTO   11D64
11D6A:  MOVLB  E
11D6C:  MOVWF  xF9
11D6E:  MOVLW  0A
11D70:  MOVLB  0
11D72:  BTFSS  FA6.6
11D74:  GOTO   11D72
11D78:  MOVLB  E
11D7A:  MOVWF  xF9
....................     fprintf(PC, "[SMF] Erase data size : %lu (0x%lx)\r\n\r\n", erase_size, erase_size);
11D7C:  MOVLW  3A
11D7E:  MOVWF  FF6
11D80:  MOVLW  0D
11D82:  MOVWF  FF7
11D84:  MOVLW  00
11D86:  MOVWF  FF8
11D88:  MOVLW  18
11D8A:  MOVLB  9
11D8C:  MOVWF  xC2
11D8E:  MOVLB  0
11D90:  CALL   2312
11D94:  MOVLW  41
11D96:  MOVWF  FE9
11D98:  MOVFF  1B2,209
11D9C:  MOVFF  1B1,208
11DA0:  MOVFF  1B0,207
11DA4:  MOVFF  1AF,206
11DA8:  CALL   62D0
11DAC:  MOVLW  55
11DAE:  MOVWF  FF6
11DB0:  MOVLW  0D
11DB2:  MOVWF  FF7
11DB4:  MOVLW  00
11DB6:  MOVWF  FF8
11DB8:  MOVLW  04
11DBA:  MOVLB  9
11DBC:  MOVWF  xC2
11DBE:  MOVLB  0
11DC0:  CALL   2312
11DC4:  MOVFF  1B2,9E8
11DC8:  MOVLW  57
11DCA:  MOVLB  9
11DCC:  MOVWF  xE9
11DCE:  MOVLB  0
11DD0:  CALL   2542
11DD4:  MOVFF  1B1,9E8
11DD8:  MOVLW  57
11DDA:  MOVLB  9
11DDC:  MOVWF  xE9
11DDE:  MOVLB  0
11DE0:  CALL   2542
11DE4:  MOVFF  1B0,9E8
11DE8:  MOVLW  57
11DEA:  MOVLB  9
11DEC:  MOVWF  xE9
11DEE:  MOVLB  0
11DF0:  CALL   2542
11DF4:  MOVFF  1AF,9E8
11DF8:  MOVLW  57
11DFA:  MOVLB  9
11DFC:  MOVWF  xE9
11DFE:  MOVLB  0
11E00:  CALL   2542
11E04:  MOVLW  5C
11E06:  MOVWF  FF6
11E08:  MOVLW  0D
11E0A:  MOVWF  FF7
11E0C:  MOVLW  00
11E0E:  MOVWF  FF8
11E10:  MOVLW  05
11E12:  MOVLB  9
11E14:  MOVWF  xC2
11E16:  MOVLB  0
11E18:  CALL   2312
.................... 
....................     if (!is_connect(smf)){
11E1C:  MOVFF  119,253
11E20:  MOVFF  118,252
11E24:  MOVFF  117,251
11E28:  MOVFF  116,250
11E2C:  CALL   2E02
11E30:  MOVF   01,F
11E32:  BTFSS  FD8.2
11E34:  GOTO   11E4C
....................         fprintf(PC, "Error: SMF is not connected\r\n");
11E38:  MOVLW  62
11E3A:  MOVWF  FF6
11E3C:  MOVLW  0D
11E3E:  MOVWF  FF7
11E40:  MOVLW  00
11E42:  MOVWF  FF8
11E44:  CALL   22DC
....................         return;
11E48:  GOTO   122E8
....................     }
.................... 
....................     // Check if erase operation is within mission_type range
....................     if (erase_address < mission_type.start_address || erase_address >= mission_type.end_address) {
11E4C:  MOVLB  1
11E4E:  MOVF   xAE,W
11E50:  SUBWF  xA6,W
11E52:  BTFSC  FD8.0
11E54:  BRA    11E5C
11E56:  MOVLB  0
11E58:  GOTO   11EA6
11E5C:  MOVLB  0
11E5E:  BTFSS  FD8.2
11E60:  GOTO   11F00
11E64:  MOVLB  1
11E66:  MOVF   xAD,W
11E68:  SUBWF  xA5,W
11E6A:  BTFSC  FD8.0
11E6C:  BRA    11E74
11E6E:  MOVLB  0
11E70:  GOTO   11EA6
11E74:  MOVLB  0
11E76:  BTFSS  FD8.2
11E78:  GOTO   11F00
11E7C:  MOVLB  1
11E7E:  MOVF   xAC,W
11E80:  SUBWF  xA4,W
11E82:  BTFSC  FD8.0
11E84:  BRA    11E8C
11E86:  MOVLB  0
11E88:  GOTO   11EA6
11E8C:  MOVLB  0
11E8E:  BTFSS  FD8.2
11E90:  GOTO   11F00
11E94:  MOVLB  1
11E96:  MOVF   xA3,W
11E98:  SUBWF  xAB,W
11E9A:  BTFSC  FD8.0
11E9C:  BRA    11EA4
11E9E:  MOVLB  0
11EA0:  GOTO   11F00
11EA4:  MOVLB  0
11EA6:  MOVLB  1
11EA8:  MOVF   xAA,W
11EAA:  SUBWF  xAE,W
11EAC:  BTFSC  FD8.0
11EAE:  BRA    11EB6
11EB0:  MOVLB  0
11EB2:  GOTO   12024
11EB6:  MOVLB  0
11EB8:  BTFSS  FD8.2
11EBA:  GOTO   11F00
11EBE:  MOVLB  1
11EC0:  MOVF   xA9,W
11EC2:  SUBWF  xAD,W
11EC4:  BTFSC  FD8.0
11EC6:  BRA    11ECE
11EC8:  MOVLB  0
11ECA:  GOTO   12024
11ECE:  MOVLB  0
11ED0:  BTFSS  FD8.2
11ED2:  GOTO   11F00
11ED6:  MOVLB  1
11ED8:  MOVF   xA8,W
11EDA:  SUBWF  xAC,W
11EDC:  BTFSC  FD8.0
11EDE:  BRA    11EE6
11EE0:  MOVLB  0
11EE2:  GOTO   12024
11EE6:  MOVLB  0
11EE8:  BTFSS  FD8.2
11EEA:  GOTO   11F00
11EEE:  MOVLB  1
11EF0:  MOVF   xA7,W
11EF2:  SUBWF  xAB,W
11EF4:  BTFSC  FD8.0
11EF6:  BRA    11EFE
11EF8:  MOVLB  0
11EFA:  GOTO   12024
11EFE:  MOVLB  0
....................         fprintf(PC, "Error: Erase source address 0x%LX is outside mission range [0x%LX - 0x%LX]\r\n", 
....................                 erase_address, mission_type.start_address, mission_type.end_address);
11F00:  MOVLW  80
11F02:  MOVWF  FF6
11F04:  MOVLW  0D
11F06:  MOVWF  FF7
11F08:  MOVLW  00
11F0A:  MOVWF  FF8
11F0C:  MOVLW  1E
11F0E:  MOVLB  9
11F10:  MOVWF  xC2
11F12:  MOVLB  0
11F14:  CALL   2312
11F18:  MOVFF  1AE,9E8
11F1C:  MOVLW  37
11F1E:  MOVLB  9
11F20:  MOVWF  xE9
11F22:  MOVLB  0
11F24:  CALL   2542
11F28:  MOVFF  1AD,9E8
11F2C:  MOVLW  37
11F2E:  MOVLB  9
11F30:  MOVWF  xE9
11F32:  MOVLB  0
11F34:  CALL   2542
11F38:  MOVFF  1AC,9E8
11F3C:  MOVLW  37
11F3E:  MOVLB  9
11F40:  MOVWF  xE9
11F42:  MOVLB  0
11F44:  CALL   2542
11F48:  MOVFF  1AB,9E8
11F4C:  MOVLW  37
11F4E:  MOVLB  9
11F50:  MOVWF  xE9
11F52:  MOVLB  0
11F54:  CALL   2542
11F58:  MOVLW  A1
11F5A:  MOVWF  FF6
11F5C:  MOVLW  0D
11F5E:  MOVWF  FF7
11F60:  MOVLW  00
11F62:  MOVWF  FF8
11F64:  MOVLW  1D
11F66:  MOVLB  9
11F68:  MOVWF  xC2
11F6A:  MOVLB  0
11F6C:  CALL   2312
11F70:  MOVFF  1A6,9E8
11F74:  MOVLW  37
11F76:  MOVLB  9
11F78:  MOVWF  xE9
11F7A:  MOVLB  0
11F7C:  CALL   2542
11F80:  MOVFF  1A5,9E8
11F84:  MOVLW  37
11F86:  MOVLB  9
11F88:  MOVWF  xE9
11F8A:  MOVLB  0
11F8C:  CALL   2542
11F90:  MOVFF  1A4,9E8
11F94:  MOVLW  37
11F96:  MOVLB  9
11F98:  MOVWF  xE9
11F9A:  MOVLB  0
11F9C:  CALL   2542
11FA0:  MOVFF  1A3,9E8
11FA4:  MOVLW  37
11FA6:  MOVLB  9
11FA8:  MOVWF  xE9
11FAA:  MOVLB  0
11FAC:  CALL   2542
11FB0:  MOVLW  C1
11FB2:  MOVWF  FF6
11FB4:  MOVLW  0D
11FB6:  MOVWF  FF7
11FB8:  MOVLW  00
11FBA:  MOVWF  FF8
11FBC:  MOVLW  05
11FBE:  MOVLB  9
11FC0:  MOVWF  xC2
11FC2:  MOVLB  0
11FC4:  CALL   2312
11FC8:  MOVFF  1AA,9E8
11FCC:  MOVLW  37
11FCE:  MOVLB  9
11FD0:  MOVWF  xE9
11FD2:  MOVLB  0
11FD4:  CALL   2542
11FD8:  MOVFF  1A9,9E8
11FDC:  MOVLW  37
11FDE:  MOVLB  9
11FE0:  MOVWF  xE9
11FE2:  MOVLB  0
11FE4:  CALL   2542
11FE8:  MOVFF  1A8,9E8
11FEC:  MOVLW  37
11FEE:  MOVLB  9
11FF0:  MOVWF  xE9
11FF2:  MOVLB  0
11FF4:  CALL   2542
11FF8:  MOVFF  1A7,9E8
11FFC:  MOVLW  37
11FFE:  MOVLB  9
12000:  MOVWF  xE9
12002:  MOVLB  0
12004:  CALL   2542
12008:  MOVLW  C9
1200A:  MOVWF  FF6
1200C:  MOVLW  0D
1200E:  MOVWF  FF7
12010:  MOVLW  00
12012:  MOVWF  FF8
12014:  MOVLW  03
12016:  MOVLB  9
12018:  MOVWF  xC2
1201A:  MOVLB  0
1201C:  CALL   2312
....................         return;
12020:  GOTO   122E8
....................     }
.................... 
....................     if ((erase_address + erase_size) > mission_type.end_address) {
12024:  MOVLB  1
12026:  MOVF   xAF,W
12028:  ADDWF  xAB,W
1202A:  MOVWF  xBB
1202C:  MOVF   xB0,W
1202E:  ADDWFC xAC,W
12030:  MOVWF  xBC
12032:  MOVF   xB1,W
12034:  ADDWFC xAD,W
12036:  MOVWF  xBD
12038:  MOVF   xB2,W
1203A:  ADDWFC xAE,W
1203C:  MOVWF  xBE
1203E:  MOVF   xAA,W
12040:  SUBWF  xBE,W
12042:  BTFSC  FD8.0
12044:  BRA    1204C
12046:  MOVLB  0
12048:  GOTO   12136
1204C:  MOVLB  0
1204E:  BTFSS  FD8.2
12050:  GOTO   12096
12054:  MOVLB  1
12056:  MOVF   xA9,W
12058:  SUBWF  xBD,W
1205A:  BTFSC  FD8.0
1205C:  BRA    12064
1205E:  MOVLB  0
12060:  GOTO   12136
12064:  MOVLB  0
12066:  BTFSS  FD8.2
12068:  GOTO   12096
1206C:  MOVLB  1
1206E:  MOVF   xA8,W
12070:  SUBWF  xBC,W
12072:  BTFSC  FD8.0
12074:  BRA    1207C
12076:  MOVLB  0
12078:  GOTO   12136
1207C:  MOVLB  0
1207E:  BTFSS  FD8.2
12080:  GOTO   12096
12084:  MOVLB  1
12086:  MOVF   xBB,W
12088:  SUBWF  xA7,W
1208A:  BTFSS  FD8.0
1208C:  BRA    12094
1208E:  MOVLB  0
12090:  GOTO   12136
12094:  MOVLB  0
....................         fprintf(PC, "Error: Erase operation would exceed mission end address 0x%LX\r\n", mission_type.end_address);
12096:  MOVLW  CE
12098:  MOVWF  FF6
1209A:  MOVLW  0D
1209C:  MOVWF  FF7
1209E:  MOVLW  00
120A0:  MOVWF  FF8
120A2:  MOVLW  3A
120A4:  MOVLB  9
120A6:  MOVWF  xC2
120A8:  MOVLB  0
120AA:  CALL   2312
120AE:  MOVFF  1AA,9E8
120B2:  MOVLW  37
120B4:  MOVLB  9
120B6:  MOVWF  xE9
120B8:  MOVLB  0
120BA:  CALL   2542
120BE:  MOVFF  1A9,9E8
120C2:  MOVLW  37
120C4:  MOVLB  9
120C6:  MOVWF  xE9
120C8:  MOVLB  0
120CA:  CALL   2542
120CE:  MOVFF  1A8,9E8
120D2:  MOVLW  37
120D4:  MOVLB  9
120D6:  MOVWF  xE9
120D8:  MOVLB  0
120DA:  CALL   2542
120DE:  MOVFF  1A7,9E8
120E2:  MOVLW  37
120E4:  MOVLB  9
120E6:  MOVWF  xE9
120E8:  MOVLB  0
120EA:  CALL   2542
120EE:  MOVLW  0D
120F0:  BTFSS  FA6.6
120F2:  GOTO   120F0
120F6:  MOVLB  E
120F8:  MOVWF  xF9
120FA:  MOVLW  0A
120FC:  MOVLB  0
120FE:  BTFSS  FA6.6
12100:  GOTO   120FE
12104:  MOVLB  E
12106:  MOVWF  xF9
....................         fprintf(PC, "Limiting erase size to stay within mission bounds\r\n");
12108:  MOVLW  0E
1210A:  MOVWF  FF6
1210C:  MOVLW  0E
1210E:  MOVWF  FF7
12110:  MOVLW  00
12112:  MOVWF  FF8
12114:  MOVLB  0
12116:  CALL   22DC
....................         erase_size = mission_type.end_address - erase_address;
1211A:  MOVLB  1
1211C:  MOVF   xAB,W
1211E:  SUBWF  xA7,W
12120:  MOVWF  xAF
12122:  MOVF   xAC,W
12124:  SUBWFB xA8,W
12126:  MOVWF  xB0
12128:  MOVF   xAD,W
1212A:  SUBWFB xA9,W
1212C:  MOVWF  xB1
1212E:  MOVF   xAE,W
12130:  SUBWFB xAA,W
12132:  MOVWF  xB2
12134:  MOVLB  0
....................     }
.................... 
....................     fprintf(PC, "Erase operation validated within mission range\r\n");
12136:  MOVLW  42
12138:  MOVWF  FF6
1213A:  MOVLW  0E
1213C:  MOVWF  FF7
1213E:  MOVLW  00
12140:  MOVWF  FF8
12142:  CALL   22DC
....................     unsigned int32 erase_end = erase_address + erase_size;
....................     // 4KB境界開始へアライン
....................     unsigned int32 current = erase_address & ~0xFFF;
12146:  MOVLB  1
12148:  MOVF   xAF,W
1214A:  ADDWF  xAB,W
1214C:  MOVWF  xB3
1214E:  MOVF   xB0,W
12150:  ADDWFC xAC,W
12152:  MOVWF  xB4
12154:  MOVF   xB1,W
12156:  ADDWFC xAD,W
12158:  MOVWF  xB5
1215A:  MOVF   xB2,W
1215C:  ADDWFC xAE,W
1215E:  MOVWF  xB6
12160:  CLRF   xB7
12162:  MOVF   xAC,W
12164:  ANDLW  F0
12166:  MOVWF  xB8
12168:  CLRF   xB9
1216A:  CLRF   xBA
1216C:  MOVLB  0
....................     while (current < erase_end && current < (unsigned int32)mission_type.end_address) {
1216E:  MOVLB  1
12170:  MOVF   xBA,W
12172:  SUBWF  xB6,W
12174:  BTFSC  FD8.0
12176:  BRA    1217E
12178:  MOVLB  0
1217A:  GOTO   1225A
1217E:  MOVLB  0
12180:  BTFSS  FD8.2
12182:  GOTO   121C8
12186:  MOVLB  1
12188:  MOVF   xB9,W
1218A:  SUBWF  xB5,W
1218C:  BTFSC  FD8.0
1218E:  BRA    12196
12190:  MOVLB  0
12192:  GOTO   1225A
12196:  MOVLB  0
12198:  BTFSS  FD8.2
1219A:  GOTO   121C8
1219E:  MOVLB  1
121A0:  MOVF   xB8,W
121A2:  SUBWF  xB4,W
121A4:  BTFSC  FD8.0
121A6:  BRA    121AE
121A8:  MOVLB  0
121AA:  GOTO   1225A
121AE:  MOVLB  0
121B0:  BTFSS  FD8.2
121B2:  GOTO   121C8
121B6:  MOVLB  1
121B8:  MOVF   xB3,W
121BA:  SUBWF  xB7,W
121BC:  BTFSS  FD8.0
121BE:  BRA    121C6
121C0:  MOVLB  0
121C2:  GOTO   1225A
121C6:  MOVLB  0
121C8:  MOVLB  1
121CA:  MOVF   xBA,W
121CC:  SUBWF  xAA,W
121CE:  BTFSC  FD8.0
121D0:  BRA    121D8
121D2:  MOVLB  0
121D4:  GOTO   1225A
121D8:  MOVLB  0
121DA:  BTFSS  FD8.2
121DC:  GOTO   12222
121E0:  MOVLB  1
121E2:  MOVF   xB9,W
121E4:  SUBWF  xA9,W
121E6:  BTFSC  FD8.0
121E8:  BRA    121F0
121EA:  MOVLB  0
121EC:  GOTO   1225A
121F0:  MOVLB  0
121F2:  BTFSS  FD8.2
121F4:  GOTO   12222
121F8:  MOVLB  1
121FA:  MOVF   xB8,W
121FC:  SUBWF  xA8,W
121FE:  BTFSC  FD8.0
12200:  BRA    12208
12202:  MOVLB  0
12204:  GOTO   1225A
12208:  MOVLB  0
1220A:  BTFSS  FD8.2
1220C:  GOTO   12222
12210:  MOVLB  1
12212:  MOVF   xA7,W
12214:  SUBWF  xB7,W
12216:  BTFSS  FD8.0
12218:  BRA    12220
1221A:  MOVLB  0
1221C:  GOTO   1225A
12220:  MOVLB  0
....................         subsector_4kByte_erase(smf, current);
12222:  MOVFF  119,A92
12226:  MOVFF  118,A91
1222A:  MOVFF  117,A90
1222E:  MOVFF  116,A8F
12232:  MOVFF  1BA,A96
12236:  MOVFF  1B9,A95
1223A:  MOVFF  1B8,A94
1223E:  MOVFF  1B7,A93
12242:  CALL   4D38
....................         current += SUBSECTOR_SIZE;
12246:  MOVLW  10
12248:  MOVLB  1
1224A:  ADDWF  xB8,F
1224C:  MOVLW  00
1224E:  ADDWFC xB9,F
12250:  MOVLW  00
12252:  ADDWFC xBA,F
12254:  MOVLB  0
12256:  GOTO   1216E
....................     }
....................     fprintf(PC, "Erased %lu bytes (aligned)\r\n", (current - (erase_address & ~0xFFF)));
1225A:  CLRF   00
1225C:  MOVLB  1
1225E:  MOVF   xAC,W
12260:  ANDLW  F0
12262:  MOVWF  01
12264:  CLRF   02
12266:  CLRF   03
12268:  MOVF   00,W
1226A:  SUBWF  xB7,W
1226C:  MOVWF  xBB
1226E:  MOVF   01,W
12270:  SUBWFB xB8,W
12272:  MOVWF  xBC
12274:  MOVF   02,W
12276:  SUBWFB xB9,W
12278:  MOVWF  xBD
1227A:  MOVF   03,W
1227C:  SUBWFB xBA,W
1227E:  MOVWF  xBE
12280:  MOVLW  74
12282:  MOVWF  FF6
12284:  MOVLW  0E
12286:  MOVWF  FF7
12288:  MOVLW  00
1228A:  MOVWF  FF8
1228C:  MOVLW  07
1228E:  MOVLB  9
12290:  MOVWF  xC2
12292:  MOVLB  0
12294:  CALL   2312
12298:  MOVLW  41
1229A:  MOVWF  FE9
1229C:  MOVFF  1BE,209
122A0:  MOVFF  1BD,208
122A4:  MOVFF  1BC,207
122A8:  MOVFF  1BB,206
122AC:  CALL   62D0
122B0:  MOVLW  7E
122B2:  MOVWF  FF6
122B4:  MOVLW  0E
122B6:  MOVWF  FF7
122B8:  MOVLW  00
122BA:  MOVWF  FF8
122BC:  MOVLW  12
122BE:  MOVLB  9
122C0:  MOVWF  xC2
122C2:  MOVLB  0
122C4:  CALL   2312
.................... 
....................     fprintf(PC, "\r\n___End smf_erase____\r\n");
122C8:  MOVLW  92
122CA:  MOVWF  FF6
122CC:  MOVLW  0E
122CE:  MOVWF  FF7
122D0:  MOVLW  00
122D2:  MOVWF  FF8
122D4:  CALL   22DC
....................     fprintf(PC, "____________________\r\n\r\n");
122D8:  MOVLW  AC
122DA:  MOVWF  FF6
122DC:  MOVLW  0E
122DE:  MOVWF  FF7
122E0:  MOVLW  00
122E2:  MOVWF  FF8
122E4:  CALL   22DC
122E8:  GOTO   124FE (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... // End of file
.................... 
.................... #include "domain/cigs_flash.c"
.................... #include "cigs_flash.h"                           
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/cigs_config.h"             
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mt25q.h"                
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/tool/calc_tools.h"             
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/smf_queue.h"              
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... 
.................... const ADDRESS_AREA_T MISF_ADDRESS_TABLE[FLASH_ID_COUNT] = {
....................     { MISF_CIGS_DATA_TABLE_START,   MISF_CIGS_DATA_TABLE_END,   MISF_CIGS_DATA_TABLE_SIZE },
....................     { MISF_CIGS_PICLOG_START,       MISF_CIGS_PICLOG_END,       MISF_CIGS_PICLOG_SIZE },
....................     { MISF_CIGS_ENVIRO_START,       MISF_CIGS_ENVIRO_END,       MISF_CIGS_ENVIRO_SIZE },
....................     { MISF_CIGS_IV1_HEADER_START,   MISF_CIGS_IV1_HEADER_END,   MISF_CIGS_IV1_HEADER_SIZE },
....................     { MISF_CIGS_IV1_DATA_START,     MISF_CIGS_IV1_DATA_END,     MISF_CIGS_IV1_DATA_SIZE },
....................     { MISF_CIGS_IV2_HEADER_START,   MISF_CIGS_IV2_HEADER_END,   MISF_CIGS_IV2_HEADER_SIZE },
....................     { MISF_CIGS_IV2_DATA_START,     MISF_CIGS_IV2_DATA_END,     MISF_CIGS_IV2_DATA_SIZE }
.................... };
.................... 
.................... FlashCounter_t misf_counter_table[FLASH_ID_COUNT];
.................... FlashCounter_t *misf_counter_table_ptr[FLASH_ID_COUNT] = {&misf_counter_table[0], &misf_counter_table[1], &misf_counter_table[2], &misf_counter_table[3], &misf_counter_table[4], &misf_counter_table[5], &misf_counter_table[6]};
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
0395E:  MOVLW  C6
03960:  MOVWF  FF6
03962:  MOVLW  0E
03964:  MOVWF  FF7
03966:  MOVLW  00
03968:  MOVWF  FF8
0396A:  CALL   22DC
....................     output_high(MIS_FM_CS);
0396E:  MOVLW  FE
03970:  MOVWF  F98
03972:  BSF    F8F.0
....................     output_high(SMF_CS);
03974:  MOVLW  FB
03976:  MOVWF  F92
03978:  BSF    F89.2
.................... 
....................     // 接続処理
....................     if (is_connect(mis_fm)) {
0397A:  MOVFF  115,253
0397E:  MOVFF  114,252
03982:  MOVFF  113,251
03986:  MOVFF  112,250
0398A:  CALL   2E02
0398E:  MOVF   01,F
03990:  BTFSC  FD8.2
03992:  GOTO   39AA
....................         fprintf(PC, "\t[MIS FM] Connected\r\n");
03996:  MOVLW  E2
03998:  MOVWF  FF6
0399A:  MOVLW  0E
0399C:  MOVWF  FF7
0399E:  MOVLW  00
039A0:  MOVWF  FF8
039A2:  CALL   22DC
....................     } else {
039A6:  GOTO   39BA
....................         fprintf(PC, "\t[MIS FM] Not Connected\r\n");
039AA:  MOVLW  F8
039AC:  MOVWF  FF6
039AE:  MOVLW  0E
039B0:  MOVWF  FF7
039B2:  MOVLW  00
039B4:  MOVWF  FF8
039B6:  CALL   22DC
....................     }
....................     if (is_connect(smf)) {
039BA:  MOVFF  119,253
039BE:  MOVFF  118,252
039C2:  MOVFF  117,251
039C6:  MOVFF  116,250
039CA:  CALL   2E02
039CE:  MOVF   01,F
039D0:  BTFSC  FD8.2
039D2:  GOTO   39EA
....................         fprintf(PC, "\t[SMF] Connected\r\n");
039D6:  MOVLW  12
039D8:  MOVWF  FF6
039DA:  MOVLW  0F
039DC:  MOVWF  FF7
039DE:  MOVLW  00
039E0:  MOVWF  FF8
039E2:  CALL   22DC
....................     } else {
039E6:  GOTO   39FA
....................         fprintf(PC, "\t[SMF] Not Connected\r\n");
039EA:  MOVLW  26
039EC:  MOVWF  FF6
039EE:  MOVLW  0F
039F0:  MOVWF  FF7
039F2:  MOVLW  00
039F4:  MOVWF  FF8
039F6:  CALL   22DC
....................     }
.................... 
....................     //=== MIS_FM カウンタテーブル読出し ===//
....................     FlashData_t read_header;
....................     FlashData_t *read_header_ptr = &read_header;
039FA:  MOVLW  02
039FC:  MOVLB  2
039FE:  MOVWF  x4F
03A00:  MOVLW  0E
03A02:  MOVWF  x4E
....................     memset(read_header_ptr, 0x00, sizeof(FlashData_t));
03A04:  MOVFF  24F,FEA
03A08:  MOVFF  24E,FE9
03A0C:  CLRF   00
03A0E:  CLRF   02
03A10:  MOVLW  40
03A12:  MOVWF  01
03A14:  MOVLB  0
03A16:  CALL   234C
....................     fprintf(PC, "\t[MIS FM] %08LX\r\n", MISF_ADDRESS_TABLE[FLASH_ID_DATA_TABLE].start);
03A1A:  MOVLW  3E
03A1C:  MOVWF  FF6
03A1E:  MOVLW  0F
03A20:  MOVWF  FF7
03A22:  MOVLW  00
03A24:  MOVWF  FF8
03A26:  MOVLW  0A
03A28:  MOVLB  9
03A2A:  MOVWF  xC2
03A2C:  MOVLB  0
03A2E:  CALL   2312
03A32:  MOVLB  9
03A34:  CLRF   xE8
03A36:  MOVLW  37
03A38:  MOVWF  xE9
03A3A:  MOVLB  0
03A3C:  CALL   2542
03A40:  MOVLB  9
03A42:  CLRF   xE8
03A44:  MOVLW  37
03A46:  MOVWF  xE9
03A48:  MOVLB  0
03A4A:  CALL   2542
03A4E:  MOVLB  9
03A50:  CLRF   xE8
03A52:  MOVLW  37
03A54:  MOVWF  xE9
03A56:  MOVLB  0
03A58:  CALL   2542
03A5C:  MOVLB  9
03A5E:  CLRF   xE8
03A60:  MOVLW  37
03A62:  MOVWF  xE9
03A64:  MOVLB  0
03A66:  CALL   2542
03A6A:  MOVLW  0D
03A6C:  BTFSS  FA6.6
03A6E:  GOTO   3A6C
03A72:  MOVLB  E
03A74:  MOVWF  xF9
03A76:  MOVLW  0A
03A78:  MOVLB  0
03A7A:  BTFSS  FA6.6
03A7C:  GOTO   3A7A
03A80:  MOVLB  E
03A82:  MOVWF  xF9
....................     read_data_bytes(mis_fm, MISF_ADDRESS_TABLE[FLASH_ID_DATA_TABLE].start, read_header_ptr->bytes, PACKET_SIZE);
03A84:  MOVLB  2
03A86:  MOVF   x4E,W
03A88:  MOVWF  01
03A8A:  MOVF   x4F,W
03A8C:  MOVWF  03
03A8E:  MOVF   01,W
03A90:  MOVWF  x50
03A92:  MOVFF  03,251
03A96:  MOVFF  115,AED
03A9A:  MOVFF  114,AEC
03A9E:  MOVFF  113,AEB
03AA2:  MOVFF  112,AEA
03AA6:  MOVLB  A
03AA8:  CLRF   xF1
03AAA:  CLRF   xF0
03AAC:  CLRF   xEF
03AAE:  CLRF   xEE
03AB0:  MOVFF  251,AF3
03AB4:  MOVFF  250,AF2
03AB8:  CLRF   xF7
03ABA:  CLRF   xF6
03ABC:  CLRF   xF5
03ABE:  MOVLW  40
03AC0:  MOVWF  xF4
03AC2:  MOVLB  0
03AC4:  CALL   2ECA
.................... 
....................     // CRC 検証
....................     if (read_header_ptr->packet.crc != calc_crc8(read_header_ptr->bytes, PACKET_SIZE - 1)) {
03AC8:  MOVLW  3F
03ACA:  MOVLB  2
03ACC:  ADDWF  x4E,W
03ACE:  MOVWF  FE9
03AD0:  MOVLW  00
03AD2:  ADDWFC x4F,W
03AD4:  MOVWF  FEA
03AD6:  MOVFF  FEF,250
03ADA:  MOVF   x4E,W
03ADC:  MOVWF  01
03ADE:  MOVF   x4F,W
03AE0:  MOVWF  03
03AE2:  MOVF   01,W
03AE4:  MOVWF  x51
03AE6:  MOVFF  03,252
03AEA:  MOVFF  252,AEB
03AEE:  MOVFF  251,AEA
03AF2:  MOVLW  3F
03AF4:  MOVLB  A
03AF6:  MOVWF  xEC
03AF8:  MOVLB  0
03AFA:  CALL   30EA
03AFE:  MOVF   01,W
03B00:  MOVLB  2
03B02:  SUBWF  x50,W
03B04:  BTFSS  FD8.2
03B06:  BRA    3B0E
03B08:  MOVLB  0
03B0A:  GOTO   3B20
03B0E:  MOVLB  0
....................         fprintf(PC, "\t[MIS FM] CRC error -> initialize counters\r\n");
03B10:  MOVLW  50
03B12:  MOVWF  FF6
03B14:  MOVLW  0F
03B16:  MOVWF  FF7
03B18:  MOVLW  00
03B1A:  MOVWF  FF8
03B1C:  CALL   22DC
....................         
....................     }
....................     misf_counter_table[FLASH_ID_PICLOG]       = read_header_ptr->packet.payload.logdata.piclog;
03B20:  MOVLB  2
03B22:  MOVF   x4E,W
03B24:  MOVWF  FE1
03B26:  MOVF   x4F,W
03B28:  MOVWF  FE2
03B2A:  MOVLW  01
03B2C:  MOVWF  FEA
03B2E:  MOVLW  2C
03B30:  MOVWF  FE9
03B32:  MOVLW  0A
03B34:  MOVWF  01
03B36:  MOVLB  0
03B38:  MOVFF  FE6,FEE
03B3C:  DECFSZ 01,F
03B3E:  GOTO   3B38
....................     misf_counter_table[FLASH_ID_ENVIRONMENT]  = read_header_ptr->packet.payload.logdata.environment;
03B42:  MOVLW  0A
03B44:  MOVLB  2
03B46:  ADDWF  x4E,W
03B48:  MOVWF  FE1
03B4A:  MOVLW  00
03B4C:  ADDWFC x4F,W
03B4E:  MOVWF  FE2
03B50:  MOVLW  01
03B52:  MOVWF  FEA
03B54:  MOVLW  36
03B56:  MOVWF  FE9
03B58:  MOVLW  0A
03B5A:  MOVWF  01
03B5C:  MOVLB  0
03B5E:  MOVFF  FE6,FEE
03B62:  DECFSZ 01,F
03B64:  GOTO   3B5E
....................     misf_counter_table[FLASH_ID_IV1_HEADER]   = read_header_ptr->packet.payload.logdata.iv1_header;
03B68:  MOVLW  14
03B6A:  MOVLB  2
03B6C:  ADDWF  x4E,W
03B6E:  MOVWF  FE1
03B70:  MOVLW  00
03B72:  ADDWFC x4F,W
03B74:  MOVWF  FE2
03B76:  MOVLW  01
03B78:  MOVWF  FEA
03B7A:  MOVLW  40
03B7C:  MOVWF  FE9
03B7E:  MOVLW  0A
03B80:  MOVWF  01
03B82:  MOVLB  0
03B84:  MOVFF  FE6,FEE
03B88:  DECFSZ 01,F
03B8A:  GOTO   3B84
....................     misf_counter_table[FLASH_ID_IV1_DATA]     = read_header_ptr->packet.payload.logdata.iv1_data;
03B8E:  MOVLW  1E
03B90:  MOVLB  2
03B92:  ADDWF  x4E,W
03B94:  MOVWF  FE1
03B96:  MOVLW  00
03B98:  ADDWFC x4F,W
03B9A:  MOVWF  FE2
03B9C:  MOVLW  01
03B9E:  MOVWF  FEA
03BA0:  MOVLW  4A
03BA2:  MOVWF  FE9
03BA4:  MOVLW  0A
03BA6:  MOVWF  01
03BA8:  MOVLB  0
03BAA:  MOVFF  FE6,FEE
03BAE:  DECFSZ 01,F
03BB0:  GOTO   3BAA
....................     misf_counter_table[FLASH_ID_IV2_HEADER]   = read_header_ptr->packet.payload.logdata.iv2_header;
03BB4:  MOVLW  28
03BB6:  MOVLB  2
03BB8:  ADDWF  x4E,W
03BBA:  MOVWF  FE1
03BBC:  MOVLW  00
03BBE:  ADDWFC x4F,W
03BC0:  MOVWF  FE2
03BC2:  MOVLW  01
03BC4:  MOVWF  FEA
03BC6:  MOVLW  54
03BC8:  MOVWF  FE9
03BCA:  MOVLW  0A
03BCC:  MOVWF  01
03BCE:  MOVLB  0
03BD0:  MOVFF  FE6,FEE
03BD4:  DECFSZ 01,F
03BD6:  GOTO   3BD0
....................     misf_counter_table[FLASH_ID_IV2_DATA]     = read_header_ptr->packet.payload.logdata.iv2_data;
03BDA:  MOVLW  32
03BDC:  MOVLB  2
03BDE:  ADDWF  x4E,W
03BE0:  MOVWF  FE1
03BE2:  MOVLW  00
03BE4:  ADDWFC x4F,W
03BE6:  MOVWF  FE2
03BE8:  MOVLW  01
03BEA:  MOVWF  FEA
03BEC:  MOVLW  5E
03BEE:  MOVWF  FE9
03BF0:  MOVLW  0A
03BF2:  MOVWF  01
03BF4:  MOVLB  0
03BF6:  MOVFF  FE6,FEE
03BFA:  DECFSZ 01,F
03BFC:  GOTO   3BF6
.................... 
....................     print_misf_address_table();
03C00:  CALL   3156
.................... 
....................     fprintf(PC, "\tComplete\r\n");
03C04:  MOVLW  7E
03C06:  MOVWF  FF6
03C08:  MOVLW  0F
03C0A:  MOVWF  FF7
03C0C:  MOVLW  00
03C0E:  MOVWF  FF8
03C10:  CALL   22DC
03C14:  RETURN 0
.................... }
.................... 
.................... void print_misf_address_table()
.................... {
....................     fprintf(PC, "\tField\t\tCounterName\tValue\r\n");
*
03156:  MOVLW  8A
03158:  MOVWF  FF6
0315A:  MOVLW  0F
0315C:  MOVWF  FF7
0315E:  MOVLW  00
03160:  MOVWF  FF8
03162:  CALL   22DC
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
03166:  MOVLW  A6
03168:  MOVWF  FF6
0316A:  MOVLW  0F
0316C:  MOVWF  FF7
0316E:  MOVLW  00
03170:  MOVWF  FF8
03172:  CALL   22DC
....................     fprintf(PC, "\tPICLOG\t\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_PICLOG].used_counter);
03176:  MOVLW  D2
03178:  MOVWF  FF6
0317A:  MOVLW  0F
0317C:  MOVWF  FF7
0317E:  MOVLW  00
03180:  MOVWF  FF8
03182:  MOVLW  11
03184:  MOVLB  9
03186:  MOVWF  xC2
03188:  MOVLB  0
0318A:  CALL   2312
0318E:  MOVFF  12F,9E8
03192:  MOVLW  37
03194:  MOVLB  9
03196:  MOVWF  xE9
03198:  MOVLB  0
0319A:  CALL   2542
0319E:  MOVFF  12E,9E8
031A2:  MOVLW  37
031A4:  MOVLB  9
031A6:  MOVWF  xE9
031A8:  MOVLB  0
031AA:  CALL   2542
031AE:  MOVFF  12D,9E8
031B2:  MOVLW  37
031B4:  MOVLB  9
031B6:  MOVWF  xE9
031B8:  MOVLB  0
031BA:  CALL   2542
031BE:  MOVFF  12C,9E8
031C2:  MOVLW  37
031C4:  MOVLB  9
031C6:  MOVWF  xE9
031C8:  MOVLB  0
031CA:  CALL   2542
031CE:  MOVLW  0D
031D0:  BTFSS  FA6.6
031D2:  GOTO   31D0
031D6:  MOVLB  E
031D8:  MOVWF  xF9
031DA:  MOVLW  0A
031DC:  MOVLB  0
031DE:  BTFSS  FA6.6
031E0:  GOTO   31DE
031E4:  MOVLB  E
031E6:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_PICLOG].uncopied_counter);
031E8:  MOVLW  EC
031EA:  MOVWF  FF6
031EC:  MOVLW  0F
031EE:  MOVWF  FF7
031F0:  MOVLW  00
031F2:  MOVWF  FF8
031F4:  MOVLW  0E
031F6:  MOVLB  9
031F8:  MOVWF  xC2
031FA:  MOVLB  0
031FC:  CALL   2312
03200:  MOVFF  133,9E8
03204:  MOVLW  37
03206:  MOVLB  9
03208:  MOVWF  xE9
0320A:  MOVLB  0
0320C:  CALL   2542
03210:  MOVFF  132,9E8
03214:  MOVLW  37
03216:  MOVLB  9
03218:  MOVWF  xE9
0321A:  MOVLB  0
0321C:  CALL   2542
03220:  MOVFF  131,9E8
03224:  MOVLW  37
03226:  MOVLB  9
03228:  MOVWF  xE9
0322A:  MOVLB  0
0322C:  CALL   2542
03230:  MOVFF  130,9E8
03234:  MOVLW  37
03236:  MOVLB  9
03238:  MOVWF  xE9
0323A:  MOVLB  0
0323C:  CALL   2542
03240:  MOVLW  0D
03242:  BTFSS  FA6.6
03244:  GOTO   3242
03248:  MOVLB  E
0324A:  MOVWF  xF9
0324C:  MOVLW  0A
0324E:  MOVLB  0
03250:  BTFSS  FA6.6
03252:  GOTO   3250
03256:  MOVLB  E
03258:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_PICLOG].reserve_counter1,misf_counter_table[FLASH_ID_PICLOG].reserve_counter2);
0325A:  MOVLW  02
0325C:  MOVWF  FF6
0325E:  MOVLW  10
03260:  MOVWF  FF7
03262:  MOVLW  00
03264:  MOVWF  FF8
03266:  MOVLW  0E
03268:  MOVLB  9
0326A:  MOVWF  xC2
0326C:  MOVLB  0
0326E:  CALL   2312
03272:  MOVFF  134,9E8
03276:  MOVLW  37
03278:  MOVLB  9
0327A:  MOVWF  xE9
0327C:  MOVLB  0
0327E:  CALL   2542
03282:  MOVLW  14
03284:  MOVWF  FF6
03286:  MOVLW  10
03288:  MOVWF  FF7
0328A:  MOVLW  00
0328C:  MOVWF  FF8
0328E:  MOVLW  04
03290:  MOVLB  9
03292:  MOVWF  xC2
03294:  MOVLB  0
03296:  CALL   2312
0329A:  MOVFF  135,9E8
0329E:  MOVLW  37
032A0:  MOVLB  9
032A2:  MOVWF  xE9
032A4:  MOVLB  0
032A6:  CALL   2542
032AA:  MOVLW  0D
032AC:  BTFSS  FA6.6
032AE:  GOTO   32AC
032B2:  MOVLB  E
032B4:  MOVWF  xF9
032B6:  MOVLW  0A
032B8:  MOVLB  0
032BA:  BTFSS  FA6.6
032BC:  GOTO   32BA
032C0:  MOVLB  E
032C2:  MOVWF  xF9
....................     fprintf(PC, "\tENVIRO\t\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_ENVIRONMENT].used_counter);
032C4:  MOVLW  20
032C6:  MOVWF  FF6
032C8:  MOVLW  10
032CA:  MOVWF  FF7
032CC:  MOVLW  00
032CE:  MOVWF  FF8
032D0:  MOVLW  11
032D2:  MOVLB  9
032D4:  MOVWF  xC2
032D6:  MOVLB  0
032D8:  CALL   2312
032DC:  MOVFF  139,9E8
032E0:  MOVLW  37
032E2:  MOVLB  9
032E4:  MOVWF  xE9
032E6:  MOVLB  0
032E8:  CALL   2542
032EC:  MOVFF  138,9E8
032F0:  MOVLW  37
032F2:  MOVLB  9
032F4:  MOVWF  xE9
032F6:  MOVLB  0
032F8:  CALL   2542
032FC:  MOVFF  137,9E8
03300:  MOVLW  37
03302:  MOVLB  9
03304:  MOVWF  xE9
03306:  MOVLB  0
03308:  CALL   2542
0330C:  MOVFF  136,9E8
03310:  MOVLW  37
03312:  MOVLB  9
03314:  MOVWF  xE9
03316:  MOVLB  0
03318:  CALL   2542
0331C:  MOVLW  0D
0331E:  BTFSS  FA6.6
03320:  GOTO   331E
03324:  MOVLB  E
03326:  MOVWF  xF9
03328:  MOVLW  0A
0332A:  MOVLB  0
0332C:  BTFSS  FA6.6
0332E:  GOTO   332C
03332:  MOVLB  E
03334:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_ENVIRONMENT].uncopied_counter);
03336:  MOVLW  3A
03338:  MOVWF  FF6
0333A:  MOVLW  10
0333C:  MOVWF  FF7
0333E:  MOVLW  00
03340:  MOVWF  FF8
03342:  MOVLW  0E
03344:  MOVLB  9
03346:  MOVWF  xC2
03348:  MOVLB  0
0334A:  CALL   2312
0334E:  MOVFF  13D,9E8
03352:  MOVLW  37
03354:  MOVLB  9
03356:  MOVWF  xE9
03358:  MOVLB  0
0335A:  CALL   2542
0335E:  MOVFF  13C,9E8
03362:  MOVLW  37
03364:  MOVLB  9
03366:  MOVWF  xE9
03368:  MOVLB  0
0336A:  CALL   2542
0336E:  MOVFF  13B,9E8
03372:  MOVLW  37
03374:  MOVLB  9
03376:  MOVWF  xE9
03378:  MOVLB  0
0337A:  CALL   2542
0337E:  MOVFF  13A,9E8
03382:  MOVLW  37
03384:  MOVLB  9
03386:  MOVWF  xE9
03388:  MOVLB  0
0338A:  CALL   2542
0338E:  MOVLW  0D
03390:  BTFSS  FA6.6
03392:  GOTO   3390
03396:  MOVLB  E
03398:  MOVWF  xF9
0339A:  MOVLW  0A
0339C:  MOVLB  0
0339E:  BTFSS  FA6.6
033A0:  GOTO   339E
033A4:  MOVLB  E
033A6:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_ENVIRONMENT].reserve_counter1,misf_counter_table[FLASH_ID_ENVIRONMENT].reserve_counter2);
033A8:  MOVLW  50
033AA:  MOVWF  FF6
033AC:  MOVLW  10
033AE:  MOVWF  FF7
033B0:  MOVLW  00
033B2:  MOVWF  FF8
033B4:  MOVLW  0E
033B6:  MOVLB  9
033B8:  MOVWF  xC2
033BA:  MOVLB  0
033BC:  CALL   2312
033C0:  MOVFF  13E,9E8
033C4:  MOVLW  37
033C6:  MOVLB  9
033C8:  MOVWF  xE9
033CA:  MOVLB  0
033CC:  CALL   2542
033D0:  MOVLW  62
033D2:  MOVWF  FF6
033D4:  MOVLW  10
033D6:  MOVWF  FF7
033D8:  MOVLW  00
033DA:  MOVWF  FF8
033DC:  MOVLW  04
033DE:  MOVLB  9
033E0:  MOVWF  xC2
033E2:  MOVLB  0
033E4:  CALL   2312
033E8:  MOVFF  13F,9E8
033EC:  MOVLW  37
033EE:  MOVLB  9
033F0:  MOVWF  xE9
033F2:  MOVLB  0
033F4:  CALL   2542
033F8:  MOVLW  0D
033FA:  BTFSS  FA6.6
033FC:  GOTO   33FA
03400:  MOVLB  E
03402:  MOVWF  xF9
03404:  MOVLW  0A
03406:  MOVLB  0
03408:  BTFSS  FA6.6
0340A:  GOTO   3408
0340E:  MOVLB  E
03410:  MOVWF  xF9
....................     fprintf(PC, "\tIV1 HEADER\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_HEADER].used_counter);
03412:  MOVLW  6E
03414:  MOVWF  FF6
03416:  MOVLW  10
03418:  MOVWF  FF7
0341A:  MOVLW  00
0341C:  MOVWF  FF8
0341E:  MOVLW  14
03420:  MOVLB  9
03422:  MOVWF  xC2
03424:  MOVLB  0
03426:  CALL   2312
0342A:  MOVFF  143,9E8
0342E:  MOVLW  37
03430:  MOVLB  9
03432:  MOVWF  xE9
03434:  MOVLB  0
03436:  CALL   2542
0343A:  MOVFF  142,9E8
0343E:  MOVLW  37
03440:  MOVLB  9
03442:  MOVWF  xE9
03444:  MOVLB  0
03446:  CALL   2542
0344A:  MOVFF  141,9E8
0344E:  MOVLW  37
03450:  MOVLB  9
03452:  MOVWF  xE9
03454:  MOVLB  0
03456:  CALL   2542
0345A:  MOVFF  140,9E8
0345E:  MOVLW  37
03460:  MOVLB  9
03462:  MOVWF  xE9
03464:  MOVLB  0
03466:  CALL   2542
0346A:  MOVLW  0D
0346C:  BTFSS  FA6.6
0346E:  GOTO   346C
03472:  MOVLB  E
03474:  MOVWF  xF9
03476:  MOVLW  0A
03478:  MOVLB  0
0347A:  BTFSS  FA6.6
0347C:  GOTO   347A
03480:  MOVLB  E
03482:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_HEADER].uncopied_counter);
03484:  MOVLW  8A
03486:  MOVWF  FF6
03488:  MOVLW  10
0348A:  MOVWF  FF7
0348C:  MOVLW  00
0348E:  MOVWF  FF8
03490:  MOVLW  0E
03492:  MOVLB  9
03494:  MOVWF  xC2
03496:  MOVLB  0
03498:  CALL   2312
0349C:  MOVFF  147,9E8
034A0:  MOVLW  37
034A2:  MOVLB  9
034A4:  MOVWF  xE9
034A6:  MOVLB  0
034A8:  CALL   2542
034AC:  MOVFF  146,9E8
034B0:  MOVLW  37
034B2:  MOVLB  9
034B4:  MOVWF  xE9
034B6:  MOVLB  0
034B8:  CALL   2542
034BC:  MOVFF  145,9E8
034C0:  MOVLW  37
034C2:  MOVLB  9
034C4:  MOVWF  xE9
034C6:  MOVLB  0
034C8:  CALL   2542
034CC:  MOVFF  144,9E8
034D0:  MOVLW  37
034D2:  MOVLB  9
034D4:  MOVWF  xE9
034D6:  MOVLB  0
034D8:  CALL   2542
034DC:  MOVLW  0D
034DE:  BTFSS  FA6.6
034E0:  GOTO   34DE
034E4:  MOVLB  E
034E6:  MOVWF  xF9
034E8:  MOVLW  0A
034EA:  MOVLB  0
034EC:  BTFSS  FA6.6
034EE:  GOTO   34EC
034F2:  MOVLB  E
034F4:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV1_HEADER].reserve_counter1,misf_counter_table[FLASH_ID_IV1_HEADER].reserve_counter2);
034F6:  MOVLW  A0
034F8:  MOVWF  FF6
034FA:  MOVLW  10
034FC:  MOVWF  FF7
034FE:  MOVLW  00
03500:  MOVWF  FF8
03502:  MOVLW  0E
03504:  MOVLB  9
03506:  MOVWF  xC2
03508:  MOVLB  0
0350A:  CALL   2312
0350E:  MOVFF  148,9E8
03512:  MOVLW  37
03514:  MOVLB  9
03516:  MOVWF  xE9
03518:  MOVLB  0
0351A:  CALL   2542
0351E:  MOVLW  B2
03520:  MOVWF  FF6
03522:  MOVLW  10
03524:  MOVWF  FF7
03526:  MOVLW  00
03528:  MOVWF  FF8
0352A:  MOVLW  04
0352C:  MOVLB  9
0352E:  MOVWF  xC2
03530:  MOVLB  0
03532:  CALL   2312
03536:  MOVFF  149,9E8
0353A:  MOVLW  37
0353C:  MOVLB  9
0353E:  MOVWF  xE9
03540:  MOVLB  0
03542:  CALL   2542
03546:  MOVLW  0D
03548:  BTFSS  FA6.6
0354A:  GOTO   3548
0354E:  MOVLB  E
03550:  MOVWF  xF9
03552:  MOVLW  0A
03554:  MOVLB  0
03556:  BTFSS  FA6.6
03558:  GOTO   3556
0355C:  MOVLB  E
0355E:  MOVWF  xF9
....................     fprintf(PC, "\tIV1 DATA\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_DATA].used_counter);
03560:  MOVLW  BE
03562:  MOVWF  FF6
03564:  MOVLW  10
03566:  MOVWF  FF7
03568:  MOVLW  00
0356A:  MOVWF  FF8
0356C:  MOVLW  12
0356E:  MOVLB  9
03570:  MOVWF  xC2
03572:  MOVLB  0
03574:  CALL   2312
03578:  MOVFF  14D,9E8
0357C:  MOVLW  37
0357E:  MOVLB  9
03580:  MOVWF  xE9
03582:  MOVLB  0
03584:  CALL   2542
03588:  MOVFF  14C,9E8
0358C:  MOVLW  37
0358E:  MOVLB  9
03590:  MOVWF  xE9
03592:  MOVLB  0
03594:  CALL   2542
03598:  MOVFF  14B,9E8
0359C:  MOVLW  37
0359E:  MOVLB  9
035A0:  MOVWF  xE9
035A2:  MOVLB  0
035A4:  CALL   2542
035A8:  MOVFF  14A,9E8
035AC:  MOVLW  37
035AE:  MOVLB  9
035B0:  MOVWF  xE9
035B2:  MOVLB  0
035B4:  CALL   2542
035B8:  MOVLW  0D
035BA:  BTFSS  FA6.6
035BC:  GOTO   35BA
035C0:  MOVLB  E
035C2:  MOVWF  xF9
035C4:  MOVLW  0A
035C6:  MOVLB  0
035C8:  BTFSS  FA6.6
035CA:  GOTO   35C8
035CE:  MOVLB  E
035D0:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_DATA].uncopied_counter);
035D2:  MOVLW  D8
035D4:  MOVWF  FF6
035D6:  MOVLW  10
035D8:  MOVWF  FF7
035DA:  MOVLW  00
035DC:  MOVWF  FF8
035DE:  MOVLW  0E
035E0:  MOVLB  9
035E2:  MOVWF  xC2
035E4:  MOVLB  0
035E6:  CALL   2312
035EA:  MOVFF  151,9E8
035EE:  MOVLW  37
035F0:  MOVLB  9
035F2:  MOVWF  xE9
035F4:  MOVLB  0
035F6:  CALL   2542
035FA:  MOVFF  150,9E8
035FE:  MOVLW  37
03600:  MOVLB  9
03602:  MOVWF  xE9
03604:  MOVLB  0
03606:  CALL   2542
0360A:  MOVFF  14F,9E8
0360E:  MOVLW  37
03610:  MOVLB  9
03612:  MOVWF  xE9
03614:  MOVLB  0
03616:  CALL   2542
0361A:  MOVFF  14E,9E8
0361E:  MOVLW  37
03620:  MOVLB  9
03622:  MOVWF  xE9
03624:  MOVLB  0
03626:  CALL   2542
0362A:  MOVLW  0D
0362C:  BTFSS  FA6.6
0362E:  GOTO   362C
03632:  MOVLB  E
03634:  MOVWF  xF9
03636:  MOVLW  0A
03638:  MOVLB  0
0363A:  BTFSS  FA6.6
0363C:  GOTO   363A
03640:  MOVLB  E
03642:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV1_DATA].reserve_counter1,misf_counter_table[FLASH_ID_IV1_DATA].reserve_counter2);
03644:  MOVLW  EE
03646:  MOVWF  FF6
03648:  MOVLW  10
0364A:  MOVWF  FF7
0364C:  MOVLW  00
0364E:  MOVWF  FF8
03650:  MOVLW  0E
03652:  MOVLB  9
03654:  MOVWF  xC2
03656:  MOVLB  0
03658:  CALL   2312
0365C:  MOVFF  152,9E8
03660:  MOVLW  37
03662:  MOVLB  9
03664:  MOVWF  xE9
03666:  MOVLB  0
03668:  CALL   2542
0366C:  MOVLW  00
0366E:  MOVWF  FF6
03670:  MOVLW  11
03672:  MOVWF  FF7
03674:  MOVLW  00
03676:  MOVWF  FF8
03678:  MOVLW  04
0367A:  MOVLB  9
0367C:  MOVWF  xC2
0367E:  MOVLB  0
03680:  CALL   2312
03684:  MOVFF  153,9E8
03688:  MOVLW  37
0368A:  MOVLB  9
0368C:  MOVWF  xE9
0368E:  MOVLB  0
03690:  CALL   2542
03694:  MOVLW  0D
03696:  BTFSS  FA6.6
03698:  GOTO   3696
0369C:  MOVLB  E
0369E:  MOVWF  xF9
036A0:  MOVLW  0A
036A2:  MOVLB  0
036A4:  BTFSS  FA6.6
036A6:  GOTO   36A4
036AA:  MOVLB  E
036AC:  MOVWF  xF9
....................     fprintf(PC, "\tIV2 HEADER\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_HEADER].used_counter);
036AE:  MOVLW  0C
036B0:  MOVWF  FF6
036B2:  MOVLW  11
036B4:  MOVWF  FF7
036B6:  MOVLW  00
036B8:  MOVWF  FF8
036BA:  MOVLW  14
036BC:  MOVLB  9
036BE:  MOVWF  xC2
036C0:  MOVLB  0
036C2:  CALL   2312
036C6:  MOVFF  157,9E8
036CA:  MOVLW  37
036CC:  MOVLB  9
036CE:  MOVWF  xE9
036D0:  MOVLB  0
036D2:  CALL   2542
036D6:  MOVFF  156,9E8
036DA:  MOVLW  37
036DC:  MOVLB  9
036DE:  MOVWF  xE9
036E0:  MOVLB  0
036E2:  CALL   2542
036E6:  MOVFF  155,9E8
036EA:  MOVLW  37
036EC:  MOVLB  9
036EE:  MOVWF  xE9
036F0:  MOVLB  0
036F2:  CALL   2542
036F6:  MOVFF  154,9E8
036FA:  MOVLW  37
036FC:  MOVLB  9
036FE:  MOVWF  xE9
03700:  MOVLB  0
03702:  CALL   2542
03706:  MOVLW  0D
03708:  BTFSS  FA6.6
0370A:  GOTO   3708
0370E:  MOVLB  E
03710:  MOVWF  xF9
03712:  MOVLW  0A
03714:  MOVLB  0
03716:  BTFSS  FA6.6
03718:  GOTO   3716
0371C:  MOVLB  E
0371E:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_HEADER].uncopied_counter);
03720:  MOVLW  28
03722:  MOVWF  FF6
03724:  MOVLW  11
03726:  MOVWF  FF7
03728:  MOVLW  00
0372A:  MOVWF  FF8
0372C:  MOVLW  0E
0372E:  MOVLB  9
03730:  MOVWF  xC2
03732:  MOVLB  0
03734:  CALL   2312
03738:  MOVFF  15B,9E8
0373C:  MOVLW  37
0373E:  MOVLB  9
03740:  MOVWF  xE9
03742:  MOVLB  0
03744:  CALL   2542
03748:  MOVFF  15A,9E8
0374C:  MOVLW  37
0374E:  MOVLB  9
03750:  MOVWF  xE9
03752:  MOVLB  0
03754:  CALL   2542
03758:  MOVFF  159,9E8
0375C:  MOVLW  37
0375E:  MOVLB  9
03760:  MOVWF  xE9
03762:  MOVLB  0
03764:  CALL   2542
03768:  MOVFF  158,9E8
0376C:  MOVLW  37
0376E:  MOVLB  9
03770:  MOVWF  xE9
03772:  MOVLB  0
03774:  CALL   2542
03778:  MOVLW  0D
0377A:  BTFSS  FA6.6
0377C:  GOTO   377A
03780:  MOVLB  E
03782:  MOVWF  xF9
03784:  MOVLW  0A
03786:  MOVLB  0
03788:  BTFSS  FA6.6
0378A:  GOTO   3788
0378E:  MOVLB  E
03790:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV2_HEADER].reserve_counter1,misf_counter_table[FLASH_ID_IV2_HEADER].reserve_counter2);
03792:  MOVLW  3E
03794:  MOVWF  FF6
03796:  MOVLW  11
03798:  MOVWF  FF7
0379A:  MOVLW  00
0379C:  MOVWF  FF8
0379E:  MOVLW  0E
037A0:  MOVLB  9
037A2:  MOVWF  xC2
037A4:  MOVLB  0
037A6:  CALL   2312
037AA:  MOVFF  15C,9E8
037AE:  MOVLW  37
037B0:  MOVLB  9
037B2:  MOVWF  xE9
037B4:  MOVLB  0
037B6:  CALL   2542
037BA:  MOVLW  50
037BC:  MOVWF  FF6
037BE:  MOVLW  11
037C0:  MOVWF  FF7
037C2:  MOVLW  00
037C4:  MOVWF  FF8
037C6:  MOVLW  04
037C8:  MOVLB  9
037CA:  MOVWF  xC2
037CC:  MOVLB  0
037CE:  CALL   2312
037D2:  MOVFF  15D,9E8
037D6:  MOVLW  37
037D8:  MOVLB  9
037DA:  MOVWF  xE9
037DC:  MOVLB  0
037DE:  CALL   2542
037E2:  MOVLW  0D
037E4:  BTFSS  FA6.6
037E6:  GOTO   37E4
037EA:  MOVLB  E
037EC:  MOVWF  xF9
037EE:  MOVLW  0A
037F0:  MOVLB  0
037F2:  BTFSS  FA6.6
037F4:  GOTO   37F2
037F8:  MOVLB  E
037FA:  MOVWF  xF9
....................     fprintf(PC, "\tIV2 DATA\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_DATA].used_counter);
037FC:  MOVLW  5C
037FE:  MOVWF  FF6
03800:  MOVLW  11
03802:  MOVWF  FF7
03804:  MOVLW  00
03806:  MOVWF  FF8
03808:  MOVLW  12
0380A:  MOVLB  9
0380C:  MOVWF  xC2
0380E:  MOVLB  0
03810:  CALL   2312
03814:  MOVFF  161,9E8
03818:  MOVLW  37
0381A:  MOVLB  9
0381C:  MOVWF  xE9
0381E:  MOVLB  0
03820:  CALL   2542
03824:  MOVFF  160,9E8
03828:  MOVLW  37
0382A:  MOVLB  9
0382C:  MOVWF  xE9
0382E:  MOVLB  0
03830:  CALL   2542
03834:  MOVFF  15F,9E8
03838:  MOVLW  37
0383A:  MOVLB  9
0383C:  MOVWF  xE9
0383E:  MOVLB  0
03840:  CALL   2542
03844:  MOVFF  15E,9E8
03848:  MOVLW  37
0384A:  MOVLB  9
0384C:  MOVWF  xE9
0384E:  MOVLB  0
03850:  CALL   2542
03854:  MOVLW  0D
03856:  BTFSS  FA6.6
03858:  GOTO   3856
0385C:  MOVLB  E
0385E:  MOVWF  xF9
03860:  MOVLW  0A
03862:  MOVLB  0
03864:  BTFSS  FA6.6
03866:  GOTO   3864
0386A:  MOVLB  E
0386C:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_DATA].uncopied_counter);
0386E:  MOVLW  76
03870:  MOVWF  FF6
03872:  MOVLW  11
03874:  MOVWF  FF7
03876:  MOVLW  00
03878:  MOVWF  FF8
0387A:  MOVLW  0E
0387C:  MOVLB  9
0387E:  MOVWF  xC2
03880:  MOVLB  0
03882:  CALL   2312
03886:  MOVFF  165,9E8
0388A:  MOVLW  37
0388C:  MOVLB  9
0388E:  MOVWF  xE9
03890:  MOVLB  0
03892:  CALL   2542
03896:  MOVFF  164,9E8
0389A:  MOVLW  37
0389C:  MOVLB  9
0389E:  MOVWF  xE9
038A0:  MOVLB  0
038A2:  CALL   2542
038A6:  MOVFF  163,9E8
038AA:  MOVLW  37
038AC:  MOVLB  9
038AE:  MOVWF  xE9
038B0:  MOVLB  0
038B2:  CALL   2542
038B6:  MOVFF  162,9E8
038BA:  MOVLW  37
038BC:  MOVLB  9
038BE:  MOVWF  xE9
038C0:  MOVLB  0
038C2:  CALL   2542
038C6:  MOVLW  0D
038C8:  BTFSS  FA6.6
038CA:  GOTO   38C8
038CE:  MOVLB  E
038D0:  MOVWF  xF9
038D2:  MOVLW  0A
038D4:  MOVLB  0
038D6:  BTFSS  FA6.6
038D8:  GOTO   38D6
038DC:  MOVLB  E
038DE:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV2_DATA].reserve_counter1,misf_counter_table[FLASH_ID_IV2_DATA].reserve_counter2);
038E0:  MOVLW  8C
038E2:  MOVWF  FF6
038E4:  MOVLW  11
038E6:  MOVWF  FF7
038E8:  MOVLW  00
038EA:  MOVWF  FF8
038EC:  MOVLW  0E
038EE:  MOVLB  9
038F0:  MOVWF  xC2
038F2:  MOVLB  0
038F4:  CALL   2312
038F8:  MOVFF  166,9E8
038FC:  MOVLW  37
038FE:  MOVLB  9
03900:  MOVWF  xE9
03902:  MOVLB  0
03904:  CALL   2542
03908:  MOVLW  9E
0390A:  MOVWF  FF6
0390C:  MOVLW  11
0390E:  MOVWF  FF7
03910:  MOVLW  00
03912:  MOVWF  FF8
03914:  MOVLW  04
03916:  MOVLB  9
03918:  MOVWF  xC2
0391A:  MOVLB  0
0391C:  CALL   2312
03920:  MOVFF  167,9E8
03924:  MOVLW  37
03926:  MOVLB  9
03928:  MOVWF  xE9
0392A:  MOVLB  0
0392C:  CALL   2542
03930:  MOVLW  0D
03932:  BTFSS  FA6.6
03934:  GOTO   3932
03938:  MOVLB  E
0393A:  MOVWF  xF9
0393C:  MOVLW  0A
0393E:  MOVLB  0
03940:  BTFSS  FA6.6
03942:  GOTO   3940
03946:  MOVLB  E
03948:  MOVWF  xF9
....................     fprintf(PC, "\t==================================================\r\n");
0394A:  MOVLW  AA
0394C:  MOVWF  FF6
0394E:  MOVLW  11
03950:  MOVWF  FF7
03952:  MOVLW  00
03954:  MOVWF  FF8
03956:  MOVLB  0
03958:  CALL   22DC
0395C:  RETURN 0
.................... }
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size)
.................... {
....................     /*
....................     fprintf(PC, "[MIS FM] Write Data Size:%lu\r\n", size);
....................     fprintf(PC, "%08LX\r\n", MISF_ADDRESS_TABLE[id].start);
....................     fprintf(PC, "%08LX\r\n", misf_counter_table[id].used_counter);
....................     fprintf(PC, "%08LX\r\n", misf_counter_table[id].reserve_counter1);
....................     for (unsigned int32 j = 0; j < size; j++) {
....................         fprintf(PC, "%02X ", data_ptr[j]);
....................     }
....................     fprintf(PC, "\r\n");
....................     */
....................     // パケット境界チェック
....................     if (size == PACKET_SIZE){
*
0428C:  MOVLB  A
0428E:  MOVF   x52,W
04290:  SUBLW  40
04292:  BTFSC  FD8.2
04294:  BRA    429C
04296:  MOVLB  0
04298:  GOTO   4412
0429C:  MOVLB  0
0429E:  MOVLB  A
042A0:  MOVF   x53,F
042A2:  BTFSC  FD8.2
042A4:  BRA    42AC
042A6:  MOVLB  0
042A8:  GOTO   4412
042AC:  MOVLB  0
....................         // fprintf(PC, "PACKET SIZE 64\r\n");
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
042AE:  MOVLB  A
042B0:  MOVF   x4F,W
042B2:  MULLW  0C
042B4:  MOVF   FF3,W
042B6:  CLRF   xEB
042B8:  MOVWF  xEA
042BA:  MOVFF  AEB,03
042BE:  MOVF   xEA,W
042C0:  MOVLB  0
042C2:  CALL   00E6
042C6:  MOVWF  00
042C8:  TBLRD*+
042CA:  MOVFF  FF5,01
042CE:  TBLRD*+
042D0:  MOVFF  FF5,02
042D4:  TBLRD*+
042D6:  MOVFF  FF5,03
042DA:  MOVFF  03,AEF
042DE:  MOVFF  02,AEE
042E2:  MOVFF  01,AED
042E6:  MOVFF  00,AEC
042EA:  MOVLB  A
042EC:  MOVF   x4F,W
042EE:  MULLW  0A
042F0:  MOVF   FF3,W
042F2:  CLRF   xF1
042F4:  MOVWF  xF0
042F6:  MOVLW  22
042F8:  ADDWF  xF0,W
042FA:  MOVWF  FE9
042FC:  MOVLW  01
042FE:  ADDWFC xF1,W
04300:  MOVWF  FEA
04302:  MOVFF  FEF,00
04306:  MOVFF  FEC,01
0430A:  MOVFF  FEC,02
0430E:  MOVFF  FEC,03
04312:  MOVF   FED,F
04314:  MOVF   FED,F
04316:  MOVF   FED,F
04318:  MOVF   00,W
0431A:  ADDWF  xEC,W
0431C:  MOVWF  x54
0431E:  MOVF   01,W
04320:  ADDWFC xED,W
04322:  MOVWF  x55
04324:  MOVF   02,W
04326:  ADDWFC xEE,W
04328:  MOVWF  x56
0432A:  MOVF   03,W
0432C:  ADDWFC xEF,W
0432E:  MOVWF  x57
04330:  MOVLB  0
....................         write_data_bytes(mis_fm, write_address, data_ptr, size);
04332:  MOVFF  115,AED
04336:  MOVFF  114,AEC
0433A:  MOVFF  113,AEB
0433E:  MOVFF  112,AEA
04342:  MOVFF  A57,AF1
04346:  MOVFF  A56,AF0
0434A:  MOVFF  A55,AEF
0434E:  MOVFF  A54,AEE
04352:  MOVFF  A51,AF3
04356:  MOVFF  A50,AF2
0435A:  MOVFF  A53,AF5
0435E:  MOVFF  A52,AF4
04362:  CALL   3F34
....................         // for (unsigned int32 j = 0; j < size; j++) {
....................             // fprintf(PC, "%02X ", data_ptr[j]);
....................         // }
....................         misf_counter_table[id].used_counter     += size;
04366:  MOVLB  A
04368:  MOVF   x4F,W
0436A:  MULLW  0A
0436C:  MOVF   FF3,W
0436E:  CLRF   xEB
04370:  MOVWF  xEA
04372:  MOVLW  22
04374:  ADDWF  xEA,W
04376:  MOVWF  FE9
04378:  MOVLW  01
0437A:  ADDWFC xEB,W
0437C:  MOVWF  FEA
0437E:  MOVF   x52,W
04380:  ADDWF  FEF,W
04382:  MOVWF  00
04384:  MOVF   x53,W
04386:  ADDWFC FEC,W
04388:  MOVWF  01
0438A:  MOVLW  00
0438C:  ADDWFC FEC,W
0438E:  MOVWF  02
04390:  MOVLW  00
04392:  ADDWFC FEC,W
04394:  MOVWF  03
04396:  MOVF   FED,F
04398:  MOVF   FED,F
0439A:  MOVF   FED,F
0439C:  MOVFF  00,FEF
043A0:  MOVFF  01,FEC
043A4:  MOVFF  02,FEC
043A8:  MOVFF  03,FEC
043AC:  MOVF   FED,F
043AE:  MOVF   FED,F
043B0:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += size;
043B2:  MOVF   x4F,W
043B4:  MULLW  0A
043B6:  MOVF   FF3,W
043B8:  CLRF   xEB
043BA:  MOVWF  xEA
043BC:  MOVLW  04
043BE:  ADDWF  xEA,W
043C0:  MOVWF  01
043C2:  MOVLW  00
043C4:  ADDWFC xEB,W
043C6:  MOVWF  03
043C8:  MOVF   01,W
043CA:  ADDLW  22
043CC:  MOVWF  FE9
043CE:  MOVLW  01
043D0:  ADDWFC 03,W
043D2:  MOVWF  FEA
043D4:  MOVF   x52,W
043D6:  ADDWF  FEF,W
043D8:  MOVWF  00
043DA:  MOVF   x53,W
043DC:  ADDWFC FEC,W
043DE:  MOVWF  01
043E0:  MOVLW  00
043E2:  ADDWFC FEC,W
043E4:  MOVWF  02
043E6:  MOVLW  00
043E8:  ADDWFC FEC,W
043EA:  MOVWF  03
043EC:  MOVF   FED,F
043EE:  MOVF   FED,F
043F0:  MOVF   FED,F
043F2:  MOVFF  00,FEF
043F6:  MOVFF  01,FEC
043FA:  MOVFF  02,FEC
043FE:  MOVFF  03,FEC
04402:  MOVF   FED,F
04404:  MOVF   FED,F
04406:  MOVF   FED,F
.................... 
....................         return;
04408:  MOVLB  0
0440A:  GOTO   4BD6
....................     }
0440E:  GOTO   4A48
....................     
....................     else if (misf_counter_table[id].reserve_counter1 + size == PACKET_SIZE-1) {
04412:  MOVLB  A
04414:  MOVF   x4F,W
04416:  MULLW  0A
04418:  MOVF   FF3,W
0441A:  CLRF   xEB
0441C:  MOVWF  xEA
0441E:  MOVLW  08
04420:  ADDWF  xEA,W
04422:  MOVWF  01
04424:  MOVLW  00
04426:  ADDWFC xEB,W
04428:  MOVWF  03
0442A:  MOVF   01,W
0442C:  ADDLW  22
0442E:  MOVWF  FE9
04430:  MOVLW  01
04432:  ADDWFC 03,W
04434:  MOVWF  FEA
04436:  MOVF   FEF,W
04438:  ADDWF  x52,W
0443A:  MOVWF  xEA
0443C:  MOVLW  00
0443E:  ADDWFC x53,W
04440:  MOVWF  xEB
04442:  MOVF   xEA,W
04444:  SUBLW  3F
04446:  BTFSC  FD8.2
04448:  BRA    4450
0444A:  MOVLB  0
0444C:  GOTO   4706
04450:  MOVLB  0
04452:  MOVLB  A
04454:  MOVF   xEB,F
04456:  BTFSC  FD8.2
04458:  BRA    4460
0445A:  MOVLB  0
0445C:  GOTO   4706
04460:  MOVLB  0
....................         unsigned int8 blank_size = PACKET_SIZE - 1 - misf_counter_table[id].reserve_counter1;
....................         // fprintf(PC, "0x%02X", blank_size);
....................         unsigned int8 blank_data[PACKET_SIZE];
04462:  MOVLB  A
04464:  MOVF   x4F,W
04466:  MULLW  0A
04468:  MOVF   FF3,W
0446A:  CLRF   xEB
0446C:  MOVWF  xEA
0446E:  MOVLW  08
04470:  ADDWF  xEA,W
04472:  MOVWF  01
04474:  MOVLW  00
04476:  ADDWFC xEB,W
04478:  MOVWF  03
0447A:  MOVF   01,W
0447C:  ADDLW  22
0447E:  MOVWF  FE9
04480:  MOVLW  01
04482:  ADDWFC 03,W
04484:  MOVWF  FEA
04486:  MOVF   FEF,W
04488:  XORLW  FF
0448A:  ADDLW  40
0448C:  MOVWF  x58
0448E:  MOVLB  0
....................         memset(blank_data, 0, blank_size);
04490:  MOVLW  0A
04492:  MOVWF  FEA
04494:  MOVLW  59
04496:  MOVWF  FE9
04498:  CLRF   00
0449A:  CLRF   02
0449C:  MOVFF  A58,01
044A0:  CALL   234C
.................... 
....................         // アドレス再計算
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
044A4:  MOVLB  A
044A6:  MOVF   x4F,W
044A8:  MULLW  0C
044AA:  MOVF   FF3,W
044AC:  CLRF   xEB
044AE:  MOVWF  xEA
044B0:  MOVFF  AEB,03
044B4:  MOVF   xEA,W
044B6:  MOVLB  0
044B8:  CALL   00E6
044BC:  MOVWF  00
044BE:  TBLRD*+
044C0:  MOVFF  FF5,01
044C4:  TBLRD*+
044C6:  MOVFF  FF5,02
044CA:  TBLRD*+
044CC:  MOVFF  FF5,03
044D0:  MOVFF  03,AEF
044D4:  MOVFF  02,AEE
044D8:  MOVFF  01,AED
044DC:  MOVFF  00,AEC
044E0:  MOVLB  A
044E2:  MOVF   x4F,W
044E4:  MULLW  0A
044E6:  MOVF   FF3,W
044E8:  CLRF   xF1
044EA:  MOVWF  xF0
044EC:  MOVLW  22
044EE:  ADDWF  xF0,W
044F0:  MOVWF  FE9
044F2:  MOVLW  01
044F4:  ADDWFC xF1,W
044F6:  MOVWF  FEA
044F8:  MOVFF  FEF,00
044FC:  MOVFF  FEC,01
04500:  MOVFF  FEC,02
04504:  MOVFF  FEC,03
04508:  MOVF   FED,F
0450A:  MOVF   FED,F
0450C:  MOVF   FED,F
0450E:  MOVF   00,W
04510:  ADDWF  xEC,W
04512:  MOVWF  x99
04514:  MOVF   01,W
04516:  ADDWFC xED,W
04518:  MOVWF  x9A
0451A:  MOVF   02,W
0451C:  ADDWFC xEE,W
0451E:  MOVWF  x9B
04520:  MOVF   03,W
04522:  ADDWFC xEF,W
04524:  MOVWF  x9C
.................... 
....................         // 未使用部分を 0 埋め
....................         write_data_bytes(mis_fm, write_address, blank_data, blank_size);
04526:  MOVFF  115,AED
0452A:  MOVFF  114,AEC
0452E:  MOVFF  113,AEB
04532:  MOVFF  112,AEA
04536:  MOVFF  A9C,AF1
0453A:  MOVFF  A9B,AF0
0453E:  MOVFF  A9A,AEF
04542:  MOVFF  A99,AEE
04546:  MOVLW  0A
04548:  MOVWF  xF3
0454A:  MOVLW  59
0454C:  MOVWF  xF2
0454E:  CLRF   xF5
04550:  MOVFF  A58,AF4
04554:  MOVLB  0
04556:  CALL   3F34
.................... 
....................         // CRC 計算（本体部分だけ読む）
....................         unsigned int8 packet_data[PACKET_SIZE - 1];
....................         unsigned int32 read_address = write_address + blank_size - PACKET_SIZE - 1;
0455A:  MOVLB  A
0455C:  MOVF   x58,W
0455E:  ADDWF  x99,W
04560:  MOVWF  xEA
04562:  MOVLW  00
04564:  ADDWFC x9A,W
04566:  MOVWF  xEB
04568:  MOVLW  00
0456A:  ADDWFC x9B,W
0456C:  MOVWF  xEC
0456E:  MOVLW  00
04570:  ADDWFC x9C,W
04572:  MOVWF  xED
04574:  MOVLW  40
04576:  SUBWF  xEA,F
04578:  MOVLW  00
0457A:  SUBWFB xEB,F
0457C:  MOVLW  00
0457E:  SUBWFB xEC,F
04580:  MOVLW  00
04582:  SUBWFB xED,F
04584:  MOVLW  01
04586:  SUBWF  xEA,W
04588:  MOVWF  xDC
0458A:  MOVLW  00
0458C:  SUBWFB xEB,W
0458E:  MOVWF  xDD
04590:  MOVLW  00
04592:  SUBWFB xEC,W
04594:  MOVWF  xDE
04596:  MOVLW  00
04598:  SUBWFB xED,W
0459A:  MOVWF  xDF
....................         read_data_bytes(mis_fm, read_address, packet_data, PACKET_SIZE - 1);
0459C:  MOVFF  115,AED
045A0:  MOVFF  114,AEC
045A4:  MOVFF  113,AEB
045A8:  MOVFF  112,AEA
045AC:  MOVFF  ADF,AF1
045B0:  MOVFF  ADE,AF0
045B4:  MOVFF  ADD,AEF
045B8:  MOVFF  ADC,AEE
045BC:  MOVLW  0A
045BE:  MOVWF  xF3
045C0:  MOVLW  9D
045C2:  MOVWF  xF2
045C4:  CLRF   xF7
045C6:  CLRF   xF6
045C8:  CLRF   xF5
045CA:  MOVLW  3F
045CC:  MOVWF  xF4
045CE:  MOVLB  0
045D0:  CALL   2ECA
....................         unsigned int8 crc = calc_crc8(packet_data, PACKET_SIZE - 1);
045D4:  MOVLW  0A
045D6:  MOVLB  A
045D8:  MOVWF  xEB
045DA:  MOVLW  9D
045DC:  MOVWF  xEA
045DE:  MOVLW  3F
045E0:  MOVWF  xEC
045E2:  MOVLB  0
045E4:  CALL   30EA
045E8:  MOVFF  01,AE0
....................         // fprintf(PC, "0x%02X", crc);
....................         // CRC 書き込み
....................         write_address += blank_size;
045EC:  MOVLB  A
045EE:  MOVF   x58,W
045F0:  ADDWF  x99,F
045F2:  MOVLW  00
045F4:  ADDWFC x9A,F
045F6:  MOVLW  00
045F8:  ADDWFC x9B,F
045FA:  MOVLW  00
045FC:  ADDWFC x9C,F
....................         write_data_bytes(mis_fm, write_address, &crc, 1);
045FE:  MOVFF  115,AED
04602:  MOVFF  114,AEC
04606:  MOVFF  113,AEB
0460A:  MOVFF  112,AEA
0460E:  MOVFF  A9C,AF1
04612:  MOVFF  A9B,AF0
04616:  MOVFF  A9A,AEF
0461A:  MOVFF  A99,AEE
0461E:  MOVLW  0A
04620:  MOVWF  xF3
04622:  MOVLW  E0
04624:  MOVWF  xF2
04626:  CLRF   xF5
04628:  MOVLW  01
0462A:  MOVWF  xF4
0462C:  MOVLB  0
0462E:  CALL   3F34
.................... 
....................         // カウンタ更新
....................         misf_counter_table[id].used_counter     += blank_size + 1;
04632:  MOVLB  A
04634:  MOVF   x4F,W
04636:  MULLW  0A
04638:  MOVF   FF3,W
0463A:  CLRF   xEB
0463C:  MOVWF  xEA
0463E:  MOVLW  22
04640:  ADDWF  xEA,W
04642:  MOVWF  FE9
04644:  MOVLW  01
04646:  ADDWFC xEB,W
04648:  MOVWF  FEA
0464A:  MOVLW  01
0464C:  ADDWF  x58,W
0464E:  ADDWF  FEF,W
04650:  MOVWF  00
04652:  MOVLW  00
04654:  ADDWFC FEC,W
04656:  MOVWF  01
04658:  MOVLW  00
0465A:  ADDWFC FEC,W
0465C:  MOVWF  02
0465E:  MOVLW  00
04660:  ADDWFC FEC,W
04662:  MOVWF  03
04664:  MOVF   FED,F
04666:  MOVF   FED,F
04668:  MOVF   FED,F
0466A:  MOVFF  00,FEF
0466E:  MOVFF  01,FEC
04672:  MOVFF  02,FEC
04676:  MOVFF  03,FEC
0467A:  MOVF   FED,F
0467C:  MOVF   FED,F
0467E:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += blank_size + 1;
04680:  MOVF   x4F,W
04682:  MULLW  0A
04684:  MOVF   FF3,W
04686:  CLRF   xEB
04688:  MOVWF  xEA
0468A:  MOVLW  04
0468C:  ADDWF  xEA,W
0468E:  MOVWF  01
04690:  MOVLW  00
04692:  ADDWFC xEB,W
04694:  MOVWF  03
04696:  MOVF   01,W
04698:  ADDLW  22
0469A:  MOVWF  FE9
0469C:  MOVLW  01
0469E:  ADDWFC 03,W
046A0:  MOVWF  FEA
046A2:  MOVLW  01
046A4:  ADDWF  x58,W
046A6:  ADDWF  FEF,W
046A8:  MOVWF  00
046AA:  MOVLW  00
046AC:  ADDWFC FEC,W
046AE:  MOVWF  01
046B0:  MOVLW  00
046B2:  ADDWFC FEC,W
046B4:  MOVWF  02
046B6:  MOVLW  00
046B8:  ADDWFC FEC,W
046BA:  MOVWF  03
046BC:  MOVF   FED,F
046BE:  MOVF   FED,F
046C0:  MOVF   FED,F
046C2:  MOVFF  00,FEF
046C6:  MOVFF  01,FEC
046CA:  MOVFF  02,FEC
046CE:  MOVFF  03,FEC
046D2:  MOVF   FED,F
046D4:  MOVF   FED,F
046D6:  MOVF   FED,F
....................         misf_counter_table[id].reserve_counter1  = 0;
046D8:  MOVF   x4F,W
046DA:  MULLW  0A
046DC:  MOVF   FF3,W
046DE:  CLRF   xEB
046E0:  MOVWF  xEA
046E2:  MOVLW  08
046E4:  ADDWF  xEA,W
046E6:  MOVWF  01
046E8:  MOVLW  00
046EA:  ADDWFC xEB,W
046EC:  MOVWF  03
046EE:  MOVF   01,W
046F0:  ADDLW  22
046F2:  MOVWF  FE9
046F4:  MOVLW  01
046F6:  ADDWFC 03,W
046F8:  MOVWF  FEA
046FA:  CLRF   FEF
....................         return;
046FC:  MOVLB  0
046FE:  GOTO   4BD6
.................... 
....................     }else  if(misf_counter_table[id].reserve_counter1 + size == PACKET_SIZE-1){
04702:  GOTO   4A48
04706:  MOVLB  A
04708:  MOVF   x4F,W
0470A:  MULLW  0A
0470C:  MOVF   FF3,W
0470E:  CLRF   xEB
04710:  MOVWF  xEA
04712:  MOVLW  08
04714:  ADDWF  xEA,W
04716:  MOVWF  01
04718:  MOVLW  00
0471A:  ADDWFC xEB,W
0471C:  MOVWF  03
0471E:  MOVF   01,W
04720:  ADDLW  22
04722:  MOVWF  FE9
04724:  MOVLW  01
04726:  ADDWFC 03,W
04728:  MOVWF  FEA
0472A:  MOVF   FEF,W
0472C:  ADDWF  x52,W
0472E:  MOVWF  xEA
04730:  MOVLW  00
04732:  ADDWFC x53,W
04734:  MOVWF  xEB
04736:  MOVF   xEA,W
04738:  SUBLW  3F
0473A:  BTFSC  FD8.2
0473C:  BRA    4744
0473E:  MOVLB  0
04740:  GOTO   4A48
04744:  MOVLB  0
04746:  MOVLB  A
04748:  MOVF   xEB,F
0474A:  BTFSC  FD8.2
0474C:  BRA    4754
0474E:  MOVLB  0
04750:  GOTO   4A48
04754:  MOVLB  0
....................         // データ書き込み
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
04756:  MOVLB  A
04758:  MOVF   x4F,W
0475A:  MULLW  0C
0475C:  MOVF   FF3,W
0475E:  CLRF   xEB
04760:  MOVWF  xEA
04762:  MOVFF  AEB,03
04766:  MOVF   xEA,W
04768:  MOVLB  0
0476A:  CALL   00E6
0476E:  MOVWF  00
04770:  TBLRD*+
04772:  MOVFF  FF5,01
04776:  TBLRD*+
04778:  MOVFF  FF5,02
0477C:  TBLRD*+
0477E:  MOVFF  FF5,03
04782:  MOVFF  03,AEF
04786:  MOVFF  02,AEE
0478A:  MOVFF  01,AED
0478E:  MOVFF  00,AEC
04792:  MOVLB  A
04794:  MOVF   x4F,W
04796:  MULLW  0A
04798:  MOVF   FF3,W
0479A:  CLRF   xF1
0479C:  MOVWF  xF0
0479E:  MOVLW  22
047A0:  ADDWF  xF0,W
047A2:  MOVWF  FE9
047A4:  MOVLW  01
047A6:  ADDWFC xF1,W
047A8:  MOVWF  FEA
047AA:  MOVFF  FEF,00
047AE:  MOVFF  FEC,01
047B2:  MOVFF  FEC,02
047B6:  MOVFF  FEC,03
047BA:  MOVF   FED,F
047BC:  MOVF   FED,F
047BE:  MOVF   FED,F
047C0:  MOVF   00,W
047C2:  ADDWF  xEC,W
047C4:  MOVWF  xE1
047C6:  MOVF   01,W
047C8:  ADDWFC xED,W
047CA:  MOVWF  xE2
047CC:  MOVF   02,W
047CE:  ADDWFC xEE,W
047D0:  MOVWF  xE3
047D2:  MOVF   03,W
047D4:  ADDWFC xEF,W
047D6:  MOVWF  xE4
047D8:  MOVLB  0
....................         write_data_bytes(mis_fm, write_address, data_ptr, size);
047DA:  MOVFF  115,AED
047DE:  MOVFF  114,AEC
047E2:  MOVFF  113,AEB
047E6:  MOVFF  112,AEA
047EA:  MOVFF  AE4,AF1
047EE:  MOVFF  AE3,AF0
047F2:  MOVFF  AE2,AEF
047F6:  MOVFF  AE1,AEE
047FA:  MOVFF  A51,AF3
047FE:  MOVFF  A50,AF2
04802:  MOVFF  A53,AF5
04806:  MOVFF  A52,AF4
0480A:  CALL   3F34
....................         // fprintf(PC, "ADDRESS 0x%08LX DATA ", write_address);
....................         // for (unsigned int32 j = 0; j < size; j++) {
....................             // fprintf(PC, "%02X ", data_ptr[j]);
....................         // }
....................         // fprintf(PC, "\Sr\n");
.................... 
....................         misf_counter_table[id].used_counter     += size;
0480E:  MOVLB  A
04810:  MOVF   x4F,W
04812:  MULLW  0A
04814:  MOVF   FF3,W
04816:  CLRF   xEB
04818:  MOVWF  xEA
0481A:  MOVLW  22
0481C:  ADDWF  xEA,W
0481E:  MOVWF  FE9
04820:  MOVLW  01
04822:  ADDWFC xEB,W
04824:  MOVWF  FEA
04826:  MOVF   x52,W
04828:  ADDWF  FEF,W
0482A:  MOVWF  00
0482C:  MOVF   x53,W
0482E:  ADDWFC FEC,W
04830:  MOVWF  01
04832:  MOVLW  00
04834:  ADDWFC FEC,W
04836:  MOVWF  02
04838:  MOVLW  00
0483A:  ADDWFC FEC,W
0483C:  MOVWF  03
0483E:  MOVF   FED,F
04840:  MOVF   FED,F
04842:  MOVF   FED,F
04844:  MOVFF  00,FEF
04848:  MOVFF  01,FEC
0484C:  MOVFF  02,FEC
04850:  MOVFF  03,FEC
04854:  MOVF   FED,F
04856:  MOVF   FED,F
04858:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += size;
0485A:  MOVF   x4F,W
0485C:  MULLW  0A
0485E:  MOVF   FF3,W
04860:  CLRF   xEB
04862:  MOVWF  xEA
04864:  MOVLW  04
04866:  ADDWF  xEA,W
04868:  MOVWF  01
0486A:  MOVLW  00
0486C:  ADDWFC xEB,W
0486E:  MOVWF  03
04870:  MOVF   01,W
04872:  ADDLW  22
04874:  MOVWF  FE9
04876:  MOVLW  01
04878:  ADDWFC 03,W
0487A:  MOVWF  FEA
0487C:  MOVF   x52,W
0487E:  ADDWF  FEF,W
04880:  MOVWF  00
04882:  MOVF   x53,W
04884:  ADDWFC FEC,W
04886:  MOVWF  01
04888:  MOVLW  00
0488A:  ADDWFC FEC,W
0488C:  MOVWF  02
0488E:  MOVLW  00
04890:  ADDWFC FEC,W
04892:  MOVWF  03
04894:  MOVF   FED,F
04896:  MOVF   FED,F
04898:  MOVF   FED,F
0489A:  MOVFF  00,FEF
0489E:  MOVFF  01,FEC
048A2:  MOVFF  02,FEC
048A6:  MOVFF  03,FEC
048AA:  MOVF   FED,F
048AC:  MOVF   FED,F
048AE:  MOVF   FED,F
....................         unsigned int8 crc = calc_crc8(data_ptr, size);
048B0:  MOVFF  A51,AEB
048B4:  MOVFF  A50,AEA
048B8:  MOVFF  A52,AEC
048BC:  MOVLB  0
048BE:  CALL   30EA
048C2:  MOVFF  01,AE5
.................... 
....................         // CRC 書き込み
....................         write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
048C6:  MOVLB  A
048C8:  MOVF   x4F,W
048CA:  MULLW  0C
048CC:  MOVF   FF3,W
048CE:  CLRF   xEB
048D0:  MOVWF  xEA
048D2:  MOVFF  AEB,03
048D6:  MOVF   xEA,W
048D8:  MOVLB  0
048DA:  CALL   00E6
048DE:  MOVWF  00
048E0:  TBLRD*+
048E2:  MOVFF  FF5,01
048E6:  TBLRD*+
048E8:  MOVFF  FF5,02
048EC:  TBLRD*+
048EE:  MOVFF  FF5,03
048F2:  MOVFF  03,AEF
048F6:  MOVFF  02,AEE
048FA:  MOVFF  01,AED
048FE:  MOVFF  00,AEC
04902:  MOVLB  A
04904:  MOVF   x4F,W
04906:  MULLW  0A
04908:  MOVF   FF3,W
0490A:  CLRF   xF1
0490C:  MOVWF  xF0
0490E:  MOVLW  22
04910:  ADDWF  xF0,W
04912:  MOVWF  FE9
04914:  MOVLW  01
04916:  ADDWFC xF1,W
04918:  MOVWF  FEA
0491A:  MOVFF  FEF,00
0491E:  MOVFF  FEC,01
04922:  MOVFF  FEC,02
04926:  MOVFF  FEC,03
0492A:  MOVF   FED,F
0492C:  MOVF   FED,F
0492E:  MOVF   FED,F
04930:  MOVF   00,W
04932:  ADDWF  xEC,W
04934:  MOVWF  xE1
04936:  MOVF   01,W
04938:  ADDWFC xED,W
0493A:  MOVWF  xE2
0493C:  MOVF   02,W
0493E:  ADDWFC xEE,W
04940:  MOVWF  xE3
04942:  MOVF   03,W
04944:  ADDWFC xEF,W
04946:  MOVWF  xE4
....................         write_data_bytes(mis_fm, write_address, &crc, 1);
04948:  MOVFF  115,AED
0494C:  MOVFF  114,AEC
04950:  MOVFF  113,AEB
04954:  MOVFF  112,AEA
04958:  MOVFF  AE4,AF1
0495C:  MOVFF  AE3,AF0
04960:  MOVFF  AE2,AEF
04964:  MOVFF  AE1,AEE
04968:  MOVLW  0A
0496A:  MOVWF  xF3
0496C:  MOVLW  E5
0496E:  MOVWF  xF2
04970:  CLRF   xF5
04972:  MOVLW  01
04974:  MOVWF  xF4
04976:  MOVLB  0
04978:  CALL   3F34
.................... 
....................         // カウンタ更新
....................         misf_counter_table[id].used_counter     += 1;
0497C:  MOVLB  A
0497E:  MOVF   x4F,W
04980:  MULLW  0A
04982:  MOVF   FF3,W
04984:  CLRF   xEB
04986:  MOVWF  xEA
04988:  MOVLW  22
0498A:  ADDWF  xEA,W
0498C:  MOVWF  FE9
0498E:  MOVLW  01
04990:  ADDWFC xEB,W
04992:  MOVWF  FEA
04994:  MOVLW  01
04996:  ADDWF  FEF,W
04998:  MOVWF  00
0499A:  MOVLW  00
0499C:  ADDWFC FEC,W
0499E:  MOVWF  01
049A0:  MOVLW  00
049A2:  ADDWFC FEC,W
049A4:  MOVWF  02
049A6:  MOVLW  00
049A8:  ADDWFC FEC,W
049AA:  MOVWF  03
049AC:  MOVF   FED,F
049AE:  MOVF   FED,F
049B0:  MOVF   FED,F
049B2:  MOVFF  00,FEF
049B6:  MOVFF  01,FEC
049BA:  MOVFF  02,FEC
049BE:  MOVFF  03,FEC
049C2:  MOVF   FED,F
049C4:  MOVF   FED,F
049C6:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += 1;
049C8:  MOVF   x4F,W
049CA:  MULLW  0A
049CC:  MOVF   FF3,W
049CE:  CLRF   xEB
049D0:  MOVWF  xEA
049D2:  MOVLW  04
049D4:  ADDWF  xEA,W
049D6:  MOVWF  01
049D8:  MOVLW  00
049DA:  ADDWFC xEB,W
049DC:  MOVWF  03
049DE:  MOVF   01,W
049E0:  ADDLW  22
049E2:  MOVWF  FE9
049E4:  MOVLW  01
049E6:  ADDWFC 03,W
049E8:  MOVWF  FEA
049EA:  MOVLW  01
049EC:  ADDWF  FEF,W
049EE:  MOVWF  00
049F0:  MOVLW  00
049F2:  ADDWFC FEC,W
049F4:  MOVWF  01
049F6:  MOVLW  00
049F8:  ADDWFC FEC,W
049FA:  MOVWF  02
049FC:  MOVLW  00
049FE:  ADDWFC FEC,W
04A00:  MOVWF  03
04A02:  MOVF   FED,F
04A04:  MOVF   FED,F
04A06:  MOVF   FED,F
04A08:  MOVFF  00,FEF
04A0C:  MOVFF  01,FEC
04A10:  MOVFF  02,FEC
04A14:  MOVFF  03,FEC
04A18:  MOVF   FED,F
04A1A:  MOVF   FED,F
04A1C:  MOVF   FED,F
....................         misf_counter_table[id].reserve_counter1  = 0;
04A1E:  MOVF   x4F,W
04A20:  MULLW  0A
04A22:  MOVF   FF3,W
04A24:  CLRF   xEB
04A26:  MOVWF  xEA
04A28:  MOVLW  08
04A2A:  ADDWF  xEA,W
04A2C:  MOVWF  01
04A2E:  MOVLW  00
04A30:  ADDWFC xEB,W
04A32:  MOVWF  03
04A34:  MOVF   01,W
04A36:  ADDLW  22
04A38:  MOVWF  FE9
04A3A:  MOVLW  01
04A3C:  ADDWFC 03,W
04A3E:  MOVWF  FEA
04A40:  CLRF   FEF
.................... 
....................         // アドレステーブル更新
....................         // misf_update_address_area();
....................         return;
04A42:  MOVLB  0
04A44:  GOTO   4BD6
....................     }
.................... 
....................     // データ書き込み
....................     unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
04A48:  MOVLB  A
04A4A:  MOVF   x4F,W
04A4C:  MULLW  0C
04A4E:  MOVF   FF3,W
04A50:  CLRF   xEB
04A52:  MOVWF  xEA
04A54:  MOVFF  AEB,03
04A58:  MOVF   xEA,W
04A5A:  MOVLB  0
04A5C:  CALL   00E6
04A60:  MOVWF  00
04A62:  TBLRD*+
04A64:  MOVFF  FF5,01
04A68:  TBLRD*+
04A6A:  MOVFF  FF5,02
04A6E:  TBLRD*+
04A70:  MOVFF  FF5,03
04A74:  MOVFF  03,AEF
04A78:  MOVFF  02,AEE
04A7C:  MOVFF  01,AED
04A80:  MOVFF  00,AEC
04A84:  MOVLB  A
04A86:  MOVF   x4F,W
04A88:  MULLW  0A
04A8A:  MOVF   FF3,W
04A8C:  CLRF   xF1
04A8E:  MOVWF  xF0
04A90:  MOVLW  22
04A92:  ADDWF  xF0,W
04A94:  MOVWF  FE9
04A96:  MOVLW  01
04A98:  ADDWFC xF1,W
04A9A:  MOVWF  FEA
04A9C:  MOVFF  FEF,00
04AA0:  MOVFF  FEC,01
04AA4:  MOVFF  FEC,02
04AA8:  MOVFF  FEC,03
04AAC:  MOVF   FED,F
04AAE:  MOVF   FED,F
04AB0:  MOVF   FED,F
04AB2:  MOVF   00,W
04AB4:  ADDWF  xEC,W
04AB6:  MOVWF  xE6
04AB8:  MOVF   01,W
04ABA:  ADDWFC xED,W
04ABC:  MOVWF  xE7
04ABE:  MOVF   02,W
04AC0:  ADDWFC xEE,W
04AC2:  MOVWF  xE8
04AC4:  MOVF   03,W
04AC6:  ADDWFC xEF,W
04AC8:  MOVWF  xE9
....................     // fprintf(PC, "ADDRESS 0x%08LX DATA ", write_address);
....................     write_data_bytes(mis_fm, write_address, data_ptr, size);
04ACA:  MOVFF  115,AED
04ACE:  MOVFF  114,AEC
04AD2:  MOVFF  113,AEB
04AD6:  MOVFF  112,AEA
04ADA:  MOVFF  AE9,AF1
04ADE:  MOVFF  AE8,AF0
04AE2:  MOVFF  AE7,AEF
04AE6:  MOVFF  AE6,AEE
04AEA:  MOVFF  A51,AF3
04AEE:  MOVFF  A50,AF2
04AF2:  MOVFF  A53,AF5
04AF6:  MOVFF  A52,AF4
04AFA:  MOVLB  0
04AFC:  CALL   3F34
.................... 
....................     // カウンタ更新
....................     misf_counter_table[id].used_counter     += size;
04B00:  MOVLB  A
04B02:  MOVF   x4F,W
04B04:  MULLW  0A
04B06:  MOVF   FF3,W
04B08:  CLRF   xEB
04B0A:  MOVWF  xEA
04B0C:  MOVLW  22
04B0E:  ADDWF  xEA,W
04B10:  MOVWF  FE9
04B12:  MOVLW  01
04B14:  ADDWFC xEB,W
04B16:  MOVWF  FEA
04B18:  MOVF   x52,W
04B1A:  ADDWF  FEF,W
04B1C:  MOVWF  00
04B1E:  MOVF   x53,W
04B20:  ADDWFC FEC,W
04B22:  MOVWF  01
04B24:  MOVLW  00
04B26:  ADDWFC FEC,W
04B28:  MOVWF  02
04B2A:  MOVLW  00
04B2C:  ADDWFC FEC,W
04B2E:  MOVWF  03
04B30:  MOVF   FED,F
04B32:  MOVF   FED,F
04B34:  MOVF   FED,F
04B36:  MOVFF  00,FEF
04B3A:  MOVFF  01,FEC
04B3E:  MOVFF  02,FEC
04B42:  MOVFF  03,FEC
04B46:  MOVF   FED,F
04B48:  MOVF   FED,F
04B4A:  MOVF   FED,F
....................     misf_counter_table[id].uncopied_counter += size;
04B4C:  MOVF   x4F,W
04B4E:  MULLW  0A
04B50:  MOVF   FF3,W
04B52:  CLRF   xEB
04B54:  MOVWF  xEA
04B56:  MOVLW  04
04B58:  ADDWF  xEA,W
04B5A:  MOVWF  01
04B5C:  MOVLW  00
04B5E:  ADDWFC xEB,W
04B60:  MOVWF  03
04B62:  MOVF   01,W
04B64:  ADDLW  22
04B66:  MOVWF  FE9
04B68:  MOVLW  01
04B6A:  ADDWFC 03,W
04B6C:  MOVWF  FEA
04B6E:  MOVF   x52,W
04B70:  ADDWF  FEF,W
04B72:  MOVWF  00
04B74:  MOVF   x53,W
04B76:  ADDWFC FEC,W
04B78:  MOVWF  01
04B7A:  MOVLW  00
04B7C:  ADDWFC FEC,W
04B7E:  MOVWF  02
04B80:  MOVLW  00
04B82:  ADDWFC FEC,W
04B84:  MOVWF  03
04B86:  MOVF   FED,F
04B88:  MOVF   FED,F
04B8A:  MOVF   FED,F
04B8C:  MOVFF  00,FEF
04B90:  MOVFF  01,FEC
04B94:  MOVFF  02,FEC
04B98:  MOVFF  03,FEC
04B9C:  MOVF   FED,F
04B9E:  MOVF   FED,F
04BA0:  MOVF   FED,F
....................     misf_counter_table[id].reserve_counter1 += size;
04BA2:  MOVF   x4F,W
04BA4:  MULLW  0A
04BA6:  MOVF   FF3,W
04BA8:  CLRF   xEB
04BAA:  MOVWF  xEA
04BAC:  MOVLW  08
04BAE:  ADDWF  xEA,W
04BB0:  MOVWF  01
04BB2:  MOVLW  00
04BB4:  ADDWFC xEB,W
04BB6:  MOVWF  03
04BB8:  MOVF   01,W
04BBA:  ADDLW  22
04BBC:  MOVWF  FE9
04BBE:  MOVLW  01
04BC0:  ADDWFC 03,W
04BC2:  MOVWF  FEA
04BC4:  MOVF   FEF,W
04BC6:  ADDWF  x52,W
04BC8:  MOVWF  01
04BCA:  MOVLW  00
04BCC:  ADDWFC x53,W
04BCE:  MOVWF  03
04BD0:  MOVF   01,W
04BD2:  MOVWF  FEF
04BD4:  MOVLB  0
04BD6:  RETURN 0
.................... 
....................     // アドレステーブル更新
....................     // misf_update_address_area();
.................... }
.................... 
.................... FlashData_t make_flash_data_table(void)
04BD8:  MOVLW  0A
04BDA:  MOVLB  A
04BDC:  MOVWF  xD6
04BDE:  MOVLW  95
04BE0:  MOVWF  xD5
.................... {
....................     FlashData_t flash_data;
....................     FlashData_t *flash_data_ptr = &flash_data;
.................... 
....................     // 初期化
....................     memset(flash_data_ptr->bytes, 0, sizeof(flash_data_ptr->bytes));
04BE2:  MOVF   xD5,W
04BE4:  MOVWF  01
04BE6:  MOVF   xD6,W
04BE8:  MOVWF  03
04BEA:  MOVF   01,W
04BEC:  MOVWF  xD7
04BEE:  MOVFF  03,AD8
04BF2:  MOVFF  AD8,FEA
04BF6:  MOVFF  AD7,FE9
04BFA:  CLRF   00
04BFC:  CLRF   02
04BFE:  MOVLW  40
04C00:  MOVWF  01
04C02:  MOVLB  0
04C04:  CALL   234C
.................... 
....................     flash_data_ptr->packet.payload.logdata.piclog = misf_counter_table[FLASH_ID_PICLOG];
04C08:  MOVLB  A
04C0A:  MOVF   xD5,W
04C0C:  MOVWF  FE9
04C0E:  MOVF   xD6,W
04C10:  MOVWF  FEA
04C12:  MOVLW  01
04C14:  MOVWF  FE2
04C16:  MOVLW  2C
04C18:  MOVWF  FE1
04C1A:  MOVLW  0A
04C1C:  MOVWF  01
04C1E:  MOVLB  0
04C20:  MOVFF  FE6,FEE
04C24:  DECFSZ 01,F
04C26:  GOTO   4C20
....................     flash_data_ptr->packet.payload.logdata.environment = misf_counter_table[FLASH_ID_ENVIRONMENT];
04C2A:  MOVLW  0A
04C2C:  MOVLB  A
04C2E:  ADDWF  xD5,W
04C30:  MOVWF  FE9
04C32:  MOVLW  00
04C34:  ADDWFC xD6,W
04C36:  MOVWF  FEA
04C38:  MOVLW  01
04C3A:  MOVWF  FE2
04C3C:  MOVLW  36
04C3E:  MOVWF  FE1
04C40:  MOVLW  0A
04C42:  MOVWF  01
04C44:  MOVLB  0
04C46:  MOVFF  FE6,FEE
04C4A:  DECFSZ 01,F
04C4C:  GOTO   4C46
....................     flash_data_ptr->packet.payload.logdata.iv1_header = misf_counter_table[FLASH_ID_IV1_HEADER];
04C50:  MOVLW  14
04C52:  MOVLB  A
04C54:  ADDWF  xD5,W
04C56:  MOVWF  FE9
04C58:  MOVLW  00
04C5A:  ADDWFC xD6,W
04C5C:  MOVWF  FEA
04C5E:  MOVLW  01
04C60:  MOVWF  FE2
04C62:  MOVLW  40
04C64:  MOVWF  FE1
04C66:  MOVLW  0A
04C68:  MOVWF  01
04C6A:  MOVLB  0
04C6C:  MOVFF  FE6,FEE
04C70:  DECFSZ 01,F
04C72:  GOTO   4C6C
....................     flash_data_ptr->packet.payload.logdata.iv1_data = misf_counter_table[FLASH_ID_IV1_DATA];
04C76:  MOVLW  1E
04C78:  MOVLB  A
04C7A:  ADDWF  xD5,W
04C7C:  MOVWF  FE9
04C7E:  MOVLW  00
04C80:  ADDWFC xD6,W
04C82:  MOVWF  FEA
04C84:  MOVLW  01
04C86:  MOVWF  FE2
04C88:  MOVLW  4A
04C8A:  MOVWF  FE1
04C8C:  MOVLW  0A
04C8E:  MOVWF  01
04C90:  MOVLB  0
04C92:  MOVFF  FE6,FEE
04C96:  DECFSZ 01,F
04C98:  GOTO   4C92
....................     flash_data_ptr->packet.payload.logdata.iv2_header = misf_counter_table[FLASH_ID_IV2_HEADER];
04C9C:  MOVLW  28
04C9E:  MOVLB  A
04CA0:  ADDWF  xD5,W
04CA2:  MOVWF  FE9
04CA4:  MOVLW  00
04CA6:  ADDWFC xD6,W
04CA8:  MOVWF  FEA
04CAA:  MOVLW  01
04CAC:  MOVWF  FE2
04CAE:  MOVLW  54
04CB0:  MOVWF  FE1
04CB2:  MOVLW  0A
04CB4:  MOVWF  01
04CB6:  MOVLB  0
04CB8:  MOVFF  FE6,FEE
04CBC:  DECFSZ 01,F
04CBE:  GOTO   4CB8
....................     flash_data_ptr->packet.payload.logdata.iv2_data = misf_counter_table[FLASH_ID_IV2_DATA];
04CC2:  MOVLW  32
04CC4:  MOVLB  A
04CC6:  ADDWF  xD5,W
04CC8:  MOVWF  FE9
04CCA:  MOVLW  00
04CCC:  ADDWFC xD6,W
04CCE:  MOVWF  FEA
04CD0:  MOVLW  01
04CD2:  MOVWF  FE2
04CD4:  MOVLW  5E
04CD6:  MOVWF  FE1
04CD8:  MOVLW  0A
04CDA:  MOVWF  01
04CDC:  MOVLB  0
04CDE:  MOVFF  FE6,FEE
04CE2:  DECFSZ 01,F
04CE4:  GOTO   4CDE
.................... 
....................     // CRC 計算
....................     flash_data_ptr->packet.crc = calc_crc8(flash_data_ptr->bytes, PACKET_SIZE - 1);
04CE8:  MOVLW  3F
04CEA:  MOVLB  A
04CEC:  ADDWF  xD5,W
04CEE:  MOVWF  01
04CF0:  MOVLW  00
04CF2:  ADDWFC xD6,W
04CF4:  MOVWF  03
04CF6:  MOVF   01,W
04CF8:  MOVWF  xD7
04CFA:  MOVFF  03,AD8
04CFE:  MOVF   xD5,W
04D00:  MOVWF  01
04D02:  MOVF   xD6,W
04D04:  MOVWF  03
04D06:  MOVF   01,W
04D08:  MOVWF  xD9
04D0A:  MOVFF  03,ADA
04D0E:  MOVFF  ADA,AEB
04D12:  MOVFF  AD9,AEA
04D16:  MOVLW  3F
04D18:  MOVWF  xEC
04D1A:  MOVLB  0
04D1C:  CALL   30EA
04D20:  MOVFF  AD8,FEA
04D24:  MOVFF  AD7,FE9
04D28:  MOVFF  01,FEF
.................... 
....................     return flash_data;
04D2C:  MOVLW  95
04D2E:  MOVWF  01
04D30:  MOVLW  0A
04D32:  MOVWF  02
04D34:  GOTO   5060 (RETURN)
.................... }
.................... 
.................... void misf_update_address_area(void)
*
0505C:  GOTO   4BD8
05060:  MOVFF  02,03
05064:  MOVF   01,W
05066:  MOVWF  FE1
05068:  MOVFF  03,FE2
0506C:  MOVLW  0A
0506E:  MOVWF  FEA
05070:  MOVLW  4D
05072:  MOVWF  FE9
05074:  MOVLW  40
05076:  MOVWF  01
05078:  MOVFF  FE6,FEE
0507C:  DECFSZ 01,F
0507E:  GOTO   5078
05082:  MOVLW  0A
05084:  MOVLB  A
05086:  MOVWF  x8E
05088:  MOVLW  4D
0508A:  MOVWF  x8D
.................... {
....................     FlashData_t flash_data = make_flash_data_table();
....................     FlashData_t *flash_data_ptr = &flash_data;
.................... 
....................     subsector_4kByte_erase(mis_fm, MISF_ADDRESS_TABLE[FLASH_ID_DATA_TABLE].start);
0508C:  MOVFF  115,A92
05090:  MOVFF  114,A91
05094:  MOVFF  113,A90
05098:  MOVFF  112,A8F
0509C:  CLRF   x96
0509E:  CLRF   x95
050A0:  CLRF   x94
050A2:  CLRF   x93
050A4:  MOVLB  0
050A6:  CALL   4D38
....................     write_data_bytes(mis_fm, MISF_ADDRESS_TABLE[FLASH_ID_DATA_TABLE].start, flash_data_ptr->bytes, PACKET_SIZE);
050AA:  MOVLB  A
050AC:  MOVF   x8D,W
050AE:  MOVWF  01
050B0:  MOVF   x8E,W
050B2:  MOVWF  03
050B4:  MOVF   01,W
050B6:  MOVWF  x8F
050B8:  MOVFF  03,A90
050BC:  MOVFF  115,AED
050C0:  MOVFF  114,AEC
050C4:  MOVFF  113,AEB
050C8:  MOVFF  112,AEA
050CC:  CLRF   xF1
050CE:  CLRF   xF0
050D0:  CLRF   xEF
050D2:  CLRF   xEE
050D4:  MOVFF  A90,AF3
050D8:  MOVFF  A8F,AF2
050DC:  CLRF   xF5
050DE:  MOVLW  40
050E0:  MOVWF  xF4
050E2:  MOVLB  0
050E4:  CALL   3F34
050E8:  RETURN 0
.................... }
.................... 
.................... 
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode)
.................... {
....................     FlashOperationStruct data;
....................     // 構造体の初期化
....................     data.mission_id = mission_id;
....................     data.func_type = func_type;
....................     data.write_mode = write_mode;
....................     data.source_type = SOURCE_MISF_UNCOPIED;
....................     enqueue_flash_operation(&data);
.................... }
.................... 
.................... void write_smf_header(smf_data_table_t *smf_data_table)
.................... {
.................... 
....................     int8 readdata[PACKET_SIZE];
....................     int8 retry_count;
....................     int1 crc_valid = 0;
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
....................         if (is_crc_valid(readdata, PACKET_SIZE-1))
....................         {
....................             crc_valid = 1; // FIX: フラグ更新
....................             fprintf(PC, "CRC verification passed on attempt %d\r\n", retry_count + 1);
....................             break;
....................         }
....................     }
....................     if (!crc_valid)
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
....................         // return; 
....................     }
.................... }
.................... 
.................... 
.................... 
.................... // End of file
.................... 
.................... 
.................... // アプリケーション実装ファイル
.................... #include "application/cigs_excute_mission.c"
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../hal/cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/value_status.h"    // ステータス定義
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "cigs_excute_mission.h"                  // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... // #include "../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... void handle_recieve_time(Command *command);
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_PRINT 0xA3
.................... #define ID_MEAS_IV_PRINT 0xA4
.................... #define ID_MEAS_PD 0xA5
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_pd(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_1sweep(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_port1(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_port2(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int16 interval;
....................     unsigned int16 pd_threshold;
....................     unsigned int16 meas_time;
....................     unsigned int16 log_threshold;
....................     unsigned int16 sweep_limit;
.................... } meas_iv_param_t;
.................... 
.................... 
.................... // MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... meas_iv_param_t make_meas_iv_cmd(int8 *uplinkcmd_ptr);
.................... void print_meas_iv_cmd(meas_iv_param_t *cmd_ptr);
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "../domain/cigs_smf.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #include "../hal/cigs_config.h" // int8,int32 型など(CCS C) 依存
.................... #include "cigs_flash.h"       // MISF_ADDRESS_TABLE, misf_counter_table 依存
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... extern int1 smf_update_flag[10]; // SMF更新フラグ
.................... 
.................... 
.................... // SMF管理用構造体
.................... typedef struct {
....................     ADDRESS_AREA_T header_area;
....................     ADDRESS_AREA_T data_area;
.................... } SMF_AREA_T;
.................... #define SMF_ID_COUNT 7
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 reserved;
.................... } SMF_PARTITION;
.................... 
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         SMF_PARTITION headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table);
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/communication/typedef_content.h"    // 通信ライブラリ
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06,
....................     TIME_REQ          = 0x07
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.h"      // ミッションツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../domain/cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/communication_driver.h" // 通信ドライバー
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *uplink_cmt_ptr)
*
0F63E:  MOVLB  1
0F640:  MOVF   x9F,W
0F642:  MOVWF  FE9
0F644:  MOVF   xA0,W
0F646:  MOVWF  FEA
0F648:  MOVFF  FEF,1A1
.................... {
....................    // record to executed mission list
....................    int8 command_id = uplink_cmt_ptr[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
0F64C:  MOVLW  3C
0F64E:  MOVWF  FF6
0F650:  MOVLW  12
0F652:  MOVWF  FF7
0F654:  MOVLW  00
0F656:  MOVWF  FF8
0F658:  MOVLB  0
0F65A:  CALL   22DC
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
0F65E:  MOVLW  82
0F660:  MOVWF  FF6
0F662:  MOVLW  12
0F664:  MOVWF  FF7
0F666:  MOVLW  00
0F668:  MOVWF  FF8
0F66A:  MOVLW  0C
0F66C:  MOVLB  9
0F66E:  MOVWF  xC2
0F670:  MOVLB  0
0F672:  CALL   2312
0F676:  MOVFF  1A1,9E8
0F67A:  MOVLW  37
0F67C:  MOVLB  9
0F67E:  MOVWF  xE9
0F680:  MOVLB  0
0F682:  CALL   2542
0F686:  MOVLW  90
0F688:  MOVWF  FF6
0F68A:  MOVLW  12
0F68C:  MOVWF  FF7
0F68E:  MOVLW  00
0F690:  MOVWF  FF8
0F692:  MOVLW  04
0F694:  MOVLB  9
0F696:  MOVWF  xC2
0F698:  MOVLB  0
0F69A:  CALL   2312
....................    switch(command_id)
0F69E:  MOVLB  1
0F6A0:  MOVF   xA1,W
0F6A2:  XORLW  10
0F6A4:  MOVLB  0
0F6A6:  BTFSC  FD8.2
0F6A8:  GOTO   F7A8
0F6AC:  XORLW  01
0F6AE:  BTFSC  FD8.2
0F6B0:  GOTO   F7AC
0F6B4:  XORLW  03
0F6B6:  BTFSC  FD8.2
0F6B8:  GOTO   F7B0
0F6BC:  XORLW  13
0F6BE:  BTFSC  FD8.2
0F6C0:  GOTO   F7B4
0F6C4:  XORLW  12
0F6C6:  BTFSC  FD8.2
0F6C8:  GOTO   F7B8
0F6CC:  XORLW  93
0F6CE:  BTFSC  FD8.2
0F6D0:  GOTO   F7BC
0F6D4:  XORLW  01
0F6D6:  BTFSC  FD8.2
0F6D8:  GOTO   F7CC
0F6DC:  XORLW  03
0F6DE:  BTFSC  FD8.2
0F6E0:  GOTO   F7DC
0F6E4:  XORLW  01
0F6E6:  BTFSC  FD8.2
0F6E8:  GOTO   F7EC
0F6EC:  XORLW  07
0F6EE:  BTFSC  FD8.2
0F6F0:  GOTO   F7FC
0F6F4:  XORLW  01
0F6F6:  BTFSC  FD8.2
0F6F8:  GOTO   F80C
0F6FC:  XORLW  03
0F6FE:  BTFSC  FD8.2
0F700:  GOTO   F81C
0F704:  XORLW  01
0F706:  BTFSC  FD8.2
0F708:  GOTO   F82C
0F70C:  XORLW  0F
0F70E:  BTFSC  FD8.2
0F710:  GOTO   F83C
0F714:  XORLW  18
0F716:  BTFSC  FD8.2
0F718:  GOTO   F84C
0F71C:  XORLW  01
0F71E:  BTFSC  FD8.2
0F720:  GOTO   F85C
0F724:  XORLW  03
0F726:  BTFSC  FD8.2
0F728:  GOTO   F86C
0F72C:  XORLW  01
0F72E:  BTFSC  FD8.2
0F730:  GOTO   F87C
0F734:  XORLW  07
0F736:  BTFSC  FD8.2
0F738:  GOTO   F88C
0F73C:  XORLW  01
0F73E:  BTFSC  FD8.2
0F740:  GOTO   F89C
0F744:  XORLW  03
0F746:  BTFSC  FD8.2
0F748:  GOTO   F8AC
0F74C:  XORLW  36
0F74E:  BTFSC  FD8.2
0F750:  GOTO   F8B4
0F754:  XORLW  01
0F756:  BTFSC  FD8.2
0F758:  GOTO   F8C4
0F75C:  XORLW  03
0F75E:  BTFSC  FD8.2
0F760:  GOTO   F8D4
0F764:  XORLW  01
0F766:  BTFSC  FD8.2
0F768:  GOTO   F8E4
0F76C:  XORLW  07
0F76E:  BTFSC  FD8.2
0F770:  GOTO   F8E8
0F774:  XORLW  01
0F776:  BTFSC  FD8.2
0F778:  GOTO   F8F0
0F77C:  XORLW  03
0F77E:  BTFSC  FD8.2
0F780:  GOTO   F900
0F784:  XORLW  01
0F786:  BTFSC  FD8.2
0F788:  GOTO   F9DE
0F78C:  XORLW  0F
0F78E:  BTFSC  FD8.2
0F790:  GOTO   F9F6
0F794:  XORLW  01
0F796:  BTFSC  FD8.2
0F798:  GOTO   FA0E
0F79C:  XORLW  19
0F79E:  BTFSC  FD8.2
0F7A0:  GOTO   FA26
0F7A4:  GOTO   FC32
....................    {
....................       case 0x10: // example command
....................          // mode_dummy(content);
....................          //mode_iv_meas_adc();
....................          break;
0F7A8:  GOTO   FC46
....................       case 0x11:
....................          // mode_test_iv(content);
....................          break;
0F7AC:  GOTO   FC46
....................       case 0x12:
....................          // test_adc();
....................          break;
0F7B0:  GOTO   FC46
....................       case 0x01:
....................          //mode_measure(content); // check if the flash is connected
....................          break;
0F7B4:  GOTO   FC46
....................       case 0x13:
....................          // mode_sweep_port1(content[1]); // Sweep Port 1 with the given step
....................          break;
0F7B8:  GOTO   FC46
.................... 
....................       // ___________________ MISF Commands ______________________
....................       case ID_MISF_ERASE_ALL:
....................          mode_misf_erase_all(uplink_cmt_ptr);
0F7BC:  MOVFF  1A0,1CB
0F7C0:  MOVFF  19F,1CA
0F7C4:  CALL   5C74
....................          break;
0F7C8:  GOTO   FC46
....................       case ID_MISF_ERASE_1SECTOR:
....................          mode_misf_erase_1sector(uplink_cmt_ptr);
0F7CC:  MOVFF  1A0,1B0
0F7D0:  MOVFF  19F,1AF
0F7D4:  GOTO   5D52
....................          break;
0F7D8:  GOTO   FC46
....................       case ID_MISF_ERASE_4kByte_SUBSECTOR:
....................          mode_misf_erase_4kbyte_subsector(uplink_cmt_ptr);
0F7DC:  MOVFF  1A0,1B0
0F7E0:  MOVFF  19F,1AF
0F7E4:  GOTO   5EEA
....................          break;
0F7E8:  GOTO   FC46
....................       case ID_MISF_ERASE_64kByte_SUBSECTOR:
....................          mode_misf_erase_64kbyte_subsector(uplink_cmt_ptr);
0F7EC:  MOVFF  1A0,1B0
0F7F0:  MOVFF  19F,1AF
0F7F4:  GOTO   6082
....................          break;
0F7F8:  GOTO   FC46
....................       case ID_MISF_WRITE_DEMO:
....................          mode_misf_write_demo(uplink_cmt_ptr);
0F7FC:  MOVFF  1A0,1B0
0F800:  MOVFF  19F,1AF
0F804:  GOTO   63D6
....................          break;
0F808:  GOTO   FC46
....................       case ID_MISF_WRITE_4kByte_SUBSECTOR:
....................          mode_misf_write_4kbyte_subsector(uplink_cmt_ptr);
0F80C:  MOVFF  1A0,1B0
0F810:  MOVFF  19F,1AF
0F814:  GOTO   6A50
....................          break;
0F818:  GOTO   FC46
....................       case ID_MISF_READ:
....................          mode_misf_read(uplink_cmt_ptr);
0F81C:  MOVFF  1A0,1B0
0F820:  MOVFF  19F,1AF
0F824:  GOTO   6AC8
....................          break;
0F828:  GOTO   FC46
....................       case ID_MISF_READ_ADDRESS:
....................          mode_misf_read_address(uplink_cmt_ptr);
0F82C:  MOVFF  1A0,1B0
0F830:  MOVFF  19F,1AF
0F834:  GOTO   72CC
....................          break;
0F838:  GOTO   FC46
....................       case ID_MISF_ERASE_AND_RESET:
....................          mode_misf_erase_and_reset(uplink_cmt_ptr);
0F83C:  MOVFF  1A0,1C9
0F840:  MOVFF  19F,1C8
0F844:  CALL   75D4
....................          break;
0F848:  GOTO   FC46
.................... 
....................       // ___________________ SMF Commands ______________________
....................       case ID_SMF_COPY:
....................          mode_smf_copy(uplink_cmt_ptr);
0F84C:  MOVFF  1A0,1B0
0F850:  MOVFF  19F,1AF
0F854:  GOTO   762A
....................          break;
0F858:  GOTO   FC46
....................       case ID_SMF_READ:
....................          mode_smf_read(uplink_cmt_ptr);
0F85C:  MOVFF  1A0,1B0
0F860:  MOVFF  19F,1AF
0F864:  GOTO   7706
....................          break;
0F868:  GOTO   FC46
....................       case ID_SMF_ERASE:
....................          mode_smf_erase(uplink_cmt_ptr);
0F86C:  MOVFF  1A0,1B0
0F870:  MOVFF  19F,1AF
0F874:  GOTO   79D8
....................          break;
0F878:  GOTO   FC46
....................       case ID_SMF_COPY_FORCE:
....................          mode_smf_address_reset(uplink_cmt_ptr);
0F87C:  MOVFF  1A0,1B0
0F880:  MOVFF  19F,1AF
0F884:  GOTO   7BC2
....................          break;
0F888:  GOTO   FC46
....................       case ID_SMF_READ_FORCE:
....................          mode_smf_read_force(uplink_cmt_ptr);
0F88C:  MOVFF  1A0,1B0
0F890:  MOVFF  19F,1AF
0F894:  GOTO   7D40
....................          break;
0F898:  GOTO   FC46
....................       case ID_SMF_ERASE_FORCE:
....................          mode_smf_erase_force(uplink_cmt_ptr);
0F89C:  MOVFF  1A0,1B0
0F8A0:  MOVFF  19F,1AF
0F8A4:  GOTO   8152
....................          break;
0F8A8:  GOTO   FC46
....................       case ID_SMF_RESET:
....................          smf_data_table_init();
0F8AC:  CALL   7A40
....................          break;
0F8B0:  GOTO   FC46
....................          
....................          
....................       // ________________MEAS________________________________
....................       case ID_MEAS_IV:
....................          mode_meas_iv(uplink_cmt_ptr);
0F8B4:  MOVFF  1A0,1B0
0F8B8:  MOVFF  19F,1AF
0F8BC:  GOTO   AA9E
....................          break;
0F8C0:  GOTO   FC46
....................       case ID_MEAS_DEBUG:
....................          mode_meas_iv_debug(uplink_cmt_ptr);
0F8C4:  MOVFF  1A0,1B0
0F8C8:  MOVFF  19F,1AF
0F8CC:  GOTO   C7EC
....................          break;
0F8D0:  GOTO   FC46
....................       case ID_MEAS_ENV:
....................          mode_meas_env(uplink_cmt_ptr);
0F8D4:  MOVFF  1A0,1B0
0F8D8:  MOVFF  19F,1AF
0F8DC:  GOTO   CACE
....................          break;
0F8E0:  GOTO   FC46
....................       case ID_MEAS_ENV_PRINT:
....................          // mode_meas_env_debug(uplink_cmt_ptr);
....................          break;
0F8E4:  GOTO   FC46
....................       case ID_MEAS_IV_PRINT:
....................          sweep_with_print();
0F8E8:  GOTO   CBB6
....................          break;
0F8EC:  GOTO   FC46
....................       case ID_MEAS_PD:
....................          mode_meas_pd(uplink_cmt_ptr);
0F8F0:  MOVFF  1A0,1B0
0F8F4:  MOVFF  19F,1AF
0F8F8:  GOTO   E332
....................          break;
0F8FC:  GOTO   FC46
....................       case 0xA6:
....................          connect_port1();
0F900:  CALL   5212
....................          connect_port2();
0F904:  CALL   521A
....................          unsigned int16 cell1_curr;
....................          unsigned int16 cell2_curr;
....................          mcp4901_1_write(10); 
0F908:  MOVLB  9
0F90A:  CLRF   xDD
0F90C:  MOVLW  0A
0F90E:  MOVWF  xDC
0F910:  MOVLB  0
0F912:  CALL   2872
....................          mcp4901_2_write(10);
0F916:  MOVLB  9
0F918:  CLRF   xDD
0F91A:  MOVLW  0A
0F91C:  MOVWF  xDC
0F91E:  MOVLB  0
0F920:  CALL   28B0
....................          while (TRUE)
....................          {  
....................             cell1_curr = ad7490_read(ADC_CIGS1_CURR);
0F924:  MOVLW  01
0F926:  MOVLB  9
0F928:  MOVWF  xEE
0F92A:  MOVLB  0
0F92C:  CALL   24C2
0F930:  MOVFF  02,1A3
0F934:  MOVFF  01,1A2
....................             cell2_curr = ad7490_read(ADC_CIGS2_CURR);
0F938:  MOVLW  05
0F93A:  MOVLB  9
0F93C:  MOVWF  xEE
0F93E:  MOVLB  0
0F940:  CALL   24C2
0F944:  MOVFF  02,1A5
0F948:  MOVFF  01,1A4
....................             fprintf(PC, "%04LX,%04LX\r\n", cell1_curr, cell2_curr);
0F94C:  MOVFF  1A3,9E8
0F950:  MOVLW  37
0F952:  MOVLB  9
0F954:  MOVWF  xE9
0F956:  MOVLB  0
0F958:  CALL   2542
0F95C:  MOVFF  1A2,9E8
0F960:  MOVLW  37
0F962:  MOVLB  9
0F964:  MOVWF  xE9
0F966:  MOVLB  0
0F968:  CALL   2542
0F96C:  MOVLW  2C
0F96E:  BTFSS  FA6.6
0F970:  GOTO   F96E
0F974:  MOVLB  E
0F976:  MOVWF  xF9
0F978:  MOVFF  1A5,9E8
0F97C:  MOVLW  37
0F97E:  MOVLB  9
0F980:  MOVWF  xE9
0F982:  MOVLB  0
0F984:  CALL   2542
0F988:  MOVFF  1A4,9E8
0F98C:  MOVLW  37
0F98E:  MOVLB  9
0F990:  MOVWF  xE9
0F992:  MOVLB  0
0F994:  CALL   2542
0F998:  MOVLW  0D
0F99A:  BTFSS  FA6.6
0F99C:  GOTO   F99A
0F9A0:  MOVLB  E
0F9A2:  MOVWF  xF9
0F9A4:  MOVLW  0A
0F9A6:  MOVLB  0
0F9A8:  BTFSS  FA6.6
0F9AA:  GOTO   F9A8
0F9AE:  MOVLB  E
0F9B0:  MOVWF  xF9
....................             delay_ms(1000);
0F9B2:  MOVLW  04
0F9B4:  MOVLB  1
0F9B6:  MOVWF  xAF
0F9B8:  MOVLB  0
0F9BA:  MOVLW  FA
0F9BC:  MOVLB  B
0F9BE:  MOVWF  x02
0F9C0:  MOVLB  0
0F9C2:  CALL   22AE
0F9C6:  MOVLB  1
0F9C8:  DECFSZ xAF,F
0F9CA:  BRA    F9D0
0F9CC:  BRA    F9D4
0F9CE:  MOVLB  0
0F9D0:  MOVLB  0
0F9D2:  BRA    F9BA
0F9D4:  MOVLB  0
0F9D6:  GOTO   F924
....................          }
....................          break;
0F9DA:  GOTO   FC46
....................       case 0xA7:
....................          connect_port1();
0F9DE:  CALL   5212
....................          connect_port2();
0F9E2:  CALL   521A
....................          mode_meas_iv_1sweep(uplink_cmt_ptr);
0F9E6:  MOVFF  1A0,1B0
0F9EA:  MOVFF  19F,1AF
0F9EE:  GOTO   E52A
....................          break;
0F9F2:  GOTO   FC46
.................... 
....................       case 0xA8:
....................          connect_port1();
0F9F6:  CALL   5212
....................          connect_port2();
0F9FA:  CALL   521A
....................          mode_meas_iv_port1(uplink_cmt_ptr);
0F9FE:  MOVFF  1A0,1B0
0FA02:  MOVFF  19F,1AF
0FA06:  GOTO   F032
....................          break;
0FA0A:  GOTO   FC46
....................       
....................       case 0xA9:
....................          connect_port1();
0FA0E:  CALL   5212
....................          connect_port2();
0FA12:  CALL   521A
....................          mode_meas_iv_port2(uplink_cmt_ptr);
0FA16:  MOVFF  1A0,1B0
0FA1A:  MOVFF  19F,1AF
0FA1E:  GOTO   F2B6
....................       break;
0FA22:  GOTO   FC46
.................... 
....................       // ________________Others______________________________
....................       case 0xB0:
....................          unsigned int32 total_seconds = get_current_sec();
....................          unsigned int16 days;
....................          unsigned int8 hours, minutes, seconds;
0FA26:  CALL   3C16
0FA2A:  MOVFF  03,1A9
0FA2E:  MOVFF  02,1A8
0FA32:  MOVFF  01,1A7
0FA36:  MOVFF  00,1A6
....................          days    = total_seconds / 86400;
0FA3A:  BCF    FD8.1
0FA3C:  MOVFF  1A9,215
0FA40:  MOVFF  1A8,214
0FA44:  MOVFF  1A7,213
0FA48:  MOVFF  1A6,212
0FA4C:  MOVLB  2
0FA4E:  CLRF   x19
0FA50:  MOVLW  01
0FA52:  MOVWF  x18
0FA54:  MOVLW  51
0FA56:  MOVWF  x17
0FA58:  MOVLW  80
0FA5A:  MOVWF  x16
0FA5C:  MOVLB  0
0FA5E:  CALL   61F6
0FA62:  MOVFF  01,1AB
0FA66:  MOVFF  00,1AA
....................          hours   = (total_seconds % 86400) / 3600;
0FA6A:  BSF    FD8.1
0FA6C:  MOVLW  01
0FA6E:  MOVWF  FEA
0FA70:  MOVLW  AF
0FA72:  MOVWF  FE9
0FA74:  MOVFF  1A9,215
0FA78:  MOVFF  1A8,214
0FA7C:  MOVFF  1A7,213
0FA80:  MOVFF  1A6,212
0FA84:  MOVLB  2
0FA86:  CLRF   x19
0FA88:  MOVLW  01
0FA8A:  MOVWF  x18
0FA8C:  MOVLW  51
0FA8E:  MOVWF  x17
0FA90:  MOVLW  80
0FA92:  MOVWF  x16
0FA94:  MOVLB  0
0FA96:  CALL   61F6
0FA9A:  MOVFF  1B2,1B6
0FA9E:  MOVFF  1B1,1B5
0FAA2:  MOVFF  1B0,1B4
0FAA6:  MOVFF  1AF,1B3
0FAAA:  MOVFF  FEA,1B8
0FAAE:  MOVFF  FE9,1B7
0FAB2:  BCF    FD8.1
0FAB4:  MOVFF  1B6,215
0FAB8:  MOVFF  1B5,214
0FABC:  MOVFF  1B4,213
0FAC0:  MOVFF  1B3,212
0FAC4:  MOVLB  2
0FAC6:  CLRF   x19
0FAC8:  CLRF   x18
0FACA:  MOVLW  0E
0FACC:  MOVWF  x17
0FACE:  MOVLW  10
0FAD0:  MOVWF  x16
0FAD2:  MOVLB  0
0FAD4:  CALL   61F6
0FAD8:  MOVFF  1B8,FEA
0FADC:  MOVFF  1B7,FE9
0FAE0:  MOVFF  00,1AC
....................          minutes = (total_seconds % 3600) / 60;
0FAE4:  BSF    FD8.1
0FAE6:  MOVLW  01
0FAE8:  MOVWF  FEA
0FAEA:  MOVLW  AF
0FAEC:  MOVWF  FE9
0FAEE:  MOVFF  1A9,215
0FAF2:  MOVFF  1A8,214
0FAF6:  MOVFF  1A7,213
0FAFA:  MOVFF  1A6,212
0FAFE:  MOVLB  2
0FB00:  CLRF   x19
0FB02:  CLRF   x18
0FB04:  MOVLW  0E
0FB06:  MOVWF  x17
0FB08:  MOVLW  10
0FB0A:  MOVWF  x16
0FB0C:  MOVLB  0
0FB0E:  CALL   61F6
0FB12:  MOVFF  1B2,1B6
0FB16:  MOVFF  1B1,1B5
0FB1A:  MOVFF  1B0,1B4
0FB1E:  MOVFF  1AF,1B3
0FB22:  MOVFF  FEA,1B8
0FB26:  MOVFF  FE9,1B7
0FB2A:  BCF    FD8.1
0FB2C:  MOVFF  1B6,215
0FB30:  MOVFF  1B5,214
0FB34:  MOVFF  1B4,213
0FB38:  MOVFF  1B3,212
0FB3C:  MOVLB  2
0FB3E:  CLRF   x19
0FB40:  CLRF   x18
0FB42:  CLRF   x17
0FB44:  MOVLW  3C
0FB46:  MOVWF  x16
0FB48:  MOVLB  0
0FB4A:  CALL   61F6
0FB4E:  MOVFF  1B8,FEA
0FB52:  MOVFF  1B7,FE9
0FB56:  MOVFF  00,1AD
....................          seconds = total_seconds % 60;
0FB5A:  BSF    FD8.1
0FB5C:  MOVLW  01
0FB5E:  MOVWF  FEA
0FB60:  MOVLW  AF
0FB62:  MOVWF  FE9
0FB64:  MOVFF  1A9,215
0FB68:  MOVFF  1A8,214
0FB6C:  MOVFF  1A7,213
0FB70:  MOVFF  1A6,212
0FB74:  MOVLB  2
0FB76:  CLRF   x19
0FB78:  CLRF   x18
0FB7A:  CLRF   x17
0FB7C:  MOVLW  3C
0FB7E:  MOVWF  x16
0FB80:  MOVLB  0
0FB82:  CALL   61F6
0FB86:  MOVFF  1AF,1AE
.................... 
....................          fprintf(PC, "\t\t-> Get time to %lu days, %02u:%02u:%02u\r\n",
....................                days, hours, minutes, seconds);
0FB8A:  MOVLW  96
0FB8C:  MOVWF  FF6
0FB8E:  MOVLW  12
0FB90:  MOVWF  FF7
0FB92:  MOVLW  00
0FB94:  MOVWF  FF8
0FB96:  MOVLW  11
0FB98:  MOVLB  9
0FB9A:  MOVWF  xC2
0FB9C:  MOVLB  0
0FB9E:  CALL   2312
0FBA2:  MOVLW  10
0FBA4:  MOVWF  FE9
0FBA6:  MOVFF  1AB,1EA
0FBAA:  MOVFF  1AA,1E9
0FBAE:  CALL   8E60
0FBB2:  MOVLW  AA
0FBB4:  MOVWF  FF6
0FBB6:  MOVLW  12
0FBB8:  MOVWF  FF7
0FBBA:  MOVLW  00
0FBBC:  MOVWF  FF8
0FBBE:  MOVLW  07
0FBC0:  MOVLB  9
0FBC2:  MOVWF  xC2
0FBC4:  MOVLB  0
0FBC6:  CALL   2312
0FBCA:  MOVFF  1AC,1AF
0FBCE:  MOVLW  01
0FBD0:  MOVLB  1
0FBD2:  MOVWF  xB0
0FBD4:  MOVLB  0
0FBD6:  CALL   F582
0FBDA:  MOVLW  3A
0FBDC:  BTFSS  FA6.6
0FBDE:  GOTO   FBDC
0FBE2:  MOVLB  E
0FBE4:  MOVWF  xF9
0FBE6:  MOVFF  1AD,1AF
0FBEA:  MOVLW  01
0FBEC:  MOVLB  1
0FBEE:  MOVWF  xB0
0FBF0:  MOVLB  0
0FBF2:  CALL   F582
0FBF6:  MOVLW  3A
0FBF8:  BTFSS  FA6.6
0FBFA:  GOTO   FBF8
0FBFE:  MOVLB  E
0FC00:  MOVWF  xF9
0FC02:  MOVFF  1AE,1AF
0FC06:  MOVLW  01
0FC08:  MOVLB  1
0FC0A:  MOVWF  xB0
0FC0C:  MOVLB  0
0FC0E:  CALL   F582
0FC12:  MOVLW  0D
0FC14:  BTFSS  FA6.6
0FC16:  GOTO   FC14
0FC1A:  MOVLB  E
0FC1C:  MOVWF  xF9
0FC1E:  MOVLW  0A
0FC20:  MOVLB  0
0FC22:  BTFSS  FA6.6
0FC24:  GOTO   FC22
0FC28:  MOVLB  E
0FC2A:  MOVWF  xF9
....................          break;
0FC2C:  MOVLB  0
0FC2E:  GOTO   FC46
.................... 
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
0FC32:  MOVLW  C2
0FC34:  MOVWF  FF6
0FC36:  MOVLW  12
0FC38:  MOVWF  FF7
0FC3A:  MOVLW  00
0FC3C:  MOVWF  FF8
0FC3E:  CALL   22DC
....................          break;
0FC42:  GOTO   FC46
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
0FC46:  MOVLW  DA
0FC48:  MOVWF  FF6
0FC4A:  MOVLW  12
0FC4C:  MOVWF  FF7
0FC4E:  MOVLW  00
0FC50:  MOVWF  FF8
0FC52:  CALL   22DC
0FC56:  GOTO   FCC4 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
0FF32:  MOVLW  20
0FF34:  MOVWF  FF6
0FF36:  MOVLW  13
0FF38:  MOVWF  FF7
0FF3A:  MOVLW  00
0FF3C:  MOVWF  FF8
0FF3E:  CALL   22DC
....................    
....................    switch(command->frame_id)
0FF42:  MOVLB  1
0FF44:  MOVF   x99,W
0FF46:  MOVWF  FE9
0FF48:  MOVF   x9A,W
0FF4A:  MOVWF  FEA
0FF4C:  MOVF   FEF,W
0FF4E:  ADDLW  FC
0FF50:  BTFSS  FD8.0
0FF52:  BRA    FF5A
0FF54:  MOVLB  0
0FF56:  GOTO   FFB2
0FF5A:  ADDLW  04
0FF5C:  MOVLB  0
0FF5E:  GOTO   FFBA
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
0FF62:  MOVFF  19A,19C
0FF66:  MOVFF  199,19B
0FF6A:  GOTO   FC78
....................          break;
0FF6E:  GOTO   FFB2
....................          
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
0FF72:  MOVFF  19A,19C
0FF76:  MOVFF  199,19B
0FF7A:  GOTO   FCE0
0FF7E:  MOVF   01,F
0FF80:  BTFSC  FD8.2
0FF82:  GOTO   FF8E
....................             return TRUE; // if status is finished, return TRUE
0FF86:  MOVLW  01
0FF88:  MOVWF  01
0FF8A:  GOTO   FFB6
....................          }        
....................          break;
0FF8E:  GOTO   FFB2
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
0FF92:  MOVFF  19A,19C
0FF96:  MOVFF  199,19B
0FF9A:  GOTO   122EC
....................          break;
0FF9E:  GOTO   FFB2
....................       
....................       case SEND_TIME:
....................          handle_recieve_time(command);
0FFA2:  MOVFF  19A,19C
0FFA6:  MOVFF  199,19B
0FFAA:  GOTO   12650
....................          break;
0FFAE:  GOTO   FFB2
....................    }
....................    return FALSE;
0FFB2:  MOVLW  00
0FFB4:  MOVWF  01
0FFB6:  GOTO   12DF8 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
0FC78:  MOVLW  38
0FC7A:  MOVWF  FF6
0FC7C:  MOVLW  13
0FC7E:  MOVWF  FF7
0FC80:  MOVLW  00
0FC82:  MOVWF  FF8
0FC84:  CALL   22DC
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
0FC88:  MOVLW  4E
0FC8A:  MOVWF  FF6
0FC8C:  MOVLW  13
0FC8E:  MOVWF  FF7
0FC90:  MOVLW  00
0FC92:  MOVWF  FF8
0FC94:  CALL   22DC
....................    transmit_ack();
0FC98:  CALL   58FE
.................... 
....................    status[0] = EXECUTING_MISSION;
0FC9C:  MOVLW  02
0FC9E:  MOVWF  4C
....................    execute_mission(command->content);
0FCA0:  MOVLW  03
0FCA2:  MOVLB  1
0FCA4:  ADDWF  x9B,W
0FCA6:  MOVWF  01
0FCA8:  MOVLW  00
0FCAA:  ADDWFC x9C,W
0FCAC:  MOVWF  03
0FCAE:  MOVF   01,W
0FCB0:  MOVWF  x9D
0FCB2:  MOVFF  03,19E
0FCB6:  MOVFF  19E,1A0
0FCBA:  MOVFF  19D,19F
0FCBE:  MOVLB  0
0FCC0:  GOTO   F63E
....................    if (is_empty_flash_queue())
0FCC4:  CALL   FC5A
0FCC8:  MOVF   01,F
0FCCA:  BTFSC  FD8.2
0FCCC:  GOTO   FCD8
....................       status[0] = FINISHED;
0FCD0:  MOVLW  06
0FCD2:  MOVWF  4C
0FCD4:  GOTO   FCDC
....................    else
....................       status[0] = SMF_USE_REQ;
0FCD8:  MOVLW  04
0FCDA:  MOVWF  4C
0FCDC:  GOTO   FF6E (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... 
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
0FCE0:  MOVLW  68
0FCE2:  MOVWF  FF6
0FCE4:  MOVLW  13
0FCE6:  MOVWF  FF7
0FCE8:  MOVLW  00
0FCEA:  MOVWF  FF8
0FCEC:  CALL   22DC
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
0FCF0:  MOVLW  7C
0FCF2:  MOVWF  FF6
0FCF4:  MOVLW  13
0FCF6:  MOVWF  FF7
0FCF8:  MOVLW  00
0FCFA:  MOVWF  FF8
0FCFC:  CALL   22DC
....................    transmit_status();
0FD00:  CALL   A7E6
....................    if (status[0] == FINISHED)
0FD04:  MOVF   4C,W
0FD06:  SUBLW  06
0FD08:  BTFSS  FD8.2
0FD0A:  GOTO   FD2A
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
0FD0E:  MOVLW  9A
0FD10:  MOVWF  FF6
0FD12:  MOVLW  13
0FD14:  MOVWF  FF7
0FD16:  MOVLW  00
0FD18:  MOVWF  FF8
0FD1A:  CALL   22DC
....................       return TRUE;
0FD1E:  MOVLW  01
0FD20:  MOVWF  01
0FD22:  GOTO   FD32
....................    }
0FD26:  GOTO   FD32
....................    else{
....................       return FALSE;
0FD2A:  MOVLW  00
0FD2C:  MOVWF  01
0FD2E:  GOTO   FD32
....................    }
0FD32:  GOTO   FF7E (RETURN)
.................... }
.................... 
.................... 
.................... void handle_smf_available(Command *command)
.................... {
....................     fprintf(PC, "\t-> SMF available check\r\n");
*
122EC:  MOVLW  B6
122EE:  MOVWF  FF6
122F0:  MOVLW  13
122F2:  MOVWF  FF7
122F4:  MOVLW  00
122F6:  MOVWF  FF8
122F8:  CALL   22DC
....................     fprintf(PC, "\t   Transmit Acknowledgement\r\n");
122FC:  MOVLW  D0
122FE:  MOVWF  FF6
12300:  MOVLW  13
12302:  MOVWF  FF7
12304:  MOVLW  00
12306:  MOVWF  FF8
12308:  CALL   22DC
....................     transmit_ack();
1230C:  CALL   58FE
.................... 
....................     if (command->content[0] != ALLOW) {
12310:  MOVLW  03
12312:  MOVLB  1
12314:  ADDWF  x9B,W
12316:  MOVWF  FE9
12318:  MOVLW  00
1231A:  ADDWFC x9C,W
1231C:  MOVWF  FEA
1231E:  DECFSZ FEF,W
12320:  BRA    12326
12322:  BRA    1232C
12324:  MOVLB  0
12326:  MOVLB  0
12328:  GOTO   12332
1232C:  MOVLB  0
1232E:  GOTO   12346
....................         fprintf(PC, "\t\t-> denied\r\n");
12332:  MOVLW  F0
12334:  MOVWF  FF6
12336:  MOVLW  13
12338:  MOVWF  FF7
1233A:  MOVLW  00
1233C:  MOVWF  FF8
1233E:  CALL   22DC
....................         return;
12342:  GOTO   1264C
....................     }
.................... 
....................     fprintf(PC, "\t\t-> allowed\r\n");
12346:  MOVLW  FE
12348:  MOVWF  FF6
1234A:  MOVLW  13
1234C:  MOVWF  FF7
1234E:  MOVLW  00
12350:  MOVWF  FF8
12352:  CALL   22DC
....................     status[0] = COPYING;
12356:  MOVLW  05
12358:  MOVWF  4C
.................... 
....................     int8 processed_count = 0;
1235A:  MOVLB  1
1235C:  CLRF   x9D
1235E:  MOVLB  0
.................... 
....................     while (!is_empty_flash_queue()) {
12360:  CALL   FC5A
12364:  MOVF   01,F
12366:  BTFSS  FD8.2
12368:  GOTO   12604
....................         FlashOperationStruct *smf_data = dequeue_flash_operation();
1236C:  GOTO   FD36
12370:  MOVFF  02,19F
12374:  MOVFF  01,19E
....................         /*
....................         if (smf_data == NULL) {
....................             fprintf(PC, "\t\t-> dequeue NULL (break)\r\n");
....................             break;
....................         }
....................          */
....................         fprintf(PC, "\t\t-> Dequeued: func=%u mission=%u size=%ld addr=%ld\r\n",
....................                 (unsigned int)smf_data->func_type,
....................                 (unsigned int)smf_data->mission_id,
....................                 smf_data->misf_size,
....................                 smf_data->misf_start_addr);
12378:  MOVLW  01
1237A:  MOVLB  1
1237C:  ADDWF  x9E,W
1237E:  MOVWF  FE9
12380:  MOVLW  00
12382:  ADDWFC x9F,W
12384:  MOVWF  FEA
12386:  MOVFF  FEF,1A1
1238A:  MOVF   x9E,W
1238C:  MOVWF  FE9
1238E:  MOVF   x9F,W
12390:  MOVWF  FEA
12392:  MOVFF  FEF,1A2
12396:  MOVLW  08
12398:  ADDWF  x9E,W
1239A:  MOVWF  FE9
1239C:  MOVLW  00
1239E:  ADDWFC x9F,W
123A0:  MOVWF  FEA
123A2:  MOVFF  FEF,1A3
123A6:  MOVFF  FEC,1A4
123AA:  MOVFF  FEC,1A5
123AE:  MOVFF  FEC,1A6
123B2:  MOVF   FED,F
123B4:  MOVF   FED,F
123B6:  MOVF   FED,F
123B8:  MOVLW  04
123BA:  ADDWF  x9E,W
123BC:  MOVWF  FE9
123BE:  MOVLW  00
123C0:  ADDWFC x9F,W
123C2:  MOVWF  FEA
123C4:  MOVFF  FEF,1A7
123C8:  MOVFF  FEC,1A8
123CC:  MOVFF  FEC,1A9
123D0:  MOVFF  FEC,1AA
123D4:  MOVF   FED,F
123D6:  MOVF   FED,F
123D8:  MOVF   FED,F
123DA:  MOVLW  0E
123DC:  MOVWF  FF6
123DE:  MOVLW  14
123E0:  MOVWF  FF7
123E2:  MOVLW  00
123E4:  MOVWF  FF8
123E6:  MOVLW  14
123E8:  MOVLB  9
123EA:  MOVWF  xC2
123EC:  MOVLB  0
123EE:  CALL   2312
123F2:  MOVFF  1A1,1AF
123F6:  MOVLW  1B
123F8:  MOVLB  1
123FA:  MOVWF  xB0
123FC:  MOVLB  0
123FE:  CALL   F582
12402:  MOVLW  24
12404:  MOVWF  FF6
12406:  MOVLW  14
12408:  MOVWF  FF7
1240A:  MOVLW  00
1240C:  MOVWF  FF8
1240E:  MOVLW  09
12410:  MOVLB  9
12412:  MOVWF  xC2
12414:  MOVLB  0
12416:  CALL   2312
1241A:  MOVFF  1A2,1AF
1241E:  MOVLW  1B
12420:  MOVLB  1
12422:  MOVWF  xB0
12424:  MOVLB  0
12426:  CALL   F582
1242A:  MOVLW  2F
1242C:  MOVWF  FF6
1242E:  MOVLW  14
12430:  MOVWF  FF7
12432:  MOVLW  00
12434:  MOVWF  FF8
12436:  MOVLW  06
12438:  MOVLB  9
1243A:  MOVWF  xC2
1243C:  MOVLB  0
1243E:  CALL   2312
12442:  MOVLW  41
12444:  MOVWF  FE9
12446:  MOVFF  1A6,1AE
1244A:  MOVFF  1A5,1AD
1244E:  MOVFF  1A4,1AC
12452:  MOVFF  1A3,1AB
12456:  CALL   FD98
1245A:  MOVLW  38
1245C:  MOVWF  FF6
1245E:  MOVLW  14
12460:  MOVWF  FF7
12462:  MOVLW  00
12464:  MOVWF  FF8
12466:  MOVLW  06
12468:  MOVLB  9
1246A:  MOVWF  xC2
1246C:  MOVLB  0
1246E:  CALL   2312
12472:  MOVLW  41
12474:  MOVWF  FE9
12476:  MOVFF  1AA,1AE
1247A:  MOVFF  1A9,1AD
1247E:  MOVFF  1A8,1AC
12482:  MOVFF  1A7,1AB
12486:  CALL   FD98
1248A:  MOVLW  0D
1248C:  BTFSS  FA6.6
1248E:  GOTO   1248C
12492:  MOVLB  E
12494:  MOVWF  xF9
12496:  MOVLW  0A
12498:  MOVLB  0
1249A:  BTFSS  FA6.6
1249C:  GOTO   1249A
124A0:  MOVLB  E
124A2:  MOVWF  xF9
.................... 
....................         switch (smf_data->func_type) {
124A4:  MOVLW  01
124A6:  MOVLB  1
124A8:  ADDWF  x9E,W
124AA:  MOVWF  FE9
124AC:  MOVLW  00
124AE:  ADDWFC x9F,W
124B0:  MOVWF  FEA
124B2:  MOVF   FEF,W
124B4:  XORLW  00
124B6:  MOVLB  0
124B8:  BTFSC  FD8.2
124BA:  GOTO   124D2
124BE:  XORLW  01
124C0:  BTFSC  FD8.2
124C2:  GOTO   124E2
124C6:  XORLW  03
124C8:  BTFSC  FD8.2
124CA:  GOTO   124F2
124CE:  GOTO   12502
....................             case ENUM_SMF_WRITE:
....................                 smf_write(smf_data);
124D2:  MOVFF  19F,1A2
124D6:  MOVFF  19E,1A1
124DA:  GOTO   10474
....................                 break;
124DE:  GOTO   1255C
....................             case ENUM_SMF_READ:
....................                 smf_read(smf_data);
124E2:  MOVFF  19F,1A2
124E6:  MOVFF  19E,1A1
124EA:  GOTO   11530
....................                 break;
124EE:  GOTO   1255C
....................             case ENUM_SMF_ERASE:
....................                 smf_erase(smf_data);
124F2:  MOVFF  19F,1A2
124F6:  MOVFF  19E,1A1
124FA:  GOTO   11C6A
....................                 break;
124FE:  GOTO   1255C
....................             default:
....................                 fprintf(PC, "\t\t   Unknown func_type=%u\r\n",
....................                         (unsigned int)smf_data->func_type);
12502:  MOVLW  01
12504:  MOVLB  1
12506:  ADDWF  x9E,W
12508:  MOVWF  FE9
1250A:  MOVLW  00
1250C:  ADDWFC x9F,W
1250E:  MOVWF  FEA
12510:  MOVFF  FEF,1A1
12514:  MOVLW  44
12516:  MOVWF  FF6
12518:  MOVLW  14
1251A:  MOVWF  FF7
1251C:  MOVLW  00
1251E:  MOVWF  FF8
12520:  MOVLW  17
12522:  MOVLB  9
12524:  MOVWF  xC2
12526:  MOVLB  0
12528:  CALL   2312
1252C:  MOVFF  1A1,1AF
12530:  MOVLW  1B
12532:  MOVLB  1
12534:  MOVWF  xB0
12536:  MOVLB  0
12538:  CALL   F582
1253C:  MOVLW  0D
1253E:  BTFSS  FA6.6
12540:  GOTO   1253E
12544:  MOVLB  E
12546:  MOVWF  xF9
12548:  MOVLW  0A
1254A:  MOVLB  0
1254C:  BTFSS  FA6.6
1254E:  GOTO   1254C
12552:  MOVLB  E
12554:  MOVWF  xF9
....................                 break;
12556:  MOVLB  0
12558:  GOTO   1255C
....................         }
....................          processed_count++;
1255C:  MOVLB  1
1255E:  INCF   x9D,F
....................          unsigned int8 smf_id;
....................          switch (smf_data->mission_id) {
12560:  MOVF   x9E,W
12562:  MOVWF  FE9
12564:  MOVF   x9F,W
12566:  MOVWF  FEA
12568:  MOVF   FEF,W
1256A:  XORLW  00
1256C:  MOVLB  0
1256E:  BTFSC  FD8.2
12570:  GOTO   125A8
12574:  XORLW  01
12576:  BTFSC  FD8.2
12578:  GOTO   125B4
1257C:  XORLW  03
1257E:  BTFSC  FD8.2
12580:  GOTO   125C0
12584:  XORLW  01
12586:  BTFSC  FD8.2
12588:  GOTO   125CC
1258C:  XORLW  07
1258E:  BTFSC  FD8.2
12590:  GOTO   125D8
12594:  XORLW  01
12596:  BTFSC  FD8.2
12598:  GOTO   125E4
1259C:  XORLW  03
1259E:  BTFSC  FD8.2
125A0:  GOTO   125F0
125A4:  GOTO   125FC
....................             case CIGS_DATA_TABLE:
....................                smf_id = DATA_ID_CIGS_DATA_TABLE;
125A8:  MOVLW  C0
125AA:  MOVLB  1
125AC:  MOVWF  xA0
....................                break;
125AE:  MOVLB  0
125B0:  GOTO   12600
....................             case CIGS_PICLOG_DATA:
....................                smf_id = DATA_ID_CIGS_PICLOG;
125B4:  MOVLW  C1
125B6:  MOVLB  1
125B8:  MOVWF  xA0
....................                break;
125BA:  MOVLB  0
125BC:  GOTO   12600
....................             case CIGS_ENVIRO_DATA:
....................                smf_id = DATA_ID_CIGS_ENVIRO;
125C0:  MOVLW  C2
125C2:  MOVLB  1
125C4:  MOVWF  xA0
....................                break;
125C6:  MOVLB  0
125C8:  GOTO   12600
....................             case CIGS_IV1_HEADER:
....................                smf_id = DATA_ID_CIGS_IV1_HEADER;
125CC:  MOVLW  C3
125CE:  MOVLB  1
125D0:  MOVWF  xA0
....................                break;
125D2:  MOVLB  0
125D4:  GOTO   12600
....................             case CIGS_IV1_DATA:
....................                smf_id = DATA_ID_CIGS_IV1_DATA;
125D8:  MOVLW  C4
125DA:  MOVLB  1
125DC:  MOVWF  xA0
....................                break;
125DE:  MOVLB  0
125E0:  GOTO   12600
....................             case CIGS_IV2_HEADER:
....................                smf_id = DATA_ID_CIGS_IV2_HEADER;
125E4:  MOVLW  C5
125E6:  MOVLB  1
125E8:  MOVWF  xA0
....................                break;
125EA:  MOVLB  0
125EC:  GOTO   12600
....................             case CIGS_IV2_DATA:
....................                smf_id = DATA_ID_CIGS_IV2_DATA;
125F0:  MOVLW  C6
125F2:  MOVLB  1
125F4:  MOVWF  xA0
....................                 break;
125F6:  MOVLB  0
125F8:  GOTO   12600
....................             default:
....................                 break;
125FC:  GOTO   12600
....................          }
12600:  GOTO   12360
....................          
....................     }
.................... 
....................     fprintf(PC, "\t\t-> Completed %u operations\r\n",
....................             (unsigned int)processed_count);
12604:  MOVLW  60
12606:  MOVWF  FF6
12608:  MOVLW  14
1260A:  MOVWF  FF7
1260C:  MOVLW  00
1260E:  MOVWF  FF8
12610:  MOVLW  0F
12612:  MOVLB  9
12614:  MOVWF  xC2
12616:  MOVLB  0
12618:  CALL   2312
1261C:  MOVFF  19D,1AF
12620:  MOVLW  1B
12622:  MOVLB  1
12624:  MOVWF  xB0
12626:  MOVLB  0
12628:  CALL   F582
1262C:  MOVLW  71
1262E:  MOVWF  FF6
12630:  MOVLW  14
12632:  MOVWF  FF7
12634:  MOVLW  00
12636:  MOVWF  FF8
12638:  MOVLW  0D
1263A:  MOVLB  9
1263C:  MOVWF  xC2
1263E:  MOVLB  0
12640:  CALL   2312
....................       status[1] = 0xC0;
12644:  MOVLW  C0
12646:  MOVWF  4D
....................       status[0] = FINISHED;
12648:  MOVLW  06
1264A:  MOVWF  4C
1264C:  GOTO   FF9E (RETURN)
.................... }
.................... 
.................... void handle_recieve_time(Command *command)
.................... {
....................    fprintf(PC, "\t-> TIME Receive\r\n");
12650:  MOVLW  80
12652:  MOVWF  FF6
12654:  MOVLW  14
12656:  MOVWF  FF7
12658:  MOVLW  00
1265A:  MOVWF  FF8
1265C:  CALL   22DC
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
12660:  MOVLW  94
12662:  MOVWF  FF6
12664:  MOVLW  14
12666:  MOVWF  FF7
12668:  MOVLW  00
1266A:  MOVWF  FF8
1266C:  CALL   22DC
....................    transmit_ack();
12670:  CALL   58FE
.................... 
....................    // 4バイト(MSB, big-endian)に詰められた MM/DD hh:mm:ss を復元
....................    // [31:26]=0, [25:22]=month(1-12), [21:17]=day(1-31), [16:12]=hour(0-23), [11:6]=minute(0-59), [5:0]=second(0-59)
....................    unsigned int32 total_seconds = ((unsigned int32)command->content[0] << 24) |
....................                       ((unsigned int32)command->content[1] << 16) |
....................                       ((unsigned int32)command->content[2] << 8)  |
....................                       ((unsigned int32)command->content[3]);
12674:  MOVLW  03
12676:  MOVLB  1
12678:  ADDWF  x9B,W
1267A:  MOVWF  FE9
1267C:  MOVLW  00
1267E:  ADDWFC x9C,W
12680:  MOVWF  FEA
12682:  MOVF   FEF,W
12684:  CLRF   xA9
12686:  CLRF   xA8
12688:  CLRF   xA7
1268A:  MOVWF  xA6
1268C:  MOVFF  1A6,1A9
12690:  CLRF   xA6
12692:  CLRF   xA7
12694:  CLRF   xA8
12696:  MOVLW  04
12698:  ADDWF  x9B,W
1269A:  MOVWF  FE9
1269C:  MOVLW  00
1269E:  ADDWFC x9C,W
126A0:  MOVWF  FEA
126A2:  MOVF   FEF,W
126A4:  CLRF   xAE
126A6:  CLRF   xAD
126A8:  CLRF   xAC
126AA:  MOVWF  xAB
126AC:  MOVFF  1AC,03
126B0:  MOVFF  1AB,02
126B4:  CLRF   00
126B6:  CLRF   01
126B8:  MOVF   00,W
126BA:  IORWF  xA6,F
126BC:  MOVF   01,W
126BE:  IORWF  xA7,F
126C0:  MOVF   02,W
126C2:  IORWF  xA8,F
126C4:  MOVF   03,W
126C6:  IORWF  xA9,F
126C8:  MOVLW  05
126CA:  ADDWF  x9B,W
126CC:  MOVWF  FE9
126CE:  MOVLW  00
126D0:  ADDWFC x9C,W
126D2:  MOVWF  FEA
126D4:  MOVF   FEF,W
126D6:  CLRF   xAE
126D8:  CLRF   xAD
126DA:  CLRF   xAC
126DC:  MOVWF  xAB
126DE:  MOVFF  1AD,03
126E2:  MOVFF  1AC,02
126E6:  MOVFF  1AB,01
126EA:  CLRF   00
126EC:  MOVF   00,W
126EE:  IORWF  xA6,F
126F0:  MOVF   01,W
126F2:  IORWF  xA7,F
126F4:  MOVF   02,W
126F6:  IORWF  xA8,F
126F8:  MOVF   03,W
126FA:  IORWF  xA9,F
126FC:  MOVLW  06
126FE:  ADDWF  x9B,W
12700:  MOVWF  FE9
12702:  MOVLW  00
12704:  ADDWFC x9C,W
12706:  MOVWF  FEA
12708:  MOVF   FEF,W
1270A:  MOVWF  00
1270C:  CLRF   01
1270E:  CLRF   02
12710:  CLRF   03
12712:  MOVF   00,W
12714:  IORWF  xA6,W
12716:  MOVWF  x9D
12718:  MOVF   01,W
1271A:  IORWF  xA7,W
1271C:  MOVWF  x9E
1271E:  MOVF   02,W
12720:  IORWF  xA8,W
12722:  MOVWF  x9F
12724:  MOVF   03,W
12726:  IORWF  xA9,W
12728:  MOVWF  xA0
.................... 
....................    set_current_sec(total_seconds);
1272A:  MOVFF  1A0,1A9
1272E:  MOVFF  19F,1A8
12732:  MOVFF  19E,1A7
12736:  MOVFF  19D,1A6
1273A:  MOVLB  0
1273C:  GOTO   FF1E
....................    unsigned int16 days;
....................    unsigned int8 hours, minutes, seconds;
....................    days    = total_seconds / 86400;
12740:  BCF    FD8.1
12742:  MOVFF  1A0,215
12746:  MOVFF  19F,214
1274A:  MOVFF  19E,213
1274E:  MOVFF  19D,212
12752:  MOVLB  2
12754:  CLRF   x19
12756:  MOVLW  01
12758:  MOVWF  x18
1275A:  MOVLW  51
1275C:  MOVWF  x17
1275E:  MOVLW  80
12760:  MOVWF  x16
12762:  MOVLB  0
12764:  CALL   61F6
12768:  MOVFF  01,1A2
1276C:  MOVFF  00,1A1
....................    hours   = (total_seconds % 86400) / 3600;
12770:  BSF    FD8.1
12772:  MOVLW  01
12774:  MOVWF  FEA
12776:  MOVLW  A6
12778:  MOVWF  FE9
1277A:  MOVFF  1A0,215
1277E:  MOVFF  19F,214
12782:  MOVFF  19E,213
12786:  MOVFF  19D,212
1278A:  MOVLB  2
1278C:  CLRF   x19
1278E:  MOVLW  01
12790:  MOVWF  x18
12792:  MOVLW  51
12794:  MOVWF  x17
12796:  MOVLW  80
12798:  MOVWF  x16
1279A:  MOVLB  0
1279C:  CALL   61F6
127A0:  MOVFF  1A9,1AD
127A4:  MOVFF  1A8,1AC
127A8:  MOVFF  1A7,1AB
127AC:  MOVFF  1A6,1AA
127B0:  MOVFF  FEA,1AF
127B4:  MOVFF  FE9,1AE
127B8:  BCF    FD8.1
127BA:  MOVFF  1AD,215
127BE:  MOVFF  1AC,214
127C2:  MOVFF  1AB,213
127C6:  MOVFF  1AA,212
127CA:  MOVLB  2
127CC:  CLRF   x19
127CE:  CLRF   x18
127D0:  MOVLW  0E
127D2:  MOVWF  x17
127D4:  MOVLW  10
127D6:  MOVWF  x16
127D8:  MOVLB  0
127DA:  CALL   61F6
127DE:  MOVFF  1AF,FEA
127E2:  MOVFF  1AE,FE9
127E6:  MOVFF  00,1A3
....................    minutes = (total_seconds % 3600) / 60;
127EA:  BSF    FD8.1
127EC:  MOVLW  01
127EE:  MOVWF  FEA
127F0:  MOVLW  A6
127F2:  MOVWF  FE9
127F4:  MOVFF  1A0,215
127F8:  MOVFF  19F,214
127FC:  MOVFF  19E,213
12800:  MOVFF  19D,212
12804:  MOVLB  2
12806:  CLRF   x19
12808:  CLRF   x18
1280A:  MOVLW  0E
1280C:  MOVWF  x17
1280E:  MOVLW  10
12810:  MOVWF  x16
12812:  MOVLB  0
12814:  CALL   61F6
12818:  MOVFF  1A9,1AD
1281C:  MOVFF  1A8,1AC
12820:  MOVFF  1A7,1AB
12824:  MOVFF  1A6,1AA
12828:  MOVFF  FEA,1AF
1282C:  MOVFF  FE9,1AE
12830:  BCF    FD8.1
12832:  MOVFF  1AD,215
12836:  MOVFF  1AC,214
1283A:  MOVFF  1AB,213
1283E:  MOVFF  1AA,212
12842:  MOVLB  2
12844:  CLRF   x19
12846:  CLRF   x18
12848:  CLRF   x17
1284A:  MOVLW  3C
1284C:  MOVWF  x16
1284E:  MOVLB  0
12850:  CALL   61F6
12854:  MOVFF  1AF,FEA
12858:  MOVFF  1AE,FE9
1285C:  MOVFF  00,1A4
....................    seconds = total_seconds % 60;
12860:  BSF    FD8.1
12862:  MOVLW  01
12864:  MOVWF  FEA
12866:  MOVLW  A6
12868:  MOVWF  FE9
1286A:  MOVFF  1A0,215
1286E:  MOVFF  19F,214
12872:  MOVFF  19E,213
12876:  MOVFF  19D,212
1287A:  MOVLB  2
1287C:  CLRF   x19
1287E:  CLRF   x18
12880:  CLRF   x17
12882:  MOVLW  3C
12884:  MOVWF  x16
12886:  MOVLB  0
12888:  CALL   61F6
1288C:  MOVFF  1A6,1A5
.................... 
....................    fprintf(PC, "\t\t-> Set time to %lu days, %02u:%02u:%02u\r\n",
....................            days, hours, minutes, seconds);
12890:  MOVLW  AE
12892:  MOVWF  FF6
12894:  MOVLW  14
12896:  MOVWF  FF7
12898:  MOVLW  00
1289A:  MOVWF  FF8
1289C:  MOVLW  11
1289E:  MOVLB  9
128A0:  MOVWF  xC2
128A2:  MOVLB  0
128A4:  CALL   2312
128A8:  MOVLW  10
128AA:  MOVWF  FE9
128AC:  MOVFF  1A2,1EA
128B0:  MOVFF  1A1,1E9
128B4:  CALL   8E60
128B8:  MOVLW  C2
128BA:  MOVWF  FF6
128BC:  MOVLW  14
128BE:  MOVWF  FF7
128C0:  MOVLW  00
128C2:  MOVWF  FF8
128C4:  MOVLW  07
128C6:  MOVLB  9
128C8:  MOVWF  xC2
128CA:  MOVLB  0
128CC:  CALL   2312
128D0:  MOVFF  1A3,1AF
128D4:  MOVLW  01
128D6:  MOVLB  1
128D8:  MOVWF  xB0
128DA:  MOVLB  0
128DC:  CALL   F582
128E0:  MOVLW  3A
128E2:  BTFSS  FA6.6
128E4:  GOTO   128E2
128E8:  MOVLB  E
128EA:  MOVWF  xF9
128EC:  MOVFF  1A4,1AF
128F0:  MOVLW  01
128F2:  MOVLB  1
128F4:  MOVWF  xB0
128F6:  MOVLB  0
128F8:  CALL   F582
128FC:  MOVLW  3A
128FE:  BTFSS  FA6.6
12900:  GOTO   128FE
12904:  MOVLB  E
12906:  MOVWF  xF9
12908:  MOVFF  1A5,1AF
1290C:  MOVLW  01
1290E:  MOVLB  1
12910:  MOVWF  xB0
12912:  MOVLB  0
12914:  CALL   F582
12918:  MOVLW  0D
1291A:  BTFSS  FA6.6
1291C:  GOTO   1291A
12920:  MOVLB  E
12922:  MOVWF  xF9
12924:  MOVLW  0A
12926:  MOVLB  0
12928:  BTFSS  FA6.6
1292A:  GOTO   12928
1292E:  MOVLB  E
12930:  MOVWF  xF9
12932:  MOVLB  0
12934:  GOTO   FFAE (RETURN)
.................... 
.................... }
.................... // End of file
.................... 
.................... #include "application/cigs_mode_mission.c"
.................... #include "cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_PRINT 0xA3
.................... #define ID_MEAS_IV_PRINT 0xA4
.................... #define ID_MEAS_PD 0xA5
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_pd(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_1sweep(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_port1(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_port2(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int16 interval;
....................     unsigned int16 pd_threshold;
....................     unsigned int16 meas_time;
....................     unsigned int16 log_threshold;
....................     unsigned int16 sweep_limit;
.................... } meas_iv_param_t;
.................... 
.................... 
.................... // MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... meas_iv_param_t make_meas_iv_cmd(int8 *uplinkcmd_ptr);
.................... void print_meas_iv_cmd(meas_iv_param_t *cmd_ptr);
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/device/ad7490.h"                    // ADCライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... // === AD7490 Control Word ===
.................... // Bit[15]   : WRITE (常に0)
.................... // Bit[14:13]: SEQ mode (シーケンス設定)
.................... // Bit[12]   : SHADOW (0=disabled, 1=enabled)
.................... // Bit[11]   : Don't Care
.................... // Bit[10]   : PM1 (Power Management)
.................... // Bit[9]    : PM0
.................... // Bit[8]    : REFSEL (0=internal, 1=external)
.................... // Bit[7]    : Coding (0=straight binary, 1=twos complement)
.................... // Bit[6]    : Don't Care
.................... // Bit[5]    : ADD2
.................... // Bit[4]    : ADD1
.................... // Bit[3]    : ADD0
.................... // Bit[2]    : DIFF (0=single-ended, 1=differential)
.................... // Bit[1:0]  : Don't Care
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000011
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000000
.................... 
.................... 
.................... // ----------------------------
.................... // WRITE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_WRITE_DISABLE = 0,  // 書き込み無効
....................     AD7490_WRITE_ENABLE  = 1   // 書き込み有効
.................... } ad7490_write_t;
.................... 
.................... // ----------------------------
.................... // SEQ bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SEQ_DISABLE = 0,
....................     AD7490_SEQ_ENABLE  = 1
.................... } ad7490_seq_t;
.................... 
.................... // ----------------------------
.................... // CODING bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CODING_BINARY  = 0, // ストレートバイナリ
....................     AD7490_CODING_TWOS    = 1  // Two’s complement
.................... } ad7490_coding_t;
.................... 
.................... // ----------------------------
.................... // RANGE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_RANGE_2REF  = 0, // 0〜2*REFIN
....................     AD7490_RANGE_REF   = 1  // 0〜REFIN
.................... } ad7490_range_t;
.................... 
.................... // ----------------------------
.................... // WEAK/TRI bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_DOUT_TRI   = 0, // Three-state
....................     AD7490_DOUT_WEAK  = 1  // Weakly driven
.................... } ad7490_dout_t;
.................... 
.................... // ----------------------------
.................... // SHADOW bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SHADOW_DISABLE = 0,
....................     AD7490_SHADOW_ENABLE  = 1
.................... } ad7490_shadow_t;
.................... 
.................... // ----------------------------
.................... // Power Mode (PM1, PM0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_PWR_NORMAL    = 0, // 00
....................     AD7490_PWR_FULLDOWN  = 1, // 01
....................     AD7490_PWR_AUTO      = 2, // 10
....................     AD7490_PWR_SHUTDOWN  = 3  // 11
.................... } ad7490_pwr_mode_t;
.................... 
.................... // ----------------------------
.................... // Channel Address (ADD3–ADD0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CH0  = 0,
....................     AD7490_CH1  = 1,
....................     AD7490_CH2  = 2,
....................     AD7490_CH3  = 3,
....................     AD7490_CH4  = 4,
....................     AD7490_CH5  = 5,
....................     AD7490_CH6  = 6,
....................     AD7490_CH7  = 7,
....................     AD7490_CH8  = 8,
....................     AD7490_CH9  = 9,
....................     AD7490_CH10 = 10,
....................     AD7490_CH11 = 11,
....................     AD7490_CH12 = 12,
....................     AD7490_CH13 = 13,
....................     AD7490_CH14 = 14,
....................     AD7490_CH15 = 15
.................... } ad7490_channel_t;
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_flash.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void mode_meas_iv_1sweep(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS IV 1 SWEEP\r\n");
*
0E52A:  MOVLW  DA
0E52C:  MOVWF  FF6
0E52E:  MOVLW  14
0E530:  MOVWF  FF7
0E532:  MOVLW  00
0E534:  MOVWF  FF8
0E536:  CALL   22DC
.................... 
....................    mode_misf_erase_and_reset(uplinkcmd_ptr);
0E53A:  MOVFF  1B0,1C9
0E53E:  MOVFF  1AF,1C8
0E542:  CALL   75D4
.................... 
....................    meas_iv_param_t cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0E546:  MOVFF  1B0,1E6
0E54A:  MOVFF  1AF,1E5
0E54E:  CALL   8260
0E552:  MOVFF  02,03
0E556:  MOVF   01,W
0E558:  MOVWF  FE1
0E55A:  MOVFF  03,FE2
0E55E:  MOVLW  01
0E560:  MOVWF  FEA
0E562:  MOVLW  B1
0E564:  MOVWF  FE9
0E566:  MOVLW  0B
0E568:  MOVWF  01
0E56A:  MOVFF  FE6,FEE
0E56E:  DECFSZ 01,F
0E570:  GOTO   E56A
....................    cmd.sweep_limit = 0x0030;
0E574:  MOVLB  1
0E576:  CLRF   xBB
0E578:  MOVLW  30
0E57A:  MOVWF  xBA
....................    sweep(cmd.log_threshold, cmd.sweep_limit, cmd.pd_threshold);
0E57C:  MOVFF  1B9,1E0
0E580:  MOVFF  1B8,1DF
0E584:  MOVFF  1BB,1E2
0E588:  MOVFF  1BA,1E1
0E58C:  MOVFF  1B5,1E4
0E590:  MOVFF  1B4,1E3
0E594:  MOVLB  0
0E596:  CALL   9B4A
....................    
....................    FlashOperationStruct data = {0};
0E59A:  MOVLB  1
0E59C:  CLRF   xBC
0E59E:  CLRF   xBD
0E5A0:  CLRF   xBE
0E5A2:  CLRF   xBF
0E5A4:  CLRF   xC0
0E5A6:  CLRF   xC1
0E5A8:  CLRF   xC2
0E5AA:  CLRF   xC3
0E5AC:  CLRF   xC4
0E5AE:  CLRF   xC5
0E5B0:  CLRF   xC6
0E5B2:  CLRF   xC7
....................    data.func_type = ENUM_SMF_WRITE;
0E5B4:  CLRF   xBD
....................    data.mission_id = CIGS_IV1_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0E5B6:  MOVLW  04
0E5B8:  MOVWF  xBC
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0E5BA:  MOVLW  02
0E5BC:  MOVWF  xBE
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0E5BE:  BCF    xBF.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0E5C0:  MOVLW  F8
0E5C2:  MOVWF  FF6
0E5C4:  MOVLW  14
0E5C6:  MOVWF  FF7
0E5C8:  MOVLW  00
0E5CA:  MOVWF  FF8
0E5CC:  MOVLB  0
0E5CE:  CALL   22DC
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0E5D2:  MOVLW  0A
0E5D4:  MOVWF  FF6
0E5D6:  MOVLW  15
0E5D8:  MOVWF  FF7
0E5DA:  MOVLW  00
0E5DC:  MOVWF  FF8
0E5DE:  MOVLW  0F
0E5E0:  MOVLB  9
0E5E2:  MOVWF  xC2
0E5E4:  MOVLB  0
0E5E6:  CALL   2312
0E5EA:  MOVFF  1BC,9E8
0E5EE:  MOVLW  37
0E5F0:  MOVLB  9
0E5F2:  MOVWF  xE9
0E5F4:  MOVLB  0
0E5F6:  CALL   2542
0E5FA:  MOVLW  0D
0E5FC:  BTFSS  FA6.6
0E5FE:  GOTO   E5FC
0E602:  MOVLB  E
0E604:  MOVWF  xF9
0E606:  MOVLW  0A
0E608:  MOVLB  0
0E60A:  BTFSS  FA6.6
0E60C:  GOTO   E60A
0E610:  MOVLB  E
0E612:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0E614:  MOVLW  20
0E616:  MOVWF  FF6
0E618:  MOVLW  15
0E61A:  MOVWF  FF7
0E61C:  MOVLW  00
0E61E:  MOVWF  FF8
0E620:  MOVLW  0F
0E622:  MOVLB  9
0E624:  MOVWF  xC2
0E626:  MOVLB  0
0E628:  CALL   2312
0E62C:  MOVFF  1BD,9E8
0E630:  MOVLW  37
0E632:  MOVLB  9
0E634:  MOVWF  xE9
0E636:  MOVLB  0
0E638:  CALL   2542
0E63C:  MOVLW  0D
0E63E:  BTFSS  FA6.6
0E640:  GOTO   E63E
0E644:  MOVLB  E
0E646:  MOVWF  xF9
0E648:  MOVLW  0A
0E64A:  MOVLB  0
0E64C:  BTFSS  FA6.6
0E64E:  GOTO   E64C
0E652:  MOVLB  E
0E654:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0E656:  MOVLW  36
0E658:  MOVWF  FF6
0E65A:  MOVLW  15
0E65C:  MOVWF  FF7
0E65E:  MOVLW  00
0E660:  MOVWF  FF8
0E662:  MOVLW  0F
0E664:  MOVLB  9
0E666:  MOVWF  xC2
0E668:  MOVLB  0
0E66A:  CALL   2312
0E66E:  MOVFF  1BE,9E8
0E672:  MOVLW  37
0E674:  MOVLB  9
0E676:  MOVWF  xE9
0E678:  MOVLB  0
0E67A:  CALL   2542
0E67E:  MOVLW  0D
0E680:  BTFSS  FA6.6
0E682:  GOTO   E680
0E686:  MOVLB  E
0E688:  MOVWF  xF9
0E68A:  MOVLW  0A
0E68C:  MOVLB  0
0E68E:  BTFSS  FA6.6
0E690:  GOTO   E68E
0E694:  MOVLB  E
0E696:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0E698:  MOVLW  00
0E69A:  MOVLB  1
0E69C:  BTFSC  xBF.0
0E69E:  MOVLW  01
0E6A0:  MOVWF  xC8
0E6A2:  MOVLW  4C
0E6A4:  MOVWF  FF6
0E6A6:  MOVLW  15
0E6A8:  MOVWF  FF7
0E6AA:  MOVLW  00
0E6AC:  MOVWF  FF8
0E6AE:  MOVLW  0F
0E6B0:  MOVLB  9
0E6B2:  MOVWF  xC2
0E6B4:  MOVLB  0
0E6B6:  CALL   2312
0E6BA:  MOVFF  1C8,9E8
0E6BE:  MOVLW  37
0E6C0:  MOVLB  9
0E6C2:  MOVWF  xE9
0E6C4:  MOVLB  0
0E6C6:  CALL   2542
0E6CA:  MOVLW  0D
0E6CC:  BTFSS  FA6.6
0E6CE:  GOTO   E6CC
0E6D2:  MOVLB  E
0E6D4:  MOVWF  xF9
0E6D6:  MOVLW  0A
0E6D8:  MOVLB  0
0E6DA:  BTFSS  FA6.6
0E6DC:  GOTO   E6DA
0E6E0:  MOVLB  E
0E6E2:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0E6E4:  MOVLW  62
0E6E6:  MOVWF  FF6
0E6E8:  MOVLW  15
0E6EA:  MOVWF  FF7
0E6EC:  MOVLW  00
0E6EE:  MOVWF  FF8
0E6F0:  MOVLW  0F
0E6F2:  MOVLB  9
0E6F4:  MOVWF  xC2
0E6F6:  MOVLB  0
0E6F8:  CALL   2312
0E6FC:  MOVLW  02
0E6FE:  MOVLB  1
0E700:  MOVWF  xC8
0E702:  MOVLB  0
0E704:  MOVLW  30
0E706:  BTFSS  FA6.6
0E708:  GOTO   E706
0E70C:  MOVLB  E
0E70E:  MOVWF  xF9
0E710:  MOVLB  1
0E712:  DECFSZ xC8,F
0E714:  BRA    E71A
0E716:  BRA    E720
0E718:  MOVLB  0
0E71A:  MOVLB  0
0E71C:  GOTO   E704
0E720:  MOVFF  1C0,9E8
0E724:  MOVLW  37
0E726:  MOVLB  9
0E728:  MOVWF  xE9
0E72A:  MOVLB  0
0E72C:  CALL   2542
0E730:  MOVLW  0D
0E732:  BTFSS  FA6.6
0E734:  GOTO   E732
0E738:  MOVLB  E
0E73A:  MOVWF  xF9
0E73C:  MOVLW  0A
0E73E:  MOVLB  0
0E740:  BTFSS  FA6.6
0E742:  GOTO   E740
0E746:  MOVLB  E
0E748:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV1_DATA].uncopied_counter);
0E74A:  MOVLW  78
0E74C:  MOVWF  FF6
0E74E:  MOVLW  15
0E750:  MOVWF  FF7
0E752:  MOVLW  00
0E754:  MOVWF  FF8
0E756:  MOVLW  0F
0E758:  MOVLB  9
0E75A:  MOVWF  xC2
0E75C:  MOVLB  0
0E75E:  CALL   2312
0E762:  MOVLW  02
0E764:  MOVLB  1
0E766:  MOVWF  xC8
0E768:  MOVLB  0
0E76A:  MOVLW  30
0E76C:  BTFSS  FA6.6
0E76E:  GOTO   E76C
0E772:  MOVLB  E
0E774:  MOVWF  xF9
0E776:  MOVLB  1
0E778:  DECFSZ xC8,F
0E77A:  BRA    E780
0E77C:  BRA    E786
0E77E:  MOVLB  0
0E780:  MOVLB  0
0E782:  GOTO   E76A
0E786:  MOVFF  14E,9E8
0E78A:  MOVLW  37
0E78C:  MOVLB  9
0E78E:  MOVWF  xE9
0E790:  MOVLB  0
0E792:  CALL   2542
0E796:  MOVLW  0D
0E798:  BTFSS  FA6.6
0E79A:  GOTO   E798
0E79E:  MOVLB  E
0E7A0:  MOVWF  xF9
0E7A2:  MOVLW  0A
0E7A4:  MOVLB  0
0E7A6:  BTFSS  FA6.6
0E7A8:  GOTO   E7A6
0E7AC:  MOVLB  E
0E7AE:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0E7B0:  MOVLW  01
0E7B2:  MOVLB  1
0E7B4:  MOVWF  xE0
0E7B6:  MOVLW  BC
0E7B8:  MOVWF  xDF
0E7BA:  MOVLB  0
0E7BC:  CALL   A83E
.................... 
.................... 
....................    data.func_type = ENUM_SMF_WRITE;
0E7C0:  MOVLB  1
0E7C2:  CLRF   xBD
....................    data.mission_id = CIGS_IV2_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0E7C4:  MOVLW  06
0E7C6:  MOVWF  xBC
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0E7C8:  MOVLW  02
0E7CA:  MOVWF  xBE
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0E7CC:  BCF    xBF.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0E7CE:  MOVLW  8E
0E7D0:  MOVWF  FF6
0E7D2:  MOVLW  15
0E7D4:  MOVWF  FF7
0E7D6:  MOVLW  00
0E7D8:  MOVWF  FF8
0E7DA:  MOVLB  0
0E7DC:  CALL   22DC
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0E7E0:  MOVLW  A0
0E7E2:  MOVWF  FF6
0E7E4:  MOVLW  15
0E7E6:  MOVWF  FF7
0E7E8:  MOVLW  00
0E7EA:  MOVWF  FF8
0E7EC:  MOVLW  0F
0E7EE:  MOVLB  9
0E7F0:  MOVWF  xC2
0E7F2:  MOVLB  0
0E7F4:  CALL   2312
0E7F8:  MOVFF  1BC,9E8
0E7FC:  MOVLW  37
0E7FE:  MOVLB  9
0E800:  MOVWF  xE9
0E802:  MOVLB  0
0E804:  CALL   2542
0E808:  MOVLW  0D
0E80A:  BTFSS  FA6.6
0E80C:  GOTO   E80A
0E810:  MOVLB  E
0E812:  MOVWF  xF9
0E814:  MOVLW  0A
0E816:  MOVLB  0
0E818:  BTFSS  FA6.6
0E81A:  GOTO   E818
0E81E:  MOVLB  E
0E820:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0E822:  MOVLW  B6
0E824:  MOVWF  FF6
0E826:  MOVLW  15
0E828:  MOVWF  FF7
0E82A:  MOVLW  00
0E82C:  MOVWF  FF8
0E82E:  MOVLW  0F
0E830:  MOVLB  9
0E832:  MOVWF  xC2
0E834:  MOVLB  0
0E836:  CALL   2312
0E83A:  MOVFF  1BD,9E8
0E83E:  MOVLW  37
0E840:  MOVLB  9
0E842:  MOVWF  xE9
0E844:  MOVLB  0
0E846:  CALL   2542
0E84A:  MOVLW  0D
0E84C:  BTFSS  FA6.6
0E84E:  GOTO   E84C
0E852:  MOVLB  E
0E854:  MOVWF  xF9
0E856:  MOVLW  0A
0E858:  MOVLB  0
0E85A:  BTFSS  FA6.6
0E85C:  GOTO   E85A
0E860:  MOVLB  E
0E862:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0E864:  MOVLW  CC
0E866:  MOVWF  FF6
0E868:  MOVLW  15
0E86A:  MOVWF  FF7
0E86C:  MOVLW  00
0E86E:  MOVWF  FF8
0E870:  MOVLW  0F
0E872:  MOVLB  9
0E874:  MOVWF  xC2
0E876:  MOVLB  0
0E878:  CALL   2312
0E87C:  MOVFF  1BE,9E8
0E880:  MOVLW  37
0E882:  MOVLB  9
0E884:  MOVWF  xE9
0E886:  MOVLB  0
0E888:  CALL   2542
0E88C:  MOVLW  0D
0E88E:  BTFSS  FA6.6
0E890:  GOTO   E88E
0E894:  MOVLB  E
0E896:  MOVWF  xF9
0E898:  MOVLW  0A
0E89A:  MOVLB  0
0E89C:  BTFSS  FA6.6
0E89E:  GOTO   E89C
0E8A2:  MOVLB  E
0E8A4:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0E8A6:  MOVLW  00
0E8A8:  MOVLB  1
0E8AA:  BTFSC  xBF.0
0E8AC:  MOVLW  01
0E8AE:  MOVWF  xC8
0E8B0:  MOVLW  E2
0E8B2:  MOVWF  FF6
0E8B4:  MOVLW  15
0E8B6:  MOVWF  FF7
0E8B8:  MOVLW  00
0E8BA:  MOVWF  FF8
0E8BC:  MOVLW  0F
0E8BE:  MOVLB  9
0E8C0:  MOVWF  xC2
0E8C2:  MOVLB  0
0E8C4:  CALL   2312
0E8C8:  MOVFF  1C8,9E8
0E8CC:  MOVLW  37
0E8CE:  MOVLB  9
0E8D0:  MOVWF  xE9
0E8D2:  MOVLB  0
0E8D4:  CALL   2542
0E8D8:  MOVLW  0D
0E8DA:  BTFSS  FA6.6
0E8DC:  GOTO   E8DA
0E8E0:  MOVLB  E
0E8E2:  MOVWF  xF9
0E8E4:  MOVLW  0A
0E8E6:  MOVLB  0
0E8E8:  BTFSS  FA6.6
0E8EA:  GOTO   E8E8
0E8EE:  MOVLB  E
0E8F0:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0E8F2:  MOVLW  F8
0E8F4:  MOVWF  FF6
0E8F6:  MOVLW  15
0E8F8:  MOVWF  FF7
0E8FA:  MOVLW  00
0E8FC:  MOVWF  FF8
0E8FE:  MOVLW  0F
0E900:  MOVLB  9
0E902:  MOVWF  xC2
0E904:  MOVLB  0
0E906:  CALL   2312
0E90A:  MOVLW  02
0E90C:  MOVLB  1
0E90E:  MOVWF  xC8
0E910:  MOVLB  0
0E912:  MOVLW  30
0E914:  BTFSS  FA6.6
0E916:  GOTO   E914
0E91A:  MOVLB  E
0E91C:  MOVWF  xF9
0E91E:  MOVLB  1
0E920:  DECFSZ xC8,F
0E922:  BRA    E928
0E924:  BRA    E92E
0E926:  MOVLB  0
0E928:  MOVLB  0
0E92A:  GOTO   E912
0E92E:  MOVFF  1C0,9E8
0E932:  MOVLW  37
0E934:  MOVLB  9
0E936:  MOVWF  xE9
0E938:  MOVLB  0
0E93A:  CALL   2542
0E93E:  MOVLW  0D
0E940:  BTFSS  FA6.6
0E942:  GOTO   E940
0E946:  MOVLB  E
0E948:  MOVWF  xF9
0E94A:  MOVLW  0A
0E94C:  MOVLB  0
0E94E:  BTFSS  FA6.6
0E950:  GOTO   E94E
0E954:  MOVLB  E
0E956:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV2_DATA].uncopied_counter);
0E958:  MOVLW  0E
0E95A:  MOVWF  FF6
0E95C:  MOVLW  16
0E95E:  MOVWF  FF7
0E960:  MOVLW  00
0E962:  MOVWF  FF8
0E964:  MOVLW  0F
0E966:  MOVLB  9
0E968:  MOVWF  xC2
0E96A:  MOVLB  0
0E96C:  CALL   2312
0E970:  MOVLW  02
0E972:  MOVLB  1
0E974:  MOVWF  xC8
0E976:  MOVLB  0
0E978:  MOVLW  30
0E97A:  BTFSS  FA6.6
0E97C:  GOTO   E97A
0E980:  MOVLB  E
0E982:  MOVWF  xF9
0E984:  MOVLB  1
0E986:  DECFSZ xC8,F
0E988:  BRA    E98E
0E98A:  BRA    E994
0E98C:  MOVLB  0
0E98E:  MOVLB  0
0E990:  GOTO   E978
0E994:  MOVFF  162,9E8
0E998:  MOVLW  37
0E99A:  MOVLB  9
0E99C:  MOVWF  xE9
0E99E:  MOVLB  0
0E9A0:  CALL   2542
0E9A4:  MOVLW  0D
0E9A6:  BTFSS  FA6.6
0E9A8:  GOTO   E9A6
0E9AC:  MOVLB  E
0E9AE:  MOVWF  xF9
0E9B0:  MOVLW  0A
0E9B2:  MOVLB  0
0E9B4:  BTFSS  FA6.6
0E9B6:  GOTO   E9B4
0E9BA:  MOVLB  E
0E9BC:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0E9BE:  MOVLW  01
0E9C0:  MOVLB  1
0E9C2:  MOVWF  xE0
0E9C4:  MOVLW  BC
0E9C6:  MOVWF  xDF
0E9C8:  MOVLB  0
0E9CA:  CALL   A83E
.................... 
....................    misf_update_address_area();
0E9CE:  CALL   505C
....................    print_misf_address_table();
0E9D2:  CALL   3156
0E9D6:  GOTO   F9F2 (RETURN)
.................... }
.................... 
.................... void mode_meas_iv_port1(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS IV PORT1\r\n");
*
0F032:  MOVLW  24
0F034:  MOVWF  FF6
0F036:  MOVLW  16
0F038:  MOVWF  FF7
0F03A:  MOVLW  00
0F03C:  MOVWF  FF8
0F03E:  CALL   22DC
.................... 
....................    mode_misf_erase_and_reset(uplinkcmd_ptr);
0F042:  MOVFF  1B0,1C9
0F046:  MOVFF  1AF,1C8
0F04A:  CALL   75D4
.................... 
....................    meas_iv_param_t cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0F04E:  MOVFF  1B0,1E6
0F052:  MOVFF  1AF,1E5
0F056:  CALL   8260
0F05A:  MOVFF  02,03
0F05E:  MOVF   01,W
0F060:  MOVWF  FE1
0F062:  MOVFF  03,FE2
0F066:  MOVLW  01
0F068:  MOVWF  FEA
0F06A:  MOVLW  B1
0F06C:  MOVWF  FE9
0F06E:  MOVLW  0B
0F070:  MOVWF  01
0F072:  MOVFF  FE6,FEE
0F076:  DECFSZ 01,F
0F078:  GOTO   F072
....................    sweep_port1(cmd.sweep_limit);
0F07C:  MOVFF  1BB,1C9
0F080:  MOVFF  1BA,1C8
0F084:  CALL   E9DA
.................... 
....................    FlashOperationStruct data = {0};
0F088:  MOVLB  1
0F08A:  CLRF   xBC
0F08C:  CLRF   xBD
0F08E:  CLRF   xBE
0F090:  CLRF   xBF
0F092:  CLRF   xC0
0F094:  CLRF   xC1
0F096:  CLRF   xC2
0F098:  CLRF   xC3
0F09A:  CLRF   xC4
0F09C:  CLRF   xC5
0F09E:  CLRF   xC6
0F0A0:  CLRF   xC7
....................    data.func_type = ENUM_SMF_WRITE;
0F0A2:  CLRF   xBD
....................    data.mission_id = CIGS_IV1_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0F0A4:  MOVLW  04
0F0A6:  MOVWF  xBC
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0F0A8:  MOVLW  02
0F0AA:  MOVWF  xBE
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0F0AC:  BCF    xBF.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0F0AE:  MOVLW  40
0F0B0:  MOVWF  FF6
0F0B2:  MOVLW  16
0F0B4:  MOVWF  FF7
0F0B6:  MOVLW  00
0F0B8:  MOVWF  FF8
0F0BA:  MOVLB  0
0F0BC:  CALL   22DC
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0F0C0:  MOVLW  52
0F0C2:  MOVWF  FF6
0F0C4:  MOVLW  16
0F0C6:  MOVWF  FF7
0F0C8:  MOVLW  00
0F0CA:  MOVWF  FF8
0F0CC:  MOVLW  0F
0F0CE:  MOVLB  9
0F0D0:  MOVWF  xC2
0F0D2:  MOVLB  0
0F0D4:  CALL   2312
0F0D8:  MOVFF  1BC,9E8
0F0DC:  MOVLW  37
0F0DE:  MOVLB  9
0F0E0:  MOVWF  xE9
0F0E2:  MOVLB  0
0F0E4:  CALL   2542
0F0E8:  MOVLW  0D
0F0EA:  BTFSS  FA6.6
0F0EC:  GOTO   F0EA
0F0F0:  MOVLB  E
0F0F2:  MOVWF  xF9
0F0F4:  MOVLW  0A
0F0F6:  MOVLB  0
0F0F8:  BTFSS  FA6.6
0F0FA:  GOTO   F0F8
0F0FE:  MOVLB  E
0F100:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0F102:  MOVLW  68
0F104:  MOVWF  FF6
0F106:  MOVLW  16
0F108:  MOVWF  FF7
0F10A:  MOVLW  00
0F10C:  MOVWF  FF8
0F10E:  MOVLW  0F
0F110:  MOVLB  9
0F112:  MOVWF  xC2
0F114:  MOVLB  0
0F116:  CALL   2312
0F11A:  MOVFF  1BD,9E8
0F11E:  MOVLW  37
0F120:  MOVLB  9
0F122:  MOVWF  xE9
0F124:  MOVLB  0
0F126:  CALL   2542
0F12A:  MOVLW  0D
0F12C:  BTFSS  FA6.6
0F12E:  GOTO   F12C
0F132:  MOVLB  E
0F134:  MOVWF  xF9
0F136:  MOVLW  0A
0F138:  MOVLB  0
0F13A:  BTFSS  FA6.6
0F13C:  GOTO   F13A
0F140:  MOVLB  E
0F142:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0F144:  MOVLW  7E
0F146:  MOVWF  FF6
0F148:  MOVLW  16
0F14A:  MOVWF  FF7
0F14C:  MOVLW  00
0F14E:  MOVWF  FF8
0F150:  MOVLW  0F
0F152:  MOVLB  9
0F154:  MOVWF  xC2
0F156:  MOVLB  0
0F158:  CALL   2312
0F15C:  MOVFF  1BE,9E8
0F160:  MOVLW  37
0F162:  MOVLB  9
0F164:  MOVWF  xE9
0F166:  MOVLB  0
0F168:  CALL   2542
0F16C:  MOVLW  0D
0F16E:  BTFSS  FA6.6
0F170:  GOTO   F16E
0F174:  MOVLB  E
0F176:  MOVWF  xF9
0F178:  MOVLW  0A
0F17A:  MOVLB  0
0F17C:  BTFSS  FA6.6
0F17E:  GOTO   F17C
0F182:  MOVLB  E
0F184:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0F186:  MOVLW  00
0F188:  MOVLB  1
0F18A:  BTFSC  xBF.0
0F18C:  MOVLW  01
0F18E:  MOVWF  xC8
0F190:  MOVLW  94
0F192:  MOVWF  FF6
0F194:  MOVLW  16
0F196:  MOVWF  FF7
0F198:  MOVLW  00
0F19A:  MOVWF  FF8
0F19C:  MOVLW  0F
0F19E:  MOVLB  9
0F1A0:  MOVWF  xC2
0F1A2:  MOVLB  0
0F1A4:  CALL   2312
0F1A8:  MOVFF  1C8,9E8
0F1AC:  MOVLW  37
0F1AE:  MOVLB  9
0F1B0:  MOVWF  xE9
0F1B2:  MOVLB  0
0F1B4:  CALL   2542
0F1B8:  MOVLW  0D
0F1BA:  BTFSS  FA6.6
0F1BC:  GOTO   F1BA
0F1C0:  MOVLB  E
0F1C2:  MOVWF  xF9
0F1C4:  MOVLW  0A
0F1C6:  MOVLB  0
0F1C8:  BTFSS  FA6.6
0F1CA:  GOTO   F1C8
0F1CE:  MOVLB  E
0F1D0:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0F1D2:  MOVLW  AA
0F1D4:  MOVWF  FF6
0F1D6:  MOVLW  16
0F1D8:  MOVWF  FF7
0F1DA:  MOVLW  00
0F1DC:  MOVWF  FF8
0F1DE:  MOVLW  0F
0F1E0:  MOVLB  9
0F1E2:  MOVWF  xC2
0F1E4:  MOVLB  0
0F1E6:  CALL   2312
0F1EA:  MOVLW  02
0F1EC:  MOVLB  1
0F1EE:  MOVWF  xC8
0F1F0:  MOVLB  0
0F1F2:  MOVLW  30
0F1F4:  BTFSS  FA6.6
0F1F6:  GOTO   F1F4
0F1FA:  MOVLB  E
0F1FC:  MOVWF  xF9
0F1FE:  MOVLB  1
0F200:  DECFSZ xC8,F
0F202:  BRA    F208
0F204:  BRA    F20E
0F206:  MOVLB  0
0F208:  MOVLB  0
0F20A:  GOTO   F1F2
0F20E:  MOVFF  1C0,9E8
0F212:  MOVLW  37
0F214:  MOVLB  9
0F216:  MOVWF  xE9
0F218:  MOVLB  0
0F21A:  CALL   2542
0F21E:  MOVLW  0D
0F220:  BTFSS  FA6.6
0F222:  GOTO   F220
0F226:  MOVLB  E
0F228:  MOVWF  xF9
0F22A:  MOVLW  0A
0F22C:  MOVLB  0
0F22E:  BTFSS  FA6.6
0F230:  GOTO   F22E
0F234:  MOVLB  E
0F236:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV1_DATA].uncopied_counter);
0F238:  MOVLW  C0
0F23A:  MOVWF  FF6
0F23C:  MOVLW  16
0F23E:  MOVWF  FF7
0F240:  MOVLW  00
0F242:  MOVWF  FF8
0F244:  MOVLW  0F
0F246:  MOVLB  9
0F248:  MOVWF  xC2
0F24A:  MOVLB  0
0F24C:  CALL   2312
0F250:  MOVLW  02
0F252:  MOVLB  1
0F254:  MOVWF  xC8
0F256:  MOVLB  0
0F258:  MOVLW  30
0F25A:  BTFSS  FA6.6
0F25C:  GOTO   F25A
0F260:  MOVLB  E
0F262:  MOVWF  xF9
0F264:  MOVLB  1
0F266:  DECFSZ xC8,F
0F268:  BRA    F26E
0F26A:  BRA    F274
0F26C:  MOVLB  0
0F26E:  MOVLB  0
0F270:  GOTO   F258
0F274:  MOVFF  14E,9E8
0F278:  MOVLW  37
0F27A:  MOVLB  9
0F27C:  MOVWF  xE9
0F27E:  MOVLB  0
0F280:  CALL   2542
0F284:  MOVLW  0D
0F286:  BTFSS  FA6.6
0F288:  GOTO   F286
0F28C:  MOVLB  E
0F28E:  MOVWF  xF9
0F290:  MOVLW  0A
0F292:  MOVLB  0
0F294:  BTFSS  FA6.6
0F296:  GOTO   F294
0F29A:  MOVLB  E
0F29C:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0F29E:  MOVLW  01
0F2A0:  MOVLB  1
0F2A2:  MOVWF  xE0
0F2A4:  MOVLW  BC
0F2A6:  MOVWF  xDF
0F2A8:  MOVLB  0
0F2AA:  CALL   A83E
.................... 
....................    misf_update_address_area();
0F2AE:  CALL   505C
0F2B2:  GOTO   FA0A (RETURN)
.................... }
.................... 
.................... void mode_meas_iv_port2(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS IV PORT2\r\n");
0F2B6:  MOVLW  D6
0F2B8:  MOVWF  FF6
0F2BA:  MOVLW  16
0F2BC:  MOVWF  FF7
0F2BE:  MOVLW  00
0F2C0:  MOVWF  FF8
0F2C2:  CALL   22DC
.................... 
....................    mode_misf_erase_and_reset(uplinkcmd_ptr);
0F2C6:  MOVFF  1B0,1C9
0F2CA:  MOVFF  1AF,1C8
0F2CE:  CALL   75D4
....................    meas_iv_param_t cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0F2D2:  MOVFF  1B0,1E6
0F2D6:  MOVFF  1AF,1E5
0F2DA:  CALL   8260
0F2DE:  MOVFF  02,03
0F2E2:  MOVF   01,W
0F2E4:  MOVWF  FE1
0F2E6:  MOVFF  03,FE2
0F2EA:  MOVLW  01
0F2EC:  MOVWF  FEA
0F2EE:  MOVLW  B1
0F2F0:  MOVWF  FE9
0F2F2:  MOVLW  0B
0F2F4:  MOVWF  01
0F2F6:  MOVFF  FE6,FEE
0F2FA:  DECFSZ 01,F
0F2FC:  GOTO   F2F6
....................    sweep_port1(cmd.sweep_limit);
0F300:  MOVFF  1BB,1C9
0F304:  MOVFF  1BA,1C8
0F308:  CALL   E9DA
.................... 
....................    FlashOperationStruct data = {0};
0F30C:  MOVLB  1
0F30E:  CLRF   xBC
0F310:  CLRF   xBD
0F312:  CLRF   xBE
0F314:  CLRF   xBF
0F316:  CLRF   xC0
0F318:  CLRF   xC1
0F31A:  CLRF   xC2
0F31C:  CLRF   xC3
0F31E:  CLRF   xC4
0F320:  CLRF   xC5
0F322:  CLRF   xC6
0F324:  CLRF   xC7
....................    data.func_type = ENUM_SMF_WRITE;
0F326:  CLRF   xBD
....................    data.mission_id = CIGS_IV2_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0F328:  MOVLW  06
0F32A:  MOVWF  xBC
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0F32C:  MOVLW  02
0F32E:  MOVWF  xBE
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0F330:  BCF    xBF.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0F332:  MOVLW  F2
0F334:  MOVWF  FF6
0F336:  MOVLW  16
0F338:  MOVWF  FF7
0F33A:  MOVLW  00
0F33C:  MOVWF  FF8
0F33E:  MOVLB  0
0F340:  CALL   22DC
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0F344:  MOVLW  04
0F346:  MOVWF  FF6
0F348:  MOVLW  17
0F34A:  MOVWF  FF7
0F34C:  MOVLW  00
0F34E:  MOVWF  FF8
0F350:  MOVLW  0F
0F352:  MOVLB  9
0F354:  MOVWF  xC2
0F356:  MOVLB  0
0F358:  CALL   2312
0F35C:  MOVFF  1BC,9E8
0F360:  MOVLW  37
0F362:  MOVLB  9
0F364:  MOVWF  xE9
0F366:  MOVLB  0
0F368:  CALL   2542
0F36C:  MOVLW  0D
0F36E:  BTFSS  FA6.6
0F370:  GOTO   F36E
0F374:  MOVLB  E
0F376:  MOVWF  xF9
0F378:  MOVLW  0A
0F37A:  MOVLB  0
0F37C:  BTFSS  FA6.6
0F37E:  GOTO   F37C
0F382:  MOVLB  E
0F384:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0F386:  MOVLW  1A
0F388:  MOVWF  FF6
0F38A:  MOVLW  17
0F38C:  MOVWF  FF7
0F38E:  MOVLW  00
0F390:  MOVWF  FF8
0F392:  MOVLW  0F
0F394:  MOVLB  9
0F396:  MOVWF  xC2
0F398:  MOVLB  0
0F39A:  CALL   2312
0F39E:  MOVFF  1BD,9E8
0F3A2:  MOVLW  37
0F3A4:  MOVLB  9
0F3A6:  MOVWF  xE9
0F3A8:  MOVLB  0
0F3AA:  CALL   2542
0F3AE:  MOVLW  0D
0F3B0:  BTFSS  FA6.6
0F3B2:  GOTO   F3B0
0F3B6:  MOVLB  E
0F3B8:  MOVWF  xF9
0F3BA:  MOVLW  0A
0F3BC:  MOVLB  0
0F3BE:  BTFSS  FA6.6
0F3C0:  GOTO   F3BE
0F3C4:  MOVLB  E
0F3C6:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0F3C8:  MOVLW  30
0F3CA:  MOVWF  FF6
0F3CC:  MOVLW  17
0F3CE:  MOVWF  FF7
0F3D0:  MOVLW  00
0F3D2:  MOVWF  FF8
0F3D4:  MOVLW  0F
0F3D6:  MOVLB  9
0F3D8:  MOVWF  xC2
0F3DA:  MOVLB  0
0F3DC:  CALL   2312
0F3E0:  MOVFF  1BE,9E8
0F3E4:  MOVLW  37
0F3E6:  MOVLB  9
0F3E8:  MOVWF  xE9
0F3EA:  MOVLB  0
0F3EC:  CALL   2542
0F3F0:  MOVLW  0D
0F3F2:  BTFSS  FA6.6
0F3F4:  GOTO   F3F2
0F3F8:  MOVLB  E
0F3FA:  MOVWF  xF9
0F3FC:  MOVLW  0A
0F3FE:  MOVLB  0
0F400:  BTFSS  FA6.6
0F402:  GOTO   F400
0F406:  MOVLB  E
0F408:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0F40A:  MOVLW  00
0F40C:  MOVLB  1
0F40E:  BTFSC  xBF.0
0F410:  MOVLW  01
0F412:  MOVWF  xC8
0F414:  MOVLW  46
0F416:  MOVWF  FF6
0F418:  MOVLW  17
0F41A:  MOVWF  FF7
0F41C:  MOVLW  00
0F41E:  MOVWF  FF8
0F420:  MOVLW  0F
0F422:  MOVLB  9
0F424:  MOVWF  xC2
0F426:  MOVLB  0
0F428:  CALL   2312
0F42C:  MOVFF  1C8,9E8
0F430:  MOVLW  37
0F432:  MOVLB  9
0F434:  MOVWF  xE9
0F436:  MOVLB  0
0F438:  CALL   2542
0F43C:  MOVLW  0D
0F43E:  BTFSS  FA6.6
0F440:  GOTO   F43E
0F444:  MOVLB  E
0F446:  MOVWF  xF9
0F448:  MOVLW  0A
0F44A:  MOVLB  0
0F44C:  BTFSS  FA6.6
0F44E:  GOTO   F44C
0F452:  MOVLB  E
0F454:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0F456:  MOVLW  5C
0F458:  MOVWF  FF6
0F45A:  MOVLW  17
0F45C:  MOVWF  FF7
0F45E:  MOVLW  00
0F460:  MOVWF  FF8
0F462:  MOVLW  0F
0F464:  MOVLB  9
0F466:  MOVWF  xC2
0F468:  MOVLB  0
0F46A:  CALL   2312
0F46E:  MOVLW  02
0F470:  MOVLB  1
0F472:  MOVWF  xC8
0F474:  MOVLB  0
0F476:  MOVLW  30
0F478:  BTFSS  FA6.6
0F47A:  GOTO   F478
0F47E:  MOVLB  E
0F480:  MOVWF  xF9
0F482:  MOVLB  1
0F484:  DECFSZ xC8,F
0F486:  BRA    F48C
0F488:  BRA    F492
0F48A:  MOVLB  0
0F48C:  MOVLB  0
0F48E:  GOTO   F476
0F492:  MOVFF  1C0,9E8
0F496:  MOVLW  37
0F498:  MOVLB  9
0F49A:  MOVWF  xE9
0F49C:  MOVLB  0
0F49E:  CALL   2542
0F4A2:  MOVLW  0D
0F4A4:  BTFSS  FA6.6
0F4A6:  GOTO   F4A4
0F4AA:  MOVLB  E
0F4AC:  MOVWF  xF9
0F4AE:  MOVLW  0A
0F4B0:  MOVLB  0
0F4B2:  BTFSS  FA6.6
0F4B4:  GOTO   F4B2
0F4B8:  MOVLB  E
0F4BA:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV2_DATA].uncopied_counter);
0F4BC:  MOVLW  72
0F4BE:  MOVWF  FF6
0F4C0:  MOVLW  17
0F4C2:  MOVWF  FF7
0F4C4:  MOVLW  00
0F4C6:  MOVWF  FF8
0F4C8:  MOVLW  0F
0F4CA:  MOVLB  9
0F4CC:  MOVWF  xC2
0F4CE:  MOVLB  0
0F4D0:  CALL   2312
0F4D4:  MOVLW  02
0F4D6:  MOVLB  1
0F4D8:  MOVWF  xC8
0F4DA:  MOVLB  0
0F4DC:  MOVLW  30
0F4DE:  BTFSS  FA6.6
0F4E0:  GOTO   F4DE
0F4E4:  MOVLB  E
0F4E6:  MOVWF  xF9
0F4E8:  MOVLB  1
0F4EA:  DECFSZ xC8,F
0F4EC:  BRA    F4F2
0F4EE:  BRA    F4F8
0F4F0:  MOVLB  0
0F4F2:  MOVLB  0
0F4F4:  GOTO   F4DC
0F4F8:  MOVFF  162,9E8
0F4FC:  MOVLW  37
0F4FE:  MOVLB  9
0F500:  MOVWF  xE9
0F502:  MOVLB  0
0F504:  CALL   2542
0F508:  MOVLW  0D
0F50A:  BTFSS  FA6.6
0F50C:  GOTO   F50A
0F510:  MOVLB  E
0F512:  MOVWF  xF9
0F514:  MOVLW  0A
0F516:  MOVLB  0
0F518:  BTFSS  FA6.6
0F51A:  GOTO   F518
0F51E:  MOVLB  E
0F520:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0F522:  MOVLW  01
0F524:  MOVLB  1
0F526:  MOVWF  xE0
0F528:  MOVLW  BC
0F52A:  MOVWF  xDF
0F52C:  MOVLB  0
0F52E:  CALL   A83E
.................... 
....................    misf_update_address_area();
0F532:  CALL   505C
0F536:  GOTO   FA22 (RETURN)
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... }
.................... 
.................... 
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS IV\r\n");
*
0AA9E:  MOVLW  88
0AAA0:  MOVWF  FF6
0AAA2:  MOVLW  17
0AAA4:  MOVWF  FF7
0AAA6:  MOVLW  00
0AAA8:  MOVWF  FF8
0AAAA:  CALL   22DC
....................    meas_iv_param_t cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0AAAE:  MOVFF  1B0,1E6
0AAB2:  MOVFF  1AF,1E5
0AAB6:  CALL   8260
0AABA:  MOVFF  02,03
0AABE:  MOVF   01,W
0AAC0:  MOVWF  FE1
0AAC2:  MOVFF  03,FE2
0AAC6:  MOVLW  01
0AAC8:  MOVWF  FEA
0AACA:  MOVLW  B1
0AACC:  MOVWF  FE9
0AACE:  MOVLW  0B
0AAD0:  MOVWF  01
0AAD2:  MOVFF  FE6,FEE
0AAD6:  DECFSZ 01,F
0AAD8:  GOTO   AAD2
....................    print_meas_iv_cmd(&cmd); // Print the command parameters for debugging
0AADC:  MOVLW  01
0AADE:  MOVLB  1
0AAE0:  MOVWF  xE0
0AAE2:  MOVLW  B1
0AAE4:  MOVWF  xDF
0AAE6:  MOVLB  0
0AAE8:  GOTO   8F7C
....................    piclog_make(cmd.id, PICLOG_PARAM_START); // Log the start of the command execution
0AAEC:  MOVFF  1B1,20F
0AAF0:  MOVLB  2
0AAF2:  CLRF   x10
0AAF4:  MOVLB  0
0AAF6:  CALL   50EA
.................... 
....................    unsigned int32 start_time = get_current_sec();
....................    unsigned int32 current_sec = 0;
....................    unsigned int16 time_ms = 0;
....................    unsigned int8 counter = 0;
0AAFA:  CALL   3C16
0AAFE:  MOVFF  03,1BF
0AB02:  MOVFF  02,1BE
0AB06:  MOVFF  01,1BD
0AB0A:  MOVFF  00,1BC
0AB0E:  MOVLB  1
0AB10:  CLRF   xC3
0AB12:  CLRF   xC2
0AB14:  CLRF   xC1
0AB16:  CLRF   xC0
0AB18:  CLRF   xC5
0AB1A:  CLRF   xC4
0AB1C:  CLRF   xC6
0AB1E:  MOVLB  0
....................    do
....................    {
....................       sweep(cmd.log_threshold, cmd.sweep_limit, cmd.pd_threshold); 
0AB20:  MOVFF  1B9,1E0
0AB24:  MOVFF  1B8,1DF
0AB28:  MOVFF  1BB,1E2
0AB2C:  MOVFF  1BA,1E1
0AB30:  MOVFF  1B5,1E4
0AB34:  MOVFF  1B4,1E3
0AB38:  CALL   9B4A
....................       if (cmd.interval > 0){
0AB3C:  MOVLB  1
0AB3E:  MOVF   xB2,F
0AB40:  BTFSC  FD8.2
0AB42:  BRA    AB4A
0AB44:  MOVLB  0
0AB46:  GOTO   AB5C
0AB4A:  MOVLB  0
0AB4C:  MOVLB  1
0AB4E:  MOVF   xB3,F
0AB50:  BTFSS  FD8.2
0AB52:  BRA    AB5A
0AB54:  MOVLB  0
0AB56:  GOTO   AB84
0AB5A:  MOVLB  0
....................          delay_ms(cmd.interval);
0AB5C:  MOVFF  1B3,1DF
0AB60:  MOVLB  1
0AB62:  INCF   xDF,F
0AB64:  MOVLB  0
0AB66:  MOVLB  1
0AB68:  DECFSZ xDF,F
0AB6A:  BRA    AB70
0AB6C:  MOVLB  0
0AB6E:  BRA    AB7C
0AB70:  MOVLB  B
0AB72:  SETF   x02
0AB74:  MOVLB  0
0AB76:  CALL   22AE
0AB7A:  BRA    AB66
0AB7C:  MOVFF  1B2,B02
0AB80:  CALL   22AE
....................       }
....................       check_and_respond_to_boss(); // Check for boss commands during the wait period
0AB84:  GOTO   A7FE
....................    } while (get_current_sec() - start_time < cmd.meas_time);
0AB88:  CALL   3C16
0AB8C:  MOVFF  03,1E2
0AB90:  MOVFF  02,1E1
0AB94:  MOVFF  01,1E0
0AB98:  MOVFF  00,1DF
0AB9C:  MOVLB  1
0AB9E:  MOVF   xBC,W
0ABA0:  SUBWF  xDF,F
0ABA2:  MOVF   xBD,W
0ABA4:  SUBWFB xE0,F
0ABA6:  MOVF   xBE,W
0ABA8:  SUBWFB xE1,F
0ABAA:  MOVF   xBF,W
0ABAC:  SUBWFB xE2,F
0ABAE:  MOVF   xE2,F
0ABB0:  BTFSC  FD8.2
0ABB2:  BRA    ABBA
0ABB4:  MOVLB  0
0ABB6:  GOTO   ABF6
0ABBA:  MOVLB  0
0ABBC:  MOVLB  1
0ABBE:  MOVF   xE1,F
0ABC0:  BTFSC  FD8.2
0ABC2:  BRA    ABCA
0ABC4:  MOVLB  0
0ABC6:  GOTO   ABF6
0ABCA:  MOVLB  0
0ABCC:  MOVLB  1
0ABCE:  MOVF   xE0,W
0ABD0:  SUBWF  xB7,W
0ABD2:  BTFSC  FD8.0
0ABD4:  BRA    ABDC
0ABD6:  MOVLB  0
0ABD8:  GOTO   ABF6
0ABDC:  MOVLB  0
0ABDE:  BTFSS  FD8.2
0ABE0:  GOTO   AB20
0ABE4:  MOVLB  1
0ABE6:  MOVF   xB6,W
0ABE8:  SUBWF  xDF,W
0ABEA:  BTFSC  FD8.0
0ABEC:  BRA    ABF4
0ABEE:  MOVLB  0
0ABF0:  GOTO   AB20
0ABF4:  MOVLB  0
....................    misf_update_address_area();
0ABF6:  CALL   505C
....................    piclog_make(cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
0ABFA:  MOVFF  1B1,20F
0ABFE:  MOVLB  2
0AC00:  SETF   x10
0AC02:  MOVLB  0
0AC04:  CALL   50EA
.................... 
.................... 
.................... 
....................    FlashOperationStruct data = {0};
0AC08:  MOVLB  1
0AC0A:  CLRF   xC7
0AC0C:  CLRF   xC8
0AC0E:  CLRF   xC9
0AC10:  CLRF   xCA
0AC12:  CLRF   xCB
0AC14:  CLRF   xCC
0AC16:  CLRF   xCD
0AC18:  CLRF   xCE
0AC1A:  CLRF   xCF
0AC1C:  CLRF   xD0
0AC1E:  CLRF   xD1
0AC20:  CLRF   xD2
....................    data.func_type = ENUM_SMF_WRITE;
0AC22:  CLRF   xC8
....................    data.mission_id = CIGS_IV1_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0AC24:  MOVLW  04
0AC26:  MOVWF  xC7
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0AC28:  MOVLW  02
0AC2A:  MOVWF  xC9
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0AC2C:  BCF    xCA.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0AC2E:  MOVLW  9E
0AC30:  MOVWF  FF6
0AC32:  MOVLW  17
0AC34:  MOVWF  FF7
0AC36:  MOVLW  00
0AC38:  MOVWF  FF8
0AC3A:  MOVLB  0
0AC3C:  CALL   22DC
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0AC40:  MOVLW  B0
0AC42:  MOVWF  FF6
0AC44:  MOVLW  17
0AC46:  MOVWF  FF7
0AC48:  MOVLW  00
0AC4A:  MOVWF  FF8
0AC4C:  MOVLW  0F
0AC4E:  MOVLB  9
0AC50:  MOVWF  xC2
0AC52:  MOVLB  0
0AC54:  CALL   2312
0AC58:  MOVFF  1C7,9E8
0AC5C:  MOVLW  37
0AC5E:  MOVLB  9
0AC60:  MOVWF  xE9
0AC62:  MOVLB  0
0AC64:  CALL   2542
0AC68:  MOVLW  0D
0AC6A:  BTFSS  FA6.6
0AC6C:  GOTO   AC6A
0AC70:  MOVLB  E
0AC72:  MOVWF  xF9
0AC74:  MOVLW  0A
0AC76:  MOVLB  0
0AC78:  BTFSS  FA6.6
0AC7A:  GOTO   AC78
0AC7E:  MOVLB  E
0AC80:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0AC82:  MOVLW  C6
0AC84:  MOVWF  FF6
0AC86:  MOVLW  17
0AC88:  MOVWF  FF7
0AC8A:  MOVLW  00
0AC8C:  MOVWF  FF8
0AC8E:  MOVLW  0F
0AC90:  MOVLB  9
0AC92:  MOVWF  xC2
0AC94:  MOVLB  0
0AC96:  CALL   2312
0AC9A:  MOVFF  1C8,9E8
0AC9E:  MOVLW  37
0ACA0:  MOVLB  9
0ACA2:  MOVWF  xE9
0ACA4:  MOVLB  0
0ACA6:  CALL   2542
0ACAA:  MOVLW  0D
0ACAC:  BTFSS  FA6.6
0ACAE:  GOTO   ACAC
0ACB2:  MOVLB  E
0ACB4:  MOVWF  xF9
0ACB6:  MOVLW  0A
0ACB8:  MOVLB  0
0ACBA:  BTFSS  FA6.6
0ACBC:  GOTO   ACBA
0ACC0:  MOVLB  E
0ACC2:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0ACC4:  MOVLW  DC
0ACC6:  MOVWF  FF6
0ACC8:  MOVLW  17
0ACCA:  MOVWF  FF7
0ACCC:  MOVLW  00
0ACCE:  MOVWF  FF8
0ACD0:  MOVLW  0F
0ACD2:  MOVLB  9
0ACD4:  MOVWF  xC2
0ACD6:  MOVLB  0
0ACD8:  CALL   2312
0ACDC:  MOVFF  1C9,9E8
0ACE0:  MOVLW  37
0ACE2:  MOVLB  9
0ACE4:  MOVWF  xE9
0ACE6:  MOVLB  0
0ACE8:  CALL   2542
0ACEC:  MOVLW  0D
0ACEE:  BTFSS  FA6.6
0ACF0:  GOTO   ACEE
0ACF4:  MOVLB  E
0ACF6:  MOVWF  xF9
0ACF8:  MOVLW  0A
0ACFA:  MOVLB  0
0ACFC:  BTFSS  FA6.6
0ACFE:  GOTO   ACFC
0AD02:  MOVLB  E
0AD04:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0AD06:  MOVLW  00
0AD08:  MOVLB  1
0AD0A:  BTFSC  xCA.0
0AD0C:  MOVLW  01
0AD0E:  MOVWF  xDF
0AD10:  MOVLW  F2
0AD12:  MOVWF  FF6
0AD14:  MOVLW  17
0AD16:  MOVWF  FF7
0AD18:  MOVLW  00
0AD1A:  MOVWF  FF8
0AD1C:  MOVLW  0F
0AD1E:  MOVLB  9
0AD20:  MOVWF  xC2
0AD22:  MOVLB  0
0AD24:  CALL   2312
0AD28:  MOVFF  1DF,9E8
0AD2C:  MOVLW  37
0AD2E:  MOVLB  9
0AD30:  MOVWF  xE9
0AD32:  MOVLB  0
0AD34:  CALL   2542
0AD38:  MOVLW  0D
0AD3A:  BTFSS  FA6.6
0AD3C:  GOTO   AD3A
0AD40:  MOVLB  E
0AD42:  MOVWF  xF9
0AD44:  MOVLW  0A
0AD46:  MOVLB  0
0AD48:  BTFSS  FA6.6
0AD4A:  GOTO   AD48
0AD4E:  MOVLB  E
0AD50:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0AD52:  MOVLW  08
0AD54:  MOVWF  FF6
0AD56:  MOVLW  18
0AD58:  MOVWF  FF7
0AD5A:  MOVLW  00
0AD5C:  MOVWF  FF8
0AD5E:  MOVLW  0F
0AD60:  MOVLB  9
0AD62:  MOVWF  xC2
0AD64:  MOVLB  0
0AD66:  CALL   2312
0AD6A:  MOVLW  02
0AD6C:  MOVLB  1
0AD6E:  MOVWF  xDF
0AD70:  MOVLB  0
0AD72:  MOVLW  30
0AD74:  BTFSS  FA6.6
0AD76:  GOTO   AD74
0AD7A:  MOVLB  E
0AD7C:  MOVWF  xF9
0AD7E:  MOVLB  1
0AD80:  DECFSZ xDF,F
0AD82:  BRA    AD88
0AD84:  BRA    AD8E
0AD86:  MOVLB  0
0AD88:  MOVLB  0
0AD8A:  GOTO   AD72
0AD8E:  MOVFF  1CB,9E8
0AD92:  MOVLW  37
0AD94:  MOVLB  9
0AD96:  MOVWF  xE9
0AD98:  MOVLB  0
0AD9A:  CALL   2542
0AD9E:  MOVLW  0D
0ADA0:  BTFSS  FA6.6
0ADA2:  GOTO   ADA0
0ADA6:  MOVLB  E
0ADA8:  MOVWF  xF9
0ADAA:  MOVLW  0A
0ADAC:  MOVLB  0
0ADAE:  BTFSS  FA6.6
0ADB0:  GOTO   ADAE
0ADB4:  MOVLB  E
0ADB6:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV1_DATA].uncopied_counter);
0ADB8:  MOVLW  1E
0ADBA:  MOVWF  FF6
0ADBC:  MOVLW  18
0ADBE:  MOVWF  FF7
0ADC0:  MOVLW  00
0ADC2:  MOVWF  FF8
0ADC4:  MOVLW  0F
0ADC6:  MOVLB  9
0ADC8:  MOVWF  xC2
0ADCA:  MOVLB  0
0ADCC:  CALL   2312
0ADD0:  MOVLW  02
0ADD2:  MOVLB  1
0ADD4:  MOVWF  xDF
0ADD6:  MOVLB  0
0ADD8:  MOVLW  30
0ADDA:  BTFSS  FA6.6
0ADDC:  GOTO   ADDA
0ADE0:  MOVLB  E
0ADE2:  MOVWF  xF9
0ADE4:  MOVLB  1
0ADE6:  DECFSZ xDF,F
0ADE8:  BRA    ADEE
0ADEA:  BRA    ADF4
0ADEC:  MOVLB  0
0ADEE:  MOVLB  0
0ADF0:  GOTO   ADD8
0ADF4:  MOVFF  14E,9E8
0ADF8:  MOVLW  37
0ADFA:  MOVLB  9
0ADFC:  MOVWF  xE9
0ADFE:  MOVLB  0
0AE00:  CALL   2542
0AE04:  MOVLW  0D
0AE06:  BTFSS  FA6.6
0AE08:  GOTO   AE06
0AE0C:  MOVLB  E
0AE0E:  MOVWF  xF9
0AE10:  MOVLW  0A
0AE12:  MOVLB  0
0AE14:  BTFSS  FA6.6
0AE16:  GOTO   AE14
0AE1A:  MOVLB  E
0AE1C:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0AE1E:  MOVLW  01
0AE20:  MOVLB  1
0AE22:  MOVWF  xE0
0AE24:  MOVLW  C7
0AE26:  MOVWF  xDF
0AE28:  MOVLB  0
0AE2A:  CALL   A83E
.................... 
.................... 
....................    data.func_type = ENUM_SMF_WRITE;
0AE2E:  MOVLB  1
0AE30:  CLRF   xC8
....................    data.mission_id = CIGS_IV2_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0AE32:  MOVLW  06
0AE34:  MOVWF  xC7
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0AE36:  MOVLW  02
0AE38:  MOVWF  xC9
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0AE3A:  BCF    xCA.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0AE3C:  MOVLW  34
0AE3E:  MOVWF  FF6
0AE40:  MOVLW  18
0AE42:  MOVWF  FF7
0AE44:  MOVLW  00
0AE46:  MOVWF  FF8
0AE48:  MOVLB  0
0AE4A:  CALL   22DC
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0AE4E:  MOVLW  46
0AE50:  MOVWF  FF6
0AE52:  MOVLW  18
0AE54:  MOVWF  FF7
0AE56:  MOVLW  00
0AE58:  MOVWF  FF8
0AE5A:  MOVLW  0F
0AE5C:  MOVLB  9
0AE5E:  MOVWF  xC2
0AE60:  MOVLB  0
0AE62:  CALL   2312
0AE66:  MOVFF  1C7,9E8
0AE6A:  MOVLW  37
0AE6C:  MOVLB  9
0AE6E:  MOVWF  xE9
0AE70:  MOVLB  0
0AE72:  CALL   2542
0AE76:  MOVLW  0D
0AE78:  BTFSS  FA6.6
0AE7A:  GOTO   AE78
0AE7E:  MOVLB  E
0AE80:  MOVWF  xF9
0AE82:  MOVLW  0A
0AE84:  MOVLB  0
0AE86:  BTFSS  FA6.6
0AE88:  GOTO   AE86
0AE8C:  MOVLB  E
0AE8E:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0AE90:  MOVLW  5C
0AE92:  MOVWF  FF6
0AE94:  MOVLW  18
0AE96:  MOVWF  FF7
0AE98:  MOVLW  00
0AE9A:  MOVWF  FF8
0AE9C:  MOVLW  0F
0AE9E:  MOVLB  9
0AEA0:  MOVWF  xC2
0AEA2:  MOVLB  0
0AEA4:  CALL   2312
0AEA8:  MOVFF  1C8,9E8
0AEAC:  MOVLW  37
0AEAE:  MOVLB  9
0AEB0:  MOVWF  xE9
0AEB2:  MOVLB  0
0AEB4:  CALL   2542
0AEB8:  MOVLW  0D
0AEBA:  BTFSS  FA6.6
0AEBC:  GOTO   AEBA
0AEC0:  MOVLB  E
0AEC2:  MOVWF  xF9
0AEC4:  MOVLW  0A
0AEC6:  MOVLB  0
0AEC8:  BTFSS  FA6.6
0AECA:  GOTO   AEC8
0AECE:  MOVLB  E
0AED0:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0AED2:  MOVLW  72
0AED4:  MOVWF  FF6
0AED6:  MOVLW  18
0AED8:  MOVWF  FF7
0AEDA:  MOVLW  00
0AEDC:  MOVWF  FF8
0AEDE:  MOVLW  0F
0AEE0:  MOVLB  9
0AEE2:  MOVWF  xC2
0AEE4:  MOVLB  0
0AEE6:  CALL   2312
0AEEA:  MOVFF  1C9,9E8
0AEEE:  MOVLW  37
0AEF0:  MOVLB  9
0AEF2:  MOVWF  xE9
0AEF4:  MOVLB  0
0AEF6:  CALL   2542
0AEFA:  MOVLW  0D
0AEFC:  BTFSS  FA6.6
0AEFE:  GOTO   AEFC
0AF02:  MOVLB  E
0AF04:  MOVWF  xF9
0AF06:  MOVLW  0A
0AF08:  MOVLB  0
0AF0A:  BTFSS  FA6.6
0AF0C:  GOTO   AF0A
0AF10:  MOVLB  E
0AF12:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0AF14:  MOVLW  00
0AF16:  MOVLB  1
0AF18:  BTFSC  xCA.0
0AF1A:  MOVLW  01
0AF1C:  MOVWF  xDF
0AF1E:  MOVLW  88
0AF20:  MOVWF  FF6
0AF22:  MOVLW  18
0AF24:  MOVWF  FF7
0AF26:  MOVLW  00
0AF28:  MOVWF  FF8
0AF2A:  MOVLW  0F
0AF2C:  MOVLB  9
0AF2E:  MOVWF  xC2
0AF30:  MOVLB  0
0AF32:  CALL   2312
0AF36:  MOVFF  1DF,9E8
0AF3A:  MOVLW  37
0AF3C:  MOVLB  9
0AF3E:  MOVWF  xE9
0AF40:  MOVLB  0
0AF42:  CALL   2542
0AF46:  MOVLW  0D
0AF48:  BTFSS  FA6.6
0AF4A:  GOTO   AF48
0AF4E:  MOVLB  E
0AF50:  MOVWF  xF9
0AF52:  MOVLW  0A
0AF54:  MOVLB  0
0AF56:  BTFSS  FA6.6
0AF58:  GOTO   AF56
0AF5C:  MOVLB  E
0AF5E:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0AF60:  MOVLW  9E
0AF62:  MOVWF  FF6
0AF64:  MOVLW  18
0AF66:  MOVWF  FF7
0AF68:  MOVLW  00
0AF6A:  MOVWF  FF8
0AF6C:  MOVLW  0F
0AF6E:  MOVLB  9
0AF70:  MOVWF  xC2
0AF72:  MOVLB  0
0AF74:  CALL   2312
0AF78:  MOVLW  02
0AF7A:  MOVLB  1
0AF7C:  MOVWF  xDF
0AF7E:  MOVLB  0
0AF80:  MOVLW  30
0AF82:  BTFSS  FA6.6
0AF84:  GOTO   AF82
0AF88:  MOVLB  E
0AF8A:  MOVWF  xF9
0AF8C:  MOVLB  1
0AF8E:  DECFSZ xDF,F
0AF90:  BRA    AF96
0AF92:  BRA    AF9C
0AF94:  MOVLB  0
0AF96:  MOVLB  0
0AF98:  GOTO   AF80
0AF9C:  MOVFF  1CB,9E8
0AFA0:  MOVLW  37
0AFA2:  MOVLB  9
0AFA4:  MOVWF  xE9
0AFA6:  MOVLB  0
0AFA8:  CALL   2542
0AFAC:  MOVLW  0D
0AFAE:  BTFSS  FA6.6
0AFB0:  GOTO   AFAE
0AFB4:  MOVLB  E
0AFB6:  MOVWF  xF9
0AFB8:  MOVLW  0A
0AFBA:  MOVLB  0
0AFBC:  BTFSS  FA6.6
0AFBE:  GOTO   AFBC
0AFC2:  MOVLB  E
0AFC4:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV2_DATA].uncopied_counter);
0AFC6:  MOVLW  B4
0AFC8:  MOVWF  FF6
0AFCA:  MOVLW  18
0AFCC:  MOVWF  FF7
0AFCE:  MOVLW  00
0AFD0:  MOVWF  FF8
0AFD2:  MOVLW  0F
0AFD4:  MOVLB  9
0AFD6:  MOVWF  xC2
0AFD8:  MOVLB  0
0AFDA:  CALL   2312
0AFDE:  MOVLW  02
0AFE0:  MOVLB  1
0AFE2:  MOVWF  xDF
0AFE4:  MOVLB  0
0AFE6:  MOVLW  30
0AFE8:  BTFSS  FA6.6
0AFEA:  GOTO   AFE8
0AFEE:  MOVLB  E
0AFF0:  MOVWF  xF9
0AFF2:  MOVLB  1
0AFF4:  DECFSZ xDF,F
0AFF6:  BRA    AFFC
0AFF8:  BRA    B002
0AFFA:  MOVLB  0
0AFFC:  MOVLB  0
0AFFE:  GOTO   AFE6
0B002:  MOVFF  162,9E8
0B006:  MOVLW  37
0B008:  MOVLB  9
0B00A:  MOVWF  xE9
0B00C:  MOVLB  0
0B00E:  CALL   2542
0B012:  MOVLW  0D
0B014:  BTFSS  FA6.6
0B016:  GOTO   B014
0B01A:  MOVLB  E
0B01C:  MOVWF  xF9
0B01E:  MOVLW  0A
0B020:  MOVLB  0
0B022:  BTFSS  FA6.6
0B024:  GOTO   B022
0B028:  MOVLB  E
0B02A:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0B02C:  MOVLW  01
0B02E:  MOVLB  1
0B030:  MOVWF  xE0
0B032:  MOVLW  C7
0B034:  MOVWF  xDF
0B036:  MOVLB  0
0B038:  CALL   A83E
.................... 
.................... 
....................    FlashOperationStruct piclog = {0};
0B03C:  MOVLB  1
0B03E:  CLRF   xD3
0B040:  CLRF   xD4
0B042:  CLRF   xD5
0B044:  CLRF   xD6
0B046:  CLRF   xD7
0B048:  CLRF   xD8
0B04A:  CLRF   xD9
0B04C:  CLRF   xDA
0B04E:  CLRF   xDB
0B050:  CLRF   xDC
0B052:  CLRF   xDD
0B054:  CLRF   xDE
....................    piclog.func_type = ENUM_SMF_WRITE;
0B056:  CLRF   xD4
....................    piclog.mission_id = FLASH_ID_PICLOG; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0B058:  MOVLW  01
0B05A:  MOVWF  xD3
....................    piclog.write_mode = SMF_WRITE_CIRCULAR;
0B05C:  MOVLW  02
0B05E:  MOVWF  xD5
....................    piclog.source_type = SOURCE_MISF_UNCOPIED;
0B060:  BCF    xD6.0
.................... 
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0B062:  MOVLW  CA
0B064:  MOVWF  FF6
0B066:  MOVLW  18
0B068:  MOVWF  FF7
0B06A:  MOVLW  00
0B06C:  MOVWF  FF8
0B06E:  MOVLB  0
0B070:  CALL   22DC
....................    fprintf(PC, "\tMission ID:   %02X\r\n", piclog.mission_id);
0B074:  MOVLW  DC
0B076:  MOVWF  FF6
0B078:  MOVLW  18
0B07A:  MOVWF  FF7
0B07C:  MOVLW  00
0B07E:  MOVWF  FF8
0B080:  MOVLW  0F
0B082:  MOVLB  9
0B084:  MOVWF  xC2
0B086:  MOVLB  0
0B088:  CALL   2312
0B08C:  MOVFF  1D3,9E8
0B090:  MOVLW  37
0B092:  MOVLB  9
0B094:  MOVWF  xE9
0B096:  MOVLB  0
0B098:  CALL   2542
0B09C:  MOVLW  0D
0B09E:  BTFSS  FA6.6
0B0A0:  GOTO   B09E
0B0A4:  MOVLB  E
0B0A6:  MOVWF  xF9
0B0A8:  MOVLW  0A
0B0AA:  MOVLB  0
0B0AC:  BTFSS  FA6.6
0B0AE:  GOTO   B0AC
0B0B2:  MOVLB  E
0B0B4:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", piclog.func_type);
0B0B6:  MOVLW  F2
0B0B8:  MOVWF  FF6
0B0BA:  MOVLW  18
0B0BC:  MOVWF  FF7
0B0BE:  MOVLW  00
0B0C0:  MOVWF  FF8
0B0C2:  MOVLW  0F
0B0C4:  MOVLB  9
0B0C6:  MOVWF  xC2
0B0C8:  MOVLB  0
0B0CA:  CALL   2312
0B0CE:  MOVFF  1D4,9E8
0B0D2:  MOVLW  37
0B0D4:  MOVLB  9
0B0D6:  MOVWF  xE9
0B0D8:  MOVLB  0
0B0DA:  CALL   2542
0B0DE:  MOVLW  0D
0B0E0:  BTFSS  FA6.6
0B0E2:  GOTO   B0E0
0B0E6:  MOVLB  E
0B0E8:  MOVWF  xF9
0B0EA:  MOVLW  0A
0B0EC:  MOVLB  0
0B0EE:  BTFSS  FA6.6
0B0F0:  GOTO   B0EE
0B0F4:  MOVLB  E
0B0F6:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", piclog.write_mode);
0B0F8:  MOVLW  08
0B0FA:  MOVWF  FF6
0B0FC:  MOVLW  19
0B0FE:  MOVWF  FF7
0B100:  MOVLW  00
0B102:  MOVWF  FF8
0B104:  MOVLW  0F
0B106:  MOVLB  9
0B108:  MOVWF  xC2
0B10A:  MOVLB  0
0B10C:  CALL   2312
0B110:  MOVFF  1D5,9E8
0B114:  MOVLW  37
0B116:  MOVLB  9
0B118:  MOVWF  xE9
0B11A:  MOVLB  0
0B11C:  CALL   2542
0B120:  MOVLW  0D
0B122:  BTFSS  FA6.6
0B124:  GOTO   B122
0B128:  MOVLB  E
0B12A:  MOVWF  xF9
0B12C:  MOVLW  0A
0B12E:  MOVLB  0
0B130:  BTFSS  FA6.6
0B132:  GOTO   B130
0B136:  MOVLB  E
0B138:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", piclog.source_type);
0B13A:  MOVLW  00
0B13C:  MOVLB  1
0B13E:  BTFSC  xD6.0
0B140:  MOVLW  01
0B142:  MOVWF  xDF
0B144:  MOVLW  1E
0B146:  MOVWF  FF6
0B148:  MOVLW  19
0B14A:  MOVWF  FF7
0B14C:  MOVLW  00
0B14E:  MOVWF  FF8
0B150:  MOVLW  0F
0B152:  MOVLB  9
0B154:  MOVWF  xC2
0B156:  MOVLB  0
0B158:  CALL   2312
0B15C:  MOVFF  1DF,9E8
0B160:  MOVLW  37
0B162:  MOVLB  9
0B164:  MOVWF  xE9
0B166:  MOVLB  0
0B168:  CALL   2542
0B16C:  MOVLW  0D
0B16E:  BTFSS  FA6.6
0B170:  GOTO   B16E
0B174:  MOVLB  E
0B176:  MOVWF  xF9
0B178:  MOVLW  0A
0B17A:  MOVLB  0
0B17C:  BTFSS  FA6.6
0B17E:  GOTO   B17C
0B182:  MOVLB  E
0B184:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", piclog.misf_start_addr);
0B186:  MOVLW  34
0B188:  MOVWF  FF6
0B18A:  MOVLW  19
0B18C:  MOVWF  FF7
0B18E:  MOVLW  00
0B190:  MOVWF  FF8
0B192:  MOVLW  0F
0B194:  MOVLB  9
0B196:  MOVWF  xC2
0B198:  MOVLB  0
0B19A:  CALL   2312
0B19E:  MOVLW  02
0B1A0:  MOVLB  1
0B1A2:  MOVWF  xDF
0B1A4:  MOVLB  0
0B1A6:  MOVLW  30
0B1A8:  BTFSS  FA6.6
0B1AA:  GOTO   B1A8
0B1AE:  MOVLB  E
0B1B0:  MOVWF  xF9
0B1B2:  MOVLB  1
0B1B4:  DECFSZ xDF,F
0B1B6:  BRA    B1BC
0B1B8:  BRA    B1C2
0B1BA:  MOVLB  0
0B1BC:  MOVLB  0
0B1BE:  GOTO   B1A6
0B1C2:  MOVFF  1D7,9E8
0B1C6:  MOVLW  37
0B1C8:  MOVLB  9
0B1CA:  MOVWF  xE9
0B1CC:  MOVLB  0
0B1CE:  CALL   2542
0B1D2:  MOVLW  0D
0B1D4:  BTFSS  FA6.6
0B1D6:  GOTO   B1D4
0B1DA:  MOVLB  E
0B1DC:  MOVWF  xF9
0B1DE:  MOVLW  0A
0B1E0:  MOVLB  0
0B1E2:  BTFSS  FA6.6
0B1E4:  GOTO   B1E2
0B1E8:  MOVLB  E
0B1EA:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[FLASH_ID_PICLOG].uncopied_counter);
0B1EC:  MOVLW  4A
0B1EE:  MOVWF  FF6
0B1F0:  MOVLW  19
0B1F2:  MOVWF  FF7
0B1F4:  MOVLW  00
0B1F6:  MOVWF  FF8
0B1F8:  MOVLW  0F
0B1FA:  MOVLB  9
0B1FC:  MOVWF  xC2
0B1FE:  MOVLB  0
0B200:  CALL   2312
0B204:  MOVLW  02
0B206:  MOVLB  1
0B208:  MOVWF  xDF
0B20A:  MOVLB  0
0B20C:  MOVLW  30
0B20E:  BTFSS  FA6.6
0B210:  GOTO   B20E
0B214:  MOVLB  E
0B216:  MOVWF  xF9
0B218:  MOVLB  1
0B21A:  DECFSZ xDF,F
0B21C:  BRA    B222
0B21E:  BRA    B228
0B220:  MOVLB  0
0B222:  MOVLB  0
0B224:  GOTO   B20C
0B228:  MOVFF  130,9E8
0B22C:  MOVLW  37
0B22E:  MOVLB  9
0B230:  MOVWF  xE9
0B232:  MOVLB  0
0B234:  CALL   2542
0B238:  MOVLW  0D
0B23A:  BTFSS  FA6.6
0B23C:  GOTO   B23A
0B240:  MOVLB  E
0B242:  MOVWF  xF9
0B244:  MOVLW  0A
0B246:  MOVLB  0
0B248:  BTFSS  FA6.6
0B24A:  GOTO   B248
0B24E:  MOVLB  E
0B250:  MOVWF  xF9
....................    enqueue_flash_operation(&piclog); // SMFへのデータコピーを実行する
0B252:  MOVLW  01
0B254:  MOVLB  1
0B256:  MOVWF  xE0
0B258:  MOVLW  D3
0B25A:  MOVWF  xDF
0B25C:  MOVLB  0
0B25E:  CALL   A83E
....................    fprintf(PC, "End MODE MEAS IV mission\r\n");
0B262:  MOVLW  60
0B264:  MOVWF  FF6
0B266:  MOVLW  19
0B268:  MOVWF  FF7
0B26A:  MOVLW  00
0B26C:  MOVWF  FF8
0B26E:  CALL   22DC
0B272:  GOTO   F8C0 (RETURN)
.................... }
.................... 
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE IV DEBUG\r\n");
*
0C7EC:  MOVLW  7C
0C7EE:  MOVWF  FF6
0C7F0:  MOVLW  19
0C7F2:  MOVWF  FF7
0C7F4:  MOVLW  00
0C7F6:  MOVWF  FF8
0C7F8:  CALL   22DC
.................... 
....................    MEAS_IV_CMD cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0C7FC:  MOVFF  1B0,1E6
0C800:  MOVFF  1AF,1E5
0C804:  CALL   8260
0C808:  MOVFF  02,03
0C80C:  MOVF   01,W
0C80E:  MOVWF  FE1
0C810:  MOVFF  03,FE2
0C814:  MOVLW  01
0C816:  MOVWF  FEA
0C818:  MOVLW  B1
0C81A:  MOVWF  FE9
0C81C:  MOVLW  0C
0C81E:  MOVWF  01
0C820:  MOVFF  FE6,FEE
0C824:  DECFSZ 01,F
0C826:  GOTO   C820
....................    
....................    fprintf(PC, "\tID: %02X\r\n", cmd.id);
0C82A:  MOVLW  92
0C82C:  MOVWF  FF6
0C82E:  MOVLW  19
0C830:  MOVWF  FF7
0C832:  MOVLW  00
0C834:  MOVWF  FF8
0C836:  MOVLW  05
0C838:  MOVLB  9
0C83A:  MOVWF  xC2
0C83C:  MOVLB  0
0C83E:  CALL   2312
0C842:  MOVFF  1B1,9E8
0C846:  MOVLW  37
0C848:  MOVLB  9
0C84A:  MOVWF  xE9
0C84C:  MOVLB  0
0C84E:  CALL   2542
0C852:  MOVLW  0D
0C854:  BTFSS  FA6.6
0C856:  GOTO   C854
0C85A:  MOVLB  E
0C85C:  MOVWF  xF9
0C85E:  MOVLW  0A
0C860:  MOVLB  0
0C862:  BTFSS  FA6.6
0C864:  GOTO   C862
0C868:  MOVLB  E
0C86A:  MOVWF  xF9
....................    fprintf(PC, "\tSleepTime:        0x%04X\r\n", cmd.sleep_time);
0C86C:  MOVLW  9E
0C86E:  MOVWF  FF6
0C870:  MOVLW  19
0C872:  MOVWF  FF7
0C874:  MOVLW  00
0C876:  MOVWF  FF8
0C878:  MOVLW  15
0C87A:  MOVLB  9
0C87C:  MOVWF  xC2
0C87E:  MOVLB  0
0C880:  CALL   2312
0C884:  MOVLW  02
0C886:  MOVLB  1
0C888:  MOVWF  xC5
0C88A:  MOVLB  0
0C88C:  MOVLW  30
0C88E:  BTFSS  FA6.6
0C890:  GOTO   C88E
0C894:  MOVLB  E
0C896:  MOVWF  xF9
0C898:  MOVLB  1
0C89A:  DECFSZ xC5,F
0C89C:  BRA    C8A2
0C89E:  BRA    C8A8
0C8A0:  MOVLB  0
0C8A2:  MOVLB  0
0C8A4:  GOTO   C88C
0C8A8:  MOVFF  1B2,9E8
0C8AC:  MOVLW  37
0C8AE:  MOVLB  9
0C8B0:  MOVWF  xE9
0C8B2:  MOVLB  0
0C8B4:  CALL   2542
0C8B8:  MOVLW  0D
0C8BA:  BTFSS  FA6.6
0C8BC:  GOTO   C8BA
0C8C0:  MOVLB  E
0C8C2:  MOVWF  xF9
0C8C4:  MOVLW  0A
0C8C6:  MOVLB  0
0C8C8:  BTFSS  FA6.6
0C8CA:  GOTO   C8C8
0C8CE:  MOVLB  E
0C8D0:  MOVWF  xF9
....................    fprintf(PC, "\tLogCurrThreshold: 0x%04X\r\n", cmd.curr_threshold);
0C8D2:  MOVLW  BA
0C8D4:  MOVWF  FF6
0C8D6:  MOVLW  19
0C8D8:  MOVWF  FF7
0C8DA:  MOVLW  00
0C8DC:  MOVWF  FF8
0C8DE:  MOVLW  15
0C8E0:  MOVLB  9
0C8E2:  MOVWF  xC2
0C8E4:  MOVLB  0
0C8E6:  CALL   2312
0C8EA:  MOVLW  02
0C8EC:  MOVLB  1
0C8EE:  MOVWF  xC5
0C8F0:  MOVLB  0
0C8F2:  MOVLW  30
0C8F4:  BTFSS  FA6.6
0C8F6:  GOTO   C8F4
0C8FA:  MOVLB  E
0C8FC:  MOVWF  xF9
0C8FE:  MOVLB  1
0C900:  DECFSZ xC5,F
0C902:  BRA    C908
0C904:  BRA    C90E
0C906:  MOVLB  0
0C908:  MOVLB  0
0C90A:  GOTO   C8F2
0C90E:  MOVFF  1B4,9E8
0C912:  MOVLW  37
0C914:  MOVLB  9
0C916:  MOVWF  xE9
0C918:  MOVLB  0
0C91A:  CALL   2542
0C91E:  MOVLW  0D
0C920:  BTFSS  FA6.6
0C922:  GOTO   C920
0C926:  MOVLB  E
0C928:  MOVWF  xF9
0C92A:  MOVLW  0A
0C92C:  MOVLB  0
0C92E:  BTFSS  FA6.6
0C930:  GOTO   C92E
0C934:  MOVLB  E
0C936:  MOVWF  xF9
....................    fprintf(PC, "\tPDThreshold:      0x%04X\r\n", cmd.pd_threshold);
0C938:  MOVLW  D6
0C93A:  MOVWF  FF6
0C93C:  MOVLW  19
0C93E:  MOVWF  FF7
0C940:  MOVLW  00
0C942:  MOVWF  FF8
0C944:  MOVLW  15
0C946:  MOVLB  9
0C948:  MOVWF  xC2
0C94A:  MOVLB  0
0C94C:  CALL   2312
0C950:  MOVLW  02
0C952:  MOVLB  1
0C954:  MOVWF  xC5
0C956:  MOVLB  0
0C958:  MOVLW  30
0C95A:  BTFSS  FA6.6
0C95C:  GOTO   C95A
0C960:  MOVLB  E
0C962:  MOVWF  xF9
0C964:  MOVLB  1
0C966:  DECFSZ xC5,F
0C968:  BRA    C96E
0C96A:  BRA    C974
0C96C:  MOVLB  0
0C96E:  MOVLB  0
0C970:  GOTO   C958
0C974:  MOVFF  1B6,9E8
0C978:  MOVLW  37
0C97A:  MOVLB  9
0C97C:  MOVWF  xE9
0C97E:  MOVLB  0
0C980:  CALL   2542
0C984:  MOVLW  0D
0C986:  BTFSS  FA6.6
0C988:  GOTO   C986
0C98C:  MOVLB  E
0C98E:  MOVWF  xF9
0C990:  MOVLW  0A
0C992:  MOVLB  0
0C994:  BTFSS  FA6.6
0C996:  GOTO   C994
0C99A:  MOVLB  E
0C99C:  MOVWF  xF9
....................    fprintf(PC, "\tCurrentLimit:     0x%04X\r\n", cmd.curr_limit);
0C99E:  MOVLW  F2
0C9A0:  MOVWF  FF6
0C9A2:  MOVLW  19
0C9A4:  MOVWF  FF7
0C9A6:  MOVLW  00
0C9A8:  MOVWF  FF8
0C9AA:  MOVLW  15
0C9AC:  MOVLB  9
0C9AE:  MOVWF  xC2
0C9B0:  MOVLB  0
0C9B2:  CALL   2312
0C9B6:  MOVLW  02
0C9B8:  MOVLB  1
0C9BA:  MOVWF  xC5
0C9BC:  MOVLB  0
0C9BE:  MOVLW  30
0C9C0:  BTFSS  FA6.6
0C9C2:  GOTO   C9C0
0C9C6:  MOVLB  E
0C9C8:  MOVWF  xF9
0C9CA:  MOVLB  1
0C9CC:  DECFSZ xC5,F
0C9CE:  BRA    C9D4
0C9D0:  BRA    C9DA
0C9D2:  MOVLB  0
0C9D4:  MOVLB  0
0C9D6:  GOTO   C9BE
0C9DA:  MOVFF  1B8,9E8
0C9DE:  MOVLW  37
0C9E0:  MOVLB  9
0C9E2:  MOVWF  xE9
0C9E4:  MOVLB  0
0C9E6:  CALL   2542
0C9EA:  MOVLW  0D
0C9EC:  BTFSS  FA6.6
0C9EE:  GOTO   C9EC
0C9F2:  MOVLB  E
0C9F4:  MOVWF  xF9
0C9F6:  MOVLW  0A
0C9F8:  MOVLB  0
0C9FA:  BTFSS  FA6.6
0C9FC:  GOTO   C9FA
0CA00:  MOVLB  E
0CA02:  MOVWF  xF9
....................    fprintf(PC, "\tMeasurementTime:  0x%04X\r\n", cmd.meas_time);
0CA04:  MOVLW  0E
0CA06:  MOVWF  FF6
0CA08:  MOVLW  1A
0CA0A:  MOVWF  FF7
0CA0C:  MOVLW  00
0CA0E:  MOVWF  FF8
0CA10:  MOVLW  15
0CA12:  MOVLB  9
0CA14:  MOVWF  xC2
0CA16:  MOVLB  0
0CA18:  CALL   2312
0CA1C:  MOVLW  02
0CA1E:  MOVLB  1
0CA20:  MOVWF  xC5
0CA22:  MOVLB  0
0CA24:  MOVLW  30
0CA26:  BTFSS  FA6.6
0CA28:  GOTO   CA26
0CA2C:  MOVLB  E
0CA2E:  MOVWF  xF9
0CA30:  MOVLB  1
0CA32:  DECFSZ xC5,F
0CA34:  BRA    CA3A
0CA36:  BRA    CA40
0CA38:  MOVLB  0
0CA3A:  MOVLB  0
0CA3C:  GOTO   CA24
0CA40:  MOVFF  1BA,9E8
0CA44:  MOVLW  37
0CA46:  MOVLB  9
0CA48:  MOVWF  xE9
0CA4A:  MOVLB  0
0CA4C:  CALL   2542
0CA50:  MOVLW  0D
0CA52:  BTFSS  FA6.6
0CA54:  GOTO   CA52
0CA58:  MOVLB  E
0CA5A:  MOVWF  xF9
0CA5C:  MOVLW  0A
0CA5E:  MOVLB  0
0CA60:  BTFSS  FA6.6
0CA62:  GOTO   CA60
0CA66:  MOVLB  E
0CA68:  MOVWF  xF9
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_START); // Log start
0CA6A:  MOVFF  1B1,20F
0CA6E:  MOVLB  2
0CA70:  CLRF   x10
0CA72:  MOVLB  0
0CA74:  CALL   50EA
.................... 
....................    unsigned int32 start_time = get_current_sec();
....................    unsigned int32 current_time = 0;
0CA78:  CALL   3C16
0CA7C:  MOVFF  03,1C0
0CA80:  MOVFF  02,1BF
0CA84:  MOVFF  01,1BE
0CA88:  MOVFF  00,1BD
0CA8C:  MOVLB  1
0CA8E:  CLRF   xC4
0CA90:  CLRF   xC3
0CA92:  CLRF   xC2
0CA94:  CLRF   xC1
....................    test_sweep(cmd.curr_threshold, cmd.curr_limit);
0CA96:  MOVFF  1B5,1C6
0CA9A:  MOVFF  1B4,1C5
0CA9E:  MOVFF  1B9,1C8
0CAA2:  MOVFF  1B8,1C7
0CAA6:  MOVLB  0
0CAA8:  GOTO   B276
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_END);
0CAAC:  MOVFF  1B1,20F
0CAB0:  MOVLB  2
0CAB2:  SETF   x10
0CAB4:  MOVLB  0
0CAB6:  CALL   50EA
....................    fprintf(PC, "[IVDBG] End MODE IV DEBUG\r\n");
0CABA:  MOVLW  2A
0CABC:  MOVWF  FF6
0CABE:  MOVLW  1A
0CAC0:  MOVWF  FF7
0CAC2:  MOVLW  00
0CAC4:  MOVWF  FF8
0CAC6:  CALL   22DC
0CACA:  GOTO   F8D0 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr)
0CACE:  MOVLB  1
0CAD0:  CLRF   xB2
0CAD2:  MOVLW  64
0CAD4:  MOVWF  xB1
0CAD6:  SETF   xB4
0CAD8:  SETF   xB3
0CADA:  MOVLB  0
0CADC:  CALL   3C16
0CAE0:  MOVFF  03,1B8
0CAE4:  MOVFF  02,1B7
0CAE8:  MOVFF  01,1B6
0CAEC:  MOVFF  00,1B5
0CAF0:  MOVLB  1
0CAF2:  MOVF   xB1,W
0CAF4:  SUBWF  xB5,W
0CAF6:  MOVWF  xB9
0CAF8:  MOVF   xB2,W
0CAFA:  SUBWFB xB6,W
0CAFC:  MOVWF  xBA
0CAFE:  MOVLW  00
0CB00:  SUBWFB xB7,W
0CB02:  MOVWF  xBB
0CB04:  MOVLW  00
0CB06:  SUBWFB xB8,W
0CB08:  MOVWF  xBC
.................... {
....................    unsigned int16 interval = 100;   // 測定間隔 [秒]
....................    unsigned int16 end_time = 0xFFFF;
.................... 
....................    unsigned int32 current_time = get_current_sec();
....................    unsigned int32 last_time = current_time - interval;  // 最初にすぐ測定するため
.................... 
....................    // loging data
....................    unsigned int8 logdata[6];
....................    unsigned int16 temp_top;
....................    unsigned int16 temp_bot;
....................    unsigned int16 temp_mis7;
....................    unsigned int16 PD;
.................... 
....................    // Flash Write 
....................    unsigned int32 write_address;
.................... 
....................    fprintf(PC, "temp_top, temp_bot, temp_mis7, pd\r\n");
0CB0A:  MOVLW  46
0CB0C:  MOVWF  FF6
0CB0E:  MOVLW  1A
0CB10:  MOVWF  FF7
0CB12:  MOVLW  00
0CB14:  MOVWF  FF8
0CB16:  MOVLB  0
0CB18:  CALL   22DC
.................... 
....................    while (true) {
....................        current_time = get_current_sec();
0CB1C:  CALL   3C16
0CB20:  MOVFF  03,1B8
0CB24:  MOVFF  02,1B7
0CB28:  MOVFF  01,1B6
0CB2C:  MOVFF  00,1B5
.................... 
....................        // intervalごとに測定
....................        if ((current_time - last_time) >= interval) {
0CB30:  MOVLB  1
0CB32:  MOVF   xB9,W
0CB34:  SUBWF  xB5,W
0CB36:  MOVWF  xCF
0CB38:  MOVF   xBA,W
0CB3A:  SUBWFB xB6,W
0CB3C:  MOVWF  xD0
0CB3E:  MOVF   xBB,W
0CB40:  SUBWFB xB7,W
0CB42:  MOVWF  xD1
0CB44:  MOVF   xBC,W
0CB46:  SUBWFB xB8,W
0CB48:  MOVWF  xD2
0CB4A:  MOVF   xD2,F
0CB4C:  BTFSC  FD8.2
0CB4E:  BRA    CB56
0CB50:  MOVLB  0
0CB52:  GOTO   CB92
0CB56:  MOVLB  0
0CB58:  MOVLB  1
0CB5A:  MOVF   xD1,F
0CB5C:  BTFSC  FD8.2
0CB5E:  BRA    CB66
0CB60:  MOVLB  0
0CB62:  GOTO   CB92
0CB66:  MOVLB  0
0CB68:  MOVLB  1
0CB6A:  MOVF   xB2,W
0CB6C:  SUBWF  xD0,W
0CB6E:  BTFSC  FD8.0
0CB70:  BRA    CB78
0CB72:  MOVLB  0
0CB74:  GOTO   CBAE
0CB78:  MOVLB  0
0CB7A:  BTFSS  FD8.2
0CB7C:  GOTO   CB92
0CB80:  MOVLB  1
0CB82:  MOVF   xB1,W
0CB84:  SUBWF  xCF,W
0CB86:  BTFSC  FD8.0
0CB88:  BRA    CB90
0CB8A:  MOVLB  0
0CB8C:  GOTO   CBAE
0CB90:  MOVLB  0
....................            last_time = current_time;
0CB92:  MOVFF  1B8,1BC
0CB96:  MOVFF  1B7,1BB
0CB9A:  MOVFF  1B6,1BA
0CB9E:  MOVFF  1B5,1B9
....................          /*
....................            // 次の測定データ(6バイト)で64バイト境界を超えるか確認
....................            if (environment_data_ptr->reserve_counter1 + 6 > PACKET_SIZE) {
....................                unsigned int8 bankdata[4] = {0};
....................                write_address = MISF_CIGS_ENVIRO_START + environment_data_ptr->used_counter;
....................                write_data_bytes(mis_fm, write_address, bankdata, 4);
....................                environment_data_ptr->used_counter   += 4;
....................                environment_data_ptr->uncopied_counter += 4;
....................                environment_data_ptr->reserve_counter1 = 0;
....................                misf_update_address_area();
....................            }
.................... 
....................            // 環境データ読み取り
....................            temp_top  = ad7490_read(ADC_TEMP_PY_TOP);
....................            temp_bot  = ad7490_read(ADC_TEMP_PY_BOT);
....................            temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................            PD        = ad7490_read(ADC_PD);
.................... 
....................            logdata[0] = (temp_top >> 4) & 0xFF;
....................            logdata[1] = ((temp_top & 0x0F) << 4) | ((temp_bot >> 8) & 0x0F);
....................            logdata[2] = temp_bot & 0xFF;
....................            logdata[3] = (temp_mis7 >> 4) & 0xFF;
....................            logdata[4] = temp_mis7 & 0xFF;
....................            logdata[5] = PD & 0xFF;
.................... 
....................            // 書き込み
....................            write_address = MISF_CIGS_ENVIRO_START + environment_data_ptr->used_counter;
....................            write_data_bytes(mis_fm, write_address, logdata, 6);
....................            environment_data_ptr->used_counter   += 6;
....................            environment_data_ptr->uncopied_counter += 6;
....................            environment_data_ptr->reserve_counter1 += 6;
....................            fprintf(PC, "0x%04LX, 0x%04LX, 0x%04LX, 0x%04LX\r\n", temp_top, temp_bot, temp_mis7, PD);
....................        }
....................          */
....................        delay_ms(1);  // 過負荷防止用
0CBA2:  MOVLW  01
0CBA4:  MOVLB  B
0CBA6:  MOVWF  x02
0CBA8:  MOVLB  0
0CBAA:  CALL   22AE
....................    }
0CBAE:  GOTO   CB1C
.................... }
0CBB2:  GOTO   F8E0 (RETURN)
.................... }
.................... // make cmd structure from uplink command
.................... meas_iv_param_t make_meas_iv_cmd(int8 *uplinkcmd_ptr)
.................... {
....................    meas_iv_param_t cmd;
....................    cmd.id = uplinkcmd_ptr[0];
*
08260:  MOVLB  1
08262:  MOVF   xE5,W
08264:  MOVWF  FE9
08266:  MOVF   xE6,W
08268:  MOVWF  FEA
0826A:  MOVFF  FEF,1E7
....................    cmd.interval = ((unsigned int16)uplinkcmd_ptr[1] << 8) | ((unsigned int16)uplinkcmd_ptr[2]);
0826E:  MOVLW  01
08270:  ADDWF  xE5,W
08272:  MOVWF  FE9
08274:  MOVLW  00
08276:  ADDWFC xE6,W
08278:  MOVWF  FEA
0827A:  MOVF   FEF,W
0827C:  CLRF   xF3
0827E:  MOVWF  xF2
08280:  MOVFF  1F2,1F3
08284:  CLRF   xF2
08286:  MOVLW  02
08288:  ADDWF  xE5,W
0828A:  MOVWF  FE9
0828C:  MOVLW  00
0828E:  ADDWFC xE6,W
08290:  MOVWF  FEA
08292:  MOVF   FEF,W
08294:  CLRF   03
08296:  IORWF  xF2,W
08298:  MOVWF  xE8
0829A:  MOVF   03,W
0829C:  IORWF  xF3,W
0829E:  MOVWF  xE9
....................    cmd.log_threshold = (unsigned int16)uplinkcmd_ptr[3]<< 4;
082A0:  MOVLW  03
082A2:  ADDWF  xE5,W
082A4:  MOVWF  FE9
082A6:  MOVLW  00
082A8:  ADDWFC xE6,W
082AA:  MOVWF  FEA
082AC:  MOVF   FEF,W
082AE:  CLRF   xF3
082B0:  MOVWF  xF2
082B2:  RLCF   xF2,W
082B4:  MOVWF  xEE
082B6:  RLCF   xF3,W
082B8:  MOVWF  xEF
082BA:  RLCF   xEE,F
082BC:  RLCF   xEF,F
082BE:  RLCF   xEE,F
082C0:  RLCF   xEF,F
082C2:  RLCF   xEE,F
082C4:  RLCF   xEF,F
082C6:  MOVLW  F0
082C8:  ANDWF  xEE,F
....................    cmd.sweep_limit = (unsigned int16)uplinkcmd_ptr[4]<< 4;
082CA:  MOVLW  04
082CC:  ADDWF  xE5,W
082CE:  MOVWF  FE9
082D0:  MOVLW  00
082D2:  ADDWFC xE6,W
082D4:  MOVWF  FEA
082D6:  MOVF   FEF,W
082D8:  CLRF   xF3
082DA:  MOVWF  xF2
082DC:  RLCF   xF2,W
082DE:  MOVWF  xF0
082E0:  RLCF   xF3,W
082E2:  MOVWF  xF1
082E4:  RLCF   xF0,F
082E6:  RLCF   xF1,F
082E8:  RLCF   xF0,F
082EA:  RLCF   xF1,F
082EC:  RLCF   xF0,F
082EE:  RLCF   xF1,F
082F0:  MOVLW  F0
082F2:  ANDWF  xF0,F
....................    cmd.pd_threshold = (unsigned int16)uplinkcmd_ptr[5]<< 4;
082F4:  MOVLW  05
082F6:  ADDWF  xE5,W
082F8:  MOVWF  FE9
082FA:  MOVLW  00
082FC:  ADDWFC xE6,W
082FE:  MOVWF  FEA
08300:  MOVF   FEF,W
08302:  CLRF   xF3
08304:  MOVWF  xF2
08306:  RLCF   xF2,W
08308:  MOVWF  xEA
0830A:  RLCF   xF3,W
0830C:  MOVWF  xEB
0830E:  RLCF   xEA,F
08310:  RLCF   xEB,F
08312:  RLCF   xEA,F
08314:  RLCF   xEB,F
08316:  RLCF   xEA,F
08318:  RLCF   xEB,F
0831A:  MOVLW  F0
0831C:  ANDWF  xEA,F
....................    cmd.meas_time = (unsigned int16)uplinkcmd_ptr[6] *60; // 分 -> 秒
0831E:  MOVLW  06
08320:  ADDWF  xE5,W
08322:  MOVWF  FE9
08324:  MOVLW  00
08326:  ADDWFC xE6,W
08328:  MOVWF  FEA
0832A:  MOVF   FEF,W
0832C:  CLRF   xF3
0832E:  MOVWF  xF2
08330:  MOVFF  1F3,A52
08334:  MOVFF  1F2,A51
08338:  MOVLB  A
0833A:  CLRF   x54
0833C:  MOVLW  3C
0833E:  MOVWF  x53
08340:  MOVLB  0
08342:  CALL   823E
08346:  MOVFF  02,1ED
0834A:  MOVFF  01,1EC
....................    return cmd;
0834E:  MOVLW  E7
08350:  MOVWF  01
08352:  MOVLW  01
08354:  MOVWF  02
08356:  RETURN 0
.................... }
.................... 
.................... void print_meas_iv_cmd(meas_iv_param_t *cmd_ptr)
*
08F7C:  MOVLW  03
08F7E:  MOVLB  1
08F80:  ADDWF  xDF,W
08F82:  MOVWF  FE9
08F84:  MOVLW  00
08F86:  ADDWFC xE0,W
08F88:  MOVWF  FEA
08F8A:  MOVFF  FEC,1E8
08F8E:  MOVF   FED,F
08F90:  MOVFF  FEF,1E7
08F94:  MOVFF  1E8,1EA
08F98:  MOVFF  1E7,1E9
08F9C:  MOVLB  0
08F9E:  GOTO   8358
08FA2:  MOVFF  02,1E2
08FA6:  MOVFF  01,1E1
08FAA:  MOVLW  09
08FAC:  MOVLB  1
08FAE:  ADDWF  xDF,W
08FB0:  MOVWF  FE9
08FB2:  MOVLW  00
08FB4:  ADDWFC xE0,W
08FB6:  MOVWF  FEA
08FB8:  MOVFF  FEC,1E8
08FBC:  MOVF   FED,F
08FBE:  MOVFF  FEF,1E7
08FC2:  MOVFF  1E8,1EA
08FC6:  MOVFF  1E7,1E9
08FCA:  MOVLB  0
08FCC:  CALL   8D4E
08FD0:  MOVFF  02,1E4
08FD4:  MOVFF  01,1E3
08FD8:  MOVLW  07
08FDA:  MOVLB  1
08FDC:  ADDWF  xDF,W
08FDE:  MOVWF  FE9
08FE0:  MOVLW  00
08FE2:  ADDWFC xE0,W
08FE4:  MOVWF  FEA
08FE6:  MOVFF  FEC,1E8
08FEA:  MOVF   FED,F
08FEC:  MOVFF  FEF,1E7
08FF0:  MOVFF  1E8,1EA
08FF4:  MOVFF  1E7,1E9
08FF8:  MOVLB  0
08FFA:  CALL   8D4E
08FFE:  MOVFF  02,1E6
09002:  MOVFF  01,1E5
.................... {
....................    // Calc
....................    unsigned int16 pd_value = calc_pd_value(cmd_ptr->pd_threshold);
....................    int16 sweep_limit = calc_curr_value(cmd_ptr->sweep_limit);
....................    int16 log_threshold = calc_curr_value(cmd_ptr->log_threshold);
.................... 
....................    // Print
....................    fprintf(PC, "MEAS IV Command Parameters:\r\n");
09006:  MOVLW  6A
09008:  MOVWF  FF6
0900A:  MOVLW  1A
0900C:  MOVWF  FF7
0900E:  MOVLW  00
09010:  MOVWF  FF8
09012:  CALL   22DC
....................    fprintf(PC, "\tID: %02X\r\n", cmd_ptr->id);
09016:  MOVLB  1
09018:  MOVF   xDF,W
0901A:  MOVWF  FE9
0901C:  MOVF   xE0,W
0901E:  MOVWF  FEA
09020:  MOVFF  FEF,1E7
09024:  MOVLW  88
09026:  MOVWF  FF6
09028:  MOVLW  1A
0902A:  MOVWF  FF7
0902C:  MOVLW  00
0902E:  MOVWF  FF8
09030:  MOVLW  05
09032:  MOVLB  9
09034:  MOVWF  xC2
09036:  MOVLB  0
09038:  CALL   2312
0903C:  MOVFF  1E7,9E8
09040:  MOVLW  37
09042:  MOVLB  9
09044:  MOVWF  xE9
09046:  MOVLB  0
09048:  CALL   2542
0904C:  MOVLW  0D
0904E:  BTFSS  FA6.6
09050:  GOTO   904E
09054:  MOVLB  E
09056:  MOVWF  xF9
09058:  MOVLW  0A
0905A:  MOVLB  0
0905C:  BTFSS  FA6.6
0905E:  GOTO   905C
09062:  MOVLB  E
09064:  MOVWF  xF9
....................    fprintf(PC, "\tSweepInterval   :%lu[ms]\r\n", cmd_ptr->interval);
09066:  MOVLW  01
09068:  MOVLB  1
0906A:  ADDWF  xDF,W
0906C:  MOVWF  FE9
0906E:  MOVLW  00
09070:  ADDWFC xE0,W
09072:  MOVWF  FEA
09074:  MOVFF  FEC,1E8
09078:  MOVF   FED,F
0907A:  MOVFF  FEF,1E7
0907E:  MOVLW  94
09080:  MOVWF  FF6
09082:  MOVLW  1A
09084:  MOVWF  FF7
09086:  MOVLW  00
09088:  MOVWF  FF8
0908A:  MOVLW  12
0908C:  MOVLB  9
0908E:  MOVWF  xC2
09090:  MOVLB  0
09092:  CALL   2312
09096:  MOVLW  10
09098:  MOVWF  FE9
0909A:  MOVFF  1E8,1EA
0909E:  MOVFF  1E7,1E9
090A2:  CALL   8E60
090A6:  MOVLW  A9
090A8:  MOVWF  FF6
090AA:  MOVLW  1A
090AC:  MOVWF  FF7
090AE:  MOVLW  00
090B0:  MOVWF  FF8
090B2:  MOVLW  06
090B4:  MOVLB  9
090B6:  MOVWF  xC2
090B8:  MOVLB  0
090BA:  CALL   2312
....................    fprintf(PC, "\tPD Threshold    :%lu[W/m2]\r\n", pd_value);
090BE:  MOVLW  B0
090C0:  MOVWF  FF6
090C2:  MOVLW  1A
090C4:  MOVWF  FF7
090C6:  MOVLW  00
090C8:  MOVWF  FF8
090CA:  MOVLW  12
090CC:  MOVLB  9
090CE:  MOVWF  xC2
090D0:  MOVLB  0
090D2:  CALL   2312
090D6:  MOVLW  10
090D8:  MOVWF  FE9
090DA:  MOVFF  1E2,1EA
090DE:  MOVFF  1E1,1E9
090E2:  CALL   8E60
090E6:  MOVLW  C5
090E8:  MOVWF  FF6
090EA:  MOVLW  1A
090EC:  MOVWF  FF7
090EE:  MOVLW  00
090F0:  MOVWF  FF8
090F2:  MOVLW  08
090F4:  MOVLB  9
090F6:  MOVWF  xC2
090F8:  MOVLB  0
090FA:  CALL   2312
....................    fprintf(PC, "\tSweepLimit      :%lu[mA]\r\n", sweep_limit);
090FE:  MOVLW  CE
09100:  MOVWF  FF6
09102:  MOVLW  1A
09104:  MOVWF  FF7
09106:  MOVLW  00
09108:  MOVWF  FF8
0910A:  MOVLW  12
0910C:  MOVLB  9
0910E:  MOVWF  xC2
09110:  MOVLB  0
09112:  CALL   2312
09116:  MOVLW  10
09118:  MOVWF  FE9
0911A:  MOVFF  1E4,1EA
0911E:  MOVFF  1E3,1E9
09122:  CALL   8E60
09126:  MOVLW  E3
09128:  MOVWF  FF6
0912A:  MOVLW  1A
0912C:  MOVWF  FF7
0912E:  MOVLW  00
09130:  MOVWF  FF8
09132:  MOVLW  06
09134:  MOVLB  9
09136:  MOVWF  xC2
09138:  MOVLB  0
0913A:  CALL   2312
....................    fprintf(PC, "\tLogThreshold    :%lu[mA]\r\n", log_threshold);
0913E:  MOVLW  EA
09140:  MOVWF  FF6
09142:  MOVLW  1A
09144:  MOVWF  FF7
09146:  MOVLW  00
09148:  MOVWF  FF8
0914A:  MOVLW  12
0914C:  MOVLB  9
0914E:  MOVWF  xC2
09150:  MOVLB  0
09152:  CALL   2312
09156:  MOVLW  10
09158:  MOVWF  FE9
0915A:  MOVFF  1E6,1EA
0915E:  MOVFF  1E5,1E9
09162:  CALL   8E60
09166:  MOVLW  FF
09168:  MOVWF  FF6
0916A:  MOVLW  1A
0916C:  MOVWF  FF7
0916E:  MOVLW  00
09170:  MOVWF  FF8
09172:  MOVLW  06
09174:  MOVLB  9
09176:  MOVWF  xC2
09178:  MOVLB  0
0917A:  CALL   2312
....................    fprintf(PC, "\tMeasurementTime :%lu[s]\r\n\r\n", cmd_ptr->meas_time);
0917E:  MOVLW  05
09180:  MOVLB  1
09182:  ADDWF  xDF,W
09184:  MOVWF  FE9
09186:  MOVLW  00
09188:  ADDWFC xE0,W
0918A:  MOVWF  FEA
0918C:  MOVFF  FEC,1E8
09190:  MOVF   FED,F
09192:  MOVFF  FEF,1E7
09196:  MOVLW  06
09198:  MOVWF  FF6
0919A:  MOVLW  1B
0919C:  MOVWF  FF7
0919E:  MOVLW  00
091A0:  MOVWF  FF8
091A2:  MOVLW  12
091A4:  MOVLB  9
091A6:  MOVWF  xC2
091A8:  MOVLB  0
091AA:  CALL   2312
091AE:  MOVLW  10
091B0:  MOVWF  FE9
091B2:  MOVFF  1E8,1EA
091B6:  MOVFF  1E7,1E9
091BA:  CALL   8E60
091BE:  MOVLW  1B
091C0:  MOVWF  FF6
091C2:  MOVLW  1B
091C4:  MOVWF  FF7
091C6:  MOVLW  00
091C8:  MOVWF  FF8
091CA:  MOVLW  07
091CC:  MOVLB  9
091CE:  MOVWF  xC2
091D0:  MOVLB  0
091D2:  CALL   2312
091D6:  GOTO   AAEC (RETURN)
.................... }
.................... 
.................... void mode_meas_pd(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS PD\r\n");
*
0E332:  MOVLW  24
0E334:  MOVWF  FF6
0E336:  MOVLW  1B
0E338:  MOVWF  FF7
0E33A:  MOVLW  00
0E33C:  MOVWF  FF8
0E33E:  CALL   22DC
.................... 
....................    // uplinkcmd_ptr から interval と測定時間を取り出す
....................    unsigned int16 interval_ms = ((unsigned int16)uplinkcmd_ptr[1] << 8) | uplinkcmd_ptr[2]; // ms
....................    unsigned int16 meas_time_s = (unsigned int16)uplinkcmd_ptr[6] * 60; // 秒
.................... 
....................    unsigned int32 start_time_ms   = get_current_msec();
....................    unsigned int32 current_time_ms = 0;
....................    unsigned int32 meas_time_ms    = (unsigned int32)meas_time_s * 1000; // ms に変換
0E342:  MOVLW  01
0E344:  MOVLB  1
0E346:  ADDWF  xAF,W
0E348:  MOVWF  FE9
0E34A:  MOVLW  00
0E34C:  ADDWFC xB0,W
0E34E:  MOVWF  FEA
0E350:  MOVF   FEF,W
0E352:  CLRF   xC4
0E354:  MOVWF  xC3
0E356:  MOVFF  1C3,1C4
0E35A:  CLRF   xC3
0E35C:  MOVLW  02
0E35E:  ADDWF  xAF,W
0E360:  MOVWF  FE9
0E362:  MOVLW  00
0E364:  ADDWFC xB0,W
0E366:  MOVWF  FEA
0E368:  MOVF   FEF,W
0E36A:  IORWF  xC3,W
0E36C:  MOVWF  xB1
0E36E:  MOVF   xC4,W
0E370:  MOVWF  xB2
0E372:  MOVLW  06
0E374:  ADDWF  xAF,W
0E376:  MOVWF  FE9
0E378:  MOVLW  00
0E37A:  ADDWFC xB0,W
0E37C:  MOVWF  FEA
0E37E:  MOVF   FEF,W
0E380:  CLRF   xC4
0E382:  MOVWF  xC3
0E384:  MOVFF  1C4,A52
0E388:  MOVFF  1C3,A51
0E38C:  MOVLB  A
0E38E:  CLRF   x54
0E390:  MOVLW  3C
0E392:  MOVWF  x53
0E394:  MOVLB  0
0E396:  CALL   823E
0E39A:  MOVFF  02,1B4
0E39E:  MOVFF  01,1B3
0E3A2:  CALL   9B3C
0E3A6:  MOVLB  1
0E3A8:  CLRF   xB8
0E3AA:  CLRF   xB7
0E3AC:  MOVFF  02,1B6
0E3B0:  MOVFF  01,1B5
0E3B4:  CLRF   xBC
0E3B6:  CLRF   xBB
0E3B8:  CLRF   xBA
0E3BA:  CLRF   xB9
0E3BC:  CLRF   xC6
0E3BE:  CLRF   xC5
0E3C0:  MOVFF  1B4,1C4
0E3C4:  MOVFF  1B3,1C3
0E3C8:  MOVFF  FEA,1C8
0E3CC:  MOVFF  FE9,1C7
0E3D0:  MOVFF  1C6,1CC
0E3D4:  MOVFF  1C5,1CB
0E3D8:  MOVFF  1C4,1CA
0E3DC:  MOVFF  1C3,1C9
0E3E0:  CLRF   xD0
0E3E2:  CLRF   xCF
0E3E4:  MOVLW  03
0E3E6:  MOVWF  xCE
0E3E8:  MOVLW  E8
0E3EA:  MOVWF  xCD
0E3EC:  MOVLB  0
0E3EE:  GOTO   E2BE
0E3F2:  MOVFF  1C8,FEA
0E3F6:  MOVFF  1C7,FE9
0E3FA:  MOVFF  03,1C0
0E3FE:  MOVFF  02,1BF
0E402:  MOVFF  01,1BE
0E406:  MOVFF  00,1BD
.................... 
....................    while (current_time_ms - start_time_ms < meas_time_ms) {
0E40A:  MOVLB  1
0E40C:  MOVF   xB5,W
0E40E:  SUBWF  xB9,W
0E410:  MOVWF  xC3
0E412:  MOVF   xB6,W
0E414:  SUBWFB xBA,W
0E416:  MOVWF  xC4
0E418:  MOVF   xB7,W
0E41A:  SUBWFB xBB,W
0E41C:  MOVWF  xC5
0E41E:  MOVF   xB8,W
0E420:  SUBWFB xBC,W
0E422:  MOVWF  xC6
0E424:  MOVF   xC6,W
0E426:  SUBWF  xC0,W
0E428:  BTFSC  FD8.0
0E42A:  BRA    E432
0E42C:  MOVLB  0
0E42E:  GOTO   E516
0E432:  MOVLB  0
0E434:  BTFSS  FD8.2
0E436:  GOTO   E47C
0E43A:  MOVLB  1
0E43C:  MOVF   xC5,W
0E43E:  SUBWF  xBF,W
0E440:  BTFSC  FD8.0
0E442:  BRA    E44A
0E444:  MOVLB  0
0E446:  GOTO   E516
0E44A:  MOVLB  0
0E44C:  BTFSS  FD8.2
0E44E:  GOTO   E47C
0E452:  MOVLB  1
0E454:  MOVF   xC4,W
0E456:  SUBWF  xBE,W
0E458:  BTFSC  FD8.0
0E45A:  BRA    E462
0E45C:  MOVLB  0
0E45E:  GOTO   E516
0E462:  MOVLB  0
0E464:  BTFSS  FD8.2
0E466:  GOTO   E47C
0E46A:  MOVLB  1
0E46C:  MOVF   xBD,W
0E46E:  SUBWF  xC3,W
0E470:  BTFSS  FD8.0
0E472:  BRA    E47A
0E474:  MOVLB  0
0E476:  GOTO   E516
0E47A:  MOVLB  0
.................... 
....................       current_time_ms = get_current_msec();
0E47C:  CALL   9B3C
0E480:  MOVLB  1
0E482:  CLRF   xBC
0E484:  CLRF   xBB
0E486:  MOVFF  02,1BA
0E48A:  MOVFF  01,1B9
.................... 
....................       // interval ごとに実行
....................       static unsigned int32 last_meas_time = 0;
....................       if (current_time_ms - last_meas_time >= interval_ms) {
0E48E:  MOVF   x88,W
0E490:  SUBWF  xB9,W
0E492:  MOVWF  xC3
0E494:  MOVF   x89,W
0E496:  SUBWFB xBA,W
0E498:  MOVWF  xC4
0E49A:  MOVF   x8A,W
0E49C:  SUBWFB xBB,W
0E49E:  MOVWF  xC5
0E4A0:  MOVF   x8B,W
0E4A2:  SUBWFB xBC,W
0E4A4:  MOVWF  xC6
0E4A6:  MOVF   xC6,F
0E4A8:  BTFSC  FD8.2
0E4AA:  BRA    E4B2
0E4AC:  MOVLB  0
0E4AE:  GOTO   E4EE
0E4B2:  MOVLB  0
0E4B4:  MOVLB  1
0E4B6:  MOVF   xC5,F
0E4B8:  BTFSC  FD8.2
0E4BA:  BRA    E4C2
0E4BC:  MOVLB  0
0E4BE:  GOTO   E4EE
0E4C2:  MOVLB  0
0E4C4:  MOVLB  1
0E4C6:  MOVF   xB2,W
0E4C8:  SUBWF  xC4,W
0E4CA:  BTFSC  FD8.0
0E4CC:  BRA    E4D4
0E4CE:  MOVLB  0
0E4D0:  GOTO   E512
0E4D4:  MOVLB  0
0E4D6:  BTFSS  FD8.2
0E4D8:  GOTO   E4EE
0E4DC:  MOVLB  1
0E4DE:  MOVF   xB1,W
0E4E0:  SUBWF  xC3,W
0E4E2:  BTFSC  FD8.0
0E4E4:  BRA    E4EC
0E4E6:  MOVLB  0
0E4E8:  GOTO   E512
0E4EC:  MOVLB  0
....................          last_meas_time = current_time_ms;
0E4EE:  MOVFF  1BC,18B
0E4F2:  MOVFF  1BB,18A
0E4F6:  MOVFF  1BA,189
0E4FA:  MOVFF  1B9,188
.................... 
....................          // PD センサー読み取り
....................          unsigned int16 pd = ad7490_read(ADC_PD);
0E4FE:  MOVLW  0F
0E500:  MOVLB  9
0E502:  MOVWF  xEE
0E504:  MOVLB  0
0E506:  CALL   24C2
0E50A:  MOVFF  02,1C2
0E50E:  MOVFF  01,1C1
.................... 
....................          // デバッグ出力
....................          // fprintf(PC, "Time:%lu ms, PD:%u\r\n", current_time_ms - start_time_ms, pd);
....................       }
0E512:  GOTO   E40A
....................    }
.................... 
....................    fprintf(PC, "End MODE MEAS PD\r\n");
0E516:  MOVLW  3A
0E518:  MOVWF  FF6
0E51A:  MOVLW  1B
0E51C:  MOVWF  FF7
0E51E:  MOVLW  00
0E520:  MOVWF  FF8
0E522:  CALL   22DC
0E526:  GOTO   F8FC (RETURN)
.................... }
.................... 
.................... #include "application/cigs_mode_flash.c"
.................... #include "cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../domain/cigs_flash.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... 
.................... // ========================== MISF Command ============================
.................... void mode_misf_erase_all(int8 parameter[])
.................... {
....................    printf("Start Flash Erase All\r\n");
*
05C74:  MOVLW  4E
05C76:  MOVWF  FF6
05C78:  MOVLW  1B
05C7A:  MOVWF  FF7
05C7C:  MOVLW  00
05C7E:  MOVWF  FF8
05C80:  CALL   22DC
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
05C84:  MOVLB  1
05C86:  MOVF   xCA,W
05C88:  MOVWF  FE9
05C8A:  MOVF   xCB,W
05C8C:  MOVWF  FEA
05C8E:  MOVFF  FEF,1CC
....................    piclog_make(cmd, 0x00); // Log the command execution
05C92:  MOVFF  1CC,20F
05C96:  MOVLB  2
05C98:  CLRF   x10
05C9A:  MOVLB  0
05C9C:  CALL   50EA
....................    
....................    for (int32 address = MISF_START; address < MISF_END; address += SECTOR_64K_BYTE) {
05CA0:  MOVLB  1
05CA2:  CLRF   xD0
05CA4:  CLRF   xCF
05CA6:  CLRF   xCE
05CA8:  CLRF   xCD
05CAA:  MOVLB  0
05CAC:  MOVLB  1
05CAE:  MOVF   xD0,F
05CB0:  BTFSC  FD8.2
05CB2:  BRA    5CBA
05CB4:  MOVLB  0
05CB6:  GOTO   5D32
05CBA:  MOVLB  0
05CBC:  MOVLB  1
05CBE:  MOVF   xCF,W
05CC0:  SUBLW  BC
05CC2:  BTFSC  FD8.0
05CC4:  BRA    5CCC
05CC6:  MOVLB  0
05CC8:  GOTO   5D32
05CCC:  MOVLB  0
05CCE:  BTFSS  FD8.2
05CD0:  GOTO   5CFE
05CD4:  MOVLB  1
05CD6:  MOVF   xCE,W
05CD8:  SUBLW  0F
05CDA:  BTFSC  FD8.0
05CDC:  BRA    5CE4
05CDE:  MOVLB  0
05CE0:  GOTO   5D32
05CE4:  MOVLB  0
05CE6:  BTFSS  FD8.2
05CE8:  GOTO   5CFE
05CEC:  MOVLB  1
05CEE:  MOVF   xCD,W
05CF0:  SUBLW  FE
05CF2:  BTFSC  FD8.0
05CF4:  BRA    5CFC
05CF6:  MOVLB  0
05CF8:  GOTO   5D32
05CFC:  MOVLB  0
....................       sector_erase(mis_fm, address); // Erase each sector
05CFE:  MOVFF  115,1F8
05D02:  MOVFF  114,1F7
05D06:  MOVFF  113,1F6
05D0A:  MOVFF  112,1F5
05D0E:  MOVFF  1D0,1FC
05D12:  MOVFF  1CF,1FB
05D16:  MOVFF  1CE,1FA
05D1A:  MOVFF  1CD,1F9
05D1E:  CALL   5912
05D22:  MOVLW  01
05D24:  MOVLB  1
05D26:  ADDWF  xCF,F
05D28:  MOVLW  00
05D2A:  ADDWFC xD0,F
05D2C:  MOVLB  0
05D2E:  GOTO   5CAC
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05D32:  MOVFF  1CC,20F
05D36:  MOVLB  2
05D38:  SETF   x10
05D3A:  MOVLB  0
05D3C:  CALL   50EA
....................    printf("End Flash Erase All\r\n");
05D40:  MOVLW  66
05D42:  MOVWF  FF6
05D44:  MOVLW  1B
05D46:  MOVWF  FF7
05D48:  MOVLW  00
05D4A:  MOVWF  FF8
05D4C:  CALL   22DC
05D50:  RETURN 0
.................... }
.................... 
.................... void mode_misf_erase_1sector(int8 parameter[])
.................... {
....................    printf("Start Flash Erase 1 Sector\r\n");
05D52:  MOVLW  7C
05D54:  MOVWF  FF6
05D56:  MOVLW  1B
05D58:  MOVWF  FF7
05D5A:  MOVLW  00
05D5C:  MOVWF  FF8
05D5E:  CALL   22DC
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    int32 sector_address = 
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
05D62:  MOVLB  1
05D64:  MOVF   xAF,W
05D66:  MOVWF  FE9
05D68:  MOVF   xB0,W
05D6A:  MOVWF  FEA
05D6C:  MOVFF  FEF,1B1
05D70:  MOVLW  01
05D72:  ADDWF  xAF,W
05D74:  MOVWF  FE9
05D76:  MOVLW  00
05D78:  ADDWFC xB0,W
05D7A:  MOVWF  FEA
05D7C:  MOVF   FEF,W
05D7E:  CLRF   xB9
05D80:  CLRF   xB8
05D82:  CLRF   xB7
05D84:  MOVWF  xB6
05D86:  MOVFF  1B6,1B9
05D8A:  CLRF   xB6
05D8C:  CLRF   xB7
05D8E:  CLRF   xB8
05D90:  MOVLW  02
05D92:  ADDWF  xAF,W
05D94:  MOVWF  FE9
05D96:  MOVLW  00
05D98:  ADDWFC xB0,W
05D9A:  MOVWF  FEA
05D9C:  MOVF   FEF,W
05D9E:  CLRF   xBE
05DA0:  CLRF   xBD
05DA2:  CLRF   xBC
05DA4:  MOVWF  xBB
05DA6:  MOVFF  1BC,03
05DAA:  MOVFF  1BB,02
05DAE:  CLRF   00
05DB0:  CLRF   01
05DB2:  MOVF   00,W
05DB4:  IORWF  xB6,F
05DB6:  MOVF   01,W
05DB8:  IORWF  xB7,F
05DBA:  MOVF   02,W
05DBC:  IORWF  xB8,F
05DBE:  MOVF   03,W
05DC0:  IORWF  xB9,F
05DC2:  MOVLW  03
05DC4:  ADDWF  xAF,W
05DC6:  MOVWF  FE9
05DC8:  MOVLW  00
05DCA:  ADDWFC xB0,W
05DCC:  MOVWF  FEA
05DCE:  MOVF   FEF,W
05DD0:  CLRF   xBE
05DD2:  CLRF   xBD
05DD4:  CLRF   xBC
05DD6:  MOVWF  xBB
05DD8:  MOVFF  1BD,03
05DDC:  MOVFF  1BC,02
05DE0:  MOVFF  1BB,01
05DE4:  CLRF   00
05DE6:  MOVF   00,W
05DE8:  IORWF  xB6,F
05DEA:  MOVF   01,W
05DEC:  IORWF  xB7,F
05DEE:  MOVF   02,W
05DF0:  IORWF  xB8,F
05DF2:  MOVF   03,W
05DF4:  IORWF  xB9,F
05DF6:  MOVLW  04
05DF8:  ADDWF  xAF,W
05DFA:  MOVWF  FE9
05DFC:  MOVLW  00
05DFE:  ADDWFC xB0,W
05E00:  MOVWF  FEA
05E02:  MOVF   FEF,W
05E04:  MOVWF  00
05E06:  CLRF   01
05E08:  CLRF   02
05E0A:  CLRF   03
05E0C:  MOVF   00,W
05E0E:  IORWF  xB6,W
05E10:  MOVWF  xB2
05E12:  MOVF   01,W
05E14:  IORWF  xB7,W
05E16:  MOVWF  xB3
05E18:  MOVF   02,W
05E1A:  IORWF  xB8,W
05E1C:  MOVWF  xB4
05E1E:  MOVF   03,W
05E20:  IORWF  xB9,W
05E22:  MOVWF  xB5
.................... 
....................    printf("\tSector Address: 0x%08LX\r\n", sector_address);
05E24:  MOVLW  9A
05E26:  MOVWF  FF6
05E28:  MOVLW  1B
05E2A:  MOVWF  FF7
05E2C:  MOVLW  00
05E2E:  MOVWF  FF8
05E30:  MOVLW  13
05E32:  MOVLB  9
05E34:  MOVWF  xC2
05E36:  MOVLB  0
05E38:  CALL   2312
05E3C:  MOVFF  1B5,9E8
05E40:  MOVLW  37
05E42:  MOVLB  9
05E44:  MOVWF  xE9
05E46:  MOVLB  0
05E48:  CALL   2542
05E4C:  MOVFF  1B4,9E8
05E50:  MOVLW  37
05E52:  MOVLB  9
05E54:  MOVWF  xE9
05E56:  MOVLB  0
05E58:  CALL   2542
05E5C:  MOVFF  1B3,9E8
05E60:  MOVLW  37
05E62:  MOVLB  9
05E64:  MOVWF  xE9
05E66:  MOVLB  0
05E68:  CALL   2542
05E6C:  MOVFF  1B2,9E8
05E70:  MOVLW  37
05E72:  MOVLB  9
05E74:  MOVWF  xE9
05E76:  MOVLB  0
05E78:  CALL   2542
05E7C:  MOVLW  0D
05E7E:  BTFSS  FA6.6
05E80:  GOTO   5E7E
05E84:  MOVLB  E
05E86:  MOVWF  xF9
05E88:  MOVLW  0A
05E8A:  MOVLB  0
05E8C:  BTFSS  FA6.6
05E8E:  GOTO   5E8C
05E92:  MOVLB  E
05E94:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05E96:  MOVFF  1B1,20F
05E9A:  MOVLB  2
05E9C:  CLRF   x10
05E9E:  MOVLB  0
05EA0:  CALL   50EA
....................    
....................    sector_erase(mis_fm, sector_address);
05EA4:  MOVFF  115,1F8
05EA8:  MOVFF  114,1F7
05EAC:  MOVFF  113,1F6
05EB0:  MOVFF  112,1F5
05EB4:  MOVFF  1B5,1FC
05EB8:  MOVFF  1B4,1FB
05EBC:  MOVFF  1B3,1FA
05EC0:  MOVFF  1B2,1F9
05EC4:  CALL   5912
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05EC8:  MOVFF  1B1,20F
05ECC:  MOVLB  2
05ECE:  SETF   x10
05ED0:  MOVLB  0
05ED2:  CALL   50EA
....................    printf("End Flash Erase 1 Sector\r\n");
05ED6:  MOVLW  B6
05ED8:  MOVWF  FF6
05EDA:  MOVLW  1B
05EDC:  MOVWF  FF7
05EDE:  MOVLW  00
05EE0:  MOVWF  FF8
05EE2:  CALL   22DC
05EE6:  GOTO   F7D8 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_4kbyte_subsector(int8 parameter[])
.................... {
....................    printf("Start Flash Erase 4kByte Subsector\r\n");
05EEA:  MOVLW  D2
05EEC:  MOVWF  FF6
05EEE:  MOVLW  1B
05EF0:  MOVWF  FF7
05EF2:  MOVLW  00
05EF4:  MOVWF  FF8
05EF6:  CALL   22DC
....................    int8 cmd = parameter[0];
....................    int32 subsector_address =
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
05EFA:  MOVLB  1
05EFC:  MOVF   xAF,W
05EFE:  MOVWF  FE9
05F00:  MOVF   xB0,W
05F02:  MOVWF  FEA
05F04:  MOVFF  FEF,1B1
05F08:  MOVLW  01
05F0A:  ADDWF  xAF,W
05F0C:  MOVWF  FE9
05F0E:  MOVLW  00
05F10:  ADDWFC xB0,W
05F12:  MOVWF  FEA
05F14:  MOVF   FEF,W
05F16:  CLRF   xB9
05F18:  CLRF   xB8
05F1A:  CLRF   xB7
05F1C:  MOVWF  xB6
05F1E:  MOVFF  1B6,1B9
05F22:  CLRF   xB6
05F24:  CLRF   xB7
05F26:  CLRF   xB8
05F28:  MOVLW  02
05F2A:  ADDWF  xAF,W
05F2C:  MOVWF  FE9
05F2E:  MOVLW  00
05F30:  ADDWFC xB0,W
05F32:  MOVWF  FEA
05F34:  MOVF   FEF,W
05F36:  CLRF   xBE
05F38:  CLRF   xBD
05F3A:  CLRF   xBC
05F3C:  MOVWF  xBB
05F3E:  MOVFF  1BC,03
05F42:  MOVFF  1BB,02
05F46:  CLRF   00
05F48:  CLRF   01
05F4A:  MOVF   00,W
05F4C:  IORWF  xB6,F
05F4E:  MOVF   01,W
05F50:  IORWF  xB7,F
05F52:  MOVF   02,W
05F54:  IORWF  xB8,F
05F56:  MOVF   03,W
05F58:  IORWF  xB9,F
05F5A:  MOVLW  03
05F5C:  ADDWF  xAF,W
05F5E:  MOVWF  FE9
05F60:  MOVLW  00
05F62:  ADDWFC xB0,W
05F64:  MOVWF  FEA
05F66:  MOVF   FEF,W
05F68:  CLRF   xBE
05F6A:  CLRF   xBD
05F6C:  CLRF   xBC
05F6E:  MOVWF  xBB
05F70:  MOVFF  1BD,03
05F74:  MOVFF  1BC,02
05F78:  MOVFF  1BB,01
05F7C:  CLRF   00
05F7E:  MOVF   00,W
05F80:  IORWF  xB6,F
05F82:  MOVF   01,W
05F84:  IORWF  xB7,F
05F86:  MOVF   02,W
05F88:  IORWF  xB8,F
05F8A:  MOVF   03,W
05F8C:  IORWF  xB9,F
05F8E:  MOVLW  04
05F90:  ADDWF  xAF,W
05F92:  MOVWF  FE9
05F94:  MOVLW  00
05F96:  ADDWFC xB0,W
05F98:  MOVWF  FEA
05F9A:  MOVF   FEF,W
05F9C:  MOVWF  00
05F9E:  CLRF   01
05FA0:  CLRF   02
05FA2:  CLRF   03
05FA4:  MOVF   00,W
05FA6:  IORWF  xB6,W
05FA8:  MOVWF  xB2
05FAA:  MOVF   01,W
05FAC:  IORWF  xB7,W
05FAE:  MOVWF  xB3
05FB0:  MOVF   02,W
05FB2:  IORWF  xB8,W
05FB4:  MOVWF  xB4
05FB6:  MOVF   03,W
05FB8:  IORWF  xB9,W
05FBA:  MOVWF  xB5
....................    printf("\tSubsector Address: 0x%08LX\r\n", subsector_address);
05FBC:  MOVLW  F8
05FBE:  MOVWF  FF6
05FC0:  MOVLW  1B
05FC2:  MOVWF  FF7
05FC4:  MOVLW  00
05FC6:  MOVWF  FF8
05FC8:  MOVLW  16
05FCA:  MOVLB  9
05FCC:  MOVWF  xC2
05FCE:  MOVLB  0
05FD0:  CALL   2312
05FD4:  MOVFF  1B5,9E8
05FD8:  MOVLW  37
05FDA:  MOVLB  9
05FDC:  MOVWF  xE9
05FDE:  MOVLB  0
05FE0:  CALL   2542
05FE4:  MOVFF  1B4,9E8
05FE8:  MOVLW  37
05FEA:  MOVLB  9
05FEC:  MOVWF  xE9
05FEE:  MOVLB  0
05FF0:  CALL   2542
05FF4:  MOVFF  1B3,9E8
05FF8:  MOVLW  37
05FFA:  MOVLB  9
05FFC:  MOVWF  xE9
05FFE:  MOVLB  0
06000:  CALL   2542
06004:  MOVFF  1B2,9E8
06008:  MOVLW  37
0600A:  MOVLB  9
0600C:  MOVWF  xE9
0600E:  MOVLB  0
06010:  CALL   2542
06014:  MOVLW  0D
06016:  BTFSS  FA6.6
06018:  GOTO   6016
0601C:  MOVLB  E
0601E:  MOVWF  xF9
06020:  MOVLW  0A
06022:  MOVLB  0
06024:  BTFSS  FA6.6
06026:  GOTO   6024
0602A:  MOVLB  E
0602C:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START);
0602E:  MOVFF  1B1,20F
06032:  MOVLB  2
06034:  CLRF   x10
06036:  MOVLB  0
06038:  CALL   50EA
....................    subsector_4kByte_erase(mis_fm, subsector_address); // FIX: 固定0消去→指定アドレス
0603C:  MOVFF  115,A92
06040:  MOVFF  114,A91
06044:  MOVFF  113,A90
06048:  MOVFF  112,A8F
0604C:  MOVFF  1B5,A96
06050:  MOVFF  1B4,A95
06054:  MOVFF  1B3,A94
06058:  MOVFF  1B2,A93
0605C:  CALL   4D38
....................    piclog_make(cmd, PICLOG_PARAM_END);
06060:  MOVFF  1B1,20F
06064:  MOVLB  2
06066:  SETF   x10
06068:  MOVLB  0
0606A:  CALL   50EA
....................    printf("End Flash Erase 4kByte Subsector\r\n");
0606E:  MOVLW  16
06070:  MOVWF  FF6
06072:  MOVLW  1C
06074:  MOVWF  FF7
06076:  MOVLW  00
06078:  MOVWF  FF8
0607A:  CALL   22DC
0607E:  GOTO   F7E8 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 64kByte Subsector\r\n");
06082:  MOVLW  3A
06084:  MOVWF  FF6
06086:  MOVLW  1C
06088:  MOVWF  FF7
0608A:  MOVLW  00
0608C:  MOVWF  FF8
0608E:  CALL   22DC
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
06092:  MOVLB  1
06094:  MOVF   xAF,W
06096:  MOVWF  FE9
06098:  MOVF   xB0,W
0609A:  MOVWF  FEA
0609C:  MOVFF  FEF,1B1
060A0:  MOVLW  01
060A2:  ADDWF  xAF,W
060A4:  MOVWF  FE9
060A6:  MOVLW  00
060A8:  ADDWFC xB0,W
060AA:  MOVWF  FEA
060AC:  MOVF   FEF,W
060AE:  CLRF   xB9
060B0:  CLRF   xB8
060B2:  CLRF   xB7
060B4:  MOVWF  xB6
060B6:  MOVFF  1B6,1B9
060BA:  CLRF   xB6
060BC:  CLRF   xB7
060BE:  CLRF   xB8
060C0:  MOVLW  02
060C2:  ADDWF  xAF,W
060C4:  MOVWF  FE9
060C6:  MOVLW  00
060C8:  ADDWFC xB0,W
060CA:  MOVWF  FEA
060CC:  MOVF   FEF,W
060CE:  CLRF   xBE
060D0:  CLRF   xBD
060D2:  CLRF   xBC
060D4:  MOVWF  xBB
060D6:  MOVFF  1BC,03
060DA:  MOVFF  1BB,02
060DE:  CLRF   00
060E0:  CLRF   01
060E2:  MOVF   00,W
060E4:  IORWF  xB6,F
060E6:  MOVF   01,W
060E8:  IORWF  xB7,F
060EA:  MOVF   02,W
060EC:  IORWF  xB8,F
060EE:  MOVF   03,W
060F0:  IORWF  xB9,F
060F2:  MOVLW  03
060F4:  ADDWF  xAF,W
060F6:  MOVWF  FE9
060F8:  MOVLW  00
060FA:  ADDWFC xB0,W
060FC:  MOVWF  FEA
060FE:  MOVF   FEF,W
06100:  CLRF   xBE
06102:  CLRF   xBD
06104:  CLRF   xBC
06106:  MOVWF  xBB
06108:  MOVFF  1BD,03
0610C:  MOVFF  1BC,02
06110:  MOVFF  1BB,01
06114:  CLRF   00
06116:  MOVF   00,W
06118:  IORWF  xB6,F
0611A:  MOVF   01,W
0611C:  IORWF  xB7,F
0611E:  MOVF   02,W
06120:  IORWF  xB8,F
06122:  MOVF   03,W
06124:  IORWF  xB9,F
06126:  MOVLW  04
06128:  ADDWF  xAF,W
0612A:  MOVWF  FE9
0612C:  MOVLW  00
0612E:  ADDWFC xB0,W
06130:  MOVWF  FEA
06132:  MOVF   FEF,W
06134:  MOVWF  00
06136:  CLRF   01
06138:  CLRF   02
0613A:  CLRF   03
0613C:  MOVF   00,W
0613E:  IORWF  xB6,W
06140:  MOVWF  xB2
06142:  MOVF   01,W
06144:  IORWF  xB7,W
06146:  MOVWF  xB3
06148:  MOVF   02,W
0614A:  IORWF  xB8,W
0614C:  MOVWF  xB4
0614E:  MOVF   03,W
06150:  IORWF  xB9,W
06152:  MOVWF  xB5
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
06154:  MOVLW  60
06156:  MOVWF  FF6
06158:  MOVLW  1C
0615A:  MOVWF  FF7
0615C:  MOVLW  00
0615E:  MOVWF  FF8
06160:  MOVLW  16
06162:  MOVLB  9
06164:  MOVWF  xC2
06166:  MOVLB  0
06168:  CALL   2312
0616C:  MOVFF  1B5,9E8
06170:  MOVLW  37
06172:  MOVLB  9
06174:  MOVWF  xE9
06176:  MOVLB  0
06178:  CALL   2542
0617C:  MOVFF  1B4,9E8
06180:  MOVLW  37
06182:  MOVLB  9
06184:  MOVWF  xE9
06186:  MOVLB  0
06188:  CALL   2542
0618C:  MOVFF  1B3,9E8
06190:  MOVLW  37
06192:  MOVLB  9
06194:  MOVWF  xE9
06196:  MOVLB  0
06198:  CALL   2542
0619C:  MOVFF  1B2,9E8
061A0:  MOVLW  37
061A2:  MOVLB  9
061A4:  MOVWF  xE9
061A6:  MOVLB  0
061A8:  CALL   2542
061AC:  MOVLW  0D
061AE:  BTFSS  FA6.6
061B0:  GOTO   61AE
061B4:  MOVLB  E
061B6:  MOVWF  xF9
061B8:  MOVLW  0A
061BA:  MOVLB  0
061BC:  BTFSS  FA6.6
061BE:  GOTO   61BC
061C2:  MOVLB  E
061C4:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
061C6:  MOVFF  1B1,20F
061CA:  MOVLB  2
061CC:  CLRF   x10
061CE:  MOVLB  0
061D0:  CALL   50EA
....................    
....................    //subsector_64kByte_erase(mis_fm, subsector_address);
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
061D4:  MOVFF  1B1,20F
061D8:  MOVLB  2
061DA:  SETF   x10
061DC:  MOVLB  0
061DE:  CALL   50EA
....................    fprintf(PC, "End Flash Erase 64kByte Subsector\r\n");
061E2:  MOVLW  7E
061E4:  MOVWF  FF6
061E6:  MOVLW  1C
061E8:  MOVWF  FF7
061EA:  MOVLW  00
061EC:  MOVWF  FF8
061EE:  CALL   22DC
061F2:  GOTO   F7F8 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
*
063D6:  MOVLW  A2
063D8:  MOVWF  FF6
063DA:  MOVLW  1C
063DC:  MOVWF  FF7
063DE:  MOVLW  00
063E0:  MOVWF  FF8
063E2:  CALL   22DC
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
063E6:  MOVLB  1
063E8:  MOVF   xAF,W
063EA:  MOVWF  FE9
063EC:  MOVF   xB0,W
063EE:  MOVWF  FEA
063F0:  MOVFF  FEF,205
063F4:  MOVFF  205,20F
063F8:  MOVLB  2
063FA:  CLRF   x10
063FC:  MOVLB  0
063FE:  CALL   50EA
.................... 
....................    FLASH_WRITE_PARAM flash_write_param = {0};
06402:  MOVLB  1
06404:  CLRF   xB1
06406:  CLRF   xB2
06408:  CLRF   xB3
0640A:  CLRF   xB4
0640C:  CLRF   xB5
0640E:  CLRF   xB6
06410:  CLRF   xB7
....................    
....................    flash_write_param.id = parameter[0];
06412:  MOVF   xAF,W
06414:  MOVWF  FE9
06416:  MOVF   xB0,W
06418:  MOVWF  FEA
0641A:  MOVFF  FEF,1B1
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
0641E:  MOVLW  01
06420:  ADDWF  xAF,W
06422:  MOVWF  FE9
06424:  MOVLW  00
06426:  ADDWFC xB0,W
06428:  MOVWF  FEA
0642A:  MOVF   FEF,W
0642C:  MOVLB  2
0642E:  CLRF   x08
06430:  CLRF   x07
06432:  CLRF   x06
06434:  MOVWF  x05
06436:  MOVFF  205,208
0643A:  CLRF   x05
0643C:  CLRF   x06
0643E:  CLRF   x07
06440:  MOVLW  02
06442:  MOVLB  1
06444:  ADDWF  xAF,W
06446:  MOVWF  FE9
06448:  MOVLW  00
0644A:  ADDWFC xB0,W
0644C:  MOVWF  FEA
0644E:  MOVF   FEF,W
06450:  MOVLB  2
06452:  CLRF   x0D
06454:  CLRF   x0C
06456:  CLRF   x0B
06458:  MOVWF  x0A
0645A:  MOVFF  20B,03
0645E:  MOVFF  20A,02
06462:  CLRF   00
06464:  CLRF   01
06466:  MOVF   00,W
06468:  IORWF  x05,F
0646A:  MOVF   01,W
0646C:  IORWF  x06,F
0646E:  MOVF   02,W
06470:  IORWF  x07,F
06472:  MOVF   03,W
06474:  IORWF  x08,F
06476:  MOVLW  03
06478:  MOVLB  1
0647A:  ADDWF  xAF,W
0647C:  MOVWF  FE9
0647E:  MOVLW  00
06480:  ADDWFC xB0,W
06482:  MOVWF  FEA
06484:  MOVF   FEF,W
06486:  MOVLB  2
06488:  CLRF   x0D
0648A:  CLRF   x0C
0648C:  CLRF   x0B
0648E:  MOVWF  x0A
06490:  MOVFF  20C,03
06494:  MOVFF  20B,02
06498:  MOVFF  20A,01
0649C:  CLRF   00
0649E:  MOVF   00,W
064A0:  IORWF  x05,F
064A2:  MOVF   01,W
064A4:  IORWF  x06,F
064A6:  MOVF   02,W
064A8:  IORWF  x07,F
064AA:  MOVF   03,W
064AC:  IORWF  x08,F
064AE:  MOVLW  04
064B0:  MOVLB  1
064B2:  ADDWF  xAF,W
064B4:  MOVWF  FE9
064B6:  MOVLW  00
064B8:  ADDWFC xB0,W
064BA:  MOVWF  FEA
064BC:  MOVF   FEF,W
064BE:  MOVWF  00
064C0:  CLRF   01
064C2:  CLRF   02
064C4:  CLRF   03
064C6:  MOVF   00,W
064C8:  MOVLB  2
064CA:  IORWF  x05,W
064CC:  MOVLB  1
064CE:  MOVWF  xB2
064D0:  MOVF   01,W
064D2:  MOVLB  2
064D4:  IORWF  x06,W
064D6:  MOVLB  1
064D8:  MOVWF  xB3
064DA:  MOVF   02,W
064DC:  MOVLB  2
064DE:  IORWF  x07,W
064E0:  MOVLB  1
064E2:  MOVWF  xB4
064E4:  MOVF   03,W
064E6:  MOVLB  2
064E8:  IORWF  x08,W
064EA:  MOVLB  1
064EC:  MOVWF  xB5
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
064EE:  MOVLW  07
064F0:  ADDWF  xAF,W
064F2:  MOVWF  FE9
064F4:  MOVLW  00
064F6:  ADDWFC xB0,W
064F8:  MOVWF  FEA
064FA:  MOVF   FEF,W
064FC:  MOVLB  2
064FE:  CLRF   x06
06500:  MOVWF  x05
06502:  MOVFF  205,206
06506:  CLRF   x05
06508:  MOVLW  08
0650A:  MOVLB  1
0650C:  ADDWF  xAF,W
0650E:  MOVWF  FE9
06510:  MOVLW  00
06512:  ADDWFC xB0,W
06514:  MOVWF  FEA
06516:  MOVF   FEF,W
06518:  CLRF   03
0651A:  MOVLB  2
0651C:  IORWF  x05,W
0651E:  MOVLB  1
06520:  MOVWF  xB6
06522:  MOVF   03,W
06524:  MOVLB  2
06526:  IORWF  x06,W
06528:  MOVLB  1
0652A:  MOVWF  xB7
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
0652C:  MOVLW  BC
0652E:  MOVWF  FF6
06530:  MOVLW  1C
06532:  MOVWF  FF7
06534:  MOVLW  00
06536:  MOVWF  FF8
06538:  MOVLW  0C
0653A:  MOVLB  9
0653C:  MOVWF  xC2
0653E:  MOVLB  0
06540:  CALL   2312
06544:  MOVFF  1B1,9E8
06548:  MOVLW  37
0654A:  MOVLB  9
0654C:  MOVWF  xE9
0654E:  MOVLB  0
06550:  CALL   2542
06554:  MOVLW  0D
06556:  BTFSS  FA6.6
06558:  GOTO   6556
0655C:  MOVLB  E
0655E:  MOVWF  xF9
06560:  MOVLW  0A
06562:  MOVLB  0
06564:  BTFSS  FA6.6
06566:  GOTO   6564
0656A:  MOVLB  E
0656C:  MOVWF  xF9
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
0656E:  MOVLW  D0
06570:  MOVWF  FF6
06572:  MOVLW  1C
06574:  MOVWF  FF7
06576:  MOVLW  00
06578:  MOVWF  FF8
0657A:  MOVLW  0E
0657C:  MOVLB  9
0657E:  MOVWF  xC2
06580:  MOVLB  0
06582:  CALL   2312
06586:  MOVFF  1B5,9E8
0658A:  MOVLW  37
0658C:  MOVLB  9
0658E:  MOVWF  xE9
06590:  MOVLB  0
06592:  CALL   2542
06596:  MOVFF  1B4,9E8
0659A:  MOVLW  37
0659C:  MOVLB  9
0659E:  MOVWF  xE9
065A0:  MOVLB  0
065A2:  CALL   2542
065A6:  MOVFF  1B3,9E8
065AA:  MOVLW  37
065AC:  MOVLB  9
065AE:  MOVWF  xE9
065B0:  MOVLB  0
065B2:  CALL   2542
065B6:  MOVFF  1B2,9E8
065BA:  MOVLW  37
065BC:  MOVLB  9
065BE:  MOVWF  xE9
065C0:  MOVLB  0
065C2:  CALL   2542
065C6:  MOVLW  0D
065C8:  BTFSS  FA6.6
065CA:  GOTO   65C8
065CE:  MOVLB  E
065D0:  MOVWF  xF9
065D2:  MOVLW  0A
065D4:  MOVLB  0
065D6:  BTFSS  FA6.6
065D8:  GOTO   65D6
065DC:  MOVLB  E
065DE:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
065E0:  MOVLW  E6
065E2:  MOVWF  FF6
065E4:  MOVLW  1C
065E6:  MOVWF  FF7
065E8:  MOVLW  00
065EA:  MOVWF  FF8
065EC:  MOVLW  0E
065EE:  MOVLB  9
065F0:  MOVWF  xC2
065F2:  MOVLB  0
065F4:  CALL   2312
065F8:  MOVFF  1B7,9E8
065FC:  MOVLW  37
065FE:  MOVLB  9
06600:  MOVWF  xE9
06602:  MOVLB  0
06604:  CALL   2542
06608:  MOVFF  1B6,9E8
0660C:  MOVLW  37
0660E:  MOVLB  9
06610:  MOVWF  xE9
06612:  MOVLB  0
06614:  CALL   2542
06618:  MOVLW  0D
0661A:  BTFSS  FA6.6
0661C:  GOTO   661A
06620:  MOVLB  E
06622:  MOVWF  xF9
06624:  MOVLW  0A
06626:  MOVLB  0
06628:  BTFSS  FA6.6
0662A:  GOTO   6628
0662E:  MOVLB  E
06630:  MOVWF  xF9
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
06632:  MOVFF  1B1,20F
06636:  MOVLB  2
06638:  CLRF   x10
0663A:  MOVLB  0
0663C:  CALL   50EA
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
06640:  MOVLW  FC
06642:  MOVWF  FF6
06644:  MOVLW  1C
06646:  MOVWF  FF7
06648:  MOVLW  00
0664A:  MOVWF  FF8
0664C:  CALL   22DC
....................    for (p = 0; p < flash_write_param.packetnum; p++)
06650:  MOVLB  1
06652:  CLRF   xF9
06654:  CLRF   xF8
06656:  MOVLB  0
06658:  MOVLB  1
0665A:  MOVF   xF9,W
0665C:  SUBWF  xB7,W
0665E:  BTFSC  FD8.0
06660:  BRA    6668
06662:  MOVLB  0
06664:  GOTO   69E2
06668:  MOVLB  0
0666A:  BTFSS  FD8.2
0666C:  GOTO   6682
06670:  MOVLB  1
06672:  MOVF   xB6,W
06674:  SUBWF  xF8,W
06676:  BTFSS  FD8.0
06678:  BRA    6680
0667A:  MOVLB  0
0667C:  GOTO   69E2
06680:  MOVLB  0
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
06682:  MOVLB  1
06684:  RLCF   xF8,W
06686:  MOVWF  xFA
06688:  RLCF   xF9,W
0668A:  MOVWF  xFB
0668C:  RLCF   xFA,F
0668E:  RLCF   xFB,F
06690:  RLCF   xFA,F
06692:  RLCF   xFB,F
06694:  RLCF   xFA,F
06696:  RLCF   xFB,F
06698:  RLCF   xFA,F
0669A:  RLCF   xFB,F
0669C:  RLCF   xFA,F
0669E:  RLCF   xFB,F
066A0:  MOVLW  C0
066A2:  ANDWF  xFA,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
066A4:  CLRF   xFC
066A6:  MOVLB  0
066A8:  MOVLB  1
066AA:  MOVF   xFC,W
066AC:  SUBLW  3F
066AE:  BTFSC  FD8.0
066B0:  BRA    66B8
066B2:  MOVLB  0
066B4:  GOTO   6722
066B8:  MOVLB  0
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
066BA:  CLRF   03
066BC:  MOVLB  1
066BE:  MOVF   xFC,W
066C0:  ADDLW  B8
066C2:  MOVWF  FE9
066C4:  MOVLW  01
066C6:  ADDWFC 03,W
066C8:  MOVWF  FEA
066CA:  MOVF   xFC,W
066CC:  ADDWF  xFA,W
066CE:  MOVLB  2
066D0:  MOVWF  x07
066D2:  MOVLW  00
066D4:  MOVLB  1
066D6:  ADDWFC xFB,W
066D8:  MOVLB  2
066DA:  MOVWF  x08
066DC:  MOVF   x07,W
066DE:  MOVWF  00
066E0:  CLRF   03
066E2:  MOVF   00,W
066E4:  MOVWF  FEF
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
066E6:  CLRF   03
066E8:  MOVLB  1
066EA:  MOVF   xFC,W
066EC:  ADDLW  B8
066EE:  MOVWF  FE9
066F0:  MOVLW  01
066F2:  ADDWFC 03,W
066F4:  MOVWF  FEA
066F6:  MOVFF  FEF,205
066FA:  MOVFF  205,9E8
066FE:  MOVLW  37
06700:  MOVLB  9
06702:  MOVWF  xE9
06704:  MOVLB  0
06706:  CALL   2542
0670A:  MOVLW  20
0670C:  BTFSS  FA6.6
0670E:  GOTO   670C
06712:  MOVLB  E
06714:  MOVWF  xF9
06716:  MOVLB  0
06718:  MOVLB  1
0671A:  INCF   xFC,F
0671C:  MOVLB  0
0671E:  GOTO   66A8
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
06722:  MOVLB  1
06724:  RLCF   xF8,W
06726:  MOVWF  02
06728:  RLCF   xF9,W
0672A:  MOVWF  03
0672C:  RLCF   02,F
0672E:  RLCF   03,F
06730:  RLCF   02,F
06732:  RLCF   03,F
06734:  RLCF   02,F
06736:  RLCF   03,F
06738:  RLCF   02,F
0673A:  RLCF   03,F
0673C:  RLCF   02,F
0673E:  RLCF   03,F
06740:  MOVLW  C0
06742:  ANDWF  02,F
06744:  MOVF   02,W
06746:  ADDWF  xB2,W
06748:  MOVWF  xFD
0674A:  MOVF   03,W
0674C:  ADDWFC xB3,W
0674E:  MOVWF  xFE
06750:  MOVLW  00
06752:  ADDWFC xB4,W
06754:  MOVWF  xFF
06756:  MOVLW  00
06758:  ADDWFC xB5,W
0675A:  MOVLB  2
0675C:  MOVWF  x00
....................       // FLASH 終端チェック (MISF_END は最終アドレス想定: inclusive)
....................       if(current_address > MISF_END){
0675E:  MOVF   x00,F
06760:  BTFSC  FD8.2
06762:  BRA    676A
06764:  MOVLB  0
06766:  GOTO   6798
0676A:  MOVLB  0
0676C:  MOVLB  1
0676E:  MOVF   xFF,W
06770:  SUBLW  BB
06772:  BTFSS  FD8.0
06774:  BRA    677C
06776:  MOVLB  0
06778:  GOTO   686E
0677C:  MOVLB  0
0677E:  XORLW  FF
06780:  BTFSS  FD8.2
06782:  GOTO   6798
06786:  MOVLB  1
06788:  MOVF   xFE,W
0678A:  SUBLW  0F
0678C:  BTFSS  FD8.0
0678E:  BRA    6796
06790:  MOVLB  0
06792:  GOTO   686E
06796:  MOVLB  0
....................          fprintf(PC, "\r\n[FLASH] Write address 0x%08LX exceeds device end 0x%08LX -> abort\r\n", current_address, (unsigned int32)MISF_END);
06798:  MOVLW  0A
0679A:  MOVWF  FF6
0679C:  MOVLW  1D
0679E:  MOVWF  FF7
067A0:  MOVLW  00
067A2:  MOVWF  FF8
067A4:  MOVLW  1A
067A6:  MOVLB  9
067A8:  MOVWF  xC2
067AA:  MOVLB  0
067AC:  CALL   2312
067B0:  MOVFF  200,9E8
067B4:  MOVLW  37
067B6:  MOVLB  9
067B8:  MOVWF  xE9
067BA:  MOVLB  0
067BC:  CALL   2542
067C0:  MOVFF  1FF,9E8
067C4:  MOVLW  37
067C6:  MOVLB  9
067C8:  MOVWF  xE9
067CA:  MOVLB  0
067CC:  CALL   2542
067D0:  MOVFF  1FE,9E8
067D4:  MOVLW  37
067D6:  MOVLB  9
067D8:  MOVWF  xE9
067DA:  MOVLB  0
067DC:  CALL   2542
067E0:  MOVFF  1FD,9E8
067E4:  MOVLW  37
067E6:  MOVLB  9
067E8:  MOVWF  xE9
067EA:  MOVLB  0
067EC:  CALL   2542
067F0:  MOVLW  29
067F2:  MOVWF  FF6
067F4:  MOVLW  1D
067F6:  MOVWF  FF7
067F8:  MOVLW  00
067FA:  MOVWF  FF8
067FC:  MOVLW  16
067FE:  MOVLB  9
06800:  MOVWF  xC2
06802:  MOVLB  0
06804:  CALL   2312
06808:  MOVLB  9
0680A:  CLRF   xE8
0680C:  MOVLW  37
0680E:  MOVWF  xE9
06810:  MOVLB  0
06812:  CALL   2542
06816:  MOVLW  BC
06818:  MOVLB  9
0681A:  MOVWF  xE8
0681C:  MOVLW  37
0681E:  MOVWF  xE9
06820:  MOVLB  0
06822:  CALL   2542
06826:  MOVLW  0F
06828:  MOVLB  9
0682A:  MOVWF  xE8
0682C:  MOVLW  37
0682E:  MOVWF  xE9
06830:  MOVLB  0
06832:  CALL   2542
06836:  MOVLB  9
06838:  SETF   xE8
0683A:  MOVLW  37
0683C:  MOVWF  xE9
0683E:  MOVLB  0
06840:  CALL   2542
06844:  MOVLW  44
06846:  MOVWF  FF6
06848:  MOVLW  1D
0684A:  MOVWF  FF7
0684C:  MOVLW  00
0684E:  MOVWF  FF8
06850:  MOVLW  0B
06852:  MOVLB  9
06854:  MOVWF  xC2
06856:  MOVLB  0
06858:  CALL   2312
....................          piclog_make(flash_write_param.id, PICLOG_PARAM_END);
0685C:  MOVFF  1B1,20F
06860:  MOVLB  2
06862:  SETF   x10
06864:  MOVLB  0
06866:  CALL   50EA
....................          break;
0686A:  GOTO   69E2
....................       }
....................       if(current_address + (PACKET_SIZE - 1) > MISF_END){
0686E:  MOVLW  3F
06870:  MOVLB  1
06872:  ADDWF  xFD,W
06874:  MOVLB  2
06876:  MOVWF  x05
06878:  MOVLW  00
0687A:  MOVLB  1
0687C:  ADDWFC xFE,W
0687E:  MOVLB  2
06880:  MOVWF  x06
06882:  MOVLW  00
06884:  MOVLB  1
06886:  ADDWFC xFF,W
06888:  MOVLB  2
0688A:  MOVWF  x07
0688C:  MOVLW  00
0688E:  ADDWFC x00,W
06890:  MOVWF  x08
06892:  MOVF   x08,F
06894:  BTFSC  FD8.2
06896:  BRA    689E
06898:  MOVLB  0
0689A:  GOTO   68CC
0689E:  MOVLB  0
068A0:  MOVLB  2
068A2:  MOVF   x07,W
068A4:  SUBLW  BB
068A6:  BTFSS  FD8.0
068A8:  BRA    68B0
068AA:  MOVLB  0
068AC:  GOTO   699E
068B0:  MOVLB  0
068B2:  XORLW  FF
068B4:  BTFSS  FD8.2
068B6:  GOTO   68CC
068BA:  MOVLB  2
068BC:  MOVF   x06,W
068BE:  SUBLW  0F
068C0:  BTFSS  FD8.0
068C2:  BRA    68CA
068C4:  MOVLB  0
068C6:  GOTO   699E
068CA:  MOVLB  0
....................          unsigned int32 remain = (MISF_END - current_address) + 1; // 書込可能残り
068CC:  MOVLW  FF
068CE:  BSF    FD8.0
068D0:  MOVLB  1
068D2:  SUBFWB xFD,W
068D4:  MOVLB  2
068D6:  MOVWF  x05
068D8:  MOVLW  0F
068DA:  MOVLB  1
068DC:  SUBFWB xFE,W
068DE:  MOVLB  2
068E0:  MOVWF  x06
068E2:  MOVLW  BC
068E4:  MOVLB  1
068E6:  SUBFWB xFF,W
068E8:  MOVLB  2
068EA:  MOVWF  x07
068EC:  MOVLW  00
068EE:  SUBFWB x00,W
068F0:  MOVWF  x08
068F2:  MOVLW  01
068F4:  ADDWF  x05,W
068F6:  MOVWF  x01
068F8:  MOVLW  00
068FA:  ADDWFC x06,W
068FC:  MOVWF  x02
068FE:  MOVLW  00
06900:  ADDWFC x07,W
06902:  MOVWF  x03
06904:  MOVLW  00
06906:  ADDWFC x08,W
06908:  MOVWF  x04
0690A:  MOVLB  0
....................          fprintf(PC, "\r\n[FLASH] Reached end. Partial write %lu bytes (packet truncated).\r\n", remain);
0690C:  MOVLW  50
0690E:  MOVWF  FF6
06910:  MOVLW  1D
06912:  MOVWF  FF7
06914:  MOVLW  00
06916:  MOVWF  FF8
06918:  MOVLW  25
0691A:  MOVLB  9
0691C:  MOVWF  xC2
0691E:  MOVLB  0
06920:  CALL   2312
06924:  MOVLW  41
06926:  MOVWF  FE9
06928:  MOVFF  204,209
0692C:  MOVFF  203,208
06930:  MOVFF  202,207
06934:  MOVFF  201,206
06938:  CALL   62D0
0693C:  MOVLW  78
0693E:  MOVWF  FF6
06940:  MOVLW  1D
06942:  MOVWF  FF7
06944:  MOVLW  00
06946:  MOVWF  FF8
06948:  MOVLW  1C
0694A:  MOVLB  9
0694C:  MOVWF  xC2
0694E:  MOVLB  0
06950:  CALL   2312
....................          write_data_bytes(mis_fm, current_address, writedata, (unsigned int16)remain);
06954:  MOVFF  115,AED
06958:  MOVFF  114,AEC
0695C:  MOVFF  113,AEB
06960:  MOVFF  112,AEA
06964:  MOVFF  200,AF1
06968:  MOVFF  1FF,AF0
0696C:  MOVFF  1FE,AEF
06970:  MOVFF  1FD,AEE
06974:  MOVLW  01
06976:  MOVLB  A
06978:  MOVWF  xF3
0697A:  MOVLW  B8
0697C:  MOVWF  xF2
0697E:  MOVFF  202,AF5
06982:  MOVFF  201,AF4
06986:  MOVLB  0
06988:  CALL   3F34
....................          piclog_make(flash_write_param.id, PICLOG_PARAM_END);
0698C:  MOVFF  1B1,20F
06990:  MOVLB  2
06992:  SETF   x10
06994:  MOVLB  0
06996:  CALL   50EA
....................          break;
0699A:  GOTO   69E2
....................       }
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
0699E:  MOVFF  115,AED
069A2:  MOVFF  114,AEC
069A6:  MOVFF  113,AEB
069AA:  MOVFF  112,AEA
069AE:  MOVFF  200,AF1
069B2:  MOVFF  1FF,AF0
069B6:  MOVFF  1FE,AEF
069BA:  MOVFF  1FD,AEE
069BE:  MOVLW  01
069C0:  MOVLB  A
069C2:  MOVWF  xF3
069C4:  MOVLW  B8
069C6:  MOVWF  xF2
069C8:  CLRF   xF5
069CA:  MOVLW  40
069CC:  MOVWF  xF4
069CE:  MOVLB  0
069D0:  CALL   3F34
069D4:  MOVLB  1
069D6:  INCF   xF8,F
069D8:  BTFSC  FD8.2
069DA:  INCF   xF9,F
069DC:  MOVLB  0
069DE:  GOTO   6658
....................    }
.................... 
....................    piclog_make(flash_write_param.id, PICLOG_PARAM_END); // Log the end of the command execution
069E2:  MOVFF  1B1,20F
069E6:  MOVLB  2
069E8:  SETF   x10
069EA:  MOVLB  0
069EC:  CALL   50EA
....................    fprintf(PC, "\r\n");
069F0:  MOVLW  0D
069F2:  BTFSS  FA6.6
069F4:  GOTO   69F2
069F8:  MOVLB  E
069FA:  MOVWF  xF9
069FC:  MOVLW  0A
069FE:  MOVLB  0
06A00:  BTFSS  FA6.6
06A02:  GOTO   6A00
06A06:  MOVLB  E
06A08:  MOVWF  xF9
....................    fprintf(PC, "End Flash Write Demo\r\n");
06A0A:  MOVLW  96
06A0C:  MOVWF  FF6
06A0E:  MOVLW  1D
06A10:  MOVWF  FF7
06A12:  MOVLW  00
06A14:  MOVWF  FF8
06A16:  MOVLB  0
06A18:  CALL   22DC
06A1C:  GOTO   F808 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
*
06A50:  MOVLW  AE
06A52:  MOVWF  FF6
06A54:  MOVLW  1D
06A56:  MOVWF  FF7
06A58:  MOVLW  00
06A5A:  MOVWF  FF8
06A5C:  CALL   22DC
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
06A60:  MOVLB  1
06A62:  MOVF   xAF,W
06A64:  MOVWF  FE9
06A66:  MOVF   xB0,W
06A68:  MOVWF  FEA
06A6A:  MOVFF  FEF,1B5
06A6E:  MOVFF  1B5,20F
06A72:  MOVLB  2
06A74:  CLRF   x10
06A76:  MOVLB  0
06A78:  CALL   50EA
....................    flash_setting(mis_fm);
06A7C:  MOVFF  115,2BD
06A80:  MOVFF  114,2BC
06A84:  MOVFF  113,2BB
06A88:  MOVFF  112,2BA
06A8C:  CALL   6A20
....................    unsigned int32 write_address = 0x00000000;
06A90:  MOVLB  1
06A92:  CLRF   xB4
06A94:  CLRF   xB3
06A96:  CLRF   xB2
06A98:  CLRF   xB1
....................    //int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
....................    //write_data_bytes(mis_fm, write_address, write_data, 256);
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06A9A:  MOVF   xAF,W
06A9C:  MOVWF  FE9
06A9E:  MOVF   xB0,W
06AA0:  MOVWF  FEA
06AA2:  MOVFF  FEF,1B5
06AA6:  MOVFF  1B5,20F
06AAA:  MOVLB  2
06AAC:  SETF   x10
06AAE:  MOVLB  0
06AB0:  CALL   50EA
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
06AB4:  MOVLW  D4
06AB6:  MOVWF  FF6
06AB8:  MOVLW  1D
06ABA:  MOVWF  FF7
06ABC:  MOVLW  00
06ABE:  MOVWF  FF8
06AC0:  CALL   22DC
06AC4:  GOTO   F818 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
06AC8:  MOVLW  F8
06ACA:  MOVWF  FF6
06ACC:  MOVLW  1D
06ACE:  MOVWF  FF7
06AD0:  MOVLW  00
06AD2:  MOVWF  FF8
06AD4:  CALL   22DC
.................... 
.................... 
....................    FLASH_PARAM flash_param = {0};
06AD8:  MOVLB  1
06ADA:  CLRF   xB1
06ADC:  CLRF   xB2
06ADE:  CLRF   xB3
06AE0:  CLRF   xB4
06AE2:  CLRF   xB5
06AE4:  CLRF   xB6
06AE6:  CLRF   xB7
....................    flash_param.id = uplinkcmd_ptr[0];
06AE8:  MOVF   xAF,W
06AEA:  MOVWF  FE9
06AEC:  MOVF   xB0,W
06AEE:  MOVWF  FEA
06AF0:  MOVFF  FEF,1B1
....................    flash_param.readaddress = -
....................       ((unsigned int32)uplinkcmd_ptr[1] << 24) |
....................       ((unsigned int32)uplinkcmd_ptr[2] << 16) |
....................       ((unsigned int32)uplinkcmd_ptr[3] << 8)  |
....................       ((unsigned int32)uplinkcmd_ptr[4]);
06AF4:  MOVLW  01
06AF6:  ADDWF  xAF,W
06AF8:  MOVWF  FE9
06AFA:  MOVLW  00
06AFC:  ADDWFC xB0,W
06AFE:  MOVWF  FEA
06B00:  MOVF   FEF,W
06B02:  MOVLB  2
06B04:  CLRF   x09
06B06:  CLRF   x08
06B08:  CLRF   x07
06B0A:  MOVWF  x06
06B0C:  MOVFF  206,03
06B10:  CLRF   00
06B12:  CLRF   01
06B14:  CLRF   02
06B16:  MOVLW  00
06B18:  BSF    FD8.0
06B1A:  SUBFWB 00,W
06B1C:  MOVWF  x06
06B1E:  MOVLW  00
06B20:  SUBFWB 01,W
06B22:  MOVWF  x07
06B24:  MOVLW  00
06B26:  SUBFWB 02,W
06B28:  MOVWF  x08
06B2A:  MOVLW  00
06B2C:  SUBFWB 03,W
06B2E:  MOVWF  x09
06B30:  MOVLW  02
06B32:  MOVLB  1
06B34:  ADDWF  xAF,W
06B36:  MOVWF  FE9
06B38:  MOVLW  00
06B3A:  ADDWFC xB0,W
06B3C:  MOVWF  FEA
06B3E:  MOVF   FEF,W
06B40:  MOVLB  2
06B42:  CLRF   x0E
06B44:  CLRF   x0D
06B46:  CLRF   x0C
06B48:  MOVWF  x0B
06B4A:  MOVFF  20C,03
06B4E:  MOVFF  20B,02
06B52:  CLRF   00
06B54:  CLRF   01
06B56:  MOVF   00,W
06B58:  IORWF  x06,F
06B5A:  MOVF   01,W
06B5C:  IORWF  x07,F
06B5E:  MOVF   02,W
06B60:  IORWF  x08,F
06B62:  MOVF   03,W
06B64:  IORWF  x09,F
06B66:  MOVLW  03
06B68:  MOVLB  1
06B6A:  ADDWF  xAF,W
06B6C:  MOVWF  FE9
06B6E:  MOVLW  00
06B70:  ADDWFC xB0,W
06B72:  MOVWF  FEA
06B74:  MOVF   FEF,W
06B76:  MOVLB  2
06B78:  CLRF   x0E
06B7A:  CLRF   x0D
06B7C:  CLRF   x0C
06B7E:  MOVWF  x0B
06B80:  MOVFF  20D,03
06B84:  MOVFF  20C,02
06B88:  MOVFF  20B,01
06B8C:  CLRF   00
06B8E:  MOVF   00,W
06B90:  IORWF  x06,F
06B92:  MOVF   01,W
06B94:  IORWF  x07,F
06B96:  MOVF   02,W
06B98:  IORWF  x08,F
06B9A:  MOVF   03,W
06B9C:  IORWF  x09,F
06B9E:  MOVLW  04
06BA0:  MOVLB  1
06BA2:  ADDWF  xAF,W
06BA4:  MOVWF  FE9
06BA6:  MOVLW  00
06BA8:  ADDWFC xB0,W
06BAA:  MOVWF  FEA
06BAC:  MOVF   FEF,W
06BAE:  MOVWF  00
06BB0:  CLRF   01
06BB2:  CLRF   02
06BB4:  CLRF   03
06BB6:  MOVF   00,W
06BB8:  MOVLB  2
06BBA:  IORWF  x06,W
06BBC:  MOVLB  1
06BBE:  MOVWF  xB4
06BC0:  MOVF   01,W
06BC2:  MOVLB  2
06BC4:  IORWF  x07,W
06BC6:  MOVLB  1
06BC8:  MOVWF  xB5
06BCA:  MOVF   02,W
06BCC:  MOVLB  2
06BCE:  IORWF  x08,W
06BD0:  MOVLB  1
06BD2:  MOVWF  xB6
06BD4:  MOVF   03,W
06BD6:  MOVLB  2
06BD8:  IORWF  x09,W
06BDA:  MOVLB  1
06BDC:  MOVWF  xB7
....................    flash_param.readpacketnum = 
....................       ((unsigned int16)uplinkcmd_ptr[6] << 8) |
....................       ((unsigned int16)uplinkcmd_ptr[7]);
06BDE:  MOVLW  06
06BE0:  ADDWF  xAF,W
06BE2:  MOVWF  FE9
06BE4:  MOVLW  00
06BE6:  ADDWFC xB0,W
06BE8:  MOVWF  FEA
06BEA:  MOVF   FEF,W
06BEC:  MOVLB  2
06BEE:  CLRF   x07
06BF0:  MOVWF  x06
06BF2:  MOVFF  206,207
06BF6:  CLRF   x06
06BF8:  MOVLW  07
06BFA:  MOVLB  1
06BFC:  ADDWF  xAF,W
06BFE:  MOVWF  FE9
06C00:  MOVLW  00
06C02:  ADDWFC xB0,W
06C04:  MOVWF  FEA
06C06:  MOVF   FEF,W
06C08:  CLRF   03
06C0A:  MOVLB  2
06C0C:  IORWF  x06,W
06C0E:  MOVLB  1
06C10:  MOVWF  xB2
06C12:  MOVF   03,W
06C14:  MOVLB  2
06C16:  IORWF  x07,W
06C18:  MOVLB  1
06C1A:  MOVWF  xB3
....................       piclog_make(flash_param.id, PICLOG_PARAM_START); // Log the command execution
06C1C:  MOVFF  1B1,20F
06C20:  MOVLB  2
06C22:  CLRF   x10
06C24:  MOVLB  0
06C26:  CALL   50EA
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
06C2A:  MOVLW  0C
06C2C:  MOVWF  FF6
06C2E:  MOVLW  1E
06C30:  MOVWF  FF7
06C32:  MOVLW  00
06C34:  MOVWF  FF8
06C36:  MOVLW  0C
06C38:  MOVLB  9
06C3A:  MOVWF  xC2
06C3C:  MOVLB  0
06C3E:  CALL   2312
06C42:  MOVFF  1B1,9E8
06C46:  MOVLW  37
06C48:  MOVLB  9
06C4A:  MOVWF  xE9
06C4C:  MOVLB  0
06C4E:  CALL   2542
06C52:  MOVLW  0D
06C54:  BTFSS  FA6.6
06C56:  GOTO   6C54
06C5A:  MOVLB  E
06C5C:  MOVWF  xF9
06C5E:  MOVLW  0A
06C60:  MOVLB  0
06C62:  BTFSS  FA6.6
06C64:  GOTO   6C62
06C68:  MOVLB  E
06C6A:  MOVWF  xF9
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
06C6C:  MOVLW  20
06C6E:  MOVWF  FF6
06C70:  MOVLW  1E
06C72:  MOVWF  FF7
06C74:  MOVLW  00
06C76:  MOVWF  FF8
06C78:  MOVLW  0E
06C7A:  MOVLB  9
06C7C:  MOVWF  xC2
06C7E:  MOVLB  0
06C80:  CALL   2312
06C84:  MOVFF  1B7,9E8
06C88:  MOVLW  37
06C8A:  MOVLB  9
06C8C:  MOVWF  xE9
06C8E:  MOVLB  0
06C90:  CALL   2542
06C94:  MOVFF  1B6,9E8
06C98:  MOVLW  37
06C9A:  MOVLB  9
06C9C:  MOVWF  xE9
06C9E:  MOVLB  0
06CA0:  CALL   2542
06CA4:  MOVFF  1B5,9E8
06CA8:  MOVLW  37
06CAA:  MOVLB  9
06CAC:  MOVWF  xE9
06CAE:  MOVLB  0
06CB0:  CALL   2542
06CB4:  MOVFF  1B4,9E8
06CB8:  MOVLW  37
06CBA:  MOVLB  9
06CBC:  MOVWF  xE9
06CBE:  MOVLB  0
06CC0:  CALL   2542
06CC4:  MOVLW  0D
06CC6:  BTFSS  FA6.6
06CC8:  GOTO   6CC6
06CCC:  MOVLB  E
06CCE:  MOVWF  xF9
06CD0:  MOVLW  0A
06CD2:  MOVLB  0
06CD4:  BTFSS  FA6.6
06CD6:  GOTO   6CD4
06CDA:  MOVLB  E
06CDC:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
06CDE:  MOVLW  36
06CE0:  MOVWF  FF6
06CE2:  MOVLW  1E
06CE4:  MOVWF  FF7
06CE6:  MOVLW  00
06CE8:  MOVWF  FF8
06CEA:  MOVLW  0E
06CEC:  MOVLB  9
06CEE:  MOVWF  xC2
06CF0:  MOVLB  0
06CF2:  CALL   2312
06CF6:  MOVFF  1B3,9E8
06CFA:  MOVLW  37
06CFC:  MOVLB  9
06CFE:  MOVWF  xE9
06D00:  MOVLB  0
06D02:  CALL   2542
06D06:  MOVFF  1B2,9E8
06D0A:  MOVLW  37
06D0C:  MOVLB  9
06D0E:  MOVWF  xE9
06D10:  MOVLB  0
06D12:  CALL   2542
06D16:  MOVLW  0D
06D18:  BTFSS  FA6.6
06D1A:  GOTO   6D18
06D1E:  MOVLB  E
06D20:  MOVWF  xF9
06D22:  MOVLW  0A
06D24:  MOVLB  0
06D26:  BTFSS  FA6.6
06D28:  GOTO   6D26
06D2C:  MOVLB  E
06D2E:  MOVWF  xF9
....................    
....................    piclog_make(flash_param.id, 0x00);
06D30:  MOVFF  1B1,20F
06D34:  MOVLB  2
06D36:  CLRF   x10
06D38:  MOVLB  0
06D3A:  CALL   50EA
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
06D3E:  MOVLB  1
06D40:  CLRF   xB8
06D42:  CLRF   xB9
06D44:  CLRF   xBA
06D46:  CLRF   xBB
06D48:  CLRF   xBC
06D4A:  CLRF   xBD
06D4C:  CLRF   xBE
06D4E:  CLRF   xBF
06D50:  CLRF   xC0
06D52:  CLRF   xC1
06D54:  CLRF   xC2
06D56:  CLRF   xC3
06D58:  CLRF   xC4
06D5A:  CLRF   xC5
06D5C:  CLRF   xC6
06D5E:  CLRF   xC7
06D60:  CLRF   xC8
06D62:  CLRF   xC9
06D64:  CLRF   xCA
06D66:  CLRF   xCB
06D68:  CLRF   xCC
06D6A:  CLRF   xCD
06D6C:  CLRF   xCE
06D6E:  CLRF   xCF
06D70:  CLRF   xD0
06D72:  CLRF   xD1
06D74:  CLRF   xD2
06D76:  CLRF   xD3
06D78:  CLRF   xD4
06D7A:  CLRF   xD5
06D7C:  CLRF   xD6
06D7E:  CLRF   xD7
06D80:  CLRF   xD8
06D82:  CLRF   xD9
06D84:  CLRF   xDA
06D86:  CLRF   xDB
06D88:  CLRF   xDC
06D8A:  CLRF   xDD
06D8C:  CLRF   xDE
06D8E:  CLRF   xDF
06D90:  CLRF   xE0
06D92:  CLRF   xE1
06D94:  CLRF   xE2
06D96:  CLRF   xE3
06D98:  CLRF   xE4
06D9A:  CLRF   xE5
06D9C:  CLRF   xE6
06D9E:  CLRF   xE7
06DA0:  CLRF   xE8
06DA2:  CLRF   xE9
06DA4:  CLRF   xEA
06DA6:  CLRF   xEB
06DA8:  CLRF   xEC
06DAA:  CLRF   xED
06DAC:  CLRF   xEE
06DAE:  CLRF   xEF
06DB0:  CLRF   xF0
06DB2:  CLRF   xF1
06DB4:  CLRF   xF2
06DB6:  CLRF   xF3
06DB8:  CLRF   xF4
06DBA:  CLRF   xF5
06DBC:  CLRF   xF6
06DBE:  CLRF   xF7
....................    unsigned int32 read_address;
....................    fprintf(PC, "ADDRESS  :\r\n");
06DC0:  MOVLW  4C
06DC2:  MOVWF  FF6
06DC4:  MOVLW  1E
06DC6:  MOVWF  FF7
06DC8:  MOVLW  00
06DCA:  MOVWF  FF8
06DCC:  MOVLB  0
06DCE:  CALL   22DC
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
06DD2:  MOVFF  115,253
06DD6:  MOVFF  114,252
06DDA:  MOVFF  113,251
06DDE:  MOVFF  112,250
06DE2:  CALL   2E02
06DE6:  MOVF   01,F
06DE8:  BTFSS  FD8.2
06DEA:  GOTO   6E10
....................       fprintf(PC, "Mission Flash is not connected\r\n");
06DEE:  MOVLW  5A
06DF0:  MOVWF  FF6
06DF2:  MOVLW  1E
06DF4:  MOVWF  FF7
06DF6:  MOVLW  00
06DF8:  MOVWF  FF8
06DFA:  CALL   22DC
....................       piclog_make(flash_param.id, PICLOG_PARAM_END);
06DFE:  MOVFF  1B1,20F
06E02:  MOVLB  2
06E04:  SETF   x10
06E06:  MOVLB  0
06E08:  CALL   50EA
....................       return; // FIX: 接続失敗時終了
06E0C:  GOTO   72C8
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
06E10:  MOVLB  1
06E12:  CLRF   xFF
06E14:  CLRF   xFE
06E16:  CLRF   xFD
06E18:  CLRF   xFC
06E1A:  MOVLB  0
06E1C:  MOVLB  1
06E1E:  MOVF   xFF,F
06E20:  BTFSC  FD8.2
06E22:  BRA    6E2A
06E24:  MOVLB  0
06E26:  GOTO   72AA
06E2A:  MOVLB  0
06E2C:  MOVLB  1
06E2E:  MOVF   xFE,F
06E30:  BTFSC  FD8.2
06E32:  BRA    6E3A
06E34:  MOVLB  0
06E36:  GOTO   72AA
06E3A:  MOVLB  0
06E3C:  MOVLB  1
06E3E:  MOVF   xFD,W
06E40:  SUBWF  xB3,W
06E42:  BTFSC  FD8.0
06E44:  BRA    6E4C
06E46:  MOVLB  0
06E48:  GOTO   72AA
06E4C:  MOVLB  0
06E4E:  BTFSS  FD8.2
06E50:  GOTO   6E66
06E54:  MOVLB  1
06E56:  MOVF   xB2,W
06E58:  SUBWF  xFC,W
06E5A:  BTFSS  FD8.0
06E5C:  BRA    6E64
06E5E:  MOVLB  0
06E60:  GOTO   72AA
06E64:  MOVLB  0
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
06E66:  MOVLB  1
06E68:  RLCF   xFC,W
06E6A:  MOVWF  00
06E6C:  RLCF   xFD,W
06E6E:  MOVWF  01
06E70:  RLCF   xFE,W
06E72:  MOVWF  02
06E74:  RLCF   xFF,W
06E76:  MOVWF  03
06E78:  RLCF   00,F
06E7A:  RLCF   01,F
06E7C:  RLCF   02,F
06E7E:  RLCF   03,F
06E80:  RLCF   00,F
06E82:  RLCF   01,F
06E84:  RLCF   02,F
06E86:  RLCF   03,F
06E88:  RLCF   00,F
06E8A:  RLCF   01,F
06E8C:  RLCF   02,F
06E8E:  RLCF   03,F
06E90:  RLCF   00,F
06E92:  RLCF   01,F
06E94:  RLCF   02,F
06E96:  RLCF   03,F
06E98:  RLCF   00,F
06E9A:  RLCF   01,F
06E9C:  RLCF   02,F
06E9E:  RLCF   03,F
06EA0:  MOVLW  C0
06EA2:  ANDWF  00,F
06EA4:  MOVF   00,W
06EA6:  ADDWF  xB4,W
06EA8:  MOVWF  xF8
06EAA:  MOVF   01,W
06EAC:  ADDWFC xB5,W
06EAE:  MOVWF  xF9
06EB0:  MOVF   02,W
06EB2:  ADDWFC xB6,W
06EB4:  MOVWF  xFA
06EB6:  MOVF   03,W
06EB8:  ADDWFC xB7,W
06EBA:  MOVWF  xFB
....................       // fprintf(PC, "ADDRESS 0x%08LX DATA ",read_address);
....................       // 終端チェック
....................       if(read_address > MISF_END){
06EBC:  MOVF   xFB,F
06EBE:  BTFSC  FD8.2
06EC0:  BRA    6EC8
06EC2:  MOVLB  0
06EC4:  GOTO   6EF6
06EC8:  MOVLB  0
06ECA:  MOVLB  1
06ECC:  MOVF   xFA,W
06ECE:  SUBLW  BB
06ED0:  BTFSS  FD8.0
06ED2:  BRA    6EDA
06ED4:  MOVLB  0
06ED6:  GOTO   6FBE
06EDA:  MOVLB  0
06EDC:  XORLW  FF
06EDE:  BTFSS  FD8.2
06EE0:  GOTO   6EF6
06EE4:  MOVLB  1
06EE6:  MOVF   xF9,W
06EE8:  SUBLW  0F
06EEA:  BTFSS  FD8.0
06EEC:  BRA    6EF4
06EEE:  MOVLB  0
06EF0:  GOTO   6FBE
06EF4:  MOVLB  0
....................          fprintf(PC, "[FLASH] Read address 0x%08LX exceeds device end 0x%08LX -> stop\r\n", read_address, (unsigned int32)MISF_END);
06EF6:  MOVLW  7C
06EF8:  MOVWF  FF6
06EFA:  MOVLW  1E
06EFC:  MOVWF  FF7
06EFE:  MOVLW  00
06F00:  MOVWF  FF8
06F02:  MOVLW  17
06F04:  MOVLB  9
06F06:  MOVWF  xC2
06F08:  MOVLB  0
06F0A:  CALL   2312
06F0E:  MOVFF  1FB,9E8
06F12:  MOVLW  37
06F14:  MOVLB  9
06F16:  MOVWF  xE9
06F18:  MOVLB  0
06F1A:  CALL   2542
06F1E:  MOVFF  1FA,9E8
06F22:  MOVLW  37
06F24:  MOVLB  9
06F26:  MOVWF  xE9
06F28:  MOVLB  0
06F2A:  CALL   2542
06F2E:  MOVFF  1F9,9E8
06F32:  MOVLW  37
06F34:  MOVLB  9
06F36:  MOVWF  xE9
06F38:  MOVLB  0
06F3A:  CALL   2542
06F3E:  MOVFF  1F8,9E8
06F42:  MOVLW  37
06F44:  MOVLB  9
06F46:  MOVWF  xE9
06F48:  MOVLB  0
06F4A:  CALL   2542
06F4E:  MOVLW  98
06F50:  MOVWF  FF6
06F52:  MOVLW  1E
06F54:  MOVWF  FF7
06F56:  MOVLW  00
06F58:  MOVWF  FF8
06F5A:  MOVLW  16
06F5C:  MOVLB  9
06F5E:  MOVWF  xC2
06F60:  MOVLB  0
06F62:  CALL   2312
06F66:  MOVLB  9
06F68:  CLRF   xE8
06F6A:  MOVLW  37
06F6C:  MOVWF  xE9
06F6E:  MOVLB  0
06F70:  CALL   2542
06F74:  MOVLW  BC
06F76:  MOVLB  9
06F78:  MOVWF  xE8
06F7A:  MOVLW  37
06F7C:  MOVWF  xE9
06F7E:  MOVLB  0
06F80:  CALL   2542
06F84:  MOVLW  0F
06F86:  MOVLB  9
06F88:  MOVWF  xE8
06F8A:  MOVLW  37
06F8C:  MOVWF  xE9
06F8E:  MOVLB  0
06F90:  CALL   2542
06F94:  MOVLB  9
06F96:  SETF   xE8
06F98:  MOVLW  37
06F9A:  MOVWF  xE9
06F9C:  MOVLB  0
06F9E:  CALL   2542
06FA2:  MOVLW  B3
06FA4:  MOVWF  FF6
06FA6:  MOVLW  1E
06FA8:  MOVWF  FF7
06FAA:  MOVLW  00
06FAC:  MOVWF  FF8
06FAE:  MOVLW  0A
06FB0:  MOVLB  9
06FB2:  MOVWF  xC2
06FB4:  MOVLB  0
06FB6:  CALL   2312
....................          break;
06FBA:  GOTO   72AA
....................       }
....................       if(read_address + (PACKET_SIZE - 1) > MISF_END){
06FBE:  MOVLW  3F
06FC0:  MOVLB  1
06FC2:  ADDWF  xF8,W
06FC4:  MOVLB  2
06FC6:  MOVWF  x06
06FC8:  MOVLW  00
06FCA:  MOVLB  1
06FCC:  ADDWFC xF9,W
06FCE:  MOVLB  2
06FD0:  MOVWF  x07
06FD2:  MOVLW  00
06FD4:  MOVLB  1
06FD6:  ADDWFC xFA,W
06FD8:  MOVLB  2
06FDA:  MOVWF  x08
06FDC:  MOVLW  00
06FDE:  MOVLB  1
06FE0:  ADDWFC xFB,W
06FE2:  MOVLB  2
06FE4:  MOVWF  x09
06FE6:  MOVF   x09,F
06FE8:  BTFSC  FD8.2
06FEA:  BRA    6FF2
06FEC:  MOVLB  0
06FEE:  GOTO   7020
06FF2:  MOVLB  0
06FF4:  MOVLB  2
06FF6:  MOVF   x08,W
06FF8:  SUBLW  BB
06FFA:  BTFSS  FD8.0
06FFC:  BRA    7004
06FFE:  MOVLB  0
07000:  GOTO   7190
07004:  MOVLB  0
07006:  XORLW  FF
07008:  BTFSS  FD8.2
0700A:  GOTO   7020
0700E:  MOVLB  2
07010:  MOVF   x07,W
07012:  SUBLW  0F
07014:  BTFSS  FD8.0
07016:  BRA    701E
07018:  MOVLB  0
0701A:  GOTO   7190
0701E:  MOVLB  0
....................          unsigned int32 remain = (MISF_END - read_address) + 1;
07020:  MOVLW  FF
07022:  BSF    FD8.0
07024:  MOVLB  1
07026:  SUBFWB xF8,W
07028:  MOVLB  2
0702A:  MOVWF  x06
0702C:  MOVLW  0F
0702E:  MOVLB  1
07030:  SUBFWB xF9,W
07032:  MOVLB  2
07034:  MOVWF  x07
07036:  MOVLW  BC
07038:  MOVLB  1
0703A:  SUBFWB xFA,W
0703C:  MOVLB  2
0703E:  MOVWF  x08
07040:  MOVLW  00
07042:  MOVLB  1
07044:  SUBFWB xFB,W
07046:  MOVLB  2
07048:  MOVWF  x09
0704A:  MOVLW  01
0704C:  ADDWF  x06,W
0704E:  MOVWF  x00
07050:  MOVLW  00
07052:  ADDWFC x07,W
07054:  MOVWF  x01
07056:  MOVLW  00
07058:  ADDWFC x08,W
0705A:  MOVWF  x02
0705C:  MOVLW  00
0705E:  ADDWFC x09,W
07060:  MOVWF  x03
07062:  MOVLB  0
....................          fprintf(PC, "[FLASH] End reached. Partial read %lu bytes.\r\n", remain);
07064:  MOVLW  BE
07066:  MOVWF  FF6
07068:  MOVLW  1E
0706A:  MOVWF  FF7
0706C:  MOVLW  00
0706E:  MOVWF  FF8
07070:  MOVLW  22
07072:  MOVLB  9
07074:  MOVWF  xC2
07076:  MOVLB  0
07078:  CALL   2312
0707C:  MOVLW  41
0707E:  MOVWF  FE9
07080:  MOVFF  203,209
07084:  MOVFF  202,208
07088:  MOVFF  201,207
0708C:  MOVFF  200,206
07090:  CALL   62D0
07094:  MOVLW  E3
07096:  MOVWF  FF6
07098:  MOVLW  1E
0709A:  MOVWF  FF7
0709C:  MOVLW  00
0709E:  MOVWF  FF8
070A0:  MOVLW  09
070A2:  MOVLB  9
070A4:  MOVWF  xC2
070A6:  MOVLB  0
070A8:  CALL   2312
....................          read_data_bytes(mis_fm, read_address, readdata, remain);
070AC:  MOVFF  115,AED
070B0:  MOVFF  114,AEC
070B4:  MOVFF  113,AEB
070B8:  MOVFF  112,AEA
070BC:  MOVFF  1FB,AF1
070C0:  MOVFF  1FA,AF0
070C4:  MOVFF  1F9,AEF
070C8:  MOVFF  1F8,AEE
070CC:  MOVLW  01
070CE:  MOVLB  A
070D0:  MOVWF  xF3
070D2:  MOVLW  B8
070D4:  MOVWF  xF2
070D6:  MOVFF  203,AF7
070DA:  MOVFF  202,AF6
070DE:  MOVFF  201,AF5
070E2:  MOVFF  200,AF4
070E6:  MOVLB  0
070E8:  CALL   2ECA
....................          for (unsigned int8 bytecount = 0; bytecount < remain; bytecount++)
070EC:  MOVLB  2
070EE:  CLRF   x04
070F0:  MOVLB  0
070F2:  MOVLB  2
070F4:  MOVF   x03,F
070F6:  BTFSC  FD8.2
070F8:  BRA    7100
070FA:  MOVLB  0
070FC:  GOTO   7134
07100:  MOVLB  0
07102:  MOVLB  2
07104:  MOVF   x02,F
07106:  BTFSC  FD8.2
07108:  BRA    7110
0710A:  MOVLB  0
0710C:  GOTO   7134
07110:  MOVLB  0
07112:  MOVLB  2
07114:  MOVF   x01,F
07116:  BTFSC  FD8.2
07118:  BRA    7120
0711A:  MOVLB  0
0711C:  GOTO   7134
07120:  MOVLB  0
07122:  MOVLB  2
07124:  MOVF   x00,W
07126:  SUBWF  x04,W
07128:  BTFSS  FD8.0
0712A:  BRA    7132
0712C:  MOVLB  0
0712E:  GOTO   7170
07132:  MOVLB  0
....................             fprintf(PC, "%02X ", readdata[bytecount]);
07134:  CLRF   03
07136:  MOVLB  2
07138:  MOVF   x04,W
0713A:  ADDLW  B8
0713C:  MOVWF  FE9
0713E:  MOVLW  01
07140:  ADDWFC 03,W
07142:  MOVWF  FEA
07144:  MOVFF  FEF,206
07148:  MOVFF  206,9E8
0714C:  MOVLW  37
0714E:  MOVLB  9
07150:  MOVWF  xE9
07152:  MOVLB  0
07154:  CALL   2542
07158:  MOVLW  20
0715A:  BTFSS  FA6.6
0715C:  GOTO   715A
07160:  MOVLB  E
07162:  MOVWF  xF9
07164:  MOVLB  0
07166:  MOVLB  2
07168:  INCF   x04,F
0716A:  MOVLB  0
0716C:  GOTO   70F2
....................          fprintf(PC, "\r\n");
07170:  MOVLW  0D
07172:  BTFSS  FA6.6
07174:  GOTO   7172
07178:  MOVLB  E
0717A:  MOVWF  xF9
0717C:  MOVLW  0A
0717E:  MOVLB  0
07180:  BTFSS  FA6.6
07182:  GOTO   7180
07186:  MOVLB  E
07188:  MOVWF  xF9
....................          break;
0718A:  MOVLB  0
0718C:  GOTO   72AA
....................       }
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
07190:  MOVFF  115,AED
07194:  MOVFF  114,AEC
07198:  MOVFF  113,AEB
0719C:  MOVFF  112,AEA
071A0:  MOVFF  1FB,AF1
071A4:  MOVFF  1FA,AF0
071A8:  MOVFF  1F9,AEF
071AC:  MOVFF  1F8,AEE
071B0:  MOVLW  01
071B2:  MOVLB  A
071B4:  MOVWF  xF3
071B6:  MOVLW  B8
071B8:  MOVWF  xF2
071BA:  CLRF   xF7
071BC:  CLRF   xF6
071BE:  CLRF   xF5
071C0:  MOVLW  40
071C2:  MOVWF  xF4
071C4:  MOVLB  0
071C6:  CALL   2ECA
....................       fprintf(PC, "%08LX : ",read_address);
071CA:  MOVFF  1FB,9E8
071CE:  MOVLW  37
071D0:  MOVLB  9
071D2:  MOVWF  xE9
071D4:  MOVLB  0
071D6:  CALL   2542
071DA:  MOVFF  1FA,9E8
071DE:  MOVLW  37
071E0:  MOVLB  9
071E2:  MOVWF  xE9
071E4:  MOVLB  0
071E6:  CALL   2542
071EA:  MOVFF  1F9,9E8
071EE:  MOVLW  37
071F0:  MOVLB  9
071F2:  MOVWF  xE9
071F4:  MOVLB  0
071F6:  CALL   2542
071FA:  MOVFF  1F8,9E8
071FE:  MOVLW  37
07200:  MOVLB  9
07202:  MOVWF  xE9
07204:  MOVLB  0
07206:  CALL   2542
0720A:  MOVLW  F3
0720C:  MOVWF  FF6
0720E:  MOVLW  1E
07210:  MOVWF  FF7
07212:  MOVLW  00
07214:  MOVWF  FF8
07216:  MOVLW  03
07218:  MOVLB  9
0721A:  MOVWF  xC2
0721C:  MOVLB  0
0721E:  CALL   2312
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
07222:  MOVLB  2
07224:  CLRF   x05
07226:  MOVLB  0
07228:  MOVLB  2
0722A:  MOVF   x05,W
0722C:  SUBLW  3F
0722E:  BTFSC  FD8.0
07230:  BRA    7238
07232:  MOVLB  0
07234:  GOTO   7276
07238:  MOVLB  0
....................          fprintf(PC,"%02X ",readdata[bytecount]);
0723A:  CLRF   03
0723C:  MOVLB  2
0723E:  MOVF   x05,W
07240:  ADDLW  B8
07242:  MOVWF  FE9
07244:  MOVLW  01
07246:  ADDWFC 03,W
07248:  MOVWF  FEA
0724A:  MOVFF  FEF,206
0724E:  MOVFF  206,9E8
07252:  MOVLW  37
07254:  MOVLB  9
07256:  MOVWF  xE9
07258:  MOVLB  0
0725A:  CALL   2542
0725E:  MOVLW  20
07260:  BTFSS  FA6.6
07262:  GOTO   7260
07266:  MOVLB  E
07268:  MOVWF  xF9
0726A:  MOVLB  0
0726C:  MOVLB  2
0726E:  INCF   x05,F
07270:  MOVLB  0
07272:  GOTO   7228
....................       }
....................       fprintf(PC,"\r\n");
07276:  MOVLW  0D
07278:  BTFSS  FA6.6
0727A:  GOTO   7278
0727E:  MOVLB  E
07280:  MOVWF  xF9
07282:  MOVLW  0A
07284:  MOVLB  0
07286:  BTFSS  FA6.6
07288:  GOTO   7286
0728C:  MOVLB  E
0728E:  MOVWF  xF9
07290:  MOVLB  0
07292:  MOVLW  01
07294:  MOVLB  1
07296:  ADDWF  xFC,F
07298:  BTFSC  FD8.0
0729A:  INCF   xFD,F
0729C:  BTFSC  FD8.2
0729E:  INCF   xFE,F
072A0:  BTFSC  FD8.2
072A2:  INCF   xFF,F
072A4:  MOVLB  0
072A6:  GOTO   6E1C
....................    }
....................    piclog_make(flash_param.id, PICLOG_PARAM_END); // Log the end of the command execution
072AA:  MOVFF  1B1,20F
072AE:  MOVLB  2
072B0:  SETF   x10
072B2:  MOVLB  0
072B4:  CALL   50EA
....................    fprintf(PC, "End Flash Read\r\n");
072B8:  MOVLW  F8
072BA:  MOVWF  FF6
072BC:  MOVLW  1E
072BE:  MOVWF  FF7
072C0:  MOVLW  00
072C2:  MOVWF  FF8
072C4:  CALL   22DC
072C8:  GOTO   F828 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
072CC:  MOVLW  0A
072CE:  MOVWF  FF6
072D0:  MOVLW  1F
072D2:  MOVWF  FF7
072D4:  MOVLW  00
072D6:  MOVWF  FF8
072D8:  CALL   22DC
....................    flash_setting(mis_fm);
072DC:  MOVFF  115,2BD
072E0:  MOVFF  114,2BC
072E4:  MOVFF  113,2BB
072E8:  MOVFF  112,2BA
072EC:  CALL   6A20
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
072F0:  MOVLB  1
072F2:  CLRF   xB4
072F4:  CLRF   xB3
072F6:  CLRF   xB2
072F8:  CLRF   xB1
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
072FA:  MOVFF  115,AED
072FE:  MOVFF  114,AEC
07302:  MOVFF  113,AEB
07306:  MOVFF  112,AEA
0730A:  MOVFF  1B4,AF1
0730E:  MOVFF  1B3,AF0
07312:  MOVFF  1B2,AEF
07316:  MOVFF  1B1,AEE
0731A:  MOVLW  01
0731C:  MOVLB  A
0731E:  MOVWF  xF3
07320:  MOVLW  B5
07322:  MOVWF  xF2
07324:  CLRF   xF7
07326:  CLRF   xF6
07328:  CLRF   xF5
0732A:  MOVLW  04
0732C:  MOVWF  xF4
0732E:  MOVLB  0
07330:  CALL   2ECA
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
07334:  MOVLW  26
07336:  MOVWF  FF6
07338:  MOVLW  1F
0733A:  MOVWF  FF7
0733C:  MOVLW  00
0733E:  MOVWF  FF8
07340:  MOVLW  0B
07342:  MOVLB  9
07344:  MOVWF  xC2
07346:  MOVLB  0
07348:  CALL   2312
0734C:  MOVFF  1B5,9E8
07350:  MOVLW  37
07352:  MOVLB  9
07354:  MOVWF  xE9
07356:  MOVLB  0
07358:  CALL   2542
0735C:  MOVLW  20
0735E:  BTFSS  FA6.6
07360:  GOTO   735E
07364:  MOVLB  E
07366:  MOVWF  xF9
07368:  MOVFF  1B6,9E8
0736C:  MOVLW  37
0736E:  MOVLB  9
07370:  MOVWF  xE9
07372:  MOVLB  0
07374:  CALL   2542
07378:  MOVLW  20
0737A:  BTFSS  FA6.6
0737C:  GOTO   737A
07380:  MOVLB  E
07382:  MOVWF  xF9
07384:  MOVFF  1B7,9E8
07388:  MOVLW  37
0738A:  MOVLB  9
0738C:  MOVWF  xE9
0738E:  MOVLB  0
07390:  CALL   2542
07394:  MOVLW  20
07396:  BTFSS  FA6.6
07398:  GOTO   7396
0739C:  MOVLB  E
0739E:  MOVWF  xF9
073A0:  MOVFF  1B8,9E8
073A4:  MOVLW  37
073A6:  MOVLB  9
073A8:  MOVWF  xE9
073AA:  MOVLB  0
073AC:  CALL   2542
073B0:  MOVLW  0D
073B2:  BTFSS  FA6.6
073B4:  GOTO   73B2
073B8:  MOVLB  E
073BA:  MOVWF  xF9
073BC:  MOVLW  0A
073BE:  MOVLB  0
073C0:  BTFSS  FA6.6
073C2:  GOTO   73C0
073C6:  MOVLB  E
073C8:  MOVWF  xF9
....................    fprintf(PC, "End Flash Read Address\r\n");
073CA:  MOVLW  48
073CC:  MOVWF  FF6
073CE:  MOVLW  1F
073D0:  MOVWF  FF7
073D2:  MOVLW  00
073D4:  MOVWF  FF8
073D6:  MOVLB  0
073D8:  CALL   22DC
073DC:  GOTO   F838 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase and Reset\r\n");
*
075D4:  MOVLW  62
075D6:  MOVWF  FF6
075D8:  MOVLW  1F
075DA:  MOVWF  FF7
075DC:  MOVLW  00
075DE:  MOVWF  FF8
075E0:  CALL   22DC
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
075E4:  MOVLB  1
075E6:  MOVF   xC8,W
075E8:  MOVWF  FE9
075EA:  MOVF   xC9,W
075EC:  MOVWF  FEA
075EE:  MOVFF  FEF,1CA
075F2:  MOVFF  1CA,20F
075F6:  MOVLB  2
075F8:  CLRF   x10
075FA:  MOVLB  0
075FC:  CALL   50EA
.................... 
....................    mode_misf_erase_all(parameter); // Erase all flash memory
07600:  MOVFF  1C9,1CB
07604:  MOVFF  1C8,1CA
07608:  CALL   5C74
....................    mode_misf_address_reset(parameter); // Reset the address area
0760C:  MOVFF  1C9,1CB
07610:  MOVFF  1C8,1CA
07614:  GOTO   73E0
.................... 
....................    fprintf(PC, "End Flash Erase and Reset\r\n");
07618:  MOVLW  80
0761A:  MOVWF  FF6
0761C:  MOVLW  1F
0761E:  MOVWF  FF7
07620:  MOVLW  00
07622:  MOVWF  FF8
07624:  CALL   22DC
07628:  RETURN 0
.................... }
.................... // ========================== SMF Command ============================
.................... void mode_smf_copy(int8 parameter[])
.................... {
....................    printf("Start Flash SMF Copy\r\n");
0762A:  MOVLW  9C
0762C:  MOVWF  FF6
0762E:  MOVLW  1F
07630:  MOVWF  FF7
07632:  MOVLW  00
07634:  MOVWF  FF8
07636:  CALL   22DC
....................    flash_setting(mis_fm);
0763A:  MOVFF  115,2BD
0763E:  MOVFF  114,2BC
07642:  MOVFF  113,2BB
07646:  MOVFF  112,2BA
0764A:  CALL   6A20
....................    flash_setting(smf);
0764E:  MOVFF  119,2BD
07652:  MOVFF  118,2BC
07656:  MOVFF  117,2BB
0765A:  MOVFF  116,2BA
0765E:  CALL   6A20
....................    
....................    // 統合管理システムを使用したコピー操作
....................    int8 mission_id = parameter[0];
....................    
....................    // 未コピーデータの自動転送をキューに追加
....................    //enqueue_auto_transfer(mission_id);
....................    
....................    // Example copy operation with integration system
....................    int32 src_address = 0x00000000;
....................    int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
07662:  MOVLB  1
07664:  MOVF   xAF,W
07666:  MOVWF  FE9
07668:  MOVF   xB0,W
0766A:  MOVWF  FEA
0766C:  MOVFF  FEF,1B1
07670:  CLRF   xB5
07672:  CLRF   xB4
07674:  CLRF   xB3
07676:  CLRF   xB2
07678:  CLRF   xB9
0767A:  CLRF   xB8
0767C:  MOVLW  10
0767E:  MOVWF  xB7
07680:  CLRF   xB6
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
07682:  MOVFF  115,AED
07686:  MOVFF  114,AEC
0768A:  MOVFF  113,AEB
0768E:  MOVFF  112,AEA
07692:  MOVFF  1B5,AF1
07696:  MOVFF  1B4,AF0
0769A:  MOVFF  1B3,AEF
0769E:  MOVFF  1B2,AEE
076A2:  MOVLW  01
076A4:  MOVLB  A
076A6:  MOVWF  xF3
076A8:  MOVLW  BA
076AA:  MOVWF  xF2
076AC:  CLRF   xF7
076AE:  CLRF   xF6
076B0:  MOVLW  01
076B2:  MOVWF  xF5
076B4:  CLRF   xF4
076B6:  MOVLB  0
076B8:  CALL   2ECA
....................    write_data_bytes(smf, dest_address, read_data, 256);
076BC:  MOVFF  119,AED
076C0:  MOVFF  118,AEC
076C4:  MOVFF  117,AEB
076C8:  MOVFF  116,AEA
076CC:  MOVFF  1B9,AF1
076D0:  MOVFF  1B8,AF0
076D4:  MOVFF  1B7,AEF
076D8:  MOVFF  1B6,AEE
076DC:  MOVLW  01
076DE:  MOVLB  A
076E0:  MOVWF  xF3
076E2:  MOVLW  BA
076E4:  MOVWF  xF2
076E6:  MOVLW  01
076E8:  MOVWF  xF5
076EA:  CLRF   xF4
076EC:  MOVLB  0
076EE:  CALL   3F34
....................    
....................    // 転送完了後のカウンタ更新
....................    //complete_transfer_and_update_counter(mission_id, 256);
....................    
....................    printf("End Flash SMF Copy\r\n");
076F2:  MOVLW  B4
076F4:  MOVWF  FF6
076F6:  MOVLW  1F
076F8:  MOVWF  FF7
076FA:  MOVLW  00
076FC:  MOVWF  FF8
076FE:  CALL   22DC
07702:  GOTO   F858 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
07706:  MOVLW  CA
07708:  MOVWF  FF6
0770A:  MOVLW  1F
0770C:  MOVWF  FF7
0770E:  MOVLW  00
07710:  MOVWF  FF8
07712:  CALL   22DC
....................    unsigned int32 read_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
....................    unsigned int16 read_packetnum = 
....................       ((unsigned int16)parameter[6] << 8) |
....................       ((unsigned int16)parameter[7]);
....................    
....................    unsigned int8 read_data[PACKET_SIZE];
07716:  MOVLW  01
07718:  MOVLB  1
0771A:  ADDWF  xAF,W
0771C:  MOVWF  FE9
0771E:  MOVLW  00
07720:  ADDWFC xB0,W
07722:  MOVWF  FEA
07724:  MOVF   FEF,W
07726:  CLRF   xFB
07728:  CLRF   xFA
0772A:  CLRF   xF9
0772C:  MOVWF  xF8
0772E:  MOVFF  1F8,1FB
07732:  CLRF   xF8
07734:  CLRF   xF9
07736:  CLRF   xFA
07738:  MOVLW  02
0773A:  ADDWF  xAF,W
0773C:  MOVWF  FE9
0773E:  MOVLW  00
07740:  ADDWFC xB0,W
07742:  MOVWF  FEA
07744:  MOVF   FEF,W
07746:  MOVLB  2
07748:  CLRF   x00
0774A:  MOVLB  1
0774C:  CLRF   xFF
0774E:  CLRF   xFE
07750:  MOVWF  xFD
07752:  MOVFF  1FE,03
07756:  MOVFF  1FD,02
0775A:  CLRF   00
0775C:  CLRF   01
0775E:  MOVF   00,W
07760:  IORWF  xF8,F
07762:  MOVF   01,W
07764:  IORWF  xF9,F
07766:  MOVF   02,W
07768:  IORWF  xFA,F
0776A:  MOVF   03,W
0776C:  IORWF  xFB,F
0776E:  MOVLW  03
07770:  ADDWF  xAF,W
07772:  MOVWF  FE9
07774:  MOVLW  00
07776:  ADDWFC xB0,W
07778:  MOVWF  FEA
0777A:  MOVF   FEF,W
0777C:  MOVLB  2
0777E:  CLRF   x00
07780:  MOVLB  1
07782:  CLRF   xFF
07784:  CLRF   xFE
07786:  MOVWF  xFD
07788:  MOVFF  1FF,03
0778C:  MOVFF  1FE,02
07790:  MOVFF  1FD,01
07794:  CLRF   00
07796:  MOVF   00,W
07798:  IORWF  xF8,F
0779A:  MOVF   01,W
0779C:  IORWF  xF9,F
0779E:  MOVF   02,W
077A0:  IORWF  xFA,F
077A2:  MOVF   03,W
077A4:  IORWF  xFB,F
077A6:  MOVLW  04
077A8:  ADDWF  xAF,W
077AA:  MOVWF  FE9
077AC:  MOVLW  00
077AE:  ADDWFC xB0,W
077B0:  MOVWF  FEA
077B2:  MOVF   FEF,W
077B4:  MOVWF  00
077B6:  CLRF   01
077B8:  CLRF   02
077BA:  CLRF   03
077BC:  MOVF   00,W
077BE:  IORWF  xF8,W
077C0:  MOVWF  xB1
077C2:  MOVF   01,W
077C4:  IORWF  xF9,W
077C6:  MOVWF  xB2
077C8:  MOVF   02,W
077CA:  IORWF  xFA,W
077CC:  MOVWF  xB3
077CE:  MOVF   03,W
077D0:  IORWF  xFB,W
077D2:  MOVWF  xB4
077D4:  MOVLW  06
077D6:  ADDWF  xAF,W
077D8:  MOVWF  FE9
077DA:  MOVLW  00
077DC:  ADDWFC xB0,W
077DE:  MOVWF  FEA
077E0:  MOVF   FEF,W
077E2:  CLRF   xF9
077E4:  MOVWF  xF8
077E6:  MOVFF  1F8,1F9
077EA:  CLRF   xF8
077EC:  MOVLW  07
077EE:  ADDWF  xAF,W
077F0:  MOVWF  FE9
077F2:  MOVLW  00
077F4:  ADDWFC xB0,W
077F6:  MOVWF  FEA
077F8:  MOVF   FEF,W
077FA:  CLRF   03
077FC:  IORWF  xF8,W
077FE:  MOVWF  xB5
07800:  MOVF   03,W
07802:  IORWF  xF9,W
07804:  MOVWF  xB6
.................... 
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", read_address);
07806:  MOVLW  E2
07808:  MOVWF  FF6
0780A:  MOVLW  1F
0780C:  MOVWF  FF7
0780E:  MOVLW  00
07810:  MOVWF  FF8
07812:  MOVLW  0E
07814:  MOVLB  9
07816:  MOVWF  xC2
07818:  MOVLB  0
0781A:  CALL   2312
0781E:  MOVFF  1B4,9E8
07822:  MOVLW  37
07824:  MOVLB  9
07826:  MOVWF  xE9
07828:  MOVLB  0
0782A:  CALL   2542
0782E:  MOVFF  1B3,9E8
07832:  MOVLW  37
07834:  MOVLB  9
07836:  MOVWF  xE9
07838:  MOVLB  0
0783A:  CALL   2542
0783E:  MOVFF  1B2,9E8
07842:  MOVLW  37
07844:  MOVLB  9
07846:  MOVWF  xE9
07848:  MOVLB  0
0784A:  CALL   2542
0784E:  MOVFF  1B1,9E8
07852:  MOVLW  37
07854:  MOVLB  9
07856:  MOVWF  xE9
07858:  MOVLB  0
0785A:  CALL   2542
0785E:  MOVLW  0D
07860:  BTFSS  FA6.6
07862:  GOTO   7860
07866:  MOVLB  E
07868:  MOVWF  xF9
0786A:  MOVLW  0A
0786C:  MOVLB  0
0786E:  BTFSS  FA6.6
07870:  GOTO   786E
07874:  MOVLB  E
07876:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", read_packetnum);
07878:  MOVLW  F8
0787A:  MOVWF  FF6
0787C:  MOVLW  1F
0787E:  MOVWF  FF7
07880:  MOVLW  00
07882:  MOVWF  FF8
07884:  MOVLW  0E
07886:  MOVLB  9
07888:  MOVWF  xC2
0788A:  MOVLB  0
0788C:  CALL   2312
07890:  MOVFF  1B6,9E8
07894:  MOVLW  37
07896:  MOVLB  9
07898:  MOVWF  xE9
0789A:  MOVLB  0
0789C:  CALL   2542
078A0:  MOVFF  1B5,9E8
078A4:  MOVLW  37
078A6:  MOVLB  9
078A8:  MOVWF  xE9
078AA:  MOVLB  0
078AC:  CALL   2542
078B0:  MOVLW  0D
078B2:  BTFSS  FA6.6
078B4:  GOTO   78B2
078B8:  MOVLB  E
078BA:  MOVWF  xF9
078BC:  MOVLW  0A
078BE:  MOVLB  0
078C0:  BTFSS  FA6.6
078C2:  GOTO   78C0
078C6:  MOVLB  E
078C8:  MOVWF  xF9
....................    fprintf(PC, "Read Data\r\n");
078CA:  MOVLW  0E
078CC:  MOVWF  FF6
078CE:  MOVLW  20
078D0:  MOVWF  FF7
078D2:  MOVLW  00
078D4:  MOVWF  FF8
078D6:  MOVLB  0
078D8:  CALL   22DC
.................... 
....................    while (read_packetnum > 0) {
078DC:  MOVLB  1
078DE:  MOVF   xB5,F
078E0:  BTFSC  FD8.2
078E2:  BRA    78EA
078E4:  MOVLB  0
078E6:  GOTO   78FC
078EA:  MOVLB  0
078EC:  MOVLB  1
078EE:  MOVF   xB6,F
078F0:  BTFSS  FD8.2
078F2:  BRA    78FA
078F4:  MOVLB  0
078F6:  GOTO   79C4
078FA:  MOVLB  0
....................       read_data_bytes(smf, read_address, read_data, PACKET_SIZE);
078FC:  MOVFF  119,AED
07900:  MOVFF  118,AEC
07904:  MOVFF  117,AEB
07908:  MOVFF  116,AEA
0790C:  MOVFF  1B4,AF1
07910:  MOVFF  1B3,AF0
07914:  MOVFF  1B2,AEF
07918:  MOVFF  1B1,AEE
0791C:  MOVLW  01
0791E:  MOVLB  A
07920:  MOVWF  xF3
07922:  MOVLW  B7
07924:  MOVWF  xF2
07926:  CLRF   xF7
07928:  CLRF   xF6
0792A:  CLRF   xF5
0792C:  MOVLW  40
0792E:  MOVWF  xF4
07930:  MOVLB  0
07932:  CALL   2ECA
.................... 
....................       for (int i = 0; i < PACKET_SIZE; i++) {
07936:  MOVLB  1
07938:  CLRF   xF7
0793A:  MOVLB  0
0793C:  MOVLB  1
0793E:  MOVF   xF7,W
07940:  SUBLW  3F
07942:  BTFSC  FD8.0
07944:  BRA    794C
07946:  MOVLB  0
07948:  GOTO   798A
0794C:  MOVLB  0
....................          fprintf(PC, "%02X ", read_data[i]);
0794E:  CLRF   03
07950:  MOVLB  1
07952:  MOVF   xF7,W
07954:  ADDLW  B7
07956:  MOVWF  FE9
07958:  MOVLW  01
0795A:  ADDWFC 03,W
0795C:  MOVWF  FEA
0795E:  MOVFF  FEF,1F8
07962:  MOVFF  1F8,9E8
07966:  MOVLW  37
07968:  MOVLB  9
0796A:  MOVWF  xE9
0796C:  MOVLB  0
0796E:  CALL   2542
07972:  MOVLW  20
07974:  BTFSS  FA6.6
07976:  GOTO   7974
0797A:  MOVLB  E
0797C:  MOVWF  xF9
0797E:  MOVLB  0
07980:  MOVLB  1
07982:  INCF   xF7,F
07984:  MOVLB  0
07986:  GOTO   793C
....................       }
....................       fprintf(PC, "\r\n");
0798A:  MOVLW  0D
0798C:  BTFSS  FA6.6
0798E:  GOTO   798C
07992:  MOVLB  E
07994:  MOVWF  xF9
07996:  MOVLW  0A
07998:  MOVLB  0
0799A:  BTFSS  FA6.6
0799C:  GOTO   799A
079A0:  MOVLB  E
079A2:  MOVWF  xF9
....................       read_address += PACKET_SIZE;
079A4:  MOVLW  40
079A6:  MOVLB  1
079A8:  ADDWF  xB1,F
079AA:  MOVLW  00
079AC:  ADDWFC xB2,F
079AE:  MOVLW  00
079B0:  ADDWFC xB3,F
079B2:  MOVLW  00
079B4:  ADDWFC xB4,F
....................       read_packetnum--;
079B6:  MOVF   xB5,W
079B8:  BTFSC  FD8.2
079BA:  DECF   xB6,F
079BC:  DECF   xB5,F
079BE:  MOVLB  0
079C0:  GOTO   78DC
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
079C4:  MOVLW  1A
079C6:  MOVWF  FF6
079C8:  MOVLW  20
079CA:  MOVWF  FF7
079CC:  MOVLW  00
079CE:  MOVWF  FF8
079D0:  CALL   22DC
079D4:  GOTO   F868 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_smf_erase(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Erase\r\n");
079D8:  MOVLW  32
079DA:  MOVWF  FF6
079DC:  MOVLW  20
079DE:  MOVWF  FF7
079E0:  MOVLW  00
079E2:  MOVWF  FF8
079E4:  CALL   22DC
....................    flash_setting(smf);
079E8:  MOVFF  119,2BD
079EC:  MOVFF  118,2BC
079F0:  MOVFF  117,2BB
079F4:  MOVFF  116,2BA
079F8:  CALL   6A20
....................    unsigned int32 erase_address = 0x00000000; // Example address
079FC:  MOVLB  1
079FE:  CLRF   xB4
07A00:  CLRF   xB3
07A02:  CLRF   xB2
07A04:  CLRF   xB1
....................    sector_erase(smf, erase_address); // Erase the sector
07A06:  MOVFF  119,1F8
07A0A:  MOVFF  118,1F7
07A0E:  MOVFF  117,1F6
07A12:  MOVFF  116,1F5
07A16:  MOVFF  1B4,1FC
07A1A:  MOVFF  1B3,1FB
07A1E:  MOVFF  1B2,1FA
07A22:  MOVFF  1B1,1F9
07A26:  MOVLB  0
07A28:  CALL   5912
....................    fprintf(PC, "End Flash SMF Erase\r\n");
07A2C:  MOVLW  4A
07A2E:  MOVWF  FF6
07A30:  MOVLW  20
07A32:  MOVWF  FF7
07A34:  MOVLW  00
07A36:  MOVWF  FF8
07A38:  CALL   22DC
07A3C:  GOTO   F878 (RETURN)
.................... }  
.................... 
.................... void mode_misf_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
*
073E0:  MOVLW  60
073E2:  MOVWF  FF6
073E4:  MOVLW  20
073E6:  MOVWF  FF7
073E8:  MOVLW  00
073EA:  MOVWF  FF8
073EC:  CALL   22DC
....................    piclog_make(parameter[0], PICLOG_PARAM_START); 
073F0:  MOVLB  1
073F2:  MOVF   xCA,W
073F4:  MOVWF  FE9
073F6:  MOVF   xCB,W
073F8:  MOVWF  FEA
073FA:  MOVFF  FEF,20E
073FE:  MOVFF  20E,20F
07402:  MOVLB  2
07404:  CLRF   x10
07406:  MOVLB  0
07408:  CALL   50EA
....................    FlashData_t flash_data;
....................    memset(flash_data.bytes, 0, PACKET_SIZE);
0740C:  MOVLW  01
0740E:  MOVWF  FEA
07410:  MOVLW  CC
07412:  MOVWF  FE9
07414:  CLRF   00
07416:  CLRF   02
07418:  MOVLW  40
0741A:  MOVWF  01
0741C:  CALL   234C
....................    /*
....................    for (int i = 0; i < PACKET_SIZE; i++) {
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
....................    }
....................    */
....................    fprintf(PC, "\r\n");
07420:  MOVLW  0D
07422:  BTFSS  FA6.6
07424:  GOTO   7422
07428:  MOVLB  E
0742A:  MOVWF  xF9
0742C:  MOVLW  0A
0742E:  MOVLB  0
07430:  BTFSS  FA6.6
07432:  GOTO   7430
07436:  MOVLB  E
07438:  MOVWF  xF9
....................    flash_data.packet.crc = calc_crc8(flash_data.bytes, PACKET_SIZE-1);
0743A:  MOVLW  01
0743C:  MOVLB  A
0743E:  MOVWF  xEB
07440:  MOVLW  CC
07442:  MOVWF  xEA
07444:  MOVLW  3F
07446:  MOVWF  xEC
07448:  MOVLB  0
0744A:  CALL   30EA
0744E:  MOVFF  01,20B
....................    for (int i = 0; i < PACKET_SIZE; i++) {
07452:  MOVLB  2
07454:  CLRF   x0C
07456:  MOVLB  0
07458:  MOVLB  2
0745A:  MOVF   x0C,W
0745C:  SUBLW  3F
0745E:  BTFSC  FD8.0
07460:  BRA    7468
07462:  MOVLB  0
07464:  GOTO   74A6
07468:  MOVLB  0
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
0746A:  CLRF   03
0746C:  MOVLB  2
0746E:  MOVF   x0C,W
07470:  ADDLW  CC
07472:  MOVWF  FE9
07474:  MOVLW  01
07476:  ADDWFC 03,W
07478:  MOVWF  FEA
0747A:  MOVFF  FEF,20E
0747E:  MOVFF  20E,9E8
07482:  MOVLW  37
07484:  MOVLB  9
07486:  MOVWF  xE9
07488:  MOVLB  0
0748A:  CALL   2542
0748E:  MOVLW  20
07490:  BTFSS  FA6.6
07492:  GOTO   7490
07496:  MOVLB  E
07498:  MOVWF  xF9
0749A:  MOVLB  0
0749C:  MOVLB  2
0749E:  INCF   x0C,F
074A0:  MOVLB  0
074A2:  GOTO   7458
....................    }
....................    fprintf(PC, "\r\n");
074A6:  MOVLW  0D
074A8:  BTFSS  FA6.6
074AA:  GOTO   74A8
074AE:  MOVLB  E
074B0:  MOVWF  xF9
074B2:  MOVLW  0A
074B4:  MOVLB  0
074B6:  BTFSS  FA6.6
074B8:  GOTO   74B6
074BC:  MOVLB  E
074BE:  MOVWF  xF9
....................    write_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, flash_data.bytes, PACKET_SIZE);
074C0:  MOVFF  115,AED
074C4:  MOVFF  114,AEC
074C8:  MOVFF  113,AEB
074CC:  MOVFF  112,AEA
074D0:  MOVLB  A
074D2:  CLRF   xF1
074D4:  CLRF   xF0
074D6:  CLRF   xEF
074D8:  CLRF   xEE
074DA:  MOVLW  01
074DC:  MOVWF  xF3
074DE:  MOVLW  CC
074E0:  MOVWF  xF2
074E2:  CLRF   xF5
074E4:  MOVLW  40
074E6:  MOVWF  xF4
074E8:  MOVLB  0
074EA:  CALL   3F34
....................    memset(flash_data.bytes, 0, PACKET_SIZE);
074EE:  MOVLW  01
074F0:  MOVWF  FEA
074F2:  MOVLW  CC
074F4:  MOVWF  FE9
074F6:  CLRF   00
074F8:  CLRF   02
074FA:  MOVLW  40
074FC:  MOVWF  01
074FE:  CALL   234C
....................    read_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, flash_data.bytes, PACKET_SIZE);
07502:  MOVFF  115,AED
07506:  MOVFF  114,AEC
0750A:  MOVFF  113,AEB
0750E:  MOVFF  112,AEA
07512:  MOVLB  A
07514:  CLRF   xF1
07516:  CLRF   xF0
07518:  CLRF   xEF
0751A:  CLRF   xEE
0751C:  MOVLW  01
0751E:  MOVWF  xF3
07520:  MOVLW  CC
07522:  MOVWF  xF2
07524:  CLRF   xF7
07526:  CLRF   xF6
07528:  CLRF   xF5
0752A:  MOVLW  40
0752C:  MOVWF  xF4
0752E:  MOVLB  0
07530:  CALL   2ECA
....................    flash_data.packet.crc = calc_crc8(flash_data.bytes, PACKET_SIZE-1);
07534:  MOVLW  01
07536:  MOVLB  A
07538:  MOVWF  xEB
0753A:  MOVLW  CC
0753C:  MOVWF  xEA
0753E:  MOVLW  3F
07540:  MOVWF  xEC
07542:  MOVLB  0
07544:  CALL   30EA
07548:  MOVFF  01,20B
....................    for (int i = 0; i < PACKET_SIZE; i++) {
0754C:  MOVLB  2
0754E:  CLRF   x0D
07550:  MOVLB  0
07552:  MOVLB  2
07554:  MOVF   x0D,W
07556:  SUBLW  3F
07558:  BTFSC  FD8.0
0755A:  BRA    7562
0755C:  MOVLB  0
0755E:  GOTO   75A0
07562:  MOVLB  0
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
07564:  CLRF   03
07566:  MOVLB  2
07568:  MOVF   x0D,W
0756A:  ADDLW  CC
0756C:  MOVWF  FE9
0756E:  MOVLW  01
07570:  ADDWFC 03,W
07572:  MOVWF  FEA
07574:  MOVFF  FEF,20E
07578:  MOVFF  20E,9E8
0757C:  MOVLW  37
0757E:  MOVLB  9
07580:  MOVWF  xE9
07582:  MOVLB  0
07584:  CALL   2542
07588:  MOVLW  20
0758A:  BTFSS  FA6.6
0758C:  GOTO   758A
07590:  MOVLB  E
07592:  MOVWF  xF9
07594:  MOVLB  0
07596:  MOVLB  2
07598:  INCF   x0D,F
0759A:  MOVLB  0
0759C:  GOTO   7552
....................    }
....................    misf_init(); // Update the address area after writing
075A0:  CALL   395E
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
075A4:  MOVLB  1
075A6:  MOVF   xCA,W
075A8:  MOVWF  FE9
075AA:  MOVF   xCB,W
075AC:  MOVWF  FEA
075AE:  MOVFF  FEF,20E
075B2:  MOVFF  20E,20F
075B6:  MOVLB  2
075B8:  SETF   x10
075BA:  MOVLB  0
075BC:  CALL   50EA
....................    fprintf(PC, "End Flash Address Reset\r\n");
075C0:  MOVLW  7C
075C2:  MOVWF  FF6
075C4:  MOVLW  20
075C6:  MOVWF  FF7
075C8:  MOVLW  00
075CA:  MOVWF  FF8
075CC:  CALL   22DC
075D0:  GOTO   7618 (RETURN)
.................... }
.................... 
.................... // ---------- SMF Command Functions ----------
.................... void mode_smf_read_force(int8 parameter[])
*
07D40:  MOVLW  01
07D42:  MOVLB  1
07D44:  ADDWF  xAF,W
07D46:  MOVWF  FE9
07D48:  MOVLW  00
07D4A:  ADDWFC xB0,W
07D4C:  MOVWF  FEA
07D4E:  MOVF   FEF,W
07D50:  MOVLB  2
07D52:  CLRF   x01
07D54:  CLRF   x00
07D56:  MOVLB  1
07D58:  CLRF   xFF
07D5A:  MOVWF  xFE
07D5C:  MOVFF  1FE,201
07D60:  CLRF   xFE
07D62:  CLRF   xFF
07D64:  MOVLB  2
07D66:  CLRF   x00
07D68:  MOVLW  02
07D6A:  MOVLB  1
07D6C:  ADDWF  xAF,W
07D6E:  MOVWF  FE9
07D70:  MOVLW  00
07D72:  ADDWFC xB0,W
07D74:  MOVWF  FEA
07D76:  MOVF   FEF,W
07D78:  MOVLB  2
07D7A:  CLRF   x06
07D7C:  CLRF   x05
07D7E:  CLRF   x04
07D80:  MOVWF  x03
07D82:  MOVFF  204,03
07D86:  MOVFF  203,02
07D8A:  CLRF   00
07D8C:  CLRF   01
07D8E:  MOVF   00,W
07D90:  MOVLB  1
07D92:  IORWF  xFE,F
07D94:  MOVF   01,W
07D96:  IORWF  xFF,F
07D98:  MOVF   02,W
07D9A:  MOVLB  2
07D9C:  IORWF  x00,F
07D9E:  MOVF   03,W
07DA0:  IORWF  x01,F
07DA2:  MOVLW  03
07DA4:  MOVLB  1
07DA6:  ADDWF  xAF,W
07DA8:  MOVWF  FE9
07DAA:  MOVLW  00
07DAC:  ADDWFC xB0,W
07DAE:  MOVWF  FEA
07DB0:  MOVF   FEF,W
07DB2:  MOVLB  2
07DB4:  CLRF   x06
07DB6:  CLRF   x05
07DB8:  CLRF   x04
07DBA:  MOVWF  x03
07DBC:  MOVFF  205,03
07DC0:  MOVFF  204,02
07DC4:  MOVFF  203,01
07DC8:  CLRF   00
07DCA:  MOVF   00,W
07DCC:  MOVLB  1
07DCE:  IORWF  xFE,F
07DD0:  MOVF   01,W
07DD2:  IORWF  xFF,F
07DD4:  MOVF   02,W
07DD6:  MOVLB  2
07DD8:  IORWF  x00,F
07DDA:  MOVF   03,W
07DDC:  IORWF  x01,F
07DDE:  MOVLW  04
07DE0:  MOVLB  1
07DE2:  ADDWF  xAF,W
07DE4:  MOVWF  FE9
07DE6:  MOVLW  00
07DE8:  ADDWFC xB0,W
07DEA:  MOVWF  FEA
07DEC:  MOVF   FEF,W
07DEE:  MOVWF  00
07DF0:  CLRF   01
07DF2:  CLRF   02
07DF4:  CLRF   03
07DF6:  MOVF   00,W
07DF8:  IORWF  xFE,W
07DFA:  MOVWF  xB1
07DFC:  MOVF   01,W
07DFE:  IORWF  xFF,W
07E00:  MOVWF  xB2
07E02:  MOVF   02,W
07E04:  MOVLB  2
07E06:  IORWF  x00,W
07E08:  MOVLB  1
07E0A:  MOVWF  xB3
07E0C:  MOVF   03,W
07E0E:  MOVLB  2
07E10:  IORWF  x01,W
07E12:  MOVLB  1
07E14:  MOVWF  xB4
07E16:  MOVLW  07
07E18:  ADDWF  xAF,W
07E1A:  MOVWF  FE9
07E1C:  MOVLW  00
07E1E:  ADDWFC xB0,W
07E20:  MOVWF  FEA
07E22:  MOVF   FEF,W
07E24:  CLRF   xFF
07E26:  MOVWF  xFE
07E28:  MOVFF  1FE,1FF
07E2C:  CLRF   xFE
07E2E:  MOVLW  08
07E30:  ADDWF  xAF,W
07E32:  MOVWF  FE9
07E34:  MOVLW  00
07E36:  ADDWFC xB0,W
07E38:  MOVWF  FEA
07E3A:  MOVF   FEF,W
07E3C:  CLRF   03
07E3E:  IORWF  xFE,W
07E40:  MOVWF  xB5
07E42:  MOVF   03,W
07E44:  IORWF  xFF,W
07E46:  MOVWF  xB6
.................... {
....................    int32 address = 
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
....................    
....................    int16 packet_num = 
....................       ((int16)parameter[7] << 8) |
....................       ((int16)parameter[8]);
....................       
....................    int8 read_data[PACKET_SIZE] = {0x00}; // Initialize read data buffer
07E48:  CLRF   xB7
07E4A:  CLRF   xB8
07E4C:  CLRF   xB9
07E4E:  CLRF   xBA
07E50:  CLRF   xBB
07E52:  CLRF   xBC
07E54:  CLRF   xBD
07E56:  CLRF   xBE
07E58:  CLRF   xBF
07E5A:  CLRF   xC0
07E5C:  CLRF   xC1
07E5E:  CLRF   xC2
07E60:  CLRF   xC3
07E62:  CLRF   xC4
07E64:  CLRF   xC5
07E66:  CLRF   xC6
07E68:  CLRF   xC7
07E6A:  CLRF   xC8
07E6C:  CLRF   xC9
07E6E:  CLRF   xCA
07E70:  CLRF   xCB
07E72:  CLRF   xCC
07E74:  CLRF   xCD
07E76:  CLRF   xCE
07E78:  CLRF   xCF
07E7A:  CLRF   xD0
07E7C:  CLRF   xD1
07E7E:  CLRF   xD2
07E80:  CLRF   xD3
07E82:  CLRF   xD4
07E84:  CLRF   xD5
07E86:  CLRF   xD6
07E88:  CLRF   xD7
07E8A:  CLRF   xD8
07E8C:  CLRF   xD9
07E8E:  CLRF   xDA
07E90:  CLRF   xDB
07E92:  CLRF   xDC
07E94:  CLRF   xDD
07E96:  CLRF   xDE
07E98:  CLRF   xDF
07E9A:  CLRF   xE0
07E9C:  CLRF   xE1
07E9E:  CLRF   xE2
07EA0:  CLRF   xE3
07EA2:  CLRF   xE4
07EA4:  CLRF   xE5
07EA6:  CLRF   xE6
07EA8:  CLRF   xE7
07EAA:  CLRF   xE8
07EAC:  CLRF   xE9
07EAE:  CLRF   xEA
07EB0:  CLRF   xEB
07EB2:  CLRF   xEC
07EB4:  CLRF   xED
07EB6:  CLRF   xEE
07EB8:  CLRF   xEF
07EBA:  CLRF   xF0
07EBC:  CLRF   xF1
07EBE:  CLRF   xF2
07EC0:  CLRF   xF3
07EC2:  CLRF   xF4
07EC4:  CLRF   xF5
07EC6:  CLRF   xF6
....................    if(!is_connect(smf)) {
07EC8:  MOVFF  119,253
07ECC:  MOVFF  118,252
07ED0:  MOVFF  117,251
07ED4:  MOVFF  116,250
07ED8:  MOVLB  0
07EDA:  CALL   2E02
07EDE:  MOVF   01,F
07EE0:  BTFSS  FD8.2
07EE2:  GOTO   7EFA
....................       printf("SMF is not connected\r\n");
07EE6:  MOVLW  96
07EE8:  MOVWF  FF6
07EEA:  MOVLW  20
07EEC:  MOVWF  FF7
07EEE:  MOVLW  00
07EF0:  MOVWF  FF8
07EF2:  CALL   22DC
....................       return;
07EF6:  GOTO   814E
....................    }
....................    printf("Start Flash SMF Read Force\r\n");
07EFA:  MOVLW  AE
07EFC:  MOVWF  FF6
07EFE:  MOVLW  20
07F00:  MOVWF  FF7
07F02:  MOVLW  00
07F04:  MOVWF  FF8
07F06:  CALL   22DC
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
07F0A:  MOVLB  1
07F0C:  MOVF   xAF,W
07F0E:  MOVWF  FE9
07F10:  MOVF   xB0,W
07F12:  MOVWF  FEA
07F14:  MOVFF  FEF,1FE
07F18:  MOVFF  1FE,20F
07F1C:  MOVLB  2
07F1E:  CLRF   x10
07F20:  MOVLB  0
07F22:  CALL   50EA
.................... 
....................    // 統合管理システムからキューに追加
....................    // enqueue_read_data(address, packet_num * PACKET_SIZE);
.................... 
....................    printf("\tAddress  : 0x%08LX\r\n", address);
07F26:  MOVLW  CC
07F28:  MOVWF  FF6
07F2A:  MOVLW  20
07F2C:  MOVWF  FF7
07F2E:  MOVLW  00
07F30:  MOVWF  FF8
07F32:  MOVLW  0E
07F34:  MOVLB  9
07F36:  MOVWF  xC2
07F38:  MOVLB  0
07F3A:  CALL   2312
07F3E:  MOVFF  1B4,9E8
07F42:  MOVLW  37
07F44:  MOVLB  9
07F46:  MOVWF  xE9
07F48:  MOVLB  0
07F4A:  CALL   2542
07F4E:  MOVFF  1B3,9E8
07F52:  MOVLW  37
07F54:  MOVLB  9
07F56:  MOVWF  xE9
07F58:  MOVLB  0
07F5A:  CALL   2542
07F5E:  MOVFF  1B2,9E8
07F62:  MOVLW  37
07F64:  MOVLB  9
07F66:  MOVWF  xE9
07F68:  MOVLB  0
07F6A:  CALL   2542
07F6E:  MOVFF  1B1,9E8
07F72:  MOVLW  37
07F74:  MOVLB  9
07F76:  MOVWF  xE9
07F78:  MOVLB  0
07F7A:  CALL   2542
07F7E:  MOVLW  0D
07F80:  BTFSS  FA6.6
07F82:  GOTO   7F80
07F86:  MOVLB  E
07F88:  MOVWF  xF9
07F8A:  MOVLW  0A
07F8C:  MOVLB  0
07F8E:  BTFSS  FA6.6
07F90:  GOTO   7F8E
07F94:  MOVLB  E
07F96:  MOVWF  xF9
....................    printf("\tPacketNum: 0x%04LX\r\n", packet_num);
07F98:  MOVLW  E2
07F9A:  MOVWF  FF6
07F9C:  MOVLW  20
07F9E:  MOVWF  FF7
07FA0:  MOVLW  00
07FA2:  MOVWF  FF8
07FA4:  MOVLW  0E
07FA6:  MOVLB  9
07FA8:  MOVWF  xC2
07FAA:  MOVLB  0
07FAC:  CALL   2312
07FB0:  MOVFF  1B6,9E8
07FB4:  MOVLW  37
07FB6:  MOVLB  9
07FB8:  MOVWF  xE9
07FBA:  MOVLB  0
07FBC:  CALL   2542
07FC0:  MOVFF  1B5,9E8
07FC4:  MOVLW  37
07FC6:  MOVLB  9
07FC8:  MOVWF  xE9
07FCA:  MOVLB  0
07FCC:  CALL   2542
07FD0:  MOVLW  0D
07FD2:  BTFSS  FA6.6
07FD4:  GOTO   7FD2
07FD8:  MOVLB  E
07FDA:  MOVWF  xF9
07FDC:  MOVLW  0A
07FDE:  MOVLB  0
07FE0:  BTFSS  FA6.6
07FE2:  GOTO   7FE0
07FE6:  MOVLB  E
07FE8:  MOVWF  xF9
....................    printf("read data\r\n");
07FEA:  MOVLW  F8
07FEC:  MOVWF  FF6
07FEE:  MOVLW  20
07FF0:  MOVWF  FF7
07FF2:  MOVLW  00
07FF4:  MOVWF  FF8
07FF6:  MOVLB  0
07FF8:  CALL   22DC
....................    for (int16 packet_count = 0; packet_count < packet_num; packet_count++)
07FFC:  MOVLB  1
07FFE:  CLRF   xF8
08000:  CLRF   xF7
08002:  MOVLB  0
08004:  MOVLB  1
08006:  MOVF   xF8,W
08008:  SUBWF  xB6,W
0800A:  BTFSC  FD8.0
0800C:  BRA    8014
0800E:  MOVLB  0
08010:  GOTO   8122
08014:  MOVLB  0
08016:  BTFSS  FD8.2
08018:  GOTO   802E
0801C:  MOVLB  1
0801E:  MOVF   xB5,W
08020:  SUBWF  xF7,W
08022:  BTFSS  FD8.0
08024:  BRA    802C
08026:  MOVLB  0
08028:  GOTO   8122
0802C:  MOVLB  0
....................    {
....................       int32 current_address = address + (packet_count * PACKET_SIZE);
0802E:  MOVLB  1
08030:  RLCF   xF7,W
08032:  MOVWF  02
08034:  RLCF   xF8,W
08036:  MOVWF  03
08038:  RLCF   02,F
0803A:  RLCF   03,F
0803C:  RLCF   02,F
0803E:  RLCF   03,F
08040:  RLCF   02,F
08042:  RLCF   03,F
08044:  RLCF   02,F
08046:  RLCF   03,F
08048:  RLCF   02,F
0804A:  RLCF   03,F
0804C:  MOVLW  C0
0804E:  ANDWF  02,F
08050:  MOVF   02,W
08052:  ADDWF  xB1,W
08054:  MOVWF  xF9
08056:  MOVF   03,W
08058:  ADDWFC xB2,W
0805A:  MOVWF  xFA
0805C:  MOVLW  00
0805E:  ADDWFC xB3,W
08060:  MOVWF  xFB
08062:  MOVLW  00
08064:  ADDWFC xB4,W
08066:  MOVWF  xFC
08068:  MOVLB  0
....................       read_data_bytes(smf, current_address, read_data, PACKET_SIZE);
0806A:  MOVFF  119,AED
0806E:  MOVFF  118,AEC
08072:  MOVFF  117,AEB
08076:  MOVFF  116,AEA
0807A:  MOVFF  1FC,AF1
0807E:  MOVFF  1FB,AF0
08082:  MOVFF  1FA,AEF
08086:  MOVFF  1F9,AEE
0808A:  MOVLW  01
0808C:  MOVLB  A
0808E:  MOVWF  xF3
08090:  MOVLW  B7
08092:  MOVWF  xF2
08094:  CLRF   xF7
08096:  CLRF   xF6
08098:  CLRF   xF5
0809A:  MOVLW  40
0809C:  MOVWF  xF4
0809E:  MOVLB  0
080A0:  CALL   2ECA
....................       for (int8 byte_count = 0; byte_count < PACKET_SIZE; byte_count++)
080A4:  MOVLB  1
080A6:  CLRF   xFD
080A8:  MOVLB  0
080AA:  MOVLB  1
080AC:  MOVF   xFD,W
080AE:  SUBLW  3F
080B0:  BTFSC  FD8.0
080B2:  BRA    80BA
080B4:  MOVLB  0
080B6:  GOTO   80F8
080BA:  MOVLB  0
....................       {
....................          printf("%02X ", read_data[byte_count]);
080BC:  CLRF   03
080BE:  MOVLB  1
080C0:  MOVF   xFD,W
080C2:  ADDLW  B7
080C4:  MOVWF  FE9
080C6:  MOVLW  01
080C8:  ADDWFC 03,W
080CA:  MOVWF  FEA
080CC:  MOVFF  FEF,1FE
080D0:  MOVFF  1FE,9E8
080D4:  MOVLW  37
080D6:  MOVLB  9
080D8:  MOVWF  xE9
080DA:  MOVLB  0
080DC:  CALL   2542
080E0:  MOVLW  20
080E2:  BTFSS  FA6.6
080E4:  GOTO   80E2
080E8:  MOVLB  E
080EA:  MOVWF  xF9
080EC:  MOVLB  0
080EE:  MOVLB  1
080F0:  INCF   xFD,F
080F2:  MOVLB  0
080F4:  GOTO   80AA
....................       }
....................       printf("\r\n");
080F8:  MOVLW  0D
080FA:  BTFSS  FA6.6
080FC:  GOTO   80FA
08100:  MOVLB  E
08102:  MOVWF  xF9
08104:  MOVLW  0A
08106:  MOVLB  0
08108:  BTFSS  FA6.6
0810A:  GOTO   8108
0810E:  MOVLB  E
08110:  MOVWF  xF9
08112:  MOVLB  0
08114:  MOVLB  1
08116:  INCF   xF7,F
08118:  BTFSC  FD8.2
0811A:  INCF   xF8,F
0811C:  MOVLB  0
0811E:  GOTO   8004
....................    }
.................... 
....................    printf("\r\nEnd Flash SMF Read Force\r\n");
08122:  MOVLW  04
08124:  MOVWF  FF6
08126:  MOVLW  21
08128:  MOVWF  FF7
0812A:  MOVLW  00
0812C:  MOVWF  FF8
0812E:  CALL   22DC
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
08132:  MOVLB  1
08134:  MOVF   xAF,W
08136:  MOVWF  FE9
08138:  MOVF   xB0,W
0813A:  MOVWF  FEA
0813C:  MOVFF  FEF,1FE
08140:  MOVFF  1FE,20F
08144:  MOVLB  2
08146:  SETF   x10
08148:  MOVLB  0
0814A:  CALL   50EA
0814E:  GOTO   F898 (RETURN)
.................... }
.................... 
.................... void mode_smf_erase_force(int8 parameter[])
.................... {
....................    printf("Start SMF Erase All\r\n");
08152:  MOVLW  22
08154:  MOVWF  FF6
08156:  MOVLW  21
08158:  MOVWF  FF7
0815A:  MOVLW  00
0815C:  MOVWF  FF8
0815E:  CALL   22DC
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
08162:  MOVLB  1
08164:  MOVF   xAF,W
08166:  MOVWF  FE9
08168:  MOVF   xB0,W
0816A:  MOVWF  FEA
0816C:  MOVFF  FEF,1B1
....................    piclog_make(cmd, 0x00); // Log the command execution
08170:  MOVFF  1B1,20F
08174:  MOVLB  2
08176:  CLRF   x10
08178:  MOVLB  0
0817A:  CALL   50EA
....................    
.................... 
....................    
....................    for (int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_IV2_DATA_END_ADDRESS; address += SECTOR_64K_BYTE) {
0817E:  MOVLW  06
08180:  MOVLB  1
08182:  MOVWF  xB5
08184:  MOVLW  AA
08186:  MOVWF  xB4
08188:  CLRF   xB3
0818A:  CLRF   xB2
0818C:  MOVLB  0
0818E:  MOVLB  1
08190:  MOVF   xB5,W
08192:  SUBLW  07
08194:  BTFSC  FD8.0
08196:  BRA    819E
08198:  MOVLB  0
0819A:  GOTO   821C
0819E:  MOVLB  0
081A0:  BTFSS  FD8.2
081A2:  GOTO   81E8
081A6:  MOVLB  1
081A8:  MOVF   xB4,W
081AA:  SUBLW  49
081AC:  BTFSC  FD8.0
081AE:  BRA    81B6
081B0:  MOVLB  0
081B2:  GOTO   821C
081B6:  MOVLB  0
081B8:  BTFSS  FD8.2
081BA:  GOTO   81E8
081BE:  MOVLB  1
081C0:  MOVF   xB3,W
081C2:  SUBLW  0F
081C4:  BTFSC  FD8.0
081C6:  BRA    81CE
081C8:  MOVLB  0
081CA:  GOTO   821C
081CE:  MOVLB  0
081D0:  BTFSS  FD8.2
081D2:  GOTO   81E8
081D6:  MOVLB  1
081D8:  MOVF   xB2,W
081DA:  SUBLW  FE
081DC:  BTFSC  FD8.0
081DE:  BRA    81E6
081E0:  MOVLB  0
081E2:  GOTO   821C
081E6:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
081E8:  MOVFF  119,1F8
081EC:  MOVFF  118,1F7
081F0:  MOVFF  117,1F6
081F4:  MOVFF  116,1F5
081F8:  MOVFF  1B5,1FC
081FC:  MOVFF  1B4,1FB
08200:  MOVFF  1B3,1FA
08204:  MOVFF  1B2,1F9
08208:  CALL   5912
0820C:  MOVLW  01
0820E:  MOVLB  1
08210:  ADDWF  xB4,F
08212:  MOVLW  00
08214:  ADDWFC xB5,F
08216:  MOVLB  0
08218:  GOTO   818E
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
0821C:  MOVFF  1B1,20F
08220:  MOVLB  2
08222:  SETF   x10
08224:  MOVLB  0
08226:  CALL   50EA
....................    printf("End SMF Erase All\r\n");
0822A:  MOVLW  38
0822C:  MOVWF  FF6
0822E:  MOVLW  21
08230:  MOVWF  FF7
08232:  MOVLW  00
08234:  MOVWF  FF8
08236:  CALL   22DC
0823A:  GOTO   F8A8 (RETURN)
.................... }
.................... 
.................... void mode_smf_address_reset(int8 parameter[])
.................... {
....................    printf("Start SMF Reset\r\n");
*
07BC2:  MOVLW  4C
07BC4:  MOVWF  FF6
07BC6:  MOVLW  21
07BC8:  MOVWF  FF7
07BCA:  MOVLW  00
07BCC:  MOVWF  FF8
07BCE:  CALL   22DC
....................    piclog_make(parameter[0], PICLOG_PARAM_START);
07BD2:  MOVLB  1
07BD4:  MOVF   xAF,W
07BD6:  MOVWF  FE9
07BD8:  MOVF   xB0,W
07BDA:  MOVWF  FEA
07BDC:  MOVFF  FEF,1F5
07BE0:  MOVFF  1F5,20F
07BE4:  MOVLB  2
07BE6:  CLRF   x10
07BE8:  MOVLB  0
07BEA:  CALL   50EA
....................    int8 writedata[PACKET_SIZE] = {0x00}; 
07BEE:  MOVLB  1
07BF0:  CLRF   xB1
07BF2:  CLRF   xB2
07BF4:  CLRF   xB3
07BF6:  CLRF   xB4
07BF8:  CLRF   xB5
07BFA:  CLRF   xB6
07BFC:  CLRF   xB7
07BFE:  CLRF   xB8
07C00:  CLRF   xB9
07C02:  CLRF   xBA
07C04:  CLRF   xBB
07C06:  CLRF   xBC
07C08:  CLRF   xBD
07C0A:  CLRF   xBE
07C0C:  CLRF   xBF
07C0E:  CLRF   xC0
07C10:  CLRF   xC1
07C12:  CLRF   xC2
07C14:  CLRF   xC3
07C16:  CLRF   xC4
07C18:  CLRF   xC5
07C1A:  CLRF   xC6
07C1C:  CLRF   xC7
07C1E:  CLRF   xC8
07C20:  CLRF   xC9
07C22:  CLRF   xCA
07C24:  CLRF   xCB
07C26:  CLRF   xCC
07C28:  CLRF   xCD
07C2A:  CLRF   xCE
07C2C:  CLRF   xCF
07C2E:  CLRF   xD0
07C30:  CLRF   xD1
07C32:  CLRF   xD2
07C34:  CLRF   xD3
07C36:  CLRF   xD4
07C38:  CLRF   xD5
07C3A:  CLRF   xD6
07C3C:  CLRF   xD7
07C3E:  CLRF   xD8
07C40:  CLRF   xD9
07C42:  CLRF   xDA
07C44:  CLRF   xDB
07C46:  CLRF   xDC
07C48:  CLRF   xDD
07C4A:  CLRF   xDE
07C4C:  CLRF   xDF
07C4E:  CLRF   xE0
07C50:  CLRF   xE1
07C52:  CLRF   xE2
07C54:  CLRF   xE3
07C56:  CLRF   xE4
07C58:  CLRF   xE5
07C5A:  CLRF   xE6
07C5C:  CLRF   xE7
07C5E:  CLRF   xE8
07C60:  CLRF   xE9
07C62:  CLRF   xEA
07C64:  CLRF   xEB
07C66:  CLRF   xEC
07C68:  CLRF   xED
07C6A:  CLRF   xEE
07C6C:  CLRF   xEF
07C6E:  CLRF   xF0
....................    for (int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_IV2_DATA_END_ADDRESS; address += SECTOR_64K_BYTE) {
07C70:  MOVLW  06
07C72:  MOVWF  xF4
07C74:  MOVLW  AA
07C76:  MOVWF  xF3
07C78:  CLRF   xF2
07C7A:  CLRF   xF1
07C7C:  MOVLB  0
07C7E:  MOVLB  1
07C80:  MOVF   xF4,W
07C82:  SUBLW  07
07C84:  BTFSC  FD8.0
07C86:  BRA    7C8E
07C88:  MOVLB  0
07C8A:  GOTO   7D0C
07C8E:  MOVLB  0
07C90:  BTFSS  FD8.2
07C92:  GOTO   7CD8
07C96:  MOVLB  1
07C98:  MOVF   xF3,W
07C9A:  SUBLW  49
07C9C:  BTFSC  FD8.0
07C9E:  BRA    7CA6
07CA0:  MOVLB  0
07CA2:  GOTO   7D0C
07CA6:  MOVLB  0
07CA8:  BTFSS  FD8.2
07CAA:  GOTO   7CD8
07CAE:  MOVLB  1
07CB0:  MOVF   xF2,W
07CB2:  SUBLW  0F
07CB4:  BTFSC  FD8.0
07CB6:  BRA    7CBE
07CB8:  MOVLB  0
07CBA:  GOTO   7D0C
07CBE:  MOVLB  0
07CC0:  BTFSS  FD8.2
07CC2:  GOTO   7CD8
07CC6:  MOVLB  1
07CC8:  MOVF   xF1,W
07CCA:  SUBLW  FE
07CCC:  BTFSC  FD8.0
07CCE:  BRA    7CD6
07CD0:  MOVLB  0
07CD2:  GOTO   7D0C
07CD6:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
07CD8:  MOVFF  119,1F8
07CDC:  MOVFF  118,1F7
07CE0:  MOVFF  117,1F6
07CE4:  MOVFF  116,1F5
07CE8:  MOVFF  1F4,1FC
07CEC:  MOVFF  1F3,1FB
07CF0:  MOVFF  1F2,1FA
07CF4:  MOVFF  1F1,1F9
07CF8:  CALL   5912
07CFC:  MOVLW  01
07CFE:  MOVLB  1
07D00:  ADDWF  xF3,F
07D02:  MOVLW  00
07D04:  ADDWFC xF4,F
07D06:  MOVLB  0
07D08:  GOTO   7C7E
....................    }
....................    smf_data_table_init(); // Update the address area after writing
07D0C:  CALL   7A40
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
07D10:  MOVLB  1
07D12:  MOVF   xAF,W
07D14:  MOVWF  FE9
07D16:  MOVF   xB0,W
07D18:  MOVWF  FEA
07D1A:  MOVFF  FEF,1F5
07D1E:  MOVFF  1F5,20F
07D22:  MOVLB  2
07D24:  SETF   x10
07D26:  MOVLB  0
07D28:  CALL   50EA
....................    printf("End SMF Reset\r\n");
07D2C:  MOVLW  5E
07D2E:  MOVWF  FF6
07D30:  MOVLW  21
07D32:  MOVWF  FF7
07D34:  MOVLW  00
07D36:  MOVWF  FF8
07D38:  CALL   22DC
07D3C:  GOTO   F888 (RETURN)
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
12938:  CLRF   FF8
1293A:  BCF    FF1.2
1293C:  BCF    F9F.0
1293E:  BCF    FA9.5
12940:  BSF    FD0.7
12942:  BSF    07.7
12944:  MOVLB  E
12946:  MOVLW  55
12948:  MOVWF  F7E
1294A:  MOVLW  AA
1294C:  MOVWF  F7E
1294E:  BCF    F66.6
12950:  MOVLW  F9
12952:  MOVWF  x2C
12954:  MOVLW  F6
12956:  MOVWF  x2D
12958:  MOVLW  0F
1295A:  MOVWF  x2E
1295C:  MOVLW  40
1295E:  MOVWF  x12
12960:  MOVLW  30
12962:  MOVWF  x13
12964:  MOVLW  20
12966:  MOVWF  x22
12968:  MOVLW  30
1296A:  MOVWF  x24
1296C:  MOVLW  55
1296E:  MOVWF  F7E
12970:  MOVLW  AA
12972:  MOVWF  F7E
12974:  BSF    F66.6
12976:  CLRF   F9B
12978:  CLRF   F64
1297A:  CLRF   F65
1297C:  CLRF   F66
1297E:  MOVLW  02
12980:  MOVWF  FD3
12982:  CLRF   1B
12984:  MOVLB  F
12986:  BSF    x2D.3
12988:  MOVLW  A0
1298A:  MOVWF  x2B
1298C:  MOVLW  01
1298E:  MOVWF  x2C
12990:  MOVLW  A6
12992:  MOVWF  x2E
12994:  MOVLW  90
12996:  MOVWF  x2F
12998:  MOVLB  E
1299A:  BSF    xFD.3
1299C:  MOVLW  A0
1299E:  MOVWF  xFB
129A0:  MOVLW  01
129A2:  MOVWF  xFC
129A4:  MOVLW  A6
129A6:  MOVWF  xFE
129A8:  MOVLW  90
129AA:  MOVWF  xFF
129AC:  BSF    F92.1
129AE:  BCF    F92.0
129B0:  BCF    F92.3
129B2:  BCF    F89.3
129B4:  BSF    F96.0
129B6:  BCF    F96.6
129B8:  BCF    F96.1
129BA:  BCF    F8D.1
129BC:  BSF    F93.4
129BE:  BCF    F93.5
129C0:  BCF    F93.2
129C2:  BSF    F8A.2
129C4:  BCF    F95.4
129C6:  BCF    F95.5
129C8:  BSF    F8C.5
129CA:  CLRF   1F
129CC:  CLRF   1E
129CE:  CLRF   1D
129D0:  CLRF   1C
129D2:  CLRF   23
129D4:  CLRF   22
129D6:  CLRF   21
129D8:  CLRF   20
129DA:  CLRF   27
129DC:  CLRF   26
129DE:  CLRF   25
129E0:  CLRF   24
129E2:  CLRF   29
129E4:  CLRF   28
129E6:  CLRF   4A
129E8:  BCF    4B.0
129EA:  MOVLW  1E
129EC:  MOVLB  1
129EE:  MOVWF  x7C
129F0:  CLRF   x81
129F2:  CLRF   x80
129F4:  CLRF   x7F
129F6:  CLRF   x7E
129F8:  CLRF   x85
129FA:  CLRF   x84
129FC:  CLRF   x83
129FE:  CLRF   x82
12A00:  CLRF   x87
12A02:  CLRF   x86
12A04:  MOVLB  E
12A06:  CLRF   xD9
12A08:  CLRF   xDA
12A0A:  CLRF   xCE
12A0C:  CLRF   xCF
12A0E:  CLRF   xD0
12A10:  CLRF   xD1
12A12:  CLRF   xD2
12A14:  CLRF   xD3
12A16:  CLRF   xD4
12A18:  CLRF   xD5
12A1A:  CLRF   x45
12A1C:  CLRF   x46
12A1E:  CLRF   x47
12A20:  BCF    x8D.7
12A22:  BCF    x8D.6
12A24:  BCF    x8D.5
12A26:  MOVLB  F
12A28:  CLRF   x53
12A2A:  CLRF   x38
12A2C:  CLRF   x37
12A2E:  MOVLB  0
12A30:  CLRF   2A
12A32:  CLRF   2B
12A34:  CLRF   2C
12A36:  CLRF   2D
12A38:  CLRF   2E
12A3A:  CLRF   2F
12A3C:  CLRF   30
12A3E:  CLRF   31
12A40:  CLRF   32
12A42:  CLRF   33
12A44:  CLRF   34
12A46:  CLRF   35
12A48:  CLRF   36
12A4A:  CLRF   37
12A4C:  CLRF   38
12A4E:  CLRF   39
12A50:  CLRF   3A
12A52:  CLRF   3B
12A54:  CLRF   3C
12A56:  CLRF   3D
12A58:  CLRF   3E
12A5A:  CLRF   3F
12A5C:  CLRF   40
12A5E:  CLRF   41
12A60:  CLRF   42
12A62:  CLRF   43
12A64:  CLRF   44
12A66:  CLRF   45
12A68:  CLRF   46
12A6A:  CLRF   47
12A6C:  CLRF   48
12A6E:  CLRF   49
12A70:  MOVLW  03
12A72:  MOVWF  4C
12A74:  CLRF   4D
12A76:  CLRF   4E
12A78:  CLRF   4F
12A7A:  CLRF   50
12A7C:  CLRF   51
12A7E:  CLRF   52
12A80:  CLRF   53
12A82:  CLRF   54
12A84:  CLRF   55
12A86:  CLRF   56
12A88:  CLRF   57
12A8A:  CLRF   58
12A8C:  CLRF   59
12A8E:  CLRF   5A
12A90:  CLRF   5B
12A92:  CLRF   5C
12A94:  CLRF   5D
12A96:  CLRF   5E
12A98:  CLRF   5F
12A9A:  CLRF   x60
12A9C:  CLRF   x61
12A9E:  CLRF   x62
12AA0:  CLRF   x63
12AA2:  CLRF   x64
12AA4:  CLRF   x65
12AA6:  CLRF   x66
12AA8:  CLRF   x67
12AAA:  CLRF   x68
12AAC:  CLRF   x69
12AAE:  CLRF   x6A
12AB0:  CLRF   x6B
12AB2:  CLRF   x6C
12AB4:  CLRF   x6D
12AB6:  CLRF   x6E
12AB8:  CLRF   x6F
12ABA:  CLRF   x70
12ABC:  CLRF   x71
12ABE:  CLRF   x72
12AC0:  CLRF   x73
12AC2:  CLRF   x74
12AC4:  CLRF   x75
12AC6:  CLRF   x76
12AC8:  CLRF   x77
12ACA:  CLRF   x78
12ACC:  CLRF   x79
12ACE:  CLRF   x7A
12AD0:  CLRF   x7B
12AD2:  CLRF   x7C
12AD4:  CLRF   x7D
12AD6:  CLRF   x7E
12AD8:  CLRF   x7F
12ADA:  CLRF   x80
12ADC:  CLRF   x81
12ADE:  CLRF   x82
12AE0:  CLRF   x83
12AE2:  CLRF   x84
12AE4:  CLRF   x85
12AE6:  CLRF   x86
12AE8:  CLRF   x87
12AEA:  CLRF   x88
12AEC:  CLRF   x89
12AEE:  CLRF   x8A
12AF0:  CLRF   x8B
12AF2:  CLRF   x8C
12AF4:  CLRF   x8D
12AF6:  CLRF   x8E
12AF8:  CLRF   x8F
12AFA:  CLRF   x90
12AFC:  CLRF   x91
12AFE:  CLRF   x92
12B00:  CLRF   x93
12B02:  CLRF   x94
12B04:  CLRF   x95
12B06:  CLRF   x96
12B08:  CLRF   x97
12B0A:  CLRF   x98
12B0C:  CLRF   x99
12B0E:  CLRF   x9A
12B10:  CLRF   x9B
12B12:  CLRF   x9C
12B14:  CLRF   x9D
12B16:  CLRF   x9E
12B18:  CLRF   x9F
12B1A:  CLRF   xA0
12B1C:  CLRF   xA1
12B1E:  CLRF   xA2
12B20:  CLRF   xA3
12B22:  CLRF   xA4
12B24:  CLRF   xA5
12B26:  CLRF   xA6
12B28:  CLRF   xA7
12B2A:  CLRF   xA8
12B2C:  CLRF   xA9
12B2E:  CLRF   xAA
12B30:  CLRF   xAB
12B32:  CLRF   xAC
12B34:  CLRF   xAD
12B36:  CLRF   xAE
12B38:  CLRF   xAF
12B3A:  CLRF   xB0
12B3C:  CLRF   xB1
12B3E:  CLRF   xB2
12B40:  CLRF   xB3
12B42:  CLRF   xB4
12B44:  CLRF   xB5
12B46:  CLRF   xB6
12B48:  CLRF   xB7
12B4A:  CLRF   xB8
12B4C:  CLRF   xB9
12B4E:  CLRF   xBA
12B50:  CLRF   xBB
12B52:  CLRF   xBC
12B54:  CLRF   xBD
12B56:  CLRF   xBE
12B58:  CLRF   xBF
12B5A:  CLRF   xC0
12B5C:  CLRF   xC1
12B5E:  CLRF   xC2
12B60:  CLRF   xC3
12B62:  CLRF   xC4
12B64:  CLRF   xC5
12B66:  CLRF   xC6
12B68:  CLRF   xC7
12B6A:  CLRF   xC8
12B6C:  CLRF   xC9
12B6E:  CLRF   xCA
12B70:  CLRF   xCB
12B72:  CLRF   xCC
12B74:  CLRF   xCD
12B76:  CLRF   xCE
12B78:  CLRF   xCF
12B7A:  CLRF   xD0
12B7C:  CLRF   xD1
12B7E:  CLRF   xD2
12B80:  CLRF   xD3
12B82:  CLRF   xD4
12B84:  CLRF   xD5
12B86:  CLRF   xD6
12B88:  CLRF   xD7
12B8A:  CLRF   xD8
12B8C:  CLRF   xD9
12B8E:  CLRF   xDA
12B90:  CLRF   xDB
12B92:  CLRF   xDC
12B94:  CLRF   xDD
12B96:  CLRF   xDE
12B98:  CLRF   xDF
12B9A:  CLRF   xE0
12B9C:  CLRF   xE1
12B9E:  CLRF   xE2
12BA0:  CLRF   xE3
12BA2:  CLRF   xE4
12BA4:  CLRF   xE5
12BA6:  CLRF   xE6
12BA8:  CLRF   xE7
12BAA:  CLRF   xE8
12BAC:  CLRF   xE9
12BAE:  CLRF   xEA
12BB0:  CLRF   xEB
12BB2:  CLRF   xEC
12BB4:  CLRF   xED
12BB6:  CLRF   xEE
12BB8:  CLRF   xEF
12BBA:  CLRF   xF0
12BBC:  CLRF   xF1
12BBE:  CLRF   xF2
12BC0:  CLRF   xF3
12BC2:  CLRF   xF4
12BC4:  CLRF   xF5
12BC6:  CLRF   xF6
12BC8:  CLRF   xF7
12BCA:  CLRF   xF8
12BCC:  CLRF   xF9
12BCE:  CLRF   xFA
12BD0:  CLRF   xFB
12BD2:  CLRF   xFC
12BD4:  CLRF   xFD
12BD6:  CLRF   xFE
12BD8:  CLRF   xFF
12BDA:  MOVLB  1
12BDC:  CLRF   x00
12BDE:  CLRF   x01
12BE0:  CLRF   x02
12BE2:  CLRF   x03
12BE4:  CLRF   x04
12BE6:  CLRF   x05
12BE8:  CLRF   x06
12BEA:  CLRF   x07
12BEC:  CLRF   x08
12BEE:  CLRF   x09
12BF0:  CLRF   x0A
12BF2:  CLRF   x0B
12BF4:  CLRF   x0C
12BF6:  CLRF   x0D
12BF8:  CLRF   x0E
12BFA:  CLRF   x0F
12BFC:  CLRF   x10
12BFE:  CLRF   x11
12C00:  CLRF   x12
12C02:  CLRF   x13
12C04:  MOVLW  30
12C06:  MOVWF  x14
12C08:  MOVLW  7C
12C0A:  MOVWF  x15
12C0C:  MOVLW  01
12C0E:  MOVWF  x16
12C10:  MOVLW  01
12C12:  MOVWF  x17
12C14:  MOVLW  02
12C16:  MOVWF  x18
12C18:  MOVLW  7C
12C1A:  MOVWF  x19
12C1C:  CLRF   x1A
12C1E:  MOVLW  09
12C20:  MOVWF  x1B
12C22:  MOVLW  01
12C24:  MOVWF  x1C
12C26:  CLRF   x1D
12C28:  MOVLW  02
12C2A:  MOVWF  x1E
12C2C:  MOVLW  01
12C2E:  MOVWF  x1F
12C30:  MOVLW  03
12C32:  MOVWF  x20
12C34:  MOVLW  04
12C36:  MOVWF  x21
12C38:  MOVLW  01
12C3A:  MOVWF  x69
12C3C:  MOVLW  22
12C3E:  MOVWF  x68
12C40:  MOVLW  01
12C42:  MOVWF  x6B
12C44:  MOVLW  2C
12C46:  MOVWF  x6A
12C48:  MOVLW  01
12C4A:  MOVWF  x6D
12C4C:  MOVLW  36
12C4E:  MOVWF  x6C
12C50:  MOVLW  01
12C52:  MOVWF  x6F
12C54:  MOVLW  40
12C56:  MOVWF  x6E
12C58:  MOVLW  01
12C5A:  MOVWF  x71
12C5C:  MOVLW  4A
12C5E:  MOVWF  x70
12C60:  MOVLW  01
12C62:  MOVWF  x73
12C64:  MOVLW  54
12C66:  MOVWF  x72
12C68:  MOVLW  01
12C6A:  MOVWF  x75
12C6C:  MOVLW  5E
12C6E:  MOVWF  x74
12C70:  CLRF   x88
12C72:  CLRF   x89
12C74:  CLRF   x8A
12C76:  CLRF   x8B
12C78:  MOVLB  0
.................... { 
....................    delay_ms(100); // wait for power stable
12C7A:  MOVLW  64
12C7C:  MOVLB  B
12C7E:  MOVWF  x02
12C80:  MOVLB  0
12C82:  CALL   22AE
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
12C86:  MOVLW  6E
12C88:  MOVWF  FF6
12C8A:  MOVLW  21
12C8C:  MOVWF  FF7
12C8E:  MOVLW  00
12C90:  MOVWF  FF8
12C92:  CALL   22DC
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM6.\r\n");
12C96:  MOVLW  B4
12C98:  MOVWF  FF6
12C9A:  MOVLW  21
12C9C:  MOVWF  FF7
12C9E:  MOVLW  00
12CA0:  MOVWF  FF8
12CA2:  CALL   22DC
....................    fprintf(PC,"Last updated on %s %s, by Inoue.\r\n\r\n", __DATE__, __TIME__);
12CA6:  MOVLW  E2
12CA8:  MOVWF  FF6
12CAA:  MOVLW  21
12CAC:  MOVWF  FF7
12CAE:  MOVLW  00
12CB0:  MOVWF  FF8
12CB2:  MOVLW  10
12CB4:  MOVLB  9
12CB6:  MOVWF  xC2
12CB8:  MOVLB  0
12CBA:  CALL   2312
12CBE:  MOVLW  08
12CC0:  MOVWF  FF6
12CC2:  MOVLW  22
12CC4:  MOVWF  FF7
12CC6:  MOVLW  00
12CC8:  MOVWF  FF8
12CCA:  CALL   22DC
12CCE:  MOVLW  20
12CD0:  BTFSS  FA6.6
12CD2:  GOTO   12CD0
12CD6:  MOVLB  E
12CD8:  MOVWF  xF9
12CDA:  MOVLW  12
12CDC:  MOVWF  FF6
12CDE:  MOVLW  22
12CE0:  MOVWF  FF7
12CE2:  MOVLW  00
12CE4:  MOVWF  FF8
12CE6:  MOVLB  0
12CE8:  CALL   22DC
12CEC:  MOVLW  F7
12CEE:  MOVWF  FF6
12CF0:  MOVLW  21
12CF2:  MOVWF  FF7
12CF4:  MOVLW  00
12CF6:  MOVWF  FF8
12CF8:  MOVLW  0F
12CFA:  MOVLB  9
12CFC:  MOVWF  xC2
12CFE:  MOVLB  0
12D00:  CALL   2312
....................    memset(smf_update_flag, 0, sizeof(smf_update_flag));
12D04:  MOVLW  01
12D06:  MOVWF  FEA
12D08:  MOVLW  7A
12D0A:  MOVWF  FE9
12D0C:  CLRF   00
12D0E:  CLRF   02
12D10:  MOVLW  02
12D12:  MOVWF  01
12D14:  CALL   234C
....................    // io_init();
....................    setup_uart_to_boss();
12D18:  GOTO   2370
....................    timer_init();
12D1C:  GOTO   239A
....................    ad7490_init();
12D20:  GOTO   25BE
....................    mcp4901_init();
12D24:  GOTO   28EE
....................    misf_init();
12D28:  CALL   395E
....................    
....................    piclog_make(PICLOG_STARTUP,0x00);
12D2C:  MOVLB  2
12D2E:  CLRF   x0F
12D30:  CLRF   x10
12D32:  MOVLB  0
12D34:  CALL   50EA
.................... 
....................    int1 is_finished = FALSE;
12D38:  MOVLB  1
12D3A:  BCF    x8C.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
12D3C:  MOVLW  1C
12D3E:  MOVWF  FF6
12D40:  MOVLW  22
12D42:  MOVWF  FF7
12D44:  MOVLW  00
12D46:  MOVWF  FF8
12D48:  MOVLB  0
12D4A:  CALL   22DC
....................    
....................    //enable_negative_power();
....................    connect_port1();
12D4E:  CALL   5212
....................    connect_port2();
12D52:  CALL   521A
....................    mcp4901_1_write(0);
12D56:  MOVLB  9
12D58:  CLRF   xDD
12D5A:  CLRF   xDC
12D5C:  MOVLB  0
12D5E:  CALL   2872
....................    mcp4901_2_write(0);
12D62:  MOVLB  9
12D64:  CLRF   xDD
12D66:  CLRF   xDC
12D68:  MOVLB  0
12D6A:  CALL   28B0
....................    connect_negative_power1(TRUE); // CIGS1 Negative Power ON
12D6E:  MOVLW  01
12D70:  MOVLB  1
12D72:  MOVWF  x99
12D74:  MOVLB  0
12D76:  GOTO   5222
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
12D7A:  MOVLW  42
12D7C:  MOVWF  FF6
12D7E:  MOVLW  22
12D80:  MOVWF  FF7
12D82:  MOVLW  00
12D84:  MOVWF  FF8
12D86:  CALL   22DC
.................... 
....................    //Start loop
....................    while(TRUE)
....................    {
....................       if(boss_receive_buffer_size > 0)
12D8A:  MOVF   4A,F
12D8C:  BTFSC  FD8.2
12D8E:  GOTO   12E30
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
12D92:  MOVLB  1
12D94:  CLRF   xA0
12D96:  MOVLW  2A
12D98:  MOVWF  x9F
12D9A:  MOVFF  4A,1A1
12D9E:  MOVLB  0
12DA0:  GOTO   555E
12DA4:  MOVFF  02,03
12DA8:  MOVF   01,W
12DAA:  MOVWF  FE1
12DAC:  MOVFF  03,FE2
12DB0:  MOVLW  01
12DB2:  MOVWF  FEA
12DB4:  MOVLW  8D
12DB6:  MOVWF  FE9
12DB8:  MOVLW  0C
12DBA:  MOVWF  01
12DBC:  MOVFF  FE6,FEE
12DC0:  DECFSZ 01,F
12DC2:  GOTO   12DBC
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
12DC6:  MOVLB  1
12DC8:  CLRF   xE0
12DCA:  MOVLW  2A
12DCC:  MOVWF  xDF
12DCE:  CLRF   xE2
12DD0:  MOVLW  4A
12DD2:  MOVWF  xE1
12DD4:  MOVLB  0
12DD6:  CALL   5760
....................          
....................          if(recieve_cmd.is_exist){
12DDA:  MOVLB  1
12DDC:  BTFSC  x8F.0
12DDE:  BRA    12DE6
12DE0:  MOVLB  0
12DE2:  GOTO   12E30
12DE6:  MOVLB  0
....................             is_finished = execute_command(&recieve_cmd); // FIX: 戻り値を保持
12DE8:  MOVLW  01
12DEA:  MOVLB  1
12DEC:  MOVWF  x9A
12DEE:  MOVLW  8D
12DF0:  MOVWF  x99
12DF2:  MOVLB  0
12DF4:  GOTO   FF32
12DF8:  MOVLB  1
12DFA:  BCF    x8C.0
12DFC:  BTFSC  01.0
12DFE:  BSF    x8C.0
....................             if (is_finished == TRUE)
12E00:  BTFSC  x8C.0
12E02:  BRA    12E0A
12E04:  MOVLB  0
12E06:  GOTO   12E20
12E0A:  MOVLB  0
....................             {
....................                fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\n");
12E0C:  MOVLW  60
12E0E:  MOVWF  FF6
12E10:  MOVLW  22
12E12:  MOVWF  FF7
12E14:  MOVLW  00
12E16:  MOVWF  FF8
12E18:  CALL   22DC
....................                
.................... 
....................             }else{
12E1C:  GOTO   12E30
....................                fprintf(PC,"\r\nwaiting for BOSS PIC command");
12E20:  MOVLW  82
12E22:  MOVWF  FF6
12E24:  MOVLW  22
12E26:  MOVWF  FF7
12E28:  MOVLW  00
12E2A:  MOVWF  FF8
12E2C:  CALL   22DC
....................             }
....................          }
....................       }
....................          
....................       delay_ms(500);
12E30:  MOVLW  02
12E32:  MOVLB  1
12E34:  MOVWF  x99
12E36:  MOVLB  0
12E38:  MOVLW  FA
12E3A:  MOVLB  B
12E3C:  MOVWF  x02
12E3E:  MOVLB  0
12E40:  CALL   22AE
12E44:  MOVLB  1
12E46:  DECFSZ x99,F
12E48:  BRA    12E4E
12E4A:  BRA    12E52
12E4C:  MOVLB  0
12E4E:  MOVLB  0
12E50:  BRA    12E38
....................       fprintf(PC, ".");
12E52:  MOVLW  2E
12E54:  MOVLB  0
12E56:  BTFSS  FA6.6
12E58:  GOTO   12E56
12E5C:  MOVLB  E
12E5E:  MOVWF  xF9
12E60:  MOVLB  0
12E62:  GOTO   12D8A
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
12E66:  MOVLW  A2
12E68:  MOVWF  FF6
12E6A:  MOVLW  22
12E6C:  MOVWF  FF7
12E6E:  MOVLW  00
12E70:  MOVWF  FF8
12E72:  CALL   22DC
....................    
.................... }
.................... // End of files
12E76:  SLEEP 

Configuration Fuses:
   Word  1: F6A0   STVREN NOXINST NODEBUG NOBROWNOUT BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS NODSWDT DSWDTOSC_INT
