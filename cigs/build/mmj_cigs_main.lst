CCS PCH C Compiler, Version 5.104, 57077               21-9-25 12:27

               Filename:   build\mmj_cigs_main.lst

               ROM used:   67888 bytes (52%)
                           Largest free fragment is 63068
               RAM used:   567 (16%) at main() level
                           3054 (85%) worst case
               Stack used: 9 locations (8 in main + 1 for interrupts)
               Stack size: 31

*
00000:  NOP   
00002:  GOTO   102C2
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  F9D.0
0005E:  GOTO   0068
00062:  BTFSC  F9E.0
00064:  GOTO   019A
00068:  BTFSS  F61.5
0006A:  GOTO   0074
0006E:  BTFSC  FA6.5
00070:  GOTO   0202
00074:  MOVFF  0E,00
00078:  MOVFF  0F,01
0007C:  MOVFF  10,02
00080:  MOVFF  11,03
00084:  MOVFF  0C,FE9
00088:  MOVFF  07,FEA
0008C:  BSF    07.7
0008E:  MOVFF  08,FE1
00092:  MOVFF  09,FE2
00096:  MOVFF  0A,FD9
0009A:  MOVFF  0B,FDA
0009E:  MOVFF  12,FF3
000A2:  MOVFF  13,FF4
000A6:  MOVFF  14,FFA
000AA:  MOVFF  15,FF5
000AE:  MOVFF  16,FF6
000B2:  MOVFF  17,FF7
000B6:  MOVFF  18,FF8
000BA:  MOVFF  19,FFB
000BE:  MOVF   04,W
000C0:  MOVFF  06,FE0
000C4:  MOVFF  05,FD8
000C8:  RETFIE 0
.................... #include "mmj_cigs_main.h"  // ルート直下のヘッダー
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... #opt 0 // 0 = no optimization
.................... 
.................... //==============================================================================
.................... // CCS C 最適化構造: ヘッダー分散 + .cファイル統合
.................... //==============================================================================
.................... 
.................... // レベル1: システム設定
.................... #include "hal/mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
000CA:  CLRF   FF7
000CC:  ADDLW  DE
000CE:  MOVWF  FF6
000D0:  MOVLW  00
000D2:  ADDWFC FF7,F
000D4:  MOVLW  00
000D6:  MOVWF  FF8
000D8:  TBLRD*+
000DA:  MOVF   FF5,W
000DC:  RETURN 0
000DE:  DATA 00,00
000E0:  DATA AA,06
000E2:  DATA FF,0F
000E4:  DATA AA,06
000E6:  DATA 00,10
000E8:  DATA 00,00
000EA:  DATA 00,10
000EC:  DATA AA,06
000EE:  DATA FF,1F
000F0:  DATA AA,06
000F2:  DATA 00,00
000F4:  DATA 01,00
000F6:  DATA 00,20
000F8:  DATA AA,06
000FA:  DATA FF,1F
000FC:  DATA B4,06
000FE:  DATA 00,00
00100:  DATA 01,00
00102:  DATA 00,20
00104:  DATA B4,06
00106:  DATA FF,1F
00108:  DATA BE,06
0010A:  DATA 00,00
0010C:  DATA 01,00
0010E:  DATA 00,20
00110:  DATA BE,06
00112:  DATA FF,2F
00114:  DATA FE,06
00116:  DATA 00,00
00118:  DATA 01,00
0011A:  DATA 00,30
0011C:  DATA FE,06
0011E:  DATA FF,2F
00120:  DATA 08,07
00122:  DATA 00,00
00124:  DATA 01,00
00126:  DATA 00,30
00128:  DATA 08,07
0012A:  DATA FF,3F
0012C:  DATA 48,07
0012E:  DATA 00,00
00130:  DATA 01,00
00132:  CLRF   FF7
00134:  ADDLW  46
00136:  MOVWF  FF6
00138:  MOVLW  01
0013A:  ADDWFC FF7,F
0013C:  MOVLW  00
0013E:  MOVWF  FF8
00140:  TBLRD*+
00142:  MOVF   FF5,W
00144:  RETURN 0
00146:  DATA 00,00
00148:  DATA 00,00
0014A:  DATA FF,0F
0014C:  DATA 00,00
0014E:  DATA 00,10
00150:  DATA 00,00
00152:  DATA 00,00
00154:  DATA 01,00
00156:  DATA FF,0F
00158:  DATA 14,00
0015A:  DATA 00,00
0015C:  DATA 01,00
0015E:  DATA 00,10
00160:  DATA 28,00
00162:  DATA FF,0F
00164:  DATA 32,00
00166:  DATA 00,00
00168:  DATA 01,00
0016A:  DATA 00,10
0016C:  DATA 72,00
0016E:  DATA FF,0F
00170:  DATA 7C,00
00172:  DATA 00,00
00174:  DATA 01,00
00176:  DATA 00,10
00178:  DATA 7C,00
0017A:  DATA FF,0F
0017C:  DATA BC,00
0017E:  DATA 00,00
00180:  DATA 01,00
00182:  DATA 00,10
00184:  DATA 72,00
00186:  DATA FF,0F
00188:  DATA 7C,00
0018A:  DATA 00,00
0018C:  DATA 01,00
0018E:  DATA 00,10
00190:  DATA 7C,00
00192:  DATA FF,0F
00194:  DATA BC,00
00196:  DATA 00,00
00198:  DATA 01,00
*
001BA:  DATA 54,69
001BC:  DATA 6D,65
001BE:  DATA 72,20
001C0:  DATA 49,6E
001C2:  DATA 69,74
001C4:  DATA 69,61
001C6:  DATA 6C,69
001C8:  DATA 7A,65
001CA:  DATA 0D,0A
001CC:  DATA 00,00
001CE:  DATA 09,43
001D0:  DATA 6F,6D
001D2:  DATA 70,6C
001D4:  DATA 65,74
001D6:  DATA 65,0D
001D8:  DATA 0A,00
*
0024A:  DATA 55,41
0024C:  DATA 52,54
0024E:  DATA 20,49
00250:  DATA 6E,69
00252:  DATA 74,69
00254:  DATA 61,6C
00256:  DATA 69,7A
00258:  DATA 65,0D
0025A:  DATA 0A,00
0025C:  DATA 09,43
0025E:  DATA 6F,6D
00260:  DATA 70,6C
00262:  DATA 65,74
00264:  DATA 65,0D
00266:  DATA 0A,00
00268:  DATA 41,44
0026A:  DATA 37,34
0026C:  DATA 39,30
0026E:  DATA 20,49
00270:  DATA 6E,69
00272:  DATA 74,69
00274:  DATA 61,6C
00276:  DATA 69,7A
00278:  DATA 65,0D
0027A:  DATA 0A,00
0027C:  DATA 09,43
0027E:  DATA 6F,6E
00280:  DATA 6E,65
00282:  DATA 63,74
00284:  DATA 20,65
00286:  DATA 72,72
00288:  DATA 6F,72
0028A:  DATA 21,0D
0028C:  DATA 0A,00
0028E:  DATA 09,43
00290:  DATA 6F,6E
00292:  DATA 6E,65
00294:  DATA 63,74
00296:  DATA 20,73
00298:  DATA 75,63
0029A:  DATA 63,65
0029C:  DATA 73,73
0029E:  DATA 66,75
002A0:  DATA 6C,0D
002A2:  DATA 0A,00
002A4:  DATA 09,43
002A6:  DATA 6F,6D
002A8:  DATA 70,6C
002AA:  DATA 65,74
002AC:  DATA 65,0D
002AE:  DATA 0A,00
002B0:  DATA 4D,43
002B2:  DATA 50,34
002B4:  DATA 39,30
002B6:  DATA 31,20
002B8:  DATA 49,6E
002BA:  DATA 69,74
002BC:  DATA 69,61
002BE:  DATA 6C,69
002C0:  DATA 7A,65
002C2:  DATA 0D,0A
002C4:  DATA 00,00
002C6:  DATA 09,5B
002C8:  DATA 44,41
002CA:  DATA 43,20
002CC:  DATA 50,6F
002CE:  DATA 72,74
002D0:  DATA 20,31
002D2:  DATA 5D,20
002D4:  DATA 43,6F
002D6:  DATA 6E,6E
002D8:  DATA 65,63
002DA:  DATA 74,20
002DC:  DATA 65,72
002DE:  DATA 72,6F
002E0:  DATA 72,21
002E2:  DATA 0D,0A
002E4:  DATA 00,00
002E6:  DATA 09,5B
002E8:  DATA 44,41
002EA:  DATA 43,20
002EC:  DATA 50,6F
002EE:  DATA 72,74
002F0:  DATA 20,31
002F2:  DATA 5D,20
002F4:  DATA 43,6F
002F6:  DATA 6E,6E
002F8:  DATA 65,63
002FA:  DATA 74,20
002FC:  DATA 73,75
002FE:  DATA 63,63
00300:  DATA 65,73
00302:  DATA 73,66
00304:  DATA 75,6C
00306:  DATA 0D,0A
00308:  DATA 00,00
0030A:  DATA 09,5B
0030C:  DATA 44,41
0030E:  DATA 43,20
00310:  DATA 50,6F
00312:  DATA 72,74
00314:  DATA 20,32
00316:  DATA 5D,20
00318:  DATA 43,6F
0031A:  DATA 6E,6E
0031C:  DATA 65,63
0031E:  DATA 74,20
00320:  DATA 65,72
00322:  DATA 72,6F
00324:  DATA 72,21
00326:  DATA 0D,0A
00328:  DATA 00,00
0032A:  DATA 09,5B
0032C:  DATA 44,41
0032E:  DATA 43,20
00330:  DATA 50,6F
00332:  DATA 72,74
00334:  DATA 20,32
00336:  DATA 5D,20
00338:  DATA 43,6F
0033A:  DATA 6E,6E
0033C:  DATA 65,63
0033E:  DATA 74,20
00340:  DATA 73,75
00342:  DATA 63,63
00344:  DATA 65,73
00346:  DATA 73,66
00348:  DATA 75,6C
0034A:  DATA 0D,0A
0034C:  DATA 00,00
0034E:  DATA 09,43
00350:  DATA 6F,6D
00352:  DATA 70,6C
00354:  DATA 65,74
00356:  DATA 65,0D
00358:  DATA 0A,00
0035A:  DATA 45,6E
0035C:  DATA 71,75
0035E:  DATA 65,75
00360:  DATA 65,20
00362:  DATA 46,6C
00364:  DATA 61,73
00366:  DATA 68,20
00368:  DATA 4F,70
0036A:  DATA 65,72
0036C:  DATA 61,74
0036E:  DATA 69,6F
00370:  DATA 6E,0D
00372:  DATA 0A,00
00374:  DATA 46,6C
00376:  DATA 61,73
00378:  DATA 68,20
0037A:  DATA 71,75
0037C:  DATA 65,75
0037E:  DATA 65,20
00380:  DATA 69,73
00382:  DATA 20,66
00384:  DATA 75,6C
00386:  DATA 6C,21
00388:  DATA 21,21
0038A:  DATA 0D,0A
0038C:  DATA 00,00
0038E:  DATA 46,6C
00390:  DATA 61,73
00392:  DATA 68,20
00394:  DATA 71,75
00396:  DATA 65,75
00398:  DATA 65,20
0039A:  DATA 69,73
0039C:  DATA 20,65
0039E:  DATA 6D,70
003A0:  DATA 74,79
003A2:  DATA 0D,0A
003A4:  DATA 00,00
003A6:  DATA 0D,0A
003A8:  DATA 53,74
003AA:  DATA 61,72
003AC:  DATA 74,20
003AE:  DATA 6D,61
003B0:  DATA 6B,65
003B2:  DATA 5F,72
003B4:  DATA 65,63
003B6:  DATA 65,69
003B8:  DATA 76,65
003BA:  DATA 5F,63
003BC:  DATA 6F,6D
003BE:  DATA 6D,61
003C0:  DATA 6E,64
003C2:  DATA 0D,0A
003C4:  DATA 00,00
003C6:  DATA 09,5B
003C8:  DATA 42,4F
003CA:  DATA 53,53
003CC:  DATA 5D,20
003CE:  DATA 3E,3E
003D0:  DATA 3E,20
003D2:  DATA 00,00
003D4:  DATA 45,6E
003D6:  DATA 64,20
003D8:  DATA 6D,61
003DA:  DATA 6B,65
003DC:  DATA 5F,72
003DE:  DATA 65,63
003E0:  DATA 69,76
003E2:  DATA 65,5F
003E4:  DATA 63,6F
003E6:  DATA 6D,6D
003E8:  DATA 61,6E
003EA:  DATA 64,0D
003EC:  DATA 0A,0D
003EE:  DATA 0A,00
003F0:  DATA 73,69
003F2:  DATA 67,6E
003F4:  DATA 61,6C
003F6:  DATA 20,65
003F8:  DATA 6E,64
003FA:  DATA 20,77
003FC:  DATA 69,74
003FE:  DATA 68,20
00400:  DATA 53,46
00402:  DATA 44,0D
00404:  DATA 0A,00
00406:  DATA 64,6F
00408:  DATA 6E,27
0040A:  DATA 74,20
0040C:  DATA 66,69
0040E:  DATA 6E,64
00410:  DATA 20,53
00412:  DATA 46,44
00414:  DATA 0D,0A
00416:  DATA 00,00
00418:  DATA 09,2D
0041A:  DATA 3E,20
0041C:  DATA 49,6E
0041E:  DATA 76,61
00420:  DATA 6C,69
00422:  DATA 64,20
00424:  DATA 46,72
00426:  DATA 61,6D
00428:  DATA 65,20
0042A:  DATA 49,44
0042C:  DATA 20,72
0042E:  DATA 65,63
00430:  DATA 65,69
00432:  DATA 76,65
00434:  DATA 64,3A
00436:  DATA 20,25
00438:  DATA 58,0D
0043A:  DATA 0A,00
0043C:  DATA 09,2D
0043E:  DATA 3E,20
00440:  DATA 43,52
00442:  DATA 43,20
00444:  DATA 65,72
00446:  DATA 72,6F
00448:  DATA 72,21
0044A:  DATA 0D,0A
0044C:  DATA 00,00
0044E:  DATA 09,09
00450:  DATA 2D,3E
00452:  DATA 20,72
00454:  DATA 65,63
00456:  DATA 65,69
00458:  DATA 76,65
0045A:  DATA 64,20
0045C:  DATA 43,52
0045E:  DATA 43,3A
00460:  DATA 20,25
00462:  DATA 58,0D
00464:  DATA 0A,00
00466:  DATA 09,09
00468:  DATA 20,20
0046A:  DATA 20,63
0046C:  DATA 6F,6C
0046E:  DATA 6C,65
00470:  DATA 63,74
00472:  DATA 20,43
00474:  DATA 52,43
00476:  DATA 20,3A
00478:  DATA 20,25
0047A:  DATA 58,0D
0047C:  DATA 0A,00
0047E:  DATA 09,2D
00480:  DATA 3E,20
00482:  DATA 49,6E
00484:  DATA 76,61
00486:  DATA 6C,69
00488:  DATA 64,20
0048A:  DATA 64,65
0048C:  DATA 76,69
0048E:  DATA 63,65
00490:  DATA 20,49
00492:  DATA 44,20
00494:  DATA 72,65
00496:  DATA 63,65
00498:  DATA 69,76
0049A:  DATA 65,64
0049C:  DATA 0D,0A
0049E:  DATA 00,00
004A0:  DATA 09,09
004A2:  DATA 2D,3E
004A4:  DATA 20,72
004A6:  DATA 65,63
004A8:  DATA 65,69
004AA:  DATA 76,65
004AC:  DATA 64,3A
004AE:  DATA 20,20
004B0:  DATA 20,20
004B2:  DATA 20,25
004B4:  DATA 58,0D
004B6:  DATA 0A,00
004B8:  DATA 09,09
004BA:  DATA 20,20
004BC:  DATA 20,4D
004BE:  DATA 79,20
004C0:  DATA 64,65
004C2:  DATA 76,69
004C4:  DATA 63,65
004C6:  DATA 20,49
004C8:  DATA 44,3A
004CA:  DATA 20,25
004CC:  DATA 58,0D
004CE:  DATA 0A,00
004D0:  DATA 09,5B
004D2:  DATA 42,4F
004D4:  DATA 53,53
004D6:  DATA 5D,20
004D8:  DATA 3C,3C
004DA:  DATA 3C,20
004DC:  DATA 00,00
004DE:  DATA 53,74
004E0:  DATA 61,72
004E2:  DATA 74,20
004E4:  DATA 53,4D
004E6:  DATA 46,20
004E8:  DATA 75,73
004EA:  DATA 69,6E
004EC:  DATA 67,20
004EE:  DATA 72,65
004F0:  DATA 71,65
004F2:  DATA 73,74
004F4:  DATA 20,73
004F6:  DATA 65,61
004F8:  DATA 71,75
004FA:  DATA 65,6E
004FC:  DATA 63,65
004FE:  DATA 0D,0A
00500:  DATA 00,00
00502:  DATA 45,72
00504:  DATA 72,6F
00506:  DATA 72,21
00508:  DATA 20,52
0050A:  DATA 65,63
0050C:  DATA 65,69
0050E:  DATA 76,69
00510:  DATA 6E,67
00512:  DATA 20,63
00514:  DATA 6F,6D
00516:  DATA 6D,61
00518:  DATA 6E,64
0051A:  DATA 20,69
0051C:  DATA 6E,63
0051E:  DATA 6F,6E
00520:  DATA 73,69
00522:  DATA 73,74
00524:  DATA 65,6E
00526:  DATA 74,20
00528:  DATA 77,69
0052A:  DATA 74,68
0052C:  DATA 20,74
0052E:  DATA 68,65
00530:  DATA 20,64
00532:  DATA 65,73
00534:  DATA 69,67
00536:  DATA 6E,0D
00538:  DATA 0A,00
0053A:  DATA 53,4D
0053C:  DATA 46,20
0053E:  DATA 75,73
00540:  DATA 65,20
00542:  DATA 72,65
00544:  DATA 71,75
00546:  DATA 65,73
00548:  DATA 74,20
0054A:  DATA 61,6C
0054C:  DATA 6C,6F
0054E:  DATA 77,65
00550:  DATA 64,0D
00552:  DATA 0A,00
00554:  DATA 53,4D
00556:  DATA 46,20
00558:  DATA 75,73
0055A:  DATA 65,20
0055C:  DATA 72,65
0055E:  DATA 71,75
00560:  DATA 65,73
00562:  DATA 74,20
00564:  DATA 64,65
00566:  DATA 6E,79
00568:  DATA 65,64
0056A:  DATA 0D,0A
0056C:  DATA 00,00
0056E:  DATA 52,65
00570:  DATA 74,72
00572:  DATA 79,20
00574:  DATA 72,65
00576:  DATA 71,75
00578:  DATA 65,73
0057A:  DATA 74,20
0057C:  DATA 74,6F
0057E:  DATA 20,42
00580:  DATA 4F,53
00582:  DATA 53,20
00584:  DATA 50,49
00586:  DATA 43,0D
00588:  DATA 0A,00
0058A:  DATA 45,72
0058C:  DATA 72,6F
0058E:  DATA 72,21
00590:  DATA 20,52
00592:  DATA 65,63
00594:  DATA 65,69
00596:  DATA 76,69
00598:  DATA 6E,67
0059A:  DATA 20,63
0059C:  DATA 6F,6D
0059E:  DATA 6D,61
005A0:  DATA 6E,64
005A2:  DATA 20,69
005A4:  DATA 6E,63
005A6:  DATA 6F,6E
005A8:  DATA 73,69
005AA:  DATA 73,74
005AC:  DATA 65,6E
005AE:  DATA 74,20
005B0:  DATA 77,69
005B2:  DATA 74,68
005B4:  DATA 20,74
005B6:  DATA 68,65
005B8:  DATA 20,64
005BA:  DATA 65,73
005BC:  DATA 69,67
005BE:  DATA 6E,0D
005C0:  DATA 0A,00
005C2:  DATA 45,6E
005C4:  DATA 64,20
005C6:  DATA 53,4D
005C8:  DATA 46,20
005CA:  DATA 75,73
005CC:  DATA 69,6E
005CE:  DATA 67,20
005D0:  DATA 72,65
005D2:  DATA 71,65
005D4:  DATA 73,74
005D6:  DATA 20,73
005D8:  DATA 65,61
005DA:  DATA 71,75
005DC:  DATA 65,6E
005DE:  DATA 63,65
005E0:  DATA 0D,0A
005E2:  DATA 00,00
005E4:  DATA 56,6F
005E6:  DATA 6C,74
005E8:  DATA 31,2C
005EA:  DATA 43,75
005EC:  DATA 72,72
005EE:  DATA 31,2C
005F0:  DATA 56,6F
005F2:  DATA 6C,74
005F4:  DATA 32,2C
005F6:  DATA 43,75
005F8:  DATA 72,72
005FA:  DATA 32,0D
005FC:  DATA 0A,00
005FE:  DATA 73,77
00600:  DATA 65,65
00602:  DATA 70,20
00604:  DATA 73,74
00606:  DATA 65,70
00608:  DATA 20,3A
0060A:  DATA 20,25
0060C:  DATA 30,34
0060E:  DATA 4C,58
00610:  DATA 0D,0A
00612:  DATA 00,00
00614:  DATA 0D,0A
00616:  DATA 70,6F
00618:  DATA 72,74
0061A:  DATA 31,0D
0061C:  DATA 0A,00
0061E:  DATA 0D,0A
00620:  DATA 70,6F
00622:  DATA 72,74
00624:  DATA 32,0D
00626:  DATA 0A,00
00628:  DATA 44,41
0062A:  DATA 54,41
0062C:  DATA 20,57
0062E:  DATA 52,49
00630:  DATA 54,45
00632:  DATA 20,49
00634:  DATA 56,31
00636:  DATA 0D,0A
00638:  DATA 00,00
0063A:  DATA 5B,50
0063C:  DATA 49,43
0063E:  DATA 4C,4F
00640:  DATA 47,5D
00642:  DATA 20,3A
00644:  DATA 20,00
00646:  DATA 53,4D
00648:  DATA 46,20
0064A:  DATA 44,61
0064C:  DATA 74,61
0064E:  DATA 20,54
00650:  DATA 61,62
00652:  DATA 6C,65
00654:  DATA 20,49
00656:  DATA 6E,69
00658:  DATA 74,69
0065A:  DATA 61,6C
0065C:  DATA 69,7A
0065E:  DATA 65,0D
00660:  DATA 0A,00
00662:  DATA 43,52
00664:  DATA 43,20
00666:  DATA 76,65
00668:  DATA 72,69
0066A:  DATA 66,69
0066C:  DATA 63,61
0066E:  DATA 74,69
00670:  DATA 6F,6E
00672:  DATA 20,70
00674:  DATA 61,73
00676:  DATA 73,65
00678:  DATA 64,20
0067A:  DATA 6F,6E
0067C:  DATA 20,61
0067E:  DATA 74,74
00680:  DATA 65,6D
00682:  DATA 70,74
00684:  DATA 20,25
00686:  DATA 64,0D
00688:  DATA 0A,00
0068A:  DATA 43,52
0068C:  DATA 43,20
0068E:  DATA 76,65
00690:  DATA 72,69
00692:  DATA 66,69
00694:  DATA 63,61
00696:  DATA 74,69
00698:  DATA 6F,6E
0069A:  DATA 20,66
0069C:  DATA 61,69
0069E:  DATA 6C,65
006A0:  DATA 64,20
006A2:  DATA 61,66
006A4:  DATA 74,65
006A6:  DATA 72,20
006A8:  DATA 25,64
006AA:  DATA 20,61
006AC:  DATA 74,74
006AE:  DATA 65,6D
006B0:  DATA 70,74
006B2:  DATA 73,0D
006B4:  DATA 0A,00
006B6:  DATA 43,52
006B8:  DATA 43,20
006BA:  DATA 76,65
006BC:  DATA 72,69
006BE:  DATA 66,69
006C0:  DATA 63,61
006C2:  DATA 74,69
006C4:  DATA 6F,6E
006C6:  DATA 20,70
006C8:  DATA 61,73
006CA:  DATA 73,65
006CC:  DATA 64,20
006CE:  DATA 6F,6E
006D0:  DATA 20,61
006D2:  DATA 74,74
006D4:  DATA 65,6D
006D6:  DATA 70,74
006D8:  DATA 20,25
006DA:  DATA 64,0D
006DC:  DATA 0A,00
006DE:  DATA 45,72
006E0:  DATA 72,6F
006E2:  DATA 72,3A
006E4:  DATA 20,43
006E6:  DATA 52,43
006E8:  DATA 20,76
006EA:  DATA 65,72
006EC:  DATA 69,66
006EE:  DATA 69,63
006F0:  DATA 61,74
006F2:  DATA 69,6F
006F4:  DATA 6E,20
006F6:  DATA 66,61
006F8:  DATA 69,6C
006FA:  DATA 65,64
006FC:  DATA 20,61
006FE:  DATA 66,74
00700:  DATA 65,72
00702:  DATA 20,25
00704:  DATA 64,20
00706:  DATA 61,74
00708:  DATA 74,65
0070A:  DATA 6D,70
0070C:  DATA 74,73
0070E:  DATA 0D,0A
00710:  DATA 00,00
00712:  DATA 0D,0A
00714:  DATA 5F,5F
00716:  DATA 5F,5F
00718:  DATA 5F,5F
0071A:  DATA 5F,5F
0071C:  DATA 5F,5F
0071E:  DATA 5F,5F
00720:  DATA 5F,5F
00722:  DATA 5F,5F
00724:  DATA 5F,5F
00726:  DATA 5F,5F
00728:  DATA 5F,5F
0072A:  DATA 5F,5F
0072C:  DATA 5F,5F
0072E:  DATA 5F,5F
00730:  DATA 5F,5F
00732:  DATA 5F,0D
00734:  DATA 0A,00
00736:  DATA 5F,5F
00738:  DATA 5F,5F
0073A:  DATA 5F,5F
0073C:  DATA 5F,5F
0073E:  DATA 5F,53
00740:  DATA 74,61
00742:  DATA 72,74
00744:  DATA 20,63
00746:  DATA 6F,70
00748:  DATA 79,5F
0074A:  DATA 64,61
0074C:  DATA 74,61
0074E:  DATA 5F,5F
00750:  DATA 5F,5F
00752:  DATA 5F,5F
00754:  DATA 5F,5F
00756:  DATA 5F,0D
00758:  DATA 0A,00
0075A:  DATA 45,72
0075C:  DATA 72,6F
0075E:  DATA 72,3A
00760:  DATA 20,4D
00762:  DATA 49,53
00764:  DATA 20,46
00766:  DATA 4D,20
00768:  DATA 69,73
0076A:  DATA 20,6E
0076C:  DATA 6F,74
0076E:  DATA 20,63
00770:  DATA 6F,6E
00772:  DATA 6E,65
00774:  DATA 63,74
00776:  DATA 65,64
00778:  DATA 0D,0A
0077A:  DATA 00,00
0077C:  DATA 45,72
0077E:  DATA 72,6F
00780:  DATA 72,3A
00782:  DATA 20,53
00784:  DATA 4D,46
00786:  DATA 20,69
00788:  DATA 73,20
0078A:  DATA 6E,6F
0078C:  DATA 74,20
0078E:  DATA 63,6F
00790:  DATA 6E,6E
00792:  DATA 65,63
00794:  DATA 74,65
00796:  DATA 64,0D
00798:  DATA 0A,00
0079A:  DATA 5B,53
0079C:  DATA 4D,46
0079E:  DATA 20,41
007A0:  DATA 44,44
007A2:  DATA 52,45
007A4:  DATA 53,53
007A6:  DATA 5D,0D
007A8:  DATA 0A,00
007AA:  DATA 09,2D
007AC:  DATA 2D,2D
007AE:  DATA 2D,2D
007B0:  DATA 2D,2D
007B2:  DATA 2D,2D
007B4:  DATA 2D,2D
007B6:  DATA 2D,09
007B8:  DATA 2D,2D
007BA:  DATA 2D,2D
007BC:  DATA 2D,2D
007BE:  DATA 2D,2D
007C0:  DATA 2D,2D
007C2:  DATA 2D,2D
007C4:  DATA 2D,09
007C6:  DATA 2D,2D
007C8:  DATA 2D,2D
007CA:  DATA 2D,2D
007CC:  DATA 2D,2D
007CE:  DATA 2D,2D
007D0:  DATA 2D,2D
007D2:  DATA 2D,0D
007D4:  DATA 0A,00
007D6:  DATA 09,53
007D8:  DATA 54,41
007DA:  DATA 52,54
007DC:  DATA 09,30
007DE:  DATA 78,25
007E0:  DATA 30,38
007E2:  DATA 4C,58
007E4:  DATA 0D,0A
007E6:  DATA 00,00
007E8:  DATA 09,45
007EA:  DATA 4E,44
007EC:  DATA 09,30
007EE:  DATA 78,25
007F0:  DATA 30,38
007F2:  DATA 4C,58
007F4:  DATA 0D,0A
007F6:  DATA 00,00
007F8:  DATA 09,55
007FA:  DATA 53,45
007FC:  DATA 44,09
007FE:  DATA 30,78
00800:  DATA 25,30
00802:  DATA 38,4C
00804:  DATA 58,0D
00806:  DATA 0A,00
00808:  DATA 09,4E
0080A:  DATA 45,58
0080C:  DATA 54,09
0080E:  DATA 30,78
00810:  DATA 25,30
00812:  DATA 38,4C
00814:  DATA 58,0D
00816:  DATA 0A,00
00818:  DATA 5B,4D
0081A:  DATA 49,53
0081C:  DATA 46,20
0081E:  DATA 41,44
00820:  DATA 44,52
00822:  DATA 45,53
00824:  DATA 53,5D
00826:  DATA 0D,0A
00828:  DATA 00,00
0082A:  DATA 09,2D
0082C:  DATA 2D,2D
0082E:  DATA 2D,2D
00830:  DATA 2D,2D
00832:  DATA 2D,2D
00834:  DATA 2D,2D
00836:  DATA 2D,09
00838:  DATA 2D,2D
0083A:  DATA 2D,2D
0083C:  DATA 2D,2D
0083E:  DATA 2D,2D
00840:  DATA 2D,2D
00842:  DATA 2D,2D
00844:  DATA 2D,09
00846:  DATA 2D,2D
00848:  DATA 2D,2D
0084A:  DATA 2D,2D
0084C:  DATA 2D,2D
0084E:  DATA 2D,2D
00850:  DATA 2D,2D
00852:  DATA 2D,0D
00854:  DATA 0A,00
00856:  DATA 09,53
00858:  DATA 54,41
0085A:  DATA 52,54
0085C:  DATA 09,30
0085E:  DATA 78,25
00860:  DATA 30,38
00862:  DATA 4C,58
00864:  DATA 0D,0A
00866:  DATA 00,00
00868:  DATA 09,45
0086A:  DATA 4E,44
0086C:  DATA 09,30
0086E:  DATA 78,25
00870:  DATA 30,38
00872:  DATA 4C,58
00874:  DATA 0D,0A
00876:  DATA 00,00
00878:  DATA 09,53
0087A:  DATA 52,43
0087C:  DATA 09,30
0087E:  DATA 78,25
00880:  DATA 30,38
00882:  DATA 4C,58
00884:  DATA 0D,0A
00886:  DATA 00,00
00888:  DATA 09,53
0088A:  DATA 49,5A
0088C:  DATA 45,09
0088E:  DATA 30,78
00890:  DATA 25,30
00892:  DATA 38,4C
00894:  DATA 58,0D
00896:  DATA 0A,00
00898:  DATA 09,2D
0089A:  DATA 2D,2D
0089C:  DATA 2D,2D
0089E:  DATA 2D,2D
008A0:  DATA 2D,2D
008A2:  DATA 2D,2D
008A4:  DATA 2D,09
008A6:  DATA 2D,2D
008A8:  DATA 2D,2D
008AA:  DATA 2D,2D
008AC:  DATA 2D,2D
008AE:  DATA 2D,2D
008B0:  DATA 2D,2D
008B2:  DATA 2D,09
008B4:  DATA 2D,2D
008B6:  DATA 2D,2D
008B8:  DATA 2D,2D
008BA:  DATA 2D,2D
008BC:  DATA 2D,2D
008BE:  DATA 2D,2D
008C0:  DATA 2D,0D
008C2:  DATA 0A,00
008C4:  DATA 52,65
008C6:  DATA 6D,61
008C8:  DATA 69,6E
008CA:  DATA 69,6E
008CC:  DATA 67,20
008CE:  DATA 73,69
008D0:  DATA 7A,65
008D2:  DATA 20,74
008D4:  DATA 6F,20
008D6:  DATA 77,72
008D8:  DATA 69,74
008DA:  DATA 65,3A
008DC:  DATA 20,25
008DE:  DATA 6C,75
008E0:  DATA 20,62
008E2:  DATA 79,74
008E4:  DATA 65,73
008E6:  DATA 0D,0A
008E8:  DATA 00,00
008EA:  DATA 0D,0A
008EC:  DATA 5F,5F
008EE:  DATA 5F,5F
008F0:  DATA 5F,5F
008F2:  DATA 5F,5F
008F4:  DATA 5F,45
008F6:  DATA 6E,64
008F8:  DATA 20,63
008FA:  DATA 6F,70
008FC:  DATA 79,5F
008FE:  DATA 64,61
00900:  DATA 74,61
00902:  DATA 5F,5F
00904:  DATA 5F,5F
00906:  DATA 5F,5F
00908:  DATA 5F,5F
0090A:  DATA 5F,5F
0090C:  DATA 0D,0A
0090E:  DATA 00,00
00910:  DATA 6E,5F
00912:  DATA 5F,5F
00914:  DATA 5F,5F
00916:  DATA 5F,5F
00918:  DATA 5F,5F
0091A:  DATA 5F,5F
0091C:  DATA 5F,5F
0091E:  DATA 5F,5F
00920:  DATA 5F,5F
00922:  DATA 5F,5F
00924:  DATA 5F,5F
00926:  DATA 5F,5F
00928:  DATA 5F,5F
0092A:  DATA 5F,5F
0092C:  DATA 5F,5F
0092E:  DATA 5F,5F
00930:  DATA 0D,0A
00932:  DATA 0D,0A
00934:  DATA 00,00
00936:  DATA 0D,0A
00938:  DATA 5F,5F
0093A:  DATA 5F,5F
0093C:  DATA 5F,5F
0093E:  DATA 5F,5F
00940:  DATA 5F,5F
00942:  DATA 5F,5F
00944:  DATA 5F,5F
00946:  DATA 5F,5F
00948:  DATA 5F,5F
0094A:  DATA 5F,5F
0094C:  DATA 0D,0A
0094E:  DATA 00,00
00950:  DATA 5F,5F
00952:  DATA 5F,53
00954:  DATA 74,61
00956:  DATA 72,74
00958:  DATA 20,53
0095A:  DATA 4D,46
0095C:  DATA 20,52
0095E:  DATA 65,61
00960:  DATA 64,5F
00962:  DATA 5F,5F
00964:  DATA 5F,0D
00966:  DATA 0A,00
00968:  DATA 45,72
0096A:  DATA 72,6F
0096C:  DATA 72,3A
0096E:  DATA 20,52
00970:  DATA 65,61
00972:  DATA 64,20
00974:  DATA 61,64
00976:  DATA 64,72
00978:  DATA 65,73
0097A:  DATA 73,20
0097C:  DATA 30,78
0097E:  DATA 25,30
00980:  DATA 38,4C
00982:  DATA 58,20
00984:  DATA 6F,75
00986:  DATA 74,20
00988:  DATA 6F,66
0098A:  DATA 20,53
0098C:  DATA 4D,46
0098E:  DATA 20,6D
00990:  DATA 69,73
00992:  DATA 73,69
00994:  DATA 6F,6E
00996:  DATA 20,72
00998:  DATA 61,6E
0099A:  DATA 67,65
0099C:  DATA 20,5B
0099E:  DATA 30,78
009A0:  DATA 25,30
009A2:  DATA 38,4C
009A4:  DATA 58,20
009A6:  DATA 2D,20
009A8:  DATA 30,78
009AA:  DATA 25,30
009AC:  DATA 38,4C
009AE:  DATA 58,29
009B0:  DATA 0D,0A
009B2:  DATA 00,00
009B4:  DATA 57,61
009B6:  DATA 72,6E
009B8:  DATA 3A,20
009BA:  DATA 41,64
009BC:  DATA 6A,75
009BE:  DATA 73,74
009C0:  DATA 20,72
009C2:  DATA 65,61
009C4:  DATA 64,20
009C6:  DATA 73,69
009C8:  DATA 7A,65
009CA:  DATA 20,66
009CC:  DATA 72,6F
009CE:  DATA 6D,20
009D0:  DATA 25,6C
009D2:  DATA 75,20
009D4:  DATA 74,6F
009D6:  DATA 20,25
009D8:  DATA 6C,75
009DA:  DATA 20,28
009DC:  DATA 6D,69
009DE:  DATA 73,73
009E0:  DATA 69,6F
009E2:  DATA 6E,20
009E4:  DATA 65,6E
009E6:  DATA 64,29
009E8:  DATA 0D,0A
009EA:  DATA 00,00
009EC:  DATA 49,6E
009EE:  DATA 66,6F
009F0:  DATA 3A,20
009F2:  DATA 4E,6F
009F4:  DATA 74,68
009F6:  DATA 69,6E
009F8:  DATA 67,20
009FA:  DATA 74,6F
009FC:  DATA 20,72
009FE:  DATA 65,61
00A00:  DATA 64,20
00A02:  DATA 28,73
00A04:  DATA 69,7A
00A06:  DATA 65,3D
00A08:  DATA 30,29
00A0A:  DATA 0D,0A
00A0C:  DATA 00,00
00A0E:  DATA 49,6E
00A10:  DATA 20,53
00A12:  DATA 4D,46
00A14:  DATA 20,52
00A16:  DATA 65,61
00A18:  DATA 64,20
00A1A:  DATA 73,6F
00A1C:  DATA 75,72
00A1E:  DATA 63,65
00A20:  DATA 20,64
00A22:  DATA 61,74
00A24:  DATA 61,20
00A26:  DATA 61,64
00A28:  DATA 64,72
00A2A:  DATA 65,73
00A2C:  DATA 73,3A
00A2E:  DATA 20,25
00A30:  DATA 4C,58
00A32:  DATA 0D,0A
00A34:  DATA 00,00
00A36:  DATA 49,6E
00A38:  DATA 20,53
00A3A:  DATA 4D,46
00A3C:  DATA 20,52
00A3E:  DATA 65,61
00A40:  DATA 64,20
00A42:  DATA 64,61
00A44:  DATA 74,61
00A46:  DATA 20,73
00A48:  DATA 69,7A
00A4A:  DATA 65,20
00A4C:  DATA 20,20
00A4E:  DATA 20,20
00A50:  DATA 20,20
00A52:  DATA 20,20
00A54:  DATA 20,3A
00A56:  DATA 20,25
00A58:  DATA 6C,75
00A5A:  DATA 20,28
00A5C:  DATA 30,78
00A5E:  DATA 25,6C
00A60:  DATA 78,29
00A62:  DATA 0D,0A
00A64:  DATA 0D,0A
00A66:  DATA 00,00
00A68:  DATA 45,72
00A6A:  DATA 72,6F
00A6C:  DATA 72,3A
00A6E:  DATA 20,53
00A70:  DATA 4D,46
00A72:  DATA 20,69
00A74:  DATA 73,20
00A76:  DATA 6E,6F
00A78:  DATA 74,20
00A7A:  DATA 63,6F
00A7C:  DATA 6E,6E
00A7E:  DATA 65,63
00A80:  DATA 74,65
00A82:  DATA 64,0D
00A84:  DATA 0A,00
00A86:  DATA 52,45
00A88:  DATA 41,44
00A8A:  DATA 20,44
00A8C:  DATA 41,54
00A8E:  DATA 41,20
00A90:  DATA 46,52
00A92:  DATA 4F,4D
00A94:  DATA 20,53
00A96:  DATA 4D,46
00A98:  DATA 2E,2E
00A9A:  DATA 2E,0D
00A9C:  DATA 0A,00
00A9E:  DATA 0D,0A
00AA0:  DATA 5F,5F
00AA2:  DATA 5F,45
00AA4:  DATA 6E,64
00AA6:  DATA 20,53
00AA8:  DATA 4D,46
00AAA:  DATA 20,52
00AAC:  DATA 65,61
00AAE:  DATA 64,5F
00AB0:  DATA 5F,5F
00AB2:  DATA 5F,0D
00AB4:  DATA 0A,00
00AB6:  DATA 5F,5F
00AB8:  DATA 5F,5F
00ABA:  DATA 5F,5F
00ABC:  DATA 5F,5F
00ABE:  DATA 5F,5F
00AC0:  DATA 5F,5F
00AC2:  DATA 5F,5F
00AC4:  DATA 5F,5F
00AC6:  DATA 5F,5F
00AC8:  DATA 5F,5F
00ACA:  DATA 0D,0A
00ACC:  DATA 0D,0A
00ACE:  DATA 00,00
00AD0:  DATA 0D,0A
00AD2:  DATA 5F,5F
00AD4:  DATA 5F,5F
00AD6:  DATA 5F,5F
00AD8:  DATA 5F,5F
00ADA:  DATA 5F,5F
00ADC:  DATA 5F,5F
00ADE:  DATA 5F,5F
00AE0:  DATA 5F,5F
00AE2:  DATA 5F,5F
00AE4:  DATA 5F,5F
00AE6:  DATA 0D,0A
00AE8:  DATA 00,00
00AEA:  DATA 5F,5F
00AEC:  DATA 5F,53
00AEE:  DATA 74,61
00AF0:  DATA 72,74
00AF2:  DATA 20,73
00AF4:  DATA 6D,66
00AF6:  DATA 5F,65
00AF8:  DATA 72,61
00AFA:  DATA 73,65
00AFC:  DATA 5F,5F
00AFE:  DATA 5F,5F
00B00:  DATA 0D,0A
00B02:  DATA 00,00
00B04:  DATA 5B,53
00B06:  DATA 4D,46
00B08:  DATA 5D,20
00B0A:  DATA 45,72
00B0C:  DATA 61,73
00B0E:  DATA 65,20
00B10:  DATA 61,64
00B12:  DATA 64,72
00B14:  DATA 65,73
00B16:  DATA 73,20
00B18:  DATA 20,20
00B1A:  DATA 3A,20
00B1C:  DATA 25,4C
00B1E:  DATA 58,0D
00B20:  DATA 0A,00
00B22:  DATA 5B,53
00B24:  DATA 4D,46
00B26:  DATA 5D,20
00B28:  DATA 45,72
00B2A:  DATA 61,73
00B2C:  DATA 65,20
00B2E:  DATA 64,61
00B30:  DATA 74,61
00B32:  DATA 20,73
00B34:  DATA 69,7A
00B36:  DATA 65,20
00B38:  DATA 3A,20
00B3A:  DATA 25,6C
00B3C:  DATA 75,20
00B3E:  DATA 28,30
00B40:  DATA 78,25
00B42:  DATA 6C,78
00B44:  DATA 29,0D
00B46:  DATA 0A,0D
00B48:  DATA 0A,00
00B4A:  DATA 45,72
00B4C:  DATA 72,6F
00B4E:  DATA 72,3A
00B50:  DATA 20,53
00B52:  DATA 4D,46
00B54:  DATA 20,69
00B56:  DATA 73,20
00B58:  DATA 6E,6F
00B5A:  DATA 74,20
00B5C:  DATA 63,6F
00B5E:  DATA 6E,6E
00B60:  DATA 65,63
00B62:  DATA 74,65
00B64:  DATA 64,0D
00B66:  DATA 0A,00
00B68:  DATA 45,72
00B6A:  DATA 72,6F
00B6C:  DATA 72,3A
00B6E:  DATA 20,45
00B70:  DATA 72,61
00B72:  DATA 73,65
00B74:  DATA 20,73
00B76:  DATA 6F,75
00B78:  DATA 72,63
00B7A:  DATA 65,20
00B7C:  DATA 61,64
00B7E:  DATA 64,72
00B80:  DATA 65,73
00B82:  DATA 73,20
00B84:  DATA 30,78
00B86:  DATA 25,4C
00B88:  DATA 58,20
00B8A:  DATA 69,73
00B8C:  DATA 20,6F
00B8E:  DATA 75,74
00B90:  DATA 73,69
00B92:  DATA 64,65
00B94:  DATA 20,6D
00B96:  DATA 69,73
00B98:  DATA 73,69
00B9A:  DATA 6F,6E
00B9C:  DATA 20,72
00B9E:  DATA 61,6E
00BA0:  DATA 67,65
00BA2:  DATA 20,5B
00BA4:  DATA 30,78
00BA6:  DATA 25,4C
00BA8:  DATA 58,20
00BAA:  DATA 2D,20
00BAC:  DATA 30,78
00BAE:  DATA 25,4C
00BB0:  DATA 58,5D
00BB2:  DATA 0D,0A
00BB4:  DATA 00,00
00BB6:  DATA 45,72
00BB8:  DATA 72,6F
00BBA:  DATA 72,3A
00BBC:  DATA 20,45
00BBE:  DATA 72,61
00BC0:  DATA 73,65
00BC2:  DATA 20,6F
00BC4:  DATA 70,65
00BC6:  DATA 72,61
00BC8:  DATA 74,69
00BCA:  DATA 6F,6E
00BCC:  DATA 20,77
00BCE:  DATA 6F,75
00BD0:  DATA 6C,64
00BD2:  DATA 20,65
00BD4:  DATA 78,63
00BD6:  DATA 65,65
00BD8:  DATA 64,20
00BDA:  DATA 6D,69
00BDC:  DATA 73,73
00BDE:  DATA 69,6F
00BE0:  DATA 6E,20
00BE2:  DATA 65,6E
00BE4:  DATA 64,20
00BE6:  DATA 61,64
00BE8:  DATA 64,72
00BEA:  DATA 65,73
00BEC:  DATA 73,20
00BEE:  DATA 30,78
00BF0:  DATA 25,4C
00BF2:  DATA 58,0D
00BF4:  DATA 0A,00
00BF6:  DATA 4C,69
00BF8:  DATA 6D,69
00BFA:  DATA 74,69
00BFC:  DATA 6E,67
00BFE:  DATA 20,65
00C00:  DATA 72,61
00C02:  DATA 73,65
00C04:  DATA 20,73
00C06:  DATA 69,7A
00C08:  DATA 65,20
00C0A:  DATA 74,6F
00C0C:  DATA 20,73
00C0E:  DATA 74,61
00C10:  DATA 79,20
00C12:  DATA 77,69
00C14:  DATA 74,68
00C16:  DATA 69,6E
00C18:  DATA 20,6D
00C1A:  DATA 69,73
00C1C:  DATA 73,69
00C1E:  DATA 6F,6E
00C20:  DATA 20,62
00C22:  DATA 6F,75
00C24:  DATA 6E,64
00C26:  DATA 73,0D
00C28:  DATA 0A,00
00C2A:  DATA 45,72
00C2C:  DATA 61,73
00C2E:  DATA 65,20
00C30:  DATA 6F,70
00C32:  DATA 65,72
00C34:  DATA 61,74
00C36:  DATA 69,6F
00C38:  DATA 6E,20
00C3A:  DATA 76,61
00C3C:  DATA 6C,69
00C3E:  DATA 64,61
00C40:  DATA 74,65
00C42:  DATA 64,20
00C44:  DATA 77,69
00C46:  DATA 74,68
00C48:  DATA 69,6E
00C4A:  DATA 20,6D
00C4C:  DATA 69,73
00C4E:  DATA 73,69
00C50:  DATA 6F,6E
00C52:  DATA 20,72
00C54:  DATA 61,6E
00C56:  DATA 67,65
00C58:  DATA 0D,0A
00C5A:  DATA 00,00
00C5C:  DATA 45,72
00C5E:  DATA 61,73
00C60:  DATA 65,64
00C62:  DATA 20,25
00C64:  DATA 6C,75
00C66:  DATA 20,62
00C68:  DATA 79,74
00C6A:  DATA 65,73
00C6C:  DATA 20,28
00C6E:  DATA 61,6C
00C70:  DATA 69,67
00C72:  DATA 6E,65
00C74:  DATA 64,29
00C76:  DATA 0D,0A
00C78:  DATA 00,00
00C7A:  DATA 0D,0A
00C7C:  DATA 5F,5F
00C7E:  DATA 5F,45
00C80:  DATA 6E,64
00C82:  DATA 20,73
00C84:  DATA 6D,66
00C86:  DATA 5F,65
00C88:  DATA 72,61
00C8A:  DATA 73,65
00C8C:  DATA 5F,5F
00C8E:  DATA 5F,5F
00C90:  DATA 0D,0A
00C92:  DATA 00,00
00C94:  DATA 5F,5F
00C96:  DATA 5F,5F
00C98:  DATA 5F,5F
00C9A:  DATA 5F,5F
00C9C:  DATA 5F,5F
00C9E:  DATA 5F,5F
00CA0:  DATA 5F,5F
00CA2:  DATA 5F,5F
00CA4:  DATA 5F,5F
00CA6:  DATA 5F,5F
00CA8:  DATA 0D,0A
00CAA:  DATA 0D,0A
00CAC:  DATA 00,00
00CAE:  DATA 45,72
00CB0:  DATA 72,6F
00CB2:  DATA 72,3A
00CB4:  DATA 20,55
00CB6:  DATA 6E,6B
00CB8:  DATA 6E,6F
00CBA:  DATA 77,6E
00CBC:  DATA 20,6D
00CBE:  DATA 69,73
00CC0:  DATA 73,69
00CC2:  DATA 6F,6E
00CC4:  DATA 5F,69
00CC6:  DATA 64,3A
00CC8:  DATA 20,25
00CCA:  DATA 30,32
00CCC:  DATA 58,0D
00CCE:  DATA 0A,00
00CD0:  DATA 55,70
00CD2:  DATA 64,61
00CD4:  DATA 74,65
00CD6:  DATA 64,20
00CD8:  DATA 70,61
00CDA:  DATA 72,74
00CDC:  DATA 69,74
00CDE:  DATA 69,6F
00CE0:  DATA 6E,20
00CE2:  DATA 66,6F
00CE4:  DATA 72,20
00CE6:  DATA 6D,69
00CE8:  DATA 73,73
00CEA:  DATA 69,6F
00CEC:  DATA 6E,5F
00CEE:  DATA 69,64
00CF0:  DATA 20,25
00CF2:  DATA 30,32
00CF4:  DATA 58,3A
00CF6:  DATA 20,75
00CF8:  DATA 73,65
00CFA:  DATA 64,5F
00CFC:  DATA 73,69
00CFE:  DATA 7A,65
00D00:  DATA 3D,25
00D02:  DATA 6C,64
00D04:  DATA 2C,20
00D06:  DATA 6C,6F
00D08:  DATA 6F,70
00D0A:  DATA 5F,63
00D0C:  DATA 6F,75
00D0E:  DATA 6E,74
00D10:  DATA 65,72
00D12:  DATA 3D,25
00D14:  DATA 6C,64
00D16:  DATA 0D,0A
00D18:  DATA 00,00
00D1A:  DATA 5B,4D
00D1C:  DATA 49,53
00D1E:  DATA 46,5D
00D20:  DATA 20,6D
00D22:  DATA 69,73
00D24:  DATA 73,69
00D26:  DATA 6F,6E
00D28:  DATA 20,25
00D2A:  DATA 75,20
00D2C:  DATA 75,6E
00D2E:  DATA 63,6F
00D30:  DATA 70,69
00D32:  DATA 65,64
00D34:  DATA 5F,63
00D36:  DATA 6F,75
00D38:  DATA 6E,74
00D3A:  DATA 65,72
00D3C:  DATA 20,25
00D3E:  DATA 30,38
00D40:  DATA 4C,58
00D42:  DATA 20,2D
00D44:  DATA 3E,20
00D46:  DATA 25,30
00D48:  DATA 38,4C
00D4A:  DATA 58,20
00D4C:  DATA 28,2D
00D4E:  DATA 25,6C
00D50:  DATA 75,29
00D52:  DATA 0D,0A
00D54:  DATA 00,00
00D56:  DATA 5B,4D
00D58:  DATA 49,53
00D5A:  DATA 46,5D
00D5C:  DATA 20,75
00D5E:  DATA 70,64
00D60:  DATA 61,74
00D62:  DATA 65,5F
00D64:  DATA 6D,69
00D66:  DATA 73,66
00D68:  DATA 5F,63
00D6A:  DATA 6F,75
00D6C:  DATA 6E,74
00D6E:  DATA 65,72
00D70:  DATA 73,3A
00D72:  DATA 20,6D
00D74:  DATA 69,73
00D76:  DATA 73,69
00D78:  DATA 6F,6E
00D7A:  DATA 20,25
00D7C:  DATA 75,20
00D7E:  DATA 6E,6F
00D80:  DATA 74,20
00D82:  DATA 68,61
00D84:  DATA 6E,64
00D86:  DATA 6C,65
00D88:  DATA 64,0D
00D8A:  DATA 0A,00
00D8C:  DATA 5B,4D
00D8E:  DATA 49,53
00D90:  DATA 46,5D
00D92:  DATA 20,6D
00D94:  DATA 69,73
00D96:  DATA 73,69
00D98:  DATA 6F,6E
00D9A:  DATA 20,25
00D9C:  DATA 75,20
00D9E:  DATA 75,6E
00DA0:  DATA 63,6F
00DA2:  DATA 70,69
00DA4:  DATA 65,64
00DA6:  DATA 5F,63
00DA8:  DATA 6F,75
00DAA:  DATA 6E,74
00DAC:  DATA 65,72
00DAE:  DATA 20,72
00DB0:  DATA 65,73
00DB2:  DATA 65,74
00DB4:  DATA 0D,0A
00DB6:  DATA 00,00
00DB8:  DATA 5B,4D
00DBA:  DATA 49,53
00DBC:  DATA 46,5D
00DBE:  DATA 20,6D
00DC0:  DATA 69,73
00DC2:  DATA 73,69
00DC4:  DATA 6F,6E
00DC6:  DATA 20,25
00DC8:  DATA 75,20
00DCA:  DATA 73,74
00DCC:  DATA 61,74
00DCE:  DATA 75,73
00DD0:  DATA 3A,20
00DD2:  DATA 75,73
00DD4:  DATA 65,64
00DD6:  DATA 3D,30
00DD8:  DATA 78,25
00DDA:  DATA 30,38
00DDC:  DATA 4C,58
00DDE:  DATA 20,75
00DE0:  DATA 6E,63
00DE2:  DATA 6F,70
00DE4:  DATA 69,65
00DE6:  DATA 64,3D
00DE8:  DATA 30,78
00DEA:  DATA 25,30
00DEC:  DATA 38,4C
00DEE:  DATA 58,20
00DF0:  DATA 72,31
00DF2:  DATA 3D,30
00DF4:  DATA 78,25
00DF6:  DATA 30,32
00DF8:  DATA 58,20
00DFA:  DATA 72,32
00DFC:  DATA 3D,30
00DFE:  DATA 78,25
00E00:  DATA 30,32
00E02:  DATA 58,0D
00E04:  DATA 0A,00
00E06:  DATA 5B,4D
00E08:  DATA 49,53
00E0A:  DATA 46,5D
00E0C:  DATA 20,70
00E0E:  DATA 72,69
00E10:  DATA 6E,74
00E12:  DATA 20,73
00E14:  DATA 74,61
00E16:  DATA 74,75
00E18:  DATA 73,3A
00E1A:  DATA 20,6D
00E1C:  DATA 69,73
00E1E:  DATA 73,69
00E20:  DATA 6F,6E
00E22:  DATA 20,25
00E24:  DATA 75,20
00E26:  DATA 6E,6F
00E28:  DATA 74,20
00E2A:  DATA 68,61
00E2C:  DATA 6E,64
00E2E:  DATA 6C,65
00E30:  DATA 64,0D
00E32:  DATA 0A,00
00E34:  DATA 4D,49
00E36:  DATA 53,53
00E38:  DATA 49,4F
00E3A:  DATA 4E,20
00E3C:  DATA 46,4C
00E3E:  DATA 41,53
00E40:  DATA 48,20
00E42:  DATA 49,6E
00E44:  DATA 69,74
00E46:  DATA 69,61
00E48:  DATA 6C,69
00E4A:  DATA 7A,65
00E4C:  DATA 0D,0A
00E4E:  DATA 00,00
00E50:  DATA 09,5B
00E52:  DATA 4D,49
00E54:  DATA 53,20
00E56:  DATA 46,4D
00E58:  DATA 5D,20
00E5A:  DATA 43,6F
00E5C:  DATA 6E,6E
00E5E:  DATA 65,63
00E60:  DATA 74,65
00E62:  DATA 64,0D
00E64:  DATA 0A,00
00E66:  DATA 09,5B
00E68:  DATA 4D,49
00E6A:  DATA 53,20
00E6C:  DATA 46,4D
00E6E:  DATA 5D,20
00E70:  DATA 4E,6F
00E72:  DATA 74,20
00E74:  DATA 43,6F
00E76:  DATA 6E,6E
00E78:  DATA 65,63
00E7A:  DATA 74,65
00E7C:  DATA 64,0D
00E7E:  DATA 0A,00
00E80:  DATA 09,5B
00E82:  DATA 53,4D
00E84:  DATA 46,5D
00E86:  DATA 20,43
00E88:  DATA 6F,6E
00E8A:  DATA 6E,65
00E8C:  DATA 63,74
00E8E:  DATA 65,64
00E90:  DATA 0D,0A
00E92:  DATA 00,00
00E94:  DATA 09,5B
00E96:  DATA 53,4D
00E98:  DATA 46,5D
00E9A:  DATA 20,4E
00E9C:  DATA 6F,74
00E9E:  DATA 20,43
00EA0:  DATA 6F,6E
00EA2:  DATA 6E,65
00EA4:  DATA 63,74
00EA6:  DATA 65,64
00EA8:  DATA 0D,0A
00EAA:  DATA 00,00
00EAC:  DATA 09,5B
00EAE:  DATA 4D,49
00EB0:  DATA 53,20
00EB2:  DATA 46,4D
00EB4:  DATA 5D,20
00EB6:  DATA 43,52
00EB8:  DATA 43,20
00EBA:  DATA 65,72
00EBC:  DATA 72,6F
00EBE:  DATA 72,20
00EC0:  DATA 2D,3E
00EC2:  DATA 20,69
00EC4:  DATA 6E,69
00EC6:  DATA 74,69
00EC8:  DATA 61,6C
00ECA:  DATA 69,7A
00ECC:  DATA 65,20
00ECE:  DATA 63,6F
00ED0:  DATA 75,6E
00ED2:  DATA 74,65
00ED4:  DATA 72,73
00ED6:  DATA 0D,0A
00ED8:  DATA 00,00
00EDA:  DATA 09,43
00EDC:  DATA 6F,6D
00EDE:  DATA 70,6C
00EE0:  DATA 65,74
00EE2:  DATA 65,0D
00EE4:  DATA 0A,00
00EE6:  DATA 09,46
00EE8:  DATA 69,65
00EEA:  DATA 6C,64
00EEC:  DATA 09,09
00EEE:  DATA 43,6F
00EF0:  DATA 75,6E
00EF2:  DATA 74,65
00EF4:  DATA 72,4E
00EF6:  DATA 61,6D
00EF8:  DATA 65,09
00EFA:  DATA 56,61
00EFC:  DATA 6C,75
00EFE:  DATA 65,0D
00F00:  DATA 0A,00
00F02:  DATA 09,2D
00F04:  DATA 2D,2D
00F06:  DATA 2D,2D
00F08:  DATA 2D,2D
00F0A:  DATA 2D,2D
00F0C:  DATA 2D,2D
00F0E:  DATA 2D,09
00F10:  DATA 2D,2D
00F12:  DATA 2D,2D
00F14:  DATA 2D,2D
00F16:  DATA 2D,2D
00F18:  DATA 2D,2D
00F1A:  DATA 2D,2D
00F1C:  DATA 2D,09
00F1E:  DATA 2D,2D
00F20:  DATA 2D,2D
00F22:  DATA 2D,2D
00F24:  DATA 2D,2D
00F26:  DATA 2D,2D
00F28:  DATA 2D,2D
00F2A:  DATA 2D,0D
00F2C:  DATA 0A,00
00F2E:  DATA 09,50
00F30:  DATA 49,43
00F32:  DATA 4C,4F
00F34:  DATA 47,09
00F36:  DATA 09,55
00F38:  DATA 73,65
00F3A:  DATA 64,09
00F3C:  DATA 09,30
00F3E:  DATA 78,25
00F40:  DATA 30,38
00F42:  DATA 4C,58
00F44:  DATA 0D,0A
00F46:  DATA 00,00
00F48:  DATA 09,09
00F4A:  DATA 09,55
00F4C:  DATA 6E,63
00F4E:  DATA 6F,70
00F50:  DATA 79,65
00F52:  DATA 64,09
00F54:  DATA 30,78
00F56:  DATA 25,30
00F58:  DATA 38,4C
00F5A:  DATA 58,0D
00F5C:  DATA 0A,00
00F5E:  DATA 09,09
00F60:  DATA 09,52
00F62:  DATA 65,73
00F64:  DATA 65,72
00F66:  DATA 76,65
00F68:  DATA 09,09
00F6A:  DATA 30,78
00F6C:  DATA 25,30
00F6E:  DATA 32,58
00F70:  DATA 2F,20
00F72:  DATA 30,78
00F74:  DATA 25,30
00F76:  DATA 32,58
00F78:  DATA 0D,0A
00F7A:  DATA 00,00
00F7C:  DATA 09,45
00F7E:  DATA 4E,56
00F80:  DATA 49,52
00F82:  DATA 4F,09
00F84:  DATA 09,55
00F86:  DATA 73,65
00F88:  DATA 64,09
00F8A:  DATA 09,30
00F8C:  DATA 78,25
00F8E:  DATA 30,38
00F90:  DATA 4C,58
00F92:  DATA 0D,0A
00F94:  DATA 00,00
00F96:  DATA 09,09
00F98:  DATA 09,55
00F9A:  DATA 6E,63
00F9C:  DATA 6F,70
00F9E:  DATA 79,65
00FA0:  DATA 64,09
00FA2:  DATA 30,78
00FA4:  DATA 25,30
00FA6:  DATA 38,4C
00FA8:  DATA 58,0D
00FAA:  DATA 0A,00
00FAC:  DATA 09,09
00FAE:  DATA 09,52
00FB0:  DATA 65,73
00FB2:  DATA 65,72
00FB4:  DATA 76,65
00FB6:  DATA 09,09
00FB8:  DATA 30,78
00FBA:  DATA 25,30
00FBC:  DATA 32,58
00FBE:  DATA 2F,20
00FC0:  DATA 30,78
00FC2:  DATA 25,30
00FC4:  DATA 32,58
00FC6:  DATA 0D,0A
00FC8:  DATA 00,00
00FCA:  DATA 09,49
00FCC:  DATA 56,31
00FCE:  DATA 20,48
00FD0:  DATA 45,41
00FD2:  DATA 44,45
00FD4:  DATA 52,09
00FD6:  DATA 55,73
00FD8:  DATA 65,64
00FDA:  DATA 09,09
00FDC:  DATA 30,78
00FDE:  DATA 25,30
00FE0:  DATA 38,4C
00FE2:  DATA 58,0D
00FE4:  DATA 0A,00
00FE6:  DATA 09,09
00FE8:  DATA 09,55
00FEA:  DATA 6E,63
00FEC:  DATA 6F,70
00FEE:  DATA 79,65
00FF0:  DATA 64,09
00FF2:  DATA 30,78
00FF4:  DATA 25,30
00FF6:  DATA 38,4C
00FF8:  DATA 58,0D
00FFA:  DATA 0A,00
00FFC:  DATA 09,09
00FFE:  DATA 09,52
01000:  DATA 65,73
01002:  DATA 65,72
01004:  DATA 76,65
01006:  DATA 09,09
01008:  DATA 30,78
0100A:  DATA 25,30
0100C:  DATA 32,58
0100E:  DATA 2F,20
01010:  DATA 30,78
01012:  DATA 25,30
01014:  DATA 32,58
01016:  DATA 0D,0A
01018:  DATA 00,00
0101A:  DATA 09,49
0101C:  DATA 56,31
0101E:  DATA 20,44
01020:  DATA 41,54
01022:  DATA 41,09
01024:  DATA 55,73
01026:  DATA 65,64
01028:  DATA 09,09
0102A:  DATA 30,78
0102C:  DATA 25,30
0102E:  DATA 38,4C
01030:  DATA 58,0D
01032:  DATA 0A,00
01034:  DATA 09,09
01036:  DATA 09,55
01038:  DATA 6E,63
0103A:  DATA 6F,70
0103C:  DATA 79,65
0103E:  DATA 64,09
01040:  DATA 30,78
01042:  DATA 25,30
01044:  DATA 38,4C
01046:  DATA 58,0D
01048:  DATA 0A,00
0104A:  DATA 09,09
0104C:  DATA 09,52
0104E:  DATA 65,73
01050:  DATA 65,72
01052:  DATA 76,65
01054:  DATA 09,09
01056:  DATA 30,78
01058:  DATA 25,30
0105A:  DATA 32,58
0105C:  DATA 2F,20
0105E:  DATA 30,78
01060:  DATA 25,30
01062:  DATA 32,58
01064:  DATA 0D,0A
01066:  DATA 00,00
01068:  DATA 09,49
0106A:  DATA 56,32
0106C:  DATA 20,48
0106E:  DATA 45,41
01070:  DATA 44,45
01072:  DATA 52,09
01074:  DATA 55,73
01076:  DATA 65,64
01078:  DATA 09,09
0107A:  DATA 30,78
0107C:  DATA 25,30
0107E:  DATA 38,4C
01080:  DATA 58,0D
01082:  DATA 0A,00
01084:  DATA 09,09
01086:  DATA 09,55
01088:  DATA 6E,63
0108A:  DATA 6F,70
0108C:  DATA 79,65
0108E:  DATA 64,09
01090:  DATA 30,78
01092:  DATA 25,30
01094:  DATA 38,4C
01096:  DATA 58,0D
01098:  DATA 0A,00
0109A:  DATA 09,09
0109C:  DATA 09,52
0109E:  DATA 65,73
010A0:  DATA 65,72
010A2:  DATA 76,65
010A4:  DATA 09,09
010A6:  DATA 30,78
010A8:  DATA 25,30
010AA:  DATA 32,58
010AC:  DATA 2F,20
010AE:  DATA 30,78
010B0:  DATA 25,30
010B2:  DATA 32,58
010B4:  DATA 0D,0A
010B6:  DATA 00,00
010B8:  DATA 09,49
010BA:  DATA 56,32
010BC:  DATA 20,44
010BE:  DATA 41,54
010C0:  DATA 41,09
010C2:  DATA 55,73
010C4:  DATA 65,64
010C6:  DATA 09,09
010C8:  DATA 30,78
010CA:  DATA 25,30
010CC:  DATA 38,4C
010CE:  DATA 58,0D
010D0:  DATA 0A,00
010D2:  DATA 09,09
010D4:  DATA 09,55
010D6:  DATA 6E,63
010D8:  DATA 6F,70
010DA:  DATA 79,65
010DC:  DATA 64,09
010DE:  DATA 30,78
010E0:  DATA 25,30
010E2:  DATA 38,4C
010E4:  DATA 58,0D
010E6:  DATA 0A,00
010E8:  DATA 09,09
010EA:  DATA 09,52
010EC:  DATA 65,73
010EE:  DATA 65,72
010F0:  DATA 76,65
010F2:  DATA 09,09
010F4:  DATA 30,78
010F6:  DATA 25,30
010F8:  DATA 32,58
010FA:  DATA 2F,20
010FC:  DATA 30,78
010FE:  DATA 25,30
01100:  DATA 32,58
01102:  DATA 0D,0A
01104:  DATA 00,00
01106:  DATA 09,2D
01108:  DATA 2D,2D
0110A:  DATA 2D,2D
0110C:  DATA 2D,2D
0110E:  DATA 2D,2D
01110:  DATA 2D,2D
01112:  DATA 2D,09
01114:  DATA 2D,2D
01116:  DATA 2D,2D
01118:  DATA 2D,2D
0111A:  DATA 2D,2D
0111C:  DATA 2D,2D
0111E:  DATA 2D,2D
01120:  DATA 2D,09
01122:  DATA 2D,2D
01124:  DATA 2D,2D
01126:  DATA 2D,2D
01128:  DATA 2D,2D
0112A:  DATA 2D,2D
0112C:  DATA 2D,2D
0112E:  DATA 2D,0D
01130:  DATA 0A,00
01132:  DATA 43,52
01134:  DATA 43,20
01136:  DATA 76,65
01138:  DATA 72,69
0113A:  DATA 66,69
0113C:  DATA 63,61
0113E:  DATA 74,69
01140:  DATA 6F,6E
01142:  DATA 20,70
01144:  DATA 61,73
01146:  DATA 73,65
01148:  DATA 64,20
0114A:  DATA 6F,6E
0114C:  DATA 20,61
0114E:  DATA 74,74
01150:  DATA 65,6D
01152:  DATA 70,74
01154:  DATA 20,25
01156:  DATA 64,0D
01158:  DATA 0A,00
0115A:  DATA 45,72
0115C:  DATA 72,6F
0115E:  DATA 72,3A
01160:  DATA 20,43
01162:  DATA 52,43
01164:  DATA 20,76
01166:  DATA 65,72
01168:  DATA 69,66
0116A:  DATA 69,63
0116C:  DATA 61,74
0116E:  DATA 69,6F
01170:  DATA 6E,20
01172:  DATA 66,61
01174:  DATA 69,6C
01176:  DATA 65,64
01178:  DATA 20,61
0117A:  DATA 66,74
0117C:  DATA 65,72
0117E:  DATA 20,25
01180:  DATA 64,20
01182:  DATA 61,74
01184:  DATA 74,65
01186:  DATA 6D,70
01188:  DATA 74,73
0118A:  DATA 0D,0A
0118C:  DATA 00,00
0118E:  DATA 0D,0A
01190:  DATA 5F,5F
01192:  DATA 5F,5F
01194:  DATA 5F,5F
01196:  DATA 5F,5F
01198:  DATA 5F,5F
0119A:  DATA 5F,5F
0119C:  DATA 5F,5F
0119E:  DATA 5F,5F
011A0:  DATA 5F,5F
011A2:  DATA 5F,5F
011A4:  DATA 5F,5F
011A6:  DATA 5F,5F
011A8:  DATA 5F,5F
011AA:  DATA 5F,5F
011AC:  DATA 5F,5F
011AE:  DATA 0D,0A
011B0:  DATA 5F,5F
011B2:  DATA 5F,5F
011B4:  DATA 5F,53
011B6:  DATA 74,61
011B8:  DATA 72,74
011BA:  DATA 20,65
011BC:  DATA 78,65
011BE:  DATA 63,75
011C0:  DATA 74,65
011C2:  DATA 5F,6D
011C4:  DATA 69,73
011C6:  DATA 73,69
011C8:  DATA 6F,6E
011CA:  DATA 5F,5F
011CC:  DATA 5F,5F
011CE:  DATA 5F,0D
011D0:  DATA 0A,0D
011D2:  DATA 0A,00
011D4:  DATA 43,6F
011D6:  DATA 6D,6D
011D8:  DATA 61,6E
011DA:  DATA 64,20
011DC:  DATA 49,44
011DE:  DATA 3A,20
011E0:  DATA 25,58
011E2:  DATA 0D,0A
011E4:  DATA 0D,0A
011E6:  DATA 00,00
011E8:  DATA 09,09
011EA:  DATA 2D,3E
011EC:  DATA 20,49
011EE:  DATA 6E,76
011F0:  DATA 61,6C
011F2:  DATA 69,64
011F4:  DATA 20,43
011F6:  DATA 4D,44
011F8:  DATA 20,49
011FA:  DATA 44,21
011FC:  DATA 0D,0A
011FE:  DATA 00,00
01200:  DATA 0D,0A
01202:  DATA 5F,5F
01204:  DATA 5F,5F
01206:  DATA 5F,5F
01208:  DATA 45,6E
0120A:  DATA 64,20
0120C:  DATA 65,78
0120E:  DATA 65,63
01210:  DATA 75,74
01212:  DATA 65,5F
01214:  DATA 6D,69
01216:  DATA 73,73
01218:  DATA 69,6F
0121A:  DATA 6E,5F
0121C:  DATA 5F,5F
0121E:  DATA 5F,5F
01220:  DATA 5F,0D
01222:  DATA 0A,5F
01224:  DATA 5F,5F
01226:  DATA 5F,5F
01228:  DATA 5F,5F
0122A:  DATA 5F,5F
0122C:  DATA 5F,5F
0122E:  DATA 5F,5F
01230:  DATA 5F,5F
01232:  DATA 5F,5F
01234:  DATA 5F,5F
01236:  DATA 5F,5F
01238:  DATA 5F,5F
0123A:  DATA 5F,5F
0123C:  DATA 5F,5F
0123E:  DATA 5F,5F
01240:  DATA 5F,5F
01242:  DATA 0D,0A
01244:  DATA 00,00
01246:  DATA 53,74
01248:  DATA 61,72
0124A:  DATA 74,20
0124C:  DATA 65,78
0124E:  DATA 65,63
01250:  DATA 75,74
01252:  DATA 65,5F
01254:  DATA 63,6F
01256:  DATA 6D,6D
01258:  DATA 61,6E
0125A:  DATA 64,0D
0125C:  DATA 0A,00
0125E:  DATA 09,2D
01260:  DATA 3E,20
01262:  DATA 55,70
01264:  DATA 6C,69
01266:  DATA 6E,6B
01268:  DATA 20,63
0126A:  DATA 6F,6D
0126C:  DATA 6D,61
0126E:  DATA 6E,64
01270:  DATA 0D,0A
01272:  DATA 00,00
01274:  DATA 09,20
01276:  DATA 20,20
01278:  DATA 54,72
0127A:  DATA 61,6E
0127C:  DATA 73,6D
0127E:  DATA 69,74
01280:  DATA 20,41
01282:  DATA 63,6B
01284:  DATA 6E,6F
01286:  DATA 6C,65
01288:  DATA 67,64
0128A:  DATA 65,0D
0128C:  DATA 0A,00
0128E:  DATA 09,2D
01290:  DATA 3E,20
01292:  DATA 53,74
01294:  DATA 61,74
01296:  DATA 75,73
01298:  DATA 20,63
0129A:  DATA 68,65
0129C:  DATA 63,6B
0129E:  DATA 0D,0A
012A0:  DATA 00,00
012A2:  DATA 09,20
012A4:  DATA 20,20
012A6:  DATA 54,72
012A8:  DATA 61,6E
012AA:  DATA 73,6D
012AC:  DATA 69,74
012AE:  DATA 20,4D
012B0:  DATA 49,53
012B2:  DATA 20,4D
012B4:  DATA 43,55
012B6:  DATA 20,53
012B8:  DATA 74,61
012BA:  DATA 74,75
012BC:  DATA 73,0D
012BE:  DATA 0A,00
012C0:  DATA 66,69
012C2:  DATA 6E,69
012C4:  DATA 73,68
012C6:  DATA 65,64
012C8:  DATA 20,69
012CA:  DATA 6E,20
012CC:  DATA 73,74
012CE:  DATA 61,74
012D0:  DATA 75,73
012D2:  DATA 5F,63
012D4:  DATA 68,65
012D6:  DATA 63,6B
012D8:  DATA 0D,0A
012DA:  DATA 00,00
012DC:  DATA 09,2D
012DE:  DATA 3E,20
012E0:  DATA 53,4D
012E2:  DATA 46,20
012E4:  DATA 61,76
012E6:  DATA 61,69
012E8:  DATA 6C,61
012EA:  DATA 62,6C
012EC:  DATA 65,20
012EE:  DATA 63,68
012F0:  DATA 65,63
012F2:  DATA 6B,0D
012F4:  DATA 0A,00
012F6:  DATA 09,20
012F8:  DATA 20,20
012FA:  DATA 54,72
012FC:  DATA 61,6E
012FE:  DATA 73,6D
01300:  DATA 69,74
01302:  DATA 20,41
01304:  DATA 63,6B
01306:  DATA 6E,6F
01308:  DATA 77,6C
0130A:  DATA 65,64
0130C:  DATA 67,65
0130E:  DATA 6D,65
01310:  DATA 6E,74
01312:  DATA 0D,0A
01314:  DATA 00,00
01316:  DATA 09,09
01318:  DATA 2D,3E
0131A:  DATA 20,64
0131C:  DATA 65,6E
0131E:  DATA 69,65
01320:  DATA 64,0D
01322:  DATA 0A,00
01324:  DATA 09,09
01326:  DATA 2D,3E
01328:  DATA 20,61
0132A:  DATA 6C,6C
0132C:  DATA 6F,77
0132E:  DATA 65,64
01330:  DATA 0D,0A
01332:  DATA 00,00
01334:  DATA 09,09
01336:  DATA 2D,3E
01338:  DATA 20,44
0133A:  DATA 65,71
0133C:  DATA 75,65
0133E:  DATA 75,65
01340:  DATA 64,3A
01342:  DATA 20,66
01344:  DATA 75,6E
01346:  DATA 63,3D
01348:  DATA 25,75
0134A:  DATA 20,6D
0134C:  DATA 69,73
0134E:  DATA 73,69
01350:  DATA 6F,6E
01352:  DATA 3D,25
01354:  DATA 75,20
01356:  DATA 73,69
01358:  DATA 7A,65
0135A:  DATA 3D,25
0135C:  DATA 6C,64
0135E:  DATA 20,61
01360:  DATA 64,64
01362:  DATA 72,3D
01364:  DATA 25,6C
01366:  DATA 64,0D
01368:  DATA 0A,00
0136A:  DATA 09,09
0136C:  DATA 20,20
0136E:  DATA 20,55
01370:  DATA 6E,6B
01372:  DATA 6E,6F
01374:  DATA 77,6E
01376:  DATA 20,66
01378:  DATA 75,6E
0137A:  DATA 63,5F
0137C:  DATA 74,79
0137E:  DATA 70,65
01380:  DATA 3D,25
01382:  DATA 75,0D
01384:  DATA 0A,00
01386:  DATA 09,09
01388:  DATA 2D,3E
0138A:  DATA 20,43
0138C:  DATA 6F,6D
0138E:  DATA 70,6C
01390:  DATA 65,74
01392:  DATA 65,64
01394:  DATA 20,25
01396:  DATA 75,20
01398:  DATA 6F,70
0139A:  DATA 65,72
0139C:  DATA 61,74
0139E:  DATA 69,6F
013A0:  DATA 6E,73
013A2:  DATA 0D,0A
013A4:  DATA 00,00
013A6:  DATA 53,74
013A8:  DATA 61,72
013AA:  DATA 74,20
013AC:  DATA 4D,4F
013AE:  DATA 44,45
013B0:  DATA 20,4D
013B2:  DATA 45,41
013B4:  DATA 53,20
013B6:  DATA 49,56
013B8:  DATA 0D,0A
013BA:  DATA 00,00
013BC:  DATA 09,53
013BE:  DATA 6C,65
013C0:  DATA 65,70
013C2:  DATA 54,69
013C4:  DATA 6D,65
013C6:  DATA 3A,20
013C8:  DATA 20,20
013CA:  DATA 20,20
013CC:  DATA 20,20
013CE:  DATA 20,25
013D0:  DATA 30,34
013D2:  DATA 4C,58
013D4:  DATA 0D,0A
013D6:  DATA 00,00
013D8:  DATA 09,43
013DA:  DATA 75,72
013DC:  DATA 72,65
013DE:  DATA 6E,74
013E0:  DATA 54,68
013E2:  DATA 72,65
013E4:  DATA 73,68
013E6:  DATA 6F,6C
013E8:  DATA 64,3A
013EA:  DATA 20,25
013EC:  DATA 30,34
013EE:  DATA 4C,58
013F0:  DATA 0D,0A
013F2:  DATA 00,00
013F4:  DATA 09,50
013F6:  DATA 44,54
013F8:  DATA 68,72
013FA:  DATA 65,73
013FC:  DATA 68,6F
013FE:  DATA 6C,64
01400:  DATA 3A,20
01402:  DATA 20,20
01404:  DATA 20,20
01406:  DATA 20,25
01408:  DATA 30,34
0140A:  DATA 4C,58
0140C:  DATA 0D,0A
0140E:  DATA 00,00
01410:  DATA 09,43
01412:  DATA 75,72
01414:  DATA 72,65
01416:  DATA 6E,74
01418:  DATA 4C,69
0141A:  DATA 6D,69
0141C:  DATA 74,3A
0141E:  DATA 20,20
01420:  DATA 20,20
01422:  DATA 20,25
01424:  DATA 30,34
01426:  DATA 4C,58
01428:  DATA 0D,0A
0142A:  DATA 00,00
0142C:  DATA 09,4D
0142E:  DATA 65,61
01430:  DATA 73,75
01432:  DATA 72,65
01434:  DATA 6D,65
01436:  DATA 6E,74
01438:  DATA 54,69
0143A:  DATA 6D,65
0143C:  DATA 3A,20
0143E:  DATA 20,25
01440:  DATA 30,34
01442:  DATA 4C,58
01444:  DATA 0D,0A
01446:  DATA 00,00
01448:  DATA 45,6E
0144A:  DATA 71,75
0144C:  DATA 65,75
0144E:  DATA 65,20
01450:  DATA 46,6C
01452:  DATA 61,73
01454:  DATA 68,20
01456:  DATA 4F,70
01458:  DATA 65,72
0145A:  DATA 61,74
0145C:  DATA 69,6F
0145E:  DATA 6E,0D
01460:  DATA 0A,00
01462:  DATA 4D,69
01464:  DATA 73,73
01466:  DATA 69,6F
01468:  DATA 6E,20
0146A:  DATA 49,44
0146C:  DATA 3A,20
0146E:  DATA 20,20
01470:  DATA 25,30
01472:  DATA 32,58
01474:  DATA 0D,0A
01476:  DATA 00,00
01478:  DATA 46,75
0147A:  DATA 6E,63
0147C:  DATA 74,69
0147E:  DATA 6F,6E
01480:  DATA 20,54
01482:  DATA 79,70
01484:  DATA 65,3A
01486:  DATA 25,30
01488:  DATA 32,58
0148A:  DATA 0D,0A
0148C:  DATA 00,00
0148E:  DATA 57,72
01490:  DATA 69,74
01492:  DATA 65,20
01494:  DATA 4D,6F
01496:  DATA 64,65
01498:  DATA 3A,20
0149A:  DATA 20,20
0149C:  DATA 25,30
0149E:  DATA 32,58
014A0:  DATA 0D,0A
014A2:  DATA 00,00
014A4:  DATA 53,6F
014A6:  DATA 75,72
014A8:  DATA 63,65
014AA:  DATA 20,54
014AC:  DATA 79,70
014AE:  DATA 65,3A
014B0:  DATA 20,20
014B2:  DATA 25,30
014B4:  DATA 32,58
014B6:  DATA 0D,0A
014B8:  DATA 00,00
014BA:  DATA 53,74
014BC:  DATA 61,72
014BE:  DATA 74,20
014C0:  DATA 41,64
014C2:  DATA 64,72
014C4:  DATA 65,73
014C6:  DATA 73,3A
014C8:  DATA 25,30
014CA:  DATA 34,58
014CC:  DATA 0D,0A
014CE:  DATA 00,00
014D0:  DATA 53,69
014D2:  DATA 7A,65
014D4:  DATA 3A,20
014D6:  DATA 20,20
014D8:  DATA 20,20
014DA:  DATA 20,20
014DC:  DATA 20,20
014DE:  DATA 25,30
014E0:  DATA 34,58
014E2:  DATA 0D,0A
014E4:  DATA 00,00
014E6:  DATA 45,6E
014E8:  DATA 64,20
014EA:  DATA 4D,4F
014EC:  DATA 44,45
014EE:  DATA 20,4D
014F0:  DATA 45,41
014F2:  DATA 53,20
014F4:  DATA 49,56
014F6:  DATA 20,6D
014F8:  DATA 69,73
014FA:  DATA 73,69
014FC:  DATA 6F,6E
014FE:  DATA 0D,0A
01500:  DATA 00,00
01502:  DATA 53,74
01504:  DATA 61,72
01506:  DATA 74,20
01508:  DATA 4D,4F
0150A:  DATA 44,45
0150C:  DATA 20,49
0150E:  DATA 56,20
01510:  DATA 44,45
01512:  DATA 42,55
01514:  DATA 47,0D
01516:  DATA 0A,00
01518:  DATA 09,49
0151A:  DATA 44,3A
0151C:  DATA 20,25
0151E:  DATA 30,32
01520:  DATA 58,0D
01522:  DATA 0A,00
01524:  DATA 09,53
01526:  DATA 6C,65
01528:  DATA 65,70
0152A:  DATA 54,69
0152C:  DATA 6D,65
0152E:  DATA 3A,20
01530:  DATA 20,20
01532:  DATA 20,20
01534:  DATA 20,20
01536:  DATA 20,30
01538:  DATA 78,25
0153A:  DATA 30,34
0153C:  DATA 58,0D
0153E:  DATA 0A,00
01540:  DATA 09,4C
01542:  DATA 6F,67
01544:  DATA 43,75
01546:  DATA 72,72
01548:  DATA 54,68
0154A:  DATA 72,65
0154C:  DATA 73,68
0154E:  DATA 6F,6C
01550:  DATA 64,3A
01552:  DATA 20,30
01554:  DATA 78,25
01556:  DATA 30,34
01558:  DATA 58,0D
0155A:  DATA 0A,00
0155C:  DATA 09,50
0155E:  DATA 44,54
01560:  DATA 68,72
01562:  DATA 65,73
01564:  DATA 68,6F
01566:  DATA 6C,64
01568:  DATA 3A,20
0156A:  DATA 20,20
0156C:  DATA 20,20
0156E:  DATA 20,30
01570:  DATA 78,25
01572:  DATA 30,34
01574:  DATA 58,0D
01576:  DATA 0A,00
01578:  DATA 09,43
0157A:  DATA 75,72
0157C:  DATA 72,65
0157E:  DATA 6E,74
01580:  DATA 4C,69
01582:  DATA 6D,69
01584:  DATA 74,3A
01586:  DATA 20,20
01588:  DATA 20,20
0158A:  DATA 20,30
0158C:  DATA 78,25
0158E:  DATA 30,34
01590:  DATA 58,0D
01592:  DATA 0A,00
01594:  DATA 09,4D
01596:  DATA 65,61
01598:  DATA 73,75
0159A:  DATA 72,65
0159C:  DATA 6D,65
0159E:  DATA 6E,74
015A0:  DATA 54,69
015A2:  DATA 6D,65
015A4:  DATA 3A,20
015A6:  DATA 20,30
015A8:  DATA 78,25
015AA:  DATA 30,34
015AC:  DATA 58,0D
015AE:  DATA 0A,00
015B0:  DATA 5B,49
015B2:  DATA 56,44
015B4:  DATA 42,47
015B6:  DATA 5D,20
015B8:  DATA 45,6E
015BA:  DATA 64,20
015BC:  DATA 4D,4F
015BE:  DATA 44,45
015C0:  DATA 20,49
015C2:  DATA 56,20
015C4:  DATA 44,45
015C6:  DATA 42,55
015C8:  DATA 47,0D
015CA:  DATA 0A,00
015CC:  DATA 74,65
015CE:  DATA 6D,70
015D0:  DATA 5F,74
015D2:  DATA 6F,70
015D4:  DATA 2C,20
015D6:  DATA 74,65
015D8:  DATA 6D,70
015DA:  DATA 5F,62
015DC:  DATA 6F,74
015DE:  DATA 2C,20
015E0:  DATA 74,65
015E2:  DATA 6D,70
015E4:  DATA 5F,6D
015E6:  DATA 69,73
015E8:  DATA 37,2C
015EA:  DATA 20,70
015EC:  DATA 64,0D
015EE:  DATA 0A,00
015F0:  DATA 30,78
015F2:  DATA 25,30
015F4:  DATA 34,4C
015F6:  DATA 58,2C
015F8:  DATA 20,30
015FA:  DATA 78,25
015FC:  DATA 30,34
015FE:  DATA 4C,58
01600:  DATA 2C,20
01602:  DATA 30,78
01604:  DATA 25,30
01606:  DATA 34,4C
01608:  DATA 58,2C
0160A:  DATA 20,30
0160C:  DATA 78,25
0160E:  DATA 30,34
01610:  DATA 4C,58
01612:  DATA 0D,0A
01614:  DATA 00,00
01616:  DATA 53,74
01618:  DATA 61,72
0161A:  DATA 74,20
0161C:  DATA 4D,4F
0161E:  DATA 44,45
01620:  DATA 20,4D
01622:  DATA 45,41
01624:  DATA 53,20
01626:  DATA 45,4E
01628:  DATA 56,20
0162A:  DATA 44,45
0162C:  DATA 42,55
0162E:  DATA 47,0D
01630:  DATA 0A,00
01632:  DATA 45,6E
01634:  DATA 64,20
01636:  DATA 4D,4F
01638:  DATA 44,45
0163A:  DATA 20,4D
0163C:  DATA 45,41
0163E:  DATA 53,20
01640:  DATA 45,4E
01642:  DATA 56,20
01644:  DATA 44,45
01646:  DATA 42,55
01648:  DATA 47,0D
0164A:  DATA 0A,00
0164C:  DATA 53,74
0164E:  DATA 61,72
01650:  DATA 74,20
01652:  DATA 46,6C
01654:  DATA 61,73
01656:  DATA 68,20
01658:  DATA 45,72
0165A:  DATA 61,73
0165C:  DATA 65,20
0165E:  DATA 41,6C
01660:  DATA 6C,0D
01662:  DATA 0A,00
01664:  DATA 45,6E
01666:  DATA 64,20
01668:  DATA 46,6C
0166A:  DATA 61,73
0166C:  DATA 68,20
0166E:  DATA 45,72
01670:  DATA 61,73
01672:  DATA 65,20
01674:  DATA 41,6C
01676:  DATA 6C,0D
01678:  DATA 0A,00
0167A:  DATA 53,74
0167C:  DATA 61,72
0167E:  DATA 74,20
01680:  DATA 46,6C
01682:  DATA 61,73
01684:  DATA 68,20
01686:  DATA 45,72
01688:  DATA 61,73
0168A:  DATA 65,20
0168C:  DATA 31,20
0168E:  DATA 53,65
01690:  DATA 63,74
01692:  DATA 6F,72
01694:  DATA 0D,0A
01696:  DATA 00,00
01698:  DATA 09,53
0169A:  DATA 65,63
0169C:  DATA 74,6F
0169E:  DATA 72,20
016A0:  DATA 41,64
016A2:  DATA 64,72
016A4:  DATA 65,73
016A6:  DATA 73,3A
016A8:  DATA 20,30
016AA:  DATA 78,25
016AC:  DATA 30,38
016AE:  DATA 4C,58
016B0:  DATA 0D,0A
016B2:  DATA 00,00
016B4:  DATA 45,6E
016B6:  DATA 64,20
016B8:  DATA 46,6C
016BA:  DATA 61,73
016BC:  DATA 68,20
016BE:  DATA 45,72
016C0:  DATA 61,73
016C2:  DATA 65,20
016C4:  DATA 31,20
016C6:  DATA 53,65
016C8:  DATA 63,74
016CA:  DATA 6F,72
016CC:  DATA 0D,0A
016CE:  DATA 00,00
016D0:  DATA 53,74
016D2:  DATA 61,72
016D4:  DATA 74,20
016D6:  DATA 46,6C
016D8:  DATA 61,73
016DA:  DATA 68,20
016DC:  DATA 45,72
016DE:  DATA 61,73
016E0:  DATA 65,20
016E2:  DATA 34,6B
016E4:  DATA 42,79
016E6:  DATA 74,65
016E8:  DATA 20,53
016EA:  DATA 75,62
016EC:  DATA 73,65
016EE:  DATA 63,74
016F0:  DATA 6F,72
016F2:  DATA 0D,0A
016F4:  DATA 00,00
016F6:  DATA 09,53
016F8:  DATA 75,62
016FA:  DATA 73,65
016FC:  DATA 63,74
016FE:  DATA 6F,72
01700:  DATA 20,41
01702:  DATA 64,64
01704:  DATA 72,65
01706:  DATA 73,73
01708:  DATA 3A,20
0170A:  DATA 30,78
0170C:  DATA 25,30
0170E:  DATA 38,4C
01710:  DATA 58,0D
01712:  DATA 0A,00
01714:  DATA 45,6E
01716:  DATA 64,20
01718:  DATA 46,6C
0171A:  DATA 61,73
0171C:  DATA 68,20
0171E:  DATA 45,72
01720:  DATA 61,73
01722:  DATA 65,20
01724:  DATA 34,6B
01726:  DATA 42,79
01728:  DATA 74,65
0172A:  DATA 20,53
0172C:  DATA 75,62
0172E:  DATA 73,65
01730:  DATA 63,74
01732:  DATA 6F,72
01734:  DATA 0D,0A
01736:  DATA 00,00
01738:  DATA 53,74
0173A:  DATA 61,72
0173C:  DATA 74,20
0173E:  DATA 46,6C
01740:  DATA 61,73
01742:  DATA 68,20
01744:  DATA 45,72
01746:  DATA 61,73
01748:  DATA 65,20
0174A:  DATA 36,34
0174C:  DATA 6B,42
0174E:  DATA 79,74
01750:  DATA 65,20
01752:  DATA 53,75
01754:  DATA 62,73
01756:  DATA 65,63
01758:  DATA 74,6F
0175A:  DATA 72,0D
0175C:  DATA 0A,00
0175E:  DATA 09,53
01760:  DATA 75,62
01762:  DATA 73,65
01764:  DATA 63,74
01766:  DATA 6F,72
01768:  DATA 20,41
0176A:  DATA 64,64
0176C:  DATA 72,65
0176E:  DATA 73,73
01770:  DATA 3A,20
01772:  DATA 30,78
01774:  DATA 25,30
01776:  DATA 38,4C
01778:  DATA 58,0D
0177A:  DATA 0A,00
0177C:  DATA 45,6E
0177E:  DATA 64,20
01780:  DATA 46,6C
01782:  DATA 61,73
01784:  DATA 68,20
01786:  DATA 45,72
01788:  DATA 61,73
0178A:  DATA 65,20
0178C:  DATA 36,34
0178E:  DATA 6B,42
01790:  DATA 79,74
01792:  DATA 65,20
01794:  DATA 53,75
01796:  DATA 62,73
01798:  DATA 65,63
0179A:  DATA 74,6F
0179C:  DATA 72,0D
0179E:  DATA 0A,00
017A0:  DATA 53,74
017A2:  DATA 61,72
017A4:  DATA 74,20
017A6:  DATA 46,6C
017A8:  DATA 61,73
017AA:  DATA 68,20
017AC:  DATA 57,72
017AE:  DATA 69,74
017B0:  DATA 65,20
017B2:  DATA 44,65
017B4:  DATA 6D,6F
017B6:  DATA 0D,0A
017B8:  DATA 00,00
017BA:  DATA 09,4D
017BC:  DATA 4F,44
017BE:  DATA 45,20
017C0:  DATA 20,20
017C2:  DATA 20,20
017C4:  DATA 3A,20
017C6:  DATA 25,30
017C8:  DATA 32,58
017CA:  DATA 0D,0A
017CC:  DATA 00,00
017CE:  DATA 09,41
017D0:  DATA 64,64
017D2:  DATA 72,65
017D4:  DATA 73,73
017D6:  DATA 20,20
017D8:  DATA 3A,20
017DA:  DATA 30,78
017DC:  DATA 25,30
017DE:  DATA 38,4C
017E0:  DATA 58,0D
017E2:  DATA 0A,00
017E4:  DATA 09,50
017E6:  DATA 61,63
017E8:  DATA 6B,65
017EA:  DATA 74,4E
017EC:  DATA 75,6D
017EE:  DATA 3A,20
017F0:  DATA 30,78
017F2:  DATA 25,30
017F4:  DATA 34,4C
017F6:  DATA 58,0D
017F8:  DATA 0A,00
017FA:  DATA 57,72
017FC:  DATA 69,74
017FE:  DATA 65,20
01800:  DATA 44,61
01802:  DATA 74,61
01804:  DATA 0D,0A
01806:  DATA 00,00
01808:  DATA 0D,0A
0180A:  DATA 5B,46
0180C:  DATA 4C,41
0180E:  DATA 53,48
01810:  DATA 5D,20
01812:  DATA 57,72
01814:  DATA 69,74
01816:  DATA 65,20
01818:  DATA 61,64
0181A:  DATA 64,72
0181C:  DATA 65,73
0181E:  DATA 73,20
01820:  DATA 30,78
01822:  DATA 25,30
01824:  DATA 38,4C
01826:  DATA 58,20
01828:  DATA 65,78
0182A:  DATA 63,65
0182C:  DATA 65,64
0182E:  DATA 73,20
01830:  DATA 64,65
01832:  DATA 76,69
01834:  DATA 63,65
01836:  DATA 20,65
01838:  DATA 6E,64
0183A:  DATA 20,30
0183C:  DATA 78,25
0183E:  DATA 30,38
01840:  DATA 4C,58
01842:  DATA 20,2D
01844:  DATA 3E,20
01846:  DATA 61,62
01848:  DATA 6F,72
0184A:  DATA 74,0D
0184C:  DATA 0A,00
0184E:  DATA 0D,0A
01850:  DATA 5B,46
01852:  DATA 4C,41
01854:  DATA 53,48
01856:  DATA 5D,20
01858:  DATA 52,65
0185A:  DATA 61,63
0185C:  DATA 68,65
0185E:  DATA 64,20
01860:  DATA 65,6E
01862:  DATA 64,2E
01864:  DATA 20,50
01866:  DATA 61,72
01868:  DATA 74,69
0186A:  DATA 61,6C
0186C:  DATA 20,77
0186E:  DATA 72,69
01870:  DATA 74,65
01872:  DATA 20,25
01874:  DATA 6C,75
01876:  DATA 20,62
01878:  DATA 79,74
0187A:  DATA 65,73
0187C:  DATA 20,28
0187E:  DATA 70,61
01880:  DATA 63,6B
01882:  DATA 65,74
01884:  DATA 20,74
01886:  DATA 72,75
01888:  DATA 6E,63
0188A:  DATA 61,74
0188C:  DATA 65,64
0188E:  DATA 29,2E
01890:  DATA 0D,0A
01892:  DATA 00,00
01894:  DATA 45,6E
01896:  DATA 64,20
01898:  DATA 46,6C
0189A:  DATA 61,73
0189C:  DATA 68,20
0189E:  DATA 57,72
018A0:  DATA 69,74
018A2:  DATA 65,20
018A4:  DATA 44,65
018A6:  DATA 6D,6F
018A8:  DATA 0D,0A
018AA:  DATA 00,00
018AC:  DATA 53,74
018AE:  DATA 61,72
018B0:  DATA 74,20
018B2:  DATA 46,6C
018B4:  DATA 61,73
018B6:  DATA 68,20
018B8:  DATA 57,72
018BA:  DATA 69,74
018BC:  DATA 65,20
018BE:  DATA 34,6B
018C0:  DATA 42,79
018C2:  DATA 74,65
018C4:  DATA 20,53
018C6:  DATA 75,62
018C8:  DATA 73,65
018CA:  DATA 63,74
018CC:  DATA 6F,72
018CE:  DATA 0D,0A
018D0:  DATA 00,00
018D2:  DATA 45,6E
018D4:  DATA 64,20
018D6:  DATA 46,6C
018D8:  DATA 61,73
018DA:  DATA 68,20
018DC:  DATA 57,72
018DE:  DATA 69,74
018E0:  DATA 65,20
018E2:  DATA 34,6B
018E4:  DATA 42,79
018E6:  DATA 74,65
018E8:  DATA 20,53
018EA:  DATA 75,62
018EC:  DATA 73,65
018EE:  DATA 63,74
018F0:  DATA 6F,72
018F2:  DATA 0D,0A
018F4:  DATA 00,00
018F6:  DATA 53,74
018F8:  DATA 61,72
018FA:  DATA 74,20
018FC:  DATA 46,6C
018FE:  DATA 61,73
01900:  DATA 68,20
01902:  DATA 52,65
01904:  DATA 61,64
01906:  DATA 0D,0A
01908:  DATA 00,00
0190A:  DATA 09,4D
0190C:  DATA 4F,44
0190E:  DATA 45,20
01910:  DATA 20,20
01912:  DATA 20,20
01914:  DATA 3A,20
01916:  DATA 25,30
01918:  DATA 32,58
0191A:  DATA 0D,0A
0191C:  DATA 00,00
0191E:  DATA 09,41
01920:  DATA 64,64
01922:  DATA 72,65
01924:  DATA 73,73
01926:  DATA 20,20
01928:  DATA 3A,20
0192A:  DATA 30,78
0192C:  DATA 25,30
0192E:  DATA 38,4C
01930:  DATA 58,0D
01932:  DATA 0A,00
01934:  DATA 09,50
01936:  DATA 61,63
01938:  DATA 6B,65
0193A:  DATA 74,4E
0193C:  DATA 75,6D
0193E:  DATA 3A,20
01940:  DATA 30,78
01942:  DATA 25,30
01944:  DATA 34,4C
01946:  DATA 58,0D
01948:  DATA 0A,00
0194A:  DATA 52,45
0194C:  DATA 41,44
0194E:  DATA 20,44
01950:  DATA 41,54
01952:  DATA 41,0D
01954:  DATA 0A,00
01956:  DATA 4D,69
01958:  DATA 73,73
0195A:  DATA 69,6F
0195C:  DATA 6E,20
0195E:  DATA 46,6C
01960:  DATA 61,73
01962:  DATA 68,20
01964:  DATA 69,73
01966:  DATA 20,6E
01968:  DATA 6F,74
0196A:  DATA 20,63
0196C:  DATA 6F,6E
0196E:  DATA 6E,65
01970:  DATA 63,74
01972:  DATA 65,64
01974:  DATA 0D,0A
01976:  DATA 00,00
01978:  DATA 5B,46
0197A:  DATA 4C,41
0197C:  DATA 53,48
0197E:  DATA 5D,20
01980:  DATA 52,65
01982:  DATA 61,64
01984:  DATA 20,61
01986:  DATA 64,64
01988:  DATA 72,65
0198A:  DATA 73,73
0198C:  DATA 20,30
0198E:  DATA 78,25
01990:  DATA 30,38
01992:  DATA 4C,58
01994:  DATA 20,65
01996:  DATA 78,63
01998:  DATA 65,65
0199A:  DATA 64,73
0199C:  DATA 20,64
0199E:  DATA 65,76
019A0:  DATA 69,63
019A2:  DATA 65,20
019A4:  DATA 65,6E
019A6:  DATA 64,20
019A8:  DATA 30,78
019AA:  DATA 25,30
019AC:  DATA 38,4C
019AE:  DATA 58,20
019B0:  DATA 2D,3E
019B2:  DATA 20,73
019B4:  DATA 74,6F
019B6:  DATA 70,0D
019B8:  DATA 0A,00
019BA:  DATA 5B,46
019BC:  DATA 4C,41
019BE:  DATA 53,48
019C0:  DATA 5D,20
019C2:  DATA 45,6E
019C4:  DATA 64,20
019C6:  DATA 72,65
019C8:  DATA 61,63
019CA:  DATA 68,65
019CC:  DATA 64,2E
019CE:  DATA 20,50
019D0:  DATA 61,72
019D2:  DATA 74,69
019D4:  DATA 61,6C
019D6:  DATA 20,72
019D8:  DATA 65,61
019DA:  DATA 64,20
019DC:  DATA 25,6C
019DE:  DATA 75,20
019E0:  DATA 62,79
019E2:  DATA 74,65
019E4:  DATA 73,2E
019E6:  DATA 0D,0A
019E8:  DATA 00,00
019EA:  DATA 45,6E
019EC:  DATA 64,20
019EE:  DATA 46,6C
019F0:  DATA 61,73
019F2:  DATA 68,20
019F4:  DATA 52,65
019F6:  DATA 61,64
019F8:  DATA 0D,0A
019FA:  DATA 00,00
019FC:  DATA 53,74
019FE:  DATA 61,72
01A00:  DATA 74,20
01A02:  DATA 46,6C
01A04:  DATA 61,73
01A06:  DATA 68,20
01A08:  DATA 52,65
01A0A:  DATA 61,64
01A0C:  DATA 20,41
01A0E:  DATA 64,64
01A10:  DATA 72,65
01A12:  DATA 73,73
01A14:  DATA 0D,0A
01A16:  DATA 00,00
01A18:  DATA 52,65
01A1A:  DATA 61,64
01A1C:  DATA 20,44
01A1E:  DATA 61,74
01A20:  DATA 61,3A
01A22:  DATA 20,25
01A24:  DATA 30,32
01A26:  DATA 58,20
01A28:  DATA 25,30
01A2A:  DATA 32,58
01A2C:  DATA 20,25
01A2E:  DATA 30,32
01A30:  DATA 58,20
01A32:  DATA 25,30
01A34:  DATA 32,58
01A36:  DATA 0D,0A
01A38:  DATA 00,00
01A3A:  DATA 45,6E
01A3C:  DATA 64,20
01A3E:  DATA 46,6C
01A40:  DATA 61,73
01A42:  DATA 68,20
01A44:  DATA 52,65
01A46:  DATA 61,64
01A48:  DATA 20,41
01A4A:  DATA 64,64
01A4C:  DATA 72,65
01A4E:  DATA 73,73
01A50:  DATA 0D,0A
01A52:  DATA 00,00
01A54:  DATA 53,74
01A56:  DATA 61,72
01A58:  DATA 74,20
01A5A:  DATA 46,6C
01A5C:  DATA 61,73
01A5E:  DATA 68,20
01A60:  DATA 45,72
01A62:  DATA 61,73
01A64:  DATA 65,20
01A66:  DATA 61,6E
01A68:  DATA 64,20
01A6A:  DATA 52,65
01A6C:  DATA 73,65
01A6E:  DATA 74,0D
01A70:  DATA 0A,00
01A72:  DATA 45,6E
01A74:  DATA 64,20
01A76:  DATA 46,6C
01A78:  DATA 61,73
01A7A:  DATA 68,20
01A7C:  DATA 45,72
01A7E:  DATA 61,73
01A80:  DATA 65,20
01A82:  DATA 61,6E
01A84:  DATA 64,20
01A86:  DATA 52,65
01A88:  DATA 73,65
01A8A:  DATA 74,0D
01A8C:  DATA 0A,00
01A8E:  DATA 53,74
01A90:  DATA 61,72
01A92:  DATA 74,20
01A94:  DATA 46,6C
01A96:  DATA 61,73
01A98:  DATA 68,20
01A9A:  DATA 53,4D
01A9C:  DATA 46,20
01A9E:  DATA 43,6F
01AA0:  DATA 70,79
01AA2:  DATA 0D,0A
01AA4:  DATA 00,00
01AA6:  DATA 45,6E
01AA8:  DATA 64,20
01AAA:  DATA 46,6C
01AAC:  DATA 61,73
01AAE:  DATA 68,20
01AB0:  DATA 53,4D
01AB2:  DATA 46,20
01AB4:  DATA 43,6F
01AB6:  DATA 70,79
01AB8:  DATA 0D,0A
01ABA:  DATA 00,00
01ABC:  DATA 53,74
01ABE:  DATA 61,72
01AC0:  DATA 74,20
01AC2:  DATA 46,6C
01AC4:  DATA 61,73
01AC6:  DATA 68,20
01AC8:  DATA 53,4D
01ACA:  DATA 46,20
01ACC:  DATA 52,65
01ACE:  DATA 61,64
01AD0:  DATA 0D,0A
01AD2:  DATA 00,00
01AD4:  DATA 52,65
01AD6:  DATA 61,64
01AD8:  DATA 20,44
01ADA:  DATA 61,74
01ADC:  DATA 61,3A
01ADE:  DATA 20,00
01AE0:  DATA 0D,0A
01AE2:  DATA 45,6E
01AE4:  DATA 64,20
01AE6:  DATA 46,6C
01AE8:  DATA 61,73
01AEA:  DATA 68,20
01AEC:  DATA 53,4D
01AEE:  DATA 46,20
01AF0:  DATA 52,65
01AF2:  DATA 61,64
01AF4:  DATA 0D,0A
01AF6:  DATA 00,00
01AF8:  DATA 53,74
01AFA:  DATA 61,72
01AFC:  DATA 74,20
01AFE:  DATA 46,6C
01B00:  DATA 61,73
01B02:  DATA 68,20
01B04:  DATA 53,4D
01B06:  DATA 46,20
01B08:  DATA 45,72
01B0A:  DATA 61,73
01B0C:  DATA 65,0D
01B0E:  DATA 0A,00
01B10:  DATA 45,6E
01B12:  DATA 64,20
01B14:  DATA 46,6C
01B16:  DATA 61,73
01B18:  DATA 68,20
01B1A:  DATA 53,4D
01B1C:  DATA 46,20
01B1E:  DATA 45,72
01B20:  DATA 61,73
01B22:  DATA 65,0D
01B24:  DATA 0A,00
01B26:  DATA 53,74
01B28:  DATA 61,72
01B2A:  DATA 74,20
01B2C:  DATA 46,6C
01B2E:  DATA 61,73
01B30:  DATA 68,20
01B32:  DATA 41,64
01B34:  DATA 64,72
01B36:  DATA 65,73
01B38:  DATA 73,20
01B3A:  DATA 52,65
01B3C:  DATA 73,65
01B3E:  DATA 74,0D
01B40:  DATA 0A,00
01B42:  DATA 45,6E
01B44:  DATA 64,20
01B46:  DATA 46,6C
01B48:  DATA 61,73
01B4A:  DATA 68,20
01B4C:  DATA 41,64
01B4E:  DATA 64,72
01B50:  DATA 65,73
01B52:  DATA 73,20
01B54:  DATA 52,65
01B56:  DATA 73,65
01B58:  DATA 74,0D
01B5A:  DATA 0A,00
01B5C:  DATA 53,4D
01B5E:  DATA 46,20
01B60:  DATA 69,73
01B62:  DATA 20,6E
01B64:  DATA 6F,74
01B66:  DATA 20,63
01B68:  DATA 6F,6E
01B6A:  DATA 6E,65
01B6C:  DATA 63,74
01B6E:  DATA 65,64
01B70:  DATA 0D,0A
01B72:  DATA 00,00
01B74:  DATA 53,74
01B76:  DATA 61,72
01B78:  DATA 74,20
01B7A:  DATA 46,6C
01B7C:  DATA 61,73
01B7E:  DATA 68,20
01B80:  DATA 53,4D
01B82:  DATA 46,20
01B84:  DATA 52,65
01B86:  DATA 61,64
01B88:  DATA 20,46
01B8A:  DATA 6F,72
01B8C:  DATA 63,65
01B8E:  DATA 0D,0A
01B90:  DATA 00,00
01B92:  DATA 09,41
01B94:  DATA 64,64
01B96:  DATA 72,65
01B98:  DATA 73,73
01B9A:  DATA 20,20
01B9C:  DATA 3A,20
01B9E:  DATA 30,78
01BA0:  DATA 25,30
01BA2:  DATA 38,4C
01BA4:  DATA 58,0D
01BA6:  DATA 0A,00
01BA8:  DATA 09,50
01BAA:  DATA 61,63
01BAC:  DATA 6B,65
01BAE:  DATA 74,4E
01BB0:  DATA 75,6D
01BB2:  DATA 3A,20
01BB4:  DATA 30,78
01BB6:  DATA 25,30
01BB8:  DATA 34,4C
01BBA:  DATA 58,0D
01BBC:  DATA 0A,00
01BBE:  DATA 72,65
01BC0:  DATA 61,64
01BC2:  DATA 20,64
01BC4:  DATA 61,74
01BC6:  DATA 61,0D
01BC8:  DATA 0A,00
01BCA:  DATA 0D,0A
01BCC:  DATA 45,6E
01BCE:  DATA 64,20
01BD0:  DATA 46,6C
01BD2:  DATA 61,73
01BD4:  DATA 68,20
01BD6:  DATA 53,4D
01BD8:  DATA 46,20
01BDA:  DATA 52,65
01BDC:  DATA 61,64
01BDE:  DATA 20,46
01BE0:  DATA 6F,72
01BE2:  DATA 63,65
01BE4:  DATA 0D,0A
01BE6:  DATA 00,00
01BE8:  DATA 53,74
01BEA:  DATA 61,72
01BEC:  DATA 74,20
01BEE:  DATA 53,4D
01BF0:  DATA 46,20
01BF2:  DATA 45,72
01BF4:  DATA 61,73
01BF6:  DATA 65,20
01BF8:  DATA 41,6C
01BFA:  DATA 6C,0D
01BFC:  DATA 0A,00
01BFE:  DATA 45,6E
01C00:  DATA 64,20
01C02:  DATA 53,4D
01C04:  DATA 46,20
01C06:  DATA 45,72
01C08:  DATA 61,73
01C0A:  DATA 65,20
01C0C:  DATA 41,6C
01C0E:  DATA 6C,0D
01C10:  DATA 0A,00
01C12:  DATA 53,74
01C14:  DATA 61,72
01C16:  DATA 74,20
01C18:  DATA 53,4D
01C1A:  DATA 46,20
01C1C:  DATA 52,65
01C1E:  DATA 73,65
01C20:  DATA 74,0D
01C22:  DATA 0A,00
01C24:  DATA 45,6E
01C26:  DATA 64,20
01C28:  DATA 53,4D
01C2A:  DATA 46,20
01C2C:  DATA 52,65
01C2E:  DATA 73,65
01C30:  DATA 74,0D
01C32:  DATA 0A,00
01C34:  DATA 0D,0A
01C36:  DATA 0D,0A
01C38:  DATA 0D,0A
01C3A:  DATA 3D,3D
01C3C:  DATA 3D,3D
01C3E:  DATA 3D,3D
01C40:  DATA 3D,3D
01C42:  DATA 3D,3D
01C44:  DATA 3D,3D
01C46:  DATA 3D,3D
01C48:  DATA 3D,3D
01C4A:  DATA 3D,3D
01C4C:  DATA 3D,3D
01C4E:  DATA 3D,3D
01C50:  DATA 3D,3D
01C52:  DATA 3D,3D
01C54:  DATA 3D,3D
01C56:  DATA 3D,3D
01C58:  DATA 3D,3D
01C5A:  DATA 3D,3D
01C5C:  DATA 3D,3D
01C5E:  DATA 3D,3D
01C60:  DATA 3D,3D
01C62:  DATA 3D,3D
01C64:  DATA 3D,3D
01C66:  DATA 3D,3D
01C68:  DATA 3D,3D
01C6A:  DATA 3D,3D
01C6C:  DATA 3D,3D
01C6E:  DATA 3D,3D
01C70:  DATA 3D,3D
01C72:  DATA 3D,3D
01C74:  DATA 3D,3D
01C76:  DATA 0D,0A
01C78:  DATA 00,00
01C7A:  DATA 54,68
01C7C:  DATA 69,73
01C7E:  DATA 20,69
01C80:  DATA 73,20
01C82:  DATA 4D,4F
01C84:  DATA 4D,49
01C86:  DATA 4A,49
01C88:  DATA 20,43
01C8A:  DATA 49,47
01C8C:  DATA 53,20
01C8E:  DATA 50,49
01C90:  DATA 43,20
01C92:  DATA 42,42
01C94:  DATA 4D,20
01C96:  DATA 66,6F
01C98:  DATA 72,20
01C9A:  DATA 4D,49
01C9C:  DATA 53,37
01C9E:  DATA 5F,42
01CA0:  DATA 42,4D
01CA2:  DATA 36,2E
01CA4:  DATA 0D,0A
01CA6:  DATA 00,00
01CA8:  DATA 4C,61
01CAA:  DATA 73,74
01CAC:  DATA 20,75
01CAE:  DATA 70,64
01CB0:  DATA 61,74
01CB2:  DATA 65,64
01CB4:  DATA 20,6F
01CB6:  DATA 6E,20
01CB8:  DATA 25,73
01CBA:  DATA 20,25
01CBC:  DATA 73,2C
01CBE:  DATA 20,62
01CC0:  DATA 79,20
01CC2:  DATA 49,6E
01CC4:  DATA 6F,75
01CC6:  DATA 65,2E
01CC8:  DATA 0D,0A
01CCA:  DATA 0D,0A
01CCC:  DATA 00,00
01CCE:  DATA 32,31
01CD0:  DATA 2D,53
01CD2:  DATA 65,70
01CD4:  DATA 2D,32
01CD6:  DATA 35,00
01CD8:  DATA 31,32
01CDA:  DATA 3A,32
01CDC:  DATA 37,3A
01CDE:  DATA 32,39
01CE0:  DATA 00,00
01CE2:  DATA 5F,5F
01CE4:  DATA 5F,5F
01CE6:  DATA 43,49
01CE8:  DATA 47,53
01CEA:  DATA 20,50
01CEC:  DATA 49,43
01CEE:  DATA 20,53
01CF0:  DATA 74,61
01CF2:  DATA 72,74
01CF4:  DATA 20,4F
01CF6:  DATA 70,65
01CF8:  DATA 72,61
01CFA:  DATA 74,69
01CFC:  DATA 6F,6E
01CFE:  DATA 5F,5F
01D00:  DATA 5F,5F
01D02:  DATA 5F,0D
01D04:  DATA 0A,0D
01D06:  DATA 0A,00
01D08:  DATA 77,61
01D0A:  DATA 69,74
01D0C:  DATA 69,6E
01D0E:  DATA 67,20
01D10:  DATA 66,6F
01D12:  DATA 72,20
01D14:  DATA 42,4F
01D16:  DATA 53,53
01D18:  DATA 20,50
01D1A:  DATA 49,43
01D1C:  DATA 20,63
01D1E:  DATA 6F,6D
01D20:  DATA 6D,61
01D22:  DATA 6E,64
01D24:  DATA 00,00
01D26:  DATA 0D,0A
01D28:  DATA 77,61
01D2A:  DATA 69,74
01D2C:  DATA 69,6E
01D2E:  DATA 67,20
01D30:  DATA 66,6F
01D32:  DATA 72,20
01D34:  DATA 42,4F
01D36:  DATA 53,53
01D38:  DATA 20,50
01D3A:  DATA 49,43
01D3C:  DATA 20,63
01D3E:  DATA 6F,6D
01D40:  DATA 6D,61
01D42:  DATA 6E,64
01D44:  DATA 00,00
01D46:  DATA 0D,0A
01D48:  DATA 0D,0A
01D4A:  DATA 3D,3D
01D4C:  DATA 3D,3D
01D4E:  DATA 3D,3D
01D50:  DATA 0D,0A
01D52:  DATA 0D,0A
01D54:  DATA 46,69
01D56:  DATA 6E,69
01D58:  DATA 73,68
01D5A:  DATA 65,64
01D5C:  DATA 20,70
01D5E:  DATA 72,6F
01D60:  DATA 63,65
01D62:  DATA 73,73
01D64:  DATA 2E,0D
01D66:  DATA 0A,57
01D68:  DATA 61,69
01D6A:  DATA 74,20
01D6C:  DATA 66,6F
01D6E:  DATA 72,20
01D70:  DATA 42,4F
01D72:  DATA 53,53
01D74:  DATA 20,50
01D76:  DATA 49,43
01D78:  DATA 20,74
01D7A:  DATA 75,72
01D7C:  DATA 6E,20
01D7E:  DATA 6F,66
01D80:  DATA 66,20
01D82:  DATA 6D,65
01D84:  DATA 00,00
01D86:  DATA 45,6E
01D88:  DATA 64,20
01D8A:  DATA 6D,61
01D8C:  DATA 69,6E
01D8E:  DATA 0D,0A
01D90:  DATA 00,00
*
01DC0:  TBLRD*+
01DC2:  MOVF   FF5,F
01DC4:  BTFSC  FD8.2
01DC6:  GOTO   1DF4
01DCA:  MOVFF  FF6,AC1
01DCE:  MOVFF  FF7,AC2
01DD2:  MOVFF  FF8,AC3
01DD6:  MOVF   FF5,W
01DD8:  BTFSS  FA6.6
01DDA:  GOTO   1DD8
01DDE:  MOVLB  E
01DE0:  MOVWF  xF9
01DE2:  MOVFF  AC1,FF6
01DE6:  MOVFF  AC2,FF7
01DEA:  MOVFF  AC3,FF8
01DEE:  MOVLB  0
01DF0:  GOTO   1DC0
01DF4:  RETURN 0
01DF6:  TBLRD*+
01DF8:  MOVFF  FF6,A68
01DFC:  MOVFF  FF7,A69
01E00:  MOVFF  FF8,A6A
01E04:  MOVF   FF5,W
01E06:  BTFSS  FA6.6
01E08:  GOTO   1E06
01E0C:  MOVLB  E
01E0E:  MOVWF  xF9
01E10:  MOVFF  A68,FF6
01E14:  MOVFF  A69,FF7
01E18:  MOVFF  A6A,FF8
01E1C:  MOVLB  A
01E1E:  DECFSZ x67,F
01E20:  BRA    1E26
01E22:  BRA    1E2C
01E24:  MOVLB  0
01E26:  MOVLB  0
01E28:  GOTO   1DF6
01E2C:  MOVLB  0
01E2E:  RETURN 0
*
0200A:  MOVLB  A
0200C:  BTFSS  xC9.7
0200E:  BRA    2016
02010:  MOVLB  0
02012:  GOTO   204C
02016:  MOVLW  0F
02018:  MOVWF  00
0201A:  SWAPF  xC8,W
0201C:  ANDWF  00,F
0201E:  MOVLW  0A
02020:  SUBWF  00,W
02022:  BTFSS  FD8.0
02024:  BRA    202C
02026:  MOVLB  0
02028:  GOTO   2036
0202C:  MOVLW  30
0202E:  ADDWF  00,F
02030:  MOVLB  0
02032:  GOTO   203E
02036:  MOVLB  A
02038:  MOVF   xC9,W
0203A:  ADDWF  00,F
0203C:  MOVLB  0
0203E:  MOVF   00,W
02040:  BTFSS  FA6.6
02042:  GOTO   2040
02046:  MOVLB  E
02048:  MOVWF  xF9
0204A:  MOVLB  0
0204C:  MOVLW  0F
0204E:  MOVLB  A
02050:  ANDWF  xC8,F
02052:  MOVLW  0A
02054:  SUBWF  xC8,W
02056:  BTFSS  FD8.0
02058:  BRA    2060
0205A:  MOVLB  0
0205C:  GOTO   2068
02060:  MOVLW  30
02062:  MOVLB  0
02064:  GOTO   2070
02068:  MOVLB  A
0206A:  BCF    xC9.7
0206C:  MOVF   xC9,W
0206E:  MOVLB  0
02070:  MOVLB  A
02072:  ADDWF  xC8,F
02074:  MOVF   xC8,W
02076:  MOVLB  0
02078:  BTFSS  FA6.6
0207A:  GOTO   2078
0207E:  MOVLB  E
02080:  MOVWF  xF9
02082:  MOVLB  0
02084:  RETURN 0
*
025A2:  MOVLB  B
025A4:  MOVF   xBA,W
025A6:  ANDLW  07
025A8:  MOVWF  00
025AA:  RRCF   xBA,W
025AC:  MOVWF  01
025AE:  RRCF   01,F
025B0:  RRCF   01,F
025B2:  MOVLW  1F
025B4:  ANDWF  01,F
025B6:  MOVF   01,W
025B8:  ADDWF  xBC,W
025BA:  MOVWF  FE9
025BC:  MOVLW  00
025BE:  ADDWFC xBD,W
025C0:  MOVWF  FEA
025C2:  CLRF   01
025C4:  INCF   01,F
025C6:  INCF   00,F
025C8:  MOVLB  0
025CA:  GOTO   25D0
025CE:  RLCF   01,F
025D0:  DECFSZ 00,F
025D2:  GOTO   25CE
025D6:  MOVLB  B
025D8:  MOVF   xBB,F
025DA:  BTFSS  FD8.2
025DC:  BRA    25E4
025DE:  MOVLB  0
025E0:  GOTO   25EE
025E4:  MOVF   01,W
025E6:  IORWF  FEF,F
025E8:  MOVLB  0
025EA:  GOTO   25F4
025EE:  COMF   01,F
025F0:  MOVF   01,W
025F2:  ANDWF  FEF,F
025F4:  RETURN 0
*
029EA:  TSTFSZ 01
029EC:  GOTO   29FA
029F0:  TSTFSZ 02
029F2:  GOTO   29FC
029F6:  GOTO   2A0C
029FA:  INCF   02,F
029FC:  MOVFF  00,FEE
02A00:  DECFSZ 01,F
02A02:  GOTO   29FC
02A06:  DECFSZ 02,F
02A08:  GOTO   29FC
02A0C:  RETURN 0
*
05BE4:  BTFSC  FD8.1
05BE6:  GOTO   5BF2
05BEA:  MOVLW  02
05BEC:  MOVWF  FEA
05BEE:  MOVLW  F3
05BF0:  MOVWF  FE9
05BF2:  CLRF   00
05BF4:  CLRF   01
05BF6:  CLRF   02
05BF8:  CLRF   03
05BFA:  MOVLB  2
05BFC:  CLRF   xF3
05BFE:  CLRF   xF4
05C00:  CLRF   xF5
05C02:  CLRF   xF6
05C04:  MOVF   xF2,W
05C06:  IORWF  xF1,W
05C08:  IORWF  xF0,W
05C0A:  IORWF  xEF,W
05C0C:  BTFSS  FD8.2
05C0E:  BRA    5C16
05C10:  MOVLB  0
05C12:  GOTO   5CA6
05C16:  MOVLB  0
05C18:  MOVLW  20
05C1A:  MOVLB  2
05C1C:  MOVWF  xF7
05C1E:  MOVLB  0
05C20:  BCF    FD8.0
05C22:  MOVLB  2
05C24:  RLCF   xEB,F
05C26:  RLCF   xEC,F
05C28:  RLCF   xED,F
05C2A:  RLCF   xEE,F
05C2C:  RLCF   xF3,F
05C2E:  RLCF   xF4,F
05C30:  RLCF   xF5,F
05C32:  RLCF   xF6,F
05C34:  MOVF   xF2,W
05C36:  SUBWF  xF6,W
05C38:  BTFSC  FD8.2
05C3A:  BRA    5C42
05C3C:  MOVLB  0
05C3E:  GOTO   5C64
05C42:  MOVF   xF1,W
05C44:  SUBWF  xF5,W
05C46:  BTFSC  FD8.2
05C48:  BRA    5C50
05C4A:  MOVLB  0
05C4C:  GOTO   5C64
05C50:  MOVF   xF0,W
05C52:  SUBWF  xF4,W
05C54:  BTFSC  FD8.2
05C56:  BRA    5C5E
05C58:  MOVLB  0
05C5A:  GOTO   5C64
05C5E:  MOVF   xEF,W
05C60:  SUBWF  xF3,W
05C62:  MOVLB  0
05C64:  BTFSS  FD8.0
05C66:  GOTO   5C8C
05C6A:  MOVLB  2
05C6C:  MOVF   xEF,W
05C6E:  SUBWF  xF3,F
05C70:  MOVF   xF0,W
05C72:  BTFSS  FD8.0
05C74:  INCFSZ xF0,W
05C76:  SUBWF  xF4,F
05C78:  MOVF   xF1,W
05C7A:  BTFSS  FD8.0
05C7C:  INCFSZ xF1,W
05C7E:  SUBWF  xF5,F
05C80:  MOVF   xF2,W
05C82:  BTFSS  FD8.0
05C84:  INCFSZ xF2,W
05C86:  SUBWF  xF6,F
05C88:  BSF    FD8.0
05C8A:  MOVLB  0
05C8C:  RLCF   00,F
05C8E:  RLCF   01,F
05C90:  RLCF   02,F
05C92:  RLCF   03,F
05C94:  MOVLB  2
05C96:  DECFSZ xF7,F
05C98:  BRA    5C9E
05C9A:  BRA    5CA4
05C9C:  MOVLB  0
05C9E:  MOVLB  0
05CA0:  GOTO   5C20
05CA4:  MOVLB  0
05CA6:  MOVFF  2F3,FEF
05CAA:  MOVFF  2F4,FEC
05CAE:  MOVFF  2F5,FEC
05CB2:  MOVFF  2F6,FEC
05CB6:  MOVF   FED,F
05CB8:  MOVF   FED,F
05CBA:  MOVF   FED,F
05CBC:  RETURN 0
05CBE:  MOVF   FE9,W
05CC0:  MOVLB  2
05CC2:  MOVWF  xE3
05CC4:  MOVLW  3B
05CC6:  MOVWF  xEA
05CC8:  MOVLW  9A
05CCA:  MOVWF  xE9
05CCC:  MOVLW  CA
05CCE:  MOVWF  xE8
05CD0:  CLRF   xE7
05CD2:  MOVLW  0A
05CD4:  MOVWF  xE5
05CD6:  MOVLB  0
05CD8:  BSF    FD8.1
05CDA:  MOVLW  02
05CDC:  MOVWF  FEA
05CDE:  MOVLW  DF
05CE0:  MOVWF  FE9
05CE2:  MOVFF  2E2,2EE
05CE6:  MOVFF  2E1,2ED
05CEA:  MOVFF  2E0,2EC
05CEE:  MOVFF  2DF,2EB
05CF2:  MOVFF  2EA,2F2
05CF6:  MOVFF  2E9,2F1
05CFA:  MOVFF  2E8,2F0
05CFE:  MOVFF  2E7,2EF
05D02:  CALL   5BE4
05D06:  MOVF   01,W
05D08:  MOVF   00,F
05D0A:  BTFSS  FD8.2
05D0C:  GOTO   5D64
05D10:  MOVLB  2
05D12:  MOVF   xE5,W
05D14:  XORLW  01
05D16:  BTFSS  FD8.2
05D18:  BRA    5D20
05D1A:  MOVLB  0
05D1C:  GOTO   5D64
05D20:  MOVF   xE3,W
05D22:  BTFSS  FD8.2
05D24:  BRA    5D2C
05D26:  MOVLB  0
05D28:  GOTO   5D6A
05D2C:  ANDLW  0F
05D2E:  SUBWF  xE5,W
05D30:  BTFSS  FD8.2
05D32:  BRA    5D3A
05D34:  MOVLB  0
05D36:  GOTO   5D46
05D3A:  BTFSS  FD8.0
05D3C:  BRA    5D44
05D3E:  MOVLB  0
05D40:  GOTO   5D7C
05D44:  MOVLB  0
05D46:  MOVLB  2
05D48:  BTFSS  xE3.7
05D4A:  BRA    5D52
05D4C:  MOVLB  0
05D4E:  GOTO   5D7C
05D52:  BTFSS  xE3.6
05D54:  BRA    5D5C
05D56:  MOVLB  0
05D58:  GOTO   5D6A
05D5C:  MOVLW  20
05D5E:  MOVLB  0
05D60:  GOTO   5D6C
05D64:  MOVLB  2
05D66:  CLRF   xE3
05D68:  MOVLB  0
05D6A:  MOVLW  30
05D6C:  ADDWF  00,F
05D6E:  MOVF   00,W
05D70:  BTFSS  FA6.6
05D72:  GOTO   5D70
05D76:  MOVLB  E
05D78:  MOVWF  xF9
05D7A:  MOVLB  0
05D7C:  BCF    FD8.1
05D7E:  MOVFF  2EA,2EE
05D82:  MOVFF  2E9,2ED
05D86:  MOVFF  2E8,2EC
05D8A:  MOVFF  2E7,2EB
05D8E:  MOVLB  2
05D90:  CLRF   xF2
05D92:  CLRF   xF1
05D94:  CLRF   xF0
05D96:  MOVLW  0A
05D98:  MOVWF  xEF
05D9A:  MOVLB  0
05D9C:  CALL   5BE4
05DA0:  MOVFF  03,2EA
05DA4:  MOVFF  02,2E9
05DA8:  MOVFF  01,2E8
05DAC:  MOVFF  00,2E7
05DB0:  MOVLB  2
05DB2:  DECFSZ xE5,F
05DB4:  BRA    5DBA
05DB6:  BRA    5DC0
05DB8:  MOVLB  0
05DBA:  MOVLB  0
05DBC:  GOTO   5CD8
05DC0:  MOVLB  0
05DC2:  RETURN 0
*
0C488:  MOVLB  A
0C48A:  MOVF   x5C,W
0C48C:  MULWF  x5E
0C48E:  MOVFF  FF3,01
0C492:  MOVFF  FF4,00
0C496:  MULWF  x5F
0C498:  MOVF   FF3,W
0C49A:  ADDWF  00,F
0C49C:  MOVF   x5D,W
0C49E:  MULWF  x5E
0C4A0:  MOVF   FF3,W
0C4A2:  ADDWFC 00,W
0C4A4:  MOVWF  02
0C4A6:  MOVLB  0
0C4A8:  RETURN 0
*
0DE4C:  MOVLB  3
0DE4E:  MOVF   x2B,W
0DE50:  CLRF   01
0DE52:  SUBWF  x2A,W
0DE54:  BTFSS  FD8.0
0DE56:  BRA    DE5E
0DE58:  MOVLB  0
0DE5A:  GOTO   DE68
0DE5E:  MOVF   x2A,W
0DE60:  MOVWF  00
0DE62:  MOVLB  0
0DE64:  GOTO   DE92
0DE68:  CLRF   00
0DE6A:  MOVLW  08
0DE6C:  MOVLB  3
0DE6E:  MOVWF  x2C
0DE70:  MOVLB  0
0DE72:  MOVLB  3
0DE74:  RLCF   x2A,F
0DE76:  RLCF   00,F
0DE78:  MOVF   x2B,W
0DE7A:  SUBWF  00,W
0DE7C:  BTFSC  FD8.0
0DE7E:  MOVWF  00
0DE80:  RLCF   01,F
0DE82:  DECFSZ x2C,F
0DE84:  BRA    DE8A
0DE86:  BRA    DE90
0DE88:  MOVLB  0
0DE8A:  MOVLB  0
0DE8C:  GOTO   DE72
0DE90:  MOVLB  0
0DE92:  RETURN 0
0DE94:  MOVF   01,W
0DE96:  MOVFF  247,32A
0DE9A:  MOVLW  64
0DE9C:  MOVLB  3
0DE9E:  MOVWF  x2B
0DEA0:  MOVLB  0
0DEA2:  CALL   DE4C
0DEA6:  MOVFF  00,247
0DEAA:  MOVF   01,W
0DEAC:  MOVLW  30
0DEAE:  BTFSS  FD8.2
0DEB0:  GOTO   DED4
0DEB4:  MOVLB  2
0DEB6:  BTFSC  x48.1
0DEB8:  BRA    DEC0
0DEBA:  MOVLB  0
0DEBC:  GOTO   DEEE
0DEC0:  BTFSS  x48.3
0DEC2:  BRA    DECA
0DEC4:  MOVLB  0
0DEC6:  GOTO   DEEE
0DECA:  BTFSC  x48.4
0DECC:  MOVLW  20
0DECE:  MOVLB  0
0DED0:  GOTO   DEDE
0DED4:  MOVLB  2
0DED6:  BCF    x48.3
0DED8:  BCF    x48.4
0DEDA:  BSF    x48.0
0DEDC:  MOVLB  0
0DEDE:  ADDWF  01,F
0DEE0:  MOVF   01,W
0DEE2:  BTFSS  FA6.6
0DEE4:  GOTO   DEE2
0DEE8:  MOVLB  E
0DEEA:  MOVWF  xF9
0DEEC:  MOVLB  0
0DEEE:  MOVFF  247,32A
0DEF2:  MOVLW  0A
0DEF4:  MOVLB  3
0DEF6:  MOVWF  x2B
0DEF8:  MOVLB  0
0DEFA:  CALL   DE4C
0DEFE:  MOVFF  00,247
0DF02:  MOVF   01,W
0DF04:  MOVLW  30
0DF06:  BTFSS  FD8.2
0DF08:  GOTO   DF28
0DF0C:  MOVLB  2
0DF0E:  BTFSS  x48.3
0DF10:  BRA    DF18
0DF12:  MOVLB  0
0DF14:  GOTO   DF38
0DF18:  BTFSC  x48.0
0DF1A:  BRA    DF22
0DF1C:  MOVLB  0
0DF1E:  GOTO   DF38
0DF22:  BTFSC  x48.4
0DF24:  MOVLW  20
0DF26:  MOVLB  0
0DF28:  ADDWF  01,F
0DF2A:  MOVF   01,W
0DF2C:  BTFSS  FA6.6
0DF2E:  GOTO   DF2C
0DF32:  MOVLB  E
0DF34:  MOVWF  xF9
0DF36:  MOVLB  0
0DF38:  MOVLW  30
0DF3A:  MOVLB  2
0DF3C:  ADDWF  x47,F
0DF3E:  MOVF   x47,W
0DF40:  MOVLB  0
0DF42:  BTFSS  FA6.6
0DF44:  GOTO   DF42
0DF48:  MOVLB  E
0DF4A:  MOVWF  xF9
0DF4C:  MOVLB  0
0DF4E:  RETURN 0
0DF50:  MOVF   FE9,W
0DF52:  MOVLB  2
0DF54:  MOVWF  x4B
0DF56:  BTFSC  x4A.7
0DF58:  BRA    DF60
0DF5A:  MOVLB  0
0DF5C:  GOTO   DF7C
0DF60:  DECF   x4B,F
0DF62:  BSF    x4B.5
0DF64:  COMF   x47,F
0DF66:  COMF   x48,F
0DF68:  COMF   x49,F
0DF6A:  COMF   x4A,F
0DF6C:  INCF   x47,F
0DF6E:  BTFSC  FD8.2
0DF70:  INCF   x48,F
0DF72:  BTFSC  FD8.2
0DF74:  INCF   x49,F
0DF76:  BTFSC  FD8.2
0DF78:  INCF   x4A,F
0DF7A:  MOVLB  0
0DF7C:  MOVLW  3B
0DF7E:  MOVLB  2
0DF80:  MOVWF  x52
0DF82:  MOVLW  9A
0DF84:  MOVWF  x51
0DF86:  MOVLW  CA
0DF88:  MOVWF  x50
0DF8A:  CLRF   x4F
0DF8C:  MOVLW  0A
0DF8E:  MOVWF  x4D
0DF90:  MOVLB  0
0DF92:  BSF    FD8.1
0DF94:  MOVLW  02
0DF96:  MOVWF  FEA
0DF98:  MOVLW  47
0DF9A:  MOVWF  FE9
0DF9C:  MOVFF  24A,2EE
0DFA0:  MOVFF  249,2ED
0DFA4:  MOVFF  248,2EC
0DFA8:  MOVFF  247,2EB
0DFAC:  MOVFF  252,2F2
0DFB0:  MOVFF  251,2F1
0DFB4:  MOVFF  250,2F0
0DFB8:  MOVFF  24F,2EF
0DFBC:  CALL   5BE4
0DFC0:  MOVF   01,W
0DFC2:  MOVF   00,F
0DFC4:  BTFSS  FD8.2
0DFC6:  GOTO   E01E
0DFCA:  MOVLB  2
0DFCC:  MOVF   x4D,W
0DFCE:  XORLW  01
0DFD0:  BTFSS  FD8.2
0DFD2:  BRA    DFDA
0DFD4:  MOVLB  0
0DFD6:  GOTO   E01E
0DFDA:  MOVF   x4B,W
0DFDC:  BTFSS  FD8.2
0DFDE:  BRA    DFE6
0DFE0:  MOVLB  0
0DFE2:  GOTO   E026
0DFE6:  ANDLW  0F
0DFE8:  SUBWF  x4D,W
0DFEA:  BTFSS  FD8.2
0DFEC:  BRA    DFF4
0DFEE:  MOVLB  0
0DFF0:  GOTO   E000
0DFF4:  BTFSS  FD8.0
0DFF6:  BRA    DFFE
0DFF8:  MOVLB  0
0DFFA:  GOTO   E08E
0DFFE:  MOVLB  0
0E000:  MOVLB  2
0E002:  BTFSS  x4B.7
0E004:  BRA    E00C
0E006:  MOVLB  0
0E008:  GOTO   E08E
0E00C:  BTFSS  x4B.6
0E00E:  BRA    E016
0E010:  MOVLB  0
0E012:  GOTO   E026
0E016:  MOVLW  20
0E018:  MOVLB  0
0E01A:  GOTO   E07E
0E01E:  MOVLW  20
0E020:  MOVLB  2
0E022:  ANDWF  x4B,F
0E024:  MOVLB  0
0E026:  MOVLB  2
0E028:  BTFSC  x4B.5
0E02A:  BRA    E032
0E02C:  MOVLB  0
0E02E:  GOTO   E050
0E032:  BCF    x4B.5
0E034:  MOVF   00,W
0E036:  MOVWF  x4B
0E038:  MOVLW  2D
0E03A:  MOVLB  0
0E03C:  BTFSS  FA6.6
0E03E:  GOTO   E03C
0E042:  MOVLB  E
0E044:  MOVWF  xF9
0E046:  MOVLB  2
0E048:  MOVF   x4B,W
0E04A:  MOVWF  00
0E04C:  CLRF   x4B
0E04E:  MOVLB  0
0E050:  MOVLW  30
0E052:  MOVLB  2
0E054:  BTFSC  x4B.5
0E056:  BRA    E05E
0E058:  MOVLB  0
0E05A:  GOTO   E07E
0E05E:  BCF    x4B.5
0E060:  MOVF   00,W
0E062:  MOVWF  x4B
0E064:  MOVLW  2D
0E066:  MOVLB  0
0E068:  BTFSS  FA6.6
0E06A:  GOTO   E068
0E06E:  MOVLB  E
0E070:  MOVWF  xF9
0E072:  MOVLB  2
0E074:  MOVF   x4B,W
0E076:  MOVWF  00
0E078:  CLRF   x4B
0E07A:  MOVLW  30
0E07C:  MOVLB  0
0E07E:  ADDWF  00,F
0E080:  MOVF   00,W
0E082:  BTFSS  FA6.6
0E084:  GOTO   E082
0E088:  MOVLB  E
0E08A:  MOVWF  xF9
0E08C:  MOVLB  0
0E08E:  BCF    FD8.1
0E090:  MOVFF  252,2EE
0E094:  MOVFF  251,2ED
0E098:  MOVFF  250,2EC
0E09C:  MOVFF  24F,2EB
0E0A0:  MOVLB  2
0E0A2:  CLRF   xF2
0E0A4:  CLRF   xF1
0E0A6:  CLRF   xF0
0E0A8:  MOVLW  0A
0E0AA:  MOVWF  xEF
0E0AC:  MOVLB  0
0E0AE:  CALL   5BE4
0E0B2:  MOVFF  03,252
0E0B6:  MOVFF  02,251
0E0BA:  MOVFF  01,250
0E0BE:  MOVFF  00,24F
0E0C2:  MOVLB  2
0E0C4:  DECFSZ x4D,F
0E0C6:  BRA    E0CC
0E0C8:  BRA    E0D2
0E0CA:  MOVLB  0
0E0CC:  MOVLB  0
0E0CE:  GOTO   DF92
0E0D2:  MOVLB  0
0E0D4:  RETURN 0
*
0E124:  MOVLW  20
0E126:  MOVLB  3
0E128:  BTFSS  x25.4
0E12A:  MOVLW  30
0E12C:  MOVWF  x26
0E12E:  MOVFF  324,00
0E132:  BTFSC  00.7
0E134:  BRA    E13C
0E136:  MOVLB  0
0E138:  GOTO   E14E
0E13C:  COMF   00,F
0E13E:  INCF   00,F
0E140:  MOVFF  00,324
0E144:  MOVLW  2D
0E146:  MOVWF  x26
0E148:  BSF    x25.7
0E14A:  BSF    x25.0
0E14C:  MOVLB  0
0E14E:  MOVF   01,W
0E150:  MOVFF  324,32A
0E154:  MOVLW  64
0E156:  MOVLB  3
0E158:  MOVWF  x2B
0E15A:  MOVLB  0
0E15C:  CALL   DE4C
0E160:  MOVFF  00,324
0E164:  MOVLW  30
0E166:  ADDWF  01,W
0E168:  MOVLB  3
0E16A:  MOVWF  x27
0E16C:  MOVFF  324,32A
0E170:  MOVLW  0A
0E172:  MOVWF  x2B
0E174:  MOVLB  0
0E176:  CALL   DE4C
0E17A:  MOVLW  30
0E17C:  ADDWF  00,W
0E17E:  MOVLB  3
0E180:  MOVWF  x29
0E182:  MOVLW  30
0E184:  ADDWF  01,W
0E186:  MOVWF  x28
0E188:  MOVFF  326,00
0E18C:  MOVLB  0
0E18E:  MOVLW  30
0E190:  MOVLB  3
0E192:  SUBWF  x27,W
0E194:  BTFSS  FD8.2
0E196:  BRA    E19E
0E198:  MOVLB  0
0E19A:  GOTO   E1AA
0E19E:  BSF    x25.1
0E1A0:  BTFSC  x25.7
0E1A2:  BSF    x25.2
0E1A4:  MOVLB  0
0E1A6:  GOTO   E1EA
0E1AA:  MOVFF  326,327
0E1AE:  MOVLW  20
0E1B0:  MOVLB  3
0E1B2:  MOVWF  x26
0E1B4:  MOVLW  30
0E1B6:  SUBWF  x28,W
0E1B8:  BTFSS  FD8.2
0E1BA:  BRA    E1C2
0E1BC:  MOVLB  0
0E1BE:  GOTO   E1CE
0E1C2:  BSF    x25.0
0E1C4:  BTFSC  x25.7
0E1C6:  BSF    x25.1
0E1C8:  MOVLB  0
0E1CA:  GOTO   E1EA
0E1CE:  BTFSC  FD8.2
0E1D0:  BRA    E1D8
0E1D2:  MOVLB  3
0E1D4:  BSF    x25.0
0E1D6:  MOVLB  0
0E1D8:  BTFSS  FD8.2
0E1DA:  GOTO   E1EA
0E1DE:  MOVFF  327,328
0E1E2:  MOVLW  20
0E1E4:  MOVLB  3
0E1E6:  MOVWF  x27
0E1E8:  MOVLB  0
0E1EA:  MOVLB  3
0E1EC:  BTFSS  x25.2
0E1EE:  BRA    E1F6
0E1F0:  MOVLB  0
0E1F2:  GOTO   E210
0E1F6:  BTFSS  x25.1
0E1F8:  BRA    E200
0E1FA:  MOVLB  0
0E1FC:  GOTO   E222
0E200:  BTFSS  x25.0
0E202:  BRA    E20A
0E204:  MOVLB  0
0E206:  GOTO   E234
0E20A:  MOVLB  0
0E20C:  GOTO   E246
0E210:  MOVLB  3
0E212:  MOVF   x26,W
0E214:  MOVLB  0
0E216:  BTFSS  FA6.6
0E218:  GOTO   E216
0E21C:  MOVLB  E
0E21E:  MOVWF  xF9
0E220:  MOVLB  0
0E222:  MOVLB  3
0E224:  MOVF   x27,W
0E226:  MOVLB  0
0E228:  BTFSS  FA6.6
0E22A:  GOTO   E228
0E22E:  MOVLB  E
0E230:  MOVWF  xF9
0E232:  MOVLB  0
0E234:  MOVLB  3
0E236:  MOVF   x28,W
0E238:  MOVLB  0
0E23A:  BTFSS  FA6.6
0E23C:  GOTO   E23A
0E240:  MOVLB  E
0E242:  MOVWF  xF9
0E244:  MOVLB  0
0E246:  MOVLB  3
0E248:  MOVF   x29,W
0E24A:  MOVLB  0
0E24C:  BTFSS  FA6.6
0E24E:  GOTO   E24C
0E252:  MOVLB  E
0E254:  MOVWF  xF9
0E256:  MOVLB  0
0E258:  RETURN 0
.................... 
.................... #list
.................... 
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
*
01D92:  MOVLW  0B
01D94:  MOVWF  FEA
01D96:  MOVLW  B4
01D98:  MOVWF  FE9
01D9A:  MOVF   FEF,W
01D9C:  BTFSC  FD8.2
01D9E:  GOTO   1DBE
01DA2:  MOVLW  05
01DA4:  MOVWF  01
01DA6:  CLRF   00
01DA8:  DECFSZ 00,F
01DAA:  BRA    1DA8
01DAC:  DECFSZ 01,F
01DAE:  BRA    1DA6
01DB0:  MOVLW  2E
01DB2:  MOVWF  00
01DB4:  DECFSZ 00,F
01DB6:  BRA    1DB4
01DB8:  BRA    1DBA
01DBA:  DECFSZ FEF,F
01DBC:  BRA    1DA2
01DBE:  RETURN 0
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
*
001DA:  BTFSS  FA6.5
001DC:  GOTO   01DA
001E0:  MOVLB  F
001E2:  MOVF   x2F,W
001E4:  MOVWF  1B
001E6:  MOVLB  0
001E8:  MOVLB  F
001EA:  MOVF   x2A,W
001EC:  MOVWF  01
001EE:  BTFSC  1B.1
001F0:  BRA    01F8
001F2:  MOVLB  0
001F4:  GOTO   01FC
001F8:  BCF    x2F.4
001FA:  BSF    x2F.4
001FC:  MOVLB  0
001FE:  GOTO   0238 (RETURN)
*
05192:  BTFSS  FA6.4
05194:  GOTO   5192
05198:  MOVLB  F
0519A:  MOVWF  x29
0519C:  MOVLB  0
0519E:  GOTO   51D4 (RETURN)
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
*
02672:  MOVLB  B
02674:  MOVF   xD7,W
02676:  SUBLW  08
02678:  BTFSS  FD8.2
0267A:  BRA    2682
0267C:  MOVLB  0
0267E:  GOTO   269A
02682:  MOVWF  xD9
02684:  MOVLB  0
02686:  MOVLB  B
02688:  RLCF   xD6,F
0268A:  DECFSZ xD9,F
0268C:  BRA    2692
0268E:  BRA    2698
02690:  MOVLB  0
02692:  MOVLB  0
02694:  GOTO   2686
02698:  MOVLB  0
0269A:  BSF    F92.1
0269C:  BCF    F92.0
0269E:  BCF    F92.3
026A0:  BCF    F89.3
026A2:  MOVFF  BD7,BD9
026A6:  MOVLB  B
026A8:  BTFSS  xD6.7
026AA:  BCF    F89.0
026AC:  BTFSC  xD6.7
026AE:  BSF    F89.0
026B0:  RLCF   xD6,F
026B2:  BSF    F89.3
026B4:  MOVLW  02
026B6:  MOVWF  xDA
026B8:  MOVLB  0
026BA:  MOVLB  B
026BC:  DECFSZ xDA,F
026BE:  BRA    26C4
026C0:  BRA    26CA
026C2:  MOVLB  0
026C4:  MOVLB  0
026C6:  GOTO   26BA
026CA:  RLCF   01,F
026CC:  BTFSS  F80.1
026CE:  BCF    01.0
026D0:  BTFSC  F80.1
026D2:  BSF    01.0
026D4:  BCF    F89.3
026D6:  MOVLB  0
026D8:  BRA    26DA
026DA:  MOVLB  B
026DC:  DECFSZ xD9,F
026DE:  BRA    26E4
026E0:  BRA    26EA
026E2:  MOVLB  0
026E4:  MOVLB  0
026E6:  GOTO   26A6
026EA:  MOVLB  0
026EC:  RETURN 0
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
*
025F6:  MOVLB  B
025F8:  MOVF   xD7,W
025FA:  SUBLW  08
025FC:  BTFSS  FD8.2
025FE:  BRA    2606
02600:  MOVLB  0
02602:  GOTO   261E
02606:  MOVWF  xD9
02608:  MOVLB  0
0260A:  MOVLB  B
0260C:  RLCF   xD6,F
0260E:  DECFSZ xD9,F
02610:  BRA    2616
02612:  BRA    261C
02614:  MOVLB  0
02616:  MOVLB  0
02618:  GOTO   260A
0261C:  MOVLB  0
0261E:  BSF    F96.0
02620:  BCF    F96.6
02622:  BCF    F96.1
02624:  BCF    F8D.1
02626:  MOVFF  BD7,BD9
0262A:  MOVLB  B
0262C:  BTFSS  xD6.7
0262E:  BCF    F8D.6
02630:  BTFSC  xD6.7
02632:  BSF    F8D.6
02634:  RLCF   xD6,F
02636:  BSF    F8D.1
02638:  MOVLW  02
0263A:  MOVWF  xDA
0263C:  MOVLB  0
0263E:  MOVLB  B
02640:  DECFSZ xDA,F
02642:  BRA    2648
02644:  BRA    264E
02646:  MOVLB  0
02648:  MOVLB  0
0264A:  GOTO   263E
0264E:  RLCF   01,F
02650:  BTFSS  F84.0
02652:  BCF    01.0
02654:  BTFSC  F84.0
02656:  BSF    01.0
02658:  BCF    F8D.1
0265A:  MOVLB  0
0265C:  BRA    265E
0265E:  MOVLB  B
02660:  DECFSZ xD9,F
02662:  BRA    2668
02664:  BRA    266E
02666:  MOVLB  0
02668:  MOVLB  0
0266A:  GOTO   262A
0266E:  MOVLB  0
02670:  RETURN 0
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
*
01F0E:  MOVLB  A
01F10:  MOVF   x90,W
01F12:  SUBLW  10
01F14:  BTFSS  FD8.2
01F16:  BRA    1F1E
01F18:  MOVLB  0
01F1A:  GOTO   1F38
01F1E:  MOVWF  x92
01F20:  MOVLB  0
01F22:  MOVLB  A
01F24:  RLCF   x8E,F
01F26:  RLCF   x8F,F
01F28:  DECFSZ x92,F
01F2A:  BRA    1F30
01F2C:  BRA    1F36
01F2E:  MOVLB  0
01F30:  MOVLB  0
01F32:  GOTO   1F22
01F36:  MOVLB  0
01F38:  BSF    F93.4
01F3A:  BCF    F93.5
01F3C:  BCF    F93.2
01F3E:  BSF    F8A.2
01F40:  MOVFF  A90,A92
01F44:  MOVLB  A
01F46:  BTFSS  x8F.7
01F48:  BCF    F8A.5
01F4A:  BTFSC  x8F.7
01F4C:  BSF    F8A.5
01F4E:  RLCF   x8E,F
01F50:  RLCF   x8F,F
01F52:  BCF    F8A.2
01F54:  MOVLB  0
01F56:  BRA    1F58
01F58:  BRA    1F5A
01F5A:  RLCF   01,F
01F5C:  RLCF   02,F
01F5E:  BTFSS  F81.4
01F60:  BCF    01.0
01F62:  BTFSC  F81.4
01F64:  BSF    01.0
01F66:  BSF    F8A.2
01F68:  NOP   
01F6A:  MOVLB  A
01F6C:  DECFSZ x92,F
01F6E:  BRA    1F74
01F70:  BRA    1F7A
01F72:  MOVLB  0
01F74:  MOVLB  0
01F76:  GOTO   1F44
01F7A:  MOVLB  0
01F7C:  RETURN 0
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
*
022E2:  MOVLB  A
022E4:  MOVF   x7B,W
022E6:  SUBLW  10
022E8:  BTFSS  FD8.2
022EA:  BRA    22F2
022EC:  MOVLB  0
022EE:  GOTO   230C
022F2:  MOVWF  x7D
022F4:  MOVLB  0
022F6:  MOVLB  A
022F8:  RLCF   x79,F
022FA:  RLCF   x7A,F
022FC:  DECFSZ x7D,F
022FE:  BRA    2304
02300:  BRA    230A
02302:  MOVLB  0
02304:  MOVLB  0
02306:  GOTO   22F6
0230A:  MOVLB  0
0230C:  BCF    F95.4
0230E:  BCF    F95.5
02310:  BSF    F8C.5
02312:  MOVFF  A7B,A7D
02316:  MOVLB  A
02318:  BTFSS  x7A.7
0231A:  BCF    F8C.4
0231C:  BTFSC  x7A.7
0231E:  BSF    F8C.4
02320:  RLCF   x79,F
02322:  RLCF   x7A,F
02324:  BCF    F8C.5
02326:  MOVLW  04
02328:  MOVWF  x7E
0232A:  MOVLB  0
0232C:  MOVLB  A
0232E:  DECFSZ x7E,F
02330:  BRA    2336
02332:  BRA    233C
02334:  MOVLB  0
02336:  MOVLB  0
02338:  GOTO   232C
0233C:  BSF    F8C.5
0233E:  NOP   
02340:  DECFSZ x7D,F
02342:  BRA    2348
02344:  BRA    234E
02346:  MOVLB  0
02348:  MOVLB  0
0234A:  GOTO   2316
0234E:  MOVLB  0
02350:  RETURN 0
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル2: ハードウェア抽象化層  
.................... #include "hal/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... 
.................... unsigned int32 get_current_msec();
.................... void set_current_msec(unsigned int32 msec);
.................... void add_current_msec(unsigned int32 msec);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "hal/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "hal/gpio.h"
.................... #ifndef GPIO_H
.................... #define GPIO_H
.................... 
.................... void gpio_init();
.................... void enable_negative_power();
.................... void disable_negative_power();
.................... void connect_port1();
.................... void disconnect_port1();
.................... void connect_port2();
.................... void disconnect_port2();
.................... 
.................... 
.................... // 
.................... void connect_negative_power1(int1 state);
.................... void connect_negative_power2(int1 state);
.................... #endif // GPIO_H
.................... 
.................... #include "device_driver/ad7490_driver.h"
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "device_driver/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル3: 基本ライブラリヘッダー（型定義・通信・ツール）
.................... #include "../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/tool/mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x06AA1FFF
.................... #define CIGS_ENVIRO_START_ADDRESS 0x06AA2000
.................... #define CIGS_ENVIRO_END_ADDRESS 0x06B41FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS 0x06B42000
.................... #define CIGS_IV1_HEADER_END_ADDRESS 0x06BE1FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS 0x06BE2000
.................... #define CIGS_IV1_DATA_END_ADDRESS 0x06FE2FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS 0x06FE3000
.................... #define CIGS_IV2_HEADER_END_ADDRESS 0x07082FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS 0x07083000
.................... #define CIGS_IV2_DATA_END_ADDRESS 0x07483FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... // レベル4: デバイスドライバヘッダー
.................... #include "../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/device/ad7490.h"
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // レベル5: 通信ライブラリヘッダー
.................... #include "../lib/communication/communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // レベル6: コア機能ヘッダー
.................... #include "domain/mmj_cigs_iv.h"
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "domain/mmj_cigs_flash.h"
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x000FFFFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  0x00001000
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     0x00010000
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     0x00010000
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  0x00010000
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    0x00010000
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  0x00010000
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    0x00010000
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t flash_counter_table[];
.................... extern FlashCounter_t *flash_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "domain/mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル7: アプリケーションヘッダー
.................... #include "application/mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "application/mmj_cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_DEBUG 0xA3
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "application/mmj_cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... //==============================================================================
.................... // .cファイル統合（CCS C単一コンパイル単位）
.................... //==============================================================================
.................... 
.................... // ハードウェア層実装ファイル
.................... // 実装は各 .c からビルドするためヘッダーでの取り込みは不要。必要なら下記のように直下参照に修正。
.................... #include "hal/timer.c"
.................... #include "timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... 
.................... unsigned int32 get_current_msec();
.................... void set_current_msec(unsigned int32 msec);
.................... void add_current_msec(unsigned int32 msec);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... int8 subsec;
.................... 
.................... #INT_TIMER1
.................... void TIMER1_isr()
.................... {
....................    set_timer1(TIMER_ISR_10MSEC); 
*
0019A:  MOVLW  FE
0019C:  MOVWF  FCF
0019E:  MOVLW  A8
001A0:  MOVWF  FCE
001A2:  NOP   
....................    tick_10ms++;
001A4:  MOVLW  01
001A6:  ADDWF  1C,F
001A8:  BTFSC  FD8.0
001AA:  INCF   1D,F
001AC:  BTFSC  FD8.2
001AE:  INCF   1E,F
001B0:  BTFSC  FD8.2
001B2:  INCF   1F,F
001B4:  BCF    F9E.0
001B6:  GOTO   0074
.................... }
.................... 
.................... void timer_init()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
*
01E5A:  MOVLW  BA
01E5C:  MOVWF  FF6
01E5E:  MOVLW  01
01E60:  MOVWF  FF7
01E62:  MOVLW  00
01E64:  MOVWF  FF8
01E66:  CALL   1DC0
....................    clear_interrupt(INT_TIMER1);
01E6A:  BCF    F9E.0
....................    tick_10ms = 0;
01E6C:  CLRF   1F
01E6E:  CLRF   1E
01E70:  CLRF   1D
01E72:  CLRF   1C
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
01E74:  MOVLW  8F
01E76:  MOVWF  FCD
01E78:  CLRF   FAA
....................    set_timer1(TIMER_ISR_10MSEC); 
01E7A:  MOVLW  FE
01E7C:  MOVWF  FCF
01E7E:  MOVLW  A8
01E80:  MOVWF  FCE
01E82:  NOP   
....................    enable_interrupts(INT_TIMER1);   
01E84:  BSF    F9D.0
....................    enable_interrupts(GLOBAL);
01E86:  MOVLW  C0
01E88:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
01E8A:  MOVLW  CE
01E8C:  MOVWF  FF6
01E8E:  MOVLW  01
01E90:  MOVWF  FF7
01E92:  MOVLW  00
01E94:  MOVWF  FF8
01E96:  CALL   1DC0
01E9A:  GOTO   107F6 (RETURN)
.................... }
.................... 
.................... void set_current_10msec(unsigned int32 new_10msec)
.................... {
....................    tick_10ms = new_10msec;
.................... }
.................... 
.................... unsigned int32 get_current_time_10ms()
.................... {
....................    return tick_10ms;
*
09B5A:  MOVFF  1C,00
09B5E:  MOVFF  1D,01
09B62:  MOVFF  1E,02
09B66:  MOVFF  1F,03
09B6A:  RETURN 0
.................... }
.................... 
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return subsec;
*
036E6:  MOVFF  187,00
036EA:  CLRF   01
036EC:  CLRF   02
036EE:  CLRF   03
036F0:  RETURN 0
.................... }
.................... 
.................... unsigned int16 get_current_msec()
.................... {
....................    // Assuming subsec is in deci-seconds (0.01 sec)
....................    return (subsec / 10); // Convert deci-seconds to milliseconds
.................... }
.................... 
.................... unsigned int16 get_current_day()
.................... {
....................    return day;
.................... }
.................... 
.................... 
.................... void add_current_msec(unsigned int32 add_msec)
.................... {
....................    subsec += add_msec; // Convert milliseconds to deci-seconds
.................... }
.................... 
.................... #include "hal/uart.c"
.................... #include "uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
00202:  GOTO   0206
00206:  GOTO   0210
0020A:  BTFSS  4B.0
0020C:  GOTO   0244
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
00210:  MOVF   4A,W
00212:  SUBLW  1F
00214:  BTFSS  FD8.0
00216:  GOTO   0244
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
0021A:  MOVF   4A,W
0021C:  INCF   4A,F
0021E:  ANDLW  1F
00220:  CLRF   03
00222:  ADDLW  2A
00224:  MOVWF  FE9
00226:  MOVLW  00
00228:  ADDWFC 03,W
0022A:  MOVWF  FEA
0022C:  MOVFF  FEA,BED
00230:  MOVFF  FE9,BEC
00234:  GOTO   01DA
00238:  MOVFF  BED,FEA
0023C:  MOVFF  BEC,FE9
00240:  MOVF   01,W
00242:  MOVWF  FEF
00244:  BCF    FA6.5
00246:  GOTO   0074
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
01E30:  MOVLW  4A
01E32:  MOVWF  FF6
01E34:  MOVLW  02
01E36:  MOVWF  FF7
01E38:  MOVLW  00
01E3A:  MOVWF  FF8
01E3C:  CALL   1DC0
....................    enable_interrupts(INT_RDA3);
01E40:  BSF    F61.5
....................    enable_interrupts(GLOBAL);
01E42:  MOVLW  C0
01E44:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
01E46:  MOVLW  5C
01E48:  MOVWF  FF6
01E4A:  MOVLW  02
01E4C:  MOVWF  FF7
01E4E:  MOVLW  00
01E50:  MOVWF  FF8
01E52:  CALL   1DC0
01E56:  GOTO   107F2 (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
05154:  MOVFF  239,03
05158:  MOVLB  2
0515A:  MOVF   x38,W
0515C:  MOVWF  FE9
0515E:  MOVFF  03,FEA
05162:  MOVFF  FEF,23A
05166:  MOVFF  237,FEA
0516A:  MOVFF  236,FE9
0516E:  CLRF   00
05170:  CLRF   02
05172:  MOVFF  23A,01
05176:  MOVLB  0
05178:  CALL   29EA
....................    *receive_signal_size = 0;
0517C:  MOVFF  239,03
05180:  MOVLB  2
05182:  MOVF   x38,W
05184:  MOVWF  FE9
05186:  MOVFF  03,FEA
0518A:  CLRF   FEF
0518C:  MOVLB  0
0518E:  GOTO   108BE (RETURN)
.................... }
.................... // End of file
.................... 
.................... #include "hal/gpio.c"
.................... #include "mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "gpio.h"
.................... #ifndef GPIO_H
.................... #define GPIO_H
.................... 
.................... void gpio_init();
.................... void enable_negative_power();
.................... void disable_negative_power();
.................... void connect_port1();
.................... void disconnect_port1();
.................... void connect_port2();
.................... void disconnect_port2();
.................... 
.................... 
.................... // 
.................... void connect_negative_power1(int1 state);
.................... void connect_negative_power2(int1 state);
.................... #endif // GPIO_H
.................... 
.................... #include "../../lib/tool/types.h"
.................... #ifndef TYPES_H
.................... #define TYPES_H
.................... 
.................... #define bool int1
.................... 
.................... 
.................... 
.................... #endif // TYPES_H
.................... // End of types.h
.................... 
.................... 
.................... 
.................... void gpio_init() {
....................     enable_negative_power();
....................     disconnect_port1();
....................     disconnect_port2();
.................... }
.................... 
.................... void enable_negative_power() {
....................     output_low(EN_NPWR1);
.................... }
.................... 
.................... void connect_negative_power1(int1 state) {
....................     if (state) {
....................         output_low(EN_NPWR1);
....................     } else {
....................         output_high(EN_NPWR1);
....................     }
.................... }
.................... 
.................... void connect_negative_power2(int1 state) {
....................     if (state) {
*
04C16:  MOVLB  2
04C18:  MOVF   x36,F
04C1A:  BTFSS  FD8.2
04C1C:  BRA    4C24
04C1E:  MOVLB  0
04C20:  GOTO   4C30
04C24:  MOVLB  0
....................         output_high(EN_NPWR2);
04C26:  MOVLW  17
04C28:  MOVWF  F94
04C2A:  BSF    F8B.6
....................     } else {
04C2C:  GOTO   4C36
....................         output_low(EN_NPWR2);
04C30:  MOVLW  17
04C32:  MOVWF  F94
04C34:  BCF    F8B.6
....................     }
04C36:  GOTO   10850 (RETURN)
.................... }
.................... 
.................... void connect_port1(){
....................     output_high(CONNECT_CIGS1);
*
04C06:  MOVLW  17
04C08:  MOVWF  F94
04C0A:  BSF    F8B.3
04C0C:  RETURN 0
.................... }
.................... 
.................... void disconnect_port1(){
....................     output_low(CONNECT_CIGS1);
*
07978:  MOVLW  17
0797A:  MOVWF  F94
0797C:  BCF    F8B.3
0797E:  RETURN 0
.................... }
.................... 
.................... void connect_port2(){
....................     output_high(CONNECT_CIGS2);
*
04C0E:  MOVLW  17
04C10:  MOVWF  F94
04C12:  BSF    F8B.5
04C14:  RETURN 0
.................... }
.................... 
.................... void disconnect_port2(){
....................     output_low(CONNECT_CIGS2);
*
07980:  MOVLW  17
07982:  MOVWF  F94
07984:  BCF    F8B.5
07986:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "device_driver/ad7490_driver.c"
.................... #include "ad7490_driver.h"                          // 同じデバイスフォルダのヘッダー
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/ad7490.h"               // ADCデバイスライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void ad7490_init()
.................... {
....................     fprintf(PC, "AD7490 Initialize\r\n");
*
02086:  MOVLW  68
02088:  MOVWF  FF6
0208A:  MOVLW  02
0208C:  MOVWF  FF7
0208E:  MOVLW  00
02090:  MOVWF  FF8
02092:  CALL   1DC0
....................     output_high(ADC_CS); 
02096:  MOVLW  FD
02098:  MOVWF  F93
0209A:  BSF    F8A.1
....................     delay_ms(10); 
0209C:  MOVLW  0A
0209E:  MOVLB  B
020A0:  MOVWF  xB4
020A2:  MOVLB  0
020A4:  CALL   1D92
....................     unsigned int16 readdata = ad7490_read(ADC_CIGS2_CURR);
020A8:  MOVLW  05
020AA:  MOVLB  A
020AC:  MOVWF  x87
020AE:  MOVLB  0
020B0:  CALL   1F7E
020B4:  MOVFF  02,237
020B8:  MOVFF  01,236
....................     delay_ms(1);
020BC:  MOVLW  01
020BE:  MOVLB  B
020C0:  MOVWF  xB4
020C2:  MOVLB  0
020C4:  CALL   1D92
....................     fprintf(PC, "\t%04LX\r\n", readdata);
020C8:  MOVLW  09
020CA:  BTFSS  FA6.6
020CC:  GOTO   20CA
020D0:  MOVLB  E
020D2:  MOVWF  xF9
020D4:  MOVFF  237,AC8
020D8:  MOVLW  37
020DA:  MOVLB  A
020DC:  MOVWF  xC9
020DE:  MOVLB  0
020E0:  CALL   200A
020E4:  MOVFF  236,AC8
020E8:  MOVLW  37
020EA:  MOVLB  A
020EC:  MOVWF  xC9
020EE:  MOVLB  0
020F0:  CALL   200A
020F4:  MOVLW  0D
020F6:  BTFSS  FA6.6
020F8:  GOTO   20F6
020FC:  MOVLB  E
020FE:  MOVWF  xF9
02100:  MOVLW  0A
02102:  MOVLB  0
02104:  BTFSS  FA6.6
02106:  GOTO   2104
0210A:  MOVLB  E
0210C:  MOVWF  xF9
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
0210E:  MOVLB  2
02110:  INCFSZ x36,W
02112:  BRA    2118
02114:  BRA    211E
02116:  MOVLB  0
02118:  MOVLB  0
0211A:  GOTO   2136
0211E:  MOVLB  0
02120:  MOVLB  2
02122:  INCFSZ x37,W
02124:  BRA    212A
02126:  BRA    2130
02128:  MOVLB  0
0212A:  MOVLB  0
0212C:  GOTO   2136
02130:  MOVLB  0
02132:  GOTO   2156
02136:  MOVLB  2
02138:  MOVF   x36,F
0213A:  BTFSC  FD8.2
0213C:  BRA    2144
0213E:  MOVLB  0
02140:  GOTO   216A
02144:  MOVLB  0
02146:  MOVLB  2
02148:  MOVF   x37,F
0214A:  BTFSC  FD8.2
0214C:  BRA    2154
0214E:  MOVLB  0
02150:  GOTO   216A
02154:  MOVLB  0
....................         fprintf(PC, "\tConnect error!\r\n");
02156:  MOVLW  7C
02158:  MOVWF  FF6
0215A:  MOVLW  02
0215C:  MOVWF  FF7
0215E:  MOVLW  00
02160:  MOVWF  FF8
02162:  CALL   1DC0
....................     } else {
02166:  GOTO   217A
....................         fprintf(PC, "\tConnect successful\r\n");
0216A:  MOVLW  8E
0216C:  MOVWF  FF6
0216E:  MOVLW  02
02170:  MOVWF  FF7
02172:  MOVLW  00
02174:  MOVWF  FF8
02176:  CALL   1DC0
....................     }
....................     fprintf(PC, "\tComplete\r\n");
0217A:  MOVLW  A4
0217C:  MOVWF  FF6
0217E:  MOVLW  02
02180:  MOVWF  FF7
02182:  MOVLW  00
02184:  MOVWF  FF8
02186:  CALL   1DC0
0218A:  GOTO   107FA (RETURN)
.................... }
.................... 
.................... unsigned int16 ad7490_read(int8 channel)
*
01F7E:  MOVFF  A87,A8E
01F82:  GOTO   1E9E
01F86:  MOVFF  02,A89
01F8A:  MOVFF  01,A88
.................... {   
....................     unsigned int16 cmd = ad7490_make_cmd(channel);
....................     // fprintf(PC, "\t[ADC] Command: %04LX\r\n", cmd);
....................     output_low(ADC_CS); 
01F8E:  MOVLW  FD
01F90:  MOVWF  F93
01F92:  BCF    F8A.1
....................     delay_us(10); 
01F94:  MOVLW  0D
01F96:  MOVWF  00
01F98:  DECFSZ 00,F
01F9A:  BRA    1F98
....................     spi_xfer(ADC_STREAM, cmd); 
01F9C:  MOVFF  A89,A8F
01FA0:  MOVFF  A88,A8E
01FA4:  MOVLW  10
01FA6:  MOVLB  A
01FA8:  MOVWF  x90
01FAA:  MOVLW  01
01FAC:  MOVWF  x91
01FAE:  MOVLB  0
01FB0:  CALL   1F0E
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd);
....................     #endif
....................     output_high(ADC_CS); 
01FB4:  MOVLW  FD
01FB6:  MOVWF  F93
01FB8:  BSF    F8A.1
....................     delay_us(10);
01FBA:  MOVLW  0D
01FBC:  MOVWF  00
01FBE:  DECFSZ 00,F
01FC0:  BRA    1FBE
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
01FC2:  MOVLW  FD
01FC4:  MOVWF  F93
01FC6:  BCF    F8A.1
....................     delay_us(10);
01FC8:  MOVLW  0D
01FCA:  MOVWF  00
01FCC:  DECFSZ 00,F
01FCE:  BRA    1FCC
....................     unsigned int16 ans = spi_xfer(ADC_STREAM, 0x0000);
01FD0:  MOVLB  A
01FD2:  CLRF   x8F
01FD4:  CLRF   x8E
01FD6:  MOVLW  10
01FD8:  MOVWF  x90
01FDA:  MOVLW  01
01FDC:  MOVWF  x91
01FDE:  MOVLB  0
01FE0:  CALL   1F0E
01FE4:  MOVFF  02,A8B
01FE8:  MOVFF  01,A8A
....................     output_high(ADC_CS); 
01FEC:  MOVLW  FD
01FEE:  MOVWF  F93
01FF0:  BSF    F8A.1
....................     unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
01FF2:  MOVLB  A
01FF4:  MOVF   x8A,W
01FF6:  MOVWF  x8C
01FF8:  MOVF   x8B,W
01FFA:  ANDLW  0F
01FFC:  MOVWF  x8D
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata);
....................     #endif
....................     return readdata;
01FFE:  MOVF   x8C,W
02000:  MOVWF  01
02002:  MOVF   x8D,W
02004:  MOVWF  02
02006:  MOVLB  0
02008:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "device_driver/mcp4901_driver.c"
.................... #include "mcp4901_driver.h"                        
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/mmj_cigs_config.h"             
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mcp4901.h"       
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // #define MCP4901_DEBUG
.................... 
.................... void mcp4901_init()
.................... {
....................     fprintf(PC, "MCP4901 Initialize\r\n");
*
023D6:  MOVLW  B0
023D8:  MOVWF  FF6
023DA:  MOVLW  02
023DC:  MOVWF  FF7
023DE:  MOVLW  00
023E0:  MOVWF  FF8
023E2:  CALL   1DC0
....................     output_high(DAC1_CS); 
023E6:  MOVLW  3F
023E8:  MOVWF  F95
023EA:  BSF    F8C.7
....................     output_high(DAC2_CS); 
023EC:  MOVLW  3F
023EE:  MOVWF  F95
023F0:  BSF    F8C.6
....................     delay_ms(10); 
023F2:  MOVLW  0A
023F4:  MOVLB  B
023F6:  MOVWF  xB4
023F8:  MOVLB  0
023FA:  CALL   1D92
....................     mcp4901_1_write(10); 
023FE:  MOVLB  A
02400:  CLRF   x76
02402:  MOVLW  0A
02404:  MOVWF  x75
02406:  MOVLB  0
02408:  CALL   2352
....................     mcp4901_2_write(10); 
0240C:  MOVLB  A
0240E:  CLRF   x76
02410:  MOVLW  0A
02412:  MOVWF  x75
02414:  MOVLB  0
02416:  CALL   2394
....................     unsigned int16 readdata;
....................     readdata = ad7490_read(ADC_CIGS1_VREF); 
0241A:  MOVLW  03
0241C:  MOVLB  A
0241E:  MOVWF  x87
02420:  MOVLB  0
02422:  CALL   1F7E
02426:  MOVFF  02,237
0242A:  MOVFF  01,236
....................     fprintf(PC, "%04LX\r\n", readdata);
0242E:  MOVFF  237,AC8
02432:  MOVLW  37
02434:  MOVLB  A
02436:  MOVWF  xC9
02438:  MOVLB  0
0243A:  CALL   200A
0243E:  MOVFF  236,AC8
02442:  MOVLW  37
02444:  MOVLB  A
02446:  MOVWF  xC9
02448:  MOVLB  0
0244A:  CALL   200A
0244E:  MOVLW  0D
02450:  BTFSS  FA6.6
02452:  GOTO   2450
02456:  MOVLB  E
02458:  MOVWF  xF9
0245A:  MOVLW  0A
0245C:  MOVLB  0
0245E:  BTFSS  FA6.6
02460:  GOTO   245E
02464:  MOVLB  E
02466:  MOVWF  xF9
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
02468:  MOVLB  2
0246A:  INCFSZ x36,W
0246C:  BRA    2472
0246E:  BRA    2478
02470:  MOVLB  0
02472:  MOVLB  0
02474:  GOTO   2490
02478:  MOVLB  0
0247A:  MOVLB  2
0247C:  INCFSZ x37,W
0247E:  BRA    2484
02480:  BRA    248A
02482:  MOVLB  0
02484:  MOVLB  0
02486:  GOTO   2490
0248A:  MOVLB  0
0248C:  GOTO   24B0
02490:  MOVLB  2
02492:  MOVF   x36,F
02494:  BTFSC  FD8.2
02496:  BRA    249E
02498:  MOVLB  0
0249A:  GOTO   24C4
0249E:  MOVLB  0
024A0:  MOVLB  2
024A2:  MOVF   x37,F
024A4:  BTFSC  FD8.2
024A6:  BRA    24AE
024A8:  MOVLB  0
024AA:  GOTO   24C4
024AE:  MOVLB  0
....................         fprintf(PC, "\t[DAC Port 1] Connect error!\r\n");
024B0:  MOVLW  C6
024B2:  MOVWF  FF6
024B4:  MOVLW  02
024B6:  MOVWF  FF7
024B8:  MOVLW  00
024BA:  MOVWF  FF8
024BC:  CALL   1DC0
....................     } else {
024C0:  GOTO   24D4
....................         fprintf(PC, "\t[DAC Port 1] Connect successful\r\n");
024C4:  MOVLW  E6
024C6:  MOVWF  FF6
024C8:  MOVLW  02
024CA:  MOVWF  FF7
024CC:  MOVLW  00
024CE:  MOVWF  FF8
024D0:  CALL   1DC0
....................     }
....................     fprintf(PC, "%04LX\r\n", readdata);
024D4:  MOVFF  237,AC8
024D8:  MOVLW  37
024DA:  MOVLB  A
024DC:  MOVWF  xC9
024DE:  MOVLB  0
024E0:  CALL   200A
024E4:  MOVFF  236,AC8
024E8:  MOVLW  37
024EA:  MOVLB  A
024EC:  MOVWF  xC9
024EE:  MOVLB  0
024F0:  CALL   200A
024F4:  MOVLW  0D
024F6:  BTFSS  FA6.6
024F8:  GOTO   24F6
024FC:  MOVLB  E
024FE:  MOVWF  xF9
02500:  MOVLW  0A
02502:  MOVLB  0
02504:  BTFSS  FA6.6
02506:  GOTO   2504
0250A:  MOVLB  E
0250C:  MOVWF  xF9
....................     readdata = ad7490_read(ADC_CIGS2_VREF); 
0250E:  MOVLW  07
02510:  MOVLB  A
02512:  MOVWF  x87
02514:  MOVLB  0
02516:  CALL   1F7E
0251A:  MOVFF  02,237
0251E:  MOVFF  01,236
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
02522:  MOVLB  2
02524:  INCFSZ x36,W
02526:  BRA    252C
02528:  BRA    2532
0252A:  MOVLB  0
0252C:  MOVLB  0
0252E:  GOTO   254A
02532:  MOVLB  0
02534:  MOVLB  2
02536:  INCFSZ x37,W
02538:  BRA    253E
0253A:  BRA    2544
0253C:  MOVLB  0
0253E:  MOVLB  0
02540:  GOTO   254A
02544:  MOVLB  0
02546:  GOTO   256A
0254A:  MOVLB  2
0254C:  MOVF   x36,F
0254E:  BTFSC  FD8.2
02550:  BRA    2558
02552:  MOVLB  0
02554:  GOTO   257E
02558:  MOVLB  0
0255A:  MOVLB  2
0255C:  MOVF   x37,F
0255E:  BTFSC  FD8.2
02560:  BRA    2568
02562:  MOVLB  0
02564:  GOTO   257E
02568:  MOVLB  0
....................         fprintf(PC, "\t[DAC Port 2] Connect error!\r\n");
0256A:  MOVLW  0A
0256C:  MOVWF  FF6
0256E:  MOVLW  03
02570:  MOVWF  FF7
02572:  MOVLW  00
02574:  MOVWF  FF8
02576:  CALL   1DC0
....................     } else {
0257A:  GOTO   258E
....................         fprintf(PC, "\t[DAC Port 2] Connect successful\r\n");
0257E:  MOVLW  2A
02580:  MOVWF  FF6
02582:  MOVLW  03
02584:  MOVWF  FF7
02586:  MOVLW  00
02588:  MOVWF  FF8
0258A:  CALL   1DC0
....................     }
....................     fprintf(PC, "\tComplete\r\n");
0258E:  MOVLW  4E
02590:  MOVWF  FF6
02592:  MOVLW  03
02594:  MOVWF  FF7
02596:  MOVLW  00
02598:  MOVWF  FF8
0259A:  CALL   1DC0
0259E:  GOTO   107FE (RETURN)
.................... }
.................... 
.................... 
.................... void mcp4901_1_write(unsigned int16 value)
*
02352:  MOVFF  A76,A7A
02356:  MOVFF  A75,A79
0235A:  CALL   218E
0235E:  MOVFF  02,A78
02362:  MOVFF  01,A77
.................... {
....................     unsigned int16 cmd = mcp4901_make_cmd(value);
....................     #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................     #endif
....................     output_low(DAC1_CS); 
02366:  MOVLW  3F
02368:  MOVWF  F95
0236A:  BCF    F8C.7
....................     delay_us(10); 
0236C:  MOVLW  0D
0236E:  MOVWF  00
02370:  DECFSZ 00,F
02372:  BRA    2370
....................     spi_xfer(DAC_STREAM, cmd); 
02374:  MOVFF  A78,A7A
02378:  MOVFF  A77,A79
0237C:  MOVLW  10
0237E:  MOVLB  A
02380:  MOVWF  x7B
02382:  MOVLW  01
02384:  MOVWF  x7C
02386:  MOVLB  0
02388:  CALL   22E2
....................     output_high(DAC1_CS); 
0238C:  MOVLW  3F
0238E:  MOVWF  F95
02390:  BSF    F8C.7
02392:  RETURN 0
.................... }
.................... 
.................... void mcp4901_2_write(unsigned int16 value)
02394:  MOVFF  A76,A7A
02398:  MOVFF  A75,A79
0239C:  CALL   218E
023A0:  MOVFF  02,A78
023A4:  MOVFF  01,A77
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC2_CS); 
023A8:  MOVLW  3F
023AA:  MOVWF  F95
023AC:  BCF    F8C.6
....................    delay_us(100); 
023AE:  MOVLW  85
023B0:  MOVWF  00
023B2:  DECFSZ 00,F
023B4:  BRA    23B2
....................    spi_xfer(DAC_STREAM, cmd); 
023B6:  MOVFF  A78,A7A
023BA:  MOVFF  A77,A79
023BE:  MOVLW  10
023C0:  MOVLB  A
023C2:  MOVWF  x7B
023C4:  MOVLW  01
023C6:  MOVWF  x7C
023C8:  MOVLB  0
023CA:  CALL   22E2
....................    output_high(DAC2_CS); 
023CE:  MOVLW  3F
023D0:  MOVWF  F95
023D2:  BSF    F8C.6
023D4:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... 
.................... // ライブラリ実装ファイル
.................... #include "../lib/device/ad7490.c"
.................... // #include "ad7490.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 ad7490_readdata(unsigned int16 channel)
.................... {
....................     spi_xfer(ADC_STREAM, channel); // Dummy transfer to start communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC, "\t[ADC] <<< %04LX\r\n", channel);
....................     #endif
....................     unsigned int16 ans = spi_xfer(ADC_STREAM);
....................     return ans & 0x0FFF; //Conver LSB <--> MSB
.................... }
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     cmd.fields.reserved0 = 0; // Reserved bits
*
01E9E:  MOVLB  A
01EA0:  BCF    x8F.0
....................     cmd.fields.reserved1 = 0; // Reserved bits
01EA2:  BCF    x8F.1
....................     cmd.fields.reserved2 = 0; // Reserved bits
01EA4:  BCF    x8F.2
....................     cmd.fields.reserved3 = 0;
01EA6:  BCF    x8F.3
....................     cmd.fields.coding = 1; // Two's complement
01EA8:  BSF    x8F.4
....................     cmd.fields.range = 0; // Normal mode
01EAA:  BCF    x8F.5
....................     cmd.fields.weak_tri = 0; // Strong trigger
01EAC:  BCF    x8F.6
....................     cmd.fields.shadow = 0; // Direct access
01EAE:  BCF    x8F.7
....................     cmd.fields.pm0 = AD7490_PM_AUTO_STANDBY & 0b00000001; // Power mode bits
01EB0:  BSF    x90.0
....................     cmd.fields.pm1 = (AD7490_PM_AUTO_STANDBY >> 1) & 0b00000001; // Power mode bits
01EB2:  BSF    x90.1
....................     cmd.fields.add0 = (channel >> 0) & 0b00000001; // Channel address bits
01EB4:  MOVF   x8E,W
01EB6:  ANDLW  01
01EB8:  MOVWF  01
01EBA:  BCF    x90.2
01EBC:  BTFSC  01.0
01EBE:  BSF    x90.2
....................     cmd.fields.add1 = (channel >> 1) & 0b00000001; // Channel address bits
01EC0:  BCF    FD8.0
01EC2:  RRCF   x8E,W
01EC4:  ANDLW  01
01EC6:  MOVWF  01
01EC8:  BCF    x90.3
01ECA:  BTFSC  01.0
01ECC:  BSF    x90.3
....................     cmd.fields.add2 = (channel >> 2) & 0b00000001; // Channel address bits
01ECE:  RRCF   x8E,W
01ED0:  MOVWF  00
01ED2:  RRCF   00,F
01ED4:  MOVLW  3F
01ED6:  ANDWF  00,F
01ED8:  MOVF   00,W
01EDA:  ANDLW  01
01EDC:  MOVWF  01
01EDE:  BCF    x90.4
01EE0:  BTFSC  01.0
01EE2:  BSF    x90.4
....................     cmd.fields.add3 = (channel >> 3) & 0b00000001; // Channel address bits
01EE4:  RRCF   x8E,W
01EE6:  MOVWF  00
01EE8:  RRCF   00,F
01EEA:  RRCF   00,F
01EEC:  MOVLW  1F
01EEE:  ANDWF  00,F
01EF0:  MOVF   00,W
01EF2:  ANDLW  01
01EF4:  MOVWF  01
01EF6:  BCF    x90.5
01EF8:  BTFSC  01.0
01EFA:  BSF    x90.5
....................     cmd.fields.seq = 0; // Random mode
01EFC:  BCF    x90.6
....................     cmd.fields.write = 1; // Read operation
01EFE:  BSF    x90.7
.................... 
.................... 
....................     return cmd.value;
01F00:  MOVF   x8F,W
01F02:  MOVWF  01
01F04:  MOVF   x90,W
01F06:  MOVWF  02
01F08:  MOVLB  0
01F0A:  GOTO   1F86 (RETURN)
.................... }
.................... 
.................... #include "../lib/device/mcp4901.c"
.................... // #include "mcp4901.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value)
.................... {
....................    mcp4901_cmd_t cmd;
....................    cmd.fields.startbit = 0; // Start bit
*
0218E:  MOVLB  A
02190:  BCF    x7C.7
....................    cmd.fields.buffer = 1; // Buffer used
02192:  BSF    x7C.6
....................    cmd.fields.gain = 1; // Gain 1x
02194:  BSF    x7C.5
....................    cmd.fields.shutdown = 1; // Normal operation
02196:  BSF    x7C.4
....................    cmd.fields.data7 = (value >> 7) & 0x01;
02198:  RRCF   x7A,W
0219A:  MOVWF  x7E
0219C:  RRCF   x79,W
0219E:  MOVWF  x7D
021A0:  RRCF   x7E,F
021A2:  RRCF   x7D,F
021A4:  RRCF   x7E,F
021A6:  RRCF   x7D,F
021A8:  RRCF   x7E,F
021AA:  RRCF   x7D,F
021AC:  RRCF   x7E,F
021AE:  RRCF   x7D,F
021B0:  RRCF   x7E,F
021B2:  RRCF   x7D,F
021B4:  RRCF   x7E,F
021B6:  RRCF   x7D,F
021B8:  MOVLW  01
021BA:  ANDWF  x7E,F
021BC:  MOVF   x7D,W
021BE:  ANDLW  01
021C0:  MOVWF  00
021C2:  CLRF   03
021C4:  MOVF   00,W
021C6:  MOVWF  01
021C8:  BCF    x7C.3
021CA:  BTFSC  01.0
021CC:  BSF    x7C.3
....................    cmd.fields.data6 = (value >> 6) & 0x01;
021CE:  RRCF   x7A,W
021D0:  MOVWF  x7E
021D2:  RRCF   x79,W
021D4:  MOVWF  x7D
021D6:  RRCF   x7E,F
021D8:  RRCF   x7D,F
021DA:  RRCF   x7E,F
021DC:  RRCF   x7D,F
021DE:  RRCF   x7E,F
021E0:  RRCF   x7D,F
021E2:  RRCF   x7E,F
021E4:  RRCF   x7D,F
021E6:  RRCF   x7E,F
021E8:  RRCF   x7D,F
021EA:  MOVLW  03
021EC:  ANDWF  x7E,F
021EE:  MOVF   x7D,W
021F0:  ANDLW  01
021F2:  MOVWF  00
021F4:  CLRF   03
021F6:  MOVF   00,W
021F8:  MOVWF  01
021FA:  BCF    x7C.2
021FC:  BTFSC  01.0
021FE:  BSF    x7C.2
....................    cmd.fields.data5 = (value >> 5) & 0x01;
02200:  RRCF   x7A,W
02202:  MOVWF  x7E
02204:  RRCF   x79,W
02206:  MOVWF  x7D
02208:  RRCF   x7E,F
0220A:  RRCF   x7D,F
0220C:  RRCF   x7E,F
0220E:  RRCF   x7D,F
02210:  RRCF   x7E,F
02212:  RRCF   x7D,F
02214:  RRCF   x7E,F
02216:  RRCF   x7D,F
02218:  MOVLW  07
0221A:  ANDWF  x7E,F
0221C:  MOVF   x7D,W
0221E:  ANDLW  01
02220:  MOVWF  00
02222:  CLRF   03
02224:  MOVF   00,W
02226:  MOVWF  01
02228:  BCF    x7C.1
0222A:  BTFSC  01.0
0222C:  BSF    x7C.1
....................    cmd.fields.data4 = (value >> 4) & 0x01;
0222E:  RRCF   x7A,W
02230:  MOVWF  x7E
02232:  RRCF   x79,W
02234:  MOVWF  x7D
02236:  RRCF   x7E,F
02238:  RRCF   x7D,F
0223A:  RRCF   x7E,F
0223C:  RRCF   x7D,F
0223E:  RRCF   x7E,F
02240:  RRCF   x7D,F
02242:  MOVLW  0F
02244:  ANDWF  x7E,F
02246:  MOVF   x7D,W
02248:  ANDLW  01
0224A:  MOVWF  00
0224C:  CLRF   03
0224E:  MOVF   00,W
02250:  MOVWF  01
02252:  BCF    x7C.0
02254:  BTFSC  01.0
02256:  BSF    x7C.0
....................    cmd.fields.data3 = (value >> 3) & 0x01;
02258:  RRCF   x7A,W
0225A:  MOVWF  x7E
0225C:  RRCF   x79,W
0225E:  MOVWF  x7D
02260:  RRCF   x7E,F
02262:  RRCF   x7D,F
02264:  RRCF   x7E,F
02266:  RRCF   x7D,F
02268:  MOVLW  1F
0226A:  ANDWF  x7E,F
0226C:  MOVF   x7D,W
0226E:  ANDLW  01
02270:  MOVWF  00
02272:  CLRF   03
02274:  MOVF   00,W
02276:  MOVWF  01
02278:  BCF    x7B.7
0227A:  BTFSC  01.0
0227C:  BSF    x7B.7
....................    cmd.fields.data2 = (value >> 2) & 0x01;
0227E:  RRCF   x7A,W
02280:  MOVWF  x7E
02282:  RRCF   x79,W
02284:  MOVWF  x7D
02286:  RRCF   x7E,F
02288:  RRCF   x7D,F
0228A:  MOVLW  3F
0228C:  ANDWF  x7E,F
0228E:  MOVF   x7D,W
02290:  ANDLW  01
02292:  MOVWF  00
02294:  CLRF   03
02296:  MOVF   00,W
02298:  MOVWF  01
0229A:  BCF    x7B.6
0229C:  BTFSC  01.0
0229E:  BSF    x7B.6
....................    cmd.fields.data1 = (value >> 1) & 0x01;
022A0:  BCF    FD8.0
022A2:  RRCF   x7A,W
022A4:  MOVWF  x7E
022A6:  RRCF   x79,W
022A8:  MOVWF  x7D
022AA:  MOVF   x7D,W
022AC:  ANDLW  01
022AE:  MOVWF  00
022B0:  CLRF   03
022B2:  MOVF   00,W
022B4:  MOVWF  01
022B6:  BCF    x7B.5
022B8:  BTFSC  01.0
022BA:  BSF    x7B.5
....................    cmd.fields.data0 = value & 0x01; // LSB of the data
022BC:  MOVF   x79,W
022BE:  ANDLW  01
022C0:  MOVWF  00
022C2:  CLRF   03
022C4:  MOVF   00,W
022C6:  MOVWF  01
022C8:  BCF    x7B.4
022CA:  BTFSC  01.0
022CC:  BSF    x7B.4
....................    cmd.fields.reserved = 0; // Reserved bits
022CE:  BCF    x7B.3
....................    cmd.fields.reserved2 = 0; // Reserved bits
022D0:  BCF    x7B.2
....................    cmd.fields.reserved3 = 0; // Reserved bits
022D2:  BCF    x7B.1
....................    cmd.fields.reserved4 = 0; // Reserved bits
022D4:  BCF    x7B.0
.................... 
....................    return cmd.value;
022D6:  MOVF   x7B,W
022D8:  MOVWF  01
022DA:  MOVF   x7C,W
022DC:  MOVWF  02
022DE:  MOVLB  0
022E0:  RETURN 0
.................... }
.................... 
.................... #include "../lib/device/mt25q.c"
.................... #include "mt25q.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
036F2:  MOVLB  B
036F4:  MOVF   xB4,W
036F6:  XORLW  00
036F8:  MOVLB  0
036FA:  BTFSC  FD8.2
036FC:  GOTO   370C
03700:  XORLW  01
03702:  BTFSC  FD8.2
03704:  GOTO   3774
03708:  GOTO   37DC
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0370C:  MOVLB  B
0370E:  CLRF   xBD
03710:  CLRF   xBC
03712:  MOVLB  0
03714:  MOVLB  B
03716:  MOVF   xBD,W
03718:  SUBWF  xBB,W
0371A:  BTFSC  FD8.0
0371C:  BRA    3724
0371E:  MOVLB  0
03720:  GOTO   3770
03724:  MOVLB  0
03726:  BTFSS  FD8.2
03728:  GOTO   373E
0372C:  MOVLB  B
0372E:  MOVF   xBA,W
03730:  SUBWF  xBC,W
03732:  BTFSS  FD8.0
03734:  BRA    373C
03736:  MOVLB  0
03738:  GOTO   3770
0373C:  MOVLB  0
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
0373E:  MOVLB  B
03740:  MOVF   xB8,W
03742:  ADDWF  xBC,W
03744:  MOVWF  FE9
03746:  MOVF   xB9,W
03748:  ADDWFC xBD,W
0374A:  MOVWF  FEA
0374C:  MOVFF  FEF,BC0
03750:  MOVFF  BC0,BD6
03754:  MOVLW  08
03756:  MOVWF  xD7
03758:  MOVLW  01
0375A:  MOVWF  xD8
0375C:  MOVLB  0
0375E:  CALL   25F6
03762:  MOVLB  B
03764:  INCF   xBC,F
03766:  BTFSC  FD8.2
03768:  INCF   xBD,F
0376A:  MOVLB  0
0376C:  GOTO   3714
....................          break;
03770:  GOTO   37E0
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03774:  MOVLB  B
03776:  CLRF   xBF
03778:  CLRF   xBE
0377A:  MOVLB  0
0377C:  MOVLB  B
0377E:  MOVF   xBF,W
03780:  SUBWF  xBB,W
03782:  BTFSC  FD8.0
03784:  BRA    378C
03786:  MOVLB  0
03788:  GOTO   37D8
0378C:  MOVLB  0
0378E:  BTFSS  FD8.2
03790:  GOTO   37A6
03794:  MOVLB  B
03796:  MOVF   xBA,W
03798:  SUBWF  xBE,W
0379A:  BTFSS  FD8.0
0379C:  BRA    37A4
0379E:  MOVLB  0
037A0:  GOTO   37D8
037A4:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
037A6:  MOVLB  B
037A8:  MOVF   xB8,W
037AA:  ADDWF  xBE,W
037AC:  MOVWF  FE9
037AE:  MOVF   xB9,W
037B0:  ADDWFC xBF,W
037B2:  MOVWF  FEA
037B4:  MOVFF  FEF,BC0
037B8:  MOVFF  BC0,BD6
037BC:  MOVLW  08
037BE:  MOVWF  xD7
037C0:  MOVLW  01
037C2:  MOVWF  xD8
037C4:  MOVLB  0
037C6:  CALL   2672
037CA:  MOVLB  B
037CC:  INCF   xBE,F
037CE:  BTFSC  FD8.2
037D0:  INCF   xBF,F
037D2:  MOVLB  0
037D4:  GOTO   377C
....................          break;
037D8:  GOTO   37E0
....................          
....................       default:
....................          break;
037DC:  GOTO   37E0
....................    }
....................    return;
037E0:  RETURN 0
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount, int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
026EE:  MOVLB  B
026F0:  MOVF   xBA,W
026F2:  XORLW  00
026F4:  MOVLB  0
026F6:  BTFSC  FD8.2
026F8:  GOTO   2708
026FC:  XORLW  01
026FE:  BTFSC  FD8.2
02700:  GOTO   2812
02704:  GOTO   291C
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02708:  MOVLB  B
0270A:  CLRF   xC9
0270C:  CLRF   xC8
0270E:  MOVLB  0
02710:  MOVLB  B
02712:  MOVF   xC9,W
02714:  SUBWF  xC1,W
02716:  BTFSC  FD8.0
02718:  BRA    2720
0271A:  MOVLB  0
0271C:  GOTO   276C
02720:  MOVLB  0
02722:  BTFSS  FD8.2
02724:  GOTO   273A
02728:  MOVLB  B
0272A:  MOVF   xC0,W
0272C:  SUBWF  xC8,W
0272E:  BTFSS  FD8.0
02730:  BRA    2738
02732:  MOVLB  0
02734:  GOTO   276C
02738:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
0273A:  MOVLB  B
0273C:  MOVF   xBE,W
0273E:  ADDWF  xC8,W
02740:  MOVWF  FE9
02742:  MOVF   xBF,W
02744:  ADDWFC xC9,W
02746:  MOVWF  FEA
02748:  MOVFF  FEF,BD4
0274C:  MOVFF  BD4,BD6
02750:  MOVLW  08
02752:  MOVWF  xD7
02754:  MOVLW  01
02756:  MOVWF  xD8
02758:  MOVLB  0
0275A:  CALL   25F6
0275E:  MOVLB  B
02760:  INCF   xC8,F
02762:  BTFSC  FD8.2
02764:  INCF   xC9,F
02766:  MOVLB  0
02768:  GOTO   2710
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
0276C:  MOVLB  B
0276E:  CLRF   xCD
02770:  CLRF   xCC
02772:  CLRF   xCB
02774:  CLRF   xCA
02776:  MOVLB  0
02778:  MOVLB  B
0277A:  MOVF   xCD,W
0277C:  SUBWF  xC7,W
0277E:  BTFSC  FD8.0
02780:  BRA    2788
02782:  MOVLB  0
02784:  GOTO   280E
02788:  MOVLB  0
0278A:  BTFSS  FD8.2
0278C:  GOTO   27D2
02790:  MOVLB  B
02792:  MOVF   xCC,W
02794:  SUBWF  xC6,W
02796:  BTFSC  FD8.0
02798:  BRA    27A0
0279A:  MOVLB  0
0279C:  GOTO   280E
027A0:  MOVLB  0
027A2:  BTFSS  FD8.2
027A4:  GOTO   27D2
027A8:  MOVLB  B
027AA:  MOVF   xCB,W
027AC:  SUBWF  xC5,W
027AE:  BTFSC  FD8.0
027B0:  BRA    27B8
027B2:  MOVLB  0
027B4:  GOTO   280E
027B8:  MOVLB  0
027BA:  BTFSS  FD8.2
027BC:  GOTO   27D2
027C0:  MOVLB  B
027C2:  MOVF   xC4,W
027C4:  SUBWF  xCA,W
027C6:  BTFSS  FD8.0
027C8:  BRA    27D0
027CA:  MOVLB  0
027CC:  GOTO   280E
027D0:  MOVLB  0
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
027D2:  MOVLB  B
027D4:  MOVF   xC2,W
027D6:  ADDWF  xCA,W
027D8:  MOVWF  FE9
027DA:  MOVF   xC3,W
027DC:  ADDWFC xCB,W
027DE:  MOVWF  FEA
027E0:  MOVLW  02
027E2:  MOVWF  xD6
027E4:  MOVLW  08
027E6:  MOVWF  xD7
027E8:  MOVLW  01
027EA:  MOVWF  xD8
027EC:  MOVLB  0
027EE:  CALL   25F6
027F2:  MOVFF  01,FEF
027F6:  MOVLW  01
027F8:  MOVLB  B
027FA:  ADDWF  xCA,F
027FC:  BTFSC  FD8.0
027FE:  INCF   xCB,F
02800:  BTFSC  FD8.2
02802:  INCF   xCC,F
02804:  BTFSC  FD8.2
02806:  INCF   xCD,F
02808:  MOVLB  0
0280A:  GOTO   2778
....................          break;
0280E:  GOTO   2920
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02812:  MOVLB  B
02814:  CLRF   xCF
02816:  CLRF   xCE
02818:  MOVLB  0
0281A:  MOVLB  B
0281C:  MOVF   xCF,W
0281E:  SUBWF  xC1,W
02820:  BTFSC  FD8.0
02822:  BRA    282A
02824:  MOVLB  0
02826:  GOTO   2876
0282A:  MOVLB  0
0282C:  BTFSS  FD8.2
0282E:  GOTO   2844
02832:  MOVLB  B
02834:  MOVF   xC0,W
02836:  SUBWF  xCE,W
02838:  BTFSS  FD8.0
0283A:  BRA    2842
0283C:  MOVLB  0
0283E:  GOTO   2876
02842:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
02844:  MOVLB  B
02846:  MOVF   xBE,W
02848:  ADDWF  xCE,W
0284A:  MOVWF  FE9
0284C:  MOVF   xBF,W
0284E:  ADDWFC xCF,W
02850:  MOVWF  FEA
02852:  MOVFF  FEF,BD4
02856:  MOVFF  BD4,BD6
0285A:  MOVLW  08
0285C:  MOVWF  xD7
0285E:  MOVLW  01
02860:  MOVWF  xD8
02862:  MOVLB  0
02864:  CALL   2672
02868:  MOVLB  B
0286A:  INCF   xCE,F
0286C:  BTFSC  FD8.2
0286E:  INCF   xCF,F
02870:  MOVLB  0
02872:  GOTO   281A
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
02876:  MOVLB  B
02878:  CLRF   xD3
0287A:  CLRF   xD2
0287C:  CLRF   xD1
0287E:  CLRF   xD0
02880:  MOVLB  0
02882:  MOVLB  B
02884:  MOVF   xD3,W
02886:  SUBWF  xC7,W
02888:  BTFSC  FD8.0
0288A:  BRA    2892
0288C:  MOVLB  0
0288E:  GOTO   2918
02892:  MOVLB  0
02894:  BTFSS  FD8.2
02896:  GOTO   28DC
0289A:  MOVLB  B
0289C:  MOVF   xD2,W
0289E:  SUBWF  xC6,W
028A0:  BTFSC  FD8.0
028A2:  BRA    28AA
028A4:  MOVLB  0
028A6:  GOTO   2918
028AA:  MOVLB  0
028AC:  BTFSS  FD8.2
028AE:  GOTO   28DC
028B2:  MOVLB  B
028B4:  MOVF   xD1,W
028B6:  SUBWF  xC5,W
028B8:  BTFSC  FD8.0
028BA:  BRA    28C2
028BC:  MOVLB  0
028BE:  GOTO   2918
028C2:  MOVLB  0
028C4:  BTFSS  FD8.2
028C6:  GOTO   28DC
028CA:  MOVLB  B
028CC:  MOVF   xC4,W
028CE:  SUBWF  xD0,W
028D0:  BTFSS  FD8.0
028D2:  BRA    28DA
028D4:  MOVLB  0
028D6:  GOTO   2918
028DA:  MOVLB  0
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
028DC:  MOVLB  B
028DE:  MOVF   xC2,W
028E0:  ADDWF  xD0,W
028E2:  MOVWF  FE9
028E4:  MOVF   xC3,W
028E6:  ADDWFC xD1,W
028E8:  MOVWF  FEA
028EA:  MOVLW  01
028EC:  MOVWF  xD6
028EE:  MOVLW  08
028F0:  MOVWF  xD7
028F2:  MOVLW  01
028F4:  MOVWF  xD8
028F6:  MOVLB  0
028F8:  CALL   2672
028FC:  MOVFF  01,FEF
02900:  MOVLW  01
02902:  MOVLB  B
02904:  ADDWF  xD0,F
02906:  BTFSC  FD8.0
02908:  INCF   xD1,F
0290A:  BTFSC  FD8.2
0290C:  INCF   xD2,F
0290E:  BTFSC  FD8.2
02910:  INCF   xD3,F
02912:  MOVLB  0
02914:  GOTO   2882
....................          break;
02918:  GOTO   2920
....................    
....................          
....................       default:
....................          break;
0291C:  GOTO   2920
....................    }
....................    return;
02920:  RETURN 0
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, int8 *cmd_data, unsigned int8 cmd_amount, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
037E2:  MOVLB  B
037E4:  MOVF   xB4,W
037E6:  XORLW  00
037E8:  MOVLB  0
037EA:  BTFSC  FD8.2
037EC:  GOTO   37FC
037F0:  XORLW  01
037F2:  BTFSC  FD8.2
037F4:  GOTO   38AA
037F8:  GOTO   3958
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
037FC:  MOVLB  B
037FE:  CLRF   xBF
03800:  MOVLB  0
03802:  MOVLB  B
03804:  MOVF   xBA,W
03806:  SUBWF  xBF,W
03808:  BTFSS  FD8.0
0380A:  BRA    3812
0380C:  MOVLB  0
0380E:  GOTO   3842
03812:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
03814:  MOVLB  B
03816:  MOVF   xBF,W
03818:  ADDWF  xB8,W
0381A:  MOVWF  FE9
0381C:  MOVLW  00
0381E:  ADDWFC xB9,W
03820:  MOVWF  FEA
03822:  MOVFF  FEF,BC5
03826:  MOVFF  BC5,BD6
0382A:  MOVLW  08
0382C:  MOVWF  xD7
0382E:  MOVLW  01
03830:  MOVWF  xD8
03832:  MOVLB  0
03834:  CALL   25F6
03838:  MOVLB  B
0383A:  INCF   xBF,F
0383C:  MOVLB  0
0383E:  GOTO   3802
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03842:  MOVLB  B
03844:  CLRF   xC1
03846:  CLRF   xC0
03848:  MOVLB  0
0384A:  MOVLB  B
0384C:  MOVF   xC1,W
0384E:  SUBWF  xBE,W
03850:  BTFSC  FD8.0
03852:  BRA    385A
03854:  MOVLB  0
03856:  GOTO   38A6
0385A:  MOVLB  0
0385C:  BTFSS  FD8.2
0385E:  GOTO   3874
03862:  MOVLB  B
03864:  MOVF   xBD,W
03866:  SUBWF  xC0,W
03868:  BTFSS  FD8.0
0386A:  BRA    3872
0386C:  MOVLB  0
0386E:  GOTO   38A6
03872:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
03874:  MOVLB  B
03876:  MOVF   xBB,W
03878:  ADDWF  xC0,W
0387A:  MOVWF  FE9
0387C:  MOVF   xBC,W
0387E:  ADDWFC xC1,W
03880:  MOVWF  FEA
03882:  MOVFF  FEF,BC5
03886:  MOVFF  BC5,BD6
0388A:  MOVLW  08
0388C:  MOVWF  xD7
0388E:  MOVLW  01
03890:  MOVWF  xD8
03892:  MOVLB  0
03894:  CALL   25F6
03898:  MOVLB  B
0389A:  INCF   xC0,F
0389C:  BTFSC  FD8.2
0389E:  INCF   xC1,F
038A0:  MOVLB  0
038A2:  GOTO   384A
....................          break;
038A6:  GOTO   395C
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
038AA:  MOVLB  B
038AC:  CLRF   xC2
038AE:  MOVLB  0
038B0:  MOVLB  B
038B2:  MOVF   xBA,W
038B4:  SUBWF  xC2,W
038B6:  BTFSS  FD8.0
038B8:  BRA    38C0
038BA:  MOVLB  0
038BC:  GOTO   38F0
038C0:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
038C2:  MOVLB  B
038C4:  MOVF   xC2,W
038C6:  ADDWF  xB8,W
038C8:  MOVWF  FE9
038CA:  MOVLW  00
038CC:  ADDWFC xB9,W
038CE:  MOVWF  FEA
038D0:  MOVFF  FEF,BC5
038D4:  MOVFF  BC5,BD6
038D8:  MOVLW  08
038DA:  MOVWF  xD7
038DC:  MOVLW  01
038DE:  MOVWF  xD8
038E0:  MOVLB  0
038E2:  CALL   2672
038E6:  MOVLB  B
038E8:  INCF   xC2,F
038EA:  MOVLB  0
038EC:  GOTO   38B0
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
038F0:  MOVLB  B
038F2:  CLRF   xC4
038F4:  CLRF   xC3
038F6:  MOVLB  0
038F8:  MOVLB  B
038FA:  MOVF   xC4,W
038FC:  SUBWF  xBE,W
038FE:  BTFSC  FD8.0
03900:  BRA    3908
03902:  MOVLB  0
03904:  GOTO   3954
03908:  MOVLB  0
0390A:  BTFSS  FD8.2
0390C:  GOTO   3922
03910:  MOVLB  B
03912:  MOVF   xBD,W
03914:  SUBWF  xC3,W
03916:  BTFSS  FD8.0
03918:  BRA    3920
0391A:  MOVLB  0
0391C:  GOTO   3954
03920:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
03922:  MOVLB  B
03924:  MOVF   xBB,W
03926:  ADDWF  xC3,W
03928:  MOVWF  FE9
0392A:  MOVF   xBC,W
0392C:  ADDWFC xC4,W
0392E:  MOVWF  FEA
03930:  MOVFF  FEF,BC5
03934:  MOVFF  BC5,BD6
03938:  MOVLW  08
0393A:  MOVWF  xD7
0393C:  MOVLW  01
0393E:  MOVWF  xD8
03940:  MOVLB  0
03942:  CALL   2672
03946:  MOVLB  B
03948:  INCF   xC3,F
0394A:  BTFSC  FD8.2
0394C:  INCF   xC4,F
0394E:  MOVLB  0
03950:  GOTO   38F8
....................          break;
03954:  GOTO   395C
....................          
....................       default:
....................          break;
03958:  GOTO   395C
....................    }
....................    return;
0395C:  RETURN 0
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
06390:  MOVFF  34C,BBA
06394:  MOVLW  01
06396:  MOVLB  B
06398:  MOVWF  xBB
0639A:  MOVLW  0F
0639C:  MOVWF  xBD
0639E:  MOVLW  89
063A0:  MOVWF  xBC
063A2:  MOVLB  0
063A4:  CALL   25A2
063A8:  MOVFF  34C,BBA
063AC:  MOVLB  B
063AE:  CLRF   xBB
063B0:  MOVLW  0F
063B2:  MOVWF  xBD
063B4:  MOVLW  92
063B6:  MOVWF  xBC
063B8:  MOVLB  0
063BA:  CALL   25A2
063BE:  RETURN 0
.................... }
....................  
.................... int8 status_register(Flash flash_stream){
*
0395E:  MOVLW  05
03960:  MOVLB  B
03962:  MOVWF  xB8
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
03964:  MOVFF  BB6,BBA
03968:  CLRF   xBB
0396A:  MOVLW  0F
0396C:  MOVWF  xBD
0396E:  MOVLW  89
03970:  MOVWF  xBC
03972:  MOVLB  0
03974:  CALL   25A2
03978:  MOVFF  BB6,BBA
0397C:  MOVLB  B
0397E:  CLRF   xBB
03980:  MOVLW  0F
03982:  MOVWF  xBD
03984:  MOVLW  92
03986:  MOVWF  xBC
03988:  MOVLB  0
0398A:  CALL   25A2
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
0398E:  MOVFF  BB7,BBD
03992:  MOVFF  BB6,BBC
03996:  MOVFF  BB5,BBB
0399A:  MOVFF  BB4,BBA
0399E:  MOVLW  0B
039A0:  MOVLB  B
039A2:  MOVWF  xBF
039A4:  MOVLW  B8
039A6:  MOVWF  xBE
039A8:  CLRF   xC1
039AA:  MOVLW  01
039AC:  MOVWF  xC0
039AE:  MOVLW  0B
039B0:  MOVWF  xC3
039B2:  MOVLW  B9
039B4:  MOVWF  xC2
039B6:  CLRF   xC7
039B8:  CLRF   xC6
039BA:  CLRF   xC5
039BC:  MOVLW  01
039BE:  MOVWF  xC4
039C0:  MOVLB  0
039C2:  CALL   26EE
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
039C6:  MOVFF  BB6,BBA
039CA:  MOVLW  01
039CC:  MOVLB  B
039CE:  MOVWF  xBB
039D0:  MOVLW  0F
039D2:  MOVWF  xBD
039D4:  MOVLW  89
039D6:  MOVWF  xBC
039D8:  MOVLB  0
039DA:  CALL   25A2
039DE:  MOVFF  BB6,BBA
039E2:  MOVLB  B
039E4:  CLRF   xBB
039E6:  MOVLW  0F
039E8:  MOVWF  xBD
039EA:  MOVLW  92
039EC:  MOVWF  xBC
039EE:  MOVLB  0
039F0:  CALL   25A2
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
039F4:  MOVLB  B
039F6:  MOVF   xB9,W
039F8:  MOVWF  01
039FA:  MOVLB  0
039FC:  RETURN 0
.................... }
.................... 
.................... //
.................... //->success:True,fail:false 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 16);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == MANUFACTURER_ID_MICRON){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
....................  
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
03EE2:  MOVLB  B
03EE4:  MOVF   x9B,F
03EE6:  BTFSC  FD8.2
03EE8:  BRA    3EF0
03EEA:  MOVLB  0
03EEC:  GOTO   4046
03EF0:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
03EF2:  MOVLW  06
03EF4:  MOVLB  B
03EF6:  MOVWF  xA2
03EF8:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
03EFA:  MOVLW  D8
03EFC:  MOVLB  B
03EFE:  MOVWF  xA3
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03F00:  MOVFF  BA0,BAF
03F04:  MOVFF  BA1,BB0
03F08:  CLRF   xB1
03F0A:  CLRF   xB2
03F0C:  MOVF   xAF,W
03F0E:  MOVWF  00
03F10:  CLRF   01
03F12:  CLRF   02
03F14:  CLRF   03
03F16:  MOVFF  00,BA4
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03F1A:  MOVFF  B9F,BAF
03F1E:  MOVFF  BA0,BB0
03F22:  MOVFF  BA1,BB1
03F26:  CLRF   xB2
03F28:  MOVF   xAF,W
03F2A:  MOVWF  00
03F2C:  CLRF   01
03F2E:  CLRF   02
03F30:  CLRF   03
03F32:  MOVFF  00,BA5
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
03F36:  MOVF   x9E,W
03F38:  MOVWF  00
03F3A:  CLRF   01
03F3C:  CLRF   02
03F3E:  CLRF   03
03F40:  MOVFF  00,BA6
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03F44:  MOVFF  B9C,BBA
03F48:  CLRF   xBB
03F4A:  MOVLW  0F
03F4C:  MOVWF  xBD
03F4E:  MOVLW  89
03F50:  MOVWF  xBC
03F52:  MOVLB  0
03F54:  CALL   25A2
03F58:  MOVFF  B9C,BBA
03F5C:  MOVLB  B
03F5E:  CLRF   xBB
03F60:  MOVLW  0F
03F62:  MOVWF  xBD
03F64:  MOVLW  92
03F66:  MOVWF  xBC
03F68:  MOVLB  0
03F6A:  CALL   25A2
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03F6E:  MOVFF  B9D,BB7
03F72:  MOVFF  B9C,BB6
03F76:  MOVFF  B9B,BB5
03F7A:  MOVFF  B9A,BB4
03F7E:  MOVLW  0B
03F80:  MOVLB  B
03F82:  MOVWF  xB9
03F84:  MOVLW  A2
03F86:  MOVWF  xB8
03F88:  CLRF   xBB
03F8A:  MOVLW  01
03F8C:  MOVWF  xBA
03F8E:  MOVLB  0
03F90:  CALL   36F2
....................       output_high(flash_stream.cs_pin);
03F94:  MOVFF  B9C,BBA
03F98:  MOVLW  01
03F9A:  MOVLB  B
03F9C:  MOVWF  xBB
03F9E:  MOVLW  0F
03FA0:  MOVWF  xBD
03FA2:  MOVLW  89
03FA4:  MOVWF  xBC
03FA6:  MOVLB  0
03FA8:  CALL   25A2
03FAC:  MOVFF  B9C,BBA
03FB0:  MOVLB  B
03FB2:  CLRF   xBB
03FB4:  MOVLW  0F
03FB6:  MOVWF  xBD
03FB8:  MOVLW  92
03FBA:  MOVWF  xBC
03FBC:  MOVLB  0
03FBE:  CALL   25A2
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
03FC2:  MOVFF  B9C,BBA
03FC6:  MOVLB  B
03FC8:  CLRF   xBB
03FCA:  MOVLW  0F
03FCC:  MOVWF  xBD
03FCE:  MOVLW  89
03FD0:  MOVWF  xBC
03FD2:  MOVLB  0
03FD4:  CALL   25A2
03FD8:  MOVFF  B9C,BBA
03FDC:  MOVLB  B
03FDE:  CLRF   xBB
03FE0:  MOVLW  0F
03FE2:  MOVWF  xBD
03FE4:  MOVLW  92
03FE6:  MOVWF  xBC
03FE8:  MOVLB  0
03FEA:  CALL   25A2
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
03FEE:  MOVFF  B9D,BB7
03FF2:  MOVFF  B9C,BB6
03FF6:  MOVFF  B9B,BB5
03FFA:  MOVFF  B9A,BB4
03FFE:  MOVLW  0B
04000:  MOVLB  B
04002:  MOVWF  xB9
04004:  MOVLW  A3
04006:  MOVWF  xB8
04008:  CLRF   xBB
0400A:  MOVLW  04
0400C:  MOVWF  xBA
0400E:  MOVLB  0
04010:  CALL   36F2
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04014:  MOVFF  B9C,BBA
04018:  MOVLW  01
0401A:  MOVLB  B
0401C:  MOVWF  xBB
0401E:  MOVLW  0F
04020:  MOVWF  xBD
04022:  MOVLW  89
04024:  MOVWF  xBC
04026:  MOVLB  0
04028:  CALL   25A2
0402C:  MOVFF  B9C,BBA
04030:  MOVLB  B
04032:  CLRF   xBB
04034:  MOVLW  0F
04036:  MOVWF  xBD
04038:  MOVLW  92
0403A:  MOVWF  xBC
0403C:  MOVLB  0
0403E:  CALL   25A2
....................    }
04042:  GOTO   41C4
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
04046:  MOVLB  B
04048:  DECFSZ x9B,W
0404A:  BRA    4050
0404C:  BRA    4056
0404E:  MOVLB  0
04050:  MOVLB  0
04052:  GOTO   41C4
04056:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
04058:  MOVLW  06
0405A:  MOVLB  B
0405C:  MOVWF  xA7
0405E:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
04060:  MOVLW  DC
04062:  MOVLB  B
04064:  MOVWF  xA8
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
04066:  MOVFF  BA1,BAF
0406A:  CLRF   xB0
0406C:  CLRF   xB1
0406E:  CLRF   xB2
04070:  MOVF   xAF,W
04072:  MOVWF  00
04074:  CLRF   01
04076:  CLRF   02
04078:  CLRF   03
0407A:  MOVFF  00,BA9
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0407E:  MOVFF  BA0,BAF
04082:  MOVFF  BA1,BB0
04086:  CLRF   xB1
04088:  CLRF   xB2
0408A:  MOVF   xAF,W
0408C:  MOVWF  00
0408E:  CLRF   01
04090:  CLRF   02
04092:  CLRF   03
04094:  MOVFF  00,BAA
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
04098:  MOVFF  B9F,BAF
0409C:  MOVFF  BA0,BB0
040A0:  MOVFF  BA1,BB1
040A4:  CLRF   xB2
040A6:  MOVF   xAF,W
040A8:  MOVWF  00
040AA:  CLRF   01
040AC:  CLRF   02
040AE:  CLRF   03
040B0:  MOVFF  00,BAB
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
040B4:  MOVF   x9E,W
040B6:  MOVWF  00
040B8:  CLRF   01
040BA:  CLRF   02
040BC:  CLRF   03
040BE:  MOVFF  00,BAC
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
040C2:  MOVFF  B9C,BBA
040C6:  CLRF   xBB
040C8:  MOVLW  0F
040CA:  MOVWF  xBD
040CC:  MOVLW  89
040CE:  MOVWF  xBC
040D0:  MOVLB  0
040D2:  CALL   25A2
040D6:  MOVFF  B9C,BBA
040DA:  MOVLB  B
040DC:  CLRF   xBB
040DE:  MOVLW  0F
040E0:  MOVWF  xBD
040E2:  MOVLW  92
040E4:  MOVWF  xBC
040E6:  MOVLB  0
040E8:  CALL   25A2
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
040EC:  MOVFF  B9D,BB7
040F0:  MOVFF  B9C,BB6
040F4:  MOVFF  B9B,BB5
040F8:  MOVFF  B9A,BB4
040FC:  MOVLW  0B
040FE:  MOVLB  B
04100:  MOVWF  xB9
04102:  MOVLW  A7
04104:  MOVWF  xB8
04106:  CLRF   xBB
04108:  MOVLW  01
0410A:  MOVWF  xBA
0410C:  MOVLB  0
0410E:  CALL   36F2
....................       output_high(flash_stream.cs_pin);
04112:  MOVFF  B9C,BBA
04116:  MOVLW  01
04118:  MOVLB  B
0411A:  MOVWF  xBB
0411C:  MOVLW  0F
0411E:  MOVWF  xBD
04120:  MOVLW  89
04122:  MOVWF  xBC
04124:  MOVLB  0
04126:  CALL   25A2
0412A:  MOVFF  B9C,BBA
0412E:  MOVLB  B
04130:  CLRF   xBB
04132:  MOVLW  0F
04134:  MOVWF  xBD
04136:  MOVLW  92
04138:  MOVWF  xBC
0413A:  MOVLB  0
0413C:  CALL   25A2
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
04140:  MOVFF  B9C,BBA
04144:  MOVLB  B
04146:  CLRF   xBB
04148:  MOVLW  0F
0414A:  MOVWF  xBD
0414C:  MOVLW  89
0414E:  MOVWF  xBC
04150:  MOVLB  0
04152:  CALL   25A2
04156:  MOVFF  B9C,BBA
0415A:  MOVLB  B
0415C:  CLRF   xBB
0415E:  MOVLW  0F
04160:  MOVWF  xBD
04162:  MOVLW  92
04164:  MOVWF  xBC
04166:  MOVLB  0
04168:  CALL   25A2
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
0416C:  MOVFF  B9D,BB7
04170:  MOVFF  B9C,BB6
04174:  MOVFF  B9B,BB5
04178:  MOVFF  B9A,BB4
0417C:  MOVLW  0B
0417E:  MOVLB  B
04180:  MOVWF  xB9
04182:  MOVLW  A8
04184:  MOVWF  xB8
04186:  CLRF   xBB
04188:  MOVLW  05
0418A:  MOVWF  xBA
0418C:  MOVLB  0
0418E:  CALL   36F2
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04192:  MOVFF  B9C,BBA
04196:  MOVLW  01
04198:  MOVLB  B
0419A:  MOVWF  xBB
0419C:  MOVLW  0F
0419E:  MOVWF  xBD
041A0:  MOVLW  89
041A2:  MOVWF  xBC
041A4:  MOVLB  0
041A6:  CALL   25A2
041AA:  MOVFF  B9C,BBA
041AE:  MOVLB  B
041B0:  CLRF   xBB
041B2:  MOVLW  0F
041B4:  MOVWF  xBD
041B6:  MOVLW  92
041B8:  MOVWF  xBC
041BA:  MOVLB  0
041BC:  CALL   25A2
....................    }
041C0:  GOTO   41C4
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
041C4:  MOVLB  B
041C6:  CLRF   xAD
041C8:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
041CA:  MOVFF  B9D,BB7
041CE:  MOVFF  B9C,BB6
041D2:  MOVFF  B9B,BB5
041D6:  MOVFF  B9A,BB4
041DA:  CALL   395E
041DE:  MOVF   01,W
041E0:  ANDLW  01
041E2:  SUBLW  01
041E4:  BTFSS  FD8.2
041E6:  GOTO   4238
....................       if(timeout_counter > 10)
041EA:  MOVLB  B
041EC:  MOVF   xAD,W
041EE:  SUBLW  0A
041F0:  BTFSS  FD8.0
041F2:  BRA    41FA
041F4:  MOVLB  0
041F6:  GOTO   420C
041FA:  MOVLB  0
....................          delay_ms(200);
041FC:  MOVLW  C8
041FE:  MOVLB  B
04200:  MOVWF  xB4
04202:  MOVLB  0
04204:  CALL   1D92
04208:  GOTO   4218
....................       else
....................          delay_ms(10);   
0420C:  MOVLW  0A
0420E:  MOVLB  B
04210:  MOVWF  xB4
04212:  MOVLB  0
04214:  CALL   1D92
....................       
....................       if(timeout_counter > 100){
04218:  MOVLB  B
0421A:  MOVF   xAD,W
0421C:  SUBLW  64
0421E:  BTFSS  FD8.0
04220:  BRA    4228
04222:  MOVLB  0
04224:  GOTO   422E
04228:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
0422A:  GOTO   4238
....................       }  
....................       timeout_counter++;
0422E:  MOVLB  B
04230:  INCF   xAD,F
04232:  MOVLB  0
04234:  GOTO   41CA
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
04238:  RETURN 0
.................... }
....................  
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x __ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 __ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 __ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 __
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
0557C:  MOVLB  3
0557E:  MOVF   x24,F
05580:  BTFSC  FD8.2
05582:  BRA    558A
05584:  MOVLB  0
05586:  GOTO   56E2
0558A:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
0558C:  MOVLW  06
0558E:  MOVLB  3
05590:  MOVWF  x2B
05592:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
05594:  MOVLW  20
05596:  MOVLB  3
05598:  MOVWF  x2C
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0559A:  MOVFF  329,338
0559E:  MOVFF  32A,339
055A2:  CLRF   x3A
055A4:  CLRF   x3B
055A6:  MOVF   x38,W
055A8:  MOVWF  00
055AA:  CLRF   01
055AC:  CLRF   02
055AE:  CLRF   03
055B0:  MOVFF  00,32D
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
055B4:  MOVFF  328,338
055B8:  MOVFF  329,339
055BC:  MOVFF  32A,33A
055C0:  CLRF   x3B
055C2:  MOVF   x38,W
055C4:  MOVWF  00
055C6:  CLRF   01
055C8:  CLRF   02
055CA:  CLRF   03
055CC:  MOVFF  00,32E
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
055D0:  MOVF   x27,W
055D2:  MOVWF  00
055D4:  CLRF   01
055D6:  CLRF   02
055D8:  CLRF   03
055DA:  MOVFF  00,32F
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
055DE:  MOVFF  325,BBA
055E2:  MOVLB  B
055E4:  CLRF   xBB
055E6:  MOVLW  0F
055E8:  MOVWF  xBD
055EA:  MOVLW  89
055EC:  MOVWF  xBC
055EE:  MOVLB  0
055F0:  CALL   25A2
055F4:  MOVFF  325,BBA
055F8:  MOVLB  B
055FA:  CLRF   xBB
055FC:  MOVLW  0F
055FE:  MOVWF  xBD
05600:  MOVLW  92
05602:  MOVWF  xBC
05604:  MOVLB  0
05606:  CALL   25A2
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0560A:  MOVFF  326,BB7
0560E:  MOVFF  325,BB6
05612:  MOVFF  324,BB5
05616:  MOVFF  323,BB4
0561A:  MOVLW  03
0561C:  MOVLB  B
0561E:  MOVWF  xB9
05620:  MOVLW  2B
05622:  MOVWF  xB8
05624:  CLRF   xBB
05626:  MOVLW  01
05628:  MOVWF  xBA
0562A:  MOVLB  0
0562C:  CALL   36F2
....................       output_high(flash_stream.cs_pin);
05630:  MOVFF  325,BBA
05634:  MOVLW  01
05636:  MOVLB  B
05638:  MOVWF  xBB
0563A:  MOVLW  0F
0563C:  MOVWF  xBD
0563E:  MOVLW  89
05640:  MOVWF  xBC
05642:  MOVLB  0
05644:  CALL   25A2
05648:  MOVFF  325,BBA
0564C:  MOVLB  B
0564E:  CLRF   xBB
05650:  MOVLW  0F
05652:  MOVWF  xBD
05654:  MOVLW  92
05656:  MOVWF  xBC
05658:  MOVLB  0
0565A:  CALL   25A2
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
0565E:  MOVFF  325,BBA
05662:  MOVLB  B
05664:  CLRF   xBB
05666:  MOVLW  0F
05668:  MOVWF  xBD
0566A:  MOVLW  89
0566C:  MOVWF  xBC
0566E:  MOVLB  0
05670:  CALL   25A2
05674:  MOVFF  325,BBA
05678:  MOVLB  B
0567A:  CLRF   xBB
0567C:  MOVLW  0F
0567E:  MOVWF  xBD
05680:  MOVLW  92
05682:  MOVWF  xBC
05684:  MOVLB  0
05686:  CALL   25A2
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
0568A:  MOVFF  326,BB7
0568E:  MOVFF  325,BB6
05692:  MOVFF  324,BB5
05696:  MOVFF  323,BB4
0569A:  MOVLW  03
0569C:  MOVLB  B
0569E:  MOVWF  xB9
056A0:  MOVLW  2C
056A2:  MOVWF  xB8
056A4:  CLRF   xBB
056A6:  MOVLW  04
056A8:  MOVWF  xBA
056AA:  MOVLB  0
056AC:  CALL   36F2
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
056B0:  MOVFF  325,BBA
056B4:  MOVLW  01
056B6:  MOVLB  B
056B8:  MOVWF  xBB
056BA:  MOVLW  0F
056BC:  MOVWF  xBD
056BE:  MOVLW  89
056C0:  MOVWF  xBC
056C2:  MOVLB  0
056C4:  CALL   25A2
056C8:  MOVFF  325,BBA
056CC:  MOVLB  B
056CE:  CLRF   xBB
056D0:  MOVLW  0F
056D2:  MOVWF  xBD
056D4:  MOVLW  92
056D6:  MOVWF  xBC
056D8:  MOVLB  0
056DA:  CALL   25A2
....................    }
056DE:  GOTO   5862
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
056E2:  MOVLB  3
056E4:  DECFSZ x24,W
056E6:  BRA    56EC
056E8:  BRA    56F2
056EA:  MOVLB  0
056EC:  MOVLB  0
056EE:  GOTO   5862
056F2:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
056F4:  MOVLW  06
056F6:  MOVLB  3
056F8:  MOVWF  x30
056FA:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
056FC:  MOVLW  21
056FE:  MOVLB  3
05700:  MOVWF  x31
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
05702:  MOVFF  32A,338
05706:  CLRF   x39
05708:  CLRF   x3A
0570A:  CLRF   x3B
0570C:  MOVF   x38,W
0570E:  MOVWF  00
05710:  CLRF   01
05712:  CLRF   02
05714:  CLRF   03
05716:  MOVFF  00,332
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0571A:  MOVFF  329,338
0571E:  MOVFF  32A,339
05722:  CLRF   x3A
05724:  CLRF   x3B
05726:  MOVF   x38,W
05728:  MOVWF  00
0572A:  CLRF   01
0572C:  CLRF   02
0572E:  CLRF   03
05730:  MOVFF  00,333
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
05734:  MOVFF  328,338
05738:  MOVFF  329,339
0573C:  MOVFF  32A,33A
05740:  CLRF   x3B
05742:  MOVF   x38,W
05744:  MOVWF  00
05746:  CLRF   01
05748:  CLRF   02
0574A:  CLRF   03
0574C:  MOVFF  00,334
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
05750:  MOVF   x27,W
05752:  MOVWF  00
05754:  CLRF   01
05756:  CLRF   02
05758:  CLRF   03
0575A:  MOVFF  00,335
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
0575E:  MOVFF  325,BBA
05762:  MOVLB  B
05764:  CLRF   xBB
05766:  MOVLW  0F
05768:  MOVWF  xBD
0576A:  MOVLW  89
0576C:  MOVWF  xBC
0576E:  MOVLB  0
05770:  CALL   25A2
05774:  MOVFF  325,BBA
05778:  MOVLB  B
0577A:  CLRF   xBB
0577C:  MOVLW  0F
0577E:  MOVWF  xBD
05780:  MOVLW  92
05782:  MOVWF  xBC
05784:  MOVLB  0
05786:  CALL   25A2
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0578A:  MOVFF  326,BB7
0578E:  MOVFF  325,BB6
05792:  MOVFF  324,BB5
05796:  MOVFF  323,BB4
0579A:  MOVLW  03
0579C:  MOVLB  B
0579E:  MOVWF  xB9
057A0:  MOVLW  30
057A2:  MOVWF  xB8
057A4:  CLRF   xBB
057A6:  MOVLW  01
057A8:  MOVWF  xBA
057AA:  MOVLB  0
057AC:  CALL   36F2
....................       output_high(flash_stream.cs_pin);
057B0:  MOVFF  325,BBA
057B4:  MOVLW  01
057B6:  MOVLB  B
057B8:  MOVWF  xBB
057BA:  MOVLW  0F
057BC:  MOVWF  xBD
057BE:  MOVLW  89
057C0:  MOVWF  xBC
057C2:  MOVLB  0
057C4:  CALL   25A2
057C8:  MOVFF  325,BBA
057CC:  MOVLB  B
057CE:  CLRF   xBB
057D0:  MOVLW  0F
057D2:  MOVWF  xBD
057D4:  MOVLW  92
057D6:  MOVWF  xBC
057D8:  MOVLB  0
057DA:  CALL   25A2
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
057DE:  MOVFF  325,BBA
057E2:  MOVLB  B
057E4:  CLRF   xBB
057E6:  MOVLW  0F
057E8:  MOVWF  xBD
057EA:  MOVLW  89
057EC:  MOVWF  xBC
057EE:  MOVLB  0
057F0:  CALL   25A2
057F4:  MOVFF  325,BBA
057F8:  MOVLB  B
057FA:  CLRF   xBB
057FC:  MOVLW  0F
057FE:  MOVWF  xBD
05800:  MOVLW  92
05802:  MOVWF  xBC
05804:  MOVLB  0
05806:  CALL   25A2
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
0580A:  MOVFF  326,BB7
0580E:  MOVFF  325,BB6
05812:  MOVFF  324,BB5
05816:  MOVFF  323,BB4
0581A:  MOVLW  03
0581C:  MOVLB  B
0581E:  MOVWF  xB9
05820:  MOVLW  31
05822:  MOVWF  xB8
05824:  CLRF   xBB
05826:  MOVLW  05
05828:  MOVWF  xBA
0582A:  MOVLB  0
0582C:  CALL   36F2
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
05830:  MOVFF  325,BBA
05834:  MOVLW  01
05836:  MOVLB  B
05838:  MOVWF  xBB
0583A:  MOVLW  0F
0583C:  MOVWF  xBD
0583E:  MOVLW  89
05840:  MOVWF  xBC
05842:  MOVLB  0
05844:  CALL   25A2
05848:  MOVFF  325,BBA
0584C:  MOVLB  B
0584E:  CLRF   xBB
05850:  MOVLW  0F
05852:  MOVWF  xBD
05854:  MOVLW  92
05856:  MOVWF  xBC
05858:  MOVLB  0
0585A:  CALL   25A2
....................    }
0585E:  GOTO   5862
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
05862:  MOVLB  3
05864:  CLRF   x36
05866:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
05868:  MOVFF  326,BB7
0586C:  MOVFF  325,BB6
05870:  MOVFF  324,BB5
05874:  MOVFF  323,BB4
05878:  CALL   395E
0587C:  MOVF   01,W
0587E:  ANDLW  01
05880:  SUBLW  01
05882:  BTFSS  FD8.2
05884:  GOTO   58D6
....................       if(timeout_counter > 10)
05888:  MOVLB  3
0588A:  MOVF   x36,W
0588C:  SUBLW  0A
0588E:  BTFSS  FD8.0
05890:  BRA    5898
05892:  MOVLB  0
05894:  GOTO   58AA
05898:  MOVLB  0
....................          delay_ms(200);
0589A:  MOVLW  C8
0589C:  MOVLB  B
0589E:  MOVWF  xB4
058A0:  MOVLB  0
058A2:  CALL   1D92
058A6:  GOTO   58B6
....................       else
....................          delay_ms(10);   
058AA:  MOVLW  0A
058AC:  MOVLB  B
058AE:  MOVWF  xB4
058B0:  MOVLB  0
058B2:  CALL   1D92
....................       
....................       if(timeout_counter > 100){
058B6:  MOVLB  3
058B8:  MOVF   x36,W
058BA:  SUBLW  64
058BC:  BTFSS  FD8.0
058BE:  BRA    58C6
058C0:  MOVLB  0
058C2:  GOTO   58CC
058C6:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
058C8:  GOTO   58D6
....................       }  
....................       timeout_counter++;
058CC:  MOVLB  3
058CE:  INCF   x36,F
058D0:  MOVLB  0
058D2:  GOTO   5868
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
058D6:  RETURN 0
.................... }
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address){
....................    int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................    
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    return read_data;
.................... }
....................  
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
02A0E:  MOVLB  B
02A10:  MOVF   x59,F
02A12:  BTFSC  FD8.2
02A14:  BRA    2A1C
02A16:  MOVLB  0
02A18:  GOTO   2B0C
02A1C:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
02A1E:  MOVLW  03
02A20:  MOVLB  B
02A22:  MOVWF  x66
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02A24:  MOVFF  B5E,B70
02A28:  MOVFF  B5F,B71
02A2C:  CLRF   x72
02A2E:  CLRF   x73
02A30:  MOVF   x70,W
02A32:  MOVWF  00
02A34:  CLRF   01
02A36:  CLRF   02
02A38:  CLRF   03
02A3A:  MOVFF  00,B67
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02A3E:  MOVFF  B5D,B70
02A42:  MOVFF  B5E,B71
02A46:  MOVFF  B5F,B72
02A4A:  CLRF   x73
02A4C:  MOVF   x70,W
02A4E:  MOVWF  00
02A50:  CLRF   01
02A52:  CLRF   02
02A54:  CLRF   03
02A56:  MOVFF  00,B68
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02A5A:  MOVF   x5C,W
02A5C:  MOVWF  00
02A5E:  CLRF   01
02A60:  CLRF   02
02A62:  CLRF   03
02A64:  MOVFF  00,B69
....................             
....................       output_low(flash_stream.cs_pin);
02A68:  MOVFF  B5A,BBA
02A6C:  CLRF   xBB
02A6E:  MOVLW  0F
02A70:  MOVWF  xBD
02A72:  MOVLW  89
02A74:  MOVWF  xBC
02A76:  MOVLB  0
02A78:  CALL   25A2
02A7C:  MOVFF  B5A,BBA
02A80:  MOVLB  B
02A82:  CLRF   xBB
02A84:  MOVLW  0F
02A86:  MOVWF  xBD
02A88:  MOVLW  92
02A8A:  MOVWF  xBC
02A8C:  MOVLB  0
02A8E:  CALL   25A2
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
02A92:  MOVFF  B5B,BBD
02A96:  MOVFF  B5A,BBC
02A9A:  MOVFF  B59,BBB
02A9E:  MOVFF  B58,BBA
02AA2:  MOVLW  0B
02AA4:  MOVLB  B
02AA6:  MOVWF  xBF
02AA8:  MOVLW  66
02AAA:  MOVWF  xBE
02AAC:  CLRF   xC1
02AAE:  MOVLW  04
02AB0:  MOVWF  xC0
02AB2:  MOVFF  B61,BC3
02AB6:  MOVFF  B60,BC2
02ABA:  MOVFF  B65,BC7
02ABE:  MOVFF  B64,BC6
02AC2:  MOVFF  B63,BC5
02AC6:  MOVFF  B62,BC4
02ACA:  MOVLB  0
02ACC:  CALL   26EE
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
02AD0:  MOVLW  02
02AD2:  MOVWF  00
02AD4:  DECFSZ 00,F
02AD6:  BRA    2AD4
02AD8:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02ADA:  MOVFF  B5A,BBA
02ADE:  MOVLW  01
02AE0:  MOVLB  B
02AE2:  MOVWF  xBB
02AE4:  MOVLW  0F
02AE6:  MOVWF  xBD
02AE8:  MOVLW  89
02AEA:  MOVWF  xBC
02AEC:  MOVLB  0
02AEE:  CALL   25A2
02AF2:  MOVFF  B5A,BBA
02AF6:  MOVLB  B
02AF8:  CLRF   xBB
02AFA:  MOVLW  0F
02AFC:  MOVWF  xBD
02AFE:  MOVLW  92
02B00:  MOVWF  xBC
02B02:  MOVLB  0
02B04:  CALL   25A2
....................    }
02B08:  GOTO   2C20
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
02B0C:  MOVLB  B
02B0E:  DECFSZ x59,W
02B10:  BRA    2B16
02B12:  BRA    2B1C
02B14:  MOVLB  0
02B16:  MOVLB  0
02B18:  GOTO   2C20
02B1C:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
02B1E:  MOVLW  13
02B20:  MOVLB  B
02B22:  MOVWF  x6A
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
02B24:  MOVFF  B5F,B70
02B28:  CLRF   x71
02B2A:  CLRF   x72
02B2C:  CLRF   x73
02B2E:  MOVF   x70,W
02B30:  MOVWF  00
02B32:  CLRF   01
02B34:  CLRF   02
02B36:  CLRF   03
02B38:  MOVFF  00,B6B
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02B3C:  MOVFF  B5E,B70
02B40:  MOVFF  B5F,B71
02B44:  CLRF   x72
02B46:  CLRF   x73
02B48:  MOVF   x70,W
02B4A:  MOVWF  00
02B4C:  CLRF   01
02B4E:  CLRF   02
02B50:  CLRF   03
02B52:  MOVFF  00,B6C
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02B56:  MOVFF  B5D,B70
02B5A:  MOVFF  B5E,B71
02B5E:  MOVFF  B5F,B72
02B62:  CLRF   x73
02B64:  MOVF   x70,W
02B66:  MOVWF  00
02B68:  CLRF   01
02B6A:  CLRF   02
02B6C:  CLRF   03
02B6E:  MOVFF  00,B6D
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02B72:  MOVF   x5C,W
02B74:  MOVWF  00
02B76:  CLRF   01
02B78:  CLRF   02
02B7A:  CLRF   03
02B7C:  MOVFF  00,B6E
....................    
....................       output_low(flash_stream.cs_pin);
02B80:  MOVFF  B5A,BBA
02B84:  CLRF   xBB
02B86:  MOVLW  0F
02B88:  MOVWF  xBD
02B8A:  MOVLW  89
02B8C:  MOVWF  xBC
02B8E:  MOVLB  0
02B90:  CALL   25A2
02B94:  MOVFF  B5A,BBA
02B98:  MOVLB  B
02B9A:  CLRF   xBB
02B9C:  MOVLW  0F
02B9E:  MOVWF  xBD
02BA0:  MOVLW  92
02BA2:  MOVWF  xBC
02BA4:  MOVLB  0
02BA6:  CALL   25A2
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
02BAA:  MOVFF  B5B,BBD
02BAE:  MOVFF  B5A,BBC
02BB2:  MOVFF  B59,BBB
02BB6:  MOVFF  B58,BBA
02BBA:  MOVLW  0B
02BBC:  MOVLB  B
02BBE:  MOVWF  xBF
02BC0:  MOVLW  6A
02BC2:  MOVWF  xBE
02BC4:  CLRF   xC1
02BC6:  MOVLW  05
02BC8:  MOVWF  xC0
02BCA:  MOVFF  B61,BC3
02BCE:  MOVFF  B60,BC2
02BD2:  MOVFF  B65,BC7
02BD6:  MOVFF  B64,BC6
02BDA:  MOVFF  B63,BC5
02BDE:  MOVFF  B62,BC4
02BE2:  MOVLB  0
02BE4:  CALL   26EE
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
02BE8:  MOVLW  02
02BEA:  MOVWF  00
02BEC:  DECFSZ 00,F
02BEE:  BRA    2BEC
02BF0:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02BF2:  MOVFF  B5A,BBA
02BF6:  MOVLW  01
02BF8:  MOVLB  B
02BFA:  MOVWF  xBB
02BFC:  MOVLW  0F
02BFE:  MOVWF  xBD
02C00:  MOVLW  89
02C02:  MOVWF  xBC
02C04:  MOVLB  0
02C06:  CALL   25A2
02C0A:  MOVFF  B5A,BBA
02C0E:  MOVLB  B
02C10:  CLRF   xBB
02C12:  MOVLW  0F
02C14:  MOVWF  xBD
02C16:  MOVLW  92
02C18:  MOVWF  xBC
02C1A:  MOVLB  0
02C1C:  CALL   25A2
....................    }
....................    return;
02C20:  RETURN 0
.................... }
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
....................       flash_cmd[4] = write_data;
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
....................       flash_cmd[5] = write_data;
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
039FE:  MOVLB  B
03A00:  MOVF   x9D,F
03A02:  BTFSC  FD8.2
03A04:  BRA    3A0C
03A06:  MOVLB  0
03A08:  GOTO   3B7A
03A0C:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
03A0E:  MOVLW  06
03A10:  MOVLB  B
03A12:  MOVWF  xA8
03A14:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
03A16:  MOVLW  02
03A18:  MOVLB  B
03A1A:  MOVWF  xA9
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03A1C:  MOVFF  BA2,BB5
03A20:  MOVFF  BA3,BB6
03A24:  CLRF   xB7
03A26:  CLRF   xB8
03A28:  MOVF   xB5,W
03A2A:  MOVWF  00
03A2C:  CLRF   01
03A2E:  CLRF   02
03A30:  CLRF   03
03A32:  MOVFF  00,BAA
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03A36:  MOVFF  BA1,BB5
03A3A:  MOVFF  BA2,BB6
03A3E:  MOVFF  BA3,BB7
03A42:  CLRF   xB8
03A44:  MOVF   xB5,W
03A46:  MOVWF  00
03A48:  CLRF   01
03A4A:  CLRF   02
03A4C:  CLRF   03
03A4E:  MOVFF  00,BAB
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
03A52:  MOVF   xA0,W
03A54:  MOVWF  00
03A56:  CLRF   01
03A58:  CLRF   02
03A5A:  CLRF   03
03A5C:  MOVFF  00,BAC
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03A60:  MOVFF  B9E,BBA
03A64:  CLRF   xBB
03A66:  MOVLW  0F
03A68:  MOVWF  xBD
03A6A:  MOVLW  89
03A6C:  MOVWF  xBC
03A6E:  MOVLB  0
03A70:  CALL   25A2
03A74:  MOVFF  B9E,BBA
03A78:  MOVLB  B
03A7A:  CLRF   xBB
03A7C:  MOVLW  0F
03A7E:  MOVWF  xBD
03A80:  MOVLW  92
03A82:  MOVWF  xBC
03A84:  MOVLB  0
03A86:  CALL   25A2
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03A8A:  MOVFF  B9F,BB7
03A8E:  MOVFF  B9E,BB6
03A92:  MOVFF  B9D,BB5
03A96:  MOVFF  B9C,BB4
03A9A:  MOVLW  0B
03A9C:  MOVLB  B
03A9E:  MOVWF  xB9
03AA0:  MOVLW  A8
03AA2:  MOVWF  xB8
03AA4:  CLRF   xBB
03AA6:  MOVLW  01
03AA8:  MOVWF  xBA
03AAA:  MOVLB  0
03AAC:  CALL   36F2
....................       output_high(flash_stream.cs_pin);
03AB0:  MOVFF  B9E,BBA
03AB4:  MOVLW  01
03AB6:  MOVLB  B
03AB8:  MOVWF  xBB
03ABA:  MOVLW  0F
03ABC:  MOVWF  xBD
03ABE:  MOVLW  89
03AC0:  MOVWF  xBC
03AC2:  MOVLB  0
03AC4:  CALL   25A2
03AC8:  MOVFF  B9E,BBA
03ACC:  MOVLB  B
03ACE:  CLRF   xBB
03AD0:  MOVLW  0F
03AD2:  MOVWF  xBD
03AD4:  MOVLW  92
03AD6:  MOVWF  xBC
03AD8:  MOVLB  0
03ADA:  CALL   25A2
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
03ADE:  MOVFF  B9E,BBA
03AE2:  MOVLB  B
03AE4:  CLRF   xBB
03AE6:  MOVLW  0F
03AE8:  MOVWF  xBD
03AEA:  MOVLW  89
03AEC:  MOVWF  xBC
03AEE:  MOVLB  0
03AF0:  CALL   25A2
03AF4:  MOVFF  B9E,BBA
03AF8:  MOVLB  B
03AFA:  CLRF   xBB
03AFC:  MOVLW  0F
03AFE:  MOVWF  xBD
03B00:  MOVLW  92
03B02:  MOVWF  xBC
03B04:  MOVLB  0
03B06:  CALL   25A2
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
03B0A:  MOVFF  B9F,BB7
03B0E:  MOVFF  B9E,BB6
03B12:  MOVFF  B9D,BB5
03B16:  MOVFF  B9C,BB4
03B1A:  MOVLW  0B
03B1C:  MOVLB  B
03B1E:  MOVWF  xB9
03B20:  MOVLW  A9
03B22:  MOVWF  xB8
03B24:  MOVLW  04
03B26:  MOVWF  xBA
03B28:  MOVFF  BA5,BBC
03B2C:  MOVFF  BA4,BBB
03B30:  MOVFF  BA7,BBE
03B34:  MOVFF  BA6,BBD
03B38:  MOVLB  0
03B3A:  CALL   37E2
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
03B3E:  MOVLW  02
03B40:  MOVWF  00
03B42:  DECFSZ 00,F
03B44:  BRA    3B42
03B46:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03B48:  MOVFF  B9E,BBA
03B4C:  MOVLW  01
03B4E:  MOVLB  B
03B50:  MOVWF  xBB
03B52:  MOVLW  0F
03B54:  MOVWF  xBD
03B56:  MOVLW  89
03B58:  MOVWF  xBC
03B5A:  MOVLB  0
03B5C:  CALL   25A2
03B60:  MOVFF  B9E,BBA
03B64:  MOVLB  B
03B66:  CLRF   xBB
03B68:  MOVLW  0F
03B6A:  MOVWF  xBD
03B6C:  MOVLW  92
03B6E:  MOVWF  xBC
03B70:  MOVLB  0
03B72:  CALL   25A2
....................    }
03B76:  GOTO   3D0C
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
03B7A:  MOVLB  B
03B7C:  DECFSZ x9D,W
03B7E:  BRA    3B84
03B80:  BRA    3B8A
03B82:  MOVLB  0
03B84:  MOVLB  0
03B86:  GOTO   3D0C
03B8A:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
03B8C:  MOVLW  06
03B8E:  MOVLB  B
03B90:  MOVWF  xAD
03B92:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
03B94:  MOVLW  12
03B96:  MOVLB  B
03B98:  MOVWF  xAE
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
03B9A:  MOVFF  BA3,BB5
03B9E:  CLRF   xB6
03BA0:  CLRF   xB7
03BA2:  CLRF   xB8
03BA4:  MOVF   xB5,W
03BA6:  MOVWF  00
03BA8:  CLRF   01
03BAA:  CLRF   02
03BAC:  CLRF   03
03BAE:  MOVFF  00,BAF
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03BB2:  MOVFF  BA2,BB5
03BB6:  MOVFF  BA3,BB6
03BBA:  CLRF   xB7
03BBC:  CLRF   xB8
03BBE:  MOVF   xB5,W
03BC0:  MOVWF  00
03BC2:  CLRF   01
03BC4:  CLRF   02
03BC6:  CLRF   03
03BC8:  MOVFF  00,BB0
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03BCC:  MOVFF  BA1,BB5
03BD0:  MOVFF  BA2,BB6
03BD4:  MOVFF  BA3,BB7
03BD8:  CLRF   xB8
03BDA:  MOVF   xB5,W
03BDC:  MOVWF  00
03BDE:  CLRF   01
03BE0:  CLRF   02
03BE2:  CLRF   03
03BE4:  MOVFF  00,BB1
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
03BE8:  MOVF   xA0,W
03BEA:  MOVWF  00
03BEC:  CLRF   01
03BEE:  CLRF   02
03BF0:  CLRF   03
03BF2:  MOVFF  00,BB2
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03BF6:  MOVFF  B9E,BBA
03BFA:  CLRF   xBB
03BFC:  MOVLW  0F
03BFE:  MOVWF  xBD
03C00:  MOVLW  89
03C02:  MOVWF  xBC
03C04:  MOVLB  0
03C06:  CALL   25A2
03C0A:  MOVFF  B9E,BBA
03C0E:  MOVLB  B
03C10:  CLRF   xBB
03C12:  MOVLW  0F
03C14:  MOVWF  xBD
03C16:  MOVLW  92
03C18:  MOVWF  xBC
03C1A:  MOVLB  0
03C1C:  CALL   25A2
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03C20:  MOVFF  B9F,BB7
03C24:  MOVFF  B9E,BB6
03C28:  MOVFF  B9D,BB5
03C2C:  MOVFF  B9C,BB4
03C30:  MOVLW  0B
03C32:  MOVLB  B
03C34:  MOVWF  xB9
03C36:  MOVLW  AD
03C38:  MOVWF  xB8
03C3A:  CLRF   xBB
03C3C:  MOVLW  01
03C3E:  MOVWF  xBA
03C40:  MOVLB  0
03C42:  CALL   36F2
....................       output_high(flash_stream.cs_pin);
03C46:  MOVFF  B9E,BBA
03C4A:  MOVLW  01
03C4C:  MOVLB  B
03C4E:  MOVWF  xBB
03C50:  MOVLW  0F
03C52:  MOVWF  xBD
03C54:  MOVLW  89
03C56:  MOVWF  xBC
03C58:  MOVLB  0
03C5A:  CALL   25A2
03C5E:  MOVFF  B9E,BBA
03C62:  MOVLB  B
03C64:  CLRF   xBB
03C66:  MOVLW  0F
03C68:  MOVWF  xBD
03C6A:  MOVLW  92
03C6C:  MOVWF  xBC
03C6E:  MOVLB  0
03C70:  CALL   25A2
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
03C74:  MOVFF  B9E,BBA
03C78:  MOVLB  B
03C7A:  CLRF   xBB
03C7C:  MOVLW  0F
03C7E:  MOVWF  xBD
03C80:  MOVLW  89
03C82:  MOVWF  xBC
03C84:  MOVLB  0
03C86:  CALL   25A2
03C8A:  MOVFF  B9E,BBA
03C8E:  MOVLB  B
03C90:  CLRF   xBB
03C92:  MOVLW  0F
03C94:  MOVWF  xBD
03C96:  MOVLW  92
03C98:  MOVWF  xBC
03C9A:  MOVLB  0
03C9C:  CALL   25A2
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
03CA0:  MOVFF  B9F,BB7
03CA4:  MOVFF  B9E,BB6
03CA8:  MOVFF  B9D,BB5
03CAC:  MOVFF  B9C,BB4
03CB0:  MOVLW  0B
03CB2:  MOVLB  B
03CB4:  MOVWF  xB9
03CB6:  MOVLW  AE
03CB8:  MOVWF  xB8
03CBA:  MOVLW  05
03CBC:  MOVWF  xBA
03CBE:  MOVFF  BA5,BBC
03CC2:  MOVFF  BA4,BBB
03CC6:  MOVFF  BA7,BBE
03CCA:  MOVFF  BA6,BBD
03CCE:  MOVLB  0
03CD0:  CALL   37E2
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
03CD4:  MOVLW  02
03CD6:  MOVWF  00
03CD8:  DECFSZ 00,F
03CDA:  BRA    3CD8
03CDC:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03CDE:  MOVFF  B9E,BBA
03CE2:  MOVLW  01
03CE4:  MOVLB  B
03CE6:  MOVWF  xBB
03CE8:  MOVLW  0F
03CEA:  MOVWF  xBD
03CEC:  MOVLW  89
03CEE:  MOVWF  xBC
03CF0:  MOVLB  0
03CF2:  CALL   25A2
03CF6:  MOVFF  B9E,BBA
03CFA:  MOVLB  B
03CFC:  CLRF   xBB
03CFE:  MOVLW  0F
03D00:  MOVWF  xBD
03D02:  MOVLW  92
03D04:  MOVWF  xBC
03D06:  MOVLB  0
03D08:  CALL   25A2
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
03D0C:  MOVLB  B
03D0E:  CLRF   xB3
03D10:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
03D12:  MOVFF  B9F,BB7
03D16:  MOVFF  B9E,BB6
03D1A:  MOVFF  B9D,BB5
03D1E:  MOVFF  B9C,BB4
03D22:  CALL   395E
03D26:  MOVF   01,W
03D28:  ANDLW  01
03D2A:  SUBLW  01
03D2C:  BTFSS  FD8.2
03D2E:  GOTO   3D80
....................       if(timeout_counter > 10)
03D32:  MOVLB  B
03D34:  MOVF   xB3,W
03D36:  SUBLW  0A
03D38:  BTFSS  FD8.0
03D3A:  BRA    3D42
03D3C:  MOVLB  0
03D3E:  GOTO   3D54
03D42:  MOVLB  0
....................          delay_ms(200);
03D44:  MOVLW  C8
03D46:  MOVLB  B
03D48:  MOVWF  xB4
03D4A:  MOVLB  0
03D4C:  CALL   1D92
03D50:  GOTO   3D60
....................       else
....................          delay_ms(10);   
03D54:  MOVLW  0A
03D56:  MOVLB  B
03D58:  MOVWF  xB4
03D5A:  MOVLB  0
03D5C:  CALL   1D92
....................       
....................       if(timeout_counter > 100){
03D60:  MOVLB  B
03D62:  MOVF   xB3,W
03D64:  SUBLW  64
03D66:  BTFSS  FD8.0
03D68:  BRA    3D70
03D6A:  MOVLB  0
03D6C:  GOTO   3D76
03D70:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
03D72:  GOTO   3D80
....................       }  
....................       timeout_counter++;
03D76:  MOVLB  B
03D78:  INCF   xB3,F
03D7A:  MOVLB  0
03D7C:  GOTO   3D12
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
03D80:  RETURN 0
.................... }
.................... 
....................  
.................... int1 is_connect(Flash flash_stream){
*
02922:  MOVLW  9F
02924:  MOVLB  2
02926:  MOVWF  xF7
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
02928:  MOVFF  2E1,BBA
0292C:  MOVLB  B
0292E:  CLRF   xBB
02930:  MOVLW  0F
02932:  MOVWF  xBD
02934:  MOVLW  89
02936:  MOVWF  xBC
02938:  MOVLB  0
0293A:  CALL   25A2
0293E:  MOVFF  2E1,BBA
02942:  MOVLB  B
02944:  CLRF   xBB
02946:  MOVLW  0F
02948:  MOVWF  xBD
0294A:  MOVLW  92
0294C:  MOVWF  xBC
0294E:  MOVLB  0
02950:  CALL   25A2
....................    delay_us(10);  
02954:  MOVLW  0D
02956:  MOVWF  00
02958:  DECFSZ 00,F
0295A:  BRA    2958
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
0295C:  MOVFF  2E2,BBD
02960:  MOVFF  2E1,BBC
02964:  MOVFF  2E0,BBB
02968:  MOVFF  2DF,BBA
0296C:  MOVLW  02
0296E:  MOVLB  B
02970:  MOVWF  xBF
02972:  MOVLW  F7
02974:  MOVWF  xBE
02976:  CLRF   xC1
02978:  MOVLW  01
0297A:  MOVWF  xC0
0297C:  MOVLW  02
0297E:  MOVWF  xC3
02980:  MOVLW  E3
02982:  MOVWF  xC2
02984:  CLRF   xC7
02986:  CLRF   xC6
02988:  CLRF   xC5
0298A:  MOVLW  14
0298C:  MOVWF  xC4
0298E:  MOVLB  0
02990:  CALL   26EE
....................    output_high(flash_stream.cs_pin);
02994:  MOVFF  2E1,BBA
02998:  MOVLW  01
0299A:  MOVLB  B
0299C:  MOVWF  xBB
0299E:  MOVLW  0F
029A0:  MOVWF  xBD
029A2:  MOVLW  89
029A4:  MOVWF  xBC
029A6:  MOVLB  0
029A8:  CALL   25A2
029AC:  MOVFF  2E1,BBA
029B0:  MOVLB  B
029B2:  CLRF   xBB
029B4:  MOVLW  0F
029B6:  MOVWF  xBD
029B8:  MOVLW  92
029BA:  MOVWF  xBC
029BC:  MOVLB  0
029BE:  CALL   25A2
....................    //fprintf(PC,"Read ID:%02X", read_id_data.fields.manufacturer_id);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
029C2:  MOVLB  2
029C4:  MOVF   xE3,W
029C6:  SUBLW  20
029C8:  BTFSC  FD8.2
029CA:  BRA    29D2
029CC:  MOVLB  0
029CE:  GOTO   29E0
029D2:  MOVLB  0
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
029D4:  MOVLW  01
029D6:  MOVWF  01
029D8:  GOTO   29E8
....................    }
029DC:  GOTO   29E8
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
029E0:  MOVLW  00
029E2:  MOVWF  01
029E4:  GOTO   29E8
....................    }
029E8:  RETURN 0
.................... }
.................... 
.................... #include "../lib/tool/calc_tools.c"
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size)
.................... {
....................    if (payload_size <= 0) return 0;
*
02C22:  MOVLB  B
02C24:  MOVF   xE8,F
02C26:  BTFSC  FD8.2
02C28:  BRA    2C30
02C2A:  MOVLB  0
02C2C:  GOTO   2C3A
02C30:  MOVLB  0
02C32:  MOVLW  00
02C34:  MOVWF  01
02C36:  GOTO   2C8C
.................... 
....................    unsigned int8 crc = *frame++;
02C3A:  MOVLB  B
02C3C:  MOVF   xE7,W
02C3E:  MOVWF  03
02C40:  MOVF   xE6,W
02C42:  INCF   xE6,F
02C44:  BTFSC  FD8.2
02C46:  INCF   xE7,F
02C48:  MOVWF  FE9
02C4A:  MOVFF  03,FEA
02C4E:  MOVFF  FEF,BE9
02C52:  MOVLB  0
....................    while (--payload_size > 0)
02C54:  MOVLB  B
02C56:  DECF   xE8,F
02C58:  MOVF   xE8,F
02C5A:  BTFSS  FD8.2
02C5C:  BRA    2C64
02C5E:  MOVLB  0
02C60:  GOTO   2C84
02C64:  MOVLB  0
....................       crc ^= *frame++;
02C66:  MOVLB  B
02C68:  MOVF   xE7,W
02C6A:  MOVWF  03
02C6C:  MOVF   xE6,W
02C6E:  INCF   xE6,F
02C70:  BTFSC  FD8.2
02C72:  INCF   xE7,F
02C74:  MOVWF  FE9
02C76:  MOVFF  03,FEA
02C7A:  MOVF   FEF,W
02C7C:  XORWF  xE9,F
02C7E:  MOVLB  0
02C80:  GOTO   2C54
.................... 
....................    return crc;
02C84:  MOVLB  B
02C86:  MOVF   xE9,W
02C88:  MOVWF  01
02C8A:  MOVLB  0
02C8C:  RETURN 0
.................... }
.................... 
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size)
*
0E0D6:  MOVLW  01
0E0D8:  MOVLB  3
0E0DA:  SUBWF  x25,W
0E0DC:  ADDWF  x23,W
0E0DE:  MOVWF  FE9
0E0E0:  MOVLW  00
0E0E2:  ADDWFC x24,W
0E0E4:  MOVWF  FEA
0E0E6:  MOVFF  FEF,326
0E0EA:  MOVLW  01
0E0EC:  SUBWF  x25,W
0E0EE:  MOVWF  x28
0E0F0:  MOVFF  324,BE7
0E0F4:  MOVFF  323,BE6
0E0F8:  MOVFF  328,BE8
0E0FC:  MOVLB  0
0E0FE:  CALL   2C22
0E102:  MOVFF  01,327
.................... {
....................    unsigned int8 received_crc = frame[payload_size - 1]; // CRC is the last byte
....................    unsigned int8 calculated_crc = calc_crc8(frame, payload_size - 1);
....................    return (received_crc == calculated_crc);
0E106:  MOVLB  3
0E108:  MOVF   x27,W
0E10A:  SUBWF  x26,W
0E10C:  BTFSS  FD8.2
0E10E:  BRA    E116
0E110:  MOVLB  0
0E112:  GOTO   E11E
0E116:  MOVLB  0
0E118:  MOVLW  00
0E11A:  GOTO   E120
0E11E:  MOVLW  01
0E120:  MOVWF  01
0E122:  RETURN 0
.................... }
.................... 
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index)
.................... {
....................     buf[index + 0] = (int8)(value >> 24);   // MSB
....................     buf[index + 1] = (int8)(value >> 16);
....................     buf[index + 2] = (int8)(value >>  8);
....................     buf[index + 3] = (int8)(value      );   // LSB
.................... }
.................... 
.................... int32 lsb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] <<  0) |
....................            ((int32)buf[index + 1] <<  8) |
....................            ((int32)buf[index + 2] << 16) |
....................            ((int32)buf[index + 3] << 24);
.................... }
.................... 
.................... 
.................... int32 msb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] << 24) |
....................            ((int32)buf[index + 1] << 16) |
....................            ((int32)buf[index + 2] <<  8) |
....................            ((int32)buf[index + 3]);
.................... }
.................... 
.................... unsigned int32 int32_lsb_to_msb(unsigned int32 value)
.................... {
....................     return ((value & 0x000000FF) << 24) |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0xFF000000) >> 24);
.................... }
.................... 
.................... unsigned int32 int32_msb_to_lsb(unsigned int32 value)
.................... {
....................     return ((value & 0xFF000000) >> 24) |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x000000FF) << 24);
.................... }
.................... // End of file
.................... 
.................... #include "../lib/tool/smf_queue.c"
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x06AA1FFF
.................... #define CIGS_ENVIRO_START_ADDRESS 0x06AA2000
.................... #define CIGS_ENVIRO_END_ADDRESS 0x06B41FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS 0x06B42000
.................... #define CIGS_IV1_HEADER_END_ADDRESS 0x06BE1FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS 0x06BE2000
.................... #define CIGS_IV1_DATA_END_ADDRESS 0x06FE2FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS 0x06FE3000
.................... #define CIGS_IV2_HEADER_END_ADDRESS 0x07082FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS 0x07083000
.................... #define CIGS_IV2_DATA_END_ADDRESS 0x07483FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data)
.................... {   
....................    fprintf(PC, "Enqueue Flash Operation\r\n");
*
0944C:  MOVLW  5A
0944E:  MOVWF  FF6
09450:  MOVLW  03
09452:  MOVWF  FF7
09454:  MOVLW  00
09456:  MOVWF  FF8
09458:  CALL   1DC0
....................    int8 next_tail = (flash_queue.tail_index + 1) % SMF_QUEUE_SIZE;
0945C:  MOVLW  01
0945E:  MOVLB  1
09460:  ADDWF  x11,W
09462:  ANDLW  0F
09464:  MOVLB  2
09466:  MOVWF  x63
.................... 
....................    if(next_tail == flash_queue.head_index)
09468:  MOVLB  1
0946A:  MOVF   x10,W
0946C:  MOVLB  2
0946E:  SUBWF  x63,W
09470:  BTFSC  FD8.2
09472:  BRA    947A
09474:  MOVLB  0
09476:  GOTO   9490
0947A:  MOVLB  0
....................       printf("Flash queue is full!!!\r\n");
0947C:  MOVLW  74
0947E:  MOVWF  FF6
09480:  MOVLW  03
09482:  MOVWF  FF7
09484:  MOVLW  00
09486:  MOVWF  FF8
09488:  CALL   1DC0
0948C:  GOTO   96C2
....................       
....................    else
....................    {
....................       flash_queue.entries[flash_queue.tail_index].mission_id = data->mission_id;
09490:  MOVLB  1
09492:  MOVF   x11,W
09494:  MULLW  0C
09496:  MOVF   FF3,W
09498:  MOVLB  2
0949A:  CLRF   x65
0949C:  MOVWF  x64
0949E:  MOVLW  50
094A0:  ADDWF  x64,W
094A2:  MOVWF  01
094A4:  MOVLW  00
094A6:  ADDWFC x65,W
094A8:  MOVWF  03
094AA:  MOVF   01,W
094AC:  MOVWF  x66
094AE:  MOVFF  03,267
094B2:  MOVF   x61,W
094B4:  MOVWF  FE9
094B6:  MOVF   x62,W
094B8:  MOVWF  FEA
094BA:  MOVF   FEF,W
094BC:  MOVWF  x68
094BE:  MOVFF  267,FEA
094C2:  MOVFF  266,FE9
094C6:  MOVFF  268,FEF
....................       flash_queue.entries[flash_queue.tail_index].func_type  = data->func_type;
094CA:  MOVLB  1
094CC:  MOVF   x11,W
094CE:  MULLW  0C
094D0:  MOVF   FF3,W
094D2:  MOVLB  2
094D4:  CLRF   x65
094D6:  MOVWF  x64
094D8:  MOVLW  01
094DA:  ADDWF  x64,W
094DC:  MOVWF  01
094DE:  MOVLW  00
094E0:  ADDWFC x65,W
094E2:  MOVWF  03
094E4:  MOVF   01,W
094E6:  ADDLW  50
094E8:  MOVWF  01
094EA:  MOVLW  00
094EC:  ADDWFC 03,F
094EE:  MOVF   01,W
094F0:  MOVWF  x64
094F2:  MOVFF  03,265
094F6:  MOVLW  01
094F8:  ADDWF  x61,W
094FA:  MOVWF  FE9
094FC:  MOVLW  00
094FE:  ADDWFC x62,W
09500:  MOVWF  FEA
09502:  MOVF   FEF,W
09504:  MOVWF  x66
09506:  MOVFF  265,FEA
0950A:  MOVFF  264,FE9
0950E:  MOVFF  266,FEF
....................       flash_queue.entries[flash_queue.tail_index].write_mode = data->write_mode;
09512:  MOVLB  1
09514:  MOVF   x11,W
09516:  MULLW  0C
09518:  MOVF   FF3,W
0951A:  MOVLB  2
0951C:  CLRF   x65
0951E:  MOVWF  x64
09520:  MOVLW  02
09522:  ADDWF  x64,W
09524:  MOVWF  01
09526:  MOVLW  00
09528:  ADDWFC x65,W
0952A:  MOVWF  03
0952C:  MOVF   01,W
0952E:  ADDLW  50
09530:  MOVWF  01
09532:  MOVLW  00
09534:  ADDWFC 03,F
09536:  MOVF   01,W
09538:  MOVWF  x64
0953A:  MOVFF  03,265
0953E:  MOVLW  02
09540:  ADDWF  x61,W
09542:  MOVWF  FE9
09544:  MOVLW  00
09546:  ADDWFC x62,W
09548:  MOVWF  FEA
0954A:  MOVF   FEF,W
0954C:  MOVWF  x66
0954E:  MOVFF  265,FEA
09552:  MOVFF  264,FE9
09556:  MOVFF  266,FEF
....................       flash_queue.entries[flash_queue.tail_index].source_type = data->source_type;
0955A:  MOVLB  1
0955C:  MOVF   x11,W
0955E:  MULLW  0C
09560:  MOVF   FF3,W
09562:  MOVLB  2
09564:  CLRF   x65
09566:  MOVWF  x64
09568:  MOVLW  03
0956A:  ADDWF  x64,W
0956C:  MOVWF  01
0956E:  MOVLW  00
09570:  ADDWFC x65,W
09572:  MOVWF  03
09574:  MOVF   01,W
09576:  ADDLW  50
09578:  MOVWF  01
0957A:  MOVLW  00
0957C:  ADDWFC 03,F
0957E:  MOVF   01,W
09580:  MOVWF  x64
09582:  MOVFF  03,265
09586:  MOVLW  03
09588:  ADDWF  x61,W
0958A:  MOVWF  01
0958C:  MOVLW  00
0958E:  ADDWFC x62,W
09590:  MOVWF  03
09592:  MOVF   01,W
09594:  MOVWF  FE9
09596:  MOVFF  03,FEA
0959A:  MOVLW  00
0959C:  BTFSC  FEF.0
0959E:  MOVLW  01
095A0:  MOVWF  01
095A2:  BTFSS  01.0
095A4:  BRA    95AC
095A6:  MOVLB  0
095A8:  GOTO   95BC
095AC:  MOVLB  0
095AE:  MOVFF  265,FEA
095B2:  MOVFF  264,FE9
095B6:  BCF    FEF.0
095B8:  GOTO   95C6
095BC:  MOVFF  265,FEA
095C0:  MOVFF  264,FE9
095C4:  BSF    FEF.0
....................       flash_queue.entries[flash_queue.tail_index].misf_start_addr = data->misf_start_addr;
095C6:  MOVLB  1
095C8:  MOVF   x11,W
095CA:  MULLW  0C
095CC:  MOVF   FF3,W
095CE:  MOVLB  2
095D0:  CLRF   x65
095D2:  MOVWF  x64
095D4:  MOVLW  04
095D6:  ADDWF  x64,W
095D8:  MOVWF  01
095DA:  MOVLW  00
095DC:  ADDWFC x65,W
095DE:  MOVWF  03
095E0:  MOVF   01,W
095E2:  ADDLW  50
095E4:  MOVWF  01
095E6:  MOVLW  00
095E8:  ADDWFC 03,F
095EA:  MOVF   01,W
095EC:  MOVWF  x64
095EE:  MOVFF  03,265
095F2:  MOVLW  04
095F4:  ADDWF  x61,W
095F6:  MOVWF  FE9
095F8:  MOVLW  00
095FA:  ADDWFC x62,W
095FC:  MOVWF  FEA
095FE:  MOVFF  FEF,00
09602:  MOVFF  FEC,01
09606:  MOVFF  FEC,02
0960A:  MOVFF  FEC,03
0960E:  MOVF   FED,F
09610:  MOVF   FED,F
09612:  MOVF   FED,F
09614:  MOVFF  03,269
09618:  MOVFF  02,268
0961C:  MOVFF  01,267
09620:  MOVFF  00,266
09624:  MOVFF  265,FEA
09628:  MOVFF  264,FE9
0962C:  MOVFF  266,FEF
09630:  MOVFF  267,FEC
09634:  MOVFF  268,FEC
09638:  MOVFF  269,FEC
0963C:  MOVF   FED,F
0963E:  MOVF   FED,F
09640:  MOVF   FED,F
....................       flash_queue.entries[flash_queue.tail_index].misf_size = data->misf_size;
09642:  MOVLB  1
09644:  MOVF   x11,W
09646:  MULLW  0C
09648:  MOVF   FF3,W
0964A:  MOVLB  2
0964C:  CLRF   x65
0964E:  MOVWF  x64
09650:  MOVLW  08
09652:  ADDWF  x64,W
09654:  MOVWF  01
09656:  MOVLW  00
09658:  ADDWFC x65,W
0965A:  MOVWF  03
0965C:  MOVF   01,W
0965E:  ADDLW  50
09660:  MOVWF  01
09662:  MOVLW  00
09664:  ADDWFC 03,F
09666:  MOVF   01,W
09668:  MOVWF  x64
0966A:  MOVFF  03,265
0966E:  MOVLW  08
09670:  ADDWF  x61,W
09672:  MOVWF  FE9
09674:  MOVLW  00
09676:  ADDWFC x62,W
09678:  MOVWF  FEA
0967A:  MOVFF  FEF,00
0967E:  MOVFF  FEC,01
09682:  MOVFF  FEC,02
09686:  MOVFF  FEC,03
0968A:  MOVF   FED,F
0968C:  MOVF   FED,F
0968E:  MOVF   FED,F
09690:  MOVFF  03,269
09694:  MOVFF  02,268
09698:  MOVFF  01,267
0969C:  MOVFF  00,266
096A0:  MOVFF  265,FEA
096A4:  MOVFF  264,FE9
096A8:  MOVFF  266,FEF
096AC:  MOVFF  267,FEC
096B0:  MOVFF  268,FEC
096B4:  MOVFF  269,FEC
096B8:  MOVF   FED,F
096BA:  MOVF   FED,F
096BC:  MOVF   FED,F
....................       flash_queue.tail_index = next_tail;
096BE:  MOVFF  263,111
096C2:  MOVLB  0
....................    }
096C4:  GOTO   9B46 (RETURN)
.................... 
.................... 
.................... }
.................... 
.................... 
.................... FlashOperationStruct *dequeue_flash_operation()
.................... {
....................    if (flash_queue.head_index == flash_queue.tail_index)
*
0DDE8:  MOVLB  1
0DDEA:  MOVF   x11,W
0DDEC:  SUBWF  x10,W
0DDEE:  BTFSC  FD8.2
0DDF0:  BRA    DDF8
0DDF2:  MOVLB  0
0DDF4:  GOTO   DE1A
0DDF8:  MOVLB  0
....................    {
....................       printf("Flash queue is empty\r\n");
0DDFA:  MOVLW  8E
0DDFC:  MOVWF  FF6
0DDFE:  MOVLW  03
0DE00:  MOVWF  FF7
0DE02:  MOVLW  00
0DE04:  MOVWF  FF8
0DE06:  CALL   1DC0
....................       return 0x00;
0DE0A:  MOVLW  00
0DE0C:  MOVWF  01
0DE0E:  MOVLW  00
0DE10:  MOVWF  02
0DE12:  GOTO   DE48
....................    }
0DE16:  GOTO   DE48
....................    else
....................    {
....................       int8 current_head = flash_queue.head_index;
0DE1A:  MOVFF  110,23D
....................       flash_queue.head_index = (flash_queue.head_index + 1) % SMF_QUEUE_SIZE;
0DE1E:  MOVLW  01
0DE20:  MOVLB  1
0DE22:  ADDWF  x10,W
0DE24:  ANDLW  0F
0DE26:  MOVWF  x10
.................... 
.................... 
....................       return &flash_queue.entries[current_head];
0DE28:  MOVLB  2
0DE2A:  MOVF   x3D,W
0DE2C:  MULLW  0C
0DE2E:  MOVF   FF3,W
0DE30:  CLRF   03
0DE32:  ADDLW  50
0DE34:  MOVWF  01
0DE36:  MOVLW  00
0DE38:  ADDWFC 03,F
0DE3A:  MOVF   01,W
0DE3C:  MOVWF  01
0DE3E:  MOVF   03,W
0DE40:  MOVWF  02
0DE42:  MOVLB  0
0DE44:  GOTO   DE48
....................    }
0DE48:  GOTO   10084 (RETURN)
.................... }
.................... 
.................... int1 is_empty_flash_queue(void)
.................... {
....................    return flash_queue.head_index == flash_queue.tail_index;
*
0DCF2:  MOVLB  1
0DCF4:  MOVF   x11,W
0DCF6:  SUBWF  x10,W
0DCF8:  BTFSS  FD8.2
0DCFA:  BRA    DD02
0DCFC:  MOVLB  0
0DCFE:  GOTO   DD0A
0DD02:  MOVLB  0
0DD04:  MOVLW  00
0DD06:  GOTO   DD0C
0DD0A:  MOVLW  01
0DD0C:  MOVWF  01
0DD0E:  RETURN 0
.................... }
.................... 
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id)
.................... {
....................    SmfAddressStruct mis_struct = {0};
*
0EFE4:  MOVLB  2
0EFE6:  CLRF   xA7
0EFE8:  CLRF   xA8
0EFEA:  CLRF   xA9
0EFEC:  CLRF   xAA
0EFEE:  CLRF   xAB
0EFF0:  CLRF   xAC
0EFF2:  CLRF   xAD
0EFF4:  CLRF   xAE
.................... 
....................    if (mission_id == CIGS_DATA_TABLE)
0EFF6:  MOVF   xA6,F
0EFF8:  BTFSC  FD8.2
0EFFA:  BRA    F002
0EFFC:  MOVLB  0
0EFFE:  GOTO   F026
0F002:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_DATA_TABLE_START_ADDRESS;
0F004:  MOVLW  06
0F006:  MOVLB  2
0F008:  MOVWF  xAA
0F00A:  MOVLW  AA
0F00C:  MOVWF  xA9
0F00E:  CLRF   xA8
0F010:  CLRF   xA7
....................       mis_struct.end_address   = CIGS_DATA_TABLE_END_ADDRESS;
0F012:  MOVLW  06
0F014:  MOVWF  xAE
0F016:  MOVLW  AA
0F018:  MOVWF  xAD
0F01A:  MOVLW  0F
0F01C:  MOVWF  xAC
0F01E:  SETF   xAB
0F020:  MOVLB  0
....................    }
0F022:  GOTO   F166
....................    else if (mission_id == CIGS_PICLOG_DATA)
0F026:  MOVLB  2
0F028:  DECFSZ xA6,W
0F02A:  BRA    F030
0F02C:  BRA    F036
0F02E:  MOVLB  0
0F030:  MOVLB  0
0F032:  GOTO   F05C
0F036:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
0F038:  MOVLW  06
0F03A:  MOVLB  2
0F03C:  MOVWF  xAA
0F03E:  MOVLW  AA
0F040:  MOVWF  xA9
0F042:  MOVLW  10
0F044:  MOVWF  xA8
0F046:  CLRF   xA7
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
0F048:  MOVLW  06
0F04A:  MOVWF  xAE
0F04C:  MOVLW  AA
0F04E:  MOVWF  xAD
0F050:  MOVLW  1F
0F052:  MOVWF  xAC
0F054:  SETF   xAB
0F056:  MOVLB  0
....................    }
0F058:  GOTO   F166
....................    else if (mission_id == CIGS_ENVIRO_DATA)
0F05C:  MOVLB  2
0F05E:  MOVF   xA6,W
0F060:  SUBLW  02
0F062:  BTFSC  FD8.2
0F064:  BRA    F06C
0F066:  MOVLB  0
0F068:  GOTO   F092
0F06C:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
0F06E:  MOVLW  06
0F070:  MOVLB  2
0F072:  MOVWF  xAA
0F074:  MOVLW  AA
0F076:  MOVWF  xA9
0F078:  MOVLW  10
0F07A:  MOVWF  xA8
0F07C:  CLRF   xA7
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
0F07E:  MOVLW  06
0F080:  MOVWF  xAE
0F082:  MOVLW  AA
0F084:  MOVWF  xAD
0F086:  MOVLW  1F
0F088:  MOVWF  xAC
0F08A:  SETF   xAB
0F08C:  MOVLB  0
....................    }
0F08E:  GOTO   F166
....................    else if (mission_id == CIGS_IV1_HEADER)
0F092:  MOVLB  2
0F094:  MOVF   xA6,W
0F096:  SUBLW  03
0F098:  BTFSC  FD8.2
0F09A:  BRA    F0A2
0F09C:  MOVLB  0
0F09E:  GOTO   F0C8
0F0A2:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV1_HEADER_START_ADDRESS;
0F0A4:  MOVLW  06
0F0A6:  MOVLB  2
0F0A8:  MOVWF  xAA
0F0AA:  MOVLW  B4
0F0AC:  MOVWF  xA9
0F0AE:  MOVLW  20
0F0B0:  MOVWF  xA8
0F0B2:  CLRF   xA7
....................       mis_struct.end_address   = CIGS_IV1_HEADER_END_ADDRESS;
0F0B4:  MOVLW  06
0F0B6:  MOVWF  xAE
0F0B8:  MOVLW  BE
0F0BA:  MOVWF  xAD
0F0BC:  MOVLW  1F
0F0BE:  MOVWF  xAC
0F0C0:  SETF   xAB
0F0C2:  MOVLB  0
....................    }
0F0C4:  GOTO   F166
....................    else if (mission_id == CIGS_IV1_DATA)
0F0C8:  MOVLB  2
0F0CA:  MOVF   xA6,W
0F0CC:  SUBLW  04
0F0CE:  BTFSC  FD8.2
0F0D0:  BRA    F0D8
0F0D2:  MOVLB  0
0F0D4:  GOTO   F0FE
0F0D8:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV1_DATA_START_ADDRESS;
0F0DA:  MOVLW  06
0F0DC:  MOVLB  2
0F0DE:  MOVWF  xAA
0F0E0:  MOVLW  BE
0F0E2:  MOVWF  xA9
0F0E4:  MOVLW  20
0F0E6:  MOVWF  xA8
0F0E8:  CLRF   xA7
....................       mis_struct.end_address   = CIGS_IV1_DATA_END_ADDRESS;
0F0EA:  MOVLW  06
0F0EC:  MOVWF  xAE
0F0EE:  MOVLW  FE
0F0F0:  MOVWF  xAD
0F0F2:  MOVLW  2F
0F0F4:  MOVWF  xAC
0F0F6:  SETF   xAB
0F0F8:  MOVLB  0
....................    }
0F0FA:  GOTO   F166
....................       else if (mission_id == CIGS_IV2_HEADER)
0F0FE:  MOVLB  2
0F100:  MOVF   xA6,W
0F102:  SUBLW  05
0F104:  BTFSC  FD8.2
0F106:  BRA    F10E
0F108:  MOVLB  0
0F10A:  GOTO   F134
0F10E:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV2_HEADER_START_ADDRESS;
0F110:  MOVLW  06
0F112:  MOVLB  2
0F114:  MOVWF  xAA
0F116:  MOVLW  FE
0F118:  MOVWF  xA9
0F11A:  MOVLW  30
0F11C:  MOVWF  xA8
0F11E:  CLRF   xA7
....................       mis_struct.end_address   = CIGS_IV2_HEADER_END_ADDRESS;
0F120:  MOVLW  07
0F122:  MOVWF  xAE
0F124:  MOVLW  08
0F126:  MOVWF  xAD
0F128:  MOVLW  2F
0F12A:  MOVWF  xAC
0F12C:  SETF   xAB
0F12E:  MOVLB  0
....................    }
0F130:  GOTO   F166
....................    else if (mission_id == CIGS_IV2_DATA)
0F134:  MOVLB  2
0F136:  MOVF   xA6,W
0F138:  SUBLW  06
0F13A:  BTFSC  FD8.2
0F13C:  BRA    F144
0F13E:  MOVLB  0
0F140:  GOTO   F166
0F144:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV2_DATA_START_ADDRESS;
0F146:  MOVLW  07
0F148:  MOVLB  2
0F14A:  MOVWF  xAA
0F14C:  MOVLW  08
0F14E:  MOVWF  xA9
0F150:  MOVLW  30
0F152:  MOVWF  xA8
0F154:  CLRF   xA7
....................       mis_struct.end_address   = CIGS_IV2_DATA_END_ADDRESS;
0F156:  MOVLW  07
0F158:  MOVWF  xAE
0F15A:  MOVLW  48
0F15C:  MOVWF  xAD
0F15E:  MOVLW  3F
0F160:  MOVWF  xAC
0F162:  SETF   xAB
0F164:  MOVLB  0
....................    }
....................    return mis_struct;
0F166:  MOVLW  A7
0F168:  MOVWF  01
0F16A:  MOVLW  02
0F16C:  MOVWF  02
0F16E:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "../lib/communication/communication.c"
.................... // #include "communication.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #include "mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
04F52:  MOVLB  2
04F54:  CLRF   x3F
04F56:  CLRF   x40
04F58:  CLRF   x41
04F5A:  CLRF   x42
04F5C:  CLRF   x43
04F5E:  CLRF   x44
04F60:  CLRF   x45
04F62:  CLRF   x46
04F64:  CLRF   x47
04F66:  CLRF   x48
04F68:  CLRF   x49
04F6A:  CLRF   x4A
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
04F6C:  MOVLW  A6
04F6E:  MOVWF  FF6
04F70:  MOVLW  03
04F72:  MOVWF  FF7
04F74:  MOVLW  00
04F76:  MOVWF  FF8
04F78:  MOVLB  0
04F7A:  CALL   1DC0
....................    fprintf(PC, "\t[BOSS] >>> ");
04F7E:  MOVLW  C6
04F80:  MOVWF  FF6
04F82:  MOVLW  03
04F84:  MOVWF  FF7
04F86:  MOVLW  00
04F88:  MOVWF  FF8
04F8A:  CALL   1DC0
....................    for (int8 i = 0; i < receive_signal_size; i++)
04F8E:  MOVLB  2
04F90:  CLRF   x4B
04F92:  MOVLB  0
04F94:  MOVLB  2
04F96:  MOVF   x3E,W
04F98:  SUBWF  x4B,W
04F9A:  BTFSS  FD8.0
04F9C:  BRA    4FA4
04F9E:  MOVLB  0
04FA0:  GOTO   4FE0
04FA4:  MOVLB  0
....................       fprintf(PC, "%X ", receive_signal[i]);
04FA6:  MOVLB  2
04FA8:  MOVF   x4B,W
04FAA:  ADDWF  x3C,W
04FAC:  MOVWF  FE9
04FAE:  MOVLW  00
04FB0:  ADDWFC x3D,W
04FB2:  MOVWF  FEA
04FB4:  MOVFF  FEF,252
04FB8:  MOVFF  252,AC8
04FBC:  MOVLW  37
04FBE:  MOVLB  A
04FC0:  MOVWF  xC9
04FC2:  MOVLB  0
04FC4:  CALL   200A
04FC8:  MOVLW  20
04FCA:  BTFSS  FA6.6
04FCC:  GOTO   4FCA
04FD0:  MOVLB  E
04FD2:  MOVWF  xF9
04FD4:  MOVLB  0
04FD6:  MOVLB  2
04FD8:  INCF   x4B,F
04FDA:  MOVLB  0
04FDC:  GOTO   4F94
....................    fprintf(PC, "\r\n");
04FE0:  MOVLW  0D
04FE2:  BTFSS  FA6.6
04FE4:  GOTO   4FE2
04FE8:  MOVLB  E
04FEA:  MOVWF  xF9
04FEC:  MOVLW  0A
04FEE:  MOVLB  0
04FF0:  BTFSS  FA6.6
04FF2:  GOTO   4FF0
04FF6:  MOVLB  E
04FF8:  MOVWF  xF9
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
04FFA:  MOVFF  23D,253
04FFE:  MOVFF  23C,252
05002:  MOVFF  23E,254
05006:  MOVLB  0
05008:  GOTO   4C3A
0500C:  MOVFF  01,24C
....................    if (frame_start_position == -1)
05010:  MOVLB  2
05012:  MOVF   x4C,W
05014:  SUBLW  FF
05016:  BTFSC  FD8.2
05018:  BRA    5020
0501A:  MOVLB  0
0501C:  GOTO   502E
05020:  MOVLB  0
....................       return command;
05022:  MOVLW  3F
05024:  MOVWF  01
05026:  MOVLW  02
05028:  MOVWF  02
0502A:  GOTO   5150
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
0502E:  MOVLB  2
05030:  MOVF   x4C,W
05032:  ADDWF  x3C,W
05034:  MOVWF  01
05036:  MOVLW  00
05038:  ADDWFC x3D,W
0503A:  MOVWF  03
0503C:  MOVF   01,W
0503E:  MOVWF  x4D
05040:  MOVFF  03,24E
05044:  MOVF   x4D,W
05046:  MOVWF  FE9
05048:  MOVF   x4E,W
0504A:  MOVWF  FEA
0504C:  MOVF   FEF,W
0504E:  ANDLW  0F
05050:  MOVWF  x4F
05052:  MOVFF  24F,252
05056:  MOVLB  0
05058:  GOTO   4CE2
0505C:  MOVFF  01,250
....................    if (content_size == -1)
05060:  MOVLB  2
05062:  MOVF   x50,W
05064:  SUBLW  FF
05066:  BTFSC  FD8.2
05068:  BRA    5070
0506A:  MOVLB  0
0506C:  GOTO   507E
05070:  MOVLB  0
....................       return command;
05072:  MOVLW  3F
05074:  MOVWF  01
05076:  MOVLW  02
05078:  MOVWF  02
0507A:  GOTO   5150
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
0507E:  MOVLB  2
05080:  MOVF   x4C,W
05082:  SUBWF  x3E,W
05084:  MOVWF  x51
....................    
....................    if (!check_crc(frame, receive_frame_size))
05086:  MOVFF  24E,253
0508A:  MOVFF  24D,252
0508E:  MOVFF  251,254
05092:  MOVLB  0
05094:  GOTO   4DA2
05098:  MOVF   01,F
0509A:  BTFSS  FD8.2
0509C:  GOTO   50AC
....................       return command;
050A0:  MOVLW  3F
050A2:  MOVWF  01
050A4:  MOVLW  02
050A6:  MOVWF  02
050A8:  GOTO   5150
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
050AC:  MOVLB  2
050AE:  MOVF   x4D,W
050B0:  MOVWF  FE9
050B2:  MOVF   x4E,W
050B4:  MOVWF  FEA
050B6:  MOVF   FEF,W
050B8:  ANDLW  F0
050BA:  MOVWF  00
050BC:  SWAPF  00,W
050BE:  MOVWF  x52
050C0:  MOVLW  0F
050C2:  ANDWF  x52,F
050C4:  MOVFF  252,253
050C8:  MOVLB  0
050CA:  GOTO   4E92
050CE:  MOVF   01,F
050D0:  BTFSS  FD8.2
050D2:  GOTO   50E2
....................       return command;
050D6:  MOVLW  3F
050D8:  MOVWF  01
050DA:  MOVLW  02
050DC:  MOVWF  02
050DE:  GOTO   5150
.................... 
....................    command.frame_id = frame_id;
050E2:  MOVFF  24F,23F
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
050E6:  MOVLW  01
050E8:  MOVLB  2
050EA:  ADDWF  x4D,W
050EC:  MOVWF  01
050EE:  MOVLW  00
050F0:  ADDWFC x4E,W
050F2:  MOVWF  03
050F4:  MOVF   01,W
050F6:  MOVWF  x52
050F8:  MOVFF  03,253
050FC:  MOVLW  02
050FE:  SUBWF  x51,W
05100:  MOVWF  x54
05102:  MOVLW  02
05104:  MOVWF  FEA
05106:  MOVLW  42
05108:  MOVWF  FE9
0510A:  MOVFF  253,FE2
0510E:  MOVFF  252,FE1
05112:  MOVF   x54,W
05114:  MOVWF  01
05116:  BTFSS  FD8.2
05118:  BRA    5120
0511A:  MOVLB  0
0511C:  GOTO   512C
05120:  MOVLB  0
05122:  MOVFF  FE6,FEE
05126:  DECFSZ 01,F
05128:  GOTO   5122
....................    command.size = receive_frame_size-2;
0512C:  MOVLW  02
0512E:  MOVLB  2
05130:  SUBWF  x51,W
05132:  MOVWF  x40
....................    command.is_exist = TRUE;
05134:  BSF    x41.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
05136:  MOVLW  D4
05138:  MOVWF  FF6
0513A:  MOVLW  03
0513C:  MOVWF  FF7
0513E:  MOVLW  00
05140:  MOVWF  FF8
05142:  MOVLB  0
05144:  CALL   1DC0
....................    return command;
05148:  MOVLW  3F
0514A:  MOVWF  01
0514C:  MOVLW  02
0514E:  MOVWF  02
05150:  GOTO   10888 (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
04C3A:  MOVLB  2
04C3C:  CLRF   x55
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
04C3E:  CLRF   x55
04C40:  MOVLB  0
04C42:  MOVLW  01
04C44:  MOVLB  2
04C46:  SUBWF  x54,W
04C48:  SUBWF  x55,W
04C4A:  BTFSS  FD8.0
04C4C:  BRA    4C54
04C4E:  MOVLB  0
04C50:  GOTO   4C8C
04C54:  MOVLB  0
....................       if(receive_signal[i] == SFD)
04C56:  MOVLB  2
04C58:  MOVF   x55,W
04C5A:  ADDWF  x52,W
04C5C:  MOVWF  FE9
04C5E:  MOVLW  00
04C60:  ADDWFC x53,W
04C62:  MOVWF  FEA
04C64:  MOVF   FEF,W
04C66:  SUBLW  AA
04C68:  BTFSC  FD8.2
04C6A:  BRA    4C72
04C6C:  MOVLB  0
04C6E:  GOTO   4C82
04C72:  MOVLB  0
....................          return i+1;
04C74:  MOVLW  01
04C76:  MOVLB  2
04C78:  ADDWF  x55,W
04C7A:  MOVWF  01
04C7C:  MOVLB  0
04C7E:  GOTO   4CDE
04C82:  MOVLB  2
04C84:  INCF   x55,F
04C86:  MOVLB  0
04C88:  GOTO   4C42
....................    if (receive_signal[i] == SFD)
04C8C:  MOVLB  2
04C8E:  MOVF   x55,W
04C90:  ADDWF  x52,W
04C92:  MOVWF  FE9
04C94:  MOVLW  00
04C96:  ADDWFC x53,W
04C98:  MOVWF  FEA
04C9A:  MOVF   FEF,W
04C9C:  SUBLW  AA
04C9E:  BTFSC  FD8.2
04CA0:  BRA    4CA8
04CA2:  MOVLB  0
04CA4:  GOTO   4CC6
04CA8:  MOVLB  0
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
04CAA:  MOVLW  F0
04CAC:  MOVWF  FF6
04CAE:  MOVLW  03
04CB0:  MOVWF  FF7
04CB2:  MOVLW  00
04CB4:  MOVWF  FF8
04CB6:  CALL   1DC0
....................       return -1;
04CBA:  MOVLW  FF
04CBC:  MOVWF  01
04CBE:  GOTO   4CDE
....................    }
04CC2:  GOTO   4CDE
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
04CC6:  MOVLW  06
04CC8:  MOVWF  FF6
04CCA:  MOVLW  04
04CCC:  MOVWF  FF7
04CCE:  MOVLW  00
04CD0:  MOVWF  FF8
04CD2:  CALL   1DC0
....................       return -1;
04CD6:  MOVLW  FF
04CD8:  MOVWF  01
04CDA:  GOTO   4CDE
....................    }
04CDE:  GOTO   500C (RETURN)
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
04CE2:  MOVLB  2
04CE4:  CLRF   x53
04CE6:  MOVLB  0
04CE8:  MOVLB  2
04CEA:  MOVF   x53,W
04CEC:  SUBLW  02
04CEE:  BTFSC  FD8.0
04CF0:  BRA    4CF8
04CF2:  MOVLB  0
04CF4:  GOTO   4D56
04CF8:  MOVLB  0
....................       if (frame_id == frame_ids[i].id)
04CFA:  BCF    FD8.0
04CFC:  MOVLB  2
04CFE:  RLCF   x53,W
04D00:  CLRF   x55
04D02:  MOVWF  x54
04D04:  MOVLW  1A
04D06:  ADDWF  x54,W
04D08:  MOVWF  FE9
04D0A:  MOVLW  01
04D0C:  ADDWFC x55,W
04D0E:  MOVWF  FEA
04D10:  MOVF   FEF,W
04D12:  SUBWF  x52,W
04D14:  BTFSC  FD8.2
04D16:  BRA    4D1E
04D18:  MOVLB  0
04D1A:  GOTO   4D4C
04D1E:  MOVLB  0
....................          return frame_ids[i].length;
04D20:  BCF    FD8.0
04D22:  MOVLB  2
04D24:  RLCF   x53,W
04D26:  CLRF   x55
04D28:  MOVWF  x54
04D2A:  MOVLW  01
04D2C:  ADDWF  x54,W
04D2E:  MOVWF  01
04D30:  MOVLW  00
04D32:  ADDWFC x55,W
04D34:  MOVWF  03
04D36:  MOVF   01,W
04D38:  ADDLW  1A
04D3A:  MOVWF  FE9
04D3C:  MOVLW  01
04D3E:  ADDWFC 03,W
04D40:  MOVWF  FEA
04D42:  MOVF   FEF,W
04D44:  MOVWF  01
04D46:  MOVLB  0
04D48:  GOTO   4D9C
04D4C:  MOVLB  2
04D4E:  INCF   x53,F
04D50:  MOVLB  0
04D52:  GOTO   4CE8
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
04D56:  MOVLW  18
04D58:  MOVWF  FF6
04D5A:  MOVLW  04
04D5C:  MOVWF  FF7
04D5E:  MOVLW  00
04D60:  MOVWF  FF8
04D62:  MOVLW  1F
04D64:  MOVLB  A
04D66:  MOVWF  x67
04D68:  MOVLB  0
04D6A:  CALL   1DF6
04D6E:  MOVFF  252,AC8
04D72:  MOVLW  37
04D74:  MOVLB  A
04D76:  MOVWF  xC9
04D78:  MOVLB  0
04D7A:  CALL   200A
04D7E:  MOVLW  0D
04D80:  BTFSS  FA6.6
04D82:  GOTO   4D80
04D86:  MOVLB  E
04D88:  MOVWF  xF9
04D8A:  MOVLW  0A
04D8C:  MOVLB  0
04D8E:  BTFSS  FA6.6
04D90:  GOTO   4D8E
04D94:  MOVLB  E
04D96:  MOVWF  xF9
....................    return -1;
04D98:  MOVLW  FF
04D9A:  MOVWF  01
04D9C:  MOVLB  0
04D9E:  GOTO   505C (RETURN)
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
04DA2:  MOVLW  01
04DA4:  MOVLB  2
04DA6:  SUBWF  x54,W
04DA8:  ADDWF  x52,W
04DAA:  MOVWF  FE9
04DAC:  MOVLW  00
04DAE:  ADDWFC x53,W
04DB0:  MOVWF  FEA
04DB2:  MOVFF  FEF,255
04DB6:  MOVLW  01
04DB8:  SUBWF  x54,W
04DBA:  MOVWF  x57
04DBC:  MOVFF  253,BE7
04DC0:  MOVFF  252,BE6
04DC4:  MOVFF  257,BE8
04DC8:  MOVLB  0
04DCA:  CALL   2C22
04DCE:  MOVFF  01,256
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
04DD2:  MOVLB  2
04DD4:  MOVF   x56,W
04DD6:  SUBWF  x55,W
04DD8:  BTFSC  FD8.2
04DDA:  BRA    4DE2
04DDC:  MOVLB  0
04DDE:  GOTO   4DF0
04DE2:  MOVLB  0
....................       return TRUE;
04DE4:  MOVLW  01
04DE6:  MOVWF  01
04DE8:  GOTO   4E8E
04DEC:  GOTO   4E8E
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
04DF0:  MOVLW  3C
04DF2:  MOVWF  FF6
04DF4:  MOVLW  04
04DF6:  MOVWF  FF7
04DF8:  MOVLW  00
04DFA:  MOVWF  FF8
04DFC:  CALL   1DC0
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
04E00:  MOVLW  4E
04E02:  MOVWF  FF6
04E04:  MOVLW  04
04E06:  MOVWF  FF7
04E08:  MOVLW  00
04E0A:  MOVWF  FF8
04E0C:  MOVLW  13
04E0E:  MOVLB  A
04E10:  MOVWF  x67
04E12:  MOVLB  0
04E14:  CALL   1DF6
04E18:  MOVFF  255,AC8
04E1C:  MOVLW  37
04E1E:  MOVLB  A
04E20:  MOVWF  xC9
04E22:  MOVLB  0
04E24:  CALL   200A
04E28:  MOVLW  0D
04E2A:  BTFSS  FA6.6
04E2C:  GOTO   4E2A
04E30:  MOVLB  E
04E32:  MOVWF  xF9
04E34:  MOVLW  0A
04E36:  MOVLB  0
04E38:  BTFSS  FA6.6
04E3A:  GOTO   4E38
04E3E:  MOVLB  E
04E40:  MOVWF  xF9
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
04E42:  MOVLW  66
04E44:  MOVWF  FF6
04E46:  MOVLW  04
04E48:  MOVWF  FF7
04E4A:  MOVLW  00
04E4C:  MOVWF  FF8
04E4E:  MOVLW  13
04E50:  MOVLB  A
04E52:  MOVWF  x67
04E54:  MOVLB  0
04E56:  CALL   1DF6
04E5A:  MOVFF  256,AC8
04E5E:  MOVLW  37
04E60:  MOVLB  A
04E62:  MOVWF  xC9
04E64:  MOVLB  0
04E66:  CALL   200A
04E6A:  MOVLW  0D
04E6C:  BTFSS  FA6.6
04E6E:  GOTO   4E6C
04E72:  MOVLB  E
04E74:  MOVWF  xF9
04E76:  MOVLW  0A
04E78:  MOVLB  0
04E7A:  BTFSS  FA6.6
04E7C:  GOTO   4E7A
04E80:  MOVLB  E
04E82:  MOVWF  xF9
....................       return FALSE;
04E84:  MOVLW  00
04E86:  MOVWF  01
04E88:  MOVLB  0
04E8A:  GOTO   4E8E
....................    }
04E8E:  GOTO   5098 (RETURN)
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
04E92:  MOVLB  2
04E94:  MOVF   x53,W
04E96:  SUBLW  0C
04E98:  BTFSC  FD8.2
04E9A:  BRA    4EA2
04E9C:  MOVLB  0
04E9E:  GOTO   4EB0
04EA2:  MOVLB  0
....................       return TRUE;
04EA4:  MOVLW  01
04EA6:  MOVWF  01
04EA8:  GOTO   4F4E
04EAC:  GOTO   4F4E
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
04EB0:  MOVLW  7E
04EB2:  MOVWF  FF6
04EB4:  MOVLW  04
04EB6:  MOVWF  FF7
04EB8:  MOVLW  00
04EBA:  MOVWF  FF8
04EBC:  CALL   1DC0
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
04EC0:  MOVLW  A0
04EC2:  MOVWF  FF6
04EC4:  MOVLW  04
04EC6:  MOVWF  FF7
04EC8:  MOVLW  00
04ECA:  MOVWF  FF8
04ECC:  MOVLW  13
04ECE:  MOVLB  A
04ED0:  MOVWF  x67
04ED2:  MOVLB  0
04ED4:  CALL   1DF6
04ED8:  MOVFF  253,AC8
04EDC:  MOVLW  37
04EDE:  MOVLB  A
04EE0:  MOVWF  xC9
04EE2:  MOVLB  0
04EE4:  CALL   200A
04EE8:  MOVLW  0D
04EEA:  BTFSS  FA6.6
04EEC:  GOTO   4EEA
04EF0:  MOVLB  E
04EF2:  MOVWF  xF9
04EF4:  MOVLW  0A
04EF6:  MOVLB  0
04EF8:  BTFSS  FA6.6
04EFA:  GOTO   4EF8
04EFE:  MOVLB  E
04F00:  MOVWF  xF9
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
04F02:  MOVLW  B8
04F04:  MOVWF  FF6
04F06:  MOVLW  04
04F08:  MOVWF  FF7
04F0A:  MOVLW  00
04F0C:  MOVWF  FF8
04F0E:  MOVLW  13
04F10:  MOVLB  A
04F12:  MOVWF  x67
04F14:  MOVLB  0
04F16:  CALL   1DF6
04F1A:  MOVLW  0C
04F1C:  MOVLB  A
04F1E:  MOVWF  xC8
04F20:  MOVLW  37
04F22:  MOVWF  xC9
04F24:  MOVLB  0
04F26:  CALL   200A
04F2A:  MOVLW  0D
04F2C:  BTFSS  FA6.6
04F2E:  GOTO   4F2C
04F32:  MOVLB  E
04F34:  MOVWF  xF9
04F36:  MOVLW  0A
04F38:  MOVLB  0
04F3A:  BTFSS  FA6.6
04F3C:  GOTO   4F3A
04F40:  MOVLB  E
04F42:  MOVWF  xF9
....................       return FALSE;  
04F44:  MOVLW  00
04F46:  MOVWF  01
04F48:  MOVLB  0
04F4A:  GOTO   4F4E
....................    }
04F4E:  GOTO   50CE (RETURN)
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
05260:  MOVLW  AA
05262:  MOVLB  2
05264:  MOVWF  x41
....................    data[1] = (BOSS_PIC << 4) | frame_id;
05266:  MOVF   x3D,W
05268:  IORLW  50
0526A:  MOVWF  x42
....................    memcpy(&data[2], content, size);
0526C:  MOVLW  02
0526E:  MOVWF  FEA
05270:  MOVLW  43
05272:  MOVWF  FE9
05274:  MOVFF  23F,FE2
05278:  MOVFF  23E,FE1
0527C:  MOVF   x40,W
0527E:  MOVWF  01
05280:  BTFSS  FD8.2
05282:  BRA    528A
05284:  MOVLB  0
05286:  GOTO   5296
0528A:  MOVLB  0
0528C:  MOVFF  FE6,FEE
05290:  DECFSZ 01,F
05292:  GOTO   528C
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
05296:  MOVLW  02
05298:  MOVLB  2
0529A:  ADDWF  x40,W
0529C:  MOVWF  x51
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
0529E:  CLRF   03
052A0:  MOVF   x51,W
052A2:  ADDLW  41
052A4:  MOVWF  01
052A6:  MOVLW  02
052A8:  ADDWFC 03,F
052AA:  MOVF   01,W
052AC:  MOVWF  x53
052AE:  MOVFF  03,254
052B2:  MOVLW  01
052B4:  SUBWF  x51,W
052B6:  MOVWF  x55
052B8:  MOVLW  02
052BA:  MOVLB  B
052BC:  MOVWF  xE7
052BE:  MOVLW  42
052C0:  MOVWF  xE6
052C2:  MOVFF  255,BE8
052C6:  MOVLB  0
052C8:  CALL   2C22
052CC:  MOVFF  254,FEA
052D0:  MOVFF  253,FE9
052D4:  MOVFF  01,FEF
....................    int8 data_size = payload_size + 1; // '1' is for CRC
052D8:  MOVLW  01
052DA:  MOVLB  2
052DC:  ADDWF  x51,W
052DE:  MOVWF  x52
....................    
....................    transmit(data, data_size);
052E0:  MOVLW  02
052E2:  MOVWF  x54
052E4:  MOVLW  41
052E6:  MOVWF  x53
052E8:  MOVFF  252,255
052EC:  MOVLB  0
052EE:  GOTO   51A2
052F2:  RETURN 0
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
051A2:  MOVLB  2
051A4:  CLRF   x56
051A6:  MOVLB  0
051A8:  MOVLB  2
051AA:  MOVF   x55,W
051AC:  SUBWF  x56,W
051AE:  BTFSS  FD8.0
051B0:  BRA    51B8
051B2:  MOVLB  0
051B4:  GOTO   51DE
051B8:  MOVLB  0
....................       fputc(data[i], BOSS);
051BA:  MOVLB  2
051BC:  MOVF   x56,W
051BE:  ADDWF  x53,W
051C0:  MOVWF  FE9
051C2:  MOVLW  00
051C4:  ADDWFC x54,W
051C6:  MOVWF  FEA
051C8:  MOVFF  FEF,258
051CC:  MOVF   x58,W
051CE:  MOVLB  0
051D0:  GOTO   5192
051D4:  MOVLB  2
051D6:  INCF   x56,F
051D8:  MOVLB  0
051DA:  GOTO   51A8
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
051DE:  MOVLW  D0
051E0:  MOVWF  FF6
051E2:  MOVLW  04
051E4:  MOVWF  FF7
051E6:  MOVLW  00
051E8:  MOVWF  FF8
051EA:  CALL   1DC0
....................    for(int i = 0; i < data_size; i++)
051EE:  MOVLB  2
051F0:  CLRF   x57
051F2:  MOVLB  0
051F4:  MOVLB  2
051F6:  MOVF   x55,W
051F8:  SUBWF  x57,W
051FA:  BTFSS  FD8.0
051FC:  BRA    5204
051FE:  MOVLB  0
05200:  GOTO   5240
05204:  MOVLB  0
....................       fprintf(PC, "%X ", data[i]);
05206:  MOVLB  2
05208:  MOVF   x57,W
0520A:  ADDWF  x53,W
0520C:  MOVWF  FE9
0520E:  MOVLW  00
05210:  ADDWFC x54,W
05212:  MOVWF  FEA
05214:  MOVFF  FEF,258
05218:  MOVFF  258,AC8
0521C:  MOVLW  37
0521E:  MOVLB  A
05220:  MOVWF  xC9
05222:  MOVLB  0
05224:  CALL   200A
05228:  MOVLW  20
0522A:  BTFSS  FA6.6
0522C:  GOTO   522A
05230:  MOVLB  E
05232:  MOVWF  xF9
05234:  MOVLB  0
05236:  MOVLB  2
05238:  INCF   x57,F
0523A:  MOVLB  0
0523C:  GOTO   51F4
....................    fprintf(PC, "\r\n");
05240:  MOVLW  0D
05242:  BTFSS  FA6.6
05244:  GOTO   5242
05248:  MOVLB  E
0524A:  MOVWF  xF9
0524C:  MOVLW  0A
0524E:  MOVLB  0
05250:  BTFSS  FA6.6
05252:  GOTO   5250
05256:  MOVLB  E
05258:  MOVWF  xF9
0525A:  MOVLB  0
0525C:  GOTO   52F2 (RETURN)
.................... }
.................... 
.................... #include "../lib/communication/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    return command;
.................... }
.................... 
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
052F4:  MOVLW  0F
052F6:  MOVLB  2
052F8:  MOVWF  x3D
052FA:  CLRF   x3F
052FC:  CLRF   x3E
052FE:  CLRF   x40
05300:  MOVLB  0
05302:  CALL   5260
05306:  RETURN 0
.................... }
.................... 
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
0DD78:  MOVLW  03
0DD7A:  MOVLB  2
0DD7C:  MOVWF  x3D
0DD7E:  CLRF   x3F
0DD80:  MOVLW  4C
0DD82:  MOVWF  x3E
0DD84:  MOVLW  04
0DD86:  MOVWF  x40
0DD88:  MOVLB  0
0DD8A:  CALL   5260
0DD8E:  GOTO   DDB6 (RETURN)
.................... }
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (kbhit())
....................    {
....................       fgetc(BOSS);
....................       transmit_status();
....................    }
.................... }
.................... 
.................... 
.................... 
.................... // コア機能実装ファイル
.................... #include "domain/mmj_cigs_iv.c"
.................... #include "mmj_cigs_iv.h"               // 同じフォルダのヘッダー
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/mmj_cigs_config.h"      // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../device_driver/ad7490_driver.h"   // デバイス定義  
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../device_driver/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_flash.h"               // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x000FFFFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  0x00001000
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     0x00010000
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     0x00010000
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  0x00010000
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    0x00010000
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  0x00010000
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    0x00010000
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t flash_counter_table[];
.................... extern FlashCounter_t *flash_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/mission_tools.h"   // 通信ツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../hal/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... 
.................... unsigned int32 get_current_msec();
.................... void set_current_msec(unsigned int32 msec);
.................... void add_current_msec(unsigned int32 msec);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... void sweep_with_print()
*
0C4AA:  MOVLW  01
0C4AC:  MOVLB  2
0C4AE:  MOVWF  x40
0C4B0:  MOVLW  2C
0C4B2:  MOVWF  x3F
0C4B4:  MOVLW  02
0C4B6:  MOVWF  x42
0C4B8:  MOVLW  BC
0C4BA:  MOVWF  x41
.................... {
....................     unsigned int16 curr_threshold = 300;
....................     unsigned int16 curr_limit = 700;
.................... 
....................     // Enable both CIGS ports
....................     connect_port1();
0C4BC:  MOVLB  0
0C4BE:  CALL   4C06
....................     connect_port2();
0C4C2:  CALL   4C0E
....................     mcp4901_1_write(0); 
0C4C6:  MOVLB  A
0C4C8:  CLRF   x76
0C4CA:  CLRF   x75
0C4CC:  MOVLB  0
0C4CE:  CALL   2352
....................     mcp4901_2_write(0);
0C4D2:  MOVLB  A
0C4D4:  CLRF   x76
0C4D6:  CLRF   x75
0C4D8:  MOVLB  0
0C4DA:  CALL   2394
....................     delay_ms(100);
0C4DE:  MOVLW  64
0C4E0:  MOVLB  B
0C4E2:  MOVWF  xB4
0C4E4:  MOVLB  0
0C4E6:  CALL   1D92
....................     
....................     // Init Port1
....................     sweep_config_t port1 = {0};
0C4EA:  MOVLB  2
0C4EC:  CLRF   x43
0C4EE:  CLRF   x44
0C4F0:  CLRF   x45
0C4F2:  CLRF   x46
0C4F4:  CLRF   x47
0C4F6:  CLRF   x48
0C4F8:  CLRF   x49
0C4FA:  CLRF   x4A
0C4FC:  CLRF   x4B
0C4FE:  CLRF   x4C
0C500:  CLRF   x4D
0C502:  CLRF   x4E
0C504:  CLRF   x4F
0C506:  CLRF   x50
0C508:  CLRF   x51
0C50A:  CLRF   x52
0C50C:  CLRF   x53
0C50E:  CLRF   x54
0C510:  CLRF   x55
0C512:  CLRF   x56
0C514:  CLRF   x57
0C516:  CLRF   x58
0C518:  CLRF   x59
0C51A:  CLRF   x5A
0C51C:  CLRF   x5B
0C51E:  CLRF   x5C
0C520:  CLRF   x5D
0C522:  CLRF   x5E
0C524:  CLRF   x5F
0C526:  CLRF   x60
0C528:  CLRF   x61
0C52A:  CLRF   x62
0C52C:  CLRF   x63
0C52E:  CLRF   x64
0C530:  CLRF   x65
0C532:  CLRF   x66
0C534:  CLRF   x67
0C536:  CLRF   x68
0C538:  CLRF   x69
0C53A:  CLRF   x6A
0C53C:  CLRF   x6B
0C53E:  CLRF   x6C
0C540:  CLRF   x6D
0C542:  CLRF   x6E
0C544:  CLRF   x6F
0C546:  CLRF   x70
0C548:  CLRF   x71
0C54A:  CLRF   x72
0C54C:  CLRF   x73
0C54E:  CLRF   x74
0C550:  CLRF   x75
0C552:  CLRF   x76
0C554:  CLRF   x77
0C556:  CLRF   x78
0C558:  CLRF   x79
0C55A:  CLRF   x7A
0C55C:  CLRF   x7B
0C55E:  CLRF   x7C
0C560:  CLRF   x7D
0C562:  CLRF   x7E
0C564:  CLRF   x7F
0C566:  CLRF   x80
0C568:  CLRF   x81
0C56A:  CLRF   x82
0C56C:  CLRF   x83
0C56E:  CLRF   x84
0C570:  CLRF   x85
0C572:  CLRF   x86
0C574:  CLRF   x87
0C576:  CLRF   x88
0C578:  CLRF   x89
0C57A:  CLRF   x8A
0C57C:  CLRF   x8B
0C57E:  CLRF   x8C
0C580:  CLRF   x8D
0C582:  CLRF   x8E
0C584:  CLRF   x8F
0C586:  CLRF   x90
0C588:  CLRF   x91
0C58A:  CLRF   x92
0C58C:  CLRF   x93
0C58E:  CLRF   x94
0C590:  CLRF   x95
0C592:  CLRF   x96
0C594:  CLRF   x97
0C596:  CLRF   x98
0C598:  CLRF   x99
0C59A:  CLRF   x9A
0C59C:  CLRF   x9B
0C59E:  CLRF   x9C
0C5A0:  CLRF   x9D
0C5A2:  CLRF   x9E
0C5A4:  CLRF   x9F
0C5A6:  CLRF   xA0
0C5A8:  CLRF   xA1
0C5AA:  CLRF   xA2
0C5AC:  CLRF   xA3
0C5AE:  CLRF   xA4
0C5B0:  CLRF   xA5
0C5B2:  CLRF   xA6
0C5B4:  CLRF   xA7
0C5B6:  CLRF   xA8
0C5B8:  CLRF   xA9
0C5BA:  CLRF   xAA
0C5BC:  CLRF   xAB
0C5BE:  CLRF   xAC
0C5C0:  CLRF   xAD
0C5C2:  CLRF   xAE
0C5C4:  CLRF   xAF
0C5C6:  CLRF   xB0
0C5C8:  CLRF   xB1
0C5CA:  CLRF   xB2
0C5CC:  CLRF   xB3
0C5CE:  CLRF   xB4
0C5D0:  CLRF   xB5
0C5D2:  CLRF   xB6
0C5D4:  CLRF   xB7
0C5D6:  CLRF   xB8
0C5D8:  CLRF   xB9
0C5DA:  CLRF   xBA
0C5DC:  CLRF   xBB
0C5DE:  CLRF   xBC
0C5E0:  CLRF   xBD
0C5E2:  CLRF   xBE
0C5E4:  CLRF   xBF
0C5E6:  CLRF   xC0
0C5E8:  CLRF   xC1
0C5EA:  CLRF   xC2
0C5EC:  CLRF   xC3
0C5EE:  CLRF   xC4
0C5F0:  CLRF   xC5
0C5F2:  CLRF   xC6
0C5F4:  CLRF   xC7
0C5F6:  CLRF   xC8
0C5F8:  CLRF   xC9
0C5FA:  CLRF   xCA
0C5FC:  CLRF   xCB
0C5FE:  CLRF   xCC
0C600:  CLRF   xCD
0C602:  CLRF   xCE
0C604:  CLRF   xCF
0C606:  CLRF   xD0
0C608:  CLRF   xD1
0C60A:  CLRF   xD2
0C60C:  CLRF   xD3
0C60E:  CLRF   xD4
0C610:  CLRF   xD5
0C612:  CLRF   xD6
0C614:  CLRF   xD7
0C616:  CLRF   xD8
0C618:  CLRF   xD9
0C61A:  CLRF   xDA
0C61C:  CLRF   xDB
0C61E:  CLRF   xDC
0C620:  CLRF   xDD
0C622:  CLRF   xDE
0C624:  CLRF   xDF
0C626:  CLRF   xE0
0C628:  CLRF   xE1
0C62A:  CLRF   xE2
0C62C:  CLRF   xE3
0C62E:  CLRF   xE4
0C630:  CLRF   xE5
0C632:  CLRF   xE6
0C634:  CLRF   xE7
0C636:  CLRF   xE8
0C638:  CLRF   xE9
0C63A:  CLRF   xEA
0C63C:  CLRF   xEB
0C63E:  CLRF   xEC
0C640:  CLRF   xED
0C642:  CLRF   xEE
0C644:  CLRF   xEF
0C646:  CLRF   xF0
0C648:  CLRF   xF1
0C64A:  CLRF   xF2
0C64C:  CLRF   xF3
0C64E:  CLRF   xF4
0C650:  CLRF   xF5
0C652:  CLRF   xF6
0C654:  CLRF   xF7
0C656:  CLRF   xF8
0C658:  CLRF   xF9
0C65A:  CLRF   xFA
0C65C:  CLRF   xFB
0C65E:  CLRF   xFC
0C660:  CLRF   xFD
0C662:  CLRF   xFE
0C664:  CLRF   xFF
0C666:  MOVLB  3
0C668:  CLRF   x00
0C66A:  CLRF   x01
0C66C:  CLRF   x02
0C66E:  CLRF   x03
0C670:  CLRF   x04
0C672:  CLRF   x05
0C674:  CLRF   x06
0C676:  CLRF   x07
0C678:  CLRF   x08
0C67A:  CLRF   x09
0C67C:  CLRF   x0A
0C67E:  CLRF   x0B
0C680:  CLRF   x0C
0C682:  CLRF   x0D
0C684:  CLRF   x0E
0C686:  CLRF   x0F
0C688:  CLRF   x10
0C68A:  CLRF   x11
0C68C:  CLRF   x12
0C68E:  CLRF   x13
0C690:  CLRF   x14
0C692:  CLRF   x15
0C694:  CLRF   x16
0C696:  CLRF   x17
0C698:  CLRF   x18
0C69A:  CLRF   x19
0C69C:  CLRF   x1A
0C69E:  CLRF   x1B
0C6A0:  CLRF   x1C
0C6A2:  CLRF   x1D
0C6A4:  CLRF   x1E
0C6A6:  CLRF   x1F
0C6A8:  CLRF   x20
0C6AA:  CLRF   x21
0C6AC:  CLRF   x22
0C6AE:  CLRF   x23
0C6B0:  CLRF   x24
0C6B2:  CLRF   x25
0C6B4:  CLRF   x26
0C6B6:  CLRF   x27
0C6B8:  CLRF   x28
0C6BA:  CLRF   x29
0C6BC:  CLRF   x2A
0C6BE:  CLRF   x2B
0C6C0:  CLRF   x2C
0C6C2:  CLRF   x2D
0C6C4:  CLRF   x2E
0C6C6:  CLRF   x2F
0C6C8:  CLRF   x30
0C6CA:  CLRF   x31
0C6CC:  CLRF   x32
0C6CE:  CLRF   x33
0C6D0:  CLRF   x34
0C6D2:  CLRF   x35
0C6D4:  CLRF   x36
0C6D6:  CLRF   x37
0C6D8:  CLRF   x38
0C6DA:  CLRF   x39
0C6DC:  CLRF   x3A
0C6DE:  CLRF   x3B
0C6E0:  CLRF   x3C
0C6E2:  CLRF   x3D
0C6E4:  CLRF   x3E
0C6E6:  CLRF   x3F
0C6E8:  CLRF   x40
0C6EA:  CLRF   x41
0C6EC:  CLRF   x42
0C6EE:  CLRF   x43
0C6F0:  CLRF   x44
0C6F2:  CLRF   x45
0C6F4:  CLRF   x46
0C6F6:  CLRF   x47
0C6F8:  CLRF   x48
0C6FA:  CLRF   x49
0C6FC:  CLRF   x4A
0C6FE:  CLRF   x4B
0C700:  CLRF   x4C
0C702:  CLRF   x4D
0C704:  CLRF   x4E
0C706:  CLRF   x4F
0C708:  CLRF   x50
0C70A:  CLRF   x51
0C70C:  CLRF   x52
0C70E:  CLRF   x53
0C710:  CLRF   x54
0C712:  CLRF   x55
0C714:  CLRF   x56
0C716:  CLRF   x57
0C718:  CLRF   x58
0C71A:  CLRF   x59
0C71C:  CLRF   x5A
0C71E:  CLRF   x5B
0C720:  CLRF   x5C
0C722:  CLRF   x5D
0C724:  CLRF   x5E
0C726:  CLRF   x5F
0C728:  CLRF   x60
0C72A:  CLRF   x61
0C72C:  CLRF   x62
0C72E:  CLRF   x63
0C730:  CLRF   x64
0C732:  CLRF   x65
0C734:  CLRF   x66
0C736:  CLRF   x67
0C738:  CLRF   x68
0C73A:  CLRF   x69
0C73C:  CLRF   x6A
0C73E:  CLRF   x6B
0C740:  CLRF   x6C
0C742:  CLRF   x6D
0C744:  CLRF   x6E
0C746:  CLRF   x6F
0C748:  CLRF   x70
0C74A:  CLRF   x71
0C74C:  CLRF   x72
0C74E:  CLRF   x73
0C750:  CLRF   x74
0C752:  CLRF   x75
0C754:  CLRF   x76
0C756:  CLRF   x77
0C758:  CLRF   x78
0C75A:  CLRF   x79
0C75C:  CLRF   x7A
0C75E:  CLRF   x7B
0C760:  CLRF   x7C
0C762:  CLRF   x7D
0C764:  CLRF   x7E
0C766:  CLRF   x7F
0C768:  CLRF   x80
0C76A:  CLRF   x81
0C76C:  CLRF   x82
0C76E:  CLRF   x83
0C770:  CLRF   x84
0C772:  CLRF   x85
0C774:  CLRF   x86
0C776:  CLRF   x87
0C778:  CLRF   x88
0C77A:  CLRF   x89
0C77C:  CLRF   x8A
0C77E:  CLRF   x8B
0C780:  CLRF   x8C
0C782:  CLRF   x8D
0C784:  CLRF   x8E
0C786:  CLRF   x8F
0C788:  CLRF   x90
0C78A:  CLRF   x91
0C78C:  CLRF   x92
0C78E:  CLRF   x93
0C790:  CLRF   x94
0C792:  CLRF   x95
0C794:  CLRF   x96
0C796:  CLRF   x97
0C798:  CLRF   x98
0C79A:  CLRF   x99
0C79C:  CLRF   x9A
0C79E:  CLRF   x9B
0C7A0:  CLRF   x9C
0C7A2:  CLRF   x9D
0C7A4:  CLRF   x9E
0C7A6:  CLRF   x9F
0C7A8:  CLRF   xA0
0C7AA:  CLRF   xA1
0C7AC:  CLRF   xA2
0C7AE:  CLRF   xA3
0C7B0:  CLRF   xA4
0C7B2:  CLRF   xA5
0C7B4:  CLRF   xA6
0C7B6:  CLRF   xA7
0C7B8:  CLRF   xA8
0C7BA:  CLRF   xA9
0C7BC:  CLRF   xAA
0C7BE:  CLRF   xAB
0C7C0:  CLRF   xAC
0C7C2:  CLRF   xAD
0C7C4:  CLRF   xAE
0C7C6:  CLRF   xAF
0C7C8:  CLRF   xB0
0C7CA:  CLRF   xB1
0C7CC:  CLRF   xB2
0C7CE:  CLRF   xB3
0C7D0:  CLRF   xB4
0C7D2:  CLRF   xB5
0C7D4:  CLRF   xB6
0C7D6:  CLRF   xB7
0C7D8:  CLRF   xB8
0C7DA:  CLRF   xB9
0C7DC:  CLRF   xBA
0C7DE:  CLRF   xBB
0C7E0:  CLRF   xBC
0C7E2:  CLRF   xBD
0C7E4:  CLRF   xBE
0C7E6:  CLRF   xBF
0C7E8:  CLRF   xC0
0C7EA:  CLRF   xC1
0C7EC:  CLRF   xC2
0C7EE:  CLRF   xC3
0C7F0:  CLRF   xC4
0C7F2:  CLRF   xC5
0C7F4:  CLRF   xC6
0C7F6:  CLRF   xC7
0C7F8:  CLRF   xC8
0C7FA:  CLRF   xC9
0C7FC:  CLRF   xCA
0C7FE:  CLRF   xCB
0C800:  CLRF   xCC
0C802:  CLRF   xCD
0C804:  CLRF   xCE
0C806:  CLRF   xCF
0C808:  CLRF   xD0
0C80A:  CLRF   xD1
0C80C:  CLRF   xD2
0C80E:  CLRF   xD3
0C810:  CLRF   xD4
0C812:  CLRF   xD5
0C814:  CLRF   xD6
0C816:  CLRF   xD7
0C818:  CLRF   xD8
0C81A:  CLRF   xD9
0C81C:  CLRF   xDA
0C81E:  CLRF   xDB
0C820:  CLRF   xDC
0C822:  CLRF   xDD
0C824:  CLRF   xDE
0C826:  CLRF   xDF
0C828:  CLRF   xE0
0C82A:  CLRF   xE1
0C82C:  CLRF   xE2
0C82E:  CLRF   xE3
0C830:  CLRF   xE4
0C832:  CLRF   xE5
0C834:  CLRF   xE6
0C836:  CLRF   xE7
0C838:  CLRF   xE8
0C83A:  CLRF   xE9
0C83C:  CLRF   xEA
0C83E:  CLRF   xEB
0C840:  CLRF   xEC
0C842:  CLRF   xED
0C844:  CLRF   xEE
0C846:  CLRF   xEF
0C848:  CLRF   xF0
0C84A:  CLRF   xF1
0C84C:  CLRF   xF2
0C84E:  CLRF   xF3
0C850:  CLRF   xF4
0C852:  CLRF   xF5
0C854:  CLRF   xF6
0C856:  CLRF   xF7
0C858:  CLRF   xF8
0C85A:  CLRF   xF9
0C85C:  CLRF   xFA
0C85E:  CLRF   xFB
0C860:  CLRF   xFC
0C862:  CLRF   xFD
0C864:  CLRF   xFE
0C866:  CLRF   xFF
0C868:  MOVLB  4
0C86A:  CLRF   x00
0C86C:  CLRF   x01
0C86E:  CLRF   x02
0C870:  CLRF   x03
0C872:  CLRF   x04
0C874:  CLRF   x05
0C876:  CLRF   x06
0C878:  CLRF   x07
0C87A:  CLRF   x08
0C87C:  CLRF   x09
0C87E:  CLRF   x0A
0C880:  CLRF   x0B
0C882:  CLRF   x0C
0C884:  CLRF   x0D
0C886:  CLRF   x0E
0C888:  CLRF   x0F
0C88A:  CLRF   x10
0C88C:  CLRF   x11
0C88E:  CLRF   x12
0C890:  CLRF   x13
0C892:  CLRF   x14
0C894:  CLRF   x15
0C896:  CLRF   x16
0C898:  CLRF   x17
0C89A:  CLRF   x18
0C89C:  CLRF   x19
0C89E:  CLRF   x1A
0C8A0:  CLRF   x1B
0C8A2:  CLRF   x1C
0C8A4:  CLRF   x1D
0C8A6:  CLRF   x1E
0C8A8:  CLRF   x1F
0C8AA:  CLRF   x20
0C8AC:  CLRF   x21
0C8AE:  CLRF   x22
0C8B0:  CLRF   x23
0C8B2:  CLRF   x24
0C8B4:  CLRF   x25
0C8B6:  CLRF   x26
0C8B8:  CLRF   x27
0C8BA:  CLRF   x28
0C8BC:  CLRF   x29
0C8BE:  CLRF   x2A
0C8C0:  CLRF   x2B
0C8C2:  CLRF   x2C
0C8C4:  CLRF   x2D
0C8C6:  CLRF   x2E
0C8C8:  CLRF   x2F
0C8CA:  CLRF   x30
0C8CC:  CLRF   x31
0C8CE:  CLRF   x32
0C8D0:  CLRF   x33
0C8D2:  CLRF   x34
0C8D4:  CLRF   x35
0C8D6:  CLRF   x36
0C8D8:  CLRF   x37
0C8DA:  CLRF   x38
0C8DC:  CLRF   x39
0C8DE:  CLRF   x3A
0C8E0:  CLRF   x3B
0C8E2:  CLRF   x3C
0C8E4:  CLRF   x3D
0C8E6:  CLRF   x3E
0C8E8:  CLRF   x3F
0C8EA:  CLRF   x40
0C8EC:  CLRF   x41
0C8EE:  CLRF   x42
0C8F0:  CLRF   x43
0C8F2:  CLRF   x44
0C8F4:  CLRF   x45
0C8F6:  CLRF   x46
0C8F8:  CLRF   x47
0C8FA:  CLRF   x48
0C8FC:  CLRF   x49
0C8FE:  CLRF   x4A
0C900:  CLRF   x4B
0C902:  CLRF   x4C
0C904:  CLRF   x4D
0C906:  CLRF   x4E
0C908:  CLRF   x4F
0C90A:  CLRF   x50
0C90C:  CLRF   x51
0C90E:  CLRF   x52
0C910:  CLRF   x53
0C912:  CLRF   x54
0C914:  CLRF   x55
0C916:  CLRF   x56
0C918:  CLRF   x57
0C91A:  CLRF   x58
0C91C:  CLRF   x59
0C91E:  CLRF   x5A
0C920:  CLRF   x5B
0C922:  CLRF   x5C
0C924:  CLRF   x5D
0C926:  CLRF   x5E
0C928:  CLRF   x5F
0C92A:  CLRF   x60
0C92C:  CLRF   x61
0C92E:  CLRF   x62
0C930:  CLRF   x63
0C932:  CLRF   x64
0C934:  CLRF   x65
0C936:  CLRF   x66
0C938:  CLRF   x67
0C93A:  CLRF   x68
0C93C:  CLRF   x69
0C93E:  CLRF   x6A
0C940:  CLRF   x6B
0C942:  CLRF   x6C
0C944:  CLRF   x6D
0C946:  CLRF   x6E
0C948:  CLRF   x6F
0C94A:  CLRF   x70
0C94C:  CLRF   x71
0C94E:  CLRF   x72
0C950:  CLRF   x73
0C952:  CLRF   x74
0C954:  CLRF   x75
0C956:  CLRF   x76
0C958:  CLRF   x77
0C95A:  CLRF   x78
0C95C:  CLRF   x79
0C95E:  CLRF   x7A
0C960:  CLRF   x7B
0C962:  CLRF   x7C
0C964:  CLRF   x7D
0C966:  CLRF   x7E
0C968:  CLRF   x7F
0C96A:  CLRF   x80
0C96C:  CLRF   x81
0C96E:  CLRF   x82
0C970:  CLRF   x83
0C972:  CLRF   x84
0C974:  CLRF   x85
0C976:  CLRF   x86
0C978:  CLRF   x87
0C97A:  CLRF   x88
0C97C:  CLRF   x89
0C97E:  CLRF   x8A
0C980:  CLRF   x8B
0C982:  CLRF   x8C
0C984:  CLRF   x8D
0C986:  CLRF   x8E
0C988:  CLRF   x8F
0C98A:  CLRF   x90
0C98C:  CLRF   x91
0C98E:  CLRF   x92
0C990:  CLRF   x93
0C992:  CLRF   x94
0C994:  CLRF   x95
0C996:  CLRF   x96
0C998:  CLRF   x97
0C99A:  CLRF   x98
0C99C:  CLRF   x99
0C99E:  CLRF   x9A
0C9A0:  CLRF   x9B
0C9A2:  CLRF   x9C
0C9A4:  CLRF   x9D
0C9A6:  CLRF   x9E
0C9A8:  CLRF   x9F
0C9AA:  CLRF   xA0
0C9AC:  CLRF   xA1
0C9AE:  CLRF   xA2
0C9B0:  CLRF   xA3
0C9B2:  CLRF   xA4
0C9B4:  CLRF   xA5
0C9B6:  CLRF   xA6
0C9B8:  CLRF   xA7
0C9BA:  CLRF   xA8
0C9BC:  CLRF   xA9
0C9BE:  CLRF   xAA
0C9C0:  CLRF   xAB
0C9C2:  CLRF   xAC
0C9C4:  CLRF   xAD
0C9C6:  CLRF   xAE
0C9C8:  CLRF   xAF
0C9CA:  CLRF   xB0
0C9CC:  CLRF   xB1
0C9CE:  CLRF   xB2
0C9D0:  CLRF   xB3
0C9D2:  CLRF   xB4
0C9D4:  CLRF   xB5
0C9D6:  CLRF   xB6
0C9D8:  CLRF   xB7
0C9DA:  CLRF   xB8
0C9DC:  CLRF   xB9
0C9DE:  CLRF   xBA
0C9E0:  CLRF   xBB
0C9E2:  CLRF   xBC
0C9E4:  CLRF   xBD
0C9E6:  CLRF   xBE
0C9E8:  CLRF   xBF
0C9EA:  CLRF   xC0
0C9EC:  CLRF   xC1
0C9EE:  CLRF   xC2
0C9F0:  CLRF   xC3
0C9F2:  CLRF   xC4
0C9F4:  CLRF   xC5
0C9F6:  CLRF   xC6
0C9F8:  CLRF   xC7
0C9FA:  CLRF   xC8
0C9FC:  CLRF   xC9
0C9FE:  CLRF   xCA
0CA00:  CLRF   xCB
0CA02:  CLRF   xCC
0CA04:  CLRF   xCD
0CA06:  CLRF   xCE
0CA08:  CLRF   xCF
0CA0A:  CLRF   xD0
0CA0C:  CLRF   xD1
0CA0E:  CLRF   xD2
0CA10:  CLRF   xD3
0CA12:  CLRF   xD4
0CA14:  CLRF   xD5
0CA16:  CLRF   xD6
0CA18:  CLRF   xD7
0CA1A:  CLRF   xD8
0CA1C:  CLRF   xD9
0CA1E:  CLRF   xDA
0CA20:  CLRF   xDB
0CA22:  CLRF   xDC
0CA24:  CLRF   xDD
0CA26:  CLRF   xDE
0CA28:  CLRF   xDF
0CA2A:  CLRF   xE0
0CA2C:  CLRF   xE1
0CA2E:  CLRF   xE2
0CA30:  CLRF   xE3
0CA32:  CLRF   xE4
0CA34:  CLRF   xE5
0CA36:  CLRF   xE6
0CA38:  CLRF   xE7
0CA3A:  CLRF   xE8
0CA3C:  CLRF   xE9
0CA3E:  CLRF   xEA
0CA40:  CLRF   xEB
0CA42:  CLRF   xEC
0CA44:  CLRF   xED
0CA46:  CLRF   xEE
0CA48:  CLRF   xEF
0CA4A:  CLRF   xF0
0CA4C:  CLRF   xF1
0CA4E:  CLRF   xF2
0CA50:  CLRF   xF3
0CA52:  CLRF   xF4
0CA54:  CLRF   xF5
0CA56:  CLRF   xF6
0CA58:  CLRF   xF7
0CA5A:  CLRF   xF8
0CA5C:  CLRF   xF9
0CA5E:  CLRF   xFA
0CA60:  CLRF   xFB
0CA62:  CLRF   xFC
0CA64:  CLRF   xFD
0CA66:  CLRF   xFE
0CA68:  CLRF   xFF
0CA6A:  MOVLB  5
0CA6C:  CLRF   x00
0CA6E:  CLRF   x01
0CA70:  CLRF   x02
0CA72:  CLRF   x03
0CA74:  CLRF   x04
0CA76:  CLRF   x05
0CA78:  CLRF   x06
0CA7A:  CLRF   x07
0CA7C:  CLRF   x08
0CA7E:  CLRF   x09
0CA80:  CLRF   x0A
0CA82:  CLRF   x0B
0CA84:  CLRF   x0C
0CA86:  CLRF   x0D
0CA88:  CLRF   x0E
0CA8A:  CLRF   x0F
0CA8C:  CLRF   x10
0CA8E:  CLRF   x11
0CA90:  CLRF   x12
0CA92:  CLRF   x13
0CA94:  CLRF   x14
0CA96:  CLRF   x15
0CA98:  CLRF   x16
0CA9A:  CLRF   x17
0CA9C:  CLRF   x18
0CA9E:  CLRF   x19
0CAA0:  CLRF   x1A
0CAA2:  CLRF   x1B
0CAA4:  CLRF   x1C
0CAA6:  CLRF   x1D
0CAA8:  CLRF   x1E
0CAAA:  CLRF   x1F
0CAAC:  CLRF   x20
0CAAE:  CLRF   x21
0CAB0:  CLRF   x22
0CAB2:  CLRF   x23
0CAB4:  CLRF   x24
0CAB6:  CLRF   x25
0CAB8:  CLRF   x26
0CABA:  CLRF   x27
0CABC:  CLRF   x28
0CABE:  CLRF   x29
0CAC0:  CLRF   x2A
0CAC2:  CLRF   x2B
0CAC4:  CLRF   x2C
0CAC6:  CLRF   x2D
0CAC8:  CLRF   x2E
0CACA:  CLRF   x2F
0CACC:  CLRF   x30
0CACE:  CLRF   x31
0CAD0:  CLRF   x32
0CAD2:  CLRF   x33
0CAD4:  CLRF   x34
0CAD6:  CLRF   x35
0CAD8:  CLRF   x36
0CADA:  CLRF   x37
0CADC:  CLRF   x38
0CADE:  CLRF   x39
0CAE0:  CLRF   x3A
0CAE2:  CLRF   x3B
0CAE4:  CLRF   x3C
0CAE6:  CLRF   x3D
0CAE8:  CLRF   x3E
0CAEA:  CLRF   x3F
0CAEC:  CLRF   x40
0CAEE:  CLRF   x41
0CAF0:  CLRF   x42
0CAF2:  CLRF   x43
0CAF4:  CLRF   x44
0CAF6:  CLRF   x45
0CAF8:  CLRF   x46
0CAFA:  CLRF   x47
0CAFC:  CLRF   x48
0CAFE:  CLRF   x49
0CB00:  CLRF   x4A
0CB02:  CLRF   x4B
0CB04:  CLRF   x4C
0CB06:  CLRF   x4D
0CB08:  CLRF   x4E
0CB0A:  CLRF   x4F
0CB0C:  CLRF   x50
0CB0E:  CLRF   x51
0CB10:  CLRF   x52
0CB12:  CLRF   x53
0CB14:  CLRF   x54
0CB16:  CLRF   x55
0CB18:  CLRF   x56
0CB1A:  CLRF   x57
0CB1C:  CLRF   x58
0CB1E:  CLRF   x59
0CB20:  CLRF   x5A
0CB22:  CLRF   x5B
0CB24:  CLRF   x5C
0CB26:  CLRF   x5D
0CB28:  CLRF   x5E
0CB2A:  CLRF   x5F
0CB2C:  CLRF   x60
0CB2E:  CLRF   x61
0CB30:  CLRF   x62
0CB32:  CLRF   x63
0CB34:  CLRF   x64
0CB36:  CLRF   x65
0CB38:  CLRF   x66
0CB3A:  CLRF   x67
0CB3C:  CLRF   x68
0CB3E:  CLRF   x69
0CB40:  CLRF   x6A
0CB42:  CLRF   x6B
0CB44:  CLRF   x6C
0CB46:  CLRF   x6D
0CB48:  CLRF   x6E
0CB4A:  CLRF   x6F
0CB4C:  CLRF   x70
0CB4E:  CLRF   x71
0CB50:  CLRF   x72
0CB52:  CLRF   x73
0CB54:  CLRF   x74
0CB56:  CLRF   x75
0CB58:  CLRF   x76
0CB5A:  CLRF   x77
0CB5C:  CLRF   x78
0CB5E:  CLRF   x79
0CB60:  CLRF   x7A
0CB62:  CLRF   x7B
0CB64:  CLRF   x7C
0CB66:  CLRF   x7D
0CB68:  CLRF   x7E
0CB6A:  CLRF   x7F
0CB6C:  CLRF   x80
0CB6E:  CLRF   x81
0CB70:  CLRF   x82
0CB72:  CLRF   x83
0CB74:  CLRF   x84
0CB76:  CLRF   x85
0CB78:  CLRF   x86
0CB7A:  CLRF   x87
0CB7C:  CLRF   x88
0CB7E:  CLRF   x89
0CB80:  CLRF   x8A
0CB82:  CLRF   x8B
0CB84:  CLRF   x8C
0CB86:  CLRF   x8D
0CB88:  CLRF   x8E
0CB8A:  CLRF   x8F
0CB8C:  CLRF   x90
0CB8E:  CLRF   x91
0CB90:  CLRF   x92
0CB92:  CLRF   x93
0CB94:  CLRF   x94
0CB96:  CLRF   x95
0CB98:  CLRF   x96
0CB9A:  CLRF   x97
0CB9C:  CLRF   x98
0CB9E:  CLRF   x99
0CBA0:  CLRF   x9A
0CBA2:  CLRF   x9B
0CBA4:  CLRF   x9C
0CBA6:  CLRF   x9D
0CBA8:  CLRF   x9E
0CBAA:  CLRF   x9F
0CBAC:  CLRF   xA0
0CBAE:  CLRF   xA1
0CBB0:  CLRF   xA2
0CBB2:  CLRF   xA3
0CBB4:  CLRF   xA4
0CBB6:  CLRF   xA5
0CBB8:  CLRF   xA6
0CBBA:  CLRF   xA7
0CBBC:  CLRF   xA8
0CBBE:  CLRF   xA9
0CBC0:  CLRF   xAA
0CBC2:  CLRF   xAB
0CBC4:  CLRF   xAC
0CBC6:  CLRF   xAD
0CBC8:  CLRF   xAE
0CBCA:  CLRF   xAF
0CBCC:  CLRF   xB0
0CBCE:  CLRF   xB1
0CBD0:  CLRF   xB2
0CBD2:  CLRF   xB3
0CBD4:  CLRF   xB4
0CBD6:  CLRF   xB5
0CBD8:  CLRF   xB6
0CBDA:  CLRF   xB7
0CBDC:  CLRF   xB8
0CBDE:  CLRF   xB9
0CBE0:  CLRF   xBA
0CBE2:  CLRF   xBB
0CBE4:  CLRF   xBC
0CBE6:  CLRF   xBD
0CBE8:  CLRF   xBE
0CBEA:  CLRF   xBF
0CBEC:  CLRF   xC0
0CBEE:  CLRF   xC1
0CBF0:  CLRF   xC2
0CBF2:  CLRF   xC3
0CBF4:  CLRF   xC4
0CBF6:  CLRF   xC5
0CBF8:  CLRF   xC6
0CBFA:  CLRF   xC7
0CBFC:  CLRF   xC8
0CBFE:  CLRF   xC9
0CC00:  CLRF   xCA
0CC02:  CLRF   xCB
0CC04:  CLRF   xCC
0CC06:  CLRF   xCD
0CC08:  CLRF   xCE
0CC0A:  CLRF   xCF
0CC0C:  CLRF   xD0
0CC0E:  CLRF   xD1
0CC10:  CLRF   xD2
0CC12:  CLRF   xD3
0CC14:  CLRF   xD4
0CC16:  CLRF   xD5
0CC18:  CLRF   xD6
0CC1A:  CLRF   xD7
0CC1C:  CLRF   xD8
0CC1E:  CLRF   xD9
0CC20:  CLRF   xDA
0CC22:  CLRF   xDB
0CC24:  CLRF   xDC
0CC26:  CLRF   xDD
0CC28:  CLRF   xDE
0CC2A:  CLRF   xDF
0CC2C:  CLRF   xE0
0CC2E:  CLRF   xE1
0CC30:  CLRF   xE2
0CC32:  CLRF   xE3
0CC34:  CLRF   xE4
0CC36:  CLRF   xE5
0CC38:  CLRF   xE6
0CC3A:  CLRF   xE7
0CC3C:  CLRF   xE8
0CC3E:  CLRF   xE9
0CC40:  CLRF   xEA
0CC42:  CLRF   xEB
0CC44:  CLRF   xEC
0CC46:  CLRF   xED
0CC48:  CLRF   xEE
0CC4A:  CLRF   xEF
0CC4C:  CLRF   xF0
0CC4E:  CLRF   xF1
0CC50:  CLRF   xF2
0CC52:  CLRF   xF3
0CC54:  CLRF   xF4
0CC56:  CLRF   xF5
0CC58:  CLRF   xF6
0CC5A:  CLRF   xF7
0CC5C:  CLRF   xF8
0CC5E:  CLRF   xF9
0CC60:  CLRF   xFA
0CC62:  CLRF   xFB
0CC64:  CLRF   xFC
0CC66:  CLRF   xFD
0CC68:  CLRF   xFE
0CC6A:  CLRF   xFF
0CC6C:  MOVLB  6
0CC6E:  CLRF   x00
0CC70:  CLRF   x01
0CC72:  CLRF   x02
0CC74:  CLRF   x03
0CC76:  CLRF   x04
0CC78:  CLRF   x05
0CC7A:  CLRF   x06
0CC7C:  CLRF   x07
0CC7E:  CLRF   x08
0CC80:  CLRF   x09
0CC82:  CLRF   x0A
0CC84:  CLRF   x0B
0CC86:  CLRF   x0C
0CC88:  CLRF   x0D
0CC8A:  CLRF   x0E
0CC8C:  CLRF   x0F
0CC8E:  CLRF   x10
0CC90:  CLRF   x11
0CC92:  CLRF   x12
0CC94:  CLRF   x13
0CC96:  CLRF   x14
0CC98:  CLRF   x15
0CC9A:  CLRF   x16
0CC9C:  CLRF   x17
0CC9E:  CLRF   x18
0CCA0:  CLRF   x19
0CCA2:  CLRF   x1A
0CCA4:  CLRF   x1B
0CCA6:  CLRF   x1C
0CCA8:  CLRF   x1D
0CCAA:  CLRF   x1E
0CCAC:  CLRF   x1F
0CCAE:  CLRF   x20
0CCB0:  CLRF   x21
0CCB2:  CLRF   x22
0CCB4:  CLRF   x23
0CCB6:  CLRF   x24
0CCB8:  CLRF   x25
0CCBA:  CLRF   x26
0CCBC:  CLRF   x27
0CCBE:  CLRF   x28
0CCC0:  CLRF   x29
0CCC2:  CLRF   x2A
0CCC4:  CLRF   x2B
0CCC6:  CLRF   x2C
0CCC8:  CLRF   x2D
0CCCA:  CLRF   x2E
0CCCC:  CLRF   x2F
0CCCE:  CLRF   x30
0CCD0:  CLRF   x31
0CCD2:  CLRF   x32
0CCD4:  CLRF   x33
0CCD6:  CLRF   x34
0CCD8:  CLRF   x35
0CCDA:  CLRF   x36
0CCDC:  CLRF   x37
0CCDE:  CLRF   x38
0CCE0:  CLRF   x39
0CCE2:  CLRF   x3A
0CCE4:  CLRF   x3B
0CCE6:  CLRF   x3C
0CCE8:  CLRF   x3D
0CCEA:  CLRF   x3E
0CCEC:  CLRF   x3F
0CCEE:  CLRF   x40
0CCF0:  CLRF   x41
0CCF2:  CLRF   x42
....................     port1.port_num = 1;
0CCF4:  MOVLW  01
0CCF6:  MOVLB  2
0CCF8:  MOVWF  x43
....................     port1.sweep_step = 0;
0CCFA:  CLRF   x45
0CCFC:  CLRF   x44
....................     port1.active = 1;
0CCFE:  MOVLB  6
0CD00:  BSF    x42.0
.................... 
....................     // Init Port2
....................     sweep_config_t port2 = {0};
0CD02:  CLRF   x43
0CD04:  CLRF   x44
0CD06:  CLRF   x45
0CD08:  CLRF   x46
0CD0A:  CLRF   x47
0CD0C:  CLRF   x48
0CD0E:  CLRF   x49
0CD10:  CLRF   x4A
0CD12:  CLRF   x4B
0CD14:  CLRF   x4C
0CD16:  CLRF   x4D
0CD18:  CLRF   x4E
0CD1A:  CLRF   x4F
0CD1C:  CLRF   x50
0CD1E:  CLRF   x51
0CD20:  CLRF   x52
0CD22:  CLRF   x53
0CD24:  CLRF   x54
0CD26:  CLRF   x55
0CD28:  CLRF   x56
0CD2A:  CLRF   x57
0CD2C:  CLRF   x58
0CD2E:  CLRF   x59
0CD30:  CLRF   x5A
0CD32:  CLRF   x5B
0CD34:  CLRF   x5C
0CD36:  CLRF   x5D
0CD38:  CLRF   x5E
0CD3A:  CLRF   x5F
0CD3C:  CLRF   x60
0CD3E:  CLRF   x61
0CD40:  CLRF   x62
0CD42:  CLRF   x63
0CD44:  CLRF   x64
0CD46:  CLRF   x65
0CD48:  CLRF   x66
0CD4A:  CLRF   x67
0CD4C:  CLRF   x68
0CD4E:  CLRF   x69
0CD50:  CLRF   x6A
0CD52:  CLRF   x6B
0CD54:  CLRF   x6C
0CD56:  CLRF   x6D
0CD58:  CLRF   x6E
0CD5A:  CLRF   x6F
0CD5C:  CLRF   x70
0CD5E:  CLRF   x71
0CD60:  CLRF   x72
0CD62:  CLRF   x73
0CD64:  CLRF   x74
0CD66:  CLRF   x75
0CD68:  CLRF   x76
0CD6A:  CLRF   x77
0CD6C:  CLRF   x78
0CD6E:  CLRF   x79
0CD70:  CLRF   x7A
0CD72:  CLRF   x7B
0CD74:  CLRF   x7C
0CD76:  CLRF   x7D
0CD78:  CLRF   x7E
0CD7A:  CLRF   x7F
0CD7C:  CLRF   x80
0CD7E:  CLRF   x81
0CD80:  CLRF   x82
0CD82:  CLRF   x83
0CD84:  CLRF   x84
0CD86:  CLRF   x85
0CD88:  CLRF   x86
0CD8A:  CLRF   x87
0CD8C:  CLRF   x88
0CD8E:  CLRF   x89
0CD90:  CLRF   x8A
0CD92:  CLRF   x8B
0CD94:  CLRF   x8C
0CD96:  CLRF   x8D
0CD98:  CLRF   x8E
0CD9A:  CLRF   x8F
0CD9C:  CLRF   x90
0CD9E:  CLRF   x91
0CDA0:  CLRF   x92
0CDA2:  CLRF   x93
0CDA4:  CLRF   x94
0CDA6:  CLRF   x95
0CDA8:  CLRF   x96
0CDAA:  CLRF   x97
0CDAC:  CLRF   x98
0CDAE:  CLRF   x99
0CDB0:  CLRF   x9A
0CDB2:  CLRF   x9B
0CDB4:  CLRF   x9C
0CDB6:  CLRF   x9D
0CDB8:  CLRF   x9E
0CDBA:  CLRF   x9F
0CDBC:  CLRF   xA0
0CDBE:  CLRF   xA1
0CDC0:  CLRF   xA2
0CDC2:  CLRF   xA3
0CDC4:  CLRF   xA4
0CDC6:  CLRF   xA5
0CDC8:  CLRF   xA6
0CDCA:  CLRF   xA7
0CDCC:  CLRF   xA8
0CDCE:  CLRF   xA9
0CDD0:  CLRF   xAA
0CDD2:  CLRF   xAB
0CDD4:  CLRF   xAC
0CDD6:  CLRF   xAD
0CDD8:  CLRF   xAE
0CDDA:  CLRF   xAF
0CDDC:  CLRF   xB0
0CDDE:  CLRF   xB1
0CDE0:  CLRF   xB2
0CDE2:  CLRF   xB3
0CDE4:  CLRF   xB4
0CDE6:  CLRF   xB5
0CDE8:  CLRF   xB6
0CDEA:  CLRF   xB7
0CDEC:  CLRF   xB8
0CDEE:  CLRF   xB9
0CDF0:  CLRF   xBA
0CDF2:  CLRF   xBB
0CDF4:  CLRF   xBC
0CDF6:  CLRF   xBD
0CDF8:  CLRF   xBE
0CDFA:  CLRF   xBF
0CDFC:  CLRF   xC0
0CDFE:  CLRF   xC1
0CE00:  CLRF   xC2
0CE02:  CLRF   xC3
0CE04:  CLRF   xC4
0CE06:  CLRF   xC5
0CE08:  CLRF   xC6
0CE0A:  CLRF   xC7
0CE0C:  CLRF   xC8
0CE0E:  CLRF   xC9
0CE10:  CLRF   xCA
0CE12:  CLRF   xCB
0CE14:  CLRF   xCC
0CE16:  CLRF   xCD
0CE18:  CLRF   xCE
0CE1A:  CLRF   xCF
0CE1C:  CLRF   xD0
0CE1E:  CLRF   xD1
0CE20:  CLRF   xD2
0CE22:  CLRF   xD3
0CE24:  CLRF   xD4
0CE26:  CLRF   xD5
0CE28:  CLRF   xD6
0CE2A:  CLRF   xD7
0CE2C:  CLRF   xD8
0CE2E:  CLRF   xD9
0CE30:  CLRF   xDA
0CE32:  CLRF   xDB
0CE34:  CLRF   xDC
0CE36:  CLRF   xDD
0CE38:  CLRF   xDE
0CE3A:  CLRF   xDF
0CE3C:  CLRF   xE0
0CE3E:  CLRF   xE1
0CE40:  CLRF   xE2
0CE42:  CLRF   xE3
0CE44:  CLRF   xE4
0CE46:  CLRF   xE5
0CE48:  CLRF   xE6
0CE4A:  CLRF   xE7
0CE4C:  CLRF   xE8
0CE4E:  CLRF   xE9
0CE50:  CLRF   xEA
0CE52:  CLRF   xEB
0CE54:  CLRF   xEC
0CE56:  CLRF   xED
0CE58:  CLRF   xEE
0CE5A:  CLRF   xEF
0CE5C:  CLRF   xF0
0CE5E:  CLRF   xF1
0CE60:  CLRF   xF2
0CE62:  CLRF   xF3
0CE64:  CLRF   xF4
0CE66:  CLRF   xF5
0CE68:  CLRF   xF6
0CE6A:  CLRF   xF7
0CE6C:  CLRF   xF8
0CE6E:  CLRF   xF9
0CE70:  CLRF   xFA
0CE72:  CLRF   xFB
0CE74:  CLRF   xFC
0CE76:  CLRF   xFD
0CE78:  CLRF   xFE
0CE7A:  CLRF   xFF
0CE7C:  MOVLB  7
0CE7E:  CLRF   x00
0CE80:  CLRF   x01
0CE82:  CLRF   x02
0CE84:  CLRF   x03
0CE86:  CLRF   x04
0CE88:  CLRF   x05
0CE8A:  CLRF   x06
0CE8C:  CLRF   x07
0CE8E:  CLRF   x08
0CE90:  CLRF   x09
0CE92:  CLRF   x0A
0CE94:  CLRF   x0B
0CE96:  CLRF   x0C
0CE98:  CLRF   x0D
0CE9A:  CLRF   x0E
0CE9C:  CLRF   x0F
0CE9E:  CLRF   x10
0CEA0:  CLRF   x11
0CEA2:  CLRF   x12
0CEA4:  CLRF   x13
0CEA6:  CLRF   x14
0CEA8:  CLRF   x15
0CEAA:  CLRF   x16
0CEAC:  CLRF   x17
0CEAE:  CLRF   x18
0CEB0:  CLRF   x19
0CEB2:  CLRF   x1A
0CEB4:  CLRF   x1B
0CEB6:  CLRF   x1C
0CEB8:  CLRF   x1D
0CEBA:  CLRF   x1E
0CEBC:  CLRF   x1F
0CEBE:  CLRF   x20
0CEC0:  CLRF   x21
0CEC2:  CLRF   x22
0CEC4:  CLRF   x23
0CEC6:  CLRF   x24
0CEC8:  CLRF   x25
0CECA:  CLRF   x26
0CECC:  CLRF   x27
0CECE:  CLRF   x28
0CED0:  CLRF   x29
0CED2:  CLRF   x2A
0CED4:  CLRF   x2B
0CED6:  CLRF   x2C
0CED8:  CLRF   x2D
0CEDA:  CLRF   x2E
0CEDC:  CLRF   x2F
0CEDE:  CLRF   x30
0CEE0:  CLRF   x31
0CEE2:  CLRF   x32
0CEE4:  CLRF   x33
0CEE6:  CLRF   x34
0CEE8:  CLRF   x35
0CEEA:  CLRF   x36
0CEEC:  CLRF   x37
0CEEE:  CLRF   x38
0CEF0:  CLRF   x39
0CEF2:  CLRF   x3A
0CEF4:  CLRF   x3B
0CEF6:  CLRF   x3C
0CEF8:  CLRF   x3D
0CEFA:  CLRF   x3E
0CEFC:  CLRF   x3F
0CEFE:  CLRF   x40
0CF00:  CLRF   x41
0CF02:  CLRF   x42
0CF04:  CLRF   x43
0CF06:  CLRF   x44
0CF08:  CLRF   x45
0CF0A:  CLRF   x46
0CF0C:  CLRF   x47
0CF0E:  CLRF   x48
0CF10:  CLRF   x49
0CF12:  CLRF   x4A
0CF14:  CLRF   x4B
0CF16:  CLRF   x4C
0CF18:  CLRF   x4D
0CF1A:  CLRF   x4E
0CF1C:  CLRF   x4F
0CF1E:  CLRF   x50
0CF20:  CLRF   x51
0CF22:  CLRF   x52
0CF24:  CLRF   x53
0CF26:  CLRF   x54
0CF28:  CLRF   x55
0CF2A:  CLRF   x56
0CF2C:  CLRF   x57
0CF2E:  CLRF   x58
0CF30:  CLRF   x59
0CF32:  CLRF   x5A
0CF34:  CLRF   x5B
0CF36:  CLRF   x5C
0CF38:  CLRF   x5D
0CF3A:  CLRF   x5E
0CF3C:  CLRF   x5F
0CF3E:  CLRF   x60
0CF40:  CLRF   x61
0CF42:  CLRF   x62
0CF44:  CLRF   x63
0CF46:  CLRF   x64
0CF48:  CLRF   x65
0CF4A:  CLRF   x66
0CF4C:  CLRF   x67
0CF4E:  CLRF   x68
0CF50:  CLRF   x69
0CF52:  CLRF   x6A
0CF54:  CLRF   x6B
0CF56:  CLRF   x6C
0CF58:  CLRF   x6D
0CF5A:  CLRF   x6E
0CF5C:  CLRF   x6F
0CF5E:  CLRF   x70
0CF60:  CLRF   x71
0CF62:  CLRF   x72
0CF64:  CLRF   x73
0CF66:  CLRF   x74
0CF68:  CLRF   x75
0CF6A:  CLRF   x76
0CF6C:  CLRF   x77
0CF6E:  CLRF   x78
0CF70:  CLRF   x79
0CF72:  CLRF   x7A
0CF74:  CLRF   x7B
0CF76:  CLRF   x7C
0CF78:  CLRF   x7D
0CF7A:  CLRF   x7E
0CF7C:  CLRF   x7F
0CF7E:  CLRF   x80
0CF80:  CLRF   x81
0CF82:  CLRF   x82
0CF84:  CLRF   x83
0CF86:  CLRF   x84
0CF88:  CLRF   x85
0CF8A:  CLRF   x86
0CF8C:  CLRF   x87
0CF8E:  CLRF   x88
0CF90:  CLRF   x89
0CF92:  CLRF   x8A
0CF94:  CLRF   x8B
0CF96:  CLRF   x8C
0CF98:  CLRF   x8D
0CF9A:  CLRF   x8E
0CF9C:  CLRF   x8F
0CF9E:  CLRF   x90
0CFA0:  CLRF   x91
0CFA2:  CLRF   x92
0CFA4:  CLRF   x93
0CFA6:  CLRF   x94
0CFA8:  CLRF   x95
0CFAA:  CLRF   x96
0CFAC:  CLRF   x97
0CFAE:  CLRF   x98
0CFB0:  CLRF   x99
0CFB2:  CLRF   x9A
0CFB4:  CLRF   x9B
0CFB6:  CLRF   x9C
0CFB8:  CLRF   x9D
0CFBA:  CLRF   x9E
0CFBC:  CLRF   x9F
0CFBE:  CLRF   xA0
0CFC0:  CLRF   xA1
0CFC2:  CLRF   xA2
0CFC4:  CLRF   xA3
0CFC6:  CLRF   xA4
0CFC8:  CLRF   xA5
0CFCA:  CLRF   xA6
0CFCC:  CLRF   xA7
0CFCE:  CLRF   xA8
0CFD0:  CLRF   xA9
0CFD2:  CLRF   xAA
0CFD4:  CLRF   xAB
0CFD6:  CLRF   xAC
0CFD8:  CLRF   xAD
0CFDA:  CLRF   xAE
0CFDC:  CLRF   xAF
0CFDE:  CLRF   xB0
0CFE0:  CLRF   xB1
0CFE2:  CLRF   xB2
0CFE4:  CLRF   xB3
0CFE6:  CLRF   xB4
0CFE8:  CLRF   xB5
0CFEA:  CLRF   xB6
0CFEC:  CLRF   xB7
0CFEE:  CLRF   xB8
0CFF0:  CLRF   xB9
0CFF2:  CLRF   xBA
0CFF4:  CLRF   xBB
0CFF6:  CLRF   xBC
0CFF8:  CLRF   xBD
0CFFA:  CLRF   xBE
0CFFC:  CLRF   xBF
0CFFE:  CLRF   xC0
0D000:  CLRF   xC1
0D002:  CLRF   xC2
0D004:  CLRF   xC3
0D006:  CLRF   xC4
0D008:  CLRF   xC5
0D00A:  CLRF   xC6
0D00C:  CLRF   xC7
0D00E:  CLRF   xC8
0D010:  CLRF   xC9
0D012:  CLRF   xCA
0D014:  CLRF   xCB
0D016:  CLRF   xCC
0D018:  CLRF   xCD
0D01A:  CLRF   xCE
0D01C:  CLRF   xCF
0D01E:  CLRF   xD0
0D020:  CLRF   xD1
0D022:  CLRF   xD2
0D024:  CLRF   xD3
0D026:  CLRF   xD4
0D028:  CLRF   xD5
0D02A:  CLRF   xD6
0D02C:  CLRF   xD7
0D02E:  CLRF   xD8
0D030:  CLRF   xD9
0D032:  CLRF   xDA
0D034:  CLRF   xDB
0D036:  CLRF   xDC
0D038:  CLRF   xDD
0D03A:  CLRF   xDE
0D03C:  CLRF   xDF
0D03E:  CLRF   xE0
0D040:  CLRF   xE1
0D042:  CLRF   xE2
0D044:  CLRF   xE3
0D046:  CLRF   xE4
0D048:  CLRF   xE5
0D04A:  CLRF   xE6
0D04C:  CLRF   xE7
0D04E:  CLRF   xE8
0D050:  CLRF   xE9
0D052:  CLRF   xEA
0D054:  CLRF   xEB
0D056:  CLRF   xEC
0D058:  CLRF   xED
0D05A:  CLRF   xEE
0D05C:  CLRF   xEF
0D05E:  CLRF   xF0
0D060:  CLRF   xF1
0D062:  CLRF   xF2
0D064:  CLRF   xF3
0D066:  CLRF   xF4
0D068:  CLRF   xF5
0D06A:  CLRF   xF6
0D06C:  CLRF   xF7
0D06E:  CLRF   xF8
0D070:  CLRF   xF9
0D072:  CLRF   xFA
0D074:  CLRF   xFB
0D076:  CLRF   xFC
0D078:  CLRF   xFD
0D07A:  CLRF   xFE
0D07C:  CLRF   xFF
0D07E:  MOVLB  8
0D080:  CLRF   x00
0D082:  CLRF   x01
0D084:  CLRF   x02
0D086:  CLRF   x03
0D088:  CLRF   x04
0D08A:  CLRF   x05
0D08C:  CLRF   x06
0D08E:  CLRF   x07
0D090:  CLRF   x08
0D092:  CLRF   x09
0D094:  CLRF   x0A
0D096:  CLRF   x0B
0D098:  CLRF   x0C
0D09A:  CLRF   x0D
0D09C:  CLRF   x0E
0D09E:  CLRF   x0F
0D0A0:  CLRF   x10
0D0A2:  CLRF   x11
0D0A4:  CLRF   x12
0D0A6:  CLRF   x13
0D0A8:  CLRF   x14
0D0AA:  CLRF   x15
0D0AC:  CLRF   x16
0D0AE:  CLRF   x17
0D0B0:  CLRF   x18
0D0B2:  CLRF   x19
0D0B4:  CLRF   x1A
0D0B6:  CLRF   x1B
0D0B8:  CLRF   x1C
0D0BA:  CLRF   x1D
0D0BC:  CLRF   x1E
0D0BE:  CLRF   x1F
0D0C0:  CLRF   x20
0D0C2:  CLRF   x21
0D0C4:  CLRF   x22
0D0C6:  CLRF   x23
0D0C8:  CLRF   x24
0D0CA:  CLRF   x25
0D0CC:  CLRF   x26
0D0CE:  CLRF   x27
0D0D0:  CLRF   x28
0D0D2:  CLRF   x29
0D0D4:  CLRF   x2A
0D0D6:  CLRF   x2B
0D0D8:  CLRF   x2C
0D0DA:  CLRF   x2D
0D0DC:  CLRF   x2E
0D0DE:  CLRF   x2F
0D0E0:  CLRF   x30
0D0E2:  CLRF   x31
0D0E4:  CLRF   x32
0D0E6:  CLRF   x33
0D0E8:  CLRF   x34
0D0EA:  CLRF   x35
0D0EC:  CLRF   x36
0D0EE:  CLRF   x37
0D0F0:  CLRF   x38
0D0F2:  CLRF   x39
0D0F4:  CLRF   x3A
0D0F6:  CLRF   x3B
0D0F8:  CLRF   x3C
0D0FA:  CLRF   x3D
0D0FC:  CLRF   x3E
0D0FE:  CLRF   x3F
0D100:  CLRF   x40
0D102:  CLRF   x41
0D104:  CLRF   x42
0D106:  CLRF   x43
0D108:  CLRF   x44
0D10A:  CLRF   x45
0D10C:  CLRF   x46
0D10E:  CLRF   x47
0D110:  CLRF   x48
0D112:  CLRF   x49
0D114:  CLRF   x4A
0D116:  CLRF   x4B
0D118:  CLRF   x4C
0D11A:  CLRF   x4D
0D11C:  CLRF   x4E
0D11E:  CLRF   x4F
0D120:  CLRF   x50
0D122:  CLRF   x51
0D124:  CLRF   x52
0D126:  CLRF   x53
0D128:  CLRF   x54
0D12A:  CLRF   x55
0D12C:  CLRF   x56
0D12E:  CLRF   x57
0D130:  CLRF   x58
0D132:  CLRF   x59
0D134:  CLRF   x5A
0D136:  CLRF   x5B
0D138:  CLRF   x5C
0D13A:  CLRF   x5D
0D13C:  CLRF   x5E
0D13E:  CLRF   x5F
0D140:  CLRF   x60
0D142:  CLRF   x61
0D144:  CLRF   x62
0D146:  CLRF   x63
0D148:  CLRF   x64
0D14A:  CLRF   x65
0D14C:  CLRF   x66
0D14E:  CLRF   x67
0D150:  CLRF   x68
0D152:  CLRF   x69
0D154:  CLRF   x6A
0D156:  CLRF   x6B
0D158:  CLRF   x6C
0D15A:  CLRF   x6D
0D15C:  CLRF   x6E
0D15E:  CLRF   x6F
0D160:  CLRF   x70
0D162:  CLRF   x71
0D164:  CLRF   x72
0D166:  CLRF   x73
0D168:  CLRF   x74
0D16A:  CLRF   x75
0D16C:  CLRF   x76
0D16E:  CLRF   x77
0D170:  CLRF   x78
0D172:  CLRF   x79
0D174:  CLRF   x7A
0D176:  CLRF   x7B
0D178:  CLRF   x7C
0D17A:  CLRF   x7D
0D17C:  CLRF   x7E
0D17E:  CLRF   x7F
0D180:  CLRF   x80
0D182:  CLRF   x81
0D184:  CLRF   x82
0D186:  CLRF   x83
0D188:  CLRF   x84
0D18A:  CLRF   x85
0D18C:  CLRF   x86
0D18E:  CLRF   x87
0D190:  CLRF   x88
0D192:  CLRF   x89
0D194:  CLRF   x8A
0D196:  CLRF   x8B
0D198:  CLRF   x8C
0D19A:  CLRF   x8D
0D19C:  CLRF   x8E
0D19E:  CLRF   x8F
0D1A0:  CLRF   x90
0D1A2:  CLRF   x91
0D1A4:  CLRF   x92
0D1A6:  CLRF   x93
0D1A8:  CLRF   x94
0D1AA:  CLRF   x95
0D1AC:  CLRF   x96
0D1AE:  CLRF   x97
0D1B0:  CLRF   x98
0D1B2:  CLRF   x99
0D1B4:  CLRF   x9A
0D1B6:  CLRF   x9B
0D1B8:  CLRF   x9C
0D1BA:  CLRF   x9D
0D1BC:  CLRF   x9E
0D1BE:  CLRF   x9F
0D1C0:  CLRF   xA0
0D1C2:  CLRF   xA1
0D1C4:  CLRF   xA2
0D1C6:  CLRF   xA3
0D1C8:  CLRF   xA4
0D1CA:  CLRF   xA5
0D1CC:  CLRF   xA6
0D1CE:  CLRF   xA7
0D1D0:  CLRF   xA8
0D1D2:  CLRF   xA9
0D1D4:  CLRF   xAA
0D1D6:  CLRF   xAB
0D1D8:  CLRF   xAC
0D1DA:  CLRF   xAD
0D1DC:  CLRF   xAE
0D1DE:  CLRF   xAF
0D1E0:  CLRF   xB0
0D1E2:  CLRF   xB1
0D1E4:  CLRF   xB2
0D1E6:  CLRF   xB3
0D1E8:  CLRF   xB4
0D1EA:  CLRF   xB5
0D1EC:  CLRF   xB6
0D1EE:  CLRF   xB7
0D1F0:  CLRF   xB8
0D1F2:  CLRF   xB9
0D1F4:  CLRF   xBA
0D1F6:  CLRF   xBB
0D1F8:  CLRF   xBC
0D1FA:  CLRF   xBD
0D1FC:  CLRF   xBE
0D1FE:  CLRF   xBF
0D200:  CLRF   xC0
0D202:  CLRF   xC1
0D204:  CLRF   xC2
0D206:  CLRF   xC3
0D208:  CLRF   xC4
0D20A:  CLRF   xC5
0D20C:  CLRF   xC6
0D20E:  CLRF   xC7
0D210:  CLRF   xC8
0D212:  CLRF   xC9
0D214:  CLRF   xCA
0D216:  CLRF   xCB
0D218:  CLRF   xCC
0D21A:  CLRF   xCD
0D21C:  CLRF   xCE
0D21E:  CLRF   xCF
0D220:  CLRF   xD0
0D222:  CLRF   xD1
0D224:  CLRF   xD2
0D226:  CLRF   xD3
0D228:  CLRF   xD4
0D22A:  CLRF   xD5
0D22C:  CLRF   xD6
0D22E:  CLRF   xD7
0D230:  CLRF   xD8
0D232:  CLRF   xD9
0D234:  CLRF   xDA
0D236:  CLRF   xDB
0D238:  CLRF   xDC
0D23A:  CLRF   xDD
0D23C:  CLRF   xDE
0D23E:  CLRF   xDF
0D240:  CLRF   xE0
0D242:  CLRF   xE1
0D244:  CLRF   xE2
0D246:  CLRF   xE3
0D248:  CLRF   xE4
0D24A:  CLRF   xE5
0D24C:  CLRF   xE6
0D24E:  CLRF   xE7
0D250:  CLRF   xE8
0D252:  CLRF   xE9
0D254:  CLRF   xEA
0D256:  CLRF   xEB
0D258:  CLRF   xEC
0D25A:  CLRF   xED
0D25C:  CLRF   xEE
0D25E:  CLRF   xEF
0D260:  CLRF   xF0
0D262:  CLRF   xF1
0D264:  CLRF   xF2
0D266:  CLRF   xF3
0D268:  CLRF   xF4
0D26A:  CLRF   xF5
0D26C:  CLRF   xF6
0D26E:  CLRF   xF7
0D270:  CLRF   xF8
0D272:  CLRF   xF9
0D274:  CLRF   xFA
0D276:  CLRF   xFB
0D278:  CLRF   xFC
0D27A:  CLRF   xFD
0D27C:  CLRF   xFE
0D27E:  CLRF   xFF
0D280:  MOVLB  9
0D282:  CLRF   x00
0D284:  CLRF   x01
0D286:  CLRF   x02
0D288:  CLRF   x03
0D28A:  CLRF   x04
0D28C:  CLRF   x05
0D28E:  CLRF   x06
0D290:  CLRF   x07
0D292:  CLRF   x08
0D294:  CLRF   x09
0D296:  CLRF   x0A
0D298:  CLRF   x0B
0D29A:  CLRF   x0C
0D29C:  CLRF   x0D
0D29E:  CLRF   x0E
0D2A0:  CLRF   x0F
0D2A2:  CLRF   x10
0D2A4:  CLRF   x11
0D2A6:  CLRF   x12
0D2A8:  CLRF   x13
0D2AA:  CLRF   x14
0D2AC:  CLRF   x15
0D2AE:  CLRF   x16
0D2B0:  CLRF   x17
0D2B2:  CLRF   x18
0D2B4:  CLRF   x19
0D2B6:  CLRF   x1A
0D2B8:  CLRF   x1B
0D2BA:  CLRF   x1C
0D2BC:  CLRF   x1D
0D2BE:  CLRF   x1E
0D2C0:  CLRF   x1F
0D2C2:  CLRF   x20
0D2C4:  CLRF   x21
0D2C6:  CLRF   x22
0D2C8:  CLRF   x23
0D2CA:  CLRF   x24
0D2CC:  CLRF   x25
0D2CE:  CLRF   x26
0D2D0:  CLRF   x27
0D2D2:  CLRF   x28
0D2D4:  CLRF   x29
0D2D6:  CLRF   x2A
0D2D8:  CLRF   x2B
0D2DA:  CLRF   x2C
0D2DC:  CLRF   x2D
0D2DE:  CLRF   x2E
0D2E0:  CLRF   x2F
0D2E2:  CLRF   x30
0D2E4:  CLRF   x31
0D2E6:  CLRF   x32
0D2E8:  CLRF   x33
0D2EA:  CLRF   x34
0D2EC:  CLRF   x35
0D2EE:  CLRF   x36
0D2F0:  CLRF   x37
0D2F2:  CLRF   x38
0D2F4:  CLRF   x39
0D2F6:  CLRF   x3A
0D2F8:  CLRF   x3B
0D2FA:  CLRF   x3C
0D2FC:  CLRF   x3D
0D2FE:  CLRF   x3E
0D300:  CLRF   x3F
0D302:  CLRF   x40
0D304:  CLRF   x41
0D306:  CLRF   x42
0D308:  CLRF   x43
0D30A:  CLRF   x44
0D30C:  CLRF   x45
0D30E:  CLRF   x46
0D310:  CLRF   x47
0D312:  CLRF   x48
0D314:  CLRF   x49
0D316:  CLRF   x4A
0D318:  CLRF   x4B
0D31A:  CLRF   x4C
0D31C:  CLRF   x4D
0D31E:  CLRF   x4E
0D320:  CLRF   x4F
0D322:  CLRF   x50
0D324:  CLRF   x51
0D326:  CLRF   x52
0D328:  CLRF   x53
0D32A:  CLRF   x54
0D32C:  CLRF   x55
0D32E:  CLRF   x56
0D330:  CLRF   x57
0D332:  CLRF   x58
0D334:  CLRF   x59
0D336:  CLRF   x5A
0D338:  CLRF   x5B
0D33A:  CLRF   x5C
0D33C:  CLRF   x5D
0D33E:  CLRF   x5E
0D340:  CLRF   x5F
0D342:  CLRF   x60
0D344:  CLRF   x61
0D346:  CLRF   x62
0D348:  CLRF   x63
0D34A:  CLRF   x64
0D34C:  CLRF   x65
0D34E:  CLRF   x66
0D350:  CLRF   x67
0D352:  CLRF   x68
0D354:  CLRF   x69
0D356:  CLRF   x6A
0D358:  CLRF   x6B
0D35A:  CLRF   x6C
0D35C:  CLRF   x6D
0D35E:  CLRF   x6E
0D360:  CLRF   x6F
0D362:  CLRF   x70
0D364:  CLRF   x71
0D366:  CLRF   x72
0D368:  CLRF   x73
0D36A:  CLRF   x74
0D36C:  CLRF   x75
0D36E:  CLRF   x76
0D370:  CLRF   x77
0D372:  CLRF   x78
0D374:  CLRF   x79
0D376:  CLRF   x7A
0D378:  CLRF   x7B
0D37A:  CLRF   x7C
0D37C:  CLRF   x7D
0D37E:  CLRF   x7E
0D380:  CLRF   x7F
0D382:  CLRF   x80
0D384:  CLRF   x81
0D386:  CLRF   x82
0D388:  CLRF   x83
0D38A:  CLRF   x84
0D38C:  CLRF   x85
0D38E:  CLRF   x86
0D390:  CLRF   x87
0D392:  CLRF   x88
0D394:  CLRF   x89
0D396:  CLRF   x8A
0D398:  CLRF   x8B
0D39A:  CLRF   x8C
0D39C:  CLRF   x8D
0D39E:  CLRF   x8E
0D3A0:  CLRF   x8F
0D3A2:  CLRF   x90
0D3A4:  CLRF   x91
0D3A6:  CLRF   x92
0D3A8:  CLRF   x93
0D3AA:  CLRF   x94
0D3AC:  CLRF   x95
0D3AE:  CLRF   x96
0D3B0:  CLRF   x97
0D3B2:  CLRF   x98
0D3B4:  CLRF   x99
0D3B6:  CLRF   x9A
0D3B8:  CLRF   x9B
0D3BA:  CLRF   x9C
0D3BC:  CLRF   x9D
0D3BE:  CLRF   x9E
0D3C0:  CLRF   x9F
0D3C2:  CLRF   xA0
0D3C4:  CLRF   xA1
0D3C6:  CLRF   xA2
0D3C8:  CLRF   xA3
0D3CA:  CLRF   xA4
0D3CC:  CLRF   xA5
0D3CE:  CLRF   xA6
0D3D0:  CLRF   xA7
0D3D2:  CLRF   xA8
0D3D4:  CLRF   xA9
0D3D6:  CLRF   xAA
0D3D8:  CLRF   xAB
0D3DA:  CLRF   xAC
0D3DC:  CLRF   xAD
0D3DE:  CLRF   xAE
0D3E0:  CLRF   xAF
0D3E2:  CLRF   xB0
0D3E4:  CLRF   xB1
0D3E6:  CLRF   xB2
0D3E8:  CLRF   xB3
0D3EA:  CLRF   xB4
0D3EC:  CLRF   xB5
0D3EE:  CLRF   xB6
0D3F0:  CLRF   xB7
0D3F2:  CLRF   xB8
0D3F4:  CLRF   xB9
0D3F6:  CLRF   xBA
0D3F8:  CLRF   xBB
0D3FA:  CLRF   xBC
0D3FC:  CLRF   xBD
0D3FE:  CLRF   xBE
0D400:  CLRF   xBF
0D402:  CLRF   xC0
0D404:  CLRF   xC1
0D406:  CLRF   xC2
0D408:  CLRF   xC3
0D40A:  CLRF   xC4
0D40C:  CLRF   xC5
0D40E:  CLRF   xC6
0D410:  CLRF   xC7
0D412:  CLRF   xC8
0D414:  CLRF   xC9
0D416:  CLRF   xCA
0D418:  CLRF   xCB
0D41A:  CLRF   xCC
0D41C:  CLRF   xCD
0D41E:  CLRF   xCE
0D420:  CLRF   xCF
0D422:  CLRF   xD0
0D424:  CLRF   xD1
0D426:  CLRF   xD2
0D428:  CLRF   xD3
0D42A:  CLRF   xD4
0D42C:  CLRF   xD5
0D42E:  CLRF   xD6
0D430:  CLRF   xD7
0D432:  CLRF   xD8
0D434:  CLRF   xD9
0D436:  CLRF   xDA
0D438:  CLRF   xDB
0D43A:  CLRF   xDC
0D43C:  CLRF   xDD
0D43E:  CLRF   xDE
0D440:  CLRF   xDF
0D442:  CLRF   xE0
0D444:  CLRF   xE1
0D446:  CLRF   xE2
0D448:  CLRF   xE3
0D44A:  CLRF   xE4
0D44C:  CLRF   xE5
0D44E:  CLRF   xE6
0D450:  CLRF   xE7
0D452:  CLRF   xE8
0D454:  CLRF   xE9
0D456:  CLRF   xEA
0D458:  CLRF   xEB
0D45A:  CLRF   xEC
0D45C:  CLRF   xED
0D45E:  CLRF   xEE
0D460:  CLRF   xEF
0D462:  CLRF   xF0
0D464:  CLRF   xF1
0D466:  CLRF   xF2
0D468:  CLRF   xF3
0D46A:  CLRF   xF4
0D46C:  CLRF   xF5
0D46E:  CLRF   xF6
0D470:  CLRF   xF7
0D472:  CLRF   xF8
0D474:  CLRF   xF9
0D476:  CLRF   xFA
0D478:  CLRF   xFB
0D47A:  CLRF   xFC
0D47C:  CLRF   xFD
0D47E:  CLRF   xFE
0D480:  CLRF   xFF
0D482:  MOVLB  A
0D484:  CLRF   x00
0D486:  CLRF   x01
0D488:  CLRF   x02
0D48A:  CLRF   x03
0D48C:  CLRF   x04
0D48E:  CLRF   x05
0D490:  CLRF   x06
0D492:  CLRF   x07
0D494:  CLRF   x08
0D496:  CLRF   x09
0D498:  CLRF   x0A
0D49A:  CLRF   x0B
0D49C:  CLRF   x0C
0D49E:  CLRF   x0D
0D4A0:  CLRF   x0E
0D4A2:  CLRF   x0F
0D4A4:  CLRF   x10
0D4A6:  CLRF   x11
0D4A8:  CLRF   x12
0D4AA:  CLRF   x13
0D4AC:  CLRF   x14
0D4AE:  CLRF   x15
0D4B0:  CLRF   x16
0D4B2:  CLRF   x17
0D4B4:  CLRF   x18
0D4B6:  CLRF   x19
0D4B8:  CLRF   x1A
0D4BA:  CLRF   x1B
0D4BC:  CLRF   x1C
0D4BE:  CLRF   x1D
0D4C0:  CLRF   x1E
0D4C2:  CLRF   x1F
0D4C4:  CLRF   x20
0D4C6:  CLRF   x21
0D4C8:  CLRF   x22
0D4CA:  CLRF   x23
0D4CC:  CLRF   x24
0D4CE:  CLRF   x25
0D4D0:  CLRF   x26
0D4D2:  CLRF   x27
0D4D4:  CLRF   x28
0D4D6:  CLRF   x29
0D4D8:  CLRF   x2A
0D4DA:  CLRF   x2B
0D4DC:  CLRF   x2C
0D4DE:  CLRF   x2D
0D4E0:  CLRF   x2E
0D4E2:  CLRF   x2F
0D4E4:  CLRF   x30
0D4E6:  CLRF   x31
0D4E8:  CLRF   x32
0D4EA:  CLRF   x33
0D4EC:  CLRF   x34
0D4EE:  CLRF   x35
0D4F0:  CLRF   x36
0D4F2:  CLRF   x37
0D4F4:  CLRF   x38
0D4F6:  CLRF   x39
0D4F8:  CLRF   x3A
0D4FA:  CLRF   x3B
0D4FC:  CLRF   x3C
0D4FE:  CLRF   x3D
0D500:  CLRF   x3E
0D502:  CLRF   x3F
0D504:  CLRF   x40
0D506:  CLRF   x41
0D508:  CLRF   x42
....................     port2.port_num = 2; 
0D50A:  MOVLW  02
0D50C:  MOVLB  6
0D50E:  MOVWF  x43
....................     port2.sweep_step = 0;
0D510:  CLRF   x45
0D512:  CLRF   x44
....................     port2.active = 1;
0D514:  MOVLB  A
0D516:  BSF    x42.0
.................... 
....................     int16 count = 1;
....................     iv_env_t measured_data = create_meas_data();
0D518:  CLRF   x44
0D51A:  MOVLW  01
0D51C:  MOVWF  x43
0D51E:  MOVLB  0
0D520:  CALL   78F6
0D524:  MOVFF  02,03
0D528:  MOVF   01,W
0D52A:  MOVWF  FE1
0D52C:  MOVFF  03,FE2
0D530:  MOVLW  0A
0D532:  MOVWF  FEA
0D534:  MOVLW  45
0D536:  MOVWF  FE9
0D538:  MOVLW  0C
0D53A:  MOVWF  01
0D53C:  MOVFF  FE6,FEE
0D540:  DECFSZ 01,F
0D542:  GOTO   D53C
.................... 
....................     while (port1.active || port2.active)
0D546:  MOVLB  6
0D548:  BTFSS  x42.0
0D54A:  BRA    D552
0D54C:  MOVLB  0
0D54E:  GOTO   D562
0D552:  MOVLB  0
0D554:  MOVLB  A
0D556:  BTFSC  x42.0
0D558:  BRA    D560
0D55A:  MOVLB  0
0D55C:  GOTO   D846
0D560:  MOVLB  0
....................     {
....................         // 出力設定
....................         if (port1.active) {
0D562:  MOVLB  6
0D564:  BTFSC  x42.0
0D566:  BRA    D56E
0D568:  MOVLB  0
0D56A:  GOTO   D580
0D56E:  MOVLB  0
....................             mcp4901_1_write(count);
0D570:  MOVFF  A44,A76
0D574:  MOVFF  A43,A75
0D578:  CALL   2352
....................         } else {
0D57C:  GOTO   D58C
....................             mcp4901_1_write(0);  // 閾値到達後は0出力
0D580:  MOVLB  A
0D582:  CLRF   x76
0D584:  CLRF   x75
0D586:  MOVLB  0
0D588:  CALL   2352
....................         }
.................... 
....................         if (port2.active) {
0D58C:  MOVLB  A
0D58E:  BTFSC  x42.0
0D590:  BRA    D598
0D592:  MOVLB  0
0D594:  GOTO   D5AA
0D598:  MOVLB  0
....................             mcp4901_2_write(count);
0D59A:  MOVFF  A44,A76
0D59E:  MOVFF  A43,A75
0D5A2:  CALL   2394
....................         } else {
0D5A6:  GOTO   D5B6
....................             mcp4901_2_write(0);
0D5AA:  MOVLB  A
0D5AC:  CLRF   x76
0D5AE:  CLRF   x75
0D5B0:  MOVLB  0
0D5B2:  CALL   2394
....................         }
.................... 
....................         delay_us(100);
0D5B6:  MOVLW  85
0D5B8:  MOVWF  00
0D5BA:  DECFSZ 00,F
0D5BC:  BRA    D5BA
.................... 
....................         // データ取得
....................         if (port1.active) {
0D5BE:  MOVLB  6
0D5C0:  BTFSC  x42.0
0D5C2:  BRA    D5CA
0D5C4:  MOVLB  0
0D5C6:  GOTO   D6EA
0D5CA:  MOVLB  0
....................             port1.data_buffer[count].voltage = ad7490_read(ADC_CIGS1_AMP);
0D5CC:  MOVLB  A
0D5CE:  RLCF   x43,W
0D5D0:  MOVWF  02
0D5D2:  RLCF   x44,W
0D5D4:  MOVWF  03
0D5D6:  RLCF   02,F
0D5D8:  RLCF   03,F
0D5DA:  MOVLW  FC
0D5DC:  ANDWF  02,F
0D5DE:  MOVF   02,W
0D5E0:  ADDLW  46
0D5E2:  MOVWF  01
0D5E4:  MOVLW  02
0D5E6:  ADDWFC 03,F
0D5E8:  MOVF   01,W
0D5EA:  MOVWF  x54
0D5EC:  MOVFF  03,A55
0D5F0:  MOVLW  02
0D5F2:  MOVWF  x87
0D5F4:  MOVLB  0
0D5F6:  CALL   1F7E
0D5FA:  MOVFF  A55,FEA
0D5FE:  MOVFF  A54,FE9
0D602:  MOVFF  02,FEC
0D606:  MOVF   FED,F
0D608:  MOVFF  01,FEF
....................             port1.data_buffer[count].current = ad7490_read(ADC_CIGS1_CURR);
0D60C:  MOVLB  A
0D60E:  RLCF   x43,W
0D610:  MOVWF  02
0D612:  RLCF   x44,W
0D614:  MOVWF  03
0D616:  RLCF   02,F
0D618:  RLCF   03,F
0D61A:  MOVLW  FC
0D61C:  ANDWF  02,F
0D61E:  MOVF   02,W
0D620:  ADDLW  03
0D622:  MOVWF  x52
0D624:  MOVLW  00
0D626:  ADDWFC 03,W
0D628:  MOVWF  x53
0D62A:  MOVLW  02
0D62C:  ADDWF  x52,W
0D62E:  MOVWF  01
0D630:  MOVLW  00
0D632:  ADDWFC x53,W
0D634:  MOVWF  03
0D636:  MOVF   01,W
0D638:  ADDLW  43
0D63A:  MOVWF  01
0D63C:  MOVLW  02
0D63E:  ADDWFC 03,F
0D640:  MOVF   01,W
0D642:  MOVWF  x52
0D644:  MOVFF  03,A53
0D648:  MOVLW  01
0D64A:  MOVWF  x87
0D64C:  MOVLB  0
0D64E:  CALL   1F7E
0D652:  MOVFF  A53,FEA
0D656:  MOVFF  A52,FE9
0D65A:  MOVFF  02,FEC
0D65E:  MOVF   FED,F
0D660:  MOVFF  01,FEF
....................             port1.sweep_step = count + 1;
0D664:  MOVLW  01
0D666:  MOVLB  A
0D668:  ADDWF  x43,W
0D66A:  MOVLB  2
0D66C:  MOVWF  x44
0D66E:  MOVLW  00
0D670:  MOVLB  A
0D672:  ADDWFC x44,W
0D674:  MOVLB  2
0D676:  MOVWF  x45
....................             if (port1.data_buffer[count].current < curr_limit) {
0D678:  MOVLB  A
0D67A:  RLCF   x43,W
0D67C:  MOVWF  02
0D67E:  RLCF   x44,W
0D680:  MOVWF  03
0D682:  RLCF   02,F
0D684:  RLCF   03,F
0D686:  MOVLW  FC
0D688:  ANDWF  02,F
0D68A:  MOVF   02,W
0D68C:  ADDLW  03
0D68E:  MOVWF  x52
0D690:  MOVLW  00
0D692:  ADDWFC 03,W
0D694:  MOVWF  x53
0D696:  MOVLW  02
0D698:  ADDWF  x52,W
0D69A:  MOVWF  01
0D69C:  MOVLW  00
0D69E:  ADDWFC x53,W
0D6A0:  MOVWF  03
0D6A2:  MOVF   01,W
0D6A4:  ADDLW  43
0D6A6:  MOVWF  FE9
0D6A8:  MOVLW  02
0D6AA:  ADDWFC 03,W
0D6AC:  MOVWF  FEA
0D6AE:  MOVFF  FEC,A53
0D6B2:  MOVF   FED,F
0D6B4:  MOVFF  FEF,A52
0D6B8:  MOVF   x53,W
0D6BA:  MOVLB  2
0D6BC:  SUBWF  x42,W
0D6BE:  BTFSC  FD8.0
0D6C0:  BRA    D6C8
0D6C2:  MOVLB  0
0D6C4:  GOTO   D6EA
0D6C8:  MOVLB  0
0D6CA:  BTFSS  FD8.2
0D6CC:  GOTO   D6E4
0D6D0:  MOVLB  2
0D6D2:  MOVF   x41,W
0D6D4:  MOVLB  A
0D6D6:  SUBWF  x52,W
0D6D8:  BTFSS  FD8.0
0D6DA:  BRA    D6E2
0D6DC:  MOVLB  0
0D6DE:  GOTO   D6EA
0D6E2:  MOVLB  0
....................                 port1.active = 0;  // 閾値到達で測定終了
0D6E4:  MOVLB  6
0D6E6:  BCF    x42.0
0D6E8:  MOVLB  0
....................             }
....................         }
.................... 
....................         if (port2.active) {
0D6EA:  MOVLB  A
0D6EC:  BTFSC  x42.0
0D6EE:  BRA    D6F6
0D6F0:  MOVLB  0
0D6F2:  GOTO   D816
0D6F6:  MOVLB  0
....................             port2.data_buffer[count].voltage = ad7490_read(ADC_CIGS2_AMP);
0D6F8:  MOVLB  A
0D6FA:  RLCF   x43,W
0D6FC:  MOVWF  02
0D6FE:  RLCF   x44,W
0D700:  MOVWF  03
0D702:  RLCF   02,F
0D704:  RLCF   03,F
0D706:  MOVLW  FC
0D708:  ANDWF  02,F
0D70A:  MOVF   02,W
0D70C:  ADDLW  46
0D70E:  MOVWF  01
0D710:  MOVLW  06
0D712:  ADDWFC 03,F
0D714:  MOVF   01,W
0D716:  MOVWF  x54
0D718:  MOVFF  03,A55
0D71C:  MOVLW  06
0D71E:  MOVWF  x87
0D720:  MOVLB  0
0D722:  CALL   1F7E
0D726:  MOVFF  A55,FEA
0D72A:  MOVFF  A54,FE9
0D72E:  MOVFF  02,FEC
0D732:  MOVF   FED,F
0D734:  MOVFF  01,FEF
....................             port2.data_buffer[count].current = ad7490_read(ADC_CIGS2_CURR);
0D738:  MOVLB  A
0D73A:  RLCF   x43,W
0D73C:  MOVWF  02
0D73E:  RLCF   x44,W
0D740:  MOVWF  03
0D742:  RLCF   02,F
0D744:  RLCF   03,F
0D746:  MOVLW  FC
0D748:  ANDWF  02,F
0D74A:  MOVF   02,W
0D74C:  ADDLW  03
0D74E:  MOVWF  x52
0D750:  MOVLW  00
0D752:  ADDWFC 03,W
0D754:  MOVWF  x53
0D756:  MOVLW  02
0D758:  ADDWF  x52,W
0D75A:  MOVWF  01
0D75C:  MOVLW  00
0D75E:  ADDWFC x53,W
0D760:  MOVWF  03
0D762:  MOVF   01,W
0D764:  ADDLW  43
0D766:  MOVWF  01
0D768:  MOVLW  06
0D76A:  ADDWFC 03,F
0D76C:  MOVF   01,W
0D76E:  MOVWF  x52
0D770:  MOVFF  03,A53
0D774:  MOVLW  05
0D776:  MOVWF  x87
0D778:  MOVLB  0
0D77A:  CALL   1F7E
0D77E:  MOVFF  A53,FEA
0D782:  MOVFF  A52,FE9
0D786:  MOVFF  02,FEC
0D78A:  MOVF   FED,F
0D78C:  MOVFF  01,FEF
....................             port2.sweep_step = count + 1;
0D790:  MOVLW  01
0D792:  MOVLB  A
0D794:  ADDWF  x43,W
0D796:  MOVLB  6
0D798:  MOVWF  x44
0D79A:  MOVLW  00
0D79C:  MOVLB  A
0D79E:  ADDWFC x44,W
0D7A0:  MOVLB  6
0D7A2:  MOVWF  x45
....................             if (port2.data_buffer[count].current < curr_limit) {
0D7A4:  MOVLB  A
0D7A6:  RLCF   x43,W
0D7A8:  MOVWF  02
0D7AA:  RLCF   x44,W
0D7AC:  MOVWF  03
0D7AE:  RLCF   02,F
0D7B0:  RLCF   03,F
0D7B2:  MOVLW  FC
0D7B4:  ANDWF  02,F
0D7B6:  MOVF   02,W
0D7B8:  ADDLW  03
0D7BA:  MOVWF  x52
0D7BC:  MOVLW  00
0D7BE:  ADDWFC 03,W
0D7C0:  MOVWF  x53
0D7C2:  MOVLW  02
0D7C4:  ADDWF  x52,W
0D7C6:  MOVWF  01
0D7C8:  MOVLW  00
0D7CA:  ADDWFC x53,W
0D7CC:  MOVWF  03
0D7CE:  MOVF   01,W
0D7D0:  ADDLW  43
0D7D2:  MOVWF  FE9
0D7D4:  MOVLW  06
0D7D6:  ADDWFC 03,W
0D7D8:  MOVWF  FEA
0D7DA:  MOVFF  FEC,A53
0D7DE:  MOVF   FED,F
0D7E0:  MOVFF  FEF,A52
0D7E4:  MOVF   x53,W
0D7E6:  MOVLB  2
0D7E8:  SUBWF  x42,W
0D7EA:  BTFSC  FD8.0
0D7EC:  BRA    D7F4
0D7EE:  MOVLB  0
0D7F0:  GOTO   D816
0D7F4:  MOVLB  0
0D7F6:  BTFSS  FD8.2
0D7F8:  GOTO   D810
0D7FC:  MOVLB  2
0D7FE:  MOVF   x41,W
0D800:  MOVLB  A
0D802:  SUBWF  x52,W
0D804:  BTFSS  FD8.0
0D806:  BRA    D80E
0D808:  MOVLB  0
0D80A:  GOTO   D816
0D80E:  MOVLB  0
....................                 port2.active = 0;
0D810:  MOVLB  A
0D812:  BCF    x42.0
0D814:  MOVLB  0
....................             }
....................         }
.................... 
....................         count++;
0D816:  MOVLB  A
0D818:  INCF   x43,F
0D81A:  BTFSC  FD8.2
0D81C:  INCF   x44,F
....................         if (count >= 255) {
0D81E:  MOVF   x44,F
0D820:  BTFSC  FD8.2
0D822:  BRA    D82A
0D824:  MOVLB  0
0D826:  GOTO   D83E
0D82A:  MOVLB  0
0D82C:  MOVLB  A
0D82E:  MOVF   x43,W
0D830:  SUBLW  FE
0D832:  BTFSS  FD8.0
0D834:  BRA    D83C
0D836:  MOVLB  0
0D838:  GOTO   D842
0D83C:  MOVLB  0
....................             break;
0D83E:  GOTO   D846
....................         }
0D842:  GOTO   D546
....................     }
.................... 
....................     // Print I-V data
....................     fprintf(PC, "Volt1,Curr1,Volt2,Curr2\r\n");
0D846:  MOVLW  E4
0D848:  MOVWF  FF6
0D84A:  MOVLW  05
0D84C:  MOVWF  FF7
0D84E:  MOVLW  00
0D850:  MOVWF  FF8
0D852:  CALL   1DC0
....................     for (int i = 0; i < count; i++) {
0D856:  MOVLB  A
0D858:  CLRF   x51
0D85A:  MOVLB  0
0D85C:  MOVLB  A
0D85E:  MOVF   x44,F
0D860:  BTFSC  FD8.2
0D862:  BRA    D86A
0D864:  MOVLB  0
0D866:  GOTO   D87E
0D86A:  MOVLB  0
0D86C:  MOVLB  A
0D86E:  MOVF   x43,W
0D870:  SUBWF  x51,W
0D872:  BTFSS  FD8.0
0D874:  BRA    D87C
0D876:  MOVLB  0
0D878:  GOTO   DA30
0D87C:  MOVLB  0
.................... 
....................         fprintf(PC, "%04LX,%04LX,%04LX,%04LX\r\n",
....................             port1.data_buffer[i].voltage, port1.data_buffer[i].current,
....................             port2.data_buffer[i].voltage, port2.data_buffer[i].current);
0D87E:  MOVLB  A
0D880:  CLRF   x5D
0D882:  MOVFF  A51,A5C
0D886:  CLRF   x5F
0D888:  MOVLW  04
0D88A:  MOVWF  x5E
0D88C:  MOVLB  0
0D88E:  CALL   C488
0D892:  MOVFF  02,03
0D896:  MOVF   01,W
0D898:  ADDLW  46
0D89A:  MOVWF  FE9
0D89C:  MOVLW  02
0D89E:  ADDWFC 03,W
0D8A0:  MOVWF  FEA
0D8A2:  MOVFF  FEC,A55
0D8A6:  MOVF   FED,F
0D8A8:  MOVFF  FEF,A54
0D8AC:  MOVLB  A
0D8AE:  CLRF   x5D
0D8B0:  MOVFF  A51,A5C
0D8B4:  CLRF   x5F
0D8B6:  MOVLW  04
0D8B8:  MOVWF  x5E
0D8BA:  MOVLB  0
0D8BC:  CALL   C488
0D8C0:  MOVFF  02,03
0D8C4:  MOVF   01,W
0D8C6:  ADDLW  03
0D8C8:  MOVLB  A
0D8CA:  MOVWF  x56
0D8CC:  MOVLW  00
0D8CE:  ADDWFC 03,W
0D8D0:  MOVWF  x57
0D8D2:  MOVLW  02
0D8D4:  ADDWF  x56,W
0D8D6:  MOVWF  01
0D8D8:  MOVLW  00
0D8DA:  ADDWFC x57,W
0D8DC:  MOVWF  03
0D8DE:  MOVF   01,W
0D8E0:  ADDLW  43
0D8E2:  MOVWF  FE9
0D8E4:  MOVLW  02
0D8E6:  ADDWFC 03,W
0D8E8:  MOVWF  FEA
0D8EA:  MOVFF  FEC,A57
0D8EE:  MOVF   FED,F
0D8F0:  MOVFF  FEF,A56
0D8F4:  CLRF   x5D
0D8F6:  MOVFF  A51,A5C
0D8FA:  CLRF   x5F
0D8FC:  MOVLW  04
0D8FE:  MOVWF  x5E
0D900:  MOVLB  0
0D902:  CALL   C488
0D906:  MOVFF  02,03
0D90A:  MOVF   01,W
0D90C:  ADDLW  46
0D90E:  MOVWF  FE9
0D910:  MOVLW  06
0D912:  ADDWFC 03,W
0D914:  MOVWF  FEA
0D916:  MOVFF  FEC,A5B
0D91A:  MOVF   FED,F
0D91C:  MOVFF  FEF,A5A
0D920:  MOVLB  A
0D922:  CLRF   x5D
0D924:  MOVFF  A51,A5C
0D928:  CLRF   x5F
0D92A:  MOVLW  04
0D92C:  MOVWF  x5E
0D92E:  MOVLB  0
0D930:  CALL   C488
0D934:  MOVFF  02,03
0D938:  MOVF   01,W
0D93A:  ADDLW  03
0D93C:  MOVLB  A
0D93E:  MOVWF  x5C
0D940:  MOVLW  00
0D942:  ADDWFC 03,W
0D944:  MOVWF  x5D
0D946:  MOVLW  02
0D948:  ADDWF  x5C,W
0D94A:  MOVWF  01
0D94C:  MOVLW  00
0D94E:  ADDWFC x5D,W
0D950:  MOVWF  03
0D952:  MOVF   01,W
0D954:  ADDLW  43
0D956:  MOVWF  FE9
0D958:  MOVLW  06
0D95A:  ADDWFC 03,W
0D95C:  MOVWF  FEA
0D95E:  MOVFF  FEC,A5D
0D962:  MOVF   FED,F
0D964:  MOVFF  FEF,A5C
0D968:  MOVFF  A55,AC8
0D96C:  MOVLW  37
0D96E:  MOVWF  xC9
0D970:  MOVLB  0
0D972:  CALL   200A
0D976:  MOVFF  A54,AC8
0D97A:  MOVLW  37
0D97C:  MOVLB  A
0D97E:  MOVWF  xC9
0D980:  MOVLB  0
0D982:  CALL   200A
0D986:  MOVLW  2C
0D988:  BTFSS  FA6.6
0D98A:  GOTO   D988
0D98E:  MOVLB  E
0D990:  MOVWF  xF9
0D992:  MOVFF  A57,AC8
0D996:  MOVLW  37
0D998:  MOVLB  A
0D99A:  MOVWF  xC9
0D99C:  MOVLB  0
0D99E:  CALL   200A
0D9A2:  MOVFF  A56,AC8
0D9A6:  MOVLW  37
0D9A8:  MOVLB  A
0D9AA:  MOVWF  xC9
0D9AC:  MOVLB  0
0D9AE:  CALL   200A
0D9B2:  MOVLW  2C
0D9B4:  BTFSS  FA6.6
0D9B6:  GOTO   D9B4
0D9BA:  MOVLB  E
0D9BC:  MOVWF  xF9
0D9BE:  MOVFF  A5B,AC8
0D9C2:  MOVLW  37
0D9C4:  MOVLB  A
0D9C6:  MOVWF  xC9
0D9C8:  MOVLB  0
0D9CA:  CALL   200A
0D9CE:  MOVFF  A5A,AC8
0D9D2:  MOVLW  37
0D9D4:  MOVLB  A
0D9D6:  MOVWF  xC9
0D9D8:  MOVLB  0
0D9DA:  CALL   200A
0D9DE:  MOVLW  2C
0D9E0:  BTFSS  FA6.6
0D9E2:  GOTO   D9E0
0D9E6:  MOVLB  E
0D9E8:  MOVWF  xF9
0D9EA:  MOVFF  A5D,AC8
0D9EE:  MOVLW  37
0D9F0:  MOVLB  A
0D9F2:  MOVWF  xC9
0D9F4:  MOVLB  0
0D9F6:  CALL   200A
0D9FA:  MOVFF  A5C,AC8
0D9FE:  MOVLW  37
0DA00:  MOVLB  A
0DA02:  MOVWF  xC9
0DA04:  MOVLB  0
0DA06:  CALL   200A
0DA0A:  MOVLW  0D
0DA0C:  BTFSS  FA6.6
0DA0E:  GOTO   DA0C
0DA12:  MOVLB  E
0DA14:  MOVWF  xF9
0DA16:  MOVLW  0A
0DA18:  MOVLB  0
0DA1A:  BTFSS  FA6.6
0DA1C:  GOTO   DA1A
0DA20:  MOVLB  E
0DA22:  MOVWF  xF9
0DA24:  MOVLB  0
0DA26:  MOVLB  A
0DA28:  INCF   x51,F
0DA2A:  MOVLB  0
0DA2C:  GOTO   D85C
....................     }
0DA30:  GOTO   DCC6 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit)
.................... {
....................     fprintf(PC, ".");
*
0A7A0:  MOVLW  2E
0A7A2:  BTFSS  FA6.6
0A7A4:  GOTO   A7A2
0A7A8:  MOVLB  E
0A7AA:  MOVWF  xF9
....................     
....................     // Enable both CIGS ports
....................     connect_port1();
0A7AC:  MOVLB  0
0A7AE:  CALL   4C06
....................     connect_port2();
0A7B2:  CALL   4C0E
....................     mcp4901_1_write(0); 
0A7B6:  MOVLB  A
0A7B8:  CLRF   x76
0A7BA:  CLRF   x75
0A7BC:  MOVLB  0
0A7BE:  CALL   2352
....................     mcp4901_2_write(0);
0A7C2:  MOVLB  A
0A7C4:  CLRF   x76
0A7C6:  CLRF   x75
0A7C8:  MOVLB  0
0A7CA:  CALL   2394
....................     delay_ms(100);
0A7CE:  MOVLW  64
0A7D0:  MOVLB  B
0A7D2:  MOVWF  xB4
0A7D4:  MOVLB  0
0A7D6:  CALL   1D92
....................     
....................     // Init Port1
....................     sweep_config_t port1 = {0};
0A7DA:  MOVLB  2
0A7DC:  CLRF   x59
0A7DE:  CLRF   x5A
0A7E0:  CLRF   x5B
0A7E2:  CLRF   x5C
0A7E4:  CLRF   x5D
0A7E6:  CLRF   x5E
0A7E8:  CLRF   x5F
0A7EA:  CLRF   x60
0A7EC:  CLRF   x61
0A7EE:  CLRF   x62
0A7F0:  CLRF   x63
0A7F2:  CLRF   x64
0A7F4:  CLRF   x65
0A7F6:  CLRF   x66
0A7F8:  CLRF   x67
0A7FA:  CLRF   x68
0A7FC:  CLRF   x69
0A7FE:  CLRF   x6A
0A800:  CLRF   x6B
0A802:  CLRF   x6C
0A804:  CLRF   x6D
0A806:  CLRF   x6E
0A808:  CLRF   x6F
0A80A:  CLRF   x70
0A80C:  CLRF   x71
0A80E:  CLRF   x72
0A810:  CLRF   x73
0A812:  CLRF   x74
0A814:  CLRF   x75
0A816:  CLRF   x76
0A818:  CLRF   x77
0A81A:  CLRF   x78
0A81C:  CLRF   x79
0A81E:  CLRF   x7A
0A820:  CLRF   x7B
0A822:  CLRF   x7C
0A824:  CLRF   x7D
0A826:  CLRF   x7E
0A828:  CLRF   x7F
0A82A:  CLRF   x80
0A82C:  CLRF   x81
0A82E:  CLRF   x82
0A830:  CLRF   x83
0A832:  CLRF   x84
0A834:  CLRF   x85
0A836:  CLRF   x86
0A838:  CLRF   x87
0A83A:  CLRF   x88
0A83C:  CLRF   x89
0A83E:  CLRF   x8A
0A840:  CLRF   x8B
0A842:  CLRF   x8C
0A844:  CLRF   x8D
0A846:  CLRF   x8E
0A848:  CLRF   x8F
0A84A:  CLRF   x90
0A84C:  CLRF   x91
0A84E:  CLRF   x92
0A850:  CLRF   x93
0A852:  CLRF   x94
0A854:  CLRF   x95
0A856:  CLRF   x96
0A858:  CLRF   x97
0A85A:  CLRF   x98
0A85C:  CLRF   x99
0A85E:  CLRF   x9A
0A860:  CLRF   x9B
0A862:  CLRF   x9C
0A864:  CLRF   x9D
0A866:  CLRF   x9E
0A868:  CLRF   x9F
0A86A:  CLRF   xA0
0A86C:  CLRF   xA1
0A86E:  CLRF   xA2
0A870:  CLRF   xA3
0A872:  CLRF   xA4
0A874:  CLRF   xA5
0A876:  CLRF   xA6
0A878:  CLRF   xA7
0A87A:  CLRF   xA8
0A87C:  CLRF   xA9
0A87E:  CLRF   xAA
0A880:  CLRF   xAB
0A882:  CLRF   xAC
0A884:  CLRF   xAD
0A886:  CLRF   xAE
0A888:  CLRF   xAF
0A88A:  CLRF   xB0
0A88C:  CLRF   xB1
0A88E:  CLRF   xB2
0A890:  CLRF   xB3
0A892:  CLRF   xB4
0A894:  CLRF   xB5
0A896:  CLRF   xB6
0A898:  CLRF   xB7
0A89A:  CLRF   xB8
0A89C:  CLRF   xB9
0A89E:  CLRF   xBA
0A8A0:  CLRF   xBB
0A8A2:  CLRF   xBC
0A8A4:  CLRF   xBD
0A8A6:  CLRF   xBE
0A8A8:  CLRF   xBF
0A8AA:  CLRF   xC0
0A8AC:  CLRF   xC1
0A8AE:  CLRF   xC2
0A8B0:  CLRF   xC3
0A8B2:  CLRF   xC4
0A8B4:  CLRF   xC5
0A8B6:  CLRF   xC6
0A8B8:  CLRF   xC7
0A8BA:  CLRF   xC8
0A8BC:  CLRF   xC9
0A8BE:  CLRF   xCA
0A8C0:  CLRF   xCB
0A8C2:  CLRF   xCC
0A8C4:  CLRF   xCD
0A8C6:  CLRF   xCE
0A8C8:  CLRF   xCF
0A8CA:  CLRF   xD0
0A8CC:  CLRF   xD1
0A8CE:  CLRF   xD2
0A8D0:  CLRF   xD3
0A8D2:  CLRF   xD4
0A8D4:  CLRF   xD5
0A8D6:  CLRF   xD6
0A8D8:  CLRF   xD7
0A8DA:  CLRF   xD8
0A8DC:  CLRF   xD9
0A8DE:  CLRF   xDA
0A8E0:  CLRF   xDB
0A8E2:  CLRF   xDC
0A8E4:  CLRF   xDD
0A8E6:  CLRF   xDE
0A8E8:  CLRF   xDF
0A8EA:  CLRF   xE0
0A8EC:  CLRF   xE1
0A8EE:  CLRF   xE2
0A8F0:  CLRF   xE3
0A8F2:  CLRF   xE4
0A8F4:  CLRF   xE5
0A8F6:  CLRF   xE6
0A8F8:  CLRF   xE7
0A8FA:  CLRF   xE8
0A8FC:  CLRF   xE9
0A8FE:  CLRF   xEA
0A900:  CLRF   xEB
0A902:  CLRF   xEC
0A904:  CLRF   xED
0A906:  CLRF   xEE
0A908:  CLRF   xEF
0A90A:  CLRF   xF0
0A90C:  CLRF   xF1
0A90E:  CLRF   xF2
0A910:  CLRF   xF3
0A912:  CLRF   xF4
0A914:  CLRF   xF5
0A916:  CLRF   xF6
0A918:  CLRF   xF7
0A91A:  CLRF   xF8
0A91C:  CLRF   xF9
0A91E:  CLRF   xFA
0A920:  CLRF   xFB
0A922:  CLRF   xFC
0A924:  CLRF   xFD
0A926:  CLRF   xFE
0A928:  CLRF   xFF
0A92A:  MOVLB  3
0A92C:  CLRF   x00
0A92E:  CLRF   x01
0A930:  CLRF   x02
0A932:  CLRF   x03
0A934:  CLRF   x04
0A936:  CLRF   x05
0A938:  CLRF   x06
0A93A:  CLRF   x07
0A93C:  CLRF   x08
0A93E:  CLRF   x09
0A940:  CLRF   x0A
0A942:  CLRF   x0B
0A944:  CLRF   x0C
0A946:  CLRF   x0D
0A948:  CLRF   x0E
0A94A:  CLRF   x0F
0A94C:  CLRF   x10
0A94E:  CLRF   x11
0A950:  CLRF   x12
0A952:  CLRF   x13
0A954:  CLRF   x14
0A956:  CLRF   x15
0A958:  CLRF   x16
0A95A:  CLRF   x17
0A95C:  CLRF   x18
0A95E:  CLRF   x19
0A960:  CLRF   x1A
0A962:  CLRF   x1B
0A964:  CLRF   x1C
0A966:  CLRF   x1D
0A968:  CLRF   x1E
0A96A:  CLRF   x1F
0A96C:  CLRF   x20
0A96E:  CLRF   x21
0A970:  CLRF   x22
0A972:  CLRF   x23
0A974:  CLRF   x24
0A976:  CLRF   x25
0A978:  CLRF   x26
0A97A:  CLRF   x27
0A97C:  CLRF   x28
0A97E:  CLRF   x29
0A980:  CLRF   x2A
0A982:  CLRF   x2B
0A984:  CLRF   x2C
0A986:  CLRF   x2D
0A988:  CLRF   x2E
0A98A:  CLRF   x2F
0A98C:  CLRF   x30
0A98E:  CLRF   x31
0A990:  CLRF   x32
0A992:  CLRF   x33
0A994:  CLRF   x34
0A996:  CLRF   x35
0A998:  CLRF   x36
0A99A:  CLRF   x37
0A99C:  CLRF   x38
0A99E:  CLRF   x39
0A9A0:  CLRF   x3A
0A9A2:  CLRF   x3B
0A9A4:  CLRF   x3C
0A9A6:  CLRF   x3D
0A9A8:  CLRF   x3E
0A9AA:  CLRF   x3F
0A9AC:  CLRF   x40
0A9AE:  CLRF   x41
0A9B0:  CLRF   x42
0A9B2:  CLRF   x43
0A9B4:  CLRF   x44
0A9B6:  CLRF   x45
0A9B8:  CLRF   x46
0A9BA:  CLRF   x47
0A9BC:  CLRF   x48
0A9BE:  CLRF   x49
0A9C0:  CLRF   x4A
0A9C2:  CLRF   x4B
0A9C4:  CLRF   x4C
0A9C6:  CLRF   x4D
0A9C8:  CLRF   x4E
0A9CA:  CLRF   x4F
0A9CC:  CLRF   x50
0A9CE:  CLRF   x51
0A9D0:  CLRF   x52
0A9D2:  CLRF   x53
0A9D4:  CLRF   x54
0A9D6:  CLRF   x55
0A9D8:  CLRF   x56
0A9DA:  CLRF   x57
0A9DC:  CLRF   x58
0A9DE:  CLRF   x59
0A9E0:  CLRF   x5A
0A9E2:  CLRF   x5B
0A9E4:  CLRF   x5C
0A9E6:  CLRF   x5D
0A9E8:  CLRF   x5E
0A9EA:  CLRF   x5F
0A9EC:  CLRF   x60
0A9EE:  CLRF   x61
0A9F0:  CLRF   x62
0A9F2:  CLRF   x63
0A9F4:  CLRF   x64
0A9F6:  CLRF   x65
0A9F8:  CLRF   x66
0A9FA:  CLRF   x67
0A9FC:  CLRF   x68
0A9FE:  CLRF   x69
0AA00:  CLRF   x6A
0AA02:  CLRF   x6B
0AA04:  CLRF   x6C
0AA06:  CLRF   x6D
0AA08:  CLRF   x6E
0AA0A:  CLRF   x6F
0AA0C:  CLRF   x70
0AA0E:  CLRF   x71
0AA10:  CLRF   x72
0AA12:  CLRF   x73
0AA14:  CLRF   x74
0AA16:  CLRF   x75
0AA18:  CLRF   x76
0AA1A:  CLRF   x77
0AA1C:  CLRF   x78
0AA1E:  CLRF   x79
0AA20:  CLRF   x7A
0AA22:  CLRF   x7B
0AA24:  CLRF   x7C
0AA26:  CLRF   x7D
0AA28:  CLRF   x7E
0AA2A:  CLRF   x7F
0AA2C:  CLRF   x80
0AA2E:  CLRF   x81
0AA30:  CLRF   x82
0AA32:  CLRF   x83
0AA34:  CLRF   x84
0AA36:  CLRF   x85
0AA38:  CLRF   x86
0AA3A:  CLRF   x87
0AA3C:  CLRF   x88
0AA3E:  CLRF   x89
0AA40:  CLRF   x8A
0AA42:  CLRF   x8B
0AA44:  CLRF   x8C
0AA46:  CLRF   x8D
0AA48:  CLRF   x8E
0AA4A:  CLRF   x8F
0AA4C:  CLRF   x90
0AA4E:  CLRF   x91
0AA50:  CLRF   x92
0AA52:  CLRF   x93
0AA54:  CLRF   x94
0AA56:  CLRF   x95
0AA58:  CLRF   x96
0AA5A:  CLRF   x97
0AA5C:  CLRF   x98
0AA5E:  CLRF   x99
0AA60:  CLRF   x9A
0AA62:  CLRF   x9B
0AA64:  CLRF   x9C
0AA66:  CLRF   x9D
0AA68:  CLRF   x9E
0AA6A:  CLRF   x9F
0AA6C:  CLRF   xA0
0AA6E:  CLRF   xA1
0AA70:  CLRF   xA2
0AA72:  CLRF   xA3
0AA74:  CLRF   xA4
0AA76:  CLRF   xA5
0AA78:  CLRF   xA6
0AA7A:  CLRF   xA7
0AA7C:  CLRF   xA8
0AA7E:  CLRF   xA9
0AA80:  CLRF   xAA
0AA82:  CLRF   xAB
0AA84:  CLRF   xAC
0AA86:  CLRF   xAD
0AA88:  CLRF   xAE
0AA8A:  CLRF   xAF
0AA8C:  CLRF   xB0
0AA8E:  CLRF   xB1
0AA90:  CLRF   xB2
0AA92:  CLRF   xB3
0AA94:  CLRF   xB4
0AA96:  CLRF   xB5
0AA98:  CLRF   xB6
0AA9A:  CLRF   xB7
0AA9C:  CLRF   xB8
0AA9E:  CLRF   xB9
0AAA0:  CLRF   xBA
0AAA2:  CLRF   xBB
0AAA4:  CLRF   xBC
0AAA6:  CLRF   xBD
0AAA8:  CLRF   xBE
0AAAA:  CLRF   xBF
0AAAC:  CLRF   xC0
0AAAE:  CLRF   xC1
0AAB0:  CLRF   xC2
0AAB2:  CLRF   xC3
0AAB4:  CLRF   xC4
0AAB6:  CLRF   xC5
0AAB8:  CLRF   xC6
0AABA:  CLRF   xC7
0AABC:  CLRF   xC8
0AABE:  CLRF   xC9
0AAC0:  CLRF   xCA
0AAC2:  CLRF   xCB
0AAC4:  CLRF   xCC
0AAC6:  CLRF   xCD
0AAC8:  CLRF   xCE
0AACA:  CLRF   xCF
0AACC:  CLRF   xD0
0AACE:  CLRF   xD1
0AAD0:  CLRF   xD2
0AAD2:  CLRF   xD3
0AAD4:  CLRF   xD4
0AAD6:  CLRF   xD5
0AAD8:  CLRF   xD6
0AADA:  CLRF   xD7
0AADC:  CLRF   xD8
0AADE:  CLRF   xD9
0AAE0:  CLRF   xDA
0AAE2:  CLRF   xDB
0AAE4:  CLRF   xDC
0AAE6:  CLRF   xDD
0AAE8:  CLRF   xDE
0AAEA:  CLRF   xDF
0AAEC:  CLRF   xE0
0AAEE:  CLRF   xE1
0AAF0:  CLRF   xE2
0AAF2:  CLRF   xE3
0AAF4:  CLRF   xE4
0AAF6:  CLRF   xE5
0AAF8:  CLRF   xE6
0AAFA:  CLRF   xE7
0AAFC:  CLRF   xE8
0AAFE:  CLRF   xE9
0AB00:  CLRF   xEA
0AB02:  CLRF   xEB
0AB04:  CLRF   xEC
0AB06:  CLRF   xED
0AB08:  CLRF   xEE
0AB0A:  CLRF   xEF
0AB0C:  CLRF   xF0
0AB0E:  CLRF   xF1
0AB10:  CLRF   xF2
0AB12:  CLRF   xF3
0AB14:  CLRF   xF4
0AB16:  CLRF   xF5
0AB18:  CLRF   xF6
0AB1A:  CLRF   xF7
0AB1C:  CLRF   xF8
0AB1E:  CLRF   xF9
0AB20:  CLRF   xFA
0AB22:  CLRF   xFB
0AB24:  CLRF   xFC
0AB26:  CLRF   xFD
0AB28:  CLRF   xFE
0AB2A:  CLRF   xFF
0AB2C:  MOVLB  4
0AB2E:  CLRF   x00
0AB30:  CLRF   x01
0AB32:  CLRF   x02
0AB34:  CLRF   x03
0AB36:  CLRF   x04
0AB38:  CLRF   x05
0AB3A:  CLRF   x06
0AB3C:  CLRF   x07
0AB3E:  CLRF   x08
0AB40:  CLRF   x09
0AB42:  CLRF   x0A
0AB44:  CLRF   x0B
0AB46:  CLRF   x0C
0AB48:  CLRF   x0D
0AB4A:  CLRF   x0E
0AB4C:  CLRF   x0F
0AB4E:  CLRF   x10
0AB50:  CLRF   x11
0AB52:  CLRF   x12
0AB54:  CLRF   x13
0AB56:  CLRF   x14
0AB58:  CLRF   x15
0AB5A:  CLRF   x16
0AB5C:  CLRF   x17
0AB5E:  CLRF   x18
0AB60:  CLRF   x19
0AB62:  CLRF   x1A
0AB64:  CLRF   x1B
0AB66:  CLRF   x1C
0AB68:  CLRF   x1D
0AB6A:  CLRF   x1E
0AB6C:  CLRF   x1F
0AB6E:  CLRF   x20
0AB70:  CLRF   x21
0AB72:  CLRF   x22
0AB74:  CLRF   x23
0AB76:  CLRF   x24
0AB78:  CLRF   x25
0AB7A:  CLRF   x26
0AB7C:  CLRF   x27
0AB7E:  CLRF   x28
0AB80:  CLRF   x29
0AB82:  CLRF   x2A
0AB84:  CLRF   x2B
0AB86:  CLRF   x2C
0AB88:  CLRF   x2D
0AB8A:  CLRF   x2E
0AB8C:  CLRF   x2F
0AB8E:  CLRF   x30
0AB90:  CLRF   x31
0AB92:  CLRF   x32
0AB94:  CLRF   x33
0AB96:  CLRF   x34
0AB98:  CLRF   x35
0AB9A:  CLRF   x36
0AB9C:  CLRF   x37
0AB9E:  CLRF   x38
0ABA0:  CLRF   x39
0ABA2:  CLRF   x3A
0ABA4:  CLRF   x3B
0ABA6:  CLRF   x3C
0ABA8:  CLRF   x3D
0ABAA:  CLRF   x3E
0ABAC:  CLRF   x3F
0ABAE:  CLRF   x40
0ABB0:  CLRF   x41
0ABB2:  CLRF   x42
0ABB4:  CLRF   x43
0ABB6:  CLRF   x44
0ABB8:  CLRF   x45
0ABBA:  CLRF   x46
0ABBC:  CLRF   x47
0ABBE:  CLRF   x48
0ABC0:  CLRF   x49
0ABC2:  CLRF   x4A
0ABC4:  CLRF   x4B
0ABC6:  CLRF   x4C
0ABC8:  CLRF   x4D
0ABCA:  CLRF   x4E
0ABCC:  CLRF   x4F
0ABCE:  CLRF   x50
0ABD0:  CLRF   x51
0ABD2:  CLRF   x52
0ABD4:  CLRF   x53
0ABD6:  CLRF   x54
0ABD8:  CLRF   x55
0ABDA:  CLRF   x56
0ABDC:  CLRF   x57
0ABDE:  CLRF   x58
0ABE0:  CLRF   x59
0ABE2:  CLRF   x5A
0ABE4:  CLRF   x5B
0ABE6:  CLRF   x5C
0ABE8:  CLRF   x5D
0ABEA:  CLRF   x5E
0ABEC:  CLRF   x5F
0ABEE:  CLRF   x60
0ABF0:  CLRF   x61
0ABF2:  CLRF   x62
0ABF4:  CLRF   x63
0ABF6:  CLRF   x64
0ABF8:  CLRF   x65
0ABFA:  CLRF   x66
0ABFC:  CLRF   x67
0ABFE:  CLRF   x68
0AC00:  CLRF   x69
0AC02:  CLRF   x6A
0AC04:  CLRF   x6B
0AC06:  CLRF   x6C
0AC08:  CLRF   x6D
0AC0A:  CLRF   x6E
0AC0C:  CLRF   x6F
0AC0E:  CLRF   x70
0AC10:  CLRF   x71
0AC12:  CLRF   x72
0AC14:  CLRF   x73
0AC16:  CLRF   x74
0AC18:  CLRF   x75
0AC1A:  CLRF   x76
0AC1C:  CLRF   x77
0AC1E:  CLRF   x78
0AC20:  CLRF   x79
0AC22:  CLRF   x7A
0AC24:  CLRF   x7B
0AC26:  CLRF   x7C
0AC28:  CLRF   x7D
0AC2A:  CLRF   x7E
0AC2C:  CLRF   x7F
0AC2E:  CLRF   x80
0AC30:  CLRF   x81
0AC32:  CLRF   x82
0AC34:  CLRF   x83
0AC36:  CLRF   x84
0AC38:  CLRF   x85
0AC3A:  CLRF   x86
0AC3C:  CLRF   x87
0AC3E:  CLRF   x88
0AC40:  CLRF   x89
0AC42:  CLRF   x8A
0AC44:  CLRF   x8B
0AC46:  CLRF   x8C
0AC48:  CLRF   x8D
0AC4A:  CLRF   x8E
0AC4C:  CLRF   x8F
0AC4E:  CLRF   x90
0AC50:  CLRF   x91
0AC52:  CLRF   x92
0AC54:  CLRF   x93
0AC56:  CLRF   x94
0AC58:  CLRF   x95
0AC5A:  CLRF   x96
0AC5C:  CLRF   x97
0AC5E:  CLRF   x98
0AC60:  CLRF   x99
0AC62:  CLRF   x9A
0AC64:  CLRF   x9B
0AC66:  CLRF   x9C
0AC68:  CLRF   x9D
0AC6A:  CLRF   x9E
0AC6C:  CLRF   x9F
0AC6E:  CLRF   xA0
0AC70:  CLRF   xA1
0AC72:  CLRF   xA2
0AC74:  CLRF   xA3
0AC76:  CLRF   xA4
0AC78:  CLRF   xA5
0AC7A:  CLRF   xA6
0AC7C:  CLRF   xA7
0AC7E:  CLRF   xA8
0AC80:  CLRF   xA9
0AC82:  CLRF   xAA
0AC84:  CLRF   xAB
0AC86:  CLRF   xAC
0AC88:  CLRF   xAD
0AC8A:  CLRF   xAE
0AC8C:  CLRF   xAF
0AC8E:  CLRF   xB0
0AC90:  CLRF   xB1
0AC92:  CLRF   xB2
0AC94:  CLRF   xB3
0AC96:  CLRF   xB4
0AC98:  CLRF   xB5
0AC9A:  CLRF   xB6
0AC9C:  CLRF   xB7
0AC9E:  CLRF   xB8
0ACA0:  CLRF   xB9
0ACA2:  CLRF   xBA
0ACA4:  CLRF   xBB
0ACA6:  CLRF   xBC
0ACA8:  CLRF   xBD
0ACAA:  CLRF   xBE
0ACAC:  CLRF   xBF
0ACAE:  CLRF   xC0
0ACB0:  CLRF   xC1
0ACB2:  CLRF   xC2
0ACB4:  CLRF   xC3
0ACB6:  CLRF   xC4
0ACB8:  CLRF   xC5
0ACBA:  CLRF   xC6
0ACBC:  CLRF   xC7
0ACBE:  CLRF   xC8
0ACC0:  CLRF   xC9
0ACC2:  CLRF   xCA
0ACC4:  CLRF   xCB
0ACC6:  CLRF   xCC
0ACC8:  CLRF   xCD
0ACCA:  CLRF   xCE
0ACCC:  CLRF   xCF
0ACCE:  CLRF   xD0
0ACD0:  CLRF   xD1
0ACD2:  CLRF   xD2
0ACD4:  CLRF   xD3
0ACD6:  CLRF   xD4
0ACD8:  CLRF   xD5
0ACDA:  CLRF   xD6
0ACDC:  CLRF   xD7
0ACDE:  CLRF   xD8
0ACE0:  CLRF   xD9
0ACE2:  CLRF   xDA
0ACE4:  CLRF   xDB
0ACE6:  CLRF   xDC
0ACE8:  CLRF   xDD
0ACEA:  CLRF   xDE
0ACEC:  CLRF   xDF
0ACEE:  CLRF   xE0
0ACF0:  CLRF   xE1
0ACF2:  CLRF   xE2
0ACF4:  CLRF   xE3
0ACF6:  CLRF   xE4
0ACF8:  CLRF   xE5
0ACFA:  CLRF   xE6
0ACFC:  CLRF   xE7
0ACFE:  CLRF   xE8
0AD00:  CLRF   xE9
0AD02:  CLRF   xEA
0AD04:  CLRF   xEB
0AD06:  CLRF   xEC
0AD08:  CLRF   xED
0AD0A:  CLRF   xEE
0AD0C:  CLRF   xEF
0AD0E:  CLRF   xF0
0AD10:  CLRF   xF1
0AD12:  CLRF   xF2
0AD14:  CLRF   xF3
0AD16:  CLRF   xF4
0AD18:  CLRF   xF5
0AD1A:  CLRF   xF6
0AD1C:  CLRF   xF7
0AD1E:  CLRF   xF8
0AD20:  CLRF   xF9
0AD22:  CLRF   xFA
0AD24:  CLRF   xFB
0AD26:  CLRF   xFC
0AD28:  CLRF   xFD
0AD2A:  CLRF   xFE
0AD2C:  CLRF   xFF
0AD2E:  MOVLB  5
0AD30:  CLRF   x00
0AD32:  CLRF   x01
0AD34:  CLRF   x02
0AD36:  CLRF   x03
0AD38:  CLRF   x04
0AD3A:  CLRF   x05
0AD3C:  CLRF   x06
0AD3E:  CLRF   x07
0AD40:  CLRF   x08
0AD42:  CLRF   x09
0AD44:  CLRF   x0A
0AD46:  CLRF   x0B
0AD48:  CLRF   x0C
0AD4A:  CLRF   x0D
0AD4C:  CLRF   x0E
0AD4E:  CLRF   x0F
0AD50:  CLRF   x10
0AD52:  CLRF   x11
0AD54:  CLRF   x12
0AD56:  CLRF   x13
0AD58:  CLRF   x14
0AD5A:  CLRF   x15
0AD5C:  CLRF   x16
0AD5E:  CLRF   x17
0AD60:  CLRF   x18
0AD62:  CLRF   x19
0AD64:  CLRF   x1A
0AD66:  CLRF   x1B
0AD68:  CLRF   x1C
0AD6A:  CLRF   x1D
0AD6C:  CLRF   x1E
0AD6E:  CLRF   x1F
0AD70:  CLRF   x20
0AD72:  CLRF   x21
0AD74:  CLRF   x22
0AD76:  CLRF   x23
0AD78:  CLRF   x24
0AD7A:  CLRF   x25
0AD7C:  CLRF   x26
0AD7E:  CLRF   x27
0AD80:  CLRF   x28
0AD82:  CLRF   x29
0AD84:  CLRF   x2A
0AD86:  CLRF   x2B
0AD88:  CLRF   x2C
0AD8A:  CLRF   x2D
0AD8C:  CLRF   x2E
0AD8E:  CLRF   x2F
0AD90:  CLRF   x30
0AD92:  CLRF   x31
0AD94:  CLRF   x32
0AD96:  CLRF   x33
0AD98:  CLRF   x34
0AD9A:  CLRF   x35
0AD9C:  CLRF   x36
0AD9E:  CLRF   x37
0ADA0:  CLRF   x38
0ADA2:  CLRF   x39
0ADA4:  CLRF   x3A
0ADA6:  CLRF   x3B
0ADA8:  CLRF   x3C
0ADAA:  CLRF   x3D
0ADAC:  CLRF   x3E
0ADAE:  CLRF   x3F
0ADB0:  CLRF   x40
0ADB2:  CLRF   x41
0ADB4:  CLRF   x42
0ADB6:  CLRF   x43
0ADB8:  CLRF   x44
0ADBA:  CLRF   x45
0ADBC:  CLRF   x46
0ADBE:  CLRF   x47
0ADC0:  CLRF   x48
0ADC2:  CLRF   x49
0ADC4:  CLRF   x4A
0ADC6:  CLRF   x4B
0ADC8:  CLRF   x4C
0ADCA:  CLRF   x4D
0ADCC:  CLRF   x4E
0ADCE:  CLRF   x4F
0ADD0:  CLRF   x50
0ADD2:  CLRF   x51
0ADD4:  CLRF   x52
0ADD6:  CLRF   x53
0ADD8:  CLRF   x54
0ADDA:  CLRF   x55
0ADDC:  CLRF   x56
0ADDE:  CLRF   x57
0ADE0:  CLRF   x58
0ADE2:  CLRF   x59
0ADE4:  CLRF   x5A
0ADE6:  CLRF   x5B
0ADE8:  CLRF   x5C
0ADEA:  CLRF   x5D
0ADEC:  CLRF   x5E
0ADEE:  CLRF   x5F
0ADF0:  CLRF   x60
0ADF2:  CLRF   x61
0ADF4:  CLRF   x62
0ADF6:  CLRF   x63
0ADF8:  CLRF   x64
0ADFA:  CLRF   x65
0ADFC:  CLRF   x66
0ADFE:  CLRF   x67
0AE00:  CLRF   x68
0AE02:  CLRF   x69
0AE04:  CLRF   x6A
0AE06:  CLRF   x6B
0AE08:  CLRF   x6C
0AE0A:  CLRF   x6D
0AE0C:  CLRF   x6E
0AE0E:  CLRF   x6F
0AE10:  CLRF   x70
0AE12:  CLRF   x71
0AE14:  CLRF   x72
0AE16:  CLRF   x73
0AE18:  CLRF   x74
0AE1A:  CLRF   x75
0AE1C:  CLRF   x76
0AE1E:  CLRF   x77
0AE20:  CLRF   x78
0AE22:  CLRF   x79
0AE24:  CLRF   x7A
0AE26:  CLRF   x7B
0AE28:  CLRF   x7C
0AE2A:  CLRF   x7D
0AE2C:  CLRF   x7E
0AE2E:  CLRF   x7F
0AE30:  CLRF   x80
0AE32:  CLRF   x81
0AE34:  CLRF   x82
0AE36:  CLRF   x83
0AE38:  CLRF   x84
0AE3A:  CLRF   x85
0AE3C:  CLRF   x86
0AE3E:  CLRF   x87
0AE40:  CLRF   x88
0AE42:  CLRF   x89
0AE44:  CLRF   x8A
0AE46:  CLRF   x8B
0AE48:  CLRF   x8C
0AE4A:  CLRF   x8D
0AE4C:  CLRF   x8E
0AE4E:  CLRF   x8F
0AE50:  CLRF   x90
0AE52:  CLRF   x91
0AE54:  CLRF   x92
0AE56:  CLRF   x93
0AE58:  CLRF   x94
0AE5A:  CLRF   x95
0AE5C:  CLRF   x96
0AE5E:  CLRF   x97
0AE60:  CLRF   x98
0AE62:  CLRF   x99
0AE64:  CLRF   x9A
0AE66:  CLRF   x9B
0AE68:  CLRF   x9C
0AE6A:  CLRF   x9D
0AE6C:  CLRF   x9E
0AE6E:  CLRF   x9F
0AE70:  CLRF   xA0
0AE72:  CLRF   xA1
0AE74:  CLRF   xA2
0AE76:  CLRF   xA3
0AE78:  CLRF   xA4
0AE7A:  CLRF   xA5
0AE7C:  CLRF   xA6
0AE7E:  CLRF   xA7
0AE80:  CLRF   xA8
0AE82:  CLRF   xA9
0AE84:  CLRF   xAA
0AE86:  CLRF   xAB
0AE88:  CLRF   xAC
0AE8A:  CLRF   xAD
0AE8C:  CLRF   xAE
0AE8E:  CLRF   xAF
0AE90:  CLRF   xB0
0AE92:  CLRF   xB1
0AE94:  CLRF   xB2
0AE96:  CLRF   xB3
0AE98:  CLRF   xB4
0AE9A:  CLRF   xB5
0AE9C:  CLRF   xB6
0AE9E:  CLRF   xB7
0AEA0:  CLRF   xB8
0AEA2:  CLRF   xB9
0AEA4:  CLRF   xBA
0AEA6:  CLRF   xBB
0AEA8:  CLRF   xBC
0AEAA:  CLRF   xBD
0AEAC:  CLRF   xBE
0AEAE:  CLRF   xBF
0AEB0:  CLRF   xC0
0AEB2:  CLRF   xC1
0AEB4:  CLRF   xC2
0AEB6:  CLRF   xC3
0AEB8:  CLRF   xC4
0AEBA:  CLRF   xC5
0AEBC:  CLRF   xC6
0AEBE:  CLRF   xC7
0AEC0:  CLRF   xC8
0AEC2:  CLRF   xC9
0AEC4:  CLRF   xCA
0AEC6:  CLRF   xCB
0AEC8:  CLRF   xCC
0AECA:  CLRF   xCD
0AECC:  CLRF   xCE
0AECE:  CLRF   xCF
0AED0:  CLRF   xD0
0AED2:  CLRF   xD1
0AED4:  CLRF   xD2
0AED6:  CLRF   xD3
0AED8:  CLRF   xD4
0AEDA:  CLRF   xD5
0AEDC:  CLRF   xD6
0AEDE:  CLRF   xD7
0AEE0:  CLRF   xD8
0AEE2:  CLRF   xD9
0AEE4:  CLRF   xDA
0AEE6:  CLRF   xDB
0AEE8:  CLRF   xDC
0AEEA:  CLRF   xDD
0AEEC:  CLRF   xDE
0AEEE:  CLRF   xDF
0AEF0:  CLRF   xE0
0AEF2:  CLRF   xE1
0AEF4:  CLRF   xE2
0AEF6:  CLRF   xE3
0AEF8:  CLRF   xE4
0AEFA:  CLRF   xE5
0AEFC:  CLRF   xE6
0AEFE:  CLRF   xE7
0AF00:  CLRF   xE8
0AF02:  CLRF   xE9
0AF04:  CLRF   xEA
0AF06:  CLRF   xEB
0AF08:  CLRF   xEC
0AF0A:  CLRF   xED
0AF0C:  CLRF   xEE
0AF0E:  CLRF   xEF
0AF10:  CLRF   xF0
0AF12:  CLRF   xF1
0AF14:  CLRF   xF2
0AF16:  CLRF   xF3
0AF18:  CLRF   xF4
0AF1A:  CLRF   xF5
0AF1C:  CLRF   xF6
0AF1E:  CLRF   xF7
0AF20:  CLRF   xF8
0AF22:  CLRF   xF9
0AF24:  CLRF   xFA
0AF26:  CLRF   xFB
0AF28:  CLRF   xFC
0AF2A:  CLRF   xFD
0AF2C:  CLRF   xFE
0AF2E:  CLRF   xFF
0AF30:  MOVLB  6
0AF32:  CLRF   x00
0AF34:  CLRF   x01
0AF36:  CLRF   x02
0AF38:  CLRF   x03
0AF3A:  CLRF   x04
0AF3C:  CLRF   x05
0AF3E:  CLRF   x06
0AF40:  CLRF   x07
0AF42:  CLRF   x08
0AF44:  CLRF   x09
0AF46:  CLRF   x0A
0AF48:  CLRF   x0B
0AF4A:  CLRF   x0C
0AF4C:  CLRF   x0D
0AF4E:  CLRF   x0E
0AF50:  CLRF   x0F
0AF52:  CLRF   x10
0AF54:  CLRF   x11
0AF56:  CLRF   x12
0AF58:  CLRF   x13
0AF5A:  CLRF   x14
0AF5C:  CLRF   x15
0AF5E:  CLRF   x16
0AF60:  CLRF   x17
0AF62:  CLRF   x18
0AF64:  CLRF   x19
0AF66:  CLRF   x1A
0AF68:  CLRF   x1B
0AF6A:  CLRF   x1C
0AF6C:  CLRF   x1D
0AF6E:  CLRF   x1E
0AF70:  CLRF   x1F
0AF72:  CLRF   x20
0AF74:  CLRF   x21
0AF76:  CLRF   x22
0AF78:  CLRF   x23
0AF7A:  CLRF   x24
0AF7C:  CLRF   x25
0AF7E:  CLRF   x26
0AF80:  CLRF   x27
0AF82:  CLRF   x28
0AF84:  CLRF   x29
0AF86:  CLRF   x2A
0AF88:  CLRF   x2B
0AF8A:  CLRF   x2C
0AF8C:  CLRF   x2D
0AF8E:  CLRF   x2E
0AF90:  CLRF   x2F
0AF92:  CLRF   x30
0AF94:  CLRF   x31
0AF96:  CLRF   x32
0AF98:  CLRF   x33
0AF9A:  CLRF   x34
0AF9C:  CLRF   x35
0AF9E:  CLRF   x36
0AFA0:  CLRF   x37
0AFA2:  CLRF   x38
0AFA4:  CLRF   x39
0AFA6:  CLRF   x3A
0AFA8:  CLRF   x3B
0AFAA:  CLRF   x3C
0AFAC:  CLRF   x3D
0AFAE:  CLRF   x3E
0AFB0:  CLRF   x3F
0AFB2:  CLRF   x40
0AFB4:  CLRF   x41
0AFB6:  CLRF   x42
0AFB8:  CLRF   x43
0AFBA:  CLRF   x44
0AFBC:  CLRF   x45
0AFBE:  CLRF   x46
0AFC0:  CLRF   x47
0AFC2:  CLRF   x48
0AFC4:  CLRF   x49
0AFC6:  CLRF   x4A
0AFC8:  CLRF   x4B
0AFCA:  CLRF   x4C
0AFCC:  CLRF   x4D
0AFCE:  CLRF   x4E
0AFD0:  CLRF   x4F
0AFD2:  CLRF   x50
0AFD4:  CLRF   x51
0AFD6:  CLRF   x52
0AFD8:  CLRF   x53
0AFDA:  CLRF   x54
0AFDC:  CLRF   x55
0AFDE:  CLRF   x56
0AFE0:  CLRF   x57
0AFE2:  CLRF   x58
....................     port1.port_num = 1;
0AFE4:  MOVLW  01
0AFE6:  MOVLB  2
0AFE8:  MOVWF  x59
....................     port1.sweep_step = 0;
0AFEA:  CLRF   x5B
0AFEC:  CLRF   x5A
....................     port1.active = 1;
0AFEE:  MOVLB  6
0AFF0:  BSF    x58.0
.................... 
....................     // Init Port2
....................     sweep_config_t port2 = {0};
0AFF2:  CLRF   x59
0AFF4:  CLRF   x5A
0AFF6:  CLRF   x5B
0AFF8:  CLRF   x5C
0AFFA:  CLRF   x5D
0AFFC:  CLRF   x5E
0AFFE:  CLRF   x5F
0B000:  CLRF   x60
0B002:  CLRF   x61
0B004:  CLRF   x62
0B006:  CLRF   x63
0B008:  CLRF   x64
0B00A:  CLRF   x65
0B00C:  CLRF   x66
0B00E:  CLRF   x67
0B010:  CLRF   x68
0B012:  CLRF   x69
0B014:  CLRF   x6A
0B016:  CLRF   x6B
0B018:  CLRF   x6C
0B01A:  CLRF   x6D
0B01C:  CLRF   x6E
0B01E:  CLRF   x6F
0B020:  CLRF   x70
0B022:  CLRF   x71
0B024:  CLRF   x72
0B026:  CLRF   x73
0B028:  CLRF   x74
0B02A:  CLRF   x75
0B02C:  CLRF   x76
0B02E:  CLRF   x77
0B030:  CLRF   x78
0B032:  CLRF   x79
0B034:  CLRF   x7A
0B036:  CLRF   x7B
0B038:  CLRF   x7C
0B03A:  CLRF   x7D
0B03C:  CLRF   x7E
0B03E:  CLRF   x7F
0B040:  CLRF   x80
0B042:  CLRF   x81
0B044:  CLRF   x82
0B046:  CLRF   x83
0B048:  CLRF   x84
0B04A:  CLRF   x85
0B04C:  CLRF   x86
0B04E:  CLRF   x87
0B050:  CLRF   x88
0B052:  CLRF   x89
0B054:  CLRF   x8A
0B056:  CLRF   x8B
0B058:  CLRF   x8C
0B05A:  CLRF   x8D
0B05C:  CLRF   x8E
0B05E:  CLRF   x8F
0B060:  CLRF   x90
0B062:  CLRF   x91
0B064:  CLRF   x92
0B066:  CLRF   x93
0B068:  CLRF   x94
0B06A:  CLRF   x95
0B06C:  CLRF   x96
0B06E:  CLRF   x97
0B070:  CLRF   x98
0B072:  CLRF   x99
0B074:  CLRF   x9A
0B076:  CLRF   x9B
0B078:  CLRF   x9C
0B07A:  CLRF   x9D
0B07C:  CLRF   x9E
0B07E:  CLRF   x9F
0B080:  CLRF   xA0
0B082:  CLRF   xA1
0B084:  CLRF   xA2
0B086:  CLRF   xA3
0B088:  CLRF   xA4
0B08A:  CLRF   xA5
0B08C:  CLRF   xA6
0B08E:  CLRF   xA7
0B090:  CLRF   xA8
0B092:  CLRF   xA9
0B094:  CLRF   xAA
0B096:  CLRF   xAB
0B098:  CLRF   xAC
0B09A:  CLRF   xAD
0B09C:  CLRF   xAE
0B09E:  CLRF   xAF
0B0A0:  CLRF   xB0
0B0A2:  CLRF   xB1
0B0A4:  CLRF   xB2
0B0A6:  CLRF   xB3
0B0A8:  CLRF   xB4
0B0AA:  CLRF   xB5
0B0AC:  CLRF   xB6
0B0AE:  CLRF   xB7
0B0B0:  CLRF   xB8
0B0B2:  CLRF   xB9
0B0B4:  CLRF   xBA
0B0B6:  CLRF   xBB
0B0B8:  CLRF   xBC
0B0BA:  CLRF   xBD
0B0BC:  CLRF   xBE
0B0BE:  CLRF   xBF
0B0C0:  CLRF   xC0
0B0C2:  CLRF   xC1
0B0C4:  CLRF   xC2
0B0C6:  CLRF   xC3
0B0C8:  CLRF   xC4
0B0CA:  CLRF   xC5
0B0CC:  CLRF   xC6
0B0CE:  CLRF   xC7
0B0D0:  CLRF   xC8
0B0D2:  CLRF   xC9
0B0D4:  CLRF   xCA
0B0D6:  CLRF   xCB
0B0D8:  CLRF   xCC
0B0DA:  CLRF   xCD
0B0DC:  CLRF   xCE
0B0DE:  CLRF   xCF
0B0E0:  CLRF   xD0
0B0E2:  CLRF   xD1
0B0E4:  CLRF   xD2
0B0E6:  CLRF   xD3
0B0E8:  CLRF   xD4
0B0EA:  CLRF   xD5
0B0EC:  CLRF   xD6
0B0EE:  CLRF   xD7
0B0F0:  CLRF   xD8
0B0F2:  CLRF   xD9
0B0F4:  CLRF   xDA
0B0F6:  CLRF   xDB
0B0F8:  CLRF   xDC
0B0FA:  CLRF   xDD
0B0FC:  CLRF   xDE
0B0FE:  CLRF   xDF
0B100:  CLRF   xE0
0B102:  CLRF   xE1
0B104:  CLRF   xE2
0B106:  CLRF   xE3
0B108:  CLRF   xE4
0B10A:  CLRF   xE5
0B10C:  CLRF   xE6
0B10E:  CLRF   xE7
0B110:  CLRF   xE8
0B112:  CLRF   xE9
0B114:  CLRF   xEA
0B116:  CLRF   xEB
0B118:  CLRF   xEC
0B11A:  CLRF   xED
0B11C:  CLRF   xEE
0B11E:  CLRF   xEF
0B120:  CLRF   xF0
0B122:  CLRF   xF1
0B124:  CLRF   xF2
0B126:  CLRF   xF3
0B128:  CLRF   xF4
0B12A:  CLRF   xF5
0B12C:  CLRF   xF6
0B12E:  CLRF   xF7
0B130:  CLRF   xF8
0B132:  CLRF   xF9
0B134:  CLRF   xFA
0B136:  CLRF   xFB
0B138:  CLRF   xFC
0B13A:  CLRF   xFD
0B13C:  CLRF   xFE
0B13E:  CLRF   xFF
0B140:  MOVLB  7
0B142:  CLRF   x00
0B144:  CLRF   x01
0B146:  CLRF   x02
0B148:  CLRF   x03
0B14A:  CLRF   x04
0B14C:  CLRF   x05
0B14E:  CLRF   x06
0B150:  CLRF   x07
0B152:  CLRF   x08
0B154:  CLRF   x09
0B156:  CLRF   x0A
0B158:  CLRF   x0B
0B15A:  CLRF   x0C
0B15C:  CLRF   x0D
0B15E:  CLRF   x0E
0B160:  CLRF   x0F
0B162:  CLRF   x10
0B164:  CLRF   x11
0B166:  CLRF   x12
0B168:  CLRF   x13
0B16A:  CLRF   x14
0B16C:  CLRF   x15
0B16E:  CLRF   x16
0B170:  CLRF   x17
0B172:  CLRF   x18
0B174:  CLRF   x19
0B176:  CLRF   x1A
0B178:  CLRF   x1B
0B17A:  CLRF   x1C
0B17C:  CLRF   x1D
0B17E:  CLRF   x1E
0B180:  CLRF   x1F
0B182:  CLRF   x20
0B184:  CLRF   x21
0B186:  CLRF   x22
0B188:  CLRF   x23
0B18A:  CLRF   x24
0B18C:  CLRF   x25
0B18E:  CLRF   x26
0B190:  CLRF   x27
0B192:  CLRF   x28
0B194:  CLRF   x29
0B196:  CLRF   x2A
0B198:  CLRF   x2B
0B19A:  CLRF   x2C
0B19C:  CLRF   x2D
0B19E:  CLRF   x2E
0B1A0:  CLRF   x2F
0B1A2:  CLRF   x30
0B1A4:  CLRF   x31
0B1A6:  CLRF   x32
0B1A8:  CLRF   x33
0B1AA:  CLRF   x34
0B1AC:  CLRF   x35
0B1AE:  CLRF   x36
0B1B0:  CLRF   x37
0B1B2:  CLRF   x38
0B1B4:  CLRF   x39
0B1B6:  CLRF   x3A
0B1B8:  CLRF   x3B
0B1BA:  CLRF   x3C
0B1BC:  CLRF   x3D
0B1BE:  CLRF   x3E
0B1C0:  CLRF   x3F
0B1C2:  CLRF   x40
0B1C4:  CLRF   x41
0B1C6:  CLRF   x42
0B1C8:  CLRF   x43
0B1CA:  CLRF   x44
0B1CC:  CLRF   x45
0B1CE:  CLRF   x46
0B1D0:  CLRF   x47
0B1D2:  CLRF   x48
0B1D4:  CLRF   x49
0B1D6:  CLRF   x4A
0B1D8:  CLRF   x4B
0B1DA:  CLRF   x4C
0B1DC:  CLRF   x4D
0B1DE:  CLRF   x4E
0B1E0:  CLRF   x4F
0B1E2:  CLRF   x50
0B1E4:  CLRF   x51
0B1E6:  CLRF   x52
0B1E8:  CLRF   x53
0B1EA:  CLRF   x54
0B1EC:  CLRF   x55
0B1EE:  CLRF   x56
0B1F0:  CLRF   x57
0B1F2:  CLRF   x58
0B1F4:  CLRF   x59
0B1F6:  CLRF   x5A
0B1F8:  CLRF   x5B
0B1FA:  CLRF   x5C
0B1FC:  CLRF   x5D
0B1FE:  CLRF   x5E
0B200:  CLRF   x5F
0B202:  CLRF   x60
0B204:  CLRF   x61
0B206:  CLRF   x62
0B208:  CLRF   x63
0B20A:  CLRF   x64
0B20C:  CLRF   x65
0B20E:  CLRF   x66
0B210:  CLRF   x67
0B212:  CLRF   x68
0B214:  CLRF   x69
0B216:  CLRF   x6A
0B218:  CLRF   x6B
0B21A:  CLRF   x6C
0B21C:  CLRF   x6D
0B21E:  CLRF   x6E
0B220:  CLRF   x6F
0B222:  CLRF   x70
0B224:  CLRF   x71
0B226:  CLRF   x72
0B228:  CLRF   x73
0B22A:  CLRF   x74
0B22C:  CLRF   x75
0B22E:  CLRF   x76
0B230:  CLRF   x77
0B232:  CLRF   x78
0B234:  CLRF   x79
0B236:  CLRF   x7A
0B238:  CLRF   x7B
0B23A:  CLRF   x7C
0B23C:  CLRF   x7D
0B23E:  CLRF   x7E
0B240:  CLRF   x7F
0B242:  CLRF   x80
0B244:  CLRF   x81
0B246:  CLRF   x82
0B248:  CLRF   x83
0B24A:  CLRF   x84
0B24C:  CLRF   x85
0B24E:  CLRF   x86
0B250:  CLRF   x87
0B252:  CLRF   x88
0B254:  CLRF   x89
0B256:  CLRF   x8A
0B258:  CLRF   x8B
0B25A:  CLRF   x8C
0B25C:  CLRF   x8D
0B25E:  CLRF   x8E
0B260:  CLRF   x8F
0B262:  CLRF   x90
0B264:  CLRF   x91
0B266:  CLRF   x92
0B268:  CLRF   x93
0B26A:  CLRF   x94
0B26C:  CLRF   x95
0B26E:  CLRF   x96
0B270:  CLRF   x97
0B272:  CLRF   x98
0B274:  CLRF   x99
0B276:  CLRF   x9A
0B278:  CLRF   x9B
0B27A:  CLRF   x9C
0B27C:  CLRF   x9D
0B27E:  CLRF   x9E
0B280:  CLRF   x9F
0B282:  CLRF   xA0
0B284:  CLRF   xA1
0B286:  CLRF   xA2
0B288:  CLRF   xA3
0B28A:  CLRF   xA4
0B28C:  CLRF   xA5
0B28E:  CLRF   xA6
0B290:  CLRF   xA7
0B292:  CLRF   xA8
0B294:  CLRF   xA9
0B296:  CLRF   xAA
0B298:  CLRF   xAB
0B29A:  CLRF   xAC
0B29C:  CLRF   xAD
0B29E:  CLRF   xAE
0B2A0:  CLRF   xAF
0B2A2:  CLRF   xB0
0B2A4:  CLRF   xB1
0B2A6:  CLRF   xB2
0B2A8:  CLRF   xB3
0B2AA:  CLRF   xB4
0B2AC:  CLRF   xB5
0B2AE:  CLRF   xB6
0B2B0:  CLRF   xB7
0B2B2:  CLRF   xB8
0B2B4:  CLRF   xB9
0B2B6:  CLRF   xBA
0B2B8:  CLRF   xBB
0B2BA:  CLRF   xBC
0B2BC:  CLRF   xBD
0B2BE:  CLRF   xBE
0B2C0:  CLRF   xBF
0B2C2:  CLRF   xC0
0B2C4:  CLRF   xC1
0B2C6:  CLRF   xC2
0B2C8:  CLRF   xC3
0B2CA:  CLRF   xC4
0B2CC:  CLRF   xC5
0B2CE:  CLRF   xC6
0B2D0:  CLRF   xC7
0B2D2:  CLRF   xC8
0B2D4:  CLRF   xC9
0B2D6:  CLRF   xCA
0B2D8:  CLRF   xCB
0B2DA:  CLRF   xCC
0B2DC:  CLRF   xCD
0B2DE:  CLRF   xCE
0B2E0:  CLRF   xCF
0B2E2:  CLRF   xD0
0B2E4:  CLRF   xD1
0B2E6:  CLRF   xD2
0B2E8:  CLRF   xD3
0B2EA:  CLRF   xD4
0B2EC:  CLRF   xD5
0B2EE:  CLRF   xD6
0B2F0:  CLRF   xD7
0B2F2:  CLRF   xD8
0B2F4:  CLRF   xD9
0B2F6:  CLRF   xDA
0B2F8:  CLRF   xDB
0B2FA:  CLRF   xDC
0B2FC:  CLRF   xDD
0B2FE:  CLRF   xDE
0B300:  CLRF   xDF
0B302:  CLRF   xE0
0B304:  CLRF   xE1
0B306:  CLRF   xE2
0B308:  CLRF   xE3
0B30A:  CLRF   xE4
0B30C:  CLRF   xE5
0B30E:  CLRF   xE6
0B310:  CLRF   xE7
0B312:  CLRF   xE8
0B314:  CLRF   xE9
0B316:  CLRF   xEA
0B318:  CLRF   xEB
0B31A:  CLRF   xEC
0B31C:  CLRF   xED
0B31E:  CLRF   xEE
0B320:  CLRF   xEF
0B322:  CLRF   xF0
0B324:  CLRF   xF1
0B326:  CLRF   xF2
0B328:  CLRF   xF3
0B32A:  CLRF   xF4
0B32C:  CLRF   xF5
0B32E:  CLRF   xF6
0B330:  CLRF   xF7
0B332:  CLRF   xF8
0B334:  CLRF   xF9
0B336:  CLRF   xFA
0B338:  CLRF   xFB
0B33A:  CLRF   xFC
0B33C:  CLRF   xFD
0B33E:  CLRF   xFE
0B340:  CLRF   xFF
0B342:  MOVLB  8
0B344:  CLRF   x00
0B346:  CLRF   x01
0B348:  CLRF   x02
0B34A:  CLRF   x03
0B34C:  CLRF   x04
0B34E:  CLRF   x05
0B350:  CLRF   x06
0B352:  CLRF   x07
0B354:  CLRF   x08
0B356:  CLRF   x09
0B358:  CLRF   x0A
0B35A:  CLRF   x0B
0B35C:  CLRF   x0C
0B35E:  CLRF   x0D
0B360:  CLRF   x0E
0B362:  CLRF   x0F
0B364:  CLRF   x10
0B366:  CLRF   x11
0B368:  CLRF   x12
0B36A:  CLRF   x13
0B36C:  CLRF   x14
0B36E:  CLRF   x15
0B370:  CLRF   x16
0B372:  CLRF   x17
0B374:  CLRF   x18
0B376:  CLRF   x19
0B378:  CLRF   x1A
0B37A:  CLRF   x1B
0B37C:  CLRF   x1C
0B37E:  CLRF   x1D
0B380:  CLRF   x1E
0B382:  CLRF   x1F
0B384:  CLRF   x20
0B386:  CLRF   x21
0B388:  CLRF   x22
0B38A:  CLRF   x23
0B38C:  CLRF   x24
0B38E:  CLRF   x25
0B390:  CLRF   x26
0B392:  CLRF   x27
0B394:  CLRF   x28
0B396:  CLRF   x29
0B398:  CLRF   x2A
0B39A:  CLRF   x2B
0B39C:  CLRF   x2C
0B39E:  CLRF   x2D
0B3A0:  CLRF   x2E
0B3A2:  CLRF   x2F
0B3A4:  CLRF   x30
0B3A6:  CLRF   x31
0B3A8:  CLRF   x32
0B3AA:  CLRF   x33
0B3AC:  CLRF   x34
0B3AE:  CLRF   x35
0B3B0:  CLRF   x36
0B3B2:  CLRF   x37
0B3B4:  CLRF   x38
0B3B6:  CLRF   x39
0B3B8:  CLRF   x3A
0B3BA:  CLRF   x3B
0B3BC:  CLRF   x3C
0B3BE:  CLRF   x3D
0B3C0:  CLRF   x3E
0B3C2:  CLRF   x3F
0B3C4:  CLRF   x40
0B3C6:  CLRF   x41
0B3C8:  CLRF   x42
0B3CA:  CLRF   x43
0B3CC:  CLRF   x44
0B3CE:  CLRF   x45
0B3D0:  CLRF   x46
0B3D2:  CLRF   x47
0B3D4:  CLRF   x48
0B3D6:  CLRF   x49
0B3D8:  CLRF   x4A
0B3DA:  CLRF   x4B
0B3DC:  CLRF   x4C
0B3DE:  CLRF   x4D
0B3E0:  CLRF   x4E
0B3E2:  CLRF   x4F
0B3E4:  CLRF   x50
0B3E6:  CLRF   x51
0B3E8:  CLRF   x52
0B3EA:  CLRF   x53
0B3EC:  CLRF   x54
0B3EE:  CLRF   x55
0B3F0:  CLRF   x56
0B3F2:  CLRF   x57
0B3F4:  CLRF   x58
0B3F6:  CLRF   x59
0B3F8:  CLRF   x5A
0B3FA:  CLRF   x5B
0B3FC:  CLRF   x5C
0B3FE:  CLRF   x5D
0B400:  CLRF   x5E
0B402:  CLRF   x5F
0B404:  CLRF   x60
0B406:  CLRF   x61
0B408:  CLRF   x62
0B40A:  CLRF   x63
0B40C:  CLRF   x64
0B40E:  CLRF   x65
0B410:  CLRF   x66
0B412:  CLRF   x67
0B414:  CLRF   x68
0B416:  CLRF   x69
0B418:  CLRF   x6A
0B41A:  CLRF   x6B
0B41C:  CLRF   x6C
0B41E:  CLRF   x6D
0B420:  CLRF   x6E
0B422:  CLRF   x6F
0B424:  CLRF   x70
0B426:  CLRF   x71
0B428:  CLRF   x72
0B42A:  CLRF   x73
0B42C:  CLRF   x74
0B42E:  CLRF   x75
0B430:  CLRF   x76
0B432:  CLRF   x77
0B434:  CLRF   x78
0B436:  CLRF   x79
0B438:  CLRF   x7A
0B43A:  CLRF   x7B
0B43C:  CLRF   x7C
0B43E:  CLRF   x7D
0B440:  CLRF   x7E
0B442:  CLRF   x7F
0B444:  CLRF   x80
0B446:  CLRF   x81
0B448:  CLRF   x82
0B44A:  CLRF   x83
0B44C:  CLRF   x84
0B44E:  CLRF   x85
0B450:  CLRF   x86
0B452:  CLRF   x87
0B454:  CLRF   x88
0B456:  CLRF   x89
0B458:  CLRF   x8A
0B45A:  CLRF   x8B
0B45C:  CLRF   x8C
0B45E:  CLRF   x8D
0B460:  CLRF   x8E
0B462:  CLRF   x8F
0B464:  CLRF   x90
0B466:  CLRF   x91
0B468:  CLRF   x92
0B46A:  CLRF   x93
0B46C:  CLRF   x94
0B46E:  CLRF   x95
0B470:  CLRF   x96
0B472:  CLRF   x97
0B474:  CLRF   x98
0B476:  CLRF   x99
0B478:  CLRF   x9A
0B47A:  CLRF   x9B
0B47C:  CLRF   x9C
0B47E:  CLRF   x9D
0B480:  CLRF   x9E
0B482:  CLRF   x9F
0B484:  CLRF   xA0
0B486:  CLRF   xA1
0B488:  CLRF   xA2
0B48A:  CLRF   xA3
0B48C:  CLRF   xA4
0B48E:  CLRF   xA5
0B490:  CLRF   xA6
0B492:  CLRF   xA7
0B494:  CLRF   xA8
0B496:  CLRF   xA9
0B498:  CLRF   xAA
0B49A:  CLRF   xAB
0B49C:  CLRF   xAC
0B49E:  CLRF   xAD
0B4A0:  CLRF   xAE
0B4A2:  CLRF   xAF
0B4A4:  CLRF   xB0
0B4A6:  CLRF   xB1
0B4A8:  CLRF   xB2
0B4AA:  CLRF   xB3
0B4AC:  CLRF   xB4
0B4AE:  CLRF   xB5
0B4B0:  CLRF   xB6
0B4B2:  CLRF   xB7
0B4B4:  CLRF   xB8
0B4B6:  CLRF   xB9
0B4B8:  CLRF   xBA
0B4BA:  CLRF   xBB
0B4BC:  CLRF   xBC
0B4BE:  CLRF   xBD
0B4C0:  CLRF   xBE
0B4C2:  CLRF   xBF
0B4C4:  CLRF   xC0
0B4C6:  CLRF   xC1
0B4C8:  CLRF   xC2
0B4CA:  CLRF   xC3
0B4CC:  CLRF   xC4
0B4CE:  CLRF   xC5
0B4D0:  CLRF   xC6
0B4D2:  CLRF   xC7
0B4D4:  CLRF   xC8
0B4D6:  CLRF   xC9
0B4D8:  CLRF   xCA
0B4DA:  CLRF   xCB
0B4DC:  CLRF   xCC
0B4DE:  CLRF   xCD
0B4E0:  CLRF   xCE
0B4E2:  CLRF   xCF
0B4E4:  CLRF   xD0
0B4E6:  CLRF   xD1
0B4E8:  CLRF   xD2
0B4EA:  CLRF   xD3
0B4EC:  CLRF   xD4
0B4EE:  CLRF   xD5
0B4F0:  CLRF   xD6
0B4F2:  CLRF   xD7
0B4F4:  CLRF   xD8
0B4F6:  CLRF   xD9
0B4F8:  CLRF   xDA
0B4FA:  CLRF   xDB
0B4FC:  CLRF   xDC
0B4FE:  CLRF   xDD
0B500:  CLRF   xDE
0B502:  CLRF   xDF
0B504:  CLRF   xE0
0B506:  CLRF   xE1
0B508:  CLRF   xE2
0B50A:  CLRF   xE3
0B50C:  CLRF   xE4
0B50E:  CLRF   xE5
0B510:  CLRF   xE6
0B512:  CLRF   xE7
0B514:  CLRF   xE8
0B516:  CLRF   xE9
0B518:  CLRF   xEA
0B51A:  CLRF   xEB
0B51C:  CLRF   xEC
0B51E:  CLRF   xED
0B520:  CLRF   xEE
0B522:  CLRF   xEF
0B524:  CLRF   xF0
0B526:  CLRF   xF1
0B528:  CLRF   xF2
0B52A:  CLRF   xF3
0B52C:  CLRF   xF4
0B52E:  CLRF   xF5
0B530:  CLRF   xF6
0B532:  CLRF   xF7
0B534:  CLRF   xF8
0B536:  CLRF   xF9
0B538:  CLRF   xFA
0B53A:  CLRF   xFB
0B53C:  CLRF   xFC
0B53E:  CLRF   xFD
0B540:  CLRF   xFE
0B542:  CLRF   xFF
0B544:  MOVLB  9
0B546:  CLRF   x00
0B548:  CLRF   x01
0B54A:  CLRF   x02
0B54C:  CLRF   x03
0B54E:  CLRF   x04
0B550:  CLRF   x05
0B552:  CLRF   x06
0B554:  CLRF   x07
0B556:  CLRF   x08
0B558:  CLRF   x09
0B55A:  CLRF   x0A
0B55C:  CLRF   x0B
0B55E:  CLRF   x0C
0B560:  CLRF   x0D
0B562:  CLRF   x0E
0B564:  CLRF   x0F
0B566:  CLRF   x10
0B568:  CLRF   x11
0B56A:  CLRF   x12
0B56C:  CLRF   x13
0B56E:  CLRF   x14
0B570:  CLRF   x15
0B572:  CLRF   x16
0B574:  CLRF   x17
0B576:  CLRF   x18
0B578:  CLRF   x19
0B57A:  CLRF   x1A
0B57C:  CLRF   x1B
0B57E:  CLRF   x1C
0B580:  CLRF   x1D
0B582:  CLRF   x1E
0B584:  CLRF   x1F
0B586:  CLRF   x20
0B588:  CLRF   x21
0B58A:  CLRF   x22
0B58C:  CLRF   x23
0B58E:  CLRF   x24
0B590:  CLRF   x25
0B592:  CLRF   x26
0B594:  CLRF   x27
0B596:  CLRF   x28
0B598:  CLRF   x29
0B59A:  CLRF   x2A
0B59C:  CLRF   x2B
0B59E:  CLRF   x2C
0B5A0:  CLRF   x2D
0B5A2:  CLRF   x2E
0B5A4:  CLRF   x2F
0B5A6:  CLRF   x30
0B5A8:  CLRF   x31
0B5AA:  CLRF   x32
0B5AC:  CLRF   x33
0B5AE:  CLRF   x34
0B5B0:  CLRF   x35
0B5B2:  CLRF   x36
0B5B4:  CLRF   x37
0B5B6:  CLRF   x38
0B5B8:  CLRF   x39
0B5BA:  CLRF   x3A
0B5BC:  CLRF   x3B
0B5BE:  CLRF   x3C
0B5C0:  CLRF   x3D
0B5C2:  CLRF   x3E
0B5C4:  CLRF   x3F
0B5C6:  CLRF   x40
0B5C8:  CLRF   x41
0B5CA:  CLRF   x42
0B5CC:  CLRF   x43
0B5CE:  CLRF   x44
0B5D0:  CLRF   x45
0B5D2:  CLRF   x46
0B5D4:  CLRF   x47
0B5D6:  CLRF   x48
0B5D8:  CLRF   x49
0B5DA:  CLRF   x4A
0B5DC:  CLRF   x4B
0B5DE:  CLRF   x4C
0B5E0:  CLRF   x4D
0B5E2:  CLRF   x4E
0B5E4:  CLRF   x4F
0B5E6:  CLRF   x50
0B5E8:  CLRF   x51
0B5EA:  CLRF   x52
0B5EC:  CLRF   x53
0B5EE:  CLRF   x54
0B5F0:  CLRF   x55
0B5F2:  CLRF   x56
0B5F4:  CLRF   x57
0B5F6:  CLRF   x58
0B5F8:  CLRF   x59
0B5FA:  CLRF   x5A
0B5FC:  CLRF   x5B
0B5FE:  CLRF   x5C
0B600:  CLRF   x5D
0B602:  CLRF   x5E
0B604:  CLRF   x5F
0B606:  CLRF   x60
0B608:  CLRF   x61
0B60A:  CLRF   x62
0B60C:  CLRF   x63
0B60E:  CLRF   x64
0B610:  CLRF   x65
0B612:  CLRF   x66
0B614:  CLRF   x67
0B616:  CLRF   x68
0B618:  CLRF   x69
0B61A:  CLRF   x6A
0B61C:  CLRF   x6B
0B61E:  CLRF   x6C
0B620:  CLRF   x6D
0B622:  CLRF   x6E
0B624:  CLRF   x6F
0B626:  CLRF   x70
0B628:  CLRF   x71
0B62A:  CLRF   x72
0B62C:  CLRF   x73
0B62E:  CLRF   x74
0B630:  CLRF   x75
0B632:  CLRF   x76
0B634:  CLRF   x77
0B636:  CLRF   x78
0B638:  CLRF   x79
0B63A:  CLRF   x7A
0B63C:  CLRF   x7B
0B63E:  CLRF   x7C
0B640:  CLRF   x7D
0B642:  CLRF   x7E
0B644:  CLRF   x7F
0B646:  CLRF   x80
0B648:  CLRF   x81
0B64A:  CLRF   x82
0B64C:  CLRF   x83
0B64E:  CLRF   x84
0B650:  CLRF   x85
0B652:  CLRF   x86
0B654:  CLRF   x87
0B656:  CLRF   x88
0B658:  CLRF   x89
0B65A:  CLRF   x8A
0B65C:  CLRF   x8B
0B65E:  CLRF   x8C
0B660:  CLRF   x8D
0B662:  CLRF   x8E
0B664:  CLRF   x8F
0B666:  CLRF   x90
0B668:  CLRF   x91
0B66A:  CLRF   x92
0B66C:  CLRF   x93
0B66E:  CLRF   x94
0B670:  CLRF   x95
0B672:  CLRF   x96
0B674:  CLRF   x97
0B676:  CLRF   x98
0B678:  CLRF   x99
0B67A:  CLRF   x9A
0B67C:  CLRF   x9B
0B67E:  CLRF   x9C
0B680:  CLRF   x9D
0B682:  CLRF   x9E
0B684:  CLRF   x9F
0B686:  CLRF   xA0
0B688:  CLRF   xA1
0B68A:  CLRF   xA2
0B68C:  CLRF   xA3
0B68E:  CLRF   xA4
0B690:  CLRF   xA5
0B692:  CLRF   xA6
0B694:  CLRF   xA7
0B696:  CLRF   xA8
0B698:  CLRF   xA9
0B69A:  CLRF   xAA
0B69C:  CLRF   xAB
0B69E:  CLRF   xAC
0B6A0:  CLRF   xAD
0B6A2:  CLRF   xAE
0B6A4:  CLRF   xAF
0B6A6:  CLRF   xB0
0B6A8:  CLRF   xB1
0B6AA:  CLRF   xB2
0B6AC:  CLRF   xB3
0B6AE:  CLRF   xB4
0B6B0:  CLRF   xB5
0B6B2:  CLRF   xB6
0B6B4:  CLRF   xB7
0B6B6:  CLRF   xB8
0B6B8:  CLRF   xB9
0B6BA:  CLRF   xBA
0B6BC:  CLRF   xBB
0B6BE:  CLRF   xBC
0B6C0:  CLRF   xBD
0B6C2:  CLRF   xBE
0B6C4:  CLRF   xBF
0B6C6:  CLRF   xC0
0B6C8:  CLRF   xC1
0B6CA:  CLRF   xC2
0B6CC:  CLRF   xC3
0B6CE:  CLRF   xC4
0B6D0:  CLRF   xC5
0B6D2:  CLRF   xC6
0B6D4:  CLRF   xC7
0B6D6:  CLRF   xC8
0B6D8:  CLRF   xC9
0B6DA:  CLRF   xCA
0B6DC:  CLRF   xCB
0B6DE:  CLRF   xCC
0B6E0:  CLRF   xCD
0B6E2:  CLRF   xCE
0B6E4:  CLRF   xCF
0B6E6:  CLRF   xD0
0B6E8:  CLRF   xD1
0B6EA:  CLRF   xD2
0B6EC:  CLRF   xD3
0B6EE:  CLRF   xD4
0B6F0:  CLRF   xD5
0B6F2:  CLRF   xD6
0B6F4:  CLRF   xD7
0B6F6:  CLRF   xD8
0B6F8:  CLRF   xD9
0B6FA:  CLRF   xDA
0B6FC:  CLRF   xDB
0B6FE:  CLRF   xDC
0B700:  CLRF   xDD
0B702:  CLRF   xDE
0B704:  CLRF   xDF
0B706:  CLRF   xE0
0B708:  CLRF   xE1
0B70A:  CLRF   xE2
0B70C:  CLRF   xE3
0B70E:  CLRF   xE4
0B710:  CLRF   xE5
0B712:  CLRF   xE6
0B714:  CLRF   xE7
0B716:  CLRF   xE8
0B718:  CLRF   xE9
0B71A:  CLRF   xEA
0B71C:  CLRF   xEB
0B71E:  CLRF   xEC
0B720:  CLRF   xED
0B722:  CLRF   xEE
0B724:  CLRF   xEF
0B726:  CLRF   xF0
0B728:  CLRF   xF1
0B72A:  CLRF   xF2
0B72C:  CLRF   xF3
0B72E:  CLRF   xF4
0B730:  CLRF   xF5
0B732:  CLRF   xF6
0B734:  CLRF   xF7
0B736:  CLRF   xF8
0B738:  CLRF   xF9
0B73A:  CLRF   xFA
0B73C:  CLRF   xFB
0B73E:  CLRF   xFC
0B740:  CLRF   xFD
0B742:  CLRF   xFE
0B744:  CLRF   xFF
0B746:  MOVLB  A
0B748:  CLRF   x00
0B74A:  CLRF   x01
0B74C:  CLRF   x02
0B74E:  CLRF   x03
0B750:  CLRF   x04
0B752:  CLRF   x05
0B754:  CLRF   x06
0B756:  CLRF   x07
0B758:  CLRF   x08
0B75A:  CLRF   x09
0B75C:  CLRF   x0A
0B75E:  CLRF   x0B
0B760:  CLRF   x0C
0B762:  CLRF   x0D
0B764:  CLRF   x0E
0B766:  CLRF   x0F
0B768:  CLRF   x10
0B76A:  CLRF   x11
0B76C:  CLRF   x12
0B76E:  CLRF   x13
0B770:  CLRF   x14
0B772:  CLRF   x15
0B774:  CLRF   x16
0B776:  CLRF   x17
0B778:  CLRF   x18
0B77A:  CLRF   x19
0B77C:  CLRF   x1A
0B77E:  CLRF   x1B
0B780:  CLRF   x1C
0B782:  CLRF   x1D
0B784:  CLRF   x1E
0B786:  CLRF   x1F
0B788:  CLRF   x20
0B78A:  CLRF   x21
0B78C:  CLRF   x22
0B78E:  CLRF   x23
0B790:  CLRF   x24
0B792:  CLRF   x25
0B794:  CLRF   x26
0B796:  CLRF   x27
0B798:  CLRF   x28
0B79A:  CLRF   x29
0B79C:  CLRF   x2A
0B79E:  CLRF   x2B
0B7A0:  CLRF   x2C
0B7A2:  CLRF   x2D
0B7A4:  CLRF   x2E
0B7A6:  CLRF   x2F
0B7A8:  CLRF   x30
0B7AA:  CLRF   x31
0B7AC:  CLRF   x32
0B7AE:  CLRF   x33
0B7B0:  CLRF   x34
0B7B2:  CLRF   x35
0B7B4:  CLRF   x36
0B7B6:  CLRF   x37
0B7B8:  CLRF   x38
0B7BA:  CLRF   x39
0B7BC:  CLRF   x3A
0B7BE:  CLRF   x3B
0B7C0:  CLRF   x3C
0B7C2:  CLRF   x3D
0B7C4:  CLRF   x3E
0B7C6:  CLRF   x3F
0B7C8:  CLRF   x40
0B7CA:  CLRF   x41
0B7CC:  CLRF   x42
0B7CE:  CLRF   x43
0B7D0:  CLRF   x44
0B7D2:  CLRF   x45
0B7D4:  CLRF   x46
0B7D6:  CLRF   x47
0B7D8:  CLRF   x48
0B7DA:  CLRF   x49
0B7DC:  CLRF   x4A
0B7DE:  CLRF   x4B
0B7E0:  CLRF   x4C
0B7E2:  CLRF   x4D
0B7E4:  CLRF   x4E
0B7E6:  CLRF   x4F
0B7E8:  CLRF   x50
0B7EA:  CLRF   x51
0B7EC:  CLRF   x52
0B7EE:  CLRF   x53
0B7F0:  CLRF   x54
0B7F2:  CLRF   x55
0B7F4:  CLRF   x56
0B7F6:  CLRF   x57
0B7F8:  CLRF   x58
....................     port2.port_num = 2; 
0B7FA:  MOVLW  02
0B7FC:  MOVLB  6
0B7FE:  MOVWF  x59
....................     port2.sweep_step = 0;
0B800:  CLRF   x5B
0B802:  CLRF   x5A
....................     port2.active = 1;
0B804:  MOVLB  A
0B806:  BSF    x58.0
.................... 
....................     int16 count = 1;
....................     iv_env_t measured_data = create_meas_data();
0B808:  CLRF   x5A
0B80A:  MOVLW  01
0B80C:  MOVWF  x59
0B80E:  MOVLB  0
0B810:  CALL   78F6
0B814:  MOVFF  02,03
0B818:  MOVF   01,W
0B81A:  MOVWF  FE1
0B81C:  MOVFF  03,FE2
0B820:  MOVLW  0A
0B822:  MOVWF  FEA
0B824:  MOVLW  5B
0B826:  MOVWF  FE9
0B828:  MOVLW  0C
0B82A:  MOVWF  01
0B82C:  MOVFF  FE6,FEE
0B830:  DECFSZ 01,F
0B832:  GOTO   B82C
.................... 
....................     while (port1.active || port2.active)
0B836:  MOVLB  6
0B838:  BTFSS  x58.0
0B83A:  BRA    B842
0B83C:  MOVLB  0
0B83E:  GOTO   B852
0B842:  MOVLB  0
0B844:  MOVLB  A
0B846:  BTFSC  x58.0
0B848:  BRA    B850
0B84A:  MOVLB  0
0B84C:  GOTO   BBF2
0B850:  MOVLB  0
....................     {
....................         // 出力設定
....................         if (port1.active) {
0B852:  MOVLB  6
0B854:  BTFSC  x58.0
0B856:  BRA    B85E
0B858:  MOVLB  0
0B85A:  GOTO   B870
0B85E:  MOVLB  0
....................             mcp4901_1_write(count);
0B860:  MOVFF  A5A,A76
0B864:  MOVFF  A59,A75
0B868:  CALL   2352
....................         } else {
0B86C:  GOTO   B87C
....................             mcp4901_1_write(0);  // 閾値到達後は0出力
0B870:  MOVLB  A
0B872:  CLRF   x76
0B874:  CLRF   x75
0B876:  MOVLB  0
0B878:  CALL   2352
....................         }
.................... 
....................         if (port2.active) {
0B87C:  MOVLB  A
0B87E:  BTFSC  x58.0
0B880:  BRA    B888
0B882:  MOVLB  0
0B884:  GOTO   B89A
0B888:  MOVLB  0
....................             mcp4901_2_write(count);
0B88A:  MOVFF  A5A,A76
0B88E:  MOVFF  A59,A75
0B892:  CALL   2394
....................         } else {
0B896:  GOTO   B8A6
....................             mcp4901_2_write(0);
0B89A:  MOVLB  A
0B89C:  CLRF   x76
0B89E:  CLRF   x75
0B8A0:  MOVLB  0
0B8A2:  CALL   2394
....................         }
.................... 
....................         delay_us(100);
0B8A6:  MOVLW  85
0B8A8:  MOVWF  00
0B8AA:  DECFSZ 00,F
0B8AC:  BRA    B8AA
.................... 
....................         // データ取得
....................         if (port1.active) {
0B8AE:  MOVLB  6
0B8B0:  BTFSC  x58.0
0B8B2:  BRA    B8BA
0B8B4:  MOVLB  0
0B8B6:  GOTO   BA96
0B8BA:  MOVLB  0
....................             port1.data_buffer[count].voltage = ad7490_read(ADC_CIGS1_AMP);
0B8BC:  MOVLB  A
0B8BE:  RLCF   x59,W
0B8C0:  MOVWF  02
0B8C2:  RLCF   x5A,W
0B8C4:  MOVWF  03
0B8C6:  RLCF   02,F
0B8C8:  RLCF   03,F
0B8CA:  MOVLW  FC
0B8CC:  ANDWF  02,F
0B8CE:  MOVF   02,W
0B8D0:  ADDLW  5C
0B8D2:  MOVWF  01
0B8D4:  MOVLW  02
0B8D6:  ADDWFC 03,F
0B8D8:  MOVF   01,W
0B8DA:  MOVWF  x69
0B8DC:  MOVFF  03,A6A
0B8E0:  MOVLW  02
0B8E2:  MOVWF  x87
0B8E4:  MOVLB  0
0B8E6:  CALL   1F7E
0B8EA:  MOVFF  A6A,FEA
0B8EE:  MOVFF  A69,FE9
0B8F2:  MOVFF  02,FEC
0B8F6:  MOVF   FED,F
0B8F8:  MOVFF  01,FEF
....................             port1.data_buffer[count].current = ad7490_read(ADC_CIGS1_CURR);
0B8FC:  MOVLB  A
0B8FE:  RLCF   x59,W
0B900:  MOVWF  02
0B902:  RLCF   x5A,W
0B904:  MOVWF  03
0B906:  RLCF   02,F
0B908:  RLCF   03,F
0B90A:  MOVLW  FC
0B90C:  ANDWF  02,F
0B90E:  MOVF   02,W
0B910:  ADDLW  03
0B912:  MOVWF  x67
0B914:  MOVLW  00
0B916:  ADDWFC 03,W
0B918:  MOVWF  x68
0B91A:  MOVLW  02
0B91C:  ADDWF  x67,W
0B91E:  MOVWF  01
0B920:  MOVLW  00
0B922:  ADDWFC x68,W
0B924:  MOVWF  03
0B926:  MOVF   01,W
0B928:  ADDLW  59
0B92A:  MOVWF  01
0B92C:  MOVLW  02
0B92E:  ADDWFC 03,F
0B930:  MOVF   01,W
0B932:  MOVWF  x67
0B934:  MOVFF  03,A68
0B938:  MOVLW  01
0B93A:  MOVWF  x87
0B93C:  MOVLB  0
0B93E:  CALL   1F7E
0B942:  MOVFF  A68,FEA
0B946:  MOVFF  A67,FE9
0B94A:  MOVFF  02,FEC
0B94E:  MOVF   FED,F
0B950:  MOVFF  01,FEF
....................             fprintf(PC, "%04LX,%04LX,", port1.data_buffer[count].voltage, port1.data_buffer[count].current);  
0B954:  MOVLB  A
0B956:  RLCF   x59,W
0B958:  MOVWF  02
0B95A:  RLCF   x5A,W
0B95C:  MOVWF  03
0B95E:  RLCF   02,F
0B960:  RLCF   03,F
0B962:  MOVLW  FC
0B964:  ANDWF  02,F
0B966:  MOVF   02,W
0B968:  ADDLW  5C
0B96A:  MOVWF  FE9
0B96C:  MOVLW  02
0B96E:  ADDWFC 03,W
0B970:  MOVWF  FEA
0B972:  MOVFF  FEC,A6A
0B976:  MOVF   FED,F
0B978:  MOVFF  FEF,A69
0B97C:  RLCF   x59,W
0B97E:  MOVWF  02
0B980:  RLCF   x5A,W
0B982:  MOVWF  03
0B984:  RLCF   02,F
0B986:  RLCF   03,F
0B988:  MOVLW  FC
0B98A:  ANDWF  02,F
0B98C:  MOVF   02,W
0B98E:  ADDLW  03
0B990:  MOVWF  x6B
0B992:  MOVLW  00
0B994:  ADDWFC 03,W
0B996:  MOVWF  x6C
0B998:  MOVLW  02
0B99A:  ADDWF  x6B,W
0B99C:  MOVWF  01
0B99E:  MOVLW  00
0B9A0:  ADDWFC x6C,W
0B9A2:  MOVWF  03
0B9A4:  MOVF   01,W
0B9A6:  ADDLW  59
0B9A8:  MOVWF  FE9
0B9AA:  MOVLW  02
0B9AC:  ADDWFC 03,W
0B9AE:  MOVWF  FEA
0B9B0:  MOVFF  FEC,A6C
0B9B4:  MOVF   FED,F
0B9B6:  MOVFF  FEF,A6B
0B9BA:  MOVFF  A6A,AC8
0B9BE:  MOVLW  37
0B9C0:  MOVWF  xC9
0B9C2:  MOVLB  0
0B9C4:  CALL   200A
0B9C8:  MOVFF  A69,AC8
0B9CC:  MOVLW  37
0B9CE:  MOVLB  A
0B9D0:  MOVWF  xC9
0B9D2:  MOVLB  0
0B9D4:  CALL   200A
0B9D8:  MOVLW  2C
0B9DA:  BTFSS  FA6.6
0B9DC:  GOTO   B9DA
0B9E0:  MOVLB  E
0B9E2:  MOVWF  xF9
0B9E4:  MOVFF  A6C,AC8
0B9E8:  MOVLW  37
0B9EA:  MOVLB  A
0B9EC:  MOVWF  xC9
0B9EE:  MOVLB  0
0B9F0:  CALL   200A
0B9F4:  MOVFF  A6B,AC8
0B9F8:  MOVLW  37
0B9FA:  MOVLB  A
0B9FC:  MOVWF  xC9
0B9FE:  MOVLB  0
0BA00:  CALL   200A
0BA04:  MOVLW  2C
0BA06:  BTFSS  FA6.6
0BA08:  GOTO   BA06
0BA0C:  MOVLB  E
0BA0E:  MOVWF  xF9
....................             port1.sweep_step = count + 1;
0BA10:  MOVLW  01
0BA12:  MOVLB  A
0BA14:  ADDWF  x59,W
0BA16:  MOVLB  2
0BA18:  MOVWF  x5A
0BA1A:  MOVLW  00
0BA1C:  MOVLB  A
0BA1E:  ADDWFC x5A,W
0BA20:  MOVLB  2
0BA22:  MOVWF  x5B
....................             if (port1.data_buffer[count].current < curr_limit) {
0BA24:  MOVLB  A
0BA26:  RLCF   x59,W
0BA28:  MOVWF  02
0BA2A:  RLCF   x5A,W
0BA2C:  MOVWF  03
0BA2E:  RLCF   02,F
0BA30:  RLCF   03,F
0BA32:  MOVLW  FC
0BA34:  ANDWF  02,F
0BA36:  MOVF   02,W
0BA38:  ADDLW  03
0BA3A:  MOVWF  x67
0BA3C:  MOVLW  00
0BA3E:  ADDWFC 03,W
0BA40:  MOVWF  x68
0BA42:  MOVLW  02
0BA44:  ADDWF  x67,W
0BA46:  MOVWF  01
0BA48:  MOVLW  00
0BA4A:  ADDWFC x68,W
0BA4C:  MOVWF  03
0BA4E:  MOVF   01,W
0BA50:  ADDLW  59
0BA52:  MOVWF  FE9
0BA54:  MOVLW  02
0BA56:  ADDWFC 03,W
0BA58:  MOVWF  FEA
0BA5A:  MOVFF  FEC,A68
0BA5E:  MOVF   FED,F
0BA60:  MOVFF  FEF,A67
0BA64:  MOVF   x68,W
0BA66:  MOVLB  2
0BA68:  SUBWF  x58,W
0BA6A:  BTFSC  FD8.0
0BA6C:  BRA    BA74
0BA6E:  MOVLB  0
0BA70:  GOTO   BA96
0BA74:  MOVLB  0
0BA76:  BTFSS  FD8.2
0BA78:  GOTO   BA90
0BA7C:  MOVLB  2
0BA7E:  MOVF   x57,W
0BA80:  MOVLB  A
0BA82:  SUBWF  x67,W
0BA84:  BTFSS  FD8.0
0BA86:  BRA    BA8E
0BA88:  MOVLB  0
0BA8A:  GOTO   BA96
0BA8E:  MOVLB  0
....................                 port1.active = 0;  // 閾値到達で測定終了
0BA90:  MOVLB  6
0BA92:  BCF    x58.0
0BA94:  MOVLB  0
....................             }
....................         }
.................... 
....................         if (port2.active) {
0BA96:  MOVLB  A
0BA98:  BTFSC  x58.0
0BA9A:  BRA    BAA2
0BA9C:  MOVLB  0
0BA9E:  GOTO   BBC2
0BAA2:  MOVLB  0
....................             port2.data_buffer[count].voltage = ad7490_read(ADC_CIGS2_AMP);
0BAA4:  MOVLB  A
0BAA6:  RLCF   x59,W
0BAA8:  MOVWF  02
0BAAA:  RLCF   x5A,W
0BAAC:  MOVWF  03
0BAAE:  RLCF   02,F
0BAB0:  RLCF   03,F
0BAB2:  MOVLW  FC
0BAB4:  ANDWF  02,F
0BAB6:  MOVF   02,W
0BAB8:  ADDLW  5C
0BABA:  MOVWF  01
0BABC:  MOVLW  06
0BABE:  ADDWFC 03,F
0BAC0:  MOVF   01,W
0BAC2:  MOVWF  x69
0BAC4:  MOVFF  03,A6A
0BAC8:  MOVLW  06
0BACA:  MOVWF  x87
0BACC:  MOVLB  0
0BACE:  CALL   1F7E
0BAD2:  MOVFF  A6A,FEA
0BAD6:  MOVFF  A69,FE9
0BADA:  MOVFF  02,FEC
0BADE:  MOVF   FED,F
0BAE0:  MOVFF  01,FEF
....................             port2.data_buffer[count].current = ad7490_read(ADC_CIGS2_CURR);
0BAE4:  MOVLB  A
0BAE6:  RLCF   x59,W
0BAE8:  MOVWF  02
0BAEA:  RLCF   x5A,W
0BAEC:  MOVWF  03
0BAEE:  RLCF   02,F
0BAF0:  RLCF   03,F
0BAF2:  MOVLW  FC
0BAF4:  ANDWF  02,F
0BAF6:  MOVF   02,W
0BAF8:  ADDLW  03
0BAFA:  MOVWF  x67
0BAFC:  MOVLW  00
0BAFE:  ADDWFC 03,W
0BB00:  MOVWF  x68
0BB02:  MOVLW  02
0BB04:  ADDWF  x67,W
0BB06:  MOVWF  01
0BB08:  MOVLW  00
0BB0A:  ADDWFC x68,W
0BB0C:  MOVWF  03
0BB0E:  MOVF   01,W
0BB10:  ADDLW  59
0BB12:  MOVWF  01
0BB14:  MOVLW  06
0BB16:  ADDWFC 03,F
0BB18:  MOVF   01,W
0BB1A:  MOVWF  x67
0BB1C:  MOVFF  03,A68
0BB20:  MOVLW  05
0BB22:  MOVWF  x87
0BB24:  MOVLB  0
0BB26:  CALL   1F7E
0BB2A:  MOVFF  A68,FEA
0BB2E:  MOVFF  A67,FE9
0BB32:  MOVFF  02,FEC
0BB36:  MOVF   FED,F
0BB38:  MOVFF  01,FEF
....................             port2.sweep_step = count + 1;
0BB3C:  MOVLW  01
0BB3E:  MOVLB  A
0BB40:  ADDWF  x59,W
0BB42:  MOVLB  6
0BB44:  MOVWF  x5A
0BB46:  MOVLW  00
0BB48:  MOVLB  A
0BB4A:  ADDWFC x5A,W
0BB4C:  MOVLB  6
0BB4E:  MOVWF  x5B
....................             if (port2.data_buffer[count].current < curr_limit) {
0BB50:  MOVLB  A
0BB52:  RLCF   x59,W
0BB54:  MOVWF  02
0BB56:  RLCF   x5A,W
0BB58:  MOVWF  03
0BB5A:  RLCF   02,F
0BB5C:  RLCF   03,F
0BB5E:  MOVLW  FC
0BB60:  ANDWF  02,F
0BB62:  MOVF   02,W
0BB64:  ADDLW  03
0BB66:  MOVWF  x67
0BB68:  MOVLW  00
0BB6A:  ADDWFC 03,W
0BB6C:  MOVWF  x68
0BB6E:  MOVLW  02
0BB70:  ADDWF  x67,W
0BB72:  MOVWF  01
0BB74:  MOVLW  00
0BB76:  ADDWFC x68,W
0BB78:  MOVWF  03
0BB7A:  MOVF   01,W
0BB7C:  ADDLW  59
0BB7E:  MOVWF  FE9
0BB80:  MOVLW  06
0BB82:  ADDWFC 03,W
0BB84:  MOVWF  FEA
0BB86:  MOVFF  FEC,A68
0BB8A:  MOVF   FED,F
0BB8C:  MOVFF  FEF,A67
0BB90:  MOVF   x68,W
0BB92:  MOVLB  2
0BB94:  SUBWF  x58,W
0BB96:  BTFSC  FD8.0
0BB98:  BRA    BBA0
0BB9A:  MOVLB  0
0BB9C:  GOTO   BBC2
0BBA0:  MOVLB  0
0BBA2:  BTFSS  FD8.2
0BBA4:  GOTO   BBBC
0BBA8:  MOVLB  2
0BBAA:  MOVF   x57,W
0BBAC:  MOVLB  A
0BBAE:  SUBWF  x67,W
0BBB0:  BTFSS  FD8.0
0BBB2:  BRA    BBBA
0BBB4:  MOVLB  0
0BBB6:  GOTO   BBC2
0BBBA:  MOVLB  0
....................                 port2.active = 0;
0BBBC:  MOVLB  A
0BBBE:  BCF    x58.0
0BBC0:  MOVLB  0
....................             }
....................         }
.................... 
....................         count++;
0BBC2:  MOVLB  A
0BBC4:  INCF   x59,F
0BBC6:  BTFSC  FD8.2
0BBC8:  INCF   x5A,F
....................         if (count >= 255) {
0BBCA:  MOVF   x5A,F
0BBCC:  BTFSC  FD8.2
0BBCE:  BRA    BBD6
0BBD0:  MOVLB  0
0BBD2:  GOTO   BBEA
0BBD6:  MOVLB  0
0BBD8:  MOVLB  A
0BBDA:  MOVF   x59,W
0BBDC:  SUBLW  FE
0BBDE:  BTFSS  FD8.0
0BBE0:  BRA    BBE8
0BBE2:  MOVLB  0
0BBE4:  GOTO   BBEE
0BBE8:  MOVLB  0
....................             break;
0BBEA:  GOTO   BBF2
....................         }
0BBEE:  GOTO   B836
....................     }
.................... 
....................     fprintf(PC, "sweep step : %04LX\r\n", count);
0BBF2:  MOVLW  FE
0BBF4:  MOVWF  FF6
0BBF6:  MOVLW  05
0BBF8:  MOVWF  FF7
0BBFA:  MOVLW  00
0BBFC:  MOVWF  FF8
0BBFE:  MOVLW  0D
0BC00:  MOVLB  A
0BC02:  MOVWF  x67
0BC04:  MOVLB  0
0BC06:  CALL   1DF6
0BC0A:  MOVFF  A5A,AC8
0BC0E:  MOVLW  37
0BC10:  MOVLB  A
0BC12:  MOVWF  xC9
0BC14:  MOVLB  0
0BC16:  CALL   200A
0BC1A:  MOVFF  A59,AC8
0BC1E:  MOVLW  37
0BC20:  MOVLB  A
0BC22:  MOVWF  xC9
0BC24:  MOVLB  0
0BC26:  CALL   200A
0BC2A:  MOVLW  0D
0BC2C:  BTFSS  FA6.6
0BC2E:  GOTO   BC2C
0BC32:  MOVLB  E
0BC34:  MOVWF  xF9
0BC36:  MOVLW  0A
0BC38:  MOVLB  0
0BC3A:  BTFSS  FA6.6
0BC3C:  GOTO   BC3A
0BC40:  MOVLB  E
0BC42:  MOVWF  xF9
.................... 
....................     // 接続は維持
....................     fprintf(PC, "\r\nport1\r\n");
0BC44:  MOVLW  14
0BC46:  MOVWF  FF6
0BC48:  MOVLW  06
0BC4A:  MOVWF  FF7
0BC4C:  MOVLW  00
0BC4E:  MOVWF  FF8
0BC50:  MOVLB  0
0BC52:  CALL   1DC0
....................     log_meas_data_with_print(&measured_data, &port1);
0BC56:  MOVLW  0A
0BC58:  MOVLB  A
0BC5A:  MOVWF  x68
0BC5C:  MOVLW  5B
0BC5E:  MOVWF  x67
0BC60:  MOVLW  02
0BC62:  MOVWF  x6A
0BC64:  MOVLW  59
0BC66:  MOVWF  x69
0BC68:  MOVLB  0
0BC6A:  CALL   9B6C
....................     fprintf(PC, "\r\nport2\r\n");
0BC6E:  MOVLW  1E
0BC70:  MOVWF  FF6
0BC72:  MOVLW  06
0BC74:  MOVWF  FF7
0BC76:  MOVLW  00
0BC78:  MOVWF  FF8
0BC7A:  CALL   1DC0
....................     log_meas_data_with_print(&measured_data, &port2);
0BC7E:  MOVLW  0A
0BC80:  MOVLB  A
0BC82:  MOVWF  x68
0BC84:  MOVLW  5B
0BC86:  MOVWF  x67
0BC88:  MOVLW  06
0BC8A:  MOVWF  x6A
0BC8C:  MOVLW  59
0BC8E:  MOVWF  x69
0BC90:  MOVLB  0
0BC92:  CALL   9B6C
0BC96:  GOTO   BF5A (RETURN)
.................... }
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_limit)
.................... {
....................     fprintf(PC, ".");
*
080A4:  MOVLW  2E
080A6:  BTFSS  FA6.6
080A8:  GOTO   80A6
080AC:  MOVLB  E
080AE:  MOVWF  xF9
....................     // Enable both CIGS ports
....................     connect_port1();
080B0:  MOVLB  0
080B2:  CALL   4C06
....................     connect_port2();
080B6:  CALL   4C0E
.................... 
....................     // delay_us(100); // wait for the CIGS to stabilize
.................... 
....................     // Init Port1
....................     sweep_config_t port1 = {0};
080BA:  MOVLB  2
080BC:  CLRF   x67
080BE:  CLRF   x68
080C0:  CLRF   x69
080C2:  CLRF   x6A
080C4:  CLRF   x6B
080C6:  CLRF   x6C
080C8:  CLRF   x6D
080CA:  CLRF   x6E
080CC:  CLRF   x6F
080CE:  CLRF   x70
080D0:  CLRF   x71
080D2:  CLRF   x72
080D4:  CLRF   x73
080D6:  CLRF   x74
080D8:  CLRF   x75
080DA:  CLRF   x76
080DC:  CLRF   x77
080DE:  CLRF   x78
080E0:  CLRF   x79
080E2:  CLRF   x7A
080E4:  CLRF   x7B
080E6:  CLRF   x7C
080E8:  CLRF   x7D
080EA:  CLRF   x7E
080EC:  CLRF   x7F
080EE:  CLRF   x80
080F0:  CLRF   x81
080F2:  CLRF   x82
080F4:  CLRF   x83
080F6:  CLRF   x84
080F8:  CLRF   x85
080FA:  CLRF   x86
080FC:  CLRF   x87
080FE:  CLRF   x88
08100:  CLRF   x89
08102:  CLRF   x8A
08104:  CLRF   x8B
08106:  CLRF   x8C
08108:  CLRF   x8D
0810A:  CLRF   x8E
0810C:  CLRF   x8F
0810E:  CLRF   x90
08110:  CLRF   x91
08112:  CLRF   x92
08114:  CLRF   x93
08116:  CLRF   x94
08118:  CLRF   x95
0811A:  CLRF   x96
0811C:  CLRF   x97
0811E:  CLRF   x98
08120:  CLRF   x99
08122:  CLRF   x9A
08124:  CLRF   x9B
08126:  CLRF   x9C
08128:  CLRF   x9D
0812A:  CLRF   x9E
0812C:  CLRF   x9F
0812E:  CLRF   xA0
08130:  CLRF   xA1
08132:  CLRF   xA2
08134:  CLRF   xA3
08136:  CLRF   xA4
08138:  CLRF   xA5
0813A:  CLRF   xA6
0813C:  CLRF   xA7
0813E:  CLRF   xA8
08140:  CLRF   xA9
08142:  CLRF   xAA
08144:  CLRF   xAB
08146:  CLRF   xAC
08148:  CLRF   xAD
0814A:  CLRF   xAE
0814C:  CLRF   xAF
0814E:  CLRF   xB0
08150:  CLRF   xB1
08152:  CLRF   xB2
08154:  CLRF   xB3
08156:  CLRF   xB4
08158:  CLRF   xB5
0815A:  CLRF   xB6
0815C:  CLRF   xB7
0815E:  CLRF   xB8
08160:  CLRF   xB9
08162:  CLRF   xBA
08164:  CLRF   xBB
08166:  CLRF   xBC
08168:  CLRF   xBD
0816A:  CLRF   xBE
0816C:  CLRF   xBF
0816E:  CLRF   xC0
08170:  CLRF   xC1
08172:  CLRF   xC2
08174:  CLRF   xC3
08176:  CLRF   xC4
08178:  CLRF   xC5
0817A:  CLRF   xC6
0817C:  CLRF   xC7
0817E:  CLRF   xC8
08180:  CLRF   xC9
08182:  CLRF   xCA
08184:  CLRF   xCB
08186:  CLRF   xCC
08188:  CLRF   xCD
0818A:  CLRF   xCE
0818C:  CLRF   xCF
0818E:  CLRF   xD0
08190:  CLRF   xD1
08192:  CLRF   xD2
08194:  CLRF   xD3
08196:  CLRF   xD4
08198:  CLRF   xD5
0819A:  CLRF   xD6
0819C:  CLRF   xD7
0819E:  CLRF   xD8
081A0:  CLRF   xD9
081A2:  CLRF   xDA
081A4:  CLRF   xDB
081A6:  CLRF   xDC
081A8:  CLRF   xDD
081AA:  CLRF   xDE
081AC:  CLRF   xDF
081AE:  CLRF   xE0
081B0:  CLRF   xE1
081B2:  CLRF   xE2
081B4:  CLRF   xE3
081B6:  CLRF   xE4
081B8:  CLRF   xE5
081BA:  CLRF   xE6
081BC:  CLRF   xE7
081BE:  CLRF   xE8
081C0:  CLRF   xE9
081C2:  CLRF   xEA
081C4:  CLRF   xEB
081C6:  CLRF   xEC
081C8:  CLRF   xED
081CA:  CLRF   xEE
081CC:  CLRF   xEF
081CE:  CLRF   xF0
081D0:  CLRF   xF1
081D2:  CLRF   xF2
081D4:  CLRF   xF3
081D6:  CLRF   xF4
081D8:  CLRF   xF5
081DA:  CLRF   xF6
081DC:  CLRF   xF7
081DE:  CLRF   xF8
081E0:  CLRF   xF9
081E2:  CLRF   xFA
081E4:  CLRF   xFB
081E6:  CLRF   xFC
081E8:  CLRF   xFD
081EA:  CLRF   xFE
081EC:  CLRF   xFF
081EE:  MOVLB  3
081F0:  CLRF   x00
081F2:  CLRF   x01
081F4:  CLRF   x02
081F6:  CLRF   x03
081F8:  CLRF   x04
081FA:  CLRF   x05
081FC:  CLRF   x06
081FE:  CLRF   x07
08200:  CLRF   x08
08202:  CLRF   x09
08204:  CLRF   x0A
08206:  CLRF   x0B
08208:  CLRF   x0C
0820A:  CLRF   x0D
0820C:  CLRF   x0E
0820E:  CLRF   x0F
08210:  CLRF   x10
08212:  CLRF   x11
08214:  CLRF   x12
08216:  CLRF   x13
08218:  CLRF   x14
0821A:  CLRF   x15
0821C:  CLRF   x16
0821E:  CLRF   x17
08220:  CLRF   x18
08222:  CLRF   x19
08224:  CLRF   x1A
08226:  CLRF   x1B
08228:  CLRF   x1C
0822A:  CLRF   x1D
0822C:  CLRF   x1E
0822E:  CLRF   x1F
08230:  CLRF   x20
08232:  CLRF   x21
08234:  CLRF   x22
08236:  CLRF   x23
08238:  CLRF   x24
0823A:  CLRF   x25
0823C:  CLRF   x26
0823E:  CLRF   x27
08240:  CLRF   x28
08242:  CLRF   x29
08244:  CLRF   x2A
08246:  CLRF   x2B
08248:  CLRF   x2C
0824A:  CLRF   x2D
0824C:  CLRF   x2E
0824E:  CLRF   x2F
08250:  CLRF   x30
08252:  CLRF   x31
08254:  CLRF   x32
08256:  CLRF   x33
08258:  CLRF   x34
0825A:  CLRF   x35
0825C:  CLRF   x36
0825E:  CLRF   x37
08260:  CLRF   x38
08262:  CLRF   x39
08264:  CLRF   x3A
08266:  CLRF   x3B
08268:  CLRF   x3C
0826A:  CLRF   x3D
0826C:  CLRF   x3E
0826E:  CLRF   x3F
08270:  CLRF   x40
08272:  CLRF   x41
08274:  CLRF   x42
08276:  CLRF   x43
08278:  CLRF   x44
0827A:  CLRF   x45
0827C:  CLRF   x46
0827E:  CLRF   x47
08280:  CLRF   x48
08282:  CLRF   x49
08284:  CLRF   x4A
08286:  CLRF   x4B
08288:  CLRF   x4C
0828A:  CLRF   x4D
0828C:  CLRF   x4E
0828E:  CLRF   x4F
08290:  CLRF   x50
08292:  CLRF   x51
08294:  CLRF   x52
08296:  CLRF   x53
08298:  CLRF   x54
0829A:  CLRF   x55
0829C:  CLRF   x56
0829E:  CLRF   x57
082A0:  CLRF   x58
082A2:  CLRF   x59
082A4:  CLRF   x5A
082A6:  CLRF   x5B
082A8:  CLRF   x5C
082AA:  CLRF   x5D
082AC:  CLRF   x5E
082AE:  CLRF   x5F
082B0:  CLRF   x60
082B2:  CLRF   x61
082B4:  CLRF   x62
082B6:  CLRF   x63
082B8:  CLRF   x64
082BA:  CLRF   x65
082BC:  CLRF   x66
082BE:  CLRF   x67
082C0:  CLRF   x68
082C2:  CLRF   x69
082C4:  CLRF   x6A
082C6:  CLRF   x6B
082C8:  CLRF   x6C
082CA:  CLRF   x6D
082CC:  CLRF   x6E
082CE:  CLRF   x6F
082D0:  CLRF   x70
082D2:  CLRF   x71
082D4:  CLRF   x72
082D6:  CLRF   x73
082D8:  CLRF   x74
082DA:  CLRF   x75
082DC:  CLRF   x76
082DE:  CLRF   x77
082E0:  CLRF   x78
082E2:  CLRF   x79
082E4:  CLRF   x7A
082E6:  CLRF   x7B
082E8:  CLRF   x7C
082EA:  CLRF   x7D
082EC:  CLRF   x7E
082EE:  CLRF   x7F
082F0:  CLRF   x80
082F2:  CLRF   x81
082F4:  CLRF   x82
082F6:  CLRF   x83
082F8:  CLRF   x84
082FA:  CLRF   x85
082FC:  CLRF   x86
082FE:  CLRF   x87
08300:  CLRF   x88
08302:  CLRF   x89
08304:  CLRF   x8A
08306:  CLRF   x8B
08308:  CLRF   x8C
0830A:  CLRF   x8D
0830C:  CLRF   x8E
0830E:  CLRF   x8F
08310:  CLRF   x90
08312:  CLRF   x91
08314:  CLRF   x92
08316:  CLRF   x93
08318:  CLRF   x94
0831A:  CLRF   x95
0831C:  CLRF   x96
0831E:  CLRF   x97
08320:  CLRF   x98
08322:  CLRF   x99
08324:  CLRF   x9A
08326:  CLRF   x9B
08328:  CLRF   x9C
0832A:  CLRF   x9D
0832C:  CLRF   x9E
0832E:  CLRF   x9F
08330:  CLRF   xA0
08332:  CLRF   xA1
08334:  CLRF   xA2
08336:  CLRF   xA3
08338:  CLRF   xA4
0833A:  CLRF   xA5
0833C:  CLRF   xA6
0833E:  CLRF   xA7
08340:  CLRF   xA8
08342:  CLRF   xA9
08344:  CLRF   xAA
08346:  CLRF   xAB
08348:  CLRF   xAC
0834A:  CLRF   xAD
0834C:  CLRF   xAE
0834E:  CLRF   xAF
08350:  CLRF   xB0
08352:  CLRF   xB1
08354:  CLRF   xB2
08356:  CLRF   xB3
08358:  CLRF   xB4
0835A:  CLRF   xB5
0835C:  CLRF   xB6
0835E:  CLRF   xB7
08360:  CLRF   xB8
08362:  CLRF   xB9
08364:  CLRF   xBA
08366:  CLRF   xBB
08368:  CLRF   xBC
0836A:  CLRF   xBD
0836C:  CLRF   xBE
0836E:  CLRF   xBF
08370:  CLRF   xC0
08372:  CLRF   xC1
08374:  CLRF   xC2
08376:  CLRF   xC3
08378:  CLRF   xC4
0837A:  CLRF   xC5
0837C:  CLRF   xC6
0837E:  CLRF   xC7
08380:  CLRF   xC8
08382:  CLRF   xC9
08384:  CLRF   xCA
08386:  CLRF   xCB
08388:  CLRF   xCC
0838A:  CLRF   xCD
0838C:  CLRF   xCE
0838E:  CLRF   xCF
08390:  CLRF   xD0
08392:  CLRF   xD1
08394:  CLRF   xD2
08396:  CLRF   xD3
08398:  CLRF   xD4
0839A:  CLRF   xD5
0839C:  CLRF   xD6
0839E:  CLRF   xD7
083A0:  CLRF   xD8
083A2:  CLRF   xD9
083A4:  CLRF   xDA
083A6:  CLRF   xDB
083A8:  CLRF   xDC
083AA:  CLRF   xDD
083AC:  CLRF   xDE
083AE:  CLRF   xDF
083B0:  CLRF   xE0
083B2:  CLRF   xE1
083B4:  CLRF   xE2
083B6:  CLRF   xE3
083B8:  CLRF   xE4
083BA:  CLRF   xE5
083BC:  CLRF   xE6
083BE:  CLRF   xE7
083C0:  CLRF   xE8
083C2:  CLRF   xE9
083C4:  CLRF   xEA
083C6:  CLRF   xEB
083C8:  CLRF   xEC
083CA:  CLRF   xED
083CC:  CLRF   xEE
083CE:  CLRF   xEF
083D0:  CLRF   xF0
083D2:  CLRF   xF1
083D4:  CLRF   xF2
083D6:  CLRF   xF3
083D8:  CLRF   xF4
083DA:  CLRF   xF5
083DC:  CLRF   xF6
083DE:  CLRF   xF7
083E0:  CLRF   xF8
083E2:  CLRF   xF9
083E4:  CLRF   xFA
083E6:  CLRF   xFB
083E8:  CLRF   xFC
083EA:  CLRF   xFD
083EC:  CLRF   xFE
083EE:  CLRF   xFF
083F0:  MOVLB  4
083F2:  CLRF   x00
083F4:  CLRF   x01
083F6:  CLRF   x02
083F8:  CLRF   x03
083FA:  CLRF   x04
083FC:  CLRF   x05
083FE:  CLRF   x06
08400:  CLRF   x07
08402:  CLRF   x08
08404:  CLRF   x09
08406:  CLRF   x0A
08408:  CLRF   x0B
0840A:  CLRF   x0C
0840C:  CLRF   x0D
0840E:  CLRF   x0E
08410:  CLRF   x0F
08412:  CLRF   x10
08414:  CLRF   x11
08416:  CLRF   x12
08418:  CLRF   x13
0841A:  CLRF   x14
0841C:  CLRF   x15
0841E:  CLRF   x16
08420:  CLRF   x17
08422:  CLRF   x18
08424:  CLRF   x19
08426:  CLRF   x1A
08428:  CLRF   x1B
0842A:  CLRF   x1C
0842C:  CLRF   x1D
0842E:  CLRF   x1E
08430:  CLRF   x1F
08432:  CLRF   x20
08434:  CLRF   x21
08436:  CLRF   x22
08438:  CLRF   x23
0843A:  CLRF   x24
0843C:  CLRF   x25
0843E:  CLRF   x26
08440:  CLRF   x27
08442:  CLRF   x28
08444:  CLRF   x29
08446:  CLRF   x2A
08448:  CLRF   x2B
0844A:  CLRF   x2C
0844C:  CLRF   x2D
0844E:  CLRF   x2E
08450:  CLRF   x2F
08452:  CLRF   x30
08454:  CLRF   x31
08456:  CLRF   x32
08458:  CLRF   x33
0845A:  CLRF   x34
0845C:  CLRF   x35
0845E:  CLRF   x36
08460:  CLRF   x37
08462:  CLRF   x38
08464:  CLRF   x39
08466:  CLRF   x3A
08468:  CLRF   x3B
0846A:  CLRF   x3C
0846C:  CLRF   x3D
0846E:  CLRF   x3E
08470:  CLRF   x3F
08472:  CLRF   x40
08474:  CLRF   x41
08476:  CLRF   x42
08478:  CLRF   x43
0847A:  CLRF   x44
0847C:  CLRF   x45
0847E:  CLRF   x46
08480:  CLRF   x47
08482:  CLRF   x48
08484:  CLRF   x49
08486:  CLRF   x4A
08488:  CLRF   x4B
0848A:  CLRF   x4C
0848C:  CLRF   x4D
0848E:  CLRF   x4E
08490:  CLRF   x4F
08492:  CLRF   x50
08494:  CLRF   x51
08496:  CLRF   x52
08498:  CLRF   x53
0849A:  CLRF   x54
0849C:  CLRF   x55
0849E:  CLRF   x56
084A0:  CLRF   x57
084A2:  CLRF   x58
084A4:  CLRF   x59
084A6:  CLRF   x5A
084A8:  CLRF   x5B
084AA:  CLRF   x5C
084AC:  CLRF   x5D
084AE:  CLRF   x5E
084B0:  CLRF   x5F
084B2:  CLRF   x60
084B4:  CLRF   x61
084B6:  CLRF   x62
084B8:  CLRF   x63
084BA:  CLRF   x64
084BC:  CLRF   x65
084BE:  CLRF   x66
084C0:  CLRF   x67
084C2:  CLRF   x68
084C4:  CLRF   x69
084C6:  CLRF   x6A
084C8:  CLRF   x6B
084CA:  CLRF   x6C
084CC:  CLRF   x6D
084CE:  CLRF   x6E
084D0:  CLRF   x6F
084D2:  CLRF   x70
084D4:  CLRF   x71
084D6:  CLRF   x72
084D8:  CLRF   x73
084DA:  CLRF   x74
084DC:  CLRF   x75
084DE:  CLRF   x76
084E0:  CLRF   x77
084E2:  CLRF   x78
084E4:  CLRF   x79
084E6:  CLRF   x7A
084E8:  CLRF   x7B
084EA:  CLRF   x7C
084EC:  CLRF   x7D
084EE:  CLRF   x7E
084F0:  CLRF   x7F
084F2:  CLRF   x80
084F4:  CLRF   x81
084F6:  CLRF   x82
084F8:  CLRF   x83
084FA:  CLRF   x84
084FC:  CLRF   x85
084FE:  CLRF   x86
08500:  CLRF   x87
08502:  CLRF   x88
08504:  CLRF   x89
08506:  CLRF   x8A
08508:  CLRF   x8B
0850A:  CLRF   x8C
0850C:  CLRF   x8D
0850E:  CLRF   x8E
08510:  CLRF   x8F
08512:  CLRF   x90
08514:  CLRF   x91
08516:  CLRF   x92
08518:  CLRF   x93
0851A:  CLRF   x94
0851C:  CLRF   x95
0851E:  CLRF   x96
08520:  CLRF   x97
08522:  CLRF   x98
08524:  CLRF   x99
08526:  CLRF   x9A
08528:  CLRF   x9B
0852A:  CLRF   x9C
0852C:  CLRF   x9D
0852E:  CLRF   x9E
08530:  CLRF   x9F
08532:  CLRF   xA0
08534:  CLRF   xA1
08536:  CLRF   xA2
08538:  CLRF   xA3
0853A:  CLRF   xA4
0853C:  CLRF   xA5
0853E:  CLRF   xA6
08540:  CLRF   xA7
08542:  CLRF   xA8
08544:  CLRF   xA9
08546:  CLRF   xAA
08548:  CLRF   xAB
0854A:  CLRF   xAC
0854C:  CLRF   xAD
0854E:  CLRF   xAE
08550:  CLRF   xAF
08552:  CLRF   xB0
08554:  CLRF   xB1
08556:  CLRF   xB2
08558:  CLRF   xB3
0855A:  CLRF   xB4
0855C:  CLRF   xB5
0855E:  CLRF   xB6
08560:  CLRF   xB7
08562:  CLRF   xB8
08564:  CLRF   xB9
08566:  CLRF   xBA
08568:  CLRF   xBB
0856A:  CLRF   xBC
0856C:  CLRF   xBD
0856E:  CLRF   xBE
08570:  CLRF   xBF
08572:  CLRF   xC0
08574:  CLRF   xC1
08576:  CLRF   xC2
08578:  CLRF   xC3
0857A:  CLRF   xC4
0857C:  CLRF   xC5
0857E:  CLRF   xC6
08580:  CLRF   xC7
08582:  CLRF   xC8
08584:  CLRF   xC9
08586:  CLRF   xCA
08588:  CLRF   xCB
0858A:  CLRF   xCC
0858C:  CLRF   xCD
0858E:  CLRF   xCE
08590:  CLRF   xCF
08592:  CLRF   xD0
08594:  CLRF   xD1
08596:  CLRF   xD2
08598:  CLRF   xD3
0859A:  CLRF   xD4
0859C:  CLRF   xD5
0859E:  CLRF   xD6
085A0:  CLRF   xD7
085A2:  CLRF   xD8
085A4:  CLRF   xD9
085A6:  CLRF   xDA
085A8:  CLRF   xDB
085AA:  CLRF   xDC
085AC:  CLRF   xDD
085AE:  CLRF   xDE
085B0:  CLRF   xDF
085B2:  CLRF   xE0
085B4:  CLRF   xE1
085B6:  CLRF   xE2
085B8:  CLRF   xE3
085BA:  CLRF   xE4
085BC:  CLRF   xE5
085BE:  CLRF   xE6
085C0:  CLRF   xE7
085C2:  CLRF   xE8
085C4:  CLRF   xE9
085C6:  CLRF   xEA
085C8:  CLRF   xEB
085CA:  CLRF   xEC
085CC:  CLRF   xED
085CE:  CLRF   xEE
085D0:  CLRF   xEF
085D2:  CLRF   xF0
085D4:  CLRF   xF1
085D6:  CLRF   xF2
085D8:  CLRF   xF3
085DA:  CLRF   xF4
085DC:  CLRF   xF5
085DE:  CLRF   xF6
085E0:  CLRF   xF7
085E2:  CLRF   xF8
085E4:  CLRF   xF9
085E6:  CLRF   xFA
085E8:  CLRF   xFB
085EA:  CLRF   xFC
085EC:  CLRF   xFD
085EE:  CLRF   xFE
085F0:  CLRF   xFF
085F2:  MOVLB  5
085F4:  CLRF   x00
085F6:  CLRF   x01
085F8:  CLRF   x02
085FA:  CLRF   x03
085FC:  CLRF   x04
085FE:  CLRF   x05
08600:  CLRF   x06
08602:  CLRF   x07
08604:  CLRF   x08
08606:  CLRF   x09
08608:  CLRF   x0A
0860A:  CLRF   x0B
0860C:  CLRF   x0C
0860E:  CLRF   x0D
08610:  CLRF   x0E
08612:  CLRF   x0F
08614:  CLRF   x10
08616:  CLRF   x11
08618:  CLRF   x12
0861A:  CLRF   x13
0861C:  CLRF   x14
0861E:  CLRF   x15
08620:  CLRF   x16
08622:  CLRF   x17
08624:  CLRF   x18
08626:  CLRF   x19
08628:  CLRF   x1A
0862A:  CLRF   x1B
0862C:  CLRF   x1C
0862E:  CLRF   x1D
08630:  CLRF   x1E
08632:  CLRF   x1F
08634:  CLRF   x20
08636:  CLRF   x21
08638:  CLRF   x22
0863A:  CLRF   x23
0863C:  CLRF   x24
0863E:  CLRF   x25
08640:  CLRF   x26
08642:  CLRF   x27
08644:  CLRF   x28
08646:  CLRF   x29
08648:  CLRF   x2A
0864A:  CLRF   x2B
0864C:  CLRF   x2C
0864E:  CLRF   x2D
08650:  CLRF   x2E
08652:  CLRF   x2F
08654:  CLRF   x30
08656:  CLRF   x31
08658:  CLRF   x32
0865A:  CLRF   x33
0865C:  CLRF   x34
0865E:  CLRF   x35
08660:  CLRF   x36
08662:  CLRF   x37
08664:  CLRF   x38
08666:  CLRF   x39
08668:  CLRF   x3A
0866A:  CLRF   x3B
0866C:  CLRF   x3C
0866E:  CLRF   x3D
08670:  CLRF   x3E
08672:  CLRF   x3F
08674:  CLRF   x40
08676:  CLRF   x41
08678:  CLRF   x42
0867A:  CLRF   x43
0867C:  CLRF   x44
0867E:  CLRF   x45
08680:  CLRF   x46
08682:  CLRF   x47
08684:  CLRF   x48
08686:  CLRF   x49
08688:  CLRF   x4A
0868A:  CLRF   x4B
0868C:  CLRF   x4C
0868E:  CLRF   x4D
08690:  CLRF   x4E
08692:  CLRF   x4F
08694:  CLRF   x50
08696:  CLRF   x51
08698:  CLRF   x52
0869A:  CLRF   x53
0869C:  CLRF   x54
0869E:  CLRF   x55
086A0:  CLRF   x56
086A2:  CLRF   x57
086A4:  CLRF   x58
086A6:  CLRF   x59
086A8:  CLRF   x5A
086AA:  CLRF   x5B
086AC:  CLRF   x5C
086AE:  CLRF   x5D
086B0:  CLRF   x5E
086B2:  CLRF   x5F
086B4:  CLRF   x60
086B6:  CLRF   x61
086B8:  CLRF   x62
086BA:  CLRF   x63
086BC:  CLRF   x64
086BE:  CLRF   x65
086C0:  CLRF   x66
086C2:  CLRF   x67
086C4:  CLRF   x68
086C6:  CLRF   x69
086C8:  CLRF   x6A
086CA:  CLRF   x6B
086CC:  CLRF   x6C
086CE:  CLRF   x6D
086D0:  CLRF   x6E
086D2:  CLRF   x6F
086D4:  CLRF   x70
086D6:  CLRF   x71
086D8:  CLRF   x72
086DA:  CLRF   x73
086DC:  CLRF   x74
086DE:  CLRF   x75
086E0:  CLRF   x76
086E2:  CLRF   x77
086E4:  CLRF   x78
086E6:  CLRF   x79
086E8:  CLRF   x7A
086EA:  CLRF   x7B
086EC:  CLRF   x7C
086EE:  CLRF   x7D
086F0:  CLRF   x7E
086F2:  CLRF   x7F
086F4:  CLRF   x80
086F6:  CLRF   x81
086F8:  CLRF   x82
086FA:  CLRF   x83
086FC:  CLRF   x84
086FE:  CLRF   x85
08700:  CLRF   x86
08702:  CLRF   x87
08704:  CLRF   x88
08706:  CLRF   x89
08708:  CLRF   x8A
0870A:  CLRF   x8B
0870C:  CLRF   x8C
0870E:  CLRF   x8D
08710:  CLRF   x8E
08712:  CLRF   x8F
08714:  CLRF   x90
08716:  CLRF   x91
08718:  CLRF   x92
0871A:  CLRF   x93
0871C:  CLRF   x94
0871E:  CLRF   x95
08720:  CLRF   x96
08722:  CLRF   x97
08724:  CLRF   x98
08726:  CLRF   x99
08728:  CLRF   x9A
0872A:  CLRF   x9B
0872C:  CLRF   x9C
0872E:  CLRF   x9D
08730:  CLRF   x9E
08732:  CLRF   x9F
08734:  CLRF   xA0
08736:  CLRF   xA1
08738:  CLRF   xA2
0873A:  CLRF   xA3
0873C:  CLRF   xA4
0873E:  CLRF   xA5
08740:  CLRF   xA6
08742:  CLRF   xA7
08744:  CLRF   xA8
08746:  CLRF   xA9
08748:  CLRF   xAA
0874A:  CLRF   xAB
0874C:  CLRF   xAC
0874E:  CLRF   xAD
08750:  CLRF   xAE
08752:  CLRF   xAF
08754:  CLRF   xB0
08756:  CLRF   xB1
08758:  CLRF   xB2
0875A:  CLRF   xB3
0875C:  CLRF   xB4
0875E:  CLRF   xB5
08760:  CLRF   xB6
08762:  CLRF   xB7
08764:  CLRF   xB8
08766:  CLRF   xB9
08768:  CLRF   xBA
0876A:  CLRF   xBB
0876C:  CLRF   xBC
0876E:  CLRF   xBD
08770:  CLRF   xBE
08772:  CLRF   xBF
08774:  CLRF   xC0
08776:  CLRF   xC1
08778:  CLRF   xC2
0877A:  CLRF   xC3
0877C:  CLRF   xC4
0877E:  CLRF   xC5
08780:  CLRF   xC6
08782:  CLRF   xC7
08784:  CLRF   xC8
08786:  CLRF   xC9
08788:  CLRF   xCA
0878A:  CLRF   xCB
0878C:  CLRF   xCC
0878E:  CLRF   xCD
08790:  CLRF   xCE
08792:  CLRF   xCF
08794:  CLRF   xD0
08796:  CLRF   xD1
08798:  CLRF   xD2
0879A:  CLRF   xD3
0879C:  CLRF   xD4
0879E:  CLRF   xD5
087A0:  CLRF   xD6
087A2:  CLRF   xD7
087A4:  CLRF   xD8
087A6:  CLRF   xD9
087A8:  CLRF   xDA
087AA:  CLRF   xDB
087AC:  CLRF   xDC
087AE:  CLRF   xDD
087B0:  CLRF   xDE
087B2:  CLRF   xDF
087B4:  CLRF   xE0
087B6:  CLRF   xE1
087B8:  CLRF   xE2
087BA:  CLRF   xE3
087BC:  CLRF   xE4
087BE:  CLRF   xE5
087C0:  CLRF   xE6
087C2:  CLRF   xE7
087C4:  CLRF   xE8
087C6:  CLRF   xE9
087C8:  CLRF   xEA
087CA:  CLRF   xEB
087CC:  CLRF   xEC
087CE:  CLRF   xED
087D0:  CLRF   xEE
087D2:  CLRF   xEF
087D4:  CLRF   xF0
087D6:  CLRF   xF1
087D8:  CLRF   xF2
087DA:  CLRF   xF3
087DC:  CLRF   xF4
087DE:  CLRF   xF5
087E0:  CLRF   xF6
087E2:  CLRF   xF7
087E4:  CLRF   xF8
087E6:  CLRF   xF9
087E8:  CLRF   xFA
087EA:  CLRF   xFB
087EC:  CLRF   xFC
087EE:  CLRF   xFD
087F0:  CLRF   xFE
087F2:  CLRF   xFF
087F4:  MOVLB  6
087F6:  CLRF   x00
087F8:  CLRF   x01
087FA:  CLRF   x02
087FC:  CLRF   x03
087FE:  CLRF   x04
08800:  CLRF   x05
08802:  CLRF   x06
08804:  CLRF   x07
08806:  CLRF   x08
08808:  CLRF   x09
0880A:  CLRF   x0A
0880C:  CLRF   x0B
0880E:  CLRF   x0C
08810:  CLRF   x0D
08812:  CLRF   x0E
08814:  CLRF   x0F
08816:  CLRF   x10
08818:  CLRF   x11
0881A:  CLRF   x12
0881C:  CLRF   x13
0881E:  CLRF   x14
08820:  CLRF   x15
08822:  CLRF   x16
08824:  CLRF   x17
08826:  CLRF   x18
08828:  CLRF   x19
0882A:  CLRF   x1A
0882C:  CLRF   x1B
0882E:  CLRF   x1C
08830:  CLRF   x1D
08832:  CLRF   x1E
08834:  CLRF   x1F
08836:  CLRF   x20
08838:  CLRF   x21
0883A:  CLRF   x22
0883C:  CLRF   x23
0883E:  CLRF   x24
08840:  CLRF   x25
08842:  CLRF   x26
08844:  CLRF   x27
08846:  CLRF   x28
08848:  CLRF   x29
0884A:  CLRF   x2A
0884C:  CLRF   x2B
0884E:  CLRF   x2C
08850:  CLRF   x2D
08852:  CLRF   x2E
08854:  CLRF   x2F
08856:  CLRF   x30
08858:  CLRF   x31
0885A:  CLRF   x32
0885C:  CLRF   x33
0885E:  CLRF   x34
08860:  CLRF   x35
08862:  CLRF   x36
08864:  CLRF   x37
08866:  CLRF   x38
08868:  CLRF   x39
0886A:  CLRF   x3A
0886C:  CLRF   x3B
0886E:  CLRF   x3C
08870:  CLRF   x3D
08872:  CLRF   x3E
08874:  CLRF   x3F
08876:  CLRF   x40
08878:  CLRF   x41
0887A:  CLRF   x42
0887C:  CLRF   x43
0887E:  CLRF   x44
08880:  CLRF   x45
08882:  CLRF   x46
08884:  CLRF   x47
08886:  CLRF   x48
08888:  CLRF   x49
0888A:  CLRF   x4A
0888C:  CLRF   x4B
0888E:  CLRF   x4C
08890:  CLRF   x4D
08892:  CLRF   x4E
08894:  CLRF   x4F
08896:  CLRF   x50
08898:  CLRF   x51
0889A:  CLRF   x52
0889C:  CLRF   x53
0889E:  CLRF   x54
088A0:  CLRF   x55
088A2:  CLRF   x56
088A4:  CLRF   x57
088A6:  CLRF   x58
088A8:  CLRF   x59
088AA:  CLRF   x5A
088AC:  CLRF   x5B
088AE:  CLRF   x5C
088B0:  CLRF   x5D
088B2:  CLRF   x5E
088B4:  CLRF   x5F
088B6:  CLRF   x60
088B8:  CLRF   x61
088BA:  CLRF   x62
088BC:  CLRF   x63
088BE:  CLRF   x64
088C0:  CLRF   x65
088C2:  CLRF   x66
....................     port1.port_num = 1;
088C4:  MOVLW  01
088C6:  MOVLB  2
088C8:  MOVWF  x67
....................     port1.sweep_step = 0;
088CA:  CLRF   x69
088CC:  CLRF   x68
....................     port1.active = 1;
088CE:  MOVLB  6
088D0:  BSF    x66.0
.................... 
....................     // Init Port2
....................     sweep_config_t port2 = {0};
088D2:  CLRF   x67
088D4:  CLRF   x68
088D6:  CLRF   x69
088D8:  CLRF   x6A
088DA:  CLRF   x6B
088DC:  CLRF   x6C
088DE:  CLRF   x6D
088E0:  CLRF   x6E
088E2:  CLRF   x6F
088E4:  CLRF   x70
088E6:  CLRF   x71
088E8:  CLRF   x72
088EA:  CLRF   x73
088EC:  CLRF   x74
088EE:  CLRF   x75
088F0:  CLRF   x76
088F2:  CLRF   x77
088F4:  CLRF   x78
088F6:  CLRF   x79
088F8:  CLRF   x7A
088FA:  CLRF   x7B
088FC:  CLRF   x7C
088FE:  CLRF   x7D
08900:  CLRF   x7E
08902:  CLRF   x7F
08904:  CLRF   x80
08906:  CLRF   x81
08908:  CLRF   x82
0890A:  CLRF   x83
0890C:  CLRF   x84
0890E:  CLRF   x85
08910:  CLRF   x86
08912:  CLRF   x87
08914:  CLRF   x88
08916:  CLRF   x89
08918:  CLRF   x8A
0891A:  CLRF   x8B
0891C:  CLRF   x8C
0891E:  CLRF   x8D
08920:  CLRF   x8E
08922:  CLRF   x8F
08924:  CLRF   x90
08926:  CLRF   x91
08928:  CLRF   x92
0892A:  CLRF   x93
0892C:  CLRF   x94
0892E:  CLRF   x95
08930:  CLRF   x96
08932:  CLRF   x97
08934:  CLRF   x98
08936:  CLRF   x99
08938:  CLRF   x9A
0893A:  CLRF   x9B
0893C:  CLRF   x9C
0893E:  CLRF   x9D
08940:  CLRF   x9E
08942:  CLRF   x9F
08944:  CLRF   xA0
08946:  CLRF   xA1
08948:  CLRF   xA2
0894A:  CLRF   xA3
0894C:  CLRF   xA4
0894E:  CLRF   xA5
08950:  CLRF   xA6
08952:  CLRF   xA7
08954:  CLRF   xA8
08956:  CLRF   xA9
08958:  CLRF   xAA
0895A:  CLRF   xAB
0895C:  CLRF   xAC
0895E:  CLRF   xAD
08960:  CLRF   xAE
08962:  CLRF   xAF
08964:  CLRF   xB0
08966:  CLRF   xB1
08968:  CLRF   xB2
0896A:  CLRF   xB3
0896C:  CLRF   xB4
0896E:  CLRF   xB5
08970:  CLRF   xB6
08972:  CLRF   xB7
08974:  CLRF   xB8
08976:  CLRF   xB9
08978:  CLRF   xBA
0897A:  CLRF   xBB
0897C:  CLRF   xBC
0897E:  CLRF   xBD
08980:  CLRF   xBE
08982:  CLRF   xBF
08984:  CLRF   xC0
08986:  CLRF   xC1
08988:  CLRF   xC2
0898A:  CLRF   xC3
0898C:  CLRF   xC4
0898E:  CLRF   xC5
08990:  CLRF   xC6
08992:  CLRF   xC7
08994:  CLRF   xC8
08996:  CLRF   xC9
08998:  CLRF   xCA
0899A:  CLRF   xCB
0899C:  CLRF   xCC
0899E:  CLRF   xCD
089A0:  CLRF   xCE
089A2:  CLRF   xCF
089A4:  CLRF   xD0
089A6:  CLRF   xD1
089A8:  CLRF   xD2
089AA:  CLRF   xD3
089AC:  CLRF   xD4
089AE:  CLRF   xD5
089B0:  CLRF   xD6
089B2:  CLRF   xD7
089B4:  CLRF   xD8
089B6:  CLRF   xD9
089B8:  CLRF   xDA
089BA:  CLRF   xDB
089BC:  CLRF   xDC
089BE:  CLRF   xDD
089C0:  CLRF   xDE
089C2:  CLRF   xDF
089C4:  CLRF   xE0
089C6:  CLRF   xE1
089C8:  CLRF   xE2
089CA:  CLRF   xE3
089CC:  CLRF   xE4
089CE:  CLRF   xE5
089D0:  CLRF   xE6
089D2:  CLRF   xE7
089D4:  CLRF   xE8
089D6:  CLRF   xE9
089D8:  CLRF   xEA
089DA:  CLRF   xEB
089DC:  CLRF   xEC
089DE:  CLRF   xED
089E0:  CLRF   xEE
089E2:  CLRF   xEF
089E4:  CLRF   xF0
089E6:  CLRF   xF1
089E8:  CLRF   xF2
089EA:  CLRF   xF3
089EC:  CLRF   xF4
089EE:  CLRF   xF5
089F0:  CLRF   xF6
089F2:  CLRF   xF7
089F4:  CLRF   xF8
089F6:  CLRF   xF9
089F8:  CLRF   xFA
089FA:  CLRF   xFB
089FC:  CLRF   xFC
089FE:  CLRF   xFD
08A00:  CLRF   xFE
08A02:  CLRF   xFF
08A04:  MOVLB  7
08A06:  CLRF   x00
08A08:  CLRF   x01
08A0A:  CLRF   x02
08A0C:  CLRF   x03
08A0E:  CLRF   x04
08A10:  CLRF   x05
08A12:  CLRF   x06
08A14:  CLRF   x07
08A16:  CLRF   x08
08A18:  CLRF   x09
08A1A:  CLRF   x0A
08A1C:  CLRF   x0B
08A1E:  CLRF   x0C
08A20:  CLRF   x0D
08A22:  CLRF   x0E
08A24:  CLRF   x0F
08A26:  CLRF   x10
08A28:  CLRF   x11
08A2A:  CLRF   x12
08A2C:  CLRF   x13
08A2E:  CLRF   x14
08A30:  CLRF   x15
08A32:  CLRF   x16
08A34:  CLRF   x17
08A36:  CLRF   x18
08A38:  CLRF   x19
08A3A:  CLRF   x1A
08A3C:  CLRF   x1B
08A3E:  CLRF   x1C
08A40:  CLRF   x1D
08A42:  CLRF   x1E
08A44:  CLRF   x1F
08A46:  CLRF   x20
08A48:  CLRF   x21
08A4A:  CLRF   x22
08A4C:  CLRF   x23
08A4E:  CLRF   x24
08A50:  CLRF   x25
08A52:  CLRF   x26
08A54:  CLRF   x27
08A56:  CLRF   x28
08A58:  CLRF   x29
08A5A:  CLRF   x2A
08A5C:  CLRF   x2B
08A5E:  CLRF   x2C
08A60:  CLRF   x2D
08A62:  CLRF   x2E
08A64:  CLRF   x2F
08A66:  CLRF   x30
08A68:  CLRF   x31
08A6A:  CLRF   x32
08A6C:  CLRF   x33
08A6E:  CLRF   x34
08A70:  CLRF   x35
08A72:  CLRF   x36
08A74:  CLRF   x37
08A76:  CLRF   x38
08A78:  CLRF   x39
08A7A:  CLRF   x3A
08A7C:  CLRF   x3B
08A7E:  CLRF   x3C
08A80:  CLRF   x3D
08A82:  CLRF   x3E
08A84:  CLRF   x3F
08A86:  CLRF   x40
08A88:  CLRF   x41
08A8A:  CLRF   x42
08A8C:  CLRF   x43
08A8E:  CLRF   x44
08A90:  CLRF   x45
08A92:  CLRF   x46
08A94:  CLRF   x47
08A96:  CLRF   x48
08A98:  CLRF   x49
08A9A:  CLRF   x4A
08A9C:  CLRF   x4B
08A9E:  CLRF   x4C
08AA0:  CLRF   x4D
08AA2:  CLRF   x4E
08AA4:  CLRF   x4F
08AA6:  CLRF   x50
08AA8:  CLRF   x51
08AAA:  CLRF   x52
08AAC:  CLRF   x53
08AAE:  CLRF   x54
08AB0:  CLRF   x55
08AB2:  CLRF   x56
08AB4:  CLRF   x57
08AB6:  CLRF   x58
08AB8:  CLRF   x59
08ABA:  CLRF   x5A
08ABC:  CLRF   x5B
08ABE:  CLRF   x5C
08AC0:  CLRF   x5D
08AC2:  CLRF   x5E
08AC4:  CLRF   x5F
08AC6:  CLRF   x60
08AC8:  CLRF   x61
08ACA:  CLRF   x62
08ACC:  CLRF   x63
08ACE:  CLRF   x64
08AD0:  CLRF   x65
08AD2:  CLRF   x66
08AD4:  CLRF   x67
08AD6:  CLRF   x68
08AD8:  CLRF   x69
08ADA:  CLRF   x6A
08ADC:  CLRF   x6B
08ADE:  CLRF   x6C
08AE0:  CLRF   x6D
08AE2:  CLRF   x6E
08AE4:  CLRF   x6F
08AE6:  CLRF   x70
08AE8:  CLRF   x71
08AEA:  CLRF   x72
08AEC:  CLRF   x73
08AEE:  CLRF   x74
08AF0:  CLRF   x75
08AF2:  CLRF   x76
08AF4:  CLRF   x77
08AF6:  CLRF   x78
08AF8:  CLRF   x79
08AFA:  CLRF   x7A
08AFC:  CLRF   x7B
08AFE:  CLRF   x7C
08B00:  CLRF   x7D
08B02:  CLRF   x7E
08B04:  CLRF   x7F
08B06:  CLRF   x80
08B08:  CLRF   x81
08B0A:  CLRF   x82
08B0C:  CLRF   x83
08B0E:  CLRF   x84
08B10:  CLRF   x85
08B12:  CLRF   x86
08B14:  CLRF   x87
08B16:  CLRF   x88
08B18:  CLRF   x89
08B1A:  CLRF   x8A
08B1C:  CLRF   x8B
08B1E:  CLRF   x8C
08B20:  CLRF   x8D
08B22:  CLRF   x8E
08B24:  CLRF   x8F
08B26:  CLRF   x90
08B28:  CLRF   x91
08B2A:  CLRF   x92
08B2C:  CLRF   x93
08B2E:  CLRF   x94
08B30:  CLRF   x95
08B32:  CLRF   x96
08B34:  CLRF   x97
08B36:  CLRF   x98
08B38:  CLRF   x99
08B3A:  CLRF   x9A
08B3C:  CLRF   x9B
08B3E:  CLRF   x9C
08B40:  CLRF   x9D
08B42:  CLRF   x9E
08B44:  CLRF   x9F
08B46:  CLRF   xA0
08B48:  CLRF   xA1
08B4A:  CLRF   xA2
08B4C:  CLRF   xA3
08B4E:  CLRF   xA4
08B50:  CLRF   xA5
08B52:  CLRF   xA6
08B54:  CLRF   xA7
08B56:  CLRF   xA8
08B58:  CLRF   xA9
08B5A:  CLRF   xAA
08B5C:  CLRF   xAB
08B5E:  CLRF   xAC
08B60:  CLRF   xAD
08B62:  CLRF   xAE
08B64:  CLRF   xAF
08B66:  CLRF   xB0
08B68:  CLRF   xB1
08B6A:  CLRF   xB2
08B6C:  CLRF   xB3
08B6E:  CLRF   xB4
08B70:  CLRF   xB5
08B72:  CLRF   xB6
08B74:  CLRF   xB7
08B76:  CLRF   xB8
08B78:  CLRF   xB9
08B7A:  CLRF   xBA
08B7C:  CLRF   xBB
08B7E:  CLRF   xBC
08B80:  CLRF   xBD
08B82:  CLRF   xBE
08B84:  CLRF   xBF
08B86:  CLRF   xC0
08B88:  CLRF   xC1
08B8A:  CLRF   xC2
08B8C:  CLRF   xC3
08B8E:  CLRF   xC4
08B90:  CLRF   xC5
08B92:  CLRF   xC6
08B94:  CLRF   xC7
08B96:  CLRF   xC8
08B98:  CLRF   xC9
08B9A:  CLRF   xCA
08B9C:  CLRF   xCB
08B9E:  CLRF   xCC
08BA0:  CLRF   xCD
08BA2:  CLRF   xCE
08BA4:  CLRF   xCF
08BA6:  CLRF   xD0
08BA8:  CLRF   xD1
08BAA:  CLRF   xD2
08BAC:  CLRF   xD3
08BAE:  CLRF   xD4
08BB0:  CLRF   xD5
08BB2:  CLRF   xD6
08BB4:  CLRF   xD7
08BB6:  CLRF   xD8
08BB8:  CLRF   xD9
08BBA:  CLRF   xDA
08BBC:  CLRF   xDB
08BBE:  CLRF   xDC
08BC0:  CLRF   xDD
08BC2:  CLRF   xDE
08BC4:  CLRF   xDF
08BC6:  CLRF   xE0
08BC8:  CLRF   xE1
08BCA:  CLRF   xE2
08BCC:  CLRF   xE3
08BCE:  CLRF   xE4
08BD0:  CLRF   xE5
08BD2:  CLRF   xE6
08BD4:  CLRF   xE7
08BD6:  CLRF   xE8
08BD8:  CLRF   xE9
08BDA:  CLRF   xEA
08BDC:  CLRF   xEB
08BDE:  CLRF   xEC
08BE0:  CLRF   xED
08BE2:  CLRF   xEE
08BE4:  CLRF   xEF
08BE6:  CLRF   xF0
08BE8:  CLRF   xF1
08BEA:  CLRF   xF2
08BEC:  CLRF   xF3
08BEE:  CLRF   xF4
08BF0:  CLRF   xF5
08BF2:  CLRF   xF6
08BF4:  CLRF   xF7
08BF6:  CLRF   xF8
08BF8:  CLRF   xF9
08BFA:  CLRF   xFA
08BFC:  CLRF   xFB
08BFE:  CLRF   xFC
08C00:  CLRF   xFD
08C02:  CLRF   xFE
08C04:  CLRF   xFF
08C06:  MOVLB  8
08C08:  CLRF   x00
08C0A:  CLRF   x01
08C0C:  CLRF   x02
08C0E:  CLRF   x03
08C10:  CLRF   x04
08C12:  CLRF   x05
08C14:  CLRF   x06
08C16:  CLRF   x07
08C18:  CLRF   x08
08C1A:  CLRF   x09
08C1C:  CLRF   x0A
08C1E:  CLRF   x0B
08C20:  CLRF   x0C
08C22:  CLRF   x0D
08C24:  CLRF   x0E
08C26:  CLRF   x0F
08C28:  CLRF   x10
08C2A:  CLRF   x11
08C2C:  CLRF   x12
08C2E:  CLRF   x13
08C30:  CLRF   x14
08C32:  CLRF   x15
08C34:  CLRF   x16
08C36:  CLRF   x17
08C38:  CLRF   x18
08C3A:  CLRF   x19
08C3C:  CLRF   x1A
08C3E:  CLRF   x1B
08C40:  CLRF   x1C
08C42:  CLRF   x1D
08C44:  CLRF   x1E
08C46:  CLRF   x1F
08C48:  CLRF   x20
08C4A:  CLRF   x21
08C4C:  CLRF   x22
08C4E:  CLRF   x23
08C50:  CLRF   x24
08C52:  CLRF   x25
08C54:  CLRF   x26
08C56:  CLRF   x27
08C58:  CLRF   x28
08C5A:  CLRF   x29
08C5C:  CLRF   x2A
08C5E:  CLRF   x2B
08C60:  CLRF   x2C
08C62:  CLRF   x2D
08C64:  CLRF   x2E
08C66:  CLRF   x2F
08C68:  CLRF   x30
08C6A:  CLRF   x31
08C6C:  CLRF   x32
08C6E:  CLRF   x33
08C70:  CLRF   x34
08C72:  CLRF   x35
08C74:  CLRF   x36
08C76:  CLRF   x37
08C78:  CLRF   x38
08C7A:  CLRF   x39
08C7C:  CLRF   x3A
08C7E:  CLRF   x3B
08C80:  CLRF   x3C
08C82:  CLRF   x3D
08C84:  CLRF   x3E
08C86:  CLRF   x3F
08C88:  CLRF   x40
08C8A:  CLRF   x41
08C8C:  CLRF   x42
08C8E:  CLRF   x43
08C90:  CLRF   x44
08C92:  CLRF   x45
08C94:  CLRF   x46
08C96:  CLRF   x47
08C98:  CLRF   x48
08C9A:  CLRF   x49
08C9C:  CLRF   x4A
08C9E:  CLRF   x4B
08CA0:  CLRF   x4C
08CA2:  CLRF   x4D
08CA4:  CLRF   x4E
08CA6:  CLRF   x4F
08CA8:  CLRF   x50
08CAA:  CLRF   x51
08CAC:  CLRF   x52
08CAE:  CLRF   x53
08CB0:  CLRF   x54
08CB2:  CLRF   x55
08CB4:  CLRF   x56
08CB6:  CLRF   x57
08CB8:  CLRF   x58
08CBA:  CLRF   x59
08CBC:  CLRF   x5A
08CBE:  CLRF   x5B
08CC0:  CLRF   x5C
08CC2:  CLRF   x5D
08CC4:  CLRF   x5E
08CC6:  CLRF   x5F
08CC8:  CLRF   x60
08CCA:  CLRF   x61
08CCC:  CLRF   x62
08CCE:  CLRF   x63
08CD0:  CLRF   x64
08CD2:  CLRF   x65
08CD4:  CLRF   x66
08CD6:  CLRF   x67
08CD8:  CLRF   x68
08CDA:  CLRF   x69
08CDC:  CLRF   x6A
08CDE:  CLRF   x6B
08CE0:  CLRF   x6C
08CE2:  CLRF   x6D
08CE4:  CLRF   x6E
08CE6:  CLRF   x6F
08CE8:  CLRF   x70
08CEA:  CLRF   x71
08CEC:  CLRF   x72
08CEE:  CLRF   x73
08CF0:  CLRF   x74
08CF2:  CLRF   x75
08CF4:  CLRF   x76
08CF6:  CLRF   x77
08CF8:  CLRF   x78
08CFA:  CLRF   x79
08CFC:  CLRF   x7A
08CFE:  CLRF   x7B
08D00:  CLRF   x7C
08D02:  CLRF   x7D
08D04:  CLRF   x7E
08D06:  CLRF   x7F
08D08:  CLRF   x80
08D0A:  CLRF   x81
08D0C:  CLRF   x82
08D0E:  CLRF   x83
08D10:  CLRF   x84
08D12:  CLRF   x85
08D14:  CLRF   x86
08D16:  CLRF   x87
08D18:  CLRF   x88
08D1A:  CLRF   x89
08D1C:  CLRF   x8A
08D1E:  CLRF   x8B
08D20:  CLRF   x8C
08D22:  CLRF   x8D
08D24:  CLRF   x8E
08D26:  CLRF   x8F
08D28:  CLRF   x90
08D2A:  CLRF   x91
08D2C:  CLRF   x92
08D2E:  CLRF   x93
08D30:  CLRF   x94
08D32:  CLRF   x95
08D34:  CLRF   x96
08D36:  CLRF   x97
08D38:  CLRF   x98
08D3A:  CLRF   x99
08D3C:  CLRF   x9A
08D3E:  CLRF   x9B
08D40:  CLRF   x9C
08D42:  CLRF   x9D
08D44:  CLRF   x9E
08D46:  CLRF   x9F
08D48:  CLRF   xA0
08D4A:  CLRF   xA1
08D4C:  CLRF   xA2
08D4E:  CLRF   xA3
08D50:  CLRF   xA4
08D52:  CLRF   xA5
08D54:  CLRF   xA6
08D56:  CLRF   xA7
08D58:  CLRF   xA8
08D5A:  CLRF   xA9
08D5C:  CLRF   xAA
08D5E:  CLRF   xAB
08D60:  CLRF   xAC
08D62:  CLRF   xAD
08D64:  CLRF   xAE
08D66:  CLRF   xAF
08D68:  CLRF   xB0
08D6A:  CLRF   xB1
08D6C:  CLRF   xB2
08D6E:  CLRF   xB3
08D70:  CLRF   xB4
08D72:  CLRF   xB5
08D74:  CLRF   xB6
08D76:  CLRF   xB7
08D78:  CLRF   xB8
08D7A:  CLRF   xB9
08D7C:  CLRF   xBA
08D7E:  CLRF   xBB
08D80:  CLRF   xBC
08D82:  CLRF   xBD
08D84:  CLRF   xBE
08D86:  CLRF   xBF
08D88:  CLRF   xC0
08D8A:  CLRF   xC1
08D8C:  CLRF   xC2
08D8E:  CLRF   xC3
08D90:  CLRF   xC4
08D92:  CLRF   xC5
08D94:  CLRF   xC6
08D96:  CLRF   xC7
08D98:  CLRF   xC8
08D9A:  CLRF   xC9
08D9C:  CLRF   xCA
08D9E:  CLRF   xCB
08DA0:  CLRF   xCC
08DA2:  CLRF   xCD
08DA4:  CLRF   xCE
08DA6:  CLRF   xCF
08DA8:  CLRF   xD0
08DAA:  CLRF   xD1
08DAC:  CLRF   xD2
08DAE:  CLRF   xD3
08DB0:  CLRF   xD4
08DB2:  CLRF   xD5
08DB4:  CLRF   xD6
08DB6:  CLRF   xD7
08DB8:  CLRF   xD8
08DBA:  CLRF   xD9
08DBC:  CLRF   xDA
08DBE:  CLRF   xDB
08DC0:  CLRF   xDC
08DC2:  CLRF   xDD
08DC4:  CLRF   xDE
08DC6:  CLRF   xDF
08DC8:  CLRF   xE0
08DCA:  CLRF   xE1
08DCC:  CLRF   xE2
08DCE:  CLRF   xE3
08DD0:  CLRF   xE4
08DD2:  CLRF   xE5
08DD4:  CLRF   xE6
08DD6:  CLRF   xE7
08DD8:  CLRF   xE8
08DDA:  CLRF   xE9
08DDC:  CLRF   xEA
08DDE:  CLRF   xEB
08DE0:  CLRF   xEC
08DE2:  CLRF   xED
08DE4:  CLRF   xEE
08DE6:  CLRF   xEF
08DE8:  CLRF   xF0
08DEA:  CLRF   xF1
08DEC:  CLRF   xF2
08DEE:  CLRF   xF3
08DF0:  CLRF   xF4
08DF2:  CLRF   xF5
08DF4:  CLRF   xF6
08DF6:  CLRF   xF7
08DF8:  CLRF   xF8
08DFA:  CLRF   xF9
08DFC:  CLRF   xFA
08DFE:  CLRF   xFB
08E00:  CLRF   xFC
08E02:  CLRF   xFD
08E04:  CLRF   xFE
08E06:  CLRF   xFF
08E08:  MOVLB  9
08E0A:  CLRF   x00
08E0C:  CLRF   x01
08E0E:  CLRF   x02
08E10:  CLRF   x03
08E12:  CLRF   x04
08E14:  CLRF   x05
08E16:  CLRF   x06
08E18:  CLRF   x07
08E1A:  CLRF   x08
08E1C:  CLRF   x09
08E1E:  CLRF   x0A
08E20:  CLRF   x0B
08E22:  CLRF   x0C
08E24:  CLRF   x0D
08E26:  CLRF   x0E
08E28:  CLRF   x0F
08E2A:  CLRF   x10
08E2C:  CLRF   x11
08E2E:  CLRF   x12
08E30:  CLRF   x13
08E32:  CLRF   x14
08E34:  CLRF   x15
08E36:  CLRF   x16
08E38:  CLRF   x17
08E3A:  CLRF   x18
08E3C:  CLRF   x19
08E3E:  CLRF   x1A
08E40:  CLRF   x1B
08E42:  CLRF   x1C
08E44:  CLRF   x1D
08E46:  CLRF   x1E
08E48:  CLRF   x1F
08E4A:  CLRF   x20
08E4C:  CLRF   x21
08E4E:  CLRF   x22
08E50:  CLRF   x23
08E52:  CLRF   x24
08E54:  CLRF   x25
08E56:  CLRF   x26
08E58:  CLRF   x27
08E5A:  CLRF   x28
08E5C:  CLRF   x29
08E5E:  CLRF   x2A
08E60:  CLRF   x2B
08E62:  CLRF   x2C
08E64:  CLRF   x2D
08E66:  CLRF   x2E
08E68:  CLRF   x2F
08E6A:  CLRF   x30
08E6C:  CLRF   x31
08E6E:  CLRF   x32
08E70:  CLRF   x33
08E72:  CLRF   x34
08E74:  CLRF   x35
08E76:  CLRF   x36
08E78:  CLRF   x37
08E7A:  CLRF   x38
08E7C:  CLRF   x39
08E7E:  CLRF   x3A
08E80:  CLRF   x3B
08E82:  CLRF   x3C
08E84:  CLRF   x3D
08E86:  CLRF   x3E
08E88:  CLRF   x3F
08E8A:  CLRF   x40
08E8C:  CLRF   x41
08E8E:  CLRF   x42
08E90:  CLRF   x43
08E92:  CLRF   x44
08E94:  CLRF   x45
08E96:  CLRF   x46
08E98:  CLRF   x47
08E9A:  CLRF   x48
08E9C:  CLRF   x49
08E9E:  CLRF   x4A
08EA0:  CLRF   x4B
08EA2:  CLRF   x4C
08EA4:  CLRF   x4D
08EA6:  CLRF   x4E
08EA8:  CLRF   x4F
08EAA:  CLRF   x50
08EAC:  CLRF   x51
08EAE:  CLRF   x52
08EB0:  CLRF   x53
08EB2:  CLRF   x54
08EB4:  CLRF   x55
08EB6:  CLRF   x56
08EB8:  CLRF   x57
08EBA:  CLRF   x58
08EBC:  CLRF   x59
08EBE:  CLRF   x5A
08EC0:  CLRF   x5B
08EC2:  CLRF   x5C
08EC4:  CLRF   x5D
08EC6:  CLRF   x5E
08EC8:  CLRF   x5F
08ECA:  CLRF   x60
08ECC:  CLRF   x61
08ECE:  CLRF   x62
08ED0:  CLRF   x63
08ED2:  CLRF   x64
08ED4:  CLRF   x65
08ED6:  CLRF   x66
08ED8:  CLRF   x67
08EDA:  CLRF   x68
08EDC:  CLRF   x69
08EDE:  CLRF   x6A
08EE0:  CLRF   x6B
08EE2:  CLRF   x6C
08EE4:  CLRF   x6D
08EE6:  CLRF   x6E
08EE8:  CLRF   x6F
08EEA:  CLRF   x70
08EEC:  CLRF   x71
08EEE:  CLRF   x72
08EF0:  CLRF   x73
08EF2:  CLRF   x74
08EF4:  CLRF   x75
08EF6:  CLRF   x76
08EF8:  CLRF   x77
08EFA:  CLRF   x78
08EFC:  CLRF   x79
08EFE:  CLRF   x7A
08F00:  CLRF   x7B
08F02:  CLRF   x7C
08F04:  CLRF   x7D
08F06:  CLRF   x7E
08F08:  CLRF   x7F
08F0A:  CLRF   x80
08F0C:  CLRF   x81
08F0E:  CLRF   x82
08F10:  CLRF   x83
08F12:  CLRF   x84
08F14:  CLRF   x85
08F16:  CLRF   x86
08F18:  CLRF   x87
08F1A:  CLRF   x88
08F1C:  CLRF   x89
08F1E:  CLRF   x8A
08F20:  CLRF   x8B
08F22:  CLRF   x8C
08F24:  CLRF   x8D
08F26:  CLRF   x8E
08F28:  CLRF   x8F
08F2A:  CLRF   x90
08F2C:  CLRF   x91
08F2E:  CLRF   x92
08F30:  CLRF   x93
08F32:  CLRF   x94
08F34:  CLRF   x95
08F36:  CLRF   x96
08F38:  CLRF   x97
08F3A:  CLRF   x98
08F3C:  CLRF   x99
08F3E:  CLRF   x9A
08F40:  CLRF   x9B
08F42:  CLRF   x9C
08F44:  CLRF   x9D
08F46:  CLRF   x9E
08F48:  CLRF   x9F
08F4A:  CLRF   xA0
08F4C:  CLRF   xA1
08F4E:  CLRF   xA2
08F50:  CLRF   xA3
08F52:  CLRF   xA4
08F54:  CLRF   xA5
08F56:  CLRF   xA6
08F58:  CLRF   xA7
08F5A:  CLRF   xA8
08F5C:  CLRF   xA9
08F5E:  CLRF   xAA
08F60:  CLRF   xAB
08F62:  CLRF   xAC
08F64:  CLRF   xAD
08F66:  CLRF   xAE
08F68:  CLRF   xAF
08F6A:  CLRF   xB0
08F6C:  CLRF   xB1
08F6E:  CLRF   xB2
08F70:  CLRF   xB3
08F72:  CLRF   xB4
08F74:  CLRF   xB5
08F76:  CLRF   xB6
08F78:  CLRF   xB7
08F7A:  CLRF   xB8
08F7C:  CLRF   xB9
08F7E:  CLRF   xBA
08F80:  CLRF   xBB
08F82:  CLRF   xBC
08F84:  CLRF   xBD
08F86:  CLRF   xBE
08F88:  CLRF   xBF
08F8A:  CLRF   xC0
08F8C:  CLRF   xC1
08F8E:  CLRF   xC2
08F90:  CLRF   xC3
08F92:  CLRF   xC4
08F94:  CLRF   xC5
08F96:  CLRF   xC6
08F98:  CLRF   xC7
08F9A:  CLRF   xC8
08F9C:  CLRF   xC9
08F9E:  CLRF   xCA
08FA0:  CLRF   xCB
08FA2:  CLRF   xCC
08FA4:  CLRF   xCD
08FA6:  CLRF   xCE
08FA8:  CLRF   xCF
08FAA:  CLRF   xD0
08FAC:  CLRF   xD1
08FAE:  CLRF   xD2
08FB0:  CLRF   xD3
08FB2:  CLRF   xD4
08FB4:  CLRF   xD5
08FB6:  CLRF   xD6
08FB8:  CLRF   xD7
08FBA:  CLRF   xD8
08FBC:  CLRF   xD9
08FBE:  CLRF   xDA
08FC0:  CLRF   xDB
08FC2:  CLRF   xDC
08FC4:  CLRF   xDD
08FC6:  CLRF   xDE
08FC8:  CLRF   xDF
08FCA:  CLRF   xE0
08FCC:  CLRF   xE1
08FCE:  CLRF   xE2
08FD0:  CLRF   xE3
08FD2:  CLRF   xE4
08FD4:  CLRF   xE5
08FD6:  CLRF   xE6
08FD8:  CLRF   xE7
08FDA:  CLRF   xE8
08FDC:  CLRF   xE9
08FDE:  CLRF   xEA
08FE0:  CLRF   xEB
08FE2:  CLRF   xEC
08FE4:  CLRF   xED
08FE6:  CLRF   xEE
08FE8:  CLRF   xEF
08FEA:  CLRF   xF0
08FEC:  CLRF   xF1
08FEE:  CLRF   xF2
08FF0:  CLRF   xF3
08FF2:  CLRF   xF4
08FF4:  CLRF   xF5
08FF6:  CLRF   xF6
08FF8:  CLRF   xF7
08FFA:  CLRF   xF8
08FFC:  CLRF   xF9
08FFE:  CLRF   xFA
09000:  CLRF   xFB
09002:  CLRF   xFC
09004:  CLRF   xFD
09006:  CLRF   xFE
09008:  CLRF   xFF
0900A:  MOVLB  A
0900C:  CLRF   x00
0900E:  CLRF   x01
09010:  CLRF   x02
09012:  CLRF   x03
09014:  CLRF   x04
09016:  CLRF   x05
09018:  CLRF   x06
0901A:  CLRF   x07
0901C:  CLRF   x08
0901E:  CLRF   x09
09020:  CLRF   x0A
09022:  CLRF   x0B
09024:  CLRF   x0C
09026:  CLRF   x0D
09028:  CLRF   x0E
0902A:  CLRF   x0F
0902C:  CLRF   x10
0902E:  CLRF   x11
09030:  CLRF   x12
09032:  CLRF   x13
09034:  CLRF   x14
09036:  CLRF   x15
09038:  CLRF   x16
0903A:  CLRF   x17
0903C:  CLRF   x18
0903E:  CLRF   x19
09040:  CLRF   x1A
09042:  CLRF   x1B
09044:  CLRF   x1C
09046:  CLRF   x1D
09048:  CLRF   x1E
0904A:  CLRF   x1F
0904C:  CLRF   x20
0904E:  CLRF   x21
09050:  CLRF   x22
09052:  CLRF   x23
09054:  CLRF   x24
09056:  CLRF   x25
09058:  CLRF   x26
0905A:  CLRF   x27
0905C:  CLRF   x28
0905E:  CLRF   x29
09060:  CLRF   x2A
09062:  CLRF   x2B
09064:  CLRF   x2C
09066:  CLRF   x2D
09068:  CLRF   x2E
0906A:  CLRF   x2F
0906C:  CLRF   x30
0906E:  CLRF   x31
09070:  CLRF   x32
09072:  CLRF   x33
09074:  CLRF   x34
09076:  CLRF   x35
09078:  CLRF   x36
0907A:  CLRF   x37
0907C:  CLRF   x38
0907E:  CLRF   x39
09080:  CLRF   x3A
09082:  CLRF   x3B
09084:  CLRF   x3C
09086:  CLRF   x3D
09088:  CLRF   x3E
0908A:  CLRF   x3F
0908C:  CLRF   x40
0908E:  CLRF   x41
09090:  CLRF   x42
09092:  CLRF   x43
09094:  CLRF   x44
09096:  CLRF   x45
09098:  CLRF   x46
0909A:  CLRF   x47
0909C:  CLRF   x48
0909E:  CLRF   x49
090A0:  CLRF   x4A
090A2:  CLRF   x4B
090A4:  CLRF   x4C
090A6:  CLRF   x4D
090A8:  CLRF   x4E
090AA:  CLRF   x4F
090AC:  CLRF   x50
090AE:  CLRF   x51
090B0:  CLRF   x52
090B2:  CLRF   x53
090B4:  CLRF   x54
090B6:  CLRF   x55
090B8:  CLRF   x56
090BA:  CLRF   x57
090BC:  CLRF   x58
090BE:  CLRF   x59
090C0:  CLRF   x5A
090C2:  CLRF   x5B
090C4:  CLRF   x5C
090C6:  CLRF   x5D
090C8:  CLRF   x5E
090CA:  CLRF   x5F
090CC:  CLRF   x60
090CE:  CLRF   x61
090D0:  CLRF   x62
090D2:  CLRF   x63
090D4:  CLRF   x64
090D6:  CLRF   x65
090D8:  CLRF   x66
....................     port2.port_num = 2;
090DA:  MOVLW  02
090DC:  MOVLB  6
090DE:  MOVWF  x67
....................     port2.sweep_step = 0;
090E0:  CLRF   x69
090E2:  CLRF   x68
....................     port2.active = 1;
090E4:  MOVLB  A
090E6:  BSF    x66.0
.................... 
....................     int16 count = 0;
090E8:  CLRF   x68
090EA:  CLRF   x67
....................     
....................     // Initialize DACs to 0
....................     mcp4901_1_write(1);
090EC:  CLRF   x76
090EE:  MOVLW  01
090F0:  MOVWF  x75
090F2:  MOVLB  0
090F4:  CALL   2352
....................     mcp4901_2_write(1);
090F8:  MOVLB  A
090FA:  CLRF   x76
090FC:  MOVLW  01
090FE:  MOVWF  x75
09100:  MOVLB  0
09102:  CALL   2394
.................... 
....................     iv_env_t measured_data = create_meas_data();
09106:  CALL   78F6
0910A:  MOVFF  02,03
0910E:  MOVF   01,W
09110:  MOVWF  FE1
09112:  MOVFF  03,FE2
09116:  MOVLW  0A
09118:  MOVWF  FEA
0911A:  MOVLW  69
0911C:  MOVWF  FE9
0911E:  MOVLW  0C
09120:  MOVWF  01
09122:  MOVFF  FE6,FEE
09126:  DECFSZ 01,F
09128:  GOTO   9122
....................     while (port1.active || port2.active)
0912C:  MOVLB  6
0912E:  BTFSS  x66.0
09130:  BRA    9138
09132:  MOVLB  0
09134:  GOTO   9148
09138:  MOVLB  0
0913A:  MOVLB  A
0913C:  BTFSC  x66.0
0913E:  BRA    9146
09140:  MOVLB  0
09142:  GOTO   9410
09146:  MOVLB  0
....................     {
....................         mcp4901_1_write(count);
09148:  MOVFF  A68,A76
0914C:  MOVFF  A67,A75
09150:  CALL   2352
....................         mcp4901_2_write(count);
09154:  MOVFF  A68,A76
09158:  MOVFF  A67,A75
0915C:  CALL   2394
....................         delay_us(10); 
09160:  MOVLW  0D
09162:  MOVWF  00
09164:  DECFSZ 00,F
09166:  BRA    9164
....................         if (port1.active) {
09168:  MOVLB  6
0916A:  BTFSC  x66.0
0916C:  BRA    9174
0916E:  MOVLB  0
09170:  GOTO   92A4
09174:  MOVLB  0
....................             port1.data_buffer[count].voltage = ad7490_read(ADC_CIGS1_AMP);
09176:  MOVLB  A
09178:  RLCF   x67,W
0917A:  MOVWF  02
0917C:  RLCF   x68,W
0917E:  MOVWF  03
09180:  RLCF   02,F
09182:  RLCF   03,F
09184:  MOVLW  FC
09186:  ANDWF  02,F
09188:  MOVF   02,W
0918A:  ADDLW  6A
0918C:  MOVWF  01
0918E:  MOVLW  02
09190:  ADDWFC 03,F
09192:  MOVF   01,W
09194:  MOVWF  x77
09196:  MOVFF  03,A78
0919A:  MOVLW  02
0919C:  MOVWF  x87
0919E:  MOVLB  0
091A0:  CALL   1F7E
091A4:  MOVFF  A78,FEA
091A8:  MOVFF  A77,FE9
091AC:  MOVFF  02,FEC
091B0:  MOVF   FED,F
091B2:  MOVFF  01,FEF
....................             port1.data_buffer[count].current = ad7490_read(ADC_CIGS1_CURR);
091B6:  MOVLB  A
091B8:  RLCF   x67,W
091BA:  MOVWF  02
091BC:  RLCF   x68,W
091BE:  MOVWF  03
091C0:  RLCF   02,F
091C2:  RLCF   03,F
091C4:  MOVLW  FC
091C6:  ANDWF  02,F
091C8:  MOVF   02,W
091CA:  ADDLW  03
091CC:  MOVWF  x75
091CE:  MOVLW  00
091D0:  ADDWFC 03,W
091D2:  MOVWF  x76
091D4:  MOVLW  02
091D6:  ADDWF  x75,W
091D8:  MOVWF  01
091DA:  MOVLW  00
091DC:  ADDWFC x76,W
091DE:  MOVWF  03
091E0:  MOVF   01,W
091E2:  ADDLW  67
091E4:  MOVWF  01
091E6:  MOVLW  02
091E8:  ADDWFC 03,F
091EA:  MOVF   01,W
091EC:  MOVWF  x75
091EE:  MOVFF  03,A76
091F2:  MOVLW  01
091F4:  MOVWF  x87
091F6:  MOVLB  0
091F8:  CALL   1F7E
091FC:  MOVFF  A76,FEA
09200:  MOVFF  A75,FE9
09204:  MOVFF  02,FEC
09208:  MOVF   FED,F
0920A:  MOVFF  01,FEF
....................             port1.sweep_step = count + 1; 
0920E:  MOVLW  01
09210:  MOVLB  A
09212:  ADDWF  x67,W
09214:  MOVLB  2
09216:  MOVWF  x68
09218:  MOVLW  00
0921A:  MOVLB  A
0921C:  ADDWFC x68,W
0921E:  MOVLB  2
09220:  MOVWF  x69
....................             if (port1.data_buffer[count-1].current < curr_limit) {
09222:  MOVLW  01
09224:  MOVLB  A
09226:  SUBWF  x67,W
09228:  MOVWF  x75
0922A:  MOVLW  00
0922C:  SUBWFB x68,W
0922E:  MOVWF  x76
09230:  RLCF   x75,W
09232:  MOVWF  02
09234:  RLCF   x76,W
09236:  MOVWF  03
09238:  RLCF   02,F
0923A:  RLCF   03,F
0923C:  MOVLW  FC
0923E:  ANDWF  02,F
09240:  MOVF   02,W
09242:  ADDLW  03
09244:  MOVWF  x75
09246:  MOVLW  00
09248:  ADDWFC 03,W
0924A:  MOVWF  x76
0924C:  MOVLW  02
0924E:  ADDWF  x75,W
09250:  MOVWF  01
09252:  MOVLW  00
09254:  ADDWFC x76,W
09256:  MOVWF  03
09258:  MOVF   01,W
0925A:  ADDLW  67
0925C:  MOVWF  FE9
0925E:  MOVLW  02
09260:  ADDWFC 03,W
09262:  MOVWF  FEA
09264:  MOVFF  FEC,A76
09268:  MOVF   FED,F
0926A:  MOVFF  FEF,A75
0926E:  MOVF   x76,W
09270:  MOVLB  2
09272:  SUBWF  x64,W
09274:  BTFSC  FD8.0
09276:  BRA    927E
09278:  MOVLB  0
0927A:  GOTO   92A4
0927E:  MOVLB  0
09280:  BTFSS  FD8.2
09282:  GOTO   929A
09286:  MOVLB  2
09288:  MOVF   x63,W
0928A:  MOVLB  A
0928C:  SUBWF  x75,W
0928E:  BTFSS  FD8.0
09290:  BRA    9298
09292:  MOVLB  0
09294:  GOTO   92A4
09298:  MOVLB  0
....................                 port1.active = 0;
0929A:  MOVLB  6
0929C:  BCF    x66.0
....................                 disconnect_port1();
0929E:  MOVLB  0
092A0:  CALL   7978
....................             }
....................         }
....................         if (port2.active) {
092A4:  MOVLB  A
092A6:  BTFSC  x66.0
092A8:  BRA    92B0
092AA:  MOVLB  0
092AC:  GOTO   93E0
092B0:  MOVLB  0
....................             port2.data_buffer[count].voltage = ad7490_read(ADC_CIGS2_AMP);
092B2:  MOVLB  A
092B4:  RLCF   x67,W
092B6:  MOVWF  02
092B8:  RLCF   x68,W
092BA:  MOVWF  03
092BC:  RLCF   02,F
092BE:  RLCF   03,F
092C0:  MOVLW  FC
092C2:  ANDWF  02,F
092C4:  MOVF   02,W
092C6:  ADDLW  6A
092C8:  MOVWF  01
092CA:  MOVLW  06
092CC:  ADDWFC 03,F
092CE:  MOVF   01,W
092D0:  MOVWF  x77
092D2:  MOVFF  03,A78
092D6:  MOVLW  06
092D8:  MOVWF  x87
092DA:  MOVLB  0
092DC:  CALL   1F7E
092E0:  MOVFF  A78,FEA
092E4:  MOVFF  A77,FE9
092E8:  MOVFF  02,FEC
092EC:  MOVF   FED,F
092EE:  MOVFF  01,FEF
....................             port2.data_buffer[count].current = ad7490_read(ADC_CIGS2_CURR);
092F2:  MOVLB  A
092F4:  RLCF   x67,W
092F6:  MOVWF  02
092F8:  RLCF   x68,W
092FA:  MOVWF  03
092FC:  RLCF   02,F
092FE:  RLCF   03,F
09300:  MOVLW  FC
09302:  ANDWF  02,F
09304:  MOVF   02,W
09306:  ADDLW  03
09308:  MOVWF  x75
0930A:  MOVLW  00
0930C:  ADDWFC 03,W
0930E:  MOVWF  x76
09310:  MOVLW  02
09312:  ADDWF  x75,W
09314:  MOVWF  01
09316:  MOVLW  00
09318:  ADDWFC x76,W
0931A:  MOVWF  03
0931C:  MOVF   01,W
0931E:  ADDLW  67
09320:  MOVWF  01
09322:  MOVLW  06
09324:  ADDWFC 03,F
09326:  MOVF   01,W
09328:  MOVWF  x75
0932A:  MOVFF  03,A76
0932E:  MOVLW  05
09330:  MOVWF  x87
09332:  MOVLB  0
09334:  CALL   1F7E
09338:  MOVFF  A76,FEA
0933C:  MOVFF  A75,FE9
09340:  MOVFF  02,FEC
09344:  MOVF   FED,F
09346:  MOVFF  01,FEF
....................             port2.sweep_step = count + 1;
0934A:  MOVLW  01
0934C:  MOVLB  A
0934E:  ADDWF  x67,W
09350:  MOVLB  6
09352:  MOVWF  x68
09354:  MOVLW  00
09356:  MOVLB  A
09358:  ADDWFC x68,W
0935A:  MOVLB  6
0935C:  MOVWF  x69
....................             if (port2.data_buffer[count-1].current < curr_limit) {
0935E:  MOVLW  01
09360:  MOVLB  A
09362:  SUBWF  x67,W
09364:  MOVWF  x75
09366:  MOVLW  00
09368:  SUBWFB x68,W
0936A:  MOVWF  x76
0936C:  RLCF   x75,W
0936E:  MOVWF  02
09370:  RLCF   x76,W
09372:  MOVWF  03
09374:  RLCF   02,F
09376:  RLCF   03,F
09378:  MOVLW  FC
0937A:  ANDWF  02,F
0937C:  MOVF   02,W
0937E:  ADDLW  03
09380:  MOVWF  x75
09382:  MOVLW  00
09384:  ADDWFC 03,W
09386:  MOVWF  x76
09388:  MOVLW  02
0938A:  ADDWF  x75,W
0938C:  MOVWF  01
0938E:  MOVLW  00
09390:  ADDWFC x76,W
09392:  MOVWF  03
09394:  MOVF   01,W
09396:  ADDLW  67
09398:  MOVWF  FE9
0939A:  MOVLW  06
0939C:  ADDWFC 03,W
0939E:  MOVWF  FEA
093A0:  MOVFF  FEC,A76
093A4:  MOVF   FED,F
093A6:  MOVFF  FEF,A75
093AA:  MOVF   x76,W
093AC:  MOVLB  2
093AE:  SUBWF  x64,W
093B0:  BTFSC  FD8.0
093B2:  BRA    93BA
093B4:  MOVLB  0
093B6:  GOTO   93E0
093BA:  MOVLB  0
093BC:  BTFSS  FD8.2
093BE:  GOTO   93D6
093C2:  MOVLB  2
093C4:  MOVF   x63,W
093C6:  MOVLB  A
093C8:  SUBWF  x75,W
093CA:  BTFSS  FD8.0
093CC:  BRA    93D4
093CE:  MOVLB  0
093D0:  GOTO   93E0
093D4:  MOVLB  0
....................                 port2.active = 0;
093D6:  MOVLB  A
093D8:  BCF    x66.0
....................                 disconnect_port2();
093DA:  MOVLB  0
093DC:  CALL   7980
....................             } 
....................         }
....................         count++;
093E0:  MOVLB  A
093E2:  INCF   x67,F
093E4:  BTFSC  FD8.2
093E6:  INCF   x68,F
....................         if (count >= 255) {
093E8:  MOVF   x68,F
093EA:  BTFSC  FD8.2
093EC:  BRA    93F4
093EE:  MOVLB  0
093F0:  GOTO   9408
093F4:  MOVLB  0
093F6:  MOVLB  A
093F8:  MOVF   x67,W
093FA:  SUBLW  FE
093FC:  BTFSS  FD8.0
093FE:  BRA    9406
09400:  MOVLB  0
09402:  GOTO   940C
09406:  MOVLB  0
....................             // fprintf(PC, "Maximum step count reached: %ld\r\n", count);
....................             break;
09408:  GOTO   9410
....................         }
0940C:  GOTO   912C
....................     }
.................... 
....................     // Ensure all connections are disabled
....................     disconnect_port1();
09410:  CALL   7978
....................     disconnect_port2();
09414:  CALL   7980
....................     log_meas_data(&measured_data, &port1);
09418:  MOVLW  0A
0941A:  MOVLB  A
0941C:  MOVWF  x76
0941E:  MOVLW  69
09420:  MOVWF  x75
09422:  MOVLW  02
09424:  MOVWF  x78
09426:  MOVLW  67
09428:  MOVWF  x77
0942A:  MOVLB  0
0942C:  CALL   7988
....................     log_meas_data(&measured_data, &port2);
09430:  MOVLW  0A
09432:  MOVLB  A
09434:  MOVWF  x76
09436:  MOVLW  69
09438:  MOVWF  x75
0943A:  MOVLW  06
0943C:  MOVWF  x78
0943E:  MOVLW  67
09440:  MOVWF  x77
09442:  MOVLB  0
09444:  CALL   7988
09448:  GOTO   98EA (RETURN)
.................... }
.................... 
.................... 
.................... void log_meas_data(iv_env_t *measured_data_ptr, sweep_config_t *port_data_ptr)
*
07A0A:  CLRF   xB9
.................... {
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; 
*
07988:  MOVLB  A
0798A:  CLRF   x79
0798C:  CLRF   x7A
0798E:  CLRF   x7B
07990:  CLRF   x7C
07992:  CLRF   x7D
07994:  CLRF   x7E
07996:  CLRF   x7F
07998:  CLRF   x80
0799A:  CLRF   x81
0799C:  CLRF   x82
0799E:  CLRF   x83
079A0:  CLRF   x84
079A2:  CLRF   x85
079A4:  CLRF   x86
079A6:  CLRF   x87
079A8:  CLRF   x88
079AA:  CLRF   x89
079AC:  CLRF   x8A
079AE:  CLRF   x8B
079B0:  CLRF   x8C
079B2:  CLRF   x8D
079B4:  CLRF   x8E
079B6:  CLRF   x8F
079B8:  CLRF   x90
079BA:  CLRF   x91
079BC:  CLRF   x92
079BE:  CLRF   x93
079C0:  CLRF   x94
079C2:  CLRF   x95
079C4:  CLRF   x96
079C6:  CLRF   x97
079C8:  CLRF   x98
079CA:  CLRF   x99
079CC:  CLRF   x9A
079CE:  CLRF   x9B
079D0:  CLRF   x9C
079D2:  CLRF   x9D
079D4:  CLRF   x9E
079D6:  CLRF   x9F
079D8:  CLRF   xA0
079DA:  CLRF   xA1
079DC:  CLRF   xA2
079DE:  CLRF   xA3
079E0:  CLRF   xA4
079E2:  CLRF   xA5
079E4:  CLRF   xA6
079E6:  CLRF   xA7
079E8:  CLRF   xA8
079EA:  CLRF   xA9
079EC:  CLRF   xAA
079EE:  CLRF   xAB
079F0:  CLRF   xAC
079F2:  CLRF   xAD
079F4:  CLRF   xAE
079F6:  CLRF   xAF
079F8:  CLRF   xB0
079FA:  CLRF   xB1
079FC:  CLRF   xB2
079FE:  CLRF   xB3
07A00:  CLRF   xB4
07A02:  CLRF   xB5
07A04:  CLRF   xB6
07A06:  CLRF   xB7
07A08:  CLRF   xB8
....................     unsigned int8 packetdata_index = 0;
.................... 
....................     // ==== ヘッダ＋環境データ書き込み ====
....................     packetdata[packetdata_index++] = START_MAKER;  // 最初のパケットだけ
*
07A0C:  MOVF   xB9,W
07A0E:  INCF   xB9,F
07A10:  CLRF   03
07A12:  ADDLW  79
07A14:  MOVWF  FE9
07A16:  MOVLW  0A
07A18:  ADDWFC 03,W
07A1A:  MOVWF  FEA
07A1C:  SETF   FEF
....................     // timeヘッダ
....................     packetdata[packetdata_index++] = (measured_data_ptr->time >> 24) & 0xFF;
07A1E:  MOVF   xB9,W
07A20:  INCF   xB9,F
07A22:  CLRF   03
07A24:  ADDLW  79
07A26:  MOVWF  01
07A28:  MOVLW  0A
07A2A:  ADDWFC 03,F
07A2C:  MOVF   01,W
07A2E:  MOVWF  xC1
07A30:  MOVFF  03,AC2
07A34:  MOVF   x75,W
07A36:  MOVWF  FE9
07A38:  MOVF   x76,W
07A3A:  MOVWF  FEA
07A3C:  MOVFF  FEF,AC3
07A40:  MOVFF  FEC,AC4
07A44:  MOVFF  FEC,AC5
07A48:  MOVFF  FEC,AC6
07A4C:  MOVF   FED,F
07A4E:  MOVF   FED,F
07A50:  MOVF   FED,F
07A52:  MOVFF  AC6,AC3
07A56:  CLRF   xC4
07A58:  CLRF   xC5
07A5A:  CLRF   xC6
07A5C:  MOVF   xC3,W
07A5E:  MOVWF  00
07A60:  CLRF   01
07A62:  CLRF   02
07A64:  CLRF   03
07A66:  MOVFF  03,AC6
07A6A:  MOVFF  02,AC5
07A6E:  MOVFF  01,AC4
07A72:  MOVFF  00,AC3
07A76:  MOVFF  AC2,FEA
07A7A:  MOVFF  AC1,FE9
07A7E:  MOVFF  AC3,FEF
....................     packetdata[packetdata_index++] = (measured_data_ptr->time >> 16) & 0xFF;
07A82:  MOVF   xB9,W
07A84:  INCF   xB9,F
07A86:  CLRF   03
07A88:  ADDLW  79
07A8A:  MOVWF  01
07A8C:  MOVLW  0A
07A8E:  ADDWFC 03,F
07A90:  MOVF   01,W
07A92:  MOVWF  xC1
07A94:  MOVFF  03,AC2
07A98:  MOVF   x75,W
07A9A:  MOVWF  FE9
07A9C:  MOVF   x76,W
07A9E:  MOVWF  FEA
07AA0:  MOVFF  FEF,AC3
07AA4:  MOVFF  FEC,AC4
07AA8:  MOVFF  FEC,AC5
07AAC:  MOVFF  FEC,AC6
07AB0:  MOVF   FED,F
07AB2:  MOVF   FED,F
07AB4:  MOVF   FED,F
07AB6:  MOVFF  AC5,AC3
07ABA:  MOVFF  AC6,AC4
07ABE:  CLRF   xC5
07AC0:  CLRF   xC6
07AC2:  MOVF   xC3,W
07AC4:  MOVWF  00
07AC6:  CLRF   01
07AC8:  CLRF   02
07ACA:  CLRF   03
07ACC:  MOVFF  03,AC6
07AD0:  MOVFF  02,AC5
07AD4:  MOVFF  01,AC4
07AD8:  MOVFF  00,AC3
07ADC:  MOVFF  AC2,FEA
07AE0:  MOVFF  AC1,FE9
07AE4:  MOVFF  AC3,FEF
....................     packetdata[packetdata_index++] = (measured_data_ptr->time >> 8) & 0xFF;
07AE8:  MOVF   xB9,W
07AEA:  INCF   xB9,F
07AEC:  CLRF   03
07AEE:  ADDLW  79
07AF0:  MOVWF  01
07AF2:  MOVLW  0A
07AF4:  ADDWFC 03,F
07AF6:  MOVF   01,W
07AF8:  MOVWF  xC1
07AFA:  MOVFF  03,AC2
07AFE:  MOVF   x75,W
07B00:  MOVWF  FE9
07B02:  MOVF   x76,W
07B04:  MOVWF  FEA
07B06:  MOVFF  FEF,AC3
07B0A:  MOVFF  FEC,AC4
07B0E:  MOVFF  FEC,AC5
07B12:  MOVFF  FEC,AC6
07B16:  MOVF   FED,F
07B18:  MOVF   FED,F
07B1A:  MOVF   FED,F
07B1C:  MOVFF  AC4,AC3
07B20:  MOVFF  AC5,AC4
07B24:  MOVFF  AC6,AC5
07B28:  CLRF   xC6
07B2A:  MOVF   xC3,W
07B2C:  MOVWF  00
07B2E:  CLRF   01
07B30:  CLRF   02
07B32:  CLRF   03
07B34:  MOVFF  03,AC6
07B38:  MOVFF  02,AC5
07B3C:  MOVFF  01,AC4
07B40:  MOVFF  00,AC3
07B44:  MOVFF  AC2,FEA
07B48:  MOVFF  AC1,FE9
07B4C:  MOVFF  AC3,FEF
....................     packetdata[packetdata_index++] = measured_data_ptr->time & 0xFF;
07B50:  MOVF   xB9,W
07B52:  INCF   xB9,F
07B54:  CLRF   03
07B56:  ADDLW  79
07B58:  MOVWF  01
07B5A:  MOVLW  0A
07B5C:  ADDWFC 03,F
07B5E:  MOVF   01,W
07B60:  MOVWF  xC1
07B62:  MOVFF  03,AC2
07B66:  MOVF   x75,W
07B68:  MOVWF  FE9
07B6A:  MOVF   x76,W
07B6C:  MOVWF  FEA
07B6E:  MOVFF  FEF,AC3
07B72:  MOVFF  FEC,AC4
07B76:  MOVFF  FEC,AC5
07B7A:  MOVFF  FEC,AC6
07B7E:  MOVF   FED,F
07B80:  MOVF   FED,F
07B82:  MOVF   FED,F
07B84:  MOVF   xC3,W
07B86:  MOVWF  00
07B88:  CLRF   01
07B8A:  CLRF   02
07B8C:  CLRF   03
07B8E:  MOVFF  03,AC6
07B92:  MOVFF  02,AC5
07B96:  MOVFF  01,AC4
07B9A:  MOVFF  00,AC3
07B9E:  MOVFF  AC2,FEA
07BA2:  MOVFF  AC1,FE9
07BA6:  MOVFF  AC3,FEF
....................     // 環境データ
....................     packetdata[packetdata_index++] = (measured_data_ptr->pd >> 4) & 0xFF;
07BAA:  MOVF   xB9,W
07BAC:  INCF   xB9,F
07BAE:  CLRF   03
07BB0:  ADDLW  79
07BB2:  MOVWF  01
07BB4:  MOVLW  0A
07BB6:  ADDWFC 03,F
07BB8:  MOVF   01,W
07BBA:  MOVWF  xC1
07BBC:  MOVFF  03,AC2
07BC0:  MOVLW  04
07BC2:  ADDWF  x75,W
07BC4:  MOVWF  FE9
07BC6:  MOVLW  00
07BC8:  ADDWFC x76,W
07BCA:  MOVWF  FEA
07BCC:  MOVFF  FEC,AC4
07BD0:  MOVF   FED,F
07BD2:  MOVFF  FEF,AC3
07BD6:  RRCF   xC4,F
07BD8:  RRCF   xC3,F
07BDA:  RRCF   xC4,F
07BDC:  RRCF   xC3,F
07BDE:  RRCF   xC4,F
07BE0:  RRCF   xC3,F
07BE2:  RRCF   xC4,F
07BE4:  RRCF   xC3,F
07BE6:  MOVLW  0F
07BE8:  ANDWF  xC4,F
07BEA:  MOVF   xC3,W
07BEC:  MOVWF  00
07BEE:  CLRF   03
07BF0:  MOVF   00,W
07BF2:  MOVWF  xC3
07BF4:  MOVFF  03,AC4
07BF8:  MOVFF  AC2,FEA
07BFC:  MOVFF  AC1,FE9
07C00:  MOVFF  AC3,FEF
....................     packetdata[packetdata_index++] = ((measured_data_ptr->pd & 0x0F) << 4) | ((measured_data_ptr->temp_py_top >> 8) & 0x0F);
07C04:  MOVF   xB9,W
07C06:  INCF   xB9,F
07C08:  CLRF   03
07C0A:  ADDLW  79
07C0C:  MOVWF  01
07C0E:  MOVLW  0A
07C10:  ADDWFC 03,F
07C12:  MOVF   01,W
07C14:  MOVWF  xC1
07C16:  MOVFF  03,AC2
07C1A:  MOVLW  04
07C1C:  ADDWF  x75,W
07C1E:  MOVWF  FE9
07C20:  MOVLW  00
07C22:  ADDWFC x76,W
07C24:  MOVWF  FEA
07C26:  MOVFF  FEC,AC4
07C2A:  MOVF   FED,F
07C2C:  MOVFF  FEF,AC3
07C30:  MOVLW  0F
07C32:  ANDWF  xC3,F
07C34:  CLRF   xC4
07C36:  RLCF   xC3,F
07C38:  RLCF   xC4,F
07C3A:  RLCF   xC3,F
07C3C:  RLCF   xC4,F
07C3E:  RLCF   xC3,F
07C40:  RLCF   xC4,F
07C42:  RLCF   xC3,F
07C44:  RLCF   xC4,F
07C46:  MOVLW  F0
07C48:  ANDWF  xC3,F
07C4A:  MOVLW  06
07C4C:  ADDWF  x75,W
07C4E:  MOVWF  FE9
07C50:  MOVLW  00
07C52:  ADDWFC x76,W
07C54:  MOVWF  FEA
07C56:  MOVFF  FEC,AC6
07C5A:  MOVF   FED,F
07C5C:  MOVFF  FEF,AC5
07C60:  MOVFF  AC6,AC5
07C64:  CLRF   xC6
07C66:  MOVF   xC5,W
07C68:  ANDLW  0F
07C6A:  MOVWF  00
07C6C:  CLRF   03
07C6E:  MOVF   00,W
07C70:  IORWF  xC3,W
07C72:  MOVWF  00
07C74:  MOVF   03,W
07C76:  IORWF  xC4,W
07C78:  MOVWF  03
07C7A:  MOVF   00,W
07C7C:  MOVWF  xC3
07C7E:  MOVFF  03,AC4
07C82:  MOVFF  AC2,FEA
07C86:  MOVFF  AC1,FE9
07C8A:  MOVFF  AC3,FEF
....................     packetdata[packetdata_index++] = measured_data_ptr->temp_py_top & 0xFF;
07C8E:  MOVF   xB9,W
07C90:  INCF   xB9,F
07C92:  CLRF   03
07C94:  ADDLW  79
07C96:  MOVWF  01
07C98:  MOVLW  0A
07C9A:  ADDWFC 03,F
07C9C:  MOVF   01,W
07C9E:  MOVWF  xC1
07CA0:  MOVFF  03,AC2
07CA4:  MOVLW  06
07CA6:  ADDWF  x75,W
07CA8:  MOVWF  FE9
07CAA:  MOVLW  00
07CAC:  ADDWFC x76,W
07CAE:  MOVWF  FEA
07CB0:  MOVFF  FEC,AC4
07CB4:  MOVF   FED,F
07CB6:  MOVFF  FEF,AC3
07CBA:  MOVF   xC3,W
07CBC:  MOVWF  00
07CBE:  CLRF   03
07CC0:  MOVF   00,W
07CC2:  MOVWF  xC3
07CC4:  MOVFF  03,AC4
07CC8:  MOVFF  AC2,FEA
07CCC:  MOVFF  AC1,FE9
07CD0:  MOVFF  AC3,FEF
....................     packetdata[packetdata_index++] = (measured_data_ptr->temp_py_bot >> 4) & 0xFF;
07CD4:  MOVF   xB9,W
07CD6:  INCF   xB9,F
07CD8:  CLRF   03
07CDA:  ADDLW  79
07CDC:  MOVWF  01
07CDE:  MOVLW  0A
07CE0:  ADDWFC 03,F
07CE2:  MOVF   01,W
07CE4:  MOVWF  xC1
07CE6:  MOVFF  03,AC2
07CEA:  MOVLW  08
07CEC:  ADDWF  x75,W
07CEE:  MOVWF  FE9
07CF0:  MOVLW  00
07CF2:  ADDWFC x76,W
07CF4:  MOVWF  FEA
07CF6:  MOVFF  FEC,AC4
07CFA:  MOVF   FED,F
07CFC:  MOVFF  FEF,AC3
07D00:  RRCF   xC4,F
07D02:  RRCF   xC3,F
07D04:  RRCF   xC4,F
07D06:  RRCF   xC3,F
07D08:  RRCF   xC4,F
07D0A:  RRCF   xC3,F
07D0C:  RRCF   xC4,F
07D0E:  RRCF   xC3,F
07D10:  MOVLW  0F
07D12:  ANDWF  xC4,F
07D14:  MOVF   xC3,W
07D16:  MOVWF  00
07D18:  CLRF   03
07D1A:  MOVF   00,W
07D1C:  MOVWF  xC3
07D1E:  MOVFF  03,AC4
07D22:  MOVFF  AC2,FEA
07D26:  MOVFF  AC1,FE9
07D2A:  MOVFF  AC3,FEF
....................     packetdata[packetdata_index++] = ((measured_data_ptr->temp_py_bot & 0x0F) << 4) | ((measured_data_ptr->temp_mis7 >> 8) & 0x0F);
07D2E:  MOVF   xB9,W
07D30:  INCF   xB9,F
07D32:  CLRF   03
07D34:  ADDLW  79
07D36:  MOVWF  01
07D38:  MOVLW  0A
07D3A:  ADDWFC 03,F
07D3C:  MOVF   01,W
07D3E:  MOVWF  xC1
07D40:  MOVFF  03,AC2
07D44:  MOVLW  08
07D46:  ADDWF  x75,W
07D48:  MOVWF  FE9
07D4A:  MOVLW  00
07D4C:  ADDWFC x76,W
07D4E:  MOVWF  FEA
07D50:  MOVFF  FEC,AC4
07D54:  MOVF   FED,F
07D56:  MOVFF  FEF,AC3
07D5A:  MOVLW  0F
07D5C:  ANDWF  xC3,F
07D5E:  CLRF   xC4
07D60:  RLCF   xC3,F
07D62:  RLCF   xC4,F
07D64:  RLCF   xC3,F
07D66:  RLCF   xC4,F
07D68:  RLCF   xC3,F
07D6A:  RLCF   xC4,F
07D6C:  RLCF   xC3,F
07D6E:  RLCF   xC4,F
07D70:  MOVLW  F0
07D72:  ANDWF  xC3,F
07D74:  MOVLW  0A
07D76:  ADDWF  x75,W
07D78:  MOVWF  FE9
07D7A:  MOVLW  00
07D7C:  ADDWFC x76,W
07D7E:  MOVWF  FEA
07D80:  MOVFF  FEC,AC6
07D84:  MOVF   FED,F
07D86:  MOVFF  FEF,AC5
07D8A:  MOVFF  AC6,AC5
07D8E:  CLRF   xC6
07D90:  MOVF   xC5,W
07D92:  ANDLW  0F
07D94:  MOVWF  00
07D96:  CLRF   03
07D98:  MOVF   00,W
07D9A:  IORWF  xC3,W
07D9C:  MOVWF  00
07D9E:  MOVF   03,W
07DA0:  IORWF  xC4,W
07DA2:  MOVWF  03
07DA4:  MOVF   00,W
07DA6:  MOVWF  xC3
07DA8:  MOVFF  03,AC4
07DAC:  MOVFF  AC2,FEA
07DB0:  MOVFF  AC1,FE9
07DB4:  MOVFF  AC3,FEF
....................     packetdata[packetdata_index++] = measured_data_ptr->temp_mis7 & 0xFF;
07DB8:  MOVF   xB9,W
07DBA:  INCF   xB9,F
07DBC:  CLRF   03
07DBE:  ADDLW  79
07DC0:  MOVWF  01
07DC2:  MOVLW  0A
07DC4:  ADDWFC 03,F
07DC6:  MOVF   01,W
07DC8:  MOVWF  xC1
07DCA:  MOVFF  03,AC2
07DCE:  MOVLW  0A
07DD0:  ADDWF  x75,W
07DD2:  MOVWF  FE9
07DD4:  MOVLW  00
07DD6:  ADDWFC x76,W
07DD8:  MOVWF  FEA
07DDA:  MOVFF  FEC,AC4
07DDE:  MOVF   FED,F
07DE0:  MOVFF  FEF,AC3
07DE4:  MOVF   xC3,W
07DE6:  MOVWF  00
07DE8:  CLRF   03
07DEA:  MOVF   00,W
07DEC:  MOVWF  xC3
07DEE:  MOVFF  03,AC4
07DF2:  MOVFF  AC2,FEA
07DF6:  MOVFF  AC1,FE9
07DFA:  MOVFF  AC3,FEF
.................... 
.................... 
....................     for (unsigned int16 i = 0; i < port_data_ptr->sweep_step ; i++) {
07DFE:  CLRF   xBB
07E00:  CLRF   xBA
07E02:  MOVLB  0
07E04:  MOVLW  01
07E06:  MOVLB  A
07E08:  ADDWF  x77,W
07E0A:  MOVWF  FE9
07E0C:  MOVLW  00
07E0E:  ADDWFC x78,W
07E10:  MOVWF  FEA
07E12:  MOVFF  FEC,03
07E16:  MOVF   FED,F
07E18:  MOVF   FEF,W
07E1A:  MOVWF  01
07E1C:  MOVF   xBB,W
07E1E:  SUBWF  03,W
07E20:  BTFSC  FD8.0
07E22:  BRA    7E2A
07E24:  MOVLB  0
07E26:  GOTO   7FFC
07E2A:  MOVLB  0
07E2C:  BTFSS  FD8.2
07E2E:  GOTO   7E44
07E32:  MOVF   01,W
07E34:  MOVLB  A
07E36:  SUBWF  xBA,W
07E38:  BTFSS  FD8.0
07E3A:  BRA    7E42
07E3C:  MOVLB  0
07E3E:  GOTO   7FFC
07E42:  MOVLB  0
....................         unsigned int16 data0 = port_data_ptr->data_buffer[i].voltage;
....................         unsigned int16 data1 = port_data_ptr->data_buffer[i].current;
07E44:  MOVLB  A
07E46:  RLCF   xBA,W
07E48:  MOVWF  02
07E4A:  RLCF   xBB,W
07E4C:  MOVWF  03
07E4E:  RLCF   02,F
07E50:  RLCF   03,F
07E52:  MOVLW  FC
07E54:  ANDWF  02,F
07E56:  MOVF   02,W
07E58:  ADDLW  03
07E5A:  MOVWF  xC1
07E5C:  MOVLW  00
07E5E:  ADDWFC 03,W
07E60:  MOVWF  xC2
07E62:  MOVF   x77,W
07E64:  ADDWF  xC1,W
07E66:  MOVWF  FE9
07E68:  MOVF   x78,W
07E6A:  ADDWFC xC2,W
07E6C:  MOVWF  FEA
07E6E:  MOVFF  FEC,ABD
07E72:  MOVF   FED,F
07E74:  MOVFF  FEF,ABC
07E78:  RLCF   xBA,W
07E7A:  MOVWF  02
07E7C:  RLCF   xBB,W
07E7E:  MOVWF  03
07E80:  RLCF   02,F
07E82:  RLCF   03,F
07E84:  MOVLW  FC
07E86:  ANDWF  02,F
07E88:  MOVF   02,W
07E8A:  ADDLW  03
07E8C:  MOVWF  xC3
07E8E:  MOVLW  00
07E90:  ADDWFC 03,W
07E92:  MOVWF  xC4
07E94:  MOVLW  02
07E96:  ADDWF  xC3,W
07E98:  MOVWF  01
07E9A:  MOVLW  00
07E9C:  ADDWFC xC4,W
07E9E:  MOVWF  03
07EA0:  MOVF   01,W
07EA2:  ADDWF  x77,W
07EA4:  MOVWF  FE9
07EA6:  MOVF   x78,W
07EA8:  ADDWFC 03,W
07EAA:  MOVWF  FEA
07EAC:  MOVFF  FEC,ABF
07EB0:  MOVF   FED,F
07EB2:  MOVFF  FEF,ABE
07EB6:  MOVLB  0
.................... 
....................         packetdata[packetdata_index++] = (data0 >> 4) & 0xFF;
07EB8:  MOVLB  A
07EBA:  MOVF   xB9,W
07EBC:  INCF   xB9,F
07EBE:  CLRF   03
07EC0:  ADDLW  79
07EC2:  MOVWF  FE9
07EC4:  MOVLW  0A
07EC6:  ADDWFC 03,W
07EC8:  MOVWF  FEA
07ECA:  RRCF   xBD,W
07ECC:  MOVWF  xC4
07ECE:  RRCF   xBC,W
07ED0:  MOVWF  xC3
07ED2:  RRCF   xC4,F
07ED4:  RRCF   xC3,F
07ED6:  RRCF   xC4,F
07ED8:  RRCF   xC3,F
07EDA:  RRCF   xC4,F
07EDC:  RRCF   xC3,F
07EDE:  MOVLW  0F
07EE0:  ANDWF  xC4,F
07EE2:  MOVF   xC3,W
07EE4:  MOVWF  00
07EE6:  CLRF   03
07EE8:  MOVF   00,W
07EEA:  MOVWF  FEF
....................         packetdata[packetdata_index++] = ((data0 & 0x0F) << 4) | ((data1 >> 8) & 0x0F);
07EEC:  MOVF   xB9,W
07EEE:  INCF   xB9,F
07EF0:  CLRF   03
07EF2:  ADDLW  79
07EF4:  MOVWF  FE9
07EF6:  MOVLW  0A
07EF8:  ADDWFC 03,W
07EFA:  MOVWF  FEA
07EFC:  MOVF   xBC,W
07EFE:  ANDLW  0F
07F00:  MOVWF  xC3
07F02:  CLRF   xC4
07F04:  RLCF   xC3,F
07F06:  RLCF   xC4,F
07F08:  RLCF   xC3,F
07F0A:  RLCF   xC4,F
07F0C:  RLCF   xC3,F
07F0E:  RLCF   xC4,F
07F10:  RLCF   xC3,F
07F12:  RLCF   xC4,F
07F14:  MOVLW  F0
07F16:  ANDWF  xC3,F
07F18:  MOVFF  ABF,AC5
07F1C:  CLRF   xC6
07F1E:  MOVF   xC5,W
07F20:  ANDLW  0F
07F22:  MOVWF  00
07F24:  CLRF   03
07F26:  MOVF   00,W
07F28:  IORWF  xC3,W
07F2A:  MOVWF  00
07F2C:  MOVF   03,W
07F2E:  IORWF  xC4,W
07F30:  MOVWF  03
07F32:  MOVF   00,W
07F34:  MOVWF  FEF
....................         packetdata[packetdata_index++] = data1 & 0xFF;
07F36:  MOVF   xB9,W
07F38:  INCF   xB9,F
07F3A:  CLRF   03
07F3C:  ADDLW  79
07F3E:  MOVWF  FE9
07F40:  MOVLW  0A
07F42:  ADDWFC 03,W
07F44:  MOVWF  FEA
07F46:  MOVF   xBE,W
07F48:  MOVWF  00
07F4A:  CLRF   03
07F4C:  MOVF   00,W
07F4E:  MOVWF  FEF
.................... 
....................         if (packetdata_index + 3 >= PACKET_SIZE - 1) {
07F50:  MOVLW  03
07F52:  ADDWF  xB9,W
07F54:  SUBLW  3E
07F56:  BTFSS  FD8.0
07F58:  BRA    7F60
07F5A:  MOVLB  0
07F5C:  GOTO   7FEE
07F60:  MOVLB  0
....................             switch (port_data_ptr -> port_num) {
07F62:  MOVLB  A
07F64:  MOVF   x77,W
07F66:  MOVWF  FE9
07F68:  MOVF   x78,W
07F6A:  MOVWF  FEA
07F6C:  MOVF   FEF,W
07F6E:  XORLW  01
07F70:  MOVLB  0
07F72:  BTFSC  FD8.2
07F74:  GOTO   7F84
07F78:  XORLW  03
07F7A:  BTFSC  FD8.2
07F7C:  GOTO   7FB2
07F80:  GOTO   7FD0
....................                 case 1:
....................                     fprintf(PC, "DATA WRITE IV1\r\n");
07F84:  MOVLW  28
07F86:  MOVWF  FF6
07F88:  MOVLW  06
07F8A:  MOVWF  FF7
07F8C:  MOVLW  00
07F8E:  MOVWF  FF8
07F90:  CALL   1DC0
....................                     misf_write_data(FLASH_ID_IV1_DATA, packetdata, PACKET_SIZE-1);
07F94:  MOVLW  04
07F96:  MOVLB  A
07F98:  MOVWF  xC1
07F9A:  MOVLW  0A
07F9C:  MOVWF  xC3
07F9E:  MOVLW  79
07FA0:  MOVWF  xC2
07FA2:  CLRF   xC5
07FA4:  MOVLW  3F
07FA6:  MOVWF  xC4
07FA8:  MOVLB  0
07FAA:  CALL   42C8
....................                     break;
07FAE:  GOTO   7FD4
....................                 case 2:
....................                     misf_write_data(FLASH_ID_IV2_DATA, packetdata, PACKET_SIZE-1);
07FB2:  MOVLW  06
07FB4:  MOVLB  A
07FB6:  MOVWF  xC1
07FB8:  MOVLW  0A
07FBA:  MOVWF  xC3
07FBC:  MOVLW  79
07FBE:  MOVWF  xC2
07FC0:  CLRF   xC5
07FC2:  MOVLW  3F
07FC4:  MOVWF  xC4
07FC6:  MOVLB  0
07FC8:  CALL   42C8
....................                     break;
07FCC:  GOTO   7FD4
....................                 default:
....................                     break;
07FD0:  GOTO   7FD4
....................             }
....................             packetdata_index = 0;
07FD4:  MOVLB  A
07FD6:  CLRF   xB9
....................             memset(packetdata, 0x00, PACKET_SIZE);
07FD8:  MOVLW  0A
07FDA:  MOVWF  FEA
07FDC:  MOVLW  79
07FDE:  MOVWF  FE9
07FE0:  CLRF   00
07FE2:  CLRF   02
07FE4:  MOVLW  40
07FE6:  MOVWF  01
07FE8:  MOVLB  0
07FEA:  CALL   29EA
....................         }
07FEE:  MOVLB  A
07FF0:  INCF   xBA,F
07FF2:  BTFSC  FD8.2
07FF4:  INCF   xBB,F
07FF6:  MOVLB  0
07FF8:  GOTO   7E04
....................     }
.................... 
....................     // 最後に残ったデータの処理
....................     if (packetdata_index > 0) {
07FFC:  MOVLB  A
07FFE:  MOVF   xB9,F
08000:  BTFSS  FD8.2
08002:  BRA    800A
08004:  MOVLB  0
08006:  GOTO   80A2
0800A:  MOVLB  0
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE - 1; j++) {
0800C:  MOVFF  AB9,AC0
08010:  MOVLB  A
08012:  MOVF   xC0,W
08014:  SUBLW  3E
08016:  BTFSC  FD8.0
08018:  BRA    8020
0801A:  MOVLB  0
0801C:  GOTO   8040
08020:  MOVLB  0
....................             packetdata[j] = 0x00;
08022:  CLRF   03
08024:  MOVLB  A
08026:  MOVF   xC0,W
08028:  ADDLW  79
0802A:  MOVWF  FE9
0802C:  MOVLW  0A
0802E:  ADDWFC 03,W
08030:  MOVWF  FEA
08032:  CLRF   FEF
08034:  MOVLB  0
08036:  MOVLB  A
08038:  INCF   xC0,F
0803A:  MOVLB  0
0803C:  GOTO   8010
....................         }
....................         switch (port_data_ptr->port_num)
08040:  MOVLB  A
08042:  MOVF   x77,W
08044:  MOVWF  FE9
08046:  MOVF   x78,W
08048:  MOVWF  FEA
0804A:  MOVF   FEF,W
0804C:  XORLW  01
0804E:  MOVLB  0
08050:  BTFSC  FD8.2
08052:  GOTO   8062
08056:  XORLW  03
08058:  BTFSC  FD8.2
0805A:  GOTO   8080
0805E:  GOTO   809E
....................         {
....................             case 1:
....................                 misf_write_data(FLASH_ID_IV1_DATA, packetdata, PACKET_SIZE-1);
08062:  MOVLW  04
08064:  MOVLB  A
08066:  MOVWF  xC1
08068:  MOVLW  0A
0806A:  MOVWF  xC3
0806C:  MOVLW  79
0806E:  MOVWF  xC2
08070:  CLRF   xC5
08072:  MOVLW  3F
08074:  MOVWF  xC4
08076:  MOVLB  0
08078:  CALL   42C8
....................                 break;
0807C:  GOTO   80A2
....................             case 2:
....................                 misf_write_data(FLASH_ID_IV2_DATA, packetdata, PACKET_SIZE-1);
08080:  MOVLW  06
08082:  MOVLB  A
08084:  MOVWF  xC1
08086:  MOVLW  0A
08088:  MOVWF  xC3
0808A:  MOVLW  79
0808C:  MOVWF  xC2
0808E:  CLRF   xC5
08090:  MOVLW  3F
08092:  MOVWF  xC4
08094:  MOVLB  0
08096:  CALL   42C8
....................                 break;
0809A:  GOTO   80A2
....................             default:
....................                 break;
0809E:  GOTO   80A2
....................         }
....................     }
080A2:  RETURN 0
.................... }
.................... 
.................... void log_meas_data_with_print(iv_env_t *measured_data_ptr, sweep_config_t *port_data_ptr)
*
09BEE:  CLRF   xAB
09BF0:  BSF    xAC.0
09BF2:  CLRF   xAE
09BF4:  CLRF   xAD
.................... {
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; 
*
09B6C:  MOVLB  A
09B6E:  CLRF   x6B
09B70:  CLRF   x6C
09B72:  CLRF   x6D
09B74:  CLRF   x6E
09B76:  CLRF   x6F
09B78:  CLRF   x70
09B7A:  CLRF   x71
09B7C:  CLRF   x72
09B7E:  CLRF   x73
09B80:  CLRF   x74
09B82:  CLRF   x75
09B84:  CLRF   x76
09B86:  CLRF   x77
09B88:  CLRF   x78
09B8A:  CLRF   x79
09B8C:  CLRF   x7A
09B8E:  CLRF   x7B
09B90:  CLRF   x7C
09B92:  CLRF   x7D
09B94:  CLRF   x7E
09B96:  CLRF   x7F
09B98:  CLRF   x80
09B9A:  CLRF   x81
09B9C:  CLRF   x82
09B9E:  CLRF   x83
09BA0:  CLRF   x84
09BA2:  CLRF   x85
09BA4:  CLRF   x86
09BA6:  CLRF   x87
09BA8:  CLRF   x88
09BAA:  CLRF   x89
09BAC:  CLRF   x8A
09BAE:  CLRF   x8B
09BB0:  CLRF   x8C
09BB2:  CLRF   x8D
09BB4:  CLRF   x8E
09BB6:  CLRF   x8F
09BB8:  CLRF   x90
09BBA:  CLRF   x91
09BBC:  CLRF   x92
09BBE:  CLRF   x93
09BC0:  CLRF   x94
09BC2:  CLRF   x95
09BC4:  CLRF   x96
09BC6:  CLRF   x97
09BC8:  CLRF   x98
09BCA:  CLRF   x99
09BCC:  CLRF   x9A
09BCE:  CLRF   x9B
09BD0:  CLRF   x9C
09BD2:  CLRF   x9D
09BD4:  CLRF   x9E
09BD6:  CLRF   x9F
09BD8:  CLRF   xA0
09BDA:  CLRF   xA1
09BDC:  CLRF   xA2
09BDE:  CLRF   xA3
09BE0:  CLRF   xA4
09BE2:  CLRF   xA5
09BE4:  CLRF   xA6
09BE6:  CLRF   xA7
09BE8:  CLRF   xA8
09BEA:  CLRF   xA9
09BEC:  CLRF   xAA
....................     unsigned int8 packet_index = 0;
....................     int1 first_packet = true; // 最初のパケットフラグ
.................... 
.................... 
....................     unsigned int16 sweep_index = 0;
....................     // ==== データステップ書き込み ====
....................     for (unsigned int16 i = 0; i < port_data_ptr->sweep_step; i++) {
*
09BF6:  CLRF   xB0
09BF8:  CLRF   xAF
09BFA:  MOVLB  0
09BFC:  MOVLW  01
09BFE:  MOVLB  A
09C00:  ADDWF  x69,W
09C02:  MOVWF  FE9
09C04:  MOVLW  00
09C06:  ADDWFC x6A,W
09C08:  MOVWF  FEA
09C0A:  MOVFF  FEC,03
09C0E:  MOVF   FED,F
09C10:  MOVF   FEF,W
09C12:  MOVWF  01
09C14:  MOVF   xB0,W
09C16:  SUBWF  03,W
09C18:  BTFSC  FD8.0
09C1A:  BRA    9C22
09C1C:  MOVLB  0
09C1E:  GOTO   A476
09C22:  MOVLB  0
09C24:  BTFSS  FD8.2
09C26:  GOTO   9C3C
09C2A:  MOVF   01,W
09C2C:  MOVLB  A
09C2E:  SUBWF  xAF,W
09C30:  BTFSS  FD8.0
09C32:  BRA    9C3A
09C34:  MOVLB  0
09C36:  GOTO   A476
09C3A:  MOVLB  0
....................         unsigned int16 data0 = port_data_ptr->data_buffer[i].voltage;
....................         unsigned int16 data1 = port_data_ptr->data_buffer[i].current;
09C3C:  MOVLB  A
09C3E:  RLCF   xAF,W
09C40:  MOVWF  02
09C42:  RLCF   xB0,W
09C44:  MOVWF  03
09C46:  RLCF   02,F
09C48:  RLCF   03,F
09C4A:  MOVLW  FC
09C4C:  ANDWF  02,F
09C4E:  MOVF   02,W
09C50:  ADDLW  03
09C52:  MOVWF  xC7
09C54:  MOVLW  00
09C56:  ADDWFC 03,W
09C58:  MOVWF  xC8
09C5A:  MOVF   x69,W
09C5C:  ADDWF  xC7,W
09C5E:  MOVWF  FE9
09C60:  MOVF   x6A,W
09C62:  ADDWFC xC8,W
09C64:  MOVWF  FEA
09C66:  MOVFF  FEC,AB2
09C6A:  MOVF   FED,F
09C6C:  MOVFF  FEF,AB1
09C70:  RLCF   xAF,W
09C72:  MOVWF  02
09C74:  RLCF   xB0,W
09C76:  MOVWF  03
09C78:  RLCF   02,F
09C7A:  RLCF   03,F
09C7C:  MOVLW  FC
09C7E:  ANDWF  02,F
09C80:  MOVF   02,W
09C82:  ADDLW  03
09C84:  MOVWF  xC9
09C86:  MOVLW  00
09C88:  ADDWFC 03,W
09C8A:  MOVWF  xCA
09C8C:  MOVLW  02
09C8E:  ADDWF  xC9,W
09C90:  MOVWF  01
09C92:  MOVLW  00
09C94:  ADDWFC xCA,W
09C96:  MOVWF  03
09C98:  MOVF   01,W
09C9A:  ADDWF  x69,W
09C9C:  MOVWF  FE9
09C9E:  MOVF   x6A,W
09CA0:  ADDWFC 03,W
09CA2:  MOVWF  FEA
09CA4:  MOVFF  FEC,AB4
09CA8:  MOVF   FED,F
09CAA:  MOVFF  FEF,AB3
09CAE:  MOVLB  0
.................... 
....................         // パケットがいっぱいになる前にヘッダ＋環境データを入れる
....................         if (packet_index == 0) {
09CB0:  MOVLB  A
09CB2:  MOVF   xAB,F
09CB4:  BTFSC  FD8.2
09CB6:  BRA    9CBE
09CB8:  MOVLB  0
09CBA:  GOTO   A0D4
09CBE:  MOVLB  0
....................             unsigned int8 idx = 0;
09CC0:  MOVLB  A
09CC2:  CLRF   xB5
09CC4:  MOVLB  0
....................             if (first_packet) {
09CC6:  MOVLB  A
09CC8:  BTFSC  xAC.0
09CCA:  BRA    9CD2
09CCC:  MOVLB  0
09CCE:  GOTO   9CEC
09CD2:  MOVLB  0
....................                 packetdata[idx++] = START_MAKER;  // 最初のパケットだけ
09CD4:  MOVLB  A
09CD6:  MOVF   xB5,W
09CD8:  INCF   xB5,F
09CDA:  CLRF   03
09CDC:  ADDLW  6B
09CDE:  MOVWF  FE9
09CE0:  MOVLW  0A
09CE2:  ADDWFC 03,W
09CE4:  MOVWF  FEA
09CE6:  SETF   FEF
....................                 first_packet = false;
09CE8:  BCF    xAC.0
09CEA:  MOVLB  0
....................             }
.................... 
....................             // timeヘッダ
....................             packetdata[idx++] = (measured_data_ptr->time >> 24) & 0xFF;
09CEC:  MOVLB  A
09CEE:  MOVF   xB5,W
09CF0:  INCF   xB5,F
09CF2:  CLRF   03
09CF4:  ADDLW  6B
09CF6:  MOVWF  01
09CF8:  MOVLW  0A
09CFA:  ADDWFC 03,F
09CFC:  MOVF   01,W
09CFE:  MOVWF  xC7
09D00:  MOVFF  03,AC8
09D04:  MOVF   x67,W
09D06:  MOVWF  FE9
09D08:  MOVF   x68,W
09D0A:  MOVWF  FEA
09D0C:  MOVFF  FEF,AC9
09D10:  MOVFF  FEC,ACA
09D14:  MOVFF  FEC,ACB
09D18:  MOVFF  FEC,ACC
09D1C:  MOVF   FED,F
09D1E:  MOVF   FED,F
09D20:  MOVF   FED,F
09D22:  MOVFF  ACC,AC9
09D26:  CLRF   xCA
09D28:  CLRF   xCB
09D2A:  CLRF   xCC
09D2C:  MOVF   xC9,W
09D2E:  MOVWF  00
09D30:  CLRF   01
09D32:  CLRF   02
09D34:  CLRF   03
09D36:  MOVFF  03,ACC
09D3A:  MOVFF  02,ACB
09D3E:  MOVFF  01,ACA
09D42:  MOVFF  00,AC9
09D46:  MOVFF  AC8,FEA
09D4A:  MOVFF  AC7,FE9
09D4E:  MOVFF  AC9,FEF
....................             packetdata[idx++] = (measured_data_ptr->time >> 16) & 0xFF;
09D52:  MOVF   xB5,W
09D54:  INCF   xB5,F
09D56:  CLRF   03
09D58:  ADDLW  6B
09D5A:  MOVWF  01
09D5C:  MOVLW  0A
09D5E:  ADDWFC 03,F
09D60:  MOVF   01,W
09D62:  MOVWF  xC7
09D64:  MOVFF  03,AC8
09D68:  MOVF   x67,W
09D6A:  MOVWF  FE9
09D6C:  MOVF   x68,W
09D6E:  MOVWF  FEA
09D70:  MOVFF  FEF,AC9
09D74:  MOVFF  FEC,ACA
09D78:  MOVFF  FEC,ACB
09D7C:  MOVFF  FEC,ACC
09D80:  MOVF   FED,F
09D82:  MOVF   FED,F
09D84:  MOVF   FED,F
09D86:  MOVFF  ACB,AC9
09D8A:  MOVFF  ACC,ACA
09D8E:  CLRF   xCB
09D90:  CLRF   xCC
09D92:  MOVF   xC9,W
09D94:  MOVWF  00
09D96:  CLRF   01
09D98:  CLRF   02
09D9A:  CLRF   03
09D9C:  MOVFF  03,ACC
09DA0:  MOVFF  02,ACB
09DA4:  MOVFF  01,ACA
09DA8:  MOVFF  00,AC9
09DAC:  MOVFF  AC8,FEA
09DB0:  MOVFF  AC7,FE9
09DB4:  MOVFF  AC9,FEF
....................             packetdata[idx++] = (measured_data_ptr->time >> 8) & 0xFF;
09DB8:  MOVF   xB5,W
09DBA:  INCF   xB5,F
09DBC:  CLRF   03
09DBE:  ADDLW  6B
09DC0:  MOVWF  01
09DC2:  MOVLW  0A
09DC4:  ADDWFC 03,F
09DC6:  MOVF   01,W
09DC8:  MOVWF  xC7
09DCA:  MOVFF  03,AC8
09DCE:  MOVF   x67,W
09DD0:  MOVWF  FE9
09DD2:  MOVF   x68,W
09DD4:  MOVWF  FEA
09DD6:  MOVFF  FEF,AC9
09DDA:  MOVFF  FEC,ACA
09DDE:  MOVFF  FEC,ACB
09DE2:  MOVFF  FEC,ACC
09DE6:  MOVF   FED,F
09DE8:  MOVF   FED,F
09DEA:  MOVF   FED,F
09DEC:  MOVFF  ACA,AC9
09DF0:  MOVFF  ACB,ACA
09DF4:  MOVFF  ACC,ACB
09DF8:  CLRF   xCC
09DFA:  MOVF   xC9,W
09DFC:  MOVWF  00
09DFE:  CLRF   01
09E00:  CLRF   02
09E02:  CLRF   03
09E04:  MOVFF  03,ACC
09E08:  MOVFF  02,ACB
09E0C:  MOVFF  01,ACA
09E10:  MOVFF  00,AC9
09E14:  MOVFF  AC8,FEA
09E18:  MOVFF  AC7,FE9
09E1C:  MOVFF  AC9,FEF
....................             packetdata[idx++] = measured_data_ptr->time & 0xFF;
09E20:  MOVF   xB5,W
09E22:  INCF   xB5,F
09E24:  CLRF   03
09E26:  ADDLW  6B
09E28:  MOVWF  01
09E2A:  MOVLW  0A
09E2C:  ADDWFC 03,F
09E2E:  MOVF   01,W
09E30:  MOVWF  xC7
09E32:  MOVFF  03,AC8
09E36:  MOVF   x67,W
09E38:  MOVWF  FE9
09E3A:  MOVF   x68,W
09E3C:  MOVWF  FEA
09E3E:  MOVFF  FEF,AC9
09E42:  MOVFF  FEC,ACA
09E46:  MOVFF  FEC,ACB
09E4A:  MOVFF  FEC,ACC
09E4E:  MOVF   FED,F
09E50:  MOVF   FED,F
09E52:  MOVF   FED,F
09E54:  MOVF   xC9,W
09E56:  MOVWF  00
09E58:  CLRF   01
09E5A:  CLRF   02
09E5C:  CLRF   03
09E5E:  MOVFF  03,ACC
09E62:  MOVFF  02,ACB
09E66:  MOVFF  01,ACA
09E6A:  MOVFF  00,AC9
09E6E:  MOVFF  AC8,FEA
09E72:  MOVFF  AC7,FE9
09E76:  MOVFF  AC9,FEF
.................... 
....................             // 環境データ
....................             packetdata[idx++] = (measured_data_ptr->pd >> 4) & 0xFF;
09E7A:  MOVF   xB5,W
09E7C:  INCF   xB5,F
09E7E:  CLRF   03
09E80:  ADDLW  6B
09E82:  MOVWF  01
09E84:  MOVLW  0A
09E86:  ADDWFC 03,F
09E88:  MOVF   01,W
09E8A:  MOVWF  xC7
09E8C:  MOVFF  03,AC8
09E90:  MOVLW  04
09E92:  ADDWF  x67,W
09E94:  MOVWF  FE9
09E96:  MOVLW  00
09E98:  ADDWFC x68,W
09E9A:  MOVWF  FEA
09E9C:  MOVFF  FEC,ACA
09EA0:  MOVF   FED,F
09EA2:  MOVFF  FEF,AC9
09EA6:  RRCF   xCA,F
09EA8:  RRCF   xC9,F
09EAA:  RRCF   xCA,F
09EAC:  RRCF   xC9,F
09EAE:  RRCF   xCA,F
09EB0:  RRCF   xC9,F
09EB2:  RRCF   xCA,F
09EB4:  RRCF   xC9,F
09EB6:  MOVLW  0F
09EB8:  ANDWF  xCA,F
09EBA:  MOVF   xC9,W
09EBC:  MOVWF  00
09EBE:  CLRF   03
09EC0:  MOVF   00,W
09EC2:  MOVWF  xC9
09EC4:  MOVFF  03,ACA
09EC8:  MOVFF  AC8,FEA
09ECC:  MOVFF  AC7,FE9
09ED0:  MOVFF  AC9,FEF
....................             packetdata[idx++] = ((measured_data_ptr->pd & 0x0F) << 4) | ((measured_data_ptr->temp_py_top >> 8) & 0x0F);
09ED4:  MOVF   xB5,W
09ED6:  INCF   xB5,F
09ED8:  CLRF   03
09EDA:  ADDLW  6B
09EDC:  MOVWF  01
09EDE:  MOVLW  0A
09EE0:  ADDWFC 03,F
09EE2:  MOVF   01,W
09EE4:  MOVWF  xC7
09EE6:  MOVFF  03,AC8
09EEA:  MOVLW  04
09EEC:  ADDWF  x67,W
09EEE:  MOVWF  FE9
09EF0:  MOVLW  00
09EF2:  ADDWFC x68,W
09EF4:  MOVWF  FEA
09EF6:  MOVFF  FEC,ACA
09EFA:  MOVF   FED,F
09EFC:  MOVFF  FEF,AC9
09F00:  MOVLW  0F
09F02:  ANDWF  xC9,F
09F04:  CLRF   xCA
09F06:  RLCF   xC9,F
09F08:  RLCF   xCA,F
09F0A:  RLCF   xC9,F
09F0C:  RLCF   xCA,F
09F0E:  RLCF   xC9,F
09F10:  RLCF   xCA,F
09F12:  RLCF   xC9,F
09F14:  RLCF   xCA,F
09F16:  MOVLW  F0
09F18:  ANDWF  xC9,F
09F1A:  MOVLW  06
09F1C:  ADDWF  x67,W
09F1E:  MOVWF  FE9
09F20:  MOVLW  00
09F22:  ADDWFC x68,W
09F24:  MOVWF  FEA
09F26:  MOVFF  FEC,ACC
09F2A:  MOVF   FED,F
09F2C:  MOVFF  FEF,ACB
09F30:  MOVFF  ACC,ACB
09F34:  CLRF   xCC
09F36:  MOVF   xCB,W
09F38:  ANDLW  0F
09F3A:  MOVWF  00
09F3C:  CLRF   03
09F3E:  MOVF   00,W
09F40:  IORWF  xC9,W
09F42:  MOVWF  00
09F44:  MOVF   03,W
09F46:  IORWF  xCA,W
09F48:  MOVWF  03
09F4A:  MOVF   00,W
09F4C:  MOVWF  xC9
09F4E:  MOVFF  03,ACA
09F52:  MOVFF  AC8,FEA
09F56:  MOVFF  AC7,FE9
09F5A:  MOVFF  AC9,FEF
....................             packetdata[idx++] = measured_data_ptr->temp_py_top & 0xFF;
09F5E:  MOVF   xB5,W
09F60:  INCF   xB5,F
09F62:  CLRF   03
09F64:  ADDLW  6B
09F66:  MOVWF  01
09F68:  MOVLW  0A
09F6A:  ADDWFC 03,F
09F6C:  MOVF   01,W
09F6E:  MOVWF  xC7
09F70:  MOVFF  03,AC8
09F74:  MOVLW  06
09F76:  ADDWF  x67,W
09F78:  MOVWF  FE9
09F7A:  MOVLW  00
09F7C:  ADDWFC x68,W
09F7E:  MOVWF  FEA
09F80:  MOVFF  FEC,ACA
09F84:  MOVF   FED,F
09F86:  MOVFF  FEF,AC9
09F8A:  MOVF   xC9,W
09F8C:  MOVWF  00
09F8E:  CLRF   03
09F90:  MOVF   00,W
09F92:  MOVWF  xC9
09F94:  MOVFF  03,ACA
09F98:  MOVFF  AC8,FEA
09F9C:  MOVFF  AC7,FE9
09FA0:  MOVFF  AC9,FEF
....................             packetdata[idx++] = (measured_data_ptr->temp_py_bot >> 4) & 0xFF;
09FA4:  MOVF   xB5,W
09FA6:  INCF   xB5,F
09FA8:  CLRF   03
09FAA:  ADDLW  6B
09FAC:  MOVWF  01
09FAE:  MOVLW  0A
09FB0:  ADDWFC 03,F
09FB2:  MOVF   01,W
09FB4:  MOVWF  xC7
09FB6:  MOVFF  03,AC8
09FBA:  MOVLW  08
09FBC:  ADDWF  x67,W
09FBE:  MOVWF  FE9
09FC0:  MOVLW  00
09FC2:  ADDWFC x68,W
09FC4:  MOVWF  FEA
09FC6:  MOVFF  FEC,ACA
09FCA:  MOVF   FED,F
09FCC:  MOVFF  FEF,AC9
09FD0:  RRCF   xCA,F
09FD2:  RRCF   xC9,F
09FD4:  RRCF   xCA,F
09FD6:  RRCF   xC9,F
09FD8:  RRCF   xCA,F
09FDA:  RRCF   xC9,F
09FDC:  RRCF   xCA,F
09FDE:  RRCF   xC9,F
09FE0:  MOVLW  0F
09FE2:  ANDWF  xCA,F
09FE4:  MOVF   xC9,W
09FE6:  MOVWF  00
09FE8:  CLRF   03
09FEA:  MOVF   00,W
09FEC:  MOVWF  xC9
09FEE:  MOVFF  03,ACA
09FF2:  MOVFF  AC8,FEA
09FF6:  MOVFF  AC7,FE9
09FFA:  MOVFF  AC9,FEF
....................             packetdata[idx++] = ((measured_data_ptr->temp_py_bot & 0x0F) << 4) | ((measured_data_ptr->temp_mis7 >> 8) & 0x0F);
09FFE:  MOVF   xB5,W
0A000:  INCF   xB5,F
0A002:  CLRF   03
0A004:  ADDLW  6B
0A006:  MOVWF  01
0A008:  MOVLW  0A
0A00A:  ADDWFC 03,F
0A00C:  MOVF   01,W
0A00E:  MOVWF  xC7
0A010:  MOVFF  03,AC8
0A014:  MOVLW  08
0A016:  ADDWF  x67,W
0A018:  MOVWF  FE9
0A01A:  MOVLW  00
0A01C:  ADDWFC x68,W
0A01E:  MOVWF  FEA
0A020:  MOVFF  FEC,ACA
0A024:  MOVF   FED,F
0A026:  MOVFF  FEF,AC9
0A02A:  MOVLW  0F
0A02C:  ANDWF  xC9,F
0A02E:  CLRF   xCA
0A030:  RLCF   xC9,F
0A032:  RLCF   xCA,F
0A034:  RLCF   xC9,F
0A036:  RLCF   xCA,F
0A038:  RLCF   xC9,F
0A03A:  RLCF   xCA,F
0A03C:  RLCF   xC9,F
0A03E:  RLCF   xCA,F
0A040:  MOVLW  F0
0A042:  ANDWF  xC9,F
0A044:  MOVLW  0A
0A046:  ADDWF  x67,W
0A048:  MOVWF  FE9
0A04A:  MOVLW  00
0A04C:  ADDWFC x68,W
0A04E:  MOVWF  FEA
0A050:  MOVFF  FEC,ACC
0A054:  MOVF   FED,F
0A056:  MOVFF  FEF,ACB
0A05A:  MOVFF  ACC,ACB
0A05E:  CLRF   xCC
0A060:  MOVF   xCB,W
0A062:  ANDLW  0F
0A064:  MOVWF  00
0A066:  CLRF   03
0A068:  MOVF   00,W
0A06A:  IORWF  xC9,W
0A06C:  MOVWF  00
0A06E:  MOVF   03,W
0A070:  IORWF  xCA,W
0A072:  MOVWF  03
0A074:  MOVF   00,W
0A076:  MOVWF  xC9
0A078:  MOVFF  03,ACA
0A07C:  MOVFF  AC8,FEA
0A080:  MOVFF  AC7,FE9
0A084:  MOVFF  AC9,FEF
....................             packetdata[idx++] = measured_data_ptr->temp_mis7 & 0xFF;
0A088:  MOVF   xB5,W
0A08A:  INCF   xB5,F
0A08C:  CLRF   03
0A08E:  ADDLW  6B
0A090:  MOVWF  01
0A092:  MOVLW  0A
0A094:  ADDWFC 03,F
0A096:  MOVF   01,W
0A098:  MOVWF  xC7
0A09A:  MOVFF  03,AC8
0A09E:  MOVLW  0A
0A0A0:  ADDWF  x67,W
0A0A2:  MOVWF  FE9
0A0A4:  MOVLW  00
0A0A6:  ADDWFC x68,W
0A0A8:  MOVWF  FEA
0A0AA:  MOVFF  FEC,ACA
0A0AE:  MOVF   FED,F
0A0B0:  MOVFF  FEF,AC9
0A0B4:  MOVF   xC9,W
0A0B6:  MOVWF  00
0A0B8:  CLRF   03
0A0BA:  MOVF   00,W
0A0BC:  MOVWF  xC9
0A0BE:  MOVFF  03,ACA
0A0C2:  MOVFF  AC8,FEA
0A0C6:  MOVFF  AC7,FE9
0A0CA:  MOVFF  AC9,FEF
.................... 
....................             packet_index = idx;
0A0CE:  MOVFF  AB5,AAB
0A0D2:  MOVLB  0
....................         }
.................... 
....................         // パケットに収まるかチェック
....................         if (packet_index + DATA_SIZE_PER_STEP >= PACKET_SIZE) {
0A0D4:  MOVLW  03
0A0D6:  MOVLB  A
0A0D8:  ADDWF  xAB,W
0A0DA:  SUBLW  3F
0A0DC:  BTFSS  FD8.0
0A0DE:  BRA    A0E6
0A0E0:  MOVLB  0
0A0E2:  GOTO   A3CE
0A0E6:  MOVLB  0
....................             // フラッシュ書き込み
....................             unsigned int32 write_address = MISF_CIGS_IV1_DATA_START;
0A0E8:  MOVLB  A
0A0EA:  CLRF   xB9
0A0EC:  MOVLW  7C
0A0EE:  MOVWF  xB8
0A0F0:  MOVLW  10
0A0F2:  MOVWF  xB7
0A0F4:  CLRF   xB6
0A0F6:  MOVLB  0
....................             switch (port_data_ptr->port_num) {
0A0F8:  MOVLB  A
0A0FA:  MOVF   x69,W
0A0FC:  MOVWF  FE9
0A0FE:  MOVF   x6A,W
0A100:  MOVWF  FEA
0A102:  MOVF   FEF,W
0A104:  XORLW  01
0A106:  MOVLB  0
0A108:  BTFSC  FD8.2
0A10A:  GOTO   A11A
0A10E:  XORLW  03
0A110:  BTFSC  FD8.2
0A112:  GOTO   A20E
0A116:  GOTO   A302
....................                 case 1:
....................                     write_address += iv1_data_ptr->used_counter;
0A11A:  MOVLW  01
0A11C:  MOVLB  1
0A11E:  ADDWF  x28,W
0A120:  MOVWF  FE9
0A122:  MOVLW  00
0A124:  ADDWFC x29,W
0A126:  MOVWF  FEA
0A128:  MOVFF  FEF,00
0A12C:  MOVFF  FEC,01
0A130:  MOVFF  FEC,02
0A134:  MOVFF  FEC,03
0A138:  MOVF   FED,F
0A13A:  MOVF   FED,F
0A13C:  MOVF   FED,F
0A13E:  MOVF   00,W
0A140:  MOVLB  A
0A142:  ADDWF  xB6,F
0A144:  MOVF   01,W
0A146:  ADDWFC xB7,F
0A148:  MOVF   02,W
0A14A:  ADDWFC xB8,F
0A14C:  MOVF   03,W
0A14E:  ADDWFC xB9,F
....................                     write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
0A150:  MOVFF  115,B9F
0A154:  MOVFF  114,B9E
0A158:  MOVFF  113,B9D
0A15C:  MOVFF  112,B9C
0A160:  MOVFF  AB9,BA3
0A164:  MOVFF  AB8,BA2
0A168:  MOVFF  AB7,BA1
0A16C:  MOVFF  AB6,BA0
0A170:  MOVLW  0A
0A172:  MOVLB  B
0A174:  MOVWF  xA5
0A176:  MOVLW  6B
0A178:  MOVWF  xA4
0A17A:  CLRF   xA7
0A17C:  MOVLW  40
0A17E:  MOVWF  xA6
0A180:  MOVLB  0
0A182:  CALL   39FE
....................                     iv1_data_ptr->used_counter += PACKET_SIZE;
0A186:  MOVLW  01
0A188:  MOVLB  1
0A18A:  ADDWF  x28,W
0A18C:  MOVWF  FE9
0A18E:  MOVLW  00
0A190:  ADDWFC x29,W
0A192:  MOVWF  FEA
0A194:  MOVLW  40
0A196:  ADDWF  FEF,W
0A198:  MOVWF  00
0A19A:  MOVLW  00
0A19C:  ADDWFC FEC,W
0A19E:  MOVWF  01
0A1A0:  MOVLW  00
0A1A2:  ADDWFC FEC,W
0A1A4:  MOVWF  02
0A1A6:  MOVLW  00
0A1A8:  ADDWFC FEC,W
0A1AA:  MOVWF  03
0A1AC:  MOVF   FED,F
0A1AE:  MOVF   FED,F
0A1B0:  MOVF   FED,F
0A1B2:  MOVFF  00,FEF
0A1B6:  MOVFF  01,FEC
0A1BA:  MOVFF  02,FEC
0A1BE:  MOVFF  03,FEC
0A1C2:  MOVF   FED,F
0A1C4:  MOVF   FED,F
0A1C6:  MOVF   FED,F
....................                     iv1_data_ptr->uncopied_counter += PACKET_SIZE;
0A1C8:  MOVLW  05
0A1CA:  ADDWF  x28,W
0A1CC:  MOVWF  FE9
0A1CE:  MOVLW  00
0A1D0:  ADDWFC x29,W
0A1D2:  MOVWF  FEA
0A1D4:  MOVLW  40
0A1D6:  ADDWF  FEF,W
0A1D8:  MOVWF  00
0A1DA:  MOVLW  00
0A1DC:  ADDWFC FEC,W
0A1DE:  MOVWF  01
0A1E0:  MOVLW  00
0A1E2:  ADDWFC FEC,W
0A1E4:  MOVWF  02
0A1E6:  MOVLW  00
0A1E8:  ADDWFC FEC,W
0A1EA:  MOVWF  03
0A1EC:  MOVF   FED,F
0A1EE:  MOVF   FED,F
0A1F0:  MOVF   FED,F
0A1F2:  MOVFF  00,FEF
0A1F6:  MOVFF  01,FEC
0A1FA:  MOVFF  02,FEC
0A1FE:  MOVFF  03,FEC
0A202:  MOVF   FED,F
0A204:  MOVF   FED,F
0A206:  MOVF   FED,F
....................                     break;
0A208:  MOVLB  0
0A20A:  GOTO   A306
....................                 case 2:
....................                     write_address += iv2_data_ptr->used_counter;
0A20E:  MOVLW  01
0A210:  MOVLB  1
0A212:  ADDWF  x2C,W
0A214:  MOVWF  FE9
0A216:  MOVLW  00
0A218:  ADDWFC x2D,W
0A21A:  MOVWF  FEA
0A21C:  MOVFF  FEF,00
0A220:  MOVFF  FEC,01
0A224:  MOVFF  FEC,02
0A228:  MOVFF  FEC,03
0A22C:  MOVF   FED,F
0A22E:  MOVF   FED,F
0A230:  MOVF   FED,F
0A232:  MOVF   00,W
0A234:  MOVLB  A
0A236:  ADDWF  xB6,F
0A238:  MOVF   01,W
0A23A:  ADDWFC xB7,F
0A23C:  MOVF   02,W
0A23E:  ADDWFC xB8,F
0A240:  MOVF   03,W
0A242:  ADDWFC xB9,F
....................                     write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
0A244:  MOVFF  115,B9F
0A248:  MOVFF  114,B9E
0A24C:  MOVFF  113,B9D
0A250:  MOVFF  112,B9C
0A254:  MOVFF  AB9,BA3
0A258:  MOVFF  AB8,BA2
0A25C:  MOVFF  AB7,BA1
0A260:  MOVFF  AB6,BA0
0A264:  MOVLW  0A
0A266:  MOVLB  B
0A268:  MOVWF  xA5
0A26A:  MOVLW  6B
0A26C:  MOVWF  xA4
0A26E:  CLRF   xA7
0A270:  MOVLW  40
0A272:  MOVWF  xA6
0A274:  MOVLB  0
0A276:  CALL   39FE
....................                     iv2_data_ptr->used_counter += PACKET_SIZE;
0A27A:  MOVLW  01
0A27C:  MOVLB  1
0A27E:  ADDWF  x2C,W
0A280:  MOVWF  FE9
0A282:  MOVLW  00
0A284:  ADDWFC x2D,W
0A286:  MOVWF  FEA
0A288:  MOVLW  40
0A28A:  ADDWF  FEF,W
0A28C:  MOVWF  00
0A28E:  MOVLW  00
0A290:  ADDWFC FEC,W
0A292:  MOVWF  01
0A294:  MOVLW  00
0A296:  ADDWFC FEC,W
0A298:  MOVWF  02
0A29A:  MOVLW  00
0A29C:  ADDWFC FEC,W
0A29E:  MOVWF  03
0A2A0:  MOVF   FED,F
0A2A2:  MOVF   FED,F
0A2A4:  MOVF   FED,F
0A2A6:  MOVFF  00,FEF
0A2AA:  MOVFF  01,FEC
0A2AE:  MOVFF  02,FEC
0A2B2:  MOVFF  03,FEC
0A2B6:  MOVF   FED,F
0A2B8:  MOVF   FED,F
0A2BA:  MOVF   FED,F
....................                     iv2_data_ptr->uncopied_counter += PACKET_SIZE;
0A2BC:  MOVLW  05
0A2BE:  ADDWF  x2C,W
0A2C0:  MOVWF  FE9
0A2C2:  MOVLW  00
0A2C4:  ADDWFC x2D,W
0A2C6:  MOVWF  FEA
0A2C8:  MOVLW  40
0A2CA:  ADDWF  FEF,W
0A2CC:  MOVWF  00
0A2CE:  MOVLW  00
0A2D0:  ADDWFC FEC,W
0A2D2:  MOVWF  01
0A2D4:  MOVLW  00
0A2D6:  ADDWFC FEC,W
0A2D8:  MOVWF  02
0A2DA:  MOVLW  00
0A2DC:  ADDWFC FEC,W
0A2DE:  MOVWF  03
0A2E0:  MOVF   FED,F
0A2E2:  MOVF   FED,F
0A2E4:  MOVF   FED,F
0A2E6:  MOVFF  00,FEF
0A2EA:  MOVFF  01,FEC
0A2EE:  MOVFF  02,FEC
0A2F2:  MOVFF  03,FEC
0A2F6:  MOVF   FED,F
0A2F8:  MOVF   FED,F
0A2FA:  MOVF   FED,F
....................                     break;
0A2FC:  MOVLB  0
0A2FE:  GOTO   A306
....................                 default:
....................                     break;
0A302:  GOTO   A306
....................             }
.................... 
....................             // デバッグ表示
....................             fprintf(PC, "\r\n");
0A306:  MOVLW  0D
0A308:  BTFSS  FA6.6
0A30A:  GOTO   A308
0A30E:  MOVLB  E
0A310:  MOVWF  xF9
0A312:  MOVLW  0A
0A314:  MOVLB  0
0A316:  BTFSS  FA6.6
0A318:  GOTO   A316
0A31C:  MOVLB  E
0A31E:  MOVWF  xF9
....................             for (unsigned int32 j = 0; j < PACKET_SIZE; j++) {
0A320:  MOVLB  A
0A322:  CLRF   xBD
0A324:  CLRF   xBC
0A326:  CLRF   xBB
0A328:  CLRF   xBA
0A32A:  MOVLB  0
0A32C:  MOVLB  A
0A32E:  MOVF   xBD,F
0A330:  BTFSC  FD8.2
0A332:  BRA    A33A
0A334:  MOVLB  0
0A336:  GOTO   A3B4
0A33A:  MOVLB  0
0A33C:  MOVLB  A
0A33E:  MOVF   xBC,F
0A340:  BTFSC  FD8.2
0A342:  BRA    A34A
0A344:  MOVLB  0
0A346:  GOTO   A3B4
0A34A:  MOVLB  0
0A34C:  MOVLB  A
0A34E:  MOVF   xBB,F
0A350:  BTFSC  FD8.2
0A352:  BRA    A35A
0A354:  MOVLB  0
0A356:  GOTO   A3B4
0A35A:  MOVLB  0
0A35C:  MOVLB  A
0A35E:  MOVF   xBA,W
0A360:  SUBLW  3F
0A362:  BTFSC  FD8.0
0A364:  BRA    A36C
0A366:  MOVLB  0
0A368:  GOTO   A3B4
0A36C:  MOVLB  0
....................                 fprintf(PC, "%02X ", packetdata[j]);
0A36E:  MOVLW  6B
0A370:  MOVLB  A
0A372:  ADDWF  xBA,W
0A374:  MOVWF  FE9
0A376:  MOVLW  0A
0A378:  ADDWFC xBB,W
0A37A:  MOVWF  FEA
0A37C:  MOVFF  FEF,AC7
0A380:  MOVFF  AC7,AC8
0A384:  MOVLW  37
0A386:  MOVWF  xC9
0A388:  MOVLB  0
0A38A:  CALL   200A
0A38E:  MOVLW  20
0A390:  BTFSS  FA6.6
0A392:  GOTO   A390
0A396:  MOVLB  E
0A398:  MOVWF  xF9
0A39A:  MOVLB  0
0A39C:  MOVLW  01
0A39E:  MOVLB  A
0A3A0:  ADDWF  xBA,F
0A3A2:  BTFSC  FD8.0
0A3A4:  INCF   xBB,F
0A3A6:  BTFSC  FD8.2
0A3A8:  INCF   xBC,F
0A3AA:  BTFSC  FD8.2
0A3AC:  INCF   xBD,F
0A3AE:  MOVLB  0
0A3B0:  GOTO   A32C
....................             }
.................... 
....................             // パケット初期化
....................             packet_index = 0;
0A3B4:  MOVLB  A
0A3B6:  CLRF   xAB
....................             memset(packetdata, 0x00, PACKET_SIZE);
0A3B8:  MOVLW  0A
0A3BA:  MOVWF  FEA
0A3BC:  MOVLW  6B
0A3BE:  MOVWF  FE9
0A3C0:  CLRF   00
0A3C2:  CLRF   02
0A3C4:  MOVLW  40
0A3C6:  MOVWF  01
0A3C8:  MOVLB  0
0A3CA:  CALL   29EA
....................         }
.................... 
....................         // データ書き込み
....................         packetdata[packet_index++] = (data0 >> 4) & 0xFF;
0A3CE:  MOVLB  A
0A3D0:  MOVF   xAB,W
0A3D2:  INCF   xAB,F
0A3D4:  CLRF   03
0A3D6:  ADDLW  6B
0A3D8:  MOVWF  FE9
0A3DA:  MOVLW  0A
0A3DC:  ADDWFC 03,W
0A3DE:  MOVWF  FEA
0A3E0:  RRCF   xB2,W
0A3E2:  MOVWF  xCA
0A3E4:  RRCF   xB1,W
0A3E6:  MOVWF  xC9
0A3E8:  RRCF   xCA,F
0A3EA:  RRCF   xC9,F
0A3EC:  RRCF   xCA,F
0A3EE:  RRCF   xC9,F
0A3F0:  RRCF   xCA,F
0A3F2:  RRCF   xC9,F
0A3F4:  MOVLW  0F
0A3F6:  ANDWF  xCA,F
0A3F8:  MOVF   xC9,W
0A3FA:  MOVWF  00
0A3FC:  CLRF   03
0A3FE:  MOVF   00,W
0A400:  MOVWF  FEF
....................         packetdata[packet_index++] = ((data0 & 0x0F) << 4) | ((data1 >> 8) & 0x0F);
0A402:  MOVF   xAB,W
0A404:  INCF   xAB,F
0A406:  CLRF   03
0A408:  ADDLW  6B
0A40A:  MOVWF  FE9
0A40C:  MOVLW  0A
0A40E:  ADDWFC 03,W
0A410:  MOVWF  FEA
0A412:  MOVF   xB1,W
0A414:  ANDLW  0F
0A416:  MOVWF  xC9
0A418:  CLRF   xCA
0A41A:  RLCF   xC9,F
0A41C:  RLCF   xCA,F
0A41E:  RLCF   xC9,F
0A420:  RLCF   xCA,F
0A422:  RLCF   xC9,F
0A424:  RLCF   xCA,F
0A426:  RLCF   xC9,F
0A428:  RLCF   xCA,F
0A42A:  MOVLW  F0
0A42C:  ANDWF  xC9,F
0A42E:  MOVFF  AB4,ACB
0A432:  CLRF   xCC
0A434:  MOVF   xCB,W
0A436:  ANDLW  0F
0A438:  MOVWF  00
0A43A:  CLRF   03
0A43C:  MOVF   00,W
0A43E:  IORWF  xC9,W
0A440:  MOVWF  00
0A442:  MOVF   03,W
0A444:  IORWF  xCA,W
0A446:  MOVWF  03
0A448:  MOVF   00,W
0A44A:  MOVWF  FEF
....................         packetdata[packet_index++] = data1 & 0xFF;
0A44C:  MOVF   xAB,W
0A44E:  INCF   xAB,F
0A450:  CLRF   03
0A452:  ADDLW  6B
0A454:  MOVWF  FE9
0A456:  MOVLW  0A
0A458:  ADDWFC 03,W
0A45A:  MOVWF  FEA
0A45C:  MOVF   xB3,W
0A45E:  MOVWF  00
0A460:  CLRF   03
0A462:  MOVF   00,W
0A464:  MOVWF  FEF
0A466:  MOVLB  0
0A468:  MOVLB  A
0A46A:  INCF   xAF,F
0A46C:  BTFSC  FD8.2
0A46E:  INCF   xB0,F
0A470:  MOVLB  0
0A472:  GOTO   9BFC
....................     }
.................... 
....................     // 最後に残ったデータの処理
....................     if (packet_index > 0) {
0A476:  MOVLB  A
0A478:  MOVF   xAB,F
0A47A:  BTFSS  FD8.2
0A47C:  BRA    A484
0A47E:  MOVLB  0
0A480:  GOTO   A6EC
0A484:  MOVLB  0
....................         for (unsigned int8 j = packet_index; j < PACKET_SIZE - 1; j++) {
0A486:  MOVFF  AAB,ABE
0A48A:  MOVLB  A
0A48C:  MOVF   xBE,W
0A48E:  SUBLW  3E
0A490:  BTFSC  FD8.0
0A492:  BRA    A49A
0A494:  MOVLB  0
0A496:  GOTO   A4BA
0A49A:  MOVLB  0
....................             packetdata[j] = 0x00;
0A49C:  CLRF   03
0A49E:  MOVLB  A
0A4A0:  MOVF   xBE,W
0A4A2:  ADDLW  6B
0A4A4:  MOVWF  FE9
0A4A6:  MOVLW  0A
0A4A8:  ADDWFC 03,W
0A4AA:  MOVWF  FEA
0A4AC:  CLRF   FEF
0A4AE:  MOVLB  0
0A4B0:  MOVLB  A
0A4B2:  INCF   xBE,F
0A4B4:  MOVLB  0
0A4B6:  GOTO   A48A
....................         }
....................         packetdata[PACKET_SIZE - 1] = calc_crc8(packetdata, PACKET_SIZE - 1);
0A4BA:  MOVLW  0A
0A4BC:  MOVLB  B
0A4BE:  MOVWF  xE7
0A4C0:  MOVLW  6B
0A4C2:  MOVWF  xE6
0A4C4:  MOVLW  3F
0A4C6:  MOVWF  xE8
0A4C8:  MOVLB  0
0A4CA:  CALL   2C22
0A4CE:  MOVFF  01,AAA
....................       unsigned int32 write_address;
....................         switch (port_data_ptr->port_num)
0A4D2:  MOVLB  A
0A4D4:  MOVF   x69,W
0A4D6:  MOVWF  FE9
0A4D8:  MOVF   x6A,W
0A4DA:  MOVWF  FEA
0A4DC:  MOVF   FEF,W
0A4DE:  XORLW  01
0A4E0:  MOVLB  0
0A4E2:  BTFSC  FD8.2
0A4E4:  GOTO   A4F4
0A4E8:  XORLW  03
0A4EA:  BTFSC  FD8.2
0A4EC:  GOTO   A5EE
0A4F0:  GOTO   A6E8
....................         {
....................         case 1:
....................             write_address = MISF_CIGS_IV1_DATA_START + iv1_data_ptr->used_counter;
0A4F4:  MOVLW  01
0A4F6:  MOVLB  1
0A4F8:  ADDWF  x28,W
0A4FA:  MOVWF  FE9
0A4FC:  MOVLW  00
0A4FE:  ADDWFC x29,W
0A500:  MOVWF  FEA
0A502:  MOVFF  FEF,00
0A506:  MOVFF  FEC,01
0A50A:  MOVFF  FEC,02
0A50E:  MOVFF  FEC,03
0A512:  MOVF   FED,F
0A514:  MOVF   FED,F
0A516:  MOVF   FED,F
0A518:  MOVF   00,W
0A51A:  MOVLB  A
0A51C:  MOVWF  xBF
0A51E:  MOVLW  10
0A520:  ADDWF  01,W
0A522:  MOVWF  xC0
0A524:  MOVLW  7C
0A526:  ADDWFC 02,W
0A528:  MOVWF  xC1
0A52A:  MOVLW  00
0A52C:  ADDWFC 03,W
0A52E:  MOVWF  xC2
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
0A530:  MOVFF  115,B9F
0A534:  MOVFF  114,B9E
0A538:  MOVFF  113,B9D
0A53C:  MOVFF  112,B9C
0A540:  MOVFF  AC2,BA3
0A544:  MOVFF  AC1,BA2
0A548:  MOVFF  AC0,BA1
0A54C:  MOVFF  ABF,BA0
0A550:  MOVLW  0A
0A552:  MOVLB  B
0A554:  MOVWF  xA5
0A556:  MOVLW  6B
0A558:  MOVWF  xA4
0A55A:  CLRF   xA7
0A55C:  MOVLW  40
0A55E:  MOVWF  xA6
0A560:  MOVLB  0
0A562:  CALL   39FE
....................             iv1_data_ptr->used_counter += PACKET_SIZE;
0A566:  MOVLW  01
0A568:  MOVLB  1
0A56A:  ADDWF  x28,W
0A56C:  MOVWF  FE9
0A56E:  MOVLW  00
0A570:  ADDWFC x29,W
0A572:  MOVWF  FEA
0A574:  MOVLW  40
0A576:  ADDWF  FEF,W
0A578:  MOVWF  00
0A57A:  MOVLW  00
0A57C:  ADDWFC FEC,W
0A57E:  MOVWF  01
0A580:  MOVLW  00
0A582:  ADDWFC FEC,W
0A584:  MOVWF  02
0A586:  MOVLW  00
0A588:  ADDWFC FEC,W
0A58A:  MOVWF  03
0A58C:  MOVF   FED,F
0A58E:  MOVF   FED,F
0A590:  MOVF   FED,F
0A592:  MOVFF  00,FEF
0A596:  MOVFF  01,FEC
0A59A:  MOVFF  02,FEC
0A59E:  MOVFF  03,FEC
0A5A2:  MOVF   FED,F
0A5A4:  MOVF   FED,F
0A5A6:  MOVF   FED,F
....................             iv1_data_ptr->uncopied_counter += PACKET_SIZE;
0A5A8:  MOVLW  05
0A5AA:  ADDWF  x28,W
0A5AC:  MOVWF  FE9
0A5AE:  MOVLW  00
0A5B0:  ADDWFC x29,W
0A5B2:  MOVWF  FEA
0A5B4:  MOVLW  40
0A5B6:  ADDWF  FEF,W
0A5B8:  MOVWF  00
0A5BA:  MOVLW  00
0A5BC:  ADDWFC FEC,W
0A5BE:  MOVWF  01
0A5C0:  MOVLW  00
0A5C2:  ADDWFC FEC,W
0A5C4:  MOVWF  02
0A5C6:  MOVLW  00
0A5C8:  ADDWFC FEC,W
0A5CA:  MOVWF  03
0A5CC:  MOVF   FED,F
0A5CE:  MOVF   FED,F
0A5D0:  MOVF   FED,F
0A5D2:  MOVFF  00,FEF
0A5D6:  MOVFF  01,FEC
0A5DA:  MOVFF  02,FEC
0A5DE:  MOVFF  03,FEC
0A5E2:  MOVF   FED,F
0A5E4:  MOVF   FED,F
0A5E6:  MOVF   FED,F
....................             break;
0A5E8:  MOVLB  0
0A5EA:  GOTO   A6EC
....................         case 2:
....................          write_address = MISF_CIGS_IV2_DATA_START + iv2_data_ptr->used_counter;
0A5EE:  MOVLW  01
0A5F0:  MOVLB  1
0A5F2:  ADDWF  x2C,W
0A5F4:  MOVWF  FE9
0A5F6:  MOVLW  00
0A5F8:  ADDWFC x2D,W
0A5FA:  MOVWF  FEA
0A5FC:  MOVFF  FEF,00
0A600:  MOVFF  FEC,01
0A604:  MOVFF  FEC,02
0A608:  MOVFF  FEC,03
0A60C:  MOVF   FED,F
0A60E:  MOVF   FED,F
0A610:  MOVF   FED,F
0A612:  MOVF   00,W
0A614:  MOVLB  A
0A616:  MOVWF  xBF
0A618:  MOVLW  10
0A61A:  ADDWF  01,W
0A61C:  MOVWF  xC0
0A61E:  MOVLW  7C
0A620:  ADDWFC 02,W
0A622:  MOVWF  xC1
0A624:  MOVLW  00
0A626:  ADDWFC 03,W
0A628:  MOVWF  xC2
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
0A62A:  MOVFF  115,B9F
0A62E:  MOVFF  114,B9E
0A632:  MOVFF  113,B9D
0A636:  MOVFF  112,B9C
0A63A:  MOVFF  AC2,BA3
0A63E:  MOVFF  AC1,BA2
0A642:  MOVFF  AC0,BA1
0A646:  MOVFF  ABF,BA0
0A64A:  MOVLW  0A
0A64C:  MOVLB  B
0A64E:  MOVWF  xA5
0A650:  MOVLW  6B
0A652:  MOVWF  xA4
0A654:  CLRF   xA7
0A656:  MOVLW  40
0A658:  MOVWF  xA6
0A65A:  MOVLB  0
0A65C:  CALL   39FE
....................             iv2_data_ptr->used_counter += PACKET_SIZE;
0A660:  MOVLW  01
0A662:  MOVLB  1
0A664:  ADDWF  x2C,W
0A666:  MOVWF  FE9
0A668:  MOVLW  00
0A66A:  ADDWFC x2D,W
0A66C:  MOVWF  FEA
0A66E:  MOVLW  40
0A670:  ADDWF  FEF,W
0A672:  MOVWF  00
0A674:  MOVLW  00
0A676:  ADDWFC FEC,W
0A678:  MOVWF  01
0A67A:  MOVLW  00
0A67C:  ADDWFC FEC,W
0A67E:  MOVWF  02
0A680:  MOVLW  00
0A682:  ADDWFC FEC,W
0A684:  MOVWF  03
0A686:  MOVF   FED,F
0A688:  MOVF   FED,F
0A68A:  MOVF   FED,F
0A68C:  MOVFF  00,FEF
0A690:  MOVFF  01,FEC
0A694:  MOVFF  02,FEC
0A698:  MOVFF  03,FEC
0A69C:  MOVF   FED,F
0A69E:  MOVF   FED,F
0A6A0:  MOVF   FED,F
....................             iv2_data_ptr->uncopied_counter += PACKET_SIZE;
0A6A2:  MOVLW  05
0A6A4:  ADDWF  x2C,W
0A6A6:  MOVWF  FE9
0A6A8:  MOVLW  00
0A6AA:  ADDWFC x2D,W
0A6AC:  MOVWF  FEA
0A6AE:  MOVLW  40
0A6B0:  ADDWF  FEF,W
0A6B2:  MOVWF  00
0A6B4:  MOVLW  00
0A6B6:  ADDWFC FEC,W
0A6B8:  MOVWF  01
0A6BA:  MOVLW  00
0A6BC:  ADDWFC FEC,W
0A6BE:  MOVWF  02
0A6C0:  MOVLW  00
0A6C2:  ADDWFC FEC,W
0A6C4:  MOVWF  03
0A6C6:  MOVF   FED,F
0A6C8:  MOVF   FED,F
0A6CA:  MOVF   FED,F
0A6CC:  MOVFF  00,FEF
0A6D0:  MOVFF  01,FEC
0A6D4:  MOVFF  02,FEC
0A6D8:  MOVFF  03,FEC
0A6DC:  MOVF   FED,F
0A6DE:  MOVF   FED,F
0A6E0:  MOVF   FED,F
....................             break;
0A6E2:  MOVLB  0
0A6E4:  GOTO   A6EC
....................         default:
....................             break;
0A6E8:  GOTO   A6EC
....................         }
.................... 
....................     }
....................                 // デバッグ表示
....................     fprintf(PC, "\r\n");
0A6EC:  MOVLW  0D
0A6EE:  BTFSS  FA6.6
0A6F0:  GOTO   A6EE
0A6F4:  MOVLB  E
0A6F6:  MOVWF  xF9
0A6F8:  MOVLW  0A
0A6FA:  MOVLB  0
0A6FC:  BTFSS  FA6.6
0A6FE:  GOTO   A6FC
0A702:  MOVLB  E
0A704:  MOVWF  xF9
....................     for (unsigned int32 j = 0; j < PACKET_SIZE; j++) {
0A706:  MOVLB  A
0A708:  CLRF   xC6
0A70A:  CLRF   xC5
0A70C:  CLRF   xC4
0A70E:  CLRF   xC3
0A710:  MOVLB  0
0A712:  MOVLB  A
0A714:  MOVF   xC6,F
0A716:  BTFSC  FD8.2
0A718:  BRA    A720
0A71A:  MOVLB  0
0A71C:  GOTO   A79A
0A720:  MOVLB  0
0A722:  MOVLB  A
0A724:  MOVF   xC5,F
0A726:  BTFSC  FD8.2
0A728:  BRA    A730
0A72A:  MOVLB  0
0A72C:  GOTO   A79A
0A730:  MOVLB  0
0A732:  MOVLB  A
0A734:  MOVF   xC4,F
0A736:  BTFSC  FD8.2
0A738:  BRA    A740
0A73A:  MOVLB  0
0A73C:  GOTO   A79A
0A740:  MOVLB  0
0A742:  MOVLB  A
0A744:  MOVF   xC3,W
0A746:  SUBLW  3F
0A748:  BTFSC  FD8.0
0A74A:  BRA    A752
0A74C:  MOVLB  0
0A74E:  GOTO   A79A
0A752:  MOVLB  0
....................         fprintf(PC, "%02X ", packetdata[j]);
0A754:  MOVLW  6B
0A756:  MOVLB  A
0A758:  ADDWF  xC3,W
0A75A:  MOVWF  FE9
0A75C:  MOVLW  0A
0A75E:  ADDWFC xC4,W
0A760:  MOVWF  FEA
0A762:  MOVFF  FEF,AC7
0A766:  MOVFF  AC7,AC8
0A76A:  MOVLW  37
0A76C:  MOVWF  xC9
0A76E:  MOVLB  0
0A770:  CALL   200A
0A774:  MOVLW  20
0A776:  BTFSS  FA6.6
0A778:  GOTO   A776
0A77C:  MOVLB  E
0A77E:  MOVWF  xF9
0A780:  MOVLB  0
0A782:  MOVLW  01
0A784:  MOVLB  A
0A786:  ADDWF  xC3,F
0A788:  BTFSC  FD8.0
0A78A:  INCF   xC4,F
0A78C:  BTFSC  FD8.2
0A78E:  INCF   xC5,F
0A790:  BTFSC  FD8.2
0A792:  INCF   xC6,F
0A794:  MOVLB  0
0A796:  GOTO   A712
....................     }
....................     // fprintf(PC, "End CIGS data conversion\r\n");
....................     misf_update_address_area(); // Write the mission flash address area
0A79A:  CALL   423A
0A79E:  RETURN 0
.................... }
.................... 
.................... 
.................... iv_env_t create_meas_data()
.................... {
....................     iv_env_t data;
....................     memset(&data, 0, sizeof(data));
*
078F6:  MOVLW  0A
078F8:  MOVWF  FEA
078FA:  MOVLW  7B
078FC:  MOVWF  FE9
078FE:  CLRF   00
07900:  CLRF   02
07902:  MOVLW  0C
07904:  MOVWF  01
07906:  CALL   29EA
....................     data.time           = get_current_sec();
0790A:  CALL   36E6
0790E:  MOVFF  03,A7E
07912:  MOVFF  02,A7D
07916:  MOVFF  01,A7C
0791A:  MOVFF  00,A7B
....................     data.temp_py_top    = ad7490_read(ADC_TEMP_PY_TOP);
0791E:  MOVLW  0D
07920:  MOVLB  A
07922:  MOVWF  x87
07924:  MOVLB  0
07926:  CALL   1F7E
0792A:  MOVFF  02,A82
0792E:  MOVFF  01,A81
....................     data.temp_py_bot    = ad7490_read(ADC_TEMP_PY_BOT);
07932:  MOVLW  0E
07934:  MOVLB  A
07936:  MOVWF  x87
07938:  MOVLB  0
0793A:  CALL   1F7E
0793E:  MOVFF  02,A84
07942:  MOVFF  01,A83
....................     data.temp_mis7      = ad7490_read(ADC_TEMP_MIS7);
07946:  MOVLW  0C
07948:  MOVLB  A
0794A:  MOVWF  x87
0794C:  MOVLB  0
0794E:  CALL   1F7E
07952:  MOVFF  02,A86
07956:  MOVFF  01,A85
....................     data.pd             = ad7490_read(ADC_PD);
0795A:  MOVLW  0F
0795C:  MOVLB  A
0795E:  MOVWF  x87
07960:  MOVLB  0
07962:  CALL   1F7E
07966:  MOVFF  02,A80
0796A:  MOVFF  01,A7F
....................     return data;
0796E:  MOVLW  7B
07970:  MOVWF  01
07972:  MOVLW  0A
07974:  MOVWF  02
07976:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "domain/mmj_cigs_piclog.c"
.................... #include "mmj_cigs_piclog.h"                          // 同じフォルダのヘッダー
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/timer.h"                   // タイマーライブラリ  
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... 
.................... unsigned int32 get_current_msec();
.................... void set_current_msec(unsigned int32 msec);
.................... void add_current_msec(unsigned int32 msec);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "mmj_cigs_flash.h"                 // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x000FFFFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  0x00001000
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     0x00010000
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     0x00010000
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  0x00010000
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    0x00010000
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  0x00010000
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    0x00010000
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t flash_counter_table[];
.................... extern FlashCounter_t *flash_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"               // フラッシュ操作キュー
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                 // フラッシュデバイス
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // #define PICLOG_DEBUG
.................... #define MISSION_ID_PICLOG 0x03  // PICLOGミッションID
.................... 
.................... void piclog_make(int8 function, int8 parameter)
*
04AE2:  MOVLW  02
04AE4:  MOVLB  2
04AE6:  MOVWF  x9F
04AE8:  MOVLW  98
04AEA:  MOVWF  x9E
.................... {
....................     piclog_t piclog;
....................     piclog_t *piclog_ptr = &piclog;
....................     memset(piclog_ptr, 0x00, PICLOG_PACKET_SIZE);
04AEC:  MOVFF  29F,FEA
04AF0:  MOVFF  29E,FE9
04AF4:  CLRF   00
04AF6:  CLRF   02
04AF8:  MOVLW  06
04AFA:  MOVWF  01
04AFC:  MOVLB  0
04AFE:  CALL   29EA
....................     piclog_ptr->fields.time = get_current_sec();
04B02:  MOVLB  2
04B04:  MOVF   x9E,W
04B06:  MOVWF  01
04B08:  MOVF   x9F,W
04B0A:  MOVWF  03
04B0C:  MOVF   01,W
04B0E:  MOVWF  xA1
04B10:  MOVFF  03,2A2
04B14:  MOVLB  0
04B16:  CALL   36E6
04B1A:  MOVFF  2A2,FEA
04B1E:  MOVFF  2A1,FE9
04B22:  MOVFF  00,FEF
04B26:  MOVFF  01,FEC
04B2A:  MOVFF  02,FEC
04B2E:  MOVFF  03,FEC
04B32:  MOVF   FED,F
04B34:  MOVF   FED,F
04B36:  MOVF   FED,F
....................     piclog_ptr->fields.function = function;
04B38:  MOVLW  04
04B3A:  MOVLB  2
04B3C:  ADDWF  x9E,W
04B3E:  MOVWF  FE9
04B40:  MOVLW  00
04B42:  ADDWFC x9F,W
04B44:  MOVWF  FEA
04B46:  MOVFF  296,FEF
....................     piclog_ptr->fields.parameter = parameter;
04B4A:  MOVLW  05
04B4C:  ADDWF  x9E,W
04B4E:  MOVWF  FE9
04B50:  MOVLW  00
04B52:  ADDWFC x9F,W
04B54:  MOVWF  FEA
04B56:  MOVFF  297,FEF
.................... 
....................     printf("[PICLOG] : ");
04B5A:  MOVLW  3A
04B5C:  MOVWF  FF6
04B5E:  MOVLW  06
04B60:  MOVWF  FF7
04B62:  MOVLW  00
04B64:  MOVWF  FF8
04B66:  MOVLB  0
04B68:  CALL   1DC0
....................     for (int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
04B6C:  MOVLB  2
04B6E:  CLRF   xA0
04B70:  MOVLB  0
04B72:  MOVLB  2
04B74:  MOVF   xA0,W
04B76:  SUBLW  05
04B78:  BTFSC  FD8.0
04B7A:  BRA    4B82
04B7C:  MOVLB  0
04B7E:  GOTO   4BBE
04B82:  MOVLB  0
....................         printf("%02X ", piclog_ptr->bytes[i]);
04B84:  MOVLB  2
04B86:  MOVF   xA0,W
04B88:  ADDWF  x9E,W
04B8A:  MOVWF  FE9
04B8C:  MOVLW  00
04B8E:  ADDWFC x9F,W
04B90:  MOVWF  FEA
04B92:  MOVFF  FEF,2A1
04B96:  MOVFF  2A1,AC8
04B9A:  MOVLW  37
04B9C:  MOVLB  A
04B9E:  MOVWF  xC9
04BA0:  MOVLB  0
04BA2:  CALL   200A
04BA6:  MOVLW  20
04BA8:  BTFSS  FA6.6
04BAA:  GOTO   4BA8
04BAE:  MOVLB  E
04BB0:  MOVWF  xF9
04BB2:  MOVLB  0
04BB4:  MOVLB  2
04BB6:  INCF   xA0,F
04BB8:  MOVLB  0
04BBA:  GOTO   4B72
....................     }
....................     printf("\r\n");
04BBE:  MOVLW  0D
04BC0:  BTFSS  FA6.6
04BC2:  GOTO   4BC0
04BC6:  MOVLB  E
04BC8:  MOVWF  xF9
04BCA:  MOVLW  0A
04BCC:  MOVLB  0
04BCE:  BTFSS  FA6.6
04BD0:  GOTO   4BCE
04BD4:  MOVLB  E
04BD6:  MOVWF  xF9
.................... 
....................     misf_write_data(FLASH_ID_PICLOG, piclog_ptr->bytes, PICLOG_PACKET_SIZE);
04BD8:  MOVLB  2
04BDA:  MOVF   x9E,W
04BDC:  MOVWF  01
04BDE:  MOVF   x9F,W
04BE0:  MOVWF  03
04BE2:  MOVF   01,W
04BE4:  MOVWF  xA1
04BE6:  MOVFF  03,2A2
04BEA:  MOVLW  01
04BEC:  MOVLB  A
04BEE:  MOVWF  xC1
04BF0:  MOVFF  2A2,AC3
04BF4:  MOVFF  2A1,AC2
04BF8:  CLRF   xC5
04BFA:  MOVLW  06
04BFC:  MOVWF  xC4
04BFE:  MOVLB  0
04C00:  CALL   42C8
04C04:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "domain/mmj_cigs_smf.c"
.................... #include "mmj_cigs_smf.h"  
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../hal/mmj_cigs_config.h" // int8,int32 型など(CCS C) 依存
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_flash.h"       // MISF_ADDRESS_TABLE, flash_counter_table 依存
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x000FFFFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  0x00001000
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     0x00010000
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     0x00010000
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  0x00010000
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    0x00010000
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  0x00010000
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    0x00010000
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t flash_counter_table[];
.................... extern FlashCounter_t *flash_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 loop_counter;
....................     int8 reserved[3];
.................... } SMF_PARTITION;
.................... 
.................... // パーティション管理構造体
.................... typedef struct {
....................     SMF_PARTITION piclog;     // データテーブル領域は利用しないため削除
....................     SMF_PARTITION env;
....................     SMF_PARTITION iv1_header;
....................     SMF_PARTITION iv1_data;
....................     SMF_PARTITION iv2_header;
....................     SMF_PARTITION iv2_data;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... extern PartitionParam param;  // extern宣言に変更
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         partition_header_t headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... 
.................... 
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "mmj_cigs_flash.h"
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x000FFFFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  0x00001000
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     0x00010000
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     0x00010000
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  0x00010000
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    0x00010000
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  0x00010000
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    0x00010000
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t flash_counter_table[];
.................... extern FlashCounter_t *flash_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mt25q.h"              // Flash device definitions
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/tool/smf_queue.h"            // システム設定 
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/tool/calc_tools.h"           // SMF処理関数 
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/mmj_smf_memorymap.h" 
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS 0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS 0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS 0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS 0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS 0x06AA1FFF
.................... #define CIGS_ENVIRO_START_ADDRESS 0x06AA2000
.................... #define CIGS_ENVIRO_END_ADDRESS 0x06B41FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS 0x06B42000
.................... #define CIGS_IV1_HEADER_END_ADDRESS 0x06BE1FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS 0x06BE2000
.................... #define CIGS_IV1_DATA_END_ADDRESS 0x06FE2FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS 0x06FE3000
.................... #define CIGS_IV2_HEADER_END_ADDRESS 0x07082FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS 0x07083000
.................... #define CIGS_IV2_DATA_END_ADDRESS 0x07483FFF
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... #define CRC_RETRY_COUNT 5     // CRC検証のリトライ回数 (smf_queue.hの値と整合するなら一元化検討)
.................... 
.................... 
.................... 
.................... PartitionParam param = {0};
.................... 
.................... 
.................... const ADDRESS_AREA_T SMF_ADDRESS_TABLE[FLASH_ID_COUNT] = {
....................     { CIGS_DATA_TABLE_START_ADDRESS,   CIGS_DATA_TABLE_END_ADDRESS,   MISF_CIGS_DATA_TABLE_SIZE },
....................     { CIGS_PICLOG_START_ADDRESS,       CIGS_PICLOG_END_ADDRESS,       MISF_CIGS_PICLOG_SIZE },
....................     { CIGS_ENVIRO_START_ADDRESS,       CIGS_ENVIRO_END_ADDRESS,       MISF_CIGS_ENVIRO_SIZE },
....................     { CIGS_IV1_HEADER_START_ADDRESS,   CIGS_IV1_HEADER_END_ADDRESS,   MISF_CIGS_IV1_HEADER_SIZE },
....................     { CIGS_IV1_DATA_START_ADDRESS,     CIGS_IV1_DATA_END_ADDRESS,     MISF_CIGS_IV1_DATA_SIZE },
....................     { CIGS_IV2_HEADER_START_ADDRESS,   CIGS_IV2_HEADER_END_ADDRESS,   MISF_CIGS_IV2_HEADER_SIZE },
....................     { CIGS_IV2_DATA_START_ADDRESS,     CIGS_IV2_DATA_END_ADDRESS,     MISF_CIGS_IV2_DATA_SIZE }
.................... };
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void smf_data_table_init()
.................... {
....................     fprintf(PC, "SMF Data Table Initialize\r\n");
*
070CE:  MOVLW  46
070D0:  MOVWF  FF6
070D2:  MOVLW  06
070D4:  MOVWF  FF7
070D6:  MOVLW  00
070D8:  MOVWF  FF8
070DA:  CALL   1DC0
....................     FlashData_t smf_data_table = {0};
070DE:  MOVLB  2
070E0:  CLRF   xE2
070E2:  CLRF   xE3
070E4:  CLRF   xE4
070E6:  CLRF   xE5
070E8:  CLRF   xE6
070EA:  CLRF   xE7
070EC:  CLRF   xE8
070EE:  CLRF   xE9
070F0:  CLRF   xEA
070F2:  CLRF   xEB
070F4:  CLRF   xEC
070F6:  CLRF   xED
070F8:  CLRF   xEE
070FA:  CLRF   xEF
070FC:  CLRF   xF0
070FE:  CLRF   xF1
07100:  CLRF   xF2
07102:  CLRF   xF3
07104:  CLRF   xF4
07106:  CLRF   xF5
07108:  CLRF   xF6
0710A:  CLRF   xF7
0710C:  CLRF   xF8
0710E:  CLRF   xF9
07110:  CLRF   xFA
07112:  CLRF   xFB
07114:  CLRF   xFC
07116:  CLRF   xFD
07118:  CLRF   xFE
0711A:  CLRF   xFF
0711C:  MOVLB  3
0711E:  CLRF   x00
07120:  CLRF   x01
07122:  CLRF   x02
07124:  CLRF   x03
07126:  CLRF   x04
07128:  CLRF   x05
0712A:  CLRF   x06
0712C:  CLRF   x07
0712E:  CLRF   x08
07130:  CLRF   x09
07132:  CLRF   x0A
07134:  CLRF   x0B
07136:  CLRF   x0C
07138:  CLRF   x0D
0713A:  CLRF   x0E
0713C:  CLRF   x0F
0713E:  CLRF   x10
07140:  CLRF   x11
07142:  CLRF   x12
07144:  CLRF   x13
07146:  CLRF   x14
07148:  CLRF   x15
0714A:  CLRF   x16
0714C:  CLRF   x17
0714E:  CLRF   x18
07150:  CLRF   x19
07152:  CLRF   x1A
07154:  CLRF   x1B
07156:  CLRF   x1C
07158:  CLRF   x1D
0715A:  CLRF   x1E
0715C:  CLRF   x1F
0715E:  CLRF   x20
07160:  CLRF   x21
....................     calc_crc8(smf_data_table.bytes, PACKET_SIZE - 1); // CRCを計算して初期化
07162:  MOVLW  02
07164:  MOVLB  B
07166:  MOVWF  xE7
07168:  MOVLW  E2
0716A:  MOVWF  xE6
0716C:  MOVLW  3F
0716E:  MOVWF  xE8
07170:  MOVLB  0
07172:  CALL   2C22
.................... 
....................     write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table.bytes, PACKET_SIZE);
07176:  MOVFF  119,B9F
0717A:  MOVFF  118,B9E
0717E:  MOVFF  117,B9D
07182:  MOVFF  116,B9C
07186:  MOVLW  06
07188:  MOVLB  B
0718A:  MOVWF  xA3
0718C:  MOVLW  AA
0718E:  MOVWF  xA2
07190:  CLRF   xA1
07192:  CLRF   xA0
07194:  MOVLW  02
07196:  MOVWF  xA5
07198:  MOVLW  E2
0719A:  MOVWF  xA4
0719C:  CLRF   xA7
0719E:  MOVLW  40
071A0:  MOVWF  xA6
071A2:  MOVLB  0
071A4:  CALL   39FE
071A8:  RETURN 0
.................... }
.................... 
.................... void read_smf_header(smf_data_table_t *smf_data_table)
.................... {
....................     int8 retry_count;
.................... 
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
*
0E25A:  MOVLB  2
0E25C:  CLRF   xE1
0E25E:  MOVLB  0
0E260:  MOVLB  2
0E262:  MOVF   xE1,W
0E264:  SUBLW  04
0E266:  BTFSC  FD8.0
0E268:  BRA    E270
0E26A:  MOVLB  0
0E26C:  GOTO   E34E
0E270:  MOVLB  0
....................     {
....................         // ヘッダを読み出し
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, 
....................                         smf_data_table->bytes, PACKET_SIZE);
0E272:  MOVLB  2
0E274:  MOVF   xDF,W
0E276:  MOVWF  01
0E278:  MOVF   xE0,W
0E27A:  MOVWF  03
0E27C:  MOVF   01,W
0E27E:  MOVWF  xE2
0E280:  MOVFF  03,2E3
0E284:  MOVFF  119,B5B
0E288:  MOVFF  118,B5A
0E28C:  MOVFF  117,B59
0E290:  MOVFF  116,B58
0E294:  MOVLW  06
0E296:  MOVLB  B
0E298:  MOVWF  x5F
0E29A:  MOVLW  AA
0E29C:  MOVWF  x5E
0E29E:  CLRF   x5D
0E2A0:  CLRF   x5C
0E2A2:  MOVFF  2E3,B61
0E2A6:  MOVFF  2E2,B60
0E2AA:  CLRF   x65
0E2AC:  CLRF   x64
0E2AE:  CLRF   x63
0E2B0:  MOVLW  40
0E2B2:  MOVWF  x62
0E2B4:  MOVLB  0
0E2B6:  CALL   2A0E
.................... 
....................         // CRC検証
....................         if (is_crc_valid(smf_data_table->bytes, PACKET_SIZE-1))
0E2BA:  MOVLB  2
0E2BC:  MOVF   xDF,W
0E2BE:  MOVWF  01
0E2C0:  MOVF   xE0,W
0E2C2:  MOVWF  03
0E2C4:  MOVF   01,W
0E2C6:  MOVWF  xE2
0E2C8:  MOVFF  03,2E3
0E2CC:  MOVFF  2E3,324
0E2D0:  MOVFF  2E2,323
0E2D4:  MOVLW  3F
0E2D6:  MOVLB  3
0E2D8:  MOVWF  x25
0E2DA:  MOVLB  0
0E2DC:  CALL   E0D6
0E2E0:  MOVF   01,F
0E2E2:  BTFSC  FD8.2
0E2E4:  GOTO   E338
....................         {
....................             printf("CRC verification passed on attempt %d\r\n", retry_count + 1);
0E2E8:  MOVLW  01
0E2EA:  MOVLB  2
0E2EC:  ADDWF  xE1,W
0E2EE:  MOVWF  xE2
0E2F0:  MOVLW  62
0E2F2:  MOVWF  FF6
0E2F4:  MOVLW  06
0E2F6:  MOVWF  FF7
0E2F8:  MOVLW  00
0E2FA:  MOVWF  FF8
0E2FC:  MOVLW  23
0E2FE:  MOVLB  A
0E300:  MOVWF  x67
0E302:  MOVLB  0
0E304:  CALL   1DF6
0E308:  MOVFF  2E2,324
0E30C:  MOVLW  18
0E30E:  MOVLB  3
0E310:  MOVWF  x25
0E312:  MOVLB  0
0E314:  CALL   E124
0E318:  MOVLW  0D
0E31A:  BTFSS  FA6.6
0E31C:  GOTO   E31A
0E320:  MOVLB  E
0E322:  MOVWF  xF9
0E324:  MOVLW  0A
0E326:  MOVLB  0
0E328:  BTFSS  FA6.6
0E32A:  GOTO   E328
0E32E:  MOVLB  E
0E330:  MOVWF  xF9
....................             return; // 成功したら終了
0E332:  MOVLB  0
0E334:  GOTO   E392
....................         }
....................         // NGなら少し待って再試行
....................         delay_ms(5);
0E338:  MOVLW  05
0E33A:  MOVLB  B
0E33C:  MOVWF  xB4
0E33E:  MOVLB  0
0E340:  CALL   1D92
0E344:  MOVLB  2
0E346:  INCF   xE1,F
0E348:  MOVLB  0
0E34A:  GOTO   E260
....................     }
.................... 
....................     // ここまで来たら失敗
....................     printf("CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
0E34E:  MOVLW  8A
0E350:  MOVWF  FF6
0E352:  MOVLW  06
0E354:  MOVWF  FF7
0E356:  MOVLW  00
0E358:  MOVWF  FF8
0E35A:  MOVLW  1E
0E35C:  MOVLB  A
0E35E:  MOVWF  x67
0E360:  MOVLB  0
0E362:  CALL   1DF6
0E366:  MOVLW  05
0E368:  MOVLB  3
0E36A:  MOVWF  x24
0E36C:  MOVLW  18
0E36E:  MOVWF  x25
0E370:  MOVLB  0
0E372:  CALL   E124
0E376:  MOVLW  AA
0E378:  MOVWF  FF6
0E37A:  MOVLW  06
0E37C:  MOVWF  FF7
0E37E:  MOVLW  00
0E380:  MOVWF  FF8
0E382:  MOVLW  0B
0E384:  MOVLB  A
0E386:  MOVWF  x67
0E388:  MOVLB  0
0E38A:  CALL   1DF6
.................... 
....................     // 読み込み失敗時は初期化しておく
....................     smf_data_table_init();
0E38E:  CALL   70CE
.................... 
....................     return;
0E392:  GOTO   E5AE (RETURN)
.................... }
.................... 
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table)
0E396:  MOVLB  2
0E398:  BCF    xE1.0
.................... {
....................     int1 crc_valid = 0;
....................     int8 readdata[PACKET_SIZE];
....................     for (int8 retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
0E39A:  MOVLB  3
0E39C:  CLRF   x22
0E39E:  MOVLB  0
0E3A0:  MOVLB  3
0E3A2:  MOVF   x22,W
0E3A4:  SUBLW  04
0E3A6:  BTFSC  FD8.0
0E3A8:  BRA    E3B0
0E3AA:  MOVLB  0
0E3AC:  GOTO   E4CC
0E3B0:  MOVLB  0
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
0E3B2:  MOVFF  119,326
0E3B6:  MOVFF  118,325
0E3BA:  MOVFF  117,324
0E3BE:  MOVFF  116,323
0E3C2:  MOVLW  06
0E3C4:  MOVLB  3
0E3C6:  MOVWF  x2A
0E3C8:  MOVLW  AA
0E3CA:  MOVWF  x29
0E3CC:  CLRF   x28
0E3CE:  CLRF   x27
0E3D0:  MOVLB  0
0E3D2:  CALL   557C
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE); // ヘッダーを書き込み
0E3D6:  MOVLB  2
0E3D8:  MOVF   xDF,W
0E3DA:  MOVWF  01
0E3DC:  MOVF   xE0,W
0E3DE:  MOVWF  03
0E3E0:  MOVF   01,W
0E3E2:  MOVLB  3
0E3E4:  MOVWF  x23
0E3E6:  MOVFF  03,324
0E3EA:  MOVFF  119,B9F
0E3EE:  MOVFF  118,B9E
0E3F2:  MOVFF  117,B9D
0E3F6:  MOVFF  116,B9C
0E3FA:  MOVLW  06
0E3FC:  MOVLB  B
0E3FE:  MOVWF  xA3
0E400:  MOVLW  AA
0E402:  MOVWF  xA2
0E404:  CLRF   xA1
0E406:  CLRF   xA0
0E408:  MOVFF  324,BA5
0E40C:  MOVFF  323,BA4
0E410:  CLRF   xA7
0E412:  MOVLW  40
0E414:  MOVWF  xA6
0E416:  MOVLB  0
0E418:  CALL   39FE
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
0E41C:  MOVFF  119,B5B
0E420:  MOVFF  118,B5A
0E424:  MOVFF  117,B59
0E428:  MOVFF  116,B58
0E42C:  MOVLW  06
0E42E:  MOVLB  B
0E430:  MOVWF  x5F
0E432:  MOVLW  AA
0E434:  MOVWF  x5E
0E436:  CLRF   x5D
0E438:  CLRF   x5C
0E43A:  MOVLW  02
0E43C:  MOVWF  x61
0E43E:  MOVLW  E2
0E440:  MOVWF  x60
0E442:  CLRF   x65
0E444:  CLRF   x64
0E446:  CLRF   x63
0E448:  MOVLW  40
0E44A:  MOVWF  x62
0E44C:  MOVLB  0
0E44E:  CALL   2A0E
....................         if (is_crc_valid(readdata, PACKET_SIZE-1))
0E452:  MOVLW  02
0E454:  MOVLB  3
0E456:  MOVWF  x24
0E458:  MOVLW  E2
0E45A:  MOVWF  x23
0E45C:  MOVLW  3F
0E45E:  MOVWF  x25
0E460:  MOVLB  0
0E462:  CALL   E0D6
0E466:  MOVF   01,F
0E468:  BTFSC  FD8.2
0E46A:  GOTO   E4C2
....................         {
....................             crc_valid = 1; // FIX
0E46E:  MOVLB  2
0E470:  BSF    xE1.0
....................             fprintf(PC, "CRC verification passed on attempt %d\r\n", retry_count + 1);
0E472:  MOVLW  01
0E474:  MOVLB  3
0E476:  ADDWF  x22,W
0E478:  MOVWF  x23
0E47A:  MOVLW  B6
0E47C:  MOVWF  FF6
0E47E:  MOVLW  06
0E480:  MOVWF  FF7
0E482:  MOVLW  00
0E484:  MOVWF  FF8
0E486:  MOVLW  23
0E488:  MOVLB  A
0E48A:  MOVWF  x67
0E48C:  MOVLB  0
0E48E:  CALL   1DF6
0E492:  MOVFF  323,324
0E496:  MOVLW  18
0E498:  MOVLB  3
0E49A:  MOVWF  x25
0E49C:  MOVLB  0
0E49E:  CALL   E124
0E4A2:  MOVLW  0D
0E4A4:  BTFSS  FA6.6
0E4A6:  GOTO   E4A4
0E4AA:  MOVLB  E
0E4AC:  MOVWF  xF9
0E4AE:  MOVLW  0A
0E4B0:  MOVLB  0
0E4B2:  BTFSS  FA6.6
0E4B4:  GOTO   E4B2
0E4B8:  MOVLB  E
0E4BA:  MOVWF  xF9
....................             break;
0E4BC:  MOVLB  0
0E4BE:  GOTO   E4CC
....................         }
0E4C2:  MOVLB  3
0E4C4:  INCF   x22,F
0E4C6:  MOVLB  0
0E4C8:  GOTO   E3A0
....................     }
....................     if (!crc_valid)
0E4CC:  MOVLB  2
0E4CE:  BTFSS  xE1.0
0E4D0:  BRA    E4D8
0E4D2:  MOVLB  0
0E4D4:  GOTO   E51A
0E4D8:  MOVLB  0
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
0E4DA:  MOVLW  DE
0E4DC:  MOVWF  FF6
0E4DE:  MOVLW  06
0E4E0:  MOVWF  FF7
0E4E2:  MOVLW  00
0E4E4:  MOVWF  FF8
0E4E6:  MOVLW  25
0E4E8:  MOVLB  A
0E4EA:  MOVWF  x67
0E4EC:  MOVLB  0
0E4EE:  CALL   1DF6
0E4F2:  MOVLW  05
0E4F4:  MOVLB  3
0E4F6:  MOVWF  x24
0E4F8:  MOVLW  18
0E4FA:  MOVWF  x25
0E4FC:  MOVLB  0
0E4FE:  CALL   E124
0E502:  MOVLW  05
0E504:  MOVWF  FF6
0E506:  MOVLW  07
0E508:  MOVWF  FF7
0E50A:  MOVLW  00
0E50C:  MOVWF  FF8
0E50E:  MOVLW  0B
0E510:  MOVLB  A
0E512:  MOVWF  x67
0E514:  MOVLB  0
0E516:  CALL   1DF6
....................         // return; 
....................     }
0E51A:  GOTO   EFC0 (RETURN)
.................... }
.................... 
.................... 
.................... void smf_write(FlashOperationStruct *smf_data_ptr)
.................... {
....................     fprintf(PC, "\r\n_______________________________\r\n");
0E51E:  MOVLW  12
0E520:  MOVWF  FF6
0E522:  MOVLW  07
0E524:  MOVWF  FF7
0E526:  MOVLW  00
0E528:  MOVWF  FF8
0E52A:  CALL   1DC0
....................     fprintf(PC, "_________Start copy_data_________\r\n");
0E52E:  MOVLW  36
0E530:  MOVWF  FF6
0E532:  MOVLW  07
0E534:  MOVWF  FF7
0E536:  MOVLW  00
0E538:  MOVWF  FF8
0E53A:  CALL   1DC0
....................     
....................     // 接続確認
....................     if (!is_connect(mis_fm))
0E53E:  MOVFF  115,2E2
0E542:  MOVFF  114,2E1
0E546:  MOVFF  113,2E0
0E54A:  MOVFF  112,2DF
0E54E:  CALL   2922
0E552:  MOVF   01,F
0E554:  BTFSS  FD8.2
0E556:  GOTO   E56E
....................     {
....................         fprintf(PC, "Error: MIS FM is not connected\r\n");
0E55A:  MOVLW  5A
0E55C:  MOVWF  FF6
0E55E:  MOVLW  07
0E560:  MOVWF  FF7
0E562:  MOVLW  00
0E564:  MOVWF  FF8
0E566:  CALL   1DC0
....................         return;
0E56A:  GOTO   EFE0
....................     }    
....................     if (!is_connect(smf))
0E56E:  MOVFF  119,2E2
0E572:  MOVFF  118,2E1
0E576:  MOVFF  117,2E0
0E57A:  MOVFF  116,2DF
0E57E:  CALL   2922
0E582:  MOVF   01,F
0E584:  BTFSS  FD8.2
0E586:  GOTO   E59E
....................     {
....................         fprintf(PC, "Error: SMF is not connected\r\n");
0E58A:  MOVLW  7C
0E58C:  MOVWF  FF6
0E58E:  MOVLW  07
0E590:  MOVWF  FF7
0E592:  MOVLW  00
0E594:  MOVWF  FF8
0E596:  CALL   1DC0
....................         return;
0E59A:  GOTO   EFE0
....................     }    
.................... 
.................... 
....................     smf_data_table_t smf_data_table;
....................     read_smf_header(&smf_data_table);
0E59E:  MOVLW  02
0E5A0:  MOVLB  2
0E5A2:  MOVWF  xE0
0E5A4:  MOVLW  3F
0E5A6:  MOVWF  xDF
0E5A8:  MOVLB  0
0E5AA:  GOTO   E25A
.................... 
.................... 
....................     unsigned int32 write_src;
....................     unsigned int32 write_size;
.................... 
....................     //アドレスと自動更新
....................     if (smf_data_ptr->source_type == SOURCE_MISF_UNCOPIED )
0E5AE:  MOVLW  03
0E5B0:  MOVLB  2
0E5B2:  ADDWF  x3D,W
0E5B4:  MOVWF  01
0E5B6:  MOVLW  00
0E5B8:  ADDWFC x3E,W
0E5BA:  MOVWF  03
0E5BC:  MOVF   01,W
0E5BE:  MOVWF  FE9
0E5C0:  MOVFF  03,FEA
0E5C4:  BTFSS  FEF.0
0E5C6:  BRA    E5CE
0E5C8:  MOVLB  0
0E5CA:  GOTO   E6F8
0E5CE:  MOVLB  0
....................     {
....................         write_src = MISF_ADDRESS_TABLE[smf_data_ptr->mission_id].start + flash_counter_table[smf_data_ptr->mission_id].used_counter - flash_counter_table[smf_data_ptr->mission_id].uncopied_counter;
0E5D0:  MOVLB  2
0E5D2:  MOVF   x3D,W
0E5D4:  MOVWF  FE9
0E5D6:  MOVF   x3E,W
0E5D8:  MOVWF  FEA
0E5DA:  MOVF   FEF,W
0E5DC:  MULLW  0C
0E5DE:  MOVF   FF3,W
0E5E0:  CLRF   xE0
0E5E2:  MOVWF  xDF
0E5E4:  MOVFF  2E0,03
0E5E8:  MOVF   xDF,W
0E5EA:  MOVLB  0
0E5EC:  CALL   0132
0E5F0:  MOVWF  00
0E5F2:  TBLRD*+
0E5F4:  MOVFF  FF5,01
0E5F8:  TBLRD*+
0E5FA:  MOVFF  FF5,02
0E5FE:  TBLRD*+
0E600:  MOVFF  FF5,03
0E604:  MOVFF  03,2E4
0E608:  MOVFF  02,2E3
0E60C:  MOVFF  01,2E2
0E610:  MOVFF  00,2E1
0E614:  MOVLB  2
0E616:  MOVF   x3D,W
0E618:  MOVWF  FE9
0E61A:  MOVF   x3E,W
0E61C:  MOVWF  FEA
0E61E:  MOVF   FEF,W
0E620:  MULLW  0A
0E622:  MOVF   FF3,W
0E624:  CLRF   xE6
0E626:  MOVWF  xE5
0E628:  MOVLW  2E
0E62A:  ADDWF  xE5,W
0E62C:  MOVWF  FE9
0E62E:  MOVLW  01
0E630:  ADDWFC xE6,W
0E632:  MOVWF  FEA
0E634:  MOVFF  FEF,00
0E638:  MOVFF  FEC,01
0E63C:  MOVFF  FEC,02
0E640:  MOVFF  FEC,03
0E644:  MOVF   FED,F
0E646:  MOVF   FED,F
0E648:  MOVF   FED,F
0E64A:  MOVF   00,W
0E64C:  ADDWF  xE1,F
0E64E:  MOVF   01,W
0E650:  ADDWFC xE2,F
0E652:  MOVF   02,W
0E654:  ADDWFC xE3,F
0E656:  MOVF   03,W
0E658:  ADDWFC xE4,F
0E65A:  MOVF   x3D,W
0E65C:  MOVWF  FE9
0E65E:  MOVF   x3E,W
0E660:  MOVWF  FEA
0E662:  MOVF   FEF,W
0E664:  MULLW  0A
0E666:  MOVF   FF3,W
0E668:  CLRF   xE8
0E66A:  MOVWF  xE7
0E66C:  MOVLW  04
0E66E:  ADDWF  xE7,W
0E670:  MOVWF  01
0E672:  MOVLW  00
0E674:  ADDWFC xE8,W
0E676:  MOVWF  03
0E678:  MOVF   01,W
0E67A:  ADDLW  2E
0E67C:  MOVWF  FE9
0E67E:  MOVLW  01
0E680:  ADDWFC 03,W
0E682:  MOVWF  FEA
0E684:  MOVFF  FEF,00
0E688:  MOVFF  FEC,01
0E68C:  MOVFF  FEC,02
0E690:  MOVFF  FEC,03
0E694:  MOVF   FED,F
0E696:  MOVF   FED,F
0E698:  MOVF   FED,F
0E69A:  MOVF   00,W
0E69C:  SUBWF  xE1,W
0E69E:  MOVWF  x7F
0E6A0:  MOVF   01,W
0E6A2:  SUBWFB xE2,W
0E6A4:  MOVWF  x80
0E6A6:  MOVF   02,W
0E6A8:  SUBWFB xE3,W
0E6AA:  MOVWF  x81
0E6AC:  MOVF   03,W
0E6AE:  SUBWFB xE4,W
0E6B0:  MOVWF  x82
....................         write_size = flash_counter_table[smf_data_ptr->mission_id].uncopied_counter;
0E6B2:  MOVF   x3D,W
0E6B4:  MOVWF  FE9
0E6B6:  MOVF   x3E,W
0E6B8:  MOVWF  FEA
0E6BA:  MOVF   FEF,W
0E6BC:  MULLW  0A
0E6BE:  MOVF   FF3,W
0E6C0:  CLRF   xE0
0E6C2:  MOVWF  xDF
0E6C4:  MOVLW  04
0E6C6:  ADDWF  xDF,W
0E6C8:  MOVWF  01
0E6CA:  MOVLW  00
0E6CC:  ADDWFC xE0,W
0E6CE:  MOVWF  03
0E6D0:  MOVF   01,W
0E6D2:  ADDLW  2E
0E6D4:  MOVWF  FE9
0E6D6:  MOVLW  01
0E6D8:  ADDWFC 03,W
0E6DA:  MOVWF  FEA
0E6DC:  MOVFF  FEF,283
0E6E0:  MOVFF  FEC,284
0E6E4:  MOVFF  FEC,285
0E6E8:  MOVFF  FEC,286
0E6EC:  MOVF   FED,F
0E6EE:  MOVF   FED,F
0E6F0:  MOVF   FED,F
0E6F2:  MOVLB  0
....................     }else if(smf_data_ptr->source_type == SOURCE_MISF_MANUAL)
0E6F4:  GOTO   E762
0E6F8:  MOVLW  03
0E6FA:  MOVLB  2
0E6FC:  ADDWF  x3D,W
0E6FE:  MOVWF  01
0E700:  MOVLW  00
0E702:  ADDWFC x3E,W
0E704:  MOVWF  03
0E706:  MOVF   01,W
0E708:  MOVWF  FE9
0E70A:  MOVFF  03,FEA
0E70E:  BTFSC  FEF.0
0E710:  BRA    E718
0E712:  MOVLB  0
0E714:  GOTO   E762
0E718:  MOVLB  0
....................     {
....................         write_src = smf_data_ptr->misf_start_addr;
0E71A:  MOVLW  04
0E71C:  MOVLB  2
0E71E:  ADDWF  x3D,W
0E720:  MOVWF  FE9
0E722:  MOVLW  00
0E724:  ADDWFC x3E,W
0E726:  MOVWF  FEA
0E728:  MOVFF  FEF,27F
0E72C:  MOVFF  FEC,280
0E730:  MOVFF  FEC,281
0E734:  MOVFF  FEC,282
0E738:  MOVF   FED,F
0E73A:  MOVF   FED,F
0E73C:  MOVF   FED,F
....................         write_size = smf_data_ptr->misf_size;
0E73E:  MOVLW  08
0E740:  ADDWF  x3D,W
0E742:  MOVWF  FE9
0E744:  MOVLW  00
0E746:  ADDWFC x3E,W
0E748:  MOVWF  FEA
0E74A:  MOVFF  FEF,283
0E74E:  MOVFF  FEC,284
0E752:  MOVFF  FEC,285
0E756:  MOVFF  FEC,286
0E75A:  MOVF   FED,F
0E75C:  MOVF   FED,F
0E75E:  MOVF   FED,F
0E760:  MOVLB  0
....................     }
.................... 
....................     unsigned int32 smf_address_start = SMF_ADDRESS_TABLE[smf_data_ptr->mission_id].start;
....................     unsigned int32 smf_address_end   = SMF_ADDRESS_TABLE[smf_data_ptr->mission_id].end;
....................     unsigned int32 misf_address_start = MISF_ADDRESS_TABLE[smf_data_ptr->mission_id].start;
....................     unsigned int32 misf_address_end   = MISF_ADDRESS_TABLE[smf_data_ptr->mission_id].end;
0E762:  MOVLB  2
0E764:  MOVF   x3D,W
0E766:  MOVWF  FE9
0E768:  MOVF   x3E,W
0E76A:  MOVWF  FEA
0E76C:  MOVF   FEF,W
0E76E:  MULLW  0C
0E770:  MOVF   FF3,W
0E772:  CLRF   xE0
0E774:  MOVWF  xDF
0E776:  MOVFF  2E0,03
0E77A:  MOVF   xDF,W
0E77C:  MOVLB  0
0E77E:  CALL   00CA
0E782:  MOVWF  00
0E784:  TBLRD*+
0E786:  MOVFF  FF5,01
0E78A:  TBLRD*+
0E78C:  MOVFF  FF5,02
0E790:  TBLRD*+
0E792:  MOVFF  FF5,03
0E796:  MOVFF  03,28A
0E79A:  MOVFF  02,289
0E79E:  MOVFF  01,288
0E7A2:  MOVFF  00,287
0E7A6:  MOVLB  2
0E7A8:  MOVF   x3D,W
0E7AA:  MOVWF  FE9
0E7AC:  MOVF   x3E,W
0E7AE:  MOVWF  FEA
0E7B0:  MOVF   FEF,W
0E7B2:  MULLW  0C
0E7B4:  MOVF   FF3,W
0E7B6:  CLRF   xE2
0E7B8:  MOVWF  xE1
0E7BA:  MOVLW  04
0E7BC:  ADDWF  xE1,W
0E7BE:  MOVWF  01
0E7C0:  MOVLW  00
0E7C2:  ADDWFC xE2,W
0E7C4:  MOVWF  03
0E7C6:  MOVF   01,W
0E7C8:  MOVLB  0
0E7CA:  CALL   00CA
0E7CE:  MOVWF  00
0E7D0:  TBLRD*+
0E7D2:  MOVFF  FF5,01
0E7D6:  TBLRD*+
0E7D8:  MOVFF  FF5,02
0E7DC:  TBLRD*+
0E7DE:  MOVFF  FF5,03
0E7E2:  MOVFF  03,28E
0E7E6:  MOVFF  02,28D
0E7EA:  MOVFF  01,28C
0E7EE:  MOVFF  00,28B
0E7F2:  MOVLB  2
0E7F4:  MOVF   x3D,W
0E7F6:  MOVWF  FE9
0E7F8:  MOVF   x3E,W
0E7FA:  MOVWF  FEA
0E7FC:  MOVF   FEF,W
0E7FE:  MULLW  0C
0E800:  MOVF   FF3,W
0E802:  CLRF   xE2
0E804:  MOVWF  xE1
0E806:  MOVFF  2E2,03
0E80A:  MOVF   xE1,W
0E80C:  MOVLB  0
0E80E:  CALL   0132
0E812:  MOVWF  00
0E814:  TBLRD*+
0E816:  MOVFF  FF5,01
0E81A:  TBLRD*+
0E81C:  MOVFF  FF5,02
0E820:  TBLRD*+
0E822:  MOVFF  FF5,03
0E826:  MOVFF  03,292
0E82A:  MOVFF  02,291
0E82E:  MOVFF  01,290
0E832:  MOVFF  00,28F
0E836:  MOVLB  2
0E838:  MOVF   x3D,W
0E83A:  MOVWF  FE9
0E83C:  MOVF   x3E,W
0E83E:  MOVWF  FEA
0E840:  MOVF   FEF,W
0E842:  MULLW  0C
0E844:  MOVF   FF3,W
0E846:  CLRF   xE4
0E848:  MOVWF  xE3
0E84A:  MOVLW  04
0E84C:  ADDWF  xE3,W
0E84E:  MOVWF  01
0E850:  MOVLW  00
0E852:  ADDWFC xE4,W
0E854:  MOVWF  03
0E856:  MOVF   01,W
0E858:  MOVLB  0
0E85A:  CALL   0132
0E85E:  MOVWF  00
0E860:  TBLRD*+
0E862:  MOVFF  FF5,01
0E866:  TBLRD*+
0E868:  MOVFF  FF5,02
0E86C:  TBLRD*+
0E86E:  MOVFF  FF5,03
0E872:  MOVFF  03,296
0E876:  MOVFF  02,295
0E87A:  MOVFF  01,294
0E87E:  MOVFF  00,293
.................... 
.................... 
.................... 
....................     // Print SMF ADDRESS
....................     fprintf(PC,"[SMF ADDRESS]\r\n");
0E882:  MOVLW  9A
0E884:  MOVWF  FF6
0E886:  MOVLW  07
0E888:  MOVWF  FF7
0E88A:  MOVLW  00
0E88C:  MOVWF  FF8
0E88E:  CALL   1DC0
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
0E892:  MOVLW  AA
0E894:  MOVWF  FF6
0E896:  MOVLW  07
0E898:  MOVWF  FF7
0E89A:  MOVLW  00
0E89C:  MOVWF  FF8
0E89E:  CALL   1DC0
....................     fprintf(PC, "\tSTART\t0x%08LX\r\n", smf_address_start);
0E8A2:  MOVLW  D6
0E8A4:  MOVWF  FF6
0E8A6:  MOVLW  07
0E8A8:  MOVWF  FF7
0E8AA:  MOVLW  00
0E8AC:  MOVWF  FF8
0E8AE:  MOVLW  09
0E8B0:  MOVLB  A
0E8B2:  MOVWF  x67
0E8B4:  MOVLB  0
0E8B6:  CALL   1DF6
0E8BA:  MOVFF  28A,AC8
0E8BE:  MOVLW  37
0E8C0:  MOVLB  A
0E8C2:  MOVWF  xC9
0E8C4:  MOVLB  0
0E8C6:  CALL   200A
0E8CA:  MOVFF  289,AC8
0E8CE:  MOVLW  37
0E8D0:  MOVLB  A
0E8D2:  MOVWF  xC9
0E8D4:  MOVLB  0
0E8D6:  CALL   200A
0E8DA:  MOVFF  288,AC8
0E8DE:  MOVLW  37
0E8E0:  MOVLB  A
0E8E2:  MOVWF  xC9
0E8E4:  MOVLB  0
0E8E6:  CALL   200A
0E8EA:  MOVFF  287,AC8
0E8EE:  MOVLW  37
0E8F0:  MOVLB  A
0E8F2:  MOVWF  xC9
0E8F4:  MOVLB  0
0E8F6:  CALL   200A
0E8FA:  MOVLW  0D
0E8FC:  BTFSS  FA6.6
0E8FE:  GOTO   E8FC
0E902:  MOVLB  E
0E904:  MOVWF  xF9
0E906:  MOVLW  0A
0E908:  MOVLB  0
0E90A:  BTFSS  FA6.6
0E90C:  GOTO   E90A
0E910:  MOVLB  E
0E912:  MOVWF  xF9
....................     fprintf(PC, "\tEND\t0x%08LX\r\n", smf_address_end);
0E914:  MOVLW  E8
0E916:  MOVWF  FF6
0E918:  MOVLW  07
0E91A:  MOVWF  FF7
0E91C:  MOVLW  00
0E91E:  MOVWF  FF8
0E920:  MOVLW  07
0E922:  MOVLB  A
0E924:  MOVWF  x67
0E926:  MOVLB  0
0E928:  CALL   1DF6
0E92C:  MOVFF  28E,AC8
0E930:  MOVLW  37
0E932:  MOVLB  A
0E934:  MOVWF  xC9
0E936:  MOVLB  0
0E938:  CALL   200A
0E93C:  MOVFF  28D,AC8
0E940:  MOVLW  37
0E942:  MOVLB  A
0E944:  MOVWF  xC9
0E946:  MOVLB  0
0E948:  CALL   200A
0E94C:  MOVFF  28C,AC8
0E950:  MOVLW  37
0E952:  MOVLB  A
0E954:  MOVWF  xC9
0E956:  MOVLB  0
0E958:  CALL   200A
0E95C:  MOVFF  28B,AC8
0E960:  MOVLW  37
0E962:  MOVLB  A
0E964:  MOVWF  xC9
0E966:  MOVLB  0
0E968:  CALL   200A
0E96C:  MOVLW  0D
0E96E:  BTFSS  FA6.6
0E970:  GOTO   E96E
0E974:  MOVLB  E
0E976:  MOVWF  xF9
0E978:  MOVLW  0A
0E97A:  MOVLB  0
0E97C:  BTFSS  FA6.6
0E97E:  GOTO   E97C
0E982:  MOVLB  E
0E984:  MOVWF  xF9
....................     fprintf(PC, "\tUSED\t0x%08LX\r\n", smf_data_table.fields.headers[smf_data_ptr->mission_id].used_size);
0E986:  MOVLB  2
0E988:  MOVF   x3D,W
0E98A:  MOVWF  FE9
0E98C:  MOVF   x3E,W
0E98E:  MOVWF  FEA
0E990:  MOVF   FEF,W
0E992:  MULLW  08
0E994:  MOVF   FF3,W
0E996:  CLRF   xE0
0E998:  MOVWF  xDF
0E99A:  MOVLW  3F
0E99C:  ADDWF  xDF,W
0E99E:  MOVWF  FE9
0E9A0:  MOVLW  02
0E9A2:  ADDWFC xE0,W
0E9A4:  MOVWF  FEA
0E9A6:  MOVFF  FEF,2E1
0E9AA:  MOVFF  FEC,2E2
0E9AE:  MOVFF  FEC,2E3
0E9B2:  MOVFF  FEC,2E4
0E9B6:  MOVF   FED,F
0E9B8:  MOVF   FED,F
0E9BA:  MOVF   FED,F
0E9BC:  MOVLW  F8
0E9BE:  MOVWF  FF6
0E9C0:  MOVLW  07
0E9C2:  MOVWF  FF7
0E9C4:  MOVLW  00
0E9C6:  MOVWF  FF8
0E9C8:  MOVLW  08
0E9CA:  MOVLB  A
0E9CC:  MOVWF  x67
0E9CE:  MOVLB  0
0E9D0:  CALL   1DF6
0E9D4:  MOVFF  2E4,AC8
0E9D8:  MOVLW  37
0E9DA:  MOVLB  A
0E9DC:  MOVWF  xC9
0E9DE:  MOVLB  0
0E9E0:  CALL   200A
0E9E4:  MOVFF  2E3,AC8
0E9E8:  MOVLW  37
0E9EA:  MOVLB  A
0E9EC:  MOVWF  xC9
0E9EE:  MOVLB  0
0E9F0:  CALL   200A
0E9F4:  MOVFF  2E2,AC8
0E9F8:  MOVLW  37
0E9FA:  MOVLB  A
0E9FC:  MOVWF  xC9
0E9FE:  MOVLB  0
0EA00:  CALL   200A
0EA04:  MOVFF  2E1,AC8
0EA08:  MOVLW  37
0EA0A:  MOVLB  A
0EA0C:  MOVWF  xC9
0EA0E:  MOVLB  0
0EA10:  CALL   200A
0EA14:  MOVLW  0D
0EA16:  BTFSS  FA6.6
0EA18:  GOTO   EA16
0EA1C:  MOVLB  E
0EA1E:  MOVWF  xF9
0EA20:  MOVLW  0A
0EA22:  MOVLB  0
0EA24:  BTFSS  FA6.6
0EA26:  GOTO   EA24
0EA2A:  MOVLB  E
0EA2C:  MOVWF  xF9
....................     fprintf(PC, "\tNEXT\t0x%08LX\r\n", smf_address_start + smf_data_table.fields.headers[smf_data_ptr->mission_id].used_size);
0EA2E:  MOVLB  2
0EA30:  MOVF   x3D,W
0EA32:  MOVWF  FE9
0EA34:  MOVF   x3E,W
0EA36:  MOVWF  FEA
0EA38:  MOVF   FEF,W
0EA3A:  MULLW  08
0EA3C:  MOVF   FF3,W
0EA3E:  CLRF   xE0
0EA40:  MOVWF  xDF
0EA42:  MOVLW  3F
0EA44:  ADDWF  xDF,W
0EA46:  MOVWF  FE9
0EA48:  MOVLW  02
0EA4A:  ADDWFC xE0,W
0EA4C:  MOVWF  FEA
0EA4E:  MOVFF  FEF,00
0EA52:  MOVFF  FEC,01
0EA56:  MOVFF  FEC,02
0EA5A:  MOVFF  FEC,03
0EA5E:  MOVF   FED,F
0EA60:  MOVF   FED,F
0EA62:  MOVF   FED,F
0EA64:  MOVF   00,W
0EA66:  ADDWF  x87,W
0EA68:  MOVWF  xE1
0EA6A:  MOVF   01,W
0EA6C:  ADDWFC x88,W
0EA6E:  MOVWF  xE2
0EA70:  MOVF   02,W
0EA72:  ADDWFC x89,W
0EA74:  MOVWF  xE3
0EA76:  MOVF   03,W
0EA78:  ADDWFC x8A,W
0EA7A:  MOVWF  xE4
0EA7C:  MOVLW  08
0EA7E:  MOVWF  FF6
0EA80:  MOVLW  08
0EA82:  MOVWF  FF7
0EA84:  MOVLW  00
0EA86:  MOVWF  FF8
0EA88:  MOVLW  08
0EA8A:  MOVLB  A
0EA8C:  MOVWF  x67
0EA8E:  MOVLB  0
0EA90:  CALL   1DF6
0EA94:  MOVFF  2E4,AC8
0EA98:  MOVLW  37
0EA9A:  MOVLB  A
0EA9C:  MOVWF  xC9
0EA9E:  MOVLB  0
0EAA0:  CALL   200A
0EAA4:  MOVFF  2E3,AC8
0EAA8:  MOVLW  37
0EAAA:  MOVLB  A
0EAAC:  MOVWF  xC9
0EAAE:  MOVLB  0
0EAB0:  CALL   200A
0EAB4:  MOVFF  2E2,AC8
0EAB8:  MOVLW  37
0EABA:  MOVLB  A
0EABC:  MOVWF  xC9
0EABE:  MOVLB  0
0EAC0:  CALL   200A
0EAC4:  MOVFF  2E1,AC8
0EAC8:  MOVLW  37
0EACA:  MOVLB  A
0EACC:  MOVWF  xC9
0EACE:  MOVLB  0
0EAD0:  CALL   200A
0EAD4:  MOVLW  0D
0EAD6:  BTFSS  FA6.6
0EAD8:  GOTO   EAD6
0EADC:  MOVLB  E
0EADE:  MOVWF  xF9
0EAE0:  MOVLW  0A
0EAE2:  MOVLB  0
0EAE4:  BTFSS  FA6.6
0EAE6:  GOTO   EAE4
0EAEA:  MOVLB  E
0EAEC:  MOVWF  xF9
.................... 
....................     // Print MISF ADDRESS
....................     fprintf(PC,"[MISF ADDRESS]\r\n");
0EAEE:  MOVLW  18
0EAF0:  MOVWF  FF6
0EAF2:  MOVLW  08
0EAF4:  MOVWF  FF7
0EAF6:  MOVLW  00
0EAF8:  MOVWF  FF8
0EAFA:  MOVLB  0
0EAFC:  CALL   1DC0
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
0EB00:  MOVLW  2A
0EB02:  MOVWF  FF6
0EB04:  MOVLW  08
0EB06:  MOVWF  FF7
0EB08:  MOVLW  00
0EB0A:  MOVWF  FF8
0EB0C:  CALL   1DC0
....................     fprintf(PC, "\tSTART\t0x%08LX\r\n", misf_address_start);
0EB10:  MOVLW  56
0EB12:  MOVWF  FF6
0EB14:  MOVLW  08
0EB16:  MOVWF  FF7
0EB18:  MOVLW  00
0EB1A:  MOVWF  FF8
0EB1C:  MOVLW  09
0EB1E:  MOVLB  A
0EB20:  MOVWF  x67
0EB22:  MOVLB  0
0EB24:  CALL   1DF6
0EB28:  MOVFF  292,AC8
0EB2C:  MOVLW  37
0EB2E:  MOVLB  A
0EB30:  MOVWF  xC9
0EB32:  MOVLB  0
0EB34:  CALL   200A
0EB38:  MOVFF  291,AC8
0EB3C:  MOVLW  37
0EB3E:  MOVLB  A
0EB40:  MOVWF  xC9
0EB42:  MOVLB  0
0EB44:  CALL   200A
0EB48:  MOVFF  290,AC8
0EB4C:  MOVLW  37
0EB4E:  MOVLB  A
0EB50:  MOVWF  xC9
0EB52:  MOVLB  0
0EB54:  CALL   200A
0EB58:  MOVFF  28F,AC8
0EB5C:  MOVLW  37
0EB5E:  MOVLB  A
0EB60:  MOVWF  xC9
0EB62:  MOVLB  0
0EB64:  CALL   200A
0EB68:  MOVLW  0D
0EB6A:  BTFSS  FA6.6
0EB6C:  GOTO   EB6A
0EB70:  MOVLB  E
0EB72:  MOVWF  xF9
0EB74:  MOVLW  0A
0EB76:  MOVLB  0
0EB78:  BTFSS  FA6.6
0EB7A:  GOTO   EB78
0EB7E:  MOVLB  E
0EB80:  MOVWF  xF9
....................     fprintf(PC, "\tEND\t0x%08LX\r\n", misf_address_end);
0EB82:  MOVLW  68
0EB84:  MOVWF  FF6
0EB86:  MOVLW  08
0EB88:  MOVWF  FF7
0EB8A:  MOVLW  00
0EB8C:  MOVWF  FF8
0EB8E:  MOVLW  07
0EB90:  MOVLB  A
0EB92:  MOVWF  x67
0EB94:  MOVLB  0
0EB96:  CALL   1DF6
0EB9A:  MOVFF  296,AC8
0EB9E:  MOVLW  37
0EBA0:  MOVLB  A
0EBA2:  MOVWF  xC9
0EBA4:  MOVLB  0
0EBA6:  CALL   200A
0EBAA:  MOVFF  295,AC8
0EBAE:  MOVLW  37
0EBB0:  MOVLB  A
0EBB2:  MOVWF  xC9
0EBB4:  MOVLB  0
0EBB6:  CALL   200A
0EBBA:  MOVFF  294,AC8
0EBBE:  MOVLW  37
0EBC0:  MOVLB  A
0EBC2:  MOVWF  xC9
0EBC4:  MOVLB  0
0EBC6:  CALL   200A
0EBCA:  MOVFF  293,AC8
0EBCE:  MOVLW  37
0EBD0:  MOVLB  A
0EBD2:  MOVWF  xC9
0EBD4:  MOVLB  0
0EBD6:  CALL   200A
0EBDA:  MOVLW  0D
0EBDC:  BTFSS  FA6.6
0EBDE:  GOTO   EBDC
0EBE2:  MOVLB  E
0EBE4:  MOVWF  xF9
0EBE6:  MOVLW  0A
0EBE8:  MOVLB  0
0EBEA:  BTFSS  FA6.6
0EBEC:  GOTO   EBEA
0EBF0:  MOVLB  E
0EBF2:  MOVWF  xF9
....................     fprintf(PC, "\tSRC\t0x%08LX\r\n", write_src);
0EBF4:  MOVLW  78
0EBF6:  MOVWF  FF6
0EBF8:  MOVLW  08
0EBFA:  MOVWF  FF7
0EBFC:  MOVLW  00
0EBFE:  MOVWF  FF8
0EC00:  MOVLW  07
0EC02:  MOVLB  A
0EC04:  MOVWF  x67
0EC06:  MOVLB  0
0EC08:  CALL   1DF6
0EC0C:  MOVFF  282,AC8
0EC10:  MOVLW  37
0EC12:  MOVLB  A
0EC14:  MOVWF  xC9
0EC16:  MOVLB  0
0EC18:  CALL   200A
0EC1C:  MOVFF  281,AC8
0EC20:  MOVLW  37
0EC22:  MOVLB  A
0EC24:  MOVWF  xC9
0EC26:  MOVLB  0
0EC28:  CALL   200A
0EC2C:  MOVFF  280,AC8
0EC30:  MOVLW  37
0EC32:  MOVLB  A
0EC34:  MOVWF  xC9
0EC36:  MOVLB  0
0EC38:  CALL   200A
0EC3C:  MOVFF  27F,AC8
0EC40:  MOVLW  37
0EC42:  MOVLB  A
0EC44:  MOVWF  xC9
0EC46:  MOVLB  0
0EC48:  CALL   200A
0EC4C:  MOVLW  0D
0EC4E:  BTFSS  FA6.6
0EC50:  GOTO   EC4E
0EC54:  MOVLB  E
0EC56:  MOVWF  xF9
0EC58:  MOVLW  0A
0EC5A:  MOVLB  0
0EC5C:  BTFSS  FA6.6
0EC5E:  GOTO   EC5C
0EC62:  MOVLB  E
0EC64:  MOVWF  xF9
....................     fprintf(PC, "\tSIZE\t0x%08LX\r\n", write_size);
0EC66:  MOVLW  88
0EC68:  MOVWF  FF6
0EC6A:  MOVLW  08
0EC6C:  MOVWF  FF7
0EC6E:  MOVLW  00
0EC70:  MOVWF  FF8
0EC72:  MOVLW  08
0EC74:  MOVLB  A
0EC76:  MOVWF  x67
0EC78:  MOVLB  0
0EC7A:  CALL   1DF6
0EC7E:  MOVFF  286,AC8
0EC82:  MOVLW  37
0EC84:  MOVLB  A
0EC86:  MOVWF  xC9
0EC88:  MOVLB  0
0EC8A:  CALL   200A
0EC8E:  MOVFF  285,AC8
0EC92:  MOVLW  37
0EC94:  MOVLB  A
0EC96:  MOVWF  xC9
0EC98:  MOVLB  0
0EC9A:  CALL   200A
0EC9E:  MOVFF  284,AC8
0ECA2:  MOVLW  37
0ECA4:  MOVLB  A
0ECA6:  MOVWF  xC9
0ECA8:  MOVLB  0
0ECAA:  CALL   200A
0ECAE:  MOVFF  283,AC8
0ECB2:  MOVLW  37
0ECB4:  MOVLB  A
0ECB6:  MOVWF  xC9
0ECB8:  MOVLB  0
0ECBA:  CALL   200A
0ECBE:  MOVLW  0D
0ECC0:  BTFSS  FA6.6
0ECC2:  GOTO   ECC0
0ECC6:  MOVLB  E
0ECC8:  MOVWF  xF9
0ECCA:  MOVLW  0A
0ECCC:  MOVLB  0
0ECCE:  BTFSS  FA6.6
0ECD0:  GOTO   ECCE
0ECD4:  MOVLB  E
0ECD6:  MOVWF  xF9
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
0ECD8:  MOVLW  98
0ECDA:  MOVWF  FF6
0ECDC:  MOVLW  08
0ECDE:  MOVWF  FF7
0ECE0:  MOVLW  00
0ECE2:  MOVWF  FF8
0ECE4:  MOVLB  0
0ECE6:  CALL   1DC0
.................... 
.................... 
....................     unsigned int8 buffer[PACKET_SIZE] = {0};
0ECEA:  MOVLB  2
0ECEC:  CLRF   x97
0ECEE:  CLRF   x98
0ECF0:  CLRF   x99
0ECF2:  CLRF   x9A
0ECF4:  CLRF   x9B
0ECF6:  CLRF   x9C
0ECF8:  CLRF   x9D
0ECFA:  CLRF   x9E
0ECFC:  CLRF   x9F
0ECFE:  CLRF   xA0
0ED00:  CLRF   xA1
0ED02:  CLRF   xA2
0ED04:  CLRF   xA3
0ED06:  CLRF   xA4
0ED08:  CLRF   xA5
0ED0A:  CLRF   xA6
0ED0C:  CLRF   xA7
0ED0E:  CLRF   xA8
0ED10:  CLRF   xA9
0ED12:  CLRF   xAA
0ED14:  CLRF   xAB
0ED16:  CLRF   xAC
0ED18:  CLRF   xAD
0ED1A:  CLRF   xAE
0ED1C:  CLRF   xAF
0ED1E:  CLRF   xB0
0ED20:  CLRF   xB1
0ED22:  CLRF   xB2
0ED24:  CLRF   xB3
0ED26:  CLRF   xB4
0ED28:  CLRF   xB5
0ED2A:  CLRF   xB6
0ED2C:  CLRF   xB7
0ED2E:  CLRF   xB8
0ED30:  CLRF   xB9
0ED32:  CLRF   xBA
0ED34:  CLRF   xBB
0ED36:  CLRF   xBC
0ED38:  CLRF   xBD
0ED3A:  CLRF   xBE
0ED3C:  CLRF   xBF
0ED3E:  CLRF   xC0
0ED40:  CLRF   xC1
0ED42:  CLRF   xC2
0ED44:  CLRF   xC3
0ED46:  CLRF   xC4
0ED48:  CLRF   xC5
0ED4A:  CLRF   xC6
0ED4C:  CLRF   xC7
0ED4E:  CLRF   xC8
0ED50:  CLRF   xC9
0ED52:  CLRF   xCA
0ED54:  CLRF   xCB
0ED56:  CLRF   xCC
0ED58:  CLRF   xCD
0ED5A:  CLRF   xCE
0ED5C:  CLRF   xCF
0ED5E:  CLRF   xD0
0ED60:  CLRF   xD1
0ED62:  CLRF   xD2
0ED64:  CLRF   xD3
0ED66:  CLRF   xD4
0ED68:  CLRF   xD5
0ED6A:  CLRF   xD6
0ED6C:  MOVLB  0
....................     unsigned int32 smf_write_address;
....................     unsigned int32 misf_read_address;
.................... 
....................     while (write_size > 0)
0ED6E:  MOVLB  2
0ED70:  MOVF   x83,F
0ED72:  BTFSC  FD8.2
0ED74:  BRA    ED7C
0ED76:  MOVLB  0
0ED78:  GOTO   EDAE
0ED7C:  MOVLB  0
0ED7E:  MOVLB  2
0ED80:  MOVF   x84,F
0ED82:  BTFSC  FD8.2
0ED84:  BRA    ED8C
0ED86:  MOVLB  0
0ED88:  GOTO   EDAE
0ED8C:  MOVLB  0
0ED8E:  MOVLB  2
0ED90:  MOVF   x85,F
0ED92:  BTFSC  FD8.2
0ED94:  BRA    ED9C
0ED96:  MOVLB  0
0ED98:  GOTO   EDAE
0ED9C:  MOVLB  0
0ED9E:  MOVLB  2
0EDA0:  MOVF   x86,F
0EDA2:  BTFSS  FD8.2
0EDA4:  BRA    EDAC
0EDA6:  MOVLB  0
0EDA8:  GOTO   EFB0
0EDAC:  MOVLB  0
....................     {
....................         fprintf(PC, "Remaining size to write: %lu bytes\r\n", write_size);
0EDAE:  MOVLW  C4
0EDB0:  MOVWF  FF6
0EDB2:  MOVLW  08
0EDB4:  MOVWF  FF7
0EDB6:  MOVLW  00
0EDB8:  MOVWF  FF8
0EDBA:  MOVLW  19
0EDBC:  MOVLB  A
0EDBE:  MOVWF  x67
0EDC0:  MOVLB  0
0EDC2:  CALL   1DF6
0EDC6:  MOVLW  41
0EDC8:  MOVWF  FE9
0EDCA:  MOVFF  286,2E2
0EDCE:  MOVFF  285,2E1
0EDD2:  MOVFF  284,2E0
0EDD6:  MOVFF  283,2DF
0EDDA:  CALL   5CBE
0EDDE:  MOVLW  E0
0EDE0:  MOVWF  FF6
0EDE2:  MOVLW  08
0EDE4:  MOVWF  FF7
0EDE6:  MOVLW  00
0EDE8:  MOVWF  FF8
0EDEA:  MOVLW  08
0EDEC:  MOVLB  A
0EDEE:  MOVWF  x67
0EDF0:  MOVLB  0
0EDF2:  CALL   1DF6
....................         memset(buffer, 0, PACKET_SIZE);
0EDF6:  MOVLW  02
0EDF8:  MOVWF  FEA
0EDFA:  MOVLW  97
0EDFC:  MOVWF  FE9
0EDFE:  CLRF   00
0EE00:  CLRF   02
0EE02:  MOVLW  40
0EE04:  MOVWF  01
0EE06:  CALL   29EA
....................         smf_write_address = smf_address_start + smf_data_table.fields.headers[smf_data_ptr->mission_id].used_size;
0EE0A:  MOVLB  2
0EE0C:  MOVF   x3D,W
0EE0E:  MOVWF  FE9
0EE10:  MOVF   x3E,W
0EE12:  MOVWF  FEA
0EE14:  MOVF   FEF,W
0EE16:  MULLW  08
0EE18:  MOVF   FF3,W
0EE1A:  CLRF   xE0
0EE1C:  MOVWF  xDF
0EE1E:  MOVLW  3F
0EE20:  ADDWF  xDF,W
0EE22:  MOVWF  FE9
0EE24:  MOVLW  02
0EE26:  ADDWFC xE0,W
0EE28:  MOVWF  FEA
0EE2A:  MOVFF  FEF,00
0EE2E:  MOVFF  FEC,01
0EE32:  MOVFF  FEC,02
0EE36:  MOVFF  FEC,03
0EE3A:  MOVF   FED,F
0EE3C:  MOVF   FED,F
0EE3E:  MOVF   FED,F
0EE40:  MOVF   00,W
0EE42:  ADDWF  x87,W
0EE44:  MOVWF  xD7
0EE46:  MOVF   01,W
0EE48:  ADDWFC x88,W
0EE4A:  MOVWF  xD8
0EE4C:  MOVF   02,W
0EE4E:  ADDWFC x89,W
0EE50:  MOVWF  xD9
0EE52:  MOVF   03,W
0EE54:  ADDWFC x8A,W
0EE56:  MOVWF  xDA
....................         misf_read_address = write_src;
0EE58:  MOVFF  282,2DE
0EE5C:  MOVFF  281,2DD
0EE60:  MOVFF  280,2DC
0EE64:  MOVFF  27F,2DB
.................... 
....................         read_data_bytes(mis_fm, misf_read_address, buffer, PACKET_SIZE);
0EE68:  MOVFF  115,B5B
0EE6C:  MOVFF  114,B5A
0EE70:  MOVFF  113,B59
0EE74:  MOVFF  112,B58
0EE78:  MOVFF  2DE,B5F
0EE7C:  MOVFF  2DD,B5E
0EE80:  MOVFF  2DC,B5D
0EE84:  MOVFF  2DB,B5C
0EE88:  MOVLW  02
0EE8A:  MOVLB  B
0EE8C:  MOVWF  x61
0EE8E:  MOVLW  97
0EE90:  MOVWF  x60
0EE92:  CLRF   x65
0EE94:  CLRF   x64
0EE96:  CLRF   x63
0EE98:  MOVLW  40
0EE9A:  MOVWF  x62
0EE9C:  MOVLB  0
0EE9E:  CALL   2A0E
....................         write_data_bytes(smf, smf_write_address, buffer, PACKET_SIZE);
0EEA2:  MOVFF  119,B9F
0EEA6:  MOVFF  118,B9E
0EEAA:  MOVFF  117,B9D
0EEAE:  MOVFF  116,B9C
0EEB2:  MOVFF  2DA,BA3
0EEB6:  MOVFF  2D9,BA2
0EEBA:  MOVFF  2D8,BA1
0EEBE:  MOVFF  2D7,BA0
0EEC2:  MOVLW  02
0EEC4:  MOVLB  B
0EEC6:  MOVWF  xA5
0EEC8:  MOVLW  97
0EECA:  MOVWF  xA4
0EECC:  CLRF   xA7
0EECE:  MOVLW  40
0EED0:  MOVWF  xA6
0EED2:  MOVLB  0
0EED4:  CALL   39FE
....................         smf_data_table.fields.headers[smf_data_ptr->mission_id].used_size += PACKET_SIZE;
0EED8:  MOVLB  2
0EEDA:  MOVF   x3D,W
0EEDC:  MOVWF  FE9
0EEDE:  MOVF   x3E,W
0EEE0:  MOVWF  FEA
0EEE2:  MOVF   FEF,W
0EEE4:  MULLW  08
0EEE6:  MOVF   FF3,W
0EEE8:  CLRF   xE0
0EEEA:  MOVWF  xDF
0EEEC:  MOVLW  3F
0EEEE:  ADDWF  xDF,W
0EEF0:  MOVWF  FE9
0EEF2:  MOVLW  02
0EEF4:  ADDWFC xE0,W
0EEF6:  MOVWF  FEA
0EEF8:  MOVLW  40
0EEFA:  ADDWF  FEF,W
0EEFC:  MOVWF  00
0EEFE:  MOVLW  00
0EF00:  ADDWFC FEC,W
0EF02:  MOVWF  01
0EF04:  MOVLW  00
0EF06:  ADDWFC FEC,W
0EF08:  MOVWF  02
0EF0A:  MOVLW  00
0EF0C:  ADDWFC FEC,W
0EF0E:  MOVWF  03
0EF10:  MOVF   FED,F
0EF12:  MOVF   FED,F
0EF14:  MOVF   FED,F
0EF16:  MOVFF  00,FEF
0EF1A:  MOVFF  01,FEC
0EF1E:  MOVFF  02,FEC
0EF22:  MOVFF  03,FEC
0EF26:  MOVF   FED,F
0EF28:  MOVF   FED,F
0EF2A:  MOVF   FED,F
....................         flash_counter_table[smf_data_ptr->mission_id].uncopied_counter -= PACKET_SIZE;
0EF2C:  MOVF   x3D,W
0EF2E:  MOVWF  FE9
0EF30:  MOVF   x3E,W
0EF32:  MOVWF  FEA
0EF34:  MOVF   FEF,W
0EF36:  MULLW  0A
0EF38:  MOVF   FF3,W
0EF3A:  CLRF   xE0
0EF3C:  MOVWF  xDF
0EF3E:  MOVLW  04
0EF40:  ADDWF  xDF,W
0EF42:  MOVWF  01
0EF44:  MOVLW  00
0EF46:  ADDWFC xE0,W
0EF48:  MOVWF  03
0EF4A:  MOVF   01,W
0EF4C:  ADDLW  2E
0EF4E:  MOVWF  FE9
0EF50:  MOVLW  01
0EF52:  ADDWFC 03,W
0EF54:  MOVWF  FEA
0EF56:  MOVLW  40
0EF58:  SUBWF  FEF,W
0EF5A:  MOVWF  00
0EF5C:  MOVLW  00
0EF5E:  SUBWFB FEC,W
0EF60:  MOVWF  01
0EF62:  MOVLW  00
0EF64:  SUBWFB FEC,W
0EF66:  MOVWF  02
0EF68:  MOVLW  00
0EF6A:  SUBWFB FEC,W
0EF6C:  MOVWF  03
0EF6E:  MOVF   FED,F
0EF70:  MOVF   FED,F
0EF72:  MOVF   FED,F
0EF74:  MOVFF  00,FEF
0EF78:  MOVFF  01,FEC
0EF7C:  MOVFF  02,FEC
0EF80:  MOVFF  03,FEC
0EF84:  MOVF   FED,F
0EF86:  MOVF   FED,F
0EF88:  MOVF   FED,F
....................         
....................         write_src += PACKET_SIZE;
0EF8A:  MOVLW  40
0EF8C:  ADDWF  x7F,F
0EF8E:  MOVLW  00
0EF90:  ADDWFC x80,F
0EF92:  MOVLW  00
0EF94:  ADDWFC x81,F
0EF96:  MOVLW  00
0EF98:  ADDWFC x82,F
....................         write_size -= PACKET_SIZE;
0EF9A:  MOVLW  40
0EF9C:  SUBWF  x83,F
0EF9E:  MOVLW  00
0EFA0:  SUBWFB x84,F
0EFA2:  MOVLW  00
0EFA4:  SUBWFB x85,F
0EFA6:  MOVLW  00
0EFA8:  SUBWFB x86,F
0EFAA:  MOVLB  0
0EFAC:  GOTO   ED6E
....................     }
.................... 
.................... 
....................     // write size area
....................     smf_write_header(&smf_data_table);
0EFB0:  MOVLW  02
0EFB2:  MOVLB  2
0EFB4:  MOVWF  xE0
0EFB6:  MOVLW  3F
0EFB8:  MOVWF  xDF
0EFBA:  MOVLB  0
0EFBC:  GOTO   E396
....................     
....................     fprintf(PC, "\r\n_________End copy_data__________\r\n");
0EFC0:  MOVLW  EA
0EFC2:  MOVWF  FF6
0EFC4:  MOVLW  08
0EFC6:  MOVWF  FF7
0EFC8:  MOVLW  00
0EFCA:  MOVWF  FF8
0EFCC:  CALL   1DC0
....................     fprintf(PC, "n_______________________________\r\n\r\n");
0EFD0:  MOVLW  10
0EFD2:  MOVWF  FF6
0EFD4:  MOVLW  09
0EFD6:  MOVWF  FF7
0EFD8:  MOVLW  00
0EFDA:  MOVWF  FF8
0EFDC:  CALL   1DC0
0EFE0:  GOTO   101F2 (RETURN)
.................... }
.................... 
.................... void smf_read(FlashOperationStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
0F170:  MOVLW  36
0F172:  MOVWF  FF6
0F174:  MOVLW  09
0F176:  MOVWF  FF7
0F178:  MOVLW  00
0F17A:  MOVWF  FF8
0F17C:  CALL   1DC0
....................     fprintf(PC, "___Start SMF Read____\r\n");
0F180:  MOVLW  50
0F182:  MOVWF  FF6
0F184:  MOVLW  09
0F186:  MOVWF  FF7
0F188:  MOVLW  00
0F18A:  MOVWF  FF8
0F18C:  CALL   1DC0
.................... 
....................     int8 buffer[PACKET_SIZE];
.................... 
....................     SmfAddressStruct smf_address = get_smf_address_struct(smf_data->mission_id);
....................     unsigned int32 read_address = smf_data->misf_start_addr; // 呼び出し側でSMF内アドレスを設定する前提
....................     unsigned int32 read_size = smf_data->misf_size;
0F190:  MOVLB  2
0F192:  MOVF   x3D,W
0F194:  MOVWF  FE9
0F196:  MOVF   x3E,W
0F198:  MOVWF  FEA
0F19A:  MOVFF  FEF,29F
0F19E:  MOVFF  29F,2A6
0F1A2:  MOVLB  0
0F1A4:  CALL   EFE4
0F1A8:  MOVFF  02,03
0F1AC:  MOVF   01,W
0F1AE:  MOVWF  FE1
0F1B0:  MOVFF  03,FE2
0F1B4:  MOVLW  02
0F1B6:  MOVWF  FEA
0F1B8:  MOVLW  7F
0F1BA:  MOVWF  FE9
0F1BC:  MOVLW  08
0F1BE:  MOVWF  01
0F1C0:  MOVFF  FE6,FEE
0F1C4:  DECFSZ 01,F
0F1C6:  GOTO   F1C0
0F1CA:  MOVLW  04
0F1CC:  MOVLB  2
0F1CE:  ADDWF  x3D,W
0F1D0:  MOVWF  FE9
0F1D2:  MOVLW  00
0F1D4:  ADDWFC x3E,W
0F1D6:  MOVWF  FEA
0F1D8:  MOVFF  FEF,287
0F1DC:  MOVFF  FEC,288
0F1E0:  MOVFF  FEC,289
0F1E4:  MOVFF  FEC,28A
0F1E8:  MOVF   FED,F
0F1EA:  MOVF   FED,F
0F1EC:  MOVF   FED,F
0F1EE:  MOVLW  08
0F1F0:  ADDWF  x3D,W
0F1F2:  MOVWF  FE9
0F1F4:  MOVLW  00
0F1F6:  ADDWFC x3E,W
0F1F8:  MOVWF  FEA
0F1FA:  MOVFF  FEF,28B
0F1FE:  MOVFF  FEC,28C
0F202:  MOVFF  FEC,28D
0F206:  MOVFF  FEC,28E
0F20A:  MOVF   FED,F
0F20C:  MOVF   FED,F
0F20E:  MOVF   FED,F
.................... 
....................     // 境界チェック (start/end は [start_address, end_address) の半開区間想定)
....................     if (read_address < (unsigned int32)smf_address.start_address || read_address >= (unsigned int32)smf_address.end_address) {
0F210:  MOVF   x8A,W
0F212:  SUBWF  x82,W
0F214:  BTFSC  FD8.0
0F216:  BRA    F21E
0F218:  MOVLB  0
0F21A:  GOTO   F268
0F21E:  MOVLB  0
0F220:  BTFSS  FD8.2
0F222:  GOTO   F2C2
0F226:  MOVLB  2
0F228:  MOVF   x89,W
0F22A:  SUBWF  x81,W
0F22C:  BTFSC  FD8.0
0F22E:  BRA    F236
0F230:  MOVLB  0
0F232:  GOTO   F268
0F236:  MOVLB  0
0F238:  BTFSS  FD8.2
0F23A:  GOTO   F2C2
0F23E:  MOVLB  2
0F240:  MOVF   x88,W
0F242:  SUBWF  x80,W
0F244:  BTFSC  FD8.0
0F246:  BRA    F24E
0F248:  MOVLB  0
0F24A:  GOTO   F268
0F24E:  MOVLB  0
0F250:  BTFSS  FD8.2
0F252:  GOTO   F2C2
0F256:  MOVLB  2
0F258:  MOVF   x7F,W
0F25A:  SUBWF  x87,W
0F25C:  BTFSC  FD8.0
0F25E:  BRA    F266
0F260:  MOVLB  0
0F262:  GOTO   F2C2
0F266:  MOVLB  0
0F268:  MOVLB  2
0F26A:  MOVF   x86,W
0F26C:  SUBWF  x8A,W
0F26E:  BTFSC  FD8.0
0F270:  BRA    F278
0F272:  MOVLB  0
0F274:  GOTO   F3E6
0F278:  MOVLB  0
0F27A:  BTFSS  FD8.2
0F27C:  GOTO   F2C2
0F280:  MOVLB  2
0F282:  MOVF   x85,W
0F284:  SUBWF  x89,W
0F286:  BTFSC  FD8.0
0F288:  BRA    F290
0F28A:  MOVLB  0
0F28C:  GOTO   F3E6
0F290:  MOVLB  0
0F292:  BTFSS  FD8.2
0F294:  GOTO   F2C2
0F298:  MOVLB  2
0F29A:  MOVF   x84,W
0F29C:  SUBWF  x88,W
0F29E:  BTFSC  FD8.0
0F2A0:  BRA    F2A8
0F2A2:  MOVLB  0
0F2A4:  GOTO   F3E6
0F2A8:  MOVLB  0
0F2AA:  BTFSS  FD8.2
0F2AC:  GOTO   F2C2
0F2B0:  MOVLB  2
0F2B2:  MOVF   x83,W
0F2B4:  SUBWF  x87,W
0F2B6:  BTFSC  FD8.0
0F2B8:  BRA    F2C0
0F2BA:  MOVLB  0
0F2BC:  GOTO   F3E6
0F2C0:  MOVLB  0
....................         fprintf(PC, "Error: Read address 0x%08LX out of SMF mission range [0x%08LX - 0x%08LX)\r\n",
....................                 read_address, (unsigned int32)smf_address.start_address, (unsigned int32)smf_address.end_address);
0F2C2:  MOVLW  68
0F2C4:  MOVWF  FF6
0F2C6:  MOVLW  09
0F2C8:  MOVWF  FF7
0F2CA:  MOVLW  00
0F2CC:  MOVWF  FF8
0F2CE:  MOVLW  16
0F2D0:  MOVLB  A
0F2D2:  MOVWF  x67
0F2D4:  MOVLB  0
0F2D6:  CALL   1DF6
0F2DA:  MOVFF  28A,AC8
0F2DE:  MOVLW  37
0F2E0:  MOVLB  A
0F2E2:  MOVWF  xC9
0F2E4:  MOVLB  0
0F2E6:  CALL   200A
0F2EA:  MOVFF  289,AC8
0F2EE:  MOVLW  37
0F2F0:  MOVLB  A
0F2F2:  MOVWF  xC9
0F2F4:  MOVLB  0
0F2F6:  CALL   200A
0F2FA:  MOVFF  288,AC8
0F2FE:  MOVLW  37
0F300:  MOVLB  A
0F302:  MOVWF  xC9
0F304:  MOVLB  0
0F306:  CALL   200A
0F30A:  MOVFF  287,AC8
0F30E:  MOVLW  37
0F310:  MOVLB  A
0F312:  MOVWF  xC9
0F314:  MOVLB  0
0F316:  CALL   200A
0F31A:  MOVLW  83
0F31C:  MOVWF  FF6
0F31E:  MOVLW  09
0F320:  MOVWF  FF7
0F322:  MOVLW  00
0F324:  MOVWF  FF8
0F326:  MOVLW  1D
0F328:  MOVLB  A
0F32A:  MOVWF  x67
0F32C:  MOVLB  0
0F32E:  CALL   1DF6
0F332:  MOVFF  282,AC8
0F336:  MOVLW  37
0F338:  MOVLB  A
0F33A:  MOVWF  xC9
0F33C:  MOVLB  0
0F33E:  CALL   200A
0F342:  MOVFF  281,AC8
0F346:  MOVLW  37
0F348:  MOVLB  A
0F34A:  MOVWF  xC9
0F34C:  MOVLB  0
0F34E:  CALL   200A
0F352:  MOVFF  280,AC8
0F356:  MOVLW  37
0F358:  MOVLB  A
0F35A:  MOVWF  xC9
0F35C:  MOVLB  0
0F35E:  CALL   200A
0F362:  MOVFF  27F,AC8
0F366:  MOVLW  37
0F368:  MOVLB  A
0F36A:  MOVWF  xC9
0F36C:  MOVLB  0
0F36E:  CALL   200A
0F372:  MOVLW  A5
0F374:  MOVWF  FF6
0F376:  MOVLW  09
0F378:  MOVWF  FF7
0F37A:  MOVLW  00
0F37C:  MOVWF  FF8
0F37E:  MOVLW  05
0F380:  MOVLB  A
0F382:  MOVWF  x67
0F384:  MOVLB  0
0F386:  CALL   1DF6
0F38A:  MOVFF  286,AC8
0F38E:  MOVLW  37
0F390:  MOVLB  A
0F392:  MOVWF  xC9
0F394:  MOVLB  0
0F396:  CALL   200A
0F39A:  MOVFF  285,AC8
0F39E:  MOVLW  37
0F3A0:  MOVLB  A
0F3A2:  MOVWF  xC9
0F3A4:  MOVLB  0
0F3A6:  CALL   200A
0F3AA:  MOVFF  284,AC8
0F3AE:  MOVLW  37
0F3B0:  MOVLB  A
0F3B2:  MOVWF  xC9
0F3B4:  MOVLB  0
0F3B6:  CALL   200A
0F3BA:  MOVFF  283,AC8
0F3BE:  MOVLW  37
0F3C0:  MOVLB  A
0F3C2:  MOVWF  xC9
0F3C4:  MOVLB  0
0F3C6:  CALL   200A
0F3CA:  MOVLW  AF
0F3CC:  MOVWF  FF6
0F3CE:  MOVLW  09
0F3D0:  MOVWF  FF7
0F3D2:  MOVLW  00
0F3D4:  MOVWF  FF8
0F3D6:  MOVLW  03
0F3D8:  MOVLB  A
0F3DA:  MOVWF  x67
0F3DC:  MOVLB  0
0F3DE:  CALL   1DF6
....................         return;
0F3E2:  GOTO   F896
....................     }
....................     unsigned int32 mission_remaining = (unsigned int32)smf_address.end_address - read_address; // 読める残り
0F3E6:  MOVLB  2
0F3E8:  MOVF   x87,W
0F3EA:  SUBWF  x83,W
0F3EC:  MOVWF  x8F
0F3EE:  MOVF   x88,W
0F3F0:  SUBWFB x84,W
0F3F2:  MOVWF  x90
0F3F4:  MOVF   x89,W
0F3F6:  SUBWFB x85,W
0F3F8:  MOVWF  x91
0F3FA:  MOVF   x8A,W
0F3FC:  SUBWFB x86,W
0F3FE:  MOVWF  x92
....................     if (read_size > mission_remaining) {
0F400:  MOVF   x92,W
0F402:  SUBWF  x8E,W
0F404:  BTFSC  FD8.0
0F406:  BRA    F40E
0F408:  MOVLB  0
0F40A:  GOTO   F4E0
0F40E:  MOVLB  0
0F410:  BTFSS  FD8.2
0F412:  GOTO   F458
0F416:  MOVLB  2
0F418:  MOVF   x91,W
0F41A:  SUBWF  x8D,W
0F41C:  BTFSC  FD8.0
0F41E:  BRA    F426
0F420:  MOVLB  0
0F422:  GOTO   F4E0
0F426:  MOVLB  0
0F428:  BTFSS  FD8.2
0F42A:  GOTO   F458
0F42E:  MOVLB  2
0F430:  MOVF   x90,W
0F432:  SUBWF  x8C,W
0F434:  BTFSC  FD8.0
0F436:  BRA    F43E
0F438:  MOVLB  0
0F43A:  GOTO   F4E0
0F43E:  MOVLB  0
0F440:  BTFSS  FD8.2
0F442:  GOTO   F458
0F446:  MOVLB  2
0F448:  MOVF   x8B,W
0F44A:  SUBWF  x8F,W
0F44C:  BTFSS  FD8.0
0F44E:  BRA    F456
0F450:  MOVLB  0
0F452:  GOTO   F4E0
0F456:  MOVLB  0
....................         fprintf(PC, "Warn: Adjust read size from %lu to %lu (mission end)\r\n", read_size, mission_remaining);
0F458:  MOVLW  B4
0F45A:  MOVWF  FF6
0F45C:  MOVLW  09
0F45E:  MOVWF  FF7
0F460:  MOVLW  00
0F462:  MOVWF  FF8
0F464:  MOVLW  1C
0F466:  MOVLB  A
0F468:  MOVWF  x67
0F46A:  MOVLB  0
0F46C:  CALL   1DF6
0F470:  MOVLW  41
0F472:  MOVWF  FE9
0F474:  MOVFF  28E,2E2
0F478:  MOVFF  28D,2E1
0F47C:  MOVFF  28C,2E0
0F480:  MOVFF  28B,2DF
0F484:  CALL   5CBE
0F488:  MOVLW  D3
0F48A:  MOVWF  FF6
0F48C:  MOVLW  09
0F48E:  MOVWF  FF7
0F490:  MOVLW  00
0F492:  MOVWF  FF8
0F494:  MOVLW  04
0F496:  MOVLB  A
0F498:  MOVWF  x67
0F49A:  MOVLB  0
0F49C:  CALL   1DF6
0F4A0:  MOVLW  41
0F4A2:  MOVWF  FE9
0F4A4:  MOVFF  292,2E2
0F4A8:  MOVFF  291,2E1
0F4AC:  MOVFF  290,2E0
0F4B0:  MOVFF  28F,2DF
0F4B4:  CALL   5CBE
0F4B8:  MOVLW  DA
0F4BA:  MOVWF  FF6
0F4BC:  MOVLW  09
0F4BE:  MOVWF  FF7
0F4C0:  MOVLW  00
0F4C2:  MOVWF  FF8
0F4C4:  MOVLW  10
0F4C6:  MOVLB  A
0F4C8:  MOVWF  x67
0F4CA:  MOVLB  0
0F4CC:  CALL   1DF6
....................         read_size = mission_remaining;
0F4D0:  MOVFF  292,28E
0F4D4:  MOVFF  291,28D
0F4D8:  MOVFF  290,28C
0F4DC:  MOVFF  28F,28B
....................     }
....................     if (read_size == 0) {
0F4E0:  MOVLB  2
0F4E2:  MOVF   x8B,F
0F4E4:  BTFSC  FD8.2
0F4E6:  BRA    F4EE
0F4E8:  MOVLB  0
0F4EA:  GOTO   F534
0F4EE:  MOVLB  0
0F4F0:  MOVLB  2
0F4F2:  MOVF   x8C,F
0F4F4:  BTFSC  FD8.2
0F4F6:  BRA    F4FE
0F4F8:  MOVLB  0
0F4FA:  GOTO   F534
0F4FE:  MOVLB  0
0F500:  MOVLB  2
0F502:  MOVF   x8D,F
0F504:  BTFSC  FD8.2
0F506:  BRA    F50E
0F508:  MOVLB  0
0F50A:  GOTO   F534
0F50E:  MOVLB  0
0F510:  MOVLB  2
0F512:  MOVF   x8E,F
0F514:  BTFSC  FD8.2
0F516:  BRA    F51E
0F518:  MOVLB  0
0F51A:  GOTO   F534
0F51E:  MOVLB  0
....................         fprintf(PC, "Info: Nothing to read (size=0)\r\n");
0F520:  MOVLW  EC
0F522:  MOVWF  FF6
0F524:  MOVLW  09
0F526:  MOVWF  FF7
0F528:  MOVLW  00
0F52A:  MOVWF  FF8
0F52C:  CALL   1DC0
....................         return;
0F530:  GOTO   F896
....................     }
.................... 
....................     fprintf(PC, "In SMF Read source data address: %LX\r\n", read_address);
0F534:  MOVLW  0E
0F536:  MOVWF  FF6
0F538:  MOVLW  0A
0F53A:  MOVWF  FF7
0F53C:  MOVLW  00
0F53E:  MOVWF  FF8
0F540:  MOVLW  21
0F542:  MOVLB  A
0F544:  MOVWF  x67
0F546:  MOVLB  0
0F548:  CALL   1DF6
0F54C:  MOVFF  28A,AC8
0F550:  MOVLW  37
0F552:  MOVLB  A
0F554:  MOVWF  xC9
0F556:  MOVLB  0
0F558:  CALL   200A
0F55C:  MOVFF  289,AC8
0F560:  MOVLW  37
0F562:  MOVLB  A
0F564:  MOVWF  xC9
0F566:  MOVLB  0
0F568:  CALL   200A
0F56C:  MOVFF  288,AC8
0F570:  MOVLW  37
0F572:  MOVLB  A
0F574:  MOVWF  xC9
0F576:  MOVLB  0
0F578:  CALL   200A
0F57C:  MOVFF  287,AC8
0F580:  MOVLW  37
0F582:  MOVLB  A
0F584:  MOVWF  xC9
0F586:  MOVLB  0
0F588:  CALL   200A
0F58C:  MOVLW  0D
0F58E:  BTFSS  FA6.6
0F590:  GOTO   F58E
0F594:  MOVLB  E
0F596:  MOVWF  xF9
0F598:  MOVLW  0A
0F59A:  MOVLB  0
0F59C:  BTFSS  FA6.6
0F59E:  GOTO   F59C
0F5A2:  MOVLB  E
0F5A4:  MOVWF  xF9
....................     fprintf(PC, "In SMF Read data size          : %lu (0x%lx)\r\n\r\n", read_size, read_size);
0F5A6:  MOVLW  36
0F5A8:  MOVWF  FF6
0F5AA:  MOVLW  0A
0F5AC:  MOVWF  FF7
0F5AE:  MOVLW  00
0F5B0:  MOVWF  FF8
0F5B2:  MOVLW  21
0F5B4:  MOVLB  A
0F5B6:  MOVWF  x67
0F5B8:  MOVLB  0
0F5BA:  CALL   1DF6
0F5BE:  MOVLW  41
0F5C0:  MOVWF  FE9
0F5C2:  MOVFF  28E,2E2
0F5C6:  MOVFF  28D,2E1
0F5CA:  MOVFF  28C,2E0
0F5CE:  MOVFF  28B,2DF
0F5D2:  CALL   5CBE
0F5D6:  MOVLW  5A
0F5D8:  MOVWF  FF6
0F5DA:  MOVLW  0A
0F5DC:  MOVWF  FF7
0F5DE:  MOVLW  00
0F5E0:  MOVWF  FF8
0F5E2:  MOVLW  04
0F5E4:  MOVLB  A
0F5E6:  MOVWF  x67
0F5E8:  MOVLB  0
0F5EA:  CALL   1DF6
0F5EE:  MOVFF  28E,AC8
0F5F2:  MOVLW  57
0F5F4:  MOVLB  A
0F5F6:  MOVWF  xC9
0F5F8:  MOVLB  0
0F5FA:  CALL   200A
0F5FE:  MOVFF  28D,AC8
0F602:  MOVLW  57
0F604:  MOVLB  A
0F606:  MOVWF  xC9
0F608:  MOVLB  0
0F60A:  CALL   200A
0F60E:  MOVFF  28C,AC8
0F612:  MOVLW  57
0F614:  MOVLB  A
0F616:  MOVWF  xC9
0F618:  MOVLB  0
0F61A:  CALL   200A
0F61E:  MOVFF  28B,AC8
0F622:  MOVLW  57
0F624:  MOVLB  A
0F626:  MOVWF  xC9
0F628:  MOVLB  0
0F62A:  CALL   200A
0F62E:  MOVLW  61
0F630:  MOVWF  FF6
0F632:  MOVLW  0A
0F634:  MOVWF  FF7
0F636:  MOVLW  00
0F638:  MOVWF  FF8
0F63A:  MOVLW  05
0F63C:  MOVLB  A
0F63E:  MOVWF  x67
0F640:  MOVLB  0
0F642:  CALL   1DF6
.................... 
....................     if (!is_connect(smf)){
0F646:  MOVFF  119,2E2
0F64A:  MOVFF  118,2E1
0F64E:  MOVFF  117,2E0
0F652:  MOVFF  116,2DF
0F656:  CALL   2922
0F65A:  MOVF   01,F
0F65C:  BTFSS  FD8.2
0F65E:  GOTO   F672
....................         fprintf(PC, "Error: SMF is not connected\r\n");
0F662:  MOVLW  68
0F664:  MOVWF  FF6
0F666:  MOVLW  0A
0F668:  MOVWF  FF7
0F66A:  MOVLW  00
0F66C:  MOVWF  FF8
0F66E:  CALL   1DC0
....................     }
....................     fprintf(PC, "READ DATA FROM SMF...\r\n");
0F672:  MOVLW  86
0F674:  MOVWF  FF6
0F676:  MOVLW  0A
0F678:  MOVWF  FF7
0F67A:  MOVLW  00
0F67C:  MOVWF  FF8
0F67E:  CALL   1DC0
....................     unsigned int32 end_address = read_address + read_size;
0F682:  MOVLB  2
0F684:  MOVF   x8B,W
0F686:  ADDWF  x87,W
0F688:  MOVWF  x93
0F68A:  MOVF   x8C,W
0F68C:  ADDWFC x88,W
0F68E:  MOVWF  x94
0F690:  MOVF   x8D,W
0F692:  ADDWFC x89,W
0F694:  MOVWF  x95
0F696:  MOVF   x8E,W
0F698:  ADDWFC x8A,W
0F69A:  MOVWF  x96
....................     for (unsigned int32 addr = read_address; addr < end_address; addr += PACKET_SIZE) {
0F69C:  MOVFF  28A,29A
0F6A0:  MOVFF  289,299
0F6A4:  MOVFF  288,298
0F6A8:  MOVFF  287,297
0F6AC:  MOVLB  0
0F6AE:  MOVLB  2
0F6B0:  MOVF   x9A,W
0F6B2:  SUBWF  x96,W
0F6B4:  BTFSC  FD8.0
0F6B6:  BRA    F6BE
0F6B8:  MOVLB  0
0F6BA:  GOTO   F876
0F6BE:  MOVLB  0
0F6C0:  BTFSS  FD8.2
0F6C2:  GOTO   F708
0F6C6:  MOVLB  2
0F6C8:  MOVF   x99,W
0F6CA:  SUBWF  x95,W
0F6CC:  BTFSC  FD8.0
0F6CE:  BRA    F6D6
0F6D0:  MOVLB  0
0F6D2:  GOTO   F876
0F6D6:  MOVLB  0
0F6D8:  BTFSS  FD8.2
0F6DA:  GOTO   F708
0F6DE:  MOVLB  2
0F6E0:  MOVF   x98,W
0F6E2:  SUBWF  x94,W
0F6E4:  BTFSC  FD8.0
0F6E6:  BRA    F6EE
0F6E8:  MOVLB  0
0F6EA:  GOTO   F876
0F6EE:  MOVLB  0
0F6F0:  BTFSS  FD8.2
0F6F2:  GOTO   F708
0F6F6:  MOVLB  2
0F6F8:  MOVF   x93,W
0F6FA:  SUBWF  x97,W
0F6FC:  BTFSS  FD8.0
0F6FE:  BRA    F706
0F700:  MOVLB  0
0F702:  GOTO   F876
0F706:  MOVLB  0
....................         unsigned int16 chunk = (end_address - addr) >= PACKET_SIZE ? PACKET_SIZE : (unsigned int16)(end_address - addr);
0F708:  MOVLB  2
0F70A:  MOVF   x97,W
0F70C:  SUBWF  x93,W
0F70E:  MOVWF  x9F
0F710:  MOVF   x98,W
0F712:  SUBWFB x94,W
0F714:  MOVWF  xA0
0F716:  MOVF   x99,W
0F718:  SUBWFB x95,W
0F71A:  MOVWF  xA1
0F71C:  MOVF   x9A,W
0F71E:  SUBWFB x96,W
0F720:  MOVWF  xA2
0F722:  MOVF   xA2,F
0F724:  BTFSC  FD8.2
0F726:  BRA    F72E
0F728:  MOVLB  0
0F72A:  GOTO   F762
0F72E:  MOVLB  0
0F730:  MOVLB  2
0F732:  MOVF   xA1,F
0F734:  BTFSC  FD8.2
0F736:  BRA    F73E
0F738:  MOVLB  0
0F73A:  GOTO   F762
0F73E:  MOVLB  0
0F740:  MOVLB  2
0F742:  MOVF   xA0,F
0F744:  BTFSC  FD8.2
0F746:  BRA    F74E
0F748:  MOVLB  0
0F74A:  GOTO   F762
0F74E:  MOVLB  0
0F750:  MOVLB  2
0F752:  MOVF   x9F,W
0F754:  SUBLW  3F
0F756:  BTFSS  FD8.0
0F758:  BRA    F760
0F75A:  MOVLB  0
0F75C:  GOTO   F76A
0F760:  MOVLB  0
0F762:  CLRF   03
0F764:  MOVLW  40
0F766:  GOTO   F78C
0F76A:  MOVLB  2
0F76C:  MOVF   x97,W
0F76E:  SUBWF  x93,W
0F770:  MOVWF  00
0F772:  MOVF   x98,W
0F774:  SUBWFB x94,W
0F776:  MOVWF  01
0F778:  MOVF   x99,W
0F77A:  SUBWFB x95,W
0F77C:  MOVWF  02
0F77E:  MOVF   x9A,W
0F780:  SUBWFB x96,W
0F782:  MOVWF  03
0F784:  MOVFF  01,03
0F788:  MOVF   00,W
0F78A:  MOVLB  0
0F78C:  MOVLB  2
0F78E:  MOVWF  x9B
0F790:  MOVFF  03,29C
0F794:  MOVLB  0
....................         read_data_bytes(smf, addr, buffer, chunk);
0F796:  MOVFF  119,B5B
0F79A:  MOVFF  118,B5A
0F79E:  MOVFF  117,B59
0F7A2:  MOVFF  116,B58
0F7A6:  MOVFF  29A,B5F
0F7AA:  MOVFF  299,B5E
0F7AE:  MOVFF  298,B5D
0F7B2:  MOVFF  297,B5C
0F7B6:  MOVLW  02
0F7B8:  MOVLB  B
0F7BA:  MOVWF  x61
0F7BC:  MOVLW  3F
0F7BE:  MOVWF  x60
0F7C0:  CLRF   x65
0F7C2:  CLRF   x64
0F7C4:  MOVFF  29C,B63
0F7C8:  MOVFF  29B,B62
0F7CC:  MOVLB  0
0F7CE:  CALL   2A0E
....................         for (unsigned int16 i = 0; i < chunk; i++) fprintf(PC, "%02X ", buffer[i]);
0F7D2:  MOVLB  2
0F7D4:  CLRF   x9E
0F7D6:  CLRF   x9D
0F7D8:  MOVLB  0
0F7DA:  MOVLB  2
0F7DC:  MOVF   x9E,W
0F7DE:  SUBWF  x9C,W
0F7E0:  BTFSC  FD8.0
0F7E2:  BRA    F7EA
0F7E4:  MOVLB  0
0F7E6:  GOTO   F842
0F7EA:  MOVLB  0
0F7EC:  BTFSS  FD8.2
0F7EE:  GOTO   F804
0F7F2:  MOVLB  2
0F7F4:  MOVF   x9B,W
0F7F6:  SUBWF  x9D,W
0F7F8:  BTFSS  FD8.0
0F7FA:  BRA    F802
0F7FC:  MOVLB  0
0F7FE:  GOTO   F842
0F802:  MOVLB  0
0F804:  MOVLW  3F
0F806:  MOVLB  2
0F808:  ADDWF  x9D,W
0F80A:  MOVWF  FE9
0F80C:  MOVLW  02
0F80E:  ADDWFC x9E,W
0F810:  MOVWF  FEA
0F812:  MOVFF  FEF,29F
0F816:  MOVFF  29F,AC8
0F81A:  MOVLW  37
0F81C:  MOVLB  A
0F81E:  MOVWF  xC9
0F820:  MOVLB  0
0F822:  CALL   200A
0F826:  MOVLW  20
0F828:  BTFSS  FA6.6
0F82A:  GOTO   F828
0F82E:  MOVLB  E
0F830:  MOVWF  xF9
0F832:  MOVLB  0
0F834:  MOVLB  2
0F836:  INCF   x9D,F
0F838:  BTFSC  FD8.2
0F83A:  INCF   x9E,F
0F83C:  MOVLB  0
0F83E:  GOTO   F7DA
....................         fprintf(PC, "\r\n");
0F842:  MOVLW  0D
0F844:  BTFSS  FA6.6
0F846:  GOTO   F844
0F84A:  MOVLB  E
0F84C:  MOVWF  xF9
0F84E:  MOVLW  0A
0F850:  MOVLB  0
0F852:  BTFSS  FA6.6
0F854:  GOTO   F852
0F858:  MOVLB  E
0F85A:  MOVWF  xF9
0F85C:  MOVLB  0
0F85E:  MOVLW  40
0F860:  MOVLB  2
0F862:  ADDWF  x97,F
0F864:  MOVLW  00
0F866:  ADDWFC x98,F
0F868:  MOVLW  00
0F86A:  ADDWFC x99,F
0F86C:  MOVLW  00
0F86E:  ADDWFC x9A,F
0F870:  MOVLB  0
0F872:  GOTO   F6AE
....................     }
....................     fprintf(PC, "\r\n___End SMF Read____\r\n");
0F876:  MOVLW  9E
0F878:  MOVWF  FF6
0F87A:  MOVLW  0A
0F87C:  MOVWF  FF7
0F87E:  MOVLW  00
0F880:  MOVWF  FF8
0F882:  CALL   1DC0
....................     fprintf(PC, "____________________\r\n\r\n");
0F886:  MOVLW  B6
0F888:  MOVWF  FF6
0F88A:  MOVLW  0A
0F88C:  MOVWF  FF7
0F88E:  MOVLW  00
0F890:  MOVWF  FF8
0F892:  CALL   1DC0
0F896:  GOTO   10202 (RETURN)
.................... }
.................... 
.................... void smf_erase(FlashOperationStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
0F89A:  MOVLW  D0
0F89C:  MOVWF  FF6
0F89E:  MOVLW  0A
0F8A0:  MOVWF  FF7
0F8A2:  MOVLW  00
0F8A4:  MOVWF  FF8
0F8A6:  CALL   1DC0
....................     fprintf(PC, "___Start smf_erase____\r\n");
0F8AA:  MOVLW  EA
0F8AC:  MOVWF  FF6
0F8AE:  MOVLW  0A
0F8B0:  MOVWF  FF7
0F8B2:  MOVLW  00
0F8B4:  MOVWF  FF8
0F8B6:  CALL   1DC0
.................... 
....................     SmfAddressStruct mission_type = get_smf_address_struct(smf_data->mission_id);
....................     unsigned int32 erase_address = smf_data->misf_start_addr;
....................     unsigned int32 erase_size = smf_data->misf_size;
0F8BA:  MOVLB  2
0F8BC:  MOVF   x3D,W
0F8BE:  MOVWF  FE9
0F8C0:  MOVF   x3E,W
0F8C2:  MOVWF  FEA
0F8C4:  MOVFF  FEF,257
0F8C8:  MOVFF  257,2A6
0F8CC:  MOVLB  0
0F8CE:  CALL   EFE4
0F8D2:  MOVFF  02,03
0F8D6:  MOVF   01,W
0F8D8:  MOVWF  FE1
0F8DA:  MOVFF  03,FE2
0F8DE:  MOVLW  02
0F8E0:  MOVWF  FEA
0F8E2:  MOVLW  3F
0F8E4:  MOVWF  FE9
0F8E6:  MOVLW  08
0F8E8:  MOVWF  01
0F8EA:  MOVFF  FE6,FEE
0F8EE:  DECFSZ 01,F
0F8F0:  GOTO   F8EA
0F8F4:  MOVLW  04
0F8F6:  MOVLB  2
0F8F8:  ADDWF  x3D,W
0F8FA:  MOVWF  FE9
0F8FC:  MOVLW  00
0F8FE:  ADDWFC x3E,W
0F900:  MOVWF  FEA
0F902:  MOVFF  FEF,247
0F906:  MOVFF  FEC,248
0F90A:  MOVFF  FEC,249
0F90E:  MOVFF  FEC,24A
0F912:  MOVF   FED,F
0F914:  MOVF   FED,F
0F916:  MOVF   FED,F
0F918:  MOVLW  08
0F91A:  ADDWF  x3D,W
0F91C:  MOVWF  FE9
0F91E:  MOVLW  00
0F920:  ADDWFC x3E,W
0F922:  MOVWF  FEA
0F924:  MOVFF  FEF,24B
0F928:  MOVFF  FEC,24C
0F92C:  MOVFF  FEC,24D
0F930:  MOVFF  FEC,24E
0F934:  MOVF   FED,F
0F936:  MOVF   FED,F
0F938:  MOVF   FED,F
....................     fprintf(PC, "[SMF] Erase address   : %LX\r\n", erase_address);
0F93A:  MOVLW  04
0F93C:  MOVWF  FF6
0F93E:  MOVLW  0B
0F940:  MOVWF  FF7
0F942:  MOVLW  00
0F944:  MOVWF  FF8
0F946:  MOVLW  18
0F948:  MOVLB  A
0F94A:  MOVWF  x67
0F94C:  MOVLB  0
0F94E:  CALL   1DF6
0F952:  MOVFF  24A,AC8
0F956:  MOVLW  37
0F958:  MOVLB  A
0F95A:  MOVWF  xC9
0F95C:  MOVLB  0
0F95E:  CALL   200A
0F962:  MOVFF  249,AC8
0F966:  MOVLW  37
0F968:  MOVLB  A
0F96A:  MOVWF  xC9
0F96C:  MOVLB  0
0F96E:  CALL   200A
0F972:  MOVFF  248,AC8
0F976:  MOVLW  37
0F978:  MOVLB  A
0F97A:  MOVWF  xC9
0F97C:  MOVLB  0
0F97E:  CALL   200A
0F982:  MOVFF  247,AC8
0F986:  MOVLW  37
0F988:  MOVLB  A
0F98A:  MOVWF  xC9
0F98C:  MOVLB  0
0F98E:  CALL   200A
0F992:  MOVLW  0D
0F994:  BTFSS  FA6.6
0F996:  GOTO   F994
0F99A:  MOVLB  E
0F99C:  MOVWF  xF9
0F99E:  MOVLW  0A
0F9A0:  MOVLB  0
0F9A2:  BTFSS  FA6.6
0F9A4:  GOTO   F9A2
0F9A8:  MOVLB  E
0F9AA:  MOVWF  xF9
....................     fprintf(PC, "[SMF] Erase data size : %lu (0x%lx)\r\n\r\n", erase_size, erase_size);
0F9AC:  MOVLW  22
0F9AE:  MOVWF  FF6
0F9B0:  MOVLW  0B
0F9B2:  MOVWF  FF7
0F9B4:  MOVLW  00
0F9B6:  MOVWF  FF8
0F9B8:  MOVLW  18
0F9BA:  MOVLB  A
0F9BC:  MOVWF  x67
0F9BE:  MOVLB  0
0F9C0:  CALL   1DF6
0F9C4:  MOVLW  41
0F9C6:  MOVWF  FE9
0F9C8:  MOVFF  24E,2E2
0F9CC:  MOVFF  24D,2E1
0F9D0:  MOVFF  24C,2E0
0F9D4:  MOVFF  24B,2DF
0F9D8:  CALL   5CBE
0F9DC:  MOVLW  3D
0F9DE:  MOVWF  FF6
0F9E0:  MOVLW  0B
0F9E2:  MOVWF  FF7
0F9E4:  MOVLW  00
0F9E6:  MOVWF  FF8
0F9E8:  MOVLW  04
0F9EA:  MOVLB  A
0F9EC:  MOVWF  x67
0F9EE:  MOVLB  0
0F9F0:  CALL   1DF6
0F9F4:  MOVFF  24E,AC8
0F9F8:  MOVLW  57
0F9FA:  MOVLB  A
0F9FC:  MOVWF  xC9
0F9FE:  MOVLB  0
0FA00:  CALL   200A
0FA04:  MOVFF  24D,AC8
0FA08:  MOVLW  57
0FA0A:  MOVLB  A
0FA0C:  MOVWF  xC9
0FA0E:  MOVLB  0
0FA10:  CALL   200A
0FA14:  MOVFF  24C,AC8
0FA18:  MOVLW  57
0FA1A:  MOVLB  A
0FA1C:  MOVWF  xC9
0FA1E:  MOVLB  0
0FA20:  CALL   200A
0FA24:  MOVFF  24B,AC8
0FA28:  MOVLW  57
0FA2A:  MOVLB  A
0FA2C:  MOVWF  xC9
0FA2E:  MOVLB  0
0FA30:  CALL   200A
0FA34:  MOVLW  44
0FA36:  MOVWF  FF6
0FA38:  MOVLW  0B
0FA3A:  MOVWF  FF7
0FA3C:  MOVLW  00
0FA3E:  MOVWF  FF8
0FA40:  MOVLW  05
0FA42:  MOVLB  A
0FA44:  MOVWF  x67
0FA46:  MOVLB  0
0FA48:  CALL   1DF6
.................... 
....................     if (!is_connect(smf)){
0FA4C:  MOVFF  119,2E2
0FA50:  MOVFF  118,2E1
0FA54:  MOVFF  117,2E0
0FA58:  MOVFF  116,2DF
0FA5C:  CALL   2922
0FA60:  MOVF   01,F
0FA62:  BTFSS  FD8.2
0FA64:  GOTO   FA7C
....................         fprintf(PC, "Error: SMF is not connected\r\n");
0FA68:  MOVLW  4A
0FA6A:  MOVWF  FF6
0FA6C:  MOVLW  0B
0FA6E:  MOVWF  FF7
0FA70:  MOVLW  00
0FA72:  MOVWF  FF8
0FA74:  CALL   1DC0
....................         return;
0FA78:  GOTO   FF18
....................     }
.................... 
....................     // Check if erase operation is within mission_type range
....................     if (erase_address < mission_type.start_address || erase_address >= mission_type.end_address) {
0FA7C:  MOVLB  2
0FA7E:  MOVF   x4A,W
0FA80:  SUBWF  x42,W
0FA82:  BTFSC  FD8.0
0FA84:  BRA    FA8C
0FA86:  MOVLB  0
0FA88:  GOTO   FAD6
0FA8C:  MOVLB  0
0FA8E:  BTFSS  FD8.2
0FA90:  GOTO   FB30
0FA94:  MOVLB  2
0FA96:  MOVF   x49,W
0FA98:  SUBWF  x41,W
0FA9A:  BTFSC  FD8.0
0FA9C:  BRA    FAA4
0FA9E:  MOVLB  0
0FAA0:  GOTO   FAD6
0FAA4:  MOVLB  0
0FAA6:  BTFSS  FD8.2
0FAA8:  GOTO   FB30
0FAAC:  MOVLB  2
0FAAE:  MOVF   x48,W
0FAB0:  SUBWF  x40,W
0FAB2:  BTFSC  FD8.0
0FAB4:  BRA    FABC
0FAB6:  MOVLB  0
0FAB8:  GOTO   FAD6
0FABC:  MOVLB  0
0FABE:  BTFSS  FD8.2
0FAC0:  GOTO   FB30
0FAC4:  MOVLB  2
0FAC6:  MOVF   x3F,W
0FAC8:  SUBWF  x47,W
0FACA:  BTFSC  FD8.0
0FACC:  BRA    FAD4
0FACE:  MOVLB  0
0FAD0:  GOTO   FB30
0FAD4:  MOVLB  0
0FAD6:  MOVLB  2
0FAD8:  MOVF   x46,W
0FADA:  SUBWF  x4A,W
0FADC:  BTFSC  FD8.0
0FADE:  BRA    FAE6
0FAE0:  MOVLB  0
0FAE2:  GOTO   FC54
0FAE6:  MOVLB  0
0FAE8:  BTFSS  FD8.2
0FAEA:  GOTO   FB30
0FAEE:  MOVLB  2
0FAF0:  MOVF   x45,W
0FAF2:  SUBWF  x49,W
0FAF4:  BTFSC  FD8.0
0FAF6:  BRA    FAFE
0FAF8:  MOVLB  0
0FAFA:  GOTO   FC54
0FAFE:  MOVLB  0
0FB00:  BTFSS  FD8.2
0FB02:  GOTO   FB30
0FB06:  MOVLB  2
0FB08:  MOVF   x44,W
0FB0A:  SUBWF  x48,W
0FB0C:  BTFSC  FD8.0
0FB0E:  BRA    FB16
0FB10:  MOVLB  0
0FB12:  GOTO   FC54
0FB16:  MOVLB  0
0FB18:  BTFSS  FD8.2
0FB1A:  GOTO   FB30
0FB1E:  MOVLB  2
0FB20:  MOVF   x43,W
0FB22:  SUBWF  x47,W
0FB24:  BTFSC  FD8.0
0FB26:  BRA    FB2E
0FB28:  MOVLB  0
0FB2A:  GOTO   FC54
0FB2E:  MOVLB  0
....................         fprintf(PC, "Error: Erase source address 0x%LX is outside mission range [0x%LX - 0x%LX]\r\n", 
....................                 erase_address, mission_type.start_address, mission_type.end_address);
0FB30:  MOVLW  68
0FB32:  MOVWF  FF6
0FB34:  MOVLW  0B
0FB36:  MOVWF  FF7
0FB38:  MOVLW  00
0FB3A:  MOVWF  FF8
0FB3C:  MOVLW  1E
0FB3E:  MOVLB  A
0FB40:  MOVWF  x67
0FB42:  MOVLB  0
0FB44:  CALL   1DF6
0FB48:  MOVFF  24A,AC8
0FB4C:  MOVLW  37
0FB4E:  MOVLB  A
0FB50:  MOVWF  xC9
0FB52:  MOVLB  0
0FB54:  CALL   200A
0FB58:  MOVFF  249,AC8
0FB5C:  MOVLW  37
0FB5E:  MOVLB  A
0FB60:  MOVWF  xC9
0FB62:  MOVLB  0
0FB64:  CALL   200A
0FB68:  MOVFF  248,AC8
0FB6C:  MOVLW  37
0FB6E:  MOVLB  A
0FB70:  MOVWF  xC9
0FB72:  MOVLB  0
0FB74:  CALL   200A
0FB78:  MOVFF  247,AC8
0FB7C:  MOVLW  37
0FB7E:  MOVLB  A
0FB80:  MOVWF  xC9
0FB82:  MOVLB  0
0FB84:  CALL   200A
0FB88:  MOVLW  89
0FB8A:  MOVWF  FF6
0FB8C:  MOVLW  0B
0FB8E:  MOVWF  FF7
0FB90:  MOVLW  00
0FB92:  MOVWF  FF8
0FB94:  MOVLW  1D
0FB96:  MOVLB  A
0FB98:  MOVWF  x67
0FB9A:  MOVLB  0
0FB9C:  CALL   1DF6
0FBA0:  MOVFF  242,AC8
0FBA4:  MOVLW  37
0FBA6:  MOVLB  A
0FBA8:  MOVWF  xC9
0FBAA:  MOVLB  0
0FBAC:  CALL   200A
0FBB0:  MOVFF  241,AC8
0FBB4:  MOVLW  37
0FBB6:  MOVLB  A
0FBB8:  MOVWF  xC9
0FBBA:  MOVLB  0
0FBBC:  CALL   200A
0FBC0:  MOVFF  240,AC8
0FBC4:  MOVLW  37
0FBC6:  MOVLB  A
0FBC8:  MOVWF  xC9
0FBCA:  MOVLB  0
0FBCC:  CALL   200A
0FBD0:  MOVFF  23F,AC8
0FBD4:  MOVLW  37
0FBD6:  MOVLB  A
0FBD8:  MOVWF  xC9
0FBDA:  MOVLB  0
0FBDC:  CALL   200A
0FBE0:  MOVLW  A9
0FBE2:  MOVWF  FF6
0FBE4:  MOVLW  0B
0FBE6:  MOVWF  FF7
0FBE8:  MOVLW  00
0FBEA:  MOVWF  FF8
0FBEC:  MOVLW  05
0FBEE:  MOVLB  A
0FBF0:  MOVWF  x67
0FBF2:  MOVLB  0
0FBF4:  CALL   1DF6
0FBF8:  MOVFF  246,AC8
0FBFC:  MOVLW  37
0FBFE:  MOVLB  A
0FC00:  MOVWF  xC9
0FC02:  MOVLB  0
0FC04:  CALL   200A
0FC08:  MOVFF  245,AC8
0FC0C:  MOVLW  37
0FC0E:  MOVLB  A
0FC10:  MOVWF  xC9
0FC12:  MOVLB  0
0FC14:  CALL   200A
0FC18:  MOVFF  244,AC8
0FC1C:  MOVLW  37
0FC1E:  MOVLB  A
0FC20:  MOVWF  xC9
0FC22:  MOVLB  0
0FC24:  CALL   200A
0FC28:  MOVFF  243,AC8
0FC2C:  MOVLW  37
0FC2E:  MOVLB  A
0FC30:  MOVWF  xC9
0FC32:  MOVLB  0
0FC34:  CALL   200A
0FC38:  MOVLW  B1
0FC3A:  MOVWF  FF6
0FC3C:  MOVLW  0B
0FC3E:  MOVWF  FF7
0FC40:  MOVLW  00
0FC42:  MOVWF  FF8
0FC44:  MOVLW  03
0FC46:  MOVLB  A
0FC48:  MOVWF  x67
0FC4A:  MOVLB  0
0FC4C:  CALL   1DF6
....................         return;
0FC50:  GOTO   FF18
....................     }
.................... 
....................     if ((erase_address + erase_size) > mission_type.end_address) {
0FC54:  MOVLB  2
0FC56:  MOVF   x4B,W
0FC58:  ADDWF  x47,W
0FC5A:  MOVWF  x57
0FC5C:  MOVF   x4C,W
0FC5E:  ADDWFC x48,W
0FC60:  MOVWF  x58
0FC62:  MOVF   x4D,W
0FC64:  ADDWFC x49,W
0FC66:  MOVWF  x59
0FC68:  MOVF   x4E,W
0FC6A:  ADDWFC x4A,W
0FC6C:  MOVWF  x5A
0FC6E:  MOVF   x46,W
0FC70:  SUBWF  x5A,W
0FC72:  BTFSC  FD8.0
0FC74:  BRA    FC7C
0FC76:  MOVLB  0
0FC78:  GOTO   FD66
0FC7C:  MOVLB  0
0FC7E:  BTFSS  FD8.2
0FC80:  GOTO   FCC6
0FC84:  MOVLB  2
0FC86:  MOVF   x45,W
0FC88:  SUBWF  x59,W
0FC8A:  BTFSC  FD8.0
0FC8C:  BRA    FC94
0FC8E:  MOVLB  0
0FC90:  GOTO   FD66
0FC94:  MOVLB  0
0FC96:  BTFSS  FD8.2
0FC98:  GOTO   FCC6
0FC9C:  MOVLB  2
0FC9E:  MOVF   x44,W
0FCA0:  SUBWF  x58,W
0FCA2:  BTFSC  FD8.0
0FCA4:  BRA    FCAC
0FCA6:  MOVLB  0
0FCA8:  GOTO   FD66
0FCAC:  MOVLB  0
0FCAE:  BTFSS  FD8.2
0FCB0:  GOTO   FCC6
0FCB4:  MOVLB  2
0FCB6:  MOVF   x57,W
0FCB8:  SUBWF  x43,W
0FCBA:  BTFSS  FD8.0
0FCBC:  BRA    FCC4
0FCBE:  MOVLB  0
0FCC0:  GOTO   FD66
0FCC4:  MOVLB  0
....................         fprintf(PC, "Error: Erase operation would exceed mission end address 0x%LX\r\n", mission_type.end_address);
0FCC6:  MOVLW  B6
0FCC8:  MOVWF  FF6
0FCCA:  MOVLW  0B
0FCCC:  MOVWF  FF7
0FCCE:  MOVLW  00
0FCD0:  MOVWF  FF8
0FCD2:  MOVLW  3A
0FCD4:  MOVLB  A
0FCD6:  MOVWF  x67
0FCD8:  MOVLB  0
0FCDA:  CALL   1DF6
0FCDE:  MOVFF  246,AC8
0FCE2:  MOVLW  37
0FCE4:  MOVLB  A
0FCE6:  MOVWF  xC9
0FCE8:  MOVLB  0
0FCEA:  CALL   200A
0FCEE:  MOVFF  245,AC8
0FCF2:  MOVLW  37
0FCF4:  MOVLB  A
0FCF6:  MOVWF  xC9
0FCF8:  MOVLB  0
0FCFA:  CALL   200A
0FCFE:  MOVFF  244,AC8
0FD02:  MOVLW  37
0FD04:  MOVLB  A
0FD06:  MOVWF  xC9
0FD08:  MOVLB  0
0FD0A:  CALL   200A
0FD0E:  MOVFF  243,AC8
0FD12:  MOVLW  37
0FD14:  MOVLB  A
0FD16:  MOVWF  xC9
0FD18:  MOVLB  0
0FD1A:  CALL   200A
0FD1E:  MOVLW  0D
0FD20:  BTFSS  FA6.6
0FD22:  GOTO   FD20
0FD26:  MOVLB  E
0FD28:  MOVWF  xF9
0FD2A:  MOVLW  0A
0FD2C:  MOVLB  0
0FD2E:  BTFSS  FA6.6
0FD30:  GOTO   FD2E
0FD34:  MOVLB  E
0FD36:  MOVWF  xF9
....................         fprintf(PC, "Limiting erase size to stay within mission bounds\r\n");
0FD38:  MOVLW  F6
0FD3A:  MOVWF  FF6
0FD3C:  MOVLW  0B
0FD3E:  MOVWF  FF7
0FD40:  MOVLW  00
0FD42:  MOVWF  FF8
0FD44:  MOVLB  0
0FD46:  CALL   1DC0
....................         erase_size = mission_type.end_address - erase_address;
0FD4A:  MOVLB  2
0FD4C:  MOVF   x47,W
0FD4E:  SUBWF  x43,W
0FD50:  MOVWF  x4B
0FD52:  MOVF   x48,W
0FD54:  SUBWFB x44,W
0FD56:  MOVWF  x4C
0FD58:  MOVF   x49,W
0FD5A:  SUBWFB x45,W
0FD5C:  MOVWF  x4D
0FD5E:  MOVF   x4A,W
0FD60:  SUBWFB x46,W
0FD62:  MOVWF  x4E
0FD64:  MOVLB  0
....................     }
.................... 
....................     fprintf(PC, "Erase operation validated within mission range\r\n");
0FD66:  MOVLW  2A
0FD68:  MOVWF  FF6
0FD6A:  MOVLW  0C
0FD6C:  MOVWF  FF7
0FD6E:  MOVLW  00
0FD70:  MOVWF  FF8
0FD72:  CALL   1DC0
....................     unsigned int32 erase_end = erase_address + erase_size;
....................     // 4KB境界開始へアライン
....................     unsigned int32 current = erase_address & ~0xFFF;
0FD76:  MOVLB  2
0FD78:  MOVF   x4B,W
0FD7A:  ADDWF  x47,W
0FD7C:  MOVWF  x4F
0FD7E:  MOVF   x4C,W
0FD80:  ADDWFC x48,W
0FD82:  MOVWF  x50
0FD84:  MOVF   x4D,W
0FD86:  ADDWFC x49,W
0FD88:  MOVWF  x51
0FD8A:  MOVF   x4E,W
0FD8C:  ADDWFC x4A,W
0FD8E:  MOVWF  x52
0FD90:  CLRF   x53
0FD92:  MOVF   x48,W
0FD94:  ANDLW  F0
0FD96:  MOVWF  x54
0FD98:  CLRF   x55
0FD9A:  CLRF   x56
0FD9C:  MOVLB  0
....................     while (current < erase_end && current < (unsigned int32)mission_type.end_address) {
0FD9E:  MOVLB  2
0FDA0:  MOVF   x56,W
0FDA2:  SUBWF  x52,W
0FDA4:  BTFSC  FD8.0
0FDA6:  BRA    FDAE
0FDA8:  MOVLB  0
0FDAA:  GOTO   FE8A
0FDAE:  MOVLB  0
0FDB0:  BTFSS  FD8.2
0FDB2:  GOTO   FDF8
0FDB6:  MOVLB  2
0FDB8:  MOVF   x55,W
0FDBA:  SUBWF  x51,W
0FDBC:  BTFSC  FD8.0
0FDBE:  BRA    FDC6
0FDC0:  MOVLB  0
0FDC2:  GOTO   FE8A
0FDC6:  MOVLB  0
0FDC8:  BTFSS  FD8.2
0FDCA:  GOTO   FDF8
0FDCE:  MOVLB  2
0FDD0:  MOVF   x54,W
0FDD2:  SUBWF  x50,W
0FDD4:  BTFSC  FD8.0
0FDD6:  BRA    FDDE
0FDD8:  MOVLB  0
0FDDA:  GOTO   FE8A
0FDDE:  MOVLB  0
0FDE0:  BTFSS  FD8.2
0FDE2:  GOTO   FDF8
0FDE6:  MOVLB  2
0FDE8:  MOVF   x4F,W
0FDEA:  SUBWF  x53,W
0FDEC:  BTFSS  FD8.0
0FDEE:  BRA    FDF6
0FDF0:  MOVLB  0
0FDF2:  GOTO   FE8A
0FDF6:  MOVLB  0
0FDF8:  MOVLB  2
0FDFA:  MOVF   x56,W
0FDFC:  SUBWF  x46,W
0FDFE:  BTFSC  FD8.0
0FE00:  BRA    FE08
0FE02:  MOVLB  0
0FE04:  GOTO   FE8A
0FE08:  MOVLB  0
0FE0A:  BTFSS  FD8.2
0FE0C:  GOTO   FE52
0FE10:  MOVLB  2
0FE12:  MOVF   x55,W
0FE14:  SUBWF  x45,W
0FE16:  BTFSC  FD8.0
0FE18:  BRA    FE20
0FE1A:  MOVLB  0
0FE1C:  GOTO   FE8A
0FE20:  MOVLB  0
0FE22:  BTFSS  FD8.2
0FE24:  GOTO   FE52
0FE28:  MOVLB  2
0FE2A:  MOVF   x54,W
0FE2C:  SUBWF  x44,W
0FE2E:  BTFSC  FD8.0
0FE30:  BRA    FE38
0FE32:  MOVLB  0
0FE34:  GOTO   FE8A
0FE38:  MOVLB  0
0FE3A:  BTFSS  FD8.2
0FE3C:  GOTO   FE52
0FE40:  MOVLB  2
0FE42:  MOVF   x43,W
0FE44:  SUBWF  x53,W
0FE46:  BTFSS  FD8.0
0FE48:  BRA    FE50
0FE4A:  MOVLB  0
0FE4C:  GOTO   FE8A
0FE50:  MOVLB  0
....................         subsector_4kByte_erase(smf, current);
0FE52:  MOVFF  119,326
0FE56:  MOVFF  118,325
0FE5A:  MOVFF  117,324
0FE5E:  MOVFF  116,323
0FE62:  MOVFF  256,32A
0FE66:  MOVFF  255,329
0FE6A:  MOVFF  254,328
0FE6E:  MOVFF  253,327
0FE72:  CALL   557C
....................         current += SUBSECTOR_SIZE;
0FE76:  MOVLW  10
0FE78:  MOVLB  2
0FE7A:  ADDWF  x54,F
0FE7C:  MOVLW  00
0FE7E:  ADDWFC x55,F
0FE80:  MOVLW  00
0FE82:  ADDWFC x56,F
0FE84:  MOVLB  0
0FE86:  GOTO   FD9E
....................     }
....................     fprintf(PC, "Erased %lu bytes (aligned)\r\n", (current - (erase_address & ~0xFFF)));
0FE8A:  CLRF   00
0FE8C:  MOVLB  2
0FE8E:  MOVF   x48,W
0FE90:  ANDLW  F0
0FE92:  MOVWF  01
0FE94:  CLRF   02
0FE96:  CLRF   03
0FE98:  MOVF   00,W
0FE9A:  SUBWF  x53,W
0FE9C:  MOVWF  x57
0FE9E:  MOVF   01,W
0FEA0:  SUBWFB x54,W
0FEA2:  MOVWF  x58
0FEA4:  MOVF   02,W
0FEA6:  SUBWFB x55,W
0FEA8:  MOVWF  x59
0FEAA:  MOVF   03,W
0FEAC:  SUBWFB x56,W
0FEAE:  MOVWF  x5A
0FEB0:  MOVLW  5C
0FEB2:  MOVWF  FF6
0FEB4:  MOVLW  0C
0FEB6:  MOVWF  FF7
0FEB8:  MOVLW  00
0FEBA:  MOVWF  FF8
0FEBC:  MOVLW  07
0FEBE:  MOVLB  A
0FEC0:  MOVWF  x67
0FEC2:  MOVLB  0
0FEC4:  CALL   1DF6
0FEC8:  MOVLW  41
0FECA:  MOVWF  FE9
0FECC:  MOVFF  25A,2E2
0FED0:  MOVFF  259,2E1
0FED4:  MOVFF  258,2E0
0FED8:  MOVFF  257,2DF
0FEDC:  CALL   5CBE
0FEE0:  MOVLW  66
0FEE2:  MOVWF  FF6
0FEE4:  MOVLW  0C
0FEE6:  MOVWF  FF7
0FEE8:  MOVLW  00
0FEEA:  MOVWF  FF8
0FEEC:  MOVLW  12
0FEEE:  MOVLB  A
0FEF0:  MOVWF  x67
0FEF2:  MOVLB  0
0FEF4:  CALL   1DF6
.................... 
....................     fprintf(PC, "\r\n___End smf_erase____\r\n");
0FEF8:  MOVLW  7A
0FEFA:  MOVWF  FF6
0FEFC:  MOVLW  0C
0FEFE:  MOVWF  FF7
0FF00:  MOVLW  00
0FF02:  MOVWF  FF8
0FF04:  CALL   1DC0
....................     fprintf(PC, "____________________\r\n\r\n");
0FF08:  MOVLW  94
0FF0A:  MOVWF  FF6
0FF0C:  MOVLW  0C
0FF0E:  MOVWF  FF7
0FF10:  MOVLW  00
0FF12:  MOVWF  FF8
0FF14:  CALL   1DC0
0FF18:  GOTO   10212 (RETURN)
.................... }
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id)
.................... {
....................     switch(mission_id)
....................     {
....................         case 0x01:  // CIGS_MEASURE_DATA
....................             return &param.iv1_data;
....................         case 0x02:  // CIGS_PICLOG
....................             return &param.piclog;
....................         default:
....................             fprintf(PC, "Error: Unknown mission_id: %02X\r\n", mission_id);
....................             return 0x00;  // NULL pointer
....................     }
.................... }
.................... 
.................... // mission_idに対応するパーティション情報を更新する関数
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter)
.................... {
....................     SMF_PARTITION* partition = get_smf_partition_by_mission_id(mission_id);
....................     if (partition != 0x00)
....................     {
....................         partition->used_size = used_size;
....................         partition->loop_counter = loop_counter;
....................         fprintf(PC, "Updated partition for mission_id %02X: used_size=%ld, loop_counter=%ld\r\n", 
....................                 mission_id, used_size, loop_counter);
....................     }
.................... }
.................... 
.................... // カウンター更新関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size)
.................... {
....................     // MISF 側 uncopied_counter を転送サイズ分減少 (下限0)
....................     Flash_t *target = 0x00;
....................     switch(mission_id){
....................         case CIGS_PICLOG_DATA: target = piclog_data_ptr; break;
....................         case CIGS_ENVIRO_DATA: target = environment_data_ptr; break;
....................         case CIGS_IV1_HEADER:  target = iv1_header_ptr; break;
....................         case CIGS_IV1_DATA:    target = iv1_data_ptr; break;
....................         case CIGS_IV2_HEADER:  target = iv2_header_ptr; break;
....................         case CIGS_IV2_DATA:    target = iv2_data_ptr; break;
....................         default: break; // DATA_TABLE などは対象外
....................     }
....................     if(target){
....................         unsigned int32 before = target->uncopied_counter;
....................         if(transfer_size >= before) target->uncopied_counter = 0; else target->uncopied_counter -= transfer_size;
....................         fprintf(PC, "[MISF] mission %u uncopied_counter %08LX -> %08LX (-%lu)\r\n", mission_id, before, target->uncopied_counter, transfer_size);
....................         misf_update_address_area();
....................     } else {
....................         fprintf(PC, "[MISF] update_misf_counters: mission %u not handled\r\n", mission_id);
....................     }
.................... }
.................... 
.................... // カウンター初期化関数
.................... void reset_misf_counters(int8 mission_id)
.................... {
....................     Flash_t *target = 0x00;
....................     switch(mission_id){
....................         case CIGS_PICLOG_DATA: target = piclog_data_ptr; break;
....................         case CIGS_ENVIRO_DATA: target = environment_data_ptr; break;
....................         case CIGS_IV1_HEADER:  target = iv1_header_ptr; break;
....................         case CIGS_IV1_DATA:    target = iv1_data_ptr; break;
....................         case CIGS_IV2_HEADER:  target = iv2_header_ptr; break;
....................         case CIGS_IV2_DATA:    target = iv2_data_ptr; break;
....................         default: break;
....................     }
....................     if(target){
....................         target->uncopied_counter = 0;
....................         misf_update_address_area();
....................         fprintf(PC, "[MISF] mission %u uncopied_counter reset\r\n", mission_id);
....................     }
.................... }
.................... 
.................... // カウンター状態表示関数
.................... void print_misf_counter_status(int8 mission_id)
.................... {
....................     Flash_t *target = 0x00;
....................     switch(mission_id){
....................         case CIGS_PICLOG_DATA: target = piclog_data_ptr; break;
....................         case CIGS_ENVIRO_DATA: target = environment_data_ptr; break;
....................         case CIGS_IV1_HEADER:  target = iv1_header_ptr; break;
....................         case CIGS_IV1_DATA:    target = iv1_data_ptr; break;
....................         case CIGS_IV2_HEADER:  target = iv2_header_ptr; break;
....................         case CIGS_IV2_DATA:    target = iv2_data_ptr; break;
....................         default: break;
....................     }
....................     if(target){
....................         fprintf(PC, "[MISF] mission %u status: used=0x%08LX uncopied=0x%08LX r1=0x%02X r2=0x%02X\r\n",
....................                 mission_id, target->used_counter, target->uncopied_counter,
....................                 target->reserve_counter1, target->reserve_counter2);
....................     } else {
....................         fprintf(PC, "[MISF] print status: mission %u not handled\r\n", mission_id);
....................     }
.................... }
.................... // End of file
.................... 
.................... #include "domain/mmj_cigs_flash.c"
.................... #include "mmj_cigs_flash.h"                           
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x000FFFFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  0x00001000
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     0x00010000
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     0x00010000
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  0x00010000
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    0x00010000
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  0x00010000
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    0x00010000
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t flash_counter_table[];
.................... extern FlashCounter_t *flash_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/mmj_cigs_config.h"             
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mt25q.h"                
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/tool/calc_tools.h"             
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/smf_queue.h"              
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... 
.................... // 実体宣言
.................... Flash_t data_table = {FLASH_ID_DATA_TABLE, 0, 0, 0};
.................... Flash_t piclog_data = {FLASH_ID_PICLOG, 0, 0, 0};
.................... Flash_t environment_data = {FLASH_ID_ENVIRONMENT, 0, 0, 0};
.................... Flash_t iv1_header = {FLASH_ID_IV1_HEADER, 0, 0, 0};
.................... Flash_t iv1_data = {FLASH_ID_IV1_DATA, 0, 0, 0};
.................... Flash_t iv2_header = {FLASH_ID_IV2_HEADER, 0, 0, 0};
.................... Flash_t iv2_data = {FLASH_ID_IV2_DATA, 0, 0, 0};
.................... 
.................... // ポインタ設定
.................... Flash_t *data_table_ptr = &data_table;
.................... Flash_t *piclog_data_ptr = &piclog_data;
.................... Flash_t *environment_data_ptr = &environment_data;
.................... Flash_t *iv1_header_ptr = &iv1_header;
.................... Flash_t *iv1_data_ptr = &iv1_data;
.................... Flash_t *iv2_header_ptr = &iv2_header;
.................... Flash_t *iv2_data_ptr = &iv2_data;
.................... 
.................... const ADDRESS_AREA_T MISF_ADDRESS_TABLE[FLASH_ID_COUNT] = {
....................     { MISF_CIGS_DATA_TABLE_START,   MISF_CIGS_DATA_TABLE_END,   MISF_CIGS_DATA_TABLE_SIZE },
....................     { MISF_CIGS_PICLOG_START,       MISF_CIGS_PICLOG_END,       MISF_CIGS_PICLOG_SIZE },
....................     { MISF_CIGS_ENVIRO_START,       MISF_CIGS_ENVIRO_END,       MISF_CIGS_ENVIRO_SIZE },
....................     { MISF_CIGS_IV1_HEADER_START,   MISF_CIGS_IV1_HEADER_END,   MISF_CIGS_IV1_HEADER_SIZE },
....................     { MISF_CIGS_IV1_DATA_START,     MISF_CIGS_IV1_DATA_END,     MISF_CIGS_IV1_DATA_SIZE },
....................     { MISF_CIGS_IV2_HEADER_START,   MISF_CIGS_IV2_HEADER_END,   MISF_CIGS_IV2_HEADER_SIZE },
....................     { MISF_CIGS_IV2_DATA_START,     MISF_CIGS_IV2_DATA_END,     MISF_CIGS_IV2_DATA_SIZE }
.................... };
.................... 
.................... FlashCounter_t flash_counter_table[FLASH_ID_COUNT];
.................... FlashCounter_t *flash_counter_table_ptr[FLASH_ID_COUNT] = {&flash_counter_table[0], &flash_counter_table[1], &flash_counter_table[2], &flash_counter_table[3], &flash_counter_table[4], &flash_counter_table[5], &flash_counter_table[6]};
.................... 
.................... 
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
03498:  MOVLW  34
0349A:  MOVWF  FF6
0349C:  MOVLW  0E
0349E:  MOVWF  FF7
034A0:  MOVLW  00
034A2:  MOVWF  FF8
034A4:  CALL   1DC0
....................     output_high(MIS_FM_CS);
034A8:  MOVLW  FE
034AA:  MOVWF  F98
034AC:  BSF    F8F.0
....................     output_high(SMF_CS);
034AE:  MOVLW  FB
034B0:  MOVWF  F92
034B2:  BSF    F89.2
.................... 
....................     // 接続処理
....................     if (is_connect(mis_fm)) {
034B4:  MOVFF  115,2E2
034B8:  MOVFF  114,2E1
034BC:  MOVFF  113,2E0
034C0:  MOVFF  112,2DF
034C4:  CALL   2922
034C8:  MOVF   01,F
034CA:  BTFSC  FD8.2
034CC:  GOTO   34E4
....................         fprintf(PC, "\t[MIS FM] Connected\r\n");
034D0:  MOVLW  50
034D2:  MOVWF  FF6
034D4:  MOVLW  0E
034D6:  MOVWF  FF7
034D8:  MOVLW  00
034DA:  MOVWF  FF8
034DC:  CALL   1DC0
....................     } else {
034E0:  GOTO   34F4
....................         fprintf(PC, "\t[MIS FM] Not Connected\r\n");
034E4:  MOVLW  66
034E6:  MOVWF  FF6
034E8:  MOVLW  0E
034EA:  MOVWF  FF7
034EC:  MOVLW  00
034EE:  MOVWF  FF8
034F0:  CALL   1DC0
....................     }
....................     if (is_connect(smf)) {
034F4:  MOVFF  119,2E2
034F8:  MOVFF  118,2E1
034FC:  MOVFF  117,2E0
03500:  MOVFF  116,2DF
03504:  CALL   2922
03508:  MOVF   01,F
0350A:  BTFSC  FD8.2
0350C:  GOTO   3524
....................         fprintf(PC, "\t[SMF] Connected\r\n");
03510:  MOVLW  80
03512:  MOVWF  FF6
03514:  MOVLW  0E
03516:  MOVWF  FF7
03518:  MOVLW  00
0351A:  MOVWF  FF8
0351C:  CALL   1DC0
....................     } else {
03520:  GOTO   3534
....................         fprintf(PC, "\t[SMF] Not Connected\r\n");
03524:  MOVLW  94
03526:  MOVWF  FF6
03528:  MOVLW  0E
0352A:  MOVWF  FF7
0352C:  MOVLW  00
0352E:  MOVWF  FF8
03530:  CALL   1DC0
....................     }
.................... 
....................     //=== MIS_FM カウンタテーブル読出し ===//
....................     FlashData_t read_header;
....................     FlashData_t *read_header_ptr = &read_header;
03534:  MOVLW  02
03536:  MOVLB  2
03538:  MOVWF  xC6
0353A:  MOVLW  85
0353C:  MOVWF  xC5
....................     memset(read_header_ptr, 0x00, sizeof(FlashData_t));
0353E:  MOVFF  2C6,FEA
03542:  MOVFF  2C5,FE9
03546:  CLRF   00
03548:  CLRF   02
0354A:  MOVLW  40
0354C:  MOVWF  01
0354E:  MOVLB  0
03550:  CALL   29EA
....................     read_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, read_header_ptr->bytes, PACKET_SIZE);
03554:  MOVLB  2
03556:  MOVF   xC5,W
03558:  MOVWF  01
0355A:  MOVF   xC6,W
0355C:  MOVWF  03
0355E:  MOVF   01,W
03560:  MOVWF  xC7
03562:  MOVFF  03,2C8
03566:  MOVFF  115,B5B
0356A:  MOVFF  114,B5A
0356E:  MOVFF  113,B59
03572:  MOVFF  112,B58
03576:  MOVLB  B
03578:  CLRF   x5F
0357A:  CLRF   x5E
0357C:  CLRF   x5D
0357E:  CLRF   x5C
03580:  MOVFF  2C8,B61
03584:  MOVFF  2C7,B60
03588:  CLRF   x65
0358A:  CLRF   x64
0358C:  CLRF   x63
0358E:  MOVLW  40
03590:  MOVWF  x62
03592:  MOVLB  0
03594:  CALL   2A0E
.................... 
....................     // CRC 検証
....................     if (read_header_ptr->packet.crc != calc_crc8(read_header_ptr->bytes, PACKET_SIZE - 1)) {
03598:  MOVLW  3F
0359A:  MOVLB  2
0359C:  ADDWF  xC5,W
0359E:  MOVWF  FE9
035A0:  MOVLW  00
035A2:  ADDWFC xC6,W
035A4:  MOVWF  FEA
035A6:  MOVFF  FEF,2C7
035AA:  MOVF   xC5,W
035AC:  MOVWF  01
035AE:  MOVF   xC6,W
035B0:  MOVWF  03
035B2:  MOVF   01,W
035B4:  MOVWF  xC8
035B6:  MOVFF  03,2C9
035BA:  MOVFF  2C9,BE7
035BE:  MOVFF  2C8,BE6
035C2:  MOVLW  3F
035C4:  MOVLB  B
035C6:  MOVWF  xE8
035C8:  MOVLB  0
035CA:  CALL   2C22
035CE:  MOVF   01,W
035D0:  MOVLB  2
035D2:  SUBWF  xC7,W
035D4:  BTFSS  FD8.2
035D6:  BRA    35DE
035D8:  MOVLB  0
035DA:  GOTO   35F0
035DE:  MOVLB  0
....................         fprintf(PC, "\t[MIS FM] CRC error -> initialize counters\r\n");
035E0:  MOVLW  AC
035E2:  MOVWF  FF6
035E4:  MOVLW  0E
035E6:  MOVWF  FF7
035E8:  MOVLW  00
035EA:  MOVWF  FF8
035EC:  CALL   1DC0
....................         // デフォルト初期化
....................         /*
....................         piclog_data.id        = FLASH_ID_PICLOG;
....................         environment_data.id   = FLASH_ID_ENVIRONMENT;
....................         iv_header.id          = FLASH_ID_IV_HEADER;
....................         iv_data.id            = FLASH_ID_IV_DATA;
....................         piclog_data.used_counter = 0;
....................         piclog_data.uncopied_counter = 0;
....................         environment_data.used_counter = 0;
....................         environment_data.uncopied_counter = 0;
....................         iv_header.used_counter = 0;
....................         iv_header.uncopied_counter = 0;
....................         iv_data.used_counter = 0;
....................         iv_data.uncopied_counter = 0;
....................         misf_update_address_area();   // 初期テーブル書込み
....................         print_flash_status();
....................         return;
....................         */
....................     }
....................     flash_counter_table[FLASH_ID_PICLOG]       = read_header_ptr->packet.payload.logdata.piclog;
035F0:  MOVLB  2
035F2:  MOVF   xC5,W
035F4:  MOVWF  FE1
035F6:  MOVF   xC6,W
035F8:  MOVWF  FE2
035FA:  MOVLW  01
035FC:  MOVWF  FEA
035FE:  MOVLW  38
03600:  MOVWF  FE9
03602:  MOVLW  0A
03604:  MOVWF  01
03606:  MOVLB  0
03608:  MOVFF  FE6,FEE
0360C:  DECFSZ 01,F
0360E:  GOTO   3608
....................     flash_counter_table[FLASH_ID_ENVIRONMENT]  = read_header_ptr->packet.payload.logdata.environment;
03612:  MOVLW  0A
03614:  MOVLB  2
03616:  ADDWF  xC5,W
03618:  MOVWF  FE1
0361A:  MOVLW  00
0361C:  ADDWFC xC6,W
0361E:  MOVWF  FE2
03620:  MOVLW  01
03622:  MOVWF  FEA
03624:  MOVLW  42
03626:  MOVWF  FE9
03628:  MOVLW  0A
0362A:  MOVWF  01
0362C:  MOVLB  0
0362E:  MOVFF  FE6,FEE
03632:  DECFSZ 01,F
03634:  GOTO   362E
....................     flash_counter_table[FLASH_ID_IV1_HEADER]   = read_header_ptr->packet.payload.logdata.iv1_header;
03638:  MOVLW  14
0363A:  MOVLB  2
0363C:  ADDWF  xC5,W
0363E:  MOVWF  FE1
03640:  MOVLW  00
03642:  ADDWFC xC6,W
03644:  MOVWF  FE2
03646:  MOVLW  01
03648:  MOVWF  FEA
0364A:  MOVLW  4C
0364C:  MOVWF  FE9
0364E:  MOVLW  0A
03650:  MOVWF  01
03652:  MOVLB  0
03654:  MOVFF  FE6,FEE
03658:  DECFSZ 01,F
0365A:  GOTO   3654
....................     flash_counter_table[FLASH_ID_IV1_DATA]     = read_header_ptr->packet.payload.logdata.iv1_data;
0365E:  MOVLW  1E
03660:  MOVLB  2
03662:  ADDWF  xC5,W
03664:  MOVWF  FE1
03666:  MOVLW  00
03668:  ADDWFC xC6,W
0366A:  MOVWF  FE2
0366C:  MOVLW  01
0366E:  MOVWF  FEA
03670:  MOVLW  56
03672:  MOVWF  FE9
03674:  MOVLW  0A
03676:  MOVWF  01
03678:  MOVLB  0
0367A:  MOVFF  FE6,FEE
0367E:  DECFSZ 01,F
03680:  GOTO   367A
....................     flash_counter_table[FLASH_ID_IV2_HEADER]   = read_header_ptr->packet.payload.logdata.iv2_header;
03684:  MOVLW  28
03686:  MOVLB  2
03688:  ADDWF  xC5,W
0368A:  MOVWF  FE1
0368C:  MOVLW  00
0368E:  ADDWFC xC6,W
03690:  MOVWF  FE2
03692:  MOVLW  01
03694:  MOVWF  FEA
03696:  MOVLW  60
03698:  MOVWF  FE9
0369A:  MOVLW  0A
0369C:  MOVWF  01
0369E:  MOVLB  0
036A0:  MOVFF  FE6,FEE
036A4:  DECFSZ 01,F
036A6:  GOTO   36A0
....................     flash_counter_table[FLASH_ID_IV2_DATA]     = read_header_ptr->packet.payload.logdata.iv2_data;
036AA:  MOVLW  32
036AC:  MOVLB  2
036AE:  ADDWF  xC5,W
036B0:  MOVWF  FE1
036B2:  MOVLW  00
036B4:  ADDWFC xC6,W
036B6:  MOVWF  FE2
036B8:  MOVLW  01
036BA:  MOVWF  FEA
036BC:  MOVLW  6A
036BE:  MOVWF  FE9
036C0:  MOVLW  0A
036C2:  MOVWF  01
036C4:  MOVLB  0
036C6:  MOVFF  FE6,FEE
036CA:  DECFSZ 01,F
036CC:  GOTO   36C6
.................... 
....................     print_misf_address_table();
036D0:  GOTO   2C8E
.................... 
....................     fprintf(PC, "\tComplete\r\n");
036D4:  MOVLW  DA
036D6:  MOVWF  FF6
036D8:  MOVLW  0E
036DA:  MOVWF  FF7
036DC:  MOVLW  00
036DE:  MOVWF  FF8
036E0:  CALL   1DC0
036E4:  RETURN 0
.................... }
.................... 
.................... void print_misf_address_table()
.................... {
....................     fprintf(PC, "\tField\t\tCounterName\tValue\r\n");
*
02C8E:  MOVLW  E6
02C90:  MOVWF  FF6
02C92:  MOVLW  0E
02C94:  MOVWF  FF7
02C96:  MOVLW  00
02C98:  MOVWF  FF8
02C9A:  CALL   1DC0
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
02C9E:  MOVLW  02
02CA0:  MOVWF  FF6
02CA2:  MOVLW  0F
02CA4:  MOVWF  FF7
02CA6:  MOVLW  00
02CA8:  MOVWF  FF8
02CAA:  CALL   1DC0
....................     fprintf(PC, "\tPICLOG\t\tUsed\t\t0x%08LX\r\n", flash_counter_table[FLASH_ID_PICLOG].used_counter);
02CAE:  MOVLW  2E
02CB0:  MOVWF  FF6
02CB2:  MOVLW  0F
02CB4:  MOVWF  FF7
02CB6:  MOVLW  00
02CB8:  MOVWF  FF8
02CBA:  MOVLW  11
02CBC:  MOVLB  A
02CBE:  MOVWF  x67
02CC0:  MOVLB  0
02CC2:  CALL   1DF6
02CC6:  MOVFF  13B,AC8
02CCA:  MOVLW  37
02CCC:  MOVLB  A
02CCE:  MOVWF  xC9
02CD0:  MOVLB  0
02CD2:  CALL   200A
02CD6:  MOVFF  13A,AC8
02CDA:  MOVLW  37
02CDC:  MOVLB  A
02CDE:  MOVWF  xC9
02CE0:  MOVLB  0
02CE2:  CALL   200A
02CE6:  MOVFF  139,AC8
02CEA:  MOVLW  37
02CEC:  MOVLB  A
02CEE:  MOVWF  xC9
02CF0:  MOVLB  0
02CF2:  CALL   200A
02CF6:  MOVFF  138,AC8
02CFA:  MOVLW  37
02CFC:  MOVLB  A
02CFE:  MOVWF  xC9
02D00:  MOVLB  0
02D02:  CALL   200A
02D06:  MOVLW  0D
02D08:  BTFSS  FA6.6
02D0A:  GOTO   2D08
02D0E:  MOVLB  E
02D10:  MOVWF  xF9
02D12:  MOVLW  0A
02D14:  MOVLB  0
02D16:  BTFSS  FA6.6
02D18:  GOTO   2D16
02D1C:  MOVLB  E
02D1E:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", flash_counter_table[FLASH_ID_PICLOG].uncopied_counter);
02D20:  MOVLW  48
02D22:  MOVWF  FF6
02D24:  MOVLW  0F
02D26:  MOVWF  FF7
02D28:  MOVLW  00
02D2A:  MOVWF  FF8
02D2C:  MOVLW  0E
02D2E:  MOVLB  A
02D30:  MOVWF  x67
02D32:  MOVLB  0
02D34:  CALL   1DF6
02D38:  MOVFF  13F,AC8
02D3C:  MOVLW  37
02D3E:  MOVLB  A
02D40:  MOVWF  xC9
02D42:  MOVLB  0
02D44:  CALL   200A
02D48:  MOVFF  13E,AC8
02D4C:  MOVLW  37
02D4E:  MOVLB  A
02D50:  MOVWF  xC9
02D52:  MOVLB  0
02D54:  CALL   200A
02D58:  MOVFF  13D,AC8
02D5C:  MOVLW  37
02D5E:  MOVLB  A
02D60:  MOVWF  xC9
02D62:  MOVLB  0
02D64:  CALL   200A
02D68:  MOVFF  13C,AC8
02D6C:  MOVLW  37
02D6E:  MOVLB  A
02D70:  MOVWF  xC9
02D72:  MOVLB  0
02D74:  CALL   200A
02D78:  MOVLW  0D
02D7A:  BTFSS  FA6.6
02D7C:  GOTO   2D7A
02D80:  MOVLB  E
02D82:  MOVWF  xF9
02D84:  MOVLW  0A
02D86:  MOVLB  0
02D88:  BTFSS  FA6.6
02D8A:  GOTO   2D88
02D8E:  MOVLB  E
02D90:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", flash_counter_table[FLASH_ID_PICLOG].reserve_counter1,flash_counter_table[FLASH_ID_PICLOG].reserve_counter2);
02D92:  MOVLW  5E
02D94:  MOVWF  FF6
02D96:  MOVLW  0F
02D98:  MOVWF  FF7
02D9A:  MOVLW  00
02D9C:  MOVWF  FF8
02D9E:  MOVLW  0E
02DA0:  MOVLB  A
02DA2:  MOVWF  x67
02DA4:  MOVLB  0
02DA6:  CALL   1DF6
02DAA:  MOVFF  140,AC8
02DAE:  MOVLW  37
02DB0:  MOVLB  A
02DB2:  MOVWF  xC9
02DB4:  MOVLB  0
02DB6:  CALL   200A
02DBA:  MOVLW  70
02DBC:  MOVWF  FF6
02DBE:  MOVLW  0F
02DC0:  MOVWF  FF7
02DC2:  MOVLW  00
02DC4:  MOVWF  FF8
02DC6:  MOVLW  04
02DC8:  MOVLB  A
02DCA:  MOVWF  x67
02DCC:  MOVLB  0
02DCE:  CALL   1DF6
02DD2:  MOVFF  141,AC8
02DD6:  MOVLW  37
02DD8:  MOVLB  A
02DDA:  MOVWF  xC9
02DDC:  MOVLB  0
02DDE:  CALL   200A
02DE2:  MOVLW  0D
02DE4:  BTFSS  FA6.6
02DE6:  GOTO   2DE4
02DEA:  MOVLB  E
02DEC:  MOVWF  xF9
02DEE:  MOVLW  0A
02DF0:  MOVLB  0
02DF2:  BTFSS  FA6.6
02DF4:  GOTO   2DF2
02DF8:  MOVLB  E
02DFA:  MOVWF  xF9
....................     fprintf(PC, "\tENVIRO\t\tUsed\t\t0x%08LX\r\n", flash_counter_table[FLASH_ID_ENVIRONMENT].used_counter);
02DFC:  MOVLW  7C
02DFE:  MOVWF  FF6
02E00:  MOVLW  0F
02E02:  MOVWF  FF7
02E04:  MOVLW  00
02E06:  MOVWF  FF8
02E08:  MOVLW  11
02E0A:  MOVLB  A
02E0C:  MOVWF  x67
02E0E:  MOVLB  0
02E10:  CALL   1DF6
02E14:  MOVFF  145,AC8
02E18:  MOVLW  37
02E1A:  MOVLB  A
02E1C:  MOVWF  xC9
02E1E:  MOVLB  0
02E20:  CALL   200A
02E24:  MOVFF  144,AC8
02E28:  MOVLW  37
02E2A:  MOVLB  A
02E2C:  MOVWF  xC9
02E2E:  MOVLB  0
02E30:  CALL   200A
02E34:  MOVFF  143,AC8
02E38:  MOVLW  37
02E3A:  MOVLB  A
02E3C:  MOVWF  xC9
02E3E:  MOVLB  0
02E40:  CALL   200A
02E44:  MOVFF  142,AC8
02E48:  MOVLW  37
02E4A:  MOVLB  A
02E4C:  MOVWF  xC9
02E4E:  MOVLB  0
02E50:  CALL   200A
02E54:  MOVLW  0D
02E56:  BTFSS  FA6.6
02E58:  GOTO   2E56
02E5C:  MOVLB  E
02E5E:  MOVWF  xF9
02E60:  MOVLW  0A
02E62:  MOVLB  0
02E64:  BTFSS  FA6.6
02E66:  GOTO   2E64
02E6A:  MOVLB  E
02E6C:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", flash_counter_table[FLASH_ID_ENVIRONMENT].uncopied_counter);
02E6E:  MOVLW  96
02E70:  MOVWF  FF6
02E72:  MOVLW  0F
02E74:  MOVWF  FF7
02E76:  MOVLW  00
02E78:  MOVWF  FF8
02E7A:  MOVLW  0E
02E7C:  MOVLB  A
02E7E:  MOVWF  x67
02E80:  MOVLB  0
02E82:  CALL   1DF6
02E86:  MOVFF  149,AC8
02E8A:  MOVLW  37
02E8C:  MOVLB  A
02E8E:  MOVWF  xC9
02E90:  MOVLB  0
02E92:  CALL   200A
02E96:  MOVFF  148,AC8
02E9A:  MOVLW  37
02E9C:  MOVLB  A
02E9E:  MOVWF  xC9
02EA0:  MOVLB  0
02EA2:  CALL   200A
02EA6:  MOVFF  147,AC8
02EAA:  MOVLW  37
02EAC:  MOVLB  A
02EAE:  MOVWF  xC9
02EB0:  MOVLB  0
02EB2:  CALL   200A
02EB6:  MOVFF  146,AC8
02EBA:  MOVLW  37
02EBC:  MOVLB  A
02EBE:  MOVWF  xC9
02EC0:  MOVLB  0
02EC2:  CALL   200A
02EC6:  MOVLW  0D
02EC8:  BTFSS  FA6.6
02ECA:  GOTO   2EC8
02ECE:  MOVLB  E
02ED0:  MOVWF  xF9
02ED2:  MOVLW  0A
02ED4:  MOVLB  0
02ED6:  BTFSS  FA6.6
02ED8:  GOTO   2ED6
02EDC:  MOVLB  E
02EDE:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", flash_counter_table[FLASH_ID_ENVIRONMENT].reserve_counter1,flash_counter_table[FLASH_ID_ENVIRONMENT].reserve_counter2);
02EE0:  MOVLW  AC
02EE2:  MOVWF  FF6
02EE4:  MOVLW  0F
02EE6:  MOVWF  FF7
02EE8:  MOVLW  00
02EEA:  MOVWF  FF8
02EEC:  MOVLW  0E
02EEE:  MOVLB  A
02EF0:  MOVWF  x67
02EF2:  MOVLB  0
02EF4:  CALL   1DF6
02EF8:  MOVFF  14A,AC8
02EFC:  MOVLW  37
02EFE:  MOVLB  A
02F00:  MOVWF  xC9
02F02:  MOVLB  0
02F04:  CALL   200A
02F08:  MOVLW  BE
02F0A:  MOVWF  FF6
02F0C:  MOVLW  0F
02F0E:  MOVWF  FF7
02F10:  MOVLW  00
02F12:  MOVWF  FF8
02F14:  MOVLW  04
02F16:  MOVLB  A
02F18:  MOVWF  x67
02F1A:  MOVLB  0
02F1C:  CALL   1DF6
02F20:  MOVFF  14B,AC8
02F24:  MOVLW  37
02F26:  MOVLB  A
02F28:  MOVWF  xC9
02F2A:  MOVLB  0
02F2C:  CALL   200A
02F30:  MOVLW  0D
02F32:  BTFSS  FA6.6
02F34:  GOTO   2F32
02F38:  MOVLB  E
02F3A:  MOVWF  xF9
02F3C:  MOVLW  0A
02F3E:  MOVLB  0
02F40:  BTFSS  FA6.6
02F42:  GOTO   2F40
02F46:  MOVLB  E
02F48:  MOVWF  xF9
....................     fprintf(PC, "\tIV1 HEADER\tUsed\t\t0x%08LX\r\n", flash_counter_table[FLASH_ID_IV1_HEADER].used_counter);
02F4A:  MOVLW  CA
02F4C:  MOVWF  FF6
02F4E:  MOVLW  0F
02F50:  MOVWF  FF7
02F52:  MOVLW  00
02F54:  MOVWF  FF8
02F56:  MOVLW  14
02F58:  MOVLB  A
02F5A:  MOVWF  x67
02F5C:  MOVLB  0
02F5E:  CALL   1DF6
02F62:  MOVFF  14F,AC8
02F66:  MOVLW  37
02F68:  MOVLB  A
02F6A:  MOVWF  xC9
02F6C:  MOVLB  0
02F6E:  CALL   200A
02F72:  MOVFF  14E,AC8
02F76:  MOVLW  37
02F78:  MOVLB  A
02F7A:  MOVWF  xC9
02F7C:  MOVLB  0
02F7E:  CALL   200A
02F82:  MOVFF  14D,AC8
02F86:  MOVLW  37
02F88:  MOVLB  A
02F8A:  MOVWF  xC9
02F8C:  MOVLB  0
02F8E:  CALL   200A
02F92:  MOVFF  14C,AC8
02F96:  MOVLW  37
02F98:  MOVLB  A
02F9A:  MOVWF  xC9
02F9C:  MOVLB  0
02F9E:  CALL   200A
02FA2:  MOVLW  0D
02FA4:  BTFSS  FA6.6
02FA6:  GOTO   2FA4
02FAA:  MOVLB  E
02FAC:  MOVWF  xF9
02FAE:  MOVLW  0A
02FB0:  MOVLB  0
02FB2:  BTFSS  FA6.6
02FB4:  GOTO   2FB2
02FB8:  MOVLB  E
02FBA:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", flash_counter_table[FLASH_ID_IV1_HEADER].uncopied_counter);
02FBC:  MOVLW  E6
02FBE:  MOVWF  FF6
02FC0:  MOVLW  0F
02FC2:  MOVWF  FF7
02FC4:  MOVLW  00
02FC6:  MOVWF  FF8
02FC8:  MOVLW  0E
02FCA:  MOVLB  A
02FCC:  MOVWF  x67
02FCE:  MOVLB  0
02FD0:  CALL   1DF6
02FD4:  MOVFF  153,AC8
02FD8:  MOVLW  37
02FDA:  MOVLB  A
02FDC:  MOVWF  xC9
02FDE:  MOVLB  0
02FE0:  CALL   200A
02FE4:  MOVFF  152,AC8
02FE8:  MOVLW  37
02FEA:  MOVLB  A
02FEC:  MOVWF  xC9
02FEE:  MOVLB  0
02FF0:  CALL   200A
02FF4:  MOVFF  151,AC8
02FF8:  MOVLW  37
02FFA:  MOVLB  A
02FFC:  MOVWF  xC9
02FFE:  MOVLB  0
03000:  CALL   200A
03004:  MOVFF  150,AC8
03008:  MOVLW  37
0300A:  MOVLB  A
0300C:  MOVWF  xC9
0300E:  MOVLB  0
03010:  CALL   200A
03014:  MOVLW  0D
03016:  BTFSS  FA6.6
03018:  GOTO   3016
0301C:  MOVLB  E
0301E:  MOVWF  xF9
03020:  MOVLW  0A
03022:  MOVLB  0
03024:  BTFSS  FA6.6
03026:  GOTO   3024
0302A:  MOVLB  E
0302C:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", flash_counter_table[FLASH_ID_IV1_HEADER].reserve_counter1,flash_counter_table[FLASH_ID_IV1_HEADER].reserve_counter2);
0302E:  MOVLW  FC
03030:  MOVWF  FF6
03032:  MOVLW  0F
03034:  MOVWF  FF7
03036:  MOVLW  00
03038:  MOVWF  FF8
0303A:  MOVLW  0E
0303C:  MOVLB  A
0303E:  MOVWF  x67
03040:  MOVLB  0
03042:  CALL   1DF6
03046:  MOVFF  154,AC8
0304A:  MOVLW  37
0304C:  MOVLB  A
0304E:  MOVWF  xC9
03050:  MOVLB  0
03052:  CALL   200A
03056:  MOVLW  0E
03058:  MOVWF  FF6
0305A:  MOVLW  10
0305C:  MOVWF  FF7
0305E:  MOVLW  00
03060:  MOVWF  FF8
03062:  MOVLW  04
03064:  MOVLB  A
03066:  MOVWF  x67
03068:  MOVLB  0
0306A:  CALL   1DF6
0306E:  MOVFF  155,AC8
03072:  MOVLW  37
03074:  MOVLB  A
03076:  MOVWF  xC9
03078:  MOVLB  0
0307A:  CALL   200A
0307E:  MOVLW  0D
03080:  BTFSS  FA6.6
03082:  GOTO   3080
03086:  MOVLB  E
03088:  MOVWF  xF9
0308A:  MOVLW  0A
0308C:  MOVLB  0
0308E:  BTFSS  FA6.6
03090:  GOTO   308E
03094:  MOVLB  E
03096:  MOVWF  xF9
....................     fprintf(PC, "\tIV1 DATA\tUsed\t\t0x%08LX\r\n", flash_counter_table[FLASH_ID_IV1_DATA].used_counter);
03098:  MOVLW  1A
0309A:  MOVWF  FF6
0309C:  MOVLW  10
0309E:  MOVWF  FF7
030A0:  MOVLW  00
030A2:  MOVWF  FF8
030A4:  MOVLW  12
030A6:  MOVLB  A
030A8:  MOVWF  x67
030AA:  MOVLB  0
030AC:  CALL   1DF6
030B0:  MOVFF  159,AC8
030B4:  MOVLW  37
030B6:  MOVLB  A
030B8:  MOVWF  xC9
030BA:  MOVLB  0
030BC:  CALL   200A
030C0:  MOVFF  158,AC8
030C4:  MOVLW  37
030C6:  MOVLB  A
030C8:  MOVWF  xC9
030CA:  MOVLB  0
030CC:  CALL   200A
030D0:  MOVFF  157,AC8
030D4:  MOVLW  37
030D6:  MOVLB  A
030D8:  MOVWF  xC9
030DA:  MOVLB  0
030DC:  CALL   200A
030E0:  MOVFF  156,AC8
030E4:  MOVLW  37
030E6:  MOVLB  A
030E8:  MOVWF  xC9
030EA:  MOVLB  0
030EC:  CALL   200A
030F0:  MOVLW  0D
030F2:  BTFSS  FA6.6
030F4:  GOTO   30F2
030F8:  MOVLB  E
030FA:  MOVWF  xF9
030FC:  MOVLW  0A
030FE:  MOVLB  0
03100:  BTFSS  FA6.6
03102:  GOTO   3100
03106:  MOVLB  E
03108:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", flash_counter_table[FLASH_ID_IV1_DATA].uncopied_counter);
0310A:  MOVLW  34
0310C:  MOVWF  FF6
0310E:  MOVLW  10
03110:  MOVWF  FF7
03112:  MOVLW  00
03114:  MOVWF  FF8
03116:  MOVLW  0E
03118:  MOVLB  A
0311A:  MOVWF  x67
0311C:  MOVLB  0
0311E:  CALL   1DF6
03122:  MOVFF  15D,AC8
03126:  MOVLW  37
03128:  MOVLB  A
0312A:  MOVWF  xC9
0312C:  MOVLB  0
0312E:  CALL   200A
03132:  MOVFF  15C,AC8
03136:  MOVLW  37
03138:  MOVLB  A
0313A:  MOVWF  xC9
0313C:  MOVLB  0
0313E:  CALL   200A
03142:  MOVFF  15B,AC8
03146:  MOVLW  37
03148:  MOVLB  A
0314A:  MOVWF  xC9
0314C:  MOVLB  0
0314E:  CALL   200A
03152:  MOVFF  15A,AC8
03156:  MOVLW  37
03158:  MOVLB  A
0315A:  MOVWF  xC9
0315C:  MOVLB  0
0315E:  CALL   200A
03162:  MOVLW  0D
03164:  BTFSS  FA6.6
03166:  GOTO   3164
0316A:  MOVLB  E
0316C:  MOVWF  xF9
0316E:  MOVLW  0A
03170:  MOVLB  0
03172:  BTFSS  FA6.6
03174:  GOTO   3172
03178:  MOVLB  E
0317A:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", flash_counter_table[FLASH_ID_IV1_DATA].reserve_counter1,flash_counter_table[FLASH_ID_IV1_DATA].reserve_counter2);
0317C:  MOVLW  4A
0317E:  MOVWF  FF6
03180:  MOVLW  10
03182:  MOVWF  FF7
03184:  MOVLW  00
03186:  MOVWF  FF8
03188:  MOVLW  0E
0318A:  MOVLB  A
0318C:  MOVWF  x67
0318E:  MOVLB  0
03190:  CALL   1DF6
03194:  MOVFF  15E,AC8
03198:  MOVLW  37
0319A:  MOVLB  A
0319C:  MOVWF  xC9
0319E:  MOVLB  0
031A0:  CALL   200A
031A4:  MOVLW  5C
031A6:  MOVWF  FF6
031A8:  MOVLW  10
031AA:  MOVWF  FF7
031AC:  MOVLW  00
031AE:  MOVWF  FF8
031B0:  MOVLW  04
031B2:  MOVLB  A
031B4:  MOVWF  x67
031B6:  MOVLB  0
031B8:  CALL   1DF6
031BC:  MOVFF  15F,AC8
031C0:  MOVLW  37
031C2:  MOVLB  A
031C4:  MOVWF  xC9
031C6:  MOVLB  0
031C8:  CALL   200A
031CC:  MOVLW  0D
031CE:  BTFSS  FA6.6
031D0:  GOTO   31CE
031D4:  MOVLB  E
031D6:  MOVWF  xF9
031D8:  MOVLW  0A
031DA:  MOVLB  0
031DC:  BTFSS  FA6.6
031DE:  GOTO   31DC
031E2:  MOVLB  E
031E4:  MOVWF  xF9
....................     fprintf(PC, "\tIV2 HEADER\tUsed\t\t0x%08LX\r\n", flash_counter_table[FLASH_ID_IV2_HEADER].used_counter);
031E6:  MOVLW  68
031E8:  MOVWF  FF6
031EA:  MOVLW  10
031EC:  MOVWF  FF7
031EE:  MOVLW  00
031F0:  MOVWF  FF8
031F2:  MOVLW  14
031F4:  MOVLB  A
031F6:  MOVWF  x67
031F8:  MOVLB  0
031FA:  CALL   1DF6
031FE:  MOVFF  163,AC8
03202:  MOVLW  37
03204:  MOVLB  A
03206:  MOVWF  xC9
03208:  MOVLB  0
0320A:  CALL   200A
0320E:  MOVFF  162,AC8
03212:  MOVLW  37
03214:  MOVLB  A
03216:  MOVWF  xC9
03218:  MOVLB  0
0321A:  CALL   200A
0321E:  MOVFF  161,AC8
03222:  MOVLW  37
03224:  MOVLB  A
03226:  MOVWF  xC9
03228:  MOVLB  0
0322A:  CALL   200A
0322E:  MOVFF  160,AC8
03232:  MOVLW  37
03234:  MOVLB  A
03236:  MOVWF  xC9
03238:  MOVLB  0
0323A:  CALL   200A
0323E:  MOVLW  0D
03240:  BTFSS  FA6.6
03242:  GOTO   3240
03246:  MOVLB  E
03248:  MOVWF  xF9
0324A:  MOVLW  0A
0324C:  MOVLB  0
0324E:  BTFSS  FA6.6
03250:  GOTO   324E
03254:  MOVLB  E
03256:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", flash_counter_table[FLASH_ID_IV2_HEADER].uncopied_counter);
03258:  MOVLW  84
0325A:  MOVWF  FF6
0325C:  MOVLW  10
0325E:  MOVWF  FF7
03260:  MOVLW  00
03262:  MOVWF  FF8
03264:  MOVLW  0E
03266:  MOVLB  A
03268:  MOVWF  x67
0326A:  MOVLB  0
0326C:  CALL   1DF6
03270:  MOVFF  167,AC8
03274:  MOVLW  37
03276:  MOVLB  A
03278:  MOVWF  xC9
0327A:  MOVLB  0
0327C:  CALL   200A
03280:  MOVFF  166,AC8
03284:  MOVLW  37
03286:  MOVLB  A
03288:  MOVWF  xC9
0328A:  MOVLB  0
0328C:  CALL   200A
03290:  MOVFF  165,AC8
03294:  MOVLW  37
03296:  MOVLB  A
03298:  MOVWF  xC9
0329A:  MOVLB  0
0329C:  CALL   200A
032A0:  MOVFF  164,AC8
032A4:  MOVLW  37
032A6:  MOVLB  A
032A8:  MOVWF  xC9
032AA:  MOVLB  0
032AC:  CALL   200A
032B0:  MOVLW  0D
032B2:  BTFSS  FA6.6
032B4:  GOTO   32B2
032B8:  MOVLB  E
032BA:  MOVWF  xF9
032BC:  MOVLW  0A
032BE:  MOVLB  0
032C0:  BTFSS  FA6.6
032C2:  GOTO   32C0
032C6:  MOVLB  E
032C8:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", flash_counter_table[FLASH_ID_IV2_HEADER].reserve_counter1,flash_counter_table[FLASH_ID_IV2_HEADER].reserve_counter2);
032CA:  MOVLW  9A
032CC:  MOVWF  FF6
032CE:  MOVLW  10
032D0:  MOVWF  FF7
032D2:  MOVLW  00
032D4:  MOVWF  FF8
032D6:  MOVLW  0E
032D8:  MOVLB  A
032DA:  MOVWF  x67
032DC:  MOVLB  0
032DE:  CALL   1DF6
032E2:  MOVFF  168,AC8
032E6:  MOVLW  37
032E8:  MOVLB  A
032EA:  MOVWF  xC9
032EC:  MOVLB  0
032EE:  CALL   200A
032F2:  MOVLW  AC
032F4:  MOVWF  FF6
032F6:  MOVLW  10
032F8:  MOVWF  FF7
032FA:  MOVLW  00
032FC:  MOVWF  FF8
032FE:  MOVLW  04
03300:  MOVLB  A
03302:  MOVWF  x67
03304:  MOVLB  0
03306:  CALL   1DF6
0330A:  MOVFF  169,AC8
0330E:  MOVLW  37
03310:  MOVLB  A
03312:  MOVWF  xC9
03314:  MOVLB  0
03316:  CALL   200A
0331A:  MOVLW  0D
0331C:  BTFSS  FA6.6
0331E:  GOTO   331C
03322:  MOVLB  E
03324:  MOVWF  xF9
03326:  MOVLW  0A
03328:  MOVLB  0
0332A:  BTFSS  FA6.6
0332C:  GOTO   332A
03330:  MOVLB  E
03332:  MOVWF  xF9
....................     fprintf(PC, "\tIV2 DATA\tUsed\t\t0x%08LX\r\n", flash_counter_table[FLASH_ID_IV2_DATA].used_counter);
03334:  MOVLW  B8
03336:  MOVWF  FF6
03338:  MOVLW  10
0333A:  MOVWF  FF7
0333C:  MOVLW  00
0333E:  MOVWF  FF8
03340:  MOVLW  12
03342:  MOVLB  A
03344:  MOVWF  x67
03346:  MOVLB  0
03348:  CALL   1DF6
0334C:  MOVFF  16D,AC8
03350:  MOVLW  37
03352:  MOVLB  A
03354:  MOVWF  xC9
03356:  MOVLB  0
03358:  CALL   200A
0335C:  MOVFF  16C,AC8
03360:  MOVLW  37
03362:  MOVLB  A
03364:  MOVWF  xC9
03366:  MOVLB  0
03368:  CALL   200A
0336C:  MOVFF  16B,AC8
03370:  MOVLW  37
03372:  MOVLB  A
03374:  MOVWF  xC9
03376:  MOVLB  0
03378:  CALL   200A
0337C:  MOVFF  16A,AC8
03380:  MOVLW  37
03382:  MOVLB  A
03384:  MOVWF  xC9
03386:  MOVLB  0
03388:  CALL   200A
0338C:  MOVLW  0D
0338E:  BTFSS  FA6.6
03390:  GOTO   338E
03394:  MOVLB  E
03396:  MOVWF  xF9
03398:  MOVLW  0A
0339A:  MOVLB  0
0339C:  BTFSS  FA6.6
0339E:  GOTO   339C
033A2:  MOVLB  E
033A4:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", flash_counter_table[FLASH_ID_IV2_DATA].uncopied_counter);
033A6:  MOVLW  D2
033A8:  MOVWF  FF6
033AA:  MOVLW  10
033AC:  MOVWF  FF7
033AE:  MOVLW  00
033B0:  MOVWF  FF8
033B2:  MOVLW  0E
033B4:  MOVLB  A
033B6:  MOVWF  x67
033B8:  MOVLB  0
033BA:  CALL   1DF6
033BE:  MOVFF  171,AC8
033C2:  MOVLW  37
033C4:  MOVLB  A
033C6:  MOVWF  xC9
033C8:  MOVLB  0
033CA:  CALL   200A
033CE:  MOVFF  170,AC8
033D2:  MOVLW  37
033D4:  MOVLB  A
033D6:  MOVWF  xC9
033D8:  MOVLB  0
033DA:  CALL   200A
033DE:  MOVFF  16F,AC8
033E2:  MOVLW  37
033E4:  MOVLB  A
033E6:  MOVWF  xC9
033E8:  MOVLB  0
033EA:  CALL   200A
033EE:  MOVFF  16E,AC8
033F2:  MOVLW  37
033F4:  MOVLB  A
033F6:  MOVWF  xC9
033F8:  MOVLB  0
033FA:  CALL   200A
033FE:  MOVLW  0D
03400:  BTFSS  FA6.6
03402:  GOTO   3400
03406:  MOVLB  E
03408:  MOVWF  xF9
0340A:  MOVLW  0A
0340C:  MOVLB  0
0340E:  BTFSS  FA6.6
03410:  GOTO   340E
03414:  MOVLB  E
03416:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", flash_counter_table[FLASH_ID_IV2_DATA].reserve_counter1,flash_counter_table[FLASH_ID_IV2_DATA].reserve_counter2);
03418:  MOVLW  E8
0341A:  MOVWF  FF6
0341C:  MOVLW  10
0341E:  MOVWF  FF7
03420:  MOVLW  00
03422:  MOVWF  FF8
03424:  MOVLW  0E
03426:  MOVLB  A
03428:  MOVWF  x67
0342A:  MOVLB  0
0342C:  CALL   1DF6
03430:  MOVFF  172,AC8
03434:  MOVLW  37
03436:  MOVLB  A
03438:  MOVWF  xC9
0343A:  MOVLB  0
0343C:  CALL   200A
03440:  MOVLW  FA
03442:  MOVWF  FF6
03444:  MOVLW  10
03446:  MOVWF  FF7
03448:  MOVLW  00
0344A:  MOVWF  FF8
0344C:  MOVLW  04
0344E:  MOVLB  A
03450:  MOVWF  x67
03452:  MOVLB  0
03454:  CALL   1DF6
03458:  MOVFF  173,AC8
0345C:  MOVLW  37
0345E:  MOVLB  A
03460:  MOVWF  xC9
03462:  MOVLB  0
03464:  CALL   200A
03468:  MOVLW  0D
0346A:  BTFSS  FA6.6
0346C:  GOTO   346A
03470:  MOVLB  E
03472:  MOVWF  xF9
03474:  MOVLW  0A
03476:  MOVLB  0
03478:  BTFSS  FA6.6
0347A:  GOTO   3478
0347E:  MOVLB  E
03480:  MOVWF  xF9
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
03482:  MOVLW  06
03484:  MOVWF  FF6
03486:  MOVLW  11
03488:  MOVWF  FF7
0348A:  MOVLW  00
0348C:  MOVWF  FF8
0348E:  MOVLB  0
03490:  CALL   1DC0
03494:  GOTO   36D4 (RETURN)
.................... }
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size)
.................... {
....................     // パケット境界チェック
....................     if (flash_counter_table[id].reserve_counter1 + size > PACKET_SIZE-1) {
*
042C8:  MOVLB  A
042CA:  MOVF   xC1,W
042CC:  MULLW  0A
042CE:  MOVF   FF3,W
042D0:  MOVLB  B
042D2:  CLRF   x59
042D4:  MOVWF  x58
042D6:  MOVLW  08
042D8:  ADDWF  x58,W
042DA:  MOVWF  01
042DC:  MOVLW  00
042DE:  ADDWFC x59,W
042E0:  MOVWF  03
042E2:  MOVF   01,W
042E4:  ADDLW  2E
042E6:  MOVWF  FE9
042E8:  MOVLW  01
042EA:  ADDWFC 03,W
042EC:  MOVWF  FEA
042EE:  MOVF   FEF,W
042F0:  MOVLB  A
042F2:  ADDWF  xC4,W
042F4:  MOVLB  B
042F6:  MOVWF  x58
042F8:  MOVLW  00
042FA:  MOVLB  A
042FC:  ADDWFC xC5,W
042FE:  MOVLB  B
04300:  MOVWF  x59
04302:  MOVF   x59,F
04304:  BTFSC  FD8.2
04306:  BRA    430E
04308:  MOVLB  0
0430A:  GOTO   4322
0430E:  MOVLB  0
04310:  MOVLB  B
04312:  MOVF   x58,W
04314:  SUBLW  3F
04316:  BTFSS  FD8.0
04318:  BRA    4320
0431A:  MOVLB  0
0431C:  GOTO   45D4
04320:  MOVLB  0
....................         unsigned int8 blank_size = PACKET_SIZE - 1 - flash_counter_table[id].reserve_counter1;
....................         // fprintf(PC, "0x%02X", blank_size);
....................         unsigned int8 blank_data[PACKET_SIZE];
04322:  MOVLB  A
04324:  MOVF   xC1,W
04326:  MULLW  0A
04328:  MOVF   FF3,W
0432A:  MOVLB  B
0432C:  CLRF   x59
0432E:  MOVWF  x58
04330:  MOVLW  08
04332:  ADDWF  x58,W
04334:  MOVWF  01
04336:  MOVLW  00
04338:  ADDWFC x59,W
0433A:  MOVWF  03
0433C:  MOVF   01,W
0433E:  ADDLW  2E
04340:  MOVWF  FE9
04342:  MOVLW  01
04344:  ADDWFC 03,W
04346:  MOVWF  FEA
04348:  MOVF   FEF,W
0434A:  XORLW  FF
0434C:  ADDLW  40
0434E:  MOVLB  A
04350:  MOVWF  xC6
04352:  MOVLB  0
....................         memset(blank_data, 0, blank_size);
04354:  MOVLW  0A
04356:  MOVWF  FEA
04358:  MOVLW  C7
0435A:  MOVWF  FE9
0435C:  CLRF   00
0435E:  CLRF   02
04360:  MOVFF  AC6,01
04364:  CALL   29EA
.................... 
....................         // アドレス再計算
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + flash_counter_table[id].used_counter;
04368:  MOVLB  A
0436A:  MOVF   xC1,W
0436C:  MULLW  0C
0436E:  MOVF   FF3,W
04370:  MOVLB  B
04372:  CLRF   x59
04374:  MOVWF  x58
04376:  MOVFF  B59,03
0437A:  MOVF   x58,W
0437C:  MOVLB  0
0437E:  CALL   0132
04382:  MOVWF  00
04384:  TBLRD*+
04386:  MOVFF  FF5,01
0438A:  TBLRD*+
0438C:  MOVFF  FF5,02
04390:  TBLRD*+
04392:  MOVFF  FF5,03
04396:  MOVFF  03,B5D
0439A:  MOVFF  02,B5C
0439E:  MOVFF  01,B5B
043A2:  MOVFF  00,B5A
043A6:  MOVLB  A
043A8:  MOVF   xC1,W
043AA:  MULLW  0A
043AC:  MOVF   FF3,W
043AE:  MOVLB  B
043B0:  CLRF   x5F
043B2:  MOVWF  x5E
043B4:  MOVLW  2E
043B6:  ADDWF  x5E,W
043B8:  MOVWF  FE9
043BA:  MOVLW  01
043BC:  ADDWFC x5F,W
043BE:  MOVWF  FEA
043C0:  MOVFF  FEF,00
043C4:  MOVFF  FEC,01
043C8:  MOVFF  FEC,02
043CC:  MOVFF  FEC,03
043D0:  MOVF   FED,F
043D2:  MOVF   FED,F
043D4:  MOVF   FED,F
043D6:  MOVF   00,W
043D8:  ADDWF  x5A,W
043DA:  MOVWF  x07
043DC:  MOVF   01,W
043DE:  ADDWFC x5B,W
043E0:  MOVWF  x08
043E2:  MOVF   02,W
043E4:  ADDWFC x5C,W
043E6:  MOVWF  x09
043E8:  MOVF   03,W
043EA:  ADDWFC x5D,W
043EC:  MOVWF  x0A
.................... 
....................         // 未使用部分を 0 埋め
....................         write_data_bytes(mis_fm, write_address, blank_data, blank_size);
043EE:  MOVFF  115,B9F
043F2:  MOVFF  114,B9E
043F6:  MOVFF  113,B9D
043FA:  MOVFF  112,B9C
043FE:  MOVFF  B0A,BA3
04402:  MOVFF  B09,BA2
04406:  MOVFF  B08,BA1
0440A:  MOVFF  B07,BA0
0440E:  MOVLW  0A
04410:  MOVWF  xA5
04412:  MOVLW  C7
04414:  MOVWF  xA4
04416:  CLRF   xA7
04418:  MOVFF  AC6,BA6
0441C:  MOVLB  0
0441E:  CALL   39FE
.................... 
....................         // CRC 計算（本体部分だけ読む）
....................         unsigned int8 packet_data[PACKET_SIZE - 1];
....................         unsigned int32 read_address = write_address + blank_size - PACKET_SIZE - 1;
04422:  MOVLB  A
04424:  MOVF   xC6,W
04426:  MOVLB  B
04428:  ADDWF  x07,W
0442A:  MOVWF  x58
0442C:  MOVLW  00
0442E:  ADDWFC x08,W
04430:  MOVWF  x59
04432:  MOVLW  00
04434:  ADDWFC x09,W
04436:  MOVWF  x5A
04438:  MOVLW  00
0443A:  ADDWFC x0A,W
0443C:  MOVWF  x5B
0443E:  MOVLW  40
04440:  SUBWF  x58,F
04442:  MOVLW  00
04444:  SUBWFB x59,F
04446:  MOVLW  00
04448:  SUBWFB x5A,F
0444A:  MOVLW  00
0444C:  SUBWFB x5B,F
0444E:  MOVLW  01
04450:  SUBWF  x58,W
04452:  MOVWF  x4A
04454:  MOVLW  00
04456:  SUBWFB x59,W
04458:  MOVWF  x4B
0445A:  MOVLW  00
0445C:  SUBWFB x5A,W
0445E:  MOVWF  x4C
04460:  MOVLW  00
04462:  SUBWFB x5B,W
04464:  MOVWF  x4D
....................         read_data_bytes(mis_fm, read_address, packet_data, PACKET_SIZE - 1);
04466:  MOVFF  115,B5B
0446A:  MOVFF  114,B5A
0446E:  MOVFF  113,B59
04472:  MOVFF  112,B58
04476:  MOVFF  B4D,B5F
0447A:  MOVFF  B4C,B5E
0447E:  MOVFF  B4B,B5D
04482:  MOVFF  B4A,B5C
04486:  MOVLW  0B
04488:  MOVWF  x61
0448A:  MOVLW  0B
0448C:  MOVWF  x60
0448E:  CLRF   x65
04490:  CLRF   x64
04492:  CLRF   x63
04494:  MOVLW  3F
04496:  MOVWF  x62
04498:  MOVLB  0
0449A:  CALL   2A0E
....................         unsigned int8 crc = calc_crc8(packet_data, PACKET_SIZE - 1);
0449E:  MOVLW  0B
044A0:  MOVLB  B
044A2:  MOVWF  xE7
044A4:  MOVLW  0B
044A6:  MOVWF  xE6
044A8:  MOVLW  3F
044AA:  MOVWF  xE8
044AC:  MOVLB  0
044AE:  CALL   2C22
044B2:  MOVFF  01,B4E
....................         // fprintf(PC, "0x%02X", crc);
....................         // CRC 書き込み
....................         write_address += blank_size;
044B6:  MOVLB  A
044B8:  MOVF   xC6,W
044BA:  MOVLB  B
044BC:  ADDWF  x07,F
044BE:  MOVLW  00
044C0:  ADDWFC x08,F
044C2:  MOVLW  00
044C4:  ADDWFC x09,F
044C6:  MOVLW  00
044C8:  ADDWFC x0A,F
....................         write_data_bytes(mis_fm, write_address, &crc, 1);
044CA:  MOVFF  115,B9F
044CE:  MOVFF  114,B9E
044D2:  MOVFF  113,B9D
044D6:  MOVFF  112,B9C
044DA:  MOVFF  B0A,BA3
044DE:  MOVFF  B09,BA2
044E2:  MOVFF  B08,BA1
044E6:  MOVFF  B07,BA0
044EA:  MOVLW  0B
044EC:  MOVWF  xA5
044EE:  MOVLW  4E
044F0:  MOVWF  xA4
044F2:  CLRF   xA7
044F4:  MOVLW  01
044F6:  MOVWF  xA6
044F8:  MOVLB  0
044FA:  CALL   39FE
.................... 
....................         // カウンタ更新
....................         flash_counter_table[id].used_counter     += blank_size + 1;
044FE:  MOVLB  A
04500:  MOVF   xC1,W
04502:  MULLW  0A
04504:  MOVF   FF3,W
04506:  MOVLB  B
04508:  CLRF   x59
0450A:  MOVWF  x58
0450C:  MOVLW  2E
0450E:  ADDWF  x58,W
04510:  MOVWF  FE9
04512:  MOVLW  01
04514:  ADDWFC x59,W
04516:  MOVWF  FEA
04518:  MOVLW  01
0451A:  MOVLB  A
0451C:  ADDWF  xC6,W
0451E:  ADDWF  FEF,W
04520:  MOVWF  00
04522:  MOVLW  00
04524:  ADDWFC FEC,W
04526:  MOVWF  01
04528:  MOVLW  00
0452A:  ADDWFC FEC,W
0452C:  MOVWF  02
0452E:  MOVLW  00
04530:  ADDWFC FEC,W
04532:  MOVWF  03
04534:  MOVF   FED,F
04536:  MOVF   FED,F
04538:  MOVF   FED,F
0453A:  MOVFF  00,FEF
0453E:  MOVFF  01,FEC
04542:  MOVFF  02,FEC
04546:  MOVFF  03,FEC
0454A:  MOVF   FED,F
0454C:  MOVF   FED,F
0454E:  MOVF   FED,F
....................         flash_counter_table[id].uncopied_counter += blank_size + 1;
04550:  MOVF   xC1,W
04552:  MULLW  0A
04554:  MOVF   FF3,W
04556:  MOVLB  B
04558:  CLRF   x59
0455A:  MOVWF  x58
0455C:  MOVLW  04
0455E:  ADDWF  x58,W
04560:  MOVWF  01
04562:  MOVLW  00
04564:  ADDWFC x59,W
04566:  MOVWF  03
04568:  MOVF   01,W
0456A:  ADDLW  2E
0456C:  MOVWF  FE9
0456E:  MOVLW  01
04570:  ADDWFC 03,W
04572:  MOVWF  FEA
04574:  MOVLW  01
04576:  MOVLB  A
04578:  ADDWF  xC6,W
0457A:  ADDWF  FEF,W
0457C:  MOVWF  00
0457E:  MOVLW  00
04580:  ADDWFC FEC,W
04582:  MOVWF  01
04584:  MOVLW  00
04586:  ADDWFC FEC,W
04588:  MOVWF  02
0458A:  MOVLW  00
0458C:  ADDWFC FEC,W
0458E:  MOVWF  03
04590:  MOVF   FED,F
04592:  MOVF   FED,F
04594:  MOVF   FED,F
04596:  MOVFF  00,FEF
0459A:  MOVFF  01,FEC
0459E:  MOVFF  02,FEC
045A2:  MOVFF  03,FEC
045A6:  MOVF   FED,F
045A8:  MOVF   FED,F
045AA:  MOVF   FED,F
....................         flash_counter_table[id].reserve_counter1  = 0;
045AC:  MOVF   xC1,W
045AE:  MULLW  0A
045B0:  MOVF   FF3,W
045B2:  MOVLB  B
045B4:  CLRF   x59
045B6:  MOVWF  x58
045B8:  MOVLW  08
045BA:  ADDWF  x58,W
045BC:  MOVWF  01
045BE:  MOVLW  00
045C0:  ADDWFC x59,W
045C2:  MOVWF  03
045C4:  MOVF   01,W
045C6:  ADDLW  2E
045C8:  MOVWF  FE9
045CA:  MOVLW  01
045CC:  ADDWFC 03,W
045CE:  MOVWF  FEA
045D0:  CLRF   FEF
045D2:  MOVLB  0
....................     }
....................     if (flash_counter_table[id].reserve_counter1 + size == PACKET_SIZE-1){
045D4:  MOVLB  A
045D6:  MOVF   xC1,W
045D8:  MULLW  0A
045DA:  MOVF   FF3,W
045DC:  MOVLB  B
045DE:  CLRF   x59
045E0:  MOVWF  x58
045E2:  MOVLW  08
045E4:  ADDWF  x58,W
045E6:  MOVWF  01
045E8:  MOVLW  00
045EA:  ADDWFC x59,W
045EC:  MOVWF  03
045EE:  MOVF   01,W
045F0:  ADDLW  2E
045F2:  MOVWF  FE9
045F4:  MOVLW  01
045F6:  ADDWFC 03,W
045F8:  MOVWF  FEA
045FA:  MOVF   FEF,W
045FC:  MOVLB  A
045FE:  ADDWF  xC4,W
04600:  MOVLB  B
04602:  MOVWF  x58
04604:  MOVLW  00
04606:  MOVLB  A
04608:  ADDWFC xC5,W
0460A:  MOVLB  B
0460C:  MOVWF  x59
0460E:  MOVF   x58,W
04610:  SUBLW  3F
04612:  BTFSC  FD8.2
04614:  BRA    461C
04616:  MOVLB  0
04618:  GOTO   493E
0461C:  MOVLB  0
0461E:  MOVLB  B
04620:  MOVF   x59,F
04622:  BTFSC  FD8.2
04624:  BRA    462C
04626:  MOVLB  0
04628:  GOTO   493E
0462C:  MOVLB  0
....................         // データ書き込み
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + flash_counter_table[id].used_counter;
0462E:  MOVLB  A
04630:  MOVF   xC1,W
04632:  MULLW  0C
04634:  MOVF   FF3,W
04636:  MOVLB  B
04638:  CLRF   x59
0463A:  MOVWF  x58
0463C:  MOVFF  B59,03
04640:  MOVF   x58,W
04642:  MOVLB  0
04644:  CALL   0132
04648:  MOVWF  00
0464A:  TBLRD*+
0464C:  MOVFF  FF5,01
04650:  TBLRD*+
04652:  MOVFF  FF5,02
04656:  TBLRD*+
04658:  MOVFF  FF5,03
0465C:  MOVFF  03,B5D
04660:  MOVFF  02,B5C
04664:  MOVFF  01,B5B
04668:  MOVFF  00,B5A
0466C:  MOVLB  A
0466E:  MOVF   xC1,W
04670:  MULLW  0A
04672:  MOVF   FF3,W
04674:  MOVLB  B
04676:  CLRF   x5F
04678:  MOVWF  x5E
0467A:  MOVLW  2E
0467C:  ADDWF  x5E,W
0467E:  MOVWF  FE9
04680:  MOVLW  01
04682:  ADDWFC x5F,W
04684:  MOVWF  FEA
04686:  MOVFF  FEF,00
0468A:  MOVFF  FEC,01
0468E:  MOVFF  FEC,02
04692:  MOVFF  FEC,03
04696:  MOVF   FED,F
04698:  MOVF   FED,F
0469A:  MOVF   FED,F
0469C:  MOVF   00,W
0469E:  ADDWF  x5A,W
046A0:  MOVWF  x4F
046A2:  MOVF   01,W
046A4:  ADDWFC x5B,W
046A6:  MOVWF  x50
046A8:  MOVF   02,W
046AA:  ADDWFC x5C,W
046AC:  MOVWF  x51
046AE:  MOVF   03,W
046B0:  ADDWFC x5D,W
046B2:  MOVWF  x52
046B4:  MOVLB  0
....................         write_data_bytes(mis_fm, write_address, data_ptr, size);
046B6:  MOVFF  115,B9F
046BA:  MOVFF  114,B9E
046BE:  MOVFF  113,B9D
046C2:  MOVFF  112,B9C
046C6:  MOVFF  B52,BA3
046CA:  MOVFF  B51,BA2
046CE:  MOVFF  B50,BA1
046D2:  MOVFF  B4F,BA0
046D6:  MOVFF  AC3,BA5
046DA:  MOVFF  AC2,BA4
046DE:  MOVFF  AC5,BA7
046E2:  MOVFF  AC4,BA6
046E6:  CALL   39FE
....................         flash_counter_table[id].used_counter     += size;
046EA:  MOVLB  A
046EC:  MOVF   xC1,W
046EE:  MULLW  0A
046F0:  MOVF   FF3,W
046F2:  MOVLB  B
046F4:  CLRF   x59
046F6:  MOVWF  x58
046F8:  MOVLW  2E
046FA:  ADDWF  x58,W
046FC:  MOVWF  FE9
046FE:  MOVLW  01
04700:  ADDWFC x59,W
04702:  MOVWF  FEA
04704:  MOVLB  A
04706:  MOVF   xC4,W
04708:  ADDWF  FEF,W
0470A:  MOVWF  00
0470C:  MOVF   xC5,W
0470E:  ADDWFC FEC,W
04710:  MOVWF  01
04712:  MOVLW  00
04714:  ADDWFC FEC,W
04716:  MOVWF  02
04718:  MOVLW  00
0471A:  ADDWFC FEC,W
0471C:  MOVWF  03
0471E:  MOVF   FED,F
04720:  MOVF   FED,F
04722:  MOVF   FED,F
04724:  MOVFF  00,FEF
04728:  MOVFF  01,FEC
0472C:  MOVFF  02,FEC
04730:  MOVFF  03,FEC
04734:  MOVF   FED,F
04736:  MOVF   FED,F
04738:  MOVF   FED,F
....................         flash_counter_table[id].uncopied_counter += size;
0473A:  MOVF   xC1,W
0473C:  MULLW  0A
0473E:  MOVF   FF3,W
04740:  MOVLB  B
04742:  CLRF   x59
04744:  MOVWF  x58
04746:  MOVLW  04
04748:  ADDWF  x58,W
0474A:  MOVWF  01
0474C:  MOVLW  00
0474E:  ADDWFC x59,W
04750:  MOVWF  03
04752:  MOVF   01,W
04754:  ADDLW  2E
04756:  MOVWF  FE9
04758:  MOVLW  01
0475A:  ADDWFC 03,W
0475C:  MOVWF  FEA
0475E:  MOVLB  A
04760:  MOVF   xC4,W
04762:  ADDWF  FEF,W
04764:  MOVWF  00
04766:  MOVF   xC5,W
04768:  ADDWFC FEC,W
0476A:  MOVWF  01
0476C:  MOVLW  00
0476E:  ADDWFC FEC,W
04770:  MOVWF  02
04772:  MOVLW  00
04774:  ADDWFC FEC,W
04776:  MOVWF  03
04778:  MOVF   FED,F
0477A:  MOVF   FED,F
0477C:  MOVF   FED,F
0477E:  MOVFF  00,FEF
04782:  MOVFF  01,FEC
04786:  MOVFF  02,FEC
0478A:  MOVFF  03,FEC
0478E:  MOVF   FED,F
04790:  MOVF   FED,F
04792:  MOVF   FED,F
....................         unsigned int8 crc = calc_crc8(data_ptr, size);
04794:  MOVFF  AC3,BE7
04798:  MOVFF  AC2,BE6
0479C:  MOVFF  AC4,BE8
047A0:  MOVLB  0
047A2:  CALL   2C22
047A6:  MOVFF  01,B53
.................... 
....................         // CRC 書き込み
....................         write_address = MISF_ADDRESS_TABLE[id].start + flash_counter_table[id].used_counter;
047AA:  MOVLB  A
047AC:  MOVF   xC1,W
047AE:  MULLW  0C
047B0:  MOVF   FF3,W
047B2:  MOVLB  B
047B4:  CLRF   x59
047B6:  MOVWF  x58
047B8:  MOVFF  B59,03
047BC:  MOVF   x58,W
047BE:  MOVLB  0
047C0:  CALL   0132
047C4:  MOVWF  00
047C6:  TBLRD*+
047C8:  MOVFF  FF5,01
047CC:  TBLRD*+
047CE:  MOVFF  FF5,02
047D2:  TBLRD*+
047D4:  MOVFF  FF5,03
047D8:  MOVFF  03,B5D
047DC:  MOVFF  02,B5C
047E0:  MOVFF  01,B5B
047E4:  MOVFF  00,B5A
047E8:  MOVLB  A
047EA:  MOVF   xC1,W
047EC:  MULLW  0A
047EE:  MOVF   FF3,W
047F0:  MOVLB  B
047F2:  CLRF   x5F
047F4:  MOVWF  x5E
047F6:  MOVLW  2E
047F8:  ADDWF  x5E,W
047FA:  MOVWF  FE9
047FC:  MOVLW  01
047FE:  ADDWFC x5F,W
04800:  MOVWF  FEA
04802:  MOVFF  FEF,00
04806:  MOVFF  FEC,01
0480A:  MOVFF  FEC,02
0480E:  MOVFF  FEC,03
04812:  MOVF   FED,F
04814:  MOVF   FED,F
04816:  MOVF   FED,F
04818:  MOVF   00,W
0481A:  ADDWF  x5A,W
0481C:  MOVWF  x4F
0481E:  MOVF   01,W
04820:  ADDWFC x5B,W
04822:  MOVWF  x50
04824:  MOVF   02,W
04826:  ADDWFC x5C,W
04828:  MOVWF  x51
0482A:  MOVF   03,W
0482C:  ADDWFC x5D,W
0482E:  MOVWF  x52
....................         write_data_bytes(mis_fm, write_address, &crc, 1);
04830:  MOVFF  115,B9F
04834:  MOVFF  114,B9E
04838:  MOVFF  113,B9D
0483C:  MOVFF  112,B9C
04840:  MOVFF  B52,BA3
04844:  MOVFF  B51,BA2
04848:  MOVFF  B50,BA1
0484C:  MOVFF  B4F,BA0
04850:  MOVLW  0B
04852:  MOVWF  xA5
04854:  MOVLW  53
04856:  MOVWF  xA4
04858:  CLRF   xA7
0485A:  MOVLW  01
0485C:  MOVWF  xA6
0485E:  MOVLB  0
04860:  CALL   39FE
.................... 
....................         // カウンタ更新
....................         flash_counter_table[id].used_counter     += 1;
04864:  MOVLB  A
04866:  MOVF   xC1,W
04868:  MULLW  0A
0486A:  MOVF   FF3,W
0486C:  MOVLB  B
0486E:  CLRF   x59
04870:  MOVWF  x58
04872:  MOVLW  2E
04874:  ADDWF  x58,W
04876:  MOVWF  FE9
04878:  MOVLW  01
0487A:  ADDWFC x59,W
0487C:  MOVWF  FEA
0487E:  MOVLW  01
04880:  ADDWF  FEF,W
04882:  MOVWF  00
04884:  MOVLW  00
04886:  ADDWFC FEC,W
04888:  MOVWF  01
0488A:  MOVLW  00
0488C:  ADDWFC FEC,W
0488E:  MOVWF  02
04890:  MOVLW  00
04892:  ADDWFC FEC,W
04894:  MOVWF  03
04896:  MOVF   FED,F
04898:  MOVF   FED,F
0489A:  MOVF   FED,F
0489C:  MOVFF  00,FEF
048A0:  MOVFF  01,FEC
048A4:  MOVFF  02,FEC
048A8:  MOVFF  03,FEC
048AC:  MOVF   FED,F
048AE:  MOVF   FED,F
048B0:  MOVF   FED,F
....................         flash_counter_table[id].uncopied_counter += 1;
048B2:  MOVLB  A
048B4:  MOVF   xC1,W
048B6:  MULLW  0A
048B8:  MOVF   FF3,W
048BA:  MOVLB  B
048BC:  CLRF   x59
048BE:  MOVWF  x58
048C0:  MOVLW  04
048C2:  ADDWF  x58,W
048C4:  MOVWF  01
048C6:  MOVLW  00
048C8:  ADDWFC x59,W
048CA:  MOVWF  03
048CC:  MOVF   01,W
048CE:  ADDLW  2E
048D0:  MOVWF  FE9
048D2:  MOVLW  01
048D4:  ADDWFC 03,W
048D6:  MOVWF  FEA
048D8:  MOVLW  01
048DA:  ADDWF  FEF,W
048DC:  MOVWF  00
048DE:  MOVLW  00
048E0:  ADDWFC FEC,W
048E2:  MOVWF  01
048E4:  MOVLW  00
048E6:  ADDWFC FEC,W
048E8:  MOVWF  02
048EA:  MOVLW  00
048EC:  ADDWFC FEC,W
048EE:  MOVWF  03
048F0:  MOVF   FED,F
048F2:  MOVF   FED,F
048F4:  MOVF   FED,F
048F6:  MOVFF  00,FEF
048FA:  MOVFF  01,FEC
048FE:  MOVFF  02,FEC
04902:  MOVFF  03,FEC
04906:  MOVF   FED,F
04908:  MOVF   FED,F
0490A:  MOVF   FED,F
....................         flash_counter_table[id].reserve_counter1  = 0;
0490C:  MOVLB  A
0490E:  MOVF   xC1,W
04910:  MULLW  0A
04912:  MOVF   FF3,W
04914:  MOVLB  B
04916:  CLRF   x59
04918:  MOVWF  x58
0491A:  MOVLW  08
0491C:  ADDWF  x58,W
0491E:  MOVWF  01
04920:  MOVLW  00
04922:  ADDWFC x59,W
04924:  MOVWF  03
04926:  MOVF   01,W
04928:  ADDLW  2E
0492A:  MOVWF  FE9
0492C:  MOVLW  01
0492E:  ADDWFC 03,W
04930:  MOVWF  FEA
04932:  CLRF   FEF
.................... 
....................         // アドレステーブル更新
....................         misf_update_address_area();
04934:  MOVLB  0
04936:  CALL   423A
....................         return;
0493A:  GOTO   4AE0
....................     }
.................... 
....................     // データ書き込み
....................     unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + flash_counter_table[id].used_counter;
0493E:  MOVLB  A
04940:  MOVF   xC1,W
04942:  MULLW  0C
04944:  MOVF   FF3,W
04946:  MOVLB  B
04948:  CLRF   x59
0494A:  MOVWF  x58
0494C:  MOVFF  B59,03
04950:  MOVF   x58,W
04952:  MOVLB  0
04954:  CALL   0132
04958:  MOVWF  00
0495A:  TBLRD*+
0495C:  MOVFF  FF5,01
04960:  TBLRD*+
04962:  MOVFF  FF5,02
04966:  TBLRD*+
04968:  MOVFF  FF5,03
0496C:  MOVFF  03,B5D
04970:  MOVFF  02,B5C
04974:  MOVFF  01,B5B
04978:  MOVFF  00,B5A
0497C:  MOVLB  A
0497E:  MOVF   xC1,W
04980:  MULLW  0A
04982:  MOVF   FF3,W
04984:  MOVLB  B
04986:  CLRF   x5F
04988:  MOVWF  x5E
0498A:  MOVLW  2E
0498C:  ADDWF  x5E,W
0498E:  MOVWF  FE9
04990:  MOVLW  01
04992:  ADDWFC x5F,W
04994:  MOVWF  FEA
04996:  MOVFF  FEF,00
0499A:  MOVFF  FEC,01
0499E:  MOVFF  FEC,02
049A2:  MOVFF  FEC,03
049A6:  MOVF   FED,F
049A8:  MOVF   FED,F
049AA:  MOVF   FED,F
049AC:  MOVF   00,W
049AE:  ADDWF  x5A,W
049B0:  MOVWF  x54
049B2:  MOVF   01,W
049B4:  ADDWFC x5B,W
049B6:  MOVWF  x55
049B8:  MOVF   02,W
049BA:  ADDWFC x5C,W
049BC:  MOVWF  x56
049BE:  MOVF   03,W
049C0:  ADDWFC x5D,W
049C2:  MOVWF  x57
....................     write_data_bytes(mis_fm, write_address, data_ptr, size);
049C4:  MOVFF  115,B9F
049C8:  MOVFF  114,B9E
049CC:  MOVFF  113,B9D
049D0:  MOVFF  112,B9C
049D4:  MOVFF  B57,BA3
049D8:  MOVFF  B56,BA2
049DC:  MOVFF  B55,BA1
049E0:  MOVFF  B54,BA0
049E4:  MOVFF  AC3,BA5
049E8:  MOVFF  AC2,BA4
049EC:  MOVFF  AC5,BA7
049F0:  MOVFF  AC4,BA6
049F4:  MOVLB  0
049F6:  CALL   39FE
.................... 
....................     // カウンタ更新
....................     flash_counter_table[id].used_counter     += size;
049FA:  MOVLB  A
049FC:  MOVF   xC1,W
049FE:  MULLW  0A
04A00:  MOVF   FF3,W
04A02:  MOVLB  B
04A04:  CLRF   x59
04A06:  MOVWF  x58
04A08:  MOVLW  2E
04A0A:  ADDWF  x58,W
04A0C:  MOVWF  FE9
04A0E:  MOVLW  01
04A10:  ADDWFC x59,W
04A12:  MOVWF  FEA
04A14:  MOVLB  A
04A16:  MOVF   xC4,W
04A18:  ADDWF  FEF,W
04A1A:  MOVWF  00
04A1C:  MOVF   xC5,W
04A1E:  ADDWFC FEC,W
04A20:  MOVWF  01
04A22:  MOVLW  00
04A24:  ADDWFC FEC,W
04A26:  MOVWF  02
04A28:  MOVLW  00
04A2A:  ADDWFC FEC,W
04A2C:  MOVWF  03
04A2E:  MOVF   FED,F
04A30:  MOVF   FED,F
04A32:  MOVF   FED,F
04A34:  MOVFF  00,FEF
04A38:  MOVFF  01,FEC
04A3C:  MOVFF  02,FEC
04A40:  MOVFF  03,FEC
04A44:  MOVF   FED,F
04A46:  MOVF   FED,F
04A48:  MOVF   FED,F
....................     flash_counter_table[id].uncopied_counter += size;
04A4A:  MOVF   xC1,W
04A4C:  MULLW  0A
04A4E:  MOVF   FF3,W
04A50:  MOVLB  B
04A52:  CLRF   x59
04A54:  MOVWF  x58
04A56:  MOVLW  04
04A58:  ADDWF  x58,W
04A5A:  MOVWF  01
04A5C:  MOVLW  00
04A5E:  ADDWFC x59,W
04A60:  MOVWF  03
04A62:  MOVF   01,W
04A64:  ADDLW  2E
04A66:  MOVWF  FE9
04A68:  MOVLW  01
04A6A:  ADDWFC 03,W
04A6C:  MOVWF  FEA
04A6E:  MOVLB  A
04A70:  MOVF   xC4,W
04A72:  ADDWF  FEF,W
04A74:  MOVWF  00
04A76:  MOVF   xC5,W
04A78:  ADDWFC FEC,W
04A7A:  MOVWF  01
04A7C:  MOVLW  00
04A7E:  ADDWFC FEC,W
04A80:  MOVWF  02
04A82:  MOVLW  00
04A84:  ADDWFC FEC,W
04A86:  MOVWF  03
04A88:  MOVF   FED,F
04A8A:  MOVF   FED,F
04A8C:  MOVF   FED,F
04A8E:  MOVFF  00,FEF
04A92:  MOVFF  01,FEC
04A96:  MOVFF  02,FEC
04A9A:  MOVFF  03,FEC
04A9E:  MOVF   FED,F
04AA0:  MOVF   FED,F
04AA2:  MOVF   FED,F
....................     flash_counter_table[id].reserve_counter1 += size;
04AA4:  MOVF   xC1,W
04AA6:  MULLW  0A
04AA8:  MOVF   FF3,W
04AAA:  MOVLB  B
04AAC:  CLRF   x59
04AAE:  MOVWF  x58
04AB0:  MOVLW  08
04AB2:  ADDWF  x58,W
04AB4:  MOVWF  01
04AB6:  MOVLW  00
04AB8:  ADDWFC x59,W
04ABA:  MOVWF  03
04ABC:  MOVF   01,W
04ABE:  ADDLW  2E
04AC0:  MOVWF  FE9
04AC2:  MOVLW  01
04AC4:  ADDWFC 03,W
04AC6:  MOVWF  FEA
04AC8:  MOVF   FEF,W
04ACA:  MOVLB  A
04ACC:  ADDWF  xC4,W
04ACE:  MOVWF  01
04AD0:  MOVLW  00
04AD2:  ADDWFC xC5,W
04AD4:  MOVWF  03
04AD6:  MOVF   01,W
04AD8:  MOVWF  FEF
.................... 
....................     // アドレステーブル更新
....................     misf_update_address_area();
04ADA:  MOVLB  0
04ADC:  CALL   423A
04AE0:  RETURN 0
.................... }
.................... 
.................... FlashData_t make_flash_data_table(void)
*
03D82:  MOVLW  0B
03D84:  MOVLB  B
03D86:  MOVWF  xE1
03D88:  MOVLW  A0
03D8A:  MOVWF  xE0
.................... {
....................     FlashData_t flash_data;
....................     FlashData_t *flash_data_ptr = &flash_data;
.................... 
....................     // 初期化
....................     memset(flash_data_ptr->bytes, 0, sizeof(flash_data_ptr->bytes));
03D8C:  MOVF   xE0,W
03D8E:  MOVWF  01
03D90:  MOVF   xE1,W
03D92:  MOVWF  03
03D94:  MOVF   01,W
03D96:  MOVWF  xE2
03D98:  MOVFF  03,BE3
03D9C:  MOVFF  BE3,FEA
03DA0:  MOVFF  BE2,FE9
03DA4:  CLRF   00
03DA6:  CLRF   02
03DA8:  MOVLW  40
03DAA:  MOVWF  01
03DAC:  MOVLB  0
03DAE:  CALL   29EA
.................... 
....................     flash_data_ptr->packet.payload.logdata.piclog = flash_counter_table[FLASH_ID_PICLOG];
03DB2:  MOVLB  B
03DB4:  MOVF   xE0,W
03DB6:  MOVWF  FE9
03DB8:  MOVF   xE1,W
03DBA:  MOVWF  FEA
03DBC:  MOVLW  01
03DBE:  MOVWF  FE2
03DC0:  MOVLW  38
03DC2:  MOVWF  FE1
03DC4:  MOVLW  0A
03DC6:  MOVWF  01
03DC8:  MOVLB  0
03DCA:  MOVFF  FE6,FEE
03DCE:  DECFSZ 01,F
03DD0:  GOTO   3DCA
....................     flash_data_ptr->packet.payload.logdata.environment = flash_counter_table[FLASH_ID_ENVIRONMENT];
03DD4:  MOVLW  0A
03DD6:  MOVLB  B
03DD8:  ADDWF  xE0,W
03DDA:  MOVWF  FE9
03DDC:  MOVLW  00
03DDE:  ADDWFC xE1,W
03DE0:  MOVWF  FEA
03DE2:  MOVLW  01
03DE4:  MOVWF  FE2
03DE6:  MOVLW  42
03DE8:  MOVWF  FE1
03DEA:  MOVLW  0A
03DEC:  MOVWF  01
03DEE:  MOVLB  0
03DF0:  MOVFF  FE6,FEE
03DF4:  DECFSZ 01,F
03DF6:  GOTO   3DF0
....................     flash_data_ptr->packet.payload.logdata.iv1_header = flash_counter_table[FLASH_ID_IV1_HEADER];
03DFA:  MOVLW  14
03DFC:  MOVLB  B
03DFE:  ADDWF  xE0,W
03E00:  MOVWF  FE9
03E02:  MOVLW  00
03E04:  ADDWFC xE1,W
03E06:  MOVWF  FEA
03E08:  MOVLW  01
03E0A:  MOVWF  FE2
03E0C:  MOVLW  4C
03E0E:  MOVWF  FE1
03E10:  MOVLW  0A
03E12:  MOVWF  01
03E14:  MOVLB  0
03E16:  MOVFF  FE6,FEE
03E1A:  DECFSZ 01,F
03E1C:  GOTO   3E16
....................     flash_data_ptr->packet.payload.logdata.iv1_data = flash_counter_table[FLASH_ID_IV1_DATA];
03E20:  MOVLW  1E
03E22:  MOVLB  B
03E24:  ADDWF  xE0,W
03E26:  MOVWF  FE9
03E28:  MOVLW  00
03E2A:  ADDWFC xE1,W
03E2C:  MOVWF  FEA
03E2E:  MOVLW  01
03E30:  MOVWF  FE2
03E32:  MOVLW  56
03E34:  MOVWF  FE1
03E36:  MOVLW  0A
03E38:  MOVWF  01
03E3A:  MOVLB  0
03E3C:  MOVFF  FE6,FEE
03E40:  DECFSZ 01,F
03E42:  GOTO   3E3C
....................     flash_data_ptr->packet.payload.logdata.iv2_header = flash_counter_table[FLASH_ID_IV2_HEADER];
03E46:  MOVLW  28
03E48:  MOVLB  B
03E4A:  ADDWF  xE0,W
03E4C:  MOVWF  FE9
03E4E:  MOVLW  00
03E50:  ADDWFC xE1,W
03E52:  MOVWF  FEA
03E54:  MOVLW  01
03E56:  MOVWF  FE2
03E58:  MOVLW  60
03E5A:  MOVWF  FE1
03E5C:  MOVLW  0A
03E5E:  MOVWF  01
03E60:  MOVLB  0
03E62:  MOVFF  FE6,FEE
03E66:  DECFSZ 01,F
03E68:  GOTO   3E62
....................     flash_data_ptr->packet.payload.logdata.iv2_data = flash_counter_table[FLASH_ID_IV2_DATA];
03E6C:  MOVLW  32
03E6E:  MOVLB  B
03E70:  ADDWF  xE0,W
03E72:  MOVWF  FE9
03E74:  MOVLW  00
03E76:  ADDWFC xE1,W
03E78:  MOVWF  FEA
03E7A:  MOVLW  01
03E7C:  MOVWF  FE2
03E7E:  MOVLW  6A
03E80:  MOVWF  FE1
03E82:  MOVLW  0A
03E84:  MOVWF  01
03E86:  MOVLB  0
03E88:  MOVFF  FE6,FEE
03E8C:  DECFSZ 01,F
03E8E:  GOTO   3E88
.................... 
....................     // CRC 計算
....................     flash_data_ptr->packet.crc = calc_crc8(flash_data_ptr->bytes, PACKET_SIZE - 1);
03E92:  MOVLW  3F
03E94:  MOVLB  B
03E96:  ADDWF  xE0,W
03E98:  MOVWF  01
03E9A:  MOVLW  00
03E9C:  ADDWFC xE1,W
03E9E:  MOVWF  03
03EA0:  MOVF   01,W
03EA2:  MOVWF  xE2
03EA4:  MOVFF  03,BE3
03EA8:  MOVF   xE0,W
03EAA:  MOVWF  01
03EAC:  MOVF   xE1,W
03EAE:  MOVWF  03
03EB0:  MOVF   01,W
03EB2:  MOVWF  xE4
03EB4:  MOVFF  03,BE5
03EB8:  MOVFF  BE5,BE7
03EBC:  MOVFF  BE4,BE6
03EC0:  MOVLW  3F
03EC2:  MOVWF  xE8
03EC4:  MOVLB  0
03EC6:  CALL   2C22
03ECA:  MOVFF  BE3,FEA
03ECE:  MOVFF  BE2,FE9
03ED2:  MOVFF  01,FEF
.................... 
....................     return flash_data;
03ED6:  MOVLW  A0
03ED8:  MOVWF  01
03EDA:  MOVLW  0B
03EDC:  MOVWF  02
03EDE:  GOTO   423E (RETURN)
.................... }
.................... 
.................... void misf_update_address_area(void)
*
0423A:  GOTO   3D82
0423E:  MOVFF  02,03
04242:  MOVF   01,W
04244:  MOVWF  FE1
04246:  MOVFF  03,FE2
0424A:  MOVLW  0B
0424C:  MOVWF  FEA
0424E:  MOVLW  58
04250:  MOVWF  FE9
04252:  MOVLW  40
04254:  MOVWF  01
04256:  MOVFF  FE6,FEE
0425A:  DECFSZ 01,F
0425C:  GOTO   4256
04260:  MOVLW  0B
04262:  MOVLB  B
04264:  MOVWF  x99
04266:  MOVLW  58
04268:  MOVWF  x98
.................... {
....................     FlashData_t flash_data = make_flash_data_table();
....................     FlashData_t *flash_data_ptr = &flash_data;
.................... 
....................     sector_erase(mis_fm, MISF_CIGS_DATA_TABLE_START);
0426A:  MOVFF  115,B9D
0426E:  MOVFF  114,B9C
04272:  MOVFF  113,B9B
04276:  MOVFF  112,B9A
0427A:  CLRF   xA1
0427C:  CLRF   xA0
0427E:  CLRF   x9F
04280:  CLRF   x9E
04282:  MOVLB  0
04284:  CALL   3EE2
....................     write_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, flash_data_ptr->bytes, PACKET_SIZE);
04288:  MOVLB  B
0428A:  MOVF   x98,W
0428C:  MOVWF  01
0428E:  MOVF   x99,W
04290:  MOVWF  03
04292:  MOVF   01,W
04294:  MOVWF  x9A
04296:  MOVFF  03,B9B
0429A:  MOVFF  115,B9F
0429E:  MOVFF  114,B9E
042A2:  MOVFF  113,B9D
042A6:  MOVFF  112,B9C
042AA:  CLRF   xA3
042AC:  CLRF   xA2
042AE:  CLRF   xA1
042B0:  CLRF   xA0
042B2:  MOVFF  B9B,BA5
042B6:  MOVFF  B9A,BA4
042BA:  CLRF   xA7
042BC:  MOVLW  40
042BE:  MOVWF  xA6
042C0:  MOVLB  0
042C2:  CALL   39FE
042C6:  RETURN 0
.................... }
.................... 
.................... 
.................... // PICLOG 更新後に呼ばれる関数例 (piclog_write 内で既に misf_update_address_area 呼んでいる場合は不要)
.................... static void update_piclog_counters_after_write(unsigned int16 wrote_size)
.................... {
....................     piclog_data.used_counter     += wrote_size;
....................     piclog_data.uncopied_counter += wrote_size;
....................     // 必要なら wrap 処理追加
....................     misf_update_address_area();
.................... }
.................... 
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode)
.................... {
....................     FlashOperationStruct data;
....................     // 構造体の初期化
....................     data.mission_id = mission_id;
....................     data.func_type = func_type;
....................     data.write_mode = write_mode;
....................     data.source_type = SOURCE_MISF_UNCOPIED;
....................     enqueue_flash_operation(&data);
.................... }
.................... 
.................... void write_smf_header(smf_data_table_t *smf_data_table)
.................... {
.................... 
....................     int8 readdata[PACKET_SIZE];
....................     int8 retry_count;
....................     int1 crc_valid = 0;
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
....................         if (is_crc_valid(readdata, PACKET_SIZE-1))
....................         {
....................             crc_valid = 1; // FIX: フラグ更新
....................             fprintf(PC, "CRC verification passed on attempt %d\r\n", retry_count + 1);
....................             break;
....................         }
....................     }
....................     if (!crc_valid)
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
....................         // return; 
....................     }
.................... }
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id)
.................... {
....................    MisfAddressStruct mis_struct = {0};
.................... 
....................    if (mission_id == CIGS_DATA_TABLE)
....................    {
....................       mis_struct.start_address = MISF_CIGS_DATA_TABLE_START;
....................       mis_struct.end_address   = MISF_CIGS_DATA_TABLE_END;
....................    }
....................    else if (mission_id == CIGS_PICLOG_DATA)
....................    {
....................       mis_struct.start_address = MISF_CIGS_PICLOG_START;
....................       mis_struct.end_address   = MISF_CIGS_PICLOG_END;
....................    }
....................    else if (mission_id == CIGS_ENVIRO_DATA)
....................    {
....................       mis_struct.start_address = MISF_CIGS_ENVIRO_START;
....................       mis_struct.end_address   = MISF_CIGS_ENVIRO_END;
....................    }
....................    else if (mission_id == CIGS_IV1_HEADER)
....................    {
....................       mis_struct.start_address = MISF_CIGS_IV1_HEADER_START;
....................       mis_struct.end_address   = MISF_CIGS_IV1_HEADER_END;
....................    }
....................    else if (mission_id == CIGS_IV1_DATA)
....................    {
....................       mis_struct.start_address = MISF_CIGS_IV1_DATA_START;
....................       mis_struct.end_address   = MISF_CIGS_IV1_DATA_END;
....................    }
....................    return mis_struct;
.................... }
.................... 
.................... MisfWriteStruct get_misf_write_struct(MissionID mission_id)
.................... {
....................     MisfWriteStruct mis_write_struct = {0};
.................... 
....................     if (mission_id == CIGS_DATA_TABLE)
....................     {
....................         mis_write_struct.start_address = MISF_CIGS_DATA_TABLE_START;
....................         mis_write_struct.size = MISF_CIGS_DATA_TABLE_SIZE;
....................     }
....................     else if (mission_id == CIGS_PICLOG_DATA)
....................     {
....................         mis_write_struct.start_address = MISF_CIGS_PICLOG_START + piclog_data.used_counter - piclog_data.uncopied_counter;
....................         mis_write_struct.size = piclog_data.uncopied_counter;
....................     }
....................     else if (mission_id == CIGS_ENVIRO_DATA)
....................     {
....................         mis_write_struct.start_address = MISF_CIGS_ENVIRO_START + environment_data.used_counter - environment_data.uncopied_counter;
....................         mis_write_struct.size = environment_data.uncopied_counter;
....................     }
....................     else if (mission_id == CIGS_IV1_HEADER)
....................     {
....................         mis_write_struct.start_address = MISF_CIGS_IV1_HEADER_START + iv1_header.used_counter - iv1_header.uncopied_counter;
....................         mis_write_struct.size = iv1_header.uncopied_counter;
....................     }
....................     else if (mission_id == CIGS_IV1_DATA)
....................     {
....................         mis_write_struct.start_address = MISF_CIGS_IV1_DATA_START + iv1_data.used_counter - iv1_data.uncopied_counter;
....................         mis_write_struct.size = iv1_data.uncopied_counter;
....................     }
....................     return mis_write_struct;
.................... }
.................... // End of file
.................... 
.................... 
.................... // アプリケーション実装ファイル
.................... #include "application/mmj_cigs_excute_mission.c"
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../hal/mmj_cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=200000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define EMPTY_VIN0          AD7490_VIN10
.................... #define EMPTY_VIN1          AD7490_VIN11
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/value_status.h"    // ステータス定義
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "mmj_cigs_excute_mission.h"                  // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_DEBUG 0xA3
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "../domain/mmj_cigs_smf.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #include "../hal/mmj_cigs_config.h" // int8,int32 型など(CCS C) 依存
.................... #include "mmj_cigs_flash.h"       // MISF_ADDRESS_TABLE, flash_counter_table 依存
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 loop_counter;
....................     int8 reserved[3];
.................... } SMF_PARTITION;
.................... 
.................... // パーティション管理構造体
.................... typedef struct {
....................     SMF_PARTITION piclog;     // データテーブル領域は利用しないため削除
....................     SMF_PARTITION env;
....................     SMF_PARTITION iv1_header;
....................     SMF_PARTITION iv1_data;
....................     SMF_PARTITION iv2_header;
....................     SMF_PARTITION iv2_data;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... extern PartitionParam param;  // extern宣言に変更
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         partition_header_t headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... 
.................... 
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/communication/typedef_content.h"    // 通信ライブラリ
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.h"      // ミッションツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../domain/mmj_cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/communication_driver.h" // 通信ドライバー
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *content)
*
0DA34:  MOVLB  2
0DA36:  MOVF   x3C,W
0DA38:  MOVWF  FE9
0DA3A:  MOVF   x3D,W
0DA3C:  MOVWF  FEA
0DA3E:  MOVFF  FEF,23E
.................... {
....................    // record to executed mission list
....................    int8 command_id = content[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
0DA42:  MOVLW  8E
0DA44:  MOVWF  FF6
0DA46:  MOVLW  11
0DA48:  MOVWF  FF7
0DA4A:  MOVLW  00
0DA4C:  MOVWF  FF8
0DA4E:  MOVLB  0
0DA50:  CALL   1DC0
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
0DA54:  MOVLW  D4
0DA56:  MOVWF  FF6
0DA58:  MOVLW  11
0DA5A:  MOVWF  FF7
0DA5C:  MOVLW  00
0DA5E:  MOVWF  FF8
0DA60:  MOVLW  0C
0DA62:  MOVLB  A
0DA64:  MOVWF  x67
0DA66:  MOVLB  0
0DA68:  CALL   1DF6
0DA6C:  MOVFF  23E,AC8
0DA70:  MOVLW  37
0DA72:  MOVLB  A
0DA74:  MOVWF  xC9
0DA76:  MOVLB  0
0DA78:  CALL   200A
0DA7C:  MOVLW  E2
0DA7E:  MOVWF  FF6
0DA80:  MOVLW  11
0DA82:  MOVWF  FF7
0DA84:  MOVLW  00
0DA86:  MOVWF  FF8
0DA88:  MOVLW  04
0DA8A:  MOVLB  A
0DA8C:  MOVWF  x67
0DA8E:  MOVLB  0
0DA90:  CALL   1DF6
....................    switch(command_id)
0DA94:  MOVLB  2
0DA96:  MOVF   x3E,W
0DA98:  XORLW  10
0DA9A:  MOVLB  0
0DA9C:  BTFSC  FD8.2
0DA9E:  GOTO   DB6E
0DAA2:  XORLW  01
0DAA4:  BTFSC  FD8.2
0DAA6:  GOTO   DB72
0DAAA:  XORLW  03
0DAAC:  BTFSC  FD8.2
0DAAE:  GOTO   DB76
0DAB2:  XORLW  13
0DAB4:  BTFSC  FD8.2
0DAB6:  GOTO   DB7A
0DABA:  XORLW  12
0DABC:  BTFSC  FD8.2
0DABE:  GOTO   DB7E
0DAC2:  XORLW  93
0DAC4:  BTFSC  FD8.2
0DAC6:  GOTO   DB82
0DACA:  XORLW  01
0DACC:  BTFSC  FD8.2
0DACE:  GOTO   DB92
0DAD2:  XORLW  03
0DAD4:  BTFSC  FD8.2
0DAD6:  GOTO   DBA2
0DADA:  XORLW  01
0DADC:  BTFSC  FD8.2
0DADE:  GOTO   DBB2
0DAE2:  XORLW  07
0DAE4:  BTFSC  FD8.2
0DAE6:  GOTO   DBC2
0DAEA:  XORLW  01
0DAEC:  BTFSC  FD8.2
0DAEE:  GOTO   DBD2
0DAF2:  XORLW  03
0DAF4:  BTFSC  FD8.2
0DAF6:  GOTO   DBE2
0DAFA:  XORLW  01
0DAFC:  BTFSC  FD8.2
0DAFE:  GOTO   DBF2
0DB02:  XORLW  0F
0DB04:  BTFSC  FD8.2
0DB06:  GOTO   DC02
0DB0A:  XORLW  18
0DB0C:  BTFSC  FD8.2
0DB0E:  GOTO   DC12
0DB12:  XORLW  01
0DB14:  BTFSC  FD8.2
0DB16:  GOTO   DC22
0DB1A:  XORLW  03
0DB1C:  BTFSC  FD8.2
0DB1E:  GOTO   DC32
0DB22:  XORLW  01
0DB24:  BTFSC  FD8.2
0DB26:  GOTO   DC42
0DB2A:  XORLW  07
0DB2C:  BTFSC  FD8.2
0DB2E:  GOTO   DC52
0DB32:  XORLW  01
0DB34:  BTFSC  FD8.2
0DB36:  GOTO   DC62
0DB3A:  XORLW  03
0DB3C:  BTFSC  FD8.2
0DB3E:  GOTO   DC72
0DB42:  XORLW  36
0DB44:  BTFSC  FD8.2
0DB46:  GOTO   DC82
0DB4A:  XORLW  01
0DB4C:  BTFSC  FD8.2
0DB4E:  GOTO   DC92
0DB52:  XORLW  03
0DB54:  BTFSC  FD8.2
0DB56:  GOTO   DCA2
0DB5A:  XORLW  01
0DB5C:  BTFSC  FD8.2
0DB5E:  GOTO   DCB2
0DB62:  XORLW  07
0DB64:  BTFSC  FD8.2
0DB66:  GOTO   DCC2
0DB6A:  GOTO   DCCA
....................    {
....................       case 0x10: // example command
....................          // mode_dummy(content);
....................          //mode_iv_meas_adc();
....................          break;
0DB6E:  GOTO   DCDE
....................       case 0x11:
....................          // mode_test_iv(content);
....................          break;
0DB72:  GOTO   DCDE
....................       case 0x12:
....................          // test_adc();
....................          break;
0DB76:  GOTO   DCDE
....................       case 0x01:
....................          //mode_measure(content); // check if the flash is connected
....................          break;
0DB7A:  GOTO   DCDE
....................       case 0x13:
....................          // mode_sweep_port1(content[1]); // Sweep Port 1 with the given step
....................          break;
0DB7E:  GOTO   DCDE
.................... 
....................       // ___________________ MISF Commands ______________________
....................       case ID_MISF_ERASE_ALL:
....................          mode_misf_erase_all(content);
0DB82:  MOVFF  23D,242
0DB86:  MOVFF  23C,241
0DB8A:  CALL   5308
....................          break;
0DB8E:  GOTO   DCDE
....................       case ID_MISF_ERASE_1SECTOR:
....................          mode_misf_erase_1sector(content);
0DB92:  MOVFF  23D,240
0DB96:  MOVFF  23C,23F
0DB9A:  GOTO   53E4
....................          break;
0DB9E:  GOTO   DCDE
....................       case ID_MISF_ERASE_4kByte_SUBSECTOR:
....................          mode_misf_erase_4kbyte_subsector(content);
0DBA2:  MOVFF  23D,240
0DBA6:  MOVFF  23C,23F
0DBAA:  GOTO   58D8
....................          break;
0DBAE:  GOTO   DCDE
....................       case ID_MISF_ERASE_64kByte_SUBSECTOR:
....................          mode_misf_erase_64kbyte_subsector(content);
0DBB2:  MOVFF  23D,240
0DBB6:  MOVFF  23C,23F
0DBBA:  GOTO   5A70
....................          break;
0DBBE:  GOTO   DCDE
....................       case ID_MISF_WRITE_DEMO:
....................          mode_misf_write_demo(content);
0DBC2:  MOVFF  23D,240
0DBC6:  MOVFF  23C,23F
0DBCA:  GOTO   5DC4
....................          break;
0DBCE:  GOTO   DCDE
....................       case ID_MISF_WRITE_4kByte_SUBSECTOR:
....................          mode_misf_write_4kbyte_subsector(content);
0DBD2:  MOVFF  23D,240
0DBD6:  MOVFF  23C,23F
0DBDA:  GOTO   63C0
....................          break;
0DBDE:  GOTO   DCDE
....................       case ID_MISF_READ:
....................          mode_misf_read(content);
0DBE2:  MOVFF  23D,240
0DBE6:  MOVFF  23C,23F
0DBEA:  GOTO   6434
....................          break;
0DBEE:  GOTO   DCDE
....................       case ID_MISF_READ_ADDRESS:
....................          mode_misf_read_address(content);
0DBF2:  MOVFF  23D,240
0DBF6:  MOVFF  23C,23F
0DBFA:  GOTO   6B64
....................          break;
0DBFE:  GOTO   DCDE
....................       case ID_MISF_ERASE_AND_RESET:
....................          mode_misf_erase_and_reset(content);
0DC02:  MOVFF  23D,240
0DC06:  MOVFF  23C,23F
0DC0A:  GOTO   6E68
....................          break;
0DC0E:  GOTO   DCDE
.................... 
....................       // ___________________ SMF Commands ______________________
....................       case ID_SMF_COPY:
....................          mode_smf_copy(content);
0DC12:  MOVFF  23D,240
0DC16:  MOVFF  23C,23F
0DC1A:  GOTO   6EBE
....................          break;
0DC1E:  GOTO   DCDE
....................       case ID_SMF_READ:
....................          mode_smf_read(content);
0DC22:  MOVFF  23D,240
0DC26:  MOVFF  23C,23F
0DC2A:  GOTO   6F9A
....................          break;
0DC2E:  GOTO   DCDE
....................       case ID_SMF_ERASE:
....................          mode_smf_erase(content);
0DC32:  MOVFF  23D,240
0DC36:  MOVFF  23C,23F
0DC3A:  GOTO   7066
....................          break;
0DC3E:  GOTO   DCDE
....................       case ID_SMF_COPY_FORCE:
....................          mode_smf_address_reset(content);
0DC42:  MOVFF  23D,240
0DC46:  MOVFF  23C,23F
0DC4A:  CALL   71AA
....................          break;
0DC4E:  GOTO   DCDE
....................       case ID_SMF_READ_FORCE:
....................          mode_smf_read_force(content);
0DC52:  MOVFF  23D,240
0DC56:  MOVFF  23C,23F
0DC5A:  GOTO   7322
....................          break;
0DC5E:  GOTO   DCDE
....................       case ID_SMF_ERASE_FORCE:
....................          mode_smf_erase_force(content);
0DC62:  MOVFF  23D,240
0DC66:  MOVFF  23C,23F
0DC6A:  GOTO   7710
....................          break;
0DC6E:  GOTO   DCDE
....................       case ID_SMF_RESET:
....................          mode_smf_address_reset(content);
0DC72:  MOVFF  23D,240
0DC76:  MOVFF  23C,23F
0DC7A:  CALL   71AA
....................          break;
0DC7E:  GOTO   DCDE
....................          
....................          
....................       // ________________MEAS________________________________
....................       case ID_MEAS_IV:
....................          mode_meas_iv(content);
0DC82:  MOVFF  23D,240
0DC86:  MOVFF  23C,23F
0DC8A:  GOTO   96C8
....................          break;
0DC8E:  GOTO   DCDE
....................       case ID_MEAS_DEBUG:
....................          mode_meas_iv_debug(content);
0DC92:  MOVFF  23D,240
0DC96:  MOVFF  23C,23F
0DC9A:  GOTO   BC9A
....................          break;;
0DC9E:  GOTO   DCDE
....................       case ID_MEAS_ENV:
....................          mode_meas_env(content);
0DCA2:  MOVFF  23D,240
0DCA6:  MOVFF  23C,23F
0DCAA:  GOTO   BF7C
....................          break;
0DCAE:  GOTO   DCDE
....................       case ID_MEAS_ENV_DEBUG:
....................          mode_meas_env_debug(content);
0DCB2:  MOVFF  23D,240
0DCB6:  MOVFF  23C,23F
0DCBA:  GOTO   C464
....................          break;
0DCBE:  GOTO   DCDE
....................      
....................      case 0xA4:
....................           sweep_with_print();
0DCC2:  GOTO   C4AA
....................           break;
0DCC6:  GOTO   DCDE
....................      
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
0DCCA:  MOVLW  E8
0DCCC:  MOVWF  FF6
0DCCE:  MOVLW  11
0DCD0:  MOVWF  FF7
0DCD2:  MOVLW  00
0DCD4:  MOVWF  FF8
0DCD6:  CALL   1DC0
....................          break;
0DCDA:  GOTO   DCDE
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
0DCDE:  MOVLW  00
0DCE0:  MOVWF  FF6
0DCE2:  MOVLW  12
0DCE4:  MOVWF  FF7
0DCE6:  MOVLW  00
0DCE8:  MOVWF  FF8
0DCEA:  CALL   1DC0
0DCEE:  GOTO   DD5C (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
0FF1C:  MOVLW  46
0FF1E:  MOVWF  FF6
0FF20:  MOVLW  12
0FF22:  MOVWF  FF7
0FF24:  MOVLW  00
0FF26:  MOVWF  FF8
0FF28:  CALL   1DC0
....................    
....................    switch(command->frame_id)
0FF2C:  MOVLB  2
0FF2E:  MOVF   x36,W
0FF30:  MOVWF  FE9
0FF32:  MOVF   x37,W
0FF34:  MOVWF  FEA
0FF36:  MOVF   FEF,W
0FF38:  XORLW  00
0FF3A:  MOVLB  0
0FF3C:  BTFSC  FD8.2
0FF3E:  GOTO   FF56
0FF42:  XORLW  01
0FF44:  BTFSC  FD8.2
0FF46:  GOTO   FF66
0FF4A:  XORLW  03
0FF4C:  BTFSC  FD8.2
0FF4E:  GOTO   FF86
0FF52:  GOTO   FF96
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
0FF56:  MOVFF  237,239
0FF5A:  MOVFF  236,238
0FF5E:  GOTO   DD10
....................          break;
0FF62:  GOTO   FF96
....................          
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
0FF66:  MOVFF  237,239
0FF6A:  MOVFF  236,238
0FF6E:  GOTO   DD92
0FF72:  MOVF   01,F
0FF74:  BTFSC  FD8.2
0FF76:  GOTO   FF82
....................             return TRUE; // if status is finished, return TRUE
0FF7A:  MOVLW  01
0FF7C:  MOVWF  01
0FF7E:  GOTO   FF9A
....................          }        
....................          break;
0FF82:  GOTO   FF96
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
0FF86:  MOVFF  237,239
0FF8A:  MOVFF  236,238
0FF8E:  GOTO   10000
....................          break;
0FF92:  GOTO   FF96
....................    }
....................    return FALSE;
0FF96:  MOVLW  00
0FF98:  MOVWF  01
0FF9A:  GOTO   108DC (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
0DD10:  MOVLW  5E
0DD12:  MOVWF  FF6
0DD14:  MOVLW  12
0DD16:  MOVWF  FF7
0DD18:  MOVLW  00
0DD1A:  MOVWF  FF8
0DD1C:  CALL   1DC0
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
0DD20:  MOVLW  74
0DD22:  MOVWF  FF6
0DD24:  MOVLW  12
0DD26:  MOVWF  FF7
0DD28:  MOVLW  00
0DD2A:  MOVWF  FF8
0DD2C:  CALL   1DC0
....................    transmit_ack();
0DD30:  CALL   52F4
.................... 
....................    status[0] = EXECUTING_MISSION;
0DD34:  MOVLW  02
0DD36:  MOVWF  4C
....................    execute_mission(command->content);
0DD38:  MOVLW  03
0DD3A:  MOVLB  2
0DD3C:  ADDWF  x38,W
0DD3E:  MOVWF  01
0DD40:  MOVLW  00
0DD42:  ADDWFC x39,W
0DD44:  MOVWF  03
0DD46:  MOVF   01,W
0DD48:  MOVWF  x3A
0DD4A:  MOVFF  03,23B
0DD4E:  MOVFF  23B,23D
0DD52:  MOVFF  23A,23C
0DD56:  MOVLB  0
0DD58:  GOTO   DA34
....................    if (is_empty_flash_queue())
0DD5C:  CALL   DCF2
0DD60:  MOVF   01,F
0DD62:  BTFSC  FD8.2
0DD64:  GOTO   DD70
....................       status[0] = FINISHED;
0DD68:  MOVLW  06
0DD6A:  MOVWF  4C
0DD6C:  GOTO   DD74
....................    else
....................       status[0] = SMF_USE_REQ;
0DD70:  MOVLW  04
0DD72:  MOVWF  4C
0DD74:  GOTO   FF62 (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... 
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
*
0DD92:  MOVLW  8E
0DD94:  MOVWF  FF6
0DD96:  MOVLW  12
0DD98:  MOVWF  FF7
0DD9A:  MOVLW  00
0DD9C:  MOVWF  FF8
0DD9E:  CALL   1DC0
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
0DDA2:  MOVLW  A2
0DDA4:  MOVWF  FF6
0DDA6:  MOVLW  12
0DDA8:  MOVWF  FF7
0DDAA:  MOVLW  00
0DDAC:  MOVWF  FF8
0DDAE:  CALL   1DC0
....................    transmit_status();
0DDB2:  GOTO   DD78
....................    if (status[0] == FINISHED)
0DDB6:  MOVF   4C,W
0DDB8:  SUBLW  06
0DDBA:  BTFSS  FD8.2
0DDBC:  GOTO   DDDC
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
0DDC0:  MOVLW  C0
0DDC2:  MOVWF  FF6
0DDC4:  MOVLW  12
0DDC6:  MOVWF  FF7
0DDC8:  MOVLW  00
0DDCA:  MOVWF  FF8
0DDCC:  CALL   1DC0
....................       return TRUE;
0DDD0:  MOVLW  01
0DDD2:  MOVWF  01
0DDD4:  GOTO   DDE4
....................    }
0DDD8:  GOTO   DDE4
....................    else{
....................       return FALSE;
0DDDC:  MOVLW  00
0DDDE:  MOVWF  01
0DDE0:  GOTO   DDE4
....................    }
0DDE4:  GOTO   FF72 (RETURN)
.................... }
.................... 
.................... 
.................... void handle_smf_available(Command *command)
.................... {
....................     fprintf(PC, "\t-> SMF available check\r\n");
*
10000:  MOVLW  DC
10002:  MOVWF  FF6
10004:  MOVLW  12
10006:  MOVWF  FF7
10008:  MOVLW  00
1000A:  MOVWF  FF8
1000C:  CALL   1DC0
....................     fprintf(PC, "\t   Transmit Acknowledgement\r\n");
10010:  MOVLW  F6
10012:  MOVWF  FF6
10014:  MOVLW  12
10016:  MOVWF  FF7
10018:  MOVLW  00
1001A:  MOVWF  FF8
1001C:  CALL   1DC0
....................     transmit_ack();
10020:  CALL   52F4
.................... 
....................     if (command->content[0] != ALLOW) {
10024:  MOVLW  03
10026:  MOVLB  2
10028:  ADDWF  x38,W
1002A:  MOVWF  FE9
1002C:  MOVLW  00
1002E:  ADDWFC x39,W
10030:  MOVWF  FEA
10032:  DECFSZ FEF,W
10034:  BRA    1003A
10036:  BRA    10040
10038:  MOVLB  0
1003A:  MOVLB  0
1003C:  GOTO   10046
10040:  MOVLB  0
10042:  GOTO   1005A
....................         fprintf(PC, "\t\t-> denied\r\n");
10046:  MOVLW  16
10048:  MOVWF  FF6
1004A:  MOVLW  13
1004C:  MOVWF  FF7
1004E:  MOVLW  00
10050:  MOVWF  FF8
10052:  CALL   1DC0
....................         return;
10056:  GOTO   102BE
....................     }
.................... 
....................     fprintf(PC, "\t\t-> allowed\r\n");
1005A:  MOVLW  24
1005C:  MOVWF  FF6
1005E:  MOVLW  13
10060:  MOVWF  FF7
10062:  MOVLW  00
10064:  MOVWF  FF8
10066:  CALL   1DC0
....................     status[0] = COPYING;
1006A:  MOVLW  05
1006C:  MOVWF  4C
.................... 
....................     int8 processed_count = 0;
1006E:  MOVLB  2
10070:  CLRF   x3A
10072:  MOVLB  0
.................... 
....................     while (!is_empty_flash_queue()) {
10074:  CALL   DCF2
10078:  MOVF   01,F
1007A:  BTFSS  FD8.2
1007C:  GOTO   1027A
....................         FlashOperationStruct *smf_data = dequeue_flash_operation();
10080:  GOTO   DDE8
10084:  MOVFF  02,23C
10088:  MOVFF  01,23B
....................         /*
....................         if (smf_data == NULL) {
....................             fprintf(PC, "\t\t-> dequeue NULL (break)\r\n");
....................             break;
....................         }
....................          */
....................         fprintf(PC, "\t\t-> Dequeued: func=%u mission=%u size=%ld addr=%ld\r\n",
....................                 (unsigned int)smf_data->func_type,
....................                 (unsigned int)smf_data->mission_id,
....................                 smf_data->misf_size,
....................                 smf_data->misf_start_addr);
1008C:  MOVLW  01
1008E:  MOVLB  2
10090:  ADDWF  x3B,W
10092:  MOVWF  FE9
10094:  MOVLW  00
10096:  ADDWFC x3C,W
10098:  MOVWF  FEA
1009A:  MOVFF  FEF,23D
1009E:  MOVF   x3B,W
100A0:  MOVWF  FE9
100A2:  MOVF   x3C,W
100A4:  MOVWF  FEA
100A6:  MOVFF  FEF,23E
100AA:  MOVLW  08
100AC:  ADDWF  x3B,W
100AE:  MOVWF  FE9
100B0:  MOVLW  00
100B2:  ADDWFC x3C,W
100B4:  MOVWF  FEA
100B6:  MOVFF  FEF,23F
100BA:  MOVFF  FEC,240
100BE:  MOVFF  FEC,241
100C2:  MOVFF  FEC,242
100C6:  MOVF   FED,F
100C8:  MOVF   FED,F
100CA:  MOVF   FED,F
100CC:  MOVLW  04
100CE:  ADDWF  x3B,W
100D0:  MOVWF  FE9
100D2:  MOVLW  00
100D4:  ADDWFC x3C,W
100D6:  MOVWF  FEA
100D8:  MOVFF  FEF,243
100DC:  MOVFF  FEC,244
100E0:  MOVFF  FEC,245
100E4:  MOVFF  FEC,246
100E8:  MOVF   FED,F
100EA:  MOVF   FED,F
100EC:  MOVF   FED,F
100EE:  MOVLW  34
100F0:  MOVWF  FF6
100F2:  MOVLW  13
100F4:  MOVWF  FF7
100F6:  MOVLW  00
100F8:  MOVWF  FF8
100FA:  MOVLW  14
100FC:  MOVLB  A
100FE:  MOVWF  x67
10100:  MOVLB  0
10102:  CALL   1DF6
10106:  MOVFF  23D,247
1010A:  MOVLW  1B
1010C:  MOVLB  2
1010E:  MOVWF  x48
10110:  MOVLB  0
10112:  CALL   DE94
10116:  MOVLW  4A
10118:  MOVWF  FF6
1011A:  MOVLW  13
1011C:  MOVWF  FF7
1011E:  MOVLW  00
10120:  MOVWF  FF8
10122:  MOVLW  09
10124:  MOVLB  A
10126:  MOVWF  x67
10128:  MOVLB  0
1012A:  CALL   1DF6
1012E:  MOVFF  23E,247
10132:  MOVLW  1B
10134:  MOVLB  2
10136:  MOVWF  x48
10138:  MOVLB  0
1013A:  CALL   DE94
1013E:  MOVLW  55
10140:  MOVWF  FF6
10142:  MOVLW  13
10144:  MOVWF  FF7
10146:  MOVLW  00
10148:  MOVWF  FF8
1014A:  MOVLW  06
1014C:  MOVLB  A
1014E:  MOVWF  x67
10150:  MOVLB  0
10152:  CALL   1DF6
10156:  MOVLW  41
10158:  MOVWF  FE9
1015A:  MOVFF  242,24A
1015E:  MOVFF  241,249
10162:  MOVFF  240,248
10166:  MOVFF  23F,247
1016A:  CALL   DF50
1016E:  MOVLW  5E
10170:  MOVWF  FF6
10172:  MOVLW  13
10174:  MOVWF  FF7
10176:  MOVLW  00
10178:  MOVWF  FF8
1017A:  MOVLW  06
1017C:  MOVLB  A
1017E:  MOVWF  x67
10180:  MOVLB  0
10182:  CALL   1DF6
10186:  MOVLW  41
10188:  MOVWF  FE9
1018A:  MOVFF  246,24A
1018E:  MOVFF  245,249
10192:  MOVFF  244,248
10196:  MOVFF  243,247
1019A:  CALL   DF50
1019E:  MOVLW  0D
101A0:  BTFSS  FA6.6
101A2:  GOTO   101A0
101A6:  MOVLB  E
101A8:  MOVWF  xF9
101AA:  MOVLW  0A
101AC:  MOVLB  0
101AE:  BTFSS  FA6.6
101B0:  GOTO   101AE
101B4:  MOVLB  E
101B6:  MOVWF  xF9
.................... 
....................         switch (smf_data->func_type) {
101B8:  MOVLW  01
101BA:  MOVLB  2
101BC:  ADDWF  x3B,W
101BE:  MOVWF  FE9
101C0:  MOVLW  00
101C2:  ADDWFC x3C,W
101C4:  MOVWF  FEA
101C6:  MOVF   FEF,W
101C8:  XORLW  00
101CA:  MOVLB  0
101CC:  BTFSC  FD8.2
101CE:  GOTO   101E6
101D2:  XORLW  01
101D4:  BTFSC  FD8.2
101D6:  GOTO   101F6
101DA:  XORLW  03
101DC:  BTFSC  FD8.2
101DE:  GOTO   10206
101E2:  GOTO   10216
....................             case ENUM_SMF_WRITE:
....................                 smf_write(smf_data);
101E6:  MOVFF  23C,23E
101EA:  MOVFF  23B,23D
101EE:  GOTO   E51E
....................                 break;
101F2:  GOTO   10270
....................             case ENUM_SMF_READ:
....................                 smf_read(smf_data);
101F6:  MOVFF  23C,23E
101FA:  MOVFF  23B,23D
101FE:  GOTO   F170
....................                 break;
10202:  GOTO   10270
....................             case ENUM_SMF_ERASE:
....................                 smf_erase(smf_data);
10206:  MOVFF  23C,23E
1020A:  MOVFF  23B,23D
1020E:  GOTO   F89A
....................                 break;
10212:  GOTO   10270
....................             default:
....................                 fprintf(PC, "\t\t   Unknown func_type=%u\r\n",
....................                         (unsigned int)smf_data->func_type);
10216:  MOVLW  01
10218:  MOVLB  2
1021A:  ADDWF  x3B,W
1021C:  MOVWF  FE9
1021E:  MOVLW  00
10220:  ADDWFC x3C,W
10222:  MOVWF  FEA
10224:  MOVFF  FEF,23D
10228:  MOVLW  6A
1022A:  MOVWF  FF6
1022C:  MOVLW  13
1022E:  MOVWF  FF7
10230:  MOVLW  00
10232:  MOVWF  FF8
10234:  MOVLW  17
10236:  MOVLB  A
10238:  MOVWF  x67
1023A:  MOVLB  0
1023C:  CALL   1DF6
10240:  MOVFF  23D,247
10244:  MOVLW  1B
10246:  MOVLB  2
10248:  MOVWF  x48
1024A:  MOVLB  0
1024C:  CALL   DE94
10250:  MOVLW  0D
10252:  BTFSS  FA6.6
10254:  GOTO   10252
10258:  MOVLB  E
1025A:  MOVWF  xF9
1025C:  MOVLW  0A
1025E:  MOVLB  0
10260:  BTFSS  FA6.6
10262:  GOTO   10260
10266:  MOVLB  E
10268:  MOVWF  xF9
....................                 break;
1026A:  MOVLB  0
1026C:  GOTO   10270
....................         }
....................         processed_count++;
10270:  MOVLB  2
10272:  INCF   x3A,F
10274:  MOVLB  0
10276:  GOTO   10074
....................     }
.................... 
....................     fprintf(PC, "\t\t-> Completed %u operations\r\n",
....................             (unsigned int)processed_count);
1027A:  MOVLW  86
1027C:  MOVWF  FF6
1027E:  MOVLW  13
10280:  MOVWF  FF7
10282:  MOVLW  00
10284:  MOVWF  FF8
10286:  MOVLW  0F
10288:  MOVLB  A
1028A:  MOVWF  x67
1028C:  MOVLB  0
1028E:  CALL   1DF6
10292:  MOVFF  23A,247
10296:  MOVLW  1B
10298:  MOVLB  2
1029A:  MOVWF  x48
1029C:  MOVLB  0
1029E:  CALL   DE94
102A2:  MOVLW  97
102A4:  MOVWF  FF6
102A6:  MOVLW  13
102A8:  MOVWF  FF7
102AA:  MOVLW  00
102AC:  MOVWF  FF8
102AE:  MOVLW  0D
102B0:  MOVLB  A
102B2:  MOVWF  x67
102B4:  MOVLB  0
102B6:  CALL   1DF6
.................... 
....................     status[0] = FINISHED;
102BA:  MOVLW  06
102BC:  MOVWF  4C
102BE:  GOTO   FF92 (RETURN)
.................... }
.................... // End of file
.................... 
.................... #include "application/mmj_cigs_mode_mission.c"
.................... #include "mmj_cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_DEBUG 0xA3
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/mmj_cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/device/ad7490.h"                    // ADCライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/mmj_cigs_flash.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x000FFFFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  0x00001000
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     0x00010000
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     0x00010000
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  0x00010000
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    0x00010000
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  0x00010000
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    0x00010000
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t flash_counter_table[];
.................... extern FlashCounter_t *flash_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/mmj_cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS IV\r\n");
*
096C8:  MOVLW  A6
096CA:  MOVWF  FF6
096CC:  MOVLW  13
096CE:  MOVWF  FF7
096D0:  MOVLW  00
096D2:  MOVWF  FF8
096D4:  CALL   1DC0
....................    MEAS_IV_CMD cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
096D8:  MOVFF  240,268
096DC:  MOVFF  23F,267
096E0:  CALL   77FA
096E4:  MOVFF  02,03
096E8:  MOVF   01,W
096EA:  MOVWF  FE1
096EC:  MOVFF  03,FE2
096F0:  MOVLW  02
096F2:  MOVWF  FEA
096F4:  MOVLW  41
096F6:  MOVWF  FE9
096F8:  MOVLW  0C
096FA:  MOVWF  01
096FC:  MOVFF  FE6,FEE
09700:  DECFSZ 01,F
09702:  GOTO   96FC
....................    fprintf(PC, "\tSleepTime:        %04LX\r\n", cmd.sleep_time);
09706:  MOVLW  BC
09708:  MOVWF  FF6
0970A:  MOVLW  13
0970C:  MOVWF  FF7
0970E:  MOVLW  00
09710:  MOVWF  FF8
09712:  MOVLW  13
09714:  MOVLB  A
09716:  MOVWF  x67
09718:  MOVLB  0
0971A:  CALL   1DF6
0971E:  MOVFF  243,AC8
09722:  MOVLW  37
09724:  MOVLB  A
09726:  MOVWF  xC9
09728:  MOVLB  0
0972A:  CALL   200A
0972E:  MOVFF  242,AC8
09732:  MOVLW  37
09734:  MOVLB  A
09736:  MOVWF  xC9
09738:  MOVLB  0
0973A:  CALL   200A
0973E:  MOVLW  0D
09740:  BTFSS  FA6.6
09742:  GOTO   9740
09746:  MOVLB  E
09748:  MOVWF  xF9
0974A:  MOVLW  0A
0974C:  MOVLB  0
0974E:  BTFSS  FA6.6
09750:  GOTO   974E
09754:  MOVLB  E
09756:  MOVWF  xF9
....................    fprintf(PC, "\tCurrentThreshold: %04LX\r\n", cmd.curr_threshold);
09758:  MOVLW  D8
0975A:  MOVWF  FF6
0975C:  MOVLW  13
0975E:  MOVWF  FF7
09760:  MOVLW  00
09762:  MOVWF  FF8
09764:  MOVLW  13
09766:  MOVLB  A
09768:  MOVWF  x67
0976A:  MOVLB  0
0976C:  CALL   1DF6
09770:  MOVFF  245,AC8
09774:  MOVLW  37
09776:  MOVLB  A
09778:  MOVWF  xC9
0977A:  MOVLB  0
0977C:  CALL   200A
09780:  MOVFF  244,AC8
09784:  MOVLW  37
09786:  MOVLB  A
09788:  MOVWF  xC9
0978A:  MOVLB  0
0978C:  CALL   200A
09790:  MOVLW  0D
09792:  BTFSS  FA6.6
09794:  GOTO   9792
09798:  MOVLB  E
0979A:  MOVWF  xF9
0979C:  MOVLW  0A
0979E:  MOVLB  0
097A0:  BTFSS  FA6.6
097A2:  GOTO   97A0
097A6:  MOVLB  E
097A8:  MOVWF  xF9
....................    fprintf(PC, "\tPDThreshold:      %04LX\r\n", cmd.pd_threshold);
097AA:  MOVLW  F4
097AC:  MOVWF  FF6
097AE:  MOVLW  13
097B0:  MOVWF  FF7
097B2:  MOVLW  00
097B4:  MOVWF  FF8
097B6:  MOVLW  13
097B8:  MOVLB  A
097BA:  MOVWF  x67
097BC:  MOVLB  0
097BE:  CALL   1DF6
097C2:  MOVFF  247,AC8
097C6:  MOVLW  37
097C8:  MOVLB  A
097CA:  MOVWF  xC9
097CC:  MOVLB  0
097CE:  CALL   200A
097D2:  MOVFF  246,AC8
097D6:  MOVLW  37
097D8:  MOVLB  A
097DA:  MOVWF  xC9
097DC:  MOVLB  0
097DE:  CALL   200A
097E2:  MOVLW  0D
097E4:  BTFSS  FA6.6
097E6:  GOTO   97E4
097EA:  MOVLB  E
097EC:  MOVWF  xF9
097EE:  MOVLW  0A
097F0:  MOVLB  0
097F2:  BTFSS  FA6.6
097F4:  GOTO   97F2
097F8:  MOVLB  E
097FA:  MOVWF  xF9
....................    fprintf(PC, "\tCurrentLimit:     %04LX\r\n", cmd.curr_limit);
097FC:  MOVLW  10
097FE:  MOVWF  FF6
09800:  MOVLW  14
09802:  MOVWF  FF7
09804:  MOVLW  00
09806:  MOVWF  FF8
09808:  MOVLW  13
0980A:  MOVLB  A
0980C:  MOVWF  x67
0980E:  MOVLB  0
09810:  CALL   1DF6
09814:  MOVFF  249,AC8
09818:  MOVLW  37
0981A:  MOVLB  A
0981C:  MOVWF  xC9
0981E:  MOVLB  0
09820:  CALL   200A
09824:  MOVFF  248,AC8
09828:  MOVLW  37
0982A:  MOVLB  A
0982C:  MOVWF  xC9
0982E:  MOVLB  0
09830:  CALL   200A
09834:  MOVLW  0D
09836:  BTFSS  FA6.6
09838:  GOTO   9836
0983C:  MOVLB  E
0983E:  MOVWF  xF9
09840:  MOVLW  0A
09842:  MOVLB  0
09844:  BTFSS  FA6.6
09846:  GOTO   9844
0984A:  MOVLB  E
0984C:  MOVWF  xF9
....................    fprintf(PC, "\tMeasurementTime:  %04LX\r\n", cmd.meas_time);
0984E:  MOVLW  2C
09850:  MOVWF  FF6
09852:  MOVLW  14
09854:  MOVWF  FF7
09856:  MOVLW  00
09858:  MOVWF  FF8
0985A:  MOVLW  13
0985C:  MOVLB  A
0985E:  MOVWF  x67
09860:  MOVLB  0
09862:  CALL   1DF6
09866:  MOVFF  24B,AC8
0986A:  MOVLW  37
0986C:  MOVLB  A
0986E:  MOVWF  xC9
09870:  MOVLB  0
09872:  CALL   200A
09876:  MOVFF  24A,AC8
0987A:  MOVLW  37
0987C:  MOVLB  A
0987E:  MOVWF  xC9
09880:  MOVLB  0
09882:  CALL   200A
09886:  MOVLW  0D
09888:  BTFSS  FA6.6
0988A:  GOTO   9888
0988E:  MOVLB  E
09890:  MOVWF  xF9
09892:  MOVLW  0A
09894:  MOVLB  0
09896:  BTFSS  FA6.6
09898:  GOTO   9896
0989C:  MOVLB  E
0989E:  MOVWF  xF9
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_START); // Log the start of the command execution
098A0:  MOVFF  241,296
098A4:  MOVLB  2
098A6:  CLRF   x97
098A8:  MOVLB  0
098AA:  CALL   4AE2
.................... 
....................    unsigned int32 start_time = get_current_sec();
....................    unsigned int32 current_sec = 0;
098AE:  CALL   36E6
098B2:  MOVFF  03,250
098B6:  MOVFF  02,24F
098BA:  MOVFF  01,24E
098BE:  MOVFF  00,24D
098C2:  MOVLB  2
098C4:  CLRF   x54
098C6:  CLRF   x53
098C8:  CLRF   x52
098CA:  CLRF   x51
....................    
....................    sweep(cmd.curr_threshold, cmd.curr_limit, cmd.pd_threshold); // Perform the sweep with thresholds
098CC:  MOVFF  245,262
098D0:  MOVFF  244,261
098D4:  MOVFF  249,264
098D8:  MOVFF  248,263
098DC:  MOVFF  247,266
098E0:  MOVFF  246,265
098E4:  MOVLB  0
098E6:  GOTO   80A4
....................    delay_ms(cmd.sleep_time);
098EA:  MOVFF  243,261
098EE:  MOVLB  2
098F0:  INCF   x61,F
098F2:  MOVLB  0
098F4:  MOVLB  2
098F6:  DECFSZ x61,F
098F8:  BRA    98FE
098FA:  MOVLB  0
098FC:  BRA    990A
098FE:  MOVLB  B
09900:  SETF   xB4
09902:  MOVLB  0
09904:  CALL   1D92
09908:  BRA    98F4
0990A:  MOVFF  242,BB4
0990E:  CALL   1D92
....................    /*
....................    while(get_current_sec() - start_time < cmd.meas_time)
....................    {
....................       sweep(cmd.curr_threshold, cmd.curr_limit, cmd.pd_threshold); // Perform the sweep with thresholds
....................       delay_ms(cmd.sleep_time);
....................    }
....................    */
....................    piclog_make(cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
09912:  MOVFF  241,296
09916:  MOVLB  2
09918:  SETF   x97
0991A:  MOVLB  0
0991C:  CALL   4AE2
.................... 
.................... 
.................... 
....................    FlashOperationStruct data = {0};
09920:  MOVLB  2
09922:  CLRF   x55
09924:  CLRF   x56
09926:  CLRF   x57
09928:  CLRF   x58
0992A:  CLRF   x59
0992C:  CLRF   x5A
0992E:  CLRF   x5B
09930:  CLRF   x5C
09932:  CLRF   x5D
09934:  CLRF   x5E
09936:  CLRF   x5F
09938:  CLRF   x60
....................    data.func_type = ENUM_SMF_WRITE;
0993A:  CLRF   x56
....................    data.mission_id = CIGS_IV1_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0993C:  MOVLW  04
0993E:  MOVWF  x55
....................    data.write_mode = SMF_WRITE_CIRCULAR;
09940:  MOVLW  02
09942:  MOVWF  x57
....................    data.source_type = SOURCE_MISF_UNCOPIED;
09944:  BCF    x58.0
.................... 
.................... 
....................    fprintf(PC, "Enqueue Flash Operation\r\n");
09946:  MOVLW  48
09948:  MOVWF  FF6
0994A:  MOVLW  14
0994C:  MOVWF  FF7
0994E:  MOVLW  00
09950:  MOVWF  FF8
09952:  MOVLB  0
09954:  CALL   1DC0
....................    fprintf(PC, "Mission ID:   %02X\r\n", data.mission_id);
09958:  MOVLW  62
0995A:  MOVWF  FF6
0995C:  MOVLW  14
0995E:  MOVWF  FF7
09960:  MOVLW  00
09962:  MOVWF  FF8
09964:  MOVLW  0E
09966:  MOVLB  A
09968:  MOVWF  x67
0996A:  MOVLB  0
0996C:  CALL   1DF6
09970:  MOVFF  255,AC8
09974:  MOVLW  37
09976:  MOVLB  A
09978:  MOVWF  xC9
0997A:  MOVLB  0
0997C:  CALL   200A
09980:  MOVLW  0D
09982:  BTFSS  FA6.6
09984:  GOTO   9982
09988:  MOVLB  E
0998A:  MOVWF  xF9
0998C:  MOVLW  0A
0998E:  MOVLB  0
09990:  BTFSS  FA6.6
09992:  GOTO   9990
09996:  MOVLB  E
09998:  MOVWF  xF9
....................    fprintf(PC, "Function Type:%02X\r\n", data.func_type);
0999A:  MOVLW  78
0999C:  MOVWF  FF6
0999E:  MOVLW  14
099A0:  MOVWF  FF7
099A2:  MOVLW  00
099A4:  MOVWF  FF8
099A6:  MOVLW  0E
099A8:  MOVLB  A
099AA:  MOVWF  x67
099AC:  MOVLB  0
099AE:  CALL   1DF6
099B2:  MOVFF  256,AC8
099B6:  MOVLW  37
099B8:  MOVLB  A
099BA:  MOVWF  xC9
099BC:  MOVLB  0
099BE:  CALL   200A
099C2:  MOVLW  0D
099C4:  BTFSS  FA6.6
099C6:  GOTO   99C4
099CA:  MOVLB  E
099CC:  MOVWF  xF9
099CE:  MOVLW  0A
099D0:  MOVLB  0
099D2:  BTFSS  FA6.6
099D4:  GOTO   99D2
099D8:  MOVLB  E
099DA:  MOVWF  xF9
....................    fprintf(PC, "Write Mode:   %02X\r\n", data.write_mode);
099DC:  MOVLW  8E
099DE:  MOVWF  FF6
099E0:  MOVLW  14
099E2:  MOVWF  FF7
099E4:  MOVLW  00
099E6:  MOVWF  FF8
099E8:  MOVLW  0E
099EA:  MOVLB  A
099EC:  MOVWF  x67
099EE:  MOVLB  0
099F0:  CALL   1DF6
099F4:  MOVFF  257,AC8
099F8:  MOVLW  37
099FA:  MOVLB  A
099FC:  MOVWF  xC9
099FE:  MOVLB  0
09A00:  CALL   200A
09A04:  MOVLW  0D
09A06:  BTFSS  FA6.6
09A08:  GOTO   9A06
09A0C:  MOVLB  E
09A0E:  MOVWF  xF9
09A10:  MOVLW  0A
09A12:  MOVLB  0
09A14:  BTFSS  FA6.6
09A16:  GOTO   9A14
09A1A:  MOVLB  E
09A1C:  MOVWF  xF9
....................    fprintf(PC, "Source Type:  %02X\r\n", data.source_type);
09A1E:  MOVLW  00
09A20:  MOVLB  2
09A22:  BTFSC  x58.0
09A24:  MOVLW  01
09A26:  MOVWF  x61
09A28:  MOVLW  A4
09A2A:  MOVWF  FF6
09A2C:  MOVLW  14
09A2E:  MOVWF  FF7
09A30:  MOVLW  00
09A32:  MOVWF  FF8
09A34:  MOVLW  0E
09A36:  MOVLB  A
09A38:  MOVWF  x67
09A3A:  MOVLB  0
09A3C:  CALL   1DF6
09A40:  MOVFF  261,AC8
09A44:  MOVLW  37
09A46:  MOVLB  A
09A48:  MOVWF  xC9
09A4A:  MOVLB  0
09A4C:  CALL   200A
09A50:  MOVLW  0D
09A52:  BTFSS  FA6.6
09A54:  GOTO   9A52
09A58:  MOVLB  E
09A5A:  MOVWF  xF9
09A5C:  MOVLW  0A
09A5E:  MOVLB  0
09A60:  BTFSS  FA6.6
09A62:  GOTO   9A60
09A66:  MOVLB  E
09A68:  MOVWF  xF9
....................    fprintf(PC, "Start Address:%04X\r\n", data.misf_start_addr);
09A6A:  MOVLW  BA
09A6C:  MOVWF  FF6
09A6E:  MOVLW  14
09A70:  MOVWF  FF7
09A72:  MOVLW  00
09A74:  MOVWF  FF8
09A76:  MOVLW  0E
09A78:  MOVLB  A
09A7A:  MOVWF  x67
09A7C:  MOVLB  0
09A7E:  CALL   1DF6
09A82:  MOVLW  02
09A84:  MOVLB  2
09A86:  MOVWF  x61
09A88:  MOVLB  0
09A8A:  MOVLW  30
09A8C:  BTFSS  FA6.6
09A8E:  GOTO   9A8C
09A92:  MOVLB  E
09A94:  MOVWF  xF9
09A96:  MOVLB  2
09A98:  DECFSZ x61,F
09A9A:  BRA    9AA0
09A9C:  BRA    9AA6
09A9E:  MOVLB  0
09AA0:  MOVLB  0
09AA2:  GOTO   9A8A
09AA6:  MOVFF  259,AC8
09AAA:  MOVLW  37
09AAC:  MOVLB  A
09AAE:  MOVWF  xC9
09AB0:  MOVLB  0
09AB2:  CALL   200A
09AB6:  MOVLW  0D
09AB8:  BTFSS  FA6.6
09ABA:  GOTO   9AB8
09ABE:  MOVLB  E
09AC0:  MOVWF  xF9
09AC2:  MOVLW  0A
09AC4:  MOVLB  0
09AC6:  BTFSS  FA6.6
09AC8:  GOTO   9AC6
09ACC:  MOVLB  E
09ACE:  MOVWF  xF9
....................    fprintf(PC, "Size:         %04X\r\n", flash_counter_table[CIGS_IV1_DATA].uncopied_counter);
09AD0:  MOVLW  D0
09AD2:  MOVWF  FF6
09AD4:  MOVLW  14
09AD6:  MOVWF  FF7
09AD8:  MOVLW  00
09ADA:  MOVWF  FF8
09ADC:  MOVLW  0E
09ADE:  MOVLB  A
09AE0:  MOVWF  x67
09AE2:  MOVLB  0
09AE4:  CALL   1DF6
09AE8:  MOVLW  02
09AEA:  MOVLB  2
09AEC:  MOVWF  x61
09AEE:  MOVLB  0
09AF0:  MOVLW  30
09AF2:  BTFSS  FA6.6
09AF4:  GOTO   9AF2
09AF8:  MOVLB  E
09AFA:  MOVWF  xF9
09AFC:  MOVLB  2
09AFE:  DECFSZ x61,F
09B00:  BRA    9B06
09B02:  BRA    9B0C
09B04:  MOVLB  0
09B06:  MOVLB  0
09B08:  GOTO   9AF0
09B0C:  MOVFF  15A,AC8
09B10:  MOVLW  37
09B12:  MOVLB  A
09B14:  MOVWF  xC9
09B16:  MOVLB  0
09B18:  CALL   200A
09B1C:  MOVLW  0D
09B1E:  BTFSS  FA6.6
09B20:  GOTO   9B1E
09B24:  MOVLB  E
09B26:  MOVWF  xF9
09B28:  MOVLW  0A
09B2A:  MOVLB  0
09B2C:  BTFSS  FA6.6
09B2E:  GOTO   9B2C
09B32:  MOVLB  E
09B34:  MOVWF  xF9
.................... 
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
09B36:  MOVLW  02
09B38:  MOVLB  2
09B3A:  MOVWF  x62
09B3C:  MOVLW  55
09B3E:  MOVWF  x61
09B40:  MOVLB  0
09B42:  GOTO   944C
.................... 
....................    fprintf(PC, "End MODE MEAS IV mission\r\n");
09B46:  MOVLW  E6
09B48:  MOVWF  FF6
09B4A:  MOVLW  14
09B4C:  MOVWF  FF7
09B4E:  MOVLW  00
09B50:  MOVWF  FF8
09B52:  CALL   1DC0
09B56:  GOTO   DC8E (RETURN)
.................... }
.................... 
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE IV DEBUG\r\n");
*
0BC9A:  MOVLW  02
0BC9C:  MOVWF  FF6
0BC9E:  MOVLW  15
0BCA0:  MOVWF  FF7
0BCA2:  MOVLW  00
0BCA4:  MOVWF  FF8
0BCA6:  CALL   1DC0
.................... 
....................    MEAS_IV_CMD cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0BCAA:  MOVFF  240,268
0BCAE:  MOVFF  23F,267
0BCB2:  CALL   77FA
0BCB6:  MOVFF  02,03
0BCBA:  MOVF   01,W
0BCBC:  MOVWF  FE1
0BCBE:  MOVFF  03,FE2
0BCC2:  MOVLW  02
0BCC4:  MOVWF  FEA
0BCC6:  MOVLW  41
0BCC8:  MOVWF  FE9
0BCCA:  MOVLW  0C
0BCCC:  MOVWF  01
0BCCE:  MOVFF  FE6,FEE
0BCD2:  DECFSZ 01,F
0BCD4:  GOTO   BCCE
.................... 
....................    fprintf(PC, "\tID: %02X\r\n", cmd.id);
0BCD8:  MOVLW  18
0BCDA:  MOVWF  FF6
0BCDC:  MOVLW  15
0BCDE:  MOVWF  FF7
0BCE0:  MOVLW  00
0BCE2:  MOVWF  FF8
0BCE4:  MOVLW  05
0BCE6:  MOVLB  A
0BCE8:  MOVWF  x67
0BCEA:  MOVLB  0
0BCEC:  CALL   1DF6
0BCF0:  MOVFF  241,AC8
0BCF4:  MOVLW  37
0BCF6:  MOVLB  A
0BCF8:  MOVWF  xC9
0BCFA:  MOVLB  0
0BCFC:  CALL   200A
0BD00:  MOVLW  0D
0BD02:  BTFSS  FA6.6
0BD04:  GOTO   BD02
0BD08:  MOVLB  E
0BD0A:  MOVWF  xF9
0BD0C:  MOVLW  0A
0BD0E:  MOVLB  0
0BD10:  BTFSS  FA6.6
0BD12:  GOTO   BD10
0BD16:  MOVLB  E
0BD18:  MOVWF  xF9
....................    fprintf(PC, "\tSleepTime:        0x%04X\r\n", cmd.sleep_time);
0BD1A:  MOVLW  24
0BD1C:  MOVWF  FF6
0BD1E:  MOVLW  15
0BD20:  MOVWF  FF7
0BD22:  MOVLW  00
0BD24:  MOVWF  FF8
0BD26:  MOVLW  15
0BD28:  MOVLB  A
0BD2A:  MOVWF  x67
0BD2C:  MOVLB  0
0BD2E:  CALL   1DF6
0BD32:  MOVLW  02
0BD34:  MOVLB  2
0BD36:  MOVWF  x55
0BD38:  MOVLB  0
0BD3A:  MOVLW  30
0BD3C:  BTFSS  FA6.6
0BD3E:  GOTO   BD3C
0BD42:  MOVLB  E
0BD44:  MOVWF  xF9
0BD46:  MOVLB  2
0BD48:  DECFSZ x55,F
0BD4A:  BRA    BD50
0BD4C:  BRA    BD56
0BD4E:  MOVLB  0
0BD50:  MOVLB  0
0BD52:  GOTO   BD3A
0BD56:  MOVFF  242,AC8
0BD5A:  MOVLW  37
0BD5C:  MOVLB  A
0BD5E:  MOVWF  xC9
0BD60:  MOVLB  0
0BD62:  CALL   200A
0BD66:  MOVLW  0D
0BD68:  BTFSS  FA6.6
0BD6A:  GOTO   BD68
0BD6E:  MOVLB  E
0BD70:  MOVWF  xF9
0BD72:  MOVLW  0A
0BD74:  MOVLB  0
0BD76:  BTFSS  FA6.6
0BD78:  GOTO   BD76
0BD7C:  MOVLB  E
0BD7E:  MOVWF  xF9
....................    fprintf(PC, "\tLogCurrThreshold: 0x%04X\r\n", cmd.curr_threshold);
0BD80:  MOVLW  40
0BD82:  MOVWF  FF6
0BD84:  MOVLW  15
0BD86:  MOVWF  FF7
0BD88:  MOVLW  00
0BD8A:  MOVWF  FF8
0BD8C:  MOVLW  15
0BD8E:  MOVLB  A
0BD90:  MOVWF  x67
0BD92:  MOVLB  0
0BD94:  CALL   1DF6
0BD98:  MOVLW  02
0BD9A:  MOVLB  2
0BD9C:  MOVWF  x55
0BD9E:  MOVLB  0
0BDA0:  MOVLW  30
0BDA2:  BTFSS  FA6.6
0BDA4:  GOTO   BDA2
0BDA8:  MOVLB  E
0BDAA:  MOVWF  xF9
0BDAC:  MOVLB  2
0BDAE:  DECFSZ x55,F
0BDB0:  BRA    BDB6
0BDB2:  BRA    BDBC
0BDB4:  MOVLB  0
0BDB6:  MOVLB  0
0BDB8:  GOTO   BDA0
0BDBC:  MOVFF  244,AC8
0BDC0:  MOVLW  37
0BDC2:  MOVLB  A
0BDC4:  MOVWF  xC9
0BDC6:  MOVLB  0
0BDC8:  CALL   200A
0BDCC:  MOVLW  0D
0BDCE:  BTFSS  FA6.6
0BDD0:  GOTO   BDCE
0BDD4:  MOVLB  E
0BDD6:  MOVWF  xF9
0BDD8:  MOVLW  0A
0BDDA:  MOVLB  0
0BDDC:  BTFSS  FA6.6
0BDDE:  GOTO   BDDC
0BDE2:  MOVLB  E
0BDE4:  MOVWF  xF9
....................    fprintf(PC, "\tPDThreshold:      0x%04X\r\n", cmd.pd_threshold);
0BDE6:  MOVLW  5C
0BDE8:  MOVWF  FF6
0BDEA:  MOVLW  15
0BDEC:  MOVWF  FF7
0BDEE:  MOVLW  00
0BDF0:  MOVWF  FF8
0BDF2:  MOVLW  15
0BDF4:  MOVLB  A
0BDF6:  MOVWF  x67
0BDF8:  MOVLB  0
0BDFA:  CALL   1DF6
0BDFE:  MOVLW  02
0BE00:  MOVLB  2
0BE02:  MOVWF  x55
0BE04:  MOVLB  0
0BE06:  MOVLW  30
0BE08:  BTFSS  FA6.6
0BE0A:  GOTO   BE08
0BE0E:  MOVLB  E
0BE10:  MOVWF  xF9
0BE12:  MOVLB  2
0BE14:  DECFSZ x55,F
0BE16:  BRA    BE1C
0BE18:  BRA    BE22
0BE1A:  MOVLB  0
0BE1C:  MOVLB  0
0BE1E:  GOTO   BE06
0BE22:  MOVFF  246,AC8
0BE26:  MOVLW  37
0BE28:  MOVLB  A
0BE2A:  MOVWF  xC9
0BE2C:  MOVLB  0
0BE2E:  CALL   200A
0BE32:  MOVLW  0D
0BE34:  BTFSS  FA6.6
0BE36:  GOTO   BE34
0BE3A:  MOVLB  E
0BE3C:  MOVWF  xF9
0BE3E:  MOVLW  0A
0BE40:  MOVLB  0
0BE42:  BTFSS  FA6.6
0BE44:  GOTO   BE42
0BE48:  MOVLB  E
0BE4A:  MOVWF  xF9
....................    fprintf(PC, "\tCurrentLimit:     0x%04X\r\n", cmd.curr_limit);
0BE4C:  MOVLW  78
0BE4E:  MOVWF  FF6
0BE50:  MOVLW  15
0BE52:  MOVWF  FF7
0BE54:  MOVLW  00
0BE56:  MOVWF  FF8
0BE58:  MOVLW  15
0BE5A:  MOVLB  A
0BE5C:  MOVWF  x67
0BE5E:  MOVLB  0
0BE60:  CALL   1DF6
0BE64:  MOVLW  02
0BE66:  MOVLB  2
0BE68:  MOVWF  x55
0BE6A:  MOVLB  0
0BE6C:  MOVLW  30
0BE6E:  BTFSS  FA6.6
0BE70:  GOTO   BE6E
0BE74:  MOVLB  E
0BE76:  MOVWF  xF9
0BE78:  MOVLB  2
0BE7A:  DECFSZ x55,F
0BE7C:  BRA    BE82
0BE7E:  BRA    BE88
0BE80:  MOVLB  0
0BE82:  MOVLB  0
0BE84:  GOTO   BE6C
0BE88:  MOVFF  248,AC8
0BE8C:  MOVLW  37
0BE8E:  MOVLB  A
0BE90:  MOVWF  xC9
0BE92:  MOVLB  0
0BE94:  CALL   200A
0BE98:  MOVLW  0D
0BE9A:  BTFSS  FA6.6
0BE9C:  GOTO   BE9A
0BEA0:  MOVLB  E
0BEA2:  MOVWF  xF9
0BEA4:  MOVLW  0A
0BEA6:  MOVLB  0
0BEA8:  BTFSS  FA6.6
0BEAA:  GOTO   BEA8
0BEAE:  MOVLB  E
0BEB0:  MOVWF  xF9
....................    fprintf(PC, "\tMeasurementTime:  0x%04X\r\n", cmd.meas_time);
0BEB2:  MOVLW  94
0BEB4:  MOVWF  FF6
0BEB6:  MOVLW  15
0BEB8:  MOVWF  FF7
0BEBA:  MOVLW  00
0BEBC:  MOVWF  FF8
0BEBE:  MOVLW  15
0BEC0:  MOVLB  A
0BEC2:  MOVWF  x67
0BEC4:  MOVLB  0
0BEC6:  CALL   1DF6
0BECA:  MOVLW  02
0BECC:  MOVLB  2
0BECE:  MOVWF  x55
0BED0:  MOVLB  0
0BED2:  MOVLW  30
0BED4:  BTFSS  FA6.6
0BED6:  GOTO   BED4
0BEDA:  MOVLB  E
0BEDC:  MOVWF  xF9
0BEDE:  MOVLB  2
0BEE0:  DECFSZ x55,F
0BEE2:  BRA    BEE8
0BEE4:  BRA    BEEE
0BEE6:  MOVLB  0
0BEE8:  MOVLB  0
0BEEA:  GOTO   BED2
0BEEE:  MOVFF  24A,AC8
0BEF2:  MOVLW  37
0BEF4:  MOVLB  A
0BEF6:  MOVWF  xC9
0BEF8:  MOVLB  0
0BEFA:  CALL   200A
0BEFE:  MOVLW  0D
0BF00:  BTFSS  FA6.6
0BF02:  GOTO   BF00
0BF06:  MOVLB  E
0BF08:  MOVWF  xF9
0BF0A:  MOVLW  0A
0BF0C:  MOVLB  0
0BF0E:  BTFSS  FA6.6
0BF10:  GOTO   BF0E
0BF14:  MOVLB  E
0BF16:  MOVWF  xF9
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_START); // Log start
0BF18:  MOVFF  241,296
0BF1C:  MOVLB  2
0BF1E:  CLRF   x97
0BF20:  MOVLB  0
0BF22:  CALL   4AE2
.................... 
....................    unsigned int32 start_time = get_current_time_10ms();
....................    unsigned int32 current_time = 0;
0BF26:  CALL   9B5A
0BF2A:  MOVFF  03,250
0BF2E:  MOVFF  02,24F
0BF32:  MOVFF  01,24E
0BF36:  MOVFF  00,24D
0BF3A:  MOVLB  2
0BF3C:  CLRF   x54
0BF3E:  CLRF   x53
0BF40:  CLRF   x52
0BF42:  CLRF   x51
....................    test_sweep(cmd.curr_threshold, cmd.curr_limit);
0BF44:  MOVFF  245,256
0BF48:  MOVFF  244,255
0BF4C:  MOVFF  249,258
0BF50:  MOVFF  248,257
0BF54:  MOVLB  0
0BF56:  GOTO   A7A0
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_END);
0BF5A:  MOVFF  241,296
0BF5E:  MOVLB  2
0BF60:  SETF   x97
0BF62:  MOVLB  0
0BF64:  CALL   4AE2
....................    fprintf(PC, "[IVDBG] End MODE IV DEBUG\r\n");
0BF68:  MOVLW  B0
0BF6A:  MOVWF  FF6
0BF6C:  MOVLW  15
0BF6E:  MOVWF  FF7
0BF70:  MOVLW  00
0BF72:  MOVWF  FF8
0BF74:  CALL   1DC0
0BF78:  GOTO   DC9E (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 *uplinkcmd[])
.................... {
....................    MEAS_IV_CMD cmd;
....................    cmd.id = uplinkcmd[0];
*
077FA:  MOVLB  2
077FC:  MOVF   x67,W
077FE:  MOVWF  FE9
07800:  MOVF   x68,W
07802:  MOVWF  FEA
07804:  MOVFF  FEF,269
....................    cmd.sleep_time = ((unsigned int16)uplinkcmd[1] << 8) | ((unsigned int16)uplinkcmd[2]);
07808:  MOVLW  01
0780A:  ADDWF  x67,W
0780C:  MOVWF  FE9
0780E:  MOVLW  00
07810:  ADDWFC x68,W
07812:  MOVWF  FEA
07814:  MOVF   FEF,W
07816:  CLRF   x76
07818:  MOVWF  x75
0781A:  MOVFF  275,276
0781E:  CLRF   x75
07820:  MOVLW  02
07822:  ADDWF  x67,W
07824:  MOVWF  FE9
07826:  MOVLW  00
07828:  ADDWFC x68,W
0782A:  MOVWF  FEA
0782C:  MOVF   FEF,W
0782E:  CLRF   03
07830:  IORWF  x75,W
07832:  MOVWF  x6A
07834:  MOVF   03,W
07836:  IORWF  x76,W
07838:  MOVWF  x6B
....................    cmd.curr_threshold = (unsigned int16)uplinkcmd[3]<< 4;
0783A:  MOVLW  03
0783C:  ADDWF  x67,W
0783E:  MOVWF  FE9
07840:  MOVLW  00
07842:  ADDWFC x68,W
07844:  MOVWF  FEA
07846:  MOVF   FEF,W
07848:  CLRF   x76
0784A:  MOVWF  x75
0784C:  RLCF   x75,W
0784E:  MOVWF  x6C
07850:  RLCF   x76,W
07852:  MOVWF  x6D
07854:  RLCF   x6C,F
07856:  RLCF   x6D,F
07858:  RLCF   x6C,F
0785A:  RLCF   x6D,F
0785C:  RLCF   x6C,F
0785E:  RLCF   x6D,F
07860:  MOVLW  F0
07862:  ANDWF  x6C,F
....................    cmd.pd_threshold = (unsigned int16)uplinkcmd[4]<< 4;
07864:  MOVLW  04
07866:  ADDWF  x67,W
07868:  MOVWF  FE9
0786A:  MOVLW  00
0786C:  ADDWFC x68,W
0786E:  MOVWF  FEA
07870:  MOVF   FEF,W
07872:  CLRF   x76
07874:  MOVWF  x75
07876:  RLCF   x75,W
07878:  MOVWF  x6E
0787A:  RLCF   x76,W
0787C:  MOVWF  x6F
0787E:  RLCF   x6E,F
07880:  RLCF   x6F,F
07882:  RLCF   x6E,F
07884:  RLCF   x6F,F
07886:  RLCF   x6E,F
07888:  RLCF   x6F,F
0788A:  MOVLW  F0
0788C:  ANDWF  x6E,F
....................    cmd.curr_limit = (unsigned int16)uplinkcmd[5]<< 4;
0788E:  MOVLW  05
07890:  ADDWF  x67,W
07892:  MOVWF  FE9
07894:  MOVLW  00
07896:  ADDWFC x68,W
07898:  MOVWF  FEA
0789A:  MOVF   FEF,W
0789C:  CLRF   x76
0789E:  MOVWF  x75
078A0:  RLCF   x75,W
078A2:  MOVWF  x70
078A4:  RLCF   x76,W
078A6:  MOVWF  x71
078A8:  RLCF   x70,F
078AA:  RLCF   x71,F
078AC:  RLCF   x70,F
078AE:  RLCF   x71,F
078B0:  RLCF   x70,F
078B2:  RLCF   x71,F
078B4:  MOVLW  F0
078B6:  ANDWF  x70,F
....................    cmd.meas_time = ((unsigned int16)uplinkcmd[6] << 8) | ((unsigned int16)uplinkcmd[7]);
078B8:  MOVLW  06
078BA:  ADDWF  x67,W
078BC:  MOVWF  FE9
078BE:  MOVLW  00
078C0:  ADDWFC x68,W
078C2:  MOVWF  FEA
078C4:  MOVF   FEF,W
078C6:  CLRF   x76
078C8:  MOVWF  x75
078CA:  MOVFF  275,276
078CE:  CLRF   x75
078D0:  MOVLW  07
078D2:  ADDWF  x67,W
078D4:  MOVWF  FE9
078D6:  MOVLW  00
078D8:  ADDWFC x68,W
078DA:  MOVWF  FEA
078DC:  MOVF   FEF,W
078DE:  CLRF   03
078E0:  IORWF  x75,W
078E2:  MOVWF  x72
078E4:  MOVF   03,W
078E6:  IORWF  x76,W
078E8:  MOVWF  x73
.................... //!  cmd.is_finished = uplinkcmd[8];
....................    return cmd;
078EA:  MOVLW  69
078EC:  MOVWF  01
078EE:  MOVLW  02
078F0:  MOVWF  02
078F2:  MOVLB  0
078F4:  RETURN 0
.................... }
.................... 
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr)
*
0BF7C:  MOVLB  2
0BF7E:  CLRF   x42
0BF80:  MOVLW  64
0BF82:  MOVWF  x41
0BF84:  SETF   x44
0BF86:  SETF   x43
0BF88:  MOVLB  0
0BF8A:  CALL   9B5A
0BF8E:  MOVFF  03,248
0BF92:  MOVFF  02,247
0BF96:  MOVFF  01,246
0BF9A:  MOVFF  00,245
0BF9E:  MOVLB  2
0BFA0:  MOVF   x41,W
0BFA2:  SUBWF  x45,W
0BFA4:  MOVWF  x49
0BFA6:  MOVF   x42,W
0BFA8:  SUBWFB x46,W
0BFAA:  MOVWF  x4A
0BFAC:  MOVLW  00
0BFAE:  SUBWFB x47,W
0BFB0:  MOVWF  x4B
0BFB2:  MOVLW  00
0BFB4:  SUBWFB x48,W
0BFB6:  MOVWF  x4C
.................... {
....................    unsigned int16 interval = 100;   // 測定間隔 [秒]
....................    unsigned int16 end_time = 0xFFFF;
.................... 
....................    unsigned int32 current_time = get_current_time_10ms();
....................    unsigned int32 last_time = current_time - interval;  // 最初にすぐ測定するため
.................... 
....................    // loging data
....................    unsigned int8 logdata[6];
....................    unsigned int16 temp_top;
....................    unsigned int16 temp_bot;
....................    unsigned int16 temp_mis7;
....................    unsigned int16 PD;
.................... 
....................    // Flash Write 
....................    unsigned int32 write_address;
.................... 
....................    fprintf(PC, "temp_top, temp_bot, temp_mis7, pd\r\n");
0BFB8:  MOVLW  CC
0BFBA:  MOVWF  FF6
0BFBC:  MOVLW  15
0BFBE:  MOVWF  FF7
0BFC0:  MOVLW  00
0BFC2:  MOVWF  FF8
0BFC4:  MOVLB  0
0BFC6:  CALL   1DC0
.................... 
....................    while (true) {
....................        current_time = get_current_time_10ms();
0BFCA:  CALL   9B5A
0BFCE:  MOVFF  03,248
0BFD2:  MOVFF  02,247
0BFD6:  MOVFF  01,246
0BFDA:  MOVFF  00,245
.................... 
....................        // intervalごとに測定
....................        if ((current_time - last_time) >= interval) {
0BFDE:  MOVLB  2
0BFE0:  MOVF   x49,W
0BFE2:  SUBWF  x45,W
0BFE4:  MOVWF  x63
0BFE6:  MOVF   x4A,W
0BFE8:  SUBWFB x46,W
0BFEA:  MOVWF  x64
0BFEC:  MOVF   x4B,W
0BFEE:  SUBWFB x47,W
0BFF0:  MOVWF  x65
0BFF2:  MOVF   x4C,W
0BFF4:  SUBWFB x48,W
0BFF6:  MOVWF  x66
0BFF8:  MOVF   x66,F
0BFFA:  BTFSC  FD8.2
0BFFC:  BRA    C004
0BFFE:  MOVLB  0
0C000:  GOTO   C040
0C004:  MOVLB  0
0C006:  MOVLB  2
0C008:  MOVF   x65,F
0C00A:  BTFSC  FD8.2
0C00C:  BRA    C014
0C00E:  MOVLB  0
0C010:  GOTO   C040
0C014:  MOVLB  0
0C016:  MOVLB  2
0C018:  MOVF   x42,W
0C01A:  SUBWF  x64,W
0C01C:  BTFSC  FD8.0
0C01E:  BRA    C026
0C020:  MOVLB  0
0C022:  GOTO   C450
0C026:  MOVLB  0
0C028:  BTFSS  FD8.2
0C02A:  GOTO   C040
0C02E:  MOVLB  2
0C030:  MOVF   x41,W
0C032:  SUBWF  x63,W
0C034:  BTFSC  FD8.0
0C036:  BRA    C03E
0C038:  MOVLB  0
0C03A:  GOTO   C450
0C03E:  MOVLB  0
....................            last_time = current_time;
0C040:  MOVFF  248,24C
0C044:  MOVFF  247,24B
0C048:  MOVFF  246,24A
0C04C:  MOVFF  245,249
.................... 
....................            // ★ 次の測定データ(6バイト)で64バイト境界を超えるか確認
....................            if (environment_data_ptr->reserve_counter1 + 6 > PACKET_SIZE) {
0C050:  MOVLW  09
0C052:  MOVLB  1
0C054:  ADDWF  x24,W
0C056:  MOVWF  FE9
0C058:  MOVLW  00
0C05A:  ADDWFC x25,W
0C05C:  MOVWF  FEA
0C05E:  MOVLW  06
0C060:  ADDWF  FEF,W
0C062:  SUBLW  40
0C064:  BTFSS  FD8.0
0C066:  BRA    C06E
0C068:  MOVLB  0
0C06A:  GOTO   C184
0C06E:  MOVLB  0
....................                unsigned int8 bankdata[4] = {0};
0C070:  MOVLB  2
0C072:  CLRF   x5F
0C074:  CLRF   x60
0C076:  CLRF   x61
0C078:  CLRF   x62
0C07A:  MOVLB  0
....................                write_address = MISF_CIGS_ENVIRO_START + environment_data_ptr->used_counter;
0C07C:  MOVLW  01
0C07E:  MOVLB  1
0C080:  ADDWF  x24,W
0C082:  MOVWF  FE9
0C084:  MOVLW  00
0C086:  ADDWFC x25,W
0C088:  MOVWF  FEA
0C08A:  MOVFF  FEF,00
0C08E:  MOVFF  FEC,01
0C092:  MOVFF  FEC,02
0C096:  MOVFF  FEC,03
0C09A:  MOVF   FED,F
0C09C:  MOVF   FED,F
0C09E:  MOVF   FED,F
0C0A0:  MOVF   00,W
0C0A2:  MOVLB  2
0C0A4:  MOVWF  x5B
0C0A6:  MOVLW  10
0C0A8:  ADDWF  01,W
0C0AA:  MOVWF  x5C
0C0AC:  MOVLW  28
0C0AE:  ADDWFC 02,W
0C0B0:  MOVWF  x5D
0C0B2:  MOVLW  00
0C0B4:  ADDWFC 03,W
0C0B6:  MOVWF  x5E
....................                write_data_bytes(mis_fm, write_address, bankdata, 4);
0C0B8:  MOVFF  115,B9F
0C0BC:  MOVFF  114,B9E
0C0C0:  MOVFF  113,B9D
0C0C4:  MOVFF  112,B9C
0C0C8:  MOVFF  25E,BA3
0C0CC:  MOVFF  25D,BA2
0C0D0:  MOVFF  25C,BA1
0C0D4:  MOVFF  25B,BA0
0C0D8:  MOVLW  02
0C0DA:  MOVLB  B
0C0DC:  MOVWF  xA5
0C0DE:  MOVLW  5F
0C0E0:  MOVWF  xA4
0C0E2:  CLRF   xA7
0C0E4:  MOVLW  04
0C0E6:  MOVWF  xA6
0C0E8:  MOVLB  0
0C0EA:  CALL   39FE
....................                environment_data_ptr->used_counter   += 4;
0C0EE:  MOVLW  01
0C0F0:  MOVLB  1
0C0F2:  ADDWF  x24,W
0C0F4:  MOVWF  FE9
0C0F6:  MOVLW  00
0C0F8:  ADDWFC x25,W
0C0FA:  MOVWF  FEA
0C0FC:  MOVLW  04
0C0FE:  ADDWF  FEF,W
0C100:  MOVWF  00
0C102:  MOVLW  00
0C104:  ADDWFC FEC,W
0C106:  MOVWF  01
0C108:  MOVLW  00
0C10A:  ADDWFC FEC,W
0C10C:  MOVWF  02
0C10E:  MOVLW  00
0C110:  ADDWFC FEC,W
0C112:  MOVWF  03
0C114:  MOVF   FED,F
0C116:  MOVF   FED,F
0C118:  MOVF   FED,F
0C11A:  MOVFF  00,FEF
0C11E:  MOVFF  01,FEC
0C122:  MOVFF  02,FEC
0C126:  MOVFF  03,FEC
0C12A:  MOVF   FED,F
0C12C:  MOVF   FED,F
0C12E:  MOVF   FED,F
....................                environment_data_ptr->uncopied_counter += 4;
0C130:  MOVLW  05
0C132:  ADDWF  x24,W
0C134:  MOVWF  FE9
0C136:  MOVLW  00
0C138:  ADDWFC x25,W
0C13A:  MOVWF  FEA
0C13C:  MOVLW  04
0C13E:  ADDWF  FEF,W
0C140:  MOVWF  00
0C142:  MOVLW  00
0C144:  ADDWFC FEC,W
0C146:  MOVWF  01
0C148:  MOVLW  00
0C14A:  ADDWFC FEC,W
0C14C:  MOVWF  02
0C14E:  MOVLW  00
0C150:  ADDWFC FEC,W
0C152:  MOVWF  03
0C154:  MOVF   FED,F
0C156:  MOVF   FED,F
0C158:  MOVF   FED,F
0C15A:  MOVFF  00,FEF
0C15E:  MOVFF  01,FEC
0C162:  MOVFF  02,FEC
0C166:  MOVFF  03,FEC
0C16A:  MOVF   FED,F
0C16C:  MOVF   FED,F
0C16E:  MOVF   FED,F
....................                environment_data_ptr->reserve_counter1 = 0;
0C170:  MOVLW  09
0C172:  ADDWF  x24,W
0C174:  MOVWF  FE9
0C176:  MOVLW  00
0C178:  ADDWFC x25,W
0C17A:  MOVWF  FEA
0C17C:  CLRF   FEF
....................                misf_update_address_area();
0C17E:  MOVLB  0
0C180:  CALL   423A
....................            }
.................... 
....................            // 環境データ読み取り
....................            temp_top  = ad7490_read(ADC_TEMP_PY_TOP);
0C184:  MOVLW  0D
0C186:  MOVLB  A
0C188:  MOVWF  x87
0C18A:  MOVLB  0
0C18C:  CALL   1F7E
0C190:  MOVFF  02,254
0C194:  MOVFF  01,253
....................            temp_bot  = ad7490_read(ADC_TEMP_PY_BOT);
0C198:  MOVLW  0E
0C19A:  MOVLB  A
0C19C:  MOVWF  x87
0C19E:  MOVLB  0
0C1A0:  CALL   1F7E
0C1A4:  MOVFF  02,256
0C1A8:  MOVFF  01,255
....................            temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
0C1AC:  MOVLW  0C
0C1AE:  MOVLB  A
0C1B0:  MOVWF  x87
0C1B2:  MOVLB  0
0C1B4:  CALL   1F7E
0C1B8:  MOVFF  02,258
0C1BC:  MOVFF  01,257
....................            PD        = ad7490_read(ADC_PD);
0C1C0:  MOVLW  0F
0C1C2:  MOVLB  A
0C1C4:  MOVWF  x87
0C1C6:  MOVLB  0
0C1C8:  CALL   1F7E
0C1CC:  MOVFF  02,25A
0C1D0:  MOVFF  01,259
.................... 
....................            logdata[0] = (temp_top >> 4) & 0xFF;
0C1D4:  MOVLB  2
0C1D6:  RRCF   x54,W
0C1D8:  MOVWF  x64
0C1DA:  RRCF   x53,W
0C1DC:  MOVWF  x63
0C1DE:  RRCF   x64,F
0C1E0:  RRCF   x63,F
0C1E2:  RRCF   x64,F
0C1E4:  RRCF   x63,F
0C1E6:  RRCF   x64,F
0C1E8:  RRCF   x63,F
0C1EA:  MOVLW  0F
0C1EC:  ANDWF  x64,F
0C1EE:  MOVF   x63,W
0C1F0:  MOVWF  x4D
....................            logdata[1] = ((temp_top & 0x0F) << 4) | ((temp_bot >> 8) & 0x0F);
0C1F2:  MOVF   x53,W
0C1F4:  ANDLW  0F
0C1F6:  MOVWF  x63
0C1F8:  CLRF   x64
0C1FA:  RLCF   x63,F
0C1FC:  RLCF   x64,F
0C1FE:  RLCF   x63,F
0C200:  RLCF   x64,F
0C202:  RLCF   x63,F
0C204:  RLCF   x64,F
0C206:  RLCF   x63,F
0C208:  RLCF   x64,F
0C20A:  MOVLW  F0
0C20C:  ANDWF  x63,F
0C20E:  MOVFF  256,265
0C212:  CLRF   x66
0C214:  MOVF   x65,W
0C216:  ANDLW  0F
0C218:  MOVWF  00
0C21A:  CLRF   03
0C21C:  MOVF   00,W
0C21E:  IORWF  x63,W
0C220:  MOVWF  x4E
....................            logdata[2] = temp_bot & 0xFF;
0C222:  MOVF   x55,W
0C224:  MOVWF  x4F
....................            logdata[3] = (temp_mis7 >> 4) & 0xFF;
0C226:  RRCF   x58,W
0C228:  MOVWF  x64
0C22A:  RRCF   x57,W
0C22C:  MOVWF  x63
0C22E:  RRCF   x64,F
0C230:  RRCF   x63,F
0C232:  RRCF   x64,F
0C234:  RRCF   x63,F
0C236:  RRCF   x64,F
0C238:  RRCF   x63,F
0C23A:  MOVLW  0F
0C23C:  ANDWF  x64,F
0C23E:  MOVF   x63,W
0C240:  MOVWF  x50
....................            logdata[4] = temp_mis7 & 0xFF;
0C242:  MOVF   x57,W
0C244:  MOVWF  x51
....................            logdata[5] = PD & 0xFF;
0C246:  MOVF   x59,W
0C248:  MOVWF  x52
.................... 
....................            // 書き込み
....................            write_address = MISF_CIGS_ENVIRO_START + environment_data_ptr->used_counter;
0C24A:  MOVLW  01
0C24C:  MOVLB  1
0C24E:  ADDWF  x24,W
0C250:  MOVWF  FE9
0C252:  MOVLW  00
0C254:  ADDWFC x25,W
0C256:  MOVWF  FEA
0C258:  MOVFF  FEF,00
0C25C:  MOVFF  FEC,01
0C260:  MOVFF  FEC,02
0C264:  MOVFF  FEC,03
0C268:  MOVF   FED,F
0C26A:  MOVF   FED,F
0C26C:  MOVF   FED,F
0C26E:  MOVF   00,W
0C270:  MOVLB  2
0C272:  MOVWF  x5B
0C274:  MOVLW  10
0C276:  ADDWF  01,W
0C278:  MOVWF  x5C
0C27A:  MOVLW  28
0C27C:  ADDWFC 02,W
0C27E:  MOVWF  x5D
0C280:  MOVLW  00
0C282:  ADDWFC 03,W
0C284:  MOVWF  x5E
....................            write_data_bytes(mis_fm, write_address, logdata, 6);
0C286:  MOVFF  115,B9F
0C28A:  MOVFF  114,B9E
0C28E:  MOVFF  113,B9D
0C292:  MOVFF  112,B9C
0C296:  MOVFF  25E,BA3
0C29A:  MOVFF  25D,BA2
0C29E:  MOVFF  25C,BA1
0C2A2:  MOVFF  25B,BA0
0C2A6:  MOVLW  02
0C2A8:  MOVLB  B
0C2AA:  MOVWF  xA5
0C2AC:  MOVLW  4D
0C2AE:  MOVWF  xA4
0C2B0:  CLRF   xA7
0C2B2:  MOVLW  06
0C2B4:  MOVWF  xA6
0C2B6:  MOVLB  0
0C2B8:  CALL   39FE
....................            environment_data_ptr->used_counter   += 6;
0C2BC:  MOVLW  01
0C2BE:  MOVLB  1
0C2C0:  ADDWF  x24,W
0C2C2:  MOVWF  FE9
0C2C4:  MOVLW  00
0C2C6:  ADDWFC x25,W
0C2C8:  MOVWF  FEA
0C2CA:  MOVLW  06
0C2CC:  ADDWF  FEF,W
0C2CE:  MOVWF  00
0C2D0:  MOVLW  00
0C2D2:  ADDWFC FEC,W
0C2D4:  MOVWF  01
0C2D6:  MOVLW  00
0C2D8:  ADDWFC FEC,W
0C2DA:  MOVWF  02
0C2DC:  MOVLW  00
0C2DE:  ADDWFC FEC,W
0C2E0:  MOVWF  03
0C2E2:  MOVF   FED,F
0C2E4:  MOVF   FED,F
0C2E6:  MOVF   FED,F
0C2E8:  MOVFF  00,FEF
0C2EC:  MOVFF  01,FEC
0C2F0:  MOVFF  02,FEC
0C2F4:  MOVFF  03,FEC
0C2F8:  MOVF   FED,F
0C2FA:  MOVF   FED,F
0C2FC:  MOVF   FED,F
....................            environment_data_ptr->uncopied_counter += 6;
0C2FE:  MOVLW  05
0C300:  ADDWF  x24,W
0C302:  MOVWF  FE9
0C304:  MOVLW  00
0C306:  ADDWFC x25,W
0C308:  MOVWF  FEA
0C30A:  MOVLW  06
0C30C:  ADDWF  FEF,W
0C30E:  MOVWF  00
0C310:  MOVLW  00
0C312:  ADDWFC FEC,W
0C314:  MOVWF  01
0C316:  MOVLW  00
0C318:  ADDWFC FEC,W
0C31A:  MOVWF  02
0C31C:  MOVLW  00
0C31E:  ADDWFC FEC,W
0C320:  MOVWF  03
0C322:  MOVF   FED,F
0C324:  MOVF   FED,F
0C326:  MOVF   FED,F
0C328:  MOVFF  00,FEF
0C32C:  MOVFF  01,FEC
0C330:  MOVFF  02,FEC
0C334:  MOVFF  03,FEC
0C338:  MOVF   FED,F
0C33A:  MOVF   FED,F
0C33C:  MOVF   FED,F
....................            environment_data_ptr->reserve_counter1 += 6;
0C33E:  MOVLW  09
0C340:  ADDWF  x24,W
0C342:  MOVWF  FE9
0C344:  MOVLW  00
0C346:  ADDWFC x25,W
0C348:  MOVWF  FEA
0C34A:  MOVLW  06
0C34C:  ADDWF  FEF,W
0C34E:  MOVWF  FEF
....................            fprintf(PC, "0x%04LX, 0x%04LX, 0x%04LX, 0x%04LX\r\n", temp_top, temp_bot, temp_mis7, PD);
0C350:  MOVLW  30
0C352:  MOVLB  0
0C354:  BTFSS  FA6.6
0C356:  GOTO   C354
0C35A:  MOVLB  E
0C35C:  MOVWF  xF9
0C35E:  MOVLW  78
0C360:  MOVLB  0
0C362:  BTFSS  FA6.6
0C364:  GOTO   C362
0C368:  MOVLB  E
0C36A:  MOVWF  xF9
0C36C:  MOVFF  254,AC8
0C370:  MOVLW  37
0C372:  MOVLB  A
0C374:  MOVWF  xC9
0C376:  MOVLB  0
0C378:  CALL   200A
0C37C:  MOVFF  253,AC8
0C380:  MOVLW  37
0C382:  MOVLB  A
0C384:  MOVWF  xC9
0C386:  MOVLB  0
0C388:  CALL   200A
0C38C:  MOVLW  F7
0C38E:  MOVWF  FF6
0C390:  MOVLW  15
0C392:  MOVWF  FF7
0C394:  MOVLW  00
0C396:  MOVWF  FF8
0C398:  MOVLW  04
0C39A:  MOVLB  A
0C39C:  MOVWF  x67
0C39E:  MOVLB  0
0C3A0:  CALL   1DF6
0C3A4:  MOVFF  256,AC8
0C3A8:  MOVLW  37
0C3AA:  MOVLB  A
0C3AC:  MOVWF  xC9
0C3AE:  MOVLB  0
0C3B0:  CALL   200A
0C3B4:  MOVFF  255,AC8
0C3B8:  MOVLW  37
0C3BA:  MOVLB  A
0C3BC:  MOVWF  xC9
0C3BE:  MOVLB  0
0C3C0:  CALL   200A
0C3C4:  MOVLW  00
0C3C6:  MOVWF  FF6
0C3C8:  MOVLW  16
0C3CA:  MOVWF  FF7
0C3CC:  MOVLW  00
0C3CE:  MOVWF  FF8
0C3D0:  MOVLW  04
0C3D2:  MOVLB  A
0C3D4:  MOVWF  x67
0C3D6:  MOVLB  0
0C3D8:  CALL   1DF6
0C3DC:  MOVFF  258,AC8
0C3E0:  MOVLW  37
0C3E2:  MOVLB  A
0C3E4:  MOVWF  xC9
0C3E6:  MOVLB  0
0C3E8:  CALL   200A
0C3EC:  MOVFF  257,AC8
0C3F0:  MOVLW  37
0C3F2:  MOVLB  A
0C3F4:  MOVWF  xC9
0C3F6:  MOVLB  0
0C3F8:  CALL   200A
0C3FC:  MOVLW  09
0C3FE:  MOVWF  FF6
0C400:  MOVLW  16
0C402:  MOVWF  FF7
0C404:  MOVLW  00
0C406:  MOVWF  FF8
0C408:  MOVLW  04
0C40A:  MOVLB  A
0C40C:  MOVWF  x67
0C40E:  MOVLB  0
0C410:  CALL   1DF6
0C414:  MOVFF  25A,AC8
0C418:  MOVLW  37
0C41A:  MOVLB  A
0C41C:  MOVWF  xC9
0C41E:  MOVLB  0
0C420:  CALL   200A
0C424:  MOVFF  259,AC8
0C428:  MOVLW  37
0C42A:  MOVLB  A
0C42C:  MOVWF  xC9
0C42E:  MOVLB  0
0C430:  CALL   200A
0C434:  MOVLW  0D
0C436:  BTFSS  FA6.6
0C438:  GOTO   C436
0C43C:  MOVLB  E
0C43E:  MOVWF  xF9
0C440:  MOVLW  0A
0C442:  MOVLB  0
0C444:  BTFSS  FA6.6
0C446:  GOTO   C444
0C44A:  MOVLB  E
0C44C:  MOVWF  xF9
0C44E:  MOVLB  0
....................        }
.................... 
....................        delay_ms(1);  // 過負荷防止用
0C450:  MOVLW  01
0C452:  MOVLB  B
0C454:  MOVWF  xB4
0C456:  MOVLB  0
0C458:  CALL   1D92
0C45C:  GOTO   BFCA
....................    }
0C460:  GOTO   DCAE (RETURN)
.................... }
.................... 
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS ENV DEBUG\r\n");
0C464:  MOVLW  16
0C466:  MOVWF  FF6
0C468:  MOVLW  16
0C46A:  MOVWF  FF7
0C46C:  MOVLW  00
0C46E:  MOVWF  FF8
0C470:  CALL   1DC0
....................    // Add debug-specific implementation here
....................    fprintf(PC, "End MODE MEAS ENV DEBUG\r\n");
0C474:  MOVLW  32
0C476:  MOVWF  FF6
0C478:  MOVLW  16
0C47A:  MOVWF  FF7
0C47C:  MOVLW  00
0C47E:  MOVWF  FF8
0C480:  CALL   1DC0
0C484:  GOTO   DCBE (RETURN)
.................... }
.................... 
.................... #include "application/mmj_cigs_mode_flash.c"
.................... #include "mmj_cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/mmj_cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../domain/mmj_cigs_flash.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... #include "../hal/mmj_cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x000FFFFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  0x00001000
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     0x00010000
.................... #define MISF_CIGS_ENVIRO_START    0x00281000
.................... #define MISF_CIGS_ENVIRO_END      0x00320FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     0x00010000
.................... #define MISF_CIGS_IV1_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV1_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  0x00010000
.................... #define MISF_CIGS_IV1_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV1_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    0x00010000
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  0x00010000
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    0x00010000
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... // グローバルカウンタ（他 .c で定義済みなら extern に）
.................... extern Flash_t *data_table_ptr;
.................... extern Flash_t *piclog_data_ptr;
.................... extern Flash_t *environment_data_ptr;
.................... extern Flash_t *iv1_header_ptr;
.................... extern Flash_t *iv1_data_ptr;
.................... extern Flash_t *iv2_header_ptr;
.................... extern Flash_t *iv2_data_ptr;
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... // MISF アドレス/書き込み構造体
.................... typedef struct {
....................     int32 start_address;
....................     int32 end_address;
.................... } MisfAddressStruct;
.................... 
.................... typedef struct {
....................     int32 start_address;
....................     int32 size;
.................... } MisfWriteStruct;
.................... 
.................... MisfAddressStruct get_misf_address_struct(MissionID mission_id);
.................... MisfWriteStruct  get_misf_write_struct(MissionID mission_id);
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t flash_counter_table[];
.................... extern FlashCounter_t *flash_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/mmj_cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... 
.................... // ========================== MISF Command ============================
.................... void mode_misf_erase_all(int8 parameter[])
.................... {
....................    printf("Start Flash Erase All\r\n");
*
05308:  MOVLW  4C
0530A:  MOVWF  FF6
0530C:  MOVLW  16
0530E:  MOVWF  FF7
05310:  MOVLW  00
05312:  MOVWF  FF8
05314:  CALL   1DC0
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
05318:  MOVLB  2
0531A:  MOVF   x41,W
0531C:  MOVWF  FE9
0531E:  MOVF   x42,W
05320:  MOVWF  FEA
05322:  MOVFF  FEF,243
....................    piclog_make(cmd, 0x00); // Log the command execution
05326:  MOVFF  243,296
0532A:  CLRF   x97
0532C:  MOVLB  0
0532E:  CALL   4AE2
....................    
....................    for (int32 address = MISF_START; address < MISF_END; address += SECTOR_64K_BYTE) {
05332:  MOVLB  2
05334:  CLRF   x47
05336:  CLRF   x46
05338:  CLRF   x45
0533A:  CLRF   x44
0533C:  MOVLB  0
0533E:  MOVLB  2
05340:  MOVF   x47,F
05342:  BTFSC  FD8.2
05344:  BRA    534C
05346:  MOVLB  0
05348:  GOTO   53C4
0534C:  MOVLB  0
0534E:  MOVLB  2
05350:  MOVF   x46,W
05352:  SUBLW  0F
05354:  BTFSC  FD8.0
05356:  BRA    535E
05358:  MOVLB  0
0535A:  GOTO   53C4
0535E:  MOVLB  0
05360:  BTFSS  FD8.2
05362:  GOTO   5390
05366:  MOVLB  2
05368:  MOVF   x45,W
0536A:  SUBLW  FF
0536C:  BTFSC  FD8.0
0536E:  BRA    5376
05370:  MOVLB  0
05372:  GOTO   53C4
05376:  MOVLB  0
05378:  BTFSS  FD8.2
0537A:  GOTO   5390
0537E:  MOVLB  2
05380:  MOVF   x44,W
05382:  SUBLW  FE
05384:  BTFSC  FD8.0
05386:  BRA    538E
05388:  MOVLB  0
0538A:  GOTO   53C4
0538E:  MOVLB  0
....................       sector_erase(mis_fm, address); // Erase each sector
05390:  MOVFF  115,B9D
05394:  MOVFF  114,B9C
05398:  MOVFF  113,B9B
0539C:  MOVFF  112,B9A
053A0:  MOVFF  247,BA1
053A4:  MOVFF  246,BA0
053A8:  MOVFF  245,B9F
053AC:  MOVFF  244,B9E
053B0:  CALL   3EE2
053B4:  MOVLW  01
053B6:  MOVLB  2
053B8:  ADDWF  x46,F
053BA:  MOVLW  00
053BC:  ADDWFC x47,F
053BE:  MOVLB  0
053C0:  GOTO   533E
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
053C4:  MOVFF  243,296
053C8:  MOVLB  2
053CA:  SETF   x97
053CC:  MOVLB  0
053CE:  CALL   4AE2
....................    printf("End Flash Erase All\r\n");
053D2:  MOVLW  64
053D4:  MOVWF  FF6
053D6:  MOVLW  16
053D8:  MOVWF  FF7
053DA:  MOVLW  00
053DC:  MOVWF  FF8
053DE:  CALL   1DC0
053E2:  RETURN 0
.................... }
.................... 
.................... void mode_misf_erase_1sector(int8 parameter[])
.................... {
....................    printf("Start Flash Erase 1 Sector\r\n");
053E4:  MOVLW  7A
053E6:  MOVWF  FF6
053E8:  MOVLW  16
053EA:  MOVWF  FF7
053EC:  MOVLW  00
053EE:  MOVWF  FF8
053F0:  CALL   1DC0
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    int32 sector_address = 
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
053F4:  MOVLB  2
053F6:  MOVF   x3F,W
053F8:  MOVWF  FE9
053FA:  MOVF   x40,W
053FC:  MOVWF  FEA
053FE:  MOVFF  FEF,241
05402:  MOVLW  01
05404:  ADDWF  x3F,W
05406:  MOVWF  FE9
05408:  MOVLW  00
0540A:  ADDWFC x40,W
0540C:  MOVWF  FEA
0540E:  MOVF   FEF,W
05410:  CLRF   x49
05412:  CLRF   x48
05414:  CLRF   x47
05416:  MOVWF  x46
05418:  MOVFF  246,249
0541C:  CLRF   x46
0541E:  CLRF   x47
05420:  CLRF   x48
05422:  MOVLW  02
05424:  ADDWF  x3F,W
05426:  MOVWF  FE9
05428:  MOVLW  00
0542A:  ADDWFC x40,W
0542C:  MOVWF  FEA
0542E:  MOVF   FEF,W
05430:  CLRF   x4E
05432:  CLRF   x4D
05434:  CLRF   x4C
05436:  MOVWF  x4B
05438:  MOVFF  24C,03
0543C:  MOVFF  24B,02
05440:  CLRF   00
05442:  CLRF   01
05444:  MOVF   00,W
05446:  IORWF  x46,F
05448:  MOVF   01,W
0544A:  IORWF  x47,F
0544C:  MOVF   02,W
0544E:  IORWF  x48,F
05450:  MOVF   03,W
05452:  IORWF  x49,F
05454:  MOVLW  03
05456:  ADDWF  x3F,W
05458:  MOVWF  FE9
0545A:  MOVLW  00
0545C:  ADDWFC x40,W
0545E:  MOVWF  FEA
05460:  MOVF   FEF,W
05462:  CLRF   x4E
05464:  CLRF   x4D
05466:  CLRF   x4C
05468:  MOVWF  x4B
0546A:  MOVFF  24D,03
0546E:  MOVFF  24C,02
05472:  MOVFF  24B,01
05476:  CLRF   00
05478:  MOVF   00,W
0547A:  IORWF  x46,F
0547C:  MOVF   01,W
0547E:  IORWF  x47,F
05480:  MOVF   02,W
05482:  IORWF  x48,F
05484:  MOVF   03,W
05486:  IORWF  x49,F
05488:  MOVLW  04
0548A:  ADDWF  x3F,W
0548C:  MOVWF  FE9
0548E:  MOVLW  00
05490:  ADDWFC x40,W
05492:  MOVWF  FEA
05494:  MOVF   FEF,W
05496:  MOVWF  00
05498:  CLRF   01
0549A:  CLRF   02
0549C:  CLRF   03
0549E:  MOVF   00,W
054A0:  IORWF  x46,W
054A2:  MOVWF  x42
054A4:  MOVF   01,W
054A6:  IORWF  x47,W
054A8:  MOVWF  x43
054AA:  MOVF   02,W
054AC:  IORWF  x48,W
054AE:  MOVWF  x44
054B0:  MOVF   03,W
054B2:  IORWF  x49,W
054B4:  MOVWF  x45
.................... 
....................    printf("\tSector Address: 0x%08LX\r\n", sector_address);
054B6:  MOVLW  98
054B8:  MOVWF  FF6
054BA:  MOVLW  16
054BC:  MOVWF  FF7
054BE:  MOVLW  00
054C0:  MOVWF  FF8
054C2:  MOVLW  13
054C4:  MOVLB  A
054C6:  MOVWF  x67
054C8:  MOVLB  0
054CA:  CALL   1DF6
054CE:  MOVFF  245,AC8
054D2:  MOVLW  37
054D4:  MOVLB  A
054D6:  MOVWF  xC9
054D8:  MOVLB  0
054DA:  CALL   200A
054DE:  MOVFF  244,AC8
054E2:  MOVLW  37
054E4:  MOVLB  A
054E6:  MOVWF  xC9
054E8:  MOVLB  0
054EA:  CALL   200A
054EE:  MOVFF  243,AC8
054F2:  MOVLW  37
054F4:  MOVLB  A
054F6:  MOVWF  xC9
054F8:  MOVLB  0
054FA:  CALL   200A
054FE:  MOVFF  242,AC8
05502:  MOVLW  37
05504:  MOVLB  A
05506:  MOVWF  xC9
05508:  MOVLB  0
0550A:  CALL   200A
0550E:  MOVLW  0D
05510:  BTFSS  FA6.6
05512:  GOTO   5510
05516:  MOVLB  E
05518:  MOVWF  xF9
0551A:  MOVLW  0A
0551C:  MOVLB  0
0551E:  BTFSS  FA6.6
05520:  GOTO   551E
05524:  MOVLB  E
05526:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05528:  MOVFF  241,296
0552C:  MOVLB  2
0552E:  CLRF   x97
05530:  MOVLB  0
05532:  CALL   4AE2
....................    
....................    sector_erase(mis_fm, sector_address);
05536:  MOVFF  115,B9D
0553A:  MOVFF  114,B9C
0553E:  MOVFF  113,B9B
05542:  MOVFF  112,B9A
05546:  MOVFF  245,BA1
0554A:  MOVFF  244,BA0
0554E:  MOVFF  243,B9F
05552:  MOVFF  242,B9E
05556:  CALL   3EE2
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
0555A:  MOVFF  241,296
0555E:  MOVLB  2
05560:  SETF   x97
05562:  MOVLB  0
05564:  CALL   4AE2
....................    printf("End Flash Erase 1 Sector\r\n");
05568:  MOVLW  B4
0556A:  MOVWF  FF6
0556C:  MOVLW  16
0556E:  MOVWF  FF7
05570:  MOVLW  00
05572:  MOVWF  FF8
05574:  CALL   1DC0
05578:  GOTO   DB9E (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_4kbyte_subsector(int8 parameter[])
.................... {
....................    printf("Start Flash Erase 4kByte Subsector\r\n");
*
058D8:  MOVLW  D0
058DA:  MOVWF  FF6
058DC:  MOVLW  16
058DE:  MOVWF  FF7
058E0:  MOVLW  00
058E2:  MOVWF  FF8
058E4:  CALL   1DC0
....................    int8 cmd = parameter[0];
....................    int32 subsector_address =
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
058E8:  MOVLB  2
058EA:  MOVF   x3F,W
058EC:  MOVWF  FE9
058EE:  MOVF   x40,W
058F0:  MOVWF  FEA
058F2:  MOVFF  FEF,241
058F6:  MOVLW  01
058F8:  ADDWF  x3F,W
058FA:  MOVWF  FE9
058FC:  MOVLW  00
058FE:  ADDWFC x40,W
05900:  MOVWF  FEA
05902:  MOVF   FEF,W
05904:  CLRF   x49
05906:  CLRF   x48
05908:  CLRF   x47
0590A:  MOVWF  x46
0590C:  MOVFF  246,249
05910:  CLRF   x46
05912:  CLRF   x47
05914:  CLRF   x48
05916:  MOVLW  02
05918:  ADDWF  x3F,W
0591A:  MOVWF  FE9
0591C:  MOVLW  00
0591E:  ADDWFC x40,W
05920:  MOVWF  FEA
05922:  MOVF   FEF,W
05924:  CLRF   x4E
05926:  CLRF   x4D
05928:  CLRF   x4C
0592A:  MOVWF  x4B
0592C:  MOVFF  24C,03
05930:  MOVFF  24B,02
05934:  CLRF   00
05936:  CLRF   01
05938:  MOVF   00,W
0593A:  IORWF  x46,F
0593C:  MOVF   01,W
0593E:  IORWF  x47,F
05940:  MOVF   02,W
05942:  IORWF  x48,F
05944:  MOVF   03,W
05946:  IORWF  x49,F
05948:  MOVLW  03
0594A:  ADDWF  x3F,W
0594C:  MOVWF  FE9
0594E:  MOVLW  00
05950:  ADDWFC x40,W
05952:  MOVWF  FEA
05954:  MOVF   FEF,W
05956:  CLRF   x4E
05958:  CLRF   x4D
0595A:  CLRF   x4C
0595C:  MOVWF  x4B
0595E:  MOVFF  24D,03
05962:  MOVFF  24C,02
05966:  MOVFF  24B,01
0596A:  CLRF   00
0596C:  MOVF   00,W
0596E:  IORWF  x46,F
05970:  MOVF   01,W
05972:  IORWF  x47,F
05974:  MOVF   02,W
05976:  IORWF  x48,F
05978:  MOVF   03,W
0597A:  IORWF  x49,F
0597C:  MOVLW  04
0597E:  ADDWF  x3F,W
05980:  MOVWF  FE9
05982:  MOVLW  00
05984:  ADDWFC x40,W
05986:  MOVWF  FEA
05988:  MOVF   FEF,W
0598A:  MOVWF  00
0598C:  CLRF   01
0598E:  CLRF   02
05990:  CLRF   03
05992:  MOVF   00,W
05994:  IORWF  x46,W
05996:  MOVWF  x42
05998:  MOVF   01,W
0599A:  IORWF  x47,W
0599C:  MOVWF  x43
0599E:  MOVF   02,W
059A0:  IORWF  x48,W
059A2:  MOVWF  x44
059A4:  MOVF   03,W
059A6:  IORWF  x49,W
059A8:  MOVWF  x45
....................    printf("\tSubsector Address: 0x%08LX\r\n", subsector_address);
059AA:  MOVLW  F6
059AC:  MOVWF  FF6
059AE:  MOVLW  16
059B0:  MOVWF  FF7
059B2:  MOVLW  00
059B4:  MOVWF  FF8
059B6:  MOVLW  16
059B8:  MOVLB  A
059BA:  MOVWF  x67
059BC:  MOVLB  0
059BE:  CALL   1DF6
059C2:  MOVFF  245,AC8
059C6:  MOVLW  37
059C8:  MOVLB  A
059CA:  MOVWF  xC9
059CC:  MOVLB  0
059CE:  CALL   200A
059D2:  MOVFF  244,AC8
059D6:  MOVLW  37
059D8:  MOVLB  A
059DA:  MOVWF  xC9
059DC:  MOVLB  0
059DE:  CALL   200A
059E2:  MOVFF  243,AC8
059E6:  MOVLW  37
059E8:  MOVLB  A
059EA:  MOVWF  xC9
059EC:  MOVLB  0
059EE:  CALL   200A
059F2:  MOVFF  242,AC8
059F6:  MOVLW  37
059F8:  MOVLB  A
059FA:  MOVWF  xC9
059FC:  MOVLB  0
059FE:  CALL   200A
05A02:  MOVLW  0D
05A04:  BTFSS  FA6.6
05A06:  GOTO   5A04
05A0A:  MOVLB  E
05A0C:  MOVWF  xF9
05A0E:  MOVLW  0A
05A10:  MOVLB  0
05A12:  BTFSS  FA6.6
05A14:  GOTO   5A12
05A18:  MOVLB  E
05A1A:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START);
05A1C:  MOVFF  241,296
05A20:  MOVLB  2
05A22:  CLRF   x97
05A24:  MOVLB  0
05A26:  CALL   4AE2
....................    subsector_4kByte_erase(mis_fm, subsector_address); // FIX: 固定0消去→指定アドレス
05A2A:  MOVFF  115,326
05A2E:  MOVFF  114,325
05A32:  MOVFF  113,324
05A36:  MOVFF  112,323
05A3A:  MOVFF  245,32A
05A3E:  MOVFF  244,329
05A42:  MOVFF  243,328
05A46:  MOVFF  242,327
05A4A:  CALL   557C
....................    piclog_make(cmd, PICLOG_PARAM_END);
05A4E:  MOVFF  241,296
05A52:  MOVLB  2
05A54:  SETF   x97
05A56:  MOVLB  0
05A58:  CALL   4AE2
....................    printf("End Flash Erase 4kByte Subsector\r\n");
05A5C:  MOVLW  14
05A5E:  MOVWF  FF6
05A60:  MOVLW  17
05A62:  MOVWF  FF7
05A64:  MOVLW  00
05A66:  MOVWF  FF8
05A68:  CALL   1DC0
05A6C:  GOTO   DBAE (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 64kByte Subsector\r\n");
05A70:  MOVLW  38
05A72:  MOVWF  FF6
05A74:  MOVLW  17
05A76:  MOVWF  FF7
05A78:  MOVLW  00
05A7A:  MOVWF  FF8
05A7C:  CALL   1DC0
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
05A80:  MOVLB  2
05A82:  MOVF   x3F,W
05A84:  MOVWF  FE9
05A86:  MOVF   x40,W
05A88:  MOVWF  FEA
05A8A:  MOVFF  FEF,241
05A8E:  MOVLW  01
05A90:  ADDWF  x3F,W
05A92:  MOVWF  FE9
05A94:  MOVLW  00
05A96:  ADDWFC x40,W
05A98:  MOVWF  FEA
05A9A:  MOVF   FEF,W
05A9C:  CLRF   x49
05A9E:  CLRF   x48
05AA0:  CLRF   x47
05AA2:  MOVWF  x46
05AA4:  MOVFF  246,249
05AA8:  CLRF   x46
05AAA:  CLRF   x47
05AAC:  CLRF   x48
05AAE:  MOVLW  02
05AB0:  ADDWF  x3F,W
05AB2:  MOVWF  FE9
05AB4:  MOVLW  00
05AB6:  ADDWFC x40,W
05AB8:  MOVWF  FEA
05ABA:  MOVF   FEF,W
05ABC:  CLRF   x4E
05ABE:  CLRF   x4D
05AC0:  CLRF   x4C
05AC2:  MOVWF  x4B
05AC4:  MOVFF  24C,03
05AC8:  MOVFF  24B,02
05ACC:  CLRF   00
05ACE:  CLRF   01
05AD0:  MOVF   00,W
05AD2:  IORWF  x46,F
05AD4:  MOVF   01,W
05AD6:  IORWF  x47,F
05AD8:  MOVF   02,W
05ADA:  IORWF  x48,F
05ADC:  MOVF   03,W
05ADE:  IORWF  x49,F
05AE0:  MOVLW  03
05AE2:  ADDWF  x3F,W
05AE4:  MOVWF  FE9
05AE6:  MOVLW  00
05AE8:  ADDWFC x40,W
05AEA:  MOVWF  FEA
05AEC:  MOVF   FEF,W
05AEE:  CLRF   x4E
05AF0:  CLRF   x4D
05AF2:  CLRF   x4C
05AF4:  MOVWF  x4B
05AF6:  MOVFF  24D,03
05AFA:  MOVFF  24C,02
05AFE:  MOVFF  24B,01
05B02:  CLRF   00
05B04:  MOVF   00,W
05B06:  IORWF  x46,F
05B08:  MOVF   01,W
05B0A:  IORWF  x47,F
05B0C:  MOVF   02,W
05B0E:  IORWF  x48,F
05B10:  MOVF   03,W
05B12:  IORWF  x49,F
05B14:  MOVLW  04
05B16:  ADDWF  x3F,W
05B18:  MOVWF  FE9
05B1A:  MOVLW  00
05B1C:  ADDWFC x40,W
05B1E:  MOVWF  FEA
05B20:  MOVF   FEF,W
05B22:  MOVWF  00
05B24:  CLRF   01
05B26:  CLRF   02
05B28:  CLRF   03
05B2A:  MOVF   00,W
05B2C:  IORWF  x46,W
05B2E:  MOVWF  x42
05B30:  MOVF   01,W
05B32:  IORWF  x47,W
05B34:  MOVWF  x43
05B36:  MOVF   02,W
05B38:  IORWF  x48,W
05B3A:  MOVWF  x44
05B3C:  MOVF   03,W
05B3E:  IORWF  x49,W
05B40:  MOVWF  x45
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
05B42:  MOVLW  5E
05B44:  MOVWF  FF6
05B46:  MOVLW  17
05B48:  MOVWF  FF7
05B4A:  MOVLW  00
05B4C:  MOVWF  FF8
05B4E:  MOVLW  16
05B50:  MOVLB  A
05B52:  MOVWF  x67
05B54:  MOVLB  0
05B56:  CALL   1DF6
05B5A:  MOVFF  245,AC8
05B5E:  MOVLW  37
05B60:  MOVLB  A
05B62:  MOVWF  xC9
05B64:  MOVLB  0
05B66:  CALL   200A
05B6A:  MOVFF  244,AC8
05B6E:  MOVLW  37
05B70:  MOVLB  A
05B72:  MOVWF  xC9
05B74:  MOVLB  0
05B76:  CALL   200A
05B7A:  MOVFF  243,AC8
05B7E:  MOVLW  37
05B80:  MOVLB  A
05B82:  MOVWF  xC9
05B84:  MOVLB  0
05B86:  CALL   200A
05B8A:  MOVFF  242,AC8
05B8E:  MOVLW  37
05B90:  MOVLB  A
05B92:  MOVWF  xC9
05B94:  MOVLB  0
05B96:  CALL   200A
05B9A:  MOVLW  0D
05B9C:  BTFSS  FA6.6
05B9E:  GOTO   5B9C
05BA2:  MOVLB  E
05BA4:  MOVWF  xF9
05BA6:  MOVLW  0A
05BA8:  MOVLB  0
05BAA:  BTFSS  FA6.6
05BAC:  GOTO   5BAA
05BB0:  MOVLB  E
05BB2:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05BB4:  MOVFF  241,296
05BB8:  MOVLB  2
05BBA:  CLRF   x97
05BBC:  MOVLB  0
05BBE:  CALL   4AE2
....................    
....................    //subsector_64kByte_erase(mis_fm, subsector_address);
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05BC2:  MOVFF  241,296
05BC6:  MOVLB  2
05BC8:  SETF   x97
05BCA:  MOVLB  0
05BCC:  CALL   4AE2
....................    fprintf(PC, "End Flash Erase 64kByte Subsector\r\n");
05BD0:  MOVLW  7C
05BD2:  MOVWF  FF6
05BD4:  MOVLW  17
05BD6:  MOVWF  FF7
05BD8:  MOVLW  00
05BDA:  MOVWF  FF8
05BDC:  CALL   1DC0
05BE0:  GOTO   DBBE (RETURN)
.................... }
.................... 
.................... void mode_misf_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
*
05DC4:  MOVLW  A0
05DC6:  MOVWF  FF6
05DC8:  MOVLW  17
05DCA:  MOVWF  FF7
05DCC:  MOVLW  00
05DCE:  MOVWF  FF8
05DD0:  CALL   1DC0
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
05DD4:  MOVLB  2
05DD6:  MOVF   x3F,W
05DD8:  MOVWF  FE9
05DDA:  MOVF   x40,W
05DDC:  MOVWF  FEA
05DDE:  MOVFF  FEF,295
05DE2:  MOVFF  295,296
05DE6:  CLRF   x97
05DE8:  MOVLB  0
05DEA:  CALL   4AE2
.................... 
....................    FLASH_WRITE_PARAM flash_write_param = {0};
05DEE:  MOVLB  2
05DF0:  CLRF   x41
05DF2:  CLRF   x42
05DF4:  CLRF   x43
05DF6:  CLRF   x44
05DF8:  CLRF   x45
05DFA:  CLRF   x46
05DFC:  CLRF   x47
....................    
....................    flash_write_param.id = parameter[0];
05DFE:  MOVF   x3F,W
05E00:  MOVWF  FE9
05E02:  MOVF   x40,W
05E04:  MOVWF  FEA
05E06:  MOVFF  FEF,241
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
05E0A:  MOVLW  01
05E0C:  ADDWF  x3F,W
05E0E:  MOVWF  FE9
05E10:  MOVLW  00
05E12:  ADDWFC x40,W
05E14:  MOVWF  FEA
05E16:  MOVF   FEF,W
05E18:  CLRF   x98
05E1A:  CLRF   x97
05E1C:  CLRF   x96
05E1E:  MOVWF  x95
05E20:  MOVFF  295,298
05E24:  CLRF   x95
05E26:  CLRF   x96
05E28:  CLRF   x97
05E2A:  MOVLW  02
05E2C:  ADDWF  x3F,W
05E2E:  MOVWF  FE9
05E30:  MOVLW  00
05E32:  ADDWFC x40,W
05E34:  MOVWF  FEA
05E36:  MOVF   FEF,W
05E38:  CLRF   x9D
05E3A:  CLRF   x9C
05E3C:  CLRF   x9B
05E3E:  MOVWF  x9A
05E40:  MOVFF  29B,03
05E44:  MOVFF  29A,02
05E48:  CLRF   00
05E4A:  CLRF   01
05E4C:  MOVF   00,W
05E4E:  IORWF  x95,F
05E50:  MOVF   01,W
05E52:  IORWF  x96,F
05E54:  MOVF   02,W
05E56:  IORWF  x97,F
05E58:  MOVF   03,W
05E5A:  IORWF  x98,F
05E5C:  MOVLW  03
05E5E:  ADDWF  x3F,W
05E60:  MOVWF  FE9
05E62:  MOVLW  00
05E64:  ADDWFC x40,W
05E66:  MOVWF  FEA
05E68:  MOVF   FEF,W
05E6A:  CLRF   x9D
05E6C:  CLRF   x9C
05E6E:  CLRF   x9B
05E70:  MOVWF  x9A
05E72:  MOVFF  29C,03
05E76:  MOVFF  29B,02
05E7A:  MOVFF  29A,01
05E7E:  CLRF   00
05E80:  MOVF   00,W
05E82:  IORWF  x95,F
05E84:  MOVF   01,W
05E86:  IORWF  x96,F
05E88:  MOVF   02,W
05E8A:  IORWF  x97,F
05E8C:  MOVF   03,W
05E8E:  IORWF  x98,F
05E90:  MOVLW  04
05E92:  ADDWF  x3F,W
05E94:  MOVWF  FE9
05E96:  MOVLW  00
05E98:  ADDWFC x40,W
05E9A:  MOVWF  FEA
05E9C:  MOVF   FEF,W
05E9E:  MOVWF  00
05EA0:  CLRF   01
05EA2:  CLRF   02
05EA4:  CLRF   03
05EA6:  MOVF   00,W
05EA8:  IORWF  x95,W
05EAA:  MOVWF  x42
05EAC:  MOVF   01,W
05EAE:  IORWF  x96,W
05EB0:  MOVWF  x43
05EB2:  MOVF   02,W
05EB4:  IORWF  x97,W
05EB6:  MOVWF  x44
05EB8:  MOVF   03,W
05EBA:  IORWF  x98,W
05EBC:  MOVWF  x45
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
05EBE:  MOVLW  07
05EC0:  ADDWF  x3F,W
05EC2:  MOVWF  FE9
05EC4:  MOVLW  00
05EC6:  ADDWFC x40,W
05EC8:  MOVWF  FEA
05ECA:  MOVF   FEF,W
05ECC:  CLRF   x96
05ECE:  MOVWF  x95
05ED0:  MOVFF  295,296
05ED4:  CLRF   x95
05ED6:  MOVLW  08
05ED8:  ADDWF  x3F,W
05EDA:  MOVWF  FE9
05EDC:  MOVLW  00
05EDE:  ADDWFC x40,W
05EE0:  MOVWF  FEA
05EE2:  MOVF   FEF,W
05EE4:  CLRF   03
05EE6:  IORWF  x95,W
05EE8:  MOVWF  x46
05EEA:  MOVF   03,W
05EEC:  IORWF  x96,W
05EEE:  MOVWF  x47
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
05EF0:  MOVLW  BA
05EF2:  MOVWF  FF6
05EF4:  MOVLW  17
05EF6:  MOVWF  FF7
05EF8:  MOVLW  00
05EFA:  MOVWF  FF8
05EFC:  MOVLW  0C
05EFE:  MOVLB  A
05F00:  MOVWF  x67
05F02:  MOVLB  0
05F04:  CALL   1DF6
05F08:  MOVFF  241,AC8
05F0C:  MOVLW  37
05F0E:  MOVLB  A
05F10:  MOVWF  xC9
05F12:  MOVLB  0
05F14:  CALL   200A
05F18:  MOVLW  0D
05F1A:  BTFSS  FA6.6
05F1C:  GOTO   5F1A
05F20:  MOVLB  E
05F22:  MOVWF  xF9
05F24:  MOVLW  0A
05F26:  MOVLB  0
05F28:  BTFSS  FA6.6
05F2A:  GOTO   5F28
05F2E:  MOVLB  E
05F30:  MOVWF  xF9
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
05F32:  MOVLW  CE
05F34:  MOVWF  FF6
05F36:  MOVLW  17
05F38:  MOVWF  FF7
05F3A:  MOVLW  00
05F3C:  MOVWF  FF8
05F3E:  MOVLW  0E
05F40:  MOVLB  A
05F42:  MOVWF  x67
05F44:  MOVLB  0
05F46:  CALL   1DF6
05F4A:  MOVFF  245,AC8
05F4E:  MOVLW  37
05F50:  MOVLB  A
05F52:  MOVWF  xC9
05F54:  MOVLB  0
05F56:  CALL   200A
05F5A:  MOVFF  244,AC8
05F5E:  MOVLW  37
05F60:  MOVLB  A
05F62:  MOVWF  xC9
05F64:  MOVLB  0
05F66:  CALL   200A
05F6A:  MOVFF  243,AC8
05F6E:  MOVLW  37
05F70:  MOVLB  A
05F72:  MOVWF  xC9
05F74:  MOVLB  0
05F76:  CALL   200A
05F7A:  MOVFF  242,AC8
05F7E:  MOVLW  37
05F80:  MOVLB  A
05F82:  MOVWF  xC9
05F84:  MOVLB  0
05F86:  CALL   200A
05F8A:  MOVLW  0D
05F8C:  BTFSS  FA6.6
05F8E:  GOTO   5F8C
05F92:  MOVLB  E
05F94:  MOVWF  xF9
05F96:  MOVLW  0A
05F98:  MOVLB  0
05F9A:  BTFSS  FA6.6
05F9C:  GOTO   5F9A
05FA0:  MOVLB  E
05FA2:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
05FA4:  MOVLW  E4
05FA6:  MOVWF  FF6
05FA8:  MOVLW  17
05FAA:  MOVWF  FF7
05FAC:  MOVLW  00
05FAE:  MOVWF  FF8
05FB0:  MOVLW  0E
05FB2:  MOVLB  A
05FB4:  MOVWF  x67
05FB6:  MOVLB  0
05FB8:  CALL   1DF6
05FBC:  MOVFF  247,AC8
05FC0:  MOVLW  37
05FC2:  MOVLB  A
05FC4:  MOVWF  xC9
05FC6:  MOVLB  0
05FC8:  CALL   200A
05FCC:  MOVFF  246,AC8
05FD0:  MOVLW  37
05FD2:  MOVLB  A
05FD4:  MOVWF  xC9
05FD6:  MOVLB  0
05FD8:  CALL   200A
05FDC:  MOVLW  0D
05FDE:  BTFSS  FA6.6
05FE0:  GOTO   5FDE
05FE4:  MOVLB  E
05FE6:  MOVWF  xF9
05FE8:  MOVLW  0A
05FEA:  MOVLB  0
05FEC:  BTFSS  FA6.6
05FEE:  GOTO   5FEC
05FF2:  MOVLB  E
05FF4:  MOVWF  xF9
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
05FF6:  MOVFF  241,296
05FFA:  MOVLB  2
05FFC:  CLRF   x97
05FFE:  MOVLB  0
06000:  CALL   4AE2
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
06004:  MOVLW  FA
06006:  MOVWF  FF6
06008:  MOVLW  17
0600A:  MOVWF  FF7
0600C:  MOVLW  00
0600E:  MOVWF  FF8
06010:  CALL   1DC0
....................    for (p = 0; p < flash_write_param.packetnum; p++)
06014:  MOVLB  2
06016:  CLRF   x89
06018:  CLRF   x88
0601A:  MOVLB  0
0601C:  MOVLB  2
0601E:  MOVF   x89,W
06020:  SUBWF  x47,W
06022:  BTFSC  FD8.0
06024:  BRA    602C
06026:  MOVLB  0
06028:  GOTO   6352
0602C:  MOVLB  0
0602E:  BTFSS  FD8.2
06030:  GOTO   6046
06034:  MOVLB  2
06036:  MOVF   x46,W
06038:  SUBWF  x88,W
0603A:  BTFSS  FD8.0
0603C:  BRA    6044
0603E:  MOVLB  0
06040:  GOTO   6352
06044:  MOVLB  0
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
06046:  MOVLB  2
06048:  RLCF   x88,W
0604A:  MOVWF  x8A
0604C:  RLCF   x89,W
0604E:  MOVWF  x8B
06050:  RLCF   x8A,F
06052:  RLCF   x8B,F
06054:  RLCF   x8A,F
06056:  RLCF   x8B,F
06058:  RLCF   x8A,F
0605A:  RLCF   x8B,F
0605C:  RLCF   x8A,F
0605E:  RLCF   x8B,F
06060:  RLCF   x8A,F
06062:  RLCF   x8B,F
06064:  MOVLW  C0
06066:  ANDWF  x8A,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
06068:  CLRF   x8C
0606A:  MOVLB  0
0606C:  MOVLB  2
0606E:  MOVF   x8C,W
06070:  SUBLW  3F
06072:  BTFSC  FD8.0
06074:  BRA    607C
06076:  MOVLB  0
06078:  GOTO   60DE
0607C:  MOVLB  0
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
0607E:  CLRF   03
06080:  MOVLB  2
06082:  MOVF   x8C,W
06084:  ADDLW  48
06086:  MOVWF  FE9
06088:  MOVLW  02
0608A:  ADDWFC 03,W
0608C:  MOVWF  FEA
0608E:  MOVF   x8C,W
06090:  ADDWF  x8A,W
06092:  MOVWF  x97
06094:  MOVLW  00
06096:  ADDWFC x8B,W
06098:  MOVWF  x98
0609A:  MOVF   x97,W
0609C:  MOVWF  00
0609E:  CLRF   03
060A0:  MOVF   00,W
060A2:  MOVWF  FEF
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
060A4:  CLRF   03
060A6:  MOVF   x8C,W
060A8:  ADDLW  48
060AA:  MOVWF  FE9
060AC:  MOVLW  02
060AE:  ADDWFC 03,W
060B0:  MOVWF  FEA
060B2:  MOVFF  FEF,295
060B6:  MOVFF  295,AC8
060BA:  MOVLW  37
060BC:  MOVLB  A
060BE:  MOVWF  xC9
060C0:  MOVLB  0
060C2:  CALL   200A
060C6:  MOVLW  20
060C8:  BTFSS  FA6.6
060CA:  GOTO   60C8
060CE:  MOVLB  E
060D0:  MOVWF  xF9
060D2:  MOVLB  0
060D4:  MOVLB  2
060D6:  INCF   x8C,F
060D8:  MOVLB  0
060DA:  GOTO   606C
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
060DE:  MOVLB  2
060E0:  RLCF   x88,W
060E2:  MOVWF  02
060E4:  RLCF   x89,W
060E6:  MOVWF  03
060E8:  RLCF   02,F
060EA:  RLCF   03,F
060EC:  RLCF   02,F
060EE:  RLCF   03,F
060F0:  RLCF   02,F
060F2:  RLCF   03,F
060F4:  RLCF   02,F
060F6:  RLCF   03,F
060F8:  RLCF   02,F
060FA:  RLCF   03,F
060FC:  MOVLW  C0
060FE:  ANDWF  02,F
06100:  MOVF   02,W
06102:  ADDWF  x42,W
06104:  MOVWF  x8D
06106:  MOVF   03,W
06108:  ADDWFC x43,W
0610A:  MOVWF  x8E
0610C:  MOVLW  00
0610E:  ADDWFC x44,W
06110:  MOVWF  x8F
06112:  MOVLW  00
06114:  ADDWFC x45,W
06116:  MOVWF  x90
....................       // FLASH 終端チェック (MISF_END は最終アドレス想定: inclusive)
....................       if(current_address > MISF_END){
06118:  MOVF   x90,F
0611A:  BTFSC  FD8.2
0611C:  BRA    6124
0611E:  MOVLB  0
06120:  GOTO   6138
06124:  MOVLB  0
06126:  MOVLB  2
06128:  MOVF   x8F,W
0612A:  SUBLW  0F
0612C:  BTFSS  FD8.0
0612E:  BRA    6136
06130:  MOVLB  0
06132:  GOTO   620C
06136:  MOVLB  0
....................          fprintf(PC, "\r\n[FLASH] Write address 0x%08LX exceeds device end 0x%08LX -> abort\r\n", current_address, (unsigned int32)MISF_END);
06138:  MOVLW  08
0613A:  MOVWF  FF6
0613C:  MOVLW  18
0613E:  MOVWF  FF7
06140:  MOVLW  00
06142:  MOVWF  FF8
06144:  MOVLW  1A
06146:  MOVLB  A
06148:  MOVWF  x67
0614A:  MOVLB  0
0614C:  CALL   1DF6
06150:  MOVFF  290,AC8
06154:  MOVLW  37
06156:  MOVLB  A
06158:  MOVWF  xC9
0615A:  MOVLB  0
0615C:  CALL   200A
06160:  MOVFF  28F,AC8
06164:  MOVLW  37
06166:  MOVLB  A
06168:  MOVWF  xC9
0616A:  MOVLB  0
0616C:  CALL   200A
06170:  MOVFF  28E,AC8
06174:  MOVLW  37
06176:  MOVLB  A
06178:  MOVWF  xC9
0617A:  MOVLB  0
0617C:  CALL   200A
06180:  MOVFF  28D,AC8
06184:  MOVLW  37
06186:  MOVLB  A
06188:  MOVWF  xC9
0618A:  MOVLB  0
0618C:  CALL   200A
06190:  MOVLW  27
06192:  MOVWF  FF6
06194:  MOVLW  18
06196:  MOVWF  FF7
06198:  MOVLW  00
0619A:  MOVWF  FF8
0619C:  MOVLW  16
0619E:  MOVLB  A
061A0:  MOVWF  x67
061A2:  MOVLB  0
061A4:  CALL   1DF6
061A8:  MOVLB  A
061AA:  CLRF   xC8
061AC:  MOVLW  37
061AE:  MOVWF  xC9
061B0:  MOVLB  0
061B2:  CALL   200A
061B6:  MOVLW  0F
061B8:  MOVLB  A
061BA:  MOVWF  xC8
061BC:  MOVLW  37
061BE:  MOVWF  xC9
061C0:  MOVLB  0
061C2:  CALL   200A
061C6:  MOVLB  A
061C8:  SETF   xC8
061CA:  MOVLW  37
061CC:  MOVWF  xC9
061CE:  MOVLB  0
061D0:  CALL   200A
061D4:  MOVLB  A
061D6:  SETF   xC8
061D8:  MOVLW  37
061DA:  MOVWF  xC9
061DC:  MOVLB  0
061DE:  CALL   200A
061E2:  MOVLW  42
061E4:  MOVWF  FF6
061E6:  MOVLW  18
061E8:  MOVWF  FF7
061EA:  MOVLW  00
061EC:  MOVWF  FF8
061EE:  MOVLW  0B
061F0:  MOVLB  A
061F2:  MOVWF  x67
061F4:  MOVLB  0
061F6:  CALL   1DF6
....................          piclog_make(flash_write_param.id, PICLOG_PARAM_END);
061FA:  MOVFF  241,296
061FE:  MOVLB  2
06200:  SETF   x97
06202:  MOVLB  0
06204:  CALL   4AE2
....................          break;
06208:  GOTO   6352
....................       }
....................       if(current_address + (PACKET_SIZE - 1) > MISF_END){
0620C:  MOVLW  3F
0620E:  MOVLB  2
06210:  ADDWF  x8D,W
06212:  MOVWF  x95
06214:  MOVLW  00
06216:  ADDWFC x8E,W
06218:  MOVWF  x96
0621A:  MOVLW  00
0621C:  ADDWFC x8F,W
0621E:  MOVWF  x97
06220:  MOVLW  00
06222:  ADDWFC x90,W
06224:  MOVWF  x98
06226:  MOVF   x98,F
06228:  BTFSC  FD8.2
0622A:  BRA    6232
0622C:  MOVLB  0
0622E:  GOTO   6246
06232:  MOVLB  0
06234:  MOVLB  2
06236:  MOVF   x97,W
06238:  SUBLW  0F
0623A:  BTFSS  FD8.0
0623C:  BRA    6244
0623E:  MOVLB  0
06240:  GOTO   630E
06244:  MOVLB  0
....................          unsigned int32 remain = (MISF_END - current_address) + 1; // 書込可能残り
06246:  MOVLW  FF
06248:  BSF    FD8.0
0624A:  MOVLB  2
0624C:  SUBFWB x8D,W
0624E:  MOVWF  x95
06250:  MOVLW  FF
06252:  SUBFWB x8E,W
06254:  MOVWF  x96
06256:  MOVLW  0F
06258:  SUBFWB x8F,W
0625A:  MOVWF  x97
0625C:  MOVLW  00
0625E:  SUBFWB x90,W
06260:  MOVWF  x98
06262:  MOVLW  01
06264:  ADDWF  x95,W
06266:  MOVWF  x91
06268:  MOVLW  00
0626A:  ADDWFC x96,W
0626C:  MOVWF  x92
0626E:  MOVLW  00
06270:  ADDWFC x97,W
06272:  MOVWF  x93
06274:  MOVLW  00
06276:  ADDWFC x98,W
06278:  MOVWF  x94
0627A:  MOVLB  0
....................          fprintf(PC, "\r\n[FLASH] Reached end. Partial write %lu bytes (packet truncated).\r\n", remain);
0627C:  MOVLW  4E
0627E:  MOVWF  FF6
06280:  MOVLW  18
06282:  MOVWF  FF7
06284:  MOVLW  00
06286:  MOVWF  FF8
06288:  MOVLW  25
0628A:  MOVLB  A
0628C:  MOVWF  x67
0628E:  MOVLB  0
06290:  CALL   1DF6
06294:  MOVLW  41
06296:  MOVWF  FE9
06298:  MOVFF  294,2E2
0629C:  MOVFF  293,2E1
062A0:  MOVFF  292,2E0
062A4:  MOVFF  291,2DF
062A8:  CALL   5CBE
062AC:  MOVLW  76
062AE:  MOVWF  FF6
062B0:  MOVLW  18
062B2:  MOVWF  FF7
062B4:  MOVLW  00
062B6:  MOVWF  FF8
062B8:  MOVLW  1C
062BA:  MOVLB  A
062BC:  MOVWF  x67
062BE:  MOVLB  0
062C0:  CALL   1DF6
....................          write_data_bytes(mis_fm, current_address, writedata, (unsigned int16)remain);
062C4:  MOVFF  115,B9F
062C8:  MOVFF  114,B9E
062CC:  MOVFF  113,B9D
062D0:  MOVFF  112,B9C
062D4:  MOVFF  290,BA3
062D8:  MOVFF  28F,BA2
062DC:  MOVFF  28E,BA1
062E0:  MOVFF  28D,BA0
062E4:  MOVLW  02
062E6:  MOVLB  B
062E8:  MOVWF  xA5
062EA:  MOVLW  48
062EC:  MOVWF  xA4
062EE:  MOVFF  292,BA7
062F2:  MOVFF  291,BA6
062F6:  MOVLB  0
062F8:  CALL   39FE
....................          piclog_make(flash_write_param.id, PICLOG_PARAM_END);
062FC:  MOVFF  241,296
06300:  MOVLB  2
06302:  SETF   x97
06304:  MOVLB  0
06306:  CALL   4AE2
....................          break;
0630A:  GOTO   6352
....................       }
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
0630E:  MOVFF  115,B9F
06312:  MOVFF  114,B9E
06316:  MOVFF  113,B9D
0631A:  MOVFF  112,B9C
0631E:  MOVFF  290,BA3
06322:  MOVFF  28F,BA2
06326:  MOVFF  28E,BA1
0632A:  MOVFF  28D,BA0
0632E:  MOVLW  02
06330:  MOVLB  B
06332:  MOVWF  xA5
06334:  MOVLW  48
06336:  MOVWF  xA4
06338:  CLRF   xA7
0633A:  MOVLW  40
0633C:  MOVWF  xA6
0633E:  MOVLB  0
06340:  CALL   39FE
06344:  MOVLB  2
06346:  INCF   x88,F
06348:  BTFSC  FD8.2
0634A:  INCF   x89,F
0634C:  MOVLB  0
0634E:  GOTO   601C
....................    }
.................... 
....................    piclog_make(flash_write_param.id, PICLOG_PARAM_END); // Log the end of the command execution
06352:  MOVFF  241,296
06356:  MOVLB  2
06358:  SETF   x97
0635A:  MOVLB  0
0635C:  CALL   4AE2
....................    fprintf(PC, "\r\n");
06360:  MOVLW  0D
06362:  BTFSS  FA6.6
06364:  GOTO   6362
06368:  MOVLB  E
0636A:  MOVWF  xF9
0636C:  MOVLW  0A
0636E:  MOVLB  0
06370:  BTFSS  FA6.6
06372:  GOTO   6370
06376:  MOVLB  E
06378:  MOVWF  xF9
....................    fprintf(PC, "End Flash Write Demo\r\n");
0637A:  MOVLW  94
0637C:  MOVWF  FF6
0637E:  MOVLW  18
06380:  MOVWF  FF7
06382:  MOVLW  00
06384:  MOVWF  FF8
06386:  MOVLB  0
06388:  CALL   1DC0
0638C:  GOTO   DBCE (RETURN)
.................... }
.................... 
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
*
063C0:  MOVLW  AC
063C2:  MOVWF  FF6
063C4:  MOVLW  18
063C6:  MOVWF  FF7
063C8:  MOVLW  00
063CA:  MOVWF  FF8
063CC:  CALL   1DC0
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
063D0:  MOVLB  2
063D2:  MOVF   x3F,W
063D4:  MOVWF  FE9
063D6:  MOVF   x40,W
063D8:  MOVWF  FEA
063DA:  MOVFF  FEF,245
063DE:  MOVFF  245,296
063E2:  CLRF   x97
063E4:  MOVLB  0
063E6:  CALL   4AE2
....................    flash_setting(mis_fm);
063EA:  MOVFF  115,34D
063EE:  MOVFF  114,34C
063F2:  MOVFF  113,34B
063F6:  MOVFF  112,34A
063FA:  CALL   6390
....................    unsigned int32 write_address = 0x00000000;
063FE:  MOVLB  2
06400:  CLRF   x44
06402:  CLRF   x43
06404:  CLRF   x42
06406:  CLRF   x41
....................    //int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
....................    //write_data_bytes(mis_fm, write_address, write_data, 256);
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06408:  MOVF   x3F,W
0640A:  MOVWF  FE9
0640C:  MOVF   x40,W
0640E:  MOVWF  FEA
06410:  MOVFF  FEF,245
06414:  MOVFF  245,296
06418:  SETF   x97
0641A:  MOVLB  0
0641C:  CALL   4AE2
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
06420:  MOVLW  D2
06422:  MOVWF  FF6
06424:  MOVLW  18
06426:  MOVWF  FF7
06428:  MOVLW  00
0642A:  MOVWF  FF8
0642C:  CALL   1DC0
06430:  GOTO   DBDE (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
06434:  MOVLW  F6
06436:  MOVWF  FF6
06438:  MOVLW  18
0643A:  MOVWF  FF7
0643C:  MOVLW  00
0643E:  MOVWF  FF8
06440:  CALL   1DC0
.................... 
.................... 
....................    FLASH_PARAM flash_param = {0};
06444:  MOVLB  2
06446:  CLRF   x41
06448:  CLRF   x42
0644A:  CLRF   x43
0644C:  CLRF   x44
0644E:  CLRF   x45
06450:  CLRF   x46
06452:  CLRF   x47
....................    flash_param.id = uplinkcmd_ptr[0];
06454:  MOVF   x3F,W
06456:  MOVWF  FE9
06458:  MOVF   x40,W
0645A:  MOVWF  FEA
0645C:  MOVFF  FEF,241
....................    flash_param.readaddress = -
....................       ((unsigned int32)uplinkcmd_ptr[1] << 24) |
....................       ((unsigned int32)uplinkcmd_ptr[2] << 16) |
....................       ((unsigned int32)uplinkcmd_ptr[3] << 8)  |
....................       ((unsigned int32)uplinkcmd_ptr[4]);
06460:  MOVLW  01
06462:  ADDWF  x3F,W
06464:  MOVWF  FE9
06466:  MOVLW  00
06468:  ADDWFC x40,W
0646A:  MOVWF  FEA
0646C:  MOVF   FEF,W
0646E:  CLRF   x99
06470:  CLRF   x98
06472:  CLRF   x97
06474:  MOVWF  x96
06476:  MOVFF  296,03
0647A:  CLRF   00
0647C:  CLRF   01
0647E:  CLRF   02
06480:  MOVLW  00
06482:  BSF    FD8.0
06484:  SUBFWB 00,W
06486:  MOVWF  x96
06488:  MOVLW  00
0648A:  SUBFWB 01,W
0648C:  MOVWF  x97
0648E:  MOVLW  00
06490:  SUBFWB 02,W
06492:  MOVWF  x98
06494:  MOVLW  00
06496:  SUBFWB 03,W
06498:  MOVWF  x99
0649A:  MOVLW  02
0649C:  ADDWF  x3F,W
0649E:  MOVWF  FE9
064A0:  MOVLW  00
064A2:  ADDWFC x40,W
064A4:  MOVWF  FEA
064A6:  MOVF   FEF,W
064A8:  CLRF   x9E
064AA:  CLRF   x9D
064AC:  CLRF   x9C
064AE:  MOVWF  x9B
064B0:  MOVFF  29C,03
064B4:  MOVFF  29B,02
064B8:  CLRF   00
064BA:  CLRF   01
064BC:  MOVF   00,W
064BE:  IORWF  x96,F
064C0:  MOVF   01,W
064C2:  IORWF  x97,F
064C4:  MOVF   02,W
064C6:  IORWF  x98,F
064C8:  MOVF   03,W
064CA:  IORWF  x99,F
064CC:  MOVLW  03
064CE:  ADDWF  x3F,W
064D0:  MOVWF  FE9
064D2:  MOVLW  00
064D4:  ADDWFC x40,W
064D6:  MOVWF  FEA
064D8:  MOVF   FEF,W
064DA:  CLRF   x9E
064DC:  CLRF   x9D
064DE:  CLRF   x9C
064E0:  MOVWF  x9B
064E2:  MOVFF  29D,03
064E6:  MOVFF  29C,02
064EA:  MOVFF  29B,01
064EE:  CLRF   00
064F0:  MOVF   00,W
064F2:  IORWF  x96,F
064F4:  MOVF   01,W
064F6:  IORWF  x97,F
064F8:  MOVF   02,W
064FA:  IORWF  x98,F
064FC:  MOVF   03,W
064FE:  IORWF  x99,F
06500:  MOVLW  04
06502:  ADDWF  x3F,W
06504:  MOVWF  FE9
06506:  MOVLW  00
06508:  ADDWFC x40,W
0650A:  MOVWF  FEA
0650C:  MOVF   FEF,W
0650E:  MOVWF  00
06510:  CLRF   01
06512:  CLRF   02
06514:  CLRF   03
06516:  MOVF   00,W
06518:  IORWF  x96,W
0651A:  MOVWF  x44
0651C:  MOVF   01,W
0651E:  IORWF  x97,W
06520:  MOVWF  x45
06522:  MOVF   02,W
06524:  IORWF  x98,W
06526:  MOVWF  x46
06528:  MOVF   03,W
0652A:  IORWF  x99,W
0652C:  MOVWF  x47
....................    flash_param.readpacketnum = 
....................       ((unsigned int16)uplinkcmd_ptr[6] << 8) |
....................       ((unsigned int16)uplinkcmd_ptr[7]);
0652E:  MOVLW  06
06530:  ADDWF  x3F,W
06532:  MOVWF  FE9
06534:  MOVLW  00
06536:  ADDWFC x40,W
06538:  MOVWF  FEA
0653A:  MOVF   FEF,W
0653C:  CLRF   x97
0653E:  MOVWF  x96
06540:  MOVFF  296,297
06544:  CLRF   x96
06546:  MOVLW  07
06548:  ADDWF  x3F,W
0654A:  MOVWF  FE9
0654C:  MOVLW  00
0654E:  ADDWFC x40,W
06550:  MOVWF  FEA
06552:  MOVF   FEF,W
06554:  CLRF   03
06556:  IORWF  x96,W
06558:  MOVWF  x42
0655A:  MOVF   03,W
0655C:  IORWF  x97,W
0655E:  MOVWF  x43
....................       piclog_make(flash_param.id, PICLOG_PARAM_START); // Log the command execution
06560:  MOVFF  241,296
06564:  CLRF   x97
06566:  MOVLB  0
06568:  CALL   4AE2
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
0656C:  MOVLW  0A
0656E:  MOVWF  FF6
06570:  MOVLW  19
06572:  MOVWF  FF7
06574:  MOVLW  00
06576:  MOVWF  FF8
06578:  MOVLW  0C
0657A:  MOVLB  A
0657C:  MOVWF  x67
0657E:  MOVLB  0
06580:  CALL   1DF6
06584:  MOVFF  241,AC8
06588:  MOVLW  37
0658A:  MOVLB  A
0658C:  MOVWF  xC9
0658E:  MOVLB  0
06590:  CALL   200A
06594:  MOVLW  0D
06596:  BTFSS  FA6.6
06598:  GOTO   6596
0659C:  MOVLB  E
0659E:  MOVWF  xF9
065A0:  MOVLW  0A
065A2:  MOVLB  0
065A4:  BTFSS  FA6.6
065A6:  GOTO   65A4
065AA:  MOVLB  E
065AC:  MOVWF  xF9
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
065AE:  MOVLW  1E
065B0:  MOVWF  FF6
065B2:  MOVLW  19
065B4:  MOVWF  FF7
065B6:  MOVLW  00
065B8:  MOVWF  FF8
065BA:  MOVLW  0E
065BC:  MOVLB  A
065BE:  MOVWF  x67
065C0:  MOVLB  0
065C2:  CALL   1DF6
065C6:  MOVFF  247,AC8
065CA:  MOVLW  37
065CC:  MOVLB  A
065CE:  MOVWF  xC9
065D0:  MOVLB  0
065D2:  CALL   200A
065D6:  MOVFF  246,AC8
065DA:  MOVLW  37
065DC:  MOVLB  A
065DE:  MOVWF  xC9
065E0:  MOVLB  0
065E2:  CALL   200A
065E6:  MOVFF  245,AC8
065EA:  MOVLW  37
065EC:  MOVLB  A
065EE:  MOVWF  xC9
065F0:  MOVLB  0
065F2:  CALL   200A
065F6:  MOVFF  244,AC8
065FA:  MOVLW  37
065FC:  MOVLB  A
065FE:  MOVWF  xC9
06600:  MOVLB  0
06602:  CALL   200A
06606:  MOVLW  0D
06608:  BTFSS  FA6.6
0660A:  GOTO   6608
0660E:  MOVLB  E
06610:  MOVWF  xF9
06612:  MOVLW  0A
06614:  MOVLB  0
06616:  BTFSS  FA6.6
06618:  GOTO   6616
0661C:  MOVLB  E
0661E:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
06620:  MOVLW  34
06622:  MOVWF  FF6
06624:  MOVLW  19
06626:  MOVWF  FF7
06628:  MOVLW  00
0662A:  MOVWF  FF8
0662C:  MOVLW  0E
0662E:  MOVLB  A
06630:  MOVWF  x67
06632:  MOVLB  0
06634:  CALL   1DF6
06638:  MOVFF  243,AC8
0663C:  MOVLW  37
0663E:  MOVLB  A
06640:  MOVWF  xC9
06642:  MOVLB  0
06644:  CALL   200A
06648:  MOVFF  242,AC8
0664C:  MOVLW  37
0664E:  MOVLB  A
06650:  MOVWF  xC9
06652:  MOVLB  0
06654:  CALL   200A
06658:  MOVLW  0D
0665A:  BTFSS  FA6.6
0665C:  GOTO   665A
06660:  MOVLB  E
06662:  MOVWF  xF9
06664:  MOVLW  0A
06666:  MOVLB  0
06668:  BTFSS  FA6.6
0666A:  GOTO   6668
0666E:  MOVLB  E
06670:  MOVWF  xF9
....................    
....................    piclog_make(flash_param.id, 0x00);
06672:  MOVFF  241,296
06676:  MOVLB  2
06678:  CLRF   x97
0667A:  MOVLB  0
0667C:  CALL   4AE2
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
06680:  MOVLB  2
06682:  CLRF   x48
06684:  CLRF   x49
06686:  CLRF   x4A
06688:  CLRF   x4B
0668A:  CLRF   x4C
0668C:  CLRF   x4D
0668E:  CLRF   x4E
06690:  CLRF   x4F
06692:  CLRF   x50
06694:  CLRF   x51
06696:  CLRF   x52
06698:  CLRF   x53
0669A:  CLRF   x54
0669C:  CLRF   x55
0669E:  CLRF   x56
066A0:  CLRF   x57
066A2:  CLRF   x58
066A4:  CLRF   x59
066A6:  CLRF   x5A
066A8:  CLRF   x5B
066AA:  CLRF   x5C
066AC:  CLRF   x5D
066AE:  CLRF   x5E
066B0:  CLRF   x5F
066B2:  CLRF   x60
066B4:  CLRF   x61
066B6:  CLRF   x62
066B8:  CLRF   x63
066BA:  CLRF   x64
066BC:  CLRF   x65
066BE:  CLRF   x66
066C0:  CLRF   x67
066C2:  CLRF   x68
066C4:  CLRF   x69
066C6:  CLRF   x6A
066C8:  CLRF   x6B
066CA:  CLRF   x6C
066CC:  CLRF   x6D
066CE:  CLRF   x6E
066D0:  CLRF   x6F
066D2:  CLRF   x70
066D4:  CLRF   x71
066D6:  CLRF   x72
066D8:  CLRF   x73
066DA:  CLRF   x74
066DC:  CLRF   x75
066DE:  CLRF   x76
066E0:  CLRF   x77
066E2:  CLRF   x78
066E4:  CLRF   x79
066E6:  CLRF   x7A
066E8:  CLRF   x7B
066EA:  CLRF   x7C
066EC:  CLRF   x7D
066EE:  CLRF   x7E
066F0:  CLRF   x7F
066F2:  CLRF   x80
066F4:  CLRF   x81
066F6:  CLRF   x82
066F8:  CLRF   x83
066FA:  CLRF   x84
066FC:  CLRF   x85
066FE:  CLRF   x86
06700:  CLRF   x87
....................    unsigned int32 read_address;
....................    fprintf(PC, "READ DATA\r\n");
06702:  MOVLW  4A
06704:  MOVWF  FF6
06706:  MOVLW  19
06708:  MOVWF  FF7
0670A:  MOVLW  00
0670C:  MOVWF  FF8
0670E:  MOVLB  0
06710:  CALL   1DC0
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
06714:  MOVFF  115,2E2
06718:  MOVFF  114,2E1
0671C:  MOVFF  113,2E0
06720:  MOVFF  112,2DF
06724:  CALL   2922
06728:  MOVF   01,F
0672A:  BTFSS  FD8.2
0672C:  GOTO   6752
....................       fprintf(PC, "Mission Flash is not connected\r\n");
06730:  MOVLW  56
06732:  MOVWF  FF6
06734:  MOVLW  19
06736:  MOVWF  FF7
06738:  MOVLW  00
0673A:  MOVWF  FF8
0673C:  CALL   1DC0
....................       piclog_make(flash_param.id, PICLOG_PARAM_END);
06740:  MOVFF  241,296
06744:  MOVLB  2
06746:  SETF   x97
06748:  MOVLB  0
0674A:  CALL   4AE2
....................       return; // FIX: 接続失敗時終了
0674E:  GOTO   6B60
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
06752:  MOVLB  2
06754:  CLRF   x8F
06756:  CLRF   x8E
06758:  CLRF   x8D
0675A:  CLRF   x8C
0675C:  MOVLB  0
0675E:  MOVLB  2
06760:  MOVF   x8F,F
06762:  BTFSC  FD8.2
06764:  BRA    676C
06766:  MOVLB  0
06768:  GOTO   6B42
0676C:  MOVLB  0
0676E:  MOVLB  2
06770:  MOVF   x8E,F
06772:  BTFSC  FD8.2
06774:  BRA    677C
06776:  MOVLB  0
06778:  GOTO   6B42
0677C:  MOVLB  0
0677E:  MOVLB  2
06780:  MOVF   x8D,W
06782:  SUBWF  x43,W
06784:  BTFSC  FD8.0
06786:  BRA    678E
06788:  MOVLB  0
0678A:  GOTO   6B42
0678E:  MOVLB  0
06790:  BTFSS  FD8.2
06792:  GOTO   67A8
06796:  MOVLB  2
06798:  MOVF   x42,W
0679A:  SUBWF  x8C,W
0679C:  BTFSS  FD8.0
0679E:  BRA    67A6
067A0:  MOVLB  0
067A2:  GOTO   6B42
067A6:  MOVLB  0
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
067A8:  MOVLB  2
067AA:  RLCF   x8C,W
067AC:  MOVWF  00
067AE:  RLCF   x8D,W
067B0:  MOVWF  01
067B2:  RLCF   x8E,W
067B4:  MOVWF  02
067B6:  RLCF   x8F,W
067B8:  MOVWF  03
067BA:  RLCF   00,F
067BC:  RLCF   01,F
067BE:  RLCF   02,F
067C0:  RLCF   03,F
067C2:  RLCF   00,F
067C4:  RLCF   01,F
067C6:  RLCF   02,F
067C8:  RLCF   03,F
067CA:  RLCF   00,F
067CC:  RLCF   01,F
067CE:  RLCF   02,F
067D0:  RLCF   03,F
067D2:  RLCF   00,F
067D4:  RLCF   01,F
067D6:  RLCF   02,F
067D8:  RLCF   03,F
067DA:  RLCF   00,F
067DC:  RLCF   01,F
067DE:  RLCF   02,F
067E0:  RLCF   03,F
067E2:  MOVLW  C0
067E4:  ANDWF  00,F
067E6:  MOVF   00,W
067E8:  ADDWF  x44,W
067EA:  MOVWF  x88
067EC:  MOVF   01,W
067EE:  ADDWFC x45,W
067F0:  MOVWF  x89
067F2:  MOVF   02,W
067F4:  ADDWFC x46,W
067F6:  MOVWF  x8A
067F8:  MOVF   03,W
067FA:  ADDWFC x47,W
067FC:  MOVWF  x8B
....................       // 終端チェック
....................       if(read_address > MISF_END){
067FE:  MOVF   x8B,F
06800:  BTFSC  FD8.2
06802:  BRA    680A
06804:  MOVLB  0
06806:  GOTO   681E
0680A:  MOVLB  0
0680C:  MOVLB  2
0680E:  MOVF   x8A,W
06810:  SUBLW  0F
06812:  BTFSS  FD8.0
06814:  BRA    681C
06816:  MOVLB  0
06818:  GOTO   68E4
0681C:  MOVLB  0
....................          fprintf(PC, "[FLASH] Read address 0x%08LX exceeds device end 0x%08LX -> stop\r\n", read_address, (unsigned int32)MISF_END);
0681E:  MOVLW  78
06820:  MOVWF  FF6
06822:  MOVLW  19
06824:  MOVWF  FF7
06826:  MOVLW  00
06828:  MOVWF  FF8
0682A:  MOVLW  17
0682C:  MOVLB  A
0682E:  MOVWF  x67
06830:  MOVLB  0
06832:  CALL   1DF6
06836:  MOVFF  28B,AC8
0683A:  MOVLW  37
0683C:  MOVLB  A
0683E:  MOVWF  xC9
06840:  MOVLB  0
06842:  CALL   200A
06846:  MOVFF  28A,AC8
0684A:  MOVLW  37
0684C:  MOVLB  A
0684E:  MOVWF  xC9
06850:  MOVLB  0
06852:  CALL   200A
06856:  MOVFF  289,AC8
0685A:  MOVLW  37
0685C:  MOVLB  A
0685E:  MOVWF  xC9
06860:  MOVLB  0
06862:  CALL   200A
06866:  MOVFF  288,AC8
0686A:  MOVLW  37
0686C:  MOVLB  A
0686E:  MOVWF  xC9
06870:  MOVLB  0
06872:  CALL   200A
06876:  MOVLW  94
06878:  MOVWF  FF6
0687A:  MOVLW  19
0687C:  MOVWF  FF7
0687E:  MOVLW  00
06880:  MOVWF  FF8
06882:  MOVLW  16
06884:  MOVLB  A
06886:  MOVWF  x67
06888:  MOVLB  0
0688A:  CALL   1DF6
0688E:  MOVLB  A
06890:  CLRF   xC8
06892:  MOVLW  37
06894:  MOVWF  xC9
06896:  MOVLB  0
06898:  CALL   200A
0689C:  MOVLW  0F
0689E:  MOVLB  A
068A0:  MOVWF  xC8
068A2:  MOVLW  37
068A4:  MOVWF  xC9
068A6:  MOVLB  0
068A8:  CALL   200A
068AC:  MOVLB  A
068AE:  SETF   xC8
068B0:  MOVLW  37
068B2:  MOVWF  xC9
068B4:  MOVLB  0
068B6:  CALL   200A
068BA:  MOVLB  A
068BC:  SETF   xC8
068BE:  MOVLW  37
068C0:  MOVWF  xC9
068C2:  MOVLB  0
068C4:  CALL   200A
068C8:  MOVLW  AF
068CA:  MOVWF  FF6
068CC:  MOVLW  19
068CE:  MOVWF  FF7
068D0:  MOVLW  00
068D2:  MOVWF  FF8
068D4:  MOVLW  0A
068D6:  MOVLB  A
068D8:  MOVWF  x67
068DA:  MOVLB  0
068DC:  CALL   1DF6
....................          break;
068E0:  GOTO   6B42
....................       }
....................       if(read_address + (PACKET_SIZE - 1) > MISF_END){
068E4:  MOVLW  3F
068E6:  MOVLB  2
068E8:  ADDWF  x88,W
068EA:  MOVWF  x96
068EC:  MOVLW  00
068EE:  ADDWFC x89,W
068F0:  MOVWF  x97
068F2:  MOVLW  00
068F4:  ADDWFC x8A,W
068F6:  MOVWF  x98
068F8:  MOVLW  00
068FA:  ADDWFC x8B,W
068FC:  MOVWF  x99
068FE:  MOVF   x99,F
06900:  BTFSC  FD8.2
06902:  BRA    690A
06904:  MOVLB  0
06906:  GOTO   691E
0690A:  MOVLB  0
0690C:  MOVLB  2
0690E:  MOVF   x98,W
06910:  SUBLW  0F
06912:  BTFSS  FD8.0
06914:  BRA    691C
06916:  MOVLB  0
06918:  GOTO   6A80
0691C:  MOVLB  0
....................          unsigned int32 remain = (MISF_END - read_address) + 1;
0691E:  MOVLW  FF
06920:  BSF    FD8.0
06922:  MOVLB  2
06924:  SUBFWB x88,W
06926:  MOVWF  x96
06928:  MOVLW  FF
0692A:  SUBFWB x89,W
0692C:  MOVWF  x97
0692E:  MOVLW  0F
06930:  SUBFWB x8A,W
06932:  MOVWF  x98
06934:  MOVLW  00
06936:  SUBFWB x8B,W
06938:  MOVWF  x99
0693A:  MOVLW  01
0693C:  ADDWF  x96,W
0693E:  MOVWF  x90
06940:  MOVLW  00
06942:  ADDWFC x97,W
06944:  MOVWF  x91
06946:  MOVLW  00
06948:  ADDWFC x98,W
0694A:  MOVWF  x92
0694C:  MOVLW  00
0694E:  ADDWFC x99,W
06950:  MOVWF  x93
06952:  MOVLB  0
....................          fprintf(PC, "[FLASH] End reached. Partial read %lu bytes.\r\n", remain);
06954:  MOVLW  BA
06956:  MOVWF  FF6
06958:  MOVLW  19
0695A:  MOVWF  FF7
0695C:  MOVLW  00
0695E:  MOVWF  FF8
06960:  MOVLW  22
06962:  MOVLB  A
06964:  MOVWF  x67
06966:  MOVLB  0
06968:  CALL   1DF6
0696C:  MOVLW  41
0696E:  MOVWF  FE9
06970:  MOVFF  293,2E2
06974:  MOVFF  292,2E1
06978:  MOVFF  291,2E0
0697C:  MOVFF  290,2DF
06980:  CALL   5CBE
06984:  MOVLW  DF
06986:  MOVWF  FF6
06988:  MOVLW  19
0698A:  MOVWF  FF7
0698C:  MOVLW  00
0698E:  MOVWF  FF8
06990:  MOVLW  09
06992:  MOVLB  A
06994:  MOVWF  x67
06996:  MOVLB  0
06998:  CALL   1DF6
....................          read_data_bytes(mis_fm, read_address, readdata, remain);
0699C:  MOVFF  115,B5B
069A0:  MOVFF  114,B5A
069A4:  MOVFF  113,B59
069A8:  MOVFF  112,B58
069AC:  MOVFF  28B,B5F
069B0:  MOVFF  28A,B5E
069B4:  MOVFF  289,B5D
069B8:  MOVFF  288,B5C
069BC:  MOVLW  02
069BE:  MOVLB  B
069C0:  MOVWF  x61
069C2:  MOVLW  48
069C4:  MOVWF  x60
069C6:  MOVFF  293,B65
069CA:  MOVFF  292,B64
069CE:  MOVFF  291,B63
069D2:  MOVFF  290,B62
069D6:  MOVLB  0
069D8:  CALL   2A0E
....................          for (unsigned int8 bytecount = 0; bytecount < remain; bytecount++)
069DC:  MOVLB  2
069DE:  CLRF   x94
069E0:  MOVLB  0
069E2:  MOVLB  2
069E4:  MOVF   x93,F
069E6:  BTFSC  FD8.2
069E8:  BRA    69F0
069EA:  MOVLB  0
069EC:  GOTO   6A24
069F0:  MOVLB  0
069F2:  MOVLB  2
069F4:  MOVF   x92,F
069F6:  BTFSC  FD8.2
069F8:  BRA    6A00
069FA:  MOVLB  0
069FC:  GOTO   6A24
06A00:  MOVLB  0
06A02:  MOVLB  2
06A04:  MOVF   x91,F
06A06:  BTFSC  FD8.2
06A08:  BRA    6A10
06A0A:  MOVLB  0
06A0C:  GOTO   6A24
06A10:  MOVLB  0
06A12:  MOVLB  2
06A14:  MOVF   x90,W
06A16:  SUBWF  x94,W
06A18:  BTFSS  FD8.0
06A1A:  BRA    6A22
06A1C:  MOVLB  0
06A1E:  GOTO   6A60
06A22:  MOVLB  0
....................             fprintf(PC, "%02X ", readdata[bytecount]);
06A24:  CLRF   03
06A26:  MOVLB  2
06A28:  MOVF   x94,W
06A2A:  ADDLW  48
06A2C:  MOVWF  FE9
06A2E:  MOVLW  02
06A30:  ADDWFC 03,W
06A32:  MOVWF  FEA
06A34:  MOVFF  FEF,296
06A38:  MOVFF  296,AC8
06A3C:  MOVLW  37
06A3E:  MOVLB  A
06A40:  MOVWF  xC9
06A42:  MOVLB  0
06A44:  CALL   200A
06A48:  MOVLW  20
06A4A:  BTFSS  FA6.6
06A4C:  GOTO   6A4A
06A50:  MOVLB  E
06A52:  MOVWF  xF9
06A54:  MOVLB  0
06A56:  MOVLB  2
06A58:  INCF   x94,F
06A5A:  MOVLB  0
06A5C:  GOTO   69E2
....................          fprintf(PC, "\r\n");
06A60:  MOVLW  0D
06A62:  BTFSS  FA6.6
06A64:  GOTO   6A62
06A68:  MOVLB  E
06A6A:  MOVWF  xF9
06A6C:  MOVLW  0A
06A6E:  MOVLB  0
06A70:  BTFSS  FA6.6
06A72:  GOTO   6A70
06A76:  MOVLB  E
06A78:  MOVWF  xF9
....................          break;
06A7A:  MOVLB  0
06A7C:  GOTO   6B42
....................       }
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
06A80:  MOVFF  115,B5B
06A84:  MOVFF  114,B5A
06A88:  MOVFF  113,B59
06A8C:  MOVFF  112,B58
06A90:  MOVFF  28B,B5F
06A94:  MOVFF  28A,B5E
06A98:  MOVFF  289,B5D
06A9C:  MOVFF  288,B5C
06AA0:  MOVLW  02
06AA2:  MOVLB  B
06AA4:  MOVWF  x61
06AA6:  MOVLW  48
06AA8:  MOVWF  x60
06AAA:  CLRF   x65
06AAC:  CLRF   x64
06AAE:  CLRF   x63
06AB0:  MOVLW  40
06AB2:  MOVWF  x62
06AB4:  MOVLB  0
06AB6:  CALL   2A0E
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
06ABA:  MOVLB  2
06ABC:  CLRF   x95
06ABE:  MOVLB  0
06AC0:  MOVLB  2
06AC2:  MOVF   x95,W
06AC4:  SUBLW  3F
06AC6:  BTFSC  FD8.0
06AC8:  BRA    6AD0
06ACA:  MOVLB  0
06ACC:  GOTO   6B0E
06AD0:  MOVLB  0
....................          fprintf(PC,"%02X ",readdata[bytecount]);
06AD2:  CLRF   03
06AD4:  MOVLB  2
06AD6:  MOVF   x95,W
06AD8:  ADDLW  48
06ADA:  MOVWF  FE9
06ADC:  MOVLW  02
06ADE:  ADDWFC 03,W
06AE0:  MOVWF  FEA
06AE2:  MOVFF  FEF,296
06AE6:  MOVFF  296,AC8
06AEA:  MOVLW  37
06AEC:  MOVLB  A
06AEE:  MOVWF  xC9
06AF0:  MOVLB  0
06AF2:  CALL   200A
06AF6:  MOVLW  20
06AF8:  BTFSS  FA6.6
06AFA:  GOTO   6AF8
06AFE:  MOVLB  E
06B00:  MOVWF  xF9
06B02:  MOVLB  0
06B04:  MOVLB  2
06B06:  INCF   x95,F
06B08:  MOVLB  0
06B0A:  GOTO   6AC0
....................       }
....................       fprintf(PC,"\r\n");
06B0E:  MOVLW  0D
06B10:  BTFSS  FA6.6
06B12:  GOTO   6B10
06B16:  MOVLB  E
06B18:  MOVWF  xF9
06B1A:  MOVLW  0A
06B1C:  MOVLB  0
06B1E:  BTFSS  FA6.6
06B20:  GOTO   6B1E
06B24:  MOVLB  E
06B26:  MOVWF  xF9
06B28:  MOVLB  0
06B2A:  MOVLW  01
06B2C:  MOVLB  2
06B2E:  ADDWF  x8C,F
06B30:  BTFSC  FD8.0
06B32:  INCF   x8D,F
06B34:  BTFSC  FD8.2
06B36:  INCF   x8E,F
06B38:  BTFSC  FD8.2
06B3A:  INCF   x8F,F
06B3C:  MOVLB  0
06B3E:  GOTO   675E
....................    }
....................    piclog_make(flash_param.id, PICLOG_PARAM_END); // Log the end of the command execution
06B42:  MOVFF  241,296
06B46:  MOVLB  2
06B48:  SETF   x97
06B4A:  MOVLB  0
06B4C:  CALL   4AE2
....................    fprintf(PC, "End Flash Read\r\n");
06B50:  MOVLW  EA
06B52:  MOVWF  FF6
06B54:  MOVLW  19
06B56:  MOVWF  FF7
06B58:  MOVLW  00
06B5A:  MOVWF  FF8
06B5C:  CALL   1DC0
06B60:  GOTO   DBEE (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
06B64:  MOVLW  FC
06B66:  MOVWF  FF6
06B68:  MOVLW  19
06B6A:  MOVWF  FF7
06B6C:  MOVLW  00
06B6E:  MOVWF  FF8
06B70:  CALL   1DC0
....................    flash_setting(mis_fm);
06B74:  MOVFF  115,34D
06B78:  MOVFF  114,34C
06B7C:  MOVFF  113,34B
06B80:  MOVFF  112,34A
06B84:  CALL   6390
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
06B88:  MOVLB  2
06B8A:  CLRF   x44
06B8C:  CLRF   x43
06B8E:  CLRF   x42
06B90:  CLRF   x41
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
06B92:  MOVFF  115,B5B
06B96:  MOVFF  114,B5A
06B9A:  MOVFF  113,B59
06B9E:  MOVFF  112,B58
06BA2:  MOVFF  244,B5F
06BA6:  MOVFF  243,B5E
06BAA:  MOVFF  242,B5D
06BAE:  MOVFF  241,B5C
06BB2:  MOVLW  02
06BB4:  MOVLB  B
06BB6:  MOVWF  x61
06BB8:  MOVLW  45
06BBA:  MOVWF  x60
06BBC:  CLRF   x65
06BBE:  CLRF   x64
06BC0:  CLRF   x63
06BC2:  MOVLW  04
06BC4:  MOVWF  x62
06BC6:  MOVLB  0
06BC8:  CALL   2A0E
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
06BCC:  MOVLW  18
06BCE:  MOVWF  FF6
06BD0:  MOVLW  1A
06BD2:  MOVWF  FF7
06BD4:  MOVLW  00
06BD6:  MOVWF  FF8
06BD8:  MOVLW  0B
06BDA:  MOVLB  A
06BDC:  MOVWF  x67
06BDE:  MOVLB  0
06BE0:  CALL   1DF6
06BE4:  MOVFF  245,AC8
06BE8:  MOVLW  37
06BEA:  MOVLB  A
06BEC:  MOVWF  xC9
06BEE:  MOVLB  0
06BF0:  CALL   200A
06BF4:  MOVLW  20
06BF6:  BTFSS  FA6.6
06BF8:  GOTO   6BF6
06BFC:  MOVLB  E
06BFE:  MOVWF  xF9
06C00:  MOVFF  246,AC8
06C04:  MOVLW  37
06C06:  MOVLB  A
06C08:  MOVWF  xC9
06C0A:  MOVLB  0
06C0C:  CALL   200A
06C10:  MOVLW  20
06C12:  BTFSS  FA6.6
06C14:  GOTO   6C12
06C18:  MOVLB  E
06C1A:  MOVWF  xF9
06C1C:  MOVFF  247,AC8
06C20:  MOVLW  37
06C22:  MOVLB  A
06C24:  MOVWF  xC9
06C26:  MOVLB  0
06C28:  CALL   200A
06C2C:  MOVLW  20
06C2E:  BTFSS  FA6.6
06C30:  GOTO   6C2E
06C34:  MOVLB  E
06C36:  MOVWF  xF9
06C38:  MOVFF  248,AC8
06C3C:  MOVLW  37
06C3E:  MOVLB  A
06C40:  MOVWF  xC9
06C42:  MOVLB  0
06C44:  CALL   200A
06C48:  MOVLW  0D
06C4A:  BTFSS  FA6.6
06C4C:  GOTO   6C4A
06C50:  MOVLB  E
06C52:  MOVWF  xF9
06C54:  MOVLW  0A
06C56:  MOVLB  0
06C58:  BTFSS  FA6.6
06C5A:  GOTO   6C58
06C5E:  MOVLB  E
06C60:  MOVWF  xF9
....................    fprintf(PC, "End Flash Read Address\r\n");
06C62:  MOVLW  3A
06C64:  MOVWF  FF6
06C66:  MOVLW  1A
06C68:  MOVWF  FF7
06C6A:  MOVLW  00
06C6C:  MOVWF  FF8
06C6E:  MOVLB  0
06C70:  CALL   1DC0
06C74:  GOTO   DBFE (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase and Reset\r\n");
*
06E68:  MOVLW  54
06E6A:  MOVWF  FF6
06E6C:  MOVLW  1A
06E6E:  MOVWF  FF7
06E70:  MOVLW  00
06E72:  MOVWF  FF8
06E74:  CALL   1DC0
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
06E78:  MOVLB  2
06E7A:  MOVF   x3F,W
06E7C:  MOVWF  FE9
06E7E:  MOVF   x40,W
06E80:  MOVWF  FEA
06E82:  MOVFF  FEF,241
06E86:  MOVFF  241,296
06E8A:  CLRF   x97
06E8C:  MOVLB  0
06E8E:  CALL   4AE2
.................... 
....................    mode_misf_erase_all(parameter); // Erase all flash memory
06E92:  MOVFF  240,242
06E96:  MOVFF  23F,241
06E9A:  CALL   5308
....................    mode_misf_address_reset(parameter); // Reset the address area
06E9E:  MOVFF  240,242
06EA2:  MOVFF  23F,241
06EA6:  GOTO   6C78
.................... 
....................    fprintf(PC, "End Flash Erase and Reset\r\n");
06EAA:  MOVLW  72
06EAC:  MOVWF  FF6
06EAE:  MOVLW  1A
06EB0:  MOVWF  FF7
06EB2:  MOVLW  00
06EB4:  MOVWF  FF8
06EB6:  CALL   1DC0
06EBA:  GOTO   DC0E (RETURN)
.................... }
.................... // ========================== SMF Command ============================
.................... void mode_smf_copy(int8 parameter[])
.................... {
....................    printf("Start Flash SMF Copy\r\n");
06EBE:  MOVLW  8E
06EC0:  MOVWF  FF6
06EC2:  MOVLW  1A
06EC4:  MOVWF  FF7
06EC6:  MOVLW  00
06EC8:  MOVWF  FF8
06ECA:  CALL   1DC0
....................    flash_setting(mis_fm);
06ECE:  MOVFF  115,34D
06ED2:  MOVFF  114,34C
06ED6:  MOVFF  113,34B
06EDA:  MOVFF  112,34A
06EDE:  CALL   6390
....................    flash_setting(smf);
06EE2:  MOVFF  119,34D
06EE6:  MOVFF  118,34C
06EEA:  MOVFF  117,34B
06EEE:  MOVFF  116,34A
06EF2:  CALL   6390
....................    
....................    // 統合管理システムを使用したコピー操作
....................    int8 mission_id = parameter[0];
....................    
....................    // 未コピーデータの自動転送をキューに追加
....................    //enqueue_auto_transfer(mission_id);
....................    
....................    // Example copy operation with integration system
....................    int32 src_address = 0x00000000;
....................    int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
06EF6:  MOVLB  2
06EF8:  MOVF   x3F,W
06EFA:  MOVWF  FE9
06EFC:  MOVF   x40,W
06EFE:  MOVWF  FEA
06F00:  MOVFF  FEF,241
06F04:  CLRF   x45
06F06:  CLRF   x44
06F08:  CLRF   x43
06F0A:  CLRF   x42
06F0C:  CLRF   x49
06F0E:  CLRF   x48
06F10:  MOVLW  10
06F12:  MOVWF  x47
06F14:  CLRF   x46
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
06F16:  MOVFF  115,B5B
06F1A:  MOVFF  114,B5A
06F1E:  MOVFF  113,B59
06F22:  MOVFF  112,B58
06F26:  MOVFF  245,B5F
06F2A:  MOVFF  244,B5E
06F2E:  MOVFF  243,B5D
06F32:  MOVFF  242,B5C
06F36:  MOVLW  02
06F38:  MOVLB  B
06F3A:  MOVWF  x61
06F3C:  MOVLW  4A
06F3E:  MOVWF  x60
06F40:  CLRF   x65
06F42:  CLRF   x64
06F44:  MOVLW  01
06F46:  MOVWF  x63
06F48:  CLRF   x62
06F4A:  MOVLB  0
06F4C:  CALL   2A0E
....................    write_data_bytes(smf, dest_address, read_data, 256);
06F50:  MOVFF  119,B9F
06F54:  MOVFF  118,B9E
06F58:  MOVFF  117,B9D
06F5C:  MOVFF  116,B9C
06F60:  MOVFF  249,BA3
06F64:  MOVFF  248,BA2
06F68:  MOVFF  247,BA1
06F6C:  MOVFF  246,BA0
06F70:  MOVLW  02
06F72:  MOVLB  B
06F74:  MOVWF  xA5
06F76:  MOVLW  4A
06F78:  MOVWF  xA4
06F7A:  MOVLW  01
06F7C:  MOVWF  xA7
06F7E:  CLRF   xA6
06F80:  MOVLB  0
06F82:  CALL   39FE
....................    
....................    // 転送完了後のカウンタ更新
....................    //complete_transfer_and_update_counter(mission_id, 256);
....................    
....................    printf("End Flash SMF Copy\r\n");
06F86:  MOVLW  A6
06F88:  MOVWF  FF6
06F8A:  MOVLW  1A
06F8C:  MOVWF  FF7
06F8E:  MOVLW  00
06F90:  MOVWF  FF8
06F92:  CALL   1DC0
06F96:  GOTO   DC1E (RETURN)
.................... }
.................... 
.................... 
.................... void mode_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
06F9A:  MOVLW  BC
06F9C:  MOVWF  FF6
06F9E:  MOVLW  1A
06FA0:  MOVWF  FF7
06FA2:  MOVLW  00
06FA4:  MOVWF  FF8
06FA6:  CALL   1DC0
....................    int8 read_data[PACKET_SIZE];
....................    unsigned int32 address = 0; // TODO: parameter からアドレス取得拡張可
06FAA:  MOVLB  2
06FAC:  CLRF   x84
06FAE:  CLRF   x83
06FB0:  CLRF   x82
06FB2:  CLRF   x81
....................    read_data_bytes(smf, address, read_data, PACKET_SIZE); // FIX: 誤引数順
06FB4:  MOVFF  119,B5B
06FB8:  MOVFF  118,B5A
06FBC:  MOVFF  117,B59
06FC0:  MOVFF  116,B58
06FC4:  MOVFF  284,B5F
06FC8:  MOVFF  283,B5E
06FCC:  MOVFF  282,B5D
06FD0:  MOVFF  281,B5C
06FD4:  MOVLW  02
06FD6:  MOVLB  B
06FD8:  MOVWF  x61
06FDA:  MOVLW  41
06FDC:  MOVWF  x60
06FDE:  CLRF   x65
06FE0:  CLRF   x64
06FE2:  CLRF   x63
06FE4:  MOVLW  40
06FE6:  MOVWF  x62
06FE8:  MOVLB  0
06FEA:  CALL   2A0E
....................    fprintf(PC, "Read Data: ");
06FEE:  MOVLW  D4
06FF0:  MOVWF  FF6
06FF2:  MOVLW  1A
06FF4:  MOVWF  FF7
06FF6:  MOVLW  00
06FF8:  MOVWF  FF8
06FFA:  CALL   1DC0
....................    for (int i = 0; i < PACKET_SIZE; i++)
06FFE:  MOVLB  2
07000:  CLRF   x85
07002:  MOVLB  0
07004:  MOVLB  2
07006:  MOVF   x85,W
07008:  SUBLW  3F
0700A:  BTFSC  FD8.0
0700C:  BRA    7014
0700E:  MOVLB  0
07010:  GOTO   7052
07014:  MOVLB  0
....................       fprintf(PC, "%02X ", read_data[i]);
07016:  CLRF   03
07018:  MOVLB  2
0701A:  MOVF   x85,W
0701C:  ADDLW  41
0701E:  MOVWF  FE9
07020:  MOVLW  02
07022:  ADDWFC 03,W
07024:  MOVWF  FEA
07026:  MOVFF  FEF,286
0702A:  MOVFF  286,AC8
0702E:  MOVLW  37
07030:  MOVLB  A
07032:  MOVWF  xC9
07034:  MOVLB  0
07036:  CALL   200A
0703A:  MOVLW  20
0703C:  BTFSS  FA6.6
0703E:  GOTO   703C
07042:  MOVLB  E
07044:  MOVWF  xF9
07046:  MOVLB  0
07048:  MOVLB  2
0704A:  INCF   x85,F
0704C:  MOVLB  0
0704E:  GOTO   7004
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
07052:  MOVLW  E0
07054:  MOVWF  FF6
07056:  MOVLW  1A
07058:  MOVWF  FF7
0705A:  MOVLW  00
0705C:  MOVWF  FF8
0705E:  CALL   1DC0
07062:  GOTO   DC2E (RETURN)
.................... }
.................... 
.................... void mode_smf_erase(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Erase\r\n");
07066:  MOVLW  F8
07068:  MOVWF  FF6
0706A:  MOVLW  1A
0706C:  MOVWF  FF7
0706E:  MOVLW  00
07070:  MOVWF  FF8
07072:  CALL   1DC0
....................    flash_setting(smf);
07076:  MOVFF  119,34D
0707A:  MOVFF  118,34C
0707E:  MOVFF  117,34B
07082:  MOVFF  116,34A
07086:  CALL   6390
....................    unsigned int32 erase_address = 0x00000000; // Example address
0708A:  MOVLB  2
0708C:  CLRF   x44
0708E:  CLRF   x43
07090:  CLRF   x42
07092:  CLRF   x41
....................    sector_erase(smf, erase_address); // Erase the sector
07094:  MOVFF  119,B9D
07098:  MOVFF  118,B9C
0709C:  MOVFF  117,B9B
070A0:  MOVFF  116,B9A
070A4:  MOVFF  244,BA1
070A8:  MOVFF  243,BA0
070AC:  MOVFF  242,B9F
070B0:  MOVFF  241,B9E
070B4:  MOVLB  0
070B6:  CALL   3EE2
....................    fprintf(PC, "End Flash SMF Erase\r\n");
070BA:  MOVLW  10
070BC:  MOVWF  FF6
070BE:  MOVLW  1B
070C0:  MOVWF  FF7
070C2:  MOVLW  00
070C4:  MOVWF  FF8
070C6:  CALL   1DC0
070CA:  GOTO   DC3E (RETURN)
.................... }  
.................... 
.................... void mode_misf_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
*
06C78:  MOVLW  26
06C7A:  MOVWF  FF6
06C7C:  MOVLW  1B
06C7E:  MOVWF  FF7
06C80:  MOVLW  00
06C82:  MOVWF  FF8
06C84:  CALL   1DC0
....................    piclog_make(parameter[0], PICLOG_PARAM_START); 
06C88:  MOVLB  2
06C8A:  MOVF   x41,W
06C8C:  MOVWF  FE9
06C8E:  MOVF   x42,W
06C90:  MOVWF  FEA
06C92:  MOVFF  FEF,285
06C96:  MOVFF  285,296
06C9A:  CLRF   x97
06C9C:  MOVLB  0
06C9E:  CALL   4AE2
....................    FlashData_t flash_data;
....................    memset(flash_data.bytes, 0, PACKET_SIZE);
06CA2:  MOVLW  02
06CA4:  MOVWF  FEA
06CA6:  MOVLW  43
06CA8:  MOVWF  FE9
06CAA:  CLRF   00
06CAC:  CLRF   02
06CAE:  MOVLW  40
06CB0:  MOVWF  01
06CB2:  CALL   29EA
....................    /*
....................    for (int i = 0; i < PACKET_SIZE; i++) {
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
....................    }
....................    */
....................    fprintf(PC, "\r\n");
06CB6:  MOVLW  0D
06CB8:  BTFSS  FA6.6
06CBA:  GOTO   6CB8
06CBE:  MOVLB  E
06CC0:  MOVWF  xF9
06CC2:  MOVLW  0A
06CC4:  MOVLB  0
06CC6:  BTFSS  FA6.6
06CC8:  GOTO   6CC6
06CCC:  MOVLB  E
06CCE:  MOVWF  xF9
....................    flash_data.packet.crc = calc_crc8(flash_data.bytes, PACKET_SIZE-1);
06CD0:  MOVLW  02
06CD2:  MOVLB  B
06CD4:  MOVWF  xE7
06CD6:  MOVLW  43
06CD8:  MOVWF  xE6
06CDA:  MOVLW  3F
06CDC:  MOVWF  xE8
06CDE:  MOVLB  0
06CE0:  CALL   2C22
06CE4:  MOVFF  01,282
....................    for (int i = 0; i < PACKET_SIZE; i++) {
06CE8:  MOVLB  2
06CEA:  CLRF   x83
06CEC:  MOVLB  0
06CEE:  MOVLB  2
06CF0:  MOVF   x83,W
06CF2:  SUBLW  3F
06CF4:  BTFSC  FD8.0
06CF6:  BRA    6CFE
06CF8:  MOVLB  0
06CFA:  GOTO   6D3C
06CFE:  MOVLB  0
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
06D00:  CLRF   03
06D02:  MOVLB  2
06D04:  MOVF   x83,W
06D06:  ADDLW  43
06D08:  MOVWF  FE9
06D0A:  MOVLW  02
06D0C:  ADDWFC 03,W
06D0E:  MOVWF  FEA
06D10:  MOVFF  FEF,285
06D14:  MOVFF  285,AC8
06D18:  MOVLW  37
06D1A:  MOVLB  A
06D1C:  MOVWF  xC9
06D1E:  MOVLB  0
06D20:  CALL   200A
06D24:  MOVLW  20
06D26:  BTFSS  FA6.6
06D28:  GOTO   6D26
06D2C:  MOVLB  E
06D2E:  MOVWF  xF9
06D30:  MOVLB  0
06D32:  MOVLB  2
06D34:  INCF   x83,F
06D36:  MOVLB  0
06D38:  GOTO   6CEE
....................    }
....................    fprintf(PC, "\r\n");
06D3C:  MOVLW  0D
06D3E:  BTFSS  FA6.6
06D40:  GOTO   6D3E
06D44:  MOVLB  E
06D46:  MOVWF  xF9
06D48:  MOVLW  0A
06D4A:  MOVLB  0
06D4C:  BTFSS  FA6.6
06D4E:  GOTO   6D4C
06D52:  MOVLB  E
06D54:  MOVWF  xF9
....................    write_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, flash_data.bytes, PACKET_SIZE);
06D56:  MOVFF  115,B9F
06D5A:  MOVFF  114,B9E
06D5E:  MOVFF  113,B9D
06D62:  MOVFF  112,B9C
06D66:  MOVLB  B
06D68:  CLRF   xA3
06D6A:  CLRF   xA2
06D6C:  CLRF   xA1
06D6E:  CLRF   xA0
06D70:  MOVLW  02
06D72:  MOVWF  xA5
06D74:  MOVLW  43
06D76:  MOVWF  xA4
06D78:  CLRF   xA7
06D7A:  MOVLW  40
06D7C:  MOVWF  xA6
06D7E:  MOVLB  0
06D80:  CALL   39FE
....................    memset(flash_data.bytes, 0, PACKET_SIZE);
06D84:  MOVLW  02
06D86:  MOVWF  FEA
06D88:  MOVLW  43
06D8A:  MOVWF  FE9
06D8C:  CLRF   00
06D8E:  CLRF   02
06D90:  MOVLW  40
06D92:  MOVWF  01
06D94:  CALL   29EA
....................    read_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, flash_data.bytes, PACKET_SIZE);
06D98:  MOVFF  115,B5B
06D9C:  MOVFF  114,B5A
06DA0:  MOVFF  113,B59
06DA4:  MOVFF  112,B58
06DA8:  MOVLB  B
06DAA:  CLRF   x5F
06DAC:  CLRF   x5E
06DAE:  CLRF   x5D
06DB0:  CLRF   x5C
06DB2:  MOVLW  02
06DB4:  MOVWF  x61
06DB6:  MOVLW  43
06DB8:  MOVWF  x60
06DBA:  CLRF   x65
06DBC:  CLRF   x64
06DBE:  CLRF   x63
06DC0:  MOVLW  40
06DC2:  MOVWF  x62
06DC4:  MOVLB  0
06DC6:  CALL   2A0E
....................    flash_data.packet.crc = calc_crc8(flash_data.bytes, PACKET_SIZE-1);
06DCA:  MOVLW  02
06DCC:  MOVLB  B
06DCE:  MOVWF  xE7
06DD0:  MOVLW  43
06DD2:  MOVWF  xE6
06DD4:  MOVLW  3F
06DD6:  MOVWF  xE8
06DD8:  MOVLB  0
06DDA:  CALL   2C22
06DDE:  MOVFF  01,282
....................    for (int i = 0; i < PACKET_SIZE; i++) {
06DE2:  MOVLB  2
06DE4:  CLRF   x84
06DE6:  MOVLB  0
06DE8:  MOVLB  2
06DEA:  MOVF   x84,W
06DEC:  SUBLW  3F
06DEE:  BTFSC  FD8.0
06DF0:  BRA    6DF8
06DF2:  MOVLB  0
06DF4:  GOTO   6E36
06DF8:  MOVLB  0
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
06DFA:  CLRF   03
06DFC:  MOVLB  2
06DFE:  MOVF   x84,W
06E00:  ADDLW  43
06E02:  MOVWF  FE9
06E04:  MOVLW  02
06E06:  ADDWFC 03,W
06E08:  MOVWF  FEA
06E0A:  MOVFF  FEF,285
06E0E:  MOVFF  285,AC8
06E12:  MOVLW  37
06E14:  MOVLB  A
06E16:  MOVWF  xC9
06E18:  MOVLB  0
06E1A:  CALL   200A
06E1E:  MOVLW  20
06E20:  BTFSS  FA6.6
06E22:  GOTO   6E20
06E26:  MOVLB  E
06E28:  MOVWF  xF9
06E2A:  MOVLB  0
06E2C:  MOVLB  2
06E2E:  INCF   x84,F
06E30:  MOVLB  0
06E32:  GOTO   6DE8
....................    }
....................    misf_init(); // Update the address area after writing
06E36:  CALL   3498
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06E3A:  MOVLB  2
06E3C:  MOVF   x41,W
06E3E:  MOVWF  FE9
06E40:  MOVF   x42,W
06E42:  MOVWF  FEA
06E44:  MOVFF  FEF,285
06E48:  MOVFF  285,296
06E4C:  SETF   x97
06E4E:  MOVLB  0
06E50:  CALL   4AE2
....................    fprintf(PC, "End Flash Address Reset\r\n");
06E54:  MOVLW  42
06E56:  MOVWF  FF6
06E58:  MOVLW  1B
06E5A:  MOVWF  FF7
06E5C:  MOVLW  00
06E5E:  MOVWF  FF8
06E60:  CALL   1DC0
06E64:  GOTO   6EAA (RETURN)
.................... }
.................... 
.................... 
.................... // ---------- SMF Command Functions ----------
.................... void mode_smf_read_force(int8 parameter[])
*
07322:  MOVLW  01
07324:  MOVLB  2
07326:  ADDWF  x3F,W
07328:  MOVWF  FE9
0732A:  MOVLW  00
0732C:  ADDWFC x40,W
0732E:  MOVWF  FEA
07330:  MOVF   FEF,W
07332:  CLRF   x91
07334:  CLRF   x90
07336:  CLRF   x8F
07338:  MOVWF  x8E
0733A:  MOVFF  28E,291
0733E:  CLRF   x8E
07340:  CLRF   x8F
07342:  CLRF   x90
07344:  MOVLW  02
07346:  ADDWF  x3F,W
07348:  MOVWF  FE9
0734A:  MOVLW  00
0734C:  ADDWFC x40,W
0734E:  MOVWF  FEA
07350:  MOVF   FEF,W
07352:  CLRF   x96
07354:  CLRF   x95
07356:  CLRF   x94
07358:  MOVWF  x93
0735A:  MOVFF  294,03
0735E:  MOVFF  293,02
07362:  CLRF   00
07364:  CLRF   01
07366:  MOVF   00,W
07368:  IORWF  x8E,F
0736A:  MOVF   01,W
0736C:  IORWF  x8F,F
0736E:  MOVF   02,W
07370:  IORWF  x90,F
07372:  MOVF   03,W
07374:  IORWF  x91,F
07376:  MOVLW  03
07378:  ADDWF  x3F,W
0737A:  MOVWF  FE9
0737C:  MOVLW  00
0737E:  ADDWFC x40,W
07380:  MOVWF  FEA
07382:  MOVF   FEF,W
07384:  CLRF   x96
07386:  CLRF   x95
07388:  CLRF   x94
0738A:  MOVWF  x93
0738C:  MOVFF  295,03
07390:  MOVFF  294,02
07394:  MOVFF  293,01
07398:  CLRF   00
0739A:  MOVF   00,W
0739C:  IORWF  x8E,F
0739E:  MOVF   01,W
073A0:  IORWF  x8F,F
073A2:  MOVF   02,W
073A4:  IORWF  x90,F
073A6:  MOVF   03,W
073A8:  IORWF  x91,F
073AA:  MOVLW  04
073AC:  ADDWF  x3F,W
073AE:  MOVWF  FE9
073B0:  MOVLW  00
073B2:  ADDWFC x40,W
073B4:  MOVWF  FEA
073B6:  MOVF   FEF,W
073B8:  MOVWF  00
073BA:  CLRF   01
073BC:  CLRF   02
073BE:  CLRF   03
073C0:  MOVF   00,W
073C2:  IORWF  x8E,W
073C4:  MOVWF  x41
073C6:  MOVF   01,W
073C8:  IORWF  x8F,W
073CA:  MOVWF  x42
073CC:  MOVF   02,W
073CE:  IORWF  x90,W
073D0:  MOVWF  x43
073D2:  MOVF   03,W
073D4:  IORWF  x91,W
073D6:  MOVWF  x44
073D8:  MOVLW  07
073DA:  ADDWF  x3F,W
073DC:  MOVWF  FE9
073DE:  MOVLW  00
073E0:  ADDWFC x40,W
073E2:  MOVWF  FEA
073E4:  MOVF   FEF,W
073E6:  CLRF   x8F
073E8:  MOVWF  x8E
073EA:  MOVFF  28E,28F
073EE:  CLRF   x8E
073F0:  MOVLW  08
073F2:  ADDWF  x3F,W
073F4:  MOVWF  FE9
073F6:  MOVLW  00
073F8:  ADDWFC x40,W
073FA:  MOVWF  FEA
073FC:  MOVF   FEF,W
073FE:  CLRF   03
07400:  IORWF  x8E,W
07402:  MOVWF  x45
07404:  MOVF   03,W
07406:  IORWF  x8F,W
07408:  MOVWF  x46
.................... {
....................    int32 address = 
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
....................    
....................    int16 packet_num = 
....................       ((int16)parameter[7] << 8) |
....................       ((int16)parameter[8]);
....................       
....................    int8 read_data[PACKET_SIZE] = {0x00}; // Initialize read data buffer
0740A:  CLRF   x47
0740C:  CLRF   x48
0740E:  CLRF   x49
07410:  CLRF   x4A
07412:  CLRF   x4B
07414:  CLRF   x4C
07416:  CLRF   x4D
07418:  CLRF   x4E
0741A:  CLRF   x4F
0741C:  CLRF   x50
0741E:  CLRF   x51
07420:  CLRF   x52
07422:  CLRF   x53
07424:  CLRF   x54
07426:  CLRF   x55
07428:  CLRF   x56
0742A:  CLRF   x57
0742C:  CLRF   x58
0742E:  CLRF   x59
07430:  CLRF   x5A
07432:  CLRF   x5B
07434:  CLRF   x5C
07436:  CLRF   x5D
07438:  CLRF   x5E
0743A:  CLRF   x5F
0743C:  CLRF   x60
0743E:  CLRF   x61
07440:  CLRF   x62
07442:  CLRF   x63
07444:  CLRF   x64
07446:  CLRF   x65
07448:  CLRF   x66
0744A:  CLRF   x67
0744C:  CLRF   x68
0744E:  CLRF   x69
07450:  CLRF   x6A
07452:  CLRF   x6B
07454:  CLRF   x6C
07456:  CLRF   x6D
07458:  CLRF   x6E
0745A:  CLRF   x6F
0745C:  CLRF   x70
0745E:  CLRF   x71
07460:  CLRF   x72
07462:  CLRF   x73
07464:  CLRF   x74
07466:  CLRF   x75
07468:  CLRF   x76
0746A:  CLRF   x77
0746C:  CLRF   x78
0746E:  CLRF   x79
07470:  CLRF   x7A
07472:  CLRF   x7B
07474:  CLRF   x7C
07476:  CLRF   x7D
07478:  CLRF   x7E
0747A:  CLRF   x7F
0747C:  CLRF   x80
0747E:  CLRF   x81
07480:  CLRF   x82
07482:  CLRF   x83
07484:  CLRF   x84
07486:  CLRF   x85
07488:  CLRF   x86
....................    if(!is_connect(smf)) {
0748A:  MOVFF  119,2E2
0748E:  MOVFF  118,2E1
07492:  MOVFF  117,2E0
07496:  MOVFF  116,2DF
0749A:  MOVLB  0
0749C:  CALL   2922
074A0:  MOVF   01,F
074A2:  BTFSS  FD8.2
074A4:  GOTO   74BC
....................       printf("SMF is not connected\r\n");
074A8:  MOVLW  5C
074AA:  MOVWF  FF6
074AC:  MOVLW  1B
074AE:  MOVWF  FF7
074B0:  MOVLW  00
074B2:  MOVWF  FF8
074B4:  CALL   1DC0
....................       return;
074B8:  GOTO   770C
....................    }
....................    printf("Start Flash SMF Read Force\r\n");
074BC:  MOVLW  74
074BE:  MOVWF  FF6
074C0:  MOVLW  1B
074C2:  MOVWF  FF7
074C4:  MOVLW  00
074C6:  MOVWF  FF8
074C8:  CALL   1DC0
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
074CC:  MOVLB  2
074CE:  MOVF   x3F,W
074D0:  MOVWF  FE9
074D2:  MOVF   x40,W
074D4:  MOVWF  FEA
074D6:  MOVFF  FEF,28E
074DA:  MOVFF  28E,296
074DE:  CLRF   x97
074E0:  MOVLB  0
074E2:  CALL   4AE2
.................... 
....................    // 統合管理システムからキューに追加
....................    // enqueue_read_data(address, packet_num * PACKET_SIZE);
.................... 
....................    printf("\tAddress  : 0x%08LX\r\n", address);
074E6:  MOVLW  92
074E8:  MOVWF  FF6
074EA:  MOVLW  1B
074EC:  MOVWF  FF7
074EE:  MOVLW  00
074F0:  MOVWF  FF8
074F2:  MOVLW  0E
074F4:  MOVLB  A
074F6:  MOVWF  x67
074F8:  MOVLB  0
074FA:  CALL   1DF6
074FE:  MOVFF  244,AC8
07502:  MOVLW  37
07504:  MOVLB  A
07506:  MOVWF  xC9
07508:  MOVLB  0
0750A:  CALL   200A
0750E:  MOVFF  243,AC8
07512:  MOVLW  37
07514:  MOVLB  A
07516:  MOVWF  xC9
07518:  MOVLB  0
0751A:  CALL   200A
0751E:  MOVFF  242,AC8
07522:  MOVLW  37
07524:  MOVLB  A
07526:  MOVWF  xC9
07528:  MOVLB  0
0752A:  CALL   200A
0752E:  MOVFF  241,AC8
07532:  MOVLW  37
07534:  MOVLB  A
07536:  MOVWF  xC9
07538:  MOVLB  0
0753A:  CALL   200A
0753E:  MOVLW  0D
07540:  BTFSS  FA6.6
07542:  GOTO   7540
07546:  MOVLB  E
07548:  MOVWF  xF9
0754A:  MOVLW  0A
0754C:  MOVLB  0
0754E:  BTFSS  FA6.6
07550:  GOTO   754E
07554:  MOVLB  E
07556:  MOVWF  xF9
....................    printf("\tPacketNum: 0x%04LX\r\n", packet_num);
07558:  MOVLW  A8
0755A:  MOVWF  FF6
0755C:  MOVLW  1B
0755E:  MOVWF  FF7
07560:  MOVLW  00
07562:  MOVWF  FF8
07564:  MOVLW  0E
07566:  MOVLB  A
07568:  MOVWF  x67
0756A:  MOVLB  0
0756C:  CALL   1DF6
07570:  MOVFF  246,AC8
07574:  MOVLW  37
07576:  MOVLB  A
07578:  MOVWF  xC9
0757A:  MOVLB  0
0757C:  CALL   200A
07580:  MOVFF  245,AC8
07584:  MOVLW  37
07586:  MOVLB  A
07588:  MOVWF  xC9
0758A:  MOVLB  0
0758C:  CALL   200A
07590:  MOVLW  0D
07592:  BTFSS  FA6.6
07594:  GOTO   7592
07598:  MOVLB  E
0759A:  MOVWF  xF9
0759C:  MOVLW  0A
0759E:  MOVLB  0
075A0:  BTFSS  FA6.6
075A2:  GOTO   75A0
075A6:  MOVLB  E
075A8:  MOVWF  xF9
....................    printf("read data\r\n");
075AA:  MOVLW  BE
075AC:  MOVWF  FF6
075AE:  MOVLW  1B
075B0:  MOVWF  FF7
075B2:  MOVLW  00
075B4:  MOVWF  FF8
075B6:  MOVLB  0
075B8:  CALL   1DC0
....................    for (int16 packet_count = 0; packet_count < packet_num; packet_count++)
075BC:  MOVLB  2
075BE:  CLRF   x88
075C0:  CLRF   x87
075C2:  MOVLB  0
075C4:  MOVLB  2
075C6:  MOVF   x88,W
075C8:  SUBWF  x46,W
075CA:  BTFSC  FD8.0
075CC:  BRA    75D4
075CE:  MOVLB  0
075D0:  GOTO   76E2
075D4:  MOVLB  0
075D6:  BTFSS  FD8.2
075D8:  GOTO   75EE
075DC:  MOVLB  2
075DE:  MOVF   x45,W
075E0:  SUBWF  x87,W
075E2:  BTFSS  FD8.0
075E4:  BRA    75EC
075E6:  MOVLB  0
075E8:  GOTO   76E2
075EC:  MOVLB  0
....................    {
....................       int32 current_address = address + (packet_count * PACKET_SIZE);
075EE:  MOVLB  2
075F0:  RLCF   x87,W
075F2:  MOVWF  02
075F4:  RLCF   x88,W
075F6:  MOVWF  03
075F8:  RLCF   02,F
075FA:  RLCF   03,F
075FC:  RLCF   02,F
075FE:  RLCF   03,F
07600:  RLCF   02,F
07602:  RLCF   03,F
07604:  RLCF   02,F
07606:  RLCF   03,F
07608:  RLCF   02,F
0760A:  RLCF   03,F
0760C:  MOVLW  C0
0760E:  ANDWF  02,F
07610:  MOVF   02,W
07612:  ADDWF  x41,W
07614:  MOVWF  x89
07616:  MOVF   03,W
07618:  ADDWFC x42,W
0761A:  MOVWF  x8A
0761C:  MOVLW  00
0761E:  ADDWFC x43,W
07620:  MOVWF  x8B
07622:  MOVLW  00
07624:  ADDWFC x44,W
07626:  MOVWF  x8C
07628:  MOVLB  0
....................       read_data_bytes(smf, current_address, read_data, PACKET_SIZE);
0762A:  MOVFF  119,B5B
0762E:  MOVFF  118,B5A
07632:  MOVFF  117,B59
07636:  MOVFF  116,B58
0763A:  MOVFF  28C,B5F
0763E:  MOVFF  28B,B5E
07642:  MOVFF  28A,B5D
07646:  MOVFF  289,B5C
0764A:  MOVLW  02
0764C:  MOVLB  B
0764E:  MOVWF  x61
07650:  MOVLW  47
07652:  MOVWF  x60
07654:  CLRF   x65
07656:  CLRF   x64
07658:  CLRF   x63
0765A:  MOVLW  40
0765C:  MOVWF  x62
0765E:  MOVLB  0
07660:  CALL   2A0E
....................       for (int8 byte_count = 0; byte_count < PACKET_SIZE; byte_count++)
07664:  MOVLB  2
07666:  CLRF   x8D
07668:  MOVLB  0
0766A:  MOVLB  2
0766C:  MOVF   x8D,W
0766E:  SUBLW  3F
07670:  BTFSC  FD8.0
07672:  BRA    767A
07674:  MOVLB  0
07676:  GOTO   76B8
0767A:  MOVLB  0
....................       {
....................          printf("%02X ", read_data[byte_count]);
0767C:  CLRF   03
0767E:  MOVLB  2
07680:  MOVF   x8D,W
07682:  ADDLW  47
07684:  MOVWF  FE9
07686:  MOVLW  02
07688:  ADDWFC 03,W
0768A:  MOVWF  FEA
0768C:  MOVFF  FEF,28E
07690:  MOVFF  28E,AC8
07694:  MOVLW  37
07696:  MOVLB  A
07698:  MOVWF  xC9
0769A:  MOVLB  0
0769C:  CALL   200A
076A0:  MOVLW  20
076A2:  BTFSS  FA6.6
076A4:  GOTO   76A2
076A8:  MOVLB  E
076AA:  MOVWF  xF9
076AC:  MOVLB  0
076AE:  MOVLB  2
076B0:  INCF   x8D,F
076B2:  MOVLB  0
076B4:  GOTO   766A
....................       }
....................       printf("\r\n");
076B8:  MOVLW  0D
076BA:  BTFSS  FA6.6
076BC:  GOTO   76BA
076C0:  MOVLB  E
076C2:  MOVWF  xF9
076C4:  MOVLW  0A
076C6:  MOVLB  0
076C8:  BTFSS  FA6.6
076CA:  GOTO   76C8
076CE:  MOVLB  E
076D0:  MOVWF  xF9
076D2:  MOVLB  0
076D4:  MOVLB  2
076D6:  INCF   x87,F
076D8:  BTFSC  FD8.2
076DA:  INCF   x88,F
076DC:  MOVLB  0
076DE:  GOTO   75C4
....................    }
.................... 
....................    printf("\r\nEnd Flash SMF Read Force\r\n");
076E2:  MOVLW  CA
076E4:  MOVWF  FF6
076E6:  MOVLW  1B
076E8:  MOVWF  FF7
076EA:  MOVLW  00
076EC:  MOVWF  FF8
076EE:  CALL   1DC0
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
076F2:  MOVLB  2
076F4:  MOVF   x3F,W
076F6:  MOVWF  FE9
076F8:  MOVF   x40,W
076FA:  MOVWF  FEA
076FC:  MOVFF  FEF,28E
07700:  MOVFF  28E,296
07704:  SETF   x97
07706:  MOVLB  0
07708:  CALL   4AE2
0770C:  GOTO   DC5E (RETURN)
.................... }
.................... 
.................... void mode_smf_erase_force(int8 parameter[])
.................... {
....................    printf("Start SMF Erase All\r\n");
07710:  MOVLW  E8
07712:  MOVWF  FF6
07714:  MOVLW  1B
07716:  MOVWF  FF7
07718:  MOVLW  00
0771A:  MOVWF  FF8
0771C:  CALL   1DC0
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
07720:  MOVLB  2
07722:  MOVF   x3F,W
07724:  MOVWF  FE9
07726:  MOVF   x40,W
07728:  MOVWF  FEA
0772A:  MOVFF  FEF,241
....................    piclog_make(cmd, 0x00); // Log the command execution
0772E:  MOVFF  241,296
07732:  CLRF   x97
07734:  MOVLB  0
07736:  CALL   4AE2
....................    
.................... 
....................    
....................    for (int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_PICLOG_END_ADDRESS; address += SECTOR_64K_BYTE) {
0773A:  MOVLW  06
0773C:  MOVLB  2
0773E:  MOVWF  x45
07740:  MOVLW  AA
07742:  MOVWF  x44
07744:  CLRF   x43
07746:  CLRF   x42
07748:  MOVLB  0
0774A:  MOVLB  2
0774C:  MOVF   x45,W
0774E:  SUBLW  06
07750:  BTFSC  FD8.0
07752:  BRA    775A
07754:  MOVLB  0
07756:  GOTO   77D8
0775A:  MOVLB  0
0775C:  BTFSS  FD8.2
0775E:  GOTO   77A4
07762:  MOVLB  2
07764:  MOVF   x44,W
07766:  SUBLW  AA
07768:  BTFSC  FD8.0
0776A:  BRA    7772
0776C:  MOVLB  0
0776E:  GOTO   77D8
07772:  MOVLB  0
07774:  BTFSS  FD8.2
07776:  GOTO   77A4
0777A:  MOVLB  2
0777C:  MOVF   x43,W
0777E:  SUBLW  1F
07780:  BTFSC  FD8.0
07782:  BRA    778A
07784:  MOVLB  0
07786:  GOTO   77D8
0778A:  MOVLB  0
0778C:  BTFSS  FD8.2
0778E:  GOTO   77A4
07792:  MOVLB  2
07794:  MOVF   x42,W
07796:  SUBLW  FE
07798:  BTFSC  FD8.0
0779A:  BRA    77A2
0779C:  MOVLB  0
0779E:  GOTO   77D8
077A2:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
077A4:  MOVFF  119,B9D
077A8:  MOVFF  118,B9C
077AC:  MOVFF  117,B9B
077B0:  MOVFF  116,B9A
077B4:  MOVFF  245,BA1
077B8:  MOVFF  244,BA0
077BC:  MOVFF  243,B9F
077C0:  MOVFF  242,B9E
077C4:  CALL   3EE2
077C8:  MOVLW  01
077CA:  MOVLB  2
077CC:  ADDWF  x44,F
077CE:  MOVLW  00
077D0:  ADDWFC x45,F
077D2:  MOVLB  0
077D4:  GOTO   774A
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
077D8:  MOVFF  241,296
077DC:  MOVLB  2
077DE:  SETF   x97
077E0:  MOVLB  0
077E2:  CALL   4AE2
....................    printf("End SMF Erase All\r\n");
077E6:  MOVLW  FE
077E8:  MOVWF  FF6
077EA:  MOVLW  1B
077EC:  MOVWF  FF7
077EE:  MOVLW  00
077F0:  MOVWF  FF8
077F2:  CALL   1DC0
077F6:  GOTO   DC6E (RETURN)
.................... }
.................... 
.................... void mode_smf_address_reset(int8 parameter[])
.................... {
....................    printf("Start SMF Reset\r\n");
*
071AA:  MOVLW  12
071AC:  MOVWF  FF6
071AE:  MOVLW  1C
071B0:  MOVWF  FF7
071B2:  MOVLW  00
071B4:  MOVWF  FF8
071B6:  CALL   1DC0
....................    piclog_make(parameter[0], PICLOG_PARAM_START);
071BA:  MOVLB  2
071BC:  MOVF   x3F,W
071BE:  MOVWF  FE9
071C0:  MOVF   x40,W
071C2:  MOVWF  FEA
071C4:  MOVFF  FEF,285
071C8:  MOVFF  285,296
071CC:  CLRF   x97
071CE:  MOVLB  0
071D0:  CALL   4AE2
....................    int8 writedata[PACKET_SIZE] = {0x00}; 
071D4:  MOVLB  2
071D6:  CLRF   x41
071D8:  CLRF   x42
071DA:  CLRF   x43
071DC:  CLRF   x44
071DE:  CLRF   x45
071E0:  CLRF   x46
071E2:  CLRF   x47
071E4:  CLRF   x48
071E6:  CLRF   x49
071E8:  CLRF   x4A
071EA:  CLRF   x4B
071EC:  CLRF   x4C
071EE:  CLRF   x4D
071F0:  CLRF   x4E
071F2:  CLRF   x4F
071F4:  CLRF   x50
071F6:  CLRF   x51
071F8:  CLRF   x52
071FA:  CLRF   x53
071FC:  CLRF   x54
071FE:  CLRF   x55
07200:  CLRF   x56
07202:  CLRF   x57
07204:  CLRF   x58
07206:  CLRF   x59
07208:  CLRF   x5A
0720A:  CLRF   x5B
0720C:  CLRF   x5C
0720E:  CLRF   x5D
07210:  CLRF   x5E
07212:  CLRF   x5F
07214:  CLRF   x60
07216:  CLRF   x61
07218:  CLRF   x62
0721A:  CLRF   x63
0721C:  CLRF   x64
0721E:  CLRF   x65
07220:  CLRF   x66
07222:  CLRF   x67
07224:  CLRF   x68
07226:  CLRF   x69
07228:  CLRF   x6A
0722A:  CLRF   x6B
0722C:  CLRF   x6C
0722E:  CLRF   x6D
07230:  CLRF   x6E
07232:  CLRF   x6F
07234:  CLRF   x70
07236:  CLRF   x71
07238:  CLRF   x72
0723A:  CLRF   x73
0723C:  CLRF   x74
0723E:  CLRF   x75
07240:  CLRF   x76
07242:  CLRF   x77
07244:  CLRF   x78
07246:  CLRF   x79
07248:  CLRF   x7A
0724A:  CLRF   x7B
0724C:  CLRF   x7C
0724E:  CLRF   x7D
07250:  CLRF   x7E
07252:  CLRF   x7F
07254:  CLRF   x80
....................    for (int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_IV2_DATA_END_ADDRESS; address += SECTOR_64K_BYTE) {
07256:  MOVLW  06
07258:  MOVWF  x84
0725A:  MOVLW  AA
0725C:  MOVWF  x83
0725E:  CLRF   x82
07260:  CLRF   x81
07262:  MOVLB  0
07264:  MOVLB  2
07266:  MOVF   x84,W
07268:  SUBLW  07
0726A:  BTFSC  FD8.0
0726C:  BRA    7274
0726E:  MOVLB  0
07270:  GOTO   72F2
07274:  MOVLB  0
07276:  BTFSS  FD8.2
07278:  GOTO   72BE
0727C:  MOVLB  2
0727E:  MOVF   x83,W
07280:  SUBLW  48
07282:  BTFSC  FD8.0
07284:  BRA    728C
07286:  MOVLB  0
07288:  GOTO   72F2
0728C:  MOVLB  0
0728E:  BTFSS  FD8.2
07290:  GOTO   72BE
07294:  MOVLB  2
07296:  MOVF   x82,W
07298:  SUBLW  3F
0729A:  BTFSC  FD8.0
0729C:  BRA    72A4
0729E:  MOVLB  0
072A0:  GOTO   72F2
072A4:  MOVLB  0
072A6:  BTFSS  FD8.2
072A8:  GOTO   72BE
072AC:  MOVLB  2
072AE:  MOVF   x81,W
072B0:  SUBLW  FE
072B2:  BTFSC  FD8.0
072B4:  BRA    72BC
072B6:  MOVLB  0
072B8:  GOTO   72F2
072BC:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
072BE:  MOVFF  119,B9D
072C2:  MOVFF  118,B9C
072C6:  MOVFF  117,B9B
072CA:  MOVFF  116,B9A
072CE:  MOVFF  284,BA1
072D2:  MOVFF  283,BA0
072D6:  MOVFF  282,B9F
072DA:  MOVFF  281,B9E
072DE:  CALL   3EE2
072E2:  MOVLW  01
072E4:  MOVLB  2
072E6:  ADDWF  x83,F
072E8:  MOVLW  00
072EA:  ADDWFC x84,F
072EC:  MOVLB  0
072EE:  GOTO   7264
....................    }
....................    smf_data_table_init(); // Update the address area after writing
072F2:  CALL   70CE
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
072F6:  MOVLB  2
072F8:  MOVF   x3F,W
072FA:  MOVWF  FE9
072FC:  MOVF   x40,W
072FE:  MOVWF  FEA
07300:  MOVFF  FEF,285
07304:  MOVFF  285,296
07308:  SETF   x97
0730A:  MOVLB  0
0730C:  CALL   4AE2
....................    printf("End SMF Reset\r\n");
07310:  MOVLW  24
07312:  MOVWF  FF6
07314:  MOVLW  1C
07316:  MOVWF  FF7
07318:  MOVLW  00
0731A:  MOVWF  FF8
0731C:  CALL   1DC0
07320:  RETURN 0
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
102C2:  CLRF   FF8
102C4:  BCF    FD0.7
102C6:  BSF    07.7
102C8:  MOVLB  E
102CA:  MOVLW  55
102CC:  MOVWF  F7E
102CE:  MOVLW  AA
102D0:  MOVWF  F7E
102D2:  BCF    F66.6
102D4:  MOVLW  F9
102D6:  MOVWF  x2C
102D8:  MOVLW  F6
102DA:  MOVWF  x2D
102DC:  MOVLW  0F
102DE:  MOVWF  x2E
102E0:  MOVLW  40
102E2:  MOVWF  x12
102E4:  MOVLW  30
102E6:  MOVWF  x13
102E8:  MOVLW  20
102EA:  MOVWF  x22
102EC:  MOVLW  30
102EE:  MOVWF  x24
102F0:  MOVLW  55
102F2:  MOVWF  F7E
102F4:  MOVLW  AA
102F6:  MOVWF  F7E
102F8:  BSF    F66.6
102FA:  CLRF   F9B
102FC:  CLRF   F64
102FE:  CLRF   F65
10300:  CLRF   F66
10302:  MOVLW  02
10304:  MOVWF  FD3
10306:  CLRF   1B
10308:  MOVLB  F
1030A:  BSF    x2D.3
1030C:  MOVLW  A0
1030E:  MOVWF  x2B
10310:  MOVLW  01
10312:  MOVWF  x2C
10314:  MOVLW  A6
10316:  MOVWF  x2E
10318:  MOVLW  90
1031A:  MOVWF  x2F
1031C:  MOVLB  E
1031E:  BSF    xFD.3
10320:  MOVLW  A0
10322:  MOVWF  xFB
10324:  MOVLW  01
10326:  MOVWF  xFC
10328:  MOVLW  A6
1032A:  MOVWF  xFE
1032C:  MOVLW  90
1032E:  MOVWF  xFF
10330:  BSF    F92.1
10332:  BCF    F92.0
10334:  BCF    F92.3
10336:  BCF    F89.3
10338:  BSF    F96.0
1033A:  BCF    F96.6
1033C:  BCF    F96.1
1033E:  BCF    F8D.1
10340:  BSF    F93.4
10342:  BCF    F93.5
10344:  BCF    F93.2
10346:  BSF    F8A.2
10348:  BCF    F95.4
1034A:  BCF    F95.5
1034C:  BSF    F8C.5
1034E:  CLRF   1F
10350:  CLRF   1E
10352:  CLRF   1D
10354:  CLRF   1C
10356:  CLRF   23
10358:  CLRF   22
1035A:  CLRF   21
1035C:  CLRF   20
1035E:  CLRF   27
10360:  CLRF   26
10362:  CLRF   25
10364:  CLRF   24
10366:  CLRF   29
10368:  CLRF   28
1036A:  CLRF   4A
1036C:  BCF    4B.0
1036E:  MOVLW  1E
10370:  MOVLB  1
10372:  MOVWF  x86
10374:  CLRF   x89
10376:  CLRF   x88
10378:  MOVLW  01
1037A:  MOVWF  x21
1037C:  MOVLW  DC
1037E:  MOVWF  x20
10380:  MOVLW  01
10382:  MOVWF  x23
10384:  MOVLW  E7
10386:  MOVWF  x22
10388:  MOVLW  01
1038A:  MOVWF  x25
1038C:  MOVLW  F2
1038E:  MOVWF  x24
10390:  MOVLW  01
10392:  MOVWF  x27
10394:  MOVLW  FD
10396:  MOVWF  x26
10398:  MOVLW  02
1039A:  MOVWF  x29
1039C:  MOVLW  08
1039E:  MOVWF  x28
103A0:  MOVLW  02
103A2:  MOVWF  x2B
103A4:  MOVLW  13
103A6:  MOVWF  x2A
103A8:  MOVLW  02
103AA:  MOVWF  x2D
103AC:  MOVLW  1E
103AE:  MOVWF  x2C
103B0:  MOVLB  E
103B2:  CLRF   xD9
103B4:  CLRF   xDA
103B6:  CLRF   xCE
103B8:  CLRF   xCF
103BA:  CLRF   xD0
103BC:  CLRF   xD1
103BE:  CLRF   xD2
103C0:  CLRF   xD3
103C2:  CLRF   xD4
103C4:  CLRF   xD5
103C6:  CLRF   x45
103C8:  CLRF   x46
103CA:  CLRF   x47
103CC:  BCF    x8D.7
103CE:  BCF    x8D.6
103D0:  BCF    x8D.5
103D2:  MOVLB  F
103D4:  CLRF   x53
103D6:  CLRF   x38
103D8:  CLRF   x37
103DA:  MOVLB  0
103DC:  CLRF   2A
103DE:  CLRF   2B
103E0:  CLRF   2C
103E2:  CLRF   2D
103E4:  CLRF   2E
103E6:  CLRF   2F
103E8:  CLRF   30
103EA:  CLRF   31
103EC:  CLRF   32
103EE:  CLRF   33
103F0:  CLRF   34
103F2:  CLRF   35
103F4:  CLRF   36
103F6:  CLRF   37
103F8:  CLRF   38
103FA:  CLRF   39
103FC:  CLRF   3A
103FE:  CLRF   3B
10400:  CLRF   3C
10402:  CLRF   3D
10404:  CLRF   3E
10406:  CLRF   3F
10408:  CLRF   40
1040A:  CLRF   41
1040C:  CLRF   42
1040E:  CLRF   43
10410:  CLRF   44
10412:  CLRF   45
10414:  CLRF   46
10416:  CLRF   47
10418:  CLRF   48
1041A:  CLRF   49
1041C:  MOVLW  03
1041E:  MOVWF  4C
10420:  CLRF   4D
10422:  CLRF   4E
10424:  CLRF   4F
10426:  CLRF   50
10428:  CLRF   51
1042A:  CLRF   52
1042C:  CLRF   53
1042E:  CLRF   54
10430:  CLRF   55
10432:  CLRF   56
10434:  CLRF   57
10436:  CLRF   58
10438:  CLRF   59
1043A:  CLRF   5A
1043C:  CLRF   5B
1043E:  CLRF   5C
10440:  CLRF   5D
10442:  CLRF   5E
10444:  CLRF   5F
10446:  CLRF   x60
10448:  CLRF   x61
1044A:  CLRF   x62
1044C:  CLRF   x63
1044E:  CLRF   x64
10450:  CLRF   x65
10452:  CLRF   x66
10454:  CLRF   x67
10456:  CLRF   x68
10458:  CLRF   x69
1045A:  CLRF   x6A
1045C:  CLRF   x6B
1045E:  CLRF   x6C
10460:  CLRF   x6D
10462:  CLRF   x6E
10464:  CLRF   x6F
10466:  CLRF   x70
10468:  CLRF   x71
1046A:  CLRF   x72
1046C:  CLRF   x73
1046E:  CLRF   x74
10470:  CLRF   x75
10472:  CLRF   x76
10474:  CLRF   x77
10476:  CLRF   x78
10478:  CLRF   x79
1047A:  CLRF   x7A
1047C:  CLRF   x7B
1047E:  CLRF   x7C
10480:  CLRF   x7D
10482:  CLRF   x7E
10484:  CLRF   x7F
10486:  CLRF   x80
10488:  CLRF   x81
1048A:  CLRF   x82
1048C:  CLRF   x83
1048E:  CLRF   x84
10490:  CLRF   x85
10492:  CLRF   x86
10494:  CLRF   x87
10496:  CLRF   x88
10498:  CLRF   x89
1049A:  CLRF   x8A
1049C:  CLRF   x8B
1049E:  CLRF   x8C
104A0:  CLRF   x8D
104A2:  CLRF   x8E
104A4:  CLRF   x8F
104A6:  CLRF   x90
104A8:  CLRF   x91
104AA:  CLRF   x92
104AC:  CLRF   x93
104AE:  CLRF   x94
104B0:  CLRF   x95
104B2:  CLRF   x96
104B4:  CLRF   x97
104B6:  CLRF   x98
104B8:  CLRF   x99
104BA:  CLRF   x9A
104BC:  CLRF   x9B
104BE:  CLRF   x9C
104C0:  CLRF   x9D
104C2:  CLRF   x9E
104C4:  CLRF   x9F
104C6:  CLRF   xA0
104C8:  CLRF   xA1
104CA:  CLRF   xA2
104CC:  CLRF   xA3
104CE:  CLRF   xA4
104D0:  CLRF   xA5
104D2:  CLRF   xA6
104D4:  CLRF   xA7
104D6:  CLRF   xA8
104D8:  CLRF   xA9
104DA:  CLRF   xAA
104DC:  CLRF   xAB
104DE:  CLRF   xAC
104E0:  CLRF   xAD
104E2:  CLRF   xAE
104E4:  CLRF   xAF
104E6:  CLRF   xB0
104E8:  CLRF   xB1
104EA:  CLRF   xB2
104EC:  CLRF   xB3
104EE:  CLRF   xB4
104F0:  CLRF   xB5
104F2:  CLRF   xB6
104F4:  CLRF   xB7
104F6:  CLRF   xB8
104F8:  CLRF   xB9
104FA:  CLRF   xBA
104FC:  CLRF   xBB
104FE:  CLRF   xBC
10500:  CLRF   xBD
10502:  CLRF   xBE
10504:  CLRF   xBF
10506:  CLRF   xC0
10508:  CLRF   xC1
1050A:  CLRF   xC2
1050C:  CLRF   xC3
1050E:  CLRF   xC4
10510:  CLRF   xC5
10512:  CLRF   xC6
10514:  CLRF   xC7
10516:  CLRF   xC8
10518:  CLRF   xC9
1051A:  CLRF   xCA
1051C:  CLRF   xCB
1051E:  CLRF   xCC
10520:  CLRF   xCD
10522:  CLRF   xCE
10524:  CLRF   xCF
10526:  CLRF   xD0
10528:  CLRF   xD1
1052A:  CLRF   xD2
1052C:  CLRF   xD3
1052E:  CLRF   xD4
10530:  CLRF   xD5
10532:  CLRF   xD6
10534:  CLRF   xD7
10536:  CLRF   xD8
10538:  CLRF   xD9
1053A:  CLRF   xDA
1053C:  CLRF   xDB
1053E:  CLRF   xDC
10540:  CLRF   xDD
10542:  CLRF   xDE
10544:  CLRF   xDF
10546:  CLRF   xE0
10548:  CLRF   xE1
1054A:  CLRF   xE2
1054C:  CLRF   xE3
1054E:  CLRF   xE4
10550:  CLRF   xE5
10552:  CLRF   xE6
10554:  CLRF   xE7
10556:  CLRF   xE8
10558:  CLRF   xE9
1055A:  CLRF   xEA
1055C:  CLRF   xEB
1055E:  CLRF   xEC
10560:  CLRF   xED
10562:  CLRF   xEE
10564:  CLRF   xEF
10566:  CLRF   xF0
10568:  CLRF   xF1
1056A:  CLRF   xF2
1056C:  CLRF   xF3
1056E:  CLRF   xF4
10570:  CLRF   xF5
10572:  CLRF   xF6
10574:  CLRF   xF7
10576:  CLRF   xF8
10578:  CLRF   xF9
1057A:  CLRF   xFA
1057C:  CLRF   xFB
1057E:  CLRF   xFC
10580:  CLRF   xFD
10582:  CLRF   xFE
10584:  CLRF   xFF
10586:  MOVLB  1
10588:  CLRF   x00
1058A:  CLRF   x01
1058C:  CLRF   x02
1058E:  CLRF   x03
10590:  CLRF   x04
10592:  CLRF   x05
10594:  CLRF   x06
10596:  CLRF   x07
10598:  CLRF   x08
1059A:  CLRF   x09
1059C:  CLRF   x0A
1059E:  CLRF   x0B
105A0:  CLRF   x0C
105A2:  CLRF   x0D
105A4:  CLRF   x0E
105A6:  CLRF   x0F
105A8:  CLRF   x10
105AA:  CLRF   x11
105AC:  CLRF   x12
105AE:  CLRF   x13
105B0:  MOVLW  30
105B2:  MOVWF  x14
105B4:  MOVLW  7C
105B6:  MOVWF  x15
105B8:  MOVLW  01
105BA:  MOVWF  x16
105BC:  MOVLW  01
105BE:  MOVWF  x17
105C0:  MOVLW  02
105C2:  MOVWF  x18
105C4:  MOVLW  7C
105C6:  MOVWF  x19
105C8:  CLRF   x1A
105CA:  MOVLW  09
105CC:  MOVWF  x1B
105CE:  MOVLW  01
105D0:  MOVWF  x1C
105D2:  CLRF   x1D
105D4:  MOVLW  02
105D6:  MOVWF  x1E
105D8:  MOVLW  01
105DA:  MOVWF  x1F
105DC:  CLRF   x8A
105DE:  CLRF   x8B
105E0:  CLRF   x8C
105E2:  CLRF   x8D
105E4:  CLRF   x8E
105E6:  CLRF   x8F
105E8:  CLRF   x90
105EA:  CLRF   x91
105EC:  CLRF   x92
105EE:  CLRF   x93
105F0:  CLRF   x94
105F2:  CLRF   x95
105F4:  CLRF   x96
105F6:  CLRF   x97
105F8:  CLRF   x98
105FA:  CLRF   x99
105FC:  CLRF   x9A
105FE:  CLRF   x9B
10600:  CLRF   x9C
10602:  CLRF   x9D
10604:  CLRF   x9E
10606:  CLRF   x9F
10608:  CLRF   xA0
1060A:  CLRF   xA1
1060C:  CLRF   xA2
1060E:  CLRF   xA3
10610:  CLRF   xA4
10612:  CLRF   xA5
10614:  CLRF   xA6
10616:  CLRF   xA7
10618:  CLRF   xA8
1061A:  CLRF   xA9
1061C:  CLRF   xAA
1061E:  CLRF   xAB
10620:  CLRF   xAC
10622:  CLRF   xAD
10624:  CLRF   xAE
10626:  CLRF   xAF
10628:  CLRF   xB0
1062A:  CLRF   xB1
1062C:  CLRF   xB2
1062E:  CLRF   xB3
10630:  CLRF   xB4
10632:  CLRF   xB5
10634:  CLRF   xB6
10636:  CLRF   xB7
10638:  CLRF   xB8
1063A:  CLRF   xB9
1063C:  CLRF   xBA
1063E:  CLRF   xBB
10640:  CLRF   xBC
10642:  CLRF   xBD
10644:  CLRF   xBE
10646:  CLRF   xBF
10648:  CLRF   xC0
1064A:  CLRF   xC1
1064C:  CLRF   xC2
1064E:  CLRF   xC3
10650:  CLRF   xC4
10652:  CLRF   xC5
10654:  CLRF   xC6
10656:  CLRF   xC7
10658:  CLRF   xC8
1065A:  CLRF   xC9
1065C:  CLRF   xCA
1065E:  CLRF   xCB
10660:  CLRF   xCC
10662:  CLRF   xCD
10664:  CLRF   xCE
10666:  CLRF   xCF
10668:  CLRF   xD0
1066A:  CLRF   xD1
1066C:  CLRF   xD2
1066E:  CLRF   xD3
10670:  CLRF   xD4
10672:  CLRF   xD5
10674:  CLRF   xD6
10676:  CLRF   xD7
10678:  CLRF   xD8
1067A:  CLRF   xD9
1067C:  CLRF   xDA
1067E:  CLRF   xDB
10680:  CLRF   xDC
10682:  CLRF   xDD
10684:  CLRF   xDE
10686:  CLRF   xDF
10688:  CLRF   xE0
1068A:  CLRF   xE1
1068C:  CLRF   xE2
1068E:  CLRF   xE3
10690:  CLRF   xE4
10692:  CLRF   xE5
10694:  CLRF   xE6
10696:  MOVLW  01
10698:  MOVWF  xE7
1069A:  CLRF   xE8
1069C:  CLRF   xE9
1069E:  CLRF   xEA
106A0:  CLRF   xEB
106A2:  CLRF   xEC
106A4:  CLRF   xED
106A6:  CLRF   xEE
106A8:  CLRF   xEF
106AA:  CLRF   xF0
106AC:  CLRF   xF1
106AE:  MOVLW  02
106B0:  MOVWF  xF2
106B2:  CLRF   xF3
106B4:  CLRF   xF4
106B6:  CLRF   xF5
106B8:  CLRF   xF6
106BA:  CLRF   xF7
106BC:  CLRF   xF8
106BE:  CLRF   xF9
106C0:  CLRF   xFA
106C2:  CLRF   xFB
106C4:  CLRF   xFC
106C6:  MOVLW  03
106C8:  MOVWF  xFD
106CA:  CLRF   xFE
106CC:  CLRF   xFF
106CE:  MOVLB  2
106D0:  CLRF   x00
106D2:  CLRF   x01
106D4:  CLRF   x02
106D6:  CLRF   x03
106D8:  CLRF   x04
106DA:  CLRF   x05
106DC:  CLRF   x06
106DE:  CLRF   x07
106E0:  MOVLW  04
106E2:  MOVWF  x08
106E4:  CLRF   x09
106E6:  CLRF   x0A
106E8:  CLRF   x0B
106EA:  CLRF   x0C
106EC:  CLRF   x0D
106EE:  CLRF   x0E
106F0:  CLRF   x0F
106F2:  CLRF   x10
106F4:  CLRF   x11
106F6:  CLRF   x12
106F8:  MOVLW  05
106FA:  MOVWF  x13
106FC:  CLRF   x14
106FE:  CLRF   x15
10700:  CLRF   x16
10702:  CLRF   x17
10704:  CLRF   x18
10706:  CLRF   x19
10708:  CLRF   x1A
1070A:  CLRF   x1B
1070C:  CLRF   x1C
1070E:  CLRF   x1D
10710:  MOVLW  06
10712:  MOVWF  x1E
10714:  CLRF   x1F
10716:  CLRF   x20
10718:  CLRF   x21
1071A:  CLRF   x22
1071C:  CLRF   x23
1071E:  CLRF   x24
10720:  CLRF   x25
10722:  CLRF   x26
10724:  CLRF   x27
10726:  CLRF   x28
10728:  MOVLW  01
1072A:  MOVLB  1
1072C:  MOVWF  x75
1072E:  MOVLW  2E
10730:  MOVWF  x74
10732:  MOVLW  01
10734:  MOVWF  x77
10736:  MOVLW  38
10738:  MOVWF  x76
1073A:  MOVLW  01
1073C:  MOVWF  x79
1073E:  MOVLW  42
10740:  MOVWF  x78
10742:  MOVLW  01
10744:  MOVWF  x7B
10746:  MOVLW  4C
10748:  MOVWF  x7A
1074A:  MOVLW  01
1074C:  MOVWF  x7D
1074E:  MOVLW  56
10750:  MOVWF  x7C
10752:  MOVLW  01
10754:  MOVWF  x7F
10756:  MOVLW  60
10758:  MOVWF  x7E
1075A:  MOVLW  01
1075C:  MOVWF  x81
1075E:  MOVLW  6A
10760:  MOVWF  x80
10762:  MOVLB  0
.................... { 
....................    delay_ms(100); // wait for power stable
10764:  MOVLW  64
10766:  MOVLB  B
10768:  MOVWF  xB4
1076A:  MOVLB  0
1076C:  CALL   1D92
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
10770:  MOVLW  34
10772:  MOVWF  FF6
10774:  MOVLW  1C
10776:  MOVWF  FF7
10778:  MOVLW  00
1077A:  MOVWF  FF8
1077C:  CALL   1DC0
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM6.\r\n");
10780:  MOVLW  7A
10782:  MOVWF  FF6
10784:  MOVLW  1C
10786:  MOVWF  FF7
10788:  MOVLW  00
1078A:  MOVWF  FF8
1078C:  CALL   1DC0
....................    fprintf(PC,"Last updated on %s %s, by Inoue.\r\n\r\n", __DATE__, __TIME__);
10790:  MOVLW  A8
10792:  MOVWF  FF6
10794:  MOVLW  1C
10796:  MOVWF  FF7
10798:  MOVLW  00
1079A:  MOVWF  FF8
1079C:  MOVLW  10
1079E:  MOVLB  A
107A0:  MOVWF  x67
107A2:  MOVLB  0
107A4:  CALL   1DF6
107A8:  MOVLW  CE
107AA:  MOVWF  FF6
107AC:  MOVLW  1C
107AE:  MOVWF  FF7
107B0:  MOVLW  00
107B2:  MOVWF  FF8
107B4:  CALL   1DC0
107B8:  MOVLW  20
107BA:  BTFSS  FA6.6
107BC:  GOTO   107BA
107C0:  MOVLB  E
107C2:  MOVWF  xF9
107C4:  MOVLW  D8
107C6:  MOVWF  FF6
107C8:  MOVLW  1C
107CA:  MOVWF  FF7
107CC:  MOVLW  00
107CE:  MOVWF  FF8
107D0:  MOVLB  0
107D2:  CALL   1DC0
107D6:  MOVLW  BD
107D8:  MOVWF  FF6
107DA:  MOVLW  1C
107DC:  MOVWF  FF7
107DE:  MOVLW  00
107E0:  MOVWF  FF8
107E2:  MOVLW  0F
107E4:  MOVLB  A
107E6:  MOVWF  x67
107E8:  MOVLB  0
107EA:  CALL   1DF6
....................    
....................    // io_init();
....................    setup_uart_to_boss();
107EE:  GOTO   1E30
....................    timer_init();
107F2:  GOTO   1E5A
....................    ad7490_init();
107F6:  GOTO   2086
....................    mcp4901_init();
107FA:  GOTO   23D6
....................    misf_init();
107FE:  CALL   3498
....................    
....................    piclog_make(PICLOG_STARTUP,0x00);
10802:  MOVLB  2
10804:  CLRF   x96
10806:  CLRF   x97
10808:  MOVLB  0
1080A:  CALL   4AE2
.................... 
....................    int1 is_finished = FALSE;
1080E:  MOVLB  2
10810:  BCF    x29.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
10812:  MOVLW  E2
10814:  MOVWF  FF6
10816:  MOVLW  1C
10818:  MOVWF  FF7
1081A:  MOVLW  00
1081C:  MOVWF  FF8
1081E:  MOVLB  0
10820:  CALL   1DC0
....................    
....................    //enable_negative_power();
....................    connect_port1();
10824:  CALL   4C06
....................    connect_port2();
10828:  CALL   4C0E
....................    mcp4901_1_write(0);
1082C:  MOVLB  A
1082E:  CLRF   x76
10830:  CLRF   x75
10832:  MOVLB  0
10834:  CALL   2352
....................    mcp4901_2_write(0);
10838:  MOVLB  A
1083A:  CLRF   x76
1083C:  CLRF   x75
1083E:  MOVLB  0
10840:  CALL   2394
....................    connect_negative_power2(TRUE); // CIGS2 Negative Power ON
10844:  MOVLW  01
10846:  MOVLB  2
10848:  MOVWF  x36
1084A:  MOVLB  0
1084C:  GOTO   4C16
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
10850:  MOVLW  08
10852:  MOVWF  FF6
10854:  MOVLW  1D
10856:  MOVWF  FF7
10858:  MOVLW  00
1085A:  MOVWF  FF8
1085C:  CALL   1DC0
....................    
....................    //Start loop
....................    while(!is_finished)
10860:  MOVLB  2
10862:  BTFSS  x29.0
10864:  BRA    1086C
10866:  MOVLB  0
10868:  GOTO   1093E
1086C:  MOVLB  0
....................    {
....................       // unsigned int16 cigs1_amp = ad7490_read(ADC_CIGS2_AMP);
....................       // unsigned int16 cigs1_curr = ad7490_read(ADC_CIGS2_CURR);
....................       // unsigned int16 cigs1_volt = ad7490_read(ADC_CIGS2_VOLT);
....................       
....................       // fprintf(PC, "CIGS1 Amp: %04LX, Current: %04LX, Voltage: %04LX\r\n", cigs1_amp, cigs1_curr, cigs1_volt);
....................       
....................       // handle from boss commands
....................       if(boss_receive_buffer_size > 0)
1086E:  MOVF   4A,F
10870:  BTFSC  FD8.2
10872:  GOTO   108F6
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
10876:  MOVLB  2
10878:  CLRF   x3D
1087A:  MOVLW  2A
1087C:  MOVWF  x3C
1087E:  MOVFF  4A,23E
10882:  MOVLB  0
10884:  GOTO   4F52
10888:  MOVFF  02,03
1088C:  MOVF   01,W
1088E:  MOVWF  FE1
10890:  MOVFF  03,FE2
10894:  MOVLW  02
10896:  MOVWF  FEA
10898:  MOVLW  2A
1089A:  MOVWF  FE9
1089C:  MOVLW  0C
1089E:  MOVWF  01
108A0:  MOVFF  FE6,FEE
108A4:  DECFSZ 01,F
108A6:  GOTO   108A0
....................          /*
....................          fprintf(PC, "Frame ID: %X\r\n", recieve_cmd.frame_id);
....................          fprintf(PC, "Content size: %u\r\n", recieve_cmd.size);
....................          fprintf(PC, "payload: ");
....................          for(int8 i = 0; i < recieve_cmd.size; i++)
....................             fprintf(PC, "%X ", recieve_cmd.content[i]);
....................          fprintf(PC, "\r\n\r\n");
....................          fprintf(PC, "is_exist: %d\r\n", recieve_cmd.is_exist);
....................          */
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
108AA:  MOVLB  2
108AC:  CLRF   x37
108AE:  MOVLW  2A
108B0:  MOVWF  x36
108B2:  CLRF   x39
108B4:  MOVLW  4A
108B6:  MOVWF  x38
108B8:  MOVLB  0
108BA:  GOTO   5154
....................          
....................          if(recieve_cmd.is_exist){
108BE:  MOVLB  2
108C0:  BTFSC  x2C.0
108C2:  BRA    108CA
108C4:  MOVLB  0
108C6:  GOTO   108F6
108CA:  MOVLB  0
....................             is_finished = execute_command(&recieve_cmd); // FIX: 戻り値を保持
108CC:  MOVLW  02
108CE:  MOVLB  2
108D0:  MOVWF  x37
108D2:  MOVLW  2A
108D4:  MOVWF  x36
108D6:  MOVLB  0
108D8:  GOTO   FF1C
108DC:  MOVLB  2
108DE:  BCF    x29.0
108E0:  BTFSC  01.0
108E2:  BSF    x29.0
....................             fprintf(PC,"\r\nwaiting for BOSS PIC command");
108E4:  MOVLW  26
108E6:  MOVWF  FF6
108E8:  MOVLW  1D
108EA:  MOVWF  FF7
108EC:  MOVLW  00
108EE:  MOVWF  FF8
108F0:  MOVLB  0
108F2:  CALL   1DC0
....................          }
....................       }
....................       
....................       // check `is break while loop`
....................       if(is_finished == TRUE)
108F6:  MOVLB  2
108F8:  BTFSC  x29.0
108FA:  BRA    10902
108FC:  MOVLB  0
108FE:  GOTO   10908
10902:  MOVLB  0
....................          break;
10904:  GOTO   1093E
....................          
....................       delay_ms(400);
10908:  MOVLW  02
1090A:  MOVLB  2
1090C:  MOVWF  x36
1090E:  MOVLB  0
10910:  MOVLW  C8
10912:  MOVLB  B
10914:  MOVWF  xB4
10916:  MOVLB  0
10918:  CALL   1D92
1091C:  MOVLB  2
1091E:  DECFSZ x36,F
10920:  BRA    10926
10922:  BRA    1092A
10924:  MOVLB  0
10926:  MOVLB  0
10928:  BRA    10910
....................       fprintf(PC, ".");
1092A:  MOVLW  2E
1092C:  MOVLB  0
1092E:  BTFSS  FA6.6
10930:  GOTO   1092E
10934:  MOVLB  E
10936:  MOVWF  xF9
10938:  MOVLB  0
1093A:  GOTO   10860
....................    }
....................    
....................    
....................    fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\nWait for BOSS PIC turn off me");
1093E:  MOVLW  46
10940:  MOVWF  FF6
10942:  MOVLW  1D
10944:  MOVWF  FF7
10946:  MOVLW  00
10948:  MOVWF  FF8
1094A:  CALL   1DC0
....................    
....................    while (TRUE)
....................    {
....................       fprintf(PC, ".");
1094E:  MOVLW  2E
10950:  BTFSS  FA6.6
10952:  GOTO   10950
10956:  MOVLB  E
10958:  MOVWF  xF9
....................       delay_ms(1000);
1095A:  MOVLW  04
1095C:  MOVLB  2
1095E:  MOVWF  x36
10960:  MOVLB  0
10962:  MOVLW  FA
10964:  MOVLB  B
10966:  MOVWF  xB4
10968:  MOVLB  0
1096A:  CALL   1D92
1096E:  MOVLB  2
10970:  DECFSZ x36,F
10972:  BRA    10978
10974:  BRA    1097C
10976:  MOVLB  0
10978:  MOVLB  0
1097A:  BRA    10962
1097C:  MOVLB  0
1097E:  GOTO   1094E
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
10982:  MOVLW  86
10984:  MOVWF  FF6
10986:  MOVLW  1D
10988:  MOVWF  FF7
1098A:  MOVLW  00
1098C:  MOVWF  FF8
1098E:  CALL   1DC0
....................    
.................... }
.................... // Enf of files
10992:  SLEEP 

Configuration Fuses:
   Word  1: F6A0   STVREN NOXINST NODEBUG NOBROWNOUT BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS NODSWDT DSWDTOSC_INT
