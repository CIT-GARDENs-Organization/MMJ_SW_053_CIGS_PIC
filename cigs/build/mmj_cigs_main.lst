CCS PCH C Compiler, Version 5.104, 57077               25-10-25 19:34

               Filename:   c:\Users\shoin\source\repos\MMJ_SW_053_CIGS_PIC\cigs\build\mmj_cigs_main.lst

               ROM used:   77082 bytes (59%)
                           Largest free fragment is 53966
               RAM used:   395 (11%) at main() level
                           2847 (80%) worst case
               Stack used: 9 locations (8 in main + 1 for interrupts)
               Stack size: 31

*
00000:  NOP   
00002:  GOTO   127FE
*
00008:  NOP   
0000A:  NOP   
0000C:  NOP   
0000E:  NOP   
00010:  NOP   
00012:  NOP   
00014:  NOP   
00016:  NOP   
00018:  MOVWF  04
0001A:  MOVFF  FD8,05
0001E:  MOVFF  FE0,06
00022:  MOVLB  0
00024:  MOVFF  FE9,0C
00028:  MOVFF  FEA,07
0002C:  MOVFF  FE1,08
00030:  MOVFF  FE2,09
00034:  MOVFF  FD9,0A
00038:  MOVFF  FDA,0B
0003C:  MOVFF  FF3,12
00040:  MOVFF  FF4,13
00044:  MOVFF  FFA,14
00048:  MOVFF  FF5,15
0004C:  MOVFF  FF6,16
00050:  MOVFF  FF7,17
00054:  MOVFF  FF8,18
00058:  MOVFF  FFB,19
0005C:  MOVFF  00,0E
00060:  MOVFF  01,0F
00064:  MOVFF  02,10
00068:  MOVFF  03,11
0006C:  BTFSS  FF2.5
0006E:  GOTO   0078
00072:  BTFSC  FF2.2
00074:  GOTO   014E
00078:  BTFSS  F9D.0
0007A:  GOTO   0084
0007E:  BTFSC  F9E.0
00080:  GOTO   01D6
00084:  BTFSS  F61.5
00086:  GOTO   0090
0008A:  BTFSC  FA6.5
0008C:  GOTO   0240
00090:  MOVFF  0E,00
00094:  MOVFF  0F,01
00098:  MOVFF  10,02
0009C:  MOVFF  11,03
000A0:  MOVFF  0C,FE9
000A4:  MOVFF  07,FEA
000A8:  BSF    07.7
000AA:  MOVFF  08,FE1
000AE:  MOVFF  09,FE2
000B2:  MOVFF  0A,FD9
000B6:  MOVFF  0B,FDA
000BA:  MOVFF  12,FF3
000BE:  MOVFF  13,FF4
000C2:  MOVFF  14,FFA
000C6:  MOVFF  15,FF5
000CA:  MOVFF  16,FF6
000CE:  MOVFF  17,FF7
000D2:  MOVFF  18,FF8
000D6:  MOVFF  19,FFB
000DA:  MOVF   04,W
000DC:  MOVFF  06,FE0
000E0:  MOVFF  05,FD8
000E4:  RETFIE 0
.................... #include "mmj_cigs_main.h"  // ルート直下のヘッダー
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... #opt 0 // 0 = no optimization
.................... 
.................... //==============================================================================
.................... // CCS C 最適化構造: ヘッダー分散 + .cファイル統合
.................... //==============================================================================
.................... 
.................... // レベル1: システム設定
.................... #include "hal/cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
000E6:  CLRF   FF7
000E8:  ADDLW  FA
000EA:  MOVWF  FF6
000EC:  MOVLW  00
000EE:  ADDWFC FF7,F
000F0:  MOVLW  00
000F2:  MOVWF  FF8
000F4:  TBLRD*+
000F6:  MOVF   FF5,W
000F8:  RETURN 0
000FA:  DATA 00,00
000FC:  DATA 00,00
000FE:  DATA FF,0F
00100:  DATA 00,00
00102:  DATA 00,10
00104:  DATA 00,00
00106:  DATA 00,00
00108:  DATA 01,00
0010A:  DATA FF,0F
0010C:  DATA 14,00
0010E:  DATA 00,00
00110:  DATA 14,00
00112:  DATA 00,10
00114:  DATA 14,00
00116:  DATA FF,0F
00118:  DATA 28,00
0011A:  DATA 00,00
0011C:  DATA 14,00
0011E:  DATA 00,10
00120:  DATA 28,00
00122:  DATA FF,0F
00124:  DATA 32,00
00126:  DATA 00,00
00128:  DATA 0A,00
0012A:  DATA 00,10
0012C:  DATA 32,00
0012E:  DATA FF,0F
00130:  DATA 72,00
00132:  DATA 00,00
00134:  DATA 40,00
00136:  DATA 00,10
00138:  DATA 72,00
0013A:  DATA FF,0F
0013C:  DATA 7C,00
0013E:  DATA 00,00
00140:  DATA 0A,00
00142:  DATA 00,10
00144:  DATA 7C,00
00146:  DATA FF,0F
00148:  DATA BC,00
0014A:  DATA 00,00
0014C:  DATA 40,00
*
001F8:  DATA 54,69
001FA:  DATA 6D,65
001FC:  DATA 72,20
001FE:  DATA 49,6E
00200:  DATA 69,74
00202:  DATA 69,61
00204:  DATA 6C,69
00206:  DATA 7A,65
00208:  DATA 0D,0A
0020A:  DATA 00,00
0020C:  DATA 09,43
0020E:  DATA 6F,6D
00210:  DATA 70,6C
00212:  DATA 65,74
00214:  DATA 65,0D
00216:  DATA 0A,00
*
00288:  DATA 55,41
0028A:  DATA 52,54
0028C:  DATA 20,49
0028E:  DATA 6E,69
00290:  DATA 74,69
00292:  DATA 61,6C
00294:  DATA 69,7A
00296:  DATA 65,0D
00298:  DATA 0A,00
0029A:  DATA 09,43
0029C:  DATA 6F,6D
0029E:  DATA 70,6C
002A0:  DATA 65,74
002A2:  DATA 65,0D
002A4:  DATA 0A,00
002A6:  DATA 41,44
002A8:  DATA 37,34
002AA:  DATA 39,30
002AC:  DATA 20,49
002AE:  DATA 6E,69
002B0:  DATA 74,69
002B2:  DATA 61,6C
002B4:  DATA 69,7A
002B6:  DATA 65,0D
002B8:  DATA 0A,00
002BA:  DATA 09,43
002BC:  DATA 6F,6E
002BE:  DATA 6E,65
002C0:  DATA 63,74
002C2:  DATA 20,65
002C4:  DATA 72,72
002C6:  DATA 6F,72
002C8:  DATA 21,0D
002CA:  DATA 0A,00
002CC:  DATA 09,43
002CE:  DATA 6F,6E
002D0:  DATA 6E,65
002D2:  DATA 63,74
002D4:  DATA 20,73
002D6:  DATA 75,63
002D8:  DATA 63,65
002DA:  DATA 73,73
002DC:  DATA 66,75
002DE:  DATA 6C,0D
002E0:  DATA 0A,00
002E2:  DATA 09,43
002E4:  DATA 6F,6D
002E6:  DATA 70,6C
002E8:  DATA 65,74
002EA:  DATA 65,0D
002EC:  DATA 0A,00
002EE:  DATA 4D,43
002F0:  DATA 50,34
002F2:  DATA 39,30
002F4:  DATA 31,20
002F6:  DATA 49,6E
002F8:  DATA 69,74
002FA:  DATA 69,61
002FC:  DATA 6C,69
002FE:  DATA 7A,65
00300:  DATA 0D,0A
00302:  DATA 00,00
00304:  DATA 09,5B
00306:  DATA 44,41
00308:  DATA 43,20
0030A:  DATA 50,6F
0030C:  DATA 72,74
0030E:  DATA 20,31
00310:  DATA 5D,20
00312:  DATA 43,6F
00314:  DATA 6E,6E
00316:  DATA 65,63
00318:  DATA 74,20
0031A:  DATA 65,72
0031C:  DATA 72,6F
0031E:  DATA 72,21
00320:  DATA 0D,0A
00322:  DATA 00,00
00324:  DATA 09,5B
00326:  DATA 44,41
00328:  DATA 43,20
0032A:  DATA 50,6F
0032C:  DATA 72,74
0032E:  DATA 20,31
00330:  DATA 5D,20
00332:  DATA 43,6F
00334:  DATA 6E,6E
00336:  DATA 65,63
00338:  DATA 74,20
0033A:  DATA 73,75
0033C:  DATA 63,63
0033E:  DATA 65,73
00340:  DATA 73,66
00342:  DATA 75,6C
00344:  DATA 0D,0A
00346:  DATA 00,00
00348:  DATA 09,5B
0034A:  DATA 44,41
0034C:  DATA 43,20
0034E:  DATA 50,6F
00350:  DATA 72,74
00352:  DATA 20,32
00354:  DATA 5D,20
00356:  DATA 43,6F
00358:  DATA 6E,6E
0035A:  DATA 65,63
0035C:  DATA 74,20
0035E:  DATA 65,72
00360:  DATA 72,6F
00362:  DATA 72,21
00364:  DATA 0D,0A
00366:  DATA 00,00
00368:  DATA 09,5B
0036A:  DATA 44,41
0036C:  DATA 43,20
0036E:  DATA 50,6F
00370:  DATA 72,74
00372:  DATA 20,32
00374:  DATA 5D,20
00376:  DATA 43,6F
00378:  DATA 6E,6E
0037A:  DATA 65,63
0037C:  DATA 74,20
0037E:  DATA 73,75
00380:  DATA 63,63
00382:  DATA 65,73
00384:  DATA 73,66
00386:  DATA 75,6C
00388:  DATA 0D,0A
0038A:  DATA 00,00
0038C:  DATA 09,43
0038E:  DATA 6F,6D
00390:  DATA 70,6C
00392:  DATA 65,74
00394:  DATA 65,0D
00396:  DATA 0A,00
00398:  DATA 45,6E
0039A:  DATA 71,75
0039C:  DATA 65,75
0039E:  DATA 65,20
003A0:  DATA 46,6C
003A2:  DATA 61,73
003A4:  DATA 68,20
003A6:  DATA 4F,70
003A8:  DATA 65,72
003AA:  DATA 61,74
003AC:  DATA 69,6F
003AE:  DATA 6E,0D
003B0:  DATA 0A,00
003B2:  DATA 46,6C
003B4:  DATA 61,73
003B6:  DATA 68,20
003B8:  DATA 71,75
003BA:  DATA 65,75
003BC:  DATA 65,20
003BE:  DATA 69,73
003C0:  DATA 20,66
003C2:  DATA 75,6C
003C4:  DATA 6C,21
003C6:  DATA 21,21
003C8:  DATA 0D,0A
003CA:  DATA 00,00
003CC:  DATA 46,6C
003CE:  DATA 61,73
003D0:  DATA 68,20
003D2:  DATA 71,75
003D4:  DATA 65,75
003D6:  DATA 65,20
003D8:  DATA 69,73
003DA:  DATA 20,65
003DC:  DATA 6D,70
003DE:  DATA 74,79
003E0:  DATA 0D,0A
003E2:  DATA 00,00
003E4:  DATA 0D,0A
003E6:  DATA 53,74
003E8:  DATA 61,72
003EA:  DATA 74,20
003EC:  DATA 6D,61
003EE:  DATA 6B,65
003F0:  DATA 5F,72
003F2:  DATA 65,63
003F4:  DATA 65,69
003F6:  DATA 76,65
003F8:  DATA 5F,63
003FA:  DATA 6F,6D
003FC:  DATA 6D,61
003FE:  DATA 6E,64
00400:  DATA 0D,0A
00402:  DATA 00,00
00404:  DATA 09,5B
00406:  DATA 42,4F
00408:  DATA 53,53
0040A:  DATA 5D,20
0040C:  DATA 3E,3E
0040E:  DATA 3E,20
00410:  DATA 00,00
00412:  DATA 45,6E
00414:  DATA 64,20
00416:  DATA 6D,61
00418:  DATA 6B,65
0041A:  DATA 5F,72
0041C:  DATA 65,63
0041E:  DATA 69,76
00420:  DATA 65,5F
00422:  DATA 63,6F
00424:  DATA 6D,6D
00426:  DATA 61,6E
00428:  DATA 64,0D
0042A:  DATA 0A,0D
0042C:  DATA 0A,00
0042E:  DATA 73,69
00430:  DATA 67,6E
00432:  DATA 61,6C
00434:  DATA 20,65
00436:  DATA 6E,64
00438:  DATA 20,77
0043A:  DATA 69,74
0043C:  DATA 68,20
0043E:  DATA 53,46
00440:  DATA 44,0D
00442:  DATA 0A,00
00444:  DATA 64,6F
00446:  DATA 6E,27
00448:  DATA 74,20
0044A:  DATA 66,69
0044C:  DATA 6E,64
0044E:  DATA 20,53
00450:  DATA 46,44
00452:  DATA 0D,0A
00454:  DATA 00,00
00456:  DATA 09,2D
00458:  DATA 3E,20
0045A:  DATA 49,6E
0045C:  DATA 76,61
0045E:  DATA 6C,69
00460:  DATA 64,20
00462:  DATA 46,72
00464:  DATA 61,6D
00466:  DATA 65,20
00468:  DATA 49,44
0046A:  DATA 20,72
0046C:  DATA 65,63
0046E:  DATA 65,69
00470:  DATA 76,65
00472:  DATA 64,3A
00474:  DATA 20,25
00476:  DATA 58,0D
00478:  DATA 0A,00
0047A:  DATA 09,2D
0047C:  DATA 3E,20
0047E:  DATA 43,52
00480:  DATA 43,20
00482:  DATA 65,72
00484:  DATA 72,6F
00486:  DATA 72,21
00488:  DATA 0D,0A
0048A:  DATA 00,00
0048C:  DATA 09,09
0048E:  DATA 2D,3E
00490:  DATA 20,72
00492:  DATA 65,63
00494:  DATA 65,69
00496:  DATA 76,65
00498:  DATA 64,20
0049A:  DATA 43,52
0049C:  DATA 43,3A
0049E:  DATA 20,25
004A0:  DATA 58,0D
004A2:  DATA 0A,00
004A4:  DATA 09,09
004A6:  DATA 20,20
004A8:  DATA 20,63
004AA:  DATA 6F,6C
004AC:  DATA 6C,65
004AE:  DATA 63,74
004B0:  DATA 20,43
004B2:  DATA 52,43
004B4:  DATA 20,3A
004B6:  DATA 20,25
004B8:  DATA 58,0D
004BA:  DATA 0A,00
004BC:  DATA 09,2D
004BE:  DATA 3E,20
004C0:  DATA 49,6E
004C2:  DATA 76,61
004C4:  DATA 6C,69
004C6:  DATA 64,20
004C8:  DATA 64,65
004CA:  DATA 76,69
004CC:  DATA 63,65
004CE:  DATA 20,49
004D0:  DATA 44,20
004D2:  DATA 72,65
004D4:  DATA 63,65
004D6:  DATA 69,76
004D8:  DATA 65,64
004DA:  DATA 0D,0A
004DC:  DATA 00,00
004DE:  DATA 09,09
004E0:  DATA 2D,3E
004E2:  DATA 20,72
004E4:  DATA 65,63
004E6:  DATA 65,69
004E8:  DATA 76,65
004EA:  DATA 64,3A
004EC:  DATA 20,20
004EE:  DATA 20,20
004F0:  DATA 20,25
004F2:  DATA 58,0D
004F4:  DATA 0A,00
004F6:  DATA 09,09
004F8:  DATA 20,20
004FA:  DATA 20,4D
004FC:  DATA 79,20
004FE:  DATA 64,65
00500:  DATA 76,69
00502:  DATA 63,65
00504:  DATA 20,49
00506:  DATA 44,3A
00508:  DATA 20,25
0050A:  DATA 58,0D
0050C:  DATA 0A,00
0050E:  DATA 09,5B
00510:  DATA 42,4F
00512:  DATA 53,53
00514:  DATA 5D,20
00516:  DATA 3C,3C
00518:  DATA 3C,20
0051A:  DATA 00,00
0051C:  DATA 53,74
0051E:  DATA 61,72
00520:  DATA 74,20
00522:  DATA 53,4D
00524:  DATA 46,20
00526:  DATA 75,73
00528:  DATA 69,6E
0052A:  DATA 67,20
0052C:  DATA 72,65
0052E:  DATA 71,65
00530:  DATA 73,74
00532:  DATA 20,73
00534:  DATA 65,61
00536:  DATA 71,75
00538:  DATA 65,6E
0053A:  DATA 63,65
0053C:  DATA 0D,0A
0053E:  DATA 00,00
00540:  DATA 45,72
00542:  DATA 72,6F
00544:  DATA 72,21
00546:  DATA 20,52
00548:  DATA 65,63
0054A:  DATA 65,69
0054C:  DATA 76,69
0054E:  DATA 6E,67
00550:  DATA 20,63
00552:  DATA 6F,6D
00554:  DATA 6D,61
00556:  DATA 6E,64
00558:  DATA 20,69
0055A:  DATA 6E,63
0055C:  DATA 6F,6E
0055E:  DATA 73,69
00560:  DATA 73,74
00562:  DATA 65,6E
00564:  DATA 74,20
00566:  DATA 77,69
00568:  DATA 74,68
0056A:  DATA 20,74
0056C:  DATA 68,65
0056E:  DATA 20,64
00570:  DATA 65,73
00572:  DATA 69,67
00574:  DATA 6E,0D
00576:  DATA 0A,00
00578:  DATA 53,4D
0057A:  DATA 46,20
0057C:  DATA 75,73
0057E:  DATA 65,20
00580:  DATA 72,65
00582:  DATA 71,75
00584:  DATA 65,73
00586:  DATA 74,20
00588:  DATA 61,6C
0058A:  DATA 6C,6F
0058C:  DATA 77,65
0058E:  DATA 64,0D
00590:  DATA 0A,00
00592:  DATA 53,4D
00594:  DATA 46,20
00596:  DATA 75,73
00598:  DATA 65,20
0059A:  DATA 72,65
0059C:  DATA 71,75
0059E:  DATA 65,73
005A0:  DATA 74,20
005A2:  DATA 64,65
005A4:  DATA 6E,79
005A6:  DATA 65,64
005A8:  DATA 0D,0A
005AA:  DATA 00,00
005AC:  DATA 52,65
005AE:  DATA 74,72
005B0:  DATA 79,20
005B2:  DATA 72,65
005B4:  DATA 71,75
005B6:  DATA 65,73
005B8:  DATA 74,20
005BA:  DATA 74,6F
005BC:  DATA 20,42
005BE:  DATA 4F,53
005C0:  DATA 53,20
005C2:  DATA 50,49
005C4:  DATA 43,0D
005C6:  DATA 0A,00
005C8:  DATA 45,72
005CA:  DATA 72,6F
005CC:  DATA 72,21
005CE:  DATA 20,52
005D0:  DATA 65,63
005D2:  DATA 65,69
005D4:  DATA 76,69
005D6:  DATA 6E,67
005D8:  DATA 20,63
005DA:  DATA 6F,6D
005DC:  DATA 6D,61
005DE:  DATA 6E,64
005E0:  DATA 20,69
005E2:  DATA 6E,63
005E4:  DATA 6F,6E
005E6:  DATA 73,69
005E8:  DATA 73,74
005EA:  DATA 65,6E
005EC:  DATA 74,20
005EE:  DATA 77,69
005F0:  DATA 74,68
005F2:  DATA 20,74
005F4:  DATA 68,65
005F6:  DATA 20,64
005F8:  DATA 65,73
005FA:  DATA 69,67
005FC:  DATA 6E,0D
005FE:  DATA 0A,00
00600:  DATA 45,6E
00602:  DATA 64,20
00604:  DATA 53,4D
00606:  DATA 46,20
00608:  DATA 75,73
0060A:  DATA 69,6E
0060C:  DATA 67,20
0060E:  DATA 72,65
00610:  DATA 71,65
00612:  DATA 73,74
00614:  DATA 20,73
00616:  DATA 65,61
00618:  DATA 71,75
0061A:  DATA 65,6E
0061C:  DATA 63,65
0061E:  DATA 0D,0A
00620:  DATA 00,00
00622:  DATA 74,65
00624:  DATA 6D,70
00626:  DATA 5F,74
00628:  DATA 6F,70
0062A:  DATA 3A,25
0062C:  DATA 30,34
0062E:  DATA 4C,58
00630:  DATA 0D,0A
00632:  DATA 00,00
00634:  DATA 74,65
00636:  DATA 6D,70
00638:  DATA 5F,62
0063A:  DATA 6F,74
0063C:  DATA 3A,25
0063E:  DATA 30,34
00640:  DATA 4C,58
00642:  DATA 0D,0A
00644:  DATA 00,00
00646:  DATA 74,65
00648:  DATA 6D,70
0064A:  DATA 5F,6D
0064C:  DATA 69,73
0064E:  DATA 37,3A
00650:  DATA 25,30
00652:  DATA 34,4C
00654:  DATA 58,0D
00656:  DATA 0A,00
00658:  DATA 70,64
0065A:  DATA 3A,25
0065C:  DATA 30,34
0065E:  DATA 4C,58
00660:  DATA 0D,0A
00662:  DATA 00,00
00664:  DATA 56,6F
00666:  DATA 6C,74
00668:  DATA 31,2C
0066A:  DATA 43,75
0066C:  DATA 72,72
0066E:  DATA 31,2C
00670:  DATA 56,6F
00672:  DATA 6C,74
00674:  DATA 32,2C
00676:  DATA 43,75
00678:  DATA 72,72
0067A:  DATA 32,0D
0067C:  DATA 0A,00
0067E:  DATA 5B,50
00680:  DATA 49,43
00682:  DATA 4C,4F
00684:  DATA 47,5D
00686:  DATA 20,3A
00688:  DATA 20,00
0068A:  DATA 53,4D
0068C:  DATA 46,20
0068E:  DATA 44,61
00690:  DATA 74,61
00692:  DATA 20,54
00694:  DATA 61,62
00696:  DATA 6C,65
00698:  DATA 20,49
0069A:  DATA 6E,69
0069C:  DATA 74,69
0069E:  DATA 61,6C
006A0:  DATA 69,7A
006A2:  DATA 65,0D
006A4:  DATA 0A,00
006A6:  DATA 43,52
006A8:  DATA 43,20
006AA:  DATA 45,52
006AC:  DATA 52,4F
006AE:  DATA 52,20
006B0:  DATA 25,64
006B2:  DATA 0D,0A
006B4:  DATA 00,00
006B6:  DATA 43,52
006B8:  DATA 43,20
006BA:  DATA 76,65
006BC:  DATA 72,69
006BE:  DATA 66,69
006C0:  DATA 63,61
006C2:  DATA 74,69
006C4:  DATA 6F,6E
006C6:  DATA 20,66
006C8:  DATA 61,69
006CA:  DATA 6C,65
006CC:  DATA 64,20
006CE:  DATA 61,66
006D0:  DATA 74,65
006D2:  DATA 72,20
006D4:  DATA 25,64
006D6:  DATA 20,61
006D8:  DATA 74,74
006DA:  DATA 65,6D
006DC:  DATA 70,74
006DE:  DATA 73,0D
006E0:  DATA 0A,00
006E2:  DATA 45,72
006E4:  DATA 72,6F
006E6:  DATA 72,3A
006E8:  DATA 20,43
006EA:  DATA 52,43
006EC:  DATA 20,76
006EE:  DATA 65,72
006F0:  DATA 69,66
006F2:  DATA 69,63
006F4:  DATA 61,74
006F6:  DATA 69,6F
006F8:  DATA 6E,20
006FA:  DATA 66,61
006FC:  DATA 69,6C
006FE:  DATA 65,64
00700:  DATA 20,61
00702:  DATA 66,74
00704:  DATA 65,72
00706:  DATA 20,25
00708:  DATA 64,20
0070A:  DATA 61,74
0070C:  DATA 74,65
0070E:  DATA 6D,70
00710:  DATA 74,73
00712:  DATA 0D,0A
00714:  DATA 00,00
00716:  DATA 0D,0A
00718:  DATA 5B,53
0071A:  DATA 4D,46
0071C:  DATA 20,43
0071E:  DATA 6F,75
00720:  DATA 6E,74
00722:  DATA 65,72
00724:  DATA 20,53
00726:  DATA 74,61
00728:  DATA 74,75
0072A:  DATA 73,5D
0072C:  DATA 0D,0A
0072E:  DATA 00,00
00730:  DATA 09,50
00732:  DATA 41,52
00734:  DATA 54,49
00736:  DATA 54,49
00738:  DATA 4F,4E
0073A:  DATA 09,55
0073C:  DATA 53,45
0073E:  DATA 44,09
00740:  DATA 09,52
00742:  DATA 45,53
00744:  DATA 45,52
00746:  DATA 56,45
00748:  DATA 0D,0A
0074A:  DATA 00,00
0074C:  DATA 09,2D
0074E:  DATA 2D,2D
00750:  DATA 2D,2D
00752:  DATA 2D,2D
00754:  DATA 2D,2D
00756:  DATA 09,2D
00758:  DATA 2D,2D
0075A:  DATA 2D,2D
0075C:  DATA 2D,2D
0075E:  DATA 2D,2D
00760:  DATA 2D,09
00762:  DATA 2D,2D
00764:  DATA 2D,2D
00766:  DATA 2D,2D
00768:  DATA 2D,2D
0076A:  DATA 2D,2D
0076C:  DATA 0D,0A
0076E:  DATA 00,00
00770:  DATA 09,50
00772:  DATA 49,43
00774:  DATA 4C,4F
00776:  DATA 47,09
00778:  DATA 09,30
0077A:  DATA 78,25
0077C:  DATA 30,38
0077E:  DATA 4C,58
00780:  DATA 09,30
00782:  DATA 78,25
00784:  DATA 30,38
00786:  DATA 4C,58
00788:  DATA 0D,0A
0078A:  DATA 00,00
0078C:  DATA 09,45
0078E:  DATA 4E,56
00790:  DATA 49,52
00792:  DATA 4F,09
00794:  DATA 09,30
00796:  DATA 78,25
00798:  DATA 30,38
0079A:  DATA 4C,58
0079C:  DATA 09,30
0079E:  DATA 78,25
007A0:  DATA 30,38
007A2:  DATA 4C,58
007A4:  DATA 0D,0A
007A6:  DATA 00,00
007A8:  DATA 09,49
007AA:  DATA 56,31
007AC:  DATA 5F,48
007AE:  DATA 45,41
007B0:  DATA 44,45
007B2:  DATA 52,09
007B4:  DATA 30,78
007B6:  DATA 25,30
007B8:  DATA 38,4C
007BA:  DATA 58,09
007BC:  DATA 30,78
007BE:  DATA 25,30
007C0:  DATA 38,4C
007C2:  DATA 58,0D
007C4:  DATA 0A,00
007C6:  DATA 09,49
007C8:  DATA 56,31
007CA:  DATA 5F,44
007CC:  DATA 41,54
007CE:  DATA 41,09
007D0:  DATA 30,78
007D2:  DATA 25,30
007D4:  DATA 38,4C
007D6:  DATA 58,09
007D8:  DATA 30,78
007DA:  DATA 25,30
007DC:  DATA 38,4C
007DE:  DATA 58,0D
007E0:  DATA 0A,00
007E2:  DATA 09,49
007E4:  DATA 56,32
007E6:  DATA 5F,48
007E8:  DATA 45,41
007EA:  DATA 44,45
007EC:  DATA 52,09
007EE:  DATA 30,78
007F0:  DATA 25,30
007F2:  DATA 38,4C
007F4:  DATA 58,09
007F6:  DATA 30,78
007F8:  DATA 25,30
007FA:  DATA 38,4C
007FC:  DATA 58,0D
007FE:  DATA 0A,00
00800:  DATA 09,49
00802:  DATA 56,32
00804:  DATA 5F,44
00806:  DATA 41,54
00808:  DATA 41,09
0080A:  DATA 30,78
0080C:  DATA 25,30
0080E:  DATA 38,4C
00810:  DATA 58,09
00812:  DATA 30,78
00814:  DATA 25,30
00816:  DATA 38,4C
00818:  DATA 58,0D
0081A:  DATA 0A,00
0081C:  DATA 09,3D
0081E:  DATA 3D,3D
00820:  DATA 3D,3D
00822:  DATA 3D,3D
00824:  DATA 3D,3D
00826:  DATA 3D,3D
00828:  DATA 3D,3D
0082A:  DATA 3D,3D
0082C:  DATA 3D,3D
0082E:  DATA 3D,3D
00830:  DATA 3D,3D
00832:  DATA 3D,3D
00834:  DATA 3D,3D
00836:  DATA 3D,3D
00838:  DATA 3D,3D
0083A:  DATA 3D,3D
0083C:  DATA 3D,3D
0083E:  DATA 3D,3D
00840:  DATA 3D,3D
00842:  DATA 3D,3D
00844:  DATA 3D,3D
00846:  DATA 3D,0D
00848:  DATA 0A,0D
0084A:  DATA 0A,00
0084C:  DATA 0D,0A
0084E:  DATA 5F,5F
00850:  DATA 5F,5F
00852:  DATA 5F,5F
00854:  DATA 5F,5F
00856:  DATA 5F,5F
00858:  DATA 5F,5F
0085A:  DATA 5F,5F
0085C:  DATA 5F,5F
0085E:  DATA 5F,5F
00860:  DATA 5F,5F
00862:  DATA 5F,5F
00864:  DATA 5F,5F
00866:  DATA 5F,5F
00868:  DATA 5F,5F
0086A:  DATA 5F,5F
0086C:  DATA 5F,0D
0086E:  DATA 0A,00
00870:  DATA 5F,5F
00872:  DATA 5F,5F
00874:  DATA 5F,5F
00876:  DATA 5F,5F
00878:  DATA 5F,53
0087A:  DATA 74,61
0087C:  DATA 72,74
0087E:  DATA 20,63
00880:  DATA 6F,70
00882:  DATA 79,5F
00884:  DATA 64,61
00886:  DATA 74,61
00888:  DATA 5F,5F
0088A:  DATA 5F,5F
0088C:  DATA 5F,5F
0088E:  DATA 5F,5F
00890:  DATA 5F,0D
00892:  DATA 0A,00
00894:  DATA 45,72
00896:  DATA 72,6F
00898:  DATA 72,3A
0089A:  DATA 20,4D
0089C:  DATA 49,53
0089E:  DATA 20,46
008A0:  DATA 4D,20
008A2:  DATA 69,73
008A4:  DATA 20,6E
008A6:  DATA 6F,74
008A8:  DATA 20,63
008AA:  DATA 6F,6E
008AC:  DATA 6E,65
008AE:  DATA 63,74
008B0:  DATA 65,64
008B2:  DATA 0D,0A
008B4:  DATA 00,00
008B6:  DATA 45,72
008B8:  DATA 72,6F
008BA:  DATA 72,3A
008BC:  DATA 20,53
008BE:  DATA 4D,46
008C0:  DATA 20,69
008C2:  DATA 73,20
008C4:  DATA 6E,6F
008C6:  DATA 74,20
008C8:  DATA 63,6F
008CA:  DATA 6E,6E
008CC:  DATA 65,63
008CE:  DATA 74,65
008D0:  DATA 64,0D
008D2:  DATA 0A,00
008D4:  DATA 46,4C
008D6:  DATA 41,53
008D8:  DATA 48,20
008DA:  DATA 49,44
008DC:  DATA 3A,20
008DE:  DATA 43,49
008E0:  DATA 47,53
008E2:  DATA 5F,44
008E4:  DATA 41,54
008E6:  DATA 41,5F
008E8:  DATA 54,41
008EA:  DATA 42,4C
008EC:  DATA 45,0D
008EE:  DATA 0A,00
008F0:  DATA 46,4C
008F2:  DATA 41,53
008F4:  DATA 48,20
008F6:  DATA 49,44
008F8:  DATA 3A,20
008FA:  DATA 43,49
008FC:  DATA 47,53
008FE:  DATA 5F,50
00900:  DATA 49,43
00902:  DATA 4C,4F
00904:  DATA 47,5F
00906:  DATA 44,41
00908:  DATA 54,41
0090A:  DATA 0D,0A
0090C:  DATA 00,00
0090E:  DATA 46,4C
00910:  DATA 41,53
00912:  DATA 48,20
00914:  DATA 49,44
00916:  DATA 3A,20
00918:  DATA 43,49
0091A:  DATA 47,53
0091C:  DATA 5F,45
0091E:  DATA 4E,56
00920:  DATA 49,52
00922:  DATA 4F,5F
00924:  DATA 44,41
00926:  DATA 54,41
00928:  DATA 0D,0A
0092A:  DATA 00,00
0092C:  DATA 46,4C
0092E:  DATA 41,53
00930:  DATA 48,20
00932:  DATA 49,44
00934:  DATA 3A,20
00936:  DATA 43,49
00938:  DATA 47,53
0093A:  DATA 5F,49
0093C:  DATA 56,31
0093E:  DATA 5F,48
00940:  DATA 45,41
00942:  DATA 44,45
00944:  DATA 52,0D
00946:  DATA 0A,00
00948:  DATA 46,4C
0094A:  DATA 41,53
0094C:  DATA 48,20
0094E:  DATA 49,44
00950:  DATA 3A,20
00952:  DATA 43,49
00954:  DATA 47,53
00956:  DATA 5F,49
00958:  DATA 56,31
0095A:  DATA 5F,44
0095C:  DATA 41,54
0095E:  DATA 41,0D
00960:  DATA 0A,00
00962:  DATA 46,4C
00964:  DATA 41,53
00966:  DATA 48,20
00968:  DATA 49,44
0096A:  DATA 3A,20
0096C:  DATA 43,49
0096E:  DATA 47,53
00970:  DATA 5F,49
00972:  DATA 56,32
00974:  DATA 5F,48
00976:  DATA 45,41
00978:  DATA 44,45
0097A:  DATA 52,0D
0097C:  DATA 0A,00
0097E:  DATA 46,4C
00980:  DATA 41,53
00982:  DATA 48,20
00984:  DATA 49,44
00986:  DATA 3A,20
00988:  DATA 43,49
0098A:  DATA 47,53
0098C:  DATA 5F,49
0098E:  DATA 56,32
00990:  DATA 5F,44
00992:  DATA 41,54
00994:  DATA 41,0D
00996:  DATA 0A,00
00998:  DATA 45,72
0099A:  DATA 72,6F
0099C:  DATA 72,3A
0099E:  DATA 20,49
009A0:  DATA 6E,76
009A2:  DATA 61,6C
009A4:  DATA 69,64
009A6:  DATA 20,6D
009A8:  DATA 69,73
009AA:  DATA 73,69
009AC:  DATA 6F,6E
009AE:  DATA 20,49
009B0:  DATA 44,20
009B2:  DATA 25,64
009B4:  DATA 0D,0A
009B6:  DATA 00,00
009B8:  DATA 5B,4D
009BA:  DATA 49,53
009BC:  DATA 46,20
009BE:  DATA 41,44
009C0:  DATA 44,52
009C2:  DATA 45,53
009C4:  DATA 53,5D
009C6:  DATA 0D,0A
009C8:  DATA 00,00
009CA:  DATA 09,50
009CC:  DATA 61,72
009CE:  DATA 61,6D
009D0:  DATA 09,44
009D2:  DATA 61,74
009D4:  DATA 61,0D
009D6:  DATA 0A,00
009D8:  DATA 09,2D
009DA:  DATA 2D,2D
009DC:  DATA 2D,2D
009DE:  DATA 09,2D
009E0:  DATA 2D,2D
009E2:  DATA 2D,2D
009E4:  DATA 2D,2D
009E6:  DATA 2D,2D
009E8:  DATA 2D,0D
009EA:  DATA 0A,00
009EC:  DATA 09,53
009EE:  DATA 54,41
009F0:  DATA 52,54
009F2:  DATA 09,30
009F4:  DATA 78,25
009F6:  DATA 30,38
009F8:  DATA 4C,58
009FA:  DATA 0D,0A
009FC:  DATA 00,00
009FE:  DATA 09,45
00A00:  DATA 4E,44
00A02:  DATA 09,30
00A04:  DATA 78,25
00A06:  DATA 30,38
00A08:  DATA 4C,58
00A0A:  DATA 0D,0A
00A0C:  DATA 00,00
00A0E:  DATA 09,53
00A10:  DATA 52,43
00A12:  DATA 09,30
00A14:  DATA 78,25
00A16:  DATA 30,38
00A18:  DATA 4C,58
00A1A:  DATA 0D,0A
00A1C:  DATA 00,00
00A1E:  DATA 09,53
00A20:  DATA 49,5A
00A22:  DATA 45,09
00A24:  DATA 30,78
00A26:  DATA 25,30
00A28:  DATA 38,4C
00A2A:  DATA 58,0D
00A2C:  DATA 0A,00
00A2E:  DATA 09,2D
00A30:  DATA 2D,2D
00A32:  DATA 2D,2D
00A34:  DATA 09,2D
00A36:  DATA 2D,2D
00A38:  DATA 2D,2D
00A3A:  DATA 2D,2D
00A3C:  DATA 2D,2D
00A3E:  DATA 2D,0D
00A40:  DATA 0A,00
00A42:  DATA 5B,53
00A44:  DATA 4D,46
00A46:  DATA 20,41
00A48:  DATA 44,44
00A4A:  DATA 52,45
00A4C:  DATA 53,53
00A4E:  DATA 5D,0D
00A50:  DATA 0A,00
00A52:  DATA 09,50
00A54:  DATA 61,72
00A56:  DATA 61,6D
00A58:  DATA 09,44
00A5A:  DATA 61,74
00A5C:  DATA 61,0D
00A5E:  DATA 0A,00
00A60:  DATA 09,2D
00A62:  DATA 2D,2D
00A64:  DATA 2D,2D
00A66:  DATA 09,2D
00A68:  DATA 2D,2D
00A6A:  DATA 2D,2D
00A6C:  DATA 2D,2D
00A6E:  DATA 2D,2D
00A70:  DATA 2D,0D
00A72:  DATA 0A,00
00A74:  DATA 09,53
00A76:  DATA 54,41
00A78:  DATA 52,54
00A7A:  DATA 09,30
00A7C:  DATA 78,25
00A7E:  DATA 30,38
00A80:  DATA 4C,58
00A82:  DATA 0D,0A
00A84:  DATA 00,00
00A86:  DATA 09,45
00A88:  DATA 4E,44
00A8A:  DATA 09,30
00A8C:  DATA 78,25
00A8E:  DATA 30,38
00A90:  DATA 4C,58
00A92:  DATA 0D,0A
00A94:  DATA 00,00
00A96:  DATA 09,2D
00A98:  DATA 2D,2D
00A9A:  DATA 2D,2D
00A9C:  DATA 09,2D
00A9E:  DATA 2D,2D
00AA0:  DATA 2D,2D
00AA2:  DATA 2D,2D
00AA4:  DATA 2D,2D
00AA6:  DATA 2D,0D
00AA8:  DATA 0A,00
00AAA:  DATA 45,52
00AAC:  DATA 41,53
00AAE:  DATA 45,20
00AB0:  DATA 53,4D
00AB2:  DATA 46,20
00AB4:  DATA 41,52
00AB6:  DATA 45,41
00AB8:  DATA 0D,0A
00ABA:  DATA 00,00
00ABC:  DATA 09,45
00ABE:  DATA 52,41
00AC0:  DATA 53,45
00AC2:  DATA 20,53
00AC4:  DATA 4D,46
00AC6:  DATA 20,41
00AC8:  DATA 52,45
00ACA:  DATA 41,20
00ACC:  DATA 44,4F
00ACE:  DATA 4E,45
00AD0:  DATA 0D,0A
00AD2:  DATA 00,00
00AD4:  DATA 57,52
00AD6:  DATA 49,54
00AD8:  DATA 45,20
00ADA:  DATA 44,41
00ADC:  DATA 54,41
00ADE:  DATA 20,54
00AE0:  DATA 4F,20
00AE2:  DATA 53,4D
00AE4:  DATA 46,0D
00AE6:  DATA 0A,00
00AE8:  DATA 55,50
00AEA:  DATA 44,41
00AEC:  DATA 54,45
00AEE:  DATA 20,53
00AF0:  DATA 4D,46
00AF2:  DATA 20,43
00AF4:  DATA 4F,55
00AF6:  DATA 4E,54
00AF8:  DATA 45,52
00AFA:  DATA 20,53
00AFC:  DATA 54,41
00AFE:  DATA 54,55
00B00:  DATA 53,0D
00B02:  DATA 0A,00
00B04:  DATA 0D,0A
00B06:  DATA 5F,5F
00B08:  DATA 5F,5F
00B0A:  DATA 5F,5F
00B0C:  DATA 5F,5F
00B0E:  DATA 5F,45
00B10:  DATA 6E,64
00B12:  DATA 20,63
00B14:  DATA 6F,70
00B16:  DATA 79,5F
00B18:  DATA 64,61
00B1A:  DATA 74,61
00B1C:  DATA 5F,5F
00B1E:  DATA 5F,5F
00B20:  DATA 5F,5F
00B22:  DATA 5F,5F
00B24:  DATA 5F,5F
00B26:  DATA 0D,0A
00B28:  DATA 00,00
00B2A:  DATA 5F,5F
00B2C:  DATA 5F,5F
00B2E:  DATA 5F,5F
00B30:  DATA 5F,5F
00B32:  DATA 5F,5F
00B34:  DATA 5F,5F
00B36:  DATA 5F,5F
00B38:  DATA 5F,5F
00B3A:  DATA 5F,5F
00B3C:  DATA 5F,5F
00B3E:  DATA 5F,5F
00B40:  DATA 5F,5F
00B42:  DATA 5F,5F
00B44:  DATA 5F,5F
00B46:  DATA 5F,5F
00B48:  DATA 5F,0D
00B4A:  DATA 0A,0D
00B4C:  DATA 0A,00
00B4E:  DATA 0D,0A
00B50:  DATA 5F,5F
00B52:  DATA 5F,5F
00B54:  DATA 5F,5F
00B56:  DATA 5F,5F
00B58:  DATA 5F,5F
00B5A:  DATA 5F,5F
00B5C:  DATA 5F,5F
00B5E:  DATA 5F,5F
00B60:  DATA 5F,5F
00B62:  DATA 5F,5F
00B64:  DATA 0D,0A
00B66:  DATA 00,00
00B68:  DATA 5F,5F
00B6A:  DATA 5F,53
00B6C:  DATA 74,61
00B6E:  DATA 72,74
00B70:  DATA 20,53
00B72:  DATA 4D,46
00B74:  DATA 20,52
00B76:  DATA 65,61
00B78:  DATA 64,5F
00B7A:  DATA 5F,5F
00B7C:  DATA 5F,0D
00B7E:  DATA 0A,00
00B80:  DATA 45,72
00B82:  DATA 72,6F
00B84:  DATA 72,3A
00B86:  DATA 20,52
00B88:  DATA 65,61
00B8A:  DATA 64,20
00B8C:  DATA 61,64
00B8E:  DATA 64,72
00B90:  DATA 65,73
00B92:  DATA 73,20
00B94:  DATA 30,78
00B96:  DATA 25,30
00B98:  DATA 38,4C
00B9A:  DATA 58,20
00B9C:  DATA 6F,75
00B9E:  DATA 74,20
00BA0:  DATA 6F,66
00BA2:  DATA 20,53
00BA4:  DATA 4D,46
00BA6:  DATA 20,6D
00BA8:  DATA 69,73
00BAA:  DATA 73,69
00BAC:  DATA 6F,6E
00BAE:  DATA 20,72
00BB0:  DATA 61,6E
00BB2:  DATA 67,65
00BB4:  DATA 20,5B
00BB6:  DATA 30,78
00BB8:  DATA 25,30
00BBA:  DATA 38,4C
00BBC:  DATA 58,20
00BBE:  DATA 2D,20
00BC0:  DATA 30,78
00BC2:  DATA 25,30
00BC4:  DATA 38,4C
00BC6:  DATA 58,29
00BC8:  DATA 0D,0A
00BCA:  DATA 00,00
00BCC:  DATA 57,61
00BCE:  DATA 72,6E
00BD0:  DATA 3A,20
00BD2:  DATA 41,64
00BD4:  DATA 6A,75
00BD6:  DATA 73,74
00BD8:  DATA 20,72
00BDA:  DATA 65,61
00BDC:  DATA 64,20
00BDE:  DATA 73,69
00BE0:  DATA 7A,65
00BE2:  DATA 20,66
00BE4:  DATA 72,6F
00BE6:  DATA 6D,20
00BE8:  DATA 25,6C
00BEA:  DATA 75,20
00BEC:  DATA 74,6F
00BEE:  DATA 20,25
00BF0:  DATA 6C,75
00BF2:  DATA 20,28
00BF4:  DATA 6D,69
00BF6:  DATA 73,73
00BF8:  DATA 69,6F
00BFA:  DATA 6E,20
00BFC:  DATA 65,6E
00BFE:  DATA 64,29
00C00:  DATA 0D,0A
00C02:  DATA 00,00
00C04:  DATA 49,6E
00C06:  DATA 66,6F
00C08:  DATA 3A,20
00C0A:  DATA 4E,6F
00C0C:  DATA 74,68
00C0E:  DATA 69,6E
00C10:  DATA 67,20
00C12:  DATA 74,6F
00C14:  DATA 20,72
00C16:  DATA 65,61
00C18:  DATA 64,20
00C1A:  DATA 28,73
00C1C:  DATA 69,7A
00C1E:  DATA 65,3D
00C20:  DATA 30,29
00C22:  DATA 0D,0A
00C24:  DATA 00,00
00C26:  DATA 49,6E
00C28:  DATA 20,53
00C2A:  DATA 4D,46
00C2C:  DATA 20,52
00C2E:  DATA 65,61
00C30:  DATA 64,20
00C32:  DATA 73,6F
00C34:  DATA 75,72
00C36:  DATA 63,65
00C38:  DATA 20,64
00C3A:  DATA 61,74
00C3C:  DATA 61,20
00C3E:  DATA 61,64
00C40:  DATA 64,72
00C42:  DATA 65,73
00C44:  DATA 73,3A
00C46:  DATA 20,25
00C48:  DATA 4C,58
00C4A:  DATA 0D,0A
00C4C:  DATA 00,00
00C4E:  DATA 49,6E
00C50:  DATA 20,53
00C52:  DATA 4D,46
00C54:  DATA 20,52
00C56:  DATA 65,61
00C58:  DATA 64,20
00C5A:  DATA 64,61
00C5C:  DATA 74,61
00C5E:  DATA 20,73
00C60:  DATA 69,7A
00C62:  DATA 65,20
00C64:  DATA 20,20
00C66:  DATA 20,20
00C68:  DATA 20,20
00C6A:  DATA 20,20
00C6C:  DATA 20,3A
00C6E:  DATA 20,25
00C70:  DATA 6C,75
00C72:  DATA 20,28
00C74:  DATA 30,78
00C76:  DATA 25,6C
00C78:  DATA 78,29
00C7A:  DATA 0D,0A
00C7C:  DATA 0D,0A
00C7E:  DATA 00,00
00C80:  DATA 45,72
00C82:  DATA 72,6F
00C84:  DATA 72,3A
00C86:  DATA 20,53
00C88:  DATA 4D,46
00C8A:  DATA 20,69
00C8C:  DATA 73,20
00C8E:  DATA 6E,6F
00C90:  DATA 74,20
00C92:  DATA 63,6F
00C94:  DATA 6E,6E
00C96:  DATA 65,63
00C98:  DATA 74,65
00C9A:  DATA 64,0D
00C9C:  DATA 0A,00
00C9E:  DATA 52,45
00CA0:  DATA 41,44
00CA2:  DATA 20,44
00CA4:  DATA 41,54
00CA6:  DATA 41,20
00CA8:  DATA 46,52
00CAA:  DATA 4F,4D
00CAC:  DATA 20,53
00CAE:  DATA 4D,46
00CB0:  DATA 2E,2E
00CB2:  DATA 2E,0D
00CB4:  DATA 0A,00
00CB6:  DATA 0D,0A
00CB8:  DATA 5F,5F
00CBA:  DATA 5F,45
00CBC:  DATA 6E,64
00CBE:  DATA 20,53
00CC0:  DATA 4D,46
00CC2:  DATA 20,52
00CC4:  DATA 65,61
00CC6:  DATA 64,5F
00CC8:  DATA 5F,5F
00CCA:  DATA 5F,0D
00CCC:  DATA 0A,00
00CCE:  DATA 5F,5F
00CD0:  DATA 5F,5F
00CD2:  DATA 5F,5F
00CD4:  DATA 5F,5F
00CD6:  DATA 5F,5F
00CD8:  DATA 5F,5F
00CDA:  DATA 5F,5F
00CDC:  DATA 5F,5F
00CDE:  DATA 5F,5F
00CE0:  DATA 5F,5F
00CE2:  DATA 0D,0A
00CE4:  DATA 0D,0A
00CE6:  DATA 00,00
00CE8:  DATA 0D,0A
00CEA:  DATA 5F,5F
00CEC:  DATA 5F,5F
00CEE:  DATA 5F,5F
00CF0:  DATA 5F,5F
00CF2:  DATA 5F,5F
00CF4:  DATA 5F,5F
00CF6:  DATA 5F,5F
00CF8:  DATA 5F,5F
00CFA:  DATA 5F,5F
00CFC:  DATA 5F,5F
00CFE:  DATA 0D,0A
00D00:  DATA 00,00
00D02:  DATA 5F,5F
00D04:  DATA 5F,53
00D06:  DATA 74,61
00D08:  DATA 72,74
00D0A:  DATA 20,73
00D0C:  DATA 6D,66
00D0E:  DATA 5F,65
00D10:  DATA 72,61
00D12:  DATA 73,65
00D14:  DATA 5F,5F
00D16:  DATA 5F,5F
00D18:  DATA 0D,0A
00D1A:  DATA 00,00
00D1C:  DATA 5B,53
00D1E:  DATA 4D,46
00D20:  DATA 5D,20
00D22:  DATA 45,72
00D24:  DATA 61,73
00D26:  DATA 65,20
00D28:  DATA 61,64
00D2A:  DATA 64,72
00D2C:  DATA 65,73
00D2E:  DATA 73,20
00D30:  DATA 20,20
00D32:  DATA 3A,20
00D34:  DATA 25,4C
00D36:  DATA 58,0D
00D38:  DATA 0A,00
00D3A:  DATA 5B,53
00D3C:  DATA 4D,46
00D3E:  DATA 5D,20
00D40:  DATA 45,72
00D42:  DATA 61,73
00D44:  DATA 65,20
00D46:  DATA 64,61
00D48:  DATA 74,61
00D4A:  DATA 20,73
00D4C:  DATA 69,7A
00D4E:  DATA 65,20
00D50:  DATA 3A,20
00D52:  DATA 25,6C
00D54:  DATA 75,20
00D56:  DATA 28,30
00D58:  DATA 78,25
00D5A:  DATA 6C,78
00D5C:  DATA 29,0D
00D5E:  DATA 0A,0D
00D60:  DATA 0A,00
00D62:  DATA 45,72
00D64:  DATA 72,6F
00D66:  DATA 72,3A
00D68:  DATA 20,53
00D6A:  DATA 4D,46
00D6C:  DATA 20,69
00D6E:  DATA 73,20
00D70:  DATA 6E,6F
00D72:  DATA 74,20
00D74:  DATA 63,6F
00D76:  DATA 6E,6E
00D78:  DATA 65,63
00D7A:  DATA 74,65
00D7C:  DATA 64,0D
00D7E:  DATA 0A,00
00D80:  DATA 45,72
00D82:  DATA 72,6F
00D84:  DATA 72,3A
00D86:  DATA 20,45
00D88:  DATA 72,61
00D8A:  DATA 73,65
00D8C:  DATA 20,73
00D8E:  DATA 6F,75
00D90:  DATA 72,63
00D92:  DATA 65,20
00D94:  DATA 61,64
00D96:  DATA 64,72
00D98:  DATA 65,73
00D9A:  DATA 73,20
00D9C:  DATA 30,78
00D9E:  DATA 25,4C
00DA0:  DATA 58,20
00DA2:  DATA 69,73
00DA4:  DATA 20,6F
00DA6:  DATA 75,74
00DA8:  DATA 73,69
00DAA:  DATA 64,65
00DAC:  DATA 20,6D
00DAE:  DATA 69,73
00DB0:  DATA 73,69
00DB2:  DATA 6F,6E
00DB4:  DATA 20,72
00DB6:  DATA 61,6E
00DB8:  DATA 67,65
00DBA:  DATA 20,5B
00DBC:  DATA 30,78
00DBE:  DATA 25,4C
00DC0:  DATA 58,20
00DC2:  DATA 2D,20
00DC4:  DATA 30,78
00DC6:  DATA 25,4C
00DC8:  DATA 58,5D
00DCA:  DATA 0D,0A
00DCC:  DATA 00,00
00DCE:  DATA 45,72
00DD0:  DATA 72,6F
00DD2:  DATA 72,3A
00DD4:  DATA 20,45
00DD6:  DATA 72,61
00DD8:  DATA 73,65
00DDA:  DATA 20,6F
00DDC:  DATA 70,65
00DDE:  DATA 72,61
00DE0:  DATA 74,69
00DE2:  DATA 6F,6E
00DE4:  DATA 20,77
00DE6:  DATA 6F,75
00DE8:  DATA 6C,64
00DEA:  DATA 20,65
00DEC:  DATA 78,63
00DEE:  DATA 65,65
00DF0:  DATA 64,20
00DF2:  DATA 6D,69
00DF4:  DATA 73,73
00DF6:  DATA 69,6F
00DF8:  DATA 6E,20
00DFA:  DATA 65,6E
00DFC:  DATA 64,20
00DFE:  DATA 61,64
00E00:  DATA 64,72
00E02:  DATA 65,73
00E04:  DATA 73,20
00E06:  DATA 30,78
00E08:  DATA 25,4C
00E0A:  DATA 58,0D
00E0C:  DATA 0A,00
00E0E:  DATA 4C,69
00E10:  DATA 6D,69
00E12:  DATA 74,69
00E14:  DATA 6E,67
00E16:  DATA 20,65
00E18:  DATA 72,61
00E1A:  DATA 73,65
00E1C:  DATA 20,73
00E1E:  DATA 69,7A
00E20:  DATA 65,20
00E22:  DATA 74,6F
00E24:  DATA 20,73
00E26:  DATA 74,61
00E28:  DATA 79,20
00E2A:  DATA 77,69
00E2C:  DATA 74,68
00E2E:  DATA 69,6E
00E30:  DATA 20,6D
00E32:  DATA 69,73
00E34:  DATA 73,69
00E36:  DATA 6F,6E
00E38:  DATA 20,62
00E3A:  DATA 6F,75
00E3C:  DATA 6E,64
00E3E:  DATA 73,0D
00E40:  DATA 0A,00
00E42:  DATA 45,72
00E44:  DATA 61,73
00E46:  DATA 65,20
00E48:  DATA 6F,70
00E4A:  DATA 65,72
00E4C:  DATA 61,74
00E4E:  DATA 69,6F
00E50:  DATA 6E,20
00E52:  DATA 76,61
00E54:  DATA 6C,69
00E56:  DATA 64,61
00E58:  DATA 74,65
00E5A:  DATA 64,20
00E5C:  DATA 77,69
00E5E:  DATA 74,68
00E60:  DATA 69,6E
00E62:  DATA 20,6D
00E64:  DATA 69,73
00E66:  DATA 73,69
00E68:  DATA 6F,6E
00E6A:  DATA 20,72
00E6C:  DATA 61,6E
00E6E:  DATA 67,65
00E70:  DATA 0D,0A
00E72:  DATA 00,00
00E74:  DATA 45,72
00E76:  DATA 61,73
00E78:  DATA 65,64
00E7A:  DATA 20,25
00E7C:  DATA 6C,75
00E7E:  DATA 20,62
00E80:  DATA 79,74
00E82:  DATA 65,73
00E84:  DATA 20,28
00E86:  DATA 61,6C
00E88:  DATA 69,67
00E8A:  DATA 6E,65
00E8C:  DATA 64,29
00E8E:  DATA 0D,0A
00E90:  DATA 00,00
00E92:  DATA 0D,0A
00E94:  DATA 5F,5F
00E96:  DATA 5F,45
00E98:  DATA 6E,64
00E9A:  DATA 20,73
00E9C:  DATA 6D,66
00E9E:  DATA 5F,65
00EA0:  DATA 72,61
00EA2:  DATA 73,65
00EA4:  DATA 5F,5F
00EA6:  DATA 5F,5F
00EA8:  DATA 0D,0A
00EAA:  DATA 00,00
00EAC:  DATA 5F,5F
00EAE:  DATA 5F,5F
00EB0:  DATA 5F,5F
00EB2:  DATA 5F,5F
00EB4:  DATA 5F,5F
00EB6:  DATA 5F,5F
00EB8:  DATA 5F,5F
00EBA:  DATA 5F,5F
00EBC:  DATA 5F,5F
00EBE:  DATA 5F,5F
00EC0:  DATA 0D,0A
00EC2:  DATA 0D,0A
00EC4:  DATA 00,00
00EC6:  DATA 4D,49
00EC8:  DATA 53,53
00ECA:  DATA 49,4F
00ECC:  DATA 4E,20
00ECE:  DATA 46,4C
00ED0:  DATA 41,53
00ED2:  DATA 48,20
00ED4:  DATA 49,6E
00ED6:  DATA 69,74
00ED8:  DATA 69,61
00EDA:  DATA 6C,69
00EDC:  DATA 7A,65
00EDE:  DATA 0D,0A
00EE0:  DATA 00,00
00EE2:  DATA 09,5B
00EE4:  DATA 4D,49
00EE6:  DATA 53,20
00EE8:  DATA 46,4D
00EEA:  DATA 5D,20
00EEC:  DATA 43,6F
00EEE:  DATA 6E,6E
00EF0:  DATA 65,63
00EF2:  DATA 74,65
00EF4:  DATA 64,0D
00EF6:  DATA 0A,00
00EF8:  DATA 09,5B
00EFA:  DATA 4D,49
00EFC:  DATA 53,20
00EFE:  DATA 46,4D
00F00:  DATA 5D,20
00F02:  DATA 4E,6F
00F04:  DATA 74,20
00F06:  DATA 43,6F
00F08:  DATA 6E,6E
00F0A:  DATA 65,63
00F0C:  DATA 74,65
00F0E:  DATA 64,0D
00F10:  DATA 0A,00
00F12:  DATA 09,5B
00F14:  DATA 53,4D
00F16:  DATA 46,5D
00F18:  DATA 20,43
00F1A:  DATA 6F,6E
00F1C:  DATA 6E,65
00F1E:  DATA 63,74
00F20:  DATA 65,64
00F22:  DATA 0D,0A
00F24:  DATA 00,00
00F26:  DATA 09,5B
00F28:  DATA 53,4D
00F2A:  DATA 46,5D
00F2C:  DATA 20,4E
00F2E:  DATA 6F,74
00F30:  DATA 20,43
00F32:  DATA 6F,6E
00F34:  DATA 6E,65
00F36:  DATA 63,74
00F38:  DATA 65,64
00F3A:  DATA 0D,0A
00F3C:  DATA 00,00
00F3E:  DATA 09,5B
00F40:  DATA 4D,49
00F42:  DATA 53,20
00F44:  DATA 46,4D
00F46:  DATA 5D,20
00F48:  DATA 25,30
00F4A:  DATA 38,4C
00F4C:  DATA 58,0D
00F4E:  DATA 0A,00
00F50:  DATA 09,5B
00F52:  DATA 4D,49
00F54:  DATA 53,20
00F56:  DATA 46,4D
00F58:  DATA 5D,20
00F5A:  DATA 43,52
00F5C:  DATA 43,20
00F5E:  DATA 65,72
00F60:  DATA 72,6F
00F62:  DATA 72,20
00F64:  DATA 2D,3E
00F66:  DATA 20,69
00F68:  DATA 6E,69
00F6A:  DATA 74,69
00F6C:  DATA 61,6C
00F6E:  DATA 69,7A
00F70:  DATA 65,20
00F72:  DATA 63,6F
00F74:  DATA 75,6E
00F76:  DATA 74,65
00F78:  DATA 72,73
00F7A:  DATA 0D,0A
00F7C:  DATA 00,00
00F7E:  DATA 09,43
00F80:  DATA 6F,6D
00F82:  DATA 70,6C
00F84:  DATA 65,74
00F86:  DATA 65,0D
00F88:  DATA 0A,00
00F8A:  DATA 09,46
00F8C:  DATA 69,65
00F8E:  DATA 6C,64
00F90:  DATA 09,09
00F92:  DATA 43,6F
00F94:  DATA 75,6E
00F96:  DATA 74,65
00F98:  DATA 72,4E
00F9A:  DATA 61,6D
00F9C:  DATA 65,09
00F9E:  DATA 56,61
00FA0:  DATA 6C,75
00FA2:  DATA 65,0D
00FA4:  DATA 0A,00
00FA6:  DATA 09,2D
00FA8:  DATA 2D,2D
00FAA:  DATA 2D,2D
00FAC:  DATA 2D,2D
00FAE:  DATA 2D,2D
00FB0:  DATA 2D,2D
00FB2:  DATA 2D,09
00FB4:  DATA 2D,2D
00FB6:  DATA 2D,2D
00FB8:  DATA 2D,2D
00FBA:  DATA 2D,2D
00FBC:  DATA 2D,2D
00FBE:  DATA 2D,2D
00FC0:  DATA 2D,09
00FC2:  DATA 2D,2D
00FC4:  DATA 2D,2D
00FC6:  DATA 2D,2D
00FC8:  DATA 2D,2D
00FCA:  DATA 2D,2D
00FCC:  DATA 2D,2D
00FCE:  DATA 2D,0D
00FD0:  DATA 0A,00
00FD2:  DATA 09,50
00FD4:  DATA 49,43
00FD6:  DATA 4C,4F
00FD8:  DATA 47,09
00FDA:  DATA 09,55
00FDC:  DATA 73,65
00FDE:  DATA 64,09
00FE0:  DATA 09,30
00FE2:  DATA 78,25
00FE4:  DATA 30,38
00FE6:  DATA 4C,58
00FE8:  DATA 0D,0A
00FEA:  DATA 00,00
00FEC:  DATA 09,09
00FEE:  DATA 09,55
00FF0:  DATA 6E,63
00FF2:  DATA 6F,70
00FF4:  DATA 79,65
00FF6:  DATA 64,09
00FF8:  DATA 30,78
00FFA:  DATA 25,30
00FFC:  DATA 38,4C
00FFE:  DATA 58,0D
01000:  DATA 0A,00
01002:  DATA 09,09
01004:  DATA 09,52
01006:  DATA 65,73
01008:  DATA 65,72
0100A:  DATA 76,65
0100C:  DATA 09,09
0100E:  DATA 30,78
01010:  DATA 25,30
01012:  DATA 32,58
01014:  DATA 2F,20
01016:  DATA 30,78
01018:  DATA 25,30
0101A:  DATA 32,58
0101C:  DATA 0D,0A
0101E:  DATA 00,00
01020:  DATA 09,45
01022:  DATA 4E,56
01024:  DATA 49,52
01026:  DATA 4F,09
01028:  DATA 09,55
0102A:  DATA 73,65
0102C:  DATA 64,09
0102E:  DATA 09,30
01030:  DATA 78,25
01032:  DATA 30,38
01034:  DATA 4C,58
01036:  DATA 0D,0A
01038:  DATA 00,00
0103A:  DATA 09,09
0103C:  DATA 09,55
0103E:  DATA 6E,63
01040:  DATA 6F,70
01042:  DATA 79,65
01044:  DATA 64,09
01046:  DATA 30,78
01048:  DATA 25,30
0104A:  DATA 38,4C
0104C:  DATA 58,0D
0104E:  DATA 0A,00
01050:  DATA 09,09
01052:  DATA 09,52
01054:  DATA 65,73
01056:  DATA 65,72
01058:  DATA 76,65
0105A:  DATA 09,09
0105C:  DATA 30,78
0105E:  DATA 25,30
01060:  DATA 32,58
01062:  DATA 2F,20
01064:  DATA 30,78
01066:  DATA 25,30
01068:  DATA 32,58
0106A:  DATA 0D,0A
0106C:  DATA 00,00
0106E:  DATA 09,49
01070:  DATA 56,31
01072:  DATA 20,48
01074:  DATA 45,41
01076:  DATA 44,45
01078:  DATA 52,09
0107A:  DATA 55,73
0107C:  DATA 65,64
0107E:  DATA 09,09
01080:  DATA 30,78
01082:  DATA 25,30
01084:  DATA 38,4C
01086:  DATA 58,0D
01088:  DATA 0A,00
0108A:  DATA 09,09
0108C:  DATA 09,55
0108E:  DATA 6E,63
01090:  DATA 6F,70
01092:  DATA 79,65
01094:  DATA 64,09
01096:  DATA 30,78
01098:  DATA 25,30
0109A:  DATA 38,4C
0109C:  DATA 58,0D
0109E:  DATA 0A,00
010A0:  DATA 09,09
010A2:  DATA 09,52
010A4:  DATA 65,73
010A6:  DATA 65,72
010A8:  DATA 76,65
010AA:  DATA 09,09
010AC:  DATA 30,78
010AE:  DATA 25,30
010B0:  DATA 32,58
010B2:  DATA 2F,20
010B4:  DATA 30,78
010B6:  DATA 25,30
010B8:  DATA 32,58
010BA:  DATA 0D,0A
010BC:  DATA 00,00
010BE:  DATA 09,49
010C0:  DATA 56,31
010C2:  DATA 20,44
010C4:  DATA 41,54
010C6:  DATA 41,09
010C8:  DATA 55,73
010CA:  DATA 65,64
010CC:  DATA 09,09
010CE:  DATA 30,78
010D0:  DATA 25,30
010D2:  DATA 38,4C
010D4:  DATA 58,0D
010D6:  DATA 0A,00
010D8:  DATA 09,09
010DA:  DATA 09,55
010DC:  DATA 6E,63
010DE:  DATA 6F,70
010E0:  DATA 79,65
010E2:  DATA 64,09
010E4:  DATA 30,78
010E6:  DATA 25,30
010E8:  DATA 38,4C
010EA:  DATA 58,0D
010EC:  DATA 0A,00
010EE:  DATA 09,09
010F0:  DATA 09,52
010F2:  DATA 65,73
010F4:  DATA 65,72
010F6:  DATA 76,65
010F8:  DATA 09,09
010FA:  DATA 30,78
010FC:  DATA 25,30
010FE:  DATA 32,58
01100:  DATA 2F,20
01102:  DATA 30,78
01104:  DATA 25,30
01106:  DATA 32,58
01108:  DATA 0D,0A
0110A:  DATA 00,00
0110C:  DATA 09,49
0110E:  DATA 56,32
01110:  DATA 20,48
01112:  DATA 45,41
01114:  DATA 44,45
01116:  DATA 52,09
01118:  DATA 55,73
0111A:  DATA 65,64
0111C:  DATA 09,09
0111E:  DATA 30,78
01120:  DATA 25,30
01122:  DATA 38,4C
01124:  DATA 58,0D
01126:  DATA 0A,00
01128:  DATA 09,09
0112A:  DATA 09,55
0112C:  DATA 6E,63
0112E:  DATA 6F,70
01130:  DATA 79,65
01132:  DATA 64,09
01134:  DATA 30,78
01136:  DATA 25,30
01138:  DATA 38,4C
0113A:  DATA 58,0D
0113C:  DATA 0A,00
0113E:  DATA 09,09
01140:  DATA 09,52
01142:  DATA 65,73
01144:  DATA 65,72
01146:  DATA 76,65
01148:  DATA 09,09
0114A:  DATA 30,78
0114C:  DATA 25,30
0114E:  DATA 32,58
01150:  DATA 2F,20
01152:  DATA 30,78
01154:  DATA 25,30
01156:  DATA 32,58
01158:  DATA 0D,0A
0115A:  DATA 00,00
0115C:  DATA 09,49
0115E:  DATA 56,32
01160:  DATA 20,44
01162:  DATA 41,54
01164:  DATA 41,09
01166:  DATA 55,73
01168:  DATA 65,64
0116A:  DATA 09,09
0116C:  DATA 30,78
0116E:  DATA 25,30
01170:  DATA 38,4C
01172:  DATA 58,0D
01174:  DATA 0A,00
01176:  DATA 09,09
01178:  DATA 09,55
0117A:  DATA 6E,63
0117C:  DATA 6F,70
0117E:  DATA 79,65
01180:  DATA 64,09
01182:  DATA 30,78
01184:  DATA 25,30
01186:  DATA 38,4C
01188:  DATA 58,0D
0118A:  DATA 0A,00
0118C:  DATA 09,09
0118E:  DATA 09,52
01190:  DATA 65,73
01192:  DATA 65,72
01194:  DATA 76,65
01196:  DATA 09,09
01198:  DATA 30,78
0119A:  DATA 25,30
0119C:  DATA 32,58
0119E:  DATA 2F,20
011A0:  DATA 30,78
011A2:  DATA 25,30
011A4:  DATA 32,58
011A6:  DATA 0D,0A
011A8:  DATA 00,00
011AA:  DATA 09,3D
011AC:  DATA 3D,3D
011AE:  DATA 3D,3D
011B0:  DATA 3D,3D
011B2:  DATA 3D,3D
011B4:  DATA 3D,3D
011B6:  DATA 3D,3D
011B8:  DATA 3D,3D
011BA:  DATA 3D,3D
011BC:  DATA 3D,3D
011BE:  DATA 3D,3D
011C0:  DATA 3D,3D
011C2:  DATA 3D,3D
011C4:  DATA 3D,3D
011C6:  DATA 3D,3D
011C8:  DATA 3D,3D
011CA:  DATA 3D,3D
011CC:  DATA 3D,3D
011CE:  DATA 3D,3D
011D0:  DATA 3D,3D
011D2:  DATA 3D,3D
011D4:  DATA 3D,3D
011D6:  DATA 3D,3D
011D8:  DATA 3D,3D
011DA:  DATA 3D,3D
011DC:  DATA 3D,0D
011DE:  DATA 0A,00
011E0:  DATA 43,52
011E2:  DATA 43,20
011E4:  DATA 76,65
011E6:  DATA 72,69
011E8:  DATA 66,69
011EA:  DATA 63,61
011EC:  DATA 74,69
011EE:  DATA 6F,6E
011F0:  DATA 20,70
011F2:  DATA 61,73
011F4:  DATA 73,65
011F6:  DATA 64,20
011F8:  DATA 6F,6E
011FA:  DATA 20,61
011FC:  DATA 74,74
011FE:  DATA 65,6D
01200:  DATA 70,74
01202:  DATA 20,25
01204:  DATA 64,0D
01206:  DATA 0A,00
01208:  DATA 45,72
0120A:  DATA 72,6F
0120C:  DATA 72,3A
0120E:  DATA 20,43
01210:  DATA 52,43
01212:  DATA 20,76
01214:  DATA 65,72
01216:  DATA 69,66
01218:  DATA 69,63
0121A:  DATA 61,74
0121C:  DATA 69,6F
0121E:  DATA 6E,20
01220:  DATA 66,61
01222:  DATA 69,6C
01224:  DATA 65,64
01226:  DATA 20,61
01228:  DATA 66,74
0122A:  DATA 65,72
0122C:  DATA 20,25
0122E:  DATA 64,20
01230:  DATA 61,74
01232:  DATA 74,65
01234:  DATA 6D,70
01236:  DATA 74,73
01238:  DATA 0D,0A
0123A:  DATA 00,00
0123C:  DATA 0D,0A
0123E:  DATA 5F,5F
01240:  DATA 5F,5F
01242:  DATA 5F,5F
01244:  DATA 5F,5F
01246:  DATA 5F,5F
01248:  DATA 5F,5F
0124A:  DATA 5F,5F
0124C:  DATA 5F,5F
0124E:  DATA 5F,5F
01250:  DATA 5F,5F
01252:  DATA 5F,5F
01254:  DATA 5F,5F
01256:  DATA 5F,5F
01258:  DATA 5F,5F
0125A:  DATA 5F,5F
0125C:  DATA 0D,0A
0125E:  DATA 5F,5F
01260:  DATA 5F,5F
01262:  DATA 5F,53
01264:  DATA 74,61
01266:  DATA 72,74
01268:  DATA 20,65
0126A:  DATA 78,65
0126C:  DATA 63,75
0126E:  DATA 74,65
01270:  DATA 5F,6D
01272:  DATA 69,73
01274:  DATA 73,69
01276:  DATA 6F,6E
01278:  DATA 5F,5F
0127A:  DATA 5F,5F
0127C:  DATA 5F,0D
0127E:  DATA 0A,0D
01280:  DATA 0A,00
01282:  DATA 43,6F
01284:  DATA 6D,6D
01286:  DATA 61,6E
01288:  DATA 64,20
0128A:  DATA 49,44
0128C:  DATA 3A,20
0128E:  DATA 25,58
01290:  DATA 0D,0A
01292:  DATA 0D,0A
01294:  DATA 00,00
01296:  DATA 09,09
01298:  DATA 2D,3E
0129A:  DATA 20,47
0129C:  DATA 65,74
0129E:  DATA 20,74
012A0:  DATA 69,6D
012A2:  DATA 65,20
012A4:  DATA 74,6F
012A6:  DATA 20,25
012A8:  DATA 6C,75
012AA:  DATA 20,64
012AC:  DATA 61,79
012AE:  DATA 73,2C
012B0:  DATA 20,25
012B2:  DATA 30,32
012B4:  DATA 75,3A
012B6:  DATA 25,30
012B8:  DATA 32,75
012BA:  DATA 3A,25
012BC:  DATA 30,32
012BE:  DATA 75,0D
012C0:  DATA 0A,00
012C2:  DATA 09,09
012C4:  DATA 2D,3E
012C6:  DATA 20,49
012C8:  DATA 6E,76
012CA:  DATA 61,6C
012CC:  DATA 69,64
012CE:  DATA 20,43
012D0:  DATA 4D,44
012D2:  DATA 20,49
012D4:  DATA 44,21
012D6:  DATA 0D,0A
012D8:  DATA 00,00
012DA:  DATA 0D,0A
012DC:  DATA 5F,5F
012DE:  DATA 5F,5F
012E0:  DATA 5F,5F
012E2:  DATA 45,6E
012E4:  DATA 64,20
012E6:  DATA 65,78
012E8:  DATA 65,63
012EA:  DATA 75,74
012EC:  DATA 65,5F
012EE:  DATA 6D,69
012F0:  DATA 73,73
012F2:  DATA 69,6F
012F4:  DATA 6E,5F
012F6:  DATA 5F,5F
012F8:  DATA 5F,5F
012FA:  DATA 5F,0D
012FC:  DATA 0A,5F
012FE:  DATA 5F,5F
01300:  DATA 5F,5F
01302:  DATA 5F,5F
01304:  DATA 5F,5F
01306:  DATA 5F,5F
01308:  DATA 5F,5F
0130A:  DATA 5F,5F
0130C:  DATA 5F,5F
0130E:  DATA 5F,5F
01310:  DATA 5F,5F
01312:  DATA 5F,5F
01314:  DATA 5F,5F
01316:  DATA 5F,5F
01318:  DATA 5F,5F
0131A:  DATA 5F,5F
0131C:  DATA 0D,0A
0131E:  DATA 00,00
01320:  DATA 53,74
01322:  DATA 61,72
01324:  DATA 74,20
01326:  DATA 65,78
01328:  DATA 65,63
0132A:  DATA 75,74
0132C:  DATA 65,5F
0132E:  DATA 63,6F
01330:  DATA 6D,6D
01332:  DATA 61,6E
01334:  DATA 64,0D
01336:  DATA 0A,00
01338:  DATA 09,2D
0133A:  DATA 3E,20
0133C:  DATA 55,70
0133E:  DATA 6C,69
01340:  DATA 6E,6B
01342:  DATA 20,63
01344:  DATA 6F,6D
01346:  DATA 6D,61
01348:  DATA 6E,64
0134A:  DATA 0D,0A
0134C:  DATA 00,00
0134E:  DATA 09,20
01350:  DATA 20,20
01352:  DATA 54,72
01354:  DATA 61,6E
01356:  DATA 73,6D
01358:  DATA 69,74
0135A:  DATA 20,41
0135C:  DATA 63,6B
0135E:  DATA 6E,6F
01360:  DATA 6C,65
01362:  DATA 67,64
01364:  DATA 65,0D
01366:  DATA 0A,00
01368:  DATA 09,2D
0136A:  DATA 3E,20
0136C:  DATA 53,74
0136E:  DATA 61,74
01370:  DATA 75,73
01372:  DATA 20,63
01374:  DATA 68,65
01376:  DATA 63,6B
01378:  DATA 0D,0A
0137A:  DATA 00,00
0137C:  DATA 09,20
0137E:  DATA 20,20
01380:  DATA 54,72
01382:  DATA 61,6E
01384:  DATA 73,6D
01386:  DATA 69,74
01388:  DATA 20,4D
0138A:  DATA 49,53
0138C:  DATA 20,4D
0138E:  DATA 43,55
01390:  DATA 20,53
01392:  DATA 74,61
01394:  DATA 74,75
01396:  DATA 73,0D
01398:  DATA 0A,00
0139A:  DATA 66,69
0139C:  DATA 6E,69
0139E:  DATA 73,68
013A0:  DATA 65,64
013A2:  DATA 20,69
013A4:  DATA 6E,20
013A6:  DATA 73,74
013A8:  DATA 61,74
013AA:  DATA 75,73
013AC:  DATA 5F,63
013AE:  DATA 68,65
013B0:  DATA 63,6B
013B2:  DATA 0D,0A
013B4:  DATA 00,00
013B6:  DATA 09,2D
013B8:  DATA 3E,20
013BA:  DATA 53,4D
013BC:  DATA 46,20
013BE:  DATA 61,76
013C0:  DATA 61,69
013C2:  DATA 6C,61
013C4:  DATA 62,6C
013C6:  DATA 65,20
013C8:  DATA 63,68
013CA:  DATA 65,63
013CC:  DATA 6B,0D
013CE:  DATA 0A,00
013D0:  DATA 09,20
013D2:  DATA 20,20
013D4:  DATA 54,72
013D6:  DATA 61,6E
013D8:  DATA 73,6D
013DA:  DATA 69,74
013DC:  DATA 20,41
013DE:  DATA 63,6B
013E0:  DATA 6E,6F
013E2:  DATA 77,6C
013E4:  DATA 65,64
013E6:  DATA 67,65
013E8:  DATA 6D,65
013EA:  DATA 6E,74
013EC:  DATA 0D,0A
013EE:  DATA 00,00
013F0:  DATA 09,09
013F2:  DATA 2D,3E
013F4:  DATA 20,64
013F6:  DATA 65,6E
013F8:  DATA 69,65
013FA:  DATA 64,0D
013FC:  DATA 0A,00
013FE:  DATA 09,09
01400:  DATA 2D,3E
01402:  DATA 20,61
01404:  DATA 6C,6C
01406:  DATA 6F,77
01408:  DATA 65,64
0140A:  DATA 0D,0A
0140C:  DATA 00,00
0140E:  DATA 09,09
01410:  DATA 2D,3E
01412:  DATA 20,44
01414:  DATA 65,71
01416:  DATA 75,65
01418:  DATA 75,65
0141A:  DATA 64,3A
0141C:  DATA 20,66
0141E:  DATA 75,6E
01420:  DATA 63,3D
01422:  DATA 25,75
01424:  DATA 20,6D
01426:  DATA 69,73
01428:  DATA 73,69
0142A:  DATA 6F,6E
0142C:  DATA 3D,25
0142E:  DATA 75,20
01430:  DATA 73,69
01432:  DATA 7A,65
01434:  DATA 3D,25
01436:  DATA 6C,64
01438:  DATA 20,61
0143A:  DATA 64,64
0143C:  DATA 72,3D
0143E:  DATA 25,6C
01440:  DATA 64,0D
01442:  DATA 0A,00
01444:  DATA 09,09
01446:  DATA 20,20
01448:  DATA 20,55
0144A:  DATA 6E,6B
0144C:  DATA 6E,6F
0144E:  DATA 77,6E
01450:  DATA 20,66
01452:  DATA 75,6E
01454:  DATA 63,5F
01456:  DATA 74,79
01458:  DATA 70,65
0145A:  DATA 3D,25
0145C:  DATA 75,0D
0145E:  DATA 0A,00
01460:  DATA 09,09
01462:  DATA 2D,3E
01464:  DATA 20,43
01466:  DATA 6F,6D
01468:  DATA 70,6C
0146A:  DATA 65,74
0146C:  DATA 65,64
0146E:  DATA 20,25
01470:  DATA 75,20
01472:  DATA 6F,70
01474:  DATA 65,72
01476:  DATA 61,74
01478:  DATA 69,6F
0147A:  DATA 6E,73
0147C:  DATA 0D,0A
0147E:  DATA 00,00
01480:  DATA 09,2D
01482:  DATA 3E,20
01484:  DATA 54,49
01486:  DATA 4D,45
01488:  DATA 20,52
0148A:  DATA 65,63
0148C:  DATA 65,69
0148E:  DATA 76,65
01490:  DATA 0D,0A
01492:  DATA 00,00
01494:  DATA 09,20
01496:  DATA 20,20
01498:  DATA 54,72
0149A:  DATA 61,6E
0149C:  DATA 73,6D
0149E:  DATA 69,74
014A0:  DATA 20,41
014A2:  DATA 63,6B
014A4:  DATA 6E,6F
014A6:  DATA 6C,65
014A8:  DATA 67,64
014AA:  DATA 65,0D
014AC:  DATA 0A,00
014AE:  DATA 09,09
014B0:  DATA 2D,3E
014B2:  DATA 20,53
014B4:  DATA 65,74
014B6:  DATA 20,74
014B8:  DATA 69,6D
014BA:  DATA 65,20
014BC:  DATA 74,6F
014BE:  DATA 20,25
014C0:  DATA 6C,75
014C2:  DATA 20,64
014C4:  DATA 61,79
014C6:  DATA 73,2C
014C8:  DATA 20,25
014CA:  DATA 30,32
014CC:  DATA 75,3A
014CE:  DATA 25,30
014D0:  DATA 32,75
014D2:  DATA 3A,25
014D4:  DATA 30,32
014D6:  DATA 75,0D
014D8:  DATA 0A,00
014DA:  DATA 53,74
014DC:  DATA 61,72
014DE:  DATA 74,20
014E0:  DATA 4D,4F
014E2:  DATA 44,45
014E4:  DATA 20,4D
014E6:  DATA 45,41
014E8:  DATA 53,20
014EA:  DATA 49,56
014EC:  DATA 20,31
014EE:  DATA 20,53
014F0:  DATA 57,45
014F2:  DATA 45,50
014F4:  DATA 0D,0A
014F6:  DATA 00,00
014F8:  DATA 0D,0A
014FA:  DATA 41,44
014FC:  DATA 44,20
014FE:  DATA 53,4D
01500:  DATA 46,20
01502:  DATA 51,55
01504:  DATA 45,55
01506:  DATA 45,0D
01508:  DATA 0A,00
0150A:  DATA 09,4D
0150C:  DATA 69,73
0150E:  DATA 73,69
01510:  DATA 6F,6E
01512:  DATA 20,49
01514:  DATA 44,3A
01516:  DATA 20,20
01518:  DATA 20,25
0151A:  DATA 30,32
0151C:  DATA 58,0D
0151E:  DATA 0A,00
01520:  DATA 09,46
01522:  DATA 75,6E
01524:  DATA 63,74
01526:  DATA 69,6F
01528:  DATA 6E,20
0152A:  DATA 54,79
0152C:  DATA 70,65
0152E:  DATA 3A,25
01530:  DATA 30,32
01532:  DATA 58,0D
01534:  DATA 0A,00
01536:  DATA 09,57
01538:  DATA 72,69
0153A:  DATA 74,65
0153C:  DATA 20,4D
0153E:  DATA 6F,64
01540:  DATA 65,3A
01542:  DATA 20,20
01544:  DATA 20,25
01546:  DATA 30,32
01548:  DATA 58,0D
0154A:  DATA 0A,00
0154C:  DATA 09,53
0154E:  DATA 6F,75
01550:  DATA 72,63
01552:  DATA 65,20
01554:  DATA 54,79
01556:  DATA 70,65
01558:  DATA 3A,20
0155A:  DATA 20,25
0155C:  DATA 30,32
0155E:  DATA 58,0D
01560:  DATA 0A,00
01562:  DATA 09,53
01564:  DATA 74,61
01566:  DATA 72,74
01568:  DATA 20,41
0156A:  DATA 64,64
0156C:  DATA 72,65
0156E:  DATA 73,73
01570:  DATA 3A,25
01572:  DATA 30,34
01574:  DATA 58,0D
01576:  DATA 0A,00
01578:  DATA 09,53
0157A:  DATA 69,7A
0157C:  DATA 65,3A
0157E:  DATA 20,20
01580:  DATA 20,20
01582:  DATA 20,20
01584:  DATA 20,20
01586:  DATA 20,25
01588:  DATA 30,34
0158A:  DATA 58,0D
0158C:  DATA 0A,00
0158E:  DATA 0D,0A
01590:  DATA 41,44
01592:  DATA 44,20
01594:  DATA 53,4D
01596:  DATA 46,20
01598:  DATA 51,55
0159A:  DATA 45,55
0159C:  DATA 45,0D
0159E:  DATA 0A,00
015A0:  DATA 09,4D
015A2:  DATA 69,73
015A4:  DATA 73,69
015A6:  DATA 6F,6E
015A8:  DATA 20,49
015AA:  DATA 44,3A
015AC:  DATA 20,20
015AE:  DATA 20,25
015B0:  DATA 30,32
015B2:  DATA 58,0D
015B4:  DATA 0A,00
015B6:  DATA 09,46
015B8:  DATA 75,6E
015BA:  DATA 63,74
015BC:  DATA 69,6F
015BE:  DATA 6E,20
015C0:  DATA 54,79
015C2:  DATA 70,65
015C4:  DATA 3A,25
015C6:  DATA 30,32
015C8:  DATA 58,0D
015CA:  DATA 0A,00
015CC:  DATA 09,57
015CE:  DATA 72,69
015D0:  DATA 74,65
015D2:  DATA 20,4D
015D4:  DATA 6F,64
015D6:  DATA 65,3A
015D8:  DATA 20,20
015DA:  DATA 20,25
015DC:  DATA 30,32
015DE:  DATA 58,0D
015E0:  DATA 0A,00
015E2:  DATA 09,53
015E4:  DATA 6F,75
015E6:  DATA 72,63
015E8:  DATA 65,20
015EA:  DATA 54,79
015EC:  DATA 70,65
015EE:  DATA 3A,20
015F0:  DATA 20,25
015F2:  DATA 30,32
015F4:  DATA 58,0D
015F6:  DATA 0A,00
015F8:  DATA 09,53
015FA:  DATA 74,61
015FC:  DATA 72,74
015FE:  DATA 20,41
01600:  DATA 64,64
01602:  DATA 72,65
01604:  DATA 73,73
01606:  DATA 3A,25
01608:  DATA 30,34
0160A:  DATA 58,0D
0160C:  DATA 0A,00
0160E:  DATA 09,53
01610:  DATA 69,7A
01612:  DATA 65,3A
01614:  DATA 20,20
01616:  DATA 20,20
01618:  DATA 20,20
0161A:  DATA 20,20
0161C:  DATA 20,25
0161E:  DATA 30,34
01620:  DATA 58,0D
01622:  DATA 0A,00
01624:  DATA 53,74
01626:  DATA 61,72
01628:  DATA 74,20
0162A:  DATA 4D,4F
0162C:  DATA 44,45
0162E:  DATA 20,4D
01630:  DATA 45,41
01632:  DATA 53,20
01634:  DATA 49,56
01636:  DATA 20,50
01638:  DATA 4F,52
0163A:  DATA 54,31
0163C:  DATA 0D,0A
0163E:  DATA 00,00
01640:  DATA 0D,0A
01642:  DATA 41,44
01644:  DATA 44,20
01646:  DATA 53,4D
01648:  DATA 46,20
0164A:  DATA 51,55
0164C:  DATA 45,55
0164E:  DATA 45,0D
01650:  DATA 0A,00
01652:  DATA 09,4D
01654:  DATA 69,73
01656:  DATA 73,69
01658:  DATA 6F,6E
0165A:  DATA 20,49
0165C:  DATA 44,3A
0165E:  DATA 20,20
01660:  DATA 20,25
01662:  DATA 30,32
01664:  DATA 58,0D
01666:  DATA 0A,00
01668:  DATA 09,46
0166A:  DATA 75,6E
0166C:  DATA 63,74
0166E:  DATA 69,6F
01670:  DATA 6E,20
01672:  DATA 54,79
01674:  DATA 70,65
01676:  DATA 3A,25
01678:  DATA 30,32
0167A:  DATA 58,0D
0167C:  DATA 0A,00
0167E:  DATA 09,57
01680:  DATA 72,69
01682:  DATA 74,65
01684:  DATA 20,4D
01686:  DATA 6F,64
01688:  DATA 65,3A
0168A:  DATA 20,20
0168C:  DATA 20,25
0168E:  DATA 30,32
01690:  DATA 58,0D
01692:  DATA 0A,00
01694:  DATA 09,53
01696:  DATA 6F,75
01698:  DATA 72,63
0169A:  DATA 65,20
0169C:  DATA 54,79
0169E:  DATA 70,65
016A0:  DATA 3A,20
016A2:  DATA 20,25
016A4:  DATA 30,32
016A6:  DATA 58,0D
016A8:  DATA 0A,00
016AA:  DATA 09,53
016AC:  DATA 74,61
016AE:  DATA 72,74
016B0:  DATA 20,41
016B2:  DATA 64,64
016B4:  DATA 72,65
016B6:  DATA 73,73
016B8:  DATA 3A,25
016BA:  DATA 30,34
016BC:  DATA 58,0D
016BE:  DATA 0A,00
016C0:  DATA 09,53
016C2:  DATA 69,7A
016C4:  DATA 65,3A
016C6:  DATA 20,20
016C8:  DATA 20,20
016CA:  DATA 20,20
016CC:  DATA 20,20
016CE:  DATA 20,25
016D0:  DATA 30,34
016D2:  DATA 58,0D
016D4:  DATA 0A,00
016D6:  DATA 53,74
016D8:  DATA 61,72
016DA:  DATA 74,20
016DC:  DATA 4D,4F
016DE:  DATA 44,45
016E0:  DATA 20,4D
016E2:  DATA 45,41
016E4:  DATA 53,20
016E6:  DATA 49,56
016E8:  DATA 20,50
016EA:  DATA 4F,52
016EC:  DATA 54,32
016EE:  DATA 0D,0A
016F0:  DATA 00,00
016F2:  DATA 0D,0A
016F4:  DATA 41,44
016F6:  DATA 44,20
016F8:  DATA 53,4D
016FA:  DATA 46,20
016FC:  DATA 51,55
016FE:  DATA 45,55
01700:  DATA 45,0D
01702:  DATA 0A,00
01704:  DATA 09,4D
01706:  DATA 69,73
01708:  DATA 73,69
0170A:  DATA 6F,6E
0170C:  DATA 20,49
0170E:  DATA 44,3A
01710:  DATA 20,20
01712:  DATA 20,25
01714:  DATA 30,32
01716:  DATA 58,0D
01718:  DATA 0A,00
0171A:  DATA 09,46
0171C:  DATA 75,6E
0171E:  DATA 63,74
01720:  DATA 69,6F
01722:  DATA 6E,20
01724:  DATA 54,79
01726:  DATA 70,65
01728:  DATA 3A,25
0172A:  DATA 30,32
0172C:  DATA 58,0D
0172E:  DATA 0A,00
01730:  DATA 09,57
01732:  DATA 72,69
01734:  DATA 74,65
01736:  DATA 20,4D
01738:  DATA 6F,64
0173A:  DATA 65,3A
0173C:  DATA 20,20
0173E:  DATA 20,25
01740:  DATA 30,32
01742:  DATA 58,0D
01744:  DATA 0A,00
01746:  DATA 09,53
01748:  DATA 6F,75
0174A:  DATA 72,63
0174C:  DATA 65,20
0174E:  DATA 54,79
01750:  DATA 70,65
01752:  DATA 3A,20
01754:  DATA 20,25
01756:  DATA 30,32
01758:  DATA 58,0D
0175A:  DATA 0A,00
0175C:  DATA 09,53
0175E:  DATA 74,61
01760:  DATA 72,74
01762:  DATA 20,41
01764:  DATA 64,64
01766:  DATA 72,65
01768:  DATA 73,73
0176A:  DATA 3A,25
0176C:  DATA 30,34
0176E:  DATA 58,0D
01770:  DATA 0A,00
01772:  DATA 09,53
01774:  DATA 69,7A
01776:  DATA 65,3A
01778:  DATA 20,20
0177A:  DATA 20,20
0177C:  DATA 20,20
0177E:  DATA 20,20
01780:  DATA 20,25
01782:  DATA 30,34
01784:  DATA 58,0D
01786:  DATA 0A,00
01788:  DATA 53,74
0178A:  DATA 61,72
0178C:  DATA 74,20
0178E:  DATA 4D,4F
01790:  DATA 44,45
01792:  DATA 20,4D
01794:  DATA 45,41
01796:  DATA 53,20
01798:  DATA 49,56
0179A:  DATA 0D,0A
0179C:  DATA 00,00
0179E:  DATA 0D,0A
017A0:  DATA 41,44
017A2:  DATA 44,20
017A4:  DATA 53,4D
017A6:  DATA 46,20
017A8:  DATA 51,55
017AA:  DATA 45,55
017AC:  DATA 45,0D
017AE:  DATA 0A,00
017B0:  DATA 09,4D
017B2:  DATA 69,73
017B4:  DATA 73,69
017B6:  DATA 6F,6E
017B8:  DATA 20,49
017BA:  DATA 44,3A
017BC:  DATA 20,20
017BE:  DATA 20,25
017C0:  DATA 30,32
017C2:  DATA 58,0D
017C4:  DATA 0A,00
017C6:  DATA 09,46
017C8:  DATA 75,6E
017CA:  DATA 63,74
017CC:  DATA 69,6F
017CE:  DATA 6E,20
017D0:  DATA 54,79
017D2:  DATA 70,65
017D4:  DATA 3A,25
017D6:  DATA 30,32
017D8:  DATA 58,0D
017DA:  DATA 0A,00
017DC:  DATA 09,57
017DE:  DATA 72,69
017E0:  DATA 74,65
017E2:  DATA 20,4D
017E4:  DATA 6F,64
017E6:  DATA 65,3A
017E8:  DATA 20,20
017EA:  DATA 20,25
017EC:  DATA 30,32
017EE:  DATA 58,0D
017F0:  DATA 0A,00
017F2:  DATA 09,53
017F4:  DATA 6F,75
017F6:  DATA 72,63
017F8:  DATA 65,20
017FA:  DATA 54,79
017FC:  DATA 70,65
017FE:  DATA 3A,20
01800:  DATA 20,25
01802:  DATA 30,32
01804:  DATA 58,0D
01806:  DATA 0A,00
01808:  DATA 09,53
0180A:  DATA 74,61
0180C:  DATA 72,74
0180E:  DATA 20,41
01810:  DATA 64,64
01812:  DATA 72,65
01814:  DATA 73,73
01816:  DATA 3A,25
01818:  DATA 30,34
0181A:  DATA 58,0D
0181C:  DATA 0A,00
0181E:  DATA 09,53
01820:  DATA 69,7A
01822:  DATA 65,3A
01824:  DATA 20,20
01826:  DATA 20,20
01828:  DATA 20,20
0182A:  DATA 20,20
0182C:  DATA 20,25
0182E:  DATA 30,34
01830:  DATA 58,0D
01832:  DATA 0A,00
01834:  DATA 0D,0A
01836:  DATA 41,44
01838:  DATA 44,20
0183A:  DATA 53,4D
0183C:  DATA 46,20
0183E:  DATA 51,55
01840:  DATA 45,55
01842:  DATA 45,0D
01844:  DATA 0A,00
01846:  DATA 09,4D
01848:  DATA 69,73
0184A:  DATA 73,69
0184C:  DATA 6F,6E
0184E:  DATA 20,49
01850:  DATA 44,3A
01852:  DATA 20,20
01854:  DATA 20,25
01856:  DATA 30,32
01858:  DATA 58,0D
0185A:  DATA 0A,00
0185C:  DATA 09,46
0185E:  DATA 75,6E
01860:  DATA 63,74
01862:  DATA 69,6F
01864:  DATA 6E,20
01866:  DATA 54,79
01868:  DATA 70,65
0186A:  DATA 3A,25
0186C:  DATA 30,32
0186E:  DATA 58,0D
01870:  DATA 0A,00
01872:  DATA 09,57
01874:  DATA 72,69
01876:  DATA 74,65
01878:  DATA 20,4D
0187A:  DATA 6F,64
0187C:  DATA 65,3A
0187E:  DATA 20,20
01880:  DATA 20,25
01882:  DATA 30,32
01884:  DATA 58,0D
01886:  DATA 0A,00
01888:  DATA 09,53
0188A:  DATA 6F,75
0188C:  DATA 72,63
0188E:  DATA 65,20
01890:  DATA 54,79
01892:  DATA 70,65
01894:  DATA 3A,20
01896:  DATA 20,25
01898:  DATA 30,32
0189A:  DATA 58,0D
0189C:  DATA 0A,00
0189E:  DATA 09,53
018A0:  DATA 74,61
018A2:  DATA 72,74
018A4:  DATA 20,41
018A6:  DATA 64,64
018A8:  DATA 72,65
018AA:  DATA 73,73
018AC:  DATA 3A,25
018AE:  DATA 30,34
018B0:  DATA 58,0D
018B2:  DATA 0A,00
018B4:  DATA 09,53
018B6:  DATA 69,7A
018B8:  DATA 65,3A
018BA:  DATA 20,20
018BC:  DATA 20,20
018BE:  DATA 20,20
018C0:  DATA 20,20
018C2:  DATA 20,25
018C4:  DATA 30,34
018C6:  DATA 58,0D
018C8:  DATA 0A,00
018CA:  DATA 0D,0A
018CC:  DATA 41,44
018CE:  DATA 44,20
018D0:  DATA 53,4D
018D2:  DATA 46,20
018D4:  DATA 51,55
018D6:  DATA 45,55
018D8:  DATA 45,0D
018DA:  DATA 0A,00
018DC:  DATA 09,4D
018DE:  DATA 69,73
018E0:  DATA 73,69
018E2:  DATA 6F,6E
018E4:  DATA 20,49
018E6:  DATA 44,3A
018E8:  DATA 20,20
018EA:  DATA 20,25
018EC:  DATA 30,32
018EE:  DATA 58,0D
018F0:  DATA 0A,00
018F2:  DATA 09,46
018F4:  DATA 75,6E
018F6:  DATA 63,74
018F8:  DATA 69,6F
018FA:  DATA 6E,20
018FC:  DATA 54,79
018FE:  DATA 70,65
01900:  DATA 3A,25
01902:  DATA 30,32
01904:  DATA 58,0D
01906:  DATA 0A,00
01908:  DATA 09,57
0190A:  DATA 72,69
0190C:  DATA 74,65
0190E:  DATA 20,4D
01910:  DATA 6F,64
01912:  DATA 65,3A
01914:  DATA 20,20
01916:  DATA 20,25
01918:  DATA 30,32
0191A:  DATA 58,0D
0191C:  DATA 0A,00
0191E:  DATA 09,53
01920:  DATA 6F,75
01922:  DATA 72,63
01924:  DATA 65,20
01926:  DATA 54,79
01928:  DATA 70,65
0192A:  DATA 3A,20
0192C:  DATA 20,25
0192E:  DATA 30,32
01930:  DATA 58,0D
01932:  DATA 0A,00
01934:  DATA 09,53
01936:  DATA 74,61
01938:  DATA 72,74
0193A:  DATA 20,41
0193C:  DATA 64,64
0193E:  DATA 72,65
01940:  DATA 73,73
01942:  DATA 3A,25
01944:  DATA 30,34
01946:  DATA 58,0D
01948:  DATA 0A,00
0194A:  DATA 09,53
0194C:  DATA 69,7A
0194E:  DATA 65,3A
01950:  DATA 20,20
01952:  DATA 20,20
01954:  DATA 20,20
01956:  DATA 20,20
01958:  DATA 20,25
0195A:  DATA 30,34
0195C:  DATA 58,0D
0195E:  DATA 0A,00
01960:  DATA 45,6E
01962:  DATA 64,20
01964:  DATA 4D,4F
01966:  DATA 44,45
01968:  DATA 20,4D
0196A:  DATA 45,41
0196C:  DATA 53,20
0196E:  DATA 49,56
01970:  DATA 20,6D
01972:  DATA 69,73
01974:  DATA 73,69
01976:  DATA 6F,6E
01978:  DATA 0D,0A
0197A:  DATA 00,00
0197C:  DATA 53,74
0197E:  DATA 61,72
01980:  DATA 74,20
01982:  DATA 4D,4F
01984:  DATA 44,45
01986:  DATA 20,49
01988:  DATA 56,20
0198A:  DATA 44,45
0198C:  DATA 42,55
0198E:  DATA 47,0D
01990:  DATA 0A,00
01992:  DATA 09,49
01994:  DATA 44,3A
01996:  DATA 20,25
01998:  DATA 30,32
0199A:  DATA 58,0D
0199C:  DATA 0A,00
0199E:  DATA 09,53
019A0:  DATA 6C,65
019A2:  DATA 65,70
019A4:  DATA 54,69
019A6:  DATA 6D,65
019A8:  DATA 3A,20
019AA:  DATA 20,20
019AC:  DATA 20,20
019AE:  DATA 20,20
019B0:  DATA 20,30
019B2:  DATA 78,25
019B4:  DATA 30,34
019B6:  DATA 58,0D
019B8:  DATA 0A,00
019BA:  DATA 09,4C
019BC:  DATA 6F,67
019BE:  DATA 43,75
019C0:  DATA 72,72
019C2:  DATA 54,68
019C4:  DATA 72,65
019C6:  DATA 73,68
019C8:  DATA 6F,6C
019CA:  DATA 64,3A
019CC:  DATA 20,30
019CE:  DATA 78,25
019D0:  DATA 30,34
019D2:  DATA 58,0D
019D4:  DATA 0A,00
019D6:  DATA 09,50
019D8:  DATA 44,54
019DA:  DATA 68,72
019DC:  DATA 65,73
019DE:  DATA 68,6F
019E0:  DATA 6C,64
019E2:  DATA 3A,20
019E4:  DATA 20,20
019E6:  DATA 20,20
019E8:  DATA 20,30
019EA:  DATA 78,25
019EC:  DATA 30,34
019EE:  DATA 58,0D
019F0:  DATA 0A,00
019F2:  DATA 09,43
019F4:  DATA 75,72
019F6:  DATA 72,65
019F8:  DATA 6E,74
019FA:  DATA 4C,69
019FC:  DATA 6D,69
019FE:  DATA 74,3A
01A00:  DATA 20,20
01A02:  DATA 20,20
01A04:  DATA 20,30
01A06:  DATA 78,25
01A08:  DATA 30,34
01A0A:  DATA 58,0D
01A0C:  DATA 0A,00
01A0E:  DATA 09,4D
01A10:  DATA 65,61
01A12:  DATA 73,75
01A14:  DATA 72,65
01A16:  DATA 6D,65
01A18:  DATA 6E,74
01A1A:  DATA 54,69
01A1C:  DATA 6D,65
01A1E:  DATA 3A,20
01A20:  DATA 20,30
01A22:  DATA 78,25
01A24:  DATA 30,34
01A26:  DATA 58,0D
01A28:  DATA 0A,00
01A2A:  DATA 5B,49
01A2C:  DATA 56,44
01A2E:  DATA 42,47
01A30:  DATA 5D,20
01A32:  DATA 45,6E
01A34:  DATA 64,20
01A36:  DATA 4D,4F
01A38:  DATA 44,45
01A3A:  DATA 20,49
01A3C:  DATA 56,20
01A3E:  DATA 44,45
01A40:  DATA 42,55
01A42:  DATA 47,0D
01A44:  DATA 0A,00
01A46:  DATA 74,65
01A48:  DATA 6D,70
01A4A:  DATA 5F,74
01A4C:  DATA 6F,70
01A4E:  DATA 2C,20
01A50:  DATA 74,65
01A52:  DATA 6D,70
01A54:  DATA 5F,62
01A56:  DATA 6F,74
01A58:  DATA 2C,20
01A5A:  DATA 74,65
01A5C:  DATA 6D,70
01A5E:  DATA 5F,6D
01A60:  DATA 69,73
01A62:  DATA 37,2C
01A64:  DATA 20,70
01A66:  DATA 64,0D
01A68:  DATA 0A,00
01A6A:  DATA 4D,45
01A6C:  DATA 41,53
01A6E:  DATA 20,49
01A70:  DATA 56,20
01A72:  DATA 43,6F
01A74:  DATA 6D,6D
01A76:  DATA 61,6E
01A78:  DATA 64,20
01A7A:  DATA 50,61
01A7C:  DATA 72,61
01A7E:  DATA 6D,65
01A80:  DATA 74,65
01A82:  DATA 72,73
01A84:  DATA 3A,0D
01A86:  DATA 0A,00
01A88:  DATA 09,49
01A8A:  DATA 44,3A
01A8C:  DATA 20,25
01A8E:  DATA 30,32
01A90:  DATA 58,0D
01A92:  DATA 0A,00
01A94:  DATA 09,53
01A96:  DATA 77,65
01A98:  DATA 65,70
01A9A:  DATA 49,6E
01A9C:  DATA 74,65
01A9E:  DATA 72,76
01AA0:  DATA 61,6C
01AA2:  DATA 20,20
01AA4:  DATA 20,3A
01AA6:  DATA 25,6C
01AA8:  DATA 75,5B
01AAA:  DATA 6D,73
01AAC:  DATA 5D,0D
01AAE:  DATA 0A,00
01AB0:  DATA 09,50
01AB2:  DATA 44,20
01AB4:  DATA 54,68
01AB6:  DATA 72,65
01AB8:  DATA 73,68
01ABA:  DATA 6F,6C
01ABC:  DATA 64,20
01ABE:  DATA 20,20
01AC0:  DATA 20,3A
01AC2:  DATA 25,6C
01AC4:  DATA 75,5B
01AC6:  DATA 57,2F
01AC8:  DATA 6D,32
01ACA:  DATA 5D,0D
01ACC:  DATA 0A,00
01ACE:  DATA 09,53
01AD0:  DATA 77,65
01AD2:  DATA 65,70
01AD4:  DATA 4C,69
01AD6:  DATA 6D,69
01AD8:  DATA 74,20
01ADA:  DATA 20,20
01ADC:  DATA 20,20
01ADE:  DATA 20,3A
01AE0:  DATA 25,6C
01AE2:  DATA 75,5B
01AE4:  DATA 6D,41
01AE6:  DATA 5D,0D
01AE8:  DATA 0A,00
01AEA:  DATA 09,4C
01AEC:  DATA 6F,67
01AEE:  DATA 54,68
01AF0:  DATA 72,65
01AF2:  DATA 73,68
01AF4:  DATA 6F,6C
01AF6:  DATA 64,20
01AF8:  DATA 20,20
01AFA:  DATA 20,3A
01AFC:  DATA 25,6C
01AFE:  DATA 75,5B
01B00:  DATA 6D,41
01B02:  DATA 5D,0D
01B04:  DATA 0A,00
01B06:  DATA 09,4D
01B08:  DATA 65,61
01B0A:  DATA 73,75
01B0C:  DATA 72,65
01B0E:  DATA 6D,65
01B10:  DATA 6E,74
01B12:  DATA 54,69
01B14:  DATA 6D,65
01B16:  DATA 20,3A
01B18:  DATA 25,6C
01B1A:  DATA 75,5B
01B1C:  DATA 73,5D
01B1E:  DATA 0D,0A
01B20:  DATA 0D,0A
01B22:  DATA 00,00
01B24:  DATA 53,74
01B26:  DATA 61,72
01B28:  DATA 74,20
01B2A:  DATA 4D,4F
01B2C:  DATA 44,45
01B2E:  DATA 20,4D
01B30:  DATA 45,41
01B32:  DATA 53,20
01B34:  DATA 50,44
01B36:  DATA 0D,0A
01B38:  DATA 00,00
01B3A:  DATA 45,6E
01B3C:  DATA 64,20
01B3E:  DATA 4D,4F
01B40:  DATA 44,45
01B42:  DATA 20,4D
01B44:  DATA 45,41
01B46:  DATA 53,20
01B48:  DATA 50,44
01B4A:  DATA 0D,0A
01B4C:  DATA 00,00
01B4E:  DATA 53,74
01B50:  DATA 61,72
01B52:  DATA 74,20
01B54:  DATA 46,6C
01B56:  DATA 61,73
01B58:  DATA 68,20
01B5A:  DATA 45,72
01B5C:  DATA 61,73
01B5E:  DATA 65,20
01B60:  DATA 41,6C
01B62:  DATA 6C,0D
01B64:  DATA 0A,00
01B66:  DATA 45,6E
01B68:  DATA 64,20
01B6A:  DATA 46,6C
01B6C:  DATA 61,73
01B6E:  DATA 68,20
01B70:  DATA 45,72
01B72:  DATA 61,73
01B74:  DATA 65,20
01B76:  DATA 41,6C
01B78:  DATA 6C,0D
01B7A:  DATA 0A,00
01B7C:  DATA 53,74
01B7E:  DATA 61,72
01B80:  DATA 74,20
01B82:  DATA 46,6C
01B84:  DATA 61,73
01B86:  DATA 68,20
01B88:  DATA 45,72
01B8A:  DATA 61,73
01B8C:  DATA 65,20
01B8E:  DATA 31,20
01B90:  DATA 53,65
01B92:  DATA 63,74
01B94:  DATA 6F,72
01B96:  DATA 0D,0A
01B98:  DATA 00,00
01B9A:  DATA 09,53
01B9C:  DATA 65,63
01B9E:  DATA 74,6F
01BA0:  DATA 72,20
01BA2:  DATA 41,64
01BA4:  DATA 64,72
01BA6:  DATA 65,73
01BA8:  DATA 73,3A
01BAA:  DATA 20,30
01BAC:  DATA 78,25
01BAE:  DATA 30,38
01BB0:  DATA 4C,58
01BB2:  DATA 0D,0A
01BB4:  DATA 00,00
01BB6:  DATA 45,6E
01BB8:  DATA 64,20
01BBA:  DATA 46,6C
01BBC:  DATA 61,73
01BBE:  DATA 68,20
01BC0:  DATA 45,72
01BC2:  DATA 61,73
01BC4:  DATA 65,20
01BC6:  DATA 31,20
01BC8:  DATA 53,65
01BCA:  DATA 63,74
01BCC:  DATA 6F,72
01BCE:  DATA 0D,0A
01BD0:  DATA 00,00
01BD2:  DATA 53,74
01BD4:  DATA 61,72
01BD6:  DATA 74,20
01BD8:  DATA 46,6C
01BDA:  DATA 61,73
01BDC:  DATA 68,20
01BDE:  DATA 45,72
01BE0:  DATA 61,73
01BE2:  DATA 65,20
01BE4:  DATA 34,6B
01BE6:  DATA 42,79
01BE8:  DATA 74,65
01BEA:  DATA 20,53
01BEC:  DATA 75,62
01BEE:  DATA 73,65
01BF0:  DATA 63,74
01BF2:  DATA 6F,72
01BF4:  DATA 0D,0A
01BF6:  DATA 00,00
01BF8:  DATA 09,53
01BFA:  DATA 75,62
01BFC:  DATA 73,65
01BFE:  DATA 63,74
01C00:  DATA 6F,72
01C02:  DATA 20,41
01C04:  DATA 64,64
01C06:  DATA 72,65
01C08:  DATA 73,73
01C0A:  DATA 3A,20
01C0C:  DATA 30,78
01C0E:  DATA 25,30
01C10:  DATA 38,4C
01C12:  DATA 58,0D
01C14:  DATA 0A,00
01C16:  DATA 45,6E
01C18:  DATA 64,20
01C1A:  DATA 46,6C
01C1C:  DATA 61,73
01C1E:  DATA 68,20
01C20:  DATA 45,72
01C22:  DATA 61,73
01C24:  DATA 65,20
01C26:  DATA 34,6B
01C28:  DATA 42,79
01C2A:  DATA 74,65
01C2C:  DATA 20,53
01C2E:  DATA 75,62
01C30:  DATA 73,65
01C32:  DATA 63,74
01C34:  DATA 6F,72
01C36:  DATA 0D,0A
01C38:  DATA 00,00
01C3A:  DATA 53,74
01C3C:  DATA 61,72
01C3E:  DATA 74,20
01C40:  DATA 46,6C
01C42:  DATA 61,73
01C44:  DATA 68,20
01C46:  DATA 45,72
01C48:  DATA 61,73
01C4A:  DATA 65,20
01C4C:  DATA 36,34
01C4E:  DATA 6B,42
01C50:  DATA 79,74
01C52:  DATA 65,20
01C54:  DATA 53,75
01C56:  DATA 62,73
01C58:  DATA 65,63
01C5A:  DATA 74,6F
01C5C:  DATA 72,0D
01C5E:  DATA 0A,00
01C60:  DATA 09,53
01C62:  DATA 75,62
01C64:  DATA 73,65
01C66:  DATA 63,74
01C68:  DATA 6F,72
01C6A:  DATA 20,41
01C6C:  DATA 64,64
01C6E:  DATA 72,65
01C70:  DATA 73,73
01C72:  DATA 3A,20
01C74:  DATA 30,78
01C76:  DATA 25,30
01C78:  DATA 38,4C
01C7A:  DATA 58,0D
01C7C:  DATA 0A,00
01C7E:  DATA 45,6E
01C80:  DATA 64,20
01C82:  DATA 46,6C
01C84:  DATA 61,73
01C86:  DATA 68,20
01C88:  DATA 45,72
01C8A:  DATA 61,73
01C8C:  DATA 65,20
01C8E:  DATA 36,34
01C90:  DATA 6B,42
01C92:  DATA 79,74
01C94:  DATA 65,20
01C96:  DATA 53,75
01C98:  DATA 62,73
01C9A:  DATA 65,63
01C9C:  DATA 74,6F
01C9E:  DATA 72,0D
01CA0:  DATA 0A,00
01CA2:  DATA 53,74
01CA4:  DATA 61,72
01CA6:  DATA 74,20
01CA8:  DATA 46,6C
01CAA:  DATA 61,73
01CAC:  DATA 68,20
01CAE:  DATA 57,72
01CB0:  DATA 69,74
01CB2:  DATA 65,20
01CB4:  DATA 44,65
01CB6:  DATA 6D,6F
01CB8:  DATA 0D,0A
01CBA:  DATA 00,00
01CBC:  DATA 09,4D
01CBE:  DATA 4F,44
01CC0:  DATA 45,20
01CC2:  DATA 20,20
01CC4:  DATA 20,20
01CC6:  DATA 3A,20
01CC8:  DATA 25,30
01CCA:  DATA 32,58
01CCC:  DATA 0D,0A
01CCE:  DATA 00,00
01CD0:  DATA 09,41
01CD2:  DATA 64,64
01CD4:  DATA 72,65
01CD6:  DATA 73,73
01CD8:  DATA 20,20
01CDA:  DATA 3A,20
01CDC:  DATA 30,78
01CDE:  DATA 25,30
01CE0:  DATA 38,4C
01CE2:  DATA 58,0D
01CE4:  DATA 0A,00
01CE6:  DATA 09,50
01CE8:  DATA 61,63
01CEA:  DATA 6B,65
01CEC:  DATA 74,4E
01CEE:  DATA 75,6D
01CF0:  DATA 3A,20
01CF2:  DATA 30,78
01CF4:  DATA 25,30
01CF6:  DATA 34,4C
01CF8:  DATA 58,0D
01CFA:  DATA 0A,00
01CFC:  DATA 57,72
01CFE:  DATA 69,74
01D00:  DATA 65,20
01D02:  DATA 44,61
01D04:  DATA 74,61
01D06:  DATA 0D,0A
01D08:  DATA 00,00
01D0A:  DATA 0D,0A
01D0C:  DATA 5B,46
01D0E:  DATA 4C,41
01D10:  DATA 53,48
01D12:  DATA 5D,20
01D14:  DATA 57,72
01D16:  DATA 69,74
01D18:  DATA 65,20
01D1A:  DATA 61,64
01D1C:  DATA 64,72
01D1E:  DATA 65,73
01D20:  DATA 73,20
01D22:  DATA 30,78
01D24:  DATA 25,30
01D26:  DATA 38,4C
01D28:  DATA 58,20
01D2A:  DATA 65,78
01D2C:  DATA 63,65
01D2E:  DATA 65,64
01D30:  DATA 73,20
01D32:  DATA 64,65
01D34:  DATA 76,69
01D36:  DATA 63,65
01D38:  DATA 20,65
01D3A:  DATA 6E,64
01D3C:  DATA 20,30
01D3E:  DATA 78,25
01D40:  DATA 30,38
01D42:  DATA 4C,58
01D44:  DATA 20,2D
01D46:  DATA 3E,20
01D48:  DATA 61,62
01D4A:  DATA 6F,72
01D4C:  DATA 74,0D
01D4E:  DATA 0A,00
01D50:  DATA 0D,0A
01D52:  DATA 5B,46
01D54:  DATA 4C,41
01D56:  DATA 53,48
01D58:  DATA 5D,20
01D5A:  DATA 52,65
01D5C:  DATA 61,63
01D5E:  DATA 68,65
01D60:  DATA 64,20
01D62:  DATA 65,6E
01D64:  DATA 64,2E
01D66:  DATA 20,50
01D68:  DATA 61,72
01D6A:  DATA 74,69
01D6C:  DATA 61,6C
01D6E:  DATA 20,77
01D70:  DATA 72,69
01D72:  DATA 74,65
01D74:  DATA 20,25
01D76:  DATA 6C,75
01D78:  DATA 20,62
01D7A:  DATA 79,74
01D7C:  DATA 65,73
01D7E:  DATA 20,28
01D80:  DATA 70,61
01D82:  DATA 63,6B
01D84:  DATA 65,74
01D86:  DATA 20,74
01D88:  DATA 72,75
01D8A:  DATA 6E,63
01D8C:  DATA 61,74
01D8E:  DATA 65,64
01D90:  DATA 29,2E
01D92:  DATA 0D,0A
01D94:  DATA 00,00
01D96:  DATA 45,6E
01D98:  DATA 64,20
01D9A:  DATA 46,6C
01D9C:  DATA 61,73
01D9E:  DATA 68,20
01DA0:  DATA 57,72
01DA2:  DATA 69,74
01DA4:  DATA 65,20
01DA6:  DATA 44,65
01DA8:  DATA 6D,6F
01DAA:  DATA 0D,0A
01DAC:  DATA 00,00
01DAE:  DATA 53,74
01DB0:  DATA 61,72
01DB2:  DATA 74,20
01DB4:  DATA 46,6C
01DB6:  DATA 61,73
01DB8:  DATA 68,20
01DBA:  DATA 57,72
01DBC:  DATA 69,74
01DBE:  DATA 65,20
01DC0:  DATA 34,6B
01DC2:  DATA 42,79
01DC4:  DATA 74,65
01DC6:  DATA 20,53
01DC8:  DATA 75,62
01DCA:  DATA 73,65
01DCC:  DATA 63,74
01DCE:  DATA 6F,72
01DD0:  DATA 0D,0A
01DD2:  DATA 00,00
01DD4:  DATA 45,6E
01DD6:  DATA 64,20
01DD8:  DATA 46,6C
01DDA:  DATA 61,73
01DDC:  DATA 68,20
01DDE:  DATA 57,72
01DE0:  DATA 69,74
01DE2:  DATA 65,20
01DE4:  DATA 34,6B
01DE6:  DATA 42,79
01DE8:  DATA 74,65
01DEA:  DATA 20,53
01DEC:  DATA 75,62
01DEE:  DATA 73,65
01DF0:  DATA 63,74
01DF2:  DATA 6F,72
01DF4:  DATA 0D,0A
01DF6:  DATA 00,00
01DF8:  DATA 53,74
01DFA:  DATA 61,72
01DFC:  DATA 74,20
01DFE:  DATA 46,6C
01E00:  DATA 61,73
01E02:  DATA 68,20
01E04:  DATA 52,65
01E06:  DATA 61,64
01E08:  DATA 0D,0A
01E0A:  DATA 00,00
01E0C:  DATA 09,4D
01E0E:  DATA 4F,44
01E10:  DATA 45,20
01E12:  DATA 20,20
01E14:  DATA 20,20
01E16:  DATA 3A,20
01E18:  DATA 25,30
01E1A:  DATA 32,58
01E1C:  DATA 0D,0A
01E1E:  DATA 00,00
01E20:  DATA 09,41
01E22:  DATA 64,64
01E24:  DATA 72,65
01E26:  DATA 73,73
01E28:  DATA 20,20
01E2A:  DATA 3A,20
01E2C:  DATA 30,78
01E2E:  DATA 25,30
01E30:  DATA 38,4C
01E32:  DATA 58,0D
01E34:  DATA 0A,00
01E36:  DATA 09,50
01E38:  DATA 61,63
01E3A:  DATA 6B,65
01E3C:  DATA 74,4E
01E3E:  DATA 75,6D
01E40:  DATA 3A,20
01E42:  DATA 30,78
01E44:  DATA 25,30
01E46:  DATA 34,4C
01E48:  DATA 58,0D
01E4A:  DATA 0A,00
01E4C:  DATA 41,44
01E4E:  DATA 44,52
01E50:  DATA 45,53
01E52:  DATA 53,20
01E54:  DATA 20,3A
01E56:  DATA 0D,0A
01E58:  DATA 00,00
01E5A:  DATA 4D,69
01E5C:  DATA 73,73
01E5E:  DATA 69,6F
01E60:  DATA 6E,20
01E62:  DATA 46,6C
01E64:  DATA 61,73
01E66:  DATA 68,20
01E68:  DATA 69,73
01E6A:  DATA 20,6E
01E6C:  DATA 6F,74
01E6E:  DATA 20,63
01E70:  DATA 6F,6E
01E72:  DATA 6E,65
01E74:  DATA 63,74
01E76:  DATA 65,64
01E78:  DATA 0D,0A
01E7A:  DATA 00,00
01E7C:  DATA 5B,46
01E7E:  DATA 4C,41
01E80:  DATA 53,48
01E82:  DATA 5D,20
01E84:  DATA 52,65
01E86:  DATA 61,64
01E88:  DATA 20,61
01E8A:  DATA 64,64
01E8C:  DATA 72,65
01E8E:  DATA 73,73
01E90:  DATA 20,30
01E92:  DATA 78,25
01E94:  DATA 30,38
01E96:  DATA 4C,58
01E98:  DATA 20,65
01E9A:  DATA 78,63
01E9C:  DATA 65,65
01E9E:  DATA 64,73
01EA0:  DATA 20,64
01EA2:  DATA 65,76
01EA4:  DATA 69,63
01EA6:  DATA 65,20
01EA8:  DATA 65,6E
01EAA:  DATA 64,20
01EAC:  DATA 30,78
01EAE:  DATA 25,30
01EB0:  DATA 38,4C
01EB2:  DATA 58,20
01EB4:  DATA 2D,3E
01EB6:  DATA 20,73
01EB8:  DATA 74,6F
01EBA:  DATA 70,0D
01EBC:  DATA 0A,00
01EBE:  DATA 5B,46
01EC0:  DATA 4C,41
01EC2:  DATA 53,48
01EC4:  DATA 5D,20
01EC6:  DATA 45,6E
01EC8:  DATA 64,20
01ECA:  DATA 72,65
01ECC:  DATA 61,63
01ECE:  DATA 68,65
01ED0:  DATA 64,2E
01ED2:  DATA 20,50
01ED4:  DATA 61,72
01ED6:  DATA 74,69
01ED8:  DATA 61,6C
01EDA:  DATA 20,72
01EDC:  DATA 65,61
01EDE:  DATA 64,20
01EE0:  DATA 25,6C
01EE2:  DATA 75,20
01EE4:  DATA 62,79
01EE6:  DATA 74,65
01EE8:  DATA 73,2E
01EEA:  DATA 0D,0A
01EEC:  DATA 00,00
01EEE:  DATA 25,30
01EF0:  DATA 38,4C
01EF2:  DATA 58,20
01EF4:  DATA 3A,20
01EF6:  DATA 00,00
01EF8:  DATA 45,6E
01EFA:  DATA 64,20
01EFC:  DATA 46,6C
01EFE:  DATA 61,73
01F00:  DATA 68,20
01F02:  DATA 52,65
01F04:  DATA 61,64
01F06:  DATA 0D,0A
01F08:  DATA 00,00
01F0A:  DATA 53,74
01F0C:  DATA 61,72
01F0E:  DATA 74,20
01F10:  DATA 46,6C
01F12:  DATA 61,73
01F14:  DATA 68,20
01F16:  DATA 52,65
01F18:  DATA 61,64
01F1A:  DATA 20,41
01F1C:  DATA 64,64
01F1E:  DATA 72,65
01F20:  DATA 73,73
01F22:  DATA 0D,0A
01F24:  DATA 00,00
01F26:  DATA 52,65
01F28:  DATA 61,64
01F2A:  DATA 20,44
01F2C:  DATA 61,74
01F2E:  DATA 61,3A
01F30:  DATA 20,25
01F32:  DATA 30,32
01F34:  DATA 58,20
01F36:  DATA 25,30
01F38:  DATA 32,58
01F3A:  DATA 20,25
01F3C:  DATA 30,32
01F3E:  DATA 58,20
01F40:  DATA 25,30
01F42:  DATA 32,58
01F44:  DATA 0D,0A
01F46:  DATA 00,00
01F48:  DATA 45,6E
01F4A:  DATA 64,20
01F4C:  DATA 46,6C
01F4E:  DATA 61,73
01F50:  DATA 68,20
01F52:  DATA 52,65
01F54:  DATA 61,64
01F56:  DATA 20,41
01F58:  DATA 64,64
01F5A:  DATA 72,65
01F5C:  DATA 73,73
01F5E:  DATA 0D,0A
01F60:  DATA 00,00
01F62:  DATA 53,74
01F64:  DATA 61,72
01F66:  DATA 74,20
01F68:  DATA 46,6C
01F6A:  DATA 61,73
01F6C:  DATA 68,20
01F6E:  DATA 45,72
01F70:  DATA 61,73
01F72:  DATA 65,20
01F74:  DATA 61,6E
01F76:  DATA 64,20
01F78:  DATA 52,65
01F7A:  DATA 73,65
01F7C:  DATA 74,0D
01F7E:  DATA 0A,00
01F80:  DATA 45,6E
01F82:  DATA 64,20
01F84:  DATA 46,6C
01F86:  DATA 61,73
01F88:  DATA 68,20
01F8A:  DATA 45,72
01F8C:  DATA 61,73
01F8E:  DATA 65,20
01F90:  DATA 61,6E
01F92:  DATA 64,20
01F94:  DATA 52,65
01F96:  DATA 73,65
01F98:  DATA 74,0D
01F9A:  DATA 0A,00
01F9C:  DATA 53,74
01F9E:  DATA 61,72
01FA0:  DATA 74,20
01FA2:  DATA 46,6C
01FA4:  DATA 61,73
01FA6:  DATA 68,20
01FA8:  DATA 53,4D
01FAA:  DATA 46,20
01FAC:  DATA 43,6F
01FAE:  DATA 70,79
01FB0:  DATA 0D,0A
01FB2:  DATA 00,00
01FB4:  DATA 45,6E
01FB6:  DATA 64,20
01FB8:  DATA 46,6C
01FBA:  DATA 61,73
01FBC:  DATA 68,20
01FBE:  DATA 53,4D
01FC0:  DATA 46,20
01FC2:  DATA 43,6F
01FC4:  DATA 70,79
01FC6:  DATA 0D,0A
01FC8:  DATA 00,00
01FCA:  DATA 53,74
01FCC:  DATA 61,72
01FCE:  DATA 74,20
01FD0:  DATA 46,6C
01FD2:  DATA 61,73
01FD4:  DATA 68,20
01FD6:  DATA 53,4D
01FD8:  DATA 46,20
01FDA:  DATA 52,65
01FDC:  DATA 61,64
01FDE:  DATA 0D,0A
01FE0:  DATA 00,00
01FE2:  DATA 09,41
01FE4:  DATA 64,64
01FE6:  DATA 72,65
01FE8:  DATA 73,73
01FEA:  DATA 20,20
01FEC:  DATA 3A,20
01FEE:  DATA 30,78
01FF0:  DATA 25,30
01FF2:  DATA 38,4C
01FF4:  DATA 58,0D
01FF6:  DATA 0A,00
01FF8:  DATA 09,50
01FFA:  DATA 61,63
01FFC:  DATA 6B,65
01FFE:  DATA 74,4E
02000:  DATA 75,6D
02002:  DATA 3A,20
02004:  DATA 30,78
02006:  DATA 25,30
02008:  DATA 34,4C
0200A:  DATA 58,0D
0200C:  DATA 0A,00
0200E:  DATA 52,65
02010:  DATA 61,64
02012:  DATA 20,44
02014:  DATA 61,74
02016:  DATA 61,0D
02018:  DATA 0A,00
0201A:  DATA 0D,0A
0201C:  DATA 45,6E
0201E:  DATA 64,20
02020:  DATA 46,6C
02022:  DATA 61,73
02024:  DATA 68,20
02026:  DATA 53,4D
02028:  DATA 46,20
0202A:  DATA 52,65
0202C:  DATA 61,64
0202E:  DATA 0D,0A
02030:  DATA 00,00
02032:  DATA 53,74
02034:  DATA 61,72
02036:  DATA 74,20
02038:  DATA 46,6C
0203A:  DATA 61,73
0203C:  DATA 68,20
0203E:  DATA 53,4D
02040:  DATA 46,20
02042:  DATA 45,72
02044:  DATA 61,73
02046:  DATA 65,0D
02048:  DATA 0A,00
0204A:  DATA 45,6E
0204C:  DATA 64,20
0204E:  DATA 46,6C
02050:  DATA 61,73
02052:  DATA 68,20
02054:  DATA 53,4D
02056:  DATA 46,20
02058:  DATA 45,72
0205A:  DATA 61,73
0205C:  DATA 65,0D
0205E:  DATA 0A,00
02060:  DATA 53,74
02062:  DATA 61,72
02064:  DATA 74,20
02066:  DATA 46,6C
02068:  DATA 61,73
0206A:  DATA 68,20
0206C:  DATA 41,64
0206E:  DATA 64,72
02070:  DATA 65,73
02072:  DATA 73,20
02074:  DATA 52,65
02076:  DATA 73,65
02078:  DATA 74,0D
0207A:  DATA 0A,00
0207C:  DATA 45,6E
0207E:  DATA 64,20
02080:  DATA 46,6C
02082:  DATA 61,73
02084:  DATA 68,20
02086:  DATA 41,64
02088:  DATA 64,72
0208A:  DATA 65,73
0208C:  DATA 73,20
0208E:  DATA 52,65
02090:  DATA 73,65
02092:  DATA 74,0D
02094:  DATA 0A,00
02096:  DATA 53,4D
02098:  DATA 46,20
0209A:  DATA 69,73
0209C:  DATA 20,6E
0209E:  DATA 6F,74
020A0:  DATA 20,63
020A2:  DATA 6F,6E
020A4:  DATA 6E,65
020A6:  DATA 63,74
020A8:  DATA 65,64
020AA:  DATA 0D,0A
020AC:  DATA 00,00
020AE:  DATA 53,74
020B0:  DATA 61,72
020B2:  DATA 74,20
020B4:  DATA 46,6C
020B6:  DATA 61,73
020B8:  DATA 68,20
020BA:  DATA 53,4D
020BC:  DATA 46,20
020BE:  DATA 52,65
020C0:  DATA 61,64
020C2:  DATA 20,46
020C4:  DATA 6F,72
020C6:  DATA 63,65
020C8:  DATA 0D,0A
020CA:  DATA 00,00
020CC:  DATA 09,41
020CE:  DATA 64,64
020D0:  DATA 72,65
020D2:  DATA 73,73
020D4:  DATA 20,20
020D6:  DATA 3A,20
020D8:  DATA 30,78
020DA:  DATA 25,30
020DC:  DATA 38,4C
020DE:  DATA 58,0D
020E0:  DATA 0A,00
020E2:  DATA 09,50
020E4:  DATA 61,63
020E6:  DATA 6B,65
020E8:  DATA 74,4E
020EA:  DATA 75,6D
020EC:  DATA 3A,20
020EE:  DATA 30,78
020F0:  DATA 25,30
020F2:  DATA 34,4C
020F4:  DATA 58,0D
020F6:  DATA 0A,00
020F8:  DATA 72,65
020FA:  DATA 61,64
020FC:  DATA 20,64
020FE:  DATA 61,74
02100:  DATA 61,0D
02102:  DATA 0A,00
02104:  DATA 0D,0A
02106:  DATA 45,6E
02108:  DATA 64,20
0210A:  DATA 46,6C
0210C:  DATA 61,73
0210E:  DATA 68,20
02110:  DATA 53,4D
02112:  DATA 46,20
02114:  DATA 52,65
02116:  DATA 61,64
02118:  DATA 20,46
0211A:  DATA 6F,72
0211C:  DATA 63,65
0211E:  DATA 0D,0A
02120:  DATA 00,00
02122:  DATA 53,74
02124:  DATA 61,72
02126:  DATA 74,20
02128:  DATA 53,4D
0212A:  DATA 46,20
0212C:  DATA 45,72
0212E:  DATA 61,73
02130:  DATA 65,20
02132:  DATA 41,6C
02134:  DATA 6C,0D
02136:  DATA 0A,00
02138:  DATA 45,6E
0213A:  DATA 64,20
0213C:  DATA 53,4D
0213E:  DATA 46,20
02140:  DATA 45,72
02142:  DATA 61,73
02144:  DATA 65,20
02146:  DATA 41,6C
02148:  DATA 6C,0D
0214A:  DATA 0A,00
0214C:  DATA 53,74
0214E:  DATA 61,72
02150:  DATA 74,20
02152:  DATA 53,4D
02154:  DATA 46,20
02156:  DATA 52,65
02158:  DATA 73,65
0215A:  DATA 74,0D
0215C:  DATA 0A,00
0215E:  DATA 45,6E
02160:  DATA 64,20
02162:  DATA 53,4D
02164:  DATA 46,20
02166:  DATA 52,65
02168:  DATA 73,65
0216A:  DATA 74,0D
0216C:  DATA 0A,00
0216E:  DATA 0D,0A
02170:  DATA 0D,0A
02172:  DATA 0D,0A
02174:  DATA 3D,3D
02176:  DATA 3D,3D
02178:  DATA 3D,3D
0217A:  DATA 3D,3D
0217C:  DATA 3D,3D
0217E:  DATA 3D,3D
02180:  DATA 3D,3D
02182:  DATA 3D,3D
02184:  DATA 3D,3D
02186:  DATA 3D,3D
02188:  DATA 3D,3D
0218A:  DATA 3D,3D
0218C:  DATA 3D,3D
0218E:  DATA 3D,3D
02190:  DATA 3D,3D
02192:  DATA 3D,3D
02194:  DATA 3D,3D
02196:  DATA 3D,3D
02198:  DATA 3D,3D
0219A:  DATA 3D,3D
0219C:  DATA 3D,3D
0219E:  DATA 3D,3D
021A0:  DATA 3D,3D
021A2:  DATA 3D,3D
021A4:  DATA 3D,3D
021A6:  DATA 3D,3D
021A8:  DATA 3D,3D
021AA:  DATA 3D,3D
021AC:  DATA 3D,3D
021AE:  DATA 3D,3D
021B0:  DATA 0D,0A
021B2:  DATA 00,00
021B4:  DATA 54,68
021B6:  DATA 69,73
021B8:  DATA 20,69
021BA:  DATA 73,20
021BC:  DATA 4D,4F
021BE:  DATA 4D,49
021C0:  DATA 4A,49
021C2:  DATA 20,43
021C4:  DATA 49,47
021C6:  DATA 53,20
021C8:  DATA 50,49
021CA:  DATA 43,20
021CC:  DATA 42,42
021CE:  DATA 4D,20
021D0:  DATA 66,6F
021D2:  DATA 72,20
021D4:  DATA 4D,49
021D6:  DATA 53,37
021D8:  DATA 5F,42
021DA:  DATA 42,4D
021DC:  DATA 36,2E
021DE:  DATA 0D,0A
021E0:  DATA 00,00
021E2:  DATA 4C,61
021E4:  DATA 73,74
021E6:  DATA 20,75
021E8:  DATA 70,64
021EA:  DATA 61,74
021EC:  DATA 65,64
021EE:  DATA 20,6F
021F0:  DATA 6E,20
021F2:  DATA 25,73
021F4:  DATA 20,25
021F6:  DATA 73,2C
021F8:  DATA 20,62
021FA:  DATA 79,20
021FC:  DATA 49,6E
021FE:  DATA 6F,75
02200:  DATA 65,2E
02202:  DATA 0D,0A
02204:  DATA 0D,0A
02206:  DATA 00,00
02208:  DATA 32,35
0220A:  DATA 2D,4F
0220C:  DATA 63,74
0220E:  DATA 2D,32
02210:  DATA 35,00
02212:  DATA 31,39
02214:  DATA 3A,33
02216:  DATA 34,3A
02218:  DATA 32,34
0221A:  DATA 00,00
0221C:  DATA 5F,5F
0221E:  DATA 5F,5F
02220:  DATA 43,49
02222:  DATA 47,53
02224:  DATA 20,50
02226:  DATA 49,43
02228:  DATA 20,53
0222A:  DATA 74,61
0222C:  DATA 72,74
0222E:  DATA 20,4F
02230:  DATA 70,65
02232:  DATA 72,61
02234:  DATA 74,69
02236:  DATA 6F,6E
02238:  DATA 5F,5F
0223A:  DATA 5F,5F
0223C:  DATA 5F,0D
0223E:  DATA 0A,0D
02240:  DATA 0A,00
02242:  DATA 77,61
02244:  DATA 69,74
02246:  DATA 69,6E
02248:  DATA 67,20
0224A:  DATA 66,6F
0224C:  DATA 72,20
0224E:  DATA 42,4F
02250:  DATA 53,53
02252:  DATA 20,50
02254:  DATA 49,43
02256:  DATA 20,63
02258:  DATA 6F,6D
0225A:  DATA 6D,61
0225C:  DATA 6E,64
0225E:  DATA 00,00
02260:  DATA 0D,0A
02262:  DATA 0D,0A
02264:  DATA 3D,3D
02266:  DATA 3D,3D
02268:  DATA 3D,3D
0226A:  DATA 0D,0A
0226C:  DATA 0D,0A
0226E:  DATA 46,69
02270:  DATA 6E,69
02272:  DATA 73,68
02274:  DATA 65,64
02276:  DATA 20,70
02278:  DATA 72,6F
0227A:  DATA 63,65
0227C:  DATA 73,73
0227E:  DATA 2E,0D
02280:  DATA 0A,00
02282:  DATA 0D,0A
02284:  DATA 77,61
02286:  DATA 69,74
02288:  DATA 69,6E
0228A:  DATA 67,20
0228C:  DATA 66,6F
0228E:  DATA 72,20
02290:  DATA 42,4F
02292:  DATA 53,53
02294:  DATA 20,50
02296:  DATA 49,43
02298:  DATA 20,63
0229A:  DATA 6F,6D
0229C:  DATA 6D,61
0229E:  DATA 6E,64
022A0:  DATA 00,00
022A2:  DATA 45,6E
022A4:  DATA 64,20
022A6:  DATA 6D,61
022A8:  DATA 69,6E
022AA:  DATA 0D,0A
022AC:  DATA 00,00
*
022DC:  TBLRD*+
022DE:  MOVF   FF5,F
022E0:  BTFSC  FD8.2
022E2:  GOTO   2310
022E6:  MOVFF  FF6,9B3
022EA:  MOVFF  FF7,9B4
022EE:  MOVFF  FF8,9B5
022F2:  MOVF   FF5,W
022F4:  BTFSS  FA6.6
022F6:  GOTO   22F4
022FA:  MOVLB  E
022FC:  MOVWF  xF9
022FE:  MOVFF  9B3,FF6
02302:  MOVFF  9B4,FF7
02306:  MOVFF  9B5,FF8
0230A:  MOVLB  0
0230C:  GOTO   22DC
02310:  RETURN 0
02312:  TBLRD*+
02314:  MOVFF  FF6,9B4
02318:  MOVFF  FF7,9B5
0231C:  MOVFF  FF8,9B6
02320:  MOVF   FF5,W
02322:  BTFSS  FA6.6
02324:  GOTO   2322
02328:  MOVLB  E
0232A:  MOVWF  xF9
0232C:  MOVFF  9B4,FF6
02330:  MOVFF  9B5,FF7
02334:  MOVFF  9B6,FF8
02338:  MOVLB  9
0233A:  DECFSZ xB3,F
0233C:  BRA    2342
0233E:  BRA    2348
02340:  MOVLB  0
02342:  MOVLB  0
02344:  GOTO   2312
02348:  MOVLB  0
0234A:  RETURN 0
0234C:  TSTFSZ 01
0234E:  GOTO   235C
02352:  TSTFSZ 02
02354:  GOTO   235E
02358:  GOTO   236E
0235C:  INCF   02,F
0235E:  MOVFF  00,FEE
02362:  DECFSZ 01,F
02364:  GOTO   235E
02368:  DECFSZ 02,F
0236A:  GOTO   235E
0236E:  RETURN 0
*
02542:  MOVLB  9
02544:  BTFSS  xDA.7
02546:  BRA    254E
02548:  MOVLB  0
0254A:  GOTO   2584
0254E:  MOVLW  0F
02550:  MOVWF  00
02552:  SWAPF  xD9,W
02554:  ANDWF  00,F
02556:  MOVLW  0A
02558:  SUBWF  00,W
0255A:  BTFSS  FD8.0
0255C:  BRA    2564
0255E:  MOVLB  0
02560:  GOTO   256E
02564:  MOVLW  30
02566:  ADDWF  00,F
02568:  MOVLB  0
0256A:  GOTO   2576
0256E:  MOVLB  9
02570:  MOVF   xDA,W
02572:  ADDWF  00,F
02574:  MOVLB  0
02576:  MOVF   00,W
02578:  BTFSS  FA6.6
0257A:  GOTO   2578
0257E:  MOVLB  E
02580:  MOVWF  xF9
02582:  MOVLB  0
02584:  MOVLW  0F
02586:  MOVLB  9
02588:  ANDWF  xD9,F
0258A:  MOVLW  0A
0258C:  SUBWF  xD9,W
0258E:  BTFSS  FD8.0
02590:  BRA    2598
02592:  MOVLB  0
02594:  GOTO   25A0
02598:  MOVLW  30
0259A:  MOVLB  0
0259C:  GOTO   25A8
025A0:  MOVLB  9
025A2:  BCF    xDA.7
025A4:  MOVF   xDA,W
025A6:  MOVLB  0
025A8:  MOVLB  9
025AA:  ADDWF  xD9,F
025AC:  MOVF   xD9,W
025AE:  MOVLB  0
025B0:  BTFSS  FA6.6
025B2:  GOTO   25B0
025B6:  MOVLB  E
025B8:  MOVWF  xF9
025BA:  MOVLB  0
025BC:  RETURN 0
*
02ABA:  MOVLB  A
02ABC:  MOVF   xF9,W
02ABE:  ANDLW  07
02AC0:  MOVWF  00
02AC2:  RRCF   xF9,W
02AC4:  MOVWF  01
02AC6:  RRCF   01,F
02AC8:  RRCF   01,F
02ACA:  MOVLW  1F
02ACC:  ANDWF  01,F
02ACE:  MOVF   01,W
02AD0:  ADDWF  xFB,W
02AD2:  MOVWF  FE9
02AD4:  MOVLW  00
02AD6:  ADDWFC xFC,W
02AD8:  MOVWF  FEA
02ADA:  CLRF   01
02ADC:  INCF   01,F
02ADE:  INCF   00,F
02AE0:  MOVLB  0
02AE2:  GOTO   2AE8
02AE6:  RLCF   01,F
02AE8:  DECFSZ 00,F
02AEA:  GOTO   2AE6
02AEE:  MOVLB  A
02AF0:  MOVF   xFA,F
02AF2:  BTFSS  FD8.2
02AF4:  BRA    2AFC
02AF6:  MOVLB  0
02AF8:  GOTO   2B06
02AFC:  MOVF   01,W
02AFE:  IORWF  FEF,F
02B00:  MOVLB  0
02B02:  GOTO   2B0C
02B06:  COMF   01,F
02B08:  MOVF   01,W
02B0A:  ANDWF  FEF,F
02B0C:  RETURN 0
*
06226:  BTFSC  FD8.1
06228:  GOTO   6234
0622C:  MOVLW  02
0622E:  MOVWF  FEA
06230:  MOVLW  0B
06232:  MOVWF  FE9
06234:  CLRF   00
06236:  CLRF   01
06238:  CLRF   02
0623A:  CLRF   03
0623C:  MOVLB  2
0623E:  CLRF   x0B
06240:  CLRF   x0C
06242:  CLRF   x0D
06244:  CLRF   x0E
06246:  MOVF   x0A,W
06248:  IORWF  x09,W
0624A:  IORWF  x08,W
0624C:  IORWF  x07,W
0624E:  BTFSS  FD8.2
06250:  BRA    6258
06252:  MOVLB  0
06254:  GOTO   62E8
06258:  MOVLB  0
0625A:  MOVLW  20
0625C:  MOVLB  2
0625E:  MOVWF  x0F
06260:  MOVLB  0
06262:  BCF    FD8.0
06264:  MOVLB  2
06266:  RLCF   x03,F
06268:  RLCF   x04,F
0626A:  RLCF   x05,F
0626C:  RLCF   x06,F
0626E:  RLCF   x0B,F
06270:  RLCF   x0C,F
06272:  RLCF   x0D,F
06274:  RLCF   x0E,F
06276:  MOVF   x0A,W
06278:  SUBWF  x0E,W
0627A:  BTFSC  FD8.2
0627C:  BRA    6284
0627E:  MOVLB  0
06280:  GOTO   62A6
06284:  MOVF   x09,W
06286:  SUBWF  x0D,W
06288:  BTFSC  FD8.2
0628A:  BRA    6292
0628C:  MOVLB  0
0628E:  GOTO   62A6
06292:  MOVF   x08,W
06294:  SUBWF  x0C,W
06296:  BTFSC  FD8.2
06298:  BRA    62A0
0629A:  MOVLB  0
0629C:  GOTO   62A6
062A0:  MOVF   x07,W
062A2:  SUBWF  x0B,W
062A4:  MOVLB  0
062A6:  BTFSS  FD8.0
062A8:  GOTO   62CE
062AC:  MOVLB  2
062AE:  MOVF   x07,W
062B0:  SUBWF  x0B,F
062B2:  MOVF   x08,W
062B4:  BTFSS  FD8.0
062B6:  INCFSZ x08,W
062B8:  SUBWF  x0C,F
062BA:  MOVF   x09,W
062BC:  BTFSS  FD8.0
062BE:  INCFSZ x09,W
062C0:  SUBWF  x0D,F
062C2:  MOVF   x0A,W
062C4:  BTFSS  FD8.0
062C6:  INCFSZ x0A,W
062C8:  SUBWF  x0E,F
062CA:  BSF    FD8.0
062CC:  MOVLB  0
062CE:  RLCF   00,F
062D0:  RLCF   01,F
062D2:  RLCF   02,F
062D4:  RLCF   03,F
062D6:  MOVLB  2
062D8:  DECFSZ x0F,F
062DA:  BRA    62E0
062DC:  BRA    62E6
062DE:  MOVLB  0
062E0:  MOVLB  0
062E2:  GOTO   6262
062E6:  MOVLB  0
062E8:  MOVFF  20B,FEF
062EC:  MOVFF  20C,FEC
062F0:  MOVFF  20D,FEC
062F4:  MOVFF  20E,FEC
062F8:  MOVF   FED,F
062FA:  MOVF   FED,F
062FC:  MOVF   FED,F
062FE:  RETURN 0
06300:  MOVF   FE9,W
06302:  MOVLB  1
06304:  MOVWF  xFB
06306:  MOVLW  3B
06308:  MOVLB  2
0630A:  MOVWF  x02
0630C:  MOVLW  9A
0630E:  MOVWF  x01
06310:  MOVLW  CA
06312:  MOVWF  x00
06314:  MOVLB  1
06316:  CLRF   xFF
06318:  MOVLW  0A
0631A:  MOVWF  xFD
0631C:  MOVLB  0
0631E:  BSF    FD8.1
06320:  MOVLW  01
06322:  MOVWF  FEA
06324:  MOVLW  F7
06326:  MOVWF  FE9
06328:  MOVFF  1FA,206
0632C:  MOVFF  1F9,205
06330:  MOVFF  1F8,204
06334:  MOVFF  1F7,203
06338:  MOVFF  202,20A
0633C:  MOVFF  201,209
06340:  MOVFF  200,208
06344:  MOVFF  1FF,207
06348:  CALL   6226
0634C:  MOVF   01,W
0634E:  MOVF   00,F
06350:  BTFSS  FD8.2
06352:  GOTO   63AA
06356:  MOVLB  1
06358:  MOVF   xFD,W
0635A:  XORLW  01
0635C:  BTFSS  FD8.2
0635E:  BRA    6366
06360:  MOVLB  0
06362:  GOTO   63AA
06366:  MOVF   xFB,W
06368:  BTFSS  FD8.2
0636A:  BRA    6372
0636C:  MOVLB  0
0636E:  GOTO   63B0
06372:  ANDLW  0F
06374:  SUBWF  xFD,W
06376:  BTFSS  FD8.2
06378:  BRA    6380
0637A:  MOVLB  0
0637C:  GOTO   638C
06380:  BTFSS  FD8.0
06382:  BRA    638A
06384:  MOVLB  0
06386:  GOTO   63C2
0638A:  MOVLB  0
0638C:  MOVLB  1
0638E:  BTFSS  xFB.7
06390:  BRA    6398
06392:  MOVLB  0
06394:  GOTO   63C2
06398:  BTFSS  xFB.6
0639A:  BRA    63A2
0639C:  MOVLB  0
0639E:  GOTO   63B0
063A2:  MOVLW  20
063A4:  MOVLB  0
063A6:  GOTO   63B2
063AA:  MOVLB  1
063AC:  CLRF   xFB
063AE:  MOVLB  0
063B0:  MOVLW  30
063B2:  ADDWF  00,F
063B4:  MOVF   00,W
063B6:  BTFSS  FA6.6
063B8:  GOTO   63B6
063BC:  MOVLB  E
063BE:  MOVWF  xF9
063C0:  MOVLB  0
063C2:  BCF    FD8.1
063C4:  MOVFF  202,206
063C8:  MOVFF  201,205
063CC:  MOVFF  200,204
063D0:  MOVFF  1FF,203
063D4:  MOVLB  2
063D6:  CLRF   x0A
063D8:  CLRF   x09
063DA:  CLRF   x08
063DC:  MOVLW  0A
063DE:  MOVWF  x07
063E0:  MOVLB  0
063E2:  CALL   6226
063E6:  MOVFF  03,202
063EA:  MOVFF  02,201
063EE:  MOVFF  01,200
063F2:  MOVFF  00,1FF
063F6:  MOVLB  1
063F8:  DECFSZ xFD,F
063FA:  BRA    6400
063FC:  BRA    6406
063FE:  MOVLB  0
06400:  MOVLB  0
06402:  GOTO   631E
06406:  MOVLB  0
06408:  RETURN 0
*
081C0:  MOVLB  A
081C2:  MOVF   x42,W
081C4:  MULWF  x44
081C6:  MOVFF  FF3,01
081CA:  MOVFF  FF4,00
081CE:  MULWF  x45
081D0:  MOVF   FF3,W
081D2:  ADDWF  00,F
081D4:  MOVF   x43,W
081D6:  MULWF  x44
081D8:  MOVF   FF3,W
081DA:  ADDWFC 00,W
081DC:  MOVWF  02
081DE:  MOVLB  0
081E0:  RETURN 0
*
082EA:  MOVLW  8E
082EC:  MOVWF  00
082EE:  MOVFF  1E5,01
082F2:  MOVFF  1E4,02
082F6:  CLRF   03
082F8:  MOVF   01,F
082FA:  BTFSS  FD8.2
082FC:  GOTO   8318
08300:  MOVFF  02,01
08304:  CLRF   02
08306:  MOVLW  08
08308:  SUBWF  00,F
0830A:  MOVF   01,F
0830C:  BTFSS  FD8.2
0830E:  GOTO   8318
08312:  CLRF   00
08314:  GOTO   832C
08318:  BCF    FD8.0
0831A:  BTFSC  01.7
0831C:  GOTO   832A
08320:  RLCF   02,F
08322:  RLCF   01,F
08324:  DECF   00,F
08326:  GOTO   8318
0832A:  BCF    01.7
0832C:  GOTO   8C54 (RETURN)
08330:  MOVLB  1
08332:  MOVF   xE8,W
08334:  BTFSS  FD8.2
08336:  BRA    833E
08338:  MOVLB  0
0833A:  GOTO   8470
0833E:  MOVWF  00
08340:  MOVF   xEC,W
08342:  BTFSS  FD8.2
08344:  BRA    834C
08346:  MOVLB  0
08348:  GOTO   8470
0834C:  ADDWF  00,F
0834E:  BTFSC  FD8.0
08350:  BRA    8358
08352:  MOVLB  0
08354:  GOTO   8368
08358:  MOVLB  0
0835A:  MOVLW  81
0835C:  ADDWF  00,F
0835E:  BTFSC  FD8.0
08360:  GOTO   8470
08364:  GOTO   8378
08368:  MOVLW  7F
0836A:  SUBWF  00,F
0836C:  BTFSS  FD8.0
0836E:  GOTO   8470
08372:  BTFSC  FD8.2
08374:  GOTO   8470
08378:  MOVFF  1E9,1F0
0837C:  MOVLB  1
0837E:  MOVF   xED,W
08380:  XORWF  xF0,F
08382:  BSF    xE9.7
08384:  BSF    xED.7
08386:  MOVF   xEB,W
08388:  MULWF  xEF
0838A:  MOVFF  FF4,1F2
0838E:  MOVF   xEA,W
08390:  MULWF  xEE
08392:  MOVFF  FF4,03
08396:  MOVFF  FF3,1F1
0839A:  MULWF  xEF
0839C:  MOVF   FF3,W
0839E:  ADDWF  xF2,F
083A0:  MOVF   FF4,W
083A2:  ADDWFC xF1,F
083A4:  MOVLW  00
083A6:  ADDWFC 03,F
083A8:  MOVF   xEB,W
083AA:  MULWF  xEE
083AC:  MOVF   FF3,W
083AE:  ADDWF  xF2,F
083B0:  MOVF   FF4,W
083B2:  ADDWFC xF1,F
083B4:  MOVLW  00
083B6:  CLRF   02
083B8:  ADDWFC 03,F
083BA:  ADDWFC 02,F
083BC:  MOVF   xE9,W
083BE:  MULWF  xEF
083C0:  MOVF   FF3,W
083C2:  ADDWF  xF1,F
083C4:  MOVF   FF4,W
083C6:  ADDWFC 03,F
083C8:  MOVLW  00
083CA:  ADDWFC 02,F
083CC:  MOVF   xE9,W
083CE:  MULWF  xEE
083D0:  MOVF   FF3,W
083D2:  ADDWF  03,F
083D4:  MOVF   FF4,W
083D6:  ADDWFC 02,F
083D8:  MOVLW  00
083DA:  CLRF   01
083DC:  ADDWFC 01,F
083DE:  MOVF   xEB,W
083E0:  MULWF  xED
083E2:  MOVF   FF3,W
083E4:  ADDWF  xF1,F
083E6:  MOVF   FF4,W
083E8:  ADDWFC 03,F
083EA:  MOVLW  00
083EC:  ADDWFC 02,F
083EE:  ADDWFC 01,F
083F0:  MOVF   xEA,W
083F2:  MULWF  xED
083F4:  MOVF   FF3,W
083F6:  ADDWF  03,F
083F8:  MOVF   FF4,W
083FA:  ADDWFC 02,F
083FC:  MOVLW  00
083FE:  ADDWFC 01,F
08400:  MOVF   xE9,W
08402:  MULWF  xED
08404:  MOVF   FF3,W
08406:  ADDWF  02,F
08408:  MOVF   FF4,W
0840A:  ADDWFC 01,F
0840C:  INCF   00,F
0840E:  BTFSS  01.7
08410:  BRA    8418
08412:  MOVLB  0
08414:  GOTO   8424
08418:  RLCF   xF1,F
0841A:  RLCF   03,F
0841C:  RLCF   02,F
0841E:  RLCF   01,F
08420:  DECF   00,F
08422:  MOVLB  0
08424:  MOVLW  00
08426:  MOVLB  1
08428:  BTFSC  xF1.7
0842A:  BRA    8432
0842C:  MOVLB  0
0842E:  GOTO   8460
08432:  INCF   03,F
08434:  ADDWFC 02,F
08436:  ADDWFC 01,F
08438:  MOVF   01,W
0843A:  BTFSC  FD8.2
0843C:  BRA    8444
0843E:  MOVLB  0
08440:  GOTO   8460
08444:  MOVF   02,W
08446:  BTFSC  FD8.2
08448:  BRA    8450
0844A:  MOVLB  0
0844C:  GOTO   8460
08450:  MOVF   03,W
08452:  BTFSC  FD8.2
08454:  BRA    845C
08456:  MOVLB  0
08458:  GOTO   8460
0845C:  INCF   00,F
0845E:  MOVLB  0
08460:  MOVLB  1
08462:  BTFSC  xF0.7
08464:  BSF    01.7
08466:  BTFSS  xF0.7
08468:  BCF    01.7
0846A:  MOVLB  0
0846C:  GOTO   8478
08470:  CLRF   00
08472:  CLRF   01
08474:  CLRF   02
08476:  CLRF   03
08478:  GOTO   8C8A (RETURN)
0847C:  MOVLB  1
0847E:  MOVF   xE8,W
08480:  BTFSS  FD8.2
08482:  BRA    848A
08484:  MOVLB  0
08486:  GOTO   8738
0848A:  MOVWF  xF4
0848C:  MOVF   xEC,W
0848E:  BTFSS  FD8.2
08490:  BRA    8498
08492:  MOVLB  0
08494:  GOTO   8738
08498:  SUBWF  xF4,F
0849A:  BTFSS  FD8.0
0849C:  BRA    84A4
0849E:  MOVLB  0
084A0:  GOTO   84AA
084A4:  MOVLB  0
084A6:  GOTO   84C0
084AA:  MOVLW  7F
084AC:  MOVLB  1
084AE:  ADDWF  xF4,F
084B0:  BTFSS  FD8.0
084B2:  BRA    84BA
084B4:  MOVLB  0
084B6:  GOTO   8738
084BA:  MOVLB  0
084BC:  GOTO   84DC
084C0:  MOVLW  81
084C2:  MOVLB  1
084C4:  SUBWF  xF4,F
084C6:  BTFSC  FD8.0
084C8:  BRA    84D0
084CA:  MOVLB  0
084CC:  GOTO   8738
084D0:  BTFSS  FD8.2
084D2:  BRA    84DA
084D4:  MOVLB  0
084D6:  GOTO   8738
084DA:  MOVLB  0
084DC:  MOVFF  1F4,00
084E0:  CLRF   01
084E2:  CLRF   02
084E4:  CLRF   03
084E6:  MOVLB  1
084E8:  CLRF   xF3
084EA:  MOVFF  1E9,1F2
084EE:  BSF    xF2.7
084F0:  MOVFF  1EA,1F1
084F4:  MOVFF  1EB,1F0
084F8:  MOVLW  19
084FA:  MOVWF  xF4
084FC:  MOVLB  0
084FE:  MOVLB  1
08500:  MOVF   xEF,W
08502:  SUBWF  xF0,F
08504:  BTFSS  FD8.0
08506:  BRA    850E
08508:  MOVLB  0
0850A:  GOTO   8544
0850E:  MOVLW  01
08510:  SUBWF  xF1,F
08512:  BTFSS  FD8.0
08514:  BRA    851C
08516:  MOVLB  0
08518:  GOTO   8544
0851C:  SUBWF  xF2,F
0851E:  BTFSS  FD8.0
08520:  BRA    8528
08522:  MOVLB  0
08524:  GOTO   8544
08528:  SUBWF  xF3,F
0852A:  BTFSS  FD8.0
0852C:  BRA    8534
0852E:  MOVLB  0
08530:  GOTO   8544
08534:  INCF   xF3,F
08536:  INCF   xF2,F
08538:  INCF   xF1,F
0853A:  MOVF   xEF,W
0853C:  ADDWF  xF0,F
0853E:  MOVLB  0
08540:  GOTO   85F8
08544:  MOVLB  1
08546:  MOVF   xEE,W
08548:  SUBWF  xF1,F
0854A:  BTFSS  FD8.0
0854C:  BRA    8554
0854E:  MOVLB  0
08550:  GOTO   85AC
08554:  MOVLW  01
08556:  SUBWF  xF2,F
08558:  BTFSS  FD8.0
0855A:  BRA    8562
0855C:  MOVLB  0
0855E:  GOTO   85AC
08562:  SUBWF  xF3,F
08564:  BTFSS  FD8.0
08566:  BRA    856E
08568:  MOVLB  0
0856A:  GOTO   85AC
0856E:  MOVLB  0
08570:  MOVLB  1
08572:  INCF   xF3,F
08574:  INCF   xF2,F
08576:  MOVF   xEE,W
08578:  ADDWF  xF1,F
0857A:  MOVLB  0
0857C:  MOVLB  1
0857E:  MOVF   xEF,W
08580:  ADDWF  xF0,F
08582:  BTFSC  FD8.0
08584:  BRA    858C
08586:  MOVLB  0
08588:  GOTO   85F8
0858C:  INCF   xF1,F
0858E:  BTFSC  FD8.2
08590:  BRA    8598
08592:  MOVLB  0
08594:  GOTO   85F8
08598:  INCF   xF2,F
0859A:  BTFSC  FD8.2
0859C:  BRA    85A4
0859E:  MOVLB  0
085A0:  GOTO   85F8
085A4:  INCF   xF3,F
085A6:  MOVLB  0
085A8:  GOTO   85F8
085AC:  MOVLB  1
085AE:  MOVF   xED,W
085B0:  IORLW  80
085B2:  SUBWF  xF2,F
085B4:  BTFSS  FD8.0
085B6:  BRA    85BE
085B8:  MOVLB  0
085BA:  GOTO   85F6
085BE:  MOVLW  01
085C0:  SUBWF  xF3,F
085C2:  BTFSS  FD8.0
085C4:  BRA    85CC
085C6:  MOVLB  0
085C8:  GOTO   85F6
085CC:  INCF   xF3,F
085CE:  MOVF   xED,W
085D0:  IORLW  80
085D2:  ADDWF  xF2,F
085D4:  MOVF   xEE,W
085D6:  ADDWF  xF1,F
085D8:  BTFSC  FD8.0
085DA:  BRA    85E2
085DC:  MOVLB  0
085DE:  GOTO   857C
085E2:  INCF   xF2,F
085E4:  BTFSC  FD8.2
085E6:  BRA    85EE
085E8:  MOVLB  0
085EA:  GOTO   857C
085EE:  INCF   xF3,F
085F0:  MOVLB  0
085F2:  GOTO   857C
085F6:  BSF    03.0
085F8:  MOVLB  1
085FA:  DECFSZ xF4,F
085FC:  BRA    8602
085FE:  BRA    8608
08600:  MOVLB  0
08602:  MOVLB  0
08604:  GOTO   860E
08608:  MOVLB  0
0860A:  GOTO   862A
0860E:  BCF    FD8.0
08610:  MOVLB  1
08612:  RLCF   xF0,F
08614:  RLCF   xF1,F
08616:  RLCF   xF2,F
08618:  RLCF   xF3,F
0861A:  BCF    FD8.0
0861C:  RLCF   03,F
0861E:  RLCF   02,F
08620:  RLCF   01,F
08622:  RLCF   xF5,F
08624:  MOVLB  0
08626:  GOTO   84FE
0862A:  MOVLB  1
0862C:  BTFSC  xF5.0
0862E:  BRA    8636
08630:  MOVLB  0
08632:  GOTO   8646
08636:  BCF    FD8.0
08638:  RRCF   01,F
0863A:  RRCF   02,F
0863C:  RRCF   03,F
0863E:  RRCF   xF5,F
08640:  MOVLB  0
08642:  GOTO   864E
08646:  DECF   00,F
08648:  BTFSC  FD8.2
0864A:  GOTO   8738
0864E:  MOVLB  1
08650:  BTFSS  xF5.7
08652:  BRA    865A
08654:  MOVLB  0
08656:  GOTO   86F0
0865A:  BCF    FD8.0
0865C:  RLCF   xF0,F
0865E:  RLCF   xF1,F
08660:  RLCF   xF2,F
08662:  RLCF   xF3,F
08664:  MOVLB  0
08666:  MOVLB  1
08668:  MOVF   xEF,W
0866A:  SUBWF  xF0,F
0866C:  BTFSS  FD8.0
0866E:  BRA    8676
08670:  MOVLB  0
08672:  GOTO   869E
08676:  MOVLW  01
08678:  SUBWF  xF1,F
0867A:  BTFSS  FD8.0
0867C:  BRA    8684
0867E:  MOVLB  0
08680:  GOTO   869E
08684:  SUBWF  xF2,F
08686:  BTFSS  FD8.0
08688:  BRA    8690
0868A:  MOVLB  0
0868C:  GOTO   869E
08690:  SUBWF  xF3,F
08692:  BTFSC  FD8.0
08694:  BRA    869C
08696:  MOVLB  0
08698:  GOTO   8716
0869C:  MOVLB  0
0869E:  MOVLB  1
086A0:  MOVF   xEE,W
086A2:  SUBWF  xF1,F
086A4:  BTFSS  FD8.0
086A6:  BRA    86AE
086A8:  MOVLB  0
086AA:  GOTO   86CA
086AE:  MOVLW  01
086B0:  SUBWF  xF2,F
086B2:  BTFSS  FD8.0
086B4:  BRA    86BC
086B6:  MOVLB  0
086B8:  GOTO   86CA
086BC:  SUBWF  xF3,F
086BE:  BTFSC  FD8.0
086C0:  BRA    86C8
086C2:  MOVLB  0
086C4:  GOTO   8716
086C8:  MOVLB  0
086CA:  MOVLB  1
086CC:  MOVF   xED,W
086CE:  IORLW  80
086D0:  MOVLB  0
086D2:  MOVLB  1
086D4:  SUBWF  xF2,F
086D6:  BTFSS  FD8.0
086D8:  BRA    86E0
086DA:  MOVLB  0
086DC:  GOTO   86F0
086E0:  MOVLW  01
086E2:  SUBWF  xF3,F
086E4:  BTFSC  FD8.0
086E6:  BRA    86EE
086E8:  MOVLB  0
086EA:  GOTO   8716
086EE:  MOVLB  0
086F0:  INCF   03,F
086F2:  BTFSS  FD8.2
086F4:  GOTO   8716
086F8:  INCF   02,F
086FA:  BTFSS  FD8.2
086FC:  GOTO   8716
08700:  INCF   01,F
08702:  BTFSS  FD8.2
08704:  GOTO   8716
08708:  INCF   00,F
0870A:  BTFSC  FD8.2
0870C:  GOTO   8738
08710:  RRCF   01,F
08712:  RRCF   02,F
08714:  RRCF   03,F
08716:  MOVFF  1E9,1F4
0871A:  MOVLB  1
0871C:  MOVF   xED,W
0871E:  XORWF  xF4,F
08720:  BTFSC  xF4.7
08722:  BRA    872A
08724:  MOVLB  0
08726:  GOTO   8732
0872A:  BSF    01.7
0872C:  MOVLB  0
0872E:  GOTO   8740
08732:  BCF    01.7
08734:  GOTO   8740
08738:  CLRF   00
0873A:  CLRF   01
0873C:  CLRF   02
0873E:  CLRF   03
08740:  RETURN 0
08742:  MOVLW  80
08744:  BTFSS  FD8.1
08746:  BRA    874E
08748:  MOVLB  1
0874A:  XORWF  xE9,F
0874C:  MOVLB  0
0874E:  MOVLB  1
08750:  CLRF   xEE
08752:  CLRF   xEF
08754:  MOVFF  1E5,1ED
08758:  MOVF   xE9,W
0875A:  XORWF  xED,F
0875C:  MOVF   xE4,W
0875E:  BTFSS  FD8.2
08760:  BRA    8768
08762:  MOVLB  0
08764:  GOTO   8AE4
08768:  MOVWF  xEC
0876A:  MOVFF  1EC,00
0876E:  MOVF   xE8,W
08770:  BTFSS  FD8.2
08772:  BRA    877A
08774:  MOVLB  0
08776:  GOTO   8AF8
0877A:  SUBWF  xEC,F
0877C:  BTFSS  FD8.2
0877E:  BRA    8786
08780:  MOVLB  0
08782:  GOTO   8972
08786:  BTFSS  FD8.0
08788:  BRA    8790
0878A:  MOVLB  0
0878C:  GOTO   8796
08790:  MOVLB  0
08792:  GOTO   887E
08796:  MOVFF  1E9,1F2
0879A:  MOVLB  1
0879C:  BSF    xF2.7
0879E:  MOVFF  1EA,1F1
087A2:  MOVFF  1EB,1F0
087A6:  MOVLB  0
087A8:  MOVLB  1
087AA:  CLRF   xEF
087AC:  BCF    FD8.0
087AE:  RRCF   xF2,F
087B0:  RRCF   xF1,F
087B2:  RRCF   xF0,F
087B4:  RRCF   xEF,F
087B6:  DECFSZ xEC,F
087B8:  BRA    87BE
087BA:  BRA    87C4
087BC:  MOVLB  0
087BE:  MOVLB  0
087C0:  GOTO   87A8
087C4:  MOVLB  0
087C6:  MOVLB  1
087C8:  BTFSC  xED.7
087CA:  BRA    87D2
087CC:  MOVLB  0
087CE:  GOTO   87E0
087D2:  BSF    xEE.0
087D4:  MOVLB  0
087D6:  GOTO   8B24
087DA:  MOVLB  1
087DC:  BCF    xEE.0
087DE:  MOVLB  0
087E0:  MOVLB  1
087E2:  BCF    xEC.0
087E4:  BSF    xEE.4
087E6:  MOVLW  01
087E8:  MOVWF  FEA
087EA:  MOVLW  E7
087EC:  MOVWF  FE9
087EE:  MOVLB  0
087F0:  GOTO   8B7E
087F4:  MOVLB  1
087F6:  BCF    xEE.4
087F8:  BTFSS  xED.7
087FA:  BRA    8802
087FC:  MOVLB  0
087FE:  GOTO   8826
08802:  BTFSC  xEC.0
08804:  BRA    880C
08806:  MOVLB  0
08808:  GOTO   884C
0880C:  RRCF   xF2,F
0880E:  RRCF   xF1,F
08810:  RRCF   xF0,F
08812:  RRCF   xEF,F
08814:  INCF   00,F
08816:  BTFSS  FD8.2
08818:  BRA    8820
0881A:  MOVLB  0
0881C:  GOTO   8B18
08820:  MOVLB  0
08822:  GOTO   884C
08826:  MOVLB  1
08828:  BTFSS  xF2.7
0882A:  BRA    8832
0882C:  MOVLB  0
0882E:  GOTO   885C
08832:  BCF    FD8.0
08834:  RLCF   xEF,F
08836:  RLCF   xF0,F
08838:  RLCF   xF1,F
0883A:  RLCF   xF2,F
0883C:  DECFSZ 00,F
0883E:  BRA    8846
08840:  MOVLB  0
08842:  GOTO   8B18
08846:  MOVLB  0
08848:  GOTO   8826
0884C:  MOVLB  1
0884E:  BSF    xEE.6
08850:  MOVLB  0
08852:  GOTO   89E4
08856:  MOVLB  1
08858:  BCF    xEE.6
0885A:  MOVLB  0
0885C:  MOVFF  1E5,1ED
08860:  MOVLB  1
08862:  BTFSC  xED.7
08864:  BRA    886C
08866:  MOVLB  0
08868:  GOTO   8874
0886C:  BSF    xF2.7
0886E:  MOVLB  0
08870:  GOTO   8B08
08874:  MOVLB  1
08876:  BCF    xF2.7
08878:  MOVLB  0
0887A:  GOTO   8B08
0887E:  MOVFF  1E8,1EC
08882:  MOVFF  1EC,00
08886:  MOVLB  1
08888:  MOVF   xE4,W
0888A:  SUBWF  xEC,F
0888C:  MOVFF  1E5,1F2
08890:  BSF    xF2.7
08892:  MOVFF  1E6,1F1
08896:  MOVFF  1E7,1F0
0889A:  MOVLB  0
0889C:  MOVLB  1
0889E:  CLRF   xEF
088A0:  BCF    FD8.0
088A2:  RRCF   xF2,F
088A4:  RRCF   xF1,F
088A6:  RRCF   xF0,F
088A8:  RRCF   xEF,F
088AA:  DECFSZ xEC,F
088AC:  BRA    88B2
088AE:  BRA    88B8
088B0:  MOVLB  0
088B2:  MOVLB  0
088B4:  GOTO   889C
088B8:  MOVLB  0
088BA:  MOVLB  1
088BC:  BTFSC  xED.7
088BE:  BRA    88C6
088C0:  MOVLB  0
088C2:  GOTO   88D4
088C6:  BSF    xEE.1
088C8:  MOVLB  0
088CA:  GOTO   8B24
088CE:  MOVLB  1
088D0:  BCF    xEE.1
088D2:  MOVLB  0
088D4:  MOVLB  1
088D6:  BCF    xEC.0
088D8:  BSF    xEE.5
088DA:  MOVLW  01
088DC:  MOVWF  FEA
088DE:  MOVLW  EB
088E0:  MOVWF  FE9
088E2:  MOVLB  0
088E4:  GOTO   8B7E
088E8:  MOVLB  1
088EA:  BCF    xEE.5
088EC:  BTFSS  xED.7
088EE:  BRA    88F6
088F0:  MOVLB  0
088F2:  GOTO   891A
088F6:  BTFSC  xEC.0
088F8:  BRA    8900
088FA:  MOVLB  0
088FC:  GOTO   8940
08900:  RRCF   xF2,F
08902:  RRCF   xF1,F
08904:  RRCF   xF0,F
08906:  RRCF   xEF,F
08908:  INCF   00,F
0890A:  BTFSS  FD8.2
0890C:  BRA    8914
0890E:  MOVLB  0
08910:  GOTO   8B18
08914:  MOVLB  0
08916:  GOTO   8940
0891A:  MOVLB  1
0891C:  BTFSS  xF2.7
0891E:  BRA    8926
08920:  MOVLB  0
08922:  GOTO   8950
08926:  BCF    FD8.0
08928:  RLCF   xEF,F
0892A:  RLCF   xF0,F
0892C:  RLCF   xF1,F
0892E:  RLCF   xF2,F
08930:  DECFSZ 00,F
08932:  BRA    893A
08934:  MOVLB  0
08936:  GOTO   8B18
0893A:  MOVLB  0
0893C:  GOTO   891A
08940:  MOVLB  1
08942:  BSF    xEE.7
08944:  MOVLB  0
08946:  GOTO   89E4
0894A:  MOVLB  1
0894C:  BCF    xEE.7
0894E:  MOVLB  0
08950:  MOVFF  1E9,1ED
08954:  MOVLB  1
08956:  BTFSC  xED.7
08958:  BRA    8960
0895A:  MOVLB  0
0895C:  GOTO   8968
08960:  BSF    xF2.7
08962:  MOVLB  0
08964:  GOTO   8B08
08968:  MOVLB  1
0896A:  BCF    xF2.7
0896C:  MOVLB  0
0896E:  GOTO   8B08
08972:  MOVFF  1E9,1F2
08976:  MOVLB  1
08978:  BSF    xF2.7
0897A:  MOVFF  1EA,1F1
0897E:  MOVFF  1EB,1F0
08982:  BTFSC  xED.7
08984:  BRA    898C
08986:  MOVLB  0
08988:  GOTO   899C
0898C:  BCF    xF2.7
0898E:  BSF    xEE.2
08990:  MOVLB  0
08992:  GOTO   8B24
08996:  MOVLB  1
08998:  BCF    xEE.2
0899A:  MOVLB  0
0899C:  MOVLB  1
0899E:  CLRF   xEF
089A0:  BCF    xEC.0
089A2:  MOVLW  01
089A4:  MOVWF  FEA
089A6:  MOVLW  E7
089A8:  MOVWF  FE9
089AA:  MOVLB  0
089AC:  GOTO   8B7E
089B0:  MOVLB  1
089B2:  BTFSS  xED.7
089B4:  BRA    89BC
089B6:  MOVLB  0
089B8:  GOTO   8A44
089BC:  MOVFF  1E5,1ED
089C0:  MOVLB  0
089C2:  MOVLB  1
089C4:  BTFSC  xEC.0
089C6:  BRA    89CE
089C8:  MOVLB  0
089CA:  GOTO   89E4
089CE:  RRCF   xF2,F
089D0:  RRCF   xF1,F
089D2:  RRCF   xF0,F
089D4:  RRCF   xEF,F
089D6:  INCF   00,F
089D8:  BTFSS  FD8.2
089DA:  BRA    89E2
089DC:  MOVLB  0
089DE:  GOTO   8B18
089E2:  MOVLB  0
089E4:  MOVLB  1
089E6:  BTFSC  xEF.7
089E8:  BRA    89F0
089EA:  MOVLB  0
089EC:  GOTO   8A28
089F0:  INCF   xF0,F
089F2:  BTFSC  FD8.2
089F4:  BRA    89FC
089F6:  MOVLB  0
089F8:  GOTO   8A28
089FC:  INCF   xF1,F
089FE:  BTFSC  FD8.2
08A00:  BRA    8A08
08A02:  MOVLB  0
08A04:  GOTO   8A28
08A08:  INCF   xF2,F
08A0A:  BTFSC  FD8.2
08A0C:  BRA    8A14
08A0E:  MOVLB  0
08A10:  GOTO   8A28
08A14:  RRCF   xF2,F
08A16:  RRCF   xF1,F
08A18:  RRCF   xF0,F
08A1A:  INCF   00,F
08A1C:  BTFSS  FD8.2
08A1E:  BRA    8A26
08A20:  MOVLB  0
08A22:  GOTO   8B18
08A26:  MOVLB  0
08A28:  MOVLB  1
08A2A:  BTFSS  xEE.6
08A2C:  BRA    8A34
08A2E:  MOVLB  0
08A30:  GOTO   8856
08A34:  BTFSS  xEE.7
08A36:  BRA    8A3E
08A38:  MOVLB  0
08A3A:  GOTO   894A
08A3E:  MOVLB  0
08A40:  GOTO   8AC6
08A44:  MOVLW  80
08A46:  MOVLB  1
08A48:  XORWF  xF2,F
08A4A:  BTFSC  xF2.7
08A4C:  BRA    8A54
08A4E:  MOVLB  0
08A50:  GOTO   8A62
08A54:  MOVLB  0
08A56:  GOTO   8B24
08A5A:  MOVFF  1E9,1ED
08A5E:  GOTO   8A9C
08A62:  MOVFF  1E5,1ED
08A66:  MOVLB  1
08A68:  MOVF   xF2,F
08A6A:  BTFSC  FD8.2
08A6C:  BRA    8A74
08A6E:  MOVLB  0
08A70:  GOTO   8A9C
08A74:  MOVLB  0
08A76:  MOVLB  1
08A78:  MOVF   xF1,F
08A7A:  BTFSC  FD8.2
08A7C:  BRA    8A84
08A7E:  MOVLB  0
08A80:  GOTO   8A9C
08A84:  MOVLB  0
08A86:  MOVLB  1
08A88:  MOVF   xF0,F
08A8A:  BTFSC  FD8.2
08A8C:  BRA    8A94
08A8E:  MOVLB  0
08A90:  GOTO   8A9C
08A94:  MOVLB  0
08A96:  CLRF   00
08A98:  GOTO   8B08
08A9C:  MOVLB  1
08A9E:  BTFSS  xF2.7
08AA0:  BRA    8AA8
08AA2:  MOVLB  0
08AA4:  GOTO   8AC6
08AA8:  BCF    FD8.0
08AAA:  RLCF   xEF,F
08AAC:  RLCF   xF0,F
08AAE:  RLCF   xF1,F
08AB0:  RLCF   xF2,F
08AB2:  DECFSZ 00,F
08AB4:  BRA    8ABA
08AB6:  BRA    8AC0
08AB8:  MOVLB  0
08ABA:  MOVLB  0
08ABC:  GOTO   8A9C
08AC0:  MOVLB  0
08AC2:  GOTO   8B18
08AC6:  MOVLB  1
08AC8:  BTFSC  xED.7
08ACA:  BRA    8AD2
08ACC:  MOVLB  0
08ACE:  GOTO   8ADA
08AD2:  BSF    xF2.7
08AD4:  MOVLB  0
08AD6:  GOTO   8B08
08ADA:  MOVLB  1
08ADC:  BCF    xF2.7
08ADE:  MOVLB  0
08AE0:  GOTO   8B08
08AE4:  MOVFF  1E8,00
08AE8:  MOVFF  1E9,1F2
08AEC:  MOVFF  1EA,1F1
08AF0:  MOVFF  1EB,1F0
08AF4:  GOTO   8B08
08AF8:  MOVFF  1E4,00
08AFC:  MOVFF  1E5,1F2
08B00:  MOVFF  1E6,1F1
08B04:  MOVFF  1E7,1F0
08B08:  MOVFF  1F2,01
08B0C:  MOVFF  1F1,02
08B10:  MOVFF  1F0,03
08B14:  GOTO   8BEA
08B18:  CLRF   00
08B1A:  CLRF   01
08B1C:  CLRF   02
08B1E:  CLRF   03
08B20:  GOTO   8BEA
08B24:  MOVLB  1
08B26:  CLRF   xEF
08B28:  COMF   xF0,F
08B2A:  COMF   xF1,F
08B2C:  COMF   xF2,F
08B2E:  COMF   xEF,F
08B30:  INCF   xEF,F
08B32:  BTFSC  FD8.2
08B34:  BRA    8B3C
08B36:  MOVLB  0
08B38:  GOTO   8B58
08B3C:  INCF   xF0,F
08B3E:  BTFSC  FD8.2
08B40:  BRA    8B48
08B42:  MOVLB  0
08B44:  GOTO   8B58
08B48:  INCF   xF1,F
08B4A:  BTFSC  FD8.2
08B4C:  BRA    8B54
08B4E:  MOVLB  0
08B50:  GOTO   8B58
08B54:  INCF   xF2,F
08B56:  MOVLB  0
08B58:  MOVLB  1
08B5A:  BTFSS  xEE.0
08B5C:  BRA    8B64
08B5E:  MOVLB  0
08B60:  GOTO   87DA
08B64:  BTFSS  xEE.1
08B66:  BRA    8B6E
08B68:  MOVLB  0
08B6A:  GOTO   88CE
08B6E:  BTFSS  xEE.2
08B70:  BRA    8B78
08B72:  MOVLB  0
08B74:  GOTO   8996
08B78:  MOVLB  0
08B7A:  GOTO   8A5A
08B7E:  MOVF   FEF,W
08B80:  MOVLB  1
08B82:  ADDWF  xF0,F
08B84:  BTFSC  FD8.0
08B86:  BRA    8B8E
08B88:  MOVLB  0
08B8A:  GOTO   8BA2
08B8E:  INCF   xF1,F
08B90:  BTFSC  FD8.2
08B92:  BRA    8B9A
08B94:  MOVLB  0
08B96:  GOTO   8BA2
08B9A:  INCF   xF2,F
08B9C:  BTFSC  FD8.2
08B9E:  BSF    xEC.0
08BA0:  MOVLB  0
08BA2:  MOVF   FED,F
08BA4:  MOVF   FEF,W
08BA6:  MOVLB  1
08BA8:  ADDWF  xF1,F
08BAA:  BTFSC  FD8.0
08BAC:  BRA    8BB4
08BAE:  MOVLB  0
08BB0:  GOTO   8BBC
08BB4:  INCF   xF2,F
08BB6:  BTFSC  FD8.2
08BB8:  BSF    xEC.0
08BBA:  MOVLB  0
08BBC:  MOVF   FED,F
08BBE:  MOVF   FEF,W
08BC0:  BTFSC  FEF.7
08BC2:  GOTO   8BC8
08BC6:  XORLW  80
08BC8:  MOVLB  1
08BCA:  ADDWF  xF2,F
08BCC:  BTFSC  FD8.0
08BCE:  BSF    xEC.0
08BD0:  BTFSS  xEE.4
08BD2:  BRA    8BDA
08BD4:  MOVLB  0
08BD6:  GOTO   87F4
08BDA:  BTFSS  xEE.5
08BDC:  BRA    8BE4
08BDE:  MOVLB  0
08BE0:  GOTO   88E8
08BE4:  MOVLB  0
08BE6:  GOTO   89B0
08BEA:  GOTO   8CF8 (RETURN)
08BEE:  MOVLW  8E
08BF0:  MOVWF  00
08BF2:  MOVLB  1
08BF4:  MOVF   xE4,W
08BF6:  SUBWF  00,F
08BF8:  MOVFF  1E5,02
08BFC:  MOVFF  1E6,01
08C00:  BSF    02.7
08C02:  MOVF   00,F
08C04:  BTFSS  FD8.2
08C06:  BRA    8C0E
08C08:  MOVLB  0
08C0A:  GOTO   8C2C
08C0E:  MOVLB  0
08C10:  BCF    FD8.0
08C12:  MOVF   02,F
08C14:  BTFSS  FD8.2
08C16:  GOTO   8C22
08C1A:  MOVF   01,F
08C1C:  BTFSC  FD8.2
08C1E:  GOTO   8C2C
08C22:  RRCF   02,F
08C24:  RRCF   01,F
08C26:  DECFSZ 00,F
08C28:  GOTO   8C10
08C2C:  MOVLB  1
08C2E:  BTFSC  xE5.7
08C30:  BRA    8C38
08C32:  MOVLB  0
08C34:  GOTO   8C44
08C38:  MOVLB  0
08C3A:  COMF   01,F
08C3C:  COMF   02,F
08C3E:  INCF   01,F
08C40:  BTFSC  FD8.2
08C42:  INCF   02,F
08C44:  GOTO   8D50 (RETURN)
*
08D5A:  MOVFF  FEA,1E2
08D5E:  MOVFF  FE9,1E1
08D62:  MOVLB  1
08D64:  SWAPF  xDB,W
08D66:  IORLW  F0
08D68:  MOVWF  xDD
08D6A:  ADDWF  xDD,F
08D6C:  ADDLW  E2
08D6E:  MOVWF  xDE
08D70:  ADDLW  32
08D72:  MOVWF  xE0
08D74:  MOVF   xDB,W
08D76:  ANDLW  0F
08D78:  ADDWF  xDE,F
08D7A:  ADDWF  xDE,F
08D7C:  ADDWF  xE0,F
08D7E:  ADDLW  E9
08D80:  MOVWF  xDF
08D82:  ADDWF  xDF,F
08D84:  ADDWF  xDF,F
08D86:  SWAPF  xDA,W
08D88:  ANDLW  0F
08D8A:  ADDWF  xDF,F
08D8C:  ADDWF  xE0,F
08D8E:  RLCF   xDF,F
08D90:  RLCF   xE0,F
08D92:  COMF   xE0,F
08D94:  RLCF   xE0,F
08D96:  MOVF   xDA,W
08D98:  ANDLW  0F
08D9A:  ADDWF  xE0,F
08D9C:  RLCF   xDD,F
08D9E:  MOVLW  07
08DA0:  MOVWF  xDC
08DA2:  MOVLW  0A
08DA4:  MOVLB  0
08DA6:  MOVLB  1
08DA8:  DECF   xDF,F
08DAA:  ADDWF  xE0,F
08DAC:  BTFSC  FD8.0
08DAE:  BRA    8DB6
08DB0:  MOVLB  0
08DB2:  GOTO   8DA6
08DB6:  MOVLB  0
08DB8:  MOVLB  1
08DBA:  DECF   xDE,F
08DBC:  ADDWF  xDF,F
08DBE:  BTFSC  FD8.0
08DC0:  BRA    8DC8
08DC2:  MOVLB  0
08DC4:  GOTO   8DB8
08DC8:  MOVLB  0
08DCA:  MOVLB  1
08DCC:  DECF   xDD,F
08DCE:  ADDWF  xDE,F
08DD0:  BTFSC  FD8.0
08DD2:  BRA    8DDA
08DD4:  MOVLB  0
08DD6:  GOTO   8DCA
08DDA:  MOVLB  0
08DDC:  MOVLB  1
08DDE:  DECF   xDC,F
08DE0:  ADDWF  xDD,F
08DE2:  BTFSC  FD8.0
08DE4:  BRA    8DEC
08DE6:  MOVLB  0
08DE8:  GOTO   8DDC
08DEC:  MOVLW  01
08DEE:  MOVWF  FEA
08DF0:  MOVLW  DC
08DF2:  MOVWF  FE9
08DF4:  MOVLW  07
08DF6:  ANDWF  xE1,W
08DF8:  BCF    xE1.6
08DFA:  MOVLB  0
08DFC:  ADDWF  FE9,F
08DFE:  MOVLW  00
08E00:  ADDWFC FEA,F
08E02:  MOVF   FE9,W
08E04:  SUBLW  E0
08E06:  BTFSS  FD8.2
08E08:  GOTO   8E18
08E0C:  DECFSZ FEA,W
08E0E:  GOTO   8E18
08E12:  MOVLB  1
08E14:  BSF    xE1.6
08E16:  MOVLB  0
08E18:  MOVF   FEF,W
08E1A:  MOVWF  00
08E1C:  BTFSS  FD8.2
08E1E:  GOTO   8E4A
08E22:  MOVLB  1
08E24:  BTFSS  xE1.6
08E26:  BRA    8E2E
08E28:  MOVLB  0
08E2A:  GOTO   8E4A
08E2E:  BTFSS  xE1.4
08E30:  BRA    8E38
08E32:  MOVLB  0
08E34:  GOTO   8E64
08E38:  BTFSS  xE1.3
08E3A:  BRA    8E42
08E3C:  MOVLB  0
08E3E:  GOTO   8E4A
08E42:  MOVLW  20
08E44:  MOVLB  0
08E46:  GOTO   8E54
08E4A:  MOVLB  1
08E4C:  BSF    xE1.3
08E4E:  BCF    xE1.4
08E50:  MOVLW  30
08E52:  MOVLB  0
08E54:  ADDWF  00,F
08E56:  MOVF   00,W
08E58:  BTFSS  FA6.6
08E5A:  GOTO   8E58
08E5E:  MOVLB  E
08E60:  MOVWF  xF9
08E62:  MOVLB  0
08E64:  MOVF   FEE,W
08E66:  MOVLB  1
08E68:  BTFSC  xE1.6
08E6A:  BRA    8E72
08E6C:  MOVLB  0
08E6E:  GOTO   8E02
08E72:  MOVLB  0
08E74:  RETURN 0
*
0E1AC:  MOVLB  1
0E1AE:  CLRF   xC2
0E1B0:  CLRF   xC3
0E1B2:  MOVLW  01
0E1B4:  MOVWF  xC4
0E1B6:  CLRF   FDA
0E1B8:  CLRF   FD9
0E1BA:  MOVLW  01
0E1BC:  MOVWF  xC7
0E1BE:  MOVLW  BA
0E1C0:  MOVWF  xC6
0E1C2:  MOVLB  0
0E1C4:  MOVLW  01
0E1C6:  MOVWF  FEA
0E1C8:  MOVLW  BE
0E1CA:  MOVWF  FE9
0E1CC:  MOVFF  1C7,FE2
0E1D0:  MOVFF  1C6,FE1
0E1D4:  MOVFF  1C4,1C5
0E1D8:  BCF    FD8.0
0E1DA:  MOVF   FE5,W
0E1DC:  MULWF  FEE
0E1DE:  MOVF   FF3,W
0E1E0:  MOVLB  1
0E1E2:  ADDWFC xC2,F
0E1E4:  MOVF   FF4,W
0E1E6:  ADDWFC xC3,F
0E1E8:  DECFSZ xC5,F
0E1EA:  BRA    E1F0
0E1EC:  BRA    E1F6
0E1EE:  MOVLB  0
0E1F0:  MOVLB  0
0E1F2:  GOTO   E1D8
0E1F6:  MOVFF  1C2,FDE
0E1FA:  MOVFF  1C3,1C2
0E1FE:  CLRF   xC3
0E200:  BTFSC  FD8.0
0E202:  INCF   xC3,F
0E204:  INCF   xC6,F
0E206:  BTFSC  FD8.2
0E208:  INCF   xC7,F
0E20A:  INCF   xC4,F
0E20C:  MOVF   xC4,W
0E20E:  SUBLW  05
0E210:  BTFSC  FD8.2
0E212:  BRA    E21A
0E214:  MOVLB  0
0E216:  GOTO   E1C4
0E21A:  MOVLB  0
0E21C:  GOTO   E2E0 (RETURN)
*
0F41A:  MOVLB  2
0F41C:  MOVF   x09,W
0F41E:  CLRF   01
0F420:  SUBWF  x08,W
0F422:  BTFSS  FD8.0
0F424:  BRA    F42C
0F426:  MOVLB  0
0F428:  GOTO   F436
0F42C:  MOVF   x08,W
0F42E:  MOVWF  00
0F430:  MOVLB  0
0F432:  GOTO   F460
0F436:  CLRF   00
0F438:  MOVLW  08
0F43A:  MOVLB  2
0F43C:  MOVWF  x0A
0F43E:  MOVLB  0
0F440:  MOVLB  2
0F442:  RLCF   x08,F
0F444:  RLCF   00,F
0F446:  MOVF   x09,W
0F448:  SUBWF  00,W
0F44A:  BTFSC  FD8.0
0F44C:  MOVWF  00
0F44E:  RLCF   01,F
0F450:  DECFSZ x0A,F
0F452:  BRA    F458
0F454:  BRA    F45E
0F456:  MOVLB  0
0F458:  MOVLB  0
0F45A:  GOTO   F440
0F45E:  MOVLB  0
0F460:  RETURN 0
0F462:  MOVF   01,W
0F464:  MOVFF  1A0,208
0F468:  MOVLW  64
0F46A:  MOVLB  2
0F46C:  MOVWF  x09
0F46E:  MOVLB  0
0F470:  CALL   F41A
0F474:  MOVFF  00,1A0
0F478:  MOVF   01,W
0F47A:  MOVLW  30
0F47C:  BTFSS  FD8.2
0F47E:  GOTO   F4A2
0F482:  MOVLB  1
0F484:  BTFSC  xA1.1
0F486:  BRA    F48E
0F488:  MOVLB  0
0F48A:  GOTO   F4BC
0F48E:  BTFSS  xA1.3
0F490:  BRA    F498
0F492:  MOVLB  0
0F494:  GOTO   F4BC
0F498:  BTFSC  xA1.4
0F49A:  MOVLW  20
0F49C:  MOVLB  0
0F49E:  GOTO   F4AC
0F4A2:  MOVLB  1
0F4A4:  BCF    xA1.3
0F4A6:  BCF    xA1.4
0F4A8:  BSF    xA1.0
0F4AA:  MOVLB  0
0F4AC:  ADDWF  01,F
0F4AE:  MOVF   01,W
0F4B0:  BTFSS  FA6.6
0F4B2:  GOTO   F4B0
0F4B6:  MOVLB  E
0F4B8:  MOVWF  xF9
0F4BA:  MOVLB  0
0F4BC:  MOVFF  1A0,208
0F4C0:  MOVLW  0A
0F4C2:  MOVLB  2
0F4C4:  MOVWF  x09
0F4C6:  MOVLB  0
0F4C8:  CALL   F41A
0F4CC:  MOVFF  00,1A0
0F4D0:  MOVF   01,W
0F4D2:  MOVLW  30
0F4D4:  BTFSS  FD8.2
0F4D6:  GOTO   F4F6
0F4DA:  MOVLB  1
0F4DC:  BTFSS  xA1.3
0F4DE:  BRA    F4E6
0F4E0:  MOVLB  0
0F4E2:  GOTO   F506
0F4E6:  BTFSC  xA1.0
0F4E8:  BRA    F4F0
0F4EA:  MOVLB  0
0F4EC:  GOTO   F506
0F4F0:  BTFSC  xA1.4
0F4F2:  MOVLW  20
0F4F4:  MOVLB  0
0F4F6:  ADDWF  01,F
0F4F8:  MOVF   01,W
0F4FA:  BTFSS  FA6.6
0F4FC:  GOTO   F4FA
0F500:  MOVLB  E
0F502:  MOVWF  xF9
0F504:  MOVLB  0
0F506:  MOVLW  30
0F508:  MOVLB  1
0F50A:  ADDWF  xA0,F
0F50C:  MOVF   xA0,W
0F50E:  MOVLB  0
0F510:  BTFSS  FA6.6
0F512:  GOTO   F510
0F516:  MOVLB  E
0F518:  MOVWF  xF9
0F51A:  MOVLB  0
0F51C:  RETURN 0
*
0FC78:  MOVF   FE9,W
0FC7A:  MOVLB  1
0FC7C:  MOVWF  xA0
0FC7E:  BTFSC  x9F.7
0FC80:  BRA    FC88
0FC82:  MOVLB  0
0FC84:  GOTO   FCA4
0FC88:  DECF   xA0,F
0FC8A:  BSF    xA0.5
0FC8C:  COMF   x9C,F
0FC8E:  COMF   x9D,F
0FC90:  COMF   x9E,F
0FC92:  COMF   x9F,F
0FC94:  INCF   x9C,F
0FC96:  BTFSC  FD8.2
0FC98:  INCF   x9D,F
0FC9A:  BTFSC  FD8.2
0FC9C:  INCF   x9E,F
0FC9E:  BTFSC  FD8.2
0FCA0:  INCF   x9F,F
0FCA2:  MOVLB  0
0FCA4:  MOVLW  3B
0FCA6:  MOVLB  1
0FCA8:  MOVWF  xA7
0FCAA:  MOVLW  9A
0FCAC:  MOVWF  xA6
0FCAE:  MOVLW  CA
0FCB0:  MOVWF  xA5
0FCB2:  CLRF   xA4
0FCB4:  MOVLW  0A
0FCB6:  MOVWF  xA2
0FCB8:  MOVLB  0
0FCBA:  BSF    FD8.1
0FCBC:  MOVLW  01
0FCBE:  MOVWF  FEA
0FCC0:  MOVLW  9C
0FCC2:  MOVWF  FE9
0FCC4:  MOVFF  19F,206
0FCC8:  MOVFF  19E,205
0FCCC:  MOVFF  19D,204
0FCD0:  MOVFF  19C,203
0FCD4:  MOVFF  1A7,20A
0FCD8:  MOVFF  1A6,209
0FCDC:  MOVFF  1A5,208
0FCE0:  MOVFF  1A4,207
0FCE4:  CALL   6226
0FCE8:  MOVF   01,W
0FCEA:  MOVF   00,F
0FCEC:  BTFSS  FD8.2
0FCEE:  GOTO   FD46
0FCF2:  MOVLB  1
0FCF4:  MOVF   xA2,W
0FCF6:  XORLW  01
0FCF8:  BTFSS  FD8.2
0FCFA:  BRA    FD02
0FCFC:  MOVLB  0
0FCFE:  GOTO   FD46
0FD02:  MOVF   xA0,W
0FD04:  BTFSS  FD8.2
0FD06:  BRA    FD0E
0FD08:  MOVLB  0
0FD0A:  GOTO   FD4E
0FD0E:  ANDLW  0F
0FD10:  SUBWF  xA2,W
0FD12:  BTFSS  FD8.2
0FD14:  BRA    FD1C
0FD16:  MOVLB  0
0FD18:  GOTO   FD28
0FD1C:  BTFSS  FD8.0
0FD1E:  BRA    FD26
0FD20:  MOVLB  0
0FD22:  GOTO   FDB6
0FD26:  MOVLB  0
0FD28:  MOVLB  1
0FD2A:  BTFSS  xA0.7
0FD2C:  BRA    FD34
0FD2E:  MOVLB  0
0FD30:  GOTO   FDB6
0FD34:  BTFSS  xA0.6
0FD36:  BRA    FD3E
0FD38:  MOVLB  0
0FD3A:  GOTO   FD4E
0FD3E:  MOVLW  20
0FD40:  MOVLB  0
0FD42:  GOTO   FDA6
0FD46:  MOVLW  20
0FD48:  MOVLB  1
0FD4A:  ANDWF  xA0,F
0FD4C:  MOVLB  0
0FD4E:  MOVLB  1
0FD50:  BTFSC  xA0.5
0FD52:  BRA    FD5A
0FD54:  MOVLB  0
0FD56:  GOTO   FD78
0FD5A:  BCF    xA0.5
0FD5C:  MOVF   00,W
0FD5E:  MOVWF  xA0
0FD60:  MOVLW  2D
0FD62:  MOVLB  0
0FD64:  BTFSS  FA6.6
0FD66:  GOTO   FD64
0FD6A:  MOVLB  E
0FD6C:  MOVWF  xF9
0FD6E:  MOVLB  1
0FD70:  MOVF   xA0,W
0FD72:  MOVWF  00
0FD74:  CLRF   xA0
0FD76:  MOVLB  0
0FD78:  MOVLW  30
0FD7A:  MOVLB  1
0FD7C:  BTFSC  xA0.5
0FD7E:  BRA    FD86
0FD80:  MOVLB  0
0FD82:  GOTO   FDA6
0FD86:  BCF    xA0.5
0FD88:  MOVF   00,W
0FD8A:  MOVWF  xA0
0FD8C:  MOVLW  2D
0FD8E:  MOVLB  0
0FD90:  BTFSS  FA6.6
0FD92:  GOTO   FD90
0FD96:  MOVLB  E
0FD98:  MOVWF  xF9
0FD9A:  MOVLB  1
0FD9C:  MOVF   xA0,W
0FD9E:  MOVWF  00
0FDA0:  CLRF   xA0
0FDA2:  MOVLW  30
0FDA4:  MOVLB  0
0FDA6:  ADDWF  00,F
0FDA8:  MOVF   00,W
0FDAA:  BTFSS  FA6.6
0FDAC:  GOTO   FDAA
0FDB0:  MOVLB  E
0FDB2:  MOVWF  xF9
0FDB4:  MOVLB  0
0FDB6:  BCF    FD8.1
0FDB8:  MOVFF  1A7,206
0FDBC:  MOVFF  1A6,205
0FDC0:  MOVFF  1A5,204
0FDC4:  MOVFF  1A4,203
0FDC8:  MOVLB  2
0FDCA:  CLRF   x0A
0FDCC:  CLRF   x09
0FDCE:  CLRF   x08
0FDD0:  MOVLW  0A
0FDD2:  MOVWF  x07
0FDD4:  MOVLB  0
0FDD6:  CALL   6226
0FDDA:  MOVFF  03,1A7
0FDDE:  MOVFF  02,1A6
0FDE2:  MOVFF  01,1A5
0FDE6:  MOVFF  00,1A4
0FDEA:  MOVLB  1
0FDEC:  DECFSZ xA2,F
0FDEE:  BRA    FDF4
0FDF0:  BRA    FDFA
0FDF2:  MOVLB  0
0FDF4:  MOVLB  0
0FDF6:  GOTO   FCBA
0FDFA:  MOVLB  0
0FDFC:  RETURN 0
0FDFE:  MOVLW  20
0FE00:  MOVLB  2
0FE02:  BTFSS  x03.4
0FE04:  MOVLW  30
0FE06:  MOVWF  x04
0FE08:  MOVFF  202,00
0FE0C:  BTFSC  00.7
0FE0E:  BRA    FE16
0FE10:  MOVLB  0
0FE12:  GOTO   FE28
0FE16:  COMF   00,F
0FE18:  INCF   00,F
0FE1A:  MOVFF  00,202
0FE1E:  MOVLW  2D
0FE20:  MOVWF  x04
0FE22:  BSF    x03.7
0FE24:  BSF    x03.0
0FE26:  MOVLB  0
0FE28:  MOVF   01,W
0FE2A:  MOVFF  202,208
0FE2E:  MOVLW  64
0FE30:  MOVLB  2
0FE32:  MOVWF  x09
0FE34:  MOVLB  0
0FE36:  CALL   F41A
0FE3A:  MOVFF  00,202
0FE3E:  MOVLW  30
0FE40:  ADDWF  01,W
0FE42:  MOVLB  2
0FE44:  MOVWF  x05
0FE46:  MOVFF  202,208
0FE4A:  MOVLW  0A
0FE4C:  MOVWF  x09
0FE4E:  MOVLB  0
0FE50:  CALL   F41A
0FE54:  MOVLW  30
0FE56:  ADDWF  00,W
0FE58:  MOVLB  2
0FE5A:  MOVWF  x07
0FE5C:  MOVLW  30
0FE5E:  ADDWF  01,W
0FE60:  MOVWF  x06
0FE62:  MOVFF  204,00
0FE66:  MOVLB  0
0FE68:  MOVLW  30
0FE6A:  MOVLB  2
0FE6C:  SUBWF  x05,W
0FE6E:  BTFSS  FD8.2
0FE70:  BRA    FE78
0FE72:  MOVLB  0
0FE74:  GOTO   FE84
0FE78:  BSF    x03.1
0FE7A:  BTFSC  x03.7
0FE7C:  BSF    x03.2
0FE7E:  MOVLB  0
0FE80:  GOTO   FEC4
0FE84:  MOVFF  204,205
0FE88:  MOVLW  20
0FE8A:  MOVLB  2
0FE8C:  MOVWF  x04
0FE8E:  MOVLW  30
0FE90:  SUBWF  x06,W
0FE92:  BTFSS  FD8.2
0FE94:  BRA    FE9C
0FE96:  MOVLB  0
0FE98:  GOTO   FEA8
0FE9C:  BSF    x03.0
0FE9E:  BTFSC  x03.7
0FEA0:  BSF    x03.1
0FEA2:  MOVLB  0
0FEA4:  GOTO   FEC4
0FEA8:  BTFSC  FD8.2
0FEAA:  BRA    FEB2
0FEAC:  MOVLB  2
0FEAE:  BSF    x03.0
0FEB0:  MOVLB  0
0FEB2:  BTFSS  FD8.2
0FEB4:  GOTO   FEC4
0FEB8:  MOVFF  205,206
0FEBC:  MOVLW  20
0FEBE:  MOVLB  2
0FEC0:  MOVWF  x05
0FEC2:  MOVLB  0
0FEC4:  MOVLB  2
0FEC6:  BTFSS  x03.2
0FEC8:  BRA    FED0
0FECA:  MOVLB  0
0FECC:  GOTO   FEEA
0FED0:  BTFSS  x03.1
0FED2:  BRA    FEDA
0FED4:  MOVLB  0
0FED6:  GOTO   FEFC
0FEDA:  BTFSS  x03.0
0FEDC:  BRA    FEE4
0FEDE:  MOVLB  0
0FEE0:  GOTO   FF0E
0FEE4:  MOVLB  0
0FEE6:  GOTO   FF20
0FEEA:  MOVLB  2
0FEEC:  MOVF   x04,W
0FEEE:  MOVLB  0
0FEF0:  BTFSS  FA6.6
0FEF2:  GOTO   FEF0
0FEF6:  MOVLB  E
0FEF8:  MOVWF  xF9
0FEFA:  MOVLB  0
0FEFC:  MOVLB  2
0FEFE:  MOVF   x05,W
0FF00:  MOVLB  0
0FF02:  BTFSS  FA6.6
0FF04:  GOTO   FF02
0FF08:  MOVLB  E
0FF0A:  MOVWF  xF9
0FF0C:  MOVLB  0
0FF0E:  MOVLB  2
0FF10:  MOVF   x06,W
0FF12:  MOVLB  0
0FF14:  BTFSS  FA6.6
0FF16:  GOTO   FF14
0FF1A:  MOVLB  E
0FF1C:  MOVWF  xF9
0FF1E:  MOVLB  0
0FF20:  MOVLB  2
0FF22:  MOVF   x07,W
0FF24:  MOVLB  0
0FF26:  BTFSS  FA6.6
0FF28:  GOTO   FF26
0FF2C:  MOVLB  E
0FF2E:  MOVWF  xF9
0FF30:  MOVLB  0
0FF32:  GOTO   108DE (RETURN)
*
0FFD2:  ADDWF  FE8,W
0FFD4:  CLRF   FF7
0FFD6:  RLCF   FF7,F
0FFD8:  ADDLW  F3
0FFDA:  MOVWF  FF6
0FFDC:  MOVLW  FF
0FFDE:  ADDWFC FF7,F
0FFE0:  MOVLW  00
0FFE2:  MOVWF  FF8
0FFE4:  MOVWF  FFB
0FFE6:  TBLRD*-
0FFE8:  MOVF   FF5,W
0FFEA:  MOVWF  FFA
0FFEC:  TBLRD*
0FFEE:  MOVF   FF5,W
0FFF0:  MOVWF  FF9
0FFF2:  DATA 7A,FF
0FFF4:  DATA 8A,FF
0FFF6:  DATA AA,FF
0FFF8:  DATA BA,FF
.................... 
.................... #list
.................... 
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
*
022AE:  MOVLW  0A
022B0:  MOVWF  FEA
022B2:  MOVLW  F3
022B4:  MOVWF  FE9
022B6:  MOVF   FEF,W
022B8:  BTFSC  FD8.2
022BA:  GOTO   22DA
022BE:  MOVLW  05
022C0:  MOVWF  01
022C2:  CLRF   00
022C4:  DECFSZ 00,F
022C6:  BRA    22C4
022C8:  DECFSZ 01,F
022CA:  BRA    22C2
022CC:  MOVLW  2E
022CE:  MOVWF  00
022D0:  DECFSZ 00,F
022D2:  BRA    22D0
022D4:  BRA    22D6
022D6:  DECFSZ FEF,F
022D8:  BRA    22BE
022DA:  RETURN 0
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
*
00218:  BTFSS  FA6.5
0021A:  GOTO   0218
0021E:  MOVLB  F
00220:  MOVF   x2F,W
00222:  MOVWF  1B
00224:  MOVLB  0
00226:  MOVLB  F
00228:  MOVF   x2A,W
0022A:  MOVWF  01
0022C:  BTFSC  1B.1
0022E:  BRA    0236
00230:  MOVLB  0
00232:  GOTO   023A
00236:  BCF    x2F.4
00238:  BSF    x2F.4
0023A:  MOVLB  0
0023C:  GOTO   0276 (RETURN)
*
057D2:  BTFSS  FA6.4
057D4:  GOTO   57D2
057D8:  MOVLB  F
057DA:  MOVWF  x29
057DC:  MOVLB  0
057DE:  GOTO   5814 (RETURN)
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
*
090D4:  BTFSS  FA6.6
090D6:  GOTO   90D4
090DA:  MOVLB  E
090DC:  MOVWF  xF9
090DE:  MOVLB  0
090E0:  RETURN 0
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
*
02B6E:  MOVLB  B
02B70:  MOVF   x16,W
02B72:  SUBLW  08
02B74:  BTFSS  FD8.2
02B76:  BRA    2B7E
02B78:  MOVLB  0
02B7A:  GOTO   2B96
02B7E:  MOVWF  x18
02B80:  MOVLB  0
02B82:  MOVLB  B
02B84:  RLCF   x15,F
02B86:  DECFSZ x18,F
02B88:  BRA    2B8E
02B8A:  BRA    2B94
02B8C:  MOVLB  0
02B8E:  MOVLB  0
02B90:  GOTO   2B82
02B94:  MOVLB  0
02B96:  BSF    F92.1
02B98:  BCF    F92.0
02B9A:  BCF    F92.3
02B9C:  BCF    F89.3
02B9E:  MOVFF  B16,B18
02BA2:  MOVLB  B
02BA4:  BTFSS  x15.7
02BA6:  BCF    F89.0
02BA8:  BTFSC  x15.7
02BAA:  BSF    F89.0
02BAC:  RLCF   x15,F
02BAE:  BSF    F89.3
02BB0:  RLCF   01,F
02BB2:  BTFSS  F80.1
02BB4:  BCF    01.0
02BB6:  BTFSC  F80.1
02BB8:  BSF    01.0
02BBA:  BCF    F89.3
02BBC:  DECFSZ x18,F
02BBE:  BRA    2BC4
02BC0:  BRA    2BCA
02BC2:  MOVLB  0
02BC4:  MOVLB  0
02BC6:  GOTO   2BA2
02BCA:  MOVLB  0
02BCC:  RETURN 0
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
*
02B0E:  MOVLB  B
02B10:  MOVF   x16,W
02B12:  SUBLW  08
02B14:  BTFSS  FD8.2
02B16:  BRA    2B1E
02B18:  MOVLB  0
02B1A:  GOTO   2B36
02B1E:  MOVWF  x18
02B20:  MOVLB  0
02B22:  MOVLB  B
02B24:  RLCF   x15,F
02B26:  DECFSZ x18,F
02B28:  BRA    2B2E
02B2A:  BRA    2B34
02B2C:  MOVLB  0
02B2E:  MOVLB  0
02B30:  GOTO   2B22
02B34:  MOVLB  0
02B36:  BSF    F96.0
02B38:  BCF    F96.6
02B3A:  BCF    F96.1
02B3C:  BCF    F8D.1
02B3E:  MOVFF  B16,B18
02B42:  MOVLB  B
02B44:  BTFSS  x15.7
02B46:  BCF    F8D.6
02B48:  BTFSC  x15.7
02B4A:  BSF    F8D.6
02B4C:  RLCF   x15,F
02B4E:  BSF    F8D.1
02B50:  RLCF   01,F
02B52:  BTFSS  F84.0
02B54:  BCF    01.0
02B56:  BTFSC  F84.0
02B58:  BSF    01.0
02B5A:  BCF    F8D.1
02B5C:  DECFSZ x18,F
02B5E:  BRA    2B64
02B60:  BRA    2B6A
02B62:  MOVLB  0
02B64:  MOVLB  0
02B66:  GOTO   2B42
02B6A:  MOVLB  0
02B6C:  RETURN 0
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
*
0245C:  MOVLB  9
0245E:  MOVF   xE8,W
02460:  SUBLW  10
02462:  BTFSS  FD8.2
02464:  BRA    246C
02466:  MOVLB  0
02468:  GOTO   2486
0246C:  MOVWF  xEA
0246E:  MOVLB  0
02470:  MOVLB  9
02472:  RLCF   xE6,F
02474:  RLCF   xE7,F
02476:  DECFSZ xEA,F
02478:  BRA    247E
0247A:  BRA    2484
0247C:  MOVLB  0
0247E:  MOVLB  0
02480:  GOTO   2470
02484:  MOVLB  0
02486:  BSF    F93.4
02488:  BCF    F93.5
0248A:  BCF    F93.2
0248C:  BSF    F8A.2
0248E:  MOVFF  9E8,9EA
02492:  MOVLB  9
02494:  BTFSS  xE7.7
02496:  BCF    F8A.5
02498:  BTFSC  xE7.7
0249A:  BSF    F8A.5
0249C:  RLCF   xE6,F
0249E:  RLCF   xE7,F
024A0:  BCF    F8A.2
024A2:  RLCF   01,F
024A4:  RLCF   02,F
024A6:  BTFSS  F81.4
024A8:  BCF    01.0
024AA:  BTFSC  F81.4
024AC:  BSF    01.0
024AE:  BSF    F8A.2
024B0:  DECFSZ xEA,F
024B2:  BRA    24B8
024B4:  BRA    24BE
024B6:  MOVLB  0
024B8:  MOVLB  0
024BA:  GOTO   2492
024BE:  MOVLB  0
024C0:  RETURN 0
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
*
0281A:  MOVLB  9
0281C:  MOVF   xD3,W
0281E:  SUBLW  10
02820:  BTFSS  FD8.2
02822:  BRA    282A
02824:  MOVLB  0
02826:  GOTO   2844
0282A:  MOVWF  xD5
0282C:  MOVLB  0
0282E:  MOVLB  9
02830:  RLCF   xD1,F
02832:  RLCF   xD2,F
02834:  DECFSZ xD5,F
02836:  BRA    283C
02838:  BRA    2842
0283A:  MOVLB  0
0283C:  MOVLB  0
0283E:  GOTO   282E
02842:  MOVLB  0
02844:  BCF    F95.4
02846:  BCF    F95.5
02848:  BSF    F8C.5
0284A:  MOVFF  9D3,9D5
0284E:  MOVLB  9
02850:  BTFSS  xD2.7
02852:  BCF    F8C.4
02854:  BTFSC  xD2.7
02856:  BSF    F8C.4
02858:  RLCF   xD1,F
0285A:  RLCF   xD2,F
0285C:  BCF    F8C.5
0285E:  BSF    F8C.5
02860:  DECFSZ xD5,F
02862:  BRA    2868
02864:  BRA    286E
02866:  MOVLB  0
02868:  MOVLB  0
0286A:  GOTO   284E
0286E:  MOVLB  0
02870:  RETURN 0
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル2: ハードウェア抽象化層  
.................... #include "hal/timer.h"
.................... #ifndef _TIMER_H_
.................... #define _TIMER_H_
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... #INT_TIMER1 
.................... static void TIMER1_isr();
.................... 
.................... 
.................... // __________ functions _________
.................... void timer_init();
.................... 
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... 
.................... #endif // _TIMER_H_
.................... 
.................... #include "hal/uart.h"
.................... #ifndef _UART_H_
.................... #define _UART_H_
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif // _UART_H_
.................... //------------------End of File------------------
.................... 
.................... #include "hal/gpio.h"
.................... #ifndef GPIO_H
.................... #define GPIO_H
.................... 
.................... void gpio_init();
.................... void enable_negative_power();
.................... void disable_negative_power();
.................... void connect_port1();
.................... void disconnect_port1();
.................... void connect_port2();
.................... void disconnect_port2();
.................... 
.................... 
.................... // 
.................... void connect_negative_power1(int1 state);
.................... void connect_negative_power2(int1 state);
.................... #endif // GPIO_H
.................... 
.................... #include "device_driver/ad7490_driver.h"
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... static void ad7490_enable_cs(void);
.................... static void ad7490_disable_cs(void);
.................... 
.................... #endif // MMJ_CIGS_DEVICE_H
.................... //------------------End of File------------------
.................... 
.................... #include "device_driver/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル3: 基本ライブラリヘッダー（型定義・通信・ツール）
.................... #include "../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06,
....................     TIME_REQ          = 0x07
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/tool/mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... typedef enum smf_memory_id_t{
....................     // SATO
....................     SMF_SATO_DATA_TABLE = 0xA0,
....................     SMF_SATO_PICLOG = 0xA1,
....................     SMF_SATO_INNER_DIODE_HEADER = 0xA2,
....................     SMF_SATO_INNER_DIODE_DATA = 0xA3,
....................     SMF_SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SMF_SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     SMF_CIGS_DATA_TABLE = 0xC0,
....................     SMF_CIGS_PICLOG = 0xC1,
....................     SMF_CIGS_ENVIRO = 0xC2,
....................     SMF_CIGS_IV1_HEADER = 0xC3,
....................     SMF_CIGS_IV1_DATA = 0xC4,
....................     SMF_CIGS_IV2_HEADER = 0xC5,
....................     SMF_CIGS_IV2_DATA = 0xC6,
.................... };
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS   0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS   0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS     0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS       0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS         0x06AB0FFF
.................... #define CIGS_ENVIRO_START_ADDRESS       0x06AB1000
.................... #define CIGS_ENVIRO_END_ADDRESS         0x06B50FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS   0x06B51000
.................... #define CIGS_IV1_HEADER_END_ADDRESS     0x06BF0FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS     0x06BF1000
.................... #define CIGS_IV1_DATA_END_ADDRESS       0x06FF0FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS   0x06FF1000
.................... #define CIGS_IV2_HEADER_END_ADDRESS     0x07090FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS     0x07091000
.................... #define CIGS_IV2_DATA_END_ADDRESS       0x07490FFF
.................... 
.................... /*
.................... enum smf_memory_id{
....................     // SATO
....................     SATO_DATA_TABLE = 0xA0,
....................     SATO_PICLOG = 0xA1,
....................     SATO_INNER_DIODE_HEADER = 0xA2,
....................     SATO_INNER_DIODE_DATA = 0xA3,
....................     SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     IDF_CIGS_DATA_TABLE = 0xC0,
....................     IDF_CIGS_PICLOG = 0xC1,
....................     IDF_CIGS_ENVIRO = 0xC2,
....................     IDF_CIGS_IV1_HEADER = 0xC3,
....................     IDF_CIGS_IV1_DATA = 0xC4,
....................     IDF_CIGS_IV2_HEADER = 0xC5,
....................     IDF_CIGS_IV2_DATA = 0xC6,
.................... }
.................... */
.................... // DATA ID for CIGS
.................... #define DATA_ID_CIGS_DATA_TABLE 0xC0
.................... #define DATA_ID_CIGS_PICLOG 0xC1
.................... #define DATA_ID_CIGS_ENVIRO 0xC2
.................... #define DATA_ID_CIGS_IV1_HEADER 0xC3
.................... #define DATA_ID_CIGS_IV1_DATA 0xC4
.................... #define DATA_ID_CIGS_IV2_HEADER 0xC5
.................... #define DATA_ID_CIGS_IV2_DATA 0xC6
.................... 
.................... // FLASH ADDRESS for CIGS
.................... #define SMF_DATA_TABLE_HEADER_START_ADDRESS   0x073B0000
.................... #define SMF_DATA_TABLE_HEADER_END_ADDRESS     0x073B0FFF
.................... #define SMF_DATA_TABLE_DATA_START_ADDRESS     0x073B1000
.................... #define SMF_DATA_TABLE_DATA_END_ADDRESS       0x073B1FFF
.................... 
.................... #define SMF_PICLOG_HEADER_START_ADDRESS       0x073B2000
.................... #define SMF_PICLOG_HEADER_END_ADDRESS         0x073B2FFF
.................... #define SMF_PICLOG_DATA_START_ADDRESS         0x073B3000
.................... #define SMF_PICLOG_DATA_END_ADDRESS           0x073C2FFF
.................... 
.................... #define SMF_ENVIRO_HEADER_START_ADDRESS       0x073C3000
.................... #define SMF_ENVIRO_HEADER_END_ADDRESS         0x073C3FFF
.................... #define SMF_ENVIRO_DATA_START_ADDRESS         0x073C4000
.................... #define SMF_ENVIRO_DATA_END_ADDRESS           0x07463FFF
.................... 
.................... #define SMF_IV1_HEADER_HEADER_START_ADDRESS   0x07464000
.................... #define SMF_IV1_HEADER_HEADER_END_ADDRESS     0x07464FFF
.................... #define SMF_IV1_HEADER_DATA_START_ADDRESS     0x07465000
.................... #define SMF_IV1_HEADER_DATA_END_ADDRESS       0x07504FFF
.................... 
.................... #define SMF_IV1_DATA_HEADER_START_ADDRESS     0x07505000
.................... #define SMF_IV1_DATA_HEADER_END_ADDRESS       0x07505FFF
.................... #define SMF_IV1_DATA_DATA_START_ADDRESS       0x07506000
.................... #define SMF_IV1_DATA_DATA_END_ADDRESS         0x07905FFF
.................... 
.................... #define SMF_IV2_HEADER_HEADER_START_ADDRESS   0x07906000
.................... #define SMF_IV2_HEADER_HEADER_END_ADDRESS     0x07906FFF
.................... #define SMF_IV2_HEADER_DATA_START_ADDRESS     0x07907000
.................... #define SMF_IV2_HEADER_DATA_END_ADDRESS       0x079A6FFF
.................... 
.................... #define SMF_IV2_DATA_HEADER_START_ADDRESS     0x079A7000
.................... #define SMF_IV2_DATA_HEADER_END_ADDRESS       0x079A7FFF
.................... #define SMF_IV2_DATA_DATA_START_ADDRESS       0x079A8000
.................... #define SMF_IV2_DATA_DATA_END_ADDRESS         0x07DA7FFF
.................... 
.................... 
.................... // FLASH SIZE for CIGS
.................... #define SMF_DATA_TABLE_SIZE  4096
.................... #define SMF_PICLOG_SIZE     1310720
.................... #define SMF_ENVIRO_SIZE     1310720
.................... #define SMF_IV1_HEADER_SIZE  655360
.................... #define SMF_IV1_DATA_SIZE    4194304
.................... #define SMF_IV2_HEADER_SIZE  655360
.................... #define SMF_IV2_DATA_SIZE    4194304
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... // レベル4: デバイスドライバヘッダー
.................... #include "../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... // ================================== ADD NEW DEFINES HERE ==================================
.................... // =============================================================================================
.................... // MT25Q Flash Memory Specifications
.................... #define MT25Q_BLOCK_SIZE   4096
.................... #define MT25Q_BLOCK_NUM    8192
.................... #define DEV
.................... #ifdef DEV
.................... typedef enum mt25q_cmd{
....................     //Software RESET Operations
....................     MT25Q_CMD_RESET_ENABLE = 0x66,
....................     MT25Q_CMD_RESET_MEMORY = 0x99,
.................... 
....................     //READ ID Operations
....................     MT25Q_CMD_READ_ID = 0x9F,
....................     MT25Q_CMD_READ_ID_MULTI_IO = 0xAF,
....................     MT25Q_CMD_READ_PARAMETER = 0x5A,
.................... 
....................     //READ MEMORY Operations
....................     MT25Q_CMD_READ = 0x03,
....................     MT25Q_CMD_READ_FAST = 0x0B,
....................     MT25Q_CMD_READ_DUAL_OUTPUT_FAST = 0x3B,
....................     MT25Q_CMD_READ_DUAL_IO_FAST = 0xBB,
....................     MT25Q_CMD_READ_QUAD_OUTPUT_FAST = 0x6B,
....................     MT25Q_CMD_READ_QUAD_IO_FAST = 0xEB,
....................     MT25Q_CMD_READ_QUAD_IO = 0x6B,
....................     MT25Q_CMD_READ_DTR_FAST = 0x0D,
....................     MT25Q_CMD_READ_DTR_OUTPUT_FAST = 0x3D,
....................     MT25Q_CMD_READ_DTR_IO_FAST = 0xBD,
....................     MT25Q_CMD_READ_DTR_QUAD_OUTPUT_FAST = 0x6D,
....................     MT25Q_CMD_READ_DTR_QUAD_IO_FAST = 0xED, 
....................     MT25Q_CMD_READ_QUAD_IO_WORD = 0xE7,
.................... 
....................     //READ MEMORY Operations with 4-Byte Address
....................     MT25Q_CMD_4BYTE_READ = 0x13,
....................     MT25Q_CMD_4BYTE_READ_FAST = 0x0C,
....................     MT25Q_CMD_4BYTE_READ_DUAL_OUTPUT_FAST = 0x3C,
....................     MT25Q_CMD_4BYTE_DUAL_IO_FAST_READ = 0xBC,  
....................     MT25Q_CMD_4BYTE_QUAD_OUTPUT_FAST_READ = 0x6C,
....................     MT25Q_CMD_4BYTE_QUAD_IO_FAST_READ = 0xEC,   
....................     MT25Q_CMD_4BYTE_DTR_FAST_READ = 0x0E,
....................     MT25Q_CMD_4BYTE_DTR_DUAL_IO_FAST_READ = 0xBE,
....................     MT25Q_CMD_4BYTE_DTR_QUAD_IO_FAST_READ = 0xEE,
.................... 
....................     //WRITE Operations
....................     MT25Q_CMD_WRITE_ENABLE = 0x06,
....................     MT25Q_CMD_WRITE_DISABLE = 0x04,
.................... 
....................     //READ REGISTER Operations
....................     MT25Q_CMD_READ_STATUS_REG = 0x05,
....................     MT25Q_CMD_READ_FLAG_STATUS_REG = 0x70,
....................     MT25Q_CMD_READ_NONVOL_CFG_REG = 0xB5,
....................     MT25Q_CMD_READ_VOL_CFG_REG = 0x85,
....................     MT25Q_CMD_READ_ENHANCED_VOL_CFG_REG = 0x65,
....................     MT25Q_CMD_READ_EXT_ADDR_REG = 0xC8,
....................     MT25Q_CMD_READ_GENERAL_PURPOSE_REG = 0x96,
.................... 
....................     //WRITE REGISTER Operations
....................     MT25Q_CMD_WRITE_STATUS_REG = 0x01,
....................     MT25Q_CMD_WRITE_NONVOL_CFG_REG = 0xB1,
....................     MT25Q_CMD_WRITE_VOL_CFG_REG = 0x81,
....................     MT25Q_CMD_WRITE_ENHANCED_VOL_CFG_REG = 0x61,
....................     MT25Q_CMD_WRITE_EXT_ADDR_REG = 0xC5,
.................... 
....................     //CLEAR FLAG STATUS REGISTER Operation
....................     MT25Q_CMD_CLEAR_FLAG_STATUS_REG = 0x50,
.................... 
....................     //PROGRAM Operations
....................     MT25Q_CMD_PAGE_PROGRAM = 0x02,
....................     MT25Q_CMD_DUAL_INPUT_FAST_PROGRAM = 0xA2,
....................     MT25Q_CMD_EXT_DUAL_INPUT_FAST_PROGRAM = 0xD2,
....................     MT25Q_CMD_QUAD_INPUT_FAST_PROGRAM = 0x32,
....................     MT25Q_CMD_EXT_QUAD_INPUT_FAST_PROGRAM = 0x38,
.................... 
....................     //PROGRAM Operations with 4-Byte Address
....................     MT25Q_CMD_4BYTE_PAGE_PROGRAM = 0x12,
....................     MT25Q_CMD_4BYTE_QUAD_INPUT_FAST_PROGRAM = 0x34,
....................     MT25Q_CMD_4BYTE_QUAD_INPUT_EXT_FAST_PROGRAM = 0x3E,
.................... 
....................     //ERASE Operations
....................     MT25Q_CMD_ERASE_32KB_SUBSECTOR = 0x52,
....................     MT25Q_CMD_ERASE_4KB_SUBSECTOR = 0x20,
....................     MT25Q_CMD_ERASE_SECTOR = 0xD8,
....................     MT25Q_CMD_ERASE_BULK = 0xC7,
.................... 
....................     //ERASE Operations with 4-Byte Address
....................     MT25Q_CMD_4BYTE_ERASE_SECTOR = 0xDC,
....................     MT25Q_CMD_4BYTE_ERASE_4KB_SUBSECTOR = 0x21,
....................     
....................     //SUSPEND/RESUME Operations
....................     MT25Q_CMD_PROGRAM_ERASE_SUSPEND = 0x75,
....................     MT25Q_CMD_PROGRAM_ERASE_RESUME = 0x7A,
.................... 
....................     //ONE-WIRE PROGRAMMING Operations
....................     MT25Q_CMD_READ_OPT_ARRAY = 0x4B,
....................     MT25Q_CMD_PROGRAM_OPT_ARRYA = 0x42,
.................... 
....................     //4-BYTE ADDRESSING Operations
....................     MT25Q_CMD_ENTER_4BYTE_ADDR_MODE = 0xB7,
....................     MT25Q_CMD_EXIT_4BYTE_ADDR_MODE = 0xE9,
.................... 
....................     //QUAD PROTOCOL Operations
....................     MT25Q_CMD_ENTER_QUAD_IO_MODE = 0x35,
....................     MT25Q_CMD_RESET_QUAD_IO_MODE = 0xF5,
.................... 
....................     //DEEP POWER-DOWN Operations
....................     MT25Q_CMD_DEEP_POWER_DOWN = 0xB9,
....................     MT25Q_CMD_RELEASE_FROM_DEEP_POWER_DOWN = 0xAB,
.................... 
....................     //ADVANCED PROGRAM/ERASE CONTROLS
....................     MT25Q_CMD_READ_SECTOR_PROTECTION = 0x2D,
....................     MT25Q_CMD_PROGRAM_SECTOR_PROTECTION = 0x2C,
....................     MT25Q_CMD_READ_VOLATILE_LOCK_BITS = 0xE8,
....................     MT25Q_CMD_WRITE_VOLATILE_LOCK_BITS = 0xE5,
....................     MT25Q_CMD_READ_NONVOLATILE_LOCK_BITS = 0xE2,
....................     MT25Q_CMD_WRITE_NONVOLATILE_LOCK_BITS = 0xE3,
....................     MT25Q_CMD_READ_GLOBAL_FREEZE_BIT = 0xA7,
....................     MT25Q_CMD_WRITE_GLOBAL_FREEZE_BIT = 0xA6,
....................     MT25Q_CMD_READ_PASSWORD = 0x27,
....................     MT25Q_CMD_WRITE_PASSWORD = 0x28,
....................     MT25Q_CMD_UNLOCK_PASSWORD = 0x29,
.................... 
....................     //ADVANCED SECTOR PROTECTION Operations
....................     MT25Q_CMD_4BYTE_READ_VOLATILE_LOCK_BITS = 0xE0,
....................     MT25Q_CMD_4BYTE_WRITE_VOLATILE_LOCK_BITS = 0xE1,
.................... 
....................     //ADVANCED FUNCTIONS INTERFACE Operations
....................     MT25Q_CMD_INTERFACE_ACTIVATION = 0x98,
....................     MT25Q_CMD_CYCLIC_REDUNDANCY_CHECK = 0x9B
.................... } mt25q_cmd_t;
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 all;  // 全体アクセス
....................     struct {
....................         unsigned int8 ADDRESSING_4BYTE     : 1; // Bit0
....................         unsigned int8 PROTECTION_ERROR     : 1; // Bit1
....................         unsigned int8 PROGRAM_SUSPEND      : 1; // Bit2
....................         unsigned int8 RESERVED             : 1; // Bit3
....................         unsigned int8 PROGRAM_FAIL         : 1; // Bit4
....................         unsigned int8 ERASE_FAIL           : 1; // Bit5
....................         unsigned int8 ERASE_SUSPEND        : 1; // Bit6
....................         unsigned int8 PROGRAM_OR_ERASE_BUSY: 1; // Bit7
....................     } bit;
.................... } mt25q_sr1_t;
.................... 
.................... typedef enum {
....................     MT25QL64,
....................     MT25QL128,
....................     MT25QL256,
....................     MT25QL512,
....................     MT25QL01G
.................... } mt25q_model_t;
.................... 
.................... 
.................... typedef struct {
....................     mt25q_model_t model;
....................     unsigned int32 size_bytes;
....................     unsigned int32 page_size_bytes;
....................     unsigned int32 sector_size_bytes;
....................     unsigned int32 subsector_32k_size_bytes;
....................     unsigned int32 subsector_4k_size_bytes;
.................... } mt25q_info_t;
.................... 
.................... typedef enum {
....................     MT25Q_FUNC_READ,
....................     MT25Q_FUNC_WRITE,
....................     MT25Q_FUNC_ERASE
.................... } mt25q_func_t;
.................... 
.................... typedef struct {
....................     mt25q_func_t function;
....................     unsigned int32 address;
....................     unsigned int8 *data;
....................     unsigned int32 length;
.................... } mt25q_cmd_param_t;
.................... 
.................... #define MT25Q_CMD_MAX_SIZE 8
.................... typedef struct {
....................     unsigned int8 cmd[MT25Q_CMD_MAX_SIZE];
....................     unsigned int8 cmd_length;
.................... } mt25q_send_cmd_t;
.................... 
.................... // void mt25q_make_cmd(mt25q_info_t *flash_info, mt25q_cmd_param_t *cmd_param, mt25q_send_cmd_t *cmd)
.................... 
.................... 
.................... #endif // DEV
.................... #endif
.................... 
.................... #include "../lib/device/ad7490.h"
.................... #ifndef  _AD7490_H_
.................... #define  _AD7490_H_
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000011
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000000
.................... 
.................... 
.................... // ----------------------------
.................... // WRITE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_WRITE_DISABLE = 0,  // 書き込み無効
....................     AD7490_WRITE_ENABLE  = 1   // 書き込み有効
.................... } ad7490_write_t;
.................... 
.................... // ----------------------------
.................... // SEQ bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SEQ_DISABLE = 0,
....................     AD7490_SEQ_ENABLE  = 1
.................... } ad7490_seq_t;
.................... 
.................... // ----------------------------
.................... // CODING bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CODING_BINARY  = 0, // ストレートバイナリ
....................     AD7490_CODING_TWOS    = 1  // Two’s complement
.................... } ad7490_coding_t;
.................... 
.................... // ----------------------------
.................... // RANGE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_RANGE_2REF  = 0, // 0〜2*REFIN
....................     AD7490_RANGE_REF   = 1  // 0〜REFIN
.................... } ad7490_range_t;
.................... 
.................... // ----------------------------
.................... // WEAK/TRI bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_DOUT_TRI   = 0, // Three-state
....................     AD7490_DOUT_WEAK  = 1  // Weakly driven
.................... } ad7490_dout_t;
.................... 
.................... // ----------------------------
.................... // SHADOW bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SHADOW_DISABLE = 0,
....................     AD7490_SHADOW_ENABLE  = 1
.................... } ad7490_shadow_t;
.................... 
.................... // ----------------------------
.................... // Power Mode (PM1, PM0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_PWR_NORMAL    = 0, // 00
....................     AD7490_PWR_FULLDOWN  = 1, // 01
....................     AD7490_PWR_AUTO      = 2, // 10
....................     AD7490_PWR_SHUTDOWN  = 3  // 11
.................... } ad7490_pwr_mode_t;
.................... 
.................... // ----------------------------
.................... // Channel Address (ADD3–ADD0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CH0  = 0,
....................     AD7490_CH1  = 1,
....................     AD7490_CH2  = 2,
....................     AD7490_CH3  = 3,
....................     AD7490_CH4  = 4,
....................     AD7490_CH5  = 5,
....................     AD7490_CH6  = 6,
....................     AD7490_CH7  = 7,
....................     AD7490_CH8  = 8,
....................     AD7490_CH9  = 9,
....................     AD7490_CH10 = 10,
....................     AD7490_CH11 = 11,
....................     AD7490_CH12 = 12,
....................     AD7490_CH13 = 13,
....................     AD7490_CH14 = 14,
....................     AD7490_CH15 = 15
.................... } ad7490_channel_t;
.................... 
.................... typedef struct {
....................     ad7490_coding_t coding;
....................     ad7490_range_t range;
....................     ad7490_dout_t dout_mode;
....................     ad7490_shadow_t shadow;
....................     ad7490_pwr_mode_t power_mode;
....................     ad7490_seq_t seq_mode;
.................... } ad7490_config_t;
.................... 
.................... unsigned int16 ad7490_cmd(ad7490_config_t config);
.................... 
.................... 
.................... #endif // _AD7490_H_
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... typedef enum {
....................    MCP4901_GAIN_1X,
....................    MCP4901_GAIN_2X
.................... } MCP4901_Gain_t;
.................... 
.................... typedef enum {
....................    MCP4901_SHUTDOWN,
....................    MCP4901_NORMAL_OPERATION
.................... } MCP4901_OperationMode_t;
.................... 
.................... typedef struct {
....................    MCP4901_Gain_t gain;
....................    MCP4901_OperationMode_t mode;
.................... } MCP4901_Config_t;
.................... 
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // レベル5: 通信ライブラリヘッダー
.................... #include "../lib/communication/communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... #define SEND_TIME             0x03
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... #define SEND_TIME_LENGTH         4
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH},
....................    {SEND_TIME, SEND_TIME_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // レベル6: コア機能ヘッダー
.................... #include "domain/cigs_iv.h"
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... #define SWEEP_MAX_STEP 0xFF
.................... 
.................... typedef enum {
....................     CELL1 = 0,
....................     CELL2,
.................... } cell_select_t;
.................... 
.................... typedef struct {
....................     cell_select_t cell;
....................     unsigned int16 voltage[SWEEP_MAX_STEP];
....................     unsigned int16 current[SWEEP_MAX_STEP];
....................     unsigned int16 max_power;
....................     unsigned int16 sweep_count;
.................... } cell_iv_data_t;
.................... 
.................... typedef struct {
....................     unsigned int32 time;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 pd;
.................... } env_data_t;
.................... 
.................... typedef struct{
....................     cell_iv_data_t cell1_iv_data;
....................     cell_iv_data_t cell2_iv_data;
.................... } sweep_result_t;
.................... 
.................... typedef struct {
....................     int1 cell1;
....................     int1 cell2;
....................     unsigned int16 curr_limit;
.................... }sweep_setting_t;
.................... 
.................... 
.................... void meas_env_data(env_data_t *env_data_ptr);
.................... void meas_iv(sweep_setting_t *sweep_config_ptr, sweep_result_t *sweep_result_ptr);
.................... void save_sweep_result(env_data_t *env_data_ptr, sweep_result_t *sweep_result_ptr);
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "domain/cigs_flash.h"
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "domain/cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_save(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "domain/cigs_smf.h"
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../hal/cigs_config.h" // int8,int32 型など(CCS C) 依存
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "cigs_flash.h"       // MISF_ADDRESS_TABLE, misf_counter_table 依存
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... extern int1 smf_update_flag[10]; // SMF更新フラグ
.................... 
.................... 
.................... // SMF管理用構造体
.................... typedef struct {
....................     ADDRESS_AREA_T header_area;
....................     ADDRESS_AREA_T data_area;
.................... } SMF_AREA_T;
.................... #define SMF_ID_COUNT 7
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 reserved;
.................... } SMF_PARTITION;
.................... 
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         SMF_PARTITION headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table);
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... 
.................... // レベル7: アプリケーションヘッダー
.................... #include "application/cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... // #include "../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... void handle_recieve_time(Command *command);
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "application/cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_PRINT 0xA3
.................... #define ID_MEAS_IV_PRINT 0xA4
.................... #define ID_MEAS_PD 0xA5
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_pd(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_1sweep(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_port1(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_port2(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int16 interval;
....................     unsigned int16 pd_threshold;
....................     unsigned int16 meas_time;
....................     unsigned int16 log_threshold;
....................     unsigned int16 sweep_limit;
.................... } meas_iv_param_t;
.................... 
.................... 
.................... // MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... meas_iv_param_t make_meas_iv_cmd(int8 *uplinkcmd_ptr);
.................... void print_meas_iv_cmd(meas_iv_param_t *cmd_ptr);
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "application/cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... //==============================================================================
.................... // .cファイル統合（CCS C単一コンパイル単位）
.................... //==============================================================================
.................... 
.................... // ハードウェア層実装ファイル
.................... // 実装は各 .c からビルドするためヘッダーでの取り込みは不要。必要なら下記のように直下参照に修正。
.................... #include "hal/timer.c"
.................... #include "timer.h"
.................... #ifndef _TIMER_H_
.................... #define _TIMER_H_
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... #INT_TIMER1 
.................... static void TIMER1_isr();
.................... 
.................... 
.................... // __________ functions _________
.................... void timer_init();
.................... 
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... 
.................... #endif // _TIMER_H_
.................... 
.................... 
.................... // __________ values _________
.................... unsigned int32 time_ms = 0;
.................... unsigned int32 time_sec = 0;
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr()
.................... {
....................    set_timer0(0);  // 10msごとにリロード
*
0014E:  CLRF   FD7
00150:  CLRF   FD6
00152:  NOP   
....................    time_ms += 4;
00154:  MOVLW  04
00156:  MOVLB  1
00158:  ADDWF  x6F,F
0015A:  MOVLW  00
0015C:  ADDWFC x70,F
0015E:  MOVLW  00
00160:  ADDWFC x71,F
00162:  MOVLW  00
00164:  ADDWFC x72,F
....................    if (time_ms >= 4294967290) {
00166:  MOVF   x72,W
00168:  SUBLW  FE
0016A:  BTFSS  FD8.0
0016C:  BRA    0174
0016E:  MOVLB  0
00170:  GOTO   01D0
00174:  MOVLB  0
00176:  XORLW  FF
00178:  BTFSS  FD8.2
0017A:  GOTO   01C4
0017E:  MOVLB  1
00180:  MOVF   x71,W
00182:  SUBLW  FE
00184:  BTFSS  FD8.0
00186:  BRA    018E
00188:  MOVLB  0
0018A:  GOTO   01D0
0018E:  MOVLB  0
00190:  XORLW  FF
00192:  BTFSS  FD8.2
00194:  GOTO   01C4
00198:  MOVLB  1
0019A:  MOVF   x70,W
0019C:  SUBLW  FE
0019E:  BTFSS  FD8.0
001A0:  BRA    01A8
001A2:  MOVLB  0
001A4:  GOTO   01D0
001A8:  MOVLB  0
001AA:  XORLW  FF
001AC:  BTFSS  FD8.2
001AE:  GOTO   01C4
001B2:  MOVLB  1
001B4:  MOVF   x6F,W
001B6:  SUBLW  F9
001B8:  BTFSS  FD8.0
001BA:  BRA    01C2
001BC:  MOVLB  0
001BE:  GOTO   01D0
001C2:  MOVLB  0
....................       time_ms = 0;
001C4:  MOVLB  1
001C6:  CLRF   x72
001C8:  CLRF   x71
001CA:  CLRF   x70
001CC:  CLRF   x6F
001CE:  MOVLB  0
....................    }
.................... }
.................... 
001D0:  BCF    FF2.2
001D2:  GOTO   0090
.................... #INT_TIMER1 
.................... static void TIMER1_isr()
.................... {
....................    set_timer1(0x8000); 
001D6:  MOVLW  80
001D8:  MOVWF  FCF
001DA:  CLRF   FCE
001DC:  NOP   
....................    time_sec++;
001DE:  MOVLW  01
001E0:  MOVLB  1
001E2:  ADDWF  x73,F
001E4:  BTFSC  FD8.0
001E6:  INCF   x74,F
001E8:  BTFSC  FD8.2
001EA:  INCF   x75,F
001EC:  BTFSC  FD8.2
001EE:  INCF   x76,F
001F0:  MOVLB  0
001F2:  BCF    F9E.0
001F4:  GOTO   0090
.................... }
.................... 
.................... void timer_init()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
*
0239A:  MOVLW  F8
0239C:  MOVWF  FF6
0239E:  MOVLW  01
023A0:  MOVWF  FF7
023A2:  MOVLW  00
023A4:  MOVWF  FF8
023A6:  CALL   22DC
....................    clear_interrupt(INT_TIMER1);
023AA:  BCF    F9E.0
....................    time_ms = 0;
023AC:  MOVLB  1
023AE:  CLRF   x72
023B0:  CLRF   x71
023B2:  CLRF   x70
023B4:  CLRF   x6F
....................    time_sec = 0;
023B6:  CLRF   x76
023B8:  CLRF   x75
023BA:  CLRF   x74
023BC:  CLRF   x73
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
023BE:  MOVLW  8F
023C0:  MOVWF  FCD
023C2:  CLRF   FAA
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256|RTCC_8_BIT);
023C4:  MOVLW  D7
023C6:  MOVWF  FD5
....................    set_timer1(0); 
023C8:  CLRF   FCF
023CA:  CLRF   FCE
023CC:  NOP   
....................    enable_interrupts(INT_TIMER1);   
023CE:  BSF    F9D.0
....................    enable_interrupts(INT_TIMER0);
023D0:  BSF    FF2.5
....................    enable_interrupts(GLOBAL);
023D2:  MOVLW  C0
023D4:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
023D6:  MOVLW  0C
023D8:  MOVWF  FF6
023DA:  MOVLW  02
023DC:  MOVWF  FF7
023DE:  MOVLW  00
023E0:  MOVWF  FF8
023E2:  MOVLB  0
023E4:  CALL   22DC
023E8:  GOTO   12BCA (RETURN)
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    time_sec = new_sec;
*
0FF36:  MOVFF  19A,176
0FF3A:  MOVFF  199,175
0FF3E:  MOVFF  198,174
0FF42:  MOVFF  197,173
0FF46:  GOTO   12606 (RETURN)
.................... }
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return time_sec;
*
03C28:  MOVFF  173,00
03C2C:  MOVFF  174,01
03C30:  MOVFF  175,02
03C34:  MOVFF  176,03
03C38:  RETURN 0
.................... }
.................... 
.................... unsigned int16 get_current_msec()
.................... {
....................    return time_ms;
*
09A46:  MOVLB  1
09A48:  MOVF   x6F,W
09A4A:  MOVWF  01
09A4C:  MOVF   x70,W
09A4E:  MOVWF  02
09A50:  MOVLB  0
09A52:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "hal/uart.c"
.................... #include "uart.h"
.................... #ifndef _UART_H_
.................... #define _UART_H_
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif // _UART_H_
.................... //------------------End of File------------------
.................... 
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
00240:  GOTO   0244
00244:  GOTO   024E
00248:  BTFSS  3D.0
0024A:  GOTO   0282
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
0024E:  MOVF   3C,W
00250:  SUBLW  1F
00252:  BTFSS  FD8.0
00254:  GOTO   0282
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
00258:  MOVF   3C,W
0025A:  INCF   3C,F
0025C:  ANDLW  1F
0025E:  CLRF   03
00260:  ADDLW  1C
00262:  MOVWF  FE9
00264:  MOVLW  00
00266:  ADDWFC 03,W
00268:  MOVWF  FEA
0026A:  MOVFF  FEA,B1E
0026E:  MOVFF  FE9,B1D
00272:  GOTO   0218
00276:  MOVFF  B1E,FEA
0027A:  MOVFF  B1D,FE9
0027E:  MOVF   01,W
00280:  MOVWF  FEF
00282:  BCF    FA6.5
00284:  GOTO   0090
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
02370:  MOVLW  88
02372:  MOVWF  FF6
02374:  MOVLW  02
02376:  MOVWF  FF7
02378:  MOVLW  00
0237A:  MOVWF  FF8
0237C:  CALL   22DC
....................    enable_interrupts(INT_RDA3);
02380:  BSF    F61.5
....................    enable_interrupts(GLOBAL);
02382:  MOVLW  C0
02384:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
02386:  MOVLW  9A
02388:  MOVWF  FF6
0238A:  MOVLW  02
0238C:  MOVWF  FF7
0238E:  MOVLW  00
02390:  MOVWF  FF8
02392:  CALL   22DC
02396:  GOTO   12BC6 (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
05796:  MOVFF  1D3,03
0579A:  MOVLB  1
0579C:  MOVF   xD2,W
0579E:  MOVWF  FE9
057A0:  MOVFF  03,FEA
057A4:  MOVFF  FEF,1D4
057A8:  MOVFF  1D1,FEA
057AC:  MOVFF  1D0,FE9
057B0:  CLRF   00
057B2:  CLRF   02
057B4:  MOVFF  1D4,01
057B8:  MOVLB  0
057BA:  CALL   234C
....................    *receive_signal_size = 0;
057BE:  MOVFF  1D3,03
057C2:  MOVLB  1
057C4:  MOVF   xD2,W
057C6:  MOVWF  FE9
057C8:  MOVFF  03,FEA
057CC:  CLRF   FEF
057CE:  MOVLB  0
057D0:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "hal/gpio.c"
.................... #include "cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "gpio.h"
.................... #ifndef GPIO_H
.................... #define GPIO_H
.................... 
.................... void gpio_init();
.................... void enable_negative_power();
.................... void disable_negative_power();
.................... void connect_port1();
.................... void disconnect_port1();
.................... void connect_port2();
.................... void disconnect_port2();
.................... 
.................... 
.................... // 
.................... void connect_negative_power1(int1 state);
.................... void connect_negative_power2(int1 state);
.................... #endif // GPIO_H
.................... 
.................... #include "../../lib/tool/types.h"
.................... #ifndef TYPES_H
.................... #define TYPES_H
.................... 
.................... #define bool int1
.................... 
.................... 
.................... 
.................... #endif // TYPES_H
.................... // End of types.h
.................... 
.................... 
.................... 
.................... void gpio_init() {
....................     enable_negative_power();
....................     disconnect_port1();
....................     disconnect_port2();
.................... }
.................... 
.................... void enable_negative_power() {
....................     output_low(EN_NPWR1);
.................... }
.................... 
.................... void connect_negative_power1(int1 state) {
....................     if (state) {
*
05258:  MOVLB  1
0525A:  MOVF   x8A,F
0525C:  BTFSS  FD8.2
0525E:  BRA    5266
05260:  MOVLB  0
05262:  GOTO   5272
05266:  MOVLB  0
....................         output_low(EN_NPWR1);
05268:  MOVLW  17
0526A:  MOVWF  F94
0526C:  BCF    F8B.7
....................     } else {
0526E:  GOTO   5278
....................         output_high(EN_NPWR1);
05272:  MOVLW  17
05274:  MOVWF  F94
05276:  BSF    F8B.7
....................     }
05278:  GOTO   12C24 (RETURN)
.................... }
.................... 
.................... void connect_negative_power2(int1 state) {
....................     if (state) {
....................         output_high(EN_NPWR2);
....................     } else {
....................         output_low(EN_NPWR2);
....................     }
.................... }
.................... 
.................... void connect_port1(){
....................     output_high(CONNECT_CIGS1);
*
05248:  MOVLW  17
0524A:  MOVWF  F94
0524C:  BSF    F8B.3
0524E:  RETURN 0
.................... }
.................... 
.................... void disconnect_port1(){
....................     output_low(CONNECT_CIGS1);
*
09164:  MOVLW  17
09166:  MOVWF  F94
09168:  BCF    F8B.3
0916A:  RETURN 0
.................... }
.................... 
.................... void connect_port2(){
....................     output_high(CONNECT_CIGS2);
*
05250:  MOVLW  17
05252:  MOVWF  F94
05254:  BSF    F8B.5
05256:  RETURN 0
.................... }
.................... 
.................... void disconnect_port2(){
....................     output_low(CONNECT_CIGS2);
*
0916C:  MOVLW  17
0916E:  MOVWF  F94
09170:  BCF    F8B.5
09172:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "device_driver/ad7490_driver.c"
.................... #include "ad7490_driver.h"                          // 同じデバイスフォルダのヘッダー
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... static void ad7490_enable_cs(void);
.................... static void ad7490_disable_cs(void);
.................... 
.................... #endif // MMJ_CIGS_DEVICE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/ad7490.h"               // ADCデバイスライブラリ
.................... #ifndef  _AD7490_H_
.................... #define  _AD7490_H_
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000011
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000000
.................... 
.................... 
.................... // ----------------------------
.................... // WRITE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_WRITE_DISABLE = 0,  // 書き込み無効
....................     AD7490_WRITE_ENABLE  = 1   // 書き込み有効
.................... } ad7490_write_t;
.................... 
.................... // ----------------------------
.................... // SEQ bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SEQ_DISABLE = 0,
....................     AD7490_SEQ_ENABLE  = 1
.................... } ad7490_seq_t;
.................... 
.................... // ----------------------------
.................... // CODING bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CODING_BINARY  = 0, // ストレートバイナリ
....................     AD7490_CODING_TWOS    = 1  // Two’s complement
.................... } ad7490_coding_t;
.................... 
.................... // ----------------------------
.................... // RANGE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_RANGE_2REF  = 0, // 0〜2*REFIN
....................     AD7490_RANGE_REF   = 1  // 0〜REFIN
.................... } ad7490_range_t;
.................... 
.................... // ----------------------------
.................... // WEAK/TRI bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_DOUT_TRI   = 0, // Three-state
....................     AD7490_DOUT_WEAK  = 1  // Weakly driven
.................... } ad7490_dout_t;
.................... 
.................... // ----------------------------
.................... // SHADOW bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SHADOW_DISABLE = 0,
....................     AD7490_SHADOW_ENABLE  = 1
.................... } ad7490_shadow_t;
.................... 
.................... // ----------------------------
.................... // Power Mode (PM1, PM0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_PWR_NORMAL    = 0, // 00
....................     AD7490_PWR_FULLDOWN  = 1, // 01
....................     AD7490_PWR_AUTO      = 2, // 10
....................     AD7490_PWR_SHUTDOWN  = 3  // 11
.................... } ad7490_pwr_mode_t;
.................... 
.................... // ----------------------------
.................... // Channel Address (ADD3–ADD0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CH0  = 0,
....................     AD7490_CH1  = 1,
....................     AD7490_CH2  = 2,
....................     AD7490_CH3  = 3,
....................     AD7490_CH4  = 4,
....................     AD7490_CH5  = 5,
....................     AD7490_CH6  = 6,
....................     AD7490_CH7  = 7,
....................     AD7490_CH8  = 8,
....................     AD7490_CH9  = 9,
....................     AD7490_CH10 = 10,
....................     AD7490_CH11 = 11,
....................     AD7490_CH12 = 12,
....................     AD7490_CH13 = 13,
....................     AD7490_CH14 = 14,
....................     AD7490_CH15 = 15
.................... } ad7490_channel_t;
.................... 
.................... typedef struct {
....................     ad7490_coding_t coding;
....................     ad7490_range_t range;
....................     ad7490_dout_t dout_mode;
....................     ad7490_shadow_t shadow;
....................     ad7490_pwr_mode_t power_mode;
....................     ad7490_seq_t seq_mode;
.................... } ad7490_config_t;
.................... 
.................... unsigned int16 ad7490_cmd(ad7490_config_t config);
.................... 
.................... 
.................... #endif // _AD7490_H_
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... #define AD7490_MULTI_CHANNEL_MAX 4
.................... 
.................... unsigned int16 ad7490_make_single_channel_cmd(unsigned int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     // Set default values for all fields
....................     cmd.fields.reserved0 = 0; 
....................     cmd.fields.reserved1 = 0; 
....................     cmd.fields.reserved2 = 0; 
....................     cmd.fields.reserved3 = 0;
....................     cmd.fields.coding = AD7490_CODING_BINARY; 
....................     cmd.fields.range = AD7490_RANGE_REF; 
....................     cmd.fields.weak_tri = AD7490_DOUT_TRI; 
....................     cmd.fields.shadow = AD7490_SHADOW_DISABLE; 
....................     cmd.fields.pm0 = (AD7490_PM_NORMAL >> 0) & 1; 
....................     cmd.fields.pm1 = (AD7490_PM_NORMAL >> 1) & 1; 
....................     cmd.fields.add0 = (channel >> 0) & 1; 
....................     cmd.fields.add1 = (channel >> 1) & 1; 
....................     cmd.fields.add2 = (channel >> 2) & 1;     
....................     cmd.fields.add3 = (channel >> 3) & 1; 
....................     cmd.fields.seq = AD7490_SEQ_DISABLE; 
....................     cmd.fields.write = AD7490_WRITE_ENABLE;
.................... 
....................     return cmd.value;
.................... }
.................... 
.................... void ad7490_set_multi_channel(ad7490_channel_t channel, unsigned int8 num_channels)
.................... {
....................     ad7490_cmd_t cmd;
....................     // Set default values for all fields
....................     cmd.fields.reserved0 = 0; 
....................     cmd.fields.reserved1 = 0; 
....................     cmd.fields.reserved2 = 0; 
....................     cmd.fields.reserved3 = 0;
....................     cmd.fields.coding = AD7490_CODING_BINARY; 
....................     cmd.fields.range = AD7490_RANGE_REF; 
....................     cmd.fields.weak_tri = AD7490_DOUT_TRI; 
....................     cmd.fields.shadow = AD7490_SHADOW_DISABLE; 
....................     cmd.fields.pm0 = (AD7490_PM_NORMAL >> 0) & 1; 
....................     cmd.fields.pm1 = (AD7490_PM_NORMAL >> 1) & 1; 
....................     cmd.fields.add0 = (channel >> 0) & 1; 
....................     cmd.fields.add1 = (channel >> 1) & 1; 
....................     cmd.fields.add2 = (channel >> 2) & 1;     
....................     cmd.fields.add3 = (channel >> 3) & 1; 
....................     cmd.fields.seq = AD7490_SEQ_ENABLE; 
....................     cmd.fields.write = AD7490_WRITE_ENABLE;
.................... }
.................... 
.................... void ad7490_init()
.................... {
....................     fprintf(PC, "AD7490 Initialize\r\n");
*
025BE:  MOVLW  A6
025C0:  MOVWF  FF6
025C2:  MOVLW  02
025C4:  MOVWF  FF7
025C6:  MOVLW  00
025C8:  MOVWF  FF8
025CA:  CALL   22DC
....................     output_high(ADC_CS); 
025CE:  MOVLW  FD
025D0:  MOVWF  F93
025D2:  BSF    F8A.1
....................     delay_ms(10); 
025D4:  MOVLW  0A
025D6:  MOVLB  A
025D8:  MOVWF  xF3
025DA:  MOVLB  0
025DC:  CALL   22AE
....................     unsigned int16 readdata = ad7490_read(ADC_CIGS1_CURR);
025E0:  MOVLW  01
025E2:  MOVLB  9
025E4:  MOVWF  xDF
025E6:  MOVLB  0
025E8:  CALL   24C2
025EC:  MOVFF  02,18B
025F0:  MOVFF  01,18A
....................     delay_ms(1);
025F4:  MOVLW  01
025F6:  MOVLB  A
025F8:  MOVWF  xF3
025FA:  MOVLB  0
025FC:  CALL   22AE
....................     fprintf(PC, "\t%04LX\r\n", readdata);
02600:  MOVLW  09
02602:  BTFSS  FA6.6
02604:  GOTO   2602
02608:  MOVLB  E
0260A:  MOVWF  xF9
0260C:  MOVFF  18B,9D9
02610:  MOVLW  37
02612:  MOVLB  9
02614:  MOVWF  xDA
02616:  MOVLB  0
02618:  CALL   2542
0261C:  MOVFF  18A,9D9
02620:  MOVLW  37
02622:  MOVLB  9
02624:  MOVWF  xDA
02626:  MOVLB  0
02628:  CALL   2542
0262C:  MOVLW  0D
0262E:  BTFSS  FA6.6
02630:  GOTO   262E
02634:  MOVLB  E
02636:  MOVWF  xF9
02638:  MOVLW  0A
0263A:  MOVLB  0
0263C:  BTFSS  FA6.6
0263E:  GOTO   263C
02642:  MOVLB  E
02644:  MOVWF  xF9
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
02646:  MOVLB  1
02648:  INCFSZ x8A,W
0264A:  BRA    2650
0264C:  BRA    2656
0264E:  MOVLB  0
02650:  MOVLB  0
02652:  GOTO   266E
02656:  MOVLB  0
02658:  MOVLB  1
0265A:  INCFSZ x8B,W
0265C:  BRA    2662
0265E:  BRA    2668
02660:  MOVLB  0
02662:  MOVLB  0
02664:  GOTO   266E
02668:  MOVLB  0
0266A:  GOTO   268E
0266E:  MOVLB  1
02670:  MOVF   x8A,F
02672:  BTFSC  FD8.2
02674:  BRA    267C
02676:  MOVLB  0
02678:  GOTO   26A2
0267C:  MOVLB  0
0267E:  MOVLB  1
02680:  MOVF   x8B,F
02682:  BTFSC  FD8.2
02684:  BRA    268C
02686:  MOVLB  0
02688:  GOTO   26A2
0268C:  MOVLB  0
....................         fprintf(PC, "\tConnect error!\r\n");
0268E:  MOVLW  BA
02690:  MOVWF  FF6
02692:  MOVLW  02
02694:  MOVWF  FF7
02696:  MOVLW  00
02698:  MOVWF  FF8
0269A:  CALL   22DC
....................     } else {
0269E:  GOTO   26B2
....................         fprintf(PC, "\tConnect successful\r\n");
026A2:  MOVLW  CC
026A4:  MOVWF  FF6
026A6:  MOVLW  02
026A8:  MOVWF  FF7
026AA:  MOVLW  00
026AC:  MOVWF  FF8
026AE:  CALL   22DC
....................     }
....................     fprintf(PC, "\tComplete\r\n");
026B2:  MOVLW  E2
026B4:  MOVWF  FF6
026B6:  MOVLW  02
026B8:  MOVWF  FF7
026BA:  MOVLW  00
026BC:  MOVWF  FF8
026BE:  CALL   22DC
026C2:  GOTO   12BCE (RETURN)
.................... }
.................... 
.................... unsigned int16 ad7490_read(int8 channel)
*
024C2:  MOVFF  9DF,9E6
024C6:  GOTO   23EC
024CA:  MOVFF  02,9E1
024CE:  MOVFF  01,9E0
.................... {   
....................     unsigned int16 cmd = ad7490_make_cmd(channel);
....................     // fprintf(PC, "\t[ADC] Command: %04LX\r\n", cmd);
....................     output_low(ADC_CS); 
024D2:  MOVLW  FD
024D4:  MOVWF  F93
024D6:  BCF    F8A.1
....................     delay_us(1); 
024D8:  BRA    24DA
024DA:  BRA    24DC
....................     spi_xfer(ADC_STREAM, cmd); 
024DC:  MOVFF  9E1,9E7
024E0:  MOVFF  9E0,9E6
024E4:  MOVLW  10
024E6:  MOVLB  9
024E8:  MOVWF  xE8
024EA:  MOVLW  01
024EC:  MOVWF  xE9
024EE:  MOVLB  0
024F0:  CALL   245C
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd);
....................     #endif
....................     output_high(ADC_CS); 
024F4:  MOVLW  FD
024F6:  MOVWF  F93
024F8:  BSF    F8A.1
....................     delay_us(1);
024FA:  BRA    24FC
024FC:  BRA    24FE
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
024FE:  MOVLW  FD
02500:  MOVWF  F93
02502:  BCF    F8A.1
....................     delay_us(1);
02504:  BRA    2506
02506:  BRA    2508
....................     unsigned int16 ans = spi_xfer(ADC_STREAM, 0x0000);
02508:  MOVLB  9
0250A:  CLRF   xE7
0250C:  CLRF   xE6
0250E:  MOVLW  10
02510:  MOVWF  xE8
02512:  MOVLW  01
02514:  MOVWF  xE9
02516:  MOVLB  0
02518:  CALL   245C
0251C:  MOVFF  02,9E3
02520:  MOVFF  01,9E2
....................     output_high(ADC_CS); 
02524:  MOVLW  FD
02526:  MOVWF  F93
02528:  BSF    F8A.1
....................     unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
0252A:  MOVLB  9
0252C:  MOVF   xE2,W
0252E:  MOVWF  xE4
02530:  MOVF   xE3,W
02532:  ANDLW  0F
02534:  MOVWF  xE5
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata);
....................     #endif
....................     return readdata;
02536:  MOVF   xE4,W
02538:  MOVWF  01
0253A:  MOVF   xE5,W
0253C:  MOVWF  02
0253E:  MOVLB  0
02540:  RETURN 0
.................... }
.................... 
.................... void ad7490_read_2port(unsigned int8 channel1, unsigned int8 channel2, unsigned int16 *data1, unsigned int16 *data2)
.................... {   
....................     unsigned int16 cmd1 = ad7490_make_cmd(channel1);
....................     unsigned int16 cmd2 = ad7490_make_cmd(channel2);
....................     // fprintf(PC, "\t[ADC] Command: %04LX\r\n", cmd);
....................     output_low(ADC_CS); 
....................     delay_us(1); 
....................     spi_xfer(ADC_STREAM, cmd1); 
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd1);
....................     #endif
....................     output_high(ADC_CS); 
....................     delay_us(1);
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
....................     delay_us(1);
....................     unsigned int16 ans1 = spi_xfer(ADC_STREAM, cmd2);
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd2);
....................     #endif
....................     output_high(ADC_CS); 
....................     delay_us(1);
....................     unsigned int16 ans2 = spi_xfer(ADC_STREAM, 0x0000);
....................     output_high(ADC_CS); 
....................     unsigned int16 readdata1 = ans1 & 0x0FFF; //Conver LSB <--> MSB
....................     unsigned int16 readdata2 = ans2 & 0x0FFF; //Conver LSB <--> MSB
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata1);
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata2);
....................     #endif
....................     *data1 = readdata1;
....................     *data2 = readdata2;
.................... }
.................... 
.................... 
.................... // End of file
.................... 
.................... #include "device_driver/mcp4901_driver.c"
.................... #include "mcp4901_driver.h"                        
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/cigs_config.h"             
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mcp4901.h"       
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... typedef enum {
....................    MCP4901_GAIN_1X,
....................    MCP4901_GAIN_2X
.................... } MCP4901_Gain_t;
.................... 
.................... typedef enum {
....................    MCP4901_SHUTDOWN,
....................    MCP4901_NORMAL_OPERATION
.................... } MCP4901_OperationMode_t;
.................... 
.................... typedef struct {
....................    MCP4901_Gain_t gain;
....................    MCP4901_OperationMode_t mode;
.................... } MCP4901_Config_t;
.................... 
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // #define MCP4901_DEBUG
.................... 
.................... void mcp4901_init()
.................... {
....................     fprintf(PC, "MCP4901 Initialize\r\n");
*
028EE:  MOVLW  EE
028F0:  MOVWF  FF6
028F2:  MOVLW  02
028F4:  MOVWF  FF7
028F6:  MOVLW  00
028F8:  MOVWF  FF8
028FA:  CALL   22DC
....................     output_high(DAC1_CS); 
028FE:  MOVLW  3F
02900:  MOVWF  F95
02902:  BSF    F8C.7
....................     output_high(DAC2_CS); 
02904:  MOVLW  3F
02906:  MOVWF  F95
02908:  BSF    F8C.6
....................     delay_ms(10); 
0290A:  MOVLW  0A
0290C:  MOVLB  A
0290E:  MOVWF  xF3
02910:  MOVLB  0
02912:  CALL   22AE
....................     mcp4901_1_write(10); 
02916:  MOVLB  9
02918:  CLRF   xCE
0291A:  MOVLW  0A
0291C:  MOVWF  xCD
0291E:  MOVLB  0
02920:  CALL   2872
....................     mcp4901_2_write(10); 
02924:  MOVLB  9
02926:  CLRF   xCE
02928:  MOVLW  0A
0292A:  MOVWF  xCD
0292C:  MOVLB  0
0292E:  CALL   28B0
....................     unsigned int16 readdata;
....................     readdata = ad7490_read(ADC_CIGS1_CURR); 
02932:  MOVLW  01
02934:  MOVLB  9
02936:  MOVWF  xDF
02938:  MOVLB  0
0293A:  CALL   24C2
0293E:  MOVFF  02,18B
02942:  MOVFF  01,18A
....................     fprintf(PC, "%04LX\r\n", readdata);
02946:  MOVFF  18B,9D9
0294A:  MOVLW  37
0294C:  MOVLB  9
0294E:  MOVWF  xDA
02950:  MOVLB  0
02952:  CALL   2542
02956:  MOVFF  18A,9D9
0295A:  MOVLW  37
0295C:  MOVLB  9
0295E:  MOVWF  xDA
02960:  MOVLB  0
02962:  CALL   2542
02966:  MOVLW  0D
02968:  BTFSS  FA6.6
0296A:  GOTO   2968
0296E:  MOVLB  E
02970:  MOVWF  xF9
02972:  MOVLW  0A
02974:  MOVLB  0
02976:  BTFSS  FA6.6
02978:  GOTO   2976
0297C:  MOVLB  E
0297E:  MOVWF  xF9
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
02980:  MOVLB  1
02982:  INCFSZ x8A,W
02984:  BRA    298A
02986:  BRA    2990
02988:  MOVLB  0
0298A:  MOVLB  0
0298C:  GOTO   29A8
02990:  MOVLB  0
02992:  MOVLB  1
02994:  INCFSZ x8B,W
02996:  BRA    299C
02998:  BRA    29A2
0299A:  MOVLB  0
0299C:  MOVLB  0
0299E:  GOTO   29A8
029A2:  MOVLB  0
029A4:  GOTO   29C8
029A8:  MOVLB  1
029AA:  MOVF   x8A,F
029AC:  BTFSC  FD8.2
029AE:  BRA    29B6
029B0:  MOVLB  0
029B2:  GOTO   29DC
029B6:  MOVLB  0
029B8:  MOVLB  1
029BA:  MOVF   x8B,F
029BC:  BTFSC  FD8.2
029BE:  BRA    29C6
029C0:  MOVLB  0
029C2:  GOTO   29DC
029C6:  MOVLB  0
....................         fprintf(PC, "\t[DAC Port 1] Connect error!\r\n");
029C8:  MOVLW  04
029CA:  MOVWF  FF6
029CC:  MOVLW  03
029CE:  MOVWF  FF7
029D0:  MOVLW  00
029D2:  MOVWF  FF8
029D4:  CALL   22DC
....................     } else {
029D8:  GOTO   29EC
....................         fprintf(PC, "\t[DAC Port 1] Connect successful\r\n");
029DC:  MOVLW  24
029DE:  MOVWF  FF6
029E0:  MOVLW  03
029E2:  MOVWF  FF7
029E4:  MOVLW  00
029E6:  MOVWF  FF8
029E8:  CALL   22DC
....................     }
....................     fprintf(PC, "%04LX\r\n", readdata);
029EC:  MOVFF  18B,9D9
029F0:  MOVLW  37
029F2:  MOVLB  9
029F4:  MOVWF  xDA
029F6:  MOVLB  0
029F8:  CALL   2542
029FC:  MOVFF  18A,9D9
02A00:  MOVLW  37
02A02:  MOVLB  9
02A04:  MOVWF  xDA
02A06:  MOVLB  0
02A08:  CALL   2542
02A0C:  MOVLW  0D
02A0E:  BTFSS  FA6.6
02A10:  GOTO   2A0E
02A14:  MOVLB  E
02A16:  MOVWF  xF9
02A18:  MOVLW  0A
02A1A:  MOVLB  0
02A1C:  BTFSS  FA6.6
02A1E:  GOTO   2A1C
02A22:  MOVLB  E
02A24:  MOVWF  xF9
....................     readdata = ad7490_read(ADC_CIGS2_CURR); 
02A26:  MOVLW  05
02A28:  MOVLB  9
02A2A:  MOVWF  xDF
02A2C:  MOVLB  0
02A2E:  CALL   24C2
02A32:  MOVFF  02,18B
02A36:  MOVFF  01,18A
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
02A3A:  MOVLB  1
02A3C:  INCFSZ x8A,W
02A3E:  BRA    2A44
02A40:  BRA    2A4A
02A42:  MOVLB  0
02A44:  MOVLB  0
02A46:  GOTO   2A62
02A4A:  MOVLB  0
02A4C:  MOVLB  1
02A4E:  INCFSZ x8B,W
02A50:  BRA    2A56
02A52:  BRA    2A5C
02A54:  MOVLB  0
02A56:  MOVLB  0
02A58:  GOTO   2A62
02A5C:  MOVLB  0
02A5E:  GOTO   2A82
02A62:  MOVLB  1
02A64:  MOVF   x8A,F
02A66:  BTFSC  FD8.2
02A68:  BRA    2A70
02A6A:  MOVLB  0
02A6C:  GOTO   2A96
02A70:  MOVLB  0
02A72:  MOVLB  1
02A74:  MOVF   x8B,F
02A76:  BTFSC  FD8.2
02A78:  BRA    2A80
02A7A:  MOVLB  0
02A7C:  GOTO   2A96
02A80:  MOVLB  0
....................         fprintf(PC, "\t[DAC Port 2] Connect error!\r\n");
02A82:  MOVLW  48
02A84:  MOVWF  FF6
02A86:  MOVLW  03
02A88:  MOVWF  FF7
02A8A:  MOVLW  00
02A8C:  MOVWF  FF8
02A8E:  CALL   22DC
....................     } else {
02A92:  GOTO   2AA6
....................         fprintf(PC, "\t[DAC Port 2] Connect successful\r\n");
02A96:  MOVLW  68
02A98:  MOVWF  FF6
02A9A:  MOVLW  03
02A9C:  MOVWF  FF7
02A9E:  MOVLW  00
02AA0:  MOVWF  FF8
02AA2:  CALL   22DC
....................     }
....................     fprintf(PC, "\tComplete\r\n");
02AA6:  MOVLW  8C
02AA8:  MOVWF  FF6
02AAA:  MOVLW  03
02AAC:  MOVWF  FF7
02AAE:  MOVLW  00
02AB0:  MOVWF  FF8
02AB2:  CALL   22DC
02AB6:  GOTO   12BD2 (RETURN)
.................... }
.................... 
.................... 
.................... void mcp4901_1_write(unsigned int16 value)
*
02872:  MOVFF  9CE,9D2
02876:  MOVFF  9CD,9D1
0287A:  CALL   26C6
0287E:  MOVFF  02,9D0
02882:  MOVFF  01,9CF
.................... {
....................     unsigned int16 cmd = mcp4901_make_cmd(value);
....................     #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................     #endif
....................     output_low(DAC1_CS); 
02886:  MOVLW  3F
02888:  MOVWF  F95
0288A:  BCF    F8C.7
....................     delay_us(1); 
0288C:  BRA    288E
0288E:  BRA    2890
....................     spi_xfer(DAC_STREAM, cmd); 
02890:  MOVFF  9D0,9D2
02894:  MOVFF  9CF,9D1
02898:  MOVLW  10
0289A:  MOVLB  9
0289C:  MOVWF  xD3
0289E:  MOVLW  01
028A0:  MOVWF  xD4
028A2:  MOVLB  0
028A4:  CALL   281A
....................     output_high(DAC1_CS); 
028A8:  MOVLW  3F
028AA:  MOVWF  F95
028AC:  BSF    F8C.7
028AE:  RETURN 0
.................... }
.................... 
.................... void mcp4901_2_write(unsigned int16 value)
028B0:  MOVFF  9CE,9D2
028B4:  MOVFF  9CD,9D1
028B8:  CALL   26C6
028BC:  MOVFF  02,9D0
028C0:  MOVFF  01,9CF
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC2_CS); 
028C4:  MOVLW  3F
028C6:  MOVWF  F95
028C8:  BCF    F8C.6
....................    delay_us(1); 
028CA:  BRA    28CC
028CC:  BRA    28CE
....................    spi_xfer(DAC_STREAM, cmd); 
028CE:  MOVFF  9D0,9D2
028D2:  MOVFF  9CF,9D1
028D6:  MOVLW  10
028D8:  MOVLB  9
028DA:  MOVWF  xD3
028DC:  MOVLW  01
028DE:  MOVWF  xD4
028E0:  MOVLB  0
028E2:  CALL   281A
....................    output_high(DAC2_CS); 
028E6:  MOVLW  3F
028E8:  MOVWF  F95
028EA:  BSF    F8C.6
028EC:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... 
.................... // ライブラリ実装ファイル
.................... #include "../lib/device/ad7490.c"
.................... // #include "ad7490.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 ad7490_readdata(unsigned int16 channel)
.................... {
....................     spi_xfer(ADC_STREAM, channel); // Dummy transfer to start communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC, "\t[ADC] <<< %04LX\r\n", channel);
....................     #endif
....................     unsigned int16 ans = spi_xfer(ADC_STREAM);
....................     return ans & 0x0FFF; //Conver LSB <--> MSB
.................... }
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     cmd.fields.reserved0 = 0; // Reserved bits
*
023EC:  MOVLB  9
023EE:  BCF    xE7.0
....................     cmd.fields.reserved1 = 0; // Reserved bits
023F0:  BCF    xE7.1
....................     cmd.fields.reserved2 = 0; // Reserved bits
023F2:  BCF    xE7.2
....................     cmd.fields.reserved3 = 0;
023F4:  BCF    xE7.3
....................     cmd.fields.coding = 1; // Two's complement
023F6:  BSF    xE7.4
....................     cmd.fields.range = 0; // Normal mode
023F8:  BCF    xE7.5
....................     cmd.fields.weak_tri = 0; // Strong trigger
023FA:  BCF    xE7.6
....................     cmd.fields.shadow = 0; // Direct access
023FC:  BCF    xE7.7
....................     cmd.fields.pm0 = AD7490_PM_NORMAL & 0b00000001; // Power mode bits
023FE:  BSF    xE8.0
....................     cmd.fields.pm1 = (AD7490_PM_NORMAL >> 1) & 0b00000001; // Power mode bits
02400:  BSF    xE8.1
....................     cmd.fields.add0 = (channel >> 0) & 0b00000001; // Channel address bits
02402:  MOVF   xE6,W
02404:  ANDLW  01
02406:  MOVWF  01
02408:  BCF    xE8.2
0240A:  BTFSC  01.0
0240C:  BSF    xE8.2
....................     cmd.fields.add1 = (channel >> 1) & 0b00000001; // Channel address bits
0240E:  BCF    FD8.0
02410:  RRCF   xE6,W
02412:  ANDLW  01
02414:  MOVWF  01
02416:  BCF    xE8.3
02418:  BTFSC  01.0
0241A:  BSF    xE8.3
....................     cmd.fields.add2 = (channel >> 2) & 0b00000001; // Channel address bits
0241C:  RRCF   xE6,W
0241E:  MOVWF  00
02420:  RRCF   00,F
02422:  MOVLW  3F
02424:  ANDWF  00,F
02426:  MOVF   00,W
02428:  ANDLW  01
0242A:  MOVWF  01
0242C:  BCF    xE8.4
0242E:  BTFSC  01.0
02430:  BSF    xE8.4
....................     cmd.fields.add3 = (channel >> 3) & 0b00000001; // Channel address bits
02432:  RRCF   xE6,W
02434:  MOVWF  00
02436:  RRCF   00,F
02438:  RRCF   00,F
0243A:  MOVLW  1F
0243C:  ANDWF  00,F
0243E:  MOVF   00,W
02440:  ANDLW  01
02442:  MOVWF  01
02444:  BCF    xE8.5
02446:  BTFSC  01.0
02448:  BSF    xE8.5
....................     cmd.fields.seq = 0; // Random mode
0244A:  BCF    xE8.6
....................     cmd.fields.write = 1; // Read operation
0244C:  BSF    xE8.7
....................     return cmd.value;
0244E:  MOVF   xE7,W
02450:  MOVWF  01
02452:  MOVF   xE8,W
02454:  MOVWF  02
02456:  MOVLB  0
02458:  GOTO   24CA (RETURN)
.................... }
.................... 
.................... unsigned int16 ad7490_cmd(ad7490_config_t *config)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     cmd.fields.reserved0 = 0; 
....................     cmd.fields.reserved1 = 0; 
....................     cmd.fields.reserved2 = 0; 
....................     cmd.fields.reserved3 = 0;
....................     cmd.fields.coding = config->coding; 
....................     cmd.fields.range = config->range; 
....................     cmd.fields.weak_tri = config->dout_mode; 
....................     cmd.fields.shadow = config->shadow; 
....................     cmd.fields.pm0 = (config->power_mode >> 0) & 1; 
....................     cmd.fields.pm1 = (config->power_mode >> 1) & 1; 
....................     // Channel bits should be set separately after this function
....................     cmd.fields.seq = config->seq_mode; 
....................     cmd.fields.write = AD7490_WRITE_ENABLE;
....................     return cmd.value;
.................... }
.................... 
.................... static void ad7490_enable_cs(void)
.................... {
....................     output_low(ADC_CS); 
.................... }
.................... 
.................... static void ad7490_disable_cs(void)
.................... {
....................     output_high(ADC_CS); 
.................... }
.................... 
.................... #include "../lib/device/mcp4901.c"
.................... // #include "mcp4901.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value)
.................... {
....................    mcp4901_cmd_t cmd;
....................    cmd.fields.startbit = 0; // Start bit
*
026C6:  MOVLB  9
026C8:  BCF    xD4.7
....................    cmd.fields.buffer = 1; // Buffer used
026CA:  BSF    xD4.6
....................    cmd.fields.gain = 1; // Gain 1x
026CC:  BSF    xD4.5
....................    cmd.fields.shutdown = 1; // Normal operation
026CE:  BSF    xD4.4
....................    cmd.fields.data7 = (value >> 7) & 0x01;
026D0:  RRCF   xD2,W
026D2:  MOVWF  xD6
026D4:  RRCF   xD1,W
026D6:  MOVWF  xD5
026D8:  RRCF   xD6,F
026DA:  RRCF   xD5,F
026DC:  RRCF   xD6,F
026DE:  RRCF   xD5,F
026E0:  RRCF   xD6,F
026E2:  RRCF   xD5,F
026E4:  RRCF   xD6,F
026E6:  RRCF   xD5,F
026E8:  RRCF   xD6,F
026EA:  RRCF   xD5,F
026EC:  RRCF   xD6,F
026EE:  RRCF   xD5,F
026F0:  MOVLW  01
026F2:  ANDWF  xD6,F
026F4:  MOVF   xD5,W
026F6:  ANDLW  01
026F8:  MOVWF  00
026FA:  CLRF   03
026FC:  MOVF   00,W
026FE:  MOVWF  01
02700:  BCF    xD4.3
02702:  BTFSC  01.0
02704:  BSF    xD4.3
....................    cmd.fields.data6 = (value >> 6) & 0x01;
02706:  RRCF   xD2,W
02708:  MOVWF  xD6
0270A:  RRCF   xD1,W
0270C:  MOVWF  xD5
0270E:  RRCF   xD6,F
02710:  RRCF   xD5,F
02712:  RRCF   xD6,F
02714:  RRCF   xD5,F
02716:  RRCF   xD6,F
02718:  RRCF   xD5,F
0271A:  RRCF   xD6,F
0271C:  RRCF   xD5,F
0271E:  RRCF   xD6,F
02720:  RRCF   xD5,F
02722:  MOVLW  03
02724:  ANDWF  xD6,F
02726:  MOVF   xD5,W
02728:  ANDLW  01
0272A:  MOVWF  00
0272C:  CLRF   03
0272E:  MOVF   00,W
02730:  MOVWF  01
02732:  BCF    xD4.2
02734:  BTFSC  01.0
02736:  BSF    xD4.2
....................    cmd.fields.data5 = (value >> 5) & 0x01;
02738:  RRCF   xD2,W
0273A:  MOVWF  xD6
0273C:  RRCF   xD1,W
0273E:  MOVWF  xD5
02740:  RRCF   xD6,F
02742:  RRCF   xD5,F
02744:  RRCF   xD6,F
02746:  RRCF   xD5,F
02748:  RRCF   xD6,F
0274A:  RRCF   xD5,F
0274C:  RRCF   xD6,F
0274E:  RRCF   xD5,F
02750:  MOVLW  07
02752:  ANDWF  xD6,F
02754:  MOVF   xD5,W
02756:  ANDLW  01
02758:  MOVWF  00
0275A:  CLRF   03
0275C:  MOVF   00,W
0275E:  MOVWF  01
02760:  BCF    xD4.1
02762:  BTFSC  01.0
02764:  BSF    xD4.1
....................    cmd.fields.data4 = (value >> 4) & 0x01;
02766:  RRCF   xD2,W
02768:  MOVWF  xD6
0276A:  RRCF   xD1,W
0276C:  MOVWF  xD5
0276E:  RRCF   xD6,F
02770:  RRCF   xD5,F
02772:  RRCF   xD6,F
02774:  RRCF   xD5,F
02776:  RRCF   xD6,F
02778:  RRCF   xD5,F
0277A:  MOVLW  0F
0277C:  ANDWF  xD6,F
0277E:  MOVF   xD5,W
02780:  ANDLW  01
02782:  MOVWF  00
02784:  CLRF   03
02786:  MOVF   00,W
02788:  MOVWF  01
0278A:  BCF    xD4.0
0278C:  BTFSC  01.0
0278E:  BSF    xD4.0
....................    cmd.fields.data3 = (value >> 3) & 0x01;
02790:  RRCF   xD2,W
02792:  MOVWF  xD6
02794:  RRCF   xD1,W
02796:  MOVWF  xD5
02798:  RRCF   xD6,F
0279A:  RRCF   xD5,F
0279C:  RRCF   xD6,F
0279E:  RRCF   xD5,F
027A0:  MOVLW  1F
027A2:  ANDWF  xD6,F
027A4:  MOVF   xD5,W
027A6:  ANDLW  01
027A8:  MOVWF  00
027AA:  CLRF   03
027AC:  MOVF   00,W
027AE:  MOVWF  01
027B0:  BCF    xD3.7
027B2:  BTFSC  01.0
027B4:  BSF    xD3.7
....................    cmd.fields.data2 = (value >> 2) & 0x01;
027B6:  RRCF   xD2,W
027B8:  MOVWF  xD6
027BA:  RRCF   xD1,W
027BC:  MOVWF  xD5
027BE:  RRCF   xD6,F
027C0:  RRCF   xD5,F
027C2:  MOVLW  3F
027C4:  ANDWF  xD6,F
027C6:  MOVF   xD5,W
027C8:  ANDLW  01
027CA:  MOVWF  00
027CC:  CLRF   03
027CE:  MOVF   00,W
027D0:  MOVWF  01
027D2:  BCF    xD3.6
027D4:  BTFSC  01.0
027D6:  BSF    xD3.6
....................    cmd.fields.data1 = (value >> 1) & 0x01;
027D8:  BCF    FD8.0
027DA:  RRCF   xD2,W
027DC:  MOVWF  xD6
027DE:  RRCF   xD1,W
027E0:  MOVWF  xD5
027E2:  MOVF   xD5,W
027E4:  ANDLW  01
027E6:  MOVWF  00
027E8:  CLRF   03
027EA:  MOVF   00,W
027EC:  MOVWF  01
027EE:  BCF    xD3.5
027F0:  BTFSC  01.0
027F2:  BSF    xD3.5
....................    cmd.fields.data0 = value & 0x01; // LSB of the data
027F4:  MOVF   xD1,W
027F6:  ANDLW  01
027F8:  MOVWF  00
027FA:  CLRF   03
027FC:  MOVF   00,W
027FE:  MOVWF  01
02800:  BCF    xD3.4
02802:  BTFSC  01.0
02804:  BSF    xD3.4
....................    cmd.fields.reserved = 0; // Reserved bits
02806:  BCF    xD3.3
....................    cmd.fields.reserved2 = 0; // Reserved bits
02808:  BCF    xD3.2
....................    cmd.fields.reserved3 = 0; // Reserved bits
0280A:  BCF    xD3.1
....................    cmd.fields.reserved4 = 0; // Reserved bits
0280C:  BCF    xD3.0
.................... 
....................    return cmd.value;
0280E:  MOVF   xD3,W
02810:  MOVWF  01
02812:  MOVF   xD4,W
02814:  MOVWF  02
02816:  MOVLB  0
02818:  RETURN 0
.................... }
.................... 
.................... #include "../lib/device/mt25q.c"
.................... #include "mt25q.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... // ================================== ADD NEW DEFINES HERE ==================================
.................... // =============================================================================================
.................... // MT25Q Flash Memory Specifications
.................... #define MT25Q_BLOCK_SIZE   4096
.................... #define MT25Q_BLOCK_NUM    8192
.................... #define DEV
.................... #ifdef DEV
.................... typedef enum mt25q_cmd{
....................     //Software RESET Operations
....................     MT25Q_CMD_RESET_ENABLE = 0x66,
....................     MT25Q_CMD_RESET_MEMORY = 0x99,
.................... 
....................     //READ ID Operations
....................     MT25Q_CMD_READ_ID = 0x9F,
....................     MT25Q_CMD_READ_ID_MULTI_IO = 0xAF,
....................     MT25Q_CMD_READ_PARAMETER = 0x5A,
.................... 
....................     //READ MEMORY Operations
....................     MT25Q_CMD_READ = 0x03,
....................     MT25Q_CMD_READ_FAST = 0x0B,
....................     MT25Q_CMD_READ_DUAL_OUTPUT_FAST = 0x3B,
....................     MT25Q_CMD_READ_DUAL_IO_FAST = 0xBB,
....................     MT25Q_CMD_READ_QUAD_OUTPUT_FAST = 0x6B,
....................     MT25Q_CMD_READ_QUAD_IO_FAST = 0xEB,
....................     MT25Q_CMD_READ_QUAD_IO = 0x6B,
....................     MT25Q_CMD_READ_DTR_FAST = 0x0D,
....................     MT25Q_CMD_READ_DTR_OUTPUT_FAST = 0x3D,
....................     MT25Q_CMD_READ_DTR_IO_FAST = 0xBD,
....................     MT25Q_CMD_READ_DTR_QUAD_OUTPUT_FAST = 0x6D,
....................     MT25Q_CMD_READ_DTR_QUAD_IO_FAST = 0xED, 
....................     MT25Q_CMD_READ_QUAD_IO_WORD = 0xE7,
.................... 
....................     //READ MEMORY Operations with 4-Byte Address
....................     MT25Q_CMD_4BYTE_READ = 0x13,
....................     MT25Q_CMD_4BYTE_READ_FAST = 0x0C,
....................     MT25Q_CMD_4BYTE_READ_DUAL_OUTPUT_FAST = 0x3C,
....................     MT25Q_CMD_4BYTE_DUAL_IO_FAST_READ = 0xBC,  
....................     MT25Q_CMD_4BYTE_QUAD_OUTPUT_FAST_READ = 0x6C,
....................     MT25Q_CMD_4BYTE_QUAD_IO_FAST_READ = 0xEC,   
....................     MT25Q_CMD_4BYTE_DTR_FAST_READ = 0x0E,
....................     MT25Q_CMD_4BYTE_DTR_DUAL_IO_FAST_READ = 0xBE,
....................     MT25Q_CMD_4BYTE_DTR_QUAD_IO_FAST_READ = 0xEE,
.................... 
....................     //WRITE Operations
....................     MT25Q_CMD_WRITE_ENABLE = 0x06,
....................     MT25Q_CMD_WRITE_DISABLE = 0x04,
.................... 
....................     //READ REGISTER Operations
....................     MT25Q_CMD_READ_STATUS_REG = 0x05,
....................     MT25Q_CMD_READ_FLAG_STATUS_REG = 0x70,
....................     MT25Q_CMD_READ_NONVOL_CFG_REG = 0xB5,
....................     MT25Q_CMD_READ_VOL_CFG_REG = 0x85,
....................     MT25Q_CMD_READ_ENHANCED_VOL_CFG_REG = 0x65,
....................     MT25Q_CMD_READ_EXT_ADDR_REG = 0xC8,
....................     MT25Q_CMD_READ_GENERAL_PURPOSE_REG = 0x96,
.................... 
....................     //WRITE REGISTER Operations
....................     MT25Q_CMD_WRITE_STATUS_REG = 0x01,
....................     MT25Q_CMD_WRITE_NONVOL_CFG_REG = 0xB1,
....................     MT25Q_CMD_WRITE_VOL_CFG_REG = 0x81,
....................     MT25Q_CMD_WRITE_ENHANCED_VOL_CFG_REG = 0x61,
....................     MT25Q_CMD_WRITE_EXT_ADDR_REG = 0xC5,
.................... 
....................     //CLEAR FLAG STATUS REGISTER Operation
....................     MT25Q_CMD_CLEAR_FLAG_STATUS_REG = 0x50,
.................... 
....................     //PROGRAM Operations
....................     MT25Q_CMD_PAGE_PROGRAM = 0x02,
....................     MT25Q_CMD_DUAL_INPUT_FAST_PROGRAM = 0xA2,
....................     MT25Q_CMD_EXT_DUAL_INPUT_FAST_PROGRAM = 0xD2,
....................     MT25Q_CMD_QUAD_INPUT_FAST_PROGRAM = 0x32,
....................     MT25Q_CMD_EXT_QUAD_INPUT_FAST_PROGRAM = 0x38,
.................... 
....................     //PROGRAM Operations with 4-Byte Address
....................     MT25Q_CMD_4BYTE_PAGE_PROGRAM = 0x12,
....................     MT25Q_CMD_4BYTE_QUAD_INPUT_FAST_PROGRAM = 0x34,
....................     MT25Q_CMD_4BYTE_QUAD_INPUT_EXT_FAST_PROGRAM = 0x3E,
.................... 
....................     //ERASE Operations
....................     MT25Q_CMD_ERASE_32KB_SUBSECTOR = 0x52,
....................     MT25Q_CMD_ERASE_4KB_SUBSECTOR = 0x20,
....................     MT25Q_CMD_ERASE_SECTOR = 0xD8,
....................     MT25Q_CMD_ERASE_BULK = 0xC7,
.................... 
....................     //ERASE Operations with 4-Byte Address
....................     MT25Q_CMD_4BYTE_ERASE_SECTOR = 0xDC,
....................     MT25Q_CMD_4BYTE_ERASE_4KB_SUBSECTOR = 0x21,
....................     
....................     //SUSPEND/RESUME Operations
....................     MT25Q_CMD_PROGRAM_ERASE_SUSPEND = 0x75,
....................     MT25Q_CMD_PROGRAM_ERASE_RESUME = 0x7A,
.................... 
....................     //ONE-WIRE PROGRAMMING Operations
....................     MT25Q_CMD_READ_OPT_ARRAY = 0x4B,
....................     MT25Q_CMD_PROGRAM_OPT_ARRYA = 0x42,
.................... 
....................     //4-BYTE ADDRESSING Operations
....................     MT25Q_CMD_ENTER_4BYTE_ADDR_MODE = 0xB7,
....................     MT25Q_CMD_EXIT_4BYTE_ADDR_MODE = 0xE9,
.................... 
....................     //QUAD PROTOCOL Operations
....................     MT25Q_CMD_ENTER_QUAD_IO_MODE = 0x35,
....................     MT25Q_CMD_RESET_QUAD_IO_MODE = 0xF5,
.................... 
....................     //DEEP POWER-DOWN Operations
....................     MT25Q_CMD_DEEP_POWER_DOWN = 0xB9,
....................     MT25Q_CMD_RELEASE_FROM_DEEP_POWER_DOWN = 0xAB,
.................... 
....................     //ADVANCED PROGRAM/ERASE CONTROLS
....................     MT25Q_CMD_READ_SECTOR_PROTECTION = 0x2D,
....................     MT25Q_CMD_PROGRAM_SECTOR_PROTECTION = 0x2C,
....................     MT25Q_CMD_READ_VOLATILE_LOCK_BITS = 0xE8,
....................     MT25Q_CMD_WRITE_VOLATILE_LOCK_BITS = 0xE5,
....................     MT25Q_CMD_READ_NONVOLATILE_LOCK_BITS = 0xE2,
....................     MT25Q_CMD_WRITE_NONVOLATILE_LOCK_BITS = 0xE3,
....................     MT25Q_CMD_READ_GLOBAL_FREEZE_BIT = 0xA7,
....................     MT25Q_CMD_WRITE_GLOBAL_FREEZE_BIT = 0xA6,
....................     MT25Q_CMD_READ_PASSWORD = 0x27,
....................     MT25Q_CMD_WRITE_PASSWORD = 0x28,
....................     MT25Q_CMD_UNLOCK_PASSWORD = 0x29,
.................... 
....................     //ADVANCED SECTOR PROTECTION Operations
....................     MT25Q_CMD_4BYTE_READ_VOLATILE_LOCK_BITS = 0xE0,
....................     MT25Q_CMD_4BYTE_WRITE_VOLATILE_LOCK_BITS = 0xE1,
.................... 
....................     //ADVANCED FUNCTIONS INTERFACE Operations
....................     MT25Q_CMD_INTERFACE_ACTIVATION = 0x98,
....................     MT25Q_CMD_CYCLIC_REDUNDANCY_CHECK = 0x9B
.................... } mt25q_cmd_t;
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 all;  // 全体アクセス
....................     struct {
....................         unsigned int8 ADDRESSING_4BYTE     : 1; // Bit0
....................         unsigned int8 PROTECTION_ERROR     : 1; // Bit1
....................         unsigned int8 PROGRAM_SUSPEND      : 1; // Bit2
....................         unsigned int8 RESERVED             : 1; // Bit3
....................         unsigned int8 PROGRAM_FAIL         : 1; // Bit4
....................         unsigned int8 ERASE_FAIL           : 1; // Bit5
....................         unsigned int8 ERASE_SUSPEND        : 1; // Bit6
....................         unsigned int8 PROGRAM_OR_ERASE_BUSY: 1; // Bit7
....................     } bit;
.................... } mt25q_sr1_t;
.................... 
.................... typedef enum {
....................     MT25QL64,
....................     MT25QL128,
....................     MT25QL256,
....................     MT25QL512,
....................     MT25QL01G
.................... } mt25q_model_t;
.................... 
.................... 
.................... typedef struct {
....................     mt25q_model_t model;
....................     unsigned int32 size_bytes;
....................     unsigned int32 page_size_bytes;
....................     unsigned int32 sector_size_bytes;
....................     unsigned int32 subsector_32k_size_bytes;
....................     unsigned int32 subsector_4k_size_bytes;
.................... } mt25q_info_t;
.................... 
.................... typedef enum {
....................     MT25Q_FUNC_READ,
....................     MT25Q_FUNC_WRITE,
....................     MT25Q_FUNC_ERASE
.................... } mt25q_func_t;
.................... 
.................... typedef struct {
....................     mt25q_func_t function;
....................     unsigned int32 address;
....................     unsigned int8 *data;
....................     unsigned int32 length;
.................... } mt25q_cmd_param_t;
.................... 
.................... #define MT25Q_CMD_MAX_SIZE 8
.................... typedef struct {
....................     unsigned int8 cmd[MT25Q_CMD_MAX_SIZE];
....................     unsigned int8 cmd_length;
.................... } mt25q_send_cmd_t;
.................... 
.................... // void mt25q_make_cmd(mt25q_info_t *flash_info, mt25q_cmd_param_t *cmd_param, mt25q_send_cmd_t *cmd)
.................... 
.................... 
.................... #endif // DEV
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, unsigned int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
03C3A:  MOVLB  A
03C3C:  MOVF   xF3,W
03C3E:  XORLW  00
03C40:  MOVLB  0
03C42:  BTFSC  FD8.2
03C44:  GOTO   3C54
03C48:  XORLW  01
03C4A:  BTFSC  FD8.2
03C4C:  GOTO   3CBE
03C50:  GOTO   3D28
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03C54:  MOVLB  A
03C56:  CLRF   xFC
03C58:  CLRF   xFB
03C5A:  MOVLB  0
03C5C:  MOVLB  A
03C5E:  MOVF   xFC,W
03C60:  SUBWF  xFA,W
03C62:  BTFSC  FD8.0
03C64:  BRA    3C6C
03C66:  MOVLB  0
03C68:  GOTO   3CBA
03C6C:  MOVLB  0
03C6E:  BTFSS  FD8.2
03C70:  GOTO   3C86
03C74:  MOVLB  A
03C76:  MOVF   xF9,W
03C78:  SUBWF  xFB,W
03C7A:  BTFSS  FD8.0
03C7C:  BRA    3C84
03C7E:  MOVLB  0
03C80:  GOTO   3CBA
03C84:  MOVLB  0
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
03C86:  MOVLB  A
03C88:  MOVF   xF7,W
03C8A:  ADDWF  xFB,W
03C8C:  MOVWF  FE9
03C8E:  MOVF   xF8,W
03C90:  ADDWFC xFC,W
03C92:  MOVWF  FEA
03C94:  MOVFF  FEF,AFF
03C98:  MOVFF  AFF,B15
03C9C:  MOVLW  08
03C9E:  MOVLB  B
03CA0:  MOVWF  x16
03CA2:  MOVLW  01
03CA4:  MOVWF  x17
03CA6:  MOVLB  0
03CA8:  CALL   2B0E
03CAC:  MOVLB  A
03CAE:  INCF   xFB,F
03CB0:  BTFSC  FD8.2
03CB2:  INCF   xFC,F
03CB4:  MOVLB  0
03CB6:  GOTO   3C5C
....................          break;
03CBA:  GOTO   3D2C
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03CBE:  MOVLB  A
03CC0:  CLRF   xFE
03CC2:  CLRF   xFD
03CC4:  MOVLB  0
03CC6:  MOVLB  A
03CC8:  MOVF   xFE,W
03CCA:  SUBWF  xFA,W
03CCC:  BTFSC  FD8.0
03CCE:  BRA    3CD6
03CD0:  MOVLB  0
03CD2:  GOTO   3D24
03CD6:  MOVLB  0
03CD8:  BTFSS  FD8.2
03CDA:  GOTO   3CF0
03CDE:  MOVLB  A
03CE0:  MOVF   xF9,W
03CE2:  SUBWF  xFD,W
03CE4:  BTFSS  FD8.0
03CE6:  BRA    3CEE
03CE8:  MOVLB  0
03CEA:  GOTO   3D24
03CEE:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
03CF0:  MOVLB  A
03CF2:  MOVF   xF7,W
03CF4:  ADDWF  xFD,W
03CF6:  MOVWF  FE9
03CF8:  MOVF   xF8,W
03CFA:  ADDWFC xFE,W
03CFC:  MOVWF  FEA
03CFE:  MOVFF  FEF,AFF
03D02:  MOVFF  AFF,B15
03D06:  MOVLW  08
03D08:  MOVLB  B
03D0A:  MOVWF  x16
03D0C:  MOVLW  01
03D0E:  MOVWF  x17
03D10:  MOVLB  0
03D12:  CALL   2B6E
03D16:  MOVLB  A
03D18:  INCF   xFD,F
03D1A:  BTFSC  FD8.2
03D1C:  INCF   xFE,F
03D1E:  MOVLB  0
03D20:  GOTO   3CC6
....................          break;
03D24:  GOTO   3D2C
....................          
....................       default:
....................          break;
03D28:  GOTO   3D2C
....................    }
....................    return;
03D2C:  RETURN 0
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, unsigned int8 *write_data, unsigned int16 write_amount, unsigned int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
02BCE:  MOVLB  A
02BD0:  MOVF   xF9,W
02BD2:  XORLW  00
02BD4:  MOVLB  0
02BD6:  BTFSC  FD8.2
02BD8:  GOTO   2BE8
02BDC:  XORLW  01
02BDE:  BTFSC  FD8.2
02BE0:  GOTO   2CFA
02BE4:  GOTO   2E0C
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02BE8:  MOVLB  B
02BEA:  CLRF   x08
02BEC:  CLRF   x07
02BEE:  MOVLB  0
02BF0:  MOVLB  B
02BF2:  MOVF   x08,W
02BF4:  SUBWF  x00,W
02BF6:  BTFSC  FD8.0
02BF8:  BRA    2C00
02BFA:  MOVLB  0
02BFC:  GOTO   2C54
02C00:  MOVLB  0
02C02:  BTFSS  FD8.2
02C04:  GOTO   2C1C
02C08:  MOVLB  A
02C0A:  MOVF   xFF,W
02C0C:  MOVLB  B
02C0E:  SUBWF  x07,W
02C10:  BTFSS  FD8.0
02C12:  BRA    2C1A
02C14:  MOVLB  0
02C16:  GOTO   2C54
02C1A:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
02C1C:  MOVLB  A
02C1E:  MOVF   xFD,W
02C20:  MOVLB  B
02C22:  ADDWF  x07,W
02C24:  MOVWF  FE9
02C26:  MOVLB  A
02C28:  MOVF   xFE,W
02C2A:  MOVLB  B
02C2C:  ADDWFC x08,W
02C2E:  MOVWF  FEA
02C30:  MOVFF  FEF,B13
02C34:  MOVFF  B13,B15
02C38:  MOVLW  08
02C3A:  MOVWF  x16
02C3C:  MOVLW  01
02C3E:  MOVWF  x17
02C40:  MOVLB  0
02C42:  CALL   2B0E
02C46:  MOVLB  B
02C48:  INCF   x07,F
02C4A:  BTFSC  FD8.2
02C4C:  INCF   x08,F
02C4E:  MOVLB  0
02C50:  GOTO   2BF0
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
02C54:  MOVLB  B
02C56:  CLRF   x0C
02C58:  CLRF   x0B
02C5A:  CLRF   x0A
02C5C:  CLRF   x09
02C5E:  MOVLB  0
02C60:  MOVLB  B
02C62:  MOVF   x0C,W
02C64:  SUBWF  x06,W
02C66:  BTFSC  FD8.0
02C68:  BRA    2C70
02C6A:  MOVLB  0
02C6C:  GOTO   2CF6
02C70:  MOVLB  0
02C72:  BTFSS  FD8.2
02C74:  GOTO   2CBA
02C78:  MOVLB  B
02C7A:  MOVF   x0B,W
02C7C:  SUBWF  x05,W
02C7E:  BTFSC  FD8.0
02C80:  BRA    2C88
02C82:  MOVLB  0
02C84:  GOTO   2CF6
02C88:  MOVLB  0
02C8A:  BTFSS  FD8.2
02C8C:  GOTO   2CBA
02C90:  MOVLB  B
02C92:  MOVF   x0A,W
02C94:  SUBWF  x04,W
02C96:  BTFSC  FD8.0
02C98:  BRA    2CA0
02C9A:  MOVLB  0
02C9C:  GOTO   2CF6
02CA0:  MOVLB  0
02CA2:  BTFSS  FD8.2
02CA4:  GOTO   2CBA
02CA8:  MOVLB  B
02CAA:  MOVF   x03,W
02CAC:  SUBWF  x09,W
02CAE:  BTFSS  FD8.0
02CB0:  BRA    2CB8
02CB2:  MOVLB  0
02CB4:  GOTO   2CF6
02CB8:  MOVLB  0
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
02CBA:  MOVLB  B
02CBC:  MOVF   x01,W
02CBE:  ADDWF  x09,W
02CC0:  MOVWF  FE9
02CC2:  MOVF   x02,W
02CC4:  ADDWFC x0A,W
02CC6:  MOVWF  FEA
02CC8:  MOVLW  02
02CCA:  MOVWF  x15
02CCC:  MOVLW  08
02CCE:  MOVWF  x16
02CD0:  MOVLW  01
02CD2:  MOVWF  x17
02CD4:  MOVLB  0
02CD6:  CALL   2B0E
02CDA:  MOVFF  01,FEF
02CDE:  MOVLW  01
02CE0:  MOVLB  B
02CE2:  ADDWF  x09,F
02CE4:  BTFSC  FD8.0
02CE6:  INCF   x0A,F
02CE8:  BTFSC  FD8.2
02CEA:  INCF   x0B,F
02CEC:  BTFSC  FD8.2
02CEE:  INCF   x0C,F
02CF0:  MOVLB  0
02CF2:  GOTO   2C60
....................          break;
02CF6:  GOTO   2E10
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02CFA:  MOVLB  B
02CFC:  CLRF   x0E
02CFE:  CLRF   x0D
02D00:  MOVLB  0
02D02:  MOVLB  B
02D04:  MOVF   x0E,W
02D06:  SUBWF  x00,W
02D08:  BTFSC  FD8.0
02D0A:  BRA    2D12
02D0C:  MOVLB  0
02D0E:  GOTO   2D66
02D12:  MOVLB  0
02D14:  BTFSS  FD8.2
02D16:  GOTO   2D2E
02D1A:  MOVLB  A
02D1C:  MOVF   xFF,W
02D1E:  MOVLB  B
02D20:  SUBWF  x0D,W
02D22:  BTFSS  FD8.0
02D24:  BRA    2D2C
02D26:  MOVLB  0
02D28:  GOTO   2D66
02D2C:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
02D2E:  MOVLB  A
02D30:  MOVF   xFD,W
02D32:  MOVLB  B
02D34:  ADDWF  x0D,W
02D36:  MOVWF  FE9
02D38:  MOVLB  A
02D3A:  MOVF   xFE,W
02D3C:  MOVLB  B
02D3E:  ADDWFC x0E,W
02D40:  MOVWF  FEA
02D42:  MOVFF  FEF,B13
02D46:  MOVFF  B13,B15
02D4A:  MOVLW  08
02D4C:  MOVWF  x16
02D4E:  MOVLW  01
02D50:  MOVWF  x17
02D52:  MOVLB  0
02D54:  CALL   2B6E
02D58:  MOVLB  B
02D5A:  INCF   x0D,F
02D5C:  BTFSC  FD8.2
02D5E:  INCF   x0E,F
02D60:  MOVLB  0
02D62:  GOTO   2D02
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
02D66:  MOVLB  B
02D68:  CLRF   x12
02D6A:  CLRF   x11
02D6C:  CLRF   x10
02D6E:  CLRF   x0F
02D70:  MOVLB  0
02D72:  MOVLB  B
02D74:  MOVF   x12,W
02D76:  SUBWF  x06,W
02D78:  BTFSC  FD8.0
02D7A:  BRA    2D82
02D7C:  MOVLB  0
02D7E:  GOTO   2E08
02D82:  MOVLB  0
02D84:  BTFSS  FD8.2
02D86:  GOTO   2DCC
02D8A:  MOVLB  B
02D8C:  MOVF   x11,W
02D8E:  SUBWF  x05,W
02D90:  BTFSC  FD8.0
02D92:  BRA    2D9A
02D94:  MOVLB  0
02D96:  GOTO   2E08
02D9A:  MOVLB  0
02D9C:  BTFSS  FD8.2
02D9E:  GOTO   2DCC
02DA2:  MOVLB  B
02DA4:  MOVF   x10,W
02DA6:  SUBWF  x04,W
02DA8:  BTFSC  FD8.0
02DAA:  BRA    2DB2
02DAC:  MOVLB  0
02DAE:  GOTO   2E08
02DB2:  MOVLB  0
02DB4:  BTFSS  FD8.2
02DB6:  GOTO   2DCC
02DBA:  MOVLB  B
02DBC:  MOVF   x03,W
02DBE:  SUBWF  x0F,W
02DC0:  BTFSS  FD8.0
02DC2:  BRA    2DCA
02DC4:  MOVLB  0
02DC6:  GOTO   2E08
02DCA:  MOVLB  0
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
02DCC:  MOVLB  B
02DCE:  MOVF   x01,W
02DD0:  ADDWF  x0F,W
02DD2:  MOVWF  FE9
02DD4:  MOVF   x02,W
02DD6:  ADDWFC x10,W
02DD8:  MOVWF  FEA
02DDA:  MOVLW  01
02DDC:  MOVWF  x15
02DDE:  MOVLW  08
02DE0:  MOVWF  x16
02DE2:  MOVLW  01
02DE4:  MOVWF  x17
02DE6:  MOVLB  0
02DE8:  CALL   2B6E
02DEC:  MOVFF  01,FEF
02DF0:  MOVLW  01
02DF2:  MOVLB  B
02DF4:  ADDWF  x0F,F
02DF6:  BTFSC  FD8.0
02DF8:  INCF   x10,F
02DFA:  BTFSC  FD8.2
02DFC:  INCF   x11,F
02DFE:  BTFSC  FD8.2
02E00:  INCF   x12,F
02E02:  MOVLB  0
02E04:  GOTO   2D72
....................          break;
02E08:  GOTO   2E10
....................    
....................          
....................       default:
....................          break;
02E0C:  GOTO   2E10
....................    }
....................    return;
02E10:  RETURN 0
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, unsigned int8 *cmd_data, unsigned int8 cmd_amount, unsigned int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
03D2E:  MOVLB  A
03D30:  MOVF   xF3,W
03D32:  XORLW  00
03D34:  MOVLB  0
03D36:  BTFSC  FD8.2
03D38:  GOTO   3D48
03D3C:  XORLW  01
03D3E:  BTFSC  FD8.2
03D40:  GOTO   3E04
03D44:  GOTO   3EC2
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
03D48:  MOVLB  A
03D4A:  CLRF   xFE
03D4C:  MOVLB  0
03D4E:  MOVLB  A
03D50:  MOVF   xF9,W
03D52:  SUBWF  xFE,W
03D54:  BTFSS  FD8.0
03D56:  BRA    3D5E
03D58:  MOVLB  0
03D5A:  GOTO   3D90
03D5E:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
03D60:  MOVLB  A
03D62:  MOVF   xFE,W
03D64:  ADDWF  xF7,W
03D66:  MOVWF  FE9
03D68:  MOVLW  00
03D6A:  ADDWFC xF8,W
03D6C:  MOVWF  FEA
03D6E:  MOVFF  FEF,B04
03D72:  MOVFF  B04,B15
03D76:  MOVLW  08
03D78:  MOVLB  B
03D7A:  MOVWF  x16
03D7C:  MOVLW  01
03D7E:  MOVWF  x17
03D80:  MOVLB  0
03D82:  CALL   2B0E
03D86:  MOVLB  A
03D88:  INCF   xFE,F
03D8A:  MOVLB  0
03D8C:  GOTO   3D4E
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03D90:  MOVLB  B
03D92:  CLRF   x00
03D94:  MOVLB  A
03D96:  CLRF   xFF
03D98:  MOVLB  0
03D9A:  MOVLB  B
03D9C:  MOVF   x00,W
03D9E:  MOVLB  A
03DA0:  SUBWF  xFD,W
03DA2:  BTFSC  FD8.0
03DA4:  BRA    3DAC
03DA6:  MOVLB  0
03DA8:  GOTO   3E00
03DAC:  MOVLB  0
03DAE:  BTFSS  FD8.2
03DB0:  GOTO   3DC6
03DB4:  MOVLB  A
03DB6:  MOVF   xFC,W
03DB8:  SUBWF  xFF,W
03DBA:  BTFSS  FD8.0
03DBC:  BRA    3DC4
03DBE:  MOVLB  0
03DC0:  GOTO   3E00
03DC4:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
03DC6:  MOVLB  A
03DC8:  MOVF   xFA,W
03DCA:  ADDWF  xFF,W
03DCC:  MOVWF  FE9
03DCE:  MOVF   xFB,W
03DD0:  MOVLB  B
03DD2:  ADDWFC x00,W
03DD4:  MOVWF  FEA
03DD6:  MOVFF  FEF,B04
03DDA:  MOVFF  B04,B15
03DDE:  MOVLW  08
03DE0:  MOVWF  x16
03DE2:  MOVLW  01
03DE4:  MOVWF  x17
03DE6:  MOVLB  0
03DE8:  CALL   2B0E
03DEC:  MOVLB  A
03DEE:  INCF   xFF,F
03DF0:  BTFSS  FD8.2
03DF2:  BRA    3DFA
03DF4:  MOVLB  B
03DF6:  INCF   x00,F
03DF8:  MOVLB  A
03DFA:  MOVLB  0
03DFC:  GOTO   3D9A
....................          break;
03E00:  GOTO   3EC6
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
03E04:  MOVLB  B
03E06:  CLRF   x01
03E08:  MOVLB  0
03E0A:  MOVLB  A
03E0C:  MOVF   xF9,W
03E0E:  MOVLB  B
03E10:  SUBWF  x01,W
03E12:  BTFSS  FD8.0
03E14:  BRA    3E1C
03E16:  MOVLB  0
03E18:  GOTO   3E50
03E1C:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
03E1E:  MOVLB  B
03E20:  MOVF   x01,W
03E22:  MOVLB  A
03E24:  ADDWF  xF7,W
03E26:  MOVWF  FE9
03E28:  MOVLW  00
03E2A:  ADDWFC xF8,W
03E2C:  MOVWF  FEA
03E2E:  MOVFF  FEF,B04
03E32:  MOVFF  B04,B15
03E36:  MOVLW  08
03E38:  MOVLB  B
03E3A:  MOVWF  x16
03E3C:  MOVLW  01
03E3E:  MOVWF  x17
03E40:  MOVLB  0
03E42:  CALL   2B6E
03E46:  MOVLB  B
03E48:  INCF   x01,F
03E4A:  MOVLB  0
03E4C:  GOTO   3E0A
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03E50:  MOVLB  B
03E52:  CLRF   x03
03E54:  CLRF   x02
03E56:  MOVLB  0
03E58:  MOVLB  B
03E5A:  MOVF   x03,W
03E5C:  MOVLB  A
03E5E:  SUBWF  xFD,W
03E60:  BTFSC  FD8.0
03E62:  BRA    3E6A
03E64:  MOVLB  0
03E66:  GOTO   3EBE
03E6A:  MOVLB  0
03E6C:  BTFSS  FD8.2
03E6E:  GOTO   3E86
03E72:  MOVLB  A
03E74:  MOVF   xFC,W
03E76:  MOVLB  B
03E78:  SUBWF  x02,W
03E7A:  BTFSS  FD8.0
03E7C:  BRA    3E84
03E7E:  MOVLB  0
03E80:  GOTO   3EBE
03E84:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
03E86:  MOVLB  A
03E88:  MOVF   xFA,W
03E8A:  MOVLB  B
03E8C:  ADDWF  x02,W
03E8E:  MOVWF  FE9
03E90:  MOVLB  A
03E92:  MOVF   xFB,W
03E94:  MOVLB  B
03E96:  ADDWFC x03,W
03E98:  MOVWF  FEA
03E9A:  MOVFF  FEF,B04
03E9E:  MOVFF  B04,B15
03EA2:  MOVLW  08
03EA4:  MOVWF  x16
03EA6:  MOVLW  01
03EA8:  MOVWF  x17
03EAA:  MOVLB  0
03EAC:  CALL   2B6E
03EB0:  MOVLB  B
03EB2:  INCF   x02,F
03EB4:  BTFSC  FD8.2
03EB6:  INCF   x03,F
03EB8:  MOVLB  0
03EBA:  GOTO   3E58
....................          break;
03EBE:  GOTO   3EC6
....................          
....................       default:
....................          break;
03EC2:  GOTO   3EC6
....................    }
....................    return;
03EC6:  RETURN 0
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
06A0E:  MOVFF  2AD,AF9
06A12:  MOVLW  01
06A14:  MOVLB  A
06A16:  MOVWF  xFA
06A18:  MOVLW  0F
06A1A:  MOVWF  xFC
06A1C:  MOVLW  89
06A1E:  MOVWF  xFB
06A20:  MOVLB  0
06A22:  CALL   2ABA
06A26:  MOVFF  2AD,AF9
06A2A:  MOVLB  A
06A2C:  CLRF   xFA
06A2E:  MOVLW  0F
06A30:  MOVWF  xFC
06A32:  MOVLW  92
06A34:  MOVWF  xFB
06A36:  MOVLB  0
06A38:  CALL   2ABA
06A3C:  RETURN 0
.................... }
....................  
.................... int8 status_register(Flash flash_stream){
*
03EC8:  MOVLW  05
03ECA:  MOVLB  A
03ECC:  MOVWF  xF7
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
03ECE:  MOVFF  AF5,AF9
03ED2:  CLRF   xFA
03ED4:  MOVLW  0F
03ED6:  MOVWF  xFC
03ED8:  MOVLW  89
03EDA:  MOVWF  xFB
03EDC:  MOVLB  0
03EDE:  CALL   2ABA
03EE2:  MOVFF  AF5,AF9
03EE6:  MOVLB  A
03EE8:  CLRF   xFA
03EEA:  MOVLW  0F
03EEC:  MOVWF  xFC
03EEE:  MOVLW  92
03EF0:  MOVWF  xFB
03EF2:  MOVLB  0
03EF4:  CALL   2ABA
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
03EF8:  MOVFF  AF6,AFC
03EFC:  MOVFF  AF5,AFB
03F00:  MOVFF  AF4,AFA
03F04:  MOVFF  AF3,AF9
03F08:  MOVLW  0A
03F0A:  MOVLB  A
03F0C:  MOVWF  xFE
03F0E:  MOVLW  F7
03F10:  MOVWF  xFD
03F12:  MOVLB  B
03F14:  CLRF   x00
03F16:  MOVLW  01
03F18:  MOVLB  A
03F1A:  MOVWF  xFF
03F1C:  MOVLW  0A
03F1E:  MOVLB  B
03F20:  MOVWF  x02
03F22:  MOVLW  F8
03F24:  MOVWF  x01
03F26:  CLRF   x06
03F28:  CLRF   x05
03F2A:  CLRF   x04
03F2C:  MOVLW  01
03F2E:  MOVWF  x03
03F30:  MOVLB  0
03F32:  CALL   2BCE
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
03F36:  MOVFF  AF5,AF9
03F3A:  MOVLW  01
03F3C:  MOVLB  A
03F3E:  MOVWF  xFA
03F40:  MOVLW  0F
03F42:  MOVWF  xFC
03F44:  MOVLW  89
03F46:  MOVWF  xFB
03F48:  MOVLB  0
03F4A:  CALL   2ABA
03F4E:  MOVFF  AF5,AF9
03F52:  MOVLB  A
03F54:  CLRF   xFA
03F56:  MOVLW  0F
03F58:  MOVWF  xFC
03F5A:  MOVLW  92
03F5C:  MOVWF  xFB
03F5E:  MOVLB  0
03F60:  CALL   2ABA
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
03F64:  MOVLB  A
03F66:  MOVF   xF8,W
03F68:  MOVWF  01
03F6A:  MOVLB  0
03F6C:  RETURN 0
.................... }
.................... 
.................... //
.................... //->success:True,fail:false 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 16);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == MANUFACTURER_ID_MICRON){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
....................  
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
05948:  MOVLB  1
0594A:  MOVF   xE7,F
0594C:  BTFSC  FD8.2
0594E:  BRA    5956
05950:  MOVLB  0
05952:  GOTO   5AAE
05956:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
05958:  MOVLW  06
0595A:  MOVLB  1
0595C:  MOVWF  xEE
0595E:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
05960:  MOVLW  D8
05962:  MOVLB  1
05964:  MOVWF  xEF
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
05966:  MOVFF  1EC,1FB
0596A:  MOVFF  1ED,1FC
0596E:  CLRF   xFD
05970:  CLRF   xFE
05972:  MOVF   xFB,W
05974:  MOVWF  00
05976:  CLRF   01
05978:  CLRF   02
0597A:  CLRF   03
0597C:  MOVFF  00,1F0
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
05980:  MOVFF  1EB,1FB
05984:  MOVFF  1EC,1FC
05988:  MOVFF  1ED,1FD
0598C:  CLRF   xFE
0598E:  MOVF   xFB,W
05990:  MOVWF  00
05992:  CLRF   01
05994:  CLRF   02
05996:  CLRF   03
05998:  MOVFF  00,1F1
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
0599C:  MOVF   xEA,W
0599E:  MOVWF  00
059A0:  CLRF   01
059A2:  CLRF   02
059A4:  CLRF   03
059A6:  MOVFF  00,1F2
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
059AA:  MOVFF  1E8,AF9
059AE:  MOVLB  A
059B0:  CLRF   xFA
059B2:  MOVLW  0F
059B4:  MOVWF  xFC
059B6:  MOVLW  89
059B8:  MOVWF  xFB
059BA:  MOVLB  0
059BC:  CALL   2ABA
059C0:  MOVFF  1E8,AF9
059C4:  MOVLB  A
059C6:  CLRF   xFA
059C8:  MOVLW  0F
059CA:  MOVWF  xFC
059CC:  MOVLW  92
059CE:  MOVWF  xFB
059D0:  MOVLB  0
059D2:  CALL   2ABA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
059D6:  MOVFF  1E9,AF6
059DA:  MOVFF  1E8,AF5
059DE:  MOVFF  1E7,AF4
059E2:  MOVFF  1E6,AF3
059E6:  MOVLW  01
059E8:  MOVLB  A
059EA:  MOVWF  xF8
059EC:  MOVLW  EE
059EE:  MOVWF  xF7
059F0:  CLRF   xFA
059F2:  MOVLW  01
059F4:  MOVWF  xF9
059F6:  MOVLB  0
059F8:  CALL   3C3A
....................       output_high(flash_stream.cs_pin);
059FC:  MOVFF  1E8,AF9
05A00:  MOVLW  01
05A02:  MOVLB  A
05A04:  MOVWF  xFA
05A06:  MOVLW  0F
05A08:  MOVWF  xFC
05A0A:  MOVLW  89
05A0C:  MOVWF  xFB
05A0E:  MOVLB  0
05A10:  CALL   2ABA
05A14:  MOVFF  1E8,AF9
05A18:  MOVLB  A
05A1A:  CLRF   xFA
05A1C:  MOVLW  0F
05A1E:  MOVWF  xFC
05A20:  MOVLW  92
05A22:  MOVWF  xFB
05A24:  MOVLB  0
05A26:  CALL   2ABA
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
05A2A:  MOVFF  1E8,AF9
05A2E:  MOVLB  A
05A30:  CLRF   xFA
05A32:  MOVLW  0F
05A34:  MOVWF  xFC
05A36:  MOVLW  89
05A38:  MOVWF  xFB
05A3A:  MOVLB  0
05A3C:  CALL   2ABA
05A40:  MOVFF  1E8,AF9
05A44:  MOVLB  A
05A46:  CLRF   xFA
05A48:  MOVLW  0F
05A4A:  MOVWF  xFC
05A4C:  MOVLW  92
05A4E:  MOVWF  xFB
05A50:  MOVLB  0
05A52:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
05A56:  MOVFF  1E9,AF6
05A5A:  MOVFF  1E8,AF5
05A5E:  MOVFF  1E7,AF4
05A62:  MOVFF  1E6,AF3
05A66:  MOVLW  01
05A68:  MOVLB  A
05A6A:  MOVWF  xF8
05A6C:  MOVLW  EF
05A6E:  MOVWF  xF7
05A70:  CLRF   xFA
05A72:  MOVLW  04
05A74:  MOVWF  xF9
05A76:  MOVLB  0
05A78:  CALL   3C3A
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
05A7C:  MOVFF  1E8,AF9
05A80:  MOVLW  01
05A82:  MOVLB  A
05A84:  MOVWF  xFA
05A86:  MOVLW  0F
05A88:  MOVWF  xFC
05A8A:  MOVLW  89
05A8C:  MOVWF  xFB
05A8E:  MOVLB  0
05A90:  CALL   2ABA
05A94:  MOVFF  1E8,AF9
05A98:  MOVLB  A
05A9A:  CLRF   xFA
05A9C:  MOVLW  0F
05A9E:  MOVWF  xFC
05AA0:  MOVLW  92
05AA2:  MOVWF  xFB
05AA4:  MOVLB  0
05AA6:  CALL   2ABA
....................    }
05AAA:  GOTO   5C2E
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
05AAE:  MOVLB  1
05AB0:  DECFSZ xE7,W
05AB2:  BRA    5AB8
05AB4:  BRA    5ABE
05AB6:  MOVLB  0
05AB8:  MOVLB  0
05ABA:  GOTO   5C2E
05ABE:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
05AC0:  MOVLW  06
05AC2:  MOVLB  1
05AC4:  MOVWF  xF3
05AC6:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
05AC8:  MOVLW  DC
05ACA:  MOVLB  1
05ACC:  MOVWF  xF4
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
05ACE:  MOVFF  1ED,1FB
05AD2:  CLRF   xFC
05AD4:  CLRF   xFD
05AD6:  CLRF   xFE
05AD8:  MOVF   xFB,W
05ADA:  MOVWF  00
05ADC:  CLRF   01
05ADE:  CLRF   02
05AE0:  CLRF   03
05AE2:  MOVFF  00,1F5
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
05AE6:  MOVFF  1EC,1FB
05AEA:  MOVFF  1ED,1FC
05AEE:  CLRF   xFD
05AF0:  CLRF   xFE
05AF2:  MOVF   xFB,W
05AF4:  MOVWF  00
05AF6:  CLRF   01
05AF8:  CLRF   02
05AFA:  CLRF   03
05AFC:  MOVFF  00,1F6
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
05B00:  MOVFF  1EB,1FB
05B04:  MOVFF  1EC,1FC
05B08:  MOVFF  1ED,1FD
05B0C:  CLRF   xFE
05B0E:  MOVF   xFB,W
05B10:  MOVWF  00
05B12:  CLRF   01
05B14:  CLRF   02
05B16:  CLRF   03
05B18:  MOVFF  00,1F7
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
05B1C:  MOVF   xEA,W
05B1E:  MOVWF  00
05B20:  CLRF   01
05B22:  CLRF   02
05B24:  CLRF   03
05B26:  MOVFF  00,1F8
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
05B2A:  MOVFF  1E8,AF9
05B2E:  MOVLB  A
05B30:  CLRF   xFA
05B32:  MOVLW  0F
05B34:  MOVWF  xFC
05B36:  MOVLW  89
05B38:  MOVWF  xFB
05B3A:  MOVLB  0
05B3C:  CALL   2ABA
05B40:  MOVFF  1E8,AF9
05B44:  MOVLB  A
05B46:  CLRF   xFA
05B48:  MOVLW  0F
05B4A:  MOVWF  xFC
05B4C:  MOVLW  92
05B4E:  MOVWF  xFB
05B50:  MOVLB  0
05B52:  CALL   2ABA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
05B56:  MOVFF  1E9,AF6
05B5A:  MOVFF  1E8,AF5
05B5E:  MOVFF  1E7,AF4
05B62:  MOVFF  1E6,AF3
05B66:  MOVLW  01
05B68:  MOVLB  A
05B6A:  MOVWF  xF8
05B6C:  MOVLW  F3
05B6E:  MOVWF  xF7
05B70:  CLRF   xFA
05B72:  MOVLW  01
05B74:  MOVWF  xF9
05B76:  MOVLB  0
05B78:  CALL   3C3A
....................       output_high(flash_stream.cs_pin);
05B7C:  MOVFF  1E8,AF9
05B80:  MOVLW  01
05B82:  MOVLB  A
05B84:  MOVWF  xFA
05B86:  MOVLW  0F
05B88:  MOVWF  xFC
05B8A:  MOVLW  89
05B8C:  MOVWF  xFB
05B8E:  MOVLB  0
05B90:  CALL   2ABA
05B94:  MOVFF  1E8,AF9
05B98:  MOVLB  A
05B9A:  CLRF   xFA
05B9C:  MOVLW  0F
05B9E:  MOVWF  xFC
05BA0:  MOVLW  92
05BA2:  MOVWF  xFB
05BA4:  MOVLB  0
05BA6:  CALL   2ABA
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
05BAA:  MOVFF  1E8,AF9
05BAE:  MOVLB  A
05BB0:  CLRF   xFA
05BB2:  MOVLW  0F
05BB4:  MOVWF  xFC
05BB6:  MOVLW  89
05BB8:  MOVWF  xFB
05BBA:  MOVLB  0
05BBC:  CALL   2ABA
05BC0:  MOVFF  1E8,AF9
05BC4:  MOVLB  A
05BC6:  CLRF   xFA
05BC8:  MOVLW  0F
05BCA:  MOVWF  xFC
05BCC:  MOVLW  92
05BCE:  MOVWF  xFB
05BD0:  MOVLB  0
05BD2:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
05BD6:  MOVFF  1E9,AF6
05BDA:  MOVFF  1E8,AF5
05BDE:  MOVFF  1E7,AF4
05BE2:  MOVFF  1E6,AF3
05BE6:  MOVLW  01
05BE8:  MOVLB  A
05BEA:  MOVWF  xF8
05BEC:  MOVLW  F4
05BEE:  MOVWF  xF7
05BF0:  CLRF   xFA
05BF2:  MOVLW  05
05BF4:  MOVWF  xF9
05BF6:  MOVLB  0
05BF8:  CALL   3C3A
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
05BFC:  MOVFF  1E8,AF9
05C00:  MOVLW  01
05C02:  MOVLB  A
05C04:  MOVWF  xFA
05C06:  MOVLW  0F
05C08:  MOVWF  xFC
05C0A:  MOVLW  89
05C0C:  MOVWF  xFB
05C0E:  MOVLB  0
05C10:  CALL   2ABA
05C14:  MOVFF  1E8,AF9
05C18:  MOVLB  A
05C1A:  CLRF   xFA
05C1C:  MOVLW  0F
05C1E:  MOVWF  xFC
05C20:  MOVLW  92
05C22:  MOVWF  xFB
05C24:  MOVLB  0
05C26:  CALL   2ABA
....................    }
05C2A:  GOTO   5C2E
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
05C2E:  MOVLB  1
05C30:  CLRF   xF9
05C32:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
05C34:  MOVFF  1E9,AF6
05C38:  MOVFF  1E8,AF5
05C3C:  MOVFF  1E7,AF4
05C40:  MOVFF  1E6,AF3
05C44:  CALL   3EC8
05C48:  MOVF   01,W
05C4A:  ANDLW  01
05C4C:  SUBLW  01
05C4E:  BTFSS  FD8.2
05C50:  GOTO   5CA2
....................       if(timeout_counter > 10)
05C54:  MOVLB  1
05C56:  MOVF   xF9,W
05C58:  SUBLW  0A
05C5A:  BTFSS  FD8.0
05C5C:  BRA    5C64
05C5E:  MOVLB  0
05C60:  GOTO   5C76
05C64:  MOVLB  0
....................          delay_ms(200);
05C66:  MOVLW  C8
05C68:  MOVLB  A
05C6A:  MOVWF  xF3
05C6C:  MOVLB  0
05C6E:  CALL   22AE
05C72:  GOTO   5C82
....................       else
....................          delay_ms(10);   
05C76:  MOVLW  0A
05C78:  MOVLB  A
05C7A:  MOVWF  xF3
05C7C:  MOVLB  0
05C7E:  CALL   22AE
....................       
....................       if(timeout_counter > 100){
05C82:  MOVLB  1
05C84:  MOVF   xF9,W
05C86:  SUBLW  64
05C88:  BTFSS  FD8.0
05C8A:  BRA    5C92
05C8C:  MOVLB  0
05C8E:  GOTO   5C98
05C92:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
05C94:  GOTO   5CA2
....................       }  
....................       timeout_counter++;
05C98:  MOVLB  1
05C9A:  INCF   xF9,F
05C9C:  MOVLB  0
05C9E:  GOTO   5C34
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
05CA2:  RETURN 0
.................... }
....................  
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x __ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 __ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 __ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 __
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
04D66:  MOVLB  9
04D68:  MOVF   xF6,F
04D6A:  BTFSC  FD8.2
04D6C:  BRA    4D74
04D6E:  MOVLB  0
04D70:  GOTO   4ED0
04D74:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
04D76:  MOVLW  06
04D78:  MOVLB  9
04D7A:  MOVWF  xFD
04D7C:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
04D7E:  MOVLW  20
04D80:  MOVLB  9
04D82:  MOVWF  xFE
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
04D84:  MOVFF  9FB,A0A
04D88:  MOVFF  9FC,A0B
04D8C:  MOVLB  A
04D8E:  CLRF   x0C
04D90:  CLRF   x0D
04D92:  MOVF   x0A,W
04D94:  MOVWF  00
04D96:  CLRF   01
04D98:  CLRF   02
04D9A:  CLRF   03
04D9C:  MOVFF  00,9FF
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
04DA0:  MOVFF  9FA,A0A
04DA4:  MOVFF  9FB,A0B
04DA8:  MOVFF  9FC,A0C
04DAC:  CLRF   x0D
04DAE:  MOVF   x0A,W
04DB0:  MOVWF  00
04DB2:  CLRF   01
04DB4:  CLRF   02
04DB6:  CLRF   03
04DB8:  MOVFF  00,A00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
04DBC:  MOVLB  9
04DBE:  MOVF   xF9,W
04DC0:  MOVWF  00
04DC2:  CLRF   01
04DC4:  CLRF   02
04DC6:  CLRF   03
04DC8:  MOVFF  00,A01
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04DCC:  MOVFF  9F7,AF9
04DD0:  MOVLB  A
04DD2:  CLRF   xFA
04DD4:  MOVLW  0F
04DD6:  MOVWF  xFC
04DD8:  MOVLW  89
04DDA:  MOVWF  xFB
04DDC:  MOVLB  0
04DDE:  CALL   2ABA
04DE2:  MOVFF  9F7,AF9
04DE6:  MOVLB  A
04DE8:  CLRF   xFA
04DEA:  MOVLW  0F
04DEC:  MOVWF  xFC
04DEE:  MOVLW  92
04DF0:  MOVWF  xFB
04DF2:  MOVLB  0
04DF4:  CALL   2ABA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
04DF8:  MOVFF  9F8,AF6
04DFC:  MOVFF  9F7,AF5
04E00:  MOVFF  9F6,AF4
04E04:  MOVFF  9F5,AF3
04E08:  MOVLW  09
04E0A:  MOVLB  A
04E0C:  MOVWF  xF8
04E0E:  MOVLW  FD
04E10:  MOVWF  xF7
04E12:  CLRF   xFA
04E14:  MOVLW  01
04E16:  MOVWF  xF9
04E18:  MOVLB  0
04E1A:  CALL   3C3A
....................       output_high(flash_stream.cs_pin);
04E1E:  MOVFF  9F7,AF9
04E22:  MOVLW  01
04E24:  MOVLB  A
04E26:  MOVWF  xFA
04E28:  MOVLW  0F
04E2A:  MOVWF  xFC
04E2C:  MOVLW  89
04E2E:  MOVWF  xFB
04E30:  MOVLB  0
04E32:  CALL   2ABA
04E36:  MOVFF  9F7,AF9
04E3A:  MOVLB  A
04E3C:  CLRF   xFA
04E3E:  MOVLW  0F
04E40:  MOVWF  xFC
04E42:  MOVLW  92
04E44:  MOVWF  xFB
04E46:  MOVLB  0
04E48:  CALL   2ABA
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
04E4C:  MOVFF  9F7,AF9
04E50:  MOVLB  A
04E52:  CLRF   xFA
04E54:  MOVLW  0F
04E56:  MOVWF  xFC
04E58:  MOVLW  89
04E5A:  MOVWF  xFB
04E5C:  MOVLB  0
04E5E:  CALL   2ABA
04E62:  MOVFF  9F7,AF9
04E66:  MOVLB  A
04E68:  CLRF   xFA
04E6A:  MOVLW  0F
04E6C:  MOVWF  xFC
04E6E:  MOVLW  92
04E70:  MOVWF  xFB
04E72:  MOVLB  0
04E74:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
04E78:  MOVFF  9F8,AF6
04E7C:  MOVFF  9F7,AF5
04E80:  MOVFF  9F6,AF4
04E84:  MOVFF  9F5,AF3
04E88:  MOVLW  09
04E8A:  MOVLB  A
04E8C:  MOVWF  xF8
04E8E:  MOVLW  FE
04E90:  MOVWF  xF7
04E92:  CLRF   xFA
04E94:  MOVLW  04
04E96:  MOVWF  xF9
04E98:  MOVLB  0
04E9A:  CALL   3C3A
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04E9E:  MOVFF  9F7,AF9
04EA2:  MOVLW  01
04EA4:  MOVLB  A
04EA6:  MOVWF  xFA
04EA8:  MOVLW  0F
04EAA:  MOVWF  xFC
04EAC:  MOVLW  89
04EAE:  MOVWF  xFB
04EB0:  MOVLB  0
04EB2:  CALL   2ABA
04EB6:  MOVFF  9F7,AF9
04EBA:  MOVLB  A
04EBC:  CLRF   xFA
04EBE:  MOVLW  0F
04EC0:  MOVWF  xFC
04EC2:  MOVLW  92
04EC4:  MOVWF  xFB
04EC6:  MOVLB  0
04EC8:  CALL   2ABA
....................    }
04ECC:  GOTO   5052
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
04ED0:  MOVLB  9
04ED2:  DECFSZ xF6,W
04ED4:  BRA    4EDA
04ED6:  BRA    4EE0
04ED8:  MOVLB  0
04EDA:  MOVLB  0
04EDC:  GOTO   5052
04EE0:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
04EE2:  MOVLW  06
04EE4:  MOVLB  A
04EE6:  MOVWF  x02
04EE8:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
04EEA:  MOVLW  21
04EEC:  MOVLB  A
04EEE:  MOVWF  x03
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
04EF0:  MOVFF  9FC,A0A
04EF4:  CLRF   x0B
04EF6:  CLRF   x0C
04EF8:  CLRF   x0D
04EFA:  MOVF   x0A,W
04EFC:  MOVWF  00
04EFE:  CLRF   01
04F00:  CLRF   02
04F02:  CLRF   03
04F04:  MOVFF  00,A04
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
04F08:  MOVFF  9FB,A0A
04F0C:  MOVFF  9FC,A0B
04F10:  CLRF   x0C
04F12:  CLRF   x0D
04F14:  MOVF   x0A,W
04F16:  MOVWF  00
04F18:  CLRF   01
04F1A:  CLRF   02
04F1C:  CLRF   03
04F1E:  MOVFF  00,A05
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
04F22:  MOVFF  9FA,A0A
04F26:  MOVFF  9FB,A0B
04F2A:  MOVFF  9FC,A0C
04F2E:  CLRF   x0D
04F30:  MOVF   x0A,W
04F32:  MOVWF  00
04F34:  CLRF   01
04F36:  CLRF   02
04F38:  CLRF   03
04F3A:  MOVFF  00,A06
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
04F3E:  MOVLB  9
04F40:  MOVF   xF9,W
04F42:  MOVWF  00
04F44:  CLRF   01
04F46:  CLRF   02
04F48:  CLRF   03
04F4A:  MOVFF  00,A07
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04F4E:  MOVFF  9F7,AF9
04F52:  MOVLB  A
04F54:  CLRF   xFA
04F56:  MOVLW  0F
04F58:  MOVWF  xFC
04F5A:  MOVLW  89
04F5C:  MOVWF  xFB
04F5E:  MOVLB  0
04F60:  CALL   2ABA
04F64:  MOVFF  9F7,AF9
04F68:  MOVLB  A
04F6A:  CLRF   xFA
04F6C:  MOVLW  0F
04F6E:  MOVWF  xFC
04F70:  MOVLW  92
04F72:  MOVWF  xFB
04F74:  MOVLB  0
04F76:  CALL   2ABA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
04F7A:  MOVFF  9F8,AF6
04F7E:  MOVFF  9F7,AF5
04F82:  MOVFF  9F6,AF4
04F86:  MOVFF  9F5,AF3
04F8A:  MOVLW  0A
04F8C:  MOVLB  A
04F8E:  MOVWF  xF8
04F90:  MOVLW  02
04F92:  MOVWF  xF7
04F94:  CLRF   xFA
04F96:  MOVLW  01
04F98:  MOVWF  xF9
04F9A:  MOVLB  0
04F9C:  CALL   3C3A
....................       output_high(flash_stream.cs_pin);
04FA0:  MOVFF  9F7,AF9
04FA4:  MOVLW  01
04FA6:  MOVLB  A
04FA8:  MOVWF  xFA
04FAA:  MOVLW  0F
04FAC:  MOVWF  xFC
04FAE:  MOVLW  89
04FB0:  MOVWF  xFB
04FB2:  MOVLB  0
04FB4:  CALL   2ABA
04FB8:  MOVFF  9F7,AF9
04FBC:  MOVLB  A
04FBE:  CLRF   xFA
04FC0:  MOVLW  0F
04FC2:  MOVWF  xFC
04FC4:  MOVLW  92
04FC6:  MOVWF  xFB
04FC8:  MOVLB  0
04FCA:  CALL   2ABA
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
04FCE:  MOVFF  9F7,AF9
04FD2:  MOVLB  A
04FD4:  CLRF   xFA
04FD6:  MOVLW  0F
04FD8:  MOVWF  xFC
04FDA:  MOVLW  89
04FDC:  MOVWF  xFB
04FDE:  MOVLB  0
04FE0:  CALL   2ABA
04FE4:  MOVFF  9F7,AF9
04FE8:  MOVLB  A
04FEA:  CLRF   xFA
04FEC:  MOVLW  0F
04FEE:  MOVWF  xFC
04FF0:  MOVLW  92
04FF2:  MOVWF  xFB
04FF4:  MOVLB  0
04FF6:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
04FFA:  MOVFF  9F8,AF6
04FFE:  MOVFF  9F7,AF5
05002:  MOVFF  9F6,AF4
05006:  MOVFF  9F5,AF3
0500A:  MOVLW  0A
0500C:  MOVLB  A
0500E:  MOVWF  xF8
05010:  MOVLW  03
05012:  MOVWF  xF7
05014:  CLRF   xFA
05016:  MOVLW  05
05018:  MOVWF  xF9
0501A:  MOVLB  0
0501C:  CALL   3C3A
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
05020:  MOVFF  9F7,AF9
05024:  MOVLW  01
05026:  MOVLB  A
05028:  MOVWF  xFA
0502A:  MOVLW  0F
0502C:  MOVWF  xFC
0502E:  MOVLW  89
05030:  MOVWF  xFB
05032:  MOVLB  0
05034:  CALL   2ABA
05038:  MOVFF  9F7,AF9
0503C:  MOVLB  A
0503E:  CLRF   xFA
05040:  MOVLW  0F
05042:  MOVWF  xFC
05044:  MOVLW  92
05046:  MOVWF  xFB
05048:  MOVLB  0
0504A:  CALL   2ABA
....................    }
0504E:  GOTO   5052
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
05052:  MOVLB  A
05054:  CLRF   x08
05056:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
05058:  MOVFF  9F8,AF6
0505C:  MOVFF  9F7,AF5
05060:  MOVFF  9F6,AF4
05064:  MOVFF  9F5,AF3
05068:  CALL   3EC8
0506C:  MOVF   01,W
0506E:  ANDLW  01
05070:  SUBLW  01
05072:  BTFSS  FD8.2
05074:  GOTO   508E
....................       delay_ms(1);   
05078:  MOVLW  01
0507A:  MOVLB  A
0507C:  MOVWF  xF3
0507E:  MOVLB  0
05080:  CALL   22AE
....................       if(timeout_counter > 1000){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
05084:  MOVLB  A
05086:  INCF   x08,F
05088:  MOVLB  0
0508A:  GOTO   5058
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
0508E:  RETURN 0
.................... }
....................  
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address)
.................... {
....................    unsigned int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................    
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    return read_data;
.................... }
....................  
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
02EE0:  MOVLB  A
02EE2:  MOVF   xDC,F
02EE4:  BTFSC  FD8.2
02EE6:  BRA    2EEE
02EE8:  MOVLB  0
02EEA:  GOTO   2FE2
02EEE:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
02EF0:  MOVLW  03
02EF2:  MOVLB  A
02EF4:  MOVWF  xE9
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02EF6:  MOVFF  AE1,AF3
02EFA:  MOVFF  AE2,AF4
02EFE:  CLRF   xF5
02F00:  CLRF   xF6
02F02:  MOVF   xF3,W
02F04:  MOVWF  00
02F06:  CLRF   01
02F08:  CLRF   02
02F0A:  CLRF   03
02F0C:  MOVFF  00,AEA
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02F10:  MOVFF  AE0,AF3
02F14:  MOVFF  AE1,AF4
02F18:  MOVFF  AE2,AF5
02F1C:  CLRF   xF6
02F1E:  MOVF   xF3,W
02F20:  MOVWF  00
02F22:  CLRF   01
02F24:  CLRF   02
02F26:  CLRF   03
02F28:  MOVFF  00,AEB
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02F2C:  MOVF   xDF,W
02F2E:  MOVWF  00
02F30:  CLRF   01
02F32:  CLRF   02
02F34:  CLRF   03
02F36:  MOVFF  00,AEC
....................             
....................       output_low(flash_stream.cs_pin);
02F3A:  MOVFF  ADD,AF9
02F3E:  CLRF   xFA
02F40:  MOVLW  0F
02F42:  MOVWF  xFC
02F44:  MOVLW  89
02F46:  MOVWF  xFB
02F48:  MOVLB  0
02F4A:  CALL   2ABA
02F4E:  MOVFF  ADD,AF9
02F52:  MOVLB  A
02F54:  CLRF   xFA
02F56:  MOVLW  0F
02F58:  MOVWF  xFC
02F5A:  MOVLW  92
02F5C:  MOVWF  xFB
02F5E:  MOVLB  0
02F60:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
02F64:  MOVFF  ADE,AFC
02F68:  MOVFF  ADD,AFB
02F6C:  MOVFF  ADC,AFA
02F70:  MOVFF  ADB,AF9
02F74:  MOVLW  0A
02F76:  MOVLB  A
02F78:  MOVWF  xFE
02F7A:  MOVLW  E9
02F7C:  MOVWF  xFD
02F7E:  MOVLB  B
02F80:  CLRF   x00
02F82:  MOVLW  04
02F84:  MOVLB  A
02F86:  MOVWF  xFF
02F88:  MOVFF  AE4,B02
02F8C:  MOVFF  AE3,B01
02F90:  MOVFF  AE8,B06
02F94:  MOVFF  AE7,B05
02F98:  MOVFF  AE6,B04
02F9C:  MOVFF  AE5,B03
02FA0:  MOVLB  0
02FA2:  CALL   2BCE
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
02FA6:  MOVLW  02
02FA8:  MOVWF  00
02FAA:  DECFSZ 00,F
02FAC:  BRA    2FAA
02FAE:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02FB0:  MOVFF  ADD,AF9
02FB4:  MOVLW  01
02FB6:  MOVLB  A
02FB8:  MOVWF  xFA
02FBA:  MOVLW  0F
02FBC:  MOVWF  xFC
02FBE:  MOVLW  89
02FC0:  MOVWF  xFB
02FC2:  MOVLB  0
02FC4:  CALL   2ABA
02FC8:  MOVFF  ADD,AF9
02FCC:  MOVLB  A
02FCE:  CLRF   xFA
02FD0:  MOVLW  0F
02FD2:  MOVWF  xFC
02FD4:  MOVLW  92
02FD6:  MOVWF  xFB
02FD8:  MOVLB  0
02FDA:  CALL   2ABA
....................    }
02FDE:  GOTO   30FA
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
02FE2:  MOVLB  A
02FE4:  DECFSZ xDC,W
02FE6:  BRA    2FEC
02FE8:  BRA    2FF2
02FEA:  MOVLB  0
02FEC:  MOVLB  0
02FEE:  GOTO   30FA
02FF2:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
02FF4:  MOVLW  13
02FF6:  MOVLB  A
02FF8:  MOVWF  xED
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
02FFA:  MOVFF  AE2,AF3
02FFE:  CLRF   xF4
03000:  CLRF   xF5
03002:  CLRF   xF6
03004:  MOVF   xF3,W
03006:  MOVWF  00
03008:  CLRF   01
0300A:  CLRF   02
0300C:  CLRF   03
0300E:  MOVFF  00,AEE
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03012:  MOVFF  AE1,AF3
03016:  MOVFF  AE2,AF4
0301A:  CLRF   xF5
0301C:  CLRF   xF6
0301E:  MOVF   xF3,W
03020:  MOVWF  00
03022:  CLRF   01
03024:  CLRF   02
03026:  CLRF   03
03028:  MOVFF  00,AEF
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0302C:  MOVFF  AE0,AF3
03030:  MOVFF  AE1,AF4
03034:  MOVFF  AE2,AF5
03038:  CLRF   xF6
0303A:  MOVF   xF3,W
0303C:  MOVWF  00
0303E:  CLRF   01
03040:  CLRF   02
03042:  CLRF   03
03044:  MOVFF  00,AF0
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
03048:  MOVF   xDF,W
0304A:  MOVWF  00
0304C:  CLRF   01
0304E:  CLRF   02
03050:  CLRF   03
03052:  MOVFF  00,AF1
....................    
....................       output_low(flash_stream.cs_pin);
03056:  MOVFF  ADD,AF9
0305A:  CLRF   xFA
0305C:  MOVLW  0F
0305E:  MOVWF  xFC
03060:  MOVLW  89
03062:  MOVWF  xFB
03064:  MOVLB  0
03066:  CALL   2ABA
0306A:  MOVFF  ADD,AF9
0306E:  MOVLB  A
03070:  CLRF   xFA
03072:  MOVLW  0F
03074:  MOVWF  xFC
03076:  MOVLW  92
03078:  MOVWF  xFB
0307A:  MOVLB  0
0307C:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
03080:  MOVFF  ADE,AFC
03084:  MOVFF  ADD,AFB
03088:  MOVFF  ADC,AFA
0308C:  MOVFF  ADB,AF9
03090:  MOVLW  0A
03092:  MOVLB  A
03094:  MOVWF  xFE
03096:  MOVLW  ED
03098:  MOVWF  xFD
0309A:  MOVLB  B
0309C:  CLRF   x00
0309E:  MOVLW  05
030A0:  MOVLB  A
030A2:  MOVWF  xFF
030A4:  MOVFF  AE4,B02
030A8:  MOVFF  AE3,B01
030AC:  MOVFF  AE8,B06
030B0:  MOVFF  AE7,B05
030B4:  MOVFF  AE6,B04
030B8:  MOVFF  AE5,B03
030BC:  MOVLB  0
030BE:  CALL   2BCE
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
030C2:  MOVLW  02
030C4:  MOVWF  00
030C6:  DECFSZ 00,F
030C8:  BRA    30C6
030CA:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
030CC:  MOVFF  ADD,AF9
030D0:  MOVLW  01
030D2:  MOVLB  A
030D4:  MOVWF  xFA
030D6:  MOVLW  0F
030D8:  MOVWF  xFC
030DA:  MOVLW  89
030DC:  MOVWF  xFB
030DE:  MOVLB  0
030E0:  CALL   2ABA
030E4:  MOVFF  ADD,AF9
030E8:  MOVLB  A
030EA:  CLRF   xFA
030EC:  MOVLW  0F
030EE:  MOVWF  xFC
030F0:  MOVLW  92
030F2:  MOVWF  xFB
030F4:  MOVLB  0
030F6:  CALL   2ABA
....................    }
....................    return;
030FA:  RETURN 0
.................... }
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
10000:  MOVLB  2
10002:  MOVF   x0B,F
10004:  BTFSC  FD8.2
10006:  BRA    1000E
10008:  MOVLB  0
1000A:  GOTO   10174
1000E:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
10010:  MOVLW  06
10012:  MOVLB  2
10014:  MOVWF  x13
10016:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
10018:  MOVLW  02
1001A:  MOVLB  2
1001C:  MOVWF  x14
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
1001E:  MOVFF  210,222
10022:  MOVFF  211,223
10026:  CLRF   x24
10028:  CLRF   x25
1002A:  MOVF   x22,W
1002C:  MOVWF  00
1002E:  CLRF   01
10030:  CLRF   02
10032:  CLRF   03
10034:  MOVFF  00,215
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
10038:  MOVFF  20F,222
1003C:  MOVFF  210,223
10040:  MOVFF  211,224
10044:  CLRF   x25
10046:  MOVF   x22,W
10048:  MOVWF  00
1004A:  CLRF   01
1004C:  CLRF   02
1004E:  CLRF   03
10050:  MOVFF  00,216
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
10054:  MOVF   x0E,W
10056:  MOVWF  00
10058:  CLRF   01
1005A:  CLRF   02
1005C:  CLRF   03
1005E:  MOVFF  00,217
....................       flash_cmd[4] = write_data;
10062:  MOVFF  212,218
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
10066:  MOVFF  20C,AF9
1006A:  MOVLB  A
1006C:  CLRF   xFA
1006E:  MOVLW  0F
10070:  MOVWF  xFC
10072:  MOVLW  89
10074:  MOVWF  xFB
10076:  MOVLB  0
10078:  CALL   2ABA
1007C:  MOVFF  20C,AF9
10080:  MOVLB  A
10082:  CLRF   xFA
10084:  MOVLW  0F
10086:  MOVWF  xFC
10088:  MOVLW  92
1008A:  MOVWF  xFB
1008C:  MOVLB  0
1008E:  CALL   2ABA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
10092:  MOVFF  20D,AF6
10096:  MOVFF  20C,AF5
1009A:  MOVFF  20B,AF4
1009E:  MOVFF  20A,AF3
100A2:  MOVLW  02
100A4:  MOVLB  A
100A6:  MOVWF  xF8
100A8:  MOVLW  13
100AA:  MOVWF  xF7
100AC:  CLRF   xFA
100AE:  MOVLW  01
100B0:  MOVWF  xF9
100B2:  MOVLB  0
100B4:  CALL   3C3A
....................       output_high(flash_stream.cs_pin);
100B8:  MOVFF  20C,AF9
100BC:  MOVLW  01
100BE:  MOVLB  A
100C0:  MOVWF  xFA
100C2:  MOVLW  0F
100C4:  MOVWF  xFC
100C6:  MOVLW  89
100C8:  MOVWF  xFB
100CA:  MOVLB  0
100CC:  CALL   2ABA
100D0:  MOVFF  20C,AF9
100D4:  MOVLB  A
100D6:  CLRF   xFA
100D8:  MOVLW  0F
100DA:  MOVWF  xFC
100DC:  MOVLW  92
100DE:  MOVWF  xFB
100E0:  MOVLB  0
100E2:  CALL   2ABA
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
100E6:  MOVFF  20C,AF9
100EA:  MOVLB  A
100EC:  CLRF   xFA
100EE:  MOVLW  0F
100F0:  MOVWF  xFC
100F2:  MOVLW  89
100F4:  MOVWF  xFB
100F6:  MOVLB  0
100F8:  CALL   2ABA
100FC:  MOVFF  20C,AF9
10100:  MOVLB  A
10102:  CLRF   xFA
10104:  MOVLW  0F
10106:  MOVWF  xFC
10108:  MOVLW  92
1010A:  MOVWF  xFB
1010C:  MOVLB  0
1010E:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
10112:  MOVFF  20D,AF6
10116:  MOVFF  20C,AF5
1011A:  MOVFF  20B,AF4
1011E:  MOVFF  20A,AF3
10122:  MOVLW  02
10124:  MOVLB  A
10126:  MOVWF  xF8
10128:  MOVLW  14
1012A:  MOVWF  xF7
1012C:  CLRF   xFA
1012E:  MOVLW  05
10130:  MOVWF  xF9
10132:  MOVLB  0
10134:  CALL   3C3A
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
10138:  MOVLW  02
1013A:  MOVWF  00
1013C:  DECFSZ 00,F
1013E:  BRA    1013C
10140:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
10142:  MOVFF  20C,AF9
10146:  MOVLW  01
10148:  MOVLB  A
1014A:  MOVWF  xFA
1014C:  MOVLW  0F
1014E:  MOVWF  xFC
10150:  MOVLW  89
10152:  MOVWF  xFB
10154:  MOVLB  0
10156:  CALL   2ABA
1015A:  MOVFF  20C,AF9
1015E:  MOVLB  A
10160:  CLRF   xFA
10162:  MOVLW  0F
10164:  MOVWF  xFC
10166:  MOVLW  92
10168:  MOVWF  xFB
1016A:  MOVLB  0
1016C:  CALL   2ABA
....................    }
10170:  GOTO   102FE
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
10174:  MOVLB  2
10176:  DECFSZ x0B,W
10178:  BRA    1017E
1017A:  BRA    10184
1017C:  MOVLB  0
1017E:  MOVLB  0
10180:  GOTO   102FE
10184:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
10186:  MOVLW  06
10188:  MOVLB  2
1018A:  MOVWF  x19
1018C:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
1018E:  MOVLW  12
10190:  MOVLB  2
10192:  MOVWF  x1A
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
10194:  MOVFF  211,222
10198:  CLRF   x23
1019A:  CLRF   x24
1019C:  CLRF   x25
1019E:  MOVF   x22,W
101A0:  MOVWF  00
101A2:  CLRF   01
101A4:  CLRF   02
101A6:  CLRF   03
101A8:  MOVFF  00,21B
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
101AC:  MOVFF  210,222
101B0:  MOVFF  211,223
101B4:  CLRF   x24
101B6:  CLRF   x25
101B8:  MOVF   x22,W
101BA:  MOVWF  00
101BC:  CLRF   01
101BE:  CLRF   02
101C0:  CLRF   03
101C2:  MOVFF  00,21C
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
101C6:  MOVFF  20F,222
101CA:  MOVFF  210,223
101CE:  MOVFF  211,224
101D2:  CLRF   x25
101D4:  MOVF   x22,W
101D6:  MOVWF  00
101D8:  CLRF   01
101DA:  CLRF   02
101DC:  CLRF   03
101DE:  MOVFF  00,21D
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
101E2:  MOVF   x0E,W
101E4:  MOVWF  00
101E6:  CLRF   01
101E8:  CLRF   02
101EA:  CLRF   03
101EC:  MOVFF  00,21E
....................       flash_cmd[5] = write_data;
101F0:  MOVFF  212,21F
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
101F4:  MOVFF  20C,AF9
101F8:  MOVLB  A
101FA:  CLRF   xFA
101FC:  MOVLW  0F
101FE:  MOVWF  xFC
10200:  MOVLW  89
10202:  MOVWF  xFB
10204:  MOVLB  0
10206:  CALL   2ABA
1020A:  MOVFF  20C,AF9
1020E:  MOVLB  A
10210:  CLRF   xFA
10212:  MOVLW  0F
10214:  MOVWF  xFC
10216:  MOVLW  92
10218:  MOVWF  xFB
1021A:  MOVLB  0
1021C:  CALL   2ABA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
10220:  MOVFF  20D,AF6
10224:  MOVFF  20C,AF5
10228:  MOVFF  20B,AF4
1022C:  MOVFF  20A,AF3
10230:  MOVLW  02
10232:  MOVLB  A
10234:  MOVWF  xF8
10236:  MOVLW  19
10238:  MOVWF  xF7
1023A:  CLRF   xFA
1023C:  MOVLW  01
1023E:  MOVWF  xF9
10240:  MOVLB  0
10242:  CALL   3C3A
....................       output_high(flash_stream.cs_pin);
10246:  MOVFF  20C,AF9
1024A:  MOVLW  01
1024C:  MOVLB  A
1024E:  MOVWF  xFA
10250:  MOVLW  0F
10252:  MOVWF  xFC
10254:  MOVLW  89
10256:  MOVWF  xFB
10258:  MOVLB  0
1025A:  CALL   2ABA
1025E:  MOVFF  20C,AF9
10262:  MOVLB  A
10264:  CLRF   xFA
10266:  MOVLW  0F
10268:  MOVWF  xFC
1026A:  MOVLW  92
1026C:  MOVWF  xFB
1026E:  MOVLB  0
10270:  CALL   2ABA
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
10274:  MOVFF  20C,AF9
10278:  MOVLB  A
1027A:  CLRF   xFA
1027C:  MOVLW  0F
1027E:  MOVWF  xFC
10280:  MOVLW  89
10282:  MOVWF  xFB
10284:  MOVLB  0
10286:  CALL   2ABA
1028A:  MOVFF  20C,AF9
1028E:  MOVLB  A
10290:  CLRF   xFA
10292:  MOVLW  0F
10294:  MOVWF  xFC
10296:  MOVLW  92
10298:  MOVWF  xFB
1029A:  MOVLB  0
1029C:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
102A0:  MOVFF  20D,AF6
102A4:  MOVFF  20C,AF5
102A8:  MOVFF  20B,AF4
102AC:  MOVFF  20A,AF3
102B0:  MOVLW  02
102B2:  MOVLB  A
102B4:  MOVWF  xF8
102B6:  MOVLW  1A
102B8:  MOVWF  xF7
102BA:  CLRF   xFA
102BC:  MOVLW  06
102BE:  MOVWF  xF9
102C0:  MOVLB  0
102C2:  CALL   3C3A
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
102C6:  MOVLW  02
102C8:  MOVWF  00
102CA:  DECFSZ 00,F
102CC:  BRA    102CA
102CE:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
102D0:  MOVFF  20C,AF9
102D4:  MOVLW  01
102D6:  MOVLB  A
102D8:  MOVWF  xFA
102DA:  MOVLW  0F
102DC:  MOVWF  xFC
102DE:  MOVLW  89
102E0:  MOVWF  xFB
102E2:  MOVLB  0
102E4:  CALL   2ABA
102E8:  MOVFF  20C,AF9
102EC:  MOVLB  A
102EE:  CLRF   xFA
102F0:  MOVLW  0F
102F2:  MOVWF  xFC
102F4:  MOVLW  92
102F6:  MOVWF  xFB
102F8:  MOVLB  0
102FA:  CALL   2ABA
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
102FE:  MOVLB  2
10300:  CLRF   x20
10302:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
10304:  MOVFF  20D,AF6
10308:  MOVFF  20C,AF5
1030C:  MOVFF  20B,AF4
10310:  MOVFF  20A,AF3
10314:  CALL   3EC8
10318:  MOVF   01,W
1031A:  ANDLW  01
1031C:  SUBLW  01
1031E:  BTFSS  FD8.2
10320:  GOTO   1033A
....................       delay_ms(1);   
10324:  MOVLW  01
10326:  MOVLB  A
10328:  MOVWF  xF3
1032A:  MOVLB  0
1032C:  CALL   22AE
....................       if(timeout_counter > 1000){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
10330:  MOVLB  2
10332:  INCF   x20,F
10334:  MOVLB  0
10336:  GOTO   10304
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
1033A:  RETURN 0
.................... }
....................  
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
03F6E:  MOVLB  A
03F70:  MOVF   xDC,F
03F72:  BTFSC  FD8.2
03F74:  BRA    3F7C
03F76:  MOVLB  0
03F78:  GOTO   40EA
03F7C:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
03F7E:  MOVLW  06
03F80:  MOVLB  A
03F82:  MOVWF  xE7
03F84:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
03F86:  MOVLW  02
03F88:  MOVLB  A
03F8A:  MOVWF  xE8
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03F8C:  MOVFF  AE1,AF4
03F90:  MOVFF  AE2,AF5
03F94:  CLRF   xF6
03F96:  CLRF   xF7
03F98:  MOVF   xF4,W
03F9A:  MOVWF  00
03F9C:  CLRF   01
03F9E:  CLRF   02
03FA0:  CLRF   03
03FA2:  MOVFF  00,AE9
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03FA6:  MOVFF  AE0,AF4
03FAA:  MOVFF  AE1,AF5
03FAE:  MOVFF  AE2,AF6
03FB2:  CLRF   xF7
03FB4:  MOVF   xF4,W
03FB6:  MOVWF  00
03FB8:  CLRF   01
03FBA:  CLRF   02
03FBC:  CLRF   03
03FBE:  MOVFF  00,AEA
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
03FC2:  MOVF   xDF,W
03FC4:  MOVWF  00
03FC6:  CLRF   01
03FC8:  CLRF   02
03FCA:  CLRF   03
03FCC:  MOVFF  00,AEB
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03FD0:  MOVFF  ADD,AF9
03FD4:  CLRF   xFA
03FD6:  MOVLW  0F
03FD8:  MOVWF  xFC
03FDA:  MOVLW  89
03FDC:  MOVWF  xFB
03FDE:  MOVLB  0
03FE0:  CALL   2ABA
03FE4:  MOVFF  ADD,AF9
03FE8:  MOVLB  A
03FEA:  CLRF   xFA
03FEC:  MOVLW  0F
03FEE:  MOVWF  xFC
03FF0:  MOVLW  92
03FF2:  MOVWF  xFB
03FF4:  MOVLB  0
03FF6:  CALL   2ABA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03FFA:  MOVFF  ADE,AF6
03FFE:  MOVFF  ADD,AF5
04002:  MOVFF  ADC,AF4
04006:  MOVFF  ADB,AF3
0400A:  MOVLW  0A
0400C:  MOVLB  A
0400E:  MOVWF  xF8
04010:  MOVLW  E7
04012:  MOVWF  xF7
04014:  CLRF   xFA
04016:  MOVLW  01
04018:  MOVWF  xF9
0401A:  MOVLB  0
0401C:  CALL   3C3A
....................       output_high(flash_stream.cs_pin);
04020:  MOVFF  ADD,AF9
04024:  MOVLW  01
04026:  MOVLB  A
04028:  MOVWF  xFA
0402A:  MOVLW  0F
0402C:  MOVWF  xFC
0402E:  MOVLW  89
04030:  MOVWF  xFB
04032:  MOVLB  0
04034:  CALL   2ABA
04038:  MOVFF  ADD,AF9
0403C:  MOVLB  A
0403E:  CLRF   xFA
04040:  MOVLW  0F
04042:  MOVWF  xFC
04044:  MOVLW  92
04046:  MOVWF  xFB
04048:  MOVLB  0
0404A:  CALL   2ABA
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
0404E:  MOVFF  ADD,AF9
04052:  MOVLB  A
04054:  CLRF   xFA
04056:  MOVLW  0F
04058:  MOVWF  xFC
0405A:  MOVLW  89
0405C:  MOVWF  xFB
0405E:  MOVLB  0
04060:  CALL   2ABA
04064:  MOVFF  ADD,AF9
04068:  MOVLB  A
0406A:  CLRF   xFA
0406C:  MOVLW  0F
0406E:  MOVWF  xFC
04070:  MOVLW  92
04072:  MOVWF  xFB
04074:  MOVLB  0
04076:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
0407A:  MOVFF  ADE,AF6
0407E:  MOVFF  ADD,AF5
04082:  MOVFF  ADC,AF4
04086:  MOVFF  ADB,AF3
0408A:  MOVLW  0A
0408C:  MOVLB  A
0408E:  MOVWF  xF8
04090:  MOVLW  E8
04092:  MOVWF  xF7
04094:  MOVLW  04
04096:  MOVWF  xF9
04098:  MOVFF  AE4,AFB
0409C:  MOVFF  AE3,AFA
040A0:  MOVFF  AE6,AFD
040A4:  MOVFF  AE5,AFC
040A8:  MOVLB  0
040AA:  CALL   3D2E
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
040AE:  MOVLW  02
040B0:  MOVWF  00
040B2:  DECFSZ 00,F
040B4:  BRA    40B2
040B6:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
040B8:  MOVFF  ADD,AF9
040BC:  MOVLW  01
040BE:  MOVLB  A
040C0:  MOVWF  xFA
040C2:  MOVLW  0F
040C4:  MOVWF  xFC
040C6:  MOVLW  89
040C8:  MOVWF  xFB
040CA:  MOVLB  0
040CC:  CALL   2ABA
040D0:  MOVFF  ADD,AF9
040D4:  MOVLB  A
040D6:  CLRF   xFA
040D8:  MOVLW  0F
040DA:  MOVWF  xFC
040DC:  MOVLW  92
040DE:  MOVWF  xFB
040E0:  MOVLB  0
040E2:  CALL   2ABA
....................    }
040E6:  GOTO   427C
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
040EA:  MOVLB  A
040EC:  DECFSZ xDC,W
040EE:  BRA    40F4
040F0:  BRA    40FA
040F2:  MOVLB  0
040F4:  MOVLB  0
040F6:  GOTO   427C
040FA:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
040FC:  MOVLW  06
040FE:  MOVLB  A
04100:  MOVWF  xEC
04102:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
04104:  MOVLW  12
04106:  MOVLB  A
04108:  MOVWF  xED
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
0410A:  MOVFF  AE2,AF4
0410E:  CLRF   xF5
04110:  CLRF   xF6
04112:  CLRF   xF7
04114:  MOVF   xF4,W
04116:  MOVWF  00
04118:  CLRF   01
0411A:  CLRF   02
0411C:  CLRF   03
0411E:  MOVFF  00,AEE
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
04122:  MOVFF  AE1,AF4
04126:  MOVFF  AE2,AF5
0412A:  CLRF   xF6
0412C:  CLRF   xF7
0412E:  MOVF   xF4,W
04130:  MOVWF  00
04132:  CLRF   01
04134:  CLRF   02
04136:  CLRF   03
04138:  MOVFF  00,AEF
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0413C:  MOVFF  AE0,AF4
04140:  MOVFF  AE1,AF5
04144:  MOVFF  AE2,AF6
04148:  CLRF   xF7
0414A:  MOVF   xF4,W
0414C:  MOVWF  00
0414E:  CLRF   01
04150:  CLRF   02
04152:  CLRF   03
04154:  MOVFF  00,AF0
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
04158:  MOVF   xDF,W
0415A:  MOVWF  00
0415C:  CLRF   01
0415E:  CLRF   02
04160:  CLRF   03
04162:  MOVFF  00,AF1
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04166:  MOVFF  ADD,AF9
0416A:  CLRF   xFA
0416C:  MOVLW  0F
0416E:  MOVWF  xFC
04170:  MOVLW  89
04172:  MOVWF  xFB
04174:  MOVLB  0
04176:  CALL   2ABA
0417A:  MOVFF  ADD,AF9
0417E:  MOVLB  A
04180:  CLRF   xFA
04182:  MOVLW  0F
04184:  MOVWF  xFC
04186:  MOVLW  92
04188:  MOVWF  xFB
0418A:  MOVLB  0
0418C:  CALL   2ABA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
04190:  MOVFF  ADE,AF6
04194:  MOVFF  ADD,AF5
04198:  MOVFF  ADC,AF4
0419C:  MOVFF  ADB,AF3
041A0:  MOVLW  0A
041A2:  MOVLB  A
041A4:  MOVWF  xF8
041A6:  MOVLW  EC
041A8:  MOVWF  xF7
041AA:  CLRF   xFA
041AC:  MOVLW  01
041AE:  MOVWF  xF9
041B0:  MOVLB  0
041B2:  CALL   3C3A
....................       output_high(flash_stream.cs_pin);
041B6:  MOVFF  ADD,AF9
041BA:  MOVLW  01
041BC:  MOVLB  A
041BE:  MOVWF  xFA
041C0:  MOVLW  0F
041C2:  MOVWF  xFC
041C4:  MOVLW  89
041C6:  MOVWF  xFB
041C8:  MOVLB  0
041CA:  CALL   2ABA
041CE:  MOVFF  ADD,AF9
041D2:  MOVLB  A
041D4:  CLRF   xFA
041D6:  MOVLW  0F
041D8:  MOVWF  xFC
041DA:  MOVLW  92
041DC:  MOVWF  xFB
041DE:  MOVLB  0
041E0:  CALL   2ABA
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
041E4:  MOVFF  ADD,AF9
041E8:  MOVLB  A
041EA:  CLRF   xFA
041EC:  MOVLW  0F
041EE:  MOVWF  xFC
041F0:  MOVLW  89
041F2:  MOVWF  xFB
041F4:  MOVLB  0
041F6:  CALL   2ABA
041FA:  MOVFF  ADD,AF9
041FE:  MOVLB  A
04200:  CLRF   xFA
04202:  MOVLW  0F
04204:  MOVWF  xFC
04206:  MOVLW  92
04208:  MOVWF  xFB
0420A:  MOVLB  0
0420C:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
04210:  MOVFF  ADE,AF6
04214:  MOVFF  ADD,AF5
04218:  MOVFF  ADC,AF4
0421C:  MOVFF  ADB,AF3
04220:  MOVLW  0A
04222:  MOVLB  A
04224:  MOVWF  xF8
04226:  MOVLW  ED
04228:  MOVWF  xF7
0422A:  MOVLW  05
0422C:  MOVWF  xF9
0422E:  MOVFF  AE4,AFB
04232:  MOVFF  AE3,AFA
04236:  MOVFF  AE6,AFD
0423A:  MOVFF  AE5,AFC
0423E:  MOVLB  0
04240:  CALL   3D2E
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
04244:  MOVLW  02
04246:  MOVWF  00
04248:  DECFSZ 00,F
0424A:  BRA    4248
0424C:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0424E:  MOVFF  ADD,AF9
04252:  MOVLW  01
04254:  MOVLB  A
04256:  MOVWF  xFA
04258:  MOVLW  0F
0425A:  MOVWF  xFC
0425C:  MOVLW  89
0425E:  MOVWF  xFB
04260:  MOVLB  0
04262:  CALL   2ABA
04266:  MOVFF  ADD,AF9
0426A:  MOVLB  A
0426C:  CLRF   xFA
0426E:  MOVLW  0F
04270:  MOVWF  xFC
04272:  MOVLW  92
04274:  MOVWF  xFB
04276:  MOVLB  0
04278:  CALL   2ABA
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
0427C:  MOVLB  A
0427E:  CLRF   xF2
04280:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
04282:  MOVFF  ADE,AF6
04286:  MOVFF  ADD,AF5
0428A:  MOVFF  ADC,AF4
0428E:  MOVFF  ADB,AF3
04292:  CALL   3EC8
04296:  MOVF   01,W
04298:  ANDLW  01
0429A:  SUBLW  01
0429C:  BTFSS  FD8.2
0429E:  GOTO   42B8
....................       delay_ms(1);
042A2:  MOVLW  01
042A4:  MOVLB  A
042A6:  MOVWF  xF3
042A8:  MOVLB  0
042AA:  CALL   22AE
....................       if(timeout_counter > 1000){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
042AE:  MOVLB  A
042B0:  INCF   xF2,F
042B2:  MOVLB  0
042B4:  GOTO   4282
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
042B8:  RETURN 0
.................... }
.................... 
....................  
.................... int1 is_connect(Flash flash_stream){
*
02E12:  MOVLW  9F
02E14:  MOVLB  2
02E16:  MOVWF  x5A
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
02E18:  MOVFF  244,AF9
02E1C:  MOVLB  A
02E1E:  CLRF   xFA
02E20:  MOVLW  0F
02E22:  MOVWF  xFC
02E24:  MOVLW  89
02E26:  MOVWF  xFB
02E28:  MOVLB  0
02E2A:  CALL   2ABA
02E2E:  MOVFF  244,AF9
02E32:  MOVLB  A
02E34:  CLRF   xFA
02E36:  MOVLW  0F
02E38:  MOVWF  xFC
02E3A:  MOVLW  92
02E3C:  MOVWF  xFB
02E3E:  MOVLB  0
02E40:  CALL   2ABA
....................    delay_us(10);  
02E44:  MOVLW  0D
02E46:  MOVWF  00
02E48:  DECFSZ 00,F
02E4A:  BRA    2E48
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
02E4C:  MOVFF  245,AFC
02E50:  MOVFF  244,AFB
02E54:  MOVFF  243,AFA
02E58:  MOVFF  242,AF9
02E5C:  MOVLW  02
02E5E:  MOVLB  A
02E60:  MOVWF  xFE
02E62:  MOVLW  5A
02E64:  MOVWF  xFD
02E66:  MOVLB  B
02E68:  CLRF   x00
02E6A:  MOVLW  01
02E6C:  MOVLB  A
02E6E:  MOVWF  xFF
02E70:  MOVLW  02
02E72:  MOVLB  B
02E74:  MOVWF  x02
02E76:  MOVLW  46
02E78:  MOVWF  x01
02E7A:  CLRF   x06
02E7C:  CLRF   x05
02E7E:  CLRF   x04
02E80:  MOVLW  14
02E82:  MOVWF  x03
02E84:  MOVLB  0
02E86:  CALL   2BCE
....................    output_high(flash_stream.cs_pin);
02E8A:  MOVFF  244,AF9
02E8E:  MOVLW  01
02E90:  MOVLB  A
02E92:  MOVWF  xFA
02E94:  MOVLW  0F
02E96:  MOVWF  xFC
02E98:  MOVLW  89
02E9A:  MOVWF  xFB
02E9C:  MOVLB  0
02E9E:  CALL   2ABA
02EA2:  MOVFF  244,AF9
02EA6:  MOVLB  A
02EA8:  CLRF   xFA
02EAA:  MOVLW  0F
02EAC:  MOVWF  xFC
02EAE:  MOVLW  92
02EB0:  MOVWF  xFB
02EB2:  MOVLB  0
02EB4:  CALL   2ABA
....................    //fprintf(PC,"Read ID:%02X", read_id_data.fields.manufacturer_id);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
02EB8:  MOVLB  2
02EBA:  MOVF   x46,W
02EBC:  SUBLW  20
02EBE:  BTFSC  FD8.2
02EC0:  BRA    2EC8
02EC2:  MOVLB  0
02EC4:  GOTO   2ED6
02EC8:  MOVLB  0
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
02ECA:  MOVLW  01
02ECC:  MOVWF  01
02ECE:  GOTO   2EDE
....................    }
02ED2:  GOTO   2EDE
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
02ED6:  MOVLW  00
02ED8:  MOVWF  01
02EDA:  GOTO   2EDE
....................    }
02EDE:  RETURN 0
.................... }
.................... 
.................... #include "../lib/tool/calc_tools.c"
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size)
.................... {
....................    if (payload_size <= 0) return 0;
*
030FC:  MOVLB  A
030FE:  MOVF   xDD,F
03100:  BTFSC  FD8.2
03102:  BRA    310A
03104:  MOVLB  0
03106:  GOTO   3114
0310A:  MOVLB  0
0310C:  MOVLW  00
0310E:  MOVWF  01
03110:  GOTO   3166
.................... 
....................    unsigned int8 crc = *frame++;
03114:  MOVLB  A
03116:  MOVF   xDC,W
03118:  MOVWF  03
0311A:  MOVF   xDB,W
0311C:  INCF   xDB,F
0311E:  BTFSC  FD8.2
03120:  INCF   xDC,F
03122:  MOVWF  FE9
03124:  MOVFF  03,FEA
03128:  MOVFF  FEF,ADE
0312C:  MOVLB  0
....................    while (--payload_size > 0)
0312E:  MOVLB  A
03130:  DECF   xDD,F
03132:  MOVF   xDD,F
03134:  BTFSS  FD8.2
03136:  BRA    313E
03138:  MOVLB  0
0313A:  GOTO   315E
0313E:  MOVLB  0
....................       crc ^= *frame++;
03140:  MOVLB  A
03142:  MOVF   xDC,W
03144:  MOVWF  03
03146:  MOVF   xDB,W
03148:  INCF   xDB,F
0314A:  BTFSC  FD8.2
0314C:  INCF   xDC,F
0314E:  MOVWF  FE9
03150:  MOVFF  03,FEA
03154:  MOVF   FEF,W
03156:  XORWF  xDE,F
03158:  MOVLB  0
0315A:  GOTO   312E
.................... 
....................    return crc;
0315E:  MOVLB  A
03160:  MOVF   xDE,W
03162:  MOVWF  01
03164:  MOVLB  0
03166:  RETURN 0
.................... }
.................... 
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size)
.................... {
....................    unsigned int8 received_crc = frame[payload_size - 1]; // CRC is the last byte
....................    unsigned int8 calculated_crc = calc_crc8(frame, payload_size - 1);
....................    return (received_crc == calculated_crc);
.................... }
.................... 
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index)
.................... {
....................     buf[index + 0] = (int8)(value >> 24);   // MSB
....................     buf[index + 1] = (int8)(value >> 16);
....................     buf[index + 2] = (int8)(value >>  8);
....................     buf[index + 3] = (int8)(value      );   // LSB
.................... }
.................... 
.................... int32 lsb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] <<  0) |
....................            ((int32)buf[index + 1] <<  8) |
....................            ((int32)buf[index + 2] << 16) |
....................            ((int32)buf[index + 3] << 24);
.................... }
.................... 
.................... 
.................... int32 msb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] << 24) |
....................            ((int32)buf[index + 1] << 16) |
....................            ((int32)buf[index + 2] <<  8) |
....................            ((int32)buf[index + 3]);
.................... }
.................... 
.................... unsigned int32 int32_lsb_to_msb(unsigned int32 value)
.................... {
....................     return ((value & 0x000000FF) << 24) |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0xFF000000) >> 24);
.................... }
.................... 
.................... unsigned int32 int32_msb_to_lsb(unsigned int32 value)
.................... {
....................     return ((value & 0xFF000000) >> 24) |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x000000FF) << 24);
.................... }
.................... // End of file
.................... 
.................... #include "../lib/tool/smf_queue.c"
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... typedef enum smf_memory_id_t{
....................     // SATO
....................     SMF_SATO_DATA_TABLE = 0xA0,
....................     SMF_SATO_PICLOG = 0xA1,
....................     SMF_SATO_INNER_DIODE_HEADER = 0xA2,
....................     SMF_SATO_INNER_DIODE_DATA = 0xA3,
....................     SMF_SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SMF_SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     SMF_CIGS_DATA_TABLE = 0xC0,
....................     SMF_CIGS_PICLOG = 0xC1,
....................     SMF_CIGS_ENVIRO = 0xC2,
....................     SMF_CIGS_IV1_HEADER = 0xC3,
....................     SMF_CIGS_IV1_DATA = 0xC4,
....................     SMF_CIGS_IV2_HEADER = 0xC5,
....................     SMF_CIGS_IV2_DATA = 0xC6,
.................... };
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS   0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS   0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS     0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS       0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS         0x06AB0FFF
.................... #define CIGS_ENVIRO_START_ADDRESS       0x06AB1000
.................... #define CIGS_ENVIRO_END_ADDRESS         0x06B50FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS   0x06B51000
.................... #define CIGS_IV1_HEADER_END_ADDRESS     0x06BF0FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS     0x06BF1000
.................... #define CIGS_IV1_DATA_END_ADDRESS       0x06FF0FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS   0x06FF1000
.................... #define CIGS_IV2_HEADER_END_ADDRESS     0x07090FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS     0x07091000
.................... #define CIGS_IV2_DATA_END_ADDRESS       0x07490FFF
.................... 
.................... /*
.................... enum smf_memory_id{
....................     // SATO
....................     SATO_DATA_TABLE = 0xA0,
....................     SATO_PICLOG = 0xA1,
....................     SATO_INNER_DIODE_HEADER = 0xA2,
....................     SATO_INNER_DIODE_DATA = 0xA3,
....................     SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     IDF_CIGS_DATA_TABLE = 0xC0,
....................     IDF_CIGS_PICLOG = 0xC1,
....................     IDF_CIGS_ENVIRO = 0xC2,
....................     IDF_CIGS_IV1_HEADER = 0xC3,
....................     IDF_CIGS_IV1_DATA = 0xC4,
....................     IDF_CIGS_IV2_HEADER = 0xC5,
....................     IDF_CIGS_IV2_DATA = 0xC6,
.................... }
.................... */
.................... // DATA ID for CIGS
.................... #define DATA_ID_CIGS_DATA_TABLE 0xC0
.................... #define DATA_ID_CIGS_PICLOG 0xC1
.................... #define DATA_ID_CIGS_ENVIRO 0xC2
.................... #define DATA_ID_CIGS_IV1_HEADER 0xC3
.................... #define DATA_ID_CIGS_IV1_DATA 0xC4
.................... #define DATA_ID_CIGS_IV2_HEADER 0xC5
.................... #define DATA_ID_CIGS_IV2_DATA 0xC6
.................... 
.................... // FLASH ADDRESS for CIGS
.................... #define SMF_DATA_TABLE_HEADER_START_ADDRESS   0x073B0000
.................... #define SMF_DATA_TABLE_HEADER_END_ADDRESS     0x073B0FFF
.................... #define SMF_DATA_TABLE_DATA_START_ADDRESS     0x073B1000
.................... #define SMF_DATA_TABLE_DATA_END_ADDRESS       0x073B1FFF
.................... 
.................... #define SMF_PICLOG_HEADER_START_ADDRESS       0x073B2000
.................... #define SMF_PICLOG_HEADER_END_ADDRESS         0x073B2FFF
.................... #define SMF_PICLOG_DATA_START_ADDRESS         0x073B3000
.................... #define SMF_PICLOG_DATA_END_ADDRESS           0x073C2FFF
.................... 
.................... #define SMF_ENVIRO_HEADER_START_ADDRESS       0x073C3000
.................... #define SMF_ENVIRO_HEADER_END_ADDRESS         0x073C3FFF
.................... #define SMF_ENVIRO_DATA_START_ADDRESS         0x073C4000
.................... #define SMF_ENVIRO_DATA_END_ADDRESS           0x07463FFF
.................... 
.................... #define SMF_IV1_HEADER_HEADER_START_ADDRESS   0x07464000
.................... #define SMF_IV1_HEADER_HEADER_END_ADDRESS     0x07464FFF
.................... #define SMF_IV1_HEADER_DATA_START_ADDRESS     0x07465000
.................... #define SMF_IV1_HEADER_DATA_END_ADDRESS       0x07504FFF
.................... 
.................... #define SMF_IV1_DATA_HEADER_START_ADDRESS     0x07505000
.................... #define SMF_IV1_DATA_HEADER_END_ADDRESS       0x07505FFF
.................... #define SMF_IV1_DATA_DATA_START_ADDRESS       0x07506000
.................... #define SMF_IV1_DATA_DATA_END_ADDRESS         0x07905FFF
.................... 
.................... #define SMF_IV2_HEADER_HEADER_START_ADDRESS   0x07906000
.................... #define SMF_IV2_HEADER_HEADER_END_ADDRESS     0x07906FFF
.................... #define SMF_IV2_HEADER_DATA_START_ADDRESS     0x07907000
.................... #define SMF_IV2_HEADER_DATA_END_ADDRESS       0x079A6FFF
.................... 
.................... #define SMF_IV2_DATA_HEADER_START_ADDRESS     0x079A7000
.................... #define SMF_IV2_DATA_HEADER_END_ADDRESS       0x079A7FFF
.................... #define SMF_IV2_DATA_DATA_START_ADDRESS       0x079A8000
.................... #define SMF_IV2_DATA_DATA_END_ADDRESS         0x07DA7FFF
.................... 
.................... 
.................... // FLASH SIZE for CIGS
.................... #define SMF_DATA_TABLE_SIZE  4096
.................... #define SMF_PICLOG_SIZE     1310720
.................... #define SMF_ENVIRO_SIZE     1310720
.................... #define SMF_IV1_HEADER_SIZE  655360
.................... #define SMF_IV1_DATA_SIZE    4194304
.................... #define SMF_IV2_HEADER_SIZE  655360
.................... #define SMF_IV2_DATA_SIZE    4194304
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data)
.................... {   
....................    fprintf(PC, "Enqueue Flash Operation\r\n");
*
0A72C:  MOVLW  98
0A72E:  MOVWF  FF6
0A730:  MOVLW  03
0A732:  MOVWF  FF7
0A734:  MOVLW  00
0A736:  MOVWF  FF8
0A738:  CALL   22DC
....................    int8 next_tail = (flash_queue.tail_index + 1) % SMF_QUEUE_SIZE;
0A73C:  MOVLW  01
0A73E:  MOVLB  1
0A740:  ADDWF  x03,W
0A742:  ANDLW  0F
0A744:  MOVWF  xD2
.................... 
....................    if(next_tail == flash_queue.head_index)
0A746:  MOVF   x02,W
0A748:  SUBWF  xD2,W
0A74A:  BTFSC  FD8.2
0A74C:  BRA    A754
0A74E:  MOVLB  0
0A750:  GOTO   A76A
0A754:  MOVLB  0
....................       printf("Flash queue is full!!!\r\n");
0A756:  MOVLW  B2
0A758:  MOVWF  FF6
0A75A:  MOVLW  03
0A75C:  MOVWF  FF7
0A75E:  MOVLW  00
0A760:  MOVWF  FF8
0A762:  CALL   22DC
0A766:  GOTO   A98A
....................       
....................    else
....................    {
....................       flash_queue.entries[flash_queue.tail_index].mission_id = data->mission_id;
0A76A:  MOVLB  1
0A76C:  MOVF   x03,W
0A76E:  MULLW  0C
0A770:  MOVF   FF3,W
0A772:  CLRF   xD4
0A774:  MOVWF  xD3
0A776:  MOVLW  42
0A778:  ADDWF  xD3,W
0A77A:  MOVWF  01
0A77C:  MOVLW  00
0A77E:  ADDWFC xD4,W
0A780:  MOVWF  03
0A782:  MOVF   01,W
0A784:  MOVWF  xD5
0A786:  MOVFF  03,1D6
0A78A:  MOVF   xD0,W
0A78C:  MOVWF  FE9
0A78E:  MOVF   xD1,W
0A790:  MOVWF  FEA
0A792:  MOVF   FEF,W
0A794:  MOVWF  xD7
0A796:  MOVFF  1D6,FEA
0A79A:  MOVFF  1D5,FE9
0A79E:  MOVFF  1D7,FEF
....................       flash_queue.entries[flash_queue.tail_index].func_type  = data->func_type;
0A7A2:  MOVF   x03,W
0A7A4:  MULLW  0C
0A7A6:  MOVF   FF3,W
0A7A8:  CLRF   xD4
0A7AA:  MOVWF  xD3
0A7AC:  MOVLW  01
0A7AE:  ADDWF  xD3,W
0A7B0:  MOVWF  01
0A7B2:  MOVLW  00
0A7B4:  ADDWFC xD4,W
0A7B6:  MOVWF  03
0A7B8:  MOVF   01,W
0A7BA:  ADDLW  42
0A7BC:  MOVWF  01
0A7BE:  MOVLW  00
0A7C0:  ADDWFC 03,F
0A7C2:  MOVF   01,W
0A7C4:  MOVWF  xD3
0A7C6:  MOVFF  03,1D4
0A7CA:  MOVLW  01
0A7CC:  ADDWF  xD0,W
0A7CE:  MOVWF  FE9
0A7D0:  MOVLW  00
0A7D2:  ADDWFC xD1,W
0A7D4:  MOVWF  FEA
0A7D6:  MOVF   FEF,W
0A7D8:  MOVWF  xD5
0A7DA:  MOVFF  1D4,FEA
0A7DE:  MOVFF  1D3,FE9
0A7E2:  MOVFF  1D5,FEF
....................       flash_queue.entries[flash_queue.tail_index].write_mode = data->write_mode;
0A7E6:  MOVF   x03,W
0A7E8:  MULLW  0C
0A7EA:  MOVF   FF3,W
0A7EC:  CLRF   xD4
0A7EE:  MOVWF  xD3
0A7F0:  MOVLW  02
0A7F2:  ADDWF  xD3,W
0A7F4:  MOVWF  01
0A7F6:  MOVLW  00
0A7F8:  ADDWFC xD4,W
0A7FA:  MOVWF  03
0A7FC:  MOVF   01,W
0A7FE:  ADDLW  42
0A800:  MOVWF  01
0A802:  MOVLW  00
0A804:  ADDWFC 03,F
0A806:  MOVF   01,W
0A808:  MOVWF  xD3
0A80A:  MOVFF  03,1D4
0A80E:  MOVLW  02
0A810:  ADDWF  xD0,W
0A812:  MOVWF  FE9
0A814:  MOVLW  00
0A816:  ADDWFC xD1,W
0A818:  MOVWF  FEA
0A81A:  MOVF   FEF,W
0A81C:  MOVWF  xD5
0A81E:  MOVFF  1D4,FEA
0A822:  MOVFF  1D3,FE9
0A826:  MOVFF  1D5,FEF
....................       flash_queue.entries[flash_queue.tail_index].source_type = data->source_type;
0A82A:  MOVF   x03,W
0A82C:  MULLW  0C
0A82E:  MOVF   FF3,W
0A830:  CLRF   xD4
0A832:  MOVWF  xD3
0A834:  MOVLW  03
0A836:  ADDWF  xD3,W
0A838:  MOVWF  01
0A83A:  MOVLW  00
0A83C:  ADDWFC xD4,W
0A83E:  MOVWF  03
0A840:  MOVF   01,W
0A842:  ADDLW  42
0A844:  MOVWF  01
0A846:  MOVLW  00
0A848:  ADDWFC 03,F
0A84A:  MOVF   01,W
0A84C:  MOVWF  xD3
0A84E:  MOVFF  03,1D4
0A852:  MOVLW  03
0A854:  ADDWF  xD0,W
0A856:  MOVWF  01
0A858:  MOVLW  00
0A85A:  ADDWFC xD1,W
0A85C:  MOVWF  03
0A85E:  MOVF   01,W
0A860:  MOVWF  FE9
0A862:  MOVFF  03,FEA
0A866:  MOVLW  00
0A868:  BTFSC  FEF.0
0A86A:  MOVLW  01
0A86C:  MOVWF  01
0A86E:  BTFSS  01.0
0A870:  BRA    A878
0A872:  MOVLB  0
0A874:  GOTO   A888
0A878:  MOVLB  0
0A87A:  MOVFF  1D4,FEA
0A87E:  MOVFF  1D3,FE9
0A882:  BCF    FEF.0
0A884:  GOTO   A892
0A888:  MOVFF  1D4,FEA
0A88C:  MOVFF  1D3,FE9
0A890:  BSF    FEF.0
....................       flash_queue.entries[flash_queue.tail_index].misf_start_addr = data->misf_start_addr;
0A892:  MOVLB  1
0A894:  MOVF   x03,W
0A896:  MULLW  0C
0A898:  MOVF   FF3,W
0A89A:  CLRF   xD4
0A89C:  MOVWF  xD3
0A89E:  MOVLW  04
0A8A0:  ADDWF  xD3,W
0A8A2:  MOVWF  01
0A8A4:  MOVLW  00
0A8A6:  ADDWFC xD4,W
0A8A8:  MOVWF  03
0A8AA:  MOVF   01,W
0A8AC:  ADDLW  42
0A8AE:  MOVWF  01
0A8B0:  MOVLW  00
0A8B2:  ADDWFC 03,F
0A8B4:  MOVF   01,W
0A8B6:  MOVWF  xD3
0A8B8:  MOVFF  03,1D4
0A8BC:  MOVLW  04
0A8BE:  ADDWF  xD0,W
0A8C0:  MOVWF  FE9
0A8C2:  MOVLW  00
0A8C4:  ADDWFC xD1,W
0A8C6:  MOVWF  FEA
0A8C8:  MOVFF  FEF,00
0A8CC:  MOVFF  FEC,01
0A8D0:  MOVFF  FEC,02
0A8D4:  MOVFF  FEC,03
0A8D8:  MOVF   FED,F
0A8DA:  MOVF   FED,F
0A8DC:  MOVF   FED,F
0A8DE:  MOVFF  03,1D8
0A8E2:  MOVFF  02,1D7
0A8E6:  MOVFF  01,1D6
0A8EA:  MOVFF  00,1D5
0A8EE:  MOVFF  1D4,FEA
0A8F2:  MOVFF  1D3,FE9
0A8F6:  MOVFF  1D5,FEF
0A8FA:  MOVFF  1D6,FEC
0A8FE:  MOVFF  1D7,FEC
0A902:  MOVFF  1D8,FEC
0A906:  MOVF   FED,F
0A908:  MOVF   FED,F
0A90A:  MOVF   FED,F
....................       flash_queue.entries[flash_queue.tail_index].misf_size = data->misf_size;
0A90C:  MOVF   x03,W
0A90E:  MULLW  0C
0A910:  MOVF   FF3,W
0A912:  CLRF   xD4
0A914:  MOVWF  xD3
0A916:  MOVLW  08
0A918:  ADDWF  xD3,W
0A91A:  MOVWF  01
0A91C:  MOVLW  00
0A91E:  ADDWFC xD4,W
0A920:  MOVWF  03
0A922:  MOVF   01,W
0A924:  ADDLW  42
0A926:  MOVWF  01
0A928:  MOVLW  00
0A92A:  ADDWFC 03,F
0A92C:  MOVF   01,W
0A92E:  MOVWF  xD3
0A930:  MOVFF  03,1D4
0A934:  MOVLW  08
0A936:  ADDWF  xD0,W
0A938:  MOVWF  FE9
0A93A:  MOVLW  00
0A93C:  ADDWFC xD1,W
0A93E:  MOVWF  FEA
0A940:  MOVFF  FEF,00
0A944:  MOVFF  FEC,01
0A948:  MOVFF  FEC,02
0A94C:  MOVFF  FEC,03
0A950:  MOVF   FED,F
0A952:  MOVF   FED,F
0A954:  MOVF   FED,F
0A956:  MOVFF  03,1D8
0A95A:  MOVFF  02,1D7
0A95E:  MOVFF  01,1D6
0A962:  MOVFF  00,1D5
0A966:  MOVFF  1D4,FEA
0A96A:  MOVFF  1D3,FE9
0A96E:  MOVFF  1D5,FEF
0A972:  MOVFF  1D6,FEC
0A976:  MOVFF  1D7,FEC
0A97A:  MOVFF  1D8,FEC
0A97E:  MOVF   FED,F
0A980:  MOVF   FED,F
0A982:  MOVF   FED,F
....................       flash_queue.tail_index = next_tail;
0A984:  MOVFF  1D2,103
0A988:  MOVLB  0
....................    }
0A98A:  RETURN 0
.................... 
.................... 
.................... }
.................... 
.................... 
.................... FlashOperationStruct *dequeue_flash_operation()
.................... {
....................    if (flash_queue.head_index == flash_queue.tail_index)
*
0FC16:  MOVLB  1
0FC18:  MOVF   x03,W
0FC1A:  SUBWF  x02,W
0FC1C:  BTFSC  FD8.2
0FC1E:  BRA    FC26
0FC20:  MOVLB  0
0FC22:  GOTO   FC48
0FC26:  MOVLB  0
....................    {
....................       printf("Flash queue is empty\r\n");
0FC28:  MOVLW  CC
0FC2A:  MOVWF  FF6
0FC2C:  MOVLW  03
0FC2E:  MOVWF  FF7
0FC30:  MOVLW  00
0FC32:  MOVWF  FF8
0FC34:  CALL   22DC
....................       return 0x00;
0FC38:  MOVLW  00
0FC3A:  MOVWF  01
0FC3C:  MOVLW  00
0FC3E:  MOVWF  02
0FC40:  GOTO   FC74
....................    }
0FC44:  GOTO   FC74
....................    else
....................    {
....................       int8 current_head = flash_queue.head_index;
0FC48:  MOVFF  102,192
....................       flash_queue.head_index = (flash_queue.head_index + 1) % SMF_QUEUE_SIZE;
0FC4C:  MOVLW  01
0FC4E:  MOVLB  1
0FC50:  ADDWF  x02,W
0FC52:  ANDLW  0F
0FC54:  MOVWF  x02
.................... 
.................... 
....................       return &flash_queue.entries[current_head];
0FC56:  MOVF   x92,W
0FC58:  MULLW  0C
0FC5A:  MOVF   FF3,W
0FC5C:  CLRF   03
0FC5E:  ADDLW  42
0FC60:  MOVWF  01
0FC62:  MOVLW  00
0FC64:  ADDWFC 03,F
0FC66:  MOVF   01,W
0FC68:  MOVWF  01
0FC6A:  MOVF   03,W
0FC6C:  MOVWF  02
0FC6E:  MOVLB  0
0FC70:  GOTO   FC74
....................    }
0FC74:  GOTO   12236 (RETURN)
.................... }
.................... 
.................... int1 is_empty_flash_queue(void)
.................... {
....................    return flash_queue.head_index == flash_queue.tail_index;
*
0FB3A:  MOVLB  1
0FB3C:  MOVF   x03,W
0FB3E:  SUBWF  x02,W
0FB40:  BTFSS  FD8.2
0FB42:  BRA    FB4A
0FB44:  MOVLB  0
0FB46:  GOTO   FB52
0FB4A:  MOVLB  0
0FB4C:  MOVLW  00
0FB4E:  GOTO   FB54
0FB52:  MOVLW  01
0FB54:  MOVWF  01
0FB56:  RETURN 0
.................... }
.................... 
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id)
.................... {
....................    SmfAddressStruct mis_struct = {0};
*
1126C:  MOVLB  1
1126E:  CLRF   xFC
11270:  CLRF   xFD
11272:  CLRF   xFE
11274:  CLRF   xFF
11276:  MOVLB  2
11278:  CLRF   x00
1127A:  CLRF   x01
1127C:  CLRF   x02
1127E:  CLRF   x03
.................... 
....................    if (mission_id == CIGS_DATA_TABLE)
11280:  MOVLB  1
11282:  MOVF   xFB,F
11284:  BTFSC  FD8.2
11286:  BRA    1128E
11288:  MOVLB  0
1128A:  GOTO   112B4
1128E:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_DATA_TABLE_START_ADDRESS;
11290:  MOVLW  06
11292:  MOVLB  1
11294:  MOVWF  xFF
11296:  MOVLW  AA
11298:  MOVWF  xFE
1129A:  CLRF   xFD
1129C:  CLRF   xFC
....................       mis_struct.end_address   = CIGS_DATA_TABLE_END_ADDRESS;
1129E:  MOVLW  06
112A0:  MOVLB  2
112A2:  MOVWF  x03
112A4:  MOVLW  AA
112A6:  MOVWF  x02
112A8:  MOVLW  0F
112AA:  MOVWF  x01
112AC:  SETF   x00
112AE:  MOVLB  0
....................    }
112B0:  GOTO   113FC
....................    else if (mission_id == CIGS_PICLOG_DATA)
112B4:  MOVLB  1
112B6:  DECFSZ xFB,W
112B8:  BRA    112BE
112BA:  BRA    112C4
112BC:  MOVLB  0
112BE:  MOVLB  0
112C0:  GOTO   112EC
112C4:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
112C6:  MOVLW  06
112C8:  MOVLB  1
112CA:  MOVWF  xFF
112CC:  MOVLW  AA
112CE:  MOVWF  xFE
112D0:  MOVLW  10
112D2:  MOVWF  xFD
112D4:  CLRF   xFC
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
112D6:  MOVLW  06
112D8:  MOVLB  2
112DA:  MOVWF  x03
112DC:  MOVLW  AB
112DE:  MOVWF  x02
112E0:  MOVLW  0F
112E2:  MOVWF  x01
112E4:  SETF   x00
112E6:  MOVLB  0
....................    }
112E8:  GOTO   113FC
....................    else if (mission_id == CIGS_ENVIRO_DATA)
112EC:  MOVLB  1
112EE:  MOVF   xFB,W
112F0:  SUBLW  02
112F2:  BTFSC  FD8.2
112F4:  BRA    112FC
112F6:  MOVLB  0
112F8:  GOTO   11324
112FC:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
112FE:  MOVLW  06
11300:  MOVLB  1
11302:  MOVWF  xFF
11304:  MOVLW  AA
11306:  MOVWF  xFE
11308:  MOVLW  10
1130A:  MOVWF  xFD
1130C:  CLRF   xFC
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
1130E:  MOVLW  06
11310:  MOVLB  2
11312:  MOVWF  x03
11314:  MOVLW  AB
11316:  MOVWF  x02
11318:  MOVLW  0F
1131A:  MOVWF  x01
1131C:  SETF   x00
1131E:  MOVLB  0
....................    }
11320:  GOTO   113FC
....................    else if (mission_id == CIGS_IV1_HEADER)
11324:  MOVLB  1
11326:  MOVF   xFB,W
11328:  SUBLW  03
1132A:  BTFSC  FD8.2
1132C:  BRA    11334
1132E:  MOVLB  0
11330:  GOTO   1135C
11334:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV1_HEADER_START_ADDRESS;
11336:  MOVLW  06
11338:  MOVLB  1
1133A:  MOVWF  xFF
1133C:  MOVLW  B5
1133E:  MOVWF  xFE
11340:  MOVLW  10
11342:  MOVWF  xFD
11344:  CLRF   xFC
....................       mis_struct.end_address   = CIGS_IV1_HEADER_END_ADDRESS;
11346:  MOVLW  06
11348:  MOVLB  2
1134A:  MOVWF  x03
1134C:  MOVLW  BF
1134E:  MOVWF  x02
11350:  MOVLW  0F
11352:  MOVWF  x01
11354:  SETF   x00
11356:  MOVLB  0
....................    }
11358:  GOTO   113FC
....................    else if (mission_id == CIGS_IV1_DATA)
1135C:  MOVLB  1
1135E:  MOVF   xFB,W
11360:  SUBLW  04
11362:  BTFSC  FD8.2
11364:  BRA    1136C
11366:  MOVLB  0
11368:  GOTO   11392
1136C:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV1_DATA_START_ADDRESS;
1136E:  MOVLW  06
11370:  MOVLB  1
11372:  MOVWF  xFF
11374:  MOVLW  BF
11376:  MOVWF  xFE
11378:  MOVLW  10
1137A:  MOVWF  xFD
1137C:  CLRF   xFC
....................       mis_struct.end_address   = CIGS_IV1_DATA_END_ADDRESS;
1137E:  MOVLW  06
11380:  MOVLB  2
11382:  MOVWF  x03
11384:  SETF   x02
11386:  MOVLW  0F
11388:  MOVWF  x01
1138A:  SETF   x00
1138C:  MOVLB  0
....................    }
1138E:  GOTO   113FC
....................       else if (mission_id == CIGS_IV2_HEADER)
11392:  MOVLB  1
11394:  MOVF   xFB,W
11396:  SUBLW  05
11398:  BTFSC  FD8.2
1139A:  BRA    113A2
1139C:  MOVLB  0
1139E:  GOTO   113C8
113A2:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV2_HEADER_START_ADDRESS;
113A4:  MOVLW  06
113A6:  MOVLB  1
113A8:  MOVWF  xFF
113AA:  SETF   xFE
113AC:  MOVLW  10
113AE:  MOVWF  xFD
113B0:  CLRF   xFC
....................       mis_struct.end_address   = CIGS_IV2_HEADER_END_ADDRESS;
113B2:  MOVLW  07
113B4:  MOVLB  2
113B6:  MOVWF  x03
113B8:  MOVLW  09
113BA:  MOVWF  x02
113BC:  MOVLW  0F
113BE:  MOVWF  x01
113C0:  SETF   x00
113C2:  MOVLB  0
....................    }
113C4:  GOTO   113FC
....................    else if (mission_id == CIGS_IV2_DATA)
113C8:  MOVLB  1
113CA:  MOVF   xFB,W
113CC:  SUBLW  06
113CE:  BTFSC  FD8.2
113D0:  BRA    113D8
113D2:  MOVLB  0
113D4:  GOTO   113FC
113D8:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV2_DATA_START_ADDRESS;
113DA:  MOVLW  07
113DC:  MOVLB  1
113DE:  MOVWF  xFF
113E0:  MOVLW  09
113E2:  MOVWF  xFE
113E4:  MOVLW  10
113E6:  MOVWF  xFD
113E8:  CLRF   xFC
....................       mis_struct.end_address   = CIGS_IV2_DATA_END_ADDRESS;
113EA:  MOVLW  07
113EC:  MOVLB  2
113EE:  MOVWF  x03
113F0:  MOVLW  49
113F2:  MOVWF  x02
113F4:  MOVLW  0F
113F6:  MOVWF  x01
113F8:  SETF   x00
113FA:  MOVLB  0
....................    }
....................    return mis_struct;
113FC:  MOVLW  FC
113FE:  MOVWF  01
11400:  MOVLW  01
11402:  MOVWF  02
11404:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "../lib/communication/communication.c"
.................... // #include "communication.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #include "mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
05594:  MOVLB  1
05596:  CLRF   x93
05598:  CLRF   x94
0559A:  CLRF   x95
0559C:  CLRF   x96
0559E:  CLRF   x97
055A0:  CLRF   x98
055A2:  CLRF   x99
055A4:  CLRF   x9A
055A6:  CLRF   x9B
055A8:  CLRF   x9C
055AA:  CLRF   x9D
055AC:  CLRF   x9E
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
055AE:  MOVLW  E4
055B0:  MOVWF  FF6
055B2:  MOVLW  03
055B4:  MOVWF  FF7
055B6:  MOVLW  00
055B8:  MOVWF  FF8
055BA:  MOVLB  0
055BC:  CALL   22DC
....................    fprintf(PC, "\t[BOSS] >>> ");
055C0:  MOVLW  04
055C2:  MOVWF  FF6
055C4:  MOVLW  04
055C6:  MOVWF  FF7
055C8:  MOVLW  00
055CA:  MOVWF  FF8
055CC:  CALL   22DC
....................    for (int8 i = 0; i < receive_signal_size; i++)
055D0:  MOVLB  1
055D2:  CLRF   x9F
055D4:  MOVLB  0
055D6:  MOVLB  1
055D8:  MOVF   x92,W
055DA:  SUBWF  x9F,W
055DC:  BTFSS  FD8.0
055DE:  BRA    55E6
055E0:  MOVLB  0
055E2:  GOTO   5622
055E6:  MOVLB  0
....................       fprintf(PC, "%X ", receive_signal[i]);
055E8:  MOVLB  1
055EA:  MOVF   x9F,W
055EC:  ADDWF  x90,W
055EE:  MOVWF  FE9
055F0:  MOVLW  00
055F2:  ADDWFC x91,W
055F4:  MOVWF  FEA
055F6:  MOVFF  FEF,1A6
055FA:  MOVFF  1A6,9D9
055FE:  MOVLW  37
05600:  MOVLB  9
05602:  MOVWF  xDA
05604:  MOVLB  0
05606:  CALL   2542
0560A:  MOVLW  20
0560C:  BTFSS  FA6.6
0560E:  GOTO   560C
05612:  MOVLB  E
05614:  MOVWF  xF9
05616:  MOVLB  0
05618:  MOVLB  1
0561A:  INCF   x9F,F
0561C:  MOVLB  0
0561E:  GOTO   55D6
....................    fprintf(PC, "\r\n");
05622:  MOVLW  0D
05624:  BTFSS  FA6.6
05626:  GOTO   5624
0562A:  MOVLB  E
0562C:  MOVWF  xF9
0562E:  MOVLW  0A
05630:  MOVLB  0
05632:  BTFSS  FA6.6
05634:  GOTO   5632
05638:  MOVLB  E
0563A:  MOVWF  xF9
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
0563C:  MOVFF  191,1A7
05640:  MOVFF  190,1A6
05644:  MOVFF  192,1A8
05648:  MOVLB  0
0564A:  GOTO   527C
0564E:  MOVFF  01,1A0
....................    if (frame_start_position == -1)
05652:  MOVLB  1
05654:  MOVF   xA0,W
05656:  SUBLW  FF
05658:  BTFSC  FD8.2
0565A:  BRA    5662
0565C:  MOVLB  0
0565E:  GOTO   5670
05662:  MOVLB  0
....................       return command;
05664:  MOVLW  93
05666:  MOVWF  01
05668:  MOVLW  01
0566A:  MOVWF  02
0566C:  GOTO   5792
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
05670:  MOVLB  1
05672:  MOVF   xA0,W
05674:  ADDWF  x90,W
05676:  MOVWF  01
05678:  MOVLW  00
0567A:  ADDWFC x91,W
0567C:  MOVWF  03
0567E:  MOVF   01,W
05680:  MOVWF  xA1
05682:  MOVFF  03,1A2
05686:  MOVF   xA1,W
05688:  MOVWF  FE9
0568A:  MOVF   xA2,W
0568C:  MOVWF  FEA
0568E:  MOVF   FEF,W
05690:  ANDLW  0F
05692:  MOVWF  xA3
05694:  MOVFF  1A3,1A6
05698:  MOVLB  0
0569A:  GOTO   5324
0569E:  MOVFF  01,1A4
....................    if (content_size == -1)
056A2:  MOVLB  1
056A4:  MOVF   xA4,W
056A6:  SUBLW  FF
056A8:  BTFSC  FD8.2
056AA:  BRA    56B2
056AC:  MOVLB  0
056AE:  GOTO   56C0
056B2:  MOVLB  0
....................       return command;
056B4:  MOVLW  93
056B6:  MOVWF  01
056B8:  MOVLW  01
056BA:  MOVWF  02
056BC:  GOTO   5792
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
056C0:  MOVLB  1
056C2:  MOVF   xA0,W
056C4:  SUBWF  x92,W
056C6:  MOVWF  xA5
....................    
....................    if (!check_crc(frame, receive_frame_size))
056C8:  MOVFF  1A2,1A7
056CC:  MOVFF  1A1,1A6
056D0:  MOVFF  1A5,1A8
056D4:  MOVLB  0
056D6:  GOTO   53E4
056DA:  MOVF   01,F
056DC:  BTFSS  FD8.2
056DE:  GOTO   56EE
....................       return command;
056E2:  MOVLW  93
056E4:  MOVWF  01
056E6:  MOVLW  01
056E8:  MOVWF  02
056EA:  GOTO   5792
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
056EE:  MOVLB  1
056F0:  MOVF   xA1,W
056F2:  MOVWF  FE9
056F4:  MOVF   xA2,W
056F6:  MOVWF  FEA
056F8:  MOVF   FEF,W
056FA:  ANDLW  F0
056FC:  MOVWF  00
056FE:  SWAPF  00,W
05700:  MOVWF  xA6
05702:  MOVLW  0F
05704:  ANDWF  xA6,F
05706:  MOVFF  1A6,1A7
0570A:  MOVLB  0
0570C:  GOTO   54D4
05710:  MOVF   01,F
05712:  BTFSS  FD8.2
05714:  GOTO   5724
....................       return command;
05718:  MOVLW  93
0571A:  MOVWF  01
0571C:  MOVLW  01
0571E:  MOVWF  02
05720:  GOTO   5792
.................... 
....................    command.frame_id = frame_id;
05724:  MOVFF  1A3,193
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
05728:  MOVLW  01
0572A:  MOVLB  1
0572C:  ADDWF  xA1,W
0572E:  MOVWF  01
05730:  MOVLW  00
05732:  ADDWFC xA2,W
05734:  MOVWF  03
05736:  MOVF   01,W
05738:  MOVWF  xA6
0573A:  MOVFF  03,1A7
0573E:  MOVLW  02
05740:  SUBWF  xA5,W
05742:  MOVWF  xA8
05744:  MOVLW  01
05746:  MOVWF  FEA
05748:  MOVLW  96
0574A:  MOVWF  FE9
0574C:  MOVFF  1A7,FE2
05750:  MOVFF  1A6,FE1
05754:  MOVF   xA8,W
05756:  MOVWF  01
05758:  BTFSS  FD8.2
0575A:  BRA    5762
0575C:  MOVLB  0
0575E:  GOTO   576E
05762:  MOVLB  0
05764:  MOVFF  FE6,FEE
05768:  DECFSZ 01,F
0576A:  GOTO   5764
....................    command.size = receive_frame_size-2;
0576E:  MOVLW  02
05770:  MOVLB  1
05772:  SUBWF  xA5,W
05774:  MOVWF  x94
....................    command.is_exist = TRUE;
05776:  BSF    x95.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
05778:  MOVLW  12
0577A:  MOVWF  FF6
0577C:  MOVLW  04
0577E:  MOVWF  FF7
05780:  MOVLW  00
05782:  MOVWF  FF8
05784:  MOVLB  0
05786:  CALL   22DC
....................    return command;
0578A:  MOVLW  93
0578C:  MOVWF  01
0578E:  MOVLW  01
05790:  MOVWF  02
05792:  GOTO   12C4E (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
0527C:  MOVLB  1
0527E:  CLRF   xA9
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
05280:  CLRF   xA9
05282:  MOVLB  0
05284:  MOVLW  01
05286:  MOVLB  1
05288:  SUBWF  xA8,W
0528A:  SUBWF  xA9,W
0528C:  BTFSS  FD8.0
0528E:  BRA    5296
05290:  MOVLB  0
05292:  GOTO   52CE
05296:  MOVLB  0
....................       if(receive_signal[i] == SFD)
05298:  MOVLB  1
0529A:  MOVF   xA9,W
0529C:  ADDWF  xA6,W
0529E:  MOVWF  FE9
052A0:  MOVLW  00
052A2:  ADDWFC xA7,W
052A4:  MOVWF  FEA
052A6:  MOVF   FEF,W
052A8:  SUBLW  AA
052AA:  BTFSC  FD8.2
052AC:  BRA    52B4
052AE:  MOVLB  0
052B0:  GOTO   52C4
052B4:  MOVLB  0
....................          return i+1;
052B6:  MOVLW  01
052B8:  MOVLB  1
052BA:  ADDWF  xA9,W
052BC:  MOVWF  01
052BE:  MOVLB  0
052C0:  GOTO   5320
052C4:  MOVLB  1
052C6:  INCF   xA9,F
052C8:  MOVLB  0
052CA:  GOTO   5284
....................    if (receive_signal[i] == SFD)
052CE:  MOVLB  1
052D0:  MOVF   xA9,W
052D2:  ADDWF  xA6,W
052D4:  MOVWF  FE9
052D6:  MOVLW  00
052D8:  ADDWFC xA7,W
052DA:  MOVWF  FEA
052DC:  MOVF   FEF,W
052DE:  SUBLW  AA
052E0:  BTFSC  FD8.2
052E2:  BRA    52EA
052E4:  MOVLB  0
052E6:  GOTO   5308
052EA:  MOVLB  0
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
052EC:  MOVLW  2E
052EE:  MOVWF  FF6
052F0:  MOVLW  04
052F2:  MOVWF  FF7
052F4:  MOVLW  00
052F6:  MOVWF  FF8
052F8:  CALL   22DC
....................       return -1;
052FC:  MOVLW  FF
052FE:  MOVWF  01
05300:  GOTO   5320
....................    }
05304:  GOTO   5320
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
05308:  MOVLW  44
0530A:  MOVWF  FF6
0530C:  MOVLW  04
0530E:  MOVWF  FF7
05310:  MOVLW  00
05312:  MOVWF  FF8
05314:  CALL   22DC
....................       return -1;
05318:  MOVLW  FF
0531A:  MOVWF  01
0531C:  GOTO   5320
....................    }
05320:  GOTO   564E (RETURN)
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
05324:  MOVLB  1
05326:  CLRF   xA7
05328:  MOVLB  0
0532A:  MOVLB  1
0532C:  MOVF   xA7,W
0532E:  SUBLW  03
05330:  BTFSC  FD8.0
05332:  BRA    533A
05334:  MOVLB  0
05336:  GOTO   5398
0533A:  MOVLB  0
....................       if (frame_id == frame_ids[i].id)
0533C:  BCF    FD8.0
0533E:  MOVLB  1
05340:  RLCF   xA7,W
05342:  CLRF   xA9
05344:  MOVWF  xA8
05346:  MOVLW  0C
05348:  ADDWF  xA8,W
0534A:  MOVWF  FE9
0534C:  MOVLW  01
0534E:  ADDWFC xA9,W
05350:  MOVWF  FEA
05352:  MOVF   FEF,W
05354:  SUBWF  xA6,W
05356:  BTFSC  FD8.2
05358:  BRA    5360
0535A:  MOVLB  0
0535C:  GOTO   538E
05360:  MOVLB  0
....................          return frame_ids[i].length;
05362:  BCF    FD8.0
05364:  MOVLB  1
05366:  RLCF   xA7,W
05368:  CLRF   xA9
0536A:  MOVWF  xA8
0536C:  MOVLW  01
0536E:  ADDWF  xA8,W
05370:  MOVWF  01
05372:  MOVLW  00
05374:  ADDWFC xA9,W
05376:  MOVWF  03
05378:  MOVF   01,W
0537A:  ADDLW  0C
0537C:  MOVWF  FE9
0537E:  MOVLW  01
05380:  ADDWFC 03,W
05382:  MOVWF  FEA
05384:  MOVF   FEF,W
05386:  MOVWF  01
05388:  MOVLB  0
0538A:  GOTO   53DE
0538E:  MOVLB  1
05390:  INCF   xA7,F
05392:  MOVLB  0
05394:  GOTO   532A
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
05398:  MOVLW  56
0539A:  MOVWF  FF6
0539C:  MOVLW  04
0539E:  MOVWF  FF7
053A0:  MOVLW  00
053A2:  MOVWF  FF8
053A4:  MOVLW  1F
053A6:  MOVLB  9
053A8:  MOVWF  xB3
053AA:  MOVLB  0
053AC:  CALL   2312
053B0:  MOVFF  1A6,9D9
053B4:  MOVLW  37
053B6:  MOVLB  9
053B8:  MOVWF  xDA
053BA:  MOVLB  0
053BC:  CALL   2542
053C0:  MOVLW  0D
053C2:  BTFSS  FA6.6
053C4:  GOTO   53C2
053C8:  MOVLB  E
053CA:  MOVWF  xF9
053CC:  MOVLW  0A
053CE:  MOVLB  0
053D0:  BTFSS  FA6.6
053D2:  GOTO   53D0
053D6:  MOVLB  E
053D8:  MOVWF  xF9
....................    return -1;
053DA:  MOVLW  FF
053DC:  MOVWF  01
053DE:  MOVLB  0
053E0:  GOTO   569E (RETURN)
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
053E4:  MOVLW  01
053E6:  MOVLB  1
053E8:  SUBWF  xA8,W
053EA:  ADDWF  xA6,W
053EC:  MOVWF  FE9
053EE:  MOVLW  00
053F0:  ADDWFC xA7,W
053F2:  MOVWF  FEA
053F4:  MOVFF  FEF,1A9
053F8:  MOVLW  01
053FA:  SUBWF  xA8,W
053FC:  MOVWF  xAB
053FE:  MOVFF  1A7,ADC
05402:  MOVFF  1A6,ADB
05406:  MOVFF  1AB,ADD
0540A:  MOVLB  0
0540C:  CALL   30FC
05410:  MOVFF  01,1AA
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
05414:  MOVLB  1
05416:  MOVF   xAA,W
05418:  SUBWF  xA9,W
0541A:  BTFSC  FD8.2
0541C:  BRA    5424
0541E:  MOVLB  0
05420:  GOTO   5432
05424:  MOVLB  0
....................       return TRUE;
05426:  MOVLW  01
05428:  MOVWF  01
0542A:  GOTO   54D0
0542E:  GOTO   54D0
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
05432:  MOVLW  7A
05434:  MOVWF  FF6
05436:  MOVLW  04
05438:  MOVWF  FF7
0543A:  MOVLW  00
0543C:  MOVWF  FF8
0543E:  CALL   22DC
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
05442:  MOVLW  8C
05444:  MOVWF  FF6
05446:  MOVLW  04
05448:  MOVWF  FF7
0544A:  MOVLW  00
0544C:  MOVWF  FF8
0544E:  MOVLW  13
05450:  MOVLB  9
05452:  MOVWF  xB3
05454:  MOVLB  0
05456:  CALL   2312
0545A:  MOVFF  1A9,9D9
0545E:  MOVLW  37
05460:  MOVLB  9
05462:  MOVWF  xDA
05464:  MOVLB  0
05466:  CALL   2542
0546A:  MOVLW  0D
0546C:  BTFSS  FA6.6
0546E:  GOTO   546C
05472:  MOVLB  E
05474:  MOVWF  xF9
05476:  MOVLW  0A
05478:  MOVLB  0
0547A:  BTFSS  FA6.6
0547C:  GOTO   547A
05480:  MOVLB  E
05482:  MOVWF  xF9
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
05484:  MOVLW  A4
05486:  MOVWF  FF6
05488:  MOVLW  04
0548A:  MOVWF  FF7
0548C:  MOVLW  00
0548E:  MOVWF  FF8
05490:  MOVLW  13
05492:  MOVLB  9
05494:  MOVWF  xB3
05496:  MOVLB  0
05498:  CALL   2312
0549C:  MOVFF  1AA,9D9
054A0:  MOVLW  37
054A2:  MOVLB  9
054A4:  MOVWF  xDA
054A6:  MOVLB  0
054A8:  CALL   2542
054AC:  MOVLW  0D
054AE:  BTFSS  FA6.6
054B0:  GOTO   54AE
054B4:  MOVLB  E
054B6:  MOVWF  xF9
054B8:  MOVLW  0A
054BA:  MOVLB  0
054BC:  BTFSS  FA6.6
054BE:  GOTO   54BC
054C2:  MOVLB  E
054C4:  MOVWF  xF9
....................       return FALSE;
054C6:  MOVLW  00
054C8:  MOVWF  01
054CA:  MOVLB  0
054CC:  GOTO   54D0
....................    }
054D0:  GOTO   56DA (RETURN)
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
054D4:  MOVLB  1
054D6:  MOVF   xA7,W
054D8:  SUBLW  0C
054DA:  BTFSC  FD8.2
054DC:  BRA    54E4
054DE:  MOVLB  0
054E0:  GOTO   54F2
054E4:  MOVLB  0
....................       return TRUE;
054E6:  MOVLW  01
054E8:  MOVWF  01
054EA:  GOTO   5590
054EE:  GOTO   5590
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
054F2:  MOVLW  BC
054F4:  MOVWF  FF6
054F6:  MOVLW  04
054F8:  MOVWF  FF7
054FA:  MOVLW  00
054FC:  MOVWF  FF8
054FE:  CALL   22DC
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
05502:  MOVLW  DE
05504:  MOVWF  FF6
05506:  MOVLW  04
05508:  MOVWF  FF7
0550A:  MOVLW  00
0550C:  MOVWF  FF8
0550E:  MOVLW  13
05510:  MOVLB  9
05512:  MOVWF  xB3
05514:  MOVLB  0
05516:  CALL   2312
0551A:  MOVFF  1A7,9D9
0551E:  MOVLW  37
05520:  MOVLB  9
05522:  MOVWF  xDA
05524:  MOVLB  0
05526:  CALL   2542
0552A:  MOVLW  0D
0552C:  BTFSS  FA6.6
0552E:  GOTO   552C
05532:  MOVLB  E
05534:  MOVWF  xF9
05536:  MOVLW  0A
05538:  MOVLB  0
0553A:  BTFSS  FA6.6
0553C:  GOTO   553A
05540:  MOVLB  E
05542:  MOVWF  xF9
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
05544:  MOVLW  F6
05546:  MOVWF  FF6
05548:  MOVLW  04
0554A:  MOVWF  FF7
0554C:  MOVLW  00
0554E:  MOVWF  FF8
05550:  MOVLW  13
05552:  MOVLB  9
05554:  MOVWF  xB3
05556:  MOVLB  0
05558:  CALL   2312
0555C:  MOVLW  0C
0555E:  MOVLB  9
05560:  MOVWF  xD9
05562:  MOVLW  37
05564:  MOVWF  xDA
05566:  MOVLB  0
05568:  CALL   2542
0556C:  MOVLW  0D
0556E:  BTFSS  FA6.6
05570:  GOTO   556E
05574:  MOVLB  E
05576:  MOVWF  xF9
05578:  MOVLW  0A
0557A:  MOVLB  0
0557C:  BTFSS  FA6.6
0557E:  GOTO   557C
05582:  MOVLB  E
05584:  MOVWF  xF9
....................       return FALSE;  
05586:  MOVLW  00
05588:  MOVWF  01
0558A:  MOVLB  0
0558C:  GOTO   5590
....................    }
05590:  GOTO   5710 (RETURN)
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
058A0:  MOVLW  AA
058A2:  MOVLB  1
058A4:  MOVWF  xD4
....................    data[1] = (BOSS_PIC << 4) | frame_id;
058A6:  MOVF   xD0,W
058A8:  IORLW  50
058AA:  MOVWF  xD5
....................    memcpy(&data[2], content, size);
058AC:  MOVLW  01
058AE:  MOVWF  FEA
058B0:  MOVLW  D6
058B2:  MOVWF  FE9
058B4:  MOVFF  1D2,FE2
058B8:  MOVFF  1D1,FE1
058BC:  MOVF   xD3,W
058BE:  MOVWF  01
058C0:  BTFSS  FD8.2
058C2:  BRA    58CA
058C4:  MOVLB  0
058C6:  GOTO   58D6
058CA:  MOVLB  0
058CC:  MOVFF  FE6,FEE
058D0:  DECFSZ 01,F
058D2:  GOTO   58CC
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
058D6:  MOVLW  02
058D8:  MOVLB  1
058DA:  ADDWF  xD3,W
058DC:  MOVWF  xE4
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
058DE:  CLRF   03
058E0:  MOVF   xE4,W
058E2:  ADDLW  D4
058E4:  MOVWF  01
058E6:  MOVLW  01
058E8:  ADDWFC 03,F
058EA:  MOVF   01,W
058EC:  MOVWF  xE6
058EE:  MOVFF  03,1E7
058F2:  MOVLW  01
058F4:  SUBWF  xE4,W
058F6:  MOVWF  xE8
058F8:  MOVLW  01
058FA:  MOVLB  A
058FC:  MOVWF  xDC
058FE:  MOVLW  D5
05900:  MOVWF  xDB
05902:  MOVFF  1E8,ADD
05906:  MOVLB  0
05908:  CALL   30FC
0590C:  MOVFF  1E7,FEA
05910:  MOVFF  1E6,FE9
05914:  MOVFF  01,FEF
....................    int8 data_size = payload_size + 1; // '1' is for CRC
05918:  MOVLW  01
0591A:  MOVLB  1
0591C:  ADDWF  xE4,W
0591E:  MOVWF  xE5
....................    
....................    transmit(data, data_size);
05920:  MOVLW  01
05922:  MOVWF  xE7
05924:  MOVLW  D4
05926:  MOVWF  xE6
05928:  MOVFF  1E5,1E8
0592C:  MOVLB  0
0592E:  GOTO   57E2
05932:  RETURN 0
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
057E2:  MOVLB  1
057E4:  CLRF   xE9
057E6:  MOVLB  0
057E8:  MOVLB  1
057EA:  MOVF   xE8,W
057EC:  SUBWF  xE9,W
057EE:  BTFSS  FD8.0
057F0:  BRA    57F8
057F2:  MOVLB  0
057F4:  GOTO   581E
057F8:  MOVLB  0
....................       fputc(data[i], BOSS);
057FA:  MOVLB  1
057FC:  MOVF   xE9,W
057FE:  ADDWF  xE6,W
05800:  MOVWF  FE9
05802:  MOVLW  00
05804:  ADDWFC xE7,W
05806:  MOVWF  FEA
05808:  MOVFF  FEF,1EB
0580C:  MOVF   xEB,W
0580E:  MOVLB  0
05810:  GOTO   57D2
05814:  MOVLB  1
05816:  INCF   xE9,F
05818:  MOVLB  0
0581A:  GOTO   57E8
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
0581E:  MOVLW  0E
05820:  MOVWF  FF6
05822:  MOVLW  05
05824:  MOVWF  FF7
05826:  MOVLW  00
05828:  MOVWF  FF8
0582A:  CALL   22DC
....................    for(int i = 0; i < data_size; i++)
0582E:  MOVLB  1
05830:  CLRF   xEA
05832:  MOVLB  0
05834:  MOVLB  1
05836:  MOVF   xE8,W
05838:  SUBWF  xEA,W
0583A:  BTFSS  FD8.0
0583C:  BRA    5844
0583E:  MOVLB  0
05840:  GOTO   5880
05844:  MOVLB  0
....................       fprintf(PC, "%X ", data[i]);
05846:  MOVLB  1
05848:  MOVF   xEA,W
0584A:  ADDWF  xE6,W
0584C:  MOVWF  FE9
0584E:  MOVLW  00
05850:  ADDWFC xE7,W
05852:  MOVWF  FEA
05854:  MOVFF  FEF,1EB
05858:  MOVFF  1EB,9D9
0585C:  MOVLW  37
0585E:  MOVLB  9
05860:  MOVWF  xDA
05862:  MOVLB  0
05864:  CALL   2542
05868:  MOVLW  20
0586A:  BTFSS  FA6.6
0586C:  GOTO   586A
05870:  MOVLB  E
05872:  MOVWF  xF9
05874:  MOVLB  0
05876:  MOVLB  1
05878:  INCF   xEA,F
0587A:  MOVLB  0
0587C:  GOTO   5834
....................    fprintf(PC, "\r\n");
05880:  MOVLW  0D
05882:  BTFSS  FA6.6
05884:  GOTO   5882
05888:  MOVLB  E
0588A:  MOVWF  xF9
0588C:  MOVLW  0A
0588E:  MOVLB  0
05890:  BTFSS  FA6.6
05892:  GOTO   5890
05896:  MOVLB  E
05898:  MOVWF  xF9
0589A:  MOVLB  0
0589C:  GOTO   5932 (RETURN)
.................... }
.................... 
.................... #include "../lib/communication/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    return command;
.................... }
.................... 
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
05934:  MOVLW  0F
05936:  MOVLB  1
05938:  MOVWF  xD0
0593A:  CLRF   xD2
0593C:  CLRF   xD1
0593E:  CLRF   xD3
05940:  MOVLB  0
05942:  CALL   58A0
05946:  RETURN 0
.................... }
.................... 
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
0A6D4:  MOVLW  03
0A6D6:  MOVLB  1
0A6D8:  MOVWF  xD0
0A6DA:  CLRF   xD2
0A6DC:  MOVLW  3E
0A6DE:  MOVWF  xD1
0A6E0:  MOVLW  04
0A6E2:  MOVWF  xD3
0A6E4:  MOVLB  0
0A6E6:  CALL   58A0
0A6EA:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (boss_receive_buffer_size > 0)
0A6EC:  MOVF   3C,F
0A6EE:  BTFSC  FD8.2
0A6F0:  GOTO   A728
....................    {
....................       clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
0A6F4:  MOVLB  1
0A6F6:  CLRF   xD1
0A6F8:  MOVLW  1C
0A6FA:  MOVWF  xD0
0A6FC:  CLRF   xD3
0A6FE:  MOVLW  3C
0A700:  MOVWF  xD2
0A702:  MOVLB  0
0A704:  CALL   5796
....................       fprintf(PC, "\r\n");
0A708:  MOVLW  0D
0A70A:  BTFSS  FA6.6
0A70C:  GOTO   A70A
0A710:  MOVLB  E
0A712:  MOVWF  xF9
0A714:  MOVLW  0A
0A716:  MOVLB  0
0A718:  BTFSS  FA6.6
0A71A:  GOTO   A718
0A71E:  MOVLB  E
0A720:  MOVWF  xF9
....................       transmit_status();
0A722:  MOVLB  0
0A724:  CALL   A6D4
....................    }
0A728:  GOTO   AA76 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... // コア機能実装ファイル
.................... #include "domain/cigs_iv.c"
.................... #include "cigs_iv.h"      
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... #define SWEEP_MAX_STEP 0xFF
.................... 
.................... typedef enum {
....................     CELL1 = 0,
....................     CELL2,
.................... } cell_select_t;
.................... 
.................... typedef struct {
....................     cell_select_t cell;
....................     unsigned int16 voltage[SWEEP_MAX_STEP];
....................     unsigned int16 current[SWEEP_MAX_STEP];
....................     unsigned int16 max_power;
....................     unsigned int16 sweep_count;
.................... } cell_iv_data_t;
.................... 
.................... typedef struct {
....................     unsigned int32 time;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 pd;
.................... } env_data_t;
.................... 
.................... typedef struct{
....................     cell_iv_data_t cell1_iv_data;
....................     cell_iv_data_t cell2_iv_data;
.................... } sweep_result_t;
.................... 
.................... typedef struct {
....................     int1 cell1;
....................     int1 cell2;
....................     unsigned int16 curr_limit;
.................... }sweep_setting_t;
.................... 
.................... 
.................... void meas_env_data(env_data_t *env_data_ptr);
.................... void meas_iv(sweep_setting_t *sweep_config_ptr, sweep_result_t *sweep_result_ptr);
.................... void save_sweep_result(env_data_t *env_data_ptr, sweep_result_t *sweep_result_ptr);
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/cigs_config.h"      
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../device_driver/ad7490_driver.h"  
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... static void ad7490_enable_cs(void);
.................... static void ad7490_disable_cs(void);
.................... 
.................... #endif // MMJ_CIGS_DEVICE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../device_driver/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "cigs_flash.h"               
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/mission_tools.h"   
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../hal/timer.h"
.................... #ifndef _TIMER_H_
.................... #define _TIMER_H_
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... #INT_TIMER1 
.................... static void TIMER1_isr();
.................... 
.................... 
.................... // __________ functions _________
.................... void timer_init();
.................... 
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... 
.................... #endif // _TIMER_H_
.................... 
.................... #include "../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... // ================================== ADD NEW DEFINES HERE ==================================
.................... // =============================================================================================
.................... // MT25Q Flash Memory Specifications
.................... #define MT25Q_BLOCK_SIZE   4096
.................... #define MT25Q_BLOCK_NUM    8192
.................... #define DEV
.................... #ifdef DEV
.................... typedef enum mt25q_cmd{
....................     //Software RESET Operations
....................     MT25Q_CMD_RESET_ENABLE = 0x66,
....................     MT25Q_CMD_RESET_MEMORY = 0x99,
.................... 
....................     //READ ID Operations
....................     MT25Q_CMD_READ_ID = 0x9F,
....................     MT25Q_CMD_READ_ID_MULTI_IO = 0xAF,
....................     MT25Q_CMD_READ_PARAMETER = 0x5A,
.................... 
....................     //READ MEMORY Operations
....................     MT25Q_CMD_READ = 0x03,
....................     MT25Q_CMD_READ_FAST = 0x0B,
....................     MT25Q_CMD_READ_DUAL_OUTPUT_FAST = 0x3B,
....................     MT25Q_CMD_READ_DUAL_IO_FAST = 0xBB,
....................     MT25Q_CMD_READ_QUAD_OUTPUT_FAST = 0x6B,
....................     MT25Q_CMD_READ_QUAD_IO_FAST = 0xEB,
....................     MT25Q_CMD_READ_QUAD_IO = 0x6B,
....................     MT25Q_CMD_READ_DTR_FAST = 0x0D,
....................     MT25Q_CMD_READ_DTR_OUTPUT_FAST = 0x3D,
....................     MT25Q_CMD_READ_DTR_IO_FAST = 0xBD,
....................     MT25Q_CMD_READ_DTR_QUAD_OUTPUT_FAST = 0x6D,
....................     MT25Q_CMD_READ_DTR_QUAD_IO_FAST = 0xED, 
....................     MT25Q_CMD_READ_QUAD_IO_WORD = 0xE7,
.................... 
....................     //READ MEMORY Operations with 4-Byte Address
....................     MT25Q_CMD_4BYTE_READ = 0x13,
....................     MT25Q_CMD_4BYTE_READ_FAST = 0x0C,
....................     MT25Q_CMD_4BYTE_READ_DUAL_OUTPUT_FAST = 0x3C,
....................     MT25Q_CMD_4BYTE_DUAL_IO_FAST_READ = 0xBC,  
....................     MT25Q_CMD_4BYTE_QUAD_OUTPUT_FAST_READ = 0x6C,
....................     MT25Q_CMD_4BYTE_QUAD_IO_FAST_READ = 0xEC,   
....................     MT25Q_CMD_4BYTE_DTR_FAST_READ = 0x0E,
....................     MT25Q_CMD_4BYTE_DTR_DUAL_IO_FAST_READ = 0xBE,
....................     MT25Q_CMD_4BYTE_DTR_QUAD_IO_FAST_READ = 0xEE,
.................... 
....................     //WRITE Operations
....................     MT25Q_CMD_WRITE_ENABLE = 0x06,
....................     MT25Q_CMD_WRITE_DISABLE = 0x04,
.................... 
....................     //READ REGISTER Operations
....................     MT25Q_CMD_READ_STATUS_REG = 0x05,
....................     MT25Q_CMD_READ_FLAG_STATUS_REG = 0x70,
....................     MT25Q_CMD_READ_NONVOL_CFG_REG = 0xB5,
....................     MT25Q_CMD_READ_VOL_CFG_REG = 0x85,
....................     MT25Q_CMD_READ_ENHANCED_VOL_CFG_REG = 0x65,
....................     MT25Q_CMD_READ_EXT_ADDR_REG = 0xC8,
....................     MT25Q_CMD_READ_GENERAL_PURPOSE_REG = 0x96,
.................... 
....................     //WRITE REGISTER Operations
....................     MT25Q_CMD_WRITE_STATUS_REG = 0x01,
....................     MT25Q_CMD_WRITE_NONVOL_CFG_REG = 0xB1,
....................     MT25Q_CMD_WRITE_VOL_CFG_REG = 0x81,
....................     MT25Q_CMD_WRITE_ENHANCED_VOL_CFG_REG = 0x61,
....................     MT25Q_CMD_WRITE_EXT_ADDR_REG = 0xC5,
.................... 
....................     //CLEAR FLAG STATUS REGISTER Operation
....................     MT25Q_CMD_CLEAR_FLAG_STATUS_REG = 0x50,
.................... 
....................     //PROGRAM Operations
....................     MT25Q_CMD_PAGE_PROGRAM = 0x02,
....................     MT25Q_CMD_DUAL_INPUT_FAST_PROGRAM = 0xA2,
....................     MT25Q_CMD_EXT_DUAL_INPUT_FAST_PROGRAM = 0xD2,
....................     MT25Q_CMD_QUAD_INPUT_FAST_PROGRAM = 0x32,
....................     MT25Q_CMD_EXT_QUAD_INPUT_FAST_PROGRAM = 0x38,
.................... 
....................     //PROGRAM Operations with 4-Byte Address
....................     MT25Q_CMD_4BYTE_PAGE_PROGRAM = 0x12,
....................     MT25Q_CMD_4BYTE_QUAD_INPUT_FAST_PROGRAM = 0x34,
....................     MT25Q_CMD_4BYTE_QUAD_INPUT_EXT_FAST_PROGRAM = 0x3E,
.................... 
....................     //ERASE Operations
....................     MT25Q_CMD_ERASE_32KB_SUBSECTOR = 0x52,
....................     MT25Q_CMD_ERASE_4KB_SUBSECTOR = 0x20,
....................     MT25Q_CMD_ERASE_SECTOR = 0xD8,
....................     MT25Q_CMD_ERASE_BULK = 0xC7,
.................... 
....................     //ERASE Operations with 4-Byte Address
....................     MT25Q_CMD_4BYTE_ERASE_SECTOR = 0xDC,
....................     MT25Q_CMD_4BYTE_ERASE_4KB_SUBSECTOR = 0x21,
....................     
....................     //SUSPEND/RESUME Operations
....................     MT25Q_CMD_PROGRAM_ERASE_SUSPEND = 0x75,
....................     MT25Q_CMD_PROGRAM_ERASE_RESUME = 0x7A,
.................... 
....................     //ONE-WIRE PROGRAMMING Operations
....................     MT25Q_CMD_READ_OPT_ARRAY = 0x4B,
....................     MT25Q_CMD_PROGRAM_OPT_ARRYA = 0x42,
.................... 
....................     //4-BYTE ADDRESSING Operations
....................     MT25Q_CMD_ENTER_4BYTE_ADDR_MODE = 0xB7,
....................     MT25Q_CMD_EXIT_4BYTE_ADDR_MODE = 0xE9,
.................... 
....................     //QUAD PROTOCOL Operations
....................     MT25Q_CMD_ENTER_QUAD_IO_MODE = 0x35,
....................     MT25Q_CMD_RESET_QUAD_IO_MODE = 0xF5,
.................... 
....................     //DEEP POWER-DOWN Operations
....................     MT25Q_CMD_DEEP_POWER_DOWN = 0xB9,
....................     MT25Q_CMD_RELEASE_FROM_DEEP_POWER_DOWN = 0xAB,
.................... 
....................     //ADVANCED PROGRAM/ERASE CONTROLS
....................     MT25Q_CMD_READ_SECTOR_PROTECTION = 0x2D,
....................     MT25Q_CMD_PROGRAM_SECTOR_PROTECTION = 0x2C,
....................     MT25Q_CMD_READ_VOLATILE_LOCK_BITS = 0xE8,
....................     MT25Q_CMD_WRITE_VOLATILE_LOCK_BITS = 0xE5,
....................     MT25Q_CMD_READ_NONVOLATILE_LOCK_BITS = 0xE2,
....................     MT25Q_CMD_WRITE_NONVOLATILE_LOCK_BITS = 0xE3,
....................     MT25Q_CMD_READ_GLOBAL_FREEZE_BIT = 0xA7,
....................     MT25Q_CMD_WRITE_GLOBAL_FREEZE_BIT = 0xA6,
....................     MT25Q_CMD_READ_PASSWORD = 0x27,
....................     MT25Q_CMD_WRITE_PASSWORD = 0x28,
....................     MT25Q_CMD_UNLOCK_PASSWORD = 0x29,
.................... 
....................     //ADVANCED SECTOR PROTECTION Operations
....................     MT25Q_CMD_4BYTE_READ_VOLATILE_LOCK_BITS = 0xE0,
....................     MT25Q_CMD_4BYTE_WRITE_VOLATILE_LOCK_BITS = 0xE1,
.................... 
....................     //ADVANCED FUNCTIONS INTERFACE Operations
....................     MT25Q_CMD_INTERFACE_ACTIVATION = 0x98,
....................     MT25Q_CMD_CYCLIC_REDUNDANCY_CHECK = 0x9B
.................... } mt25q_cmd_t;
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 all;  // 全体アクセス
....................     struct {
....................         unsigned int8 ADDRESSING_4BYTE     : 1; // Bit0
....................         unsigned int8 PROTECTION_ERROR     : 1; // Bit1
....................         unsigned int8 PROGRAM_SUSPEND      : 1; // Bit2
....................         unsigned int8 RESERVED             : 1; // Bit3
....................         unsigned int8 PROGRAM_FAIL         : 1; // Bit4
....................         unsigned int8 ERASE_FAIL           : 1; // Bit5
....................         unsigned int8 ERASE_SUSPEND        : 1; // Bit6
....................         unsigned int8 PROGRAM_OR_ERASE_BUSY: 1; // Bit7
....................     } bit;
.................... } mt25q_sr1_t;
.................... 
.................... typedef enum {
....................     MT25QL64,
....................     MT25QL128,
....................     MT25QL256,
....................     MT25QL512,
....................     MT25QL01G
.................... } mt25q_model_t;
.................... 
.................... 
.................... typedef struct {
....................     mt25q_model_t model;
....................     unsigned int32 size_bytes;
....................     unsigned int32 page_size_bytes;
....................     unsigned int32 sector_size_bytes;
....................     unsigned int32 subsector_32k_size_bytes;
....................     unsigned int32 subsector_4k_size_bytes;
.................... } mt25q_info_t;
.................... 
.................... typedef enum {
....................     MT25Q_FUNC_READ,
....................     MT25Q_FUNC_WRITE,
....................     MT25Q_FUNC_ERASE
.................... } mt25q_func_t;
.................... 
.................... typedef struct {
....................     mt25q_func_t function;
....................     unsigned int32 address;
....................     unsigned int8 *data;
....................     unsigned int32 length;
.................... } mt25q_cmd_param_t;
.................... 
.................... #define MT25Q_CMD_MAX_SIZE 8
.................... typedef struct {
....................     unsigned int8 cmd[MT25Q_CMD_MAX_SIZE];
....................     unsigned int8 cmd_length;
.................... } mt25q_send_cmd_t;
.................... 
.................... // void mt25q_make_cmd(mt25q_info_t *flash_info, mt25q_cmd_param_t *cmd_param, mt25q_send_cmd_t *cmd)
.................... 
.................... 
.................... #endif // DEV
.................... #endif
.................... 
.................... 
.................... void sweep_with_print()
*
0CAA4:  MOVLW  03
0CAA6:  MOVLB  1
0CAA8:  MOVWF  xA1
0CAAA:  CLRF   xA0
0CAAC:  MOVLW  07
0CAAE:  MOVWF  xA3
0CAB0:  MOVLW  E0
0CAB2:  MOVWF  xA2
.................... {
....................     unsigned int16 curr_threshold = 0x300;
....................     unsigned int16 curr_limit = 0x7E0;
.................... 
....................     // Enable both CIGS ports
....................     connect_port1();
0CAB4:  MOVLB  0
0CAB6:  CALL   5248
....................     connect_port2();
0CABA:  CALL   5250
....................     mcp4901_1_write(0); 
0CABE:  MOVLB  9
0CAC0:  CLRF   xCE
0CAC2:  CLRF   xCD
0CAC4:  MOVLB  0
0CAC6:  CALL   2872
....................     mcp4901_2_write(0);
0CACA:  MOVLB  9
0CACC:  CLRF   xCE
0CACE:  CLRF   xCD
0CAD0:  MOVLB  0
0CAD2:  CALL   28B0
....................     delay_ms(100);
0CAD6:  MOVLW  64
0CAD8:  MOVLB  A
0CADA:  MOVWF  xF3
0CADC:  MOVLB  0
0CADE:  CALL   22AE
....................     
....................     // Init Port1
....................     sweep_debug_config_t port1 = {0};
0CAE2:  MOVLB  1
0CAE4:  CLRF   xA4
0CAE6:  CLRF   xA5
0CAE8:  CLRF   xA6
0CAEA:  CLRF   xA7
0CAEC:  CLRF   xA8
0CAEE:  CLRF   xA9
0CAF0:  CLRF   xAA
0CAF2:  CLRF   xAB
0CAF4:  CLRF   xAC
0CAF6:  CLRF   xAD
0CAF8:  CLRF   xAE
0CAFA:  CLRF   xAF
0CAFC:  CLRF   xB0
0CAFE:  CLRF   xB1
0CB00:  CLRF   xB2
0CB02:  CLRF   xB3
0CB04:  CLRF   xB4
0CB06:  CLRF   xB5
0CB08:  CLRF   xB6
0CB0A:  CLRF   xB7
0CB0C:  CLRF   xB8
0CB0E:  CLRF   xB9
0CB10:  CLRF   xBA
0CB12:  CLRF   xBB
0CB14:  CLRF   xBC
0CB16:  CLRF   xBD
0CB18:  CLRF   xBE
0CB1A:  CLRF   xBF
0CB1C:  CLRF   xC0
0CB1E:  CLRF   xC1
0CB20:  CLRF   xC2
0CB22:  CLRF   xC3
0CB24:  CLRF   xC4
0CB26:  CLRF   xC5
0CB28:  CLRF   xC6
0CB2A:  CLRF   xC7
0CB2C:  CLRF   xC8
0CB2E:  CLRF   xC9
0CB30:  CLRF   xCA
0CB32:  CLRF   xCB
0CB34:  CLRF   xCC
0CB36:  CLRF   xCD
0CB38:  CLRF   xCE
0CB3A:  CLRF   xCF
0CB3C:  CLRF   xD0
0CB3E:  CLRF   xD1
0CB40:  CLRF   xD2
0CB42:  CLRF   xD3
0CB44:  CLRF   xD4
0CB46:  CLRF   xD5
0CB48:  CLRF   xD6
0CB4A:  CLRF   xD7
0CB4C:  CLRF   xD8
0CB4E:  CLRF   xD9
0CB50:  CLRF   xDA
0CB52:  CLRF   xDB
0CB54:  CLRF   xDC
0CB56:  CLRF   xDD
0CB58:  CLRF   xDE
0CB5A:  CLRF   xDF
0CB5C:  CLRF   xE0
0CB5E:  CLRF   xE1
0CB60:  CLRF   xE2
0CB62:  CLRF   xE3
0CB64:  CLRF   xE4
0CB66:  CLRF   xE5
0CB68:  CLRF   xE6
0CB6A:  CLRF   xE7
0CB6C:  CLRF   xE8
0CB6E:  CLRF   xE9
0CB70:  CLRF   xEA
0CB72:  CLRF   xEB
0CB74:  CLRF   xEC
0CB76:  CLRF   xED
0CB78:  CLRF   xEE
0CB7A:  CLRF   xEF
0CB7C:  CLRF   xF0
0CB7E:  CLRF   xF1
0CB80:  CLRF   xF2
0CB82:  CLRF   xF3
0CB84:  CLRF   xF4
0CB86:  CLRF   xF5
0CB88:  CLRF   xF6
0CB8A:  CLRF   xF7
0CB8C:  CLRF   xF8
0CB8E:  CLRF   xF9
0CB90:  CLRF   xFA
0CB92:  CLRF   xFB
0CB94:  CLRF   xFC
0CB96:  CLRF   xFD
0CB98:  CLRF   xFE
0CB9A:  CLRF   xFF
0CB9C:  MOVLB  2
0CB9E:  CLRF   x00
0CBA0:  CLRF   x01
0CBA2:  CLRF   x02
0CBA4:  CLRF   x03
0CBA6:  CLRF   x04
0CBA8:  CLRF   x05
0CBAA:  CLRF   x06
0CBAC:  CLRF   x07
0CBAE:  CLRF   x08
0CBB0:  CLRF   x09
0CBB2:  CLRF   x0A
0CBB4:  CLRF   x0B
0CBB6:  CLRF   x0C
0CBB8:  CLRF   x0D
0CBBA:  CLRF   x0E
0CBBC:  CLRF   x0F
0CBBE:  CLRF   x10
0CBC0:  CLRF   x11
0CBC2:  CLRF   x12
0CBC4:  CLRF   x13
0CBC6:  CLRF   x14
0CBC8:  CLRF   x15
0CBCA:  CLRF   x16
0CBCC:  CLRF   x17
0CBCE:  CLRF   x18
0CBD0:  CLRF   x19
0CBD2:  CLRF   x1A
0CBD4:  CLRF   x1B
0CBD6:  CLRF   x1C
0CBD8:  CLRF   x1D
0CBDA:  CLRF   x1E
0CBDC:  CLRF   x1F
0CBDE:  CLRF   x20
0CBE0:  CLRF   x21
0CBE2:  CLRF   x22
0CBE4:  CLRF   x23
0CBE6:  CLRF   x24
0CBE8:  CLRF   x25
0CBEA:  CLRF   x26
0CBEC:  CLRF   x27
0CBEE:  CLRF   x28
0CBF0:  CLRF   x29
0CBF2:  CLRF   x2A
0CBF4:  CLRF   x2B
0CBF6:  CLRF   x2C
0CBF8:  CLRF   x2D
0CBFA:  CLRF   x2E
0CBFC:  CLRF   x2F
0CBFE:  CLRF   x30
0CC00:  CLRF   x31
0CC02:  CLRF   x32
0CC04:  CLRF   x33
0CC06:  CLRF   x34
0CC08:  CLRF   x35
0CC0A:  CLRF   x36
0CC0C:  CLRF   x37
0CC0E:  CLRF   x38
0CC10:  CLRF   x39
0CC12:  CLRF   x3A
0CC14:  CLRF   x3B
0CC16:  CLRF   x3C
0CC18:  CLRF   x3D
0CC1A:  CLRF   x3E
0CC1C:  CLRF   x3F
0CC1E:  CLRF   x40
0CC20:  CLRF   x41
0CC22:  CLRF   x42
0CC24:  CLRF   x43
0CC26:  CLRF   x44
0CC28:  CLRF   x45
0CC2A:  CLRF   x46
0CC2C:  CLRF   x47
0CC2E:  CLRF   x48
0CC30:  CLRF   x49
0CC32:  CLRF   x4A
0CC34:  CLRF   x4B
0CC36:  CLRF   x4C
0CC38:  CLRF   x4D
0CC3A:  CLRF   x4E
0CC3C:  CLRF   x4F
0CC3E:  CLRF   x50
0CC40:  CLRF   x51
0CC42:  CLRF   x52
0CC44:  CLRF   x53
0CC46:  CLRF   x54
0CC48:  CLRF   x55
0CC4A:  CLRF   x56
0CC4C:  CLRF   x57
0CC4E:  CLRF   x58
0CC50:  CLRF   x59
0CC52:  CLRF   x5A
0CC54:  CLRF   x5B
0CC56:  CLRF   x5C
0CC58:  CLRF   x5D
0CC5A:  CLRF   x5E
0CC5C:  CLRF   x5F
0CC5E:  CLRF   x60
0CC60:  CLRF   x61
0CC62:  CLRF   x62
0CC64:  CLRF   x63
0CC66:  CLRF   x64
0CC68:  CLRF   x65
0CC6A:  CLRF   x66
0CC6C:  CLRF   x67
0CC6E:  CLRF   x68
0CC70:  CLRF   x69
0CC72:  CLRF   x6A
0CC74:  CLRF   x6B
0CC76:  CLRF   x6C
0CC78:  CLRF   x6D
0CC7A:  CLRF   x6E
0CC7C:  CLRF   x6F
0CC7E:  CLRF   x70
0CC80:  CLRF   x71
0CC82:  CLRF   x72
0CC84:  CLRF   x73
0CC86:  CLRF   x74
0CC88:  CLRF   x75
0CC8A:  CLRF   x76
0CC8C:  CLRF   x77
0CC8E:  CLRF   x78
0CC90:  CLRF   x79
0CC92:  CLRF   x7A
0CC94:  CLRF   x7B
0CC96:  CLRF   x7C
0CC98:  CLRF   x7D
0CC9A:  CLRF   x7E
0CC9C:  CLRF   x7F
0CC9E:  CLRF   x80
0CCA0:  CLRF   x81
0CCA2:  CLRF   x82
0CCA4:  CLRF   x83
0CCA6:  CLRF   x84
0CCA8:  CLRF   x85
0CCAA:  CLRF   x86
0CCAC:  CLRF   x87
0CCAE:  CLRF   x88
0CCB0:  CLRF   x89
0CCB2:  CLRF   x8A
0CCB4:  CLRF   x8B
0CCB6:  CLRF   x8C
0CCB8:  CLRF   x8D
0CCBA:  CLRF   x8E
0CCBC:  CLRF   x8F
0CCBE:  CLRF   x90
0CCC0:  CLRF   x91
0CCC2:  CLRF   x92
0CCC4:  CLRF   x93
0CCC6:  CLRF   x94
0CCC8:  CLRF   x95
0CCCA:  CLRF   x96
0CCCC:  CLRF   x97
0CCCE:  CLRF   x98
0CCD0:  CLRF   x99
0CCD2:  CLRF   x9A
0CCD4:  CLRF   x9B
0CCD6:  CLRF   x9C
0CCD8:  CLRF   x9D
0CCDA:  CLRF   x9E
0CCDC:  CLRF   x9F
0CCDE:  CLRF   xA0
0CCE0:  CLRF   xA1
0CCE2:  CLRF   xA2
0CCE4:  CLRF   xA3
0CCE6:  CLRF   xA4
0CCE8:  CLRF   xA5
0CCEA:  CLRF   xA6
0CCEC:  CLRF   xA7
0CCEE:  CLRF   xA8
0CCF0:  CLRF   xA9
0CCF2:  CLRF   xAA
0CCF4:  CLRF   xAB
0CCF6:  CLRF   xAC
0CCF8:  CLRF   xAD
0CCFA:  CLRF   xAE
0CCFC:  CLRF   xAF
0CCFE:  CLRF   xB0
0CD00:  CLRF   xB1
0CD02:  CLRF   xB2
0CD04:  CLRF   xB3
0CD06:  CLRF   xB4
0CD08:  CLRF   xB5
0CD0A:  CLRF   xB6
0CD0C:  CLRF   xB7
0CD0E:  CLRF   xB8
0CD10:  CLRF   xB9
0CD12:  CLRF   xBA
0CD14:  CLRF   xBB
0CD16:  CLRF   xBC
0CD18:  CLRF   xBD
0CD1A:  CLRF   xBE
0CD1C:  CLRF   xBF
0CD1E:  CLRF   xC0
0CD20:  CLRF   xC1
0CD22:  CLRF   xC2
0CD24:  CLRF   xC3
0CD26:  CLRF   xC4
0CD28:  CLRF   xC5
0CD2A:  CLRF   xC6
0CD2C:  CLRF   xC7
0CD2E:  CLRF   xC8
0CD30:  CLRF   xC9
0CD32:  CLRF   xCA
0CD34:  CLRF   xCB
0CD36:  CLRF   xCC
0CD38:  CLRF   xCD
0CD3A:  CLRF   xCE
0CD3C:  CLRF   xCF
0CD3E:  CLRF   xD0
0CD40:  CLRF   xD1
0CD42:  CLRF   xD2
0CD44:  CLRF   xD3
0CD46:  CLRF   xD4
0CD48:  CLRF   xD5
0CD4A:  CLRF   xD6
0CD4C:  CLRF   xD7
0CD4E:  CLRF   xD8
0CD50:  CLRF   xD9
0CD52:  CLRF   xDA
0CD54:  CLRF   xDB
0CD56:  CLRF   xDC
0CD58:  CLRF   xDD
0CD5A:  CLRF   xDE
0CD5C:  CLRF   xDF
0CD5E:  CLRF   xE0
0CD60:  CLRF   xE1
0CD62:  CLRF   xE2
0CD64:  CLRF   xE3
0CD66:  CLRF   xE4
0CD68:  CLRF   xE5
0CD6A:  CLRF   xE6
0CD6C:  CLRF   xE7
0CD6E:  CLRF   xE8
0CD70:  CLRF   xE9
0CD72:  CLRF   xEA
0CD74:  CLRF   xEB
0CD76:  CLRF   xEC
0CD78:  CLRF   xED
0CD7A:  CLRF   xEE
0CD7C:  CLRF   xEF
0CD7E:  CLRF   xF0
0CD80:  CLRF   xF1
0CD82:  CLRF   xF2
0CD84:  CLRF   xF3
0CD86:  CLRF   xF4
0CD88:  CLRF   xF5
0CD8A:  CLRF   xF6
0CD8C:  CLRF   xF7
0CD8E:  CLRF   xF8
0CD90:  CLRF   xF9
0CD92:  CLRF   xFA
0CD94:  CLRF   xFB
0CD96:  CLRF   xFC
0CD98:  CLRF   xFD
0CD9A:  CLRF   xFE
0CD9C:  CLRF   xFF
0CD9E:  MOVLB  3
0CDA0:  CLRF   x00
0CDA2:  CLRF   x01
0CDA4:  CLRF   x02
0CDA6:  CLRF   x03
0CDA8:  CLRF   x04
0CDAA:  CLRF   x05
0CDAC:  CLRF   x06
0CDAE:  CLRF   x07
0CDB0:  CLRF   x08
0CDB2:  CLRF   x09
0CDB4:  CLRF   x0A
0CDB6:  CLRF   x0B
0CDB8:  CLRF   x0C
0CDBA:  CLRF   x0D
0CDBC:  CLRF   x0E
0CDBE:  CLRF   x0F
0CDC0:  CLRF   x10
0CDC2:  CLRF   x11
0CDC4:  CLRF   x12
0CDC6:  CLRF   x13
0CDC8:  CLRF   x14
0CDCA:  CLRF   x15
0CDCC:  CLRF   x16
0CDCE:  CLRF   x17
0CDD0:  CLRF   x18
0CDD2:  CLRF   x19
0CDD4:  CLRF   x1A
0CDD6:  CLRF   x1B
0CDD8:  CLRF   x1C
0CDDA:  CLRF   x1D
0CDDC:  CLRF   x1E
0CDDE:  CLRF   x1F
0CDE0:  CLRF   x20
0CDE2:  CLRF   x21
0CDE4:  CLRF   x22
0CDE6:  CLRF   x23
0CDE8:  CLRF   x24
0CDEA:  CLRF   x25
0CDEC:  CLRF   x26
0CDEE:  CLRF   x27
0CDF0:  CLRF   x28
0CDF2:  CLRF   x29
0CDF4:  CLRF   x2A
0CDF6:  CLRF   x2B
0CDF8:  CLRF   x2C
0CDFA:  CLRF   x2D
0CDFC:  CLRF   x2E
0CDFE:  CLRF   x2F
0CE00:  CLRF   x30
0CE02:  CLRF   x31
0CE04:  CLRF   x32
0CE06:  CLRF   x33
0CE08:  CLRF   x34
0CE0A:  CLRF   x35
0CE0C:  CLRF   x36
0CE0E:  CLRF   x37
0CE10:  CLRF   x38
0CE12:  CLRF   x39
0CE14:  CLRF   x3A
0CE16:  CLRF   x3B
0CE18:  CLRF   x3C
0CE1A:  CLRF   x3D
0CE1C:  CLRF   x3E
0CE1E:  CLRF   x3F
0CE20:  CLRF   x40
0CE22:  CLRF   x41
0CE24:  CLRF   x42
0CE26:  CLRF   x43
0CE28:  CLRF   x44
0CE2A:  CLRF   x45
0CE2C:  CLRF   x46
0CE2E:  CLRF   x47
0CE30:  CLRF   x48
0CE32:  CLRF   x49
0CE34:  CLRF   x4A
0CE36:  CLRF   x4B
0CE38:  CLRF   x4C
0CE3A:  CLRF   x4D
0CE3C:  CLRF   x4E
0CE3E:  CLRF   x4F
0CE40:  CLRF   x50
0CE42:  CLRF   x51
0CE44:  CLRF   x52
0CE46:  CLRF   x53
0CE48:  CLRF   x54
0CE4A:  CLRF   x55
0CE4C:  CLRF   x56
0CE4E:  CLRF   x57
0CE50:  CLRF   x58
0CE52:  CLRF   x59
0CE54:  CLRF   x5A
0CE56:  CLRF   x5B
0CE58:  CLRF   x5C
0CE5A:  CLRF   x5D
0CE5C:  CLRF   x5E
0CE5E:  CLRF   x5F
0CE60:  CLRF   x60
0CE62:  CLRF   x61
0CE64:  CLRF   x62
0CE66:  CLRF   x63
0CE68:  CLRF   x64
0CE6A:  CLRF   x65
0CE6C:  CLRF   x66
0CE6E:  CLRF   x67
0CE70:  CLRF   x68
0CE72:  CLRF   x69
0CE74:  CLRF   x6A
0CE76:  CLRF   x6B
0CE78:  CLRF   x6C
0CE7A:  CLRF   x6D
0CE7C:  CLRF   x6E
0CE7E:  CLRF   x6F
0CE80:  CLRF   x70
0CE82:  CLRF   x71
0CE84:  CLRF   x72
0CE86:  CLRF   x73
0CE88:  CLRF   x74
0CE8A:  CLRF   x75
0CE8C:  CLRF   x76
0CE8E:  CLRF   x77
0CE90:  CLRF   x78
0CE92:  CLRF   x79
0CE94:  CLRF   x7A
0CE96:  CLRF   x7B
0CE98:  CLRF   x7C
0CE9A:  CLRF   x7D
0CE9C:  CLRF   x7E
0CE9E:  CLRF   x7F
0CEA0:  CLRF   x80
0CEA2:  CLRF   x81
0CEA4:  CLRF   x82
0CEA6:  CLRF   x83
0CEA8:  CLRF   x84
0CEAA:  CLRF   x85
0CEAC:  CLRF   x86
0CEAE:  CLRF   x87
0CEB0:  CLRF   x88
0CEB2:  CLRF   x89
0CEB4:  CLRF   x8A
0CEB6:  CLRF   x8B
0CEB8:  CLRF   x8C
0CEBA:  CLRF   x8D
0CEBC:  CLRF   x8E
0CEBE:  CLRF   x8F
0CEC0:  CLRF   x90
0CEC2:  CLRF   x91
0CEC4:  CLRF   x92
0CEC6:  CLRF   x93
0CEC8:  CLRF   x94
0CECA:  CLRF   x95
0CECC:  CLRF   x96
0CECE:  CLRF   x97
0CED0:  CLRF   x98
0CED2:  CLRF   x99
0CED4:  CLRF   x9A
0CED6:  CLRF   x9B
0CED8:  CLRF   x9C
0CEDA:  CLRF   x9D
0CEDC:  CLRF   x9E
0CEDE:  CLRF   x9F
0CEE0:  CLRF   xA0
0CEE2:  CLRF   xA1
0CEE4:  CLRF   xA2
0CEE6:  CLRF   xA3
0CEE8:  CLRF   xA4
0CEEA:  CLRF   xA5
0CEEC:  CLRF   xA6
0CEEE:  CLRF   xA7
0CEF0:  CLRF   xA8
0CEF2:  CLRF   xA9
0CEF4:  CLRF   xAA
0CEF6:  CLRF   xAB
0CEF8:  CLRF   xAC
0CEFA:  CLRF   xAD
0CEFC:  CLRF   xAE
0CEFE:  CLRF   xAF
0CF00:  CLRF   xB0
0CF02:  CLRF   xB1
0CF04:  CLRF   xB2
0CF06:  CLRF   xB3
0CF08:  CLRF   xB4
0CF0A:  CLRF   xB5
0CF0C:  CLRF   xB6
0CF0E:  CLRF   xB7
0CF10:  CLRF   xB8
0CF12:  CLRF   xB9
0CF14:  CLRF   xBA
0CF16:  CLRF   xBB
0CF18:  CLRF   xBC
0CF1A:  CLRF   xBD
0CF1C:  CLRF   xBE
0CF1E:  CLRF   xBF
0CF20:  CLRF   xC0
0CF22:  CLRF   xC1
0CF24:  CLRF   xC2
0CF26:  CLRF   xC3
0CF28:  CLRF   xC4
0CF2A:  CLRF   xC5
0CF2C:  CLRF   xC6
0CF2E:  CLRF   xC7
0CF30:  CLRF   xC8
0CF32:  CLRF   xC9
0CF34:  CLRF   xCA
0CF36:  CLRF   xCB
0CF38:  CLRF   xCC
0CF3A:  CLRF   xCD
0CF3C:  CLRF   xCE
0CF3E:  CLRF   xCF
0CF40:  CLRF   xD0
0CF42:  CLRF   xD1
0CF44:  CLRF   xD2
0CF46:  CLRF   xD3
0CF48:  CLRF   xD4
0CF4A:  CLRF   xD5
0CF4C:  CLRF   xD6
0CF4E:  CLRF   xD7
0CF50:  CLRF   xD8
0CF52:  CLRF   xD9
0CF54:  CLRF   xDA
0CF56:  CLRF   xDB
0CF58:  CLRF   xDC
0CF5A:  CLRF   xDD
0CF5C:  CLRF   xDE
0CF5E:  CLRF   xDF
0CF60:  CLRF   xE0
0CF62:  CLRF   xE1
0CF64:  CLRF   xE2
0CF66:  CLRF   xE3
0CF68:  CLRF   xE4
0CF6A:  CLRF   xE5
0CF6C:  CLRF   xE6
0CF6E:  CLRF   xE7
0CF70:  CLRF   xE8
0CF72:  CLRF   xE9
0CF74:  CLRF   xEA
0CF76:  CLRF   xEB
0CF78:  CLRF   xEC
0CF7A:  CLRF   xED
0CF7C:  CLRF   xEE
0CF7E:  CLRF   xEF
0CF80:  CLRF   xF0
0CF82:  CLRF   xF1
0CF84:  CLRF   xF2
0CF86:  CLRF   xF3
0CF88:  CLRF   xF4
0CF8A:  CLRF   xF5
0CF8C:  CLRF   xF6
0CF8E:  CLRF   xF7
0CF90:  CLRF   xF8
0CF92:  CLRF   xF9
0CF94:  CLRF   xFA
0CF96:  CLRF   xFB
0CF98:  CLRF   xFC
0CF9A:  CLRF   xFD
0CF9C:  CLRF   xFE
0CF9E:  CLRF   xFF
0CFA0:  MOVLB  4
0CFA2:  CLRF   x00
0CFA4:  CLRF   x01
0CFA6:  CLRF   x02
0CFA8:  CLRF   x03
0CFAA:  CLRF   x04
0CFAC:  CLRF   x05
0CFAE:  CLRF   x06
0CFB0:  CLRF   x07
0CFB2:  CLRF   x08
0CFB4:  CLRF   x09
0CFB6:  CLRF   x0A
0CFB8:  CLRF   x0B
0CFBA:  CLRF   x0C
0CFBC:  CLRF   x0D
0CFBE:  CLRF   x0E
0CFC0:  CLRF   x0F
0CFC2:  CLRF   x10
0CFC4:  CLRF   x11
0CFC6:  CLRF   x12
0CFC8:  CLRF   x13
0CFCA:  CLRF   x14
0CFCC:  CLRF   x15
0CFCE:  CLRF   x16
0CFD0:  CLRF   x17
0CFD2:  CLRF   x18
0CFD4:  CLRF   x19
0CFD6:  CLRF   x1A
0CFD8:  CLRF   x1B
0CFDA:  CLRF   x1C
0CFDC:  CLRF   x1D
0CFDE:  CLRF   x1E
0CFE0:  CLRF   x1F
0CFE2:  CLRF   x20
0CFE4:  CLRF   x21
0CFE6:  CLRF   x22
0CFE8:  CLRF   x23
0CFEA:  CLRF   x24
0CFEC:  CLRF   x25
0CFEE:  CLRF   x26
0CFF0:  CLRF   x27
0CFF2:  CLRF   x28
0CFF4:  CLRF   x29
0CFF6:  CLRF   x2A
0CFF8:  CLRF   x2B
0CFFA:  CLRF   x2C
0CFFC:  CLRF   x2D
0CFFE:  CLRF   x2E
0D000:  CLRF   x2F
0D002:  CLRF   x30
0D004:  CLRF   x31
0D006:  CLRF   x32
0D008:  CLRF   x33
0D00A:  CLRF   x34
0D00C:  CLRF   x35
0D00E:  CLRF   x36
0D010:  CLRF   x37
0D012:  CLRF   x38
0D014:  CLRF   x39
0D016:  CLRF   x3A
0D018:  CLRF   x3B
0D01A:  CLRF   x3C
0D01C:  CLRF   x3D
0D01E:  CLRF   x3E
0D020:  CLRF   x3F
0D022:  CLRF   x40
0D024:  CLRF   x41
0D026:  CLRF   x42
0D028:  CLRF   x43
0D02A:  CLRF   x44
0D02C:  CLRF   x45
0D02E:  CLRF   x46
0D030:  CLRF   x47
0D032:  CLRF   x48
0D034:  CLRF   x49
0D036:  CLRF   x4A
0D038:  CLRF   x4B
0D03A:  CLRF   x4C
0D03C:  CLRF   x4D
0D03E:  CLRF   x4E
0D040:  CLRF   x4F
0D042:  CLRF   x50
0D044:  CLRF   x51
0D046:  CLRF   x52
0D048:  CLRF   x53
0D04A:  CLRF   x54
0D04C:  CLRF   x55
0D04E:  CLRF   x56
0D050:  CLRF   x57
0D052:  CLRF   x58
0D054:  CLRF   x59
0D056:  CLRF   x5A
0D058:  CLRF   x5B
0D05A:  CLRF   x5C
0D05C:  CLRF   x5D
0D05E:  CLRF   x5E
0D060:  CLRF   x5F
0D062:  CLRF   x60
0D064:  CLRF   x61
0D066:  CLRF   x62
0D068:  CLRF   x63
0D06A:  CLRF   x64
0D06C:  CLRF   x65
0D06E:  CLRF   x66
0D070:  CLRF   x67
0D072:  CLRF   x68
0D074:  CLRF   x69
0D076:  CLRF   x6A
0D078:  CLRF   x6B
0D07A:  CLRF   x6C
0D07C:  CLRF   x6D
0D07E:  CLRF   x6E
0D080:  CLRF   x6F
0D082:  CLRF   x70
0D084:  CLRF   x71
0D086:  CLRF   x72
0D088:  CLRF   x73
0D08A:  CLRF   x74
0D08C:  CLRF   x75
0D08E:  CLRF   x76
0D090:  CLRF   x77
0D092:  CLRF   x78
0D094:  CLRF   x79
0D096:  CLRF   x7A
0D098:  CLRF   x7B
0D09A:  CLRF   x7C
0D09C:  CLRF   x7D
0D09E:  CLRF   x7E
0D0A0:  CLRF   x7F
0D0A2:  CLRF   x80
0D0A4:  CLRF   x81
0D0A6:  CLRF   x82
0D0A8:  CLRF   x83
0D0AA:  CLRF   x84
0D0AC:  CLRF   x85
0D0AE:  CLRF   x86
0D0B0:  CLRF   x87
0D0B2:  CLRF   x88
0D0B4:  CLRF   x89
0D0B6:  CLRF   x8A
0D0B8:  CLRF   x8B
0D0BA:  CLRF   x8C
0D0BC:  CLRF   x8D
0D0BE:  CLRF   x8E
0D0C0:  CLRF   x8F
0D0C2:  CLRF   x90
0D0C4:  CLRF   x91
0D0C6:  CLRF   x92
0D0C8:  CLRF   x93
0D0CA:  CLRF   x94
0D0CC:  CLRF   x95
0D0CE:  CLRF   x96
0D0D0:  CLRF   x97
0D0D2:  CLRF   x98
0D0D4:  CLRF   x99
0D0D6:  CLRF   x9A
0D0D8:  CLRF   x9B
0D0DA:  CLRF   x9C
0D0DC:  CLRF   x9D
0D0DE:  CLRF   x9E
0D0E0:  CLRF   x9F
0D0E2:  CLRF   xA0
0D0E4:  CLRF   xA1
0D0E6:  CLRF   xA2
0D0E8:  CLRF   xA3
0D0EA:  CLRF   xA4
0D0EC:  CLRF   xA5
0D0EE:  CLRF   xA6
0D0F0:  CLRF   xA7
0D0F2:  CLRF   xA8
0D0F4:  CLRF   xA9
0D0F6:  CLRF   xAA
0D0F8:  CLRF   xAB
0D0FA:  CLRF   xAC
0D0FC:  CLRF   xAD
0D0FE:  CLRF   xAE
0D100:  CLRF   xAF
0D102:  CLRF   xB0
0D104:  CLRF   xB1
0D106:  CLRF   xB2
0D108:  CLRF   xB3
0D10A:  CLRF   xB4
0D10C:  CLRF   xB5
0D10E:  CLRF   xB6
0D110:  CLRF   xB7
0D112:  CLRF   xB8
0D114:  CLRF   xB9
0D116:  CLRF   xBA
0D118:  CLRF   xBB
0D11A:  CLRF   xBC
0D11C:  CLRF   xBD
0D11E:  CLRF   xBE
0D120:  CLRF   xBF
0D122:  CLRF   xC0
0D124:  CLRF   xC1
0D126:  CLRF   xC2
0D128:  CLRF   xC3
0D12A:  CLRF   xC4
0D12C:  CLRF   xC5
0D12E:  CLRF   xC6
0D130:  CLRF   xC7
0D132:  CLRF   xC8
0D134:  CLRF   xC9
0D136:  CLRF   xCA
0D138:  CLRF   xCB
0D13A:  CLRF   xCC
0D13C:  CLRF   xCD
0D13E:  CLRF   xCE
0D140:  CLRF   xCF
0D142:  CLRF   xD0
0D144:  CLRF   xD1
0D146:  CLRF   xD2
0D148:  CLRF   xD3
0D14A:  CLRF   xD4
0D14C:  CLRF   xD5
0D14E:  CLRF   xD6
0D150:  CLRF   xD7
0D152:  CLRF   xD8
0D154:  CLRF   xD9
0D156:  CLRF   xDA
0D158:  CLRF   xDB
0D15A:  CLRF   xDC
0D15C:  CLRF   xDD
0D15E:  CLRF   xDE
0D160:  CLRF   xDF
0D162:  CLRF   xE0
0D164:  CLRF   xE1
0D166:  CLRF   xE2
0D168:  CLRF   xE3
0D16A:  CLRF   xE4
0D16C:  CLRF   xE5
0D16E:  CLRF   xE6
0D170:  CLRF   xE7
0D172:  CLRF   xE8
0D174:  CLRF   xE9
0D176:  CLRF   xEA
0D178:  CLRF   xEB
0D17A:  CLRF   xEC
0D17C:  CLRF   xED
0D17E:  CLRF   xEE
0D180:  CLRF   xEF
0D182:  CLRF   xF0
0D184:  CLRF   xF1
0D186:  CLRF   xF2
0D188:  CLRF   xF3
0D18A:  CLRF   xF4
0D18C:  CLRF   xF5
0D18E:  CLRF   xF6
0D190:  CLRF   xF7
0D192:  CLRF   xF8
0D194:  CLRF   xF9
0D196:  CLRF   xFA
0D198:  CLRF   xFB
0D19A:  CLRF   xFC
0D19C:  CLRF   xFD
0D19E:  CLRF   xFE
0D1A0:  CLRF   xFF
0D1A2:  MOVLB  5
0D1A4:  CLRF   x00
0D1A6:  CLRF   x01
0D1A8:  CLRF   x02
0D1AA:  CLRF   x03
0D1AC:  CLRF   x04
0D1AE:  CLRF   x05
0D1B0:  CLRF   x06
0D1B2:  CLRF   x07
0D1B4:  CLRF   x08
0D1B6:  CLRF   x09
0D1B8:  CLRF   x0A
0D1BA:  CLRF   x0B
0D1BC:  CLRF   x0C
0D1BE:  CLRF   x0D
0D1C0:  CLRF   x0E
0D1C2:  CLRF   x0F
0D1C4:  CLRF   x10
0D1C6:  CLRF   x11
0D1C8:  CLRF   x12
0D1CA:  CLRF   x13
0D1CC:  CLRF   x14
0D1CE:  CLRF   x15
0D1D0:  CLRF   x16
0D1D2:  CLRF   x17
0D1D4:  CLRF   x18
0D1D6:  CLRF   x19
0D1D8:  CLRF   x1A
0D1DA:  CLRF   x1B
0D1DC:  CLRF   x1C
0D1DE:  CLRF   x1D
0D1E0:  CLRF   x1E
0D1E2:  CLRF   x1F
0D1E4:  CLRF   x20
0D1E6:  CLRF   x21
0D1E8:  CLRF   x22
0D1EA:  CLRF   x23
0D1EC:  CLRF   x24
0D1EE:  CLRF   x25
0D1F0:  CLRF   x26
0D1F2:  CLRF   x27
0D1F4:  CLRF   x28
0D1F6:  CLRF   x29
0D1F8:  CLRF   x2A
0D1FA:  CLRF   x2B
0D1FC:  CLRF   x2C
0D1FE:  CLRF   x2D
0D200:  CLRF   x2E
0D202:  CLRF   x2F
0D204:  CLRF   x30
0D206:  CLRF   x31
0D208:  CLRF   x32
0D20A:  CLRF   x33
0D20C:  CLRF   x34
0D20E:  CLRF   x35
0D210:  CLRF   x36
0D212:  CLRF   x37
0D214:  CLRF   x38
0D216:  CLRF   x39
0D218:  CLRF   x3A
0D21A:  CLRF   x3B
0D21C:  CLRF   x3C
0D21E:  CLRF   x3D
0D220:  CLRF   x3E
0D222:  CLRF   x3F
0D224:  CLRF   x40
0D226:  CLRF   x41
0D228:  CLRF   x42
0D22A:  CLRF   x43
0D22C:  CLRF   x44
0D22E:  CLRF   x45
0D230:  CLRF   x46
0D232:  CLRF   x47
0D234:  CLRF   x48
0D236:  CLRF   x49
0D238:  CLRF   x4A
0D23A:  CLRF   x4B
0D23C:  CLRF   x4C
0D23E:  CLRF   x4D
0D240:  CLRF   x4E
0D242:  CLRF   x4F
0D244:  CLRF   x50
0D246:  CLRF   x51
0D248:  CLRF   x52
0D24A:  CLRF   x53
0D24C:  CLRF   x54
0D24E:  CLRF   x55
0D250:  CLRF   x56
0D252:  CLRF   x57
0D254:  CLRF   x58
0D256:  CLRF   x59
0D258:  CLRF   x5A
0D25A:  CLRF   x5B
0D25C:  CLRF   x5C
0D25E:  CLRF   x5D
0D260:  CLRF   x5E
0D262:  CLRF   x5F
0D264:  CLRF   x60
0D266:  CLRF   x61
0D268:  CLRF   x62
0D26A:  CLRF   x63
0D26C:  CLRF   x64
0D26E:  CLRF   x65
0D270:  CLRF   x66
0D272:  CLRF   x67
0D274:  CLRF   x68
0D276:  CLRF   x69
0D278:  CLRF   x6A
0D27A:  CLRF   x6B
0D27C:  CLRF   x6C
0D27E:  CLRF   x6D
0D280:  CLRF   x6E
0D282:  CLRF   x6F
0D284:  CLRF   x70
0D286:  CLRF   x71
0D288:  CLRF   x72
0D28A:  CLRF   x73
0D28C:  CLRF   x74
0D28E:  CLRF   x75
0D290:  CLRF   x76
0D292:  CLRF   x77
0D294:  CLRF   x78
0D296:  CLRF   x79
0D298:  CLRF   x7A
0D29A:  CLRF   x7B
0D29C:  CLRF   x7C
0D29E:  CLRF   x7D
0D2A0:  CLRF   x7E
0D2A2:  CLRF   x7F
0D2A4:  CLRF   x80
0D2A6:  CLRF   x81
0D2A8:  CLRF   x82
0D2AA:  CLRF   x83
0D2AC:  CLRF   x84
0D2AE:  CLRF   x85
0D2B0:  CLRF   x86
0D2B2:  CLRF   x87
0D2B4:  CLRF   x88
0D2B6:  CLRF   x89
0D2B8:  CLRF   x8A
0D2BA:  CLRF   x8B
0D2BC:  CLRF   x8C
0D2BE:  CLRF   x8D
0D2C0:  CLRF   x8E
0D2C2:  CLRF   x8F
0D2C4:  CLRF   x90
0D2C6:  CLRF   x91
0D2C8:  CLRF   x92
0D2CA:  CLRF   x93
0D2CC:  CLRF   x94
0D2CE:  CLRF   x95
0D2D0:  CLRF   x96
0D2D2:  CLRF   x97
0D2D4:  CLRF   x98
0D2D6:  CLRF   x99
0D2D8:  CLRF   x9A
0D2DA:  CLRF   x9B
0D2DC:  CLRF   x9C
0D2DE:  CLRF   x9D
0D2E0:  CLRF   x9E
0D2E2:  CLRF   x9F
0D2E4:  CLRF   xA0
0D2E6:  CLRF   xA1
0D2E8:  CLRF   xA2
0D2EA:  CLRF   xA3
....................     port1.port_num = 1;
0D2EC:  MOVLW  01
0D2EE:  MOVLB  1
0D2F0:  MOVWF  xA4
....................     port1.sweep_step = 0;
0D2F2:  CLRF   xA6
0D2F4:  CLRF   xA5
....................     port1.active = 1;
0D2F6:  MOVLB  5
0D2F8:  BSF    xA3.0
.................... 
....................     // Init Port2
....................     sweep_debug_config_t port2 = {0};
0D2FA:  CLRF   xA4
0D2FC:  CLRF   xA5
0D2FE:  CLRF   xA6
0D300:  CLRF   xA7
0D302:  CLRF   xA8
0D304:  CLRF   xA9
0D306:  CLRF   xAA
0D308:  CLRF   xAB
0D30A:  CLRF   xAC
0D30C:  CLRF   xAD
0D30E:  CLRF   xAE
0D310:  CLRF   xAF
0D312:  CLRF   xB0
0D314:  CLRF   xB1
0D316:  CLRF   xB2
0D318:  CLRF   xB3
0D31A:  CLRF   xB4
0D31C:  CLRF   xB5
0D31E:  CLRF   xB6
0D320:  CLRF   xB7
0D322:  CLRF   xB8
0D324:  CLRF   xB9
0D326:  CLRF   xBA
0D328:  CLRF   xBB
0D32A:  CLRF   xBC
0D32C:  CLRF   xBD
0D32E:  CLRF   xBE
0D330:  CLRF   xBF
0D332:  CLRF   xC0
0D334:  CLRF   xC1
0D336:  CLRF   xC2
0D338:  CLRF   xC3
0D33A:  CLRF   xC4
0D33C:  CLRF   xC5
0D33E:  CLRF   xC6
0D340:  CLRF   xC7
0D342:  CLRF   xC8
0D344:  CLRF   xC9
0D346:  CLRF   xCA
0D348:  CLRF   xCB
0D34A:  CLRF   xCC
0D34C:  CLRF   xCD
0D34E:  CLRF   xCE
0D350:  CLRF   xCF
0D352:  CLRF   xD0
0D354:  CLRF   xD1
0D356:  CLRF   xD2
0D358:  CLRF   xD3
0D35A:  CLRF   xD4
0D35C:  CLRF   xD5
0D35E:  CLRF   xD6
0D360:  CLRF   xD7
0D362:  CLRF   xD8
0D364:  CLRF   xD9
0D366:  CLRF   xDA
0D368:  CLRF   xDB
0D36A:  CLRF   xDC
0D36C:  CLRF   xDD
0D36E:  CLRF   xDE
0D370:  CLRF   xDF
0D372:  CLRF   xE0
0D374:  CLRF   xE1
0D376:  CLRF   xE2
0D378:  CLRF   xE3
0D37A:  CLRF   xE4
0D37C:  CLRF   xE5
0D37E:  CLRF   xE6
0D380:  CLRF   xE7
0D382:  CLRF   xE8
0D384:  CLRF   xE9
0D386:  CLRF   xEA
0D388:  CLRF   xEB
0D38A:  CLRF   xEC
0D38C:  CLRF   xED
0D38E:  CLRF   xEE
0D390:  CLRF   xEF
0D392:  CLRF   xF0
0D394:  CLRF   xF1
0D396:  CLRF   xF2
0D398:  CLRF   xF3
0D39A:  CLRF   xF4
0D39C:  CLRF   xF5
0D39E:  CLRF   xF6
0D3A0:  CLRF   xF7
0D3A2:  CLRF   xF8
0D3A4:  CLRF   xF9
0D3A6:  CLRF   xFA
0D3A8:  CLRF   xFB
0D3AA:  CLRF   xFC
0D3AC:  CLRF   xFD
0D3AE:  CLRF   xFE
0D3B0:  CLRF   xFF
0D3B2:  MOVLB  6
0D3B4:  CLRF   x00
0D3B6:  CLRF   x01
0D3B8:  CLRF   x02
0D3BA:  CLRF   x03
0D3BC:  CLRF   x04
0D3BE:  CLRF   x05
0D3C0:  CLRF   x06
0D3C2:  CLRF   x07
0D3C4:  CLRF   x08
0D3C6:  CLRF   x09
0D3C8:  CLRF   x0A
0D3CA:  CLRF   x0B
0D3CC:  CLRF   x0C
0D3CE:  CLRF   x0D
0D3D0:  CLRF   x0E
0D3D2:  CLRF   x0F
0D3D4:  CLRF   x10
0D3D6:  CLRF   x11
0D3D8:  CLRF   x12
0D3DA:  CLRF   x13
0D3DC:  CLRF   x14
0D3DE:  CLRF   x15
0D3E0:  CLRF   x16
0D3E2:  CLRF   x17
0D3E4:  CLRF   x18
0D3E6:  CLRF   x19
0D3E8:  CLRF   x1A
0D3EA:  CLRF   x1B
0D3EC:  CLRF   x1C
0D3EE:  CLRF   x1D
0D3F0:  CLRF   x1E
0D3F2:  CLRF   x1F
0D3F4:  CLRF   x20
0D3F6:  CLRF   x21
0D3F8:  CLRF   x22
0D3FA:  CLRF   x23
0D3FC:  CLRF   x24
0D3FE:  CLRF   x25
0D400:  CLRF   x26
0D402:  CLRF   x27
0D404:  CLRF   x28
0D406:  CLRF   x29
0D408:  CLRF   x2A
0D40A:  CLRF   x2B
0D40C:  CLRF   x2C
0D40E:  CLRF   x2D
0D410:  CLRF   x2E
0D412:  CLRF   x2F
0D414:  CLRF   x30
0D416:  CLRF   x31
0D418:  CLRF   x32
0D41A:  CLRF   x33
0D41C:  CLRF   x34
0D41E:  CLRF   x35
0D420:  CLRF   x36
0D422:  CLRF   x37
0D424:  CLRF   x38
0D426:  CLRF   x39
0D428:  CLRF   x3A
0D42A:  CLRF   x3B
0D42C:  CLRF   x3C
0D42E:  CLRF   x3D
0D430:  CLRF   x3E
0D432:  CLRF   x3F
0D434:  CLRF   x40
0D436:  CLRF   x41
0D438:  CLRF   x42
0D43A:  CLRF   x43
0D43C:  CLRF   x44
0D43E:  CLRF   x45
0D440:  CLRF   x46
0D442:  CLRF   x47
0D444:  CLRF   x48
0D446:  CLRF   x49
0D448:  CLRF   x4A
0D44A:  CLRF   x4B
0D44C:  CLRF   x4C
0D44E:  CLRF   x4D
0D450:  CLRF   x4E
0D452:  CLRF   x4F
0D454:  CLRF   x50
0D456:  CLRF   x51
0D458:  CLRF   x52
0D45A:  CLRF   x53
0D45C:  CLRF   x54
0D45E:  CLRF   x55
0D460:  CLRF   x56
0D462:  CLRF   x57
0D464:  CLRF   x58
0D466:  CLRF   x59
0D468:  CLRF   x5A
0D46A:  CLRF   x5B
0D46C:  CLRF   x5C
0D46E:  CLRF   x5D
0D470:  CLRF   x5E
0D472:  CLRF   x5F
0D474:  CLRF   x60
0D476:  CLRF   x61
0D478:  CLRF   x62
0D47A:  CLRF   x63
0D47C:  CLRF   x64
0D47E:  CLRF   x65
0D480:  CLRF   x66
0D482:  CLRF   x67
0D484:  CLRF   x68
0D486:  CLRF   x69
0D488:  CLRF   x6A
0D48A:  CLRF   x6B
0D48C:  CLRF   x6C
0D48E:  CLRF   x6D
0D490:  CLRF   x6E
0D492:  CLRF   x6F
0D494:  CLRF   x70
0D496:  CLRF   x71
0D498:  CLRF   x72
0D49A:  CLRF   x73
0D49C:  CLRF   x74
0D49E:  CLRF   x75
0D4A0:  CLRF   x76
0D4A2:  CLRF   x77
0D4A4:  CLRF   x78
0D4A6:  CLRF   x79
0D4A8:  CLRF   x7A
0D4AA:  CLRF   x7B
0D4AC:  CLRF   x7C
0D4AE:  CLRF   x7D
0D4B0:  CLRF   x7E
0D4B2:  CLRF   x7F
0D4B4:  CLRF   x80
0D4B6:  CLRF   x81
0D4B8:  CLRF   x82
0D4BA:  CLRF   x83
0D4BC:  CLRF   x84
0D4BE:  CLRF   x85
0D4C0:  CLRF   x86
0D4C2:  CLRF   x87
0D4C4:  CLRF   x88
0D4C6:  CLRF   x89
0D4C8:  CLRF   x8A
0D4CA:  CLRF   x8B
0D4CC:  CLRF   x8C
0D4CE:  CLRF   x8D
0D4D0:  CLRF   x8E
0D4D2:  CLRF   x8F
0D4D4:  CLRF   x90
0D4D6:  CLRF   x91
0D4D8:  CLRF   x92
0D4DA:  CLRF   x93
0D4DC:  CLRF   x94
0D4DE:  CLRF   x95
0D4E0:  CLRF   x96
0D4E2:  CLRF   x97
0D4E4:  CLRF   x98
0D4E6:  CLRF   x99
0D4E8:  CLRF   x9A
0D4EA:  CLRF   x9B
0D4EC:  CLRF   x9C
0D4EE:  CLRF   x9D
0D4F0:  CLRF   x9E
0D4F2:  CLRF   x9F
0D4F4:  CLRF   xA0
0D4F6:  CLRF   xA1
0D4F8:  CLRF   xA2
0D4FA:  CLRF   xA3
0D4FC:  CLRF   xA4
0D4FE:  CLRF   xA5
0D500:  CLRF   xA6
0D502:  CLRF   xA7
0D504:  CLRF   xA8
0D506:  CLRF   xA9
0D508:  CLRF   xAA
0D50A:  CLRF   xAB
0D50C:  CLRF   xAC
0D50E:  CLRF   xAD
0D510:  CLRF   xAE
0D512:  CLRF   xAF
0D514:  CLRF   xB0
0D516:  CLRF   xB1
0D518:  CLRF   xB2
0D51A:  CLRF   xB3
0D51C:  CLRF   xB4
0D51E:  CLRF   xB5
0D520:  CLRF   xB6
0D522:  CLRF   xB7
0D524:  CLRF   xB8
0D526:  CLRF   xB9
0D528:  CLRF   xBA
0D52A:  CLRF   xBB
0D52C:  CLRF   xBC
0D52E:  CLRF   xBD
0D530:  CLRF   xBE
0D532:  CLRF   xBF
0D534:  CLRF   xC0
0D536:  CLRF   xC1
0D538:  CLRF   xC2
0D53A:  CLRF   xC3
0D53C:  CLRF   xC4
0D53E:  CLRF   xC5
0D540:  CLRF   xC6
0D542:  CLRF   xC7
0D544:  CLRF   xC8
0D546:  CLRF   xC9
0D548:  CLRF   xCA
0D54A:  CLRF   xCB
0D54C:  CLRF   xCC
0D54E:  CLRF   xCD
0D550:  CLRF   xCE
0D552:  CLRF   xCF
0D554:  CLRF   xD0
0D556:  CLRF   xD1
0D558:  CLRF   xD2
0D55A:  CLRF   xD3
0D55C:  CLRF   xD4
0D55E:  CLRF   xD5
0D560:  CLRF   xD6
0D562:  CLRF   xD7
0D564:  CLRF   xD8
0D566:  CLRF   xD9
0D568:  CLRF   xDA
0D56A:  CLRF   xDB
0D56C:  CLRF   xDC
0D56E:  CLRF   xDD
0D570:  CLRF   xDE
0D572:  CLRF   xDF
0D574:  CLRF   xE0
0D576:  CLRF   xE1
0D578:  CLRF   xE2
0D57A:  CLRF   xE3
0D57C:  CLRF   xE4
0D57E:  CLRF   xE5
0D580:  CLRF   xE6
0D582:  CLRF   xE7
0D584:  CLRF   xE8
0D586:  CLRF   xE9
0D588:  CLRF   xEA
0D58A:  CLRF   xEB
0D58C:  CLRF   xEC
0D58E:  CLRF   xED
0D590:  CLRF   xEE
0D592:  CLRF   xEF
0D594:  CLRF   xF0
0D596:  CLRF   xF1
0D598:  CLRF   xF2
0D59A:  CLRF   xF3
0D59C:  CLRF   xF4
0D59E:  CLRF   xF5
0D5A0:  CLRF   xF6
0D5A2:  CLRF   xF7
0D5A4:  CLRF   xF8
0D5A6:  CLRF   xF9
0D5A8:  CLRF   xFA
0D5AA:  CLRF   xFB
0D5AC:  CLRF   xFC
0D5AE:  CLRF   xFD
0D5B0:  CLRF   xFE
0D5B2:  CLRF   xFF
0D5B4:  MOVLB  7
0D5B6:  CLRF   x00
0D5B8:  CLRF   x01
0D5BA:  CLRF   x02
0D5BC:  CLRF   x03
0D5BE:  CLRF   x04
0D5C0:  CLRF   x05
0D5C2:  CLRF   x06
0D5C4:  CLRF   x07
0D5C6:  CLRF   x08
0D5C8:  CLRF   x09
0D5CA:  CLRF   x0A
0D5CC:  CLRF   x0B
0D5CE:  CLRF   x0C
0D5D0:  CLRF   x0D
0D5D2:  CLRF   x0E
0D5D4:  CLRF   x0F
0D5D6:  CLRF   x10
0D5D8:  CLRF   x11
0D5DA:  CLRF   x12
0D5DC:  CLRF   x13
0D5DE:  CLRF   x14
0D5E0:  CLRF   x15
0D5E2:  CLRF   x16
0D5E4:  CLRF   x17
0D5E6:  CLRF   x18
0D5E8:  CLRF   x19
0D5EA:  CLRF   x1A
0D5EC:  CLRF   x1B
0D5EE:  CLRF   x1C
0D5F0:  CLRF   x1D
0D5F2:  CLRF   x1E
0D5F4:  CLRF   x1F
0D5F6:  CLRF   x20
0D5F8:  CLRF   x21
0D5FA:  CLRF   x22
0D5FC:  CLRF   x23
0D5FE:  CLRF   x24
0D600:  CLRF   x25
0D602:  CLRF   x26
0D604:  CLRF   x27
0D606:  CLRF   x28
0D608:  CLRF   x29
0D60A:  CLRF   x2A
0D60C:  CLRF   x2B
0D60E:  CLRF   x2C
0D610:  CLRF   x2D
0D612:  CLRF   x2E
0D614:  CLRF   x2F
0D616:  CLRF   x30
0D618:  CLRF   x31
0D61A:  CLRF   x32
0D61C:  CLRF   x33
0D61E:  CLRF   x34
0D620:  CLRF   x35
0D622:  CLRF   x36
0D624:  CLRF   x37
0D626:  CLRF   x38
0D628:  CLRF   x39
0D62A:  CLRF   x3A
0D62C:  CLRF   x3B
0D62E:  CLRF   x3C
0D630:  CLRF   x3D
0D632:  CLRF   x3E
0D634:  CLRF   x3F
0D636:  CLRF   x40
0D638:  CLRF   x41
0D63A:  CLRF   x42
0D63C:  CLRF   x43
0D63E:  CLRF   x44
0D640:  CLRF   x45
0D642:  CLRF   x46
0D644:  CLRF   x47
0D646:  CLRF   x48
0D648:  CLRF   x49
0D64A:  CLRF   x4A
0D64C:  CLRF   x4B
0D64E:  CLRF   x4C
0D650:  CLRF   x4D
0D652:  CLRF   x4E
0D654:  CLRF   x4F
0D656:  CLRF   x50
0D658:  CLRF   x51
0D65A:  CLRF   x52
0D65C:  CLRF   x53
0D65E:  CLRF   x54
0D660:  CLRF   x55
0D662:  CLRF   x56
0D664:  CLRF   x57
0D666:  CLRF   x58
0D668:  CLRF   x59
0D66A:  CLRF   x5A
0D66C:  CLRF   x5B
0D66E:  CLRF   x5C
0D670:  CLRF   x5D
0D672:  CLRF   x5E
0D674:  CLRF   x5F
0D676:  CLRF   x60
0D678:  CLRF   x61
0D67A:  CLRF   x62
0D67C:  CLRF   x63
0D67E:  CLRF   x64
0D680:  CLRF   x65
0D682:  CLRF   x66
0D684:  CLRF   x67
0D686:  CLRF   x68
0D688:  CLRF   x69
0D68A:  CLRF   x6A
0D68C:  CLRF   x6B
0D68E:  CLRF   x6C
0D690:  CLRF   x6D
0D692:  CLRF   x6E
0D694:  CLRF   x6F
0D696:  CLRF   x70
0D698:  CLRF   x71
0D69A:  CLRF   x72
0D69C:  CLRF   x73
0D69E:  CLRF   x74
0D6A0:  CLRF   x75
0D6A2:  CLRF   x76
0D6A4:  CLRF   x77
0D6A6:  CLRF   x78
0D6A8:  CLRF   x79
0D6AA:  CLRF   x7A
0D6AC:  CLRF   x7B
0D6AE:  CLRF   x7C
0D6B0:  CLRF   x7D
0D6B2:  CLRF   x7E
0D6B4:  CLRF   x7F
0D6B6:  CLRF   x80
0D6B8:  CLRF   x81
0D6BA:  CLRF   x82
0D6BC:  CLRF   x83
0D6BE:  CLRF   x84
0D6C0:  CLRF   x85
0D6C2:  CLRF   x86
0D6C4:  CLRF   x87
0D6C6:  CLRF   x88
0D6C8:  CLRF   x89
0D6CA:  CLRF   x8A
0D6CC:  CLRF   x8B
0D6CE:  CLRF   x8C
0D6D0:  CLRF   x8D
0D6D2:  CLRF   x8E
0D6D4:  CLRF   x8F
0D6D6:  CLRF   x90
0D6D8:  CLRF   x91
0D6DA:  CLRF   x92
0D6DC:  CLRF   x93
0D6DE:  CLRF   x94
0D6E0:  CLRF   x95
0D6E2:  CLRF   x96
0D6E4:  CLRF   x97
0D6E6:  CLRF   x98
0D6E8:  CLRF   x99
0D6EA:  CLRF   x9A
0D6EC:  CLRF   x9B
0D6EE:  CLRF   x9C
0D6F0:  CLRF   x9D
0D6F2:  CLRF   x9E
0D6F4:  CLRF   x9F
0D6F6:  CLRF   xA0
0D6F8:  CLRF   xA1
0D6FA:  CLRF   xA2
0D6FC:  CLRF   xA3
0D6FE:  CLRF   xA4
0D700:  CLRF   xA5
0D702:  CLRF   xA6
0D704:  CLRF   xA7
0D706:  CLRF   xA8
0D708:  CLRF   xA9
0D70A:  CLRF   xAA
0D70C:  CLRF   xAB
0D70E:  CLRF   xAC
0D710:  CLRF   xAD
0D712:  CLRF   xAE
0D714:  CLRF   xAF
0D716:  CLRF   xB0
0D718:  CLRF   xB1
0D71A:  CLRF   xB2
0D71C:  CLRF   xB3
0D71E:  CLRF   xB4
0D720:  CLRF   xB5
0D722:  CLRF   xB6
0D724:  CLRF   xB7
0D726:  CLRF   xB8
0D728:  CLRF   xB9
0D72A:  CLRF   xBA
0D72C:  CLRF   xBB
0D72E:  CLRF   xBC
0D730:  CLRF   xBD
0D732:  CLRF   xBE
0D734:  CLRF   xBF
0D736:  CLRF   xC0
0D738:  CLRF   xC1
0D73A:  CLRF   xC2
0D73C:  CLRF   xC3
0D73E:  CLRF   xC4
0D740:  CLRF   xC5
0D742:  CLRF   xC6
0D744:  CLRF   xC7
0D746:  CLRF   xC8
0D748:  CLRF   xC9
0D74A:  CLRF   xCA
0D74C:  CLRF   xCB
0D74E:  CLRF   xCC
0D750:  CLRF   xCD
0D752:  CLRF   xCE
0D754:  CLRF   xCF
0D756:  CLRF   xD0
0D758:  CLRF   xD1
0D75A:  CLRF   xD2
0D75C:  CLRF   xD3
0D75E:  CLRF   xD4
0D760:  CLRF   xD5
0D762:  CLRF   xD6
0D764:  CLRF   xD7
0D766:  CLRF   xD8
0D768:  CLRF   xD9
0D76A:  CLRF   xDA
0D76C:  CLRF   xDB
0D76E:  CLRF   xDC
0D770:  CLRF   xDD
0D772:  CLRF   xDE
0D774:  CLRF   xDF
0D776:  CLRF   xE0
0D778:  CLRF   xE1
0D77A:  CLRF   xE2
0D77C:  CLRF   xE3
0D77E:  CLRF   xE4
0D780:  CLRF   xE5
0D782:  CLRF   xE6
0D784:  CLRF   xE7
0D786:  CLRF   xE8
0D788:  CLRF   xE9
0D78A:  CLRF   xEA
0D78C:  CLRF   xEB
0D78E:  CLRF   xEC
0D790:  CLRF   xED
0D792:  CLRF   xEE
0D794:  CLRF   xEF
0D796:  CLRF   xF0
0D798:  CLRF   xF1
0D79A:  CLRF   xF2
0D79C:  CLRF   xF3
0D79E:  CLRF   xF4
0D7A0:  CLRF   xF5
0D7A2:  CLRF   xF6
0D7A4:  CLRF   xF7
0D7A6:  CLRF   xF8
0D7A8:  CLRF   xF9
0D7AA:  CLRF   xFA
0D7AC:  CLRF   xFB
0D7AE:  CLRF   xFC
0D7B0:  CLRF   xFD
0D7B2:  CLRF   xFE
0D7B4:  CLRF   xFF
0D7B6:  MOVLB  8
0D7B8:  CLRF   x00
0D7BA:  CLRF   x01
0D7BC:  CLRF   x02
0D7BE:  CLRF   x03
0D7C0:  CLRF   x04
0D7C2:  CLRF   x05
0D7C4:  CLRF   x06
0D7C6:  CLRF   x07
0D7C8:  CLRF   x08
0D7CA:  CLRF   x09
0D7CC:  CLRF   x0A
0D7CE:  CLRF   x0B
0D7D0:  CLRF   x0C
0D7D2:  CLRF   x0D
0D7D4:  CLRF   x0E
0D7D6:  CLRF   x0F
0D7D8:  CLRF   x10
0D7DA:  CLRF   x11
0D7DC:  CLRF   x12
0D7DE:  CLRF   x13
0D7E0:  CLRF   x14
0D7E2:  CLRF   x15
0D7E4:  CLRF   x16
0D7E6:  CLRF   x17
0D7E8:  CLRF   x18
0D7EA:  CLRF   x19
0D7EC:  CLRF   x1A
0D7EE:  CLRF   x1B
0D7F0:  CLRF   x1C
0D7F2:  CLRF   x1D
0D7F4:  CLRF   x1E
0D7F6:  CLRF   x1F
0D7F8:  CLRF   x20
0D7FA:  CLRF   x21
0D7FC:  CLRF   x22
0D7FE:  CLRF   x23
0D800:  CLRF   x24
0D802:  CLRF   x25
0D804:  CLRF   x26
0D806:  CLRF   x27
0D808:  CLRF   x28
0D80A:  CLRF   x29
0D80C:  CLRF   x2A
0D80E:  CLRF   x2B
0D810:  CLRF   x2C
0D812:  CLRF   x2D
0D814:  CLRF   x2E
0D816:  CLRF   x2F
0D818:  CLRF   x30
0D81A:  CLRF   x31
0D81C:  CLRF   x32
0D81E:  CLRF   x33
0D820:  CLRF   x34
0D822:  CLRF   x35
0D824:  CLRF   x36
0D826:  CLRF   x37
0D828:  CLRF   x38
0D82A:  CLRF   x39
0D82C:  CLRF   x3A
0D82E:  CLRF   x3B
0D830:  CLRF   x3C
0D832:  CLRF   x3D
0D834:  CLRF   x3E
0D836:  CLRF   x3F
0D838:  CLRF   x40
0D83A:  CLRF   x41
0D83C:  CLRF   x42
0D83E:  CLRF   x43
0D840:  CLRF   x44
0D842:  CLRF   x45
0D844:  CLRF   x46
0D846:  CLRF   x47
0D848:  CLRF   x48
0D84A:  CLRF   x49
0D84C:  CLRF   x4A
0D84E:  CLRF   x4B
0D850:  CLRF   x4C
0D852:  CLRF   x4D
0D854:  CLRF   x4E
0D856:  CLRF   x4F
0D858:  CLRF   x50
0D85A:  CLRF   x51
0D85C:  CLRF   x52
0D85E:  CLRF   x53
0D860:  CLRF   x54
0D862:  CLRF   x55
0D864:  CLRF   x56
0D866:  CLRF   x57
0D868:  CLRF   x58
0D86A:  CLRF   x59
0D86C:  CLRF   x5A
0D86E:  CLRF   x5B
0D870:  CLRF   x5C
0D872:  CLRF   x5D
0D874:  CLRF   x5E
0D876:  CLRF   x5F
0D878:  CLRF   x60
0D87A:  CLRF   x61
0D87C:  CLRF   x62
0D87E:  CLRF   x63
0D880:  CLRF   x64
0D882:  CLRF   x65
0D884:  CLRF   x66
0D886:  CLRF   x67
0D888:  CLRF   x68
0D88A:  CLRF   x69
0D88C:  CLRF   x6A
0D88E:  CLRF   x6B
0D890:  CLRF   x6C
0D892:  CLRF   x6D
0D894:  CLRF   x6E
0D896:  CLRF   x6F
0D898:  CLRF   x70
0D89A:  CLRF   x71
0D89C:  CLRF   x72
0D89E:  CLRF   x73
0D8A0:  CLRF   x74
0D8A2:  CLRF   x75
0D8A4:  CLRF   x76
0D8A6:  CLRF   x77
0D8A8:  CLRF   x78
0D8AA:  CLRF   x79
0D8AC:  CLRF   x7A
0D8AE:  CLRF   x7B
0D8B0:  CLRF   x7C
0D8B2:  CLRF   x7D
0D8B4:  CLRF   x7E
0D8B6:  CLRF   x7F
0D8B8:  CLRF   x80
0D8BA:  CLRF   x81
0D8BC:  CLRF   x82
0D8BE:  CLRF   x83
0D8C0:  CLRF   x84
0D8C2:  CLRF   x85
0D8C4:  CLRF   x86
0D8C6:  CLRF   x87
0D8C8:  CLRF   x88
0D8CA:  CLRF   x89
0D8CC:  CLRF   x8A
0D8CE:  CLRF   x8B
0D8D0:  CLRF   x8C
0D8D2:  CLRF   x8D
0D8D4:  CLRF   x8E
0D8D6:  CLRF   x8F
0D8D8:  CLRF   x90
0D8DA:  CLRF   x91
0D8DC:  CLRF   x92
0D8DE:  CLRF   x93
0D8E0:  CLRF   x94
0D8E2:  CLRF   x95
0D8E4:  CLRF   x96
0D8E6:  CLRF   x97
0D8E8:  CLRF   x98
0D8EA:  CLRF   x99
0D8EC:  CLRF   x9A
0D8EE:  CLRF   x9B
0D8F0:  CLRF   x9C
0D8F2:  CLRF   x9D
0D8F4:  CLRF   x9E
0D8F6:  CLRF   x9F
0D8F8:  CLRF   xA0
0D8FA:  CLRF   xA1
0D8FC:  CLRF   xA2
0D8FE:  CLRF   xA3
0D900:  CLRF   xA4
0D902:  CLRF   xA5
0D904:  CLRF   xA6
0D906:  CLRF   xA7
0D908:  CLRF   xA8
0D90A:  CLRF   xA9
0D90C:  CLRF   xAA
0D90E:  CLRF   xAB
0D910:  CLRF   xAC
0D912:  CLRF   xAD
0D914:  CLRF   xAE
0D916:  CLRF   xAF
0D918:  CLRF   xB0
0D91A:  CLRF   xB1
0D91C:  CLRF   xB2
0D91E:  CLRF   xB3
0D920:  CLRF   xB4
0D922:  CLRF   xB5
0D924:  CLRF   xB6
0D926:  CLRF   xB7
0D928:  CLRF   xB8
0D92A:  CLRF   xB9
0D92C:  CLRF   xBA
0D92E:  CLRF   xBB
0D930:  CLRF   xBC
0D932:  CLRF   xBD
0D934:  CLRF   xBE
0D936:  CLRF   xBF
0D938:  CLRF   xC0
0D93A:  CLRF   xC1
0D93C:  CLRF   xC2
0D93E:  CLRF   xC3
0D940:  CLRF   xC4
0D942:  CLRF   xC5
0D944:  CLRF   xC6
0D946:  CLRF   xC7
0D948:  CLRF   xC8
0D94A:  CLRF   xC9
0D94C:  CLRF   xCA
0D94E:  CLRF   xCB
0D950:  CLRF   xCC
0D952:  CLRF   xCD
0D954:  CLRF   xCE
0D956:  CLRF   xCF
0D958:  CLRF   xD0
0D95A:  CLRF   xD1
0D95C:  CLRF   xD2
0D95E:  CLRF   xD3
0D960:  CLRF   xD4
0D962:  CLRF   xD5
0D964:  CLRF   xD6
0D966:  CLRF   xD7
0D968:  CLRF   xD8
0D96A:  CLRF   xD9
0D96C:  CLRF   xDA
0D96E:  CLRF   xDB
0D970:  CLRF   xDC
0D972:  CLRF   xDD
0D974:  CLRF   xDE
0D976:  CLRF   xDF
0D978:  CLRF   xE0
0D97A:  CLRF   xE1
0D97C:  CLRF   xE2
0D97E:  CLRF   xE3
0D980:  CLRF   xE4
0D982:  CLRF   xE5
0D984:  CLRF   xE6
0D986:  CLRF   xE7
0D988:  CLRF   xE8
0D98A:  CLRF   xE9
0D98C:  CLRF   xEA
0D98E:  CLRF   xEB
0D990:  CLRF   xEC
0D992:  CLRF   xED
0D994:  CLRF   xEE
0D996:  CLRF   xEF
0D998:  CLRF   xF0
0D99A:  CLRF   xF1
0D99C:  CLRF   xF2
0D99E:  CLRF   xF3
0D9A0:  CLRF   xF4
0D9A2:  CLRF   xF5
0D9A4:  CLRF   xF6
0D9A6:  CLRF   xF7
0D9A8:  CLRF   xF8
0D9AA:  CLRF   xF9
0D9AC:  CLRF   xFA
0D9AE:  CLRF   xFB
0D9B0:  CLRF   xFC
0D9B2:  CLRF   xFD
0D9B4:  CLRF   xFE
0D9B6:  CLRF   xFF
0D9B8:  MOVLB  9
0D9BA:  CLRF   x00
0D9BC:  CLRF   x01
0D9BE:  CLRF   x02
0D9C0:  CLRF   x03
0D9C2:  CLRF   x04
0D9C4:  CLRF   x05
0D9C6:  CLRF   x06
0D9C8:  CLRF   x07
0D9CA:  CLRF   x08
0D9CC:  CLRF   x09
0D9CE:  CLRF   x0A
0D9D0:  CLRF   x0B
0D9D2:  CLRF   x0C
0D9D4:  CLRF   x0D
0D9D6:  CLRF   x0E
0D9D8:  CLRF   x0F
0D9DA:  CLRF   x10
0D9DC:  CLRF   x11
0D9DE:  CLRF   x12
0D9E0:  CLRF   x13
0D9E2:  CLRF   x14
0D9E4:  CLRF   x15
0D9E6:  CLRF   x16
0D9E8:  CLRF   x17
0D9EA:  CLRF   x18
0D9EC:  CLRF   x19
0D9EE:  CLRF   x1A
0D9F0:  CLRF   x1B
0D9F2:  CLRF   x1C
0D9F4:  CLRF   x1D
0D9F6:  CLRF   x1E
0D9F8:  CLRF   x1F
0D9FA:  CLRF   x20
0D9FC:  CLRF   x21
0D9FE:  CLRF   x22
0DA00:  CLRF   x23
0DA02:  CLRF   x24
0DA04:  CLRF   x25
0DA06:  CLRF   x26
0DA08:  CLRF   x27
0DA0A:  CLRF   x28
0DA0C:  CLRF   x29
0DA0E:  CLRF   x2A
0DA10:  CLRF   x2B
0DA12:  CLRF   x2C
0DA14:  CLRF   x2D
0DA16:  CLRF   x2E
0DA18:  CLRF   x2F
0DA1A:  CLRF   x30
0DA1C:  CLRF   x31
0DA1E:  CLRF   x32
0DA20:  CLRF   x33
0DA22:  CLRF   x34
0DA24:  CLRF   x35
0DA26:  CLRF   x36
0DA28:  CLRF   x37
0DA2A:  CLRF   x38
0DA2C:  CLRF   x39
0DA2E:  CLRF   x3A
0DA30:  CLRF   x3B
0DA32:  CLRF   x3C
0DA34:  CLRF   x3D
0DA36:  CLRF   x3E
0DA38:  CLRF   x3F
0DA3A:  CLRF   x40
0DA3C:  CLRF   x41
0DA3E:  CLRF   x42
0DA40:  CLRF   x43
0DA42:  CLRF   x44
0DA44:  CLRF   x45
0DA46:  CLRF   x46
0DA48:  CLRF   x47
0DA4A:  CLRF   x48
0DA4C:  CLRF   x49
0DA4E:  CLRF   x4A
0DA50:  CLRF   x4B
0DA52:  CLRF   x4C
0DA54:  CLRF   x4D
0DA56:  CLRF   x4E
0DA58:  CLRF   x4F
0DA5A:  CLRF   x50
0DA5C:  CLRF   x51
0DA5E:  CLRF   x52
0DA60:  CLRF   x53
0DA62:  CLRF   x54
0DA64:  CLRF   x55
0DA66:  CLRF   x56
0DA68:  CLRF   x57
0DA6A:  CLRF   x58
0DA6C:  CLRF   x59
0DA6E:  CLRF   x5A
0DA70:  CLRF   x5B
0DA72:  CLRF   x5C
0DA74:  CLRF   x5D
0DA76:  CLRF   x5E
0DA78:  CLRF   x5F
0DA7A:  CLRF   x60
0DA7C:  CLRF   x61
0DA7E:  CLRF   x62
0DA80:  CLRF   x63
0DA82:  CLRF   x64
0DA84:  CLRF   x65
0DA86:  CLRF   x66
0DA88:  CLRF   x67
0DA8A:  CLRF   x68
0DA8C:  CLRF   x69
0DA8E:  CLRF   x6A
0DA90:  CLRF   x6B
0DA92:  CLRF   x6C
0DA94:  CLRF   x6D
0DA96:  CLRF   x6E
0DA98:  CLRF   x6F
0DA9A:  CLRF   x70
0DA9C:  CLRF   x71
0DA9E:  CLRF   x72
0DAA0:  CLRF   x73
0DAA2:  CLRF   x74
0DAA4:  CLRF   x75
0DAA6:  CLRF   x76
0DAA8:  CLRF   x77
0DAAA:  CLRF   x78
0DAAC:  CLRF   x79
0DAAE:  CLRF   x7A
0DAB0:  CLRF   x7B
0DAB2:  CLRF   x7C
0DAB4:  CLRF   x7D
0DAB6:  CLRF   x7E
0DAB8:  CLRF   x7F
0DABA:  CLRF   x80
0DABC:  CLRF   x81
0DABE:  CLRF   x82
0DAC0:  CLRF   x83
0DAC2:  CLRF   x84
0DAC4:  CLRF   x85
0DAC6:  CLRF   x86
0DAC8:  CLRF   x87
0DACA:  CLRF   x88
0DACC:  CLRF   x89
0DACE:  CLRF   x8A
0DAD0:  CLRF   x8B
0DAD2:  CLRF   x8C
0DAD4:  CLRF   x8D
0DAD6:  CLRF   x8E
0DAD8:  CLRF   x8F
0DADA:  CLRF   x90
0DADC:  CLRF   x91
0DADE:  CLRF   x92
0DAE0:  CLRF   x93
0DAE2:  CLRF   x94
0DAE4:  CLRF   x95
0DAE6:  CLRF   x96
0DAE8:  CLRF   x97
0DAEA:  CLRF   x98
0DAEC:  CLRF   x99
0DAEE:  CLRF   x9A
0DAF0:  CLRF   x9B
0DAF2:  CLRF   x9C
0DAF4:  CLRF   x9D
0DAF6:  CLRF   x9E
0DAF8:  CLRF   x9F
0DAFA:  CLRF   xA0
0DAFC:  CLRF   xA1
0DAFE:  CLRF   xA2
0DB00:  CLRF   xA3
....................     port2.port_num = 2; 
0DB02:  MOVLW  02
0DB04:  MOVLB  5
0DB06:  MOVWF  xA4
....................     port2.sweep_step = 0;
0DB08:  CLRF   xA6
0DB0A:  CLRF   xA5
....................     port2.active = 1;
0DB0C:  MOVLB  9
0DB0E:  BSF    xA3.0
.................... 
....................     int16 count = 1;
....................     iv_env_t measured_data = create_meas_data();
0DB10:  CLRF   xA5
0DB12:  MOVLW  01
0DB14:  MOVWF  xA4
0DB16:  MOVLB  0
0DB18:  CALL   90E2
0DB1C:  MOVFF  02,03
0DB20:  MOVF   01,W
0DB22:  MOVWF  FE1
0DB24:  MOVFF  03,FE2
0DB28:  MOVLW  09
0DB2A:  MOVWF  FEA
0DB2C:  MOVLW  A6
0DB2E:  MOVWF  FE9
0DB30:  MOVLW  0C
0DB32:  MOVWF  01
0DB34:  MOVFF  FE6,FEE
0DB38:  DECFSZ 01,F
0DB3A:  GOTO   DB34
.................... 
....................     while (port1.active || port2.active)
0DB3E:  MOVLB  5
0DB40:  BTFSS  xA3.0
0DB42:  BRA    DB4A
0DB44:  MOVLB  0
0DB46:  GOTO   DB5A
0DB4A:  MOVLB  0
0DB4C:  MOVLB  9
0DB4E:  BTFSC  xA3.0
0DB50:  BRA    DB58
0DB52:  MOVLB  0
0DB54:  GOTO   DE3E
0DB58:  MOVLB  0
....................     {
....................         // 出力設定
....................         if (port1.active) {
0DB5A:  MOVLB  5
0DB5C:  BTFSC  xA3.0
0DB5E:  BRA    DB66
0DB60:  MOVLB  0
0DB62:  GOTO   DB78
0DB66:  MOVLB  0
....................             mcp4901_1_write(count);
0DB68:  MOVFF  9A5,9CE
0DB6C:  MOVFF  9A4,9CD
0DB70:  CALL   2872
....................         } else {
0DB74:  GOTO   DB84
....................             mcp4901_1_write(0);  // 閾値到達後は0出力
0DB78:  MOVLB  9
0DB7A:  CLRF   xCE
0DB7C:  CLRF   xCD
0DB7E:  MOVLB  0
0DB80:  CALL   2872
....................         }
.................... 
....................         if (port2.active) {
0DB84:  MOVLB  9
0DB86:  BTFSC  xA3.0
0DB88:  BRA    DB90
0DB8A:  MOVLB  0
0DB8C:  GOTO   DBA2
0DB90:  MOVLB  0
....................             mcp4901_2_write(count);
0DB92:  MOVFF  9A5,9CE
0DB96:  MOVFF  9A4,9CD
0DB9A:  CALL   28B0
....................         } else {
0DB9E:  GOTO   DBAE
....................             mcp4901_2_write(0);
0DBA2:  MOVLB  9
0DBA4:  CLRF   xCE
0DBA6:  CLRF   xCD
0DBA8:  MOVLB  0
0DBAA:  CALL   28B0
....................         }
.................... 
....................         delay_us(100);
0DBAE:  MOVLW  85
0DBB0:  MOVWF  00
0DBB2:  DECFSZ 00,F
0DBB4:  BRA    DBB2
.................... 
....................         // データ取得
....................         if (port1.active) {
0DBB6:  MOVLB  5
0DBB8:  BTFSC  xA3.0
0DBBA:  BRA    DBC2
0DBBC:  MOVLB  0
0DBBE:  GOTO   DCE2
0DBC2:  MOVLB  0
....................             port1.data_buffer[count].voltage = ad7490_read(ADC_CIGS1_AMP);
0DBC4:  MOVLB  9
0DBC6:  RLCF   xA4,W
0DBC8:  MOVWF  02
0DBCA:  RLCF   xA5,W
0DBCC:  MOVWF  03
0DBCE:  RLCF   02,F
0DBD0:  RLCF   03,F
0DBD2:  MOVLW  FC
0DBD4:  ANDWF  02,F
0DBD6:  MOVF   02,W
0DBD8:  ADDLW  A7
0DBDA:  MOVWF  01
0DBDC:  MOVLW  01
0DBDE:  ADDWFC 03,F
0DBE0:  MOVF   01,W
0DBE2:  MOVWF  xB5
0DBE4:  MOVFF  03,9B6
0DBE8:  MOVLW  02
0DBEA:  MOVWF  xDF
0DBEC:  MOVLB  0
0DBEE:  CALL   24C2
0DBF2:  MOVFF  9B6,FEA
0DBF6:  MOVFF  9B5,FE9
0DBFA:  MOVFF  02,FEC
0DBFE:  MOVF   FED,F
0DC00:  MOVFF  01,FEF
....................             port1.data_buffer[count].current = ad7490_read(ADC_CIGS1_CURR);
0DC04:  MOVLB  9
0DC06:  RLCF   xA4,W
0DC08:  MOVWF  02
0DC0A:  RLCF   xA5,W
0DC0C:  MOVWF  03
0DC0E:  RLCF   02,F
0DC10:  RLCF   03,F
0DC12:  MOVLW  FC
0DC14:  ANDWF  02,F
0DC16:  MOVF   02,W
0DC18:  ADDLW  03
0DC1A:  MOVWF  xB3
0DC1C:  MOVLW  00
0DC1E:  ADDWFC 03,W
0DC20:  MOVWF  xB4
0DC22:  MOVLW  02
0DC24:  ADDWF  xB3,W
0DC26:  MOVWF  01
0DC28:  MOVLW  00
0DC2A:  ADDWFC xB4,W
0DC2C:  MOVWF  03
0DC2E:  MOVF   01,W
0DC30:  ADDLW  A4
0DC32:  MOVWF  01
0DC34:  MOVLW  01
0DC36:  ADDWFC 03,F
0DC38:  MOVF   01,W
0DC3A:  MOVWF  xB3
0DC3C:  MOVFF  03,9B4
0DC40:  MOVLW  01
0DC42:  MOVWF  xDF
0DC44:  MOVLB  0
0DC46:  CALL   24C2
0DC4A:  MOVFF  9B4,FEA
0DC4E:  MOVFF  9B3,FE9
0DC52:  MOVFF  02,FEC
0DC56:  MOVF   FED,F
0DC58:  MOVFF  01,FEF
....................             port1.sweep_step = count + 1;
0DC5C:  MOVLW  01
0DC5E:  MOVLB  9
0DC60:  ADDWF  xA4,W
0DC62:  MOVLB  1
0DC64:  MOVWF  xA5
0DC66:  MOVLW  00
0DC68:  MOVLB  9
0DC6A:  ADDWFC xA5,W
0DC6C:  MOVLB  1
0DC6E:  MOVWF  xA6
....................             if (port1.data_buffer[count].current < curr_limit) {
0DC70:  MOVLB  9
0DC72:  RLCF   xA4,W
0DC74:  MOVWF  02
0DC76:  RLCF   xA5,W
0DC78:  MOVWF  03
0DC7A:  RLCF   02,F
0DC7C:  RLCF   03,F
0DC7E:  MOVLW  FC
0DC80:  ANDWF  02,F
0DC82:  MOVF   02,W
0DC84:  ADDLW  03
0DC86:  MOVWF  xB3
0DC88:  MOVLW  00
0DC8A:  ADDWFC 03,W
0DC8C:  MOVWF  xB4
0DC8E:  MOVLW  02
0DC90:  ADDWF  xB3,W
0DC92:  MOVWF  01
0DC94:  MOVLW  00
0DC96:  ADDWFC xB4,W
0DC98:  MOVWF  03
0DC9A:  MOVF   01,W
0DC9C:  ADDLW  A4
0DC9E:  MOVWF  FE9
0DCA0:  MOVLW  01
0DCA2:  ADDWFC 03,W
0DCA4:  MOVWF  FEA
0DCA6:  MOVFF  FEC,9B4
0DCAA:  MOVF   FED,F
0DCAC:  MOVFF  FEF,9B3
0DCB0:  MOVF   xB4,W
0DCB2:  MOVLB  1
0DCB4:  SUBWF  xA3,W
0DCB6:  BTFSC  FD8.0
0DCB8:  BRA    DCC0
0DCBA:  MOVLB  0
0DCBC:  GOTO   DCE2
0DCC0:  MOVLB  0
0DCC2:  BTFSS  FD8.2
0DCC4:  GOTO   DCDC
0DCC8:  MOVLB  1
0DCCA:  MOVF   xA2,W
0DCCC:  MOVLB  9
0DCCE:  SUBWF  xB3,W
0DCD0:  BTFSS  FD8.0
0DCD2:  BRA    DCDA
0DCD4:  MOVLB  0
0DCD6:  GOTO   DCE2
0DCDA:  MOVLB  0
....................                 port1.active = 0;  // 閾値到達で測定終了
0DCDC:  MOVLB  5
0DCDE:  BCF    xA3.0
0DCE0:  MOVLB  0
....................             }
....................         }
.................... 
....................         if (port2.active) {
0DCE2:  MOVLB  9
0DCE4:  BTFSC  xA3.0
0DCE6:  BRA    DCEE
0DCE8:  MOVLB  0
0DCEA:  GOTO   DE0E
0DCEE:  MOVLB  0
....................             port2.data_buffer[count].voltage = ad7490_read(ADC_CIGS2_AMP);
0DCF0:  MOVLB  9
0DCF2:  RLCF   xA4,W
0DCF4:  MOVWF  02
0DCF6:  RLCF   xA5,W
0DCF8:  MOVWF  03
0DCFA:  RLCF   02,F
0DCFC:  RLCF   03,F
0DCFE:  MOVLW  FC
0DD00:  ANDWF  02,F
0DD02:  MOVF   02,W
0DD04:  ADDLW  A7
0DD06:  MOVWF  01
0DD08:  MOVLW  05
0DD0A:  ADDWFC 03,F
0DD0C:  MOVF   01,W
0DD0E:  MOVWF  xB5
0DD10:  MOVFF  03,9B6
0DD14:  MOVLW  06
0DD16:  MOVWF  xDF
0DD18:  MOVLB  0
0DD1A:  CALL   24C2
0DD1E:  MOVFF  9B6,FEA
0DD22:  MOVFF  9B5,FE9
0DD26:  MOVFF  02,FEC
0DD2A:  MOVF   FED,F
0DD2C:  MOVFF  01,FEF
....................             port2.data_buffer[count].current = ad7490_read(ADC_CIGS2_CURR);
0DD30:  MOVLB  9
0DD32:  RLCF   xA4,W
0DD34:  MOVWF  02
0DD36:  RLCF   xA5,W
0DD38:  MOVWF  03
0DD3A:  RLCF   02,F
0DD3C:  RLCF   03,F
0DD3E:  MOVLW  FC
0DD40:  ANDWF  02,F
0DD42:  MOVF   02,W
0DD44:  ADDLW  03
0DD46:  MOVWF  xB3
0DD48:  MOVLW  00
0DD4A:  ADDWFC 03,W
0DD4C:  MOVWF  xB4
0DD4E:  MOVLW  02
0DD50:  ADDWF  xB3,W
0DD52:  MOVWF  01
0DD54:  MOVLW  00
0DD56:  ADDWFC xB4,W
0DD58:  MOVWF  03
0DD5A:  MOVF   01,W
0DD5C:  ADDLW  A4
0DD5E:  MOVWF  01
0DD60:  MOVLW  05
0DD62:  ADDWFC 03,F
0DD64:  MOVF   01,W
0DD66:  MOVWF  xB3
0DD68:  MOVFF  03,9B4
0DD6C:  MOVLW  05
0DD6E:  MOVWF  xDF
0DD70:  MOVLB  0
0DD72:  CALL   24C2
0DD76:  MOVFF  9B4,FEA
0DD7A:  MOVFF  9B3,FE9
0DD7E:  MOVFF  02,FEC
0DD82:  MOVF   FED,F
0DD84:  MOVFF  01,FEF
....................             port2.sweep_step = count + 1;
0DD88:  MOVLW  01
0DD8A:  MOVLB  9
0DD8C:  ADDWF  xA4,W
0DD8E:  MOVLB  5
0DD90:  MOVWF  xA5
0DD92:  MOVLW  00
0DD94:  MOVLB  9
0DD96:  ADDWFC xA5,W
0DD98:  MOVLB  5
0DD9A:  MOVWF  xA6
....................             if (port2.data_buffer[count].current < curr_limit) {
0DD9C:  MOVLB  9
0DD9E:  RLCF   xA4,W
0DDA0:  MOVWF  02
0DDA2:  RLCF   xA5,W
0DDA4:  MOVWF  03
0DDA6:  RLCF   02,F
0DDA8:  RLCF   03,F
0DDAA:  MOVLW  FC
0DDAC:  ANDWF  02,F
0DDAE:  MOVF   02,W
0DDB0:  ADDLW  03
0DDB2:  MOVWF  xB3
0DDB4:  MOVLW  00
0DDB6:  ADDWFC 03,W
0DDB8:  MOVWF  xB4
0DDBA:  MOVLW  02
0DDBC:  ADDWF  xB3,W
0DDBE:  MOVWF  01
0DDC0:  MOVLW  00
0DDC2:  ADDWFC xB4,W
0DDC4:  MOVWF  03
0DDC6:  MOVF   01,W
0DDC8:  ADDLW  A4
0DDCA:  MOVWF  FE9
0DDCC:  MOVLW  05
0DDCE:  ADDWFC 03,W
0DDD0:  MOVWF  FEA
0DDD2:  MOVFF  FEC,9B4
0DDD6:  MOVF   FED,F
0DDD8:  MOVFF  FEF,9B3
0DDDC:  MOVF   xB4,W
0DDDE:  MOVLB  1
0DDE0:  SUBWF  xA3,W
0DDE2:  BTFSC  FD8.0
0DDE4:  BRA    DDEC
0DDE6:  MOVLB  0
0DDE8:  GOTO   DE0E
0DDEC:  MOVLB  0
0DDEE:  BTFSS  FD8.2
0DDF0:  GOTO   DE08
0DDF4:  MOVLB  1
0DDF6:  MOVF   xA2,W
0DDF8:  MOVLB  9
0DDFA:  SUBWF  xB3,W
0DDFC:  BTFSS  FD8.0
0DDFE:  BRA    DE06
0DE00:  MOVLB  0
0DE02:  GOTO   DE0E
0DE06:  MOVLB  0
....................                 port2.active = 0;
0DE08:  MOVLB  9
0DE0A:  BCF    xA3.0
0DE0C:  MOVLB  0
....................             }
....................         }
.................... 
....................         count++;
0DE0E:  MOVLB  9
0DE10:  INCF   xA4,F
0DE12:  BTFSC  FD8.2
0DE14:  INCF   xA5,F
....................         if (count >= 255) {
0DE16:  MOVF   xA5,F
0DE18:  BTFSC  FD8.2
0DE1A:  BRA    DE22
0DE1C:  MOVLB  0
0DE1E:  GOTO   DE36
0DE22:  MOVLB  0
0DE24:  MOVLB  9
0DE26:  MOVF   xA4,W
0DE28:  SUBLW  FE
0DE2A:  BTFSS  FD8.0
0DE2C:  BRA    DE34
0DE2E:  MOVLB  0
0DE30:  GOTO   DE3A
0DE34:  MOVLB  0
....................             break;
0DE36:  GOTO   DE3E
....................         }
0DE3A:  GOTO   DB3E
....................     }
.................... 
....................     fprintf(PC, "temp_top:%04LX\r\n", measured_data.temp_py_top);
0DE3E:  MOVLW  22
0DE40:  MOVWF  FF6
0DE42:  MOVLW  06
0DE44:  MOVWF  FF7
0DE46:  MOVLW  00
0DE48:  MOVWF  FF8
0DE4A:  MOVLW  09
0DE4C:  MOVLB  9
0DE4E:  MOVWF  xB3
0DE50:  MOVLB  0
0DE52:  CALL   2312
0DE56:  MOVFF  9AD,9D9
0DE5A:  MOVLW  37
0DE5C:  MOVLB  9
0DE5E:  MOVWF  xDA
0DE60:  MOVLB  0
0DE62:  CALL   2542
0DE66:  MOVFF  9AC,9D9
0DE6A:  MOVLW  37
0DE6C:  MOVLB  9
0DE6E:  MOVWF  xDA
0DE70:  MOVLB  0
0DE72:  CALL   2542
0DE76:  MOVLW  0D
0DE78:  BTFSS  FA6.6
0DE7A:  GOTO   DE78
0DE7E:  MOVLB  E
0DE80:  MOVWF  xF9
0DE82:  MOVLW  0A
0DE84:  MOVLB  0
0DE86:  BTFSS  FA6.6
0DE88:  GOTO   DE86
0DE8C:  MOVLB  E
0DE8E:  MOVWF  xF9
....................     fprintf(PC, "temp_bot:%04LX\r\n", measured_data.temp_py_bot);
0DE90:  MOVLW  34
0DE92:  MOVWF  FF6
0DE94:  MOVLW  06
0DE96:  MOVWF  FF7
0DE98:  MOVLW  00
0DE9A:  MOVWF  FF8
0DE9C:  MOVLW  09
0DE9E:  MOVLB  9
0DEA0:  MOVWF  xB3
0DEA2:  MOVLB  0
0DEA4:  CALL   2312
0DEA8:  MOVFF  9AF,9D9
0DEAC:  MOVLW  37
0DEAE:  MOVLB  9
0DEB0:  MOVWF  xDA
0DEB2:  MOVLB  0
0DEB4:  CALL   2542
0DEB8:  MOVFF  9AE,9D9
0DEBC:  MOVLW  37
0DEBE:  MOVLB  9
0DEC0:  MOVWF  xDA
0DEC2:  MOVLB  0
0DEC4:  CALL   2542
0DEC8:  MOVLW  0D
0DECA:  BTFSS  FA6.6
0DECC:  GOTO   DECA
0DED0:  MOVLB  E
0DED2:  MOVWF  xF9
0DED4:  MOVLW  0A
0DED6:  MOVLB  0
0DED8:  BTFSS  FA6.6
0DEDA:  GOTO   DED8
0DEDE:  MOVLB  E
0DEE0:  MOVWF  xF9
....................     fprintf(PC, "temp_mis7:%04LX\r\n", measured_data.temp_mis7);
0DEE2:  MOVLW  46
0DEE4:  MOVWF  FF6
0DEE6:  MOVLW  06
0DEE8:  MOVWF  FF7
0DEEA:  MOVLW  00
0DEEC:  MOVWF  FF8
0DEEE:  MOVLW  0A
0DEF0:  MOVLB  9
0DEF2:  MOVWF  xB3
0DEF4:  MOVLB  0
0DEF6:  CALL   2312
0DEFA:  MOVFF  9B1,9D9
0DEFE:  MOVLW  37
0DF00:  MOVLB  9
0DF02:  MOVWF  xDA
0DF04:  MOVLB  0
0DF06:  CALL   2542
0DF0A:  MOVFF  9B0,9D9
0DF0E:  MOVLW  37
0DF10:  MOVLB  9
0DF12:  MOVWF  xDA
0DF14:  MOVLB  0
0DF16:  CALL   2542
0DF1A:  MOVLW  0D
0DF1C:  BTFSS  FA6.6
0DF1E:  GOTO   DF1C
0DF22:  MOVLB  E
0DF24:  MOVWF  xF9
0DF26:  MOVLW  0A
0DF28:  MOVLB  0
0DF2A:  BTFSS  FA6.6
0DF2C:  GOTO   DF2A
0DF30:  MOVLB  E
0DF32:  MOVWF  xF9
....................     fprintf(PC, "pd:%04LX\r\n", measured_data.pd);
0DF34:  MOVLW  58
0DF36:  MOVWF  FF6
0DF38:  MOVLW  06
0DF3A:  MOVWF  FF7
0DF3C:  MOVLW  00
0DF3E:  MOVWF  FF8
0DF40:  MOVLW  03
0DF42:  MOVLB  9
0DF44:  MOVWF  xB3
0DF46:  MOVLB  0
0DF48:  CALL   2312
0DF4C:  MOVFF  9AB,9D9
0DF50:  MOVLW  37
0DF52:  MOVLB  9
0DF54:  MOVWF  xDA
0DF56:  MOVLB  0
0DF58:  CALL   2542
0DF5C:  MOVFF  9AA,9D9
0DF60:  MOVLW  37
0DF62:  MOVLB  9
0DF64:  MOVWF  xDA
0DF66:  MOVLB  0
0DF68:  CALL   2542
0DF6C:  MOVLW  0D
0DF6E:  BTFSS  FA6.6
0DF70:  GOTO   DF6E
0DF74:  MOVLB  E
0DF76:  MOVWF  xF9
0DF78:  MOVLW  0A
0DF7A:  MOVLB  0
0DF7C:  BTFSS  FA6.6
0DF7E:  GOTO   DF7C
0DF82:  MOVLB  E
0DF84:  MOVWF  xF9
....................     // Print I-V data
....................     fprintf(PC, "Volt1,Curr1,Volt2,Curr2\r\n");
0DF86:  MOVLW  64
0DF88:  MOVWF  FF6
0DF8A:  MOVLW  06
0DF8C:  MOVWF  FF7
0DF8E:  MOVLW  00
0DF90:  MOVWF  FF8
0DF92:  MOVLB  0
0DF94:  CALL   22DC
....................     for (int i = 0; i < count; i++) {
0DF98:  MOVLB  9
0DF9A:  CLRF   xB2
0DF9C:  MOVLB  0
0DF9E:  MOVLB  9
0DFA0:  MOVF   xA5,F
0DFA2:  BTFSC  FD8.2
0DFA4:  BRA    DFAC
0DFA6:  MOVLB  0
0DFA8:  GOTO   DFC0
0DFAC:  MOVLB  0
0DFAE:  MOVLB  9
0DFB0:  MOVF   xA4,W
0DFB2:  SUBWF  xB2,W
0DFB4:  BTFSS  FD8.0
0DFB6:  BRA    DFBE
0DFB8:  MOVLB  0
0DFBA:  GOTO   E174
0DFBE:  MOVLB  0
.................... 
....................         fprintf(PC, "%04LX,%04LX,%04LX,%04LX\r\n",
....................             port1.data_buffer[i].voltage, port1.data_buffer[i].current,
....................             port2.data_buffer[i].voltage, port2.data_buffer[i].current);
0DFC0:  MOVLB  A
0DFC2:  CLRF   x43
0DFC4:  MOVFF  9B2,A42
0DFC8:  CLRF   x45
0DFCA:  MOVLW  04
0DFCC:  MOVWF  x44
0DFCE:  MOVLB  0
0DFD0:  CALL   81C0
0DFD4:  MOVFF  02,03
0DFD8:  MOVF   01,W
0DFDA:  ADDLW  A7
0DFDC:  MOVWF  FE9
0DFDE:  MOVLW  01
0DFE0:  ADDWFC 03,W
0DFE2:  MOVWF  FEA
0DFE4:  MOVFF  FEC,9B6
0DFE8:  MOVF   FED,F
0DFEA:  MOVFF  FEF,9B5
0DFEE:  MOVLB  A
0DFF0:  CLRF   x43
0DFF2:  MOVFF  9B2,A42
0DFF6:  CLRF   x45
0DFF8:  MOVLW  04
0DFFA:  MOVWF  x44
0DFFC:  MOVLB  0
0DFFE:  CALL   81C0
0E002:  MOVFF  02,03
0E006:  MOVF   01,W
0E008:  ADDLW  03
0E00A:  MOVLB  9
0E00C:  MOVWF  xB7
0E00E:  MOVLW  00
0E010:  ADDWFC 03,W
0E012:  MOVWF  xB8
0E014:  MOVLW  02
0E016:  ADDWF  xB7,W
0E018:  MOVWF  01
0E01A:  MOVLW  00
0E01C:  ADDWFC xB8,W
0E01E:  MOVWF  03
0E020:  MOVF   01,W
0E022:  ADDLW  A4
0E024:  MOVWF  FE9
0E026:  MOVLW  01
0E028:  ADDWFC 03,W
0E02A:  MOVWF  FEA
0E02C:  MOVFF  FEC,9B8
0E030:  MOVF   FED,F
0E032:  MOVFF  FEF,9B7
0E036:  MOVLB  A
0E038:  CLRF   x43
0E03A:  MOVFF  9B2,A42
0E03E:  CLRF   x45
0E040:  MOVLW  04
0E042:  MOVWF  x44
0E044:  MOVLB  0
0E046:  CALL   81C0
0E04A:  MOVFF  02,03
0E04E:  MOVF   01,W
0E050:  ADDLW  A7
0E052:  MOVWF  FE9
0E054:  MOVLW  05
0E056:  ADDWFC 03,W
0E058:  MOVWF  FEA
0E05A:  MOVFF  FEC,9BC
0E05E:  MOVF   FED,F
0E060:  MOVFF  FEF,9BB
0E064:  MOVLB  A
0E066:  CLRF   x43
0E068:  MOVFF  9B2,A42
0E06C:  CLRF   x45
0E06E:  MOVLW  04
0E070:  MOVWF  x44
0E072:  MOVLB  0
0E074:  CALL   81C0
0E078:  MOVFF  02,03
0E07C:  MOVF   01,W
0E07E:  ADDLW  03
0E080:  MOVLB  9
0E082:  MOVWF  xBD
0E084:  MOVLW  00
0E086:  ADDWFC 03,W
0E088:  MOVWF  xBE
0E08A:  MOVLW  02
0E08C:  ADDWF  xBD,W
0E08E:  MOVWF  01
0E090:  MOVLW  00
0E092:  ADDWFC xBE,W
0E094:  MOVWF  03
0E096:  MOVF   01,W
0E098:  ADDLW  A4
0E09A:  MOVWF  FE9
0E09C:  MOVLW  05
0E09E:  ADDWFC 03,W
0E0A0:  MOVWF  FEA
0E0A2:  MOVFF  FEC,9BE
0E0A6:  MOVF   FED,F
0E0A8:  MOVFF  FEF,9BD
0E0AC:  MOVFF  9B6,9D9
0E0B0:  MOVLW  37
0E0B2:  MOVWF  xDA
0E0B4:  MOVLB  0
0E0B6:  CALL   2542
0E0BA:  MOVFF  9B5,9D9
0E0BE:  MOVLW  37
0E0C0:  MOVLB  9
0E0C2:  MOVWF  xDA
0E0C4:  MOVLB  0
0E0C6:  CALL   2542
0E0CA:  MOVLW  2C
0E0CC:  BTFSS  FA6.6
0E0CE:  GOTO   E0CC
0E0D2:  MOVLB  E
0E0D4:  MOVWF  xF9
0E0D6:  MOVFF  9B8,9D9
0E0DA:  MOVLW  37
0E0DC:  MOVLB  9
0E0DE:  MOVWF  xDA
0E0E0:  MOVLB  0
0E0E2:  CALL   2542
0E0E6:  MOVFF  9B7,9D9
0E0EA:  MOVLW  37
0E0EC:  MOVLB  9
0E0EE:  MOVWF  xDA
0E0F0:  MOVLB  0
0E0F2:  CALL   2542
0E0F6:  MOVLW  2C
0E0F8:  BTFSS  FA6.6
0E0FA:  GOTO   E0F8
0E0FE:  MOVLB  E
0E100:  MOVWF  xF9
0E102:  MOVFF  9BC,9D9
0E106:  MOVLW  37
0E108:  MOVLB  9
0E10A:  MOVWF  xDA
0E10C:  MOVLB  0
0E10E:  CALL   2542
0E112:  MOVFF  9BB,9D9
0E116:  MOVLW  37
0E118:  MOVLB  9
0E11A:  MOVWF  xDA
0E11C:  MOVLB  0
0E11E:  CALL   2542
0E122:  MOVLW  2C
0E124:  BTFSS  FA6.6
0E126:  GOTO   E124
0E12A:  MOVLB  E
0E12C:  MOVWF  xF9
0E12E:  MOVFF  9BE,9D9
0E132:  MOVLW  37
0E134:  MOVLB  9
0E136:  MOVWF  xDA
0E138:  MOVLB  0
0E13A:  CALL   2542
0E13E:  MOVFF  9BD,9D9
0E142:  MOVLW  37
0E144:  MOVLB  9
0E146:  MOVWF  xDA
0E148:  MOVLB  0
0E14A:  CALL   2542
0E14E:  MOVLW  0D
0E150:  BTFSS  FA6.6
0E152:  GOTO   E150
0E156:  MOVLB  E
0E158:  MOVWF  xF9
0E15A:  MOVLW  0A
0E15C:  MOVLB  0
0E15E:  BTFSS  FA6.6
0E160:  GOTO   E15E
0E164:  MOVLB  E
0E166:  MOVWF  xF9
0E168:  MOVLB  0
0E16A:  MOVLB  9
0E16C:  INCF   xB2,F
0E16E:  MOVLB  0
0E170:  GOTO   DF9E
....................     }
....................     log_meas_data(&measured_data, &port1);
0E174:  MOVLW  09
0E176:  MOVLB  9
0E178:  MOVWF  xB4
0E17A:  MOVLW  A6
0E17C:  MOVWF  xB3
0E17E:  MOVLW  01
0E180:  MOVWF  xB6
0E182:  MOVLW  A4
0E184:  MOVWF  xB5
0E186:  MOVLB  0
0E188:  CALL   9174
....................     log_meas_data(&measured_data, &port2);
0E18C:  MOVLW  09
0E18E:  MOVLB  9
0E190:  MOVWF  xB4
0E192:  MOVLW  A6
0E194:  MOVWF  xB3
0E196:  MOVLW  05
0E198:  MOVWF  xB6
0E19A:  MOVLW  A4
0E19C:  MOVWF  xB5
0E19E:  MOVLB  0
0E1A0:  CALL   9174
....................     misf_update_address_area();
0E1A4:  CALL   5090
0E1A8:  GOTO   F7CC (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit)
.................... {
....................     fprintf(PC, ".");
*
0B164:  MOVLW  2E
0B166:  BTFSS  FA6.6
0B168:  GOTO   B166
0B16C:  MOVLB  E
0B16E:  MOVWF  xF9
....................     
....................     
....................     connect_port1();
0B170:  MOVLB  0
0B172:  CALL   5248
....................     connect_port2();
0B176:  CALL   5250
....................     // Enable both CIGS ports
....................     mcp4901_1_write(0); 
0B17A:  MOVLB  9
0B17C:  CLRF   xCE
0B17E:  CLRF   xCD
0B180:  MOVLB  0
0B182:  CALL   2872
....................     mcp4901_2_write(0);
0B186:  MOVLB  9
0B188:  CLRF   xCE
0B18A:  CLRF   xCD
0B18C:  MOVLB  0
0B18E:  CALL   28B0
....................     connect_port1();
0B192:  CALL   5248
....................     connect_port2();
0B196:  CALL   5250
.................... 
....................     // Stabilization wait
....................     delay_ms(100);
0B19A:  MOVLW  64
0B19C:  MOVLB  A
0B19E:  MOVWF  xF3
0B1A0:  MOVLB  0
0B1A2:  CALL   22AE
....................     
....................     // Init Port1
....................     sweep_debug_config_t port1 = {0};
0B1A6:  MOVLB  1
0B1A8:  CLRF   xBA
0B1AA:  CLRF   xBB
0B1AC:  CLRF   xBC
0B1AE:  CLRF   xBD
0B1B0:  CLRF   xBE
0B1B2:  CLRF   xBF
0B1B4:  CLRF   xC0
0B1B6:  CLRF   xC1
0B1B8:  CLRF   xC2
0B1BA:  CLRF   xC3
0B1BC:  CLRF   xC4
0B1BE:  CLRF   xC5
0B1C0:  CLRF   xC6
0B1C2:  CLRF   xC7
0B1C4:  CLRF   xC8
0B1C6:  CLRF   xC9
0B1C8:  CLRF   xCA
0B1CA:  CLRF   xCB
0B1CC:  CLRF   xCC
0B1CE:  CLRF   xCD
0B1D0:  CLRF   xCE
0B1D2:  CLRF   xCF
0B1D4:  CLRF   xD0
0B1D6:  CLRF   xD1
0B1D8:  CLRF   xD2
0B1DA:  CLRF   xD3
0B1DC:  CLRF   xD4
0B1DE:  CLRF   xD5
0B1E0:  CLRF   xD6
0B1E2:  CLRF   xD7
0B1E4:  CLRF   xD8
0B1E6:  CLRF   xD9
0B1E8:  CLRF   xDA
0B1EA:  CLRF   xDB
0B1EC:  CLRF   xDC
0B1EE:  CLRF   xDD
0B1F0:  CLRF   xDE
0B1F2:  CLRF   xDF
0B1F4:  CLRF   xE0
0B1F6:  CLRF   xE1
0B1F8:  CLRF   xE2
0B1FA:  CLRF   xE3
0B1FC:  CLRF   xE4
0B1FE:  CLRF   xE5
0B200:  CLRF   xE6
0B202:  CLRF   xE7
0B204:  CLRF   xE8
0B206:  CLRF   xE9
0B208:  CLRF   xEA
0B20A:  CLRF   xEB
0B20C:  CLRF   xEC
0B20E:  CLRF   xED
0B210:  CLRF   xEE
0B212:  CLRF   xEF
0B214:  CLRF   xF0
0B216:  CLRF   xF1
0B218:  CLRF   xF2
0B21A:  CLRF   xF3
0B21C:  CLRF   xF4
0B21E:  CLRF   xF5
0B220:  CLRF   xF6
0B222:  CLRF   xF7
0B224:  CLRF   xF8
0B226:  CLRF   xF9
0B228:  CLRF   xFA
0B22A:  CLRF   xFB
0B22C:  CLRF   xFC
0B22E:  CLRF   xFD
0B230:  CLRF   xFE
0B232:  CLRF   xFF
0B234:  MOVLB  2
0B236:  CLRF   x00
0B238:  CLRF   x01
0B23A:  CLRF   x02
0B23C:  CLRF   x03
0B23E:  CLRF   x04
0B240:  CLRF   x05
0B242:  CLRF   x06
0B244:  CLRF   x07
0B246:  CLRF   x08
0B248:  CLRF   x09
0B24A:  CLRF   x0A
0B24C:  CLRF   x0B
0B24E:  CLRF   x0C
0B250:  CLRF   x0D
0B252:  CLRF   x0E
0B254:  CLRF   x0F
0B256:  CLRF   x10
0B258:  CLRF   x11
0B25A:  CLRF   x12
0B25C:  CLRF   x13
0B25E:  CLRF   x14
0B260:  CLRF   x15
0B262:  CLRF   x16
0B264:  CLRF   x17
0B266:  CLRF   x18
0B268:  CLRF   x19
0B26A:  CLRF   x1A
0B26C:  CLRF   x1B
0B26E:  CLRF   x1C
0B270:  CLRF   x1D
0B272:  CLRF   x1E
0B274:  CLRF   x1F
0B276:  CLRF   x20
0B278:  CLRF   x21
0B27A:  CLRF   x22
0B27C:  CLRF   x23
0B27E:  CLRF   x24
0B280:  CLRF   x25
0B282:  CLRF   x26
0B284:  CLRF   x27
0B286:  CLRF   x28
0B288:  CLRF   x29
0B28A:  CLRF   x2A
0B28C:  CLRF   x2B
0B28E:  CLRF   x2C
0B290:  CLRF   x2D
0B292:  CLRF   x2E
0B294:  CLRF   x2F
0B296:  CLRF   x30
0B298:  CLRF   x31
0B29A:  CLRF   x32
0B29C:  CLRF   x33
0B29E:  CLRF   x34
0B2A0:  CLRF   x35
0B2A2:  CLRF   x36
0B2A4:  CLRF   x37
0B2A6:  CLRF   x38
0B2A8:  CLRF   x39
0B2AA:  CLRF   x3A
0B2AC:  CLRF   x3B
0B2AE:  CLRF   x3C
0B2B0:  CLRF   x3D
0B2B2:  CLRF   x3E
0B2B4:  CLRF   x3F
0B2B6:  CLRF   x40
0B2B8:  CLRF   x41
0B2BA:  CLRF   x42
0B2BC:  CLRF   x43
0B2BE:  CLRF   x44
0B2C0:  CLRF   x45
0B2C2:  CLRF   x46
0B2C4:  CLRF   x47
0B2C6:  CLRF   x48
0B2C8:  CLRF   x49
0B2CA:  CLRF   x4A
0B2CC:  CLRF   x4B
0B2CE:  CLRF   x4C
0B2D0:  CLRF   x4D
0B2D2:  CLRF   x4E
0B2D4:  CLRF   x4F
0B2D6:  CLRF   x50
0B2D8:  CLRF   x51
0B2DA:  CLRF   x52
0B2DC:  CLRF   x53
0B2DE:  CLRF   x54
0B2E0:  CLRF   x55
0B2E2:  CLRF   x56
0B2E4:  CLRF   x57
0B2E6:  CLRF   x58
0B2E8:  CLRF   x59
0B2EA:  CLRF   x5A
0B2EC:  CLRF   x5B
0B2EE:  CLRF   x5C
0B2F0:  CLRF   x5D
0B2F2:  CLRF   x5E
0B2F4:  CLRF   x5F
0B2F6:  CLRF   x60
0B2F8:  CLRF   x61
0B2FA:  CLRF   x62
0B2FC:  CLRF   x63
0B2FE:  CLRF   x64
0B300:  CLRF   x65
0B302:  CLRF   x66
0B304:  CLRF   x67
0B306:  CLRF   x68
0B308:  CLRF   x69
0B30A:  CLRF   x6A
0B30C:  CLRF   x6B
0B30E:  CLRF   x6C
0B310:  CLRF   x6D
0B312:  CLRF   x6E
0B314:  CLRF   x6F
0B316:  CLRF   x70
0B318:  CLRF   x71
0B31A:  CLRF   x72
0B31C:  CLRF   x73
0B31E:  CLRF   x74
0B320:  CLRF   x75
0B322:  CLRF   x76
0B324:  CLRF   x77
0B326:  CLRF   x78
0B328:  CLRF   x79
0B32A:  CLRF   x7A
0B32C:  CLRF   x7B
0B32E:  CLRF   x7C
0B330:  CLRF   x7D
0B332:  CLRF   x7E
0B334:  CLRF   x7F
0B336:  CLRF   x80
0B338:  CLRF   x81
0B33A:  CLRF   x82
0B33C:  CLRF   x83
0B33E:  CLRF   x84
0B340:  CLRF   x85
0B342:  CLRF   x86
0B344:  CLRF   x87
0B346:  CLRF   x88
0B348:  CLRF   x89
0B34A:  CLRF   x8A
0B34C:  CLRF   x8B
0B34E:  CLRF   x8C
0B350:  CLRF   x8D
0B352:  CLRF   x8E
0B354:  CLRF   x8F
0B356:  CLRF   x90
0B358:  CLRF   x91
0B35A:  CLRF   x92
0B35C:  CLRF   x93
0B35E:  CLRF   x94
0B360:  CLRF   x95
0B362:  CLRF   x96
0B364:  CLRF   x97
0B366:  CLRF   x98
0B368:  CLRF   x99
0B36A:  CLRF   x9A
0B36C:  CLRF   x9B
0B36E:  CLRF   x9C
0B370:  CLRF   x9D
0B372:  CLRF   x9E
0B374:  CLRF   x9F
0B376:  CLRF   xA0
0B378:  CLRF   xA1
0B37A:  CLRF   xA2
0B37C:  CLRF   xA3
0B37E:  CLRF   xA4
0B380:  CLRF   xA5
0B382:  CLRF   xA6
0B384:  CLRF   xA7
0B386:  CLRF   xA8
0B388:  CLRF   xA9
0B38A:  CLRF   xAA
0B38C:  CLRF   xAB
0B38E:  CLRF   xAC
0B390:  CLRF   xAD
0B392:  CLRF   xAE
0B394:  CLRF   xAF
0B396:  CLRF   xB0
0B398:  CLRF   xB1
0B39A:  CLRF   xB2
0B39C:  CLRF   xB3
0B39E:  CLRF   xB4
0B3A0:  CLRF   xB5
0B3A2:  CLRF   xB6
0B3A4:  CLRF   xB7
0B3A6:  CLRF   xB8
0B3A8:  CLRF   xB9
0B3AA:  CLRF   xBA
0B3AC:  CLRF   xBB
0B3AE:  CLRF   xBC
0B3B0:  CLRF   xBD
0B3B2:  CLRF   xBE
0B3B4:  CLRF   xBF
0B3B6:  CLRF   xC0
0B3B8:  CLRF   xC1
0B3BA:  CLRF   xC2
0B3BC:  CLRF   xC3
0B3BE:  CLRF   xC4
0B3C0:  CLRF   xC5
0B3C2:  CLRF   xC6
0B3C4:  CLRF   xC7
0B3C6:  CLRF   xC8
0B3C8:  CLRF   xC9
0B3CA:  CLRF   xCA
0B3CC:  CLRF   xCB
0B3CE:  CLRF   xCC
0B3D0:  CLRF   xCD
0B3D2:  CLRF   xCE
0B3D4:  CLRF   xCF
0B3D6:  CLRF   xD0
0B3D8:  CLRF   xD1
0B3DA:  CLRF   xD2
0B3DC:  CLRF   xD3
0B3DE:  CLRF   xD4
0B3E0:  CLRF   xD5
0B3E2:  CLRF   xD6
0B3E4:  CLRF   xD7
0B3E6:  CLRF   xD8
0B3E8:  CLRF   xD9
0B3EA:  CLRF   xDA
0B3EC:  CLRF   xDB
0B3EE:  CLRF   xDC
0B3F0:  CLRF   xDD
0B3F2:  CLRF   xDE
0B3F4:  CLRF   xDF
0B3F6:  CLRF   xE0
0B3F8:  CLRF   xE1
0B3FA:  CLRF   xE2
0B3FC:  CLRF   xE3
0B3FE:  CLRF   xE4
0B400:  CLRF   xE5
0B402:  CLRF   xE6
0B404:  CLRF   xE7
0B406:  CLRF   xE8
0B408:  CLRF   xE9
0B40A:  CLRF   xEA
0B40C:  CLRF   xEB
0B40E:  CLRF   xEC
0B410:  CLRF   xED
0B412:  CLRF   xEE
0B414:  CLRF   xEF
0B416:  CLRF   xF0
0B418:  CLRF   xF1
0B41A:  CLRF   xF2
0B41C:  CLRF   xF3
0B41E:  CLRF   xF4
0B420:  CLRF   xF5
0B422:  CLRF   xF6
0B424:  CLRF   xF7
0B426:  CLRF   xF8
0B428:  CLRF   xF9
0B42A:  CLRF   xFA
0B42C:  CLRF   xFB
0B42E:  CLRF   xFC
0B430:  CLRF   xFD
0B432:  CLRF   xFE
0B434:  CLRF   xFF
0B436:  MOVLB  3
0B438:  CLRF   x00
0B43A:  CLRF   x01
0B43C:  CLRF   x02
0B43E:  CLRF   x03
0B440:  CLRF   x04
0B442:  CLRF   x05
0B444:  CLRF   x06
0B446:  CLRF   x07
0B448:  CLRF   x08
0B44A:  CLRF   x09
0B44C:  CLRF   x0A
0B44E:  CLRF   x0B
0B450:  CLRF   x0C
0B452:  CLRF   x0D
0B454:  CLRF   x0E
0B456:  CLRF   x0F
0B458:  CLRF   x10
0B45A:  CLRF   x11
0B45C:  CLRF   x12
0B45E:  CLRF   x13
0B460:  CLRF   x14
0B462:  CLRF   x15
0B464:  CLRF   x16
0B466:  CLRF   x17
0B468:  CLRF   x18
0B46A:  CLRF   x19
0B46C:  CLRF   x1A
0B46E:  CLRF   x1B
0B470:  CLRF   x1C
0B472:  CLRF   x1D
0B474:  CLRF   x1E
0B476:  CLRF   x1F
0B478:  CLRF   x20
0B47A:  CLRF   x21
0B47C:  CLRF   x22
0B47E:  CLRF   x23
0B480:  CLRF   x24
0B482:  CLRF   x25
0B484:  CLRF   x26
0B486:  CLRF   x27
0B488:  CLRF   x28
0B48A:  CLRF   x29
0B48C:  CLRF   x2A
0B48E:  CLRF   x2B
0B490:  CLRF   x2C
0B492:  CLRF   x2D
0B494:  CLRF   x2E
0B496:  CLRF   x2F
0B498:  CLRF   x30
0B49A:  CLRF   x31
0B49C:  CLRF   x32
0B49E:  CLRF   x33
0B4A0:  CLRF   x34
0B4A2:  CLRF   x35
0B4A4:  CLRF   x36
0B4A6:  CLRF   x37
0B4A8:  CLRF   x38
0B4AA:  CLRF   x39
0B4AC:  CLRF   x3A
0B4AE:  CLRF   x3B
0B4B0:  CLRF   x3C
0B4B2:  CLRF   x3D
0B4B4:  CLRF   x3E
0B4B6:  CLRF   x3F
0B4B8:  CLRF   x40
0B4BA:  CLRF   x41
0B4BC:  CLRF   x42
0B4BE:  CLRF   x43
0B4C0:  CLRF   x44
0B4C2:  CLRF   x45
0B4C4:  CLRF   x46
0B4C6:  CLRF   x47
0B4C8:  CLRF   x48
0B4CA:  CLRF   x49
0B4CC:  CLRF   x4A
0B4CE:  CLRF   x4B
0B4D0:  CLRF   x4C
0B4D2:  CLRF   x4D
0B4D4:  CLRF   x4E
0B4D6:  CLRF   x4F
0B4D8:  CLRF   x50
0B4DA:  CLRF   x51
0B4DC:  CLRF   x52
0B4DE:  CLRF   x53
0B4E0:  CLRF   x54
0B4E2:  CLRF   x55
0B4E4:  CLRF   x56
0B4E6:  CLRF   x57
0B4E8:  CLRF   x58
0B4EA:  CLRF   x59
0B4EC:  CLRF   x5A
0B4EE:  CLRF   x5B
0B4F0:  CLRF   x5C
0B4F2:  CLRF   x5D
0B4F4:  CLRF   x5E
0B4F6:  CLRF   x5F
0B4F8:  CLRF   x60
0B4FA:  CLRF   x61
0B4FC:  CLRF   x62
0B4FE:  CLRF   x63
0B500:  CLRF   x64
0B502:  CLRF   x65
0B504:  CLRF   x66
0B506:  CLRF   x67
0B508:  CLRF   x68
0B50A:  CLRF   x69
0B50C:  CLRF   x6A
0B50E:  CLRF   x6B
0B510:  CLRF   x6C
0B512:  CLRF   x6D
0B514:  CLRF   x6E
0B516:  CLRF   x6F
0B518:  CLRF   x70
0B51A:  CLRF   x71
0B51C:  CLRF   x72
0B51E:  CLRF   x73
0B520:  CLRF   x74
0B522:  CLRF   x75
0B524:  CLRF   x76
0B526:  CLRF   x77
0B528:  CLRF   x78
0B52A:  CLRF   x79
0B52C:  CLRF   x7A
0B52E:  CLRF   x7B
0B530:  CLRF   x7C
0B532:  CLRF   x7D
0B534:  CLRF   x7E
0B536:  CLRF   x7F
0B538:  CLRF   x80
0B53A:  CLRF   x81
0B53C:  CLRF   x82
0B53E:  CLRF   x83
0B540:  CLRF   x84
0B542:  CLRF   x85
0B544:  CLRF   x86
0B546:  CLRF   x87
0B548:  CLRF   x88
0B54A:  CLRF   x89
0B54C:  CLRF   x8A
0B54E:  CLRF   x8B
0B550:  CLRF   x8C
0B552:  CLRF   x8D
0B554:  CLRF   x8E
0B556:  CLRF   x8F
0B558:  CLRF   x90
0B55A:  CLRF   x91
0B55C:  CLRF   x92
0B55E:  CLRF   x93
0B560:  CLRF   x94
0B562:  CLRF   x95
0B564:  CLRF   x96
0B566:  CLRF   x97
0B568:  CLRF   x98
0B56A:  CLRF   x99
0B56C:  CLRF   x9A
0B56E:  CLRF   x9B
0B570:  CLRF   x9C
0B572:  CLRF   x9D
0B574:  CLRF   x9E
0B576:  CLRF   x9F
0B578:  CLRF   xA0
0B57A:  CLRF   xA1
0B57C:  CLRF   xA2
0B57E:  CLRF   xA3
0B580:  CLRF   xA4
0B582:  CLRF   xA5
0B584:  CLRF   xA6
0B586:  CLRF   xA7
0B588:  CLRF   xA8
0B58A:  CLRF   xA9
0B58C:  CLRF   xAA
0B58E:  CLRF   xAB
0B590:  CLRF   xAC
0B592:  CLRF   xAD
0B594:  CLRF   xAE
0B596:  CLRF   xAF
0B598:  CLRF   xB0
0B59A:  CLRF   xB1
0B59C:  CLRF   xB2
0B59E:  CLRF   xB3
0B5A0:  CLRF   xB4
0B5A2:  CLRF   xB5
0B5A4:  CLRF   xB6
0B5A6:  CLRF   xB7
0B5A8:  CLRF   xB8
0B5AA:  CLRF   xB9
0B5AC:  CLRF   xBA
0B5AE:  CLRF   xBB
0B5B0:  CLRF   xBC
0B5B2:  CLRF   xBD
0B5B4:  CLRF   xBE
0B5B6:  CLRF   xBF
0B5B8:  CLRF   xC0
0B5BA:  CLRF   xC1
0B5BC:  CLRF   xC2
0B5BE:  CLRF   xC3
0B5C0:  CLRF   xC4
0B5C2:  CLRF   xC5
0B5C4:  CLRF   xC6
0B5C6:  CLRF   xC7
0B5C8:  CLRF   xC8
0B5CA:  CLRF   xC9
0B5CC:  CLRF   xCA
0B5CE:  CLRF   xCB
0B5D0:  CLRF   xCC
0B5D2:  CLRF   xCD
0B5D4:  CLRF   xCE
0B5D6:  CLRF   xCF
0B5D8:  CLRF   xD0
0B5DA:  CLRF   xD1
0B5DC:  CLRF   xD2
0B5DE:  CLRF   xD3
0B5E0:  CLRF   xD4
0B5E2:  CLRF   xD5
0B5E4:  CLRF   xD6
0B5E6:  CLRF   xD7
0B5E8:  CLRF   xD8
0B5EA:  CLRF   xD9
0B5EC:  CLRF   xDA
0B5EE:  CLRF   xDB
0B5F0:  CLRF   xDC
0B5F2:  CLRF   xDD
0B5F4:  CLRF   xDE
0B5F6:  CLRF   xDF
0B5F8:  CLRF   xE0
0B5FA:  CLRF   xE1
0B5FC:  CLRF   xE2
0B5FE:  CLRF   xE3
0B600:  CLRF   xE4
0B602:  CLRF   xE5
0B604:  CLRF   xE6
0B606:  CLRF   xE7
0B608:  CLRF   xE8
0B60A:  CLRF   xE9
0B60C:  CLRF   xEA
0B60E:  CLRF   xEB
0B610:  CLRF   xEC
0B612:  CLRF   xED
0B614:  CLRF   xEE
0B616:  CLRF   xEF
0B618:  CLRF   xF0
0B61A:  CLRF   xF1
0B61C:  CLRF   xF2
0B61E:  CLRF   xF3
0B620:  CLRF   xF4
0B622:  CLRF   xF5
0B624:  CLRF   xF6
0B626:  CLRF   xF7
0B628:  CLRF   xF8
0B62A:  CLRF   xF9
0B62C:  CLRF   xFA
0B62E:  CLRF   xFB
0B630:  CLRF   xFC
0B632:  CLRF   xFD
0B634:  CLRF   xFE
0B636:  CLRF   xFF
0B638:  MOVLB  4
0B63A:  CLRF   x00
0B63C:  CLRF   x01
0B63E:  CLRF   x02
0B640:  CLRF   x03
0B642:  CLRF   x04
0B644:  CLRF   x05
0B646:  CLRF   x06
0B648:  CLRF   x07
0B64A:  CLRF   x08
0B64C:  CLRF   x09
0B64E:  CLRF   x0A
0B650:  CLRF   x0B
0B652:  CLRF   x0C
0B654:  CLRF   x0D
0B656:  CLRF   x0E
0B658:  CLRF   x0F
0B65A:  CLRF   x10
0B65C:  CLRF   x11
0B65E:  CLRF   x12
0B660:  CLRF   x13
0B662:  CLRF   x14
0B664:  CLRF   x15
0B666:  CLRF   x16
0B668:  CLRF   x17
0B66A:  CLRF   x18
0B66C:  CLRF   x19
0B66E:  CLRF   x1A
0B670:  CLRF   x1B
0B672:  CLRF   x1C
0B674:  CLRF   x1D
0B676:  CLRF   x1E
0B678:  CLRF   x1F
0B67A:  CLRF   x20
0B67C:  CLRF   x21
0B67E:  CLRF   x22
0B680:  CLRF   x23
0B682:  CLRF   x24
0B684:  CLRF   x25
0B686:  CLRF   x26
0B688:  CLRF   x27
0B68A:  CLRF   x28
0B68C:  CLRF   x29
0B68E:  CLRF   x2A
0B690:  CLRF   x2B
0B692:  CLRF   x2C
0B694:  CLRF   x2D
0B696:  CLRF   x2E
0B698:  CLRF   x2F
0B69A:  CLRF   x30
0B69C:  CLRF   x31
0B69E:  CLRF   x32
0B6A0:  CLRF   x33
0B6A2:  CLRF   x34
0B6A4:  CLRF   x35
0B6A6:  CLRF   x36
0B6A8:  CLRF   x37
0B6AA:  CLRF   x38
0B6AC:  CLRF   x39
0B6AE:  CLRF   x3A
0B6B0:  CLRF   x3B
0B6B2:  CLRF   x3C
0B6B4:  CLRF   x3D
0B6B6:  CLRF   x3E
0B6B8:  CLRF   x3F
0B6BA:  CLRF   x40
0B6BC:  CLRF   x41
0B6BE:  CLRF   x42
0B6C0:  CLRF   x43
0B6C2:  CLRF   x44
0B6C4:  CLRF   x45
0B6C6:  CLRF   x46
0B6C8:  CLRF   x47
0B6CA:  CLRF   x48
0B6CC:  CLRF   x49
0B6CE:  CLRF   x4A
0B6D0:  CLRF   x4B
0B6D2:  CLRF   x4C
0B6D4:  CLRF   x4D
0B6D6:  CLRF   x4E
0B6D8:  CLRF   x4F
0B6DA:  CLRF   x50
0B6DC:  CLRF   x51
0B6DE:  CLRF   x52
0B6E0:  CLRF   x53
0B6E2:  CLRF   x54
0B6E4:  CLRF   x55
0B6E6:  CLRF   x56
0B6E8:  CLRF   x57
0B6EA:  CLRF   x58
0B6EC:  CLRF   x59
0B6EE:  CLRF   x5A
0B6F0:  CLRF   x5B
0B6F2:  CLRF   x5C
0B6F4:  CLRF   x5D
0B6F6:  CLRF   x5E
0B6F8:  CLRF   x5F
0B6FA:  CLRF   x60
0B6FC:  CLRF   x61
0B6FE:  CLRF   x62
0B700:  CLRF   x63
0B702:  CLRF   x64
0B704:  CLRF   x65
0B706:  CLRF   x66
0B708:  CLRF   x67
0B70A:  CLRF   x68
0B70C:  CLRF   x69
0B70E:  CLRF   x6A
0B710:  CLRF   x6B
0B712:  CLRF   x6C
0B714:  CLRF   x6D
0B716:  CLRF   x6E
0B718:  CLRF   x6F
0B71A:  CLRF   x70
0B71C:  CLRF   x71
0B71E:  CLRF   x72
0B720:  CLRF   x73
0B722:  CLRF   x74
0B724:  CLRF   x75
0B726:  CLRF   x76
0B728:  CLRF   x77
0B72A:  CLRF   x78
0B72C:  CLRF   x79
0B72E:  CLRF   x7A
0B730:  CLRF   x7B
0B732:  CLRF   x7C
0B734:  CLRF   x7D
0B736:  CLRF   x7E
0B738:  CLRF   x7F
0B73A:  CLRF   x80
0B73C:  CLRF   x81
0B73E:  CLRF   x82
0B740:  CLRF   x83
0B742:  CLRF   x84
0B744:  CLRF   x85
0B746:  CLRF   x86
0B748:  CLRF   x87
0B74A:  CLRF   x88
0B74C:  CLRF   x89
0B74E:  CLRF   x8A
0B750:  CLRF   x8B
0B752:  CLRF   x8C
0B754:  CLRF   x8D
0B756:  CLRF   x8E
0B758:  CLRF   x8F
0B75A:  CLRF   x90
0B75C:  CLRF   x91
0B75E:  CLRF   x92
0B760:  CLRF   x93
0B762:  CLRF   x94
0B764:  CLRF   x95
0B766:  CLRF   x96
0B768:  CLRF   x97
0B76A:  CLRF   x98
0B76C:  CLRF   x99
0B76E:  CLRF   x9A
0B770:  CLRF   x9B
0B772:  CLRF   x9C
0B774:  CLRF   x9D
0B776:  CLRF   x9E
0B778:  CLRF   x9F
0B77A:  CLRF   xA0
0B77C:  CLRF   xA1
0B77E:  CLRF   xA2
0B780:  CLRF   xA3
0B782:  CLRF   xA4
0B784:  CLRF   xA5
0B786:  CLRF   xA6
0B788:  CLRF   xA7
0B78A:  CLRF   xA8
0B78C:  CLRF   xA9
0B78E:  CLRF   xAA
0B790:  CLRF   xAB
0B792:  CLRF   xAC
0B794:  CLRF   xAD
0B796:  CLRF   xAE
0B798:  CLRF   xAF
0B79A:  CLRF   xB0
0B79C:  CLRF   xB1
0B79E:  CLRF   xB2
0B7A0:  CLRF   xB3
0B7A2:  CLRF   xB4
0B7A4:  CLRF   xB5
0B7A6:  CLRF   xB6
0B7A8:  CLRF   xB7
0B7AA:  CLRF   xB8
0B7AC:  CLRF   xB9
0B7AE:  CLRF   xBA
0B7B0:  CLRF   xBB
0B7B2:  CLRF   xBC
0B7B4:  CLRF   xBD
0B7B6:  CLRF   xBE
0B7B8:  CLRF   xBF
0B7BA:  CLRF   xC0
0B7BC:  CLRF   xC1
0B7BE:  CLRF   xC2
0B7C0:  CLRF   xC3
0B7C2:  CLRF   xC4
0B7C4:  CLRF   xC5
0B7C6:  CLRF   xC6
0B7C8:  CLRF   xC7
0B7CA:  CLRF   xC8
0B7CC:  CLRF   xC9
0B7CE:  CLRF   xCA
0B7D0:  CLRF   xCB
0B7D2:  CLRF   xCC
0B7D4:  CLRF   xCD
0B7D6:  CLRF   xCE
0B7D8:  CLRF   xCF
0B7DA:  CLRF   xD0
0B7DC:  CLRF   xD1
0B7DE:  CLRF   xD2
0B7E0:  CLRF   xD3
0B7E2:  CLRF   xD4
0B7E4:  CLRF   xD5
0B7E6:  CLRF   xD6
0B7E8:  CLRF   xD7
0B7EA:  CLRF   xD8
0B7EC:  CLRF   xD9
0B7EE:  CLRF   xDA
0B7F0:  CLRF   xDB
0B7F2:  CLRF   xDC
0B7F4:  CLRF   xDD
0B7F6:  CLRF   xDE
0B7F8:  CLRF   xDF
0B7FA:  CLRF   xE0
0B7FC:  CLRF   xE1
0B7FE:  CLRF   xE2
0B800:  CLRF   xE3
0B802:  CLRF   xE4
0B804:  CLRF   xE5
0B806:  CLRF   xE6
0B808:  CLRF   xE7
0B80A:  CLRF   xE8
0B80C:  CLRF   xE9
0B80E:  CLRF   xEA
0B810:  CLRF   xEB
0B812:  CLRF   xEC
0B814:  CLRF   xED
0B816:  CLRF   xEE
0B818:  CLRF   xEF
0B81A:  CLRF   xF0
0B81C:  CLRF   xF1
0B81E:  CLRF   xF2
0B820:  CLRF   xF3
0B822:  CLRF   xF4
0B824:  CLRF   xF5
0B826:  CLRF   xF6
0B828:  CLRF   xF7
0B82A:  CLRF   xF8
0B82C:  CLRF   xF9
0B82E:  CLRF   xFA
0B830:  CLRF   xFB
0B832:  CLRF   xFC
0B834:  CLRF   xFD
0B836:  CLRF   xFE
0B838:  CLRF   xFF
0B83A:  MOVLB  5
0B83C:  CLRF   x00
0B83E:  CLRF   x01
0B840:  CLRF   x02
0B842:  CLRF   x03
0B844:  CLRF   x04
0B846:  CLRF   x05
0B848:  CLRF   x06
0B84A:  CLRF   x07
0B84C:  CLRF   x08
0B84E:  CLRF   x09
0B850:  CLRF   x0A
0B852:  CLRF   x0B
0B854:  CLRF   x0C
0B856:  CLRF   x0D
0B858:  CLRF   x0E
0B85A:  CLRF   x0F
0B85C:  CLRF   x10
0B85E:  CLRF   x11
0B860:  CLRF   x12
0B862:  CLRF   x13
0B864:  CLRF   x14
0B866:  CLRF   x15
0B868:  CLRF   x16
0B86A:  CLRF   x17
0B86C:  CLRF   x18
0B86E:  CLRF   x19
0B870:  CLRF   x1A
0B872:  CLRF   x1B
0B874:  CLRF   x1C
0B876:  CLRF   x1D
0B878:  CLRF   x1E
0B87A:  CLRF   x1F
0B87C:  CLRF   x20
0B87E:  CLRF   x21
0B880:  CLRF   x22
0B882:  CLRF   x23
0B884:  CLRF   x24
0B886:  CLRF   x25
0B888:  CLRF   x26
0B88A:  CLRF   x27
0B88C:  CLRF   x28
0B88E:  CLRF   x29
0B890:  CLRF   x2A
0B892:  CLRF   x2B
0B894:  CLRF   x2C
0B896:  CLRF   x2D
0B898:  CLRF   x2E
0B89A:  CLRF   x2F
0B89C:  CLRF   x30
0B89E:  CLRF   x31
0B8A0:  CLRF   x32
0B8A2:  CLRF   x33
0B8A4:  CLRF   x34
0B8A6:  CLRF   x35
0B8A8:  CLRF   x36
0B8AA:  CLRF   x37
0B8AC:  CLRF   x38
0B8AE:  CLRF   x39
0B8B0:  CLRF   x3A
0B8B2:  CLRF   x3B
0B8B4:  CLRF   x3C
0B8B6:  CLRF   x3D
0B8B8:  CLRF   x3E
0B8BA:  CLRF   x3F
0B8BC:  CLRF   x40
0B8BE:  CLRF   x41
0B8C0:  CLRF   x42
0B8C2:  CLRF   x43
0B8C4:  CLRF   x44
0B8C6:  CLRF   x45
0B8C8:  CLRF   x46
0B8CA:  CLRF   x47
0B8CC:  CLRF   x48
0B8CE:  CLRF   x49
0B8D0:  CLRF   x4A
0B8D2:  CLRF   x4B
0B8D4:  CLRF   x4C
0B8D6:  CLRF   x4D
0B8D8:  CLRF   x4E
0B8DA:  CLRF   x4F
0B8DC:  CLRF   x50
0B8DE:  CLRF   x51
0B8E0:  CLRF   x52
0B8E2:  CLRF   x53
0B8E4:  CLRF   x54
0B8E6:  CLRF   x55
0B8E8:  CLRF   x56
0B8EA:  CLRF   x57
0B8EC:  CLRF   x58
0B8EE:  CLRF   x59
0B8F0:  CLRF   x5A
0B8F2:  CLRF   x5B
0B8F4:  CLRF   x5C
0B8F6:  CLRF   x5D
0B8F8:  CLRF   x5E
0B8FA:  CLRF   x5F
0B8FC:  CLRF   x60
0B8FE:  CLRF   x61
0B900:  CLRF   x62
0B902:  CLRF   x63
0B904:  CLRF   x64
0B906:  CLRF   x65
0B908:  CLRF   x66
0B90A:  CLRF   x67
0B90C:  CLRF   x68
0B90E:  CLRF   x69
0B910:  CLRF   x6A
0B912:  CLRF   x6B
0B914:  CLRF   x6C
0B916:  CLRF   x6D
0B918:  CLRF   x6E
0B91A:  CLRF   x6F
0B91C:  CLRF   x70
0B91E:  CLRF   x71
0B920:  CLRF   x72
0B922:  CLRF   x73
0B924:  CLRF   x74
0B926:  CLRF   x75
0B928:  CLRF   x76
0B92A:  CLRF   x77
0B92C:  CLRF   x78
0B92E:  CLRF   x79
0B930:  CLRF   x7A
0B932:  CLRF   x7B
0B934:  CLRF   x7C
0B936:  CLRF   x7D
0B938:  CLRF   x7E
0B93A:  CLRF   x7F
0B93C:  CLRF   x80
0B93E:  CLRF   x81
0B940:  CLRF   x82
0B942:  CLRF   x83
0B944:  CLRF   x84
0B946:  CLRF   x85
0B948:  CLRF   x86
0B94A:  CLRF   x87
0B94C:  CLRF   x88
0B94E:  CLRF   x89
0B950:  CLRF   x8A
0B952:  CLRF   x8B
0B954:  CLRF   x8C
0B956:  CLRF   x8D
0B958:  CLRF   x8E
0B95A:  CLRF   x8F
0B95C:  CLRF   x90
0B95E:  CLRF   x91
0B960:  CLRF   x92
0B962:  CLRF   x93
0B964:  CLRF   x94
0B966:  CLRF   x95
0B968:  CLRF   x96
0B96A:  CLRF   x97
0B96C:  CLRF   x98
0B96E:  CLRF   x99
0B970:  CLRF   x9A
0B972:  CLRF   x9B
0B974:  CLRF   x9C
0B976:  CLRF   x9D
0B978:  CLRF   x9E
0B97A:  CLRF   x9F
0B97C:  CLRF   xA0
0B97E:  CLRF   xA1
0B980:  CLRF   xA2
0B982:  CLRF   xA3
0B984:  CLRF   xA4
0B986:  CLRF   xA5
0B988:  CLRF   xA6
0B98A:  CLRF   xA7
0B98C:  CLRF   xA8
0B98E:  CLRF   xA9
0B990:  CLRF   xAA
0B992:  CLRF   xAB
0B994:  CLRF   xAC
0B996:  CLRF   xAD
0B998:  CLRF   xAE
0B99A:  CLRF   xAF
0B99C:  CLRF   xB0
0B99E:  CLRF   xB1
0B9A0:  CLRF   xB2
0B9A2:  CLRF   xB3
0B9A4:  CLRF   xB4
0B9A6:  CLRF   xB5
0B9A8:  CLRF   xB6
0B9AA:  CLRF   xB7
0B9AC:  CLRF   xB8
0B9AE:  CLRF   xB9
....................     port1.port_num = 1;
0B9B0:  MOVLW  01
0B9B2:  MOVLB  1
0B9B4:  MOVWF  xBA
....................     port1.sweep_step = 0;
0B9B6:  CLRF   xBC
0B9B8:  CLRF   xBB
....................     port1.active = 1;
0B9BA:  MOVLB  5
0B9BC:  BSF    xB9.0
.................... 
....................     // Init Port2
....................     sweep_debug_config_t port2 = {0};
0B9BE:  CLRF   xBA
0B9C0:  CLRF   xBB
0B9C2:  CLRF   xBC
0B9C4:  CLRF   xBD
0B9C6:  CLRF   xBE
0B9C8:  CLRF   xBF
0B9CA:  CLRF   xC0
0B9CC:  CLRF   xC1
0B9CE:  CLRF   xC2
0B9D0:  CLRF   xC3
0B9D2:  CLRF   xC4
0B9D4:  CLRF   xC5
0B9D6:  CLRF   xC6
0B9D8:  CLRF   xC7
0B9DA:  CLRF   xC8
0B9DC:  CLRF   xC9
0B9DE:  CLRF   xCA
0B9E0:  CLRF   xCB
0B9E2:  CLRF   xCC
0B9E4:  CLRF   xCD
0B9E6:  CLRF   xCE
0B9E8:  CLRF   xCF
0B9EA:  CLRF   xD0
0B9EC:  CLRF   xD1
0B9EE:  CLRF   xD2
0B9F0:  CLRF   xD3
0B9F2:  CLRF   xD4
0B9F4:  CLRF   xD5
0B9F6:  CLRF   xD6
0B9F8:  CLRF   xD7
0B9FA:  CLRF   xD8
0B9FC:  CLRF   xD9
0B9FE:  CLRF   xDA
0BA00:  CLRF   xDB
0BA02:  CLRF   xDC
0BA04:  CLRF   xDD
0BA06:  CLRF   xDE
0BA08:  CLRF   xDF
0BA0A:  CLRF   xE0
0BA0C:  CLRF   xE1
0BA0E:  CLRF   xE2
0BA10:  CLRF   xE3
0BA12:  CLRF   xE4
0BA14:  CLRF   xE5
0BA16:  CLRF   xE6
0BA18:  CLRF   xE7
0BA1A:  CLRF   xE8
0BA1C:  CLRF   xE9
0BA1E:  CLRF   xEA
0BA20:  CLRF   xEB
0BA22:  CLRF   xEC
0BA24:  CLRF   xED
0BA26:  CLRF   xEE
0BA28:  CLRF   xEF
0BA2A:  CLRF   xF0
0BA2C:  CLRF   xF1
0BA2E:  CLRF   xF2
0BA30:  CLRF   xF3
0BA32:  CLRF   xF4
0BA34:  CLRF   xF5
0BA36:  CLRF   xF6
0BA38:  CLRF   xF7
0BA3A:  CLRF   xF8
0BA3C:  CLRF   xF9
0BA3E:  CLRF   xFA
0BA40:  CLRF   xFB
0BA42:  CLRF   xFC
0BA44:  CLRF   xFD
0BA46:  CLRF   xFE
0BA48:  CLRF   xFF
0BA4A:  MOVLB  6
0BA4C:  CLRF   x00
0BA4E:  CLRF   x01
0BA50:  CLRF   x02
0BA52:  CLRF   x03
0BA54:  CLRF   x04
0BA56:  CLRF   x05
0BA58:  CLRF   x06
0BA5A:  CLRF   x07
0BA5C:  CLRF   x08
0BA5E:  CLRF   x09
0BA60:  CLRF   x0A
0BA62:  CLRF   x0B
0BA64:  CLRF   x0C
0BA66:  CLRF   x0D
0BA68:  CLRF   x0E
0BA6A:  CLRF   x0F
0BA6C:  CLRF   x10
0BA6E:  CLRF   x11
0BA70:  CLRF   x12
0BA72:  CLRF   x13
0BA74:  CLRF   x14
0BA76:  CLRF   x15
0BA78:  CLRF   x16
0BA7A:  CLRF   x17
0BA7C:  CLRF   x18
0BA7E:  CLRF   x19
0BA80:  CLRF   x1A
0BA82:  CLRF   x1B
0BA84:  CLRF   x1C
0BA86:  CLRF   x1D
0BA88:  CLRF   x1E
0BA8A:  CLRF   x1F
0BA8C:  CLRF   x20
0BA8E:  CLRF   x21
0BA90:  CLRF   x22
0BA92:  CLRF   x23
0BA94:  CLRF   x24
0BA96:  CLRF   x25
0BA98:  CLRF   x26
0BA9A:  CLRF   x27
0BA9C:  CLRF   x28
0BA9E:  CLRF   x29
0BAA0:  CLRF   x2A
0BAA2:  CLRF   x2B
0BAA4:  CLRF   x2C
0BAA6:  CLRF   x2D
0BAA8:  CLRF   x2E
0BAAA:  CLRF   x2F
0BAAC:  CLRF   x30
0BAAE:  CLRF   x31
0BAB0:  CLRF   x32
0BAB2:  CLRF   x33
0BAB4:  CLRF   x34
0BAB6:  CLRF   x35
0BAB8:  CLRF   x36
0BABA:  CLRF   x37
0BABC:  CLRF   x38
0BABE:  CLRF   x39
0BAC0:  CLRF   x3A
0BAC2:  CLRF   x3B
0BAC4:  CLRF   x3C
0BAC6:  CLRF   x3D
0BAC8:  CLRF   x3E
0BACA:  CLRF   x3F
0BACC:  CLRF   x40
0BACE:  CLRF   x41
0BAD0:  CLRF   x42
0BAD2:  CLRF   x43
0BAD4:  CLRF   x44
0BAD6:  CLRF   x45
0BAD8:  CLRF   x46
0BADA:  CLRF   x47
0BADC:  CLRF   x48
0BADE:  CLRF   x49
0BAE0:  CLRF   x4A
0BAE2:  CLRF   x4B
0BAE4:  CLRF   x4C
0BAE6:  CLRF   x4D
0BAE8:  CLRF   x4E
0BAEA:  CLRF   x4F
0BAEC:  CLRF   x50
0BAEE:  CLRF   x51
0BAF0:  CLRF   x52
0BAF2:  CLRF   x53
0BAF4:  CLRF   x54
0BAF6:  CLRF   x55
0BAF8:  CLRF   x56
0BAFA:  CLRF   x57
0BAFC:  CLRF   x58
0BAFE:  CLRF   x59
0BB00:  CLRF   x5A
0BB02:  CLRF   x5B
0BB04:  CLRF   x5C
0BB06:  CLRF   x5D
0BB08:  CLRF   x5E
0BB0A:  CLRF   x5F
0BB0C:  CLRF   x60
0BB0E:  CLRF   x61
0BB10:  CLRF   x62
0BB12:  CLRF   x63
0BB14:  CLRF   x64
0BB16:  CLRF   x65
0BB18:  CLRF   x66
0BB1A:  CLRF   x67
0BB1C:  CLRF   x68
0BB1E:  CLRF   x69
0BB20:  CLRF   x6A
0BB22:  CLRF   x6B
0BB24:  CLRF   x6C
0BB26:  CLRF   x6D
0BB28:  CLRF   x6E
0BB2A:  CLRF   x6F
0BB2C:  CLRF   x70
0BB2E:  CLRF   x71
0BB30:  CLRF   x72
0BB32:  CLRF   x73
0BB34:  CLRF   x74
0BB36:  CLRF   x75
0BB38:  CLRF   x76
0BB3A:  CLRF   x77
0BB3C:  CLRF   x78
0BB3E:  CLRF   x79
0BB40:  CLRF   x7A
0BB42:  CLRF   x7B
0BB44:  CLRF   x7C
0BB46:  CLRF   x7D
0BB48:  CLRF   x7E
0BB4A:  CLRF   x7F
0BB4C:  CLRF   x80
0BB4E:  CLRF   x81
0BB50:  CLRF   x82
0BB52:  CLRF   x83
0BB54:  CLRF   x84
0BB56:  CLRF   x85
0BB58:  CLRF   x86
0BB5A:  CLRF   x87
0BB5C:  CLRF   x88
0BB5E:  CLRF   x89
0BB60:  CLRF   x8A
0BB62:  CLRF   x8B
0BB64:  CLRF   x8C
0BB66:  CLRF   x8D
0BB68:  CLRF   x8E
0BB6A:  CLRF   x8F
0BB6C:  CLRF   x90
0BB6E:  CLRF   x91
0BB70:  CLRF   x92
0BB72:  CLRF   x93
0BB74:  CLRF   x94
0BB76:  CLRF   x95
0BB78:  CLRF   x96
0BB7A:  CLRF   x97
0BB7C:  CLRF   x98
0BB7E:  CLRF   x99
0BB80:  CLRF   x9A
0BB82:  CLRF   x9B
0BB84:  CLRF   x9C
0BB86:  CLRF   x9D
0BB88:  CLRF   x9E
0BB8A:  CLRF   x9F
0BB8C:  CLRF   xA0
0BB8E:  CLRF   xA1
0BB90:  CLRF   xA2
0BB92:  CLRF   xA3
0BB94:  CLRF   xA4
0BB96:  CLRF   xA5
0BB98:  CLRF   xA6
0BB9A:  CLRF   xA7
0BB9C:  CLRF   xA8
0BB9E:  CLRF   xA9
0BBA0:  CLRF   xAA
0BBA2:  CLRF   xAB
0BBA4:  CLRF   xAC
0BBA6:  CLRF   xAD
0BBA8:  CLRF   xAE
0BBAA:  CLRF   xAF
0BBAC:  CLRF   xB0
0BBAE:  CLRF   xB1
0BBB0:  CLRF   xB2
0BBB2:  CLRF   xB3
0BBB4:  CLRF   xB4
0BBB6:  CLRF   xB5
0BBB8:  CLRF   xB6
0BBBA:  CLRF   xB7
0BBBC:  CLRF   xB8
0BBBE:  CLRF   xB9
0BBC0:  CLRF   xBA
0BBC2:  CLRF   xBB
0BBC4:  CLRF   xBC
0BBC6:  CLRF   xBD
0BBC8:  CLRF   xBE
0BBCA:  CLRF   xBF
0BBCC:  CLRF   xC0
0BBCE:  CLRF   xC1
0BBD0:  CLRF   xC2
0BBD2:  CLRF   xC3
0BBD4:  CLRF   xC4
0BBD6:  CLRF   xC5
0BBD8:  CLRF   xC6
0BBDA:  CLRF   xC7
0BBDC:  CLRF   xC8
0BBDE:  CLRF   xC9
0BBE0:  CLRF   xCA
0BBE2:  CLRF   xCB
0BBE4:  CLRF   xCC
0BBE6:  CLRF   xCD
0BBE8:  CLRF   xCE
0BBEA:  CLRF   xCF
0BBEC:  CLRF   xD0
0BBEE:  CLRF   xD1
0BBF0:  CLRF   xD2
0BBF2:  CLRF   xD3
0BBF4:  CLRF   xD4
0BBF6:  CLRF   xD5
0BBF8:  CLRF   xD6
0BBFA:  CLRF   xD7
0BBFC:  CLRF   xD8
0BBFE:  CLRF   xD9
0BC00:  CLRF   xDA
0BC02:  CLRF   xDB
0BC04:  CLRF   xDC
0BC06:  CLRF   xDD
0BC08:  CLRF   xDE
0BC0A:  CLRF   xDF
0BC0C:  CLRF   xE0
0BC0E:  CLRF   xE1
0BC10:  CLRF   xE2
0BC12:  CLRF   xE3
0BC14:  CLRF   xE4
0BC16:  CLRF   xE5
0BC18:  CLRF   xE6
0BC1A:  CLRF   xE7
0BC1C:  CLRF   xE8
0BC1E:  CLRF   xE9
0BC20:  CLRF   xEA
0BC22:  CLRF   xEB
0BC24:  CLRF   xEC
0BC26:  CLRF   xED
0BC28:  CLRF   xEE
0BC2A:  CLRF   xEF
0BC2C:  CLRF   xF0
0BC2E:  CLRF   xF1
0BC30:  CLRF   xF2
0BC32:  CLRF   xF3
0BC34:  CLRF   xF4
0BC36:  CLRF   xF5
0BC38:  CLRF   xF6
0BC3A:  CLRF   xF7
0BC3C:  CLRF   xF8
0BC3E:  CLRF   xF9
0BC40:  CLRF   xFA
0BC42:  CLRF   xFB
0BC44:  CLRF   xFC
0BC46:  CLRF   xFD
0BC48:  CLRF   xFE
0BC4A:  CLRF   xFF
0BC4C:  MOVLB  7
0BC4E:  CLRF   x00
0BC50:  CLRF   x01
0BC52:  CLRF   x02
0BC54:  CLRF   x03
0BC56:  CLRF   x04
0BC58:  CLRF   x05
0BC5A:  CLRF   x06
0BC5C:  CLRF   x07
0BC5E:  CLRF   x08
0BC60:  CLRF   x09
0BC62:  CLRF   x0A
0BC64:  CLRF   x0B
0BC66:  CLRF   x0C
0BC68:  CLRF   x0D
0BC6A:  CLRF   x0E
0BC6C:  CLRF   x0F
0BC6E:  CLRF   x10
0BC70:  CLRF   x11
0BC72:  CLRF   x12
0BC74:  CLRF   x13
0BC76:  CLRF   x14
0BC78:  CLRF   x15
0BC7A:  CLRF   x16
0BC7C:  CLRF   x17
0BC7E:  CLRF   x18
0BC80:  CLRF   x19
0BC82:  CLRF   x1A
0BC84:  CLRF   x1B
0BC86:  CLRF   x1C
0BC88:  CLRF   x1D
0BC8A:  CLRF   x1E
0BC8C:  CLRF   x1F
0BC8E:  CLRF   x20
0BC90:  CLRF   x21
0BC92:  CLRF   x22
0BC94:  CLRF   x23
0BC96:  CLRF   x24
0BC98:  CLRF   x25
0BC9A:  CLRF   x26
0BC9C:  CLRF   x27
0BC9E:  CLRF   x28
0BCA0:  CLRF   x29
0BCA2:  CLRF   x2A
0BCA4:  CLRF   x2B
0BCA6:  CLRF   x2C
0BCA8:  CLRF   x2D
0BCAA:  CLRF   x2E
0BCAC:  CLRF   x2F
0BCAE:  CLRF   x30
0BCB0:  CLRF   x31
0BCB2:  CLRF   x32
0BCB4:  CLRF   x33
0BCB6:  CLRF   x34
0BCB8:  CLRF   x35
0BCBA:  CLRF   x36
0BCBC:  CLRF   x37
0BCBE:  CLRF   x38
0BCC0:  CLRF   x39
0BCC2:  CLRF   x3A
0BCC4:  CLRF   x3B
0BCC6:  CLRF   x3C
0BCC8:  CLRF   x3D
0BCCA:  CLRF   x3E
0BCCC:  CLRF   x3F
0BCCE:  CLRF   x40
0BCD0:  CLRF   x41
0BCD2:  CLRF   x42
0BCD4:  CLRF   x43
0BCD6:  CLRF   x44
0BCD8:  CLRF   x45
0BCDA:  CLRF   x46
0BCDC:  CLRF   x47
0BCDE:  CLRF   x48
0BCE0:  CLRF   x49
0BCE2:  CLRF   x4A
0BCE4:  CLRF   x4B
0BCE6:  CLRF   x4C
0BCE8:  CLRF   x4D
0BCEA:  CLRF   x4E
0BCEC:  CLRF   x4F
0BCEE:  CLRF   x50
0BCF0:  CLRF   x51
0BCF2:  CLRF   x52
0BCF4:  CLRF   x53
0BCF6:  CLRF   x54
0BCF8:  CLRF   x55
0BCFA:  CLRF   x56
0BCFC:  CLRF   x57
0BCFE:  CLRF   x58
0BD00:  CLRF   x59
0BD02:  CLRF   x5A
0BD04:  CLRF   x5B
0BD06:  CLRF   x5C
0BD08:  CLRF   x5D
0BD0A:  CLRF   x5E
0BD0C:  CLRF   x5F
0BD0E:  CLRF   x60
0BD10:  CLRF   x61
0BD12:  CLRF   x62
0BD14:  CLRF   x63
0BD16:  CLRF   x64
0BD18:  CLRF   x65
0BD1A:  CLRF   x66
0BD1C:  CLRF   x67
0BD1E:  CLRF   x68
0BD20:  CLRF   x69
0BD22:  CLRF   x6A
0BD24:  CLRF   x6B
0BD26:  CLRF   x6C
0BD28:  CLRF   x6D
0BD2A:  CLRF   x6E
0BD2C:  CLRF   x6F
0BD2E:  CLRF   x70
0BD30:  CLRF   x71
0BD32:  CLRF   x72
0BD34:  CLRF   x73
0BD36:  CLRF   x74
0BD38:  CLRF   x75
0BD3A:  CLRF   x76
0BD3C:  CLRF   x77
0BD3E:  CLRF   x78
0BD40:  CLRF   x79
0BD42:  CLRF   x7A
0BD44:  CLRF   x7B
0BD46:  CLRF   x7C
0BD48:  CLRF   x7D
0BD4A:  CLRF   x7E
0BD4C:  CLRF   x7F
0BD4E:  CLRF   x80
0BD50:  CLRF   x81
0BD52:  CLRF   x82
0BD54:  CLRF   x83
0BD56:  CLRF   x84
0BD58:  CLRF   x85
0BD5A:  CLRF   x86
0BD5C:  CLRF   x87
0BD5E:  CLRF   x88
0BD60:  CLRF   x89
0BD62:  CLRF   x8A
0BD64:  CLRF   x8B
0BD66:  CLRF   x8C
0BD68:  CLRF   x8D
0BD6A:  CLRF   x8E
0BD6C:  CLRF   x8F
0BD6E:  CLRF   x90
0BD70:  CLRF   x91
0BD72:  CLRF   x92
0BD74:  CLRF   x93
0BD76:  CLRF   x94
0BD78:  CLRF   x95
0BD7A:  CLRF   x96
0BD7C:  CLRF   x97
0BD7E:  CLRF   x98
0BD80:  CLRF   x99
0BD82:  CLRF   x9A
0BD84:  CLRF   x9B
0BD86:  CLRF   x9C
0BD88:  CLRF   x9D
0BD8A:  CLRF   x9E
0BD8C:  CLRF   x9F
0BD8E:  CLRF   xA0
0BD90:  CLRF   xA1
0BD92:  CLRF   xA2
0BD94:  CLRF   xA3
0BD96:  CLRF   xA4
0BD98:  CLRF   xA5
0BD9A:  CLRF   xA6
0BD9C:  CLRF   xA7
0BD9E:  CLRF   xA8
0BDA0:  CLRF   xA9
0BDA2:  CLRF   xAA
0BDA4:  CLRF   xAB
0BDA6:  CLRF   xAC
0BDA8:  CLRF   xAD
0BDAA:  CLRF   xAE
0BDAC:  CLRF   xAF
0BDAE:  CLRF   xB0
0BDB0:  CLRF   xB1
0BDB2:  CLRF   xB2
0BDB4:  CLRF   xB3
0BDB6:  CLRF   xB4
0BDB8:  CLRF   xB5
0BDBA:  CLRF   xB6
0BDBC:  CLRF   xB7
0BDBE:  CLRF   xB8
0BDC0:  CLRF   xB9
0BDC2:  CLRF   xBA
0BDC4:  CLRF   xBB
0BDC6:  CLRF   xBC
0BDC8:  CLRF   xBD
0BDCA:  CLRF   xBE
0BDCC:  CLRF   xBF
0BDCE:  CLRF   xC0
0BDD0:  CLRF   xC1
0BDD2:  CLRF   xC2
0BDD4:  CLRF   xC3
0BDD6:  CLRF   xC4
0BDD8:  CLRF   xC5
0BDDA:  CLRF   xC6
0BDDC:  CLRF   xC7
0BDDE:  CLRF   xC8
0BDE0:  CLRF   xC9
0BDE2:  CLRF   xCA
0BDE4:  CLRF   xCB
0BDE6:  CLRF   xCC
0BDE8:  CLRF   xCD
0BDEA:  CLRF   xCE
0BDEC:  CLRF   xCF
0BDEE:  CLRF   xD0
0BDF0:  CLRF   xD1
0BDF2:  CLRF   xD2
0BDF4:  CLRF   xD3
0BDF6:  CLRF   xD4
0BDF8:  CLRF   xD5
0BDFA:  CLRF   xD6
0BDFC:  CLRF   xD7
0BDFE:  CLRF   xD8
0BE00:  CLRF   xD9
0BE02:  CLRF   xDA
0BE04:  CLRF   xDB
0BE06:  CLRF   xDC
0BE08:  CLRF   xDD
0BE0A:  CLRF   xDE
0BE0C:  CLRF   xDF
0BE0E:  CLRF   xE0
0BE10:  CLRF   xE1
0BE12:  CLRF   xE2
0BE14:  CLRF   xE3
0BE16:  CLRF   xE4
0BE18:  CLRF   xE5
0BE1A:  CLRF   xE6
0BE1C:  CLRF   xE7
0BE1E:  CLRF   xE8
0BE20:  CLRF   xE9
0BE22:  CLRF   xEA
0BE24:  CLRF   xEB
0BE26:  CLRF   xEC
0BE28:  CLRF   xED
0BE2A:  CLRF   xEE
0BE2C:  CLRF   xEF
0BE2E:  CLRF   xF0
0BE30:  CLRF   xF1
0BE32:  CLRF   xF2
0BE34:  CLRF   xF3
0BE36:  CLRF   xF4
0BE38:  CLRF   xF5
0BE3A:  CLRF   xF6
0BE3C:  CLRF   xF7
0BE3E:  CLRF   xF8
0BE40:  CLRF   xF9
0BE42:  CLRF   xFA
0BE44:  CLRF   xFB
0BE46:  CLRF   xFC
0BE48:  CLRF   xFD
0BE4A:  CLRF   xFE
0BE4C:  CLRF   xFF
0BE4E:  MOVLB  8
0BE50:  CLRF   x00
0BE52:  CLRF   x01
0BE54:  CLRF   x02
0BE56:  CLRF   x03
0BE58:  CLRF   x04
0BE5A:  CLRF   x05
0BE5C:  CLRF   x06
0BE5E:  CLRF   x07
0BE60:  CLRF   x08
0BE62:  CLRF   x09
0BE64:  CLRF   x0A
0BE66:  CLRF   x0B
0BE68:  CLRF   x0C
0BE6A:  CLRF   x0D
0BE6C:  CLRF   x0E
0BE6E:  CLRF   x0F
0BE70:  CLRF   x10
0BE72:  CLRF   x11
0BE74:  CLRF   x12
0BE76:  CLRF   x13
0BE78:  CLRF   x14
0BE7A:  CLRF   x15
0BE7C:  CLRF   x16
0BE7E:  CLRF   x17
0BE80:  CLRF   x18
0BE82:  CLRF   x19
0BE84:  CLRF   x1A
0BE86:  CLRF   x1B
0BE88:  CLRF   x1C
0BE8A:  CLRF   x1D
0BE8C:  CLRF   x1E
0BE8E:  CLRF   x1F
0BE90:  CLRF   x20
0BE92:  CLRF   x21
0BE94:  CLRF   x22
0BE96:  CLRF   x23
0BE98:  CLRF   x24
0BE9A:  CLRF   x25
0BE9C:  CLRF   x26
0BE9E:  CLRF   x27
0BEA0:  CLRF   x28
0BEA2:  CLRF   x29
0BEA4:  CLRF   x2A
0BEA6:  CLRF   x2B
0BEA8:  CLRF   x2C
0BEAA:  CLRF   x2D
0BEAC:  CLRF   x2E
0BEAE:  CLRF   x2F
0BEB0:  CLRF   x30
0BEB2:  CLRF   x31
0BEB4:  CLRF   x32
0BEB6:  CLRF   x33
0BEB8:  CLRF   x34
0BEBA:  CLRF   x35
0BEBC:  CLRF   x36
0BEBE:  CLRF   x37
0BEC0:  CLRF   x38
0BEC2:  CLRF   x39
0BEC4:  CLRF   x3A
0BEC6:  CLRF   x3B
0BEC8:  CLRF   x3C
0BECA:  CLRF   x3D
0BECC:  CLRF   x3E
0BECE:  CLRF   x3F
0BED0:  CLRF   x40
0BED2:  CLRF   x41
0BED4:  CLRF   x42
0BED6:  CLRF   x43
0BED8:  CLRF   x44
0BEDA:  CLRF   x45
0BEDC:  CLRF   x46
0BEDE:  CLRF   x47
0BEE0:  CLRF   x48
0BEE2:  CLRF   x49
0BEE4:  CLRF   x4A
0BEE6:  CLRF   x4B
0BEE8:  CLRF   x4C
0BEEA:  CLRF   x4D
0BEEC:  CLRF   x4E
0BEEE:  CLRF   x4F
0BEF0:  CLRF   x50
0BEF2:  CLRF   x51
0BEF4:  CLRF   x52
0BEF6:  CLRF   x53
0BEF8:  CLRF   x54
0BEFA:  CLRF   x55
0BEFC:  CLRF   x56
0BEFE:  CLRF   x57
0BF00:  CLRF   x58
0BF02:  CLRF   x59
0BF04:  CLRF   x5A
0BF06:  CLRF   x5B
0BF08:  CLRF   x5C
0BF0A:  CLRF   x5D
0BF0C:  CLRF   x5E
0BF0E:  CLRF   x5F
0BF10:  CLRF   x60
0BF12:  CLRF   x61
0BF14:  CLRF   x62
0BF16:  CLRF   x63
0BF18:  CLRF   x64
0BF1A:  CLRF   x65
0BF1C:  CLRF   x66
0BF1E:  CLRF   x67
0BF20:  CLRF   x68
0BF22:  CLRF   x69
0BF24:  CLRF   x6A
0BF26:  CLRF   x6B
0BF28:  CLRF   x6C
0BF2A:  CLRF   x6D
0BF2C:  CLRF   x6E
0BF2E:  CLRF   x6F
0BF30:  CLRF   x70
0BF32:  CLRF   x71
0BF34:  CLRF   x72
0BF36:  CLRF   x73
0BF38:  CLRF   x74
0BF3A:  CLRF   x75
0BF3C:  CLRF   x76
0BF3E:  CLRF   x77
0BF40:  CLRF   x78
0BF42:  CLRF   x79
0BF44:  CLRF   x7A
0BF46:  CLRF   x7B
0BF48:  CLRF   x7C
0BF4A:  CLRF   x7D
0BF4C:  CLRF   x7E
0BF4E:  CLRF   x7F
0BF50:  CLRF   x80
0BF52:  CLRF   x81
0BF54:  CLRF   x82
0BF56:  CLRF   x83
0BF58:  CLRF   x84
0BF5A:  CLRF   x85
0BF5C:  CLRF   x86
0BF5E:  CLRF   x87
0BF60:  CLRF   x88
0BF62:  CLRF   x89
0BF64:  CLRF   x8A
0BF66:  CLRF   x8B
0BF68:  CLRF   x8C
0BF6A:  CLRF   x8D
0BF6C:  CLRF   x8E
0BF6E:  CLRF   x8F
0BF70:  CLRF   x90
0BF72:  CLRF   x91
0BF74:  CLRF   x92
0BF76:  CLRF   x93
0BF78:  CLRF   x94
0BF7A:  CLRF   x95
0BF7C:  CLRF   x96
0BF7E:  CLRF   x97
0BF80:  CLRF   x98
0BF82:  CLRF   x99
0BF84:  CLRF   x9A
0BF86:  CLRF   x9B
0BF88:  CLRF   x9C
0BF8A:  CLRF   x9D
0BF8C:  CLRF   x9E
0BF8E:  CLRF   x9F
0BF90:  CLRF   xA0
0BF92:  CLRF   xA1
0BF94:  CLRF   xA2
0BF96:  CLRF   xA3
0BF98:  CLRF   xA4
0BF9A:  CLRF   xA5
0BF9C:  CLRF   xA6
0BF9E:  CLRF   xA7
0BFA0:  CLRF   xA8
0BFA2:  CLRF   xA9
0BFA4:  CLRF   xAA
0BFA6:  CLRF   xAB
0BFA8:  CLRF   xAC
0BFAA:  CLRF   xAD
0BFAC:  CLRF   xAE
0BFAE:  CLRF   xAF
0BFB0:  CLRF   xB0
0BFB2:  CLRF   xB1
0BFB4:  CLRF   xB2
0BFB6:  CLRF   xB3
0BFB8:  CLRF   xB4
0BFBA:  CLRF   xB5
0BFBC:  CLRF   xB6
0BFBE:  CLRF   xB7
0BFC0:  CLRF   xB8
0BFC2:  CLRF   xB9
0BFC4:  CLRF   xBA
0BFC6:  CLRF   xBB
0BFC8:  CLRF   xBC
0BFCA:  CLRF   xBD
0BFCC:  CLRF   xBE
0BFCE:  CLRF   xBF
0BFD0:  CLRF   xC0
0BFD2:  CLRF   xC1
0BFD4:  CLRF   xC2
0BFD6:  CLRF   xC3
0BFD8:  CLRF   xC4
0BFDA:  CLRF   xC5
0BFDC:  CLRF   xC6
0BFDE:  CLRF   xC7
0BFE0:  CLRF   xC8
0BFE2:  CLRF   xC9
0BFE4:  CLRF   xCA
0BFE6:  CLRF   xCB
0BFE8:  CLRF   xCC
0BFEA:  CLRF   xCD
0BFEC:  CLRF   xCE
0BFEE:  CLRF   xCF
0BFF0:  CLRF   xD0
0BFF2:  CLRF   xD1
0BFF4:  CLRF   xD2
0BFF6:  CLRF   xD3
0BFF8:  CLRF   xD4
0BFFA:  CLRF   xD5
0BFFC:  CLRF   xD6
0BFFE:  CLRF   xD7
0C000:  CLRF   xD8
0C002:  CLRF   xD9
0C004:  CLRF   xDA
0C006:  CLRF   xDB
0C008:  CLRF   xDC
0C00A:  CLRF   xDD
0C00C:  CLRF   xDE
0C00E:  CLRF   xDF
0C010:  CLRF   xE0
0C012:  CLRF   xE1
0C014:  CLRF   xE2
0C016:  CLRF   xE3
0C018:  CLRF   xE4
0C01A:  CLRF   xE5
0C01C:  CLRF   xE6
0C01E:  CLRF   xE7
0C020:  CLRF   xE8
0C022:  CLRF   xE9
0C024:  CLRF   xEA
0C026:  CLRF   xEB
0C028:  CLRF   xEC
0C02A:  CLRF   xED
0C02C:  CLRF   xEE
0C02E:  CLRF   xEF
0C030:  CLRF   xF0
0C032:  CLRF   xF1
0C034:  CLRF   xF2
0C036:  CLRF   xF3
0C038:  CLRF   xF4
0C03A:  CLRF   xF5
0C03C:  CLRF   xF6
0C03E:  CLRF   xF7
0C040:  CLRF   xF8
0C042:  CLRF   xF9
0C044:  CLRF   xFA
0C046:  CLRF   xFB
0C048:  CLRF   xFC
0C04A:  CLRF   xFD
0C04C:  CLRF   xFE
0C04E:  CLRF   xFF
0C050:  MOVLB  9
0C052:  CLRF   x00
0C054:  CLRF   x01
0C056:  CLRF   x02
0C058:  CLRF   x03
0C05A:  CLRF   x04
0C05C:  CLRF   x05
0C05E:  CLRF   x06
0C060:  CLRF   x07
0C062:  CLRF   x08
0C064:  CLRF   x09
0C066:  CLRF   x0A
0C068:  CLRF   x0B
0C06A:  CLRF   x0C
0C06C:  CLRF   x0D
0C06E:  CLRF   x0E
0C070:  CLRF   x0F
0C072:  CLRF   x10
0C074:  CLRF   x11
0C076:  CLRF   x12
0C078:  CLRF   x13
0C07A:  CLRF   x14
0C07C:  CLRF   x15
0C07E:  CLRF   x16
0C080:  CLRF   x17
0C082:  CLRF   x18
0C084:  CLRF   x19
0C086:  CLRF   x1A
0C088:  CLRF   x1B
0C08A:  CLRF   x1C
0C08C:  CLRF   x1D
0C08E:  CLRF   x1E
0C090:  CLRF   x1F
0C092:  CLRF   x20
0C094:  CLRF   x21
0C096:  CLRF   x22
0C098:  CLRF   x23
0C09A:  CLRF   x24
0C09C:  CLRF   x25
0C09E:  CLRF   x26
0C0A0:  CLRF   x27
0C0A2:  CLRF   x28
0C0A4:  CLRF   x29
0C0A6:  CLRF   x2A
0C0A8:  CLRF   x2B
0C0AA:  CLRF   x2C
0C0AC:  CLRF   x2D
0C0AE:  CLRF   x2E
0C0B0:  CLRF   x2F
0C0B2:  CLRF   x30
0C0B4:  CLRF   x31
0C0B6:  CLRF   x32
0C0B8:  CLRF   x33
0C0BA:  CLRF   x34
0C0BC:  CLRF   x35
0C0BE:  CLRF   x36
0C0C0:  CLRF   x37
0C0C2:  CLRF   x38
0C0C4:  CLRF   x39
0C0C6:  CLRF   x3A
0C0C8:  CLRF   x3B
0C0CA:  CLRF   x3C
0C0CC:  CLRF   x3D
0C0CE:  CLRF   x3E
0C0D0:  CLRF   x3F
0C0D2:  CLRF   x40
0C0D4:  CLRF   x41
0C0D6:  CLRF   x42
0C0D8:  CLRF   x43
0C0DA:  CLRF   x44
0C0DC:  CLRF   x45
0C0DE:  CLRF   x46
0C0E0:  CLRF   x47
0C0E2:  CLRF   x48
0C0E4:  CLRF   x49
0C0E6:  CLRF   x4A
0C0E8:  CLRF   x4B
0C0EA:  CLRF   x4C
0C0EC:  CLRF   x4D
0C0EE:  CLRF   x4E
0C0F0:  CLRF   x4F
0C0F2:  CLRF   x50
0C0F4:  CLRF   x51
0C0F6:  CLRF   x52
0C0F8:  CLRF   x53
0C0FA:  CLRF   x54
0C0FC:  CLRF   x55
0C0FE:  CLRF   x56
0C100:  CLRF   x57
0C102:  CLRF   x58
0C104:  CLRF   x59
0C106:  CLRF   x5A
0C108:  CLRF   x5B
0C10A:  CLRF   x5C
0C10C:  CLRF   x5D
0C10E:  CLRF   x5E
0C110:  CLRF   x5F
0C112:  CLRF   x60
0C114:  CLRF   x61
0C116:  CLRF   x62
0C118:  CLRF   x63
0C11A:  CLRF   x64
0C11C:  CLRF   x65
0C11E:  CLRF   x66
0C120:  CLRF   x67
0C122:  CLRF   x68
0C124:  CLRF   x69
0C126:  CLRF   x6A
0C128:  CLRF   x6B
0C12A:  CLRF   x6C
0C12C:  CLRF   x6D
0C12E:  CLRF   x6E
0C130:  CLRF   x6F
0C132:  CLRF   x70
0C134:  CLRF   x71
0C136:  CLRF   x72
0C138:  CLRF   x73
0C13A:  CLRF   x74
0C13C:  CLRF   x75
0C13E:  CLRF   x76
0C140:  CLRF   x77
0C142:  CLRF   x78
0C144:  CLRF   x79
0C146:  CLRF   x7A
0C148:  CLRF   x7B
0C14A:  CLRF   x7C
0C14C:  CLRF   x7D
0C14E:  CLRF   x7E
0C150:  CLRF   x7F
0C152:  CLRF   x80
0C154:  CLRF   x81
0C156:  CLRF   x82
0C158:  CLRF   x83
0C15A:  CLRF   x84
0C15C:  CLRF   x85
0C15E:  CLRF   x86
0C160:  CLRF   x87
0C162:  CLRF   x88
0C164:  CLRF   x89
0C166:  CLRF   x8A
0C168:  CLRF   x8B
0C16A:  CLRF   x8C
0C16C:  CLRF   x8D
0C16E:  CLRF   x8E
0C170:  CLRF   x8F
0C172:  CLRF   x90
0C174:  CLRF   x91
0C176:  CLRF   x92
0C178:  CLRF   x93
0C17A:  CLRF   x94
0C17C:  CLRF   x95
0C17E:  CLRF   x96
0C180:  CLRF   x97
0C182:  CLRF   x98
0C184:  CLRF   x99
0C186:  CLRF   x9A
0C188:  CLRF   x9B
0C18A:  CLRF   x9C
0C18C:  CLRF   x9D
0C18E:  CLRF   x9E
0C190:  CLRF   x9F
0C192:  CLRF   xA0
0C194:  CLRF   xA1
0C196:  CLRF   xA2
0C198:  CLRF   xA3
0C19A:  CLRF   xA4
0C19C:  CLRF   xA5
0C19E:  CLRF   xA6
0C1A0:  CLRF   xA7
0C1A2:  CLRF   xA8
0C1A4:  CLRF   xA9
0C1A6:  CLRF   xAA
0C1A8:  CLRF   xAB
0C1AA:  CLRF   xAC
0C1AC:  CLRF   xAD
0C1AE:  CLRF   xAE
0C1B0:  CLRF   xAF
0C1B2:  CLRF   xB0
0C1B4:  CLRF   xB1
0C1B6:  CLRF   xB2
0C1B8:  CLRF   xB3
0C1BA:  CLRF   xB4
0C1BC:  CLRF   xB5
0C1BE:  CLRF   xB6
0C1C0:  CLRF   xB7
0C1C2:  CLRF   xB8
0C1C4:  CLRF   xB9
....................     port2.port_num = 2; 
0C1C6:  MOVLW  02
0C1C8:  MOVLB  5
0C1CA:  MOVWF  xBA
....................     port2.sweep_step = 0;
0C1CC:  CLRF   xBC
0C1CE:  CLRF   xBB
....................     port2.active = 1;
0C1D0:  MOVLB  9
0C1D2:  BSF    xB9.0
.................... 
....................     int16 count = 1;
....................     iv_env_t measured_data = create_meas_data();
0C1D4:  CLRF   xBB
0C1D6:  MOVLW  01
0C1D8:  MOVWF  xBA
0C1DA:  MOVLB  0
0C1DC:  CALL   90E2
0C1E0:  MOVFF  02,03
0C1E4:  MOVF   01,W
0C1E6:  MOVWF  FE1
0C1E8:  MOVFF  03,FE2
0C1EC:  MOVLW  09
0C1EE:  MOVWF  FEA
0C1F0:  MOVLW  BC
0C1F2:  MOVWF  FE9
0C1F4:  MOVLW  0C
0C1F6:  MOVWF  01
0C1F8:  MOVFF  FE6,FEE
0C1FC:  DECFSZ 01,F
0C1FE:  GOTO   C1F8
....................     while (port1.active || port2.active)
0C202:  MOVLB  5
0C204:  BTFSS  xB9.0
0C206:  BRA    C20E
0C208:  MOVLB  0
0C20A:  GOTO   C21E
0C20E:  MOVLB  0
0C210:  MOVLB  9
0C212:  BTFSC  xB9.0
0C214:  BRA    C21C
0C216:  MOVLB  0
0C218:  GOTO   C4FA
0C21C:  MOVLB  0
....................     {
....................         mcp4901_1_write(count);
0C21E:  MOVFF  9BB,9CE
0C222:  MOVFF  9BA,9CD
0C226:  CALL   2872
....................         mcp4901_2_write(count);
0C22A:  MOVFF  9BB,9CE
0C22E:  MOVFF  9BA,9CD
0C232:  CALL   28B0
....................         delay_us(10); 
0C236:  MOVLW  0D
0C238:  MOVWF  00
0C23A:  DECFSZ 00,F
0C23C:  BRA    C23A
....................         if (port1.active) {
0C23E:  MOVLB  5
0C240:  BTFSC  xB9.0
0C242:  BRA    C24A
0C244:  MOVLB  0
0C246:  GOTO   C39A
0C24A:  MOVLB  0
....................             unsigned int32 ans = ad7490_read(ADC_CIGS1_CURR);
0C24C:  MOVLW  01
0C24E:  MOVLB  9
0C250:  MOVWF  xDF
0C252:  MOVLB  0
0C254:  CALL   24C2
0C258:  MOVLB  9
0C25A:  CLRF   xCB
0C25C:  CLRF   xCA
0C25E:  MOVFF  02,9C9
0C262:  MOVFF  01,9C8
0C266:  MOVLB  0
....................             ans += ad7490_read(ADC_CIGS1_CURR);
0C268:  MOVLW  01
0C26A:  MOVLB  9
0C26C:  MOVWF  xDF
0C26E:  MOVLB  0
0C270:  CALL   24C2
0C274:  MOVFF  02,03
0C278:  MOVF   01,W
0C27A:  MOVLB  9
0C27C:  ADDWF  xC8,F
0C27E:  MOVF   03,W
0C280:  ADDWFC xC9,F
0C282:  MOVLW  00
0C284:  ADDWFC xCA,F
0C286:  MOVLW  00
0C288:  ADDWFC xCB,F
....................             ans = ans/2;
0C28A:  BCF    FD8.0
0C28C:  RRCF   xCB,F
0C28E:  RRCF   xCA,F
0C290:  RRCF   xC9,F
0C292:  RRCF   xC8,F
....................             port1.data_buffer[count].voltage = ad7490_read(ADC_CIGS1_AMP);
0C294:  RLCF   xBA,W
0C296:  MOVWF  02
0C298:  RLCF   xBB,W
0C29A:  MOVWF  03
0C29C:  RLCF   02,F
0C29E:  RLCF   03,F
0C2A0:  MOVLW  FC
0C2A2:  ANDWF  02,F
0C2A4:  MOVF   02,W
0C2A6:  ADDLW  BD
0C2A8:  MOVWF  01
0C2AA:  MOVLW  01
0C2AC:  ADDWFC 03,F
0C2AE:  MOVF   01,W
0C2B0:  MOVWF  xCF
0C2B2:  MOVFF  03,9D0
0C2B6:  MOVLW  02
0C2B8:  MOVWF  xDF
0C2BA:  MOVLB  0
0C2BC:  CALL   24C2
0C2C0:  MOVFF  9D0,FEA
0C2C4:  MOVFF  9CF,FE9
0C2C8:  MOVFF  02,FEC
0C2CC:  MOVF   FED,F
0C2CE:  MOVFF  01,FEF
....................             port1.data_buffer[count].current = ans;
0C2D2:  MOVLB  9
0C2D4:  RLCF   xBA,W
0C2D6:  MOVWF  02
0C2D8:  RLCF   xBB,W
0C2DA:  MOVWF  03
0C2DC:  RLCF   02,F
0C2DE:  RLCF   03,F
0C2E0:  MOVLW  FC
0C2E2:  ANDWF  02,F
0C2E4:  MOVF   02,W
0C2E6:  ADDLW  03
0C2E8:  MOVWF  xCD
0C2EA:  MOVLW  00
0C2EC:  ADDWFC 03,W
0C2EE:  MOVWF  xCE
0C2F0:  MOVLW  02
0C2F2:  ADDWF  xCD,W
0C2F4:  MOVWF  01
0C2F6:  MOVLW  00
0C2F8:  ADDWFC xCE,W
0C2FA:  MOVWF  03
0C2FC:  MOVF   01,W
0C2FE:  ADDLW  BA
0C300:  MOVWF  FE9
0C302:  MOVLW  01
0C304:  ADDWFC 03,W
0C306:  MOVWF  FEA
0C308:  MOVFF  9C8,FEF
0C30C:  MOVFF  9C9,FEC
0C310:  MOVF   FED,F
....................             port1.sweep_step = count + 1; 
0C312:  MOVLW  01
0C314:  ADDWF  xBA,W
0C316:  MOVLB  1
0C318:  MOVWF  xBB
0C31A:  MOVLW  00
0C31C:  MOVLB  9
0C31E:  ADDWFC xBB,W
0C320:  MOVLB  1
0C322:  MOVWF  xBC
....................             if (port1.data_buffer[count].current < curr_limit) {
0C324:  MOVLB  9
0C326:  RLCF   xBA,W
0C328:  MOVWF  02
0C32A:  RLCF   xBB,W
0C32C:  MOVWF  03
0C32E:  RLCF   02,F
0C330:  RLCF   03,F
0C332:  MOVLW  FC
0C334:  ANDWF  02,F
0C336:  MOVF   02,W
0C338:  ADDLW  03
0C33A:  MOVWF  xCD
0C33C:  MOVLW  00
0C33E:  ADDWFC 03,W
0C340:  MOVWF  xCE
0C342:  MOVLW  02
0C344:  ADDWF  xCD,W
0C346:  MOVWF  01
0C348:  MOVLW  00
0C34A:  ADDWFC xCE,W
0C34C:  MOVWF  03
0C34E:  MOVF   01,W
0C350:  ADDLW  BA
0C352:  MOVWF  FE9
0C354:  MOVLW  01
0C356:  ADDWFC 03,W
0C358:  MOVWF  FEA
0C35A:  MOVFF  FEC,9CE
0C35E:  MOVF   FED,F
0C360:  MOVFF  FEF,9CD
0C364:  MOVF   xCE,W
0C366:  MOVLB  1
0C368:  SUBWF  xB9,W
0C36A:  BTFSC  FD8.0
0C36C:  BRA    C374
0C36E:  MOVLB  0
0C370:  GOTO   C39A
0C374:  MOVLB  0
0C376:  BTFSS  FD8.2
0C378:  GOTO   C390
0C37C:  MOVLB  1
0C37E:  MOVF   xB8,W
0C380:  MOVLB  9
0C382:  SUBWF  xCD,W
0C384:  BTFSS  FD8.0
0C386:  BRA    C38E
0C388:  MOVLB  0
0C38A:  GOTO   C39A
0C38E:  MOVLB  0
....................                 port1.active = 0;
0C390:  MOVLB  5
0C392:  BCF    xB9.0
....................                 disconnect_port1();
0C394:  MOVLB  0
0C396:  CALL   9164
....................             }
....................         }
....................         if (port2.active) {
0C39A:  MOVLB  9
0C39C:  BTFSC  xB9.0
0C39E:  BRA    C3A6
0C3A0:  MOVLB  0
0C3A2:  GOTO   C4CA
0C3A6:  MOVLB  0
....................             port2.data_buffer[count].voltage = ad7490_read(ADC_CIGS2_AMP);
0C3A8:  MOVLB  9
0C3AA:  RLCF   xBA,W
0C3AC:  MOVWF  02
0C3AE:  RLCF   xBB,W
0C3B0:  MOVWF  03
0C3B2:  RLCF   02,F
0C3B4:  RLCF   03,F
0C3B6:  MOVLW  FC
0C3B8:  ANDWF  02,F
0C3BA:  MOVF   02,W
0C3BC:  ADDLW  BD
0C3BE:  MOVWF  01
0C3C0:  MOVLW  05
0C3C2:  ADDWFC 03,F
0C3C4:  MOVF   01,W
0C3C6:  MOVWF  xCF
0C3C8:  MOVFF  03,9D0
0C3CC:  MOVLW  06
0C3CE:  MOVWF  xDF
0C3D0:  MOVLB  0
0C3D2:  CALL   24C2
0C3D6:  MOVFF  9D0,FEA
0C3DA:  MOVFF  9CF,FE9
0C3DE:  MOVFF  02,FEC
0C3E2:  MOVF   FED,F
0C3E4:  MOVFF  01,FEF
....................             port2.data_buffer[count].current = ad7490_read(ADC_CIGS2_CURR);
0C3E8:  MOVLB  9
0C3EA:  RLCF   xBA,W
0C3EC:  MOVWF  02
0C3EE:  RLCF   xBB,W
0C3F0:  MOVWF  03
0C3F2:  RLCF   02,F
0C3F4:  RLCF   03,F
0C3F6:  MOVLW  FC
0C3F8:  ANDWF  02,F
0C3FA:  MOVF   02,W
0C3FC:  ADDLW  03
0C3FE:  MOVWF  xCD
0C400:  MOVLW  00
0C402:  ADDWFC 03,W
0C404:  MOVWF  xCE
0C406:  MOVLW  02
0C408:  ADDWF  xCD,W
0C40A:  MOVWF  01
0C40C:  MOVLW  00
0C40E:  ADDWFC xCE,W
0C410:  MOVWF  03
0C412:  MOVF   01,W
0C414:  ADDLW  BA
0C416:  MOVWF  01
0C418:  MOVLW  05
0C41A:  ADDWFC 03,F
0C41C:  MOVF   01,W
0C41E:  MOVWF  xCD
0C420:  MOVFF  03,9CE
0C424:  MOVLW  05
0C426:  MOVWF  xDF
0C428:  MOVLB  0
0C42A:  CALL   24C2
0C42E:  MOVFF  9CE,FEA
0C432:  MOVFF  9CD,FE9
0C436:  MOVFF  02,FEC
0C43A:  MOVF   FED,F
0C43C:  MOVFF  01,FEF
....................             port2.sweep_step = count + 1;
0C440:  MOVLW  01
0C442:  MOVLB  9
0C444:  ADDWF  xBA,W
0C446:  MOVLB  5
0C448:  MOVWF  xBB
0C44A:  MOVLW  00
0C44C:  MOVLB  9
0C44E:  ADDWFC xBB,W
0C450:  MOVLB  5
0C452:  MOVWF  xBC
....................             if (port2.data_buffer[count].current < curr_limit) {
0C454:  MOVLB  9
0C456:  RLCF   xBA,W
0C458:  MOVWF  02
0C45A:  RLCF   xBB,W
0C45C:  MOVWF  03
0C45E:  RLCF   02,F
0C460:  RLCF   03,F
0C462:  MOVLW  FC
0C464:  ANDWF  02,F
0C466:  MOVF   02,W
0C468:  ADDLW  03
0C46A:  MOVWF  xCD
0C46C:  MOVLW  00
0C46E:  ADDWFC 03,W
0C470:  MOVWF  xCE
0C472:  MOVLW  02
0C474:  ADDWF  xCD,W
0C476:  MOVWF  01
0C478:  MOVLW  00
0C47A:  ADDWFC xCE,W
0C47C:  MOVWF  03
0C47E:  MOVF   01,W
0C480:  ADDLW  BA
0C482:  MOVWF  FE9
0C484:  MOVLW  05
0C486:  ADDWFC 03,W
0C488:  MOVWF  FEA
0C48A:  MOVFF  FEC,9CE
0C48E:  MOVF   FED,F
0C490:  MOVFF  FEF,9CD
0C494:  MOVF   xCE,W
0C496:  MOVLB  1
0C498:  SUBWF  xB9,W
0C49A:  BTFSC  FD8.0
0C49C:  BRA    C4A4
0C49E:  MOVLB  0
0C4A0:  GOTO   C4CA
0C4A4:  MOVLB  0
0C4A6:  BTFSS  FD8.2
0C4A8:  GOTO   C4C0
0C4AC:  MOVLB  1
0C4AE:  MOVF   xB8,W
0C4B0:  MOVLB  9
0C4B2:  SUBWF  xCD,W
0C4B4:  BTFSS  FD8.0
0C4B6:  BRA    C4BE
0C4B8:  MOVLB  0
0C4BA:  GOTO   C4CA
0C4BE:  MOVLB  0
....................                 port2.active = 0;
0C4C0:  MOVLB  9
0C4C2:  BCF    xB9.0
....................                 disconnect_port2();
0C4C4:  MOVLB  0
0C4C6:  CALL   916C
....................             } 
....................         }
....................         count++;
0C4CA:  MOVLB  9
0C4CC:  INCF   xBA,F
0C4CE:  BTFSC  FD8.2
0C4D0:  INCF   xBB,F
....................         if (count >= 255) {
0C4D2:  MOVF   xBB,F
0C4D4:  BTFSC  FD8.2
0C4D6:  BRA    C4DE
0C4D8:  MOVLB  0
0C4DA:  GOTO   C4F2
0C4DE:  MOVLB  0
0C4E0:  MOVLB  9
0C4E2:  MOVF   xBA,W
0C4E4:  SUBLW  FE
0C4E6:  BTFSS  FD8.0
0C4E8:  BRA    C4F0
0C4EA:  MOVLB  0
0C4EC:  GOTO   C4F6
0C4F0:  MOVLB  0
....................             // fprintf(PC, "Maximum step count reached: %ld\r\n", count);
....................             break;
0C4F2:  GOTO   C4FA
....................         }
0C4F6:  GOTO   C202
....................     }
.................... 
....................     for (int i = 0; i < count; i++) {
0C4FA:  MOVLB  9
0C4FC:  CLRF   xCC
0C4FE:  MOVLB  0
0C500:  MOVLB  9
0C502:  MOVF   xBB,F
0C504:  BTFSC  FD8.2
0C506:  BRA    C50E
0C508:  MOVLB  0
0C50A:  GOTO   C522
0C50E:  MOVLB  0
0C510:  MOVLB  9
0C512:  MOVF   xBA,W
0C514:  SUBWF  xCC,W
0C516:  BTFSS  FD8.0
0C518:  BRA    C520
0C51A:  MOVLB  0
0C51C:  GOTO   C6D6
0C520:  MOVLB  0
.................... 
....................         fprintf(PC, "%04LX,%04LX,%04LX,%04LX\r\n",
....................             port1.data_buffer[i].voltage, port1.data_buffer[i].current,
....................             port2.data_buffer[i].voltage, port2.data_buffer[i].current);
0C522:  MOVLB  A
0C524:  CLRF   x43
0C526:  MOVFF  9CC,A42
0C52A:  CLRF   x45
0C52C:  MOVLW  04
0C52E:  MOVWF  x44
0C530:  MOVLB  0
0C532:  CALL   81C0
0C536:  MOVFF  02,03
0C53A:  MOVF   01,W
0C53C:  ADDLW  BD
0C53E:  MOVWF  FE9
0C540:  MOVLW  01
0C542:  ADDWFC 03,W
0C544:  MOVWF  FEA
0C546:  MOVFF  FEC,9D0
0C54A:  MOVF   FED,F
0C54C:  MOVFF  FEF,9CF
0C550:  MOVLB  A
0C552:  CLRF   x43
0C554:  MOVFF  9CC,A42
0C558:  CLRF   x45
0C55A:  MOVLW  04
0C55C:  MOVWF  x44
0C55E:  MOVLB  0
0C560:  CALL   81C0
0C564:  MOVFF  02,03
0C568:  MOVF   01,W
0C56A:  ADDLW  03
0C56C:  MOVLB  9
0C56E:  MOVWF  xD1
0C570:  MOVLW  00
0C572:  ADDWFC 03,W
0C574:  MOVWF  xD2
0C576:  MOVLW  02
0C578:  ADDWF  xD1,W
0C57A:  MOVWF  01
0C57C:  MOVLW  00
0C57E:  ADDWFC xD2,W
0C580:  MOVWF  03
0C582:  MOVF   01,W
0C584:  ADDLW  BA
0C586:  MOVWF  FE9
0C588:  MOVLW  01
0C58A:  ADDWFC 03,W
0C58C:  MOVWF  FEA
0C58E:  MOVFF  FEC,9D2
0C592:  MOVF   FED,F
0C594:  MOVFF  FEF,9D1
0C598:  MOVLB  A
0C59A:  CLRF   x43
0C59C:  MOVFF  9CC,A42
0C5A0:  CLRF   x45
0C5A2:  MOVLW  04
0C5A4:  MOVWF  x44
0C5A6:  MOVLB  0
0C5A8:  CALL   81C0
0C5AC:  MOVFF  02,03
0C5B0:  MOVF   01,W
0C5B2:  ADDLW  BD
0C5B4:  MOVWF  FE9
0C5B6:  MOVLW  05
0C5B8:  ADDWFC 03,W
0C5BA:  MOVWF  FEA
0C5BC:  MOVFF  FEC,9D6
0C5C0:  MOVF   FED,F
0C5C2:  MOVFF  FEF,9D5
0C5C6:  MOVLB  A
0C5C8:  CLRF   x43
0C5CA:  MOVFF  9CC,A42
0C5CE:  CLRF   x45
0C5D0:  MOVLW  04
0C5D2:  MOVWF  x44
0C5D4:  MOVLB  0
0C5D6:  CALL   81C0
0C5DA:  MOVFF  02,03
0C5DE:  MOVF   01,W
0C5E0:  ADDLW  03
0C5E2:  MOVLB  9
0C5E4:  MOVWF  xD7
0C5E6:  MOVLW  00
0C5E8:  ADDWFC 03,W
0C5EA:  MOVWF  xD8
0C5EC:  MOVLW  02
0C5EE:  ADDWF  xD7,W
0C5F0:  MOVWF  01
0C5F2:  MOVLW  00
0C5F4:  ADDWFC xD8,W
0C5F6:  MOVWF  03
0C5F8:  MOVF   01,W
0C5FA:  ADDLW  BA
0C5FC:  MOVWF  FE9
0C5FE:  MOVLW  05
0C600:  ADDWFC 03,W
0C602:  MOVWF  FEA
0C604:  MOVFF  FEC,9D8
0C608:  MOVF   FED,F
0C60A:  MOVFF  FEF,9D7
0C60E:  MOVFF  9D0,9D9
0C612:  MOVLW  37
0C614:  MOVWF  xDA
0C616:  MOVLB  0
0C618:  CALL   2542
0C61C:  MOVFF  9CF,9D9
0C620:  MOVLW  37
0C622:  MOVLB  9
0C624:  MOVWF  xDA
0C626:  MOVLB  0
0C628:  CALL   2542
0C62C:  MOVLW  2C
0C62E:  BTFSS  FA6.6
0C630:  GOTO   C62E
0C634:  MOVLB  E
0C636:  MOVWF  xF9
0C638:  MOVFF  9D2,9D9
0C63C:  MOVLW  37
0C63E:  MOVLB  9
0C640:  MOVWF  xDA
0C642:  MOVLB  0
0C644:  CALL   2542
0C648:  MOVFF  9D1,9D9
0C64C:  MOVLW  37
0C64E:  MOVLB  9
0C650:  MOVWF  xDA
0C652:  MOVLB  0
0C654:  CALL   2542
0C658:  MOVLW  2C
0C65A:  BTFSS  FA6.6
0C65C:  GOTO   C65A
0C660:  MOVLB  E
0C662:  MOVWF  xF9
0C664:  MOVFF  9D6,9D9
0C668:  MOVLW  37
0C66A:  MOVLB  9
0C66C:  MOVWF  xDA
0C66E:  MOVLB  0
0C670:  CALL   2542
0C674:  MOVFF  9D5,9D9
0C678:  MOVLW  37
0C67A:  MOVLB  9
0C67C:  MOVWF  xDA
0C67E:  MOVLB  0
0C680:  CALL   2542
0C684:  MOVLW  2C
0C686:  BTFSS  FA6.6
0C688:  GOTO   C686
0C68C:  MOVLB  E
0C68E:  MOVWF  xF9
0C690:  MOVFF  9D8,9D9
0C694:  MOVLW  37
0C696:  MOVLB  9
0C698:  MOVWF  xDA
0C69A:  MOVLB  0
0C69C:  CALL   2542
0C6A0:  MOVFF  9D7,9D9
0C6A4:  MOVLW  37
0C6A6:  MOVLB  9
0C6A8:  MOVWF  xDA
0C6AA:  MOVLB  0
0C6AC:  CALL   2542
0C6B0:  MOVLW  0D
0C6B2:  BTFSS  FA6.6
0C6B4:  GOTO   C6B2
0C6B8:  MOVLB  E
0C6BA:  MOVWF  xF9
0C6BC:  MOVLW  0A
0C6BE:  MOVLB  0
0C6C0:  BTFSS  FA6.6
0C6C2:  GOTO   C6C0
0C6C6:  MOVLB  E
0C6C8:  MOVWF  xF9
0C6CA:  MOVLB  0
0C6CC:  MOVLB  9
0C6CE:  INCF   xCC,F
0C6D0:  MOVLB  0
0C6D2:  GOTO   C500
....................     }
0C6D6:  GOTO   C99A (RETURN)
.................... 
.................... }
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_limit)
*
09A54:  CALL   3C28
09A58:  MOVFF  03,1D9
09A5C:  MOVFF  02,1D8
09A60:  MOVFF  01,1D7
09A64:  MOVFF  00,1D6
.................... {
....................     unsigned int32 start_time_ms = get_current_sec();
....................     fputc('.', PC);
09A68:  MOVLW  2E
09A6A:  CALL   90D4
....................     // Enable both CIGS ports
....................     connect_port1();
09A6E:  CALL   5248
....................     connect_port2();
09A72:  CALL   5250
.................... 
....................     // delay_us(100); // wait for the CIGS to stabilize
.................... 
....................     // Init Port1
....................     sweep_config_t port1 = {0};
09A76:  MOVLB  1
09A78:  CLRF   xDA
09A7A:  CLRF   xDB
09A7C:  CLRF   xDC
09A7E:  CLRF   xDD
09A80:  CLRF   xDE
09A82:  CLRF   xDF
09A84:  CLRF   xE0
09A86:  CLRF   xE1
09A88:  CLRF   xE2
09A8A:  CLRF   xE3
09A8C:  CLRF   xE4
09A8E:  CLRF   xE5
09A90:  CLRF   xE6
09A92:  CLRF   xE7
09A94:  CLRF   xE8
09A96:  CLRF   xE9
09A98:  CLRF   xEA
09A9A:  CLRF   xEB
09A9C:  CLRF   xEC
09A9E:  CLRF   xED
09AA0:  CLRF   xEE
09AA2:  CLRF   xEF
09AA4:  CLRF   xF0
09AA6:  CLRF   xF1
09AA8:  CLRF   xF2
09AAA:  CLRF   xF3
09AAC:  CLRF   xF4
09AAE:  CLRF   xF5
09AB0:  CLRF   xF6
09AB2:  CLRF   xF7
09AB4:  CLRF   xF8
09AB6:  CLRF   xF9
09AB8:  CLRF   xFA
09ABA:  CLRF   xFB
09ABC:  CLRF   xFC
09ABE:  CLRF   xFD
09AC0:  CLRF   xFE
09AC2:  CLRF   xFF
09AC4:  MOVLB  2
09AC6:  CLRF   x00
09AC8:  CLRF   x01
09ACA:  CLRF   x02
09ACC:  CLRF   x03
09ACE:  CLRF   x04
09AD0:  CLRF   x05
09AD2:  CLRF   x06
09AD4:  CLRF   x07
09AD6:  CLRF   x08
09AD8:  CLRF   x09
09ADA:  CLRF   x0A
09ADC:  CLRF   x0B
09ADE:  CLRF   x0C
09AE0:  CLRF   x0D
09AE2:  CLRF   x0E
09AE4:  CLRF   x0F
09AE6:  CLRF   x10
09AE8:  CLRF   x11
09AEA:  CLRF   x12
09AEC:  CLRF   x13
09AEE:  CLRF   x14
09AF0:  CLRF   x15
09AF2:  CLRF   x16
09AF4:  CLRF   x17
09AF6:  CLRF   x18
09AF8:  CLRF   x19
09AFA:  CLRF   x1A
09AFC:  CLRF   x1B
09AFE:  CLRF   x1C
09B00:  CLRF   x1D
09B02:  CLRF   x1E
09B04:  CLRF   x1F
09B06:  CLRF   x20
09B08:  CLRF   x21
09B0A:  CLRF   x22
09B0C:  CLRF   x23
09B0E:  CLRF   x24
09B10:  CLRF   x25
09B12:  CLRF   x26
09B14:  CLRF   x27
09B16:  CLRF   x28
09B18:  CLRF   x29
09B1A:  CLRF   x2A
09B1C:  CLRF   x2B
09B1E:  CLRF   x2C
09B20:  CLRF   x2D
09B22:  CLRF   x2E
09B24:  CLRF   x2F
09B26:  CLRF   x30
09B28:  CLRF   x31
09B2A:  CLRF   x32
09B2C:  CLRF   x33
09B2E:  CLRF   x34
09B30:  CLRF   x35
09B32:  CLRF   x36
09B34:  CLRF   x37
09B36:  CLRF   x38
09B38:  CLRF   x39
09B3A:  CLRF   x3A
09B3C:  CLRF   x3B
09B3E:  CLRF   x3C
09B40:  CLRF   x3D
09B42:  CLRF   x3E
09B44:  CLRF   x3F
09B46:  CLRF   x40
09B48:  CLRF   x41
09B4A:  CLRF   x42
09B4C:  CLRF   x43
09B4E:  CLRF   x44
09B50:  CLRF   x45
09B52:  CLRF   x46
09B54:  CLRF   x47
09B56:  CLRF   x48
09B58:  CLRF   x49
09B5A:  CLRF   x4A
09B5C:  CLRF   x4B
09B5E:  CLRF   x4C
09B60:  CLRF   x4D
09B62:  CLRF   x4E
09B64:  CLRF   x4F
09B66:  CLRF   x50
09B68:  CLRF   x51
09B6A:  CLRF   x52
09B6C:  CLRF   x53
09B6E:  CLRF   x54
09B70:  CLRF   x55
09B72:  CLRF   x56
09B74:  CLRF   x57
09B76:  CLRF   x58
09B78:  CLRF   x59
09B7A:  CLRF   x5A
09B7C:  CLRF   x5B
09B7E:  CLRF   x5C
09B80:  CLRF   x5D
09B82:  CLRF   x5E
09B84:  CLRF   x5F
09B86:  CLRF   x60
09B88:  CLRF   x61
09B8A:  CLRF   x62
09B8C:  CLRF   x63
09B8E:  CLRF   x64
09B90:  CLRF   x65
09B92:  CLRF   x66
09B94:  CLRF   x67
09B96:  CLRF   x68
09B98:  CLRF   x69
09B9A:  CLRF   x6A
09B9C:  CLRF   x6B
09B9E:  CLRF   x6C
09BA0:  CLRF   x6D
09BA2:  CLRF   x6E
09BA4:  CLRF   x6F
09BA6:  CLRF   x70
09BA8:  CLRF   x71
09BAA:  CLRF   x72
09BAC:  CLRF   x73
09BAE:  CLRF   x74
09BB0:  CLRF   x75
09BB2:  CLRF   x76
09BB4:  CLRF   x77
09BB6:  CLRF   x78
09BB8:  CLRF   x79
09BBA:  CLRF   x7A
09BBC:  CLRF   x7B
09BBE:  CLRF   x7C
09BC0:  CLRF   x7D
09BC2:  CLRF   x7E
09BC4:  CLRF   x7F
09BC6:  CLRF   x80
09BC8:  CLRF   x81
09BCA:  CLRF   x82
09BCC:  CLRF   x83
09BCE:  CLRF   x84
09BD0:  CLRF   x85
09BD2:  CLRF   x86
09BD4:  CLRF   x87
09BD6:  CLRF   x88
09BD8:  CLRF   x89
09BDA:  CLRF   x8A
09BDC:  CLRF   x8B
09BDE:  CLRF   x8C
09BE0:  CLRF   x8D
09BE2:  CLRF   x8E
09BE4:  CLRF   x8F
09BE6:  CLRF   x90
09BE8:  CLRF   x91
09BEA:  CLRF   x92
09BEC:  CLRF   x93
09BEE:  CLRF   x94
09BF0:  CLRF   x95
09BF2:  CLRF   x96
09BF4:  CLRF   x97
09BF6:  CLRF   x98
09BF8:  CLRF   x99
09BFA:  CLRF   x9A
09BFC:  CLRF   x9B
09BFE:  CLRF   x9C
09C00:  CLRF   x9D
09C02:  CLRF   x9E
09C04:  CLRF   x9F
09C06:  CLRF   xA0
09C08:  CLRF   xA1
09C0A:  CLRF   xA2
09C0C:  CLRF   xA3
09C0E:  CLRF   xA4
09C10:  CLRF   xA5
09C12:  CLRF   xA6
09C14:  CLRF   xA7
09C16:  CLRF   xA8
09C18:  CLRF   xA9
09C1A:  CLRF   xAA
09C1C:  CLRF   xAB
09C1E:  CLRF   xAC
09C20:  CLRF   xAD
09C22:  CLRF   xAE
09C24:  CLRF   xAF
09C26:  CLRF   xB0
09C28:  CLRF   xB1
09C2A:  CLRF   xB2
09C2C:  CLRF   xB3
09C2E:  CLRF   xB4
09C30:  CLRF   xB5
09C32:  CLRF   xB6
09C34:  CLRF   xB7
09C36:  CLRF   xB8
09C38:  CLRF   xB9
09C3A:  CLRF   xBA
09C3C:  CLRF   xBB
09C3E:  CLRF   xBC
09C40:  CLRF   xBD
09C42:  CLRF   xBE
09C44:  CLRF   xBF
09C46:  CLRF   xC0
09C48:  CLRF   xC1
09C4A:  CLRF   xC2
09C4C:  CLRF   xC3
09C4E:  CLRF   xC4
09C50:  CLRF   xC5
09C52:  CLRF   xC6
09C54:  CLRF   xC7
09C56:  CLRF   xC8
09C58:  CLRF   xC9
09C5A:  CLRF   xCA
09C5C:  CLRF   xCB
09C5E:  CLRF   xCC
09C60:  CLRF   xCD
09C62:  CLRF   xCE
09C64:  CLRF   xCF
09C66:  CLRF   xD0
09C68:  CLRF   xD1
09C6A:  CLRF   xD2
09C6C:  CLRF   xD3
09C6E:  CLRF   xD4
09C70:  CLRF   xD5
09C72:  CLRF   xD6
09C74:  CLRF   xD7
09C76:  CLRF   xD8
09C78:  CLRF   xD9
09C7A:  CLRF   xDA
09C7C:  CLRF   xDB
09C7E:  CLRF   xDC
09C80:  CLRF   xDD
09C82:  CLRF   xDE
09C84:  CLRF   xDF
09C86:  CLRF   xE0
09C88:  CLRF   xE1
09C8A:  CLRF   xE2
09C8C:  CLRF   xE3
09C8E:  CLRF   xE4
09C90:  CLRF   xE5
09C92:  CLRF   xE6
09C94:  CLRF   xE7
09C96:  CLRF   xE8
09C98:  CLRF   xE9
09C9A:  CLRF   xEA
09C9C:  CLRF   xEB
09C9E:  CLRF   xEC
09CA0:  CLRF   xED
09CA2:  CLRF   xEE
09CA4:  CLRF   xEF
09CA6:  CLRF   xF0
09CA8:  CLRF   xF1
09CAA:  CLRF   xF2
09CAC:  CLRF   xF3
09CAE:  CLRF   xF4
09CB0:  CLRF   xF5
09CB2:  CLRF   xF6
09CB4:  CLRF   xF7
09CB6:  CLRF   xF8
09CB8:  CLRF   xF9
09CBA:  CLRF   xFA
09CBC:  CLRF   xFB
09CBE:  CLRF   xFC
09CC0:  CLRF   xFD
09CC2:  CLRF   xFE
09CC4:  CLRF   xFF
09CC6:  MOVLB  3
09CC8:  CLRF   x00
09CCA:  CLRF   x01
09CCC:  CLRF   x02
09CCE:  CLRF   x03
09CD0:  CLRF   x04
09CD2:  CLRF   x05
09CD4:  CLRF   x06
09CD6:  CLRF   x07
09CD8:  CLRF   x08
09CDA:  CLRF   x09
09CDC:  CLRF   x0A
09CDE:  CLRF   x0B
09CE0:  CLRF   x0C
09CE2:  CLRF   x0D
09CE4:  CLRF   x0E
09CE6:  CLRF   x0F
09CE8:  CLRF   x10
09CEA:  CLRF   x11
09CEC:  CLRF   x12
09CEE:  CLRF   x13
09CF0:  CLRF   x14
09CF2:  CLRF   x15
09CF4:  CLRF   x16
09CF6:  CLRF   x17
09CF8:  CLRF   x18
09CFA:  CLRF   x19
09CFC:  CLRF   x1A
09CFE:  CLRF   x1B
09D00:  CLRF   x1C
09D02:  CLRF   x1D
09D04:  CLRF   x1E
09D06:  CLRF   x1F
09D08:  CLRF   x20
09D0A:  CLRF   x21
09D0C:  CLRF   x22
09D0E:  CLRF   x23
09D10:  CLRF   x24
09D12:  CLRF   x25
09D14:  CLRF   x26
09D16:  CLRF   x27
09D18:  CLRF   x28
09D1A:  CLRF   x29
09D1C:  CLRF   x2A
09D1E:  CLRF   x2B
09D20:  CLRF   x2C
09D22:  CLRF   x2D
09D24:  CLRF   x2E
09D26:  CLRF   x2F
09D28:  CLRF   x30
09D2A:  CLRF   x31
09D2C:  CLRF   x32
09D2E:  CLRF   x33
09D30:  CLRF   x34
09D32:  CLRF   x35
09D34:  CLRF   x36
09D36:  CLRF   x37
09D38:  CLRF   x38
09D3A:  CLRF   x39
09D3C:  CLRF   x3A
09D3E:  CLRF   x3B
09D40:  CLRF   x3C
09D42:  CLRF   x3D
09D44:  CLRF   x3E
09D46:  CLRF   x3F
09D48:  CLRF   x40
09D4A:  CLRF   x41
09D4C:  CLRF   x42
09D4E:  CLRF   x43
09D50:  CLRF   x44
09D52:  CLRF   x45
09D54:  CLRF   x46
09D56:  CLRF   x47
09D58:  CLRF   x48
09D5A:  CLRF   x49
09D5C:  CLRF   x4A
09D5E:  CLRF   x4B
09D60:  CLRF   x4C
09D62:  CLRF   x4D
09D64:  CLRF   x4E
09D66:  CLRF   x4F
09D68:  CLRF   x50
09D6A:  CLRF   x51
09D6C:  CLRF   x52
09D6E:  CLRF   x53
09D70:  CLRF   x54
09D72:  CLRF   x55
09D74:  CLRF   x56
09D76:  CLRF   x57
09D78:  CLRF   x58
09D7A:  CLRF   x59
09D7C:  CLRF   x5A
09D7E:  CLRF   x5B
09D80:  CLRF   x5C
09D82:  CLRF   x5D
09D84:  CLRF   x5E
09D86:  CLRF   x5F
09D88:  CLRF   x60
09D8A:  CLRF   x61
09D8C:  CLRF   x62
09D8E:  CLRF   x63
09D90:  CLRF   x64
09D92:  CLRF   x65
09D94:  CLRF   x66
09D96:  CLRF   x67
09D98:  CLRF   x68
09D9A:  CLRF   x69
09D9C:  CLRF   x6A
09D9E:  CLRF   x6B
09DA0:  CLRF   x6C
09DA2:  CLRF   x6D
09DA4:  CLRF   x6E
09DA6:  CLRF   x6F
09DA8:  CLRF   x70
09DAA:  CLRF   x71
09DAC:  CLRF   x72
09DAE:  CLRF   x73
09DB0:  CLRF   x74
09DB2:  CLRF   x75
09DB4:  CLRF   x76
09DB6:  CLRF   x77
09DB8:  CLRF   x78
09DBA:  CLRF   x79
09DBC:  CLRF   x7A
09DBE:  CLRF   x7B
09DC0:  CLRF   x7C
09DC2:  CLRF   x7D
09DC4:  CLRF   x7E
09DC6:  CLRF   x7F
09DC8:  CLRF   x80
09DCA:  CLRF   x81
09DCC:  CLRF   x82
09DCE:  CLRF   x83
09DD0:  CLRF   x84
09DD2:  CLRF   x85
09DD4:  CLRF   x86
09DD6:  CLRF   x87
09DD8:  CLRF   x88
09DDA:  CLRF   x89
09DDC:  CLRF   x8A
09DDE:  CLRF   x8B
09DE0:  CLRF   x8C
09DE2:  CLRF   x8D
09DE4:  CLRF   x8E
09DE6:  CLRF   x8F
09DE8:  CLRF   x90
09DEA:  CLRF   x91
09DEC:  CLRF   x92
09DEE:  CLRF   x93
09DF0:  CLRF   x94
09DF2:  CLRF   x95
09DF4:  CLRF   x96
09DF6:  CLRF   x97
09DF8:  CLRF   x98
09DFA:  CLRF   x99
09DFC:  CLRF   x9A
09DFE:  CLRF   x9B
09E00:  CLRF   x9C
09E02:  CLRF   x9D
09E04:  CLRF   x9E
09E06:  CLRF   x9F
09E08:  CLRF   xA0
09E0A:  CLRF   xA1
09E0C:  CLRF   xA2
09E0E:  CLRF   xA3
09E10:  CLRF   xA4
09E12:  CLRF   xA5
09E14:  CLRF   xA6
09E16:  CLRF   xA7
09E18:  CLRF   xA8
09E1A:  CLRF   xA9
09E1C:  CLRF   xAA
09E1E:  CLRF   xAB
09E20:  CLRF   xAC
09E22:  CLRF   xAD
09E24:  CLRF   xAE
09E26:  CLRF   xAF
09E28:  CLRF   xB0
09E2A:  CLRF   xB1
09E2C:  CLRF   xB2
09E2E:  CLRF   xB3
09E30:  CLRF   xB4
09E32:  CLRF   xB5
09E34:  CLRF   xB6
09E36:  CLRF   xB7
09E38:  CLRF   xB8
09E3A:  CLRF   xB9
09E3C:  CLRF   xBA
09E3E:  CLRF   xBB
09E40:  CLRF   xBC
09E42:  CLRF   xBD
09E44:  CLRF   xBE
09E46:  CLRF   xBF
09E48:  CLRF   xC0
09E4A:  CLRF   xC1
09E4C:  CLRF   xC2
09E4E:  CLRF   xC3
09E50:  CLRF   xC4
09E52:  CLRF   xC5
09E54:  CLRF   xC6
09E56:  CLRF   xC7
09E58:  CLRF   xC8
09E5A:  CLRF   xC9
09E5C:  CLRF   xCA
09E5E:  CLRF   xCB
09E60:  CLRF   xCC
09E62:  CLRF   xCD
09E64:  CLRF   xCE
09E66:  CLRF   xCF
09E68:  CLRF   xD0
09E6A:  CLRF   xD1
09E6C:  CLRF   xD2
09E6E:  CLRF   xD3
09E70:  CLRF   xD4
09E72:  CLRF   xD5
09E74:  CLRF   xD6
09E76:  CLRF   xD7
09E78:  CLRF   xD8
09E7A:  CLRF   xD9
09E7C:  CLRF   xDA
09E7E:  CLRF   xDB
09E80:  CLRF   xDC
09E82:  CLRF   xDD
....................     port1.port_num = 1;
09E84:  MOVLW  01
09E86:  MOVLB  1
09E88:  MOVWF  xDA
....................     port1.sweep_step = 0;
09E8A:  CLRF   xDC
09E8C:  CLRF   xDB
....................     port1.active = 1;
09E8E:  MOVLB  3
09E90:  BSF    xDD.0
.................... 
....................     // Init Port2
....................     sweep_config_t port2 = {0};
09E92:  CLRF   xDE
09E94:  CLRF   xDF
09E96:  CLRF   xE0
09E98:  CLRF   xE1
09E9A:  CLRF   xE2
09E9C:  CLRF   xE3
09E9E:  CLRF   xE4
09EA0:  CLRF   xE5
09EA2:  CLRF   xE6
09EA4:  CLRF   xE7
09EA6:  CLRF   xE8
09EA8:  CLRF   xE9
09EAA:  CLRF   xEA
09EAC:  CLRF   xEB
09EAE:  CLRF   xEC
09EB0:  CLRF   xED
09EB2:  CLRF   xEE
09EB4:  CLRF   xEF
09EB6:  CLRF   xF0
09EB8:  CLRF   xF1
09EBA:  CLRF   xF2
09EBC:  CLRF   xF3
09EBE:  CLRF   xF4
09EC0:  CLRF   xF5
09EC2:  CLRF   xF6
09EC4:  CLRF   xF7
09EC6:  CLRF   xF8
09EC8:  CLRF   xF9
09ECA:  CLRF   xFA
09ECC:  CLRF   xFB
09ECE:  CLRF   xFC
09ED0:  CLRF   xFD
09ED2:  CLRF   xFE
09ED4:  CLRF   xFF
09ED6:  MOVLB  4
09ED8:  CLRF   x00
09EDA:  CLRF   x01
09EDC:  CLRF   x02
09EDE:  CLRF   x03
09EE0:  CLRF   x04
09EE2:  CLRF   x05
09EE4:  CLRF   x06
09EE6:  CLRF   x07
09EE8:  CLRF   x08
09EEA:  CLRF   x09
09EEC:  CLRF   x0A
09EEE:  CLRF   x0B
09EF0:  CLRF   x0C
09EF2:  CLRF   x0D
09EF4:  CLRF   x0E
09EF6:  CLRF   x0F
09EF8:  CLRF   x10
09EFA:  CLRF   x11
09EFC:  CLRF   x12
09EFE:  CLRF   x13
09F00:  CLRF   x14
09F02:  CLRF   x15
09F04:  CLRF   x16
09F06:  CLRF   x17
09F08:  CLRF   x18
09F0A:  CLRF   x19
09F0C:  CLRF   x1A
09F0E:  CLRF   x1B
09F10:  CLRF   x1C
09F12:  CLRF   x1D
09F14:  CLRF   x1E
09F16:  CLRF   x1F
09F18:  CLRF   x20
09F1A:  CLRF   x21
09F1C:  CLRF   x22
09F1E:  CLRF   x23
09F20:  CLRF   x24
09F22:  CLRF   x25
09F24:  CLRF   x26
09F26:  CLRF   x27
09F28:  CLRF   x28
09F2A:  CLRF   x29
09F2C:  CLRF   x2A
09F2E:  CLRF   x2B
09F30:  CLRF   x2C
09F32:  CLRF   x2D
09F34:  CLRF   x2E
09F36:  CLRF   x2F
09F38:  CLRF   x30
09F3A:  CLRF   x31
09F3C:  CLRF   x32
09F3E:  CLRF   x33
09F40:  CLRF   x34
09F42:  CLRF   x35
09F44:  CLRF   x36
09F46:  CLRF   x37
09F48:  CLRF   x38
09F4A:  CLRF   x39
09F4C:  CLRF   x3A
09F4E:  CLRF   x3B
09F50:  CLRF   x3C
09F52:  CLRF   x3D
09F54:  CLRF   x3E
09F56:  CLRF   x3F
09F58:  CLRF   x40
09F5A:  CLRF   x41
09F5C:  CLRF   x42
09F5E:  CLRF   x43
09F60:  CLRF   x44
09F62:  CLRF   x45
09F64:  CLRF   x46
09F66:  CLRF   x47
09F68:  CLRF   x48
09F6A:  CLRF   x49
09F6C:  CLRF   x4A
09F6E:  CLRF   x4B
09F70:  CLRF   x4C
09F72:  CLRF   x4D
09F74:  CLRF   x4E
09F76:  CLRF   x4F
09F78:  CLRF   x50
09F7A:  CLRF   x51
09F7C:  CLRF   x52
09F7E:  CLRF   x53
09F80:  CLRF   x54
09F82:  CLRF   x55
09F84:  CLRF   x56
09F86:  CLRF   x57
09F88:  CLRF   x58
09F8A:  CLRF   x59
09F8C:  CLRF   x5A
09F8E:  CLRF   x5B
09F90:  CLRF   x5C
09F92:  CLRF   x5D
09F94:  CLRF   x5E
09F96:  CLRF   x5F
09F98:  CLRF   x60
09F9A:  CLRF   x61
09F9C:  CLRF   x62
09F9E:  CLRF   x63
09FA0:  CLRF   x64
09FA2:  CLRF   x65
09FA4:  CLRF   x66
09FA6:  CLRF   x67
09FA8:  CLRF   x68
09FAA:  CLRF   x69
09FAC:  CLRF   x6A
09FAE:  CLRF   x6B
09FB0:  CLRF   x6C
09FB2:  CLRF   x6D
09FB4:  CLRF   x6E
09FB6:  CLRF   x6F
09FB8:  CLRF   x70
09FBA:  CLRF   x71
09FBC:  CLRF   x72
09FBE:  CLRF   x73
09FC0:  CLRF   x74
09FC2:  CLRF   x75
09FC4:  CLRF   x76
09FC6:  CLRF   x77
09FC8:  CLRF   x78
09FCA:  CLRF   x79
09FCC:  CLRF   x7A
09FCE:  CLRF   x7B
09FD0:  CLRF   x7C
09FD2:  CLRF   x7D
09FD4:  CLRF   x7E
09FD6:  CLRF   x7F
09FD8:  CLRF   x80
09FDA:  CLRF   x81
09FDC:  CLRF   x82
09FDE:  CLRF   x83
09FE0:  CLRF   x84
09FE2:  CLRF   x85
09FE4:  CLRF   x86
09FE6:  CLRF   x87
09FE8:  CLRF   x88
09FEA:  CLRF   x89
09FEC:  CLRF   x8A
09FEE:  CLRF   x8B
09FF0:  CLRF   x8C
09FF2:  CLRF   x8D
09FF4:  CLRF   x8E
09FF6:  CLRF   x8F
09FF8:  CLRF   x90
09FFA:  CLRF   x91
09FFC:  CLRF   x92
09FFE:  CLRF   x93
0A000:  CLRF   x94
0A002:  CLRF   x95
0A004:  CLRF   x96
0A006:  CLRF   x97
0A008:  CLRF   x98
0A00A:  CLRF   x99
0A00C:  CLRF   x9A
0A00E:  CLRF   x9B
0A010:  CLRF   x9C
0A012:  CLRF   x9D
0A014:  CLRF   x9E
0A016:  CLRF   x9F
0A018:  CLRF   xA0
0A01A:  CLRF   xA1
0A01C:  CLRF   xA2
0A01E:  CLRF   xA3
0A020:  CLRF   xA4
0A022:  CLRF   xA5
0A024:  CLRF   xA6
0A026:  CLRF   xA7
0A028:  CLRF   xA8
0A02A:  CLRF   xA9
0A02C:  CLRF   xAA
0A02E:  CLRF   xAB
0A030:  CLRF   xAC
0A032:  CLRF   xAD
0A034:  CLRF   xAE
0A036:  CLRF   xAF
0A038:  CLRF   xB0
0A03A:  CLRF   xB1
0A03C:  CLRF   xB2
0A03E:  CLRF   xB3
0A040:  CLRF   xB4
0A042:  CLRF   xB5
0A044:  CLRF   xB6
0A046:  CLRF   xB7
0A048:  CLRF   xB8
0A04A:  CLRF   xB9
0A04C:  CLRF   xBA
0A04E:  CLRF   xBB
0A050:  CLRF   xBC
0A052:  CLRF   xBD
0A054:  CLRF   xBE
0A056:  CLRF   xBF
0A058:  CLRF   xC0
0A05A:  CLRF   xC1
0A05C:  CLRF   xC2
0A05E:  CLRF   xC3
0A060:  CLRF   xC4
0A062:  CLRF   xC5
0A064:  CLRF   xC6
0A066:  CLRF   xC7
0A068:  CLRF   xC8
0A06A:  CLRF   xC9
0A06C:  CLRF   xCA
0A06E:  CLRF   xCB
0A070:  CLRF   xCC
0A072:  CLRF   xCD
0A074:  CLRF   xCE
0A076:  CLRF   xCF
0A078:  CLRF   xD0
0A07A:  CLRF   xD1
0A07C:  CLRF   xD2
0A07E:  CLRF   xD3
0A080:  CLRF   xD4
0A082:  CLRF   xD5
0A084:  CLRF   xD6
0A086:  CLRF   xD7
0A088:  CLRF   xD8
0A08A:  CLRF   xD9
0A08C:  CLRF   xDA
0A08E:  CLRF   xDB
0A090:  CLRF   xDC
0A092:  CLRF   xDD
0A094:  CLRF   xDE
0A096:  CLRF   xDF
0A098:  CLRF   xE0
0A09A:  CLRF   xE1
0A09C:  CLRF   xE2
0A09E:  CLRF   xE3
0A0A0:  CLRF   xE4
0A0A2:  CLRF   xE5
0A0A4:  CLRF   xE6
0A0A6:  CLRF   xE7
0A0A8:  CLRF   xE8
0A0AA:  CLRF   xE9
0A0AC:  CLRF   xEA
0A0AE:  CLRF   xEB
0A0B0:  CLRF   xEC
0A0B2:  CLRF   xED
0A0B4:  CLRF   xEE
0A0B6:  CLRF   xEF
0A0B8:  CLRF   xF0
0A0BA:  CLRF   xF1
0A0BC:  CLRF   xF2
0A0BE:  CLRF   xF3
0A0C0:  CLRF   xF4
0A0C2:  CLRF   xF5
0A0C4:  CLRF   xF6
0A0C6:  CLRF   xF7
0A0C8:  CLRF   xF8
0A0CA:  CLRF   xF9
0A0CC:  CLRF   xFA
0A0CE:  CLRF   xFB
0A0D0:  CLRF   xFC
0A0D2:  CLRF   xFD
0A0D4:  CLRF   xFE
0A0D6:  CLRF   xFF
0A0D8:  MOVLB  5
0A0DA:  CLRF   x00
0A0DC:  CLRF   x01
0A0DE:  CLRF   x02
0A0E0:  CLRF   x03
0A0E2:  CLRF   x04
0A0E4:  CLRF   x05
0A0E6:  CLRF   x06
0A0E8:  CLRF   x07
0A0EA:  CLRF   x08
0A0EC:  CLRF   x09
0A0EE:  CLRF   x0A
0A0F0:  CLRF   x0B
0A0F2:  CLRF   x0C
0A0F4:  CLRF   x0D
0A0F6:  CLRF   x0E
0A0F8:  CLRF   x0F
0A0FA:  CLRF   x10
0A0FC:  CLRF   x11
0A0FE:  CLRF   x12
0A100:  CLRF   x13
0A102:  CLRF   x14
0A104:  CLRF   x15
0A106:  CLRF   x16
0A108:  CLRF   x17
0A10A:  CLRF   x18
0A10C:  CLRF   x19
0A10E:  CLRF   x1A
0A110:  CLRF   x1B
0A112:  CLRF   x1C
0A114:  CLRF   x1D
0A116:  CLRF   x1E
0A118:  CLRF   x1F
0A11A:  CLRF   x20
0A11C:  CLRF   x21
0A11E:  CLRF   x22
0A120:  CLRF   x23
0A122:  CLRF   x24
0A124:  CLRF   x25
0A126:  CLRF   x26
0A128:  CLRF   x27
0A12A:  CLRF   x28
0A12C:  CLRF   x29
0A12E:  CLRF   x2A
0A130:  CLRF   x2B
0A132:  CLRF   x2C
0A134:  CLRF   x2D
0A136:  CLRF   x2E
0A138:  CLRF   x2F
0A13A:  CLRF   x30
0A13C:  CLRF   x31
0A13E:  CLRF   x32
0A140:  CLRF   x33
0A142:  CLRF   x34
0A144:  CLRF   x35
0A146:  CLRF   x36
0A148:  CLRF   x37
0A14A:  CLRF   x38
0A14C:  CLRF   x39
0A14E:  CLRF   x3A
0A150:  CLRF   x3B
0A152:  CLRF   x3C
0A154:  CLRF   x3D
0A156:  CLRF   x3E
0A158:  CLRF   x3F
0A15A:  CLRF   x40
0A15C:  CLRF   x41
0A15E:  CLRF   x42
0A160:  CLRF   x43
0A162:  CLRF   x44
0A164:  CLRF   x45
0A166:  CLRF   x46
0A168:  CLRF   x47
0A16A:  CLRF   x48
0A16C:  CLRF   x49
0A16E:  CLRF   x4A
0A170:  CLRF   x4B
0A172:  CLRF   x4C
0A174:  CLRF   x4D
0A176:  CLRF   x4E
0A178:  CLRF   x4F
0A17A:  CLRF   x50
0A17C:  CLRF   x51
0A17E:  CLRF   x52
0A180:  CLRF   x53
0A182:  CLRF   x54
0A184:  CLRF   x55
0A186:  CLRF   x56
0A188:  CLRF   x57
0A18A:  CLRF   x58
0A18C:  CLRF   x59
0A18E:  CLRF   x5A
0A190:  CLRF   x5B
0A192:  CLRF   x5C
0A194:  CLRF   x5D
0A196:  CLRF   x5E
0A198:  CLRF   x5F
0A19A:  CLRF   x60
0A19C:  CLRF   x61
0A19E:  CLRF   x62
0A1A0:  CLRF   x63
0A1A2:  CLRF   x64
0A1A4:  CLRF   x65
0A1A6:  CLRF   x66
0A1A8:  CLRF   x67
0A1AA:  CLRF   x68
0A1AC:  CLRF   x69
0A1AE:  CLRF   x6A
0A1B0:  CLRF   x6B
0A1B2:  CLRF   x6C
0A1B4:  CLRF   x6D
0A1B6:  CLRF   x6E
0A1B8:  CLRF   x6F
0A1BA:  CLRF   x70
0A1BC:  CLRF   x71
0A1BE:  CLRF   x72
0A1C0:  CLRF   x73
0A1C2:  CLRF   x74
0A1C4:  CLRF   x75
0A1C6:  CLRF   x76
0A1C8:  CLRF   x77
0A1CA:  CLRF   x78
0A1CC:  CLRF   x79
0A1CE:  CLRF   x7A
0A1D0:  CLRF   x7B
0A1D2:  CLRF   x7C
0A1D4:  CLRF   x7D
0A1D6:  CLRF   x7E
0A1D8:  CLRF   x7F
0A1DA:  CLRF   x80
0A1DC:  CLRF   x81
0A1DE:  CLRF   x82
0A1E0:  CLRF   x83
0A1E2:  CLRF   x84
0A1E4:  CLRF   x85
0A1E6:  CLRF   x86
0A1E8:  CLRF   x87
0A1EA:  CLRF   x88
0A1EC:  CLRF   x89
0A1EE:  CLRF   x8A
0A1F0:  CLRF   x8B
0A1F2:  CLRF   x8C
0A1F4:  CLRF   x8D
0A1F6:  CLRF   x8E
0A1F8:  CLRF   x8F
0A1FA:  CLRF   x90
0A1FC:  CLRF   x91
0A1FE:  CLRF   x92
0A200:  CLRF   x93
0A202:  CLRF   x94
0A204:  CLRF   x95
0A206:  CLRF   x96
0A208:  CLRF   x97
0A20A:  CLRF   x98
0A20C:  CLRF   x99
0A20E:  CLRF   x9A
0A210:  CLRF   x9B
0A212:  CLRF   x9C
0A214:  CLRF   x9D
0A216:  CLRF   x9E
0A218:  CLRF   x9F
0A21A:  CLRF   xA0
0A21C:  CLRF   xA1
0A21E:  CLRF   xA2
0A220:  CLRF   xA3
0A222:  CLRF   xA4
0A224:  CLRF   xA5
0A226:  CLRF   xA6
0A228:  CLRF   xA7
0A22A:  CLRF   xA8
0A22C:  CLRF   xA9
0A22E:  CLRF   xAA
0A230:  CLRF   xAB
0A232:  CLRF   xAC
0A234:  CLRF   xAD
0A236:  CLRF   xAE
0A238:  CLRF   xAF
0A23A:  CLRF   xB0
0A23C:  CLRF   xB1
0A23E:  CLRF   xB2
0A240:  CLRF   xB3
0A242:  CLRF   xB4
0A244:  CLRF   xB5
0A246:  CLRF   xB6
0A248:  CLRF   xB7
0A24A:  CLRF   xB8
0A24C:  CLRF   xB9
0A24E:  CLRF   xBA
0A250:  CLRF   xBB
0A252:  CLRF   xBC
0A254:  CLRF   xBD
0A256:  CLRF   xBE
0A258:  CLRF   xBF
0A25A:  CLRF   xC0
0A25C:  CLRF   xC1
0A25E:  CLRF   xC2
0A260:  CLRF   xC3
0A262:  CLRF   xC4
0A264:  CLRF   xC5
0A266:  CLRF   xC6
0A268:  CLRF   xC7
0A26A:  CLRF   xC8
0A26C:  CLRF   xC9
0A26E:  CLRF   xCA
0A270:  CLRF   xCB
0A272:  CLRF   xCC
0A274:  CLRF   xCD
0A276:  CLRF   xCE
0A278:  CLRF   xCF
0A27A:  CLRF   xD0
0A27C:  CLRF   xD1
0A27E:  CLRF   xD2
0A280:  CLRF   xD3
0A282:  CLRF   xD4
0A284:  CLRF   xD5
0A286:  CLRF   xD6
0A288:  CLRF   xD7
0A28A:  CLRF   xD8
0A28C:  CLRF   xD9
0A28E:  CLRF   xDA
0A290:  CLRF   xDB
0A292:  CLRF   xDC
0A294:  CLRF   xDD
0A296:  CLRF   xDE
0A298:  CLRF   xDF
0A29A:  CLRF   xE0
0A29C:  CLRF   xE1
....................     port2.port_num = 2;
0A29E:  MOVLW  02
0A2A0:  MOVLB  3
0A2A2:  MOVWF  xDE
....................     port2.sweep_step = 0;
0A2A4:  CLRF   xE0
0A2A6:  CLRF   xDF
....................     port2.active = 1;
0A2A8:  MOVLB  5
0A2AA:  BSF    xE1.0
.................... 
....................     int16 count = 0;
0A2AC:  CLRF   xE3
0A2AE:  CLRF   xE2
....................     
....................     // Initialize DACs to 0
....................     mcp4901_1_write(1);
0A2B0:  MOVLB  9
0A2B2:  CLRF   xCE
0A2B4:  MOVLW  01
0A2B6:  MOVWF  xCD
0A2B8:  MOVLB  0
0A2BA:  CALL   2872
....................     mcp4901_2_write(1);
0A2BE:  MOVLB  9
0A2C0:  CLRF   xCE
0A2C2:  MOVLW  01
0A2C4:  MOVWF  xCD
0A2C6:  MOVLB  0
0A2C8:  CALL   28B0
.................... 
....................     unsigned int16 volt;
....................     unsigned int16 curr;
....................     iv_env_t measured_data = create_meas_data();
0A2CC:  CALL   90E2
0A2D0:  MOVFF  02,03
0A2D4:  MOVF   01,W
0A2D6:  MOVWF  FE1
0A2D8:  MOVFF  03,FE2
0A2DC:  MOVLW  05
0A2DE:  MOVWF  FEA
0A2E0:  MOVLW  E8
0A2E2:  MOVWF  FE9
0A2E4:  MOVLW  0C
0A2E6:  MOVWF  01
0A2E8:  MOVFF  FE6,FEE
0A2EC:  DECFSZ 01,F
0A2EE:  GOTO   A2E8
....................     while (port1.active || port2.active)
0A2F2:  MOVLB  3
0A2F4:  BTFSS  xDD.0
0A2F6:  BRA    A2FE
0A2F8:  MOVLB  0
0A2FA:  GOTO   A30E
0A2FE:  MOVLB  0
0A300:  MOVLB  5
0A302:  BTFSC  xE1.0
0A304:  BRA    A30C
0A306:  MOVLB  0
0A308:  GOTO   A65E
0A30C:  MOVLB  0
....................     {
....................         mcp4901_1_write(count);
0A30E:  MOVFF  5E3,9CE
0A312:  MOVFF  5E2,9CD
0A316:  CALL   2872
....................         mcp4901_2_write(count);
0A31A:  MOVFF  5E3,9CE
0A31E:  MOVFF  5E2,9CD
0A322:  CALL   28B0
....................         delay_us(1); 
0A326:  BRA    A328
0A328:  BRA    A32A
....................         if (port1.active) {
0A32A:  MOVLB  3
0A32C:  BTFSC  xDD.0
0A32E:  BRA    A336
0A330:  MOVLB  0
0A332:  GOTO   A4AC
0A336:  MOVLB  0
....................             volt = ad7490_read(ADC_CIGS1_AMP);
0A338:  MOVLW  02
0A33A:  MOVLB  9
0A33C:  MOVWF  xDF
0A33E:  MOVLB  0
0A340:  CALL   24C2
0A344:  MOVFF  02,5E5
0A348:  MOVFF  01,5E4
....................             curr = ad7490_read(ADC_CIGS1_CURR);
0A34C:  MOVLW  01
0A34E:  MOVLB  9
0A350:  MOVWF  xDF
0A352:  MOVLB  0
0A354:  CALL   24C2
0A358:  MOVFF  02,5E7
0A35C:  MOVFF  01,5E6
....................             // ad7490_read_2port(ADC_CIGS1_AMP, ADC_CIGS1_CURR, &volt, &curr);
....................             // fprintf(PC, "%04LX,%04LX,", volt, curr);
....................             port1.data_buffer[count*3]= (volt  >> 4) & 0xFF;
0A360:  MOVFF  5E3,A43
0A364:  MOVFF  5E2,A42
0A368:  MOVLB  A
0A36A:  CLRF   x45
0A36C:  MOVLW  03
0A36E:  MOVWF  x44
0A370:  MOVLB  0
0A372:  CALL   81C0
0A376:  MOVFF  02,5FD
0A37A:  MOVFF  01,5FC
0A37E:  MOVLW  DD
0A380:  MOVLB  5
0A382:  ADDWF  xFC,W
0A384:  MOVWF  FE9
0A386:  MOVLW  01
0A388:  ADDWFC xFD,W
0A38A:  MOVWF  FEA
0A38C:  RRCF   xE5,W
0A38E:  MOVLB  6
0A390:  MOVWF  x01
0A392:  MOVLB  5
0A394:  RRCF   xE4,W
0A396:  MOVLB  6
0A398:  MOVWF  x00
0A39A:  RRCF   x01,F
0A39C:  RRCF   x00,F
0A39E:  RRCF   x01,F
0A3A0:  RRCF   x00,F
0A3A2:  RRCF   x01,F
0A3A4:  RRCF   x00,F
0A3A6:  MOVLW  0F
0A3A8:  ANDWF  x01,F
0A3AA:  MOVF   x00,W
0A3AC:  MOVWF  00
0A3AE:  CLRF   03
0A3B0:  MOVF   00,W
0A3B2:  MOVWF  FEF
....................             port1.data_buffer[count*3+1]= ((volt & 0x0F) << 4) | ((curr >> 8) & 0x0F);
0A3B4:  MOVFF  5E3,A43
0A3B8:  MOVFF  5E2,A42
0A3BC:  MOVLB  A
0A3BE:  CLRF   x45
0A3C0:  MOVLW  03
0A3C2:  MOVWF  x44
0A3C4:  MOVLB  0
0A3C6:  CALL   81C0
0A3CA:  MOVFF  02,5FD
0A3CE:  MOVFF  01,5FC
0A3D2:  MOVLW  01
0A3D4:  MOVLB  5
0A3D6:  ADDWF  xFC,F
0A3D8:  MOVLW  00
0A3DA:  ADDWFC xFD,F
0A3DC:  MOVLW  DD
0A3DE:  ADDWF  xFC,W
0A3E0:  MOVWF  FE9
0A3E2:  MOVLW  01
0A3E4:  ADDWFC xFD,W
0A3E6:  MOVWF  FEA
0A3E8:  MOVF   xE4,W
0A3EA:  ANDLW  0F
0A3EC:  MOVLB  6
0A3EE:  MOVWF  x00
0A3F0:  CLRF   x01
0A3F2:  RLCF   x00,F
0A3F4:  RLCF   x01,F
0A3F6:  RLCF   x00,F
0A3F8:  RLCF   x01,F
0A3FA:  RLCF   x00,F
0A3FC:  RLCF   x01,F
0A3FE:  RLCF   x00,F
0A400:  RLCF   x01,F
0A402:  MOVLW  F0
0A404:  ANDWF  x00,F
0A406:  MOVFF  5E7,602
0A40A:  CLRF   x03
0A40C:  MOVF   x02,W
0A40E:  ANDLW  0F
0A410:  MOVWF  00
0A412:  CLRF   03
0A414:  MOVF   00,W
0A416:  IORWF  x00,W
0A418:  MOVWF  00
0A41A:  MOVF   03,W
0A41C:  IORWF  x01,W
0A41E:  MOVWF  03
0A420:  MOVF   00,W
0A422:  MOVWF  FEF
....................             port1.data_buffer[count*3+2]= curr & 0xFF;
0A424:  MOVFF  5E3,A43
0A428:  MOVFF  5E2,A42
0A42C:  MOVLB  A
0A42E:  CLRF   x45
0A430:  MOVLW  03
0A432:  MOVWF  x44
0A434:  MOVLB  0
0A436:  CALL   81C0
0A43A:  MOVFF  02,5FD
0A43E:  MOVFF  01,5FC
0A442:  MOVLW  02
0A444:  MOVLB  5
0A446:  ADDWF  xFC,F
0A448:  MOVLW  00
0A44A:  ADDWFC xFD,F
0A44C:  MOVLW  DD
0A44E:  ADDWF  xFC,W
0A450:  MOVWF  FE9
0A452:  MOVLW  01
0A454:  ADDWFC xFD,W
0A456:  MOVWF  FEA
0A458:  MOVF   xE6,W
0A45A:  MOVWF  00
0A45C:  CLRF   03
0A45E:  MOVF   00,W
0A460:  MOVWF  FEF
....................             port1.sweep_step = count + 1; 
0A462:  MOVLW  01
0A464:  ADDWF  xE2,W
0A466:  MOVLB  1
0A468:  MOVWF  xDB
0A46A:  MOVLW  00
0A46C:  MOVLB  5
0A46E:  ADDWFC xE3,W
0A470:  MOVLB  1
0A472:  MOVWF  xDC
....................             // fprintf(PC, "%04LX,%04LX,", port1.data_buffer[count].voltage, port1.data_buffer[count].current);
....................             if (curr< curr_limit) {
0A474:  MOVLB  5
0A476:  MOVF   xE7,W
0A478:  MOVLB  1
0A47A:  SUBWF  xD3,W
0A47C:  BTFSC  FD8.0
0A47E:  BRA    A486
0A480:  MOVLB  0
0A482:  GOTO   A4AC
0A486:  MOVLB  0
0A488:  BTFSS  FD8.2
0A48A:  GOTO   A4A2
0A48E:  MOVLB  1
0A490:  MOVF   xD2,W
0A492:  MOVLB  5
0A494:  SUBWF  xE6,W
0A496:  BTFSS  FD8.0
0A498:  BRA    A4A0
0A49A:  MOVLB  0
0A49C:  GOTO   A4AC
0A4A0:  MOVLB  0
....................                 port1.active = 0;
0A4A2:  MOVLB  3
0A4A4:  BCF    xDD.0
....................                 disconnect_port1();
0A4A6:  MOVLB  0
0A4A8:  CALL   9164
....................             }
....................         }
....................         if (port2.active) {
0A4AC:  MOVLB  5
0A4AE:  BTFSC  xE1.0
0A4B0:  BRA    A4B8
0A4B2:  MOVLB  0
0A4B4:  GOTO   A62E
0A4B8:  MOVLB  0
....................             volt = ad7490_read(ADC_CIGS2_AMP);
0A4BA:  MOVLW  06
0A4BC:  MOVLB  9
0A4BE:  MOVWF  xDF
0A4C0:  MOVLB  0
0A4C2:  CALL   24C2
0A4C6:  MOVFF  02,5E5
0A4CA:  MOVFF  01,5E4
....................             curr = ad7490_read(ADC_CIGS2_CURR);
0A4CE:  MOVLW  05
0A4D0:  MOVLB  9
0A4D2:  MOVWF  xDF
0A4D4:  MOVLB  0
0A4D6:  CALL   24C2
0A4DA:  MOVFF  02,5E7
0A4DE:  MOVFF  01,5E6
....................             port2.data_buffer[count*3]= (volt  >> 4) & 0xFF;
0A4E2:  MOVFF  5E3,A43
0A4E6:  MOVFF  5E2,A42
0A4EA:  MOVLB  A
0A4EC:  CLRF   x45
0A4EE:  MOVLW  03
0A4F0:  MOVWF  x44
0A4F2:  MOVLB  0
0A4F4:  CALL   81C0
0A4F8:  MOVFF  02,5FD
0A4FC:  MOVFF  01,5FC
0A500:  MOVLW  E1
0A502:  MOVLB  5
0A504:  ADDWF  xFC,W
0A506:  MOVWF  FE9
0A508:  MOVLW  03
0A50A:  ADDWFC xFD,W
0A50C:  MOVWF  FEA
0A50E:  RRCF   xE5,W
0A510:  MOVLB  6
0A512:  MOVWF  x01
0A514:  MOVLB  5
0A516:  RRCF   xE4,W
0A518:  MOVLB  6
0A51A:  MOVWF  x00
0A51C:  RRCF   x01,F
0A51E:  RRCF   x00,F
0A520:  RRCF   x01,F
0A522:  RRCF   x00,F
0A524:  RRCF   x01,F
0A526:  RRCF   x00,F
0A528:  MOVLW  0F
0A52A:  ANDWF  x01,F
0A52C:  MOVF   x00,W
0A52E:  MOVWF  00
0A530:  CLRF   03
0A532:  MOVF   00,W
0A534:  MOVWF  FEF
....................             port2.data_buffer[count*3+1]= ((volt & 0x0F) << 4) | ((curr >> 8) & 0x0F);
0A536:  MOVFF  5E3,A43
0A53A:  MOVFF  5E2,A42
0A53E:  MOVLB  A
0A540:  CLRF   x45
0A542:  MOVLW  03
0A544:  MOVWF  x44
0A546:  MOVLB  0
0A548:  CALL   81C0
0A54C:  MOVFF  02,5FD
0A550:  MOVFF  01,5FC
0A554:  MOVLW  01
0A556:  MOVLB  5
0A558:  ADDWF  xFC,F
0A55A:  MOVLW  00
0A55C:  ADDWFC xFD,F
0A55E:  MOVLW  E1
0A560:  ADDWF  xFC,W
0A562:  MOVWF  FE9
0A564:  MOVLW  03
0A566:  ADDWFC xFD,W
0A568:  MOVWF  FEA
0A56A:  MOVF   xE4,W
0A56C:  ANDLW  0F
0A56E:  MOVLB  6
0A570:  MOVWF  x00
0A572:  CLRF   x01
0A574:  RLCF   x00,F
0A576:  RLCF   x01,F
0A578:  RLCF   x00,F
0A57A:  RLCF   x01,F
0A57C:  RLCF   x00,F
0A57E:  RLCF   x01,F
0A580:  RLCF   x00,F
0A582:  RLCF   x01,F
0A584:  MOVLW  F0
0A586:  ANDWF  x00,F
0A588:  MOVFF  5E7,602
0A58C:  CLRF   x03
0A58E:  MOVF   x02,W
0A590:  ANDLW  0F
0A592:  MOVWF  00
0A594:  CLRF   03
0A596:  MOVF   00,W
0A598:  IORWF  x00,W
0A59A:  MOVWF  00
0A59C:  MOVF   03,W
0A59E:  IORWF  x01,W
0A5A0:  MOVWF  03
0A5A2:  MOVF   00,W
0A5A4:  MOVWF  FEF
....................             port2.data_buffer[count*3+2]= curr & 0xFF;
0A5A6:  MOVFF  5E3,A43
0A5AA:  MOVFF  5E2,A42
0A5AE:  MOVLB  A
0A5B0:  CLRF   x45
0A5B2:  MOVLW  03
0A5B4:  MOVWF  x44
0A5B6:  MOVLB  0
0A5B8:  CALL   81C0
0A5BC:  MOVFF  02,5FD
0A5C0:  MOVFF  01,5FC
0A5C4:  MOVLW  02
0A5C6:  MOVLB  5
0A5C8:  ADDWF  xFC,F
0A5CA:  MOVLW  00
0A5CC:  ADDWFC xFD,F
0A5CE:  MOVLW  E1
0A5D0:  ADDWF  xFC,W
0A5D2:  MOVWF  FE9
0A5D4:  MOVLW  03
0A5D6:  ADDWFC xFD,W
0A5D8:  MOVWF  FEA
0A5DA:  MOVF   xE6,W
0A5DC:  MOVWF  00
0A5DE:  CLRF   03
0A5E0:  MOVF   00,W
0A5E2:  MOVWF  FEF
....................             port2.sweep_step = count + 1;
0A5E4:  MOVLW  01
0A5E6:  ADDWF  xE2,W
0A5E8:  MOVLB  3
0A5EA:  MOVWF  xDF
0A5EC:  MOVLW  00
0A5EE:  MOVLB  5
0A5F0:  ADDWFC xE3,W
0A5F2:  MOVLB  3
0A5F4:  MOVWF  xE0
....................             if (curr < curr_limit) {
0A5F6:  MOVLB  5
0A5F8:  MOVF   xE7,W
0A5FA:  MOVLB  1
0A5FC:  SUBWF  xD3,W
0A5FE:  BTFSC  FD8.0
0A600:  BRA    A608
0A602:  MOVLB  0
0A604:  GOTO   A62E
0A608:  MOVLB  0
0A60A:  BTFSS  FD8.2
0A60C:  GOTO   A624
0A610:  MOVLB  1
0A612:  MOVF   xD2,W
0A614:  MOVLB  5
0A616:  SUBWF  xE6,W
0A618:  BTFSS  FD8.0
0A61A:  BRA    A622
0A61C:  MOVLB  0
0A61E:  GOTO   A62E
0A622:  MOVLB  0
....................                 port2.active = 0;
0A624:  MOVLB  5
0A626:  BCF    xE1.0
....................                 disconnect_port2();
0A628:  MOVLB  0
0A62A:  CALL   916C
....................             } 
....................         }
....................         count++;
0A62E:  MOVLB  5
0A630:  INCF   xE2,F
0A632:  BTFSC  FD8.2
0A634:  INCF   xE3,F
....................         if (count >= 255) {
0A636:  MOVF   xE3,F
0A638:  BTFSC  FD8.2
0A63A:  BRA    A642
0A63C:  MOVLB  0
0A63E:  GOTO   A656
0A642:  MOVLB  0
0A644:  MOVLB  5
0A646:  MOVF   xE2,W
0A648:  SUBLW  FE
0A64A:  BTFSS  FD8.0
0A64C:  BRA    A654
0A64E:  MOVLB  0
0A650:  GOTO   A65A
0A654:  MOVLB  0
....................             // fprintf(PC, "Maximum step count reached: %ld\r\n", count);
....................             break;
0A656:  GOTO   A65E
....................         }
0A65A:  GOTO   A2F2
....................     }
....................     // unsigned int32 end_time_ms = get_current_msec();
....................     // Ensure all connections are disabled3
....................     disconnect_port1();
0A65E:  CALL   9164
....................     disconnect_port2();
0A662:  CALL   916C
....................     
.................... 
....................     log_meas_data(&measured_data, &port1);
0A666:  MOVLW  05
0A668:  MOVLB  9
0A66A:  MOVWF  xB4
0A66C:  MOVLW  E8
0A66E:  MOVWF  xB3
0A670:  MOVLW  01
0A672:  MOVWF  xB6
0A674:  MOVLW  DA
0A676:  MOVWF  xB5
0A678:  MOVLB  0
0A67A:  CALL   9174
....................     log_meas_data(&measured_data, &port2);
0A67E:  MOVLW  05
0A680:  MOVLB  9
0A682:  MOVWF  xB4
0A684:  MOVLW  E8
0A686:  MOVWF  xB3
0A688:  MOVLW  03
0A68A:  MOVWF  xB6
0A68C:  MOVLW  DE
0A68E:  MOVWF  xB5
0A690:  MOVLB  0
0A692:  CALL   9174
....................     // misf_update_address_area();
....................     unsigned int32 end_time_ms = get_current_msec();
....................     unsigned int32 elapsed_time_ms = end_time_ms - start_time_ms;
0A696:  CALL   9A46
0A69A:  MOVLB  5
0A69C:  CLRF   xF7
0A69E:  CLRF   xF6
0A6A0:  MOVFF  02,5F5
0A6A4:  MOVFF  01,5F4
0A6A8:  MOVLB  1
0A6AA:  MOVF   xD6,W
0A6AC:  MOVLB  5
0A6AE:  SUBWF  xF4,W
0A6B0:  MOVWF  xF8
0A6B2:  MOVLB  1
0A6B4:  MOVF   xD7,W
0A6B6:  MOVLB  5
0A6B8:  SUBWFB xF5,W
0A6BA:  MOVWF  xF9
0A6BC:  MOVLB  1
0A6BE:  MOVF   xD8,W
0A6C0:  MOVLB  5
0A6C2:  SUBWFB xF6,W
0A6C4:  MOVWF  xFA
0A6C6:  MOVLB  1
0A6C8:  MOVF   xD9,W
0A6CA:  MOVLB  5
0A6CC:  SUBWFB xF7,W
0A6CE:  MOVWF  xFB
0A6D0:  MOVLB  0
0A6D2:  RETURN 0
.................... }
.................... 
.................... 
.................... void sweep_port1(unsigned int16 curr_limit)
*
0E8BA:  CALL   3C28
0E8BE:  MOVFF  03,1BE
0E8C2:  MOVFF  02,1BD
0E8C6:  MOVFF  01,1BC
0E8CA:  MOVFF  00,1BB
.................... {
....................     unsigned int32 start_time_ms = get_current_sec();
....................     fputc('.', PC);
0E8CE:  MOVLW  2E
0E8D0:  CALL   90D4
....................     // Enable both CIGS ports
....................     connect_port1();
0E8D4:  CALL   5248
.................... 
....................     // Init Port1
....................     sweep_config_t port1 = {0};
0E8D8:  MOVLB  1
0E8DA:  CLRF   xBF
0E8DC:  CLRF   xC0
0E8DE:  CLRF   xC1
0E8E0:  CLRF   xC2
0E8E2:  CLRF   xC3
0E8E4:  CLRF   xC4
0E8E6:  CLRF   xC5
0E8E8:  CLRF   xC6
0E8EA:  CLRF   xC7
0E8EC:  CLRF   xC8
0E8EE:  CLRF   xC9
0E8F0:  CLRF   xCA
0E8F2:  CLRF   xCB
0E8F4:  CLRF   xCC
0E8F6:  CLRF   xCD
0E8F8:  CLRF   xCE
0E8FA:  CLRF   xCF
0E8FC:  CLRF   xD0
0E8FE:  CLRF   xD1
0E900:  CLRF   xD2
0E902:  CLRF   xD3
0E904:  CLRF   xD4
0E906:  CLRF   xD5
0E908:  CLRF   xD6
0E90A:  CLRF   xD7
0E90C:  CLRF   xD8
0E90E:  CLRF   xD9
0E910:  CLRF   xDA
0E912:  CLRF   xDB
0E914:  CLRF   xDC
0E916:  CLRF   xDD
0E918:  CLRF   xDE
0E91A:  CLRF   xDF
0E91C:  CLRF   xE0
0E91E:  CLRF   xE1
0E920:  CLRF   xE2
0E922:  CLRF   xE3
0E924:  CLRF   xE4
0E926:  CLRF   xE5
0E928:  CLRF   xE6
0E92A:  CLRF   xE7
0E92C:  CLRF   xE8
0E92E:  CLRF   xE9
0E930:  CLRF   xEA
0E932:  CLRF   xEB
0E934:  CLRF   xEC
0E936:  CLRF   xED
0E938:  CLRF   xEE
0E93A:  CLRF   xEF
0E93C:  CLRF   xF0
0E93E:  CLRF   xF1
0E940:  CLRF   xF2
0E942:  CLRF   xF3
0E944:  CLRF   xF4
0E946:  CLRF   xF5
0E948:  CLRF   xF6
0E94A:  CLRF   xF7
0E94C:  CLRF   xF8
0E94E:  CLRF   xF9
0E950:  CLRF   xFA
0E952:  CLRF   xFB
0E954:  CLRF   xFC
0E956:  CLRF   xFD
0E958:  CLRF   xFE
0E95A:  CLRF   xFF
0E95C:  MOVLB  2
0E95E:  CLRF   x00
0E960:  CLRF   x01
0E962:  CLRF   x02
0E964:  CLRF   x03
0E966:  CLRF   x04
0E968:  CLRF   x05
0E96A:  CLRF   x06
0E96C:  CLRF   x07
0E96E:  CLRF   x08
0E970:  CLRF   x09
0E972:  CLRF   x0A
0E974:  CLRF   x0B
0E976:  CLRF   x0C
0E978:  CLRF   x0D
0E97A:  CLRF   x0E
0E97C:  CLRF   x0F
0E97E:  CLRF   x10
0E980:  CLRF   x11
0E982:  CLRF   x12
0E984:  CLRF   x13
0E986:  CLRF   x14
0E988:  CLRF   x15
0E98A:  CLRF   x16
0E98C:  CLRF   x17
0E98E:  CLRF   x18
0E990:  CLRF   x19
0E992:  CLRF   x1A
0E994:  CLRF   x1B
0E996:  CLRF   x1C
0E998:  CLRF   x1D
0E99A:  CLRF   x1E
0E99C:  CLRF   x1F
0E99E:  CLRF   x20
0E9A0:  CLRF   x21
0E9A2:  CLRF   x22
0E9A4:  CLRF   x23
0E9A6:  CLRF   x24
0E9A8:  CLRF   x25
0E9AA:  CLRF   x26
0E9AC:  CLRF   x27
0E9AE:  CLRF   x28
0E9B0:  CLRF   x29
0E9B2:  CLRF   x2A
0E9B4:  CLRF   x2B
0E9B6:  CLRF   x2C
0E9B8:  CLRF   x2D
0E9BA:  CLRF   x2E
0E9BC:  CLRF   x2F
0E9BE:  CLRF   x30
0E9C0:  CLRF   x31
0E9C2:  CLRF   x32
0E9C4:  CLRF   x33
0E9C6:  CLRF   x34
0E9C8:  CLRF   x35
0E9CA:  CLRF   x36
0E9CC:  CLRF   x37
0E9CE:  CLRF   x38
0E9D0:  CLRF   x39
0E9D2:  CLRF   x3A
0E9D4:  CLRF   x3B
0E9D6:  CLRF   x3C
0E9D8:  CLRF   x3D
0E9DA:  CLRF   x3E
0E9DC:  CLRF   x3F
0E9DE:  CLRF   x40
0E9E0:  CLRF   x41
0E9E2:  CLRF   x42
0E9E4:  CLRF   x43
0E9E6:  CLRF   x44
0E9E8:  CLRF   x45
0E9EA:  CLRF   x46
0E9EC:  CLRF   x47
0E9EE:  CLRF   x48
0E9F0:  CLRF   x49
0E9F2:  CLRF   x4A
0E9F4:  CLRF   x4B
0E9F6:  CLRF   x4C
0E9F8:  CLRF   x4D
0E9FA:  CLRF   x4E
0E9FC:  CLRF   x4F
0E9FE:  CLRF   x50
0EA00:  CLRF   x51
0EA02:  CLRF   x52
0EA04:  CLRF   x53
0EA06:  CLRF   x54
0EA08:  CLRF   x55
0EA0A:  CLRF   x56
0EA0C:  CLRF   x57
0EA0E:  CLRF   x58
0EA10:  CLRF   x59
0EA12:  CLRF   x5A
0EA14:  CLRF   x5B
0EA16:  CLRF   x5C
0EA18:  CLRF   x5D
0EA1A:  CLRF   x5E
0EA1C:  CLRF   x5F
0EA1E:  CLRF   x60
0EA20:  CLRF   x61
0EA22:  CLRF   x62
0EA24:  CLRF   x63
0EA26:  CLRF   x64
0EA28:  CLRF   x65
0EA2A:  CLRF   x66
0EA2C:  CLRF   x67
0EA2E:  CLRF   x68
0EA30:  CLRF   x69
0EA32:  CLRF   x6A
0EA34:  CLRF   x6B
0EA36:  CLRF   x6C
0EA38:  CLRF   x6D
0EA3A:  CLRF   x6E
0EA3C:  CLRF   x6F
0EA3E:  CLRF   x70
0EA40:  CLRF   x71
0EA42:  CLRF   x72
0EA44:  CLRF   x73
0EA46:  CLRF   x74
0EA48:  CLRF   x75
0EA4A:  CLRF   x76
0EA4C:  CLRF   x77
0EA4E:  CLRF   x78
0EA50:  CLRF   x79
0EA52:  CLRF   x7A
0EA54:  CLRF   x7B
0EA56:  CLRF   x7C
0EA58:  CLRF   x7D
0EA5A:  CLRF   x7E
0EA5C:  CLRF   x7F
0EA5E:  CLRF   x80
0EA60:  CLRF   x81
0EA62:  CLRF   x82
0EA64:  CLRF   x83
0EA66:  CLRF   x84
0EA68:  CLRF   x85
0EA6A:  CLRF   x86
0EA6C:  CLRF   x87
0EA6E:  CLRF   x88
0EA70:  CLRF   x89
0EA72:  CLRF   x8A
0EA74:  CLRF   x8B
0EA76:  CLRF   x8C
0EA78:  CLRF   x8D
0EA7A:  CLRF   x8E
0EA7C:  CLRF   x8F
0EA7E:  CLRF   x90
0EA80:  CLRF   x91
0EA82:  CLRF   x92
0EA84:  CLRF   x93
0EA86:  CLRF   x94
0EA88:  CLRF   x95
0EA8A:  CLRF   x96
0EA8C:  CLRF   x97
0EA8E:  CLRF   x98
0EA90:  CLRF   x99
0EA92:  CLRF   x9A
0EA94:  CLRF   x9B
0EA96:  CLRF   x9C
0EA98:  CLRF   x9D
0EA9A:  CLRF   x9E
0EA9C:  CLRF   x9F
0EA9E:  CLRF   xA0
0EAA0:  CLRF   xA1
0EAA2:  CLRF   xA2
0EAA4:  CLRF   xA3
0EAA6:  CLRF   xA4
0EAA8:  CLRF   xA5
0EAAA:  CLRF   xA6
0EAAC:  CLRF   xA7
0EAAE:  CLRF   xA8
0EAB0:  CLRF   xA9
0EAB2:  CLRF   xAA
0EAB4:  CLRF   xAB
0EAB6:  CLRF   xAC
0EAB8:  CLRF   xAD
0EABA:  CLRF   xAE
0EABC:  CLRF   xAF
0EABE:  CLRF   xB0
0EAC0:  CLRF   xB1
0EAC2:  CLRF   xB2
0EAC4:  CLRF   xB3
0EAC6:  CLRF   xB4
0EAC8:  CLRF   xB5
0EACA:  CLRF   xB6
0EACC:  CLRF   xB7
0EACE:  CLRF   xB8
0EAD0:  CLRF   xB9
0EAD2:  CLRF   xBA
0EAD4:  CLRF   xBB
0EAD6:  CLRF   xBC
0EAD8:  CLRF   xBD
0EADA:  CLRF   xBE
0EADC:  CLRF   xBF
0EADE:  CLRF   xC0
0EAE0:  CLRF   xC1
0EAE2:  CLRF   xC2
0EAE4:  CLRF   xC3
0EAE6:  CLRF   xC4
0EAE8:  CLRF   xC5
0EAEA:  CLRF   xC6
0EAEC:  CLRF   xC7
0EAEE:  CLRF   xC8
0EAF0:  CLRF   xC9
0EAF2:  CLRF   xCA
0EAF4:  CLRF   xCB
0EAF6:  CLRF   xCC
0EAF8:  CLRF   xCD
0EAFA:  CLRF   xCE
0EAFC:  CLRF   xCF
0EAFE:  CLRF   xD0
0EB00:  CLRF   xD1
0EB02:  CLRF   xD2
0EB04:  CLRF   xD3
0EB06:  CLRF   xD4
0EB08:  CLRF   xD5
0EB0A:  CLRF   xD6
0EB0C:  CLRF   xD7
0EB0E:  CLRF   xD8
0EB10:  CLRF   xD9
0EB12:  CLRF   xDA
0EB14:  CLRF   xDB
0EB16:  CLRF   xDC
0EB18:  CLRF   xDD
0EB1A:  CLRF   xDE
0EB1C:  CLRF   xDF
0EB1E:  CLRF   xE0
0EB20:  CLRF   xE1
0EB22:  CLRF   xE2
0EB24:  CLRF   xE3
0EB26:  CLRF   xE4
0EB28:  CLRF   xE5
0EB2A:  CLRF   xE6
0EB2C:  CLRF   xE7
0EB2E:  CLRF   xE8
0EB30:  CLRF   xE9
0EB32:  CLRF   xEA
0EB34:  CLRF   xEB
0EB36:  CLRF   xEC
0EB38:  CLRF   xED
0EB3A:  CLRF   xEE
0EB3C:  CLRF   xEF
0EB3E:  CLRF   xF0
0EB40:  CLRF   xF1
0EB42:  CLRF   xF2
0EB44:  CLRF   xF3
0EB46:  CLRF   xF4
0EB48:  CLRF   xF5
0EB4A:  CLRF   xF6
0EB4C:  CLRF   xF7
0EB4E:  CLRF   xF8
0EB50:  CLRF   xF9
0EB52:  CLRF   xFA
0EB54:  CLRF   xFB
0EB56:  CLRF   xFC
0EB58:  CLRF   xFD
0EB5A:  CLRF   xFE
0EB5C:  CLRF   xFF
0EB5E:  MOVLB  3
0EB60:  CLRF   x00
0EB62:  CLRF   x01
0EB64:  CLRF   x02
0EB66:  CLRF   x03
0EB68:  CLRF   x04
0EB6A:  CLRF   x05
0EB6C:  CLRF   x06
0EB6E:  CLRF   x07
0EB70:  CLRF   x08
0EB72:  CLRF   x09
0EB74:  CLRF   x0A
0EB76:  CLRF   x0B
0EB78:  CLRF   x0C
0EB7A:  CLRF   x0D
0EB7C:  CLRF   x0E
0EB7E:  CLRF   x0F
0EB80:  CLRF   x10
0EB82:  CLRF   x11
0EB84:  CLRF   x12
0EB86:  CLRF   x13
0EB88:  CLRF   x14
0EB8A:  CLRF   x15
0EB8C:  CLRF   x16
0EB8E:  CLRF   x17
0EB90:  CLRF   x18
0EB92:  CLRF   x19
0EB94:  CLRF   x1A
0EB96:  CLRF   x1B
0EB98:  CLRF   x1C
0EB9A:  CLRF   x1D
0EB9C:  CLRF   x1E
0EB9E:  CLRF   x1F
0EBA0:  CLRF   x20
0EBA2:  CLRF   x21
0EBA4:  CLRF   x22
0EBA6:  CLRF   x23
0EBA8:  CLRF   x24
0EBAA:  CLRF   x25
0EBAC:  CLRF   x26
0EBAE:  CLRF   x27
0EBB0:  CLRF   x28
0EBB2:  CLRF   x29
0EBB4:  CLRF   x2A
0EBB6:  CLRF   x2B
0EBB8:  CLRF   x2C
0EBBA:  CLRF   x2D
0EBBC:  CLRF   x2E
0EBBE:  CLRF   x2F
0EBC0:  CLRF   x30
0EBC2:  CLRF   x31
0EBC4:  CLRF   x32
0EBC6:  CLRF   x33
0EBC8:  CLRF   x34
0EBCA:  CLRF   x35
0EBCC:  CLRF   x36
0EBCE:  CLRF   x37
0EBD0:  CLRF   x38
0EBD2:  CLRF   x39
0EBD4:  CLRF   x3A
0EBD6:  CLRF   x3B
0EBD8:  CLRF   x3C
0EBDA:  CLRF   x3D
0EBDC:  CLRF   x3E
0EBDE:  CLRF   x3F
0EBE0:  CLRF   x40
0EBE2:  CLRF   x41
0EBE4:  CLRF   x42
0EBE6:  CLRF   x43
0EBE8:  CLRF   x44
0EBEA:  CLRF   x45
0EBEC:  CLRF   x46
0EBEE:  CLRF   x47
0EBF0:  CLRF   x48
0EBF2:  CLRF   x49
0EBF4:  CLRF   x4A
0EBF6:  CLRF   x4B
0EBF8:  CLRF   x4C
0EBFA:  CLRF   x4D
0EBFC:  CLRF   x4E
0EBFE:  CLRF   x4F
0EC00:  CLRF   x50
0EC02:  CLRF   x51
0EC04:  CLRF   x52
0EC06:  CLRF   x53
0EC08:  CLRF   x54
0EC0A:  CLRF   x55
0EC0C:  CLRF   x56
0EC0E:  CLRF   x57
0EC10:  CLRF   x58
0EC12:  CLRF   x59
0EC14:  CLRF   x5A
0EC16:  CLRF   x5B
0EC18:  CLRF   x5C
0EC1A:  CLRF   x5D
0EC1C:  CLRF   x5E
0EC1E:  CLRF   x5F
0EC20:  CLRF   x60
0EC22:  CLRF   x61
0EC24:  CLRF   x62
0EC26:  CLRF   x63
0EC28:  CLRF   x64
0EC2A:  CLRF   x65
0EC2C:  CLRF   x66
0EC2E:  CLRF   x67
0EC30:  CLRF   x68
0EC32:  CLRF   x69
0EC34:  CLRF   x6A
0EC36:  CLRF   x6B
0EC38:  CLRF   x6C
0EC3A:  CLRF   x6D
0EC3C:  CLRF   x6E
0EC3E:  CLRF   x6F
0EC40:  CLRF   x70
0EC42:  CLRF   x71
0EC44:  CLRF   x72
0EC46:  CLRF   x73
0EC48:  CLRF   x74
0EC4A:  CLRF   x75
0EC4C:  CLRF   x76
0EC4E:  CLRF   x77
0EC50:  CLRF   x78
0EC52:  CLRF   x79
0EC54:  CLRF   x7A
0EC56:  CLRF   x7B
0EC58:  CLRF   x7C
0EC5A:  CLRF   x7D
0EC5C:  CLRF   x7E
0EC5E:  CLRF   x7F
0EC60:  CLRF   x80
0EC62:  CLRF   x81
0EC64:  CLRF   x82
0EC66:  CLRF   x83
0EC68:  CLRF   x84
0EC6A:  CLRF   x85
0EC6C:  CLRF   x86
0EC6E:  CLRF   x87
0EC70:  CLRF   x88
0EC72:  CLRF   x89
0EC74:  CLRF   x8A
0EC76:  CLRF   x8B
0EC78:  CLRF   x8C
0EC7A:  CLRF   x8D
0EC7C:  CLRF   x8E
0EC7E:  CLRF   x8F
0EC80:  CLRF   x90
0EC82:  CLRF   x91
0EC84:  CLRF   x92
0EC86:  CLRF   x93
0EC88:  CLRF   x94
0EC8A:  CLRF   x95
0EC8C:  CLRF   x96
0EC8E:  CLRF   x97
0EC90:  CLRF   x98
0EC92:  CLRF   x99
0EC94:  CLRF   x9A
0EC96:  CLRF   x9B
0EC98:  CLRF   x9C
0EC9A:  CLRF   x9D
0EC9C:  CLRF   x9E
0EC9E:  CLRF   x9F
0ECA0:  CLRF   xA0
0ECA2:  CLRF   xA1
0ECA4:  CLRF   xA2
0ECA6:  CLRF   xA3
0ECA8:  CLRF   xA4
0ECAA:  CLRF   xA5
0ECAC:  CLRF   xA6
0ECAE:  CLRF   xA7
0ECB0:  CLRF   xA8
0ECB2:  CLRF   xA9
0ECB4:  CLRF   xAA
0ECB6:  CLRF   xAB
0ECB8:  CLRF   xAC
0ECBA:  CLRF   xAD
0ECBC:  CLRF   xAE
0ECBE:  CLRF   xAF
0ECC0:  CLRF   xB0
0ECC2:  CLRF   xB1
0ECC4:  CLRF   xB2
0ECC6:  CLRF   xB3
0ECC8:  CLRF   xB4
0ECCA:  CLRF   xB5
0ECCC:  CLRF   xB6
0ECCE:  CLRF   xB7
0ECD0:  CLRF   xB8
0ECD2:  CLRF   xB9
0ECD4:  CLRF   xBA
0ECD6:  CLRF   xBB
0ECD8:  CLRF   xBC
0ECDA:  CLRF   xBD
0ECDC:  CLRF   xBE
0ECDE:  CLRF   xBF
0ECE0:  CLRF   xC0
0ECE2:  CLRF   xC1
0ECE4:  CLRF   xC2
....................     port1.port_num = 1;
0ECE6:  MOVLW  01
0ECE8:  MOVLB  1
0ECEA:  MOVWF  xBF
....................     port1.sweep_step = 0;
0ECEC:  CLRF   xC1
0ECEE:  CLRF   xC0
....................     port1.active = 1;
0ECF0:  MOVLB  3
0ECF2:  BSF    xC2.0
.................... 
....................     int16 count = 0;
0ECF4:  CLRF   xC4
0ECF6:  CLRF   xC3
....................     
....................     // Initialize DACs to 0
....................     mcp4901_1_write(1);
0ECF8:  MOVLB  9
0ECFA:  CLRF   xCE
0ECFC:  MOVLW  01
0ECFE:  MOVWF  xCD
0ED00:  MOVLB  0
0ED02:  CALL   2872
....................     unsigned int16 volt;
....................     unsigned int16 curr;
....................     iv_env_t measured_data = create_meas_data();
0ED06:  CALL   90E2
0ED0A:  MOVFF  02,03
0ED0E:  MOVF   01,W
0ED10:  MOVWF  FE1
0ED12:  MOVFF  03,FE2
0ED16:  MOVLW  03
0ED18:  MOVWF  FEA
0ED1A:  MOVLW  C9
0ED1C:  MOVWF  FE9
0ED1E:  MOVLW  0C
0ED20:  MOVWF  01
0ED22:  MOVFF  FE6,FEE
0ED26:  DECFSZ 01,F
0ED28:  GOTO   ED22
....................     while (port1.active)
0ED2C:  MOVLB  3
0ED2E:  BTFSC  xC2.0
0ED30:  BRA    ED38
0ED32:  MOVLB  0
0ED34:  GOTO   EEF4
0ED38:  MOVLB  0
....................     {
....................         mcp4901_1_write(count);
0ED3A:  MOVFF  3C4,9CE
0ED3E:  MOVFF  3C3,9CD
0ED42:  CALL   2872
....................         // mcp4901_2_write(count);
....................         delay_us(1); 
0ED46:  BRA    ED48
0ED48:  BRA    ED4A
....................         if (port1.active) {
0ED4A:  MOVLB  3
0ED4C:  BTFSC  xC2.0
0ED4E:  BRA    ED56
0ED50:  MOVLB  0
0ED52:  GOTO   EEC4
0ED56:  MOVLB  0
....................             volt = ad7490_read(ADC_CIGS1_AMP);
0ED58:  MOVLW  02
0ED5A:  MOVLB  9
0ED5C:  MOVWF  xDF
0ED5E:  MOVLB  0
0ED60:  CALL   24C2
0ED64:  MOVFF  02,3C6
0ED68:  MOVFF  01,3C5
....................             curr = ad7490_read(ADC_CIGS1_CURR);
0ED6C:  MOVLW  01
0ED6E:  MOVLB  9
0ED70:  MOVWF  xDF
0ED72:  MOVLB  0
0ED74:  CALL   24C2
0ED78:  MOVFF  02,3C8
0ED7C:  MOVFF  01,3C7
....................             // ad7490_read_2port(ADC_CIGS1_AMP, ADC_CIGS1_CURR, &volt, &curr);
....................             // fprintf(PC, "%04LX,%04LX,", volt, curr);
....................             port1.data_buffer[count*3]= (volt  >> 4) & 0xFF;
0ED80:  MOVFF  3C4,A43
0ED84:  MOVFF  3C3,A42
0ED88:  MOVLB  A
0ED8A:  CLRF   x45
0ED8C:  MOVLW  03
0ED8E:  MOVWF  x44
0ED90:  MOVLB  0
0ED92:  CALL   81C0
0ED96:  MOVFF  02,3D6
0ED9A:  MOVFF  01,3D5
0ED9E:  MOVLW  C2
0EDA0:  MOVLB  3
0EDA2:  ADDWF  xD5,W
0EDA4:  MOVWF  FE9
0EDA6:  MOVLW  01
0EDA8:  ADDWFC xD6,W
0EDAA:  MOVWF  FEA
0EDAC:  RRCF   xC6,W
0EDAE:  MOVWF  xDA
0EDB0:  RRCF   xC5,W
0EDB2:  MOVWF  xD9
0EDB4:  RRCF   xDA,F
0EDB6:  RRCF   xD9,F
0EDB8:  RRCF   xDA,F
0EDBA:  RRCF   xD9,F
0EDBC:  RRCF   xDA,F
0EDBE:  RRCF   xD9,F
0EDC0:  MOVLW  0F
0EDC2:  ANDWF  xDA,F
0EDC4:  MOVF   xD9,W
0EDC6:  MOVWF  00
0EDC8:  CLRF   03
0EDCA:  MOVF   00,W
0EDCC:  MOVWF  FEF
....................             port1.data_buffer[count*3+1]= ((volt & 0x0F) << 4) | ((curr >> 8) & 0x0F);
0EDCE:  MOVFF  3C4,A43
0EDD2:  MOVFF  3C3,A42
0EDD6:  MOVLB  A
0EDD8:  CLRF   x45
0EDDA:  MOVLW  03
0EDDC:  MOVWF  x44
0EDDE:  MOVLB  0
0EDE0:  CALL   81C0
0EDE4:  MOVFF  02,3D6
0EDE8:  MOVFF  01,3D5
0EDEC:  MOVLW  01
0EDEE:  MOVLB  3
0EDF0:  ADDWF  xD5,F
0EDF2:  MOVLW  00
0EDF4:  ADDWFC xD6,F
0EDF6:  MOVLW  C2
0EDF8:  ADDWF  xD5,W
0EDFA:  MOVWF  FE9
0EDFC:  MOVLW  01
0EDFE:  ADDWFC xD6,W
0EE00:  MOVWF  FEA
0EE02:  MOVF   xC5,W
0EE04:  ANDLW  0F
0EE06:  MOVWF  xD9
0EE08:  CLRF   xDA
0EE0A:  RLCF   xD9,F
0EE0C:  RLCF   xDA,F
0EE0E:  RLCF   xD9,F
0EE10:  RLCF   xDA,F
0EE12:  RLCF   xD9,F
0EE14:  RLCF   xDA,F
0EE16:  RLCF   xD9,F
0EE18:  RLCF   xDA,F
0EE1A:  MOVLW  F0
0EE1C:  ANDWF  xD9,F
0EE1E:  MOVFF  3C8,3DB
0EE22:  CLRF   xDC
0EE24:  MOVF   xDB,W
0EE26:  ANDLW  0F
0EE28:  MOVWF  00
0EE2A:  CLRF   03
0EE2C:  MOVF   00,W
0EE2E:  IORWF  xD9,W
0EE30:  MOVWF  00
0EE32:  MOVF   03,W
0EE34:  IORWF  xDA,W
0EE36:  MOVWF  03
0EE38:  MOVF   00,W
0EE3A:  MOVWF  FEF
....................             port1.data_buffer[count*3+2]= curr & 0xFF;
0EE3C:  MOVFF  3C4,A43
0EE40:  MOVFF  3C3,A42
0EE44:  MOVLB  A
0EE46:  CLRF   x45
0EE48:  MOVLW  03
0EE4A:  MOVWF  x44
0EE4C:  MOVLB  0
0EE4E:  CALL   81C0
0EE52:  MOVFF  02,3D6
0EE56:  MOVFF  01,3D5
0EE5A:  MOVLW  02
0EE5C:  MOVLB  3
0EE5E:  ADDWF  xD5,F
0EE60:  MOVLW  00
0EE62:  ADDWFC xD6,F
0EE64:  MOVLW  C2
0EE66:  ADDWF  xD5,W
0EE68:  MOVWF  FE9
0EE6A:  MOVLW  01
0EE6C:  ADDWFC xD6,W
0EE6E:  MOVWF  FEA
0EE70:  MOVF   xC7,W
0EE72:  MOVWF  00
0EE74:  CLRF   03
0EE76:  MOVF   00,W
0EE78:  MOVWF  FEF
....................             port1.sweep_step = count + 1; 
0EE7A:  MOVLW  01
0EE7C:  ADDWF  xC3,W
0EE7E:  MOVLB  1
0EE80:  MOVWF  xC0
0EE82:  MOVLW  00
0EE84:  MOVLB  3
0EE86:  ADDWFC xC4,W
0EE88:  MOVLB  1
0EE8A:  MOVWF  xC1
....................             // fprintf(PC, "%04LX,%04LX,", port1.data_buffer[count].voltage, port1.data_buffer[count].current);
....................             if (curr< curr_limit) {
0EE8C:  MOVLB  3
0EE8E:  MOVF   xC8,W
0EE90:  MOVLB  1
0EE92:  SUBWF  xBA,W
0EE94:  BTFSC  FD8.0
0EE96:  BRA    EE9E
0EE98:  MOVLB  0
0EE9A:  GOTO   EEC4
0EE9E:  MOVLB  0
0EEA0:  BTFSS  FD8.2
0EEA2:  GOTO   EEBA
0EEA6:  MOVLB  1
0EEA8:  MOVF   xB9,W
0EEAA:  MOVLB  3
0EEAC:  SUBWF  xC7,W
0EEAE:  BTFSS  FD8.0
0EEB0:  BRA    EEB8
0EEB2:  MOVLB  0
0EEB4:  GOTO   EEC4
0EEB8:  MOVLB  0
....................                 port1.active = 0;
0EEBA:  MOVLB  3
0EEBC:  BCF    xC2.0
....................                 disconnect_port1();
0EEBE:  MOVLB  0
0EEC0:  CALL   9164
....................             }
....................         }
....................         count++;
0EEC4:  MOVLB  3
0EEC6:  INCF   xC3,F
0EEC8:  BTFSC  FD8.2
0EECA:  INCF   xC4,F
....................         if (count >= 255) {
0EECC:  MOVF   xC4,F
0EECE:  BTFSC  FD8.2
0EED0:  BRA    EED8
0EED2:  MOVLB  0
0EED4:  GOTO   EEEC
0EED8:  MOVLB  0
0EEDA:  MOVLB  3
0EEDC:  MOVF   xC3,W
0EEDE:  SUBLW  FE
0EEE0:  BTFSS  FD8.0
0EEE2:  BRA    EEEA
0EEE4:  MOVLB  0
0EEE6:  GOTO   EEF0
0EEEA:  MOVLB  0
....................             // fprintf(PC, "Maximum step count reached: %ld\r\n", count);
....................             break;
0EEEC:  GOTO   EEF4
....................         }
0EEF0:  GOTO   ED2C
....................     }
....................     // unsigned int32 end_time_ms = get_current_msec();
....................     // Ensure all connections are disabled3
....................     disconnect_port1();
0EEF4:  CALL   9164
....................     log_meas_data(&measured_data, &port1);
0EEF8:  MOVLW  03
0EEFA:  MOVLB  9
0EEFC:  MOVWF  xB4
0EEFE:  MOVLW  C9
0EF00:  MOVWF  xB3
0EF02:  MOVLW  01
0EF04:  MOVWF  xB6
0EF06:  MOVLW  BF
0EF08:  MOVWF  xB5
0EF0A:  MOVLB  0
0EF0C:  CALL   9174
0EF10:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... 
.................... void log_meas_data(iv_env_t *measured_data_ptr, sweep_config_t *port_data_ptr)
*
091F6:  MOVLW  09
091F8:  MOVWF  xF8
091FA:  MOVLW  B7
091FC:  MOVWF  xF7
.................... {
....................     iv_data_packet_t data_packet = {0};
*
09174:  MOVLB  9
09176:  CLRF   xB7
09178:  CLRF   xB8
0917A:  CLRF   xB9
0917C:  CLRF   xBA
0917E:  CLRF   xBB
09180:  CLRF   xBC
09182:  CLRF   xBD
09184:  CLRF   xBE
09186:  CLRF   xBF
09188:  CLRF   xC0
0918A:  CLRF   xC1
0918C:  CLRF   xC2
0918E:  CLRF   xC3
09190:  CLRF   xC4
09192:  CLRF   xC5
09194:  CLRF   xC6
09196:  CLRF   xC7
09198:  CLRF   xC8
0919A:  CLRF   xC9
0919C:  CLRF   xCA
0919E:  CLRF   xCB
091A0:  CLRF   xCC
091A2:  CLRF   xCD
091A4:  CLRF   xCE
091A6:  CLRF   xCF
091A8:  CLRF   xD0
091AA:  CLRF   xD1
091AC:  CLRF   xD2
091AE:  CLRF   xD3
091B0:  CLRF   xD4
091B2:  CLRF   xD5
091B4:  CLRF   xD6
091B6:  CLRF   xD7
091B8:  CLRF   xD8
091BA:  CLRF   xD9
091BC:  CLRF   xDA
091BE:  CLRF   xDB
091C0:  CLRF   xDC
091C2:  CLRF   xDD
091C4:  CLRF   xDE
091C6:  CLRF   xDF
091C8:  CLRF   xE0
091CA:  CLRF   xE1
091CC:  CLRF   xE2
091CE:  CLRF   xE3
091D0:  CLRF   xE4
091D2:  CLRF   xE5
091D4:  CLRF   xE6
091D6:  CLRF   xE7
091D8:  CLRF   xE8
091DA:  CLRF   xE9
091DC:  CLRF   xEA
091DE:  CLRF   xEB
091E0:  CLRF   xEC
091E2:  CLRF   xED
091E4:  CLRF   xEE
091E6:  CLRF   xEF
091E8:  CLRF   xF0
091EA:  CLRF   xF1
091EC:  CLRF   xF2
091EE:  CLRF   xF3
091F0:  CLRF   xF4
091F2:  CLRF   xF5
091F4:  CLRF   xF6
....................     iv_data_packet_t *data_packet_ptr = &data_packet;
.................... 
....................     // ========================ヘッダーパケットの処理========================
....................     // ヘッダ情報の設定
....................     data_packet.header.start_marker = START_MAKER;
*
091FE:  SETF   xB7
....................     data_packet.header.time_sec  = measured_data_ptr->time;
09200:  MOVF   xB3,W
09202:  MOVWF  FE9
09204:  MOVF   xB4,W
09206:  MOVWF  FEA
09208:  MOVFF  FEF,9B8
0920C:  MOVFF  FEC,9B9
09210:  MOVFF  FEC,9BA
09214:  MOVFF  FEC,9BB
09218:  MOVF   FED,F
0921A:  MOVF   FED,F
0921C:  MOVF   FED,F
....................     data_packet.header.time_msec = (unsigned int8)((measured_data_ptr->time >> 4) & 0xFF);
0921E:  MOVF   xB3,W
09220:  MOVWF  FE9
09222:  MOVF   xB4,W
09224:  MOVWF  FEA
09226:  MOVFF  FEF,A3E
0922A:  MOVFF  FEC,A3F
0922E:  MOVFF  FEC,A40
09232:  MOVFF  FEC,A41
09236:  MOVF   FED,F
09238:  MOVF   FED,F
0923A:  MOVF   FED,F
0923C:  MOVLB  A
0923E:  RRCF   x41,F
09240:  RRCF   x40,F
09242:  RRCF   x3F,F
09244:  RRCF   x3E,F
09246:  RRCF   x41,F
09248:  RRCF   x40,F
0924A:  RRCF   x3F,F
0924C:  RRCF   x3E,F
0924E:  RRCF   x41,F
09250:  RRCF   x40,F
09252:  RRCF   x3F,F
09254:  RRCF   x3E,F
09256:  RRCF   x41,F
09258:  RRCF   x40,F
0925A:  RRCF   x3F,F
0925C:  RRCF   x3E,F
0925E:  MOVLW  0F
09260:  ANDWF  x41,F
09262:  MOVF   x3E,W
09264:  MOVWF  00
09266:  CLRF   01
09268:  CLRF   02
0926A:  CLRF   03
0926C:  MOVFF  00,9BC
.................... 
....................     // 環境データの設定
....................     data_packet.header.env_data[0].data[0] = (measured_data_ptr->pd >> 4) & 0xFF;
09270:  MOVLW  04
09272:  MOVLB  9
09274:  ADDWF  xB3,W
09276:  MOVWF  FE9
09278:  MOVLW  00
0927A:  ADDWFC xB4,W
0927C:  MOVWF  FEA
0927E:  MOVFF  FEC,A3F
09282:  MOVF   FED,F
09284:  MOVFF  FEF,A3E
09288:  MOVLB  A
0928A:  RRCF   x3F,F
0928C:  RRCF   x3E,F
0928E:  RRCF   x3F,F
09290:  RRCF   x3E,F
09292:  RRCF   x3F,F
09294:  RRCF   x3E,F
09296:  RRCF   x3F,F
09298:  RRCF   x3E,F
0929A:  MOVLW  0F
0929C:  ANDWF  x3F,F
0929E:  MOVF   x3E,W
092A0:  MOVLB  9
092A2:  MOVWF  xBD
....................     data_packet.header.env_data[0].data[1] =
....................         ((measured_data_ptr->pd & 0x0F) << 4) |
....................         ((measured_data_ptr->temp_py_top >> 8) & 0x0F);
092A4:  MOVLW  04
092A6:  ADDWF  xB3,W
092A8:  MOVWF  FE9
092AA:  MOVLW  00
092AC:  ADDWFC xB4,W
092AE:  MOVWF  FEA
092B0:  MOVFF  FEC,A3F
092B4:  MOVF   FED,F
092B6:  MOVFF  FEF,A3E
092BA:  MOVLW  0F
092BC:  MOVLB  A
092BE:  ANDWF  x3E,F
092C0:  CLRF   x3F
092C2:  RLCF   x3E,F
092C4:  RLCF   x3F,F
092C6:  RLCF   x3E,F
092C8:  RLCF   x3F,F
092CA:  RLCF   x3E,F
092CC:  RLCF   x3F,F
092CE:  RLCF   x3E,F
092D0:  RLCF   x3F,F
092D2:  MOVLW  F0
092D4:  ANDWF  x3E,F
092D6:  MOVLW  06
092D8:  MOVLB  9
092DA:  ADDWF  xB3,W
092DC:  MOVWF  FE9
092DE:  MOVLW  00
092E0:  ADDWFC xB4,W
092E2:  MOVWF  FEA
092E4:  MOVFF  FEC,A41
092E8:  MOVF   FED,F
092EA:  MOVFF  FEF,A40
092EE:  MOVFF  A41,A40
092F2:  MOVLB  A
092F4:  CLRF   x41
092F6:  MOVF   x40,W
092F8:  ANDLW  0F
092FA:  MOVWF  00
092FC:  CLRF   03
092FE:  MOVF   00,W
09300:  IORWF  x3E,W
09302:  MOVLB  9
09304:  MOVWF  xBE
....................     data_packet.header.env_data[0].data[2] = measured_data_ptr->temp_py_top & 0xFF;
09306:  MOVLW  06
09308:  ADDWF  xB3,W
0930A:  MOVWF  FE9
0930C:  MOVLW  00
0930E:  ADDWFC xB4,W
09310:  MOVWF  FEA
09312:  MOVFF  FEC,A3F
09316:  MOVF   FED,F
09318:  MOVFF  FEF,A3E
0931C:  MOVLB  A
0931E:  MOVF   x3E,W
09320:  MOVLB  9
09322:  MOVWF  xBF
.................... 
....................     data_packet.header.env_data[1].data[0] = (measured_data_ptr->temp_py_bot >> 4) & 0xFF;
09324:  MOVLW  08
09326:  ADDWF  xB3,W
09328:  MOVWF  FE9
0932A:  MOVLW  00
0932C:  ADDWFC xB4,W
0932E:  MOVWF  FEA
09330:  MOVFF  FEC,A3F
09334:  MOVF   FED,F
09336:  MOVFF  FEF,A3E
0933A:  MOVLB  A
0933C:  RRCF   x3F,F
0933E:  RRCF   x3E,F
09340:  RRCF   x3F,F
09342:  RRCF   x3E,F
09344:  RRCF   x3F,F
09346:  RRCF   x3E,F
09348:  RRCF   x3F,F
0934A:  RRCF   x3E,F
0934C:  MOVLW  0F
0934E:  ANDWF  x3F,F
09350:  MOVF   x3E,W
09352:  MOVLB  9
09354:  MOVWF  xC0
....................     data_packet.header.env_data[1].data[1] =
....................         ((measured_data_ptr->temp_py_bot & 0x0F) << 4) |
....................         ((measured_data_ptr->temp_mis7 >> 8) & 0x0F);
09356:  MOVLW  08
09358:  ADDWF  xB3,W
0935A:  MOVWF  FE9
0935C:  MOVLW  00
0935E:  ADDWFC xB4,W
09360:  MOVWF  FEA
09362:  MOVFF  FEC,A3F
09366:  MOVF   FED,F
09368:  MOVFF  FEF,A3E
0936C:  MOVLW  0F
0936E:  MOVLB  A
09370:  ANDWF  x3E,F
09372:  CLRF   x3F
09374:  RLCF   x3E,F
09376:  RLCF   x3F,F
09378:  RLCF   x3E,F
0937A:  RLCF   x3F,F
0937C:  RLCF   x3E,F
0937E:  RLCF   x3F,F
09380:  RLCF   x3E,F
09382:  RLCF   x3F,F
09384:  MOVLW  F0
09386:  ANDWF  x3E,F
09388:  MOVLW  0A
0938A:  MOVLB  9
0938C:  ADDWF  xB3,W
0938E:  MOVWF  FE9
09390:  MOVLW  00
09392:  ADDWFC xB4,W
09394:  MOVWF  FEA
09396:  MOVFF  FEC,A41
0939A:  MOVF   FED,F
0939C:  MOVFF  FEF,A40
093A0:  MOVFF  A41,A40
093A4:  MOVLB  A
093A6:  CLRF   x41
093A8:  MOVF   x40,W
093AA:  ANDLW  0F
093AC:  MOVWF  00
093AE:  CLRF   03
093B0:  MOVF   00,W
093B2:  IORWF  x3E,W
093B4:  MOVLB  9
093B6:  MOVWF  xC1
....................     data_packet.header.env_data[1].data[2] = measured_data_ptr->temp_mis7 & 0xFF;
093B8:  MOVLW  0A
093BA:  ADDWF  xB3,W
093BC:  MOVWF  FE9
093BE:  MOVLW  00
093C0:  ADDWFC xB4,W
093C2:  MOVWF  FEA
093C4:  MOVFF  FEC,A3F
093C8:  MOVF   FED,F
093CA:  MOVFF  FEF,A3E
093CE:  MOVLB  A
093D0:  MOVF   x3E,W
093D2:  MOVLB  9
093D4:  MOVWF  xC2
.................... 
....................     // I-Vデータの設定
....................     for (unsigned int8 i = 0; i < IV_HEADER_SIZE; i++) {
093D6:  CLRF   xF9
093D8:  MOVLB  0
093DA:  MOVLB  9
093DC:  MOVF   xF9,W
093DE:  SUBLW  10
093E0:  BTFSC  FD8.0
093E2:  BRA    93EA
093E4:  MOVLB  0
093E6:  GOTO   9546
093EA:  MOVLB  0
....................         if (i < port_data_ptr->sweep_step) {
093EC:  MOVLW  01
093EE:  MOVLB  9
093F0:  ADDWF  xB5,W
093F2:  MOVWF  FE9
093F4:  MOVLW  00
093F6:  ADDWFC xB6,W
093F8:  MOVWF  FEA
093FA:  MOVFF  FEC,03
093FE:  MOVF   FED,F
09400:  MOVF   FEF,W
09402:  MOVWF  01
09404:  MOVF   03,F
09406:  BTFSC  FD8.2
09408:  BRA    9410
0940A:  MOVLB  0
0940C:  GOTO   9424
09410:  MOVLB  0
09412:  MOVF   01,W
09414:  MOVLB  9
09416:  SUBWF  xF9,W
09418:  BTFSS  FD8.0
0941A:  BRA    9422
0941C:  MOVLB  0
0941E:  GOTO   94F8
09422:  MOVLB  0
....................             data_packet.header.ivdata[i*3]     = port_data_ptr->data_buffer[i*3];
09424:  MOVLB  9
09426:  MOVF   xF9,W
09428:  MULLW  03
0942A:  MOVF   FF3,W
0942C:  CLRF   03
0942E:  ADDLW  C3
09430:  MOVWF  01
09432:  MOVLW  09
09434:  ADDWFC 03,F
09436:  MOVF   01,W
09438:  MOVLB  A
0943A:  MOVWF  x3E
0943C:  MOVFF  03,A3F
09440:  MOVLB  9
09442:  MOVF   xF9,W
09444:  MULLW  03
09446:  MOVF   FF3,W
09448:  ADDLW  03
0944A:  ADDWF  xB5,W
0944C:  MOVWF  FE9
0944E:  MOVLW  00
09450:  ADDWFC xB6,W
09452:  MOVWF  FEA
09454:  MOVF   FEF,W
09456:  MOVLB  A
09458:  MOVWF  x40
0945A:  MOVFF  A3F,FEA
0945E:  MOVFF  A3E,FE9
09462:  MOVFF  A40,FEF
....................             data_packet.header.ivdata[i*3 + 1] = port_data_ptr->data_buffer[i*3 + 1];
09466:  MOVLB  9
09468:  MOVF   xF9,W
0946A:  MULLW  03
0946C:  MOVF   FF3,W
0946E:  ADDLW  01
09470:  CLRF   03
09472:  ADDLW  C3
09474:  MOVWF  01
09476:  MOVLW  09
09478:  ADDWFC 03,F
0947A:  MOVF   01,W
0947C:  MOVLB  A
0947E:  MOVWF  x3E
09480:  MOVFF  03,A3F
09484:  MOVLB  9
09486:  MOVF   xF9,W
09488:  MULLW  03
0948A:  MOVF   FF3,W
0948C:  ADDLW  01
0948E:  ADDLW  03
09490:  ADDWF  xB5,W
09492:  MOVWF  FE9
09494:  MOVLW  00
09496:  ADDWFC xB6,W
09498:  MOVWF  FEA
0949A:  MOVF   FEF,W
0949C:  MOVLB  A
0949E:  MOVWF  x40
094A0:  MOVFF  A3F,FEA
094A4:  MOVFF  A3E,FE9
094A8:  MOVFF  A40,FEF
....................             data_packet.header.ivdata[i*3 + 2] = port_data_ptr->data_buffer[i*3 + 2];
094AC:  MOVLB  9
094AE:  MOVF   xF9,W
094B0:  MULLW  03
094B2:  MOVF   FF3,W
094B4:  ADDLW  02
094B6:  CLRF   03
094B8:  ADDLW  C3
094BA:  MOVWF  01
094BC:  MOVLW  09
094BE:  ADDWFC 03,F
094C0:  MOVF   01,W
094C2:  MOVLB  A
094C4:  MOVWF  x3E
094C6:  MOVFF  03,A3F
094CA:  MOVLB  9
094CC:  MOVF   xF9,W
094CE:  MULLW  03
094D0:  MOVF   FF3,W
094D2:  ADDLW  02
094D4:  ADDLW  03
094D6:  ADDWF  xB5,W
094D8:  MOVWF  FE9
094DA:  MOVLW  00
094DC:  ADDWFC xB6,W
094DE:  MOVWF  FEA
094E0:  MOVF   FEF,W
094E2:  MOVLB  A
094E4:  MOVWF  x40
094E6:  MOVFF  A3F,FEA
094EA:  MOVFF  A3E,FE9
094EE:  MOVFF  A40,FEF
094F2:  MOVLB  0
....................         } else {
094F4:  GOTO   953C
....................             // 余りは0埋め
....................             data_packet.header.ivdata[i*3]     = 0;
094F8:  MOVLB  9
094FA:  MOVF   xF9,W
094FC:  MULLW  03
094FE:  MOVF   FF3,W
09500:  CLRF   03
09502:  ADDLW  C3
09504:  MOVWF  FE9
09506:  MOVLW  09
09508:  ADDWFC 03,W
0950A:  MOVWF  FEA
0950C:  CLRF   FEF
....................             data_packet.header.ivdata[i*3 + 1] = 0;
0950E:  MOVF   xF9,W
09510:  MULLW  03
09512:  MOVF   FF3,W
09514:  ADDLW  01
09516:  CLRF   03
09518:  ADDLW  C3
0951A:  MOVWF  FE9
0951C:  MOVLW  09
0951E:  ADDWFC 03,W
09520:  MOVWF  FEA
09522:  CLRF   FEF
....................             data_packet.header.ivdata[i*3 + 2] = 0;
09524:  MOVF   xF9,W
09526:  MULLW  03
09528:  MOVF   FF3,W
0952A:  ADDLW  02
0952C:  CLRF   03
0952E:  ADDLW  C3
09530:  MOVWF  FE9
09532:  MOVLW  09
09534:  ADDWFC 03,W
09536:  MOVWF  FEA
09538:  CLRF   FEF
0953A:  MOVLB  0
....................         }
0953C:  MOVLB  9
0953E:  INCF   xF9,F
09540:  MOVLB  0
09542:  GOTO   93DA
....................     }
....................     // フラッシュに書き込み
....................     if (port_data_ptr->port_num == 1) {
09546:  MOVLB  9
09548:  MOVF   xB5,W
0954A:  MOVWF  FE9
0954C:  MOVF   xB6,W
0954E:  MOVWF  FEA
09550:  DECFSZ FEF,W
09552:  BRA    9558
09554:  BRA    955E
09556:  MOVLB  0
09558:  MOVLB  0
0955A:  GOTO   95BA
0955E:  MOVLB  0
....................         data_packet.header.crc = calc_crc8(data_packet_ptr->raw, PACKET_SIZE - 1);
09560:  MOVLB  9
09562:  MOVF   xF7,W
09564:  MOVWF  01
09566:  MOVF   xF8,W
09568:  MOVWF  03
0956A:  MOVF   01,W
0956C:  MOVLB  A
0956E:  MOVWF  x3E
09570:  MOVFF  03,A3F
09574:  MOVFF  A3F,ADC
09578:  MOVFF  A3E,ADB
0957C:  MOVLW  3F
0957E:  MOVWF  xDD
09580:  MOVLB  0
09582:  CALL   30FC
09586:  MOVFF  01,9F6
....................         misf_write_data(FLASH_ID_IV1_DATA, data_packet_ptr->raw, PACKET_SIZE);
0958A:  MOVLB  9
0958C:  MOVF   xF7,W
0958E:  MOVWF  01
09590:  MOVF   xF8,W
09592:  MOVWF  03
09594:  MOVF   01,W
09596:  MOVLB  A
09598:  MOVWF  x3E
0959A:  MOVFF  03,A3F
0959E:  MOVLW  04
095A0:  MOVWF  x40
095A2:  MOVFF  A3F,A42
095A6:  MOVFF  A3E,A41
095AA:  CLRF   x44
095AC:  MOVLW  40
095AE:  MOVWF  x43
095B0:  MOVLB  0
095B2:  CALL   42BA
....................         // for (int i = 0; i < PACKET_SIZE; i++) {
....................             // fprintf(PC, "%02X ", data_packet_ptr->raw[i]);
....................         // }
....................         unsigned int8 read_back[PACKET_SIZE];
....................         // read_data_bytes(mis_fm, MISF_ADDRESS_TABLE[FLASH_ID_IV1_DATA].start, read_back, PACKET_SIZE);
....................         // for (int j = 0; j < PACKET_SIZE; j++) {
....................             // fprintf(PC, "%02X ", read_back[j]);
....................         // }
....................     } else if (port_data_ptr->port_num == 2) {
095B6:  GOTO   962A
095BA:  MOVLB  9
095BC:  MOVF   xB5,W
095BE:  MOVWF  FE9
095C0:  MOVF   xB6,W
095C2:  MOVWF  FEA
095C4:  MOVF   FEF,W
095C6:  SUBLW  02
095C8:  BTFSC  FD8.2
095CA:  BRA    95D2
095CC:  MOVLB  0
095CE:  GOTO   962A
095D2:  MOVLB  0
....................         data_packet.header.crc = calc_crc8(data_packet_ptr->raw, PACKET_SIZE - 1);
095D4:  MOVLB  9
095D6:  MOVF   xF7,W
095D8:  MOVWF  01
095DA:  MOVF   xF8,W
095DC:  MOVWF  03
095DE:  MOVF   01,W
095E0:  MOVLB  A
095E2:  MOVWF  x3E
095E4:  MOVFF  03,A3F
095E8:  MOVFF  A3F,ADC
095EC:  MOVFF  A3E,ADB
095F0:  MOVLW  3F
095F2:  MOVWF  xDD
095F4:  MOVLB  0
095F6:  CALL   30FC
095FA:  MOVFF  01,9F6
....................         misf_write_data(FLASH_ID_IV2_DATA, data_packet_ptr->raw, PACKET_SIZE);
095FE:  MOVLB  9
09600:  MOVF   xF7,W
09602:  MOVWF  01
09604:  MOVF   xF8,W
09606:  MOVWF  03
09608:  MOVF   01,W
0960A:  MOVLB  A
0960C:  MOVWF  x3E
0960E:  MOVFF  03,A3F
09612:  MOVLW  06
09614:  MOVWF  x40
09616:  MOVFF  A3F,A42
0961A:  MOVFF  A3E,A41
0961E:  CLRF   x44
09620:  MOVLW  40
09622:  MOVWF  x43
09624:  MOVLB  0
09626:  CALL   42BA
....................     }
.................... 
....................     // ========================データパケットの処理========================
....................     unsigned int16 iv_index = IV_HEADER_SIZE;
0962A:  MOVLB  A
0962C:  CLRF   x3B
0962E:  MOVLW  11
09630:  MOVWF  x3A
09632:  MOVLB  0
....................     // パケットごとに繰り返す
....................     while (iv_index < port_data_ptr->sweep_step) {
09634:  MOVLW  01
09636:  MOVLB  9
09638:  ADDWF  xB5,W
0963A:  MOVWF  FE9
0963C:  MOVLW  00
0963E:  ADDWFC xB6,W
09640:  MOVWF  FEA
09642:  MOVFF  FEC,03
09646:  MOVF   FED,F
09648:  MOVF   FEF,W
0964A:  MOVWF  01
0964C:  MOVLB  A
0964E:  MOVF   x3B,W
09650:  SUBWF  03,W
09652:  BTFSC  FD8.0
09654:  BRA    965C
09656:  MOVLB  0
09658:  GOTO   9A44
0965C:  MOVLB  0
0965E:  BTFSS  FD8.2
09660:  GOTO   9676
09664:  MOVF   01,W
09666:  MOVLB  A
09668:  SUBWF  x3A,W
0966A:  BTFSS  FD8.0
0966C:  BRA    9674
0966E:  MOVLB  0
09670:  GOTO   9A44
09674:  MOVLB  0
....................         unsigned int16 step_in_packet = 0;
09676:  MOVLB  A
09678:  CLRF   x3D
0967A:  CLRF   x3C
0967C:  MOVLB  0
.................... 
....................         // データを詰める（最大21点/パケット）
....................         for (; step_in_packet < IV_DATA_SIZE && iv_index < port_data_ptr->sweep_step;
0967E:  MOVLB  A
09680:  MOVF   x3D,F
09682:  BTFSC  FD8.2
09684:  BRA    968C
09686:  MOVLB  0
09688:  GOTO   9894
0968C:  MOVLB  0
0968E:  MOVLB  A
09690:  MOVF   x3C,W
09692:  SUBLW  14
09694:  BTFSC  FD8.0
09696:  BRA    969E
09698:  MOVLB  0
0969A:  GOTO   9894
0969E:  MOVLB  0
096A0:  MOVLW  01
096A2:  MOVLB  9
096A4:  ADDWF  xB5,W
096A6:  MOVWF  FE9
096A8:  MOVLW  00
096AA:  ADDWFC xB6,W
096AC:  MOVWF  FEA
096AE:  MOVFF  FEC,03
096B2:  MOVF   FED,F
096B4:  MOVF   FEF,W
096B6:  MOVWF  01
096B8:  MOVLB  A
096BA:  MOVF   x3B,W
096BC:  SUBWF  03,W
096BE:  BTFSC  FD8.0
096C0:  BRA    96C8
096C2:  MOVLB  0
096C4:  GOTO   9894
096C8:  MOVLB  0
096CA:  BTFSS  FD8.2
096CC:  GOTO   96E2
096D0:  MOVF   01,W
096D2:  MOVLB  A
096D4:  SUBWF  x3A,W
096D6:  BTFSS  FD8.0
096D8:  BRA    96E0
096DA:  MOVLB  0
096DC:  GOTO   9894
096E0:  MOVLB  0
....................              step_in_packet++, iv_index++) {
....................             data_packet.data.iv_data[step_in_packet*3] = port_data_ptr->data_buffer[iv_index*3];
096E2:  MOVFF  A3D,A43
096E6:  MOVFF  A3C,A42
096EA:  MOVLB  A
096EC:  CLRF   x45
096EE:  MOVLW  03
096F0:  MOVWF  x44
096F2:  MOVLB  0
096F4:  CALL   81C0
096F8:  MOVFF  02,A3F
096FC:  MOVFF  01,A3E
09700:  MOVLW  B7
09702:  MOVLB  A
09704:  ADDWF  x3E,W
09706:  MOVWF  01
09708:  MOVLW  09
0970A:  ADDWFC x3F,W
0970C:  MOVWF  03
0970E:  MOVF   01,W
09710:  MOVWF  x40
09712:  MOVFF  03,A41
09716:  MOVFF  A3B,A43
0971A:  MOVFF  A3A,A42
0971E:  CLRF   x45
09720:  MOVLW  03
09722:  MOVWF  x44
09724:  MOVLB  0
09726:  CALL   81C0
0972A:  MOVFF  02,A43
0972E:  MOVFF  01,A42
09732:  MOVLW  03
09734:  MOVLB  A
09736:  ADDWF  x42,W
09738:  MOVWF  01
0973A:  MOVLW  00
0973C:  ADDWFC x43,W
0973E:  MOVWF  03
09740:  MOVF   01,W
09742:  MOVLB  9
09744:  ADDWF  xB5,W
09746:  MOVWF  FE9
09748:  MOVF   xB6,W
0974A:  ADDWFC 03,W
0974C:  MOVWF  FEA
0974E:  MOVF   FEF,W
09750:  MOVLB  A
09752:  MOVWF  x44
09754:  MOVFF  A41,FEA
09758:  MOVFF  A40,FE9
0975C:  MOVFF  A44,FEF
....................             data_packet.data.iv_data[step_in_packet*3+1] = port_data_ptr->data_buffer[iv_index*3+1];
09760:  MOVFF  A3D,A43
09764:  MOVFF  A3C,A42
09768:  CLRF   x45
0976A:  MOVLW  03
0976C:  MOVWF  x44
0976E:  MOVLB  0
09770:  CALL   81C0
09774:  MOVFF  02,A3F
09778:  MOVFF  01,A3E
0977C:  MOVLW  01
0977E:  MOVLB  A
09780:  ADDWF  x3E,F
09782:  MOVLW  00
09784:  ADDWFC x3F,F
09786:  MOVLW  B7
09788:  ADDWF  x3E,W
0978A:  MOVWF  01
0978C:  MOVLW  09
0978E:  ADDWFC x3F,W
09790:  MOVWF  03
09792:  MOVF   01,W
09794:  MOVWF  x40
09796:  MOVFF  03,A41
0979A:  MOVFF  A3B,A43
0979E:  MOVFF  A3A,A42
097A2:  CLRF   x45
097A4:  MOVLW  03
097A6:  MOVWF  x44
097A8:  MOVLB  0
097AA:  CALL   81C0
097AE:  MOVFF  02,A43
097B2:  MOVFF  01,A42
097B6:  MOVLW  01
097B8:  MOVLB  A
097BA:  ADDWF  x42,F
097BC:  MOVLW  00
097BE:  ADDWFC x43,F
097C0:  MOVLW  03
097C2:  ADDWF  x42,W
097C4:  MOVWF  01
097C6:  MOVLW  00
097C8:  ADDWFC x43,W
097CA:  MOVWF  03
097CC:  MOVF   01,W
097CE:  MOVLB  9
097D0:  ADDWF  xB5,W
097D2:  MOVWF  FE9
097D4:  MOVF   xB6,W
097D6:  ADDWFC 03,W
097D8:  MOVWF  FEA
097DA:  MOVF   FEF,W
097DC:  MOVLB  A
097DE:  MOVWF  x44
097E0:  MOVFF  A41,FEA
097E4:  MOVFF  A40,FE9
097E8:  MOVFF  A44,FEF
....................             data_packet.data.iv_data[step_in_packet*3+2] = port_data_ptr->data_buffer[iv_index*3+2];
097EC:  MOVFF  A3D,A43
097F0:  MOVFF  A3C,A42
097F4:  CLRF   x45
097F6:  MOVLW  03
097F8:  MOVWF  x44
097FA:  MOVLB  0
097FC:  CALL   81C0
09800:  MOVFF  02,A3F
09804:  MOVFF  01,A3E
09808:  MOVLW  02
0980A:  MOVLB  A
0980C:  ADDWF  x3E,F
0980E:  MOVLW  00
09810:  ADDWFC x3F,F
09812:  MOVLW  B7
09814:  ADDWF  x3E,W
09816:  MOVWF  01
09818:  MOVLW  09
0981A:  ADDWFC x3F,W
0981C:  MOVWF  03
0981E:  MOVF   01,W
09820:  MOVWF  x40
09822:  MOVFF  03,A41
09826:  MOVFF  A3B,A43
0982A:  MOVFF  A3A,A42
0982E:  CLRF   x45
09830:  MOVLW  03
09832:  MOVWF  x44
09834:  MOVLB  0
09836:  CALL   81C0
0983A:  MOVFF  02,A43
0983E:  MOVFF  01,A42
09842:  MOVLW  02
09844:  MOVLB  A
09846:  ADDWF  x42,F
09848:  MOVLW  00
0984A:  ADDWFC x43,F
0984C:  MOVLW  03
0984E:  ADDWF  x42,W
09850:  MOVWF  01
09852:  MOVLW  00
09854:  ADDWFC x43,W
09856:  MOVWF  03
09858:  MOVF   01,W
0985A:  MOVLB  9
0985C:  ADDWF  xB5,W
0985E:  MOVWF  FE9
09860:  MOVF   xB6,W
09862:  ADDWFC 03,W
09864:  MOVWF  FEA
09866:  MOVF   FEF,W
09868:  MOVLB  A
0986A:  MOVWF  x44
0986C:  MOVFF  A41,FEA
09870:  MOVFF  A40,FE9
09874:  MOVFF  A44,FEF
09878:  MOVLB  0
0987A:  MOVLB  A
0987C:  MOVF   x3D,W
0987E:  MOVWF  03
09880:  MOVF   x3C,W
09882:  INCF   x3C,F
09884:  BTFSC  FD8.2
09886:  INCF   x3D,F
09888:  INCF   x3A,F
0988A:  BTFSC  FD8.2
0988C:  INCF   x3B,F
0988E:  MOVLB  0
09890:  GOTO   967E
....................         }
.................... 
....................         // 残り領域を 0x00 で埋める（未使用部分）
....................         for (; step_in_packet < 21; step_in_packet++) {
09894:  MOVLB  A
09896:  MOVF   x3D,F
09898:  BTFSC  FD8.2
0989A:  BRA    98A2
0989C:  MOVLB  0
0989E:  GOTO   995C
098A2:  MOVLB  0
098A4:  MOVLB  A
098A6:  MOVF   x3C,W
098A8:  SUBLW  14
098AA:  BTFSC  FD8.0
098AC:  BRA    98B4
098AE:  MOVLB  0
098B0:  GOTO   995C
098B4:  MOVLB  0
....................             data_packet.data.iv_data[step_in_packet*3]  = 0x00;
098B6:  MOVFF  A3D,A43
098BA:  MOVFF  A3C,A42
098BE:  MOVLB  A
098C0:  CLRF   x45
098C2:  MOVLW  03
098C4:  MOVWF  x44
098C6:  MOVLB  0
098C8:  CALL   81C0
098CC:  MOVFF  02,A3F
098D0:  MOVFF  01,A3E
098D4:  MOVLW  B7
098D6:  MOVLB  A
098D8:  ADDWF  x3E,W
098DA:  MOVWF  FE9
098DC:  MOVLW  09
098DE:  ADDWFC x3F,W
098E0:  MOVWF  FEA
098E2:  CLRF   FEF
....................             data_packet.data.iv_data[step_in_packet*3+1] = 0x00;
098E4:  MOVFF  A3D,A43
098E8:  MOVFF  A3C,A42
098EC:  CLRF   x45
098EE:  MOVLW  03
098F0:  MOVWF  x44
098F2:  MOVLB  0
098F4:  CALL   81C0
098F8:  MOVFF  02,A3F
098FC:  MOVFF  01,A3E
09900:  MOVLW  01
09902:  MOVLB  A
09904:  ADDWF  x3E,F
09906:  MOVLW  00
09908:  ADDWFC x3F,F
0990A:  MOVLW  B7
0990C:  ADDWF  x3E,W
0990E:  MOVWF  FE9
09910:  MOVLW  09
09912:  ADDWFC x3F,W
09914:  MOVWF  FEA
09916:  CLRF   FEF
....................             data_packet.data.iv_data[step_in_packet*3+2] = 0x00;
09918:  MOVFF  A3D,A43
0991C:  MOVFF  A3C,A42
09920:  CLRF   x45
09922:  MOVLW  03
09924:  MOVWF  x44
09926:  MOVLB  0
09928:  CALL   81C0
0992C:  MOVFF  02,A3F
09930:  MOVFF  01,A3E
09934:  MOVLW  02
09936:  MOVLB  A
09938:  ADDWF  x3E,F
0993A:  MOVLW  00
0993C:  ADDWFC x3F,F
0993E:  MOVLW  B7
09940:  ADDWF  x3E,W
09942:  MOVWF  FE9
09944:  MOVLW  09
09946:  ADDWFC x3F,W
09948:  MOVWF  FEA
0994A:  CLRF   FEF
0994C:  MOVLB  0
0994E:  MOVLB  A
09950:  INCF   x3C,F
09952:  BTFSC  FD8.2
09954:  INCF   x3D,F
09956:  MOVLB  0
09958:  GOTO   9894
....................         }
.................... 
....................         // フラッシュに書き込み
....................         if (port_data_ptr->port_num == 1) {
0995C:  MOVLB  9
0995E:  MOVF   xB5,W
09960:  MOVWF  FE9
09962:  MOVF   xB6,W
09964:  MOVWF  FEA
09966:  DECFSZ FEF,W
09968:  BRA    996E
0996A:  BRA    9974
0996C:  MOVLB  0
0996E:  MOVLB  0
09970:  GOTO   99D0
09974:  MOVLB  0
....................             data_packet.data.crc = calc_crc8(data_packet_ptr->raw, PACKET_SIZE - 1);
09976:  MOVLB  9
09978:  MOVF   xF7,W
0997A:  MOVWF  01
0997C:  MOVF   xF8,W
0997E:  MOVWF  03
09980:  MOVF   01,W
09982:  MOVLB  A
09984:  MOVWF  x3E
09986:  MOVFF  03,A3F
0998A:  MOVFF  A3F,ADC
0998E:  MOVFF  A3E,ADB
09992:  MOVLW  3F
09994:  MOVWF  xDD
09996:  MOVLB  0
09998:  CALL   30FC
0999C:  MOVFF  01,9F6
....................             misf_write_data(FLASH_ID_IV1_DATA, data_packet_ptr->raw, PACKET_SIZE);
099A0:  MOVLB  9
099A2:  MOVF   xF7,W
099A4:  MOVWF  01
099A6:  MOVF   xF8,W
099A8:  MOVWF  03
099AA:  MOVF   01,W
099AC:  MOVLB  A
099AE:  MOVWF  x3E
099B0:  MOVFF  03,A3F
099B4:  MOVLW  04
099B6:  MOVWF  x40
099B8:  MOVFF  A3F,A42
099BC:  MOVFF  A3E,A41
099C0:  CLRF   x44
099C2:  MOVLW  40
099C4:  MOVWF  x43
099C6:  MOVLB  0
099C8:  CALL   42BA
....................             // for (int i = 0; i < PACKET_SIZE; i++) {
....................                 // fprintf(PC, "%02X ", data_packet_ptr->raw[i]);
....................             // }
....................         } else if (port_data_ptr->port_num == 2) {
099CC:  GOTO   9A40
099D0:  MOVLB  9
099D2:  MOVF   xB5,W
099D4:  MOVWF  FE9
099D6:  MOVF   xB6,W
099D8:  MOVWF  FEA
099DA:  MOVF   FEF,W
099DC:  SUBLW  02
099DE:  BTFSC  FD8.2
099E0:  BRA    99E8
099E2:  MOVLB  0
099E4:  GOTO   9A40
099E8:  MOVLB  0
....................             data_packet.data.crc = calc_crc8(data_packet_ptr->raw, PACKET_SIZE - 1);
099EA:  MOVLB  9
099EC:  MOVF   xF7,W
099EE:  MOVWF  01
099F0:  MOVF   xF8,W
099F2:  MOVWF  03
099F4:  MOVF   01,W
099F6:  MOVLB  A
099F8:  MOVWF  x3E
099FA:  MOVFF  03,A3F
099FE:  MOVFF  A3F,ADC
09A02:  MOVFF  A3E,ADB
09A06:  MOVLW  3F
09A08:  MOVWF  xDD
09A0A:  MOVLB  0
09A0C:  CALL   30FC
09A10:  MOVFF  01,9F6
....................             misf_write_data(FLASH_ID_IV2_DATA, data_packet_ptr->raw, PACKET_SIZE);
09A14:  MOVLB  9
09A16:  MOVF   xF7,W
09A18:  MOVWF  01
09A1A:  MOVF   xF8,W
09A1C:  MOVWF  03
09A1E:  MOVF   01,W
09A20:  MOVLB  A
09A22:  MOVWF  x3E
09A24:  MOVFF  03,A3F
09A28:  MOVLW  06
09A2A:  MOVWF  x40
09A2C:  MOVFF  A3F,A42
09A30:  MOVFF  A3E,A41
09A34:  CLRF   x44
09A36:  MOVLW  40
09A38:  MOVWF  x43
09A3A:  MOVLB  0
09A3C:  CALL   42BA
....................         }
09A40:  GOTO   9634
....................     }
09A44:  RETURN 0
.................... 
....................     // misf_update_address_area(); // 必要なら有効化
.................... }
.................... 
.................... iv_env_t create_meas_data()
.................... {
....................     iv_env_t data;
....................     memset(&data, 0, sizeof(data));
*
090E2:  MOVLW  09
090E4:  MOVWF  FEA
090E6:  MOVLW  D3
090E8:  MOVWF  FE9
090EA:  CLRF   00
090EC:  CLRF   02
090EE:  MOVLW  0C
090F0:  MOVWF  01
090F2:  CALL   234C
....................     data.time           = get_current_sec();
090F6:  CALL   3C28
090FA:  MOVFF  03,9D6
090FE:  MOVFF  02,9D5
09102:  MOVFF  01,9D4
09106:  MOVFF  00,9D3
....................     data.temp_py_top    = ad7490_read(ADC_TEMP_PY_TOP);
0910A:  MOVLW  0D
0910C:  MOVLB  9
0910E:  MOVWF  xDF
09110:  MOVLB  0
09112:  CALL   24C2
09116:  MOVFF  02,9DA
0911A:  MOVFF  01,9D9
....................     data.temp_py_bot    = ad7490_read(ADC_TEMP_PY_BOT);
0911E:  MOVLW  0E
09120:  MOVLB  9
09122:  MOVWF  xDF
09124:  MOVLB  0
09126:  CALL   24C2
0912A:  MOVFF  02,9DC
0912E:  MOVFF  01,9DB
....................     data.temp_mis7      = ad7490_read(ADC_TEMP_MIS7);
09132:  MOVLW  0C
09134:  MOVLB  9
09136:  MOVWF  xDF
09138:  MOVLB  0
0913A:  CALL   24C2
0913E:  MOVFF  02,9DE
09142:  MOVFF  01,9DD
....................     data.pd             = ad7490_read(ADC_PD);
09146:  MOVLW  0F
09148:  MOVLB  9
0914A:  MOVWF  xDF
0914C:  MOVLB  0
0914E:  CALL   24C2
09152:  MOVFF  02,9D8
09156:  MOVFF  01,9D7
....................     return data;
0915A:  MOVLW  D3
0915C:  MOVWF  01
0915E:  MOVLW  09
09160:  MOVWF  02
09162:  RETURN 0
.................... }
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data)
.................... {
....................     // ADCの12ビット値を電力密度（mW/cm²）に変換する例
....................     // ここでは仮に1 LSB = 0.1 mW/cm²とする
....................     return (unsigned int16)(data);
*
082DA:  MOVLB  1
082DC:  MOVF   xDA,W
082DE:  MOVWF  01
082E0:  MOVF   xDB,W
082E2:  MOVWF  02
082E4:  MOVLB  0
082E6:  GOTO   8E9C (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... int16 calc_curr_value(unsigned int16 data){
....................     float voltage_mv;
....................     float current_ma;
.................... 
....................     // 12ビットADCの値を[mV]に変換
....................     voltage_mv = (float)data * ADC_REF_VOLTAGE_MV / ADC_MAX_READING;
*
08C48:  MOVFF  1DB,1E5
08C4C:  MOVFF  1DA,1E4
08C50:  GOTO   82EA
08C54:  MOVFF  03,1E7
08C58:  MOVFF  02,1E6
08C5C:  MOVFF  01,1E5
08C60:  MOVFF  00,1E4
08C64:  MOVFF  1E7,1EB
08C68:  MOVFF  1E6,1EA
08C6C:  MOVFF  1E5,1E9
08C70:  MOVFF  1E4,1E8
08C74:  MOVLB  1
08C76:  CLRF   xEF
08C78:  MOVLW  40
08C7A:  MOVWF  xEE
08C7C:  MOVLW  1C
08C7E:  MOVWF  xED
08C80:  MOVLW  8A
08C82:  MOVWF  xEC
08C84:  MOVLB  0
08C86:  GOTO   8330
08C8A:  MOVFF  03,1E7
08C8E:  MOVFF  02,1E6
08C92:  MOVFF  01,1E5
08C96:  MOVFF  00,1E4
08C9A:  MOVFF  1E7,1EB
08C9E:  MOVFF  1E6,1EA
08CA2:  MOVFF  1E5,1E9
08CA6:  MOVFF  1E4,1E8
08CAA:  MOVLB  1
08CAC:  CLRF   xEF
08CAE:  MOVLW  F0
08CB0:  MOVWF  xEE
08CB2:  MOVLW  7F
08CB4:  MOVWF  xED
08CB6:  MOVLW  8A
08CB8:  MOVWF  xEC
08CBA:  MOVLB  0
08CBC:  CALL   847C
08CC0:  MOVFF  03,1DF
08CC4:  MOVFF  02,1DE
08CC8:  MOVFF  01,1DD
08CCC:  MOVFF  00,1DC
.................... 
....................     // オフセット電圧(ADC_CURR_REF_VOLTAGE_MV)との差から電流[mA]を算出
....................     current_ma = (voltage_mv - ADC_CURR_REF_VOLTAGE_MV) / (SHUNT_RESISTANCE_OHM * AMP_GAIN);
08CD0:  BSF    FD8.1
08CD2:  MOVFF  1DF,1E7
08CD6:  MOVFF  1DE,1E6
08CDA:  MOVFF  1DD,1E5
08CDE:  MOVFF  1DC,1E4
08CE2:  MOVLB  1
08CE4:  CLRF   xEB
08CE6:  MOVLW  40
08CE8:  MOVWF  xEA
08CEA:  MOVLW  1C
08CEC:  MOVWF  xE9
08CEE:  MOVLW  89
08CF0:  MOVWF  xE8
08CF2:  MOVLB  0
08CF4:  GOTO   8742
08CF8:  MOVFF  03,1E7
08CFC:  MOVFF  02,1E6
08D00:  MOVFF  01,1E5
08D04:  MOVFF  00,1E4
08D08:  MOVFF  1E7,1EB
08D0C:  MOVFF  1E6,1EA
08D10:  MOVFF  1E5,1E9
08D14:  MOVFF  1E4,1E8
08D18:  MOVLB  1
08D1A:  CLRF   xEF
08D1C:  CLRF   xEE
08D1E:  MOVLW  20
08D20:  MOVWF  xED
08D22:  MOVLW  82
08D24:  MOVWF  xEC
08D26:  MOVLB  0
08D28:  CALL   847C
08D2C:  MOVFF  03,1E3
08D30:  MOVFF  02,1E2
08D34:  MOVFF  01,1E1
08D38:  MOVFF  00,1E0
.................... 
....................     return (int16)current_ma;
08D3C:  MOVFF  1E3,1E7
08D40:  MOVFF  1E2,1E6
08D44:  MOVFF  1E1,1E5
08D48:  MOVFF  1E0,1E4
08D4C:  GOTO   8BEE
08D50:  MOVF   01,W
08D52:  MOVWF  01
08D54:  MOVF   02,W
08D56:  MOVWF  02
08D58:  RETURN 0
.................... }
.................... 
.................... 
.................... void meas_env_data(env_data_t *env_data_ptr)
.................... {
....................     env_data_ptr->time        = get_current_sec();
....................     env_data_ptr->temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     env_data_ptr->temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     env_data_ptr->temp_mis7   = ad7490_read(ADC_TEMP_MIS7);
....................     env_data_ptr->pd          = ad7490_read(ADC_PD);
.................... }
.................... 
.................... void meas_iv(sweep_setting_t *sweep_config_ptr, sweep_result_t *sweep_result_ptr)
.................... {
....................     int16 count = 0;
....................     // make IV data
....................     while (sweep_config_ptr->cell1 || sweep_config_ptr->cell2)
....................     {
....................         if (sweep_config_ptr->cell1) {
....................             // measure cell 1
....................             mcp4901_1_write(count);
....................             sweep_result_ptr->cell1_iv_data.voltage[count] = ad7490_read(ADC_CIGS1_VOLT);
....................             sweep_result_ptr->cell1_iv_data.current[count] = ad7490_read(ADC_CIGS1_CURR);
....................             sweep_result_ptr->cell1_iv_data.sweep_count ++;
....................             if (sweep_result_ptr->cell1_iv_data.current[count] < sweep_config_ptr->curr_limit) {
....................                 sweep_config_ptr->cell1 = 0;  // 閾値到達で測定終了
....................             }
....................         }
....................         if (sweep_config_ptr->cell2) {
....................             // measure cell 2
....................             mcp4901_2_write(count);
....................             sweep_result_ptr->cell2_iv_data.voltage[count] = ad7490_read(ADC_CIGS2_VOLT);
....................             sweep_result_ptr->cell2_iv_data.current[count] = ad7490_read(ADC_CIGS2_CURR);
....................             sweep_result_ptr->cell2_iv_data.sweep_count ++;
....................             if (sweep_result_ptr->cell2_iv_data.current[count] < sweep_config_ptr->curr_limit) {
....................                 sweep_config_ptr->cell2 = 0;  // 閾値到達で測定終了
....................             }
....................         }
....................     }
.................... }
.................... 
.................... 
.................... 
.................... 
.................... // End of file
.................... 
.................... #include "domain/cigs_piclog.c"
.................... #include "cigs_piclog.h"                          // 同じフォルダのヘッダー
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_save(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/timer.h"                   // タイマーライブラリ  
.................... #ifndef _TIMER_H_
.................... #define _TIMER_H_
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... #INT_TIMER1 
.................... static void TIMER1_isr();
.................... 
.................... 
.................... // __________ functions _________
.................... void timer_init();
.................... 
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... 
.................... #endif // _TIMER_H_
.................... 
.................... #include "cigs_flash.h"                 // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"               // フラッシュ操作キュー
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                 // フラッシュデバイス
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... // ================================== ADD NEW DEFINES HERE ==================================
.................... // =============================================================================================
.................... // MT25Q Flash Memory Specifications
.................... #define MT25Q_BLOCK_SIZE   4096
.................... #define MT25Q_BLOCK_NUM    8192
.................... #define DEV
.................... #ifdef DEV
.................... typedef enum mt25q_cmd{
....................     //Software RESET Operations
....................     MT25Q_CMD_RESET_ENABLE = 0x66,
....................     MT25Q_CMD_RESET_MEMORY = 0x99,
.................... 
....................     //READ ID Operations
....................     MT25Q_CMD_READ_ID = 0x9F,
....................     MT25Q_CMD_READ_ID_MULTI_IO = 0xAF,
....................     MT25Q_CMD_READ_PARAMETER = 0x5A,
.................... 
....................     //READ MEMORY Operations
....................     MT25Q_CMD_READ = 0x03,
....................     MT25Q_CMD_READ_FAST = 0x0B,
....................     MT25Q_CMD_READ_DUAL_OUTPUT_FAST = 0x3B,
....................     MT25Q_CMD_READ_DUAL_IO_FAST = 0xBB,
....................     MT25Q_CMD_READ_QUAD_OUTPUT_FAST = 0x6B,
....................     MT25Q_CMD_READ_QUAD_IO_FAST = 0xEB,
....................     MT25Q_CMD_READ_QUAD_IO = 0x6B,
....................     MT25Q_CMD_READ_DTR_FAST = 0x0D,
....................     MT25Q_CMD_READ_DTR_OUTPUT_FAST = 0x3D,
....................     MT25Q_CMD_READ_DTR_IO_FAST = 0xBD,
....................     MT25Q_CMD_READ_DTR_QUAD_OUTPUT_FAST = 0x6D,
....................     MT25Q_CMD_READ_DTR_QUAD_IO_FAST = 0xED, 
....................     MT25Q_CMD_READ_QUAD_IO_WORD = 0xE7,
.................... 
....................     //READ MEMORY Operations with 4-Byte Address
....................     MT25Q_CMD_4BYTE_READ = 0x13,
....................     MT25Q_CMD_4BYTE_READ_FAST = 0x0C,
....................     MT25Q_CMD_4BYTE_READ_DUAL_OUTPUT_FAST = 0x3C,
....................     MT25Q_CMD_4BYTE_DUAL_IO_FAST_READ = 0xBC,  
....................     MT25Q_CMD_4BYTE_QUAD_OUTPUT_FAST_READ = 0x6C,
....................     MT25Q_CMD_4BYTE_QUAD_IO_FAST_READ = 0xEC,   
....................     MT25Q_CMD_4BYTE_DTR_FAST_READ = 0x0E,
....................     MT25Q_CMD_4BYTE_DTR_DUAL_IO_FAST_READ = 0xBE,
....................     MT25Q_CMD_4BYTE_DTR_QUAD_IO_FAST_READ = 0xEE,
.................... 
....................     //WRITE Operations
....................     MT25Q_CMD_WRITE_ENABLE = 0x06,
....................     MT25Q_CMD_WRITE_DISABLE = 0x04,
.................... 
....................     //READ REGISTER Operations
....................     MT25Q_CMD_READ_STATUS_REG = 0x05,
....................     MT25Q_CMD_READ_FLAG_STATUS_REG = 0x70,
....................     MT25Q_CMD_READ_NONVOL_CFG_REG = 0xB5,
....................     MT25Q_CMD_READ_VOL_CFG_REG = 0x85,
....................     MT25Q_CMD_READ_ENHANCED_VOL_CFG_REG = 0x65,
....................     MT25Q_CMD_READ_EXT_ADDR_REG = 0xC8,
....................     MT25Q_CMD_READ_GENERAL_PURPOSE_REG = 0x96,
.................... 
....................     //WRITE REGISTER Operations
....................     MT25Q_CMD_WRITE_STATUS_REG = 0x01,
....................     MT25Q_CMD_WRITE_NONVOL_CFG_REG = 0xB1,
....................     MT25Q_CMD_WRITE_VOL_CFG_REG = 0x81,
....................     MT25Q_CMD_WRITE_ENHANCED_VOL_CFG_REG = 0x61,
....................     MT25Q_CMD_WRITE_EXT_ADDR_REG = 0xC5,
.................... 
....................     //CLEAR FLAG STATUS REGISTER Operation
....................     MT25Q_CMD_CLEAR_FLAG_STATUS_REG = 0x50,
.................... 
....................     //PROGRAM Operations
....................     MT25Q_CMD_PAGE_PROGRAM = 0x02,
....................     MT25Q_CMD_DUAL_INPUT_FAST_PROGRAM = 0xA2,
....................     MT25Q_CMD_EXT_DUAL_INPUT_FAST_PROGRAM = 0xD2,
....................     MT25Q_CMD_QUAD_INPUT_FAST_PROGRAM = 0x32,
....................     MT25Q_CMD_EXT_QUAD_INPUT_FAST_PROGRAM = 0x38,
.................... 
....................     //PROGRAM Operations with 4-Byte Address
....................     MT25Q_CMD_4BYTE_PAGE_PROGRAM = 0x12,
....................     MT25Q_CMD_4BYTE_QUAD_INPUT_FAST_PROGRAM = 0x34,
....................     MT25Q_CMD_4BYTE_QUAD_INPUT_EXT_FAST_PROGRAM = 0x3E,
.................... 
....................     //ERASE Operations
....................     MT25Q_CMD_ERASE_32KB_SUBSECTOR = 0x52,
....................     MT25Q_CMD_ERASE_4KB_SUBSECTOR = 0x20,
....................     MT25Q_CMD_ERASE_SECTOR = 0xD8,
....................     MT25Q_CMD_ERASE_BULK = 0xC7,
.................... 
....................     //ERASE Operations with 4-Byte Address
....................     MT25Q_CMD_4BYTE_ERASE_SECTOR = 0xDC,
....................     MT25Q_CMD_4BYTE_ERASE_4KB_SUBSECTOR = 0x21,
....................     
....................     //SUSPEND/RESUME Operations
....................     MT25Q_CMD_PROGRAM_ERASE_SUSPEND = 0x75,
....................     MT25Q_CMD_PROGRAM_ERASE_RESUME = 0x7A,
.................... 
....................     //ONE-WIRE PROGRAMMING Operations
....................     MT25Q_CMD_READ_OPT_ARRAY = 0x4B,
....................     MT25Q_CMD_PROGRAM_OPT_ARRYA = 0x42,
.................... 
....................     //4-BYTE ADDRESSING Operations
....................     MT25Q_CMD_ENTER_4BYTE_ADDR_MODE = 0xB7,
....................     MT25Q_CMD_EXIT_4BYTE_ADDR_MODE = 0xE9,
.................... 
....................     //QUAD PROTOCOL Operations
....................     MT25Q_CMD_ENTER_QUAD_IO_MODE = 0x35,
....................     MT25Q_CMD_RESET_QUAD_IO_MODE = 0xF5,
.................... 
....................     //DEEP POWER-DOWN Operations
....................     MT25Q_CMD_DEEP_POWER_DOWN = 0xB9,
....................     MT25Q_CMD_RELEASE_FROM_DEEP_POWER_DOWN = 0xAB,
.................... 
....................     //ADVANCED PROGRAM/ERASE CONTROLS
....................     MT25Q_CMD_READ_SECTOR_PROTECTION = 0x2D,
....................     MT25Q_CMD_PROGRAM_SECTOR_PROTECTION = 0x2C,
....................     MT25Q_CMD_READ_VOLATILE_LOCK_BITS = 0xE8,
....................     MT25Q_CMD_WRITE_VOLATILE_LOCK_BITS = 0xE5,
....................     MT25Q_CMD_READ_NONVOLATILE_LOCK_BITS = 0xE2,
....................     MT25Q_CMD_WRITE_NONVOLATILE_LOCK_BITS = 0xE3,
....................     MT25Q_CMD_READ_GLOBAL_FREEZE_BIT = 0xA7,
....................     MT25Q_CMD_WRITE_GLOBAL_FREEZE_BIT = 0xA6,
....................     MT25Q_CMD_READ_PASSWORD = 0x27,
....................     MT25Q_CMD_WRITE_PASSWORD = 0x28,
....................     MT25Q_CMD_UNLOCK_PASSWORD = 0x29,
.................... 
....................     //ADVANCED SECTOR PROTECTION Operations
....................     MT25Q_CMD_4BYTE_READ_VOLATILE_LOCK_BITS = 0xE0,
....................     MT25Q_CMD_4BYTE_WRITE_VOLATILE_LOCK_BITS = 0xE1,
.................... 
....................     //ADVANCED FUNCTIONS INTERFACE Operations
....................     MT25Q_CMD_INTERFACE_ACTIVATION = 0x98,
....................     MT25Q_CMD_CYCLIC_REDUNDANCY_CHECK = 0x9B
.................... } mt25q_cmd_t;
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 all;  // 全体アクセス
....................     struct {
....................         unsigned int8 ADDRESSING_4BYTE     : 1; // Bit0
....................         unsigned int8 PROTECTION_ERROR     : 1; // Bit1
....................         unsigned int8 PROGRAM_SUSPEND      : 1; // Bit2
....................         unsigned int8 RESERVED             : 1; // Bit3
....................         unsigned int8 PROGRAM_FAIL         : 1; // Bit4
....................         unsigned int8 ERASE_FAIL           : 1; // Bit5
....................         unsigned int8 ERASE_SUSPEND        : 1; // Bit6
....................         unsigned int8 PROGRAM_OR_ERASE_BUSY: 1; // Bit7
....................     } bit;
.................... } mt25q_sr1_t;
.................... 
.................... typedef enum {
....................     MT25QL64,
....................     MT25QL128,
....................     MT25QL256,
....................     MT25QL512,
....................     MT25QL01G
.................... } mt25q_model_t;
.................... 
.................... 
.................... typedef struct {
....................     mt25q_model_t model;
....................     unsigned int32 size_bytes;
....................     unsigned int32 page_size_bytes;
....................     unsigned int32 sector_size_bytes;
....................     unsigned int32 subsector_32k_size_bytes;
....................     unsigned int32 subsector_4k_size_bytes;
.................... } mt25q_info_t;
.................... 
.................... typedef enum {
....................     MT25Q_FUNC_READ,
....................     MT25Q_FUNC_WRITE,
....................     MT25Q_FUNC_ERASE
.................... } mt25q_func_t;
.................... 
.................... typedef struct {
....................     mt25q_func_t function;
....................     unsigned int32 address;
....................     unsigned int8 *data;
....................     unsigned int32 length;
.................... } mt25q_cmd_param_t;
.................... 
.................... #define MT25Q_CMD_MAX_SIZE 8
.................... typedef struct {
....................     unsigned int8 cmd[MT25Q_CMD_MAX_SIZE];
....................     unsigned int8 cmd_length;
.................... } mt25q_send_cmd_t;
.................... 
.................... // void mt25q_make_cmd(mt25q_info_t *flash_info, mt25q_cmd_param_t *cmd_param, mt25q_send_cmd_t *cmd)
.................... 
.................... 
.................... #endif // DEV
.................... #endif
.................... 
.................... 
.................... #define MISSION_ID_PICLOG 0x03  // PICLOGミッションID
.................... 
.................... void piclog_save(int8 function, int8 parameter)
*
05120:  MOVLW  02
05122:  MOVLB  2
05124:  MOVWF  x09
05126:  MOVLW  02
05128:  MOVWF  x08
.................... {
....................     // Initialize PICLOG data structure
....................     piclog_t piclog;
....................     piclog_t *piclog_ptr = &piclog;
....................     memset(piclog_ptr, 0x00, PICLOG_PACKET_SIZE);
0512A:  MOVFF  209,FEA
0512E:  MOVFF  208,FE9
05132:  CLRF   00
05134:  CLRF   02
05136:  MOVLW  06
05138:  MOVWF  01
0513A:  MOVLB  0
0513C:  CALL   234C
....................     
....................     // Fill PICLOG fields
....................     piclog_ptr->fields.time = get_current_sec();
05140:  MOVLB  2
05142:  MOVF   x08,W
05144:  MOVWF  01
05146:  MOVF   x09,W
05148:  MOVWF  03
0514A:  MOVF   01,W
0514C:  MOVWF  x0B
0514E:  MOVFF  03,20C
05152:  MOVLB  0
05154:  CALL   3C28
05158:  MOVFF  20C,FEA
0515C:  MOVFF  20B,FE9
05160:  MOVFF  00,FEF
05164:  MOVFF  01,FEC
05168:  MOVFF  02,FEC
0516C:  MOVFF  03,FEC
05170:  MOVF   FED,F
05172:  MOVF   FED,F
05174:  MOVF   FED,F
....................     piclog_ptr->fields.function = function;
05176:  MOVLW  04
05178:  MOVLB  2
0517A:  ADDWF  x08,W
0517C:  MOVWF  FE9
0517E:  MOVLW  00
05180:  ADDWFC x09,W
05182:  MOVWF  FEA
05184:  MOVFF  200,FEF
....................     piclog_ptr->fields.parameter = parameter;
05188:  MOVLW  05
0518A:  ADDWF  x08,W
0518C:  MOVWF  FE9
0518E:  MOVLW  00
05190:  ADDWFC x09,W
05192:  MOVWF  FEA
05194:  MOVFF  201,FEF
.................... 
.................... 
....................     printf("[PICLOG] : ");
05198:  MOVLW  7E
0519A:  MOVWF  FF6
0519C:  MOVLW  06
0519E:  MOVWF  FF7
051A0:  MOVLW  00
051A2:  MOVWF  FF8
051A4:  MOVLB  0
051A6:  CALL   22DC
....................     for (int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
051AA:  MOVLB  2
051AC:  CLRF   x0A
051AE:  MOVLB  0
051B0:  MOVLB  2
051B2:  MOVF   x0A,W
051B4:  SUBLW  05
051B6:  BTFSC  FD8.0
051B8:  BRA    51C0
051BA:  MOVLB  0
051BC:  GOTO   51FC
051C0:  MOVLB  0
....................         printf("%02X ", piclog_ptr->bytes[i]);
051C2:  MOVLB  2
051C4:  MOVF   x0A,W
051C6:  ADDWF  x08,W
051C8:  MOVWF  FE9
051CA:  MOVLW  00
051CC:  ADDWFC x09,W
051CE:  MOVWF  FEA
051D0:  MOVFF  FEF,20B
051D4:  MOVFF  20B,9D9
051D8:  MOVLW  37
051DA:  MOVLB  9
051DC:  MOVWF  xDA
051DE:  MOVLB  0
051E0:  CALL   2542
051E4:  MOVLW  20
051E6:  BTFSS  FA6.6
051E8:  GOTO   51E6
051EC:  MOVLB  E
051EE:  MOVWF  xF9
051F0:  MOVLB  0
051F2:  MOVLB  2
051F4:  INCF   x0A,F
051F6:  MOVLB  0
051F8:  GOTO   51B0
....................     }
....................     printf("\r\n");
051FC:  MOVLW  0D
051FE:  BTFSS  FA6.6
05200:  GOTO   51FE
05204:  MOVLB  E
05206:  MOVWF  xF9
05208:  MOVLW  0A
0520A:  MOVLB  0
0520C:  BTFSS  FA6.6
0520E:  GOTO   520C
05212:  MOVLB  E
05214:  MOVWF  xF9
.................... 
....................     
....................     misf_write_data(FLASH_ID_PICLOG, piclog_ptr->bytes, PICLOG_PACKET_SIZE);
05216:  MOVLB  2
05218:  MOVF   x08,W
0521A:  MOVWF  01
0521C:  MOVF   x09,W
0521E:  MOVWF  03
05220:  MOVF   01,W
05222:  MOVWF  x0B
05224:  MOVFF  03,20C
05228:  MOVLW  01
0522A:  MOVLB  A
0522C:  MOVWF  x40
0522E:  MOVFF  20C,A42
05232:  MOVFF  20B,A41
05236:  CLRF   x44
05238:  MOVLW  06
0523A:  MOVWF  x43
0523C:  MOVLB  0
0523E:  CALL   42BA
....................     misf_update_address_area();
05242:  CALL   5090
05246:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "domain/cigs_smf.c"
.................... #include "cigs_smf.h"  
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #include "../hal/cigs_config.h" // int8,int32 型など(CCS C) 依存
.................... #include "cigs_flash.h"       // MISF_ADDRESS_TABLE, misf_counter_table 依存
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... extern int1 smf_update_flag[10]; // SMF更新フラグ
.................... 
.................... 
.................... // SMF管理用構造体
.................... typedef struct {
....................     ADDRESS_AREA_T header_area;
....................     ADDRESS_AREA_T data_area;
.................... } SMF_AREA_T;
.................... #define SMF_ID_COUNT 7
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 reserved;
.................... } SMF_PARTITION;
.................... 
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         SMF_PARTITION headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table);
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "cigs_flash.h"
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mt25q.h"              // Flash device definitions
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... // ================================== ADD NEW DEFINES HERE ==================================
.................... // =============================================================================================
.................... // MT25Q Flash Memory Specifications
.................... #define MT25Q_BLOCK_SIZE   4096
.................... #define MT25Q_BLOCK_NUM    8192
.................... #define DEV
.................... #ifdef DEV
.................... typedef enum mt25q_cmd{
....................     //Software RESET Operations
....................     MT25Q_CMD_RESET_ENABLE = 0x66,
....................     MT25Q_CMD_RESET_MEMORY = 0x99,
.................... 
....................     //READ ID Operations
....................     MT25Q_CMD_READ_ID = 0x9F,
....................     MT25Q_CMD_READ_ID_MULTI_IO = 0xAF,
....................     MT25Q_CMD_READ_PARAMETER = 0x5A,
.................... 
....................     //READ MEMORY Operations
....................     MT25Q_CMD_READ = 0x03,
....................     MT25Q_CMD_READ_FAST = 0x0B,
....................     MT25Q_CMD_READ_DUAL_OUTPUT_FAST = 0x3B,
....................     MT25Q_CMD_READ_DUAL_IO_FAST = 0xBB,
....................     MT25Q_CMD_READ_QUAD_OUTPUT_FAST = 0x6B,
....................     MT25Q_CMD_READ_QUAD_IO_FAST = 0xEB,
....................     MT25Q_CMD_READ_QUAD_IO = 0x6B,
....................     MT25Q_CMD_READ_DTR_FAST = 0x0D,
....................     MT25Q_CMD_READ_DTR_OUTPUT_FAST = 0x3D,
....................     MT25Q_CMD_READ_DTR_IO_FAST = 0xBD,
....................     MT25Q_CMD_READ_DTR_QUAD_OUTPUT_FAST = 0x6D,
....................     MT25Q_CMD_READ_DTR_QUAD_IO_FAST = 0xED, 
....................     MT25Q_CMD_READ_QUAD_IO_WORD = 0xE7,
.................... 
....................     //READ MEMORY Operations with 4-Byte Address
....................     MT25Q_CMD_4BYTE_READ = 0x13,
....................     MT25Q_CMD_4BYTE_READ_FAST = 0x0C,
....................     MT25Q_CMD_4BYTE_READ_DUAL_OUTPUT_FAST = 0x3C,
....................     MT25Q_CMD_4BYTE_DUAL_IO_FAST_READ = 0xBC,  
....................     MT25Q_CMD_4BYTE_QUAD_OUTPUT_FAST_READ = 0x6C,
....................     MT25Q_CMD_4BYTE_QUAD_IO_FAST_READ = 0xEC,   
....................     MT25Q_CMD_4BYTE_DTR_FAST_READ = 0x0E,
....................     MT25Q_CMD_4BYTE_DTR_DUAL_IO_FAST_READ = 0xBE,
....................     MT25Q_CMD_4BYTE_DTR_QUAD_IO_FAST_READ = 0xEE,
.................... 
....................     //WRITE Operations
....................     MT25Q_CMD_WRITE_ENABLE = 0x06,
....................     MT25Q_CMD_WRITE_DISABLE = 0x04,
.................... 
....................     //READ REGISTER Operations
....................     MT25Q_CMD_READ_STATUS_REG = 0x05,
....................     MT25Q_CMD_READ_FLAG_STATUS_REG = 0x70,
....................     MT25Q_CMD_READ_NONVOL_CFG_REG = 0xB5,
....................     MT25Q_CMD_READ_VOL_CFG_REG = 0x85,
....................     MT25Q_CMD_READ_ENHANCED_VOL_CFG_REG = 0x65,
....................     MT25Q_CMD_READ_EXT_ADDR_REG = 0xC8,
....................     MT25Q_CMD_READ_GENERAL_PURPOSE_REG = 0x96,
.................... 
....................     //WRITE REGISTER Operations
....................     MT25Q_CMD_WRITE_STATUS_REG = 0x01,
....................     MT25Q_CMD_WRITE_NONVOL_CFG_REG = 0xB1,
....................     MT25Q_CMD_WRITE_VOL_CFG_REG = 0x81,
....................     MT25Q_CMD_WRITE_ENHANCED_VOL_CFG_REG = 0x61,
....................     MT25Q_CMD_WRITE_EXT_ADDR_REG = 0xC5,
.................... 
....................     //CLEAR FLAG STATUS REGISTER Operation
....................     MT25Q_CMD_CLEAR_FLAG_STATUS_REG = 0x50,
.................... 
....................     //PROGRAM Operations
....................     MT25Q_CMD_PAGE_PROGRAM = 0x02,
....................     MT25Q_CMD_DUAL_INPUT_FAST_PROGRAM = 0xA2,
....................     MT25Q_CMD_EXT_DUAL_INPUT_FAST_PROGRAM = 0xD2,
....................     MT25Q_CMD_QUAD_INPUT_FAST_PROGRAM = 0x32,
....................     MT25Q_CMD_EXT_QUAD_INPUT_FAST_PROGRAM = 0x38,
.................... 
....................     //PROGRAM Operations with 4-Byte Address
....................     MT25Q_CMD_4BYTE_PAGE_PROGRAM = 0x12,
....................     MT25Q_CMD_4BYTE_QUAD_INPUT_FAST_PROGRAM = 0x34,
....................     MT25Q_CMD_4BYTE_QUAD_INPUT_EXT_FAST_PROGRAM = 0x3E,
.................... 
....................     //ERASE Operations
....................     MT25Q_CMD_ERASE_32KB_SUBSECTOR = 0x52,
....................     MT25Q_CMD_ERASE_4KB_SUBSECTOR = 0x20,
....................     MT25Q_CMD_ERASE_SECTOR = 0xD8,
....................     MT25Q_CMD_ERASE_BULK = 0xC7,
.................... 
....................     //ERASE Operations with 4-Byte Address
....................     MT25Q_CMD_4BYTE_ERASE_SECTOR = 0xDC,
....................     MT25Q_CMD_4BYTE_ERASE_4KB_SUBSECTOR = 0x21,
....................     
....................     //SUSPEND/RESUME Operations
....................     MT25Q_CMD_PROGRAM_ERASE_SUSPEND = 0x75,
....................     MT25Q_CMD_PROGRAM_ERASE_RESUME = 0x7A,
.................... 
....................     //ONE-WIRE PROGRAMMING Operations
....................     MT25Q_CMD_READ_OPT_ARRAY = 0x4B,
....................     MT25Q_CMD_PROGRAM_OPT_ARRYA = 0x42,
.................... 
....................     //4-BYTE ADDRESSING Operations
....................     MT25Q_CMD_ENTER_4BYTE_ADDR_MODE = 0xB7,
....................     MT25Q_CMD_EXIT_4BYTE_ADDR_MODE = 0xE9,
.................... 
....................     //QUAD PROTOCOL Operations
....................     MT25Q_CMD_ENTER_QUAD_IO_MODE = 0x35,
....................     MT25Q_CMD_RESET_QUAD_IO_MODE = 0xF5,
.................... 
....................     //DEEP POWER-DOWN Operations
....................     MT25Q_CMD_DEEP_POWER_DOWN = 0xB9,
....................     MT25Q_CMD_RELEASE_FROM_DEEP_POWER_DOWN = 0xAB,
.................... 
....................     //ADVANCED PROGRAM/ERASE CONTROLS
....................     MT25Q_CMD_READ_SECTOR_PROTECTION = 0x2D,
....................     MT25Q_CMD_PROGRAM_SECTOR_PROTECTION = 0x2C,
....................     MT25Q_CMD_READ_VOLATILE_LOCK_BITS = 0xE8,
....................     MT25Q_CMD_WRITE_VOLATILE_LOCK_BITS = 0xE5,
....................     MT25Q_CMD_READ_NONVOLATILE_LOCK_BITS = 0xE2,
....................     MT25Q_CMD_WRITE_NONVOLATILE_LOCK_BITS = 0xE3,
....................     MT25Q_CMD_READ_GLOBAL_FREEZE_BIT = 0xA7,
....................     MT25Q_CMD_WRITE_GLOBAL_FREEZE_BIT = 0xA6,
....................     MT25Q_CMD_READ_PASSWORD = 0x27,
....................     MT25Q_CMD_WRITE_PASSWORD = 0x28,
....................     MT25Q_CMD_UNLOCK_PASSWORD = 0x29,
.................... 
....................     //ADVANCED SECTOR PROTECTION Operations
....................     MT25Q_CMD_4BYTE_READ_VOLATILE_LOCK_BITS = 0xE0,
....................     MT25Q_CMD_4BYTE_WRITE_VOLATILE_LOCK_BITS = 0xE1,
.................... 
....................     //ADVANCED FUNCTIONS INTERFACE Operations
....................     MT25Q_CMD_INTERFACE_ACTIVATION = 0x98,
....................     MT25Q_CMD_CYCLIC_REDUNDANCY_CHECK = 0x9B
.................... } mt25q_cmd_t;
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 all;  // 全体アクセス
....................     struct {
....................         unsigned int8 ADDRESSING_4BYTE     : 1; // Bit0
....................         unsigned int8 PROTECTION_ERROR     : 1; // Bit1
....................         unsigned int8 PROGRAM_SUSPEND      : 1; // Bit2
....................         unsigned int8 RESERVED             : 1; // Bit3
....................         unsigned int8 PROGRAM_FAIL         : 1; // Bit4
....................         unsigned int8 ERASE_FAIL           : 1; // Bit5
....................         unsigned int8 ERASE_SUSPEND        : 1; // Bit6
....................         unsigned int8 PROGRAM_OR_ERASE_BUSY: 1; // Bit7
....................     } bit;
.................... } mt25q_sr1_t;
.................... 
.................... typedef enum {
....................     MT25QL64,
....................     MT25QL128,
....................     MT25QL256,
....................     MT25QL512,
....................     MT25QL01G
.................... } mt25q_model_t;
.................... 
.................... 
.................... typedef struct {
....................     mt25q_model_t model;
....................     unsigned int32 size_bytes;
....................     unsigned int32 page_size_bytes;
....................     unsigned int32 sector_size_bytes;
....................     unsigned int32 subsector_32k_size_bytes;
....................     unsigned int32 subsector_4k_size_bytes;
.................... } mt25q_info_t;
.................... 
.................... typedef enum {
....................     MT25Q_FUNC_READ,
....................     MT25Q_FUNC_WRITE,
....................     MT25Q_FUNC_ERASE
.................... } mt25q_func_t;
.................... 
.................... typedef struct {
....................     mt25q_func_t function;
....................     unsigned int32 address;
....................     unsigned int8 *data;
....................     unsigned int32 length;
.................... } mt25q_cmd_param_t;
.................... 
.................... #define MT25Q_CMD_MAX_SIZE 8
.................... typedef struct {
....................     unsigned int8 cmd[MT25Q_CMD_MAX_SIZE];
....................     unsigned int8 cmd_length;
.................... } mt25q_send_cmd_t;
.................... 
.................... // void mt25q_make_cmd(mt25q_info_t *flash_info, mt25q_cmd_param_t *cmd_param, mt25q_send_cmd_t *cmd)
.................... 
.................... 
.................... #endif // DEV
.................... #endif
.................... 
.................... #include "../lib/tool/smf_queue.h"            // システム設定 
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/tool/calc_tools.h"           // SMF処理関数 
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/mmj_smf_memorymap.h" 
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... typedef enum smf_memory_id_t{
....................     // SATO
....................     SMF_SATO_DATA_TABLE = 0xA0,
....................     SMF_SATO_PICLOG = 0xA1,
....................     SMF_SATO_INNER_DIODE_HEADER = 0xA2,
....................     SMF_SATO_INNER_DIODE_DATA = 0xA3,
....................     SMF_SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SMF_SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     SMF_CIGS_DATA_TABLE = 0xC0,
....................     SMF_CIGS_PICLOG = 0xC1,
....................     SMF_CIGS_ENVIRO = 0xC2,
....................     SMF_CIGS_IV1_HEADER = 0xC3,
....................     SMF_CIGS_IV1_DATA = 0xC4,
....................     SMF_CIGS_IV2_HEADER = 0xC5,
....................     SMF_CIGS_IV2_DATA = 0xC6,
.................... };
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS   0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS   0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS     0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS       0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS         0x06AB0FFF
.................... #define CIGS_ENVIRO_START_ADDRESS       0x06AB1000
.................... #define CIGS_ENVIRO_END_ADDRESS         0x06B50FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS   0x06B51000
.................... #define CIGS_IV1_HEADER_END_ADDRESS     0x06BF0FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS     0x06BF1000
.................... #define CIGS_IV1_DATA_END_ADDRESS       0x06FF0FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS   0x06FF1000
.................... #define CIGS_IV2_HEADER_END_ADDRESS     0x07090FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS     0x07091000
.................... #define CIGS_IV2_DATA_END_ADDRESS       0x07490FFF
.................... 
.................... /*
.................... enum smf_memory_id{
....................     // SATO
....................     SATO_DATA_TABLE = 0xA0,
....................     SATO_PICLOG = 0xA1,
....................     SATO_INNER_DIODE_HEADER = 0xA2,
....................     SATO_INNER_DIODE_DATA = 0xA3,
....................     SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     IDF_CIGS_DATA_TABLE = 0xC0,
....................     IDF_CIGS_PICLOG = 0xC1,
....................     IDF_CIGS_ENVIRO = 0xC2,
....................     IDF_CIGS_IV1_HEADER = 0xC3,
....................     IDF_CIGS_IV1_DATA = 0xC4,
....................     IDF_CIGS_IV2_HEADER = 0xC5,
....................     IDF_CIGS_IV2_DATA = 0xC6,
.................... }
.................... */
.................... // DATA ID for CIGS
.................... #define DATA_ID_CIGS_DATA_TABLE 0xC0
.................... #define DATA_ID_CIGS_PICLOG 0xC1
.................... #define DATA_ID_CIGS_ENVIRO 0xC2
.................... #define DATA_ID_CIGS_IV1_HEADER 0xC3
.................... #define DATA_ID_CIGS_IV1_DATA 0xC4
.................... #define DATA_ID_CIGS_IV2_HEADER 0xC5
.................... #define DATA_ID_CIGS_IV2_DATA 0xC6
.................... 
.................... // FLASH ADDRESS for CIGS
.................... #define SMF_DATA_TABLE_HEADER_START_ADDRESS   0x073B0000
.................... #define SMF_DATA_TABLE_HEADER_END_ADDRESS     0x073B0FFF
.................... #define SMF_DATA_TABLE_DATA_START_ADDRESS     0x073B1000
.................... #define SMF_DATA_TABLE_DATA_END_ADDRESS       0x073B1FFF
.................... 
.................... #define SMF_PICLOG_HEADER_START_ADDRESS       0x073B2000
.................... #define SMF_PICLOG_HEADER_END_ADDRESS         0x073B2FFF
.................... #define SMF_PICLOG_DATA_START_ADDRESS         0x073B3000
.................... #define SMF_PICLOG_DATA_END_ADDRESS           0x073C2FFF
.................... 
.................... #define SMF_ENVIRO_HEADER_START_ADDRESS       0x073C3000
.................... #define SMF_ENVIRO_HEADER_END_ADDRESS         0x073C3FFF
.................... #define SMF_ENVIRO_DATA_START_ADDRESS         0x073C4000
.................... #define SMF_ENVIRO_DATA_END_ADDRESS           0x07463FFF
.................... 
.................... #define SMF_IV1_HEADER_HEADER_START_ADDRESS   0x07464000
.................... #define SMF_IV1_HEADER_HEADER_END_ADDRESS     0x07464FFF
.................... #define SMF_IV1_HEADER_DATA_START_ADDRESS     0x07465000
.................... #define SMF_IV1_HEADER_DATA_END_ADDRESS       0x07504FFF
.................... 
.................... #define SMF_IV1_DATA_HEADER_START_ADDRESS     0x07505000
.................... #define SMF_IV1_DATA_HEADER_END_ADDRESS       0x07505FFF
.................... #define SMF_IV1_DATA_DATA_START_ADDRESS       0x07506000
.................... #define SMF_IV1_DATA_DATA_END_ADDRESS         0x07905FFF
.................... 
.................... #define SMF_IV2_HEADER_HEADER_START_ADDRESS   0x07906000
.................... #define SMF_IV2_HEADER_HEADER_END_ADDRESS     0x07906FFF
.................... #define SMF_IV2_HEADER_DATA_START_ADDRESS     0x07907000
.................... #define SMF_IV2_HEADER_DATA_END_ADDRESS       0x079A6FFF
.................... 
.................... #define SMF_IV2_DATA_HEADER_START_ADDRESS     0x079A7000
.................... #define SMF_IV2_DATA_HEADER_END_ADDRESS       0x079A7FFF
.................... #define SMF_IV2_DATA_DATA_START_ADDRESS       0x079A8000
.................... #define SMF_IV2_DATA_DATA_END_ADDRESS         0x07DA7FFF
.................... 
.................... 
.................... // FLASH SIZE for CIGS
.................... #define SMF_DATA_TABLE_SIZE  4096
.................... #define SMF_PICLOG_SIZE     1310720
.................... #define SMF_ENVIRO_SIZE     1310720
.................... #define SMF_IV1_HEADER_SIZE  655360
.................... #define SMF_IV1_DATA_SIZE    4194304
.................... #define SMF_IV2_HEADER_SIZE  655360
.................... #define SMF_IV2_DATA_SIZE    4194304
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... #define CRC_RETRY_COUNT 5     // CRC検証のリトライ回数 (smf_queue.hの値と整合するなら一元化検討)
.................... 
.................... 
.................... const ADDRESS_AREA_T SMF_ADDRESS_TABLE[FLASH_ID_COUNT] = {
....................     { CIGS_DATA_TABLE_START_ADDRESS,   CIGS_DATA_TABLE_END_ADDRESS,   MISF_CIGS_DATA_TABLE_SIZE },
....................     { CIGS_PICLOG_START_ADDRESS,       CIGS_PICLOG_END_ADDRESS,       MISF_CIGS_PICLOG_SIZE },
....................     { CIGS_ENVIRO_START_ADDRESS,       CIGS_ENVIRO_END_ADDRESS,       MISF_CIGS_ENVIRO_SIZE },
....................     { CIGS_IV1_HEADER_START_ADDRESS,   CIGS_IV1_HEADER_END_ADDRESS,   MISF_CIGS_IV1_HEADER_SIZE },
....................     { CIGS_IV1_DATA_START_ADDRESS,     CIGS_IV1_DATA_END_ADDRESS,     MISF_CIGS_IV1_DATA_SIZE },
....................     { CIGS_IV2_HEADER_START_ADDRESS,   CIGS_IV2_HEADER_END_ADDRESS,   MISF_CIGS_IV2_HEADER_SIZE },
....................     { CIGS_IV2_DATA_START_ADDRESS,     CIGS_IV2_DATA_END_ADDRESS,     MISF_CIGS_IV2_DATA_SIZE }
.................... };
.................... 
.................... int1 smf_update_flag[10];
.................... 
.................... void update_smf_header()
.................... {
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... }
.................... 
.................... 
.................... void smf_data_table_init()
.................... {
....................     fprintf(PC, "SMF Data Table Initialize\r\n");
*
079E2:  MOVLW  8A
079E4:  MOVWF  FF6
079E6:  MOVLW  06
079E8:  MOVWF  FF7
079EA:  MOVLW  00
079EC:  MOVWF  FF8
079EE:  CALL   22DC
....................     for ( unsigned int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_IV2_DATA_END_ADDRESS; address += SUBSECTOR_SIZE )
079F2:  MOVLW  06
079F4:  MOVLB  1
079F6:  MOVWF  xE9
079F8:  MOVLW  AA
079FA:  MOVWF  xE8
079FC:  CLRF   xE7
079FE:  CLRF   xE6
07A00:  MOVLB  0
07A02:  MOVLB  1
07A04:  MOVF   xE9,W
07A06:  SUBLW  07
07A08:  BTFSC  FD8.0
07A0A:  BRA    7A12
07A0C:  MOVLB  0
07A0E:  GOTO   7A94
07A12:  MOVLB  0
07A14:  BTFSS  FD8.2
07A16:  GOTO   7A5C
07A1A:  MOVLB  1
07A1C:  MOVF   xE8,W
07A1E:  SUBLW  49
07A20:  BTFSC  FD8.0
07A22:  BRA    7A2A
07A24:  MOVLB  0
07A26:  GOTO   7A94
07A2A:  MOVLB  0
07A2C:  BTFSS  FD8.2
07A2E:  GOTO   7A5C
07A32:  MOVLB  1
07A34:  MOVF   xE7,W
07A36:  SUBLW  0F
07A38:  BTFSC  FD8.0
07A3A:  BRA    7A42
07A3C:  MOVLB  0
07A3E:  GOTO   7A94
07A42:  MOVLB  0
07A44:  BTFSS  FD8.2
07A46:  GOTO   7A5C
07A4A:  MOVLB  1
07A4C:  MOVF   xE6,W
07A4E:  SUBLW  FE
07A50:  BTFSC  FD8.0
07A52:  BRA    7A5A
07A54:  MOVLB  0
07A56:  GOTO   7A94
07A5A:  MOVLB  0
....................     {
....................         subsector_4kByte_erase(smf, address);
07A5C:  MOVFF  10B,9F8
07A60:  MOVFF  10A,9F7
07A64:  MOVFF  109,9F6
07A68:  MOVFF  108,9F5
07A6C:  MOVFF  1E9,9FC
07A70:  MOVFF  1E8,9FB
07A74:  MOVFF  1E7,9FA
07A78:  MOVFF  1E6,9F9
07A7C:  CALL   4D66
07A80:  MOVLW  10
07A82:  MOVLB  1
07A84:  ADDWF  xE7,F
07A86:  MOVLW  00
07A88:  ADDWFC xE8,F
07A8A:  MOVLW  00
07A8C:  ADDWFC xE9,F
07A8E:  MOVLB  0
07A90:  GOTO   7A02
....................     }
....................     smf_data_table_t smf_data_table = {0};
07A94:  MOVLB  1
07A96:  CLRF   xEA
07A98:  CLRF   xEB
07A9A:  CLRF   xEC
07A9C:  CLRF   xED
07A9E:  CLRF   xEE
07AA0:  CLRF   xEF
07AA2:  CLRF   xF0
07AA4:  CLRF   xF1
07AA6:  CLRF   xF2
07AA8:  CLRF   xF3
07AAA:  CLRF   xF4
07AAC:  CLRF   xF5
07AAE:  CLRF   xF6
07AB0:  CLRF   xF7
07AB2:  CLRF   xF8
07AB4:  CLRF   xF9
07AB6:  CLRF   xFA
07AB8:  CLRF   xFB
07ABA:  CLRF   xFC
07ABC:  CLRF   xFD
07ABE:  CLRF   xFE
07AC0:  CLRF   xFF
07AC2:  MOVLB  2
07AC4:  CLRF   x00
07AC6:  CLRF   x01
07AC8:  CLRF   x02
07ACA:  CLRF   x03
07ACC:  CLRF   x04
07ACE:  CLRF   x05
07AD0:  CLRF   x06
07AD2:  CLRF   x07
07AD4:  CLRF   x08
07AD6:  CLRF   x09
07AD8:  CLRF   x0A
07ADA:  CLRF   x0B
07ADC:  CLRF   x0C
07ADE:  CLRF   x0D
07AE0:  CLRF   x0E
07AE2:  CLRF   x0F
07AE4:  CLRF   x10
07AE6:  CLRF   x11
07AE8:  CLRF   x12
07AEA:  CLRF   x13
07AEC:  CLRF   x14
07AEE:  CLRF   x15
07AF0:  CLRF   x16
07AF2:  CLRF   x17
07AF4:  CLRF   x18
07AF6:  CLRF   x19
07AF8:  CLRF   x1A
07AFA:  CLRF   x1B
07AFC:  CLRF   x1C
07AFE:  CLRF   x1D
07B00:  CLRF   x1E
07B02:  CLRF   x1F
07B04:  CLRF   x20
07B06:  CLRF   x21
07B08:  CLRF   x22
07B0A:  CLRF   x23
07B0C:  CLRF   x24
07B0E:  CLRF   x25
07B10:  CLRF   x26
07B12:  CLRF   x27
07B14:  CLRF   x28
07B16:  CLRF   x29
....................     smf_data_table.fields.crc = calc_crc8(smf_data_table.bytes, PACKET_SIZE - 1); // CRCを計算して初期化    
07B18:  MOVLW  01
07B1A:  MOVLB  A
07B1C:  MOVWF  xDC
07B1E:  MOVLW  EA
07B20:  MOVWF  xDB
07B22:  MOVLW  3F
07B24:  MOVWF  xDD
07B26:  MOVLB  0
07B28:  CALL   30FC
07B2C:  MOVFF  01,229
....................     write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table.bytes, PACKET_SIZE);
07B30:  MOVFF  10B,ADE
07B34:  MOVFF  10A,ADD
07B38:  MOVFF  109,ADC
07B3C:  MOVFF  108,ADB
07B40:  MOVLW  06
07B42:  MOVLB  A
07B44:  MOVWF  xE2
07B46:  MOVLW  AA
07B48:  MOVWF  xE1
07B4A:  CLRF   xE0
07B4C:  CLRF   xDF
07B4E:  MOVLW  01
07B50:  MOVWF  xE4
07B52:  MOVLW  EA
07B54:  MOVWF  xE3
07B56:  CLRF   xE6
07B58:  MOVLW  40
07B5A:  MOVWF  xE5
07B5C:  MOVLB  0
07B5E:  CALL   3F6E
07B62:  RETURN 0
.................... }
.................... 
.................... void read_smf_header(smf_data_table_t *smf_data_table)
.................... {
....................     int8 retry_count;
.................... 
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
....................     {
....................         // ヘッダを読み出し
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
....................         print_smf_counter_status(smf_data_table);
.................... 
....................         // CRC検証
....................         if (is_crc_valid(smf_data_table->bytes, PACKET_SIZE))
....................         {
....................             return; // 成功したら終了
....................         }
....................         // NGなら少し待って再試行
....................         printf("CRC ERROR %d\r\n", retry_count + 1);
....................     }
.................... 
....................     // ここまで来たら失敗
....................     printf("CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
.................... 
....................     // 読み込み失敗時は初期化しておく
....................     smf_data_table_init();
....................     read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
.................... 
....................     return;
.................... }
.................... 
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table)
.................... {
....................     int1 crc_valid = 0;
....................     int8 readdata[PACKET_SIZE];
....................     smf_data_table->fields.crc = calc_crc8(smf_data_table->bytes, PACKET_SIZE - 1); // CRCを更新
.................... 
....................     for (int8 retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE); // ヘッダーを書き込み
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
....................         if (is_crc_valid(readdata, PACKET_SIZE))
....................         {
....................             crc_valid = 1; // FIX            break;
....................         }
....................     }
....................     if (!crc_valid)
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
....................         // return; 
....................     }
.................... }
.................... 
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table)
.................... {
....................     fprintf(PC, "\r\n[SMF Counter Status]\r\n");
....................     fprintf(PC, "\tPARTITION\tUSED\t\tRESERVE\r\n");
....................     fprintf(PC, "\t---------\t----------\t----------\r\n");
....................     fprintf(PC, "\tPICLOG\t\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_PICLOG_DATA].used_size, smf_data_table->fields.headers[CIGS_PICLOG_DATA].reserved);
....................     fprintf(PC, "\tENVIRO\t\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_ENVIRO_DATA].used_size, smf_data_table->fields.headers[CIGS_ENVIRO_DATA].reserved);
....................     fprintf(PC, "\tIV1_HEADER\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_IV1_HEADER].used_size, smf_data_table->fields.headers[CIGS_IV1_HEADER].reserved);
....................     fprintf(PC, "\tIV1_DATA\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_IV1_DATA].used_size, smf_data_table->fields.headers[CIGS_IV1_DATA].reserved);
....................     fprintf(PC, "\tIV2_HEADER\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_IV2_HEADER].used_size, smf_data_table->fields.headers[CIGS_IV2_HEADER].reserved);
....................     fprintf(PC, "\tIV2_DATA\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_IV2_DATA].used_size, smf_data_table->fields.headers[CIGS_IV2_DATA].reserved);
....................     fprintf(PC, "\t==========================================\r\n\r\n");
.................... }
.................... 
.................... void smf_write(FlashOperationStruct *smf_queue_ptr)
.................... {
....................     fprintf(PC, "\r\n_______________________________\r\n");
*
1033C:  MOVLW  4C
1033E:  MOVWF  FF6
10340:  MOVLW  08
10342:  MOVWF  FF7
10344:  MOVLW  00
10346:  MOVWF  FF8
10348:  CALL   22DC
....................     fprintf(PC, "_________Start copy_data_________\r\n");
1034C:  MOVLW  70
1034E:  MOVWF  FF6
10350:  MOVLW  08
10352:  MOVWF  FF7
10354:  MOVLW  00
10356:  MOVWF  FF8
10358:  CALL   22DC
....................     
....................     // 接続確認
....................     if (!is_connect(mis_fm))
1035C:  MOVFF  107,245
10360:  MOVFF  106,244
10364:  MOVFF  105,243
10368:  MOVFF  104,242
1036C:  CALL   2E12
10370:  MOVF   01,F
10372:  BTFSS  FD8.2
10374:  GOTO   1038C
....................     {
....................         fprintf(PC, "Error: MIS FM is not connected\r\n");
10378:  MOVLW  94
1037A:  MOVWF  FF6
1037C:  MOVLW  08
1037E:  MOVWF  FF7
10380:  MOVLW  00
10382:  MOVWF  FF8
10384:  CALL   22DC
....................         return;
10388:  GOTO   11268
....................     }    
....................     if (!is_connect(smf))
1038C:  MOVFF  10B,245
10390:  MOVFF  10A,244
10394:  MOVFF  109,243
10398:  MOVFF  108,242
1039C:  CALL   2E12
103A0:  MOVF   01,F
103A2:  BTFSS  FD8.2
103A4:  GOTO   103BC
....................     {
....................         fprintf(PC, "Error: SMF is not connected\r\n");
103A8:  MOVLW  B6
103AA:  MOVWF  FF6
103AC:  MOVLW  08
103AE:  MOVWF  FF7
103B0:  MOVLW  00
103B2:  MOVWF  FF8
103B4:  CALL   22DC
....................         return;
103B8:  GOTO   11268
....................     }    
.................... 
.................... 
....................     // smf_data_table_t smf_data_table;
....................     // read_smf_header(&smf_data_table);
.................... 
.................... 
....................     unsigned int32 misf_write_src;
....................     unsigned int32 misf_write_size;
....................     unsigned int32 used_size = misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter;
103BC:  MOVLB  1
103BE:  MOVF   x92,W
103C0:  MOVWF  FE9
103C2:  MOVF   x93,W
103C4:  MOVWF  FEA
103C6:  MOVF   FEF,W
103C8:  MULLW  0A
103CA:  MOVF   FF3,W
103CC:  MOVLB  2
103CE:  CLRF   x02
103D0:  MOVWF  x01
103D2:  MOVLW  04
103D4:  ADDWF  x01,W
103D6:  MOVWF  01
103D8:  MOVLW  00
103DA:  ADDWFC x02,W
103DC:  MOVWF  03
103DE:  MOVF   01,W
103E0:  ADDLW  14
103E2:  MOVWF  FE9
103E4:  MOVLW  01
103E6:  ADDWFC 03,W
103E8:  MOVWF  FEA
103EA:  MOVFF  FEF,19C
103EE:  MOVFF  FEC,19D
103F2:  MOVFF  FEC,19E
103F6:  MOVFF  FEC,19F
103FA:  MOVF   FED,F
103FC:  MOVF   FED,F
103FE:  MOVF   FED,F
....................     //アドレスと自動更新
....................     if (smf_queue_ptr->source_type == SOURCE_MISF_UNCOPIED )
10400:  MOVLW  03
10402:  MOVLB  1
10404:  ADDWF  x92,W
10406:  MOVWF  01
10408:  MOVLW  00
1040A:  ADDWFC x93,W
1040C:  MOVWF  03
1040E:  MOVF   01,W
10410:  MOVWF  FE9
10412:  MOVFF  03,FEA
10416:  BTFSS  FEF.0
10418:  BRA    10420
1041A:  MOVLB  0
1041C:  GOTO   10562
10420:  MOVLB  0
....................     {
....................         misf_write_src = MISF_ADDRESS_TABLE[smf_queue_ptr->mission_id].start + misf_counter_table[smf_queue_ptr->mission_id].used_counter - misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter;
10422:  MOVLB  1
10424:  MOVF   x92,W
10426:  MOVWF  FE9
10428:  MOVF   x93,W
1042A:  MOVWF  FEA
1042C:  MOVF   FEF,W
1042E:  MULLW  0C
10430:  MOVF   FF3,W
10432:  MOVLB  2
10434:  CLRF   x02
10436:  MOVWF  x01
10438:  MOVFF  202,03
1043C:  MOVF   x01,W
1043E:  MOVLB  0
10440:  CALL   00E6
10444:  MOVWF  00
10446:  TBLRD*+
10448:  MOVFF  FF5,01
1044C:  TBLRD*+
1044E:  MOVFF  FF5,02
10452:  TBLRD*+
10454:  MOVFF  FF5,03
10458:  MOVFF  03,206
1045C:  MOVFF  02,205
10460:  MOVFF  01,204
10464:  MOVFF  00,203
10468:  MOVLB  1
1046A:  MOVF   x92,W
1046C:  MOVWF  FE9
1046E:  MOVF   x93,W
10470:  MOVWF  FEA
10472:  MOVF   FEF,W
10474:  MULLW  0A
10476:  MOVF   FF3,W
10478:  MOVLB  2
1047A:  CLRF   x08
1047C:  MOVWF  x07
1047E:  MOVLW  14
10480:  ADDWF  x07,W
10482:  MOVWF  FE9
10484:  MOVLW  01
10486:  ADDWFC x08,W
10488:  MOVWF  FEA
1048A:  MOVFF  FEF,00
1048E:  MOVFF  FEC,01
10492:  MOVFF  FEC,02
10496:  MOVFF  FEC,03
1049A:  MOVF   FED,F
1049C:  MOVF   FED,F
1049E:  MOVF   FED,F
104A0:  MOVF   00,W
104A2:  ADDWF  x03,F
104A4:  MOVF   01,W
104A6:  ADDWFC x04,F
104A8:  MOVF   02,W
104AA:  ADDWFC x05,F
104AC:  MOVF   03,W
104AE:  ADDWFC x06,F
104B0:  MOVLB  1
104B2:  MOVF   x92,W
104B4:  MOVWF  FE9
104B6:  MOVF   x93,W
104B8:  MOVWF  FEA
104BA:  MOVF   FEF,W
104BC:  MULLW  0A
104BE:  MOVF   FF3,W
104C0:  MOVLB  2
104C2:  CLRF   x0A
104C4:  MOVWF  x09
104C6:  MOVLW  04
104C8:  ADDWF  x09,W
104CA:  MOVWF  01
104CC:  MOVLW  00
104CE:  ADDWFC x0A,W
104D0:  MOVWF  03
104D2:  MOVF   01,W
104D4:  ADDLW  14
104D6:  MOVWF  FE9
104D8:  MOVLW  01
104DA:  ADDWFC 03,W
104DC:  MOVWF  FEA
104DE:  MOVFF  FEF,00
104E2:  MOVFF  FEC,01
104E6:  MOVFF  FEC,02
104EA:  MOVFF  FEC,03
104EE:  MOVF   FED,F
104F0:  MOVF   FED,F
104F2:  MOVF   FED,F
104F4:  MOVF   00,W
104F6:  SUBWF  x03,W
104F8:  MOVLB  1
104FA:  MOVWF  x94
104FC:  MOVF   01,W
104FE:  MOVLB  2
10500:  SUBWFB x04,W
10502:  MOVLB  1
10504:  MOVWF  x95
10506:  MOVF   02,W
10508:  MOVLB  2
1050A:  SUBWFB x05,W
1050C:  MOVLB  1
1050E:  MOVWF  x96
10510:  MOVF   03,W
10512:  MOVLB  2
10514:  SUBWFB x06,W
10516:  MOVLB  1
10518:  MOVWF  x97
....................         misf_write_size = misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter;
1051A:  MOVF   x92,W
1051C:  MOVWF  FE9
1051E:  MOVF   x93,W
10520:  MOVWF  FEA
10522:  MOVF   FEF,W
10524:  MULLW  0A
10526:  MOVF   FF3,W
10528:  MOVLB  2
1052A:  CLRF   x02
1052C:  MOVWF  x01
1052E:  MOVLW  04
10530:  ADDWF  x01,W
10532:  MOVWF  01
10534:  MOVLW  00
10536:  ADDWFC x02,W
10538:  MOVWF  03
1053A:  MOVF   01,W
1053C:  ADDLW  14
1053E:  MOVWF  FE9
10540:  MOVLW  01
10542:  ADDWFC 03,W
10544:  MOVWF  FEA
10546:  MOVFF  FEF,198
1054A:  MOVFF  FEC,199
1054E:  MOVFF  FEC,19A
10552:  MOVFF  FEC,19B
10556:  MOVF   FED,F
10558:  MOVF   FED,F
1055A:  MOVF   FED,F
1055C:  MOVLB  0
....................     }else if(smf_queue_ptr->source_type == SOURCE_MISF_MANUAL)
1055E:  GOTO   105CC
10562:  MOVLW  03
10564:  MOVLB  1
10566:  ADDWF  x92,W
10568:  MOVWF  01
1056A:  MOVLW  00
1056C:  ADDWFC x93,W
1056E:  MOVWF  03
10570:  MOVF   01,W
10572:  MOVWF  FE9
10574:  MOVFF  03,FEA
10578:  BTFSC  FEF.0
1057A:  BRA    10582
1057C:  MOVLB  0
1057E:  GOTO   105CC
10582:  MOVLB  0
....................     {
....................         misf_write_src = smf_queue_ptr->misf_start_addr;
10584:  MOVLW  04
10586:  MOVLB  1
10588:  ADDWF  x92,W
1058A:  MOVWF  FE9
1058C:  MOVLW  00
1058E:  ADDWFC x93,W
10590:  MOVWF  FEA
10592:  MOVFF  FEF,194
10596:  MOVFF  FEC,195
1059A:  MOVFF  FEC,196
1059E:  MOVFF  FEC,197
105A2:  MOVF   FED,F
105A4:  MOVF   FED,F
105A6:  MOVF   FED,F
....................         misf_write_size = smf_queue_ptr->misf_size;
105A8:  MOVLW  08
105AA:  ADDWF  x92,W
105AC:  MOVWF  FE9
105AE:  MOVLW  00
105B0:  ADDWFC x93,W
105B2:  MOVWF  FEA
105B4:  MOVFF  FEF,198
105B8:  MOVFF  FEC,199
105BC:  MOVFF  FEC,19A
105C0:  MOVFF  FEC,19B
105C4:  MOVF   FED,F
105C6:  MOVF   FED,F
105C8:  MOVF   FED,F
105CA:  MOVLB  0
....................     }
.................... 
....................     unsigned int32 smf_header_address_start;
....................     unsigned int32 smf_data_address_start;
....................     unsigned int32 smf_data_address_end;
....................     unsigned int32 misf_address_start = MISF_ADDRESS_TABLE[smf_queue_ptr->mission_id].start;
....................     unsigned int32 misf_address_end   = MISF_ADDRESS_TABLE[smf_queue_ptr->mission_id].end;
105CC:  MOVLB  1
105CE:  MOVF   x92,W
105D0:  MOVWF  FE9
105D2:  MOVF   x93,W
105D4:  MOVWF  FEA
105D6:  MOVF   FEF,W
105D8:  MULLW  0C
105DA:  MOVF   FF3,W
105DC:  MOVLB  2
105DE:  CLRF   x02
105E0:  MOVWF  x01
105E2:  MOVFF  202,03
105E6:  MOVF   x01,W
105E8:  MOVLB  0
105EA:  CALL   00E6
105EE:  MOVWF  00
105F0:  TBLRD*+
105F2:  MOVFF  FF5,01
105F6:  TBLRD*+
105F8:  MOVFF  FF5,02
105FC:  TBLRD*+
105FE:  MOVFF  FF5,03
10602:  MOVFF  03,1AF
10606:  MOVFF  02,1AE
1060A:  MOVFF  01,1AD
1060E:  MOVFF  00,1AC
10612:  MOVLB  1
10614:  MOVF   x92,W
10616:  MOVWF  FE9
10618:  MOVF   x93,W
1061A:  MOVWF  FEA
1061C:  MOVF   FEF,W
1061E:  MULLW  0C
10620:  MOVF   FF3,W
10622:  MOVLB  2
10624:  CLRF   x04
10626:  MOVWF  x03
10628:  MOVLW  04
1062A:  ADDWF  x03,W
1062C:  MOVWF  01
1062E:  MOVLW  00
10630:  ADDWFC x04,W
10632:  MOVWF  03
10634:  MOVF   01,W
10636:  MOVLB  0
10638:  CALL   00E6
1063C:  MOVWF  00
1063E:  TBLRD*+
10640:  MOVFF  FF5,01
10644:  TBLRD*+
10646:  MOVFF  FF5,02
1064A:  TBLRD*+
1064C:  MOVFF  FF5,03
10650:  MOVFF  03,1B3
10654:  MOVFF  02,1B2
10658:  MOVFF  01,1B1
1065C:  MOVFF  00,1B0
.................... 
....................     smf_update_flag[smf_queue_ptr->mission_id] = 1;
10660:  MOVLB  1
10662:  MOVF   x92,W
10664:  MOVWF  FE9
10666:  MOVF   x93,W
10668:  MOVWF  FEA
1066A:  MOVFF  FEA,202
1066E:  MOVFF  FE9,201
10672:  MOVFF  FEF,AF9
10676:  MOVLW  01
10678:  MOVLB  A
1067A:  MOVWF  xFA
1067C:  MOVLW  01
1067E:  MOVWF  xFC
10680:  MOVLW  6C
10682:  MOVWF  xFB
10684:  MOVLB  0
10686:  CALL   2ABA
1068A:  MOVFF  202,FEA
1068E:  MOVFF  201,FE9
....................     switch ( smf_queue_ptr->mission_id )
10692:  MOVLB  1
10694:  MOVF   x92,W
10696:  MOVWF  FE9
10698:  MOVF   x93,W
1069A:  MOVWF  FEA
1069C:  MOVF   FEF,W
1069E:  XORLW  00
106A0:  MOVLB  0
106A2:  BTFSC  FD8.2
106A4:  GOTO   106DC
106A8:  XORLW  01
106AA:  BTFSC  FD8.2
106AC:  GOTO   1071C
106B0:  XORLW  03
106B2:  BTFSC  FD8.2
106B4:  GOTO   1075E
106B8:  XORLW  01
106BA:  BTFSC  FD8.2
106BC:  GOTO   107A0
106C0:  XORLW  07
106C2:  BTFSC  FD8.2
106C4:  GOTO   107E2
106C8:  XORLW  01
106CA:  BTFSC  FD8.2
106CC:  GOTO   10824
106D0:  XORLW  03
106D2:  BTFSC  FD8.2
106D4:  GOTO   10866
106D8:  GOTO   108A8
....................     {
....................         case CIGS_DATA_TABLE:
....................             fprintf(PC, "FLASH ID: CIGS_DATA_TABLE\r\n");
106DC:  MOVLW  D4
106DE:  MOVWF  FF6
106E0:  MOVLW  08
106E2:  MOVWF  FF7
106E4:  MOVLW  00
106E6:  MOVWF  FF8
106E8:  CALL   22DC
....................             smf_header_address_start = SMF_DATA_TABLE_HEADER_START_ADDRESS;
106EC:  MOVLW  07
106EE:  MOVLB  1
106F0:  MOVWF  xA3
106F2:  MOVLW  3B
106F4:  MOVWF  xA2
106F6:  CLRF   xA1
106F8:  CLRF   xA0
....................             smf_data_address_start = SMF_DATA_TABLE_DATA_START_ADDRESS;
106FA:  MOVLW  07
106FC:  MOVWF  xA7
106FE:  MOVLW  3B
10700:  MOVWF  xA6
10702:  MOVLW  10
10704:  MOVWF  xA5
10706:  CLRF   xA4
....................             smf_data_address_end = SMF_DATA_TABLE_DATA_END_ADDRESS;
10708:  MOVLW  07
1070A:  MOVWF  xAB
1070C:  MOVLW  3B
1070E:  MOVWF  xAA
10710:  MOVLW  1F
10712:  MOVWF  xA9
10714:  SETF   xA8
....................             break;
10716:  MOVLB  0
10718:  GOTO   108FE
....................         case CIGS_PICLOG_DATA:
....................             fprintf(PC, "FLASH ID: CIGS_PICLOG_DATA\r\n");
1071C:  MOVLW  F0
1071E:  MOVWF  FF6
10720:  MOVLW  08
10722:  MOVWF  FF7
10724:  MOVLW  00
10726:  MOVWF  FF8
10728:  CALL   22DC
....................             smf_header_address_start = SMF_PICLOG_HEADER_START_ADDRESS;
1072C:  MOVLW  07
1072E:  MOVLB  1
10730:  MOVWF  xA3
10732:  MOVLW  3B
10734:  MOVWF  xA2
10736:  MOVLW  20
10738:  MOVWF  xA1
1073A:  CLRF   xA0
....................             smf_data_address_start = SMF_PICLOG_DATA_START_ADDRESS;
1073C:  MOVLW  07
1073E:  MOVWF  xA7
10740:  MOVLW  3B
10742:  MOVWF  xA6
10744:  MOVLW  30
10746:  MOVWF  xA5
10748:  CLRF   xA4
....................             smf_data_address_end = SMF_PICLOG_DATA_END_ADDRESS;
1074A:  MOVLW  07
1074C:  MOVWF  xAB
1074E:  MOVLW  3C
10750:  MOVWF  xAA
10752:  MOVLW  2F
10754:  MOVWF  xA9
10756:  SETF   xA8
....................             break;
10758:  MOVLB  0
1075A:  GOTO   108FE
....................         case CIGS_ENVIRO_DATA:
....................             fprintf(PC, "FLASH ID: CIGS_ENVIRO_DATA\r\n");
1075E:  MOVLW  0E
10760:  MOVWF  FF6
10762:  MOVLW  09
10764:  MOVWF  FF7
10766:  MOVLW  00
10768:  MOVWF  FF8
1076A:  CALL   22DC
....................             smf_header_address_start = SMF_ENVIRO_HEADER_START_ADDRESS;
1076E:  MOVLW  07
10770:  MOVLB  1
10772:  MOVWF  xA3
10774:  MOVLW  3C
10776:  MOVWF  xA2
10778:  MOVLW  30
1077A:  MOVWF  xA1
1077C:  CLRF   xA0
....................             smf_data_address_start = SMF_ENVIRO_DATA_START_ADDRESS;
1077E:  MOVLW  07
10780:  MOVWF  xA7
10782:  MOVLW  3C
10784:  MOVWF  xA6
10786:  MOVLW  40
10788:  MOVWF  xA5
1078A:  CLRF   xA4
....................             smf_data_address_end = SMF_ENVIRO_DATA_END_ADDRESS;
1078C:  MOVLW  07
1078E:  MOVWF  xAB
10790:  MOVLW  46
10792:  MOVWF  xAA
10794:  MOVLW  3F
10796:  MOVWF  xA9
10798:  SETF   xA8
....................             break;
1079A:  MOVLB  0
1079C:  GOTO   108FE
....................         case CIGS_IV1_HEADER:
....................             fprintf(PC, "FLASH ID: CIGS_IV1_HEADER\r\n");
107A0:  MOVLW  2C
107A2:  MOVWF  FF6
107A4:  MOVLW  09
107A6:  MOVWF  FF7
107A8:  MOVLW  00
107AA:  MOVWF  FF8
107AC:  CALL   22DC
....................             smf_header_address_start = SMF_IV1_HEADER_HEADER_START_ADDRESS;
107B0:  MOVLW  07
107B2:  MOVLB  1
107B4:  MOVWF  xA3
107B6:  MOVLW  46
107B8:  MOVWF  xA2
107BA:  MOVLW  40
107BC:  MOVWF  xA1
107BE:  CLRF   xA0
....................             smf_data_address_start = SMF_IV1_HEADER_DATA_START_ADDRESS;
107C0:  MOVLW  07
107C2:  MOVWF  xA7
107C4:  MOVLW  46
107C6:  MOVWF  xA6
107C8:  MOVLW  50
107CA:  MOVWF  xA5
107CC:  CLRF   xA4
....................             smf_data_address_end = SMF_IV1_HEADER_DATA_END_ADDRESS;
107CE:  MOVLW  07
107D0:  MOVWF  xAB
107D2:  MOVLW  50
107D4:  MOVWF  xAA
107D6:  MOVLW  4F
107D8:  MOVWF  xA9
107DA:  SETF   xA8
....................             break;
107DC:  MOVLB  0
107DE:  GOTO   108FE
....................         case CIGS_IV1_DATA:
....................             fprintf(PC, "FLASH ID: CIGS_IV1_DATA\r\n");
107E2:  MOVLW  48
107E4:  MOVWF  FF6
107E6:  MOVLW  09
107E8:  MOVWF  FF7
107EA:  MOVLW  00
107EC:  MOVWF  FF8
107EE:  CALL   22DC
....................             smf_header_address_start = SMF_IV1_DATA_HEADER_START_ADDRESS;
107F2:  MOVLW  07
107F4:  MOVLB  1
107F6:  MOVWF  xA3
107F8:  MOVLW  50
107FA:  MOVWF  xA2
107FC:  MOVLW  50
107FE:  MOVWF  xA1
10800:  CLRF   xA0
....................             smf_data_address_start = SMF_IV1_DATA_DATA_START_ADDRESS;
10802:  MOVLW  07
10804:  MOVWF  xA7
10806:  MOVLW  50
10808:  MOVWF  xA6
1080A:  MOVLW  60
1080C:  MOVWF  xA5
1080E:  CLRF   xA4
....................             smf_data_address_end = SMF_IV1_DATA_DATA_END_ADDRESS;
10810:  MOVLW  07
10812:  MOVWF  xAB
10814:  MOVLW  90
10816:  MOVWF  xAA
10818:  MOVLW  5F
1081A:  MOVWF  xA9
1081C:  SETF   xA8
....................             break;
1081E:  MOVLB  0
10820:  GOTO   108FE
....................         case CIGS_IV2_HEADER:
....................             fprintf(PC, "FLASH ID: CIGS_IV2_HEADER\r\n");
10824:  MOVLW  62
10826:  MOVWF  FF6
10828:  MOVLW  09
1082A:  MOVWF  FF7
1082C:  MOVLW  00
1082E:  MOVWF  FF8
10830:  CALL   22DC
....................             smf_header_address_start = SMF_IV2_HEADER_HEADER_START_ADDRESS;
10834:  MOVLW  07
10836:  MOVLB  1
10838:  MOVWF  xA3
1083A:  MOVLW  90
1083C:  MOVWF  xA2
1083E:  MOVLW  60
10840:  MOVWF  xA1
10842:  CLRF   xA0
....................             smf_data_address_start = SMF_IV2_HEADER_DATA_START_ADDRESS;
10844:  MOVLW  07
10846:  MOVWF  xA7
10848:  MOVLW  90
1084A:  MOVWF  xA6
1084C:  MOVLW  70
1084E:  MOVWF  xA5
10850:  CLRF   xA4
....................             smf_data_address_end = SMF_IV2_HEADER_DATA_END_ADDRESS;
10852:  MOVLW  07
10854:  MOVWF  xAB
10856:  MOVLW  9A
10858:  MOVWF  xAA
1085A:  MOVLW  6F
1085C:  MOVWF  xA9
1085E:  SETF   xA8
....................             break;
10860:  MOVLB  0
10862:  GOTO   108FE
....................         case CIGS_IV2_DATA:
....................             fprintf(PC, "FLASH ID: CIGS_IV2_DATA\r\n");
10866:  MOVLW  7E
10868:  MOVWF  FF6
1086A:  MOVLW  09
1086C:  MOVWF  FF7
1086E:  MOVLW  00
10870:  MOVWF  FF8
10872:  CALL   22DC
....................             smf_header_address_start = SMF_IV2_DATA_HEADER_START_ADDRESS;
10876:  MOVLW  07
10878:  MOVLB  1
1087A:  MOVWF  xA3
1087C:  MOVLW  9A
1087E:  MOVWF  xA2
10880:  MOVLW  70
10882:  MOVWF  xA1
10884:  CLRF   xA0
....................             smf_data_address_start = SMF_IV2_DATA_DATA_START_ADDRESS;
10886:  MOVLW  07
10888:  MOVWF  xA7
1088A:  MOVLW  9A
1088C:  MOVWF  xA6
1088E:  MOVLW  80
10890:  MOVWF  xA5
10892:  CLRF   xA4
....................             smf_data_address_end = SMF_IV2_DATA_DATA_END_ADDRESS;
10894:  MOVLW  07
10896:  MOVWF  xAB
10898:  MOVLW  DA
1089A:  MOVWF  xAA
1089C:  MOVLW  7F
1089E:  MOVWF  xA9
108A0:  SETF   xA8
....................             break;
108A2:  MOVLB  0
108A4:  GOTO   108FE
....................         default:
....................             fprintf(PC, "Error: Invalid mission ID %d\r\n", smf_queue_ptr->mission_id);
108A8:  MOVLB  1
108AA:  MOVF   x92,W
108AC:  MOVWF  FE9
108AE:  MOVF   x93,W
108B0:  MOVWF  FEA
108B2:  MOVFF  FEF,201
108B6:  MOVLW  98
108B8:  MOVWF  FF6
108BA:  MOVLW  09
108BC:  MOVWF  FF7
108BE:  MOVLW  00
108C0:  MOVWF  FF8
108C2:  MOVLW  1A
108C4:  MOVLB  9
108C6:  MOVWF  xB3
108C8:  MOVLB  0
108CA:  CALL   2312
108CE:  MOVFF  201,202
108D2:  MOVLW  18
108D4:  MOVLB  2
108D6:  MOVWF  x03
108D8:  MOVLB  0
108DA:  GOTO   FDFE
108DE:  MOVLW  0D
108E0:  BTFSS  FA6.6
108E2:  GOTO   108E0
108E6:  MOVLB  E
108E8:  MOVWF  xF9
108EA:  MOVLW  0A
108EC:  MOVLB  0
108EE:  BTFSS  FA6.6
108F0:  GOTO   108EE
108F4:  MOVLB  E
108F6:  MOVWF  xF9
....................             return;
108F8:  MOVLB  0
108FA:  GOTO   11268
....................     }
.................... 
....................     // Print MISF ADDRESS
....................     fprintf(PC,"[MISF ADDRESS]\r\n");
108FE:  MOVLW  B8
10900:  MOVWF  FF6
10902:  MOVLW  09
10904:  MOVWF  FF7
10906:  MOVLW  00
10908:  MOVWF  FF8
1090A:  CALL   22DC
....................     fprintf(PC, "\tParam\tData\r\n");
1090E:  MOVLW  CA
10910:  MOVWF  FF6
10912:  MOVLW  09
10914:  MOVWF  FF7
10916:  MOVLW  00
10918:  MOVWF  FF8
1091A:  CALL   22DC
....................     fprintf(PC, "\t-----\t----------\r\n");
1091E:  MOVLW  D8
10920:  MOVWF  FF6
10922:  MOVLW  09
10924:  MOVWF  FF7
10926:  MOVLW  00
10928:  MOVWF  FF8
1092A:  CALL   22DC
....................     fprintf(PC, "\tSTART\t0x%08LX\r\n", misf_address_start);
1092E:  MOVLW  EC
10930:  MOVWF  FF6
10932:  MOVLW  09
10934:  MOVWF  FF7
10936:  MOVLW  00
10938:  MOVWF  FF8
1093A:  MOVLW  09
1093C:  MOVLB  9
1093E:  MOVWF  xB3
10940:  MOVLB  0
10942:  CALL   2312
10946:  MOVFF  1AF,9D9
1094A:  MOVLW  37
1094C:  MOVLB  9
1094E:  MOVWF  xDA
10950:  MOVLB  0
10952:  CALL   2542
10956:  MOVFF  1AE,9D9
1095A:  MOVLW  37
1095C:  MOVLB  9
1095E:  MOVWF  xDA
10960:  MOVLB  0
10962:  CALL   2542
10966:  MOVFF  1AD,9D9
1096A:  MOVLW  37
1096C:  MOVLB  9
1096E:  MOVWF  xDA
10970:  MOVLB  0
10972:  CALL   2542
10976:  MOVFF  1AC,9D9
1097A:  MOVLW  37
1097C:  MOVLB  9
1097E:  MOVWF  xDA
10980:  MOVLB  0
10982:  CALL   2542
10986:  MOVLW  0D
10988:  BTFSS  FA6.6
1098A:  GOTO   10988
1098E:  MOVLB  E
10990:  MOVWF  xF9
10992:  MOVLW  0A
10994:  MOVLB  0
10996:  BTFSS  FA6.6
10998:  GOTO   10996
1099C:  MOVLB  E
1099E:  MOVWF  xF9
....................     fprintf(PC, "\tEND\t0x%08LX\r\n", misf_address_end);
109A0:  MOVLW  FE
109A2:  MOVWF  FF6
109A4:  MOVLW  09
109A6:  MOVWF  FF7
109A8:  MOVLW  00
109AA:  MOVWF  FF8
109AC:  MOVLW  07
109AE:  MOVLB  9
109B0:  MOVWF  xB3
109B2:  MOVLB  0
109B4:  CALL   2312
109B8:  MOVFF  1B3,9D9
109BC:  MOVLW  37
109BE:  MOVLB  9
109C0:  MOVWF  xDA
109C2:  MOVLB  0
109C4:  CALL   2542
109C8:  MOVFF  1B2,9D9
109CC:  MOVLW  37
109CE:  MOVLB  9
109D0:  MOVWF  xDA
109D2:  MOVLB  0
109D4:  CALL   2542
109D8:  MOVFF  1B1,9D9
109DC:  MOVLW  37
109DE:  MOVLB  9
109E0:  MOVWF  xDA
109E2:  MOVLB  0
109E4:  CALL   2542
109E8:  MOVFF  1B0,9D9
109EC:  MOVLW  37
109EE:  MOVLB  9
109F0:  MOVWF  xDA
109F2:  MOVLB  0
109F4:  CALL   2542
109F8:  MOVLW  0D
109FA:  BTFSS  FA6.6
109FC:  GOTO   109FA
10A00:  MOVLB  E
10A02:  MOVWF  xF9
10A04:  MOVLW  0A
10A06:  MOVLB  0
10A08:  BTFSS  FA6.6
10A0A:  GOTO   10A08
10A0E:  MOVLB  E
10A10:  MOVWF  xF9
....................     fprintf(PC, "\tSRC\t0x%08LX\r\n", misf_write_src);
10A12:  MOVLW  0E
10A14:  MOVWF  FF6
10A16:  MOVLW  0A
10A18:  MOVWF  FF7
10A1A:  MOVLW  00
10A1C:  MOVWF  FF8
10A1E:  MOVLW  07
10A20:  MOVLB  9
10A22:  MOVWF  xB3
10A24:  MOVLB  0
10A26:  CALL   2312
10A2A:  MOVFF  197,9D9
10A2E:  MOVLW  37
10A30:  MOVLB  9
10A32:  MOVWF  xDA
10A34:  MOVLB  0
10A36:  CALL   2542
10A3A:  MOVFF  196,9D9
10A3E:  MOVLW  37
10A40:  MOVLB  9
10A42:  MOVWF  xDA
10A44:  MOVLB  0
10A46:  CALL   2542
10A4A:  MOVFF  195,9D9
10A4E:  MOVLW  37
10A50:  MOVLB  9
10A52:  MOVWF  xDA
10A54:  MOVLB  0
10A56:  CALL   2542
10A5A:  MOVFF  194,9D9
10A5E:  MOVLW  37
10A60:  MOVLB  9
10A62:  MOVWF  xDA
10A64:  MOVLB  0
10A66:  CALL   2542
10A6A:  MOVLW  0D
10A6C:  BTFSS  FA6.6
10A6E:  GOTO   10A6C
10A72:  MOVLB  E
10A74:  MOVWF  xF9
10A76:  MOVLW  0A
10A78:  MOVLB  0
10A7A:  BTFSS  FA6.6
10A7C:  GOTO   10A7A
10A80:  MOVLB  E
10A82:  MOVWF  xF9
....................     fprintf(PC, "\tSIZE\t0x%08LX\r\n", misf_write_size);
10A84:  MOVLW  1E
10A86:  MOVWF  FF6
10A88:  MOVLW  0A
10A8A:  MOVWF  FF7
10A8C:  MOVLW  00
10A8E:  MOVWF  FF8
10A90:  MOVLW  08
10A92:  MOVLB  9
10A94:  MOVWF  xB3
10A96:  MOVLB  0
10A98:  CALL   2312
10A9C:  MOVFF  19B,9D9
10AA0:  MOVLW  37
10AA2:  MOVLB  9
10AA4:  MOVWF  xDA
10AA6:  MOVLB  0
10AA8:  CALL   2542
10AAC:  MOVFF  19A,9D9
10AB0:  MOVLW  37
10AB2:  MOVLB  9
10AB4:  MOVWF  xDA
10AB6:  MOVLB  0
10AB8:  CALL   2542
10ABC:  MOVFF  199,9D9
10AC0:  MOVLW  37
10AC2:  MOVLB  9
10AC4:  MOVWF  xDA
10AC6:  MOVLB  0
10AC8:  CALL   2542
10ACC:  MOVFF  198,9D9
10AD0:  MOVLW  37
10AD2:  MOVLB  9
10AD4:  MOVWF  xDA
10AD6:  MOVLB  0
10AD8:  CALL   2542
10ADC:  MOVLW  0D
10ADE:  BTFSS  FA6.6
10AE0:  GOTO   10ADE
10AE4:  MOVLB  E
10AE6:  MOVWF  xF9
10AE8:  MOVLW  0A
10AEA:  MOVLB  0
10AEC:  BTFSS  FA6.6
10AEE:  GOTO   10AEC
10AF2:  MOVLB  E
10AF4:  MOVWF  xF9
....................     fprintf(PC, "\t-----\t----------\r\n");
10AF6:  MOVLW  2E
10AF8:  MOVWF  FF6
10AFA:  MOVLW  0A
10AFC:  MOVWF  FF7
10AFE:  MOVLW  00
10B00:  MOVWF  FF8
10B02:  MOVLB  0
10B04:  CALL   22DC
.................... 
....................     // Print SMF ADDRESS
....................     fprintf(PC,"[SMF ADDRESS]\r\n");
10B08:  MOVLW  42
10B0A:  MOVWF  FF6
10B0C:  MOVLW  0A
10B0E:  MOVWF  FF7
10B10:  MOVLW  00
10B12:  MOVWF  FF8
10B14:  CALL   22DC
....................     fprintf(PC, "\tParam\tData\r\n");
10B18:  MOVLW  52
10B1A:  MOVWF  FF6
10B1C:  MOVLW  0A
10B1E:  MOVWF  FF7
10B20:  MOVLW  00
10B22:  MOVWF  FF8
10B24:  CALL   22DC
....................     fprintf(PC, "\t-----\t----------\r\n");
10B28:  MOVLW  60
10B2A:  MOVWF  FF6
10B2C:  MOVLW  0A
10B2E:  MOVWF  FF7
10B30:  MOVLW  00
10B32:  MOVWF  FF8
10B34:  CALL   22DC
....................     fprintf(PC, "\tSTART\t0x%08LX\r\n", smf_data_address_start);
10B38:  MOVLW  74
10B3A:  MOVWF  FF6
10B3C:  MOVLW  0A
10B3E:  MOVWF  FF7
10B40:  MOVLW  00
10B42:  MOVWF  FF8
10B44:  MOVLW  09
10B46:  MOVLB  9
10B48:  MOVWF  xB3
10B4A:  MOVLB  0
10B4C:  CALL   2312
10B50:  MOVFF  1A7,9D9
10B54:  MOVLW  37
10B56:  MOVLB  9
10B58:  MOVWF  xDA
10B5A:  MOVLB  0
10B5C:  CALL   2542
10B60:  MOVFF  1A6,9D9
10B64:  MOVLW  37
10B66:  MOVLB  9
10B68:  MOVWF  xDA
10B6A:  MOVLB  0
10B6C:  CALL   2542
10B70:  MOVFF  1A5,9D9
10B74:  MOVLW  37
10B76:  MOVLB  9
10B78:  MOVWF  xDA
10B7A:  MOVLB  0
10B7C:  CALL   2542
10B80:  MOVFF  1A4,9D9
10B84:  MOVLW  37
10B86:  MOVLB  9
10B88:  MOVWF  xDA
10B8A:  MOVLB  0
10B8C:  CALL   2542
10B90:  MOVLW  0D
10B92:  BTFSS  FA6.6
10B94:  GOTO   10B92
10B98:  MOVLB  E
10B9A:  MOVWF  xF9
10B9C:  MOVLW  0A
10B9E:  MOVLB  0
10BA0:  BTFSS  FA6.6
10BA2:  GOTO   10BA0
10BA6:  MOVLB  E
10BA8:  MOVWF  xF9
....................     fprintf(PC, "\tEND\t0x%08LX\r\n", smf_data_address_end);
10BAA:  MOVLW  86
10BAC:  MOVWF  FF6
10BAE:  MOVLW  0A
10BB0:  MOVWF  FF7
10BB2:  MOVLW  00
10BB4:  MOVWF  FF8
10BB6:  MOVLW  07
10BB8:  MOVLB  9
10BBA:  MOVWF  xB3
10BBC:  MOVLB  0
10BBE:  CALL   2312
10BC2:  MOVFF  1AB,9D9
10BC6:  MOVLW  37
10BC8:  MOVLB  9
10BCA:  MOVWF  xDA
10BCC:  MOVLB  0
10BCE:  CALL   2542
10BD2:  MOVFF  1AA,9D9
10BD6:  MOVLW  37
10BD8:  MOVLB  9
10BDA:  MOVWF  xDA
10BDC:  MOVLB  0
10BDE:  CALL   2542
10BE2:  MOVFF  1A9,9D9
10BE6:  MOVLW  37
10BE8:  MOVLB  9
10BEA:  MOVWF  xDA
10BEC:  MOVLB  0
10BEE:  CALL   2542
10BF2:  MOVFF  1A8,9D9
10BF6:  MOVLW  37
10BF8:  MOVLB  9
10BFA:  MOVWF  xDA
10BFC:  MOVLB  0
10BFE:  CALL   2542
10C02:  MOVLW  0D
10C04:  BTFSS  FA6.6
10C06:  GOTO   10C04
10C0A:  MOVLB  E
10C0C:  MOVWF  xF9
10C0E:  MOVLW  0A
10C10:  MOVLB  0
10C12:  BTFSS  FA6.6
10C14:  GOTO   10C12
10C18:  MOVLB  E
10C1A:  MOVWF  xF9
....................     fprintf(PC, "\t-----\t----------\r\n");
10C1C:  MOVLW  96
10C1E:  MOVWF  FF6
10C20:  MOVLW  0A
10C22:  MOVWF  FF7
10C24:  MOVLW  00
10C26:  MOVWF  FF8
10C28:  MOVLB  0
10C2A:  CALL   22DC
.................... 
.................... 
....................     // Erase Area
....................     fprintf(PC, "ERASE SMF AREA\r\n");
10C2E:  MOVLW  AA
10C30:  MOVWF  FF6
10C32:  MOVLW  0A
10C34:  MOVWF  FF7
10C36:  MOVLW  00
10C38:  MOVWF  FF8
10C3A:  CALL   22DC
....................     for ( unsigned int32 address = smf_data_address_start; address < smf_data_address_end; address += SUBSECTOR_SIZE )
10C3E:  MOVFF  1A7,1B7
10C42:  MOVFF  1A6,1B6
10C46:  MOVFF  1A5,1B5
10C4A:  MOVFF  1A4,1B4
10C4E:  MOVLB  1
10C50:  MOVF   xB7,W
10C52:  SUBWF  xAB,W
10C54:  BTFSC  FD8.0
10C56:  BRA    10C5E
10C58:  MOVLB  0
10C5A:  GOTO   10CE0
10C5E:  MOVLB  0
10C60:  BTFSS  FD8.2
10C62:  GOTO   10CA8
10C66:  MOVLB  1
10C68:  MOVF   xB6,W
10C6A:  SUBWF  xAA,W
10C6C:  BTFSC  FD8.0
10C6E:  BRA    10C76
10C70:  MOVLB  0
10C72:  GOTO   10CE0
10C76:  MOVLB  0
10C78:  BTFSS  FD8.2
10C7A:  GOTO   10CA8
10C7E:  MOVLB  1
10C80:  MOVF   xB5,W
10C82:  SUBWF  xA9,W
10C84:  BTFSC  FD8.0
10C86:  BRA    10C8E
10C88:  MOVLB  0
10C8A:  GOTO   10CE0
10C8E:  MOVLB  0
10C90:  BTFSS  FD8.2
10C92:  GOTO   10CA8
10C96:  MOVLB  1
10C98:  MOVF   xA8,W
10C9A:  SUBWF  xB4,W
10C9C:  BTFSS  FD8.0
10C9E:  BRA    10CA6
10CA0:  MOVLB  0
10CA2:  GOTO   10CE0
10CA6:  MOVLB  0
....................     {
....................         subsector_4kByte_erase(smf, address);
10CA8:  MOVFF  10B,9F8
10CAC:  MOVFF  10A,9F7
10CB0:  MOVFF  109,9F6
10CB4:  MOVFF  108,9F5
10CB8:  MOVFF  1B7,9FC
10CBC:  MOVFF  1B6,9FB
10CC0:  MOVFF  1B5,9FA
10CC4:  MOVFF  1B4,9F9
10CC8:  CALL   4D66
10CCC:  MOVLW  10
10CCE:  MOVLB  1
10CD0:  ADDWF  xB5,F
10CD2:  MOVLW  00
10CD4:  ADDWFC xB6,F
10CD6:  MOVLW  00
10CD8:  ADDWFC xB7,F
10CDA:  MOVLB  0
10CDC:  GOTO   10C4E
....................     }
....................     fprintf(PC, "\tERASE SMF AREA DONE\r\n");
10CE0:  MOVLW  BC
10CE2:  MOVWF  FF6
10CE4:  MOVLW  0A
10CE6:  MOVWF  FF7
10CE8:  MOVLW  00
10CEA:  MOVWF  FF8
10CEC:  CALL   22DC
.................... 
....................     // Write Data
....................     unsigned int8 buffer[PACKET_SIZE];
....................     unsigned int32 smf_write_address = smf_data_address_start;
....................     unsigned int32 misf_read_address = misf_write_src;
10CF0:  MOVFF  1A7,1FB
10CF4:  MOVFF  1A6,1FA
10CF8:  MOVFF  1A5,1F9
10CFC:  MOVFF  1A4,1F8
10D00:  MOVFF  197,1FF
10D04:  MOVFF  196,1FE
10D08:  MOVFF  195,1FD
10D0C:  MOVFF  194,1FC
....................     fprintf(PC, "WRITE DATA TO SMF\r\n");
10D10:  MOVLW  D4
10D12:  MOVWF  FF6
10D14:  MOVLW  0A
10D16:  MOVWF  FF7
10D18:  MOVLW  00
10D1A:  MOVWF  FF8
10D1C:  CALL   22DC
....................     while (misf_write_size > 0)
10D20:  MOVLB  1
10D22:  MOVF   x98,F
10D24:  BTFSC  FD8.2
10D26:  BRA    10D2E
10D28:  MOVLB  0
10D2A:  GOTO   10D60
10D2E:  MOVLB  0
10D30:  MOVLB  1
10D32:  MOVF   x99,F
10D34:  BTFSC  FD8.2
10D36:  BRA    10D3E
10D38:  MOVLB  0
10D3A:  GOTO   10D60
10D3E:  MOVLB  0
10D40:  MOVLB  1
10D42:  MOVF   x9A,F
10D44:  BTFSC  FD8.2
10D46:  BRA    10D4E
10D48:  MOVLB  0
10D4A:  GOTO   10D60
10D4E:  MOVLB  0
10D50:  MOVLB  1
10D52:  MOVF   x9B,F
10D54:  BTFSS  FD8.2
10D56:  BRA    10D5E
10D58:  MOVLB  0
10D5A:  GOTO   11086
10D5E:  MOVLB  0
....................     {
....................         memset(buffer, 0x11, PACKET_SIZE);
10D60:  MOVLW  01
10D62:  MOVWF  FEA
10D64:  MOVLW  B8
10D66:  MOVWF  FE9
10D68:  MOVLW  11
10D6A:  MOVWF  00
10D6C:  CLRF   02
10D6E:  MOVLW  40
10D70:  MOVWF  01
10D72:  CALL   234C
....................         read_data_bytes(mis_fm, misf_read_address, buffer, PACKET_SIZE);
10D76:  MOVFF  107,ADE
10D7A:  MOVFF  106,ADD
10D7E:  MOVFF  105,ADC
10D82:  MOVFF  104,ADB
10D86:  MOVFF  1FF,AE2
10D8A:  MOVFF  1FE,AE1
10D8E:  MOVFF  1FD,AE0
10D92:  MOVFF  1FC,ADF
10D96:  MOVLW  01
10D98:  MOVLB  A
10D9A:  MOVWF  xE4
10D9C:  MOVLW  B8
10D9E:  MOVWF  xE3
10DA0:  CLRF   xE8
10DA2:  CLRF   xE7
10DA4:  CLRF   xE6
10DA6:  MOVLW  40
10DA8:  MOVWF  xE5
10DAA:  MOVLB  0
10DAC:  CALL   2EE0
....................         fprintf(PC," ");
10DB0:  MOVLW  20
10DB2:  BTFSS  FA6.6
10DB4:  GOTO   10DB2
10DB8:  MOVLB  E
10DBA:  MOVWF  xF9
....................         write_data_bytes(smf, smf_write_address, buffer, PACKET_SIZE);
10DBC:  MOVFF  10B,ADE
10DC0:  MOVFF  10A,ADD
10DC4:  MOVFF  109,ADC
10DC8:  MOVFF  108,ADB
10DCC:  MOVFF  1FB,AE2
10DD0:  MOVFF  1FA,AE1
10DD4:  MOVFF  1F9,AE0
10DD8:  MOVFF  1F8,ADF
10DDC:  MOVLW  01
10DDE:  MOVLB  A
10DE0:  MOVWF  xE4
10DE2:  MOVLW  B8
10DE4:  MOVWF  xE3
10DE6:  CLRF   xE6
10DE8:  MOVLW  40
10DEA:  MOVWF  xE5
10DEC:  MOVLB  0
10DEE:  CALL   3F6E
....................         fprintf(PC,".");
10DF2:  MOVLW  2E
10DF4:  BTFSS  FA6.6
10DF6:  GOTO   10DF4
10DFA:  MOVLB  E
10DFC:  MOVWF  xF9
....................         // counter update
....................         if (misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter >= PACKET_SIZE){
10DFE:  MOVLB  1
10E00:  MOVF   x92,W
10E02:  MOVWF  FE9
10E04:  MOVF   x93,W
10E06:  MOVWF  FEA
10E08:  MOVF   FEF,W
10E0A:  MULLW  0A
10E0C:  MOVF   FF3,W
10E0E:  MOVLB  2
10E10:  CLRF   x02
10E12:  MOVWF  x01
10E14:  MOVLW  04
10E16:  ADDWF  x01,W
10E18:  MOVWF  01
10E1A:  MOVLW  00
10E1C:  ADDWFC x02,W
10E1E:  MOVWF  03
10E20:  MOVF   01,W
10E22:  ADDLW  14
10E24:  MOVWF  FE9
10E26:  MOVLW  01
10E28:  ADDWFC 03,W
10E2A:  MOVWF  FEA
10E2C:  MOVFF  FEF,201
10E30:  MOVFF  FEC,202
10E34:  MOVFF  FEC,203
10E38:  MOVFF  FEC,204
10E3C:  MOVF   FED,F
10E3E:  MOVF   FED,F
10E40:  MOVF   FED,F
10E42:  MOVF   x04,F
10E44:  BTFSC  FD8.2
10E46:  BRA    10E4E
10E48:  MOVLB  0
10E4A:  GOTO   10E82
10E4E:  MOVLB  0
10E50:  MOVLB  2
10E52:  MOVF   x03,F
10E54:  BTFSC  FD8.2
10E56:  BRA    10E5E
10E58:  MOVLB  0
10E5A:  GOTO   10E82
10E5E:  MOVLB  0
10E60:  MOVLB  2
10E62:  MOVF   x02,F
10E64:  BTFSC  FD8.2
10E66:  BRA    10E6E
10E68:  MOVLB  0
10E6A:  GOTO   10E82
10E6E:  MOVLB  0
10E70:  MOVLB  2
10E72:  MOVF   x01,W
10E74:  SUBLW  3F
10E76:  BTFSS  FD8.0
10E78:  BRA    10E80
10E7A:  MOVLB  0
10E7C:  GOTO   10EEA
10E80:  MOVLB  0
....................             misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter -= PACKET_SIZE;
10E82:  MOVLB  1
10E84:  MOVF   x92,W
10E86:  MOVWF  FE9
10E88:  MOVF   x93,W
10E8A:  MOVWF  FEA
10E8C:  MOVF   FEF,W
10E8E:  MULLW  0A
10E90:  MOVF   FF3,W
10E92:  MOVLB  2
10E94:  CLRF   x02
10E96:  MOVWF  x01
10E98:  MOVLW  04
10E9A:  ADDWF  x01,W
10E9C:  MOVWF  01
10E9E:  MOVLW  00
10EA0:  ADDWFC x02,W
10EA2:  MOVWF  03
10EA4:  MOVF   01,W
10EA6:  ADDLW  14
10EA8:  MOVWF  FE9
10EAA:  MOVLW  01
10EAC:  ADDWFC 03,W
10EAE:  MOVWF  FEA
10EB0:  MOVLW  40
10EB2:  SUBWF  FEF,W
10EB4:  MOVWF  00
10EB6:  MOVLW  00
10EB8:  SUBWFB FEC,W
10EBA:  MOVWF  01
10EBC:  MOVLW  00
10EBE:  SUBWFB FEC,W
10EC0:  MOVWF  02
10EC2:  MOVLW  00
10EC4:  SUBWFB FEC,W
10EC6:  MOVWF  03
10EC8:  MOVF   FED,F
10ECA:  MOVF   FED,F
10ECC:  MOVF   FED,F
10ECE:  MOVFF  00,FEF
10ED2:  MOVFF  01,FEC
10ED6:  MOVFF  02,FEC
10EDA:  MOVFF  03,FEC
10EDE:  MOVF   FED,F
10EE0:  MOVF   FED,F
10EE2:  MOVF   FED,F
10EE4:  MOVLB  0
....................         }else{
10EE6:  GOTO   10FFC
....................             unsigned int8 add = PACKET_SIZE - misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter;
10EEA:  MOVLB  1
10EEC:  MOVF   x92,W
10EEE:  MOVWF  FE9
10EF0:  MOVF   x93,W
10EF2:  MOVWF  FEA
10EF4:  MOVF   FEF,W
10EF6:  MULLW  0A
10EF8:  MOVF   FF3,W
10EFA:  MOVLB  2
10EFC:  CLRF   x02
10EFE:  MOVWF  x01
10F00:  MOVLW  04
10F02:  ADDWF  x01,W
10F04:  MOVWF  01
10F06:  MOVLW  00
10F08:  ADDWFC x02,W
10F0A:  MOVWF  03
10F0C:  MOVF   01,W
10F0E:  ADDLW  14
10F10:  MOVWF  FE9
10F12:  MOVLW  01
10F14:  ADDWFC 03,W
10F16:  MOVWF  FEA
10F18:  MOVFF  FEF,00
10F1C:  MOVFF  FEC,01
10F20:  MOVFF  FEC,02
10F24:  MOVFF  FEC,03
10F28:  MOVF   FED,F
10F2A:  MOVF   FED,F
10F2C:  MOVF   FED,F
10F2E:  MOVLW  40
10F30:  BSF    FD8.0
10F32:  SUBFWB 00,W
10F34:  MOVWF  x00
10F36:  MOVLB  0
....................             misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter = 0;
10F38:  MOVLB  1
10F3A:  MOVF   x92,W
10F3C:  MOVWF  FE9
10F3E:  MOVF   x93,W
10F40:  MOVWF  FEA
10F42:  MOVF   FEF,W
10F44:  MULLW  0A
10F46:  MOVF   FF3,W
10F48:  MOVLB  2
10F4A:  CLRF   x02
10F4C:  MOVWF  x01
10F4E:  MOVLW  04
10F50:  ADDWF  x01,W
10F52:  MOVWF  01
10F54:  MOVLW  00
10F56:  ADDWFC x02,W
10F58:  MOVWF  03
10F5A:  MOVF   01,W
10F5C:  ADDLW  14
10F5E:  MOVWF  FE9
10F60:  MOVLW  01
10F62:  ADDWFC 03,W
10F64:  MOVWF  FEA
10F66:  CLRF   FEF
10F68:  CLRF   FEC
10F6A:  CLRF   FEC
10F6C:  CLRF   FEC
10F6E:  MOVF   FED,F
10F70:  MOVF   FED,F
10F72:  MOVF   FED,F
....................             misf_counter_table[smf_queue_ptr->mission_id].used_counter += add;
10F74:  MOVLB  1
10F76:  MOVF   x92,W
10F78:  MOVWF  FE9
10F7A:  MOVF   x93,W
10F7C:  MOVWF  FEA
10F7E:  MOVF   FEF,W
10F80:  MULLW  0A
10F82:  MOVF   FF3,W
10F84:  MOVLB  2
10F86:  CLRF   x02
10F88:  MOVWF  x01
10F8A:  MOVLW  14
10F8C:  ADDWF  x01,W
10F8E:  MOVWF  FE9
10F90:  MOVLW  01
10F92:  ADDWFC x02,W
10F94:  MOVWF  FEA
10F96:  MOVF   x00,W
10F98:  ADDWF  FEF,W
10F9A:  MOVWF  00
10F9C:  MOVLW  00
10F9E:  ADDWFC FEC,W
10FA0:  MOVWF  01
10FA2:  MOVLW  00
10FA4:  ADDWFC FEC,W
10FA6:  MOVWF  02
10FA8:  MOVLW  00
10FAA:  ADDWFC FEC,W
10FAC:  MOVWF  03
10FAE:  MOVF   FED,F
10FB0:  MOVF   FED,F
10FB2:  MOVF   FED,F
10FB4:  MOVFF  00,FEF
10FB8:  MOVFF  01,FEC
10FBC:  MOVFF  02,FEC
10FC0:  MOVFF  03,FEC
10FC4:  MOVF   FED,F
10FC6:  MOVF   FED,F
10FC8:  MOVF   FED,F
....................             misf_counter_table[smf_queue_ptr->mission_id].reserve_counter1 = 0;
10FCA:  MOVLB  1
10FCC:  MOVF   x92,W
10FCE:  MOVWF  FE9
10FD0:  MOVF   x93,W
10FD2:  MOVWF  FEA
10FD4:  MOVF   FEF,W
10FD6:  MULLW  0A
10FD8:  MOVF   FF3,W
10FDA:  MOVLB  2
10FDC:  CLRF   x02
10FDE:  MOVWF  x01
10FE0:  MOVLW  08
10FE2:  ADDWF  x01,W
10FE4:  MOVWF  01
10FE6:  MOVLW  00
10FE8:  ADDWFC x02,W
10FEA:  MOVWF  03
10FEC:  MOVF   01,W
10FEE:  ADDLW  14
10FF0:  MOVWF  FE9
10FF2:  MOVLW  01
10FF4:  ADDWFC 03,W
10FF6:  MOVWF  FEA
10FF8:  CLRF   FEF
10FFA:  MOVLB  0
....................         }
....................         misf_read_address += PACKET_SIZE;
10FFC:  MOVLW  40
10FFE:  MOVLB  1
11000:  ADDWF  xFC,F
11002:  MOVLW  00
11004:  ADDWFC xFD,F
11006:  MOVLW  00
11008:  ADDWFC xFE,F
1100A:  MOVLW  00
1100C:  ADDWFC xFF,F
....................         smf_write_address += PACKET_SIZE;
1100E:  MOVLW  40
11010:  ADDWF  xF8,F
11012:  MOVLW  00
11014:  ADDWFC xF9,F
11016:  MOVLW  00
11018:  ADDWFC xFA,F
1101A:  MOVLW  00
1101C:  ADDWFC xFB,F
....................         if (misf_write_size > PACKET_SIZE){
1101E:  MOVF   x9B,F
11020:  BTFSC  FD8.2
11022:  BRA    1102A
11024:  MOVLB  0
11026:  GOTO   1105E
1102A:  MOVLB  0
1102C:  MOVLB  1
1102E:  MOVF   x9A,F
11030:  BTFSC  FD8.2
11032:  BRA    1103A
11034:  MOVLB  0
11036:  GOTO   1105E
1103A:  MOVLB  0
1103C:  MOVLB  1
1103E:  MOVF   x99,F
11040:  BTFSC  FD8.2
11042:  BRA    1104A
11044:  MOVLB  0
11046:  GOTO   1105E
1104A:  MOVLB  0
1104C:  MOVLB  1
1104E:  MOVF   x98,W
11050:  SUBLW  40
11052:  BTFSS  FD8.0
11054:  BRA    1105C
11056:  MOVLB  0
11058:  GOTO   11076
1105C:  MOVLB  0
....................             misf_write_size -= PACKET_SIZE;
1105E:  MOVLW  40
11060:  MOVLB  1
11062:  SUBWF  x98,F
11064:  MOVLW  00
11066:  SUBWFB x99,F
11068:  MOVLW  00
1106A:  SUBWFB x9A,F
1106C:  MOVLW  00
1106E:  SUBWFB x9B,F
11070:  MOVLB  0
....................         }else{
11072:  GOTO   11082
....................             misf_write_size = 0;
11076:  MOVLB  1
11078:  CLRF   x9B
1107A:  CLRF   x9A
1107C:  CLRF   x99
1107E:  CLRF   x98
11080:  MOVLB  0
....................         }
11082:  GOTO   10D20
....................         
....................     }
....................     fprintf(PC, "\r\n");
11086:  MOVLW  0D
11088:  BTFSS  FA6.6
1108A:  GOTO   11088
1108E:  MOVLB  E
11090:  MOVWF  xF9
11092:  MOVLW  0A
11094:  MOVLB  0
11096:  BTFSS  FA6.6
11098:  GOTO   11096
1109C:  MOVLB  E
1109E:  MOVWF  xF9
.................... 
....................     // Update SMF Counter Status
....................     fprintf(PC, "UPDATE SMF COUNTER STATUS\r\n");
110A0:  MOVLW  E8
110A2:  MOVWF  FF6
110A4:  MOVLW  0A
110A6:  MOVWF  FF7
110A8:  MOVLW  00
110AA:  MOVWF  FF8
110AC:  MOVLB  0
110AE:  CALL   22DC
....................     subsector_4kByte_erase(SMF, smf_header_address_start);
110B2:  MOVFF  10B,9F8
110B6:  MOVFF  10A,9F7
110BA:  MOVFF  109,9F6
110BE:  MOVFF  108,9F5
110C2:  MOVFF  1A3,9FC
110C6:  MOVFF  1A2,9FB
110CA:  MOVFF  1A1,9FA
110CE:  MOVFF  1A0,9F9
110D2:  CALL   4D66
....................     write_data_byte(SMF, smf_header_address_start + 0, (used_size >> 24)  & 0xFF);
110D6:  MOVFF  19F,202
110DA:  MOVLB  2
110DC:  CLRF   x03
110DE:  CLRF   x04
110E0:  CLRF   x05
110E2:  CLRF   x03
110E4:  CLRF   x04
110E6:  CLRF   x05
110E8:  MOVFF  10B,20D
110EC:  MOVFF  10A,20C
110F0:  MOVFF  109,20B
110F4:  MOVFF  108,20A
110F8:  MOVFF  1A3,211
110FC:  MOVFF  1A2,210
11100:  MOVFF  1A1,20F
11104:  MOVFF  1A0,20E
11108:  MOVFF  202,212
1110C:  MOVLB  0
1110E:  CALL   10000
....................     write_data_byte(SMF, smf_header_address_start + 1, (used_size >> 16)  & 0xFF);
11112:  MOVLW  01
11114:  MOVLB  1
11116:  ADDWF  xA0,W
11118:  MOVLB  2
1111A:  MOVWF  x01
1111C:  MOVLW  00
1111E:  MOVLB  1
11120:  ADDWFC xA1,W
11122:  MOVLB  2
11124:  MOVWF  x02
11126:  MOVLW  00
11128:  MOVLB  1
1112A:  ADDWFC xA2,W
1112C:  MOVLB  2
1112E:  MOVWF  x03
11130:  MOVLW  00
11132:  MOVLB  1
11134:  ADDWFC xA3,W
11136:  MOVLB  2
11138:  MOVWF  x04
1113A:  MOVFF  19E,206
1113E:  MOVFF  19F,207
11142:  CLRF   x08
11144:  CLRF   x09
11146:  CLRF   x07
11148:  CLRF   x08
1114A:  CLRF   x09
1114C:  MOVFF  10B,20D
11150:  MOVFF  10A,20C
11154:  MOVFF  109,20B
11158:  MOVFF  108,20A
1115C:  MOVFF  204,211
11160:  MOVFF  203,210
11164:  MOVFF  202,20F
11168:  MOVFF  201,20E
1116C:  MOVFF  206,212
11170:  MOVLB  0
11172:  CALL   10000
....................     write_data_byte(SMF, smf_header_address_start + 2, (used_size >> 8) & 0xFF);
11176:  MOVLW  02
11178:  MOVLB  1
1117A:  ADDWF  xA0,W
1117C:  MOVLB  2
1117E:  MOVWF  x01
11180:  MOVLW  00
11182:  MOVLB  1
11184:  ADDWFC xA1,W
11186:  MOVLB  2
11188:  MOVWF  x02
1118A:  MOVLW  00
1118C:  MOVLB  1
1118E:  ADDWFC xA2,W
11190:  MOVLB  2
11192:  MOVWF  x03
11194:  MOVLW  00
11196:  MOVLB  1
11198:  ADDWFC xA3,W
1119A:  MOVLB  2
1119C:  MOVWF  x04
1119E:  MOVFF  19D,206
111A2:  MOVFF  19E,207
111A6:  MOVFF  19F,208
111AA:  CLRF   x09
111AC:  CLRF   x07
111AE:  CLRF   x08
111B0:  CLRF   x09
111B2:  MOVFF  10B,20D
111B6:  MOVFF  10A,20C
111BA:  MOVFF  109,20B
111BE:  MOVFF  108,20A
111C2:  MOVFF  204,211
111C6:  MOVFF  203,210
111CA:  MOVFF  202,20F
111CE:  MOVFF  201,20E
111D2:  MOVFF  206,212
111D6:  MOVLB  0
111D8:  CALL   10000
....................     write_data_byte(SMF, smf_header_address_start + 3, (used_size >> 0) & 0xFF);
111DC:  MOVLW  03
111DE:  MOVLB  1
111E0:  ADDWF  xA0,W
111E2:  MOVLB  2
111E4:  MOVWF  x01
111E6:  MOVLW  00
111E8:  MOVLB  1
111EA:  ADDWFC xA1,W
111EC:  MOVLB  2
111EE:  MOVWF  x02
111F0:  MOVLW  00
111F2:  MOVLB  1
111F4:  ADDWFC xA2,W
111F6:  MOVLB  2
111F8:  MOVWF  x03
111FA:  MOVLW  00
111FC:  MOVLB  1
111FE:  ADDWFC xA3,W
11200:  MOVLB  2
11202:  MOVWF  x04
11204:  MOVFF  19F,209
11208:  MOVFF  19E,208
1120C:  MOVFF  19D,207
11210:  MOVFF  19C,206
11214:  CLRF   x07
11216:  CLRF   x08
11218:  CLRF   x09
1121A:  MOVFF  10B,20D
1121E:  MOVFF  10A,20C
11222:  MOVFF  109,20B
11226:  MOVFF  108,20A
1122A:  MOVFF  204,211
1122E:  MOVFF  203,210
11232:  MOVFF  202,20F
11236:  MOVFF  201,20E
1123A:  MOVFF  206,212
1123E:  MOVLB  0
11240:  CALL   10000
.................... 
....................     // print_smf_counter_status(&smf_data_table);
....................     // write size area
....................     // smf_write_header(&smf_data_table);
....................     misf_update_address_area();
11244:  CALL   5090
....................     fprintf(PC, "\r\n_________End copy_data__________\r\n");
11248:  MOVLW  04
1124A:  MOVWF  FF6
1124C:  MOVLW  0B
1124E:  MOVWF  FF7
11250:  MOVLW  00
11252:  MOVWF  FF8
11254:  CALL   22DC
....................     fprintf(PC, "_______________________________\r\n\r\n");
11258:  MOVLW  2A
1125A:  MOVWF  FF6
1125C:  MOVLW  0B
1125E:  MOVWF  FF7
11260:  MOVLW  00
11262:  MOVWF  FF8
11264:  CALL   22DC
11268:  GOTO   123A4 (RETURN)
.................... }
.................... 
.................... void smf_read(FlashOperationStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
11406:  MOVLW  4E
11408:  MOVWF  FF6
1140A:  MOVLW  0B
1140C:  MOVWF  FF7
1140E:  MOVLW  00
11410:  MOVWF  FF8
11412:  CALL   22DC
....................     fprintf(PC, "___Start SMF Read____\r\n");
11416:  MOVLW  68
11418:  MOVWF  FF6
1141A:  MOVLW  0B
1141C:  MOVWF  FF7
1141E:  MOVLW  00
11420:  MOVWF  FF8
11422:  CALL   22DC
.................... 
....................     int8 buffer[PACKET_SIZE];
.................... 
....................     SmfAddressStruct smf_address = get_smf_address_struct(smf_data->mission_id);
....................     unsigned int32 read_address = smf_data->misf_start_addr; // 呼び出し側でSMF内アドレスを設定する前提
....................     unsigned int32 read_size = smf_data->misf_size;
11426:  MOVLB  1
11428:  MOVF   x92,W
1142A:  MOVWF  FE9
1142C:  MOVF   x93,W
1142E:  MOVWF  FEA
11430:  MOVFF  FEF,1F4
11434:  MOVFF  1F4,1FB
11438:  MOVLB  0
1143A:  CALL   1126C
1143E:  MOVFF  02,03
11442:  MOVF   01,W
11444:  MOVWF  FE1
11446:  MOVFF  03,FE2
1144A:  MOVLW  01
1144C:  MOVWF  FEA
1144E:  MOVLW  D4
11450:  MOVWF  FE9
11452:  MOVLW  08
11454:  MOVWF  01
11456:  MOVFF  FE6,FEE
1145A:  DECFSZ 01,F
1145C:  GOTO   11456
11460:  MOVLW  04
11462:  MOVLB  1
11464:  ADDWF  x92,W
11466:  MOVWF  FE9
11468:  MOVLW  00
1146A:  ADDWFC x93,W
1146C:  MOVWF  FEA
1146E:  MOVFF  FEF,1DC
11472:  MOVFF  FEC,1DD
11476:  MOVFF  FEC,1DE
1147A:  MOVFF  FEC,1DF
1147E:  MOVF   FED,F
11480:  MOVF   FED,F
11482:  MOVF   FED,F
11484:  MOVLW  08
11486:  ADDWF  x92,W
11488:  MOVWF  FE9
1148A:  MOVLW  00
1148C:  ADDWFC x93,W
1148E:  MOVWF  FEA
11490:  MOVFF  FEF,1E0
11494:  MOVFF  FEC,1E1
11498:  MOVFF  FEC,1E2
1149C:  MOVFF  FEC,1E3
114A0:  MOVF   FED,F
114A2:  MOVF   FED,F
114A4:  MOVF   FED,F
.................... 
....................     // 境界チェック (start/end は [start_address, end_address) の半開区間想定)
....................     if (read_address < (unsigned int32)smf_address.start_address || read_address >= (unsigned int32)smf_address.end_address) {
114A6:  MOVF   xDF,W
114A8:  SUBWF  xD7,W
114AA:  BTFSC  FD8.0
114AC:  BRA    114B4
114AE:  MOVLB  0
114B0:  GOTO   114FE
114B4:  MOVLB  0
114B6:  BTFSS  FD8.2
114B8:  GOTO   11558
114BC:  MOVLB  1
114BE:  MOVF   xDE,W
114C0:  SUBWF  xD6,W
114C2:  BTFSC  FD8.0
114C4:  BRA    114CC
114C6:  MOVLB  0
114C8:  GOTO   114FE
114CC:  MOVLB  0
114CE:  BTFSS  FD8.2
114D0:  GOTO   11558
114D4:  MOVLB  1
114D6:  MOVF   xDD,W
114D8:  SUBWF  xD5,W
114DA:  BTFSC  FD8.0
114DC:  BRA    114E4
114DE:  MOVLB  0
114E0:  GOTO   114FE
114E4:  MOVLB  0
114E6:  BTFSS  FD8.2
114E8:  GOTO   11558
114EC:  MOVLB  1
114EE:  MOVF   xD4,W
114F0:  SUBWF  xDC,W
114F2:  BTFSC  FD8.0
114F4:  BRA    114FC
114F6:  MOVLB  0
114F8:  GOTO   11558
114FC:  MOVLB  0
114FE:  MOVLB  1
11500:  MOVF   xDB,W
11502:  SUBWF  xDF,W
11504:  BTFSC  FD8.0
11506:  BRA    1150E
11508:  MOVLB  0
1150A:  GOTO   1167C
1150E:  MOVLB  0
11510:  BTFSS  FD8.2
11512:  GOTO   11558
11516:  MOVLB  1
11518:  MOVF   xDA,W
1151A:  SUBWF  xDE,W
1151C:  BTFSC  FD8.0
1151E:  BRA    11526
11520:  MOVLB  0
11522:  GOTO   1167C
11526:  MOVLB  0
11528:  BTFSS  FD8.2
1152A:  GOTO   11558
1152E:  MOVLB  1
11530:  MOVF   xD9,W
11532:  SUBWF  xDD,W
11534:  BTFSC  FD8.0
11536:  BRA    1153E
11538:  MOVLB  0
1153A:  GOTO   1167C
1153E:  MOVLB  0
11540:  BTFSS  FD8.2
11542:  GOTO   11558
11546:  MOVLB  1
11548:  MOVF   xD8,W
1154A:  SUBWF  xDC,W
1154C:  BTFSC  FD8.0
1154E:  BRA    11556
11550:  MOVLB  0
11552:  GOTO   1167C
11556:  MOVLB  0
....................         fprintf(PC, "Error: Read address 0x%08LX out of SMF mission range [0x%08LX - 0x%08LX)\r\n",
....................                 read_address, (unsigned int32)smf_address.start_address, (unsigned int32)smf_address.end_address);
11558:  MOVLW  80
1155A:  MOVWF  FF6
1155C:  MOVLW  0B
1155E:  MOVWF  FF7
11560:  MOVLW  00
11562:  MOVWF  FF8
11564:  MOVLW  16
11566:  MOVLB  9
11568:  MOVWF  xB3
1156A:  MOVLB  0
1156C:  CALL   2312
11570:  MOVFF  1DF,9D9
11574:  MOVLW  37
11576:  MOVLB  9
11578:  MOVWF  xDA
1157A:  MOVLB  0
1157C:  CALL   2542
11580:  MOVFF  1DE,9D9
11584:  MOVLW  37
11586:  MOVLB  9
11588:  MOVWF  xDA
1158A:  MOVLB  0
1158C:  CALL   2542
11590:  MOVFF  1DD,9D9
11594:  MOVLW  37
11596:  MOVLB  9
11598:  MOVWF  xDA
1159A:  MOVLB  0
1159C:  CALL   2542
115A0:  MOVFF  1DC,9D9
115A4:  MOVLW  37
115A6:  MOVLB  9
115A8:  MOVWF  xDA
115AA:  MOVLB  0
115AC:  CALL   2542
115B0:  MOVLW  9B
115B2:  MOVWF  FF6
115B4:  MOVLW  0B
115B6:  MOVWF  FF7
115B8:  MOVLW  00
115BA:  MOVWF  FF8
115BC:  MOVLW  1D
115BE:  MOVLB  9
115C0:  MOVWF  xB3
115C2:  MOVLB  0
115C4:  CALL   2312
115C8:  MOVFF  1D7,9D9
115CC:  MOVLW  37
115CE:  MOVLB  9
115D0:  MOVWF  xDA
115D2:  MOVLB  0
115D4:  CALL   2542
115D8:  MOVFF  1D6,9D9
115DC:  MOVLW  37
115DE:  MOVLB  9
115E0:  MOVWF  xDA
115E2:  MOVLB  0
115E4:  CALL   2542
115E8:  MOVFF  1D5,9D9
115EC:  MOVLW  37
115EE:  MOVLB  9
115F0:  MOVWF  xDA
115F2:  MOVLB  0
115F4:  CALL   2542
115F8:  MOVFF  1D4,9D9
115FC:  MOVLW  37
115FE:  MOVLB  9
11600:  MOVWF  xDA
11602:  MOVLB  0
11604:  CALL   2542
11608:  MOVLW  BD
1160A:  MOVWF  FF6
1160C:  MOVLW  0B
1160E:  MOVWF  FF7
11610:  MOVLW  00
11612:  MOVWF  FF8
11614:  MOVLW  05
11616:  MOVLB  9
11618:  MOVWF  xB3
1161A:  MOVLB  0
1161C:  CALL   2312
11620:  MOVFF  1DB,9D9
11624:  MOVLW  37
11626:  MOVLB  9
11628:  MOVWF  xDA
1162A:  MOVLB  0
1162C:  CALL   2542
11630:  MOVFF  1DA,9D9
11634:  MOVLW  37
11636:  MOVLB  9
11638:  MOVWF  xDA
1163A:  MOVLB  0
1163C:  CALL   2542
11640:  MOVFF  1D9,9D9
11644:  MOVLW  37
11646:  MOVLB  9
11648:  MOVWF  xDA
1164A:  MOVLB  0
1164C:  CALL   2542
11650:  MOVFF  1D8,9D9
11654:  MOVLW  37
11656:  MOVLB  9
11658:  MOVWF  xDA
1165A:  MOVLB  0
1165C:  CALL   2542
11660:  MOVLW  C7
11662:  MOVWF  FF6
11664:  MOVLW  0B
11666:  MOVWF  FF7
11668:  MOVLW  00
1166A:  MOVWF  FF8
1166C:  MOVLW  03
1166E:  MOVLB  9
11670:  MOVWF  xB3
11672:  MOVLB  0
11674:  CALL   2312
....................         return;
11678:  GOTO   11B2C
....................     }
....................     unsigned int32 mission_remaining = (unsigned int32)smf_address.end_address - read_address; // 読める残り
1167C:  MOVLB  1
1167E:  MOVF   xDC,W
11680:  SUBWF  xD8,W
11682:  MOVWF  xE4
11684:  MOVF   xDD,W
11686:  SUBWFB xD9,W
11688:  MOVWF  xE5
1168A:  MOVF   xDE,W
1168C:  SUBWFB xDA,W
1168E:  MOVWF  xE6
11690:  MOVF   xDF,W
11692:  SUBWFB xDB,W
11694:  MOVWF  xE7
....................     if (read_size > mission_remaining) {
11696:  MOVF   xE7,W
11698:  SUBWF  xE3,W
1169A:  BTFSC  FD8.0
1169C:  BRA    116A4
1169E:  MOVLB  0
116A0:  GOTO   11776
116A4:  MOVLB  0
116A6:  BTFSS  FD8.2
116A8:  GOTO   116EE
116AC:  MOVLB  1
116AE:  MOVF   xE6,W
116B0:  SUBWF  xE2,W
116B2:  BTFSC  FD8.0
116B4:  BRA    116BC
116B6:  MOVLB  0
116B8:  GOTO   11776
116BC:  MOVLB  0
116BE:  BTFSS  FD8.2
116C0:  GOTO   116EE
116C4:  MOVLB  1
116C6:  MOVF   xE5,W
116C8:  SUBWF  xE1,W
116CA:  BTFSC  FD8.0
116CC:  BRA    116D4
116CE:  MOVLB  0
116D0:  GOTO   11776
116D4:  MOVLB  0
116D6:  BTFSS  FD8.2
116D8:  GOTO   116EE
116DC:  MOVLB  1
116DE:  MOVF   xE0,W
116E0:  SUBWF  xE4,W
116E2:  BTFSS  FD8.0
116E4:  BRA    116EC
116E6:  MOVLB  0
116E8:  GOTO   11776
116EC:  MOVLB  0
....................         fprintf(PC, "Warn: Adjust read size from %lu to %lu (mission end)\r\n", read_size, mission_remaining);
116EE:  MOVLW  CC
116F0:  MOVWF  FF6
116F2:  MOVLW  0B
116F4:  MOVWF  FF7
116F6:  MOVLW  00
116F8:  MOVWF  FF8
116FA:  MOVLW  1C
116FC:  MOVLB  9
116FE:  MOVWF  xB3
11700:  MOVLB  0
11702:  CALL   2312
11706:  MOVLW  41
11708:  MOVWF  FE9
1170A:  MOVFF  1E3,1FA
1170E:  MOVFF  1E2,1F9
11712:  MOVFF  1E1,1F8
11716:  MOVFF  1E0,1F7
1171A:  CALL   6300
1171E:  MOVLW  EB
11720:  MOVWF  FF6
11722:  MOVLW  0B
11724:  MOVWF  FF7
11726:  MOVLW  00
11728:  MOVWF  FF8
1172A:  MOVLW  04
1172C:  MOVLB  9
1172E:  MOVWF  xB3
11730:  MOVLB  0
11732:  CALL   2312
11736:  MOVLW  41
11738:  MOVWF  FE9
1173A:  MOVFF  1E7,1FA
1173E:  MOVFF  1E6,1F9
11742:  MOVFF  1E5,1F8
11746:  MOVFF  1E4,1F7
1174A:  CALL   6300
1174E:  MOVLW  F2
11750:  MOVWF  FF6
11752:  MOVLW  0B
11754:  MOVWF  FF7
11756:  MOVLW  00
11758:  MOVWF  FF8
1175A:  MOVLW  10
1175C:  MOVLB  9
1175E:  MOVWF  xB3
11760:  MOVLB  0
11762:  CALL   2312
....................         read_size = mission_remaining;
11766:  MOVFF  1E7,1E3
1176A:  MOVFF  1E6,1E2
1176E:  MOVFF  1E5,1E1
11772:  MOVFF  1E4,1E0
....................     }
....................     if (read_size == 0) {
11776:  MOVLB  1
11778:  MOVF   xE0,F
1177A:  BTFSC  FD8.2
1177C:  BRA    11784
1177E:  MOVLB  0
11780:  GOTO   117CA
11784:  MOVLB  0
11786:  MOVLB  1
11788:  MOVF   xE1,F
1178A:  BTFSC  FD8.2
1178C:  BRA    11794
1178E:  MOVLB  0
11790:  GOTO   117CA
11794:  MOVLB  0
11796:  MOVLB  1
11798:  MOVF   xE2,F
1179A:  BTFSC  FD8.2
1179C:  BRA    117A4
1179E:  MOVLB  0
117A0:  GOTO   117CA
117A4:  MOVLB  0
117A6:  MOVLB  1
117A8:  MOVF   xE3,F
117AA:  BTFSC  FD8.2
117AC:  BRA    117B4
117AE:  MOVLB  0
117B0:  GOTO   117CA
117B4:  MOVLB  0
....................         fprintf(PC, "Info: Nothing to read (size=0)\r\n");
117B6:  MOVLW  04
117B8:  MOVWF  FF6
117BA:  MOVLW  0C
117BC:  MOVWF  FF7
117BE:  MOVLW  00
117C0:  MOVWF  FF8
117C2:  CALL   22DC
....................         return;
117C6:  GOTO   11B2C
....................     }
.................... 
....................     fprintf(PC, "In SMF Read source data address: %LX\r\n", read_address);
117CA:  MOVLW  26
117CC:  MOVWF  FF6
117CE:  MOVLW  0C
117D0:  MOVWF  FF7
117D2:  MOVLW  00
117D4:  MOVWF  FF8
117D6:  MOVLW  21
117D8:  MOVLB  9
117DA:  MOVWF  xB3
117DC:  MOVLB  0
117DE:  CALL   2312
117E2:  MOVFF  1DF,9D9
117E6:  MOVLW  37
117E8:  MOVLB  9
117EA:  MOVWF  xDA
117EC:  MOVLB  0
117EE:  CALL   2542
117F2:  MOVFF  1DE,9D9
117F6:  MOVLW  37
117F8:  MOVLB  9
117FA:  MOVWF  xDA
117FC:  MOVLB  0
117FE:  CALL   2542
11802:  MOVFF  1DD,9D9
11806:  MOVLW  37
11808:  MOVLB  9
1180A:  MOVWF  xDA
1180C:  MOVLB  0
1180E:  CALL   2542
11812:  MOVFF  1DC,9D9
11816:  MOVLW  37
11818:  MOVLB  9
1181A:  MOVWF  xDA
1181C:  MOVLB  0
1181E:  CALL   2542
11822:  MOVLW  0D
11824:  BTFSS  FA6.6
11826:  GOTO   11824
1182A:  MOVLB  E
1182C:  MOVWF  xF9
1182E:  MOVLW  0A
11830:  MOVLB  0
11832:  BTFSS  FA6.6
11834:  GOTO   11832
11838:  MOVLB  E
1183A:  MOVWF  xF9
....................     fprintf(PC, "In SMF Read data size          : %lu (0x%lx)\r\n\r\n", read_size, read_size);
1183C:  MOVLW  4E
1183E:  MOVWF  FF6
11840:  MOVLW  0C
11842:  MOVWF  FF7
11844:  MOVLW  00
11846:  MOVWF  FF8
11848:  MOVLW  21
1184A:  MOVLB  9
1184C:  MOVWF  xB3
1184E:  MOVLB  0
11850:  CALL   2312
11854:  MOVLW  41
11856:  MOVWF  FE9
11858:  MOVFF  1E3,1FA
1185C:  MOVFF  1E2,1F9
11860:  MOVFF  1E1,1F8
11864:  MOVFF  1E0,1F7
11868:  CALL   6300
1186C:  MOVLW  72
1186E:  MOVWF  FF6
11870:  MOVLW  0C
11872:  MOVWF  FF7
11874:  MOVLW  00
11876:  MOVWF  FF8
11878:  MOVLW  04
1187A:  MOVLB  9
1187C:  MOVWF  xB3
1187E:  MOVLB  0
11880:  CALL   2312
11884:  MOVFF  1E3,9D9
11888:  MOVLW  57
1188A:  MOVLB  9
1188C:  MOVWF  xDA
1188E:  MOVLB  0
11890:  CALL   2542
11894:  MOVFF  1E2,9D9
11898:  MOVLW  57
1189A:  MOVLB  9
1189C:  MOVWF  xDA
1189E:  MOVLB  0
118A0:  CALL   2542
118A4:  MOVFF  1E1,9D9
118A8:  MOVLW  57
118AA:  MOVLB  9
118AC:  MOVWF  xDA
118AE:  MOVLB  0
118B0:  CALL   2542
118B4:  MOVFF  1E0,9D9
118B8:  MOVLW  57
118BA:  MOVLB  9
118BC:  MOVWF  xDA
118BE:  MOVLB  0
118C0:  CALL   2542
118C4:  MOVLW  79
118C6:  MOVWF  FF6
118C8:  MOVLW  0C
118CA:  MOVWF  FF7
118CC:  MOVLW  00
118CE:  MOVWF  FF8
118D0:  MOVLW  05
118D2:  MOVLB  9
118D4:  MOVWF  xB3
118D6:  MOVLB  0
118D8:  CALL   2312
.................... 
....................     if (!is_connect(smf)){
118DC:  MOVFF  10B,245
118E0:  MOVFF  10A,244
118E4:  MOVFF  109,243
118E8:  MOVFF  108,242
118EC:  CALL   2E12
118F0:  MOVF   01,F
118F2:  BTFSS  FD8.2
118F4:  GOTO   11908
....................         fprintf(PC, "Error: SMF is not connected\r\n");
118F8:  MOVLW  80
118FA:  MOVWF  FF6
118FC:  MOVLW  0C
118FE:  MOVWF  FF7
11900:  MOVLW  00
11902:  MOVWF  FF8
11904:  CALL   22DC
....................     }
....................     fprintf(PC, "READ DATA FROM SMF...\r\n");
11908:  MOVLW  9E
1190A:  MOVWF  FF6
1190C:  MOVLW  0C
1190E:  MOVWF  FF7
11910:  MOVLW  00
11912:  MOVWF  FF8
11914:  CALL   22DC
....................     unsigned int32 end_address = read_address + read_size;
11918:  MOVLB  1
1191A:  MOVF   xE0,W
1191C:  ADDWF  xDC,W
1191E:  MOVWF  xE8
11920:  MOVF   xE1,W
11922:  ADDWFC xDD,W
11924:  MOVWF  xE9
11926:  MOVF   xE2,W
11928:  ADDWFC xDE,W
1192A:  MOVWF  xEA
1192C:  MOVF   xE3,W
1192E:  ADDWFC xDF,W
11930:  MOVWF  xEB
....................     for (unsigned int32 addr = read_address; addr < end_address; addr += PACKET_SIZE) {
11932:  MOVFF  1DF,1EF
11936:  MOVFF  1DE,1EE
1193A:  MOVFF  1DD,1ED
1193E:  MOVFF  1DC,1EC
11942:  MOVLB  0
11944:  MOVLB  1
11946:  MOVF   xEF,W
11948:  SUBWF  xEB,W
1194A:  BTFSC  FD8.0
1194C:  BRA    11954
1194E:  MOVLB  0
11950:  GOTO   11B0C
11954:  MOVLB  0
11956:  BTFSS  FD8.2
11958:  GOTO   1199E
1195C:  MOVLB  1
1195E:  MOVF   xEE,W
11960:  SUBWF  xEA,W
11962:  BTFSC  FD8.0
11964:  BRA    1196C
11966:  MOVLB  0
11968:  GOTO   11B0C
1196C:  MOVLB  0
1196E:  BTFSS  FD8.2
11970:  GOTO   1199E
11974:  MOVLB  1
11976:  MOVF   xED,W
11978:  SUBWF  xE9,W
1197A:  BTFSC  FD8.0
1197C:  BRA    11984
1197E:  MOVLB  0
11980:  GOTO   11B0C
11984:  MOVLB  0
11986:  BTFSS  FD8.2
11988:  GOTO   1199E
1198C:  MOVLB  1
1198E:  MOVF   xE8,W
11990:  SUBWF  xEC,W
11992:  BTFSS  FD8.0
11994:  BRA    1199C
11996:  MOVLB  0
11998:  GOTO   11B0C
1199C:  MOVLB  0
....................         unsigned int16 chunk = (end_address - addr) >= PACKET_SIZE ? PACKET_SIZE : (unsigned int16)(end_address - addr);
1199E:  MOVLB  1
119A0:  MOVF   xEC,W
119A2:  SUBWF  xE8,W
119A4:  MOVWF  xF4
119A6:  MOVF   xED,W
119A8:  SUBWFB xE9,W
119AA:  MOVWF  xF5
119AC:  MOVF   xEE,W
119AE:  SUBWFB xEA,W
119B0:  MOVWF  xF6
119B2:  MOVF   xEF,W
119B4:  SUBWFB xEB,W
119B6:  MOVWF  xF7
119B8:  MOVF   xF7,F
119BA:  BTFSC  FD8.2
119BC:  BRA    119C4
119BE:  MOVLB  0
119C0:  GOTO   119F8
119C4:  MOVLB  0
119C6:  MOVLB  1
119C8:  MOVF   xF6,F
119CA:  BTFSC  FD8.2
119CC:  BRA    119D4
119CE:  MOVLB  0
119D0:  GOTO   119F8
119D4:  MOVLB  0
119D6:  MOVLB  1
119D8:  MOVF   xF5,F
119DA:  BTFSC  FD8.2
119DC:  BRA    119E4
119DE:  MOVLB  0
119E0:  GOTO   119F8
119E4:  MOVLB  0
119E6:  MOVLB  1
119E8:  MOVF   xF4,W
119EA:  SUBLW  3F
119EC:  BTFSS  FD8.0
119EE:  BRA    119F6
119F0:  MOVLB  0
119F2:  GOTO   11A00
119F6:  MOVLB  0
119F8:  CLRF   03
119FA:  MOVLW  40
119FC:  GOTO   11A22
11A00:  MOVLB  1
11A02:  MOVF   xEC,W
11A04:  SUBWF  xE8,W
11A06:  MOVWF  00
11A08:  MOVF   xED,W
11A0A:  SUBWFB xE9,W
11A0C:  MOVWF  01
11A0E:  MOVF   xEE,W
11A10:  SUBWFB xEA,W
11A12:  MOVWF  02
11A14:  MOVF   xEF,W
11A16:  SUBWFB xEB,W
11A18:  MOVWF  03
11A1A:  MOVFF  01,03
11A1E:  MOVF   00,W
11A20:  MOVLB  0
11A22:  MOVLB  1
11A24:  MOVWF  xF0
11A26:  MOVFF  03,1F1
11A2A:  MOVLB  0
....................         read_data_bytes(smf, addr, buffer, chunk);
11A2C:  MOVFF  10B,ADE
11A30:  MOVFF  10A,ADD
11A34:  MOVFF  109,ADC
11A38:  MOVFF  108,ADB
11A3C:  MOVFF  1EF,AE2
11A40:  MOVFF  1EE,AE1
11A44:  MOVFF  1ED,AE0
11A48:  MOVFF  1EC,ADF
11A4C:  MOVLW  01
11A4E:  MOVLB  A
11A50:  MOVWF  xE4
11A52:  MOVLW  94
11A54:  MOVWF  xE3
11A56:  CLRF   xE8
11A58:  CLRF   xE7
11A5A:  MOVFF  1F1,AE6
11A5E:  MOVFF  1F0,AE5
11A62:  MOVLB  0
11A64:  CALL   2EE0
....................         for (unsigned int16 i = 0; i < chunk; i++) fprintf(PC, "%02X ", buffer[i]);
11A68:  MOVLB  1
11A6A:  CLRF   xF3
11A6C:  CLRF   xF2
11A6E:  MOVLB  0
11A70:  MOVLB  1
11A72:  MOVF   xF3,W
11A74:  SUBWF  xF1,W
11A76:  BTFSC  FD8.0
11A78:  BRA    11A80
11A7A:  MOVLB  0
11A7C:  GOTO   11AD8
11A80:  MOVLB  0
11A82:  BTFSS  FD8.2
11A84:  GOTO   11A9A
11A88:  MOVLB  1
11A8A:  MOVF   xF0,W
11A8C:  SUBWF  xF2,W
11A8E:  BTFSS  FD8.0
11A90:  BRA    11A98
11A92:  MOVLB  0
11A94:  GOTO   11AD8
11A98:  MOVLB  0
11A9A:  MOVLW  94
11A9C:  MOVLB  1
11A9E:  ADDWF  xF2,W
11AA0:  MOVWF  FE9
11AA2:  MOVLW  01
11AA4:  ADDWFC xF3,W
11AA6:  MOVWF  FEA
11AA8:  MOVFF  FEF,1F4
11AAC:  MOVFF  1F4,9D9
11AB0:  MOVLW  37
11AB2:  MOVLB  9
11AB4:  MOVWF  xDA
11AB6:  MOVLB  0
11AB8:  CALL   2542
11ABC:  MOVLW  20
11ABE:  BTFSS  FA6.6
11AC0:  GOTO   11ABE
11AC4:  MOVLB  E
11AC6:  MOVWF  xF9
11AC8:  MOVLB  0
11ACA:  MOVLB  1
11ACC:  INCF   xF2,F
11ACE:  BTFSC  FD8.2
11AD0:  INCF   xF3,F
11AD2:  MOVLB  0
11AD4:  GOTO   11A70
....................         fprintf(PC, "\r\n");
11AD8:  MOVLW  0D
11ADA:  BTFSS  FA6.6
11ADC:  GOTO   11ADA
11AE0:  MOVLB  E
11AE2:  MOVWF  xF9
11AE4:  MOVLW  0A
11AE6:  MOVLB  0
11AE8:  BTFSS  FA6.6
11AEA:  GOTO   11AE8
11AEE:  MOVLB  E
11AF0:  MOVWF  xF9
11AF2:  MOVLB  0
11AF4:  MOVLW  40
11AF6:  MOVLB  1
11AF8:  ADDWF  xEC,F
11AFA:  MOVLW  00
11AFC:  ADDWFC xED,F
11AFE:  MOVLW  00
11B00:  ADDWFC xEE,F
11B02:  MOVLW  00
11B04:  ADDWFC xEF,F
11B06:  MOVLB  0
11B08:  GOTO   11944
....................     }
....................     fprintf(PC, "\r\n___End SMF Read____\r\n");
11B0C:  MOVLW  B6
11B0E:  MOVWF  FF6
11B10:  MOVLW  0C
11B12:  MOVWF  FF7
11B14:  MOVLW  00
11B16:  MOVWF  FF8
11B18:  CALL   22DC
....................     fprintf(PC, "____________________\r\n\r\n");
11B1C:  MOVLW  CE
11B1E:  MOVWF  FF6
11B20:  MOVLW  0C
11B22:  MOVWF  FF7
11B24:  MOVLW  00
11B26:  MOVWF  FF8
11B28:  CALL   22DC
11B2C:  GOTO   123B4 (RETURN)
.................... }
.................... 
.................... void smf_erase(FlashOperationStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
11B30:  MOVLW  E8
11B32:  MOVWF  FF6
11B34:  MOVLW  0C
11B36:  MOVWF  FF7
11B38:  MOVLW  00
11B3A:  MOVWF  FF8
11B3C:  CALL   22DC
....................     fprintf(PC, "___Start smf_erase____\r\n");
11B40:  MOVLW  02
11B42:  MOVWF  FF6
11B44:  MOVLW  0D
11B46:  MOVWF  FF7
11B48:  MOVLW  00
11B4A:  MOVWF  FF8
11B4C:  CALL   22DC
.................... 
....................     SmfAddressStruct mission_type = get_smf_address_struct(smf_data->mission_id);
....................     unsigned int32 erase_address = smf_data->misf_start_addr;
....................     unsigned int32 erase_size = smf_data->misf_size;
11B50:  MOVLB  1
11B52:  MOVF   x92,W
11B54:  MOVWF  FE9
11B56:  MOVF   x93,W
11B58:  MOVWF  FEA
11B5A:  MOVFF  FEF,1AC
11B5E:  MOVFF  1AC,1FB
11B62:  MOVLB  0
11B64:  CALL   1126C
11B68:  MOVFF  02,03
11B6C:  MOVF   01,W
11B6E:  MOVWF  FE1
11B70:  MOVFF  03,FE2
11B74:  MOVLW  01
11B76:  MOVWF  FEA
11B78:  MOVLW  94
11B7A:  MOVWF  FE9
11B7C:  MOVLW  08
11B7E:  MOVWF  01
11B80:  MOVFF  FE6,FEE
11B84:  DECFSZ 01,F
11B86:  GOTO   11B80
11B8A:  MOVLW  04
11B8C:  MOVLB  1
11B8E:  ADDWF  x92,W
11B90:  MOVWF  FE9
11B92:  MOVLW  00
11B94:  ADDWFC x93,W
11B96:  MOVWF  FEA
11B98:  MOVFF  FEF,19C
11B9C:  MOVFF  FEC,19D
11BA0:  MOVFF  FEC,19E
11BA4:  MOVFF  FEC,19F
11BA8:  MOVF   FED,F
11BAA:  MOVF   FED,F
11BAC:  MOVF   FED,F
11BAE:  MOVLW  08
11BB0:  ADDWF  x92,W
11BB2:  MOVWF  FE9
11BB4:  MOVLW  00
11BB6:  ADDWFC x93,W
11BB8:  MOVWF  FEA
11BBA:  MOVFF  FEF,1A0
11BBE:  MOVFF  FEC,1A1
11BC2:  MOVFF  FEC,1A2
11BC6:  MOVFF  FEC,1A3
11BCA:  MOVF   FED,F
11BCC:  MOVF   FED,F
11BCE:  MOVF   FED,F
....................     fprintf(PC, "[SMF] Erase address   : %LX\r\n", erase_address);
11BD0:  MOVLW  1C
11BD2:  MOVWF  FF6
11BD4:  MOVLW  0D
11BD6:  MOVWF  FF7
11BD8:  MOVLW  00
11BDA:  MOVWF  FF8
11BDC:  MOVLW  18
11BDE:  MOVLB  9
11BE0:  MOVWF  xB3
11BE2:  MOVLB  0
11BE4:  CALL   2312
11BE8:  MOVFF  19F,9D9
11BEC:  MOVLW  37
11BEE:  MOVLB  9
11BF0:  MOVWF  xDA
11BF2:  MOVLB  0
11BF4:  CALL   2542
11BF8:  MOVFF  19E,9D9
11BFC:  MOVLW  37
11BFE:  MOVLB  9
11C00:  MOVWF  xDA
11C02:  MOVLB  0
11C04:  CALL   2542
11C08:  MOVFF  19D,9D9
11C0C:  MOVLW  37
11C0E:  MOVLB  9
11C10:  MOVWF  xDA
11C12:  MOVLB  0
11C14:  CALL   2542
11C18:  MOVFF  19C,9D9
11C1C:  MOVLW  37
11C1E:  MOVLB  9
11C20:  MOVWF  xDA
11C22:  MOVLB  0
11C24:  CALL   2542
11C28:  MOVLW  0D
11C2A:  BTFSS  FA6.6
11C2C:  GOTO   11C2A
11C30:  MOVLB  E
11C32:  MOVWF  xF9
11C34:  MOVLW  0A
11C36:  MOVLB  0
11C38:  BTFSS  FA6.6
11C3A:  GOTO   11C38
11C3E:  MOVLB  E
11C40:  MOVWF  xF9
....................     fprintf(PC, "[SMF] Erase data size : %lu (0x%lx)\r\n\r\n", erase_size, erase_size);
11C42:  MOVLW  3A
11C44:  MOVWF  FF6
11C46:  MOVLW  0D
11C48:  MOVWF  FF7
11C4A:  MOVLW  00
11C4C:  MOVWF  FF8
11C4E:  MOVLW  18
11C50:  MOVLB  9
11C52:  MOVWF  xB3
11C54:  MOVLB  0
11C56:  CALL   2312
11C5A:  MOVLW  41
11C5C:  MOVWF  FE9
11C5E:  MOVFF  1A3,1FA
11C62:  MOVFF  1A2,1F9
11C66:  MOVFF  1A1,1F8
11C6A:  MOVFF  1A0,1F7
11C6E:  CALL   6300
11C72:  MOVLW  55
11C74:  MOVWF  FF6
11C76:  MOVLW  0D
11C78:  MOVWF  FF7
11C7A:  MOVLW  00
11C7C:  MOVWF  FF8
11C7E:  MOVLW  04
11C80:  MOVLB  9
11C82:  MOVWF  xB3
11C84:  MOVLB  0
11C86:  CALL   2312
11C8A:  MOVFF  1A3,9D9
11C8E:  MOVLW  57
11C90:  MOVLB  9
11C92:  MOVWF  xDA
11C94:  MOVLB  0
11C96:  CALL   2542
11C9A:  MOVFF  1A2,9D9
11C9E:  MOVLW  57
11CA0:  MOVLB  9
11CA2:  MOVWF  xDA
11CA4:  MOVLB  0
11CA6:  CALL   2542
11CAA:  MOVFF  1A1,9D9
11CAE:  MOVLW  57
11CB0:  MOVLB  9
11CB2:  MOVWF  xDA
11CB4:  MOVLB  0
11CB6:  CALL   2542
11CBA:  MOVFF  1A0,9D9
11CBE:  MOVLW  57
11CC0:  MOVLB  9
11CC2:  MOVWF  xDA
11CC4:  MOVLB  0
11CC6:  CALL   2542
11CCA:  MOVLW  5C
11CCC:  MOVWF  FF6
11CCE:  MOVLW  0D
11CD0:  MOVWF  FF7
11CD2:  MOVLW  00
11CD4:  MOVWF  FF8
11CD6:  MOVLW  05
11CD8:  MOVLB  9
11CDA:  MOVWF  xB3
11CDC:  MOVLB  0
11CDE:  CALL   2312
.................... 
....................     if (!is_connect(smf)){
11CE2:  MOVFF  10B,245
11CE6:  MOVFF  10A,244
11CEA:  MOVFF  109,243
11CEE:  MOVFF  108,242
11CF2:  CALL   2E12
11CF6:  MOVF   01,F
11CF8:  BTFSS  FD8.2
11CFA:  GOTO   11D12
....................         fprintf(PC, "Error: SMF is not connected\r\n");
11CFE:  MOVLW  62
11D00:  MOVWF  FF6
11D02:  MOVLW  0D
11D04:  MOVWF  FF7
11D06:  MOVLW  00
11D08:  MOVWF  FF8
11D0A:  CALL   22DC
....................         return;
11D0E:  GOTO   121AE
....................     }
.................... 
....................     // Check if erase operation is within mission_type range
....................     if (erase_address < mission_type.start_address || erase_address >= mission_type.end_address) {
11D12:  MOVLB  1
11D14:  MOVF   x9F,W
11D16:  SUBWF  x97,W
11D18:  BTFSC  FD8.0
11D1A:  BRA    11D22
11D1C:  MOVLB  0
11D1E:  GOTO   11D6C
11D22:  MOVLB  0
11D24:  BTFSS  FD8.2
11D26:  GOTO   11DC6
11D2A:  MOVLB  1
11D2C:  MOVF   x9E,W
11D2E:  SUBWF  x96,W
11D30:  BTFSC  FD8.0
11D32:  BRA    11D3A
11D34:  MOVLB  0
11D36:  GOTO   11D6C
11D3A:  MOVLB  0
11D3C:  BTFSS  FD8.2
11D3E:  GOTO   11DC6
11D42:  MOVLB  1
11D44:  MOVF   x9D,W
11D46:  SUBWF  x95,W
11D48:  BTFSC  FD8.0
11D4A:  BRA    11D52
11D4C:  MOVLB  0
11D4E:  GOTO   11D6C
11D52:  MOVLB  0
11D54:  BTFSS  FD8.2
11D56:  GOTO   11DC6
11D5A:  MOVLB  1
11D5C:  MOVF   x94,W
11D5E:  SUBWF  x9C,W
11D60:  BTFSC  FD8.0
11D62:  BRA    11D6A
11D64:  MOVLB  0
11D66:  GOTO   11DC6
11D6A:  MOVLB  0
11D6C:  MOVLB  1
11D6E:  MOVF   x9B,W
11D70:  SUBWF  x9F,W
11D72:  BTFSC  FD8.0
11D74:  BRA    11D7C
11D76:  MOVLB  0
11D78:  GOTO   11EEA
11D7C:  MOVLB  0
11D7E:  BTFSS  FD8.2
11D80:  GOTO   11DC6
11D84:  MOVLB  1
11D86:  MOVF   x9A,W
11D88:  SUBWF  x9E,W
11D8A:  BTFSC  FD8.0
11D8C:  BRA    11D94
11D8E:  MOVLB  0
11D90:  GOTO   11EEA
11D94:  MOVLB  0
11D96:  BTFSS  FD8.2
11D98:  GOTO   11DC6
11D9C:  MOVLB  1
11D9E:  MOVF   x99,W
11DA0:  SUBWF  x9D,W
11DA2:  BTFSC  FD8.0
11DA4:  BRA    11DAC
11DA6:  MOVLB  0
11DA8:  GOTO   11EEA
11DAC:  MOVLB  0
11DAE:  BTFSS  FD8.2
11DB0:  GOTO   11DC6
11DB4:  MOVLB  1
11DB6:  MOVF   x98,W
11DB8:  SUBWF  x9C,W
11DBA:  BTFSC  FD8.0
11DBC:  BRA    11DC4
11DBE:  MOVLB  0
11DC0:  GOTO   11EEA
11DC4:  MOVLB  0
....................         fprintf(PC, "Error: Erase source address 0x%LX is outside mission range [0x%LX - 0x%LX]\r\n", 
....................                 erase_address, mission_type.start_address, mission_type.end_address);
11DC6:  MOVLW  80
11DC8:  MOVWF  FF6
11DCA:  MOVLW  0D
11DCC:  MOVWF  FF7
11DCE:  MOVLW  00
11DD0:  MOVWF  FF8
11DD2:  MOVLW  1E
11DD4:  MOVLB  9
11DD6:  MOVWF  xB3
11DD8:  MOVLB  0
11DDA:  CALL   2312
11DDE:  MOVFF  19F,9D9
11DE2:  MOVLW  37
11DE4:  MOVLB  9
11DE6:  MOVWF  xDA
11DE8:  MOVLB  0
11DEA:  CALL   2542
11DEE:  MOVFF  19E,9D9
11DF2:  MOVLW  37
11DF4:  MOVLB  9
11DF6:  MOVWF  xDA
11DF8:  MOVLB  0
11DFA:  CALL   2542
11DFE:  MOVFF  19D,9D9
11E02:  MOVLW  37
11E04:  MOVLB  9
11E06:  MOVWF  xDA
11E08:  MOVLB  0
11E0A:  CALL   2542
11E0E:  MOVFF  19C,9D9
11E12:  MOVLW  37
11E14:  MOVLB  9
11E16:  MOVWF  xDA
11E18:  MOVLB  0
11E1A:  CALL   2542
11E1E:  MOVLW  A1
11E20:  MOVWF  FF6
11E22:  MOVLW  0D
11E24:  MOVWF  FF7
11E26:  MOVLW  00
11E28:  MOVWF  FF8
11E2A:  MOVLW  1D
11E2C:  MOVLB  9
11E2E:  MOVWF  xB3
11E30:  MOVLB  0
11E32:  CALL   2312
11E36:  MOVFF  197,9D9
11E3A:  MOVLW  37
11E3C:  MOVLB  9
11E3E:  MOVWF  xDA
11E40:  MOVLB  0
11E42:  CALL   2542
11E46:  MOVFF  196,9D9
11E4A:  MOVLW  37
11E4C:  MOVLB  9
11E4E:  MOVWF  xDA
11E50:  MOVLB  0
11E52:  CALL   2542
11E56:  MOVFF  195,9D9
11E5A:  MOVLW  37
11E5C:  MOVLB  9
11E5E:  MOVWF  xDA
11E60:  MOVLB  0
11E62:  CALL   2542
11E66:  MOVFF  194,9D9
11E6A:  MOVLW  37
11E6C:  MOVLB  9
11E6E:  MOVWF  xDA
11E70:  MOVLB  0
11E72:  CALL   2542
11E76:  MOVLW  C1
11E78:  MOVWF  FF6
11E7A:  MOVLW  0D
11E7C:  MOVWF  FF7
11E7E:  MOVLW  00
11E80:  MOVWF  FF8
11E82:  MOVLW  05
11E84:  MOVLB  9
11E86:  MOVWF  xB3
11E88:  MOVLB  0
11E8A:  CALL   2312
11E8E:  MOVFF  19B,9D9
11E92:  MOVLW  37
11E94:  MOVLB  9
11E96:  MOVWF  xDA
11E98:  MOVLB  0
11E9A:  CALL   2542
11E9E:  MOVFF  19A,9D9
11EA2:  MOVLW  37
11EA4:  MOVLB  9
11EA6:  MOVWF  xDA
11EA8:  MOVLB  0
11EAA:  CALL   2542
11EAE:  MOVFF  199,9D9
11EB2:  MOVLW  37
11EB4:  MOVLB  9
11EB6:  MOVWF  xDA
11EB8:  MOVLB  0
11EBA:  CALL   2542
11EBE:  MOVFF  198,9D9
11EC2:  MOVLW  37
11EC4:  MOVLB  9
11EC6:  MOVWF  xDA
11EC8:  MOVLB  0
11ECA:  CALL   2542
11ECE:  MOVLW  C9
11ED0:  MOVWF  FF6
11ED2:  MOVLW  0D
11ED4:  MOVWF  FF7
11ED6:  MOVLW  00
11ED8:  MOVWF  FF8
11EDA:  MOVLW  03
11EDC:  MOVLB  9
11EDE:  MOVWF  xB3
11EE0:  MOVLB  0
11EE2:  CALL   2312
....................         return;
11EE6:  GOTO   121AE
....................     }
.................... 
....................     if ((erase_address + erase_size) > mission_type.end_address) {
11EEA:  MOVLB  1
11EEC:  MOVF   xA0,W
11EEE:  ADDWF  x9C,W
11EF0:  MOVWF  xAC
11EF2:  MOVF   xA1,W
11EF4:  ADDWFC x9D,W
11EF6:  MOVWF  xAD
11EF8:  MOVF   xA2,W
11EFA:  ADDWFC x9E,W
11EFC:  MOVWF  xAE
11EFE:  MOVF   xA3,W
11F00:  ADDWFC x9F,W
11F02:  MOVWF  xAF
11F04:  MOVF   x9B,W
11F06:  SUBWF  xAF,W
11F08:  BTFSC  FD8.0
11F0A:  BRA    11F12
11F0C:  MOVLB  0
11F0E:  GOTO   11FFC
11F12:  MOVLB  0
11F14:  BTFSS  FD8.2
11F16:  GOTO   11F5C
11F1A:  MOVLB  1
11F1C:  MOVF   x9A,W
11F1E:  SUBWF  xAE,W
11F20:  BTFSC  FD8.0
11F22:  BRA    11F2A
11F24:  MOVLB  0
11F26:  GOTO   11FFC
11F2A:  MOVLB  0
11F2C:  BTFSS  FD8.2
11F2E:  GOTO   11F5C
11F32:  MOVLB  1
11F34:  MOVF   x99,W
11F36:  SUBWF  xAD,W
11F38:  BTFSC  FD8.0
11F3A:  BRA    11F42
11F3C:  MOVLB  0
11F3E:  GOTO   11FFC
11F42:  MOVLB  0
11F44:  BTFSS  FD8.2
11F46:  GOTO   11F5C
11F4A:  MOVLB  1
11F4C:  MOVF   xAC,W
11F4E:  SUBWF  x98,W
11F50:  BTFSS  FD8.0
11F52:  BRA    11F5A
11F54:  MOVLB  0
11F56:  GOTO   11FFC
11F5A:  MOVLB  0
....................         fprintf(PC, "Error: Erase operation would exceed mission end address 0x%LX\r\n", mission_type.end_address);
11F5C:  MOVLW  CE
11F5E:  MOVWF  FF6
11F60:  MOVLW  0D
11F62:  MOVWF  FF7
11F64:  MOVLW  00
11F66:  MOVWF  FF8
11F68:  MOVLW  3A
11F6A:  MOVLB  9
11F6C:  MOVWF  xB3
11F6E:  MOVLB  0
11F70:  CALL   2312
11F74:  MOVFF  19B,9D9
11F78:  MOVLW  37
11F7A:  MOVLB  9
11F7C:  MOVWF  xDA
11F7E:  MOVLB  0
11F80:  CALL   2542
11F84:  MOVFF  19A,9D9
11F88:  MOVLW  37
11F8A:  MOVLB  9
11F8C:  MOVWF  xDA
11F8E:  MOVLB  0
11F90:  CALL   2542
11F94:  MOVFF  199,9D9
11F98:  MOVLW  37
11F9A:  MOVLB  9
11F9C:  MOVWF  xDA
11F9E:  MOVLB  0
11FA0:  CALL   2542
11FA4:  MOVFF  198,9D9
11FA8:  MOVLW  37
11FAA:  MOVLB  9
11FAC:  MOVWF  xDA
11FAE:  MOVLB  0
11FB0:  CALL   2542
11FB4:  MOVLW  0D
11FB6:  BTFSS  FA6.6
11FB8:  GOTO   11FB6
11FBC:  MOVLB  E
11FBE:  MOVWF  xF9
11FC0:  MOVLW  0A
11FC2:  MOVLB  0
11FC4:  BTFSS  FA6.6
11FC6:  GOTO   11FC4
11FCA:  MOVLB  E
11FCC:  MOVWF  xF9
....................         fprintf(PC, "Limiting erase size to stay within mission bounds\r\n");
11FCE:  MOVLW  0E
11FD0:  MOVWF  FF6
11FD2:  MOVLW  0E
11FD4:  MOVWF  FF7
11FD6:  MOVLW  00
11FD8:  MOVWF  FF8
11FDA:  MOVLB  0
11FDC:  CALL   22DC
....................         erase_size = mission_type.end_address - erase_address;
11FE0:  MOVLB  1
11FE2:  MOVF   x9C,W
11FE4:  SUBWF  x98,W
11FE6:  MOVWF  xA0
11FE8:  MOVF   x9D,W
11FEA:  SUBWFB x99,W
11FEC:  MOVWF  xA1
11FEE:  MOVF   x9E,W
11FF0:  SUBWFB x9A,W
11FF2:  MOVWF  xA2
11FF4:  MOVF   x9F,W
11FF6:  SUBWFB x9B,W
11FF8:  MOVWF  xA3
11FFA:  MOVLB  0
....................     }
.................... 
....................     fprintf(PC, "Erase operation validated within mission range\r\n");
11FFC:  MOVLW  42
11FFE:  MOVWF  FF6
12000:  MOVLW  0E
12002:  MOVWF  FF7
12004:  MOVLW  00
12006:  MOVWF  FF8
12008:  CALL   22DC
....................     unsigned int32 erase_end = erase_address + erase_size;
....................     // 4KB境界開始へアライン
....................     unsigned int32 current = erase_address & ~0xFFF;
1200C:  MOVLB  1
1200E:  MOVF   xA0,W
12010:  ADDWF  x9C,W
12012:  MOVWF  xA4
12014:  MOVF   xA1,W
12016:  ADDWFC x9D,W
12018:  MOVWF  xA5
1201A:  MOVF   xA2,W
1201C:  ADDWFC x9E,W
1201E:  MOVWF  xA6
12020:  MOVF   xA3,W
12022:  ADDWFC x9F,W
12024:  MOVWF  xA7
12026:  CLRF   xA8
12028:  MOVF   x9D,W
1202A:  ANDLW  F0
1202C:  MOVWF  xA9
1202E:  CLRF   xAA
12030:  CLRF   xAB
12032:  MOVLB  0
....................     while (current < erase_end && current < (unsigned int32)mission_type.end_address) {
12034:  MOVLB  1
12036:  MOVF   xAB,W
12038:  SUBWF  xA7,W
1203A:  BTFSC  FD8.0
1203C:  BRA    12044
1203E:  MOVLB  0
12040:  GOTO   12120
12044:  MOVLB  0
12046:  BTFSS  FD8.2
12048:  GOTO   1208E
1204C:  MOVLB  1
1204E:  MOVF   xAA,W
12050:  SUBWF  xA6,W
12052:  BTFSC  FD8.0
12054:  BRA    1205C
12056:  MOVLB  0
12058:  GOTO   12120
1205C:  MOVLB  0
1205E:  BTFSS  FD8.2
12060:  GOTO   1208E
12064:  MOVLB  1
12066:  MOVF   xA9,W
12068:  SUBWF  xA5,W
1206A:  BTFSC  FD8.0
1206C:  BRA    12074
1206E:  MOVLB  0
12070:  GOTO   12120
12074:  MOVLB  0
12076:  BTFSS  FD8.2
12078:  GOTO   1208E
1207C:  MOVLB  1
1207E:  MOVF   xA4,W
12080:  SUBWF  xA8,W
12082:  BTFSS  FD8.0
12084:  BRA    1208C
12086:  MOVLB  0
12088:  GOTO   12120
1208C:  MOVLB  0
1208E:  MOVLB  1
12090:  MOVF   xAB,W
12092:  SUBWF  x9B,W
12094:  BTFSC  FD8.0
12096:  BRA    1209E
12098:  MOVLB  0
1209A:  GOTO   12120
1209E:  MOVLB  0
120A0:  BTFSS  FD8.2
120A2:  GOTO   120E8
120A6:  MOVLB  1
120A8:  MOVF   xAA,W
120AA:  SUBWF  x9A,W
120AC:  BTFSC  FD8.0
120AE:  BRA    120B6
120B0:  MOVLB  0
120B2:  GOTO   12120
120B6:  MOVLB  0
120B8:  BTFSS  FD8.2
120BA:  GOTO   120E8
120BE:  MOVLB  1
120C0:  MOVF   xA9,W
120C2:  SUBWF  x99,W
120C4:  BTFSC  FD8.0
120C6:  BRA    120CE
120C8:  MOVLB  0
120CA:  GOTO   12120
120CE:  MOVLB  0
120D0:  BTFSS  FD8.2
120D2:  GOTO   120E8
120D6:  MOVLB  1
120D8:  MOVF   x98,W
120DA:  SUBWF  xA8,W
120DC:  BTFSS  FD8.0
120DE:  BRA    120E6
120E0:  MOVLB  0
120E2:  GOTO   12120
120E6:  MOVLB  0
....................         subsector_4kByte_erase(smf, current);
120E8:  MOVFF  10B,9F8
120EC:  MOVFF  10A,9F7
120F0:  MOVFF  109,9F6
120F4:  MOVFF  108,9F5
120F8:  MOVFF  1AB,9FC
120FC:  MOVFF  1AA,9FB
12100:  MOVFF  1A9,9FA
12104:  MOVFF  1A8,9F9
12108:  CALL   4D66
....................         current += SUBSECTOR_SIZE;
1210C:  MOVLW  10
1210E:  MOVLB  1
12110:  ADDWF  xA9,F
12112:  MOVLW  00
12114:  ADDWFC xAA,F
12116:  MOVLW  00
12118:  ADDWFC xAB,F
1211A:  MOVLB  0
1211C:  GOTO   12034
....................     }
....................     fprintf(PC, "Erased %lu bytes (aligned)\r\n", (current - (erase_address & ~0xFFF)));
12120:  CLRF   00
12122:  MOVLB  1
12124:  MOVF   x9D,W
12126:  ANDLW  F0
12128:  MOVWF  01
1212A:  CLRF   02
1212C:  CLRF   03
1212E:  MOVF   00,W
12130:  SUBWF  xA8,W
12132:  MOVWF  xAC
12134:  MOVF   01,W
12136:  SUBWFB xA9,W
12138:  MOVWF  xAD
1213A:  MOVF   02,W
1213C:  SUBWFB xAA,W
1213E:  MOVWF  xAE
12140:  MOVF   03,W
12142:  SUBWFB xAB,W
12144:  MOVWF  xAF
12146:  MOVLW  74
12148:  MOVWF  FF6
1214A:  MOVLW  0E
1214C:  MOVWF  FF7
1214E:  MOVLW  00
12150:  MOVWF  FF8
12152:  MOVLW  07
12154:  MOVLB  9
12156:  MOVWF  xB3
12158:  MOVLB  0
1215A:  CALL   2312
1215E:  MOVLW  41
12160:  MOVWF  FE9
12162:  MOVFF  1AF,1FA
12166:  MOVFF  1AE,1F9
1216A:  MOVFF  1AD,1F8
1216E:  MOVFF  1AC,1F7
12172:  CALL   6300
12176:  MOVLW  7E
12178:  MOVWF  FF6
1217A:  MOVLW  0E
1217C:  MOVWF  FF7
1217E:  MOVLW  00
12180:  MOVWF  FF8
12182:  MOVLW  12
12184:  MOVLB  9
12186:  MOVWF  xB3
12188:  MOVLB  0
1218A:  CALL   2312
.................... 
....................     fprintf(PC, "\r\n___End smf_erase____\r\n");
1218E:  MOVLW  92
12190:  MOVWF  FF6
12192:  MOVLW  0E
12194:  MOVWF  FF7
12196:  MOVLW  00
12198:  MOVWF  FF8
1219A:  CALL   22DC
....................     fprintf(PC, "____________________\r\n\r\n");
1219E:  MOVLW  AC
121A0:  MOVWF  FF6
121A2:  MOVLW  0E
121A4:  MOVWF  FF7
121A6:  MOVLW  00
121A8:  MOVWF  FF8
121AA:  CALL   22DC
121AE:  GOTO   123C4 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... // End of file
.................... 
.................... #include "domain/cigs_flash.c"
.................... #include "cigs_flash.h"                           
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/cigs_config.h"             
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mt25q.h"                
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... // ================================== ADD NEW DEFINES HERE ==================================
.................... // =============================================================================================
.................... // MT25Q Flash Memory Specifications
.................... #define MT25Q_BLOCK_SIZE   4096
.................... #define MT25Q_BLOCK_NUM    8192
.................... #define DEV
.................... #ifdef DEV
.................... typedef enum mt25q_cmd{
....................     //Software RESET Operations
....................     MT25Q_CMD_RESET_ENABLE = 0x66,
....................     MT25Q_CMD_RESET_MEMORY = 0x99,
.................... 
....................     //READ ID Operations
....................     MT25Q_CMD_READ_ID = 0x9F,
....................     MT25Q_CMD_READ_ID_MULTI_IO = 0xAF,
....................     MT25Q_CMD_READ_PARAMETER = 0x5A,
.................... 
....................     //READ MEMORY Operations
....................     MT25Q_CMD_READ = 0x03,
....................     MT25Q_CMD_READ_FAST = 0x0B,
....................     MT25Q_CMD_READ_DUAL_OUTPUT_FAST = 0x3B,
....................     MT25Q_CMD_READ_DUAL_IO_FAST = 0xBB,
....................     MT25Q_CMD_READ_QUAD_OUTPUT_FAST = 0x6B,
....................     MT25Q_CMD_READ_QUAD_IO_FAST = 0xEB,
....................     MT25Q_CMD_READ_QUAD_IO = 0x6B,
....................     MT25Q_CMD_READ_DTR_FAST = 0x0D,
....................     MT25Q_CMD_READ_DTR_OUTPUT_FAST = 0x3D,
....................     MT25Q_CMD_READ_DTR_IO_FAST = 0xBD,
....................     MT25Q_CMD_READ_DTR_QUAD_OUTPUT_FAST = 0x6D,
....................     MT25Q_CMD_READ_DTR_QUAD_IO_FAST = 0xED, 
....................     MT25Q_CMD_READ_QUAD_IO_WORD = 0xE7,
.................... 
....................     //READ MEMORY Operations with 4-Byte Address
....................     MT25Q_CMD_4BYTE_READ = 0x13,
....................     MT25Q_CMD_4BYTE_READ_FAST = 0x0C,
....................     MT25Q_CMD_4BYTE_READ_DUAL_OUTPUT_FAST = 0x3C,
....................     MT25Q_CMD_4BYTE_DUAL_IO_FAST_READ = 0xBC,  
....................     MT25Q_CMD_4BYTE_QUAD_OUTPUT_FAST_READ = 0x6C,
....................     MT25Q_CMD_4BYTE_QUAD_IO_FAST_READ = 0xEC,   
....................     MT25Q_CMD_4BYTE_DTR_FAST_READ = 0x0E,
....................     MT25Q_CMD_4BYTE_DTR_DUAL_IO_FAST_READ = 0xBE,
....................     MT25Q_CMD_4BYTE_DTR_QUAD_IO_FAST_READ = 0xEE,
.................... 
....................     //WRITE Operations
....................     MT25Q_CMD_WRITE_ENABLE = 0x06,
....................     MT25Q_CMD_WRITE_DISABLE = 0x04,
.................... 
....................     //READ REGISTER Operations
....................     MT25Q_CMD_READ_STATUS_REG = 0x05,
....................     MT25Q_CMD_READ_FLAG_STATUS_REG = 0x70,
....................     MT25Q_CMD_READ_NONVOL_CFG_REG = 0xB5,
....................     MT25Q_CMD_READ_VOL_CFG_REG = 0x85,
....................     MT25Q_CMD_READ_ENHANCED_VOL_CFG_REG = 0x65,
....................     MT25Q_CMD_READ_EXT_ADDR_REG = 0xC8,
....................     MT25Q_CMD_READ_GENERAL_PURPOSE_REG = 0x96,
.................... 
....................     //WRITE REGISTER Operations
....................     MT25Q_CMD_WRITE_STATUS_REG = 0x01,
....................     MT25Q_CMD_WRITE_NONVOL_CFG_REG = 0xB1,
....................     MT25Q_CMD_WRITE_VOL_CFG_REG = 0x81,
....................     MT25Q_CMD_WRITE_ENHANCED_VOL_CFG_REG = 0x61,
....................     MT25Q_CMD_WRITE_EXT_ADDR_REG = 0xC5,
.................... 
....................     //CLEAR FLAG STATUS REGISTER Operation
....................     MT25Q_CMD_CLEAR_FLAG_STATUS_REG = 0x50,
.................... 
....................     //PROGRAM Operations
....................     MT25Q_CMD_PAGE_PROGRAM = 0x02,
....................     MT25Q_CMD_DUAL_INPUT_FAST_PROGRAM = 0xA2,
....................     MT25Q_CMD_EXT_DUAL_INPUT_FAST_PROGRAM = 0xD2,
....................     MT25Q_CMD_QUAD_INPUT_FAST_PROGRAM = 0x32,
....................     MT25Q_CMD_EXT_QUAD_INPUT_FAST_PROGRAM = 0x38,
.................... 
....................     //PROGRAM Operations with 4-Byte Address
....................     MT25Q_CMD_4BYTE_PAGE_PROGRAM = 0x12,
....................     MT25Q_CMD_4BYTE_QUAD_INPUT_FAST_PROGRAM = 0x34,
....................     MT25Q_CMD_4BYTE_QUAD_INPUT_EXT_FAST_PROGRAM = 0x3E,
.................... 
....................     //ERASE Operations
....................     MT25Q_CMD_ERASE_32KB_SUBSECTOR = 0x52,
....................     MT25Q_CMD_ERASE_4KB_SUBSECTOR = 0x20,
....................     MT25Q_CMD_ERASE_SECTOR = 0xD8,
....................     MT25Q_CMD_ERASE_BULK = 0xC7,
.................... 
....................     //ERASE Operations with 4-Byte Address
....................     MT25Q_CMD_4BYTE_ERASE_SECTOR = 0xDC,
....................     MT25Q_CMD_4BYTE_ERASE_4KB_SUBSECTOR = 0x21,
....................     
....................     //SUSPEND/RESUME Operations
....................     MT25Q_CMD_PROGRAM_ERASE_SUSPEND = 0x75,
....................     MT25Q_CMD_PROGRAM_ERASE_RESUME = 0x7A,
.................... 
....................     //ONE-WIRE PROGRAMMING Operations
....................     MT25Q_CMD_READ_OPT_ARRAY = 0x4B,
....................     MT25Q_CMD_PROGRAM_OPT_ARRYA = 0x42,
.................... 
....................     //4-BYTE ADDRESSING Operations
....................     MT25Q_CMD_ENTER_4BYTE_ADDR_MODE = 0xB7,
....................     MT25Q_CMD_EXIT_4BYTE_ADDR_MODE = 0xE9,
.................... 
....................     //QUAD PROTOCOL Operations
....................     MT25Q_CMD_ENTER_QUAD_IO_MODE = 0x35,
....................     MT25Q_CMD_RESET_QUAD_IO_MODE = 0xF5,
.................... 
....................     //DEEP POWER-DOWN Operations
....................     MT25Q_CMD_DEEP_POWER_DOWN = 0xB9,
....................     MT25Q_CMD_RELEASE_FROM_DEEP_POWER_DOWN = 0xAB,
.................... 
....................     //ADVANCED PROGRAM/ERASE CONTROLS
....................     MT25Q_CMD_READ_SECTOR_PROTECTION = 0x2D,
....................     MT25Q_CMD_PROGRAM_SECTOR_PROTECTION = 0x2C,
....................     MT25Q_CMD_READ_VOLATILE_LOCK_BITS = 0xE8,
....................     MT25Q_CMD_WRITE_VOLATILE_LOCK_BITS = 0xE5,
....................     MT25Q_CMD_READ_NONVOLATILE_LOCK_BITS = 0xE2,
....................     MT25Q_CMD_WRITE_NONVOLATILE_LOCK_BITS = 0xE3,
....................     MT25Q_CMD_READ_GLOBAL_FREEZE_BIT = 0xA7,
....................     MT25Q_CMD_WRITE_GLOBAL_FREEZE_BIT = 0xA6,
....................     MT25Q_CMD_READ_PASSWORD = 0x27,
....................     MT25Q_CMD_WRITE_PASSWORD = 0x28,
....................     MT25Q_CMD_UNLOCK_PASSWORD = 0x29,
.................... 
....................     //ADVANCED SECTOR PROTECTION Operations
....................     MT25Q_CMD_4BYTE_READ_VOLATILE_LOCK_BITS = 0xE0,
....................     MT25Q_CMD_4BYTE_WRITE_VOLATILE_LOCK_BITS = 0xE1,
.................... 
....................     //ADVANCED FUNCTIONS INTERFACE Operations
....................     MT25Q_CMD_INTERFACE_ACTIVATION = 0x98,
....................     MT25Q_CMD_CYCLIC_REDUNDANCY_CHECK = 0x9B
.................... } mt25q_cmd_t;
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 all;  // 全体アクセス
....................     struct {
....................         unsigned int8 ADDRESSING_4BYTE     : 1; // Bit0
....................         unsigned int8 PROTECTION_ERROR     : 1; // Bit1
....................         unsigned int8 PROGRAM_SUSPEND      : 1; // Bit2
....................         unsigned int8 RESERVED             : 1; // Bit3
....................         unsigned int8 PROGRAM_FAIL         : 1; // Bit4
....................         unsigned int8 ERASE_FAIL           : 1; // Bit5
....................         unsigned int8 ERASE_SUSPEND        : 1; // Bit6
....................         unsigned int8 PROGRAM_OR_ERASE_BUSY: 1; // Bit7
....................     } bit;
.................... } mt25q_sr1_t;
.................... 
.................... typedef enum {
....................     MT25QL64,
....................     MT25QL128,
....................     MT25QL256,
....................     MT25QL512,
....................     MT25QL01G
.................... } mt25q_model_t;
.................... 
.................... 
.................... typedef struct {
....................     mt25q_model_t model;
....................     unsigned int32 size_bytes;
....................     unsigned int32 page_size_bytes;
....................     unsigned int32 sector_size_bytes;
....................     unsigned int32 subsector_32k_size_bytes;
....................     unsigned int32 subsector_4k_size_bytes;
.................... } mt25q_info_t;
.................... 
.................... typedef enum {
....................     MT25Q_FUNC_READ,
....................     MT25Q_FUNC_WRITE,
....................     MT25Q_FUNC_ERASE
.................... } mt25q_func_t;
.................... 
.................... typedef struct {
....................     mt25q_func_t function;
....................     unsigned int32 address;
....................     unsigned int8 *data;
....................     unsigned int32 length;
.................... } mt25q_cmd_param_t;
.................... 
.................... #define MT25Q_CMD_MAX_SIZE 8
.................... typedef struct {
....................     unsigned int8 cmd[MT25Q_CMD_MAX_SIZE];
....................     unsigned int8 cmd_length;
.................... } mt25q_send_cmd_t;
.................... 
.................... // void mt25q_make_cmd(mt25q_info_t *flash_info, mt25q_cmd_param_t *cmd_param, mt25q_send_cmd_t *cmd)
.................... 
.................... 
.................... #endif // DEV
.................... #endif
.................... 
.................... #include "../lib/tool/calc_tools.h"             
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/smf_queue.h"              
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... 
.................... const ADDRESS_AREA_T MISF_ADDRESS_TABLE[FLASH_ID_COUNT] = {
....................     { MISF_CIGS_DATA_TABLE_START,   MISF_CIGS_DATA_TABLE_END,   MISF_CIGS_DATA_TABLE_SIZE },
....................     { MISF_CIGS_PICLOG_START,       MISF_CIGS_PICLOG_END,       MISF_CIGS_PICLOG_SIZE },
....................     { MISF_CIGS_ENVIRO_START,       MISF_CIGS_ENVIRO_END,       MISF_CIGS_ENVIRO_SIZE },
....................     { MISF_CIGS_IV1_HEADER_START,   MISF_CIGS_IV1_HEADER_END,   MISF_CIGS_IV1_HEADER_SIZE },
....................     { MISF_CIGS_IV1_DATA_START,     MISF_CIGS_IV1_DATA_END,     MISF_CIGS_IV1_DATA_SIZE },
....................     { MISF_CIGS_IV2_HEADER_START,   MISF_CIGS_IV2_HEADER_END,   MISF_CIGS_IV2_HEADER_SIZE },
....................     { MISF_CIGS_IV2_DATA_START,     MISF_CIGS_IV2_DATA_END,     MISF_CIGS_IV2_DATA_SIZE }
.................... };
.................... 
.................... FlashCounter_t misf_counter_table[FLASH_ID_COUNT];
.................... FlashCounter_t *misf_counter_table_ptr[FLASH_ID_COUNT] = {&misf_counter_table[0], &misf_counter_table[1], &misf_counter_table[2], &misf_counter_table[3], &misf_counter_table[4], &misf_counter_table[5], &misf_counter_table[6]};
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
03972:  MOVLW  C6
03974:  MOVWF  FF6
03976:  MOVLW  0E
03978:  MOVWF  FF7
0397A:  MOVLW  00
0397C:  MOVWF  FF8
0397E:  CALL   22DC
....................     output_high(MIS_FM_CS);
03982:  MOVLW  FE
03984:  MOVWF  F98
03986:  BSF    F8F.0
....................     output_high(SMF_CS);
03988:  MOVLW  FB
0398A:  MOVWF  F92
0398C:  BSF    F89.2
.................... 
....................     // 接続処理
....................     if (is_connect(mis_fm)) {
0398E:  MOVFF  107,245
03992:  MOVFF  106,244
03996:  MOVFF  105,243
0399A:  MOVFF  104,242
0399E:  CALL   2E12
039A2:  MOVF   01,F
039A4:  BTFSC  FD8.2
039A6:  GOTO   39BE
....................         fprintf(PC, "\t[MIS FM] Connected\r\n");
039AA:  MOVLW  E2
039AC:  MOVWF  FF6
039AE:  MOVLW  0E
039B0:  MOVWF  FF7
039B2:  MOVLW  00
039B4:  MOVWF  FF8
039B6:  CALL   22DC
....................     } else {
039BA:  GOTO   39CE
....................         fprintf(PC, "\t[MIS FM] Not Connected\r\n");
039BE:  MOVLW  F8
039C0:  MOVWF  FF6
039C2:  MOVLW  0E
039C4:  MOVWF  FF7
039C6:  MOVLW  00
039C8:  MOVWF  FF8
039CA:  CALL   22DC
....................     }
....................     if (is_connect(smf)) {
039CE:  MOVFF  10B,245
039D2:  MOVFF  10A,244
039D6:  MOVFF  109,243
039DA:  MOVFF  108,242
039DE:  CALL   2E12
039E2:  MOVF   01,F
039E4:  BTFSC  FD8.2
039E6:  GOTO   39FE
....................         fprintf(PC, "\t[SMF] Connected\r\n");
039EA:  MOVLW  12
039EC:  MOVWF  FF6
039EE:  MOVLW  0F
039F0:  MOVWF  FF7
039F2:  MOVLW  00
039F4:  MOVWF  FF8
039F6:  CALL   22DC
....................     } else {
039FA:  GOTO   3A0E
....................         fprintf(PC, "\t[SMF] Not Connected\r\n");
039FE:  MOVLW  26
03A00:  MOVWF  FF6
03A02:  MOVLW  0F
03A04:  MOVWF  FF7
03A06:  MOVLW  00
03A08:  MOVWF  FF8
03A0A:  CALL   22DC
....................     }
.................... 
....................     //=== MIS_FM カウンタテーブル読出し ===//
....................     FlashData_t read_header;
....................     FlashData_t *read_header_ptr = &read_header;
03A0E:  MOVLW  01
03A10:  MOVLB  2
03A12:  MOVWF  x40
03A14:  SETF   x3F
....................     memset(read_header_ptr, 0x00, sizeof(FlashData_t));
03A16:  MOVFF  240,FEA
03A1A:  MOVFF  23F,FE9
03A1E:  CLRF   00
03A20:  CLRF   02
03A22:  MOVLW  40
03A24:  MOVWF  01
03A26:  MOVLB  0
03A28:  CALL   234C
....................     fprintf(PC, "\t[MIS FM] %08LX\r\n", MISF_ADDRESS_TABLE[FLASH_ID_DATA_TABLE].start);
03A2C:  MOVLW  3E
03A2E:  MOVWF  FF6
03A30:  MOVLW  0F
03A32:  MOVWF  FF7
03A34:  MOVLW  00
03A36:  MOVWF  FF8
03A38:  MOVLW  0A
03A3A:  MOVLB  9
03A3C:  MOVWF  xB3
03A3E:  MOVLB  0
03A40:  CALL   2312
03A44:  MOVLB  9
03A46:  CLRF   xD9
03A48:  MOVLW  37
03A4A:  MOVWF  xDA
03A4C:  MOVLB  0
03A4E:  CALL   2542
03A52:  MOVLB  9
03A54:  CLRF   xD9
03A56:  MOVLW  37
03A58:  MOVWF  xDA
03A5A:  MOVLB  0
03A5C:  CALL   2542
03A60:  MOVLB  9
03A62:  CLRF   xD9
03A64:  MOVLW  37
03A66:  MOVWF  xDA
03A68:  MOVLB  0
03A6A:  CALL   2542
03A6E:  MOVLB  9
03A70:  CLRF   xD9
03A72:  MOVLW  37
03A74:  MOVWF  xDA
03A76:  MOVLB  0
03A78:  CALL   2542
03A7C:  MOVLW  0D
03A7E:  BTFSS  FA6.6
03A80:  GOTO   3A7E
03A84:  MOVLB  E
03A86:  MOVWF  xF9
03A88:  MOVLW  0A
03A8A:  MOVLB  0
03A8C:  BTFSS  FA6.6
03A8E:  GOTO   3A8C
03A92:  MOVLB  E
03A94:  MOVWF  xF9
....................     read_data_bytes(mis_fm, MISF_ADDRESS_TABLE[FLASH_ID_DATA_TABLE].start, read_header_ptr->bytes, PACKET_SIZE);
03A96:  MOVLB  2
03A98:  MOVF   x3F,W
03A9A:  MOVWF  01
03A9C:  MOVF   x40,W
03A9E:  MOVWF  03
03AA0:  MOVF   01,W
03AA2:  MOVWF  x41
03AA4:  MOVFF  03,242
03AA8:  MOVFF  107,ADE
03AAC:  MOVFF  106,ADD
03AB0:  MOVFF  105,ADC
03AB4:  MOVFF  104,ADB
03AB8:  MOVLB  A
03ABA:  CLRF   xE2
03ABC:  CLRF   xE1
03ABE:  CLRF   xE0
03AC0:  CLRF   xDF
03AC2:  MOVFF  242,AE4
03AC6:  MOVFF  241,AE3
03ACA:  CLRF   xE8
03ACC:  CLRF   xE7
03ACE:  CLRF   xE6
03AD0:  MOVLW  40
03AD2:  MOVWF  xE5
03AD4:  MOVLB  0
03AD6:  CALL   2EE0
.................... 
....................     // CRC 検証
....................     if (read_header_ptr->packet.crc != calc_crc8(read_header_ptr->bytes, PACKET_SIZE - 1)) {
03ADA:  MOVLW  3F
03ADC:  MOVLB  2
03ADE:  ADDWF  x3F,W
03AE0:  MOVWF  FE9
03AE2:  MOVLW  00
03AE4:  ADDWFC x40,W
03AE6:  MOVWF  FEA
03AE8:  MOVFF  FEF,241
03AEC:  MOVF   x3F,W
03AEE:  MOVWF  01
03AF0:  MOVF   x40,W
03AF2:  MOVWF  03
03AF4:  MOVF   01,W
03AF6:  MOVWF  x42
03AF8:  MOVFF  03,243
03AFC:  MOVFF  243,ADC
03B00:  MOVFF  242,ADB
03B04:  MOVLW  3F
03B06:  MOVLB  A
03B08:  MOVWF  xDD
03B0A:  MOVLB  0
03B0C:  CALL   30FC
03B10:  MOVF   01,W
03B12:  MOVLB  2
03B14:  SUBWF  x41,W
03B16:  BTFSS  FD8.2
03B18:  BRA    3B20
03B1A:  MOVLB  0
03B1C:  GOTO   3B32
03B20:  MOVLB  0
....................         fprintf(PC, "\t[MIS FM] CRC error -> initialize counters\r\n");
03B22:  MOVLW  50
03B24:  MOVWF  FF6
03B26:  MOVLW  0F
03B28:  MOVWF  FF7
03B2A:  MOVLW  00
03B2C:  MOVWF  FF8
03B2E:  CALL   22DC
....................         
....................     }
....................     misf_counter_table[FLASH_ID_PICLOG]       = read_header_ptr->packet.payload.logdata.piclog;
03B32:  MOVLB  2
03B34:  MOVF   x3F,W
03B36:  MOVWF  FE1
03B38:  MOVF   x40,W
03B3A:  MOVWF  FE2
03B3C:  MOVLW  01
03B3E:  MOVWF  FEA
03B40:  MOVLW  1E
03B42:  MOVWF  FE9
03B44:  MOVLW  0A
03B46:  MOVWF  01
03B48:  MOVLB  0
03B4A:  MOVFF  FE6,FEE
03B4E:  DECFSZ 01,F
03B50:  GOTO   3B4A
....................     misf_counter_table[FLASH_ID_ENVIRONMENT]  = read_header_ptr->packet.payload.logdata.environment;
03B54:  MOVLW  0A
03B56:  MOVLB  2
03B58:  ADDWF  x3F,W
03B5A:  MOVWF  FE1
03B5C:  MOVLW  00
03B5E:  ADDWFC x40,W
03B60:  MOVWF  FE2
03B62:  MOVLW  01
03B64:  MOVWF  FEA
03B66:  MOVLW  28
03B68:  MOVWF  FE9
03B6A:  MOVLW  0A
03B6C:  MOVWF  01
03B6E:  MOVLB  0
03B70:  MOVFF  FE6,FEE
03B74:  DECFSZ 01,F
03B76:  GOTO   3B70
....................     misf_counter_table[FLASH_ID_IV1_HEADER]   = read_header_ptr->packet.payload.logdata.iv1_header;
03B7A:  MOVLW  14
03B7C:  MOVLB  2
03B7E:  ADDWF  x3F,W
03B80:  MOVWF  FE1
03B82:  MOVLW  00
03B84:  ADDWFC x40,W
03B86:  MOVWF  FE2
03B88:  MOVLW  01
03B8A:  MOVWF  FEA
03B8C:  MOVLW  32
03B8E:  MOVWF  FE9
03B90:  MOVLW  0A
03B92:  MOVWF  01
03B94:  MOVLB  0
03B96:  MOVFF  FE6,FEE
03B9A:  DECFSZ 01,F
03B9C:  GOTO   3B96
....................     misf_counter_table[FLASH_ID_IV1_DATA]     = read_header_ptr->packet.payload.logdata.iv1_data;
03BA0:  MOVLW  1E
03BA2:  MOVLB  2
03BA4:  ADDWF  x3F,W
03BA6:  MOVWF  FE1
03BA8:  MOVLW  00
03BAA:  ADDWFC x40,W
03BAC:  MOVWF  FE2
03BAE:  MOVLW  01
03BB0:  MOVWF  FEA
03BB2:  MOVLW  3C
03BB4:  MOVWF  FE9
03BB6:  MOVLW  0A
03BB8:  MOVWF  01
03BBA:  MOVLB  0
03BBC:  MOVFF  FE6,FEE
03BC0:  DECFSZ 01,F
03BC2:  GOTO   3BBC
....................     misf_counter_table[FLASH_ID_IV2_HEADER]   = read_header_ptr->packet.payload.logdata.iv2_header;
03BC6:  MOVLW  28
03BC8:  MOVLB  2
03BCA:  ADDWF  x3F,W
03BCC:  MOVWF  FE1
03BCE:  MOVLW  00
03BD0:  ADDWFC x40,W
03BD2:  MOVWF  FE2
03BD4:  MOVLW  01
03BD6:  MOVWF  FEA
03BD8:  MOVLW  46
03BDA:  MOVWF  FE9
03BDC:  MOVLW  0A
03BDE:  MOVWF  01
03BE0:  MOVLB  0
03BE2:  MOVFF  FE6,FEE
03BE6:  DECFSZ 01,F
03BE8:  GOTO   3BE2
....................     misf_counter_table[FLASH_ID_IV2_DATA]     = read_header_ptr->packet.payload.logdata.iv2_data;
03BEC:  MOVLW  32
03BEE:  MOVLB  2
03BF0:  ADDWF  x3F,W
03BF2:  MOVWF  FE1
03BF4:  MOVLW  00
03BF6:  ADDWFC x40,W
03BF8:  MOVWF  FE2
03BFA:  MOVLW  01
03BFC:  MOVWF  FEA
03BFE:  MOVLW  50
03C00:  MOVWF  FE9
03C02:  MOVLW  0A
03C04:  MOVWF  01
03C06:  MOVLB  0
03C08:  MOVFF  FE6,FEE
03C0C:  DECFSZ 01,F
03C0E:  GOTO   3C08
.................... 
....................     print_misf_address_table();
03C12:  GOTO   3168
.................... 
....................     fprintf(PC, "\tComplete\r\n");
03C16:  MOVLW  7E
03C18:  MOVWF  FF6
03C1A:  MOVLW  0F
03C1C:  MOVWF  FF7
03C1E:  MOVLW  00
03C20:  MOVWF  FF8
03C22:  CALL   22DC
03C26:  RETURN 0
.................... }
.................... 
.................... void print_misf_address_table()
.................... {
....................     fprintf(PC, "\tField\t\tCounterName\tValue\r\n");
*
03168:  MOVLW  8A
0316A:  MOVWF  FF6
0316C:  MOVLW  0F
0316E:  MOVWF  FF7
03170:  MOVLW  00
03172:  MOVWF  FF8
03174:  CALL   22DC
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
03178:  MOVLW  A6
0317A:  MOVWF  FF6
0317C:  MOVLW  0F
0317E:  MOVWF  FF7
03180:  MOVLW  00
03182:  MOVWF  FF8
03184:  CALL   22DC
....................     fprintf(PC, "\tPICLOG\t\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_PICLOG].used_counter);
03188:  MOVLW  D2
0318A:  MOVWF  FF6
0318C:  MOVLW  0F
0318E:  MOVWF  FF7
03190:  MOVLW  00
03192:  MOVWF  FF8
03194:  MOVLW  11
03196:  MOVLB  9
03198:  MOVWF  xB3
0319A:  MOVLB  0
0319C:  CALL   2312
031A0:  MOVFF  121,9D9
031A4:  MOVLW  37
031A6:  MOVLB  9
031A8:  MOVWF  xDA
031AA:  MOVLB  0
031AC:  CALL   2542
031B0:  MOVFF  120,9D9
031B4:  MOVLW  37
031B6:  MOVLB  9
031B8:  MOVWF  xDA
031BA:  MOVLB  0
031BC:  CALL   2542
031C0:  MOVFF  11F,9D9
031C4:  MOVLW  37
031C6:  MOVLB  9
031C8:  MOVWF  xDA
031CA:  MOVLB  0
031CC:  CALL   2542
031D0:  MOVFF  11E,9D9
031D4:  MOVLW  37
031D6:  MOVLB  9
031D8:  MOVWF  xDA
031DA:  MOVLB  0
031DC:  CALL   2542
031E0:  MOVLW  0D
031E2:  BTFSS  FA6.6
031E4:  GOTO   31E2
031E8:  MOVLB  E
031EA:  MOVWF  xF9
031EC:  MOVLW  0A
031EE:  MOVLB  0
031F0:  BTFSS  FA6.6
031F2:  GOTO   31F0
031F6:  MOVLB  E
031F8:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_PICLOG].uncopied_counter);
031FA:  MOVLW  EC
031FC:  MOVWF  FF6
031FE:  MOVLW  0F
03200:  MOVWF  FF7
03202:  MOVLW  00
03204:  MOVWF  FF8
03206:  MOVLW  0E
03208:  MOVLB  9
0320A:  MOVWF  xB3
0320C:  MOVLB  0
0320E:  CALL   2312
03212:  MOVFF  125,9D9
03216:  MOVLW  37
03218:  MOVLB  9
0321A:  MOVWF  xDA
0321C:  MOVLB  0
0321E:  CALL   2542
03222:  MOVFF  124,9D9
03226:  MOVLW  37
03228:  MOVLB  9
0322A:  MOVWF  xDA
0322C:  MOVLB  0
0322E:  CALL   2542
03232:  MOVFF  123,9D9
03236:  MOVLW  37
03238:  MOVLB  9
0323A:  MOVWF  xDA
0323C:  MOVLB  0
0323E:  CALL   2542
03242:  MOVFF  122,9D9
03246:  MOVLW  37
03248:  MOVLB  9
0324A:  MOVWF  xDA
0324C:  MOVLB  0
0324E:  CALL   2542
03252:  MOVLW  0D
03254:  BTFSS  FA6.6
03256:  GOTO   3254
0325A:  MOVLB  E
0325C:  MOVWF  xF9
0325E:  MOVLW  0A
03260:  MOVLB  0
03262:  BTFSS  FA6.6
03264:  GOTO   3262
03268:  MOVLB  E
0326A:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_PICLOG].reserve_counter1,misf_counter_table[FLASH_ID_PICLOG].reserve_counter2);
0326C:  MOVLW  02
0326E:  MOVWF  FF6
03270:  MOVLW  10
03272:  MOVWF  FF7
03274:  MOVLW  00
03276:  MOVWF  FF8
03278:  MOVLW  0E
0327A:  MOVLB  9
0327C:  MOVWF  xB3
0327E:  MOVLB  0
03280:  CALL   2312
03284:  MOVFF  126,9D9
03288:  MOVLW  37
0328A:  MOVLB  9
0328C:  MOVWF  xDA
0328E:  MOVLB  0
03290:  CALL   2542
03294:  MOVLW  14
03296:  MOVWF  FF6
03298:  MOVLW  10
0329A:  MOVWF  FF7
0329C:  MOVLW  00
0329E:  MOVWF  FF8
032A0:  MOVLW  04
032A2:  MOVLB  9
032A4:  MOVWF  xB3
032A6:  MOVLB  0
032A8:  CALL   2312
032AC:  MOVFF  127,9D9
032B0:  MOVLW  37
032B2:  MOVLB  9
032B4:  MOVWF  xDA
032B6:  MOVLB  0
032B8:  CALL   2542
032BC:  MOVLW  0D
032BE:  BTFSS  FA6.6
032C0:  GOTO   32BE
032C4:  MOVLB  E
032C6:  MOVWF  xF9
032C8:  MOVLW  0A
032CA:  MOVLB  0
032CC:  BTFSS  FA6.6
032CE:  GOTO   32CC
032D2:  MOVLB  E
032D4:  MOVWF  xF9
....................     fprintf(PC, "\tENVIRO\t\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_ENVIRONMENT].used_counter);
032D6:  MOVLW  20
032D8:  MOVWF  FF6
032DA:  MOVLW  10
032DC:  MOVWF  FF7
032DE:  MOVLW  00
032E0:  MOVWF  FF8
032E2:  MOVLW  11
032E4:  MOVLB  9
032E6:  MOVWF  xB3
032E8:  MOVLB  0
032EA:  CALL   2312
032EE:  MOVFF  12B,9D9
032F2:  MOVLW  37
032F4:  MOVLB  9
032F6:  MOVWF  xDA
032F8:  MOVLB  0
032FA:  CALL   2542
032FE:  MOVFF  12A,9D9
03302:  MOVLW  37
03304:  MOVLB  9
03306:  MOVWF  xDA
03308:  MOVLB  0
0330A:  CALL   2542
0330E:  MOVFF  129,9D9
03312:  MOVLW  37
03314:  MOVLB  9
03316:  MOVWF  xDA
03318:  MOVLB  0
0331A:  CALL   2542
0331E:  MOVFF  128,9D9
03322:  MOVLW  37
03324:  MOVLB  9
03326:  MOVWF  xDA
03328:  MOVLB  0
0332A:  CALL   2542
0332E:  MOVLW  0D
03330:  BTFSS  FA6.6
03332:  GOTO   3330
03336:  MOVLB  E
03338:  MOVWF  xF9
0333A:  MOVLW  0A
0333C:  MOVLB  0
0333E:  BTFSS  FA6.6
03340:  GOTO   333E
03344:  MOVLB  E
03346:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_ENVIRONMENT].uncopied_counter);
03348:  MOVLW  3A
0334A:  MOVWF  FF6
0334C:  MOVLW  10
0334E:  MOVWF  FF7
03350:  MOVLW  00
03352:  MOVWF  FF8
03354:  MOVLW  0E
03356:  MOVLB  9
03358:  MOVWF  xB3
0335A:  MOVLB  0
0335C:  CALL   2312
03360:  MOVFF  12F,9D9
03364:  MOVLW  37
03366:  MOVLB  9
03368:  MOVWF  xDA
0336A:  MOVLB  0
0336C:  CALL   2542
03370:  MOVFF  12E,9D9
03374:  MOVLW  37
03376:  MOVLB  9
03378:  MOVWF  xDA
0337A:  MOVLB  0
0337C:  CALL   2542
03380:  MOVFF  12D,9D9
03384:  MOVLW  37
03386:  MOVLB  9
03388:  MOVWF  xDA
0338A:  MOVLB  0
0338C:  CALL   2542
03390:  MOVFF  12C,9D9
03394:  MOVLW  37
03396:  MOVLB  9
03398:  MOVWF  xDA
0339A:  MOVLB  0
0339C:  CALL   2542
033A0:  MOVLW  0D
033A2:  BTFSS  FA6.6
033A4:  GOTO   33A2
033A8:  MOVLB  E
033AA:  MOVWF  xF9
033AC:  MOVLW  0A
033AE:  MOVLB  0
033B0:  BTFSS  FA6.6
033B2:  GOTO   33B0
033B6:  MOVLB  E
033B8:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_ENVIRONMENT].reserve_counter1,misf_counter_table[FLASH_ID_ENVIRONMENT].reserve_counter2);
033BA:  MOVLW  50
033BC:  MOVWF  FF6
033BE:  MOVLW  10
033C0:  MOVWF  FF7
033C2:  MOVLW  00
033C4:  MOVWF  FF8
033C6:  MOVLW  0E
033C8:  MOVLB  9
033CA:  MOVWF  xB3
033CC:  MOVLB  0
033CE:  CALL   2312
033D2:  MOVFF  130,9D9
033D6:  MOVLW  37
033D8:  MOVLB  9
033DA:  MOVWF  xDA
033DC:  MOVLB  0
033DE:  CALL   2542
033E2:  MOVLW  62
033E4:  MOVWF  FF6
033E6:  MOVLW  10
033E8:  MOVWF  FF7
033EA:  MOVLW  00
033EC:  MOVWF  FF8
033EE:  MOVLW  04
033F0:  MOVLB  9
033F2:  MOVWF  xB3
033F4:  MOVLB  0
033F6:  CALL   2312
033FA:  MOVFF  131,9D9
033FE:  MOVLW  37
03400:  MOVLB  9
03402:  MOVWF  xDA
03404:  MOVLB  0
03406:  CALL   2542
0340A:  MOVLW  0D
0340C:  BTFSS  FA6.6
0340E:  GOTO   340C
03412:  MOVLB  E
03414:  MOVWF  xF9
03416:  MOVLW  0A
03418:  MOVLB  0
0341A:  BTFSS  FA6.6
0341C:  GOTO   341A
03420:  MOVLB  E
03422:  MOVWF  xF9
....................     fprintf(PC, "\tIV1 HEADER\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_HEADER].used_counter);
03424:  MOVLW  6E
03426:  MOVWF  FF6
03428:  MOVLW  10
0342A:  MOVWF  FF7
0342C:  MOVLW  00
0342E:  MOVWF  FF8
03430:  MOVLW  14
03432:  MOVLB  9
03434:  MOVWF  xB3
03436:  MOVLB  0
03438:  CALL   2312
0343C:  MOVFF  135,9D9
03440:  MOVLW  37
03442:  MOVLB  9
03444:  MOVWF  xDA
03446:  MOVLB  0
03448:  CALL   2542
0344C:  MOVFF  134,9D9
03450:  MOVLW  37
03452:  MOVLB  9
03454:  MOVWF  xDA
03456:  MOVLB  0
03458:  CALL   2542
0345C:  MOVFF  133,9D9
03460:  MOVLW  37
03462:  MOVLB  9
03464:  MOVWF  xDA
03466:  MOVLB  0
03468:  CALL   2542
0346C:  MOVFF  132,9D9
03470:  MOVLW  37
03472:  MOVLB  9
03474:  MOVWF  xDA
03476:  MOVLB  0
03478:  CALL   2542
0347C:  MOVLW  0D
0347E:  BTFSS  FA6.6
03480:  GOTO   347E
03484:  MOVLB  E
03486:  MOVWF  xF9
03488:  MOVLW  0A
0348A:  MOVLB  0
0348C:  BTFSS  FA6.6
0348E:  GOTO   348C
03492:  MOVLB  E
03494:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_HEADER].uncopied_counter);
03496:  MOVLW  8A
03498:  MOVWF  FF6
0349A:  MOVLW  10
0349C:  MOVWF  FF7
0349E:  MOVLW  00
034A0:  MOVWF  FF8
034A2:  MOVLW  0E
034A4:  MOVLB  9
034A6:  MOVWF  xB3
034A8:  MOVLB  0
034AA:  CALL   2312
034AE:  MOVFF  139,9D9
034B2:  MOVLW  37
034B4:  MOVLB  9
034B6:  MOVWF  xDA
034B8:  MOVLB  0
034BA:  CALL   2542
034BE:  MOVFF  138,9D9
034C2:  MOVLW  37
034C4:  MOVLB  9
034C6:  MOVWF  xDA
034C8:  MOVLB  0
034CA:  CALL   2542
034CE:  MOVFF  137,9D9
034D2:  MOVLW  37
034D4:  MOVLB  9
034D6:  MOVWF  xDA
034D8:  MOVLB  0
034DA:  CALL   2542
034DE:  MOVFF  136,9D9
034E2:  MOVLW  37
034E4:  MOVLB  9
034E6:  MOVWF  xDA
034E8:  MOVLB  0
034EA:  CALL   2542
034EE:  MOVLW  0D
034F0:  BTFSS  FA6.6
034F2:  GOTO   34F0
034F6:  MOVLB  E
034F8:  MOVWF  xF9
034FA:  MOVLW  0A
034FC:  MOVLB  0
034FE:  BTFSS  FA6.6
03500:  GOTO   34FE
03504:  MOVLB  E
03506:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV1_HEADER].reserve_counter1,misf_counter_table[FLASH_ID_IV1_HEADER].reserve_counter2);
03508:  MOVLW  A0
0350A:  MOVWF  FF6
0350C:  MOVLW  10
0350E:  MOVWF  FF7
03510:  MOVLW  00
03512:  MOVWF  FF8
03514:  MOVLW  0E
03516:  MOVLB  9
03518:  MOVWF  xB3
0351A:  MOVLB  0
0351C:  CALL   2312
03520:  MOVFF  13A,9D9
03524:  MOVLW  37
03526:  MOVLB  9
03528:  MOVWF  xDA
0352A:  MOVLB  0
0352C:  CALL   2542
03530:  MOVLW  B2
03532:  MOVWF  FF6
03534:  MOVLW  10
03536:  MOVWF  FF7
03538:  MOVLW  00
0353A:  MOVWF  FF8
0353C:  MOVLW  04
0353E:  MOVLB  9
03540:  MOVWF  xB3
03542:  MOVLB  0
03544:  CALL   2312
03548:  MOVFF  13B,9D9
0354C:  MOVLW  37
0354E:  MOVLB  9
03550:  MOVWF  xDA
03552:  MOVLB  0
03554:  CALL   2542
03558:  MOVLW  0D
0355A:  BTFSS  FA6.6
0355C:  GOTO   355A
03560:  MOVLB  E
03562:  MOVWF  xF9
03564:  MOVLW  0A
03566:  MOVLB  0
03568:  BTFSS  FA6.6
0356A:  GOTO   3568
0356E:  MOVLB  E
03570:  MOVWF  xF9
....................     fprintf(PC, "\tIV1 DATA\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_DATA].used_counter);
03572:  MOVLW  BE
03574:  MOVWF  FF6
03576:  MOVLW  10
03578:  MOVWF  FF7
0357A:  MOVLW  00
0357C:  MOVWF  FF8
0357E:  MOVLW  12
03580:  MOVLB  9
03582:  MOVWF  xB3
03584:  MOVLB  0
03586:  CALL   2312
0358A:  MOVFF  13F,9D9
0358E:  MOVLW  37
03590:  MOVLB  9
03592:  MOVWF  xDA
03594:  MOVLB  0
03596:  CALL   2542
0359A:  MOVFF  13E,9D9
0359E:  MOVLW  37
035A0:  MOVLB  9
035A2:  MOVWF  xDA
035A4:  MOVLB  0
035A6:  CALL   2542
035AA:  MOVFF  13D,9D9
035AE:  MOVLW  37
035B0:  MOVLB  9
035B2:  MOVWF  xDA
035B4:  MOVLB  0
035B6:  CALL   2542
035BA:  MOVFF  13C,9D9
035BE:  MOVLW  37
035C0:  MOVLB  9
035C2:  MOVWF  xDA
035C4:  MOVLB  0
035C6:  CALL   2542
035CA:  MOVLW  0D
035CC:  BTFSS  FA6.6
035CE:  GOTO   35CC
035D2:  MOVLB  E
035D4:  MOVWF  xF9
035D6:  MOVLW  0A
035D8:  MOVLB  0
035DA:  BTFSS  FA6.6
035DC:  GOTO   35DA
035E0:  MOVLB  E
035E2:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_DATA].uncopied_counter);
035E4:  MOVLW  D8
035E6:  MOVWF  FF6
035E8:  MOVLW  10
035EA:  MOVWF  FF7
035EC:  MOVLW  00
035EE:  MOVWF  FF8
035F0:  MOVLW  0E
035F2:  MOVLB  9
035F4:  MOVWF  xB3
035F6:  MOVLB  0
035F8:  CALL   2312
035FC:  MOVFF  143,9D9
03600:  MOVLW  37
03602:  MOVLB  9
03604:  MOVWF  xDA
03606:  MOVLB  0
03608:  CALL   2542
0360C:  MOVFF  142,9D9
03610:  MOVLW  37
03612:  MOVLB  9
03614:  MOVWF  xDA
03616:  MOVLB  0
03618:  CALL   2542
0361C:  MOVFF  141,9D9
03620:  MOVLW  37
03622:  MOVLB  9
03624:  MOVWF  xDA
03626:  MOVLB  0
03628:  CALL   2542
0362C:  MOVFF  140,9D9
03630:  MOVLW  37
03632:  MOVLB  9
03634:  MOVWF  xDA
03636:  MOVLB  0
03638:  CALL   2542
0363C:  MOVLW  0D
0363E:  BTFSS  FA6.6
03640:  GOTO   363E
03644:  MOVLB  E
03646:  MOVWF  xF9
03648:  MOVLW  0A
0364A:  MOVLB  0
0364C:  BTFSS  FA6.6
0364E:  GOTO   364C
03652:  MOVLB  E
03654:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV1_DATA].reserve_counter1,misf_counter_table[FLASH_ID_IV1_DATA].reserve_counter2);
03656:  MOVLW  EE
03658:  MOVWF  FF6
0365A:  MOVLW  10
0365C:  MOVWF  FF7
0365E:  MOVLW  00
03660:  MOVWF  FF8
03662:  MOVLW  0E
03664:  MOVLB  9
03666:  MOVWF  xB3
03668:  MOVLB  0
0366A:  CALL   2312
0366E:  MOVFF  144,9D9
03672:  MOVLW  37
03674:  MOVLB  9
03676:  MOVWF  xDA
03678:  MOVLB  0
0367A:  CALL   2542
0367E:  MOVLW  00
03680:  MOVWF  FF6
03682:  MOVLW  11
03684:  MOVWF  FF7
03686:  MOVLW  00
03688:  MOVWF  FF8
0368A:  MOVLW  04
0368C:  MOVLB  9
0368E:  MOVWF  xB3
03690:  MOVLB  0
03692:  CALL   2312
03696:  MOVFF  145,9D9
0369A:  MOVLW  37
0369C:  MOVLB  9
0369E:  MOVWF  xDA
036A0:  MOVLB  0
036A2:  CALL   2542
036A6:  MOVLW  0D
036A8:  BTFSS  FA6.6
036AA:  GOTO   36A8
036AE:  MOVLB  E
036B0:  MOVWF  xF9
036B2:  MOVLW  0A
036B4:  MOVLB  0
036B6:  BTFSS  FA6.6
036B8:  GOTO   36B6
036BC:  MOVLB  E
036BE:  MOVWF  xF9
....................     fprintf(PC, "\tIV2 HEADER\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_HEADER].used_counter);
036C0:  MOVLW  0C
036C2:  MOVWF  FF6
036C4:  MOVLW  11
036C6:  MOVWF  FF7
036C8:  MOVLW  00
036CA:  MOVWF  FF8
036CC:  MOVLW  14
036CE:  MOVLB  9
036D0:  MOVWF  xB3
036D2:  MOVLB  0
036D4:  CALL   2312
036D8:  MOVFF  149,9D9
036DC:  MOVLW  37
036DE:  MOVLB  9
036E0:  MOVWF  xDA
036E2:  MOVLB  0
036E4:  CALL   2542
036E8:  MOVFF  148,9D9
036EC:  MOVLW  37
036EE:  MOVLB  9
036F0:  MOVWF  xDA
036F2:  MOVLB  0
036F4:  CALL   2542
036F8:  MOVFF  147,9D9
036FC:  MOVLW  37
036FE:  MOVLB  9
03700:  MOVWF  xDA
03702:  MOVLB  0
03704:  CALL   2542
03708:  MOVFF  146,9D9
0370C:  MOVLW  37
0370E:  MOVLB  9
03710:  MOVWF  xDA
03712:  MOVLB  0
03714:  CALL   2542
03718:  MOVLW  0D
0371A:  BTFSS  FA6.6
0371C:  GOTO   371A
03720:  MOVLB  E
03722:  MOVWF  xF9
03724:  MOVLW  0A
03726:  MOVLB  0
03728:  BTFSS  FA6.6
0372A:  GOTO   3728
0372E:  MOVLB  E
03730:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_HEADER].uncopied_counter);
03732:  MOVLW  28
03734:  MOVWF  FF6
03736:  MOVLW  11
03738:  MOVWF  FF7
0373A:  MOVLW  00
0373C:  MOVWF  FF8
0373E:  MOVLW  0E
03740:  MOVLB  9
03742:  MOVWF  xB3
03744:  MOVLB  0
03746:  CALL   2312
0374A:  MOVFF  14D,9D9
0374E:  MOVLW  37
03750:  MOVLB  9
03752:  MOVWF  xDA
03754:  MOVLB  0
03756:  CALL   2542
0375A:  MOVFF  14C,9D9
0375E:  MOVLW  37
03760:  MOVLB  9
03762:  MOVWF  xDA
03764:  MOVLB  0
03766:  CALL   2542
0376A:  MOVFF  14B,9D9
0376E:  MOVLW  37
03770:  MOVLB  9
03772:  MOVWF  xDA
03774:  MOVLB  0
03776:  CALL   2542
0377A:  MOVFF  14A,9D9
0377E:  MOVLW  37
03780:  MOVLB  9
03782:  MOVWF  xDA
03784:  MOVLB  0
03786:  CALL   2542
0378A:  MOVLW  0D
0378C:  BTFSS  FA6.6
0378E:  GOTO   378C
03792:  MOVLB  E
03794:  MOVWF  xF9
03796:  MOVLW  0A
03798:  MOVLB  0
0379A:  BTFSS  FA6.6
0379C:  GOTO   379A
037A0:  MOVLB  E
037A2:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV2_HEADER].reserve_counter1,misf_counter_table[FLASH_ID_IV2_HEADER].reserve_counter2);
037A4:  MOVLW  3E
037A6:  MOVWF  FF6
037A8:  MOVLW  11
037AA:  MOVWF  FF7
037AC:  MOVLW  00
037AE:  MOVWF  FF8
037B0:  MOVLW  0E
037B2:  MOVLB  9
037B4:  MOVWF  xB3
037B6:  MOVLB  0
037B8:  CALL   2312
037BC:  MOVFF  14E,9D9
037C0:  MOVLW  37
037C2:  MOVLB  9
037C4:  MOVWF  xDA
037C6:  MOVLB  0
037C8:  CALL   2542
037CC:  MOVLW  50
037CE:  MOVWF  FF6
037D0:  MOVLW  11
037D2:  MOVWF  FF7
037D4:  MOVLW  00
037D6:  MOVWF  FF8
037D8:  MOVLW  04
037DA:  MOVLB  9
037DC:  MOVWF  xB3
037DE:  MOVLB  0
037E0:  CALL   2312
037E4:  MOVFF  14F,9D9
037E8:  MOVLW  37
037EA:  MOVLB  9
037EC:  MOVWF  xDA
037EE:  MOVLB  0
037F0:  CALL   2542
037F4:  MOVLW  0D
037F6:  BTFSS  FA6.6
037F8:  GOTO   37F6
037FC:  MOVLB  E
037FE:  MOVWF  xF9
03800:  MOVLW  0A
03802:  MOVLB  0
03804:  BTFSS  FA6.6
03806:  GOTO   3804
0380A:  MOVLB  E
0380C:  MOVWF  xF9
....................     fprintf(PC, "\tIV2 DATA\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_DATA].used_counter);
0380E:  MOVLW  5C
03810:  MOVWF  FF6
03812:  MOVLW  11
03814:  MOVWF  FF7
03816:  MOVLW  00
03818:  MOVWF  FF8
0381A:  MOVLW  12
0381C:  MOVLB  9
0381E:  MOVWF  xB3
03820:  MOVLB  0
03822:  CALL   2312
03826:  MOVFF  153,9D9
0382A:  MOVLW  37
0382C:  MOVLB  9
0382E:  MOVWF  xDA
03830:  MOVLB  0
03832:  CALL   2542
03836:  MOVFF  152,9D9
0383A:  MOVLW  37
0383C:  MOVLB  9
0383E:  MOVWF  xDA
03840:  MOVLB  0
03842:  CALL   2542
03846:  MOVFF  151,9D9
0384A:  MOVLW  37
0384C:  MOVLB  9
0384E:  MOVWF  xDA
03850:  MOVLB  0
03852:  CALL   2542
03856:  MOVFF  150,9D9
0385A:  MOVLW  37
0385C:  MOVLB  9
0385E:  MOVWF  xDA
03860:  MOVLB  0
03862:  CALL   2542
03866:  MOVLW  0D
03868:  BTFSS  FA6.6
0386A:  GOTO   3868
0386E:  MOVLB  E
03870:  MOVWF  xF9
03872:  MOVLW  0A
03874:  MOVLB  0
03876:  BTFSS  FA6.6
03878:  GOTO   3876
0387C:  MOVLB  E
0387E:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_DATA].uncopied_counter);
03880:  MOVLW  76
03882:  MOVWF  FF6
03884:  MOVLW  11
03886:  MOVWF  FF7
03888:  MOVLW  00
0388A:  MOVWF  FF8
0388C:  MOVLW  0E
0388E:  MOVLB  9
03890:  MOVWF  xB3
03892:  MOVLB  0
03894:  CALL   2312
03898:  MOVFF  157,9D9
0389C:  MOVLW  37
0389E:  MOVLB  9
038A0:  MOVWF  xDA
038A2:  MOVLB  0
038A4:  CALL   2542
038A8:  MOVFF  156,9D9
038AC:  MOVLW  37
038AE:  MOVLB  9
038B0:  MOVWF  xDA
038B2:  MOVLB  0
038B4:  CALL   2542
038B8:  MOVFF  155,9D9
038BC:  MOVLW  37
038BE:  MOVLB  9
038C0:  MOVWF  xDA
038C2:  MOVLB  0
038C4:  CALL   2542
038C8:  MOVFF  154,9D9
038CC:  MOVLW  37
038CE:  MOVLB  9
038D0:  MOVWF  xDA
038D2:  MOVLB  0
038D4:  CALL   2542
038D8:  MOVLW  0D
038DA:  BTFSS  FA6.6
038DC:  GOTO   38DA
038E0:  MOVLB  E
038E2:  MOVWF  xF9
038E4:  MOVLW  0A
038E6:  MOVLB  0
038E8:  BTFSS  FA6.6
038EA:  GOTO   38E8
038EE:  MOVLB  E
038F0:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV2_DATA].reserve_counter1,misf_counter_table[FLASH_ID_IV2_DATA].reserve_counter2);
038F2:  MOVLW  8C
038F4:  MOVWF  FF6
038F6:  MOVLW  11
038F8:  MOVWF  FF7
038FA:  MOVLW  00
038FC:  MOVWF  FF8
038FE:  MOVLW  0E
03900:  MOVLB  9
03902:  MOVWF  xB3
03904:  MOVLB  0
03906:  CALL   2312
0390A:  MOVFF  158,9D9
0390E:  MOVLW  37
03910:  MOVLB  9
03912:  MOVWF  xDA
03914:  MOVLB  0
03916:  CALL   2542
0391A:  MOVLW  9E
0391C:  MOVWF  FF6
0391E:  MOVLW  11
03920:  MOVWF  FF7
03922:  MOVLW  00
03924:  MOVWF  FF8
03926:  MOVLW  04
03928:  MOVLB  9
0392A:  MOVWF  xB3
0392C:  MOVLB  0
0392E:  CALL   2312
03932:  MOVFF  159,9D9
03936:  MOVLW  37
03938:  MOVLB  9
0393A:  MOVWF  xDA
0393C:  MOVLB  0
0393E:  CALL   2542
03942:  MOVLW  0D
03944:  BTFSS  FA6.6
03946:  GOTO   3944
0394A:  MOVLB  E
0394C:  MOVWF  xF9
0394E:  MOVLW  0A
03950:  MOVLB  0
03952:  BTFSS  FA6.6
03954:  GOTO   3952
03958:  MOVLB  E
0395A:  MOVWF  xF9
....................     fprintf(PC, "\t==================================================\r\n");
0395C:  MOVLW  AA
0395E:  MOVWF  FF6
03960:  MOVLW  11
03962:  MOVWF  FF7
03964:  MOVLW  00
03966:  MOVWF  FF8
03968:  MOVLB  0
0396A:  CALL   22DC
0396E:  GOTO   3C16 (RETURN)
.................... }
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size)
.................... {
....................     /*
....................     fprintf(PC, "[MIS FM] Write Data Size:%lu\r\n", size);
....................     fprintf(PC, "%08LX\r\n", MISF_ADDRESS_TABLE[id].start);
....................     fprintf(PC, "%08LX\r\n", misf_counter_table[id].used_counter);
....................     fprintf(PC, "%08LX\r\n", misf_counter_table[id].reserve_counter1);
....................     for (unsigned int32 j = 0; j < size; j++) {
....................         fprintf(PC, "%02X ", data_ptr[j]);
....................     }
....................     fprintf(PC, "\r\n");
....................     */
....................     // パケット境界チェック
....................     if (size == PACKET_SIZE){
*
042BA:  MOVLB  A
042BC:  MOVF   x43,W
042BE:  SUBLW  40
042C0:  BTFSC  FD8.2
042C2:  BRA    42CA
042C4:  MOVLB  0
042C6:  GOTO   4440
042CA:  MOVLB  0
042CC:  MOVLB  A
042CE:  MOVF   x44,F
042D0:  BTFSC  FD8.2
042D2:  BRA    42DA
042D4:  MOVLB  0
042D6:  GOTO   4440
042DA:  MOVLB  0
....................         // fprintf(PC, "PACKET SIZE 64\r\n");
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
042DC:  MOVLB  A
042DE:  MOVF   x40,W
042E0:  MULLW  0C
042E2:  MOVF   FF3,W
042E4:  CLRF   xDC
042E6:  MOVWF  xDB
042E8:  MOVFF  ADC,03
042EC:  MOVF   xDB,W
042EE:  MOVLB  0
042F0:  CALL   00E6
042F4:  MOVWF  00
042F6:  TBLRD*+
042F8:  MOVFF  FF5,01
042FC:  TBLRD*+
042FE:  MOVFF  FF5,02
04302:  TBLRD*+
04304:  MOVFF  FF5,03
04308:  MOVFF  03,AE0
0430C:  MOVFF  02,ADF
04310:  MOVFF  01,ADE
04314:  MOVFF  00,ADD
04318:  MOVLB  A
0431A:  MOVF   x40,W
0431C:  MULLW  0A
0431E:  MOVF   FF3,W
04320:  CLRF   xE2
04322:  MOVWF  xE1
04324:  MOVLW  14
04326:  ADDWF  xE1,W
04328:  MOVWF  FE9
0432A:  MOVLW  01
0432C:  ADDWFC xE2,W
0432E:  MOVWF  FEA
04330:  MOVFF  FEF,00
04334:  MOVFF  FEC,01
04338:  MOVFF  FEC,02
0433C:  MOVFF  FEC,03
04340:  MOVF   FED,F
04342:  MOVF   FED,F
04344:  MOVF   FED,F
04346:  MOVF   00,W
04348:  ADDWF  xDD,W
0434A:  MOVWF  x45
0434C:  MOVF   01,W
0434E:  ADDWFC xDE,W
04350:  MOVWF  x46
04352:  MOVF   02,W
04354:  ADDWFC xDF,W
04356:  MOVWF  x47
04358:  MOVF   03,W
0435A:  ADDWFC xE0,W
0435C:  MOVWF  x48
0435E:  MOVLB  0
....................         write_data_bytes(mis_fm, write_address, data_ptr, size);
04360:  MOVFF  107,ADE
04364:  MOVFF  106,ADD
04368:  MOVFF  105,ADC
0436C:  MOVFF  104,ADB
04370:  MOVFF  A48,AE2
04374:  MOVFF  A47,AE1
04378:  MOVFF  A46,AE0
0437C:  MOVFF  A45,ADF
04380:  MOVFF  A42,AE4
04384:  MOVFF  A41,AE3
04388:  MOVFF  A44,AE6
0438C:  MOVFF  A43,AE5
04390:  CALL   3F6E
....................         // for (unsigned int32 j = 0; j < size; j++) {
....................             // fprintf(PC, "%02X ", data_ptr[j]);
....................         // }
....................         misf_counter_table[id].used_counter     += size;
04394:  MOVLB  A
04396:  MOVF   x40,W
04398:  MULLW  0A
0439A:  MOVF   FF3,W
0439C:  CLRF   xDC
0439E:  MOVWF  xDB
043A0:  MOVLW  14
043A2:  ADDWF  xDB,W
043A4:  MOVWF  FE9
043A6:  MOVLW  01
043A8:  ADDWFC xDC,W
043AA:  MOVWF  FEA
043AC:  MOVF   x43,W
043AE:  ADDWF  FEF,W
043B0:  MOVWF  00
043B2:  MOVF   x44,W
043B4:  ADDWFC FEC,W
043B6:  MOVWF  01
043B8:  MOVLW  00
043BA:  ADDWFC FEC,W
043BC:  MOVWF  02
043BE:  MOVLW  00
043C0:  ADDWFC FEC,W
043C2:  MOVWF  03
043C4:  MOVF   FED,F
043C6:  MOVF   FED,F
043C8:  MOVF   FED,F
043CA:  MOVFF  00,FEF
043CE:  MOVFF  01,FEC
043D2:  MOVFF  02,FEC
043D6:  MOVFF  03,FEC
043DA:  MOVF   FED,F
043DC:  MOVF   FED,F
043DE:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += size;
043E0:  MOVF   x40,W
043E2:  MULLW  0A
043E4:  MOVF   FF3,W
043E6:  CLRF   xDC
043E8:  MOVWF  xDB
043EA:  MOVLW  04
043EC:  ADDWF  xDB,W
043EE:  MOVWF  01
043F0:  MOVLW  00
043F2:  ADDWFC xDC,W
043F4:  MOVWF  03
043F6:  MOVF   01,W
043F8:  ADDLW  14
043FA:  MOVWF  FE9
043FC:  MOVLW  01
043FE:  ADDWFC 03,W
04400:  MOVWF  FEA
04402:  MOVF   x43,W
04404:  ADDWF  FEF,W
04406:  MOVWF  00
04408:  MOVF   x44,W
0440A:  ADDWFC FEC,W
0440C:  MOVWF  01
0440E:  MOVLW  00
04410:  ADDWFC FEC,W
04412:  MOVWF  02
04414:  MOVLW  00
04416:  ADDWFC FEC,W
04418:  MOVWF  03
0441A:  MOVF   FED,F
0441C:  MOVF   FED,F
0441E:  MOVF   FED,F
04420:  MOVFF  00,FEF
04424:  MOVFF  01,FEC
04428:  MOVFF  02,FEC
0442C:  MOVFF  03,FEC
04430:  MOVF   FED,F
04432:  MOVF   FED,F
04434:  MOVF   FED,F
.................... 
....................         return;
04436:  MOVLB  0
04438:  GOTO   4C04
....................     }
0443C:  GOTO   4A76
....................     
....................     else if (misf_counter_table[id].reserve_counter1 + size == PACKET_SIZE-1) {
04440:  MOVLB  A
04442:  MOVF   x40,W
04444:  MULLW  0A
04446:  MOVF   FF3,W
04448:  CLRF   xDC
0444A:  MOVWF  xDB
0444C:  MOVLW  08
0444E:  ADDWF  xDB,W
04450:  MOVWF  01
04452:  MOVLW  00
04454:  ADDWFC xDC,W
04456:  MOVWF  03
04458:  MOVF   01,W
0445A:  ADDLW  14
0445C:  MOVWF  FE9
0445E:  MOVLW  01
04460:  ADDWFC 03,W
04462:  MOVWF  FEA
04464:  MOVF   FEF,W
04466:  ADDWF  x43,W
04468:  MOVWF  xDB
0446A:  MOVLW  00
0446C:  ADDWFC x44,W
0446E:  MOVWF  xDC
04470:  MOVF   xDB,W
04472:  SUBLW  3F
04474:  BTFSC  FD8.2
04476:  BRA    447E
04478:  MOVLB  0
0447A:  GOTO   4734
0447E:  MOVLB  0
04480:  MOVLB  A
04482:  MOVF   xDC,F
04484:  BTFSC  FD8.2
04486:  BRA    448E
04488:  MOVLB  0
0448A:  GOTO   4734
0448E:  MOVLB  0
....................         unsigned int8 blank_size = PACKET_SIZE - 1 - misf_counter_table[id].reserve_counter1;
....................         // fprintf(PC, "0x%02X", blank_size);
....................         unsigned int8 blank_data[PACKET_SIZE];
04490:  MOVLB  A
04492:  MOVF   x40,W
04494:  MULLW  0A
04496:  MOVF   FF3,W
04498:  CLRF   xDC
0449A:  MOVWF  xDB
0449C:  MOVLW  08
0449E:  ADDWF  xDB,W
044A0:  MOVWF  01
044A2:  MOVLW  00
044A4:  ADDWFC xDC,W
044A6:  MOVWF  03
044A8:  MOVF   01,W
044AA:  ADDLW  14
044AC:  MOVWF  FE9
044AE:  MOVLW  01
044B0:  ADDWFC 03,W
044B2:  MOVWF  FEA
044B4:  MOVF   FEF,W
044B6:  XORLW  FF
044B8:  ADDLW  40
044BA:  MOVWF  x49
044BC:  MOVLB  0
....................         memset(blank_data, 0, blank_size);
044BE:  MOVLW  0A
044C0:  MOVWF  FEA
044C2:  MOVLW  4A
044C4:  MOVWF  FE9
044C6:  CLRF   00
044C8:  CLRF   02
044CA:  MOVFF  A49,01
044CE:  CALL   234C
.................... 
....................         // アドレス再計算
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
044D2:  MOVLB  A
044D4:  MOVF   x40,W
044D6:  MULLW  0C
044D8:  MOVF   FF3,W
044DA:  CLRF   xDC
044DC:  MOVWF  xDB
044DE:  MOVFF  ADC,03
044E2:  MOVF   xDB,W
044E4:  MOVLB  0
044E6:  CALL   00E6
044EA:  MOVWF  00
044EC:  TBLRD*+
044EE:  MOVFF  FF5,01
044F2:  TBLRD*+
044F4:  MOVFF  FF5,02
044F8:  TBLRD*+
044FA:  MOVFF  FF5,03
044FE:  MOVFF  03,AE0
04502:  MOVFF  02,ADF
04506:  MOVFF  01,ADE
0450A:  MOVFF  00,ADD
0450E:  MOVLB  A
04510:  MOVF   x40,W
04512:  MULLW  0A
04514:  MOVF   FF3,W
04516:  CLRF   xE2
04518:  MOVWF  xE1
0451A:  MOVLW  14
0451C:  ADDWF  xE1,W
0451E:  MOVWF  FE9
04520:  MOVLW  01
04522:  ADDWFC xE2,W
04524:  MOVWF  FEA
04526:  MOVFF  FEF,00
0452A:  MOVFF  FEC,01
0452E:  MOVFF  FEC,02
04532:  MOVFF  FEC,03
04536:  MOVF   FED,F
04538:  MOVF   FED,F
0453A:  MOVF   FED,F
0453C:  MOVF   00,W
0453E:  ADDWF  xDD,W
04540:  MOVWF  x8A
04542:  MOVF   01,W
04544:  ADDWFC xDE,W
04546:  MOVWF  x8B
04548:  MOVF   02,W
0454A:  ADDWFC xDF,W
0454C:  MOVWF  x8C
0454E:  MOVF   03,W
04550:  ADDWFC xE0,W
04552:  MOVWF  x8D
.................... 
....................         // 未使用部分を 0 埋め
....................         write_data_bytes(mis_fm, write_address, blank_data, blank_size);
04554:  MOVFF  107,ADE
04558:  MOVFF  106,ADD
0455C:  MOVFF  105,ADC
04560:  MOVFF  104,ADB
04564:  MOVFF  A8D,AE2
04568:  MOVFF  A8C,AE1
0456C:  MOVFF  A8B,AE0
04570:  MOVFF  A8A,ADF
04574:  MOVLW  0A
04576:  MOVWF  xE4
04578:  MOVLW  4A
0457A:  MOVWF  xE3
0457C:  CLRF   xE6
0457E:  MOVFF  A49,AE5
04582:  MOVLB  0
04584:  CALL   3F6E
.................... 
....................         // CRC 計算（本体部分だけ読む）
....................         unsigned int8 packet_data[PACKET_SIZE - 1];
....................         unsigned int32 read_address = write_address + blank_size - PACKET_SIZE - 1;
04588:  MOVLB  A
0458A:  MOVF   x49,W
0458C:  ADDWF  x8A,W
0458E:  MOVWF  xDB
04590:  MOVLW  00
04592:  ADDWFC x8B,W
04594:  MOVWF  xDC
04596:  MOVLW  00
04598:  ADDWFC x8C,W
0459A:  MOVWF  xDD
0459C:  MOVLW  00
0459E:  ADDWFC x8D,W
045A0:  MOVWF  xDE
045A2:  MOVLW  40
045A4:  SUBWF  xDB,F
045A6:  MOVLW  00
045A8:  SUBWFB xDC,F
045AA:  MOVLW  00
045AC:  SUBWFB xDD,F
045AE:  MOVLW  00
045B0:  SUBWFB xDE,F
045B2:  MOVLW  01
045B4:  SUBWF  xDB,W
045B6:  MOVWF  xCD
045B8:  MOVLW  00
045BA:  SUBWFB xDC,W
045BC:  MOVWF  xCE
045BE:  MOVLW  00
045C0:  SUBWFB xDD,W
045C2:  MOVWF  xCF
045C4:  MOVLW  00
045C6:  SUBWFB xDE,W
045C8:  MOVWF  xD0
....................         read_data_bytes(mis_fm, read_address, packet_data, PACKET_SIZE - 1);
045CA:  MOVFF  107,ADE
045CE:  MOVFF  106,ADD
045D2:  MOVFF  105,ADC
045D6:  MOVFF  104,ADB
045DA:  MOVFF  AD0,AE2
045DE:  MOVFF  ACF,AE1
045E2:  MOVFF  ACE,AE0
045E6:  MOVFF  ACD,ADF
045EA:  MOVLW  0A
045EC:  MOVWF  xE4
045EE:  MOVLW  8E
045F0:  MOVWF  xE3
045F2:  CLRF   xE8
045F4:  CLRF   xE7
045F6:  CLRF   xE6
045F8:  MOVLW  3F
045FA:  MOVWF  xE5
045FC:  MOVLB  0
045FE:  CALL   2EE0
....................         unsigned int8 crc = calc_crc8(packet_data, PACKET_SIZE - 1);
04602:  MOVLW  0A
04604:  MOVLB  A
04606:  MOVWF  xDC
04608:  MOVLW  8E
0460A:  MOVWF  xDB
0460C:  MOVLW  3F
0460E:  MOVWF  xDD
04610:  MOVLB  0
04612:  CALL   30FC
04616:  MOVFF  01,AD1
....................         // fprintf(PC, "0x%02X", crc);
....................         // CRC 書き込み
....................         write_address += blank_size;
0461A:  MOVLB  A
0461C:  MOVF   x49,W
0461E:  ADDWF  x8A,F
04620:  MOVLW  00
04622:  ADDWFC x8B,F
04624:  MOVLW  00
04626:  ADDWFC x8C,F
04628:  MOVLW  00
0462A:  ADDWFC x8D,F
....................         write_data_bytes(mis_fm, write_address, &crc, 1);
0462C:  MOVFF  107,ADE
04630:  MOVFF  106,ADD
04634:  MOVFF  105,ADC
04638:  MOVFF  104,ADB
0463C:  MOVFF  A8D,AE2
04640:  MOVFF  A8C,AE1
04644:  MOVFF  A8B,AE0
04648:  MOVFF  A8A,ADF
0464C:  MOVLW  0A
0464E:  MOVWF  xE4
04650:  MOVLW  D1
04652:  MOVWF  xE3
04654:  CLRF   xE6
04656:  MOVLW  01
04658:  MOVWF  xE5
0465A:  MOVLB  0
0465C:  CALL   3F6E
.................... 
....................         // カウンタ更新
....................         misf_counter_table[id].used_counter     += blank_size + 1;
04660:  MOVLB  A
04662:  MOVF   x40,W
04664:  MULLW  0A
04666:  MOVF   FF3,W
04668:  CLRF   xDC
0466A:  MOVWF  xDB
0466C:  MOVLW  14
0466E:  ADDWF  xDB,W
04670:  MOVWF  FE9
04672:  MOVLW  01
04674:  ADDWFC xDC,W
04676:  MOVWF  FEA
04678:  MOVLW  01
0467A:  ADDWF  x49,W
0467C:  ADDWF  FEF,W
0467E:  MOVWF  00
04680:  MOVLW  00
04682:  ADDWFC FEC,W
04684:  MOVWF  01
04686:  MOVLW  00
04688:  ADDWFC FEC,W
0468A:  MOVWF  02
0468C:  MOVLW  00
0468E:  ADDWFC FEC,W
04690:  MOVWF  03
04692:  MOVF   FED,F
04694:  MOVF   FED,F
04696:  MOVF   FED,F
04698:  MOVFF  00,FEF
0469C:  MOVFF  01,FEC
046A0:  MOVFF  02,FEC
046A4:  MOVFF  03,FEC
046A8:  MOVF   FED,F
046AA:  MOVF   FED,F
046AC:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += blank_size + 1;
046AE:  MOVF   x40,W
046B0:  MULLW  0A
046B2:  MOVF   FF3,W
046B4:  CLRF   xDC
046B6:  MOVWF  xDB
046B8:  MOVLW  04
046BA:  ADDWF  xDB,W
046BC:  MOVWF  01
046BE:  MOVLW  00
046C0:  ADDWFC xDC,W
046C2:  MOVWF  03
046C4:  MOVF   01,W
046C6:  ADDLW  14
046C8:  MOVWF  FE9
046CA:  MOVLW  01
046CC:  ADDWFC 03,W
046CE:  MOVWF  FEA
046D0:  MOVLW  01
046D2:  ADDWF  x49,W
046D4:  ADDWF  FEF,W
046D6:  MOVWF  00
046D8:  MOVLW  00
046DA:  ADDWFC FEC,W
046DC:  MOVWF  01
046DE:  MOVLW  00
046E0:  ADDWFC FEC,W
046E2:  MOVWF  02
046E4:  MOVLW  00
046E6:  ADDWFC FEC,W
046E8:  MOVWF  03
046EA:  MOVF   FED,F
046EC:  MOVF   FED,F
046EE:  MOVF   FED,F
046F0:  MOVFF  00,FEF
046F4:  MOVFF  01,FEC
046F8:  MOVFF  02,FEC
046FC:  MOVFF  03,FEC
04700:  MOVF   FED,F
04702:  MOVF   FED,F
04704:  MOVF   FED,F
....................         misf_counter_table[id].reserve_counter1  = 0;
04706:  MOVF   x40,W
04708:  MULLW  0A
0470A:  MOVF   FF3,W
0470C:  CLRF   xDC
0470E:  MOVWF  xDB
04710:  MOVLW  08
04712:  ADDWF  xDB,W
04714:  MOVWF  01
04716:  MOVLW  00
04718:  ADDWFC xDC,W
0471A:  MOVWF  03
0471C:  MOVF   01,W
0471E:  ADDLW  14
04720:  MOVWF  FE9
04722:  MOVLW  01
04724:  ADDWFC 03,W
04726:  MOVWF  FEA
04728:  CLRF   FEF
....................         return;
0472A:  MOVLB  0
0472C:  GOTO   4C04
.................... 
....................     }else  if(misf_counter_table[id].reserve_counter1 + size == PACKET_SIZE-1){
04730:  GOTO   4A76
04734:  MOVLB  A
04736:  MOVF   x40,W
04738:  MULLW  0A
0473A:  MOVF   FF3,W
0473C:  CLRF   xDC
0473E:  MOVWF  xDB
04740:  MOVLW  08
04742:  ADDWF  xDB,W
04744:  MOVWF  01
04746:  MOVLW  00
04748:  ADDWFC xDC,W
0474A:  MOVWF  03
0474C:  MOVF   01,W
0474E:  ADDLW  14
04750:  MOVWF  FE9
04752:  MOVLW  01
04754:  ADDWFC 03,W
04756:  MOVWF  FEA
04758:  MOVF   FEF,W
0475A:  ADDWF  x43,W
0475C:  MOVWF  xDB
0475E:  MOVLW  00
04760:  ADDWFC x44,W
04762:  MOVWF  xDC
04764:  MOVF   xDB,W
04766:  SUBLW  3F
04768:  BTFSC  FD8.2
0476A:  BRA    4772
0476C:  MOVLB  0
0476E:  GOTO   4A76
04772:  MOVLB  0
04774:  MOVLB  A
04776:  MOVF   xDC,F
04778:  BTFSC  FD8.2
0477A:  BRA    4782
0477C:  MOVLB  0
0477E:  GOTO   4A76
04782:  MOVLB  0
....................         // データ書き込み
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
04784:  MOVLB  A
04786:  MOVF   x40,W
04788:  MULLW  0C
0478A:  MOVF   FF3,W
0478C:  CLRF   xDC
0478E:  MOVWF  xDB
04790:  MOVFF  ADC,03
04794:  MOVF   xDB,W
04796:  MOVLB  0
04798:  CALL   00E6
0479C:  MOVWF  00
0479E:  TBLRD*+
047A0:  MOVFF  FF5,01
047A4:  TBLRD*+
047A6:  MOVFF  FF5,02
047AA:  TBLRD*+
047AC:  MOVFF  FF5,03
047B0:  MOVFF  03,AE0
047B4:  MOVFF  02,ADF
047B8:  MOVFF  01,ADE
047BC:  MOVFF  00,ADD
047C0:  MOVLB  A
047C2:  MOVF   x40,W
047C4:  MULLW  0A
047C6:  MOVF   FF3,W
047C8:  CLRF   xE2
047CA:  MOVWF  xE1
047CC:  MOVLW  14
047CE:  ADDWF  xE1,W
047D0:  MOVWF  FE9
047D2:  MOVLW  01
047D4:  ADDWFC xE2,W
047D6:  MOVWF  FEA
047D8:  MOVFF  FEF,00
047DC:  MOVFF  FEC,01
047E0:  MOVFF  FEC,02
047E4:  MOVFF  FEC,03
047E8:  MOVF   FED,F
047EA:  MOVF   FED,F
047EC:  MOVF   FED,F
047EE:  MOVF   00,W
047F0:  ADDWF  xDD,W
047F2:  MOVWF  xD2
047F4:  MOVF   01,W
047F6:  ADDWFC xDE,W
047F8:  MOVWF  xD3
047FA:  MOVF   02,W
047FC:  ADDWFC xDF,W
047FE:  MOVWF  xD4
04800:  MOVF   03,W
04802:  ADDWFC xE0,W
04804:  MOVWF  xD5
04806:  MOVLB  0
....................         write_data_bytes(mis_fm, write_address, data_ptr, size);
04808:  MOVFF  107,ADE
0480C:  MOVFF  106,ADD
04810:  MOVFF  105,ADC
04814:  MOVFF  104,ADB
04818:  MOVFF  AD5,AE2
0481C:  MOVFF  AD4,AE1
04820:  MOVFF  AD3,AE0
04824:  MOVFF  AD2,ADF
04828:  MOVFF  A42,AE4
0482C:  MOVFF  A41,AE3
04830:  MOVFF  A44,AE6
04834:  MOVFF  A43,AE5
04838:  CALL   3F6E
....................         // fprintf(PC, "ADDRESS 0x%08LX DATA ", write_address);
....................         // for (unsigned int32 j = 0; j < size; j++) {
....................             // fprintf(PC, "%02X ", data_ptr[j]);
....................         // }
....................         // fprintf(PC, "\Sr\n");
.................... 
....................         misf_counter_table[id].used_counter     += size;
0483C:  MOVLB  A
0483E:  MOVF   x40,W
04840:  MULLW  0A
04842:  MOVF   FF3,W
04844:  CLRF   xDC
04846:  MOVWF  xDB
04848:  MOVLW  14
0484A:  ADDWF  xDB,W
0484C:  MOVWF  FE9
0484E:  MOVLW  01
04850:  ADDWFC xDC,W
04852:  MOVWF  FEA
04854:  MOVF   x43,W
04856:  ADDWF  FEF,W
04858:  MOVWF  00
0485A:  MOVF   x44,W
0485C:  ADDWFC FEC,W
0485E:  MOVWF  01
04860:  MOVLW  00
04862:  ADDWFC FEC,W
04864:  MOVWF  02
04866:  MOVLW  00
04868:  ADDWFC FEC,W
0486A:  MOVWF  03
0486C:  MOVF   FED,F
0486E:  MOVF   FED,F
04870:  MOVF   FED,F
04872:  MOVFF  00,FEF
04876:  MOVFF  01,FEC
0487A:  MOVFF  02,FEC
0487E:  MOVFF  03,FEC
04882:  MOVF   FED,F
04884:  MOVF   FED,F
04886:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += size;
04888:  MOVF   x40,W
0488A:  MULLW  0A
0488C:  MOVF   FF3,W
0488E:  CLRF   xDC
04890:  MOVWF  xDB
04892:  MOVLW  04
04894:  ADDWF  xDB,W
04896:  MOVWF  01
04898:  MOVLW  00
0489A:  ADDWFC xDC,W
0489C:  MOVWF  03
0489E:  MOVF   01,W
048A0:  ADDLW  14
048A2:  MOVWF  FE9
048A4:  MOVLW  01
048A6:  ADDWFC 03,W
048A8:  MOVWF  FEA
048AA:  MOVF   x43,W
048AC:  ADDWF  FEF,W
048AE:  MOVWF  00
048B0:  MOVF   x44,W
048B2:  ADDWFC FEC,W
048B4:  MOVWF  01
048B6:  MOVLW  00
048B8:  ADDWFC FEC,W
048BA:  MOVWF  02
048BC:  MOVLW  00
048BE:  ADDWFC FEC,W
048C0:  MOVWF  03
048C2:  MOVF   FED,F
048C4:  MOVF   FED,F
048C6:  MOVF   FED,F
048C8:  MOVFF  00,FEF
048CC:  MOVFF  01,FEC
048D0:  MOVFF  02,FEC
048D4:  MOVFF  03,FEC
048D8:  MOVF   FED,F
048DA:  MOVF   FED,F
048DC:  MOVF   FED,F
....................         unsigned int8 crc = calc_crc8(data_ptr, size);
048DE:  MOVFF  A42,ADC
048E2:  MOVFF  A41,ADB
048E6:  MOVFF  A43,ADD
048EA:  MOVLB  0
048EC:  CALL   30FC
048F0:  MOVFF  01,AD6
.................... 
....................         // CRC 書き込み
....................         write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
048F4:  MOVLB  A
048F6:  MOVF   x40,W
048F8:  MULLW  0C
048FA:  MOVF   FF3,W
048FC:  CLRF   xDC
048FE:  MOVWF  xDB
04900:  MOVFF  ADC,03
04904:  MOVF   xDB,W
04906:  MOVLB  0
04908:  CALL   00E6
0490C:  MOVWF  00
0490E:  TBLRD*+
04910:  MOVFF  FF5,01
04914:  TBLRD*+
04916:  MOVFF  FF5,02
0491A:  TBLRD*+
0491C:  MOVFF  FF5,03
04920:  MOVFF  03,AE0
04924:  MOVFF  02,ADF
04928:  MOVFF  01,ADE
0492C:  MOVFF  00,ADD
04930:  MOVLB  A
04932:  MOVF   x40,W
04934:  MULLW  0A
04936:  MOVF   FF3,W
04938:  CLRF   xE2
0493A:  MOVWF  xE1
0493C:  MOVLW  14
0493E:  ADDWF  xE1,W
04940:  MOVWF  FE9
04942:  MOVLW  01
04944:  ADDWFC xE2,W
04946:  MOVWF  FEA
04948:  MOVFF  FEF,00
0494C:  MOVFF  FEC,01
04950:  MOVFF  FEC,02
04954:  MOVFF  FEC,03
04958:  MOVF   FED,F
0495A:  MOVF   FED,F
0495C:  MOVF   FED,F
0495E:  MOVF   00,W
04960:  ADDWF  xDD,W
04962:  MOVWF  xD2
04964:  MOVF   01,W
04966:  ADDWFC xDE,W
04968:  MOVWF  xD3
0496A:  MOVF   02,W
0496C:  ADDWFC xDF,W
0496E:  MOVWF  xD4
04970:  MOVF   03,W
04972:  ADDWFC xE0,W
04974:  MOVWF  xD5
....................         write_data_bytes(mis_fm, write_address, &crc, 1);
04976:  MOVFF  107,ADE
0497A:  MOVFF  106,ADD
0497E:  MOVFF  105,ADC
04982:  MOVFF  104,ADB
04986:  MOVFF  AD5,AE2
0498A:  MOVFF  AD4,AE1
0498E:  MOVFF  AD3,AE0
04992:  MOVFF  AD2,ADF
04996:  MOVLW  0A
04998:  MOVWF  xE4
0499A:  MOVLW  D6
0499C:  MOVWF  xE3
0499E:  CLRF   xE6
049A0:  MOVLW  01
049A2:  MOVWF  xE5
049A4:  MOVLB  0
049A6:  CALL   3F6E
.................... 
....................         // カウンタ更新
....................         misf_counter_table[id].used_counter     += 1;
049AA:  MOVLB  A
049AC:  MOVF   x40,W
049AE:  MULLW  0A
049B0:  MOVF   FF3,W
049B2:  CLRF   xDC
049B4:  MOVWF  xDB
049B6:  MOVLW  14
049B8:  ADDWF  xDB,W
049BA:  MOVWF  FE9
049BC:  MOVLW  01
049BE:  ADDWFC xDC,W
049C0:  MOVWF  FEA
049C2:  MOVLW  01
049C4:  ADDWF  FEF,W
049C6:  MOVWF  00
049C8:  MOVLW  00
049CA:  ADDWFC FEC,W
049CC:  MOVWF  01
049CE:  MOVLW  00
049D0:  ADDWFC FEC,W
049D2:  MOVWF  02
049D4:  MOVLW  00
049D6:  ADDWFC FEC,W
049D8:  MOVWF  03
049DA:  MOVF   FED,F
049DC:  MOVF   FED,F
049DE:  MOVF   FED,F
049E0:  MOVFF  00,FEF
049E4:  MOVFF  01,FEC
049E8:  MOVFF  02,FEC
049EC:  MOVFF  03,FEC
049F0:  MOVF   FED,F
049F2:  MOVF   FED,F
049F4:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += 1;
049F6:  MOVF   x40,W
049F8:  MULLW  0A
049FA:  MOVF   FF3,W
049FC:  CLRF   xDC
049FE:  MOVWF  xDB
04A00:  MOVLW  04
04A02:  ADDWF  xDB,W
04A04:  MOVWF  01
04A06:  MOVLW  00
04A08:  ADDWFC xDC,W
04A0A:  MOVWF  03
04A0C:  MOVF   01,W
04A0E:  ADDLW  14
04A10:  MOVWF  FE9
04A12:  MOVLW  01
04A14:  ADDWFC 03,W
04A16:  MOVWF  FEA
04A18:  MOVLW  01
04A1A:  ADDWF  FEF,W
04A1C:  MOVWF  00
04A1E:  MOVLW  00
04A20:  ADDWFC FEC,W
04A22:  MOVWF  01
04A24:  MOVLW  00
04A26:  ADDWFC FEC,W
04A28:  MOVWF  02
04A2A:  MOVLW  00
04A2C:  ADDWFC FEC,W
04A2E:  MOVWF  03
04A30:  MOVF   FED,F
04A32:  MOVF   FED,F
04A34:  MOVF   FED,F
04A36:  MOVFF  00,FEF
04A3A:  MOVFF  01,FEC
04A3E:  MOVFF  02,FEC
04A42:  MOVFF  03,FEC
04A46:  MOVF   FED,F
04A48:  MOVF   FED,F
04A4A:  MOVF   FED,F
....................         misf_counter_table[id].reserve_counter1  = 0;
04A4C:  MOVF   x40,W
04A4E:  MULLW  0A
04A50:  MOVF   FF3,W
04A52:  CLRF   xDC
04A54:  MOVWF  xDB
04A56:  MOVLW  08
04A58:  ADDWF  xDB,W
04A5A:  MOVWF  01
04A5C:  MOVLW  00
04A5E:  ADDWFC xDC,W
04A60:  MOVWF  03
04A62:  MOVF   01,W
04A64:  ADDLW  14
04A66:  MOVWF  FE9
04A68:  MOVLW  01
04A6A:  ADDWFC 03,W
04A6C:  MOVWF  FEA
04A6E:  CLRF   FEF
.................... 
....................         // アドレステーブル更新
....................         // misf_update_address_area();
....................         return;
04A70:  MOVLB  0
04A72:  GOTO   4C04
....................     }
.................... 
....................     // データ書き込み
....................     unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
04A76:  MOVLB  A
04A78:  MOVF   x40,W
04A7A:  MULLW  0C
04A7C:  MOVF   FF3,W
04A7E:  CLRF   xDC
04A80:  MOVWF  xDB
04A82:  MOVFF  ADC,03
04A86:  MOVF   xDB,W
04A88:  MOVLB  0
04A8A:  CALL   00E6
04A8E:  MOVWF  00
04A90:  TBLRD*+
04A92:  MOVFF  FF5,01
04A96:  TBLRD*+
04A98:  MOVFF  FF5,02
04A9C:  TBLRD*+
04A9E:  MOVFF  FF5,03
04AA2:  MOVFF  03,AE0
04AA6:  MOVFF  02,ADF
04AAA:  MOVFF  01,ADE
04AAE:  MOVFF  00,ADD
04AB2:  MOVLB  A
04AB4:  MOVF   x40,W
04AB6:  MULLW  0A
04AB8:  MOVF   FF3,W
04ABA:  CLRF   xE2
04ABC:  MOVWF  xE1
04ABE:  MOVLW  14
04AC0:  ADDWF  xE1,W
04AC2:  MOVWF  FE9
04AC4:  MOVLW  01
04AC6:  ADDWFC xE2,W
04AC8:  MOVWF  FEA
04ACA:  MOVFF  FEF,00
04ACE:  MOVFF  FEC,01
04AD2:  MOVFF  FEC,02
04AD6:  MOVFF  FEC,03
04ADA:  MOVF   FED,F
04ADC:  MOVF   FED,F
04ADE:  MOVF   FED,F
04AE0:  MOVF   00,W
04AE2:  ADDWF  xDD,W
04AE4:  MOVWF  xD7
04AE6:  MOVF   01,W
04AE8:  ADDWFC xDE,W
04AEA:  MOVWF  xD8
04AEC:  MOVF   02,W
04AEE:  ADDWFC xDF,W
04AF0:  MOVWF  xD9
04AF2:  MOVF   03,W
04AF4:  ADDWFC xE0,W
04AF6:  MOVWF  xDA
....................     // fprintf(PC, "ADDRESS 0x%08LX DATA ", write_address);
....................     write_data_bytes(mis_fm, write_address, data_ptr, size);
04AF8:  MOVFF  107,ADE
04AFC:  MOVFF  106,ADD
04B00:  MOVFF  105,ADC
04B04:  MOVFF  104,ADB
04B08:  MOVFF  ADA,AE2
04B0C:  MOVFF  AD9,AE1
04B10:  MOVFF  AD8,AE0
04B14:  MOVFF  AD7,ADF
04B18:  MOVFF  A42,AE4
04B1C:  MOVFF  A41,AE3
04B20:  MOVFF  A44,AE6
04B24:  MOVFF  A43,AE5
04B28:  MOVLB  0
04B2A:  CALL   3F6E
.................... 
....................     // カウンタ更新
....................     misf_counter_table[id].used_counter     += size;
04B2E:  MOVLB  A
04B30:  MOVF   x40,W
04B32:  MULLW  0A
04B34:  MOVF   FF3,W
04B36:  CLRF   xDC
04B38:  MOVWF  xDB
04B3A:  MOVLW  14
04B3C:  ADDWF  xDB,W
04B3E:  MOVWF  FE9
04B40:  MOVLW  01
04B42:  ADDWFC xDC,W
04B44:  MOVWF  FEA
04B46:  MOVF   x43,W
04B48:  ADDWF  FEF,W
04B4A:  MOVWF  00
04B4C:  MOVF   x44,W
04B4E:  ADDWFC FEC,W
04B50:  MOVWF  01
04B52:  MOVLW  00
04B54:  ADDWFC FEC,W
04B56:  MOVWF  02
04B58:  MOVLW  00
04B5A:  ADDWFC FEC,W
04B5C:  MOVWF  03
04B5E:  MOVF   FED,F
04B60:  MOVF   FED,F
04B62:  MOVF   FED,F
04B64:  MOVFF  00,FEF
04B68:  MOVFF  01,FEC
04B6C:  MOVFF  02,FEC
04B70:  MOVFF  03,FEC
04B74:  MOVF   FED,F
04B76:  MOVF   FED,F
04B78:  MOVF   FED,F
....................     misf_counter_table[id].uncopied_counter += size;
04B7A:  MOVF   x40,W
04B7C:  MULLW  0A
04B7E:  MOVF   FF3,W
04B80:  CLRF   xDC
04B82:  MOVWF  xDB
04B84:  MOVLW  04
04B86:  ADDWF  xDB,W
04B88:  MOVWF  01
04B8A:  MOVLW  00
04B8C:  ADDWFC xDC,W
04B8E:  MOVWF  03
04B90:  MOVF   01,W
04B92:  ADDLW  14
04B94:  MOVWF  FE9
04B96:  MOVLW  01
04B98:  ADDWFC 03,W
04B9A:  MOVWF  FEA
04B9C:  MOVF   x43,W
04B9E:  ADDWF  FEF,W
04BA0:  MOVWF  00
04BA2:  MOVF   x44,W
04BA4:  ADDWFC FEC,W
04BA6:  MOVWF  01
04BA8:  MOVLW  00
04BAA:  ADDWFC FEC,W
04BAC:  MOVWF  02
04BAE:  MOVLW  00
04BB0:  ADDWFC FEC,W
04BB2:  MOVWF  03
04BB4:  MOVF   FED,F
04BB6:  MOVF   FED,F
04BB8:  MOVF   FED,F
04BBA:  MOVFF  00,FEF
04BBE:  MOVFF  01,FEC
04BC2:  MOVFF  02,FEC
04BC6:  MOVFF  03,FEC
04BCA:  MOVF   FED,F
04BCC:  MOVF   FED,F
04BCE:  MOVF   FED,F
....................     misf_counter_table[id].reserve_counter1 += size;
04BD0:  MOVF   x40,W
04BD2:  MULLW  0A
04BD4:  MOVF   FF3,W
04BD6:  CLRF   xDC
04BD8:  MOVWF  xDB
04BDA:  MOVLW  08
04BDC:  ADDWF  xDB,W
04BDE:  MOVWF  01
04BE0:  MOVLW  00
04BE2:  ADDWFC xDC,W
04BE4:  MOVWF  03
04BE6:  MOVF   01,W
04BE8:  ADDLW  14
04BEA:  MOVWF  FE9
04BEC:  MOVLW  01
04BEE:  ADDWFC 03,W
04BF0:  MOVWF  FEA
04BF2:  MOVF   FEF,W
04BF4:  ADDWF  x43,W
04BF6:  MOVWF  01
04BF8:  MOVLW  00
04BFA:  ADDWFC x44,W
04BFC:  MOVWF  03
04BFE:  MOVF   01,W
04C00:  MOVWF  FEF
04C02:  MOVLB  0
04C04:  RETURN 0
.................... 
....................     // アドレステーブル更新
....................     // misf_update_address_area();
.................... }
.................... 
.................... FlashData_t make_flash_data_table(void)
04C06:  MOVLW  09
04C08:  MOVLB  A
04C0A:  MOVWF  x3C
04C0C:  MOVLW  FB
04C0E:  MOVWF  x3B
.................... {
....................     FlashData_t flash_data;
....................     FlashData_t *flash_data_ptr = &flash_data;
.................... 
....................     // 初期化
....................     memset(flash_data_ptr->bytes, 0, sizeof(flash_data_ptr->bytes));
04C10:  MOVF   x3B,W
04C12:  MOVWF  01
04C14:  MOVF   x3C,W
04C16:  MOVWF  03
04C18:  MOVF   01,W
04C1A:  MOVWF  x3D
04C1C:  MOVFF  03,A3E
04C20:  MOVFF  A3E,FEA
04C24:  MOVFF  A3D,FE9
04C28:  CLRF   00
04C2A:  CLRF   02
04C2C:  MOVLW  40
04C2E:  MOVWF  01
04C30:  MOVLB  0
04C32:  CALL   234C
.................... 
....................     flash_data_ptr->packet.payload.logdata.piclog = misf_counter_table[FLASH_ID_PICLOG];
04C36:  MOVLB  A
04C38:  MOVF   x3B,W
04C3A:  MOVWF  FE9
04C3C:  MOVF   x3C,W
04C3E:  MOVWF  FEA
04C40:  MOVLW  01
04C42:  MOVWF  FE2
04C44:  MOVLW  1E
04C46:  MOVWF  FE1
04C48:  MOVLW  0A
04C4A:  MOVWF  01
04C4C:  MOVLB  0
04C4E:  MOVFF  FE6,FEE
04C52:  DECFSZ 01,F
04C54:  GOTO   4C4E
....................     flash_data_ptr->packet.payload.logdata.environment = misf_counter_table[FLASH_ID_ENVIRONMENT];
04C58:  MOVLW  0A
04C5A:  MOVLB  A
04C5C:  ADDWF  x3B,W
04C5E:  MOVWF  FE9
04C60:  MOVLW  00
04C62:  ADDWFC x3C,W
04C64:  MOVWF  FEA
04C66:  MOVLW  01
04C68:  MOVWF  FE2
04C6A:  MOVLW  28
04C6C:  MOVWF  FE1
04C6E:  MOVLW  0A
04C70:  MOVWF  01
04C72:  MOVLB  0
04C74:  MOVFF  FE6,FEE
04C78:  DECFSZ 01,F
04C7A:  GOTO   4C74
....................     flash_data_ptr->packet.payload.logdata.iv1_header = misf_counter_table[FLASH_ID_IV1_HEADER];
04C7E:  MOVLW  14
04C80:  MOVLB  A
04C82:  ADDWF  x3B,W
04C84:  MOVWF  FE9
04C86:  MOVLW  00
04C88:  ADDWFC x3C,W
04C8A:  MOVWF  FEA
04C8C:  MOVLW  01
04C8E:  MOVWF  FE2
04C90:  MOVLW  32
04C92:  MOVWF  FE1
04C94:  MOVLW  0A
04C96:  MOVWF  01
04C98:  MOVLB  0
04C9A:  MOVFF  FE6,FEE
04C9E:  DECFSZ 01,F
04CA0:  GOTO   4C9A
....................     flash_data_ptr->packet.payload.logdata.iv1_data = misf_counter_table[FLASH_ID_IV1_DATA];
04CA4:  MOVLW  1E
04CA6:  MOVLB  A
04CA8:  ADDWF  x3B,W
04CAA:  MOVWF  FE9
04CAC:  MOVLW  00
04CAE:  ADDWFC x3C,W
04CB0:  MOVWF  FEA
04CB2:  MOVLW  01
04CB4:  MOVWF  FE2
04CB6:  MOVLW  3C
04CB8:  MOVWF  FE1
04CBA:  MOVLW  0A
04CBC:  MOVWF  01
04CBE:  MOVLB  0
04CC0:  MOVFF  FE6,FEE
04CC4:  DECFSZ 01,F
04CC6:  GOTO   4CC0
....................     flash_data_ptr->packet.payload.logdata.iv2_header = misf_counter_table[FLASH_ID_IV2_HEADER];
04CCA:  MOVLW  28
04CCC:  MOVLB  A
04CCE:  ADDWF  x3B,W
04CD0:  MOVWF  FE9
04CD2:  MOVLW  00
04CD4:  ADDWFC x3C,W
04CD6:  MOVWF  FEA
04CD8:  MOVLW  01
04CDA:  MOVWF  FE2
04CDC:  MOVLW  46
04CDE:  MOVWF  FE1
04CE0:  MOVLW  0A
04CE2:  MOVWF  01
04CE4:  MOVLB  0
04CE6:  MOVFF  FE6,FEE
04CEA:  DECFSZ 01,F
04CEC:  GOTO   4CE6
....................     flash_data_ptr->packet.payload.logdata.iv2_data = misf_counter_table[FLASH_ID_IV2_DATA];
04CF0:  MOVLW  32
04CF2:  MOVLB  A
04CF4:  ADDWF  x3B,W
04CF6:  MOVWF  FE9
04CF8:  MOVLW  00
04CFA:  ADDWFC x3C,W
04CFC:  MOVWF  FEA
04CFE:  MOVLW  01
04D00:  MOVWF  FE2
04D02:  MOVLW  50
04D04:  MOVWF  FE1
04D06:  MOVLW  0A
04D08:  MOVWF  01
04D0A:  MOVLB  0
04D0C:  MOVFF  FE6,FEE
04D10:  DECFSZ 01,F
04D12:  GOTO   4D0C
.................... 
....................     // CRC 計算
....................     flash_data_ptr->packet.crc = calc_crc8(flash_data_ptr->bytes, PACKET_SIZE - 1);
04D16:  MOVLW  3F
04D18:  MOVLB  A
04D1A:  ADDWF  x3B,W
04D1C:  MOVWF  01
04D1E:  MOVLW  00
04D20:  ADDWFC x3C,W
04D22:  MOVWF  03
04D24:  MOVF   01,W
04D26:  MOVWF  x3D
04D28:  MOVFF  03,A3E
04D2C:  MOVF   x3B,W
04D2E:  MOVWF  01
04D30:  MOVF   x3C,W
04D32:  MOVWF  03
04D34:  MOVF   01,W
04D36:  MOVWF  x3F
04D38:  MOVFF  03,A40
04D3C:  MOVFF  A40,ADC
04D40:  MOVFF  A3F,ADB
04D44:  MOVLW  3F
04D46:  MOVWF  xDD
04D48:  MOVLB  0
04D4A:  CALL   30FC
04D4E:  MOVFF  A3E,FEA
04D52:  MOVFF  A3D,FE9
04D56:  MOVFF  01,FEF
.................... 
....................     return flash_data;
04D5A:  MOVLW  FB
04D5C:  MOVWF  01
04D5E:  MOVLW  09
04D60:  MOVWF  02
04D62:  GOTO   5094 (RETURN)
.................... }
.................... 
.................... void misf_update_address_area(void)
*
05090:  GOTO   4C06
05094:  MOVFF  02,03
05098:  MOVF   01,W
0509A:  MOVWF  FE1
0509C:  MOVFF  03,FE2
050A0:  MOVLW  09
050A2:  MOVWF  FEA
050A4:  MOVLW  B3
050A6:  MOVWF  FE9
050A8:  MOVLW  40
050AA:  MOVWF  01
050AC:  MOVFF  FE6,FEE
050B0:  DECFSZ 01,F
050B2:  GOTO   50AC
050B6:  MOVLW  09
050B8:  MOVLB  9
050BA:  MOVWF  xF4
050BC:  MOVLW  B3
050BE:  MOVWF  xF3
.................... {
....................     FlashData_t flash_data = make_flash_data_table();
....................     FlashData_t *flash_data_ptr = &flash_data;
.................... 
....................     subsector_4kByte_erase(mis_fm, MISF_ADDRESS_TABLE[FLASH_ID_DATA_TABLE].start);
050C0:  MOVFF  107,9F8
050C4:  MOVFF  106,9F7
050C8:  MOVFF  105,9F6
050CC:  MOVFF  104,9F5
050D0:  CLRF   xFC
050D2:  CLRF   xFB
050D4:  CLRF   xFA
050D6:  CLRF   xF9
050D8:  MOVLB  0
050DA:  CALL   4D66
....................     write_data_bytes(mis_fm, MISF_ADDRESS_TABLE[FLASH_ID_DATA_TABLE].start, flash_data_ptr->bytes, PACKET_SIZE);
050DE:  MOVLB  9
050E0:  MOVF   xF3,W
050E2:  MOVWF  01
050E4:  MOVF   xF4,W
050E6:  MOVWF  03
050E8:  MOVF   01,W
050EA:  MOVWF  xF5
050EC:  MOVFF  03,9F6
050F0:  MOVFF  107,ADE
050F4:  MOVFF  106,ADD
050F8:  MOVFF  105,ADC
050FC:  MOVFF  104,ADB
05100:  MOVLB  A
05102:  CLRF   xE2
05104:  CLRF   xE1
05106:  CLRF   xE0
05108:  CLRF   xDF
0510A:  MOVFF  9F6,AE4
0510E:  MOVFF  9F5,AE3
05112:  CLRF   xE6
05114:  MOVLW  40
05116:  MOVWF  xE5
05118:  MOVLB  0
0511A:  CALL   3F6E
0511E:  RETURN 0
.................... }
.................... 
.................... 
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode)
.................... {
....................     FlashOperationStruct data;
....................     // 構造体の初期化
....................     data.mission_id = mission_id;
....................     data.func_type = func_type;
....................     data.write_mode = write_mode;
....................     data.source_type = SOURCE_MISF_UNCOPIED;
....................     enqueue_flash_operation(&data);
.................... }
.................... 
.................... void write_smf_header(smf_data_table_t *smf_data_table)
.................... {
.................... 
....................     int8 readdata[PACKET_SIZE];
....................     int8 retry_count;
....................     int1 crc_valid = 0;
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
....................         if (is_crc_valid(readdata, PACKET_SIZE-1))
....................         {
....................             crc_valid = 1; // FIX: フラグ更新
....................             fprintf(PC, "CRC verification passed on attempt %d\r\n", retry_count + 1);
....................             break;
....................         }
....................     }
....................     if (!crc_valid)
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
....................         // return; 
....................     }
.................... }
.................... 
.................... 
.................... 
.................... // End of file
.................... 
.................... 
.................... // アプリケーション実装ファイル
.................... #include "application/cigs_excute_mission.c"
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../hal/cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/value_status.h"    // ステータス定義
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "cigs_excute_mission.h"                  // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... // #include "../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... void handle_recieve_time(Command *command);
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_PRINT 0xA3
.................... #define ID_MEAS_IV_PRINT 0xA4
.................... #define ID_MEAS_PD 0xA5
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_pd(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_1sweep(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_port1(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_port2(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int16 interval;
....................     unsigned int16 pd_threshold;
....................     unsigned int16 meas_time;
....................     unsigned int16 log_threshold;
....................     unsigned int16 sweep_limit;
.................... } meas_iv_param_t;
.................... 
.................... 
.................... // MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... meas_iv_param_t make_meas_iv_cmd(int8 *uplinkcmd_ptr);
.................... void print_meas_iv_cmd(meas_iv_param_t *cmd_ptr);
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "../domain/cigs_smf.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #include "../hal/cigs_config.h" // int8,int32 型など(CCS C) 依存
.................... #include "cigs_flash.h"       // MISF_ADDRESS_TABLE, misf_counter_table 依存
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... extern int1 smf_update_flag[10]; // SMF更新フラグ
.................... 
.................... 
.................... // SMF管理用構造体
.................... typedef struct {
....................     ADDRESS_AREA_T header_area;
....................     ADDRESS_AREA_T data_area;
.................... } SMF_AREA_T;
.................... #define SMF_ID_COUNT 7
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 reserved;
.................... } SMF_PARTITION;
.................... 
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         SMF_PARTITION headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table);
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/communication/typedef_content.h"    // 通信ライブラリ
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06,
....................     TIME_REQ          = 0x07
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.h"      // ミッションツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../domain/cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... #define SWEEP_MAX_STEP 0xFF
.................... 
.................... typedef enum {
....................     CELL1 = 0,
....................     CELL2,
.................... } cell_select_t;
.................... 
.................... typedef struct {
....................     cell_select_t cell;
....................     unsigned int16 voltage[SWEEP_MAX_STEP];
....................     unsigned int16 current[SWEEP_MAX_STEP];
....................     unsigned int16 max_power;
....................     unsigned int16 sweep_count;
.................... } cell_iv_data_t;
.................... 
.................... typedef struct {
....................     unsigned int32 time;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 pd;
.................... } env_data_t;
.................... 
.................... typedef struct{
....................     cell_iv_data_t cell1_iv_data;
....................     cell_iv_data_t cell2_iv_data;
.................... } sweep_result_t;
.................... 
.................... typedef struct {
....................     int1 cell1;
....................     int1 cell2;
....................     unsigned int16 curr_limit;
.................... }sweep_setting_t;
.................... 
.................... 
.................... void meas_env_data(env_data_t *env_data_ptr);
.................... void meas_iv(sweep_setting_t *sweep_config_ptr, sweep_result_t *sweep_result_ptr);
.................... void save_sweep_result(env_data_t *env_data_ptr, sweep_result_t *sweep_result_ptr);
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/communication_driver.h" // 通信ドライバー
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *uplink_cmt_ptr)
*
0F51E:  MOVLB  1
0F520:  MOVF   x90,W
0F522:  MOVWF  FE9
0F524:  MOVF   x91,W
0F526:  MOVWF  FEA
0F528:  MOVFF  FEF,192
.................... {
....................    // record to executed mission list
....................    int8 command_id = uplink_cmt_ptr[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
0F52C:  MOVLW  3C
0F52E:  MOVWF  FF6
0F530:  MOVLW  12
0F532:  MOVWF  FF7
0F534:  MOVLW  00
0F536:  MOVWF  FF8
0F538:  MOVLB  0
0F53A:  CALL   22DC
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
0F53E:  MOVLW  82
0F540:  MOVWF  FF6
0F542:  MOVLW  12
0F544:  MOVWF  FF7
0F546:  MOVLW  00
0F548:  MOVWF  FF8
0F54A:  MOVLW  0C
0F54C:  MOVLB  9
0F54E:  MOVWF  xB3
0F550:  MOVLB  0
0F552:  CALL   2312
0F556:  MOVFF  192,9D9
0F55A:  MOVLW  37
0F55C:  MOVLB  9
0F55E:  MOVWF  xDA
0F560:  MOVLB  0
0F562:  CALL   2542
0F566:  MOVLW  90
0F568:  MOVWF  FF6
0F56A:  MOVLW  12
0F56C:  MOVWF  FF7
0F56E:  MOVLW  00
0F570:  MOVWF  FF8
0F572:  MOVLW  04
0F574:  MOVLB  9
0F576:  MOVWF  xB3
0F578:  MOVLB  0
0F57A:  CALL   2312
....................    switch(command_id)
0F57E:  MOVLB  1
0F580:  MOVF   x92,W
0F582:  XORLW  10
0F584:  MOVLB  0
0F586:  BTFSC  FD8.2
0F588:  GOTO   F688
0F58C:  XORLW  01
0F58E:  BTFSC  FD8.2
0F590:  GOTO   F68C
0F594:  XORLW  03
0F596:  BTFSC  FD8.2
0F598:  GOTO   F690
0F59C:  XORLW  13
0F59E:  BTFSC  FD8.2
0F5A0:  GOTO   F694
0F5A4:  XORLW  12
0F5A6:  BTFSC  FD8.2
0F5A8:  GOTO   F698
0F5AC:  XORLW  93
0F5AE:  BTFSC  FD8.2
0F5B0:  GOTO   F69C
0F5B4:  XORLW  01
0F5B6:  BTFSC  FD8.2
0F5B8:  GOTO   F6AC
0F5BC:  XORLW  03
0F5BE:  BTFSC  FD8.2
0F5C0:  GOTO   F6BC
0F5C4:  XORLW  01
0F5C6:  BTFSC  FD8.2
0F5C8:  GOTO   F6CC
0F5CC:  XORLW  07
0F5CE:  BTFSC  FD8.2
0F5D0:  GOTO   F6DC
0F5D4:  XORLW  01
0F5D6:  BTFSC  FD8.2
0F5D8:  GOTO   F6EC
0F5DC:  XORLW  03
0F5DE:  BTFSC  FD8.2
0F5E0:  GOTO   F6FC
0F5E4:  XORLW  01
0F5E6:  BTFSC  FD8.2
0F5E8:  GOTO   F70C
0F5EC:  XORLW  0F
0F5EE:  BTFSC  FD8.2
0F5F0:  GOTO   F71C
0F5F4:  XORLW  18
0F5F6:  BTFSC  FD8.2
0F5F8:  GOTO   F72C
0F5FC:  XORLW  01
0F5FE:  BTFSC  FD8.2
0F600:  GOTO   F73C
0F604:  XORLW  03
0F606:  BTFSC  FD8.2
0F608:  GOTO   F74C
0F60C:  XORLW  01
0F60E:  BTFSC  FD8.2
0F610:  GOTO   F75C
0F614:  XORLW  07
0F616:  BTFSC  FD8.2
0F618:  GOTO   F76C
0F61C:  XORLW  01
0F61E:  BTFSC  FD8.2
0F620:  GOTO   F77C
0F624:  XORLW  03
0F626:  BTFSC  FD8.2
0F628:  GOTO   F78C
0F62C:  XORLW  36
0F62E:  BTFSC  FD8.2
0F630:  GOTO   F794
0F634:  XORLW  01
0F636:  BTFSC  FD8.2
0F638:  GOTO   F7A4
0F63C:  XORLW  03
0F63E:  BTFSC  FD8.2
0F640:  GOTO   F7B4
0F644:  XORLW  01
0F646:  BTFSC  FD8.2
0F648:  GOTO   F7C4
0F64C:  XORLW  07
0F64E:  BTFSC  FD8.2
0F650:  GOTO   F7C8
0F654:  XORLW  01
0F656:  BTFSC  FD8.2
0F658:  GOTO   F7D0
0F65C:  XORLW  03
0F65E:  BTFSC  FD8.2
0F660:  GOTO   F7E0
0F664:  XORLW  01
0F666:  BTFSC  FD8.2
0F668:  GOTO   F8BE
0F66C:  XORLW  0F
0F66E:  BTFSC  FD8.2
0F670:  GOTO   F8D6
0F674:  XORLW  01
0F676:  BTFSC  FD8.2
0F678:  GOTO   F8EE
0F67C:  XORLW  19
0F67E:  BTFSC  FD8.2
0F680:  GOTO   F906
0F684:  GOTO   FB12
....................    {
....................       case 0x10: // example command
....................          // mode_dummy(content);
....................          //mode_iv_meas_adc();
....................          break;
0F688:  GOTO   FB26
....................       case 0x11:
....................          // mode_test_iv(content);
....................          break;
0F68C:  GOTO   FB26
....................       case 0x12:
....................          // test_adc();
....................          break;
0F690:  GOTO   FB26
....................       case 0x01:
....................          //mode_measure(content); // check if the flash is connected
....................          break;
0F694:  GOTO   FB26
....................       case 0x13:
....................          // mode_sweep_port1(content[1]); // Sweep Port 1 with the given step
....................          break;
0F698:  GOTO   FB26
.................... 
....................       // ___________________ MISF Commands ______________________
....................       case ID_MISF_ERASE_ALL: //0x80
....................          mode_misf_erase_all(uplink_cmt_ptr);
0F69C:  MOVFF  191,1BC
0F6A0:  MOVFF  190,1BB
0F6A4:  CALL   5CA4
....................          break;
0F6A8:  GOTO   FB26
....................       case ID_MISF_ERASE_1SECTOR: //0x81
....................          mode_misf_erase_1sector(uplink_cmt_ptr);
0F6AC:  MOVFF  191,1A1
0F6B0:  MOVFF  190,1A0
0F6B4:  GOTO   5D82
....................          break;
0F6B8:  GOTO   FB26
....................       case ID_MISF_ERASE_4kByte_SUBSECTOR: //0x82
....................          mode_misf_erase_4kbyte_subsector(uplink_cmt_ptr);
0F6BC:  MOVFF  191,1A1
0F6C0:  MOVFF  190,1A0
0F6C4:  GOTO   5F1A
....................          break;
0F6C8:  GOTO   FB26
....................       case ID_MISF_ERASE_64kByte_SUBSECTOR: //0x83
....................          mode_misf_erase_64kbyte_subsector(uplink_cmt_ptr);
0F6CC:  MOVFF  191,1A1
0F6D0:  MOVFF  190,1A0
0F6D4:  GOTO   60B2
....................          break;
0F6D8:  GOTO   FB26
....................       case ID_MISF_WRITE_DEMO:
....................          mode_misf_write_demo(uplink_cmt_ptr);
0F6DC:  MOVFF  191,1A1
0F6E0:  MOVFF  190,1A0
0F6E4:  GOTO   640A
....................          break;
0F6E8:  GOTO   FB26
....................       case ID_MISF_WRITE_4kByte_SUBSECTOR:
....................          mode_misf_write_4kbyte_subsector(uplink_cmt_ptr);
0F6EC:  MOVFF  191,1A1
0F6F0:  MOVFF  190,1A0
0F6F4:  GOTO   6A3E
....................          break;
0F6F8:  GOTO   FB26
....................       case ID_MISF_READ:
....................          mode_misf_read(uplink_cmt_ptr);
0F6FC:  MOVFF  191,1A1
0F700:  MOVFF  190,1A0
0F704:  GOTO   6AB6
....................          break;
0F708:  GOTO   FB26
....................       case ID_MISF_READ_ADDRESS:
....................          mode_misf_read_address(uplink_cmt_ptr);
0F70C:  MOVFF  191,1A1
0F710:  MOVFF  190,1A0
0F714:  GOTO   7276
....................          break;
0F718:  GOTO   FB26
....................       case ID_MISF_ERASE_AND_RESET:
....................          mode_misf_erase_and_reset(uplink_cmt_ptr);
0F71C:  MOVFF  191,1BA
0F720:  MOVFF  190,1B9
0F724:  CALL   757E
....................          break;
0F728:  GOTO   FB26
.................... 
....................       // ___________________ SMF Commands ______________________
....................       case ID_SMF_COPY: //0x90
....................          mode_smf_copy(uplink_cmt_ptr);
0F72C:  MOVFF  191,1A1
0F730:  MOVFF  190,1A0
0F734:  GOTO   75D4
....................          break;
0F738:  GOTO   FB26
....................       case ID_SMF_READ: //0x91
....................          mode_smf_read(uplink_cmt_ptr);
0F73C:  MOVFF  191,1A1
0F740:  MOVFF  190,1A0
0F744:  GOTO   76B0
....................          break;
0F748:  GOTO   FB26
....................       case ID_SMF_ERASE:
....................          mode_smf_erase(uplink_cmt_ptr);
0F74C:  MOVFF  191,1A1
0F750:  MOVFF  190,1A0
0F754:  GOTO   797A
....................          break;
0F758:  GOTO   FB26
....................       case ID_SMF_COPY_FORCE:
....................          mode_smf_address_reset(uplink_cmt_ptr);
0F75C:  MOVFF  191,1A1
0F760:  MOVFF  190,1A0
0F764:  GOTO   7B64
....................          break;
0F768:  GOTO   FB26
....................       case ID_SMF_READ_FORCE:
....................          mode_smf_read_force(uplink_cmt_ptr);
0F76C:  MOVFF  191,1A1
0F770:  MOVFF  190,1A0
0F774:  GOTO   7CE2
....................          break;
0F778:  GOTO   FB26
....................       case ID_SMF_ERASE_FORCE:
....................          mode_smf_erase_force(uplink_cmt_ptr);
0F77C:  MOVFF  191,1A1
0F780:  MOVFF  190,1A0
0F784:  GOTO   80D4
....................          break;
0F788:  GOTO   FB26
....................       case ID_SMF_RESET:
....................          smf_data_table_init();
0F78C:  CALL   79E2
....................          break;
0F790:  GOTO   FB26
....................          
....................          
....................       // ________________MEAS________________________________
....................       case ID_MEAS_IV:
....................          mode_meas_iv(uplink_cmt_ptr);
0F794:  MOVFF  191,1A1
0F798:  MOVFF  190,1A0
0F79C:  GOTO   A98C
....................          break;
0F7A0:  GOTO   FB26
....................       case ID_MEAS_DEBUG:
....................          mode_meas_iv_debug(uplink_cmt_ptr);
0F7A4:  MOVFF  191,1A1
0F7A8:  MOVFF  190,1A0
0F7AC:  GOTO   C6DA
....................          break;
0F7B0:  GOTO   FB26
....................       case ID_MEAS_ENV:
....................          mode_meas_env(uplink_cmt_ptr);
0F7B4:  MOVFF  191,1A1
0F7B8:  MOVFF  190,1A0
0F7BC:  GOTO   C9BC
....................          break;
0F7C0:  GOTO   FB26
....................       case ID_MEAS_ENV_PRINT:
....................          // mode_meas_env_debug(uplink_cmt_ptr);
....................          break;
0F7C4:  GOTO   FB26
....................       case ID_MEAS_IV_PRINT:
....................          sweep_with_print();
0F7C8:  GOTO   CAA4
....................          break;
0F7CC:  GOTO   FB26
....................       case ID_MEAS_PD:
....................          mode_meas_pd(uplink_cmt_ptr);
0F7D0:  MOVFF  191,1A1
0F7D4:  MOVFF  190,1A0
0F7D8:  GOTO   E220
....................          break;
0F7DC:  GOTO   FB26
....................       case 0xA6:
....................          connect_port1();
0F7E0:  CALL   5248
....................          connect_port2();
0F7E4:  CALL   5250
....................          unsigned int16 cell1_curr;
....................          unsigned int16 cell2_curr;
....................          mcp4901_1_write(10); 
0F7E8:  MOVLB  9
0F7EA:  CLRF   xCE
0F7EC:  MOVLW  0A
0F7EE:  MOVWF  xCD
0F7F0:  MOVLB  0
0F7F2:  CALL   2872
....................          mcp4901_2_write(10);
0F7F6:  MOVLB  9
0F7F8:  CLRF   xCE
0F7FA:  MOVLW  0A
0F7FC:  MOVWF  xCD
0F7FE:  MOVLB  0
0F800:  CALL   28B0
....................          while (TRUE)
....................          {  
....................             cell1_curr = ad7490_read(ADC_CIGS1_CURR);
0F804:  MOVLW  01
0F806:  MOVLB  9
0F808:  MOVWF  xDF
0F80A:  MOVLB  0
0F80C:  CALL   24C2
0F810:  MOVFF  02,194
0F814:  MOVFF  01,193
....................             cell2_curr = ad7490_read(ADC_CIGS2_CURR);
0F818:  MOVLW  05
0F81A:  MOVLB  9
0F81C:  MOVWF  xDF
0F81E:  MOVLB  0
0F820:  CALL   24C2
0F824:  MOVFF  02,196
0F828:  MOVFF  01,195
....................             fprintf(PC, "%04LX,%04LX\r\n", cell1_curr, cell2_curr);
0F82C:  MOVFF  194,9D9
0F830:  MOVLW  37
0F832:  MOVLB  9
0F834:  MOVWF  xDA
0F836:  MOVLB  0
0F838:  CALL   2542
0F83C:  MOVFF  193,9D9
0F840:  MOVLW  37
0F842:  MOVLB  9
0F844:  MOVWF  xDA
0F846:  MOVLB  0
0F848:  CALL   2542
0F84C:  MOVLW  2C
0F84E:  BTFSS  FA6.6
0F850:  GOTO   F84E
0F854:  MOVLB  E
0F856:  MOVWF  xF9
0F858:  MOVFF  196,9D9
0F85C:  MOVLW  37
0F85E:  MOVLB  9
0F860:  MOVWF  xDA
0F862:  MOVLB  0
0F864:  CALL   2542
0F868:  MOVFF  195,9D9
0F86C:  MOVLW  37
0F86E:  MOVLB  9
0F870:  MOVWF  xDA
0F872:  MOVLB  0
0F874:  CALL   2542
0F878:  MOVLW  0D
0F87A:  BTFSS  FA6.6
0F87C:  GOTO   F87A
0F880:  MOVLB  E
0F882:  MOVWF  xF9
0F884:  MOVLW  0A
0F886:  MOVLB  0
0F888:  BTFSS  FA6.6
0F88A:  GOTO   F888
0F88E:  MOVLB  E
0F890:  MOVWF  xF9
....................             delay_ms(1000);
0F892:  MOVLW  04
0F894:  MOVLB  1
0F896:  MOVWF  xA0
0F898:  MOVLB  0
0F89A:  MOVLW  FA
0F89C:  MOVLB  A
0F89E:  MOVWF  xF3
0F8A0:  MOVLB  0
0F8A2:  CALL   22AE
0F8A6:  MOVLB  1
0F8A8:  DECFSZ xA0,F
0F8AA:  BRA    F8B0
0F8AC:  BRA    F8B4
0F8AE:  MOVLB  0
0F8B0:  MOVLB  0
0F8B2:  BRA    F89A
0F8B4:  MOVLB  0
0F8B6:  GOTO   F804
....................          }
....................          break;
0F8BA:  GOTO   FB26
....................       case 0xA7:
....................          connect_port1();
0F8BE:  CALL   5248
....................          connect_port2();
0F8C2:  CALL   5250
....................          mode_meas_iv_1sweep(uplink_cmt_ptr);
0F8C6:  MOVFF  191,1A1
0F8CA:  MOVFF  190,1A0
0F8CE:  GOTO   E418
....................          break;
0F8D2:  GOTO   FB26
.................... 
....................       case 0xA8:
....................          connect_port1();
0F8D6:  CALL   5248
....................          connect_port2();
0F8DA:  CALL   5250
....................          mode_meas_iv_port1(uplink_cmt_ptr);
0F8DE:  MOVFF  191,1A1
0F8E2:  MOVFF  190,1A0
0F8E6:  GOTO   EF12
....................          break;
0F8EA:  GOTO   FB26
....................       
....................       case 0xA9:
....................          connect_port1();
0F8EE:  CALL   5248
....................          connect_port2();
0F8F2:  CALL   5250
....................          mode_meas_iv_port2(uplink_cmt_ptr);
0F8F6:  MOVFF  191,1A1
0F8FA:  MOVFF  190,1A0
0F8FE:  GOTO   F196
....................       break;
0F902:  GOTO   FB26
.................... 
....................       // ________________Others______________________________
....................       case 0xB0:
....................          unsigned int32 total_seconds = get_current_sec();
....................          unsigned int16 days;
....................          unsigned int8 hours, minutes, seconds;
0F906:  CALL   3C28
0F90A:  MOVFF  03,19A
0F90E:  MOVFF  02,199
0F912:  MOVFF  01,198
0F916:  MOVFF  00,197
....................          days    = total_seconds / 86400;
0F91A:  BCF    FD8.1
0F91C:  MOVFF  19A,206
0F920:  MOVFF  199,205
0F924:  MOVFF  198,204
0F928:  MOVFF  197,203
0F92C:  MOVLB  2
0F92E:  CLRF   x0A
0F930:  MOVLW  01
0F932:  MOVWF  x09
0F934:  MOVLW  51
0F936:  MOVWF  x08
0F938:  MOVLW  80
0F93A:  MOVWF  x07
0F93C:  MOVLB  0
0F93E:  CALL   6226
0F942:  MOVFF  01,19C
0F946:  MOVFF  00,19B
....................          hours   = (total_seconds % 86400) / 3600;
0F94A:  BSF    FD8.1
0F94C:  MOVLW  01
0F94E:  MOVWF  FEA
0F950:  MOVLW  A0
0F952:  MOVWF  FE9
0F954:  MOVFF  19A,206
0F958:  MOVFF  199,205
0F95C:  MOVFF  198,204
0F960:  MOVFF  197,203
0F964:  MOVLB  2
0F966:  CLRF   x0A
0F968:  MOVLW  01
0F96A:  MOVWF  x09
0F96C:  MOVLW  51
0F96E:  MOVWF  x08
0F970:  MOVLW  80
0F972:  MOVWF  x07
0F974:  MOVLB  0
0F976:  CALL   6226
0F97A:  MOVFF  1A3,1A7
0F97E:  MOVFF  1A2,1A6
0F982:  MOVFF  1A1,1A5
0F986:  MOVFF  1A0,1A4
0F98A:  MOVFF  FEA,1A9
0F98E:  MOVFF  FE9,1A8
0F992:  BCF    FD8.1
0F994:  MOVFF  1A7,206
0F998:  MOVFF  1A6,205
0F99C:  MOVFF  1A5,204
0F9A0:  MOVFF  1A4,203
0F9A4:  MOVLB  2
0F9A6:  CLRF   x0A
0F9A8:  CLRF   x09
0F9AA:  MOVLW  0E
0F9AC:  MOVWF  x08
0F9AE:  MOVLW  10
0F9B0:  MOVWF  x07
0F9B2:  MOVLB  0
0F9B4:  CALL   6226
0F9B8:  MOVFF  1A9,FEA
0F9BC:  MOVFF  1A8,FE9
0F9C0:  MOVFF  00,19D
....................          minutes = (total_seconds % 3600) / 60;
0F9C4:  BSF    FD8.1
0F9C6:  MOVLW  01
0F9C8:  MOVWF  FEA
0F9CA:  MOVLW  A0
0F9CC:  MOVWF  FE9
0F9CE:  MOVFF  19A,206
0F9D2:  MOVFF  199,205
0F9D6:  MOVFF  198,204
0F9DA:  MOVFF  197,203
0F9DE:  MOVLB  2
0F9E0:  CLRF   x0A
0F9E2:  CLRF   x09
0F9E4:  MOVLW  0E
0F9E6:  MOVWF  x08
0F9E8:  MOVLW  10
0F9EA:  MOVWF  x07
0F9EC:  MOVLB  0
0F9EE:  CALL   6226
0F9F2:  MOVFF  1A3,1A7
0F9F6:  MOVFF  1A2,1A6
0F9FA:  MOVFF  1A1,1A5
0F9FE:  MOVFF  1A0,1A4
0FA02:  MOVFF  FEA,1A9
0FA06:  MOVFF  FE9,1A8
0FA0A:  BCF    FD8.1
0FA0C:  MOVFF  1A7,206
0FA10:  MOVFF  1A6,205
0FA14:  MOVFF  1A5,204
0FA18:  MOVFF  1A4,203
0FA1C:  MOVLB  2
0FA1E:  CLRF   x0A
0FA20:  CLRF   x09
0FA22:  CLRF   x08
0FA24:  MOVLW  3C
0FA26:  MOVWF  x07
0FA28:  MOVLB  0
0FA2A:  CALL   6226
0FA2E:  MOVFF  1A9,FEA
0FA32:  MOVFF  1A8,FE9
0FA36:  MOVFF  00,19E
....................          seconds = total_seconds % 60;
0FA3A:  BSF    FD8.1
0FA3C:  MOVLW  01
0FA3E:  MOVWF  FEA
0FA40:  MOVLW  A0
0FA42:  MOVWF  FE9
0FA44:  MOVFF  19A,206
0FA48:  MOVFF  199,205
0FA4C:  MOVFF  198,204
0FA50:  MOVFF  197,203
0FA54:  MOVLB  2
0FA56:  CLRF   x0A
0FA58:  CLRF   x09
0FA5A:  CLRF   x08
0FA5C:  MOVLW  3C
0FA5E:  MOVWF  x07
0FA60:  MOVLB  0
0FA62:  CALL   6226
0FA66:  MOVFF  1A0,19F
.................... 
....................          fprintf(PC, "\t\t-> Get time to %lu days, %02u:%02u:%02u\r\n",
....................                days, hours, minutes, seconds);
0FA6A:  MOVLW  96
0FA6C:  MOVWF  FF6
0FA6E:  MOVLW  12
0FA70:  MOVWF  FF7
0FA72:  MOVLW  00
0FA74:  MOVWF  FF8
0FA76:  MOVLW  11
0FA78:  MOVLB  9
0FA7A:  MOVWF  xB3
0FA7C:  MOVLB  0
0FA7E:  CALL   2312
0FA82:  MOVLW  10
0FA84:  MOVWF  FE9
0FA86:  MOVFF  19C,1DB
0FA8A:  MOVFF  19B,1DA
0FA8E:  CALL   8D5A
0FA92:  MOVLW  AA
0FA94:  MOVWF  FF6
0FA96:  MOVLW  12
0FA98:  MOVWF  FF7
0FA9A:  MOVLW  00
0FA9C:  MOVWF  FF8
0FA9E:  MOVLW  07
0FAA0:  MOVLB  9
0FAA2:  MOVWF  xB3
0FAA4:  MOVLB  0
0FAA6:  CALL   2312
0FAAA:  MOVFF  19D,1A0
0FAAE:  MOVLW  01
0FAB0:  MOVLB  1
0FAB2:  MOVWF  xA1
0FAB4:  MOVLB  0
0FAB6:  CALL   F462
0FABA:  MOVLW  3A
0FABC:  BTFSS  FA6.6
0FABE:  GOTO   FABC
0FAC2:  MOVLB  E
0FAC4:  MOVWF  xF9
0FAC6:  MOVFF  19E,1A0
0FACA:  MOVLW  01
0FACC:  MOVLB  1
0FACE:  MOVWF  xA1
0FAD0:  MOVLB  0
0FAD2:  CALL   F462
0FAD6:  MOVLW  3A
0FAD8:  BTFSS  FA6.6
0FADA:  GOTO   FAD8
0FADE:  MOVLB  E
0FAE0:  MOVWF  xF9
0FAE2:  MOVFF  19F,1A0
0FAE6:  MOVLW  01
0FAE8:  MOVLB  1
0FAEA:  MOVWF  xA1
0FAEC:  MOVLB  0
0FAEE:  CALL   F462
0FAF2:  MOVLW  0D
0FAF4:  BTFSS  FA6.6
0FAF6:  GOTO   FAF4
0FAFA:  MOVLB  E
0FAFC:  MOVWF  xF9
0FAFE:  MOVLW  0A
0FB00:  MOVLB  0
0FB02:  BTFSS  FA6.6
0FB04:  GOTO   FB02
0FB08:  MOVLB  E
0FB0A:  MOVWF  xF9
....................          break;
0FB0C:  MOVLB  0
0FB0E:  GOTO   FB26
.................... 
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
0FB12:  MOVLW  C2
0FB14:  MOVWF  FF6
0FB16:  MOVLW  12
0FB18:  MOVWF  FF7
0FB1A:  MOVLW  00
0FB1C:  MOVWF  FF8
0FB1E:  CALL   22DC
....................          break;
0FB22:  GOTO   FB26
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
0FB26:  MOVLW  DA
0FB28:  MOVWF  FF6
0FB2A:  MOVLW  12
0FB2C:  MOVWF  FF7
0FB2E:  MOVLW  00
0FB30:  MOVWF  FF8
0FB32:  CALL   22DC
0FB36:  GOTO   FBA4 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
0FF4A:  MOVLW  20
0FF4C:  MOVWF  FF6
0FF4E:  MOVLW  13
0FF50:  MOVWF  FF7
0FF52:  MOVLW  00
0FF54:  MOVWF  FF8
0FF56:  CALL   22DC
....................    
....................    switch(command->frame_id)
0FF5A:  MOVLB  1
0FF5C:  MOVF   x8A,W
0FF5E:  MOVWF  FE9
0FF60:  MOVF   x8B,W
0FF62:  MOVWF  FEA
0FF64:  MOVF   FEF,W
0FF66:  ADDLW  FC
0FF68:  BTFSS  FD8.0
0FF6A:  BRA    FF72
0FF6C:  MOVLB  0
0FF6E:  GOTO   FFCA
0FF72:  ADDLW  04
0FF74:  MOVLB  0
0FF76:  GOTO   FFD2
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
0FF7A:  MOVFF  18B,18D
0FF7E:  MOVFF  18A,18C
0FF82:  GOTO   FB58
....................          break;
0FF86:  GOTO   FFCA
....................          
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
0FF8A:  MOVFF  18B,18D
0FF8E:  MOVFF  18A,18C
0FF92:  GOTO   FBC0
0FF96:  MOVF   01,F
0FF98:  BTFSC  FD8.2
0FF9A:  GOTO   FFA6
....................             return TRUE; // if status is finished, return TRUE
0FF9E:  MOVLW  01
0FFA0:  MOVWF  01
0FFA2:  GOTO   FFCE
....................          }        
....................          break;
0FFA6:  GOTO   FFCA
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
0FFAA:  MOVFF  18B,18D
0FFAE:  MOVFF  18A,18C
0FFB2:  GOTO   121B2
....................          break;
0FFB6:  GOTO   FFCA
....................       
....................       case SEND_TIME:
....................          handle_recieve_time(command);
0FFBA:  MOVFF  18B,18D
0FFBE:  MOVFF  18A,18C
0FFC2:  GOTO   12516
....................          break;
0FFC6:  GOTO   FFCA
....................    }
....................    return FALSE;
0FFCA:  MOVLW  00
0FFCC:  MOVWF  01
0FFCE:  GOTO   12CA2 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
0FB58:  MOVLW  38
0FB5A:  MOVWF  FF6
0FB5C:  MOVLW  13
0FB5E:  MOVWF  FF7
0FB60:  MOVLW  00
0FB62:  MOVWF  FF8
0FB64:  CALL   22DC
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
0FB68:  MOVLW  4E
0FB6A:  MOVWF  FF6
0FB6C:  MOVLW  13
0FB6E:  MOVWF  FF7
0FB70:  MOVLW  00
0FB72:  MOVWF  FF8
0FB74:  CALL   22DC
....................    transmit_ack();
0FB78:  CALL   5934
.................... 
....................    status[0] = EXECUTING_MISSION;
0FB7C:  MOVLW  02
0FB7E:  MOVWF  3E
....................    execute_mission(command->content);
0FB80:  MOVLW  03
0FB82:  MOVLB  1
0FB84:  ADDWF  x8C,W
0FB86:  MOVWF  01
0FB88:  MOVLW  00
0FB8A:  ADDWFC x8D,W
0FB8C:  MOVWF  03
0FB8E:  MOVF   01,W
0FB90:  MOVWF  x8E
0FB92:  MOVFF  03,18F
0FB96:  MOVFF  18F,191
0FB9A:  MOVFF  18E,190
0FB9E:  MOVLB  0
0FBA0:  GOTO   F51E
....................    if (is_empty_flash_queue())
0FBA4:  CALL   FB3A
0FBA8:  MOVF   01,F
0FBAA:  BTFSC  FD8.2
0FBAC:  GOTO   FBB8
....................       status[0] = FINISHED;
0FBB0:  MOVLW  06
0FBB2:  MOVWF  3E
0FBB4:  GOTO   FBBC
....................    else
....................       status[0] = SMF_USE_REQ;
0FBB8:  MOVLW  04
0FBBA:  MOVWF  3E
0FBBC:  GOTO   FF86 (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... 
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
0FBC0:  MOVLW  68
0FBC2:  MOVWF  FF6
0FBC4:  MOVLW  13
0FBC6:  MOVWF  FF7
0FBC8:  MOVLW  00
0FBCA:  MOVWF  FF8
0FBCC:  CALL   22DC
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
0FBD0:  MOVLW  7C
0FBD2:  MOVWF  FF6
0FBD4:  MOVLW  13
0FBD6:  MOVWF  FF7
0FBD8:  MOVLW  00
0FBDA:  MOVWF  FF8
0FBDC:  CALL   22DC
....................    transmit_status();
0FBE0:  CALL   A6D4
....................    if (status[0] == FINISHED)
0FBE4:  MOVF   3E,W
0FBE6:  SUBLW  06
0FBE8:  BTFSS  FD8.2
0FBEA:  GOTO   FC0A
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
0FBEE:  MOVLW  9A
0FBF0:  MOVWF  FF6
0FBF2:  MOVLW  13
0FBF4:  MOVWF  FF7
0FBF6:  MOVLW  00
0FBF8:  MOVWF  FF8
0FBFA:  CALL   22DC
....................       return TRUE;
0FBFE:  MOVLW  01
0FC00:  MOVWF  01
0FC02:  GOTO   FC12
....................    }
0FC06:  GOTO   FC12
....................    else{
....................       return FALSE;
0FC0A:  MOVLW  00
0FC0C:  MOVWF  01
0FC0E:  GOTO   FC12
....................    }
0FC12:  GOTO   FF96 (RETURN)
.................... }
.................... 
.................... 
.................... void handle_smf_available(Command *command)
.................... {
....................     fprintf(PC, "\t-> SMF available check\r\n");
*
121B2:  MOVLW  B6
121B4:  MOVWF  FF6
121B6:  MOVLW  13
121B8:  MOVWF  FF7
121BA:  MOVLW  00
121BC:  MOVWF  FF8
121BE:  CALL   22DC
....................     fprintf(PC, "\t   Transmit Acknowledgement\r\n");
121C2:  MOVLW  D0
121C4:  MOVWF  FF6
121C6:  MOVLW  13
121C8:  MOVWF  FF7
121CA:  MOVLW  00
121CC:  MOVWF  FF8
121CE:  CALL   22DC
....................     transmit_ack();
121D2:  CALL   5934
.................... 
....................     if (command->content[0] != ALLOW) {
121D6:  MOVLW  03
121D8:  MOVLB  1
121DA:  ADDWF  x8C,W
121DC:  MOVWF  FE9
121DE:  MOVLW  00
121E0:  ADDWFC x8D,W
121E2:  MOVWF  FEA
121E4:  DECFSZ FEF,W
121E6:  BRA    121EC
121E8:  BRA    121F2
121EA:  MOVLB  0
121EC:  MOVLB  0
121EE:  GOTO   121F8
121F2:  MOVLB  0
121F4:  GOTO   1220C
....................         fprintf(PC, "\t\t-> denied\r\n");
121F8:  MOVLW  F0
121FA:  MOVWF  FF6
121FC:  MOVLW  13
121FE:  MOVWF  FF7
12200:  MOVLW  00
12202:  MOVWF  FF8
12204:  CALL   22DC
....................         return;
12208:  GOTO   12512
....................     }
.................... 
....................     fprintf(PC, "\t\t-> allowed\r\n");
1220C:  MOVLW  FE
1220E:  MOVWF  FF6
12210:  MOVLW  13
12212:  MOVWF  FF7
12214:  MOVLW  00
12216:  MOVWF  FF8
12218:  CALL   22DC
....................     status[0] = COPYING;
1221C:  MOVLW  05
1221E:  MOVWF  3E
.................... 
....................     int8 processed_count = 0;
12220:  MOVLB  1
12222:  CLRF   x8E
12224:  MOVLB  0
.................... 
....................     while (!is_empty_flash_queue()) {
12226:  CALL   FB3A
1222A:  MOVF   01,F
1222C:  BTFSS  FD8.2
1222E:  GOTO   124CA
....................         FlashOperationStruct *smf_data = dequeue_flash_operation();
12232:  GOTO   FC16
12236:  MOVFF  02,190
1223A:  MOVFF  01,18F
....................         /*
....................         if (smf_data == NULL) {
....................             fprintf(PC, "\t\t-> dequeue NULL (break)\r\n");
....................             break;
....................         }
....................          */
....................         fprintf(PC, "\t\t-> Dequeued: func=%u mission=%u size=%ld addr=%ld\r\n",
....................                 (unsigned int)smf_data->func_type,
....................                 (unsigned int)smf_data->mission_id,
....................                 smf_data->misf_size,
....................                 smf_data->misf_start_addr);
1223E:  MOVLW  01
12240:  MOVLB  1
12242:  ADDWF  x8F,W
12244:  MOVWF  FE9
12246:  MOVLW  00
12248:  ADDWFC x90,W
1224A:  MOVWF  FEA
1224C:  MOVFF  FEF,192
12250:  MOVF   x8F,W
12252:  MOVWF  FE9
12254:  MOVF   x90,W
12256:  MOVWF  FEA
12258:  MOVFF  FEF,193
1225C:  MOVLW  08
1225E:  ADDWF  x8F,W
12260:  MOVWF  FE9
12262:  MOVLW  00
12264:  ADDWFC x90,W
12266:  MOVWF  FEA
12268:  MOVFF  FEF,194
1226C:  MOVFF  FEC,195
12270:  MOVFF  FEC,196
12274:  MOVFF  FEC,197
12278:  MOVF   FED,F
1227A:  MOVF   FED,F
1227C:  MOVF   FED,F
1227E:  MOVLW  04
12280:  ADDWF  x8F,W
12282:  MOVWF  FE9
12284:  MOVLW  00
12286:  ADDWFC x90,W
12288:  MOVWF  FEA
1228A:  MOVFF  FEF,198
1228E:  MOVFF  FEC,199
12292:  MOVFF  FEC,19A
12296:  MOVFF  FEC,19B
1229A:  MOVF   FED,F
1229C:  MOVF   FED,F
1229E:  MOVF   FED,F
122A0:  MOVLW  0E
122A2:  MOVWF  FF6
122A4:  MOVLW  14
122A6:  MOVWF  FF7
122A8:  MOVLW  00
122AA:  MOVWF  FF8
122AC:  MOVLW  14
122AE:  MOVLB  9
122B0:  MOVWF  xB3
122B2:  MOVLB  0
122B4:  CALL   2312
122B8:  MOVFF  192,1A0
122BC:  MOVLW  1B
122BE:  MOVLB  1
122C0:  MOVWF  xA1
122C2:  MOVLB  0
122C4:  CALL   F462
122C8:  MOVLW  24
122CA:  MOVWF  FF6
122CC:  MOVLW  14
122CE:  MOVWF  FF7
122D0:  MOVLW  00
122D2:  MOVWF  FF8
122D4:  MOVLW  09
122D6:  MOVLB  9
122D8:  MOVWF  xB3
122DA:  MOVLB  0
122DC:  CALL   2312
122E0:  MOVFF  193,1A0
122E4:  MOVLW  1B
122E6:  MOVLB  1
122E8:  MOVWF  xA1
122EA:  MOVLB  0
122EC:  CALL   F462
122F0:  MOVLW  2F
122F2:  MOVWF  FF6
122F4:  MOVLW  14
122F6:  MOVWF  FF7
122F8:  MOVLW  00
122FA:  MOVWF  FF8
122FC:  MOVLW  06
122FE:  MOVLB  9
12300:  MOVWF  xB3
12302:  MOVLB  0
12304:  CALL   2312
12308:  MOVLW  41
1230A:  MOVWF  FE9
1230C:  MOVFF  197,19F
12310:  MOVFF  196,19E
12314:  MOVFF  195,19D
12318:  MOVFF  194,19C
1231C:  CALL   FC78
12320:  MOVLW  38
12322:  MOVWF  FF6
12324:  MOVLW  14
12326:  MOVWF  FF7
12328:  MOVLW  00
1232A:  MOVWF  FF8
1232C:  MOVLW  06
1232E:  MOVLB  9
12330:  MOVWF  xB3
12332:  MOVLB  0
12334:  CALL   2312
12338:  MOVLW  41
1233A:  MOVWF  FE9
1233C:  MOVFF  19B,19F
12340:  MOVFF  19A,19E
12344:  MOVFF  199,19D
12348:  MOVFF  198,19C
1234C:  CALL   FC78
12350:  MOVLW  0D
12352:  BTFSS  FA6.6
12354:  GOTO   12352
12358:  MOVLB  E
1235A:  MOVWF  xF9
1235C:  MOVLW  0A
1235E:  MOVLB  0
12360:  BTFSS  FA6.6
12362:  GOTO   12360
12366:  MOVLB  E
12368:  MOVWF  xF9
.................... 
....................         switch (smf_data->func_type) {
1236A:  MOVLW  01
1236C:  MOVLB  1
1236E:  ADDWF  x8F,W
12370:  MOVWF  FE9
12372:  MOVLW  00
12374:  ADDWFC x90,W
12376:  MOVWF  FEA
12378:  MOVF   FEF,W
1237A:  XORLW  00
1237C:  MOVLB  0
1237E:  BTFSC  FD8.2
12380:  GOTO   12398
12384:  XORLW  01
12386:  BTFSC  FD8.2
12388:  GOTO   123A8
1238C:  XORLW  03
1238E:  BTFSC  FD8.2
12390:  GOTO   123B8
12394:  GOTO   123C8
....................             case ENUM_SMF_WRITE:
....................                 smf_write(smf_data);
12398:  MOVFF  190,193
1239C:  MOVFF  18F,192
123A0:  GOTO   1033C
....................                 break;
123A4:  GOTO   12422
....................             case ENUM_SMF_READ:
....................                 smf_read(smf_data);
123A8:  MOVFF  190,193
123AC:  MOVFF  18F,192
123B0:  GOTO   11406
....................                 break;
123B4:  GOTO   12422
....................             case ENUM_SMF_ERASE:
....................                 smf_erase(smf_data);
123B8:  MOVFF  190,193
123BC:  MOVFF  18F,192
123C0:  GOTO   11B30
....................                 break;
123C4:  GOTO   12422
....................             default:
....................                 fprintf(PC, "\t\t   Unknown func_type=%u\r\n",
....................                         (unsigned int)smf_data->func_type);
123C8:  MOVLW  01
123CA:  MOVLB  1
123CC:  ADDWF  x8F,W
123CE:  MOVWF  FE9
123D0:  MOVLW  00
123D2:  ADDWFC x90,W
123D4:  MOVWF  FEA
123D6:  MOVFF  FEF,192
123DA:  MOVLW  44
123DC:  MOVWF  FF6
123DE:  MOVLW  14
123E0:  MOVWF  FF7
123E2:  MOVLW  00
123E4:  MOVWF  FF8
123E6:  MOVLW  17
123E8:  MOVLB  9
123EA:  MOVWF  xB3
123EC:  MOVLB  0
123EE:  CALL   2312
123F2:  MOVFF  192,1A0
123F6:  MOVLW  1B
123F8:  MOVLB  1
123FA:  MOVWF  xA1
123FC:  MOVLB  0
123FE:  CALL   F462
12402:  MOVLW  0D
12404:  BTFSS  FA6.6
12406:  GOTO   12404
1240A:  MOVLB  E
1240C:  MOVWF  xF9
1240E:  MOVLW  0A
12410:  MOVLB  0
12412:  BTFSS  FA6.6
12414:  GOTO   12412
12418:  MOVLB  E
1241A:  MOVWF  xF9
....................                 break;
1241C:  MOVLB  0
1241E:  GOTO   12422
....................         }
....................          processed_count++;
12422:  MOVLB  1
12424:  INCF   x8E,F
....................          unsigned int8 smf_id;
....................          switch (smf_data->mission_id) {
12426:  MOVF   x8F,W
12428:  MOVWF  FE9
1242A:  MOVF   x90,W
1242C:  MOVWF  FEA
1242E:  MOVF   FEF,W
12430:  XORLW  00
12432:  MOVLB  0
12434:  BTFSC  FD8.2
12436:  GOTO   1246E
1243A:  XORLW  01
1243C:  BTFSC  FD8.2
1243E:  GOTO   1247A
12442:  XORLW  03
12444:  BTFSC  FD8.2
12446:  GOTO   12486
1244A:  XORLW  01
1244C:  BTFSC  FD8.2
1244E:  GOTO   12492
12452:  XORLW  07
12454:  BTFSC  FD8.2
12456:  GOTO   1249E
1245A:  XORLW  01
1245C:  BTFSC  FD8.2
1245E:  GOTO   124AA
12462:  XORLW  03
12464:  BTFSC  FD8.2
12466:  GOTO   124B6
1246A:  GOTO   124C2
....................             case CIGS_DATA_TABLE:
....................                smf_id = DATA_ID_CIGS_DATA_TABLE;
1246E:  MOVLW  C0
12470:  MOVLB  1
12472:  MOVWF  x91
....................                break;
12474:  MOVLB  0
12476:  GOTO   124C6
....................             case CIGS_PICLOG_DATA:
....................                smf_id = DATA_ID_CIGS_PICLOG;
1247A:  MOVLW  C1
1247C:  MOVLB  1
1247E:  MOVWF  x91
....................                break;
12480:  MOVLB  0
12482:  GOTO   124C6
....................             case CIGS_ENVIRO_DATA:
....................                smf_id = DATA_ID_CIGS_ENVIRO;
12486:  MOVLW  C2
12488:  MOVLB  1
1248A:  MOVWF  x91
....................                break;
1248C:  MOVLB  0
1248E:  GOTO   124C6
....................             case CIGS_IV1_HEADER:
....................                smf_id = DATA_ID_CIGS_IV1_HEADER;
12492:  MOVLW  C3
12494:  MOVLB  1
12496:  MOVWF  x91
....................                break;
12498:  MOVLB  0
1249A:  GOTO   124C6
....................             case CIGS_IV1_DATA:
....................                smf_id = DATA_ID_CIGS_IV1_DATA;
1249E:  MOVLW  C4
124A0:  MOVLB  1
124A2:  MOVWF  x91
....................                break;
124A4:  MOVLB  0
124A6:  GOTO   124C6
....................             case CIGS_IV2_HEADER:
....................                smf_id = DATA_ID_CIGS_IV2_HEADER;
124AA:  MOVLW  C5
124AC:  MOVLB  1
124AE:  MOVWF  x91
....................                break;
124B0:  MOVLB  0
124B2:  GOTO   124C6
....................             case CIGS_IV2_DATA:
....................                smf_id = DATA_ID_CIGS_IV2_DATA;
124B6:  MOVLW  C6
124B8:  MOVLB  1
124BA:  MOVWF  x91
....................                 break;
124BC:  MOVLB  0
124BE:  GOTO   124C6
....................             default:
....................                 break;
124C2:  GOTO   124C6
....................          }
124C6:  GOTO   12226
....................          
....................     }
.................... 
....................     fprintf(PC, "\t\t-> Completed %u operations\r\n",
....................             (unsigned int)processed_count);
124CA:  MOVLW  60
124CC:  MOVWF  FF6
124CE:  MOVLW  14
124D0:  MOVWF  FF7
124D2:  MOVLW  00
124D4:  MOVWF  FF8
124D6:  MOVLW  0F
124D8:  MOVLB  9
124DA:  MOVWF  xB3
124DC:  MOVLB  0
124DE:  CALL   2312
124E2:  MOVFF  18E,1A0
124E6:  MOVLW  1B
124E8:  MOVLB  1
124EA:  MOVWF  xA1
124EC:  MOVLB  0
124EE:  CALL   F462
124F2:  MOVLW  71
124F4:  MOVWF  FF6
124F6:  MOVLW  14
124F8:  MOVWF  FF7
124FA:  MOVLW  00
124FC:  MOVWF  FF8
124FE:  MOVLW  0D
12500:  MOVLB  9
12502:  MOVWF  xB3
12504:  MOVLB  0
12506:  CALL   2312
....................       status[1] = 0xC0;
1250A:  MOVLW  C0
1250C:  MOVWF  3F
....................       status[0] = FINISHED;
1250E:  MOVLW  06
12510:  MOVWF  3E
12512:  GOTO   FFB6 (RETURN)
.................... }
.................... 
.................... void handle_recieve_time(Command *command)
.................... {
....................    fprintf(PC, "\t-> TIME Receive\r\n");
12516:  MOVLW  80
12518:  MOVWF  FF6
1251A:  MOVLW  14
1251C:  MOVWF  FF7
1251E:  MOVLW  00
12520:  MOVWF  FF8
12522:  CALL   22DC
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
12526:  MOVLW  94
12528:  MOVWF  FF6
1252A:  MOVLW  14
1252C:  MOVWF  FF7
1252E:  MOVLW  00
12530:  MOVWF  FF8
12532:  CALL   22DC
....................    transmit_ack();
12536:  CALL   5934
.................... 
....................    // 4バイト(MSB, big-endian)に詰められた MM/DD hh:mm:ss を復元
....................    // [31:26]=0, [25:22]=month(1-12), [21:17]=day(1-31), [16:12]=hour(0-23), [11:6]=minute(0-59), [5:0]=second(0-59)
....................    unsigned int32 total_seconds = ((unsigned int32)command->content[0] << 24) |
....................                       ((unsigned int32)command->content[1] << 16) |
....................                       ((unsigned int32)command->content[2] << 8)  |
....................                       ((unsigned int32)command->content[3]);
1253A:  MOVLW  03
1253C:  MOVLB  1
1253E:  ADDWF  x8C,W
12540:  MOVWF  FE9
12542:  MOVLW  00
12544:  ADDWFC x8D,W
12546:  MOVWF  FEA
12548:  MOVF   FEF,W
1254A:  CLRF   x9A
1254C:  CLRF   x99
1254E:  CLRF   x98
12550:  MOVWF  x97
12552:  MOVFF  197,19A
12556:  CLRF   x97
12558:  CLRF   x98
1255A:  CLRF   x99
1255C:  MOVLW  04
1255E:  ADDWF  x8C,W
12560:  MOVWF  FE9
12562:  MOVLW  00
12564:  ADDWFC x8D,W
12566:  MOVWF  FEA
12568:  MOVF   FEF,W
1256A:  CLRF   x9F
1256C:  CLRF   x9E
1256E:  CLRF   x9D
12570:  MOVWF  x9C
12572:  MOVFF  19D,03
12576:  MOVFF  19C,02
1257A:  CLRF   00
1257C:  CLRF   01
1257E:  MOVF   00,W
12580:  IORWF  x97,F
12582:  MOVF   01,W
12584:  IORWF  x98,F
12586:  MOVF   02,W
12588:  IORWF  x99,F
1258A:  MOVF   03,W
1258C:  IORWF  x9A,F
1258E:  MOVLW  05
12590:  ADDWF  x8C,W
12592:  MOVWF  FE9
12594:  MOVLW  00
12596:  ADDWFC x8D,W
12598:  MOVWF  FEA
1259A:  MOVF   FEF,W
1259C:  CLRF   x9F
1259E:  CLRF   x9E
125A0:  CLRF   x9D
125A2:  MOVWF  x9C
125A4:  MOVFF  19E,03
125A8:  MOVFF  19D,02
125AC:  MOVFF  19C,01
125B0:  CLRF   00
125B2:  MOVF   00,W
125B4:  IORWF  x97,F
125B6:  MOVF   01,W
125B8:  IORWF  x98,F
125BA:  MOVF   02,W
125BC:  IORWF  x99,F
125BE:  MOVF   03,W
125C0:  IORWF  x9A,F
125C2:  MOVLW  06
125C4:  ADDWF  x8C,W
125C6:  MOVWF  FE9
125C8:  MOVLW  00
125CA:  ADDWFC x8D,W
125CC:  MOVWF  FEA
125CE:  MOVF   FEF,W
125D0:  MOVWF  00
125D2:  CLRF   01
125D4:  CLRF   02
125D6:  CLRF   03
125D8:  MOVF   00,W
125DA:  IORWF  x97,W
125DC:  MOVWF  x8E
125DE:  MOVF   01,W
125E0:  IORWF  x98,W
125E2:  MOVWF  x8F
125E4:  MOVF   02,W
125E6:  IORWF  x99,W
125E8:  MOVWF  x90
125EA:  MOVF   03,W
125EC:  IORWF  x9A,W
125EE:  MOVWF  x91
.................... 
....................    set_current_sec(total_seconds);
125F0:  MOVFF  191,19A
125F4:  MOVFF  190,199
125F8:  MOVFF  18F,198
125FC:  MOVFF  18E,197
12600:  MOVLB  0
12602:  GOTO   FF36
....................    unsigned int16 days;
....................    unsigned int8 hours, minutes, seconds;
....................    days    = total_seconds / 86400;
12606:  BCF    FD8.1
12608:  MOVFF  191,206
1260C:  MOVFF  190,205
12610:  MOVFF  18F,204
12614:  MOVFF  18E,203
12618:  MOVLB  2
1261A:  CLRF   x0A
1261C:  MOVLW  01
1261E:  MOVWF  x09
12620:  MOVLW  51
12622:  MOVWF  x08
12624:  MOVLW  80
12626:  MOVWF  x07
12628:  MOVLB  0
1262A:  CALL   6226
1262E:  MOVFF  01,193
12632:  MOVFF  00,192
....................    hours   = (total_seconds % 86400) / 3600;
12636:  BSF    FD8.1
12638:  MOVLW  01
1263A:  MOVWF  FEA
1263C:  MOVLW  97
1263E:  MOVWF  FE9
12640:  MOVFF  191,206
12644:  MOVFF  190,205
12648:  MOVFF  18F,204
1264C:  MOVFF  18E,203
12650:  MOVLB  2
12652:  CLRF   x0A
12654:  MOVLW  01
12656:  MOVWF  x09
12658:  MOVLW  51
1265A:  MOVWF  x08
1265C:  MOVLW  80
1265E:  MOVWF  x07
12660:  MOVLB  0
12662:  CALL   6226
12666:  MOVFF  19A,19E
1266A:  MOVFF  199,19D
1266E:  MOVFF  198,19C
12672:  MOVFF  197,19B
12676:  MOVFF  FEA,1A0
1267A:  MOVFF  FE9,19F
1267E:  BCF    FD8.1
12680:  MOVFF  19E,206
12684:  MOVFF  19D,205
12688:  MOVFF  19C,204
1268C:  MOVFF  19B,203
12690:  MOVLB  2
12692:  CLRF   x0A
12694:  CLRF   x09
12696:  MOVLW  0E
12698:  MOVWF  x08
1269A:  MOVLW  10
1269C:  MOVWF  x07
1269E:  MOVLB  0
126A0:  CALL   6226
126A4:  MOVFF  1A0,FEA
126A8:  MOVFF  19F,FE9
126AC:  MOVFF  00,194
....................    minutes = (total_seconds % 3600) / 60;
126B0:  BSF    FD8.1
126B2:  MOVLW  01
126B4:  MOVWF  FEA
126B6:  MOVLW  97
126B8:  MOVWF  FE9
126BA:  MOVFF  191,206
126BE:  MOVFF  190,205
126C2:  MOVFF  18F,204
126C6:  MOVFF  18E,203
126CA:  MOVLB  2
126CC:  CLRF   x0A
126CE:  CLRF   x09
126D0:  MOVLW  0E
126D2:  MOVWF  x08
126D4:  MOVLW  10
126D6:  MOVWF  x07
126D8:  MOVLB  0
126DA:  CALL   6226
126DE:  MOVFF  19A,19E
126E2:  MOVFF  199,19D
126E6:  MOVFF  198,19C
126EA:  MOVFF  197,19B
126EE:  MOVFF  FEA,1A0
126F2:  MOVFF  FE9,19F
126F6:  BCF    FD8.1
126F8:  MOVFF  19E,206
126FC:  MOVFF  19D,205
12700:  MOVFF  19C,204
12704:  MOVFF  19B,203
12708:  MOVLB  2
1270A:  CLRF   x0A
1270C:  CLRF   x09
1270E:  CLRF   x08
12710:  MOVLW  3C
12712:  MOVWF  x07
12714:  MOVLB  0
12716:  CALL   6226
1271A:  MOVFF  1A0,FEA
1271E:  MOVFF  19F,FE9
12722:  MOVFF  00,195
....................    seconds = total_seconds % 60;
12726:  BSF    FD8.1
12728:  MOVLW  01
1272A:  MOVWF  FEA
1272C:  MOVLW  97
1272E:  MOVWF  FE9
12730:  MOVFF  191,206
12734:  MOVFF  190,205
12738:  MOVFF  18F,204
1273C:  MOVFF  18E,203
12740:  MOVLB  2
12742:  CLRF   x0A
12744:  CLRF   x09
12746:  CLRF   x08
12748:  MOVLW  3C
1274A:  MOVWF  x07
1274C:  MOVLB  0
1274E:  CALL   6226
12752:  MOVFF  197,196
.................... 
....................    fprintf(PC, "\t\t-> Set time to %lu days, %02u:%02u:%02u\r\n",
....................            days, hours, minutes, seconds);
12756:  MOVLW  AE
12758:  MOVWF  FF6
1275A:  MOVLW  14
1275C:  MOVWF  FF7
1275E:  MOVLW  00
12760:  MOVWF  FF8
12762:  MOVLW  11
12764:  MOVLB  9
12766:  MOVWF  xB3
12768:  MOVLB  0
1276A:  CALL   2312
1276E:  MOVLW  10
12770:  MOVWF  FE9
12772:  MOVFF  193,1DB
12776:  MOVFF  192,1DA
1277A:  CALL   8D5A
1277E:  MOVLW  C2
12780:  MOVWF  FF6
12782:  MOVLW  14
12784:  MOVWF  FF7
12786:  MOVLW  00
12788:  MOVWF  FF8
1278A:  MOVLW  07
1278C:  MOVLB  9
1278E:  MOVWF  xB3
12790:  MOVLB  0
12792:  CALL   2312
12796:  MOVFF  194,1A0
1279A:  MOVLW  01
1279C:  MOVLB  1
1279E:  MOVWF  xA1
127A0:  MOVLB  0
127A2:  CALL   F462
127A6:  MOVLW  3A
127A8:  BTFSS  FA6.6
127AA:  GOTO   127A8
127AE:  MOVLB  E
127B0:  MOVWF  xF9
127B2:  MOVFF  195,1A0
127B6:  MOVLW  01
127B8:  MOVLB  1
127BA:  MOVWF  xA1
127BC:  MOVLB  0
127BE:  CALL   F462
127C2:  MOVLW  3A
127C4:  BTFSS  FA6.6
127C6:  GOTO   127C4
127CA:  MOVLB  E
127CC:  MOVWF  xF9
127CE:  MOVFF  196,1A0
127D2:  MOVLW  01
127D4:  MOVLB  1
127D6:  MOVWF  xA1
127D8:  MOVLB  0
127DA:  CALL   F462
127DE:  MOVLW  0D
127E0:  BTFSS  FA6.6
127E2:  GOTO   127E0
127E6:  MOVLB  E
127E8:  MOVWF  xF9
127EA:  MOVLW  0A
127EC:  MOVLB  0
127EE:  BTFSS  FA6.6
127F0:  GOTO   127EE
127F4:  MOVLB  E
127F6:  MOVWF  xF9
127F8:  MOVLB  0
127FA:  GOTO   FFC6 (RETURN)
.................... 
.................... }
.................... // End of file
.................... 
.................... #include "application/cigs_mode_mission.c"
.................... #include "cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_PRINT 0xA3
.................... #define ID_MEAS_IV_PRINT 0xA4
.................... #define ID_MEAS_PD 0xA5
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_pd(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_1sweep(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_port1(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_port2(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int16 interval;
....................     unsigned int16 pd_threshold;
....................     unsigned int16 meas_time;
....................     unsigned int16 log_threshold;
....................     unsigned int16 sweep_limit;
.................... } meas_iv_param_t;
.................... 
.................... 
.................... // MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... meas_iv_param_t make_meas_iv_cmd(int8 *uplinkcmd_ptr);
.................... void print_meas_iv_cmd(meas_iv_param_t *cmd_ptr);
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... #define SWEEP_MAX_STEP 0xFF
.................... 
.................... typedef enum {
....................     CELL1 = 0,
....................     CELL2,
.................... } cell_select_t;
.................... 
.................... typedef struct {
....................     cell_select_t cell;
....................     unsigned int16 voltage[SWEEP_MAX_STEP];
....................     unsigned int16 current[SWEEP_MAX_STEP];
....................     unsigned int16 max_power;
....................     unsigned int16 sweep_count;
.................... } cell_iv_data_t;
.................... 
.................... typedef struct {
....................     unsigned int32 time;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 pd;
.................... } env_data_t;
.................... 
.................... typedef struct{
....................     cell_iv_data_t cell1_iv_data;
....................     cell_iv_data_t cell2_iv_data;
.................... } sweep_result_t;
.................... 
.................... typedef struct {
....................     int1 cell1;
....................     int1 cell2;
....................     unsigned int16 curr_limit;
.................... }sweep_setting_t;
.................... 
.................... 
.................... void meas_env_data(env_data_t *env_data_ptr);
.................... void meas_iv(sweep_setting_t *sweep_config_ptr, sweep_result_t *sweep_result_ptr);
.................... void save_sweep_result(env_data_t *env_data_ptr, sweep_result_t *sweep_result_ptr);
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... // ================================== ADD NEW DEFINES HERE ==================================
.................... // =============================================================================================
.................... // MT25Q Flash Memory Specifications
.................... #define MT25Q_BLOCK_SIZE   4096
.................... #define MT25Q_BLOCK_NUM    8192
.................... #define DEV
.................... #ifdef DEV
.................... typedef enum mt25q_cmd{
....................     //Software RESET Operations
....................     MT25Q_CMD_RESET_ENABLE = 0x66,
....................     MT25Q_CMD_RESET_MEMORY = 0x99,
.................... 
....................     //READ ID Operations
....................     MT25Q_CMD_READ_ID = 0x9F,
....................     MT25Q_CMD_READ_ID_MULTI_IO = 0xAF,
....................     MT25Q_CMD_READ_PARAMETER = 0x5A,
.................... 
....................     //READ MEMORY Operations
....................     MT25Q_CMD_READ = 0x03,
....................     MT25Q_CMD_READ_FAST = 0x0B,
....................     MT25Q_CMD_READ_DUAL_OUTPUT_FAST = 0x3B,
....................     MT25Q_CMD_READ_DUAL_IO_FAST = 0xBB,
....................     MT25Q_CMD_READ_QUAD_OUTPUT_FAST = 0x6B,
....................     MT25Q_CMD_READ_QUAD_IO_FAST = 0xEB,
....................     MT25Q_CMD_READ_QUAD_IO = 0x6B,
....................     MT25Q_CMD_READ_DTR_FAST = 0x0D,
....................     MT25Q_CMD_READ_DTR_OUTPUT_FAST = 0x3D,
....................     MT25Q_CMD_READ_DTR_IO_FAST = 0xBD,
....................     MT25Q_CMD_READ_DTR_QUAD_OUTPUT_FAST = 0x6D,
....................     MT25Q_CMD_READ_DTR_QUAD_IO_FAST = 0xED, 
....................     MT25Q_CMD_READ_QUAD_IO_WORD = 0xE7,
.................... 
....................     //READ MEMORY Operations with 4-Byte Address
....................     MT25Q_CMD_4BYTE_READ = 0x13,
....................     MT25Q_CMD_4BYTE_READ_FAST = 0x0C,
....................     MT25Q_CMD_4BYTE_READ_DUAL_OUTPUT_FAST = 0x3C,
....................     MT25Q_CMD_4BYTE_DUAL_IO_FAST_READ = 0xBC,  
....................     MT25Q_CMD_4BYTE_QUAD_OUTPUT_FAST_READ = 0x6C,
....................     MT25Q_CMD_4BYTE_QUAD_IO_FAST_READ = 0xEC,   
....................     MT25Q_CMD_4BYTE_DTR_FAST_READ = 0x0E,
....................     MT25Q_CMD_4BYTE_DTR_DUAL_IO_FAST_READ = 0xBE,
....................     MT25Q_CMD_4BYTE_DTR_QUAD_IO_FAST_READ = 0xEE,
.................... 
....................     //WRITE Operations
....................     MT25Q_CMD_WRITE_ENABLE = 0x06,
....................     MT25Q_CMD_WRITE_DISABLE = 0x04,
.................... 
....................     //READ REGISTER Operations
....................     MT25Q_CMD_READ_STATUS_REG = 0x05,
....................     MT25Q_CMD_READ_FLAG_STATUS_REG = 0x70,
....................     MT25Q_CMD_READ_NONVOL_CFG_REG = 0xB5,
....................     MT25Q_CMD_READ_VOL_CFG_REG = 0x85,
....................     MT25Q_CMD_READ_ENHANCED_VOL_CFG_REG = 0x65,
....................     MT25Q_CMD_READ_EXT_ADDR_REG = 0xC8,
....................     MT25Q_CMD_READ_GENERAL_PURPOSE_REG = 0x96,
.................... 
....................     //WRITE REGISTER Operations
....................     MT25Q_CMD_WRITE_STATUS_REG = 0x01,
....................     MT25Q_CMD_WRITE_NONVOL_CFG_REG = 0xB1,
....................     MT25Q_CMD_WRITE_VOL_CFG_REG = 0x81,
....................     MT25Q_CMD_WRITE_ENHANCED_VOL_CFG_REG = 0x61,
....................     MT25Q_CMD_WRITE_EXT_ADDR_REG = 0xC5,
.................... 
....................     //CLEAR FLAG STATUS REGISTER Operation
....................     MT25Q_CMD_CLEAR_FLAG_STATUS_REG = 0x50,
.................... 
....................     //PROGRAM Operations
....................     MT25Q_CMD_PAGE_PROGRAM = 0x02,
....................     MT25Q_CMD_DUAL_INPUT_FAST_PROGRAM = 0xA2,
....................     MT25Q_CMD_EXT_DUAL_INPUT_FAST_PROGRAM = 0xD2,
....................     MT25Q_CMD_QUAD_INPUT_FAST_PROGRAM = 0x32,
....................     MT25Q_CMD_EXT_QUAD_INPUT_FAST_PROGRAM = 0x38,
.................... 
....................     //PROGRAM Operations with 4-Byte Address
....................     MT25Q_CMD_4BYTE_PAGE_PROGRAM = 0x12,
....................     MT25Q_CMD_4BYTE_QUAD_INPUT_FAST_PROGRAM = 0x34,
....................     MT25Q_CMD_4BYTE_QUAD_INPUT_EXT_FAST_PROGRAM = 0x3E,
.................... 
....................     //ERASE Operations
....................     MT25Q_CMD_ERASE_32KB_SUBSECTOR = 0x52,
....................     MT25Q_CMD_ERASE_4KB_SUBSECTOR = 0x20,
....................     MT25Q_CMD_ERASE_SECTOR = 0xD8,
....................     MT25Q_CMD_ERASE_BULK = 0xC7,
.................... 
....................     //ERASE Operations with 4-Byte Address
....................     MT25Q_CMD_4BYTE_ERASE_SECTOR = 0xDC,
....................     MT25Q_CMD_4BYTE_ERASE_4KB_SUBSECTOR = 0x21,
....................     
....................     //SUSPEND/RESUME Operations
....................     MT25Q_CMD_PROGRAM_ERASE_SUSPEND = 0x75,
....................     MT25Q_CMD_PROGRAM_ERASE_RESUME = 0x7A,
.................... 
....................     //ONE-WIRE PROGRAMMING Operations
....................     MT25Q_CMD_READ_OPT_ARRAY = 0x4B,
....................     MT25Q_CMD_PROGRAM_OPT_ARRYA = 0x42,
.................... 
....................     //4-BYTE ADDRESSING Operations
....................     MT25Q_CMD_ENTER_4BYTE_ADDR_MODE = 0xB7,
....................     MT25Q_CMD_EXIT_4BYTE_ADDR_MODE = 0xE9,
.................... 
....................     //QUAD PROTOCOL Operations
....................     MT25Q_CMD_ENTER_QUAD_IO_MODE = 0x35,
....................     MT25Q_CMD_RESET_QUAD_IO_MODE = 0xF5,
.................... 
....................     //DEEP POWER-DOWN Operations
....................     MT25Q_CMD_DEEP_POWER_DOWN = 0xB9,
....................     MT25Q_CMD_RELEASE_FROM_DEEP_POWER_DOWN = 0xAB,
.................... 
....................     //ADVANCED PROGRAM/ERASE CONTROLS
....................     MT25Q_CMD_READ_SECTOR_PROTECTION = 0x2D,
....................     MT25Q_CMD_PROGRAM_SECTOR_PROTECTION = 0x2C,
....................     MT25Q_CMD_READ_VOLATILE_LOCK_BITS = 0xE8,
....................     MT25Q_CMD_WRITE_VOLATILE_LOCK_BITS = 0xE5,
....................     MT25Q_CMD_READ_NONVOLATILE_LOCK_BITS = 0xE2,
....................     MT25Q_CMD_WRITE_NONVOLATILE_LOCK_BITS = 0xE3,
....................     MT25Q_CMD_READ_GLOBAL_FREEZE_BIT = 0xA7,
....................     MT25Q_CMD_WRITE_GLOBAL_FREEZE_BIT = 0xA6,
....................     MT25Q_CMD_READ_PASSWORD = 0x27,
....................     MT25Q_CMD_WRITE_PASSWORD = 0x28,
....................     MT25Q_CMD_UNLOCK_PASSWORD = 0x29,
.................... 
....................     //ADVANCED SECTOR PROTECTION Operations
....................     MT25Q_CMD_4BYTE_READ_VOLATILE_LOCK_BITS = 0xE0,
....................     MT25Q_CMD_4BYTE_WRITE_VOLATILE_LOCK_BITS = 0xE1,
.................... 
....................     //ADVANCED FUNCTIONS INTERFACE Operations
....................     MT25Q_CMD_INTERFACE_ACTIVATION = 0x98,
....................     MT25Q_CMD_CYCLIC_REDUNDANCY_CHECK = 0x9B
.................... } mt25q_cmd_t;
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 all;  // 全体アクセス
....................     struct {
....................         unsigned int8 ADDRESSING_4BYTE     : 1; // Bit0
....................         unsigned int8 PROTECTION_ERROR     : 1; // Bit1
....................         unsigned int8 PROGRAM_SUSPEND      : 1; // Bit2
....................         unsigned int8 RESERVED             : 1; // Bit3
....................         unsigned int8 PROGRAM_FAIL         : 1; // Bit4
....................         unsigned int8 ERASE_FAIL           : 1; // Bit5
....................         unsigned int8 ERASE_SUSPEND        : 1; // Bit6
....................         unsigned int8 PROGRAM_OR_ERASE_BUSY: 1; // Bit7
....................     } bit;
.................... } mt25q_sr1_t;
.................... 
.................... typedef enum {
....................     MT25QL64,
....................     MT25QL128,
....................     MT25QL256,
....................     MT25QL512,
....................     MT25QL01G
.................... } mt25q_model_t;
.................... 
.................... 
.................... typedef struct {
....................     mt25q_model_t model;
....................     unsigned int32 size_bytes;
....................     unsigned int32 page_size_bytes;
....................     unsigned int32 sector_size_bytes;
....................     unsigned int32 subsector_32k_size_bytes;
....................     unsigned int32 subsector_4k_size_bytes;
.................... } mt25q_info_t;
.................... 
.................... typedef enum {
....................     MT25Q_FUNC_READ,
....................     MT25Q_FUNC_WRITE,
....................     MT25Q_FUNC_ERASE
.................... } mt25q_func_t;
.................... 
.................... typedef struct {
....................     mt25q_func_t function;
....................     unsigned int32 address;
....................     unsigned int8 *data;
....................     unsigned int32 length;
.................... } mt25q_cmd_param_t;
.................... 
.................... #define MT25Q_CMD_MAX_SIZE 8
.................... typedef struct {
....................     unsigned int8 cmd[MT25Q_CMD_MAX_SIZE];
....................     unsigned int8 cmd_length;
.................... } mt25q_send_cmd_t;
.................... 
.................... // void mt25q_make_cmd(mt25q_info_t *flash_info, mt25q_cmd_param_t *cmd_param, mt25q_send_cmd_t *cmd)
.................... 
.................... 
.................... #endif // DEV
.................... #endif
.................... 
.................... #include "../lib/device/ad7490.h"                    // ADCライブラリ
.................... #ifndef  _AD7490_H_
.................... #define  _AD7490_H_
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000011
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000000
.................... 
.................... 
.................... // ----------------------------
.................... // WRITE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_WRITE_DISABLE = 0,  // 書き込み無効
....................     AD7490_WRITE_ENABLE  = 1   // 書き込み有効
.................... } ad7490_write_t;
.................... 
.................... // ----------------------------
.................... // SEQ bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SEQ_DISABLE = 0,
....................     AD7490_SEQ_ENABLE  = 1
.................... } ad7490_seq_t;
.................... 
.................... // ----------------------------
.................... // CODING bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CODING_BINARY  = 0, // ストレートバイナリ
....................     AD7490_CODING_TWOS    = 1  // Two’s complement
.................... } ad7490_coding_t;
.................... 
.................... // ----------------------------
.................... // RANGE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_RANGE_2REF  = 0, // 0〜2*REFIN
....................     AD7490_RANGE_REF   = 1  // 0〜REFIN
.................... } ad7490_range_t;
.................... 
.................... // ----------------------------
.................... // WEAK/TRI bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_DOUT_TRI   = 0, // Three-state
....................     AD7490_DOUT_WEAK  = 1  // Weakly driven
.................... } ad7490_dout_t;
.................... 
.................... // ----------------------------
.................... // SHADOW bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SHADOW_DISABLE = 0,
....................     AD7490_SHADOW_ENABLE  = 1
.................... } ad7490_shadow_t;
.................... 
.................... // ----------------------------
.................... // Power Mode (PM1, PM0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_PWR_NORMAL    = 0, // 00
....................     AD7490_PWR_FULLDOWN  = 1, // 01
....................     AD7490_PWR_AUTO      = 2, // 10
....................     AD7490_PWR_SHUTDOWN  = 3  // 11
.................... } ad7490_pwr_mode_t;
.................... 
.................... // ----------------------------
.................... // Channel Address (ADD3–ADD0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CH0  = 0,
....................     AD7490_CH1  = 1,
....................     AD7490_CH2  = 2,
....................     AD7490_CH3  = 3,
....................     AD7490_CH4  = 4,
....................     AD7490_CH5  = 5,
....................     AD7490_CH6  = 6,
....................     AD7490_CH7  = 7,
....................     AD7490_CH8  = 8,
....................     AD7490_CH9  = 9,
....................     AD7490_CH10 = 10,
....................     AD7490_CH11 = 11,
....................     AD7490_CH12 = 12,
....................     AD7490_CH13 = 13,
....................     AD7490_CH14 = 14,
....................     AD7490_CH15 = 15
.................... } ad7490_channel_t;
.................... 
.................... typedef struct {
....................     ad7490_coding_t coding;
....................     ad7490_range_t range;
....................     ad7490_dout_t dout_mode;
....................     ad7490_shadow_t shadow;
....................     ad7490_pwr_mode_t power_mode;
....................     ad7490_seq_t seq_mode;
.................... } ad7490_config_t;
.................... 
.................... unsigned int16 ad7490_cmd(ad7490_config_t config);
.................... 
.................... 
.................... #endif // _AD7490_H_
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_flash.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_save(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void mode_meas_iv_1sweep(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS IV 1 SWEEP\r\n");
*
0E418:  MOVLW  DA
0E41A:  MOVWF  FF6
0E41C:  MOVLW  14
0E41E:  MOVWF  FF7
0E420:  MOVLW  00
0E422:  MOVWF  FF8
0E424:  CALL   22DC
.................... 
....................    mode_misf_erase_and_reset(uplinkcmd_ptr);
0E428:  MOVFF  1A1,1BA
0E42C:  MOVFF  1A0,1B9
0E430:  CALL   757E
.................... 
....................    meas_iv_param_t cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0E434:  MOVFF  1A1,1D7
0E438:  MOVFF  1A0,1D6
0E43C:  CALL   81E2
0E440:  MOVFF  02,03
0E444:  MOVF   01,W
0E446:  MOVWF  FE1
0E448:  MOVFF  03,FE2
0E44C:  MOVLW  01
0E44E:  MOVWF  FEA
0E450:  MOVLW  A2
0E452:  MOVWF  FE9
0E454:  MOVLW  0B
0E456:  MOVWF  01
0E458:  MOVFF  FE6,FEE
0E45C:  DECFSZ 01,F
0E45E:  GOTO   E458
....................    sweep(cmd.log_threshold, cmd.sweep_limit, cmd.pd_threshold);
0E462:  MOVFF  1AA,1D1
0E466:  MOVFF  1A9,1D0
0E46A:  MOVFF  1AC,1D3
0E46E:  MOVFF  1AB,1D2
0E472:  MOVFF  1A6,1D5
0E476:  MOVFF  1A5,1D4
0E47A:  CALL   9A54
.................... 
....................    FlashOperationStruct data = {0};
0E47E:  MOVLB  1
0E480:  CLRF   xAD
0E482:  CLRF   xAE
0E484:  CLRF   xAF
0E486:  CLRF   xB0
0E488:  CLRF   xB1
0E48A:  CLRF   xB2
0E48C:  CLRF   xB3
0E48E:  CLRF   xB4
0E490:  CLRF   xB5
0E492:  CLRF   xB6
0E494:  CLRF   xB7
0E496:  CLRF   xB8
....................    data.func_type = ENUM_SMF_WRITE;
0E498:  CLRF   xAE
....................    data.mission_id = CIGS_IV1_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0E49A:  MOVLW  04
0E49C:  MOVWF  xAD
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0E49E:  MOVLW  02
0E4A0:  MOVWF  xAF
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0E4A2:  BCF    xB0.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0E4A4:  MOVLW  F8
0E4A6:  MOVWF  FF6
0E4A8:  MOVLW  14
0E4AA:  MOVWF  FF7
0E4AC:  MOVLW  00
0E4AE:  MOVWF  FF8
0E4B0:  MOVLB  0
0E4B2:  CALL   22DC
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0E4B6:  MOVLW  0A
0E4B8:  MOVWF  FF6
0E4BA:  MOVLW  15
0E4BC:  MOVWF  FF7
0E4BE:  MOVLW  00
0E4C0:  MOVWF  FF8
0E4C2:  MOVLW  0F
0E4C4:  MOVLB  9
0E4C6:  MOVWF  xB3
0E4C8:  MOVLB  0
0E4CA:  CALL   2312
0E4CE:  MOVFF  1AD,9D9
0E4D2:  MOVLW  37
0E4D4:  MOVLB  9
0E4D6:  MOVWF  xDA
0E4D8:  MOVLB  0
0E4DA:  CALL   2542
0E4DE:  MOVLW  0D
0E4E0:  BTFSS  FA6.6
0E4E2:  GOTO   E4E0
0E4E6:  MOVLB  E
0E4E8:  MOVWF  xF9
0E4EA:  MOVLW  0A
0E4EC:  MOVLB  0
0E4EE:  BTFSS  FA6.6
0E4F0:  GOTO   E4EE
0E4F4:  MOVLB  E
0E4F6:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0E4F8:  MOVLW  20
0E4FA:  MOVWF  FF6
0E4FC:  MOVLW  15
0E4FE:  MOVWF  FF7
0E500:  MOVLW  00
0E502:  MOVWF  FF8
0E504:  MOVLW  0F
0E506:  MOVLB  9
0E508:  MOVWF  xB3
0E50A:  MOVLB  0
0E50C:  CALL   2312
0E510:  MOVFF  1AE,9D9
0E514:  MOVLW  37
0E516:  MOVLB  9
0E518:  MOVWF  xDA
0E51A:  MOVLB  0
0E51C:  CALL   2542
0E520:  MOVLW  0D
0E522:  BTFSS  FA6.6
0E524:  GOTO   E522
0E528:  MOVLB  E
0E52A:  MOVWF  xF9
0E52C:  MOVLW  0A
0E52E:  MOVLB  0
0E530:  BTFSS  FA6.6
0E532:  GOTO   E530
0E536:  MOVLB  E
0E538:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0E53A:  MOVLW  36
0E53C:  MOVWF  FF6
0E53E:  MOVLW  15
0E540:  MOVWF  FF7
0E542:  MOVLW  00
0E544:  MOVWF  FF8
0E546:  MOVLW  0F
0E548:  MOVLB  9
0E54A:  MOVWF  xB3
0E54C:  MOVLB  0
0E54E:  CALL   2312
0E552:  MOVFF  1AF,9D9
0E556:  MOVLW  37
0E558:  MOVLB  9
0E55A:  MOVWF  xDA
0E55C:  MOVLB  0
0E55E:  CALL   2542
0E562:  MOVLW  0D
0E564:  BTFSS  FA6.6
0E566:  GOTO   E564
0E56A:  MOVLB  E
0E56C:  MOVWF  xF9
0E56E:  MOVLW  0A
0E570:  MOVLB  0
0E572:  BTFSS  FA6.6
0E574:  GOTO   E572
0E578:  MOVLB  E
0E57A:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0E57C:  MOVLW  00
0E57E:  MOVLB  1
0E580:  BTFSC  xB0.0
0E582:  MOVLW  01
0E584:  MOVWF  xB9
0E586:  MOVLW  4C
0E588:  MOVWF  FF6
0E58A:  MOVLW  15
0E58C:  MOVWF  FF7
0E58E:  MOVLW  00
0E590:  MOVWF  FF8
0E592:  MOVLW  0F
0E594:  MOVLB  9
0E596:  MOVWF  xB3
0E598:  MOVLB  0
0E59A:  CALL   2312
0E59E:  MOVFF  1B9,9D9
0E5A2:  MOVLW  37
0E5A4:  MOVLB  9
0E5A6:  MOVWF  xDA
0E5A8:  MOVLB  0
0E5AA:  CALL   2542
0E5AE:  MOVLW  0D
0E5B0:  BTFSS  FA6.6
0E5B2:  GOTO   E5B0
0E5B6:  MOVLB  E
0E5B8:  MOVWF  xF9
0E5BA:  MOVLW  0A
0E5BC:  MOVLB  0
0E5BE:  BTFSS  FA6.6
0E5C0:  GOTO   E5BE
0E5C4:  MOVLB  E
0E5C6:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0E5C8:  MOVLW  62
0E5CA:  MOVWF  FF6
0E5CC:  MOVLW  15
0E5CE:  MOVWF  FF7
0E5D0:  MOVLW  00
0E5D2:  MOVWF  FF8
0E5D4:  MOVLW  0F
0E5D6:  MOVLB  9
0E5D8:  MOVWF  xB3
0E5DA:  MOVLB  0
0E5DC:  CALL   2312
0E5E0:  MOVLW  02
0E5E2:  MOVLB  1
0E5E4:  MOVWF  xB9
0E5E6:  MOVLB  0
0E5E8:  MOVLW  30
0E5EA:  BTFSS  FA6.6
0E5EC:  GOTO   E5EA
0E5F0:  MOVLB  E
0E5F2:  MOVWF  xF9
0E5F4:  MOVLB  1
0E5F6:  DECFSZ xB9,F
0E5F8:  BRA    E5FE
0E5FA:  BRA    E604
0E5FC:  MOVLB  0
0E5FE:  MOVLB  0
0E600:  GOTO   E5E8
0E604:  MOVFF  1B1,9D9
0E608:  MOVLW  37
0E60A:  MOVLB  9
0E60C:  MOVWF  xDA
0E60E:  MOVLB  0
0E610:  CALL   2542
0E614:  MOVLW  0D
0E616:  BTFSS  FA6.6
0E618:  GOTO   E616
0E61C:  MOVLB  E
0E61E:  MOVWF  xF9
0E620:  MOVLW  0A
0E622:  MOVLB  0
0E624:  BTFSS  FA6.6
0E626:  GOTO   E624
0E62A:  MOVLB  E
0E62C:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV1_DATA].uncopied_counter);
0E62E:  MOVLW  78
0E630:  MOVWF  FF6
0E632:  MOVLW  15
0E634:  MOVWF  FF7
0E636:  MOVLW  00
0E638:  MOVWF  FF8
0E63A:  MOVLW  0F
0E63C:  MOVLB  9
0E63E:  MOVWF  xB3
0E640:  MOVLB  0
0E642:  CALL   2312
0E646:  MOVLW  02
0E648:  MOVLB  1
0E64A:  MOVWF  xB9
0E64C:  MOVLB  0
0E64E:  MOVLW  30
0E650:  BTFSS  FA6.6
0E652:  GOTO   E650
0E656:  MOVLB  E
0E658:  MOVWF  xF9
0E65A:  MOVLB  1
0E65C:  DECFSZ xB9,F
0E65E:  BRA    E664
0E660:  BRA    E66A
0E662:  MOVLB  0
0E664:  MOVLB  0
0E666:  GOTO   E64E
0E66A:  MOVFF  140,9D9
0E66E:  MOVLW  37
0E670:  MOVLB  9
0E672:  MOVWF  xDA
0E674:  MOVLB  0
0E676:  CALL   2542
0E67A:  MOVLW  0D
0E67C:  BTFSS  FA6.6
0E67E:  GOTO   E67C
0E682:  MOVLB  E
0E684:  MOVWF  xF9
0E686:  MOVLW  0A
0E688:  MOVLB  0
0E68A:  BTFSS  FA6.6
0E68C:  GOTO   E68A
0E690:  MOVLB  E
0E692:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0E694:  MOVLW  01
0E696:  MOVLB  1
0E698:  MOVWF  xD1
0E69A:  MOVLW  AD
0E69C:  MOVWF  xD0
0E69E:  MOVLB  0
0E6A0:  CALL   A72C
.................... 
.................... 
....................    data.func_type = ENUM_SMF_WRITE;
0E6A4:  MOVLB  1
0E6A6:  CLRF   xAE
....................    data.mission_id = CIGS_IV2_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0E6A8:  MOVLW  06
0E6AA:  MOVWF  xAD
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0E6AC:  MOVLW  02
0E6AE:  MOVWF  xAF
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0E6B0:  BCF    xB0.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0E6B2:  MOVLW  8E
0E6B4:  MOVWF  FF6
0E6B6:  MOVLW  15
0E6B8:  MOVWF  FF7
0E6BA:  MOVLW  00
0E6BC:  MOVWF  FF8
0E6BE:  MOVLB  0
0E6C0:  CALL   22DC
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0E6C4:  MOVLW  A0
0E6C6:  MOVWF  FF6
0E6C8:  MOVLW  15
0E6CA:  MOVWF  FF7
0E6CC:  MOVLW  00
0E6CE:  MOVWF  FF8
0E6D0:  MOVLW  0F
0E6D2:  MOVLB  9
0E6D4:  MOVWF  xB3
0E6D6:  MOVLB  0
0E6D8:  CALL   2312
0E6DC:  MOVFF  1AD,9D9
0E6E0:  MOVLW  37
0E6E2:  MOVLB  9
0E6E4:  MOVWF  xDA
0E6E6:  MOVLB  0
0E6E8:  CALL   2542
0E6EC:  MOVLW  0D
0E6EE:  BTFSS  FA6.6
0E6F0:  GOTO   E6EE
0E6F4:  MOVLB  E
0E6F6:  MOVWF  xF9
0E6F8:  MOVLW  0A
0E6FA:  MOVLB  0
0E6FC:  BTFSS  FA6.6
0E6FE:  GOTO   E6FC
0E702:  MOVLB  E
0E704:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0E706:  MOVLW  B6
0E708:  MOVWF  FF6
0E70A:  MOVLW  15
0E70C:  MOVWF  FF7
0E70E:  MOVLW  00
0E710:  MOVWF  FF8
0E712:  MOVLW  0F
0E714:  MOVLB  9
0E716:  MOVWF  xB3
0E718:  MOVLB  0
0E71A:  CALL   2312
0E71E:  MOVFF  1AE,9D9
0E722:  MOVLW  37
0E724:  MOVLB  9
0E726:  MOVWF  xDA
0E728:  MOVLB  0
0E72A:  CALL   2542
0E72E:  MOVLW  0D
0E730:  BTFSS  FA6.6
0E732:  GOTO   E730
0E736:  MOVLB  E
0E738:  MOVWF  xF9
0E73A:  MOVLW  0A
0E73C:  MOVLB  0
0E73E:  BTFSS  FA6.6
0E740:  GOTO   E73E
0E744:  MOVLB  E
0E746:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0E748:  MOVLW  CC
0E74A:  MOVWF  FF6
0E74C:  MOVLW  15
0E74E:  MOVWF  FF7
0E750:  MOVLW  00
0E752:  MOVWF  FF8
0E754:  MOVLW  0F
0E756:  MOVLB  9
0E758:  MOVWF  xB3
0E75A:  MOVLB  0
0E75C:  CALL   2312
0E760:  MOVFF  1AF,9D9
0E764:  MOVLW  37
0E766:  MOVLB  9
0E768:  MOVWF  xDA
0E76A:  MOVLB  0
0E76C:  CALL   2542
0E770:  MOVLW  0D
0E772:  BTFSS  FA6.6
0E774:  GOTO   E772
0E778:  MOVLB  E
0E77A:  MOVWF  xF9
0E77C:  MOVLW  0A
0E77E:  MOVLB  0
0E780:  BTFSS  FA6.6
0E782:  GOTO   E780
0E786:  MOVLB  E
0E788:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0E78A:  MOVLW  00
0E78C:  MOVLB  1
0E78E:  BTFSC  xB0.0
0E790:  MOVLW  01
0E792:  MOVWF  xB9
0E794:  MOVLW  E2
0E796:  MOVWF  FF6
0E798:  MOVLW  15
0E79A:  MOVWF  FF7
0E79C:  MOVLW  00
0E79E:  MOVWF  FF8
0E7A0:  MOVLW  0F
0E7A2:  MOVLB  9
0E7A4:  MOVWF  xB3
0E7A6:  MOVLB  0
0E7A8:  CALL   2312
0E7AC:  MOVFF  1B9,9D9
0E7B0:  MOVLW  37
0E7B2:  MOVLB  9
0E7B4:  MOVWF  xDA
0E7B6:  MOVLB  0
0E7B8:  CALL   2542
0E7BC:  MOVLW  0D
0E7BE:  BTFSS  FA6.6
0E7C0:  GOTO   E7BE
0E7C4:  MOVLB  E
0E7C6:  MOVWF  xF9
0E7C8:  MOVLW  0A
0E7CA:  MOVLB  0
0E7CC:  BTFSS  FA6.6
0E7CE:  GOTO   E7CC
0E7D2:  MOVLB  E
0E7D4:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0E7D6:  MOVLW  F8
0E7D8:  MOVWF  FF6
0E7DA:  MOVLW  15
0E7DC:  MOVWF  FF7
0E7DE:  MOVLW  00
0E7E0:  MOVWF  FF8
0E7E2:  MOVLW  0F
0E7E4:  MOVLB  9
0E7E6:  MOVWF  xB3
0E7E8:  MOVLB  0
0E7EA:  CALL   2312
0E7EE:  MOVLW  02
0E7F0:  MOVLB  1
0E7F2:  MOVWF  xB9
0E7F4:  MOVLB  0
0E7F6:  MOVLW  30
0E7F8:  BTFSS  FA6.6
0E7FA:  GOTO   E7F8
0E7FE:  MOVLB  E
0E800:  MOVWF  xF9
0E802:  MOVLB  1
0E804:  DECFSZ xB9,F
0E806:  BRA    E80C
0E808:  BRA    E812
0E80A:  MOVLB  0
0E80C:  MOVLB  0
0E80E:  GOTO   E7F6
0E812:  MOVFF  1B1,9D9
0E816:  MOVLW  37
0E818:  MOVLB  9
0E81A:  MOVWF  xDA
0E81C:  MOVLB  0
0E81E:  CALL   2542
0E822:  MOVLW  0D
0E824:  BTFSS  FA6.6
0E826:  GOTO   E824
0E82A:  MOVLB  E
0E82C:  MOVWF  xF9
0E82E:  MOVLW  0A
0E830:  MOVLB  0
0E832:  BTFSS  FA6.6
0E834:  GOTO   E832
0E838:  MOVLB  E
0E83A:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV2_DATA].uncopied_counter);
0E83C:  MOVLW  0E
0E83E:  MOVWF  FF6
0E840:  MOVLW  16
0E842:  MOVWF  FF7
0E844:  MOVLW  00
0E846:  MOVWF  FF8
0E848:  MOVLW  0F
0E84A:  MOVLB  9
0E84C:  MOVWF  xB3
0E84E:  MOVLB  0
0E850:  CALL   2312
0E854:  MOVLW  02
0E856:  MOVLB  1
0E858:  MOVWF  xB9
0E85A:  MOVLB  0
0E85C:  MOVLW  30
0E85E:  BTFSS  FA6.6
0E860:  GOTO   E85E
0E864:  MOVLB  E
0E866:  MOVWF  xF9
0E868:  MOVLB  1
0E86A:  DECFSZ xB9,F
0E86C:  BRA    E872
0E86E:  BRA    E878
0E870:  MOVLB  0
0E872:  MOVLB  0
0E874:  GOTO   E85C
0E878:  MOVFF  154,9D9
0E87C:  MOVLW  37
0E87E:  MOVLB  9
0E880:  MOVWF  xDA
0E882:  MOVLB  0
0E884:  CALL   2542
0E888:  MOVLW  0D
0E88A:  BTFSS  FA6.6
0E88C:  GOTO   E88A
0E890:  MOVLB  E
0E892:  MOVWF  xF9
0E894:  MOVLW  0A
0E896:  MOVLB  0
0E898:  BTFSS  FA6.6
0E89A:  GOTO   E898
0E89E:  MOVLB  E
0E8A0:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0E8A2:  MOVLW  01
0E8A4:  MOVLB  1
0E8A6:  MOVWF  xD1
0E8A8:  MOVLW  AD
0E8AA:  MOVWF  xD0
0E8AC:  MOVLB  0
0E8AE:  CALL   A72C
.................... 
....................    misf_update_address_area();
0E8B2:  CALL   5090
0E8B6:  GOTO   F8D2 (RETURN)
.................... 
.................... }
.................... 
.................... void mode_meas_iv_port1(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS IV PORT1\r\n");
*
0EF12:  MOVLW  24
0EF14:  MOVWF  FF6
0EF16:  MOVLW  16
0EF18:  MOVWF  FF7
0EF1A:  MOVLW  00
0EF1C:  MOVWF  FF8
0EF1E:  CALL   22DC
.................... 
....................    mode_misf_erase_and_reset(uplinkcmd_ptr);
0EF22:  MOVFF  1A1,1BA
0EF26:  MOVFF  1A0,1B9
0EF2A:  CALL   757E
.................... 
....................    meas_iv_param_t cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0EF2E:  MOVFF  1A1,1D7
0EF32:  MOVFF  1A0,1D6
0EF36:  CALL   81E2
0EF3A:  MOVFF  02,03
0EF3E:  MOVF   01,W
0EF40:  MOVWF  FE1
0EF42:  MOVFF  03,FE2
0EF46:  MOVLW  01
0EF48:  MOVWF  FEA
0EF4A:  MOVLW  A2
0EF4C:  MOVWF  FE9
0EF4E:  MOVLW  0B
0EF50:  MOVWF  01
0EF52:  MOVFF  FE6,FEE
0EF56:  DECFSZ 01,F
0EF58:  GOTO   EF52
....................    sweep_port1(cmd.sweep_limit);
0EF5C:  MOVFF  1AC,1BA
0EF60:  MOVFF  1AB,1B9
0EF64:  CALL   E8BA
.................... 
....................    FlashOperationStruct data = {0};
0EF68:  MOVLB  1
0EF6A:  CLRF   xAD
0EF6C:  CLRF   xAE
0EF6E:  CLRF   xAF
0EF70:  CLRF   xB0
0EF72:  CLRF   xB1
0EF74:  CLRF   xB2
0EF76:  CLRF   xB3
0EF78:  CLRF   xB4
0EF7A:  CLRF   xB5
0EF7C:  CLRF   xB6
0EF7E:  CLRF   xB7
0EF80:  CLRF   xB8
....................    data.func_type = ENUM_SMF_WRITE;
0EF82:  CLRF   xAE
....................    data.mission_id = CIGS_IV1_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0EF84:  MOVLW  04
0EF86:  MOVWF  xAD
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0EF88:  MOVLW  02
0EF8A:  MOVWF  xAF
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0EF8C:  BCF    xB0.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0EF8E:  MOVLW  40
0EF90:  MOVWF  FF6
0EF92:  MOVLW  16
0EF94:  MOVWF  FF7
0EF96:  MOVLW  00
0EF98:  MOVWF  FF8
0EF9A:  MOVLB  0
0EF9C:  CALL   22DC
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0EFA0:  MOVLW  52
0EFA2:  MOVWF  FF6
0EFA4:  MOVLW  16
0EFA6:  MOVWF  FF7
0EFA8:  MOVLW  00
0EFAA:  MOVWF  FF8
0EFAC:  MOVLW  0F
0EFAE:  MOVLB  9
0EFB0:  MOVWF  xB3
0EFB2:  MOVLB  0
0EFB4:  CALL   2312
0EFB8:  MOVFF  1AD,9D9
0EFBC:  MOVLW  37
0EFBE:  MOVLB  9
0EFC0:  MOVWF  xDA
0EFC2:  MOVLB  0
0EFC4:  CALL   2542
0EFC8:  MOVLW  0D
0EFCA:  BTFSS  FA6.6
0EFCC:  GOTO   EFCA
0EFD0:  MOVLB  E
0EFD2:  MOVWF  xF9
0EFD4:  MOVLW  0A
0EFD6:  MOVLB  0
0EFD8:  BTFSS  FA6.6
0EFDA:  GOTO   EFD8
0EFDE:  MOVLB  E
0EFE0:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0EFE2:  MOVLW  68
0EFE4:  MOVWF  FF6
0EFE6:  MOVLW  16
0EFE8:  MOVWF  FF7
0EFEA:  MOVLW  00
0EFEC:  MOVWF  FF8
0EFEE:  MOVLW  0F
0EFF0:  MOVLB  9
0EFF2:  MOVWF  xB3
0EFF4:  MOVLB  0
0EFF6:  CALL   2312
0EFFA:  MOVFF  1AE,9D9
0EFFE:  MOVLW  37
0F000:  MOVLB  9
0F002:  MOVWF  xDA
0F004:  MOVLB  0
0F006:  CALL   2542
0F00A:  MOVLW  0D
0F00C:  BTFSS  FA6.6
0F00E:  GOTO   F00C
0F012:  MOVLB  E
0F014:  MOVWF  xF9
0F016:  MOVLW  0A
0F018:  MOVLB  0
0F01A:  BTFSS  FA6.6
0F01C:  GOTO   F01A
0F020:  MOVLB  E
0F022:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0F024:  MOVLW  7E
0F026:  MOVWF  FF6
0F028:  MOVLW  16
0F02A:  MOVWF  FF7
0F02C:  MOVLW  00
0F02E:  MOVWF  FF8
0F030:  MOVLW  0F
0F032:  MOVLB  9
0F034:  MOVWF  xB3
0F036:  MOVLB  0
0F038:  CALL   2312
0F03C:  MOVFF  1AF,9D9
0F040:  MOVLW  37
0F042:  MOVLB  9
0F044:  MOVWF  xDA
0F046:  MOVLB  0
0F048:  CALL   2542
0F04C:  MOVLW  0D
0F04E:  BTFSS  FA6.6
0F050:  GOTO   F04E
0F054:  MOVLB  E
0F056:  MOVWF  xF9
0F058:  MOVLW  0A
0F05A:  MOVLB  0
0F05C:  BTFSS  FA6.6
0F05E:  GOTO   F05C
0F062:  MOVLB  E
0F064:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0F066:  MOVLW  00
0F068:  MOVLB  1
0F06A:  BTFSC  xB0.0
0F06C:  MOVLW  01
0F06E:  MOVWF  xB9
0F070:  MOVLW  94
0F072:  MOVWF  FF6
0F074:  MOVLW  16
0F076:  MOVWF  FF7
0F078:  MOVLW  00
0F07A:  MOVWF  FF8
0F07C:  MOVLW  0F
0F07E:  MOVLB  9
0F080:  MOVWF  xB3
0F082:  MOVLB  0
0F084:  CALL   2312
0F088:  MOVFF  1B9,9D9
0F08C:  MOVLW  37
0F08E:  MOVLB  9
0F090:  MOVWF  xDA
0F092:  MOVLB  0
0F094:  CALL   2542
0F098:  MOVLW  0D
0F09A:  BTFSS  FA6.6
0F09C:  GOTO   F09A
0F0A0:  MOVLB  E
0F0A2:  MOVWF  xF9
0F0A4:  MOVLW  0A
0F0A6:  MOVLB  0
0F0A8:  BTFSS  FA6.6
0F0AA:  GOTO   F0A8
0F0AE:  MOVLB  E
0F0B0:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0F0B2:  MOVLW  AA
0F0B4:  MOVWF  FF6
0F0B6:  MOVLW  16
0F0B8:  MOVWF  FF7
0F0BA:  MOVLW  00
0F0BC:  MOVWF  FF8
0F0BE:  MOVLW  0F
0F0C0:  MOVLB  9
0F0C2:  MOVWF  xB3
0F0C4:  MOVLB  0
0F0C6:  CALL   2312
0F0CA:  MOVLW  02
0F0CC:  MOVLB  1
0F0CE:  MOVWF  xB9
0F0D0:  MOVLB  0
0F0D2:  MOVLW  30
0F0D4:  BTFSS  FA6.6
0F0D6:  GOTO   F0D4
0F0DA:  MOVLB  E
0F0DC:  MOVWF  xF9
0F0DE:  MOVLB  1
0F0E0:  DECFSZ xB9,F
0F0E2:  BRA    F0E8
0F0E4:  BRA    F0EE
0F0E6:  MOVLB  0
0F0E8:  MOVLB  0
0F0EA:  GOTO   F0D2
0F0EE:  MOVFF  1B1,9D9
0F0F2:  MOVLW  37
0F0F4:  MOVLB  9
0F0F6:  MOVWF  xDA
0F0F8:  MOVLB  0
0F0FA:  CALL   2542
0F0FE:  MOVLW  0D
0F100:  BTFSS  FA6.6
0F102:  GOTO   F100
0F106:  MOVLB  E
0F108:  MOVWF  xF9
0F10A:  MOVLW  0A
0F10C:  MOVLB  0
0F10E:  BTFSS  FA6.6
0F110:  GOTO   F10E
0F114:  MOVLB  E
0F116:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV1_DATA].uncopied_counter);
0F118:  MOVLW  C0
0F11A:  MOVWF  FF6
0F11C:  MOVLW  16
0F11E:  MOVWF  FF7
0F120:  MOVLW  00
0F122:  MOVWF  FF8
0F124:  MOVLW  0F
0F126:  MOVLB  9
0F128:  MOVWF  xB3
0F12A:  MOVLB  0
0F12C:  CALL   2312
0F130:  MOVLW  02
0F132:  MOVLB  1
0F134:  MOVWF  xB9
0F136:  MOVLB  0
0F138:  MOVLW  30
0F13A:  BTFSS  FA6.6
0F13C:  GOTO   F13A
0F140:  MOVLB  E
0F142:  MOVWF  xF9
0F144:  MOVLB  1
0F146:  DECFSZ xB9,F
0F148:  BRA    F14E
0F14A:  BRA    F154
0F14C:  MOVLB  0
0F14E:  MOVLB  0
0F150:  GOTO   F138
0F154:  MOVFF  140,9D9
0F158:  MOVLW  37
0F15A:  MOVLB  9
0F15C:  MOVWF  xDA
0F15E:  MOVLB  0
0F160:  CALL   2542
0F164:  MOVLW  0D
0F166:  BTFSS  FA6.6
0F168:  GOTO   F166
0F16C:  MOVLB  E
0F16E:  MOVWF  xF9
0F170:  MOVLW  0A
0F172:  MOVLB  0
0F174:  BTFSS  FA6.6
0F176:  GOTO   F174
0F17A:  MOVLB  E
0F17C:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0F17E:  MOVLW  01
0F180:  MOVLB  1
0F182:  MOVWF  xD1
0F184:  MOVLW  AD
0F186:  MOVWF  xD0
0F188:  MOVLB  0
0F18A:  CALL   A72C
.................... 
....................    misf_update_address_area();
0F18E:  CALL   5090
0F192:  GOTO   F8EA (RETURN)
.................... }
.................... 
.................... void mode_meas_iv_port2(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS IV PORT2\r\n");
0F196:  MOVLW  D6
0F198:  MOVWF  FF6
0F19A:  MOVLW  16
0F19C:  MOVWF  FF7
0F19E:  MOVLW  00
0F1A0:  MOVWF  FF8
0F1A2:  CALL   22DC
.................... 
....................    mode_misf_erase_and_reset(uplinkcmd_ptr);
0F1A6:  MOVFF  1A1,1BA
0F1AA:  MOVFF  1A0,1B9
0F1AE:  CALL   757E
....................    meas_iv_param_t cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0F1B2:  MOVFF  1A1,1D7
0F1B6:  MOVFF  1A0,1D6
0F1BA:  CALL   81E2
0F1BE:  MOVFF  02,03
0F1C2:  MOVF   01,W
0F1C4:  MOVWF  FE1
0F1C6:  MOVFF  03,FE2
0F1CA:  MOVLW  01
0F1CC:  MOVWF  FEA
0F1CE:  MOVLW  A2
0F1D0:  MOVWF  FE9
0F1D2:  MOVLW  0B
0F1D4:  MOVWF  01
0F1D6:  MOVFF  FE6,FEE
0F1DA:  DECFSZ 01,F
0F1DC:  GOTO   F1D6
....................    sweep_port1(cmd.sweep_limit);
0F1E0:  MOVFF  1AC,1BA
0F1E4:  MOVFF  1AB,1B9
0F1E8:  CALL   E8BA
.................... 
....................    FlashOperationStruct data = {0};
0F1EC:  MOVLB  1
0F1EE:  CLRF   xAD
0F1F0:  CLRF   xAE
0F1F2:  CLRF   xAF
0F1F4:  CLRF   xB0
0F1F6:  CLRF   xB1
0F1F8:  CLRF   xB2
0F1FA:  CLRF   xB3
0F1FC:  CLRF   xB4
0F1FE:  CLRF   xB5
0F200:  CLRF   xB6
0F202:  CLRF   xB7
0F204:  CLRF   xB8
....................    data.func_type = ENUM_SMF_WRITE;
0F206:  CLRF   xAE
....................    data.mission_id = CIGS_IV2_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0F208:  MOVLW  06
0F20A:  MOVWF  xAD
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0F20C:  MOVLW  02
0F20E:  MOVWF  xAF
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0F210:  BCF    xB0.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0F212:  MOVLW  F2
0F214:  MOVWF  FF6
0F216:  MOVLW  16
0F218:  MOVWF  FF7
0F21A:  MOVLW  00
0F21C:  MOVWF  FF8
0F21E:  MOVLB  0
0F220:  CALL   22DC
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0F224:  MOVLW  04
0F226:  MOVWF  FF6
0F228:  MOVLW  17
0F22A:  MOVWF  FF7
0F22C:  MOVLW  00
0F22E:  MOVWF  FF8
0F230:  MOVLW  0F
0F232:  MOVLB  9
0F234:  MOVWF  xB3
0F236:  MOVLB  0
0F238:  CALL   2312
0F23C:  MOVFF  1AD,9D9
0F240:  MOVLW  37
0F242:  MOVLB  9
0F244:  MOVWF  xDA
0F246:  MOVLB  0
0F248:  CALL   2542
0F24C:  MOVLW  0D
0F24E:  BTFSS  FA6.6
0F250:  GOTO   F24E
0F254:  MOVLB  E
0F256:  MOVWF  xF9
0F258:  MOVLW  0A
0F25A:  MOVLB  0
0F25C:  BTFSS  FA6.6
0F25E:  GOTO   F25C
0F262:  MOVLB  E
0F264:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0F266:  MOVLW  1A
0F268:  MOVWF  FF6
0F26A:  MOVLW  17
0F26C:  MOVWF  FF7
0F26E:  MOVLW  00
0F270:  MOVWF  FF8
0F272:  MOVLW  0F
0F274:  MOVLB  9
0F276:  MOVWF  xB3
0F278:  MOVLB  0
0F27A:  CALL   2312
0F27E:  MOVFF  1AE,9D9
0F282:  MOVLW  37
0F284:  MOVLB  9
0F286:  MOVWF  xDA
0F288:  MOVLB  0
0F28A:  CALL   2542
0F28E:  MOVLW  0D
0F290:  BTFSS  FA6.6
0F292:  GOTO   F290
0F296:  MOVLB  E
0F298:  MOVWF  xF9
0F29A:  MOVLW  0A
0F29C:  MOVLB  0
0F29E:  BTFSS  FA6.6
0F2A0:  GOTO   F29E
0F2A4:  MOVLB  E
0F2A6:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0F2A8:  MOVLW  30
0F2AA:  MOVWF  FF6
0F2AC:  MOVLW  17
0F2AE:  MOVWF  FF7
0F2B0:  MOVLW  00
0F2B2:  MOVWF  FF8
0F2B4:  MOVLW  0F
0F2B6:  MOVLB  9
0F2B8:  MOVWF  xB3
0F2BA:  MOVLB  0
0F2BC:  CALL   2312
0F2C0:  MOVFF  1AF,9D9
0F2C4:  MOVLW  37
0F2C6:  MOVLB  9
0F2C8:  MOVWF  xDA
0F2CA:  MOVLB  0
0F2CC:  CALL   2542
0F2D0:  MOVLW  0D
0F2D2:  BTFSS  FA6.6
0F2D4:  GOTO   F2D2
0F2D8:  MOVLB  E
0F2DA:  MOVWF  xF9
0F2DC:  MOVLW  0A
0F2DE:  MOVLB  0
0F2E0:  BTFSS  FA6.6
0F2E2:  GOTO   F2E0
0F2E6:  MOVLB  E
0F2E8:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0F2EA:  MOVLW  00
0F2EC:  MOVLB  1
0F2EE:  BTFSC  xB0.0
0F2F0:  MOVLW  01
0F2F2:  MOVWF  xB9
0F2F4:  MOVLW  46
0F2F6:  MOVWF  FF6
0F2F8:  MOVLW  17
0F2FA:  MOVWF  FF7
0F2FC:  MOVLW  00
0F2FE:  MOVWF  FF8
0F300:  MOVLW  0F
0F302:  MOVLB  9
0F304:  MOVWF  xB3
0F306:  MOVLB  0
0F308:  CALL   2312
0F30C:  MOVFF  1B9,9D9
0F310:  MOVLW  37
0F312:  MOVLB  9
0F314:  MOVWF  xDA
0F316:  MOVLB  0
0F318:  CALL   2542
0F31C:  MOVLW  0D
0F31E:  BTFSS  FA6.6
0F320:  GOTO   F31E
0F324:  MOVLB  E
0F326:  MOVWF  xF9
0F328:  MOVLW  0A
0F32A:  MOVLB  0
0F32C:  BTFSS  FA6.6
0F32E:  GOTO   F32C
0F332:  MOVLB  E
0F334:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0F336:  MOVLW  5C
0F338:  MOVWF  FF6
0F33A:  MOVLW  17
0F33C:  MOVWF  FF7
0F33E:  MOVLW  00
0F340:  MOVWF  FF8
0F342:  MOVLW  0F
0F344:  MOVLB  9
0F346:  MOVWF  xB3
0F348:  MOVLB  0
0F34A:  CALL   2312
0F34E:  MOVLW  02
0F350:  MOVLB  1
0F352:  MOVWF  xB9
0F354:  MOVLB  0
0F356:  MOVLW  30
0F358:  BTFSS  FA6.6
0F35A:  GOTO   F358
0F35E:  MOVLB  E
0F360:  MOVWF  xF9
0F362:  MOVLB  1
0F364:  DECFSZ xB9,F
0F366:  BRA    F36C
0F368:  BRA    F372
0F36A:  MOVLB  0
0F36C:  MOVLB  0
0F36E:  GOTO   F356
0F372:  MOVFF  1B1,9D9
0F376:  MOVLW  37
0F378:  MOVLB  9
0F37A:  MOVWF  xDA
0F37C:  MOVLB  0
0F37E:  CALL   2542
0F382:  MOVLW  0D
0F384:  BTFSS  FA6.6
0F386:  GOTO   F384
0F38A:  MOVLB  E
0F38C:  MOVWF  xF9
0F38E:  MOVLW  0A
0F390:  MOVLB  0
0F392:  BTFSS  FA6.6
0F394:  GOTO   F392
0F398:  MOVLB  E
0F39A:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV2_DATA].uncopied_counter);
0F39C:  MOVLW  72
0F39E:  MOVWF  FF6
0F3A0:  MOVLW  17
0F3A2:  MOVWF  FF7
0F3A4:  MOVLW  00
0F3A6:  MOVWF  FF8
0F3A8:  MOVLW  0F
0F3AA:  MOVLB  9
0F3AC:  MOVWF  xB3
0F3AE:  MOVLB  0
0F3B0:  CALL   2312
0F3B4:  MOVLW  02
0F3B6:  MOVLB  1
0F3B8:  MOVWF  xB9
0F3BA:  MOVLB  0
0F3BC:  MOVLW  30
0F3BE:  BTFSS  FA6.6
0F3C0:  GOTO   F3BE
0F3C4:  MOVLB  E
0F3C6:  MOVWF  xF9
0F3C8:  MOVLB  1
0F3CA:  DECFSZ xB9,F
0F3CC:  BRA    F3D2
0F3CE:  BRA    F3D8
0F3D0:  MOVLB  0
0F3D2:  MOVLB  0
0F3D4:  GOTO   F3BC
0F3D8:  MOVFF  154,9D9
0F3DC:  MOVLW  37
0F3DE:  MOVLB  9
0F3E0:  MOVWF  xDA
0F3E2:  MOVLB  0
0F3E4:  CALL   2542
0F3E8:  MOVLW  0D
0F3EA:  BTFSS  FA6.6
0F3EC:  GOTO   F3EA
0F3F0:  MOVLB  E
0F3F2:  MOVWF  xF9
0F3F4:  MOVLW  0A
0F3F6:  MOVLB  0
0F3F8:  BTFSS  FA6.6
0F3FA:  GOTO   F3F8
0F3FE:  MOVLB  E
0F400:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0F402:  MOVLW  01
0F404:  MOVLB  1
0F406:  MOVWF  xD1
0F408:  MOVLW  AD
0F40A:  MOVWF  xD0
0F40C:  MOVLB  0
0F40E:  CALL   A72C
.................... 
....................    misf_update_address_area();
0F412:  CALL   5090
0F416:  GOTO   F902 (RETURN)
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... }
.................... 
.................... 
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS IV\r\n");
*
0A98C:  MOVLW  88
0A98E:  MOVWF  FF6
0A990:  MOVLW  17
0A992:  MOVWF  FF7
0A994:  MOVLW  00
0A996:  MOVWF  FF8
0A998:  CALL   22DC
....................    meas_iv_param_t cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0A99C:  MOVFF  1A1,1D7
0A9A0:  MOVFF  1A0,1D6
0A9A4:  CALL   81E2
0A9A8:  MOVFF  02,03
0A9AC:  MOVF   01,W
0A9AE:  MOVWF  FE1
0A9B0:  MOVFF  03,FE2
0A9B4:  MOVLW  01
0A9B6:  MOVWF  FEA
0A9B8:  MOVLW  A2
0A9BA:  MOVWF  FE9
0A9BC:  MOVLW  0B
0A9BE:  MOVWF  01
0A9C0:  MOVFF  FE6,FEE
0A9C4:  DECFSZ 01,F
0A9C6:  GOTO   A9C0
....................    print_meas_iv_cmd(&cmd); // Print the command parameters for debugging
0A9CA:  MOVLW  01
0A9CC:  MOVLB  1
0A9CE:  MOVWF  xD1
0A9D0:  MOVLW  A2
0A9D2:  MOVWF  xD0
0A9D4:  MOVLB  0
0A9D6:  GOTO   8E76
....................    piclog_save(cmd.id, PICLOG_PARAM_START); // Log the start of the command execution
0A9DA:  MOVFF  1A2,200
0A9DE:  MOVLB  2
0A9E0:  CLRF   x01
0A9E2:  MOVLB  0
0A9E4:  CALL   5120
.................... 
....................    unsigned int32 start_time = get_current_sec();
....................    unsigned int32 current_sec = 0;
....................    unsigned int16 time_ms = 0;
....................    unsigned int8 counter = 0;
0A9E8:  CALL   3C28
0A9EC:  MOVFF  03,1B0
0A9F0:  MOVFF  02,1AF
0A9F4:  MOVFF  01,1AE
0A9F8:  MOVFF  00,1AD
0A9FC:  MOVLB  1
0A9FE:  CLRF   xB4
0AA00:  CLRF   xB3
0AA02:  CLRF   xB2
0AA04:  CLRF   xB1
0AA06:  CLRF   xB6
0AA08:  CLRF   xB5
0AA0A:  CLRF   xB7
0AA0C:  MOVLB  0
....................    do
....................    {
....................       sweep(cmd.log_threshold, cmd.sweep_limit, cmd.pd_threshold); 
0AA0E:  MOVFF  1AA,1D1
0AA12:  MOVFF  1A9,1D0
0AA16:  MOVFF  1AC,1D3
0AA1A:  MOVFF  1AB,1D2
0AA1E:  MOVFF  1A6,1D5
0AA22:  MOVFF  1A5,1D4
0AA26:  CALL   9A54
....................       if (cmd.interval > 0){
0AA2A:  MOVLB  1
0AA2C:  MOVF   xA3,F
0AA2E:  BTFSC  FD8.2
0AA30:  BRA    AA38
0AA32:  MOVLB  0
0AA34:  GOTO   AA4A
0AA38:  MOVLB  0
0AA3A:  MOVLB  1
0AA3C:  MOVF   xA4,F
0AA3E:  BTFSS  FD8.2
0AA40:  BRA    AA48
0AA42:  MOVLB  0
0AA44:  GOTO   AA72
0AA48:  MOVLB  0
....................          delay_ms(cmd.interval);
0AA4A:  MOVFF  1A4,1D0
0AA4E:  MOVLB  1
0AA50:  INCF   xD0,F
0AA52:  MOVLB  0
0AA54:  MOVLB  1
0AA56:  DECFSZ xD0,F
0AA58:  BRA    AA5E
0AA5A:  MOVLB  0
0AA5C:  BRA    AA6A
0AA5E:  MOVLB  A
0AA60:  SETF   xF3
0AA62:  MOVLB  0
0AA64:  CALL   22AE
0AA68:  BRA    AA54
0AA6A:  MOVFF  1A3,AF3
0AA6E:  CALL   22AE
....................       }
....................       check_and_respond_to_boss(); // Check for boss commands during the wait period
0AA72:  GOTO   A6EC
....................    } while (get_current_sec() - start_time < cmd.meas_time);
0AA76:  CALL   3C28
0AA7A:  MOVFF  03,1D3
0AA7E:  MOVFF  02,1D2
0AA82:  MOVFF  01,1D1
0AA86:  MOVFF  00,1D0
0AA8A:  MOVLB  1
0AA8C:  MOVF   xAD,W
0AA8E:  SUBWF  xD0,F
0AA90:  MOVF   xAE,W
0AA92:  SUBWFB xD1,F
0AA94:  MOVF   xAF,W
0AA96:  SUBWFB xD2,F
0AA98:  MOVF   xB0,W
0AA9A:  SUBWFB xD3,F
0AA9C:  MOVF   xD3,F
0AA9E:  BTFSC  FD8.2
0AAA0:  BRA    AAA8
0AAA2:  MOVLB  0
0AAA4:  GOTO   AAE4
0AAA8:  MOVLB  0
0AAAA:  MOVLB  1
0AAAC:  MOVF   xD2,F
0AAAE:  BTFSC  FD8.2
0AAB0:  BRA    AAB8
0AAB2:  MOVLB  0
0AAB4:  GOTO   AAE4
0AAB8:  MOVLB  0
0AABA:  MOVLB  1
0AABC:  MOVF   xD1,W
0AABE:  SUBWF  xA8,W
0AAC0:  BTFSC  FD8.0
0AAC2:  BRA    AACA
0AAC4:  MOVLB  0
0AAC6:  GOTO   AAE4
0AACA:  MOVLB  0
0AACC:  BTFSS  FD8.2
0AACE:  GOTO   AA0E
0AAD2:  MOVLB  1
0AAD4:  MOVF   xA7,W
0AAD6:  SUBWF  xD0,W
0AAD8:  BTFSC  FD8.0
0AADA:  BRA    AAE2
0AADC:  MOVLB  0
0AADE:  GOTO   AA0E
0AAE2:  MOVLB  0
....................    misf_update_address_area();
0AAE4:  CALL   5090
....................    piclog_save(cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
0AAE8:  MOVFF  1A2,200
0AAEC:  MOVLB  2
0AAEE:  SETF   x01
0AAF0:  MOVLB  0
0AAF2:  CALL   5120
.................... 
.................... 
.................... 
....................    FlashOperationStruct data = {0};
0AAF6:  MOVLB  1
0AAF8:  CLRF   xB8
0AAFA:  CLRF   xB9
0AAFC:  CLRF   xBA
0AAFE:  CLRF   xBB
0AB00:  CLRF   xBC
0AB02:  CLRF   xBD
0AB04:  CLRF   xBE
0AB06:  CLRF   xBF
0AB08:  CLRF   xC0
0AB0A:  CLRF   xC1
0AB0C:  CLRF   xC2
0AB0E:  CLRF   xC3
....................    data.func_type = ENUM_SMF_WRITE;
0AB10:  CLRF   xB9
....................    data.mission_id = CIGS_IV1_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0AB12:  MOVLW  04
0AB14:  MOVWF  xB8
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0AB16:  MOVLW  02
0AB18:  MOVWF  xBA
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0AB1A:  BCF    xBB.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0AB1C:  MOVLW  9E
0AB1E:  MOVWF  FF6
0AB20:  MOVLW  17
0AB22:  MOVWF  FF7
0AB24:  MOVLW  00
0AB26:  MOVWF  FF8
0AB28:  MOVLB  0
0AB2A:  CALL   22DC
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0AB2E:  MOVLW  B0
0AB30:  MOVWF  FF6
0AB32:  MOVLW  17
0AB34:  MOVWF  FF7
0AB36:  MOVLW  00
0AB38:  MOVWF  FF8
0AB3A:  MOVLW  0F
0AB3C:  MOVLB  9
0AB3E:  MOVWF  xB3
0AB40:  MOVLB  0
0AB42:  CALL   2312
0AB46:  MOVFF  1B8,9D9
0AB4A:  MOVLW  37
0AB4C:  MOVLB  9
0AB4E:  MOVWF  xDA
0AB50:  MOVLB  0
0AB52:  CALL   2542
0AB56:  MOVLW  0D
0AB58:  BTFSS  FA6.6
0AB5A:  GOTO   AB58
0AB5E:  MOVLB  E
0AB60:  MOVWF  xF9
0AB62:  MOVLW  0A
0AB64:  MOVLB  0
0AB66:  BTFSS  FA6.6
0AB68:  GOTO   AB66
0AB6C:  MOVLB  E
0AB6E:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0AB70:  MOVLW  C6
0AB72:  MOVWF  FF6
0AB74:  MOVLW  17
0AB76:  MOVWF  FF7
0AB78:  MOVLW  00
0AB7A:  MOVWF  FF8
0AB7C:  MOVLW  0F
0AB7E:  MOVLB  9
0AB80:  MOVWF  xB3
0AB82:  MOVLB  0
0AB84:  CALL   2312
0AB88:  MOVFF  1B9,9D9
0AB8C:  MOVLW  37
0AB8E:  MOVLB  9
0AB90:  MOVWF  xDA
0AB92:  MOVLB  0
0AB94:  CALL   2542
0AB98:  MOVLW  0D
0AB9A:  BTFSS  FA6.6
0AB9C:  GOTO   AB9A
0ABA0:  MOVLB  E
0ABA2:  MOVWF  xF9
0ABA4:  MOVLW  0A
0ABA6:  MOVLB  0
0ABA8:  BTFSS  FA6.6
0ABAA:  GOTO   ABA8
0ABAE:  MOVLB  E
0ABB0:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0ABB2:  MOVLW  DC
0ABB4:  MOVWF  FF6
0ABB6:  MOVLW  17
0ABB8:  MOVWF  FF7
0ABBA:  MOVLW  00
0ABBC:  MOVWF  FF8
0ABBE:  MOVLW  0F
0ABC0:  MOVLB  9
0ABC2:  MOVWF  xB3
0ABC4:  MOVLB  0
0ABC6:  CALL   2312
0ABCA:  MOVFF  1BA,9D9
0ABCE:  MOVLW  37
0ABD0:  MOVLB  9
0ABD2:  MOVWF  xDA
0ABD4:  MOVLB  0
0ABD6:  CALL   2542
0ABDA:  MOVLW  0D
0ABDC:  BTFSS  FA6.6
0ABDE:  GOTO   ABDC
0ABE2:  MOVLB  E
0ABE4:  MOVWF  xF9
0ABE6:  MOVLW  0A
0ABE8:  MOVLB  0
0ABEA:  BTFSS  FA6.6
0ABEC:  GOTO   ABEA
0ABF0:  MOVLB  E
0ABF2:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0ABF4:  MOVLW  00
0ABF6:  MOVLB  1
0ABF8:  BTFSC  xBB.0
0ABFA:  MOVLW  01
0ABFC:  MOVWF  xD0
0ABFE:  MOVLW  F2
0AC00:  MOVWF  FF6
0AC02:  MOVLW  17
0AC04:  MOVWF  FF7
0AC06:  MOVLW  00
0AC08:  MOVWF  FF8
0AC0A:  MOVLW  0F
0AC0C:  MOVLB  9
0AC0E:  MOVWF  xB3
0AC10:  MOVLB  0
0AC12:  CALL   2312
0AC16:  MOVFF  1D0,9D9
0AC1A:  MOVLW  37
0AC1C:  MOVLB  9
0AC1E:  MOVWF  xDA
0AC20:  MOVLB  0
0AC22:  CALL   2542
0AC26:  MOVLW  0D
0AC28:  BTFSS  FA6.6
0AC2A:  GOTO   AC28
0AC2E:  MOVLB  E
0AC30:  MOVWF  xF9
0AC32:  MOVLW  0A
0AC34:  MOVLB  0
0AC36:  BTFSS  FA6.6
0AC38:  GOTO   AC36
0AC3C:  MOVLB  E
0AC3E:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0AC40:  MOVLW  08
0AC42:  MOVWF  FF6
0AC44:  MOVLW  18
0AC46:  MOVWF  FF7
0AC48:  MOVLW  00
0AC4A:  MOVWF  FF8
0AC4C:  MOVLW  0F
0AC4E:  MOVLB  9
0AC50:  MOVWF  xB3
0AC52:  MOVLB  0
0AC54:  CALL   2312
0AC58:  MOVLW  02
0AC5A:  MOVLB  1
0AC5C:  MOVWF  xD0
0AC5E:  MOVLB  0
0AC60:  MOVLW  30
0AC62:  BTFSS  FA6.6
0AC64:  GOTO   AC62
0AC68:  MOVLB  E
0AC6A:  MOVWF  xF9
0AC6C:  MOVLB  1
0AC6E:  DECFSZ xD0,F
0AC70:  BRA    AC76
0AC72:  BRA    AC7C
0AC74:  MOVLB  0
0AC76:  MOVLB  0
0AC78:  GOTO   AC60
0AC7C:  MOVFF  1BC,9D9
0AC80:  MOVLW  37
0AC82:  MOVLB  9
0AC84:  MOVWF  xDA
0AC86:  MOVLB  0
0AC88:  CALL   2542
0AC8C:  MOVLW  0D
0AC8E:  BTFSS  FA6.6
0AC90:  GOTO   AC8E
0AC94:  MOVLB  E
0AC96:  MOVWF  xF9
0AC98:  MOVLW  0A
0AC9A:  MOVLB  0
0AC9C:  BTFSS  FA6.6
0AC9E:  GOTO   AC9C
0ACA2:  MOVLB  E
0ACA4:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV1_DATA].uncopied_counter);
0ACA6:  MOVLW  1E
0ACA8:  MOVWF  FF6
0ACAA:  MOVLW  18
0ACAC:  MOVWF  FF7
0ACAE:  MOVLW  00
0ACB0:  MOVWF  FF8
0ACB2:  MOVLW  0F
0ACB4:  MOVLB  9
0ACB6:  MOVWF  xB3
0ACB8:  MOVLB  0
0ACBA:  CALL   2312
0ACBE:  MOVLW  02
0ACC0:  MOVLB  1
0ACC2:  MOVWF  xD0
0ACC4:  MOVLB  0
0ACC6:  MOVLW  30
0ACC8:  BTFSS  FA6.6
0ACCA:  GOTO   ACC8
0ACCE:  MOVLB  E
0ACD0:  MOVWF  xF9
0ACD2:  MOVLB  1
0ACD4:  DECFSZ xD0,F
0ACD6:  BRA    ACDC
0ACD8:  BRA    ACE2
0ACDA:  MOVLB  0
0ACDC:  MOVLB  0
0ACDE:  GOTO   ACC6
0ACE2:  MOVFF  140,9D9
0ACE6:  MOVLW  37
0ACE8:  MOVLB  9
0ACEA:  MOVWF  xDA
0ACEC:  MOVLB  0
0ACEE:  CALL   2542
0ACF2:  MOVLW  0D
0ACF4:  BTFSS  FA6.6
0ACF6:  GOTO   ACF4
0ACFA:  MOVLB  E
0ACFC:  MOVWF  xF9
0ACFE:  MOVLW  0A
0AD00:  MOVLB  0
0AD02:  BTFSS  FA6.6
0AD04:  GOTO   AD02
0AD08:  MOVLB  E
0AD0A:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0AD0C:  MOVLW  01
0AD0E:  MOVLB  1
0AD10:  MOVWF  xD1
0AD12:  MOVLW  B8
0AD14:  MOVWF  xD0
0AD16:  MOVLB  0
0AD18:  CALL   A72C
.................... 
.................... 
....................    data.func_type = ENUM_SMF_WRITE;
0AD1C:  MOVLB  1
0AD1E:  CLRF   xB9
....................    data.mission_id = CIGS_IV2_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0AD20:  MOVLW  06
0AD22:  MOVWF  xB8
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0AD24:  MOVLW  02
0AD26:  MOVWF  xBA
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0AD28:  BCF    xBB.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0AD2A:  MOVLW  34
0AD2C:  MOVWF  FF6
0AD2E:  MOVLW  18
0AD30:  MOVWF  FF7
0AD32:  MOVLW  00
0AD34:  MOVWF  FF8
0AD36:  MOVLB  0
0AD38:  CALL   22DC
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0AD3C:  MOVLW  46
0AD3E:  MOVWF  FF6
0AD40:  MOVLW  18
0AD42:  MOVWF  FF7
0AD44:  MOVLW  00
0AD46:  MOVWF  FF8
0AD48:  MOVLW  0F
0AD4A:  MOVLB  9
0AD4C:  MOVWF  xB3
0AD4E:  MOVLB  0
0AD50:  CALL   2312
0AD54:  MOVFF  1B8,9D9
0AD58:  MOVLW  37
0AD5A:  MOVLB  9
0AD5C:  MOVWF  xDA
0AD5E:  MOVLB  0
0AD60:  CALL   2542
0AD64:  MOVLW  0D
0AD66:  BTFSS  FA6.6
0AD68:  GOTO   AD66
0AD6C:  MOVLB  E
0AD6E:  MOVWF  xF9
0AD70:  MOVLW  0A
0AD72:  MOVLB  0
0AD74:  BTFSS  FA6.6
0AD76:  GOTO   AD74
0AD7A:  MOVLB  E
0AD7C:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0AD7E:  MOVLW  5C
0AD80:  MOVWF  FF6
0AD82:  MOVLW  18
0AD84:  MOVWF  FF7
0AD86:  MOVLW  00
0AD88:  MOVWF  FF8
0AD8A:  MOVLW  0F
0AD8C:  MOVLB  9
0AD8E:  MOVWF  xB3
0AD90:  MOVLB  0
0AD92:  CALL   2312
0AD96:  MOVFF  1B9,9D9
0AD9A:  MOVLW  37
0AD9C:  MOVLB  9
0AD9E:  MOVWF  xDA
0ADA0:  MOVLB  0
0ADA2:  CALL   2542
0ADA6:  MOVLW  0D
0ADA8:  BTFSS  FA6.6
0ADAA:  GOTO   ADA8
0ADAE:  MOVLB  E
0ADB0:  MOVWF  xF9
0ADB2:  MOVLW  0A
0ADB4:  MOVLB  0
0ADB6:  BTFSS  FA6.6
0ADB8:  GOTO   ADB6
0ADBC:  MOVLB  E
0ADBE:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0ADC0:  MOVLW  72
0ADC2:  MOVWF  FF6
0ADC4:  MOVLW  18
0ADC6:  MOVWF  FF7
0ADC8:  MOVLW  00
0ADCA:  MOVWF  FF8
0ADCC:  MOVLW  0F
0ADCE:  MOVLB  9
0ADD0:  MOVWF  xB3
0ADD2:  MOVLB  0
0ADD4:  CALL   2312
0ADD8:  MOVFF  1BA,9D9
0ADDC:  MOVLW  37
0ADDE:  MOVLB  9
0ADE0:  MOVWF  xDA
0ADE2:  MOVLB  0
0ADE4:  CALL   2542
0ADE8:  MOVLW  0D
0ADEA:  BTFSS  FA6.6
0ADEC:  GOTO   ADEA
0ADF0:  MOVLB  E
0ADF2:  MOVWF  xF9
0ADF4:  MOVLW  0A
0ADF6:  MOVLB  0
0ADF8:  BTFSS  FA6.6
0ADFA:  GOTO   ADF8
0ADFE:  MOVLB  E
0AE00:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0AE02:  MOVLW  00
0AE04:  MOVLB  1
0AE06:  BTFSC  xBB.0
0AE08:  MOVLW  01
0AE0A:  MOVWF  xD0
0AE0C:  MOVLW  88
0AE0E:  MOVWF  FF6
0AE10:  MOVLW  18
0AE12:  MOVWF  FF7
0AE14:  MOVLW  00
0AE16:  MOVWF  FF8
0AE18:  MOVLW  0F
0AE1A:  MOVLB  9
0AE1C:  MOVWF  xB3
0AE1E:  MOVLB  0
0AE20:  CALL   2312
0AE24:  MOVFF  1D0,9D9
0AE28:  MOVLW  37
0AE2A:  MOVLB  9
0AE2C:  MOVWF  xDA
0AE2E:  MOVLB  0
0AE30:  CALL   2542
0AE34:  MOVLW  0D
0AE36:  BTFSS  FA6.6
0AE38:  GOTO   AE36
0AE3C:  MOVLB  E
0AE3E:  MOVWF  xF9
0AE40:  MOVLW  0A
0AE42:  MOVLB  0
0AE44:  BTFSS  FA6.6
0AE46:  GOTO   AE44
0AE4A:  MOVLB  E
0AE4C:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0AE4E:  MOVLW  9E
0AE50:  MOVWF  FF6
0AE52:  MOVLW  18
0AE54:  MOVWF  FF7
0AE56:  MOVLW  00
0AE58:  MOVWF  FF8
0AE5A:  MOVLW  0F
0AE5C:  MOVLB  9
0AE5E:  MOVWF  xB3
0AE60:  MOVLB  0
0AE62:  CALL   2312
0AE66:  MOVLW  02
0AE68:  MOVLB  1
0AE6A:  MOVWF  xD0
0AE6C:  MOVLB  0
0AE6E:  MOVLW  30
0AE70:  BTFSS  FA6.6
0AE72:  GOTO   AE70
0AE76:  MOVLB  E
0AE78:  MOVWF  xF9
0AE7A:  MOVLB  1
0AE7C:  DECFSZ xD0,F
0AE7E:  BRA    AE84
0AE80:  BRA    AE8A
0AE82:  MOVLB  0
0AE84:  MOVLB  0
0AE86:  GOTO   AE6E
0AE8A:  MOVFF  1BC,9D9
0AE8E:  MOVLW  37
0AE90:  MOVLB  9
0AE92:  MOVWF  xDA
0AE94:  MOVLB  0
0AE96:  CALL   2542
0AE9A:  MOVLW  0D
0AE9C:  BTFSS  FA6.6
0AE9E:  GOTO   AE9C
0AEA2:  MOVLB  E
0AEA4:  MOVWF  xF9
0AEA6:  MOVLW  0A
0AEA8:  MOVLB  0
0AEAA:  BTFSS  FA6.6
0AEAC:  GOTO   AEAA
0AEB0:  MOVLB  E
0AEB2:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV2_DATA].uncopied_counter);
0AEB4:  MOVLW  B4
0AEB6:  MOVWF  FF6
0AEB8:  MOVLW  18
0AEBA:  MOVWF  FF7
0AEBC:  MOVLW  00
0AEBE:  MOVWF  FF8
0AEC0:  MOVLW  0F
0AEC2:  MOVLB  9
0AEC4:  MOVWF  xB3
0AEC6:  MOVLB  0
0AEC8:  CALL   2312
0AECC:  MOVLW  02
0AECE:  MOVLB  1
0AED0:  MOVWF  xD0
0AED2:  MOVLB  0
0AED4:  MOVLW  30
0AED6:  BTFSS  FA6.6
0AED8:  GOTO   AED6
0AEDC:  MOVLB  E
0AEDE:  MOVWF  xF9
0AEE0:  MOVLB  1
0AEE2:  DECFSZ xD0,F
0AEE4:  BRA    AEEA
0AEE6:  BRA    AEF0
0AEE8:  MOVLB  0
0AEEA:  MOVLB  0
0AEEC:  GOTO   AED4
0AEF0:  MOVFF  154,9D9
0AEF4:  MOVLW  37
0AEF6:  MOVLB  9
0AEF8:  MOVWF  xDA
0AEFA:  MOVLB  0
0AEFC:  CALL   2542
0AF00:  MOVLW  0D
0AF02:  BTFSS  FA6.6
0AF04:  GOTO   AF02
0AF08:  MOVLB  E
0AF0A:  MOVWF  xF9
0AF0C:  MOVLW  0A
0AF0E:  MOVLB  0
0AF10:  BTFSS  FA6.6
0AF12:  GOTO   AF10
0AF16:  MOVLB  E
0AF18:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0AF1A:  MOVLW  01
0AF1C:  MOVLB  1
0AF1E:  MOVWF  xD1
0AF20:  MOVLW  B8
0AF22:  MOVWF  xD0
0AF24:  MOVLB  0
0AF26:  CALL   A72C
.................... 
.................... 
....................    FlashOperationStruct piclog = {0};
0AF2A:  MOVLB  1
0AF2C:  CLRF   xC4
0AF2E:  CLRF   xC5
0AF30:  CLRF   xC6
0AF32:  CLRF   xC7
0AF34:  CLRF   xC8
0AF36:  CLRF   xC9
0AF38:  CLRF   xCA
0AF3A:  CLRF   xCB
0AF3C:  CLRF   xCC
0AF3E:  CLRF   xCD
0AF40:  CLRF   xCE
0AF42:  CLRF   xCF
....................    piclog.func_type = ENUM_SMF_WRITE;
0AF44:  CLRF   xC5
....................    piclog.mission_id = FLASH_ID_PICLOG; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0AF46:  MOVLW  01
0AF48:  MOVWF  xC4
....................    piclog.write_mode = SMF_WRITE_CIRCULAR;
0AF4A:  MOVLW  02
0AF4C:  MOVWF  xC6
....................    piclog.source_type = SOURCE_MISF_UNCOPIED;
0AF4E:  BCF    xC7.0
.................... 
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0AF50:  MOVLW  CA
0AF52:  MOVWF  FF6
0AF54:  MOVLW  18
0AF56:  MOVWF  FF7
0AF58:  MOVLW  00
0AF5A:  MOVWF  FF8
0AF5C:  MOVLB  0
0AF5E:  CALL   22DC
....................    fprintf(PC, "\tMission ID:   %02X\r\n", piclog.mission_id);
0AF62:  MOVLW  DC
0AF64:  MOVWF  FF6
0AF66:  MOVLW  18
0AF68:  MOVWF  FF7
0AF6A:  MOVLW  00
0AF6C:  MOVWF  FF8
0AF6E:  MOVLW  0F
0AF70:  MOVLB  9
0AF72:  MOVWF  xB3
0AF74:  MOVLB  0
0AF76:  CALL   2312
0AF7A:  MOVFF  1C4,9D9
0AF7E:  MOVLW  37
0AF80:  MOVLB  9
0AF82:  MOVWF  xDA
0AF84:  MOVLB  0
0AF86:  CALL   2542
0AF8A:  MOVLW  0D
0AF8C:  BTFSS  FA6.6
0AF8E:  GOTO   AF8C
0AF92:  MOVLB  E
0AF94:  MOVWF  xF9
0AF96:  MOVLW  0A
0AF98:  MOVLB  0
0AF9A:  BTFSS  FA6.6
0AF9C:  GOTO   AF9A
0AFA0:  MOVLB  E
0AFA2:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", piclog.func_type);
0AFA4:  MOVLW  F2
0AFA6:  MOVWF  FF6
0AFA8:  MOVLW  18
0AFAA:  MOVWF  FF7
0AFAC:  MOVLW  00
0AFAE:  MOVWF  FF8
0AFB0:  MOVLW  0F
0AFB2:  MOVLB  9
0AFB4:  MOVWF  xB3
0AFB6:  MOVLB  0
0AFB8:  CALL   2312
0AFBC:  MOVFF  1C5,9D9
0AFC0:  MOVLW  37
0AFC2:  MOVLB  9
0AFC4:  MOVWF  xDA
0AFC6:  MOVLB  0
0AFC8:  CALL   2542
0AFCC:  MOVLW  0D
0AFCE:  BTFSS  FA6.6
0AFD0:  GOTO   AFCE
0AFD4:  MOVLB  E
0AFD6:  MOVWF  xF9
0AFD8:  MOVLW  0A
0AFDA:  MOVLB  0
0AFDC:  BTFSS  FA6.6
0AFDE:  GOTO   AFDC
0AFE2:  MOVLB  E
0AFE4:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", piclog.write_mode);
0AFE6:  MOVLW  08
0AFE8:  MOVWF  FF6
0AFEA:  MOVLW  19
0AFEC:  MOVWF  FF7
0AFEE:  MOVLW  00
0AFF0:  MOVWF  FF8
0AFF2:  MOVLW  0F
0AFF4:  MOVLB  9
0AFF6:  MOVWF  xB3
0AFF8:  MOVLB  0
0AFFA:  CALL   2312
0AFFE:  MOVFF  1C6,9D9
0B002:  MOVLW  37
0B004:  MOVLB  9
0B006:  MOVWF  xDA
0B008:  MOVLB  0
0B00A:  CALL   2542
0B00E:  MOVLW  0D
0B010:  BTFSS  FA6.6
0B012:  GOTO   B010
0B016:  MOVLB  E
0B018:  MOVWF  xF9
0B01A:  MOVLW  0A
0B01C:  MOVLB  0
0B01E:  BTFSS  FA6.6
0B020:  GOTO   B01E
0B024:  MOVLB  E
0B026:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", piclog.source_type);
0B028:  MOVLW  00
0B02A:  MOVLB  1
0B02C:  BTFSC  xC7.0
0B02E:  MOVLW  01
0B030:  MOVWF  xD0
0B032:  MOVLW  1E
0B034:  MOVWF  FF6
0B036:  MOVLW  19
0B038:  MOVWF  FF7
0B03A:  MOVLW  00
0B03C:  MOVWF  FF8
0B03E:  MOVLW  0F
0B040:  MOVLB  9
0B042:  MOVWF  xB3
0B044:  MOVLB  0
0B046:  CALL   2312
0B04A:  MOVFF  1D0,9D9
0B04E:  MOVLW  37
0B050:  MOVLB  9
0B052:  MOVWF  xDA
0B054:  MOVLB  0
0B056:  CALL   2542
0B05A:  MOVLW  0D
0B05C:  BTFSS  FA6.6
0B05E:  GOTO   B05C
0B062:  MOVLB  E
0B064:  MOVWF  xF9
0B066:  MOVLW  0A
0B068:  MOVLB  0
0B06A:  BTFSS  FA6.6
0B06C:  GOTO   B06A
0B070:  MOVLB  E
0B072:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", piclog.misf_start_addr);
0B074:  MOVLW  34
0B076:  MOVWF  FF6
0B078:  MOVLW  19
0B07A:  MOVWF  FF7
0B07C:  MOVLW  00
0B07E:  MOVWF  FF8
0B080:  MOVLW  0F
0B082:  MOVLB  9
0B084:  MOVWF  xB3
0B086:  MOVLB  0
0B088:  CALL   2312
0B08C:  MOVLW  02
0B08E:  MOVLB  1
0B090:  MOVWF  xD0
0B092:  MOVLB  0
0B094:  MOVLW  30
0B096:  BTFSS  FA6.6
0B098:  GOTO   B096
0B09C:  MOVLB  E
0B09E:  MOVWF  xF9
0B0A0:  MOVLB  1
0B0A2:  DECFSZ xD0,F
0B0A4:  BRA    B0AA
0B0A6:  BRA    B0B0
0B0A8:  MOVLB  0
0B0AA:  MOVLB  0
0B0AC:  GOTO   B094
0B0B0:  MOVFF  1C8,9D9
0B0B4:  MOVLW  37
0B0B6:  MOVLB  9
0B0B8:  MOVWF  xDA
0B0BA:  MOVLB  0
0B0BC:  CALL   2542
0B0C0:  MOVLW  0D
0B0C2:  BTFSS  FA6.6
0B0C4:  GOTO   B0C2
0B0C8:  MOVLB  E
0B0CA:  MOVWF  xF9
0B0CC:  MOVLW  0A
0B0CE:  MOVLB  0
0B0D0:  BTFSS  FA6.6
0B0D2:  GOTO   B0D0
0B0D6:  MOVLB  E
0B0D8:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[FLASH_ID_PICLOG].uncopied_counter);
0B0DA:  MOVLW  4A
0B0DC:  MOVWF  FF6
0B0DE:  MOVLW  19
0B0E0:  MOVWF  FF7
0B0E2:  MOVLW  00
0B0E4:  MOVWF  FF8
0B0E6:  MOVLW  0F
0B0E8:  MOVLB  9
0B0EA:  MOVWF  xB3
0B0EC:  MOVLB  0
0B0EE:  CALL   2312
0B0F2:  MOVLW  02
0B0F4:  MOVLB  1
0B0F6:  MOVWF  xD0
0B0F8:  MOVLB  0
0B0FA:  MOVLW  30
0B0FC:  BTFSS  FA6.6
0B0FE:  GOTO   B0FC
0B102:  MOVLB  E
0B104:  MOVWF  xF9
0B106:  MOVLB  1
0B108:  DECFSZ xD0,F
0B10A:  BRA    B110
0B10C:  BRA    B116
0B10E:  MOVLB  0
0B110:  MOVLB  0
0B112:  GOTO   B0FA
0B116:  MOVFF  122,9D9
0B11A:  MOVLW  37
0B11C:  MOVLB  9
0B11E:  MOVWF  xDA
0B120:  MOVLB  0
0B122:  CALL   2542
0B126:  MOVLW  0D
0B128:  BTFSS  FA6.6
0B12A:  GOTO   B128
0B12E:  MOVLB  E
0B130:  MOVWF  xF9
0B132:  MOVLW  0A
0B134:  MOVLB  0
0B136:  BTFSS  FA6.6
0B138:  GOTO   B136
0B13C:  MOVLB  E
0B13E:  MOVWF  xF9
....................    enqueue_flash_operation(&piclog); // SMFへのデータコピーを実行する
0B140:  MOVLW  01
0B142:  MOVLB  1
0B144:  MOVWF  xD1
0B146:  MOVLW  C4
0B148:  MOVWF  xD0
0B14A:  MOVLB  0
0B14C:  CALL   A72C
....................    fprintf(PC, "End MODE MEAS IV mission\r\n");
0B150:  MOVLW  60
0B152:  MOVWF  FF6
0B154:  MOVLW  19
0B156:  MOVWF  FF7
0B158:  MOVLW  00
0B15A:  MOVWF  FF8
0B15C:  CALL   22DC
0B160:  GOTO   F7A0 (RETURN)
.................... }
.................... 
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE IV DEBUG\r\n");
*
0C6DA:  MOVLW  7C
0C6DC:  MOVWF  FF6
0C6DE:  MOVLW  19
0C6E0:  MOVWF  FF7
0C6E2:  MOVLW  00
0C6E4:  MOVWF  FF8
0C6E6:  CALL   22DC
.................... 
....................    MEAS_IV_CMD cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0C6EA:  MOVFF  1A1,1D7
0C6EE:  MOVFF  1A0,1D6
0C6F2:  CALL   81E2
0C6F6:  MOVFF  02,03
0C6FA:  MOVF   01,W
0C6FC:  MOVWF  FE1
0C6FE:  MOVFF  03,FE2
0C702:  MOVLW  01
0C704:  MOVWF  FEA
0C706:  MOVLW  A2
0C708:  MOVWF  FE9
0C70A:  MOVLW  0C
0C70C:  MOVWF  01
0C70E:  MOVFF  FE6,FEE
0C712:  DECFSZ 01,F
0C714:  GOTO   C70E
....................    
....................    fprintf(PC, "\tID: %02X\r\n", cmd.id);
0C718:  MOVLW  92
0C71A:  MOVWF  FF6
0C71C:  MOVLW  19
0C71E:  MOVWF  FF7
0C720:  MOVLW  00
0C722:  MOVWF  FF8
0C724:  MOVLW  05
0C726:  MOVLB  9
0C728:  MOVWF  xB3
0C72A:  MOVLB  0
0C72C:  CALL   2312
0C730:  MOVFF  1A2,9D9
0C734:  MOVLW  37
0C736:  MOVLB  9
0C738:  MOVWF  xDA
0C73A:  MOVLB  0
0C73C:  CALL   2542
0C740:  MOVLW  0D
0C742:  BTFSS  FA6.6
0C744:  GOTO   C742
0C748:  MOVLB  E
0C74A:  MOVWF  xF9
0C74C:  MOVLW  0A
0C74E:  MOVLB  0
0C750:  BTFSS  FA6.6
0C752:  GOTO   C750
0C756:  MOVLB  E
0C758:  MOVWF  xF9
....................    fprintf(PC, "\tSleepTime:        0x%04X\r\n", cmd.sleep_time);
0C75A:  MOVLW  9E
0C75C:  MOVWF  FF6
0C75E:  MOVLW  19
0C760:  MOVWF  FF7
0C762:  MOVLW  00
0C764:  MOVWF  FF8
0C766:  MOVLW  15
0C768:  MOVLB  9
0C76A:  MOVWF  xB3
0C76C:  MOVLB  0
0C76E:  CALL   2312
0C772:  MOVLW  02
0C774:  MOVLB  1
0C776:  MOVWF  xB6
0C778:  MOVLB  0
0C77A:  MOVLW  30
0C77C:  BTFSS  FA6.6
0C77E:  GOTO   C77C
0C782:  MOVLB  E
0C784:  MOVWF  xF9
0C786:  MOVLB  1
0C788:  DECFSZ xB6,F
0C78A:  BRA    C790
0C78C:  BRA    C796
0C78E:  MOVLB  0
0C790:  MOVLB  0
0C792:  GOTO   C77A
0C796:  MOVFF  1A3,9D9
0C79A:  MOVLW  37
0C79C:  MOVLB  9
0C79E:  MOVWF  xDA
0C7A0:  MOVLB  0
0C7A2:  CALL   2542
0C7A6:  MOVLW  0D
0C7A8:  BTFSS  FA6.6
0C7AA:  GOTO   C7A8
0C7AE:  MOVLB  E
0C7B0:  MOVWF  xF9
0C7B2:  MOVLW  0A
0C7B4:  MOVLB  0
0C7B6:  BTFSS  FA6.6
0C7B8:  GOTO   C7B6
0C7BC:  MOVLB  E
0C7BE:  MOVWF  xF9
....................    fprintf(PC, "\tLogCurrThreshold: 0x%04X\r\n", cmd.curr_threshold);
0C7C0:  MOVLW  BA
0C7C2:  MOVWF  FF6
0C7C4:  MOVLW  19
0C7C6:  MOVWF  FF7
0C7C8:  MOVLW  00
0C7CA:  MOVWF  FF8
0C7CC:  MOVLW  15
0C7CE:  MOVLB  9
0C7D0:  MOVWF  xB3
0C7D2:  MOVLB  0
0C7D4:  CALL   2312
0C7D8:  MOVLW  02
0C7DA:  MOVLB  1
0C7DC:  MOVWF  xB6
0C7DE:  MOVLB  0
0C7E0:  MOVLW  30
0C7E2:  BTFSS  FA6.6
0C7E4:  GOTO   C7E2
0C7E8:  MOVLB  E
0C7EA:  MOVWF  xF9
0C7EC:  MOVLB  1
0C7EE:  DECFSZ xB6,F
0C7F0:  BRA    C7F6
0C7F2:  BRA    C7FC
0C7F4:  MOVLB  0
0C7F6:  MOVLB  0
0C7F8:  GOTO   C7E0
0C7FC:  MOVFF  1A5,9D9
0C800:  MOVLW  37
0C802:  MOVLB  9
0C804:  MOVWF  xDA
0C806:  MOVLB  0
0C808:  CALL   2542
0C80C:  MOVLW  0D
0C80E:  BTFSS  FA6.6
0C810:  GOTO   C80E
0C814:  MOVLB  E
0C816:  MOVWF  xF9
0C818:  MOVLW  0A
0C81A:  MOVLB  0
0C81C:  BTFSS  FA6.6
0C81E:  GOTO   C81C
0C822:  MOVLB  E
0C824:  MOVWF  xF9
....................    fprintf(PC, "\tPDThreshold:      0x%04X\r\n", cmd.pd_threshold);
0C826:  MOVLW  D6
0C828:  MOVWF  FF6
0C82A:  MOVLW  19
0C82C:  MOVWF  FF7
0C82E:  MOVLW  00
0C830:  MOVWF  FF8
0C832:  MOVLW  15
0C834:  MOVLB  9
0C836:  MOVWF  xB3
0C838:  MOVLB  0
0C83A:  CALL   2312
0C83E:  MOVLW  02
0C840:  MOVLB  1
0C842:  MOVWF  xB6
0C844:  MOVLB  0
0C846:  MOVLW  30
0C848:  BTFSS  FA6.6
0C84A:  GOTO   C848
0C84E:  MOVLB  E
0C850:  MOVWF  xF9
0C852:  MOVLB  1
0C854:  DECFSZ xB6,F
0C856:  BRA    C85C
0C858:  BRA    C862
0C85A:  MOVLB  0
0C85C:  MOVLB  0
0C85E:  GOTO   C846
0C862:  MOVFF  1A7,9D9
0C866:  MOVLW  37
0C868:  MOVLB  9
0C86A:  MOVWF  xDA
0C86C:  MOVLB  0
0C86E:  CALL   2542
0C872:  MOVLW  0D
0C874:  BTFSS  FA6.6
0C876:  GOTO   C874
0C87A:  MOVLB  E
0C87C:  MOVWF  xF9
0C87E:  MOVLW  0A
0C880:  MOVLB  0
0C882:  BTFSS  FA6.6
0C884:  GOTO   C882
0C888:  MOVLB  E
0C88A:  MOVWF  xF9
....................    fprintf(PC, "\tCurrentLimit:     0x%04X\r\n", cmd.curr_limit);
0C88C:  MOVLW  F2
0C88E:  MOVWF  FF6
0C890:  MOVLW  19
0C892:  MOVWF  FF7
0C894:  MOVLW  00
0C896:  MOVWF  FF8
0C898:  MOVLW  15
0C89A:  MOVLB  9
0C89C:  MOVWF  xB3
0C89E:  MOVLB  0
0C8A0:  CALL   2312
0C8A4:  MOVLW  02
0C8A6:  MOVLB  1
0C8A8:  MOVWF  xB6
0C8AA:  MOVLB  0
0C8AC:  MOVLW  30
0C8AE:  BTFSS  FA6.6
0C8B0:  GOTO   C8AE
0C8B4:  MOVLB  E
0C8B6:  MOVWF  xF9
0C8B8:  MOVLB  1
0C8BA:  DECFSZ xB6,F
0C8BC:  BRA    C8C2
0C8BE:  BRA    C8C8
0C8C0:  MOVLB  0
0C8C2:  MOVLB  0
0C8C4:  GOTO   C8AC
0C8C8:  MOVFF  1A9,9D9
0C8CC:  MOVLW  37
0C8CE:  MOVLB  9
0C8D0:  MOVWF  xDA
0C8D2:  MOVLB  0
0C8D4:  CALL   2542
0C8D8:  MOVLW  0D
0C8DA:  BTFSS  FA6.6
0C8DC:  GOTO   C8DA
0C8E0:  MOVLB  E
0C8E2:  MOVWF  xF9
0C8E4:  MOVLW  0A
0C8E6:  MOVLB  0
0C8E8:  BTFSS  FA6.6
0C8EA:  GOTO   C8E8
0C8EE:  MOVLB  E
0C8F0:  MOVWF  xF9
....................    fprintf(PC, "\tMeasurementTime:  0x%04X\r\n", cmd.meas_time);
0C8F2:  MOVLW  0E
0C8F4:  MOVWF  FF6
0C8F6:  MOVLW  1A
0C8F8:  MOVWF  FF7
0C8FA:  MOVLW  00
0C8FC:  MOVWF  FF8
0C8FE:  MOVLW  15
0C900:  MOVLB  9
0C902:  MOVWF  xB3
0C904:  MOVLB  0
0C906:  CALL   2312
0C90A:  MOVLW  02
0C90C:  MOVLB  1
0C90E:  MOVWF  xB6
0C910:  MOVLB  0
0C912:  MOVLW  30
0C914:  BTFSS  FA6.6
0C916:  GOTO   C914
0C91A:  MOVLB  E
0C91C:  MOVWF  xF9
0C91E:  MOVLB  1
0C920:  DECFSZ xB6,F
0C922:  BRA    C928
0C924:  BRA    C92E
0C926:  MOVLB  0
0C928:  MOVLB  0
0C92A:  GOTO   C912
0C92E:  MOVFF  1AB,9D9
0C932:  MOVLW  37
0C934:  MOVLB  9
0C936:  MOVWF  xDA
0C938:  MOVLB  0
0C93A:  CALL   2542
0C93E:  MOVLW  0D
0C940:  BTFSS  FA6.6
0C942:  GOTO   C940
0C946:  MOVLB  E
0C948:  MOVWF  xF9
0C94A:  MOVLW  0A
0C94C:  MOVLB  0
0C94E:  BTFSS  FA6.6
0C950:  GOTO   C94E
0C954:  MOVLB  E
0C956:  MOVWF  xF9
.................... 
....................    piclog_save(cmd.id, PICLOG_PARAM_START); // Log start
0C958:  MOVFF  1A2,200
0C95C:  MOVLB  2
0C95E:  CLRF   x01
0C960:  MOVLB  0
0C962:  CALL   5120
.................... 
....................    unsigned int32 start_time = get_current_sec();
....................    unsigned int32 current_time = 0;
0C966:  CALL   3C28
0C96A:  MOVFF  03,1B1
0C96E:  MOVFF  02,1B0
0C972:  MOVFF  01,1AF
0C976:  MOVFF  00,1AE
0C97A:  MOVLB  1
0C97C:  CLRF   xB5
0C97E:  CLRF   xB4
0C980:  CLRF   xB3
0C982:  CLRF   xB2
....................    test_sweep(cmd.curr_threshold, cmd.curr_limit);
0C984:  MOVFF  1A6,1B7
0C988:  MOVFF  1A5,1B6
0C98C:  MOVFF  1AA,1B9
0C990:  MOVFF  1A9,1B8
0C994:  MOVLB  0
0C996:  GOTO   B164
.................... 
....................    piclog_save(cmd.id, PICLOG_PARAM_END);
0C99A:  MOVFF  1A2,200
0C99E:  MOVLB  2
0C9A0:  SETF   x01
0C9A2:  MOVLB  0
0C9A4:  CALL   5120
....................    fprintf(PC, "[IVDBG] End MODE IV DEBUG\r\n");
0C9A8:  MOVLW  2A
0C9AA:  MOVWF  FF6
0C9AC:  MOVLW  1A
0C9AE:  MOVWF  FF7
0C9B0:  MOVLW  00
0C9B2:  MOVWF  FF8
0C9B4:  CALL   22DC
0C9B8:  GOTO   F7B0 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr)
0C9BC:  MOVLB  1
0C9BE:  CLRF   xA3
0C9C0:  MOVLW  64
0C9C2:  MOVWF  xA2
0C9C4:  SETF   xA5
0C9C6:  SETF   xA4
0C9C8:  MOVLB  0
0C9CA:  CALL   3C28
0C9CE:  MOVFF  03,1A9
0C9D2:  MOVFF  02,1A8
0C9D6:  MOVFF  01,1A7
0C9DA:  MOVFF  00,1A6
0C9DE:  MOVLB  1
0C9E0:  MOVF   xA2,W
0C9E2:  SUBWF  xA6,W
0C9E4:  MOVWF  xAA
0C9E6:  MOVF   xA3,W
0C9E8:  SUBWFB xA7,W
0C9EA:  MOVWF  xAB
0C9EC:  MOVLW  00
0C9EE:  SUBWFB xA8,W
0C9F0:  MOVWF  xAC
0C9F2:  MOVLW  00
0C9F4:  SUBWFB xA9,W
0C9F6:  MOVWF  xAD
.................... {
....................    unsigned int16 interval = 100;   // 測定間隔 [秒]
....................    unsigned int16 end_time = 0xFFFF;
.................... 
....................    unsigned int32 current_time = get_current_sec();
....................    unsigned int32 last_time = current_time - interval;  // 最初にすぐ測定するため
.................... 
....................    // loging data
....................    unsigned int8 logdata[6];
....................    unsigned int16 temp_top;
....................    unsigned int16 temp_bot;
....................    unsigned int16 temp_mis7;
....................    unsigned int16 PD;
.................... 
....................    // Flash Write 
....................    unsigned int32 write_address;
.................... 
....................    fprintf(PC, "temp_top, temp_bot, temp_mis7, pd\r\n");
0C9F8:  MOVLW  46
0C9FA:  MOVWF  FF6
0C9FC:  MOVLW  1A
0C9FE:  MOVWF  FF7
0CA00:  MOVLW  00
0CA02:  MOVWF  FF8
0CA04:  MOVLB  0
0CA06:  CALL   22DC
.................... 
....................    while (true) {
....................        current_time = get_current_sec();
0CA0A:  CALL   3C28
0CA0E:  MOVFF  03,1A9
0CA12:  MOVFF  02,1A8
0CA16:  MOVFF  01,1A7
0CA1A:  MOVFF  00,1A6
.................... 
....................        // intervalごとに測定
....................        if ((current_time - last_time) >= interval) {
0CA1E:  MOVLB  1
0CA20:  MOVF   xAA,W
0CA22:  SUBWF  xA6,W
0CA24:  MOVWF  xC0
0CA26:  MOVF   xAB,W
0CA28:  SUBWFB xA7,W
0CA2A:  MOVWF  xC1
0CA2C:  MOVF   xAC,W
0CA2E:  SUBWFB xA8,W
0CA30:  MOVWF  xC2
0CA32:  MOVF   xAD,W
0CA34:  SUBWFB xA9,W
0CA36:  MOVWF  xC3
0CA38:  MOVF   xC3,F
0CA3A:  BTFSC  FD8.2
0CA3C:  BRA    CA44
0CA3E:  MOVLB  0
0CA40:  GOTO   CA80
0CA44:  MOVLB  0
0CA46:  MOVLB  1
0CA48:  MOVF   xC2,F
0CA4A:  BTFSC  FD8.2
0CA4C:  BRA    CA54
0CA4E:  MOVLB  0
0CA50:  GOTO   CA80
0CA54:  MOVLB  0
0CA56:  MOVLB  1
0CA58:  MOVF   xA3,W
0CA5A:  SUBWF  xC1,W
0CA5C:  BTFSC  FD8.0
0CA5E:  BRA    CA66
0CA60:  MOVLB  0
0CA62:  GOTO   CA9C
0CA66:  MOVLB  0
0CA68:  BTFSS  FD8.2
0CA6A:  GOTO   CA80
0CA6E:  MOVLB  1
0CA70:  MOVF   xA2,W
0CA72:  SUBWF  xC0,W
0CA74:  BTFSC  FD8.0
0CA76:  BRA    CA7E
0CA78:  MOVLB  0
0CA7A:  GOTO   CA9C
0CA7E:  MOVLB  0
....................            last_time = current_time;
0CA80:  MOVFF  1A9,1AD
0CA84:  MOVFF  1A8,1AC
0CA88:  MOVFF  1A7,1AB
0CA8C:  MOVFF  1A6,1AA
....................          /*
....................            // 次の測定データ(6バイト)で64バイト境界を超えるか確認
....................            if (environment_data_ptr->reserve_counter1 + 6 > PACKET_SIZE) {
....................                unsigned int8 bankdata[4] = {0};
....................                write_address = MISF_CIGS_ENVIRO_START + environment_data_ptr->used_counter;
....................                write_data_bytes(mis_fm, write_address, bankdata, 4);
....................                environment_data_ptr->used_counter   += 4;
....................                environment_data_ptr->uncopied_counter += 4;
....................                environment_data_ptr->reserve_counter1 = 0;
....................                misf_update_address_area();
....................            }
.................... 
....................            // 環境データ読み取り
....................            temp_top  = ad7490_read(ADC_TEMP_PY_TOP);
....................            temp_bot  = ad7490_read(ADC_TEMP_PY_BOT);
....................            temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................            PD        = ad7490_read(ADC_PD);
.................... 
....................            logdata[0] = (temp_top >> 4) & 0xFF;
....................            logdata[1] = ((temp_top & 0x0F) << 4) | ((temp_bot >> 8) & 0x0F);
....................            logdata[2] = temp_bot & 0xFF;
....................            logdata[3] = (temp_mis7 >> 4) & 0xFF;
....................            logdata[4] = temp_mis7 & 0xFF;
....................            logdata[5] = PD & 0xFF;
.................... 
....................            // 書き込み
....................            write_address = MISF_CIGS_ENVIRO_START + environment_data_ptr->used_counter;
....................            write_data_bytes(mis_fm, write_address, logdata, 6);
....................            environment_data_ptr->used_counter   += 6;
....................            environment_data_ptr->uncopied_counter += 6;
....................            environment_data_ptr->reserve_counter1 += 6;
....................            fprintf(PC, "0x%04LX, 0x%04LX, 0x%04LX, 0x%04LX\r\n", temp_top, temp_bot, temp_mis7, PD);
....................        }
....................          */
....................        delay_ms(1);  // 過負荷防止用
0CA90:  MOVLW  01
0CA92:  MOVLB  A
0CA94:  MOVWF  xF3
0CA96:  MOVLB  0
0CA98:  CALL   22AE
....................    }
0CA9C:  GOTO   CA0A
.................... }
0CAA0:  GOTO   F7C0 (RETURN)
.................... }
.................... // make cmd structure from uplink command
.................... meas_iv_param_t make_meas_iv_cmd(int8 *uplinkcmd_ptr)
.................... {
....................    meas_iv_param_t cmd;
....................    cmd.id = uplinkcmd_ptr[0];
*
081E2:  MOVLB  1
081E4:  MOVF   xD6,W
081E6:  MOVWF  FE9
081E8:  MOVF   xD7,W
081EA:  MOVWF  FEA
081EC:  MOVFF  FEF,1D8
....................    cmd.interval = ((unsigned int16)uplinkcmd_ptr[1] << 8) | ((unsigned int16)uplinkcmd_ptr[2]);
081F0:  MOVLW  01
081F2:  ADDWF  xD6,W
081F4:  MOVWF  FE9
081F6:  MOVLW  00
081F8:  ADDWFC xD7,W
081FA:  MOVWF  FEA
081FC:  MOVF   FEF,W
081FE:  CLRF   xE4
08200:  MOVWF  xE3
08202:  MOVFF  1E3,1E4
08206:  CLRF   xE3
08208:  MOVLW  02
0820A:  ADDWF  xD6,W
0820C:  MOVWF  FE9
0820E:  MOVLW  00
08210:  ADDWFC xD7,W
08212:  MOVWF  FEA
08214:  MOVF   FEF,W
08216:  CLRF   03
08218:  IORWF  xE3,W
0821A:  MOVWF  xD9
0821C:  MOVF   03,W
0821E:  IORWF  xE4,W
08220:  MOVWF  xDA
....................    cmd.log_threshold = (unsigned int16)uplinkcmd_ptr[3]<< 4;
08222:  MOVLW  03
08224:  ADDWF  xD6,W
08226:  MOVWF  FE9
08228:  MOVLW  00
0822A:  ADDWFC xD7,W
0822C:  MOVWF  FEA
0822E:  MOVF   FEF,W
08230:  CLRF   xE4
08232:  MOVWF  xE3
08234:  RLCF   xE3,W
08236:  MOVWF  xDF
08238:  RLCF   xE4,W
0823A:  MOVWF  xE0
0823C:  RLCF   xDF,F
0823E:  RLCF   xE0,F
08240:  RLCF   xDF,F
08242:  RLCF   xE0,F
08244:  RLCF   xDF,F
08246:  RLCF   xE0,F
08248:  MOVLW  F0
0824A:  ANDWF  xDF,F
....................    cmd.sweep_limit = (unsigned int16)uplinkcmd_ptr[4]<< 4;
0824C:  MOVLW  04
0824E:  ADDWF  xD6,W
08250:  MOVWF  FE9
08252:  MOVLW  00
08254:  ADDWFC xD7,W
08256:  MOVWF  FEA
08258:  MOVF   FEF,W
0825A:  CLRF   xE4
0825C:  MOVWF  xE3
0825E:  RLCF   xE3,W
08260:  MOVWF  xE1
08262:  RLCF   xE4,W
08264:  MOVWF  xE2
08266:  RLCF   xE1,F
08268:  RLCF   xE2,F
0826A:  RLCF   xE1,F
0826C:  RLCF   xE2,F
0826E:  RLCF   xE1,F
08270:  RLCF   xE2,F
08272:  MOVLW  F0
08274:  ANDWF  xE1,F
....................    cmd.pd_threshold = (unsigned int16)uplinkcmd_ptr[5]<< 4;
08276:  MOVLW  05
08278:  ADDWF  xD6,W
0827A:  MOVWF  FE9
0827C:  MOVLW  00
0827E:  ADDWFC xD7,W
08280:  MOVWF  FEA
08282:  MOVF   FEF,W
08284:  CLRF   xE4
08286:  MOVWF  xE3
08288:  RLCF   xE3,W
0828A:  MOVWF  xDB
0828C:  RLCF   xE4,W
0828E:  MOVWF  xDC
08290:  RLCF   xDB,F
08292:  RLCF   xDC,F
08294:  RLCF   xDB,F
08296:  RLCF   xDC,F
08298:  RLCF   xDB,F
0829A:  RLCF   xDC,F
0829C:  MOVLW  F0
0829E:  ANDWF  xDB,F
....................    cmd.meas_time = (unsigned int16)uplinkcmd_ptr[6] *60; // 分 -> 秒
082A0:  MOVLW  06
082A2:  ADDWF  xD6,W
082A4:  MOVWF  FE9
082A6:  MOVLW  00
082A8:  ADDWFC xD7,W
082AA:  MOVWF  FEA
082AC:  MOVF   FEF,W
082AE:  CLRF   xE4
082B0:  MOVWF  xE3
082B2:  MOVFF  1E4,A43
082B6:  MOVFF  1E3,A42
082BA:  MOVLB  A
082BC:  CLRF   x45
082BE:  MOVLW  3C
082C0:  MOVWF  x44
082C2:  MOVLB  0
082C4:  CALL   81C0
082C8:  MOVFF  02,1DE
082CC:  MOVFF  01,1DD
....................    return cmd;
082D0:  MOVLW  D8
082D2:  MOVWF  01
082D4:  MOVLW  01
082D6:  MOVWF  02
082D8:  RETURN 0
.................... }
.................... 
.................... void print_meas_iv_cmd(meas_iv_param_t *cmd_ptr)
*
08E76:  MOVLW  03
08E78:  MOVLB  1
08E7A:  ADDWF  xD0,W
08E7C:  MOVWF  FE9
08E7E:  MOVLW  00
08E80:  ADDWFC xD1,W
08E82:  MOVWF  FEA
08E84:  MOVFF  FEC,1D9
08E88:  MOVF   FED,F
08E8A:  MOVFF  FEF,1D8
08E8E:  MOVFF  1D9,1DB
08E92:  MOVFF  1D8,1DA
08E96:  MOVLB  0
08E98:  GOTO   82DA
08E9C:  MOVFF  02,1D3
08EA0:  MOVFF  01,1D2
08EA4:  MOVLW  09
08EA6:  MOVLB  1
08EA8:  ADDWF  xD0,W
08EAA:  MOVWF  FE9
08EAC:  MOVLW  00
08EAE:  ADDWFC xD1,W
08EB0:  MOVWF  FEA
08EB2:  MOVFF  FEC,1D9
08EB6:  MOVF   FED,F
08EB8:  MOVFF  FEF,1D8
08EBC:  MOVFF  1D9,1DB
08EC0:  MOVFF  1D8,1DA
08EC4:  MOVLB  0
08EC6:  CALL   8C48
08ECA:  MOVFF  02,1D5
08ECE:  MOVFF  01,1D4
08ED2:  MOVLW  07
08ED4:  MOVLB  1
08ED6:  ADDWF  xD0,W
08ED8:  MOVWF  FE9
08EDA:  MOVLW  00
08EDC:  ADDWFC xD1,W
08EDE:  MOVWF  FEA
08EE0:  MOVFF  FEC,1D9
08EE4:  MOVF   FED,F
08EE6:  MOVFF  FEF,1D8
08EEA:  MOVFF  1D9,1DB
08EEE:  MOVFF  1D8,1DA
08EF2:  MOVLB  0
08EF4:  CALL   8C48
08EF8:  MOVFF  02,1D7
08EFC:  MOVFF  01,1D6
.................... {
....................    // Calc
....................    unsigned int16 pd_value = calc_pd_value(cmd_ptr->pd_threshold);
....................    int16 sweep_limit = calc_curr_value(cmd_ptr->sweep_limit);
....................    int16 log_threshold = calc_curr_value(cmd_ptr->log_threshold);
.................... 
....................    // Print
....................    fprintf(PC, "MEAS IV Command Parameters:\r\n");
08F00:  MOVLW  6A
08F02:  MOVWF  FF6
08F04:  MOVLW  1A
08F06:  MOVWF  FF7
08F08:  MOVLW  00
08F0A:  MOVWF  FF8
08F0C:  CALL   22DC
....................    fprintf(PC, "\tID: %02X\r\n", cmd_ptr->id);
08F10:  MOVLB  1
08F12:  MOVF   xD0,W
08F14:  MOVWF  FE9
08F16:  MOVF   xD1,W
08F18:  MOVWF  FEA
08F1A:  MOVFF  FEF,1D8
08F1E:  MOVLW  88
08F20:  MOVWF  FF6
08F22:  MOVLW  1A
08F24:  MOVWF  FF7
08F26:  MOVLW  00
08F28:  MOVWF  FF8
08F2A:  MOVLW  05
08F2C:  MOVLB  9
08F2E:  MOVWF  xB3
08F30:  MOVLB  0
08F32:  CALL   2312
08F36:  MOVFF  1D8,9D9
08F3A:  MOVLW  37
08F3C:  MOVLB  9
08F3E:  MOVWF  xDA
08F40:  MOVLB  0
08F42:  CALL   2542
08F46:  MOVLW  0D
08F48:  BTFSS  FA6.6
08F4A:  GOTO   8F48
08F4E:  MOVLB  E
08F50:  MOVWF  xF9
08F52:  MOVLW  0A
08F54:  MOVLB  0
08F56:  BTFSS  FA6.6
08F58:  GOTO   8F56
08F5C:  MOVLB  E
08F5E:  MOVWF  xF9
....................    fprintf(PC, "\tSweepInterval   :%lu[ms]\r\n", cmd_ptr->interval);
08F60:  MOVLW  01
08F62:  MOVLB  1
08F64:  ADDWF  xD0,W
08F66:  MOVWF  FE9
08F68:  MOVLW  00
08F6A:  ADDWFC xD1,W
08F6C:  MOVWF  FEA
08F6E:  MOVFF  FEC,1D9
08F72:  MOVF   FED,F
08F74:  MOVFF  FEF,1D8
08F78:  MOVLW  94
08F7A:  MOVWF  FF6
08F7C:  MOVLW  1A
08F7E:  MOVWF  FF7
08F80:  MOVLW  00
08F82:  MOVWF  FF8
08F84:  MOVLW  12
08F86:  MOVLB  9
08F88:  MOVWF  xB3
08F8A:  MOVLB  0
08F8C:  CALL   2312
08F90:  MOVLW  10
08F92:  MOVWF  FE9
08F94:  MOVFF  1D9,1DB
08F98:  MOVFF  1D8,1DA
08F9C:  CALL   8D5A
08FA0:  MOVLW  A9
08FA2:  MOVWF  FF6
08FA4:  MOVLW  1A
08FA6:  MOVWF  FF7
08FA8:  MOVLW  00
08FAA:  MOVWF  FF8
08FAC:  MOVLW  06
08FAE:  MOVLB  9
08FB0:  MOVWF  xB3
08FB2:  MOVLB  0
08FB4:  CALL   2312
....................    fprintf(PC, "\tPD Threshold    :%lu[W/m2]\r\n", pd_value);
08FB8:  MOVLW  B0
08FBA:  MOVWF  FF6
08FBC:  MOVLW  1A
08FBE:  MOVWF  FF7
08FC0:  MOVLW  00
08FC2:  MOVWF  FF8
08FC4:  MOVLW  12
08FC6:  MOVLB  9
08FC8:  MOVWF  xB3
08FCA:  MOVLB  0
08FCC:  CALL   2312
08FD0:  MOVLW  10
08FD2:  MOVWF  FE9
08FD4:  MOVFF  1D3,1DB
08FD8:  MOVFF  1D2,1DA
08FDC:  CALL   8D5A
08FE0:  MOVLW  C5
08FE2:  MOVWF  FF6
08FE4:  MOVLW  1A
08FE6:  MOVWF  FF7
08FE8:  MOVLW  00
08FEA:  MOVWF  FF8
08FEC:  MOVLW  08
08FEE:  MOVLB  9
08FF0:  MOVWF  xB3
08FF2:  MOVLB  0
08FF4:  CALL   2312
....................    fprintf(PC, "\tSweepLimit      :%lu[mA]\r\n", sweep_limit);
08FF8:  MOVLW  CE
08FFA:  MOVWF  FF6
08FFC:  MOVLW  1A
08FFE:  MOVWF  FF7
09000:  MOVLW  00
09002:  MOVWF  FF8
09004:  MOVLW  12
09006:  MOVLB  9
09008:  MOVWF  xB3
0900A:  MOVLB  0
0900C:  CALL   2312
09010:  MOVLW  10
09012:  MOVWF  FE9
09014:  MOVFF  1D5,1DB
09018:  MOVFF  1D4,1DA
0901C:  CALL   8D5A
09020:  MOVLW  E3
09022:  MOVWF  FF6
09024:  MOVLW  1A
09026:  MOVWF  FF7
09028:  MOVLW  00
0902A:  MOVWF  FF8
0902C:  MOVLW  06
0902E:  MOVLB  9
09030:  MOVWF  xB3
09032:  MOVLB  0
09034:  CALL   2312
....................    fprintf(PC, "\tLogThreshold    :%lu[mA]\r\n", log_threshold);
09038:  MOVLW  EA
0903A:  MOVWF  FF6
0903C:  MOVLW  1A
0903E:  MOVWF  FF7
09040:  MOVLW  00
09042:  MOVWF  FF8
09044:  MOVLW  12
09046:  MOVLB  9
09048:  MOVWF  xB3
0904A:  MOVLB  0
0904C:  CALL   2312
09050:  MOVLW  10
09052:  MOVWF  FE9
09054:  MOVFF  1D7,1DB
09058:  MOVFF  1D6,1DA
0905C:  CALL   8D5A
09060:  MOVLW  FF
09062:  MOVWF  FF6
09064:  MOVLW  1A
09066:  MOVWF  FF7
09068:  MOVLW  00
0906A:  MOVWF  FF8
0906C:  MOVLW  06
0906E:  MOVLB  9
09070:  MOVWF  xB3
09072:  MOVLB  0
09074:  CALL   2312
....................    fprintf(PC, "\tMeasurementTime :%lu[s]\r\n\r\n", cmd_ptr->meas_time);
09078:  MOVLW  05
0907A:  MOVLB  1
0907C:  ADDWF  xD0,W
0907E:  MOVWF  FE9
09080:  MOVLW  00
09082:  ADDWFC xD1,W
09084:  MOVWF  FEA
09086:  MOVFF  FEC,1D9
0908A:  MOVF   FED,F
0908C:  MOVFF  FEF,1D8
09090:  MOVLW  06
09092:  MOVWF  FF6
09094:  MOVLW  1B
09096:  MOVWF  FF7
09098:  MOVLW  00
0909A:  MOVWF  FF8
0909C:  MOVLW  12
0909E:  MOVLB  9
090A0:  MOVWF  xB3
090A2:  MOVLB  0
090A4:  CALL   2312
090A8:  MOVLW  10
090AA:  MOVWF  FE9
090AC:  MOVFF  1D9,1DB
090B0:  MOVFF  1D8,1DA
090B4:  CALL   8D5A
090B8:  MOVLW  1B
090BA:  MOVWF  FF6
090BC:  MOVLW  1B
090BE:  MOVWF  FF7
090C0:  MOVLW  00
090C2:  MOVWF  FF8
090C4:  MOVLW  07
090C6:  MOVLB  9
090C8:  MOVWF  xB3
090CA:  MOVLB  0
090CC:  CALL   2312
090D0:  GOTO   A9DA (RETURN)
.................... }
.................... 
.................... void mode_meas_pd(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS PD\r\n");
*
0E220:  MOVLW  24
0E222:  MOVWF  FF6
0E224:  MOVLW  1B
0E226:  MOVWF  FF7
0E228:  MOVLW  00
0E22A:  MOVWF  FF8
0E22C:  CALL   22DC
.................... 
....................    // uplinkcmd_ptr から interval と測定時間を取り出す
....................    unsigned int16 interval_ms = ((unsigned int16)uplinkcmd_ptr[1] << 8) | uplinkcmd_ptr[2]; // ms
....................    unsigned int16 meas_time_s = (unsigned int16)uplinkcmd_ptr[6] * 60; // 秒
.................... 
....................    unsigned int32 start_time_ms   = get_current_msec();
....................    unsigned int32 current_time_ms = 0;
....................    unsigned int32 meas_time_ms    = (unsigned int32)meas_time_s * 1000; // ms に変換
0E230:  MOVLW  01
0E232:  MOVLB  1
0E234:  ADDWF  xA0,W
0E236:  MOVWF  FE9
0E238:  MOVLW  00
0E23A:  ADDWFC xA1,W
0E23C:  MOVWF  FEA
0E23E:  MOVF   FEF,W
0E240:  CLRF   xB5
0E242:  MOVWF  xB4
0E244:  MOVFF  1B4,1B5
0E248:  CLRF   xB4
0E24A:  MOVLW  02
0E24C:  ADDWF  xA0,W
0E24E:  MOVWF  FE9
0E250:  MOVLW  00
0E252:  ADDWFC xA1,W
0E254:  MOVWF  FEA
0E256:  MOVF   FEF,W
0E258:  IORWF  xB4,W
0E25A:  MOVWF  xA2
0E25C:  MOVF   xB5,W
0E25E:  MOVWF  xA3
0E260:  MOVLW  06
0E262:  ADDWF  xA0,W
0E264:  MOVWF  FE9
0E266:  MOVLW  00
0E268:  ADDWFC xA1,W
0E26A:  MOVWF  FEA
0E26C:  MOVF   FEF,W
0E26E:  CLRF   xB5
0E270:  MOVWF  xB4
0E272:  MOVFF  1B5,A43
0E276:  MOVFF  1B4,A42
0E27A:  MOVLB  A
0E27C:  CLRF   x45
0E27E:  MOVLW  3C
0E280:  MOVWF  x44
0E282:  MOVLB  0
0E284:  CALL   81C0
0E288:  MOVFF  02,1A5
0E28C:  MOVFF  01,1A4
0E290:  CALL   9A46
0E294:  MOVLB  1
0E296:  CLRF   xA9
0E298:  CLRF   xA8
0E29A:  MOVFF  02,1A7
0E29E:  MOVFF  01,1A6
0E2A2:  CLRF   xAD
0E2A4:  CLRF   xAC
0E2A6:  CLRF   xAB
0E2A8:  CLRF   xAA
0E2AA:  CLRF   xB7
0E2AC:  CLRF   xB6
0E2AE:  MOVFF  1A5,1B5
0E2B2:  MOVFF  1A4,1B4
0E2B6:  MOVFF  FEA,1B9
0E2BA:  MOVFF  FE9,1B8
0E2BE:  MOVFF  1B7,1BD
0E2C2:  MOVFF  1B6,1BC
0E2C6:  MOVFF  1B5,1BB
0E2CA:  MOVFF  1B4,1BA
0E2CE:  CLRF   xC1
0E2D0:  CLRF   xC0
0E2D2:  MOVLW  03
0E2D4:  MOVWF  xBF
0E2D6:  MOVLW  E8
0E2D8:  MOVWF  xBE
0E2DA:  MOVLB  0
0E2DC:  GOTO   E1AC
0E2E0:  MOVFF  1B9,FEA
0E2E4:  MOVFF  1B8,FE9
0E2E8:  MOVFF  03,1B1
0E2EC:  MOVFF  02,1B0
0E2F0:  MOVFF  01,1AF
0E2F4:  MOVFF  00,1AE
.................... 
....................    while (current_time_ms - start_time_ms < meas_time_ms) {
0E2F8:  MOVLB  1
0E2FA:  MOVF   xA6,W
0E2FC:  SUBWF  xAA,W
0E2FE:  MOVWF  xB4
0E300:  MOVF   xA7,W
0E302:  SUBWFB xAB,W
0E304:  MOVWF  xB5
0E306:  MOVF   xA8,W
0E308:  SUBWFB xAC,W
0E30A:  MOVWF  xB6
0E30C:  MOVF   xA9,W
0E30E:  SUBWFB xAD,W
0E310:  MOVWF  xB7
0E312:  MOVF   xB7,W
0E314:  SUBWF  xB1,W
0E316:  BTFSC  FD8.0
0E318:  BRA    E320
0E31A:  MOVLB  0
0E31C:  GOTO   E404
0E320:  MOVLB  0
0E322:  BTFSS  FD8.2
0E324:  GOTO   E36A
0E328:  MOVLB  1
0E32A:  MOVF   xB6,W
0E32C:  SUBWF  xB0,W
0E32E:  BTFSC  FD8.0
0E330:  BRA    E338
0E332:  MOVLB  0
0E334:  GOTO   E404
0E338:  MOVLB  0
0E33A:  BTFSS  FD8.2
0E33C:  GOTO   E36A
0E340:  MOVLB  1
0E342:  MOVF   xB5,W
0E344:  SUBWF  xAF,W
0E346:  BTFSC  FD8.0
0E348:  BRA    E350
0E34A:  MOVLB  0
0E34C:  GOTO   E404
0E350:  MOVLB  0
0E352:  BTFSS  FD8.2
0E354:  GOTO   E36A
0E358:  MOVLB  1
0E35A:  MOVF   xAE,W
0E35C:  SUBWF  xB4,W
0E35E:  BTFSS  FD8.0
0E360:  BRA    E368
0E362:  MOVLB  0
0E364:  GOTO   E404
0E368:  MOVLB  0
.................... 
....................       current_time_ms = get_current_msec();
0E36A:  CALL   9A46
0E36E:  MOVLB  1
0E370:  CLRF   xAD
0E372:  CLRF   xAC
0E374:  MOVFF  02,1AB
0E378:  MOVFF  01,1AA
.................... 
....................       // interval ごとに実行
....................       static unsigned int32 last_meas_time = 0;
....................       if (current_time_ms - last_meas_time >= interval_ms) {
0E37C:  MOVF   x79,W
0E37E:  SUBWF  xAA,W
0E380:  MOVWF  xB4
0E382:  MOVF   x7A,W
0E384:  SUBWFB xAB,W
0E386:  MOVWF  xB5
0E388:  MOVF   x7B,W
0E38A:  SUBWFB xAC,W
0E38C:  MOVWF  xB6
0E38E:  MOVF   x7C,W
0E390:  SUBWFB xAD,W
0E392:  MOVWF  xB7
0E394:  MOVF   xB7,F
0E396:  BTFSC  FD8.2
0E398:  BRA    E3A0
0E39A:  MOVLB  0
0E39C:  GOTO   E3DC
0E3A0:  MOVLB  0
0E3A2:  MOVLB  1
0E3A4:  MOVF   xB6,F
0E3A6:  BTFSC  FD8.2
0E3A8:  BRA    E3B0
0E3AA:  MOVLB  0
0E3AC:  GOTO   E3DC
0E3B0:  MOVLB  0
0E3B2:  MOVLB  1
0E3B4:  MOVF   xA3,W
0E3B6:  SUBWF  xB5,W
0E3B8:  BTFSC  FD8.0
0E3BA:  BRA    E3C2
0E3BC:  MOVLB  0
0E3BE:  GOTO   E400
0E3C2:  MOVLB  0
0E3C4:  BTFSS  FD8.2
0E3C6:  GOTO   E3DC
0E3CA:  MOVLB  1
0E3CC:  MOVF   xA2,W
0E3CE:  SUBWF  xB4,W
0E3D0:  BTFSC  FD8.0
0E3D2:  BRA    E3DA
0E3D4:  MOVLB  0
0E3D6:  GOTO   E400
0E3DA:  MOVLB  0
....................          last_meas_time = current_time_ms;
0E3DC:  MOVFF  1AD,17C
0E3E0:  MOVFF  1AC,17B
0E3E4:  MOVFF  1AB,17A
0E3E8:  MOVFF  1AA,179
.................... 
....................          // PD センサー読み取り
....................          unsigned int16 pd = ad7490_read(ADC_PD);
0E3EC:  MOVLW  0F
0E3EE:  MOVLB  9
0E3F0:  MOVWF  xDF
0E3F2:  MOVLB  0
0E3F4:  CALL   24C2
0E3F8:  MOVFF  02,1B3
0E3FC:  MOVFF  01,1B2
.................... 
....................          // デバッグ出力
....................          // fprintf(PC, "Time:%lu ms, PD:%u\r\n", current_time_ms - start_time_ms, pd);
....................       }
0E400:  GOTO   E2F8
....................    }
.................... 
....................    fprintf(PC, "End MODE MEAS PD\r\n");
0E404:  MOVLW  3A
0E406:  MOVWF  FF6
0E408:  MOVLW  1B
0E40A:  MOVWF  FF7
0E40C:  MOVLW  00
0E40E:  MOVWF  FF8
0E410:  CALL   22DC
0E414:  GOTO   F7DC (RETURN)
.................... }
.................... 
.................... #include "application/cigs_mode_flash.c"
.................... #include "cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... #define SWEEP_MAX_STEP 0xFF
.................... 
.................... typedef enum {
....................     CELL1 = 0,
....................     CELL2,
.................... } cell_select_t;
.................... 
.................... typedef struct {
....................     cell_select_t cell;
....................     unsigned int16 voltage[SWEEP_MAX_STEP];
....................     unsigned int16 current[SWEEP_MAX_STEP];
....................     unsigned int16 max_power;
....................     unsigned int16 sweep_count;
.................... } cell_iv_data_t;
.................... 
.................... typedef struct {
....................     unsigned int32 time;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 pd;
.................... } env_data_t;
.................... 
.................... typedef struct{
....................     cell_iv_data_t cell1_iv_data;
....................     cell_iv_data_t cell2_iv_data;
.................... } sweep_result_t;
.................... 
.................... typedef struct {
....................     int1 cell1;
....................     int1 cell2;
....................     unsigned int16 curr_limit;
.................... }sweep_setting_t;
.................... 
.................... 
.................... void meas_env_data(env_data_t *env_data_ptr);
.................... void meas_iv(sweep_setting_t *sweep_config_ptr, sweep_result_t *sweep_result_ptr);
.................... void save_sweep_result(env_data_t *env_data_ptr, sweep_result_t *sweep_result_ptr);
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... // ================================== ADD NEW DEFINES HERE ==================================
.................... // =============================================================================================
.................... // MT25Q Flash Memory Specifications
.................... #define MT25Q_BLOCK_SIZE   4096
.................... #define MT25Q_BLOCK_NUM    8192
.................... #define DEV
.................... #ifdef DEV
.................... typedef enum mt25q_cmd{
....................     //Software RESET Operations
....................     MT25Q_CMD_RESET_ENABLE = 0x66,
....................     MT25Q_CMD_RESET_MEMORY = 0x99,
.................... 
....................     //READ ID Operations
....................     MT25Q_CMD_READ_ID = 0x9F,
....................     MT25Q_CMD_READ_ID_MULTI_IO = 0xAF,
....................     MT25Q_CMD_READ_PARAMETER = 0x5A,
.................... 
....................     //READ MEMORY Operations
....................     MT25Q_CMD_READ = 0x03,
....................     MT25Q_CMD_READ_FAST = 0x0B,
....................     MT25Q_CMD_READ_DUAL_OUTPUT_FAST = 0x3B,
....................     MT25Q_CMD_READ_DUAL_IO_FAST = 0xBB,
....................     MT25Q_CMD_READ_QUAD_OUTPUT_FAST = 0x6B,
....................     MT25Q_CMD_READ_QUAD_IO_FAST = 0xEB,
....................     MT25Q_CMD_READ_QUAD_IO = 0x6B,
....................     MT25Q_CMD_READ_DTR_FAST = 0x0D,
....................     MT25Q_CMD_READ_DTR_OUTPUT_FAST = 0x3D,
....................     MT25Q_CMD_READ_DTR_IO_FAST = 0xBD,
....................     MT25Q_CMD_READ_DTR_QUAD_OUTPUT_FAST = 0x6D,
....................     MT25Q_CMD_READ_DTR_QUAD_IO_FAST = 0xED, 
....................     MT25Q_CMD_READ_QUAD_IO_WORD = 0xE7,
.................... 
....................     //READ MEMORY Operations with 4-Byte Address
....................     MT25Q_CMD_4BYTE_READ = 0x13,
....................     MT25Q_CMD_4BYTE_READ_FAST = 0x0C,
....................     MT25Q_CMD_4BYTE_READ_DUAL_OUTPUT_FAST = 0x3C,
....................     MT25Q_CMD_4BYTE_DUAL_IO_FAST_READ = 0xBC,  
....................     MT25Q_CMD_4BYTE_QUAD_OUTPUT_FAST_READ = 0x6C,
....................     MT25Q_CMD_4BYTE_QUAD_IO_FAST_READ = 0xEC,   
....................     MT25Q_CMD_4BYTE_DTR_FAST_READ = 0x0E,
....................     MT25Q_CMD_4BYTE_DTR_DUAL_IO_FAST_READ = 0xBE,
....................     MT25Q_CMD_4BYTE_DTR_QUAD_IO_FAST_READ = 0xEE,
.................... 
....................     //WRITE Operations
....................     MT25Q_CMD_WRITE_ENABLE = 0x06,
....................     MT25Q_CMD_WRITE_DISABLE = 0x04,
.................... 
....................     //READ REGISTER Operations
....................     MT25Q_CMD_READ_STATUS_REG = 0x05,
....................     MT25Q_CMD_READ_FLAG_STATUS_REG = 0x70,
....................     MT25Q_CMD_READ_NONVOL_CFG_REG = 0xB5,
....................     MT25Q_CMD_READ_VOL_CFG_REG = 0x85,
....................     MT25Q_CMD_READ_ENHANCED_VOL_CFG_REG = 0x65,
....................     MT25Q_CMD_READ_EXT_ADDR_REG = 0xC8,
....................     MT25Q_CMD_READ_GENERAL_PURPOSE_REG = 0x96,
.................... 
....................     //WRITE REGISTER Operations
....................     MT25Q_CMD_WRITE_STATUS_REG = 0x01,
....................     MT25Q_CMD_WRITE_NONVOL_CFG_REG = 0xB1,
....................     MT25Q_CMD_WRITE_VOL_CFG_REG = 0x81,
....................     MT25Q_CMD_WRITE_ENHANCED_VOL_CFG_REG = 0x61,
....................     MT25Q_CMD_WRITE_EXT_ADDR_REG = 0xC5,
.................... 
....................     //CLEAR FLAG STATUS REGISTER Operation
....................     MT25Q_CMD_CLEAR_FLAG_STATUS_REG = 0x50,
.................... 
....................     //PROGRAM Operations
....................     MT25Q_CMD_PAGE_PROGRAM = 0x02,
....................     MT25Q_CMD_DUAL_INPUT_FAST_PROGRAM = 0xA2,
....................     MT25Q_CMD_EXT_DUAL_INPUT_FAST_PROGRAM = 0xD2,
....................     MT25Q_CMD_QUAD_INPUT_FAST_PROGRAM = 0x32,
....................     MT25Q_CMD_EXT_QUAD_INPUT_FAST_PROGRAM = 0x38,
.................... 
....................     //PROGRAM Operations with 4-Byte Address
....................     MT25Q_CMD_4BYTE_PAGE_PROGRAM = 0x12,
....................     MT25Q_CMD_4BYTE_QUAD_INPUT_FAST_PROGRAM = 0x34,
....................     MT25Q_CMD_4BYTE_QUAD_INPUT_EXT_FAST_PROGRAM = 0x3E,
.................... 
....................     //ERASE Operations
....................     MT25Q_CMD_ERASE_32KB_SUBSECTOR = 0x52,
....................     MT25Q_CMD_ERASE_4KB_SUBSECTOR = 0x20,
....................     MT25Q_CMD_ERASE_SECTOR = 0xD8,
....................     MT25Q_CMD_ERASE_BULK = 0xC7,
.................... 
....................     //ERASE Operations with 4-Byte Address
....................     MT25Q_CMD_4BYTE_ERASE_SECTOR = 0xDC,
....................     MT25Q_CMD_4BYTE_ERASE_4KB_SUBSECTOR = 0x21,
....................     
....................     //SUSPEND/RESUME Operations
....................     MT25Q_CMD_PROGRAM_ERASE_SUSPEND = 0x75,
....................     MT25Q_CMD_PROGRAM_ERASE_RESUME = 0x7A,
.................... 
....................     //ONE-WIRE PROGRAMMING Operations
....................     MT25Q_CMD_READ_OPT_ARRAY = 0x4B,
....................     MT25Q_CMD_PROGRAM_OPT_ARRYA = 0x42,
.................... 
....................     //4-BYTE ADDRESSING Operations
....................     MT25Q_CMD_ENTER_4BYTE_ADDR_MODE = 0xB7,
....................     MT25Q_CMD_EXIT_4BYTE_ADDR_MODE = 0xE9,
.................... 
....................     //QUAD PROTOCOL Operations
....................     MT25Q_CMD_ENTER_QUAD_IO_MODE = 0x35,
....................     MT25Q_CMD_RESET_QUAD_IO_MODE = 0xF5,
.................... 
....................     //DEEP POWER-DOWN Operations
....................     MT25Q_CMD_DEEP_POWER_DOWN = 0xB9,
....................     MT25Q_CMD_RELEASE_FROM_DEEP_POWER_DOWN = 0xAB,
.................... 
....................     //ADVANCED PROGRAM/ERASE CONTROLS
....................     MT25Q_CMD_READ_SECTOR_PROTECTION = 0x2D,
....................     MT25Q_CMD_PROGRAM_SECTOR_PROTECTION = 0x2C,
....................     MT25Q_CMD_READ_VOLATILE_LOCK_BITS = 0xE8,
....................     MT25Q_CMD_WRITE_VOLATILE_LOCK_BITS = 0xE5,
....................     MT25Q_CMD_READ_NONVOLATILE_LOCK_BITS = 0xE2,
....................     MT25Q_CMD_WRITE_NONVOLATILE_LOCK_BITS = 0xE3,
....................     MT25Q_CMD_READ_GLOBAL_FREEZE_BIT = 0xA7,
....................     MT25Q_CMD_WRITE_GLOBAL_FREEZE_BIT = 0xA6,
....................     MT25Q_CMD_READ_PASSWORD = 0x27,
....................     MT25Q_CMD_WRITE_PASSWORD = 0x28,
....................     MT25Q_CMD_UNLOCK_PASSWORD = 0x29,
.................... 
....................     //ADVANCED SECTOR PROTECTION Operations
....................     MT25Q_CMD_4BYTE_READ_VOLATILE_LOCK_BITS = 0xE0,
....................     MT25Q_CMD_4BYTE_WRITE_VOLATILE_LOCK_BITS = 0xE1,
.................... 
....................     //ADVANCED FUNCTIONS INTERFACE Operations
....................     MT25Q_CMD_INTERFACE_ACTIVATION = 0x98,
....................     MT25Q_CMD_CYCLIC_REDUNDANCY_CHECK = 0x9B
.................... } mt25q_cmd_t;
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 all;  // 全体アクセス
....................     struct {
....................         unsigned int8 ADDRESSING_4BYTE     : 1; // Bit0
....................         unsigned int8 PROTECTION_ERROR     : 1; // Bit1
....................         unsigned int8 PROGRAM_SUSPEND      : 1; // Bit2
....................         unsigned int8 RESERVED             : 1; // Bit3
....................         unsigned int8 PROGRAM_FAIL         : 1; // Bit4
....................         unsigned int8 ERASE_FAIL           : 1; // Bit5
....................         unsigned int8 ERASE_SUSPEND        : 1; // Bit6
....................         unsigned int8 PROGRAM_OR_ERASE_BUSY: 1; // Bit7
....................     } bit;
.................... } mt25q_sr1_t;
.................... 
.................... typedef enum {
....................     MT25QL64,
....................     MT25QL128,
....................     MT25QL256,
....................     MT25QL512,
....................     MT25QL01G
.................... } mt25q_model_t;
.................... 
.................... 
.................... typedef struct {
....................     mt25q_model_t model;
....................     unsigned int32 size_bytes;
....................     unsigned int32 page_size_bytes;
....................     unsigned int32 sector_size_bytes;
....................     unsigned int32 subsector_32k_size_bytes;
....................     unsigned int32 subsector_4k_size_bytes;
.................... } mt25q_info_t;
.................... 
.................... typedef enum {
....................     MT25Q_FUNC_READ,
....................     MT25Q_FUNC_WRITE,
....................     MT25Q_FUNC_ERASE
.................... } mt25q_func_t;
.................... 
.................... typedef struct {
....................     mt25q_func_t function;
....................     unsigned int32 address;
....................     unsigned int8 *data;
....................     unsigned int32 length;
.................... } mt25q_cmd_param_t;
.................... 
.................... #define MT25Q_CMD_MAX_SIZE 8
.................... typedef struct {
....................     unsigned int8 cmd[MT25Q_CMD_MAX_SIZE];
....................     unsigned int8 cmd_length;
.................... } mt25q_send_cmd_t;
.................... 
.................... // void mt25q_make_cmd(mt25q_info_t *flash_info, mt25q_cmd_param_t *cmd_param, mt25q_send_cmd_t *cmd)
.................... 
.................... 
.................... #endif // DEV
.................... #endif
.................... 
.................... #include "../domain/cigs_flash.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_save(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... 
.................... // ========================== MISF Command ============================
.................... void mode_misf_erase_all(int8 parameter[])
.................... {
....................    printf("Start Flash Erase All\r\n");
*
05CA4:  MOVLW  4E
05CA6:  MOVWF  FF6
05CA8:  MOVLW  1B
05CAA:  MOVWF  FF7
05CAC:  MOVLW  00
05CAE:  MOVWF  FF8
05CB0:  CALL   22DC
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
05CB4:  MOVLB  1
05CB6:  MOVF   xBB,W
05CB8:  MOVWF  FE9
05CBA:  MOVF   xBC,W
05CBC:  MOVWF  FEA
05CBE:  MOVFF  FEF,1BD
....................    piclog_save(cmd, 0x00); // Log the command execution
05CC2:  MOVFF  1BD,200
05CC6:  MOVLB  2
05CC8:  CLRF   x01
05CCA:  MOVLB  0
05CCC:  CALL   5120
....................    
....................    for (int32 address = MISF_START; address < MISF_END; address += SECTOR_64K_BYTE) {
05CD0:  MOVLB  1
05CD2:  CLRF   xC1
05CD4:  CLRF   xC0
05CD6:  CLRF   xBF
05CD8:  CLRF   xBE
05CDA:  MOVLB  0
05CDC:  MOVLB  1
05CDE:  MOVF   xC1,F
05CE0:  BTFSC  FD8.2
05CE2:  BRA    5CEA
05CE4:  MOVLB  0
05CE6:  GOTO   5D62
05CEA:  MOVLB  0
05CEC:  MOVLB  1
05CEE:  MOVF   xC0,W
05CF0:  SUBLW  BC
05CF2:  BTFSC  FD8.0
05CF4:  BRA    5CFC
05CF6:  MOVLB  0
05CF8:  GOTO   5D62
05CFC:  MOVLB  0
05CFE:  BTFSS  FD8.2
05D00:  GOTO   5D2E
05D04:  MOVLB  1
05D06:  MOVF   xBF,W
05D08:  SUBLW  0F
05D0A:  BTFSC  FD8.0
05D0C:  BRA    5D14
05D0E:  MOVLB  0
05D10:  GOTO   5D62
05D14:  MOVLB  0
05D16:  BTFSS  FD8.2
05D18:  GOTO   5D2E
05D1C:  MOVLB  1
05D1E:  MOVF   xBE,W
05D20:  SUBLW  FE
05D22:  BTFSC  FD8.0
05D24:  BRA    5D2C
05D26:  MOVLB  0
05D28:  GOTO   5D62
05D2C:  MOVLB  0
....................       sector_erase(mis_fm, address); // Erase each sector
05D2E:  MOVFF  107,1E9
05D32:  MOVFF  106,1E8
05D36:  MOVFF  105,1E7
05D3A:  MOVFF  104,1E6
05D3E:  MOVFF  1C1,1ED
05D42:  MOVFF  1C0,1EC
05D46:  MOVFF  1BF,1EB
05D4A:  MOVFF  1BE,1EA
05D4E:  CALL   5948
05D52:  MOVLW  01
05D54:  MOVLB  1
05D56:  ADDWF  xC0,F
05D58:  MOVLW  00
05D5A:  ADDWFC xC1,F
05D5C:  MOVLB  0
05D5E:  GOTO   5CDC
....................    }
....................    piclog_save(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05D62:  MOVFF  1BD,200
05D66:  MOVLB  2
05D68:  SETF   x01
05D6A:  MOVLB  0
05D6C:  CALL   5120
....................    printf("End Flash Erase All\r\n");
05D70:  MOVLW  66
05D72:  MOVWF  FF6
05D74:  MOVLW  1B
05D76:  MOVWF  FF7
05D78:  MOVLW  00
05D7A:  MOVWF  FF8
05D7C:  CALL   22DC
05D80:  RETURN 0
.................... }
.................... 
.................... void mode_misf_erase_1sector(int8 parameter[])
.................... {
....................    printf("Start Flash Erase 1 Sector\r\n");
05D82:  MOVLW  7C
05D84:  MOVWF  FF6
05D86:  MOVLW  1B
05D88:  MOVWF  FF7
05D8A:  MOVLW  00
05D8C:  MOVWF  FF8
05D8E:  CALL   22DC
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    int32 sector_address = 
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
05D92:  MOVLB  1
05D94:  MOVF   xA0,W
05D96:  MOVWF  FE9
05D98:  MOVF   xA1,W
05D9A:  MOVWF  FEA
05D9C:  MOVFF  FEF,1A2
05DA0:  MOVLW  01
05DA2:  ADDWF  xA0,W
05DA4:  MOVWF  FE9
05DA6:  MOVLW  00
05DA8:  ADDWFC xA1,W
05DAA:  MOVWF  FEA
05DAC:  MOVF   FEF,W
05DAE:  CLRF   xAA
05DB0:  CLRF   xA9
05DB2:  CLRF   xA8
05DB4:  MOVWF  xA7
05DB6:  MOVFF  1A7,1AA
05DBA:  CLRF   xA7
05DBC:  CLRF   xA8
05DBE:  CLRF   xA9
05DC0:  MOVLW  02
05DC2:  ADDWF  xA0,W
05DC4:  MOVWF  FE9
05DC6:  MOVLW  00
05DC8:  ADDWFC xA1,W
05DCA:  MOVWF  FEA
05DCC:  MOVF   FEF,W
05DCE:  CLRF   xAF
05DD0:  CLRF   xAE
05DD2:  CLRF   xAD
05DD4:  MOVWF  xAC
05DD6:  MOVFF  1AD,03
05DDA:  MOVFF  1AC,02
05DDE:  CLRF   00
05DE0:  CLRF   01
05DE2:  MOVF   00,W
05DE4:  IORWF  xA7,F
05DE6:  MOVF   01,W
05DE8:  IORWF  xA8,F
05DEA:  MOVF   02,W
05DEC:  IORWF  xA9,F
05DEE:  MOVF   03,W
05DF0:  IORWF  xAA,F
05DF2:  MOVLW  03
05DF4:  ADDWF  xA0,W
05DF6:  MOVWF  FE9
05DF8:  MOVLW  00
05DFA:  ADDWFC xA1,W
05DFC:  MOVWF  FEA
05DFE:  MOVF   FEF,W
05E00:  CLRF   xAF
05E02:  CLRF   xAE
05E04:  CLRF   xAD
05E06:  MOVWF  xAC
05E08:  MOVFF  1AE,03
05E0C:  MOVFF  1AD,02
05E10:  MOVFF  1AC,01
05E14:  CLRF   00
05E16:  MOVF   00,W
05E18:  IORWF  xA7,F
05E1A:  MOVF   01,W
05E1C:  IORWF  xA8,F
05E1E:  MOVF   02,W
05E20:  IORWF  xA9,F
05E22:  MOVF   03,W
05E24:  IORWF  xAA,F
05E26:  MOVLW  04
05E28:  ADDWF  xA0,W
05E2A:  MOVWF  FE9
05E2C:  MOVLW  00
05E2E:  ADDWFC xA1,W
05E30:  MOVWF  FEA
05E32:  MOVF   FEF,W
05E34:  MOVWF  00
05E36:  CLRF   01
05E38:  CLRF   02
05E3A:  CLRF   03
05E3C:  MOVF   00,W
05E3E:  IORWF  xA7,W
05E40:  MOVWF  xA3
05E42:  MOVF   01,W
05E44:  IORWF  xA8,W
05E46:  MOVWF  xA4
05E48:  MOVF   02,W
05E4A:  IORWF  xA9,W
05E4C:  MOVWF  xA5
05E4E:  MOVF   03,W
05E50:  IORWF  xAA,W
05E52:  MOVWF  xA6
.................... 
....................    printf("\tSector Address: 0x%08LX\r\n", sector_address);
05E54:  MOVLW  9A
05E56:  MOVWF  FF6
05E58:  MOVLW  1B
05E5A:  MOVWF  FF7
05E5C:  MOVLW  00
05E5E:  MOVWF  FF8
05E60:  MOVLW  13
05E62:  MOVLB  9
05E64:  MOVWF  xB3
05E66:  MOVLB  0
05E68:  CALL   2312
05E6C:  MOVFF  1A6,9D9
05E70:  MOVLW  37
05E72:  MOVLB  9
05E74:  MOVWF  xDA
05E76:  MOVLB  0
05E78:  CALL   2542
05E7C:  MOVFF  1A5,9D9
05E80:  MOVLW  37
05E82:  MOVLB  9
05E84:  MOVWF  xDA
05E86:  MOVLB  0
05E88:  CALL   2542
05E8C:  MOVFF  1A4,9D9
05E90:  MOVLW  37
05E92:  MOVLB  9
05E94:  MOVWF  xDA
05E96:  MOVLB  0
05E98:  CALL   2542
05E9C:  MOVFF  1A3,9D9
05EA0:  MOVLW  37
05EA2:  MOVLB  9
05EA4:  MOVWF  xDA
05EA6:  MOVLB  0
05EA8:  CALL   2542
05EAC:  MOVLW  0D
05EAE:  BTFSS  FA6.6
05EB0:  GOTO   5EAE
05EB4:  MOVLB  E
05EB6:  MOVWF  xF9
05EB8:  MOVLW  0A
05EBA:  MOVLB  0
05EBC:  BTFSS  FA6.6
05EBE:  GOTO   5EBC
05EC2:  MOVLB  E
05EC4:  MOVWF  xF9
....................    piclog_save(cmd, PICLOG_PARAM_START); // Log the command execution
05EC6:  MOVFF  1A2,200
05ECA:  MOVLB  2
05ECC:  CLRF   x01
05ECE:  MOVLB  0
05ED0:  CALL   5120
....................    
....................    sector_erase(mis_fm, sector_address);
05ED4:  MOVFF  107,1E9
05ED8:  MOVFF  106,1E8
05EDC:  MOVFF  105,1E7
05EE0:  MOVFF  104,1E6
05EE4:  MOVFF  1A6,1ED
05EE8:  MOVFF  1A5,1EC
05EEC:  MOVFF  1A4,1EB
05EF0:  MOVFF  1A3,1EA
05EF4:  CALL   5948
....................    piclog_save(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05EF8:  MOVFF  1A2,200
05EFC:  MOVLB  2
05EFE:  SETF   x01
05F00:  MOVLB  0
05F02:  CALL   5120
....................    printf("End Flash Erase 1 Sector\r\n");
05F06:  MOVLW  B6
05F08:  MOVWF  FF6
05F0A:  MOVLW  1B
05F0C:  MOVWF  FF7
05F0E:  MOVLW  00
05F10:  MOVWF  FF8
05F12:  CALL   22DC
05F16:  GOTO   F6B8 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_4kbyte_subsector(int8 parameter[])
.................... {
....................    printf("Start Flash Erase 4kByte Subsector\r\n");
05F1A:  MOVLW  D2
05F1C:  MOVWF  FF6
05F1E:  MOVLW  1B
05F20:  MOVWF  FF7
05F22:  MOVLW  00
05F24:  MOVWF  FF8
05F26:  CALL   22DC
....................    int8 cmd = parameter[0];
....................    int32 subsector_address =
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
05F2A:  MOVLB  1
05F2C:  MOVF   xA0,W
05F2E:  MOVWF  FE9
05F30:  MOVF   xA1,W
05F32:  MOVWF  FEA
05F34:  MOVFF  FEF,1A2
05F38:  MOVLW  01
05F3A:  ADDWF  xA0,W
05F3C:  MOVWF  FE9
05F3E:  MOVLW  00
05F40:  ADDWFC xA1,W
05F42:  MOVWF  FEA
05F44:  MOVF   FEF,W
05F46:  CLRF   xAA
05F48:  CLRF   xA9
05F4A:  CLRF   xA8
05F4C:  MOVWF  xA7
05F4E:  MOVFF  1A7,1AA
05F52:  CLRF   xA7
05F54:  CLRF   xA8
05F56:  CLRF   xA9
05F58:  MOVLW  02
05F5A:  ADDWF  xA0,W
05F5C:  MOVWF  FE9
05F5E:  MOVLW  00
05F60:  ADDWFC xA1,W
05F62:  MOVWF  FEA
05F64:  MOVF   FEF,W
05F66:  CLRF   xAF
05F68:  CLRF   xAE
05F6A:  CLRF   xAD
05F6C:  MOVWF  xAC
05F6E:  MOVFF  1AD,03
05F72:  MOVFF  1AC,02
05F76:  CLRF   00
05F78:  CLRF   01
05F7A:  MOVF   00,W
05F7C:  IORWF  xA7,F
05F7E:  MOVF   01,W
05F80:  IORWF  xA8,F
05F82:  MOVF   02,W
05F84:  IORWF  xA9,F
05F86:  MOVF   03,W
05F88:  IORWF  xAA,F
05F8A:  MOVLW  03
05F8C:  ADDWF  xA0,W
05F8E:  MOVWF  FE9
05F90:  MOVLW  00
05F92:  ADDWFC xA1,W
05F94:  MOVWF  FEA
05F96:  MOVF   FEF,W
05F98:  CLRF   xAF
05F9A:  CLRF   xAE
05F9C:  CLRF   xAD
05F9E:  MOVWF  xAC
05FA0:  MOVFF  1AE,03
05FA4:  MOVFF  1AD,02
05FA8:  MOVFF  1AC,01
05FAC:  CLRF   00
05FAE:  MOVF   00,W
05FB0:  IORWF  xA7,F
05FB2:  MOVF   01,W
05FB4:  IORWF  xA8,F
05FB6:  MOVF   02,W
05FB8:  IORWF  xA9,F
05FBA:  MOVF   03,W
05FBC:  IORWF  xAA,F
05FBE:  MOVLW  04
05FC0:  ADDWF  xA0,W
05FC2:  MOVWF  FE9
05FC4:  MOVLW  00
05FC6:  ADDWFC xA1,W
05FC8:  MOVWF  FEA
05FCA:  MOVF   FEF,W
05FCC:  MOVWF  00
05FCE:  CLRF   01
05FD0:  CLRF   02
05FD2:  CLRF   03
05FD4:  MOVF   00,W
05FD6:  IORWF  xA7,W
05FD8:  MOVWF  xA3
05FDA:  MOVF   01,W
05FDC:  IORWF  xA8,W
05FDE:  MOVWF  xA4
05FE0:  MOVF   02,W
05FE2:  IORWF  xA9,W
05FE4:  MOVWF  xA5
05FE6:  MOVF   03,W
05FE8:  IORWF  xAA,W
05FEA:  MOVWF  xA6
....................    printf("\tSubsector Address: 0x%08LX\r\n", subsector_address);
05FEC:  MOVLW  F8
05FEE:  MOVWF  FF6
05FF0:  MOVLW  1B
05FF2:  MOVWF  FF7
05FF4:  MOVLW  00
05FF6:  MOVWF  FF8
05FF8:  MOVLW  16
05FFA:  MOVLB  9
05FFC:  MOVWF  xB3
05FFE:  MOVLB  0
06000:  CALL   2312
06004:  MOVFF  1A6,9D9
06008:  MOVLW  37
0600A:  MOVLB  9
0600C:  MOVWF  xDA
0600E:  MOVLB  0
06010:  CALL   2542
06014:  MOVFF  1A5,9D9
06018:  MOVLW  37
0601A:  MOVLB  9
0601C:  MOVWF  xDA
0601E:  MOVLB  0
06020:  CALL   2542
06024:  MOVFF  1A4,9D9
06028:  MOVLW  37
0602A:  MOVLB  9
0602C:  MOVWF  xDA
0602E:  MOVLB  0
06030:  CALL   2542
06034:  MOVFF  1A3,9D9
06038:  MOVLW  37
0603A:  MOVLB  9
0603C:  MOVWF  xDA
0603E:  MOVLB  0
06040:  CALL   2542
06044:  MOVLW  0D
06046:  BTFSS  FA6.6
06048:  GOTO   6046
0604C:  MOVLB  E
0604E:  MOVWF  xF9
06050:  MOVLW  0A
06052:  MOVLB  0
06054:  BTFSS  FA6.6
06056:  GOTO   6054
0605A:  MOVLB  E
0605C:  MOVWF  xF9
....................    piclog_save(cmd, PICLOG_PARAM_START);
0605E:  MOVFF  1A2,200
06062:  MOVLB  2
06064:  CLRF   x01
06066:  MOVLB  0
06068:  CALL   5120
....................    subsector_4kByte_erase(mis_fm, subsector_address); // FIX: 固定0消去→指定アドレス
0606C:  MOVFF  107,9F8
06070:  MOVFF  106,9F7
06074:  MOVFF  105,9F6
06078:  MOVFF  104,9F5
0607C:  MOVFF  1A6,9FC
06080:  MOVFF  1A5,9FB
06084:  MOVFF  1A4,9FA
06088:  MOVFF  1A3,9F9
0608C:  CALL   4D66
....................    piclog_save(cmd, PICLOG_PARAM_END);
06090:  MOVFF  1A2,200
06094:  MOVLB  2
06096:  SETF   x01
06098:  MOVLB  0
0609A:  CALL   5120
....................    printf("End Flash Erase 4kByte Subsector\r\n");
0609E:  MOVLW  16
060A0:  MOVWF  FF6
060A2:  MOVLW  1C
060A4:  MOVWF  FF7
060A6:  MOVLW  00
060A8:  MOVWF  FF8
060AA:  CALL   22DC
060AE:  GOTO   F6C8 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 64kByte Subsector\r\n");
060B2:  MOVLW  3A
060B4:  MOVWF  FF6
060B6:  MOVLW  1C
060B8:  MOVWF  FF7
060BA:  MOVLW  00
060BC:  MOVWF  FF8
060BE:  CALL   22DC
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
060C2:  MOVLB  1
060C4:  MOVF   xA0,W
060C6:  MOVWF  FE9
060C8:  MOVF   xA1,W
060CA:  MOVWF  FEA
060CC:  MOVFF  FEF,1A2
060D0:  MOVLW  01
060D2:  ADDWF  xA0,W
060D4:  MOVWF  FE9
060D6:  MOVLW  00
060D8:  ADDWFC xA1,W
060DA:  MOVWF  FEA
060DC:  MOVF   FEF,W
060DE:  CLRF   xAA
060E0:  CLRF   xA9
060E2:  CLRF   xA8
060E4:  MOVWF  xA7
060E6:  MOVFF  1A7,1AA
060EA:  CLRF   xA7
060EC:  CLRF   xA8
060EE:  CLRF   xA9
060F0:  MOVLW  02
060F2:  ADDWF  xA0,W
060F4:  MOVWF  FE9
060F6:  MOVLW  00
060F8:  ADDWFC xA1,W
060FA:  MOVWF  FEA
060FC:  MOVF   FEF,W
060FE:  CLRF   xAF
06100:  CLRF   xAE
06102:  CLRF   xAD
06104:  MOVWF  xAC
06106:  MOVFF  1AD,03
0610A:  MOVFF  1AC,02
0610E:  CLRF   00
06110:  CLRF   01
06112:  MOVF   00,W
06114:  IORWF  xA7,F
06116:  MOVF   01,W
06118:  IORWF  xA8,F
0611A:  MOVF   02,W
0611C:  IORWF  xA9,F
0611E:  MOVF   03,W
06120:  IORWF  xAA,F
06122:  MOVLW  03
06124:  ADDWF  xA0,W
06126:  MOVWF  FE9
06128:  MOVLW  00
0612A:  ADDWFC xA1,W
0612C:  MOVWF  FEA
0612E:  MOVF   FEF,W
06130:  CLRF   xAF
06132:  CLRF   xAE
06134:  CLRF   xAD
06136:  MOVWF  xAC
06138:  MOVFF  1AE,03
0613C:  MOVFF  1AD,02
06140:  MOVFF  1AC,01
06144:  CLRF   00
06146:  MOVF   00,W
06148:  IORWF  xA7,F
0614A:  MOVF   01,W
0614C:  IORWF  xA8,F
0614E:  MOVF   02,W
06150:  IORWF  xA9,F
06152:  MOVF   03,W
06154:  IORWF  xAA,F
06156:  MOVLW  04
06158:  ADDWF  xA0,W
0615A:  MOVWF  FE9
0615C:  MOVLW  00
0615E:  ADDWFC xA1,W
06160:  MOVWF  FEA
06162:  MOVF   FEF,W
06164:  MOVWF  00
06166:  CLRF   01
06168:  CLRF   02
0616A:  CLRF   03
0616C:  MOVF   00,W
0616E:  IORWF  xA7,W
06170:  MOVWF  xA3
06172:  MOVF   01,W
06174:  IORWF  xA8,W
06176:  MOVWF  xA4
06178:  MOVF   02,W
0617A:  IORWF  xA9,W
0617C:  MOVWF  xA5
0617E:  MOVF   03,W
06180:  IORWF  xAA,W
06182:  MOVWF  xA6
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
06184:  MOVLW  60
06186:  MOVWF  FF6
06188:  MOVLW  1C
0618A:  MOVWF  FF7
0618C:  MOVLW  00
0618E:  MOVWF  FF8
06190:  MOVLW  16
06192:  MOVLB  9
06194:  MOVWF  xB3
06196:  MOVLB  0
06198:  CALL   2312
0619C:  MOVFF  1A6,9D9
061A0:  MOVLW  37
061A2:  MOVLB  9
061A4:  MOVWF  xDA
061A6:  MOVLB  0
061A8:  CALL   2542
061AC:  MOVFF  1A5,9D9
061B0:  MOVLW  37
061B2:  MOVLB  9
061B4:  MOVWF  xDA
061B6:  MOVLB  0
061B8:  CALL   2542
061BC:  MOVFF  1A4,9D9
061C0:  MOVLW  37
061C2:  MOVLB  9
061C4:  MOVWF  xDA
061C6:  MOVLB  0
061C8:  CALL   2542
061CC:  MOVFF  1A3,9D9
061D0:  MOVLW  37
061D2:  MOVLB  9
061D4:  MOVWF  xDA
061D6:  MOVLB  0
061D8:  CALL   2542
061DC:  MOVLW  0D
061DE:  BTFSS  FA6.6
061E0:  GOTO   61DE
061E4:  MOVLB  E
061E6:  MOVWF  xF9
061E8:  MOVLW  0A
061EA:  MOVLB  0
061EC:  BTFSS  FA6.6
061EE:  GOTO   61EC
061F2:  MOVLB  E
061F4:  MOVWF  xF9
....................    piclog_save(cmd, PICLOG_PARAM_START); // Log the command execution
061F6:  MOVFF  1A2,200
061FA:  MOVLB  2
061FC:  CLRF   x01
061FE:  MOVLB  0
06200:  CALL   5120
....................    
....................    //subsector_64kByte_erase(mis_fm, subsector_address);
....................    piclog_save(cmd, PICLOG_PARAM_END); // Log the end of the command execution
06204:  MOVFF  1A2,200
06208:  MOVLB  2
0620A:  SETF   x01
0620C:  MOVLB  0
0620E:  CALL   5120
....................    fprintf(PC, "End Flash Erase 64kByte Subsector\r\n");
06212:  MOVLW  7E
06214:  MOVWF  FF6
06216:  MOVLW  1C
06218:  MOVWF  FF7
0621A:  MOVLW  00
0621C:  MOVWF  FF8
0621E:  CALL   22DC
06222:  GOTO   F6D8 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
*
0640A:  MOVLW  A2
0640C:  MOVWF  FF6
0640E:  MOVLW  1C
06410:  MOVWF  FF7
06412:  MOVLW  00
06414:  MOVWF  FF8
06416:  CALL   22DC
....................    piclog_save(parameter[0], PICLOG_PARAM_START); // Log the command execution
0641A:  MOVLB  1
0641C:  MOVF   xA0,W
0641E:  MOVWF  FE9
06420:  MOVF   xA1,W
06422:  MOVWF  FEA
06424:  MOVFF  FEF,1F6
06428:  MOVFF  1F6,200
0642C:  MOVLB  2
0642E:  CLRF   x01
06430:  MOVLB  0
06432:  CALL   5120
.................... 
....................    FLASH_WRITE_PARAM flash_write_param = {0};
06436:  MOVLB  1
06438:  CLRF   xA2
0643A:  CLRF   xA3
0643C:  CLRF   xA4
0643E:  CLRF   xA5
06440:  CLRF   xA6
06442:  CLRF   xA7
06444:  CLRF   xA8
....................    
....................    flash_write_param.id = parameter[0];
06446:  MOVF   xA0,W
06448:  MOVWF  FE9
0644A:  MOVF   xA1,W
0644C:  MOVWF  FEA
0644E:  MOVFF  FEF,1A2
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
06452:  MOVLW  01
06454:  ADDWF  xA0,W
06456:  MOVWF  FE9
06458:  MOVLW  00
0645A:  ADDWFC xA1,W
0645C:  MOVWF  FEA
0645E:  MOVF   FEF,W
06460:  CLRF   xF9
06462:  CLRF   xF8
06464:  CLRF   xF7
06466:  MOVWF  xF6
06468:  MOVFF  1F6,1F9
0646C:  CLRF   xF6
0646E:  CLRF   xF7
06470:  CLRF   xF8
06472:  MOVLW  02
06474:  ADDWF  xA0,W
06476:  MOVWF  FE9
06478:  MOVLW  00
0647A:  ADDWFC xA1,W
0647C:  MOVWF  FEA
0647E:  MOVF   FEF,W
06480:  CLRF   xFE
06482:  CLRF   xFD
06484:  CLRF   xFC
06486:  MOVWF  xFB
06488:  MOVFF  1FC,03
0648C:  MOVFF  1FB,02
06490:  CLRF   00
06492:  CLRF   01
06494:  MOVF   00,W
06496:  IORWF  xF6,F
06498:  MOVF   01,W
0649A:  IORWF  xF7,F
0649C:  MOVF   02,W
0649E:  IORWF  xF8,F
064A0:  MOVF   03,W
064A2:  IORWF  xF9,F
064A4:  MOVLW  03
064A6:  ADDWF  xA0,W
064A8:  MOVWF  FE9
064AA:  MOVLW  00
064AC:  ADDWFC xA1,W
064AE:  MOVWF  FEA
064B0:  MOVF   FEF,W
064B2:  CLRF   xFE
064B4:  CLRF   xFD
064B6:  CLRF   xFC
064B8:  MOVWF  xFB
064BA:  MOVFF  1FD,03
064BE:  MOVFF  1FC,02
064C2:  MOVFF  1FB,01
064C6:  CLRF   00
064C8:  MOVF   00,W
064CA:  IORWF  xF6,F
064CC:  MOVF   01,W
064CE:  IORWF  xF7,F
064D0:  MOVF   02,W
064D2:  IORWF  xF8,F
064D4:  MOVF   03,W
064D6:  IORWF  xF9,F
064D8:  MOVLW  04
064DA:  ADDWF  xA0,W
064DC:  MOVWF  FE9
064DE:  MOVLW  00
064E0:  ADDWFC xA1,W
064E2:  MOVWF  FEA
064E4:  MOVF   FEF,W
064E6:  MOVWF  00
064E8:  CLRF   01
064EA:  CLRF   02
064EC:  CLRF   03
064EE:  MOVF   00,W
064F0:  IORWF  xF6,W
064F2:  MOVWF  xA3
064F4:  MOVF   01,W
064F6:  IORWF  xF7,W
064F8:  MOVWF  xA4
064FA:  MOVF   02,W
064FC:  IORWF  xF8,W
064FE:  MOVWF  xA5
06500:  MOVF   03,W
06502:  IORWF  xF9,W
06504:  MOVWF  xA6
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
06506:  MOVLW  07
06508:  ADDWF  xA0,W
0650A:  MOVWF  FE9
0650C:  MOVLW  00
0650E:  ADDWFC xA1,W
06510:  MOVWF  FEA
06512:  MOVF   FEF,W
06514:  CLRF   xF7
06516:  MOVWF  xF6
06518:  MOVFF  1F6,1F7
0651C:  CLRF   xF6
0651E:  MOVLW  08
06520:  ADDWF  xA0,W
06522:  MOVWF  FE9
06524:  MOVLW  00
06526:  ADDWFC xA1,W
06528:  MOVWF  FEA
0652A:  MOVF   FEF,W
0652C:  CLRF   03
0652E:  IORWF  xF6,W
06530:  MOVWF  xA7
06532:  MOVF   03,W
06534:  IORWF  xF7,W
06536:  MOVWF  xA8
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
06538:  MOVLW  BC
0653A:  MOVWF  FF6
0653C:  MOVLW  1C
0653E:  MOVWF  FF7
06540:  MOVLW  00
06542:  MOVWF  FF8
06544:  MOVLW  0C
06546:  MOVLB  9
06548:  MOVWF  xB3
0654A:  MOVLB  0
0654C:  CALL   2312
06550:  MOVFF  1A2,9D9
06554:  MOVLW  37
06556:  MOVLB  9
06558:  MOVWF  xDA
0655A:  MOVLB  0
0655C:  CALL   2542
06560:  MOVLW  0D
06562:  BTFSS  FA6.6
06564:  GOTO   6562
06568:  MOVLB  E
0656A:  MOVWF  xF9
0656C:  MOVLW  0A
0656E:  MOVLB  0
06570:  BTFSS  FA6.6
06572:  GOTO   6570
06576:  MOVLB  E
06578:  MOVWF  xF9
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
0657A:  MOVLW  D0
0657C:  MOVWF  FF6
0657E:  MOVLW  1C
06580:  MOVWF  FF7
06582:  MOVLW  00
06584:  MOVWF  FF8
06586:  MOVLW  0E
06588:  MOVLB  9
0658A:  MOVWF  xB3
0658C:  MOVLB  0
0658E:  CALL   2312
06592:  MOVFF  1A6,9D9
06596:  MOVLW  37
06598:  MOVLB  9
0659A:  MOVWF  xDA
0659C:  MOVLB  0
0659E:  CALL   2542
065A2:  MOVFF  1A5,9D9
065A6:  MOVLW  37
065A8:  MOVLB  9
065AA:  MOVWF  xDA
065AC:  MOVLB  0
065AE:  CALL   2542
065B2:  MOVFF  1A4,9D9
065B6:  MOVLW  37
065B8:  MOVLB  9
065BA:  MOVWF  xDA
065BC:  MOVLB  0
065BE:  CALL   2542
065C2:  MOVFF  1A3,9D9
065C6:  MOVLW  37
065C8:  MOVLB  9
065CA:  MOVWF  xDA
065CC:  MOVLB  0
065CE:  CALL   2542
065D2:  MOVLW  0D
065D4:  BTFSS  FA6.6
065D6:  GOTO   65D4
065DA:  MOVLB  E
065DC:  MOVWF  xF9
065DE:  MOVLW  0A
065E0:  MOVLB  0
065E2:  BTFSS  FA6.6
065E4:  GOTO   65E2
065E8:  MOVLB  E
065EA:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
065EC:  MOVLW  E6
065EE:  MOVWF  FF6
065F0:  MOVLW  1C
065F2:  MOVWF  FF7
065F4:  MOVLW  00
065F6:  MOVWF  FF8
065F8:  MOVLW  0E
065FA:  MOVLB  9
065FC:  MOVWF  xB3
065FE:  MOVLB  0
06600:  CALL   2312
06604:  MOVFF  1A8,9D9
06608:  MOVLW  37
0660A:  MOVLB  9
0660C:  MOVWF  xDA
0660E:  MOVLB  0
06610:  CALL   2542
06614:  MOVFF  1A7,9D9
06618:  MOVLW  37
0661A:  MOVLB  9
0661C:  MOVWF  xDA
0661E:  MOVLB  0
06620:  CALL   2542
06624:  MOVLW  0D
06626:  BTFSS  FA6.6
06628:  GOTO   6626
0662C:  MOVLB  E
0662E:  MOVWF  xF9
06630:  MOVLW  0A
06632:  MOVLB  0
06634:  BTFSS  FA6.6
06636:  GOTO   6634
0663A:  MOVLB  E
0663C:  MOVWF  xF9
.................... 
....................    piclog_save(flash_write_param.id, 0x00); // Log the command execution
0663E:  MOVFF  1A2,200
06642:  MOVLB  2
06644:  CLRF   x01
06646:  MOVLB  0
06648:  CALL   5120
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
0664C:  MOVLW  FC
0664E:  MOVWF  FF6
06650:  MOVLW  1C
06652:  MOVWF  FF7
06654:  MOVLW  00
06656:  MOVWF  FF8
06658:  CALL   22DC
....................    for (p = 0; p < flash_write_param.packetnum; p++)
0665C:  MOVLB  1
0665E:  CLRF   xEA
06660:  CLRF   xE9
06662:  MOVLB  0
06664:  MOVLB  1
06666:  MOVF   xEA,W
06668:  SUBWF  xA8,W
0666A:  BTFSC  FD8.0
0666C:  BRA    6674
0666E:  MOVLB  0
06670:  GOTO   69D0
06674:  MOVLB  0
06676:  BTFSS  FD8.2
06678:  GOTO   668E
0667C:  MOVLB  1
0667E:  MOVF   xA7,W
06680:  SUBWF  xE9,W
06682:  BTFSS  FD8.0
06684:  BRA    668C
06686:  MOVLB  0
06688:  GOTO   69D0
0668C:  MOVLB  0
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
0668E:  MOVLB  1
06690:  RLCF   xE9,W
06692:  MOVWF  xEB
06694:  RLCF   xEA,W
06696:  MOVWF  xEC
06698:  RLCF   xEB,F
0669A:  RLCF   xEC,F
0669C:  RLCF   xEB,F
0669E:  RLCF   xEC,F
066A0:  RLCF   xEB,F
066A2:  RLCF   xEC,F
066A4:  RLCF   xEB,F
066A6:  RLCF   xEC,F
066A8:  RLCF   xEB,F
066AA:  RLCF   xEC,F
066AC:  MOVLW  C0
066AE:  ANDWF  xEB,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
066B0:  CLRF   xED
066B2:  MOVLB  0
066B4:  MOVLB  1
066B6:  MOVF   xED,W
066B8:  SUBLW  3F
066BA:  BTFSC  FD8.0
066BC:  BRA    66C4
066BE:  MOVLB  0
066C0:  GOTO   6726
066C4:  MOVLB  0
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
066C6:  CLRF   03
066C8:  MOVLB  1
066CA:  MOVF   xED,W
066CC:  ADDLW  A9
066CE:  MOVWF  FE9
066D0:  MOVLW  01
066D2:  ADDWFC 03,W
066D4:  MOVWF  FEA
066D6:  MOVF   xED,W
066D8:  ADDWF  xEB,W
066DA:  MOVWF  xF8
066DC:  MOVLW  00
066DE:  ADDWFC xEC,W
066E0:  MOVWF  xF9
066E2:  MOVF   xF8,W
066E4:  MOVWF  00
066E6:  CLRF   03
066E8:  MOVF   00,W
066EA:  MOVWF  FEF
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
066EC:  CLRF   03
066EE:  MOVF   xED,W
066F0:  ADDLW  A9
066F2:  MOVWF  FE9
066F4:  MOVLW  01
066F6:  ADDWFC 03,W
066F8:  MOVWF  FEA
066FA:  MOVFF  FEF,1F6
066FE:  MOVFF  1F6,9D9
06702:  MOVLW  37
06704:  MOVLB  9
06706:  MOVWF  xDA
06708:  MOVLB  0
0670A:  CALL   2542
0670E:  MOVLW  20
06710:  BTFSS  FA6.6
06712:  GOTO   6710
06716:  MOVLB  E
06718:  MOVWF  xF9
0671A:  MOVLB  0
0671C:  MOVLB  1
0671E:  INCF   xED,F
06720:  MOVLB  0
06722:  GOTO   66B4
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
06726:  MOVLB  1
06728:  RLCF   xE9,W
0672A:  MOVWF  02
0672C:  RLCF   xEA,W
0672E:  MOVWF  03
06730:  RLCF   02,F
06732:  RLCF   03,F
06734:  RLCF   02,F
06736:  RLCF   03,F
06738:  RLCF   02,F
0673A:  RLCF   03,F
0673C:  RLCF   02,F
0673E:  RLCF   03,F
06740:  RLCF   02,F
06742:  RLCF   03,F
06744:  MOVLW  C0
06746:  ANDWF  02,F
06748:  MOVF   02,W
0674A:  ADDWF  xA3,W
0674C:  MOVWF  xEE
0674E:  MOVF   03,W
06750:  ADDWFC xA4,W
06752:  MOVWF  xEF
06754:  MOVLW  00
06756:  ADDWFC xA5,W
06758:  MOVWF  xF0
0675A:  MOVLW  00
0675C:  ADDWFC xA6,W
0675E:  MOVWF  xF1
....................       // FLASH 終端チェック (MISF_END は最終アドレス想定: inclusive)
....................       if(current_address > MISF_END){
06760:  MOVF   xF1,F
06762:  BTFSC  FD8.2
06764:  BRA    676C
06766:  MOVLB  0
06768:  GOTO   679A
0676C:  MOVLB  0
0676E:  MOVLB  1
06770:  MOVF   xF0,W
06772:  SUBLW  BB
06774:  BTFSS  FD8.0
06776:  BRA    677E
06778:  MOVLB  0
0677A:  GOTO   6870
0677E:  MOVLB  0
06780:  XORLW  FF
06782:  BTFSS  FD8.2
06784:  GOTO   679A
06788:  MOVLB  1
0678A:  MOVF   xEF,W
0678C:  SUBLW  0F
0678E:  BTFSS  FD8.0
06790:  BRA    6798
06792:  MOVLB  0
06794:  GOTO   6870
06798:  MOVLB  0
....................          fprintf(PC, "\r\n[FLASH] Write address 0x%08LX exceeds device end 0x%08LX -> abort\r\n", current_address, (unsigned int32)MISF_END);
0679A:  MOVLW  0A
0679C:  MOVWF  FF6
0679E:  MOVLW  1D
067A0:  MOVWF  FF7
067A2:  MOVLW  00
067A4:  MOVWF  FF8
067A6:  MOVLW  1A
067A8:  MOVLB  9
067AA:  MOVWF  xB3
067AC:  MOVLB  0
067AE:  CALL   2312
067B2:  MOVFF  1F1,9D9
067B6:  MOVLW  37
067B8:  MOVLB  9
067BA:  MOVWF  xDA
067BC:  MOVLB  0
067BE:  CALL   2542
067C2:  MOVFF  1F0,9D9
067C6:  MOVLW  37
067C8:  MOVLB  9
067CA:  MOVWF  xDA
067CC:  MOVLB  0
067CE:  CALL   2542
067D2:  MOVFF  1EF,9D9
067D6:  MOVLW  37
067D8:  MOVLB  9
067DA:  MOVWF  xDA
067DC:  MOVLB  0
067DE:  CALL   2542
067E2:  MOVFF  1EE,9D9
067E6:  MOVLW  37
067E8:  MOVLB  9
067EA:  MOVWF  xDA
067EC:  MOVLB  0
067EE:  CALL   2542
067F2:  MOVLW  29
067F4:  MOVWF  FF6
067F6:  MOVLW  1D
067F8:  MOVWF  FF7
067FA:  MOVLW  00
067FC:  MOVWF  FF8
067FE:  MOVLW  16
06800:  MOVLB  9
06802:  MOVWF  xB3
06804:  MOVLB  0
06806:  CALL   2312
0680A:  MOVLB  9
0680C:  CLRF   xD9
0680E:  MOVLW  37
06810:  MOVWF  xDA
06812:  MOVLB  0
06814:  CALL   2542
06818:  MOVLW  BC
0681A:  MOVLB  9
0681C:  MOVWF  xD9
0681E:  MOVLW  37
06820:  MOVWF  xDA
06822:  MOVLB  0
06824:  CALL   2542
06828:  MOVLW  0F
0682A:  MOVLB  9
0682C:  MOVWF  xD9
0682E:  MOVLW  37
06830:  MOVWF  xDA
06832:  MOVLB  0
06834:  CALL   2542
06838:  MOVLB  9
0683A:  SETF   xD9
0683C:  MOVLW  37
0683E:  MOVWF  xDA
06840:  MOVLB  0
06842:  CALL   2542
06846:  MOVLW  44
06848:  MOVWF  FF6
0684A:  MOVLW  1D
0684C:  MOVWF  FF7
0684E:  MOVLW  00
06850:  MOVWF  FF8
06852:  MOVLW  0B
06854:  MOVLB  9
06856:  MOVWF  xB3
06858:  MOVLB  0
0685A:  CALL   2312
....................          piclog_save(flash_write_param.id, PICLOG_PARAM_END);
0685E:  MOVFF  1A2,200
06862:  MOVLB  2
06864:  SETF   x01
06866:  MOVLB  0
06868:  CALL   5120
....................          break;
0686C:  GOTO   69D0
....................       }
....................       if(current_address + (PACKET_SIZE - 1) > MISF_END){
06870:  MOVLW  3F
06872:  MOVLB  1
06874:  ADDWF  xEE,W
06876:  MOVWF  xF6
06878:  MOVLW  00
0687A:  ADDWFC xEF,W
0687C:  MOVWF  xF7
0687E:  MOVLW  00
06880:  ADDWFC xF0,W
06882:  MOVWF  xF8
06884:  MOVLW  00
06886:  ADDWFC xF1,W
06888:  MOVWF  xF9
0688A:  MOVF   xF9,F
0688C:  BTFSC  FD8.2
0688E:  BRA    6896
06890:  MOVLB  0
06892:  GOTO   68C4
06896:  MOVLB  0
06898:  MOVLB  1
0689A:  MOVF   xF8,W
0689C:  SUBLW  BB
0689E:  BTFSS  FD8.0
068A0:  BRA    68A8
068A2:  MOVLB  0
068A4:  GOTO   698C
068A8:  MOVLB  0
068AA:  XORLW  FF
068AC:  BTFSS  FD8.2
068AE:  GOTO   68C4
068B2:  MOVLB  1
068B4:  MOVF   xF7,W
068B6:  SUBLW  0F
068B8:  BTFSS  FD8.0
068BA:  BRA    68C2
068BC:  MOVLB  0
068BE:  GOTO   698C
068C2:  MOVLB  0
....................          unsigned int32 remain = (MISF_END - current_address) + 1; // 書込可能残り
068C4:  MOVLW  FF
068C6:  BSF    FD8.0
068C8:  MOVLB  1
068CA:  SUBFWB xEE,W
068CC:  MOVWF  xF6
068CE:  MOVLW  0F
068D0:  SUBFWB xEF,W
068D2:  MOVWF  xF7
068D4:  MOVLW  BC
068D6:  SUBFWB xF0,W
068D8:  MOVWF  xF8
068DA:  MOVLW  00
068DC:  SUBFWB xF1,W
068DE:  MOVWF  xF9
068E0:  MOVLW  01
068E2:  ADDWF  xF6,W
068E4:  MOVWF  xF2
068E6:  MOVLW  00
068E8:  ADDWFC xF7,W
068EA:  MOVWF  xF3
068EC:  MOVLW  00
068EE:  ADDWFC xF8,W
068F0:  MOVWF  xF4
068F2:  MOVLW  00
068F4:  ADDWFC xF9,W
068F6:  MOVWF  xF5
068F8:  MOVLB  0
....................          fprintf(PC, "\r\n[FLASH] Reached end. Partial write %lu bytes (packet truncated).\r\n", remain);
068FA:  MOVLW  50
068FC:  MOVWF  FF6
068FE:  MOVLW  1D
06900:  MOVWF  FF7
06902:  MOVLW  00
06904:  MOVWF  FF8
06906:  MOVLW  25
06908:  MOVLB  9
0690A:  MOVWF  xB3
0690C:  MOVLB  0
0690E:  CALL   2312
06912:  MOVLW  41
06914:  MOVWF  FE9
06916:  MOVFF  1F5,1FA
0691A:  MOVFF  1F4,1F9
0691E:  MOVFF  1F3,1F8
06922:  MOVFF  1F2,1F7
06926:  CALL   6300
0692A:  MOVLW  78
0692C:  MOVWF  FF6
0692E:  MOVLW  1D
06930:  MOVWF  FF7
06932:  MOVLW  00
06934:  MOVWF  FF8
06936:  MOVLW  1C
06938:  MOVLB  9
0693A:  MOVWF  xB3
0693C:  MOVLB  0
0693E:  CALL   2312
....................          write_data_bytes(mis_fm, current_address, writedata, (unsigned int16)remain);
06942:  MOVFF  107,ADE
06946:  MOVFF  106,ADD
0694A:  MOVFF  105,ADC
0694E:  MOVFF  104,ADB
06952:  MOVFF  1F1,AE2
06956:  MOVFF  1F0,AE1
0695A:  MOVFF  1EF,AE0
0695E:  MOVFF  1EE,ADF
06962:  MOVLW  01
06964:  MOVLB  A
06966:  MOVWF  xE4
06968:  MOVLW  A9
0696A:  MOVWF  xE3
0696C:  MOVFF  1F3,AE6
06970:  MOVFF  1F2,AE5
06974:  MOVLB  0
06976:  CALL   3F6E
....................          piclog_save(flash_write_param.id, PICLOG_PARAM_END);
0697A:  MOVFF  1A2,200
0697E:  MOVLB  2
06980:  SETF   x01
06982:  MOVLB  0
06984:  CALL   5120
....................          break;
06988:  GOTO   69D0
....................       }
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
0698C:  MOVFF  107,ADE
06990:  MOVFF  106,ADD
06994:  MOVFF  105,ADC
06998:  MOVFF  104,ADB
0699C:  MOVFF  1F1,AE2
069A0:  MOVFF  1F0,AE1
069A4:  MOVFF  1EF,AE0
069A8:  MOVFF  1EE,ADF
069AC:  MOVLW  01
069AE:  MOVLB  A
069B0:  MOVWF  xE4
069B2:  MOVLW  A9
069B4:  MOVWF  xE3
069B6:  CLRF   xE6
069B8:  MOVLW  40
069BA:  MOVWF  xE5
069BC:  MOVLB  0
069BE:  CALL   3F6E
069C2:  MOVLB  1
069C4:  INCF   xE9,F
069C6:  BTFSC  FD8.2
069C8:  INCF   xEA,F
069CA:  MOVLB  0
069CC:  GOTO   6664
....................    }
.................... 
....................    piclog_save(flash_write_param.id, PICLOG_PARAM_END); // Log the end of the command execution
069D0:  MOVFF  1A2,200
069D4:  MOVLB  2
069D6:  SETF   x01
069D8:  MOVLB  0
069DA:  CALL   5120
....................    fprintf(PC, "\r\n");
069DE:  MOVLW  0D
069E0:  BTFSS  FA6.6
069E2:  GOTO   69E0
069E6:  MOVLB  E
069E8:  MOVWF  xF9
069EA:  MOVLW  0A
069EC:  MOVLB  0
069EE:  BTFSS  FA6.6
069F0:  GOTO   69EE
069F4:  MOVLB  E
069F6:  MOVWF  xF9
....................    fprintf(PC, "End Flash Write Demo\r\n");
069F8:  MOVLW  96
069FA:  MOVWF  FF6
069FC:  MOVLW  1D
069FE:  MOVWF  FF7
06A00:  MOVLW  00
06A02:  MOVWF  FF8
06A04:  MOVLB  0
06A06:  CALL   22DC
06A0A:  GOTO   F6E8 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
*
06A3E:  MOVLW  AE
06A40:  MOVWF  FF6
06A42:  MOVLW  1D
06A44:  MOVWF  FF7
06A46:  MOVLW  00
06A48:  MOVWF  FF8
06A4A:  CALL   22DC
....................    piclog_save(parameter[0], PICLOG_PARAM_START); // Log the command execution
06A4E:  MOVLB  1
06A50:  MOVF   xA0,W
06A52:  MOVWF  FE9
06A54:  MOVF   xA1,W
06A56:  MOVWF  FEA
06A58:  MOVFF  FEF,1A6
06A5C:  MOVFF  1A6,200
06A60:  MOVLB  2
06A62:  CLRF   x01
06A64:  MOVLB  0
06A66:  CALL   5120
....................    flash_setting(mis_fm);
06A6A:  MOVFF  107,2AE
06A6E:  MOVFF  106,2AD
06A72:  MOVFF  105,2AC
06A76:  MOVFF  104,2AB
06A7A:  CALL   6A0E
....................    unsigned int32 write_address = 0x00000000;
06A7E:  MOVLB  1
06A80:  CLRF   xA5
06A82:  CLRF   xA4
06A84:  CLRF   xA3
06A86:  CLRF   xA2
....................    //int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
....................    //write_data_bytes(mis_fm, write_address, write_data, 256);
....................    piclog_save(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06A88:  MOVF   xA0,W
06A8A:  MOVWF  FE9
06A8C:  MOVF   xA1,W
06A8E:  MOVWF  FEA
06A90:  MOVFF  FEF,1A6
06A94:  MOVFF  1A6,200
06A98:  MOVLB  2
06A9A:  SETF   x01
06A9C:  MOVLB  0
06A9E:  CALL   5120
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
06AA2:  MOVLW  D4
06AA4:  MOVWF  FF6
06AA6:  MOVLW  1D
06AA8:  MOVWF  FF7
06AAA:  MOVLW  00
06AAC:  MOVWF  FF8
06AAE:  CALL   22DC
06AB2:  GOTO   F6F8 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
06AB6:  MOVLW  F8
06AB8:  MOVWF  FF6
06ABA:  MOVLW  1D
06ABC:  MOVWF  FF7
06ABE:  MOVLW  00
06AC0:  MOVWF  FF8
06AC2:  CALL   22DC
.................... 
.................... 
....................    FLASH_PARAM flash_param = {0};
06AC6:  MOVLB  1
06AC8:  CLRF   xA2
06ACA:  CLRF   xA3
06ACC:  CLRF   xA4
06ACE:  CLRF   xA5
06AD0:  CLRF   xA6
06AD2:  CLRF   xA7
06AD4:  CLRF   xA8
....................    flash_param.id = uplinkcmd_ptr[0];
06AD6:  MOVF   xA0,W
06AD8:  MOVWF  FE9
06ADA:  MOVF   xA1,W
06ADC:  MOVWF  FEA
06ADE:  MOVFF  FEF,1A2
....................    flash_param.readaddress = -
....................       ((unsigned int32)uplinkcmd_ptr[1] << 24) |
....................       ((unsigned int32)uplinkcmd_ptr[2] << 16) |
....................       ((unsigned int32)uplinkcmd_ptr[3] << 8)  |
....................       ((unsigned int32)uplinkcmd_ptr[4]);
06AE2:  MOVLW  01
06AE4:  ADDWF  xA0,W
06AE6:  MOVWF  FE9
06AE8:  MOVLW  00
06AEA:  ADDWFC xA1,W
06AEC:  MOVWF  FEA
06AEE:  MOVF   FEF,W
06AF0:  CLRF   xFA
06AF2:  CLRF   xF9
06AF4:  CLRF   xF8
06AF6:  MOVWF  xF7
06AF8:  MOVFF  1F7,03
06AFC:  CLRF   00
06AFE:  CLRF   01
06B00:  CLRF   02
06B02:  MOVLW  00
06B04:  BSF    FD8.0
06B06:  SUBFWB 00,W
06B08:  MOVWF  xF7
06B0A:  MOVLW  00
06B0C:  SUBFWB 01,W
06B0E:  MOVWF  xF8
06B10:  MOVLW  00
06B12:  SUBFWB 02,W
06B14:  MOVWF  xF9
06B16:  MOVLW  00
06B18:  SUBFWB 03,W
06B1A:  MOVWF  xFA
06B1C:  MOVLW  02
06B1E:  ADDWF  xA0,W
06B20:  MOVWF  FE9
06B22:  MOVLW  00
06B24:  ADDWFC xA1,W
06B26:  MOVWF  FEA
06B28:  MOVF   FEF,W
06B2A:  CLRF   xFF
06B2C:  CLRF   xFE
06B2E:  CLRF   xFD
06B30:  MOVWF  xFC
06B32:  MOVFF  1FD,03
06B36:  MOVFF  1FC,02
06B3A:  CLRF   00
06B3C:  CLRF   01
06B3E:  MOVF   00,W
06B40:  IORWF  xF7,F
06B42:  MOVF   01,W
06B44:  IORWF  xF8,F
06B46:  MOVF   02,W
06B48:  IORWF  xF9,F
06B4A:  MOVF   03,W
06B4C:  IORWF  xFA,F
06B4E:  MOVLW  03
06B50:  ADDWF  xA0,W
06B52:  MOVWF  FE9
06B54:  MOVLW  00
06B56:  ADDWFC xA1,W
06B58:  MOVWF  FEA
06B5A:  MOVF   FEF,W
06B5C:  CLRF   xFF
06B5E:  CLRF   xFE
06B60:  CLRF   xFD
06B62:  MOVWF  xFC
06B64:  MOVFF  1FE,03
06B68:  MOVFF  1FD,02
06B6C:  MOVFF  1FC,01
06B70:  CLRF   00
06B72:  MOVF   00,W
06B74:  IORWF  xF7,F
06B76:  MOVF   01,W
06B78:  IORWF  xF8,F
06B7A:  MOVF   02,W
06B7C:  IORWF  xF9,F
06B7E:  MOVF   03,W
06B80:  IORWF  xFA,F
06B82:  MOVLW  04
06B84:  ADDWF  xA0,W
06B86:  MOVWF  FE9
06B88:  MOVLW  00
06B8A:  ADDWFC xA1,W
06B8C:  MOVWF  FEA
06B8E:  MOVF   FEF,W
06B90:  MOVWF  00
06B92:  CLRF   01
06B94:  CLRF   02
06B96:  CLRF   03
06B98:  MOVF   00,W
06B9A:  IORWF  xF7,W
06B9C:  MOVWF  xA5
06B9E:  MOVF   01,W
06BA0:  IORWF  xF8,W
06BA2:  MOVWF  xA6
06BA4:  MOVF   02,W
06BA6:  IORWF  xF9,W
06BA8:  MOVWF  xA7
06BAA:  MOVF   03,W
06BAC:  IORWF  xFA,W
06BAE:  MOVWF  xA8
....................    flash_param.readpacketnum = 
....................       ((unsigned int16)uplinkcmd_ptr[6] << 8) |
....................       ((unsigned int16)uplinkcmd_ptr[7]);
06BB0:  MOVLW  06
06BB2:  ADDWF  xA0,W
06BB4:  MOVWF  FE9
06BB6:  MOVLW  00
06BB8:  ADDWFC xA1,W
06BBA:  MOVWF  FEA
06BBC:  MOVF   FEF,W
06BBE:  CLRF   xF8
06BC0:  MOVWF  xF7
06BC2:  MOVFF  1F7,1F8
06BC6:  CLRF   xF7
06BC8:  MOVLW  07
06BCA:  ADDWF  xA0,W
06BCC:  MOVWF  FE9
06BCE:  MOVLW  00
06BD0:  ADDWFC xA1,W
06BD2:  MOVWF  FEA
06BD4:  MOVF   FEF,W
06BD6:  CLRF   03
06BD8:  IORWF  xF7,W
06BDA:  MOVWF  xA3
06BDC:  MOVF   03,W
06BDE:  IORWF  xF8,W
06BE0:  MOVWF  xA4
....................       piclog_save(flash_param.id, PICLOG_PARAM_START); // Log the command execution
06BE2:  MOVFF  1A2,200
06BE6:  MOVLB  2
06BE8:  CLRF   x01
06BEA:  MOVLB  0
06BEC:  CALL   5120
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
06BF0:  MOVLW  0C
06BF2:  MOVWF  FF6
06BF4:  MOVLW  1E
06BF6:  MOVWF  FF7
06BF8:  MOVLW  00
06BFA:  MOVWF  FF8
06BFC:  MOVLW  0C
06BFE:  MOVLB  9
06C00:  MOVWF  xB3
06C02:  MOVLB  0
06C04:  CALL   2312
06C08:  MOVFF  1A2,9D9
06C0C:  MOVLW  37
06C0E:  MOVLB  9
06C10:  MOVWF  xDA
06C12:  MOVLB  0
06C14:  CALL   2542
06C18:  MOVLW  0D
06C1A:  BTFSS  FA6.6
06C1C:  GOTO   6C1A
06C20:  MOVLB  E
06C22:  MOVWF  xF9
06C24:  MOVLW  0A
06C26:  MOVLB  0
06C28:  BTFSS  FA6.6
06C2A:  GOTO   6C28
06C2E:  MOVLB  E
06C30:  MOVWF  xF9
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
06C32:  MOVLW  20
06C34:  MOVWF  FF6
06C36:  MOVLW  1E
06C38:  MOVWF  FF7
06C3A:  MOVLW  00
06C3C:  MOVWF  FF8
06C3E:  MOVLW  0E
06C40:  MOVLB  9
06C42:  MOVWF  xB3
06C44:  MOVLB  0
06C46:  CALL   2312
06C4A:  MOVFF  1A8,9D9
06C4E:  MOVLW  37
06C50:  MOVLB  9
06C52:  MOVWF  xDA
06C54:  MOVLB  0
06C56:  CALL   2542
06C5A:  MOVFF  1A7,9D9
06C5E:  MOVLW  37
06C60:  MOVLB  9
06C62:  MOVWF  xDA
06C64:  MOVLB  0
06C66:  CALL   2542
06C6A:  MOVFF  1A6,9D9
06C6E:  MOVLW  37
06C70:  MOVLB  9
06C72:  MOVWF  xDA
06C74:  MOVLB  0
06C76:  CALL   2542
06C7A:  MOVFF  1A5,9D9
06C7E:  MOVLW  37
06C80:  MOVLB  9
06C82:  MOVWF  xDA
06C84:  MOVLB  0
06C86:  CALL   2542
06C8A:  MOVLW  0D
06C8C:  BTFSS  FA6.6
06C8E:  GOTO   6C8C
06C92:  MOVLB  E
06C94:  MOVWF  xF9
06C96:  MOVLW  0A
06C98:  MOVLB  0
06C9A:  BTFSS  FA6.6
06C9C:  GOTO   6C9A
06CA0:  MOVLB  E
06CA2:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
06CA4:  MOVLW  36
06CA6:  MOVWF  FF6
06CA8:  MOVLW  1E
06CAA:  MOVWF  FF7
06CAC:  MOVLW  00
06CAE:  MOVWF  FF8
06CB0:  MOVLW  0E
06CB2:  MOVLB  9
06CB4:  MOVWF  xB3
06CB6:  MOVLB  0
06CB8:  CALL   2312
06CBC:  MOVFF  1A4,9D9
06CC0:  MOVLW  37
06CC2:  MOVLB  9
06CC4:  MOVWF  xDA
06CC6:  MOVLB  0
06CC8:  CALL   2542
06CCC:  MOVFF  1A3,9D9
06CD0:  MOVLW  37
06CD2:  MOVLB  9
06CD4:  MOVWF  xDA
06CD6:  MOVLB  0
06CD8:  CALL   2542
06CDC:  MOVLW  0D
06CDE:  BTFSS  FA6.6
06CE0:  GOTO   6CDE
06CE4:  MOVLB  E
06CE6:  MOVWF  xF9
06CE8:  MOVLW  0A
06CEA:  MOVLB  0
06CEC:  BTFSS  FA6.6
06CEE:  GOTO   6CEC
06CF2:  MOVLB  E
06CF4:  MOVWF  xF9
....................    
....................    piclog_save(flash_param.id, 0x00);
06CF6:  MOVFF  1A2,200
06CFA:  MOVLB  2
06CFC:  CLRF   x01
06CFE:  MOVLB  0
06D00:  CALL   5120
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
06D04:  MOVLB  1
06D06:  CLRF   xA9
06D08:  CLRF   xAA
06D0A:  CLRF   xAB
06D0C:  CLRF   xAC
06D0E:  CLRF   xAD
06D10:  CLRF   xAE
06D12:  CLRF   xAF
06D14:  CLRF   xB0
06D16:  CLRF   xB1
06D18:  CLRF   xB2
06D1A:  CLRF   xB3
06D1C:  CLRF   xB4
06D1E:  CLRF   xB5
06D20:  CLRF   xB6
06D22:  CLRF   xB7
06D24:  CLRF   xB8
06D26:  CLRF   xB9
06D28:  CLRF   xBA
06D2A:  CLRF   xBB
06D2C:  CLRF   xBC
06D2E:  CLRF   xBD
06D30:  CLRF   xBE
06D32:  CLRF   xBF
06D34:  CLRF   xC0
06D36:  CLRF   xC1
06D38:  CLRF   xC2
06D3A:  CLRF   xC3
06D3C:  CLRF   xC4
06D3E:  CLRF   xC5
06D40:  CLRF   xC6
06D42:  CLRF   xC7
06D44:  CLRF   xC8
06D46:  CLRF   xC9
06D48:  CLRF   xCA
06D4A:  CLRF   xCB
06D4C:  CLRF   xCC
06D4E:  CLRF   xCD
06D50:  CLRF   xCE
06D52:  CLRF   xCF
06D54:  CLRF   xD0
06D56:  CLRF   xD1
06D58:  CLRF   xD2
06D5A:  CLRF   xD3
06D5C:  CLRF   xD4
06D5E:  CLRF   xD5
06D60:  CLRF   xD6
06D62:  CLRF   xD7
06D64:  CLRF   xD8
06D66:  CLRF   xD9
06D68:  CLRF   xDA
06D6A:  CLRF   xDB
06D6C:  CLRF   xDC
06D6E:  CLRF   xDD
06D70:  CLRF   xDE
06D72:  CLRF   xDF
06D74:  CLRF   xE0
06D76:  CLRF   xE1
06D78:  CLRF   xE2
06D7A:  CLRF   xE3
06D7C:  CLRF   xE4
06D7E:  CLRF   xE5
06D80:  CLRF   xE6
06D82:  CLRF   xE7
06D84:  CLRF   xE8
....................    unsigned int32 read_address;
....................    fprintf(PC, "ADDRESS  :\r\n");
06D86:  MOVLW  4C
06D88:  MOVWF  FF6
06D8A:  MOVLW  1E
06D8C:  MOVWF  FF7
06D8E:  MOVLW  00
06D90:  MOVWF  FF8
06D92:  MOVLB  0
06D94:  CALL   22DC
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
06D98:  MOVFF  107,245
06D9C:  MOVFF  106,244
06DA0:  MOVFF  105,243
06DA4:  MOVFF  104,242
06DA8:  CALL   2E12
06DAC:  MOVF   01,F
06DAE:  BTFSS  FD8.2
06DB0:  GOTO   6DD6
....................       fprintf(PC, "Mission Flash is not connected\r\n");
06DB4:  MOVLW  5A
06DB6:  MOVWF  FF6
06DB8:  MOVLW  1E
06DBA:  MOVWF  FF7
06DBC:  MOVLW  00
06DBE:  MOVWF  FF8
06DC0:  CALL   22DC
....................       piclog_save(flash_param.id, PICLOG_PARAM_END);
06DC4:  MOVFF  1A2,200
06DC8:  MOVLB  2
06DCA:  SETF   x01
06DCC:  MOVLB  0
06DCE:  CALL   5120
....................       return; // FIX: 接続失敗時終了
06DD2:  GOTO   7272
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
06DD6:  MOVLB  1
06DD8:  CLRF   xF0
06DDA:  CLRF   xEF
06DDC:  CLRF   xEE
06DDE:  CLRF   xED
06DE0:  MOVLB  0
06DE2:  MOVLB  1
06DE4:  MOVF   xF0,F
06DE6:  BTFSC  FD8.2
06DE8:  BRA    6DF0
06DEA:  MOVLB  0
06DEC:  GOTO   7254
06DF0:  MOVLB  0
06DF2:  MOVLB  1
06DF4:  MOVF   xEF,F
06DF6:  BTFSC  FD8.2
06DF8:  BRA    6E00
06DFA:  MOVLB  0
06DFC:  GOTO   7254
06E00:  MOVLB  0
06E02:  MOVLB  1
06E04:  MOVF   xEE,W
06E06:  SUBWF  xA4,W
06E08:  BTFSC  FD8.0
06E0A:  BRA    6E12
06E0C:  MOVLB  0
06E0E:  GOTO   7254
06E12:  MOVLB  0
06E14:  BTFSS  FD8.2
06E16:  GOTO   6E2C
06E1A:  MOVLB  1
06E1C:  MOVF   xA3,W
06E1E:  SUBWF  xED,W
06E20:  BTFSS  FD8.0
06E22:  BRA    6E2A
06E24:  MOVLB  0
06E26:  GOTO   7254
06E2A:  MOVLB  0
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
06E2C:  MOVLB  1
06E2E:  RLCF   xED,W
06E30:  MOVWF  00
06E32:  RLCF   xEE,W
06E34:  MOVWF  01
06E36:  RLCF   xEF,W
06E38:  MOVWF  02
06E3A:  RLCF   xF0,W
06E3C:  MOVWF  03
06E3E:  RLCF   00,F
06E40:  RLCF   01,F
06E42:  RLCF   02,F
06E44:  RLCF   03,F
06E46:  RLCF   00,F
06E48:  RLCF   01,F
06E4A:  RLCF   02,F
06E4C:  RLCF   03,F
06E4E:  RLCF   00,F
06E50:  RLCF   01,F
06E52:  RLCF   02,F
06E54:  RLCF   03,F
06E56:  RLCF   00,F
06E58:  RLCF   01,F
06E5A:  RLCF   02,F
06E5C:  RLCF   03,F
06E5E:  RLCF   00,F
06E60:  RLCF   01,F
06E62:  RLCF   02,F
06E64:  RLCF   03,F
06E66:  MOVLW  C0
06E68:  ANDWF  00,F
06E6A:  MOVF   00,W
06E6C:  ADDWF  xA5,W
06E6E:  MOVWF  xE9
06E70:  MOVF   01,W
06E72:  ADDWFC xA6,W
06E74:  MOVWF  xEA
06E76:  MOVF   02,W
06E78:  ADDWFC xA7,W
06E7A:  MOVWF  xEB
06E7C:  MOVF   03,W
06E7E:  ADDWFC xA8,W
06E80:  MOVWF  xEC
....................       // fprintf(PC, "ADDRESS 0x%08LX DATA ",read_address);
....................       // 終端チェック
....................       if(read_address > MISF_END){
06E82:  MOVF   xEC,F
06E84:  BTFSC  FD8.2
06E86:  BRA    6E8E
06E88:  MOVLB  0
06E8A:  GOTO   6EBC
06E8E:  MOVLB  0
06E90:  MOVLB  1
06E92:  MOVF   xEB,W
06E94:  SUBLW  BB
06E96:  BTFSS  FD8.0
06E98:  BRA    6EA0
06E9A:  MOVLB  0
06E9C:  GOTO   6F84
06EA0:  MOVLB  0
06EA2:  XORLW  FF
06EA4:  BTFSS  FD8.2
06EA6:  GOTO   6EBC
06EAA:  MOVLB  1
06EAC:  MOVF   xEA,W
06EAE:  SUBLW  0F
06EB0:  BTFSS  FD8.0
06EB2:  BRA    6EBA
06EB4:  MOVLB  0
06EB6:  GOTO   6F84
06EBA:  MOVLB  0
....................          fprintf(PC, "[FLASH] Read address 0x%08LX exceeds device end 0x%08LX -> stop\r\n", read_address, (unsigned int32)MISF_END);
06EBC:  MOVLW  7C
06EBE:  MOVWF  FF6
06EC0:  MOVLW  1E
06EC2:  MOVWF  FF7
06EC4:  MOVLW  00
06EC6:  MOVWF  FF8
06EC8:  MOVLW  17
06ECA:  MOVLB  9
06ECC:  MOVWF  xB3
06ECE:  MOVLB  0
06ED0:  CALL   2312
06ED4:  MOVFF  1EC,9D9
06ED8:  MOVLW  37
06EDA:  MOVLB  9
06EDC:  MOVWF  xDA
06EDE:  MOVLB  0
06EE0:  CALL   2542
06EE4:  MOVFF  1EB,9D9
06EE8:  MOVLW  37
06EEA:  MOVLB  9
06EEC:  MOVWF  xDA
06EEE:  MOVLB  0
06EF0:  CALL   2542
06EF4:  MOVFF  1EA,9D9
06EF8:  MOVLW  37
06EFA:  MOVLB  9
06EFC:  MOVWF  xDA
06EFE:  MOVLB  0
06F00:  CALL   2542
06F04:  MOVFF  1E9,9D9
06F08:  MOVLW  37
06F0A:  MOVLB  9
06F0C:  MOVWF  xDA
06F0E:  MOVLB  0
06F10:  CALL   2542
06F14:  MOVLW  98
06F16:  MOVWF  FF6
06F18:  MOVLW  1E
06F1A:  MOVWF  FF7
06F1C:  MOVLW  00
06F1E:  MOVWF  FF8
06F20:  MOVLW  16
06F22:  MOVLB  9
06F24:  MOVWF  xB3
06F26:  MOVLB  0
06F28:  CALL   2312
06F2C:  MOVLB  9
06F2E:  CLRF   xD9
06F30:  MOVLW  37
06F32:  MOVWF  xDA
06F34:  MOVLB  0
06F36:  CALL   2542
06F3A:  MOVLW  BC
06F3C:  MOVLB  9
06F3E:  MOVWF  xD9
06F40:  MOVLW  37
06F42:  MOVWF  xDA
06F44:  MOVLB  0
06F46:  CALL   2542
06F4A:  MOVLW  0F
06F4C:  MOVLB  9
06F4E:  MOVWF  xD9
06F50:  MOVLW  37
06F52:  MOVWF  xDA
06F54:  MOVLB  0
06F56:  CALL   2542
06F5A:  MOVLB  9
06F5C:  SETF   xD9
06F5E:  MOVLW  37
06F60:  MOVWF  xDA
06F62:  MOVLB  0
06F64:  CALL   2542
06F68:  MOVLW  B3
06F6A:  MOVWF  FF6
06F6C:  MOVLW  1E
06F6E:  MOVWF  FF7
06F70:  MOVLW  00
06F72:  MOVWF  FF8
06F74:  MOVLW  0A
06F76:  MOVLB  9
06F78:  MOVWF  xB3
06F7A:  MOVLB  0
06F7C:  CALL   2312
....................          break;
06F80:  GOTO   7254
....................       }
....................       if(read_address + (PACKET_SIZE - 1) > MISF_END){
06F84:  MOVLW  3F
06F86:  MOVLB  1
06F88:  ADDWF  xE9,W
06F8A:  MOVWF  xF7
06F8C:  MOVLW  00
06F8E:  ADDWFC xEA,W
06F90:  MOVWF  xF8
06F92:  MOVLW  00
06F94:  ADDWFC xEB,W
06F96:  MOVWF  xF9
06F98:  MOVLW  00
06F9A:  ADDWFC xEC,W
06F9C:  MOVWF  xFA
06F9E:  MOVF   xFA,F
06FA0:  BTFSC  FD8.2
06FA2:  BRA    6FAA
06FA4:  MOVLB  0
06FA6:  GOTO   6FD8
06FAA:  MOVLB  0
06FAC:  MOVLB  1
06FAE:  MOVF   xF9,W
06FB0:  SUBLW  BB
06FB2:  BTFSS  FD8.0
06FB4:  BRA    6FBC
06FB6:  MOVLB  0
06FB8:  GOTO   713A
06FBC:  MOVLB  0
06FBE:  XORLW  FF
06FC0:  BTFSS  FD8.2
06FC2:  GOTO   6FD8
06FC6:  MOVLB  1
06FC8:  MOVF   xF8,W
06FCA:  SUBLW  0F
06FCC:  BTFSS  FD8.0
06FCE:  BRA    6FD6
06FD0:  MOVLB  0
06FD2:  GOTO   713A
06FD6:  MOVLB  0
....................          unsigned int32 remain = (MISF_END - read_address) + 1;
06FD8:  MOVLW  FF
06FDA:  BSF    FD8.0
06FDC:  MOVLB  1
06FDE:  SUBFWB xE9,W
06FE0:  MOVWF  xF7
06FE2:  MOVLW  0F
06FE4:  SUBFWB xEA,W
06FE6:  MOVWF  xF8
06FE8:  MOVLW  BC
06FEA:  SUBFWB xEB,W
06FEC:  MOVWF  xF9
06FEE:  MOVLW  00
06FF0:  SUBFWB xEC,W
06FF2:  MOVWF  xFA
06FF4:  MOVLW  01
06FF6:  ADDWF  xF7,W
06FF8:  MOVWF  xF1
06FFA:  MOVLW  00
06FFC:  ADDWFC xF8,W
06FFE:  MOVWF  xF2
07000:  MOVLW  00
07002:  ADDWFC xF9,W
07004:  MOVWF  xF3
07006:  MOVLW  00
07008:  ADDWFC xFA,W
0700A:  MOVWF  xF4
0700C:  MOVLB  0
....................          fprintf(PC, "[FLASH] End reached. Partial read %lu bytes.\r\n", remain);
0700E:  MOVLW  BE
07010:  MOVWF  FF6
07012:  MOVLW  1E
07014:  MOVWF  FF7
07016:  MOVLW  00
07018:  MOVWF  FF8
0701A:  MOVLW  22
0701C:  MOVLB  9
0701E:  MOVWF  xB3
07020:  MOVLB  0
07022:  CALL   2312
07026:  MOVLW  41
07028:  MOVWF  FE9
0702A:  MOVFF  1F4,1FA
0702E:  MOVFF  1F3,1F9
07032:  MOVFF  1F2,1F8
07036:  MOVFF  1F1,1F7
0703A:  CALL   6300
0703E:  MOVLW  E3
07040:  MOVWF  FF6
07042:  MOVLW  1E
07044:  MOVWF  FF7
07046:  MOVLW  00
07048:  MOVWF  FF8
0704A:  MOVLW  09
0704C:  MOVLB  9
0704E:  MOVWF  xB3
07050:  MOVLB  0
07052:  CALL   2312
....................          read_data_bytes(mis_fm, read_address, readdata, remain);
07056:  MOVFF  107,ADE
0705A:  MOVFF  106,ADD
0705E:  MOVFF  105,ADC
07062:  MOVFF  104,ADB
07066:  MOVFF  1EC,AE2
0706A:  MOVFF  1EB,AE1
0706E:  MOVFF  1EA,AE0
07072:  MOVFF  1E9,ADF
07076:  MOVLW  01
07078:  MOVLB  A
0707A:  MOVWF  xE4
0707C:  MOVLW  A9
0707E:  MOVWF  xE3
07080:  MOVFF  1F4,AE8
07084:  MOVFF  1F3,AE7
07088:  MOVFF  1F2,AE6
0708C:  MOVFF  1F1,AE5
07090:  MOVLB  0
07092:  CALL   2EE0
....................          for (unsigned int8 bytecount = 0; bytecount < remain; bytecount++)
07096:  MOVLB  1
07098:  CLRF   xF5
0709A:  MOVLB  0
0709C:  MOVLB  1
0709E:  MOVF   xF4,F
070A0:  BTFSC  FD8.2
070A2:  BRA    70AA
070A4:  MOVLB  0
070A6:  GOTO   70DE
070AA:  MOVLB  0
070AC:  MOVLB  1
070AE:  MOVF   xF3,F
070B0:  BTFSC  FD8.2
070B2:  BRA    70BA
070B4:  MOVLB  0
070B6:  GOTO   70DE
070BA:  MOVLB  0
070BC:  MOVLB  1
070BE:  MOVF   xF2,F
070C0:  BTFSC  FD8.2
070C2:  BRA    70CA
070C4:  MOVLB  0
070C6:  GOTO   70DE
070CA:  MOVLB  0
070CC:  MOVLB  1
070CE:  MOVF   xF1,W
070D0:  SUBWF  xF5,W
070D2:  BTFSS  FD8.0
070D4:  BRA    70DC
070D6:  MOVLB  0
070D8:  GOTO   711A
070DC:  MOVLB  0
....................             fprintf(PC, "%02X ", readdata[bytecount]);
070DE:  CLRF   03
070E0:  MOVLB  1
070E2:  MOVF   xF5,W
070E4:  ADDLW  A9
070E6:  MOVWF  FE9
070E8:  MOVLW  01
070EA:  ADDWFC 03,W
070EC:  MOVWF  FEA
070EE:  MOVFF  FEF,1F7
070F2:  MOVFF  1F7,9D9
070F6:  MOVLW  37
070F8:  MOVLB  9
070FA:  MOVWF  xDA
070FC:  MOVLB  0
070FE:  CALL   2542
07102:  MOVLW  20
07104:  BTFSS  FA6.6
07106:  GOTO   7104
0710A:  MOVLB  E
0710C:  MOVWF  xF9
0710E:  MOVLB  0
07110:  MOVLB  1
07112:  INCF   xF5,F
07114:  MOVLB  0
07116:  GOTO   709C
....................          fprintf(PC, "\r\n");
0711A:  MOVLW  0D
0711C:  BTFSS  FA6.6
0711E:  GOTO   711C
07122:  MOVLB  E
07124:  MOVWF  xF9
07126:  MOVLW  0A
07128:  MOVLB  0
0712A:  BTFSS  FA6.6
0712C:  GOTO   712A
07130:  MOVLB  E
07132:  MOVWF  xF9
....................          break;
07134:  MOVLB  0
07136:  GOTO   7254
....................       }
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
0713A:  MOVFF  107,ADE
0713E:  MOVFF  106,ADD
07142:  MOVFF  105,ADC
07146:  MOVFF  104,ADB
0714A:  MOVFF  1EC,AE2
0714E:  MOVFF  1EB,AE1
07152:  MOVFF  1EA,AE0
07156:  MOVFF  1E9,ADF
0715A:  MOVLW  01
0715C:  MOVLB  A
0715E:  MOVWF  xE4
07160:  MOVLW  A9
07162:  MOVWF  xE3
07164:  CLRF   xE8
07166:  CLRF   xE7
07168:  CLRF   xE6
0716A:  MOVLW  40
0716C:  MOVWF  xE5
0716E:  MOVLB  0
07170:  CALL   2EE0
....................       fprintf(PC, "%08LX : ",read_address);
07174:  MOVFF  1EC,9D9
07178:  MOVLW  37
0717A:  MOVLB  9
0717C:  MOVWF  xDA
0717E:  MOVLB  0
07180:  CALL   2542
07184:  MOVFF  1EB,9D9
07188:  MOVLW  37
0718A:  MOVLB  9
0718C:  MOVWF  xDA
0718E:  MOVLB  0
07190:  CALL   2542
07194:  MOVFF  1EA,9D9
07198:  MOVLW  37
0719A:  MOVLB  9
0719C:  MOVWF  xDA
0719E:  MOVLB  0
071A0:  CALL   2542
071A4:  MOVFF  1E9,9D9
071A8:  MOVLW  37
071AA:  MOVLB  9
071AC:  MOVWF  xDA
071AE:  MOVLB  0
071B0:  CALL   2542
071B4:  MOVLW  F3
071B6:  MOVWF  FF6
071B8:  MOVLW  1E
071BA:  MOVWF  FF7
071BC:  MOVLW  00
071BE:  MOVWF  FF8
071C0:  MOVLW  03
071C2:  MOVLB  9
071C4:  MOVWF  xB3
071C6:  MOVLB  0
071C8:  CALL   2312
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
071CC:  MOVLB  1
071CE:  CLRF   xF6
071D0:  MOVLB  0
071D2:  MOVLB  1
071D4:  MOVF   xF6,W
071D6:  SUBLW  3F
071D8:  BTFSC  FD8.0
071DA:  BRA    71E2
071DC:  MOVLB  0
071DE:  GOTO   7220
071E2:  MOVLB  0
....................          fprintf(PC,"%02X ",readdata[bytecount]);
071E4:  CLRF   03
071E6:  MOVLB  1
071E8:  MOVF   xF6,W
071EA:  ADDLW  A9
071EC:  MOVWF  FE9
071EE:  MOVLW  01
071F0:  ADDWFC 03,W
071F2:  MOVWF  FEA
071F4:  MOVFF  FEF,1F7
071F8:  MOVFF  1F7,9D9
071FC:  MOVLW  37
071FE:  MOVLB  9
07200:  MOVWF  xDA
07202:  MOVLB  0
07204:  CALL   2542
07208:  MOVLW  20
0720A:  BTFSS  FA6.6
0720C:  GOTO   720A
07210:  MOVLB  E
07212:  MOVWF  xF9
07214:  MOVLB  0
07216:  MOVLB  1
07218:  INCF   xF6,F
0721A:  MOVLB  0
0721C:  GOTO   71D2
....................       }
....................       fprintf(PC,"\r\n");
07220:  MOVLW  0D
07222:  BTFSS  FA6.6
07224:  GOTO   7222
07228:  MOVLB  E
0722A:  MOVWF  xF9
0722C:  MOVLW  0A
0722E:  MOVLB  0
07230:  BTFSS  FA6.6
07232:  GOTO   7230
07236:  MOVLB  E
07238:  MOVWF  xF9
0723A:  MOVLB  0
0723C:  MOVLW  01
0723E:  MOVLB  1
07240:  ADDWF  xED,F
07242:  BTFSC  FD8.0
07244:  INCF   xEE,F
07246:  BTFSC  FD8.2
07248:  INCF   xEF,F
0724A:  BTFSC  FD8.2
0724C:  INCF   xF0,F
0724E:  MOVLB  0
07250:  GOTO   6DE2
....................    }
....................    piclog_save(flash_param.id, PICLOG_PARAM_END); // Log the end of the command execution
07254:  MOVFF  1A2,200
07258:  MOVLB  2
0725A:  SETF   x01
0725C:  MOVLB  0
0725E:  CALL   5120
....................    fprintf(PC, "End Flash Read\r\n");
07262:  MOVLW  F8
07264:  MOVWF  FF6
07266:  MOVLW  1E
07268:  MOVWF  FF7
0726A:  MOVLW  00
0726C:  MOVWF  FF8
0726E:  CALL   22DC
07272:  GOTO   F708 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
07276:  MOVLW  0A
07278:  MOVWF  FF6
0727A:  MOVLW  1F
0727C:  MOVWF  FF7
0727E:  MOVLW  00
07280:  MOVWF  FF8
07282:  CALL   22DC
....................    flash_setting(mis_fm);
07286:  MOVFF  107,2AE
0728A:  MOVFF  106,2AD
0728E:  MOVFF  105,2AC
07292:  MOVFF  104,2AB
07296:  CALL   6A0E
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
0729A:  MOVLB  1
0729C:  CLRF   xA5
0729E:  CLRF   xA4
072A0:  CLRF   xA3
072A2:  CLRF   xA2
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
072A4:  MOVFF  107,ADE
072A8:  MOVFF  106,ADD
072AC:  MOVFF  105,ADC
072B0:  MOVFF  104,ADB
072B4:  MOVFF  1A5,AE2
072B8:  MOVFF  1A4,AE1
072BC:  MOVFF  1A3,AE0
072C0:  MOVFF  1A2,ADF
072C4:  MOVLW  01
072C6:  MOVLB  A
072C8:  MOVWF  xE4
072CA:  MOVLW  A6
072CC:  MOVWF  xE3
072CE:  CLRF   xE8
072D0:  CLRF   xE7
072D2:  CLRF   xE6
072D4:  MOVLW  04
072D6:  MOVWF  xE5
072D8:  MOVLB  0
072DA:  CALL   2EE0
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
072DE:  MOVLW  26
072E0:  MOVWF  FF6
072E2:  MOVLW  1F
072E4:  MOVWF  FF7
072E6:  MOVLW  00
072E8:  MOVWF  FF8
072EA:  MOVLW  0B
072EC:  MOVLB  9
072EE:  MOVWF  xB3
072F0:  MOVLB  0
072F2:  CALL   2312
072F6:  MOVFF  1A6,9D9
072FA:  MOVLW  37
072FC:  MOVLB  9
072FE:  MOVWF  xDA
07300:  MOVLB  0
07302:  CALL   2542
07306:  MOVLW  20
07308:  BTFSS  FA6.6
0730A:  GOTO   7308
0730E:  MOVLB  E
07310:  MOVWF  xF9
07312:  MOVFF  1A7,9D9
07316:  MOVLW  37
07318:  MOVLB  9
0731A:  MOVWF  xDA
0731C:  MOVLB  0
0731E:  CALL   2542
07322:  MOVLW  20
07324:  BTFSS  FA6.6
07326:  GOTO   7324
0732A:  MOVLB  E
0732C:  MOVWF  xF9
0732E:  MOVFF  1A8,9D9
07332:  MOVLW  37
07334:  MOVLB  9
07336:  MOVWF  xDA
07338:  MOVLB  0
0733A:  CALL   2542
0733E:  MOVLW  20
07340:  BTFSS  FA6.6
07342:  GOTO   7340
07346:  MOVLB  E
07348:  MOVWF  xF9
0734A:  MOVFF  1A9,9D9
0734E:  MOVLW  37
07350:  MOVLB  9
07352:  MOVWF  xDA
07354:  MOVLB  0
07356:  CALL   2542
0735A:  MOVLW  0D
0735C:  BTFSS  FA6.6
0735E:  GOTO   735C
07362:  MOVLB  E
07364:  MOVWF  xF9
07366:  MOVLW  0A
07368:  MOVLB  0
0736A:  BTFSS  FA6.6
0736C:  GOTO   736A
07370:  MOVLB  E
07372:  MOVWF  xF9
....................    fprintf(PC, "End Flash Read Address\r\n");
07374:  MOVLW  48
07376:  MOVWF  FF6
07378:  MOVLW  1F
0737A:  MOVWF  FF7
0737C:  MOVLW  00
0737E:  MOVWF  FF8
07380:  MOVLB  0
07382:  CALL   22DC
07386:  GOTO   F718 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase and Reset\r\n");
*
0757E:  MOVLW  62
07580:  MOVWF  FF6
07582:  MOVLW  1F
07584:  MOVWF  FF7
07586:  MOVLW  00
07588:  MOVWF  FF8
0758A:  CALL   22DC
....................    piclog_save(parameter[0], PICLOG_PARAM_START); // Log the command execution
0758E:  MOVLB  1
07590:  MOVF   xB9,W
07592:  MOVWF  FE9
07594:  MOVF   xBA,W
07596:  MOVWF  FEA
07598:  MOVFF  FEF,1BB
0759C:  MOVFF  1BB,200
075A0:  MOVLB  2
075A2:  CLRF   x01
075A4:  MOVLB  0
075A6:  CALL   5120
.................... 
....................    mode_misf_erase_all(parameter); // Erase all flash memory
075AA:  MOVFF  1BA,1BC
075AE:  MOVFF  1B9,1BB
075B2:  CALL   5CA4
....................    mode_misf_address_reset(parameter); // Reset the address area
075B6:  MOVFF  1BA,1BC
075BA:  MOVFF  1B9,1BB
075BE:  GOTO   738A
.................... 
....................    fprintf(PC, "End Flash Erase and Reset\r\n");
075C2:  MOVLW  80
075C4:  MOVWF  FF6
075C6:  MOVLW  1F
075C8:  MOVWF  FF7
075CA:  MOVLW  00
075CC:  MOVWF  FF8
075CE:  CALL   22DC
075D2:  RETURN 0
.................... }
.................... // ========================== SMF Command ============================
.................... void mode_smf_copy(int8 parameter[])
.................... {
....................    printf("Start Flash SMF Copy\r\n");
075D4:  MOVLW  9C
075D6:  MOVWF  FF6
075D8:  MOVLW  1F
075DA:  MOVWF  FF7
075DC:  MOVLW  00
075DE:  MOVWF  FF8
075E0:  CALL   22DC
....................    flash_setting(mis_fm);
075E4:  MOVFF  107,2AE
075E8:  MOVFF  106,2AD
075EC:  MOVFF  105,2AC
075F0:  MOVFF  104,2AB
075F4:  CALL   6A0E
....................    flash_setting(smf);
075F8:  MOVFF  10B,2AE
075FC:  MOVFF  10A,2AD
07600:  MOVFF  109,2AC
07604:  MOVFF  108,2AB
07608:  CALL   6A0E
....................    
....................    // 統合管理システムを使用したコピー操作
....................    int8 mission_id = parameter[0];
....................    
....................    // 未コピーデータの自動転送をキューに追加
....................    //enqueue_auto_transfer(mission_id);
....................    
....................    // Example copy operation with integration system
....................    int32 src_address = 0x00000000;
....................    int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
0760C:  MOVLB  1
0760E:  MOVF   xA0,W
07610:  MOVWF  FE9
07612:  MOVF   xA1,W
07614:  MOVWF  FEA
07616:  MOVFF  FEF,1A2
0761A:  CLRF   xA6
0761C:  CLRF   xA5
0761E:  CLRF   xA4
07620:  CLRF   xA3
07622:  CLRF   xAA
07624:  CLRF   xA9
07626:  MOVLW  10
07628:  MOVWF  xA8
0762A:  CLRF   xA7
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
0762C:  MOVFF  107,ADE
07630:  MOVFF  106,ADD
07634:  MOVFF  105,ADC
07638:  MOVFF  104,ADB
0763C:  MOVFF  1A6,AE2
07640:  MOVFF  1A5,AE1
07644:  MOVFF  1A4,AE0
07648:  MOVFF  1A3,ADF
0764C:  MOVLW  01
0764E:  MOVLB  A
07650:  MOVWF  xE4
07652:  MOVLW  AB
07654:  MOVWF  xE3
07656:  CLRF   xE8
07658:  CLRF   xE7
0765A:  MOVLW  01
0765C:  MOVWF  xE6
0765E:  CLRF   xE5
07660:  MOVLB  0
07662:  CALL   2EE0
....................    write_data_bytes(smf, dest_address, read_data, 256);
07666:  MOVFF  10B,ADE
0766A:  MOVFF  10A,ADD
0766E:  MOVFF  109,ADC
07672:  MOVFF  108,ADB
07676:  MOVFF  1AA,AE2
0767A:  MOVFF  1A9,AE1
0767E:  MOVFF  1A8,AE0
07682:  MOVFF  1A7,ADF
07686:  MOVLW  01
07688:  MOVLB  A
0768A:  MOVWF  xE4
0768C:  MOVLW  AB
0768E:  MOVWF  xE3
07690:  MOVLW  01
07692:  MOVWF  xE6
07694:  CLRF   xE5
07696:  MOVLB  0
07698:  CALL   3F6E
....................    
....................    // 転送完了後のカウンタ更新
....................    //complete_transfer_and_update_counter(mission_id, 256);
....................    
....................    printf("End Flash SMF Copy\r\n");
0769C:  MOVLW  B4
0769E:  MOVWF  FF6
076A0:  MOVLW  1F
076A2:  MOVWF  FF7
076A4:  MOVLW  00
076A6:  MOVWF  FF8
076A8:  CALL   22DC
076AC:  GOTO   F738 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
076B0:  MOVLW  CA
076B2:  MOVWF  FF6
076B4:  MOVLW  1F
076B6:  MOVWF  FF7
076B8:  MOVLW  00
076BA:  MOVWF  FF8
076BC:  CALL   22DC
....................    unsigned int32 read_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
....................    unsigned int16 read_packetnum = 
....................       ((unsigned int16)parameter[6] << 8) |
....................       ((unsigned int16)parameter[7]);
....................    
....................    unsigned int8 read_data[PACKET_SIZE];
076C0:  MOVLW  01
076C2:  MOVLB  1
076C4:  ADDWF  xA0,W
076C6:  MOVWF  FE9
076C8:  MOVLW  00
076CA:  ADDWFC xA1,W
076CC:  MOVWF  FEA
076CE:  MOVF   FEF,W
076D0:  CLRF   xEC
076D2:  CLRF   xEB
076D4:  CLRF   xEA
076D6:  MOVWF  xE9
076D8:  MOVFF  1E9,1EC
076DC:  CLRF   xE9
076DE:  CLRF   xEA
076E0:  CLRF   xEB
076E2:  MOVLW  02
076E4:  ADDWF  xA0,W
076E6:  MOVWF  FE9
076E8:  MOVLW  00
076EA:  ADDWFC xA1,W
076EC:  MOVWF  FEA
076EE:  MOVF   FEF,W
076F0:  CLRF   xF1
076F2:  CLRF   xF0
076F4:  CLRF   xEF
076F6:  MOVWF  xEE
076F8:  MOVFF  1EF,03
076FC:  MOVFF  1EE,02
07700:  CLRF   00
07702:  CLRF   01
07704:  MOVF   00,W
07706:  IORWF  xE9,F
07708:  MOVF   01,W
0770A:  IORWF  xEA,F
0770C:  MOVF   02,W
0770E:  IORWF  xEB,F
07710:  MOVF   03,W
07712:  IORWF  xEC,F
07714:  MOVLW  03
07716:  ADDWF  xA0,W
07718:  MOVWF  FE9
0771A:  MOVLW  00
0771C:  ADDWFC xA1,W
0771E:  MOVWF  FEA
07720:  MOVF   FEF,W
07722:  CLRF   xF1
07724:  CLRF   xF0
07726:  CLRF   xEF
07728:  MOVWF  xEE
0772A:  MOVFF  1F0,03
0772E:  MOVFF  1EF,02
07732:  MOVFF  1EE,01
07736:  CLRF   00
07738:  MOVF   00,W
0773A:  IORWF  xE9,F
0773C:  MOVF   01,W
0773E:  IORWF  xEA,F
07740:  MOVF   02,W
07742:  IORWF  xEB,F
07744:  MOVF   03,W
07746:  IORWF  xEC,F
07748:  MOVLW  04
0774A:  ADDWF  xA0,W
0774C:  MOVWF  FE9
0774E:  MOVLW  00
07750:  ADDWFC xA1,W
07752:  MOVWF  FEA
07754:  MOVF   FEF,W
07756:  MOVWF  00
07758:  CLRF   01
0775A:  CLRF   02
0775C:  CLRF   03
0775E:  MOVF   00,W
07760:  IORWF  xE9,W
07762:  MOVWF  xA2
07764:  MOVF   01,W
07766:  IORWF  xEA,W
07768:  MOVWF  xA3
0776A:  MOVF   02,W
0776C:  IORWF  xEB,W
0776E:  MOVWF  xA4
07770:  MOVF   03,W
07772:  IORWF  xEC,W
07774:  MOVWF  xA5
07776:  MOVLW  06
07778:  ADDWF  xA0,W
0777A:  MOVWF  FE9
0777C:  MOVLW  00
0777E:  ADDWFC xA1,W
07780:  MOVWF  FEA
07782:  MOVF   FEF,W
07784:  CLRF   xEA
07786:  MOVWF  xE9
07788:  MOVFF  1E9,1EA
0778C:  CLRF   xE9
0778E:  MOVLW  07
07790:  ADDWF  xA0,W
07792:  MOVWF  FE9
07794:  MOVLW  00
07796:  ADDWFC xA1,W
07798:  MOVWF  FEA
0779A:  MOVF   FEF,W
0779C:  CLRF   03
0779E:  IORWF  xE9,W
077A0:  MOVWF  xA6
077A2:  MOVF   03,W
077A4:  IORWF  xEA,W
077A6:  MOVWF  xA7
.................... 
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", read_address);
077A8:  MOVLW  E2
077AA:  MOVWF  FF6
077AC:  MOVLW  1F
077AE:  MOVWF  FF7
077B0:  MOVLW  00
077B2:  MOVWF  FF8
077B4:  MOVLW  0E
077B6:  MOVLB  9
077B8:  MOVWF  xB3
077BA:  MOVLB  0
077BC:  CALL   2312
077C0:  MOVFF  1A5,9D9
077C4:  MOVLW  37
077C6:  MOVLB  9
077C8:  MOVWF  xDA
077CA:  MOVLB  0
077CC:  CALL   2542
077D0:  MOVFF  1A4,9D9
077D4:  MOVLW  37
077D6:  MOVLB  9
077D8:  MOVWF  xDA
077DA:  MOVLB  0
077DC:  CALL   2542
077E0:  MOVFF  1A3,9D9
077E4:  MOVLW  37
077E6:  MOVLB  9
077E8:  MOVWF  xDA
077EA:  MOVLB  0
077EC:  CALL   2542
077F0:  MOVFF  1A2,9D9
077F4:  MOVLW  37
077F6:  MOVLB  9
077F8:  MOVWF  xDA
077FA:  MOVLB  0
077FC:  CALL   2542
07800:  MOVLW  0D
07802:  BTFSS  FA6.6
07804:  GOTO   7802
07808:  MOVLB  E
0780A:  MOVWF  xF9
0780C:  MOVLW  0A
0780E:  MOVLB  0
07810:  BTFSS  FA6.6
07812:  GOTO   7810
07816:  MOVLB  E
07818:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", read_packetnum);
0781A:  MOVLW  F8
0781C:  MOVWF  FF6
0781E:  MOVLW  1F
07820:  MOVWF  FF7
07822:  MOVLW  00
07824:  MOVWF  FF8
07826:  MOVLW  0E
07828:  MOVLB  9
0782A:  MOVWF  xB3
0782C:  MOVLB  0
0782E:  CALL   2312
07832:  MOVFF  1A7,9D9
07836:  MOVLW  37
07838:  MOVLB  9
0783A:  MOVWF  xDA
0783C:  MOVLB  0
0783E:  CALL   2542
07842:  MOVFF  1A6,9D9
07846:  MOVLW  37
07848:  MOVLB  9
0784A:  MOVWF  xDA
0784C:  MOVLB  0
0784E:  CALL   2542
07852:  MOVLW  0D
07854:  BTFSS  FA6.6
07856:  GOTO   7854
0785A:  MOVLB  E
0785C:  MOVWF  xF9
0785E:  MOVLW  0A
07860:  MOVLB  0
07862:  BTFSS  FA6.6
07864:  GOTO   7862
07868:  MOVLB  E
0786A:  MOVWF  xF9
....................    fprintf(PC, "Read Data\r\n");
0786C:  MOVLW  0E
0786E:  MOVWF  FF6
07870:  MOVLW  20
07872:  MOVWF  FF7
07874:  MOVLW  00
07876:  MOVWF  FF8
07878:  MOVLB  0
0787A:  CALL   22DC
.................... 
....................    while (read_packetnum > 0) {
0787E:  MOVLB  1
07880:  MOVF   xA6,F
07882:  BTFSC  FD8.2
07884:  BRA    788C
07886:  MOVLB  0
07888:  GOTO   789E
0788C:  MOVLB  0
0788E:  MOVLB  1
07890:  MOVF   xA7,F
07892:  BTFSS  FD8.2
07894:  BRA    789C
07896:  MOVLB  0
07898:  GOTO   7966
0789C:  MOVLB  0
....................       read_data_bytes(smf, read_address, read_data, PACKET_SIZE);
0789E:  MOVFF  10B,ADE
078A2:  MOVFF  10A,ADD
078A6:  MOVFF  109,ADC
078AA:  MOVFF  108,ADB
078AE:  MOVFF  1A5,AE2
078B2:  MOVFF  1A4,AE1
078B6:  MOVFF  1A3,AE0
078BA:  MOVFF  1A2,ADF
078BE:  MOVLW  01
078C0:  MOVLB  A
078C2:  MOVWF  xE4
078C4:  MOVLW  A8
078C6:  MOVWF  xE3
078C8:  CLRF   xE8
078CA:  CLRF   xE7
078CC:  CLRF   xE6
078CE:  MOVLW  40
078D0:  MOVWF  xE5
078D2:  MOVLB  0
078D4:  CALL   2EE0
.................... 
....................       for (int i = 0; i < PACKET_SIZE; i++) {
078D8:  MOVLB  1
078DA:  CLRF   xE8
078DC:  MOVLB  0
078DE:  MOVLB  1
078E0:  MOVF   xE8,W
078E2:  SUBLW  3F
078E4:  BTFSC  FD8.0
078E6:  BRA    78EE
078E8:  MOVLB  0
078EA:  GOTO   792C
078EE:  MOVLB  0
....................          fprintf(PC, "%02X ", read_data[i]);
078F0:  CLRF   03
078F2:  MOVLB  1
078F4:  MOVF   xE8,W
078F6:  ADDLW  A8
078F8:  MOVWF  FE9
078FA:  MOVLW  01
078FC:  ADDWFC 03,W
078FE:  MOVWF  FEA
07900:  MOVFF  FEF,1E9
07904:  MOVFF  1E9,9D9
07908:  MOVLW  37
0790A:  MOVLB  9
0790C:  MOVWF  xDA
0790E:  MOVLB  0
07910:  CALL   2542
07914:  MOVLW  20
07916:  BTFSS  FA6.6
07918:  GOTO   7916
0791C:  MOVLB  E
0791E:  MOVWF  xF9
07920:  MOVLB  0
07922:  MOVLB  1
07924:  INCF   xE8,F
07926:  MOVLB  0
07928:  GOTO   78DE
....................       }
....................       fprintf(PC, "\r\n");
0792C:  MOVLW  0D
0792E:  BTFSS  FA6.6
07930:  GOTO   792E
07934:  MOVLB  E
07936:  MOVWF  xF9
07938:  MOVLW  0A
0793A:  MOVLB  0
0793C:  BTFSS  FA6.6
0793E:  GOTO   793C
07942:  MOVLB  E
07944:  MOVWF  xF9
....................       read_address += PACKET_SIZE;
07946:  MOVLW  40
07948:  MOVLB  1
0794A:  ADDWF  xA2,F
0794C:  MOVLW  00
0794E:  ADDWFC xA3,F
07950:  MOVLW  00
07952:  ADDWFC xA4,F
07954:  MOVLW  00
07956:  ADDWFC xA5,F
....................       read_packetnum--;
07958:  MOVF   xA6,W
0795A:  BTFSC  FD8.2
0795C:  DECF   xA7,F
0795E:  DECF   xA6,F
07960:  MOVLB  0
07962:  GOTO   787E
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
07966:  MOVLW  1A
07968:  MOVWF  FF6
0796A:  MOVLW  20
0796C:  MOVWF  FF7
0796E:  MOVLW  00
07970:  MOVWF  FF8
07972:  CALL   22DC
07976:  GOTO   F748 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_smf_erase(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Erase\r\n");
0797A:  MOVLW  32
0797C:  MOVWF  FF6
0797E:  MOVLW  20
07980:  MOVWF  FF7
07982:  MOVLW  00
07984:  MOVWF  FF8
07986:  CALL   22DC
....................    flash_setting(smf);
0798A:  MOVFF  10B,2AE
0798E:  MOVFF  10A,2AD
07992:  MOVFF  109,2AC
07996:  MOVFF  108,2AB
0799A:  CALL   6A0E
....................    unsigned int32 erase_address = 0x00000000; // Example address
0799E:  MOVLB  1
079A0:  CLRF   xA5
079A2:  CLRF   xA4
079A4:  CLRF   xA3
079A6:  CLRF   xA2
....................    sector_erase(smf, erase_address); // Erase the sector
079A8:  MOVFF  10B,1E9
079AC:  MOVFF  10A,1E8
079B0:  MOVFF  109,1E7
079B4:  MOVFF  108,1E6
079B8:  MOVFF  1A5,1ED
079BC:  MOVFF  1A4,1EC
079C0:  MOVFF  1A3,1EB
079C4:  MOVFF  1A2,1EA
079C8:  MOVLB  0
079CA:  CALL   5948
....................    fprintf(PC, "End Flash SMF Erase\r\n");
079CE:  MOVLW  4A
079D0:  MOVWF  FF6
079D2:  MOVLW  20
079D4:  MOVWF  FF7
079D6:  MOVLW  00
079D8:  MOVWF  FF8
079DA:  CALL   22DC
079DE:  GOTO   F758 (RETURN)
.................... }  
.................... 
.................... void mode_misf_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
*
0738A:  MOVLW  60
0738C:  MOVWF  FF6
0738E:  MOVLW  20
07390:  MOVWF  FF7
07392:  MOVLW  00
07394:  MOVWF  FF8
07396:  CALL   22DC
....................    piclog_save(parameter[0], PICLOG_PARAM_START); 
0739A:  MOVLB  1
0739C:  MOVF   xBB,W
0739E:  MOVWF  FE9
073A0:  MOVF   xBC,W
073A2:  MOVWF  FEA
073A4:  MOVFF  FEF,1FF
073A8:  MOVFF  1FF,200
073AC:  MOVLB  2
073AE:  CLRF   x01
073B0:  MOVLB  0
073B2:  CALL   5120
....................    FlashData_t flash_data;
....................    memset(flash_data.bytes, 0, PACKET_SIZE);
073B6:  MOVLW  01
073B8:  MOVWF  FEA
073BA:  MOVLW  BD
073BC:  MOVWF  FE9
073BE:  CLRF   00
073C0:  CLRF   02
073C2:  MOVLW  40
073C4:  MOVWF  01
073C6:  CALL   234C
....................    /*
....................    for (int i = 0; i < PACKET_SIZE; i++) {
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
....................    }
....................    */
....................    fprintf(PC, "\r\n");
073CA:  MOVLW  0D
073CC:  BTFSS  FA6.6
073CE:  GOTO   73CC
073D2:  MOVLB  E
073D4:  MOVWF  xF9
073D6:  MOVLW  0A
073D8:  MOVLB  0
073DA:  BTFSS  FA6.6
073DC:  GOTO   73DA
073E0:  MOVLB  E
073E2:  MOVWF  xF9
....................    flash_data.packet.crc = calc_crc8(flash_data.bytes, PACKET_SIZE-1);
073E4:  MOVLW  01
073E6:  MOVLB  A
073E8:  MOVWF  xDC
073EA:  MOVLW  BD
073EC:  MOVWF  xDB
073EE:  MOVLW  3F
073F0:  MOVWF  xDD
073F2:  MOVLB  0
073F4:  CALL   30FC
073F8:  MOVFF  01,1FC
....................    for (int i = 0; i < PACKET_SIZE; i++) {
073FC:  MOVLB  1
073FE:  CLRF   xFD
07400:  MOVLB  0
07402:  MOVLB  1
07404:  MOVF   xFD,W
07406:  SUBLW  3F
07408:  BTFSC  FD8.0
0740A:  BRA    7412
0740C:  MOVLB  0
0740E:  GOTO   7450
07412:  MOVLB  0
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
07414:  CLRF   03
07416:  MOVLB  1
07418:  MOVF   xFD,W
0741A:  ADDLW  BD
0741C:  MOVWF  FE9
0741E:  MOVLW  01
07420:  ADDWFC 03,W
07422:  MOVWF  FEA
07424:  MOVFF  FEF,1FF
07428:  MOVFF  1FF,9D9
0742C:  MOVLW  37
0742E:  MOVLB  9
07430:  MOVWF  xDA
07432:  MOVLB  0
07434:  CALL   2542
07438:  MOVLW  20
0743A:  BTFSS  FA6.6
0743C:  GOTO   743A
07440:  MOVLB  E
07442:  MOVWF  xF9
07444:  MOVLB  0
07446:  MOVLB  1
07448:  INCF   xFD,F
0744A:  MOVLB  0
0744C:  GOTO   7402
....................    }
....................    fprintf(PC, "\r\n");
07450:  MOVLW  0D
07452:  BTFSS  FA6.6
07454:  GOTO   7452
07458:  MOVLB  E
0745A:  MOVWF  xF9
0745C:  MOVLW  0A
0745E:  MOVLB  0
07460:  BTFSS  FA6.6
07462:  GOTO   7460
07466:  MOVLB  E
07468:  MOVWF  xF9
....................    write_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, flash_data.bytes, PACKET_SIZE);
0746A:  MOVFF  107,ADE
0746E:  MOVFF  106,ADD
07472:  MOVFF  105,ADC
07476:  MOVFF  104,ADB
0747A:  MOVLB  A
0747C:  CLRF   xE2
0747E:  CLRF   xE1
07480:  CLRF   xE0
07482:  CLRF   xDF
07484:  MOVLW  01
07486:  MOVWF  xE4
07488:  MOVLW  BD
0748A:  MOVWF  xE3
0748C:  CLRF   xE6
0748E:  MOVLW  40
07490:  MOVWF  xE5
07492:  MOVLB  0
07494:  CALL   3F6E
....................    memset(flash_data.bytes, 0, PACKET_SIZE);
07498:  MOVLW  01
0749A:  MOVWF  FEA
0749C:  MOVLW  BD
0749E:  MOVWF  FE9
074A0:  CLRF   00
074A2:  CLRF   02
074A4:  MOVLW  40
074A6:  MOVWF  01
074A8:  CALL   234C
....................    read_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, flash_data.bytes, PACKET_SIZE);
074AC:  MOVFF  107,ADE
074B0:  MOVFF  106,ADD
074B4:  MOVFF  105,ADC
074B8:  MOVFF  104,ADB
074BC:  MOVLB  A
074BE:  CLRF   xE2
074C0:  CLRF   xE1
074C2:  CLRF   xE0
074C4:  CLRF   xDF
074C6:  MOVLW  01
074C8:  MOVWF  xE4
074CA:  MOVLW  BD
074CC:  MOVWF  xE3
074CE:  CLRF   xE8
074D0:  CLRF   xE7
074D2:  CLRF   xE6
074D4:  MOVLW  40
074D6:  MOVWF  xE5
074D8:  MOVLB  0
074DA:  CALL   2EE0
....................    flash_data.packet.crc = calc_crc8(flash_data.bytes, PACKET_SIZE-1);
074DE:  MOVLW  01
074E0:  MOVLB  A
074E2:  MOVWF  xDC
074E4:  MOVLW  BD
074E6:  MOVWF  xDB
074E8:  MOVLW  3F
074EA:  MOVWF  xDD
074EC:  MOVLB  0
074EE:  CALL   30FC
074F2:  MOVFF  01,1FC
....................    for (int i = 0; i < PACKET_SIZE; i++) {
074F6:  MOVLB  1
074F8:  CLRF   xFE
074FA:  MOVLB  0
074FC:  MOVLB  1
074FE:  MOVF   xFE,W
07500:  SUBLW  3F
07502:  BTFSC  FD8.0
07504:  BRA    750C
07506:  MOVLB  0
07508:  GOTO   754A
0750C:  MOVLB  0
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
0750E:  CLRF   03
07510:  MOVLB  1
07512:  MOVF   xFE,W
07514:  ADDLW  BD
07516:  MOVWF  FE9
07518:  MOVLW  01
0751A:  ADDWFC 03,W
0751C:  MOVWF  FEA
0751E:  MOVFF  FEF,1FF
07522:  MOVFF  1FF,9D9
07526:  MOVLW  37
07528:  MOVLB  9
0752A:  MOVWF  xDA
0752C:  MOVLB  0
0752E:  CALL   2542
07532:  MOVLW  20
07534:  BTFSS  FA6.6
07536:  GOTO   7534
0753A:  MOVLB  E
0753C:  MOVWF  xF9
0753E:  MOVLB  0
07540:  MOVLB  1
07542:  INCF   xFE,F
07544:  MOVLB  0
07546:  GOTO   74FC
....................    }
....................    misf_init(); // Update the address area after writing
0754A:  CALL   3972
.................... 
.................... 
....................    piclog_save(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
0754E:  MOVLB  1
07550:  MOVF   xBB,W
07552:  MOVWF  FE9
07554:  MOVF   xBC,W
07556:  MOVWF  FEA
07558:  MOVFF  FEF,1FF
0755C:  MOVFF  1FF,200
07560:  MOVLB  2
07562:  SETF   x01
07564:  MOVLB  0
07566:  CALL   5120
....................    fprintf(PC, "End Flash Address Reset\r\n");
0756A:  MOVLW  7C
0756C:  MOVWF  FF6
0756E:  MOVLW  20
07570:  MOVWF  FF7
07572:  MOVLW  00
07574:  MOVWF  FF8
07576:  CALL   22DC
0757A:  GOTO   75C2 (RETURN)
.................... }
.................... 
.................... // ---------- SMF Command Functions ----------
.................... void mode_smf_read_force(int8 parameter[])
*
07CE2:  MOVLW  01
07CE4:  MOVLB  1
07CE6:  ADDWF  xA0,W
07CE8:  MOVWF  FE9
07CEA:  MOVLW  00
07CEC:  ADDWFC xA1,W
07CEE:  MOVWF  FEA
07CF0:  MOVF   FEF,W
07CF2:  CLRF   xF2
07CF4:  CLRF   xF1
07CF6:  CLRF   xF0
07CF8:  MOVWF  xEF
07CFA:  MOVFF  1EF,1F2
07CFE:  CLRF   xEF
07D00:  CLRF   xF0
07D02:  CLRF   xF1
07D04:  MOVLW  02
07D06:  ADDWF  xA0,W
07D08:  MOVWF  FE9
07D0A:  MOVLW  00
07D0C:  ADDWFC xA1,W
07D0E:  MOVWF  FEA
07D10:  MOVF   FEF,W
07D12:  CLRF   xF7
07D14:  CLRF   xF6
07D16:  CLRF   xF5
07D18:  MOVWF  xF4
07D1A:  MOVFF  1F5,03
07D1E:  MOVFF  1F4,02
07D22:  CLRF   00
07D24:  CLRF   01
07D26:  MOVF   00,W
07D28:  IORWF  xEF,F
07D2A:  MOVF   01,W
07D2C:  IORWF  xF0,F
07D2E:  MOVF   02,W
07D30:  IORWF  xF1,F
07D32:  MOVF   03,W
07D34:  IORWF  xF2,F
07D36:  MOVLW  03
07D38:  ADDWF  xA0,W
07D3A:  MOVWF  FE9
07D3C:  MOVLW  00
07D3E:  ADDWFC xA1,W
07D40:  MOVWF  FEA
07D42:  MOVF   FEF,W
07D44:  CLRF   xF7
07D46:  CLRF   xF6
07D48:  CLRF   xF5
07D4A:  MOVWF  xF4
07D4C:  MOVFF  1F6,03
07D50:  MOVFF  1F5,02
07D54:  MOVFF  1F4,01
07D58:  CLRF   00
07D5A:  MOVF   00,W
07D5C:  IORWF  xEF,F
07D5E:  MOVF   01,W
07D60:  IORWF  xF0,F
07D62:  MOVF   02,W
07D64:  IORWF  xF1,F
07D66:  MOVF   03,W
07D68:  IORWF  xF2,F
07D6A:  MOVLW  04
07D6C:  ADDWF  xA0,W
07D6E:  MOVWF  FE9
07D70:  MOVLW  00
07D72:  ADDWFC xA1,W
07D74:  MOVWF  FEA
07D76:  MOVF   FEF,W
07D78:  MOVWF  00
07D7A:  CLRF   01
07D7C:  CLRF   02
07D7E:  CLRF   03
07D80:  MOVF   00,W
07D82:  IORWF  xEF,W
07D84:  MOVWF  xA2
07D86:  MOVF   01,W
07D88:  IORWF  xF0,W
07D8A:  MOVWF  xA3
07D8C:  MOVF   02,W
07D8E:  IORWF  xF1,W
07D90:  MOVWF  xA4
07D92:  MOVF   03,W
07D94:  IORWF  xF2,W
07D96:  MOVWF  xA5
07D98:  MOVLW  07
07D9A:  ADDWF  xA0,W
07D9C:  MOVWF  FE9
07D9E:  MOVLW  00
07DA0:  ADDWFC xA1,W
07DA2:  MOVWF  FEA
07DA4:  MOVF   FEF,W
07DA6:  CLRF   xF0
07DA8:  MOVWF  xEF
07DAA:  MOVFF  1EF,1F0
07DAE:  CLRF   xEF
07DB0:  MOVLW  08
07DB2:  ADDWF  xA0,W
07DB4:  MOVWF  FE9
07DB6:  MOVLW  00
07DB8:  ADDWFC xA1,W
07DBA:  MOVWF  FEA
07DBC:  MOVF   FEF,W
07DBE:  CLRF   03
07DC0:  IORWF  xEF,W
07DC2:  MOVWF  xA6
07DC4:  MOVF   03,W
07DC6:  IORWF  xF0,W
07DC8:  MOVWF  xA7
.................... {
....................    int32 address = 
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
....................    
....................    int16 packet_num = 
....................       ((int16)parameter[7] << 8) |
....................       ((int16)parameter[8]);
....................       
....................    int8 read_data[PACKET_SIZE] = {0x00}; // Initialize read data buffer
07DCA:  CLRF   xA8
07DCC:  CLRF   xA9
07DCE:  CLRF   xAA
07DD0:  CLRF   xAB
07DD2:  CLRF   xAC
07DD4:  CLRF   xAD
07DD6:  CLRF   xAE
07DD8:  CLRF   xAF
07DDA:  CLRF   xB0
07DDC:  CLRF   xB1
07DDE:  CLRF   xB2
07DE0:  CLRF   xB3
07DE2:  CLRF   xB4
07DE4:  CLRF   xB5
07DE6:  CLRF   xB6
07DE8:  CLRF   xB7
07DEA:  CLRF   xB8
07DEC:  CLRF   xB9
07DEE:  CLRF   xBA
07DF0:  CLRF   xBB
07DF2:  CLRF   xBC
07DF4:  CLRF   xBD
07DF6:  CLRF   xBE
07DF8:  CLRF   xBF
07DFA:  CLRF   xC0
07DFC:  CLRF   xC1
07DFE:  CLRF   xC2
07E00:  CLRF   xC3
07E02:  CLRF   xC4
07E04:  CLRF   xC5
07E06:  CLRF   xC6
07E08:  CLRF   xC7
07E0A:  CLRF   xC8
07E0C:  CLRF   xC9
07E0E:  CLRF   xCA
07E10:  CLRF   xCB
07E12:  CLRF   xCC
07E14:  CLRF   xCD
07E16:  CLRF   xCE
07E18:  CLRF   xCF
07E1A:  CLRF   xD0
07E1C:  CLRF   xD1
07E1E:  CLRF   xD2
07E20:  CLRF   xD3
07E22:  CLRF   xD4
07E24:  CLRF   xD5
07E26:  CLRF   xD6
07E28:  CLRF   xD7
07E2A:  CLRF   xD8
07E2C:  CLRF   xD9
07E2E:  CLRF   xDA
07E30:  CLRF   xDB
07E32:  CLRF   xDC
07E34:  CLRF   xDD
07E36:  CLRF   xDE
07E38:  CLRF   xDF
07E3A:  CLRF   xE0
07E3C:  CLRF   xE1
07E3E:  CLRF   xE2
07E40:  CLRF   xE3
07E42:  CLRF   xE4
07E44:  CLRF   xE5
07E46:  CLRF   xE6
07E48:  CLRF   xE7
....................    if(!is_connect(smf)) {
07E4A:  MOVFF  10B,245
07E4E:  MOVFF  10A,244
07E52:  MOVFF  109,243
07E56:  MOVFF  108,242
07E5A:  MOVLB  0
07E5C:  CALL   2E12
07E60:  MOVF   01,F
07E62:  BTFSS  FD8.2
07E64:  GOTO   7E7C
....................       printf("SMF is not connected\r\n");
07E68:  MOVLW  96
07E6A:  MOVWF  FF6
07E6C:  MOVLW  20
07E6E:  MOVWF  FF7
07E70:  MOVLW  00
07E72:  MOVWF  FF8
07E74:  CALL   22DC
....................       return;
07E78:  GOTO   80D0
....................    }
....................    printf("Start Flash SMF Read Force\r\n");
07E7C:  MOVLW  AE
07E7E:  MOVWF  FF6
07E80:  MOVLW  20
07E82:  MOVWF  FF7
07E84:  MOVLW  00
07E86:  MOVWF  FF8
07E88:  CALL   22DC
....................    piclog_save(parameter[0], PICLOG_PARAM_START); // Log the command execution
07E8C:  MOVLB  1
07E8E:  MOVF   xA0,W
07E90:  MOVWF  FE9
07E92:  MOVF   xA1,W
07E94:  MOVWF  FEA
07E96:  MOVFF  FEF,1EF
07E9A:  MOVFF  1EF,200
07E9E:  MOVLB  2
07EA0:  CLRF   x01
07EA2:  MOVLB  0
07EA4:  CALL   5120
.................... 
....................    // 統合管理システムからキューに追加
....................    // enqueue_read_data(address, packet_num * PACKET_SIZE);
.................... 
....................    printf("\tAddress  : 0x%08LX\r\n", address);
07EA8:  MOVLW  CC
07EAA:  MOVWF  FF6
07EAC:  MOVLW  20
07EAE:  MOVWF  FF7
07EB0:  MOVLW  00
07EB2:  MOVWF  FF8
07EB4:  MOVLW  0E
07EB6:  MOVLB  9
07EB8:  MOVWF  xB3
07EBA:  MOVLB  0
07EBC:  CALL   2312
07EC0:  MOVFF  1A5,9D9
07EC4:  MOVLW  37
07EC6:  MOVLB  9
07EC8:  MOVWF  xDA
07ECA:  MOVLB  0
07ECC:  CALL   2542
07ED0:  MOVFF  1A4,9D9
07ED4:  MOVLW  37
07ED6:  MOVLB  9
07ED8:  MOVWF  xDA
07EDA:  MOVLB  0
07EDC:  CALL   2542
07EE0:  MOVFF  1A3,9D9
07EE4:  MOVLW  37
07EE6:  MOVLB  9
07EE8:  MOVWF  xDA
07EEA:  MOVLB  0
07EEC:  CALL   2542
07EF0:  MOVFF  1A2,9D9
07EF4:  MOVLW  37
07EF6:  MOVLB  9
07EF8:  MOVWF  xDA
07EFA:  MOVLB  0
07EFC:  CALL   2542
07F00:  MOVLW  0D
07F02:  BTFSS  FA6.6
07F04:  GOTO   7F02
07F08:  MOVLB  E
07F0A:  MOVWF  xF9
07F0C:  MOVLW  0A
07F0E:  MOVLB  0
07F10:  BTFSS  FA6.6
07F12:  GOTO   7F10
07F16:  MOVLB  E
07F18:  MOVWF  xF9
....................    printf("\tPacketNum: 0x%04LX\r\n", packet_num);
07F1A:  MOVLW  E2
07F1C:  MOVWF  FF6
07F1E:  MOVLW  20
07F20:  MOVWF  FF7
07F22:  MOVLW  00
07F24:  MOVWF  FF8
07F26:  MOVLW  0E
07F28:  MOVLB  9
07F2A:  MOVWF  xB3
07F2C:  MOVLB  0
07F2E:  CALL   2312
07F32:  MOVFF  1A7,9D9
07F36:  MOVLW  37
07F38:  MOVLB  9
07F3A:  MOVWF  xDA
07F3C:  MOVLB  0
07F3E:  CALL   2542
07F42:  MOVFF  1A6,9D9
07F46:  MOVLW  37
07F48:  MOVLB  9
07F4A:  MOVWF  xDA
07F4C:  MOVLB  0
07F4E:  CALL   2542
07F52:  MOVLW  0D
07F54:  BTFSS  FA6.6
07F56:  GOTO   7F54
07F5A:  MOVLB  E
07F5C:  MOVWF  xF9
07F5E:  MOVLW  0A
07F60:  MOVLB  0
07F62:  BTFSS  FA6.6
07F64:  GOTO   7F62
07F68:  MOVLB  E
07F6A:  MOVWF  xF9
....................    printf("read data\r\n");
07F6C:  MOVLW  F8
07F6E:  MOVWF  FF6
07F70:  MOVLW  20
07F72:  MOVWF  FF7
07F74:  MOVLW  00
07F76:  MOVWF  FF8
07F78:  MOVLB  0
07F7A:  CALL   22DC
....................    for (int16 packet_count = 0; packet_count < packet_num; packet_count++)
07F7E:  MOVLB  1
07F80:  CLRF   xE9
07F82:  CLRF   xE8
07F84:  MOVLB  0
07F86:  MOVLB  1
07F88:  MOVF   xE9,W
07F8A:  SUBWF  xA7,W
07F8C:  BTFSC  FD8.0
07F8E:  BRA    7F96
07F90:  MOVLB  0
07F92:  GOTO   80A4
07F96:  MOVLB  0
07F98:  BTFSS  FD8.2
07F9A:  GOTO   7FB0
07F9E:  MOVLB  1
07FA0:  MOVF   xA6,W
07FA2:  SUBWF  xE8,W
07FA4:  BTFSS  FD8.0
07FA6:  BRA    7FAE
07FA8:  MOVLB  0
07FAA:  GOTO   80A4
07FAE:  MOVLB  0
....................    {
....................       int32 current_address = address + (packet_count * PACKET_SIZE);
07FB0:  MOVLB  1
07FB2:  RLCF   xE8,W
07FB4:  MOVWF  02
07FB6:  RLCF   xE9,W
07FB8:  MOVWF  03
07FBA:  RLCF   02,F
07FBC:  RLCF   03,F
07FBE:  RLCF   02,F
07FC0:  RLCF   03,F
07FC2:  RLCF   02,F
07FC4:  RLCF   03,F
07FC6:  RLCF   02,F
07FC8:  RLCF   03,F
07FCA:  RLCF   02,F
07FCC:  RLCF   03,F
07FCE:  MOVLW  C0
07FD0:  ANDWF  02,F
07FD2:  MOVF   02,W
07FD4:  ADDWF  xA2,W
07FD6:  MOVWF  xEA
07FD8:  MOVF   03,W
07FDA:  ADDWFC xA3,W
07FDC:  MOVWF  xEB
07FDE:  MOVLW  00
07FE0:  ADDWFC xA4,W
07FE2:  MOVWF  xEC
07FE4:  MOVLW  00
07FE6:  ADDWFC xA5,W
07FE8:  MOVWF  xED
07FEA:  MOVLB  0
....................       read_data_bytes(smf, current_address, read_data, PACKET_SIZE);
07FEC:  MOVFF  10B,ADE
07FF0:  MOVFF  10A,ADD
07FF4:  MOVFF  109,ADC
07FF8:  MOVFF  108,ADB
07FFC:  MOVFF  1ED,AE2
08000:  MOVFF  1EC,AE1
08004:  MOVFF  1EB,AE0
08008:  MOVFF  1EA,ADF
0800C:  MOVLW  01
0800E:  MOVLB  A
08010:  MOVWF  xE4
08012:  MOVLW  A8
08014:  MOVWF  xE3
08016:  CLRF   xE8
08018:  CLRF   xE7
0801A:  CLRF   xE6
0801C:  MOVLW  40
0801E:  MOVWF  xE5
08020:  MOVLB  0
08022:  CALL   2EE0
....................       for (int8 byte_count = 0; byte_count < PACKET_SIZE; byte_count++)
08026:  MOVLB  1
08028:  CLRF   xEE
0802A:  MOVLB  0
0802C:  MOVLB  1
0802E:  MOVF   xEE,W
08030:  SUBLW  3F
08032:  BTFSC  FD8.0
08034:  BRA    803C
08036:  MOVLB  0
08038:  GOTO   807A
0803C:  MOVLB  0
....................       {
....................          printf("%02X ", read_data[byte_count]);
0803E:  CLRF   03
08040:  MOVLB  1
08042:  MOVF   xEE,W
08044:  ADDLW  A8
08046:  MOVWF  FE9
08048:  MOVLW  01
0804A:  ADDWFC 03,W
0804C:  MOVWF  FEA
0804E:  MOVFF  FEF,1EF
08052:  MOVFF  1EF,9D9
08056:  MOVLW  37
08058:  MOVLB  9
0805A:  MOVWF  xDA
0805C:  MOVLB  0
0805E:  CALL   2542
08062:  MOVLW  20
08064:  BTFSS  FA6.6
08066:  GOTO   8064
0806A:  MOVLB  E
0806C:  MOVWF  xF9
0806E:  MOVLB  0
08070:  MOVLB  1
08072:  INCF   xEE,F
08074:  MOVLB  0
08076:  GOTO   802C
....................       }
....................       printf("\r\n");
0807A:  MOVLW  0D
0807C:  BTFSS  FA6.6
0807E:  GOTO   807C
08082:  MOVLB  E
08084:  MOVWF  xF9
08086:  MOVLW  0A
08088:  MOVLB  0
0808A:  BTFSS  FA6.6
0808C:  GOTO   808A
08090:  MOVLB  E
08092:  MOVWF  xF9
08094:  MOVLB  0
08096:  MOVLB  1
08098:  INCF   xE8,F
0809A:  BTFSC  FD8.2
0809C:  INCF   xE9,F
0809E:  MOVLB  0
080A0:  GOTO   7F86
....................    }
.................... 
....................    printf("\r\nEnd Flash SMF Read Force\r\n");
080A4:  MOVLW  04
080A6:  MOVWF  FF6
080A8:  MOVLW  21
080AA:  MOVWF  FF7
080AC:  MOVLW  00
080AE:  MOVWF  FF8
080B0:  CALL   22DC
....................    piclog_save(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
080B4:  MOVLB  1
080B6:  MOVF   xA0,W
080B8:  MOVWF  FE9
080BA:  MOVF   xA1,W
080BC:  MOVWF  FEA
080BE:  MOVFF  FEF,1EF
080C2:  MOVFF  1EF,200
080C6:  MOVLB  2
080C8:  SETF   x01
080CA:  MOVLB  0
080CC:  CALL   5120
080D0:  GOTO   F778 (RETURN)
.................... }
.................... 
.................... void mode_smf_erase_force(int8 parameter[])
.................... {
....................    printf("Start SMF Erase All\r\n");
080D4:  MOVLW  22
080D6:  MOVWF  FF6
080D8:  MOVLW  21
080DA:  MOVWF  FF7
080DC:  MOVLW  00
080DE:  MOVWF  FF8
080E0:  CALL   22DC
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
080E4:  MOVLB  1
080E6:  MOVF   xA0,W
080E8:  MOVWF  FE9
080EA:  MOVF   xA1,W
080EC:  MOVWF  FEA
080EE:  MOVFF  FEF,1A2
....................    piclog_save(cmd, 0x00); // Log the command execution
080F2:  MOVFF  1A2,200
080F6:  MOVLB  2
080F8:  CLRF   x01
080FA:  MOVLB  0
080FC:  CALL   5120
....................    
.................... 
....................    
....................    for (int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_IV2_DATA_END_ADDRESS; address += SECTOR_64K_BYTE) {
08100:  MOVLW  06
08102:  MOVLB  1
08104:  MOVWF  xA6
08106:  MOVLW  AA
08108:  MOVWF  xA5
0810A:  CLRF   xA4
0810C:  CLRF   xA3
0810E:  MOVLB  0
08110:  MOVLB  1
08112:  MOVF   xA6,W
08114:  SUBLW  07
08116:  BTFSC  FD8.0
08118:  BRA    8120
0811A:  MOVLB  0
0811C:  GOTO   819E
08120:  MOVLB  0
08122:  BTFSS  FD8.2
08124:  GOTO   816A
08128:  MOVLB  1
0812A:  MOVF   xA5,W
0812C:  SUBLW  49
0812E:  BTFSC  FD8.0
08130:  BRA    8138
08132:  MOVLB  0
08134:  GOTO   819E
08138:  MOVLB  0
0813A:  BTFSS  FD8.2
0813C:  GOTO   816A
08140:  MOVLB  1
08142:  MOVF   xA4,W
08144:  SUBLW  0F
08146:  BTFSC  FD8.0
08148:  BRA    8150
0814A:  MOVLB  0
0814C:  GOTO   819E
08150:  MOVLB  0
08152:  BTFSS  FD8.2
08154:  GOTO   816A
08158:  MOVLB  1
0815A:  MOVF   xA3,W
0815C:  SUBLW  FE
0815E:  BTFSC  FD8.0
08160:  BRA    8168
08162:  MOVLB  0
08164:  GOTO   819E
08168:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
0816A:  MOVFF  10B,1E9
0816E:  MOVFF  10A,1E8
08172:  MOVFF  109,1E7
08176:  MOVFF  108,1E6
0817A:  MOVFF  1A6,1ED
0817E:  MOVFF  1A5,1EC
08182:  MOVFF  1A4,1EB
08186:  MOVFF  1A3,1EA
0818A:  CALL   5948
0818E:  MOVLW  01
08190:  MOVLB  1
08192:  ADDWF  xA5,F
08194:  MOVLW  00
08196:  ADDWFC xA6,F
08198:  MOVLB  0
0819A:  GOTO   8110
....................    }
....................    piclog_save(cmd, PICLOG_PARAM_END); // Log the end of the command execution
0819E:  MOVFF  1A2,200
081A2:  MOVLB  2
081A4:  SETF   x01
081A6:  MOVLB  0
081A8:  CALL   5120
....................    printf("End SMF Erase All\r\n");
081AC:  MOVLW  38
081AE:  MOVWF  FF6
081B0:  MOVLW  21
081B2:  MOVWF  FF7
081B4:  MOVLW  00
081B6:  MOVWF  FF8
081B8:  CALL   22DC
081BC:  GOTO   F788 (RETURN)
.................... }
.................... 
.................... void mode_smf_address_reset(int8 parameter[])
.................... {
....................    printf("Start SMF Reset\r\n");
*
07B64:  MOVLW  4C
07B66:  MOVWF  FF6
07B68:  MOVLW  21
07B6A:  MOVWF  FF7
07B6C:  MOVLW  00
07B6E:  MOVWF  FF8
07B70:  CALL   22DC
....................    piclog_save(parameter[0], PICLOG_PARAM_START);
07B74:  MOVLB  1
07B76:  MOVF   xA0,W
07B78:  MOVWF  FE9
07B7A:  MOVF   xA1,W
07B7C:  MOVWF  FEA
07B7E:  MOVFF  FEF,1E6
07B82:  MOVFF  1E6,200
07B86:  MOVLB  2
07B88:  CLRF   x01
07B8A:  MOVLB  0
07B8C:  CALL   5120
....................    int8 writedata[PACKET_SIZE] = {0x00}; 
07B90:  MOVLB  1
07B92:  CLRF   xA2
07B94:  CLRF   xA3
07B96:  CLRF   xA4
07B98:  CLRF   xA5
07B9A:  CLRF   xA6
07B9C:  CLRF   xA7
07B9E:  CLRF   xA8
07BA0:  CLRF   xA9
07BA2:  CLRF   xAA
07BA4:  CLRF   xAB
07BA6:  CLRF   xAC
07BA8:  CLRF   xAD
07BAA:  CLRF   xAE
07BAC:  CLRF   xAF
07BAE:  CLRF   xB0
07BB0:  CLRF   xB1
07BB2:  CLRF   xB2
07BB4:  CLRF   xB3
07BB6:  CLRF   xB4
07BB8:  CLRF   xB5
07BBA:  CLRF   xB6
07BBC:  CLRF   xB7
07BBE:  CLRF   xB8
07BC0:  CLRF   xB9
07BC2:  CLRF   xBA
07BC4:  CLRF   xBB
07BC6:  CLRF   xBC
07BC8:  CLRF   xBD
07BCA:  CLRF   xBE
07BCC:  CLRF   xBF
07BCE:  CLRF   xC0
07BD0:  CLRF   xC1
07BD2:  CLRF   xC2
07BD4:  CLRF   xC3
07BD6:  CLRF   xC4
07BD8:  CLRF   xC5
07BDA:  CLRF   xC6
07BDC:  CLRF   xC7
07BDE:  CLRF   xC8
07BE0:  CLRF   xC9
07BE2:  CLRF   xCA
07BE4:  CLRF   xCB
07BE6:  CLRF   xCC
07BE8:  CLRF   xCD
07BEA:  CLRF   xCE
07BEC:  CLRF   xCF
07BEE:  CLRF   xD0
07BF0:  CLRF   xD1
07BF2:  CLRF   xD2
07BF4:  CLRF   xD3
07BF6:  CLRF   xD4
07BF8:  CLRF   xD5
07BFA:  CLRF   xD6
07BFC:  CLRF   xD7
07BFE:  CLRF   xD8
07C00:  CLRF   xD9
07C02:  CLRF   xDA
07C04:  CLRF   xDB
07C06:  CLRF   xDC
07C08:  CLRF   xDD
07C0A:  CLRF   xDE
07C0C:  CLRF   xDF
07C0E:  CLRF   xE0
07C10:  CLRF   xE1
....................    for (int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_IV2_DATA_END_ADDRESS; address += SECTOR_64K_BYTE) {
07C12:  MOVLW  06
07C14:  MOVWF  xE5
07C16:  MOVLW  AA
07C18:  MOVWF  xE4
07C1A:  CLRF   xE3
07C1C:  CLRF   xE2
07C1E:  MOVLB  0
07C20:  MOVLB  1
07C22:  MOVF   xE5,W
07C24:  SUBLW  07
07C26:  BTFSC  FD8.0
07C28:  BRA    7C30
07C2A:  MOVLB  0
07C2C:  GOTO   7CAE
07C30:  MOVLB  0
07C32:  BTFSS  FD8.2
07C34:  GOTO   7C7A
07C38:  MOVLB  1
07C3A:  MOVF   xE4,W
07C3C:  SUBLW  49
07C3E:  BTFSC  FD8.0
07C40:  BRA    7C48
07C42:  MOVLB  0
07C44:  GOTO   7CAE
07C48:  MOVLB  0
07C4A:  BTFSS  FD8.2
07C4C:  GOTO   7C7A
07C50:  MOVLB  1
07C52:  MOVF   xE3,W
07C54:  SUBLW  0F
07C56:  BTFSC  FD8.0
07C58:  BRA    7C60
07C5A:  MOVLB  0
07C5C:  GOTO   7CAE
07C60:  MOVLB  0
07C62:  BTFSS  FD8.2
07C64:  GOTO   7C7A
07C68:  MOVLB  1
07C6A:  MOVF   xE2,W
07C6C:  SUBLW  FE
07C6E:  BTFSC  FD8.0
07C70:  BRA    7C78
07C72:  MOVLB  0
07C74:  GOTO   7CAE
07C78:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
07C7A:  MOVFF  10B,1E9
07C7E:  MOVFF  10A,1E8
07C82:  MOVFF  109,1E7
07C86:  MOVFF  108,1E6
07C8A:  MOVFF  1E5,1ED
07C8E:  MOVFF  1E4,1EC
07C92:  MOVFF  1E3,1EB
07C96:  MOVFF  1E2,1EA
07C9A:  CALL   5948
07C9E:  MOVLW  01
07CA0:  MOVLB  1
07CA2:  ADDWF  xE4,F
07CA4:  MOVLW  00
07CA6:  ADDWFC xE5,F
07CA8:  MOVLB  0
07CAA:  GOTO   7C20
....................    }
....................    smf_data_table_init(); // Update the address area after writing
07CAE:  CALL   79E2
.................... 
....................    piclog_save(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
07CB2:  MOVLB  1
07CB4:  MOVF   xA0,W
07CB6:  MOVWF  FE9
07CB8:  MOVF   xA1,W
07CBA:  MOVWF  FEA
07CBC:  MOVFF  FEF,1E6
07CC0:  MOVFF  1E6,200
07CC4:  MOVLB  2
07CC6:  SETF   x01
07CC8:  MOVLB  0
07CCA:  CALL   5120
....................    printf("End SMF Reset\r\n");
07CCE:  MOVLW  5E
07CD0:  MOVWF  FF6
07CD2:  MOVLW  21
07CD4:  MOVWF  FF7
07CD6:  MOVLW  00
07CD8:  MOVWF  FF8
07CDA:  CALL   22DC
07CDE:  GOTO   F768 (RETURN)
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
127FE:  CLRF   FF8
12800:  BCF    FF1.2
12802:  BCF    F9F.0
12804:  BCF    FA9.5
12806:  BSF    FD0.7
12808:  BSF    07.7
1280A:  MOVLB  E
1280C:  MOVLW  55
1280E:  MOVWF  F7E
12810:  MOVLW  AA
12812:  MOVWF  F7E
12814:  BCF    F66.6
12816:  MOVLW  F9
12818:  MOVWF  x2C
1281A:  MOVLW  F6
1281C:  MOVWF  x2D
1281E:  MOVLW  0F
12820:  MOVWF  x2E
12822:  MOVLW  40
12824:  MOVWF  x12
12826:  MOVLW  30
12828:  MOVWF  x13
1282A:  MOVLW  20
1282C:  MOVWF  x22
1282E:  MOVLW  30
12830:  MOVWF  x24
12832:  MOVLW  55
12834:  MOVWF  F7E
12836:  MOVLW  AA
12838:  MOVWF  F7E
1283A:  BSF    F66.6
1283C:  CLRF   F9B
1283E:  CLRF   F64
12840:  CLRF   F65
12842:  CLRF   F66
12844:  MOVLW  02
12846:  MOVWF  FD3
12848:  CLRF   1B
1284A:  MOVLB  F
1284C:  BSF    x2D.3
1284E:  MOVLW  A0
12850:  MOVWF  x2B
12852:  MOVLW  01
12854:  MOVWF  x2C
12856:  MOVLW  A6
12858:  MOVWF  x2E
1285A:  MOVLW  90
1285C:  MOVWF  x2F
1285E:  MOVLB  E
12860:  BSF    xFD.3
12862:  MOVLW  A0
12864:  MOVWF  xFB
12866:  MOVLW  01
12868:  MOVWF  xFC
1286A:  MOVLW  A6
1286C:  MOVWF  xFE
1286E:  MOVLW  90
12870:  MOVWF  xFF
12872:  BSF    F92.1
12874:  BCF    F92.0
12876:  BCF    F92.3
12878:  BCF    F89.3
1287A:  BSF    F96.0
1287C:  BCF    F96.6
1287E:  BCF    F96.1
12880:  BCF    F8D.1
12882:  BSF    F93.4
12884:  BCF    F93.5
12886:  BCF    F93.2
12888:  BSF    F8A.2
1288A:  BCF    F95.4
1288C:  BCF    F95.5
1288E:  BSF    F8C.5
12890:  CLRF   3C
12892:  BCF    3D.0
12894:  MOVLW  1E
12896:  MOVLB  1
12898:  MOVWF  x6E
1289A:  CLRF   x72
1289C:  CLRF   x71
1289E:  CLRF   x70
128A0:  CLRF   x6F
128A2:  CLRF   x76
128A4:  CLRF   x75
128A6:  CLRF   x74
128A8:  CLRF   x73
128AA:  CLRF   x78
128AC:  CLRF   x77
128AE:  MOVLB  E
128B0:  CLRF   xD9
128B2:  CLRF   xDA
128B4:  CLRF   xCE
128B6:  CLRF   xCF
128B8:  CLRF   xD0
128BA:  CLRF   xD1
128BC:  CLRF   xD2
128BE:  CLRF   xD3
128C0:  CLRF   xD4
128C2:  CLRF   xD5
128C4:  CLRF   x45
128C6:  CLRF   x46
128C8:  CLRF   x47
128CA:  BCF    x8D.7
128CC:  BCF    x8D.6
128CE:  BCF    x8D.5
128D0:  MOVLB  F
128D2:  CLRF   x53
128D4:  CLRF   x38
128D6:  CLRF   x37
128D8:  MOVLB  0
128DA:  CLRF   1C
128DC:  CLRF   1D
128DE:  CLRF   1E
128E0:  CLRF   1F
128E2:  CLRF   20
128E4:  CLRF   21
128E6:  CLRF   22
128E8:  CLRF   23
128EA:  CLRF   24
128EC:  CLRF   25
128EE:  CLRF   26
128F0:  CLRF   27
128F2:  CLRF   28
128F4:  CLRF   29
128F6:  CLRF   2A
128F8:  CLRF   2B
128FA:  CLRF   2C
128FC:  CLRF   2D
128FE:  CLRF   2E
12900:  CLRF   2F
12902:  CLRF   30
12904:  CLRF   31
12906:  CLRF   32
12908:  CLRF   33
1290A:  CLRF   34
1290C:  CLRF   35
1290E:  CLRF   36
12910:  CLRF   37
12912:  CLRF   38
12914:  CLRF   39
12916:  CLRF   3A
12918:  CLRF   3B
1291A:  MOVLW  03
1291C:  MOVWF  3E
1291E:  CLRF   3F
12920:  CLRF   40
12922:  CLRF   41
12924:  CLRF   42
12926:  CLRF   43
12928:  CLRF   44
1292A:  CLRF   45
1292C:  CLRF   46
1292E:  CLRF   47
12930:  CLRF   48
12932:  CLRF   49
12934:  CLRF   4A
12936:  CLRF   4B
12938:  CLRF   4C
1293A:  CLRF   4D
1293C:  CLRF   4E
1293E:  CLRF   4F
12940:  CLRF   50
12942:  CLRF   51
12944:  CLRF   52
12946:  CLRF   53
12948:  CLRF   54
1294A:  CLRF   55
1294C:  CLRF   56
1294E:  CLRF   57
12950:  CLRF   58
12952:  CLRF   59
12954:  CLRF   5A
12956:  CLRF   5B
12958:  CLRF   5C
1295A:  CLRF   5D
1295C:  CLRF   5E
1295E:  CLRF   5F
12960:  CLRF   x60
12962:  CLRF   x61
12964:  CLRF   x62
12966:  CLRF   x63
12968:  CLRF   x64
1296A:  CLRF   x65
1296C:  CLRF   x66
1296E:  CLRF   x67
12970:  CLRF   x68
12972:  CLRF   x69
12974:  CLRF   x6A
12976:  CLRF   x6B
12978:  CLRF   x6C
1297A:  CLRF   x6D
1297C:  CLRF   x6E
1297E:  CLRF   x6F
12980:  CLRF   x70
12982:  CLRF   x71
12984:  CLRF   x72
12986:  CLRF   x73
12988:  CLRF   x74
1298A:  CLRF   x75
1298C:  CLRF   x76
1298E:  CLRF   x77
12990:  CLRF   x78
12992:  CLRF   x79
12994:  CLRF   x7A
12996:  CLRF   x7B
12998:  CLRF   x7C
1299A:  CLRF   x7D
1299C:  CLRF   x7E
1299E:  CLRF   x7F
129A0:  CLRF   x80
129A2:  CLRF   x81
129A4:  CLRF   x82
129A6:  CLRF   x83
129A8:  CLRF   x84
129AA:  CLRF   x85
129AC:  CLRF   x86
129AE:  CLRF   x87
129B0:  CLRF   x88
129B2:  CLRF   x89
129B4:  CLRF   x8A
129B6:  CLRF   x8B
129B8:  CLRF   x8C
129BA:  CLRF   x8D
129BC:  CLRF   x8E
129BE:  CLRF   x8F
129C0:  CLRF   x90
129C2:  CLRF   x91
129C4:  CLRF   x92
129C6:  CLRF   x93
129C8:  CLRF   x94
129CA:  CLRF   x95
129CC:  CLRF   x96
129CE:  CLRF   x97
129D0:  CLRF   x98
129D2:  CLRF   x99
129D4:  CLRF   x9A
129D6:  CLRF   x9B
129D8:  CLRF   x9C
129DA:  CLRF   x9D
129DC:  CLRF   x9E
129DE:  CLRF   x9F
129E0:  CLRF   xA0
129E2:  CLRF   xA1
129E4:  CLRF   xA2
129E6:  CLRF   xA3
129E8:  CLRF   xA4
129EA:  CLRF   xA5
129EC:  CLRF   xA6
129EE:  CLRF   xA7
129F0:  CLRF   xA8
129F2:  CLRF   xA9
129F4:  CLRF   xAA
129F6:  CLRF   xAB
129F8:  CLRF   xAC
129FA:  CLRF   xAD
129FC:  CLRF   xAE
129FE:  CLRF   xAF
12A00:  CLRF   xB0
12A02:  CLRF   xB1
12A04:  CLRF   xB2
12A06:  CLRF   xB3
12A08:  CLRF   xB4
12A0A:  CLRF   xB5
12A0C:  CLRF   xB6
12A0E:  CLRF   xB7
12A10:  CLRF   xB8
12A12:  CLRF   xB9
12A14:  CLRF   xBA
12A16:  CLRF   xBB
12A18:  CLRF   xBC
12A1A:  CLRF   xBD
12A1C:  CLRF   xBE
12A1E:  CLRF   xBF
12A20:  CLRF   xC0
12A22:  CLRF   xC1
12A24:  CLRF   xC2
12A26:  CLRF   xC3
12A28:  CLRF   xC4
12A2A:  CLRF   xC5
12A2C:  CLRF   xC6
12A2E:  CLRF   xC7
12A30:  CLRF   xC8
12A32:  CLRF   xC9
12A34:  CLRF   xCA
12A36:  CLRF   xCB
12A38:  CLRF   xCC
12A3A:  CLRF   xCD
12A3C:  CLRF   xCE
12A3E:  CLRF   xCF
12A40:  CLRF   xD0
12A42:  CLRF   xD1
12A44:  CLRF   xD2
12A46:  CLRF   xD3
12A48:  CLRF   xD4
12A4A:  CLRF   xD5
12A4C:  CLRF   xD6
12A4E:  CLRF   xD7
12A50:  CLRF   xD8
12A52:  CLRF   xD9
12A54:  CLRF   xDA
12A56:  CLRF   xDB
12A58:  CLRF   xDC
12A5A:  CLRF   xDD
12A5C:  CLRF   xDE
12A5E:  CLRF   xDF
12A60:  CLRF   xE0
12A62:  CLRF   xE1
12A64:  CLRF   xE2
12A66:  CLRF   xE3
12A68:  CLRF   xE4
12A6A:  CLRF   xE5
12A6C:  CLRF   xE6
12A6E:  CLRF   xE7
12A70:  CLRF   xE8
12A72:  CLRF   xE9
12A74:  CLRF   xEA
12A76:  CLRF   xEB
12A78:  CLRF   xEC
12A7A:  CLRF   xED
12A7C:  CLRF   xEE
12A7E:  CLRF   xEF
12A80:  CLRF   xF0
12A82:  CLRF   xF1
12A84:  CLRF   xF2
12A86:  CLRF   xF3
12A88:  CLRF   xF4
12A8A:  CLRF   xF5
12A8C:  CLRF   xF6
12A8E:  CLRF   xF7
12A90:  CLRF   xF8
12A92:  CLRF   xF9
12A94:  CLRF   xFA
12A96:  CLRF   xFB
12A98:  CLRF   xFC
12A9A:  CLRF   xFD
12A9C:  CLRF   xFE
12A9E:  CLRF   xFF
12AA0:  MOVLB  1
12AA2:  CLRF   x00
12AA4:  CLRF   x01
12AA6:  CLRF   x02
12AA8:  CLRF   x03
12AAA:  CLRF   x04
12AAC:  CLRF   x05
12AAE:  MOVLW  30
12AB0:  MOVWF  x06
12AB2:  MOVLW  7C
12AB4:  MOVWF  x07
12AB6:  MOVLW  01
12AB8:  MOVWF  x08
12ABA:  MOVLW  01
12ABC:  MOVWF  x09
12ABE:  MOVLW  02
12AC0:  MOVWF  x0A
12AC2:  MOVLW  7C
12AC4:  MOVWF  x0B
12AC6:  CLRF   x0C
12AC8:  MOVLW  09
12ACA:  MOVWF  x0D
12ACC:  MOVLW  01
12ACE:  MOVWF  x0E
12AD0:  CLRF   x0F
12AD2:  MOVLW  02
12AD4:  MOVWF  x10
12AD6:  MOVLW  01
12AD8:  MOVWF  x11
12ADA:  MOVLW  03
12ADC:  MOVWF  x12
12ADE:  MOVLW  04
12AE0:  MOVWF  x13
12AE2:  MOVLW  01
12AE4:  MOVWF  x5B
12AE6:  MOVLW  14
12AE8:  MOVWF  x5A
12AEA:  MOVLW  01
12AEC:  MOVWF  x5D
12AEE:  MOVLW  1E
12AF0:  MOVWF  x5C
12AF2:  MOVLW  01
12AF4:  MOVWF  x5F
12AF6:  MOVLW  28
12AF8:  MOVWF  x5E
12AFA:  MOVLW  01
12AFC:  MOVWF  x61
12AFE:  MOVLW  32
12B00:  MOVWF  x60
12B02:  MOVLW  01
12B04:  MOVWF  x63
12B06:  MOVLW  3C
12B08:  MOVWF  x62
12B0A:  MOVLW  01
12B0C:  MOVWF  x65
12B0E:  MOVLW  46
12B10:  MOVWF  x64
12B12:  MOVLW  01
12B14:  MOVWF  x67
12B16:  MOVLW  50
12B18:  MOVWF  x66
12B1A:  CLRF   x79
12B1C:  CLRF   x7A
12B1E:  CLRF   x7B
12B20:  CLRF   x7C
12B22:  MOVLB  0
.................... { 
....................    delay_ms(100); // wait for power stable
12B24:  MOVLW  64
12B26:  MOVLB  A
12B28:  MOVWF  xF3
12B2A:  MOVLB  0
12B2C:  CALL   22AE
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
12B30:  MOVLW  6E
12B32:  MOVWF  FF6
12B34:  MOVLW  21
12B36:  MOVWF  FF7
12B38:  MOVLW  00
12B3A:  MOVWF  FF8
12B3C:  CALL   22DC
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM6.\r\n");
12B40:  MOVLW  B4
12B42:  MOVWF  FF6
12B44:  MOVLW  21
12B46:  MOVWF  FF7
12B48:  MOVLW  00
12B4A:  MOVWF  FF8
12B4C:  CALL   22DC
....................    fprintf(PC,"Last updated on %s %s, by Inoue.\r\n\r\n", __DATE__, __TIME__);
12B50:  MOVLW  E2
12B52:  MOVWF  FF6
12B54:  MOVLW  21
12B56:  MOVWF  FF7
12B58:  MOVLW  00
12B5A:  MOVWF  FF8
12B5C:  MOVLW  10
12B5E:  MOVLB  9
12B60:  MOVWF  xB3
12B62:  MOVLB  0
12B64:  CALL   2312
12B68:  MOVLW  08
12B6A:  MOVWF  FF6
12B6C:  MOVLW  22
12B6E:  MOVWF  FF7
12B70:  MOVLW  00
12B72:  MOVWF  FF8
12B74:  CALL   22DC
12B78:  MOVLW  20
12B7A:  BTFSS  FA6.6
12B7C:  GOTO   12B7A
12B80:  MOVLB  E
12B82:  MOVWF  xF9
12B84:  MOVLW  12
12B86:  MOVWF  FF6
12B88:  MOVLW  22
12B8A:  MOVWF  FF7
12B8C:  MOVLW  00
12B8E:  MOVWF  FF8
12B90:  MOVLB  0
12B92:  CALL   22DC
12B96:  MOVLW  F7
12B98:  MOVWF  FF6
12B9A:  MOVLW  21
12B9C:  MOVWF  FF7
12B9E:  MOVLW  00
12BA0:  MOVWF  FF8
12BA2:  MOVLW  0F
12BA4:  MOVLB  9
12BA6:  MOVWF  xB3
12BA8:  MOVLB  0
12BAA:  CALL   2312
....................    memset(smf_update_flag, 0, sizeof(smf_update_flag));
12BAE:  MOVLW  01
12BB0:  MOVWF  FEA
12BB2:  MOVLW  6C
12BB4:  MOVWF  FE9
12BB6:  CLRF   00
12BB8:  CLRF   02
12BBA:  MOVLW  02
12BBC:  MOVWF  01
12BBE:  CALL   234C
....................    // io_init();
....................    setup_uart_to_boss();
12BC2:  GOTO   2370
....................    timer_init();
12BC6:  GOTO   239A
....................    ad7490_init();
12BCA:  GOTO   25BE
....................    mcp4901_init();
12BCE:  GOTO   28EE
....................    misf_init();
12BD2:  CALL   3972
....................    
....................    piclog_save(PICLOG_STARTUP,0x00);
12BD6:  MOVLB  2
12BD8:  CLRF   x00
12BDA:  CLRF   x01
12BDC:  MOVLB  0
12BDE:  CALL   5120
.................... 
....................    int1 is_finished = FALSE;
12BE2:  MOVLB  1
12BE4:  BCF    x7D.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
12BE6:  MOVLW  1C
12BE8:  MOVWF  FF6
12BEA:  MOVLW  22
12BEC:  MOVWF  FF7
12BEE:  MOVLW  00
12BF0:  MOVWF  FF8
12BF2:  MOVLB  0
12BF4:  CALL   22DC
....................    
....................    //enable_negative_power();
....................    connect_port1();
12BF8:  CALL   5248
....................    connect_port2();
12BFC:  CALL   5250
....................    mcp4901_1_write(0);
12C00:  MOVLB  9
12C02:  CLRF   xCE
12C04:  CLRF   xCD
12C06:  MOVLB  0
12C08:  CALL   2872
....................    mcp4901_2_write(0);
12C0C:  MOVLB  9
12C0E:  CLRF   xCE
12C10:  CLRF   xCD
12C12:  MOVLB  0
12C14:  CALL   28B0
....................    connect_negative_power1(TRUE); // CIGS1 Negative Power ON
12C18:  MOVLW  01
12C1A:  MOVLB  1
12C1C:  MOVWF  x8A
12C1E:  MOVLB  0
12C20:  GOTO   5258
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
12C24:  MOVLW  42
12C26:  MOVWF  FF6
12C28:  MOVLW  22
12C2A:  MOVWF  FF7
12C2C:  MOVLW  00
12C2E:  MOVWF  FF8
12C30:  CALL   22DC
.................... 
....................    //Start loop
....................    while(TRUE)
....................    {
....................       if(boss_receive_buffer_size > 0)
12C34:  MOVF   3C,F
12C36:  BTFSC  FD8.2
12C38:  GOTO   12CDA
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
12C3C:  MOVLB  1
12C3E:  CLRF   x91
12C40:  MOVLW  1C
12C42:  MOVWF  x90
12C44:  MOVFF  3C,192
12C48:  MOVLB  0
12C4A:  GOTO   5594
12C4E:  MOVFF  02,03
12C52:  MOVF   01,W
12C54:  MOVWF  FE1
12C56:  MOVFF  03,FE2
12C5A:  MOVLW  01
12C5C:  MOVWF  FEA
12C5E:  MOVLW  7E
12C60:  MOVWF  FE9
12C62:  MOVLW  0C
12C64:  MOVWF  01
12C66:  MOVFF  FE6,FEE
12C6A:  DECFSZ 01,F
12C6C:  GOTO   12C66
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
12C70:  MOVLB  1
12C72:  CLRF   xD1
12C74:  MOVLW  1C
12C76:  MOVWF  xD0
12C78:  CLRF   xD3
12C7A:  MOVLW  3C
12C7C:  MOVWF  xD2
12C7E:  MOVLB  0
12C80:  CALL   5796
....................          
....................          if(recieve_cmd.is_exist){
12C84:  MOVLB  1
12C86:  BTFSC  x80.0
12C88:  BRA    12C90
12C8A:  MOVLB  0
12C8C:  GOTO   12CDA
12C90:  MOVLB  0
....................             is_finished = execute_command(&recieve_cmd); // FIX: 戻り値を保持
12C92:  MOVLW  01
12C94:  MOVLB  1
12C96:  MOVWF  x8B
12C98:  MOVLW  7E
12C9A:  MOVWF  x8A
12C9C:  MOVLB  0
12C9E:  GOTO   FF4A
12CA2:  MOVLB  1
12CA4:  BCF    x7D.0
12CA6:  BTFSC  01.0
12CA8:  BSF    x7D.0
....................             if (is_finished == TRUE)
12CAA:  BTFSC  x7D.0
12CAC:  BRA    12CB4
12CAE:  MOVLB  0
12CB0:  GOTO   12CCA
12CB4:  MOVLB  0
....................             {
....................                fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\n");
12CB6:  MOVLW  60
12CB8:  MOVWF  FF6
12CBA:  MOVLW  22
12CBC:  MOVWF  FF7
12CBE:  MOVLW  00
12CC0:  MOVWF  FF8
12CC2:  CALL   22DC
....................                
.................... 
....................             }else{
12CC6:  GOTO   12CDA
....................                fprintf(PC,"\r\nwaiting for BOSS PIC command");
12CCA:  MOVLW  82
12CCC:  MOVWF  FF6
12CCE:  MOVLW  22
12CD0:  MOVWF  FF7
12CD2:  MOVLW  00
12CD4:  MOVWF  FF8
12CD6:  CALL   22DC
....................             }
....................          }
....................       }
....................          
....................       delay_ms(500);
12CDA:  MOVLW  02
12CDC:  MOVLB  1
12CDE:  MOVWF  x8A
12CE0:  MOVLB  0
12CE2:  MOVLW  FA
12CE4:  MOVLB  A
12CE6:  MOVWF  xF3
12CE8:  MOVLB  0
12CEA:  CALL   22AE
12CEE:  MOVLB  1
12CF0:  DECFSZ x8A,F
12CF2:  BRA    12CF8
12CF4:  BRA    12CFC
12CF6:  MOVLB  0
12CF8:  MOVLB  0
12CFA:  BRA    12CE2
....................       fprintf(PC, ".");
12CFC:  MOVLW  2E
12CFE:  MOVLB  0
12D00:  BTFSS  FA6.6
12D02:  GOTO   12D00
12D06:  MOVLB  E
12D08:  MOVWF  xF9
12D0A:  MOVLB  0
12D0C:  GOTO   12C34
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
12D10:  MOVLW  A2
12D12:  MOVWF  FF6
12D14:  MOVLW  22
12D16:  MOVWF  FF7
12D18:  MOVLW  00
12D1A:  MOVWF  FF8
12D1C:  CALL   22DC
....................    
.................... }
.................... // End of files
12D20:  SLEEP 

Configuration Fuses:
   Word  1: F6A0   STVREN NOXINST NODEBUG NOBROWNOUT BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS NODSWDT DSWDTOSC_INT
