CCS PCH C Compiler, Version 5.104, 57077               23-10-25 12:27

               Filename:   c:\Users\shoin\source\repos\MMJ_SW_053_CIGS_PIC\cigs\build\mmj_cigs_main.lst

               ROM used:   77366 bytes (59%)
                           Largest free fragment is 53626
               RAM used:   410 (11%) at main() level
                           2862 (80%) worst case
               Stack used: 9 locations (8 in main + 1 for interrupts)
               Stack size: 31

*
00000:  NOP   
00002:  GOTO   12936
*
00008:  NOP   
0000A:  NOP   
0000C:  NOP   
0000E:  NOP   
00010:  NOP   
00012:  NOP   
00014:  NOP   
00016:  NOP   
00018:  MOVWF  04
0001A:  MOVFF  FD8,05
0001E:  MOVFF  FE0,06
00022:  MOVLB  0
00024:  MOVFF  FE9,0C
00028:  MOVFF  FEA,07
0002C:  MOVFF  FE1,08
00030:  MOVFF  FE2,09
00034:  MOVFF  FD9,0A
00038:  MOVFF  FDA,0B
0003C:  MOVFF  FF3,12
00040:  MOVFF  FF4,13
00044:  MOVFF  FFA,14
00048:  MOVFF  FF5,15
0004C:  MOVFF  FF6,16
00050:  MOVFF  FF7,17
00054:  MOVFF  FF8,18
00058:  MOVFF  FFB,19
0005C:  MOVFF  00,0E
00060:  MOVFF  01,0F
00064:  MOVFF  02,10
00068:  MOVFF  03,11
0006C:  BTFSS  FF2.5
0006E:  GOTO   0078
00072:  BTFSC  FF2.2
00074:  GOTO   014E
00078:  BTFSS  F9D.0
0007A:  GOTO   0084
0007E:  BTFSC  F9E.0
00080:  GOTO   01D6
00084:  BTFSS  F61.5
00086:  GOTO   0090
0008A:  BTFSC  FA6.5
0008C:  GOTO   0240
00090:  MOVFF  0E,00
00094:  MOVFF  0F,01
00098:  MOVFF  10,02
0009C:  MOVFF  11,03
000A0:  MOVFF  0C,FE9
000A4:  MOVFF  07,FEA
000A8:  BSF    07.7
000AA:  MOVFF  08,FE1
000AE:  MOVFF  09,FE2
000B2:  MOVFF  0A,FD9
000B6:  MOVFF  0B,FDA
000BA:  MOVFF  12,FF3
000BE:  MOVFF  13,FF4
000C2:  MOVFF  14,FFA
000C6:  MOVFF  15,FF5
000CA:  MOVFF  16,FF6
000CE:  MOVFF  17,FF7
000D2:  MOVFF  18,FF8
000D6:  MOVFF  19,FFB
000DA:  MOVF   04,W
000DC:  MOVFF  06,FE0
000E0:  MOVFF  05,FD8
000E4:  RETFIE 0
.................... #include "mmj_cigs_main.h"  // ルート直下のヘッダー
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... #opt 0 // 0 = no optimization
.................... 
.................... //==============================================================================
.................... // CCS C 最適化構造: ヘッダー分散 + .cファイル統合
.................... //==============================================================================
.................... 
.................... // レベル1: システム設定
.................... #include "hal/cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
000E6:  CLRF   FF7
000E8:  ADDLW  FA
000EA:  MOVWF  FF6
000EC:  MOVLW  00
000EE:  ADDWFC FF7,F
000F0:  MOVLW  00
000F2:  MOVWF  FF8
000F4:  TBLRD*+
000F6:  MOVF   FF5,W
000F8:  RETURN 0
000FA:  DATA 00,00
000FC:  DATA 00,00
000FE:  DATA FF,0F
00100:  DATA 00,00
00102:  DATA 00,10
00104:  DATA 00,00
00106:  DATA 00,00
00108:  DATA 01,00
0010A:  DATA FF,0F
0010C:  DATA 14,00
0010E:  DATA 00,00
00110:  DATA 14,00
00112:  DATA 00,10
00114:  DATA 14,00
00116:  DATA FF,0F
00118:  DATA 28,00
0011A:  DATA 00,00
0011C:  DATA 14,00
0011E:  DATA 00,10
00120:  DATA 28,00
00122:  DATA FF,0F
00124:  DATA 32,00
00126:  DATA 00,00
00128:  DATA 0A,00
0012A:  DATA 00,10
0012C:  DATA 32,00
0012E:  DATA FF,0F
00130:  DATA 72,00
00132:  DATA 00,00
00134:  DATA 40,00
00136:  DATA 00,10
00138:  DATA 72,00
0013A:  DATA FF,0F
0013C:  DATA 7C,00
0013E:  DATA 00,00
00140:  DATA 0A,00
00142:  DATA 00,10
00144:  DATA 7C,00
00146:  DATA FF,0F
00148:  DATA BC,00
0014A:  DATA 00,00
0014C:  DATA 40,00
*
001F8:  DATA 54,69
001FA:  DATA 6D,65
001FC:  DATA 72,20
001FE:  DATA 49,6E
00200:  DATA 69,74
00202:  DATA 69,61
00204:  DATA 6C,69
00206:  DATA 7A,65
00208:  DATA 0D,0A
0020A:  DATA 00,00
0020C:  DATA 09,43
0020E:  DATA 6F,6D
00210:  DATA 70,6C
00212:  DATA 65,74
00214:  DATA 65,0D
00216:  DATA 0A,00
*
00288:  DATA 55,41
0028A:  DATA 52,54
0028C:  DATA 20,49
0028E:  DATA 6E,69
00290:  DATA 74,69
00292:  DATA 61,6C
00294:  DATA 69,7A
00296:  DATA 65,0D
00298:  DATA 0A,00
0029A:  DATA 09,43
0029C:  DATA 6F,6D
0029E:  DATA 70,6C
002A0:  DATA 65,74
002A2:  DATA 65,0D
002A4:  DATA 0A,00
002A6:  DATA 41,44
002A8:  DATA 37,34
002AA:  DATA 39,30
002AC:  DATA 20,49
002AE:  DATA 6E,69
002B0:  DATA 74,69
002B2:  DATA 61,6C
002B4:  DATA 69,7A
002B6:  DATA 65,0D
002B8:  DATA 0A,00
002BA:  DATA 09,43
002BC:  DATA 6F,6E
002BE:  DATA 6E,65
002C0:  DATA 63,74
002C2:  DATA 20,65
002C4:  DATA 72,72
002C6:  DATA 6F,72
002C8:  DATA 21,0D
002CA:  DATA 0A,00
002CC:  DATA 09,43
002CE:  DATA 6F,6E
002D0:  DATA 6E,65
002D2:  DATA 63,74
002D4:  DATA 20,73
002D6:  DATA 75,63
002D8:  DATA 63,65
002DA:  DATA 73,73
002DC:  DATA 66,75
002DE:  DATA 6C,0D
002E0:  DATA 0A,00
002E2:  DATA 09,43
002E4:  DATA 6F,6D
002E6:  DATA 70,6C
002E8:  DATA 65,74
002EA:  DATA 65,0D
002EC:  DATA 0A,00
002EE:  DATA 4D,43
002F0:  DATA 50,34
002F2:  DATA 39,30
002F4:  DATA 31,20
002F6:  DATA 49,6E
002F8:  DATA 69,74
002FA:  DATA 69,61
002FC:  DATA 6C,69
002FE:  DATA 7A,65
00300:  DATA 0D,0A
00302:  DATA 00,00
00304:  DATA 09,5B
00306:  DATA 44,41
00308:  DATA 43,20
0030A:  DATA 50,6F
0030C:  DATA 72,74
0030E:  DATA 20,31
00310:  DATA 5D,20
00312:  DATA 43,6F
00314:  DATA 6E,6E
00316:  DATA 65,63
00318:  DATA 74,20
0031A:  DATA 65,72
0031C:  DATA 72,6F
0031E:  DATA 72,21
00320:  DATA 0D,0A
00322:  DATA 00,00
00324:  DATA 09,5B
00326:  DATA 44,41
00328:  DATA 43,20
0032A:  DATA 50,6F
0032C:  DATA 72,74
0032E:  DATA 20,31
00330:  DATA 5D,20
00332:  DATA 43,6F
00334:  DATA 6E,6E
00336:  DATA 65,63
00338:  DATA 74,20
0033A:  DATA 73,75
0033C:  DATA 63,63
0033E:  DATA 65,73
00340:  DATA 73,66
00342:  DATA 75,6C
00344:  DATA 0D,0A
00346:  DATA 00,00
00348:  DATA 09,5B
0034A:  DATA 44,41
0034C:  DATA 43,20
0034E:  DATA 50,6F
00350:  DATA 72,74
00352:  DATA 20,32
00354:  DATA 5D,20
00356:  DATA 43,6F
00358:  DATA 6E,6E
0035A:  DATA 65,63
0035C:  DATA 74,20
0035E:  DATA 65,72
00360:  DATA 72,6F
00362:  DATA 72,21
00364:  DATA 0D,0A
00366:  DATA 00,00
00368:  DATA 09,5B
0036A:  DATA 44,41
0036C:  DATA 43,20
0036E:  DATA 50,6F
00370:  DATA 72,74
00372:  DATA 20,32
00374:  DATA 5D,20
00376:  DATA 43,6F
00378:  DATA 6E,6E
0037A:  DATA 65,63
0037C:  DATA 74,20
0037E:  DATA 73,75
00380:  DATA 63,63
00382:  DATA 65,73
00384:  DATA 73,66
00386:  DATA 75,6C
00388:  DATA 0D,0A
0038A:  DATA 00,00
0038C:  DATA 09,43
0038E:  DATA 6F,6D
00390:  DATA 70,6C
00392:  DATA 65,74
00394:  DATA 65,0D
00396:  DATA 0A,00
00398:  DATA 45,6E
0039A:  DATA 71,75
0039C:  DATA 65,75
0039E:  DATA 65,20
003A0:  DATA 46,6C
003A2:  DATA 61,73
003A4:  DATA 68,20
003A6:  DATA 4F,70
003A8:  DATA 65,72
003AA:  DATA 61,74
003AC:  DATA 69,6F
003AE:  DATA 6E,0D
003B0:  DATA 0A,00
003B2:  DATA 46,6C
003B4:  DATA 61,73
003B6:  DATA 68,20
003B8:  DATA 71,75
003BA:  DATA 65,75
003BC:  DATA 65,20
003BE:  DATA 69,73
003C0:  DATA 20,66
003C2:  DATA 75,6C
003C4:  DATA 6C,21
003C6:  DATA 21,21
003C8:  DATA 0D,0A
003CA:  DATA 00,00
003CC:  DATA 46,6C
003CE:  DATA 61,73
003D0:  DATA 68,20
003D2:  DATA 71,75
003D4:  DATA 65,75
003D6:  DATA 65,20
003D8:  DATA 69,73
003DA:  DATA 20,65
003DC:  DATA 6D,70
003DE:  DATA 74,79
003E0:  DATA 0D,0A
003E2:  DATA 00,00
003E4:  DATA 0D,0A
003E6:  DATA 53,74
003E8:  DATA 61,72
003EA:  DATA 74,20
003EC:  DATA 6D,61
003EE:  DATA 6B,65
003F0:  DATA 5F,72
003F2:  DATA 65,63
003F4:  DATA 65,69
003F6:  DATA 76,65
003F8:  DATA 5F,63
003FA:  DATA 6F,6D
003FC:  DATA 6D,61
003FE:  DATA 6E,64
00400:  DATA 0D,0A
00402:  DATA 00,00
00404:  DATA 09,5B
00406:  DATA 42,4F
00408:  DATA 53,53
0040A:  DATA 5D,20
0040C:  DATA 3E,3E
0040E:  DATA 3E,20
00410:  DATA 00,00
00412:  DATA 45,6E
00414:  DATA 64,20
00416:  DATA 6D,61
00418:  DATA 6B,65
0041A:  DATA 5F,72
0041C:  DATA 65,63
0041E:  DATA 69,76
00420:  DATA 65,5F
00422:  DATA 63,6F
00424:  DATA 6D,6D
00426:  DATA 61,6E
00428:  DATA 64,0D
0042A:  DATA 0A,0D
0042C:  DATA 0A,00
0042E:  DATA 73,69
00430:  DATA 67,6E
00432:  DATA 61,6C
00434:  DATA 20,65
00436:  DATA 6E,64
00438:  DATA 20,77
0043A:  DATA 69,74
0043C:  DATA 68,20
0043E:  DATA 53,46
00440:  DATA 44,0D
00442:  DATA 0A,00
00444:  DATA 64,6F
00446:  DATA 6E,27
00448:  DATA 74,20
0044A:  DATA 66,69
0044C:  DATA 6E,64
0044E:  DATA 20,53
00450:  DATA 46,44
00452:  DATA 0D,0A
00454:  DATA 00,00
00456:  DATA 09,2D
00458:  DATA 3E,20
0045A:  DATA 49,6E
0045C:  DATA 76,61
0045E:  DATA 6C,69
00460:  DATA 64,20
00462:  DATA 46,72
00464:  DATA 61,6D
00466:  DATA 65,20
00468:  DATA 49,44
0046A:  DATA 20,72
0046C:  DATA 65,63
0046E:  DATA 65,69
00470:  DATA 76,65
00472:  DATA 64,3A
00474:  DATA 20,25
00476:  DATA 58,0D
00478:  DATA 0A,00
0047A:  DATA 09,2D
0047C:  DATA 3E,20
0047E:  DATA 43,52
00480:  DATA 43,20
00482:  DATA 65,72
00484:  DATA 72,6F
00486:  DATA 72,21
00488:  DATA 0D,0A
0048A:  DATA 00,00
0048C:  DATA 09,09
0048E:  DATA 2D,3E
00490:  DATA 20,72
00492:  DATA 65,63
00494:  DATA 65,69
00496:  DATA 76,65
00498:  DATA 64,20
0049A:  DATA 43,52
0049C:  DATA 43,3A
0049E:  DATA 20,25
004A0:  DATA 58,0D
004A2:  DATA 0A,00
004A4:  DATA 09,09
004A6:  DATA 20,20
004A8:  DATA 20,63
004AA:  DATA 6F,6C
004AC:  DATA 6C,65
004AE:  DATA 63,74
004B0:  DATA 20,43
004B2:  DATA 52,43
004B4:  DATA 20,3A
004B6:  DATA 20,25
004B8:  DATA 58,0D
004BA:  DATA 0A,00
004BC:  DATA 09,2D
004BE:  DATA 3E,20
004C0:  DATA 49,6E
004C2:  DATA 76,61
004C4:  DATA 6C,69
004C6:  DATA 64,20
004C8:  DATA 64,65
004CA:  DATA 76,69
004CC:  DATA 63,65
004CE:  DATA 20,49
004D0:  DATA 44,20
004D2:  DATA 72,65
004D4:  DATA 63,65
004D6:  DATA 69,76
004D8:  DATA 65,64
004DA:  DATA 0D,0A
004DC:  DATA 00,00
004DE:  DATA 09,09
004E0:  DATA 2D,3E
004E2:  DATA 20,72
004E4:  DATA 65,63
004E6:  DATA 65,69
004E8:  DATA 76,65
004EA:  DATA 64,3A
004EC:  DATA 20,20
004EE:  DATA 20,20
004F0:  DATA 20,25
004F2:  DATA 58,0D
004F4:  DATA 0A,00
004F6:  DATA 09,09
004F8:  DATA 20,20
004FA:  DATA 20,4D
004FC:  DATA 79,20
004FE:  DATA 64,65
00500:  DATA 76,69
00502:  DATA 63,65
00504:  DATA 20,49
00506:  DATA 44,3A
00508:  DATA 20,25
0050A:  DATA 58,0D
0050C:  DATA 0A,00
0050E:  DATA 09,5B
00510:  DATA 42,4F
00512:  DATA 53,53
00514:  DATA 5D,20
00516:  DATA 3C,3C
00518:  DATA 3C,20
0051A:  DATA 00,00
0051C:  DATA 53,74
0051E:  DATA 61,72
00520:  DATA 74,20
00522:  DATA 53,4D
00524:  DATA 46,20
00526:  DATA 75,73
00528:  DATA 69,6E
0052A:  DATA 67,20
0052C:  DATA 72,65
0052E:  DATA 71,65
00530:  DATA 73,74
00532:  DATA 20,73
00534:  DATA 65,61
00536:  DATA 71,75
00538:  DATA 65,6E
0053A:  DATA 63,65
0053C:  DATA 0D,0A
0053E:  DATA 00,00
00540:  DATA 45,72
00542:  DATA 72,6F
00544:  DATA 72,21
00546:  DATA 20,52
00548:  DATA 65,63
0054A:  DATA 65,69
0054C:  DATA 76,69
0054E:  DATA 6E,67
00550:  DATA 20,63
00552:  DATA 6F,6D
00554:  DATA 6D,61
00556:  DATA 6E,64
00558:  DATA 20,69
0055A:  DATA 6E,63
0055C:  DATA 6F,6E
0055E:  DATA 73,69
00560:  DATA 73,74
00562:  DATA 65,6E
00564:  DATA 74,20
00566:  DATA 77,69
00568:  DATA 74,68
0056A:  DATA 20,74
0056C:  DATA 68,65
0056E:  DATA 20,64
00570:  DATA 65,73
00572:  DATA 69,67
00574:  DATA 6E,0D
00576:  DATA 0A,00
00578:  DATA 53,4D
0057A:  DATA 46,20
0057C:  DATA 75,73
0057E:  DATA 65,20
00580:  DATA 72,65
00582:  DATA 71,75
00584:  DATA 65,73
00586:  DATA 74,20
00588:  DATA 61,6C
0058A:  DATA 6C,6F
0058C:  DATA 77,65
0058E:  DATA 64,0D
00590:  DATA 0A,00
00592:  DATA 53,4D
00594:  DATA 46,20
00596:  DATA 75,73
00598:  DATA 65,20
0059A:  DATA 72,65
0059C:  DATA 71,75
0059E:  DATA 65,73
005A0:  DATA 74,20
005A2:  DATA 64,65
005A4:  DATA 6E,79
005A6:  DATA 65,64
005A8:  DATA 0D,0A
005AA:  DATA 00,00
005AC:  DATA 52,65
005AE:  DATA 74,72
005B0:  DATA 79,20
005B2:  DATA 72,65
005B4:  DATA 71,75
005B6:  DATA 65,73
005B8:  DATA 74,20
005BA:  DATA 74,6F
005BC:  DATA 20,42
005BE:  DATA 4F,53
005C0:  DATA 53,20
005C2:  DATA 50,49
005C4:  DATA 43,0D
005C6:  DATA 0A,00
005C8:  DATA 45,72
005CA:  DATA 72,6F
005CC:  DATA 72,21
005CE:  DATA 20,52
005D0:  DATA 65,63
005D2:  DATA 65,69
005D4:  DATA 76,69
005D6:  DATA 6E,67
005D8:  DATA 20,63
005DA:  DATA 6F,6D
005DC:  DATA 6D,61
005DE:  DATA 6E,64
005E0:  DATA 20,69
005E2:  DATA 6E,63
005E4:  DATA 6F,6E
005E6:  DATA 73,69
005E8:  DATA 73,74
005EA:  DATA 65,6E
005EC:  DATA 74,20
005EE:  DATA 77,69
005F0:  DATA 74,68
005F2:  DATA 20,74
005F4:  DATA 68,65
005F6:  DATA 20,64
005F8:  DATA 65,73
005FA:  DATA 69,67
005FC:  DATA 6E,0D
005FE:  DATA 0A,00
00600:  DATA 45,6E
00602:  DATA 64,20
00604:  DATA 53,4D
00606:  DATA 46,20
00608:  DATA 75,73
0060A:  DATA 69,6E
0060C:  DATA 67,20
0060E:  DATA 72,65
00610:  DATA 71,65
00612:  DATA 73,74
00614:  DATA 20,73
00616:  DATA 65,61
00618:  DATA 71,75
0061A:  DATA 65,6E
0061C:  DATA 63,65
0061E:  DATA 0D,0A
00620:  DATA 00,00
00622:  DATA 74,65
00624:  DATA 6D,70
00626:  DATA 5F,74
00628:  DATA 6F,70
0062A:  DATA 3A,25
0062C:  DATA 30,34
0062E:  DATA 4C,58
00630:  DATA 0D,0A
00632:  DATA 00,00
00634:  DATA 74,65
00636:  DATA 6D,70
00638:  DATA 5F,62
0063A:  DATA 6F,74
0063C:  DATA 3A,25
0063E:  DATA 30,34
00640:  DATA 4C,58
00642:  DATA 0D,0A
00644:  DATA 00,00
00646:  DATA 74,65
00648:  DATA 6D,70
0064A:  DATA 5F,6D
0064C:  DATA 69,73
0064E:  DATA 37,3A
00650:  DATA 25,30
00652:  DATA 34,4C
00654:  DATA 58,0D
00656:  DATA 0A,00
00658:  DATA 70,64
0065A:  DATA 3A,25
0065C:  DATA 30,34
0065E:  DATA 4C,58
00660:  DATA 0D,0A
00662:  DATA 00,00
00664:  DATA 56,6F
00666:  DATA 6C,74
00668:  DATA 31,2C
0066A:  DATA 43,75
0066C:  DATA 72,72
0066E:  DATA 31,2C
00670:  DATA 56,6F
00672:  DATA 6C,74
00674:  DATA 32,2C
00676:  DATA 43,75
00678:  DATA 72,72
0067A:  DATA 32,0D
0067C:  DATA 0A,00
0067E:  DATA 5B,50
00680:  DATA 49,43
00682:  DATA 4C,4F
00684:  DATA 47,5D
00686:  DATA 20,3A
00688:  DATA 20,00
0068A:  DATA 53,4D
0068C:  DATA 46,20
0068E:  DATA 44,61
00690:  DATA 74,61
00692:  DATA 20,54
00694:  DATA 61,62
00696:  DATA 6C,65
00698:  DATA 20,49
0069A:  DATA 6E,69
0069C:  DATA 74,69
0069E:  DATA 61,6C
006A0:  DATA 69,7A
006A2:  DATA 65,0D
006A4:  DATA 0A,00
006A6:  DATA 43,52
006A8:  DATA 43,20
006AA:  DATA 45,52
006AC:  DATA 52,4F
006AE:  DATA 52,20
006B0:  DATA 25,64
006B2:  DATA 0D,0A
006B4:  DATA 00,00
006B6:  DATA 43,52
006B8:  DATA 43,20
006BA:  DATA 76,65
006BC:  DATA 72,69
006BE:  DATA 66,69
006C0:  DATA 63,61
006C2:  DATA 74,69
006C4:  DATA 6F,6E
006C6:  DATA 20,66
006C8:  DATA 61,69
006CA:  DATA 6C,65
006CC:  DATA 64,20
006CE:  DATA 61,66
006D0:  DATA 74,65
006D2:  DATA 72,20
006D4:  DATA 25,64
006D6:  DATA 20,61
006D8:  DATA 74,74
006DA:  DATA 65,6D
006DC:  DATA 70,74
006DE:  DATA 73,0D
006E0:  DATA 0A,00
006E2:  DATA 45,72
006E4:  DATA 72,6F
006E6:  DATA 72,3A
006E8:  DATA 20,43
006EA:  DATA 52,43
006EC:  DATA 20,76
006EE:  DATA 65,72
006F0:  DATA 69,66
006F2:  DATA 69,63
006F4:  DATA 61,74
006F6:  DATA 69,6F
006F8:  DATA 6E,20
006FA:  DATA 66,61
006FC:  DATA 69,6C
006FE:  DATA 65,64
00700:  DATA 20,61
00702:  DATA 66,74
00704:  DATA 65,72
00706:  DATA 20,25
00708:  DATA 64,20
0070A:  DATA 61,74
0070C:  DATA 74,65
0070E:  DATA 6D,70
00710:  DATA 74,73
00712:  DATA 0D,0A
00714:  DATA 00,00
00716:  DATA 0D,0A
00718:  DATA 5B,53
0071A:  DATA 4D,46
0071C:  DATA 20,43
0071E:  DATA 6F,75
00720:  DATA 6E,74
00722:  DATA 65,72
00724:  DATA 20,53
00726:  DATA 74,61
00728:  DATA 74,75
0072A:  DATA 73,5D
0072C:  DATA 0D,0A
0072E:  DATA 00,00
00730:  DATA 09,50
00732:  DATA 41,52
00734:  DATA 54,49
00736:  DATA 54,49
00738:  DATA 4F,4E
0073A:  DATA 09,55
0073C:  DATA 53,45
0073E:  DATA 44,09
00740:  DATA 09,52
00742:  DATA 45,53
00744:  DATA 45,52
00746:  DATA 56,45
00748:  DATA 0D,0A
0074A:  DATA 00,00
0074C:  DATA 09,2D
0074E:  DATA 2D,2D
00750:  DATA 2D,2D
00752:  DATA 2D,2D
00754:  DATA 2D,2D
00756:  DATA 09,2D
00758:  DATA 2D,2D
0075A:  DATA 2D,2D
0075C:  DATA 2D,2D
0075E:  DATA 2D,2D
00760:  DATA 2D,09
00762:  DATA 2D,2D
00764:  DATA 2D,2D
00766:  DATA 2D,2D
00768:  DATA 2D,2D
0076A:  DATA 2D,2D
0076C:  DATA 0D,0A
0076E:  DATA 00,00
00770:  DATA 09,50
00772:  DATA 49,43
00774:  DATA 4C,4F
00776:  DATA 47,09
00778:  DATA 09,30
0077A:  DATA 78,25
0077C:  DATA 30,38
0077E:  DATA 4C,58
00780:  DATA 09,30
00782:  DATA 78,25
00784:  DATA 30,38
00786:  DATA 4C,58
00788:  DATA 0D,0A
0078A:  DATA 00,00
0078C:  DATA 09,45
0078E:  DATA 4E,56
00790:  DATA 49,52
00792:  DATA 4F,09
00794:  DATA 09,30
00796:  DATA 78,25
00798:  DATA 30,38
0079A:  DATA 4C,58
0079C:  DATA 09,30
0079E:  DATA 78,25
007A0:  DATA 30,38
007A2:  DATA 4C,58
007A4:  DATA 0D,0A
007A6:  DATA 00,00
007A8:  DATA 09,49
007AA:  DATA 56,31
007AC:  DATA 5F,48
007AE:  DATA 45,41
007B0:  DATA 44,45
007B2:  DATA 52,09
007B4:  DATA 30,78
007B6:  DATA 25,30
007B8:  DATA 38,4C
007BA:  DATA 58,09
007BC:  DATA 30,78
007BE:  DATA 25,30
007C0:  DATA 38,4C
007C2:  DATA 58,0D
007C4:  DATA 0A,00
007C6:  DATA 09,49
007C8:  DATA 56,31
007CA:  DATA 5F,44
007CC:  DATA 41,54
007CE:  DATA 41,09
007D0:  DATA 30,78
007D2:  DATA 25,30
007D4:  DATA 38,4C
007D6:  DATA 58,09
007D8:  DATA 30,78
007DA:  DATA 25,30
007DC:  DATA 38,4C
007DE:  DATA 58,0D
007E0:  DATA 0A,00
007E2:  DATA 09,49
007E4:  DATA 56,32
007E6:  DATA 5F,48
007E8:  DATA 45,41
007EA:  DATA 44,45
007EC:  DATA 52,09
007EE:  DATA 30,78
007F0:  DATA 25,30
007F2:  DATA 38,4C
007F4:  DATA 58,09
007F6:  DATA 30,78
007F8:  DATA 25,30
007FA:  DATA 38,4C
007FC:  DATA 58,0D
007FE:  DATA 0A,00
00800:  DATA 09,49
00802:  DATA 56,32
00804:  DATA 5F,44
00806:  DATA 41,54
00808:  DATA 41,09
0080A:  DATA 30,78
0080C:  DATA 25,30
0080E:  DATA 38,4C
00810:  DATA 58,09
00812:  DATA 30,78
00814:  DATA 25,30
00816:  DATA 38,4C
00818:  DATA 58,0D
0081A:  DATA 0A,00
0081C:  DATA 09,3D
0081E:  DATA 3D,3D
00820:  DATA 3D,3D
00822:  DATA 3D,3D
00824:  DATA 3D,3D
00826:  DATA 3D,3D
00828:  DATA 3D,3D
0082A:  DATA 3D,3D
0082C:  DATA 3D,3D
0082E:  DATA 3D,3D
00830:  DATA 3D,3D
00832:  DATA 3D,3D
00834:  DATA 3D,3D
00836:  DATA 3D,3D
00838:  DATA 3D,3D
0083A:  DATA 3D,3D
0083C:  DATA 3D,3D
0083E:  DATA 3D,3D
00840:  DATA 3D,3D
00842:  DATA 3D,3D
00844:  DATA 3D,3D
00846:  DATA 3D,0D
00848:  DATA 0A,0D
0084A:  DATA 0A,00
0084C:  DATA 0D,0A
0084E:  DATA 5F,5F
00850:  DATA 5F,5F
00852:  DATA 5F,5F
00854:  DATA 5F,5F
00856:  DATA 5F,5F
00858:  DATA 5F,5F
0085A:  DATA 5F,5F
0085C:  DATA 5F,5F
0085E:  DATA 5F,5F
00860:  DATA 5F,5F
00862:  DATA 5F,5F
00864:  DATA 5F,5F
00866:  DATA 5F,5F
00868:  DATA 5F,5F
0086A:  DATA 5F,5F
0086C:  DATA 5F,0D
0086E:  DATA 0A,00
00870:  DATA 5F,5F
00872:  DATA 5F,5F
00874:  DATA 5F,5F
00876:  DATA 5F,5F
00878:  DATA 5F,53
0087A:  DATA 74,61
0087C:  DATA 72,74
0087E:  DATA 20,63
00880:  DATA 6F,70
00882:  DATA 79,5F
00884:  DATA 64,61
00886:  DATA 74,61
00888:  DATA 5F,5F
0088A:  DATA 5F,5F
0088C:  DATA 5F,5F
0088E:  DATA 5F,5F
00890:  DATA 5F,0D
00892:  DATA 0A,00
00894:  DATA 45,72
00896:  DATA 72,6F
00898:  DATA 72,3A
0089A:  DATA 20,4D
0089C:  DATA 49,53
0089E:  DATA 20,46
008A0:  DATA 4D,20
008A2:  DATA 69,73
008A4:  DATA 20,6E
008A6:  DATA 6F,74
008A8:  DATA 20,63
008AA:  DATA 6F,6E
008AC:  DATA 6E,65
008AE:  DATA 63,74
008B0:  DATA 65,64
008B2:  DATA 0D,0A
008B4:  DATA 00,00
008B6:  DATA 45,72
008B8:  DATA 72,6F
008BA:  DATA 72,3A
008BC:  DATA 20,53
008BE:  DATA 4D,46
008C0:  DATA 20,69
008C2:  DATA 73,20
008C4:  DATA 6E,6F
008C6:  DATA 74,20
008C8:  DATA 63,6F
008CA:  DATA 6E,6E
008CC:  DATA 65,63
008CE:  DATA 74,65
008D0:  DATA 64,0D
008D2:  DATA 0A,00
008D4:  DATA 46,4C
008D6:  DATA 41,53
008D8:  DATA 48,20
008DA:  DATA 49,44
008DC:  DATA 3A,20
008DE:  DATA 43,49
008E0:  DATA 47,53
008E2:  DATA 5F,44
008E4:  DATA 41,54
008E6:  DATA 41,5F
008E8:  DATA 54,41
008EA:  DATA 42,4C
008EC:  DATA 45,0D
008EE:  DATA 0A,00
008F0:  DATA 46,4C
008F2:  DATA 41,53
008F4:  DATA 48,20
008F6:  DATA 49,44
008F8:  DATA 3A,20
008FA:  DATA 43,49
008FC:  DATA 47,53
008FE:  DATA 5F,50
00900:  DATA 49,43
00902:  DATA 4C,4F
00904:  DATA 47,5F
00906:  DATA 44,41
00908:  DATA 54,41
0090A:  DATA 0D,0A
0090C:  DATA 00,00
0090E:  DATA 46,4C
00910:  DATA 41,53
00912:  DATA 48,20
00914:  DATA 49,44
00916:  DATA 3A,20
00918:  DATA 43,49
0091A:  DATA 47,53
0091C:  DATA 5F,45
0091E:  DATA 4E,56
00920:  DATA 49,52
00922:  DATA 4F,5F
00924:  DATA 44,41
00926:  DATA 54,41
00928:  DATA 0D,0A
0092A:  DATA 00,00
0092C:  DATA 46,4C
0092E:  DATA 41,53
00930:  DATA 48,20
00932:  DATA 49,44
00934:  DATA 3A,20
00936:  DATA 43,49
00938:  DATA 47,53
0093A:  DATA 5F,49
0093C:  DATA 56,31
0093E:  DATA 5F,48
00940:  DATA 45,41
00942:  DATA 44,45
00944:  DATA 52,0D
00946:  DATA 0A,00
00948:  DATA 46,4C
0094A:  DATA 41,53
0094C:  DATA 48,20
0094E:  DATA 49,44
00950:  DATA 3A,20
00952:  DATA 43,49
00954:  DATA 47,53
00956:  DATA 5F,49
00958:  DATA 56,31
0095A:  DATA 5F,44
0095C:  DATA 41,54
0095E:  DATA 41,0D
00960:  DATA 0A,00
00962:  DATA 46,4C
00964:  DATA 41,53
00966:  DATA 48,20
00968:  DATA 49,44
0096A:  DATA 3A,20
0096C:  DATA 43,49
0096E:  DATA 47,53
00970:  DATA 5F,49
00972:  DATA 56,32
00974:  DATA 5F,48
00976:  DATA 45,41
00978:  DATA 44,45
0097A:  DATA 52,0D
0097C:  DATA 0A,00
0097E:  DATA 46,4C
00980:  DATA 41,53
00982:  DATA 48,20
00984:  DATA 49,44
00986:  DATA 3A,20
00988:  DATA 43,49
0098A:  DATA 47,53
0098C:  DATA 5F,49
0098E:  DATA 56,32
00990:  DATA 5F,44
00992:  DATA 41,54
00994:  DATA 41,0D
00996:  DATA 0A,00
00998:  DATA 45,72
0099A:  DATA 72,6F
0099C:  DATA 72,3A
0099E:  DATA 20,49
009A0:  DATA 6E,76
009A2:  DATA 61,6C
009A4:  DATA 69,64
009A6:  DATA 20,6D
009A8:  DATA 69,73
009AA:  DATA 73,69
009AC:  DATA 6F,6E
009AE:  DATA 20,49
009B0:  DATA 44,20
009B2:  DATA 25,64
009B4:  DATA 0D,0A
009B6:  DATA 00,00
009B8:  DATA 5B,4D
009BA:  DATA 49,53
009BC:  DATA 46,20
009BE:  DATA 41,44
009C0:  DATA 44,52
009C2:  DATA 45,53
009C4:  DATA 53,5D
009C6:  DATA 0D,0A
009C8:  DATA 00,00
009CA:  DATA 09,50
009CC:  DATA 61,72
009CE:  DATA 61,6D
009D0:  DATA 09,44
009D2:  DATA 61,74
009D4:  DATA 61,0D
009D6:  DATA 0A,00
009D8:  DATA 09,2D
009DA:  DATA 2D,2D
009DC:  DATA 2D,2D
009DE:  DATA 09,2D
009E0:  DATA 2D,2D
009E2:  DATA 2D,2D
009E4:  DATA 2D,2D
009E6:  DATA 2D,2D
009E8:  DATA 2D,0D
009EA:  DATA 0A,00
009EC:  DATA 09,53
009EE:  DATA 54,41
009F0:  DATA 52,54
009F2:  DATA 09,30
009F4:  DATA 78,25
009F6:  DATA 30,38
009F8:  DATA 4C,58
009FA:  DATA 0D,0A
009FC:  DATA 00,00
009FE:  DATA 09,45
00A00:  DATA 4E,44
00A02:  DATA 09,30
00A04:  DATA 78,25
00A06:  DATA 30,38
00A08:  DATA 4C,58
00A0A:  DATA 0D,0A
00A0C:  DATA 00,00
00A0E:  DATA 09,53
00A10:  DATA 52,43
00A12:  DATA 09,30
00A14:  DATA 78,25
00A16:  DATA 30,38
00A18:  DATA 4C,58
00A1A:  DATA 0D,0A
00A1C:  DATA 00,00
00A1E:  DATA 09,53
00A20:  DATA 49,5A
00A22:  DATA 45,09
00A24:  DATA 30,78
00A26:  DATA 25,30
00A28:  DATA 38,4C
00A2A:  DATA 58,0D
00A2C:  DATA 0A,00
00A2E:  DATA 09,2D
00A30:  DATA 2D,2D
00A32:  DATA 2D,2D
00A34:  DATA 09,2D
00A36:  DATA 2D,2D
00A38:  DATA 2D,2D
00A3A:  DATA 2D,2D
00A3C:  DATA 2D,2D
00A3E:  DATA 2D,0D
00A40:  DATA 0A,00
00A42:  DATA 5B,53
00A44:  DATA 4D,46
00A46:  DATA 20,41
00A48:  DATA 44,44
00A4A:  DATA 52,45
00A4C:  DATA 53,53
00A4E:  DATA 5D,0D
00A50:  DATA 0A,00
00A52:  DATA 09,50
00A54:  DATA 61,72
00A56:  DATA 61,6D
00A58:  DATA 09,44
00A5A:  DATA 61,74
00A5C:  DATA 61,0D
00A5E:  DATA 0A,00
00A60:  DATA 09,2D
00A62:  DATA 2D,2D
00A64:  DATA 2D,2D
00A66:  DATA 09,2D
00A68:  DATA 2D,2D
00A6A:  DATA 2D,2D
00A6C:  DATA 2D,2D
00A6E:  DATA 2D,2D
00A70:  DATA 2D,0D
00A72:  DATA 0A,00
00A74:  DATA 09,53
00A76:  DATA 54,41
00A78:  DATA 52,54
00A7A:  DATA 09,30
00A7C:  DATA 78,25
00A7E:  DATA 30,38
00A80:  DATA 4C,58
00A82:  DATA 0D,0A
00A84:  DATA 00,00
00A86:  DATA 09,45
00A88:  DATA 4E,44
00A8A:  DATA 09,30
00A8C:  DATA 78,25
00A8E:  DATA 30,38
00A90:  DATA 4C,58
00A92:  DATA 0D,0A
00A94:  DATA 00,00
00A96:  DATA 09,2D
00A98:  DATA 2D,2D
00A9A:  DATA 2D,2D
00A9C:  DATA 09,2D
00A9E:  DATA 2D,2D
00AA0:  DATA 2D,2D
00AA2:  DATA 2D,2D
00AA4:  DATA 2D,2D
00AA6:  DATA 2D,0D
00AA8:  DATA 0A,00
00AAA:  DATA 45,52
00AAC:  DATA 41,53
00AAE:  DATA 45,20
00AB0:  DATA 53,4D
00AB2:  DATA 46,20
00AB4:  DATA 41,52
00AB6:  DATA 45,41
00AB8:  DATA 0D,0A
00ABA:  DATA 00,00
00ABC:  DATA 09,45
00ABE:  DATA 52,41
00AC0:  DATA 53,45
00AC2:  DATA 20,53
00AC4:  DATA 4D,46
00AC6:  DATA 20,41
00AC8:  DATA 52,45
00ACA:  DATA 41,20
00ACC:  DATA 44,4F
00ACE:  DATA 4E,45
00AD0:  DATA 0D,0A
00AD2:  DATA 00,00
00AD4:  DATA 57,52
00AD6:  DATA 49,54
00AD8:  DATA 45,20
00ADA:  DATA 44,41
00ADC:  DATA 54,41
00ADE:  DATA 20,54
00AE0:  DATA 4F,20
00AE2:  DATA 53,4D
00AE4:  DATA 46,0D
00AE6:  DATA 0A,00
00AE8:  DATA 55,50
00AEA:  DATA 44,41
00AEC:  DATA 54,45
00AEE:  DATA 20,53
00AF0:  DATA 4D,46
00AF2:  DATA 20,43
00AF4:  DATA 4F,55
00AF6:  DATA 4E,54
00AF8:  DATA 45,52
00AFA:  DATA 20,53
00AFC:  DATA 54,41
00AFE:  DATA 54,55
00B00:  DATA 53,0D
00B02:  DATA 0A,00
00B04:  DATA 0D,0A
00B06:  DATA 5F,5F
00B08:  DATA 5F,5F
00B0A:  DATA 5F,5F
00B0C:  DATA 5F,5F
00B0E:  DATA 5F,45
00B10:  DATA 6E,64
00B12:  DATA 20,63
00B14:  DATA 6F,70
00B16:  DATA 79,5F
00B18:  DATA 64,61
00B1A:  DATA 74,61
00B1C:  DATA 5F,5F
00B1E:  DATA 5F,5F
00B20:  DATA 5F,5F
00B22:  DATA 5F,5F
00B24:  DATA 5F,5F
00B26:  DATA 0D,0A
00B28:  DATA 00,00
00B2A:  DATA 5F,5F
00B2C:  DATA 5F,5F
00B2E:  DATA 5F,5F
00B30:  DATA 5F,5F
00B32:  DATA 5F,5F
00B34:  DATA 5F,5F
00B36:  DATA 5F,5F
00B38:  DATA 5F,5F
00B3A:  DATA 5F,5F
00B3C:  DATA 5F,5F
00B3E:  DATA 5F,5F
00B40:  DATA 5F,5F
00B42:  DATA 5F,5F
00B44:  DATA 5F,5F
00B46:  DATA 5F,5F
00B48:  DATA 5F,0D
00B4A:  DATA 0A,0D
00B4C:  DATA 0A,00
00B4E:  DATA 0D,0A
00B50:  DATA 5F,5F
00B52:  DATA 5F,5F
00B54:  DATA 5F,5F
00B56:  DATA 5F,5F
00B58:  DATA 5F,5F
00B5A:  DATA 5F,5F
00B5C:  DATA 5F,5F
00B5E:  DATA 5F,5F
00B60:  DATA 5F,5F
00B62:  DATA 5F,5F
00B64:  DATA 0D,0A
00B66:  DATA 00,00
00B68:  DATA 5F,5F
00B6A:  DATA 5F,53
00B6C:  DATA 74,61
00B6E:  DATA 72,74
00B70:  DATA 20,53
00B72:  DATA 4D,46
00B74:  DATA 20,52
00B76:  DATA 65,61
00B78:  DATA 64,5F
00B7A:  DATA 5F,5F
00B7C:  DATA 5F,0D
00B7E:  DATA 0A,00
00B80:  DATA 45,72
00B82:  DATA 72,6F
00B84:  DATA 72,3A
00B86:  DATA 20,52
00B88:  DATA 65,61
00B8A:  DATA 64,20
00B8C:  DATA 61,64
00B8E:  DATA 64,72
00B90:  DATA 65,73
00B92:  DATA 73,20
00B94:  DATA 30,78
00B96:  DATA 25,30
00B98:  DATA 38,4C
00B9A:  DATA 58,20
00B9C:  DATA 6F,75
00B9E:  DATA 74,20
00BA0:  DATA 6F,66
00BA2:  DATA 20,53
00BA4:  DATA 4D,46
00BA6:  DATA 20,6D
00BA8:  DATA 69,73
00BAA:  DATA 73,69
00BAC:  DATA 6F,6E
00BAE:  DATA 20,72
00BB0:  DATA 61,6E
00BB2:  DATA 67,65
00BB4:  DATA 20,5B
00BB6:  DATA 30,78
00BB8:  DATA 25,30
00BBA:  DATA 38,4C
00BBC:  DATA 58,20
00BBE:  DATA 2D,20
00BC0:  DATA 30,78
00BC2:  DATA 25,30
00BC4:  DATA 38,4C
00BC6:  DATA 58,29
00BC8:  DATA 0D,0A
00BCA:  DATA 00,00
00BCC:  DATA 57,61
00BCE:  DATA 72,6E
00BD0:  DATA 3A,20
00BD2:  DATA 41,64
00BD4:  DATA 6A,75
00BD6:  DATA 73,74
00BD8:  DATA 20,72
00BDA:  DATA 65,61
00BDC:  DATA 64,20
00BDE:  DATA 73,69
00BE0:  DATA 7A,65
00BE2:  DATA 20,66
00BE4:  DATA 72,6F
00BE6:  DATA 6D,20
00BE8:  DATA 25,6C
00BEA:  DATA 75,20
00BEC:  DATA 74,6F
00BEE:  DATA 20,25
00BF0:  DATA 6C,75
00BF2:  DATA 20,28
00BF4:  DATA 6D,69
00BF6:  DATA 73,73
00BF8:  DATA 69,6F
00BFA:  DATA 6E,20
00BFC:  DATA 65,6E
00BFE:  DATA 64,29
00C00:  DATA 0D,0A
00C02:  DATA 00,00
00C04:  DATA 49,6E
00C06:  DATA 66,6F
00C08:  DATA 3A,20
00C0A:  DATA 4E,6F
00C0C:  DATA 74,68
00C0E:  DATA 69,6E
00C10:  DATA 67,20
00C12:  DATA 74,6F
00C14:  DATA 20,72
00C16:  DATA 65,61
00C18:  DATA 64,20
00C1A:  DATA 28,73
00C1C:  DATA 69,7A
00C1E:  DATA 65,3D
00C20:  DATA 30,29
00C22:  DATA 0D,0A
00C24:  DATA 00,00
00C26:  DATA 49,6E
00C28:  DATA 20,53
00C2A:  DATA 4D,46
00C2C:  DATA 20,52
00C2E:  DATA 65,61
00C30:  DATA 64,20
00C32:  DATA 73,6F
00C34:  DATA 75,72
00C36:  DATA 63,65
00C38:  DATA 20,64
00C3A:  DATA 61,74
00C3C:  DATA 61,20
00C3E:  DATA 61,64
00C40:  DATA 64,72
00C42:  DATA 65,73
00C44:  DATA 73,3A
00C46:  DATA 20,25
00C48:  DATA 4C,58
00C4A:  DATA 0D,0A
00C4C:  DATA 00,00
00C4E:  DATA 49,6E
00C50:  DATA 20,53
00C52:  DATA 4D,46
00C54:  DATA 20,52
00C56:  DATA 65,61
00C58:  DATA 64,20
00C5A:  DATA 64,61
00C5C:  DATA 74,61
00C5E:  DATA 20,73
00C60:  DATA 69,7A
00C62:  DATA 65,20
00C64:  DATA 20,20
00C66:  DATA 20,20
00C68:  DATA 20,20
00C6A:  DATA 20,20
00C6C:  DATA 20,3A
00C6E:  DATA 20,25
00C70:  DATA 6C,75
00C72:  DATA 20,28
00C74:  DATA 30,78
00C76:  DATA 25,6C
00C78:  DATA 78,29
00C7A:  DATA 0D,0A
00C7C:  DATA 0D,0A
00C7E:  DATA 00,00
00C80:  DATA 45,72
00C82:  DATA 72,6F
00C84:  DATA 72,3A
00C86:  DATA 20,53
00C88:  DATA 4D,46
00C8A:  DATA 20,69
00C8C:  DATA 73,20
00C8E:  DATA 6E,6F
00C90:  DATA 74,20
00C92:  DATA 63,6F
00C94:  DATA 6E,6E
00C96:  DATA 65,63
00C98:  DATA 74,65
00C9A:  DATA 64,0D
00C9C:  DATA 0A,00
00C9E:  DATA 52,45
00CA0:  DATA 41,44
00CA2:  DATA 20,44
00CA4:  DATA 41,54
00CA6:  DATA 41,20
00CA8:  DATA 46,52
00CAA:  DATA 4F,4D
00CAC:  DATA 20,53
00CAE:  DATA 4D,46
00CB0:  DATA 2E,2E
00CB2:  DATA 2E,0D
00CB4:  DATA 0A,00
00CB6:  DATA 0D,0A
00CB8:  DATA 5F,5F
00CBA:  DATA 5F,45
00CBC:  DATA 6E,64
00CBE:  DATA 20,53
00CC0:  DATA 4D,46
00CC2:  DATA 20,52
00CC4:  DATA 65,61
00CC6:  DATA 64,5F
00CC8:  DATA 5F,5F
00CCA:  DATA 5F,0D
00CCC:  DATA 0A,00
00CCE:  DATA 5F,5F
00CD0:  DATA 5F,5F
00CD2:  DATA 5F,5F
00CD4:  DATA 5F,5F
00CD6:  DATA 5F,5F
00CD8:  DATA 5F,5F
00CDA:  DATA 5F,5F
00CDC:  DATA 5F,5F
00CDE:  DATA 5F,5F
00CE0:  DATA 5F,5F
00CE2:  DATA 0D,0A
00CE4:  DATA 0D,0A
00CE6:  DATA 00,00
00CE8:  DATA 0D,0A
00CEA:  DATA 5F,5F
00CEC:  DATA 5F,5F
00CEE:  DATA 5F,5F
00CF0:  DATA 5F,5F
00CF2:  DATA 5F,5F
00CF4:  DATA 5F,5F
00CF6:  DATA 5F,5F
00CF8:  DATA 5F,5F
00CFA:  DATA 5F,5F
00CFC:  DATA 5F,5F
00CFE:  DATA 0D,0A
00D00:  DATA 00,00
00D02:  DATA 5F,5F
00D04:  DATA 5F,53
00D06:  DATA 74,61
00D08:  DATA 72,74
00D0A:  DATA 20,73
00D0C:  DATA 6D,66
00D0E:  DATA 5F,65
00D10:  DATA 72,61
00D12:  DATA 73,65
00D14:  DATA 5F,5F
00D16:  DATA 5F,5F
00D18:  DATA 0D,0A
00D1A:  DATA 00,00
00D1C:  DATA 5B,53
00D1E:  DATA 4D,46
00D20:  DATA 5D,20
00D22:  DATA 45,72
00D24:  DATA 61,73
00D26:  DATA 65,20
00D28:  DATA 61,64
00D2A:  DATA 64,72
00D2C:  DATA 65,73
00D2E:  DATA 73,20
00D30:  DATA 20,20
00D32:  DATA 3A,20
00D34:  DATA 25,4C
00D36:  DATA 58,0D
00D38:  DATA 0A,00
00D3A:  DATA 5B,53
00D3C:  DATA 4D,46
00D3E:  DATA 5D,20
00D40:  DATA 45,72
00D42:  DATA 61,73
00D44:  DATA 65,20
00D46:  DATA 64,61
00D48:  DATA 74,61
00D4A:  DATA 20,73
00D4C:  DATA 69,7A
00D4E:  DATA 65,20
00D50:  DATA 3A,20
00D52:  DATA 25,6C
00D54:  DATA 75,20
00D56:  DATA 28,30
00D58:  DATA 78,25
00D5A:  DATA 6C,78
00D5C:  DATA 29,0D
00D5E:  DATA 0A,0D
00D60:  DATA 0A,00
00D62:  DATA 45,72
00D64:  DATA 72,6F
00D66:  DATA 72,3A
00D68:  DATA 20,53
00D6A:  DATA 4D,46
00D6C:  DATA 20,69
00D6E:  DATA 73,20
00D70:  DATA 6E,6F
00D72:  DATA 74,20
00D74:  DATA 63,6F
00D76:  DATA 6E,6E
00D78:  DATA 65,63
00D7A:  DATA 74,65
00D7C:  DATA 64,0D
00D7E:  DATA 0A,00
00D80:  DATA 45,72
00D82:  DATA 72,6F
00D84:  DATA 72,3A
00D86:  DATA 20,45
00D88:  DATA 72,61
00D8A:  DATA 73,65
00D8C:  DATA 20,73
00D8E:  DATA 6F,75
00D90:  DATA 72,63
00D92:  DATA 65,20
00D94:  DATA 61,64
00D96:  DATA 64,72
00D98:  DATA 65,73
00D9A:  DATA 73,20
00D9C:  DATA 30,78
00D9E:  DATA 25,4C
00DA0:  DATA 58,20
00DA2:  DATA 69,73
00DA4:  DATA 20,6F
00DA6:  DATA 75,74
00DA8:  DATA 73,69
00DAA:  DATA 64,65
00DAC:  DATA 20,6D
00DAE:  DATA 69,73
00DB0:  DATA 73,69
00DB2:  DATA 6F,6E
00DB4:  DATA 20,72
00DB6:  DATA 61,6E
00DB8:  DATA 67,65
00DBA:  DATA 20,5B
00DBC:  DATA 30,78
00DBE:  DATA 25,4C
00DC0:  DATA 58,20
00DC2:  DATA 2D,20
00DC4:  DATA 30,78
00DC6:  DATA 25,4C
00DC8:  DATA 58,5D
00DCA:  DATA 0D,0A
00DCC:  DATA 00,00
00DCE:  DATA 45,72
00DD0:  DATA 72,6F
00DD2:  DATA 72,3A
00DD4:  DATA 20,45
00DD6:  DATA 72,61
00DD8:  DATA 73,65
00DDA:  DATA 20,6F
00DDC:  DATA 70,65
00DDE:  DATA 72,61
00DE0:  DATA 74,69
00DE2:  DATA 6F,6E
00DE4:  DATA 20,77
00DE6:  DATA 6F,75
00DE8:  DATA 6C,64
00DEA:  DATA 20,65
00DEC:  DATA 78,63
00DEE:  DATA 65,65
00DF0:  DATA 64,20
00DF2:  DATA 6D,69
00DF4:  DATA 73,73
00DF6:  DATA 69,6F
00DF8:  DATA 6E,20
00DFA:  DATA 65,6E
00DFC:  DATA 64,20
00DFE:  DATA 61,64
00E00:  DATA 64,72
00E02:  DATA 65,73
00E04:  DATA 73,20
00E06:  DATA 30,78
00E08:  DATA 25,4C
00E0A:  DATA 58,0D
00E0C:  DATA 0A,00
00E0E:  DATA 4C,69
00E10:  DATA 6D,69
00E12:  DATA 74,69
00E14:  DATA 6E,67
00E16:  DATA 20,65
00E18:  DATA 72,61
00E1A:  DATA 73,65
00E1C:  DATA 20,73
00E1E:  DATA 69,7A
00E20:  DATA 65,20
00E22:  DATA 74,6F
00E24:  DATA 20,73
00E26:  DATA 74,61
00E28:  DATA 79,20
00E2A:  DATA 77,69
00E2C:  DATA 74,68
00E2E:  DATA 69,6E
00E30:  DATA 20,6D
00E32:  DATA 69,73
00E34:  DATA 73,69
00E36:  DATA 6F,6E
00E38:  DATA 20,62
00E3A:  DATA 6F,75
00E3C:  DATA 6E,64
00E3E:  DATA 73,0D
00E40:  DATA 0A,00
00E42:  DATA 45,72
00E44:  DATA 61,73
00E46:  DATA 65,20
00E48:  DATA 6F,70
00E4A:  DATA 65,72
00E4C:  DATA 61,74
00E4E:  DATA 69,6F
00E50:  DATA 6E,20
00E52:  DATA 76,61
00E54:  DATA 6C,69
00E56:  DATA 64,61
00E58:  DATA 74,65
00E5A:  DATA 64,20
00E5C:  DATA 77,69
00E5E:  DATA 74,68
00E60:  DATA 69,6E
00E62:  DATA 20,6D
00E64:  DATA 69,73
00E66:  DATA 73,69
00E68:  DATA 6F,6E
00E6A:  DATA 20,72
00E6C:  DATA 61,6E
00E6E:  DATA 67,65
00E70:  DATA 0D,0A
00E72:  DATA 00,00
00E74:  DATA 45,72
00E76:  DATA 61,73
00E78:  DATA 65,64
00E7A:  DATA 20,25
00E7C:  DATA 6C,75
00E7E:  DATA 20,62
00E80:  DATA 79,74
00E82:  DATA 65,73
00E84:  DATA 20,28
00E86:  DATA 61,6C
00E88:  DATA 69,67
00E8A:  DATA 6E,65
00E8C:  DATA 64,29
00E8E:  DATA 0D,0A
00E90:  DATA 00,00
00E92:  DATA 0D,0A
00E94:  DATA 5F,5F
00E96:  DATA 5F,45
00E98:  DATA 6E,64
00E9A:  DATA 20,73
00E9C:  DATA 6D,66
00E9E:  DATA 5F,65
00EA0:  DATA 72,61
00EA2:  DATA 73,65
00EA4:  DATA 5F,5F
00EA6:  DATA 5F,5F
00EA8:  DATA 0D,0A
00EAA:  DATA 00,00
00EAC:  DATA 5F,5F
00EAE:  DATA 5F,5F
00EB0:  DATA 5F,5F
00EB2:  DATA 5F,5F
00EB4:  DATA 5F,5F
00EB6:  DATA 5F,5F
00EB8:  DATA 5F,5F
00EBA:  DATA 5F,5F
00EBC:  DATA 5F,5F
00EBE:  DATA 5F,5F
00EC0:  DATA 0D,0A
00EC2:  DATA 0D,0A
00EC4:  DATA 00,00
00EC6:  DATA 4D,49
00EC8:  DATA 53,53
00ECA:  DATA 49,4F
00ECC:  DATA 4E,20
00ECE:  DATA 46,4C
00ED0:  DATA 41,53
00ED2:  DATA 48,20
00ED4:  DATA 49,6E
00ED6:  DATA 69,74
00ED8:  DATA 69,61
00EDA:  DATA 6C,69
00EDC:  DATA 7A,65
00EDE:  DATA 0D,0A
00EE0:  DATA 00,00
00EE2:  DATA 09,5B
00EE4:  DATA 4D,49
00EE6:  DATA 53,20
00EE8:  DATA 46,4D
00EEA:  DATA 5D,20
00EEC:  DATA 43,6F
00EEE:  DATA 6E,6E
00EF0:  DATA 65,63
00EF2:  DATA 74,65
00EF4:  DATA 64,0D
00EF6:  DATA 0A,00
00EF8:  DATA 09,5B
00EFA:  DATA 4D,49
00EFC:  DATA 53,20
00EFE:  DATA 46,4D
00F00:  DATA 5D,20
00F02:  DATA 4E,6F
00F04:  DATA 74,20
00F06:  DATA 43,6F
00F08:  DATA 6E,6E
00F0A:  DATA 65,63
00F0C:  DATA 74,65
00F0E:  DATA 64,0D
00F10:  DATA 0A,00
00F12:  DATA 09,5B
00F14:  DATA 53,4D
00F16:  DATA 46,5D
00F18:  DATA 20,43
00F1A:  DATA 6F,6E
00F1C:  DATA 6E,65
00F1E:  DATA 63,74
00F20:  DATA 65,64
00F22:  DATA 0D,0A
00F24:  DATA 00,00
00F26:  DATA 09,5B
00F28:  DATA 53,4D
00F2A:  DATA 46,5D
00F2C:  DATA 20,4E
00F2E:  DATA 6F,74
00F30:  DATA 20,43
00F32:  DATA 6F,6E
00F34:  DATA 6E,65
00F36:  DATA 63,74
00F38:  DATA 65,64
00F3A:  DATA 0D,0A
00F3C:  DATA 00,00
00F3E:  DATA 09,5B
00F40:  DATA 4D,49
00F42:  DATA 53,20
00F44:  DATA 46,4D
00F46:  DATA 5D,20
00F48:  DATA 25,30
00F4A:  DATA 38,4C
00F4C:  DATA 58,0D
00F4E:  DATA 0A,00
00F50:  DATA 09,5B
00F52:  DATA 4D,49
00F54:  DATA 53,20
00F56:  DATA 46,4D
00F58:  DATA 5D,20
00F5A:  DATA 43,52
00F5C:  DATA 43,20
00F5E:  DATA 65,72
00F60:  DATA 72,6F
00F62:  DATA 72,20
00F64:  DATA 2D,3E
00F66:  DATA 20,69
00F68:  DATA 6E,69
00F6A:  DATA 74,69
00F6C:  DATA 61,6C
00F6E:  DATA 69,7A
00F70:  DATA 65,20
00F72:  DATA 63,6F
00F74:  DATA 75,6E
00F76:  DATA 74,65
00F78:  DATA 72,73
00F7A:  DATA 0D,0A
00F7C:  DATA 00,00
00F7E:  DATA 09,43
00F80:  DATA 6F,6D
00F82:  DATA 70,6C
00F84:  DATA 65,74
00F86:  DATA 65,0D
00F88:  DATA 0A,00
00F8A:  DATA 09,46
00F8C:  DATA 69,65
00F8E:  DATA 6C,64
00F90:  DATA 09,09
00F92:  DATA 43,6F
00F94:  DATA 75,6E
00F96:  DATA 74,65
00F98:  DATA 72,4E
00F9A:  DATA 61,6D
00F9C:  DATA 65,09
00F9E:  DATA 56,61
00FA0:  DATA 6C,75
00FA2:  DATA 65,0D
00FA4:  DATA 0A,00
00FA6:  DATA 09,2D
00FA8:  DATA 2D,2D
00FAA:  DATA 2D,2D
00FAC:  DATA 2D,2D
00FAE:  DATA 2D,2D
00FB0:  DATA 2D,2D
00FB2:  DATA 2D,09
00FB4:  DATA 2D,2D
00FB6:  DATA 2D,2D
00FB8:  DATA 2D,2D
00FBA:  DATA 2D,2D
00FBC:  DATA 2D,2D
00FBE:  DATA 2D,2D
00FC0:  DATA 2D,09
00FC2:  DATA 2D,2D
00FC4:  DATA 2D,2D
00FC6:  DATA 2D,2D
00FC8:  DATA 2D,2D
00FCA:  DATA 2D,2D
00FCC:  DATA 2D,2D
00FCE:  DATA 2D,0D
00FD0:  DATA 0A,00
00FD2:  DATA 09,50
00FD4:  DATA 49,43
00FD6:  DATA 4C,4F
00FD8:  DATA 47,09
00FDA:  DATA 09,55
00FDC:  DATA 73,65
00FDE:  DATA 64,09
00FE0:  DATA 09,30
00FE2:  DATA 78,25
00FE4:  DATA 30,38
00FE6:  DATA 4C,58
00FE8:  DATA 0D,0A
00FEA:  DATA 00,00
00FEC:  DATA 09,09
00FEE:  DATA 09,55
00FF0:  DATA 6E,63
00FF2:  DATA 6F,70
00FF4:  DATA 79,65
00FF6:  DATA 64,09
00FF8:  DATA 30,78
00FFA:  DATA 25,30
00FFC:  DATA 38,4C
00FFE:  DATA 58,0D
01000:  DATA 0A,00
01002:  DATA 09,09
01004:  DATA 09,52
01006:  DATA 65,73
01008:  DATA 65,72
0100A:  DATA 76,65
0100C:  DATA 09,09
0100E:  DATA 30,78
01010:  DATA 25,30
01012:  DATA 32,58
01014:  DATA 2F,20
01016:  DATA 30,78
01018:  DATA 25,30
0101A:  DATA 32,58
0101C:  DATA 0D,0A
0101E:  DATA 00,00
01020:  DATA 09,45
01022:  DATA 4E,56
01024:  DATA 49,52
01026:  DATA 4F,09
01028:  DATA 09,55
0102A:  DATA 73,65
0102C:  DATA 64,09
0102E:  DATA 09,30
01030:  DATA 78,25
01032:  DATA 30,38
01034:  DATA 4C,58
01036:  DATA 0D,0A
01038:  DATA 00,00
0103A:  DATA 09,09
0103C:  DATA 09,55
0103E:  DATA 6E,63
01040:  DATA 6F,70
01042:  DATA 79,65
01044:  DATA 64,09
01046:  DATA 30,78
01048:  DATA 25,30
0104A:  DATA 38,4C
0104C:  DATA 58,0D
0104E:  DATA 0A,00
01050:  DATA 09,09
01052:  DATA 09,52
01054:  DATA 65,73
01056:  DATA 65,72
01058:  DATA 76,65
0105A:  DATA 09,09
0105C:  DATA 30,78
0105E:  DATA 25,30
01060:  DATA 32,58
01062:  DATA 2F,20
01064:  DATA 30,78
01066:  DATA 25,30
01068:  DATA 32,58
0106A:  DATA 0D,0A
0106C:  DATA 00,00
0106E:  DATA 09,49
01070:  DATA 56,31
01072:  DATA 20,48
01074:  DATA 45,41
01076:  DATA 44,45
01078:  DATA 52,09
0107A:  DATA 55,73
0107C:  DATA 65,64
0107E:  DATA 09,09
01080:  DATA 30,78
01082:  DATA 25,30
01084:  DATA 38,4C
01086:  DATA 58,0D
01088:  DATA 0A,00
0108A:  DATA 09,09
0108C:  DATA 09,55
0108E:  DATA 6E,63
01090:  DATA 6F,70
01092:  DATA 79,65
01094:  DATA 64,09
01096:  DATA 30,78
01098:  DATA 25,30
0109A:  DATA 38,4C
0109C:  DATA 58,0D
0109E:  DATA 0A,00
010A0:  DATA 09,09
010A2:  DATA 09,52
010A4:  DATA 65,73
010A6:  DATA 65,72
010A8:  DATA 76,65
010AA:  DATA 09,09
010AC:  DATA 30,78
010AE:  DATA 25,30
010B0:  DATA 32,58
010B2:  DATA 2F,20
010B4:  DATA 30,78
010B6:  DATA 25,30
010B8:  DATA 32,58
010BA:  DATA 0D,0A
010BC:  DATA 00,00
010BE:  DATA 09,49
010C0:  DATA 56,31
010C2:  DATA 20,44
010C4:  DATA 41,54
010C6:  DATA 41,09
010C8:  DATA 55,73
010CA:  DATA 65,64
010CC:  DATA 09,09
010CE:  DATA 30,78
010D0:  DATA 25,30
010D2:  DATA 38,4C
010D4:  DATA 58,0D
010D6:  DATA 0A,00
010D8:  DATA 09,09
010DA:  DATA 09,55
010DC:  DATA 6E,63
010DE:  DATA 6F,70
010E0:  DATA 79,65
010E2:  DATA 64,09
010E4:  DATA 30,78
010E6:  DATA 25,30
010E8:  DATA 38,4C
010EA:  DATA 58,0D
010EC:  DATA 0A,00
010EE:  DATA 09,09
010F0:  DATA 09,52
010F2:  DATA 65,73
010F4:  DATA 65,72
010F6:  DATA 76,65
010F8:  DATA 09,09
010FA:  DATA 30,78
010FC:  DATA 25,30
010FE:  DATA 32,58
01100:  DATA 2F,20
01102:  DATA 30,78
01104:  DATA 25,30
01106:  DATA 32,58
01108:  DATA 0D,0A
0110A:  DATA 00,00
0110C:  DATA 09,49
0110E:  DATA 56,32
01110:  DATA 20,48
01112:  DATA 45,41
01114:  DATA 44,45
01116:  DATA 52,09
01118:  DATA 55,73
0111A:  DATA 65,64
0111C:  DATA 09,09
0111E:  DATA 30,78
01120:  DATA 25,30
01122:  DATA 38,4C
01124:  DATA 58,0D
01126:  DATA 0A,00
01128:  DATA 09,09
0112A:  DATA 09,55
0112C:  DATA 6E,63
0112E:  DATA 6F,70
01130:  DATA 79,65
01132:  DATA 64,09
01134:  DATA 30,78
01136:  DATA 25,30
01138:  DATA 38,4C
0113A:  DATA 58,0D
0113C:  DATA 0A,00
0113E:  DATA 09,09
01140:  DATA 09,52
01142:  DATA 65,73
01144:  DATA 65,72
01146:  DATA 76,65
01148:  DATA 09,09
0114A:  DATA 30,78
0114C:  DATA 25,30
0114E:  DATA 32,58
01150:  DATA 2F,20
01152:  DATA 30,78
01154:  DATA 25,30
01156:  DATA 32,58
01158:  DATA 0D,0A
0115A:  DATA 00,00
0115C:  DATA 09,49
0115E:  DATA 56,32
01160:  DATA 20,44
01162:  DATA 41,54
01164:  DATA 41,09
01166:  DATA 55,73
01168:  DATA 65,64
0116A:  DATA 09,09
0116C:  DATA 30,78
0116E:  DATA 25,30
01170:  DATA 38,4C
01172:  DATA 58,0D
01174:  DATA 0A,00
01176:  DATA 09,09
01178:  DATA 09,55
0117A:  DATA 6E,63
0117C:  DATA 6F,70
0117E:  DATA 79,65
01180:  DATA 64,09
01182:  DATA 30,78
01184:  DATA 25,30
01186:  DATA 38,4C
01188:  DATA 58,0D
0118A:  DATA 0A,00
0118C:  DATA 09,09
0118E:  DATA 09,52
01190:  DATA 65,73
01192:  DATA 65,72
01194:  DATA 76,65
01196:  DATA 09,09
01198:  DATA 30,78
0119A:  DATA 25,30
0119C:  DATA 32,58
0119E:  DATA 2F,20
011A0:  DATA 30,78
011A2:  DATA 25,30
011A4:  DATA 32,58
011A6:  DATA 0D,0A
011A8:  DATA 00,00
011AA:  DATA 09,3D
011AC:  DATA 3D,3D
011AE:  DATA 3D,3D
011B0:  DATA 3D,3D
011B2:  DATA 3D,3D
011B4:  DATA 3D,3D
011B6:  DATA 3D,3D
011B8:  DATA 3D,3D
011BA:  DATA 3D,3D
011BC:  DATA 3D,3D
011BE:  DATA 3D,3D
011C0:  DATA 3D,3D
011C2:  DATA 3D,3D
011C4:  DATA 3D,3D
011C6:  DATA 3D,3D
011C8:  DATA 3D,3D
011CA:  DATA 3D,3D
011CC:  DATA 3D,3D
011CE:  DATA 3D,3D
011D0:  DATA 3D,3D
011D2:  DATA 3D,3D
011D4:  DATA 3D,3D
011D6:  DATA 3D,3D
011D8:  DATA 3D,3D
011DA:  DATA 3D,3D
011DC:  DATA 3D,0D
011DE:  DATA 0A,00
011E0:  DATA 43,52
011E2:  DATA 43,20
011E4:  DATA 76,65
011E6:  DATA 72,69
011E8:  DATA 66,69
011EA:  DATA 63,61
011EC:  DATA 74,69
011EE:  DATA 6F,6E
011F0:  DATA 20,70
011F2:  DATA 61,73
011F4:  DATA 73,65
011F6:  DATA 64,20
011F8:  DATA 6F,6E
011FA:  DATA 20,61
011FC:  DATA 74,74
011FE:  DATA 65,6D
01200:  DATA 70,74
01202:  DATA 20,25
01204:  DATA 64,0D
01206:  DATA 0A,00
01208:  DATA 45,72
0120A:  DATA 72,6F
0120C:  DATA 72,3A
0120E:  DATA 20,43
01210:  DATA 52,43
01212:  DATA 20,76
01214:  DATA 65,72
01216:  DATA 69,66
01218:  DATA 69,63
0121A:  DATA 61,74
0121C:  DATA 69,6F
0121E:  DATA 6E,20
01220:  DATA 66,61
01222:  DATA 69,6C
01224:  DATA 65,64
01226:  DATA 20,61
01228:  DATA 66,74
0122A:  DATA 65,72
0122C:  DATA 20,25
0122E:  DATA 64,20
01230:  DATA 61,74
01232:  DATA 74,65
01234:  DATA 6D,70
01236:  DATA 74,73
01238:  DATA 0D,0A
0123A:  DATA 00,00
0123C:  DATA 0D,0A
0123E:  DATA 5F,5F
01240:  DATA 5F,5F
01242:  DATA 5F,5F
01244:  DATA 5F,5F
01246:  DATA 5F,5F
01248:  DATA 5F,5F
0124A:  DATA 5F,5F
0124C:  DATA 5F,5F
0124E:  DATA 5F,5F
01250:  DATA 5F,5F
01252:  DATA 5F,5F
01254:  DATA 5F,5F
01256:  DATA 5F,5F
01258:  DATA 5F,5F
0125A:  DATA 5F,5F
0125C:  DATA 0D,0A
0125E:  DATA 5F,5F
01260:  DATA 5F,5F
01262:  DATA 5F,53
01264:  DATA 74,61
01266:  DATA 72,74
01268:  DATA 20,65
0126A:  DATA 78,65
0126C:  DATA 63,75
0126E:  DATA 74,65
01270:  DATA 5F,6D
01272:  DATA 69,73
01274:  DATA 73,69
01276:  DATA 6F,6E
01278:  DATA 5F,5F
0127A:  DATA 5F,5F
0127C:  DATA 5F,0D
0127E:  DATA 0A,0D
01280:  DATA 0A,00
01282:  DATA 43,6F
01284:  DATA 6D,6D
01286:  DATA 61,6E
01288:  DATA 64,20
0128A:  DATA 49,44
0128C:  DATA 3A,20
0128E:  DATA 25,58
01290:  DATA 0D,0A
01292:  DATA 0D,0A
01294:  DATA 00,00
01296:  DATA 09,09
01298:  DATA 2D,3E
0129A:  DATA 20,47
0129C:  DATA 65,74
0129E:  DATA 20,74
012A0:  DATA 69,6D
012A2:  DATA 65,20
012A4:  DATA 74,6F
012A6:  DATA 20,25
012A8:  DATA 6C,75
012AA:  DATA 20,64
012AC:  DATA 61,79
012AE:  DATA 73,2C
012B0:  DATA 20,25
012B2:  DATA 30,32
012B4:  DATA 75,3A
012B6:  DATA 25,30
012B8:  DATA 32,75
012BA:  DATA 3A,25
012BC:  DATA 30,32
012BE:  DATA 75,0D
012C0:  DATA 0A,00
012C2:  DATA 09,09
012C4:  DATA 2D,3E
012C6:  DATA 20,49
012C8:  DATA 6E,76
012CA:  DATA 61,6C
012CC:  DATA 69,64
012CE:  DATA 20,43
012D0:  DATA 4D,44
012D2:  DATA 20,49
012D4:  DATA 44,21
012D6:  DATA 0D,0A
012D8:  DATA 00,00
012DA:  DATA 0D,0A
012DC:  DATA 5F,5F
012DE:  DATA 5F,5F
012E0:  DATA 5F,5F
012E2:  DATA 45,6E
012E4:  DATA 64,20
012E6:  DATA 65,78
012E8:  DATA 65,63
012EA:  DATA 75,74
012EC:  DATA 65,5F
012EE:  DATA 6D,69
012F0:  DATA 73,73
012F2:  DATA 69,6F
012F4:  DATA 6E,5F
012F6:  DATA 5F,5F
012F8:  DATA 5F,5F
012FA:  DATA 5F,0D
012FC:  DATA 0A,5F
012FE:  DATA 5F,5F
01300:  DATA 5F,5F
01302:  DATA 5F,5F
01304:  DATA 5F,5F
01306:  DATA 5F,5F
01308:  DATA 5F,5F
0130A:  DATA 5F,5F
0130C:  DATA 5F,5F
0130E:  DATA 5F,5F
01310:  DATA 5F,5F
01312:  DATA 5F,5F
01314:  DATA 5F,5F
01316:  DATA 5F,5F
01318:  DATA 5F,5F
0131A:  DATA 5F,5F
0131C:  DATA 0D,0A
0131E:  DATA 00,00
01320:  DATA 53,74
01322:  DATA 61,72
01324:  DATA 74,20
01326:  DATA 65,78
01328:  DATA 65,63
0132A:  DATA 75,74
0132C:  DATA 65,5F
0132E:  DATA 63,6F
01330:  DATA 6D,6D
01332:  DATA 61,6E
01334:  DATA 64,0D
01336:  DATA 0A,00
01338:  DATA 09,2D
0133A:  DATA 3E,20
0133C:  DATA 55,70
0133E:  DATA 6C,69
01340:  DATA 6E,6B
01342:  DATA 20,63
01344:  DATA 6F,6D
01346:  DATA 6D,61
01348:  DATA 6E,64
0134A:  DATA 0D,0A
0134C:  DATA 00,00
0134E:  DATA 09,20
01350:  DATA 20,20
01352:  DATA 54,72
01354:  DATA 61,6E
01356:  DATA 73,6D
01358:  DATA 69,74
0135A:  DATA 20,41
0135C:  DATA 63,6B
0135E:  DATA 6E,6F
01360:  DATA 6C,65
01362:  DATA 67,64
01364:  DATA 65,0D
01366:  DATA 0A,00
01368:  DATA 09,2D
0136A:  DATA 3E,20
0136C:  DATA 53,74
0136E:  DATA 61,74
01370:  DATA 75,73
01372:  DATA 20,63
01374:  DATA 68,65
01376:  DATA 63,6B
01378:  DATA 0D,0A
0137A:  DATA 00,00
0137C:  DATA 09,20
0137E:  DATA 20,20
01380:  DATA 54,72
01382:  DATA 61,6E
01384:  DATA 73,6D
01386:  DATA 69,74
01388:  DATA 20,4D
0138A:  DATA 49,53
0138C:  DATA 20,4D
0138E:  DATA 43,55
01390:  DATA 20,53
01392:  DATA 74,61
01394:  DATA 74,75
01396:  DATA 73,0D
01398:  DATA 0A,00
0139A:  DATA 66,69
0139C:  DATA 6E,69
0139E:  DATA 73,68
013A0:  DATA 65,64
013A2:  DATA 20,69
013A4:  DATA 6E,20
013A6:  DATA 73,74
013A8:  DATA 61,74
013AA:  DATA 75,73
013AC:  DATA 5F,63
013AE:  DATA 68,65
013B0:  DATA 63,6B
013B2:  DATA 0D,0A
013B4:  DATA 00,00
013B6:  DATA 09,2D
013B8:  DATA 3E,20
013BA:  DATA 53,4D
013BC:  DATA 46,20
013BE:  DATA 61,76
013C0:  DATA 61,69
013C2:  DATA 6C,61
013C4:  DATA 62,6C
013C6:  DATA 65,20
013C8:  DATA 63,68
013CA:  DATA 65,63
013CC:  DATA 6B,0D
013CE:  DATA 0A,00
013D0:  DATA 09,20
013D2:  DATA 20,20
013D4:  DATA 54,72
013D6:  DATA 61,6E
013D8:  DATA 73,6D
013DA:  DATA 69,74
013DC:  DATA 20,41
013DE:  DATA 63,6B
013E0:  DATA 6E,6F
013E2:  DATA 77,6C
013E4:  DATA 65,64
013E6:  DATA 67,65
013E8:  DATA 6D,65
013EA:  DATA 6E,74
013EC:  DATA 0D,0A
013EE:  DATA 00,00
013F0:  DATA 09,09
013F2:  DATA 2D,3E
013F4:  DATA 20,64
013F6:  DATA 65,6E
013F8:  DATA 69,65
013FA:  DATA 64,0D
013FC:  DATA 0A,00
013FE:  DATA 09,09
01400:  DATA 2D,3E
01402:  DATA 20,61
01404:  DATA 6C,6C
01406:  DATA 6F,77
01408:  DATA 65,64
0140A:  DATA 0D,0A
0140C:  DATA 00,00
0140E:  DATA 09,09
01410:  DATA 2D,3E
01412:  DATA 20,44
01414:  DATA 65,71
01416:  DATA 75,65
01418:  DATA 75,65
0141A:  DATA 64,3A
0141C:  DATA 20,66
0141E:  DATA 75,6E
01420:  DATA 63,3D
01422:  DATA 25,75
01424:  DATA 20,6D
01426:  DATA 69,73
01428:  DATA 73,69
0142A:  DATA 6F,6E
0142C:  DATA 3D,25
0142E:  DATA 75,20
01430:  DATA 73,69
01432:  DATA 7A,65
01434:  DATA 3D,25
01436:  DATA 6C,64
01438:  DATA 20,61
0143A:  DATA 64,64
0143C:  DATA 72,3D
0143E:  DATA 25,6C
01440:  DATA 64,0D
01442:  DATA 0A,00
01444:  DATA 09,09
01446:  DATA 20,20
01448:  DATA 20,55
0144A:  DATA 6E,6B
0144C:  DATA 6E,6F
0144E:  DATA 77,6E
01450:  DATA 20,66
01452:  DATA 75,6E
01454:  DATA 63,5F
01456:  DATA 74,79
01458:  DATA 70,65
0145A:  DATA 3D,25
0145C:  DATA 75,0D
0145E:  DATA 0A,00
01460:  DATA 09,09
01462:  DATA 2D,3E
01464:  DATA 20,43
01466:  DATA 6F,6D
01468:  DATA 70,6C
0146A:  DATA 65,74
0146C:  DATA 65,64
0146E:  DATA 20,25
01470:  DATA 75,20
01472:  DATA 6F,70
01474:  DATA 65,72
01476:  DATA 61,74
01478:  DATA 69,6F
0147A:  DATA 6E,73
0147C:  DATA 0D,0A
0147E:  DATA 00,00
01480:  DATA 09,2D
01482:  DATA 3E,20
01484:  DATA 54,49
01486:  DATA 4D,45
01488:  DATA 20,52
0148A:  DATA 65,63
0148C:  DATA 65,69
0148E:  DATA 76,65
01490:  DATA 0D,0A
01492:  DATA 00,00
01494:  DATA 09,20
01496:  DATA 20,20
01498:  DATA 54,72
0149A:  DATA 61,6E
0149C:  DATA 73,6D
0149E:  DATA 69,74
014A0:  DATA 20,41
014A2:  DATA 63,6B
014A4:  DATA 6E,6F
014A6:  DATA 6C,65
014A8:  DATA 67,64
014AA:  DATA 65,0D
014AC:  DATA 0A,00
014AE:  DATA 09,09
014B0:  DATA 2D,3E
014B2:  DATA 20,53
014B4:  DATA 65,74
014B6:  DATA 20,74
014B8:  DATA 69,6D
014BA:  DATA 65,20
014BC:  DATA 74,6F
014BE:  DATA 20,25
014C0:  DATA 6C,75
014C2:  DATA 20,64
014C4:  DATA 61,79
014C6:  DATA 73,2C
014C8:  DATA 20,25
014CA:  DATA 30,32
014CC:  DATA 75,3A
014CE:  DATA 25,30
014D0:  DATA 32,75
014D2:  DATA 3A,25
014D4:  DATA 30,32
014D6:  DATA 75,0D
014D8:  DATA 0A,00
014DA:  DATA 53,74
014DC:  DATA 61,72
014DE:  DATA 74,20
014E0:  DATA 4D,4F
014E2:  DATA 44,45
014E4:  DATA 20,4D
014E6:  DATA 45,41
014E8:  DATA 53,20
014EA:  DATA 49,56
014EC:  DATA 20,31
014EE:  DATA 20,53
014F0:  DATA 57,45
014F2:  DATA 45,50
014F4:  DATA 0D,0A
014F6:  DATA 00,00
014F8:  DATA 0D,0A
014FA:  DATA 41,44
014FC:  DATA 44,20
014FE:  DATA 53,4D
01500:  DATA 46,20
01502:  DATA 51,55
01504:  DATA 45,55
01506:  DATA 45,0D
01508:  DATA 0A,00
0150A:  DATA 09,4D
0150C:  DATA 69,73
0150E:  DATA 73,69
01510:  DATA 6F,6E
01512:  DATA 20,49
01514:  DATA 44,3A
01516:  DATA 20,20
01518:  DATA 20,25
0151A:  DATA 30,32
0151C:  DATA 58,0D
0151E:  DATA 0A,00
01520:  DATA 09,46
01522:  DATA 75,6E
01524:  DATA 63,74
01526:  DATA 69,6F
01528:  DATA 6E,20
0152A:  DATA 54,79
0152C:  DATA 70,65
0152E:  DATA 3A,25
01530:  DATA 30,32
01532:  DATA 58,0D
01534:  DATA 0A,00
01536:  DATA 09,57
01538:  DATA 72,69
0153A:  DATA 74,65
0153C:  DATA 20,4D
0153E:  DATA 6F,64
01540:  DATA 65,3A
01542:  DATA 20,20
01544:  DATA 20,25
01546:  DATA 30,32
01548:  DATA 58,0D
0154A:  DATA 0A,00
0154C:  DATA 09,53
0154E:  DATA 6F,75
01550:  DATA 72,63
01552:  DATA 65,20
01554:  DATA 54,79
01556:  DATA 70,65
01558:  DATA 3A,20
0155A:  DATA 20,25
0155C:  DATA 30,32
0155E:  DATA 58,0D
01560:  DATA 0A,00
01562:  DATA 09,53
01564:  DATA 74,61
01566:  DATA 72,74
01568:  DATA 20,41
0156A:  DATA 64,64
0156C:  DATA 72,65
0156E:  DATA 73,73
01570:  DATA 3A,25
01572:  DATA 30,34
01574:  DATA 58,0D
01576:  DATA 0A,00
01578:  DATA 09,53
0157A:  DATA 69,7A
0157C:  DATA 65,3A
0157E:  DATA 20,20
01580:  DATA 20,20
01582:  DATA 20,20
01584:  DATA 20,20
01586:  DATA 20,25
01588:  DATA 30,34
0158A:  DATA 58,0D
0158C:  DATA 0A,00
0158E:  DATA 0D,0A
01590:  DATA 41,44
01592:  DATA 44,20
01594:  DATA 53,4D
01596:  DATA 46,20
01598:  DATA 51,55
0159A:  DATA 45,55
0159C:  DATA 45,0D
0159E:  DATA 0A,00
015A0:  DATA 09,4D
015A2:  DATA 69,73
015A4:  DATA 73,69
015A6:  DATA 6F,6E
015A8:  DATA 20,49
015AA:  DATA 44,3A
015AC:  DATA 20,20
015AE:  DATA 20,25
015B0:  DATA 30,32
015B2:  DATA 58,0D
015B4:  DATA 0A,00
015B6:  DATA 09,46
015B8:  DATA 75,6E
015BA:  DATA 63,74
015BC:  DATA 69,6F
015BE:  DATA 6E,20
015C0:  DATA 54,79
015C2:  DATA 70,65
015C4:  DATA 3A,25
015C6:  DATA 30,32
015C8:  DATA 58,0D
015CA:  DATA 0A,00
015CC:  DATA 09,57
015CE:  DATA 72,69
015D0:  DATA 74,65
015D2:  DATA 20,4D
015D4:  DATA 6F,64
015D6:  DATA 65,3A
015D8:  DATA 20,20
015DA:  DATA 20,25
015DC:  DATA 30,32
015DE:  DATA 58,0D
015E0:  DATA 0A,00
015E2:  DATA 09,53
015E4:  DATA 6F,75
015E6:  DATA 72,63
015E8:  DATA 65,20
015EA:  DATA 54,79
015EC:  DATA 70,65
015EE:  DATA 3A,20
015F0:  DATA 20,25
015F2:  DATA 30,32
015F4:  DATA 58,0D
015F6:  DATA 0A,00
015F8:  DATA 09,53
015FA:  DATA 74,61
015FC:  DATA 72,74
015FE:  DATA 20,41
01600:  DATA 64,64
01602:  DATA 72,65
01604:  DATA 73,73
01606:  DATA 3A,25
01608:  DATA 30,34
0160A:  DATA 58,0D
0160C:  DATA 0A,00
0160E:  DATA 09,53
01610:  DATA 69,7A
01612:  DATA 65,3A
01614:  DATA 20,20
01616:  DATA 20,20
01618:  DATA 20,20
0161A:  DATA 20,20
0161C:  DATA 20,25
0161E:  DATA 30,34
01620:  DATA 58,0D
01622:  DATA 0A,00
01624:  DATA 53,74
01626:  DATA 61,72
01628:  DATA 74,20
0162A:  DATA 4D,4F
0162C:  DATA 44,45
0162E:  DATA 20,4D
01630:  DATA 45,41
01632:  DATA 53,20
01634:  DATA 49,56
01636:  DATA 20,50
01638:  DATA 4F,52
0163A:  DATA 54,31
0163C:  DATA 0D,0A
0163E:  DATA 00,00
01640:  DATA 0D,0A
01642:  DATA 41,44
01644:  DATA 44,20
01646:  DATA 53,4D
01648:  DATA 46,20
0164A:  DATA 51,55
0164C:  DATA 45,55
0164E:  DATA 45,0D
01650:  DATA 0A,00
01652:  DATA 09,4D
01654:  DATA 69,73
01656:  DATA 73,69
01658:  DATA 6F,6E
0165A:  DATA 20,49
0165C:  DATA 44,3A
0165E:  DATA 20,20
01660:  DATA 20,25
01662:  DATA 30,32
01664:  DATA 58,0D
01666:  DATA 0A,00
01668:  DATA 09,46
0166A:  DATA 75,6E
0166C:  DATA 63,74
0166E:  DATA 69,6F
01670:  DATA 6E,20
01672:  DATA 54,79
01674:  DATA 70,65
01676:  DATA 3A,25
01678:  DATA 30,32
0167A:  DATA 58,0D
0167C:  DATA 0A,00
0167E:  DATA 09,57
01680:  DATA 72,69
01682:  DATA 74,65
01684:  DATA 20,4D
01686:  DATA 6F,64
01688:  DATA 65,3A
0168A:  DATA 20,20
0168C:  DATA 20,25
0168E:  DATA 30,32
01690:  DATA 58,0D
01692:  DATA 0A,00
01694:  DATA 09,53
01696:  DATA 6F,75
01698:  DATA 72,63
0169A:  DATA 65,20
0169C:  DATA 54,79
0169E:  DATA 70,65
016A0:  DATA 3A,20
016A2:  DATA 20,25
016A4:  DATA 30,32
016A6:  DATA 58,0D
016A8:  DATA 0A,00
016AA:  DATA 09,53
016AC:  DATA 74,61
016AE:  DATA 72,74
016B0:  DATA 20,41
016B2:  DATA 64,64
016B4:  DATA 72,65
016B6:  DATA 73,73
016B8:  DATA 3A,25
016BA:  DATA 30,34
016BC:  DATA 58,0D
016BE:  DATA 0A,00
016C0:  DATA 09,53
016C2:  DATA 69,7A
016C4:  DATA 65,3A
016C6:  DATA 20,20
016C8:  DATA 20,20
016CA:  DATA 20,20
016CC:  DATA 20,20
016CE:  DATA 20,25
016D0:  DATA 30,34
016D2:  DATA 58,0D
016D4:  DATA 0A,00
016D6:  DATA 53,74
016D8:  DATA 61,72
016DA:  DATA 74,20
016DC:  DATA 4D,4F
016DE:  DATA 44,45
016E0:  DATA 20,4D
016E2:  DATA 45,41
016E4:  DATA 53,20
016E6:  DATA 49,56
016E8:  DATA 20,50
016EA:  DATA 4F,52
016EC:  DATA 54,32
016EE:  DATA 0D,0A
016F0:  DATA 00,00
016F2:  DATA 0D,0A
016F4:  DATA 41,44
016F6:  DATA 44,20
016F8:  DATA 53,4D
016FA:  DATA 46,20
016FC:  DATA 51,55
016FE:  DATA 45,55
01700:  DATA 45,0D
01702:  DATA 0A,00
01704:  DATA 09,4D
01706:  DATA 69,73
01708:  DATA 73,69
0170A:  DATA 6F,6E
0170C:  DATA 20,49
0170E:  DATA 44,3A
01710:  DATA 20,20
01712:  DATA 20,25
01714:  DATA 30,32
01716:  DATA 58,0D
01718:  DATA 0A,00
0171A:  DATA 09,46
0171C:  DATA 75,6E
0171E:  DATA 63,74
01720:  DATA 69,6F
01722:  DATA 6E,20
01724:  DATA 54,79
01726:  DATA 70,65
01728:  DATA 3A,25
0172A:  DATA 30,32
0172C:  DATA 58,0D
0172E:  DATA 0A,00
01730:  DATA 09,57
01732:  DATA 72,69
01734:  DATA 74,65
01736:  DATA 20,4D
01738:  DATA 6F,64
0173A:  DATA 65,3A
0173C:  DATA 20,20
0173E:  DATA 20,25
01740:  DATA 30,32
01742:  DATA 58,0D
01744:  DATA 0A,00
01746:  DATA 09,53
01748:  DATA 6F,75
0174A:  DATA 72,63
0174C:  DATA 65,20
0174E:  DATA 54,79
01750:  DATA 70,65
01752:  DATA 3A,20
01754:  DATA 20,25
01756:  DATA 30,32
01758:  DATA 58,0D
0175A:  DATA 0A,00
0175C:  DATA 09,53
0175E:  DATA 74,61
01760:  DATA 72,74
01762:  DATA 20,41
01764:  DATA 64,64
01766:  DATA 72,65
01768:  DATA 73,73
0176A:  DATA 3A,25
0176C:  DATA 30,34
0176E:  DATA 58,0D
01770:  DATA 0A,00
01772:  DATA 09,53
01774:  DATA 69,7A
01776:  DATA 65,3A
01778:  DATA 20,20
0177A:  DATA 20,20
0177C:  DATA 20,20
0177E:  DATA 20,20
01780:  DATA 20,25
01782:  DATA 30,34
01784:  DATA 58,0D
01786:  DATA 0A,00
01788:  DATA 53,74
0178A:  DATA 61,72
0178C:  DATA 74,20
0178E:  DATA 4D,4F
01790:  DATA 44,45
01792:  DATA 20,4D
01794:  DATA 45,41
01796:  DATA 53,20
01798:  DATA 49,56
0179A:  DATA 0D,0A
0179C:  DATA 00,00
0179E:  DATA 0D,0A
017A0:  DATA 41,44
017A2:  DATA 44,20
017A4:  DATA 53,4D
017A6:  DATA 46,20
017A8:  DATA 51,55
017AA:  DATA 45,55
017AC:  DATA 45,0D
017AE:  DATA 0A,00
017B0:  DATA 09,4D
017B2:  DATA 69,73
017B4:  DATA 73,69
017B6:  DATA 6F,6E
017B8:  DATA 20,49
017BA:  DATA 44,3A
017BC:  DATA 20,20
017BE:  DATA 20,25
017C0:  DATA 30,32
017C2:  DATA 58,0D
017C4:  DATA 0A,00
017C6:  DATA 09,46
017C8:  DATA 75,6E
017CA:  DATA 63,74
017CC:  DATA 69,6F
017CE:  DATA 6E,20
017D0:  DATA 54,79
017D2:  DATA 70,65
017D4:  DATA 3A,25
017D6:  DATA 30,32
017D8:  DATA 58,0D
017DA:  DATA 0A,00
017DC:  DATA 09,57
017DE:  DATA 72,69
017E0:  DATA 74,65
017E2:  DATA 20,4D
017E4:  DATA 6F,64
017E6:  DATA 65,3A
017E8:  DATA 20,20
017EA:  DATA 20,25
017EC:  DATA 30,32
017EE:  DATA 58,0D
017F0:  DATA 0A,00
017F2:  DATA 09,53
017F4:  DATA 6F,75
017F6:  DATA 72,63
017F8:  DATA 65,20
017FA:  DATA 54,79
017FC:  DATA 70,65
017FE:  DATA 3A,20
01800:  DATA 20,25
01802:  DATA 30,32
01804:  DATA 58,0D
01806:  DATA 0A,00
01808:  DATA 09,53
0180A:  DATA 74,61
0180C:  DATA 72,74
0180E:  DATA 20,41
01810:  DATA 64,64
01812:  DATA 72,65
01814:  DATA 73,73
01816:  DATA 3A,25
01818:  DATA 30,34
0181A:  DATA 58,0D
0181C:  DATA 0A,00
0181E:  DATA 09,53
01820:  DATA 69,7A
01822:  DATA 65,3A
01824:  DATA 20,20
01826:  DATA 20,20
01828:  DATA 20,20
0182A:  DATA 20,20
0182C:  DATA 20,25
0182E:  DATA 30,34
01830:  DATA 58,0D
01832:  DATA 0A,00
01834:  DATA 0D,0A
01836:  DATA 41,44
01838:  DATA 44,20
0183A:  DATA 53,4D
0183C:  DATA 46,20
0183E:  DATA 51,55
01840:  DATA 45,55
01842:  DATA 45,0D
01844:  DATA 0A,00
01846:  DATA 09,4D
01848:  DATA 69,73
0184A:  DATA 73,69
0184C:  DATA 6F,6E
0184E:  DATA 20,49
01850:  DATA 44,3A
01852:  DATA 20,20
01854:  DATA 20,25
01856:  DATA 30,32
01858:  DATA 58,0D
0185A:  DATA 0A,00
0185C:  DATA 09,46
0185E:  DATA 75,6E
01860:  DATA 63,74
01862:  DATA 69,6F
01864:  DATA 6E,20
01866:  DATA 54,79
01868:  DATA 70,65
0186A:  DATA 3A,25
0186C:  DATA 30,32
0186E:  DATA 58,0D
01870:  DATA 0A,00
01872:  DATA 09,57
01874:  DATA 72,69
01876:  DATA 74,65
01878:  DATA 20,4D
0187A:  DATA 6F,64
0187C:  DATA 65,3A
0187E:  DATA 20,20
01880:  DATA 20,25
01882:  DATA 30,32
01884:  DATA 58,0D
01886:  DATA 0A,00
01888:  DATA 09,53
0188A:  DATA 6F,75
0188C:  DATA 72,63
0188E:  DATA 65,20
01890:  DATA 54,79
01892:  DATA 70,65
01894:  DATA 3A,20
01896:  DATA 20,25
01898:  DATA 30,32
0189A:  DATA 58,0D
0189C:  DATA 0A,00
0189E:  DATA 09,53
018A0:  DATA 74,61
018A2:  DATA 72,74
018A4:  DATA 20,41
018A6:  DATA 64,64
018A8:  DATA 72,65
018AA:  DATA 73,73
018AC:  DATA 3A,25
018AE:  DATA 30,34
018B0:  DATA 58,0D
018B2:  DATA 0A,00
018B4:  DATA 09,53
018B6:  DATA 69,7A
018B8:  DATA 65,3A
018BA:  DATA 20,20
018BC:  DATA 20,20
018BE:  DATA 20,20
018C0:  DATA 20,20
018C2:  DATA 20,25
018C4:  DATA 30,34
018C6:  DATA 58,0D
018C8:  DATA 0A,00
018CA:  DATA 0D,0A
018CC:  DATA 41,44
018CE:  DATA 44,20
018D0:  DATA 53,4D
018D2:  DATA 46,20
018D4:  DATA 51,55
018D6:  DATA 45,55
018D8:  DATA 45,0D
018DA:  DATA 0A,00
018DC:  DATA 09,4D
018DE:  DATA 69,73
018E0:  DATA 73,69
018E2:  DATA 6F,6E
018E4:  DATA 20,49
018E6:  DATA 44,3A
018E8:  DATA 20,20
018EA:  DATA 20,25
018EC:  DATA 30,32
018EE:  DATA 58,0D
018F0:  DATA 0A,00
018F2:  DATA 09,46
018F4:  DATA 75,6E
018F6:  DATA 63,74
018F8:  DATA 69,6F
018FA:  DATA 6E,20
018FC:  DATA 54,79
018FE:  DATA 70,65
01900:  DATA 3A,25
01902:  DATA 30,32
01904:  DATA 58,0D
01906:  DATA 0A,00
01908:  DATA 09,57
0190A:  DATA 72,69
0190C:  DATA 74,65
0190E:  DATA 20,4D
01910:  DATA 6F,64
01912:  DATA 65,3A
01914:  DATA 20,20
01916:  DATA 20,25
01918:  DATA 30,32
0191A:  DATA 58,0D
0191C:  DATA 0A,00
0191E:  DATA 09,53
01920:  DATA 6F,75
01922:  DATA 72,63
01924:  DATA 65,20
01926:  DATA 54,79
01928:  DATA 70,65
0192A:  DATA 3A,20
0192C:  DATA 20,25
0192E:  DATA 30,32
01930:  DATA 58,0D
01932:  DATA 0A,00
01934:  DATA 09,53
01936:  DATA 74,61
01938:  DATA 72,74
0193A:  DATA 20,41
0193C:  DATA 64,64
0193E:  DATA 72,65
01940:  DATA 73,73
01942:  DATA 3A,25
01944:  DATA 30,34
01946:  DATA 58,0D
01948:  DATA 0A,00
0194A:  DATA 09,53
0194C:  DATA 69,7A
0194E:  DATA 65,3A
01950:  DATA 20,20
01952:  DATA 20,20
01954:  DATA 20,20
01956:  DATA 20,20
01958:  DATA 20,25
0195A:  DATA 30,34
0195C:  DATA 58,0D
0195E:  DATA 0A,00
01960:  DATA 45,6E
01962:  DATA 64,20
01964:  DATA 4D,4F
01966:  DATA 44,45
01968:  DATA 20,4D
0196A:  DATA 45,41
0196C:  DATA 53,20
0196E:  DATA 49,56
01970:  DATA 20,6D
01972:  DATA 69,73
01974:  DATA 73,69
01976:  DATA 6F,6E
01978:  DATA 0D,0A
0197A:  DATA 00,00
0197C:  DATA 53,74
0197E:  DATA 61,72
01980:  DATA 74,20
01982:  DATA 4D,4F
01984:  DATA 44,45
01986:  DATA 20,49
01988:  DATA 56,20
0198A:  DATA 44,45
0198C:  DATA 42,55
0198E:  DATA 47,0D
01990:  DATA 0A,00
01992:  DATA 09,49
01994:  DATA 44,3A
01996:  DATA 20,25
01998:  DATA 30,32
0199A:  DATA 58,0D
0199C:  DATA 0A,00
0199E:  DATA 09,53
019A0:  DATA 6C,65
019A2:  DATA 65,70
019A4:  DATA 54,69
019A6:  DATA 6D,65
019A8:  DATA 3A,20
019AA:  DATA 20,20
019AC:  DATA 20,20
019AE:  DATA 20,20
019B0:  DATA 20,30
019B2:  DATA 78,25
019B4:  DATA 30,34
019B6:  DATA 58,0D
019B8:  DATA 0A,00
019BA:  DATA 09,4C
019BC:  DATA 6F,67
019BE:  DATA 43,75
019C0:  DATA 72,72
019C2:  DATA 54,68
019C4:  DATA 72,65
019C6:  DATA 73,68
019C8:  DATA 6F,6C
019CA:  DATA 64,3A
019CC:  DATA 20,30
019CE:  DATA 78,25
019D0:  DATA 30,34
019D2:  DATA 58,0D
019D4:  DATA 0A,00
019D6:  DATA 09,50
019D8:  DATA 44,54
019DA:  DATA 68,72
019DC:  DATA 65,73
019DE:  DATA 68,6F
019E0:  DATA 6C,64
019E2:  DATA 3A,20
019E4:  DATA 20,20
019E6:  DATA 20,20
019E8:  DATA 20,30
019EA:  DATA 78,25
019EC:  DATA 30,34
019EE:  DATA 58,0D
019F0:  DATA 0A,00
019F2:  DATA 09,43
019F4:  DATA 75,72
019F6:  DATA 72,65
019F8:  DATA 6E,74
019FA:  DATA 4C,69
019FC:  DATA 6D,69
019FE:  DATA 74,3A
01A00:  DATA 20,20
01A02:  DATA 20,20
01A04:  DATA 20,30
01A06:  DATA 78,25
01A08:  DATA 30,34
01A0A:  DATA 58,0D
01A0C:  DATA 0A,00
01A0E:  DATA 09,4D
01A10:  DATA 65,61
01A12:  DATA 73,75
01A14:  DATA 72,65
01A16:  DATA 6D,65
01A18:  DATA 6E,74
01A1A:  DATA 54,69
01A1C:  DATA 6D,65
01A1E:  DATA 3A,20
01A20:  DATA 20,30
01A22:  DATA 78,25
01A24:  DATA 30,34
01A26:  DATA 58,0D
01A28:  DATA 0A,00
01A2A:  DATA 5B,49
01A2C:  DATA 56,44
01A2E:  DATA 42,47
01A30:  DATA 5D,20
01A32:  DATA 45,6E
01A34:  DATA 64,20
01A36:  DATA 4D,4F
01A38:  DATA 44,45
01A3A:  DATA 20,49
01A3C:  DATA 56,20
01A3E:  DATA 44,45
01A40:  DATA 42,55
01A42:  DATA 47,0D
01A44:  DATA 0A,00
01A46:  DATA 74,65
01A48:  DATA 6D,70
01A4A:  DATA 5F,74
01A4C:  DATA 6F,70
01A4E:  DATA 2C,20
01A50:  DATA 74,65
01A52:  DATA 6D,70
01A54:  DATA 5F,62
01A56:  DATA 6F,74
01A58:  DATA 2C,20
01A5A:  DATA 74,65
01A5C:  DATA 6D,70
01A5E:  DATA 5F,6D
01A60:  DATA 69,73
01A62:  DATA 37,2C
01A64:  DATA 20,70
01A66:  DATA 64,0D
01A68:  DATA 0A,00
01A6A:  DATA 4D,45
01A6C:  DATA 41,53
01A6E:  DATA 20,49
01A70:  DATA 56,20
01A72:  DATA 43,6F
01A74:  DATA 6D,6D
01A76:  DATA 61,6E
01A78:  DATA 64,20
01A7A:  DATA 50,61
01A7C:  DATA 72,61
01A7E:  DATA 6D,65
01A80:  DATA 74,65
01A82:  DATA 72,73
01A84:  DATA 3A,0D
01A86:  DATA 0A,00
01A88:  DATA 09,49
01A8A:  DATA 44,3A
01A8C:  DATA 20,25
01A8E:  DATA 30,32
01A90:  DATA 58,0D
01A92:  DATA 0A,00
01A94:  DATA 09,53
01A96:  DATA 77,65
01A98:  DATA 65,70
01A9A:  DATA 49,6E
01A9C:  DATA 74,65
01A9E:  DATA 72,76
01AA0:  DATA 61,6C
01AA2:  DATA 20,20
01AA4:  DATA 20,3A
01AA6:  DATA 25,6C
01AA8:  DATA 75,5B
01AAA:  DATA 6D,73
01AAC:  DATA 5D,0D
01AAE:  DATA 0A,00
01AB0:  DATA 09,50
01AB2:  DATA 44,20
01AB4:  DATA 54,68
01AB6:  DATA 72,65
01AB8:  DATA 73,68
01ABA:  DATA 6F,6C
01ABC:  DATA 64,20
01ABE:  DATA 20,20
01AC0:  DATA 20,3A
01AC2:  DATA 25,6C
01AC4:  DATA 75,5B
01AC6:  DATA 57,2F
01AC8:  DATA 6D,32
01ACA:  DATA 5D,0D
01ACC:  DATA 0A,00
01ACE:  DATA 09,53
01AD0:  DATA 77,65
01AD2:  DATA 65,70
01AD4:  DATA 4C,69
01AD6:  DATA 6D,69
01AD8:  DATA 74,20
01ADA:  DATA 20,20
01ADC:  DATA 20,20
01ADE:  DATA 20,3A
01AE0:  DATA 25,6C
01AE2:  DATA 75,5B
01AE4:  DATA 6D,41
01AE6:  DATA 5D,0D
01AE8:  DATA 0A,00
01AEA:  DATA 09,4C
01AEC:  DATA 6F,67
01AEE:  DATA 54,68
01AF0:  DATA 72,65
01AF2:  DATA 73,68
01AF4:  DATA 6F,6C
01AF6:  DATA 64,20
01AF8:  DATA 20,20
01AFA:  DATA 20,3A
01AFC:  DATA 25,6C
01AFE:  DATA 75,5B
01B00:  DATA 6D,41
01B02:  DATA 5D,0D
01B04:  DATA 0A,00
01B06:  DATA 09,4D
01B08:  DATA 65,61
01B0A:  DATA 73,75
01B0C:  DATA 72,65
01B0E:  DATA 6D,65
01B10:  DATA 6E,74
01B12:  DATA 54,69
01B14:  DATA 6D,65
01B16:  DATA 20,3A
01B18:  DATA 25,6C
01B1A:  DATA 75,5B
01B1C:  DATA 73,5D
01B1E:  DATA 0D,0A
01B20:  DATA 0D,0A
01B22:  DATA 00,00
01B24:  DATA 53,74
01B26:  DATA 61,72
01B28:  DATA 74,20
01B2A:  DATA 4D,4F
01B2C:  DATA 44,45
01B2E:  DATA 20,4D
01B30:  DATA 45,41
01B32:  DATA 53,20
01B34:  DATA 50,44
01B36:  DATA 0D,0A
01B38:  DATA 00,00
01B3A:  DATA 45,6E
01B3C:  DATA 64,20
01B3E:  DATA 4D,4F
01B40:  DATA 44,45
01B42:  DATA 20,4D
01B44:  DATA 45,41
01B46:  DATA 53,20
01B48:  DATA 50,44
01B4A:  DATA 0D,0A
01B4C:  DATA 00,00
01B4E:  DATA 53,74
01B50:  DATA 61,72
01B52:  DATA 74,20
01B54:  DATA 46,6C
01B56:  DATA 61,73
01B58:  DATA 68,20
01B5A:  DATA 45,72
01B5C:  DATA 61,73
01B5E:  DATA 65,20
01B60:  DATA 41,6C
01B62:  DATA 6C,0D
01B64:  DATA 0A,00
01B66:  DATA 45,6E
01B68:  DATA 64,20
01B6A:  DATA 46,6C
01B6C:  DATA 61,73
01B6E:  DATA 68,20
01B70:  DATA 45,72
01B72:  DATA 61,73
01B74:  DATA 65,20
01B76:  DATA 41,6C
01B78:  DATA 6C,0D
01B7A:  DATA 0A,00
01B7C:  DATA 53,74
01B7E:  DATA 61,72
01B80:  DATA 74,20
01B82:  DATA 46,6C
01B84:  DATA 61,73
01B86:  DATA 68,20
01B88:  DATA 45,72
01B8A:  DATA 61,73
01B8C:  DATA 65,20
01B8E:  DATA 31,20
01B90:  DATA 53,65
01B92:  DATA 63,74
01B94:  DATA 6F,72
01B96:  DATA 0D,0A
01B98:  DATA 00,00
01B9A:  DATA 09,53
01B9C:  DATA 65,63
01B9E:  DATA 74,6F
01BA0:  DATA 72,20
01BA2:  DATA 41,64
01BA4:  DATA 64,72
01BA6:  DATA 65,73
01BA8:  DATA 73,3A
01BAA:  DATA 20,30
01BAC:  DATA 78,25
01BAE:  DATA 30,38
01BB0:  DATA 4C,58
01BB2:  DATA 0D,0A
01BB4:  DATA 00,00
01BB6:  DATA 45,6E
01BB8:  DATA 64,20
01BBA:  DATA 46,6C
01BBC:  DATA 61,73
01BBE:  DATA 68,20
01BC0:  DATA 45,72
01BC2:  DATA 61,73
01BC4:  DATA 65,20
01BC6:  DATA 31,20
01BC8:  DATA 53,65
01BCA:  DATA 63,74
01BCC:  DATA 6F,72
01BCE:  DATA 0D,0A
01BD0:  DATA 00,00
01BD2:  DATA 53,74
01BD4:  DATA 61,72
01BD6:  DATA 74,20
01BD8:  DATA 46,6C
01BDA:  DATA 61,73
01BDC:  DATA 68,20
01BDE:  DATA 45,72
01BE0:  DATA 61,73
01BE2:  DATA 65,20
01BE4:  DATA 34,6B
01BE6:  DATA 42,79
01BE8:  DATA 74,65
01BEA:  DATA 20,53
01BEC:  DATA 75,62
01BEE:  DATA 73,65
01BF0:  DATA 63,74
01BF2:  DATA 6F,72
01BF4:  DATA 0D,0A
01BF6:  DATA 00,00
01BF8:  DATA 09,53
01BFA:  DATA 75,62
01BFC:  DATA 73,65
01BFE:  DATA 63,74
01C00:  DATA 6F,72
01C02:  DATA 20,41
01C04:  DATA 64,64
01C06:  DATA 72,65
01C08:  DATA 73,73
01C0A:  DATA 3A,20
01C0C:  DATA 30,78
01C0E:  DATA 25,30
01C10:  DATA 38,4C
01C12:  DATA 58,0D
01C14:  DATA 0A,00
01C16:  DATA 45,6E
01C18:  DATA 64,20
01C1A:  DATA 46,6C
01C1C:  DATA 61,73
01C1E:  DATA 68,20
01C20:  DATA 45,72
01C22:  DATA 61,73
01C24:  DATA 65,20
01C26:  DATA 34,6B
01C28:  DATA 42,79
01C2A:  DATA 74,65
01C2C:  DATA 20,53
01C2E:  DATA 75,62
01C30:  DATA 73,65
01C32:  DATA 63,74
01C34:  DATA 6F,72
01C36:  DATA 0D,0A
01C38:  DATA 00,00
01C3A:  DATA 53,74
01C3C:  DATA 61,72
01C3E:  DATA 74,20
01C40:  DATA 46,6C
01C42:  DATA 61,73
01C44:  DATA 68,20
01C46:  DATA 45,72
01C48:  DATA 61,73
01C4A:  DATA 65,20
01C4C:  DATA 36,34
01C4E:  DATA 6B,42
01C50:  DATA 79,74
01C52:  DATA 65,20
01C54:  DATA 53,75
01C56:  DATA 62,73
01C58:  DATA 65,63
01C5A:  DATA 74,6F
01C5C:  DATA 72,0D
01C5E:  DATA 0A,00
01C60:  DATA 09,53
01C62:  DATA 75,62
01C64:  DATA 73,65
01C66:  DATA 63,74
01C68:  DATA 6F,72
01C6A:  DATA 20,41
01C6C:  DATA 64,64
01C6E:  DATA 72,65
01C70:  DATA 73,73
01C72:  DATA 3A,20
01C74:  DATA 30,78
01C76:  DATA 25,30
01C78:  DATA 38,4C
01C7A:  DATA 58,0D
01C7C:  DATA 0A,00
01C7E:  DATA 45,6E
01C80:  DATA 64,20
01C82:  DATA 46,6C
01C84:  DATA 61,73
01C86:  DATA 68,20
01C88:  DATA 45,72
01C8A:  DATA 61,73
01C8C:  DATA 65,20
01C8E:  DATA 36,34
01C90:  DATA 6B,42
01C92:  DATA 79,74
01C94:  DATA 65,20
01C96:  DATA 53,75
01C98:  DATA 62,73
01C9A:  DATA 65,63
01C9C:  DATA 74,6F
01C9E:  DATA 72,0D
01CA0:  DATA 0A,00
01CA2:  DATA 53,74
01CA4:  DATA 61,72
01CA6:  DATA 74,20
01CA8:  DATA 46,6C
01CAA:  DATA 61,73
01CAC:  DATA 68,20
01CAE:  DATA 57,72
01CB0:  DATA 69,74
01CB2:  DATA 65,20
01CB4:  DATA 44,65
01CB6:  DATA 6D,6F
01CB8:  DATA 0D,0A
01CBA:  DATA 00,00
01CBC:  DATA 09,4D
01CBE:  DATA 4F,44
01CC0:  DATA 45,20
01CC2:  DATA 20,20
01CC4:  DATA 20,20
01CC6:  DATA 3A,20
01CC8:  DATA 25,30
01CCA:  DATA 32,58
01CCC:  DATA 0D,0A
01CCE:  DATA 00,00
01CD0:  DATA 09,41
01CD2:  DATA 64,64
01CD4:  DATA 72,65
01CD6:  DATA 73,73
01CD8:  DATA 20,20
01CDA:  DATA 3A,20
01CDC:  DATA 30,78
01CDE:  DATA 25,30
01CE0:  DATA 38,4C
01CE2:  DATA 58,0D
01CE4:  DATA 0A,00
01CE6:  DATA 09,50
01CE8:  DATA 61,63
01CEA:  DATA 6B,65
01CEC:  DATA 74,4E
01CEE:  DATA 75,6D
01CF0:  DATA 3A,20
01CF2:  DATA 30,78
01CF4:  DATA 25,30
01CF6:  DATA 34,4C
01CF8:  DATA 58,0D
01CFA:  DATA 0A,00
01CFC:  DATA 57,72
01CFE:  DATA 69,74
01D00:  DATA 65,20
01D02:  DATA 44,61
01D04:  DATA 74,61
01D06:  DATA 0D,0A
01D08:  DATA 00,00
01D0A:  DATA 0D,0A
01D0C:  DATA 5B,46
01D0E:  DATA 4C,41
01D10:  DATA 53,48
01D12:  DATA 5D,20
01D14:  DATA 57,72
01D16:  DATA 69,74
01D18:  DATA 65,20
01D1A:  DATA 61,64
01D1C:  DATA 64,72
01D1E:  DATA 65,73
01D20:  DATA 73,20
01D22:  DATA 30,78
01D24:  DATA 25,30
01D26:  DATA 38,4C
01D28:  DATA 58,20
01D2A:  DATA 65,78
01D2C:  DATA 63,65
01D2E:  DATA 65,64
01D30:  DATA 73,20
01D32:  DATA 64,65
01D34:  DATA 76,69
01D36:  DATA 63,65
01D38:  DATA 20,65
01D3A:  DATA 6E,64
01D3C:  DATA 20,30
01D3E:  DATA 78,25
01D40:  DATA 30,38
01D42:  DATA 4C,58
01D44:  DATA 20,2D
01D46:  DATA 3E,20
01D48:  DATA 61,62
01D4A:  DATA 6F,72
01D4C:  DATA 74,0D
01D4E:  DATA 0A,00
01D50:  DATA 0D,0A
01D52:  DATA 5B,46
01D54:  DATA 4C,41
01D56:  DATA 53,48
01D58:  DATA 5D,20
01D5A:  DATA 52,65
01D5C:  DATA 61,63
01D5E:  DATA 68,65
01D60:  DATA 64,20
01D62:  DATA 65,6E
01D64:  DATA 64,2E
01D66:  DATA 20,50
01D68:  DATA 61,72
01D6A:  DATA 74,69
01D6C:  DATA 61,6C
01D6E:  DATA 20,77
01D70:  DATA 72,69
01D72:  DATA 74,65
01D74:  DATA 20,25
01D76:  DATA 6C,75
01D78:  DATA 20,62
01D7A:  DATA 79,74
01D7C:  DATA 65,73
01D7E:  DATA 20,28
01D80:  DATA 70,61
01D82:  DATA 63,6B
01D84:  DATA 65,74
01D86:  DATA 20,74
01D88:  DATA 72,75
01D8A:  DATA 6E,63
01D8C:  DATA 61,74
01D8E:  DATA 65,64
01D90:  DATA 29,2E
01D92:  DATA 0D,0A
01D94:  DATA 00,00
01D96:  DATA 45,6E
01D98:  DATA 64,20
01D9A:  DATA 46,6C
01D9C:  DATA 61,73
01D9E:  DATA 68,20
01DA0:  DATA 57,72
01DA2:  DATA 69,74
01DA4:  DATA 65,20
01DA6:  DATA 44,65
01DA8:  DATA 6D,6F
01DAA:  DATA 0D,0A
01DAC:  DATA 00,00
01DAE:  DATA 53,74
01DB0:  DATA 61,72
01DB2:  DATA 74,20
01DB4:  DATA 46,6C
01DB6:  DATA 61,73
01DB8:  DATA 68,20
01DBA:  DATA 57,72
01DBC:  DATA 69,74
01DBE:  DATA 65,20
01DC0:  DATA 34,6B
01DC2:  DATA 42,79
01DC4:  DATA 74,65
01DC6:  DATA 20,53
01DC8:  DATA 75,62
01DCA:  DATA 73,65
01DCC:  DATA 63,74
01DCE:  DATA 6F,72
01DD0:  DATA 0D,0A
01DD2:  DATA 00,00
01DD4:  DATA 45,6E
01DD6:  DATA 64,20
01DD8:  DATA 46,6C
01DDA:  DATA 61,73
01DDC:  DATA 68,20
01DDE:  DATA 57,72
01DE0:  DATA 69,74
01DE2:  DATA 65,20
01DE4:  DATA 34,6B
01DE6:  DATA 42,79
01DE8:  DATA 74,65
01DEA:  DATA 20,53
01DEC:  DATA 75,62
01DEE:  DATA 73,65
01DF0:  DATA 63,74
01DF2:  DATA 6F,72
01DF4:  DATA 0D,0A
01DF6:  DATA 00,00
01DF8:  DATA 53,74
01DFA:  DATA 61,72
01DFC:  DATA 74,20
01DFE:  DATA 46,6C
01E00:  DATA 61,73
01E02:  DATA 68,20
01E04:  DATA 52,65
01E06:  DATA 61,64
01E08:  DATA 0D,0A
01E0A:  DATA 00,00
01E0C:  DATA 09,4D
01E0E:  DATA 4F,44
01E10:  DATA 45,20
01E12:  DATA 20,20
01E14:  DATA 20,20
01E16:  DATA 3A,20
01E18:  DATA 25,30
01E1A:  DATA 32,58
01E1C:  DATA 0D,0A
01E1E:  DATA 00,00
01E20:  DATA 09,41
01E22:  DATA 64,64
01E24:  DATA 72,65
01E26:  DATA 73,73
01E28:  DATA 20,20
01E2A:  DATA 3A,20
01E2C:  DATA 30,78
01E2E:  DATA 25,30
01E30:  DATA 38,4C
01E32:  DATA 58,0D
01E34:  DATA 0A,00
01E36:  DATA 09,50
01E38:  DATA 61,63
01E3A:  DATA 6B,65
01E3C:  DATA 74,4E
01E3E:  DATA 75,6D
01E40:  DATA 3A,20
01E42:  DATA 30,78
01E44:  DATA 25,30
01E46:  DATA 34,4C
01E48:  DATA 58,0D
01E4A:  DATA 0A,00
01E4C:  DATA 41,44
01E4E:  DATA 44,52
01E50:  DATA 45,53
01E52:  DATA 53,20
01E54:  DATA 20,3A
01E56:  DATA 0D,0A
01E58:  DATA 00,00
01E5A:  DATA 4D,69
01E5C:  DATA 73,73
01E5E:  DATA 69,6F
01E60:  DATA 6E,20
01E62:  DATA 46,6C
01E64:  DATA 61,73
01E66:  DATA 68,20
01E68:  DATA 69,73
01E6A:  DATA 20,6E
01E6C:  DATA 6F,74
01E6E:  DATA 20,63
01E70:  DATA 6F,6E
01E72:  DATA 6E,65
01E74:  DATA 63,74
01E76:  DATA 65,64
01E78:  DATA 0D,0A
01E7A:  DATA 00,00
01E7C:  DATA 5B,46
01E7E:  DATA 4C,41
01E80:  DATA 53,48
01E82:  DATA 5D,20
01E84:  DATA 52,65
01E86:  DATA 61,64
01E88:  DATA 20,61
01E8A:  DATA 64,64
01E8C:  DATA 72,65
01E8E:  DATA 73,73
01E90:  DATA 20,30
01E92:  DATA 78,25
01E94:  DATA 30,38
01E96:  DATA 4C,58
01E98:  DATA 20,65
01E9A:  DATA 78,63
01E9C:  DATA 65,65
01E9E:  DATA 64,73
01EA0:  DATA 20,64
01EA2:  DATA 65,76
01EA4:  DATA 69,63
01EA6:  DATA 65,20
01EA8:  DATA 65,6E
01EAA:  DATA 64,20
01EAC:  DATA 30,78
01EAE:  DATA 25,30
01EB0:  DATA 38,4C
01EB2:  DATA 58,20
01EB4:  DATA 2D,3E
01EB6:  DATA 20,73
01EB8:  DATA 74,6F
01EBA:  DATA 70,0D
01EBC:  DATA 0A,00
01EBE:  DATA 5B,46
01EC0:  DATA 4C,41
01EC2:  DATA 53,48
01EC4:  DATA 5D,20
01EC6:  DATA 45,6E
01EC8:  DATA 64,20
01ECA:  DATA 72,65
01ECC:  DATA 61,63
01ECE:  DATA 68,65
01ED0:  DATA 64,2E
01ED2:  DATA 20,50
01ED4:  DATA 61,72
01ED6:  DATA 74,69
01ED8:  DATA 61,6C
01EDA:  DATA 20,72
01EDC:  DATA 65,61
01EDE:  DATA 64,20
01EE0:  DATA 25,6C
01EE2:  DATA 75,20
01EE4:  DATA 62,79
01EE6:  DATA 74,65
01EE8:  DATA 73,2E
01EEA:  DATA 0D,0A
01EEC:  DATA 00,00
01EEE:  DATA 25,30
01EF0:  DATA 38,4C
01EF2:  DATA 58,20
01EF4:  DATA 3A,20
01EF6:  DATA 00,00
01EF8:  DATA 45,6E
01EFA:  DATA 64,20
01EFC:  DATA 46,6C
01EFE:  DATA 61,73
01F00:  DATA 68,20
01F02:  DATA 52,65
01F04:  DATA 61,64
01F06:  DATA 0D,0A
01F08:  DATA 00,00
01F0A:  DATA 53,74
01F0C:  DATA 61,72
01F0E:  DATA 74,20
01F10:  DATA 46,6C
01F12:  DATA 61,73
01F14:  DATA 68,20
01F16:  DATA 52,65
01F18:  DATA 61,64
01F1A:  DATA 20,41
01F1C:  DATA 64,64
01F1E:  DATA 72,65
01F20:  DATA 73,73
01F22:  DATA 0D,0A
01F24:  DATA 00,00
01F26:  DATA 52,65
01F28:  DATA 61,64
01F2A:  DATA 20,44
01F2C:  DATA 61,74
01F2E:  DATA 61,3A
01F30:  DATA 20,25
01F32:  DATA 30,32
01F34:  DATA 58,20
01F36:  DATA 25,30
01F38:  DATA 32,58
01F3A:  DATA 20,25
01F3C:  DATA 30,32
01F3E:  DATA 58,20
01F40:  DATA 25,30
01F42:  DATA 32,58
01F44:  DATA 0D,0A
01F46:  DATA 00,00
01F48:  DATA 45,6E
01F4A:  DATA 64,20
01F4C:  DATA 46,6C
01F4E:  DATA 61,73
01F50:  DATA 68,20
01F52:  DATA 52,65
01F54:  DATA 61,64
01F56:  DATA 20,41
01F58:  DATA 64,64
01F5A:  DATA 72,65
01F5C:  DATA 73,73
01F5E:  DATA 0D,0A
01F60:  DATA 00,00
01F62:  DATA 53,74
01F64:  DATA 61,72
01F66:  DATA 74,20
01F68:  DATA 46,6C
01F6A:  DATA 61,73
01F6C:  DATA 68,20
01F6E:  DATA 45,72
01F70:  DATA 61,73
01F72:  DATA 65,20
01F74:  DATA 61,6E
01F76:  DATA 64,20
01F78:  DATA 52,65
01F7A:  DATA 73,65
01F7C:  DATA 74,0D
01F7E:  DATA 0A,00
01F80:  DATA 45,6E
01F82:  DATA 64,20
01F84:  DATA 46,6C
01F86:  DATA 61,73
01F88:  DATA 68,20
01F8A:  DATA 45,72
01F8C:  DATA 61,73
01F8E:  DATA 65,20
01F90:  DATA 61,6E
01F92:  DATA 64,20
01F94:  DATA 52,65
01F96:  DATA 73,65
01F98:  DATA 74,0D
01F9A:  DATA 0A,00
01F9C:  DATA 53,74
01F9E:  DATA 61,72
01FA0:  DATA 74,20
01FA2:  DATA 46,6C
01FA4:  DATA 61,73
01FA6:  DATA 68,20
01FA8:  DATA 53,4D
01FAA:  DATA 46,20
01FAC:  DATA 43,6F
01FAE:  DATA 70,79
01FB0:  DATA 0D,0A
01FB2:  DATA 00,00
01FB4:  DATA 45,6E
01FB6:  DATA 64,20
01FB8:  DATA 46,6C
01FBA:  DATA 61,73
01FBC:  DATA 68,20
01FBE:  DATA 53,4D
01FC0:  DATA 46,20
01FC2:  DATA 43,6F
01FC4:  DATA 70,79
01FC6:  DATA 0D,0A
01FC8:  DATA 00,00
01FCA:  DATA 53,74
01FCC:  DATA 61,72
01FCE:  DATA 74,20
01FD0:  DATA 46,6C
01FD2:  DATA 61,73
01FD4:  DATA 68,20
01FD6:  DATA 53,4D
01FD8:  DATA 46,20
01FDA:  DATA 52,65
01FDC:  DATA 61,64
01FDE:  DATA 0D,0A
01FE0:  DATA 00,00
01FE2:  DATA 09,41
01FE4:  DATA 64,64
01FE6:  DATA 72,65
01FE8:  DATA 73,73
01FEA:  DATA 20,20
01FEC:  DATA 3A,20
01FEE:  DATA 30,78
01FF0:  DATA 25,30
01FF2:  DATA 38,4C
01FF4:  DATA 58,0D
01FF6:  DATA 0A,00
01FF8:  DATA 09,50
01FFA:  DATA 61,63
01FFC:  DATA 6B,65
01FFE:  DATA 74,4E
02000:  DATA 75,6D
02002:  DATA 3A,20
02004:  DATA 30,78
02006:  DATA 25,30
02008:  DATA 34,4C
0200A:  DATA 58,0D
0200C:  DATA 0A,00
0200E:  DATA 52,65
02010:  DATA 61,64
02012:  DATA 20,44
02014:  DATA 61,74
02016:  DATA 61,0D
02018:  DATA 0A,00
0201A:  DATA 0D,0A
0201C:  DATA 45,6E
0201E:  DATA 64,20
02020:  DATA 46,6C
02022:  DATA 61,73
02024:  DATA 68,20
02026:  DATA 53,4D
02028:  DATA 46,20
0202A:  DATA 52,65
0202C:  DATA 61,64
0202E:  DATA 0D,0A
02030:  DATA 00,00
02032:  DATA 53,74
02034:  DATA 61,72
02036:  DATA 74,20
02038:  DATA 46,6C
0203A:  DATA 61,73
0203C:  DATA 68,20
0203E:  DATA 53,4D
02040:  DATA 46,20
02042:  DATA 45,72
02044:  DATA 61,73
02046:  DATA 65,0D
02048:  DATA 0A,00
0204A:  DATA 45,6E
0204C:  DATA 64,20
0204E:  DATA 46,6C
02050:  DATA 61,73
02052:  DATA 68,20
02054:  DATA 53,4D
02056:  DATA 46,20
02058:  DATA 45,72
0205A:  DATA 61,73
0205C:  DATA 65,0D
0205E:  DATA 0A,00
02060:  DATA 53,74
02062:  DATA 61,72
02064:  DATA 74,20
02066:  DATA 46,6C
02068:  DATA 61,73
0206A:  DATA 68,20
0206C:  DATA 41,64
0206E:  DATA 64,72
02070:  DATA 65,73
02072:  DATA 73,20
02074:  DATA 52,65
02076:  DATA 73,65
02078:  DATA 74,0D
0207A:  DATA 0A,00
0207C:  DATA 45,6E
0207E:  DATA 64,20
02080:  DATA 46,6C
02082:  DATA 61,73
02084:  DATA 68,20
02086:  DATA 41,64
02088:  DATA 64,72
0208A:  DATA 65,73
0208C:  DATA 73,20
0208E:  DATA 52,65
02090:  DATA 73,65
02092:  DATA 74,0D
02094:  DATA 0A,00
02096:  DATA 53,4D
02098:  DATA 46,20
0209A:  DATA 69,73
0209C:  DATA 20,6E
0209E:  DATA 6F,74
020A0:  DATA 20,63
020A2:  DATA 6F,6E
020A4:  DATA 6E,65
020A6:  DATA 63,74
020A8:  DATA 65,64
020AA:  DATA 0D,0A
020AC:  DATA 00,00
020AE:  DATA 53,74
020B0:  DATA 61,72
020B2:  DATA 74,20
020B4:  DATA 46,6C
020B6:  DATA 61,73
020B8:  DATA 68,20
020BA:  DATA 53,4D
020BC:  DATA 46,20
020BE:  DATA 52,65
020C0:  DATA 61,64
020C2:  DATA 20,46
020C4:  DATA 6F,72
020C6:  DATA 63,65
020C8:  DATA 0D,0A
020CA:  DATA 00,00
020CC:  DATA 09,41
020CE:  DATA 64,64
020D0:  DATA 72,65
020D2:  DATA 73,73
020D4:  DATA 20,20
020D6:  DATA 3A,20
020D8:  DATA 30,78
020DA:  DATA 25,30
020DC:  DATA 38,4C
020DE:  DATA 58,0D
020E0:  DATA 0A,00
020E2:  DATA 09,50
020E4:  DATA 61,63
020E6:  DATA 6B,65
020E8:  DATA 74,4E
020EA:  DATA 75,6D
020EC:  DATA 3A,20
020EE:  DATA 30,78
020F0:  DATA 25,30
020F2:  DATA 34,4C
020F4:  DATA 58,0D
020F6:  DATA 0A,00
020F8:  DATA 72,65
020FA:  DATA 61,64
020FC:  DATA 20,64
020FE:  DATA 61,74
02100:  DATA 61,0D
02102:  DATA 0A,00
02104:  DATA 0D,0A
02106:  DATA 45,6E
02108:  DATA 64,20
0210A:  DATA 46,6C
0210C:  DATA 61,73
0210E:  DATA 68,20
02110:  DATA 53,4D
02112:  DATA 46,20
02114:  DATA 52,65
02116:  DATA 61,64
02118:  DATA 20,46
0211A:  DATA 6F,72
0211C:  DATA 63,65
0211E:  DATA 0D,0A
02120:  DATA 00,00
02122:  DATA 53,74
02124:  DATA 61,72
02126:  DATA 74,20
02128:  DATA 53,4D
0212A:  DATA 46,20
0212C:  DATA 45,72
0212E:  DATA 61,73
02130:  DATA 65,20
02132:  DATA 41,6C
02134:  DATA 6C,0D
02136:  DATA 0A,00
02138:  DATA 45,6E
0213A:  DATA 64,20
0213C:  DATA 53,4D
0213E:  DATA 46,20
02140:  DATA 45,72
02142:  DATA 61,73
02144:  DATA 65,20
02146:  DATA 41,6C
02148:  DATA 6C,0D
0214A:  DATA 0A,00
0214C:  DATA 53,74
0214E:  DATA 61,72
02150:  DATA 74,20
02152:  DATA 53,4D
02154:  DATA 46,20
02156:  DATA 52,65
02158:  DATA 73,65
0215A:  DATA 74,0D
0215C:  DATA 0A,00
0215E:  DATA 45,6E
02160:  DATA 64,20
02162:  DATA 53,4D
02164:  DATA 46,20
02166:  DATA 52,65
02168:  DATA 73,65
0216A:  DATA 74,0D
0216C:  DATA 0A,00
0216E:  DATA 0D,0A
02170:  DATA 0D,0A
02172:  DATA 0D,0A
02174:  DATA 3D,3D
02176:  DATA 3D,3D
02178:  DATA 3D,3D
0217A:  DATA 3D,3D
0217C:  DATA 3D,3D
0217E:  DATA 3D,3D
02180:  DATA 3D,3D
02182:  DATA 3D,3D
02184:  DATA 3D,3D
02186:  DATA 3D,3D
02188:  DATA 3D,3D
0218A:  DATA 3D,3D
0218C:  DATA 3D,3D
0218E:  DATA 3D,3D
02190:  DATA 3D,3D
02192:  DATA 3D,3D
02194:  DATA 3D,3D
02196:  DATA 3D,3D
02198:  DATA 3D,3D
0219A:  DATA 3D,3D
0219C:  DATA 3D,3D
0219E:  DATA 3D,3D
021A0:  DATA 3D,3D
021A2:  DATA 3D,3D
021A4:  DATA 3D,3D
021A6:  DATA 3D,3D
021A8:  DATA 3D,3D
021AA:  DATA 3D,3D
021AC:  DATA 3D,3D
021AE:  DATA 3D,3D
021B0:  DATA 0D,0A
021B2:  DATA 00,00
021B4:  DATA 54,68
021B6:  DATA 69,73
021B8:  DATA 20,69
021BA:  DATA 73,20
021BC:  DATA 4D,4F
021BE:  DATA 4D,49
021C0:  DATA 4A,49
021C2:  DATA 20,43
021C4:  DATA 49,47
021C6:  DATA 53,20
021C8:  DATA 50,49
021CA:  DATA 43,20
021CC:  DATA 42,42
021CE:  DATA 4D,20
021D0:  DATA 66,6F
021D2:  DATA 72,20
021D4:  DATA 4D,49
021D6:  DATA 53,37
021D8:  DATA 5F,42
021DA:  DATA 42,4D
021DC:  DATA 36,2E
021DE:  DATA 0D,0A
021E0:  DATA 00,00
021E2:  DATA 4C,61
021E4:  DATA 73,74
021E6:  DATA 20,75
021E8:  DATA 70,64
021EA:  DATA 61,74
021EC:  DATA 65,64
021EE:  DATA 20,6F
021F0:  DATA 6E,20
021F2:  DATA 25,73
021F4:  DATA 20,25
021F6:  DATA 73,2C
021F8:  DATA 20,62
021FA:  DATA 79,20
021FC:  DATA 49,6E
021FE:  DATA 6F,75
02200:  DATA 65,2E
02202:  DATA 0D,0A
02204:  DATA 0D,0A
02206:  DATA 00,00
02208:  DATA 32,33
0220A:  DATA 2D,4F
0220C:  DATA 63,74
0220E:  DATA 2D,32
02210:  DATA 35,00
02212:  DATA 31,32
02214:  DATA 3A,32
02216:  DATA 37,3A
02218:  DATA 30,33
0221A:  DATA 00,00
0221C:  DATA 5F,5F
0221E:  DATA 5F,5F
02220:  DATA 43,49
02222:  DATA 47,53
02224:  DATA 20,50
02226:  DATA 49,43
02228:  DATA 20,53
0222A:  DATA 74,61
0222C:  DATA 72,74
0222E:  DATA 20,4F
02230:  DATA 70,65
02232:  DATA 72,61
02234:  DATA 74,69
02236:  DATA 6F,6E
02238:  DATA 5F,5F
0223A:  DATA 5F,5F
0223C:  DATA 5F,0D
0223E:  DATA 0A,0D
02240:  DATA 0A,00
02242:  DATA 77,61
02244:  DATA 69,74
02246:  DATA 69,6E
02248:  DATA 67,20
0224A:  DATA 66,6F
0224C:  DATA 72,20
0224E:  DATA 42,4F
02250:  DATA 53,53
02252:  DATA 20,50
02254:  DATA 49,43
02256:  DATA 20,63
02258:  DATA 6F,6D
0225A:  DATA 6D,61
0225C:  DATA 6E,64
0225E:  DATA 00,00
02260:  DATA 0D,0A
02262:  DATA 0D,0A
02264:  DATA 3D,3D
02266:  DATA 3D,3D
02268:  DATA 3D,3D
0226A:  DATA 0D,0A
0226C:  DATA 0D,0A
0226E:  DATA 46,69
02270:  DATA 6E,69
02272:  DATA 73,68
02274:  DATA 65,64
02276:  DATA 20,70
02278:  DATA 72,6F
0227A:  DATA 63,65
0227C:  DATA 73,73
0227E:  DATA 2E,0D
02280:  DATA 0A,00
02282:  DATA 0D,0A
02284:  DATA 77,61
02286:  DATA 69,74
02288:  DATA 69,6E
0228A:  DATA 67,20
0228C:  DATA 66,6F
0228E:  DATA 72,20
02290:  DATA 42,4F
02292:  DATA 53,53
02294:  DATA 20,50
02296:  DATA 49,43
02298:  DATA 20,63
0229A:  DATA 6F,6D
0229C:  DATA 6D,61
0229E:  DATA 6E,64
022A0:  DATA 00,00
022A2:  DATA 45,6E
022A4:  DATA 64,20
022A6:  DATA 6D,61
022A8:  DATA 69,6E
022AA:  DATA 0D,0A
022AC:  DATA 00,00
*
022DC:  TBLRD*+
022DE:  MOVF   FF5,F
022E0:  BTFSC  FD8.2
022E2:  GOTO   2310
022E6:  MOVFF  FF6,9C2
022EA:  MOVFF  FF7,9C3
022EE:  MOVFF  FF8,9C4
022F2:  MOVF   FF5,W
022F4:  BTFSS  FA6.6
022F6:  GOTO   22F4
022FA:  MOVLB  E
022FC:  MOVWF  xF9
022FE:  MOVFF  9C2,FF6
02302:  MOVFF  9C3,FF7
02306:  MOVFF  9C4,FF8
0230A:  MOVLB  0
0230C:  GOTO   22DC
02310:  RETURN 0
02312:  TBLRD*+
02314:  MOVFF  FF6,9C3
02318:  MOVFF  FF7,9C4
0231C:  MOVFF  FF8,9C5
02320:  MOVF   FF5,W
02322:  BTFSS  FA6.6
02324:  GOTO   2322
02328:  MOVLB  E
0232A:  MOVWF  xF9
0232C:  MOVFF  9C3,FF6
02330:  MOVFF  9C4,FF7
02334:  MOVFF  9C5,FF8
02338:  MOVLB  9
0233A:  DECFSZ xC2,F
0233C:  BRA    2342
0233E:  BRA    2348
02340:  MOVLB  0
02342:  MOVLB  0
02344:  GOTO   2312
02348:  MOVLB  0
0234A:  RETURN 0
0234C:  TSTFSZ 01
0234E:  GOTO   235C
02352:  TSTFSZ 02
02354:  GOTO   235E
02358:  GOTO   236E
0235C:  INCF   02,F
0235E:  MOVFF  00,FEE
02362:  DECFSZ 01,F
02364:  GOTO   235E
02368:  DECFSZ 02,F
0236A:  GOTO   235E
0236E:  RETURN 0
*
02542:  MOVLB  9
02544:  BTFSS  xE9.7
02546:  BRA    254E
02548:  MOVLB  0
0254A:  GOTO   2584
0254E:  MOVLW  0F
02550:  MOVWF  00
02552:  SWAPF  xE8,W
02554:  ANDWF  00,F
02556:  MOVLW  0A
02558:  SUBWF  00,W
0255A:  BTFSS  FD8.0
0255C:  BRA    2564
0255E:  MOVLB  0
02560:  GOTO   256E
02564:  MOVLW  30
02566:  ADDWF  00,F
02568:  MOVLB  0
0256A:  GOTO   2576
0256E:  MOVLB  9
02570:  MOVF   xE9,W
02572:  ADDWF  00,F
02574:  MOVLB  0
02576:  MOVF   00,W
02578:  BTFSS  FA6.6
0257A:  GOTO   2578
0257E:  MOVLB  E
02580:  MOVWF  xF9
02582:  MOVLB  0
02584:  MOVLW  0F
02586:  MOVLB  9
02588:  ANDWF  xE8,F
0258A:  MOVLW  0A
0258C:  SUBWF  xE8,W
0258E:  BTFSS  FD8.0
02590:  BRA    2598
02592:  MOVLB  0
02594:  GOTO   25A0
02598:  MOVLW  30
0259A:  MOVLB  0
0259C:  GOTO   25A8
025A0:  MOVLB  9
025A2:  BCF    xE9.7
025A4:  MOVF   xE9,W
025A6:  MOVLB  0
025A8:  MOVLB  9
025AA:  ADDWF  xE8,F
025AC:  MOVF   xE8,W
025AE:  MOVLB  0
025B0:  BTFSS  FA6.6
025B2:  GOTO   25B0
025B6:  MOVLB  E
025B8:  MOVWF  xF9
025BA:  MOVLB  0
025BC:  RETURN 0
*
02ABA:  MOVLB  B
02ABC:  MOVF   x08,W
02ABE:  ANDLW  07
02AC0:  MOVWF  00
02AC2:  RRCF   x08,W
02AC4:  MOVWF  01
02AC6:  RRCF   01,F
02AC8:  RRCF   01,F
02ACA:  MOVLW  1F
02ACC:  ANDWF  01,F
02ACE:  MOVF   01,W
02AD0:  ADDWF  x0A,W
02AD2:  MOVWF  FE9
02AD4:  MOVLW  00
02AD6:  ADDWFC x0B,W
02AD8:  MOVWF  FEA
02ADA:  CLRF   01
02ADC:  INCF   01,F
02ADE:  INCF   00,F
02AE0:  MOVLB  0
02AE2:  GOTO   2AE8
02AE6:  RLCF   01,F
02AE8:  DECFSZ 00,F
02AEA:  GOTO   2AE6
02AEE:  MOVLB  B
02AF0:  MOVF   x09,F
02AF2:  BTFSS  FD8.2
02AF4:  BRA    2AFC
02AF6:  MOVLB  0
02AF8:  GOTO   2B06
02AFC:  MOVF   01,W
02AFE:  IORWF  FEF,F
02B00:  MOVLB  0
02B02:  GOTO   2B0C
02B06:  COMF   01,F
02B08:  MOVF   01,W
02B0A:  ANDWF  FEF,F
02B0C:  RETURN 0
*
061F8:  BTFSC  FD8.1
061FA:  GOTO   6206
061FE:  MOVLW  02
06200:  MOVWF  FEA
06202:  MOVLW  1A
06204:  MOVWF  FE9
06206:  CLRF   00
06208:  CLRF   01
0620A:  CLRF   02
0620C:  CLRF   03
0620E:  MOVLB  2
06210:  CLRF   x1A
06212:  CLRF   x1B
06214:  CLRF   x1C
06216:  CLRF   x1D
06218:  MOVF   x19,W
0621A:  IORWF  x18,W
0621C:  IORWF  x17,W
0621E:  IORWF  x16,W
06220:  BTFSS  FD8.2
06222:  BRA    622A
06224:  MOVLB  0
06226:  GOTO   62BA
0622A:  MOVLB  0
0622C:  MOVLW  20
0622E:  MOVLB  2
06230:  MOVWF  x1E
06232:  MOVLB  0
06234:  BCF    FD8.0
06236:  MOVLB  2
06238:  RLCF   x12,F
0623A:  RLCF   x13,F
0623C:  RLCF   x14,F
0623E:  RLCF   x15,F
06240:  RLCF   x1A,F
06242:  RLCF   x1B,F
06244:  RLCF   x1C,F
06246:  RLCF   x1D,F
06248:  MOVF   x19,W
0624A:  SUBWF  x1D,W
0624C:  BTFSC  FD8.2
0624E:  BRA    6256
06250:  MOVLB  0
06252:  GOTO   6278
06256:  MOVF   x18,W
06258:  SUBWF  x1C,W
0625A:  BTFSC  FD8.2
0625C:  BRA    6264
0625E:  MOVLB  0
06260:  GOTO   6278
06264:  MOVF   x17,W
06266:  SUBWF  x1B,W
06268:  BTFSC  FD8.2
0626A:  BRA    6272
0626C:  MOVLB  0
0626E:  GOTO   6278
06272:  MOVF   x16,W
06274:  SUBWF  x1A,W
06276:  MOVLB  0
06278:  BTFSS  FD8.0
0627A:  GOTO   62A0
0627E:  MOVLB  2
06280:  MOVF   x16,W
06282:  SUBWF  x1A,F
06284:  MOVF   x17,W
06286:  BTFSS  FD8.0
06288:  INCFSZ x17,W
0628A:  SUBWF  x1B,F
0628C:  MOVF   x18,W
0628E:  BTFSS  FD8.0
06290:  INCFSZ x18,W
06292:  SUBWF  x1C,F
06294:  MOVF   x19,W
06296:  BTFSS  FD8.0
06298:  INCFSZ x19,W
0629A:  SUBWF  x1D,F
0629C:  BSF    FD8.0
0629E:  MOVLB  0
062A0:  RLCF   00,F
062A2:  RLCF   01,F
062A4:  RLCF   02,F
062A6:  RLCF   03,F
062A8:  MOVLB  2
062AA:  DECFSZ x1E,F
062AC:  BRA    62B2
062AE:  BRA    62B8
062B0:  MOVLB  0
062B2:  MOVLB  0
062B4:  GOTO   6234
062B8:  MOVLB  0
062BA:  MOVFF  21A,FEF
062BE:  MOVFF  21B,FEC
062C2:  MOVFF  21C,FEC
062C6:  MOVFF  21D,FEC
062CA:  MOVF   FED,F
062CC:  MOVF   FED,F
062CE:  MOVF   FED,F
062D0:  RETURN 0
062D2:  MOVF   FE9,W
062D4:  MOVLB  2
062D6:  MOVWF  x0A
062D8:  MOVLW  3B
062DA:  MOVWF  x11
062DC:  MOVLW  9A
062DE:  MOVWF  x10
062E0:  MOVLW  CA
062E2:  MOVWF  x0F
062E4:  CLRF   x0E
062E6:  MOVLW  0A
062E8:  MOVWF  x0C
062EA:  MOVLB  0
062EC:  BSF    FD8.1
062EE:  MOVLW  02
062F0:  MOVWF  FEA
062F2:  MOVLW  06
062F4:  MOVWF  FE9
062F6:  MOVFF  209,215
062FA:  MOVFF  208,214
062FE:  MOVFF  207,213
06302:  MOVFF  206,212
06306:  MOVFF  211,219
0630A:  MOVFF  210,218
0630E:  MOVFF  20F,217
06312:  MOVFF  20E,216
06316:  CALL   61F8
0631A:  MOVF   01,W
0631C:  MOVF   00,F
0631E:  BTFSS  FD8.2
06320:  GOTO   6378
06324:  MOVLB  2
06326:  MOVF   x0C,W
06328:  XORLW  01
0632A:  BTFSS  FD8.2
0632C:  BRA    6334
0632E:  MOVLB  0
06330:  GOTO   6378
06334:  MOVF   x0A,W
06336:  BTFSS  FD8.2
06338:  BRA    6340
0633A:  MOVLB  0
0633C:  GOTO   637E
06340:  ANDLW  0F
06342:  SUBWF  x0C,W
06344:  BTFSS  FD8.2
06346:  BRA    634E
06348:  MOVLB  0
0634A:  GOTO   635A
0634E:  BTFSS  FD8.0
06350:  BRA    6358
06352:  MOVLB  0
06354:  GOTO   6390
06358:  MOVLB  0
0635A:  MOVLB  2
0635C:  BTFSS  x0A.7
0635E:  BRA    6366
06360:  MOVLB  0
06362:  GOTO   6390
06366:  BTFSS  x0A.6
06368:  BRA    6370
0636A:  MOVLB  0
0636C:  GOTO   637E
06370:  MOVLW  20
06372:  MOVLB  0
06374:  GOTO   6380
06378:  MOVLB  2
0637A:  CLRF   x0A
0637C:  MOVLB  0
0637E:  MOVLW  30
06380:  ADDWF  00,F
06382:  MOVF   00,W
06384:  BTFSS  FA6.6
06386:  GOTO   6384
0638A:  MOVLB  E
0638C:  MOVWF  xF9
0638E:  MOVLB  0
06390:  BCF    FD8.1
06392:  MOVFF  211,215
06396:  MOVFF  210,214
0639A:  MOVFF  20F,213
0639E:  MOVFF  20E,212
063A2:  MOVLB  2
063A4:  CLRF   x19
063A6:  CLRF   x18
063A8:  CLRF   x17
063AA:  MOVLW  0A
063AC:  MOVWF  x16
063AE:  MOVLB  0
063B0:  CALL   61F8
063B4:  MOVFF  03,211
063B8:  MOVFF  02,210
063BC:  MOVFF  01,20F
063C0:  MOVFF  00,20E
063C4:  MOVLB  2
063C6:  DECFSZ x0C,F
063C8:  BRA    63CE
063CA:  BRA    63D4
063CC:  MOVLB  0
063CE:  MOVLB  0
063D0:  GOTO   62EC
063D4:  MOVLB  0
063D6:  RETURN 0
*
08240:  MOVLB  A
08242:  MOVF   x51,W
08244:  MULWF  x53
08246:  MOVFF  FF3,01
0824A:  MOVFF  FF4,00
0824E:  MULWF  x54
08250:  MOVF   FF3,W
08252:  ADDWF  00,F
08254:  MOVF   x52,W
08256:  MULWF  x53
08258:  MOVF   FF3,W
0825A:  ADDWFC 00,W
0825C:  MOVWF  02
0825E:  MOVLB  0
08260:  RETURN 0
*
0836A:  MOVLW  8E
0836C:  MOVWF  00
0836E:  MOVFF  1F4,01
08372:  MOVFF  1F3,02
08376:  CLRF   03
08378:  MOVF   01,F
0837A:  BTFSS  FD8.2
0837C:  GOTO   8398
08380:  MOVFF  02,01
08384:  CLRF   02
08386:  MOVLW  08
08388:  SUBWF  00,F
0838A:  MOVF   01,F
0838C:  BTFSS  FD8.2
0838E:  GOTO   8398
08392:  CLRF   00
08394:  GOTO   83AC
08398:  BCF    FD8.0
0839A:  BTFSC  01.7
0839C:  GOTO   83AA
083A0:  RLCF   02,F
083A2:  RLCF   01,F
083A4:  DECF   00,F
083A6:  GOTO   8398
083AA:  BCF    01.7
083AC:  GOTO   8D5C (RETURN)
083B0:  MOVLB  1
083B2:  MOVF   xF7,W
083B4:  BTFSS  FD8.2
083B6:  BRA    83BE
083B8:  MOVLB  0
083BA:  GOTO   8502
083BE:  MOVWF  00
083C0:  MOVF   xFB,W
083C2:  BTFSS  FD8.2
083C4:  BRA    83CC
083C6:  MOVLB  0
083C8:  GOTO   8502
083CC:  ADDWF  00,F
083CE:  BTFSC  FD8.0
083D0:  BRA    83D8
083D2:  MOVLB  0
083D4:  GOTO   83E8
083D8:  MOVLB  0
083DA:  MOVLW  81
083DC:  ADDWF  00,F
083DE:  BTFSC  FD8.0
083E0:  GOTO   8502
083E4:  GOTO   83F8
083E8:  MOVLW  7F
083EA:  SUBWF  00,F
083EC:  BTFSS  FD8.0
083EE:  GOTO   8502
083F2:  BTFSC  FD8.2
083F4:  GOTO   8502
083F8:  MOVFF  1F8,1FF
083FC:  MOVLB  1
083FE:  MOVF   xFC,W
08400:  XORWF  xFF,F
08402:  BSF    xF8.7
08404:  BSF    xFC.7
08406:  MOVF   xFA,W
08408:  MULWF  xFE
0840A:  MOVFF  FF4,201
0840E:  MOVF   xF9,W
08410:  MULWF  xFD
08412:  MOVFF  FF4,03
08416:  MOVFF  FF3,200
0841A:  MULWF  xFE
0841C:  MOVF   FF3,W
0841E:  MOVLB  2
08420:  ADDWF  x01,F
08422:  MOVF   FF4,W
08424:  ADDWFC x00,F
08426:  MOVLW  00
08428:  ADDWFC 03,F
0842A:  MOVLB  1
0842C:  MOVF   xFA,W
0842E:  MULWF  xFD
08430:  MOVF   FF3,W
08432:  MOVLB  2
08434:  ADDWF  x01,F
08436:  MOVF   FF4,W
08438:  ADDWFC x00,F
0843A:  MOVLW  00
0843C:  CLRF   02
0843E:  ADDWFC 03,F
08440:  ADDWFC 02,F
08442:  MOVLB  1
08444:  MOVF   xF8,W
08446:  MULWF  xFE
08448:  MOVF   FF3,W
0844A:  MOVLB  2
0844C:  ADDWF  x00,F
0844E:  MOVF   FF4,W
08450:  ADDWFC 03,F
08452:  MOVLW  00
08454:  ADDWFC 02,F
08456:  MOVLB  1
08458:  MOVF   xF8,W
0845A:  MULWF  xFD
0845C:  MOVF   FF3,W
0845E:  ADDWF  03,F
08460:  MOVF   FF4,W
08462:  ADDWFC 02,F
08464:  MOVLW  00
08466:  CLRF   01
08468:  ADDWFC 01,F
0846A:  MOVF   xFA,W
0846C:  MULWF  xFC
0846E:  MOVF   FF3,W
08470:  MOVLB  2
08472:  ADDWF  x00,F
08474:  MOVF   FF4,W
08476:  ADDWFC 03,F
08478:  MOVLW  00
0847A:  ADDWFC 02,F
0847C:  ADDWFC 01,F
0847E:  MOVLB  1
08480:  MOVF   xF9,W
08482:  MULWF  xFC
08484:  MOVF   FF3,W
08486:  ADDWF  03,F
08488:  MOVF   FF4,W
0848A:  ADDWFC 02,F
0848C:  MOVLW  00
0848E:  ADDWFC 01,F
08490:  MOVF   xF8,W
08492:  MULWF  xFC
08494:  MOVF   FF3,W
08496:  ADDWF  02,F
08498:  MOVF   FF4,W
0849A:  ADDWFC 01,F
0849C:  INCF   00,F
0849E:  BTFSS  01.7
084A0:  BRA    84A8
084A2:  MOVLB  0
084A4:  GOTO   84B6
084A8:  MOVLB  2
084AA:  RLCF   x00,F
084AC:  RLCF   03,F
084AE:  RLCF   02,F
084B0:  RLCF   01,F
084B2:  DECF   00,F
084B4:  MOVLB  0
084B6:  MOVLW  00
084B8:  MOVLB  2
084BA:  BTFSC  x00.7
084BC:  BRA    84C4
084BE:  MOVLB  0
084C0:  GOTO   84F2
084C4:  INCF   03,F
084C6:  ADDWFC 02,F
084C8:  ADDWFC 01,F
084CA:  MOVF   01,W
084CC:  BTFSC  FD8.2
084CE:  BRA    84D6
084D0:  MOVLB  0
084D2:  GOTO   84F2
084D6:  MOVF   02,W
084D8:  BTFSC  FD8.2
084DA:  BRA    84E2
084DC:  MOVLB  0
084DE:  GOTO   84F2
084E2:  MOVF   03,W
084E4:  BTFSC  FD8.2
084E6:  BRA    84EE
084E8:  MOVLB  0
084EA:  GOTO   84F2
084EE:  INCF   00,F
084F0:  MOVLB  0
084F2:  MOVLB  1
084F4:  BTFSC  xFF.7
084F6:  BSF    01.7
084F8:  BTFSS  xFF.7
084FA:  BCF    01.7
084FC:  MOVLB  0
084FE:  GOTO   850A
08502:  CLRF   00
08504:  CLRF   01
08506:  CLRF   02
08508:  CLRF   03
0850A:  GOTO   8D92 (RETURN)
0850E:  MOVLB  1
08510:  MOVF   xF7,W
08512:  BTFSS  FD8.2
08514:  BRA    851C
08516:  MOVLB  0
08518:  GOTO   87F2
0851C:  MOVLB  2
0851E:  MOVWF  x03
08520:  MOVLB  1
08522:  MOVF   xFB,W
08524:  BTFSS  FD8.2
08526:  BRA    852E
08528:  MOVLB  0
0852A:  GOTO   87F2
0852E:  MOVLB  2
08530:  SUBWF  x03,F
08532:  BTFSS  FD8.0
08534:  BRA    853C
08536:  MOVLB  0
08538:  GOTO   8542
0853C:  MOVLB  0
0853E:  GOTO   8558
08542:  MOVLW  7F
08544:  MOVLB  2
08546:  ADDWF  x03,F
08548:  BTFSS  FD8.0
0854A:  BRA    8552
0854C:  MOVLB  0
0854E:  GOTO   87F2
08552:  MOVLB  0
08554:  GOTO   8574
08558:  MOVLW  81
0855A:  MOVLB  2
0855C:  SUBWF  x03,F
0855E:  BTFSC  FD8.0
08560:  BRA    8568
08562:  MOVLB  0
08564:  GOTO   87F2
08568:  BTFSS  FD8.2
0856A:  BRA    8572
0856C:  MOVLB  0
0856E:  GOTO   87F2
08572:  MOVLB  0
08574:  MOVFF  203,00
08578:  CLRF   01
0857A:  CLRF   02
0857C:  CLRF   03
0857E:  MOVLB  2
08580:  CLRF   x02
08582:  MOVFF  1F8,201
08586:  BSF    x01.7
08588:  MOVFF  1F9,200
0858C:  MOVFF  1FA,1FF
08590:  MOVLW  19
08592:  MOVWF  x03
08594:  MOVLB  0
08596:  MOVLB  1
08598:  MOVF   xFE,W
0859A:  SUBWF  xFF,F
0859C:  BTFSS  FD8.0
0859E:  BRA    85A6
085A0:  MOVLB  0
085A2:  GOTO   85E0
085A6:  MOVLW  01
085A8:  MOVLB  2
085AA:  SUBWF  x00,F
085AC:  BTFSS  FD8.0
085AE:  BRA    85B6
085B0:  MOVLB  0
085B2:  GOTO   85E0
085B6:  SUBWF  x01,F
085B8:  BTFSS  FD8.0
085BA:  BRA    85C2
085BC:  MOVLB  0
085BE:  GOTO   85E0
085C2:  SUBWF  x02,F
085C4:  BTFSS  FD8.0
085C6:  BRA    85CE
085C8:  MOVLB  0
085CA:  GOTO   85E0
085CE:  INCF   x02,F
085D0:  INCF   x01,F
085D2:  INCF   x00,F
085D4:  MOVLB  1
085D6:  MOVF   xFE,W
085D8:  ADDWF  xFF,F
085DA:  MOVLB  0
085DC:  GOTO   86A6
085E0:  MOVLB  1
085E2:  MOVF   xFD,W
085E4:  MOVLB  2
085E6:  SUBWF  x00,F
085E8:  BTFSS  FD8.0
085EA:  BRA    85F2
085EC:  MOVLB  0
085EE:  GOTO   8650
085F2:  MOVLW  01
085F4:  SUBWF  x01,F
085F6:  BTFSS  FD8.0
085F8:  BRA    8600
085FA:  MOVLB  0
085FC:  GOTO   8650
08600:  SUBWF  x02,F
08602:  BTFSS  FD8.0
08604:  BRA    860C
08606:  MOVLB  0
08608:  GOTO   8650
0860C:  MOVLB  0
0860E:  MOVLB  2
08610:  INCF   x02,F
08612:  INCF   x01,F
08614:  MOVLB  1
08616:  MOVF   xFD,W
08618:  MOVLB  2
0861A:  ADDWF  x00,F
0861C:  MOVLB  0
0861E:  MOVLB  1
08620:  MOVF   xFE,W
08622:  ADDWF  xFF,F
08624:  BTFSC  FD8.0
08626:  BRA    862E
08628:  MOVLB  0
0862A:  GOTO   86A6
0862E:  MOVLB  2
08630:  INCF   x00,F
08632:  BTFSC  FD8.2
08634:  BRA    863C
08636:  MOVLB  0
08638:  GOTO   86A6
0863C:  INCF   x01,F
0863E:  BTFSC  FD8.2
08640:  BRA    8648
08642:  MOVLB  0
08644:  GOTO   86A6
08648:  INCF   x02,F
0864A:  MOVLB  0
0864C:  GOTO   86A6
08650:  MOVLB  1
08652:  MOVF   xFC,W
08654:  IORLW  80
08656:  MOVLB  2
08658:  SUBWF  x01,F
0865A:  BTFSS  FD8.0
0865C:  BRA    8664
0865E:  MOVLB  0
08660:  GOTO   86A4
08664:  MOVLW  01
08666:  SUBWF  x02,F
08668:  BTFSS  FD8.0
0866A:  BRA    8672
0866C:  MOVLB  0
0866E:  GOTO   86A4
08672:  INCF   x02,F
08674:  MOVLB  1
08676:  MOVF   xFC,W
08678:  IORLW  80
0867A:  MOVLB  2
0867C:  ADDWF  x01,F
0867E:  MOVLB  1
08680:  MOVF   xFD,W
08682:  MOVLB  2
08684:  ADDWF  x00,F
08686:  BTFSC  FD8.0
08688:  BRA    8690
0868A:  MOVLB  0
0868C:  GOTO   861E
08690:  INCF   x01,F
08692:  BTFSC  FD8.2
08694:  BRA    869C
08696:  MOVLB  0
08698:  GOTO   861E
0869C:  INCF   x02,F
0869E:  MOVLB  0
086A0:  GOTO   861E
086A4:  BSF    03.0
086A6:  MOVLB  2
086A8:  DECFSZ x03,F
086AA:  BRA    86B0
086AC:  BRA    86B6
086AE:  MOVLB  0
086B0:  MOVLB  0
086B2:  GOTO   86BC
086B6:  MOVLB  0
086B8:  GOTO   86DA
086BC:  BCF    FD8.0
086BE:  MOVLB  1
086C0:  RLCF   xFF,F
086C2:  MOVLB  2
086C4:  RLCF   x00,F
086C6:  RLCF   x01,F
086C8:  RLCF   x02,F
086CA:  BCF    FD8.0
086CC:  RLCF   03,F
086CE:  RLCF   02,F
086D0:  RLCF   01,F
086D2:  RLCF   x04,F
086D4:  MOVLB  0
086D6:  GOTO   8596
086DA:  MOVLB  2
086DC:  BTFSC  x04.0
086DE:  BRA    86E6
086E0:  MOVLB  0
086E2:  GOTO   86F6
086E6:  BCF    FD8.0
086E8:  RRCF   01,F
086EA:  RRCF   02,F
086EC:  RRCF   03,F
086EE:  RRCF   x04,F
086F0:  MOVLB  0
086F2:  GOTO   86FE
086F6:  DECF   00,F
086F8:  BTFSC  FD8.2
086FA:  GOTO   87F2
086FE:  MOVLB  2
08700:  BTFSS  x04.7
08702:  BRA    870A
08704:  MOVLB  0
08706:  GOTO   87A8
0870A:  BCF    FD8.0
0870C:  MOVLB  1
0870E:  RLCF   xFF,F
08710:  MOVLB  2
08712:  RLCF   x00,F
08714:  RLCF   x01,F
08716:  RLCF   x02,F
08718:  MOVLB  0
0871A:  MOVLB  1
0871C:  MOVF   xFE,W
0871E:  SUBWF  xFF,F
08720:  BTFSS  FD8.0
08722:  BRA    872A
08724:  MOVLB  0
08726:  GOTO   8754
0872A:  MOVLW  01
0872C:  MOVLB  2
0872E:  SUBWF  x00,F
08730:  BTFSS  FD8.0
08732:  BRA    873A
08734:  MOVLB  0
08736:  GOTO   8754
0873A:  SUBWF  x01,F
0873C:  BTFSS  FD8.0
0873E:  BRA    8746
08740:  MOVLB  0
08742:  GOTO   8754
08746:  SUBWF  x02,F
08748:  BTFSC  FD8.0
0874A:  BRA    8752
0874C:  MOVLB  0
0874E:  GOTO   87CE
08752:  MOVLB  0
08754:  MOVLB  1
08756:  MOVF   xFD,W
08758:  MOVLB  2
0875A:  SUBWF  x00,F
0875C:  BTFSS  FD8.0
0875E:  BRA    8766
08760:  MOVLB  0
08762:  GOTO   8782
08766:  MOVLW  01
08768:  SUBWF  x01,F
0876A:  BTFSS  FD8.0
0876C:  BRA    8774
0876E:  MOVLB  0
08770:  GOTO   8782
08774:  SUBWF  x02,F
08776:  BTFSC  FD8.0
08778:  BRA    8780
0877A:  MOVLB  0
0877C:  GOTO   87CE
08780:  MOVLB  0
08782:  MOVLB  1
08784:  MOVF   xFC,W
08786:  IORLW  80
08788:  MOVLB  0
0878A:  MOVLB  2
0878C:  SUBWF  x01,F
0878E:  BTFSS  FD8.0
08790:  BRA    8798
08792:  MOVLB  0
08794:  GOTO   87A8
08798:  MOVLW  01
0879A:  SUBWF  x02,F
0879C:  BTFSC  FD8.0
0879E:  BRA    87A6
087A0:  MOVLB  0
087A2:  GOTO   87CE
087A6:  MOVLB  0
087A8:  INCF   03,F
087AA:  BTFSS  FD8.2
087AC:  GOTO   87CE
087B0:  INCF   02,F
087B2:  BTFSS  FD8.2
087B4:  GOTO   87CE
087B8:  INCF   01,F
087BA:  BTFSS  FD8.2
087BC:  GOTO   87CE
087C0:  INCF   00,F
087C2:  BTFSC  FD8.2
087C4:  GOTO   87F2
087C8:  RRCF   01,F
087CA:  RRCF   02,F
087CC:  RRCF   03,F
087CE:  MOVFF  1F8,203
087D2:  MOVLB  1
087D4:  MOVF   xFC,W
087D6:  MOVLB  2
087D8:  XORWF  x03,F
087DA:  BTFSC  x03.7
087DC:  BRA    87E4
087DE:  MOVLB  0
087E0:  GOTO   87EC
087E4:  BSF    01.7
087E6:  MOVLB  0
087E8:  GOTO   87FA
087EC:  BCF    01.7
087EE:  GOTO   87FA
087F2:  CLRF   00
087F4:  CLRF   01
087F6:  CLRF   02
087F8:  CLRF   03
087FA:  RETURN 0
087FC:  MOVLW  80
087FE:  BTFSS  FD8.1
08800:  BRA    8808
08802:  MOVLB  1
08804:  XORWF  xF8,F
08806:  MOVLB  0
08808:  MOVLB  1
0880A:  CLRF   xFD
0880C:  CLRF   xFE
0880E:  MOVFF  1F4,1FC
08812:  MOVF   xF8,W
08814:  XORWF  xFC,F
08816:  MOVF   xF3,W
08818:  BTFSS  FD8.2
0881A:  BRA    8822
0881C:  MOVLB  0
0881E:  GOTO   8BD0
08822:  MOVWF  xFB
08824:  MOVFF  1FB,00
08828:  MOVF   xF7,W
0882A:  BTFSS  FD8.2
0882C:  BRA    8834
0882E:  MOVLB  0
08830:  GOTO   8BE4
08834:  SUBWF  xFB,F
08836:  BTFSS  FD8.2
08838:  BRA    8840
0883A:  MOVLB  0
0883C:  GOTO   8A4A
08840:  BTFSS  FD8.0
08842:  BRA    884A
08844:  MOVLB  0
08846:  GOTO   8850
0884A:  MOVLB  0
0884C:  GOTO   8946
08850:  MOVFF  1F8,201
08854:  MOVLB  2
08856:  BSF    x01.7
08858:  MOVFF  1F9,200
0885C:  MOVFF  1FA,1FF
08860:  MOVLB  0
08862:  MOVLB  1
08864:  CLRF   xFE
08866:  BCF    FD8.0
08868:  MOVLB  2
0886A:  RRCF   x01,F
0886C:  RRCF   x00,F
0886E:  MOVLB  1
08870:  RRCF   xFF,F
08872:  RRCF   xFE,F
08874:  DECFSZ xFB,F
08876:  BRA    887C
08878:  BRA    8882
0887A:  MOVLB  0
0887C:  MOVLB  0
0887E:  GOTO   8862
08882:  MOVLB  0
08884:  MOVLB  1
08886:  BTFSC  xFC.7
08888:  BRA    8890
0888A:  MOVLB  0
0888C:  GOTO   889E
08890:  BSF    xFD.0
08892:  MOVLB  0
08894:  GOTO   8C10
08898:  MOVLB  1
0889A:  BCF    xFD.0
0889C:  MOVLB  0
0889E:  MOVLB  1
088A0:  BCF    xFB.0
088A2:  BSF    xFD.4
088A4:  MOVLW  01
088A6:  MOVWF  FEA
088A8:  MOVLW  F6
088AA:  MOVWF  FE9
088AC:  MOVLB  0
088AE:  GOTO   8C70
088B2:  MOVLB  1
088B4:  BCF    xFD.4
088B6:  BTFSS  xFC.7
088B8:  BRA    88C0
088BA:  MOVLB  0
088BC:  GOTO   88E8
088C0:  BTFSC  xFB.0
088C2:  BRA    88CA
088C4:  MOVLB  0
088C6:  GOTO   8912
088CA:  MOVLB  2
088CC:  RRCF   x01,F
088CE:  RRCF   x00,F
088D0:  MOVLB  1
088D2:  RRCF   xFF,F
088D4:  RRCF   xFE,F
088D6:  INCF   00,F
088D8:  BTFSS  FD8.2
088DA:  BRA    88E2
088DC:  MOVLB  0
088DE:  GOTO   8C04
088E2:  MOVLB  0
088E4:  GOTO   8912
088E8:  MOVLB  2
088EA:  BTFSS  x01.7
088EC:  BRA    88F4
088EE:  MOVLB  0
088F0:  GOTO   8922
088F4:  BCF    FD8.0
088F6:  MOVLB  1
088F8:  RLCF   xFE,F
088FA:  RLCF   xFF,F
088FC:  MOVLB  2
088FE:  RLCF   x00,F
08900:  RLCF   x01,F
08902:  DECFSZ 00,F
08904:  BRA    890C
08906:  MOVLB  0
08908:  GOTO   8C04
0890C:  MOVLB  0
0890E:  GOTO   88E8
08912:  MOVLB  1
08914:  BSF    xFD.6
08916:  MOVLB  0
08918:  GOTO   8AC6
0891C:  MOVLB  1
0891E:  BCF    xFD.6
08920:  MOVLB  0
08922:  MOVFF  1F4,1FC
08926:  MOVLB  1
08928:  BTFSC  xFC.7
0892A:  BRA    8932
0892C:  MOVLB  0
0892E:  GOTO   893C
08932:  MOVLB  2
08934:  BSF    x01.7
08936:  MOVLB  0
08938:  GOTO   8BF4
0893C:  MOVLB  2
0893E:  BCF    x01.7
08940:  MOVLB  0
08942:  GOTO   8BF4
08946:  MOVFF  1F7,1FB
0894A:  MOVFF  1FB,00
0894E:  MOVLB  1
08950:  MOVF   xF3,W
08952:  SUBWF  xFB,F
08954:  MOVFF  1F4,201
08958:  MOVLB  2
0895A:  BSF    x01.7
0895C:  MOVFF  1F5,200
08960:  MOVFF  1F6,1FF
08964:  MOVLB  0
08966:  MOVLB  1
08968:  CLRF   xFE
0896A:  BCF    FD8.0
0896C:  MOVLB  2
0896E:  RRCF   x01,F
08970:  RRCF   x00,F
08972:  MOVLB  1
08974:  RRCF   xFF,F
08976:  RRCF   xFE,F
08978:  DECFSZ xFB,F
0897A:  BRA    8980
0897C:  BRA    8986
0897E:  MOVLB  0
08980:  MOVLB  0
08982:  GOTO   8966
08986:  MOVLB  0
08988:  MOVLB  1
0898A:  BTFSC  xFC.7
0898C:  BRA    8994
0898E:  MOVLB  0
08990:  GOTO   89A2
08994:  BSF    xFD.1
08996:  MOVLB  0
08998:  GOTO   8C10
0899C:  MOVLB  1
0899E:  BCF    xFD.1
089A0:  MOVLB  0
089A2:  MOVLB  1
089A4:  BCF    xFB.0
089A6:  BSF    xFD.5
089A8:  MOVLW  01
089AA:  MOVWF  FEA
089AC:  MOVLW  FA
089AE:  MOVWF  FE9
089B0:  MOVLB  0
089B2:  GOTO   8C70
089B6:  MOVLB  1
089B8:  BCF    xFD.5
089BA:  BTFSS  xFC.7
089BC:  BRA    89C4
089BE:  MOVLB  0
089C0:  GOTO   89EC
089C4:  BTFSC  xFB.0
089C6:  BRA    89CE
089C8:  MOVLB  0
089CA:  GOTO   8A16
089CE:  MOVLB  2
089D0:  RRCF   x01,F
089D2:  RRCF   x00,F
089D4:  MOVLB  1
089D6:  RRCF   xFF,F
089D8:  RRCF   xFE,F
089DA:  INCF   00,F
089DC:  BTFSS  FD8.2
089DE:  BRA    89E6
089E0:  MOVLB  0
089E2:  GOTO   8C04
089E6:  MOVLB  0
089E8:  GOTO   8A16
089EC:  MOVLB  2
089EE:  BTFSS  x01.7
089F0:  BRA    89F8
089F2:  MOVLB  0
089F4:  GOTO   8A26
089F8:  BCF    FD8.0
089FA:  MOVLB  1
089FC:  RLCF   xFE,F
089FE:  RLCF   xFF,F
08A00:  MOVLB  2
08A02:  RLCF   x00,F
08A04:  RLCF   x01,F
08A06:  DECFSZ 00,F
08A08:  BRA    8A10
08A0A:  MOVLB  0
08A0C:  GOTO   8C04
08A10:  MOVLB  0
08A12:  GOTO   89EC
08A16:  MOVLB  1
08A18:  BSF    xFD.7
08A1A:  MOVLB  0
08A1C:  GOTO   8AC6
08A20:  MOVLB  1
08A22:  BCF    xFD.7
08A24:  MOVLB  0
08A26:  MOVFF  1F8,1FC
08A2A:  MOVLB  1
08A2C:  BTFSC  xFC.7
08A2E:  BRA    8A36
08A30:  MOVLB  0
08A32:  GOTO   8A40
08A36:  MOVLB  2
08A38:  BSF    x01.7
08A3A:  MOVLB  0
08A3C:  GOTO   8BF4
08A40:  MOVLB  2
08A42:  BCF    x01.7
08A44:  MOVLB  0
08A46:  GOTO   8BF4
08A4A:  MOVFF  1F8,201
08A4E:  MOVLB  2
08A50:  BSF    x01.7
08A52:  MOVFF  1F9,200
08A56:  MOVFF  1FA,1FF
08A5A:  MOVLB  1
08A5C:  BTFSC  xFC.7
08A5E:  BRA    8A66
08A60:  MOVLB  0
08A62:  GOTO   8A7A
08A66:  MOVLB  2
08A68:  BCF    x01.7
08A6A:  MOVLB  1
08A6C:  BSF    xFD.2
08A6E:  MOVLB  0
08A70:  GOTO   8C10
08A74:  MOVLB  1
08A76:  BCF    xFD.2
08A78:  MOVLB  0
08A7A:  MOVLB  1
08A7C:  CLRF   xFE
08A7E:  BCF    xFB.0
08A80:  MOVLW  01
08A82:  MOVWF  FEA
08A84:  MOVLW  F6
08A86:  MOVWF  FE9
08A88:  MOVLB  0
08A8A:  GOTO   8C70
08A8E:  MOVLB  1
08A90:  BTFSS  xFC.7
08A92:  BRA    8A9A
08A94:  MOVLB  0
08A96:  GOTO   8B2A
08A9A:  MOVFF  1F4,1FC
08A9E:  MOVLB  0
08AA0:  MOVLB  1
08AA2:  BTFSC  xFB.0
08AA4:  BRA    8AAC
08AA6:  MOVLB  0
08AA8:  GOTO   8AC6
08AAC:  MOVLB  2
08AAE:  RRCF   x01,F
08AB0:  RRCF   x00,F
08AB2:  MOVLB  1
08AB4:  RRCF   xFF,F
08AB6:  RRCF   xFE,F
08AB8:  INCF   00,F
08ABA:  BTFSS  FD8.2
08ABC:  BRA    8AC4
08ABE:  MOVLB  0
08AC0:  GOTO   8C04
08AC4:  MOVLB  0
08AC6:  MOVLB  1
08AC8:  BTFSC  xFE.7
08ACA:  BRA    8AD2
08ACC:  MOVLB  0
08ACE:  GOTO   8B0E
08AD2:  INCF   xFF,F
08AD4:  BTFSC  FD8.2
08AD6:  BRA    8ADE
08AD8:  MOVLB  0
08ADA:  GOTO   8B0E
08ADE:  MOVLB  2
08AE0:  INCF   x00,F
08AE2:  BTFSC  FD8.2
08AE4:  BRA    8AEC
08AE6:  MOVLB  0
08AE8:  GOTO   8B0E
08AEC:  INCF   x01,F
08AEE:  BTFSC  FD8.2
08AF0:  BRA    8AF8
08AF2:  MOVLB  0
08AF4:  GOTO   8B0E
08AF8:  RRCF   x01,F
08AFA:  RRCF   x00,F
08AFC:  MOVLB  1
08AFE:  RRCF   xFF,F
08B00:  INCF   00,F
08B02:  BTFSS  FD8.2
08B04:  BRA    8B0C
08B06:  MOVLB  0
08B08:  GOTO   8C04
08B0C:  MOVLB  0
08B0E:  MOVLB  1
08B10:  BTFSS  xFD.6
08B12:  BRA    8B1A
08B14:  MOVLB  0
08B16:  GOTO   891C
08B1A:  BTFSS  xFD.7
08B1C:  BRA    8B24
08B1E:  MOVLB  0
08B20:  GOTO   8A20
08B24:  MOVLB  0
08B26:  GOTO   8BB0
08B2A:  MOVLW  80
08B2C:  MOVLB  2
08B2E:  XORWF  x01,F
08B30:  BTFSC  x01.7
08B32:  BRA    8B3A
08B34:  MOVLB  0
08B36:  GOTO   8B48
08B3A:  MOVLB  0
08B3C:  GOTO   8C10
08B40:  MOVFF  1F8,1FC
08B44:  GOTO   8B82
08B48:  MOVFF  1F4,1FC
08B4C:  MOVLB  2
08B4E:  MOVF   x01,F
08B50:  BTFSC  FD8.2
08B52:  BRA    8B5A
08B54:  MOVLB  0
08B56:  GOTO   8B82
08B5A:  MOVLB  0
08B5C:  MOVLB  2
08B5E:  MOVF   x00,F
08B60:  BTFSC  FD8.2
08B62:  BRA    8B6A
08B64:  MOVLB  0
08B66:  GOTO   8B82
08B6A:  MOVLB  0
08B6C:  MOVLB  1
08B6E:  MOVF   xFF,F
08B70:  BTFSC  FD8.2
08B72:  BRA    8B7A
08B74:  MOVLB  0
08B76:  GOTO   8B82
08B7A:  MOVLB  0
08B7C:  CLRF   00
08B7E:  GOTO   8BF4
08B82:  MOVLB  2
08B84:  BTFSS  x01.7
08B86:  BRA    8B8E
08B88:  MOVLB  0
08B8A:  GOTO   8BB0
08B8E:  BCF    FD8.0
08B90:  MOVLB  1
08B92:  RLCF   xFE,F
08B94:  RLCF   xFF,F
08B96:  MOVLB  2
08B98:  RLCF   x00,F
08B9A:  RLCF   x01,F
08B9C:  DECFSZ 00,F
08B9E:  BRA    8BA4
08BA0:  BRA    8BAA
08BA2:  MOVLB  0
08BA4:  MOVLB  0
08BA6:  GOTO   8B82
08BAA:  MOVLB  0
08BAC:  GOTO   8C04
08BB0:  MOVLB  1
08BB2:  BTFSC  xFC.7
08BB4:  BRA    8BBC
08BB6:  MOVLB  0
08BB8:  GOTO   8BC6
08BBC:  MOVLB  2
08BBE:  BSF    x01.7
08BC0:  MOVLB  0
08BC2:  GOTO   8BF4
08BC6:  MOVLB  2
08BC8:  BCF    x01.7
08BCA:  MOVLB  0
08BCC:  GOTO   8BF4
08BD0:  MOVFF  1F7,00
08BD4:  MOVFF  1F8,201
08BD8:  MOVFF  1F9,200
08BDC:  MOVFF  1FA,1FF
08BE0:  GOTO   8BF4
08BE4:  MOVFF  1F3,00
08BE8:  MOVFF  1F4,201
08BEC:  MOVFF  1F5,200
08BF0:  MOVFF  1F6,1FF
08BF4:  MOVFF  201,01
08BF8:  MOVFF  200,02
08BFC:  MOVFF  1FF,03
08C00:  GOTO   8CF2
08C04:  CLRF   00
08C06:  CLRF   01
08C08:  CLRF   02
08C0A:  CLRF   03
08C0C:  GOTO   8CF2
08C10:  MOVLB  1
08C12:  CLRF   xFE
08C14:  COMF   xFF,F
08C16:  MOVLB  2
08C18:  COMF   x00,F
08C1A:  COMF   x01,F
08C1C:  MOVLB  1
08C1E:  COMF   xFE,F
08C20:  INCF   xFE,F
08C22:  BTFSC  FD8.2
08C24:  BRA    8C2C
08C26:  MOVLB  0
08C28:  GOTO   8C4A
08C2C:  INCF   xFF,F
08C2E:  BTFSC  FD8.2
08C30:  BRA    8C38
08C32:  MOVLB  0
08C34:  GOTO   8C4A
08C38:  MOVLB  2
08C3A:  INCF   x00,F
08C3C:  BTFSC  FD8.2
08C3E:  BRA    8C46
08C40:  MOVLB  0
08C42:  GOTO   8C4A
08C46:  INCF   x01,F
08C48:  MOVLB  0
08C4A:  MOVLB  1
08C4C:  BTFSS  xFD.0
08C4E:  BRA    8C56
08C50:  MOVLB  0
08C52:  GOTO   8898
08C56:  BTFSS  xFD.1
08C58:  BRA    8C60
08C5A:  MOVLB  0
08C5C:  GOTO   899C
08C60:  BTFSS  xFD.2
08C62:  BRA    8C6A
08C64:  MOVLB  0
08C66:  GOTO   8A74
08C6A:  MOVLB  0
08C6C:  GOTO   8B40
08C70:  MOVF   FEF,W
08C72:  MOVLB  1
08C74:  ADDWF  xFF,F
08C76:  BTFSC  FD8.0
08C78:  BRA    8C80
08C7A:  MOVLB  0
08C7C:  GOTO   8C9C
08C80:  MOVLB  2
08C82:  INCF   x00,F
08C84:  BTFSC  FD8.2
08C86:  BRA    8C8E
08C88:  MOVLB  0
08C8A:  GOTO   8C9C
08C8E:  INCF   x01,F
08C90:  BTFSS  FD8.2
08C92:  BRA    8C9A
08C94:  MOVLB  1
08C96:  BSF    xFB.0
08C98:  MOVLB  2
08C9A:  MOVLB  0
08C9C:  MOVF   FED,F
08C9E:  MOVF   FEF,W
08CA0:  MOVLB  2
08CA2:  ADDWF  x00,F
08CA4:  BTFSC  FD8.0
08CA6:  BRA    8CAE
08CA8:  MOVLB  0
08CAA:  GOTO   8CBC
08CAE:  INCF   x01,F
08CB0:  BTFSS  FD8.2
08CB2:  BRA    8CBA
08CB4:  MOVLB  1
08CB6:  BSF    xFB.0
08CB8:  MOVLB  2
08CBA:  MOVLB  0
08CBC:  MOVF   FED,F
08CBE:  MOVF   FEF,W
08CC0:  BTFSC  FEF.7
08CC2:  GOTO   8CC8
08CC6:  XORLW  80
08CC8:  MOVLB  2
08CCA:  ADDWF  x01,F
08CCC:  BTFSS  FD8.0
08CCE:  BRA    8CD6
08CD0:  MOVLB  1
08CD2:  BSF    xFB.0
08CD4:  MOVLB  2
08CD6:  MOVLB  1
08CD8:  BTFSS  xFD.4
08CDA:  BRA    8CE2
08CDC:  MOVLB  0
08CDE:  GOTO   88B2
08CE2:  BTFSS  xFD.5
08CE4:  BRA    8CEC
08CE6:  MOVLB  0
08CE8:  GOTO   89B6
08CEC:  MOVLB  0
08CEE:  GOTO   8A8E
08CF2:  GOTO   8E00 (RETURN)
08CF6:  MOVLW  8E
08CF8:  MOVWF  00
08CFA:  MOVLB  1
08CFC:  MOVF   xF3,W
08CFE:  SUBWF  00,F
08D00:  MOVFF  1F4,02
08D04:  MOVFF  1F5,01
08D08:  BSF    02.7
08D0A:  MOVF   00,F
08D0C:  BTFSS  FD8.2
08D0E:  BRA    8D16
08D10:  MOVLB  0
08D12:  GOTO   8D34
08D16:  MOVLB  0
08D18:  BCF    FD8.0
08D1A:  MOVF   02,F
08D1C:  BTFSS  FD8.2
08D1E:  GOTO   8D2A
08D22:  MOVF   01,F
08D24:  BTFSC  FD8.2
08D26:  GOTO   8D34
08D2A:  RRCF   02,F
08D2C:  RRCF   01,F
08D2E:  DECFSZ 00,F
08D30:  GOTO   8D18
08D34:  MOVLB  1
08D36:  BTFSC  xF4.7
08D38:  BRA    8D40
08D3A:  MOVLB  0
08D3C:  GOTO   8D4C
08D40:  MOVLB  0
08D42:  COMF   01,F
08D44:  COMF   02,F
08D46:  INCF   01,F
08D48:  BTFSC  FD8.2
08D4A:  INCF   02,F
08D4C:  GOTO   8E58 (RETURN)
*
08E62:  MOVFF  FEA,1F1
08E66:  MOVFF  FE9,1F0
08E6A:  MOVLB  1
08E6C:  SWAPF  xEA,W
08E6E:  IORLW  F0
08E70:  MOVWF  xEC
08E72:  ADDWF  xEC,F
08E74:  ADDLW  E2
08E76:  MOVWF  xED
08E78:  ADDLW  32
08E7A:  MOVWF  xEF
08E7C:  MOVF   xEA,W
08E7E:  ANDLW  0F
08E80:  ADDWF  xED,F
08E82:  ADDWF  xED,F
08E84:  ADDWF  xEF,F
08E86:  ADDLW  E9
08E88:  MOVWF  xEE
08E8A:  ADDWF  xEE,F
08E8C:  ADDWF  xEE,F
08E8E:  SWAPF  xE9,W
08E90:  ANDLW  0F
08E92:  ADDWF  xEE,F
08E94:  ADDWF  xEF,F
08E96:  RLCF   xEE,F
08E98:  RLCF   xEF,F
08E9A:  COMF   xEF,F
08E9C:  RLCF   xEF,F
08E9E:  MOVF   xE9,W
08EA0:  ANDLW  0F
08EA2:  ADDWF  xEF,F
08EA4:  RLCF   xEC,F
08EA6:  MOVLW  07
08EA8:  MOVWF  xEB
08EAA:  MOVLW  0A
08EAC:  MOVLB  0
08EAE:  MOVLB  1
08EB0:  DECF   xEE,F
08EB2:  ADDWF  xEF,F
08EB4:  BTFSC  FD8.0
08EB6:  BRA    8EBE
08EB8:  MOVLB  0
08EBA:  GOTO   8EAE
08EBE:  MOVLB  0
08EC0:  MOVLB  1
08EC2:  DECF   xED,F
08EC4:  ADDWF  xEE,F
08EC6:  BTFSC  FD8.0
08EC8:  BRA    8ED0
08ECA:  MOVLB  0
08ECC:  GOTO   8EC0
08ED0:  MOVLB  0
08ED2:  MOVLB  1
08ED4:  DECF   xEC,F
08ED6:  ADDWF  xED,F
08ED8:  BTFSC  FD8.0
08EDA:  BRA    8EE2
08EDC:  MOVLB  0
08EDE:  GOTO   8ED2
08EE2:  MOVLB  0
08EE4:  MOVLB  1
08EE6:  DECF   xEB,F
08EE8:  ADDWF  xEC,F
08EEA:  BTFSC  FD8.0
08EEC:  BRA    8EF4
08EEE:  MOVLB  0
08EF0:  GOTO   8EE4
08EF4:  MOVLW  01
08EF6:  MOVWF  FEA
08EF8:  MOVLW  EB
08EFA:  MOVWF  FE9
08EFC:  MOVLW  07
08EFE:  ANDWF  xF0,W
08F00:  BCF    xF0.6
08F02:  MOVLB  0
08F04:  ADDWF  FE9,F
08F06:  MOVLW  00
08F08:  ADDWFC FEA,F
08F0A:  MOVF   FE9,W
08F0C:  SUBLW  EF
08F0E:  BTFSS  FD8.2
08F10:  GOTO   8F20
08F14:  DECFSZ FEA,W
08F16:  GOTO   8F20
08F1A:  MOVLB  1
08F1C:  BSF    xF0.6
08F1E:  MOVLB  0
08F20:  MOVF   FEF,W
08F22:  MOVWF  00
08F24:  BTFSS  FD8.2
08F26:  GOTO   8F52
08F2A:  MOVLB  1
08F2C:  BTFSS  xF0.6
08F2E:  BRA    8F36
08F30:  MOVLB  0
08F32:  GOTO   8F52
08F36:  BTFSS  xF0.4
08F38:  BRA    8F40
08F3A:  MOVLB  0
08F3C:  GOTO   8F6C
08F40:  BTFSS  xF0.3
08F42:  BRA    8F4A
08F44:  MOVLB  0
08F46:  GOTO   8F52
08F4A:  MOVLW  20
08F4C:  MOVLB  0
08F4E:  GOTO   8F5C
08F52:  MOVLB  1
08F54:  BSF    xF0.3
08F56:  BCF    xF0.4
08F58:  MOVLW  30
08F5A:  MOVLB  0
08F5C:  ADDWF  00,F
08F5E:  MOVF   00,W
08F60:  BTFSS  FA6.6
08F62:  GOTO   8F60
08F66:  MOVLB  E
08F68:  MOVWF  xF9
08F6A:  MOVLB  0
08F6C:  MOVF   FEE,W
08F6E:  MOVLB  1
08F70:  BTFSC  xF0.6
08F72:  BRA    8F7A
08F74:  MOVLB  0
08F76:  GOTO   8F0A
08F7A:  MOVLB  0
08F7C:  RETURN 0
*
0E2AC:  MOVLB  1
0E2AE:  CLRF   xD1
0E2B0:  CLRF   xD2
0E2B2:  MOVLW  01
0E2B4:  MOVWF  xD3
0E2B6:  CLRF   FDA
0E2B8:  CLRF   FD9
0E2BA:  MOVLW  01
0E2BC:  MOVWF  xD6
0E2BE:  MOVLW  C9
0E2C0:  MOVWF  xD5
0E2C2:  MOVLB  0
0E2C4:  MOVLW  01
0E2C6:  MOVWF  FEA
0E2C8:  MOVLW  CD
0E2CA:  MOVWF  FE9
0E2CC:  MOVFF  1D6,FE2
0E2D0:  MOVFF  1D5,FE1
0E2D4:  MOVFF  1D3,1D4
0E2D8:  BCF    FD8.0
0E2DA:  MOVF   FE5,W
0E2DC:  MULWF  FEE
0E2DE:  MOVF   FF3,W
0E2E0:  MOVLB  1
0E2E2:  ADDWFC xD1,F
0E2E4:  MOVF   FF4,W
0E2E6:  ADDWFC xD2,F
0E2E8:  DECFSZ xD4,F
0E2EA:  BRA    E2F0
0E2EC:  BRA    E2F6
0E2EE:  MOVLB  0
0E2F0:  MOVLB  0
0E2F2:  GOTO   E2D8
0E2F6:  MOVFF  1D1,FDE
0E2FA:  MOVFF  1D2,1D1
0E2FE:  CLRF   xD2
0E300:  BTFSC  FD8.0
0E302:  INCF   xD2,F
0E304:  INCF   xD5,F
0E306:  BTFSC  FD8.2
0E308:  INCF   xD6,F
0E30A:  INCF   xD3,F
0E30C:  MOVF   xD3,W
0E30E:  SUBLW  05
0E310:  BTFSC  FD8.2
0E312:  BRA    E31A
0E314:  MOVLB  0
0E316:  GOTO   E2C4
0E31A:  MOVLB  0
0E31C:  GOTO   E3E0 (RETURN)
*
0F51A:  MOVLB  2
0F51C:  MOVF   x18,W
0F51E:  CLRF   01
0F520:  SUBWF  x17,W
0F522:  BTFSS  FD8.0
0F524:  BRA    F52C
0F526:  MOVLB  0
0F528:  GOTO   F536
0F52C:  MOVF   x17,W
0F52E:  MOVWF  00
0F530:  MOVLB  0
0F532:  GOTO   F560
0F536:  CLRF   00
0F538:  MOVLW  08
0F53A:  MOVLB  2
0F53C:  MOVWF  x19
0F53E:  MOVLB  0
0F540:  MOVLB  2
0F542:  RLCF   x17,F
0F544:  RLCF   00,F
0F546:  MOVF   x18,W
0F548:  SUBWF  00,W
0F54A:  BTFSC  FD8.0
0F54C:  MOVWF  00
0F54E:  RLCF   01,F
0F550:  DECFSZ x19,F
0F552:  BRA    F558
0F554:  BRA    F55E
0F556:  MOVLB  0
0F558:  MOVLB  0
0F55A:  GOTO   F540
0F55E:  MOVLB  0
0F560:  RETURN 0
0F562:  MOVF   01,W
0F564:  MOVFF  1AF,217
0F568:  MOVLW  64
0F56A:  MOVLB  2
0F56C:  MOVWF  x18
0F56E:  MOVLB  0
0F570:  CALL   F51A
0F574:  MOVFF  00,1AF
0F578:  MOVF   01,W
0F57A:  MOVLW  30
0F57C:  BTFSS  FD8.2
0F57E:  GOTO   F5A2
0F582:  MOVLB  1
0F584:  BTFSC  xB0.1
0F586:  BRA    F58E
0F588:  MOVLB  0
0F58A:  GOTO   F5BC
0F58E:  BTFSS  xB0.3
0F590:  BRA    F598
0F592:  MOVLB  0
0F594:  GOTO   F5BC
0F598:  BTFSC  xB0.4
0F59A:  MOVLW  20
0F59C:  MOVLB  0
0F59E:  GOTO   F5AC
0F5A2:  MOVLB  1
0F5A4:  BCF    xB0.3
0F5A6:  BCF    xB0.4
0F5A8:  BSF    xB0.0
0F5AA:  MOVLB  0
0F5AC:  ADDWF  01,F
0F5AE:  MOVF   01,W
0F5B0:  BTFSS  FA6.6
0F5B2:  GOTO   F5B0
0F5B6:  MOVLB  E
0F5B8:  MOVWF  xF9
0F5BA:  MOVLB  0
0F5BC:  MOVFF  1AF,217
0F5C0:  MOVLW  0A
0F5C2:  MOVLB  2
0F5C4:  MOVWF  x18
0F5C6:  MOVLB  0
0F5C8:  CALL   F51A
0F5CC:  MOVFF  00,1AF
0F5D0:  MOVF   01,W
0F5D2:  MOVLW  30
0F5D4:  BTFSS  FD8.2
0F5D6:  GOTO   F5F6
0F5DA:  MOVLB  1
0F5DC:  BTFSS  xB0.3
0F5DE:  BRA    F5E6
0F5E0:  MOVLB  0
0F5E2:  GOTO   F606
0F5E6:  BTFSC  xB0.0
0F5E8:  BRA    F5F0
0F5EA:  MOVLB  0
0F5EC:  GOTO   F606
0F5F0:  BTFSC  xB0.4
0F5F2:  MOVLW  20
0F5F4:  MOVLB  0
0F5F6:  ADDWF  01,F
0F5F8:  MOVF   01,W
0F5FA:  BTFSS  FA6.6
0F5FC:  GOTO   F5FA
0F600:  MOVLB  E
0F602:  MOVWF  xF9
0F604:  MOVLB  0
0F606:  MOVLW  30
0F608:  MOVLB  1
0F60A:  ADDWF  xAF,F
0F60C:  MOVF   xAF,W
0F60E:  MOVLB  0
0F610:  BTFSS  FA6.6
0F612:  GOTO   F610
0F616:  MOVLB  E
0F618:  MOVWF  xF9
0F61A:  MOVLB  0
0F61C:  RETURN 0
*
0FD78:  MOVF   FE9,W
0FD7A:  MOVLB  1
0FD7C:  MOVWF  xAF
0FD7E:  BTFSC  xAE.7
0FD80:  BRA    FD88
0FD82:  MOVLB  0
0FD84:  GOTO   FDA4
0FD88:  DECF   xAF,F
0FD8A:  BSF    xAF.5
0FD8C:  COMF   xAB,F
0FD8E:  COMF   xAC,F
0FD90:  COMF   xAD,F
0FD92:  COMF   xAE,F
0FD94:  INCF   xAB,F
0FD96:  BTFSC  FD8.2
0FD98:  INCF   xAC,F
0FD9A:  BTFSC  FD8.2
0FD9C:  INCF   xAD,F
0FD9E:  BTFSC  FD8.2
0FDA0:  INCF   xAE,F
0FDA2:  MOVLB  0
0FDA4:  MOVLW  3B
0FDA6:  MOVLB  1
0FDA8:  MOVWF  xB6
0FDAA:  MOVLW  9A
0FDAC:  MOVWF  xB5
0FDAE:  MOVLW  CA
0FDB0:  MOVWF  xB4
0FDB2:  CLRF   xB3
0FDB4:  MOVLW  0A
0FDB6:  MOVWF  xB1
0FDB8:  MOVLB  0
0FDBA:  BSF    FD8.1
0FDBC:  MOVLW  01
0FDBE:  MOVWF  FEA
0FDC0:  MOVLW  AB
0FDC2:  MOVWF  FE9
0FDC4:  MOVFF  1AE,215
0FDC8:  MOVFF  1AD,214
0FDCC:  MOVFF  1AC,213
0FDD0:  MOVFF  1AB,212
0FDD4:  MOVFF  1B6,219
0FDD8:  MOVFF  1B5,218
0FDDC:  MOVFF  1B4,217
0FDE0:  MOVFF  1B3,216
0FDE4:  CALL   61F8
0FDE8:  MOVF   01,W
0FDEA:  MOVF   00,F
0FDEC:  BTFSS  FD8.2
0FDEE:  GOTO   FE46
0FDF2:  MOVLB  1
0FDF4:  MOVF   xB1,W
0FDF6:  XORLW  01
0FDF8:  BTFSS  FD8.2
0FDFA:  BRA    FE02
0FDFC:  MOVLB  0
0FDFE:  GOTO   FE46
0FE02:  MOVF   xAF,W
0FE04:  BTFSS  FD8.2
0FE06:  BRA    FE0E
0FE08:  MOVLB  0
0FE0A:  GOTO   FE4E
0FE0E:  ANDLW  0F
0FE10:  SUBWF  xB1,W
0FE12:  BTFSS  FD8.2
0FE14:  BRA    FE1C
0FE16:  MOVLB  0
0FE18:  GOTO   FE28
0FE1C:  BTFSS  FD8.0
0FE1E:  BRA    FE26
0FE20:  MOVLB  0
0FE22:  GOTO   FEB6
0FE26:  MOVLB  0
0FE28:  MOVLB  1
0FE2A:  BTFSS  xAF.7
0FE2C:  BRA    FE34
0FE2E:  MOVLB  0
0FE30:  GOTO   FEB6
0FE34:  BTFSS  xAF.6
0FE36:  BRA    FE3E
0FE38:  MOVLB  0
0FE3A:  GOTO   FE4E
0FE3E:  MOVLW  20
0FE40:  MOVLB  0
0FE42:  GOTO   FEA6
0FE46:  MOVLW  20
0FE48:  MOVLB  1
0FE4A:  ANDWF  xAF,F
0FE4C:  MOVLB  0
0FE4E:  MOVLB  1
0FE50:  BTFSC  xAF.5
0FE52:  BRA    FE5A
0FE54:  MOVLB  0
0FE56:  GOTO   FE78
0FE5A:  BCF    xAF.5
0FE5C:  MOVF   00,W
0FE5E:  MOVWF  xAF
0FE60:  MOVLW  2D
0FE62:  MOVLB  0
0FE64:  BTFSS  FA6.6
0FE66:  GOTO   FE64
0FE6A:  MOVLB  E
0FE6C:  MOVWF  xF9
0FE6E:  MOVLB  1
0FE70:  MOVF   xAF,W
0FE72:  MOVWF  00
0FE74:  CLRF   xAF
0FE76:  MOVLB  0
0FE78:  MOVLW  30
0FE7A:  MOVLB  1
0FE7C:  BTFSC  xAF.5
0FE7E:  BRA    FE86
0FE80:  MOVLB  0
0FE82:  GOTO   FEA6
0FE86:  BCF    xAF.5
0FE88:  MOVF   00,W
0FE8A:  MOVWF  xAF
0FE8C:  MOVLW  2D
0FE8E:  MOVLB  0
0FE90:  BTFSS  FA6.6
0FE92:  GOTO   FE90
0FE96:  MOVLB  E
0FE98:  MOVWF  xF9
0FE9A:  MOVLB  1
0FE9C:  MOVF   xAF,W
0FE9E:  MOVWF  00
0FEA0:  CLRF   xAF
0FEA2:  MOVLW  30
0FEA4:  MOVLB  0
0FEA6:  ADDWF  00,F
0FEA8:  MOVF   00,W
0FEAA:  BTFSS  FA6.6
0FEAC:  GOTO   FEAA
0FEB0:  MOVLB  E
0FEB2:  MOVWF  xF9
0FEB4:  MOVLB  0
0FEB6:  BCF    FD8.1
0FEB8:  MOVFF  1B6,215
0FEBC:  MOVFF  1B5,214
0FEC0:  MOVFF  1B4,213
0FEC4:  MOVFF  1B3,212
0FEC8:  MOVLB  2
0FECA:  CLRF   x19
0FECC:  CLRF   x18
0FECE:  CLRF   x17
0FED0:  MOVLW  0A
0FED2:  MOVWF  x16
0FED4:  MOVLB  0
0FED6:  CALL   61F8
0FEDA:  MOVFF  03,1B6
0FEDE:  MOVFF  02,1B5
0FEE2:  MOVFF  01,1B4
0FEE6:  MOVFF  00,1B3
0FEEA:  MOVLB  1
0FEEC:  DECFSZ xB1,F
0FEEE:  BRA    FEF4
0FEF0:  BRA    FEFA
0FEF2:  MOVLB  0
0FEF4:  MOVLB  0
0FEF6:  GOTO   FDBA
0FEFA:  MOVLB  0
0FEFC:  RETURN 0
*
0FF9A:  ADDWF  FE8,W
0FF9C:  CLRF   FF7
0FF9E:  RLCF   FF7,F
0FFA0:  ADDLW  BB
0FFA2:  MOVWF  FF6
0FFA4:  MOVLW  FF
0FFA6:  ADDWFC FF7,F
0FFA8:  MOVLW  00
0FFAA:  MOVWF  FF8
0FFAC:  MOVWF  FFB
0FFAE:  TBLRD*-
0FFB0:  MOVF   FF5,W
0FFB2:  MOVWF  FFA
0FFB4:  TBLRD*
0FFB6:  MOVF   FF5,W
0FFB8:  MOVWF  FF9
0FFBA:  DATA 42,FF
0FFBC:  DATA 52,FF
0FFBE:  DATA 72,FF
0FFC0:  DATA 82,FF
*
10000:  MOVLW  20
10002:  MOVLB  2
10004:  BTFSS  x12.4
10006:  MOVLW  30
10008:  MOVWF  x13
1000A:  MOVFF  211,00
1000E:  BTFSC  00.7
10010:  BRA    10018
10012:  MOVLB  0
10014:  GOTO   1002A
10018:  COMF   00,F
1001A:  INCF   00,F
1001C:  MOVFF  00,211
10020:  MOVLW  2D
10022:  MOVWF  x13
10024:  BSF    x12.7
10026:  BSF    x12.0
10028:  MOVLB  0
1002A:  MOVF   01,W
1002C:  MOVFF  211,217
10030:  MOVLW  64
10032:  MOVLB  2
10034:  MOVWF  x18
10036:  MOVLB  0
10038:  CALL   F51A
1003C:  MOVFF  00,211
10040:  MOVLW  30
10042:  ADDWF  01,W
10044:  MOVLB  2
10046:  MOVWF  x14
10048:  MOVFF  211,217
1004C:  MOVLW  0A
1004E:  MOVWF  x18
10050:  MOVLB  0
10052:  CALL   F51A
10056:  MOVLW  30
10058:  ADDWF  00,W
1005A:  MOVLB  2
1005C:  MOVWF  x16
1005E:  MOVLW  30
10060:  ADDWF  01,W
10062:  MOVWF  x15
10064:  MOVFF  213,00
10068:  MOVLB  0
1006A:  MOVLW  30
1006C:  MOVLB  2
1006E:  SUBWF  x14,W
10070:  BTFSS  FD8.2
10072:  BRA    1007A
10074:  MOVLB  0
10076:  GOTO   10086
1007A:  BSF    x12.1
1007C:  BTFSC  x12.7
1007E:  BSF    x12.2
10080:  MOVLB  0
10082:  GOTO   100C6
10086:  MOVFF  213,214
1008A:  MOVLW  20
1008C:  MOVLB  2
1008E:  MOVWF  x13
10090:  MOVLW  30
10092:  SUBWF  x15,W
10094:  BTFSS  FD8.2
10096:  BRA    1009E
10098:  MOVLB  0
1009A:  GOTO   100AA
1009E:  BSF    x12.0
100A0:  BTFSC  x12.7
100A2:  BSF    x12.1
100A4:  MOVLB  0
100A6:  GOTO   100C6
100AA:  BTFSC  FD8.2
100AC:  BRA    100B4
100AE:  MOVLB  2
100B0:  BSF    x12.0
100B2:  MOVLB  0
100B4:  BTFSS  FD8.2
100B6:  GOTO   100C6
100BA:  MOVFF  214,215
100BE:  MOVLW  20
100C0:  MOVLB  2
100C2:  MOVWF  x14
100C4:  MOVLB  0
100C6:  MOVLB  2
100C8:  BTFSS  x12.2
100CA:  BRA    100D2
100CC:  MOVLB  0
100CE:  GOTO   100EC
100D2:  BTFSS  x12.1
100D4:  BRA    100DC
100D6:  MOVLB  0
100D8:  GOTO   100FE
100DC:  BTFSS  x12.0
100DE:  BRA    100E6
100E0:  MOVLB  0
100E2:  GOTO   10110
100E6:  MOVLB  0
100E8:  GOTO   10122
100EC:  MOVLB  2
100EE:  MOVF   x13,W
100F0:  MOVLB  0
100F2:  BTFSS  FA6.6
100F4:  GOTO   100F2
100F8:  MOVLB  E
100FA:  MOVWF  xF9
100FC:  MOVLB  0
100FE:  MOVLB  2
10100:  MOVF   x14,W
10102:  MOVLB  0
10104:  BTFSS  FA6.6
10106:  GOTO   10104
1010A:  MOVLB  E
1010C:  MOVWF  xF9
1010E:  MOVLB  0
10110:  MOVLB  2
10112:  MOVF   x15,W
10114:  MOVLB  0
10116:  BTFSS  FA6.6
10118:  GOTO   10116
1011C:  MOVLB  E
1011E:  MOVWF  xF9
10120:  MOVLB  0
10122:  MOVLB  2
10124:  MOVF   x16,W
10126:  MOVLB  0
10128:  BTFSS  FA6.6
1012A:  GOTO   10128
1012E:  MOVLB  E
10130:  MOVWF  xF9
10132:  MOVLB  0
10134:  GOTO   10A16 (RETURN)
.................... 
.................... #list
.................... 
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
*
022AE:  MOVLW  0B
022B0:  MOVWF  FEA
022B2:  MOVLW  02
022B4:  MOVWF  FE9
022B6:  MOVF   FEF,W
022B8:  BTFSC  FD8.2
022BA:  GOTO   22DA
022BE:  MOVLW  05
022C0:  MOVWF  01
022C2:  CLRF   00
022C4:  DECFSZ 00,F
022C6:  BRA    22C4
022C8:  DECFSZ 01,F
022CA:  BRA    22C2
022CC:  MOVLW  2E
022CE:  MOVWF  00
022D0:  DECFSZ 00,F
022D2:  BRA    22D0
022D4:  BRA    22D6
022D6:  DECFSZ FEF,F
022D8:  BRA    22BE
022DA:  RETURN 0
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
*
00218:  BTFSS  FA6.5
0021A:  GOTO   0218
0021E:  MOVLB  F
00220:  MOVF   x2F,W
00222:  MOVWF  1B
00224:  MOVLB  0
00226:  MOVLB  F
00228:  MOVF   x2A,W
0022A:  MOVWF  01
0022C:  BTFSC  1B.1
0022E:  BRA    0236
00230:  MOVLB  0
00232:  GOTO   023A
00236:  BCF    x2F.4
00238:  BSF    x2F.4
0023A:  MOVLB  0
0023C:  GOTO   0276 (RETURN)
*
0579E:  BTFSS  FA6.4
057A0:  GOTO   579E
057A4:  MOVLB  F
057A6:  MOVWF  x29
057A8:  MOVLB  0
057AA:  GOTO   57E0 (RETURN)
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
*
091DC:  BTFSS  FA6.6
091DE:  GOTO   91DC
091E2:  MOVLB  E
091E4:  MOVWF  xF9
091E6:  MOVLB  0
091E8:  RETURN 0
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
*
02B6E:  MOVLB  B
02B70:  MOVF   x25,W
02B72:  SUBLW  08
02B74:  BTFSS  FD8.2
02B76:  BRA    2B7E
02B78:  MOVLB  0
02B7A:  GOTO   2B96
02B7E:  MOVWF  x27
02B80:  MOVLB  0
02B82:  MOVLB  B
02B84:  RLCF   x24,F
02B86:  DECFSZ x27,F
02B88:  BRA    2B8E
02B8A:  BRA    2B94
02B8C:  MOVLB  0
02B8E:  MOVLB  0
02B90:  GOTO   2B82
02B94:  MOVLB  0
02B96:  BSF    F92.1
02B98:  BCF    F92.0
02B9A:  BCF    F92.3
02B9C:  BCF    F89.3
02B9E:  MOVFF  B25,B27
02BA2:  MOVLB  B
02BA4:  BTFSS  x24.7
02BA6:  BCF    F89.0
02BA8:  BTFSC  x24.7
02BAA:  BSF    F89.0
02BAC:  RLCF   x24,F
02BAE:  BSF    F89.3
02BB0:  RLCF   01,F
02BB2:  BTFSS  F80.1
02BB4:  BCF    01.0
02BB6:  BTFSC  F80.1
02BB8:  BSF    01.0
02BBA:  BCF    F89.3
02BBC:  DECFSZ x27,F
02BBE:  BRA    2BC4
02BC0:  BRA    2BCA
02BC2:  MOVLB  0
02BC4:  MOVLB  0
02BC6:  GOTO   2BA2
02BCA:  MOVLB  0
02BCC:  RETURN 0
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
*
02B0E:  MOVLB  B
02B10:  MOVF   x25,W
02B12:  SUBLW  08
02B14:  BTFSS  FD8.2
02B16:  BRA    2B1E
02B18:  MOVLB  0
02B1A:  GOTO   2B36
02B1E:  MOVWF  x27
02B20:  MOVLB  0
02B22:  MOVLB  B
02B24:  RLCF   x24,F
02B26:  DECFSZ x27,F
02B28:  BRA    2B2E
02B2A:  BRA    2B34
02B2C:  MOVLB  0
02B2E:  MOVLB  0
02B30:  GOTO   2B22
02B34:  MOVLB  0
02B36:  BSF    F96.0
02B38:  BCF    F96.6
02B3A:  BCF    F96.1
02B3C:  BCF    F8D.1
02B3E:  MOVFF  B25,B27
02B42:  MOVLB  B
02B44:  BTFSS  x24.7
02B46:  BCF    F8D.6
02B48:  BTFSC  x24.7
02B4A:  BSF    F8D.6
02B4C:  RLCF   x24,F
02B4E:  BSF    F8D.1
02B50:  RLCF   01,F
02B52:  BTFSS  F84.0
02B54:  BCF    01.0
02B56:  BTFSC  F84.0
02B58:  BSF    01.0
02B5A:  BCF    F8D.1
02B5C:  DECFSZ x27,F
02B5E:  BRA    2B64
02B60:  BRA    2B6A
02B62:  MOVLB  0
02B64:  MOVLB  0
02B66:  GOTO   2B42
02B6A:  MOVLB  0
02B6C:  RETURN 0
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
*
0245C:  MOVLB  9
0245E:  MOVF   xF7,W
02460:  SUBLW  10
02462:  BTFSS  FD8.2
02464:  BRA    246C
02466:  MOVLB  0
02468:  GOTO   2486
0246C:  MOVWF  xF9
0246E:  MOVLB  0
02470:  MOVLB  9
02472:  RLCF   xF5,F
02474:  RLCF   xF6,F
02476:  DECFSZ xF9,F
02478:  BRA    247E
0247A:  BRA    2484
0247C:  MOVLB  0
0247E:  MOVLB  0
02480:  GOTO   2470
02484:  MOVLB  0
02486:  BSF    F93.4
02488:  BCF    F93.5
0248A:  BCF    F93.2
0248C:  BSF    F8A.2
0248E:  MOVFF  9F7,9F9
02492:  MOVLB  9
02494:  BTFSS  xF6.7
02496:  BCF    F8A.5
02498:  BTFSC  xF6.7
0249A:  BSF    F8A.5
0249C:  RLCF   xF5,F
0249E:  RLCF   xF6,F
024A0:  BCF    F8A.2
024A2:  RLCF   01,F
024A4:  RLCF   02,F
024A6:  BTFSS  F81.4
024A8:  BCF    01.0
024AA:  BTFSC  F81.4
024AC:  BSF    01.0
024AE:  BSF    F8A.2
024B0:  DECFSZ xF9,F
024B2:  BRA    24B8
024B4:  BRA    24BE
024B6:  MOVLB  0
024B8:  MOVLB  0
024BA:  GOTO   2492
024BE:  MOVLB  0
024C0:  RETURN 0
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
*
0281A:  MOVLB  9
0281C:  MOVF   xE2,W
0281E:  SUBLW  10
02820:  BTFSS  FD8.2
02822:  BRA    282A
02824:  MOVLB  0
02826:  GOTO   2844
0282A:  MOVWF  xE4
0282C:  MOVLB  0
0282E:  MOVLB  9
02830:  RLCF   xE0,F
02832:  RLCF   xE1,F
02834:  DECFSZ xE4,F
02836:  BRA    283C
02838:  BRA    2842
0283A:  MOVLB  0
0283C:  MOVLB  0
0283E:  GOTO   282E
02842:  MOVLB  0
02844:  BCF    F95.4
02846:  BCF    F95.5
02848:  BSF    F8C.5
0284A:  MOVFF  9E2,9E4
0284E:  MOVLB  9
02850:  BTFSS  xE1.7
02852:  BCF    F8C.4
02854:  BTFSC  xE1.7
02856:  BSF    F8C.4
02858:  RLCF   xE0,F
0285A:  RLCF   xE1,F
0285C:  BCF    F8C.5
0285E:  BSF    F8C.5
02860:  DECFSZ xE4,F
02862:  BRA    2868
02864:  BRA    286E
02866:  MOVLB  0
02868:  MOVLB  0
0286A:  GOTO   284E
0286E:  MOVLB  0
02870:  RETURN 0
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル2: ハードウェア抽象化層  
.................... #include "hal/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... #INT_TIMER1 
.................... static void TIMER1_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... void set_current_sec(unsigned int32 new_sec);
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "hal/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "hal/gpio.h"
.................... #ifndef GPIO_H
.................... #define GPIO_H
.................... 
.................... void gpio_init();
.................... void enable_negative_power();
.................... void disable_negative_power();
.................... void connect_port1();
.................... void disconnect_port1();
.................... void connect_port2();
.................... void disconnect_port2();
.................... 
.................... 
.................... // 
.................... void connect_negative_power1(int1 state);
.................... void connect_negative_power2(int1 state);
.................... #endif // GPIO_H
.................... 
.................... #include "device_driver/ad7490_driver.h"
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "device_driver/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル3: 基本ライブラリヘッダー（型定義・通信・ツール）
.................... #include "../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06,
....................     TIME_REQ          = 0x07
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/tool/mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... typedef enum smf_memory_id_t{
....................     // SATO
....................     SMF_SATO_DATA_TABLE = 0xA0,
....................     SMF_SATO_PICLOG = 0xA1,
....................     SMF_SATO_INNER_DIODE_HEADER = 0xA2,
....................     SMF_SATO_INNER_DIODE_DATA = 0xA3,
....................     SMF_SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SMF_SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     SMF_CIGS_DATA_TABLE = 0xC0,
....................     SMF_CIGS_PICLOG = 0xC1,
....................     SMF_CIGS_ENVIRO = 0xC2,
....................     SMF_CIGS_IV1_HEADER = 0xC3,
....................     SMF_CIGS_IV1_DATA = 0xC4,
....................     SMF_CIGS_IV2_HEADER = 0xC5,
....................     SMF_CIGS_IV2_DATA = 0xC6,
.................... };
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS   0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS   0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS     0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS       0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS         0x06AB0FFF
.................... #define CIGS_ENVIRO_START_ADDRESS       0x06AB1000
.................... #define CIGS_ENVIRO_END_ADDRESS         0x06B50FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS   0x06B51000
.................... #define CIGS_IV1_HEADER_END_ADDRESS     0x06BF0FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS     0x06BF1000
.................... #define CIGS_IV1_DATA_END_ADDRESS       0x06FF0FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS   0x06FF1000
.................... #define CIGS_IV2_HEADER_END_ADDRESS     0x07090FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS     0x07091000
.................... #define CIGS_IV2_DATA_END_ADDRESS       0x07490FFF
.................... 
.................... /*
.................... enum smf_memory_id{
....................     // SATO
....................     SATO_DATA_TABLE = 0xA0,
....................     SATO_PICLOG = 0xA1,
....................     SATO_INNER_DIODE_HEADER = 0xA2,
....................     SATO_INNER_DIODE_DATA = 0xA3,
....................     SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     IDF_CIGS_DATA_TABLE = 0xC0,
....................     IDF_CIGS_PICLOG = 0xC1,
....................     IDF_CIGS_ENVIRO = 0xC2,
....................     IDF_CIGS_IV1_HEADER = 0xC3,
....................     IDF_CIGS_IV1_DATA = 0xC4,
....................     IDF_CIGS_IV2_HEADER = 0xC5,
....................     IDF_CIGS_IV2_DATA = 0xC6,
.................... }
.................... */
.................... // DATA ID for CIGS
.................... #define DATA_ID_CIGS_DATA_TABLE 0xC0
.................... #define DATA_ID_CIGS_PICLOG 0xC1
.................... #define DATA_ID_CIGS_ENVIRO 0xC2
.................... #define DATA_ID_CIGS_IV1_HEADER 0xC3
.................... #define DATA_ID_CIGS_IV1_DATA 0xC4
.................... #define DATA_ID_CIGS_IV2_HEADER 0xC5
.................... #define DATA_ID_CIGS_IV2_DATA 0xC6
.................... 
.................... // FLASH ADDRESS for CIGS
.................... #define SMF_DATA_TABLE_HEADER_START_ADDRESS   0x073B0000
.................... #define SMF_DATA_TABLE_HEADER_END_ADDRESS     0x073B0FFF
.................... #define SMF_DATA_TABLE_DATA_START_ADDRESS     0x073B1000
.................... #define SMF_DATA_TABLE_DATA_END_ADDRESS       0x073B1FFF
.................... 
.................... #define SMF_PICLOG_HEADER_START_ADDRESS       0x073B2000
.................... #define SMF_PICLOG_HEADER_END_ADDRESS         0x073B2FFF
.................... #define SMF_PICLOG_DATA_START_ADDRESS         0x073B3000
.................... #define SMF_PICLOG_DATA_END_ADDRESS           0x073C2FFF
.................... 
.................... #define SMF_ENVIRO_HEADER_START_ADDRESS       0x073C3000
.................... #define SMF_ENVIRO_HEADER_END_ADDRESS         0x073C3FFF
.................... #define SMF_ENVIRO_DATA_START_ADDRESS         0x073C4000
.................... #define SMF_ENVIRO_DATA_END_ADDRESS           0x07463FFF
.................... 
.................... #define SMF_IV1_HEADER_HEADER_START_ADDRESS   0x07464000
.................... #define SMF_IV1_HEADER_HEADER_END_ADDRESS     0x07464FFF
.................... #define SMF_IV1_HEADER_DATA_START_ADDRESS     0x07465000
.................... #define SMF_IV1_HEADER_DATA_END_ADDRESS       0x07504FFF
.................... 
.................... #define SMF_IV1_DATA_HEADER_START_ADDRESS     0x07505000
.................... #define SMF_IV1_DATA_HEADER_END_ADDRESS       0x07505FFF
.................... #define SMF_IV1_DATA_DATA_START_ADDRESS       0x07506000
.................... #define SMF_IV1_DATA_DATA_END_ADDRESS         0x07905FFF
.................... 
.................... #define SMF_IV2_HEADER_HEADER_START_ADDRESS   0x07906000
.................... #define SMF_IV2_HEADER_HEADER_END_ADDRESS     0x07906FFF
.................... #define SMF_IV2_HEADER_DATA_START_ADDRESS     0x07907000
.................... #define SMF_IV2_HEADER_DATA_END_ADDRESS       0x079A6FFF
.................... 
.................... #define SMF_IV2_DATA_HEADER_START_ADDRESS     0x079A7000
.................... #define SMF_IV2_DATA_HEADER_END_ADDRESS       0x079A7FFF
.................... #define SMF_IV2_DATA_DATA_START_ADDRESS       0x079A8000
.................... #define SMF_IV2_DATA_DATA_END_ADDRESS         0x07DA7FFF
.................... 
.................... 
.................... // FLASH SIZE for CIGS
.................... #define SMF_DATA_TABLE_SIZE  4096
.................... #define SMF_PICLOG_SIZE     1310720
.................... #define SMF_ENVIRO_SIZE     1310720
.................... #define SMF_IV1_HEADER_SIZE  655360
.................... #define SMF_IV1_DATA_SIZE    4194304
.................... #define SMF_IV2_HEADER_SIZE  655360
.................... #define SMF_IV2_DATA_SIZE    4194304
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // レベル4: デバイスドライバヘッダー
.................... #include "../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/device/ad7490.h"
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... // === AD7490 Control Word ===
.................... // Bit[15]   : WRITE (常に0)
.................... // Bit[14:13]: SEQ mode (シーケンス設定)
.................... // Bit[12]   : SHADOW (0=disabled, 1=enabled)
.................... // Bit[11]   : Don't Care
.................... // Bit[10]   : PM1 (Power Management)
.................... // Bit[9]    : PM0
.................... // Bit[8]    : REFSEL (0=internal, 1=external)
.................... // Bit[7]    : Coding (0=straight binary, 1=twos complement)
.................... // Bit[6]    : Don't Care
.................... // Bit[5]    : ADD2
.................... // Bit[4]    : ADD1
.................... // Bit[3]    : ADD0
.................... // Bit[2]    : DIFF (0=single-ended, 1=differential)
.................... // Bit[1:0]  : Don't Care
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000011
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000000
.................... 
.................... 
.................... // ----------------------------
.................... // WRITE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_WRITE_DISABLE = 0,  // 書き込み無効
....................     AD7490_WRITE_ENABLE  = 1   // 書き込み有効
.................... } ad7490_write_t;
.................... 
.................... // ----------------------------
.................... // SEQ bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SEQ_DISABLE = 0,
....................     AD7490_SEQ_ENABLE  = 1
.................... } ad7490_seq_t;
.................... 
.................... // ----------------------------
.................... // CODING bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CODING_BINARY  = 0, // ストレートバイナリ
....................     AD7490_CODING_TWOS    = 1  // Two’s complement
.................... } ad7490_coding_t;
.................... 
.................... // ----------------------------
.................... // RANGE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_RANGE_2REF  = 0, // 0〜2*REFIN
....................     AD7490_RANGE_REF   = 1  // 0〜REFIN
.................... } ad7490_range_t;
.................... 
.................... // ----------------------------
.................... // WEAK/TRI bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_DOUT_TRI   = 0, // Three-state
....................     AD7490_DOUT_WEAK  = 1  // Weakly driven
.................... } ad7490_dout_t;
.................... 
.................... // ----------------------------
.................... // SHADOW bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SHADOW_DISABLE = 0,
....................     AD7490_SHADOW_ENABLE  = 1
.................... } ad7490_shadow_t;
.................... 
.................... // ----------------------------
.................... // Power Mode (PM1, PM0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_PWR_NORMAL    = 0, // 00
....................     AD7490_PWR_FULLDOWN  = 1, // 01
....................     AD7490_PWR_AUTO      = 2, // 10
....................     AD7490_PWR_SHUTDOWN  = 3  // 11
.................... } ad7490_pwr_mode_t;
.................... 
.................... // ----------------------------
.................... // Channel Address (ADD3–ADD0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CH0  = 0,
....................     AD7490_CH1  = 1,
....................     AD7490_CH2  = 2,
....................     AD7490_CH3  = 3,
....................     AD7490_CH4  = 4,
....................     AD7490_CH5  = 5,
....................     AD7490_CH6  = 6,
....................     AD7490_CH7  = 7,
....................     AD7490_CH8  = 8,
....................     AD7490_CH9  = 9,
....................     AD7490_CH10 = 10,
....................     AD7490_CH11 = 11,
....................     AD7490_CH12 = 12,
....................     AD7490_CH13 = 13,
....................     AD7490_CH14 = 14,
....................     AD7490_CH15 = 15
.................... } ad7490_channel_t;
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // レベル5: 通信ライブラリヘッダー
.................... #include "../lib/communication/communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... #define SEND_TIME             0x03
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... #define SEND_TIME_LENGTH         4
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH},
....................    {SEND_TIME, SEND_TIME_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // レベル6: コア機能ヘッダー
.................... #include "domain/cigs_iv.h"
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "domain/cigs_flash.h"
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "domain/cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "domain/cigs_smf.h"
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../hal/cigs_config.h" // int8,int32 型など(CCS C) 依存
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "cigs_flash.h"       // MISF_ADDRESS_TABLE, misf_counter_table 依存
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... extern int1 smf_update_flag[10]; // SMF更新フラグ
.................... 
.................... 
.................... // SMF管理用構造体
.................... typedef struct {
....................     ADDRESS_AREA_T header_area;
....................     ADDRESS_AREA_T data_area;
.................... } SMF_AREA_T;
.................... #define SMF_ID_COUNT 7
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 reserved;
.................... } SMF_PARTITION;
.................... 
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         SMF_PARTITION headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table);
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... 
.................... // レベル7: アプリケーションヘッダー
.................... #include "application/cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... // #include "../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... void handle_recieve_time(Command *command);
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "application/cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_PRINT 0xA3
.................... #define ID_MEAS_IV_PRINT 0xA4
.................... #define ID_MEAS_PD 0xA5
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_pd(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_1sweep(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_port1(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_port2(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int16 interval;
....................     unsigned int16 pd_threshold;
....................     unsigned int16 meas_time;
....................     unsigned int16 log_threshold;
....................     unsigned int16 sweep_limit;
.................... } meas_iv_param_t;
.................... 
.................... 
.................... // MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... meas_iv_param_t make_meas_iv_cmd(int8 *uplinkcmd_ptr);
.................... void print_meas_iv_cmd(meas_iv_param_t *cmd_ptr);
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "application/cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... //==============================================================================
.................... // .cファイル統合（CCS C単一コンパイル単位）
.................... //==============================================================================
.................... 
.................... // ハードウェア層実装ファイル
.................... // 実装は各 .c からビルドするためヘッダーでの取り込みは不要。必要なら下記のように直下参照に修正。
.................... #include "hal/timer.c"
.................... #include "timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... #INT_TIMER1 
.................... static void TIMER1_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... void set_current_sec(unsigned int32 new_sec);
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... int8 subsec;
.................... unsigned int32 time_ms = 0;
.................... unsigned int32 time_sec = 0;
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr()
.................... {
....................    set_timer0(0);  // 10msごとにリロード
*
0014E:  CLRF   FD7
00150:  CLRF   FD6
00152:  NOP   
....................    time_ms += 4;
00154:  MOVLW  04
00156:  MOVLB  1
00158:  ADDWF  x7E,F
0015A:  MOVLW  00
0015C:  ADDWFC x7F,F
0015E:  MOVLW  00
00160:  ADDWFC x80,F
00162:  MOVLW  00
00164:  ADDWFC x81,F
....................    if (time_ms >= 4294967290) {
00166:  MOVF   x81,W
00168:  SUBLW  FE
0016A:  BTFSS  FD8.0
0016C:  BRA    0174
0016E:  MOVLB  0
00170:  GOTO   01D0
00174:  MOVLB  0
00176:  XORLW  FF
00178:  BTFSS  FD8.2
0017A:  GOTO   01C4
0017E:  MOVLB  1
00180:  MOVF   x80,W
00182:  SUBLW  FE
00184:  BTFSS  FD8.0
00186:  BRA    018E
00188:  MOVLB  0
0018A:  GOTO   01D0
0018E:  MOVLB  0
00190:  XORLW  FF
00192:  BTFSS  FD8.2
00194:  GOTO   01C4
00198:  MOVLB  1
0019A:  MOVF   x7F,W
0019C:  SUBLW  FE
0019E:  BTFSS  FD8.0
001A0:  BRA    01A8
001A2:  MOVLB  0
001A4:  GOTO   01D0
001A8:  MOVLB  0
001AA:  XORLW  FF
001AC:  BTFSS  FD8.2
001AE:  GOTO   01C4
001B2:  MOVLB  1
001B4:  MOVF   x7E,W
001B6:  SUBLW  F9
001B8:  BTFSS  FD8.0
001BA:  BRA    01C2
001BC:  MOVLB  0
001BE:  GOTO   01D0
001C2:  MOVLB  0
....................       time_ms = 0;
001C4:  MOVLB  1
001C6:  CLRF   x81
001C8:  CLRF   x80
001CA:  CLRF   x7F
001CC:  CLRF   x7E
001CE:  MOVLB  0
....................    }
.................... }
.................... 
001D0:  BCF    FF2.2
001D2:  GOTO   0090
.................... #INT_TIMER1 
.................... static void TIMER1_isr()
.................... {
....................    set_timer1(0x8000); 
001D6:  MOVLW  80
001D8:  MOVWF  FCF
001DA:  CLRF   FCE
001DC:  NOP   
....................    time_sec++;
001DE:  MOVLW  01
001E0:  MOVLB  1
001E2:  ADDWF  x82,F
001E4:  BTFSC  FD8.0
001E6:  INCF   x83,F
001E8:  BTFSC  FD8.2
001EA:  INCF   x84,F
001EC:  BTFSC  FD8.2
001EE:  INCF   x85,F
001F0:  MOVLB  0
001F2:  BCF    F9E.0
001F4:  GOTO   0090
.................... }
.................... 
.................... void timer_init()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
*
0239A:  MOVLW  F8
0239C:  MOVWF  FF6
0239E:  MOVLW  01
023A0:  MOVWF  FF7
023A2:  MOVLW  00
023A4:  MOVWF  FF8
023A6:  CALL   22DC
....................    clear_interrupt(INT_TIMER1);
023AA:  BCF    F9E.0
....................    time_ms = 0;
023AC:  MOVLB  1
023AE:  CLRF   x81
023B0:  CLRF   x80
023B2:  CLRF   x7F
023B4:  CLRF   x7E
....................    time_sec = 0;
023B6:  CLRF   x85
023B8:  CLRF   x84
023BA:  CLRF   x83
023BC:  CLRF   x82
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
023BE:  MOVLW  8F
023C0:  MOVWF  FCD
023C2:  CLRF   FAA
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256|RTCC_8_BIT);
023C4:  MOVLW  D7
023C6:  MOVWF  FD5
....................    set_timer1(0); 
023C8:  CLRF   FCF
023CA:  CLRF   FCE
023CC:  NOP   
....................    enable_interrupts(INT_TIMER1);   
023CE:  BSF    F9D.0
....................    enable_interrupts(INT_TIMER0);
023D0:  BSF    FF2.5
....................    enable_interrupts(GLOBAL);
023D2:  MOVLW  C0
023D4:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
023D6:  MOVLW  0C
023D8:  MOVWF  FF6
023DA:  MOVLW  02
023DC:  MOVWF  FF7
023DE:  MOVLW  00
023E0:  MOVWF  FF8
023E2:  MOVLB  0
023E4:  CALL   22DC
023E8:  GOTO   12D1E (RETURN)
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    time_sec = new_sec;
*
0FEFE:  MOVFF  1A9,185
0FF02:  MOVFF  1A8,184
0FF06:  MOVFF  1A7,183
0FF0A:  MOVFF  1A6,182
0FF0E:  GOTO   1273E (RETURN)
.................... }
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return time_sec;
*
03C18:  MOVFF  182,00
03C1C:  MOVFF  183,01
03C20:  MOVFF  184,02
03C24:  MOVFF  185,03
03C28:  RETURN 0
.................... }
.................... 
.................... unsigned int16 get_current_msec()
.................... {
....................    return time_ms;
*
09B3A:  MOVLB  1
09B3C:  MOVF   x7E,W
09B3E:  MOVWF  01
09B40:  MOVF   x7F,W
09B42:  MOVWF  02
09B44:  MOVLB  0
09B46:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "hal/uart.c"
.................... #include "uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
00240:  GOTO   0244
00244:  GOTO   024E
00248:  BTFSS  4B.0
0024A:  GOTO   0282
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
0024E:  MOVF   4A,W
00250:  SUBLW  1F
00252:  BTFSS  FD8.0
00254:  GOTO   0282
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
00258:  MOVF   4A,W
0025A:  INCF   4A,F
0025C:  ANDLW  1F
0025E:  CLRF   03
00260:  ADDLW  2A
00262:  MOVWF  FE9
00264:  MOVLW  00
00266:  ADDWFC 03,W
00268:  MOVWF  FEA
0026A:  MOVFF  FEA,B2D
0026E:  MOVFF  FE9,B2C
00272:  GOTO   0218
00276:  MOVFF  B2D,FEA
0027A:  MOVFF  B2C,FE9
0027E:  MOVF   01,W
00280:  MOVWF  FEF
00282:  BCF    FA6.5
00284:  GOTO   0090
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
02370:  MOVLW  88
02372:  MOVWF  FF6
02374:  MOVLW  02
02376:  MOVWF  FF7
02378:  MOVLW  00
0237A:  MOVWF  FF8
0237C:  CALL   22DC
....................    enable_interrupts(INT_RDA3);
02380:  BSF    F61.5
....................    enable_interrupts(GLOBAL);
02382:  MOVLW  C0
02384:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
02386:  MOVLW  9A
02388:  MOVWF  FF6
0238A:  MOVLW  02
0238C:  MOVWF  FF7
0238E:  MOVLW  00
02390:  MOVWF  FF8
02392:  CALL   22DC
02396:  GOTO   12D1A (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
05762:  MOVFF  1E2,03
05766:  MOVLB  1
05768:  MOVF   xE1,W
0576A:  MOVWF  FE9
0576C:  MOVFF  03,FEA
05770:  MOVFF  FEF,1E3
05774:  MOVFF  1E0,FEA
05778:  MOVFF  1DF,FE9
0577C:  CLRF   00
0577E:  CLRF   02
05780:  MOVFF  1E3,01
05784:  MOVLB  0
05786:  CALL   234C
....................    *receive_signal_size = 0;
0578A:  MOVFF  1E2,03
0578E:  MOVLB  1
05790:  MOVF   xE1,W
05792:  MOVWF  FE9
05794:  MOVFF  03,FEA
05798:  CLRF   FEF
0579A:  MOVLB  0
0579C:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "hal/gpio.c"
.................... #include "cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "gpio.h"
.................... #ifndef GPIO_H
.................... #define GPIO_H
.................... 
.................... void gpio_init();
.................... void enable_negative_power();
.................... void disable_negative_power();
.................... void connect_port1();
.................... void disconnect_port1();
.................... void connect_port2();
.................... void disconnect_port2();
.................... 
.................... 
.................... // 
.................... void connect_negative_power1(int1 state);
.................... void connect_negative_power2(int1 state);
.................... #endif // GPIO_H
.................... 
.................... #include "../../lib/tool/types.h"
.................... #ifndef TYPES_H
.................... #define TYPES_H
.................... 
.................... #define bool int1
.................... 
.................... 
.................... 
.................... #endif // TYPES_H
.................... // End of types.h
.................... 
.................... 
.................... 
.................... void gpio_init() {
....................     enable_negative_power();
....................     disconnect_port1();
....................     disconnect_port2();
.................... }
.................... 
.................... void enable_negative_power() {
....................     output_low(EN_NPWR1);
.................... }
.................... 
.................... void connect_negative_power1(int1 state) {
....................     if (state) {
*
05224:  MOVLB  1
05226:  MOVF   x99,F
05228:  BTFSS  FD8.2
0522A:  BRA    5232
0522C:  MOVLB  0
0522E:  GOTO   523E
05232:  MOVLB  0
....................         output_low(EN_NPWR1);
05234:  MOVLW  17
05236:  MOVWF  F94
05238:  BCF    F8B.7
....................     } else {
0523A:  GOTO   5244
....................         output_high(EN_NPWR1);
0523E:  MOVLW  17
05240:  MOVWF  F94
05242:  BSF    F8B.7
....................     }
05244:  GOTO   12D78 (RETURN)
.................... }
.................... 
.................... void connect_negative_power2(int1 state) {
....................     if (state) {
....................         output_high(EN_NPWR2);
....................     } else {
....................         output_low(EN_NPWR2);
....................     }
.................... }
.................... 
.................... void connect_port1(){
....................     output_high(CONNECT_CIGS1);
*
05214:  MOVLW  17
05216:  MOVWF  F94
05218:  BSF    F8B.3
0521A:  RETURN 0
.................... }
.................... 
.................... void disconnect_port1(){
....................     output_low(CONNECT_CIGS1);
*
0926C:  MOVLW  17
0926E:  MOVWF  F94
09270:  BCF    F8B.3
09272:  RETURN 0
.................... }
.................... 
.................... void connect_port2(){
....................     output_high(CONNECT_CIGS2);
*
0521C:  MOVLW  17
0521E:  MOVWF  F94
05220:  BSF    F8B.5
05222:  RETURN 0
.................... }
.................... 
.................... void disconnect_port2(){
....................     output_low(CONNECT_CIGS2);
*
09274:  MOVLW  17
09276:  MOVWF  F94
09278:  BCF    F8B.5
0927A:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "device_driver/ad7490_driver.c"
.................... #include "ad7490_driver.h"                          // 同じデバイスフォルダのヘッダー
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/ad7490.h"               // ADCデバイスライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... // === AD7490 Control Word ===
.................... // Bit[15]   : WRITE (常に0)
.................... // Bit[14:13]: SEQ mode (シーケンス設定)
.................... // Bit[12]   : SHADOW (0=disabled, 1=enabled)
.................... // Bit[11]   : Don't Care
.................... // Bit[10]   : PM1 (Power Management)
.................... // Bit[9]    : PM0
.................... // Bit[8]    : REFSEL (0=internal, 1=external)
.................... // Bit[7]    : Coding (0=straight binary, 1=twos complement)
.................... // Bit[6]    : Don't Care
.................... // Bit[5]    : ADD2
.................... // Bit[4]    : ADD1
.................... // Bit[3]    : ADD0
.................... // Bit[2]    : DIFF (0=single-ended, 1=differential)
.................... // Bit[1:0]  : Don't Care
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000011
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000000
.................... 
.................... 
.................... // ----------------------------
.................... // WRITE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_WRITE_DISABLE = 0,  // 書き込み無効
....................     AD7490_WRITE_ENABLE  = 1   // 書き込み有効
.................... } ad7490_write_t;
.................... 
.................... // ----------------------------
.................... // SEQ bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SEQ_DISABLE = 0,
....................     AD7490_SEQ_ENABLE  = 1
.................... } ad7490_seq_t;
.................... 
.................... // ----------------------------
.................... // CODING bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CODING_BINARY  = 0, // ストレートバイナリ
....................     AD7490_CODING_TWOS    = 1  // Two’s complement
.................... } ad7490_coding_t;
.................... 
.................... // ----------------------------
.................... // RANGE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_RANGE_2REF  = 0, // 0〜2*REFIN
....................     AD7490_RANGE_REF   = 1  // 0〜REFIN
.................... } ad7490_range_t;
.................... 
.................... // ----------------------------
.................... // WEAK/TRI bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_DOUT_TRI   = 0, // Three-state
....................     AD7490_DOUT_WEAK  = 1  // Weakly driven
.................... } ad7490_dout_t;
.................... 
.................... // ----------------------------
.................... // SHADOW bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SHADOW_DISABLE = 0,
....................     AD7490_SHADOW_ENABLE  = 1
.................... } ad7490_shadow_t;
.................... 
.................... // ----------------------------
.................... // Power Mode (PM1, PM0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_PWR_NORMAL    = 0, // 00
....................     AD7490_PWR_FULLDOWN  = 1, // 01
....................     AD7490_PWR_AUTO      = 2, // 10
....................     AD7490_PWR_SHUTDOWN  = 3  // 11
.................... } ad7490_pwr_mode_t;
.................... 
.................... // ----------------------------
.................... // Channel Address (ADD3–ADD0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CH0  = 0,
....................     AD7490_CH1  = 1,
....................     AD7490_CH2  = 2,
....................     AD7490_CH3  = 3,
....................     AD7490_CH4  = 4,
....................     AD7490_CH5  = 5,
....................     AD7490_CH6  = 6,
....................     AD7490_CH7  = 7,
....................     AD7490_CH8  = 8,
....................     AD7490_CH9  = 9,
....................     AD7490_CH10 = 10,
....................     AD7490_CH11 = 11,
....................     AD7490_CH12 = 12,
....................     AD7490_CH13 = 13,
....................     AD7490_CH14 = 14,
....................     AD7490_CH15 = 15
.................... } ad7490_channel_t;
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... #define AD7490_MULTI_CHANNEL_MAX 4
.................... 
.................... unsigned int16 ad7490_make_single_channel_cmd(unsigned int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     // Set default values for all fields
....................     cmd.fields.reserved0 = 0; 
....................     cmd.fields.reserved1 = 0; 
....................     cmd.fields.reserved2 = 0; 
....................     cmd.fields.reserved3 = 0;
....................     cmd.fields.coding = AD7490_CODING_BINARY; 
....................     cmd.fields.range = AD7490_RANGE_REF; 
....................     cmd.fields.weak_tri = AD7490_DOUT_TRI; 
....................     cmd.fields.shadow = AD7490_SHADOW_DISABLE; 
....................     cmd.fields.pm0 = (AD7490_PM_NORMAL >> 0) & 1; 
....................     cmd.fields.pm1 = (AD7490_PM_NORMAL >> 1) & 1; 
....................     cmd.fields.add0 = (channel >> 0) & 1; 
....................     cmd.fields.add1 = (channel >> 1) & 1; 
....................     cmd.fields.add2 = (channel >> 2) & 1;     
....................     cmd.fields.add3 = (channel >> 3) & 1; 
....................     cmd.fields.seq = AD7490_SEQ_DISABLE; 
....................     cmd.fields.write = AD7490_WRITE_ENABLE;
.................... 
....................     return cmd.value;
.................... }
.................... 
.................... void ad7490_set_multi_channel(ad7490_channel_t channel, unsigned int8 num_channels)
.................... {
....................     ad7490_cmd_t cmd;
....................     // Set default values for all fields
....................     cmd.fields.reserved0 = 0; 
....................     cmd.fields.reserved1 = 0; 
....................     cmd.fields.reserved2 = 0; 
....................     cmd.fields.reserved3 = 0;
....................     cmd.fields.coding = AD7490_CODING_BINARY; 
....................     cmd.fields.range = AD7490_RANGE_REF; 
....................     cmd.fields.weak_tri = AD7490_DOUT_TRI; 
....................     cmd.fields.shadow = AD7490_SHADOW_DISABLE; 
....................     cmd.fields.pm0 = (AD7490_PM_NORMAL >> 0) & 1; 
....................     cmd.fields.pm1 = (AD7490_PM_NORMAL >> 1) & 1; 
....................     cmd.fields.add0 = (channel >> 0) & 1; 
....................     cmd.fields.add1 = (channel >> 1) & 1; 
....................     cmd.fields.add2 = (channel >> 2) & 1;     
....................     cmd.fields.add3 = (channel >> 3) & 1; 
....................     cmd.fields.seq = AD7490_SEQ_ENABLE; 
....................     cmd.fields.write = AD7490_WRITE_ENABLE;
.................... }
.................... 
.................... void ad7490_init()
.................... {
....................     fprintf(PC, "AD7490 Initialize\r\n");
*
025BE:  MOVLW  A6
025C0:  MOVWF  FF6
025C2:  MOVLW  02
025C4:  MOVWF  FF7
025C6:  MOVLW  00
025C8:  MOVWF  FF8
025CA:  CALL   22DC
....................     output_high(ADC_CS); 
025CE:  MOVLW  FD
025D0:  MOVWF  F93
025D2:  BSF    F8A.1
....................     delay_ms(10); 
025D4:  MOVLW  0A
025D6:  MOVLB  B
025D8:  MOVWF  x02
025DA:  MOVLB  0
025DC:  CALL   22AE
....................     unsigned int16 readdata = ad7490_read(ADC_CIGS1_CURR);
025E0:  MOVLW  01
025E2:  MOVLB  9
025E4:  MOVWF  xEE
025E6:  MOVLB  0
025E8:  CALL   24C2
025EC:  MOVFF  02,19A
025F0:  MOVFF  01,199
....................     delay_ms(1);
025F4:  MOVLW  01
025F6:  MOVLB  B
025F8:  MOVWF  x02
025FA:  MOVLB  0
025FC:  CALL   22AE
....................     fprintf(PC, "\t%04LX\r\n", readdata);
02600:  MOVLW  09
02602:  BTFSS  FA6.6
02604:  GOTO   2602
02608:  MOVLB  E
0260A:  MOVWF  xF9
0260C:  MOVFF  19A,9E8
02610:  MOVLW  37
02612:  MOVLB  9
02614:  MOVWF  xE9
02616:  MOVLB  0
02618:  CALL   2542
0261C:  MOVFF  199,9E8
02620:  MOVLW  37
02622:  MOVLB  9
02624:  MOVWF  xE9
02626:  MOVLB  0
02628:  CALL   2542
0262C:  MOVLW  0D
0262E:  BTFSS  FA6.6
02630:  GOTO   262E
02634:  MOVLB  E
02636:  MOVWF  xF9
02638:  MOVLW  0A
0263A:  MOVLB  0
0263C:  BTFSS  FA6.6
0263E:  GOTO   263C
02642:  MOVLB  E
02644:  MOVWF  xF9
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
02646:  MOVLB  1
02648:  INCFSZ x99,W
0264A:  BRA    2650
0264C:  BRA    2656
0264E:  MOVLB  0
02650:  MOVLB  0
02652:  GOTO   266E
02656:  MOVLB  0
02658:  MOVLB  1
0265A:  INCFSZ x9A,W
0265C:  BRA    2662
0265E:  BRA    2668
02660:  MOVLB  0
02662:  MOVLB  0
02664:  GOTO   266E
02668:  MOVLB  0
0266A:  GOTO   268E
0266E:  MOVLB  1
02670:  MOVF   x99,F
02672:  BTFSC  FD8.2
02674:  BRA    267C
02676:  MOVLB  0
02678:  GOTO   26A2
0267C:  MOVLB  0
0267E:  MOVLB  1
02680:  MOVF   x9A,F
02682:  BTFSC  FD8.2
02684:  BRA    268C
02686:  MOVLB  0
02688:  GOTO   26A2
0268C:  MOVLB  0
....................         fprintf(PC, "\tConnect error!\r\n");
0268E:  MOVLW  BA
02690:  MOVWF  FF6
02692:  MOVLW  02
02694:  MOVWF  FF7
02696:  MOVLW  00
02698:  MOVWF  FF8
0269A:  CALL   22DC
....................     } else {
0269E:  GOTO   26B2
....................         fprintf(PC, "\tConnect successful\r\n");
026A2:  MOVLW  CC
026A4:  MOVWF  FF6
026A6:  MOVLW  02
026A8:  MOVWF  FF7
026AA:  MOVLW  00
026AC:  MOVWF  FF8
026AE:  CALL   22DC
....................     }
....................     fprintf(PC, "\tComplete\r\n");
026B2:  MOVLW  E2
026B4:  MOVWF  FF6
026B6:  MOVLW  02
026B8:  MOVWF  FF7
026BA:  MOVLW  00
026BC:  MOVWF  FF8
026BE:  CALL   22DC
026C2:  GOTO   12D22 (RETURN)
.................... }
.................... 
.................... unsigned int16 ad7490_read(int8 channel)
*
024C2:  MOVFF  9EE,9F5
024C6:  GOTO   23EC
024CA:  MOVFF  02,9F0
024CE:  MOVFF  01,9EF
.................... {   
....................     unsigned int16 cmd = ad7490_make_cmd(channel);
....................     // fprintf(PC, "\t[ADC] Command: %04LX\r\n", cmd);
....................     output_low(ADC_CS); 
024D2:  MOVLW  FD
024D4:  MOVWF  F93
024D6:  BCF    F8A.1
....................     delay_us(1); 
024D8:  BRA    24DA
024DA:  BRA    24DC
....................     spi_xfer(ADC_STREAM, cmd); 
024DC:  MOVFF  9F0,9F6
024E0:  MOVFF  9EF,9F5
024E4:  MOVLW  10
024E6:  MOVLB  9
024E8:  MOVWF  xF7
024EA:  MOVLW  01
024EC:  MOVWF  xF8
024EE:  MOVLB  0
024F0:  CALL   245C
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd);
....................     #endif
....................     output_high(ADC_CS); 
024F4:  MOVLW  FD
024F6:  MOVWF  F93
024F8:  BSF    F8A.1
....................     delay_us(1);
024FA:  BRA    24FC
024FC:  BRA    24FE
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
024FE:  MOVLW  FD
02500:  MOVWF  F93
02502:  BCF    F8A.1
....................     delay_us(1);
02504:  BRA    2506
02506:  BRA    2508
....................     unsigned int16 ans = spi_xfer(ADC_STREAM, 0x0000);
02508:  MOVLB  9
0250A:  CLRF   xF6
0250C:  CLRF   xF5
0250E:  MOVLW  10
02510:  MOVWF  xF7
02512:  MOVLW  01
02514:  MOVWF  xF8
02516:  MOVLB  0
02518:  CALL   245C
0251C:  MOVFF  02,9F2
02520:  MOVFF  01,9F1
....................     output_high(ADC_CS); 
02524:  MOVLW  FD
02526:  MOVWF  F93
02528:  BSF    F8A.1
....................     unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
0252A:  MOVLB  9
0252C:  MOVF   xF1,W
0252E:  MOVWF  xF3
02530:  MOVF   xF2,W
02532:  ANDLW  0F
02534:  MOVWF  xF4
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata);
....................     #endif
....................     return readdata;
02536:  MOVF   xF3,W
02538:  MOVWF  01
0253A:  MOVF   xF4,W
0253C:  MOVWF  02
0253E:  MOVLB  0
02540:  RETURN 0
.................... }
.................... 
.................... void ad7490_read_2port(unsigned int8 channel1, unsigned int8 channel2, unsigned int16 *data1, unsigned int16 *data2)
.................... {   
....................     unsigned int16 cmd1 = ad7490_make_cmd(channel1);
....................     unsigned int16 cmd2 = ad7490_make_cmd(channel2);
....................     // fprintf(PC, "\t[ADC] Command: %04LX\r\n", cmd);
....................     output_low(ADC_CS); 
....................     delay_us(1); 
....................     spi_xfer(ADC_STREAM, cmd1); 
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd1);
....................     #endif
....................     output_high(ADC_CS); 
....................     delay_us(1);
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
....................     delay_us(1);
....................     unsigned int16 ans1 = spi_xfer(ADC_STREAM, cmd2);
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd2);
....................     #endif
....................     output_high(ADC_CS); 
....................     delay_us(1);
....................     unsigned int16 ans2 = spi_xfer(ADC_STREAM, 0x0000);
....................     output_high(ADC_CS); 
....................     unsigned int16 readdata1 = ans1 & 0x0FFF; //Conver LSB <--> MSB
....................     unsigned int16 readdata2 = ans2 & 0x0FFF; //Conver LSB <--> MSB
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata1);
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata2);
....................     #endif
....................     *data1 = readdata1;
....................     *data2 = readdata2;
.................... }
.................... 
.................... 
.................... // End of file
.................... 
.................... #include "device_driver/mcp4901_driver.c"
.................... #include "mcp4901_driver.h"                        
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/cigs_config.h"             
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mcp4901.h"       
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // #define MCP4901_DEBUG
.................... 
.................... void mcp4901_init()
.................... {
....................     fprintf(PC, "MCP4901 Initialize\r\n");
*
028EE:  MOVLW  EE
028F0:  MOVWF  FF6
028F2:  MOVLW  02
028F4:  MOVWF  FF7
028F6:  MOVLW  00
028F8:  MOVWF  FF8
028FA:  CALL   22DC
....................     output_high(DAC1_CS); 
028FE:  MOVLW  3F
02900:  MOVWF  F95
02902:  BSF    F8C.7
....................     output_high(DAC2_CS); 
02904:  MOVLW  3F
02906:  MOVWF  F95
02908:  BSF    F8C.6
....................     delay_ms(10); 
0290A:  MOVLW  0A
0290C:  MOVLB  B
0290E:  MOVWF  x02
02910:  MOVLB  0
02912:  CALL   22AE
....................     mcp4901_1_write(10); 
02916:  MOVLB  9
02918:  CLRF   xDD
0291A:  MOVLW  0A
0291C:  MOVWF  xDC
0291E:  MOVLB  0
02920:  CALL   2872
....................     mcp4901_2_write(10); 
02924:  MOVLB  9
02926:  CLRF   xDD
02928:  MOVLW  0A
0292A:  MOVWF  xDC
0292C:  MOVLB  0
0292E:  CALL   28B0
....................     unsigned int16 readdata;
....................     readdata = ad7490_read(ADC_CIGS1_CURR); 
02932:  MOVLW  01
02934:  MOVLB  9
02936:  MOVWF  xEE
02938:  MOVLB  0
0293A:  CALL   24C2
0293E:  MOVFF  02,19A
02942:  MOVFF  01,199
....................     fprintf(PC, "%04LX\r\n", readdata);
02946:  MOVFF  19A,9E8
0294A:  MOVLW  37
0294C:  MOVLB  9
0294E:  MOVWF  xE9
02950:  MOVLB  0
02952:  CALL   2542
02956:  MOVFF  199,9E8
0295A:  MOVLW  37
0295C:  MOVLB  9
0295E:  MOVWF  xE9
02960:  MOVLB  0
02962:  CALL   2542
02966:  MOVLW  0D
02968:  BTFSS  FA6.6
0296A:  GOTO   2968
0296E:  MOVLB  E
02970:  MOVWF  xF9
02972:  MOVLW  0A
02974:  MOVLB  0
02976:  BTFSS  FA6.6
02978:  GOTO   2976
0297C:  MOVLB  E
0297E:  MOVWF  xF9
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
02980:  MOVLB  1
02982:  INCFSZ x99,W
02984:  BRA    298A
02986:  BRA    2990
02988:  MOVLB  0
0298A:  MOVLB  0
0298C:  GOTO   29A8
02990:  MOVLB  0
02992:  MOVLB  1
02994:  INCFSZ x9A,W
02996:  BRA    299C
02998:  BRA    29A2
0299A:  MOVLB  0
0299C:  MOVLB  0
0299E:  GOTO   29A8
029A2:  MOVLB  0
029A4:  GOTO   29C8
029A8:  MOVLB  1
029AA:  MOVF   x99,F
029AC:  BTFSC  FD8.2
029AE:  BRA    29B6
029B0:  MOVLB  0
029B2:  GOTO   29DC
029B6:  MOVLB  0
029B8:  MOVLB  1
029BA:  MOVF   x9A,F
029BC:  BTFSC  FD8.2
029BE:  BRA    29C6
029C0:  MOVLB  0
029C2:  GOTO   29DC
029C6:  MOVLB  0
....................         fprintf(PC, "\t[DAC Port 1] Connect error!\r\n");
029C8:  MOVLW  04
029CA:  MOVWF  FF6
029CC:  MOVLW  03
029CE:  MOVWF  FF7
029D0:  MOVLW  00
029D2:  MOVWF  FF8
029D4:  CALL   22DC
....................     } else {
029D8:  GOTO   29EC
....................         fprintf(PC, "\t[DAC Port 1] Connect successful\r\n");
029DC:  MOVLW  24
029DE:  MOVWF  FF6
029E0:  MOVLW  03
029E2:  MOVWF  FF7
029E4:  MOVLW  00
029E6:  MOVWF  FF8
029E8:  CALL   22DC
....................     }
....................     fprintf(PC, "%04LX\r\n", readdata);
029EC:  MOVFF  19A,9E8
029F0:  MOVLW  37
029F2:  MOVLB  9
029F4:  MOVWF  xE9
029F6:  MOVLB  0
029F8:  CALL   2542
029FC:  MOVFF  199,9E8
02A00:  MOVLW  37
02A02:  MOVLB  9
02A04:  MOVWF  xE9
02A06:  MOVLB  0
02A08:  CALL   2542
02A0C:  MOVLW  0D
02A0E:  BTFSS  FA6.6
02A10:  GOTO   2A0E
02A14:  MOVLB  E
02A16:  MOVWF  xF9
02A18:  MOVLW  0A
02A1A:  MOVLB  0
02A1C:  BTFSS  FA6.6
02A1E:  GOTO   2A1C
02A22:  MOVLB  E
02A24:  MOVWF  xF9
....................     readdata = ad7490_read(ADC_CIGS2_CURR); 
02A26:  MOVLW  05
02A28:  MOVLB  9
02A2A:  MOVWF  xEE
02A2C:  MOVLB  0
02A2E:  CALL   24C2
02A32:  MOVFF  02,19A
02A36:  MOVFF  01,199
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
02A3A:  MOVLB  1
02A3C:  INCFSZ x99,W
02A3E:  BRA    2A44
02A40:  BRA    2A4A
02A42:  MOVLB  0
02A44:  MOVLB  0
02A46:  GOTO   2A62
02A4A:  MOVLB  0
02A4C:  MOVLB  1
02A4E:  INCFSZ x9A,W
02A50:  BRA    2A56
02A52:  BRA    2A5C
02A54:  MOVLB  0
02A56:  MOVLB  0
02A58:  GOTO   2A62
02A5C:  MOVLB  0
02A5E:  GOTO   2A82
02A62:  MOVLB  1
02A64:  MOVF   x99,F
02A66:  BTFSC  FD8.2
02A68:  BRA    2A70
02A6A:  MOVLB  0
02A6C:  GOTO   2A96
02A70:  MOVLB  0
02A72:  MOVLB  1
02A74:  MOVF   x9A,F
02A76:  BTFSC  FD8.2
02A78:  BRA    2A80
02A7A:  MOVLB  0
02A7C:  GOTO   2A96
02A80:  MOVLB  0
....................         fprintf(PC, "\t[DAC Port 2] Connect error!\r\n");
02A82:  MOVLW  48
02A84:  MOVWF  FF6
02A86:  MOVLW  03
02A88:  MOVWF  FF7
02A8A:  MOVLW  00
02A8C:  MOVWF  FF8
02A8E:  CALL   22DC
....................     } else {
02A92:  GOTO   2AA6
....................         fprintf(PC, "\t[DAC Port 2] Connect successful\r\n");
02A96:  MOVLW  68
02A98:  MOVWF  FF6
02A9A:  MOVLW  03
02A9C:  MOVWF  FF7
02A9E:  MOVLW  00
02AA0:  MOVWF  FF8
02AA2:  CALL   22DC
....................     }
....................     fprintf(PC, "\tComplete\r\n");
02AA6:  MOVLW  8C
02AA8:  MOVWF  FF6
02AAA:  MOVLW  03
02AAC:  MOVWF  FF7
02AAE:  MOVLW  00
02AB0:  MOVWF  FF8
02AB2:  CALL   22DC
02AB6:  GOTO   12D26 (RETURN)
.................... }
.................... 
.................... 
.................... void mcp4901_1_write(unsigned int16 value)
*
02872:  MOVFF  9DD,9E1
02876:  MOVFF  9DC,9E0
0287A:  CALL   26C6
0287E:  MOVFF  02,9DF
02882:  MOVFF  01,9DE
.................... {
....................     unsigned int16 cmd = mcp4901_make_cmd(value);
....................     #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................     #endif
....................     output_low(DAC1_CS); 
02886:  MOVLW  3F
02888:  MOVWF  F95
0288A:  BCF    F8C.7
....................     delay_us(1); 
0288C:  BRA    288E
0288E:  BRA    2890
....................     spi_xfer(DAC_STREAM, cmd); 
02890:  MOVFF  9DF,9E1
02894:  MOVFF  9DE,9E0
02898:  MOVLW  10
0289A:  MOVLB  9
0289C:  MOVWF  xE2
0289E:  MOVLW  01
028A0:  MOVWF  xE3
028A2:  MOVLB  0
028A4:  CALL   281A
....................     output_high(DAC1_CS); 
028A8:  MOVLW  3F
028AA:  MOVWF  F95
028AC:  BSF    F8C.7
028AE:  RETURN 0
.................... }
.................... 
.................... void mcp4901_2_write(unsigned int16 value)
028B0:  MOVFF  9DD,9E1
028B4:  MOVFF  9DC,9E0
028B8:  CALL   26C6
028BC:  MOVFF  02,9DF
028C0:  MOVFF  01,9DE
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC2_CS); 
028C4:  MOVLW  3F
028C6:  MOVWF  F95
028C8:  BCF    F8C.6
....................    delay_us(1); 
028CA:  BRA    28CC
028CC:  BRA    28CE
....................    spi_xfer(DAC_STREAM, cmd); 
028CE:  MOVFF  9DF,9E1
028D2:  MOVFF  9DE,9E0
028D6:  MOVLW  10
028D8:  MOVLB  9
028DA:  MOVWF  xE2
028DC:  MOVLW  01
028DE:  MOVWF  xE3
028E0:  MOVLB  0
028E2:  CALL   281A
....................    output_high(DAC2_CS); 
028E6:  MOVLW  3F
028E8:  MOVWF  F95
028EA:  BSF    F8C.6
028EC:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... 
.................... // ライブラリ実装ファイル
.................... #include "../lib/device/ad7490.c"
.................... // #include "ad7490.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 ad7490_readdata(unsigned int16 channel)
.................... {
....................     spi_xfer(ADC_STREAM, channel); // Dummy transfer to start communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC, "\t[ADC] <<< %04LX\r\n", channel);
....................     #endif
....................     unsigned int16 ans = spi_xfer(ADC_STREAM);
....................     return ans & 0x0FFF; //Conver LSB <--> MSB
.................... }
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     cmd.fields.reserved0 = 0; // Reserved bits
*
023EC:  MOVLB  9
023EE:  BCF    xF6.0
....................     cmd.fields.reserved1 = 0; // Reserved bits
023F0:  BCF    xF6.1
....................     cmd.fields.reserved2 = 0; // Reserved bits
023F2:  BCF    xF6.2
....................     cmd.fields.reserved3 = 0;
023F4:  BCF    xF6.3
....................     cmd.fields.coding =
....................      1; // Two's complement
023F6:  BSF    xF6.4
....................     cmd.fields.range = 0; // Normal mode
023F8:  BCF    xF6.5
....................     cmd.fields.weak_tri = 0; // Strong trigger
023FA:  BCF    xF6.6
....................     cmd.fields.shadow = 0; // Direct access
023FC:  BCF    xF6.7
....................     cmd.fields.pm0 = AD7490_PM_NORMAL & 0b00000001; // Power mode bits
023FE:  BSF    xF7.0
....................     cmd.fields.pm1 = (AD7490_PM_NORMAL >> 1) & 0b00000001; // Power mode bits
02400:  BSF    xF7.1
....................     cmd.fields.add0 = (channel >> 0) & 0b00000001; // Channel address bits
02402:  MOVF   xF5,W
02404:  ANDLW  01
02406:  MOVWF  01
02408:  BCF    xF7.2
0240A:  BTFSC  01.0
0240C:  BSF    xF7.2
....................     cmd.fields.add1 = (channel >> 1) & 0b00000001; // Channel address bits
0240E:  BCF    FD8.0
02410:  RRCF   xF5,W
02412:  ANDLW  01
02414:  MOVWF  01
02416:  BCF    xF7.3
02418:  BTFSC  01.0
0241A:  BSF    xF7.3
....................     cmd.fields.add2 = (channel >> 2) & 0b00000001; // Channel address bits
0241C:  RRCF   xF5,W
0241E:  MOVWF  00
02420:  RRCF   00,F
02422:  MOVLW  3F
02424:  ANDWF  00,F
02426:  MOVF   00,W
02428:  ANDLW  01
0242A:  MOVWF  01
0242C:  BCF    xF7.4
0242E:  BTFSC  01.0
02430:  BSF    xF7.4
....................     cmd.fields.add3 = (channel >> 3) & 0b00000001; // Channel address bits
02432:  RRCF   xF5,W
02434:  MOVWF  00
02436:  RRCF   00,F
02438:  RRCF   00,F
0243A:  MOVLW  1F
0243C:  ANDWF  00,F
0243E:  MOVF   00,W
02440:  ANDLW  01
02442:  MOVWF  01
02444:  BCF    xF7.5
02446:  BTFSC  01.0
02448:  BSF    xF7.5
....................     cmd.fields.seq = 0; // Random mode
0244A:  BCF    xF7.6
....................     cmd.fields.write = 1; // Read operation
0244C:  BSF    xF7.7
....................     return cmd.value;
0244E:  MOVF   xF6,W
02450:  MOVWF  01
02452:  MOVF   xF7,W
02454:  MOVWF  02
02456:  MOVLB  0
02458:  GOTO   24CA (RETURN)
.................... }
.................... 
.................... #include "../lib/device/mcp4901.c"
.................... // #include "mcp4901.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value)
.................... {
....................    mcp4901_cmd_t cmd;
....................    cmd.fields.startbit = 0; // Start bit
*
026C6:  MOVLB  9
026C8:  BCF    xE3.7
....................    cmd.fields.buffer = 1; // Buffer used
026CA:  BSF    xE3.6
....................    cmd.fields.gain = 1; // Gain 1x
026CC:  BSF    xE3.5
....................    cmd.fields.shutdown = 1; // Normal operation
026CE:  BSF    xE3.4
....................    cmd.fields.data7 = (value >> 7) & 0x01;
026D0:  RRCF   xE1,W
026D2:  MOVWF  xE5
026D4:  RRCF   xE0,W
026D6:  MOVWF  xE4
026D8:  RRCF   xE5,F
026DA:  RRCF   xE4,F
026DC:  RRCF   xE5,F
026DE:  RRCF   xE4,F
026E0:  RRCF   xE5,F
026E2:  RRCF   xE4,F
026E4:  RRCF   xE5,F
026E6:  RRCF   xE4,F
026E8:  RRCF   xE5,F
026EA:  RRCF   xE4,F
026EC:  RRCF   xE5,F
026EE:  RRCF   xE4,F
026F0:  MOVLW  01
026F2:  ANDWF  xE5,F
026F4:  MOVF   xE4,W
026F6:  ANDLW  01
026F8:  MOVWF  00
026FA:  CLRF   03
026FC:  MOVF   00,W
026FE:  MOVWF  01
02700:  BCF    xE3.3
02702:  BTFSC  01.0
02704:  BSF    xE3.3
....................    cmd.fields.data6 = (value >> 6) & 0x01;
02706:  RRCF   xE1,W
02708:  MOVWF  xE5
0270A:  RRCF   xE0,W
0270C:  MOVWF  xE4
0270E:  RRCF   xE5,F
02710:  RRCF   xE4,F
02712:  RRCF   xE5,F
02714:  RRCF   xE4,F
02716:  RRCF   xE5,F
02718:  RRCF   xE4,F
0271A:  RRCF   xE5,F
0271C:  RRCF   xE4,F
0271E:  RRCF   xE5,F
02720:  RRCF   xE4,F
02722:  MOVLW  03
02724:  ANDWF  xE5,F
02726:  MOVF   xE4,W
02728:  ANDLW  01
0272A:  MOVWF  00
0272C:  CLRF   03
0272E:  MOVF   00,W
02730:  MOVWF  01
02732:  BCF    xE3.2
02734:  BTFSC  01.0
02736:  BSF    xE3.2
....................    cmd.fields.data5 = (value >> 5) & 0x01;
02738:  RRCF   xE1,W
0273A:  MOVWF  xE5
0273C:  RRCF   xE0,W
0273E:  MOVWF  xE4
02740:  RRCF   xE5,F
02742:  RRCF   xE4,F
02744:  RRCF   xE5,F
02746:  RRCF   xE4,F
02748:  RRCF   xE5,F
0274A:  RRCF   xE4,F
0274C:  RRCF   xE5,F
0274E:  RRCF   xE4,F
02750:  MOVLW  07
02752:  ANDWF  xE5,F
02754:  MOVF   xE4,W
02756:  ANDLW  01
02758:  MOVWF  00
0275A:  CLRF   03
0275C:  MOVF   00,W
0275E:  MOVWF  01
02760:  BCF    xE3.1
02762:  BTFSC  01.0
02764:  BSF    xE3.1
....................    cmd.fields.data4 = (value >> 4) & 0x01;
02766:  RRCF   xE1,W
02768:  MOVWF  xE5
0276A:  RRCF   xE0,W
0276C:  MOVWF  xE4
0276E:  RRCF   xE5,F
02770:  RRCF   xE4,F
02772:  RRCF   xE5,F
02774:  RRCF   xE4,F
02776:  RRCF   xE5,F
02778:  RRCF   xE4,F
0277A:  MOVLW  0F
0277C:  ANDWF  xE5,F
0277E:  MOVF   xE4,W
02780:  ANDLW  01
02782:  MOVWF  00
02784:  CLRF   03
02786:  MOVF   00,W
02788:  MOVWF  01
0278A:  BCF    xE3.0
0278C:  BTFSC  01.0
0278E:  BSF    xE3.0
....................    cmd.fields.data3 = (value >> 3) & 0x01;
02790:  RRCF   xE1,W
02792:  MOVWF  xE5
02794:  RRCF   xE0,W
02796:  MOVWF  xE4
02798:  RRCF   xE5,F
0279A:  RRCF   xE4,F
0279C:  RRCF   xE5,F
0279E:  RRCF   xE4,F
027A0:  MOVLW  1F
027A2:  ANDWF  xE5,F
027A4:  MOVF   xE4,W
027A6:  ANDLW  01
027A8:  MOVWF  00
027AA:  CLRF   03
027AC:  MOVF   00,W
027AE:  MOVWF  01
027B0:  BCF    xE2.7
027B2:  BTFSC  01.0
027B4:  BSF    xE2.7
....................    cmd.fields.data2 = (value >> 2) & 0x01;
027B6:  RRCF   xE1,W
027B8:  MOVWF  xE5
027BA:  RRCF   xE0,W
027BC:  MOVWF  xE4
027BE:  RRCF   xE5,F
027C0:  RRCF   xE4,F
027C2:  MOVLW  3F
027C4:  ANDWF  xE5,F
027C6:  MOVF   xE4,W
027C8:  ANDLW  01
027CA:  MOVWF  00
027CC:  CLRF   03
027CE:  MOVF   00,W
027D0:  MOVWF  01
027D2:  BCF    xE2.6
027D4:  BTFSC  01.0
027D6:  BSF    xE2.6
....................    cmd.fields.data1 = (value >> 1) & 0x01;
027D8:  BCF    FD8.0
027DA:  RRCF   xE1,W
027DC:  MOVWF  xE5
027DE:  RRCF   xE0,W
027E0:  MOVWF  xE4
027E2:  MOVF   xE4,W
027E4:  ANDLW  01
027E6:  MOVWF  00
027E8:  CLRF   03
027EA:  MOVF   00,W
027EC:  MOVWF  01
027EE:  BCF    xE2.5
027F0:  BTFSC  01.0
027F2:  BSF    xE2.5
....................    cmd.fields.data0 = value & 0x01; // LSB of the data
027F4:  MOVF   xE0,W
027F6:  ANDLW  01
027F8:  MOVWF  00
027FA:  CLRF   03
027FC:  MOVF   00,W
027FE:  MOVWF  01
02800:  BCF    xE2.4
02802:  BTFSC  01.0
02804:  BSF    xE2.4
....................    cmd.fields.reserved = 0; // Reserved bits
02806:  BCF    xE2.3
....................    cmd.fields.reserved2 = 0; // Reserved bits
02808:  BCF    xE2.2
....................    cmd.fields.reserved3 = 0; // Reserved bits
0280A:  BCF    xE2.1
....................    cmd.fields.reserved4 = 0; // Reserved bits
0280C:  BCF    xE2.0
.................... 
....................    return cmd.value;
0280E:  MOVF   xE2,W
02810:  MOVWF  01
02812:  MOVF   xE3,W
02814:  MOVWF  02
02816:  MOVLB  0
02818:  RETURN 0
.................... }
.................... 
.................... #include "../lib/device/mt25q.c"
.................... #include "mt25q.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, unsigned int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
03C2A:  MOVLB  B
03C2C:  MOVF   x02,W
03C2E:  XORLW  00
03C30:  MOVLB  0
03C32:  BTFSC  FD8.2
03C34:  GOTO   3C44
03C38:  XORLW  01
03C3A:  BTFSC  FD8.2
03C3C:  GOTO   3CAC
03C40:  GOTO   3D14
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03C44:  MOVLB  B
03C46:  CLRF   x0B
03C48:  CLRF   x0A
03C4A:  MOVLB  0
03C4C:  MOVLB  B
03C4E:  MOVF   x0B,W
03C50:  SUBWF  x09,W
03C52:  BTFSC  FD8.0
03C54:  BRA    3C5C
03C56:  MOVLB  0
03C58:  GOTO   3CA8
03C5C:  MOVLB  0
03C5E:  BTFSS  FD8.2
03C60:  GOTO   3C76
03C64:  MOVLB  B
03C66:  MOVF   x08,W
03C68:  SUBWF  x0A,W
03C6A:  BTFSS  FD8.0
03C6C:  BRA    3C74
03C6E:  MOVLB  0
03C70:  GOTO   3CA8
03C74:  MOVLB  0
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
03C76:  MOVLB  B
03C78:  MOVF   x06,W
03C7A:  ADDWF  x0A,W
03C7C:  MOVWF  FE9
03C7E:  MOVF   x07,W
03C80:  ADDWFC x0B,W
03C82:  MOVWF  FEA
03C84:  MOVFF  FEF,B0E
03C88:  MOVFF  B0E,B24
03C8C:  MOVLW  08
03C8E:  MOVWF  x25
03C90:  MOVLW  01
03C92:  MOVWF  x26
03C94:  MOVLB  0
03C96:  CALL   2B0E
03C9A:  MOVLB  B
03C9C:  INCF   x0A,F
03C9E:  BTFSC  FD8.2
03CA0:  INCF   x0B,F
03CA2:  MOVLB  0
03CA4:  GOTO   3C4C
....................          break;
03CA8:  GOTO   3D18
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03CAC:  MOVLB  B
03CAE:  CLRF   x0D
03CB0:  CLRF   x0C
03CB2:  MOVLB  0
03CB4:  MOVLB  B
03CB6:  MOVF   x0D,W
03CB8:  SUBWF  x09,W
03CBA:  BTFSC  FD8.0
03CBC:  BRA    3CC4
03CBE:  MOVLB  0
03CC0:  GOTO   3D10
03CC4:  MOVLB  0
03CC6:  BTFSS  FD8.2
03CC8:  GOTO   3CDE
03CCC:  MOVLB  B
03CCE:  MOVF   x08,W
03CD0:  SUBWF  x0C,W
03CD2:  BTFSS  FD8.0
03CD4:  BRA    3CDC
03CD6:  MOVLB  0
03CD8:  GOTO   3D10
03CDC:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
03CDE:  MOVLB  B
03CE0:  MOVF   x06,W
03CE2:  ADDWF  x0C,W
03CE4:  MOVWF  FE9
03CE6:  MOVF   x07,W
03CE8:  ADDWFC x0D,W
03CEA:  MOVWF  FEA
03CEC:  MOVFF  FEF,B0E
03CF0:  MOVFF  B0E,B24
03CF4:  MOVLW  08
03CF6:  MOVWF  x25
03CF8:  MOVLW  01
03CFA:  MOVWF  x26
03CFC:  MOVLB  0
03CFE:  CALL   2B6E
03D02:  MOVLB  B
03D04:  INCF   x0C,F
03D06:  BTFSC  FD8.2
03D08:  INCF   x0D,F
03D0A:  MOVLB  0
03D0C:  GOTO   3CB4
....................          break;
03D10:  GOTO   3D18
....................          
....................       default:
....................          break;
03D14:  GOTO   3D18
....................    }
....................    return;
03D18:  RETURN 0
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, unsigned int8 *write_data, unsigned int16 write_amount, unsigned int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
02BCE:  MOVLB  B
02BD0:  MOVF   x08,W
02BD2:  XORLW  00
02BD4:  MOVLB  0
02BD6:  BTFSC  FD8.2
02BD8:  GOTO   2BE8
02BDC:  XORLW  01
02BDE:  BTFSC  FD8.2
02BE0:  GOTO   2CF2
02BE4:  GOTO   2DFC
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02BE8:  MOVLB  B
02BEA:  CLRF   x17
02BEC:  CLRF   x16
02BEE:  MOVLB  0
02BF0:  MOVLB  B
02BF2:  MOVF   x17,W
02BF4:  SUBWF  x0F,W
02BF6:  BTFSC  FD8.0
02BF8:  BRA    2C00
02BFA:  MOVLB  0
02BFC:  GOTO   2C4C
02C00:  MOVLB  0
02C02:  BTFSS  FD8.2
02C04:  GOTO   2C1A
02C08:  MOVLB  B
02C0A:  MOVF   x0E,W
02C0C:  SUBWF  x16,W
02C0E:  BTFSS  FD8.0
02C10:  BRA    2C18
02C12:  MOVLB  0
02C14:  GOTO   2C4C
02C18:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
02C1A:  MOVLB  B
02C1C:  MOVF   x0C,W
02C1E:  ADDWF  x16,W
02C20:  MOVWF  FE9
02C22:  MOVF   x0D,W
02C24:  ADDWFC x17,W
02C26:  MOVWF  FEA
02C28:  MOVFF  FEF,B22
02C2C:  MOVFF  B22,B24
02C30:  MOVLW  08
02C32:  MOVWF  x25
02C34:  MOVLW  01
02C36:  MOVWF  x26
02C38:  MOVLB  0
02C3A:  CALL   2B0E
02C3E:  MOVLB  B
02C40:  INCF   x16,F
02C42:  BTFSC  FD8.2
02C44:  INCF   x17,F
02C46:  MOVLB  0
02C48:  GOTO   2BF0
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
02C4C:  MOVLB  B
02C4E:  CLRF   x1B
02C50:  CLRF   x1A
02C52:  CLRF   x19
02C54:  CLRF   x18
02C56:  MOVLB  0
02C58:  MOVLB  B
02C5A:  MOVF   x1B,W
02C5C:  SUBWF  x15,W
02C5E:  BTFSC  FD8.0
02C60:  BRA    2C68
02C62:  MOVLB  0
02C64:  GOTO   2CEE
02C68:  MOVLB  0
02C6A:  BTFSS  FD8.2
02C6C:  GOTO   2CB2
02C70:  MOVLB  B
02C72:  MOVF   x1A,W
02C74:  SUBWF  x14,W
02C76:  BTFSC  FD8.0
02C78:  BRA    2C80
02C7A:  MOVLB  0
02C7C:  GOTO   2CEE
02C80:  MOVLB  0
02C82:  BTFSS  FD8.2
02C84:  GOTO   2CB2
02C88:  MOVLB  B
02C8A:  MOVF   x19,W
02C8C:  SUBWF  x13,W
02C8E:  BTFSC  FD8.0
02C90:  BRA    2C98
02C92:  MOVLB  0
02C94:  GOTO   2CEE
02C98:  MOVLB  0
02C9A:  BTFSS  FD8.2
02C9C:  GOTO   2CB2
02CA0:  MOVLB  B
02CA2:  MOVF   x12,W
02CA4:  SUBWF  x18,W
02CA6:  BTFSS  FD8.0
02CA8:  BRA    2CB0
02CAA:  MOVLB  0
02CAC:  GOTO   2CEE
02CB0:  MOVLB  0
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
02CB2:  MOVLB  B
02CB4:  MOVF   x10,W
02CB6:  ADDWF  x18,W
02CB8:  MOVWF  FE9
02CBA:  MOVF   x11,W
02CBC:  ADDWFC x19,W
02CBE:  MOVWF  FEA
02CC0:  MOVLW  02
02CC2:  MOVWF  x24
02CC4:  MOVLW  08
02CC6:  MOVWF  x25
02CC8:  MOVLW  01
02CCA:  MOVWF  x26
02CCC:  MOVLB  0
02CCE:  CALL   2B0E
02CD2:  MOVFF  01,FEF
02CD6:  MOVLW  01
02CD8:  MOVLB  B
02CDA:  ADDWF  x18,F
02CDC:  BTFSC  FD8.0
02CDE:  INCF   x19,F
02CE0:  BTFSC  FD8.2
02CE2:  INCF   x1A,F
02CE4:  BTFSC  FD8.2
02CE6:  INCF   x1B,F
02CE8:  MOVLB  0
02CEA:  GOTO   2C58
....................          break;
02CEE:  GOTO   2E00
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02CF2:  MOVLB  B
02CF4:  CLRF   x1D
02CF6:  CLRF   x1C
02CF8:  MOVLB  0
02CFA:  MOVLB  B
02CFC:  MOVF   x1D,W
02CFE:  SUBWF  x0F,W
02D00:  BTFSC  FD8.0
02D02:  BRA    2D0A
02D04:  MOVLB  0
02D06:  GOTO   2D56
02D0A:  MOVLB  0
02D0C:  BTFSS  FD8.2
02D0E:  GOTO   2D24
02D12:  MOVLB  B
02D14:  MOVF   x0E,W
02D16:  SUBWF  x1C,W
02D18:  BTFSS  FD8.0
02D1A:  BRA    2D22
02D1C:  MOVLB  0
02D1E:  GOTO   2D56
02D22:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
02D24:  MOVLB  B
02D26:  MOVF   x0C,W
02D28:  ADDWF  x1C,W
02D2A:  MOVWF  FE9
02D2C:  MOVF   x0D,W
02D2E:  ADDWFC x1D,W
02D30:  MOVWF  FEA
02D32:  MOVFF  FEF,B22
02D36:  MOVFF  B22,B24
02D3A:  MOVLW  08
02D3C:  MOVWF  x25
02D3E:  MOVLW  01
02D40:  MOVWF  x26
02D42:  MOVLB  0
02D44:  CALL   2B6E
02D48:  MOVLB  B
02D4A:  INCF   x1C,F
02D4C:  BTFSC  FD8.2
02D4E:  INCF   x1D,F
02D50:  MOVLB  0
02D52:  GOTO   2CFA
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
02D56:  MOVLB  B
02D58:  CLRF   x21
02D5A:  CLRF   x20
02D5C:  CLRF   x1F
02D5E:  CLRF   x1E
02D60:  MOVLB  0
02D62:  MOVLB  B
02D64:  MOVF   x21,W
02D66:  SUBWF  x15,W
02D68:  BTFSC  FD8.0
02D6A:  BRA    2D72
02D6C:  MOVLB  0
02D6E:  GOTO   2DF8
02D72:  MOVLB  0
02D74:  BTFSS  FD8.2
02D76:  GOTO   2DBC
02D7A:  MOVLB  B
02D7C:  MOVF   x20,W
02D7E:  SUBWF  x14,W
02D80:  BTFSC  FD8.0
02D82:  BRA    2D8A
02D84:  MOVLB  0
02D86:  GOTO   2DF8
02D8A:  MOVLB  0
02D8C:  BTFSS  FD8.2
02D8E:  GOTO   2DBC
02D92:  MOVLB  B
02D94:  MOVF   x1F,W
02D96:  SUBWF  x13,W
02D98:  BTFSC  FD8.0
02D9A:  BRA    2DA2
02D9C:  MOVLB  0
02D9E:  GOTO   2DF8
02DA2:  MOVLB  0
02DA4:  BTFSS  FD8.2
02DA6:  GOTO   2DBC
02DAA:  MOVLB  B
02DAC:  MOVF   x12,W
02DAE:  SUBWF  x1E,W
02DB0:  BTFSS  FD8.0
02DB2:  BRA    2DBA
02DB4:  MOVLB  0
02DB6:  GOTO   2DF8
02DBA:  MOVLB  0
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
02DBC:  MOVLB  B
02DBE:  MOVF   x10,W
02DC0:  ADDWF  x1E,W
02DC2:  MOVWF  FE9
02DC4:  MOVF   x11,W
02DC6:  ADDWFC x1F,W
02DC8:  MOVWF  FEA
02DCA:  MOVLW  01
02DCC:  MOVWF  x24
02DCE:  MOVLW  08
02DD0:  MOVWF  x25
02DD2:  MOVLW  01
02DD4:  MOVWF  x26
02DD6:  MOVLB  0
02DD8:  CALL   2B6E
02DDC:  MOVFF  01,FEF
02DE0:  MOVLW  01
02DE2:  MOVLB  B
02DE4:  ADDWF  x1E,F
02DE6:  BTFSC  FD8.0
02DE8:  INCF   x1F,F
02DEA:  BTFSC  FD8.2
02DEC:  INCF   x20,F
02DEE:  BTFSC  FD8.2
02DF0:  INCF   x21,F
02DF2:  MOVLB  0
02DF4:  GOTO   2D62
....................          break;
02DF8:  GOTO   2E00
....................    
....................          
....................       default:
....................          break;
02DFC:  GOTO   2E00
....................    }
....................    return;
02E00:  RETURN 0
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, unsigned int8 *cmd_data, unsigned int8 cmd_amount, unsigned int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
03D1A:  MOVLB  B
03D1C:  MOVF   x02,W
03D1E:  XORLW  00
03D20:  MOVLB  0
03D22:  BTFSC  FD8.2
03D24:  GOTO   3D34
03D28:  XORLW  01
03D2A:  BTFSC  FD8.2
03D2C:  GOTO   3DE2
03D30:  GOTO   3E90
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
03D34:  MOVLB  B
03D36:  CLRF   x0D
03D38:  MOVLB  0
03D3A:  MOVLB  B
03D3C:  MOVF   x08,W
03D3E:  SUBWF  x0D,W
03D40:  BTFSS  FD8.0
03D42:  BRA    3D4A
03D44:  MOVLB  0
03D46:  GOTO   3D7A
03D4A:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
03D4C:  MOVLB  B
03D4E:  MOVF   x0D,W
03D50:  ADDWF  x06,W
03D52:  MOVWF  FE9
03D54:  MOVLW  00
03D56:  ADDWFC x07,W
03D58:  MOVWF  FEA
03D5A:  MOVFF  FEF,B13
03D5E:  MOVFF  B13,B24
03D62:  MOVLW  08
03D64:  MOVWF  x25
03D66:  MOVLW  01
03D68:  MOVWF  x26
03D6A:  MOVLB  0
03D6C:  CALL   2B0E
03D70:  MOVLB  B
03D72:  INCF   x0D,F
03D74:  MOVLB  0
03D76:  GOTO   3D3A
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03D7A:  MOVLB  B
03D7C:  CLRF   x0F
03D7E:  CLRF   x0E
03D80:  MOVLB  0
03D82:  MOVLB  B
03D84:  MOVF   x0F,W
03D86:  SUBWF  x0C,W
03D88:  BTFSC  FD8.0
03D8A:  BRA    3D92
03D8C:  MOVLB  0
03D8E:  GOTO   3DDE
03D92:  MOVLB  0
03D94:  BTFSS  FD8.2
03D96:  GOTO   3DAC
03D9A:  MOVLB  B
03D9C:  MOVF   x0B,W
03D9E:  SUBWF  x0E,W
03DA0:  BTFSS  FD8.0
03DA2:  BRA    3DAA
03DA4:  MOVLB  0
03DA6:  GOTO   3DDE
03DAA:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
03DAC:  MOVLB  B
03DAE:  MOVF   x09,W
03DB0:  ADDWF  x0E,W
03DB2:  MOVWF  FE9
03DB4:  MOVF   x0A,W
03DB6:  ADDWFC x0F,W
03DB8:  MOVWF  FEA
03DBA:  MOVFF  FEF,B13
03DBE:  MOVFF  B13,B24
03DC2:  MOVLW  08
03DC4:  MOVWF  x25
03DC6:  MOVLW  01
03DC8:  MOVWF  x26
03DCA:  MOVLB  0
03DCC:  CALL   2B0E
03DD0:  MOVLB  B
03DD2:  INCF   x0E,F
03DD4:  BTFSC  FD8.2
03DD6:  INCF   x0F,F
03DD8:  MOVLB  0
03DDA:  GOTO   3D82
....................          break;
03DDE:  GOTO   3E94
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
03DE2:  MOVLB  B
03DE4:  CLRF   x10
03DE6:  MOVLB  0
03DE8:  MOVLB  B
03DEA:  MOVF   x08,W
03DEC:  SUBWF  x10,W
03DEE:  BTFSS  FD8.0
03DF0:  BRA    3DF8
03DF2:  MOVLB  0
03DF4:  GOTO   3E28
03DF8:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
03DFA:  MOVLB  B
03DFC:  MOVF   x10,W
03DFE:  ADDWF  x06,W
03E00:  MOVWF  FE9
03E02:  MOVLW  00
03E04:  ADDWFC x07,W
03E06:  MOVWF  FEA
03E08:  MOVFF  FEF,B13
03E0C:  MOVFF  B13,B24
03E10:  MOVLW  08
03E12:  MOVWF  x25
03E14:  MOVLW  01
03E16:  MOVWF  x26
03E18:  MOVLB  0
03E1A:  CALL   2B6E
03E1E:  MOVLB  B
03E20:  INCF   x10,F
03E22:  MOVLB  0
03E24:  GOTO   3DE8
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03E28:  MOVLB  B
03E2A:  CLRF   x12
03E2C:  CLRF   x11
03E2E:  MOVLB  0
03E30:  MOVLB  B
03E32:  MOVF   x12,W
03E34:  SUBWF  x0C,W
03E36:  BTFSC  FD8.0
03E38:  BRA    3E40
03E3A:  MOVLB  0
03E3C:  GOTO   3E8C
03E40:  MOVLB  0
03E42:  BTFSS  FD8.2
03E44:  GOTO   3E5A
03E48:  MOVLB  B
03E4A:  MOVF   x0B,W
03E4C:  SUBWF  x11,W
03E4E:  BTFSS  FD8.0
03E50:  BRA    3E58
03E52:  MOVLB  0
03E54:  GOTO   3E8C
03E58:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
03E5A:  MOVLB  B
03E5C:  MOVF   x09,W
03E5E:  ADDWF  x11,W
03E60:  MOVWF  FE9
03E62:  MOVF   x0A,W
03E64:  ADDWFC x12,W
03E66:  MOVWF  FEA
03E68:  MOVFF  FEF,B13
03E6C:  MOVFF  B13,B24
03E70:  MOVLW  08
03E72:  MOVWF  x25
03E74:  MOVLW  01
03E76:  MOVWF  x26
03E78:  MOVLB  0
03E7A:  CALL   2B6E
03E7E:  MOVLB  B
03E80:  INCF   x11,F
03E82:  BTFSC  FD8.2
03E84:  INCF   x12,F
03E86:  MOVLB  0
03E88:  GOTO   3E30
....................          break;
03E8C:  GOTO   3E94
....................          
....................       default:
....................          break;
03E90:  GOTO   3E94
....................    }
....................    return;
03E94:  RETURN 0
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
06A22:  MOVFF  2BC,B08
06A26:  MOVLW  01
06A28:  MOVLB  B
06A2A:  MOVWF  x09
06A2C:  MOVLW  0F
06A2E:  MOVWF  x0B
06A30:  MOVLW  89
06A32:  MOVWF  x0A
06A34:  MOVLB  0
06A36:  CALL   2ABA
06A3A:  MOVFF  2BC,B08
06A3E:  MOVLB  B
06A40:  CLRF   x09
06A42:  MOVLW  0F
06A44:  MOVWF  x0B
06A46:  MOVLW  92
06A48:  MOVWF  x0A
06A4A:  MOVLB  0
06A4C:  CALL   2ABA
06A50:  RETURN 0
.................... }
....................  
.................... int8 status_register(Flash flash_stream){
*
03E96:  MOVLW  05
03E98:  MOVLB  B
03E9A:  MOVWF  x06
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
03E9C:  MOVFF  B04,B08
03EA0:  CLRF   x09
03EA2:  MOVLW  0F
03EA4:  MOVWF  x0B
03EA6:  MOVLW  89
03EA8:  MOVWF  x0A
03EAA:  MOVLB  0
03EAC:  CALL   2ABA
03EB0:  MOVFF  B04,B08
03EB4:  MOVLB  B
03EB6:  CLRF   x09
03EB8:  MOVLW  0F
03EBA:  MOVWF  x0B
03EBC:  MOVLW  92
03EBE:  MOVWF  x0A
03EC0:  MOVLB  0
03EC2:  CALL   2ABA
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
03EC6:  MOVFF  B05,B0B
03ECA:  MOVFF  B04,B0A
03ECE:  MOVFF  B03,B09
03ED2:  MOVFF  B02,B08
03ED6:  MOVLW  0B
03ED8:  MOVLB  B
03EDA:  MOVWF  x0D
03EDC:  MOVLW  06
03EDE:  MOVWF  x0C
03EE0:  CLRF   x0F
03EE2:  MOVLW  01
03EE4:  MOVWF  x0E
03EE6:  MOVLW  0B
03EE8:  MOVWF  x11
03EEA:  MOVLW  07
03EEC:  MOVWF  x10
03EEE:  CLRF   x15
03EF0:  CLRF   x14
03EF2:  CLRF   x13
03EF4:  MOVLW  01
03EF6:  MOVWF  x12
03EF8:  MOVLB  0
03EFA:  CALL   2BCE
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
03EFE:  MOVFF  B04,B08
03F02:  MOVLW  01
03F04:  MOVLB  B
03F06:  MOVWF  x09
03F08:  MOVLW  0F
03F0A:  MOVWF  x0B
03F0C:  MOVLW  89
03F0E:  MOVWF  x0A
03F10:  MOVLB  0
03F12:  CALL   2ABA
03F16:  MOVFF  B04,B08
03F1A:  MOVLB  B
03F1C:  CLRF   x09
03F1E:  MOVLW  0F
03F20:  MOVWF  x0B
03F22:  MOVLW  92
03F24:  MOVWF  x0A
03F26:  MOVLB  0
03F28:  CALL   2ABA
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
03F2C:  MOVLB  B
03F2E:  MOVF   x07,W
03F30:  MOVWF  01
03F32:  MOVLB  0
03F34:  RETURN 0
.................... }
.................... 
.................... //
.................... //->success:True,fail:false 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 16);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == MANUFACTURER_ID_MICRON){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
....................  
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
05914:  MOVLB  1
05916:  MOVF   xF6,F
05918:  BTFSC  FD8.2
0591A:  BRA    5922
0591C:  MOVLB  0
0591E:  GOTO   5A7E
05922:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
05924:  MOVLW  06
05926:  MOVLB  1
05928:  MOVWF  xFD
0592A:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
0592C:  MOVLW  D8
0592E:  MOVLB  1
05930:  MOVWF  xFE
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
05932:  MOVFF  1FB,20A
05936:  MOVFF  1FC,20B
0593A:  MOVLB  2
0593C:  CLRF   x0C
0593E:  CLRF   x0D
05940:  MOVF   x0A,W
05942:  MOVWF  00
05944:  CLRF   01
05946:  CLRF   02
05948:  CLRF   03
0594A:  MOVFF  00,1FF
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0594E:  MOVFF  1FA,20A
05952:  MOVFF  1FB,20B
05956:  MOVFF  1FC,20C
0595A:  CLRF   x0D
0595C:  MOVF   x0A,W
0595E:  MOVWF  00
05960:  CLRF   01
05962:  CLRF   02
05964:  CLRF   03
05966:  MOVFF  00,200
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
0596A:  MOVLB  1
0596C:  MOVF   xF9,W
0596E:  MOVWF  00
05970:  CLRF   01
05972:  CLRF   02
05974:  CLRF   03
05976:  MOVFF  00,201
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
0597A:  MOVFF  1F7,B08
0597E:  MOVLB  B
05980:  CLRF   x09
05982:  MOVLW  0F
05984:  MOVWF  x0B
05986:  MOVLW  89
05988:  MOVWF  x0A
0598A:  MOVLB  0
0598C:  CALL   2ABA
05990:  MOVFF  1F7,B08
05994:  MOVLB  B
05996:  CLRF   x09
05998:  MOVLW  0F
0599A:  MOVWF  x0B
0599C:  MOVLW  92
0599E:  MOVWF  x0A
059A0:  MOVLB  0
059A2:  CALL   2ABA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
059A6:  MOVFF  1F8,B05
059AA:  MOVFF  1F7,B04
059AE:  MOVFF  1F6,B03
059B2:  MOVFF  1F5,B02
059B6:  MOVLW  01
059B8:  MOVLB  B
059BA:  MOVWF  x07
059BC:  MOVLW  FD
059BE:  MOVWF  x06
059C0:  CLRF   x09
059C2:  MOVLW  01
059C4:  MOVWF  x08
059C6:  MOVLB  0
059C8:  CALL   3C2A
....................       output_high(flash_stream.cs_pin);
059CC:  MOVFF  1F7,B08
059D0:  MOVLW  01
059D2:  MOVLB  B
059D4:  MOVWF  x09
059D6:  MOVLW  0F
059D8:  MOVWF  x0B
059DA:  MOVLW  89
059DC:  MOVWF  x0A
059DE:  MOVLB  0
059E0:  CALL   2ABA
059E4:  MOVFF  1F7,B08
059E8:  MOVLB  B
059EA:  CLRF   x09
059EC:  MOVLW  0F
059EE:  MOVWF  x0B
059F0:  MOVLW  92
059F2:  MOVWF  x0A
059F4:  MOVLB  0
059F6:  CALL   2ABA
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
059FA:  MOVFF  1F7,B08
059FE:  MOVLB  B
05A00:  CLRF   x09
05A02:  MOVLW  0F
05A04:  MOVWF  x0B
05A06:  MOVLW  89
05A08:  MOVWF  x0A
05A0A:  MOVLB  0
05A0C:  CALL   2ABA
05A10:  MOVFF  1F7,B08
05A14:  MOVLB  B
05A16:  CLRF   x09
05A18:  MOVLW  0F
05A1A:  MOVWF  x0B
05A1C:  MOVLW  92
05A1E:  MOVWF  x0A
05A20:  MOVLB  0
05A22:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
05A26:  MOVFF  1F8,B05
05A2A:  MOVFF  1F7,B04
05A2E:  MOVFF  1F6,B03
05A32:  MOVFF  1F5,B02
05A36:  MOVLW  01
05A38:  MOVLB  B
05A3A:  MOVWF  x07
05A3C:  MOVLW  FE
05A3E:  MOVWF  x06
05A40:  CLRF   x09
05A42:  MOVLW  04
05A44:  MOVWF  x08
05A46:  MOVLB  0
05A48:  CALL   3C2A
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
05A4C:  MOVFF  1F7,B08
05A50:  MOVLW  01
05A52:  MOVLB  B
05A54:  MOVWF  x09
05A56:  MOVLW  0F
05A58:  MOVWF  x0B
05A5A:  MOVLW  89
05A5C:  MOVWF  x0A
05A5E:  MOVLB  0
05A60:  CALL   2ABA
05A64:  MOVFF  1F7,B08
05A68:  MOVLB  B
05A6A:  CLRF   x09
05A6C:  MOVLW  0F
05A6E:  MOVWF  x0B
05A70:  MOVLW  92
05A72:  MOVWF  x0A
05A74:  MOVLB  0
05A76:  CALL   2ABA
....................    }
05A7A:  GOTO   5C00
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
05A7E:  MOVLB  1
05A80:  DECFSZ xF6,W
05A82:  BRA    5A88
05A84:  BRA    5A8E
05A86:  MOVLB  0
05A88:  MOVLB  0
05A8A:  GOTO   5C00
05A8E:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
05A90:  MOVLW  06
05A92:  MOVLB  2
05A94:  MOVWF  x02
05A96:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
05A98:  MOVLW  DC
05A9A:  MOVLB  2
05A9C:  MOVWF  x03
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
05A9E:  MOVFF  1FC,20A
05AA2:  CLRF   x0B
05AA4:  CLRF   x0C
05AA6:  CLRF   x0D
05AA8:  MOVF   x0A,W
05AAA:  MOVWF  00
05AAC:  CLRF   01
05AAE:  CLRF   02
05AB0:  CLRF   03
05AB2:  MOVFF  00,204
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
05AB6:  MOVFF  1FB,20A
05ABA:  MOVFF  1FC,20B
05ABE:  CLRF   x0C
05AC0:  CLRF   x0D
05AC2:  MOVF   x0A,W
05AC4:  MOVWF  00
05AC6:  CLRF   01
05AC8:  CLRF   02
05ACA:  CLRF   03
05ACC:  MOVFF  00,205
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
05AD0:  MOVFF  1FA,20A
05AD4:  MOVFF  1FB,20B
05AD8:  MOVFF  1FC,20C
05ADC:  CLRF   x0D
05ADE:  MOVF   x0A,W
05AE0:  MOVWF  00
05AE2:  CLRF   01
05AE4:  CLRF   02
05AE6:  CLRF   03
05AE8:  MOVFF  00,206
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
05AEC:  MOVLB  1
05AEE:  MOVF   xF9,W
05AF0:  MOVWF  00
05AF2:  CLRF   01
05AF4:  CLRF   02
05AF6:  CLRF   03
05AF8:  MOVFF  00,207
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
05AFC:  MOVFF  1F7,B08
05B00:  MOVLB  B
05B02:  CLRF   x09
05B04:  MOVLW  0F
05B06:  MOVWF  x0B
05B08:  MOVLW  89
05B0A:  MOVWF  x0A
05B0C:  MOVLB  0
05B0E:  CALL   2ABA
05B12:  MOVFF  1F7,B08
05B16:  MOVLB  B
05B18:  CLRF   x09
05B1A:  MOVLW  0F
05B1C:  MOVWF  x0B
05B1E:  MOVLW  92
05B20:  MOVWF  x0A
05B22:  MOVLB  0
05B24:  CALL   2ABA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
05B28:  MOVFF  1F8,B05
05B2C:  MOVFF  1F7,B04
05B30:  MOVFF  1F6,B03
05B34:  MOVFF  1F5,B02
05B38:  MOVLW  02
05B3A:  MOVLB  B
05B3C:  MOVWF  x07
05B3E:  MOVLW  02
05B40:  MOVWF  x06
05B42:  CLRF   x09
05B44:  MOVLW  01
05B46:  MOVWF  x08
05B48:  MOVLB  0
05B4A:  CALL   3C2A
....................       output_high(flash_stream.cs_pin);
05B4E:  MOVFF  1F7,B08
05B52:  MOVLW  01
05B54:  MOVLB  B
05B56:  MOVWF  x09
05B58:  MOVLW  0F
05B5A:  MOVWF  x0B
05B5C:  MOVLW  89
05B5E:  MOVWF  x0A
05B60:  MOVLB  0
05B62:  CALL   2ABA
05B66:  MOVFF  1F7,B08
05B6A:  MOVLB  B
05B6C:  CLRF   x09
05B6E:  MOVLW  0F
05B70:  MOVWF  x0B
05B72:  MOVLW  92
05B74:  MOVWF  x0A
05B76:  MOVLB  0
05B78:  CALL   2ABA
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
05B7C:  MOVFF  1F7,B08
05B80:  MOVLB  B
05B82:  CLRF   x09
05B84:  MOVLW  0F
05B86:  MOVWF  x0B
05B88:  MOVLW  89
05B8A:  MOVWF  x0A
05B8C:  MOVLB  0
05B8E:  CALL   2ABA
05B92:  MOVFF  1F7,B08
05B96:  MOVLB  B
05B98:  CLRF   x09
05B9A:  MOVLW  0F
05B9C:  MOVWF  x0B
05B9E:  MOVLW  92
05BA0:  MOVWF  x0A
05BA2:  MOVLB  0
05BA4:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
05BA8:  MOVFF  1F8,B05
05BAC:  MOVFF  1F7,B04
05BB0:  MOVFF  1F6,B03
05BB4:  MOVFF  1F5,B02
05BB8:  MOVLW  02
05BBA:  MOVLB  B
05BBC:  MOVWF  x07
05BBE:  MOVLW  03
05BC0:  MOVWF  x06
05BC2:  CLRF   x09
05BC4:  MOVLW  05
05BC6:  MOVWF  x08
05BC8:  MOVLB  0
05BCA:  CALL   3C2A
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
05BCE:  MOVFF  1F7,B08
05BD2:  MOVLW  01
05BD4:  MOVLB  B
05BD6:  MOVWF  x09
05BD8:  MOVLW  0F
05BDA:  MOVWF  x0B
05BDC:  MOVLW  89
05BDE:  MOVWF  x0A
05BE0:  MOVLB  0
05BE2:  CALL   2ABA
05BE6:  MOVFF  1F7,B08
05BEA:  MOVLB  B
05BEC:  CLRF   x09
05BEE:  MOVLW  0F
05BF0:  MOVWF  x0B
05BF2:  MOVLW  92
05BF4:  MOVWF  x0A
05BF6:  MOVLB  0
05BF8:  CALL   2ABA
....................    }
05BFC:  GOTO   5C00
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
05C00:  MOVLB  2
05C02:  CLRF   x08
05C04:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
05C06:  MOVFF  1F8,B05
05C0A:  MOVFF  1F7,B04
05C0E:  MOVFF  1F6,B03
05C12:  MOVFF  1F5,B02
05C16:  CALL   3E96
05C1A:  MOVF   01,W
05C1C:  ANDLW  01
05C1E:  SUBLW  01
05C20:  BTFSS  FD8.2
05C22:  GOTO   5C74
....................       if(timeout_counter > 10)
05C26:  MOVLB  2
05C28:  MOVF   x08,W
05C2A:  SUBLW  0A
05C2C:  BTFSS  FD8.0
05C2E:  BRA    5C36
05C30:  MOVLB  0
05C32:  GOTO   5C48
05C36:  MOVLB  0
....................          delay_ms(200);
05C38:  MOVLW  C8
05C3A:  MOVLB  B
05C3C:  MOVWF  x02
05C3E:  MOVLB  0
05C40:  CALL   22AE
05C44:  GOTO   5C54
....................       else
....................          delay_ms(10);   
05C48:  MOVLW  0A
05C4A:  MOVLB  B
05C4C:  MOVWF  x02
05C4E:  MOVLB  0
05C50:  CALL   22AE
....................       
....................       if(timeout_counter > 100){
05C54:  MOVLB  2
05C56:  MOVF   x08,W
05C58:  SUBLW  64
05C5A:  BTFSS  FD8.0
05C5C:  BRA    5C64
05C5E:  MOVLB  0
05C60:  GOTO   5C6A
05C64:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
05C66:  GOTO   5C74
....................       }  
....................       timeout_counter++;
05C6A:  MOVLB  2
05C6C:  INCF   x08,F
05C6E:  MOVLB  0
05C70:  GOTO   5C06
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
05C74:  RETURN 0
.................... }
....................  
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x __ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 __ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 __ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 __
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
04D3A:  MOVLB  A
04D3C:  MOVF   x05,F
04D3E:  BTFSC  FD8.2
04D40:  BRA    4D48
04D42:  MOVLB  0
04D44:  GOTO   4EA0
04D48:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
04D4A:  MOVLW  06
04D4C:  MOVLB  A
04D4E:  MOVWF  x0C
04D50:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
04D52:  MOVLW  20
04D54:  MOVLB  A
04D56:  MOVWF  x0D
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
04D58:  MOVFF  A0A,A19
04D5C:  MOVFF  A0B,A1A
04D60:  CLRF   x1B
04D62:  CLRF   x1C
04D64:  MOVF   x19,W
04D66:  MOVWF  00
04D68:  CLRF   01
04D6A:  CLRF   02
04D6C:  CLRF   03
04D6E:  MOVFF  00,A0E
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
04D72:  MOVFF  A09,A19
04D76:  MOVFF  A0A,A1A
04D7A:  MOVFF  A0B,A1B
04D7E:  CLRF   x1C
04D80:  MOVF   x19,W
04D82:  MOVWF  00
04D84:  CLRF   01
04D86:  CLRF   02
04D88:  CLRF   03
04D8A:  MOVFF  00,A0F
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
04D8E:  MOVF   x08,W
04D90:  MOVWF  00
04D92:  CLRF   01
04D94:  CLRF   02
04D96:  CLRF   03
04D98:  MOVFF  00,A10
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04D9C:  MOVFF  A06,B08
04DA0:  MOVLB  B
04DA2:  CLRF   x09
04DA4:  MOVLW  0F
04DA6:  MOVWF  x0B
04DA8:  MOVLW  89
04DAA:  MOVWF  x0A
04DAC:  MOVLB  0
04DAE:  CALL   2ABA
04DB2:  MOVFF  A06,B08
04DB6:  MOVLB  B
04DB8:  CLRF   x09
04DBA:  MOVLW  0F
04DBC:  MOVWF  x0B
04DBE:  MOVLW  92
04DC0:  MOVWF  x0A
04DC2:  MOVLB  0
04DC4:  CALL   2ABA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
04DC8:  MOVFF  A07,B05
04DCC:  MOVFF  A06,B04
04DD0:  MOVFF  A05,B03
04DD4:  MOVFF  A04,B02
04DD8:  MOVLW  0A
04DDA:  MOVLB  B
04DDC:  MOVWF  x07
04DDE:  MOVLW  0C
04DE0:  MOVWF  x06
04DE2:  CLRF   x09
04DE4:  MOVLW  01
04DE6:  MOVWF  x08
04DE8:  MOVLB  0
04DEA:  CALL   3C2A
....................       output_high(flash_stream.cs_pin);
04DEE:  MOVFF  A06,B08
04DF2:  MOVLW  01
04DF4:  MOVLB  B
04DF6:  MOVWF  x09
04DF8:  MOVLW  0F
04DFA:  MOVWF  x0B
04DFC:  MOVLW  89
04DFE:  MOVWF  x0A
04E00:  MOVLB  0
04E02:  CALL   2ABA
04E06:  MOVFF  A06,B08
04E0A:  MOVLB  B
04E0C:  CLRF   x09
04E0E:  MOVLW  0F
04E10:  MOVWF  x0B
04E12:  MOVLW  92
04E14:  MOVWF  x0A
04E16:  MOVLB  0
04E18:  CALL   2ABA
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
04E1C:  MOVFF  A06,B08
04E20:  MOVLB  B
04E22:  CLRF   x09
04E24:  MOVLW  0F
04E26:  MOVWF  x0B
04E28:  MOVLW  89
04E2A:  MOVWF  x0A
04E2C:  MOVLB  0
04E2E:  CALL   2ABA
04E32:  MOVFF  A06,B08
04E36:  MOVLB  B
04E38:  CLRF   x09
04E3A:  MOVLW  0F
04E3C:  MOVWF  x0B
04E3E:  MOVLW  92
04E40:  MOVWF  x0A
04E42:  MOVLB  0
04E44:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
04E48:  MOVFF  A07,B05
04E4C:  MOVFF  A06,B04
04E50:  MOVFF  A05,B03
04E54:  MOVFF  A04,B02
04E58:  MOVLW  0A
04E5A:  MOVLB  B
04E5C:  MOVWF  x07
04E5E:  MOVLW  0D
04E60:  MOVWF  x06
04E62:  CLRF   x09
04E64:  MOVLW  04
04E66:  MOVWF  x08
04E68:  MOVLB  0
04E6A:  CALL   3C2A
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04E6E:  MOVFF  A06,B08
04E72:  MOVLW  01
04E74:  MOVLB  B
04E76:  MOVWF  x09
04E78:  MOVLW  0F
04E7A:  MOVWF  x0B
04E7C:  MOVLW  89
04E7E:  MOVWF  x0A
04E80:  MOVLB  0
04E82:  CALL   2ABA
04E86:  MOVFF  A06,B08
04E8A:  MOVLB  B
04E8C:  CLRF   x09
04E8E:  MOVLW  0F
04E90:  MOVWF  x0B
04E92:  MOVLW  92
04E94:  MOVWF  x0A
04E96:  MOVLB  0
04E98:  CALL   2ABA
....................    }
04E9C:  GOTO   5020
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
04EA0:  MOVLB  A
04EA2:  DECFSZ x05,W
04EA4:  BRA    4EAA
04EA6:  BRA    4EB0
04EA8:  MOVLB  0
04EAA:  MOVLB  0
04EAC:  GOTO   5020
04EB0:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
04EB2:  MOVLW  06
04EB4:  MOVLB  A
04EB6:  MOVWF  x11
04EB8:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
04EBA:  MOVLW  21
04EBC:  MOVLB  A
04EBE:  MOVWF  x12
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
04EC0:  MOVFF  A0B,A19
04EC4:  CLRF   x1A
04EC6:  CLRF   x1B
04EC8:  CLRF   x1C
04ECA:  MOVF   x19,W
04ECC:  MOVWF  00
04ECE:  CLRF   01
04ED0:  CLRF   02
04ED2:  CLRF   03
04ED4:  MOVFF  00,A13
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
04ED8:  MOVFF  A0A,A19
04EDC:  MOVFF  A0B,A1A
04EE0:  CLRF   x1B
04EE2:  CLRF   x1C
04EE4:  MOVF   x19,W
04EE6:  MOVWF  00
04EE8:  CLRF   01
04EEA:  CLRF   02
04EEC:  CLRF   03
04EEE:  MOVFF  00,A14
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
04EF2:  MOVFF  A09,A19
04EF6:  MOVFF  A0A,A1A
04EFA:  MOVFF  A0B,A1B
04EFE:  CLRF   x1C
04F00:  MOVF   x19,W
04F02:  MOVWF  00
04F04:  CLRF   01
04F06:  CLRF   02
04F08:  CLRF   03
04F0A:  MOVFF  00,A15
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
04F0E:  MOVF   x08,W
04F10:  MOVWF  00
04F12:  CLRF   01
04F14:  CLRF   02
04F16:  CLRF   03
04F18:  MOVFF  00,A16
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04F1C:  MOVFF  A06,B08
04F20:  MOVLB  B
04F22:  CLRF   x09
04F24:  MOVLW  0F
04F26:  MOVWF  x0B
04F28:  MOVLW  89
04F2A:  MOVWF  x0A
04F2C:  MOVLB  0
04F2E:  CALL   2ABA
04F32:  MOVFF  A06,B08
04F36:  MOVLB  B
04F38:  CLRF   x09
04F3A:  MOVLW  0F
04F3C:  MOVWF  x0B
04F3E:  MOVLW  92
04F40:  MOVWF  x0A
04F42:  MOVLB  0
04F44:  CALL   2ABA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
04F48:  MOVFF  A07,B05
04F4C:  MOVFF  A06,B04
04F50:  MOVFF  A05,B03
04F54:  MOVFF  A04,B02
04F58:  MOVLW  0A
04F5A:  MOVLB  B
04F5C:  MOVWF  x07
04F5E:  MOVLW  11
04F60:  MOVWF  x06
04F62:  CLRF   x09
04F64:  MOVLW  01
04F66:  MOVWF  x08
04F68:  MOVLB  0
04F6A:  CALL   3C2A
....................       output_high(flash_stream.cs_pin);
04F6E:  MOVFF  A06,B08
04F72:  MOVLW  01
04F74:  MOVLB  B
04F76:  MOVWF  x09
04F78:  MOVLW  0F
04F7A:  MOVWF  x0B
04F7C:  MOVLW  89
04F7E:  MOVWF  x0A
04F80:  MOVLB  0
04F82:  CALL   2ABA
04F86:  MOVFF  A06,B08
04F8A:  MOVLB  B
04F8C:  CLRF   x09
04F8E:  MOVLW  0F
04F90:  MOVWF  x0B
04F92:  MOVLW  92
04F94:  MOVWF  x0A
04F96:  MOVLB  0
04F98:  CALL   2ABA
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
04F9C:  MOVFF  A06,B08
04FA0:  MOVLB  B
04FA2:  CLRF   x09
04FA4:  MOVLW  0F
04FA6:  MOVWF  x0B
04FA8:  MOVLW  89
04FAA:  MOVWF  x0A
04FAC:  MOVLB  0
04FAE:  CALL   2ABA
04FB2:  MOVFF  A06,B08
04FB6:  MOVLB  B
04FB8:  CLRF   x09
04FBA:  MOVLW  0F
04FBC:  MOVWF  x0B
04FBE:  MOVLW  92
04FC0:  MOVWF  x0A
04FC2:  MOVLB  0
04FC4:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
04FC8:  MOVFF  A07,B05
04FCC:  MOVFF  A06,B04
04FD0:  MOVFF  A05,B03
04FD4:  MOVFF  A04,B02
04FD8:  MOVLW  0A
04FDA:  MOVLB  B
04FDC:  MOVWF  x07
04FDE:  MOVLW  12
04FE0:  MOVWF  x06
04FE2:  CLRF   x09
04FE4:  MOVLW  05
04FE6:  MOVWF  x08
04FE8:  MOVLB  0
04FEA:  CALL   3C2A
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04FEE:  MOVFF  A06,B08
04FF2:  MOVLW  01
04FF4:  MOVLB  B
04FF6:  MOVWF  x09
04FF8:  MOVLW  0F
04FFA:  MOVWF  x0B
04FFC:  MOVLW  89
04FFE:  MOVWF  x0A
05000:  MOVLB  0
05002:  CALL   2ABA
05006:  MOVFF  A06,B08
0500A:  MOVLB  B
0500C:  CLRF   x09
0500E:  MOVLW  0F
05010:  MOVWF  x0B
05012:  MOVLW  92
05014:  MOVWF  x0A
05016:  MOVLB  0
05018:  CALL   2ABA
....................    }
0501C:  GOTO   5020
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
05020:  MOVLB  A
05022:  CLRF   x17
05024:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
05026:  MOVFF  A07,B05
0502A:  MOVFF  A06,B04
0502E:  MOVFF  A05,B03
05032:  MOVFF  A04,B02
05036:  CALL   3E96
0503A:  MOVF   01,W
0503C:  ANDLW  01
0503E:  SUBLW  01
05040:  BTFSS  FD8.2
05042:  GOTO   505C
....................       delay_ms(1);   
05046:  MOVLW  01
05048:  MOVLB  B
0504A:  MOVWF  x02
0504C:  MOVLB  0
0504E:  CALL   22AE
....................       if(timeout_counter > 1000){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
05052:  MOVLB  A
05054:  INCF   x17,F
05056:  MOVLB  0
05058:  GOTO   5026
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
0505C:  RETURN 0
.................... }
....................  
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address)
.................... {
....................    unsigned int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................    
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    return read_data;
.................... }
....................  
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
02ECA:  MOVLB  A
02ECC:  MOVF   xEB,F
02ECE:  BTFSC  FD8.2
02ED0:  BRA    2ED8
02ED2:  MOVLB  0
02ED4:  GOTO   2FCE
02ED8:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
02EDA:  MOVLW  03
02EDC:  MOVLB  A
02EDE:  MOVWF  xF8
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02EE0:  MOVFF  AF0,B02
02EE4:  MOVFF  AF1,B03
02EE8:  MOVLB  B
02EEA:  CLRF   x04
02EEC:  CLRF   x05
02EEE:  MOVF   x02,W
02EF0:  MOVWF  00
02EF2:  CLRF   01
02EF4:  CLRF   02
02EF6:  CLRF   03
02EF8:  MOVFF  00,AF9
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02EFC:  MOVFF  AEF,B02
02F00:  MOVFF  AF0,B03
02F04:  MOVFF  AF1,B04
02F08:  CLRF   x05
02F0A:  MOVF   x02,W
02F0C:  MOVWF  00
02F0E:  CLRF   01
02F10:  CLRF   02
02F12:  CLRF   03
02F14:  MOVFF  00,AFA
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02F18:  MOVLB  A
02F1A:  MOVF   xEE,W
02F1C:  MOVWF  00
02F1E:  CLRF   01
02F20:  CLRF   02
02F22:  CLRF   03
02F24:  MOVFF  00,AFB
....................             
....................       output_low(flash_stream.cs_pin);
02F28:  MOVFF  AEC,B08
02F2C:  MOVLB  B
02F2E:  CLRF   x09
02F30:  MOVLW  0F
02F32:  MOVWF  x0B
02F34:  MOVLW  89
02F36:  MOVWF  x0A
02F38:  MOVLB  0
02F3A:  CALL   2ABA
02F3E:  MOVFF  AEC,B08
02F42:  MOVLB  B
02F44:  CLRF   x09
02F46:  MOVLW  0F
02F48:  MOVWF  x0B
02F4A:  MOVLW  92
02F4C:  MOVWF  x0A
02F4E:  MOVLB  0
02F50:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
02F54:  MOVFF  AED,B0B
02F58:  MOVFF  AEC,B0A
02F5C:  MOVFF  AEB,B09
02F60:  MOVFF  AEA,B08
02F64:  MOVLW  0A
02F66:  MOVLB  B
02F68:  MOVWF  x0D
02F6A:  MOVLW  F8
02F6C:  MOVWF  x0C
02F6E:  CLRF   x0F
02F70:  MOVLW  04
02F72:  MOVWF  x0E
02F74:  MOVFF  AF3,B11
02F78:  MOVFF  AF2,B10
02F7C:  MOVFF  AF7,B15
02F80:  MOVFF  AF6,B14
02F84:  MOVFF  AF5,B13
02F88:  MOVFF  AF4,B12
02F8C:  MOVLB  0
02F8E:  CALL   2BCE
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
02F92:  MOVLW  02
02F94:  MOVWF  00
02F96:  DECFSZ 00,F
02F98:  BRA    2F96
02F9A:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02F9C:  MOVFF  AEC,B08
02FA0:  MOVLW  01
02FA2:  MOVLB  B
02FA4:  MOVWF  x09
02FA6:  MOVLW  0F
02FA8:  MOVWF  x0B
02FAA:  MOVLW  89
02FAC:  MOVWF  x0A
02FAE:  MOVLB  0
02FB0:  CALL   2ABA
02FB4:  MOVFF  AEC,B08
02FB8:  MOVLB  B
02FBA:  CLRF   x09
02FBC:  MOVLW  0F
02FBE:  MOVWF  x0B
02FC0:  MOVLW  92
02FC2:  MOVWF  x0A
02FC4:  MOVLB  0
02FC6:  CALL   2ABA
....................    }
02FCA:  GOTO   30E8
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
02FCE:  MOVLB  A
02FD0:  DECFSZ xEB,W
02FD2:  BRA    2FD8
02FD4:  BRA    2FDE
02FD6:  MOVLB  0
02FD8:  MOVLB  0
02FDA:  GOTO   30E8
02FDE:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
02FE0:  MOVLW  13
02FE2:  MOVLB  A
02FE4:  MOVWF  xFC
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
02FE6:  MOVFF  AF1,B02
02FEA:  MOVLB  B
02FEC:  CLRF   x03
02FEE:  CLRF   x04
02FF0:  CLRF   x05
02FF2:  MOVF   x02,W
02FF4:  MOVWF  00
02FF6:  CLRF   01
02FF8:  CLRF   02
02FFA:  CLRF   03
02FFC:  MOVFF  00,AFD
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03000:  MOVFF  AF0,B02
03004:  MOVFF  AF1,B03
03008:  CLRF   x04
0300A:  CLRF   x05
0300C:  MOVF   x02,W
0300E:  MOVWF  00
03010:  CLRF   01
03012:  CLRF   02
03014:  CLRF   03
03016:  MOVFF  00,AFE
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0301A:  MOVFF  AEF,B02
0301E:  MOVFF  AF0,B03
03022:  MOVFF  AF1,B04
03026:  CLRF   x05
03028:  MOVF   x02,W
0302A:  MOVWF  00
0302C:  CLRF   01
0302E:  CLRF   02
03030:  CLRF   03
03032:  MOVFF  00,AFF
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
03036:  MOVLB  A
03038:  MOVF   xEE,W
0303A:  MOVWF  00
0303C:  CLRF   01
0303E:  CLRF   02
03040:  CLRF   03
03042:  MOVFF  00,B00
....................    
....................       output_low(flash_stream.cs_pin);
03046:  MOVFF  AEC,B08
0304A:  MOVLB  B
0304C:  CLRF   x09
0304E:  MOVLW  0F
03050:  MOVWF  x0B
03052:  MOVLW  89
03054:  MOVWF  x0A
03056:  MOVLB  0
03058:  CALL   2ABA
0305C:  MOVFF  AEC,B08
03060:  MOVLB  B
03062:  CLRF   x09
03064:  MOVLW  0F
03066:  MOVWF  x0B
03068:  MOVLW  92
0306A:  MOVWF  x0A
0306C:  MOVLB  0
0306E:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
03072:  MOVFF  AED,B0B
03076:  MOVFF  AEC,B0A
0307A:  MOVFF  AEB,B09
0307E:  MOVFF  AEA,B08
03082:  MOVLW  0A
03084:  MOVLB  B
03086:  MOVWF  x0D
03088:  MOVLW  FC
0308A:  MOVWF  x0C
0308C:  CLRF   x0F
0308E:  MOVLW  05
03090:  MOVWF  x0E
03092:  MOVFF  AF3,B11
03096:  MOVFF  AF2,B10
0309A:  MOVFF  AF7,B15
0309E:  MOVFF  AF6,B14
030A2:  MOVFF  AF5,B13
030A6:  MOVFF  AF4,B12
030AA:  MOVLB  0
030AC:  CALL   2BCE
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
030B0:  MOVLW  02
030B2:  MOVWF  00
030B4:  DECFSZ 00,F
030B6:  BRA    30B4
030B8:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
030BA:  MOVFF  AEC,B08
030BE:  MOVLW  01
030C0:  MOVLB  B
030C2:  MOVWF  x09
030C4:  MOVLW  0F
030C6:  MOVWF  x0B
030C8:  MOVLW  89
030CA:  MOVWF  x0A
030CC:  MOVLB  0
030CE:  CALL   2ABA
030D2:  MOVFF  AEC,B08
030D6:  MOVLB  B
030D8:  CLRF   x09
030DA:  MOVLW  0F
030DC:  MOVWF  x0B
030DE:  MOVLW  92
030E0:  MOVWF  x0A
030E2:  MOVLB  0
030E4:  CALL   2ABA
....................    }
....................    return;
030E8:  RETURN 0
.................... }
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
10138:  MOVLB  2
1013A:  MOVF   x1A,F
1013C:  BTFSC  FD8.2
1013E:  BRA    10146
10140:  MOVLB  0
10142:  GOTO   102AC
10146:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
10148:  MOVLW  06
1014A:  MOVLB  2
1014C:  MOVWF  x22
1014E:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
10150:  MOVLW  02
10152:  MOVLB  2
10154:  MOVWF  x23
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
10156:  MOVFF  21F,231
1015A:  MOVFF  220,232
1015E:  CLRF   x33
10160:  CLRF   x34
10162:  MOVF   x31,W
10164:  MOVWF  00
10166:  CLRF   01
10168:  CLRF   02
1016A:  CLRF   03
1016C:  MOVFF  00,224
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
10170:  MOVFF  21E,231
10174:  MOVFF  21F,232
10178:  MOVFF  220,233
1017C:  CLRF   x34
1017E:  MOVF   x31,W
10180:  MOVWF  00
10182:  CLRF   01
10184:  CLRF   02
10186:  CLRF   03
10188:  MOVFF  00,225
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
1018C:  MOVF   x1D,W
1018E:  MOVWF  00
10190:  CLRF   01
10192:  CLRF   02
10194:  CLRF   03
10196:  MOVFF  00,226
....................       flash_cmd[4] = write_data;
1019A:  MOVFF  221,227
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
1019E:  MOVFF  21B,B08
101A2:  MOVLB  B
101A4:  CLRF   x09
101A6:  MOVLW  0F
101A8:  MOVWF  x0B
101AA:  MOVLW  89
101AC:  MOVWF  x0A
101AE:  MOVLB  0
101B0:  CALL   2ABA
101B4:  MOVFF  21B,B08
101B8:  MOVLB  B
101BA:  CLRF   x09
101BC:  MOVLW  0F
101BE:  MOVWF  x0B
101C0:  MOVLW  92
101C2:  MOVWF  x0A
101C4:  MOVLB  0
101C6:  CALL   2ABA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
101CA:  MOVFF  21C,B05
101CE:  MOVFF  21B,B04
101D2:  MOVFF  21A,B03
101D6:  MOVFF  219,B02
101DA:  MOVLW  02
101DC:  MOVLB  B
101DE:  MOVWF  x07
101E0:  MOVLW  22
101E2:  MOVWF  x06
101E4:  CLRF   x09
101E6:  MOVLW  01
101E8:  MOVWF  x08
101EA:  MOVLB  0
101EC:  CALL   3C2A
....................       output_high(flash_stream.cs_pin);
101F0:  MOVFF  21B,B08
101F4:  MOVLW  01
101F6:  MOVLB  B
101F8:  MOVWF  x09
101FA:  MOVLW  0F
101FC:  MOVWF  x0B
101FE:  MOVLW  89
10200:  MOVWF  x0A
10202:  MOVLB  0
10204:  CALL   2ABA
10208:  MOVFF  21B,B08
1020C:  MOVLB  B
1020E:  CLRF   x09
10210:  MOVLW  0F
10212:  MOVWF  x0B
10214:  MOVLW  92
10216:  MOVWF  x0A
10218:  MOVLB  0
1021A:  CALL   2ABA
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
1021E:  MOVFF  21B,B08
10222:  MOVLB  B
10224:  CLRF   x09
10226:  MOVLW  0F
10228:  MOVWF  x0B
1022A:  MOVLW  89
1022C:  MOVWF  x0A
1022E:  MOVLB  0
10230:  CALL   2ABA
10234:  MOVFF  21B,B08
10238:  MOVLB  B
1023A:  CLRF   x09
1023C:  MOVLW  0F
1023E:  MOVWF  x0B
10240:  MOVLW  92
10242:  MOVWF  x0A
10244:  MOVLB  0
10246:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
1024A:  MOVFF  21C,B05
1024E:  MOVFF  21B,B04
10252:  MOVFF  21A,B03
10256:  MOVFF  219,B02
1025A:  MOVLW  02
1025C:  MOVLB  B
1025E:  MOVWF  x07
10260:  MOVLW  23
10262:  MOVWF  x06
10264:  CLRF   x09
10266:  MOVLW  05
10268:  MOVWF  x08
1026A:  MOVLB  0
1026C:  CALL   3C2A
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
10270:  MOVLW  02
10272:  MOVWF  00
10274:  DECFSZ 00,F
10276:  BRA    10274
10278:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
1027A:  MOVFF  21B,B08
1027E:  MOVLW  01
10280:  MOVLB  B
10282:  MOVWF  x09
10284:  MOVLW  0F
10286:  MOVWF  x0B
10288:  MOVLW  89
1028A:  MOVWF  x0A
1028C:  MOVLB  0
1028E:  CALL   2ABA
10292:  MOVFF  21B,B08
10296:  MOVLB  B
10298:  CLRF   x09
1029A:  MOVLW  0F
1029C:  MOVWF  x0B
1029E:  MOVLW  92
102A0:  MOVWF  x0A
102A2:  MOVLB  0
102A4:  CALL   2ABA
....................    }
102A8:  GOTO   10436
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
102AC:  MOVLB  2
102AE:  DECFSZ x1A,W
102B0:  BRA    102B6
102B2:  BRA    102BC
102B4:  MOVLB  0
102B6:  MOVLB  0
102B8:  GOTO   10436
102BC:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
102BE:  MOVLW  06
102C0:  MOVLB  2
102C2:  MOVWF  x28
102C4:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
102C6:  MOVLW  12
102C8:  MOVLB  2
102CA:  MOVWF  x29
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
102CC:  MOVFF  220,231
102D0:  CLRF   x32
102D2:  CLRF   x33
102D4:  CLRF   x34
102D6:  MOVF   x31,W
102D8:  MOVWF  00
102DA:  CLRF   01
102DC:  CLRF   02
102DE:  CLRF   03
102E0:  MOVFF  00,22A
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
102E4:  MOVFF  21F,231
102E8:  MOVFF  220,232
102EC:  CLRF   x33
102EE:  CLRF   x34
102F0:  MOVF   x31,W
102F2:  MOVWF  00
102F4:  CLRF   01
102F6:  CLRF   02
102F8:  CLRF   03
102FA:  MOVFF  00,22B
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
102FE:  MOVFF  21E,231
10302:  MOVFF  21F,232
10306:  MOVFF  220,233
1030A:  CLRF   x34
1030C:  MOVF   x31,W
1030E:  MOVWF  00
10310:  CLRF   01
10312:  CLRF   02
10314:  CLRF   03
10316:  MOVFF  00,22C
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
1031A:  MOVF   x1D,W
1031C:  MOVWF  00
1031E:  CLRF   01
10320:  CLRF   02
10322:  CLRF   03
10324:  MOVFF  00,22D
....................       flash_cmd[5] = write_data;
10328:  MOVFF  221,22E
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
1032C:  MOVFF  21B,B08
10330:  MOVLB  B
10332:  CLRF   x09
10334:  MOVLW  0F
10336:  MOVWF  x0B
10338:  MOVLW  89
1033A:  MOVWF  x0A
1033C:  MOVLB  0
1033E:  CALL   2ABA
10342:  MOVFF  21B,B08
10346:  MOVLB  B
10348:  CLRF   x09
1034A:  MOVLW  0F
1034C:  MOVWF  x0B
1034E:  MOVLW  92
10350:  MOVWF  x0A
10352:  MOVLB  0
10354:  CALL   2ABA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
10358:  MOVFF  21C,B05
1035C:  MOVFF  21B,B04
10360:  MOVFF  21A,B03
10364:  MOVFF  219,B02
10368:  MOVLW  02
1036A:  MOVLB  B
1036C:  MOVWF  x07
1036E:  MOVLW  28
10370:  MOVWF  x06
10372:  CLRF   x09
10374:  MOVLW  01
10376:  MOVWF  x08
10378:  MOVLB  0
1037A:  CALL   3C2A
....................       output_high(flash_stream.cs_pin);
1037E:  MOVFF  21B,B08
10382:  MOVLW  01
10384:  MOVLB  B
10386:  MOVWF  x09
10388:  MOVLW  0F
1038A:  MOVWF  x0B
1038C:  MOVLW  89
1038E:  MOVWF  x0A
10390:  MOVLB  0
10392:  CALL   2ABA
10396:  MOVFF  21B,B08
1039A:  MOVLB  B
1039C:  CLRF   x09
1039E:  MOVLW  0F
103A0:  MOVWF  x0B
103A2:  MOVLW  92
103A4:  MOVWF  x0A
103A6:  MOVLB  0
103A8:  CALL   2ABA
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
103AC:  MOVFF  21B,B08
103B0:  MOVLB  B
103B2:  CLRF   x09
103B4:  MOVLW  0F
103B6:  MOVWF  x0B
103B8:  MOVLW  89
103BA:  MOVWF  x0A
103BC:  MOVLB  0
103BE:  CALL   2ABA
103C2:  MOVFF  21B,B08
103C6:  MOVLB  B
103C8:  CLRF   x09
103CA:  MOVLW  0F
103CC:  MOVWF  x0B
103CE:  MOVLW  92
103D0:  MOVWF  x0A
103D2:  MOVLB  0
103D4:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
103D8:  MOVFF  21C,B05
103DC:  MOVFF  21B,B04
103E0:  MOVFF  21A,B03
103E4:  MOVFF  219,B02
103E8:  MOVLW  02
103EA:  MOVLB  B
103EC:  MOVWF  x07
103EE:  MOVLW  29
103F0:  MOVWF  x06
103F2:  CLRF   x09
103F4:  MOVLW  06
103F6:  MOVWF  x08
103F8:  MOVLB  0
103FA:  CALL   3C2A
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
103FE:  MOVLW  02
10400:  MOVWF  00
10402:  DECFSZ 00,F
10404:  BRA    10402
10406:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
10408:  MOVFF  21B,B08
1040C:  MOVLW  01
1040E:  MOVLB  B
10410:  MOVWF  x09
10412:  MOVLW  0F
10414:  MOVWF  x0B
10416:  MOVLW  89
10418:  MOVWF  x0A
1041A:  MOVLB  0
1041C:  CALL   2ABA
10420:  MOVFF  21B,B08
10424:  MOVLB  B
10426:  CLRF   x09
10428:  MOVLW  0F
1042A:  MOVWF  x0B
1042C:  MOVLW  92
1042E:  MOVWF  x0A
10430:  MOVLB  0
10432:  CALL   2ABA
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
10436:  MOVLB  2
10438:  CLRF   x2F
1043A:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
1043C:  MOVFF  21C,B05
10440:  MOVFF  21B,B04
10444:  MOVFF  21A,B03
10448:  MOVFF  219,B02
1044C:  CALL   3E96
10450:  MOVF   01,W
10452:  ANDLW  01
10454:  SUBLW  01
10456:  BTFSS  FD8.2
10458:  GOTO   10472
....................       delay_ms(1);   
1045C:  MOVLW  01
1045E:  MOVLB  B
10460:  MOVWF  x02
10462:  MOVLB  0
10464:  CALL   22AE
....................       if(timeout_counter > 1000){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
10468:  MOVLB  2
1046A:  INCF   x2F,F
1046C:  MOVLB  0
1046E:  GOTO   1043C
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
10472:  RETURN 0
.................... }
....................  
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
03F36:  MOVLB  A
03F38:  MOVF   xEB,F
03F3A:  BTFSC  FD8.2
03F3C:  BRA    3F44
03F3E:  MOVLB  0
03F40:  GOTO   40B8
03F44:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
03F46:  MOVLW  06
03F48:  MOVLB  A
03F4A:  MOVWF  xF6
03F4C:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
03F4E:  MOVLW  02
03F50:  MOVLB  A
03F52:  MOVWF  xF7
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03F54:  MOVFF  AF0,B03
03F58:  MOVFF  AF1,B04
03F5C:  MOVLB  B
03F5E:  CLRF   x05
03F60:  CLRF   x06
03F62:  MOVF   x03,W
03F64:  MOVWF  00
03F66:  CLRF   01
03F68:  CLRF   02
03F6A:  CLRF   03
03F6C:  MOVFF  00,AF8
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03F70:  MOVFF  AEF,B03
03F74:  MOVFF  AF0,B04
03F78:  MOVFF  AF1,B05
03F7C:  CLRF   x06
03F7E:  MOVF   x03,W
03F80:  MOVWF  00
03F82:  CLRF   01
03F84:  CLRF   02
03F86:  CLRF   03
03F88:  MOVFF  00,AF9
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
03F8C:  MOVLB  A
03F8E:  MOVF   xEE,W
03F90:  MOVWF  00
03F92:  CLRF   01
03F94:  CLRF   02
03F96:  CLRF   03
03F98:  MOVFF  00,AFA
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03F9C:  MOVFF  AEC,B08
03FA0:  MOVLB  B
03FA2:  CLRF   x09
03FA4:  MOVLW  0F
03FA6:  MOVWF  x0B
03FA8:  MOVLW  89
03FAA:  MOVWF  x0A
03FAC:  MOVLB  0
03FAE:  CALL   2ABA
03FB2:  MOVFF  AEC,B08
03FB6:  MOVLB  B
03FB8:  CLRF   x09
03FBA:  MOVLW  0F
03FBC:  MOVWF  x0B
03FBE:  MOVLW  92
03FC0:  MOVWF  x0A
03FC2:  MOVLB  0
03FC4:  CALL   2ABA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03FC8:  MOVFF  AED,B05
03FCC:  MOVFF  AEC,B04
03FD0:  MOVFF  AEB,B03
03FD4:  MOVFF  AEA,B02
03FD8:  MOVLW  0A
03FDA:  MOVLB  B
03FDC:  MOVWF  x07
03FDE:  MOVLW  F6
03FE0:  MOVWF  x06
03FE2:  CLRF   x09
03FE4:  MOVLW  01
03FE6:  MOVWF  x08
03FE8:  MOVLB  0
03FEA:  CALL   3C2A
....................       output_high(flash_stream.cs_pin);
03FEE:  MOVFF  AEC,B08
03FF2:  MOVLW  01
03FF4:  MOVLB  B
03FF6:  MOVWF  x09
03FF8:  MOVLW  0F
03FFA:  MOVWF  x0B
03FFC:  MOVLW  89
03FFE:  MOVWF  x0A
04000:  MOVLB  0
04002:  CALL   2ABA
04006:  MOVFF  AEC,B08
0400A:  MOVLB  B
0400C:  CLRF   x09
0400E:  MOVLW  0F
04010:  MOVWF  x0B
04012:  MOVLW  92
04014:  MOVWF  x0A
04016:  MOVLB  0
04018:  CALL   2ABA
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
0401C:  MOVFF  AEC,B08
04020:  MOVLB  B
04022:  CLRF   x09
04024:  MOVLW  0F
04026:  MOVWF  x0B
04028:  MOVLW  89
0402A:  MOVWF  x0A
0402C:  MOVLB  0
0402E:  CALL   2ABA
04032:  MOVFF  AEC,B08
04036:  MOVLB  B
04038:  CLRF   x09
0403A:  MOVLW  0F
0403C:  MOVWF  x0B
0403E:  MOVLW  92
04040:  MOVWF  x0A
04042:  MOVLB  0
04044:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
04048:  MOVFF  AED,B05
0404C:  MOVFF  AEC,B04
04050:  MOVFF  AEB,B03
04054:  MOVFF  AEA,B02
04058:  MOVLW  0A
0405A:  MOVLB  B
0405C:  MOVWF  x07
0405E:  MOVLW  F7
04060:  MOVWF  x06
04062:  MOVLW  04
04064:  MOVWF  x08
04066:  MOVFF  AF3,B0A
0406A:  MOVFF  AF2,B09
0406E:  MOVFF  AF5,B0C
04072:  MOVFF  AF4,B0B
04076:  MOVLB  0
04078:  CALL   3D1A
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0407C:  MOVLW  02
0407E:  MOVWF  00
04080:  DECFSZ 00,F
04082:  BRA    4080
04084:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04086:  MOVFF  AEC,B08
0408A:  MOVLW  01
0408C:  MOVLB  B
0408E:  MOVWF  x09
04090:  MOVLW  0F
04092:  MOVWF  x0B
04094:  MOVLW  89
04096:  MOVWF  x0A
04098:  MOVLB  0
0409A:  CALL   2ABA
0409E:  MOVFF  AEC,B08
040A2:  MOVLB  B
040A4:  CLRF   x09
040A6:  MOVLW  0F
040A8:  MOVWF  x0B
040AA:  MOVLW  92
040AC:  MOVWF  x0A
040AE:  MOVLB  0
040B0:  CALL   2ABA
....................    }
040B4:  GOTO   4250
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
040B8:  MOVLB  A
040BA:  DECFSZ xEB,W
040BC:  BRA    40C2
040BE:  BRA    40C8
040C0:  MOVLB  0
040C2:  MOVLB  0
040C4:  GOTO   4250
040C8:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
040CA:  MOVLW  06
040CC:  MOVLB  A
040CE:  MOVWF  xFB
040D0:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
040D2:  MOVLW  12
040D4:  MOVLB  A
040D6:  MOVWF  xFC
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
040D8:  MOVFF  AF1,B03
040DC:  MOVLB  B
040DE:  CLRF   x04
040E0:  CLRF   x05
040E2:  CLRF   x06
040E4:  MOVF   x03,W
040E6:  MOVWF  00
040E8:  CLRF   01
040EA:  CLRF   02
040EC:  CLRF   03
040EE:  MOVFF  00,AFD
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
040F2:  MOVFF  AF0,B03
040F6:  MOVFF  AF1,B04
040FA:  CLRF   x05
040FC:  CLRF   x06
040FE:  MOVF   x03,W
04100:  MOVWF  00
04102:  CLRF   01
04104:  CLRF   02
04106:  CLRF   03
04108:  MOVFF  00,AFE
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0410C:  MOVFF  AEF,B03
04110:  MOVFF  AF0,B04
04114:  MOVFF  AF1,B05
04118:  CLRF   x06
0411A:  MOVF   x03,W
0411C:  MOVWF  00
0411E:  CLRF   01
04120:  CLRF   02
04122:  CLRF   03
04124:  MOVFF  00,AFF
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
04128:  MOVLB  A
0412A:  MOVF   xEE,W
0412C:  MOVWF  00
0412E:  CLRF   01
04130:  CLRF   02
04132:  CLRF   03
04134:  MOVFF  00,B00
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04138:  MOVFF  AEC,B08
0413C:  MOVLB  B
0413E:  CLRF   x09
04140:  MOVLW  0F
04142:  MOVWF  x0B
04144:  MOVLW  89
04146:  MOVWF  x0A
04148:  MOVLB  0
0414A:  CALL   2ABA
0414E:  MOVFF  AEC,B08
04152:  MOVLB  B
04154:  CLRF   x09
04156:  MOVLW  0F
04158:  MOVWF  x0B
0415A:  MOVLW  92
0415C:  MOVWF  x0A
0415E:  MOVLB  0
04160:  CALL   2ABA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
04164:  MOVFF  AED,B05
04168:  MOVFF  AEC,B04
0416C:  MOVFF  AEB,B03
04170:  MOVFF  AEA,B02
04174:  MOVLW  0A
04176:  MOVLB  B
04178:  MOVWF  x07
0417A:  MOVLW  FB
0417C:  MOVWF  x06
0417E:  CLRF   x09
04180:  MOVLW  01
04182:  MOVWF  x08
04184:  MOVLB  0
04186:  CALL   3C2A
....................       output_high(flash_stream.cs_pin);
0418A:  MOVFF  AEC,B08
0418E:  MOVLW  01
04190:  MOVLB  B
04192:  MOVWF  x09
04194:  MOVLW  0F
04196:  MOVWF  x0B
04198:  MOVLW  89
0419A:  MOVWF  x0A
0419C:  MOVLB  0
0419E:  CALL   2ABA
041A2:  MOVFF  AEC,B08
041A6:  MOVLB  B
041A8:  CLRF   x09
041AA:  MOVLW  0F
041AC:  MOVWF  x0B
041AE:  MOVLW  92
041B0:  MOVWF  x0A
041B2:  MOVLB  0
041B4:  CALL   2ABA
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
041B8:  MOVFF  AEC,B08
041BC:  MOVLB  B
041BE:  CLRF   x09
041C0:  MOVLW  0F
041C2:  MOVWF  x0B
041C4:  MOVLW  89
041C6:  MOVWF  x0A
041C8:  MOVLB  0
041CA:  CALL   2ABA
041CE:  MOVFF  AEC,B08
041D2:  MOVLB  B
041D4:  CLRF   x09
041D6:  MOVLW  0F
041D8:  MOVWF  x0B
041DA:  MOVLW  92
041DC:  MOVWF  x0A
041DE:  MOVLB  0
041E0:  CALL   2ABA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
041E4:  MOVFF  AED,B05
041E8:  MOVFF  AEC,B04
041EC:  MOVFF  AEB,B03
041F0:  MOVFF  AEA,B02
041F4:  MOVLW  0A
041F6:  MOVLB  B
041F8:  MOVWF  x07
041FA:  MOVLW  FC
041FC:  MOVWF  x06
041FE:  MOVLW  05
04200:  MOVWF  x08
04202:  MOVFF  AF3,B0A
04206:  MOVFF  AF2,B09
0420A:  MOVFF  AF5,B0C
0420E:  MOVFF  AF4,B0B
04212:  MOVLB  0
04214:  CALL   3D1A
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
04218:  MOVLW  02
0421A:  MOVWF  00
0421C:  DECFSZ 00,F
0421E:  BRA    421C
04220:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04222:  MOVFF  AEC,B08
04226:  MOVLW  01
04228:  MOVLB  B
0422A:  MOVWF  x09
0422C:  MOVLW  0F
0422E:  MOVWF  x0B
04230:  MOVLW  89
04232:  MOVWF  x0A
04234:  MOVLB  0
04236:  CALL   2ABA
0423A:  MOVFF  AEC,B08
0423E:  MOVLB  B
04240:  CLRF   x09
04242:  MOVLW  0F
04244:  MOVWF  x0B
04246:  MOVLW  92
04248:  MOVWF  x0A
0424A:  MOVLB  0
0424C:  CALL   2ABA
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
04250:  MOVLB  B
04252:  CLRF   x01
04254:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
04256:  MOVFF  AED,B05
0425A:  MOVFF  AEC,B04
0425E:  MOVFF  AEB,B03
04262:  MOVFF  AEA,B02
04266:  CALL   3E96
0426A:  MOVF   01,W
0426C:  ANDLW  01
0426E:  SUBLW  01
04270:  BTFSS  FD8.2
04272:  GOTO   428C
....................       delay_ms(1);
04276:  MOVLW  01
04278:  MOVLB  B
0427A:  MOVWF  x02
0427C:  MOVLB  0
0427E:  CALL   22AE
....................       if(timeout_counter > 1000){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
04282:  MOVLB  B
04284:  INCF   x01,F
04286:  MOVLB  0
04288:  GOTO   4256
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
0428C:  RETURN 0
.................... }
.................... 
....................  
.................... int1 is_connect(Flash flash_stream){
*
02E02:  MOVLW  9F
02E04:  MOVLB  2
02E06:  MOVWF  x68
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
02E08:  MOVFF  252,B08
02E0C:  MOVLB  B
02E0E:  CLRF   x09
02E10:  MOVLW  0F
02E12:  MOVWF  x0B
02E14:  MOVLW  89
02E16:  MOVWF  x0A
02E18:  MOVLB  0
02E1A:  CALL   2ABA
02E1E:  MOVFF  252,B08
02E22:  MOVLB  B
02E24:  CLRF   x09
02E26:  MOVLW  0F
02E28:  MOVWF  x0B
02E2A:  MOVLW  92
02E2C:  MOVWF  x0A
02E2E:  MOVLB  0
02E30:  CALL   2ABA
....................    delay_us(10);  
02E34:  MOVLW  0D
02E36:  MOVWF  00
02E38:  DECFSZ 00,F
02E3A:  BRA    2E38
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
02E3C:  MOVFF  253,B0B
02E40:  MOVFF  252,B0A
02E44:  MOVFF  251,B09
02E48:  MOVFF  250,B08
02E4C:  MOVLW  02
02E4E:  MOVLB  B
02E50:  MOVWF  x0D
02E52:  MOVLW  68
02E54:  MOVWF  x0C
02E56:  CLRF   x0F
02E58:  MOVLW  01
02E5A:  MOVWF  x0E
02E5C:  MOVLW  02
02E5E:  MOVWF  x11
02E60:  MOVLW  54
02E62:  MOVWF  x10
02E64:  CLRF   x15
02E66:  CLRF   x14
02E68:  CLRF   x13
02E6A:  MOVLW  14
02E6C:  MOVWF  x12
02E6E:  MOVLB  0
02E70:  CALL   2BCE
....................    output_high(flash_stream.cs_pin);
02E74:  MOVFF  252,B08
02E78:  MOVLW  01
02E7A:  MOVLB  B
02E7C:  MOVWF  x09
02E7E:  MOVLW  0F
02E80:  MOVWF  x0B
02E82:  MOVLW  89
02E84:  MOVWF  x0A
02E86:  MOVLB  0
02E88:  CALL   2ABA
02E8C:  MOVFF  252,B08
02E90:  MOVLB  B
02E92:  CLRF   x09
02E94:  MOVLW  0F
02E96:  MOVWF  x0B
02E98:  MOVLW  92
02E9A:  MOVWF  x0A
02E9C:  MOVLB  0
02E9E:  CALL   2ABA
....................    //fprintf(PC,"Read ID:%02X", read_id_data.fields.manufacturer_id);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
02EA2:  MOVLB  2
02EA4:  MOVF   x54,W
02EA6:  SUBLW  20
02EA8:  BTFSC  FD8.2
02EAA:  BRA    2EB2
02EAC:  MOVLB  0
02EAE:  GOTO   2EC0
02EB2:  MOVLB  0
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
02EB4:  MOVLW  01
02EB6:  MOVWF  01
02EB8:  GOTO   2EC8
....................    }
02EBC:  GOTO   2EC8
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
02EC0:  MOVLW  00
02EC2:  MOVWF  01
02EC4:  GOTO   2EC8
....................    }
02EC8:  RETURN 0
.................... }
.................... 
.................... #include "../lib/tool/calc_tools.c"
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size)
.................... {
....................    if (payload_size <= 0) return 0;
*
030EA:  MOVLB  A
030EC:  MOVF   xEC,F
030EE:  BTFSC  FD8.2
030F0:  BRA    30F8
030F2:  MOVLB  0
030F4:  GOTO   3102
030F8:  MOVLB  0
030FA:  MOVLW  00
030FC:  MOVWF  01
030FE:  GOTO   3154
.................... 
....................    unsigned int8 crc = *frame++;
03102:  MOVLB  A
03104:  MOVF   xEB,W
03106:  MOVWF  03
03108:  MOVF   xEA,W
0310A:  INCF   xEA,F
0310C:  BTFSC  FD8.2
0310E:  INCF   xEB,F
03110:  MOVWF  FE9
03112:  MOVFF  03,FEA
03116:  MOVFF  FEF,AED
0311A:  MOVLB  0
....................    while (--payload_size > 0)
0311C:  MOVLB  A
0311E:  DECF   xEC,F
03120:  MOVF   xEC,F
03122:  BTFSS  FD8.2
03124:  BRA    312C
03126:  MOVLB  0
03128:  GOTO   314C
0312C:  MOVLB  0
....................       crc ^= *frame++;
0312E:  MOVLB  A
03130:  MOVF   xEB,W
03132:  MOVWF  03
03134:  MOVF   xEA,W
03136:  INCF   xEA,F
03138:  BTFSC  FD8.2
0313A:  INCF   xEB,F
0313C:  MOVWF  FE9
0313E:  MOVFF  03,FEA
03142:  MOVF   FEF,W
03144:  XORWF  xED,F
03146:  MOVLB  0
03148:  GOTO   311C
.................... 
....................    return crc;
0314C:  MOVLB  A
0314E:  MOVF   xED,W
03150:  MOVWF  01
03152:  MOVLB  0
03154:  RETURN 0
.................... }
.................... 
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size)
.................... {
....................    unsigned int8 received_crc = frame[payload_size - 1]; // CRC is the last byte
....................    unsigned int8 calculated_crc = calc_crc8(frame, payload_size - 1);
....................    return (received_crc == calculated_crc);
.................... }
.................... 
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index)
.................... {
....................     buf[index + 0] = (int8)(value >> 24);   // MSB
....................     buf[index + 1] = (int8)(value >> 16);
....................     buf[index + 2] = (int8)(value >>  8);
....................     buf[index + 3] = (int8)(value      );   // LSB
.................... }
.................... 
.................... int32 lsb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] <<  0) |
....................            ((int32)buf[index + 1] <<  8) |
....................            ((int32)buf[index + 2] << 16) |
....................            ((int32)buf[index + 3] << 24);
.................... }
.................... 
.................... 
.................... int32 msb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] << 24) |
....................            ((int32)buf[index + 1] << 16) |
....................            ((int32)buf[index + 2] <<  8) |
....................            ((int32)buf[index + 3]);
.................... }
.................... 
.................... unsigned int32 int32_lsb_to_msb(unsigned int32 value)
.................... {
....................     return ((value & 0x000000FF) << 24) |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0xFF000000) >> 24);
.................... }
.................... 
.................... unsigned int32 int32_msb_to_lsb(unsigned int32 value)
.................... {
....................     return ((value & 0xFF000000) >> 24) |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x000000FF) << 24);
.................... }
.................... // End of file
.................... 
.................... #include "../lib/tool/smf_queue.c"
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... typedef enum smf_memory_id_t{
....................     // SATO
....................     SMF_SATO_DATA_TABLE = 0xA0,
....................     SMF_SATO_PICLOG = 0xA1,
....................     SMF_SATO_INNER_DIODE_HEADER = 0xA2,
....................     SMF_SATO_INNER_DIODE_DATA = 0xA3,
....................     SMF_SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SMF_SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     SMF_CIGS_DATA_TABLE = 0xC0,
....................     SMF_CIGS_PICLOG = 0xC1,
....................     SMF_CIGS_ENVIRO = 0xC2,
....................     SMF_CIGS_IV1_HEADER = 0xC3,
....................     SMF_CIGS_IV1_DATA = 0xC4,
....................     SMF_CIGS_IV2_HEADER = 0xC5,
....................     SMF_CIGS_IV2_DATA = 0xC6,
.................... };
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS   0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS   0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS     0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS       0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS         0x06AB0FFF
.................... #define CIGS_ENVIRO_START_ADDRESS       0x06AB1000
.................... #define CIGS_ENVIRO_END_ADDRESS         0x06B50FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS   0x06B51000
.................... #define CIGS_IV1_HEADER_END_ADDRESS     0x06BF0FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS     0x06BF1000
.................... #define CIGS_IV1_DATA_END_ADDRESS       0x06FF0FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS   0x06FF1000
.................... #define CIGS_IV2_HEADER_END_ADDRESS     0x07090FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS     0x07091000
.................... #define CIGS_IV2_DATA_END_ADDRESS       0x07490FFF
.................... 
.................... /*
.................... enum smf_memory_id{
....................     // SATO
....................     SATO_DATA_TABLE = 0xA0,
....................     SATO_PICLOG = 0xA1,
....................     SATO_INNER_DIODE_HEADER = 0xA2,
....................     SATO_INNER_DIODE_DATA = 0xA3,
....................     SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     IDF_CIGS_DATA_TABLE = 0xC0,
....................     IDF_CIGS_PICLOG = 0xC1,
....................     IDF_CIGS_ENVIRO = 0xC2,
....................     IDF_CIGS_IV1_HEADER = 0xC3,
....................     IDF_CIGS_IV1_DATA = 0xC4,
....................     IDF_CIGS_IV2_HEADER = 0xC5,
....................     IDF_CIGS_IV2_DATA = 0xC6,
.................... }
.................... */
.................... // DATA ID for CIGS
.................... #define DATA_ID_CIGS_DATA_TABLE 0xC0
.................... #define DATA_ID_CIGS_PICLOG 0xC1
.................... #define DATA_ID_CIGS_ENVIRO 0xC2
.................... #define DATA_ID_CIGS_IV1_HEADER 0xC3
.................... #define DATA_ID_CIGS_IV1_DATA 0xC4
.................... #define DATA_ID_CIGS_IV2_HEADER 0xC5
.................... #define DATA_ID_CIGS_IV2_DATA 0xC6
.................... 
.................... // FLASH ADDRESS for CIGS
.................... #define SMF_DATA_TABLE_HEADER_START_ADDRESS   0x073B0000
.................... #define SMF_DATA_TABLE_HEADER_END_ADDRESS     0x073B0FFF
.................... #define SMF_DATA_TABLE_DATA_START_ADDRESS     0x073B1000
.................... #define SMF_DATA_TABLE_DATA_END_ADDRESS       0x073B1FFF
.................... 
.................... #define SMF_PICLOG_HEADER_START_ADDRESS       0x073B2000
.................... #define SMF_PICLOG_HEADER_END_ADDRESS         0x073B2FFF
.................... #define SMF_PICLOG_DATA_START_ADDRESS         0x073B3000
.................... #define SMF_PICLOG_DATA_END_ADDRESS           0x073C2FFF
.................... 
.................... #define SMF_ENVIRO_HEADER_START_ADDRESS       0x073C3000
.................... #define SMF_ENVIRO_HEADER_END_ADDRESS         0x073C3FFF
.................... #define SMF_ENVIRO_DATA_START_ADDRESS         0x073C4000
.................... #define SMF_ENVIRO_DATA_END_ADDRESS           0x07463FFF
.................... 
.................... #define SMF_IV1_HEADER_HEADER_START_ADDRESS   0x07464000
.................... #define SMF_IV1_HEADER_HEADER_END_ADDRESS     0x07464FFF
.................... #define SMF_IV1_HEADER_DATA_START_ADDRESS     0x07465000
.................... #define SMF_IV1_HEADER_DATA_END_ADDRESS       0x07504FFF
.................... 
.................... #define SMF_IV1_DATA_HEADER_START_ADDRESS     0x07505000
.................... #define SMF_IV1_DATA_HEADER_END_ADDRESS       0x07505FFF
.................... #define SMF_IV1_DATA_DATA_START_ADDRESS       0x07506000
.................... #define SMF_IV1_DATA_DATA_END_ADDRESS         0x07905FFF
.................... 
.................... #define SMF_IV2_HEADER_HEADER_START_ADDRESS   0x07906000
.................... #define SMF_IV2_HEADER_HEADER_END_ADDRESS     0x07906FFF
.................... #define SMF_IV2_HEADER_DATA_START_ADDRESS     0x07907000
.................... #define SMF_IV2_HEADER_DATA_END_ADDRESS       0x079A6FFF
.................... 
.................... #define SMF_IV2_DATA_HEADER_START_ADDRESS     0x079A7000
.................... #define SMF_IV2_DATA_HEADER_END_ADDRESS       0x079A7FFF
.................... #define SMF_IV2_DATA_DATA_START_ADDRESS       0x079A8000
.................... #define SMF_IV2_DATA_DATA_END_ADDRESS         0x07DA7FFF
.................... 
.................... 
.................... // FLASH SIZE for CIGS
.................... #define SMF_DATA_TABLE_SIZE  4096
.................... #define SMF_PICLOG_SIZE     1310720
.................... #define SMF_ENVIRO_SIZE     1310720
.................... #define SMF_IV1_HEADER_SIZE  655360
.................... #define SMF_IV1_DATA_SIZE    4194304
.................... #define SMF_IV2_HEADER_SIZE  655360
.................... #define SMF_IV2_DATA_SIZE    4194304
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data)
.................... {   
....................    fprintf(PC, "Enqueue Flash Operation\r\n");
*
0A82C:  MOVLW  98
0A82E:  MOVWF  FF6
0A830:  MOVLW  03
0A832:  MOVWF  FF7
0A834:  MOVLW  00
0A836:  MOVWF  FF8
0A838:  CALL   22DC
....................    int8 next_tail = (flash_queue.tail_index + 1) % SMF_QUEUE_SIZE;
0A83C:  MOVLW  01
0A83E:  MOVLB  1
0A840:  ADDWF  x11,W
0A842:  ANDLW  0F
0A844:  MOVWF  xE1
.................... 
....................    if(next_tail == flash_queue.head_index)
0A846:  MOVF   x10,W
0A848:  SUBWF  xE1,W
0A84A:  BTFSC  FD8.2
0A84C:  BRA    A854
0A84E:  MOVLB  0
0A850:  GOTO   A86A
0A854:  MOVLB  0
....................       printf("Flash queue is full!!!\r\n");
0A856:  MOVLW  B2
0A858:  MOVWF  FF6
0A85A:  MOVLW  03
0A85C:  MOVWF  FF7
0A85E:  MOVLW  00
0A860:  MOVWF  FF8
0A862:  CALL   22DC
0A866:  GOTO   AA8A
....................       
....................    else
....................    {
....................       flash_queue.entries[flash_queue.tail_index].mission_id = data->mission_id;
0A86A:  MOVLB  1
0A86C:  MOVF   x11,W
0A86E:  MULLW  0C
0A870:  MOVF   FF3,W
0A872:  CLRF   xE3
0A874:  MOVWF  xE2
0A876:  MOVLW  50
0A878:  ADDWF  xE2,W
0A87A:  MOVWF  01
0A87C:  MOVLW  00
0A87E:  ADDWFC xE3,W
0A880:  MOVWF  03
0A882:  MOVF   01,W
0A884:  MOVWF  xE4
0A886:  MOVFF  03,1E5
0A88A:  MOVF   xDF,W
0A88C:  MOVWF  FE9
0A88E:  MOVF   xE0,W
0A890:  MOVWF  FEA
0A892:  MOVF   FEF,W
0A894:  MOVWF  xE6
0A896:  MOVFF  1E5,FEA
0A89A:  MOVFF  1E4,FE9
0A89E:  MOVFF  1E6,FEF
....................       flash_queue.entries[flash_queue.tail_index].func_type  = data->func_type;
0A8A2:  MOVF   x11,W
0A8A4:  MULLW  0C
0A8A6:  MOVF   FF3,W
0A8A8:  CLRF   xE3
0A8AA:  MOVWF  xE2
0A8AC:  MOVLW  01
0A8AE:  ADDWF  xE2,W
0A8B0:  MOVWF  01
0A8B2:  MOVLW  00
0A8B4:  ADDWFC xE3,W
0A8B6:  MOVWF  03
0A8B8:  MOVF   01,W
0A8BA:  ADDLW  50
0A8BC:  MOVWF  01
0A8BE:  MOVLW  00
0A8C0:  ADDWFC 03,F
0A8C2:  MOVF   01,W
0A8C4:  MOVWF  xE2
0A8C6:  MOVFF  03,1E3
0A8CA:  MOVLW  01
0A8CC:  ADDWF  xDF,W
0A8CE:  MOVWF  FE9
0A8D0:  MOVLW  00
0A8D2:  ADDWFC xE0,W
0A8D4:  MOVWF  FEA
0A8D6:  MOVF   FEF,W
0A8D8:  MOVWF  xE4
0A8DA:  MOVFF  1E3,FEA
0A8DE:  MOVFF  1E2,FE9
0A8E2:  MOVFF  1E4,FEF
....................       flash_queue.entries[flash_queue.tail_index].write_mode = data->write_mode;
0A8E6:  MOVF   x11,W
0A8E8:  MULLW  0C
0A8EA:  MOVF   FF3,W
0A8EC:  CLRF   xE3
0A8EE:  MOVWF  xE2
0A8F0:  MOVLW  02
0A8F2:  ADDWF  xE2,W
0A8F4:  MOVWF  01
0A8F6:  MOVLW  00
0A8F8:  ADDWFC xE3,W
0A8FA:  MOVWF  03
0A8FC:  MOVF   01,W
0A8FE:  ADDLW  50
0A900:  MOVWF  01
0A902:  MOVLW  00
0A904:  ADDWFC 03,F
0A906:  MOVF   01,W
0A908:  MOVWF  xE2
0A90A:  MOVFF  03,1E3
0A90E:  MOVLW  02
0A910:  ADDWF  xDF,W
0A912:  MOVWF  FE9
0A914:  MOVLW  00
0A916:  ADDWFC xE0,W
0A918:  MOVWF  FEA
0A91A:  MOVF   FEF,W
0A91C:  MOVWF  xE4
0A91E:  MOVFF  1E3,FEA
0A922:  MOVFF  1E2,FE9
0A926:  MOVFF  1E4,FEF
....................       flash_queue.entries[flash_queue.tail_index].source_type = data->source_type;
0A92A:  MOVF   x11,W
0A92C:  MULLW  0C
0A92E:  MOVF   FF3,W
0A930:  CLRF   xE3
0A932:  MOVWF  xE2
0A934:  MOVLW  03
0A936:  ADDWF  xE2,W
0A938:  MOVWF  01
0A93A:  MOVLW  00
0A93C:  ADDWFC xE3,W
0A93E:  MOVWF  03
0A940:  MOVF   01,W
0A942:  ADDLW  50
0A944:  MOVWF  01
0A946:  MOVLW  00
0A948:  ADDWFC 03,F
0A94A:  MOVF   01,W
0A94C:  MOVWF  xE2
0A94E:  MOVFF  03,1E3
0A952:  MOVLW  03
0A954:  ADDWF  xDF,W
0A956:  MOVWF  01
0A958:  MOVLW  00
0A95A:  ADDWFC xE0,W
0A95C:  MOVWF  03
0A95E:  MOVF   01,W
0A960:  MOVWF  FE9
0A962:  MOVFF  03,FEA
0A966:  MOVLW  00
0A968:  BTFSC  FEF.0
0A96A:  MOVLW  01
0A96C:  MOVWF  01
0A96E:  BTFSS  01.0
0A970:  BRA    A978
0A972:  MOVLB  0
0A974:  GOTO   A988
0A978:  MOVLB  0
0A97A:  MOVFF  1E3,FEA
0A97E:  MOVFF  1E2,FE9
0A982:  BCF    FEF.0
0A984:  GOTO   A992
0A988:  MOVFF  1E3,FEA
0A98C:  MOVFF  1E2,FE9
0A990:  BSF    FEF.0
....................       flash_queue.entries[flash_queue.tail_index].misf_start_addr = data->misf_start_addr;
0A992:  MOVLB  1
0A994:  MOVF   x11,W
0A996:  MULLW  0C
0A998:  MOVF   FF3,W
0A99A:  CLRF   xE3
0A99C:  MOVWF  xE2
0A99E:  MOVLW  04
0A9A0:  ADDWF  xE2,W
0A9A2:  MOVWF  01
0A9A4:  MOVLW  00
0A9A6:  ADDWFC xE3,W
0A9A8:  MOVWF  03
0A9AA:  MOVF   01,W
0A9AC:  ADDLW  50
0A9AE:  MOVWF  01
0A9B0:  MOVLW  00
0A9B2:  ADDWFC 03,F
0A9B4:  MOVF   01,W
0A9B6:  MOVWF  xE2
0A9B8:  MOVFF  03,1E3
0A9BC:  MOVLW  04
0A9BE:  ADDWF  xDF,W
0A9C0:  MOVWF  FE9
0A9C2:  MOVLW  00
0A9C4:  ADDWFC xE0,W
0A9C6:  MOVWF  FEA
0A9C8:  MOVFF  FEF,00
0A9CC:  MOVFF  FEC,01
0A9D0:  MOVFF  FEC,02
0A9D4:  MOVFF  FEC,03
0A9D8:  MOVF   FED,F
0A9DA:  MOVF   FED,F
0A9DC:  MOVF   FED,F
0A9DE:  MOVFF  03,1E7
0A9E2:  MOVFF  02,1E6
0A9E6:  MOVFF  01,1E5
0A9EA:  MOVFF  00,1E4
0A9EE:  MOVFF  1E3,FEA
0A9F2:  MOVFF  1E2,FE9
0A9F6:  MOVFF  1E4,FEF
0A9FA:  MOVFF  1E5,FEC
0A9FE:  MOVFF  1E6,FEC
0AA02:  MOVFF  1E7,FEC
0AA06:  MOVF   FED,F
0AA08:  MOVF   FED,F
0AA0A:  MOVF   FED,F
....................       flash_queue.entries[flash_queue.tail_index].misf_size = data->misf_size;
0AA0C:  MOVF   x11,W
0AA0E:  MULLW  0C
0AA10:  MOVF   FF3,W
0AA12:  CLRF   xE3
0AA14:  MOVWF  xE2
0AA16:  MOVLW  08
0AA18:  ADDWF  xE2,W
0AA1A:  MOVWF  01
0AA1C:  MOVLW  00
0AA1E:  ADDWFC xE3,W
0AA20:  MOVWF  03
0AA22:  MOVF   01,W
0AA24:  ADDLW  50
0AA26:  MOVWF  01
0AA28:  MOVLW  00
0AA2A:  ADDWFC 03,F
0AA2C:  MOVF   01,W
0AA2E:  MOVWF  xE2
0AA30:  MOVFF  03,1E3
0AA34:  MOVLW  08
0AA36:  ADDWF  xDF,W
0AA38:  MOVWF  FE9
0AA3A:  MOVLW  00
0AA3C:  ADDWFC xE0,W
0AA3E:  MOVWF  FEA
0AA40:  MOVFF  FEF,00
0AA44:  MOVFF  FEC,01
0AA48:  MOVFF  FEC,02
0AA4C:  MOVFF  FEC,03
0AA50:  MOVF   FED,F
0AA52:  MOVF   FED,F
0AA54:  MOVF   FED,F
0AA56:  MOVFF  03,1E7
0AA5A:  MOVFF  02,1E6
0AA5E:  MOVFF  01,1E5
0AA62:  MOVFF  00,1E4
0AA66:  MOVFF  1E3,FEA
0AA6A:  MOVFF  1E2,FE9
0AA6E:  MOVFF  1E4,FEF
0AA72:  MOVFF  1E5,FEC
0AA76:  MOVFF  1E6,FEC
0AA7A:  MOVFF  1E7,FEC
0AA7E:  MOVF   FED,F
0AA80:  MOVF   FED,F
0AA82:  MOVF   FED,F
....................       flash_queue.tail_index = next_tail;
0AA84:  MOVFF  1E1,111
0AA88:  MOVLB  0
....................    }
0AA8A:  RETURN 0
.................... 
.................... 
.................... }
.................... 
.................... 
.................... FlashOperationStruct *dequeue_flash_operation()
.................... {
....................    if (flash_queue.head_index == flash_queue.tail_index)
*
0FD16:  MOVLB  1
0FD18:  MOVF   x11,W
0FD1A:  SUBWF  x10,W
0FD1C:  BTFSC  FD8.2
0FD1E:  BRA    FD26
0FD20:  MOVLB  0
0FD22:  GOTO   FD48
0FD26:  MOVLB  0
....................    {
....................       printf("Flash queue is empty\r\n");
0FD28:  MOVLW  CC
0FD2A:  MOVWF  FF6
0FD2C:  MOVLW  03
0FD2E:  MOVWF  FF7
0FD30:  MOVLW  00
0FD32:  MOVWF  FF8
0FD34:  CALL   22DC
....................       return 0x00;
0FD38:  MOVLW  00
0FD3A:  MOVWF  01
0FD3C:  MOVLW  00
0FD3E:  MOVWF  02
0FD40:  GOTO   FD74
....................    }
0FD44:  GOTO   FD74
....................    else
....................    {
....................       int8 current_head = flash_queue.head_index;
0FD48:  MOVFF  110,1A1
....................       flash_queue.head_index = (flash_queue.head_index + 1) % SMF_QUEUE_SIZE;
0FD4C:  MOVLW  01
0FD4E:  MOVLB  1
0FD50:  ADDWF  x10,W
0FD52:  ANDLW  0F
0FD54:  MOVWF  x10
.................... 
.................... 
....................       return &flash_queue.entries[current_head];
0FD56:  MOVF   xA1,W
0FD58:  MULLW  0C
0FD5A:  MOVF   FF3,W
0FD5C:  CLRF   03
0FD5E:  ADDLW  50
0FD60:  MOVWF  01
0FD62:  MOVLW  00
0FD64:  ADDWFC 03,F
0FD66:  MOVF   01,W
0FD68:  MOVWF  01
0FD6A:  MOVF   03,W
0FD6C:  MOVWF  02
0FD6E:  MOVLB  0
0FD70:  GOTO   FD74
....................    }
0FD74:  GOTO   1236E (RETURN)
.................... }
.................... 
.................... int1 is_empty_flash_queue(void)
.................... {
....................    return flash_queue.head_index == flash_queue.tail_index;
*
0FC3A:  MOVLB  1
0FC3C:  MOVF   x11,W
0FC3E:  SUBWF  x10,W
0FC40:  BTFSS  FD8.2
0FC42:  BRA    FC4A
0FC44:  MOVLB  0
0FC46:  GOTO   FC52
0FC4A:  MOVLB  0
0FC4C:  MOVLW  00
0FC4E:  GOTO   FC54
0FC52:  MOVLW  01
0FC54:  MOVWF  01
0FC56:  RETURN 0
.................... }
.................... 
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id)
.................... {
....................    SmfAddressStruct mis_struct = {0};
*
113A6:  MOVLB  2
113A8:  CLRF   x0B
113AA:  CLRF   x0C
113AC:  CLRF   x0D
113AE:  CLRF   x0E
113B0:  CLRF   x0F
113B2:  CLRF   x10
113B4:  CLRF   x11
113B6:  CLRF   x12
.................... 
....................    if (mission_id == CIGS_DATA_TABLE)
113B8:  MOVF   x0A,F
113BA:  BTFSC  FD8.2
113BC:  BRA    113C4
113BE:  MOVLB  0
113C0:  GOTO   113E8
113C4:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_DATA_TABLE_START_ADDRESS;
113C6:  MOVLW  06
113C8:  MOVLB  2
113CA:  MOVWF  x0E
113CC:  MOVLW  AA
113CE:  MOVWF  x0D
113D0:  CLRF   x0C
113D2:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_DATA_TABLE_END_ADDRESS;
113D4:  MOVLW  06
113D6:  MOVWF  x12
113D8:  MOVLW  AA
113DA:  MOVWF  x11
113DC:  MOVLW  0F
113DE:  MOVWF  x10
113E0:  SETF   x0F
113E2:  MOVLB  0
....................    }
113E4:  GOTO   11524
....................    else if (mission_id == CIGS_PICLOG_DATA)
113E8:  MOVLB  2
113EA:  DECFSZ x0A,W
113EC:  BRA    113F2
113EE:  BRA    113F8
113F0:  MOVLB  0
113F2:  MOVLB  0
113F4:  GOTO   1141E
113F8:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
113FA:  MOVLW  06
113FC:  MOVLB  2
113FE:  MOVWF  x0E
11400:  MOVLW  AA
11402:  MOVWF  x0D
11404:  MOVLW  10
11406:  MOVWF  x0C
11408:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
1140A:  MOVLW  06
1140C:  MOVWF  x12
1140E:  MOVLW  AB
11410:  MOVWF  x11
11412:  MOVLW  0F
11414:  MOVWF  x10
11416:  SETF   x0F
11418:  MOVLB  0
....................    }
1141A:  GOTO   11524
....................    else if (mission_id == CIGS_ENVIRO_DATA)
1141E:  MOVLB  2
11420:  MOVF   x0A,W
11422:  SUBLW  02
11424:  BTFSC  FD8.2
11426:  BRA    1142E
11428:  MOVLB  0
1142A:  GOTO   11454
1142E:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
11430:  MOVLW  06
11432:  MOVLB  2
11434:  MOVWF  x0E
11436:  MOVLW  AA
11438:  MOVWF  x0D
1143A:  MOVLW  10
1143C:  MOVWF  x0C
1143E:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
11440:  MOVLW  06
11442:  MOVWF  x12
11444:  MOVLW  AB
11446:  MOVWF  x11
11448:  MOVLW  0F
1144A:  MOVWF  x10
1144C:  SETF   x0F
1144E:  MOVLB  0
....................    }
11450:  GOTO   11524
....................    else if (mission_id == CIGS_IV1_HEADER)
11454:  MOVLB  2
11456:  MOVF   x0A,W
11458:  SUBLW  03
1145A:  BTFSC  FD8.2
1145C:  BRA    11464
1145E:  MOVLB  0
11460:  GOTO   1148A
11464:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV1_HEADER_START_ADDRESS;
11466:  MOVLW  06
11468:  MOVLB  2
1146A:  MOVWF  x0E
1146C:  MOVLW  B5
1146E:  MOVWF  x0D
11470:  MOVLW  10
11472:  MOVWF  x0C
11474:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_IV1_HEADER_END_ADDRESS;
11476:  MOVLW  06
11478:  MOVWF  x12
1147A:  MOVLW  BF
1147C:  MOVWF  x11
1147E:  MOVLW  0F
11480:  MOVWF  x10
11482:  SETF   x0F
11484:  MOVLB  0
....................    }
11486:  GOTO   11524
....................    else if (mission_id == CIGS_IV1_DATA)
1148A:  MOVLB  2
1148C:  MOVF   x0A,W
1148E:  SUBLW  04
11490:  BTFSC  FD8.2
11492:  BRA    1149A
11494:  MOVLB  0
11496:  GOTO   114BE
1149A:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV1_DATA_START_ADDRESS;
1149C:  MOVLW  06
1149E:  MOVLB  2
114A0:  MOVWF  x0E
114A2:  MOVLW  BF
114A4:  MOVWF  x0D
114A6:  MOVLW  10
114A8:  MOVWF  x0C
114AA:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_IV1_DATA_END_ADDRESS;
114AC:  MOVLW  06
114AE:  MOVWF  x12
114B0:  SETF   x11
114B2:  MOVLW  0F
114B4:  MOVWF  x10
114B6:  SETF   x0F
114B8:  MOVLB  0
....................    }
114BA:  GOTO   11524
....................       else if (mission_id == CIGS_IV2_HEADER)
114BE:  MOVLB  2
114C0:  MOVF   x0A,W
114C2:  SUBLW  05
114C4:  BTFSC  FD8.2
114C6:  BRA    114CE
114C8:  MOVLB  0
114CA:  GOTO   114F2
114CE:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV2_HEADER_START_ADDRESS;
114D0:  MOVLW  06
114D2:  MOVLB  2
114D4:  MOVWF  x0E
114D6:  SETF   x0D
114D8:  MOVLW  10
114DA:  MOVWF  x0C
114DC:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_IV2_HEADER_END_ADDRESS;
114DE:  MOVLW  07
114E0:  MOVWF  x12
114E2:  MOVLW  09
114E4:  MOVWF  x11
114E6:  MOVLW  0F
114E8:  MOVWF  x10
114EA:  SETF   x0F
114EC:  MOVLB  0
....................    }
114EE:  GOTO   11524
....................    else if (mission_id == CIGS_IV2_DATA)
114F2:  MOVLB  2
114F4:  MOVF   x0A,W
114F6:  SUBLW  06
114F8:  BTFSC  FD8.2
114FA:  BRA    11502
114FC:  MOVLB  0
114FE:  GOTO   11524
11502:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV2_DATA_START_ADDRESS;
11504:  MOVLW  07
11506:  MOVLB  2
11508:  MOVWF  x0E
1150A:  MOVLW  09
1150C:  MOVWF  x0D
1150E:  MOVLW  10
11510:  MOVWF  x0C
11512:  CLRF   x0B
....................       mis_struct.end_address   = CIGS_IV2_DATA_END_ADDRESS;
11514:  MOVLW  07
11516:  MOVWF  x12
11518:  MOVLW  49
1151A:  MOVWF  x11
1151C:  MOVLW  0F
1151E:  MOVWF  x10
11520:  SETF   x0F
11522:  MOVLB  0
....................    }
....................    return mis_struct;
11524:  MOVLW  0B
11526:  MOVWF  01
11528:  MOVLW  02
1152A:  MOVWF  02
1152C:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "../lib/communication/communication.c"
.................... // #include "communication.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #include "mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
05560:  MOVLB  1
05562:  CLRF   xA2
05564:  CLRF   xA3
05566:  CLRF   xA4
05568:  CLRF   xA5
0556A:  CLRF   xA6
0556C:  CLRF   xA7
0556E:  CLRF   xA8
05570:  CLRF   xA9
05572:  CLRF   xAA
05574:  CLRF   xAB
05576:  CLRF   xAC
05578:  CLRF   xAD
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
0557A:  MOVLW  E4
0557C:  MOVWF  FF6
0557E:  MOVLW  03
05580:  MOVWF  FF7
05582:  MOVLW  00
05584:  MOVWF  FF8
05586:  MOVLB  0
05588:  CALL   22DC
....................    fprintf(PC, "\t[BOSS] >>> ");
0558C:  MOVLW  04
0558E:  MOVWF  FF6
05590:  MOVLW  04
05592:  MOVWF  FF7
05594:  MOVLW  00
05596:  MOVWF  FF8
05598:  CALL   22DC
....................    for (int8 i = 0; i < receive_signal_size; i++)
0559C:  MOVLB  1
0559E:  CLRF   xAE
055A0:  MOVLB  0
055A2:  MOVLB  1
055A4:  MOVF   xA1,W
055A6:  SUBWF  xAE,W
055A8:  BTFSS  FD8.0
055AA:  BRA    55B2
055AC:  MOVLB  0
055AE:  GOTO   55EE
055B2:  MOVLB  0
....................       fprintf(PC, "%X ", receive_signal[i]);
055B4:  MOVLB  1
055B6:  MOVF   xAE,W
055B8:  ADDWF  x9F,W
055BA:  MOVWF  FE9
055BC:  MOVLW  00
055BE:  ADDWFC xA0,W
055C0:  MOVWF  FEA
055C2:  MOVFF  FEF,1B5
055C6:  MOVFF  1B5,9E8
055CA:  MOVLW  37
055CC:  MOVLB  9
055CE:  MOVWF  xE9
055D0:  MOVLB  0
055D2:  CALL   2542
055D6:  MOVLW  20
055D8:  BTFSS  FA6.6
055DA:  GOTO   55D8
055DE:  MOVLB  E
055E0:  MOVWF  xF9
055E2:  MOVLB  0
055E4:  MOVLB  1
055E6:  INCF   xAE,F
055E8:  MOVLB  0
055EA:  GOTO   55A2
....................    fprintf(PC, "\r\n");
055EE:  MOVLW  0D
055F0:  BTFSS  FA6.6
055F2:  GOTO   55F0
055F6:  MOVLB  E
055F8:  MOVWF  xF9
055FA:  MOVLW  0A
055FC:  MOVLB  0
055FE:  BTFSS  FA6.6
05600:  GOTO   55FE
05604:  MOVLB  E
05606:  MOVWF  xF9
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
05608:  MOVFF  1A0,1B6
0560C:  MOVFF  19F,1B5
05610:  MOVFF  1A1,1B7
05614:  MOVLB  0
05616:  GOTO   5248
0561A:  MOVFF  01,1AF
....................    if (frame_start_position == -1)
0561E:  MOVLB  1
05620:  MOVF   xAF,W
05622:  SUBLW  FF
05624:  BTFSC  FD8.2
05626:  BRA    562E
05628:  MOVLB  0
0562A:  GOTO   563C
0562E:  MOVLB  0
....................       return command;
05630:  MOVLW  A2
05632:  MOVWF  01
05634:  MOVLW  01
05636:  MOVWF  02
05638:  GOTO   575E
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
0563C:  MOVLB  1
0563E:  MOVF   xAF,W
05640:  ADDWF  x9F,W
05642:  MOVWF  01
05644:  MOVLW  00
05646:  ADDWFC xA0,W
05648:  MOVWF  03
0564A:  MOVF   01,W
0564C:  MOVWF  xB0
0564E:  MOVFF  03,1B1
05652:  MOVF   xB0,W
05654:  MOVWF  FE9
05656:  MOVF   xB1,W
05658:  MOVWF  FEA
0565A:  MOVF   FEF,W
0565C:  ANDLW  0F
0565E:  MOVWF  xB2
05660:  MOVFF  1B2,1B5
05664:  MOVLB  0
05666:  GOTO   52F0
0566A:  MOVFF  01,1B3
....................    if (content_size == -1)
0566E:  MOVLB  1
05670:  MOVF   xB3,W
05672:  SUBLW  FF
05674:  BTFSC  FD8.2
05676:  BRA    567E
05678:  MOVLB  0
0567A:  GOTO   568C
0567E:  MOVLB  0
....................       return command;
05680:  MOVLW  A2
05682:  MOVWF  01
05684:  MOVLW  01
05686:  MOVWF  02
05688:  GOTO   575E
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
0568C:  MOVLB  1
0568E:  MOVF   xAF,W
05690:  SUBWF  xA1,W
05692:  MOVWF  xB4
....................    
....................    if (!check_crc(frame, receive_frame_size))
05694:  MOVFF  1B1,1B6
05698:  MOVFF  1B0,1B5
0569C:  MOVFF  1B4,1B7
056A0:  MOVLB  0
056A2:  GOTO   53B0
056A6:  MOVF   01,F
056A8:  BTFSS  FD8.2
056AA:  GOTO   56BA
....................       return command;
056AE:  MOVLW  A2
056B0:  MOVWF  01
056B2:  MOVLW  01
056B4:  MOVWF  02
056B6:  GOTO   575E
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
056BA:  MOVLB  1
056BC:  MOVF   xB0,W
056BE:  MOVWF  FE9
056C0:  MOVF   xB1,W
056C2:  MOVWF  FEA
056C4:  MOVF   FEF,W
056C6:  ANDLW  F0
056C8:  MOVWF  00
056CA:  SWAPF  00,W
056CC:  MOVWF  xB5
056CE:  MOVLW  0F
056D0:  ANDWF  xB5,F
056D2:  MOVFF  1B5,1B6
056D6:  MOVLB  0
056D8:  GOTO   54A0
056DC:  MOVF   01,F
056DE:  BTFSS  FD8.2
056E0:  GOTO   56F0
....................       return command;
056E4:  MOVLW  A2
056E6:  MOVWF  01
056E8:  MOVLW  01
056EA:  MOVWF  02
056EC:  GOTO   575E
.................... 
....................    command.frame_id = frame_id;
056F0:  MOVFF  1B2,1A2
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
056F4:  MOVLW  01
056F6:  MOVLB  1
056F8:  ADDWF  xB0,W
056FA:  MOVWF  01
056FC:  MOVLW  00
056FE:  ADDWFC xB1,W
05700:  MOVWF  03
05702:  MOVF   01,W
05704:  MOVWF  xB5
05706:  MOVFF  03,1B6
0570A:  MOVLW  02
0570C:  SUBWF  xB4,W
0570E:  MOVWF  xB7
05710:  MOVLW  01
05712:  MOVWF  FEA
05714:  MOVLW  A5
05716:  MOVWF  FE9
05718:  MOVFF  1B6,FE2
0571C:  MOVFF  1B5,FE1
05720:  MOVF   xB7,W
05722:  MOVWF  01
05724:  BTFSS  FD8.2
05726:  BRA    572E
05728:  MOVLB  0
0572A:  GOTO   573A
0572E:  MOVLB  0
05730:  MOVFF  FE6,FEE
05734:  DECFSZ 01,F
05736:  GOTO   5730
....................    command.size = receive_frame_size-2;
0573A:  MOVLW  02
0573C:  MOVLB  1
0573E:  SUBWF  xB4,W
05740:  MOVWF  xA3
....................    command.is_exist = TRUE;
05742:  BSF    xA4.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
05744:  MOVLW  12
05746:  MOVWF  FF6
05748:  MOVLW  04
0574A:  MOVWF  FF7
0574C:  MOVLW  00
0574E:  MOVWF  FF8
05750:  MOVLB  0
05752:  CALL   22DC
....................    return command;
05756:  MOVLW  A2
05758:  MOVWF  01
0575A:  MOVLW  01
0575C:  MOVWF  02
0575E:  GOTO   12DA2 (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
05248:  MOVLB  1
0524A:  CLRF   xB8
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
0524C:  CLRF   xB8
0524E:  MOVLB  0
05250:  MOVLW  01
05252:  MOVLB  1
05254:  SUBWF  xB7,W
05256:  SUBWF  xB8,W
05258:  BTFSS  FD8.0
0525A:  BRA    5262
0525C:  MOVLB  0
0525E:  GOTO   529A
05262:  MOVLB  0
....................       if(receive_signal[i] == SFD)
05264:  MOVLB  1
05266:  MOVF   xB8,W
05268:  ADDWF  xB5,W
0526A:  MOVWF  FE9
0526C:  MOVLW  00
0526E:  ADDWFC xB6,W
05270:  MOVWF  FEA
05272:  MOVF   FEF,W
05274:  SUBLW  AA
05276:  BTFSC  FD8.2
05278:  BRA    5280
0527A:  MOVLB  0
0527C:  GOTO   5290
05280:  MOVLB  0
....................          return i+1;
05282:  MOVLW  01
05284:  MOVLB  1
05286:  ADDWF  xB8,W
05288:  MOVWF  01
0528A:  MOVLB  0
0528C:  GOTO   52EC
05290:  MOVLB  1
05292:  INCF   xB8,F
05294:  MOVLB  0
05296:  GOTO   5250
....................    if (receive_signal[i] == SFD)
0529A:  MOVLB  1
0529C:  MOVF   xB8,W
0529E:  ADDWF  xB5,W
052A0:  MOVWF  FE9
052A2:  MOVLW  00
052A4:  ADDWFC xB6,W
052A6:  MOVWF  FEA
052A8:  MOVF   FEF,W
052AA:  SUBLW  AA
052AC:  BTFSC  FD8.2
052AE:  BRA    52B6
052B0:  MOVLB  0
052B2:  GOTO   52D4
052B6:  MOVLB  0
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
052B8:  MOVLW  2E
052BA:  MOVWF  FF6
052BC:  MOVLW  04
052BE:  MOVWF  FF7
052C0:  MOVLW  00
052C2:  MOVWF  FF8
052C4:  CALL   22DC
....................       return -1;
052C8:  MOVLW  FF
052CA:  MOVWF  01
052CC:  GOTO   52EC
....................    }
052D0:  GOTO   52EC
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
052D4:  MOVLW  44
052D6:  MOVWF  FF6
052D8:  MOVLW  04
052DA:  MOVWF  FF7
052DC:  MOVLW  00
052DE:  MOVWF  FF8
052E0:  CALL   22DC
....................       return -1;
052E4:  MOVLW  FF
052E6:  MOVWF  01
052E8:  GOTO   52EC
....................    }
052EC:  GOTO   561A (RETURN)
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
052F0:  MOVLB  1
052F2:  CLRF   xB6
052F4:  MOVLB  0
052F6:  MOVLB  1
052F8:  MOVF   xB6,W
052FA:  SUBLW  03
052FC:  BTFSC  FD8.0
052FE:  BRA    5306
05300:  MOVLB  0
05302:  GOTO   5364
05306:  MOVLB  0
....................       if (frame_id == frame_ids[i].id)
05308:  BCF    FD8.0
0530A:  MOVLB  1
0530C:  RLCF   xB6,W
0530E:  CLRF   xB8
05310:  MOVWF  xB7
05312:  MOVLW  1A
05314:  ADDWF  xB7,W
05316:  MOVWF  FE9
05318:  MOVLW  01
0531A:  ADDWFC xB8,W
0531C:  MOVWF  FEA
0531E:  MOVF   FEF,W
05320:  SUBWF  xB5,W
05322:  BTFSC  FD8.2
05324:  BRA    532C
05326:  MOVLB  0
05328:  GOTO   535A
0532C:  MOVLB  0
....................          return frame_ids[i].length;
0532E:  BCF    FD8.0
05330:  MOVLB  1
05332:  RLCF   xB6,W
05334:  CLRF   xB8
05336:  MOVWF  xB7
05338:  MOVLW  01
0533A:  ADDWF  xB7,W
0533C:  MOVWF  01
0533E:  MOVLW  00
05340:  ADDWFC xB8,W
05342:  MOVWF  03
05344:  MOVF   01,W
05346:  ADDLW  1A
05348:  MOVWF  FE9
0534A:  MOVLW  01
0534C:  ADDWFC 03,W
0534E:  MOVWF  FEA
05350:  MOVF   FEF,W
05352:  MOVWF  01
05354:  MOVLB  0
05356:  GOTO   53AA
0535A:  MOVLB  1
0535C:  INCF   xB6,F
0535E:  MOVLB  0
05360:  GOTO   52F6
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
05364:  MOVLW  56
05366:  MOVWF  FF6
05368:  MOVLW  04
0536A:  MOVWF  FF7
0536C:  MOVLW  00
0536E:  MOVWF  FF8
05370:  MOVLW  1F
05372:  MOVLB  9
05374:  MOVWF  xC2
05376:  MOVLB  0
05378:  CALL   2312
0537C:  MOVFF  1B5,9E8
05380:  MOVLW  37
05382:  MOVLB  9
05384:  MOVWF  xE9
05386:  MOVLB  0
05388:  CALL   2542
0538C:  MOVLW  0D
0538E:  BTFSS  FA6.6
05390:  GOTO   538E
05394:  MOVLB  E
05396:  MOVWF  xF9
05398:  MOVLW  0A
0539A:  MOVLB  0
0539C:  BTFSS  FA6.6
0539E:  GOTO   539C
053A2:  MOVLB  E
053A4:  MOVWF  xF9
....................    return -1;
053A6:  MOVLW  FF
053A8:  MOVWF  01
053AA:  MOVLB  0
053AC:  GOTO   566A (RETURN)
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
053B0:  MOVLW  01
053B2:  MOVLB  1
053B4:  SUBWF  xB7,W
053B6:  ADDWF  xB5,W
053B8:  MOVWF  FE9
053BA:  MOVLW  00
053BC:  ADDWFC xB6,W
053BE:  MOVWF  FEA
053C0:  MOVFF  FEF,1B8
053C4:  MOVLW  01
053C6:  SUBWF  xB7,W
053C8:  MOVWF  xBA
053CA:  MOVFF  1B6,AEB
053CE:  MOVFF  1B5,AEA
053D2:  MOVFF  1BA,AEC
053D6:  MOVLB  0
053D8:  CALL   30EA
053DC:  MOVFF  01,1B9
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
053E0:  MOVLB  1
053E2:  MOVF   xB9,W
053E4:  SUBWF  xB8,W
053E6:  BTFSC  FD8.2
053E8:  BRA    53F0
053EA:  MOVLB  0
053EC:  GOTO   53FE
053F0:  MOVLB  0
....................       return TRUE;
053F2:  MOVLW  01
053F4:  MOVWF  01
053F6:  GOTO   549C
053FA:  GOTO   549C
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
053FE:  MOVLW  7A
05400:  MOVWF  FF6
05402:  MOVLW  04
05404:  MOVWF  FF7
05406:  MOVLW  00
05408:  MOVWF  FF8
0540A:  CALL   22DC
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
0540E:  MOVLW  8C
05410:  MOVWF  FF6
05412:  MOVLW  04
05414:  MOVWF  FF7
05416:  MOVLW  00
05418:  MOVWF  FF8
0541A:  MOVLW  13
0541C:  MOVLB  9
0541E:  MOVWF  xC2
05420:  MOVLB  0
05422:  CALL   2312
05426:  MOVFF  1B8,9E8
0542A:  MOVLW  37
0542C:  MOVLB  9
0542E:  MOVWF  xE9
05430:  MOVLB  0
05432:  CALL   2542
05436:  MOVLW  0D
05438:  BTFSS  FA6.6
0543A:  GOTO   5438
0543E:  MOVLB  E
05440:  MOVWF  xF9
05442:  MOVLW  0A
05444:  MOVLB  0
05446:  BTFSS  FA6.6
05448:  GOTO   5446
0544C:  MOVLB  E
0544E:  MOVWF  xF9
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
05450:  MOVLW  A4
05452:  MOVWF  FF6
05454:  MOVLW  04
05456:  MOVWF  FF7
05458:  MOVLW  00
0545A:  MOVWF  FF8
0545C:  MOVLW  13
0545E:  MOVLB  9
05460:  MOVWF  xC2
05462:  MOVLB  0
05464:  CALL   2312
05468:  MOVFF  1B9,9E8
0546C:  MOVLW  37
0546E:  MOVLB  9
05470:  MOVWF  xE9
05472:  MOVLB  0
05474:  CALL   2542
05478:  MOVLW  0D
0547A:  BTFSS  FA6.6
0547C:  GOTO   547A
05480:  MOVLB  E
05482:  MOVWF  xF9
05484:  MOVLW  0A
05486:  MOVLB  0
05488:  BTFSS  FA6.6
0548A:  GOTO   5488
0548E:  MOVLB  E
05490:  MOVWF  xF9
....................       return FALSE;
05492:  MOVLW  00
05494:  MOVWF  01
05496:  MOVLB  0
05498:  GOTO   549C
....................    }
0549C:  GOTO   56A6 (RETURN)
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
054A0:  MOVLB  1
054A2:  MOVF   xB6,W
054A4:  SUBLW  0C
054A6:  BTFSC  FD8.2
054A8:  BRA    54B0
054AA:  MOVLB  0
054AC:  GOTO   54BE
054B0:  MOVLB  0
....................       return TRUE;
054B2:  MOVLW  01
054B4:  MOVWF  01
054B6:  GOTO   555C
054BA:  GOTO   555C
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
054BE:  MOVLW  BC
054C0:  MOVWF  FF6
054C2:  MOVLW  04
054C4:  MOVWF  FF7
054C6:  MOVLW  00
054C8:  MOVWF  FF8
054CA:  CALL   22DC
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
054CE:  MOVLW  DE
054D0:  MOVWF  FF6
054D2:  MOVLW  04
054D4:  MOVWF  FF7
054D6:  MOVLW  00
054D8:  MOVWF  FF8
054DA:  MOVLW  13
054DC:  MOVLB  9
054DE:  MOVWF  xC2
054E0:  MOVLB  0
054E2:  CALL   2312
054E6:  MOVFF  1B6,9E8
054EA:  MOVLW  37
054EC:  MOVLB  9
054EE:  MOVWF  xE9
054F0:  MOVLB  0
054F2:  CALL   2542
054F6:  MOVLW  0D
054F8:  BTFSS  FA6.6
054FA:  GOTO   54F8
054FE:  MOVLB  E
05500:  MOVWF  xF9
05502:  MOVLW  0A
05504:  MOVLB  0
05506:  BTFSS  FA6.6
05508:  GOTO   5506
0550C:  MOVLB  E
0550E:  MOVWF  xF9
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
05510:  MOVLW  F6
05512:  MOVWF  FF6
05514:  MOVLW  04
05516:  MOVWF  FF7
05518:  MOVLW  00
0551A:  MOVWF  FF8
0551C:  MOVLW  13
0551E:  MOVLB  9
05520:  MOVWF  xC2
05522:  MOVLB  0
05524:  CALL   2312
05528:  MOVLW  0C
0552A:  MOVLB  9
0552C:  MOVWF  xE8
0552E:  MOVLW  37
05530:  MOVWF  xE9
05532:  MOVLB  0
05534:  CALL   2542
05538:  MOVLW  0D
0553A:  BTFSS  FA6.6
0553C:  GOTO   553A
05540:  MOVLB  E
05542:  MOVWF  xF9
05544:  MOVLW  0A
05546:  MOVLB  0
05548:  BTFSS  FA6.6
0554A:  GOTO   5548
0554E:  MOVLB  E
05550:  MOVWF  xF9
....................       return FALSE;  
05552:  MOVLW  00
05554:  MOVWF  01
05556:  MOVLB  0
05558:  GOTO   555C
....................    }
0555C:  GOTO   56DC (RETURN)
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
0586C:  MOVLW  AA
0586E:  MOVLB  1
05870:  MOVWF  xE3
....................    data[1] = (BOSS_PIC << 4) | frame_id;
05872:  MOVF   xDF,W
05874:  IORLW  50
05876:  MOVWF  xE4
....................    memcpy(&data[2], content, size);
05878:  MOVLW  01
0587A:  MOVWF  FEA
0587C:  MOVLW  E5
0587E:  MOVWF  FE9
05880:  MOVFF  1E1,FE2
05884:  MOVFF  1E0,FE1
05888:  MOVF   xE2,W
0588A:  MOVWF  01
0588C:  BTFSS  FD8.2
0588E:  BRA    5896
05890:  MOVLB  0
05892:  GOTO   58A2
05896:  MOVLB  0
05898:  MOVFF  FE6,FEE
0589C:  DECFSZ 01,F
0589E:  GOTO   5898
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
058A2:  MOVLW  02
058A4:  MOVLB  1
058A6:  ADDWF  xE2,W
058A8:  MOVWF  xF3
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
058AA:  CLRF   03
058AC:  MOVF   xF3,W
058AE:  ADDLW  E3
058B0:  MOVWF  01
058B2:  MOVLW  01
058B4:  ADDWFC 03,F
058B6:  MOVF   01,W
058B8:  MOVWF  xF5
058BA:  MOVFF  03,1F6
058BE:  MOVLW  01
058C0:  SUBWF  xF3,W
058C2:  MOVWF  xF7
058C4:  MOVLW  01
058C6:  MOVLB  A
058C8:  MOVWF  xEB
058CA:  MOVLW  E4
058CC:  MOVWF  xEA
058CE:  MOVFF  1F7,AEC
058D2:  MOVLB  0
058D4:  CALL   30EA
058D8:  MOVFF  1F6,FEA
058DC:  MOVFF  1F5,FE9
058E0:  MOVFF  01,FEF
....................    int8 data_size = payload_size + 1; // '1' is for CRC
058E4:  MOVLW  01
058E6:  MOVLB  1
058E8:  ADDWF  xF3,W
058EA:  MOVWF  xF4
....................    
....................    transmit(data, data_size);
058EC:  MOVLW  01
058EE:  MOVWF  xF6
058F0:  MOVLW  E3
058F2:  MOVWF  xF5
058F4:  MOVFF  1F4,1F7
058F8:  MOVLB  0
058FA:  GOTO   57AE
058FE:  RETURN 0
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
057AE:  MOVLB  1
057B0:  CLRF   xF8
057B2:  MOVLB  0
057B4:  MOVLB  1
057B6:  MOVF   xF7,W
057B8:  SUBWF  xF8,W
057BA:  BTFSS  FD8.0
057BC:  BRA    57C4
057BE:  MOVLB  0
057C0:  GOTO   57EA
057C4:  MOVLB  0
....................       fputc(data[i], BOSS);
057C6:  MOVLB  1
057C8:  MOVF   xF8,W
057CA:  ADDWF  xF5,W
057CC:  MOVWF  FE9
057CE:  MOVLW  00
057D0:  ADDWFC xF6,W
057D2:  MOVWF  FEA
057D4:  MOVFF  FEF,1FA
057D8:  MOVF   xFA,W
057DA:  MOVLB  0
057DC:  GOTO   579E
057E0:  MOVLB  1
057E2:  INCF   xF8,F
057E4:  MOVLB  0
057E6:  GOTO   57B4
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
057EA:  MOVLW  0E
057EC:  MOVWF  FF6
057EE:  MOVLW  05
057F0:  MOVWF  FF7
057F2:  MOVLW  00
057F4:  MOVWF  FF8
057F6:  CALL   22DC
....................    for(int i = 0; i < data_size; i++)
057FA:  MOVLB  1
057FC:  CLRF   xF9
057FE:  MOVLB  0
05800:  MOVLB  1
05802:  MOVF   xF7,W
05804:  SUBWF  xF9,W
05806:  BTFSS  FD8.0
05808:  BRA    5810
0580A:  MOVLB  0
0580C:  GOTO   584C
05810:  MOVLB  0
....................       fprintf(PC, "%X ", data[i]);
05812:  MOVLB  1
05814:  MOVF   xF9,W
05816:  ADDWF  xF5,W
05818:  MOVWF  FE9
0581A:  MOVLW  00
0581C:  ADDWFC xF6,W
0581E:  MOVWF  FEA
05820:  MOVFF  FEF,1FA
05824:  MOVFF  1FA,9E8
05828:  MOVLW  37
0582A:  MOVLB  9
0582C:  MOVWF  xE9
0582E:  MOVLB  0
05830:  CALL   2542
05834:  MOVLW  20
05836:  BTFSS  FA6.6
05838:  GOTO   5836
0583C:  MOVLB  E
0583E:  MOVWF  xF9
05840:  MOVLB  0
05842:  MOVLB  1
05844:  INCF   xF9,F
05846:  MOVLB  0
05848:  GOTO   5800
....................    fprintf(PC, "\r\n");
0584C:  MOVLW  0D
0584E:  BTFSS  FA6.6
05850:  GOTO   584E
05854:  MOVLB  E
05856:  MOVWF  xF9
05858:  MOVLW  0A
0585A:  MOVLB  0
0585C:  BTFSS  FA6.6
0585E:  GOTO   585C
05862:  MOVLB  E
05864:  MOVWF  xF9
05866:  MOVLB  0
05868:  GOTO   58FE (RETURN)
.................... }
.................... 
.................... #include "../lib/communication/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    return command;
.................... }
.................... 
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
05900:  MOVLW  0F
05902:  MOVLB  1
05904:  MOVWF  xDF
05906:  CLRF   xE1
05908:  CLRF   xE0
0590A:  CLRF   xE2
0590C:  MOVLB  0
0590E:  CALL   586C
05912:  RETURN 0
.................... }
.................... 
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
0A7D4:  MOVLW  03
0A7D6:  MOVLB  1
0A7D8:  MOVWF  xDF
0A7DA:  CLRF   xE1
0A7DC:  MOVLW  4C
0A7DE:  MOVWF  xE0
0A7E0:  MOVLW  04
0A7E2:  MOVWF  xE2
0A7E4:  MOVLB  0
0A7E6:  CALL   586C
0A7EA:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (boss_receive_buffer_size > 0)
0A7EC:  MOVF   4A,F
0A7EE:  BTFSC  FD8.2
0A7F0:  GOTO   A828
....................    {
....................       clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
0A7F4:  MOVLB  1
0A7F6:  CLRF   xE0
0A7F8:  MOVLW  2A
0A7FA:  MOVWF  xDF
0A7FC:  CLRF   xE2
0A7FE:  MOVLW  4A
0A800:  MOVWF  xE1
0A802:  MOVLB  0
0A804:  CALL   5762
....................       fprintf(PC, "\r\n");
0A808:  MOVLW  0D
0A80A:  BTFSS  FA6.6
0A80C:  GOTO   A80A
0A810:  MOVLB  E
0A812:  MOVWF  xF9
0A814:  MOVLW  0A
0A816:  MOVLB  0
0A818:  BTFSS  FA6.6
0A81A:  GOTO   A818
0A81E:  MOVLB  E
0A820:  MOVWF  xF9
....................       transmit_status();
0A822:  MOVLB  0
0A824:  CALL   A7D4
....................    }
0A828:  GOTO   AB76 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... // コア機能実装ファイル
.................... #include "domain/cigs_iv.c"
.................... #include "cigs_iv.h"      
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/cigs_config.h"      
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../device_driver/ad7490_driver.h"  
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../device_driver/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "cigs_flash.h"               
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/mission_tools.h"   
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../hal/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... #INT_TIMER1 
.................... static void TIMER1_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... void set_current_sec(unsigned int32 new_sec);
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void sweep_with_print()
*
0CBA4:  MOVLW  03
0CBA6:  MOVLB  1
0CBA8:  MOVWF  xB0
0CBAA:  CLRF   xAF
0CBAC:  MOVLW  07
0CBAE:  MOVWF  xB2
0CBB0:  MOVLW  E0
0CBB2:  MOVWF  xB1
.................... {
....................     unsigned int16 curr_threshold = 0x300;
....................     unsigned int16 curr_limit = 0x7E0;
.................... 
....................     // Enable both CIGS ports
....................     connect_port1();
0CBB4:  MOVLB  0
0CBB6:  CALL   5214
....................     connect_port2();
0CBBA:  CALL   521C
....................     mcp4901_1_write(0); 
0CBBE:  MOVLB  9
0CBC0:  CLRF   xDD
0CBC2:  CLRF   xDC
0CBC4:  MOVLB  0
0CBC6:  CALL   2872
....................     mcp4901_2_write(0);
0CBCA:  MOVLB  9
0CBCC:  CLRF   xDD
0CBCE:  CLRF   xDC
0CBD0:  MOVLB  0
0CBD2:  CALL   28B0
....................     delay_ms(100);
0CBD6:  MOVLW  64
0CBD8:  MOVLB  B
0CBDA:  MOVWF  x02
0CBDC:  MOVLB  0
0CBDE:  CALL   22AE
....................     
....................     // Init Port1
....................     sweep_debug_config_t port1 = {0};
0CBE2:  MOVLB  1
0CBE4:  CLRF   xB3
0CBE6:  CLRF   xB4
0CBE8:  CLRF   xB5
0CBEA:  CLRF   xB6
0CBEC:  CLRF   xB7
0CBEE:  CLRF   xB8
0CBF0:  CLRF   xB9
0CBF2:  CLRF   xBA
0CBF4:  CLRF   xBB
0CBF6:  CLRF   xBC
0CBF8:  CLRF   xBD
0CBFA:  CLRF   xBE
0CBFC:  CLRF   xBF
0CBFE:  CLRF   xC0
0CC00:  CLRF   xC1
0CC02:  CLRF   xC2
0CC04:  CLRF   xC3
0CC06:  CLRF   xC4
0CC08:  CLRF   xC5
0CC0A:  CLRF   xC6
0CC0C:  CLRF   xC7
0CC0E:  CLRF   xC8
0CC10:  CLRF   xC9
0CC12:  CLRF   xCA
0CC14:  CLRF   xCB
0CC16:  CLRF   xCC
0CC18:  CLRF   xCD
0CC1A:  CLRF   xCE
0CC1C:  CLRF   xCF
0CC1E:  CLRF   xD0
0CC20:  CLRF   xD1
0CC22:  CLRF   xD2
0CC24:  CLRF   xD3
0CC26:  CLRF   xD4
0CC28:  CLRF   xD5
0CC2A:  CLRF   xD6
0CC2C:  CLRF   xD7
0CC2E:  CLRF   xD8
0CC30:  CLRF   xD9
0CC32:  CLRF   xDA
0CC34:  CLRF   xDB
0CC36:  CLRF   xDC
0CC38:  CLRF   xDD
0CC3A:  CLRF   xDE
0CC3C:  CLRF   xDF
0CC3E:  CLRF   xE0
0CC40:  CLRF   xE1
0CC42:  CLRF   xE2
0CC44:  CLRF   xE3
0CC46:  CLRF   xE4
0CC48:  CLRF   xE5
0CC4A:  CLRF   xE6
0CC4C:  CLRF   xE7
0CC4E:  CLRF   xE8
0CC50:  CLRF   xE9
0CC52:  CLRF   xEA
0CC54:  CLRF   xEB
0CC56:  CLRF   xEC
0CC58:  CLRF   xED
0CC5A:  CLRF   xEE
0CC5C:  CLRF   xEF
0CC5E:  CLRF   xF0
0CC60:  CLRF   xF1
0CC62:  CLRF   xF2
0CC64:  CLRF   xF3
0CC66:  CLRF   xF4
0CC68:  CLRF   xF5
0CC6A:  CLRF   xF6
0CC6C:  CLRF   xF7
0CC6E:  CLRF   xF8
0CC70:  CLRF   xF9
0CC72:  CLRF   xFA
0CC74:  CLRF   xFB
0CC76:  CLRF   xFC
0CC78:  CLRF   xFD
0CC7A:  CLRF   xFE
0CC7C:  CLRF   xFF
0CC7E:  MOVLB  2
0CC80:  CLRF   x00
0CC82:  CLRF   x01
0CC84:  CLRF   x02
0CC86:  CLRF   x03
0CC88:  CLRF   x04
0CC8A:  CLRF   x05
0CC8C:  CLRF   x06
0CC8E:  CLRF   x07
0CC90:  CLRF   x08
0CC92:  CLRF   x09
0CC94:  CLRF   x0A
0CC96:  CLRF   x0B
0CC98:  CLRF   x0C
0CC9A:  CLRF   x0D
0CC9C:  CLRF   x0E
0CC9E:  CLRF   x0F
0CCA0:  CLRF   x10
0CCA2:  CLRF   x11
0CCA4:  CLRF   x12
0CCA6:  CLRF   x13
0CCA8:  CLRF   x14
0CCAA:  CLRF   x15
0CCAC:  CLRF   x16
0CCAE:  CLRF   x17
0CCB0:  CLRF   x18
0CCB2:  CLRF   x19
0CCB4:  CLRF   x1A
0CCB6:  CLRF   x1B
0CCB8:  CLRF   x1C
0CCBA:  CLRF   x1D
0CCBC:  CLRF   x1E
0CCBE:  CLRF   x1F
0CCC0:  CLRF   x20
0CCC2:  CLRF   x21
0CCC4:  CLRF   x22
0CCC6:  CLRF   x23
0CCC8:  CLRF   x24
0CCCA:  CLRF   x25
0CCCC:  CLRF   x26
0CCCE:  CLRF   x27
0CCD0:  CLRF   x28
0CCD2:  CLRF   x29
0CCD4:  CLRF   x2A
0CCD6:  CLRF   x2B
0CCD8:  CLRF   x2C
0CCDA:  CLRF   x2D
0CCDC:  CLRF   x2E
0CCDE:  CLRF   x2F
0CCE0:  CLRF   x30
0CCE2:  CLRF   x31
0CCE4:  CLRF   x32
0CCE6:  CLRF   x33
0CCE8:  CLRF   x34
0CCEA:  CLRF   x35
0CCEC:  CLRF   x36
0CCEE:  CLRF   x37
0CCF0:  CLRF   x38
0CCF2:  CLRF   x39
0CCF4:  CLRF   x3A
0CCF6:  CLRF   x3B
0CCF8:  CLRF   x3C
0CCFA:  CLRF   x3D
0CCFC:  CLRF   x3E
0CCFE:  CLRF   x3F
0CD00:  CLRF   x40
0CD02:  CLRF   x41
0CD04:  CLRF   x42
0CD06:  CLRF   x43
0CD08:  CLRF   x44
0CD0A:  CLRF   x45
0CD0C:  CLRF   x46
0CD0E:  CLRF   x47
0CD10:  CLRF   x48
0CD12:  CLRF   x49
0CD14:  CLRF   x4A
0CD16:  CLRF   x4B
0CD18:  CLRF   x4C
0CD1A:  CLRF   x4D
0CD1C:  CLRF   x4E
0CD1E:  CLRF   x4F
0CD20:  CLRF   x50
0CD22:  CLRF   x51
0CD24:  CLRF   x52
0CD26:  CLRF   x53
0CD28:  CLRF   x54
0CD2A:  CLRF   x55
0CD2C:  CLRF   x56
0CD2E:  CLRF   x57
0CD30:  CLRF   x58
0CD32:  CLRF   x59
0CD34:  CLRF   x5A
0CD36:  CLRF   x5B
0CD38:  CLRF   x5C
0CD3A:  CLRF   x5D
0CD3C:  CLRF   x5E
0CD3E:  CLRF   x5F
0CD40:  CLRF   x60
0CD42:  CLRF   x61
0CD44:  CLRF   x62
0CD46:  CLRF   x63
0CD48:  CLRF   x64
0CD4A:  CLRF   x65
0CD4C:  CLRF   x66
0CD4E:  CLRF   x67
0CD50:  CLRF   x68
0CD52:  CLRF   x69
0CD54:  CLRF   x6A
0CD56:  CLRF   x6B
0CD58:  CLRF   x6C
0CD5A:  CLRF   x6D
0CD5C:  CLRF   x6E
0CD5E:  CLRF   x6F
0CD60:  CLRF   x70
0CD62:  CLRF   x71
0CD64:  CLRF   x72
0CD66:  CLRF   x73
0CD68:  CLRF   x74
0CD6A:  CLRF   x75
0CD6C:  CLRF   x76
0CD6E:  CLRF   x77
0CD70:  CLRF   x78
0CD72:  CLRF   x79
0CD74:  CLRF   x7A
0CD76:  CLRF   x7B
0CD78:  CLRF   x7C
0CD7A:  CLRF   x7D
0CD7C:  CLRF   x7E
0CD7E:  CLRF   x7F
0CD80:  CLRF   x80
0CD82:  CLRF   x81
0CD84:  CLRF   x82
0CD86:  CLRF   x83
0CD88:  CLRF   x84
0CD8A:  CLRF   x85
0CD8C:  CLRF   x86
0CD8E:  CLRF   x87
0CD90:  CLRF   x88
0CD92:  CLRF   x89
0CD94:  CLRF   x8A
0CD96:  CLRF   x8B
0CD98:  CLRF   x8C
0CD9A:  CLRF   x8D
0CD9C:  CLRF   x8E
0CD9E:  CLRF   x8F
0CDA0:  CLRF   x90
0CDA2:  CLRF   x91
0CDA4:  CLRF   x92
0CDA6:  CLRF   x93
0CDA8:  CLRF   x94
0CDAA:  CLRF   x95
0CDAC:  CLRF   x96
0CDAE:  CLRF   x97
0CDB0:  CLRF   x98
0CDB2:  CLRF   x99
0CDB4:  CLRF   x9A
0CDB6:  CLRF   x9B
0CDB8:  CLRF   x9C
0CDBA:  CLRF   x9D
0CDBC:  CLRF   x9E
0CDBE:  CLRF   x9F
0CDC0:  CLRF   xA0
0CDC2:  CLRF   xA1
0CDC4:  CLRF   xA2
0CDC6:  CLRF   xA3
0CDC8:  CLRF   xA4
0CDCA:  CLRF   xA5
0CDCC:  CLRF   xA6
0CDCE:  CLRF   xA7
0CDD0:  CLRF   xA8
0CDD2:  CLRF   xA9
0CDD4:  CLRF   xAA
0CDD6:  CLRF   xAB
0CDD8:  CLRF   xAC
0CDDA:  CLRF   xAD
0CDDC:  CLRF   xAE
0CDDE:  CLRF   xAF
0CDE0:  CLRF   xB0
0CDE2:  CLRF   xB1
0CDE4:  CLRF   xB2
0CDE6:  CLRF   xB3
0CDE8:  CLRF   xB4
0CDEA:  CLRF   xB5
0CDEC:  CLRF   xB6
0CDEE:  CLRF   xB7
0CDF0:  CLRF   xB8
0CDF2:  CLRF   xB9
0CDF4:  CLRF   xBA
0CDF6:  CLRF   xBB
0CDF8:  CLRF   xBC
0CDFA:  CLRF   xBD
0CDFC:  CLRF   xBE
0CDFE:  CLRF   xBF
0CE00:  CLRF   xC0
0CE02:  CLRF   xC1
0CE04:  CLRF   xC2
0CE06:  CLRF   xC3
0CE08:  CLRF   xC4
0CE0A:  CLRF   xC5
0CE0C:  CLRF   xC6
0CE0E:  CLRF   xC7
0CE10:  CLRF   xC8
0CE12:  CLRF   xC9
0CE14:  CLRF   xCA
0CE16:  CLRF   xCB
0CE18:  CLRF   xCC
0CE1A:  CLRF   xCD
0CE1C:  CLRF   xCE
0CE1E:  CLRF   xCF
0CE20:  CLRF   xD0
0CE22:  CLRF   xD1
0CE24:  CLRF   xD2
0CE26:  CLRF   xD3
0CE28:  CLRF   xD4
0CE2A:  CLRF   xD5
0CE2C:  CLRF   xD6
0CE2E:  CLRF   xD7
0CE30:  CLRF   xD8
0CE32:  CLRF   xD9
0CE34:  CLRF   xDA
0CE36:  CLRF   xDB
0CE38:  CLRF   xDC
0CE3A:  CLRF   xDD
0CE3C:  CLRF   xDE
0CE3E:  CLRF   xDF
0CE40:  CLRF   xE0
0CE42:  CLRF   xE1
0CE44:  CLRF   xE2
0CE46:  CLRF   xE3
0CE48:  CLRF   xE4
0CE4A:  CLRF   xE5
0CE4C:  CLRF   xE6
0CE4E:  CLRF   xE7
0CE50:  CLRF   xE8
0CE52:  CLRF   xE9
0CE54:  CLRF   xEA
0CE56:  CLRF   xEB
0CE58:  CLRF   xEC
0CE5A:  CLRF   xED
0CE5C:  CLRF   xEE
0CE5E:  CLRF   xEF
0CE60:  CLRF   xF0
0CE62:  CLRF   xF1
0CE64:  CLRF   xF2
0CE66:  CLRF   xF3
0CE68:  CLRF   xF4
0CE6A:  CLRF   xF5
0CE6C:  CLRF   xF6
0CE6E:  CLRF   xF7
0CE70:  CLRF   xF8
0CE72:  CLRF   xF9
0CE74:  CLRF   xFA
0CE76:  CLRF   xFB
0CE78:  CLRF   xFC
0CE7A:  CLRF   xFD
0CE7C:  CLRF   xFE
0CE7E:  CLRF   xFF
0CE80:  MOVLB  3
0CE82:  CLRF   x00
0CE84:  CLRF   x01
0CE86:  CLRF   x02
0CE88:  CLRF   x03
0CE8A:  CLRF   x04
0CE8C:  CLRF   x05
0CE8E:  CLRF   x06
0CE90:  CLRF   x07
0CE92:  CLRF   x08
0CE94:  CLRF   x09
0CE96:  CLRF   x0A
0CE98:  CLRF   x0B
0CE9A:  CLRF   x0C
0CE9C:  CLRF   x0D
0CE9E:  CLRF   x0E
0CEA0:  CLRF   x0F
0CEA2:  CLRF   x10
0CEA4:  CLRF   x11
0CEA6:  CLRF   x12
0CEA8:  CLRF   x13
0CEAA:  CLRF   x14
0CEAC:  CLRF   x15
0CEAE:  CLRF   x16
0CEB0:  CLRF   x17
0CEB2:  CLRF   x18
0CEB4:  CLRF   x19
0CEB6:  CLRF   x1A
0CEB8:  CLRF   x1B
0CEBA:  CLRF   x1C
0CEBC:  CLRF   x1D
0CEBE:  CLRF   x1E
0CEC0:  CLRF   x1F
0CEC2:  CLRF   x20
0CEC4:  CLRF   x21
0CEC6:  CLRF   x22
0CEC8:  CLRF   x23
0CECA:  CLRF   x24
0CECC:  CLRF   x25
0CECE:  CLRF   x26
0CED0:  CLRF   x27
0CED2:  CLRF   x28
0CED4:  CLRF   x29
0CED6:  CLRF   x2A
0CED8:  CLRF   x2B
0CEDA:  CLRF   x2C
0CEDC:  CLRF   x2D
0CEDE:  CLRF   x2E
0CEE0:  CLRF   x2F
0CEE2:  CLRF   x30
0CEE4:  CLRF   x31
0CEE6:  CLRF   x32
0CEE8:  CLRF   x33
0CEEA:  CLRF   x34
0CEEC:  CLRF   x35
0CEEE:  CLRF   x36
0CEF0:  CLRF   x37
0CEF2:  CLRF   x38
0CEF4:  CLRF   x39
0CEF6:  CLRF   x3A
0CEF8:  CLRF   x3B
0CEFA:  CLRF   x3C
0CEFC:  CLRF   x3D
0CEFE:  CLRF   x3E
0CF00:  CLRF   x3F
0CF02:  CLRF   x40
0CF04:  CLRF   x41
0CF06:  CLRF   x42
0CF08:  CLRF   x43
0CF0A:  CLRF   x44
0CF0C:  CLRF   x45
0CF0E:  CLRF   x46
0CF10:  CLRF   x47
0CF12:  CLRF   x48
0CF14:  CLRF   x49
0CF16:  CLRF   x4A
0CF18:  CLRF   x4B
0CF1A:  CLRF   x4C
0CF1C:  CLRF   x4D
0CF1E:  CLRF   x4E
0CF20:  CLRF   x4F
0CF22:  CLRF   x50
0CF24:  CLRF   x51
0CF26:  CLRF   x52
0CF28:  CLRF   x53
0CF2A:  CLRF   x54
0CF2C:  CLRF   x55
0CF2E:  CLRF   x56
0CF30:  CLRF   x57
0CF32:  CLRF   x58
0CF34:  CLRF   x59
0CF36:  CLRF   x5A
0CF38:  CLRF   x5B
0CF3A:  CLRF   x5C
0CF3C:  CLRF   x5D
0CF3E:  CLRF   x5E
0CF40:  CLRF   x5F
0CF42:  CLRF   x60
0CF44:  CLRF   x61
0CF46:  CLRF   x62
0CF48:  CLRF   x63
0CF4A:  CLRF   x64
0CF4C:  CLRF   x65
0CF4E:  CLRF   x66
0CF50:  CLRF   x67
0CF52:  CLRF   x68
0CF54:  CLRF   x69
0CF56:  CLRF   x6A
0CF58:  CLRF   x6B
0CF5A:  CLRF   x6C
0CF5C:  CLRF   x6D
0CF5E:  CLRF   x6E
0CF60:  CLRF   x6F
0CF62:  CLRF   x70
0CF64:  CLRF   x71
0CF66:  CLRF   x72
0CF68:  CLRF   x73
0CF6A:  CLRF   x74
0CF6C:  CLRF   x75
0CF6E:  CLRF   x76
0CF70:  CLRF   x77
0CF72:  CLRF   x78
0CF74:  CLRF   x79
0CF76:  CLRF   x7A
0CF78:  CLRF   x7B
0CF7A:  CLRF   x7C
0CF7C:  CLRF   x7D
0CF7E:  CLRF   x7E
0CF80:  CLRF   x7F
0CF82:  CLRF   x80
0CF84:  CLRF   x81
0CF86:  CLRF   x82
0CF88:  CLRF   x83
0CF8A:  CLRF   x84
0CF8C:  CLRF   x85
0CF8E:  CLRF   x86
0CF90:  CLRF   x87
0CF92:  CLRF   x88
0CF94:  CLRF   x89
0CF96:  CLRF   x8A
0CF98:  CLRF   x8B
0CF9A:  CLRF   x8C
0CF9C:  CLRF   x8D
0CF9E:  CLRF   x8E
0CFA0:  CLRF   x8F
0CFA2:  CLRF   x90
0CFA4:  CLRF   x91
0CFA6:  CLRF   x92
0CFA8:  CLRF   x93
0CFAA:  CLRF   x94
0CFAC:  CLRF   x95
0CFAE:  CLRF   x96
0CFB0:  CLRF   x97
0CFB2:  CLRF   x98
0CFB4:  CLRF   x99
0CFB6:  CLRF   x9A
0CFB8:  CLRF   x9B
0CFBA:  CLRF   x9C
0CFBC:  CLRF   x9D
0CFBE:  CLRF   x9E
0CFC0:  CLRF   x9F
0CFC2:  CLRF   xA0
0CFC4:  CLRF   xA1
0CFC6:  CLRF   xA2
0CFC8:  CLRF   xA3
0CFCA:  CLRF   xA4
0CFCC:  CLRF   xA5
0CFCE:  CLRF   xA6
0CFD0:  CLRF   xA7
0CFD2:  CLRF   xA8
0CFD4:  CLRF   xA9
0CFD6:  CLRF   xAA
0CFD8:  CLRF   xAB
0CFDA:  CLRF   xAC
0CFDC:  CLRF   xAD
0CFDE:  CLRF   xAE
0CFE0:  CLRF   xAF
0CFE2:  CLRF   xB0
0CFE4:  CLRF   xB1
0CFE6:  CLRF   xB2
0CFE8:  CLRF   xB3
0CFEA:  CLRF   xB4
0CFEC:  CLRF   xB5
0CFEE:  CLRF   xB6
0CFF0:  CLRF   xB7
0CFF2:  CLRF   xB8
0CFF4:  CLRF   xB9
0CFF6:  CLRF   xBA
0CFF8:  CLRF   xBB
0CFFA:  CLRF   xBC
0CFFC:  CLRF   xBD
0CFFE:  CLRF   xBE
0D000:  CLRF   xBF
0D002:  CLRF   xC0
0D004:  CLRF   xC1
0D006:  CLRF   xC2
0D008:  CLRF   xC3
0D00A:  CLRF   xC4
0D00C:  CLRF   xC5
0D00E:  CLRF   xC6
0D010:  CLRF   xC7
0D012:  CLRF   xC8
0D014:  CLRF   xC9
0D016:  CLRF   xCA
0D018:  CLRF   xCB
0D01A:  CLRF   xCC
0D01C:  CLRF   xCD
0D01E:  CLRF   xCE
0D020:  CLRF   xCF
0D022:  CLRF   xD0
0D024:  CLRF   xD1
0D026:  CLRF   xD2
0D028:  CLRF   xD3
0D02A:  CLRF   xD4
0D02C:  CLRF   xD5
0D02E:  CLRF   xD6
0D030:  CLRF   xD7
0D032:  CLRF   xD8
0D034:  CLRF   xD9
0D036:  CLRF   xDA
0D038:  CLRF   xDB
0D03A:  CLRF   xDC
0D03C:  CLRF   xDD
0D03E:  CLRF   xDE
0D040:  CLRF   xDF
0D042:  CLRF   xE0
0D044:  CLRF   xE1
0D046:  CLRF   xE2
0D048:  CLRF   xE3
0D04A:  CLRF   xE4
0D04C:  CLRF   xE5
0D04E:  CLRF   xE6
0D050:  CLRF   xE7
0D052:  CLRF   xE8
0D054:  CLRF   xE9
0D056:  CLRF   xEA
0D058:  CLRF   xEB
0D05A:  CLRF   xEC
0D05C:  CLRF   xED
0D05E:  CLRF   xEE
0D060:  CLRF   xEF
0D062:  CLRF   xF0
0D064:  CLRF   xF1
0D066:  CLRF   xF2
0D068:  CLRF   xF3
0D06A:  CLRF   xF4
0D06C:  CLRF   xF5
0D06E:  CLRF   xF6
0D070:  CLRF   xF7
0D072:  CLRF   xF8
0D074:  CLRF   xF9
0D076:  CLRF   xFA
0D078:  CLRF   xFB
0D07A:  CLRF   xFC
0D07C:  CLRF   xFD
0D07E:  CLRF   xFE
0D080:  CLRF   xFF
0D082:  MOVLB  4
0D084:  CLRF   x00
0D086:  CLRF   x01
0D088:  CLRF   x02
0D08A:  CLRF   x03
0D08C:  CLRF   x04
0D08E:  CLRF   x05
0D090:  CLRF   x06
0D092:  CLRF   x07
0D094:  CLRF   x08
0D096:  CLRF   x09
0D098:  CLRF   x0A
0D09A:  CLRF   x0B
0D09C:  CLRF   x0C
0D09E:  CLRF   x0D
0D0A0:  CLRF   x0E
0D0A2:  CLRF   x0F
0D0A4:  CLRF   x10
0D0A6:  CLRF   x11
0D0A8:  CLRF   x12
0D0AA:  CLRF   x13
0D0AC:  CLRF   x14
0D0AE:  CLRF   x15
0D0B0:  CLRF   x16
0D0B2:  CLRF   x17
0D0B4:  CLRF   x18
0D0B6:  CLRF   x19
0D0B8:  CLRF   x1A
0D0BA:  CLRF   x1B
0D0BC:  CLRF   x1C
0D0BE:  CLRF   x1D
0D0C0:  CLRF   x1E
0D0C2:  CLRF   x1F
0D0C4:  CLRF   x20
0D0C6:  CLRF   x21
0D0C8:  CLRF   x22
0D0CA:  CLRF   x23
0D0CC:  CLRF   x24
0D0CE:  CLRF   x25
0D0D0:  CLRF   x26
0D0D2:  CLRF   x27
0D0D4:  CLRF   x28
0D0D6:  CLRF   x29
0D0D8:  CLRF   x2A
0D0DA:  CLRF   x2B
0D0DC:  CLRF   x2C
0D0DE:  CLRF   x2D
0D0E0:  CLRF   x2E
0D0E2:  CLRF   x2F
0D0E4:  CLRF   x30
0D0E6:  CLRF   x31
0D0E8:  CLRF   x32
0D0EA:  CLRF   x33
0D0EC:  CLRF   x34
0D0EE:  CLRF   x35
0D0F0:  CLRF   x36
0D0F2:  CLRF   x37
0D0F4:  CLRF   x38
0D0F6:  CLRF   x39
0D0F8:  CLRF   x3A
0D0FA:  CLRF   x3B
0D0FC:  CLRF   x3C
0D0FE:  CLRF   x3D
0D100:  CLRF   x3E
0D102:  CLRF   x3F
0D104:  CLRF   x40
0D106:  CLRF   x41
0D108:  CLRF   x42
0D10A:  CLRF   x43
0D10C:  CLRF   x44
0D10E:  CLRF   x45
0D110:  CLRF   x46
0D112:  CLRF   x47
0D114:  CLRF   x48
0D116:  CLRF   x49
0D118:  CLRF   x4A
0D11A:  CLRF   x4B
0D11C:  CLRF   x4C
0D11E:  CLRF   x4D
0D120:  CLRF   x4E
0D122:  CLRF   x4F
0D124:  CLRF   x50
0D126:  CLRF   x51
0D128:  CLRF   x52
0D12A:  CLRF   x53
0D12C:  CLRF   x54
0D12E:  CLRF   x55
0D130:  CLRF   x56
0D132:  CLRF   x57
0D134:  CLRF   x58
0D136:  CLRF   x59
0D138:  CLRF   x5A
0D13A:  CLRF   x5B
0D13C:  CLRF   x5C
0D13E:  CLRF   x5D
0D140:  CLRF   x5E
0D142:  CLRF   x5F
0D144:  CLRF   x60
0D146:  CLRF   x61
0D148:  CLRF   x62
0D14A:  CLRF   x63
0D14C:  CLRF   x64
0D14E:  CLRF   x65
0D150:  CLRF   x66
0D152:  CLRF   x67
0D154:  CLRF   x68
0D156:  CLRF   x69
0D158:  CLRF   x6A
0D15A:  CLRF   x6B
0D15C:  CLRF   x6C
0D15E:  CLRF   x6D
0D160:  CLRF   x6E
0D162:  CLRF   x6F
0D164:  CLRF   x70
0D166:  CLRF   x71
0D168:  CLRF   x72
0D16A:  CLRF   x73
0D16C:  CLRF   x74
0D16E:  CLRF   x75
0D170:  CLRF   x76
0D172:  CLRF   x77
0D174:  CLRF   x78
0D176:  CLRF   x79
0D178:  CLRF   x7A
0D17A:  CLRF   x7B
0D17C:  CLRF   x7C
0D17E:  CLRF   x7D
0D180:  CLRF   x7E
0D182:  CLRF   x7F
0D184:  CLRF   x80
0D186:  CLRF   x81
0D188:  CLRF   x82
0D18A:  CLRF   x83
0D18C:  CLRF   x84
0D18E:  CLRF   x85
0D190:  CLRF   x86
0D192:  CLRF   x87
0D194:  CLRF   x88
0D196:  CLRF   x89
0D198:  CLRF   x8A
0D19A:  CLRF   x8B
0D19C:  CLRF   x8C
0D19E:  CLRF   x8D
0D1A0:  CLRF   x8E
0D1A2:  CLRF   x8F
0D1A4:  CLRF   x90
0D1A6:  CLRF   x91
0D1A8:  CLRF   x92
0D1AA:  CLRF   x93
0D1AC:  CLRF   x94
0D1AE:  CLRF   x95
0D1B0:  CLRF   x96
0D1B2:  CLRF   x97
0D1B4:  CLRF   x98
0D1B6:  CLRF   x99
0D1B8:  CLRF   x9A
0D1BA:  CLRF   x9B
0D1BC:  CLRF   x9C
0D1BE:  CLRF   x9D
0D1C0:  CLRF   x9E
0D1C2:  CLRF   x9F
0D1C4:  CLRF   xA0
0D1C6:  CLRF   xA1
0D1C8:  CLRF   xA2
0D1CA:  CLRF   xA3
0D1CC:  CLRF   xA4
0D1CE:  CLRF   xA5
0D1D0:  CLRF   xA6
0D1D2:  CLRF   xA7
0D1D4:  CLRF   xA8
0D1D6:  CLRF   xA9
0D1D8:  CLRF   xAA
0D1DA:  CLRF   xAB
0D1DC:  CLRF   xAC
0D1DE:  CLRF   xAD
0D1E0:  CLRF   xAE
0D1E2:  CLRF   xAF
0D1E4:  CLRF   xB0
0D1E6:  CLRF   xB1
0D1E8:  CLRF   xB2
0D1EA:  CLRF   xB3
0D1EC:  CLRF   xB4
0D1EE:  CLRF   xB5
0D1F0:  CLRF   xB6
0D1F2:  CLRF   xB7
0D1F4:  CLRF   xB8
0D1F6:  CLRF   xB9
0D1F8:  CLRF   xBA
0D1FA:  CLRF   xBB
0D1FC:  CLRF   xBC
0D1FE:  CLRF   xBD
0D200:  CLRF   xBE
0D202:  CLRF   xBF
0D204:  CLRF   xC0
0D206:  CLRF   xC1
0D208:  CLRF   xC2
0D20A:  CLRF   xC3
0D20C:  CLRF   xC4
0D20E:  CLRF   xC5
0D210:  CLRF   xC6
0D212:  CLRF   xC7
0D214:  CLRF   xC8
0D216:  CLRF   xC9
0D218:  CLRF   xCA
0D21A:  CLRF   xCB
0D21C:  CLRF   xCC
0D21E:  CLRF   xCD
0D220:  CLRF   xCE
0D222:  CLRF   xCF
0D224:  CLRF   xD0
0D226:  CLRF   xD1
0D228:  CLRF   xD2
0D22A:  CLRF   xD3
0D22C:  CLRF   xD4
0D22E:  CLRF   xD5
0D230:  CLRF   xD6
0D232:  CLRF   xD7
0D234:  CLRF   xD8
0D236:  CLRF   xD9
0D238:  CLRF   xDA
0D23A:  CLRF   xDB
0D23C:  CLRF   xDC
0D23E:  CLRF   xDD
0D240:  CLRF   xDE
0D242:  CLRF   xDF
0D244:  CLRF   xE0
0D246:  CLRF   xE1
0D248:  CLRF   xE2
0D24A:  CLRF   xE3
0D24C:  CLRF   xE4
0D24E:  CLRF   xE5
0D250:  CLRF   xE6
0D252:  CLRF   xE7
0D254:  CLRF   xE8
0D256:  CLRF   xE9
0D258:  CLRF   xEA
0D25A:  CLRF   xEB
0D25C:  CLRF   xEC
0D25E:  CLRF   xED
0D260:  CLRF   xEE
0D262:  CLRF   xEF
0D264:  CLRF   xF0
0D266:  CLRF   xF1
0D268:  CLRF   xF2
0D26A:  CLRF   xF3
0D26C:  CLRF   xF4
0D26E:  CLRF   xF5
0D270:  CLRF   xF6
0D272:  CLRF   xF7
0D274:  CLRF   xF8
0D276:  CLRF   xF9
0D278:  CLRF   xFA
0D27A:  CLRF   xFB
0D27C:  CLRF   xFC
0D27E:  CLRF   xFD
0D280:  CLRF   xFE
0D282:  CLRF   xFF
0D284:  MOVLB  5
0D286:  CLRF   x00
0D288:  CLRF   x01
0D28A:  CLRF   x02
0D28C:  CLRF   x03
0D28E:  CLRF   x04
0D290:  CLRF   x05
0D292:  CLRF   x06
0D294:  CLRF   x07
0D296:  CLRF   x08
0D298:  CLRF   x09
0D29A:  CLRF   x0A
0D29C:  CLRF   x0B
0D29E:  CLRF   x0C
0D2A0:  CLRF   x0D
0D2A2:  CLRF   x0E
0D2A4:  CLRF   x0F
0D2A6:  CLRF   x10
0D2A8:  CLRF   x11
0D2AA:  CLRF   x12
0D2AC:  CLRF   x13
0D2AE:  CLRF   x14
0D2B0:  CLRF   x15
0D2B2:  CLRF   x16
0D2B4:  CLRF   x17
0D2B6:  CLRF   x18
0D2B8:  CLRF   x19
0D2BA:  CLRF   x1A
0D2BC:  CLRF   x1B
0D2BE:  CLRF   x1C
0D2C0:  CLRF   x1D
0D2C2:  CLRF   x1E
0D2C4:  CLRF   x1F
0D2C6:  CLRF   x20
0D2C8:  CLRF   x21
0D2CA:  CLRF   x22
0D2CC:  CLRF   x23
0D2CE:  CLRF   x24
0D2D0:  CLRF   x25
0D2D2:  CLRF   x26
0D2D4:  CLRF   x27
0D2D6:  CLRF   x28
0D2D8:  CLRF   x29
0D2DA:  CLRF   x2A
0D2DC:  CLRF   x2B
0D2DE:  CLRF   x2C
0D2E0:  CLRF   x2D
0D2E2:  CLRF   x2E
0D2E4:  CLRF   x2F
0D2E6:  CLRF   x30
0D2E8:  CLRF   x31
0D2EA:  CLRF   x32
0D2EC:  CLRF   x33
0D2EE:  CLRF   x34
0D2F0:  CLRF   x35
0D2F2:  CLRF   x36
0D2F4:  CLRF   x37
0D2F6:  CLRF   x38
0D2F8:  CLRF   x39
0D2FA:  CLRF   x3A
0D2FC:  CLRF   x3B
0D2FE:  CLRF   x3C
0D300:  CLRF   x3D
0D302:  CLRF   x3E
0D304:  CLRF   x3F
0D306:  CLRF   x40
0D308:  CLRF   x41
0D30A:  CLRF   x42
0D30C:  CLRF   x43
0D30E:  CLRF   x44
0D310:  CLRF   x45
0D312:  CLRF   x46
0D314:  CLRF   x47
0D316:  CLRF   x48
0D318:  CLRF   x49
0D31A:  CLRF   x4A
0D31C:  CLRF   x4B
0D31E:  CLRF   x4C
0D320:  CLRF   x4D
0D322:  CLRF   x4E
0D324:  CLRF   x4F
0D326:  CLRF   x50
0D328:  CLRF   x51
0D32A:  CLRF   x52
0D32C:  CLRF   x53
0D32E:  CLRF   x54
0D330:  CLRF   x55
0D332:  CLRF   x56
0D334:  CLRF   x57
0D336:  CLRF   x58
0D338:  CLRF   x59
0D33A:  CLRF   x5A
0D33C:  CLRF   x5B
0D33E:  CLRF   x5C
0D340:  CLRF   x5D
0D342:  CLRF   x5E
0D344:  CLRF   x5F
0D346:  CLRF   x60
0D348:  CLRF   x61
0D34A:  CLRF   x62
0D34C:  CLRF   x63
0D34E:  CLRF   x64
0D350:  CLRF   x65
0D352:  CLRF   x66
0D354:  CLRF   x67
0D356:  CLRF   x68
0D358:  CLRF   x69
0D35A:  CLRF   x6A
0D35C:  CLRF   x6B
0D35E:  CLRF   x6C
0D360:  CLRF   x6D
0D362:  CLRF   x6E
0D364:  CLRF   x6F
0D366:  CLRF   x70
0D368:  CLRF   x71
0D36A:  CLRF   x72
0D36C:  CLRF   x73
0D36E:  CLRF   x74
0D370:  CLRF   x75
0D372:  CLRF   x76
0D374:  CLRF   x77
0D376:  CLRF   x78
0D378:  CLRF   x79
0D37A:  CLRF   x7A
0D37C:  CLRF   x7B
0D37E:  CLRF   x7C
0D380:  CLRF   x7D
0D382:  CLRF   x7E
0D384:  CLRF   x7F
0D386:  CLRF   x80
0D388:  CLRF   x81
0D38A:  CLRF   x82
0D38C:  CLRF   x83
0D38E:  CLRF   x84
0D390:  CLRF   x85
0D392:  CLRF   x86
0D394:  CLRF   x87
0D396:  CLRF   x88
0D398:  CLRF   x89
0D39A:  CLRF   x8A
0D39C:  CLRF   x8B
0D39E:  CLRF   x8C
0D3A0:  CLRF   x8D
0D3A2:  CLRF   x8E
0D3A4:  CLRF   x8F
0D3A6:  CLRF   x90
0D3A8:  CLRF   x91
0D3AA:  CLRF   x92
0D3AC:  CLRF   x93
0D3AE:  CLRF   x94
0D3B0:  CLRF   x95
0D3B2:  CLRF   x96
0D3B4:  CLRF   x97
0D3B6:  CLRF   x98
0D3B8:  CLRF   x99
0D3BA:  CLRF   x9A
0D3BC:  CLRF   x9B
0D3BE:  CLRF   x9C
0D3C0:  CLRF   x9D
0D3C2:  CLRF   x9E
0D3C4:  CLRF   x9F
0D3C6:  CLRF   xA0
0D3C8:  CLRF   xA1
0D3CA:  CLRF   xA2
0D3CC:  CLRF   xA3
0D3CE:  CLRF   xA4
0D3D0:  CLRF   xA5
0D3D2:  CLRF   xA6
0D3D4:  CLRF   xA7
0D3D6:  CLRF   xA8
0D3D8:  CLRF   xA9
0D3DA:  CLRF   xAA
0D3DC:  CLRF   xAB
0D3DE:  CLRF   xAC
0D3E0:  CLRF   xAD
0D3E2:  CLRF   xAE
0D3E4:  CLRF   xAF
0D3E6:  CLRF   xB0
0D3E8:  CLRF   xB1
0D3EA:  CLRF   xB2
....................     port1.port_num = 1;
0D3EC:  MOVLW  01
0D3EE:  MOVLB  1
0D3F0:  MOVWF  xB3
....................     port1.sweep_step = 0;
0D3F2:  CLRF   xB5
0D3F4:  CLRF   xB4
....................     port1.active = 1;
0D3F6:  MOVLB  5
0D3F8:  BSF    xB2.0
.................... 
....................     // Init Port2
....................     sweep_debug_config_t port2 = {0};
0D3FA:  CLRF   xB3
0D3FC:  CLRF   xB4
0D3FE:  CLRF   xB5
0D400:  CLRF   xB6
0D402:  CLRF   xB7
0D404:  CLRF   xB8
0D406:  CLRF   xB9
0D408:  CLRF   xBA
0D40A:  CLRF   xBB
0D40C:  CLRF   xBC
0D40E:  CLRF   xBD
0D410:  CLRF   xBE
0D412:  CLRF   xBF
0D414:  CLRF   xC0
0D416:  CLRF   xC1
0D418:  CLRF   xC2
0D41A:  CLRF   xC3
0D41C:  CLRF   xC4
0D41E:  CLRF   xC5
0D420:  CLRF   xC6
0D422:  CLRF   xC7
0D424:  CLRF   xC8
0D426:  CLRF   xC9
0D428:  CLRF   xCA
0D42A:  CLRF   xCB
0D42C:  CLRF   xCC
0D42E:  CLRF   xCD
0D430:  CLRF   xCE
0D432:  CLRF   xCF
0D434:  CLRF   xD0
0D436:  CLRF   xD1
0D438:  CLRF   xD2
0D43A:  CLRF   xD3
0D43C:  CLRF   xD4
0D43E:  CLRF   xD5
0D440:  CLRF   xD6
0D442:  CLRF   xD7
0D444:  CLRF   xD8
0D446:  CLRF   xD9
0D448:  CLRF   xDA
0D44A:  CLRF   xDB
0D44C:  CLRF   xDC
0D44E:  CLRF   xDD
0D450:  CLRF   xDE
0D452:  CLRF   xDF
0D454:  CLRF   xE0
0D456:  CLRF   xE1
0D458:  CLRF   xE2
0D45A:  CLRF   xE3
0D45C:  CLRF   xE4
0D45E:  CLRF   xE5
0D460:  CLRF   xE6
0D462:  CLRF   xE7
0D464:  CLRF   xE8
0D466:  CLRF   xE9
0D468:  CLRF   xEA
0D46A:  CLRF   xEB
0D46C:  CLRF   xEC
0D46E:  CLRF   xED
0D470:  CLRF   xEE
0D472:  CLRF   xEF
0D474:  CLRF   xF0
0D476:  CLRF   xF1
0D478:  CLRF   xF2
0D47A:  CLRF   xF3
0D47C:  CLRF   xF4
0D47E:  CLRF   xF5
0D480:  CLRF   xF6
0D482:  CLRF   xF7
0D484:  CLRF   xF8
0D486:  CLRF   xF9
0D488:  CLRF   xFA
0D48A:  CLRF   xFB
0D48C:  CLRF   xFC
0D48E:  CLRF   xFD
0D490:  CLRF   xFE
0D492:  CLRF   xFF
0D494:  MOVLB  6
0D496:  CLRF   x00
0D498:  CLRF   x01
0D49A:  CLRF   x02
0D49C:  CLRF   x03
0D49E:  CLRF   x04
0D4A0:  CLRF   x05
0D4A2:  CLRF   x06
0D4A4:  CLRF   x07
0D4A6:  CLRF   x08
0D4A8:  CLRF   x09
0D4AA:  CLRF   x0A
0D4AC:  CLRF   x0B
0D4AE:  CLRF   x0C
0D4B0:  CLRF   x0D
0D4B2:  CLRF   x0E
0D4B4:  CLRF   x0F
0D4B6:  CLRF   x10
0D4B8:  CLRF   x11
0D4BA:  CLRF   x12
0D4BC:  CLRF   x13
0D4BE:  CLRF   x14
0D4C0:  CLRF   x15
0D4C2:  CLRF   x16
0D4C4:  CLRF   x17
0D4C6:  CLRF   x18
0D4C8:  CLRF   x19
0D4CA:  CLRF   x1A
0D4CC:  CLRF   x1B
0D4CE:  CLRF   x1C
0D4D0:  CLRF   x1D
0D4D2:  CLRF   x1E
0D4D4:  CLRF   x1F
0D4D6:  CLRF   x20
0D4D8:  CLRF   x21
0D4DA:  CLRF   x22
0D4DC:  CLRF   x23
0D4DE:  CLRF   x24
0D4E0:  CLRF   x25
0D4E2:  CLRF   x26
0D4E4:  CLRF   x27
0D4E6:  CLRF   x28
0D4E8:  CLRF   x29
0D4EA:  CLRF   x2A
0D4EC:  CLRF   x2B
0D4EE:  CLRF   x2C
0D4F0:  CLRF   x2D
0D4F2:  CLRF   x2E
0D4F4:  CLRF   x2F
0D4F6:  CLRF   x30
0D4F8:  CLRF   x31
0D4FA:  CLRF   x32
0D4FC:  CLRF   x33
0D4FE:  CLRF   x34
0D500:  CLRF   x35
0D502:  CLRF   x36
0D504:  CLRF   x37
0D506:  CLRF   x38
0D508:  CLRF   x39
0D50A:  CLRF   x3A
0D50C:  CLRF   x3B
0D50E:  CLRF   x3C
0D510:  CLRF   x3D
0D512:  CLRF   x3E
0D514:  CLRF   x3F
0D516:  CLRF   x40
0D518:  CLRF   x41
0D51A:  CLRF   x42
0D51C:  CLRF   x43
0D51E:  CLRF   x44
0D520:  CLRF   x45
0D522:  CLRF   x46
0D524:  CLRF   x47
0D526:  CLRF   x48
0D528:  CLRF   x49
0D52A:  CLRF   x4A
0D52C:  CLRF   x4B
0D52E:  CLRF   x4C
0D530:  CLRF   x4D
0D532:  CLRF   x4E
0D534:  CLRF   x4F
0D536:  CLRF   x50
0D538:  CLRF   x51
0D53A:  CLRF   x52
0D53C:  CLRF   x53
0D53E:  CLRF   x54
0D540:  CLRF   x55
0D542:  CLRF   x56
0D544:  CLRF   x57
0D546:  CLRF   x58
0D548:  CLRF   x59
0D54A:  CLRF   x5A
0D54C:  CLRF   x5B
0D54E:  CLRF   x5C
0D550:  CLRF   x5D
0D552:  CLRF   x5E
0D554:  CLRF   x5F
0D556:  CLRF   x60
0D558:  CLRF   x61
0D55A:  CLRF   x62
0D55C:  CLRF   x63
0D55E:  CLRF   x64
0D560:  CLRF   x65
0D562:  CLRF   x66
0D564:  CLRF   x67
0D566:  CLRF   x68
0D568:  CLRF   x69
0D56A:  CLRF   x6A
0D56C:  CLRF   x6B
0D56E:  CLRF   x6C
0D570:  CLRF   x6D
0D572:  CLRF   x6E
0D574:  CLRF   x6F
0D576:  CLRF   x70
0D578:  CLRF   x71
0D57A:  CLRF   x72
0D57C:  CLRF   x73
0D57E:  CLRF   x74
0D580:  CLRF   x75
0D582:  CLRF   x76
0D584:  CLRF   x77
0D586:  CLRF   x78
0D588:  CLRF   x79
0D58A:  CLRF   x7A
0D58C:  CLRF   x7B
0D58E:  CLRF   x7C
0D590:  CLRF   x7D
0D592:  CLRF   x7E
0D594:  CLRF   x7F
0D596:  CLRF   x80
0D598:  CLRF   x81
0D59A:  CLRF   x82
0D59C:  CLRF   x83
0D59E:  CLRF   x84
0D5A0:  CLRF   x85
0D5A2:  CLRF   x86
0D5A4:  CLRF   x87
0D5A6:  CLRF   x88
0D5A8:  CLRF   x89
0D5AA:  CLRF   x8A
0D5AC:  CLRF   x8B
0D5AE:  CLRF   x8C
0D5B0:  CLRF   x8D
0D5B2:  CLRF   x8E
0D5B4:  CLRF   x8F
0D5B6:  CLRF   x90
0D5B8:  CLRF   x91
0D5BA:  CLRF   x92
0D5BC:  CLRF   x93
0D5BE:  CLRF   x94
0D5C0:  CLRF   x95
0D5C2:  CLRF   x96
0D5C4:  CLRF   x97
0D5C6:  CLRF   x98
0D5C8:  CLRF   x99
0D5CA:  CLRF   x9A
0D5CC:  CLRF   x9B
0D5CE:  CLRF   x9C
0D5D0:  CLRF   x9D
0D5D2:  CLRF   x9E
0D5D4:  CLRF   x9F
0D5D6:  CLRF   xA0
0D5D8:  CLRF   xA1
0D5DA:  CLRF   xA2
0D5DC:  CLRF   xA3
0D5DE:  CLRF   xA4
0D5E0:  CLRF   xA5
0D5E2:  CLRF   xA6
0D5E4:  CLRF   xA7
0D5E6:  CLRF   xA8
0D5E8:  CLRF   xA9
0D5EA:  CLRF   xAA
0D5EC:  CLRF   xAB
0D5EE:  CLRF   xAC
0D5F0:  CLRF   xAD
0D5F2:  CLRF   xAE
0D5F4:  CLRF   xAF
0D5F6:  CLRF   xB0
0D5F8:  CLRF   xB1
0D5FA:  CLRF   xB2
0D5FC:  CLRF   xB3
0D5FE:  CLRF   xB4
0D600:  CLRF   xB5
0D602:  CLRF   xB6
0D604:  CLRF   xB7
0D606:  CLRF   xB8
0D608:  CLRF   xB9
0D60A:  CLRF   xBA
0D60C:  CLRF   xBB
0D60E:  CLRF   xBC
0D610:  CLRF   xBD
0D612:  CLRF   xBE
0D614:  CLRF   xBF
0D616:  CLRF   xC0
0D618:  CLRF   xC1
0D61A:  CLRF   xC2
0D61C:  CLRF   xC3
0D61E:  CLRF   xC4
0D620:  CLRF   xC5
0D622:  CLRF   xC6
0D624:  CLRF   xC7
0D626:  CLRF   xC8
0D628:  CLRF   xC9
0D62A:  CLRF   xCA
0D62C:  CLRF   xCB
0D62E:  CLRF   xCC
0D630:  CLRF   xCD
0D632:  CLRF   xCE
0D634:  CLRF   xCF
0D636:  CLRF   xD0
0D638:  CLRF   xD1
0D63A:  CLRF   xD2
0D63C:  CLRF   xD3
0D63E:  CLRF   xD4
0D640:  CLRF   xD5
0D642:  CLRF   xD6
0D644:  CLRF   xD7
0D646:  CLRF   xD8
0D648:  CLRF   xD9
0D64A:  CLRF   xDA
0D64C:  CLRF   xDB
0D64E:  CLRF   xDC
0D650:  CLRF   xDD
0D652:  CLRF   xDE
0D654:  CLRF   xDF
0D656:  CLRF   xE0
0D658:  CLRF   xE1
0D65A:  CLRF   xE2
0D65C:  CLRF   xE3
0D65E:  CLRF   xE4
0D660:  CLRF   xE5
0D662:  CLRF   xE6
0D664:  CLRF   xE7
0D666:  CLRF   xE8
0D668:  CLRF   xE9
0D66A:  CLRF   xEA
0D66C:  CLRF   xEB
0D66E:  CLRF   xEC
0D670:  CLRF   xED
0D672:  CLRF   xEE
0D674:  CLRF   xEF
0D676:  CLRF   xF0
0D678:  CLRF   xF1
0D67A:  CLRF   xF2
0D67C:  CLRF   xF3
0D67E:  CLRF   xF4
0D680:  CLRF   xF5
0D682:  CLRF   xF6
0D684:  CLRF   xF7
0D686:  CLRF   xF8
0D688:  CLRF   xF9
0D68A:  CLRF   xFA
0D68C:  CLRF   xFB
0D68E:  CLRF   xFC
0D690:  CLRF   xFD
0D692:  CLRF   xFE
0D694:  CLRF   xFF
0D696:  MOVLB  7
0D698:  CLRF   x00
0D69A:  CLRF   x01
0D69C:  CLRF   x02
0D69E:  CLRF   x03
0D6A0:  CLRF   x04
0D6A2:  CLRF   x05
0D6A4:  CLRF   x06
0D6A6:  CLRF   x07
0D6A8:  CLRF   x08
0D6AA:  CLRF   x09
0D6AC:  CLRF   x0A
0D6AE:  CLRF   x0B
0D6B0:  CLRF   x0C
0D6B2:  CLRF   x0D
0D6B4:  CLRF   x0E
0D6B6:  CLRF   x0F
0D6B8:  CLRF   x10
0D6BA:  CLRF   x11
0D6BC:  CLRF   x12
0D6BE:  CLRF   x13
0D6C0:  CLRF   x14
0D6C2:  CLRF   x15
0D6C4:  CLRF   x16
0D6C6:  CLRF   x17
0D6C8:  CLRF   x18
0D6CA:  CLRF   x19
0D6CC:  CLRF   x1A
0D6CE:  CLRF   x1B
0D6D0:  CLRF   x1C
0D6D2:  CLRF   x1D
0D6D4:  CLRF   x1E
0D6D6:  CLRF   x1F
0D6D8:  CLRF   x20
0D6DA:  CLRF   x21
0D6DC:  CLRF   x22
0D6DE:  CLRF   x23
0D6E0:  CLRF   x24
0D6E2:  CLRF   x25
0D6E4:  CLRF   x26
0D6E6:  CLRF   x27
0D6E8:  CLRF   x28
0D6EA:  CLRF   x29
0D6EC:  CLRF   x2A
0D6EE:  CLRF   x2B
0D6F0:  CLRF   x2C
0D6F2:  CLRF   x2D
0D6F4:  CLRF   x2E
0D6F6:  CLRF   x2F
0D6F8:  CLRF   x30
0D6FA:  CLRF   x31
0D6FC:  CLRF   x32
0D6FE:  CLRF   x33
0D700:  CLRF   x34
0D702:  CLRF   x35
0D704:  CLRF   x36
0D706:  CLRF   x37
0D708:  CLRF   x38
0D70A:  CLRF   x39
0D70C:  CLRF   x3A
0D70E:  CLRF   x3B
0D710:  CLRF   x3C
0D712:  CLRF   x3D
0D714:  CLRF   x3E
0D716:  CLRF   x3F
0D718:  CLRF   x40
0D71A:  CLRF   x41
0D71C:  CLRF   x42
0D71E:  CLRF   x43
0D720:  CLRF   x44
0D722:  CLRF   x45
0D724:  CLRF   x46
0D726:  CLRF   x47
0D728:  CLRF   x48
0D72A:  CLRF   x49
0D72C:  CLRF   x4A
0D72E:  CLRF   x4B
0D730:  CLRF   x4C
0D732:  CLRF   x4D
0D734:  CLRF   x4E
0D736:  CLRF   x4F
0D738:  CLRF   x50
0D73A:  CLRF   x51
0D73C:  CLRF   x52
0D73E:  CLRF   x53
0D740:  CLRF   x54
0D742:  CLRF   x55
0D744:  CLRF   x56
0D746:  CLRF   x57
0D748:  CLRF   x58
0D74A:  CLRF   x59
0D74C:  CLRF   x5A
0D74E:  CLRF   x5B
0D750:  CLRF   x5C
0D752:  CLRF   x5D
0D754:  CLRF   x5E
0D756:  CLRF   x5F
0D758:  CLRF   x60
0D75A:  CLRF   x61
0D75C:  CLRF   x62
0D75E:  CLRF   x63
0D760:  CLRF   x64
0D762:  CLRF   x65
0D764:  CLRF   x66
0D766:  CLRF   x67
0D768:  CLRF   x68
0D76A:  CLRF   x69
0D76C:  CLRF   x6A
0D76E:  CLRF   x6B
0D770:  CLRF   x6C
0D772:  CLRF   x6D
0D774:  CLRF   x6E
0D776:  CLRF   x6F
0D778:  CLRF   x70
0D77A:  CLRF   x71
0D77C:  CLRF   x72
0D77E:  CLRF   x73
0D780:  CLRF   x74
0D782:  CLRF   x75
0D784:  CLRF   x76
0D786:  CLRF   x77
0D788:  CLRF   x78
0D78A:  CLRF   x79
0D78C:  CLRF   x7A
0D78E:  CLRF   x7B
0D790:  CLRF   x7C
0D792:  CLRF   x7D
0D794:  CLRF   x7E
0D796:  CLRF   x7F
0D798:  CLRF   x80
0D79A:  CLRF   x81
0D79C:  CLRF   x82
0D79E:  CLRF   x83
0D7A0:  CLRF   x84
0D7A2:  CLRF   x85
0D7A4:  CLRF   x86
0D7A6:  CLRF   x87
0D7A8:  CLRF   x88
0D7AA:  CLRF   x89
0D7AC:  CLRF   x8A
0D7AE:  CLRF   x8B
0D7B0:  CLRF   x8C
0D7B2:  CLRF   x8D
0D7B4:  CLRF   x8E
0D7B6:  CLRF   x8F
0D7B8:  CLRF   x90
0D7BA:  CLRF   x91
0D7BC:  CLRF   x92
0D7BE:  CLRF   x93
0D7C0:  CLRF   x94
0D7C2:  CLRF   x95
0D7C4:  CLRF   x96
0D7C6:  CLRF   x97
0D7C8:  CLRF   x98
0D7CA:  CLRF   x99
0D7CC:  CLRF   x9A
0D7CE:  CLRF   x9B
0D7D0:  CLRF   x9C
0D7D2:  CLRF   x9D
0D7D4:  CLRF   x9E
0D7D6:  CLRF   x9F
0D7D8:  CLRF   xA0
0D7DA:  CLRF   xA1
0D7DC:  CLRF   xA2
0D7DE:  CLRF   xA3
0D7E0:  CLRF   xA4
0D7E2:  CLRF   xA5
0D7E4:  CLRF   xA6
0D7E6:  CLRF   xA7
0D7E8:  CLRF   xA8
0D7EA:  CLRF   xA9
0D7EC:  CLRF   xAA
0D7EE:  CLRF   xAB
0D7F0:  CLRF   xAC
0D7F2:  CLRF   xAD
0D7F4:  CLRF   xAE
0D7F6:  CLRF   xAF
0D7F8:  CLRF   xB0
0D7FA:  CLRF   xB1
0D7FC:  CLRF   xB2
0D7FE:  CLRF   xB3
0D800:  CLRF   xB4
0D802:  CLRF   xB5
0D804:  CLRF   xB6
0D806:  CLRF   xB7
0D808:  CLRF   xB8
0D80A:  CLRF   xB9
0D80C:  CLRF   xBA
0D80E:  CLRF   xBB
0D810:  CLRF   xBC
0D812:  CLRF   xBD
0D814:  CLRF   xBE
0D816:  CLRF   xBF
0D818:  CLRF   xC0
0D81A:  CLRF   xC1
0D81C:  CLRF   xC2
0D81E:  CLRF   xC3
0D820:  CLRF   xC4
0D822:  CLRF   xC5
0D824:  CLRF   xC6
0D826:  CLRF   xC7
0D828:  CLRF   xC8
0D82A:  CLRF   xC9
0D82C:  CLRF   xCA
0D82E:  CLRF   xCB
0D830:  CLRF   xCC
0D832:  CLRF   xCD
0D834:  CLRF   xCE
0D836:  CLRF   xCF
0D838:  CLRF   xD0
0D83A:  CLRF   xD1
0D83C:  CLRF   xD2
0D83E:  CLRF   xD3
0D840:  CLRF   xD4
0D842:  CLRF   xD5
0D844:  CLRF   xD6
0D846:  CLRF   xD7
0D848:  CLRF   xD8
0D84A:  CLRF   xD9
0D84C:  CLRF   xDA
0D84E:  CLRF   xDB
0D850:  CLRF   xDC
0D852:  CLRF   xDD
0D854:  CLRF   xDE
0D856:  CLRF   xDF
0D858:  CLRF   xE0
0D85A:  CLRF   xE1
0D85C:  CLRF   xE2
0D85E:  CLRF   xE3
0D860:  CLRF   xE4
0D862:  CLRF   xE5
0D864:  CLRF   xE6
0D866:  CLRF   xE7
0D868:  CLRF   xE8
0D86A:  CLRF   xE9
0D86C:  CLRF   xEA
0D86E:  CLRF   xEB
0D870:  CLRF   xEC
0D872:  CLRF   xED
0D874:  CLRF   xEE
0D876:  CLRF   xEF
0D878:  CLRF   xF0
0D87A:  CLRF   xF1
0D87C:  CLRF   xF2
0D87E:  CLRF   xF3
0D880:  CLRF   xF4
0D882:  CLRF   xF5
0D884:  CLRF   xF6
0D886:  CLRF   xF7
0D888:  CLRF   xF8
0D88A:  CLRF   xF9
0D88C:  CLRF   xFA
0D88E:  CLRF   xFB
0D890:  CLRF   xFC
0D892:  CLRF   xFD
0D894:  CLRF   xFE
0D896:  CLRF   xFF
0D898:  MOVLB  8
0D89A:  CLRF   x00
0D89C:  CLRF   x01
0D89E:  CLRF   x02
0D8A0:  CLRF   x03
0D8A2:  CLRF   x04
0D8A4:  CLRF   x05
0D8A6:  CLRF   x06
0D8A8:  CLRF   x07
0D8AA:  CLRF   x08
0D8AC:  CLRF   x09
0D8AE:  CLRF   x0A
0D8B0:  CLRF   x0B
0D8B2:  CLRF   x0C
0D8B4:  CLRF   x0D
0D8B6:  CLRF   x0E
0D8B8:  CLRF   x0F
0D8BA:  CLRF   x10
0D8BC:  CLRF   x11
0D8BE:  CLRF   x12
0D8C0:  CLRF   x13
0D8C2:  CLRF   x14
0D8C4:  CLRF   x15
0D8C6:  CLRF   x16
0D8C8:  CLRF   x17
0D8CA:  CLRF   x18
0D8CC:  CLRF   x19
0D8CE:  CLRF   x1A
0D8D0:  CLRF   x1B
0D8D2:  CLRF   x1C
0D8D4:  CLRF   x1D
0D8D6:  CLRF   x1E
0D8D8:  CLRF   x1F
0D8DA:  CLRF   x20
0D8DC:  CLRF   x21
0D8DE:  CLRF   x22
0D8E0:  CLRF   x23
0D8E2:  CLRF   x24
0D8E4:  CLRF   x25
0D8E6:  CLRF   x26
0D8E8:  CLRF   x27
0D8EA:  CLRF   x28
0D8EC:  CLRF   x29
0D8EE:  CLRF   x2A
0D8F0:  CLRF   x2B
0D8F2:  CLRF   x2C
0D8F4:  CLRF   x2D
0D8F6:  CLRF   x2E
0D8F8:  CLRF   x2F
0D8FA:  CLRF   x30
0D8FC:  CLRF   x31
0D8FE:  CLRF   x32
0D900:  CLRF   x33
0D902:  CLRF   x34
0D904:  CLRF   x35
0D906:  CLRF   x36
0D908:  CLRF   x37
0D90A:  CLRF   x38
0D90C:  CLRF   x39
0D90E:  CLRF   x3A
0D910:  CLRF   x3B
0D912:  CLRF   x3C
0D914:  CLRF   x3D
0D916:  CLRF   x3E
0D918:  CLRF   x3F
0D91A:  CLRF   x40
0D91C:  CLRF   x41
0D91E:  CLRF   x42
0D920:  CLRF   x43
0D922:  CLRF   x44
0D924:  CLRF   x45
0D926:  CLRF   x46
0D928:  CLRF   x47
0D92A:  CLRF   x48
0D92C:  CLRF   x49
0D92E:  CLRF   x4A
0D930:  CLRF   x4B
0D932:  CLRF   x4C
0D934:  CLRF   x4D
0D936:  CLRF   x4E
0D938:  CLRF   x4F
0D93A:  CLRF   x50
0D93C:  CLRF   x51
0D93E:  CLRF   x52
0D940:  CLRF   x53
0D942:  CLRF   x54
0D944:  CLRF   x55
0D946:  CLRF   x56
0D948:  CLRF   x57
0D94A:  CLRF   x58
0D94C:  CLRF   x59
0D94E:  CLRF   x5A
0D950:  CLRF   x5B
0D952:  CLRF   x5C
0D954:  CLRF   x5D
0D956:  CLRF   x5E
0D958:  CLRF   x5F
0D95A:  CLRF   x60
0D95C:  CLRF   x61
0D95E:  CLRF   x62
0D960:  CLRF   x63
0D962:  CLRF   x64
0D964:  CLRF   x65
0D966:  CLRF   x66
0D968:  CLRF   x67
0D96A:  CLRF   x68
0D96C:  CLRF   x69
0D96E:  CLRF   x6A
0D970:  CLRF   x6B
0D972:  CLRF   x6C
0D974:  CLRF   x6D
0D976:  CLRF   x6E
0D978:  CLRF   x6F
0D97A:  CLRF   x70
0D97C:  CLRF   x71
0D97E:  CLRF   x72
0D980:  CLRF   x73
0D982:  CLRF   x74
0D984:  CLRF   x75
0D986:  CLRF   x76
0D988:  CLRF   x77
0D98A:  CLRF   x78
0D98C:  CLRF   x79
0D98E:  CLRF   x7A
0D990:  CLRF   x7B
0D992:  CLRF   x7C
0D994:  CLRF   x7D
0D996:  CLRF   x7E
0D998:  CLRF   x7F
0D99A:  CLRF   x80
0D99C:  CLRF   x81
0D99E:  CLRF   x82
0D9A0:  CLRF   x83
0D9A2:  CLRF   x84
0D9A4:  CLRF   x85
0D9A6:  CLRF   x86
0D9A8:  CLRF   x87
0D9AA:  CLRF   x88
0D9AC:  CLRF   x89
0D9AE:  CLRF   x8A
0D9B0:  CLRF   x8B
0D9B2:  CLRF   x8C
0D9B4:  CLRF   x8D
0D9B6:  CLRF   x8E
0D9B8:  CLRF   x8F
0D9BA:  CLRF   x90
0D9BC:  CLRF   x91
0D9BE:  CLRF   x92
0D9C0:  CLRF   x93
0D9C2:  CLRF   x94
0D9C4:  CLRF   x95
0D9C6:  CLRF   x96
0D9C8:  CLRF   x97
0D9CA:  CLRF   x98
0D9CC:  CLRF   x99
0D9CE:  CLRF   x9A
0D9D0:  CLRF   x9B
0D9D2:  CLRF   x9C
0D9D4:  CLRF   x9D
0D9D6:  CLRF   x9E
0D9D8:  CLRF   x9F
0D9DA:  CLRF   xA0
0D9DC:  CLRF   xA1
0D9DE:  CLRF   xA2
0D9E0:  CLRF   xA3
0D9E2:  CLRF   xA4
0D9E4:  CLRF   xA5
0D9E6:  CLRF   xA6
0D9E8:  CLRF   xA7
0D9EA:  CLRF   xA8
0D9EC:  CLRF   xA9
0D9EE:  CLRF   xAA
0D9F0:  CLRF   xAB
0D9F2:  CLRF   xAC
0D9F4:  CLRF   xAD
0D9F6:  CLRF   xAE
0D9F8:  CLRF   xAF
0D9FA:  CLRF   xB0
0D9FC:  CLRF   xB1
0D9FE:  CLRF   xB2
0DA00:  CLRF   xB3
0DA02:  CLRF   xB4
0DA04:  CLRF   xB5
0DA06:  CLRF   xB6
0DA08:  CLRF   xB7
0DA0A:  CLRF   xB8
0DA0C:  CLRF   xB9
0DA0E:  CLRF   xBA
0DA10:  CLRF   xBB
0DA12:  CLRF   xBC
0DA14:  CLRF   xBD
0DA16:  CLRF   xBE
0DA18:  CLRF   xBF
0DA1A:  CLRF   xC0
0DA1C:  CLRF   xC1
0DA1E:  CLRF   xC2
0DA20:  CLRF   xC3
0DA22:  CLRF   xC4
0DA24:  CLRF   xC5
0DA26:  CLRF   xC6
0DA28:  CLRF   xC7
0DA2A:  CLRF   xC8
0DA2C:  CLRF   xC9
0DA2E:  CLRF   xCA
0DA30:  CLRF   xCB
0DA32:  CLRF   xCC
0DA34:  CLRF   xCD
0DA36:  CLRF   xCE
0DA38:  CLRF   xCF
0DA3A:  CLRF   xD0
0DA3C:  CLRF   xD1
0DA3E:  CLRF   xD2
0DA40:  CLRF   xD3
0DA42:  CLRF   xD4
0DA44:  CLRF   xD5
0DA46:  CLRF   xD6
0DA48:  CLRF   xD7
0DA4A:  CLRF   xD8
0DA4C:  CLRF   xD9
0DA4E:  CLRF   xDA
0DA50:  CLRF   xDB
0DA52:  CLRF   xDC
0DA54:  CLRF   xDD
0DA56:  CLRF   xDE
0DA58:  CLRF   xDF
0DA5A:  CLRF   xE0
0DA5C:  CLRF   xE1
0DA5E:  CLRF   xE2
0DA60:  CLRF   xE3
0DA62:  CLRF   xE4
0DA64:  CLRF   xE5
0DA66:  CLRF   xE6
0DA68:  CLRF   xE7
0DA6A:  CLRF   xE8
0DA6C:  CLRF   xE9
0DA6E:  CLRF   xEA
0DA70:  CLRF   xEB
0DA72:  CLRF   xEC
0DA74:  CLRF   xED
0DA76:  CLRF   xEE
0DA78:  CLRF   xEF
0DA7A:  CLRF   xF0
0DA7C:  CLRF   xF1
0DA7E:  CLRF   xF2
0DA80:  CLRF   xF3
0DA82:  CLRF   xF4
0DA84:  CLRF   xF5
0DA86:  CLRF   xF6
0DA88:  CLRF   xF7
0DA8A:  CLRF   xF8
0DA8C:  CLRF   xF9
0DA8E:  CLRF   xFA
0DA90:  CLRF   xFB
0DA92:  CLRF   xFC
0DA94:  CLRF   xFD
0DA96:  CLRF   xFE
0DA98:  CLRF   xFF
0DA9A:  MOVLB  9
0DA9C:  CLRF   x00
0DA9E:  CLRF   x01
0DAA0:  CLRF   x02
0DAA2:  CLRF   x03
0DAA4:  CLRF   x04
0DAA6:  CLRF   x05
0DAA8:  CLRF   x06
0DAAA:  CLRF   x07
0DAAC:  CLRF   x08
0DAAE:  CLRF   x09
0DAB0:  CLRF   x0A
0DAB2:  CLRF   x0B
0DAB4:  CLRF   x0C
0DAB6:  CLRF   x0D
0DAB8:  CLRF   x0E
0DABA:  CLRF   x0F
0DABC:  CLRF   x10
0DABE:  CLRF   x11
0DAC0:  CLRF   x12
0DAC2:  CLRF   x13
0DAC4:  CLRF   x14
0DAC6:  CLRF   x15
0DAC8:  CLRF   x16
0DACA:  CLRF   x17
0DACC:  CLRF   x18
0DACE:  CLRF   x19
0DAD0:  CLRF   x1A
0DAD2:  CLRF   x1B
0DAD4:  CLRF   x1C
0DAD6:  CLRF   x1D
0DAD8:  CLRF   x1E
0DADA:  CLRF   x1F
0DADC:  CLRF   x20
0DADE:  CLRF   x21
0DAE0:  CLRF   x22
0DAE2:  CLRF   x23
0DAE4:  CLRF   x24
0DAE6:  CLRF   x25
0DAE8:  CLRF   x26
0DAEA:  CLRF   x27
0DAEC:  CLRF   x28
0DAEE:  CLRF   x29
0DAF0:  CLRF   x2A
0DAF2:  CLRF   x2B
0DAF4:  CLRF   x2C
0DAF6:  CLRF   x2D
0DAF8:  CLRF   x2E
0DAFA:  CLRF   x2F
0DAFC:  CLRF   x30
0DAFE:  CLRF   x31
0DB00:  CLRF   x32
0DB02:  CLRF   x33
0DB04:  CLRF   x34
0DB06:  CLRF   x35
0DB08:  CLRF   x36
0DB0A:  CLRF   x37
0DB0C:  CLRF   x38
0DB0E:  CLRF   x39
0DB10:  CLRF   x3A
0DB12:  CLRF   x3B
0DB14:  CLRF   x3C
0DB16:  CLRF   x3D
0DB18:  CLRF   x3E
0DB1A:  CLRF   x3F
0DB1C:  CLRF   x40
0DB1E:  CLRF   x41
0DB20:  CLRF   x42
0DB22:  CLRF   x43
0DB24:  CLRF   x44
0DB26:  CLRF   x45
0DB28:  CLRF   x46
0DB2A:  CLRF   x47
0DB2C:  CLRF   x48
0DB2E:  CLRF   x49
0DB30:  CLRF   x4A
0DB32:  CLRF   x4B
0DB34:  CLRF   x4C
0DB36:  CLRF   x4D
0DB38:  CLRF   x4E
0DB3A:  CLRF   x4F
0DB3C:  CLRF   x50
0DB3E:  CLRF   x51
0DB40:  CLRF   x52
0DB42:  CLRF   x53
0DB44:  CLRF   x54
0DB46:  CLRF   x55
0DB48:  CLRF   x56
0DB4A:  CLRF   x57
0DB4C:  CLRF   x58
0DB4E:  CLRF   x59
0DB50:  CLRF   x5A
0DB52:  CLRF   x5B
0DB54:  CLRF   x5C
0DB56:  CLRF   x5D
0DB58:  CLRF   x5E
0DB5A:  CLRF   x5F
0DB5C:  CLRF   x60
0DB5E:  CLRF   x61
0DB60:  CLRF   x62
0DB62:  CLRF   x63
0DB64:  CLRF   x64
0DB66:  CLRF   x65
0DB68:  CLRF   x66
0DB6A:  CLRF   x67
0DB6C:  CLRF   x68
0DB6E:  CLRF   x69
0DB70:  CLRF   x6A
0DB72:  CLRF   x6B
0DB74:  CLRF   x6C
0DB76:  CLRF   x6D
0DB78:  CLRF   x6E
0DB7A:  CLRF   x6F
0DB7C:  CLRF   x70
0DB7E:  CLRF   x71
0DB80:  CLRF   x72
0DB82:  CLRF   x73
0DB84:  CLRF   x74
0DB86:  CLRF   x75
0DB88:  CLRF   x76
0DB8A:  CLRF   x77
0DB8C:  CLRF   x78
0DB8E:  CLRF   x79
0DB90:  CLRF   x7A
0DB92:  CLRF   x7B
0DB94:  CLRF   x7C
0DB96:  CLRF   x7D
0DB98:  CLRF   x7E
0DB9A:  CLRF   x7F
0DB9C:  CLRF   x80
0DB9E:  CLRF   x81
0DBA0:  CLRF   x82
0DBA2:  CLRF   x83
0DBA4:  CLRF   x84
0DBA6:  CLRF   x85
0DBA8:  CLRF   x86
0DBAA:  CLRF   x87
0DBAC:  CLRF   x88
0DBAE:  CLRF   x89
0DBB0:  CLRF   x8A
0DBB2:  CLRF   x8B
0DBB4:  CLRF   x8C
0DBB6:  CLRF   x8D
0DBB8:  CLRF   x8E
0DBBA:  CLRF   x8F
0DBBC:  CLRF   x90
0DBBE:  CLRF   x91
0DBC0:  CLRF   x92
0DBC2:  CLRF   x93
0DBC4:  CLRF   x94
0DBC6:  CLRF   x95
0DBC8:  CLRF   x96
0DBCA:  CLRF   x97
0DBCC:  CLRF   x98
0DBCE:  CLRF   x99
0DBD0:  CLRF   x9A
0DBD2:  CLRF   x9B
0DBD4:  CLRF   x9C
0DBD6:  CLRF   x9D
0DBD8:  CLRF   x9E
0DBDA:  CLRF   x9F
0DBDC:  CLRF   xA0
0DBDE:  CLRF   xA1
0DBE0:  CLRF   xA2
0DBE2:  CLRF   xA3
0DBE4:  CLRF   xA4
0DBE6:  CLRF   xA5
0DBE8:  CLRF   xA6
0DBEA:  CLRF   xA7
0DBEC:  CLRF   xA8
0DBEE:  CLRF   xA9
0DBF0:  CLRF   xAA
0DBF2:  CLRF   xAB
0DBF4:  CLRF   xAC
0DBF6:  CLRF   xAD
0DBF8:  CLRF   xAE
0DBFA:  CLRF   xAF
0DBFC:  CLRF   xB0
0DBFE:  CLRF   xB1
0DC00:  CLRF   xB2
....................     port2.port_num = 2; 
0DC02:  MOVLW  02
0DC04:  MOVLB  5
0DC06:  MOVWF  xB3
....................     port2.sweep_step = 0;
0DC08:  CLRF   xB5
0DC0A:  CLRF   xB4
....................     port2.active = 1;
0DC0C:  MOVLB  9
0DC0E:  BSF    xB2.0
.................... 
....................     int16 count = 1;
....................     iv_env_t measured_data = create_meas_data();
0DC10:  CLRF   xB4
0DC12:  MOVLW  01
0DC14:  MOVWF  xB3
0DC16:  MOVLB  0
0DC18:  CALL   91EA
0DC1C:  MOVFF  02,03
0DC20:  MOVF   01,W
0DC22:  MOVWF  FE1
0DC24:  MOVFF  03,FE2
0DC28:  MOVLW  09
0DC2A:  MOVWF  FEA
0DC2C:  MOVLW  B5
0DC2E:  MOVWF  FE9
0DC30:  MOVLW  0C
0DC32:  MOVWF  01
0DC34:  MOVFF  FE6,FEE
0DC38:  DECFSZ 01,F
0DC3A:  GOTO   DC34
.................... 
....................     while (port1.active || port2.active)
0DC3E:  MOVLB  5
0DC40:  BTFSS  xB2.0
0DC42:  BRA    DC4A
0DC44:  MOVLB  0
0DC46:  GOTO   DC5A
0DC4A:  MOVLB  0
0DC4C:  MOVLB  9
0DC4E:  BTFSC  xB2.0
0DC50:  BRA    DC58
0DC52:  MOVLB  0
0DC54:  GOTO   DF3E
0DC58:  MOVLB  0
....................     {
....................         // 出力設定
....................         if (port1.active) {
0DC5A:  MOVLB  5
0DC5C:  BTFSC  xB2.0
0DC5E:  BRA    DC66
0DC60:  MOVLB  0
0DC62:  GOTO   DC78
0DC66:  MOVLB  0
....................             mcp4901_1_write(count);
0DC68:  MOVFF  9B4,9DD
0DC6C:  MOVFF  9B3,9DC
0DC70:  CALL   2872
....................         } else {
0DC74:  GOTO   DC84
....................             mcp4901_1_write(0);  // 閾値到達後は0出力
0DC78:  MOVLB  9
0DC7A:  CLRF   xDD
0DC7C:  CLRF   xDC
0DC7E:  MOVLB  0
0DC80:  CALL   2872
....................         }
.................... 
....................         if (port2.active) {
0DC84:  MOVLB  9
0DC86:  BTFSC  xB2.0
0DC88:  BRA    DC90
0DC8A:  MOVLB  0
0DC8C:  GOTO   DCA2
0DC90:  MOVLB  0
....................             mcp4901_2_write(count);
0DC92:  MOVFF  9B4,9DD
0DC96:  MOVFF  9B3,9DC
0DC9A:  CALL   28B0
....................         } else {
0DC9E:  GOTO   DCAE
....................             mcp4901_2_write(0);
0DCA2:  MOVLB  9
0DCA4:  CLRF   xDD
0DCA6:  CLRF   xDC
0DCA8:  MOVLB  0
0DCAA:  CALL   28B0
....................         }
.................... 
....................         delay_us(100);
0DCAE:  MOVLW  85
0DCB0:  MOVWF  00
0DCB2:  DECFSZ 00,F
0DCB4:  BRA    DCB2
.................... 
....................         // データ取得
....................         if (port1.active) {
0DCB6:  MOVLB  5
0DCB8:  BTFSC  xB2.0
0DCBA:  BRA    DCC2
0DCBC:  MOVLB  0
0DCBE:  GOTO   DDE2
0DCC2:  MOVLB  0
....................             port1.data_buffer[count].voltage = ad7490_read(ADC_CIGS1_AMP);
0DCC4:  MOVLB  9
0DCC6:  RLCF   xB3,W
0DCC8:  MOVWF  02
0DCCA:  RLCF   xB4,W
0DCCC:  MOVWF  03
0DCCE:  RLCF   02,F
0DCD0:  RLCF   03,F
0DCD2:  MOVLW  FC
0DCD4:  ANDWF  02,F
0DCD6:  MOVF   02,W
0DCD8:  ADDLW  B6
0DCDA:  MOVWF  01
0DCDC:  MOVLW  01
0DCDE:  ADDWFC 03,F
0DCE0:  MOVF   01,W
0DCE2:  MOVWF  xC4
0DCE4:  MOVFF  03,9C5
0DCE8:  MOVLW  02
0DCEA:  MOVWF  xEE
0DCEC:  MOVLB  0
0DCEE:  CALL   24C2
0DCF2:  MOVFF  9C5,FEA
0DCF6:  MOVFF  9C4,FE9
0DCFA:  MOVFF  02,FEC
0DCFE:  MOVF   FED,F
0DD00:  MOVFF  01,FEF
....................             port1.data_buffer[count].current = ad7490_read(ADC_CIGS1_CURR);
0DD04:  MOVLB  9
0DD06:  RLCF   xB3,W
0DD08:  MOVWF  02
0DD0A:  RLCF   xB4,W
0DD0C:  MOVWF  03
0DD0E:  RLCF   02,F
0DD10:  RLCF   03,F
0DD12:  MOVLW  FC
0DD14:  ANDWF  02,F
0DD16:  MOVF   02,W
0DD18:  ADDLW  03
0DD1A:  MOVWF  xC2
0DD1C:  MOVLW  00
0DD1E:  ADDWFC 03,W
0DD20:  MOVWF  xC3
0DD22:  MOVLW  02
0DD24:  ADDWF  xC2,W
0DD26:  MOVWF  01
0DD28:  MOVLW  00
0DD2A:  ADDWFC xC3,W
0DD2C:  MOVWF  03
0DD2E:  MOVF   01,W
0DD30:  ADDLW  B3
0DD32:  MOVWF  01
0DD34:  MOVLW  01
0DD36:  ADDWFC 03,F
0DD38:  MOVF   01,W
0DD3A:  MOVWF  xC2
0DD3C:  MOVFF  03,9C3
0DD40:  MOVLW  01
0DD42:  MOVWF  xEE
0DD44:  MOVLB  0
0DD46:  CALL   24C2
0DD4A:  MOVFF  9C3,FEA
0DD4E:  MOVFF  9C2,FE9
0DD52:  MOVFF  02,FEC
0DD56:  MOVF   FED,F
0DD58:  MOVFF  01,FEF
....................             port1.sweep_step = count + 1;
0DD5C:  MOVLW  01
0DD5E:  MOVLB  9
0DD60:  ADDWF  xB3,W
0DD62:  MOVLB  1
0DD64:  MOVWF  xB4
0DD66:  MOVLW  00
0DD68:  MOVLB  9
0DD6A:  ADDWFC xB4,W
0DD6C:  MOVLB  1
0DD6E:  MOVWF  xB5
....................             if (port1.data_buffer[count].current < curr_limit) {
0DD70:  MOVLB  9
0DD72:  RLCF   xB3,W
0DD74:  MOVWF  02
0DD76:  RLCF   xB4,W
0DD78:  MOVWF  03
0DD7A:  RLCF   02,F
0DD7C:  RLCF   03,F
0DD7E:  MOVLW  FC
0DD80:  ANDWF  02,F
0DD82:  MOVF   02,W
0DD84:  ADDLW  03
0DD86:  MOVWF  xC2
0DD88:  MOVLW  00
0DD8A:  ADDWFC 03,W
0DD8C:  MOVWF  xC3
0DD8E:  MOVLW  02
0DD90:  ADDWF  xC2,W
0DD92:  MOVWF  01
0DD94:  MOVLW  00
0DD96:  ADDWFC xC3,W
0DD98:  MOVWF  03
0DD9A:  MOVF   01,W
0DD9C:  ADDLW  B3
0DD9E:  MOVWF  FE9
0DDA0:  MOVLW  01
0DDA2:  ADDWFC 03,W
0DDA4:  MOVWF  FEA
0DDA6:  MOVFF  FEC,9C3
0DDAA:  MOVF   FED,F
0DDAC:  MOVFF  FEF,9C2
0DDB0:  MOVF   xC3,W
0DDB2:  MOVLB  1
0DDB4:  SUBWF  xB2,W
0DDB6:  BTFSC  FD8.0
0DDB8:  BRA    DDC0
0DDBA:  MOVLB  0
0DDBC:  GOTO   DDE2
0DDC0:  MOVLB  0
0DDC2:  BTFSS  FD8.2
0DDC4:  GOTO   DDDC
0DDC8:  MOVLB  1
0DDCA:  MOVF   xB1,W
0DDCC:  MOVLB  9
0DDCE:  SUBWF  xC2,W
0DDD0:  BTFSS  FD8.0
0DDD2:  BRA    DDDA
0DDD4:  MOVLB  0
0DDD6:  GOTO   DDE2
0DDDA:  MOVLB  0
....................                 port1.active = 0;  // 閾値到達で測定終了
0DDDC:  MOVLB  5
0DDDE:  BCF    xB2.0
0DDE0:  MOVLB  0
....................             }
....................         }
.................... 
....................         if (port2.active) {
0DDE2:  MOVLB  9
0DDE4:  BTFSC  xB2.0
0DDE6:  BRA    DDEE
0DDE8:  MOVLB  0
0DDEA:  GOTO   DF0E
0DDEE:  MOVLB  0
....................             port2.data_buffer[count].voltage = ad7490_read(ADC_CIGS2_AMP);
0DDF0:  MOVLB  9
0DDF2:  RLCF   xB3,W
0DDF4:  MOVWF  02
0DDF6:  RLCF   xB4,W
0DDF8:  MOVWF  03
0DDFA:  RLCF   02,F
0DDFC:  RLCF   03,F
0DDFE:  MOVLW  FC
0DE00:  ANDWF  02,F
0DE02:  MOVF   02,W
0DE04:  ADDLW  B6
0DE06:  MOVWF  01
0DE08:  MOVLW  05
0DE0A:  ADDWFC 03,F
0DE0C:  MOVF   01,W
0DE0E:  MOVWF  xC4
0DE10:  MOVFF  03,9C5
0DE14:  MOVLW  06
0DE16:  MOVWF  xEE
0DE18:  MOVLB  0
0DE1A:  CALL   24C2
0DE1E:  MOVFF  9C5,FEA
0DE22:  MOVFF  9C4,FE9
0DE26:  MOVFF  02,FEC
0DE2A:  MOVF   FED,F
0DE2C:  MOVFF  01,FEF
....................             port2.data_buffer[count].current = ad7490_read(ADC_CIGS2_CURR);
0DE30:  MOVLB  9
0DE32:  RLCF   xB3,W
0DE34:  MOVWF  02
0DE36:  RLCF   xB4,W
0DE38:  MOVWF  03
0DE3A:  RLCF   02,F
0DE3C:  RLCF   03,F
0DE3E:  MOVLW  FC
0DE40:  ANDWF  02,F
0DE42:  MOVF   02,W
0DE44:  ADDLW  03
0DE46:  MOVWF  xC2
0DE48:  MOVLW  00
0DE4A:  ADDWFC 03,W
0DE4C:  MOVWF  xC3
0DE4E:  MOVLW  02
0DE50:  ADDWF  xC2,W
0DE52:  MOVWF  01
0DE54:  MOVLW  00
0DE56:  ADDWFC xC3,W
0DE58:  MOVWF  03
0DE5A:  MOVF   01,W
0DE5C:  ADDLW  B3
0DE5E:  MOVWF  01
0DE60:  MOVLW  05
0DE62:  ADDWFC 03,F
0DE64:  MOVF   01,W
0DE66:  MOVWF  xC2
0DE68:  MOVFF  03,9C3
0DE6C:  MOVLW  05
0DE6E:  MOVWF  xEE
0DE70:  MOVLB  0
0DE72:  CALL   24C2
0DE76:  MOVFF  9C3,FEA
0DE7A:  MOVFF  9C2,FE9
0DE7E:  MOVFF  02,FEC
0DE82:  MOVF   FED,F
0DE84:  MOVFF  01,FEF
....................             port2.sweep_step = count + 1;
0DE88:  MOVLW  01
0DE8A:  MOVLB  9
0DE8C:  ADDWF  xB3,W
0DE8E:  MOVLB  5
0DE90:  MOVWF  xB4
0DE92:  MOVLW  00
0DE94:  MOVLB  9
0DE96:  ADDWFC xB4,W
0DE98:  MOVLB  5
0DE9A:  MOVWF  xB5
....................             if (port2.data_buffer[count].current < curr_limit) {
0DE9C:  MOVLB  9
0DE9E:  RLCF   xB3,W
0DEA0:  MOVWF  02
0DEA2:  RLCF   xB4,W
0DEA4:  MOVWF  03
0DEA6:  RLCF   02,F
0DEA8:  RLCF   03,F
0DEAA:  MOVLW  FC
0DEAC:  ANDWF  02,F
0DEAE:  MOVF   02,W
0DEB0:  ADDLW  03
0DEB2:  MOVWF  xC2
0DEB4:  MOVLW  00
0DEB6:  ADDWFC 03,W
0DEB8:  MOVWF  xC3
0DEBA:  MOVLW  02
0DEBC:  ADDWF  xC2,W
0DEBE:  MOVWF  01
0DEC0:  MOVLW  00
0DEC2:  ADDWFC xC3,W
0DEC4:  MOVWF  03
0DEC6:  MOVF   01,W
0DEC8:  ADDLW  B3
0DECA:  MOVWF  FE9
0DECC:  MOVLW  05
0DECE:  ADDWFC 03,W
0DED0:  MOVWF  FEA
0DED2:  MOVFF  FEC,9C3
0DED6:  MOVF   FED,F
0DED8:  MOVFF  FEF,9C2
0DEDC:  MOVF   xC3,W
0DEDE:  MOVLB  1
0DEE0:  SUBWF  xB2,W
0DEE2:  BTFSC  FD8.0
0DEE4:  BRA    DEEC
0DEE6:  MOVLB  0
0DEE8:  GOTO   DF0E
0DEEC:  MOVLB  0
0DEEE:  BTFSS  FD8.2
0DEF0:  GOTO   DF08
0DEF4:  MOVLB  1
0DEF6:  MOVF   xB1,W
0DEF8:  MOVLB  9
0DEFA:  SUBWF  xC2,W
0DEFC:  BTFSS  FD8.0
0DEFE:  BRA    DF06
0DF00:  MOVLB  0
0DF02:  GOTO   DF0E
0DF06:  MOVLB  0
....................                 port2.active = 0;
0DF08:  MOVLB  9
0DF0A:  BCF    xB2.0
0DF0C:  MOVLB  0
....................             }
....................         }
.................... 
....................         count++;
0DF0E:  MOVLB  9
0DF10:  INCF   xB3,F
0DF12:  BTFSC  FD8.2
0DF14:  INCF   xB4,F
....................         if (count >= 255) {
0DF16:  MOVF   xB4,F
0DF18:  BTFSC  FD8.2
0DF1A:  BRA    DF22
0DF1C:  MOVLB  0
0DF1E:  GOTO   DF36
0DF22:  MOVLB  0
0DF24:  MOVLB  9
0DF26:  MOVF   xB3,W
0DF28:  SUBLW  FE
0DF2A:  BTFSS  FD8.0
0DF2C:  BRA    DF34
0DF2E:  MOVLB  0
0DF30:  GOTO   DF3A
0DF34:  MOVLB  0
....................             break;
0DF36:  GOTO   DF3E
....................         }
0DF3A:  GOTO   DC3E
....................     }
.................... 
....................     fprintf(PC, "temp_top:%04LX\r\n", measured_data.temp_py_top);
0DF3E:  MOVLW  22
0DF40:  MOVWF  FF6
0DF42:  MOVLW  06
0DF44:  MOVWF  FF7
0DF46:  MOVLW  00
0DF48:  MOVWF  FF8
0DF4A:  MOVLW  09
0DF4C:  MOVLB  9
0DF4E:  MOVWF  xC2
0DF50:  MOVLB  0
0DF52:  CALL   2312
0DF56:  MOVFF  9BC,9E8
0DF5A:  MOVLW  37
0DF5C:  MOVLB  9
0DF5E:  MOVWF  xE9
0DF60:  MOVLB  0
0DF62:  CALL   2542
0DF66:  MOVFF  9BB,9E8
0DF6A:  MOVLW  37
0DF6C:  MOVLB  9
0DF6E:  MOVWF  xE9
0DF70:  MOVLB  0
0DF72:  CALL   2542
0DF76:  MOVLW  0D
0DF78:  BTFSS  FA6.6
0DF7A:  GOTO   DF78
0DF7E:  MOVLB  E
0DF80:  MOVWF  xF9
0DF82:  MOVLW  0A
0DF84:  MOVLB  0
0DF86:  BTFSS  FA6.6
0DF88:  GOTO   DF86
0DF8C:  MOVLB  E
0DF8E:  MOVWF  xF9
....................     fprintf(PC, "temp_bot:%04LX\r\n", measured_data.temp_py_bot);
0DF90:  MOVLW  34
0DF92:  MOVWF  FF6
0DF94:  MOVLW  06
0DF96:  MOVWF  FF7
0DF98:  MOVLW  00
0DF9A:  MOVWF  FF8
0DF9C:  MOVLW  09
0DF9E:  MOVLB  9
0DFA0:  MOVWF  xC2
0DFA2:  MOVLB  0
0DFA4:  CALL   2312
0DFA8:  MOVFF  9BE,9E8
0DFAC:  MOVLW  37
0DFAE:  MOVLB  9
0DFB0:  MOVWF  xE9
0DFB2:  MOVLB  0
0DFB4:  CALL   2542
0DFB8:  MOVFF  9BD,9E8
0DFBC:  MOVLW  37
0DFBE:  MOVLB  9
0DFC0:  MOVWF  xE9
0DFC2:  MOVLB  0
0DFC4:  CALL   2542
0DFC8:  MOVLW  0D
0DFCA:  BTFSS  FA6.6
0DFCC:  GOTO   DFCA
0DFD0:  MOVLB  E
0DFD2:  MOVWF  xF9
0DFD4:  MOVLW  0A
0DFD6:  MOVLB  0
0DFD8:  BTFSS  FA6.6
0DFDA:  GOTO   DFD8
0DFDE:  MOVLB  E
0DFE0:  MOVWF  xF9
....................     fprintf(PC, "temp_mis7:%04LX\r\n", measured_data.temp_mis7);
0DFE2:  MOVLW  46
0DFE4:  MOVWF  FF6
0DFE6:  MOVLW  06
0DFE8:  MOVWF  FF7
0DFEA:  MOVLW  00
0DFEC:  MOVWF  FF8
0DFEE:  MOVLW  0A
0DFF0:  MOVLB  9
0DFF2:  MOVWF  xC2
0DFF4:  MOVLB  0
0DFF6:  CALL   2312
0DFFA:  MOVFF  9C0,9E8
0DFFE:  MOVLW  37
0E000:  MOVLB  9
0E002:  MOVWF  xE9
0E004:  MOVLB  0
0E006:  CALL   2542
0E00A:  MOVFF  9BF,9E8
0E00E:  MOVLW  37
0E010:  MOVLB  9
0E012:  MOVWF  xE9
0E014:  MOVLB  0
0E016:  CALL   2542
0E01A:  MOVLW  0D
0E01C:  BTFSS  FA6.6
0E01E:  GOTO   E01C
0E022:  MOVLB  E
0E024:  MOVWF  xF9
0E026:  MOVLW  0A
0E028:  MOVLB  0
0E02A:  BTFSS  FA6.6
0E02C:  GOTO   E02A
0E030:  MOVLB  E
0E032:  MOVWF  xF9
....................     fprintf(PC, "pd:%04LX\r\n", measured_data.pd);
0E034:  MOVLW  58
0E036:  MOVWF  FF6
0E038:  MOVLW  06
0E03A:  MOVWF  FF7
0E03C:  MOVLW  00
0E03E:  MOVWF  FF8
0E040:  MOVLW  03
0E042:  MOVLB  9
0E044:  MOVWF  xC2
0E046:  MOVLB  0
0E048:  CALL   2312
0E04C:  MOVFF  9BA,9E8
0E050:  MOVLW  37
0E052:  MOVLB  9
0E054:  MOVWF  xE9
0E056:  MOVLB  0
0E058:  CALL   2542
0E05C:  MOVFF  9B9,9E8
0E060:  MOVLW  37
0E062:  MOVLB  9
0E064:  MOVWF  xE9
0E066:  MOVLB  0
0E068:  CALL   2542
0E06C:  MOVLW  0D
0E06E:  BTFSS  FA6.6
0E070:  GOTO   E06E
0E074:  MOVLB  E
0E076:  MOVWF  xF9
0E078:  MOVLW  0A
0E07A:  MOVLB  0
0E07C:  BTFSS  FA6.6
0E07E:  GOTO   E07C
0E082:  MOVLB  E
0E084:  MOVWF  xF9
....................     // Print I-V data
....................     fprintf(PC, "Volt1,Curr1,Volt2,Curr2\r\n");
0E086:  MOVLW  64
0E088:  MOVWF  FF6
0E08A:  MOVLW  06
0E08C:  MOVWF  FF7
0E08E:  MOVLW  00
0E090:  MOVWF  FF8
0E092:  MOVLB  0
0E094:  CALL   22DC
....................     for (int i = 0; i < count; i++) {
0E098:  MOVLB  9
0E09A:  CLRF   xC1
0E09C:  MOVLB  0
0E09E:  MOVLB  9
0E0A0:  MOVF   xB4,F
0E0A2:  BTFSC  FD8.2
0E0A4:  BRA    E0AC
0E0A6:  MOVLB  0
0E0A8:  GOTO   E0C0
0E0AC:  MOVLB  0
0E0AE:  MOVLB  9
0E0B0:  MOVF   xB3,W
0E0B2:  SUBWF  xC1,W
0E0B4:  BTFSS  FD8.0
0E0B6:  BRA    E0BE
0E0B8:  MOVLB  0
0E0BA:  GOTO   E274
0E0BE:  MOVLB  0
.................... 
....................         fprintf(PC, "%04LX,%04LX,%04LX,%04LX\r\n",
....................             port1.data_buffer[i].voltage, port1.data_buffer[i].current,
....................             port2.data_buffer[i].voltage, port2.data_buffer[i].current);
0E0C0:  MOVLB  A
0E0C2:  CLRF   x52
0E0C4:  MOVFF  9C1,A51
0E0C8:  CLRF   x54
0E0CA:  MOVLW  04
0E0CC:  MOVWF  x53
0E0CE:  MOVLB  0
0E0D0:  CALL   8240
0E0D4:  MOVFF  02,03
0E0D8:  MOVF   01,W
0E0DA:  ADDLW  B6
0E0DC:  MOVWF  FE9
0E0DE:  MOVLW  01
0E0E0:  ADDWFC 03,W
0E0E2:  MOVWF  FEA
0E0E4:  MOVFF  FEC,9C5
0E0E8:  MOVF   FED,F
0E0EA:  MOVFF  FEF,9C4
0E0EE:  MOVLB  A
0E0F0:  CLRF   x52
0E0F2:  MOVFF  9C1,A51
0E0F6:  CLRF   x54
0E0F8:  MOVLW  04
0E0FA:  MOVWF  x53
0E0FC:  MOVLB  0
0E0FE:  CALL   8240
0E102:  MOVFF  02,03
0E106:  MOVF   01,W
0E108:  ADDLW  03
0E10A:  MOVLB  9
0E10C:  MOVWF  xC6
0E10E:  MOVLW  00
0E110:  ADDWFC 03,W
0E112:  MOVWF  xC7
0E114:  MOVLW  02
0E116:  ADDWF  xC6,W
0E118:  MOVWF  01
0E11A:  MOVLW  00
0E11C:  ADDWFC xC7,W
0E11E:  MOVWF  03
0E120:  MOVF   01,W
0E122:  ADDLW  B3
0E124:  MOVWF  FE9
0E126:  MOVLW  01
0E128:  ADDWFC 03,W
0E12A:  MOVWF  FEA
0E12C:  MOVFF  FEC,9C7
0E130:  MOVF   FED,F
0E132:  MOVFF  FEF,9C6
0E136:  MOVLB  A
0E138:  CLRF   x52
0E13A:  MOVFF  9C1,A51
0E13E:  CLRF   x54
0E140:  MOVLW  04
0E142:  MOVWF  x53
0E144:  MOVLB  0
0E146:  CALL   8240
0E14A:  MOVFF  02,03
0E14E:  MOVF   01,W
0E150:  ADDLW  B6
0E152:  MOVWF  FE9
0E154:  MOVLW  05
0E156:  ADDWFC 03,W
0E158:  MOVWF  FEA
0E15A:  MOVFF  FEC,9CB
0E15E:  MOVF   FED,F
0E160:  MOVFF  FEF,9CA
0E164:  MOVLB  A
0E166:  CLRF   x52
0E168:  MOVFF  9C1,A51
0E16C:  CLRF   x54
0E16E:  MOVLW  04
0E170:  MOVWF  x53
0E172:  MOVLB  0
0E174:  CALL   8240
0E178:  MOVFF  02,03
0E17C:  MOVF   01,W
0E17E:  ADDLW  03
0E180:  MOVLB  9
0E182:  MOVWF  xCC
0E184:  MOVLW  00
0E186:  ADDWFC 03,W
0E188:  MOVWF  xCD
0E18A:  MOVLW  02
0E18C:  ADDWF  xCC,W
0E18E:  MOVWF  01
0E190:  MOVLW  00
0E192:  ADDWFC xCD,W
0E194:  MOVWF  03
0E196:  MOVF   01,W
0E198:  ADDLW  B3
0E19A:  MOVWF  FE9
0E19C:  MOVLW  05
0E19E:  ADDWFC 03,W
0E1A0:  MOVWF  FEA
0E1A2:  MOVFF  FEC,9CD
0E1A6:  MOVF   FED,F
0E1A8:  MOVFF  FEF,9CC
0E1AC:  MOVFF  9C5,9E8
0E1B0:  MOVLW  37
0E1B2:  MOVWF  xE9
0E1B4:  MOVLB  0
0E1B6:  CALL   2542
0E1BA:  MOVFF  9C4,9E8
0E1BE:  MOVLW  37
0E1C0:  MOVLB  9
0E1C2:  MOVWF  xE9
0E1C4:  MOVLB  0
0E1C6:  CALL   2542
0E1CA:  MOVLW  2C
0E1CC:  BTFSS  FA6.6
0E1CE:  GOTO   E1CC
0E1D2:  MOVLB  E
0E1D4:  MOVWF  xF9
0E1D6:  MOVFF  9C7,9E8
0E1DA:  MOVLW  37
0E1DC:  MOVLB  9
0E1DE:  MOVWF  xE9
0E1E0:  MOVLB  0
0E1E2:  CALL   2542
0E1E6:  MOVFF  9C6,9E8
0E1EA:  MOVLW  37
0E1EC:  MOVLB  9
0E1EE:  MOVWF  xE9
0E1F0:  MOVLB  0
0E1F2:  CALL   2542
0E1F6:  MOVLW  2C
0E1F8:  BTFSS  FA6.6
0E1FA:  GOTO   E1F8
0E1FE:  MOVLB  E
0E200:  MOVWF  xF9
0E202:  MOVFF  9CB,9E8
0E206:  MOVLW  37
0E208:  MOVLB  9
0E20A:  MOVWF  xE9
0E20C:  MOVLB  0
0E20E:  CALL   2542
0E212:  MOVFF  9CA,9E8
0E216:  MOVLW  37
0E218:  MOVLB  9
0E21A:  MOVWF  xE9
0E21C:  MOVLB  0
0E21E:  CALL   2542
0E222:  MOVLW  2C
0E224:  BTFSS  FA6.6
0E226:  GOTO   E224
0E22A:  MOVLB  E
0E22C:  MOVWF  xF9
0E22E:  MOVFF  9CD,9E8
0E232:  MOVLW  37
0E234:  MOVLB  9
0E236:  MOVWF  xE9
0E238:  MOVLB  0
0E23A:  CALL   2542
0E23E:  MOVFF  9CC,9E8
0E242:  MOVLW  37
0E244:  MOVLB  9
0E246:  MOVWF  xE9
0E248:  MOVLB  0
0E24A:  CALL   2542
0E24E:  MOVLW  0D
0E250:  BTFSS  FA6.6
0E252:  GOTO   E250
0E256:  MOVLB  E
0E258:  MOVWF  xF9
0E25A:  MOVLW  0A
0E25C:  MOVLB  0
0E25E:  BTFSS  FA6.6
0E260:  GOTO   E25E
0E264:  MOVLB  E
0E266:  MOVWF  xF9
0E268:  MOVLB  0
0E26A:  MOVLB  9
0E26C:  INCF   xC1,F
0E26E:  MOVLB  0
0E270:  GOTO   E09E
....................     }
....................     log_meas_data(&measured_data, &port1);
0E274:  MOVLW  09
0E276:  MOVLB  9
0E278:  MOVWF  xC3
0E27A:  MOVLW  B5
0E27C:  MOVWF  xC2
0E27E:  MOVLW  01
0E280:  MOVWF  xC5
0E282:  MOVLW  B3
0E284:  MOVWF  xC4
0E286:  MOVLB  0
0E288:  CALL   927C
....................     log_meas_data(&measured_data, &port2);
0E28C:  MOVLW  09
0E28E:  MOVLB  9
0E290:  MOVWF  xC3
0E292:  MOVLW  B5
0E294:  MOVWF  xC2
0E296:  MOVLW  05
0E298:  MOVWF  xC5
0E29A:  MOVLW  B3
0E29C:  MOVWF  xC4
0E29E:  MOVLB  0
0E2A0:  CALL   927C
....................     misf_update_address_area();
0E2A4:  CALL   505E
0E2A8:  GOTO   F8CC (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit)
.................... {
....................     fprintf(PC, ".");
*
0B264:  MOVLW  2E
0B266:  BTFSS  FA6.6
0B268:  GOTO   B266
0B26C:  MOVLB  E
0B26E:  MOVWF  xF9
....................     
....................     
....................     connect_port1();
0B270:  MOVLB  0
0B272:  CALL   5214
....................     connect_port2();
0B276:  CALL   521C
....................     // Enable both CIGS ports
....................     mcp4901_1_write(0); 
0B27A:  MOVLB  9
0B27C:  CLRF   xDD
0B27E:  CLRF   xDC
0B280:  MOVLB  0
0B282:  CALL   2872
....................     mcp4901_2_write(0);
0B286:  MOVLB  9
0B288:  CLRF   xDD
0B28A:  CLRF   xDC
0B28C:  MOVLB  0
0B28E:  CALL   28B0
....................     connect_port1();
0B292:  CALL   5214
....................     connect_port2();
0B296:  CALL   521C
.................... 
....................     // Stabilization wait
....................     delay_ms(100);
0B29A:  MOVLW  64
0B29C:  MOVLB  B
0B29E:  MOVWF  x02
0B2A0:  MOVLB  0
0B2A2:  CALL   22AE
....................     
....................     // Init Port1
....................     sweep_debug_config_t port1 = {0};
0B2A6:  MOVLB  1
0B2A8:  CLRF   xC9
0B2AA:  CLRF   xCA
0B2AC:  CLRF   xCB
0B2AE:  CLRF   xCC
0B2B0:  CLRF   xCD
0B2B2:  CLRF   xCE
0B2B4:  CLRF   xCF
0B2B6:  CLRF   xD0
0B2B8:  CLRF   xD1
0B2BA:  CLRF   xD2
0B2BC:  CLRF   xD3
0B2BE:  CLRF   xD4
0B2C0:  CLRF   xD5
0B2C2:  CLRF   xD6
0B2C4:  CLRF   xD7
0B2C6:  CLRF   xD8
0B2C8:  CLRF   xD9
0B2CA:  CLRF   xDA
0B2CC:  CLRF   xDB
0B2CE:  CLRF   xDC
0B2D0:  CLRF   xDD
0B2D2:  CLRF   xDE
0B2D4:  CLRF   xDF
0B2D6:  CLRF   xE0
0B2D8:  CLRF   xE1
0B2DA:  CLRF   xE2
0B2DC:  CLRF   xE3
0B2DE:  CLRF   xE4
0B2E0:  CLRF   xE5
0B2E2:  CLRF   xE6
0B2E4:  CLRF   xE7
0B2E6:  CLRF   xE8
0B2E8:  CLRF   xE9
0B2EA:  CLRF   xEA
0B2EC:  CLRF   xEB
0B2EE:  CLRF   xEC
0B2F0:  CLRF   xED
0B2F2:  CLRF   xEE
0B2F4:  CLRF   xEF
0B2F6:  CLRF   xF0
0B2F8:  CLRF   xF1
0B2FA:  CLRF   xF2
0B2FC:  CLRF   xF3
0B2FE:  CLRF   xF4
0B300:  CLRF   xF5
0B302:  CLRF   xF6
0B304:  CLRF   xF7
0B306:  CLRF   xF8
0B308:  CLRF   xF9
0B30A:  CLRF   xFA
0B30C:  CLRF   xFB
0B30E:  CLRF   xFC
0B310:  CLRF   xFD
0B312:  CLRF   xFE
0B314:  CLRF   xFF
0B316:  MOVLB  2
0B318:  CLRF   x00
0B31A:  CLRF   x01
0B31C:  CLRF   x02
0B31E:  CLRF   x03
0B320:  CLRF   x04
0B322:  CLRF   x05
0B324:  CLRF   x06
0B326:  CLRF   x07
0B328:  CLRF   x08
0B32A:  CLRF   x09
0B32C:  CLRF   x0A
0B32E:  CLRF   x0B
0B330:  CLRF   x0C
0B332:  CLRF   x0D
0B334:  CLRF   x0E
0B336:  CLRF   x0F
0B338:  CLRF   x10
0B33A:  CLRF   x11
0B33C:  CLRF   x12
0B33E:  CLRF   x13
0B340:  CLRF   x14
0B342:  CLRF   x15
0B344:  CLRF   x16
0B346:  CLRF   x17
0B348:  CLRF   x18
0B34A:  CLRF   x19
0B34C:  CLRF   x1A
0B34E:  CLRF   x1B
0B350:  CLRF   x1C
0B352:  CLRF   x1D
0B354:  CLRF   x1E
0B356:  CLRF   x1F
0B358:  CLRF   x20
0B35A:  CLRF   x21
0B35C:  CLRF   x22
0B35E:  CLRF   x23
0B360:  CLRF   x24
0B362:  CLRF   x25
0B364:  CLRF   x26
0B366:  CLRF   x27
0B368:  CLRF   x28
0B36A:  CLRF   x29
0B36C:  CLRF   x2A
0B36E:  CLRF   x2B
0B370:  CLRF   x2C
0B372:  CLRF   x2D
0B374:  CLRF   x2E
0B376:  CLRF   x2F
0B378:  CLRF   x30
0B37A:  CLRF   x31
0B37C:  CLRF   x32
0B37E:  CLRF   x33
0B380:  CLRF   x34
0B382:  CLRF   x35
0B384:  CLRF   x36
0B386:  CLRF   x37
0B388:  CLRF   x38
0B38A:  CLRF   x39
0B38C:  CLRF   x3A
0B38E:  CLRF   x3B
0B390:  CLRF   x3C
0B392:  CLRF   x3D
0B394:  CLRF   x3E
0B396:  CLRF   x3F
0B398:  CLRF   x40
0B39A:  CLRF   x41
0B39C:  CLRF   x42
0B39E:  CLRF   x43
0B3A0:  CLRF   x44
0B3A2:  CLRF   x45
0B3A4:  CLRF   x46
0B3A6:  CLRF   x47
0B3A8:  CLRF   x48
0B3AA:  CLRF   x49
0B3AC:  CLRF   x4A
0B3AE:  CLRF   x4B
0B3B0:  CLRF   x4C
0B3B2:  CLRF   x4D
0B3B4:  CLRF   x4E
0B3B6:  CLRF   x4F
0B3B8:  CLRF   x50
0B3BA:  CLRF   x51
0B3BC:  CLRF   x52
0B3BE:  CLRF   x53
0B3C0:  CLRF   x54
0B3C2:  CLRF   x55
0B3C4:  CLRF   x56
0B3C6:  CLRF   x57
0B3C8:  CLRF   x58
0B3CA:  CLRF   x59
0B3CC:  CLRF   x5A
0B3CE:  CLRF   x5B
0B3D0:  CLRF   x5C
0B3D2:  CLRF   x5D
0B3D4:  CLRF   x5E
0B3D6:  CLRF   x5F
0B3D8:  CLRF   x60
0B3DA:  CLRF   x61
0B3DC:  CLRF   x62
0B3DE:  CLRF   x63
0B3E0:  CLRF   x64
0B3E2:  CLRF   x65
0B3E4:  CLRF   x66
0B3E6:  CLRF   x67
0B3E8:  CLRF   x68
0B3EA:  CLRF   x69
0B3EC:  CLRF   x6A
0B3EE:  CLRF   x6B
0B3F0:  CLRF   x6C
0B3F2:  CLRF   x6D
0B3F4:  CLRF   x6E
0B3F6:  CLRF   x6F
0B3F8:  CLRF   x70
0B3FA:  CLRF   x71
0B3FC:  CLRF   x72
0B3FE:  CLRF   x73
0B400:  CLRF   x74
0B402:  CLRF   x75
0B404:  CLRF   x76
0B406:  CLRF   x77
0B408:  CLRF   x78
0B40A:  CLRF   x79
0B40C:  CLRF   x7A
0B40E:  CLRF   x7B
0B410:  CLRF   x7C
0B412:  CLRF   x7D
0B414:  CLRF   x7E
0B416:  CLRF   x7F
0B418:  CLRF   x80
0B41A:  CLRF   x81
0B41C:  CLRF   x82
0B41E:  CLRF   x83
0B420:  CLRF   x84
0B422:  CLRF   x85
0B424:  CLRF   x86
0B426:  CLRF   x87
0B428:  CLRF   x88
0B42A:  CLRF   x89
0B42C:  CLRF   x8A
0B42E:  CLRF   x8B
0B430:  CLRF   x8C
0B432:  CLRF   x8D
0B434:  CLRF   x8E
0B436:  CLRF   x8F
0B438:  CLRF   x90
0B43A:  CLRF   x91
0B43C:  CLRF   x92
0B43E:  CLRF   x93
0B440:  CLRF   x94
0B442:  CLRF   x95
0B444:  CLRF   x96
0B446:  CLRF   x97
0B448:  CLRF   x98
0B44A:  CLRF   x99
0B44C:  CLRF   x9A
0B44E:  CLRF   x9B
0B450:  CLRF   x9C
0B452:  CLRF   x9D
0B454:  CLRF   x9E
0B456:  CLRF   x9F
0B458:  CLRF   xA0
0B45A:  CLRF   xA1
0B45C:  CLRF   xA2
0B45E:  CLRF   xA3
0B460:  CLRF   xA4
0B462:  CLRF   xA5
0B464:  CLRF   xA6
0B466:  CLRF   xA7
0B468:  CLRF   xA8
0B46A:  CLRF   xA9
0B46C:  CLRF   xAA
0B46E:  CLRF   xAB
0B470:  CLRF   xAC
0B472:  CLRF   xAD
0B474:  CLRF   xAE
0B476:  CLRF   xAF
0B478:  CLRF   xB0
0B47A:  CLRF   xB1
0B47C:  CLRF   xB2
0B47E:  CLRF   xB3
0B480:  CLRF   xB4
0B482:  CLRF   xB5
0B484:  CLRF   xB6
0B486:  CLRF   xB7
0B488:  CLRF   xB8
0B48A:  CLRF   xB9
0B48C:  CLRF   xBA
0B48E:  CLRF   xBB
0B490:  CLRF   xBC
0B492:  CLRF   xBD
0B494:  CLRF   xBE
0B496:  CLRF   xBF
0B498:  CLRF   xC0
0B49A:  CLRF   xC1
0B49C:  CLRF   xC2
0B49E:  CLRF   xC3
0B4A0:  CLRF   xC4
0B4A2:  CLRF   xC5
0B4A4:  CLRF   xC6
0B4A6:  CLRF   xC7
0B4A8:  CLRF   xC8
0B4AA:  CLRF   xC9
0B4AC:  CLRF   xCA
0B4AE:  CLRF   xCB
0B4B0:  CLRF   xCC
0B4B2:  CLRF   xCD
0B4B4:  CLRF   xCE
0B4B6:  CLRF   xCF
0B4B8:  CLRF   xD0
0B4BA:  CLRF   xD1
0B4BC:  CLRF   xD2
0B4BE:  CLRF   xD3
0B4C0:  CLRF   xD4
0B4C2:  CLRF   xD5
0B4C4:  CLRF   xD6
0B4C6:  CLRF   xD7
0B4C8:  CLRF   xD8
0B4CA:  CLRF   xD9
0B4CC:  CLRF   xDA
0B4CE:  CLRF   xDB
0B4D0:  CLRF   xDC
0B4D2:  CLRF   xDD
0B4D4:  CLRF   xDE
0B4D6:  CLRF   xDF
0B4D8:  CLRF   xE0
0B4DA:  CLRF   xE1
0B4DC:  CLRF   xE2
0B4DE:  CLRF   xE3
0B4E0:  CLRF   xE4
0B4E2:  CLRF   xE5
0B4E4:  CLRF   xE6
0B4E6:  CLRF   xE7
0B4E8:  CLRF   xE8
0B4EA:  CLRF   xE9
0B4EC:  CLRF   xEA
0B4EE:  CLRF   xEB
0B4F0:  CLRF   xEC
0B4F2:  CLRF   xED
0B4F4:  CLRF   xEE
0B4F6:  CLRF   xEF
0B4F8:  CLRF   xF0
0B4FA:  CLRF   xF1
0B4FC:  CLRF   xF2
0B4FE:  CLRF   xF3
0B500:  CLRF   xF4
0B502:  CLRF   xF5
0B504:  CLRF   xF6
0B506:  CLRF   xF7
0B508:  CLRF   xF8
0B50A:  CLRF   xF9
0B50C:  CLRF   xFA
0B50E:  CLRF   xFB
0B510:  CLRF   xFC
0B512:  CLRF   xFD
0B514:  CLRF   xFE
0B516:  CLRF   xFF
0B518:  MOVLB  3
0B51A:  CLRF   x00
0B51C:  CLRF   x01
0B51E:  CLRF   x02
0B520:  CLRF   x03
0B522:  CLRF   x04
0B524:  CLRF   x05
0B526:  CLRF   x06
0B528:  CLRF   x07
0B52A:  CLRF   x08
0B52C:  CLRF   x09
0B52E:  CLRF   x0A
0B530:  CLRF   x0B
0B532:  CLRF   x0C
0B534:  CLRF   x0D
0B536:  CLRF   x0E
0B538:  CLRF   x0F
0B53A:  CLRF   x10
0B53C:  CLRF   x11
0B53E:  CLRF   x12
0B540:  CLRF   x13
0B542:  CLRF   x14
0B544:  CLRF   x15
0B546:  CLRF   x16
0B548:  CLRF   x17
0B54A:  CLRF   x18
0B54C:  CLRF   x19
0B54E:  CLRF   x1A
0B550:  CLRF   x1B
0B552:  CLRF   x1C
0B554:  CLRF   x1D
0B556:  CLRF   x1E
0B558:  CLRF   x1F
0B55A:  CLRF   x20
0B55C:  CLRF   x21
0B55E:  CLRF   x22
0B560:  CLRF   x23
0B562:  CLRF   x24
0B564:  CLRF   x25
0B566:  CLRF   x26
0B568:  CLRF   x27
0B56A:  CLRF   x28
0B56C:  CLRF   x29
0B56E:  CLRF   x2A
0B570:  CLRF   x2B
0B572:  CLRF   x2C
0B574:  CLRF   x2D
0B576:  CLRF   x2E
0B578:  CLRF   x2F
0B57A:  CLRF   x30
0B57C:  CLRF   x31
0B57E:  CLRF   x32
0B580:  CLRF   x33
0B582:  CLRF   x34
0B584:  CLRF   x35
0B586:  CLRF   x36
0B588:  CLRF   x37
0B58A:  CLRF   x38
0B58C:  CLRF   x39
0B58E:  CLRF   x3A
0B590:  CLRF   x3B
0B592:  CLRF   x3C
0B594:  CLRF   x3D
0B596:  CLRF   x3E
0B598:  CLRF   x3F
0B59A:  CLRF   x40
0B59C:  CLRF   x41
0B59E:  CLRF   x42
0B5A0:  CLRF   x43
0B5A2:  CLRF   x44
0B5A4:  CLRF   x45
0B5A6:  CLRF   x46
0B5A8:  CLRF   x47
0B5AA:  CLRF   x48
0B5AC:  CLRF   x49
0B5AE:  CLRF   x4A
0B5B0:  CLRF   x4B
0B5B2:  CLRF   x4C
0B5B4:  CLRF   x4D
0B5B6:  CLRF   x4E
0B5B8:  CLRF   x4F
0B5BA:  CLRF   x50
0B5BC:  CLRF   x51
0B5BE:  CLRF   x52
0B5C0:  CLRF   x53
0B5C2:  CLRF   x54
0B5C4:  CLRF   x55
0B5C6:  CLRF   x56
0B5C8:  CLRF   x57
0B5CA:  CLRF   x58
0B5CC:  CLRF   x59
0B5CE:  CLRF   x5A
0B5D0:  CLRF   x5B
0B5D2:  CLRF   x5C
0B5D4:  CLRF   x5D
0B5D6:  CLRF   x5E
0B5D8:  CLRF   x5F
0B5DA:  CLRF   x60
0B5DC:  CLRF   x61
0B5DE:  CLRF   x62
0B5E0:  CLRF   x63
0B5E2:  CLRF   x64
0B5E4:  CLRF   x65
0B5E6:  CLRF   x66
0B5E8:  CLRF   x67
0B5EA:  CLRF   x68
0B5EC:  CLRF   x69
0B5EE:  CLRF   x6A
0B5F0:  CLRF   x6B
0B5F2:  CLRF   x6C
0B5F4:  CLRF   x6D
0B5F6:  CLRF   x6E
0B5F8:  CLRF   x6F
0B5FA:  CLRF   x70
0B5FC:  CLRF   x71
0B5FE:  CLRF   x72
0B600:  CLRF   x73
0B602:  CLRF   x74
0B604:  CLRF   x75
0B606:  CLRF   x76
0B608:  CLRF   x77
0B60A:  CLRF   x78
0B60C:  CLRF   x79
0B60E:  CLRF   x7A
0B610:  CLRF   x7B
0B612:  CLRF   x7C
0B614:  CLRF   x7D
0B616:  CLRF   x7E
0B618:  CLRF   x7F
0B61A:  CLRF   x80
0B61C:  CLRF   x81
0B61E:  CLRF   x82
0B620:  CLRF   x83
0B622:  CLRF   x84
0B624:  CLRF   x85
0B626:  CLRF   x86
0B628:  CLRF   x87
0B62A:  CLRF   x88
0B62C:  CLRF   x89
0B62E:  CLRF   x8A
0B630:  CLRF   x8B
0B632:  CLRF   x8C
0B634:  CLRF   x8D
0B636:  CLRF   x8E
0B638:  CLRF   x8F
0B63A:  CLRF   x90
0B63C:  CLRF   x91
0B63E:  CLRF   x92
0B640:  CLRF   x93
0B642:  CLRF   x94
0B644:  CLRF   x95
0B646:  CLRF   x96
0B648:  CLRF   x97
0B64A:  CLRF   x98
0B64C:  CLRF   x99
0B64E:  CLRF   x9A
0B650:  CLRF   x9B
0B652:  CLRF   x9C
0B654:  CLRF   x9D
0B656:  CLRF   x9E
0B658:  CLRF   x9F
0B65A:  CLRF   xA0
0B65C:  CLRF   xA1
0B65E:  CLRF   xA2
0B660:  CLRF   xA3
0B662:  CLRF   xA4
0B664:  CLRF   xA5
0B666:  CLRF   xA6
0B668:  CLRF   xA7
0B66A:  CLRF   xA8
0B66C:  CLRF   xA9
0B66E:  CLRF   xAA
0B670:  CLRF   xAB
0B672:  CLRF   xAC
0B674:  CLRF   xAD
0B676:  CLRF   xAE
0B678:  CLRF   xAF
0B67A:  CLRF   xB0
0B67C:  CLRF   xB1
0B67E:  CLRF   xB2
0B680:  CLRF   xB3
0B682:  CLRF   xB4
0B684:  CLRF   xB5
0B686:  CLRF   xB6
0B688:  CLRF   xB7
0B68A:  CLRF   xB8
0B68C:  CLRF   xB9
0B68E:  CLRF   xBA
0B690:  CLRF   xBB
0B692:  CLRF   xBC
0B694:  CLRF   xBD
0B696:  CLRF   xBE
0B698:  CLRF   xBF
0B69A:  CLRF   xC0
0B69C:  CLRF   xC1
0B69E:  CLRF   xC2
0B6A0:  CLRF   xC3
0B6A2:  CLRF   xC4
0B6A4:  CLRF   xC5
0B6A6:  CLRF   xC6
0B6A8:  CLRF   xC7
0B6AA:  CLRF   xC8
0B6AC:  CLRF   xC9
0B6AE:  CLRF   xCA
0B6B0:  CLRF   xCB
0B6B2:  CLRF   xCC
0B6B4:  CLRF   xCD
0B6B6:  CLRF   xCE
0B6B8:  CLRF   xCF
0B6BA:  CLRF   xD0
0B6BC:  CLRF   xD1
0B6BE:  CLRF   xD2
0B6C0:  CLRF   xD3
0B6C2:  CLRF   xD4
0B6C4:  CLRF   xD5
0B6C6:  CLRF   xD6
0B6C8:  CLRF   xD7
0B6CA:  CLRF   xD8
0B6CC:  CLRF   xD9
0B6CE:  CLRF   xDA
0B6D0:  CLRF   xDB
0B6D2:  CLRF   xDC
0B6D4:  CLRF   xDD
0B6D6:  CLRF   xDE
0B6D8:  CLRF   xDF
0B6DA:  CLRF   xE0
0B6DC:  CLRF   xE1
0B6DE:  CLRF   xE2
0B6E0:  CLRF   xE3
0B6E2:  CLRF   xE4
0B6E4:  CLRF   xE5
0B6E6:  CLRF   xE6
0B6E8:  CLRF   xE7
0B6EA:  CLRF   xE8
0B6EC:  CLRF   xE9
0B6EE:  CLRF   xEA
0B6F0:  CLRF   xEB
0B6F2:  CLRF   xEC
0B6F4:  CLRF   xED
0B6F6:  CLRF   xEE
0B6F8:  CLRF   xEF
0B6FA:  CLRF   xF0
0B6FC:  CLRF   xF1
0B6FE:  CLRF   xF2
0B700:  CLRF   xF3
0B702:  CLRF   xF4
0B704:  CLRF   xF5
0B706:  CLRF   xF6
0B708:  CLRF   xF7
0B70A:  CLRF   xF8
0B70C:  CLRF   xF9
0B70E:  CLRF   xFA
0B710:  CLRF   xFB
0B712:  CLRF   xFC
0B714:  CLRF   xFD
0B716:  CLRF   xFE
0B718:  CLRF   xFF
0B71A:  MOVLB  4
0B71C:  CLRF   x00
0B71E:  CLRF   x01
0B720:  CLRF   x02
0B722:  CLRF   x03
0B724:  CLRF   x04
0B726:  CLRF   x05
0B728:  CLRF   x06
0B72A:  CLRF   x07
0B72C:  CLRF   x08
0B72E:  CLRF   x09
0B730:  CLRF   x0A
0B732:  CLRF   x0B
0B734:  CLRF   x0C
0B736:  CLRF   x0D
0B738:  CLRF   x0E
0B73A:  CLRF   x0F
0B73C:  CLRF   x10
0B73E:  CLRF   x11
0B740:  CLRF   x12
0B742:  CLRF   x13
0B744:  CLRF   x14
0B746:  CLRF   x15
0B748:  CLRF   x16
0B74A:  CLRF   x17
0B74C:  CLRF   x18
0B74E:  CLRF   x19
0B750:  CLRF   x1A
0B752:  CLRF   x1B
0B754:  CLRF   x1C
0B756:  CLRF   x1D
0B758:  CLRF   x1E
0B75A:  CLRF   x1F
0B75C:  CLRF   x20
0B75E:  CLRF   x21
0B760:  CLRF   x22
0B762:  CLRF   x23
0B764:  CLRF   x24
0B766:  CLRF   x25
0B768:  CLRF   x26
0B76A:  CLRF   x27
0B76C:  CLRF   x28
0B76E:  CLRF   x29
0B770:  CLRF   x2A
0B772:  CLRF   x2B
0B774:  CLRF   x2C
0B776:  CLRF   x2D
0B778:  CLRF   x2E
0B77A:  CLRF   x2F
0B77C:  CLRF   x30
0B77E:  CLRF   x31
0B780:  CLRF   x32
0B782:  CLRF   x33
0B784:  CLRF   x34
0B786:  CLRF   x35
0B788:  CLRF   x36
0B78A:  CLRF   x37
0B78C:  CLRF   x38
0B78E:  CLRF   x39
0B790:  CLRF   x3A
0B792:  CLRF   x3B
0B794:  CLRF   x3C
0B796:  CLRF   x3D
0B798:  CLRF   x3E
0B79A:  CLRF   x3F
0B79C:  CLRF   x40
0B79E:  CLRF   x41
0B7A0:  CLRF   x42
0B7A2:  CLRF   x43
0B7A4:  CLRF   x44
0B7A6:  CLRF   x45
0B7A8:  CLRF   x46
0B7AA:  CLRF   x47
0B7AC:  CLRF   x48
0B7AE:  CLRF   x49
0B7B0:  CLRF   x4A
0B7B2:  CLRF   x4B
0B7B4:  CLRF   x4C
0B7B6:  CLRF   x4D
0B7B8:  CLRF   x4E
0B7BA:  CLRF   x4F
0B7BC:  CLRF   x50
0B7BE:  CLRF   x51
0B7C0:  CLRF   x52
0B7C2:  CLRF   x53
0B7C4:  CLRF   x54
0B7C6:  CLRF   x55
0B7C8:  CLRF   x56
0B7CA:  CLRF   x57
0B7CC:  CLRF   x58
0B7CE:  CLRF   x59
0B7D0:  CLRF   x5A
0B7D2:  CLRF   x5B
0B7D4:  CLRF   x5C
0B7D6:  CLRF   x5D
0B7D8:  CLRF   x5E
0B7DA:  CLRF   x5F
0B7DC:  CLRF   x60
0B7DE:  CLRF   x61
0B7E0:  CLRF   x62
0B7E2:  CLRF   x63
0B7E4:  CLRF   x64
0B7E6:  CLRF   x65
0B7E8:  CLRF   x66
0B7EA:  CLRF   x67
0B7EC:  CLRF   x68
0B7EE:  CLRF   x69
0B7F0:  CLRF   x6A
0B7F2:  CLRF   x6B
0B7F4:  CLRF   x6C
0B7F6:  CLRF   x6D
0B7F8:  CLRF   x6E
0B7FA:  CLRF   x6F
0B7FC:  CLRF   x70
0B7FE:  CLRF   x71
0B800:  CLRF   x72
0B802:  CLRF   x73
0B804:  CLRF   x74
0B806:  CLRF   x75
0B808:  CLRF   x76
0B80A:  CLRF   x77
0B80C:  CLRF   x78
0B80E:  CLRF   x79
0B810:  CLRF   x7A
0B812:  CLRF   x7B
0B814:  CLRF   x7C
0B816:  CLRF   x7D
0B818:  CLRF   x7E
0B81A:  CLRF   x7F
0B81C:  CLRF   x80
0B81E:  CLRF   x81
0B820:  CLRF   x82
0B822:  CLRF   x83
0B824:  CLRF   x84
0B826:  CLRF   x85
0B828:  CLRF   x86
0B82A:  CLRF   x87
0B82C:  CLRF   x88
0B82E:  CLRF   x89
0B830:  CLRF   x8A
0B832:  CLRF   x8B
0B834:  CLRF   x8C
0B836:  CLRF   x8D
0B838:  CLRF   x8E
0B83A:  CLRF   x8F
0B83C:  CLRF   x90
0B83E:  CLRF   x91
0B840:  CLRF   x92
0B842:  CLRF   x93
0B844:  CLRF   x94
0B846:  CLRF   x95
0B848:  CLRF   x96
0B84A:  CLRF   x97
0B84C:  CLRF   x98
0B84E:  CLRF   x99
0B850:  CLRF   x9A
0B852:  CLRF   x9B
0B854:  CLRF   x9C
0B856:  CLRF   x9D
0B858:  CLRF   x9E
0B85A:  CLRF   x9F
0B85C:  CLRF   xA0
0B85E:  CLRF   xA1
0B860:  CLRF   xA2
0B862:  CLRF   xA3
0B864:  CLRF   xA4
0B866:  CLRF   xA5
0B868:  CLRF   xA6
0B86A:  CLRF   xA7
0B86C:  CLRF   xA8
0B86E:  CLRF   xA9
0B870:  CLRF   xAA
0B872:  CLRF   xAB
0B874:  CLRF   xAC
0B876:  CLRF   xAD
0B878:  CLRF   xAE
0B87A:  CLRF   xAF
0B87C:  CLRF   xB0
0B87E:  CLRF   xB1
0B880:  CLRF   xB2
0B882:  CLRF   xB3
0B884:  CLRF   xB4
0B886:  CLRF   xB5
0B888:  CLRF   xB6
0B88A:  CLRF   xB7
0B88C:  CLRF   xB8
0B88E:  CLRF   xB9
0B890:  CLRF   xBA
0B892:  CLRF   xBB
0B894:  CLRF   xBC
0B896:  CLRF   xBD
0B898:  CLRF   xBE
0B89A:  CLRF   xBF
0B89C:  CLRF   xC0
0B89E:  CLRF   xC1
0B8A0:  CLRF   xC2
0B8A2:  CLRF   xC3
0B8A4:  CLRF   xC4
0B8A6:  CLRF   xC5
0B8A8:  CLRF   xC6
0B8AA:  CLRF   xC7
0B8AC:  CLRF   xC8
0B8AE:  CLRF   xC9
0B8B0:  CLRF   xCA
0B8B2:  CLRF   xCB
0B8B4:  CLRF   xCC
0B8B6:  CLRF   xCD
0B8B8:  CLRF   xCE
0B8BA:  CLRF   xCF
0B8BC:  CLRF   xD0
0B8BE:  CLRF   xD1
0B8C0:  CLRF   xD2
0B8C2:  CLRF   xD3
0B8C4:  CLRF   xD4
0B8C6:  CLRF   xD5
0B8C8:  CLRF   xD6
0B8CA:  CLRF   xD7
0B8CC:  CLRF   xD8
0B8CE:  CLRF   xD9
0B8D0:  CLRF   xDA
0B8D2:  CLRF   xDB
0B8D4:  CLRF   xDC
0B8D6:  CLRF   xDD
0B8D8:  CLRF   xDE
0B8DA:  CLRF   xDF
0B8DC:  CLRF   xE0
0B8DE:  CLRF   xE1
0B8E0:  CLRF   xE2
0B8E2:  CLRF   xE3
0B8E4:  CLRF   xE4
0B8E6:  CLRF   xE5
0B8E8:  CLRF   xE6
0B8EA:  CLRF   xE7
0B8EC:  CLRF   xE8
0B8EE:  CLRF   xE9
0B8F0:  CLRF   xEA
0B8F2:  CLRF   xEB
0B8F4:  CLRF   xEC
0B8F6:  CLRF   xED
0B8F8:  CLRF   xEE
0B8FA:  CLRF   xEF
0B8FC:  CLRF   xF0
0B8FE:  CLRF   xF1
0B900:  CLRF   xF2
0B902:  CLRF   xF3
0B904:  CLRF   xF4
0B906:  CLRF   xF5
0B908:  CLRF   xF6
0B90A:  CLRF   xF7
0B90C:  CLRF   xF8
0B90E:  CLRF   xF9
0B910:  CLRF   xFA
0B912:  CLRF   xFB
0B914:  CLRF   xFC
0B916:  CLRF   xFD
0B918:  CLRF   xFE
0B91A:  CLRF   xFF
0B91C:  MOVLB  5
0B91E:  CLRF   x00
0B920:  CLRF   x01
0B922:  CLRF   x02
0B924:  CLRF   x03
0B926:  CLRF   x04
0B928:  CLRF   x05
0B92A:  CLRF   x06
0B92C:  CLRF   x07
0B92E:  CLRF   x08
0B930:  CLRF   x09
0B932:  CLRF   x0A
0B934:  CLRF   x0B
0B936:  CLRF   x0C
0B938:  CLRF   x0D
0B93A:  CLRF   x0E
0B93C:  CLRF   x0F
0B93E:  CLRF   x10
0B940:  CLRF   x11
0B942:  CLRF   x12
0B944:  CLRF   x13
0B946:  CLRF   x14
0B948:  CLRF   x15
0B94A:  CLRF   x16
0B94C:  CLRF   x17
0B94E:  CLRF   x18
0B950:  CLRF   x19
0B952:  CLRF   x1A
0B954:  CLRF   x1B
0B956:  CLRF   x1C
0B958:  CLRF   x1D
0B95A:  CLRF   x1E
0B95C:  CLRF   x1F
0B95E:  CLRF   x20
0B960:  CLRF   x21
0B962:  CLRF   x22
0B964:  CLRF   x23
0B966:  CLRF   x24
0B968:  CLRF   x25
0B96A:  CLRF   x26
0B96C:  CLRF   x27
0B96E:  CLRF   x28
0B970:  CLRF   x29
0B972:  CLRF   x2A
0B974:  CLRF   x2B
0B976:  CLRF   x2C
0B978:  CLRF   x2D
0B97A:  CLRF   x2E
0B97C:  CLRF   x2F
0B97E:  CLRF   x30
0B980:  CLRF   x31
0B982:  CLRF   x32
0B984:  CLRF   x33
0B986:  CLRF   x34
0B988:  CLRF   x35
0B98A:  CLRF   x36
0B98C:  CLRF   x37
0B98E:  CLRF   x38
0B990:  CLRF   x39
0B992:  CLRF   x3A
0B994:  CLRF   x3B
0B996:  CLRF   x3C
0B998:  CLRF   x3D
0B99A:  CLRF   x3E
0B99C:  CLRF   x3F
0B99E:  CLRF   x40
0B9A0:  CLRF   x41
0B9A2:  CLRF   x42
0B9A4:  CLRF   x43
0B9A6:  CLRF   x44
0B9A8:  CLRF   x45
0B9AA:  CLRF   x46
0B9AC:  CLRF   x47
0B9AE:  CLRF   x48
0B9B0:  CLRF   x49
0B9B2:  CLRF   x4A
0B9B4:  CLRF   x4B
0B9B6:  CLRF   x4C
0B9B8:  CLRF   x4D
0B9BA:  CLRF   x4E
0B9BC:  CLRF   x4F
0B9BE:  CLRF   x50
0B9C0:  CLRF   x51
0B9C2:  CLRF   x52
0B9C4:  CLRF   x53
0B9C6:  CLRF   x54
0B9C8:  CLRF   x55
0B9CA:  CLRF   x56
0B9CC:  CLRF   x57
0B9CE:  CLRF   x58
0B9D0:  CLRF   x59
0B9D2:  CLRF   x5A
0B9D4:  CLRF   x5B
0B9D6:  CLRF   x5C
0B9D8:  CLRF   x5D
0B9DA:  CLRF   x5E
0B9DC:  CLRF   x5F
0B9DE:  CLRF   x60
0B9E0:  CLRF   x61
0B9E2:  CLRF   x62
0B9E4:  CLRF   x63
0B9E6:  CLRF   x64
0B9E8:  CLRF   x65
0B9EA:  CLRF   x66
0B9EC:  CLRF   x67
0B9EE:  CLRF   x68
0B9F0:  CLRF   x69
0B9F2:  CLRF   x6A
0B9F4:  CLRF   x6B
0B9F6:  CLRF   x6C
0B9F8:  CLRF   x6D
0B9FA:  CLRF   x6E
0B9FC:  CLRF   x6F
0B9FE:  CLRF   x70
0BA00:  CLRF   x71
0BA02:  CLRF   x72
0BA04:  CLRF   x73
0BA06:  CLRF   x74
0BA08:  CLRF   x75
0BA0A:  CLRF   x76
0BA0C:  CLRF   x77
0BA0E:  CLRF   x78
0BA10:  CLRF   x79
0BA12:  CLRF   x7A
0BA14:  CLRF   x7B
0BA16:  CLRF   x7C
0BA18:  CLRF   x7D
0BA1A:  CLRF   x7E
0BA1C:  CLRF   x7F
0BA1E:  CLRF   x80
0BA20:  CLRF   x81
0BA22:  CLRF   x82
0BA24:  CLRF   x83
0BA26:  CLRF   x84
0BA28:  CLRF   x85
0BA2A:  CLRF   x86
0BA2C:  CLRF   x87
0BA2E:  CLRF   x88
0BA30:  CLRF   x89
0BA32:  CLRF   x8A
0BA34:  CLRF   x8B
0BA36:  CLRF   x8C
0BA38:  CLRF   x8D
0BA3A:  CLRF   x8E
0BA3C:  CLRF   x8F
0BA3E:  CLRF   x90
0BA40:  CLRF   x91
0BA42:  CLRF   x92
0BA44:  CLRF   x93
0BA46:  CLRF   x94
0BA48:  CLRF   x95
0BA4A:  CLRF   x96
0BA4C:  CLRF   x97
0BA4E:  CLRF   x98
0BA50:  CLRF   x99
0BA52:  CLRF   x9A
0BA54:  CLRF   x9B
0BA56:  CLRF   x9C
0BA58:  CLRF   x9D
0BA5A:  CLRF   x9E
0BA5C:  CLRF   x9F
0BA5E:  CLRF   xA0
0BA60:  CLRF   xA1
0BA62:  CLRF   xA2
0BA64:  CLRF   xA3
0BA66:  CLRF   xA4
0BA68:  CLRF   xA5
0BA6A:  CLRF   xA6
0BA6C:  CLRF   xA7
0BA6E:  CLRF   xA8
0BA70:  CLRF   xA9
0BA72:  CLRF   xAA
0BA74:  CLRF   xAB
0BA76:  CLRF   xAC
0BA78:  CLRF   xAD
0BA7A:  CLRF   xAE
0BA7C:  CLRF   xAF
0BA7E:  CLRF   xB0
0BA80:  CLRF   xB1
0BA82:  CLRF   xB2
0BA84:  CLRF   xB3
0BA86:  CLRF   xB4
0BA88:  CLRF   xB5
0BA8A:  CLRF   xB6
0BA8C:  CLRF   xB7
0BA8E:  CLRF   xB8
0BA90:  CLRF   xB9
0BA92:  CLRF   xBA
0BA94:  CLRF   xBB
0BA96:  CLRF   xBC
0BA98:  CLRF   xBD
0BA9A:  CLRF   xBE
0BA9C:  CLRF   xBF
0BA9E:  CLRF   xC0
0BAA0:  CLRF   xC1
0BAA2:  CLRF   xC2
0BAA4:  CLRF   xC3
0BAA6:  CLRF   xC4
0BAA8:  CLRF   xC5
0BAAA:  CLRF   xC6
0BAAC:  CLRF   xC7
0BAAE:  CLRF   xC8
....................     port1.port_num = 1;
0BAB0:  MOVLW  01
0BAB2:  MOVLB  1
0BAB4:  MOVWF  xC9
....................     port1.sweep_step = 0;
0BAB6:  CLRF   xCB
0BAB8:  CLRF   xCA
....................     port1.active = 1;
0BABA:  MOVLB  5
0BABC:  BSF    xC8.0
.................... 
....................     // Init Port2
....................     sweep_debug_config_t port2 = {0};
0BABE:  CLRF   xC9
0BAC0:  CLRF   xCA
0BAC2:  CLRF   xCB
0BAC4:  CLRF   xCC
0BAC6:  CLRF   xCD
0BAC8:  CLRF   xCE
0BACA:  CLRF   xCF
0BACC:  CLRF   xD0
0BACE:  CLRF   xD1
0BAD0:  CLRF   xD2
0BAD2:  CLRF   xD3
0BAD4:  CLRF   xD4
0BAD6:  CLRF   xD5
0BAD8:  CLRF   xD6
0BADA:  CLRF   xD7
0BADC:  CLRF   xD8
0BADE:  CLRF   xD9
0BAE0:  CLRF   xDA
0BAE2:  CLRF   xDB
0BAE4:  CLRF   xDC
0BAE6:  CLRF   xDD
0BAE8:  CLRF   xDE
0BAEA:  CLRF   xDF
0BAEC:  CLRF   xE0
0BAEE:  CLRF   xE1
0BAF0:  CLRF   xE2
0BAF2:  CLRF   xE3
0BAF4:  CLRF   xE4
0BAF6:  CLRF   xE5
0BAF8:  CLRF   xE6
0BAFA:  CLRF   xE7
0BAFC:  CLRF   xE8
0BAFE:  CLRF   xE9
0BB00:  CLRF   xEA
0BB02:  CLRF   xEB
0BB04:  CLRF   xEC
0BB06:  CLRF   xED
0BB08:  CLRF   xEE
0BB0A:  CLRF   xEF
0BB0C:  CLRF   xF0
0BB0E:  CLRF   xF1
0BB10:  CLRF   xF2
0BB12:  CLRF   xF3
0BB14:  CLRF   xF4
0BB16:  CLRF   xF5
0BB18:  CLRF   xF6
0BB1A:  CLRF   xF7
0BB1C:  CLRF   xF8
0BB1E:  CLRF   xF9
0BB20:  CLRF   xFA
0BB22:  CLRF   xFB
0BB24:  CLRF   xFC
0BB26:  CLRF   xFD
0BB28:  CLRF   xFE
0BB2A:  CLRF   xFF
0BB2C:  MOVLB  6
0BB2E:  CLRF   x00
0BB30:  CLRF   x01
0BB32:  CLRF   x02
0BB34:  CLRF   x03
0BB36:  CLRF   x04
0BB38:  CLRF   x05
0BB3A:  CLRF   x06
0BB3C:  CLRF   x07
0BB3E:  CLRF   x08
0BB40:  CLRF   x09
0BB42:  CLRF   x0A
0BB44:  CLRF   x0B
0BB46:  CLRF   x0C
0BB48:  CLRF   x0D
0BB4A:  CLRF   x0E
0BB4C:  CLRF   x0F
0BB4E:  CLRF   x10
0BB50:  CLRF   x11
0BB52:  CLRF   x12
0BB54:  CLRF   x13
0BB56:  CLRF   x14
0BB58:  CLRF   x15
0BB5A:  CLRF   x16
0BB5C:  CLRF   x17
0BB5E:  CLRF   x18
0BB60:  CLRF   x19
0BB62:  CLRF   x1A
0BB64:  CLRF   x1B
0BB66:  CLRF   x1C
0BB68:  CLRF   x1D
0BB6A:  CLRF   x1E
0BB6C:  CLRF   x1F
0BB6E:  CLRF   x20
0BB70:  CLRF   x21
0BB72:  CLRF   x22
0BB74:  CLRF   x23
0BB76:  CLRF   x24
0BB78:  CLRF   x25
0BB7A:  CLRF   x26
0BB7C:  CLRF   x27
0BB7E:  CLRF   x28
0BB80:  CLRF   x29
0BB82:  CLRF   x2A
0BB84:  CLRF   x2B
0BB86:  CLRF   x2C
0BB88:  CLRF   x2D
0BB8A:  CLRF   x2E
0BB8C:  CLRF   x2F
0BB8E:  CLRF   x30
0BB90:  CLRF   x31
0BB92:  CLRF   x32
0BB94:  CLRF   x33
0BB96:  CLRF   x34
0BB98:  CLRF   x35
0BB9A:  CLRF   x36
0BB9C:  CLRF   x37
0BB9E:  CLRF   x38
0BBA0:  CLRF   x39
0BBA2:  CLRF   x3A
0BBA4:  CLRF   x3B
0BBA6:  CLRF   x3C
0BBA8:  CLRF   x3D
0BBAA:  CLRF   x3E
0BBAC:  CLRF   x3F
0BBAE:  CLRF   x40
0BBB0:  CLRF   x41
0BBB2:  CLRF   x42
0BBB4:  CLRF   x43
0BBB6:  CLRF   x44
0BBB8:  CLRF   x45
0BBBA:  CLRF   x46
0BBBC:  CLRF   x47
0BBBE:  CLRF   x48
0BBC0:  CLRF   x49
0BBC2:  CLRF   x4A
0BBC4:  CLRF   x4B
0BBC6:  CLRF   x4C
0BBC8:  CLRF   x4D
0BBCA:  CLRF   x4E
0BBCC:  CLRF   x4F
0BBCE:  CLRF   x50
0BBD0:  CLRF   x51
0BBD2:  CLRF   x52
0BBD4:  CLRF   x53
0BBD6:  CLRF   x54
0BBD8:  CLRF   x55
0BBDA:  CLRF   x56
0BBDC:  CLRF   x57
0BBDE:  CLRF   x58
0BBE0:  CLRF   x59
0BBE2:  CLRF   x5A
0BBE4:  CLRF   x5B
0BBE6:  CLRF   x5C
0BBE8:  CLRF   x5D
0BBEA:  CLRF   x5E
0BBEC:  CLRF   x5F
0BBEE:  CLRF   x60
0BBF0:  CLRF   x61
0BBF2:  CLRF   x62
0BBF4:  CLRF   x63
0BBF6:  CLRF   x64
0BBF8:  CLRF   x65
0BBFA:  CLRF   x66
0BBFC:  CLRF   x67
0BBFE:  CLRF   x68
0BC00:  CLRF   x69
0BC02:  CLRF   x6A
0BC04:  CLRF   x6B
0BC06:  CLRF   x6C
0BC08:  CLRF   x6D
0BC0A:  CLRF   x6E
0BC0C:  CLRF   x6F
0BC0E:  CLRF   x70
0BC10:  CLRF   x71
0BC12:  CLRF   x72
0BC14:  CLRF   x73
0BC16:  CLRF   x74
0BC18:  CLRF   x75
0BC1A:  CLRF   x76
0BC1C:  CLRF   x77
0BC1E:  CLRF   x78
0BC20:  CLRF   x79
0BC22:  CLRF   x7A
0BC24:  CLRF   x7B
0BC26:  CLRF   x7C
0BC28:  CLRF   x7D
0BC2A:  CLRF   x7E
0BC2C:  CLRF   x7F
0BC2E:  CLRF   x80
0BC30:  CLRF   x81
0BC32:  CLRF   x82
0BC34:  CLRF   x83
0BC36:  CLRF   x84
0BC38:  CLRF   x85
0BC3A:  CLRF   x86
0BC3C:  CLRF   x87
0BC3E:  CLRF   x88
0BC40:  CLRF   x89
0BC42:  CLRF   x8A
0BC44:  CLRF   x8B
0BC46:  CLRF   x8C
0BC48:  CLRF   x8D
0BC4A:  CLRF   x8E
0BC4C:  CLRF   x8F
0BC4E:  CLRF   x90
0BC50:  CLRF   x91
0BC52:  CLRF   x92
0BC54:  CLRF   x93
0BC56:  CLRF   x94
0BC58:  CLRF   x95
0BC5A:  CLRF   x96
0BC5C:  CLRF   x97
0BC5E:  CLRF   x98
0BC60:  CLRF   x99
0BC62:  CLRF   x9A
0BC64:  CLRF   x9B
0BC66:  CLRF   x9C
0BC68:  CLRF   x9D
0BC6A:  CLRF   x9E
0BC6C:  CLRF   x9F
0BC6E:  CLRF   xA0
0BC70:  CLRF   xA1
0BC72:  CLRF   xA2
0BC74:  CLRF   xA3
0BC76:  CLRF   xA4
0BC78:  CLRF   xA5
0BC7A:  CLRF   xA6
0BC7C:  CLRF   xA7
0BC7E:  CLRF   xA8
0BC80:  CLRF   xA9
0BC82:  CLRF   xAA
0BC84:  CLRF   xAB
0BC86:  CLRF   xAC
0BC88:  CLRF   xAD
0BC8A:  CLRF   xAE
0BC8C:  CLRF   xAF
0BC8E:  CLRF   xB0
0BC90:  CLRF   xB1
0BC92:  CLRF   xB2
0BC94:  CLRF   xB3
0BC96:  CLRF   xB4
0BC98:  CLRF   xB5
0BC9A:  CLRF   xB6
0BC9C:  CLRF   xB7
0BC9E:  CLRF   xB8
0BCA0:  CLRF   xB9
0BCA2:  CLRF   xBA
0BCA4:  CLRF   xBB
0BCA6:  CLRF   xBC
0BCA8:  CLRF   xBD
0BCAA:  CLRF   xBE
0BCAC:  CLRF   xBF
0BCAE:  CLRF   xC0
0BCB0:  CLRF   xC1
0BCB2:  CLRF   xC2
0BCB4:  CLRF   xC3
0BCB6:  CLRF   xC4
0BCB8:  CLRF   xC5
0BCBA:  CLRF   xC6
0BCBC:  CLRF   xC7
0BCBE:  CLRF   xC8
0BCC0:  CLRF   xC9
0BCC2:  CLRF   xCA
0BCC4:  CLRF   xCB
0BCC6:  CLRF   xCC
0BCC8:  CLRF   xCD
0BCCA:  CLRF   xCE
0BCCC:  CLRF   xCF
0BCCE:  CLRF   xD0
0BCD0:  CLRF   xD1
0BCD2:  CLRF   xD2
0BCD4:  CLRF   xD3
0BCD6:  CLRF   xD4
0BCD8:  CLRF   xD5
0BCDA:  CLRF   xD6
0BCDC:  CLRF   xD7
0BCDE:  CLRF   xD8
0BCE0:  CLRF   xD9
0BCE2:  CLRF   xDA
0BCE4:  CLRF   xDB
0BCE6:  CLRF   xDC
0BCE8:  CLRF   xDD
0BCEA:  CLRF   xDE
0BCEC:  CLRF   xDF
0BCEE:  CLRF   xE0
0BCF0:  CLRF   xE1
0BCF2:  CLRF   xE2
0BCF4:  CLRF   xE3
0BCF6:  CLRF   xE4
0BCF8:  CLRF   xE5
0BCFA:  CLRF   xE6
0BCFC:  CLRF   xE7
0BCFE:  CLRF   xE8
0BD00:  CLRF   xE9
0BD02:  CLRF   xEA
0BD04:  CLRF   xEB
0BD06:  CLRF   xEC
0BD08:  CLRF   xED
0BD0A:  CLRF   xEE
0BD0C:  CLRF   xEF
0BD0E:  CLRF   xF0
0BD10:  CLRF   xF1
0BD12:  CLRF   xF2
0BD14:  CLRF   xF3
0BD16:  CLRF   xF4
0BD18:  CLRF   xF5
0BD1A:  CLRF   xF6
0BD1C:  CLRF   xF7
0BD1E:  CLRF   xF8
0BD20:  CLRF   xF9
0BD22:  CLRF   xFA
0BD24:  CLRF   xFB
0BD26:  CLRF   xFC
0BD28:  CLRF   xFD
0BD2A:  CLRF   xFE
0BD2C:  CLRF   xFF
0BD2E:  MOVLB  7
0BD30:  CLRF   x00
0BD32:  CLRF   x01
0BD34:  CLRF   x02
0BD36:  CLRF   x03
0BD38:  CLRF   x04
0BD3A:  CLRF   x05
0BD3C:  CLRF   x06
0BD3E:  CLRF   x07
0BD40:  CLRF   x08
0BD42:  CLRF   x09
0BD44:  CLRF   x0A
0BD46:  CLRF   x0B
0BD48:  CLRF   x0C
0BD4A:  CLRF   x0D
0BD4C:  CLRF   x0E
0BD4E:  CLRF   x0F
0BD50:  CLRF   x10
0BD52:  CLRF   x11
0BD54:  CLRF   x12
0BD56:  CLRF   x13
0BD58:  CLRF   x14
0BD5A:  CLRF   x15
0BD5C:  CLRF   x16
0BD5E:  CLRF   x17
0BD60:  CLRF   x18
0BD62:  CLRF   x19
0BD64:  CLRF   x1A
0BD66:  CLRF   x1B
0BD68:  CLRF   x1C
0BD6A:  CLRF   x1D
0BD6C:  CLRF   x1E
0BD6E:  CLRF   x1F
0BD70:  CLRF   x20
0BD72:  CLRF   x21
0BD74:  CLRF   x22
0BD76:  CLRF   x23
0BD78:  CLRF   x24
0BD7A:  CLRF   x25
0BD7C:  CLRF   x26
0BD7E:  CLRF   x27
0BD80:  CLRF   x28
0BD82:  CLRF   x29
0BD84:  CLRF   x2A
0BD86:  CLRF   x2B
0BD88:  CLRF   x2C
0BD8A:  CLRF   x2D
0BD8C:  CLRF   x2E
0BD8E:  CLRF   x2F
0BD90:  CLRF   x30
0BD92:  CLRF   x31
0BD94:  CLRF   x32
0BD96:  CLRF   x33
0BD98:  CLRF   x34
0BD9A:  CLRF   x35
0BD9C:  CLRF   x36
0BD9E:  CLRF   x37
0BDA0:  CLRF   x38
0BDA2:  CLRF   x39
0BDA4:  CLRF   x3A
0BDA6:  CLRF   x3B
0BDA8:  CLRF   x3C
0BDAA:  CLRF   x3D
0BDAC:  CLRF   x3E
0BDAE:  CLRF   x3F
0BDB0:  CLRF   x40
0BDB2:  CLRF   x41
0BDB4:  CLRF   x42
0BDB6:  CLRF   x43
0BDB8:  CLRF   x44
0BDBA:  CLRF   x45
0BDBC:  CLRF   x46
0BDBE:  CLRF   x47
0BDC0:  CLRF   x48
0BDC2:  CLRF   x49
0BDC4:  CLRF   x4A
0BDC6:  CLRF   x4B
0BDC8:  CLRF   x4C
0BDCA:  CLRF   x4D
0BDCC:  CLRF   x4E
0BDCE:  CLRF   x4F
0BDD0:  CLRF   x50
0BDD2:  CLRF   x51
0BDD4:  CLRF   x52
0BDD6:  CLRF   x53
0BDD8:  CLRF   x54
0BDDA:  CLRF   x55
0BDDC:  CLRF   x56
0BDDE:  CLRF   x57
0BDE0:  CLRF   x58
0BDE2:  CLRF   x59
0BDE4:  CLRF   x5A
0BDE6:  CLRF   x5B
0BDE8:  CLRF   x5C
0BDEA:  CLRF   x5D
0BDEC:  CLRF   x5E
0BDEE:  CLRF   x5F
0BDF0:  CLRF   x60
0BDF2:  CLRF   x61
0BDF4:  CLRF   x62
0BDF6:  CLRF   x63
0BDF8:  CLRF   x64
0BDFA:  CLRF   x65
0BDFC:  CLRF   x66
0BDFE:  CLRF   x67
0BE00:  CLRF   x68
0BE02:  CLRF   x69
0BE04:  CLRF   x6A
0BE06:  CLRF   x6B
0BE08:  CLRF   x6C
0BE0A:  CLRF   x6D
0BE0C:  CLRF   x6E
0BE0E:  CLRF   x6F
0BE10:  CLRF   x70
0BE12:  CLRF   x71
0BE14:  CLRF   x72
0BE16:  CLRF   x73
0BE18:  CLRF   x74
0BE1A:  CLRF   x75
0BE1C:  CLRF   x76
0BE1E:  CLRF   x77
0BE20:  CLRF   x78
0BE22:  CLRF   x79
0BE24:  CLRF   x7A
0BE26:  CLRF   x7B
0BE28:  CLRF   x7C
0BE2A:  CLRF   x7D
0BE2C:  CLRF   x7E
0BE2E:  CLRF   x7F
0BE30:  CLRF   x80
0BE32:  CLRF   x81
0BE34:  CLRF   x82
0BE36:  CLRF   x83
0BE38:  CLRF   x84
0BE3A:  CLRF   x85
0BE3C:  CLRF   x86
0BE3E:  CLRF   x87
0BE40:  CLRF   x88
0BE42:  CLRF   x89
0BE44:  CLRF   x8A
0BE46:  CLRF   x8B
0BE48:  CLRF   x8C
0BE4A:  CLRF   x8D
0BE4C:  CLRF   x8E
0BE4E:  CLRF   x8F
0BE50:  CLRF   x90
0BE52:  CLRF   x91
0BE54:  CLRF   x92
0BE56:  CLRF   x93
0BE58:  CLRF   x94
0BE5A:  CLRF   x95
0BE5C:  CLRF   x96
0BE5E:  CLRF   x97
0BE60:  CLRF   x98
0BE62:  CLRF   x99
0BE64:  CLRF   x9A
0BE66:  CLRF   x9B
0BE68:  CLRF   x9C
0BE6A:  CLRF   x9D
0BE6C:  CLRF   x9E
0BE6E:  CLRF   x9F
0BE70:  CLRF   xA0
0BE72:  CLRF   xA1
0BE74:  CLRF   xA2
0BE76:  CLRF   xA3
0BE78:  CLRF   xA4
0BE7A:  CLRF   xA5
0BE7C:  CLRF   xA6
0BE7E:  CLRF   xA7
0BE80:  CLRF   xA8
0BE82:  CLRF   xA9
0BE84:  CLRF   xAA
0BE86:  CLRF   xAB
0BE88:  CLRF   xAC
0BE8A:  CLRF   xAD
0BE8C:  CLRF   xAE
0BE8E:  CLRF   xAF
0BE90:  CLRF   xB0
0BE92:  CLRF   xB1
0BE94:  CLRF   xB2
0BE96:  CLRF   xB3
0BE98:  CLRF   xB4
0BE9A:  CLRF   xB5
0BE9C:  CLRF   xB6
0BE9E:  CLRF   xB7
0BEA0:  CLRF   xB8
0BEA2:  CLRF   xB9
0BEA4:  CLRF   xBA
0BEA6:  CLRF   xBB
0BEA8:  CLRF   xBC
0BEAA:  CLRF   xBD
0BEAC:  CLRF   xBE
0BEAE:  CLRF   xBF
0BEB0:  CLRF   xC0
0BEB2:  CLRF   xC1
0BEB4:  CLRF   xC2
0BEB6:  CLRF   xC3
0BEB8:  CLRF   xC4
0BEBA:  CLRF   xC5
0BEBC:  CLRF   xC6
0BEBE:  CLRF   xC7
0BEC0:  CLRF   xC8
0BEC2:  CLRF   xC9
0BEC4:  CLRF   xCA
0BEC6:  CLRF   xCB
0BEC8:  CLRF   xCC
0BECA:  CLRF   xCD
0BECC:  CLRF   xCE
0BECE:  CLRF   xCF
0BED0:  CLRF   xD0
0BED2:  CLRF   xD1
0BED4:  CLRF   xD2
0BED6:  CLRF   xD3
0BED8:  CLRF   xD4
0BEDA:  CLRF   xD5
0BEDC:  CLRF   xD6
0BEDE:  CLRF   xD7
0BEE0:  CLRF   xD8
0BEE2:  CLRF   xD9
0BEE4:  CLRF   xDA
0BEE6:  CLRF   xDB
0BEE8:  CLRF   xDC
0BEEA:  CLRF   xDD
0BEEC:  CLRF   xDE
0BEEE:  CLRF   xDF
0BEF0:  CLRF   xE0
0BEF2:  CLRF   xE1
0BEF4:  CLRF   xE2
0BEF6:  CLRF   xE3
0BEF8:  CLRF   xE4
0BEFA:  CLRF   xE5
0BEFC:  CLRF   xE6
0BEFE:  CLRF   xE7
0BF00:  CLRF   xE8
0BF02:  CLRF   xE9
0BF04:  CLRF   xEA
0BF06:  CLRF   xEB
0BF08:  CLRF   xEC
0BF0A:  CLRF   xED
0BF0C:  CLRF   xEE
0BF0E:  CLRF   xEF
0BF10:  CLRF   xF0
0BF12:  CLRF   xF1
0BF14:  CLRF   xF2
0BF16:  CLRF   xF3
0BF18:  CLRF   xF4
0BF1A:  CLRF   xF5
0BF1C:  CLRF   xF6
0BF1E:  CLRF   xF7
0BF20:  CLRF   xF8
0BF22:  CLRF   xF9
0BF24:  CLRF   xFA
0BF26:  CLRF   xFB
0BF28:  CLRF   xFC
0BF2A:  CLRF   xFD
0BF2C:  CLRF   xFE
0BF2E:  CLRF   xFF
0BF30:  MOVLB  8
0BF32:  CLRF   x00
0BF34:  CLRF   x01
0BF36:  CLRF   x02
0BF38:  CLRF   x03
0BF3A:  CLRF   x04
0BF3C:  CLRF   x05
0BF3E:  CLRF   x06
0BF40:  CLRF   x07
0BF42:  CLRF   x08
0BF44:  CLRF   x09
0BF46:  CLRF   x0A
0BF48:  CLRF   x0B
0BF4A:  CLRF   x0C
0BF4C:  CLRF   x0D
0BF4E:  CLRF   x0E
0BF50:  CLRF   x0F
0BF52:  CLRF   x10
0BF54:  CLRF   x11
0BF56:  CLRF   x12
0BF58:  CLRF   x13
0BF5A:  CLRF   x14
0BF5C:  CLRF   x15
0BF5E:  CLRF   x16
0BF60:  CLRF   x17
0BF62:  CLRF   x18
0BF64:  CLRF   x19
0BF66:  CLRF   x1A
0BF68:  CLRF   x1B
0BF6A:  CLRF   x1C
0BF6C:  CLRF   x1D
0BF6E:  CLRF   x1E
0BF70:  CLRF   x1F
0BF72:  CLRF   x20
0BF74:  CLRF   x21
0BF76:  CLRF   x22
0BF78:  CLRF   x23
0BF7A:  CLRF   x24
0BF7C:  CLRF   x25
0BF7E:  CLRF   x26
0BF80:  CLRF   x27
0BF82:  CLRF   x28
0BF84:  CLRF   x29
0BF86:  CLRF   x2A
0BF88:  CLRF   x2B
0BF8A:  CLRF   x2C
0BF8C:  CLRF   x2D
0BF8E:  CLRF   x2E
0BF90:  CLRF   x2F
0BF92:  CLRF   x30
0BF94:  CLRF   x31
0BF96:  CLRF   x32
0BF98:  CLRF   x33
0BF9A:  CLRF   x34
0BF9C:  CLRF   x35
0BF9E:  CLRF   x36
0BFA0:  CLRF   x37
0BFA2:  CLRF   x38
0BFA4:  CLRF   x39
0BFA6:  CLRF   x3A
0BFA8:  CLRF   x3B
0BFAA:  CLRF   x3C
0BFAC:  CLRF   x3D
0BFAE:  CLRF   x3E
0BFB0:  CLRF   x3F
0BFB2:  CLRF   x40
0BFB4:  CLRF   x41
0BFB6:  CLRF   x42
0BFB8:  CLRF   x43
0BFBA:  CLRF   x44
0BFBC:  CLRF   x45
0BFBE:  CLRF   x46
0BFC0:  CLRF   x47
0BFC2:  CLRF   x48
0BFC4:  CLRF   x49
0BFC6:  CLRF   x4A
0BFC8:  CLRF   x4B
0BFCA:  CLRF   x4C
0BFCC:  CLRF   x4D
0BFCE:  CLRF   x4E
0BFD0:  CLRF   x4F
0BFD2:  CLRF   x50
0BFD4:  CLRF   x51
0BFD6:  CLRF   x52
0BFD8:  CLRF   x53
0BFDA:  CLRF   x54
0BFDC:  CLRF   x55
0BFDE:  CLRF   x56
0BFE0:  CLRF   x57
0BFE2:  CLRF   x58
0BFE4:  CLRF   x59
0BFE6:  CLRF   x5A
0BFE8:  CLRF   x5B
0BFEA:  CLRF   x5C
0BFEC:  CLRF   x5D
0BFEE:  CLRF   x5E
0BFF0:  CLRF   x5F
0BFF2:  CLRF   x60
0BFF4:  CLRF   x61
0BFF6:  CLRF   x62
0BFF8:  CLRF   x63
0BFFA:  CLRF   x64
0BFFC:  CLRF   x65
0BFFE:  CLRF   x66
0C000:  CLRF   x67
0C002:  CLRF   x68
0C004:  CLRF   x69
0C006:  CLRF   x6A
0C008:  CLRF   x6B
0C00A:  CLRF   x6C
0C00C:  CLRF   x6D
0C00E:  CLRF   x6E
0C010:  CLRF   x6F
0C012:  CLRF   x70
0C014:  CLRF   x71
0C016:  CLRF   x72
0C018:  CLRF   x73
0C01A:  CLRF   x74
0C01C:  CLRF   x75
0C01E:  CLRF   x76
0C020:  CLRF   x77
0C022:  CLRF   x78
0C024:  CLRF   x79
0C026:  CLRF   x7A
0C028:  CLRF   x7B
0C02A:  CLRF   x7C
0C02C:  CLRF   x7D
0C02E:  CLRF   x7E
0C030:  CLRF   x7F
0C032:  CLRF   x80
0C034:  CLRF   x81
0C036:  CLRF   x82
0C038:  CLRF   x83
0C03A:  CLRF   x84
0C03C:  CLRF   x85
0C03E:  CLRF   x86
0C040:  CLRF   x87
0C042:  CLRF   x88
0C044:  CLRF   x89
0C046:  CLRF   x8A
0C048:  CLRF   x8B
0C04A:  CLRF   x8C
0C04C:  CLRF   x8D
0C04E:  CLRF   x8E
0C050:  CLRF   x8F
0C052:  CLRF   x90
0C054:  CLRF   x91
0C056:  CLRF   x92
0C058:  CLRF   x93
0C05A:  CLRF   x94
0C05C:  CLRF   x95
0C05E:  CLRF   x96
0C060:  CLRF   x97
0C062:  CLRF   x98
0C064:  CLRF   x99
0C066:  CLRF   x9A
0C068:  CLRF   x9B
0C06A:  CLRF   x9C
0C06C:  CLRF   x9D
0C06E:  CLRF   x9E
0C070:  CLRF   x9F
0C072:  CLRF   xA0
0C074:  CLRF   xA1
0C076:  CLRF   xA2
0C078:  CLRF   xA3
0C07A:  CLRF   xA4
0C07C:  CLRF   xA5
0C07E:  CLRF   xA6
0C080:  CLRF   xA7
0C082:  CLRF   xA8
0C084:  CLRF   xA9
0C086:  CLRF   xAA
0C088:  CLRF   xAB
0C08A:  CLRF   xAC
0C08C:  CLRF   xAD
0C08E:  CLRF   xAE
0C090:  CLRF   xAF
0C092:  CLRF   xB0
0C094:  CLRF   xB1
0C096:  CLRF   xB2
0C098:  CLRF   xB3
0C09A:  CLRF   xB4
0C09C:  CLRF   xB5
0C09E:  CLRF   xB6
0C0A0:  CLRF   xB7
0C0A2:  CLRF   xB8
0C0A4:  CLRF   xB9
0C0A6:  CLRF   xBA
0C0A8:  CLRF   xBB
0C0AA:  CLRF   xBC
0C0AC:  CLRF   xBD
0C0AE:  CLRF   xBE
0C0B0:  CLRF   xBF
0C0B2:  CLRF   xC0
0C0B4:  CLRF   xC1
0C0B6:  CLRF   xC2
0C0B8:  CLRF   xC3
0C0BA:  CLRF   xC4
0C0BC:  CLRF   xC5
0C0BE:  CLRF   xC6
0C0C0:  CLRF   xC7
0C0C2:  CLRF   xC8
0C0C4:  CLRF   xC9
0C0C6:  CLRF   xCA
0C0C8:  CLRF   xCB
0C0CA:  CLRF   xCC
0C0CC:  CLRF   xCD
0C0CE:  CLRF   xCE
0C0D0:  CLRF   xCF
0C0D2:  CLRF   xD0
0C0D4:  CLRF   xD1
0C0D6:  CLRF   xD2
0C0D8:  CLRF   xD3
0C0DA:  CLRF   xD4
0C0DC:  CLRF   xD5
0C0DE:  CLRF   xD6
0C0E0:  CLRF   xD7
0C0E2:  CLRF   xD8
0C0E4:  CLRF   xD9
0C0E6:  CLRF   xDA
0C0E8:  CLRF   xDB
0C0EA:  CLRF   xDC
0C0EC:  CLRF   xDD
0C0EE:  CLRF   xDE
0C0F0:  CLRF   xDF
0C0F2:  CLRF   xE0
0C0F4:  CLRF   xE1
0C0F6:  CLRF   xE2
0C0F8:  CLRF   xE3
0C0FA:  CLRF   xE4
0C0FC:  CLRF   xE5
0C0FE:  CLRF   xE6
0C100:  CLRF   xE7
0C102:  CLRF   xE8
0C104:  CLRF   xE9
0C106:  CLRF   xEA
0C108:  CLRF   xEB
0C10A:  CLRF   xEC
0C10C:  CLRF   xED
0C10E:  CLRF   xEE
0C110:  CLRF   xEF
0C112:  CLRF   xF0
0C114:  CLRF   xF1
0C116:  CLRF   xF2
0C118:  CLRF   xF3
0C11A:  CLRF   xF4
0C11C:  CLRF   xF5
0C11E:  CLRF   xF6
0C120:  CLRF   xF7
0C122:  CLRF   xF8
0C124:  CLRF   xF9
0C126:  CLRF   xFA
0C128:  CLRF   xFB
0C12A:  CLRF   xFC
0C12C:  CLRF   xFD
0C12E:  CLRF   xFE
0C130:  CLRF   xFF
0C132:  MOVLB  9
0C134:  CLRF   x00
0C136:  CLRF   x01
0C138:  CLRF   x02
0C13A:  CLRF   x03
0C13C:  CLRF   x04
0C13E:  CLRF   x05
0C140:  CLRF   x06
0C142:  CLRF   x07
0C144:  CLRF   x08
0C146:  CLRF   x09
0C148:  CLRF   x0A
0C14A:  CLRF   x0B
0C14C:  CLRF   x0C
0C14E:  CLRF   x0D
0C150:  CLRF   x0E
0C152:  CLRF   x0F
0C154:  CLRF   x10
0C156:  CLRF   x11
0C158:  CLRF   x12
0C15A:  CLRF   x13
0C15C:  CLRF   x14
0C15E:  CLRF   x15
0C160:  CLRF   x16
0C162:  CLRF   x17
0C164:  CLRF   x18
0C166:  CLRF   x19
0C168:  CLRF   x1A
0C16A:  CLRF   x1B
0C16C:  CLRF   x1C
0C16E:  CLRF   x1D
0C170:  CLRF   x1E
0C172:  CLRF   x1F
0C174:  CLRF   x20
0C176:  CLRF   x21
0C178:  CLRF   x22
0C17A:  CLRF   x23
0C17C:  CLRF   x24
0C17E:  CLRF   x25
0C180:  CLRF   x26
0C182:  CLRF   x27
0C184:  CLRF   x28
0C186:  CLRF   x29
0C188:  CLRF   x2A
0C18A:  CLRF   x2B
0C18C:  CLRF   x2C
0C18E:  CLRF   x2D
0C190:  CLRF   x2E
0C192:  CLRF   x2F
0C194:  CLRF   x30
0C196:  CLRF   x31
0C198:  CLRF   x32
0C19A:  CLRF   x33
0C19C:  CLRF   x34
0C19E:  CLRF   x35
0C1A0:  CLRF   x36
0C1A2:  CLRF   x37
0C1A4:  CLRF   x38
0C1A6:  CLRF   x39
0C1A8:  CLRF   x3A
0C1AA:  CLRF   x3B
0C1AC:  CLRF   x3C
0C1AE:  CLRF   x3D
0C1B0:  CLRF   x3E
0C1B2:  CLRF   x3F
0C1B4:  CLRF   x40
0C1B6:  CLRF   x41
0C1B8:  CLRF   x42
0C1BA:  CLRF   x43
0C1BC:  CLRF   x44
0C1BE:  CLRF   x45
0C1C0:  CLRF   x46
0C1C2:  CLRF   x47
0C1C4:  CLRF   x48
0C1C6:  CLRF   x49
0C1C8:  CLRF   x4A
0C1CA:  CLRF   x4B
0C1CC:  CLRF   x4C
0C1CE:  CLRF   x4D
0C1D0:  CLRF   x4E
0C1D2:  CLRF   x4F
0C1D4:  CLRF   x50
0C1D6:  CLRF   x51
0C1D8:  CLRF   x52
0C1DA:  CLRF   x53
0C1DC:  CLRF   x54
0C1DE:  CLRF   x55
0C1E0:  CLRF   x56
0C1E2:  CLRF   x57
0C1E4:  CLRF   x58
0C1E6:  CLRF   x59
0C1E8:  CLRF   x5A
0C1EA:  CLRF   x5B
0C1EC:  CLRF   x5C
0C1EE:  CLRF   x5D
0C1F0:  CLRF   x5E
0C1F2:  CLRF   x5F
0C1F4:  CLRF   x60
0C1F6:  CLRF   x61
0C1F8:  CLRF   x62
0C1FA:  CLRF   x63
0C1FC:  CLRF   x64
0C1FE:  CLRF   x65
0C200:  CLRF   x66
0C202:  CLRF   x67
0C204:  CLRF   x68
0C206:  CLRF   x69
0C208:  CLRF   x6A
0C20A:  CLRF   x6B
0C20C:  CLRF   x6C
0C20E:  CLRF   x6D
0C210:  CLRF   x6E
0C212:  CLRF   x6F
0C214:  CLRF   x70
0C216:  CLRF   x71
0C218:  CLRF   x72
0C21A:  CLRF   x73
0C21C:  CLRF   x74
0C21E:  CLRF   x75
0C220:  CLRF   x76
0C222:  CLRF   x77
0C224:  CLRF   x78
0C226:  CLRF   x79
0C228:  CLRF   x7A
0C22A:  CLRF   x7B
0C22C:  CLRF   x7C
0C22E:  CLRF   x7D
0C230:  CLRF   x7E
0C232:  CLRF   x7F
0C234:  CLRF   x80
0C236:  CLRF   x81
0C238:  CLRF   x82
0C23A:  CLRF   x83
0C23C:  CLRF   x84
0C23E:  CLRF   x85
0C240:  CLRF   x86
0C242:  CLRF   x87
0C244:  CLRF   x88
0C246:  CLRF   x89
0C248:  CLRF   x8A
0C24A:  CLRF   x8B
0C24C:  CLRF   x8C
0C24E:  CLRF   x8D
0C250:  CLRF   x8E
0C252:  CLRF   x8F
0C254:  CLRF   x90
0C256:  CLRF   x91
0C258:  CLRF   x92
0C25A:  CLRF   x93
0C25C:  CLRF   x94
0C25E:  CLRF   x95
0C260:  CLRF   x96
0C262:  CLRF   x97
0C264:  CLRF   x98
0C266:  CLRF   x99
0C268:  CLRF   x9A
0C26A:  CLRF   x9B
0C26C:  CLRF   x9C
0C26E:  CLRF   x9D
0C270:  CLRF   x9E
0C272:  CLRF   x9F
0C274:  CLRF   xA0
0C276:  CLRF   xA1
0C278:  CLRF   xA2
0C27A:  CLRF   xA3
0C27C:  CLRF   xA4
0C27E:  CLRF   xA5
0C280:  CLRF   xA6
0C282:  CLRF   xA7
0C284:  CLRF   xA8
0C286:  CLRF   xA9
0C288:  CLRF   xAA
0C28A:  CLRF   xAB
0C28C:  CLRF   xAC
0C28E:  CLRF   xAD
0C290:  CLRF   xAE
0C292:  CLRF   xAF
0C294:  CLRF   xB0
0C296:  CLRF   xB1
0C298:  CLRF   xB2
0C29A:  CLRF   xB3
0C29C:  CLRF   xB4
0C29E:  CLRF   xB5
0C2A0:  CLRF   xB6
0C2A2:  CLRF   xB7
0C2A4:  CLRF   xB8
0C2A6:  CLRF   xB9
0C2A8:  CLRF   xBA
0C2AA:  CLRF   xBB
0C2AC:  CLRF   xBC
0C2AE:  CLRF   xBD
0C2B0:  CLRF   xBE
0C2B2:  CLRF   xBF
0C2B4:  CLRF   xC0
0C2B6:  CLRF   xC1
0C2B8:  CLRF   xC2
0C2BA:  CLRF   xC3
0C2BC:  CLRF   xC4
0C2BE:  CLRF   xC5
0C2C0:  CLRF   xC6
0C2C2:  CLRF   xC7
0C2C4:  CLRF   xC8
....................     port2.port_num = 2; 
0C2C6:  MOVLW  02
0C2C8:  MOVLB  5
0C2CA:  MOVWF  xC9
....................     port2.sweep_step = 0;
0C2CC:  CLRF   xCB
0C2CE:  CLRF   xCA
....................     port2.active = 1;
0C2D0:  MOVLB  9
0C2D2:  BSF    xC8.0
.................... 
....................     int16 count = 1;
....................     iv_env_t measured_data = create_meas_data();
0C2D4:  CLRF   xCA
0C2D6:  MOVLW  01
0C2D8:  MOVWF  xC9
0C2DA:  MOVLB  0
0C2DC:  CALL   91EA
0C2E0:  MOVFF  02,03
0C2E4:  MOVF   01,W
0C2E6:  MOVWF  FE1
0C2E8:  MOVFF  03,FE2
0C2EC:  MOVLW  09
0C2EE:  MOVWF  FEA
0C2F0:  MOVLW  CB
0C2F2:  MOVWF  FE9
0C2F4:  MOVLW  0C
0C2F6:  MOVWF  01
0C2F8:  MOVFF  FE6,FEE
0C2FC:  DECFSZ 01,F
0C2FE:  GOTO   C2F8
....................     while (port1.active || port2.active)
0C302:  MOVLB  5
0C304:  BTFSS  xC8.0
0C306:  BRA    C30E
0C308:  MOVLB  0
0C30A:  GOTO   C31E
0C30E:  MOVLB  0
0C310:  MOVLB  9
0C312:  BTFSC  xC8.0
0C314:  BRA    C31C
0C316:  MOVLB  0
0C318:  GOTO   C5FA
0C31C:  MOVLB  0
....................     {
....................         mcp4901_1_write(count);
0C31E:  MOVFF  9CA,9DD
0C322:  MOVFF  9C9,9DC
0C326:  CALL   2872
....................         mcp4901_2_write(count);
0C32A:  MOVFF  9CA,9DD
0C32E:  MOVFF  9C9,9DC
0C332:  CALL   28B0
....................         delay_us(10); 
0C336:  MOVLW  0D
0C338:  MOVWF  00
0C33A:  DECFSZ 00,F
0C33C:  BRA    C33A
....................         if (port1.active) {
0C33E:  MOVLB  5
0C340:  BTFSC  xC8.0
0C342:  BRA    C34A
0C344:  MOVLB  0
0C346:  GOTO   C49A
0C34A:  MOVLB  0
....................             unsigned int32 ans = ad7490_read(ADC_CIGS1_CURR);
0C34C:  MOVLW  01
0C34E:  MOVLB  9
0C350:  MOVWF  xEE
0C352:  MOVLB  0
0C354:  CALL   24C2
0C358:  MOVLB  9
0C35A:  CLRF   xDA
0C35C:  CLRF   xD9
0C35E:  MOVFF  02,9D8
0C362:  MOVFF  01,9D7
0C366:  MOVLB  0
....................             ans += ad7490_read(ADC_CIGS1_CURR);
0C368:  MOVLW  01
0C36A:  MOVLB  9
0C36C:  MOVWF  xEE
0C36E:  MOVLB  0
0C370:  CALL   24C2
0C374:  MOVFF  02,03
0C378:  MOVF   01,W
0C37A:  MOVLB  9
0C37C:  ADDWF  xD7,F
0C37E:  MOVF   03,W
0C380:  ADDWFC xD8,F
0C382:  MOVLW  00
0C384:  ADDWFC xD9,F
0C386:  MOVLW  00
0C388:  ADDWFC xDA,F
....................             ans = ans/2;
0C38A:  BCF    FD8.0
0C38C:  RRCF   xDA,F
0C38E:  RRCF   xD9,F
0C390:  RRCF   xD8,F
0C392:  RRCF   xD7,F
....................             port1.data_buffer[count].voltage = ad7490_read(ADC_CIGS1_AMP);
0C394:  RLCF   xC9,W
0C396:  MOVWF  02
0C398:  RLCF   xCA,W
0C39A:  MOVWF  03
0C39C:  RLCF   02,F
0C39E:  RLCF   03,F
0C3A0:  MOVLW  FC
0C3A2:  ANDWF  02,F
0C3A4:  MOVF   02,W
0C3A6:  ADDLW  CC
0C3A8:  MOVWF  01
0C3AA:  MOVLW  01
0C3AC:  ADDWFC 03,F
0C3AE:  MOVF   01,W
0C3B0:  MOVWF  xDE
0C3B2:  MOVFF  03,9DF
0C3B6:  MOVLW  02
0C3B8:  MOVWF  xEE
0C3BA:  MOVLB  0
0C3BC:  CALL   24C2
0C3C0:  MOVFF  9DF,FEA
0C3C4:  MOVFF  9DE,FE9
0C3C8:  MOVFF  02,FEC
0C3CC:  MOVF   FED,F
0C3CE:  MOVFF  01,FEF
....................             port1.data_buffer[count].current = ans;
0C3D2:  MOVLB  9
0C3D4:  RLCF   xC9,W
0C3D6:  MOVWF  02
0C3D8:  RLCF   xCA,W
0C3DA:  MOVWF  03
0C3DC:  RLCF   02,F
0C3DE:  RLCF   03,F
0C3E0:  MOVLW  FC
0C3E2:  ANDWF  02,F
0C3E4:  MOVF   02,W
0C3E6:  ADDLW  03
0C3E8:  MOVWF  xDC
0C3EA:  MOVLW  00
0C3EC:  ADDWFC 03,W
0C3EE:  MOVWF  xDD
0C3F0:  MOVLW  02
0C3F2:  ADDWF  xDC,W
0C3F4:  MOVWF  01
0C3F6:  MOVLW  00
0C3F8:  ADDWFC xDD,W
0C3FA:  MOVWF  03
0C3FC:  MOVF   01,W
0C3FE:  ADDLW  C9
0C400:  MOVWF  FE9
0C402:  MOVLW  01
0C404:  ADDWFC 03,W
0C406:  MOVWF  FEA
0C408:  MOVFF  9D7,FEF
0C40C:  MOVFF  9D8,FEC
0C410:  MOVF   FED,F
....................             port1.sweep_step = count + 1; 
0C412:  MOVLW  01
0C414:  ADDWF  xC9,W
0C416:  MOVLB  1
0C418:  MOVWF  xCA
0C41A:  MOVLW  00
0C41C:  MOVLB  9
0C41E:  ADDWFC xCA,W
0C420:  MOVLB  1
0C422:  MOVWF  xCB
....................             if (port1.data_buffer[count].current < curr_limit) {
0C424:  MOVLB  9
0C426:  RLCF   xC9,W
0C428:  MOVWF  02
0C42A:  RLCF   xCA,W
0C42C:  MOVWF  03
0C42E:  RLCF   02,F
0C430:  RLCF   03,F
0C432:  MOVLW  FC
0C434:  ANDWF  02,F
0C436:  MOVF   02,W
0C438:  ADDLW  03
0C43A:  MOVWF  xDC
0C43C:  MOVLW  00
0C43E:  ADDWFC 03,W
0C440:  MOVWF  xDD
0C442:  MOVLW  02
0C444:  ADDWF  xDC,W
0C446:  MOVWF  01
0C448:  MOVLW  00
0C44A:  ADDWFC xDD,W
0C44C:  MOVWF  03
0C44E:  MOVF   01,W
0C450:  ADDLW  C9
0C452:  MOVWF  FE9
0C454:  MOVLW  01
0C456:  ADDWFC 03,W
0C458:  MOVWF  FEA
0C45A:  MOVFF  FEC,9DD
0C45E:  MOVF   FED,F
0C460:  MOVFF  FEF,9DC
0C464:  MOVF   xDD,W
0C466:  MOVLB  1
0C468:  SUBWF  xC8,W
0C46A:  BTFSC  FD8.0
0C46C:  BRA    C474
0C46E:  MOVLB  0
0C470:  GOTO   C49A
0C474:  MOVLB  0
0C476:  BTFSS  FD8.2
0C478:  GOTO   C490
0C47C:  MOVLB  1
0C47E:  MOVF   xC7,W
0C480:  MOVLB  9
0C482:  SUBWF  xDC,W
0C484:  BTFSS  FD8.0
0C486:  BRA    C48E
0C488:  MOVLB  0
0C48A:  GOTO   C49A
0C48E:  MOVLB  0
....................                 port1.active = 0;
0C490:  MOVLB  5
0C492:  BCF    xC8.0
....................                 disconnect_port1();
0C494:  MOVLB  0
0C496:  CALL   926C
....................             }
....................         }
....................         if (port2.active) {
0C49A:  MOVLB  9
0C49C:  BTFSC  xC8.0
0C49E:  BRA    C4A6
0C4A0:  MOVLB  0
0C4A2:  GOTO   C5CA
0C4A6:  MOVLB  0
....................             port2.data_buffer[count].voltage = ad7490_read(ADC_CIGS2_AMP);
0C4A8:  MOVLB  9
0C4AA:  RLCF   xC9,W
0C4AC:  MOVWF  02
0C4AE:  RLCF   xCA,W
0C4B0:  MOVWF  03
0C4B2:  RLCF   02,F
0C4B4:  RLCF   03,F
0C4B6:  MOVLW  FC
0C4B8:  ANDWF  02,F
0C4BA:  MOVF   02,W
0C4BC:  ADDLW  CC
0C4BE:  MOVWF  01
0C4C0:  MOVLW  05
0C4C2:  ADDWFC 03,F
0C4C4:  MOVF   01,W
0C4C6:  MOVWF  xDE
0C4C8:  MOVFF  03,9DF
0C4CC:  MOVLW  06
0C4CE:  MOVWF  xEE
0C4D0:  MOVLB  0
0C4D2:  CALL   24C2
0C4D6:  MOVFF  9DF,FEA
0C4DA:  MOVFF  9DE,FE9
0C4DE:  MOVFF  02,FEC
0C4E2:  MOVF   FED,F
0C4E4:  MOVFF  01,FEF
....................             port2.data_buffer[count].current = ad7490_read(ADC_CIGS2_CURR);
0C4E8:  MOVLB  9
0C4EA:  RLCF   xC9,W
0C4EC:  MOVWF  02
0C4EE:  RLCF   xCA,W
0C4F0:  MOVWF  03
0C4F2:  RLCF   02,F
0C4F4:  RLCF   03,F
0C4F6:  MOVLW  FC
0C4F8:  ANDWF  02,F
0C4FA:  MOVF   02,W
0C4FC:  ADDLW  03
0C4FE:  MOVWF  xDC
0C500:  MOVLW  00
0C502:  ADDWFC 03,W
0C504:  MOVWF  xDD
0C506:  MOVLW  02
0C508:  ADDWF  xDC,W
0C50A:  MOVWF  01
0C50C:  MOVLW  00
0C50E:  ADDWFC xDD,W
0C510:  MOVWF  03
0C512:  MOVF   01,W
0C514:  ADDLW  C9
0C516:  MOVWF  01
0C518:  MOVLW  05
0C51A:  ADDWFC 03,F
0C51C:  MOVF   01,W
0C51E:  MOVWF  xDC
0C520:  MOVFF  03,9DD
0C524:  MOVLW  05
0C526:  MOVWF  xEE
0C528:  MOVLB  0
0C52A:  CALL   24C2
0C52E:  MOVFF  9DD,FEA
0C532:  MOVFF  9DC,FE9
0C536:  MOVFF  02,FEC
0C53A:  MOVF   FED,F
0C53C:  MOVFF  01,FEF
....................             port2.sweep_step = count + 1;
0C540:  MOVLW  01
0C542:  MOVLB  9
0C544:  ADDWF  xC9,W
0C546:  MOVLB  5
0C548:  MOVWF  xCA
0C54A:  MOVLW  00
0C54C:  MOVLB  9
0C54E:  ADDWFC xCA,W
0C550:  MOVLB  5
0C552:  MOVWF  xCB
....................             if (port2.data_buffer[count].current < curr_limit) {
0C554:  MOVLB  9
0C556:  RLCF   xC9,W
0C558:  MOVWF  02
0C55A:  RLCF   xCA,W
0C55C:  MOVWF  03
0C55E:  RLCF   02,F
0C560:  RLCF   03,F
0C562:  MOVLW  FC
0C564:  ANDWF  02,F
0C566:  MOVF   02,W
0C568:  ADDLW  03
0C56A:  MOVWF  xDC
0C56C:  MOVLW  00
0C56E:  ADDWFC 03,W
0C570:  MOVWF  xDD
0C572:  MOVLW  02
0C574:  ADDWF  xDC,W
0C576:  MOVWF  01
0C578:  MOVLW  00
0C57A:  ADDWFC xDD,W
0C57C:  MOVWF  03
0C57E:  MOVF   01,W
0C580:  ADDLW  C9
0C582:  MOVWF  FE9
0C584:  MOVLW  05
0C586:  ADDWFC 03,W
0C588:  MOVWF  FEA
0C58A:  MOVFF  FEC,9DD
0C58E:  MOVF   FED,F
0C590:  MOVFF  FEF,9DC
0C594:  MOVF   xDD,W
0C596:  MOVLB  1
0C598:  SUBWF  xC8,W
0C59A:  BTFSC  FD8.0
0C59C:  BRA    C5A4
0C59E:  MOVLB  0
0C5A0:  GOTO   C5CA
0C5A4:  MOVLB  0
0C5A6:  BTFSS  FD8.2
0C5A8:  GOTO   C5C0
0C5AC:  MOVLB  1
0C5AE:  MOVF   xC7,W
0C5B0:  MOVLB  9
0C5B2:  SUBWF  xDC,W
0C5B4:  BTFSS  FD8.0
0C5B6:  BRA    C5BE
0C5B8:  MOVLB  0
0C5BA:  GOTO   C5CA
0C5BE:  MOVLB  0
....................                 port2.active = 0;
0C5C0:  MOVLB  9
0C5C2:  BCF    xC8.0
....................                 disconnect_port2();
0C5C4:  MOVLB  0
0C5C6:  CALL   9274
....................             } 
....................         }
....................         count++;
0C5CA:  MOVLB  9
0C5CC:  INCF   xC9,F
0C5CE:  BTFSC  FD8.2
0C5D0:  INCF   xCA,F
....................         if (count >= 255) {
0C5D2:  MOVF   xCA,F
0C5D4:  BTFSC  FD8.2
0C5D6:  BRA    C5DE
0C5D8:  MOVLB  0
0C5DA:  GOTO   C5F2
0C5DE:  MOVLB  0
0C5E0:  MOVLB  9
0C5E2:  MOVF   xC9,W
0C5E4:  SUBLW  FE
0C5E6:  BTFSS  FD8.0
0C5E8:  BRA    C5F0
0C5EA:  MOVLB  0
0C5EC:  GOTO   C5F6
0C5F0:  MOVLB  0
....................             // fprintf(PC, "Maximum step count reached: %ld\r\n", count);
....................             break;
0C5F2:  GOTO   C5FA
....................         }
0C5F6:  GOTO   C302
....................     }
.................... 
....................     for (int i = 0; i < count; i++) {
0C5FA:  MOVLB  9
0C5FC:  CLRF   xDB
0C5FE:  MOVLB  0
0C600:  MOVLB  9
0C602:  MOVF   xCA,F
0C604:  BTFSC  FD8.2
0C606:  BRA    C60E
0C608:  MOVLB  0
0C60A:  GOTO   C622
0C60E:  MOVLB  0
0C610:  MOVLB  9
0C612:  MOVF   xC9,W
0C614:  SUBWF  xDB,W
0C616:  BTFSS  FD8.0
0C618:  BRA    C620
0C61A:  MOVLB  0
0C61C:  GOTO   C7D6
0C620:  MOVLB  0
.................... 
....................         fprintf(PC, "%04LX,%04LX,%04LX,%04LX\r\n",
....................             port1.data_buffer[i].voltage, port1.data_buffer[i].current,
....................             port2.data_buffer[i].voltage, port2.data_buffer[i].current);
0C622:  MOVLB  A
0C624:  CLRF   x52
0C626:  MOVFF  9DB,A51
0C62A:  CLRF   x54
0C62C:  MOVLW  04
0C62E:  MOVWF  x53
0C630:  MOVLB  0
0C632:  CALL   8240
0C636:  MOVFF  02,03
0C63A:  MOVF   01,W
0C63C:  ADDLW  CC
0C63E:  MOVWF  FE9
0C640:  MOVLW  01
0C642:  ADDWFC 03,W
0C644:  MOVWF  FEA
0C646:  MOVFF  FEC,9DF
0C64A:  MOVF   FED,F
0C64C:  MOVFF  FEF,9DE
0C650:  MOVLB  A
0C652:  CLRF   x52
0C654:  MOVFF  9DB,A51
0C658:  CLRF   x54
0C65A:  MOVLW  04
0C65C:  MOVWF  x53
0C65E:  MOVLB  0
0C660:  CALL   8240
0C664:  MOVFF  02,03
0C668:  MOVF   01,W
0C66A:  ADDLW  03
0C66C:  MOVLB  9
0C66E:  MOVWF  xE0
0C670:  MOVLW  00
0C672:  ADDWFC 03,W
0C674:  MOVWF  xE1
0C676:  MOVLW  02
0C678:  ADDWF  xE0,W
0C67A:  MOVWF  01
0C67C:  MOVLW  00
0C67E:  ADDWFC xE1,W
0C680:  MOVWF  03
0C682:  MOVF   01,W
0C684:  ADDLW  C9
0C686:  MOVWF  FE9
0C688:  MOVLW  01
0C68A:  ADDWFC 03,W
0C68C:  MOVWF  FEA
0C68E:  MOVFF  FEC,9E1
0C692:  MOVF   FED,F
0C694:  MOVFF  FEF,9E0
0C698:  MOVLB  A
0C69A:  CLRF   x52
0C69C:  MOVFF  9DB,A51
0C6A0:  CLRF   x54
0C6A2:  MOVLW  04
0C6A4:  MOVWF  x53
0C6A6:  MOVLB  0
0C6A8:  CALL   8240
0C6AC:  MOVFF  02,03
0C6B0:  MOVF   01,W
0C6B2:  ADDLW  CC
0C6B4:  MOVWF  FE9
0C6B6:  MOVLW  05
0C6B8:  ADDWFC 03,W
0C6BA:  MOVWF  FEA
0C6BC:  MOVFF  FEC,9E5
0C6C0:  MOVF   FED,F
0C6C2:  MOVFF  FEF,9E4
0C6C6:  MOVLB  A
0C6C8:  CLRF   x52
0C6CA:  MOVFF  9DB,A51
0C6CE:  CLRF   x54
0C6D0:  MOVLW  04
0C6D2:  MOVWF  x53
0C6D4:  MOVLB  0
0C6D6:  CALL   8240
0C6DA:  MOVFF  02,03
0C6DE:  MOVF   01,W
0C6E0:  ADDLW  03
0C6E2:  MOVLB  9
0C6E4:  MOVWF  xE6
0C6E6:  MOVLW  00
0C6E8:  ADDWFC 03,W
0C6EA:  MOVWF  xE7
0C6EC:  MOVLW  02
0C6EE:  ADDWF  xE6,W
0C6F0:  MOVWF  01
0C6F2:  MOVLW  00
0C6F4:  ADDWFC xE7,W
0C6F6:  MOVWF  03
0C6F8:  MOVF   01,W
0C6FA:  ADDLW  C9
0C6FC:  MOVWF  FE9
0C6FE:  MOVLW  05
0C700:  ADDWFC 03,W
0C702:  MOVWF  FEA
0C704:  MOVFF  FEC,9E7
0C708:  MOVF   FED,F
0C70A:  MOVFF  FEF,9E6
0C70E:  MOVFF  9DF,9E8
0C712:  MOVLW  37
0C714:  MOVWF  xE9
0C716:  MOVLB  0
0C718:  CALL   2542
0C71C:  MOVFF  9DE,9E8
0C720:  MOVLW  37
0C722:  MOVLB  9
0C724:  MOVWF  xE9
0C726:  MOVLB  0
0C728:  CALL   2542
0C72C:  MOVLW  2C
0C72E:  BTFSS  FA6.6
0C730:  GOTO   C72E
0C734:  MOVLB  E
0C736:  MOVWF  xF9
0C738:  MOVFF  9E1,9E8
0C73C:  MOVLW  37
0C73E:  MOVLB  9
0C740:  MOVWF  xE9
0C742:  MOVLB  0
0C744:  CALL   2542
0C748:  MOVFF  9E0,9E8
0C74C:  MOVLW  37
0C74E:  MOVLB  9
0C750:  MOVWF  xE9
0C752:  MOVLB  0
0C754:  CALL   2542
0C758:  MOVLW  2C
0C75A:  BTFSS  FA6.6
0C75C:  GOTO   C75A
0C760:  MOVLB  E
0C762:  MOVWF  xF9
0C764:  MOVFF  9E5,9E8
0C768:  MOVLW  37
0C76A:  MOVLB  9
0C76C:  MOVWF  xE9
0C76E:  MOVLB  0
0C770:  CALL   2542
0C774:  MOVFF  9E4,9E8
0C778:  MOVLW  37
0C77A:  MOVLB  9
0C77C:  MOVWF  xE9
0C77E:  MOVLB  0
0C780:  CALL   2542
0C784:  MOVLW  2C
0C786:  BTFSS  FA6.6
0C788:  GOTO   C786
0C78C:  MOVLB  E
0C78E:  MOVWF  xF9
0C790:  MOVFF  9E7,9E8
0C794:  MOVLW  37
0C796:  MOVLB  9
0C798:  MOVWF  xE9
0C79A:  MOVLB  0
0C79C:  CALL   2542
0C7A0:  MOVFF  9E6,9E8
0C7A4:  MOVLW  37
0C7A6:  MOVLB  9
0C7A8:  MOVWF  xE9
0C7AA:  MOVLB  0
0C7AC:  CALL   2542
0C7B0:  MOVLW  0D
0C7B2:  BTFSS  FA6.6
0C7B4:  GOTO   C7B2
0C7B8:  MOVLB  E
0C7BA:  MOVWF  xF9
0C7BC:  MOVLW  0A
0C7BE:  MOVLB  0
0C7C0:  BTFSS  FA6.6
0C7C2:  GOTO   C7C0
0C7C6:  MOVLB  E
0C7C8:  MOVWF  xF9
0C7CA:  MOVLB  0
0C7CC:  MOVLB  9
0C7CE:  INCF   xDB,F
0C7D0:  MOVLB  0
0C7D2:  GOTO   C600
....................     }
0C7D6:  GOTO   CA9A (RETURN)
.................... 
.................... }
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_limit)
*
09B48:  CALL   3C18
09B4C:  MOVFF  03,1E8
09B50:  MOVFF  02,1E7
09B54:  MOVFF  01,1E6
09B58:  MOVFF  00,1E5
.................... {
....................     unsigned int32 start_time_ms = get_current_sec();
....................     fputc('.', PC);
09B5C:  MOVLW  2E
09B5E:  CALL   91DC
....................     // Enable both CIGS ports
....................     connect_port1();
09B62:  CALL   5214
....................     connect_port2();
09B66:  CALL   521C
.................... 
....................     // delay_us(100); // wait for the CIGS to stabilize
.................... 
....................     // Init Port1
....................     sweep_config_t port1 = {0};
09B6A:  MOVLB  1
09B6C:  CLRF   xE9
09B6E:  CLRF   xEA
09B70:  CLRF   xEB
09B72:  CLRF   xEC
09B74:  CLRF   xED
09B76:  CLRF   xEE
09B78:  CLRF   xEF
09B7A:  CLRF   xF0
09B7C:  CLRF   xF1
09B7E:  CLRF   xF2
09B80:  CLRF   xF3
09B82:  CLRF   xF4
09B84:  CLRF   xF5
09B86:  CLRF   xF6
09B88:  CLRF   xF7
09B8A:  CLRF   xF8
09B8C:  CLRF   xF9
09B8E:  CLRF   xFA
09B90:  CLRF   xFB
09B92:  CLRF   xFC
09B94:  CLRF   xFD
09B96:  CLRF   xFE
09B98:  CLRF   xFF
09B9A:  MOVLB  2
09B9C:  CLRF   x00
09B9E:  CLRF   x01
09BA0:  CLRF   x02
09BA2:  CLRF   x03
09BA4:  CLRF   x04
09BA6:  CLRF   x05
09BA8:  CLRF   x06
09BAA:  CLRF   x07
09BAC:  CLRF   x08
09BAE:  CLRF   x09
09BB0:  CLRF   x0A
09BB2:  CLRF   x0B
09BB4:  CLRF   x0C
09BB6:  CLRF   x0D
09BB8:  CLRF   x0E
09BBA:  CLRF   x0F
09BBC:  CLRF   x10
09BBE:  CLRF   x11
09BC0:  CLRF   x12
09BC2:  CLRF   x13
09BC4:  CLRF   x14
09BC6:  CLRF   x15
09BC8:  CLRF   x16
09BCA:  CLRF   x17
09BCC:  CLRF   x18
09BCE:  CLRF   x19
09BD0:  CLRF   x1A
09BD2:  CLRF   x1B
09BD4:  CLRF   x1C
09BD6:  CLRF   x1D
09BD8:  CLRF   x1E
09BDA:  CLRF   x1F
09BDC:  CLRF   x20
09BDE:  CLRF   x21
09BE0:  CLRF   x22
09BE2:  CLRF   x23
09BE4:  CLRF   x24
09BE6:  CLRF   x25
09BE8:  CLRF   x26
09BEA:  CLRF   x27
09BEC:  CLRF   x28
09BEE:  CLRF   x29
09BF0:  CLRF   x2A
09BF2:  CLRF   x2B
09BF4:  CLRF   x2C
09BF6:  CLRF   x2D
09BF8:  CLRF   x2E
09BFA:  CLRF   x2F
09BFC:  CLRF   x30
09BFE:  CLRF   x31
09C00:  CLRF   x32
09C02:  CLRF   x33
09C04:  CLRF   x34
09C06:  CLRF   x35
09C08:  CLRF   x36
09C0A:  CLRF   x37
09C0C:  CLRF   x38
09C0E:  CLRF   x39
09C10:  CLRF   x3A
09C12:  CLRF   x3B
09C14:  CLRF   x3C
09C16:  CLRF   x3D
09C18:  CLRF   x3E
09C1A:  CLRF   x3F
09C1C:  CLRF   x40
09C1E:  CLRF   x41
09C20:  CLRF   x42
09C22:  CLRF   x43
09C24:  CLRF   x44
09C26:  CLRF   x45
09C28:  CLRF   x46
09C2A:  CLRF   x47
09C2C:  CLRF   x48
09C2E:  CLRF   x49
09C30:  CLRF   x4A
09C32:  CLRF   x4B
09C34:  CLRF   x4C
09C36:  CLRF   x4D
09C38:  CLRF   x4E
09C3A:  CLRF   x4F
09C3C:  CLRF   x50
09C3E:  CLRF   x51
09C40:  CLRF   x52
09C42:  CLRF   x53
09C44:  CLRF   x54
09C46:  CLRF   x55
09C48:  CLRF   x56
09C4A:  CLRF   x57
09C4C:  CLRF   x58
09C4E:  CLRF   x59
09C50:  CLRF   x5A
09C52:  CLRF   x5B
09C54:  CLRF   x5C
09C56:  CLRF   x5D
09C58:  CLRF   x5E
09C5A:  CLRF   x5F
09C5C:  CLRF   x60
09C5E:  CLRF   x61
09C60:  CLRF   x62
09C62:  CLRF   x63
09C64:  CLRF   x64
09C66:  CLRF   x65
09C68:  CLRF   x66
09C6A:  CLRF   x67
09C6C:  CLRF   x68
09C6E:  CLRF   x69
09C70:  CLRF   x6A
09C72:  CLRF   x6B
09C74:  CLRF   x6C
09C76:  CLRF   x6D
09C78:  CLRF   x6E
09C7A:  CLRF   x6F
09C7C:  CLRF   x70
09C7E:  CLRF   x71
09C80:  CLRF   x72
09C82:  CLRF   x73
09C84:  CLRF   x74
09C86:  CLRF   x75
09C88:  CLRF   x76
09C8A:  CLRF   x77
09C8C:  CLRF   x78
09C8E:  CLRF   x79
09C90:  CLRF   x7A
09C92:  CLRF   x7B
09C94:  CLRF   x7C
09C96:  CLRF   x7D
09C98:  CLRF   x7E
09C9A:  CLRF   x7F
09C9C:  CLRF   x80
09C9E:  CLRF   x81
09CA0:  CLRF   x82
09CA2:  CLRF   x83
09CA4:  CLRF   x84
09CA6:  CLRF   x85
09CA8:  CLRF   x86
09CAA:  CLRF   x87
09CAC:  CLRF   x88
09CAE:  CLRF   x89
09CB0:  CLRF   x8A
09CB2:  CLRF   x8B
09CB4:  CLRF   x8C
09CB6:  CLRF   x8D
09CB8:  CLRF   x8E
09CBA:  CLRF   x8F
09CBC:  CLRF   x90
09CBE:  CLRF   x91
09CC0:  CLRF   x92
09CC2:  CLRF   x93
09CC4:  CLRF   x94
09CC6:  CLRF   x95
09CC8:  CLRF   x96
09CCA:  CLRF   x97
09CCC:  CLRF   x98
09CCE:  CLRF   x99
09CD0:  CLRF   x9A
09CD2:  CLRF   x9B
09CD4:  CLRF   x9C
09CD6:  CLRF   x9D
09CD8:  CLRF   x9E
09CDA:  CLRF   x9F
09CDC:  CLRF   xA0
09CDE:  CLRF   xA1
09CE0:  CLRF   xA2
09CE2:  CLRF   xA3
09CE4:  CLRF   xA4
09CE6:  CLRF   xA5
09CE8:  CLRF   xA6
09CEA:  CLRF   xA7
09CEC:  CLRF   xA8
09CEE:  CLRF   xA9
09CF0:  CLRF   xAA
09CF2:  CLRF   xAB
09CF4:  CLRF   xAC
09CF6:  CLRF   xAD
09CF8:  CLRF   xAE
09CFA:  CLRF   xAF
09CFC:  CLRF   xB0
09CFE:  CLRF   xB1
09D00:  CLRF   xB2
09D02:  CLRF   xB3
09D04:  CLRF   xB4
09D06:  CLRF   xB5
09D08:  CLRF   xB6
09D0A:  CLRF   xB7
09D0C:  CLRF   xB8
09D0E:  CLRF   xB9
09D10:  CLRF   xBA
09D12:  CLRF   xBB
09D14:  CLRF   xBC
09D16:  CLRF   xBD
09D18:  CLRF   xBE
09D1A:  CLRF   xBF
09D1C:  CLRF   xC0
09D1E:  CLRF   xC1
09D20:  CLRF   xC2
09D22:  CLRF   xC3
09D24:  CLRF   xC4
09D26:  CLRF   xC5
09D28:  CLRF   xC6
09D2A:  CLRF   xC7
09D2C:  CLRF   xC8
09D2E:  CLRF   xC9
09D30:  CLRF   xCA
09D32:  CLRF   xCB
09D34:  CLRF   xCC
09D36:  CLRF   xCD
09D38:  CLRF   xCE
09D3A:  CLRF   xCF
09D3C:  CLRF   xD0
09D3E:  CLRF   xD1
09D40:  CLRF   xD2
09D42:  CLRF   xD3
09D44:  CLRF   xD4
09D46:  CLRF   xD5
09D48:  CLRF   xD6
09D4A:  CLRF   xD7
09D4C:  CLRF   xD8
09D4E:  CLRF   xD9
09D50:  CLRF   xDA
09D52:  CLRF   xDB
09D54:  CLRF   xDC
09D56:  CLRF   xDD
09D58:  CLRF   xDE
09D5A:  CLRF   xDF
09D5C:  CLRF   xE0
09D5E:  CLRF   xE1
09D60:  CLRF   xE2
09D62:  CLRF   xE3
09D64:  CLRF   xE4
09D66:  CLRF   xE5
09D68:  CLRF   xE6
09D6A:  CLRF   xE7
09D6C:  CLRF   xE8
09D6E:  CLRF   xE9
09D70:  CLRF   xEA
09D72:  CLRF   xEB
09D74:  CLRF   xEC
09D76:  CLRF   xED
09D78:  CLRF   xEE
09D7A:  CLRF   xEF
09D7C:  CLRF   xF0
09D7E:  CLRF   xF1
09D80:  CLRF   xF2
09D82:  CLRF   xF3
09D84:  CLRF   xF4
09D86:  CLRF   xF5
09D88:  CLRF   xF6
09D8A:  CLRF   xF7
09D8C:  CLRF   xF8
09D8E:  CLRF   xF9
09D90:  CLRF   xFA
09D92:  CLRF   xFB
09D94:  CLRF   xFC
09D96:  CLRF   xFD
09D98:  CLRF   xFE
09D9A:  CLRF   xFF
09D9C:  MOVLB  3
09D9E:  CLRF   x00
09DA0:  CLRF   x01
09DA2:  CLRF   x02
09DA4:  CLRF   x03
09DA6:  CLRF   x04
09DA8:  CLRF   x05
09DAA:  CLRF   x06
09DAC:  CLRF   x07
09DAE:  CLRF   x08
09DB0:  CLRF   x09
09DB2:  CLRF   x0A
09DB4:  CLRF   x0B
09DB6:  CLRF   x0C
09DB8:  CLRF   x0D
09DBA:  CLRF   x0E
09DBC:  CLRF   x0F
09DBE:  CLRF   x10
09DC0:  CLRF   x11
09DC2:  CLRF   x12
09DC4:  CLRF   x13
09DC6:  CLRF   x14
09DC8:  CLRF   x15
09DCA:  CLRF   x16
09DCC:  CLRF   x17
09DCE:  CLRF   x18
09DD0:  CLRF   x19
09DD2:  CLRF   x1A
09DD4:  CLRF   x1B
09DD6:  CLRF   x1C
09DD8:  CLRF   x1D
09DDA:  CLRF   x1E
09DDC:  CLRF   x1F
09DDE:  CLRF   x20
09DE0:  CLRF   x21
09DE2:  CLRF   x22
09DE4:  CLRF   x23
09DE6:  CLRF   x24
09DE8:  CLRF   x25
09DEA:  CLRF   x26
09DEC:  CLRF   x27
09DEE:  CLRF   x28
09DF0:  CLRF   x29
09DF2:  CLRF   x2A
09DF4:  CLRF   x2B
09DF6:  CLRF   x2C
09DF8:  CLRF   x2D
09DFA:  CLRF   x2E
09DFC:  CLRF   x2F
09DFE:  CLRF   x30
09E00:  CLRF   x31
09E02:  CLRF   x32
09E04:  CLRF   x33
09E06:  CLRF   x34
09E08:  CLRF   x35
09E0A:  CLRF   x36
09E0C:  CLRF   x37
09E0E:  CLRF   x38
09E10:  CLRF   x39
09E12:  CLRF   x3A
09E14:  CLRF   x3B
09E16:  CLRF   x3C
09E18:  CLRF   x3D
09E1A:  CLRF   x3E
09E1C:  CLRF   x3F
09E1E:  CLRF   x40
09E20:  CLRF   x41
09E22:  CLRF   x42
09E24:  CLRF   x43
09E26:  CLRF   x44
09E28:  CLRF   x45
09E2A:  CLRF   x46
09E2C:  CLRF   x47
09E2E:  CLRF   x48
09E30:  CLRF   x49
09E32:  CLRF   x4A
09E34:  CLRF   x4B
09E36:  CLRF   x4C
09E38:  CLRF   x4D
09E3A:  CLRF   x4E
09E3C:  CLRF   x4F
09E3E:  CLRF   x50
09E40:  CLRF   x51
09E42:  CLRF   x52
09E44:  CLRF   x53
09E46:  CLRF   x54
09E48:  CLRF   x55
09E4A:  CLRF   x56
09E4C:  CLRF   x57
09E4E:  CLRF   x58
09E50:  CLRF   x59
09E52:  CLRF   x5A
09E54:  CLRF   x5B
09E56:  CLRF   x5C
09E58:  CLRF   x5D
09E5A:  CLRF   x5E
09E5C:  CLRF   x5F
09E5E:  CLRF   x60
09E60:  CLRF   x61
09E62:  CLRF   x62
09E64:  CLRF   x63
09E66:  CLRF   x64
09E68:  CLRF   x65
09E6A:  CLRF   x66
09E6C:  CLRF   x67
09E6E:  CLRF   x68
09E70:  CLRF   x69
09E72:  CLRF   x6A
09E74:  CLRF   x6B
09E76:  CLRF   x6C
09E78:  CLRF   x6D
09E7A:  CLRF   x6E
09E7C:  CLRF   x6F
09E7E:  CLRF   x70
09E80:  CLRF   x71
09E82:  CLRF   x72
09E84:  CLRF   x73
09E86:  CLRF   x74
09E88:  CLRF   x75
09E8A:  CLRF   x76
09E8C:  CLRF   x77
09E8E:  CLRF   x78
09E90:  CLRF   x79
09E92:  CLRF   x7A
09E94:  CLRF   x7B
09E96:  CLRF   x7C
09E98:  CLRF   x7D
09E9A:  CLRF   x7E
09E9C:  CLRF   x7F
09E9E:  CLRF   x80
09EA0:  CLRF   x81
09EA2:  CLRF   x82
09EA4:  CLRF   x83
09EA6:  CLRF   x84
09EA8:  CLRF   x85
09EAA:  CLRF   x86
09EAC:  CLRF   x87
09EAE:  CLRF   x88
09EB0:  CLRF   x89
09EB2:  CLRF   x8A
09EB4:  CLRF   x8B
09EB6:  CLRF   x8C
09EB8:  CLRF   x8D
09EBA:  CLRF   x8E
09EBC:  CLRF   x8F
09EBE:  CLRF   x90
09EC0:  CLRF   x91
09EC2:  CLRF   x92
09EC4:  CLRF   x93
09EC6:  CLRF   x94
09EC8:  CLRF   x95
09ECA:  CLRF   x96
09ECC:  CLRF   x97
09ECE:  CLRF   x98
09ED0:  CLRF   x99
09ED2:  CLRF   x9A
09ED4:  CLRF   x9B
09ED6:  CLRF   x9C
09ED8:  CLRF   x9D
09EDA:  CLRF   x9E
09EDC:  CLRF   x9F
09EDE:  CLRF   xA0
09EE0:  CLRF   xA1
09EE2:  CLRF   xA2
09EE4:  CLRF   xA3
09EE6:  CLRF   xA4
09EE8:  CLRF   xA5
09EEA:  CLRF   xA6
09EEC:  CLRF   xA7
09EEE:  CLRF   xA8
09EF0:  CLRF   xA9
09EF2:  CLRF   xAA
09EF4:  CLRF   xAB
09EF6:  CLRF   xAC
09EF8:  CLRF   xAD
09EFA:  CLRF   xAE
09EFC:  CLRF   xAF
09EFE:  CLRF   xB0
09F00:  CLRF   xB1
09F02:  CLRF   xB2
09F04:  CLRF   xB3
09F06:  CLRF   xB4
09F08:  CLRF   xB5
09F0A:  CLRF   xB6
09F0C:  CLRF   xB7
09F0E:  CLRF   xB8
09F10:  CLRF   xB9
09F12:  CLRF   xBA
09F14:  CLRF   xBB
09F16:  CLRF   xBC
09F18:  CLRF   xBD
09F1A:  CLRF   xBE
09F1C:  CLRF   xBF
09F1E:  CLRF   xC0
09F20:  CLRF   xC1
09F22:  CLRF   xC2
09F24:  CLRF   xC3
09F26:  CLRF   xC4
09F28:  CLRF   xC5
09F2A:  CLRF   xC6
09F2C:  CLRF   xC7
09F2E:  CLRF   xC8
09F30:  CLRF   xC9
09F32:  CLRF   xCA
09F34:  CLRF   xCB
09F36:  CLRF   xCC
09F38:  CLRF   xCD
09F3A:  CLRF   xCE
09F3C:  CLRF   xCF
09F3E:  CLRF   xD0
09F40:  CLRF   xD1
09F42:  CLRF   xD2
09F44:  CLRF   xD3
09F46:  CLRF   xD4
09F48:  CLRF   xD5
09F4A:  CLRF   xD6
09F4C:  CLRF   xD7
09F4E:  CLRF   xD8
09F50:  CLRF   xD9
09F52:  CLRF   xDA
09F54:  CLRF   xDB
09F56:  CLRF   xDC
09F58:  CLRF   xDD
09F5A:  CLRF   xDE
09F5C:  CLRF   xDF
09F5E:  CLRF   xE0
09F60:  CLRF   xE1
09F62:  CLRF   xE2
09F64:  CLRF   xE3
09F66:  CLRF   xE4
09F68:  CLRF   xE5
09F6A:  CLRF   xE6
09F6C:  CLRF   xE7
09F6E:  CLRF   xE8
09F70:  CLRF   xE9
09F72:  CLRF   xEA
09F74:  CLRF   xEB
09F76:  CLRF   xEC
....................     port1.port_num = 1;
09F78:  MOVLW  01
09F7A:  MOVLB  1
09F7C:  MOVWF  xE9
....................     port1.sweep_step = 0;
09F7E:  CLRF   xEB
09F80:  CLRF   xEA
....................     port1.active = 1;
09F82:  MOVLB  3
09F84:  BSF    xEC.0
.................... 
....................     // Init Port2
....................     sweep_config_t port2 = {0};
09F86:  CLRF   xED
09F88:  CLRF   xEE
09F8A:  CLRF   xEF
09F8C:  CLRF   xF0
09F8E:  CLRF   xF1
09F90:  CLRF   xF2
09F92:  CLRF   xF3
09F94:  CLRF   xF4
09F96:  CLRF   xF5
09F98:  CLRF   xF6
09F9A:  CLRF   xF7
09F9C:  CLRF   xF8
09F9E:  CLRF   xF9
09FA0:  CLRF   xFA
09FA2:  CLRF   xFB
09FA4:  CLRF   xFC
09FA6:  CLRF   xFD
09FA8:  CLRF   xFE
09FAA:  CLRF   xFF
09FAC:  MOVLB  4
09FAE:  CLRF   x00
09FB0:  CLRF   x01
09FB2:  CLRF   x02
09FB4:  CLRF   x03
09FB6:  CLRF   x04
09FB8:  CLRF   x05
09FBA:  CLRF   x06
09FBC:  CLRF   x07
09FBE:  CLRF   x08
09FC0:  CLRF   x09
09FC2:  CLRF   x0A
09FC4:  CLRF   x0B
09FC6:  CLRF   x0C
09FC8:  CLRF   x0D
09FCA:  CLRF   x0E
09FCC:  CLRF   x0F
09FCE:  CLRF   x10
09FD0:  CLRF   x11
09FD2:  CLRF   x12
09FD4:  CLRF   x13
09FD6:  CLRF   x14
09FD8:  CLRF   x15
09FDA:  CLRF   x16
09FDC:  CLRF   x17
09FDE:  CLRF   x18
09FE0:  CLRF   x19
09FE2:  CLRF   x1A
09FE4:  CLRF   x1B
09FE6:  CLRF   x1C
09FE8:  CLRF   x1D
09FEA:  CLRF   x1E
09FEC:  CLRF   x1F
09FEE:  CLRF   x20
09FF0:  CLRF   x21
09FF2:  CLRF   x22
09FF4:  CLRF   x23
09FF6:  CLRF   x24
09FF8:  CLRF   x25
09FFA:  CLRF   x26
09FFC:  CLRF   x27
09FFE:  CLRF   x28
0A000:  CLRF   x29
0A002:  CLRF   x2A
0A004:  CLRF   x2B
0A006:  CLRF   x2C
0A008:  CLRF   x2D
0A00A:  CLRF   x2E
0A00C:  CLRF   x2F
0A00E:  CLRF   x30
0A010:  CLRF   x31
0A012:  CLRF   x32
0A014:  CLRF   x33
0A016:  CLRF   x34
0A018:  CLRF   x35
0A01A:  CLRF   x36
0A01C:  CLRF   x37
0A01E:  CLRF   x38
0A020:  CLRF   x39
0A022:  CLRF   x3A
0A024:  CLRF   x3B
0A026:  CLRF   x3C
0A028:  CLRF   x3D
0A02A:  CLRF   x3E
0A02C:  CLRF   x3F
0A02E:  CLRF   x40
0A030:  CLRF   x41
0A032:  CLRF   x42
0A034:  CLRF   x43
0A036:  CLRF   x44
0A038:  CLRF   x45
0A03A:  CLRF   x46
0A03C:  CLRF   x47
0A03E:  CLRF   x48
0A040:  CLRF   x49
0A042:  CLRF   x4A
0A044:  CLRF   x4B
0A046:  CLRF   x4C
0A048:  CLRF   x4D
0A04A:  CLRF   x4E
0A04C:  CLRF   x4F
0A04E:  CLRF   x50
0A050:  CLRF   x51
0A052:  CLRF   x52
0A054:  CLRF   x53
0A056:  CLRF   x54
0A058:  CLRF   x55
0A05A:  CLRF   x56
0A05C:  CLRF   x57
0A05E:  CLRF   x58
0A060:  CLRF   x59
0A062:  CLRF   x5A
0A064:  CLRF   x5B
0A066:  CLRF   x5C
0A068:  CLRF   x5D
0A06A:  CLRF   x5E
0A06C:  CLRF   x5F
0A06E:  CLRF   x60
0A070:  CLRF   x61
0A072:  CLRF   x62
0A074:  CLRF   x63
0A076:  CLRF   x64
0A078:  CLRF   x65
0A07A:  CLRF   x66
0A07C:  CLRF   x67
0A07E:  CLRF   x68
0A080:  CLRF   x69
0A082:  CLRF   x6A
0A084:  CLRF   x6B
0A086:  CLRF   x6C
0A088:  CLRF   x6D
0A08A:  CLRF   x6E
0A08C:  CLRF   x6F
0A08E:  CLRF   x70
0A090:  CLRF   x71
0A092:  CLRF   x72
0A094:  CLRF   x73
0A096:  CLRF   x74
0A098:  CLRF   x75
0A09A:  CLRF   x76
0A09C:  CLRF   x77
0A09E:  CLRF   x78
0A0A0:  CLRF   x79
0A0A2:  CLRF   x7A
0A0A4:  CLRF   x7B
0A0A6:  CLRF   x7C
0A0A8:  CLRF   x7D
0A0AA:  CLRF   x7E
0A0AC:  CLRF   x7F
0A0AE:  CLRF   x80
0A0B0:  CLRF   x81
0A0B2:  CLRF   x82
0A0B4:  CLRF   x83
0A0B6:  CLRF   x84
0A0B8:  CLRF   x85
0A0BA:  CLRF   x86
0A0BC:  CLRF   x87
0A0BE:  CLRF   x88
0A0C0:  CLRF   x89
0A0C2:  CLRF   x8A
0A0C4:  CLRF   x8B
0A0C6:  CLRF   x8C
0A0C8:  CLRF   x8D
0A0CA:  CLRF   x8E
0A0CC:  CLRF   x8F
0A0CE:  CLRF   x90
0A0D0:  CLRF   x91
0A0D2:  CLRF   x92
0A0D4:  CLRF   x93
0A0D6:  CLRF   x94
0A0D8:  CLRF   x95
0A0DA:  CLRF   x96
0A0DC:  CLRF   x97
0A0DE:  CLRF   x98
0A0E0:  CLRF   x99
0A0E2:  CLRF   x9A
0A0E4:  CLRF   x9B
0A0E6:  CLRF   x9C
0A0E8:  CLRF   x9D
0A0EA:  CLRF   x9E
0A0EC:  CLRF   x9F
0A0EE:  CLRF   xA0
0A0F0:  CLRF   xA1
0A0F2:  CLRF   xA2
0A0F4:  CLRF   xA3
0A0F6:  CLRF   xA4
0A0F8:  CLRF   xA5
0A0FA:  CLRF   xA6
0A0FC:  CLRF   xA7
0A0FE:  CLRF   xA8
0A100:  CLRF   xA9
0A102:  CLRF   xAA
0A104:  CLRF   xAB
0A106:  CLRF   xAC
0A108:  CLRF   xAD
0A10A:  CLRF   xAE
0A10C:  CLRF   xAF
0A10E:  CLRF   xB0
0A110:  CLRF   xB1
0A112:  CLRF   xB2
0A114:  CLRF   xB3
0A116:  CLRF   xB4
0A118:  CLRF   xB5
0A11A:  CLRF   xB6
0A11C:  CLRF   xB7
0A11E:  CLRF   xB8
0A120:  CLRF   xB9
0A122:  CLRF   xBA
0A124:  CLRF   xBB
0A126:  CLRF   xBC
0A128:  CLRF   xBD
0A12A:  CLRF   xBE
0A12C:  CLRF   xBF
0A12E:  CLRF   xC0
0A130:  CLRF   xC1
0A132:  CLRF   xC2
0A134:  CLRF   xC3
0A136:  CLRF   xC4
0A138:  CLRF   xC5
0A13A:  CLRF   xC6
0A13C:  CLRF   xC7
0A13E:  CLRF   xC8
0A140:  CLRF   xC9
0A142:  CLRF   xCA
0A144:  CLRF   xCB
0A146:  CLRF   xCC
0A148:  CLRF   xCD
0A14A:  CLRF   xCE
0A14C:  CLRF   xCF
0A14E:  CLRF   xD0
0A150:  CLRF   xD1
0A152:  CLRF   xD2
0A154:  CLRF   xD3
0A156:  CLRF   xD4
0A158:  CLRF   xD5
0A15A:  CLRF   xD6
0A15C:  CLRF   xD7
0A15E:  CLRF   xD8
0A160:  CLRF   xD9
0A162:  CLRF   xDA
0A164:  CLRF   xDB
0A166:  CLRF   xDC
0A168:  CLRF   xDD
0A16A:  CLRF   xDE
0A16C:  CLRF   xDF
0A16E:  CLRF   xE0
0A170:  CLRF   xE1
0A172:  CLRF   xE2
0A174:  CLRF   xE3
0A176:  CLRF   xE4
0A178:  CLRF   xE5
0A17A:  CLRF   xE6
0A17C:  CLRF   xE7
0A17E:  CLRF   xE8
0A180:  CLRF   xE9
0A182:  CLRF   xEA
0A184:  CLRF   xEB
0A186:  CLRF   xEC
0A188:  CLRF   xED
0A18A:  CLRF   xEE
0A18C:  CLRF   xEF
0A18E:  CLRF   xF0
0A190:  CLRF   xF1
0A192:  CLRF   xF2
0A194:  CLRF   xF3
0A196:  CLRF   xF4
0A198:  CLRF   xF5
0A19A:  CLRF   xF6
0A19C:  CLRF   xF7
0A19E:  CLRF   xF8
0A1A0:  CLRF   xF9
0A1A2:  CLRF   xFA
0A1A4:  CLRF   xFB
0A1A6:  CLRF   xFC
0A1A8:  CLRF   xFD
0A1AA:  CLRF   xFE
0A1AC:  CLRF   xFF
0A1AE:  MOVLB  5
0A1B0:  CLRF   x00
0A1B2:  CLRF   x01
0A1B4:  CLRF   x02
0A1B6:  CLRF   x03
0A1B8:  CLRF   x04
0A1BA:  CLRF   x05
0A1BC:  CLRF   x06
0A1BE:  CLRF   x07
0A1C0:  CLRF   x08
0A1C2:  CLRF   x09
0A1C4:  CLRF   x0A
0A1C6:  CLRF   x0B
0A1C8:  CLRF   x0C
0A1CA:  CLRF   x0D
0A1CC:  CLRF   x0E
0A1CE:  CLRF   x0F
0A1D0:  CLRF   x10
0A1D2:  CLRF   x11
0A1D4:  CLRF   x12
0A1D6:  CLRF   x13
0A1D8:  CLRF   x14
0A1DA:  CLRF   x15
0A1DC:  CLRF   x16
0A1DE:  CLRF   x17
0A1E0:  CLRF   x18
0A1E2:  CLRF   x19
0A1E4:  CLRF   x1A
0A1E6:  CLRF   x1B
0A1E8:  CLRF   x1C
0A1EA:  CLRF   x1D
0A1EC:  CLRF   x1E
0A1EE:  CLRF   x1F
0A1F0:  CLRF   x20
0A1F2:  CLRF   x21
0A1F4:  CLRF   x22
0A1F6:  CLRF   x23
0A1F8:  CLRF   x24
0A1FA:  CLRF   x25
0A1FC:  CLRF   x26
0A1FE:  CLRF   x27
0A200:  CLRF   x28
0A202:  CLRF   x29
0A204:  CLRF   x2A
0A206:  CLRF   x2B
0A208:  CLRF   x2C
0A20A:  CLRF   x2D
0A20C:  CLRF   x2E
0A20E:  CLRF   x2F
0A210:  CLRF   x30
0A212:  CLRF   x31
0A214:  CLRF   x32
0A216:  CLRF   x33
0A218:  CLRF   x34
0A21A:  CLRF   x35
0A21C:  CLRF   x36
0A21E:  CLRF   x37
0A220:  CLRF   x38
0A222:  CLRF   x39
0A224:  CLRF   x3A
0A226:  CLRF   x3B
0A228:  CLRF   x3C
0A22A:  CLRF   x3D
0A22C:  CLRF   x3E
0A22E:  CLRF   x3F
0A230:  CLRF   x40
0A232:  CLRF   x41
0A234:  CLRF   x42
0A236:  CLRF   x43
0A238:  CLRF   x44
0A23A:  CLRF   x45
0A23C:  CLRF   x46
0A23E:  CLRF   x47
0A240:  CLRF   x48
0A242:  CLRF   x49
0A244:  CLRF   x4A
0A246:  CLRF   x4B
0A248:  CLRF   x4C
0A24A:  CLRF   x4D
0A24C:  CLRF   x4E
0A24E:  CLRF   x4F
0A250:  CLRF   x50
0A252:  CLRF   x51
0A254:  CLRF   x52
0A256:  CLRF   x53
0A258:  CLRF   x54
0A25A:  CLRF   x55
0A25C:  CLRF   x56
0A25E:  CLRF   x57
0A260:  CLRF   x58
0A262:  CLRF   x59
0A264:  CLRF   x5A
0A266:  CLRF   x5B
0A268:  CLRF   x5C
0A26A:  CLRF   x5D
0A26C:  CLRF   x5E
0A26E:  CLRF   x5F
0A270:  CLRF   x60
0A272:  CLRF   x61
0A274:  CLRF   x62
0A276:  CLRF   x63
0A278:  CLRF   x64
0A27A:  CLRF   x65
0A27C:  CLRF   x66
0A27E:  CLRF   x67
0A280:  CLRF   x68
0A282:  CLRF   x69
0A284:  CLRF   x6A
0A286:  CLRF   x6B
0A288:  CLRF   x6C
0A28A:  CLRF   x6D
0A28C:  CLRF   x6E
0A28E:  CLRF   x6F
0A290:  CLRF   x70
0A292:  CLRF   x71
0A294:  CLRF   x72
0A296:  CLRF   x73
0A298:  CLRF   x74
0A29A:  CLRF   x75
0A29C:  CLRF   x76
0A29E:  CLRF   x77
0A2A0:  CLRF   x78
0A2A2:  CLRF   x79
0A2A4:  CLRF   x7A
0A2A6:  CLRF   x7B
0A2A8:  CLRF   x7C
0A2AA:  CLRF   x7D
0A2AC:  CLRF   x7E
0A2AE:  CLRF   x7F
0A2B0:  CLRF   x80
0A2B2:  CLRF   x81
0A2B4:  CLRF   x82
0A2B6:  CLRF   x83
0A2B8:  CLRF   x84
0A2BA:  CLRF   x85
0A2BC:  CLRF   x86
0A2BE:  CLRF   x87
0A2C0:  CLRF   x88
0A2C2:  CLRF   x89
0A2C4:  CLRF   x8A
0A2C6:  CLRF   x8B
0A2C8:  CLRF   x8C
0A2CA:  CLRF   x8D
0A2CC:  CLRF   x8E
0A2CE:  CLRF   x8F
0A2D0:  CLRF   x90
0A2D2:  CLRF   x91
0A2D4:  CLRF   x92
0A2D6:  CLRF   x93
0A2D8:  CLRF   x94
0A2DA:  CLRF   x95
0A2DC:  CLRF   x96
0A2DE:  CLRF   x97
0A2E0:  CLRF   x98
0A2E2:  CLRF   x99
0A2E4:  CLRF   x9A
0A2E6:  CLRF   x9B
0A2E8:  CLRF   x9C
0A2EA:  CLRF   x9D
0A2EC:  CLRF   x9E
0A2EE:  CLRF   x9F
0A2F0:  CLRF   xA0
0A2F2:  CLRF   xA1
0A2F4:  CLRF   xA2
0A2F6:  CLRF   xA3
0A2F8:  CLRF   xA4
0A2FA:  CLRF   xA5
0A2FC:  CLRF   xA6
0A2FE:  CLRF   xA7
0A300:  CLRF   xA8
0A302:  CLRF   xA9
0A304:  CLRF   xAA
0A306:  CLRF   xAB
0A308:  CLRF   xAC
0A30A:  CLRF   xAD
0A30C:  CLRF   xAE
0A30E:  CLRF   xAF
0A310:  CLRF   xB0
0A312:  CLRF   xB1
0A314:  CLRF   xB2
0A316:  CLRF   xB3
0A318:  CLRF   xB4
0A31A:  CLRF   xB5
0A31C:  CLRF   xB6
0A31E:  CLRF   xB7
0A320:  CLRF   xB8
0A322:  CLRF   xB9
0A324:  CLRF   xBA
0A326:  CLRF   xBB
0A328:  CLRF   xBC
0A32A:  CLRF   xBD
0A32C:  CLRF   xBE
0A32E:  CLRF   xBF
0A330:  CLRF   xC0
0A332:  CLRF   xC1
0A334:  CLRF   xC2
0A336:  CLRF   xC3
0A338:  CLRF   xC4
0A33A:  CLRF   xC5
0A33C:  CLRF   xC6
0A33E:  CLRF   xC7
0A340:  CLRF   xC8
0A342:  CLRF   xC9
0A344:  CLRF   xCA
0A346:  CLRF   xCB
0A348:  CLRF   xCC
0A34A:  CLRF   xCD
0A34C:  CLRF   xCE
0A34E:  CLRF   xCF
0A350:  CLRF   xD0
0A352:  CLRF   xD1
0A354:  CLRF   xD2
0A356:  CLRF   xD3
0A358:  CLRF   xD4
0A35A:  CLRF   xD5
0A35C:  CLRF   xD6
0A35E:  CLRF   xD7
0A360:  CLRF   xD8
0A362:  CLRF   xD9
0A364:  CLRF   xDA
0A366:  CLRF   xDB
0A368:  CLRF   xDC
0A36A:  CLRF   xDD
0A36C:  CLRF   xDE
0A36E:  CLRF   xDF
0A370:  CLRF   xE0
0A372:  CLRF   xE1
0A374:  CLRF   xE2
0A376:  CLRF   xE3
0A378:  CLRF   xE4
0A37A:  CLRF   xE5
0A37C:  CLRF   xE6
0A37E:  CLRF   xE7
0A380:  CLRF   xE8
0A382:  CLRF   xE9
0A384:  CLRF   xEA
0A386:  CLRF   xEB
0A388:  CLRF   xEC
0A38A:  CLRF   xED
0A38C:  CLRF   xEE
0A38E:  CLRF   xEF
0A390:  CLRF   xF0
....................     port2.port_num = 2;
0A392:  MOVLW  02
0A394:  MOVLB  3
0A396:  MOVWF  xED
....................     port2.sweep_step = 0;
0A398:  CLRF   xEF
0A39A:  CLRF   xEE
....................     port2.active = 1;
0A39C:  MOVLB  5
0A39E:  BSF    xF0.0
.................... 
....................     int16 count = 0;
0A3A0:  CLRF   xF2
0A3A2:  CLRF   xF1
....................     
....................     // Initialize DACs to 0
....................     mcp4901_1_write(1);
0A3A4:  MOVLB  9
0A3A6:  CLRF   xDD
0A3A8:  MOVLW  01
0A3AA:  MOVWF  xDC
0A3AC:  MOVLB  0
0A3AE:  CALL   2872
....................     mcp4901_2_write(1);
0A3B2:  MOVLB  9
0A3B4:  CLRF   xDD
0A3B6:  MOVLW  01
0A3B8:  MOVWF  xDC
0A3BA:  MOVLB  0
0A3BC:  CALL   28B0
.................... 
....................     unsigned int16 volt;
....................     unsigned int16 curr;
....................     iv_env_t measured_data = create_meas_data();
0A3C0:  CALL   91EA
0A3C4:  MOVFF  02,03
0A3C8:  MOVF   01,W
0A3CA:  MOVWF  FE1
0A3CC:  MOVFF  03,FE2
0A3D0:  MOVLW  05
0A3D2:  MOVWF  FEA
0A3D4:  MOVLW  F7
0A3D6:  MOVWF  FE9
0A3D8:  MOVLW  0C
0A3DA:  MOVWF  01
0A3DC:  MOVFF  FE6,FEE
0A3E0:  DECFSZ 01,F
0A3E2:  GOTO   A3DC
....................     while (port1.active || port2.active)
0A3E6:  MOVLB  3
0A3E8:  BTFSS  xEC.0
0A3EA:  BRA    A3F2
0A3EC:  MOVLB  0
0A3EE:  GOTO   A402
0A3F2:  MOVLB  0
0A3F4:  MOVLB  5
0A3F6:  BTFSC  xF0.0
0A3F8:  BRA    A400
0A3FA:  MOVLB  0
0A3FC:  GOTO   A75E
0A400:  MOVLB  0
....................     {
....................         mcp4901_1_write(count);
0A402:  MOVFF  5F2,9DD
0A406:  MOVFF  5F1,9DC
0A40A:  CALL   2872
....................         mcp4901_2_write(count);
0A40E:  MOVFF  5F2,9DD
0A412:  MOVFF  5F1,9DC
0A416:  CALL   28B0
....................         delay_us(1); 
0A41A:  BRA    A41C
0A41C:  BRA    A41E
....................         if (port1.active) {
0A41E:  MOVLB  3
0A420:  BTFSC  xEC.0
0A422:  BRA    A42A
0A424:  MOVLB  0
0A426:  GOTO   A5A6
0A42A:  MOVLB  0
....................             volt = ad7490_read(ADC_CIGS1_AMP);
0A42C:  MOVLW  02
0A42E:  MOVLB  9
0A430:  MOVWF  xEE
0A432:  MOVLB  0
0A434:  CALL   24C2
0A438:  MOVFF  02,5F4
0A43C:  MOVFF  01,5F3
....................             curr = ad7490_read(ADC_CIGS1_CURR);
0A440:  MOVLW  01
0A442:  MOVLB  9
0A444:  MOVWF  xEE
0A446:  MOVLB  0
0A448:  CALL   24C2
0A44C:  MOVFF  02,5F6
0A450:  MOVFF  01,5F5
....................             // ad7490_read_2port(ADC_CIGS1_AMP, ADC_CIGS1_CURR, &volt, &curr);
....................             // fprintf(PC, "%04LX,%04LX,", volt, curr);
....................             port1.data_buffer[count*3]= (volt  >> 4) & 0xFF;
0A454:  MOVFF  5F2,A52
0A458:  MOVFF  5F1,A51
0A45C:  MOVLB  A
0A45E:  CLRF   x54
0A460:  MOVLW  03
0A462:  MOVWF  x53
0A464:  MOVLB  0
0A466:  CALL   8240
0A46A:  MOVFF  02,60C
0A46E:  MOVFF  01,60B
0A472:  MOVLW  EC
0A474:  MOVLB  6
0A476:  ADDWF  x0B,W
0A478:  MOVWF  FE9
0A47A:  MOVLW  01
0A47C:  ADDWFC x0C,W
0A47E:  MOVWF  FEA
0A480:  MOVLB  5
0A482:  RRCF   xF4,W
0A484:  MOVLB  6
0A486:  MOVWF  x10
0A488:  MOVLB  5
0A48A:  RRCF   xF3,W
0A48C:  MOVLB  6
0A48E:  MOVWF  x0F
0A490:  RRCF   x10,F
0A492:  RRCF   x0F,F
0A494:  RRCF   x10,F
0A496:  RRCF   x0F,F
0A498:  RRCF   x10,F
0A49A:  RRCF   x0F,F
0A49C:  MOVLW  0F
0A49E:  ANDWF  x10,F
0A4A0:  MOVF   x0F,W
0A4A2:  MOVWF  00
0A4A4:  CLRF   03
0A4A6:  MOVF   00,W
0A4A8:  MOVWF  FEF
....................             port1.data_buffer[count*3+1]= ((volt & 0x0F) << 4) | ((curr >> 8) & 0x0F);
0A4AA:  MOVFF  5F2,A52
0A4AE:  MOVFF  5F1,A51
0A4B2:  MOVLB  A
0A4B4:  CLRF   x54
0A4B6:  MOVLW  03
0A4B8:  MOVWF  x53
0A4BA:  MOVLB  0
0A4BC:  CALL   8240
0A4C0:  MOVFF  02,60C
0A4C4:  MOVFF  01,60B
0A4C8:  MOVLW  01
0A4CA:  MOVLB  6
0A4CC:  ADDWF  x0B,F
0A4CE:  MOVLW  00
0A4D0:  ADDWFC x0C,F
0A4D2:  MOVLW  EC
0A4D4:  ADDWF  x0B,W
0A4D6:  MOVWF  FE9
0A4D8:  MOVLW  01
0A4DA:  ADDWFC x0C,W
0A4DC:  MOVWF  FEA
0A4DE:  MOVLB  5
0A4E0:  MOVF   xF3,W
0A4E2:  ANDLW  0F
0A4E4:  MOVLB  6
0A4E6:  MOVWF  x0F
0A4E8:  CLRF   x10
0A4EA:  RLCF   x0F,F
0A4EC:  RLCF   x10,F
0A4EE:  RLCF   x0F,F
0A4F0:  RLCF   x10,F
0A4F2:  RLCF   x0F,F
0A4F4:  RLCF   x10,F
0A4F6:  RLCF   x0F,F
0A4F8:  RLCF   x10,F
0A4FA:  MOVLW  F0
0A4FC:  ANDWF  x0F,F
0A4FE:  MOVFF  5F6,611
0A502:  CLRF   x12
0A504:  MOVF   x11,W
0A506:  ANDLW  0F
0A508:  MOVWF  00
0A50A:  CLRF   03
0A50C:  MOVF   00,W
0A50E:  IORWF  x0F,W
0A510:  MOVWF  00
0A512:  MOVF   03,W
0A514:  IORWF  x10,W
0A516:  MOVWF  03
0A518:  MOVF   00,W
0A51A:  MOVWF  FEF
....................             port1.data_buffer[count*3+2]= curr & 0xFF;
0A51C:  MOVFF  5F2,A52
0A520:  MOVFF  5F1,A51
0A524:  MOVLB  A
0A526:  CLRF   x54
0A528:  MOVLW  03
0A52A:  MOVWF  x53
0A52C:  MOVLB  0
0A52E:  CALL   8240
0A532:  MOVFF  02,60C
0A536:  MOVFF  01,60B
0A53A:  MOVLW  02
0A53C:  MOVLB  6
0A53E:  ADDWF  x0B,F
0A540:  MOVLW  00
0A542:  ADDWFC x0C,F
0A544:  MOVLW  EC
0A546:  ADDWF  x0B,W
0A548:  MOVWF  FE9
0A54A:  MOVLW  01
0A54C:  ADDWFC x0C,W
0A54E:  MOVWF  FEA
0A550:  MOVLB  5
0A552:  MOVF   xF5,W
0A554:  MOVWF  00
0A556:  CLRF   03
0A558:  MOVF   00,W
0A55A:  MOVWF  FEF
....................             port1.sweep_step = count + 1; 
0A55C:  MOVLW  01
0A55E:  ADDWF  xF1,W
0A560:  MOVLB  1
0A562:  MOVWF  xEA
0A564:  MOVLW  00
0A566:  MOVLB  5
0A568:  ADDWFC xF2,W
0A56A:  MOVLB  1
0A56C:  MOVWF  xEB
....................             // fprintf(PC, "%04LX,%04LX,", port1.data_buffer[count].voltage, port1.data_buffer[count].current);
....................             if (curr< curr_limit) {
0A56E:  MOVLB  5
0A570:  MOVF   xF6,W
0A572:  MOVLB  1
0A574:  SUBWF  xE2,W
0A576:  BTFSC  FD8.0
0A578:  BRA    A580
0A57A:  MOVLB  0
0A57C:  GOTO   A5A6
0A580:  MOVLB  0
0A582:  BTFSS  FD8.2
0A584:  GOTO   A59C
0A588:  MOVLB  1
0A58A:  MOVF   xE1,W
0A58C:  MOVLB  5
0A58E:  SUBWF  xF5,W
0A590:  BTFSS  FD8.0
0A592:  BRA    A59A
0A594:  MOVLB  0
0A596:  GOTO   A5A6
0A59A:  MOVLB  0
....................                 port1.active = 0;
0A59C:  MOVLB  3
0A59E:  BCF    xEC.0
....................                 disconnect_port1();
0A5A0:  MOVLB  0
0A5A2:  CALL   926C
....................             }
....................         }
....................         if (port2.active) {
0A5A6:  MOVLB  5
0A5A8:  BTFSC  xF0.0
0A5AA:  BRA    A5B2
0A5AC:  MOVLB  0
0A5AE:  GOTO   A72E
0A5B2:  MOVLB  0
....................             volt = ad7490_read(ADC_CIGS2_AMP);
0A5B4:  MOVLW  06
0A5B6:  MOVLB  9
0A5B8:  MOVWF  xEE
0A5BA:  MOVLB  0
0A5BC:  CALL   24C2
0A5C0:  MOVFF  02,5F4
0A5C4:  MOVFF  01,5F3
....................             curr = ad7490_read(ADC_CIGS2_CURR);
0A5C8:  MOVLW  05
0A5CA:  MOVLB  9
0A5CC:  MOVWF  xEE
0A5CE:  MOVLB  0
0A5D0:  CALL   24C2
0A5D4:  MOVFF  02,5F6
0A5D8:  MOVFF  01,5F5
....................             port2.data_buffer[count*3]= (volt  >> 4) & 0xFF;
0A5DC:  MOVFF  5F2,A52
0A5E0:  MOVFF  5F1,A51
0A5E4:  MOVLB  A
0A5E6:  CLRF   x54
0A5E8:  MOVLW  03
0A5EA:  MOVWF  x53
0A5EC:  MOVLB  0
0A5EE:  CALL   8240
0A5F2:  MOVFF  02,60C
0A5F6:  MOVFF  01,60B
0A5FA:  MOVLW  F0
0A5FC:  MOVLB  6
0A5FE:  ADDWF  x0B,W
0A600:  MOVWF  FE9
0A602:  MOVLW  03
0A604:  ADDWFC x0C,W
0A606:  MOVWF  FEA
0A608:  MOVLB  5
0A60A:  RRCF   xF4,W
0A60C:  MOVLB  6
0A60E:  MOVWF  x10
0A610:  MOVLB  5
0A612:  RRCF   xF3,W
0A614:  MOVLB  6
0A616:  MOVWF  x0F
0A618:  RRCF   x10,F
0A61A:  RRCF   x0F,F
0A61C:  RRCF   x10,F
0A61E:  RRCF   x0F,F
0A620:  RRCF   x10,F
0A622:  RRCF   x0F,F
0A624:  MOVLW  0F
0A626:  ANDWF  x10,F
0A628:  MOVF   x0F,W
0A62A:  MOVWF  00
0A62C:  CLRF   03
0A62E:  MOVF   00,W
0A630:  MOVWF  FEF
....................             port2.data_buffer[count*3+1]= ((volt & 0x0F) << 4) | ((curr >> 8) & 0x0F);
0A632:  MOVFF  5F2,A52
0A636:  MOVFF  5F1,A51
0A63A:  MOVLB  A
0A63C:  CLRF   x54
0A63E:  MOVLW  03
0A640:  MOVWF  x53
0A642:  MOVLB  0
0A644:  CALL   8240
0A648:  MOVFF  02,60C
0A64C:  MOVFF  01,60B
0A650:  MOVLW  01
0A652:  MOVLB  6
0A654:  ADDWF  x0B,F
0A656:  MOVLW  00
0A658:  ADDWFC x0C,F
0A65A:  MOVLW  F0
0A65C:  ADDWF  x0B,W
0A65E:  MOVWF  FE9
0A660:  MOVLW  03
0A662:  ADDWFC x0C,W
0A664:  MOVWF  FEA
0A666:  MOVLB  5
0A668:  MOVF   xF3,W
0A66A:  ANDLW  0F
0A66C:  MOVLB  6
0A66E:  MOVWF  x0F
0A670:  CLRF   x10
0A672:  RLCF   x0F,F
0A674:  RLCF   x10,F
0A676:  RLCF   x0F,F
0A678:  RLCF   x10,F
0A67A:  RLCF   x0F,F
0A67C:  RLCF   x10,F
0A67E:  RLCF   x0F,F
0A680:  RLCF   x10,F
0A682:  MOVLW  F0
0A684:  ANDWF  x0F,F
0A686:  MOVFF  5F6,611
0A68A:  CLRF   x12
0A68C:  MOVF   x11,W
0A68E:  ANDLW  0F
0A690:  MOVWF  00
0A692:  CLRF   03
0A694:  MOVF   00,W
0A696:  IORWF  x0F,W
0A698:  MOVWF  00
0A69A:  MOVF   03,W
0A69C:  IORWF  x10,W
0A69E:  MOVWF  03
0A6A0:  MOVF   00,W
0A6A2:  MOVWF  FEF
....................             port2.data_buffer[count*3+2]= curr & 0xFF;
0A6A4:  MOVFF  5F2,A52
0A6A8:  MOVFF  5F1,A51
0A6AC:  MOVLB  A
0A6AE:  CLRF   x54
0A6B0:  MOVLW  03
0A6B2:  MOVWF  x53
0A6B4:  MOVLB  0
0A6B6:  CALL   8240
0A6BA:  MOVFF  02,60C
0A6BE:  MOVFF  01,60B
0A6C2:  MOVLW  02
0A6C4:  MOVLB  6
0A6C6:  ADDWF  x0B,F
0A6C8:  MOVLW  00
0A6CA:  ADDWFC x0C,F
0A6CC:  MOVLW  F0
0A6CE:  ADDWF  x0B,W
0A6D0:  MOVWF  FE9
0A6D2:  MOVLW  03
0A6D4:  ADDWFC x0C,W
0A6D6:  MOVWF  FEA
0A6D8:  MOVLB  5
0A6DA:  MOVF   xF5,W
0A6DC:  MOVWF  00
0A6DE:  CLRF   03
0A6E0:  MOVF   00,W
0A6E2:  MOVWF  FEF
....................             port2.sweep_step = count + 1;
0A6E4:  MOVLW  01
0A6E6:  ADDWF  xF1,W
0A6E8:  MOVLB  3
0A6EA:  MOVWF  xEE
0A6EC:  MOVLW  00
0A6EE:  MOVLB  5
0A6F0:  ADDWFC xF2,W
0A6F2:  MOVLB  3
0A6F4:  MOVWF  xEF
....................             if (curr < curr_limit) {
0A6F6:  MOVLB  5
0A6F8:  MOVF   xF6,W
0A6FA:  MOVLB  1
0A6FC:  SUBWF  xE2,W
0A6FE:  BTFSC  FD8.0
0A700:  BRA    A708
0A702:  MOVLB  0
0A704:  GOTO   A72E
0A708:  MOVLB  0
0A70A:  BTFSS  FD8.2
0A70C:  GOTO   A724
0A710:  MOVLB  1
0A712:  MOVF   xE1,W
0A714:  MOVLB  5
0A716:  SUBWF  xF5,W
0A718:  BTFSS  FD8.0
0A71A:  BRA    A722
0A71C:  MOVLB  0
0A71E:  GOTO   A72E
0A722:  MOVLB  0
....................                 port2.active = 0;
0A724:  MOVLB  5
0A726:  BCF    xF0.0
....................                 disconnect_port2();
0A728:  MOVLB  0
0A72A:  CALL   9274
....................             } 
....................         }
....................         count++;
0A72E:  MOVLB  5
0A730:  INCF   xF1,F
0A732:  BTFSC  FD8.2
0A734:  INCF   xF2,F
....................         if (count >= 255) {
0A736:  MOVF   xF2,F
0A738:  BTFSC  FD8.2
0A73A:  BRA    A742
0A73C:  MOVLB  0
0A73E:  GOTO   A756
0A742:  MOVLB  0
0A744:  MOVLB  5
0A746:  MOVF   xF1,W
0A748:  SUBLW  FE
0A74A:  BTFSS  FD8.0
0A74C:  BRA    A754
0A74E:  MOVLB  0
0A750:  GOTO   A75A
0A754:  MOVLB  0
....................             // fprintf(PC, "Maximum step count reached: %ld\r\n", count);
....................             break;
0A756:  GOTO   A75E
....................         }
0A75A:  GOTO   A3E6
....................     }
....................     // unsigned int32 end_time_ms = get_current_msec();
....................     // Ensure all connections are disabled3
....................     disconnect_port1();
0A75E:  CALL   926C
....................     disconnect_port2();
0A762:  CALL   9274
....................     log_meas_data(&measured_data, &port1);
0A766:  MOVLW  05
0A768:  MOVLB  9
0A76A:  MOVWF  xC3
0A76C:  MOVLW  F7
0A76E:  MOVWF  xC2
0A770:  MOVLW  01
0A772:  MOVWF  xC5
0A774:  MOVLW  E9
0A776:  MOVWF  xC4
0A778:  MOVLB  0
0A77A:  CALL   927C
....................     log_meas_data(&measured_data, &port2);
0A77E:  MOVLW  05
0A780:  MOVLB  9
0A782:  MOVWF  xC3
0A784:  MOVLW  F7
0A786:  MOVWF  xC2
0A788:  MOVLW  03
0A78A:  MOVWF  xC5
0A78C:  MOVLW  ED
0A78E:  MOVWF  xC4
0A790:  MOVLB  0
0A792:  CALL   927C
....................     // misf_update_address_area();
....................     unsigned int32 end_time_ms = get_current_msec();
....................     unsigned int32 elapsed_time_ms = end_time_ms - start_time_ms;
0A796:  CALL   9B3A
0A79A:  MOVLB  6
0A79C:  CLRF   x06
0A79E:  CLRF   x05
0A7A0:  MOVFF  02,604
0A7A4:  MOVFF  01,603
0A7A8:  MOVLB  1
0A7AA:  MOVF   xE5,W
0A7AC:  MOVLB  6
0A7AE:  SUBWF  x03,W
0A7B0:  MOVWF  x07
0A7B2:  MOVLB  1
0A7B4:  MOVF   xE6,W
0A7B6:  MOVLB  6
0A7B8:  SUBWFB x04,W
0A7BA:  MOVWF  x08
0A7BC:  MOVLB  1
0A7BE:  MOVF   xE7,W
0A7C0:  MOVLB  6
0A7C2:  SUBWFB x05,W
0A7C4:  MOVWF  x09
0A7C6:  MOVLB  1
0A7C8:  MOVF   xE8,W
0A7CA:  MOVLB  6
0A7CC:  SUBWFB x06,W
0A7CE:  MOVWF  x0A
0A7D0:  MOVLB  0
0A7D2:  RETURN 0
.................... }
.................... 
.................... 
.................... void sweep_port1(unsigned int16 curr_limit)
*
0E9BA:  CALL   3C18
0E9BE:  MOVFF  03,1CD
0E9C2:  MOVFF  02,1CC
0E9C6:  MOVFF  01,1CB
0E9CA:  MOVFF  00,1CA
.................... {
....................     unsigned int32 start_time_ms = get_current_sec();
....................     fputc('.', PC);
0E9CE:  MOVLW  2E
0E9D0:  CALL   91DC
....................     // Enable both CIGS ports
....................     connect_port1();
0E9D4:  CALL   5214
.................... 
....................     // Init Port1
....................     sweep_config_t port1 = {0};
0E9D8:  MOVLB  1
0E9DA:  CLRF   xCE
0E9DC:  CLRF   xCF
0E9DE:  CLRF   xD0
0E9E0:  CLRF   xD1
0E9E2:  CLRF   xD2
0E9E4:  CLRF   xD3
0E9E6:  CLRF   xD4
0E9E8:  CLRF   xD5
0E9EA:  CLRF   xD6
0E9EC:  CLRF   xD7
0E9EE:  CLRF   xD8
0E9F0:  CLRF   xD9
0E9F2:  CLRF   xDA
0E9F4:  CLRF   xDB
0E9F6:  CLRF   xDC
0E9F8:  CLRF   xDD
0E9FA:  CLRF   xDE
0E9FC:  CLRF   xDF
0E9FE:  CLRF   xE0
0EA00:  CLRF   xE1
0EA02:  CLRF   xE2
0EA04:  CLRF   xE3
0EA06:  CLRF   xE4
0EA08:  CLRF   xE5
0EA0A:  CLRF   xE6
0EA0C:  CLRF   xE7
0EA0E:  CLRF   xE8
0EA10:  CLRF   xE9
0EA12:  CLRF   xEA
0EA14:  CLRF   xEB
0EA16:  CLRF   xEC
0EA18:  CLRF   xED
0EA1A:  CLRF   xEE
0EA1C:  CLRF   xEF
0EA1E:  CLRF   xF0
0EA20:  CLRF   xF1
0EA22:  CLRF   xF2
0EA24:  CLRF   xF3
0EA26:  CLRF   xF4
0EA28:  CLRF   xF5
0EA2A:  CLRF   xF6
0EA2C:  CLRF   xF7
0EA2E:  CLRF   xF8
0EA30:  CLRF   xF9
0EA32:  CLRF   xFA
0EA34:  CLRF   xFB
0EA36:  CLRF   xFC
0EA38:  CLRF   xFD
0EA3A:  CLRF   xFE
0EA3C:  CLRF   xFF
0EA3E:  MOVLB  2
0EA40:  CLRF   x00
0EA42:  CLRF   x01
0EA44:  CLRF   x02
0EA46:  CLRF   x03
0EA48:  CLRF   x04
0EA4A:  CLRF   x05
0EA4C:  CLRF   x06
0EA4E:  CLRF   x07
0EA50:  CLRF   x08
0EA52:  CLRF   x09
0EA54:  CLRF   x0A
0EA56:  CLRF   x0B
0EA58:  CLRF   x0C
0EA5A:  CLRF   x0D
0EA5C:  CLRF   x0E
0EA5E:  CLRF   x0F
0EA60:  CLRF   x10
0EA62:  CLRF   x11
0EA64:  CLRF   x12
0EA66:  CLRF   x13
0EA68:  CLRF   x14
0EA6A:  CLRF   x15
0EA6C:  CLRF   x16
0EA6E:  CLRF   x17
0EA70:  CLRF   x18
0EA72:  CLRF   x19
0EA74:  CLRF   x1A
0EA76:  CLRF   x1B
0EA78:  CLRF   x1C
0EA7A:  CLRF   x1D
0EA7C:  CLRF   x1E
0EA7E:  CLRF   x1F
0EA80:  CLRF   x20
0EA82:  CLRF   x21
0EA84:  CLRF   x22
0EA86:  CLRF   x23
0EA88:  CLRF   x24
0EA8A:  CLRF   x25
0EA8C:  CLRF   x26
0EA8E:  CLRF   x27
0EA90:  CLRF   x28
0EA92:  CLRF   x29
0EA94:  CLRF   x2A
0EA96:  CLRF   x2B
0EA98:  CLRF   x2C
0EA9A:  CLRF   x2D
0EA9C:  CLRF   x2E
0EA9E:  CLRF   x2F
0EAA0:  CLRF   x30
0EAA2:  CLRF   x31
0EAA4:  CLRF   x32
0EAA6:  CLRF   x33
0EAA8:  CLRF   x34
0EAAA:  CLRF   x35
0EAAC:  CLRF   x36
0EAAE:  CLRF   x37
0EAB0:  CLRF   x38
0EAB2:  CLRF   x39
0EAB4:  CLRF   x3A
0EAB6:  CLRF   x3B
0EAB8:  CLRF   x3C
0EABA:  CLRF   x3D
0EABC:  CLRF   x3E
0EABE:  CLRF   x3F
0EAC0:  CLRF   x40
0EAC2:  CLRF   x41
0EAC4:  CLRF   x42
0EAC6:  CLRF   x43
0EAC8:  CLRF   x44
0EACA:  CLRF   x45
0EACC:  CLRF   x46
0EACE:  CLRF   x47
0EAD0:  CLRF   x48
0EAD2:  CLRF   x49
0EAD4:  CLRF   x4A
0EAD6:  CLRF   x4B
0EAD8:  CLRF   x4C
0EADA:  CLRF   x4D
0EADC:  CLRF   x4E
0EADE:  CLRF   x4F
0EAE0:  CLRF   x50
0EAE2:  CLRF   x51
0EAE4:  CLRF   x52
0EAE6:  CLRF   x53
0EAE8:  CLRF   x54
0EAEA:  CLRF   x55
0EAEC:  CLRF   x56
0EAEE:  CLRF   x57
0EAF0:  CLRF   x58
0EAF2:  CLRF   x59
0EAF4:  CLRF   x5A
0EAF6:  CLRF   x5B
0EAF8:  CLRF   x5C
0EAFA:  CLRF   x5D
0EAFC:  CLRF   x5E
0EAFE:  CLRF   x5F
0EB00:  CLRF   x60
0EB02:  CLRF   x61
0EB04:  CLRF   x62
0EB06:  CLRF   x63
0EB08:  CLRF   x64
0EB0A:  CLRF   x65
0EB0C:  CLRF   x66
0EB0E:  CLRF   x67
0EB10:  CLRF   x68
0EB12:  CLRF   x69
0EB14:  CLRF   x6A
0EB16:  CLRF   x6B
0EB18:  CLRF   x6C
0EB1A:  CLRF   x6D
0EB1C:  CLRF   x6E
0EB1E:  CLRF   x6F
0EB20:  CLRF   x70
0EB22:  CLRF   x71
0EB24:  CLRF   x72
0EB26:  CLRF   x73
0EB28:  CLRF   x74
0EB2A:  CLRF   x75
0EB2C:  CLRF   x76
0EB2E:  CLRF   x77
0EB30:  CLRF   x78
0EB32:  CLRF   x79
0EB34:  CLRF   x7A
0EB36:  CLRF   x7B
0EB38:  CLRF   x7C
0EB3A:  CLRF   x7D
0EB3C:  CLRF   x7E
0EB3E:  CLRF   x7F
0EB40:  CLRF   x80
0EB42:  CLRF   x81
0EB44:  CLRF   x82
0EB46:  CLRF   x83
0EB48:  CLRF   x84
0EB4A:  CLRF   x85
0EB4C:  CLRF   x86
0EB4E:  CLRF   x87
0EB50:  CLRF   x88
0EB52:  CLRF   x89
0EB54:  CLRF   x8A
0EB56:  CLRF   x8B
0EB58:  CLRF   x8C
0EB5A:  CLRF   x8D
0EB5C:  CLRF   x8E
0EB5E:  CLRF   x8F
0EB60:  CLRF   x90
0EB62:  CLRF   x91
0EB64:  CLRF   x92
0EB66:  CLRF   x93
0EB68:  CLRF   x94
0EB6A:  CLRF   x95
0EB6C:  CLRF   x96
0EB6E:  CLRF   x97
0EB70:  CLRF   x98
0EB72:  CLRF   x99
0EB74:  CLRF   x9A
0EB76:  CLRF   x9B
0EB78:  CLRF   x9C
0EB7A:  CLRF   x9D
0EB7C:  CLRF   x9E
0EB7E:  CLRF   x9F
0EB80:  CLRF   xA0
0EB82:  CLRF   xA1
0EB84:  CLRF   xA2
0EB86:  CLRF   xA3
0EB88:  CLRF   xA4
0EB8A:  CLRF   xA5
0EB8C:  CLRF   xA6
0EB8E:  CLRF   xA7
0EB90:  CLRF   xA8
0EB92:  CLRF   xA9
0EB94:  CLRF   xAA
0EB96:  CLRF   xAB
0EB98:  CLRF   xAC
0EB9A:  CLRF   xAD
0EB9C:  CLRF   xAE
0EB9E:  CLRF   xAF
0EBA0:  CLRF   xB0
0EBA2:  CLRF   xB1
0EBA4:  CLRF   xB2
0EBA6:  CLRF   xB3
0EBA8:  CLRF   xB4
0EBAA:  CLRF   xB5
0EBAC:  CLRF   xB6
0EBAE:  CLRF   xB7
0EBB0:  CLRF   xB8
0EBB2:  CLRF   xB9
0EBB4:  CLRF   xBA
0EBB6:  CLRF   xBB
0EBB8:  CLRF   xBC
0EBBA:  CLRF   xBD
0EBBC:  CLRF   xBE
0EBBE:  CLRF   xBF
0EBC0:  CLRF   xC0
0EBC2:  CLRF   xC1
0EBC4:  CLRF   xC2
0EBC6:  CLRF   xC3
0EBC8:  CLRF   xC4
0EBCA:  CLRF   xC5
0EBCC:  CLRF   xC6
0EBCE:  CLRF   xC7
0EBD0:  CLRF   xC8
0EBD2:  CLRF   xC9
0EBD4:  CLRF   xCA
0EBD6:  CLRF   xCB
0EBD8:  CLRF   xCC
0EBDA:  CLRF   xCD
0EBDC:  CLRF   xCE
0EBDE:  CLRF   xCF
0EBE0:  CLRF   xD0
0EBE2:  CLRF   xD1
0EBE4:  CLRF   xD2
0EBE6:  CLRF   xD3
0EBE8:  CLRF   xD4
0EBEA:  CLRF   xD5
0EBEC:  CLRF   xD6
0EBEE:  CLRF   xD7
0EBF0:  CLRF   xD8
0EBF2:  CLRF   xD9
0EBF4:  CLRF   xDA
0EBF6:  CLRF   xDB
0EBF8:  CLRF   xDC
0EBFA:  CLRF   xDD
0EBFC:  CLRF   xDE
0EBFE:  CLRF   xDF
0EC00:  CLRF   xE0
0EC02:  CLRF   xE1
0EC04:  CLRF   xE2
0EC06:  CLRF   xE3
0EC08:  CLRF   xE4
0EC0A:  CLRF   xE5
0EC0C:  CLRF   xE6
0EC0E:  CLRF   xE7
0EC10:  CLRF   xE8
0EC12:  CLRF   xE9
0EC14:  CLRF   xEA
0EC16:  CLRF   xEB
0EC18:  CLRF   xEC
0EC1A:  CLRF   xED
0EC1C:  CLRF   xEE
0EC1E:  CLRF   xEF
0EC20:  CLRF   xF0
0EC22:  CLRF   xF1
0EC24:  CLRF   xF2
0EC26:  CLRF   xF3
0EC28:  CLRF   xF4
0EC2A:  CLRF   xF5
0EC2C:  CLRF   xF6
0EC2E:  CLRF   xF7
0EC30:  CLRF   xF8
0EC32:  CLRF   xF9
0EC34:  CLRF   xFA
0EC36:  CLRF   xFB
0EC38:  CLRF   xFC
0EC3A:  CLRF   xFD
0EC3C:  CLRF   xFE
0EC3E:  CLRF   xFF
0EC40:  MOVLB  3
0EC42:  CLRF   x00
0EC44:  CLRF   x01
0EC46:  CLRF   x02
0EC48:  CLRF   x03
0EC4A:  CLRF   x04
0EC4C:  CLRF   x05
0EC4E:  CLRF   x06
0EC50:  CLRF   x07
0EC52:  CLRF   x08
0EC54:  CLRF   x09
0EC56:  CLRF   x0A
0EC58:  CLRF   x0B
0EC5A:  CLRF   x0C
0EC5C:  CLRF   x0D
0EC5E:  CLRF   x0E
0EC60:  CLRF   x0F
0EC62:  CLRF   x10
0EC64:  CLRF   x11
0EC66:  CLRF   x12
0EC68:  CLRF   x13
0EC6A:  CLRF   x14
0EC6C:  CLRF   x15
0EC6E:  CLRF   x16
0EC70:  CLRF   x17
0EC72:  CLRF   x18
0EC74:  CLRF   x19
0EC76:  CLRF   x1A
0EC78:  CLRF   x1B
0EC7A:  CLRF   x1C
0EC7C:  CLRF   x1D
0EC7E:  CLRF   x1E
0EC80:  CLRF   x1F
0EC82:  CLRF   x20
0EC84:  CLRF   x21
0EC86:  CLRF   x22
0EC88:  CLRF   x23
0EC8A:  CLRF   x24
0EC8C:  CLRF   x25
0EC8E:  CLRF   x26
0EC90:  CLRF   x27
0EC92:  CLRF   x28
0EC94:  CLRF   x29
0EC96:  CLRF   x2A
0EC98:  CLRF   x2B
0EC9A:  CLRF   x2C
0EC9C:  CLRF   x2D
0EC9E:  CLRF   x2E
0ECA0:  CLRF   x2F
0ECA2:  CLRF   x30
0ECA4:  CLRF   x31
0ECA6:  CLRF   x32
0ECA8:  CLRF   x33
0ECAA:  CLRF   x34
0ECAC:  CLRF   x35
0ECAE:  CLRF   x36
0ECB0:  CLRF   x37
0ECB2:  CLRF   x38
0ECB4:  CLRF   x39
0ECB6:  CLRF   x3A
0ECB8:  CLRF   x3B
0ECBA:  CLRF   x3C
0ECBC:  CLRF   x3D
0ECBE:  CLRF   x3E
0ECC0:  CLRF   x3F
0ECC2:  CLRF   x40
0ECC4:  CLRF   x41
0ECC6:  CLRF   x42
0ECC8:  CLRF   x43
0ECCA:  CLRF   x44
0ECCC:  CLRF   x45
0ECCE:  CLRF   x46
0ECD0:  CLRF   x47
0ECD2:  CLRF   x48
0ECD4:  CLRF   x49
0ECD6:  CLRF   x4A
0ECD8:  CLRF   x4B
0ECDA:  CLRF   x4C
0ECDC:  CLRF   x4D
0ECDE:  CLRF   x4E
0ECE0:  CLRF   x4F
0ECE2:  CLRF   x50
0ECE4:  CLRF   x51
0ECE6:  CLRF   x52
0ECE8:  CLRF   x53
0ECEA:  CLRF   x54
0ECEC:  CLRF   x55
0ECEE:  CLRF   x56
0ECF0:  CLRF   x57
0ECF2:  CLRF   x58
0ECF4:  CLRF   x59
0ECF6:  CLRF   x5A
0ECF8:  CLRF   x5B
0ECFA:  CLRF   x5C
0ECFC:  CLRF   x5D
0ECFE:  CLRF   x5E
0ED00:  CLRF   x5F
0ED02:  CLRF   x60
0ED04:  CLRF   x61
0ED06:  CLRF   x62
0ED08:  CLRF   x63
0ED0A:  CLRF   x64
0ED0C:  CLRF   x65
0ED0E:  CLRF   x66
0ED10:  CLRF   x67
0ED12:  CLRF   x68
0ED14:  CLRF   x69
0ED16:  CLRF   x6A
0ED18:  CLRF   x6B
0ED1A:  CLRF   x6C
0ED1C:  CLRF   x6D
0ED1E:  CLRF   x6E
0ED20:  CLRF   x6F
0ED22:  CLRF   x70
0ED24:  CLRF   x71
0ED26:  CLRF   x72
0ED28:  CLRF   x73
0ED2A:  CLRF   x74
0ED2C:  CLRF   x75
0ED2E:  CLRF   x76
0ED30:  CLRF   x77
0ED32:  CLRF   x78
0ED34:  CLRF   x79
0ED36:  CLRF   x7A
0ED38:  CLRF   x7B
0ED3A:  CLRF   x7C
0ED3C:  CLRF   x7D
0ED3E:  CLRF   x7E
0ED40:  CLRF   x7F
0ED42:  CLRF   x80
0ED44:  CLRF   x81
0ED46:  CLRF   x82
0ED48:  CLRF   x83
0ED4A:  CLRF   x84
0ED4C:  CLRF   x85
0ED4E:  CLRF   x86
0ED50:  CLRF   x87
0ED52:  CLRF   x88
0ED54:  CLRF   x89
0ED56:  CLRF   x8A
0ED58:  CLRF   x8B
0ED5A:  CLRF   x8C
0ED5C:  CLRF   x8D
0ED5E:  CLRF   x8E
0ED60:  CLRF   x8F
0ED62:  CLRF   x90
0ED64:  CLRF   x91
0ED66:  CLRF   x92
0ED68:  CLRF   x93
0ED6A:  CLRF   x94
0ED6C:  CLRF   x95
0ED6E:  CLRF   x96
0ED70:  CLRF   x97
0ED72:  CLRF   x98
0ED74:  CLRF   x99
0ED76:  CLRF   x9A
0ED78:  CLRF   x9B
0ED7A:  CLRF   x9C
0ED7C:  CLRF   x9D
0ED7E:  CLRF   x9E
0ED80:  CLRF   x9F
0ED82:  CLRF   xA0
0ED84:  CLRF   xA1
0ED86:  CLRF   xA2
0ED88:  CLRF   xA3
0ED8A:  CLRF   xA4
0ED8C:  CLRF   xA5
0ED8E:  CLRF   xA6
0ED90:  CLRF   xA7
0ED92:  CLRF   xA8
0ED94:  CLRF   xA9
0ED96:  CLRF   xAA
0ED98:  CLRF   xAB
0ED9A:  CLRF   xAC
0ED9C:  CLRF   xAD
0ED9E:  CLRF   xAE
0EDA0:  CLRF   xAF
0EDA2:  CLRF   xB0
0EDA4:  CLRF   xB1
0EDA6:  CLRF   xB2
0EDA8:  CLRF   xB3
0EDAA:  CLRF   xB4
0EDAC:  CLRF   xB5
0EDAE:  CLRF   xB6
0EDB0:  CLRF   xB7
0EDB2:  CLRF   xB8
0EDB4:  CLRF   xB9
0EDB6:  CLRF   xBA
0EDB8:  CLRF   xBB
0EDBA:  CLRF   xBC
0EDBC:  CLRF   xBD
0EDBE:  CLRF   xBE
0EDC0:  CLRF   xBF
0EDC2:  CLRF   xC0
0EDC4:  CLRF   xC1
0EDC6:  CLRF   xC2
0EDC8:  CLRF   xC3
0EDCA:  CLRF   xC4
0EDCC:  CLRF   xC5
0EDCE:  CLRF   xC6
0EDD0:  CLRF   xC7
0EDD2:  CLRF   xC8
0EDD4:  CLRF   xC9
0EDD6:  CLRF   xCA
0EDD8:  CLRF   xCB
0EDDA:  CLRF   xCC
0EDDC:  CLRF   xCD
0EDDE:  CLRF   xCE
0EDE0:  CLRF   xCF
0EDE2:  CLRF   xD0
0EDE4:  CLRF   xD1
....................     port1.port_num = 1;
0EDE6:  MOVLW  01
0EDE8:  MOVLB  1
0EDEA:  MOVWF  xCE
....................     port1.sweep_step = 0;
0EDEC:  CLRF   xD0
0EDEE:  CLRF   xCF
....................     port1.active = 1;
0EDF0:  MOVLB  3
0EDF2:  BSF    xD1.0
.................... 
....................     int16 count = 0;
0EDF4:  CLRF   xD3
0EDF6:  CLRF   xD2
....................     
....................     // Initialize DACs to 0
....................     mcp4901_1_write(1);
0EDF8:  MOVLB  9
0EDFA:  CLRF   xDD
0EDFC:  MOVLW  01
0EDFE:  MOVWF  xDC
0EE00:  MOVLB  0
0EE02:  CALL   2872
....................     unsigned int16 volt;
....................     unsigned int16 curr;
....................     iv_env_t measured_data = create_meas_data();
0EE06:  CALL   91EA
0EE0A:  MOVFF  02,03
0EE0E:  MOVF   01,W
0EE10:  MOVWF  FE1
0EE12:  MOVFF  03,FE2
0EE16:  MOVLW  03
0EE18:  MOVWF  FEA
0EE1A:  MOVLW  D8
0EE1C:  MOVWF  FE9
0EE1E:  MOVLW  0C
0EE20:  MOVWF  01
0EE22:  MOVFF  FE6,FEE
0EE26:  DECFSZ 01,F
0EE28:  GOTO   EE22
....................     while (port1.active)
0EE2C:  MOVLB  3
0EE2E:  BTFSC  xD1.0
0EE30:  BRA    EE38
0EE32:  MOVLB  0
0EE34:  GOTO   EFF4
0EE38:  MOVLB  0
....................     {
....................         mcp4901_1_write(count);
0EE3A:  MOVFF  3D3,9DD
0EE3E:  MOVFF  3D2,9DC
0EE42:  CALL   2872
....................         // mcp4901_2_write(count);
....................         delay_us(1); 
0EE46:  BRA    EE48
0EE48:  BRA    EE4A
....................         if (port1.active) {
0EE4A:  MOVLB  3
0EE4C:  BTFSC  xD1.0
0EE4E:  BRA    EE56
0EE50:  MOVLB  0
0EE52:  GOTO   EFC4
0EE56:  MOVLB  0
....................             volt = ad7490_read(ADC_CIGS1_AMP);
0EE58:  MOVLW  02
0EE5A:  MOVLB  9
0EE5C:  MOVWF  xEE
0EE5E:  MOVLB  0
0EE60:  CALL   24C2
0EE64:  MOVFF  02,3D5
0EE68:  MOVFF  01,3D4
....................             curr = ad7490_read(ADC_CIGS1_CURR);
0EE6C:  MOVLW  01
0EE6E:  MOVLB  9
0EE70:  MOVWF  xEE
0EE72:  MOVLB  0
0EE74:  CALL   24C2
0EE78:  MOVFF  02,3D7
0EE7C:  MOVFF  01,3D6
....................             // ad7490_read_2port(ADC_CIGS1_AMP, ADC_CIGS1_CURR, &volt, &curr);
....................             // fprintf(PC, "%04LX,%04LX,", volt, curr);
....................             port1.data_buffer[count*3]= (volt  >> 4) & 0xFF;
0EE80:  MOVFF  3D3,A52
0EE84:  MOVFF  3D2,A51
0EE88:  MOVLB  A
0EE8A:  CLRF   x54
0EE8C:  MOVLW  03
0EE8E:  MOVWF  x53
0EE90:  MOVLB  0
0EE92:  CALL   8240
0EE96:  MOVFF  02,3E5
0EE9A:  MOVFF  01,3E4
0EE9E:  MOVLW  D1
0EEA0:  MOVLB  3
0EEA2:  ADDWF  xE4,W
0EEA4:  MOVWF  FE9
0EEA6:  MOVLW  01
0EEA8:  ADDWFC xE5,W
0EEAA:  MOVWF  FEA
0EEAC:  RRCF   xD5,W
0EEAE:  MOVWF  xE9
0EEB0:  RRCF   xD4,W
0EEB2:  MOVWF  xE8
0EEB4:  RRCF   xE9,F
0EEB6:  RRCF   xE8,F
0EEB8:  RRCF   xE9,F
0EEBA:  RRCF   xE8,F
0EEBC:  RRCF   xE9,F
0EEBE:  RRCF   xE8,F
0EEC0:  MOVLW  0F
0EEC2:  ANDWF  xE9,F
0EEC4:  MOVF   xE8,W
0EEC6:  MOVWF  00
0EEC8:  CLRF   03
0EECA:  MOVF   00,W
0EECC:  MOVWF  FEF
....................             port1.data_buffer[count*3+1]= ((volt & 0x0F) << 4) | ((curr >> 8) & 0x0F);
0EECE:  MOVFF  3D3,A52
0EED2:  MOVFF  3D2,A51
0EED6:  MOVLB  A
0EED8:  CLRF   x54
0EEDA:  MOVLW  03
0EEDC:  MOVWF  x53
0EEDE:  MOVLB  0
0EEE0:  CALL   8240
0EEE4:  MOVFF  02,3E5
0EEE8:  MOVFF  01,3E4
0EEEC:  MOVLW  01
0EEEE:  MOVLB  3
0EEF0:  ADDWF  xE4,F
0EEF2:  MOVLW  00
0EEF4:  ADDWFC xE5,F
0EEF6:  MOVLW  D1
0EEF8:  ADDWF  xE4,W
0EEFA:  MOVWF  FE9
0EEFC:  MOVLW  01
0EEFE:  ADDWFC xE5,W
0EF00:  MOVWF  FEA
0EF02:  MOVF   xD4,W
0EF04:  ANDLW  0F
0EF06:  MOVWF  xE8
0EF08:  CLRF   xE9
0EF0A:  RLCF   xE8,F
0EF0C:  RLCF   xE9,F
0EF0E:  RLCF   xE8,F
0EF10:  RLCF   xE9,F
0EF12:  RLCF   xE8,F
0EF14:  RLCF   xE9,F
0EF16:  RLCF   xE8,F
0EF18:  RLCF   xE9,F
0EF1A:  MOVLW  F0
0EF1C:  ANDWF  xE8,F
0EF1E:  MOVFF  3D7,3EA
0EF22:  CLRF   xEB
0EF24:  MOVF   xEA,W
0EF26:  ANDLW  0F
0EF28:  MOVWF  00
0EF2A:  CLRF   03
0EF2C:  MOVF   00,W
0EF2E:  IORWF  xE8,W
0EF30:  MOVWF  00
0EF32:  MOVF   03,W
0EF34:  IORWF  xE9,W
0EF36:  MOVWF  03
0EF38:  MOVF   00,W
0EF3A:  MOVWF  FEF
....................             port1.data_buffer[count*3+2]= curr & 0xFF;
0EF3C:  MOVFF  3D3,A52
0EF40:  MOVFF  3D2,A51
0EF44:  MOVLB  A
0EF46:  CLRF   x54
0EF48:  MOVLW  03
0EF4A:  MOVWF  x53
0EF4C:  MOVLB  0
0EF4E:  CALL   8240
0EF52:  MOVFF  02,3E5
0EF56:  MOVFF  01,3E4
0EF5A:  MOVLW  02
0EF5C:  MOVLB  3
0EF5E:  ADDWF  xE4,F
0EF60:  MOVLW  00
0EF62:  ADDWFC xE5,F
0EF64:  MOVLW  D1
0EF66:  ADDWF  xE4,W
0EF68:  MOVWF  FE9
0EF6A:  MOVLW  01
0EF6C:  ADDWFC xE5,W
0EF6E:  MOVWF  FEA
0EF70:  MOVF   xD6,W
0EF72:  MOVWF  00
0EF74:  CLRF   03
0EF76:  MOVF   00,W
0EF78:  MOVWF  FEF
....................             port1.sweep_step = count + 1; 
0EF7A:  MOVLW  01
0EF7C:  ADDWF  xD2,W
0EF7E:  MOVLB  1
0EF80:  MOVWF  xCF
0EF82:  MOVLW  00
0EF84:  MOVLB  3
0EF86:  ADDWFC xD3,W
0EF88:  MOVLB  1
0EF8A:  MOVWF  xD0
....................             // fprintf(PC, "%04LX,%04LX,", port1.data_buffer[count].voltage, port1.data_buffer[count].current);
....................             if (curr< curr_limit) {
0EF8C:  MOVLB  3
0EF8E:  MOVF   xD7,W
0EF90:  MOVLB  1
0EF92:  SUBWF  xC9,W
0EF94:  BTFSC  FD8.0
0EF96:  BRA    EF9E
0EF98:  MOVLB  0
0EF9A:  GOTO   EFC4
0EF9E:  MOVLB  0
0EFA0:  BTFSS  FD8.2
0EFA2:  GOTO   EFBA
0EFA6:  MOVLB  1
0EFA8:  MOVF   xC8,W
0EFAA:  MOVLB  3
0EFAC:  SUBWF  xD6,W
0EFAE:  BTFSS  FD8.0
0EFB0:  BRA    EFB8
0EFB2:  MOVLB  0
0EFB4:  GOTO   EFC4
0EFB8:  MOVLB  0
....................                 port1.active = 0;
0EFBA:  MOVLB  3
0EFBC:  BCF    xD1.0
....................                 disconnect_port1();
0EFBE:  MOVLB  0
0EFC0:  CALL   926C
....................             }
....................         }
....................         count++;
0EFC4:  MOVLB  3
0EFC6:  INCF   xD2,F
0EFC8:  BTFSC  FD8.2
0EFCA:  INCF   xD3,F
....................         if (count >= 255) {
0EFCC:  MOVF   xD3,F
0EFCE:  BTFSC  FD8.2
0EFD0:  BRA    EFD8
0EFD2:  MOVLB  0
0EFD4:  GOTO   EFEC
0EFD8:  MOVLB  0
0EFDA:  MOVLB  3
0EFDC:  MOVF   xD2,W
0EFDE:  SUBLW  FE
0EFE0:  BTFSS  FD8.0
0EFE2:  BRA    EFEA
0EFE4:  MOVLB  0
0EFE6:  GOTO   EFF0
0EFEA:  MOVLB  0
....................             // fprintf(PC, "Maximum step count reached: %ld\r\n", count);
....................             break;
0EFEC:  GOTO   EFF4
....................         }
0EFF0:  GOTO   EE2C
....................     }
....................     // unsigned int32 end_time_ms = get_current_msec();
....................     // Ensure all connections are disabled3
....................     disconnect_port1();
0EFF4:  CALL   926C
....................     log_meas_data(&measured_data, &port1);
0EFF8:  MOVLW  03
0EFFA:  MOVLB  9
0EFFC:  MOVWF  xC3
0EFFE:  MOVLW  D8
0F000:  MOVWF  xC2
0F002:  MOVLW  01
0F004:  MOVWF  xC5
0F006:  MOVLW  CE
0F008:  MOVWF  xC4
0F00A:  MOVLB  0
0F00C:  CALL   927C
0F010:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... 
.................... void log_meas_data(iv_env_t *measured_data_ptr, sweep_config_t *port_data_ptr)
*
09300:  MOVLW  09
09302:  MOVWF  x07
09304:  MOVLW  C6
09306:  MOVWF  x06
.................... {
....................     iv_data_packet_t data_packet = {0};
*
0927C:  MOVLB  9
0927E:  CLRF   xC6
09280:  CLRF   xC7
09282:  CLRF   xC8
09284:  CLRF   xC9
09286:  CLRF   xCA
09288:  CLRF   xCB
0928A:  CLRF   xCC
0928C:  CLRF   xCD
0928E:  CLRF   xCE
09290:  CLRF   xCF
09292:  CLRF   xD0
09294:  CLRF   xD1
09296:  CLRF   xD2
09298:  CLRF   xD3
0929A:  CLRF   xD4
0929C:  CLRF   xD5
0929E:  CLRF   xD6
092A0:  CLRF   xD7
092A2:  CLRF   xD8
092A4:  CLRF   xD9
092A6:  CLRF   xDA
092A8:  CLRF   xDB
092AA:  CLRF   xDC
092AC:  CLRF   xDD
092AE:  CLRF   xDE
092B0:  CLRF   xDF
092B2:  CLRF   xE0
092B4:  CLRF   xE1
092B6:  CLRF   xE2
092B8:  CLRF   xE3
092BA:  CLRF   xE4
092BC:  CLRF   xE5
092BE:  CLRF   xE6
092C0:  CLRF   xE7
092C2:  CLRF   xE8
092C4:  CLRF   xE9
092C6:  CLRF   xEA
092C8:  CLRF   xEB
092CA:  CLRF   xEC
092CC:  CLRF   xED
092CE:  CLRF   xEE
092D0:  CLRF   xEF
092D2:  CLRF   xF0
092D4:  CLRF   xF1
092D6:  CLRF   xF2
092D8:  CLRF   xF3
092DA:  CLRF   xF4
092DC:  CLRF   xF5
092DE:  CLRF   xF6
092E0:  CLRF   xF7
092E2:  CLRF   xF8
092E4:  CLRF   xF9
092E6:  CLRF   xFA
092E8:  CLRF   xFB
092EA:  CLRF   xFC
092EC:  CLRF   xFD
092EE:  CLRF   xFE
092F0:  CLRF   xFF
092F2:  MOVLB  A
092F4:  CLRF   x00
092F6:  CLRF   x01
092F8:  CLRF   x02
092FA:  CLRF   x03
092FC:  CLRF   x04
092FE:  CLRF   x05
....................     iv_data_packet_t *data_packet_ptr = &data_packet;
.................... 
....................     // ========================ヘッダーパケットの処理========================
....................     // ヘッダ情報の設定
....................     data_packet.header.start_marker = START_MAKER;
*
09308:  MOVLB  9
0930A:  SETF   xC6
....................     data_packet.header.time_sec  = measured_data_ptr->time;
0930C:  MOVF   xC2,W
0930E:  MOVWF  FE9
09310:  MOVF   xC3,W
09312:  MOVWF  FEA
09314:  MOVFF  FEF,9C7
09318:  MOVFF  FEC,9C8
0931C:  MOVFF  FEC,9C9
09320:  MOVFF  FEC,9CA
09324:  MOVF   FED,F
09326:  MOVF   FED,F
09328:  MOVF   FED,F
....................     data_packet.header.time_msec = (unsigned int8)((measured_data_ptr->time >> 4) & 0xFF);
0932A:  MOVF   xC2,W
0932C:  MOVWF  FE9
0932E:  MOVF   xC3,W
09330:  MOVWF  FEA
09332:  MOVFF  FEF,A4D
09336:  MOVFF  FEC,A4E
0933A:  MOVFF  FEC,A4F
0933E:  MOVFF  FEC,A50
09342:  MOVF   FED,F
09344:  MOVF   FED,F
09346:  MOVF   FED,F
09348:  MOVLB  A
0934A:  RRCF   x50,F
0934C:  RRCF   x4F,F
0934E:  RRCF   x4E,F
09350:  RRCF   x4D,F
09352:  RRCF   x50,F
09354:  RRCF   x4F,F
09356:  RRCF   x4E,F
09358:  RRCF   x4D,F
0935A:  RRCF   x50,F
0935C:  RRCF   x4F,F
0935E:  RRCF   x4E,F
09360:  RRCF   x4D,F
09362:  RRCF   x50,F
09364:  RRCF   x4F,F
09366:  RRCF   x4E,F
09368:  RRCF   x4D,F
0936A:  MOVLW  0F
0936C:  ANDWF  x50,F
0936E:  MOVF   x4D,W
09370:  MOVWF  00
09372:  CLRF   01
09374:  CLRF   02
09376:  CLRF   03
09378:  MOVFF  00,9CB
.................... 
....................     // 環境データの設定
....................     data_packet.header.env_data[0].data[0] = (measured_data_ptr->pd >> 4) & 0xFF;
0937C:  MOVLW  04
0937E:  MOVLB  9
09380:  ADDWF  xC2,W
09382:  MOVWF  FE9
09384:  MOVLW  00
09386:  ADDWFC xC3,W
09388:  MOVWF  FEA
0938A:  MOVFF  FEC,A4E
0938E:  MOVF   FED,F
09390:  MOVFF  FEF,A4D
09394:  MOVLB  A
09396:  RRCF   x4E,F
09398:  RRCF   x4D,F
0939A:  RRCF   x4E,F
0939C:  RRCF   x4D,F
0939E:  RRCF   x4E,F
093A0:  RRCF   x4D,F
093A2:  RRCF   x4E,F
093A4:  RRCF   x4D,F
093A6:  MOVLW  0F
093A8:  ANDWF  x4E,F
093AA:  MOVF   x4D,W
093AC:  MOVLB  9
093AE:  MOVWF  xCC
....................     data_packet.header.env_data[0].data[1] =
....................         ((measured_data_ptr->pd & 0x0F) << 4) |
....................         ((measured_data_ptr->temp_py_top >> 8) & 0x0F);
093B0:  MOVLW  04
093B2:  ADDWF  xC2,W
093B4:  MOVWF  FE9
093B6:  MOVLW  00
093B8:  ADDWFC xC3,W
093BA:  MOVWF  FEA
093BC:  MOVFF  FEC,A4E
093C0:  MOVF   FED,F
093C2:  MOVFF  FEF,A4D
093C6:  MOVLW  0F
093C8:  MOVLB  A
093CA:  ANDWF  x4D,F
093CC:  CLRF   x4E
093CE:  RLCF   x4D,F
093D0:  RLCF   x4E,F
093D2:  RLCF   x4D,F
093D4:  RLCF   x4E,F
093D6:  RLCF   x4D,F
093D8:  RLCF   x4E,F
093DA:  RLCF   x4D,F
093DC:  RLCF   x4E,F
093DE:  MOVLW  F0
093E0:  ANDWF  x4D,F
093E2:  MOVLW  06
093E4:  MOVLB  9
093E6:  ADDWF  xC2,W
093E8:  MOVWF  FE9
093EA:  MOVLW  00
093EC:  ADDWFC xC3,W
093EE:  MOVWF  FEA
093F0:  MOVFF  FEC,A50
093F4:  MOVF   FED,F
093F6:  MOVFF  FEF,A4F
093FA:  MOVFF  A50,A4F
093FE:  MOVLB  A
09400:  CLRF   x50
09402:  MOVF   x4F,W
09404:  ANDLW  0F
09406:  MOVWF  00
09408:  CLRF   03
0940A:  MOVF   00,W
0940C:  IORWF  x4D,W
0940E:  MOVLB  9
09410:  MOVWF  xCD
....................     data_packet.header.env_data[0].data[2] = measured_data_ptr->temp_py_top & 0xFF;
09412:  MOVLW  06
09414:  ADDWF  xC2,W
09416:  MOVWF  FE9
09418:  MOVLW  00
0941A:  ADDWFC xC3,W
0941C:  MOVWF  FEA
0941E:  MOVFF  FEC,A4E
09422:  MOVF   FED,F
09424:  MOVFF  FEF,A4D
09428:  MOVLB  A
0942A:  MOVF   x4D,W
0942C:  MOVLB  9
0942E:  MOVWF  xCE
.................... 
....................     data_packet.header.env_data[1].data[0] = (measured_data_ptr->temp_py_bot >> 4) & 0xFF;
09430:  MOVLW  08
09432:  ADDWF  xC2,W
09434:  MOVWF  FE9
09436:  MOVLW  00
09438:  ADDWFC xC3,W
0943A:  MOVWF  FEA
0943C:  MOVFF  FEC,A4E
09440:  MOVF   FED,F
09442:  MOVFF  FEF,A4D
09446:  MOVLB  A
09448:  RRCF   x4E,F
0944A:  RRCF   x4D,F
0944C:  RRCF   x4E,F
0944E:  RRCF   x4D,F
09450:  RRCF   x4E,F
09452:  RRCF   x4D,F
09454:  RRCF   x4E,F
09456:  RRCF   x4D,F
09458:  MOVLW  0F
0945A:  ANDWF  x4E,F
0945C:  MOVF   x4D,W
0945E:  MOVLB  9
09460:  MOVWF  xCF
....................     data_packet.header.env_data[1].data[1] =
....................         ((measured_data_ptr->temp_py_bot & 0x0F) << 4) |
....................         ((measured_data_ptr->temp_mis7 >> 8) & 0x0F);
09462:  MOVLW  08
09464:  ADDWF  xC2,W
09466:  MOVWF  FE9
09468:  MOVLW  00
0946A:  ADDWFC xC3,W
0946C:  MOVWF  FEA
0946E:  MOVFF  FEC,A4E
09472:  MOVF   FED,F
09474:  MOVFF  FEF,A4D
09478:  MOVLW  0F
0947A:  MOVLB  A
0947C:  ANDWF  x4D,F
0947E:  CLRF   x4E
09480:  RLCF   x4D,F
09482:  RLCF   x4E,F
09484:  RLCF   x4D,F
09486:  RLCF   x4E,F
09488:  RLCF   x4D,F
0948A:  RLCF   x4E,F
0948C:  RLCF   x4D,F
0948E:  RLCF   x4E,F
09490:  MOVLW  F0
09492:  ANDWF  x4D,F
09494:  MOVLW  0A
09496:  MOVLB  9
09498:  ADDWF  xC2,W
0949A:  MOVWF  FE9
0949C:  MOVLW  00
0949E:  ADDWFC xC3,W
094A0:  MOVWF  FEA
094A2:  MOVFF  FEC,A50
094A6:  MOVF   FED,F
094A8:  MOVFF  FEF,A4F
094AC:  MOVFF  A50,A4F
094B0:  MOVLB  A
094B2:  CLRF   x50
094B4:  MOVF   x4F,W
094B6:  ANDLW  0F
094B8:  MOVWF  00
094BA:  CLRF   03
094BC:  MOVF   00,W
094BE:  IORWF  x4D,W
094C0:  MOVLB  9
094C2:  MOVWF  xD0
....................     data_packet.header.env_data[1].data[2] = measured_data_ptr->temp_mis7 & 0xFF;
094C4:  MOVLW  0A
094C6:  ADDWF  xC2,W
094C8:  MOVWF  FE9
094CA:  MOVLW  00
094CC:  ADDWFC xC3,W
094CE:  MOVWF  FEA
094D0:  MOVFF  FEC,A4E
094D4:  MOVF   FED,F
094D6:  MOVFF  FEF,A4D
094DA:  MOVLB  A
094DC:  MOVF   x4D,W
094DE:  MOVLB  9
094E0:  MOVWF  xD1
.................... 
....................     // I-Vデータの設定
....................     for (unsigned int8 i = 0; i < IV_HEADER_SIZE; i++) {
094E2:  MOVLB  A
094E4:  CLRF   x08
094E6:  MOVLB  0
094E8:  MOVLB  A
094EA:  MOVF   x08,W
094EC:  SUBLW  10
094EE:  BTFSC  FD8.0
094F0:  BRA    94F8
094F2:  MOVLB  0
094F4:  GOTO   964A
094F8:  MOVLB  0
....................         if (i < port_data_ptr->sweep_step) {
094FA:  MOVLW  01
094FC:  MOVLB  9
094FE:  ADDWF  xC4,W
09500:  MOVWF  FE9
09502:  MOVLW  00
09504:  ADDWFC xC5,W
09506:  MOVWF  FEA
09508:  MOVFF  FEC,03
0950C:  MOVF   FED,F
0950E:  MOVF   FEF,W
09510:  MOVWF  01
09512:  MOVF   03,F
09514:  BTFSC  FD8.2
09516:  BRA    951E
09518:  MOVLB  0
0951A:  GOTO   9532
0951E:  MOVLB  0
09520:  MOVF   01,W
09522:  MOVLB  A
09524:  SUBWF  x08,W
09526:  BTFSS  FD8.0
09528:  BRA    9530
0952A:  MOVLB  0
0952C:  GOTO   95FC
09530:  MOVLB  0
....................             data_packet.header.ivdata[i*3]     = port_data_ptr->data_buffer[i*3];
09532:  MOVLB  A
09534:  MOVF   x08,W
09536:  MULLW  03
09538:  MOVF   FF3,W
0953A:  CLRF   03
0953C:  ADDLW  D2
0953E:  MOVWF  01
09540:  MOVLW  09
09542:  ADDWFC 03,F
09544:  MOVF   01,W
09546:  MOVWF  x4D
09548:  MOVFF  03,A4E
0954C:  MOVF   x08,W
0954E:  MULLW  03
09550:  MOVF   FF3,W
09552:  ADDLW  03
09554:  MOVLB  9
09556:  ADDWF  xC4,W
09558:  MOVWF  FE9
0955A:  MOVLW  00
0955C:  ADDWFC xC5,W
0955E:  MOVWF  FEA
09560:  MOVF   FEF,W
09562:  MOVLB  A
09564:  MOVWF  x4F
09566:  MOVFF  A4E,FEA
0956A:  MOVFF  A4D,FE9
0956E:  MOVFF  A4F,FEF
....................             data_packet.header.ivdata[i*3 + 1] = port_data_ptr->data_buffer[i*3 + 1];
09572:  MOVF   x08,W
09574:  MULLW  03
09576:  MOVF   FF3,W
09578:  ADDLW  01
0957A:  CLRF   03
0957C:  ADDLW  D2
0957E:  MOVWF  01
09580:  MOVLW  09
09582:  ADDWFC 03,F
09584:  MOVF   01,W
09586:  MOVWF  x4D
09588:  MOVFF  03,A4E
0958C:  MOVF   x08,W
0958E:  MULLW  03
09590:  MOVF   FF3,W
09592:  ADDLW  01
09594:  ADDLW  03
09596:  MOVLB  9
09598:  ADDWF  xC4,W
0959A:  MOVWF  FE9
0959C:  MOVLW  00
0959E:  ADDWFC xC5,W
095A0:  MOVWF  FEA
095A2:  MOVF   FEF,W
095A4:  MOVLB  A
095A6:  MOVWF  x4F
095A8:  MOVFF  A4E,FEA
095AC:  MOVFF  A4D,FE9
095B0:  MOVFF  A4F,FEF
....................             data_packet.header.ivdata[i*3 + 2] = port_data_ptr->data_buffer[i*3 + 2];
095B4:  MOVF   x08,W
095B6:  MULLW  03
095B8:  MOVF   FF3,W
095BA:  ADDLW  02
095BC:  CLRF   03
095BE:  ADDLW  D2
095C0:  MOVWF  01
095C2:  MOVLW  09
095C4:  ADDWFC 03,F
095C6:  MOVF   01,W
095C8:  MOVWF  x4D
095CA:  MOVFF  03,A4E
095CE:  MOVF   x08,W
095D0:  MULLW  03
095D2:  MOVF   FF3,W
095D4:  ADDLW  02
095D6:  ADDLW  03
095D8:  MOVLB  9
095DA:  ADDWF  xC4,W
095DC:  MOVWF  FE9
095DE:  MOVLW  00
095E0:  ADDWFC xC5,W
095E2:  MOVWF  FEA
095E4:  MOVF   FEF,W
095E6:  MOVLB  A
095E8:  MOVWF  x4F
095EA:  MOVFF  A4E,FEA
095EE:  MOVFF  A4D,FE9
095F2:  MOVFF  A4F,FEF
095F6:  MOVLB  0
....................         } else {
095F8:  GOTO   9640
....................             // 余りは0埋め
....................             data_packet.header.ivdata[i*3]     = 0;
095FC:  MOVLB  A
095FE:  MOVF   x08,W
09600:  MULLW  03
09602:  MOVF   FF3,W
09604:  CLRF   03
09606:  ADDLW  D2
09608:  MOVWF  FE9
0960A:  MOVLW  09
0960C:  ADDWFC 03,W
0960E:  MOVWF  FEA
09610:  CLRF   FEF
....................             data_packet.header.ivdata[i*3 + 1] = 0;
09612:  MOVF   x08,W
09614:  MULLW  03
09616:  MOVF   FF3,W
09618:  ADDLW  01
0961A:  CLRF   03
0961C:  ADDLW  D2
0961E:  MOVWF  FE9
09620:  MOVLW  09
09622:  ADDWFC 03,W
09624:  MOVWF  FEA
09626:  CLRF   FEF
....................             data_packet.header.ivdata[i*3 + 2] = 0;
09628:  MOVF   x08,W
0962A:  MULLW  03
0962C:  MOVF   FF3,W
0962E:  ADDLW  02
09630:  CLRF   03
09632:  ADDLW  D2
09634:  MOVWF  FE9
09636:  MOVLW  09
09638:  ADDWFC 03,W
0963A:  MOVWF  FEA
0963C:  CLRF   FEF
0963E:  MOVLB  0
....................         }
09640:  MOVLB  A
09642:  INCF   x08,F
09644:  MOVLB  0
09646:  GOTO   94E8
....................     }
....................     // フラッシュに書き込み
....................     if (port_data_ptr->port_num == 1) {
0964A:  MOVLB  9
0964C:  MOVF   xC4,W
0964E:  MOVWF  FE9
09650:  MOVF   xC5,W
09652:  MOVWF  FEA
09654:  DECFSZ FEF,W
09656:  BRA    965C
09658:  BRA    9662
0965A:  MOVLB  0
0965C:  MOVLB  0
0965E:  GOTO   96BA
09662:  MOVLB  0
....................         data_packet.header.crc = calc_crc8(data_packet_ptr->raw, PACKET_SIZE - 1);
09664:  MOVLB  A
09666:  MOVF   x06,W
09668:  MOVWF  01
0966A:  MOVF   x07,W
0966C:  MOVWF  03
0966E:  MOVF   01,W
09670:  MOVWF  x4D
09672:  MOVFF  03,A4E
09676:  MOVFF  A4E,AEB
0967A:  MOVFF  A4D,AEA
0967E:  MOVLW  3F
09680:  MOVWF  xEC
09682:  MOVLB  0
09684:  CALL   30EA
09688:  MOVFF  01,A05
....................         misf_write_data(FLASH_ID_IV1_DATA, data_packet_ptr->raw, PACKET_SIZE);
0968C:  MOVLB  A
0968E:  MOVF   x06,W
09690:  MOVWF  01
09692:  MOVF   x07,W
09694:  MOVWF  03
09696:  MOVF   01,W
09698:  MOVWF  x4D
0969A:  MOVFF  03,A4E
0969E:  MOVLW  04
096A0:  MOVWF  x4F
096A2:  MOVFF  A4E,A51
096A6:  MOVFF  A4D,A50
096AA:  CLRF   x53
096AC:  MOVLW  40
096AE:  MOVWF  x52
096B0:  MOVLB  0
096B2:  CALL   428E
....................         // for (int i = 0; i < PACKET_SIZE; i++) {
....................             // fprintf(PC, "%02X ", data_packet_ptr->raw[i]);
....................         // }
....................         unsigned int8 read_back[PACKET_SIZE];
....................         // read_data_bytes(mis_fm, MISF_ADDRESS_TABLE[FLASH_ID_IV1_DATA].start, read_back, PACKET_SIZE);
....................         // for (int j = 0; j < PACKET_SIZE; j++) {
....................             // fprintf(PC, "%02X ", read_back[j]);
....................         // }
....................     } else if (port_data_ptr->port_num == 2) {
096B6:  GOTO   9726
096BA:  MOVLB  9
096BC:  MOVF   xC4,W
096BE:  MOVWF  FE9
096C0:  MOVF   xC5,W
096C2:  MOVWF  FEA
096C4:  MOVF   FEF,W
096C6:  SUBLW  02
096C8:  BTFSC  FD8.2
096CA:  BRA    96D2
096CC:  MOVLB  0
096CE:  GOTO   9726
096D2:  MOVLB  0
....................         data_packet.header.crc = calc_crc8(data_packet_ptr->raw, PACKET_SIZE - 1);
096D4:  MOVLB  A
096D6:  MOVF   x06,W
096D8:  MOVWF  01
096DA:  MOVF   x07,W
096DC:  MOVWF  03
096DE:  MOVF   01,W
096E0:  MOVWF  x4D
096E2:  MOVFF  03,A4E
096E6:  MOVFF  A4E,AEB
096EA:  MOVFF  A4D,AEA
096EE:  MOVLW  3F
096F0:  MOVWF  xEC
096F2:  MOVLB  0
096F4:  CALL   30EA
096F8:  MOVFF  01,A05
....................         misf_write_data(FLASH_ID_IV2_DATA, data_packet_ptr->raw, PACKET_SIZE);
096FC:  MOVLB  A
096FE:  MOVF   x06,W
09700:  MOVWF  01
09702:  MOVF   x07,W
09704:  MOVWF  03
09706:  MOVF   01,W
09708:  MOVWF  x4D
0970A:  MOVFF  03,A4E
0970E:  MOVLW  06
09710:  MOVWF  x4F
09712:  MOVFF  A4E,A51
09716:  MOVFF  A4D,A50
0971A:  CLRF   x53
0971C:  MOVLW  40
0971E:  MOVWF  x52
09720:  MOVLB  0
09722:  CALL   428E
....................     }
.................... 
....................     // ========================データパケットの処理========================
....................     unsigned int16 iv_index = IV_HEADER_SIZE;
09726:  MOVLB  A
09728:  CLRF   x4A
0972A:  MOVLW  11
0972C:  MOVWF  x49
0972E:  MOVLB  0
....................     // パケットごとに繰り返す
....................     while (iv_index < port_data_ptr->sweep_step) {
09730:  MOVLW  01
09732:  MOVLB  9
09734:  ADDWF  xC4,W
09736:  MOVWF  FE9
09738:  MOVLW  00
0973A:  ADDWFC xC5,W
0973C:  MOVWF  FEA
0973E:  MOVFF  FEC,03
09742:  MOVF   FED,F
09744:  MOVF   FEF,W
09746:  MOVWF  01
09748:  MOVLB  A
0974A:  MOVF   x4A,W
0974C:  SUBWF  03,W
0974E:  BTFSC  FD8.0
09750:  BRA    9758
09752:  MOVLB  0
09754:  GOTO   9B38
09758:  MOVLB  0
0975A:  BTFSS  FD8.2
0975C:  GOTO   9772
09760:  MOVF   01,W
09762:  MOVLB  A
09764:  SUBWF  x49,W
09766:  BTFSS  FD8.0
09768:  BRA    9770
0976A:  MOVLB  0
0976C:  GOTO   9B38
09770:  MOVLB  0
....................         unsigned int16 step_in_packet = 0;
09772:  MOVLB  A
09774:  CLRF   x4C
09776:  CLRF   x4B
09778:  MOVLB  0
.................... 
....................         // データを詰める（最大21点/パケット）
....................         for (; step_in_packet < IV_DATA_SIZE && iv_index < port_data_ptr->sweep_step;
0977A:  MOVLB  A
0977C:  MOVF   x4C,F
0977E:  BTFSC  FD8.2
09780:  BRA    9788
09782:  MOVLB  0
09784:  GOTO   9990
09788:  MOVLB  0
0978A:  MOVLB  A
0978C:  MOVF   x4B,W
0978E:  SUBLW  14
09790:  BTFSC  FD8.0
09792:  BRA    979A
09794:  MOVLB  0
09796:  GOTO   9990
0979A:  MOVLB  0
0979C:  MOVLW  01
0979E:  MOVLB  9
097A0:  ADDWF  xC4,W
097A2:  MOVWF  FE9
097A4:  MOVLW  00
097A6:  ADDWFC xC5,W
097A8:  MOVWF  FEA
097AA:  MOVFF  FEC,03
097AE:  MOVF   FED,F
097B0:  MOVF   FEF,W
097B2:  MOVWF  01
097B4:  MOVLB  A
097B6:  MOVF   x4A,W
097B8:  SUBWF  03,W
097BA:  BTFSC  FD8.0
097BC:  BRA    97C4
097BE:  MOVLB  0
097C0:  GOTO   9990
097C4:  MOVLB  0
097C6:  BTFSS  FD8.2
097C8:  GOTO   97DE
097CC:  MOVF   01,W
097CE:  MOVLB  A
097D0:  SUBWF  x49,W
097D2:  BTFSS  FD8.0
097D4:  BRA    97DC
097D6:  MOVLB  0
097D8:  GOTO   9990
097DC:  MOVLB  0
....................              step_in_packet++, iv_index++) {
....................             data_packet.data.iv_data[step_in_packet*3] = port_data_ptr->data_buffer[iv_index*3];
097DE:  MOVFF  A4C,A52
097E2:  MOVFF  A4B,A51
097E6:  MOVLB  A
097E8:  CLRF   x54
097EA:  MOVLW  03
097EC:  MOVWF  x53
097EE:  MOVLB  0
097F0:  CALL   8240
097F4:  MOVFF  02,A4E
097F8:  MOVFF  01,A4D
097FC:  MOVLW  C6
097FE:  MOVLB  A
09800:  ADDWF  x4D,W
09802:  MOVWF  01
09804:  MOVLW  09
09806:  ADDWFC x4E,W
09808:  MOVWF  03
0980A:  MOVF   01,W
0980C:  MOVWF  x4F
0980E:  MOVFF  03,A50
09812:  MOVFF  A4A,A52
09816:  MOVFF  A49,A51
0981A:  CLRF   x54
0981C:  MOVLW  03
0981E:  MOVWF  x53
09820:  MOVLB  0
09822:  CALL   8240
09826:  MOVFF  02,A52
0982A:  MOVFF  01,A51
0982E:  MOVLW  03
09830:  MOVLB  A
09832:  ADDWF  x51,W
09834:  MOVWF  01
09836:  MOVLW  00
09838:  ADDWFC x52,W
0983A:  MOVWF  03
0983C:  MOVF   01,W
0983E:  MOVLB  9
09840:  ADDWF  xC4,W
09842:  MOVWF  FE9
09844:  MOVF   xC5,W
09846:  ADDWFC 03,W
09848:  MOVWF  FEA
0984A:  MOVF   FEF,W
0984C:  MOVLB  A
0984E:  MOVWF  x53
09850:  MOVFF  A50,FEA
09854:  MOVFF  A4F,FE9
09858:  MOVFF  A53,FEF
....................             data_packet.data.iv_data[step_in_packet*3+1] = port_data_ptr->data_buffer[iv_index*3+1];
0985C:  MOVFF  A4C,A52
09860:  MOVFF  A4B,A51
09864:  CLRF   x54
09866:  MOVLW  03
09868:  MOVWF  x53
0986A:  MOVLB  0
0986C:  CALL   8240
09870:  MOVFF  02,A4E
09874:  MOVFF  01,A4D
09878:  MOVLW  01
0987A:  MOVLB  A
0987C:  ADDWF  x4D,F
0987E:  MOVLW  00
09880:  ADDWFC x4E,F
09882:  MOVLW  C6
09884:  ADDWF  x4D,W
09886:  MOVWF  01
09888:  MOVLW  09
0988A:  ADDWFC x4E,W
0988C:  MOVWF  03
0988E:  MOVF   01,W
09890:  MOVWF  x4F
09892:  MOVFF  03,A50
09896:  MOVFF  A4A,A52
0989A:  MOVFF  A49,A51
0989E:  CLRF   x54
098A0:  MOVLW  03
098A2:  MOVWF  x53
098A4:  MOVLB  0
098A6:  CALL   8240
098AA:  MOVFF  02,A52
098AE:  MOVFF  01,A51
098B2:  MOVLW  01
098B4:  MOVLB  A
098B6:  ADDWF  x51,F
098B8:  MOVLW  00
098BA:  ADDWFC x52,F
098BC:  MOVLW  03
098BE:  ADDWF  x51,W
098C0:  MOVWF  01
098C2:  MOVLW  00
098C4:  ADDWFC x52,W
098C6:  MOVWF  03
098C8:  MOVF   01,W
098CA:  MOVLB  9
098CC:  ADDWF  xC4,W
098CE:  MOVWF  FE9
098D0:  MOVF   xC5,W
098D2:  ADDWFC 03,W
098D4:  MOVWF  FEA
098D6:  MOVF   FEF,W
098D8:  MOVLB  A
098DA:  MOVWF  x53
098DC:  MOVFF  A50,FEA
098E0:  MOVFF  A4F,FE9
098E4:  MOVFF  A53,FEF
....................             data_packet.data.iv_data[step_in_packet*3+2] = port_data_ptr->data_buffer[iv_index*3+2];
098E8:  MOVFF  A4C,A52
098EC:  MOVFF  A4B,A51
098F0:  CLRF   x54
098F2:  MOVLW  03
098F4:  MOVWF  x53
098F6:  MOVLB  0
098F8:  CALL   8240
098FC:  MOVFF  02,A4E
09900:  MOVFF  01,A4D
09904:  MOVLW  02
09906:  MOVLB  A
09908:  ADDWF  x4D,F
0990A:  MOVLW  00
0990C:  ADDWFC x4E,F
0990E:  MOVLW  C6
09910:  ADDWF  x4D,W
09912:  MOVWF  01
09914:  MOVLW  09
09916:  ADDWFC x4E,W
09918:  MOVWF  03
0991A:  MOVF   01,W
0991C:  MOVWF  x4F
0991E:  MOVFF  03,A50
09922:  MOVFF  A4A,A52
09926:  MOVFF  A49,A51
0992A:  CLRF   x54
0992C:  MOVLW  03
0992E:  MOVWF  x53
09930:  MOVLB  0
09932:  CALL   8240
09936:  MOVFF  02,A52
0993A:  MOVFF  01,A51
0993E:  MOVLW  02
09940:  MOVLB  A
09942:  ADDWF  x51,F
09944:  MOVLW  00
09946:  ADDWFC x52,F
09948:  MOVLW  03
0994A:  ADDWF  x51,W
0994C:  MOVWF  01
0994E:  MOVLW  00
09950:  ADDWFC x52,W
09952:  MOVWF  03
09954:  MOVF   01,W
09956:  MOVLB  9
09958:  ADDWF  xC4,W
0995A:  MOVWF  FE9
0995C:  MOVF   xC5,W
0995E:  ADDWFC 03,W
09960:  MOVWF  FEA
09962:  MOVF   FEF,W
09964:  MOVLB  A
09966:  MOVWF  x53
09968:  MOVFF  A50,FEA
0996C:  MOVFF  A4F,FE9
09970:  MOVFF  A53,FEF
09974:  MOVLB  0
09976:  MOVLB  A
09978:  MOVF   x4C,W
0997A:  MOVWF  03
0997C:  MOVF   x4B,W
0997E:  INCF   x4B,F
09980:  BTFSC  FD8.2
09982:  INCF   x4C,F
09984:  INCF   x49,F
09986:  BTFSC  FD8.2
09988:  INCF   x4A,F
0998A:  MOVLB  0
0998C:  GOTO   977A
....................         }
.................... 
....................         // 残り領域を 0x00 で埋める（未使用部分）
....................         for (; step_in_packet < 21; step_in_packet++) {
09990:  MOVLB  A
09992:  MOVF   x4C,F
09994:  BTFSC  FD8.2
09996:  BRA    999E
09998:  MOVLB  0
0999A:  GOTO   9A58
0999E:  MOVLB  0
099A0:  MOVLB  A
099A2:  MOVF   x4B,W
099A4:  SUBLW  14
099A6:  BTFSC  FD8.0
099A8:  BRA    99B0
099AA:  MOVLB  0
099AC:  GOTO   9A58
099B0:  MOVLB  0
....................             data_packet.data.iv_data[step_in_packet*3]  = 0x00;
099B2:  MOVFF  A4C,A52
099B6:  MOVFF  A4B,A51
099BA:  MOVLB  A
099BC:  CLRF   x54
099BE:  MOVLW  03
099C0:  MOVWF  x53
099C2:  MOVLB  0
099C4:  CALL   8240
099C8:  MOVFF  02,A4E
099CC:  MOVFF  01,A4D
099D0:  MOVLW  C6
099D2:  MOVLB  A
099D4:  ADDWF  x4D,W
099D6:  MOVWF  FE9
099D8:  MOVLW  09
099DA:  ADDWFC x4E,W
099DC:  MOVWF  FEA
099DE:  CLRF   FEF
....................             data_packet.data.iv_data[step_in_packet*3+1] = 0x00;
099E0:  MOVFF  A4C,A52
099E4:  MOVFF  A4B,A51
099E8:  CLRF   x54
099EA:  MOVLW  03
099EC:  MOVWF  x53
099EE:  MOVLB  0
099F0:  CALL   8240
099F4:  MOVFF  02,A4E
099F8:  MOVFF  01,A4D
099FC:  MOVLW  01
099FE:  MOVLB  A
09A00:  ADDWF  x4D,F
09A02:  MOVLW  00
09A04:  ADDWFC x4E,F
09A06:  MOVLW  C6
09A08:  ADDWF  x4D,W
09A0A:  MOVWF  FE9
09A0C:  MOVLW  09
09A0E:  ADDWFC x4E,W
09A10:  MOVWF  FEA
09A12:  CLRF   FEF
....................             data_packet.data.iv_data[step_in_packet*3+2] = 0x00;
09A14:  MOVFF  A4C,A52
09A18:  MOVFF  A4B,A51
09A1C:  CLRF   x54
09A1E:  MOVLW  03
09A20:  MOVWF  x53
09A22:  MOVLB  0
09A24:  CALL   8240
09A28:  MOVFF  02,A4E
09A2C:  MOVFF  01,A4D
09A30:  MOVLW  02
09A32:  MOVLB  A
09A34:  ADDWF  x4D,F
09A36:  MOVLW  00
09A38:  ADDWFC x4E,F
09A3A:  MOVLW  C6
09A3C:  ADDWF  x4D,W
09A3E:  MOVWF  FE9
09A40:  MOVLW  09
09A42:  ADDWFC x4E,W
09A44:  MOVWF  FEA
09A46:  CLRF   FEF
09A48:  MOVLB  0
09A4A:  MOVLB  A
09A4C:  INCF   x4B,F
09A4E:  BTFSC  FD8.2
09A50:  INCF   x4C,F
09A52:  MOVLB  0
09A54:  GOTO   9990
....................         }
.................... 
....................         // フラッシュに書き込み
....................         if (port_data_ptr->port_num == 1) {
09A58:  MOVLB  9
09A5A:  MOVF   xC4,W
09A5C:  MOVWF  FE9
09A5E:  MOVF   xC5,W
09A60:  MOVWF  FEA
09A62:  DECFSZ FEF,W
09A64:  BRA    9A6A
09A66:  BRA    9A70
09A68:  MOVLB  0
09A6A:  MOVLB  0
09A6C:  GOTO   9AC8
09A70:  MOVLB  0
....................             data_packet.data.crc = calc_crc8(data_packet_ptr->raw, PACKET_SIZE - 1);
09A72:  MOVLB  A
09A74:  MOVF   x06,W
09A76:  MOVWF  01
09A78:  MOVF   x07,W
09A7A:  MOVWF  03
09A7C:  MOVF   01,W
09A7E:  MOVWF  x4D
09A80:  MOVFF  03,A4E
09A84:  MOVFF  A4E,AEB
09A88:  MOVFF  A4D,AEA
09A8C:  MOVLW  3F
09A8E:  MOVWF  xEC
09A90:  MOVLB  0
09A92:  CALL   30EA
09A96:  MOVFF  01,A05
....................             misf_write_data(FLASH_ID_IV1_DATA, data_packet_ptr->raw, PACKET_SIZE);
09A9A:  MOVLB  A
09A9C:  MOVF   x06,W
09A9E:  MOVWF  01
09AA0:  MOVF   x07,W
09AA2:  MOVWF  03
09AA4:  MOVF   01,W
09AA6:  MOVWF  x4D
09AA8:  MOVFF  03,A4E
09AAC:  MOVLW  04
09AAE:  MOVWF  x4F
09AB0:  MOVFF  A4E,A51
09AB4:  MOVFF  A4D,A50
09AB8:  CLRF   x53
09ABA:  MOVLW  40
09ABC:  MOVWF  x52
09ABE:  MOVLB  0
09AC0:  CALL   428E
....................             // for (int i = 0; i < PACKET_SIZE; i++) {
....................                 // fprintf(PC, "%02X ", data_packet_ptr->raw[i]);
....................             // }
....................         } else if (port_data_ptr->port_num == 2) {
09AC4:  GOTO   9B34
09AC8:  MOVLB  9
09ACA:  MOVF   xC4,W
09ACC:  MOVWF  FE9
09ACE:  MOVF   xC5,W
09AD0:  MOVWF  FEA
09AD2:  MOVF   FEF,W
09AD4:  SUBLW  02
09AD6:  BTFSC  FD8.2
09AD8:  BRA    9AE0
09ADA:  MOVLB  0
09ADC:  GOTO   9B34
09AE0:  MOVLB  0
....................             data_packet.data.crc = calc_crc8(data_packet_ptr->raw, PACKET_SIZE - 1);
09AE2:  MOVLB  A
09AE4:  MOVF   x06,W
09AE6:  MOVWF  01
09AE8:  MOVF   x07,W
09AEA:  MOVWF  03
09AEC:  MOVF   01,W
09AEE:  MOVWF  x4D
09AF0:  MOVFF  03,A4E
09AF4:  MOVFF  A4E,AEB
09AF8:  MOVFF  A4D,AEA
09AFC:  MOVLW  3F
09AFE:  MOVWF  xEC
09B00:  MOVLB  0
09B02:  CALL   30EA
09B06:  MOVFF  01,A05
....................             misf_write_data(FLASH_ID_IV2_DATA, data_packet_ptr->raw, PACKET_SIZE);
09B0A:  MOVLB  A
09B0C:  MOVF   x06,W
09B0E:  MOVWF  01
09B10:  MOVF   x07,W
09B12:  MOVWF  03
09B14:  MOVF   01,W
09B16:  MOVWF  x4D
09B18:  MOVFF  03,A4E
09B1C:  MOVLW  06
09B1E:  MOVWF  x4F
09B20:  MOVFF  A4E,A51
09B24:  MOVFF  A4D,A50
09B28:  CLRF   x53
09B2A:  MOVLW  40
09B2C:  MOVWF  x52
09B2E:  MOVLB  0
09B30:  CALL   428E
....................         }
09B34:  GOTO   9730
....................     }
09B38:  RETURN 0
.................... 
....................     // misf_update_address_area(); // 必要なら有効化
.................... }
.................... 
.................... iv_env_t create_meas_data()
.................... {
....................     iv_env_t data;
....................     memset(&data, 0, sizeof(data));
*
091EA:  MOVLW  09
091EC:  MOVWF  FEA
091EE:  MOVLW  E2
091F0:  MOVWF  FE9
091F2:  CLRF   00
091F4:  CLRF   02
091F6:  MOVLW  0C
091F8:  MOVWF  01
091FA:  CALL   234C
....................     data.time           = get_current_sec();
091FE:  CALL   3C18
09202:  MOVFF  03,9E5
09206:  MOVFF  02,9E4
0920A:  MOVFF  01,9E3
0920E:  MOVFF  00,9E2
....................     data.temp_py_top    = ad7490_read(ADC_TEMP_PY_TOP);
09212:  MOVLW  0D
09214:  MOVLB  9
09216:  MOVWF  xEE
09218:  MOVLB  0
0921A:  CALL   24C2
0921E:  MOVFF  02,9E9
09222:  MOVFF  01,9E8
....................     data.temp_py_bot    = ad7490_read(ADC_TEMP_PY_BOT);
09226:  MOVLW  0E
09228:  MOVLB  9
0922A:  MOVWF  xEE
0922C:  MOVLB  0
0922E:  CALL   24C2
09232:  MOVFF  02,9EB
09236:  MOVFF  01,9EA
....................     data.temp_mis7      = ad7490_read(ADC_TEMP_MIS7);
0923A:  MOVLW  0C
0923C:  MOVLB  9
0923E:  MOVWF  xEE
09240:  MOVLB  0
09242:  CALL   24C2
09246:  MOVFF  02,9ED
0924A:  MOVFF  01,9EC
....................     data.pd             = ad7490_read(ADC_PD);
0924E:  MOVLW  0F
09250:  MOVLB  9
09252:  MOVWF  xEE
09254:  MOVLB  0
09256:  CALL   24C2
0925A:  MOVFF  02,9E7
0925E:  MOVFF  01,9E6
....................     return data;
09262:  MOVLW  E2
09264:  MOVWF  01
09266:  MOVLW  09
09268:  MOVWF  02
0926A:  RETURN 0
.................... }
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data)
.................... {
....................     // ADCの12ビット値を電力密度（mW/cm²）に変換する例
....................     // ここでは仮に1 LSB = 0.1 mW/cm²とする
....................     return (unsigned int16)(data);
*
0835A:  MOVLB  1
0835C:  MOVF   xE9,W
0835E:  MOVWF  01
08360:  MOVF   xEA,W
08362:  MOVWF  02
08364:  MOVLB  0
08366:  GOTO   8FA4 (RETURN)
.................... }
.................... 
.................... int16 calc_curr_value(unsigned int16 data){
....................     float voltage_mv;
....................     float current_ma;
.................... 
....................     // 12ビットADCの値を[mV]に変換
....................     voltage_mv = (float)data * ADC_REF_VOLTAGE_MV / ADC_MAX_READING;
*
08D50:  MOVFF  1EA,1F4
08D54:  MOVFF  1E9,1F3
08D58:  GOTO   836A
08D5C:  MOVFF  03,1F6
08D60:  MOVFF  02,1F5
08D64:  MOVFF  01,1F4
08D68:  MOVFF  00,1F3
08D6C:  MOVFF  1F6,1FA
08D70:  MOVFF  1F5,1F9
08D74:  MOVFF  1F4,1F8
08D78:  MOVFF  1F3,1F7
08D7C:  MOVLB  1
08D7E:  CLRF   xFE
08D80:  MOVLW  40
08D82:  MOVWF  xFD
08D84:  MOVLW  1C
08D86:  MOVWF  xFC
08D88:  MOVLW  8A
08D8A:  MOVWF  xFB
08D8C:  MOVLB  0
08D8E:  GOTO   83B0
08D92:  MOVFF  03,1F6
08D96:  MOVFF  02,1F5
08D9A:  MOVFF  01,1F4
08D9E:  MOVFF  00,1F3
08DA2:  MOVFF  1F6,1FA
08DA6:  MOVFF  1F5,1F9
08DAA:  MOVFF  1F4,1F8
08DAE:  MOVFF  1F3,1F7
08DB2:  MOVLB  1
08DB4:  CLRF   xFE
08DB6:  MOVLW  F0
08DB8:  MOVWF  xFD
08DBA:  MOVLW  7F
08DBC:  MOVWF  xFC
08DBE:  MOVLW  8A
08DC0:  MOVWF  xFB
08DC2:  MOVLB  0
08DC4:  CALL   850E
08DC8:  MOVFF  03,1EE
08DCC:  MOVFF  02,1ED
08DD0:  MOVFF  01,1EC
08DD4:  MOVFF  00,1EB
.................... 
....................     // オフセット電圧(ADC_CURR_REF_VOLTAGE_MV)との差から電流[mA]を算出
....................     current_ma = (voltage_mv - ADC_CURR_REF_VOLTAGE_MV) / (SHUNT_RESISTANCE_OHM * AMP_GAIN);
08DD8:  BSF    FD8.1
08DDA:  MOVFF  1EE,1F6
08DDE:  MOVFF  1ED,1F5
08DE2:  MOVFF  1EC,1F4
08DE6:  MOVFF  1EB,1F3
08DEA:  MOVLB  1
08DEC:  CLRF   xFA
08DEE:  MOVLW  40
08DF0:  MOVWF  xF9
08DF2:  MOVLW  1C
08DF4:  MOVWF  xF8
08DF6:  MOVLW  89
08DF8:  MOVWF  xF7
08DFA:  MOVLB  0
08DFC:  GOTO   87FC
08E00:  MOVFF  03,1F6
08E04:  MOVFF  02,1F5
08E08:  MOVFF  01,1F4
08E0C:  MOVFF  00,1F3
08E10:  MOVFF  1F6,1FA
08E14:  MOVFF  1F5,1F9
08E18:  MOVFF  1F4,1F8
08E1C:  MOVFF  1F3,1F7
08E20:  MOVLB  1
08E22:  CLRF   xFE
08E24:  CLRF   xFD
08E26:  MOVLW  20
08E28:  MOVWF  xFC
08E2A:  MOVLW  82
08E2C:  MOVWF  xFB
08E2E:  MOVLB  0
08E30:  CALL   850E
08E34:  MOVFF  03,1F2
08E38:  MOVFF  02,1F1
08E3C:  MOVFF  01,1F0
08E40:  MOVFF  00,1EF
.................... 
....................     return (int16)current_ma;
08E44:  MOVFF  1F2,1F6
08E48:  MOVFF  1F1,1F5
08E4C:  MOVFF  1F0,1F4
08E50:  MOVFF  1EF,1F3
08E54:  GOTO   8CF6
08E58:  MOVF   01,W
08E5A:  MOVWF  01
08E5C:  MOVF   02,W
08E5E:  MOVWF  02
08E60:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "domain/cigs_piclog.c"
.................... #include "cigs_piclog.h"                          // 同じフォルダのヘッダー
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/timer.h"                   // タイマーライブラリ  
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... #INT_TIMER1 
.................... static void TIMER1_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... void set_current_sec(unsigned int32 new_sec);
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "cigs_flash.h"                 // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"               // フラッシュ操作キュー
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                 // フラッシュデバイス
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // #define PICLOG_DEBUG
.................... #define MISSION_ID_PICLOG 0x03  // PICLOGミッションID
.................... 
.................... void piclog_make(int8 function, int8 parameter)
*
050EC:  MOVLW  02
050EE:  MOVLB  2
050F0:  MOVWF  x18
050F2:  MOVLW  11
050F4:  MOVWF  x17
.................... {
....................     piclog_t piclog;
....................     piclog_t *piclog_ptr = &piclog;
....................     memset(piclog_ptr, 0x00, PICLOG_PACKET_SIZE);
050F6:  MOVFF  218,FEA
050FA:  MOVFF  217,FE9
050FE:  CLRF   00
05100:  CLRF   02
05102:  MOVLW  06
05104:  MOVWF  01
05106:  MOVLB  0
05108:  CALL   234C
....................     piclog_ptr->fields.time = get_current_sec();
0510C:  MOVLB  2
0510E:  MOVF   x17,W
05110:  MOVWF  01
05112:  MOVF   x18,W
05114:  MOVWF  03
05116:  MOVF   01,W
05118:  MOVWF  x1A
0511A:  MOVFF  03,21B
0511E:  MOVLB  0
05120:  CALL   3C18
05124:  MOVFF  21B,FEA
05128:  MOVFF  21A,FE9
0512C:  MOVFF  00,FEF
05130:  MOVFF  01,FEC
05134:  MOVFF  02,FEC
05138:  MOVFF  03,FEC
0513C:  MOVF   FED,F
0513E:  MOVF   FED,F
05140:  MOVF   FED,F
....................     piclog_ptr->fields.function = function;
05142:  MOVLW  04
05144:  MOVLB  2
05146:  ADDWF  x17,W
05148:  MOVWF  FE9
0514A:  MOVLW  00
0514C:  ADDWFC x18,W
0514E:  MOVWF  FEA
05150:  MOVFF  20F,FEF
....................     piclog_ptr->fields.parameter = parameter;
05154:  MOVLW  05
05156:  ADDWF  x17,W
05158:  MOVWF  FE9
0515A:  MOVLW  00
0515C:  ADDWFC x18,W
0515E:  MOVWF  FEA
05160:  MOVFF  210,FEF
.................... 
....................     printf("[PICLOG] : ");
05164:  MOVLW  7E
05166:  MOVWF  FF6
05168:  MOVLW  06
0516A:  MOVWF  FF7
0516C:  MOVLW  00
0516E:  MOVWF  FF8
05170:  MOVLB  0
05172:  CALL   22DC
....................     for (int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
05176:  MOVLB  2
05178:  CLRF   x19
0517A:  MOVLB  0
0517C:  MOVLB  2
0517E:  MOVF   x19,W
05180:  SUBLW  05
05182:  BTFSC  FD8.0
05184:  BRA    518C
05186:  MOVLB  0
05188:  GOTO   51C8
0518C:  MOVLB  0
....................         printf("%02X ", piclog_ptr->bytes[i]);
0518E:  MOVLB  2
05190:  MOVF   x19,W
05192:  ADDWF  x17,W
05194:  MOVWF  FE9
05196:  MOVLW  00
05198:  ADDWFC x18,W
0519A:  MOVWF  FEA
0519C:  MOVFF  FEF,21A
051A0:  MOVFF  21A,9E8
051A4:  MOVLW  37
051A6:  MOVLB  9
051A8:  MOVWF  xE9
051AA:  MOVLB  0
051AC:  CALL   2542
051B0:  MOVLW  20
051B2:  BTFSS  FA6.6
051B4:  GOTO   51B2
051B8:  MOVLB  E
051BA:  MOVWF  xF9
051BC:  MOVLB  0
051BE:  MOVLB  2
051C0:  INCF   x19,F
051C2:  MOVLB  0
051C4:  GOTO   517C
....................     }
....................     printf("\r\n");
051C8:  MOVLW  0D
051CA:  BTFSS  FA6.6
051CC:  GOTO   51CA
051D0:  MOVLB  E
051D2:  MOVWF  xF9
051D4:  MOVLW  0A
051D6:  MOVLB  0
051D8:  BTFSS  FA6.6
051DA:  GOTO   51D8
051DE:  MOVLB  E
051E0:  MOVWF  xF9
.................... 
....................     misf_write_data(FLASH_ID_PICLOG, piclog_ptr->bytes, PICLOG_PACKET_SIZE);
051E2:  MOVLB  2
051E4:  MOVF   x17,W
051E6:  MOVWF  01
051E8:  MOVF   x18,W
051EA:  MOVWF  03
051EC:  MOVF   01,W
051EE:  MOVWF  x1A
051F0:  MOVFF  03,21B
051F4:  MOVLW  01
051F6:  MOVLB  A
051F8:  MOVWF  x4F
051FA:  MOVFF  21B,A51
051FE:  MOVFF  21A,A50
05202:  CLRF   x53
05204:  MOVLW  06
05206:  MOVWF  x52
05208:  MOVLB  0
0520A:  CALL   428E
....................     misf_update_address_area();
0520E:  CALL   505E
05212:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "domain/cigs_smf.c"
.................... #include "cigs_smf.h"  
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #include "../hal/cigs_config.h" // int8,int32 型など(CCS C) 依存
.................... #include "cigs_flash.h"       // MISF_ADDRESS_TABLE, misf_counter_table 依存
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... extern int1 smf_update_flag[10]; // SMF更新フラグ
.................... 
.................... 
.................... // SMF管理用構造体
.................... typedef struct {
....................     ADDRESS_AREA_T header_area;
....................     ADDRESS_AREA_T data_area;
.................... } SMF_AREA_T;
.................... #define SMF_ID_COUNT 7
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 reserved;
.................... } SMF_PARTITION;
.................... 
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         SMF_PARTITION headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table);
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "cigs_flash.h"
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mt25q.h"              // Flash device definitions
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/tool/smf_queue.h"            // システム設定 
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/tool/calc_tools.h"           // SMF処理関数 
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/mmj_smf_memorymap.h" 
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... typedef enum smf_memory_id_t{
....................     // SATO
....................     SMF_SATO_DATA_TABLE = 0xA0,
....................     SMF_SATO_PICLOG = 0xA1,
....................     SMF_SATO_INNER_DIODE_HEADER = 0xA2,
....................     SMF_SATO_INNER_DIODE_DATA = 0xA3,
....................     SMF_SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SMF_SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     SMF_CIGS_DATA_TABLE = 0xC0,
....................     SMF_CIGS_PICLOG = 0xC1,
....................     SMF_CIGS_ENVIRO = 0xC2,
....................     SMF_CIGS_IV1_HEADER = 0xC3,
....................     SMF_CIGS_IV1_DATA = 0xC4,
....................     SMF_CIGS_IV2_HEADER = 0xC5,
....................     SMF_CIGS_IV2_DATA = 0xC6,
.................... };
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS   0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS   0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS     0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS       0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS         0x06AB0FFF
.................... #define CIGS_ENVIRO_START_ADDRESS       0x06AB1000
.................... #define CIGS_ENVIRO_END_ADDRESS         0x06B50FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS   0x06B51000
.................... #define CIGS_IV1_HEADER_END_ADDRESS     0x06BF0FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS     0x06BF1000
.................... #define CIGS_IV1_DATA_END_ADDRESS       0x06FF0FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS   0x06FF1000
.................... #define CIGS_IV2_HEADER_END_ADDRESS     0x07090FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS     0x07091000
.................... #define CIGS_IV2_DATA_END_ADDRESS       0x07490FFF
.................... 
.................... /*
.................... enum smf_memory_id{
....................     // SATO
....................     SATO_DATA_TABLE = 0xA0,
....................     SATO_PICLOG = 0xA1,
....................     SATO_INNER_DIODE_HEADER = 0xA2,
....................     SATO_INNER_DIODE_DATA = 0xA3,
....................     SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     IDF_CIGS_DATA_TABLE = 0xC0,
....................     IDF_CIGS_PICLOG = 0xC1,
....................     IDF_CIGS_ENVIRO = 0xC2,
....................     IDF_CIGS_IV1_HEADER = 0xC3,
....................     IDF_CIGS_IV1_DATA = 0xC4,
....................     IDF_CIGS_IV2_HEADER = 0xC5,
....................     IDF_CIGS_IV2_DATA = 0xC6,
.................... }
.................... */
.................... // DATA ID for CIGS
.................... #define DATA_ID_CIGS_DATA_TABLE 0xC0
.................... #define DATA_ID_CIGS_PICLOG 0xC1
.................... #define DATA_ID_CIGS_ENVIRO 0xC2
.................... #define DATA_ID_CIGS_IV1_HEADER 0xC3
.................... #define DATA_ID_CIGS_IV1_DATA 0xC4
.................... #define DATA_ID_CIGS_IV2_HEADER 0xC5
.................... #define DATA_ID_CIGS_IV2_DATA 0xC6
.................... 
.................... // FLASH ADDRESS for CIGS
.................... #define SMF_DATA_TABLE_HEADER_START_ADDRESS   0x073B0000
.................... #define SMF_DATA_TABLE_HEADER_END_ADDRESS     0x073B0FFF
.................... #define SMF_DATA_TABLE_DATA_START_ADDRESS     0x073B1000
.................... #define SMF_DATA_TABLE_DATA_END_ADDRESS       0x073B1FFF
.................... 
.................... #define SMF_PICLOG_HEADER_START_ADDRESS       0x073B2000
.................... #define SMF_PICLOG_HEADER_END_ADDRESS         0x073B2FFF
.................... #define SMF_PICLOG_DATA_START_ADDRESS         0x073B3000
.................... #define SMF_PICLOG_DATA_END_ADDRESS           0x073C2FFF
.................... 
.................... #define SMF_ENVIRO_HEADER_START_ADDRESS       0x073C3000
.................... #define SMF_ENVIRO_HEADER_END_ADDRESS         0x073C3FFF
.................... #define SMF_ENVIRO_DATA_START_ADDRESS         0x073C4000
.................... #define SMF_ENVIRO_DATA_END_ADDRESS           0x07463FFF
.................... 
.................... #define SMF_IV1_HEADER_HEADER_START_ADDRESS   0x07464000
.................... #define SMF_IV1_HEADER_HEADER_END_ADDRESS     0x07464FFF
.................... #define SMF_IV1_HEADER_DATA_START_ADDRESS     0x07465000
.................... #define SMF_IV1_HEADER_DATA_END_ADDRESS       0x07504FFF
.................... 
.................... #define SMF_IV1_DATA_HEADER_START_ADDRESS     0x07505000
.................... #define SMF_IV1_DATA_HEADER_END_ADDRESS       0x07505FFF
.................... #define SMF_IV1_DATA_DATA_START_ADDRESS       0x07506000
.................... #define SMF_IV1_DATA_DATA_END_ADDRESS         0x07905FFF
.................... 
.................... #define SMF_IV2_HEADER_HEADER_START_ADDRESS   0x07906000
.................... #define SMF_IV2_HEADER_HEADER_END_ADDRESS     0x07906FFF
.................... #define SMF_IV2_HEADER_DATA_START_ADDRESS     0x07907000
.................... #define SMF_IV2_HEADER_DATA_END_ADDRESS       0x079A6FFF
.................... 
.................... #define SMF_IV2_DATA_HEADER_START_ADDRESS     0x079A7000
.................... #define SMF_IV2_DATA_HEADER_END_ADDRESS       0x079A7FFF
.................... #define SMF_IV2_DATA_DATA_START_ADDRESS       0x079A8000
.................... #define SMF_IV2_DATA_DATA_END_ADDRESS         0x07DA7FFF
.................... 
.................... 
.................... // FLASH SIZE for CIGS
.................... #define SMF_DATA_TABLE_SIZE  4096
.................... #define SMF_PICLOG_SIZE     1310720
.................... #define SMF_ENVIRO_SIZE     1310720
.................... #define SMF_IV1_HEADER_SIZE  655360
.................... #define SMF_IV1_DATA_SIZE    4194304
.................... #define SMF_IV2_HEADER_SIZE  655360
.................... #define SMF_IV2_DATA_SIZE    4194304
.................... 
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... #define CRC_RETRY_COUNT 5     // CRC検証のリトライ回数 (smf_queue.hの値と整合するなら一元化検討)
.................... 
.................... 
.................... const ADDRESS_AREA_T SMF_ADDRESS_TABLE[FLASH_ID_COUNT] = {
....................     { CIGS_DATA_TABLE_START_ADDRESS,   CIGS_DATA_TABLE_END_ADDRESS,   MISF_CIGS_DATA_TABLE_SIZE },
....................     { CIGS_PICLOG_START_ADDRESS,       CIGS_PICLOG_END_ADDRESS,       MISF_CIGS_PICLOG_SIZE },
....................     { CIGS_ENVIRO_START_ADDRESS,       CIGS_ENVIRO_END_ADDRESS,       MISF_CIGS_ENVIRO_SIZE },
....................     { CIGS_IV1_HEADER_START_ADDRESS,   CIGS_IV1_HEADER_END_ADDRESS,   MISF_CIGS_IV1_HEADER_SIZE },
....................     { CIGS_IV1_DATA_START_ADDRESS,     CIGS_IV1_DATA_END_ADDRESS,     MISF_CIGS_IV1_DATA_SIZE },
....................     { CIGS_IV2_HEADER_START_ADDRESS,   CIGS_IV2_HEADER_END_ADDRESS,   MISF_CIGS_IV2_HEADER_SIZE },
....................     { CIGS_IV2_DATA_START_ADDRESS,     CIGS_IV2_DATA_END_ADDRESS,     MISF_CIGS_IV2_DATA_SIZE }
.................... };
.................... 
.................... int1 smf_update_flag[10];
.................... 
.................... void update_smf_header()
.................... {
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... }
.................... 
.................... 
.................... void smf_data_table_init()
.................... {
....................     fprintf(PC, "SMF Data Table Initialize\r\n");
*
07A42:  MOVLW  8A
07A44:  MOVWF  FF6
07A46:  MOVLW  06
07A48:  MOVWF  FF7
07A4A:  MOVLW  00
07A4C:  MOVWF  FF8
07A4E:  CALL   22DC
....................     for ( unsigned int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_IV2_DATA_END_ADDRESS; address += SUBSECTOR_SIZE )
07A52:  MOVLW  06
07A54:  MOVLB  1
07A56:  MOVWF  xF8
07A58:  MOVLW  AA
07A5A:  MOVWF  xF7
07A5C:  CLRF   xF6
07A5E:  CLRF   xF5
07A60:  MOVLB  0
07A62:  MOVLB  1
07A64:  MOVF   xF8,W
07A66:  SUBLW  07
07A68:  BTFSC  FD8.0
07A6A:  BRA    7A72
07A6C:  MOVLB  0
07A6E:  GOTO   7AF4
07A72:  MOVLB  0
07A74:  BTFSS  FD8.2
07A76:  GOTO   7ABC
07A7A:  MOVLB  1
07A7C:  MOVF   xF7,W
07A7E:  SUBLW  49
07A80:  BTFSC  FD8.0
07A82:  BRA    7A8A
07A84:  MOVLB  0
07A86:  GOTO   7AF4
07A8A:  MOVLB  0
07A8C:  BTFSS  FD8.2
07A8E:  GOTO   7ABC
07A92:  MOVLB  1
07A94:  MOVF   xF6,W
07A96:  SUBLW  0F
07A98:  BTFSC  FD8.0
07A9A:  BRA    7AA2
07A9C:  MOVLB  0
07A9E:  GOTO   7AF4
07AA2:  MOVLB  0
07AA4:  BTFSS  FD8.2
07AA6:  GOTO   7ABC
07AAA:  MOVLB  1
07AAC:  MOVF   xF5,W
07AAE:  SUBLW  FE
07AB0:  BTFSC  FD8.0
07AB2:  BRA    7ABA
07AB4:  MOVLB  0
07AB6:  GOTO   7AF4
07ABA:  MOVLB  0
....................     {
....................         subsector_4kByte_erase(smf, address);
07ABC:  MOVFF  119,A07
07AC0:  MOVFF  118,A06
07AC4:  MOVFF  117,A05
07AC8:  MOVFF  116,A04
07ACC:  MOVFF  1F8,A0B
07AD0:  MOVFF  1F7,A0A
07AD4:  MOVFF  1F6,A09
07AD8:  MOVFF  1F5,A08
07ADC:  CALL   4D3A
07AE0:  MOVLW  10
07AE2:  MOVLB  1
07AE4:  ADDWF  xF6,F
07AE6:  MOVLW  00
07AE8:  ADDWFC xF7,F
07AEA:  MOVLW  00
07AEC:  ADDWFC xF8,F
07AEE:  MOVLB  0
07AF0:  GOTO   7A62
....................     }
....................     smf_data_table_t smf_data_table = {0};
07AF4:  MOVLB  1
07AF6:  CLRF   xF9
07AF8:  CLRF   xFA
07AFA:  CLRF   xFB
07AFC:  CLRF   xFC
07AFE:  CLRF   xFD
07B00:  CLRF   xFE
07B02:  CLRF   xFF
07B04:  MOVLB  2
07B06:  CLRF   x00
07B08:  CLRF   x01
07B0A:  CLRF   x02
07B0C:  CLRF   x03
07B0E:  CLRF   x04
07B10:  CLRF   x05
07B12:  CLRF   x06
07B14:  CLRF   x07
07B16:  CLRF   x08
07B18:  CLRF   x09
07B1A:  CLRF   x0A
07B1C:  CLRF   x0B
07B1E:  CLRF   x0C
07B20:  CLRF   x0D
07B22:  CLRF   x0E
07B24:  CLRF   x0F
07B26:  CLRF   x10
07B28:  CLRF   x11
07B2A:  CLRF   x12
07B2C:  CLRF   x13
07B2E:  CLRF   x14
07B30:  CLRF   x15
07B32:  CLRF   x16
07B34:  CLRF   x17
07B36:  CLRF   x18
07B38:  CLRF   x19
07B3A:  CLRF   x1A
07B3C:  CLRF   x1B
07B3E:  CLRF   x1C
07B40:  CLRF   x1D
07B42:  CLRF   x1E
07B44:  CLRF   x1F
07B46:  CLRF   x20
07B48:  CLRF   x21
07B4A:  CLRF   x22
07B4C:  CLRF   x23
07B4E:  CLRF   x24
07B50:  CLRF   x25
07B52:  CLRF   x26
07B54:  CLRF   x27
07B56:  CLRF   x28
07B58:  CLRF   x29
07B5A:  CLRF   x2A
07B5C:  CLRF   x2B
07B5E:  CLRF   x2C
07B60:  CLRF   x2D
07B62:  CLRF   x2E
07B64:  CLRF   x2F
07B66:  CLRF   x30
07B68:  CLRF   x31
07B6A:  CLRF   x32
07B6C:  CLRF   x33
07B6E:  CLRF   x34
07B70:  CLRF   x35
07B72:  CLRF   x36
07B74:  CLRF   x37
07B76:  CLRF   x38
....................     smf_data_table.fields.crc = calc_crc8(smf_data_table.bytes, PACKET_SIZE - 1); // CRCを計算して初期化    
07B78:  MOVLW  01
07B7A:  MOVLB  A
07B7C:  MOVWF  xEB
07B7E:  MOVLW  F9
07B80:  MOVWF  xEA
07B82:  MOVLW  3F
07B84:  MOVWF  xEC
07B86:  MOVLB  0
07B88:  CALL   30EA
07B8C:  MOVFF  01,238
....................     write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table.bytes, PACKET_SIZE);
07B90:  MOVFF  119,AED
07B94:  MOVFF  118,AEC
07B98:  MOVFF  117,AEB
07B9C:  MOVFF  116,AEA
07BA0:  MOVLW  06
07BA2:  MOVLB  A
07BA4:  MOVWF  xF1
07BA6:  MOVLW  AA
07BA8:  MOVWF  xF0
07BAA:  CLRF   xEF
07BAC:  CLRF   xEE
07BAE:  MOVLW  01
07BB0:  MOVWF  xF3
07BB2:  MOVLW  F9
07BB4:  MOVWF  xF2
07BB6:  CLRF   xF5
07BB8:  MOVLW  40
07BBA:  MOVWF  xF4
07BBC:  MOVLB  0
07BBE:  CALL   3F36
07BC2:  RETURN 0
.................... }
.................... 
.................... void read_smf_header(smf_data_table_t *smf_data_table)
.................... {
....................     int8 retry_count;
.................... 
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
....................     {
....................         // ヘッダを読み出し
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
....................         print_smf_counter_status(smf_data_table);
.................... 
....................         // CRC検証
....................         if (is_crc_valid(smf_data_table->bytes, PACKET_SIZE))
....................         {
....................             return; // 成功したら終了
....................         }
....................         // NGなら少し待って再試行
....................         printf("CRC ERROR %d\r\n", retry_count + 1);
....................     }
.................... 
....................     // ここまで来たら失敗
....................     printf("CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
.................... 
....................     // 読み込み失敗時は初期化しておく
....................     smf_data_table_init();
....................     read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
.................... 
....................     return;
.................... }
.................... 
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table)
.................... {
....................     int1 crc_valid = 0;
....................     int8 readdata[PACKET_SIZE];
....................     smf_data_table->fields.crc = calc_crc8(smf_data_table->bytes, PACKET_SIZE - 1); // CRCを更新
.................... 
....................     for (int8 retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE); // ヘッダーを書き込み
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
....................         if (is_crc_valid(readdata, PACKET_SIZE))
....................         {
....................             crc_valid = 1; // FIX            break;
....................         }
....................     }
....................     if (!crc_valid)
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
....................         // return; 
....................     }
.................... }
.................... 
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table)
.................... {
....................     fprintf(PC, "\r\n[SMF Counter Status]\r\n");
....................     fprintf(PC, "\tPARTITION\tUSED\t\tRESERVE\r\n");
....................     fprintf(PC, "\t---------\t----------\t----------\r\n");
....................     fprintf(PC, "\tPICLOG\t\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_PICLOG_DATA].used_size, smf_data_table->fields.headers[CIGS_PICLOG_DATA].reserved);
....................     fprintf(PC, "\tENVIRO\t\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_ENVIRO_DATA].used_size, smf_data_table->fields.headers[CIGS_ENVIRO_DATA].reserved);
....................     fprintf(PC, "\tIV1_HEADER\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_IV1_HEADER].used_size, smf_data_table->fields.headers[CIGS_IV1_HEADER].reserved);
....................     fprintf(PC, "\tIV1_DATA\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_IV1_DATA].used_size, smf_data_table->fields.headers[CIGS_IV1_DATA].reserved);
....................     fprintf(PC, "\tIV2_HEADER\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_IV2_HEADER].used_size, smf_data_table->fields.headers[CIGS_IV2_HEADER].reserved);
....................     fprintf(PC, "\tIV2_DATA\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_IV2_DATA].used_size, smf_data_table->fields.headers[CIGS_IV2_DATA].reserved);
....................     fprintf(PC, "\t==========================================\r\n\r\n");
.................... }
.................... 
.................... void smf_write(FlashOperationStruct *smf_queue_ptr)
.................... {
....................     fprintf(PC, "\r\n_______________________________\r\n");
*
10474:  MOVLW  4C
10476:  MOVWF  FF6
10478:  MOVLW  08
1047A:  MOVWF  FF7
1047C:  MOVLW  00
1047E:  MOVWF  FF8
10480:  CALL   22DC
....................     fprintf(PC, "_________Start copy_data_________\r\n");
10484:  MOVLW  70
10486:  MOVWF  FF6
10488:  MOVLW  08
1048A:  MOVWF  FF7
1048C:  MOVLW  00
1048E:  MOVWF  FF8
10490:  CALL   22DC
....................     
....................     // 接続確認
....................     if (!is_connect(mis_fm))
10494:  MOVFF  115,253
10498:  MOVFF  114,252
1049C:  MOVFF  113,251
104A0:  MOVFF  112,250
104A4:  CALL   2E02
104A8:  MOVF   01,F
104AA:  BTFSS  FD8.2
104AC:  GOTO   104C4
....................     {
....................         fprintf(PC, "Error: MIS FM is not connected\r\n");
104B0:  MOVLW  94
104B2:  MOVWF  FF6
104B4:  MOVLW  08
104B6:  MOVWF  FF7
104B8:  MOVLW  00
104BA:  MOVWF  FF8
104BC:  CALL   22DC
....................         return;
104C0:  GOTO   113A2
....................     }    
....................     if (!is_connect(smf))
104C4:  MOVFF  119,253
104C8:  MOVFF  118,252
104CC:  MOVFF  117,251
104D0:  MOVFF  116,250
104D4:  CALL   2E02
104D8:  MOVF   01,F
104DA:  BTFSS  FD8.2
104DC:  GOTO   104F4
....................     {
....................         fprintf(PC, "Error: SMF is not connected\r\n");
104E0:  MOVLW  B6
104E2:  MOVWF  FF6
104E4:  MOVLW  08
104E6:  MOVWF  FF7
104E8:  MOVLW  00
104EA:  MOVWF  FF8
104EC:  CALL   22DC
....................         return;
104F0:  GOTO   113A2
....................     }    
.................... 
.................... 
....................     // smf_data_table_t smf_data_table;
....................     // read_smf_header(&smf_data_table);
.................... 
.................... 
....................     unsigned int32 misf_write_src;
....................     unsigned int32 misf_write_size;
....................     unsigned int32 used_size = misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter;
104F4:  MOVLB  1
104F6:  MOVF   xA1,W
104F8:  MOVWF  FE9
104FA:  MOVF   xA2,W
104FC:  MOVWF  FEA
104FE:  MOVF   FEF,W
10500:  MULLW  0A
10502:  MOVF   FF3,W
10504:  MOVLB  2
10506:  CLRF   x11
10508:  MOVWF  x10
1050A:  MOVLW  04
1050C:  ADDWF  x10,W
1050E:  MOVWF  01
10510:  MOVLW  00
10512:  ADDWFC x11,W
10514:  MOVWF  03
10516:  MOVF   01,W
10518:  ADDLW  22
1051A:  MOVWF  FE9
1051C:  MOVLW  01
1051E:  ADDWFC 03,W
10520:  MOVWF  FEA
10522:  MOVFF  FEF,1AB
10526:  MOVFF  FEC,1AC
1052A:  MOVFF  FEC,1AD
1052E:  MOVFF  FEC,1AE
10532:  MOVF   FED,F
10534:  MOVF   FED,F
10536:  MOVF   FED,F
....................     //アドレスと自動更新
....................     if (smf_queue_ptr->source_type == SOURCE_MISF_UNCOPIED )
10538:  MOVLW  03
1053A:  MOVLB  1
1053C:  ADDWF  xA1,W
1053E:  MOVWF  01
10540:  MOVLW  00
10542:  ADDWFC xA2,W
10544:  MOVWF  03
10546:  MOVF   01,W
10548:  MOVWF  FE9
1054A:  MOVFF  03,FEA
1054E:  BTFSS  FEF.0
10550:  BRA    10558
10552:  MOVLB  0
10554:  GOTO   1069A
10558:  MOVLB  0
....................     {
....................         misf_write_src = MISF_ADDRESS_TABLE[smf_queue_ptr->mission_id].start + misf_counter_table[smf_queue_ptr->mission_id].used_counter - misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter;
1055A:  MOVLB  1
1055C:  MOVF   xA1,W
1055E:  MOVWF  FE9
10560:  MOVF   xA2,W
10562:  MOVWF  FEA
10564:  MOVF   FEF,W
10566:  MULLW  0C
10568:  MOVF   FF3,W
1056A:  MOVLB  2
1056C:  CLRF   x11
1056E:  MOVWF  x10
10570:  MOVFF  211,03
10574:  MOVF   x10,W
10576:  MOVLB  0
10578:  CALL   00E6
1057C:  MOVWF  00
1057E:  TBLRD*+
10580:  MOVFF  FF5,01
10584:  TBLRD*+
10586:  MOVFF  FF5,02
1058A:  TBLRD*+
1058C:  MOVFF  FF5,03
10590:  MOVFF  03,215
10594:  MOVFF  02,214
10598:  MOVFF  01,213
1059C:  MOVFF  00,212
105A0:  MOVLB  1
105A2:  MOVF   xA1,W
105A4:  MOVWF  FE9
105A6:  MOVF   xA2,W
105A8:  MOVWF  FEA
105AA:  MOVF   FEF,W
105AC:  MULLW  0A
105AE:  MOVF   FF3,W
105B0:  MOVLB  2
105B2:  CLRF   x17
105B4:  MOVWF  x16
105B6:  MOVLW  22
105B8:  ADDWF  x16,W
105BA:  MOVWF  FE9
105BC:  MOVLW  01
105BE:  ADDWFC x17,W
105C0:  MOVWF  FEA
105C2:  MOVFF  FEF,00
105C6:  MOVFF  FEC,01
105CA:  MOVFF  FEC,02
105CE:  MOVFF  FEC,03
105D2:  MOVF   FED,F
105D4:  MOVF   FED,F
105D6:  MOVF   FED,F
105D8:  MOVF   00,W
105DA:  ADDWF  x12,F
105DC:  MOVF   01,W
105DE:  ADDWFC x13,F
105E0:  MOVF   02,W
105E2:  ADDWFC x14,F
105E4:  MOVF   03,W
105E6:  ADDWFC x15,F
105E8:  MOVLB  1
105EA:  MOVF   xA1,W
105EC:  MOVWF  FE9
105EE:  MOVF   xA2,W
105F0:  MOVWF  FEA
105F2:  MOVF   FEF,W
105F4:  MULLW  0A
105F6:  MOVF   FF3,W
105F8:  MOVLB  2
105FA:  CLRF   x19
105FC:  MOVWF  x18
105FE:  MOVLW  04
10600:  ADDWF  x18,W
10602:  MOVWF  01
10604:  MOVLW  00
10606:  ADDWFC x19,W
10608:  MOVWF  03
1060A:  MOVF   01,W
1060C:  ADDLW  22
1060E:  MOVWF  FE9
10610:  MOVLW  01
10612:  ADDWFC 03,W
10614:  MOVWF  FEA
10616:  MOVFF  FEF,00
1061A:  MOVFF  FEC,01
1061E:  MOVFF  FEC,02
10622:  MOVFF  FEC,03
10626:  MOVF   FED,F
10628:  MOVF   FED,F
1062A:  MOVF   FED,F
1062C:  MOVF   00,W
1062E:  SUBWF  x12,W
10630:  MOVLB  1
10632:  MOVWF  xA3
10634:  MOVF   01,W
10636:  MOVLB  2
10638:  SUBWFB x13,W
1063A:  MOVLB  1
1063C:  MOVWF  xA4
1063E:  MOVF   02,W
10640:  MOVLB  2
10642:  SUBWFB x14,W
10644:  MOVLB  1
10646:  MOVWF  xA5
10648:  MOVF   03,W
1064A:  MOVLB  2
1064C:  SUBWFB x15,W
1064E:  MOVLB  1
10650:  MOVWF  xA6
....................         misf_write_size = misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter;
10652:  MOVF   xA1,W
10654:  MOVWF  FE9
10656:  MOVF   xA2,W
10658:  MOVWF  FEA
1065A:  MOVF   FEF,W
1065C:  MULLW  0A
1065E:  MOVF   FF3,W
10660:  MOVLB  2
10662:  CLRF   x11
10664:  MOVWF  x10
10666:  MOVLW  04
10668:  ADDWF  x10,W
1066A:  MOVWF  01
1066C:  MOVLW  00
1066E:  ADDWFC x11,W
10670:  MOVWF  03
10672:  MOVF   01,W
10674:  ADDLW  22
10676:  MOVWF  FE9
10678:  MOVLW  01
1067A:  ADDWFC 03,W
1067C:  MOVWF  FEA
1067E:  MOVFF  FEF,1A7
10682:  MOVFF  FEC,1A8
10686:  MOVFF  FEC,1A9
1068A:  MOVFF  FEC,1AA
1068E:  MOVF   FED,F
10690:  MOVF   FED,F
10692:  MOVF   FED,F
10694:  MOVLB  0
....................     }else if(smf_queue_ptr->source_type == SOURCE_MISF_MANUAL)
10696:  GOTO   10704
1069A:  MOVLW  03
1069C:  MOVLB  1
1069E:  ADDWF  xA1,W
106A0:  MOVWF  01
106A2:  MOVLW  00
106A4:  ADDWFC xA2,W
106A6:  MOVWF  03
106A8:  MOVF   01,W
106AA:  MOVWF  FE9
106AC:  MOVFF  03,FEA
106B0:  BTFSC  FEF.0
106B2:  BRA    106BA
106B4:  MOVLB  0
106B6:  GOTO   10704
106BA:  MOVLB  0
....................     {
....................         misf_write_src = smf_queue_ptr->misf_start_addr;
106BC:  MOVLW  04
106BE:  MOVLB  1
106C0:  ADDWF  xA1,W
106C2:  MOVWF  FE9
106C4:  MOVLW  00
106C6:  ADDWFC xA2,W
106C8:  MOVWF  FEA
106CA:  MOVFF  FEF,1A3
106CE:  MOVFF  FEC,1A4
106D2:  MOVFF  FEC,1A5
106D6:  MOVFF  FEC,1A6
106DA:  MOVF   FED,F
106DC:  MOVF   FED,F
106DE:  MOVF   FED,F
....................         misf_write_size = smf_queue_ptr->misf_size;
106E0:  MOVLW  08
106E2:  ADDWF  xA1,W
106E4:  MOVWF  FE9
106E6:  MOVLW  00
106E8:  ADDWFC xA2,W
106EA:  MOVWF  FEA
106EC:  MOVFF  FEF,1A7
106F0:  MOVFF  FEC,1A8
106F4:  MOVFF  FEC,1A9
106F8:  MOVFF  FEC,1AA
106FC:  MOVF   FED,F
106FE:  MOVF   FED,F
10700:  MOVF   FED,F
10702:  MOVLB  0
....................     }
.................... 
....................     unsigned int32 smf_header_address_start;
....................     unsigned int32 smf_data_address_start;
....................     unsigned int32 smf_data_address_end;
....................     unsigned int32 misf_address_start = MISF_ADDRESS_TABLE[smf_queue_ptr->mission_id].start;
....................     unsigned int32 misf_address_end   = MISF_ADDRESS_TABLE[smf_queue_ptr->mission_id].end;
10704:  MOVLB  1
10706:  MOVF   xA1,W
10708:  MOVWF  FE9
1070A:  MOVF   xA2,W
1070C:  MOVWF  FEA
1070E:  MOVF   FEF,W
10710:  MULLW  0C
10712:  MOVF   FF3,W
10714:  MOVLB  2
10716:  CLRF   x11
10718:  MOVWF  x10
1071A:  MOVFF  211,03
1071E:  MOVF   x10,W
10720:  MOVLB  0
10722:  CALL   00E6
10726:  MOVWF  00
10728:  TBLRD*+
1072A:  MOVFF  FF5,01
1072E:  TBLRD*+
10730:  MOVFF  FF5,02
10734:  TBLRD*+
10736:  MOVFF  FF5,03
1073A:  MOVFF  03,1BE
1073E:  MOVFF  02,1BD
10742:  MOVFF  01,1BC
10746:  MOVFF  00,1BB
1074A:  MOVLB  1
1074C:  MOVF   xA1,W
1074E:  MOVWF  FE9
10750:  MOVF   xA2,W
10752:  MOVWF  FEA
10754:  MOVF   FEF,W
10756:  MULLW  0C
10758:  MOVF   FF3,W
1075A:  MOVLB  2
1075C:  CLRF   x13
1075E:  MOVWF  x12
10760:  MOVLW  04
10762:  ADDWF  x12,W
10764:  MOVWF  01
10766:  MOVLW  00
10768:  ADDWFC x13,W
1076A:  MOVWF  03
1076C:  MOVF   01,W
1076E:  MOVLB  0
10770:  CALL   00E6
10774:  MOVWF  00
10776:  TBLRD*+
10778:  MOVFF  FF5,01
1077C:  TBLRD*+
1077E:  MOVFF  FF5,02
10782:  TBLRD*+
10784:  MOVFF  FF5,03
10788:  MOVFF  03,1C2
1078C:  MOVFF  02,1C1
10790:  MOVFF  01,1C0
10794:  MOVFF  00,1BF
.................... 
....................     smf_update_flag[smf_queue_ptr->mission_id] = 1;
10798:  MOVLB  1
1079A:  MOVF   xA1,W
1079C:  MOVWF  FE9
1079E:  MOVF   xA2,W
107A0:  MOVWF  FEA
107A2:  MOVFF  FEA,211
107A6:  MOVFF  FE9,210
107AA:  MOVFF  FEF,B08
107AE:  MOVLW  01
107B0:  MOVLB  B
107B2:  MOVWF  x09
107B4:  MOVLW  01
107B6:  MOVWF  x0B
107B8:  MOVLW  7A
107BA:  MOVWF  x0A
107BC:  MOVLB  0
107BE:  CALL   2ABA
107C2:  MOVFF  211,FEA
107C6:  MOVFF  210,FE9
....................     switch ( smf_queue_ptr->mission_id )
107CA:  MOVLB  1
107CC:  MOVF   xA1,W
107CE:  MOVWF  FE9
107D0:  MOVF   xA2,W
107D2:  MOVWF  FEA
107D4:  MOVF   FEF,W
107D6:  XORLW  00
107D8:  MOVLB  0
107DA:  BTFSC  FD8.2
107DC:  GOTO   10814
107E0:  XORLW  01
107E2:  BTFSC  FD8.2
107E4:  GOTO   10854
107E8:  XORLW  03
107EA:  BTFSC  FD8.2
107EC:  GOTO   10896
107F0:  XORLW  01
107F2:  BTFSC  FD8.2
107F4:  GOTO   108D8
107F8:  XORLW  07
107FA:  BTFSC  FD8.2
107FC:  GOTO   1091A
10800:  XORLW  01
10802:  BTFSC  FD8.2
10804:  GOTO   1095C
10808:  XORLW  03
1080A:  BTFSC  FD8.2
1080C:  GOTO   1099E
10810:  GOTO   109E0
....................     {
....................         case CIGS_DATA_TABLE:
....................             fprintf(PC, "FLASH ID: CIGS_DATA_TABLE\r\n");
10814:  MOVLW  D4
10816:  MOVWF  FF6
10818:  MOVLW  08
1081A:  MOVWF  FF7
1081C:  MOVLW  00
1081E:  MOVWF  FF8
10820:  CALL   22DC
....................             smf_header_address_start = SMF_DATA_TABLE_HEADER_START_ADDRESS;
10824:  MOVLW  07
10826:  MOVLB  1
10828:  MOVWF  xB2
1082A:  MOVLW  3B
1082C:  MOVWF  xB1
1082E:  CLRF   xB0
10830:  CLRF   xAF
....................             smf_data_address_start = SMF_DATA_TABLE_DATA_START_ADDRESS;
10832:  MOVLW  07
10834:  MOVWF  xB6
10836:  MOVLW  3B
10838:  MOVWF  xB5
1083A:  MOVLW  10
1083C:  MOVWF  xB4
1083E:  CLRF   xB3
....................             smf_data_address_end = SMF_DATA_TABLE_DATA_END_ADDRESS;
10840:  MOVLW  07
10842:  MOVWF  xBA
10844:  MOVLW  3B
10846:  MOVWF  xB9
10848:  MOVLW  1F
1084A:  MOVWF  xB8
1084C:  SETF   xB7
....................             break;
1084E:  MOVLB  0
10850:  GOTO   10A36
....................         case CIGS_PICLOG_DATA:
....................             fprintf(PC, "FLASH ID: CIGS_PICLOG_DATA\r\n");
10854:  MOVLW  F0
10856:  MOVWF  FF6
10858:  MOVLW  08
1085A:  MOVWF  FF7
1085C:  MOVLW  00
1085E:  MOVWF  FF8
10860:  CALL   22DC
....................             smf_header_address_start = SMF_PICLOG_HEADER_START_ADDRESS;
10864:  MOVLW  07
10866:  MOVLB  1
10868:  MOVWF  xB2
1086A:  MOVLW  3B
1086C:  MOVWF  xB1
1086E:  MOVLW  20
10870:  MOVWF  xB0
10872:  CLRF   xAF
....................             smf_data_address_start = SMF_PICLOG_DATA_START_ADDRESS;
10874:  MOVLW  07
10876:  MOVWF  xB6
10878:  MOVLW  3B
1087A:  MOVWF  xB5
1087C:  MOVLW  30
1087E:  MOVWF  xB4
10880:  CLRF   xB3
....................             smf_data_address_end = SMF_PICLOG_DATA_END_ADDRESS;
10882:  MOVLW  07
10884:  MOVWF  xBA
10886:  MOVLW  3C
10888:  MOVWF  xB9
1088A:  MOVLW  2F
1088C:  MOVWF  xB8
1088E:  SETF   xB7
....................             break;
10890:  MOVLB  0
10892:  GOTO   10A36
....................         case CIGS_ENVIRO_DATA:
....................             fprintf(PC, "FLASH ID: CIGS_ENVIRO_DATA\r\n");
10896:  MOVLW  0E
10898:  MOVWF  FF6
1089A:  MOVLW  09
1089C:  MOVWF  FF7
1089E:  MOVLW  00
108A0:  MOVWF  FF8
108A2:  CALL   22DC
....................             smf_header_address_start = SMF_ENVIRO_HEADER_START_ADDRESS;
108A6:  MOVLW  07
108A8:  MOVLB  1
108AA:  MOVWF  xB2
108AC:  MOVLW  3C
108AE:  MOVWF  xB1
108B0:  MOVLW  30
108B2:  MOVWF  xB0
108B4:  CLRF   xAF
....................             smf_data_address_start = SMF_ENVIRO_DATA_START_ADDRESS;
108B6:  MOVLW  07
108B8:  MOVWF  xB6
108BA:  MOVLW  3C
108BC:  MOVWF  xB5
108BE:  MOVLW  40
108C0:  MOVWF  xB4
108C2:  CLRF   xB3
....................             smf_data_address_end = SMF_ENVIRO_DATA_END_ADDRESS;
108C4:  MOVLW  07
108C6:  MOVWF  xBA
108C8:  MOVLW  46
108CA:  MOVWF  xB9
108CC:  MOVLW  3F
108CE:  MOVWF  xB8
108D0:  SETF   xB7
....................             break;
108D2:  MOVLB  0
108D4:  GOTO   10A36
....................         case CIGS_IV1_HEADER:
....................             fprintf(PC, "FLASH ID: CIGS_IV1_HEADER\r\n");
108D8:  MOVLW  2C
108DA:  MOVWF  FF6
108DC:  MOVLW  09
108DE:  MOVWF  FF7
108E0:  MOVLW  00
108E2:  MOVWF  FF8
108E4:  CALL   22DC
....................             smf_header_address_start = SMF_IV1_HEADER_HEADER_START_ADDRESS;
108E8:  MOVLW  07
108EA:  MOVLB  1
108EC:  MOVWF  xB2
108EE:  MOVLW  46
108F0:  MOVWF  xB1
108F2:  MOVLW  40
108F4:  MOVWF  xB0
108F6:  CLRF   xAF
....................             smf_data_address_start = SMF_IV1_HEADER_DATA_START_ADDRESS;
108F8:  MOVLW  07
108FA:  MOVWF  xB6
108FC:  MOVLW  46
108FE:  MOVWF  xB5
10900:  MOVLW  50
10902:  MOVWF  xB4
10904:  CLRF   xB3
....................             smf_data_address_end = SMF_IV1_HEADER_DATA_END_ADDRESS;
10906:  MOVLW  07
10908:  MOVWF  xBA
1090A:  MOVLW  50
1090C:  MOVWF  xB9
1090E:  MOVLW  4F
10910:  MOVWF  xB8
10912:  SETF   xB7
....................             break;
10914:  MOVLB  0
10916:  GOTO   10A36
....................         case CIGS_IV1_DATA:
....................             fprintf(PC, "FLASH ID: CIGS_IV1_DATA\r\n");
1091A:  MOVLW  48
1091C:  MOVWF  FF6
1091E:  MOVLW  09
10920:  MOVWF  FF7
10922:  MOVLW  00
10924:  MOVWF  FF8
10926:  CALL   22DC
....................             smf_header_address_start = SMF_IV1_DATA_HEADER_START_ADDRESS;
1092A:  MOVLW  07
1092C:  MOVLB  1
1092E:  MOVWF  xB2
10930:  MOVLW  50
10932:  MOVWF  xB1
10934:  MOVLW  50
10936:  MOVWF  xB0
10938:  CLRF   xAF
....................             smf_data_address_start = SMF_IV1_DATA_DATA_START_ADDRESS;
1093A:  MOVLW  07
1093C:  MOVWF  xB6
1093E:  MOVLW  50
10940:  MOVWF  xB5
10942:  MOVLW  60
10944:  MOVWF  xB4
10946:  CLRF   xB3
....................             smf_data_address_end = SMF_IV1_DATA_DATA_END_ADDRESS;
10948:  MOVLW  07
1094A:  MOVWF  xBA
1094C:  MOVLW  90
1094E:  MOVWF  xB9
10950:  MOVLW  5F
10952:  MOVWF  xB8
10954:  SETF   xB7
....................             break;
10956:  MOVLB  0
10958:  GOTO   10A36
....................         case CIGS_IV2_HEADER:
....................             fprintf(PC, "FLASH ID: CIGS_IV2_HEADER\r\n");
1095C:  MOVLW  62
1095E:  MOVWF  FF6
10960:  MOVLW  09
10962:  MOVWF  FF7
10964:  MOVLW  00
10966:  MOVWF  FF8
10968:  CALL   22DC
....................             smf_header_address_start = SMF_IV2_HEADER_HEADER_START_ADDRESS;
1096C:  MOVLW  07
1096E:  MOVLB  1
10970:  MOVWF  xB2
10972:  MOVLW  90
10974:  MOVWF  xB1
10976:  MOVLW  60
10978:  MOVWF  xB0
1097A:  CLRF   xAF
....................             smf_data_address_start = SMF_IV2_HEADER_DATA_START_ADDRESS;
1097C:  MOVLW  07
1097E:  MOVWF  xB6
10980:  MOVLW  90
10982:  MOVWF  xB5
10984:  MOVLW  70
10986:  MOVWF  xB4
10988:  CLRF   xB3
....................             smf_data_address_end = SMF_IV2_HEADER_DATA_END_ADDRESS;
1098A:  MOVLW  07
1098C:  MOVWF  xBA
1098E:  MOVLW  9A
10990:  MOVWF  xB9
10992:  MOVLW  6F
10994:  MOVWF  xB8
10996:  SETF   xB7
....................             break;
10998:  MOVLB  0
1099A:  GOTO   10A36
....................         case CIGS_IV2_DATA:
....................             fprintf(PC, "FLASH ID: CIGS_IV2_DATA\r\n");
1099E:  MOVLW  7E
109A0:  MOVWF  FF6
109A2:  MOVLW  09
109A4:  MOVWF  FF7
109A6:  MOVLW  00
109A8:  MOVWF  FF8
109AA:  CALL   22DC
....................             smf_header_address_start = SMF_IV2_DATA_HEADER_START_ADDRESS;
109AE:  MOVLW  07
109B0:  MOVLB  1
109B2:  MOVWF  xB2
109B4:  MOVLW  9A
109B6:  MOVWF  xB1
109B8:  MOVLW  70
109BA:  MOVWF  xB0
109BC:  CLRF   xAF
....................             smf_data_address_start = SMF_IV2_DATA_DATA_START_ADDRESS;
109BE:  MOVLW  07
109C0:  MOVWF  xB6
109C2:  MOVLW  9A
109C4:  MOVWF  xB5
109C6:  MOVLW  80
109C8:  MOVWF  xB4
109CA:  CLRF   xB3
....................             smf_data_address_end = SMF_IV2_DATA_DATA_END_ADDRESS;
109CC:  MOVLW  07
109CE:  MOVWF  xBA
109D0:  MOVLW  DA
109D2:  MOVWF  xB9
109D4:  MOVLW  7F
109D6:  MOVWF  xB8
109D8:  SETF   xB7
....................             break;
109DA:  MOVLB  0
109DC:  GOTO   10A36
....................         default:
....................             fprintf(PC, "Error: Invalid mission ID %d\r\n", smf_queue_ptr->mission_id);
109E0:  MOVLB  1
109E2:  MOVF   xA1,W
109E4:  MOVWF  FE9
109E6:  MOVF   xA2,W
109E8:  MOVWF  FEA
109EA:  MOVFF  FEF,210
109EE:  MOVLW  98
109F0:  MOVWF  FF6
109F2:  MOVLW  09
109F4:  MOVWF  FF7
109F6:  MOVLW  00
109F8:  MOVWF  FF8
109FA:  MOVLW  1A
109FC:  MOVLB  9
109FE:  MOVWF  xC2
10A00:  MOVLB  0
10A02:  CALL   2312
10A06:  MOVFF  210,211
10A0A:  MOVLW  18
10A0C:  MOVLB  2
10A0E:  MOVWF  x12
10A10:  MOVLB  0
10A12:  GOTO   10000
10A16:  MOVLW  0D
10A18:  BTFSS  FA6.6
10A1A:  GOTO   10A18
10A1E:  MOVLB  E
10A20:  MOVWF  xF9
10A22:  MOVLW  0A
10A24:  MOVLB  0
10A26:  BTFSS  FA6.6
10A28:  GOTO   10A26
10A2C:  MOVLB  E
10A2E:  MOVWF  xF9
....................             return;
10A30:  MOVLB  0
10A32:  GOTO   113A2
....................     }
.................... 
....................     // Print MISF ADDRESS
....................     fprintf(PC,"[MISF ADDRESS]\r\n");
10A36:  MOVLW  B8
10A38:  MOVWF  FF6
10A3A:  MOVLW  09
10A3C:  MOVWF  FF7
10A3E:  MOVLW  00
10A40:  MOVWF  FF8
10A42:  CALL   22DC
....................     fprintf(PC, "\tParam\tData\r\n");
10A46:  MOVLW  CA
10A48:  MOVWF  FF6
10A4A:  MOVLW  09
10A4C:  MOVWF  FF7
10A4E:  MOVLW  00
10A50:  MOVWF  FF8
10A52:  CALL   22DC
....................     fprintf(PC, "\t-----\t----------\r\n");
10A56:  MOVLW  D8
10A58:  MOVWF  FF6
10A5A:  MOVLW  09
10A5C:  MOVWF  FF7
10A5E:  MOVLW  00
10A60:  MOVWF  FF8
10A62:  CALL   22DC
....................     fprintf(PC, "\tSTART\t0x%08LX\r\n", misf_address_start);
10A66:  MOVLW  EC
10A68:  MOVWF  FF6
10A6A:  MOVLW  09
10A6C:  MOVWF  FF7
10A6E:  MOVLW  00
10A70:  MOVWF  FF8
10A72:  MOVLW  09
10A74:  MOVLB  9
10A76:  MOVWF  xC2
10A78:  MOVLB  0
10A7A:  CALL   2312
10A7E:  MOVFF  1BE,9E8
10A82:  MOVLW  37
10A84:  MOVLB  9
10A86:  MOVWF  xE9
10A88:  MOVLB  0
10A8A:  CALL   2542
10A8E:  MOVFF  1BD,9E8
10A92:  MOVLW  37
10A94:  MOVLB  9
10A96:  MOVWF  xE9
10A98:  MOVLB  0
10A9A:  CALL   2542
10A9E:  MOVFF  1BC,9E8
10AA2:  MOVLW  37
10AA4:  MOVLB  9
10AA6:  MOVWF  xE9
10AA8:  MOVLB  0
10AAA:  CALL   2542
10AAE:  MOVFF  1BB,9E8
10AB2:  MOVLW  37
10AB4:  MOVLB  9
10AB6:  MOVWF  xE9
10AB8:  MOVLB  0
10ABA:  CALL   2542
10ABE:  MOVLW  0D
10AC0:  BTFSS  FA6.6
10AC2:  GOTO   10AC0
10AC6:  MOVLB  E
10AC8:  MOVWF  xF9
10ACA:  MOVLW  0A
10ACC:  MOVLB  0
10ACE:  BTFSS  FA6.6
10AD0:  GOTO   10ACE
10AD4:  MOVLB  E
10AD6:  MOVWF  xF9
....................     fprintf(PC, "\tEND\t0x%08LX\r\n", misf_address_end);
10AD8:  MOVLW  FE
10ADA:  MOVWF  FF6
10ADC:  MOVLW  09
10ADE:  MOVWF  FF7
10AE0:  MOVLW  00
10AE2:  MOVWF  FF8
10AE4:  MOVLW  07
10AE6:  MOVLB  9
10AE8:  MOVWF  xC2
10AEA:  MOVLB  0
10AEC:  CALL   2312
10AF0:  MOVFF  1C2,9E8
10AF4:  MOVLW  37
10AF6:  MOVLB  9
10AF8:  MOVWF  xE9
10AFA:  MOVLB  0
10AFC:  CALL   2542
10B00:  MOVFF  1C1,9E8
10B04:  MOVLW  37
10B06:  MOVLB  9
10B08:  MOVWF  xE9
10B0A:  MOVLB  0
10B0C:  CALL   2542
10B10:  MOVFF  1C0,9E8
10B14:  MOVLW  37
10B16:  MOVLB  9
10B18:  MOVWF  xE9
10B1A:  MOVLB  0
10B1C:  CALL   2542
10B20:  MOVFF  1BF,9E8
10B24:  MOVLW  37
10B26:  MOVLB  9
10B28:  MOVWF  xE9
10B2A:  MOVLB  0
10B2C:  CALL   2542
10B30:  MOVLW  0D
10B32:  BTFSS  FA6.6
10B34:  GOTO   10B32
10B38:  MOVLB  E
10B3A:  MOVWF  xF9
10B3C:  MOVLW  0A
10B3E:  MOVLB  0
10B40:  BTFSS  FA6.6
10B42:  GOTO   10B40
10B46:  MOVLB  E
10B48:  MOVWF  xF9
....................     fprintf(PC, "\tSRC\t0x%08LX\r\n", misf_write_src);
10B4A:  MOVLW  0E
10B4C:  MOVWF  FF6
10B4E:  MOVLW  0A
10B50:  MOVWF  FF7
10B52:  MOVLW  00
10B54:  MOVWF  FF8
10B56:  MOVLW  07
10B58:  MOVLB  9
10B5A:  MOVWF  xC2
10B5C:  MOVLB  0
10B5E:  CALL   2312
10B62:  MOVFF  1A6,9E8
10B66:  MOVLW  37
10B68:  MOVLB  9
10B6A:  MOVWF  xE9
10B6C:  MOVLB  0
10B6E:  CALL   2542
10B72:  MOVFF  1A5,9E8
10B76:  MOVLW  37
10B78:  MOVLB  9
10B7A:  MOVWF  xE9
10B7C:  MOVLB  0
10B7E:  CALL   2542
10B82:  MOVFF  1A4,9E8
10B86:  MOVLW  37
10B88:  MOVLB  9
10B8A:  MOVWF  xE9
10B8C:  MOVLB  0
10B8E:  CALL   2542
10B92:  MOVFF  1A3,9E8
10B96:  MOVLW  37
10B98:  MOVLB  9
10B9A:  MOVWF  xE9
10B9C:  MOVLB  0
10B9E:  CALL   2542
10BA2:  MOVLW  0D
10BA4:  BTFSS  FA6.6
10BA6:  GOTO   10BA4
10BAA:  MOVLB  E
10BAC:  MOVWF  xF9
10BAE:  MOVLW  0A
10BB0:  MOVLB  0
10BB2:  BTFSS  FA6.6
10BB4:  GOTO   10BB2
10BB8:  MOVLB  E
10BBA:  MOVWF  xF9
....................     fprintf(PC, "\tSIZE\t0x%08LX\r\n", misf_write_size);
10BBC:  MOVLW  1E
10BBE:  MOVWF  FF6
10BC0:  MOVLW  0A
10BC2:  MOVWF  FF7
10BC4:  MOVLW  00
10BC6:  MOVWF  FF8
10BC8:  MOVLW  08
10BCA:  MOVLB  9
10BCC:  MOVWF  xC2
10BCE:  MOVLB  0
10BD0:  CALL   2312
10BD4:  MOVFF  1AA,9E8
10BD8:  MOVLW  37
10BDA:  MOVLB  9
10BDC:  MOVWF  xE9
10BDE:  MOVLB  0
10BE0:  CALL   2542
10BE4:  MOVFF  1A9,9E8
10BE8:  MOVLW  37
10BEA:  MOVLB  9
10BEC:  MOVWF  xE9
10BEE:  MOVLB  0
10BF0:  CALL   2542
10BF4:  MOVFF  1A8,9E8
10BF8:  MOVLW  37
10BFA:  MOVLB  9
10BFC:  MOVWF  xE9
10BFE:  MOVLB  0
10C00:  CALL   2542
10C04:  MOVFF  1A7,9E8
10C08:  MOVLW  37
10C0A:  MOVLB  9
10C0C:  MOVWF  xE9
10C0E:  MOVLB  0
10C10:  CALL   2542
10C14:  MOVLW  0D
10C16:  BTFSS  FA6.6
10C18:  GOTO   10C16
10C1C:  MOVLB  E
10C1E:  MOVWF  xF9
10C20:  MOVLW  0A
10C22:  MOVLB  0
10C24:  BTFSS  FA6.6
10C26:  GOTO   10C24
10C2A:  MOVLB  E
10C2C:  MOVWF  xF9
....................     fprintf(PC, "\t-----\t----------\r\n");
10C2E:  MOVLW  2E
10C30:  MOVWF  FF6
10C32:  MOVLW  0A
10C34:  MOVWF  FF7
10C36:  MOVLW  00
10C38:  MOVWF  FF8
10C3A:  MOVLB  0
10C3C:  CALL   22DC
.................... 
....................     // Print SMF ADDRESS
....................     fprintf(PC,"[SMF ADDRESS]\r\n");
10C40:  MOVLW  42
10C42:  MOVWF  FF6
10C44:  MOVLW  0A
10C46:  MOVWF  FF7
10C48:  MOVLW  00
10C4A:  MOVWF  FF8
10C4C:  CALL   22DC
....................     fprintf(PC, "\tParam\tData\r\n");
10C50:  MOVLW  52
10C52:  MOVWF  FF6
10C54:  MOVLW  0A
10C56:  MOVWF  FF7
10C58:  MOVLW  00
10C5A:  MOVWF  FF8
10C5C:  CALL   22DC
....................     fprintf(PC, "\t-----\t----------\r\n");
10C60:  MOVLW  60
10C62:  MOVWF  FF6
10C64:  MOVLW  0A
10C66:  MOVWF  FF7
10C68:  MOVLW  00
10C6A:  MOVWF  FF8
10C6C:  CALL   22DC
....................     fprintf(PC, "\tSTART\t0x%08LX\r\n", smf_data_address_start);
10C70:  MOVLW  74
10C72:  MOVWF  FF6
10C74:  MOVLW  0A
10C76:  MOVWF  FF7
10C78:  MOVLW  00
10C7A:  MOVWF  FF8
10C7C:  MOVLW  09
10C7E:  MOVLB  9
10C80:  MOVWF  xC2
10C82:  MOVLB  0
10C84:  CALL   2312
10C88:  MOVFF  1B6,9E8
10C8C:  MOVLW  37
10C8E:  MOVLB  9
10C90:  MOVWF  xE9
10C92:  MOVLB  0
10C94:  CALL   2542
10C98:  MOVFF  1B5,9E8
10C9C:  MOVLW  37
10C9E:  MOVLB  9
10CA0:  MOVWF  xE9
10CA2:  MOVLB  0
10CA4:  CALL   2542
10CA8:  MOVFF  1B4,9E8
10CAC:  MOVLW  37
10CAE:  MOVLB  9
10CB0:  MOVWF  xE9
10CB2:  MOVLB  0
10CB4:  CALL   2542
10CB8:  MOVFF  1B3,9E8
10CBC:  MOVLW  37
10CBE:  MOVLB  9
10CC0:  MOVWF  xE9
10CC2:  MOVLB  0
10CC4:  CALL   2542
10CC8:  MOVLW  0D
10CCA:  BTFSS  FA6.6
10CCC:  GOTO   10CCA
10CD0:  MOVLB  E
10CD2:  MOVWF  xF9
10CD4:  MOVLW  0A
10CD6:  MOVLB  0
10CD8:  BTFSS  FA6.6
10CDA:  GOTO   10CD8
10CDE:  MOVLB  E
10CE0:  MOVWF  xF9
....................     fprintf(PC, "\tEND\t0x%08LX\r\n", smf_data_address_end);
10CE2:  MOVLW  86
10CE4:  MOVWF  FF6
10CE6:  MOVLW  0A
10CE8:  MOVWF  FF7
10CEA:  MOVLW  00
10CEC:  MOVWF  FF8
10CEE:  MOVLW  07
10CF0:  MOVLB  9
10CF2:  MOVWF  xC2
10CF4:  MOVLB  0
10CF6:  CALL   2312
10CFA:  MOVFF  1BA,9E8
10CFE:  MOVLW  37
10D00:  MOVLB  9
10D02:  MOVWF  xE9
10D04:  MOVLB  0
10D06:  CALL   2542
10D0A:  MOVFF  1B9,9E8
10D0E:  MOVLW  37
10D10:  MOVLB  9
10D12:  MOVWF  xE9
10D14:  MOVLB  0
10D16:  CALL   2542
10D1A:  MOVFF  1B8,9E8
10D1E:  MOVLW  37
10D20:  MOVLB  9
10D22:  MOVWF  xE9
10D24:  MOVLB  0
10D26:  CALL   2542
10D2A:  MOVFF  1B7,9E8
10D2E:  MOVLW  37
10D30:  MOVLB  9
10D32:  MOVWF  xE9
10D34:  MOVLB  0
10D36:  CALL   2542
10D3A:  MOVLW  0D
10D3C:  BTFSS  FA6.6
10D3E:  GOTO   10D3C
10D42:  MOVLB  E
10D44:  MOVWF  xF9
10D46:  MOVLW  0A
10D48:  MOVLB  0
10D4A:  BTFSS  FA6.6
10D4C:  GOTO   10D4A
10D50:  MOVLB  E
10D52:  MOVWF  xF9
....................     fprintf(PC, "\t-----\t----------\r\n");
10D54:  MOVLW  96
10D56:  MOVWF  FF6
10D58:  MOVLW  0A
10D5A:  MOVWF  FF7
10D5C:  MOVLW  00
10D5E:  MOVWF  FF8
10D60:  MOVLB  0
10D62:  CALL   22DC
.................... 
.................... 
....................     // Erase Area
....................     fprintf(PC, "ERASE SMF AREA\r\n");
10D66:  MOVLW  AA
10D68:  MOVWF  FF6
10D6A:  MOVLW  0A
10D6C:  MOVWF  FF7
10D6E:  MOVLW  00
10D70:  MOVWF  FF8
10D72:  CALL   22DC
....................     for ( unsigned int32 address = smf_data_address_start; address < smf_data_address_end; address += SUBSECTOR_SIZE )
10D76:  MOVFF  1B6,1C6
10D7A:  MOVFF  1B5,1C5
10D7E:  MOVFF  1B4,1C4
10D82:  MOVFF  1B3,1C3
10D86:  MOVLB  1
10D88:  MOVF   xC6,W
10D8A:  SUBWF  xBA,W
10D8C:  BTFSC  FD8.0
10D8E:  BRA    10D96
10D90:  MOVLB  0
10D92:  GOTO   10E18
10D96:  MOVLB  0
10D98:  BTFSS  FD8.2
10D9A:  GOTO   10DE0
10D9E:  MOVLB  1
10DA0:  MOVF   xC5,W
10DA2:  SUBWF  xB9,W
10DA4:  BTFSC  FD8.0
10DA6:  BRA    10DAE
10DA8:  MOVLB  0
10DAA:  GOTO   10E18
10DAE:  MOVLB  0
10DB0:  BTFSS  FD8.2
10DB2:  GOTO   10DE0
10DB6:  MOVLB  1
10DB8:  MOVF   xC4,W
10DBA:  SUBWF  xB8,W
10DBC:  BTFSC  FD8.0
10DBE:  BRA    10DC6
10DC0:  MOVLB  0
10DC2:  GOTO   10E18
10DC6:  MOVLB  0
10DC8:  BTFSS  FD8.2
10DCA:  GOTO   10DE0
10DCE:  MOVLB  1
10DD0:  MOVF   xB7,W
10DD2:  SUBWF  xC3,W
10DD4:  BTFSS  FD8.0
10DD6:  BRA    10DDE
10DD8:  MOVLB  0
10DDA:  GOTO   10E18
10DDE:  MOVLB  0
....................     {
....................         subsector_4kByte_erase(smf, address);
10DE0:  MOVFF  119,A07
10DE4:  MOVFF  118,A06
10DE8:  MOVFF  117,A05
10DEC:  MOVFF  116,A04
10DF0:  MOVFF  1C6,A0B
10DF4:  MOVFF  1C5,A0A
10DF8:  MOVFF  1C4,A09
10DFC:  MOVFF  1C3,A08
10E00:  CALL   4D3A
10E04:  MOVLW  10
10E06:  MOVLB  1
10E08:  ADDWF  xC4,F
10E0A:  MOVLW  00
10E0C:  ADDWFC xC5,F
10E0E:  MOVLW  00
10E10:  ADDWFC xC6,F
10E12:  MOVLB  0
10E14:  GOTO   10D86
....................     }
....................     fprintf(PC, "\tERASE SMF AREA DONE\r\n");
10E18:  MOVLW  BC
10E1A:  MOVWF  FF6
10E1C:  MOVLW  0A
10E1E:  MOVWF  FF7
10E20:  MOVLW  00
10E22:  MOVWF  FF8
10E24:  CALL   22DC
.................... 
....................     // Write Data
....................     unsigned int8 buffer[PACKET_SIZE];
....................     unsigned int32 smf_write_address = smf_data_address_start;
....................     unsigned int32 misf_read_address = misf_write_src;
10E28:  MOVFF  1B6,20A
10E2C:  MOVFF  1B5,209
10E30:  MOVFF  1B4,208
10E34:  MOVFF  1B3,207
10E38:  MOVFF  1A6,20E
10E3C:  MOVFF  1A5,20D
10E40:  MOVFF  1A4,20C
10E44:  MOVFF  1A3,20B
....................     fprintf(PC, "WRITE DATA TO SMF\r\n");
10E48:  MOVLW  D4
10E4A:  MOVWF  FF6
10E4C:  MOVLW  0A
10E4E:  MOVWF  FF7
10E50:  MOVLW  00
10E52:  MOVWF  FF8
10E54:  CALL   22DC
....................     while (misf_write_size > 0)
10E58:  MOVLB  1
10E5A:  MOVF   xA7,F
10E5C:  BTFSC  FD8.2
10E5E:  BRA    10E66
10E60:  MOVLB  0
10E62:  GOTO   10E98
10E66:  MOVLB  0
10E68:  MOVLB  1
10E6A:  MOVF   xA8,F
10E6C:  BTFSC  FD8.2
10E6E:  BRA    10E76
10E70:  MOVLB  0
10E72:  GOTO   10E98
10E76:  MOVLB  0
10E78:  MOVLB  1
10E7A:  MOVF   xA9,F
10E7C:  BTFSC  FD8.2
10E7E:  BRA    10E86
10E80:  MOVLB  0
10E82:  GOTO   10E98
10E86:  MOVLB  0
10E88:  MOVLB  1
10E8A:  MOVF   xAA,F
10E8C:  BTFSS  FD8.2
10E8E:  BRA    10E96
10E90:  MOVLB  0
10E92:  GOTO   111C0
10E96:  MOVLB  0
....................     {
....................         memset(buffer, 0x11, PACKET_SIZE);
10E98:  MOVLW  01
10E9A:  MOVWF  FEA
10E9C:  MOVLW  C7
10E9E:  MOVWF  FE9
10EA0:  MOVLW  11
10EA2:  MOVWF  00
10EA4:  CLRF   02
10EA6:  MOVLW  40
10EA8:  MOVWF  01
10EAA:  CALL   234C
....................         read_data_bytes(mis_fm, misf_read_address, buffer, PACKET_SIZE);
10EAE:  MOVFF  115,AED
10EB2:  MOVFF  114,AEC
10EB6:  MOVFF  113,AEB
10EBA:  MOVFF  112,AEA
10EBE:  MOVFF  20E,AF1
10EC2:  MOVFF  20D,AF0
10EC6:  MOVFF  20C,AEF
10ECA:  MOVFF  20B,AEE
10ECE:  MOVLW  01
10ED0:  MOVLB  A
10ED2:  MOVWF  xF3
10ED4:  MOVLW  C7
10ED6:  MOVWF  xF2
10ED8:  CLRF   xF7
10EDA:  CLRF   xF6
10EDC:  CLRF   xF5
10EDE:  MOVLW  40
10EE0:  MOVWF  xF4
10EE2:  MOVLB  0
10EE4:  CALL   2ECA
....................         fprintf(PC," ");
10EE8:  MOVLW  20
10EEA:  BTFSS  FA6.6
10EEC:  GOTO   10EEA
10EF0:  MOVLB  E
10EF2:  MOVWF  xF9
....................         write_data_bytes(smf, smf_write_address, buffer, PACKET_SIZE);
10EF4:  MOVFF  119,AED
10EF8:  MOVFF  118,AEC
10EFC:  MOVFF  117,AEB
10F00:  MOVFF  116,AEA
10F04:  MOVFF  20A,AF1
10F08:  MOVFF  209,AF0
10F0C:  MOVFF  208,AEF
10F10:  MOVFF  207,AEE
10F14:  MOVLW  01
10F16:  MOVLB  A
10F18:  MOVWF  xF3
10F1A:  MOVLW  C7
10F1C:  MOVWF  xF2
10F1E:  CLRF   xF5
10F20:  MOVLW  40
10F22:  MOVWF  xF4
10F24:  MOVLB  0
10F26:  CALL   3F36
....................         fprintf(PC,".");
10F2A:  MOVLW  2E
10F2C:  BTFSS  FA6.6
10F2E:  GOTO   10F2C
10F32:  MOVLB  E
10F34:  MOVWF  xF9
....................         // counter update
....................         if (misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter >= PACKET_SIZE){
10F36:  MOVLB  1
10F38:  MOVF   xA1,W
10F3A:  MOVWF  FE9
10F3C:  MOVF   xA2,W
10F3E:  MOVWF  FEA
10F40:  MOVF   FEF,W
10F42:  MULLW  0A
10F44:  MOVF   FF3,W
10F46:  MOVLB  2
10F48:  CLRF   x11
10F4A:  MOVWF  x10
10F4C:  MOVLW  04
10F4E:  ADDWF  x10,W
10F50:  MOVWF  01
10F52:  MOVLW  00
10F54:  ADDWFC x11,W
10F56:  MOVWF  03
10F58:  MOVF   01,W
10F5A:  ADDLW  22
10F5C:  MOVWF  FE9
10F5E:  MOVLW  01
10F60:  ADDWFC 03,W
10F62:  MOVWF  FEA
10F64:  MOVFF  FEF,210
10F68:  MOVFF  FEC,211
10F6C:  MOVFF  FEC,212
10F70:  MOVFF  FEC,213
10F74:  MOVF   FED,F
10F76:  MOVF   FED,F
10F78:  MOVF   FED,F
10F7A:  MOVF   x13,F
10F7C:  BTFSC  FD8.2
10F7E:  BRA    10F86
10F80:  MOVLB  0
10F82:  GOTO   10FBA
10F86:  MOVLB  0
10F88:  MOVLB  2
10F8A:  MOVF   x12,F
10F8C:  BTFSC  FD8.2
10F8E:  BRA    10F96
10F90:  MOVLB  0
10F92:  GOTO   10FBA
10F96:  MOVLB  0
10F98:  MOVLB  2
10F9A:  MOVF   x11,F
10F9C:  BTFSC  FD8.2
10F9E:  BRA    10FA6
10FA0:  MOVLB  0
10FA2:  GOTO   10FBA
10FA6:  MOVLB  0
10FA8:  MOVLB  2
10FAA:  MOVF   x10,W
10FAC:  SUBLW  3F
10FAE:  BTFSS  FD8.0
10FB0:  BRA    10FB8
10FB2:  MOVLB  0
10FB4:  GOTO   11022
10FB8:  MOVLB  0
....................             misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter -= PACKET_SIZE;
10FBA:  MOVLB  1
10FBC:  MOVF   xA1,W
10FBE:  MOVWF  FE9
10FC0:  MOVF   xA2,W
10FC2:  MOVWF  FEA
10FC4:  MOVF   FEF,W
10FC6:  MULLW  0A
10FC8:  MOVF   FF3,W
10FCA:  MOVLB  2
10FCC:  CLRF   x11
10FCE:  MOVWF  x10
10FD0:  MOVLW  04
10FD2:  ADDWF  x10,W
10FD4:  MOVWF  01
10FD6:  MOVLW  00
10FD8:  ADDWFC x11,W
10FDA:  MOVWF  03
10FDC:  MOVF   01,W
10FDE:  ADDLW  22
10FE0:  MOVWF  FE9
10FE2:  MOVLW  01
10FE4:  ADDWFC 03,W
10FE6:  MOVWF  FEA
10FE8:  MOVLW  40
10FEA:  SUBWF  FEF,W
10FEC:  MOVWF  00
10FEE:  MOVLW  00
10FF0:  SUBWFB FEC,W
10FF2:  MOVWF  01
10FF4:  MOVLW  00
10FF6:  SUBWFB FEC,W
10FF8:  MOVWF  02
10FFA:  MOVLW  00
10FFC:  SUBWFB FEC,W
10FFE:  MOVWF  03
11000:  MOVF   FED,F
11002:  MOVF   FED,F
11004:  MOVF   FED,F
11006:  MOVFF  00,FEF
1100A:  MOVFF  01,FEC
1100E:  MOVFF  02,FEC
11012:  MOVFF  03,FEC
11016:  MOVF   FED,F
11018:  MOVF   FED,F
1101A:  MOVF   FED,F
1101C:  MOVLB  0
....................         }else{
1101E:  GOTO   11134
....................             unsigned int8 add = PACKET_SIZE - misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter;
11022:  MOVLB  1
11024:  MOVF   xA1,W
11026:  MOVWF  FE9
11028:  MOVF   xA2,W
1102A:  MOVWF  FEA
1102C:  MOVF   FEF,W
1102E:  MULLW  0A
11030:  MOVF   FF3,W
11032:  MOVLB  2
11034:  CLRF   x11
11036:  MOVWF  x10
11038:  MOVLW  04
1103A:  ADDWF  x10,W
1103C:  MOVWF  01
1103E:  MOVLW  00
11040:  ADDWFC x11,W
11042:  MOVWF  03
11044:  MOVF   01,W
11046:  ADDLW  22
11048:  MOVWF  FE9
1104A:  MOVLW  01
1104C:  ADDWFC 03,W
1104E:  MOVWF  FEA
11050:  MOVFF  FEF,00
11054:  MOVFF  FEC,01
11058:  MOVFF  FEC,02
1105C:  MOVFF  FEC,03
11060:  MOVF   FED,F
11062:  MOVF   FED,F
11064:  MOVF   FED,F
11066:  MOVLW  40
11068:  BSF    FD8.0
1106A:  SUBFWB 00,W
1106C:  MOVWF  x0F
1106E:  MOVLB  0
....................             misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter = 0;
11070:  MOVLB  1
11072:  MOVF   xA1,W
11074:  MOVWF  FE9
11076:  MOVF   xA2,W
11078:  MOVWF  FEA
1107A:  MOVF   FEF,W
1107C:  MULLW  0A
1107E:  MOVF   FF3,W
11080:  MOVLB  2
11082:  CLRF   x11
11084:  MOVWF  x10
11086:  MOVLW  04
11088:  ADDWF  x10,W
1108A:  MOVWF  01
1108C:  MOVLW  00
1108E:  ADDWFC x11,W
11090:  MOVWF  03
11092:  MOVF   01,W
11094:  ADDLW  22
11096:  MOVWF  FE9
11098:  MOVLW  01
1109A:  ADDWFC 03,W
1109C:  MOVWF  FEA
1109E:  CLRF   FEF
110A0:  CLRF   FEC
110A2:  CLRF   FEC
110A4:  CLRF   FEC
110A6:  MOVF   FED,F
110A8:  MOVF   FED,F
110AA:  MOVF   FED,F
....................             misf_counter_table[smf_queue_ptr->mission_id].used_counter += add;
110AC:  MOVLB  1
110AE:  MOVF   xA1,W
110B0:  MOVWF  FE9
110B2:  MOVF   xA2,W
110B4:  MOVWF  FEA
110B6:  MOVF   FEF,W
110B8:  MULLW  0A
110BA:  MOVF   FF3,W
110BC:  MOVLB  2
110BE:  CLRF   x11
110C0:  MOVWF  x10
110C2:  MOVLW  22
110C4:  ADDWF  x10,W
110C6:  MOVWF  FE9
110C8:  MOVLW  01
110CA:  ADDWFC x11,W
110CC:  MOVWF  FEA
110CE:  MOVF   x0F,W
110D0:  ADDWF  FEF,W
110D2:  MOVWF  00
110D4:  MOVLW  00
110D6:  ADDWFC FEC,W
110D8:  MOVWF  01
110DA:  MOVLW  00
110DC:  ADDWFC FEC,W
110DE:  MOVWF  02
110E0:  MOVLW  00
110E2:  ADDWFC FEC,W
110E4:  MOVWF  03
110E6:  MOVF   FED,F
110E8:  MOVF   FED,F
110EA:  MOVF   FED,F
110EC:  MOVFF  00,FEF
110F0:  MOVFF  01,FEC
110F4:  MOVFF  02,FEC
110F8:  MOVFF  03,FEC
110FC:  MOVF   FED,F
110FE:  MOVF   FED,F
11100:  MOVF   FED,F
....................             misf_counter_table[smf_queue_ptr->mission_id].reserve_counter1 = 0;
11102:  MOVLB  1
11104:  MOVF   xA1,W
11106:  MOVWF  FE9
11108:  MOVF   xA2,W
1110A:  MOVWF  FEA
1110C:  MOVF   FEF,W
1110E:  MULLW  0A
11110:  MOVF   FF3,W
11112:  MOVLB  2
11114:  CLRF   x11
11116:  MOVWF  x10
11118:  MOVLW  08
1111A:  ADDWF  x10,W
1111C:  MOVWF  01
1111E:  MOVLW  00
11120:  ADDWFC x11,W
11122:  MOVWF  03
11124:  MOVF   01,W
11126:  ADDLW  22
11128:  MOVWF  FE9
1112A:  MOVLW  01
1112C:  ADDWFC 03,W
1112E:  MOVWF  FEA
11130:  CLRF   FEF
11132:  MOVLB  0
....................         }
....................         misf_read_address += PACKET_SIZE;
11134:  MOVLW  40
11136:  MOVLB  2
11138:  ADDWF  x0B,F
1113A:  MOVLW  00
1113C:  ADDWFC x0C,F
1113E:  MOVLW  00
11140:  ADDWFC x0D,F
11142:  MOVLW  00
11144:  ADDWFC x0E,F
....................         smf_write_address += PACKET_SIZE;
11146:  MOVLW  40
11148:  ADDWF  x07,F
1114A:  MOVLW  00
1114C:  ADDWFC x08,F
1114E:  MOVLW  00
11150:  ADDWFC x09,F
11152:  MOVLW  00
11154:  ADDWFC x0A,F
....................         if (misf_write_size > PACKET_SIZE){
11156:  MOVLB  1
11158:  MOVF   xAA,F
1115A:  BTFSC  FD8.2
1115C:  BRA    11164
1115E:  MOVLB  0
11160:  GOTO   11198
11164:  MOVLB  0
11166:  MOVLB  1
11168:  MOVF   xA9,F
1116A:  BTFSC  FD8.2
1116C:  BRA    11174
1116E:  MOVLB  0
11170:  GOTO   11198
11174:  MOVLB  0
11176:  MOVLB  1
11178:  MOVF   xA8,F
1117A:  BTFSC  FD8.2
1117C:  BRA    11184
1117E:  MOVLB  0
11180:  GOTO   11198
11184:  MOVLB  0
11186:  MOVLB  1
11188:  MOVF   xA7,W
1118A:  SUBLW  40
1118C:  BTFSS  FD8.0
1118E:  BRA    11196
11190:  MOVLB  0
11192:  GOTO   111B0
11196:  MOVLB  0
....................             misf_write_size -= PACKET_SIZE;
11198:  MOVLW  40
1119A:  MOVLB  1
1119C:  SUBWF  xA7,F
1119E:  MOVLW  00
111A0:  SUBWFB xA8,F
111A2:  MOVLW  00
111A4:  SUBWFB xA9,F
111A6:  MOVLW  00
111A8:  SUBWFB xAA,F
111AA:  MOVLB  0
....................         }else{
111AC:  GOTO   111BC
....................             misf_write_size = 0;
111B0:  MOVLB  1
111B2:  CLRF   xAA
111B4:  CLRF   xA9
111B6:  CLRF   xA8
111B8:  CLRF   xA7
111BA:  MOVLB  0
....................         }
111BC:  GOTO   10E58
....................         
....................     }
....................     fprintf(PC, "\r\n");
111C0:  MOVLW  0D
111C2:  BTFSS  FA6.6
111C4:  GOTO   111C2
111C8:  MOVLB  E
111CA:  MOVWF  xF9
111CC:  MOVLW  0A
111CE:  MOVLB  0
111D0:  BTFSS  FA6.6
111D2:  GOTO   111D0
111D6:  MOVLB  E
111D8:  MOVWF  xF9
.................... 
....................     // Update SMF Counter Status
....................     fprintf(PC, "UPDATE SMF COUNTER STATUS\r\n");
111DA:  MOVLW  E8
111DC:  MOVWF  FF6
111DE:  MOVLW  0A
111E0:  MOVWF  FF7
111E2:  MOVLW  00
111E4:  MOVWF  FF8
111E6:  MOVLB  0
111E8:  CALL   22DC
....................     subsector_4kByte_erase(SMF, smf_header_address_start);
111EC:  MOVFF  119,A07
111F0:  MOVFF  118,A06
111F4:  MOVFF  117,A05
111F8:  MOVFF  116,A04
111FC:  MOVFF  1B2,A0B
11200:  MOVFF  1B1,A0A
11204:  MOVFF  1B0,A09
11208:  MOVFF  1AF,A08
1120C:  CALL   4D3A
....................     write_data_byte(SMF, smf_header_address_start + 0, (used_size >> 24)  & 0xFF);
11210:  MOVFF  1AE,211
11214:  MOVLB  2
11216:  CLRF   x12
11218:  CLRF   x13
1121A:  CLRF   x14
1121C:  CLRF   x12
1121E:  CLRF   x13
11220:  CLRF   x14
11222:  MOVFF  119,21C
11226:  MOVFF  118,21B
1122A:  MOVFF  117,21A
1122E:  MOVFF  116,219
11232:  MOVFF  1B2,220
11236:  MOVFF  1B1,21F
1123A:  MOVFF  1B0,21E
1123E:  MOVFF  1AF,21D
11242:  MOVFF  211,221
11246:  MOVLB  0
11248:  CALL   10138
....................     write_data_byte(SMF, smf_header_address_start + 1, (used_size >> 16)  & 0xFF);
1124C:  MOVLW  01
1124E:  MOVLB  1
11250:  ADDWF  xAF,W
11252:  MOVLB  2
11254:  MOVWF  x10
11256:  MOVLW  00
11258:  MOVLB  1
1125A:  ADDWFC xB0,W
1125C:  MOVLB  2
1125E:  MOVWF  x11
11260:  MOVLW  00
11262:  MOVLB  1
11264:  ADDWFC xB1,W
11266:  MOVLB  2
11268:  MOVWF  x12
1126A:  MOVLW  00
1126C:  MOVLB  1
1126E:  ADDWFC xB2,W
11270:  MOVLB  2
11272:  MOVWF  x13
11274:  MOVFF  1AD,215
11278:  MOVFF  1AE,216
1127C:  CLRF   x17
1127E:  CLRF   x18
11280:  CLRF   x16
11282:  CLRF   x17
11284:  CLRF   x18
11286:  MOVFF  119,21C
1128A:  MOVFF  118,21B
1128E:  MOVFF  117,21A
11292:  MOVFF  116,219
11296:  MOVFF  213,220
1129A:  MOVFF  212,21F
1129E:  MOVFF  211,21E
112A2:  MOVFF  210,21D
112A6:  MOVFF  215,221
112AA:  MOVLB  0
112AC:  CALL   10138
....................     write_data_byte(SMF, smf_header_address_start + 2, (used_size >> 8) & 0xFF);
112B0:  MOVLW  02
112B2:  MOVLB  1
112B4:  ADDWF  xAF,W
112B6:  MOVLB  2
112B8:  MOVWF  x10
112BA:  MOVLW  00
112BC:  MOVLB  1
112BE:  ADDWFC xB0,W
112C0:  MOVLB  2
112C2:  MOVWF  x11
112C4:  MOVLW  00
112C6:  MOVLB  1
112C8:  ADDWFC xB1,W
112CA:  MOVLB  2
112CC:  MOVWF  x12
112CE:  MOVLW  00
112D0:  MOVLB  1
112D2:  ADDWFC xB2,W
112D4:  MOVLB  2
112D6:  MOVWF  x13
112D8:  MOVFF  1AC,215
112DC:  MOVFF  1AD,216
112E0:  MOVFF  1AE,217
112E4:  CLRF   x18
112E6:  CLRF   x16
112E8:  CLRF   x17
112EA:  CLRF   x18
112EC:  MOVFF  119,21C
112F0:  MOVFF  118,21B
112F4:  MOVFF  117,21A
112F8:  MOVFF  116,219
112FC:  MOVFF  213,220
11300:  MOVFF  212,21F
11304:  MOVFF  211,21E
11308:  MOVFF  210,21D
1130C:  MOVFF  215,221
11310:  MOVLB  0
11312:  CALL   10138
....................     write_data_byte(SMF, smf_header_address_start + 3, (used_size >> 0) & 0xFF);
11316:  MOVLW  03
11318:  MOVLB  1
1131A:  ADDWF  xAF,W
1131C:  MOVLB  2
1131E:  MOVWF  x10
11320:  MOVLW  00
11322:  MOVLB  1
11324:  ADDWFC xB0,W
11326:  MOVLB  2
11328:  MOVWF  x11
1132A:  MOVLW  00
1132C:  MOVLB  1
1132E:  ADDWFC xB1,W
11330:  MOVLB  2
11332:  MOVWF  x12
11334:  MOVLW  00
11336:  MOVLB  1
11338:  ADDWFC xB2,W
1133A:  MOVLB  2
1133C:  MOVWF  x13
1133E:  MOVFF  1AE,218
11342:  MOVFF  1AD,217
11346:  MOVFF  1AC,216
1134A:  MOVFF  1AB,215
1134E:  CLRF   x16
11350:  CLRF   x17
11352:  CLRF   x18
11354:  MOVFF  119,21C
11358:  MOVFF  118,21B
1135C:  MOVFF  117,21A
11360:  MOVFF  116,219
11364:  MOVFF  213,220
11368:  MOVFF  212,21F
1136C:  MOVFF  211,21E
11370:  MOVFF  210,21D
11374:  MOVFF  215,221
11378:  MOVLB  0
1137A:  CALL   10138
.................... 
....................     // print_smf_counter_status(&smf_data_table);
....................     // write size area
....................     // smf_write_header(&smf_data_table);
....................     misf_update_address_area();
1137E:  CALL   505E
....................     fprintf(PC, "\r\n_________End copy_data__________\r\n");
11382:  MOVLW  04
11384:  MOVWF  FF6
11386:  MOVLW  0B
11388:  MOVWF  FF7
1138A:  MOVLW  00
1138C:  MOVWF  FF8
1138E:  CALL   22DC
....................     fprintf(PC, "_______________________________\r\n\r\n");
11392:  MOVLW  2A
11394:  MOVWF  FF6
11396:  MOVLW  0B
11398:  MOVWF  FF7
1139A:  MOVLW  00
1139C:  MOVWF  FF8
1139E:  CALL   22DC
113A2:  GOTO   124DC (RETURN)
.................... }
.................... 
.................... void smf_read(FlashOperationStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
1152E:  MOVLW  4E
11530:  MOVWF  FF6
11532:  MOVLW  0B
11534:  MOVWF  FF7
11536:  MOVLW  00
11538:  MOVWF  FF8
1153A:  CALL   22DC
....................     fprintf(PC, "___Start SMF Read____\r\n");
1153E:  MOVLW  68
11540:  MOVWF  FF6
11542:  MOVLW  0B
11544:  MOVWF  FF7
11546:  MOVLW  00
11548:  MOVWF  FF8
1154A:  CALL   22DC
.................... 
....................     int8 buffer[PACKET_SIZE];
.................... 
....................     SmfAddressStruct smf_address = get_smf_address_struct(smf_data->mission_id);
....................     unsigned int32 read_address = smf_data->misf_start_addr; // 呼び出し側でSMF内アドレスを設定する前提
....................     unsigned int32 read_size = smf_data->misf_size;
1154E:  MOVLB  1
11550:  MOVF   xA1,W
11552:  MOVWF  FE9
11554:  MOVF   xA2,W
11556:  MOVWF  FEA
11558:  MOVFF  FEF,203
1155C:  MOVFF  203,20A
11560:  MOVLB  0
11562:  CALL   113A6
11566:  MOVFF  02,03
1156A:  MOVF   01,W
1156C:  MOVWF  FE1
1156E:  MOVFF  03,FE2
11572:  MOVLW  01
11574:  MOVWF  FEA
11576:  MOVLW  E3
11578:  MOVWF  FE9
1157A:  MOVLW  08
1157C:  MOVWF  01
1157E:  MOVFF  FE6,FEE
11582:  DECFSZ 01,F
11584:  GOTO   1157E
11588:  MOVLW  04
1158A:  MOVLB  1
1158C:  ADDWF  xA1,W
1158E:  MOVWF  FE9
11590:  MOVLW  00
11592:  ADDWFC xA2,W
11594:  MOVWF  FEA
11596:  MOVFF  FEF,1EB
1159A:  MOVFF  FEC,1EC
1159E:  MOVFF  FEC,1ED
115A2:  MOVFF  FEC,1EE
115A6:  MOVF   FED,F
115A8:  MOVF   FED,F
115AA:  MOVF   FED,F
115AC:  MOVLW  08
115AE:  ADDWF  xA1,W
115B0:  MOVWF  FE9
115B2:  MOVLW  00
115B4:  ADDWFC xA2,W
115B6:  MOVWF  FEA
115B8:  MOVFF  FEF,1EF
115BC:  MOVFF  FEC,1F0
115C0:  MOVFF  FEC,1F1
115C4:  MOVFF  FEC,1F2
115C8:  MOVF   FED,F
115CA:  MOVF   FED,F
115CC:  MOVF   FED,F
.................... 
....................     // 境界チェック (start/end は [start_address, end_address) の半開区間想定)
....................     if (read_address < (unsigned int32)smf_address.start_address || read_address >= (unsigned int32)smf_address.end_address) {
115CE:  MOVF   xEE,W
115D0:  SUBWF  xE6,W
115D2:  BTFSC  FD8.0
115D4:  BRA    115DC
115D6:  MOVLB  0
115D8:  GOTO   11626
115DC:  MOVLB  0
115DE:  BTFSS  FD8.2
115E0:  GOTO   11680
115E4:  MOVLB  1
115E6:  MOVF   xED,W
115E8:  SUBWF  xE5,W
115EA:  BTFSC  FD8.0
115EC:  BRA    115F4
115EE:  MOVLB  0
115F0:  GOTO   11626
115F4:  MOVLB  0
115F6:  BTFSS  FD8.2
115F8:  GOTO   11680
115FC:  MOVLB  1
115FE:  MOVF   xEC,W
11600:  SUBWF  xE4,W
11602:  BTFSC  FD8.0
11604:  BRA    1160C
11606:  MOVLB  0
11608:  GOTO   11626
1160C:  MOVLB  0
1160E:  BTFSS  FD8.2
11610:  GOTO   11680
11614:  MOVLB  1
11616:  MOVF   xE3,W
11618:  SUBWF  xEB,W
1161A:  BTFSC  FD8.0
1161C:  BRA    11624
1161E:  MOVLB  0
11620:  GOTO   11680
11624:  MOVLB  0
11626:  MOVLB  1
11628:  MOVF   xEA,W
1162A:  SUBWF  xEE,W
1162C:  BTFSC  FD8.0
1162E:  BRA    11636
11630:  MOVLB  0
11632:  GOTO   117A4
11636:  MOVLB  0
11638:  BTFSS  FD8.2
1163A:  GOTO   11680
1163E:  MOVLB  1
11640:  MOVF   xE9,W
11642:  SUBWF  xED,W
11644:  BTFSC  FD8.0
11646:  BRA    1164E
11648:  MOVLB  0
1164A:  GOTO   117A4
1164E:  MOVLB  0
11650:  BTFSS  FD8.2
11652:  GOTO   11680
11656:  MOVLB  1
11658:  MOVF   xE8,W
1165A:  SUBWF  xEC,W
1165C:  BTFSC  FD8.0
1165E:  BRA    11666
11660:  MOVLB  0
11662:  GOTO   117A4
11666:  MOVLB  0
11668:  BTFSS  FD8.2
1166A:  GOTO   11680
1166E:  MOVLB  1
11670:  MOVF   xE7,W
11672:  SUBWF  xEB,W
11674:  BTFSC  FD8.0
11676:  BRA    1167E
11678:  MOVLB  0
1167A:  GOTO   117A4
1167E:  MOVLB  0
....................         fprintf(PC, "Error: Read address 0x%08LX out of SMF mission range [0x%08LX - 0x%08LX)\r\n",
....................                 read_address, (unsigned int32)smf_address.start_address, (unsigned int32)smf_address.end_address);
11680:  MOVLW  80
11682:  MOVWF  FF6
11684:  MOVLW  0B
11686:  MOVWF  FF7
11688:  MOVLW  00
1168A:  MOVWF  FF8
1168C:  MOVLW  16
1168E:  MOVLB  9
11690:  MOVWF  xC2
11692:  MOVLB  0
11694:  CALL   2312
11698:  MOVFF  1EE,9E8
1169C:  MOVLW  37
1169E:  MOVLB  9
116A0:  MOVWF  xE9
116A2:  MOVLB  0
116A4:  CALL   2542
116A8:  MOVFF  1ED,9E8
116AC:  MOVLW  37
116AE:  MOVLB  9
116B0:  MOVWF  xE9
116B2:  MOVLB  0
116B4:  CALL   2542
116B8:  MOVFF  1EC,9E8
116BC:  MOVLW  37
116BE:  MOVLB  9
116C0:  MOVWF  xE9
116C2:  MOVLB  0
116C4:  CALL   2542
116C8:  MOVFF  1EB,9E8
116CC:  MOVLW  37
116CE:  MOVLB  9
116D0:  MOVWF  xE9
116D2:  MOVLB  0
116D4:  CALL   2542
116D8:  MOVLW  9B
116DA:  MOVWF  FF6
116DC:  MOVLW  0B
116DE:  MOVWF  FF7
116E0:  MOVLW  00
116E2:  MOVWF  FF8
116E4:  MOVLW  1D
116E6:  MOVLB  9
116E8:  MOVWF  xC2
116EA:  MOVLB  0
116EC:  CALL   2312
116F0:  MOVFF  1E6,9E8
116F4:  MOVLW  37
116F6:  MOVLB  9
116F8:  MOVWF  xE9
116FA:  MOVLB  0
116FC:  CALL   2542
11700:  MOVFF  1E5,9E8
11704:  MOVLW  37
11706:  MOVLB  9
11708:  MOVWF  xE9
1170A:  MOVLB  0
1170C:  CALL   2542
11710:  MOVFF  1E4,9E8
11714:  MOVLW  37
11716:  MOVLB  9
11718:  MOVWF  xE9
1171A:  MOVLB  0
1171C:  CALL   2542
11720:  MOVFF  1E3,9E8
11724:  MOVLW  37
11726:  MOVLB  9
11728:  MOVWF  xE9
1172A:  MOVLB  0
1172C:  CALL   2542
11730:  MOVLW  BD
11732:  MOVWF  FF6
11734:  MOVLW  0B
11736:  MOVWF  FF7
11738:  MOVLW  00
1173A:  MOVWF  FF8
1173C:  MOVLW  05
1173E:  MOVLB  9
11740:  MOVWF  xC2
11742:  MOVLB  0
11744:  CALL   2312
11748:  MOVFF  1EA,9E8
1174C:  MOVLW  37
1174E:  MOVLB  9
11750:  MOVWF  xE9
11752:  MOVLB  0
11754:  CALL   2542
11758:  MOVFF  1E9,9E8
1175C:  MOVLW  37
1175E:  MOVLB  9
11760:  MOVWF  xE9
11762:  MOVLB  0
11764:  CALL   2542
11768:  MOVFF  1E8,9E8
1176C:  MOVLW  37
1176E:  MOVLB  9
11770:  MOVWF  xE9
11772:  MOVLB  0
11774:  CALL   2542
11778:  MOVFF  1E7,9E8
1177C:  MOVLW  37
1177E:  MOVLB  9
11780:  MOVWF  xE9
11782:  MOVLB  0
11784:  CALL   2542
11788:  MOVLW  C7
1178A:  MOVWF  FF6
1178C:  MOVLW  0B
1178E:  MOVWF  FF7
11790:  MOVLW  00
11792:  MOVWF  FF8
11794:  MOVLW  03
11796:  MOVLB  9
11798:  MOVWF  xC2
1179A:  MOVLB  0
1179C:  CALL   2312
....................         return;
117A0:  GOTO   11C64
....................     }
....................     unsigned int32 mission_remaining = (unsigned int32)smf_address.end_address - read_address; // 読める残り
117A4:  MOVLB  1
117A6:  MOVF   xEB,W
117A8:  SUBWF  xE7,W
117AA:  MOVWF  xF3
117AC:  MOVF   xEC,W
117AE:  SUBWFB xE8,W
117B0:  MOVWF  xF4
117B2:  MOVF   xED,W
117B4:  SUBWFB xE9,W
117B6:  MOVWF  xF5
117B8:  MOVF   xEE,W
117BA:  SUBWFB xEA,W
117BC:  MOVWF  xF6
....................     if (read_size > mission_remaining) {
117BE:  MOVF   xF6,W
117C0:  SUBWF  xF2,W
117C2:  BTFSC  FD8.0
117C4:  BRA    117CC
117C6:  MOVLB  0
117C8:  GOTO   1189E
117CC:  MOVLB  0
117CE:  BTFSS  FD8.2
117D0:  GOTO   11816
117D4:  MOVLB  1
117D6:  MOVF   xF5,W
117D8:  SUBWF  xF1,W
117DA:  BTFSC  FD8.0
117DC:  BRA    117E4
117DE:  MOVLB  0
117E0:  GOTO   1189E
117E4:  MOVLB  0
117E6:  BTFSS  FD8.2
117E8:  GOTO   11816
117EC:  MOVLB  1
117EE:  MOVF   xF4,W
117F0:  SUBWF  xF0,W
117F2:  BTFSC  FD8.0
117F4:  BRA    117FC
117F6:  MOVLB  0
117F8:  GOTO   1189E
117FC:  MOVLB  0
117FE:  BTFSS  FD8.2
11800:  GOTO   11816
11804:  MOVLB  1
11806:  MOVF   xEF,W
11808:  SUBWF  xF3,W
1180A:  BTFSS  FD8.0
1180C:  BRA    11814
1180E:  MOVLB  0
11810:  GOTO   1189E
11814:  MOVLB  0
....................         fprintf(PC, "Warn: Adjust read size from %lu to %lu (mission end)\r\n", read_size, mission_remaining);
11816:  MOVLW  CC
11818:  MOVWF  FF6
1181A:  MOVLW  0B
1181C:  MOVWF  FF7
1181E:  MOVLW  00
11820:  MOVWF  FF8
11822:  MOVLW  1C
11824:  MOVLB  9
11826:  MOVWF  xC2
11828:  MOVLB  0
1182A:  CALL   2312
1182E:  MOVLW  41
11830:  MOVWF  FE9
11832:  MOVFF  1F2,209
11836:  MOVFF  1F1,208
1183A:  MOVFF  1F0,207
1183E:  MOVFF  1EF,206
11842:  CALL   62D2
11846:  MOVLW  EB
11848:  MOVWF  FF6
1184A:  MOVLW  0B
1184C:  MOVWF  FF7
1184E:  MOVLW  00
11850:  MOVWF  FF8
11852:  MOVLW  04
11854:  MOVLB  9
11856:  MOVWF  xC2
11858:  MOVLB  0
1185A:  CALL   2312
1185E:  MOVLW  41
11860:  MOVWF  FE9
11862:  MOVFF  1F6,209
11866:  MOVFF  1F5,208
1186A:  MOVFF  1F4,207
1186E:  MOVFF  1F3,206
11872:  CALL   62D2
11876:  MOVLW  F2
11878:  MOVWF  FF6
1187A:  MOVLW  0B
1187C:  MOVWF  FF7
1187E:  MOVLW  00
11880:  MOVWF  FF8
11882:  MOVLW  10
11884:  MOVLB  9
11886:  MOVWF  xC2
11888:  MOVLB  0
1188A:  CALL   2312
....................         read_size = mission_remaining;
1188E:  MOVFF  1F6,1F2
11892:  MOVFF  1F5,1F1
11896:  MOVFF  1F4,1F0
1189A:  MOVFF  1F3,1EF
....................     }
....................     if (read_size == 0) {
1189E:  MOVLB  1
118A0:  MOVF   xEF,F
118A2:  BTFSC  FD8.2
118A4:  BRA    118AC
118A6:  MOVLB  0
118A8:  GOTO   118F2
118AC:  MOVLB  0
118AE:  MOVLB  1
118B0:  MOVF   xF0,F
118B2:  BTFSC  FD8.2
118B4:  BRA    118BC
118B6:  MOVLB  0
118B8:  GOTO   118F2
118BC:  MOVLB  0
118BE:  MOVLB  1
118C0:  MOVF   xF1,F
118C2:  BTFSC  FD8.2
118C4:  BRA    118CC
118C6:  MOVLB  0
118C8:  GOTO   118F2
118CC:  MOVLB  0
118CE:  MOVLB  1
118D0:  MOVF   xF2,F
118D2:  BTFSC  FD8.2
118D4:  BRA    118DC
118D6:  MOVLB  0
118D8:  GOTO   118F2
118DC:  MOVLB  0
....................         fprintf(PC, "Info: Nothing to read (size=0)\r\n");
118DE:  MOVLW  04
118E0:  MOVWF  FF6
118E2:  MOVLW  0C
118E4:  MOVWF  FF7
118E6:  MOVLW  00
118E8:  MOVWF  FF8
118EA:  CALL   22DC
....................         return;
118EE:  GOTO   11C64
....................     }
.................... 
....................     fprintf(PC, "In SMF Read source data address: %LX\r\n", read_address);
118F2:  MOVLW  26
118F4:  MOVWF  FF6
118F6:  MOVLW  0C
118F8:  MOVWF  FF7
118FA:  MOVLW  00
118FC:  MOVWF  FF8
118FE:  MOVLW  21
11900:  MOVLB  9
11902:  MOVWF  xC2
11904:  MOVLB  0
11906:  CALL   2312
1190A:  MOVFF  1EE,9E8
1190E:  MOVLW  37
11910:  MOVLB  9
11912:  MOVWF  xE9
11914:  MOVLB  0
11916:  CALL   2542
1191A:  MOVFF  1ED,9E8
1191E:  MOVLW  37
11920:  MOVLB  9
11922:  MOVWF  xE9
11924:  MOVLB  0
11926:  CALL   2542
1192A:  MOVFF  1EC,9E8
1192E:  MOVLW  37
11930:  MOVLB  9
11932:  MOVWF  xE9
11934:  MOVLB  0
11936:  CALL   2542
1193A:  MOVFF  1EB,9E8
1193E:  MOVLW  37
11940:  MOVLB  9
11942:  MOVWF  xE9
11944:  MOVLB  0
11946:  CALL   2542
1194A:  MOVLW  0D
1194C:  BTFSS  FA6.6
1194E:  GOTO   1194C
11952:  MOVLB  E
11954:  MOVWF  xF9
11956:  MOVLW  0A
11958:  MOVLB  0
1195A:  BTFSS  FA6.6
1195C:  GOTO   1195A
11960:  MOVLB  E
11962:  MOVWF  xF9
....................     fprintf(PC, "In SMF Read data size          : %lu (0x%lx)\r\n\r\n", read_size, read_size);
11964:  MOVLW  4E
11966:  MOVWF  FF6
11968:  MOVLW  0C
1196A:  MOVWF  FF7
1196C:  MOVLW  00
1196E:  MOVWF  FF8
11970:  MOVLW  21
11972:  MOVLB  9
11974:  MOVWF  xC2
11976:  MOVLB  0
11978:  CALL   2312
1197C:  MOVLW  41
1197E:  MOVWF  FE9
11980:  MOVFF  1F2,209
11984:  MOVFF  1F1,208
11988:  MOVFF  1F0,207
1198C:  MOVFF  1EF,206
11990:  CALL   62D2
11994:  MOVLW  72
11996:  MOVWF  FF6
11998:  MOVLW  0C
1199A:  MOVWF  FF7
1199C:  MOVLW  00
1199E:  MOVWF  FF8
119A0:  MOVLW  04
119A2:  MOVLB  9
119A4:  MOVWF  xC2
119A6:  MOVLB  0
119A8:  CALL   2312
119AC:  MOVFF  1F2,9E8
119B0:  MOVLW  57
119B2:  MOVLB  9
119B4:  MOVWF  xE9
119B6:  MOVLB  0
119B8:  CALL   2542
119BC:  MOVFF  1F1,9E8
119C0:  MOVLW  57
119C2:  MOVLB  9
119C4:  MOVWF  xE9
119C6:  MOVLB  0
119C8:  CALL   2542
119CC:  MOVFF  1F0,9E8
119D0:  MOVLW  57
119D2:  MOVLB  9
119D4:  MOVWF  xE9
119D6:  MOVLB  0
119D8:  CALL   2542
119DC:  MOVFF  1EF,9E8
119E0:  MOVLW  57
119E2:  MOVLB  9
119E4:  MOVWF  xE9
119E6:  MOVLB  0
119E8:  CALL   2542
119EC:  MOVLW  79
119EE:  MOVWF  FF6
119F0:  MOVLW  0C
119F2:  MOVWF  FF7
119F4:  MOVLW  00
119F6:  MOVWF  FF8
119F8:  MOVLW  05
119FA:  MOVLB  9
119FC:  MOVWF  xC2
119FE:  MOVLB  0
11A00:  CALL   2312
.................... 
....................     if (!is_connect(smf)){
11A04:  MOVFF  119,253
11A08:  MOVFF  118,252
11A0C:  MOVFF  117,251
11A10:  MOVFF  116,250
11A14:  CALL   2E02
11A18:  MOVF   01,F
11A1A:  BTFSS  FD8.2
11A1C:  GOTO   11A30
....................         fprintf(PC, "Error: SMF is not connected\r\n");
11A20:  MOVLW  80
11A22:  MOVWF  FF6
11A24:  MOVLW  0C
11A26:  MOVWF  FF7
11A28:  MOVLW  00
11A2A:  MOVWF  FF8
11A2C:  CALL   22DC
....................     }
....................     fprintf(PC, "READ DATA FROM SMF...\r\n");
11A30:  MOVLW  9E
11A32:  MOVWF  FF6
11A34:  MOVLW  0C
11A36:  MOVWF  FF7
11A38:  MOVLW  00
11A3A:  MOVWF  FF8
11A3C:  CALL   22DC
....................     unsigned int32 end_address = read_address + read_size;
11A40:  MOVLB  1
11A42:  MOVF   xEF,W
11A44:  ADDWF  xEB,W
11A46:  MOVWF  xF7
11A48:  MOVF   xF0,W
11A4A:  ADDWFC xEC,W
11A4C:  MOVWF  xF8
11A4E:  MOVF   xF1,W
11A50:  ADDWFC xED,W
11A52:  MOVWF  xF9
11A54:  MOVF   xF2,W
11A56:  ADDWFC xEE,W
11A58:  MOVWF  xFA
....................     for (unsigned int32 addr = read_address; addr < end_address; addr += PACKET_SIZE) {
11A5A:  MOVFF  1EE,1FE
11A5E:  MOVFF  1ED,1FD
11A62:  MOVFF  1EC,1FC
11A66:  MOVFF  1EB,1FB
11A6A:  MOVLB  0
11A6C:  MOVLB  1
11A6E:  MOVF   xFE,W
11A70:  SUBWF  xFA,W
11A72:  BTFSC  FD8.0
11A74:  BRA    11A7C
11A76:  MOVLB  0
11A78:  GOTO   11C44
11A7C:  MOVLB  0
11A7E:  BTFSS  FD8.2
11A80:  GOTO   11AC6
11A84:  MOVLB  1
11A86:  MOVF   xFD,W
11A88:  SUBWF  xF9,W
11A8A:  BTFSC  FD8.0
11A8C:  BRA    11A94
11A8E:  MOVLB  0
11A90:  GOTO   11C44
11A94:  MOVLB  0
11A96:  BTFSS  FD8.2
11A98:  GOTO   11AC6
11A9C:  MOVLB  1
11A9E:  MOVF   xFC,W
11AA0:  SUBWF  xF8,W
11AA2:  BTFSC  FD8.0
11AA4:  BRA    11AAC
11AA6:  MOVLB  0
11AA8:  GOTO   11C44
11AAC:  MOVLB  0
11AAE:  BTFSS  FD8.2
11AB0:  GOTO   11AC6
11AB4:  MOVLB  1
11AB6:  MOVF   xF7,W
11AB8:  SUBWF  xFB,W
11ABA:  BTFSS  FD8.0
11ABC:  BRA    11AC4
11ABE:  MOVLB  0
11AC0:  GOTO   11C44
11AC4:  MOVLB  0
....................         unsigned int16 chunk = (end_address - addr) >= PACKET_SIZE ? PACKET_SIZE : (unsigned int16)(end_address - addr);
11AC6:  MOVLB  1
11AC8:  MOVF   xFB,W
11ACA:  SUBWF  xF7,W
11ACC:  MOVLB  2
11ACE:  MOVWF  x03
11AD0:  MOVLB  1
11AD2:  MOVF   xFC,W
11AD4:  SUBWFB xF8,W
11AD6:  MOVLB  2
11AD8:  MOVWF  x04
11ADA:  MOVLB  1
11ADC:  MOVF   xFD,W
11ADE:  SUBWFB xF9,W
11AE0:  MOVLB  2
11AE2:  MOVWF  x05
11AE4:  MOVLB  1
11AE6:  MOVF   xFE,W
11AE8:  SUBWFB xFA,W
11AEA:  MOVLB  2
11AEC:  MOVWF  x06
11AEE:  MOVF   x06,F
11AF0:  BTFSC  FD8.2
11AF2:  BRA    11AFA
11AF4:  MOVLB  0
11AF6:  GOTO   11B2E
11AFA:  MOVLB  0
11AFC:  MOVLB  2
11AFE:  MOVF   x05,F
11B00:  BTFSC  FD8.2
11B02:  BRA    11B0A
11B04:  MOVLB  0
11B06:  GOTO   11B2E
11B0A:  MOVLB  0
11B0C:  MOVLB  2
11B0E:  MOVF   x04,F
11B10:  BTFSC  FD8.2
11B12:  BRA    11B1A
11B14:  MOVLB  0
11B16:  GOTO   11B2E
11B1A:  MOVLB  0
11B1C:  MOVLB  2
11B1E:  MOVF   x03,W
11B20:  SUBLW  3F
11B22:  BTFSS  FD8.0
11B24:  BRA    11B2C
11B26:  MOVLB  0
11B28:  GOTO   11B36
11B2C:  MOVLB  0
11B2E:  CLRF   03
11B30:  MOVLW  40
11B32:  GOTO   11B58
11B36:  MOVLB  1
11B38:  MOVF   xFB,W
11B3A:  SUBWF  xF7,W
11B3C:  MOVWF  00
11B3E:  MOVF   xFC,W
11B40:  SUBWFB xF8,W
11B42:  MOVWF  01
11B44:  MOVF   xFD,W
11B46:  SUBWFB xF9,W
11B48:  MOVWF  02
11B4A:  MOVF   xFE,W
11B4C:  SUBWFB xFA,W
11B4E:  MOVWF  03
11B50:  MOVFF  01,03
11B54:  MOVF   00,W
11B56:  MOVLB  0
11B58:  MOVLB  1
11B5A:  MOVWF  xFF
11B5C:  MOVFF  03,200
11B60:  MOVLB  0
....................         read_data_bytes(smf, addr, buffer, chunk);
11B62:  MOVFF  119,AED
11B66:  MOVFF  118,AEC
11B6A:  MOVFF  117,AEB
11B6E:  MOVFF  116,AEA
11B72:  MOVFF  1FE,AF1
11B76:  MOVFF  1FD,AF0
11B7A:  MOVFF  1FC,AEF
11B7E:  MOVFF  1FB,AEE
11B82:  MOVLW  01
11B84:  MOVLB  A
11B86:  MOVWF  xF3
11B88:  MOVLW  A3
11B8A:  MOVWF  xF2
11B8C:  CLRF   xF7
11B8E:  CLRF   xF6
11B90:  MOVFF  200,AF5
11B94:  MOVFF  1FF,AF4
11B98:  MOVLB  0
11B9A:  CALL   2ECA
....................         for (unsigned int16 i = 0; i < chunk; i++) fprintf(PC, "%02X ", buffer[i]);
11B9E:  MOVLB  2
11BA0:  CLRF   x02
11BA2:  CLRF   x01
11BA4:  MOVLB  0
11BA6:  MOVLB  2
11BA8:  MOVF   x02,W
11BAA:  SUBWF  x00,W
11BAC:  BTFSC  FD8.0
11BAE:  BRA    11BB6
11BB0:  MOVLB  0
11BB2:  GOTO   11C10
11BB6:  MOVLB  0
11BB8:  BTFSS  FD8.2
11BBA:  GOTO   11BD2
11BBE:  MOVLB  1
11BC0:  MOVF   xFF,W
11BC2:  MOVLB  2
11BC4:  SUBWF  x01,W
11BC6:  BTFSS  FD8.0
11BC8:  BRA    11BD0
11BCA:  MOVLB  0
11BCC:  GOTO   11C10
11BD0:  MOVLB  0
11BD2:  MOVLW  A3
11BD4:  MOVLB  2
11BD6:  ADDWF  x01,W
11BD8:  MOVWF  FE9
11BDA:  MOVLW  01
11BDC:  ADDWFC x02,W
11BDE:  MOVWF  FEA
11BE0:  MOVFF  FEF,203
11BE4:  MOVFF  203,9E8
11BE8:  MOVLW  37
11BEA:  MOVLB  9
11BEC:  MOVWF  xE9
11BEE:  MOVLB  0
11BF0:  CALL   2542
11BF4:  MOVLW  20
11BF6:  BTFSS  FA6.6
11BF8:  GOTO   11BF6
11BFC:  MOVLB  E
11BFE:  MOVWF  xF9
11C00:  MOVLB  0
11C02:  MOVLB  2
11C04:  INCF   x01,F
11C06:  BTFSC  FD8.2
11C08:  INCF   x02,F
11C0A:  MOVLB  0
11C0C:  GOTO   11BA6
....................         fprintf(PC, "\r\n");
11C10:  MOVLW  0D
11C12:  BTFSS  FA6.6
11C14:  GOTO   11C12
11C18:  MOVLB  E
11C1A:  MOVWF  xF9
11C1C:  MOVLW  0A
11C1E:  MOVLB  0
11C20:  BTFSS  FA6.6
11C22:  GOTO   11C20
11C26:  MOVLB  E
11C28:  MOVWF  xF9
11C2A:  MOVLB  0
11C2C:  MOVLW  40
11C2E:  MOVLB  1
11C30:  ADDWF  xFB,F
11C32:  MOVLW  00
11C34:  ADDWFC xFC,F
11C36:  MOVLW  00
11C38:  ADDWFC xFD,F
11C3A:  MOVLW  00
11C3C:  ADDWFC xFE,F
11C3E:  MOVLB  0
11C40:  GOTO   11A6C
....................     }
....................     fprintf(PC, "\r\n___End SMF Read____\r\n");
11C44:  MOVLW  B6
11C46:  MOVWF  FF6
11C48:  MOVLW  0C
11C4A:  MOVWF  FF7
11C4C:  MOVLW  00
11C4E:  MOVWF  FF8
11C50:  CALL   22DC
....................     fprintf(PC, "____________________\r\n\r\n");
11C54:  MOVLW  CE
11C56:  MOVWF  FF6
11C58:  MOVLW  0C
11C5A:  MOVWF  FF7
11C5C:  MOVLW  00
11C5E:  MOVWF  FF8
11C60:  CALL   22DC
11C64:  GOTO   124EC (RETURN)
.................... }
.................... 
.................... void smf_erase(FlashOperationStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
11C68:  MOVLW  E8
11C6A:  MOVWF  FF6
11C6C:  MOVLW  0C
11C6E:  MOVWF  FF7
11C70:  MOVLW  00
11C72:  MOVWF  FF8
11C74:  CALL   22DC
....................     fprintf(PC, "___Start smf_erase____\r\n");
11C78:  MOVLW  02
11C7A:  MOVWF  FF6
11C7C:  MOVLW  0D
11C7E:  MOVWF  FF7
11C80:  MOVLW  00
11C82:  MOVWF  FF8
11C84:  CALL   22DC
.................... 
....................     SmfAddressStruct mission_type = get_smf_address_struct(smf_data->mission_id);
....................     unsigned int32 erase_address = smf_data->misf_start_addr;
....................     unsigned int32 erase_size = smf_data->misf_size;
11C88:  MOVLB  1
11C8A:  MOVF   xA1,W
11C8C:  MOVWF  FE9
11C8E:  MOVF   xA2,W
11C90:  MOVWF  FEA
11C92:  MOVFF  FEF,1BB
11C96:  MOVFF  1BB,20A
11C9A:  MOVLB  0
11C9C:  CALL   113A6
11CA0:  MOVFF  02,03
11CA4:  MOVF   01,W
11CA6:  MOVWF  FE1
11CA8:  MOVFF  03,FE2
11CAC:  MOVLW  01
11CAE:  MOVWF  FEA
11CB0:  MOVLW  A3
11CB2:  MOVWF  FE9
11CB4:  MOVLW  08
11CB6:  MOVWF  01
11CB8:  MOVFF  FE6,FEE
11CBC:  DECFSZ 01,F
11CBE:  GOTO   11CB8
11CC2:  MOVLW  04
11CC4:  MOVLB  1
11CC6:  ADDWF  xA1,W
11CC8:  MOVWF  FE9
11CCA:  MOVLW  00
11CCC:  ADDWFC xA2,W
11CCE:  MOVWF  FEA
11CD0:  MOVFF  FEF,1AB
11CD4:  MOVFF  FEC,1AC
11CD8:  MOVFF  FEC,1AD
11CDC:  MOVFF  FEC,1AE
11CE0:  MOVF   FED,F
11CE2:  MOVF   FED,F
11CE4:  MOVF   FED,F
11CE6:  MOVLW  08
11CE8:  ADDWF  xA1,W
11CEA:  MOVWF  FE9
11CEC:  MOVLW  00
11CEE:  ADDWFC xA2,W
11CF0:  MOVWF  FEA
11CF2:  MOVFF  FEF,1AF
11CF6:  MOVFF  FEC,1B0
11CFA:  MOVFF  FEC,1B1
11CFE:  MOVFF  FEC,1B2
11D02:  MOVF   FED,F
11D04:  MOVF   FED,F
11D06:  MOVF   FED,F
....................     fprintf(PC, "[SMF] Erase address   : %LX\r\n", erase_address);
11D08:  MOVLW  1C
11D0A:  MOVWF  FF6
11D0C:  MOVLW  0D
11D0E:  MOVWF  FF7
11D10:  MOVLW  00
11D12:  MOVWF  FF8
11D14:  MOVLW  18
11D16:  MOVLB  9
11D18:  MOVWF  xC2
11D1A:  MOVLB  0
11D1C:  CALL   2312
11D20:  MOVFF  1AE,9E8
11D24:  MOVLW  37
11D26:  MOVLB  9
11D28:  MOVWF  xE9
11D2A:  MOVLB  0
11D2C:  CALL   2542
11D30:  MOVFF  1AD,9E8
11D34:  MOVLW  37
11D36:  MOVLB  9
11D38:  MOVWF  xE9
11D3A:  MOVLB  0
11D3C:  CALL   2542
11D40:  MOVFF  1AC,9E8
11D44:  MOVLW  37
11D46:  MOVLB  9
11D48:  MOVWF  xE9
11D4A:  MOVLB  0
11D4C:  CALL   2542
11D50:  MOVFF  1AB,9E8
11D54:  MOVLW  37
11D56:  MOVLB  9
11D58:  MOVWF  xE9
11D5A:  MOVLB  0
11D5C:  CALL   2542
11D60:  MOVLW  0D
11D62:  BTFSS  FA6.6
11D64:  GOTO   11D62
11D68:  MOVLB  E
11D6A:  MOVWF  xF9
11D6C:  MOVLW  0A
11D6E:  MOVLB  0
11D70:  BTFSS  FA6.6
11D72:  GOTO   11D70
11D76:  MOVLB  E
11D78:  MOVWF  xF9
....................     fprintf(PC, "[SMF] Erase data size : %lu (0x%lx)\r\n\r\n", erase_size, erase_size);
11D7A:  MOVLW  3A
11D7C:  MOVWF  FF6
11D7E:  MOVLW  0D
11D80:  MOVWF  FF7
11D82:  MOVLW  00
11D84:  MOVWF  FF8
11D86:  MOVLW  18
11D88:  MOVLB  9
11D8A:  MOVWF  xC2
11D8C:  MOVLB  0
11D8E:  CALL   2312
11D92:  MOVLW  41
11D94:  MOVWF  FE9
11D96:  MOVFF  1B2,209
11D9A:  MOVFF  1B1,208
11D9E:  MOVFF  1B0,207
11DA2:  MOVFF  1AF,206
11DA6:  CALL   62D2
11DAA:  MOVLW  55
11DAC:  MOVWF  FF6
11DAE:  MOVLW  0D
11DB0:  MOVWF  FF7
11DB2:  MOVLW  00
11DB4:  MOVWF  FF8
11DB6:  MOVLW  04
11DB8:  MOVLB  9
11DBA:  MOVWF  xC2
11DBC:  MOVLB  0
11DBE:  CALL   2312
11DC2:  MOVFF  1B2,9E8
11DC6:  MOVLW  57
11DC8:  MOVLB  9
11DCA:  MOVWF  xE9
11DCC:  MOVLB  0
11DCE:  CALL   2542
11DD2:  MOVFF  1B1,9E8
11DD6:  MOVLW  57
11DD8:  MOVLB  9
11DDA:  MOVWF  xE9
11DDC:  MOVLB  0
11DDE:  CALL   2542
11DE2:  MOVFF  1B0,9E8
11DE6:  MOVLW  57
11DE8:  MOVLB  9
11DEA:  MOVWF  xE9
11DEC:  MOVLB  0
11DEE:  CALL   2542
11DF2:  MOVFF  1AF,9E8
11DF6:  MOVLW  57
11DF8:  MOVLB  9
11DFA:  MOVWF  xE9
11DFC:  MOVLB  0
11DFE:  CALL   2542
11E02:  MOVLW  5C
11E04:  MOVWF  FF6
11E06:  MOVLW  0D
11E08:  MOVWF  FF7
11E0A:  MOVLW  00
11E0C:  MOVWF  FF8
11E0E:  MOVLW  05
11E10:  MOVLB  9
11E12:  MOVWF  xC2
11E14:  MOVLB  0
11E16:  CALL   2312
.................... 
....................     if (!is_connect(smf)){
11E1A:  MOVFF  119,253
11E1E:  MOVFF  118,252
11E22:  MOVFF  117,251
11E26:  MOVFF  116,250
11E2A:  CALL   2E02
11E2E:  MOVF   01,F
11E30:  BTFSS  FD8.2
11E32:  GOTO   11E4A
....................         fprintf(PC, "Error: SMF is not connected\r\n");
11E36:  MOVLW  62
11E38:  MOVWF  FF6
11E3A:  MOVLW  0D
11E3C:  MOVWF  FF7
11E3E:  MOVLW  00
11E40:  MOVWF  FF8
11E42:  CALL   22DC
....................         return;
11E46:  GOTO   122E6
....................     }
.................... 
....................     // Check if erase operation is within mission_type range
....................     if (erase_address < mission_type.start_address || erase_address >= mission_type.end_address) {
11E4A:  MOVLB  1
11E4C:  MOVF   xAE,W
11E4E:  SUBWF  xA6,W
11E50:  BTFSC  FD8.0
11E52:  BRA    11E5A
11E54:  MOVLB  0
11E56:  GOTO   11EA4
11E5A:  MOVLB  0
11E5C:  BTFSS  FD8.2
11E5E:  GOTO   11EFE
11E62:  MOVLB  1
11E64:  MOVF   xAD,W
11E66:  SUBWF  xA5,W
11E68:  BTFSC  FD8.0
11E6A:  BRA    11E72
11E6C:  MOVLB  0
11E6E:  GOTO   11EA4
11E72:  MOVLB  0
11E74:  BTFSS  FD8.2
11E76:  GOTO   11EFE
11E7A:  MOVLB  1
11E7C:  MOVF   xAC,W
11E7E:  SUBWF  xA4,W
11E80:  BTFSC  FD8.0
11E82:  BRA    11E8A
11E84:  MOVLB  0
11E86:  GOTO   11EA4
11E8A:  MOVLB  0
11E8C:  BTFSS  FD8.2
11E8E:  GOTO   11EFE
11E92:  MOVLB  1
11E94:  MOVF   xA3,W
11E96:  SUBWF  xAB,W
11E98:  BTFSC  FD8.0
11E9A:  BRA    11EA2
11E9C:  MOVLB  0
11E9E:  GOTO   11EFE
11EA2:  MOVLB  0
11EA4:  MOVLB  1
11EA6:  MOVF   xAA,W
11EA8:  SUBWF  xAE,W
11EAA:  BTFSC  FD8.0
11EAC:  BRA    11EB4
11EAE:  MOVLB  0
11EB0:  GOTO   12022
11EB4:  MOVLB  0
11EB6:  BTFSS  FD8.2
11EB8:  GOTO   11EFE
11EBC:  MOVLB  1
11EBE:  MOVF   xA9,W
11EC0:  SUBWF  xAD,W
11EC2:  BTFSC  FD8.0
11EC4:  BRA    11ECC
11EC6:  MOVLB  0
11EC8:  GOTO   12022
11ECC:  MOVLB  0
11ECE:  BTFSS  FD8.2
11ED0:  GOTO   11EFE
11ED4:  MOVLB  1
11ED6:  MOVF   xA8,W
11ED8:  SUBWF  xAC,W
11EDA:  BTFSC  FD8.0
11EDC:  BRA    11EE4
11EDE:  MOVLB  0
11EE0:  GOTO   12022
11EE4:  MOVLB  0
11EE6:  BTFSS  FD8.2
11EE8:  GOTO   11EFE
11EEC:  MOVLB  1
11EEE:  MOVF   xA7,W
11EF0:  SUBWF  xAB,W
11EF2:  BTFSC  FD8.0
11EF4:  BRA    11EFC
11EF6:  MOVLB  0
11EF8:  GOTO   12022
11EFC:  MOVLB  0
....................         fprintf(PC, "Error: Erase source address 0x%LX is outside mission range [0x%LX - 0x%LX]\r\n", 
....................                 erase_address, mission_type.start_address, mission_type.end_address);
11EFE:  MOVLW  80
11F00:  MOVWF  FF6
11F02:  MOVLW  0D
11F04:  MOVWF  FF7
11F06:  MOVLW  00
11F08:  MOVWF  FF8
11F0A:  MOVLW  1E
11F0C:  MOVLB  9
11F0E:  MOVWF  xC2
11F10:  MOVLB  0
11F12:  CALL   2312
11F16:  MOVFF  1AE,9E8
11F1A:  MOVLW  37
11F1C:  MOVLB  9
11F1E:  MOVWF  xE9
11F20:  MOVLB  0
11F22:  CALL   2542
11F26:  MOVFF  1AD,9E8
11F2A:  MOVLW  37
11F2C:  MOVLB  9
11F2E:  MOVWF  xE9
11F30:  MOVLB  0
11F32:  CALL   2542
11F36:  MOVFF  1AC,9E8
11F3A:  MOVLW  37
11F3C:  MOVLB  9
11F3E:  MOVWF  xE9
11F40:  MOVLB  0
11F42:  CALL   2542
11F46:  MOVFF  1AB,9E8
11F4A:  MOVLW  37
11F4C:  MOVLB  9
11F4E:  MOVWF  xE9
11F50:  MOVLB  0
11F52:  CALL   2542
11F56:  MOVLW  A1
11F58:  MOVWF  FF6
11F5A:  MOVLW  0D
11F5C:  MOVWF  FF7
11F5E:  MOVLW  00
11F60:  MOVWF  FF8
11F62:  MOVLW  1D
11F64:  MOVLB  9
11F66:  MOVWF  xC2
11F68:  MOVLB  0
11F6A:  CALL   2312
11F6E:  MOVFF  1A6,9E8
11F72:  MOVLW  37
11F74:  MOVLB  9
11F76:  MOVWF  xE9
11F78:  MOVLB  0
11F7A:  CALL   2542
11F7E:  MOVFF  1A5,9E8
11F82:  MOVLW  37
11F84:  MOVLB  9
11F86:  MOVWF  xE9
11F88:  MOVLB  0
11F8A:  CALL   2542
11F8E:  MOVFF  1A4,9E8
11F92:  MOVLW  37
11F94:  MOVLB  9
11F96:  MOVWF  xE9
11F98:  MOVLB  0
11F9A:  CALL   2542
11F9E:  MOVFF  1A3,9E8
11FA2:  MOVLW  37
11FA4:  MOVLB  9
11FA6:  MOVWF  xE9
11FA8:  MOVLB  0
11FAA:  CALL   2542
11FAE:  MOVLW  C1
11FB0:  MOVWF  FF6
11FB2:  MOVLW  0D
11FB4:  MOVWF  FF7
11FB6:  MOVLW  00
11FB8:  MOVWF  FF8
11FBA:  MOVLW  05
11FBC:  MOVLB  9
11FBE:  MOVWF  xC2
11FC0:  MOVLB  0
11FC2:  CALL   2312
11FC6:  MOVFF  1AA,9E8
11FCA:  MOVLW  37
11FCC:  MOVLB  9
11FCE:  MOVWF  xE9
11FD0:  MOVLB  0
11FD2:  CALL   2542
11FD6:  MOVFF  1A9,9E8
11FDA:  MOVLW  37
11FDC:  MOVLB  9
11FDE:  MOVWF  xE9
11FE0:  MOVLB  0
11FE2:  CALL   2542
11FE6:  MOVFF  1A8,9E8
11FEA:  MOVLW  37
11FEC:  MOVLB  9
11FEE:  MOVWF  xE9
11FF0:  MOVLB  0
11FF2:  CALL   2542
11FF6:  MOVFF  1A7,9E8
11FFA:  MOVLW  37
11FFC:  MOVLB  9
11FFE:  MOVWF  xE9
12000:  MOVLB  0
12002:  CALL   2542
12006:  MOVLW  C9
12008:  MOVWF  FF6
1200A:  MOVLW  0D
1200C:  MOVWF  FF7
1200E:  MOVLW  00
12010:  MOVWF  FF8
12012:  MOVLW  03
12014:  MOVLB  9
12016:  MOVWF  xC2
12018:  MOVLB  0
1201A:  CALL   2312
....................         return;
1201E:  GOTO   122E6
....................     }
.................... 
....................     if ((erase_address + erase_size) > mission_type.end_address) {
12022:  MOVLB  1
12024:  MOVF   xAF,W
12026:  ADDWF  xAB,W
12028:  MOVWF  xBB
1202A:  MOVF   xB0,W
1202C:  ADDWFC xAC,W
1202E:  MOVWF  xBC
12030:  MOVF   xB1,W
12032:  ADDWFC xAD,W
12034:  MOVWF  xBD
12036:  MOVF   xB2,W
12038:  ADDWFC xAE,W
1203A:  MOVWF  xBE
1203C:  MOVF   xAA,W
1203E:  SUBWF  xBE,W
12040:  BTFSC  FD8.0
12042:  BRA    1204A
12044:  MOVLB  0
12046:  GOTO   12134
1204A:  MOVLB  0
1204C:  BTFSS  FD8.2
1204E:  GOTO   12094
12052:  MOVLB  1
12054:  MOVF   xA9,W
12056:  SUBWF  xBD,W
12058:  BTFSC  FD8.0
1205A:  BRA    12062
1205C:  MOVLB  0
1205E:  GOTO   12134
12062:  MOVLB  0
12064:  BTFSS  FD8.2
12066:  GOTO   12094
1206A:  MOVLB  1
1206C:  MOVF   xA8,W
1206E:  SUBWF  xBC,W
12070:  BTFSC  FD8.0
12072:  BRA    1207A
12074:  MOVLB  0
12076:  GOTO   12134
1207A:  MOVLB  0
1207C:  BTFSS  FD8.2
1207E:  GOTO   12094
12082:  MOVLB  1
12084:  MOVF   xBB,W
12086:  SUBWF  xA7,W
12088:  BTFSS  FD8.0
1208A:  BRA    12092
1208C:  MOVLB  0
1208E:  GOTO   12134
12092:  MOVLB  0
....................         fprintf(PC, "Error: Erase operation would exceed mission end address 0x%LX\r\n", mission_type.end_address);
12094:  MOVLW  CE
12096:  MOVWF  FF6
12098:  MOVLW  0D
1209A:  MOVWF  FF7
1209C:  MOVLW  00
1209E:  MOVWF  FF8
120A0:  MOVLW  3A
120A2:  MOVLB  9
120A4:  MOVWF  xC2
120A6:  MOVLB  0
120A8:  CALL   2312
120AC:  MOVFF  1AA,9E8
120B0:  MOVLW  37
120B2:  MOVLB  9
120B4:  MOVWF  xE9
120B6:  MOVLB  0
120B8:  CALL   2542
120BC:  MOVFF  1A9,9E8
120C0:  MOVLW  37
120C2:  MOVLB  9
120C4:  MOVWF  xE9
120C6:  MOVLB  0
120C8:  CALL   2542
120CC:  MOVFF  1A8,9E8
120D0:  MOVLW  37
120D2:  MOVLB  9
120D4:  MOVWF  xE9
120D6:  MOVLB  0
120D8:  CALL   2542
120DC:  MOVFF  1A7,9E8
120E0:  MOVLW  37
120E2:  MOVLB  9
120E4:  MOVWF  xE9
120E6:  MOVLB  0
120E8:  CALL   2542
120EC:  MOVLW  0D
120EE:  BTFSS  FA6.6
120F0:  GOTO   120EE
120F4:  MOVLB  E
120F6:  MOVWF  xF9
120F8:  MOVLW  0A
120FA:  MOVLB  0
120FC:  BTFSS  FA6.6
120FE:  GOTO   120FC
12102:  MOVLB  E
12104:  MOVWF  xF9
....................         fprintf(PC, "Limiting erase size to stay within mission bounds\r\n");
12106:  MOVLW  0E
12108:  MOVWF  FF6
1210A:  MOVLW  0E
1210C:  MOVWF  FF7
1210E:  MOVLW  00
12110:  MOVWF  FF8
12112:  MOVLB  0
12114:  CALL   22DC
....................         erase_size = mission_type.end_address - erase_address;
12118:  MOVLB  1
1211A:  MOVF   xAB,W
1211C:  SUBWF  xA7,W
1211E:  MOVWF  xAF
12120:  MOVF   xAC,W
12122:  SUBWFB xA8,W
12124:  MOVWF  xB0
12126:  MOVF   xAD,W
12128:  SUBWFB xA9,W
1212A:  MOVWF  xB1
1212C:  MOVF   xAE,W
1212E:  SUBWFB xAA,W
12130:  MOVWF  xB2
12132:  MOVLB  0
....................     }
.................... 
....................     fprintf(PC, "Erase operation validated within mission range\r\n");
12134:  MOVLW  42
12136:  MOVWF  FF6
12138:  MOVLW  0E
1213A:  MOVWF  FF7
1213C:  MOVLW  00
1213E:  MOVWF  FF8
12140:  CALL   22DC
....................     unsigned int32 erase_end = erase_address + erase_size;
....................     // 4KB境界開始へアライン
....................     unsigned int32 current = erase_address & ~0xFFF;
12144:  MOVLB  1
12146:  MOVF   xAF,W
12148:  ADDWF  xAB,W
1214A:  MOVWF  xB3
1214C:  MOVF   xB0,W
1214E:  ADDWFC xAC,W
12150:  MOVWF  xB4
12152:  MOVF   xB1,W
12154:  ADDWFC xAD,W
12156:  MOVWF  xB5
12158:  MOVF   xB2,W
1215A:  ADDWFC xAE,W
1215C:  MOVWF  xB6
1215E:  CLRF   xB7
12160:  MOVF   xAC,W
12162:  ANDLW  F0
12164:  MOVWF  xB8
12166:  CLRF   xB9
12168:  CLRF   xBA
1216A:  MOVLB  0
....................     while (current < erase_end && current < (unsigned int32)mission_type.end_address) {
1216C:  MOVLB  1
1216E:  MOVF   xBA,W
12170:  SUBWF  xB6,W
12172:  BTFSC  FD8.0
12174:  BRA    1217C
12176:  MOVLB  0
12178:  GOTO   12258
1217C:  MOVLB  0
1217E:  BTFSS  FD8.2
12180:  GOTO   121C6
12184:  MOVLB  1
12186:  MOVF   xB9,W
12188:  SUBWF  xB5,W
1218A:  BTFSC  FD8.0
1218C:  BRA    12194
1218E:  MOVLB  0
12190:  GOTO   12258
12194:  MOVLB  0
12196:  BTFSS  FD8.2
12198:  GOTO   121C6
1219C:  MOVLB  1
1219E:  MOVF   xB8,W
121A0:  SUBWF  xB4,W
121A2:  BTFSC  FD8.0
121A4:  BRA    121AC
121A6:  MOVLB  0
121A8:  GOTO   12258
121AC:  MOVLB  0
121AE:  BTFSS  FD8.2
121B0:  GOTO   121C6
121B4:  MOVLB  1
121B6:  MOVF   xB3,W
121B8:  SUBWF  xB7,W
121BA:  BTFSS  FD8.0
121BC:  BRA    121C4
121BE:  MOVLB  0
121C0:  GOTO   12258
121C4:  MOVLB  0
121C6:  MOVLB  1
121C8:  MOVF   xBA,W
121CA:  SUBWF  xAA,W
121CC:  BTFSC  FD8.0
121CE:  BRA    121D6
121D0:  MOVLB  0
121D2:  GOTO   12258
121D6:  MOVLB  0
121D8:  BTFSS  FD8.2
121DA:  GOTO   12220
121DE:  MOVLB  1
121E0:  MOVF   xB9,W
121E2:  SUBWF  xA9,W
121E4:  BTFSC  FD8.0
121E6:  BRA    121EE
121E8:  MOVLB  0
121EA:  GOTO   12258
121EE:  MOVLB  0
121F0:  BTFSS  FD8.2
121F2:  GOTO   12220
121F6:  MOVLB  1
121F8:  MOVF   xB8,W
121FA:  SUBWF  xA8,W
121FC:  BTFSC  FD8.0
121FE:  BRA    12206
12200:  MOVLB  0
12202:  GOTO   12258
12206:  MOVLB  0
12208:  BTFSS  FD8.2
1220A:  GOTO   12220
1220E:  MOVLB  1
12210:  MOVF   xA7,W
12212:  SUBWF  xB7,W
12214:  BTFSS  FD8.0
12216:  BRA    1221E
12218:  MOVLB  0
1221A:  GOTO   12258
1221E:  MOVLB  0
....................         subsector_4kByte_erase(smf, current);
12220:  MOVFF  119,A07
12224:  MOVFF  118,A06
12228:  MOVFF  117,A05
1222C:  MOVFF  116,A04
12230:  MOVFF  1BA,A0B
12234:  MOVFF  1B9,A0A
12238:  MOVFF  1B8,A09
1223C:  MOVFF  1B7,A08
12240:  CALL   4D3A
....................         current += SUBSECTOR_SIZE;
12244:  MOVLW  10
12246:  MOVLB  1
12248:  ADDWF  xB8,F
1224A:  MOVLW  00
1224C:  ADDWFC xB9,F
1224E:  MOVLW  00
12250:  ADDWFC xBA,F
12252:  MOVLB  0
12254:  GOTO   1216C
....................     }
....................     fprintf(PC, "Erased %lu bytes (aligned)\r\n", (current - (erase_address & ~0xFFF)));
12258:  CLRF   00
1225A:  MOVLB  1
1225C:  MOVF   xAC,W
1225E:  ANDLW  F0
12260:  MOVWF  01
12262:  CLRF   02
12264:  CLRF   03
12266:  MOVF   00,W
12268:  SUBWF  xB7,W
1226A:  MOVWF  xBB
1226C:  MOVF   01,W
1226E:  SUBWFB xB8,W
12270:  MOVWF  xBC
12272:  MOVF   02,W
12274:  SUBWFB xB9,W
12276:  MOVWF  xBD
12278:  MOVF   03,W
1227A:  SUBWFB xBA,W
1227C:  MOVWF  xBE
1227E:  MOVLW  74
12280:  MOVWF  FF6
12282:  MOVLW  0E
12284:  MOVWF  FF7
12286:  MOVLW  00
12288:  MOVWF  FF8
1228A:  MOVLW  07
1228C:  MOVLB  9
1228E:  MOVWF  xC2
12290:  MOVLB  0
12292:  CALL   2312
12296:  MOVLW  41
12298:  MOVWF  FE9
1229A:  MOVFF  1BE,209
1229E:  MOVFF  1BD,208
122A2:  MOVFF  1BC,207
122A6:  MOVFF  1BB,206
122AA:  CALL   62D2
122AE:  MOVLW  7E
122B0:  MOVWF  FF6
122B2:  MOVLW  0E
122B4:  MOVWF  FF7
122B6:  MOVLW  00
122B8:  MOVWF  FF8
122BA:  MOVLW  12
122BC:  MOVLB  9
122BE:  MOVWF  xC2
122C0:  MOVLB  0
122C2:  CALL   2312
.................... 
....................     fprintf(PC, "\r\n___End smf_erase____\r\n");
122C6:  MOVLW  92
122C8:  MOVWF  FF6
122CA:  MOVLW  0E
122CC:  MOVWF  FF7
122CE:  MOVLW  00
122D0:  MOVWF  FF8
122D2:  CALL   22DC
....................     fprintf(PC, "____________________\r\n\r\n");
122D6:  MOVLW  AC
122D8:  MOVWF  FF6
122DA:  MOVLW  0E
122DC:  MOVWF  FF7
122DE:  MOVLW  00
122E0:  MOVWF  FF8
122E2:  CALL   22DC
122E6:  GOTO   124FC (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... // End of file
.................... 
.................... #include "domain/cigs_flash.c"
.................... #include "cigs_flash.h"                           
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/cigs_config.h"             
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mt25q.h"                
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/tool/calc_tools.h"             
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/smf_queue.h"              
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... 
.................... const ADDRESS_AREA_T MISF_ADDRESS_TABLE[FLASH_ID_COUNT] = {
....................     { MISF_CIGS_DATA_TABLE_START,   MISF_CIGS_DATA_TABLE_END,   MISF_CIGS_DATA_TABLE_SIZE },
....................     { MISF_CIGS_PICLOG_START,       MISF_CIGS_PICLOG_END,       MISF_CIGS_PICLOG_SIZE },
....................     { MISF_CIGS_ENVIRO_START,       MISF_CIGS_ENVIRO_END,       MISF_CIGS_ENVIRO_SIZE },
....................     { MISF_CIGS_IV1_HEADER_START,   MISF_CIGS_IV1_HEADER_END,   MISF_CIGS_IV1_HEADER_SIZE },
....................     { MISF_CIGS_IV1_DATA_START,     MISF_CIGS_IV1_DATA_END,     MISF_CIGS_IV1_DATA_SIZE },
....................     { MISF_CIGS_IV2_HEADER_START,   MISF_CIGS_IV2_HEADER_END,   MISF_CIGS_IV2_HEADER_SIZE },
....................     { MISF_CIGS_IV2_DATA_START,     MISF_CIGS_IV2_DATA_END,     MISF_CIGS_IV2_DATA_SIZE }
.................... };
.................... 
.................... FlashCounter_t misf_counter_table[FLASH_ID_COUNT];
.................... FlashCounter_t *misf_counter_table_ptr[FLASH_ID_COUNT] = {&misf_counter_table[0], &misf_counter_table[1], &misf_counter_table[2], &misf_counter_table[3], &misf_counter_table[4], &misf_counter_table[5], &misf_counter_table[6]};
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
03960:  MOVLW  C6
03962:  MOVWF  FF6
03964:  MOVLW  0E
03966:  MOVWF  FF7
03968:  MOVLW  00
0396A:  MOVWF  FF8
0396C:  CALL   22DC
....................     output_high(MIS_FM_CS);
03970:  MOVLW  FE
03972:  MOVWF  F98
03974:  BSF    F8F.0
....................     output_high(SMF_CS);
03976:  MOVLW  FB
03978:  MOVWF  F92
0397A:  BSF    F89.2
.................... 
....................     // 接続処理
....................     if (is_connect(mis_fm)) {
0397C:  MOVFF  115,253
03980:  MOVFF  114,252
03984:  MOVFF  113,251
03988:  MOVFF  112,250
0398C:  CALL   2E02
03990:  MOVF   01,F
03992:  BTFSC  FD8.2
03994:  GOTO   39AC
....................         fprintf(PC, "\t[MIS FM] Connected\r\n");
03998:  MOVLW  E2
0399A:  MOVWF  FF6
0399C:  MOVLW  0E
0399E:  MOVWF  FF7
039A0:  MOVLW  00
039A2:  MOVWF  FF8
039A4:  CALL   22DC
....................     } else {
039A8:  GOTO   39BC
....................         fprintf(PC, "\t[MIS FM] Not Connected\r\n");
039AC:  MOVLW  F8
039AE:  MOVWF  FF6
039B0:  MOVLW  0E
039B2:  MOVWF  FF7
039B4:  MOVLW  00
039B6:  MOVWF  FF8
039B8:  CALL   22DC
....................     }
....................     if (is_connect(smf)) {
039BC:  MOVFF  119,253
039C0:  MOVFF  118,252
039C4:  MOVFF  117,251
039C8:  MOVFF  116,250
039CC:  CALL   2E02
039D0:  MOVF   01,F
039D2:  BTFSC  FD8.2
039D4:  GOTO   39EC
....................         fprintf(PC, "\t[SMF] Connected\r\n");
039D8:  MOVLW  12
039DA:  MOVWF  FF6
039DC:  MOVLW  0F
039DE:  MOVWF  FF7
039E0:  MOVLW  00
039E2:  MOVWF  FF8
039E4:  CALL   22DC
....................     } else {
039E8:  GOTO   39FC
....................         fprintf(PC, "\t[SMF] Not Connected\r\n");
039EC:  MOVLW  26
039EE:  MOVWF  FF6
039F0:  MOVLW  0F
039F2:  MOVWF  FF7
039F4:  MOVLW  00
039F6:  MOVWF  FF8
039F8:  CALL   22DC
....................     }
.................... 
....................     //=== MIS_FM カウンタテーブル読出し ===//
....................     FlashData_t read_header;
....................     FlashData_t *read_header_ptr = &read_header;
039FC:  MOVLW  02
039FE:  MOVLB  2
03A00:  MOVWF  x4F
03A02:  MOVLW  0E
03A04:  MOVWF  x4E
....................     memset(read_header_ptr, 0x00, sizeof(FlashData_t));
03A06:  MOVFF  24F,FEA
03A0A:  MOVFF  24E,FE9
03A0E:  CLRF   00
03A10:  CLRF   02
03A12:  MOVLW  40
03A14:  MOVWF  01
03A16:  MOVLB  0
03A18:  CALL   234C
....................     fprintf(PC, "\t[MIS FM] %08LX\r\n", MISF_ADDRESS_TABLE[FLASH_ID_DATA_TABLE].start);
03A1C:  MOVLW  3E
03A1E:  MOVWF  FF6
03A20:  MOVLW  0F
03A22:  MOVWF  FF7
03A24:  MOVLW  00
03A26:  MOVWF  FF8
03A28:  MOVLW  0A
03A2A:  MOVLB  9
03A2C:  MOVWF  xC2
03A2E:  MOVLB  0
03A30:  CALL   2312
03A34:  MOVLB  9
03A36:  CLRF   xE8
03A38:  MOVLW  37
03A3A:  MOVWF  xE9
03A3C:  MOVLB  0
03A3E:  CALL   2542
03A42:  MOVLB  9
03A44:  CLRF   xE8
03A46:  MOVLW  37
03A48:  MOVWF  xE9
03A4A:  MOVLB  0
03A4C:  CALL   2542
03A50:  MOVLB  9
03A52:  CLRF   xE8
03A54:  MOVLW  37
03A56:  MOVWF  xE9
03A58:  MOVLB  0
03A5A:  CALL   2542
03A5E:  MOVLB  9
03A60:  CLRF   xE8
03A62:  MOVLW  37
03A64:  MOVWF  xE9
03A66:  MOVLB  0
03A68:  CALL   2542
03A6C:  MOVLW  0D
03A6E:  BTFSS  FA6.6
03A70:  GOTO   3A6E
03A74:  MOVLB  E
03A76:  MOVWF  xF9
03A78:  MOVLW  0A
03A7A:  MOVLB  0
03A7C:  BTFSS  FA6.6
03A7E:  GOTO   3A7C
03A82:  MOVLB  E
03A84:  MOVWF  xF9
....................     read_data_bytes(mis_fm, MISF_ADDRESS_TABLE[FLASH_ID_DATA_TABLE].start, read_header_ptr->bytes, PACKET_SIZE);
03A86:  MOVLB  2
03A88:  MOVF   x4E,W
03A8A:  MOVWF  01
03A8C:  MOVF   x4F,W
03A8E:  MOVWF  03
03A90:  MOVF   01,W
03A92:  MOVWF  x50
03A94:  MOVFF  03,251
03A98:  MOVFF  115,AED
03A9C:  MOVFF  114,AEC
03AA0:  MOVFF  113,AEB
03AA4:  MOVFF  112,AEA
03AA8:  MOVLB  A
03AAA:  CLRF   xF1
03AAC:  CLRF   xF0
03AAE:  CLRF   xEF
03AB0:  CLRF   xEE
03AB2:  MOVFF  251,AF3
03AB6:  MOVFF  250,AF2
03ABA:  CLRF   xF7
03ABC:  CLRF   xF6
03ABE:  CLRF   xF5
03AC0:  MOVLW  40
03AC2:  MOVWF  xF4
03AC4:  MOVLB  0
03AC6:  CALL   2ECA
.................... 
....................     // CRC 検証
....................     if (read_header_ptr->packet.crc != calc_crc8(read_header_ptr->bytes, PACKET_SIZE - 1)) {
03ACA:  MOVLW  3F
03ACC:  MOVLB  2
03ACE:  ADDWF  x4E,W
03AD0:  MOVWF  FE9
03AD2:  MOVLW  00
03AD4:  ADDWFC x4F,W
03AD6:  MOVWF  FEA
03AD8:  MOVFF  FEF,250
03ADC:  MOVF   x4E,W
03ADE:  MOVWF  01
03AE0:  MOVF   x4F,W
03AE2:  MOVWF  03
03AE4:  MOVF   01,W
03AE6:  MOVWF  x51
03AE8:  MOVFF  03,252
03AEC:  MOVFF  252,AEB
03AF0:  MOVFF  251,AEA
03AF4:  MOVLW  3F
03AF6:  MOVLB  A
03AF8:  MOVWF  xEC
03AFA:  MOVLB  0
03AFC:  CALL   30EA
03B00:  MOVF   01,W
03B02:  MOVLB  2
03B04:  SUBWF  x50,W
03B06:  BTFSS  FD8.2
03B08:  BRA    3B10
03B0A:  MOVLB  0
03B0C:  GOTO   3B22
03B10:  MOVLB  0
....................         fprintf(PC, "\t[MIS FM] CRC error -> initialize counters\r\n");
03B12:  MOVLW  50
03B14:  MOVWF  FF6
03B16:  MOVLW  0F
03B18:  MOVWF  FF7
03B1A:  MOVLW  00
03B1C:  MOVWF  FF8
03B1E:  CALL   22DC
....................         
....................     }
....................     misf_counter_table[FLASH_ID_PICLOG]       = read_header_ptr->packet.payload.logdata.piclog;
03B22:  MOVLB  2
03B24:  MOVF   x4E,W
03B26:  MOVWF  FE1
03B28:  MOVF   x4F,W
03B2A:  MOVWF  FE2
03B2C:  MOVLW  01
03B2E:  MOVWF  FEA
03B30:  MOVLW  2C
03B32:  MOVWF  FE9
03B34:  MOVLW  0A
03B36:  MOVWF  01
03B38:  MOVLB  0
03B3A:  MOVFF  FE6,FEE
03B3E:  DECFSZ 01,F
03B40:  GOTO   3B3A
....................     misf_counter_table[FLASH_ID_ENVIRONMENT]  = read_header_ptr->packet.payload.logdata.environment;
03B44:  MOVLW  0A
03B46:  MOVLB  2
03B48:  ADDWF  x4E,W
03B4A:  MOVWF  FE1
03B4C:  MOVLW  00
03B4E:  ADDWFC x4F,W
03B50:  MOVWF  FE2
03B52:  MOVLW  01
03B54:  MOVWF  FEA
03B56:  MOVLW  36
03B58:  MOVWF  FE9
03B5A:  MOVLW  0A
03B5C:  MOVWF  01
03B5E:  MOVLB  0
03B60:  MOVFF  FE6,FEE
03B64:  DECFSZ 01,F
03B66:  GOTO   3B60
....................     misf_counter_table[FLASH_ID_IV1_HEADER]   = read_header_ptr->packet.payload.logdata.iv1_header;
03B6A:  MOVLW  14
03B6C:  MOVLB  2
03B6E:  ADDWF  x4E,W
03B70:  MOVWF  FE1
03B72:  MOVLW  00
03B74:  ADDWFC x4F,W
03B76:  MOVWF  FE2
03B78:  MOVLW  01
03B7A:  MOVWF  FEA
03B7C:  MOVLW  40
03B7E:  MOVWF  FE9
03B80:  MOVLW  0A
03B82:  MOVWF  01
03B84:  MOVLB  0
03B86:  MOVFF  FE6,FEE
03B8A:  DECFSZ 01,F
03B8C:  GOTO   3B86
....................     misf_counter_table[FLASH_ID_IV1_DATA]     = read_header_ptr->packet.payload.logdata.iv1_data;
03B90:  MOVLW  1E
03B92:  MOVLB  2
03B94:  ADDWF  x4E,W
03B96:  MOVWF  FE1
03B98:  MOVLW  00
03B9A:  ADDWFC x4F,W
03B9C:  MOVWF  FE2
03B9E:  MOVLW  01
03BA0:  MOVWF  FEA
03BA2:  MOVLW  4A
03BA4:  MOVWF  FE9
03BA6:  MOVLW  0A
03BA8:  MOVWF  01
03BAA:  MOVLB  0
03BAC:  MOVFF  FE6,FEE
03BB0:  DECFSZ 01,F
03BB2:  GOTO   3BAC
....................     misf_counter_table[FLASH_ID_IV2_HEADER]   = read_header_ptr->packet.payload.logdata.iv2_header;
03BB6:  MOVLW  28
03BB8:  MOVLB  2
03BBA:  ADDWF  x4E,W
03BBC:  MOVWF  FE1
03BBE:  MOVLW  00
03BC0:  ADDWFC x4F,W
03BC2:  MOVWF  FE2
03BC4:  MOVLW  01
03BC6:  MOVWF  FEA
03BC8:  MOVLW  54
03BCA:  MOVWF  FE9
03BCC:  MOVLW  0A
03BCE:  MOVWF  01
03BD0:  MOVLB  0
03BD2:  MOVFF  FE6,FEE
03BD6:  DECFSZ 01,F
03BD8:  GOTO   3BD2
....................     misf_counter_table[FLASH_ID_IV2_DATA]     = read_header_ptr->packet.payload.logdata.iv2_data;
03BDC:  MOVLW  32
03BDE:  MOVLB  2
03BE0:  ADDWF  x4E,W
03BE2:  MOVWF  FE1
03BE4:  MOVLW  00
03BE6:  ADDWFC x4F,W
03BE8:  MOVWF  FE2
03BEA:  MOVLW  01
03BEC:  MOVWF  FEA
03BEE:  MOVLW  5E
03BF0:  MOVWF  FE9
03BF2:  MOVLW  0A
03BF4:  MOVWF  01
03BF6:  MOVLB  0
03BF8:  MOVFF  FE6,FEE
03BFC:  DECFSZ 01,F
03BFE:  GOTO   3BF8
.................... 
....................     print_misf_address_table();
03C02:  GOTO   3156
.................... 
....................     fprintf(PC, "\tComplete\r\n");
03C06:  MOVLW  7E
03C08:  MOVWF  FF6
03C0A:  MOVLW  0F
03C0C:  MOVWF  FF7
03C0E:  MOVLW  00
03C10:  MOVWF  FF8
03C12:  CALL   22DC
03C16:  RETURN 0
.................... }
.................... 
.................... void print_misf_address_table()
.................... {
....................     fprintf(PC, "\tField\t\tCounterName\tValue\r\n");
*
03156:  MOVLW  8A
03158:  MOVWF  FF6
0315A:  MOVLW  0F
0315C:  MOVWF  FF7
0315E:  MOVLW  00
03160:  MOVWF  FF8
03162:  CALL   22DC
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
03166:  MOVLW  A6
03168:  MOVWF  FF6
0316A:  MOVLW  0F
0316C:  MOVWF  FF7
0316E:  MOVLW  00
03170:  MOVWF  FF8
03172:  CALL   22DC
....................     fprintf(PC, "\tPICLOG\t\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_PICLOG].used_counter);
03176:  MOVLW  D2
03178:  MOVWF  FF6
0317A:  MOVLW  0F
0317C:  MOVWF  FF7
0317E:  MOVLW  00
03180:  MOVWF  FF8
03182:  MOVLW  11
03184:  MOVLB  9
03186:  MOVWF  xC2
03188:  MOVLB  0
0318A:  CALL   2312
0318E:  MOVFF  12F,9E8
03192:  MOVLW  37
03194:  MOVLB  9
03196:  MOVWF  xE9
03198:  MOVLB  0
0319A:  CALL   2542
0319E:  MOVFF  12E,9E8
031A2:  MOVLW  37
031A4:  MOVLB  9
031A6:  MOVWF  xE9
031A8:  MOVLB  0
031AA:  CALL   2542
031AE:  MOVFF  12D,9E8
031B2:  MOVLW  37
031B4:  MOVLB  9
031B6:  MOVWF  xE9
031B8:  MOVLB  0
031BA:  CALL   2542
031BE:  MOVFF  12C,9E8
031C2:  MOVLW  37
031C4:  MOVLB  9
031C6:  MOVWF  xE9
031C8:  MOVLB  0
031CA:  CALL   2542
031CE:  MOVLW  0D
031D0:  BTFSS  FA6.6
031D2:  GOTO   31D0
031D6:  MOVLB  E
031D8:  MOVWF  xF9
031DA:  MOVLW  0A
031DC:  MOVLB  0
031DE:  BTFSS  FA6.6
031E0:  GOTO   31DE
031E4:  MOVLB  E
031E6:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_PICLOG].uncopied_counter);
031E8:  MOVLW  EC
031EA:  MOVWF  FF6
031EC:  MOVLW  0F
031EE:  MOVWF  FF7
031F0:  MOVLW  00
031F2:  MOVWF  FF8
031F4:  MOVLW  0E
031F6:  MOVLB  9
031F8:  MOVWF  xC2
031FA:  MOVLB  0
031FC:  CALL   2312
03200:  MOVFF  133,9E8
03204:  MOVLW  37
03206:  MOVLB  9
03208:  MOVWF  xE9
0320A:  MOVLB  0
0320C:  CALL   2542
03210:  MOVFF  132,9E8
03214:  MOVLW  37
03216:  MOVLB  9
03218:  MOVWF  xE9
0321A:  MOVLB  0
0321C:  CALL   2542
03220:  MOVFF  131,9E8
03224:  MOVLW  37
03226:  MOVLB  9
03228:  MOVWF  xE9
0322A:  MOVLB  0
0322C:  CALL   2542
03230:  MOVFF  130,9E8
03234:  MOVLW  37
03236:  MOVLB  9
03238:  MOVWF  xE9
0323A:  MOVLB  0
0323C:  CALL   2542
03240:  MOVLW  0D
03242:  BTFSS  FA6.6
03244:  GOTO   3242
03248:  MOVLB  E
0324A:  MOVWF  xF9
0324C:  MOVLW  0A
0324E:  MOVLB  0
03250:  BTFSS  FA6.6
03252:  GOTO   3250
03256:  MOVLB  E
03258:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_PICLOG].reserve_counter1,misf_counter_table[FLASH_ID_PICLOG].reserve_counter2);
0325A:  MOVLW  02
0325C:  MOVWF  FF6
0325E:  MOVLW  10
03260:  MOVWF  FF7
03262:  MOVLW  00
03264:  MOVWF  FF8
03266:  MOVLW  0E
03268:  MOVLB  9
0326A:  MOVWF  xC2
0326C:  MOVLB  0
0326E:  CALL   2312
03272:  MOVFF  134,9E8
03276:  MOVLW  37
03278:  MOVLB  9
0327A:  MOVWF  xE9
0327C:  MOVLB  0
0327E:  CALL   2542
03282:  MOVLW  14
03284:  MOVWF  FF6
03286:  MOVLW  10
03288:  MOVWF  FF7
0328A:  MOVLW  00
0328C:  MOVWF  FF8
0328E:  MOVLW  04
03290:  MOVLB  9
03292:  MOVWF  xC2
03294:  MOVLB  0
03296:  CALL   2312
0329A:  MOVFF  135,9E8
0329E:  MOVLW  37
032A0:  MOVLB  9
032A2:  MOVWF  xE9
032A4:  MOVLB  0
032A6:  CALL   2542
032AA:  MOVLW  0D
032AC:  BTFSS  FA6.6
032AE:  GOTO   32AC
032B2:  MOVLB  E
032B4:  MOVWF  xF9
032B6:  MOVLW  0A
032B8:  MOVLB  0
032BA:  BTFSS  FA6.6
032BC:  GOTO   32BA
032C0:  MOVLB  E
032C2:  MOVWF  xF9
....................     fprintf(PC, "\tENVIRO\t\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_ENVIRONMENT].used_counter);
032C4:  MOVLW  20
032C6:  MOVWF  FF6
032C8:  MOVLW  10
032CA:  MOVWF  FF7
032CC:  MOVLW  00
032CE:  MOVWF  FF8
032D0:  MOVLW  11
032D2:  MOVLB  9
032D4:  MOVWF  xC2
032D6:  MOVLB  0
032D8:  CALL   2312
032DC:  MOVFF  139,9E8
032E0:  MOVLW  37
032E2:  MOVLB  9
032E4:  MOVWF  xE9
032E6:  MOVLB  0
032E8:  CALL   2542
032EC:  MOVFF  138,9E8
032F0:  MOVLW  37
032F2:  MOVLB  9
032F4:  MOVWF  xE9
032F6:  MOVLB  0
032F8:  CALL   2542
032FC:  MOVFF  137,9E8
03300:  MOVLW  37
03302:  MOVLB  9
03304:  MOVWF  xE9
03306:  MOVLB  0
03308:  CALL   2542
0330C:  MOVFF  136,9E8
03310:  MOVLW  37
03312:  MOVLB  9
03314:  MOVWF  xE9
03316:  MOVLB  0
03318:  CALL   2542
0331C:  MOVLW  0D
0331E:  BTFSS  FA6.6
03320:  GOTO   331E
03324:  MOVLB  E
03326:  MOVWF  xF9
03328:  MOVLW  0A
0332A:  MOVLB  0
0332C:  BTFSS  FA6.6
0332E:  GOTO   332C
03332:  MOVLB  E
03334:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_ENVIRONMENT].uncopied_counter);
03336:  MOVLW  3A
03338:  MOVWF  FF6
0333A:  MOVLW  10
0333C:  MOVWF  FF7
0333E:  MOVLW  00
03340:  MOVWF  FF8
03342:  MOVLW  0E
03344:  MOVLB  9
03346:  MOVWF  xC2
03348:  MOVLB  0
0334A:  CALL   2312
0334E:  MOVFF  13D,9E8
03352:  MOVLW  37
03354:  MOVLB  9
03356:  MOVWF  xE9
03358:  MOVLB  0
0335A:  CALL   2542
0335E:  MOVFF  13C,9E8
03362:  MOVLW  37
03364:  MOVLB  9
03366:  MOVWF  xE9
03368:  MOVLB  0
0336A:  CALL   2542
0336E:  MOVFF  13B,9E8
03372:  MOVLW  37
03374:  MOVLB  9
03376:  MOVWF  xE9
03378:  MOVLB  0
0337A:  CALL   2542
0337E:  MOVFF  13A,9E8
03382:  MOVLW  37
03384:  MOVLB  9
03386:  MOVWF  xE9
03388:  MOVLB  0
0338A:  CALL   2542
0338E:  MOVLW  0D
03390:  BTFSS  FA6.6
03392:  GOTO   3390
03396:  MOVLB  E
03398:  MOVWF  xF9
0339A:  MOVLW  0A
0339C:  MOVLB  0
0339E:  BTFSS  FA6.6
033A0:  GOTO   339E
033A4:  MOVLB  E
033A6:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_ENVIRONMENT].reserve_counter1,misf_counter_table[FLASH_ID_ENVIRONMENT].reserve_counter2);
033A8:  MOVLW  50
033AA:  MOVWF  FF6
033AC:  MOVLW  10
033AE:  MOVWF  FF7
033B0:  MOVLW  00
033B2:  MOVWF  FF8
033B4:  MOVLW  0E
033B6:  MOVLB  9
033B8:  MOVWF  xC2
033BA:  MOVLB  0
033BC:  CALL   2312
033C0:  MOVFF  13E,9E8
033C4:  MOVLW  37
033C6:  MOVLB  9
033C8:  MOVWF  xE9
033CA:  MOVLB  0
033CC:  CALL   2542
033D0:  MOVLW  62
033D2:  MOVWF  FF6
033D4:  MOVLW  10
033D6:  MOVWF  FF7
033D8:  MOVLW  00
033DA:  MOVWF  FF8
033DC:  MOVLW  04
033DE:  MOVLB  9
033E0:  MOVWF  xC2
033E2:  MOVLB  0
033E4:  CALL   2312
033E8:  MOVFF  13F,9E8
033EC:  MOVLW  37
033EE:  MOVLB  9
033F0:  MOVWF  xE9
033F2:  MOVLB  0
033F4:  CALL   2542
033F8:  MOVLW  0D
033FA:  BTFSS  FA6.6
033FC:  GOTO   33FA
03400:  MOVLB  E
03402:  MOVWF  xF9
03404:  MOVLW  0A
03406:  MOVLB  0
03408:  BTFSS  FA6.6
0340A:  GOTO   3408
0340E:  MOVLB  E
03410:  MOVWF  xF9
....................     fprintf(PC, "\tIV1 HEADER\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_HEADER].used_counter);
03412:  MOVLW  6E
03414:  MOVWF  FF6
03416:  MOVLW  10
03418:  MOVWF  FF7
0341A:  MOVLW  00
0341C:  MOVWF  FF8
0341E:  MOVLW  14
03420:  MOVLB  9
03422:  MOVWF  xC2
03424:  MOVLB  0
03426:  CALL   2312
0342A:  MOVFF  143,9E8
0342E:  MOVLW  37
03430:  MOVLB  9
03432:  MOVWF  xE9
03434:  MOVLB  0
03436:  CALL   2542
0343A:  MOVFF  142,9E8
0343E:  MOVLW  37
03440:  MOVLB  9
03442:  MOVWF  xE9
03444:  MOVLB  0
03446:  CALL   2542
0344A:  MOVFF  141,9E8
0344E:  MOVLW  37
03450:  MOVLB  9
03452:  MOVWF  xE9
03454:  MOVLB  0
03456:  CALL   2542
0345A:  MOVFF  140,9E8
0345E:  MOVLW  37
03460:  MOVLB  9
03462:  MOVWF  xE9
03464:  MOVLB  0
03466:  CALL   2542
0346A:  MOVLW  0D
0346C:  BTFSS  FA6.6
0346E:  GOTO   346C
03472:  MOVLB  E
03474:  MOVWF  xF9
03476:  MOVLW  0A
03478:  MOVLB  0
0347A:  BTFSS  FA6.6
0347C:  GOTO   347A
03480:  MOVLB  E
03482:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_HEADER].uncopied_counter);
03484:  MOVLW  8A
03486:  MOVWF  FF6
03488:  MOVLW  10
0348A:  MOVWF  FF7
0348C:  MOVLW  00
0348E:  MOVWF  FF8
03490:  MOVLW  0E
03492:  MOVLB  9
03494:  MOVWF  xC2
03496:  MOVLB  0
03498:  CALL   2312
0349C:  MOVFF  147,9E8
034A0:  MOVLW  37
034A2:  MOVLB  9
034A4:  MOVWF  xE9
034A6:  MOVLB  0
034A8:  CALL   2542
034AC:  MOVFF  146,9E8
034B0:  MOVLW  37
034B2:  MOVLB  9
034B4:  MOVWF  xE9
034B6:  MOVLB  0
034B8:  CALL   2542
034BC:  MOVFF  145,9E8
034C0:  MOVLW  37
034C2:  MOVLB  9
034C4:  MOVWF  xE9
034C6:  MOVLB  0
034C8:  CALL   2542
034CC:  MOVFF  144,9E8
034D0:  MOVLW  37
034D2:  MOVLB  9
034D4:  MOVWF  xE9
034D6:  MOVLB  0
034D8:  CALL   2542
034DC:  MOVLW  0D
034DE:  BTFSS  FA6.6
034E0:  GOTO   34DE
034E4:  MOVLB  E
034E6:  MOVWF  xF9
034E8:  MOVLW  0A
034EA:  MOVLB  0
034EC:  BTFSS  FA6.6
034EE:  GOTO   34EC
034F2:  MOVLB  E
034F4:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV1_HEADER].reserve_counter1,misf_counter_table[FLASH_ID_IV1_HEADER].reserve_counter2);
034F6:  MOVLW  A0
034F8:  MOVWF  FF6
034FA:  MOVLW  10
034FC:  MOVWF  FF7
034FE:  MOVLW  00
03500:  MOVWF  FF8
03502:  MOVLW  0E
03504:  MOVLB  9
03506:  MOVWF  xC2
03508:  MOVLB  0
0350A:  CALL   2312
0350E:  MOVFF  148,9E8
03512:  MOVLW  37
03514:  MOVLB  9
03516:  MOVWF  xE9
03518:  MOVLB  0
0351A:  CALL   2542
0351E:  MOVLW  B2
03520:  MOVWF  FF6
03522:  MOVLW  10
03524:  MOVWF  FF7
03526:  MOVLW  00
03528:  MOVWF  FF8
0352A:  MOVLW  04
0352C:  MOVLB  9
0352E:  MOVWF  xC2
03530:  MOVLB  0
03532:  CALL   2312
03536:  MOVFF  149,9E8
0353A:  MOVLW  37
0353C:  MOVLB  9
0353E:  MOVWF  xE9
03540:  MOVLB  0
03542:  CALL   2542
03546:  MOVLW  0D
03548:  BTFSS  FA6.6
0354A:  GOTO   3548
0354E:  MOVLB  E
03550:  MOVWF  xF9
03552:  MOVLW  0A
03554:  MOVLB  0
03556:  BTFSS  FA6.6
03558:  GOTO   3556
0355C:  MOVLB  E
0355E:  MOVWF  xF9
....................     fprintf(PC, "\tIV1 DATA\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_DATA].used_counter);
03560:  MOVLW  BE
03562:  MOVWF  FF6
03564:  MOVLW  10
03566:  MOVWF  FF7
03568:  MOVLW  00
0356A:  MOVWF  FF8
0356C:  MOVLW  12
0356E:  MOVLB  9
03570:  MOVWF  xC2
03572:  MOVLB  0
03574:  CALL   2312
03578:  MOVFF  14D,9E8
0357C:  MOVLW  37
0357E:  MOVLB  9
03580:  MOVWF  xE9
03582:  MOVLB  0
03584:  CALL   2542
03588:  MOVFF  14C,9E8
0358C:  MOVLW  37
0358E:  MOVLB  9
03590:  MOVWF  xE9
03592:  MOVLB  0
03594:  CALL   2542
03598:  MOVFF  14B,9E8
0359C:  MOVLW  37
0359E:  MOVLB  9
035A0:  MOVWF  xE9
035A2:  MOVLB  0
035A4:  CALL   2542
035A8:  MOVFF  14A,9E8
035AC:  MOVLW  37
035AE:  MOVLB  9
035B0:  MOVWF  xE9
035B2:  MOVLB  0
035B4:  CALL   2542
035B8:  MOVLW  0D
035BA:  BTFSS  FA6.6
035BC:  GOTO   35BA
035C0:  MOVLB  E
035C2:  MOVWF  xF9
035C4:  MOVLW  0A
035C6:  MOVLB  0
035C8:  BTFSS  FA6.6
035CA:  GOTO   35C8
035CE:  MOVLB  E
035D0:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_DATA].uncopied_counter);
035D2:  MOVLW  D8
035D4:  MOVWF  FF6
035D6:  MOVLW  10
035D8:  MOVWF  FF7
035DA:  MOVLW  00
035DC:  MOVWF  FF8
035DE:  MOVLW  0E
035E0:  MOVLB  9
035E2:  MOVWF  xC2
035E4:  MOVLB  0
035E6:  CALL   2312
035EA:  MOVFF  151,9E8
035EE:  MOVLW  37
035F0:  MOVLB  9
035F2:  MOVWF  xE9
035F4:  MOVLB  0
035F6:  CALL   2542
035FA:  MOVFF  150,9E8
035FE:  MOVLW  37
03600:  MOVLB  9
03602:  MOVWF  xE9
03604:  MOVLB  0
03606:  CALL   2542
0360A:  MOVFF  14F,9E8
0360E:  MOVLW  37
03610:  MOVLB  9
03612:  MOVWF  xE9
03614:  MOVLB  0
03616:  CALL   2542
0361A:  MOVFF  14E,9E8
0361E:  MOVLW  37
03620:  MOVLB  9
03622:  MOVWF  xE9
03624:  MOVLB  0
03626:  CALL   2542
0362A:  MOVLW  0D
0362C:  BTFSS  FA6.6
0362E:  GOTO   362C
03632:  MOVLB  E
03634:  MOVWF  xF9
03636:  MOVLW  0A
03638:  MOVLB  0
0363A:  BTFSS  FA6.6
0363C:  GOTO   363A
03640:  MOVLB  E
03642:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV1_DATA].reserve_counter1,misf_counter_table[FLASH_ID_IV1_DATA].reserve_counter2);
03644:  MOVLW  EE
03646:  MOVWF  FF6
03648:  MOVLW  10
0364A:  MOVWF  FF7
0364C:  MOVLW  00
0364E:  MOVWF  FF8
03650:  MOVLW  0E
03652:  MOVLB  9
03654:  MOVWF  xC2
03656:  MOVLB  0
03658:  CALL   2312
0365C:  MOVFF  152,9E8
03660:  MOVLW  37
03662:  MOVLB  9
03664:  MOVWF  xE9
03666:  MOVLB  0
03668:  CALL   2542
0366C:  MOVLW  00
0366E:  MOVWF  FF6
03670:  MOVLW  11
03672:  MOVWF  FF7
03674:  MOVLW  00
03676:  MOVWF  FF8
03678:  MOVLW  04
0367A:  MOVLB  9
0367C:  MOVWF  xC2
0367E:  MOVLB  0
03680:  CALL   2312
03684:  MOVFF  153,9E8
03688:  MOVLW  37
0368A:  MOVLB  9
0368C:  MOVWF  xE9
0368E:  MOVLB  0
03690:  CALL   2542
03694:  MOVLW  0D
03696:  BTFSS  FA6.6
03698:  GOTO   3696
0369C:  MOVLB  E
0369E:  MOVWF  xF9
036A0:  MOVLW  0A
036A2:  MOVLB  0
036A4:  BTFSS  FA6.6
036A6:  GOTO   36A4
036AA:  MOVLB  E
036AC:  MOVWF  xF9
....................     fprintf(PC, "\tIV2 HEADER\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_HEADER].used_counter);
036AE:  MOVLW  0C
036B0:  MOVWF  FF6
036B2:  MOVLW  11
036B4:  MOVWF  FF7
036B6:  MOVLW  00
036B8:  MOVWF  FF8
036BA:  MOVLW  14
036BC:  MOVLB  9
036BE:  MOVWF  xC2
036C0:  MOVLB  0
036C2:  CALL   2312
036C6:  MOVFF  157,9E8
036CA:  MOVLW  37
036CC:  MOVLB  9
036CE:  MOVWF  xE9
036D0:  MOVLB  0
036D2:  CALL   2542
036D6:  MOVFF  156,9E8
036DA:  MOVLW  37
036DC:  MOVLB  9
036DE:  MOVWF  xE9
036E0:  MOVLB  0
036E2:  CALL   2542
036E6:  MOVFF  155,9E8
036EA:  MOVLW  37
036EC:  MOVLB  9
036EE:  MOVWF  xE9
036F0:  MOVLB  0
036F2:  CALL   2542
036F6:  MOVFF  154,9E8
036FA:  MOVLW  37
036FC:  MOVLB  9
036FE:  MOVWF  xE9
03700:  MOVLB  0
03702:  CALL   2542
03706:  MOVLW  0D
03708:  BTFSS  FA6.6
0370A:  GOTO   3708
0370E:  MOVLB  E
03710:  MOVWF  xF9
03712:  MOVLW  0A
03714:  MOVLB  0
03716:  BTFSS  FA6.6
03718:  GOTO   3716
0371C:  MOVLB  E
0371E:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_HEADER].uncopied_counter);
03720:  MOVLW  28
03722:  MOVWF  FF6
03724:  MOVLW  11
03726:  MOVWF  FF7
03728:  MOVLW  00
0372A:  MOVWF  FF8
0372C:  MOVLW  0E
0372E:  MOVLB  9
03730:  MOVWF  xC2
03732:  MOVLB  0
03734:  CALL   2312
03738:  MOVFF  15B,9E8
0373C:  MOVLW  37
0373E:  MOVLB  9
03740:  MOVWF  xE9
03742:  MOVLB  0
03744:  CALL   2542
03748:  MOVFF  15A,9E8
0374C:  MOVLW  37
0374E:  MOVLB  9
03750:  MOVWF  xE9
03752:  MOVLB  0
03754:  CALL   2542
03758:  MOVFF  159,9E8
0375C:  MOVLW  37
0375E:  MOVLB  9
03760:  MOVWF  xE9
03762:  MOVLB  0
03764:  CALL   2542
03768:  MOVFF  158,9E8
0376C:  MOVLW  37
0376E:  MOVLB  9
03770:  MOVWF  xE9
03772:  MOVLB  0
03774:  CALL   2542
03778:  MOVLW  0D
0377A:  BTFSS  FA6.6
0377C:  GOTO   377A
03780:  MOVLB  E
03782:  MOVWF  xF9
03784:  MOVLW  0A
03786:  MOVLB  0
03788:  BTFSS  FA6.6
0378A:  GOTO   3788
0378E:  MOVLB  E
03790:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV2_HEADER].reserve_counter1,misf_counter_table[FLASH_ID_IV2_HEADER].reserve_counter2);
03792:  MOVLW  3E
03794:  MOVWF  FF6
03796:  MOVLW  11
03798:  MOVWF  FF7
0379A:  MOVLW  00
0379C:  MOVWF  FF8
0379E:  MOVLW  0E
037A0:  MOVLB  9
037A2:  MOVWF  xC2
037A4:  MOVLB  0
037A6:  CALL   2312
037AA:  MOVFF  15C,9E8
037AE:  MOVLW  37
037B0:  MOVLB  9
037B2:  MOVWF  xE9
037B4:  MOVLB  0
037B6:  CALL   2542
037BA:  MOVLW  50
037BC:  MOVWF  FF6
037BE:  MOVLW  11
037C0:  MOVWF  FF7
037C2:  MOVLW  00
037C4:  MOVWF  FF8
037C6:  MOVLW  04
037C8:  MOVLB  9
037CA:  MOVWF  xC2
037CC:  MOVLB  0
037CE:  CALL   2312
037D2:  MOVFF  15D,9E8
037D6:  MOVLW  37
037D8:  MOVLB  9
037DA:  MOVWF  xE9
037DC:  MOVLB  0
037DE:  CALL   2542
037E2:  MOVLW  0D
037E4:  BTFSS  FA6.6
037E6:  GOTO   37E4
037EA:  MOVLB  E
037EC:  MOVWF  xF9
037EE:  MOVLW  0A
037F0:  MOVLB  0
037F2:  BTFSS  FA6.6
037F4:  GOTO   37F2
037F8:  MOVLB  E
037FA:  MOVWF  xF9
....................     fprintf(PC, "\tIV2 DATA\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_DATA].used_counter);
037FC:  MOVLW  5C
037FE:  MOVWF  FF6
03800:  MOVLW  11
03802:  MOVWF  FF7
03804:  MOVLW  00
03806:  MOVWF  FF8
03808:  MOVLW  12
0380A:  MOVLB  9
0380C:  MOVWF  xC2
0380E:  MOVLB  0
03810:  CALL   2312
03814:  MOVFF  161,9E8
03818:  MOVLW  37
0381A:  MOVLB  9
0381C:  MOVWF  xE9
0381E:  MOVLB  0
03820:  CALL   2542
03824:  MOVFF  160,9E8
03828:  MOVLW  37
0382A:  MOVLB  9
0382C:  MOVWF  xE9
0382E:  MOVLB  0
03830:  CALL   2542
03834:  MOVFF  15F,9E8
03838:  MOVLW  37
0383A:  MOVLB  9
0383C:  MOVWF  xE9
0383E:  MOVLB  0
03840:  CALL   2542
03844:  MOVFF  15E,9E8
03848:  MOVLW  37
0384A:  MOVLB  9
0384C:  MOVWF  xE9
0384E:  MOVLB  0
03850:  CALL   2542
03854:  MOVLW  0D
03856:  BTFSS  FA6.6
03858:  GOTO   3856
0385C:  MOVLB  E
0385E:  MOVWF  xF9
03860:  MOVLW  0A
03862:  MOVLB  0
03864:  BTFSS  FA6.6
03866:  GOTO   3864
0386A:  MOVLB  E
0386C:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_DATA].uncopied_counter);
0386E:  MOVLW  76
03870:  MOVWF  FF6
03872:  MOVLW  11
03874:  MOVWF  FF7
03876:  MOVLW  00
03878:  MOVWF  FF8
0387A:  MOVLW  0E
0387C:  MOVLB  9
0387E:  MOVWF  xC2
03880:  MOVLB  0
03882:  CALL   2312
03886:  MOVFF  165,9E8
0388A:  MOVLW  37
0388C:  MOVLB  9
0388E:  MOVWF  xE9
03890:  MOVLB  0
03892:  CALL   2542
03896:  MOVFF  164,9E8
0389A:  MOVLW  37
0389C:  MOVLB  9
0389E:  MOVWF  xE9
038A0:  MOVLB  0
038A2:  CALL   2542
038A6:  MOVFF  163,9E8
038AA:  MOVLW  37
038AC:  MOVLB  9
038AE:  MOVWF  xE9
038B0:  MOVLB  0
038B2:  CALL   2542
038B6:  MOVFF  162,9E8
038BA:  MOVLW  37
038BC:  MOVLB  9
038BE:  MOVWF  xE9
038C0:  MOVLB  0
038C2:  CALL   2542
038C6:  MOVLW  0D
038C8:  BTFSS  FA6.6
038CA:  GOTO   38C8
038CE:  MOVLB  E
038D0:  MOVWF  xF9
038D2:  MOVLW  0A
038D4:  MOVLB  0
038D6:  BTFSS  FA6.6
038D8:  GOTO   38D6
038DC:  MOVLB  E
038DE:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV2_DATA].reserve_counter1,misf_counter_table[FLASH_ID_IV2_DATA].reserve_counter2);
038E0:  MOVLW  8C
038E2:  MOVWF  FF6
038E4:  MOVLW  11
038E6:  MOVWF  FF7
038E8:  MOVLW  00
038EA:  MOVWF  FF8
038EC:  MOVLW  0E
038EE:  MOVLB  9
038F0:  MOVWF  xC2
038F2:  MOVLB  0
038F4:  CALL   2312
038F8:  MOVFF  166,9E8
038FC:  MOVLW  37
038FE:  MOVLB  9
03900:  MOVWF  xE9
03902:  MOVLB  0
03904:  CALL   2542
03908:  MOVLW  9E
0390A:  MOVWF  FF6
0390C:  MOVLW  11
0390E:  MOVWF  FF7
03910:  MOVLW  00
03912:  MOVWF  FF8
03914:  MOVLW  04
03916:  MOVLB  9
03918:  MOVWF  xC2
0391A:  MOVLB  0
0391C:  CALL   2312
03920:  MOVFF  167,9E8
03924:  MOVLW  37
03926:  MOVLB  9
03928:  MOVWF  xE9
0392A:  MOVLB  0
0392C:  CALL   2542
03930:  MOVLW  0D
03932:  BTFSS  FA6.6
03934:  GOTO   3932
03938:  MOVLB  E
0393A:  MOVWF  xF9
0393C:  MOVLW  0A
0393E:  MOVLB  0
03940:  BTFSS  FA6.6
03942:  GOTO   3940
03946:  MOVLB  E
03948:  MOVWF  xF9
....................     fprintf(PC, "\t==================================================\r\n");
0394A:  MOVLW  AA
0394C:  MOVWF  FF6
0394E:  MOVLW  11
03950:  MOVWF  FF7
03952:  MOVLW  00
03954:  MOVWF  FF8
03956:  MOVLB  0
03958:  CALL   22DC
0395C:  GOTO   3C06 (RETURN)
.................... }
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size)
.................... {
....................     /*
....................     fprintf(PC, "[MIS FM] Write Data Size:%lu\r\n", size);
....................     fprintf(PC, "%08LX\r\n", MISF_ADDRESS_TABLE[id].start);
....................     fprintf(PC, "%08LX\r\n", misf_counter_table[id].used_counter);
....................     fprintf(PC, "%08LX\r\n", misf_counter_table[id].reserve_counter1);
....................     for (unsigned int32 j = 0; j < size; j++) {
....................         fprintf(PC, "%02X ", data_ptr[j]);
....................     }
....................     fprintf(PC, "\r\n");
....................     */
....................     // パケット境界チェック
....................     if (size == PACKET_SIZE){
*
0428E:  MOVLB  A
04290:  MOVF   x52,W
04292:  SUBLW  40
04294:  BTFSC  FD8.2
04296:  BRA    429E
04298:  MOVLB  0
0429A:  GOTO   4414
0429E:  MOVLB  0
042A0:  MOVLB  A
042A2:  MOVF   x53,F
042A4:  BTFSC  FD8.2
042A6:  BRA    42AE
042A8:  MOVLB  0
042AA:  GOTO   4414
042AE:  MOVLB  0
....................         // fprintf(PC, "PACKET SIZE 64\r\n");
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
042B0:  MOVLB  A
042B2:  MOVF   x4F,W
042B4:  MULLW  0C
042B6:  MOVF   FF3,W
042B8:  CLRF   xEB
042BA:  MOVWF  xEA
042BC:  MOVFF  AEB,03
042C0:  MOVF   xEA,W
042C2:  MOVLB  0
042C4:  CALL   00E6
042C8:  MOVWF  00
042CA:  TBLRD*+
042CC:  MOVFF  FF5,01
042D0:  TBLRD*+
042D2:  MOVFF  FF5,02
042D6:  TBLRD*+
042D8:  MOVFF  FF5,03
042DC:  MOVFF  03,AEF
042E0:  MOVFF  02,AEE
042E4:  MOVFF  01,AED
042E8:  MOVFF  00,AEC
042EC:  MOVLB  A
042EE:  MOVF   x4F,W
042F0:  MULLW  0A
042F2:  MOVF   FF3,W
042F4:  CLRF   xF1
042F6:  MOVWF  xF0
042F8:  MOVLW  22
042FA:  ADDWF  xF0,W
042FC:  MOVWF  FE9
042FE:  MOVLW  01
04300:  ADDWFC xF1,W
04302:  MOVWF  FEA
04304:  MOVFF  FEF,00
04308:  MOVFF  FEC,01
0430C:  MOVFF  FEC,02
04310:  MOVFF  FEC,03
04314:  MOVF   FED,F
04316:  MOVF   FED,F
04318:  MOVF   FED,F
0431A:  MOVF   00,W
0431C:  ADDWF  xEC,W
0431E:  MOVWF  x54
04320:  MOVF   01,W
04322:  ADDWFC xED,W
04324:  MOVWF  x55
04326:  MOVF   02,W
04328:  ADDWFC xEE,W
0432A:  MOVWF  x56
0432C:  MOVF   03,W
0432E:  ADDWFC xEF,W
04330:  MOVWF  x57
04332:  MOVLB  0
....................         write_data_bytes(mis_fm, write_address, data_ptr, size);
04334:  MOVFF  115,AED
04338:  MOVFF  114,AEC
0433C:  MOVFF  113,AEB
04340:  MOVFF  112,AEA
04344:  MOVFF  A57,AF1
04348:  MOVFF  A56,AF0
0434C:  MOVFF  A55,AEF
04350:  MOVFF  A54,AEE
04354:  MOVFF  A51,AF3
04358:  MOVFF  A50,AF2
0435C:  MOVFF  A53,AF5
04360:  MOVFF  A52,AF4
04364:  CALL   3F36
....................         // for (unsigned int32 j = 0; j < size; j++) {
....................             // fprintf(PC, "%02X ", data_ptr[j]);
....................         // }
....................         misf_counter_table[id].used_counter     += size;
04368:  MOVLB  A
0436A:  MOVF   x4F,W
0436C:  MULLW  0A
0436E:  MOVF   FF3,W
04370:  CLRF   xEB
04372:  MOVWF  xEA
04374:  MOVLW  22
04376:  ADDWF  xEA,W
04378:  MOVWF  FE9
0437A:  MOVLW  01
0437C:  ADDWFC xEB,W
0437E:  MOVWF  FEA
04380:  MOVF   x52,W
04382:  ADDWF  FEF,W
04384:  MOVWF  00
04386:  MOVF   x53,W
04388:  ADDWFC FEC,W
0438A:  MOVWF  01
0438C:  MOVLW  00
0438E:  ADDWFC FEC,W
04390:  MOVWF  02
04392:  MOVLW  00
04394:  ADDWFC FEC,W
04396:  MOVWF  03
04398:  MOVF   FED,F
0439A:  MOVF   FED,F
0439C:  MOVF   FED,F
0439E:  MOVFF  00,FEF
043A2:  MOVFF  01,FEC
043A6:  MOVFF  02,FEC
043AA:  MOVFF  03,FEC
043AE:  MOVF   FED,F
043B0:  MOVF   FED,F
043B2:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += size;
043B4:  MOVF   x4F,W
043B6:  MULLW  0A
043B8:  MOVF   FF3,W
043BA:  CLRF   xEB
043BC:  MOVWF  xEA
043BE:  MOVLW  04
043C0:  ADDWF  xEA,W
043C2:  MOVWF  01
043C4:  MOVLW  00
043C6:  ADDWFC xEB,W
043C8:  MOVWF  03
043CA:  MOVF   01,W
043CC:  ADDLW  22
043CE:  MOVWF  FE9
043D0:  MOVLW  01
043D2:  ADDWFC 03,W
043D4:  MOVWF  FEA
043D6:  MOVF   x52,W
043D8:  ADDWF  FEF,W
043DA:  MOVWF  00
043DC:  MOVF   x53,W
043DE:  ADDWFC FEC,W
043E0:  MOVWF  01
043E2:  MOVLW  00
043E4:  ADDWFC FEC,W
043E6:  MOVWF  02
043E8:  MOVLW  00
043EA:  ADDWFC FEC,W
043EC:  MOVWF  03
043EE:  MOVF   FED,F
043F0:  MOVF   FED,F
043F2:  MOVF   FED,F
043F4:  MOVFF  00,FEF
043F8:  MOVFF  01,FEC
043FC:  MOVFF  02,FEC
04400:  MOVFF  03,FEC
04404:  MOVF   FED,F
04406:  MOVF   FED,F
04408:  MOVF   FED,F
.................... 
....................         return;
0440A:  MOVLB  0
0440C:  GOTO   4BD8
....................     }
04410:  GOTO   4A4A
....................     
....................     else if (misf_counter_table[id].reserve_counter1 + size == PACKET_SIZE-1) {
04414:  MOVLB  A
04416:  MOVF   x4F,W
04418:  MULLW  0A
0441A:  MOVF   FF3,W
0441C:  CLRF   xEB
0441E:  MOVWF  xEA
04420:  MOVLW  08
04422:  ADDWF  xEA,W
04424:  MOVWF  01
04426:  MOVLW  00
04428:  ADDWFC xEB,W
0442A:  MOVWF  03
0442C:  MOVF   01,W
0442E:  ADDLW  22
04430:  MOVWF  FE9
04432:  MOVLW  01
04434:  ADDWFC 03,W
04436:  MOVWF  FEA
04438:  MOVF   FEF,W
0443A:  ADDWF  x52,W
0443C:  MOVWF  xEA
0443E:  MOVLW  00
04440:  ADDWFC x53,W
04442:  MOVWF  xEB
04444:  MOVF   xEA,W
04446:  SUBLW  3F
04448:  BTFSC  FD8.2
0444A:  BRA    4452
0444C:  MOVLB  0
0444E:  GOTO   4708
04452:  MOVLB  0
04454:  MOVLB  A
04456:  MOVF   xEB,F
04458:  BTFSC  FD8.2
0445A:  BRA    4462
0445C:  MOVLB  0
0445E:  GOTO   4708
04462:  MOVLB  0
....................         unsigned int8 blank_size = PACKET_SIZE - 1 - misf_counter_table[id].reserve_counter1;
....................         // fprintf(PC, "0x%02X", blank_size);
....................         unsigned int8 blank_data[PACKET_SIZE];
04464:  MOVLB  A
04466:  MOVF   x4F,W
04468:  MULLW  0A
0446A:  MOVF   FF3,W
0446C:  CLRF   xEB
0446E:  MOVWF  xEA
04470:  MOVLW  08
04472:  ADDWF  xEA,W
04474:  MOVWF  01
04476:  MOVLW  00
04478:  ADDWFC xEB,W
0447A:  MOVWF  03
0447C:  MOVF   01,W
0447E:  ADDLW  22
04480:  MOVWF  FE9
04482:  MOVLW  01
04484:  ADDWFC 03,W
04486:  MOVWF  FEA
04488:  MOVF   FEF,W
0448A:  XORLW  FF
0448C:  ADDLW  40
0448E:  MOVWF  x58
04490:  MOVLB  0
....................         memset(blank_data, 0, blank_size);
04492:  MOVLW  0A
04494:  MOVWF  FEA
04496:  MOVLW  59
04498:  MOVWF  FE9
0449A:  CLRF   00
0449C:  CLRF   02
0449E:  MOVFF  A58,01
044A2:  CALL   234C
.................... 
....................         // アドレス再計算
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
044A6:  MOVLB  A
044A8:  MOVF   x4F,W
044AA:  MULLW  0C
044AC:  MOVF   FF3,W
044AE:  CLRF   xEB
044B0:  MOVWF  xEA
044B2:  MOVFF  AEB,03
044B6:  MOVF   xEA,W
044B8:  MOVLB  0
044BA:  CALL   00E6
044BE:  MOVWF  00
044C0:  TBLRD*+
044C2:  MOVFF  FF5,01
044C6:  TBLRD*+
044C8:  MOVFF  FF5,02
044CC:  TBLRD*+
044CE:  MOVFF  FF5,03
044D2:  MOVFF  03,AEF
044D6:  MOVFF  02,AEE
044DA:  MOVFF  01,AED
044DE:  MOVFF  00,AEC
044E2:  MOVLB  A
044E4:  MOVF   x4F,W
044E6:  MULLW  0A
044E8:  MOVF   FF3,W
044EA:  CLRF   xF1
044EC:  MOVWF  xF0
044EE:  MOVLW  22
044F0:  ADDWF  xF0,W
044F2:  MOVWF  FE9
044F4:  MOVLW  01
044F6:  ADDWFC xF1,W
044F8:  MOVWF  FEA
044FA:  MOVFF  FEF,00
044FE:  MOVFF  FEC,01
04502:  MOVFF  FEC,02
04506:  MOVFF  FEC,03
0450A:  MOVF   FED,F
0450C:  MOVF   FED,F
0450E:  MOVF   FED,F
04510:  MOVF   00,W
04512:  ADDWF  xEC,W
04514:  MOVWF  x99
04516:  MOVF   01,W
04518:  ADDWFC xED,W
0451A:  MOVWF  x9A
0451C:  MOVF   02,W
0451E:  ADDWFC xEE,W
04520:  MOVWF  x9B
04522:  MOVF   03,W
04524:  ADDWFC xEF,W
04526:  MOVWF  x9C
.................... 
....................         // 未使用部分を 0 埋め
....................         write_data_bytes(mis_fm, write_address, blank_data, blank_size);
04528:  MOVFF  115,AED
0452C:  MOVFF  114,AEC
04530:  MOVFF  113,AEB
04534:  MOVFF  112,AEA
04538:  MOVFF  A9C,AF1
0453C:  MOVFF  A9B,AF0
04540:  MOVFF  A9A,AEF
04544:  MOVFF  A99,AEE
04548:  MOVLW  0A
0454A:  MOVWF  xF3
0454C:  MOVLW  59
0454E:  MOVWF  xF2
04550:  CLRF   xF5
04552:  MOVFF  A58,AF4
04556:  MOVLB  0
04558:  CALL   3F36
.................... 
....................         // CRC 計算（本体部分だけ読む）
....................         unsigned int8 packet_data[PACKET_SIZE - 1];
....................         unsigned int32 read_address = write_address + blank_size - PACKET_SIZE - 1;
0455C:  MOVLB  A
0455E:  MOVF   x58,W
04560:  ADDWF  x99,W
04562:  MOVWF  xEA
04564:  MOVLW  00
04566:  ADDWFC x9A,W
04568:  MOVWF  xEB
0456A:  MOVLW  00
0456C:  ADDWFC x9B,W
0456E:  MOVWF  xEC
04570:  MOVLW  00
04572:  ADDWFC x9C,W
04574:  MOVWF  xED
04576:  MOVLW  40
04578:  SUBWF  xEA,F
0457A:  MOVLW  00
0457C:  SUBWFB xEB,F
0457E:  MOVLW  00
04580:  SUBWFB xEC,F
04582:  MOVLW  00
04584:  SUBWFB xED,F
04586:  MOVLW  01
04588:  SUBWF  xEA,W
0458A:  MOVWF  xDC
0458C:  MOVLW  00
0458E:  SUBWFB xEB,W
04590:  MOVWF  xDD
04592:  MOVLW  00
04594:  SUBWFB xEC,W
04596:  MOVWF  xDE
04598:  MOVLW  00
0459A:  SUBWFB xED,W
0459C:  MOVWF  xDF
....................         read_data_bytes(mis_fm, read_address, packet_data, PACKET_SIZE - 1);
0459E:  MOVFF  115,AED
045A2:  MOVFF  114,AEC
045A6:  MOVFF  113,AEB
045AA:  MOVFF  112,AEA
045AE:  MOVFF  ADF,AF1
045B2:  MOVFF  ADE,AF0
045B6:  MOVFF  ADD,AEF
045BA:  MOVFF  ADC,AEE
045BE:  MOVLW  0A
045C0:  MOVWF  xF3
045C2:  MOVLW  9D
045C4:  MOVWF  xF2
045C6:  CLRF   xF7
045C8:  CLRF   xF6
045CA:  CLRF   xF5
045CC:  MOVLW  3F
045CE:  MOVWF  xF4
045D0:  MOVLB  0
045D2:  CALL   2ECA
....................         unsigned int8 crc = calc_crc8(packet_data, PACKET_SIZE - 1);
045D6:  MOVLW  0A
045D8:  MOVLB  A
045DA:  MOVWF  xEB
045DC:  MOVLW  9D
045DE:  MOVWF  xEA
045E0:  MOVLW  3F
045E2:  MOVWF  xEC
045E4:  MOVLB  0
045E6:  CALL   30EA
045EA:  MOVFF  01,AE0
....................         // fprintf(PC, "0x%02X", crc);
....................         // CRC 書き込み
....................         write_address += blank_size;
045EE:  MOVLB  A
045F0:  MOVF   x58,W
045F2:  ADDWF  x99,F
045F4:  MOVLW  00
045F6:  ADDWFC x9A,F
045F8:  MOVLW  00
045FA:  ADDWFC x9B,F
045FC:  MOVLW  00
045FE:  ADDWFC x9C,F
....................         write_data_bytes(mis_fm, write_address, &crc, 1);
04600:  MOVFF  115,AED
04604:  MOVFF  114,AEC
04608:  MOVFF  113,AEB
0460C:  MOVFF  112,AEA
04610:  MOVFF  A9C,AF1
04614:  MOVFF  A9B,AF0
04618:  MOVFF  A9A,AEF
0461C:  MOVFF  A99,AEE
04620:  MOVLW  0A
04622:  MOVWF  xF3
04624:  MOVLW  E0
04626:  MOVWF  xF2
04628:  CLRF   xF5
0462A:  MOVLW  01
0462C:  MOVWF  xF4
0462E:  MOVLB  0
04630:  CALL   3F36
.................... 
....................         // カウンタ更新
....................         misf_counter_table[id].used_counter     += blank_size + 1;
04634:  MOVLB  A
04636:  MOVF   x4F,W
04638:  MULLW  0A
0463A:  MOVF   FF3,W
0463C:  CLRF   xEB
0463E:  MOVWF  xEA
04640:  MOVLW  22
04642:  ADDWF  xEA,W
04644:  MOVWF  FE9
04646:  MOVLW  01
04648:  ADDWFC xEB,W
0464A:  MOVWF  FEA
0464C:  MOVLW  01
0464E:  ADDWF  x58,W
04650:  ADDWF  FEF,W
04652:  MOVWF  00
04654:  MOVLW  00
04656:  ADDWFC FEC,W
04658:  MOVWF  01
0465A:  MOVLW  00
0465C:  ADDWFC FEC,W
0465E:  MOVWF  02
04660:  MOVLW  00
04662:  ADDWFC FEC,W
04664:  MOVWF  03
04666:  MOVF   FED,F
04668:  MOVF   FED,F
0466A:  MOVF   FED,F
0466C:  MOVFF  00,FEF
04670:  MOVFF  01,FEC
04674:  MOVFF  02,FEC
04678:  MOVFF  03,FEC
0467C:  MOVF   FED,F
0467E:  MOVF   FED,F
04680:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += blank_size + 1;
04682:  MOVF   x4F,W
04684:  MULLW  0A
04686:  MOVF   FF3,W
04688:  CLRF   xEB
0468A:  MOVWF  xEA
0468C:  MOVLW  04
0468E:  ADDWF  xEA,W
04690:  MOVWF  01
04692:  MOVLW  00
04694:  ADDWFC xEB,W
04696:  MOVWF  03
04698:  MOVF   01,W
0469A:  ADDLW  22
0469C:  MOVWF  FE9
0469E:  MOVLW  01
046A0:  ADDWFC 03,W
046A2:  MOVWF  FEA
046A4:  MOVLW  01
046A6:  ADDWF  x58,W
046A8:  ADDWF  FEF,W
046AA:  MOVWF  00
046AC:  MOVLW  00
046AE:  ADDWFC FEC,W
046B0:  MOVWF  01
046B2:  MOVLW  00
046B4:  ADDWFC FEC,W
046B6:  MOVWF  02
046B8:  MOVLW  00
046BA:  ADDWFC FEC,W
046BC:  MOVWF  03
046BE:  MOVF   FED,F
046C0:  MOVF   FED,F
046C2:  MOVF   FED,F
046C4:  MOVFF  00,FEF
046C8:  MOVFF  01,FEC
046CC:  MOVFF  02,FEC
046D0:  MOVFF  03,FEC
046D4:  MOVF   FED,F
046D6:  MOVF   FED,F
046D8:  MOVF   FED,F
....................         misf_counter_table[id].reserve_counter1  = 0;
046DA:  MOVF   x4F,W
046DC:  MULLW  0A
046DE:  MOVF   FF3,W
046E0:  CLRF   xEB
046E2:  MOVWF  xEA
046E4:  MOVLW  08
046E6:  ADDWF  xEA,W
046E8:  MOVWF  01
046EA:  MOVLW  00
046EC:  ADDWFC xEB,W
046EE:  MOVWF  03
046F0:  MOVF   01,W
046F2:  ADDLW  22
046F4:  MOVWF  FE9
046F6:  MOVLW  01
046F8:  ADDWFC 03,W
046FA:  MOVWF  FEA
046FC:  CLRF   FEF
....................         return;
046FE:  MOVLB  0
04700:  GOTO   4BD8
.................... 
....................     }else  if(misf_counter_table[id].reserve_counter1 + size == PACKET_SIZE-1){
04704:  GOTO   4A4A
04708:  MOVLB  A
0470A:  MOVF   x4F,W
0470C:  MULLW  0A
0470E:  MOVF   FF3,W
04710:  CLRF   xEB
04712:  MOVWF  xEA
04714:  MOVLW  08
04716:  ADDWF  xEA,W
04718:  MOVWF  01
0471A:  MOVLW  00
0471C:  ADDWFC xEB,W
0471E:  MOVWF  03
04720:  MOVF   01,W
04722:  ADDLW  22
04724:  MOVWF  FE9
04726:  MOVLW  01
04728:  ADDWFC 03,W
0472A:  MOVWF  FEA
0472C:  MOVF   FEF,W
0472E:  ADDWF  x52,W
04730:  MOVWF  xEA
04732:  MOVLW  00
04734:  ADDWFC x53,W
04736:  MOVWF  xEB
04738:  MOVF   xEA,W
0473A:  SUBLW  3F
0473C:  BTFSC  FD8.2
0473E:  BRA    4746
04740:  MOVLB  0
04742:  GOTO   4A4A
04746:  MOVLB  0
04748:  MOVLB  A
0474A:  MOVF   xEB,F
0474C:  BTFSC  FD8.2
0474E:  BRA    4756
04750:  MOVLB  0
04752:  GOTO   4A4A
04756:  MOVLB  0
....................         // データ書き込み
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
04758:  MOVLB  A
0475A:  MOVF   x4F,W
0475C:  MULLW  0C
0475E:  MOVF   FF3,W
04760:  CLRF   xEB
04762:  MOVWF  xEA
04764:  MOVFF  AEB,03
04768:  MOVF   xEA,W
0476A:  MOVLB  0
0476C:  CALL   00E6
04770:  MOVWF  00
04772:  TBLRD*+
04774:  MOVFF  FF5,01
04778:  TBLRD*+
0477A:  MOVFF  FF5,02
0477E:  TBLRD*+
04780:  MOVFF  FF5,03
04784:  MOVFF  03,AEF
04788:  MOVFF  02,AEE
0478C:  MOVFF  01,AED
04790:  MOVFF  00,AEC
04794:  MOVLB  A
04796:  MOVF   x4F,W
04798:  MULLW  0A
0479A:  MOVF   FF3,W
0479C:  CLRF   xF1
0479E:  MOVWF  xF0
047A0:  MOVLW  22
047A2:  ADDWF  xF0,W
047A4:  MOVWF  FE9
047A6:  MOVLW  01
047A8:  ADDWFC xF1,W
047AA:  MOVWF  FEA
047AC:  MOVFF  FEF,00
047B0:  MOVFF  FEC,01
047B4:  MOVFF  FEC,02
047B8:  MOVFF  FEC,03
047BC:  MOVF   FED,F
047BE:  MOVF   FED,F
047C0:  MOVF   FED,F
047C2:  MOVF   00,W
047C4:  ADDWF  xEC,W
047C6:  MOVWF  xE1
047C8:  MOVF   01,W
047CA:  ADDWFC xED,W
047CC:  MOVWF  xE2
047CE:  MOVF   02,W
047D0:  ADDWFC xEE,W
047D2:  MOVWF  xE3
047D4:  MOVF   03,W
047D6:  ADDWFC xEF,W
047D8:  MOVWF  xE4
047DA:  MOVLB  0
....................         write_data_bytes(mis_fm, write_address, data_ptr, size);
047DC:  MOVFF  115,AED
047E0:  MOVFF  114,AEC
047E4:  MOVFF  113,AEB
047E8:  MOVFF  112,AEA
047EC:  MOVFF  AE4,AF1
047F0:  MOVFF  AE3,AF0
047F4:  MOVFF  AE2,AEF
047F8:  MOVFF  AE1,AEE
047FC:  MOVFF  A51,AF3
04800:  MOVFF  A50,AF2
04804:  MOVFF  A53,AF5
04808:  MOVFF  A52,AF4
0480C:  CALL   3F36
....................         // fprintf(PC, "ADDRESS 0x%08LX DATA ", write_address);
....................         // for (unsigned int32 j = 0; j < size; j++) {
....................             // fprintf(PC, "%02X ", data_ptr[j]);
....................         // }
....................         // fprintf(PC, "\Sr\n");
.................... 
....................         misf_counter_table[id].used_counter     += size;
04810:  MOVLB  A
04812:  MOVF   x4F,W
04814:  MULLW  0A
04816:  MOVF   FF3,W
04818:  CLRF   xEB
0481A:  MOVWF  xEA
0481C:  MOVLW  22
0481E:  ADDWF  xEA,W
04820:  MOVWF  FE9
04822:  MOVLW  01
04824:  ADDWFC xEB,W
04826:  MOVWF  FEA
04828:  MOVF   x52,W
0482A:  ADDWF  FEF,W
0482C:  MOVWF  00
0482E:  MOVF   x53,W
04830:  ADDWFC FEC,W
04832:  MOVWF  01
04834:  MOVLW  00
04836:  ADDWFC FEC,W
04838:  MOVWF  02
0483A:  MOVLW  00
0483C:  ADDWFC FEC,W
0483E:  MOVWF  03
04840:  MOVF   FED,F
04842:  MOVF   FED,F
04844:  MOVF   FED,F
04846:  MOVFF  00,FEF
0484A:  MOVFF  01,FEC
0484E:  MOVFF  02,FEC
04852:  MOVFF  03,FEC
04856:  MOVF   FED,F
04858:  MOVF   FED,F
0485A:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += size;
0485C:  MOVF   x4F,W
0485E:  MULLW  0A
04860:  MOVF   FF3,W
04862:  CLRF   xEB
04864:  MOVWF  xEA
04866:  MOVLW  04
04868:  ADDWF  xEA,W
0486A:  MOVWF  01
0486C:  MOVLW  00
0486E:  ADDWFC xEB,W
04870:  MOVWF  03
04872:  MOVF   01,W
04874:  ADDLW  22
04876:  MOVWF  FE9
04878:  MOVLW  01
0487A:  ADDWFC 03,W
0487C:  MOVWF  FEA
0487E:  MOVF   x52,W
04880:  ADDWF  FEF,W
04882:  MOVWF  00
04884:  MOVF   x53,W
04886:  ADDWFC FEC,W
04888:  MOVWF  01
0488A:  MOVLW  00
0488C:  ADDWFC FEC,W
0488E:  MOVWF  02
04890:  MOVLW  00
04892:  ADDWFC FEC,W
04894:  MOVWF  03
04896:  MOVF   FED,F
04898:  MOVF   FED,F
0489A:  MOVF   FED,F
0489C:  MOVFF  00,FEF
048A0:  MOVFF  01,FEC
048A4:  MOVFF  02,FEC
048A8:  MOVFF  03,FEC
048AC:  MOVF   FED,F
048AE:  MOVF   FED,F
048B0:  MOVF   FED,F
....................         unsigned int8 crc = calc_crc8(data_ptr, size);
048B2:  MOVFF  A51,AEB
048B6:  MOVFF  A50,AEA
048BA:  MOVFF  A52,AEC
048BE:  MOVLB  0
048C0:  CALL   30EA
048C4:  MOVFF  01,AE5
.................... 
....................         // CRC 書き込み
....................         write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
048C8:  MOVLB  A
048CA:  MOVF   x4F,W
048CC:  MULLW  0C
048CE:  MOVF   FF3,W
048D0:  CLRF   xEB
048D2:  MOVWF  xEA
048D4:  MOVFF  AEB,03
048D8:  MOVF   xEA,W
048DA:  MOVLB  0
048DC:  CALL   00E6
048E0:  MOVWF  00
048E2:  TBLRD*+
048E4:  MOVFF  FF5,01
048E8:  TBLRD*+
048EA:  MOVFF  FF5,02
048EE:  TBLRD*+
048F0:  MOVFF  FF5,03
048F4:  MOVFF  03,AEF
048F8:  MOVFF  02,AEE
048FC:  MOVFF  01,AED
04900:  MOVFF  00,AEC
04904:  MOVLB  A
04906:  MOVF   x4F,W
04908:  MULLW  0A
0490A:  MOVF   FF3,W
0490C:  CLRF   xF1
0490E:  MOVWF  xF0
04910:  MOVLW  22
04912:  ADDWF  xF0,W
04914:  MOVWF  FE9
04916:  MOVLW  01
04918:  ADDWFC xF1,W
0491A:  MOVWF  FEA
0491C:  MOVFF  FEF,00
04920:  MOVFF  FEC,01
04924:  MOVFF  FEC,02
04928:  MOVFF  FEC,03
0492C:  MOVF   FED,F
0492E:  MOVF   FED,F
04930:  MOVF   FED,F
04932:  MOVF   00,W
04934:  ADDWF  xEC,W
04936:  MOVWF  xE1
04938:  MOVF   01,W
0493A:  ADDWFC xED,W
0493C:  MOVWF  xE2
0493E:  MOVF   02,W
04940:  ADDWFC xEE,W
04942:  MOVWF  xE3
04944:  MOVF   03,W
04946:  ADDWFC xEF,W
04948:  MOVWF  xE4
....................         write_data_bytes(mis_fm, write_address, &crc, 1);
0494A:  MOVFF  115,AED
0494E:  MOVFF  114,AEC
04952:  MOVFF  113,AEB
04956:  MOVFF  112,AEA
0495A:  MOVFF  AE4,AF1
0495E:  MOVFF  AE3,AF0
04962:  MOVFF  AE2,AEF
04966:  MOVFF  AE1,AEE
0496A:  MOVLW  0A
0496C:  MOVWF  xF3
0496E:  MOVLW  E5
04970:  MOVWF  xF2
04972:  CLRF   xF5
04974:  MOVLW  01
04976:  MOVWF  xF4
04978:  MOVLB  0
0497A:  CALL   3F36
.................... 
....................         // カウンタ更新
....................         misf_counter_table[id].used_counter     += 1;
0497E:  MOVLB  A
04980:  MOVF   x4F,W
04982:  MULLW  0A
04984:  MOVF   FF3,W
04986:  CLRF   xEB
04988:  MOVWF  xEA
0498A:  MOVLW  22
0498C:  ADDWF  xEA,W
0498E:  MOVWF  FE9
04990:  MOVLW  01
04992:  ADDWFC xEB,W
04994:  MOVWF  FEA
04996:  MOVLW  01
04998:  ADDWF  FEF,W
0499A:  MOVWF  00
0499C:  MOVLW  00
0499E:  ADDWFC FEC,W
049A0:  MOVWF  01
049A2:  MOVLW  00
049A4:  ADDWFC FEC,W
049A6:  MOVWF  02
049A8:  MOVLW  00
049AA:  ADDWFC FEC,W
049AC:  MOVWF  03
049AE:  MOVF   FED,F
049B0:  MOVF   FED,F
049B2:  MOVF   FED,F
049B4:  MOVFF  00,FEF
049B8:  MOVFF  01,FEC
049BC:  MOVFF  02,FEC
049C0:  MOVFF  03,FEC
049C4:  MOVF   FED,F
049C6:  MOVF   FED,F
049C8:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += 1;
049CA:  MOVF   x4F,W
049CC:  MULLW  0A
049CE:  MOVF   FF3,W
049D0:  CLRF   xEB
049D2:  MOVWF  xEA
049D4:  MOVLW  04
049D6:  ADDWF  xEA,W
049D8:  MOVWF  01
049DA:  MOVLW  00
049DC:  ADDWFC xEB,W
049DE:  MOVWF  03
049E0:  MOVF   01,W
049E2:  ADDLW  22
049E4:  MOVWF  FE9
049E6:  MOVLW  01
049E8:  ADDWFC 03,W
049EA:  MOVWF  FEA
049EC:  MOVLW  01
049EE:  ADDWF  FEF,W
049F0:  MOVWF  00
049F2:  MOVLW  00
049F4:  ADDWFC FEC,W
049F6:  MOVWF  01
049F8:  MOVLW  00
049FA:  ADDWFC FEC,W
049FC:  MOVWF  02
049FE:  MOVLW  00
04A00:  ADDWFC FEC,W
04A02:  MOVWF  03
04A04:  MOVF   FED,F
04A06:  MOVF   FED,F
04A08:  MOVF   FED,F
04A0A:  MOVFF  00,FEF
04A0E:  MOVFF  01,FEC
04A12:  MOVFF  02,FEC
04A16:  MOVFF  03,FEC
04A1A:  MOVF   FED,F
04A1C:  MOVF   FED,F
04A1E:  MOVF   FED,F
....................         misf_counter_table[id].reserve_counter1  = 0;
04A20:  MOVF   x4F,W
04A22:  MULLW  0A
04A24:  MOVF   FF3,W
04A26:  CLRF   xEB
04A28:  MOVWF  xEA
04A2A:  MOVLW  08
04A2C:  ADDWF  xEA,W
04A2E:  MOVWF  01
04A30:  MOVLW  00
04A32:  ADDWFC xEB,W
04A34:  MOVWF  03
04A36:  MOVF   01,W
04A38:  ADDLW  22
04A3A:  MOVWF  FE9
04A3C:  MOVLW  01
04A3E:  ADDWFC 03,W
04A40:  MOVWF  FEA
04A42:  CLRF   FEF
.................... 
....................         // アドレステーブル更新
....................         // misf_update_address_area();
....................         return;
04A44:  MOVLB  0
04A46:  GOTO   4BD8
....................     }
.................... 
....................     // データ書き込み
....................     unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
04A4A:  MOVLB  A
04A4C:  MOVF   x4F,W
04A4E:  MULLW  0C
04A50:  MOVF   FF3,W
04A52:  CLRF   xEB
04A54:  MOVWF  xEA
04A56:  MOVFF  AEB,03
04A5A:  MOVF   xEA,W
04A5C:  MOVLB  0
04A5E:  CALL   00E6
04A62:  MOVWF  00
04A64:  TBLRD*+
04A66:  MOVFF  FF5,01
04A6A:  TBLRD*+
04A6C:  MOVFF  FF5,02
04A70:  TBLRD*+
04A72:  MOVFF  FF5,03
04A76:  MOVFF  03,AEF
04A7A:  MOVFF  02,AEE
04A7E:  MOVFF  01,AED
04A82:  MOVFF  00,AEC
04A86:  MOVLB  A
04A88:  MOVF   x4F,W
04A8A:  MULLW  0A
04A8C:  MOVF   FF3,W
04A8E:  CLRF   xF1
04A90:  MOVWF  xF0
04A92:  MOVLW  22
04A94:  ADDWF  xF0,W
04A96:  MOVWF  FE9
04A98:  MOVLW  01
04A9A:  ADDWFC xF1,W
04A9C:  MOVWF  FEA
04A9E:  MOVFF  FEF,00
04AA2:  MOVFF  FEC,01
04AA6:  MOVFF  FEC,02
04AAA:  MOVFF  FEC,03
04AAE:  MOVF   FED,F
04AB0:  MOVF   FED,F
04AB2:  MOVF   FED,F
04AB4:  MOVF   00,W
04AB6:  ADDWF  xEC,W
04AB8:  MOVWF  xE6
04ABA:  MOVF   01,W
04ABC:  ADDWFC xED,W
04ABE:  MOVWF  xE7
04AC0:  MOVF   02,W
04AC2:  ADDWFC xEE,W
04AC4:  MOVWF  xE8
04AC6:  MOVF   03,W
04AC8:  ADDWFC xEF,W
04ACA:  MOVWF  xE9
....................     // fprintf(PC, "ADDRESS 0x%08LX DATA ", write_address);
....................     write_data_bytes(mis_fm, write_address, data_ptr, size);
04ACC:  MOVFF  115,AED
04AD0:  MOVFF  114,AEC
04AD4:  MOVFF  113,AEB
04AD8:  MOVFF  112,AEA
04ADC:  MOVFF  AE9,AF1
04AE0:  MOVFF  AE8,AF0
04AE4:  MOVFF  AE7,AEF
04AE8:  MOVFF  AE6,AEE
04AEC:  MOVFF  A51,AF3
04AF0:  MOVFF  A50,AF2
04AF4:  MOVFF  A53,AF5
04AF8:  MOVFF  A52,AF4
04AFC:  MOVLB  0
04AFE:  CALL   3F36
.................... 
....................     // カウンタ更新
....................     misf_counter_table[id].used_counter     += size;
04B02:  MOVLB  A
04B04:  MOVF   x4F,W
04B06:  MULLW  0A
04B08:  MOVF   FF3,W
04B0A:  CLRF   xEB
04B0C:  MOVWF  xEA
04B0E:  MOVLW  22
04B10:  ADDWF  xEA,W
04B12:  MOVWF  FE9
04B14:  MOVLW  01
04B16:  ADDWFC xEB,W
04B18:  MOVWF  FEA
04B1A:  MOVF   x52,W
04B1C:  ADDWF  FEF,W
04B1E:  MOVWF  00
04B20:  MOVF   x53,W
04B22:  ADDWFC FEC,W
04B24:  MOVWF  01
04B26:  MOVLW  00
04B28:  ADDWFC FEC,W
04B2A:  MOVWF  02
04B2C:  MOVLW  00
04B2E:  ADDWFC FEC,W
04B30:  MOVWF  03
04B32:  MOVF   FED,F
04B34:  MOVF   FED,F
04B36:  MOVF   FED,F
04B38:  MOVFF  00,FEF
04B3C:  MOVFF  01,FEC
04B40:  MOVFF  02,FEC
04B44:  MOVFF  03,FEC
04B48:  MOVF   FED,F
04B4A:  MOVF   FED,F
04B4C:  MOVF   FED,F
....................     misf_counter_table[id].uncopied_counter += size;
04B4E:  MOVF   x4F,W
04B50:  MULLW  0A
04B52:  MOVF   FF3,W
04B54:  CLRF   xEB
04B56:  MOVWF  xEA
04B58:  MOVLW  04
04B5A:  ADDWF  xEA,W
04B5C:  MOVWF  01
04B5E:  MOVLW  00
04B60:  ADDWFC xEB,W
04B62:  MOVWF  03
04B64:  MOVF   01,W
04B66:  ADDLW  22
04B68:  MOVWF  FE9
04B6A:  MOVLW  01
04B6C:  ADDWFC 03,W
04B6E:  MOVWF  FEA
04B70:  MOVF   x52,W
04B72:  ADDWF  FEF,W
04B74:  MOVWF  00
04B76:  MOVF   x53,W
04B78:  ADDWFC FEC,W
04B7A:  MOVWF  01
04B7C:  MOVLW  00
04B7E:  ADDWFC FEC,W
04B80:  MOVWF  02
04B82:  MOVLW  00
04B84:  ADDWFC FEC,W
04B86:  MOVWF  03
04B88:  MOVF   FED,F
04B8A:  MOVF   FED,F
04B8C:  MOVF   FED,F
04B8E:  MOVFF  00,FEF
04B92:  MOVFF  01,FEC
04B96:  MOVFF  02,FEC
04B9A:  MOVFF  03,FEC
04B9E:  MOVF   FED,F
04BA0:  MOVF   FED,F
04BA2:  MOVF   FED,F
....................     misf_counter_table[id].reserve_counter1 += size;
04BA4:  MOVF   x4F,W
04BA6:  MULLW  0A
04BA8:  MOVF   FF3,W
04BAA:  CLRF   xEB
04BAC:  MOVWF  xEA
04BAE:  MOVLW  08
04BB0:  ADDWF  xEA,W
04BB2:  MOVWF  01
04BB4:  MOVLW  00
04BB6:  ADDWFC xEB,W
04BB8:  MOVWF  03
04BBA:  MOVF   01,W
04BBC:  ADDLW  22
04BBE:  MOVWF  FE9
04BC0:  MOVLW  01
04BC2:  ADDWFC 03,W
04BC4:  MOVWF  FEA
04BC6:  MOVF   FEF,W
04BC8:  ADDWF  x52,W
04BCA:  MOVWF  01
04BCC:  MOVLW  00
04BCE:  ADDWFC x53,W
04BD0:  MOVWF  03
04BD2:  MOVF   01,W
04BD4:  MOVWF  FEF
04BD6:  MOVLB  0
04BD8:  RETURN 0
.................... 
....................     // アドレステーブル更新
....................     // misf_update_address_area();
.................... }
.................... 
.................... FlashData_t make_flash_data_table(void)
04BDA:  MOVLW  0A
04BDC:  MOVLB  A
04BDE:  MOVWF  x4B
04BE0:  MOVLW  0A
04BE2:  MOVWF  x4A
.................... {
....................     FlashData_t flash_data;
....................     FlashData_t *flash_data_ptr = &flash_data;
.................... 
....................     // 初期化
....................     memset(flash_data_ptr->bytes, 0, sizeof(flash_data_ptr->bytes));
04BE4:  MOVF   x4A,W
04BE6:  MOVWF  01
04BE8:  MOVF   x4B,W
04BEA:  MOVWF  03
04BEC:  MOVF   01,W
04BEE:  MOVWF  x4C
04BF0:  MOVFF  03,A4D
04BF4:  MOVFF  A4D,FEA
04BF8:  MOVFF  A4C,FE9
04BFC:  CLRF   00
04BFE:  CLRF   02
04C00:  MOVLW  40
04C02:  MOVWF  01
04C04:  MOVLB  0
04C06:  CALL   234C
.................... 
....................     flash_data_ptr->packet.payload.logdata.piclog = misf_counter_table[FLASH_ID_PICLOG];
04C0A:  MOVLB  A
04C0C:  MOVF   x4A,W
04C0E:  MOVWF  FE9
04C10:  MOVF   x4B,W
04C12:  MOVWF  FEA
04C14:  MOVLW  01
04C16:  MOVWF  FE2
04C18:  MOVLW  2C
04C1A:  MOVWF  FE1
04C1C:  MOVLW  0A
04C1E:  MOVWF  01
04C20:  MOVLB  0
04C22:  MOVFF  FE6,FEE
04C26:  DECFSZ 01,F
04C28:  GOTO   4C22
....................     flash_data_ptr->packet.payload.logdata.environment = misf_counter_table[FLASH_ID_ENVIRONMENT];
04C2C:  MOVLW  0A
04C2E:  MOVLB  A
04C30:  ADDWF  x4A,W
04C32:  MOVWF  FE9
04C34:  MOVLW  00
04C36:  ADDWFC x4B,W
04C38:  MOVWF  FEA
04C3A:  MOVLW  01
04C3C:  MOVWF  FE2
04C3E:  MOVLW  36
04C40:  MOVWF  FE1
04C42:  MOVLW  0A
04C44:  MOVWF  01
04C46:  MOVLB  0
04C48:  MOVFF  FE6,FEE
04C4C:  DECFSZ 01,F
04C4E:  GOTO   4C48
....................     flash_data_ptr->packet.payload.logdata.iv1_header = misf_counter_table[FLASH_ID_IV1_HEADER];
04C52:  MOVLW  14
04C54:  MOVLB  A
04C56:  ADDWF  x4A,W
04C58:  MOVWF  FE9
04C5A:  MOVLW  00
04C5C:  ADDWFC x4B,W
04C5E:  MOVWF  FEA
04C60:  MOVLW  01
04C62:  MOVWF  FE2
04C64:  MOVLW  40
04C66:  MOVWF  FE1
04C68:  MOVLW  0A
04C6A:  MOVWF  01
04C6C:  MOVLB  0
04C6E:  MOVFF  FE6,FEE
04C72:  DECFSZ 01,F
04C74:  GOTO   4C6E
....................     flash_data_ptr->packet.payload.logdata.iv1_data = misf_counter_table[FLASH_ID_IV1_DATA];
04C78:  MOVLW  1E
04C7A:  MOVLB  A
04C7C:  ADDWF  x4A,W
04C7E:  MOVWF  FE9
04C80:  MOVLW  00
04C82:  ADDWFC x4B,W
04C84:  MOVWF  FEA
04C86:  MOVLW  01
04C88:  MOVWF  FE2
04C8A:  MOVLW  4A
04C8C:  MOVWF  FE1
04C8E:  MOVLW  0A
04C90:  MOVWF  01
04C92:  MOVLB  0
04C94:  MOVFF  FE6,FEE
04C98:  DECFSZ 01,F
04C9A:  GOTO   4C94
....................     flash_data_ptr->packet.payload.logdata.iv2_header = misf_counter_table[FLASH_ID_IV2_HEADER];
04C9E:  MOVLW  28
04CA0:  MOVLB  A
04CA2:  ADDWF  x4A,W
04CA4:  MOVWF  FE9
04CA6:  MOVLW  00
04CA8:  ADDWFC x4B,W
04CAA:  MOVWF  FEA
04CAC:  MOVLW  01
04CAE:  MOVWF  FE2
04CB0:  MOVLW  54
04CB2:  MOVWF  FE1
04CB4:  MOVLW  0A
04CB6:  MOVWF  01
04CB8:  MOVLB  0
04CBA:  MOVFF  FE6,FEE
04CBE:  DECFSZ 01,F
04CC0:  GOTO   4CBA
....................     flash_data_ptr->packet.payload.logdata.iv2_data = misf_counter_table[FLASH_ID_IV2_DATA];
04CC4:  MOVLW  32
04CC6:  MOVLB  A
04CC8:  ADDWF  x4A,W
04CCA:  MOVWF  FE9
04CCC:  MOVLW  00
04CCE:  ADDWFC x4B,W
04CD0:  MOVWF  FEA
04CD2:  MOVLW  01
04CD4:  MOVWF  FE2
04CD6:  MOVLW  5E
04CD8:  MOVWF  FE1
04CDA:  MOVLW  0A
04CDC:  MOVWF  01
04CDE:  MOVLB  0
04CE0:  MOVFF  FE6,FEE
04CE4:  DECFSZ 01,F
04CE6:  GOTO   4CE0
.................... 
....................     // CRC 計算
....................     flash_data_ptr->packet.crc = calc_crc8(flash_data_ptr->bytes, PACKET_SIZE - 1);
04CEA:  MOVLW  3F
04CEC:  MOVLB  A
04CEE:  ADDWF  x4A,W
04CF0:  MOVWF  01
04CF2:  MOVLW  00
04CF4:  ADDWFC x4B,W
04CF6:  MOVWF  03
04CF8:  MOVF   01,W
04CFA:  MOVWF  x4C
04CFC:  MOVFF  03,A4D
04D00:  MOVF   x4A,W
04D02:  MOVWF  01
04D04:  MOVF   x4B,W
04D06:  MOVWF  03
04D08:  MOVF   01,W
04D0A:  MOVWF  x4E
04D0C:  MOVFF  03,A4F
04D10:  MOVFF  A4F,AEB
04D14:  MOVFF  A4E,AEA
04D18:  MOVLW  3F
04D1A:  MOVWF  xEC
04D1C:  MOVLB  0
04D1E:  CALL   30EA
04D22:  MOVFF  A4D,FEA
04D26:  MOVFF  A4C,FE9
04D2A:  MOVFF  01,FEF
.................... 
....................     return flash_data;
04D2E:  MOVLW  0A
04D30:  MOVWF  01
04D32:  MOVLW  0A
04D34:  MOVWF  02
04D36:  GOTO   5062 (RETURN)
.................... }
.................... 
.................... void misf_update_address_area(void)
*
0505E:  GOTO   4BDA
05062:  MOVFF  02,03
05066:  MOVF   01,W
05068:  MOVWF  FE1
0506A:  MOVFF  03,FE2
0506E:  MOVLW  09
05070:  MOVWF  FEA
05072:  MOVLW  C2
05074:  MOVWF  FE9
05076:  MOVLW  40
05078:  MOVWF  01
0507A:  MOVFF  FE6,FEE
0507E:  DECFSZ 01,F
05080:  GOTO   507A
05084:  MOVLW  09
05086:  MOVLB  A
05088:  MOVWF  x03
0508A:  MOVLW  C2
0508C:  MOVWF  x02
.................... {
....................     FlashData_t flash_data = make_flash_data_table();
....................     FlashData_t *flash_data_ptr = &flash_data;
.................... 
....................     subsector_4kByte_erase(mis_fm, MISF_ADDRESS_TABLE[FLASH_ID_DATA_TABLE].start);
0508E:  MOVFF  115,A07
05092:  MOVFF  114,A06
05096:  MOVFF  113,A05
0509A:  MOVFF  112,A04
0509E:  CLRF   x0B
050A0:  CLRF   x0A
050A2:  CLRF   x09
050A4:  CLRF   x08
050A6:  MOVLB  0
050A8:  CALL   4D3A
....................     write_data_bytes(mis_fm, MISF_ADDRESS_TABLE[FLASH_ID_DATA_TABLE].start, flash_data_ptr->bytes, PACKET_SIZE);
050AC:  MOVLB  A
050AE:  MOVF   x02,W
050B0:  MOVWF  01
050B2:  MOVF   x03,W
050B4:  MOVWF  03
050B6:  MOVF   01,W
050B8:  MOVWF  x04
050BA:  MOVFF  03,A05
050BE:  MOVFF  115,AED
050C2:  MOVFF  114,AEC
050C6:  MOVFF  113,AEB
050CA:  MOVFF  112,AEA
050CE:  CLRF   xF1
050D0:  CLRF   xF0
050D2:  CLRF   xEF
050D4:  CLRF   xEE
050D6:  MOVFF  A05,AF3
050DA:  MOVFF  A04,AF2
050DE:  CLRF   xF5
050E0:  MOVLW  40
050E2:  MOVWF  xF4
050E4:  MOVLB  0
050E6:  CALL   3F36
050EA:  RETURN 0
.................... }
.................... 
.................... 
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode)
.................... {
....................     FlashOperationStruct data;
....................     // 構造体の初期化
....................     data.mission_id = mission_id;
....................     data.func_type = func_type;
....................     data.write_mode = write_mode;
....................     data.source_type = SOURCE_MISF_UNCOPIED;
....................     enqueue_flash_operation(&data);
.................... }
.................... 
.................... void write_smf_header(smf_data_table_t *smf_data_table)
.................... {
.................... 
....................     int8 readdata[PACKET_SIZE];
....................     int8 retry_count;
....................     int1 crc_valid = 0;
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
....................         if (is_crc_valid(readdata, PACKET_SIZE-1))
....................         {
....................             crc_valid = 1; // FIX: フラグ更新
....................             fprintf(PC, "CRC verification passed on attempt %d\r\n", retry_count + 1);
....................             break;
....................         }
....................     }
....................     if (!crc_valid)
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
....................         // return; 
....................     }
.................... }
.................... 
.................... 
.................... 
.................... // End of file
.................... 
.................... 
.................... // アプリケーション実装ファイル
.................... #include "application/cigs_excute_mission.c"
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../hal/cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/value_status.h"    // ステータス定義
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "cigs_excute_mission.h"                  // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... // #include "../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... void handle_recieve_time(Command *command);
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_PRINT 0xA3
.................... #define ID_MEAS_IV_PRINT 0xA4
.................... #define ID_MEAS_PD 0xA5
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_pd(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_1sweep(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_port1(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_port2(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int16 interval;
....................     unsigned int16 pd_threshold;
....................     unsigned int16 meas_time;
....................     unsigned int16 log_threshold;
....................     unsigned int16 sweep_limit;
.................... } meas_iv_param_t;
.................... 
.................... 
.................... // MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... meas_iv_param_t make_meas_iv_cmd(int8 *uplinkcmd_ptr);
.................... void print_meas_iv_cmd(meas_iv_param_t *cmd_ptr);
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "../domain/cigs_smf.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #include "../hal/cigs_config.h" // int8,int32 型など(CCS C) 依存
.................... #include "cigs_flash.h"       // MISF_ADDRESS_TABLE, misf_counter_table 依存
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... extern int1 smf_update_flag[10]; // SMF更新フラグ
.................... 
.................... 
.................... // SMF管理用構造体
.................... typedef struct {
....................     ADDRESS_AREA_T header_area;
....................     ADDRESS_AREA_T data_area;
.................... } SMF_AREA_T;
.................... #define SMF_ID_COUNT 7
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 reserved;
.................... } SMF_PARTITION;
.................... 
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         SMF_PARTITION headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table);
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/communication/typedef_content.h"    // 通信ライブラリ
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06,
....................     TIME_REQ          = 0x07
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.h"      // ミッションツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../domain/cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/communication_driver.h" // 通信ドライバー
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *uplink_cmt_ptr)
*
0F61E:  MOVLB  1
0F620:  MOVF   x9F,W
0F622:  MOVWF  FE9
0F624:  MOVF   xA0,W
0F626:  MOVWF  FEA
0F628:  MOVFF  FEF,1A1
.................... {
....................    // record to executed mission list
....................    int8 command_id = uplink_cmt_ptr[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
0F62C:  MOVLW  3C
0F62E:  MOVWF  FF6
0F630:  MOVLW  12
0F632:  MOVWF  FF7
0F634:  MOVLW  00
0F636:  MOVWF  FF8
0F638:  MOVLB  0
0F63A:  CALL   22DC
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
0F63E:  MOVLW  82
0F640:  MOVWF  FF6
0F642:  MOVLW  12
0F644:  MOVWF  FF7
0F646:  MOVLW  00
0F648:  MOVWF  FF8
0F64A:  MOVLW  0C
0F64C:  MOVLB  9
0F64E:  MOVWF  xC2
0F650:  MOVLB  0
0F652:  CALL   2312
0F656:  MOVFF  1A1,9E8
0F65A:  MOVLW  37
0F65C:  MOVLB  9
0F65E:  MOVWF  xE9
0F660:  MOVLB  0
0F662:  CALL   2542
0F666:  MOVLW  90
0F668:  MOVWF  FF6
0F66A:  MOVLW  12
0F66C:  MOVWF  FF7
0F66E:  MOVLW  00
0F670:  MOVWF  FF8
0F672:  MOVLW  04
0F674:  MOVLB  9
0F676:  MOVWF  xC2
0F678:  MOVLB  0
0F67A:  CALL   2312
....................    switch(command_id)
0F67E:  MOVLB  1
0F680:  MOVF   xA1,W
0F682:  XORLW  10
0F684:  MOVLB  0
0F686:  BTFSC  FD8.2
0F688:  GOTO   F788
0F68C:  XORLW  01
0F68E:  BTFSC  FD8.2
0F690:  GOTO   F78C
0F694:  XORLW  03
0F696:  BTFSC  FD8.2
0F698:  GOTO   F790
0F69C:  XORLW  13
0F69E:  BTFSC  FD8.2
0F6A0:  GOTO   F794
0F6A4:  XORLW  12
0F6A6:  BTFSC  FD8.2
0F6A8:  GOTO   F798
0F6AC:  XORLW  93
0F6AE:  BTFSC  FD8.2
0F6B0:  GOTO   F79C
0F6B4:  XORLW  01
0F6B6:  BTFSC  FD8.2
0F6B8:  GOTO   F7AC
0F6BC:  XORLW  03
0F6BE:  BTFSC  FD8.2
0F6C0:  GOTO   F7BC
0F6C4:  XORLW  01
0F6C6:  BTFSC  FD8.2
0F6C8:  GOTO   F7CC
0F6CC:  XORLW  07
0F6CE:  BTFSC  FD8.2
0F6D0:  GOTO   F7DC
0F6D4:  XORLW  01
0F6D6:  BTFSC  FD8.2
0F6D8:  GOTO   F7EC
0F6DC:  XORLW  03
0F6DE:  BTFSC  FD8.2
0F6E0:  GOTO   F7FC
0F6E4:  XORLW  01
0F6E6:  BTFSC  FD8.2
0F6E8:  GOTO   F80C
0F6EC:  XORLW  0F
0F6EE:  BTFSC  FD8.2
0F6F0:  GOTO   F81C
0F6F4:  XORLW  18
0F6F6:  BTFSC  FD8.2
0F6F8:  GOTO   F82C
0F6FC:  XORLW  01
0F6FE:  BTFSC  FD8.2
0F700:  GOTO   F83C
0F704:  XORLW  03
0F706:  BTFSC  FD8.2
0F708:  GOTO   F84C
0F70C:  XORLW  01
0F70E:  BTFSC  FD8.2
0F710:  GOTO   F85C
0F714:  XORLW  07
0F716:  BTFSC  FD8.2
0F718:  GOTO   F86C
0F71C:  XORLW  01
0F71E:  BTFSC  FD8.2
0F720:  GOTO   F87C
0F724:  XORLW  03
0F726:  BTFSC  FD8.2
0F728:  GOTO   F88C
0F72C:  XORLW  36
0F72E:  BTFSC  FD8.2
0F730:  GOTO   F894
0F734:  XORLW  01
0F736:  BTFSC  FD8.2
0F738:  GOTO   F8A4
0F73C:  XORLW  03
0F73E:  BTFSC  FD8.2
0F740:  GOTO   F8B4
0F744:  XORLW  01
0F746:  BTFSC  FD8.2
0F748:  GOTO   F8C4
0F74C:  XORLW  07
0F74E:  BTFSC  FD8.2
0F750:  GOTO   F8C8
0F754:  XORLW  01
0F756:  BTFSC  FD8.2
0F758:  GOTO   F8D0
0F75C:  XORLW  03
0F75E:  BTFSC  FD8.2
0F760:  GOTO   F8E0
0F764:  XORLW  01
0F766:  BTFSC  FD8.2
0F768:  GOTO   F9BE
0F76C:  XORLW  0F
0F76E:  BTFSC  FD8.2
0F770:  GOTO   F9D6
0F774:  XORLW  01
0F776:  BTFSC  FD8.2
0F778:  GOTO   F9EE
0F77C:  XORLW  19
0F77E:  BTFSC  FD8.2
0F780:  GOTO   FA06
0F784:  GOTO   FC12
....................    {
....................       case 0x10: // example command
....................          // mode_dummy(content);
....................          //mode_iv_meas_adc();
....................          break;
0F788:  GOTO   FC26
....................       case 0x11:
....................          // mode_test_iv(content);
....................          break;
0F78C:  GOTO   FC26
....................       case 0x12:
....................          // test_adc();
....................          break;
0F790:  GOTO   FC26
....................       case 0x01:
....................          //mode_measure(content); // check if the flash is connected
....................          break;
0F794:  GOTO   FC26
....................       case 0x13:
....................          // mode_sweep_port1(content[1]); // Sweep Port 1 with the given step
....................          break;
0F798:  GOTO   FC26
.................... 
....................       // ___________________ MISF Commands ______________________
....................       case ID_MISF_ERASE_ALL:
....................          mode_misf_erase_all(uplink_cmt_ptr);
0F79C:  MOVFF  1A0,1CB
0F7A0:  MOVFF  19F,1CA
0F7A4:  CALL   5C76
....................          break;
0F7A8:  GOTO   FC26
....................       case ID_MISF_ERASE_1SECTOR:
....................          mode_misf_erase_1sector(uplink_cmt_ptr);
0F7AC:  MOVFF  1A0,1B0
0F7B0:  MOVFF  19F,1AF
0F7B4:  GOTO   5D54
....................          break;
0F7B8:  GOTO   FC26
....................       case ID_MISF_ERASE_4kByte_SUBSECTOR:
....................          mode_misf_erase_4kbyte_subsector(uplink_cmt_ptr);
0F7BC:  MOVFF  1A0,1B0
0F7C0:  MOVFF  19F,1AF
0F7C4:  GOTO   5EEC
....................          break;
0F7C8:  GOTO   FC26
....................       case ID_MISF_ERASE_64kByte_SUBSECTOR:
....................          mode_misf_erase_64kbyte_subsector(uplink_cmt_ptr);
0F7CC:  MOVFF  1A0,1B0
0F7D0:  MOVFF  19F,1AF
0F7D4:  GOTO   6084
....................          break;
0F7D8:  GOTO   FC26
....................       case ID_MISF_WRITE_DEMO:
....................          mode_misf_write_demo(uplink_cmt_ptr);
0F7DC:  MOVFF  1A0,1B0
0F7E0:  MOVFF  19F,1AF
0F7E4:  GOTO   63D8
....................          break;
0F7E8:  GOTO   FC26
....................       case ID_MISF_WRITE_4kByte_SUBSECTOR:
....................          mode_misf_write_4kbyte_subsector(uplink_cmt_ptr);
0F7EC:  MOVFF  1A0,1B0
0F7F0:  MOVFF  19F,1AF
0F7F4:  GOTO   6A52
....................          break;
0F7F8:  GOTO   FC26
....................       case ID_MISF_READ:
....................          mode_misf_read(uplink_cmt_ptr);
0F7FC:  MOVFF  1A0,1B0
0F800:  MOVFF  19F,1AF
0F804:  GOTO   6ACA
....................          break;
0F808:  GOTO   FC26
....................       case ID_MISF_READ_ADDRESS:
....................          mode_misf_read_address(uplink_cmt_ptr);
0F80C:  MOVFF  1A0,1B0
0F810:  MOVFF  19F,1AF
0F814:  GOTO   72CE
....................          break;
0F818:  GOTO   FC26
....................       case ID_MISF_ERASE_AND_RESET:
....................          mode_misf_erase_and_reset(uplink_cmt_ptr);
0F81C:  MOVFF  1A0,1C9
0F820:  MOVFF  19F,1C8
0F824:  CALL   75D6
....................          break;
0F828:  GOTO   FC26
.................... 
....................       // ___________________ SMF Commands ______________________
....................       case ID_SMF_COPY:
....................          mode_smf_copy(uplink_cmt_ptr);
0F82C:  MOVFF  1A0,1B0
0F830:  MOVFF  19F,1AF
0F834:  GOTO   762C
....................          break;
0F838:  GOTO   FC26
....................       case ID_SMF_READ:
....................          mode_smf_read(uplink_cmt_ptr);
0F83C:  MOVFF  1A0,1B0
0F840:  MOVFF  19F,1AF
0F844:  GOTO   7708
....................          break;
0F848:  GOTO   FC26
....................       case ID_SMF_ERASE:
....................          mode_smf_erase(uplink_cmt_ptr);
0F84C:  MOVFF  1A0,1B0
0F850:  MOVFF  19F,1AF
0F854:  GOTO   79DA
....................          break;
0F858:  GOTO   FC26
....................       case ID_SMF_COPY_FORCE:
....................          mode_smf_address_reset(uplink_cmt_ptr);
0F85C:  MOVFF  1A0,1B0
0F860:  MOVFF  19F,1AF
0F864:  GOTO   7BC4
....................          break;
0F868:  GOTO   FC26
....................       case ID_SMF_READ_FORCE:
....................          mode_smf_read_force(uplink_cmt_ptr);
0F86C:  MOVFF  1A0,1B0
0F870:  MOVFF  19F,1AF
0F874:  GOTO   7D42
....................          break;
0F878:  GOTO   FC26
....................       case ID_SMF_ERASE_FORCE:
....................          mode_smf_erase_force(uplink_cmt_ptr);
0F87C:  MOVFF  1A0,1B0
0F880:  MOVFF  19F,1AF
0F884:  GOTO   8154
....................          break;
0F888:  GOTO   FC26
....................       case ID_SMF_RESET:
....................          smf_data_table_init();
0F88C:  CALL   7A42
....................          break;
0F890:  GOTO   FC26
....................          
....................          
....................       // ________________MEAS________________________________
....................       case ID_MEAS_IV:
....................          mode_meas_iv(uplink_cmt_ptr);
0F894:  MOVFF  1A0,1B0
0F898:  MOVFF  19F,1AF
0F89C:  GOTO   AA8C
....................          break;
0F8A0:  GOTO   FC26
....................       case ID_MEAS_DEBUG:
....................          mode_meas_iv_debug(uplink_cmt_ptr);
0F8A4:  MOVFF  1A0,1B0
0F8A8:  MOVFF  19F,1AF
0F8AC:  GOTO   C7DA
....................          break;
0F8B0:  GOTO   FC26
....................       case ID_MEAS_ENV:
....................          mode_meas_env(uplink_cmt_ptr);
0F8B4:  MOVFF  1A0,1B0
0F8B8:  MOVFF  19F,1AF
0F8BC:  GOTO   CABC
....................          break;
0F8C0:  GOTO   FC26
....................       case ID_MEAS_ENV_PRINT:
....................          // mode_meas_env_debug(uplink_cmt_ptr);
....................          break;
0F8C4:  GOTO   FC26
....................       case ID_MEAS_IV_PRINT:
....................          sweep_with_print();
0F8C8:  GOTO   CBA4
....................          break;
0F8CC:  GOTO   FC26
....................       case ID_MEAS_PD:
....................          mode_meas_pd(uplink_cmt_ptr);
0F8D0:  MOVFF  1A0,1B0
0F8D4:  MOVFF  19F,1AF
0F8D8:  GOTO   E320
....................          break;
0F8DC:  GOTO   FC26
....................       case 0xA6:
....................          connect_port1();
0F8E0:  CALL   5214
....................          connect_port2();
0F8E4:  CALL   521C
....................          unsigned int16 cell1_curr;
....................          unsigned int16 cell2_curr;
....................          mcp4901_1_write(10); 
0F8E8:  MOVLB  9
0F8EA:  CLRF   xDD
0F8EC:  MOVLW  0A
0F8EE:  MOVWF  xDC
0F8F0:  MOVLB  0
0F8F2:  CALL   2872
....................          mcp4901_2_write(10);
0F8F6:  MOVLB  9
0F8F8:  CLRF   xDD
0F8FA:  MOVLW  0A
0F8FC:  MOVWF  xDC
0F8FE:  MOVLB  0
0F900:  CALL   28B0
....................          while (TRUE)
....................          {  
....................             cell1_curr = ad7490_read(ADC_CIGS1_CURR);
0F904:  MOVLW  01
0F906:  MOVLB  9
0F908:  MOVWF  xEE
0F90A:  MOVLB  0
0F90C:  CALL   24C2
0F910:  MOVFF  02,1A3
0F914:  MOVFF  01,1A2
....................             cell2_curr = ad7490_read(ADC_CIGS2_CURR);
0F918:  MOVLW  05
0F91A:  MOVLB  9
0F91C:  MOVWF  xEE
0F91E:  MOVLB  0
0F920:  CALL   24C2
0F924:  MOVFF  02,1A5
0F928:  MOVFF  01,1A4
....................             fprintf(PC, "%04LX,%04LX\r\n", cell1_curr, cell2_curr);
0F92C:  MOVFF  1A3,9E8
0F930:  MOVLW  37
0F932:  MOVLB  9
0F934:  MOVWF  xE9
0F936:  MOVLB  0
0F938:  CALL   2542
0F93C:  MOVFF  1A2,9E8
0F940:  MOVLW  37
0F942:  MOVLB  9
0F944:  MOVWF  xE9
0F946:  MOVLB  0
0F948:  CALL   2542
0F94C:  MOVLW  2C
0F94E:  BTFSS  FA6.6
0F950:  GOTO   F94E
0F954:  MOVLB  E
0F956:  MOVWF  xF9
0F958:  MOVFF  1A5,9E8
0F95C:  MOVLW  37
0F95E:  MOVLB  9
0F960:  MOVWF  xE9
0F962:  MOVLB  0
0F964:  CALL   2542
0F968:  MOVFF  1A4,9E8
0F96C:  MOVLW  37
0F96E:  MOVLB  9
0F970:  MOVWF  xE9
0F972:  MOVLB  0
0F974:  CALL   2542
0F978:  MOVLW  0D
0F97A:  BTFSS  FA6.6
0F97C:  GOTO   F97A
0F980:  MOVLB  E
0F982:  MOVWF  xF9
0F984:  MOVLW  0A
0F986:  MOVLB  0
0F988:  BTFSS  FA6.6
0F98A:  GOTO   F988
0F98E:  MOVLB  E
0F990:  MOVWF  xF9
....................             delay_ms(1000);
0F992:  MOVLW  04
0F994:  MOVLB  1
0F996:  MOVWF  xAF
0F998:  MOVLB  0
0F99A:  MOVLW  FA
0F99C:  MOVLB  B
0F99E:  MOVWF  x02
0F9A0:  MOVLB  0
0F9A2:  CALL   22AE
0F9A6:  MOVLB  1
0F9A8:  DECFSZ xAF,F
0F9AA:  BRA    F9B0
0F9AC:  BRA    F9B4
0F9AE:  MOVLB  0
0F9B0:  MOVLB  0
0F9B2:  BRA    F99A
0F9B4:  MOVLB  0
0F9B6:  GOTO   F904
....................          }
....................          break;
0F9BA:  GOTO   FC26
....................       case 0xA7:
....................          connect_port1();
0F9BE:  CALL   5214
....................          connect_port2();
0F9C2:  CALL   521C
....................          mode_meas_iv_1sweep(uplink_cmt_ptr);
0F9C6:  MOVFF  1A0,1B0
0F9CA:  MOVFF  19F,1AF
0F9CE:  GOTO   E518
....................          break;
0F9D2:  GOTO   FC26
.................... 
....................       case 0xA8:
....................          connect_port1();
0F9D6:  CALL   5214
....................          connect_port2();
0F9DA:  CALL   521C
....................          mode_meas_iv_port1(uplink_cmt_ptr);
0F9DE:  MOVFF  1A0,1B0
0F9E2:  MOVFF  19F,1AF
0F9E6:  GOTO   F012
....................          break;
0F9EA:  GOTO   FC26
....................       
....................       case 0xA9:
....................          connect_port1();
0F9EE:  CALL   5214
....................          connect_port2();
0F9F2:  CALL   521C
....................          mode_meas_iv_port2(uplink_cmt_ptr);
0F9F6:  MOVFF  1A0,1B0
0F9FA:  MOVFF  19F,1AF
0F9FE:  GOTO   F296
....................       break;
0FA02:  GOTO   FC26
.................... 
....................       // ________________Others______________________________
....................       case 0xB0:
....................          unsigned int32 total_seconds = get_current_sec();
....................          unsigned int16 days;
....................          unsigned int8 hours, minutes, seconds;
0FA06:  CALL   3C18
0FA0A:  MOVFF  03,1A9
0FA0E:  MOVFF  02,1A8
0FA12:  MOVFF  01,1A7
0FA16:  MOVFF  00,1A6
....................          days    = total_seconds / 86400;
0FA1A:  BCF    FD8.1
0FA1C:  MOVFF  1A9,215
0FA20:  MOVFF  1A8,214
0FA24:  MOVFF  1A7,213
0FA28:  MOVFF  1A6,212
0FA2C:  MOVLB  2
0FA2E:  CLRF   x19
0FA30:  MOVLW  01
0FA32:  MOVWF  x18
0FA34:  MOVLW  51
0FA36:  MOVWF  x17
0FA38:  MOVLW  80
0FA3A:  MOVWF  x16
0FA3C:  MOVLB  0
0FA3E:  CALL   61F8
0FA42:  MOVFF  01,1AB
0FA46:  MOVFF  00,1AA
....................          hours   = (total_seconds % 86400) / 3600;
0FA4A:  BSF    FD8.1
0FA4C:  MOVLW  01
0FA4E:  MOVWF  FEA
0FA50:  MOVLW  AF
0FA52:  MOVWF  FE9
0FA54:  MOVFF  1A9,215
0FA58:  MOVFF  1A8,214
0FA5C:  MOVFF  1A7,213
0FA60:  MOVFF  1A6,212
0FA64:  MOVLB  2
0FA66:  CLRF   x19
0FA68:  MOVLW  01
0FA6A:  MOVWF  x18
0FA6C:  MOVLW  51
0FA6E:  MOVWF  x17
0FA70:  MOVLW  80
0FA72:  MOVWF  x16
0FA74:  MOVLB  0
0FA76:  CALL   61F8
0FA7A:  MOVFF  1B2,1B6
0FA7E:  MOVFF  1B1,1B5
0FA82:  MOVFF  1B0,1B4
0FA86:  MOVFF  1AF,1B3
0FA8A:  MOVFF  FEA,1B8
0FA8E:  MOVFF  FE9,1B7
0FA92:  BCF    FD8.1
0FA94:  MOVFF  1B6,215
0FA98:  MOVFF  1B5,214
0FA9C:  MOVFF  1B4,213
0FAA0:  MOVFF  1B3,212
0FAA4:  MOVLB  2
0FAA6:  CLRF   x19
0FAA8:  CLRF   x18
0FAAA:  MOVLW  0E
0FAAC:  MOVWF  x17
0FAAE:  MOVLW  10
0FAB0:  MOVWF  x16
0FAB2:  MOVLB  0
0FAB4:  CALL   61F8
0FAB8:  MOVFF  1B8,FEA
0FABC:  MOVFF  1B7,FE9
0FAC0:  MOVFF  00,1AC
....................          minutes = (total_seconds % 3600) / 60;
0FAC4:  BSF    FD8.1
0FAC6:  MOVLW  01
0FAC8:  MOVWF  FEA
0FACA:  MOVLW  AF
0FACC:  MOVWF  FE9
0FACE:  MOVFF  1A9,215
0FAD2:  MOVFF  1A8,214
0FAD6:  MOVFF  1A7,213
0FADA:  MOVFF  1A6,212
0FADE:  MOVLB  2
0FAE0:  CLRF   x19
0FAE2:  CLRF   x18
0FAE4:  MOVLW  0E
0FAE6:  MOVWF  x17
0FAE8:  MOVLW  10
0FAEA:  MOVWF  x16
0FAEC:  MOVLB  0
0FAEE:  CALL   61F8
0FAF2:  MOVFF  1B2,1B6
0FAF6:  MOVFF  1B1,1B5
0FAFA:  MOVFF  1B0,1B4
0FAFE:  MOVFF  1AF,1B3
0FB02:  MOVFF  FEA,1B8
0FB06:  MOVFF  FE9,1B7
0FB0A:  BCF    FD8.1
0FB0C:  MOVFF  1B6,215
0FB10:  MOVFF  1B5,214
0FB14:  MOVFF  1B4,213
0FB18:  MOVFF  1B3,212
0FB1C:  MOVLB  2
0FB1E:  CLRF   x19
0FB20:  CLRF   x18
0FB22:  CLRF   x17
0FB24:  MOVLW  3C
0FB26:  MOVWF  x16
0FB28:  MOVLB  0
0FB2A:  CALL   61F8
0FB2E:  MOVFF  1B8,FEA
0FB32:  MOVFF  1B7,FE9
0FB36:  MOVFF  00,1AD
....................          seconds = total_seconds % 60;
0FB3A:  BSF    FD8.1
0FB3C:  MOVLW  01
0FB3E:  MOVWF  FEA
0FB40:  MOVLW  AF
0FB42:  MOVWF  FE9
0FB44:  MOVFF  1A9,215
0FB48:  MOVFF  1A8,214
0FB4C:  MOVFF  1A7,213
0FB50:  MOVFF  1A6,212
0FB54:  MOVLB  2
0FB56:  CLRF   x19
0FB58:  CLRF   x18
0FB5A:  CLRF   x17
0FB5C:  MOVLW  3C
0FB5E:  MOVWF  x16
0FB60:  MOVLB  0
0FB62:  CALL   61F8
0FB66:  MOVFF  1AF,1AE
.................... 
....................          fprintf(PC, "\t\t-> Get time to %lu days, %02u:%02u:%02u\r\n",
....................                days, hours, minutes, seconds);
0FB6A:  MOVLW  96
0FB6C:  MOVWF  FF6
0FB6E:  MOVLW  12
0FB70:  MOVWF  FF7
0FB72:  MOVLW  00
0FB74:  MOVWF  FF8
0FB76:  MOVLW  11
0FB78:  MOVLB  9
0FB7A:  MOVWF  xC2
0FB7C:  MOVLB  0
0FB7E:  CALL   2312
0FB82:  MOVLW  10
0FB84:  MOVWF  FE9
0FB86:  MOVFF  1AB,1EA
0FB8A:  MOVFF  1AA,1E9
0FB8E:  CALL   8E62
0FB92:  MOVLW  AA
0FB94:  MOVWF  FF6
0FB96:  MOVLW  12
0FB98:  MOVWF  FF7
0FB9A:  MOVLW  00
0FB9C:  MOVWF  FF8
0FB9E:  MOVLW  07
0FBA0:  MOVLB  9
0FBA2:  MOVWF  xC2
0FBA4:  MOVLB  0
0FBA6:  CALL   2312
0FBAA:  MOVFF  1AC,1AF
0FBAE:  MOVLW  01
0FBB0:  MOVLB  1
0FBB2:  MOVWF  xB0
0FBB4:  MOVLB  0
0FBB6:  CALL   F562
0FBBA:  MOVLW  3A
0FBBC:  BTFSS  FA6.6
0FBBE:  GOTO   FBBC
0FBC2:  MOVLB  E
0FBC4:  MOVWF  xF9
0FBC6:  MOVFF  1AD,1AF
0FBCA:  MOVLW  01
0FBCC:  MOVLB  1
0FBCE:  MOVWF  xB0
0FBD0:  MOVLB  0
0FBD2:  CALL   F562
0FBD6:  MOVLW  3A
0FBD8:  BTFSS  FA6.6
0FBDA:  GOTO   FBD8
0FBDE:  MOVLB  E
0FBE0:  MOVWF  xF9
0FBE2:  MOVFF  1AE,1AF
0FBE6:  MOVLW  01
0FBE8:  MOVLB  1
0FBEA:  MOVWF  xB0
0FBEC:  MOVLB  0
0FBEE:  CALL   F562
0FBF2:  MOVLW  0D
0FBF4:  BTFSS  FA6.6
0FBF6:  GOTO   FBF4
0FBFA:  MOVLB  E
0FBFC:  MOVWF  xF9
0FBFE:  MOVLW  0A
0FC00:  MOVLB  0
0FC02:  BTFSS  FA6.6
0FC04:  GOTO   FC02
0FC08:  MOVLB  E
0FC0A:  MOVWF  xF9
....................          break;
0FC0C:  MOVLB  0
0FC0E:  GOTO   FC26
.................... 
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
0FC12:  MOVLW  C2
0FC14:  MOVWF  FF6
0FC16:  MOVLW  12
0FC18:  MOVWF  FF7
0FC1A:  MOVLW  00
0FC1C:  MOVWF  FF8
0FC1E:  CALL   22DC
....................          break;
0FC22:  GOTO   FC26
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
0FC26:  MOVLW  DA
0FC28:  MOVWF  FF6
0FC2A:  MOVLW  12
0FC2C:  MOVWF  FF7
0FC2E:  MOVLW  00
0FC30:  MOVWF  FF8
0FC32:  CALL   22DC
0FC36:  GOTO   FCA4 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
0FF12:  MOVLW  20
0FF14:  MOVWF  FF6
0FF16:  MOVLW  13
0FF18:  MOVWF  FF7
0FF1A:  MOVLW  00
0FF1C:  MOVWF  FF8
0FF1E:  CALL   22DC
....................    
....................    switch(command->frame_id)
0FF22:  MOVLB  1
0FF24:  MOVF   x99,W
0FF26:  MOVWF  FE9
0FF28:  MOVF   x9A,W
0FF2A:  MOVWF  FEA
0FF2C:  MOVF   FEF,W
0FF2E:  ADDLW  FC
0FF30:  BTFSS  FD8.0
0FF32:  BRA    FF3A
0FF34:  MOVLB  0
0FF36:  GOTO   FF92
0FF3A:  ADDLW  04
0FF3C:  MOVLB  0
0FF3E:  GOTO   FF9A
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
0FF42:  MOVFF  19A,19C
0FF46:  MOVFF  199,19B
0FF4A:  GOTO   FC58
....................          break;
0FF4E:  GOTO   FF92
....................          
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
0FF52:  MOVFF  19A,19C
0FF56:  MOVFF  199,19B
0FF5A:  GOTO   FCC0
0FF5E:  MOVF   01,F
0FF60:  BTFSC  FD8.2
0FF62:  GOTO   FF6E
....................             return TRUE; // if status is finished, return TRUE
0FF66:  MOVLW  01
0FF68:  MOVWF  01
0FF6A:  GOTO   FF96
....................          }        
....................          break;
0FF6E:  GOTO   FF92
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
0FF72:  MOVFF  19A,19C
0FF76:  MOVFF  199,19B
0FF7A:  GOTO   122EA
....................          break;
0FF7E:  GOTO   FF92
....................       
....................       case SEND_TIME:
....................          handle_recieve_time(command);
0FF82:  MOVFF  19A,19C
0FF86:  MOVFF  199,19B
0FF8A:  GOTO   1264E
....................          break;
0FF8E:  GOTO   FF92
....................    }
....................    return FALSE;
0FF92:  MOVLW  00
0FF94:  MOVWF  01
0FF96:  GOTO   12DF6 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
0FC58:  MOVLW  38
0FC5A:  MOVWF  FF6
0FC5C:  MOVLW  13
0FC5E:  MOVWF  FF7
0FC60:  MOVLW  00
0FC62:  MOVWF  FF8
0FC64:  CALL   22DC
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
0FC68:  MOVLW  4E
0FC6A:  MOVWF  FF6
0FC6C:  MOVLW  13
0FC6E:  MOVWF  FF7
0FC70:  MOVLW  00
0FC72:  MOVWF  FF8
0FC74:  CALL   22DC
....................    transmit_ack();
0FC78:  CALL   5900
.................... 
....................    status[0] = EXECUTING_MISSION;
0FC7C:  MOVLW  02
0FC7E:  MOVWF  4C
....................    execute_mission(command->content);
0FC80:  MOVLW  03
0FC82:  MOVLB  1
0FC84:  ADDWF  x9B,W
0FC86:  MOVWF  01
0FC88:  MOVLW  00
0FC8A:  ADDWFC x9C,W
0FC8C:  MOVWF  03
0FC8E:  MOVF   01,W
0FC90:  MOVWF  x9D
0FC92:  MOVFF  03,19E
0FC96:  MOVFF  19E,1A0
0FC9A:  MOVFF  19D,19F
0FC9E:  MOVLB  0
0FCA0:  GOTO   F61E
....................    if (is_empty_flash_queue())
0FCA4:  CALL   FC3A
0FCA8:  MOVF   01,F
0FCAA:  BTFSC  FD8.2
0FCAC:  GOTO   FCB8
....................       status[0] = FINISHED;
0FCB0:  MOVLW  06
0FCB2:  MOVWF  4C
0FCB4:  GOTO   FCBC
....................    else
....................       status[0] = SMF_USE_REQ;
0FCB8:  MOVLW  04
0FCBA:  MOVWF  4C
0FCBC:  GOTO   FF4E (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... 
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
0FCC0:  MOVLW  68
0FCC2:  MOVWF  FF6
0FCC4:  MOVLW  13
0FCC6:  MOVWF  FF7
0FCC8:  MOVLW  00
0FCCA:  MOVWF  FF8
0FCCC:  CALL   22DC
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
0FCD0:  MOVLW  7C
0FCD2:  MOVWF  FF6
0FCD4:  MOVLW  13
0FCD6:  MOVWF  FF7
0FCD8:  MOVLW  00
0FCDA:  MOVWF  FF8
0FCDC:  CALL   22DC
....................    transmit_status();
0FCE0:  CALL   A7D4
....................    if (status[0] == FINISHED)
0FCE4:  MOVF   4C,W
0FCE6:  SUBLW  06
0FCE8:  BTFSS  FD8.2
0FCEA:  GOTO   FD0A
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
0FCEE:  MOVLW  9A
0FCF0:  MOVWF  FF6
0FCF2:  MOVLW  13
0FCF4:  MOVWF  FF7
0FCF6:  MOVLW  00
0FCF8:  MOVWF  FF8
0FCFA:  CALL   22DC
....................       return TRUE;
0FCFE:  MOVLW  01
0FD00:  MOVWF  01
0FD02:  GOTO   FD12
....................    }
0FD06:  GOTO   FD12
....................    else{
....................       return FALSE;
0FD0A:  MOVLW  00
0FD0C:  MOVWF  01
0FD0E:  GOTO   FD12
....................    }
0FD12:  GOTO   FF5E (RETURN)
.................... }
.................... 
.................... 
.................... void handle_smf_available(Command *command)
.................... {
....................     fprintf(PC, "\t-> SMF available check\r\n");
*
122EA:  MOVLW  B6
122EC:  MOVWF  FF6
122EE:  MOVLW  13
122F0:  MOVWF  FF7
122F2:  MOVLW  00
122F4:  MOVWF  FF8
122F6:  CALL   22DC
....................     fprintf(PC, "\t   Transmit Acknowledgement\r\n");
122FA:  MOVLW  D0
122FC:  MOVWF  FF6
122FE:  MOVLW  13
12300:  MOVWF  FF7
12302:  MOVLW  00
12304:  MOVWF  FF8
12306:  CALL   22DC
....................     transmit_ack();
1230A:  CALL   5900
.................... 
....................     if (command->content[0] != ALLOW) {
1230E:  MOVLW  03
12310:  MOVLB  1
12312:  ADDWF  x9B,W
12314:  MOVWF  FE9
12316:  MOVLW  00
12318:  ADDWFC x9C,W
1231A:  MOVWF  FEA
1231C:  DECFSZ FEF,W
1231E:  BRA    12324
12320:  BRA    1232A
12322:  MOVLB  0
12324:  MOVLB  0
12326:  GOTO   12330
1232A:  MOVLB  0
1232C:  GOTO   12344
....................         fprintf(PC, "\t\t-> denied\r\n");
12330:  MOVLW  F0
12332:  MOVWF  FF6
12334:  MOVLW  13
12336:  MOVWF  FF7
12338:  MOVLW  00
1233A:  MOVWF  FF8
1233C:  CALL   22DC
....................         return;
12340:  GOTO   1264A
....................     }
.................... 
....................     fprintf(PC, "\t\t-> allowed\r\n");
12344:  MOVLW  FE
12346:  MOVWF  FF6
12348:  MOVLW  13
1234A:  MOVWF  FF7
1234C:  MOVLW  00
1234E:  MOVWF  FF8
12350:  CALL   22DC
....................     status[0] = COPYING;
12354:  MOVLW  05
12356:  MOVWF  4C
.................... 
....................     int8 processed_count = 0;
12358:  MOVLB  1
1235A:  CLRF   x9D
1235C:  MOVLB  0
.................... 
....................     while (!is_empty_flash_queue()) {
1235E:  CALL   FC3A
12362:  MOVF   01,F
12364:  BTFSS  FD8.2
12366:  GOTO   12602
....................         FlashOperationStruct *smf_data = dequeue_flash_operation();
1236A:  GOTO   FD16
1236E:  MOVFF  02,19F
12372:  MOVFF  01,19E
....................         /*
....................         if (smf_data == NULL) {
....................             fprintf(PC, "\t\t-> dequeue NULL (break)\r\n");
....................             break;
....................         }
....................          */
....................         fprintf(PC, "\t\t-> Dequeued: func=%u mission=%u size=%ld addr=%ld\r\n",
....................                 (unsigned int)smf_data->func_type,
....................                 (unsigned int)smf_data->mission_id,
....................                 smf_data->misf_size,
....................                 smf_data->misf_start_addr);
12376:  MOVLW  01
12378:  MOVLB  1
1237A:  ADDWF  x9E,W
1237C:  MOVWF  FE9
1237E:  MOVLW  00
12380:  ADDWFC x9F,W
12382:  MOVWF  FEA
12384:  MOVFF  FEF,1A1
12388:  MOVF   x9E,W
1238A:  MOVWF  FE9
1238C:  MOVF   x9F,W
1238E:  MOVWF  FEA
12390:  MOVFF  FEF,1A2
12394:  MOVLW  08
12396:  ADDWF  x9E,W
12398:  MOVWF  FE9
1239A:  MOVLW  00
1239C:  ADDWFC x9F,W
1239E:  MOVWF  FEA
123A0:  MOVFF  FEF,1A3
123A4:  MOVFF  FEC,1A4
123A8:  MOVFF  FEC,1A5
123AC:  MOVFF  FEC,1A6
123B0:  MOVF   FED,F
123B2:  MOVF   FED,F
123B4:  MOVF   FED,F
123B6:  MOVLW  04
123B8:  ADDWF  x9E,W
123BA:  MOVWF  FE9
123BC:  MOVLW  00
123BE:  ADDWFC x9F,W
123C0:  MOVWF  FEA
123C2:  MOVFF  FEF,1A7
123C6:  MOVFF  FEC,1A8
123CA:  MOVFF  FEC,1A9
123CE:  MOVFF  FEC,1AA
123D2:  MOVF   FED,F
123D4:  MOVF   FED,F
123D6:  MOVF   FED,F
123D8:  MOVLW  0E
123DA:  MOVWF  FF6
123DC:  MOVLW  14
123DE:  MOVWF  FF7
123E0:  MOVLW  00
123E2:  MOVWF  FF8
123E4:  MOVLW  14
123E6:  MOVLB  9
123E8:  MOVWF  xC2
123EA:  MOVLB  0
123EC:  CALL   2312
123F0:  MOVFF  1A1,1AF
123F4:  MOVLW  1B
123F6:  MOVLB  1
123F8:  MOVWF  xB0
123FA:  MOVLB  0
123FC:  CALL   F562
12400:  MOVLW  24
12402:  MOVWF  FF6
12404:  MOVLW  14
12406:  MOVWF  FF7
12408:  MOVLW  00
1240A:  MOVWF  FF8
1240C:  MOVLW  09
1240E:  MOVLB  9
12410:  MOVWF  xC2
12412:  MOVLB  0
12414:  CALL   2312
12418:  MOVFF  1A2,1AF
1241C:  MOVLW  1B
1241E:  MOVLB  1
12420:  MOVWF  xB0
12422:  MOVLB  0
12424:  CALL   F562
12428:  MOVLW  2F
1242A:  MOVWF  FF6
1242C:  MOVLW  14
1242E:  MOVWF  FF7
12430:  MOVLW  00
12432:  MOVWF  FF8
12434:  MOVLW  06
12436:  MOVLB  9
12438:  MOVWF  xC2
1243A:  MOVLB  0
1243C:  CALL   2312
12440:  MOVLW  41
12442:  MOVWF  FE9
12444:  MOVFF  1A6,1AE
12448:  MOVFF  1A5,1AD
1244C:  MOVFF  1A4,1AC
12450:  MOVFF  1A3,1AB
12454:  CALL   FD78
12458:  MOVLW  38
1245A:  MOVWF  FF6
1245C:  MOVLW  14
1245E:  MOVWF  FF7
12460:  MOVLW  00
12462:  MOVWF  FF8
12464:  MOVLW  06
12466:  MOVLB  9
12468:  MOVWF  xC2
1246A:  MOVLB  0
1246C:  CALL   2312
12470:  MOVLW  41
12472:  MOVWF  FE9
12474:  MOVFF  1AA,1AE
12478:  MOVFF  1A9,1AD
1247C:  MOVFF  1A8,1AC
12480:  MOVFF  1A7,1AB
12484:  CALL   FD78
12488:  MOVLW  0D
1248A:  BTFSS  FA6.6
1248C:  GOTO   1248A
12490:  MOVLB  E
12492:  MOVWF  xF9
12494:  MOVLW  0A
12496:  MOVLB  0
12498:  BTFSS  FA6.6
1249A:  GOTO   12498
1249E:  MOVLB  E
124A0:  MOVWF  xF9
.................... 
....................         switch (smf_data->func_type) {
124A2:  MOVLW  01
124A4:  MOVLB  1
124A6:  ADDWF  x9E,W
124A8:  MOVWF  FE9
124AA:  MOVLW  00
124AC:  ADDWFC x9F,W
124AE:  MOVWF  FEA
124B0:  MOVF   FEF,W
124B2:  XORLW  00
124B4:  MOVLB  0
124B6:  BTFSC  FD8.2
124B8:  GOTO   124D0
124BC:  XORLW  01
124BE:  BTFSC  FD8.2
124C0:  GOTO   124E0
124C4:  XORLW  03
124C6:  BTFSC  FD8.2
124C8:  GOTO   124F0
124CC:  GOTO   12500
....................             case ENUM_SMF_WRITE:
....................                 smf_write(smf_data);
124D0:  MOVFF  19F,1A2
124D4:  MOVFF  19E,1A1
124D8:  GOTO   10474
....................                 break;
124DC:  GOTO   1255A
....................             case ENUM_SMF_READ:
....................                 smf_read(smf_data);
124E0:  MOVFF  19F,1A2
124E4:  MOVFF  19E,1A1
124E8:  GOTO   1152E
....................                 break;
124EC:  GOTO   1255A
....................             case ENUM_SMF_ERASE:
....................                 smf_erase(smf_data);
124F0:  MOVFF  19F,1A2
124F4:  MOVFF  19E,1A1
124F8:  GOTO   11C68
....................                 break;
124FC:  GOTO   1255A
....................             default:
....................                 fprintf(PC, "\t\t   Unknown func_type=%u\r\n",
....................                         (unsigned int)smf_data->func_type);
12500:  MOVLW  01
12502:  MOVLB  1
12504:  ADDWF  x9E,W
12506:  MOVWF  FE9
12508:  MOVLW  00
1250A:  ADDWFC x9F,W
1250C:  MOVWF  FEA
1250E:  MOVFF  FEF,1A1
12512:  MOVLW  44
12514:  MOVWF  FF6
12516:  MOVLW  14
12518:  MOVWF  FF7
1251A:  MOVLW  00
1251C:  MOVWF  FF8
1251E:  MOVLW  17
12520:  MOVLB  9
12522:  MOVWF  xC2
12524:  MOVLB  0
12526:  CALL   2312
1252A:  MOVFF  1A1,1AF
1252E:  MOVLW  1B
12530:  MOVLB  1
12532:  MOVWF  xB0
12534:  MOVLB  0
12536:  CALL   F562
1253A:  MOVLW  0D
1253C:  BTFSS  FA6.6
1253E:  GOTO   1253C
12542:  MOVLB  E
12544:  MOVWF  xF9
12546:  MOVLW  0A
12548:  MOVLB  0
1254A:  BTFSS  FA6.6
1254C:  GOTO   1254A
12550:  MOVLB  E
12552:  MOVWF  xF9
....................                 break;
12554:  MOVLB  0
12556:  GOTO   1255A
....................         }
....................          processed_count++;
1255A:  MOVLB  1
1255C:  INCF   x9D,F
....................          unsigned int8 smf_id;
....................          switch (smf_data->mission_id) {
1255E:  MOVF   x9E,W
12560:  MOVWF  FE9
12562:  MOVF   x9F,W
12564:  MOVWF  FEA
12566:  MOVF   FEF,W
12568:  XORLW  00
1256A:  MOVLB  0
1256C:  BTFSC  FD8.2
1256E:  GOTO   125A6
12572:  XORLW  01
12574:  BTFSC  FD8.2
12576:  GOTO   125B2
1257A:  XORLW  03
1257C:  BTFSC  FD8.2
1257E:  GOTO   125BE
12582:  XORLW  01
12584:  BTFSC  FD8.2
12586:  GOTO   125CA
1258A:  XORLW  07
1258C:  BTFSC  FD8.2
1258E:  GOTO   125D6
12592:  XORLW  01
12594:  BTFSC  FD8.2
12596:  GOTO   125E2
1259A:  XORLW  03
1259C:  BTFSC  FD8.2
1259E:  GOTO   125EE
125A2:  GOTO   125FA
....................             case CIGS_DATA_TABLE:
....................                smf_id = DATA_ID_CIGS_DATA_TABLE;
125A6:  MOVLW  C0
125A8:  MOVLB  1
125AA:  MOVWF  xA0
....................                break;
125AC:  MOVLB  0
125AE:  GOTO   125FE
....................             case CIGS_PICLOG_DATA:
....................                smf_id = DATA_ID_CIGS_PICLOG;
125B2:  MOVLW  C1
125B4:  MOVLB  1
125B6:  MOVWF  xA0
....................                break;
125B8:  MOVLB  0
125BA:  GOTO   125FE
....................             case CIGS_ENVIRO_DATA:
....................                smf_id = DATA_ID_CIGS_ENVIRO;
125BE:  MOVLW  C2
125C0:  MOVLB  1
125C2:  MOVWF  xA0
....................                break;
125C4:  MOVLB  0
125C6:  GOTO   125FE
....................             case CIGS_IV1_HEADER:
....................                smf_id = DATA_ID_CIGS_IV1_HEADER;
125CA:  MOVLW  C3
125CC:  MOVLB  1
125CE:  MOVWF  xA0
....................                break;
125D0:  MOVLB  0
125D2:  GOTO   125FE
....................             case CIGS_IV1_DATA:
....................                smf_id = DATA_ID_CIGS_IV1_DATA;
125D6:  MOVLW  C4
125D8:  MOVLB  1
125DA:  MOVWF  xA0
....................                break;
125DC:  MOVLB  0
125DE:  GOTO   125FE
....................             case CIGS_IV2_HEADER:
....................                smf_id = DATA_ID_CIGS_IV2_HEADER;
125E2:  MOVLW  C5
125E4:  MOVLB  1
125E6:  MOVWF  xA0
....................                break;
125E8:  MOVLB  0
125EA:  GOTO   125FE
....................             case CIGS_IV2_DATA:
....................                smf_id = DATA_ID_CIGS_IV2_DATA;
125EE:  MOVLW  C6
125F0:  MOVLB  1
125F2:  MOVWF  xA0
....................                 break;
125F4:  MOVLB  0
125F6:  GOTO   125FE
....................             default:
....................                 break;
125FA:  GOTO   125FE
....................          }
125FE:  GOTO   1235E
....................          
....................     }
.................... 
....................     fprintf(PC, "\t\t-> Completed %u operations\r\n",
....................             (unsigned int)processed_count);
12602:  MOVLW  60
12604:  MOVWF  FF6
12606:  MOVLW  14
12608:  MOVWF  FF7
1260A:  MOVLW  00
1260C:  MOVWF  FF8
1260E:  MOVLW  0F
12610:  MOVLB  9
12612:  MOVWF  xC2
12614:  MOVLB  0
12616:  CALL   2312
1261A:  MOVFF  19D,1AF
1261E:  MOVLW  1B
12620:  MOVLB  1
12622:  MOVWF  xB0
12624:  MOVLB  0
12626:  CALL   F562
1262A:  MOVLW  71
1262C:  MOVWF  FF6
1262E:  MOVLW  14
12630:  MOVWF  FF7
12632:  MOVLW  00
12634:  MOVWF  FF8
12636:  MOVLW  0D
12638:  MOVLB  9
1263A:  MOVWF  xC2
1263C:  MOVLB  0
1263E:  CALL   2312
....................       status[1] = 0xC0;
12642:  MOVLW  C0
12644:  MOVWF  4D
....................       status[0] = FINISHED;
12646:  MOVLW  06
12648:  MOVWF  4C
1264A:  GOTO   FF7E (RETURN)
.................... }
.................... 
.................... void handle_recieve_time(Command *command)
.................... {
....................    fprintf(PC, "\t-> TIME Receive\r\n");
1264E:  MOVLW  80
12650:  MOVWF  FF6
12652:  MOVLW  14
12654:  MOVWF  FF7
12656:  MOVLW  00
12658:  MOVWF  FF8
1265A:  CALL   22DC
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
1265E:  MOVLW  94
12660:  MOVWF  FF6
12662:  MOVLW  14
12664:  MOVWF  FF7
12666:  MOVLW  00
12668:  MOVWF  FF8
1266A:  CALL   22DC
....................    transmit_ack();
1266E:  CALL   5900
.................... 
....................    // 4バイト(MSB, big-endian)に詰められた MM/DD hh:mm:ss を復元
....................    // [31:26]=0, [25:22]=month(1-12), [21:17]=day(1-31), [16:12]=hour(0-23), [11:6]=minute(0-59), [5:0]=second(0-59)
....................    unsigned int32 total_seconds = ((unsigned int32)command->content[0] << 24) |
....................                       ((unsigned int32)command->content[1] << 16) |
....................                       ((unsigned int32)command->content[2] << 8)  |
....................                       ((unsigned int32)command->content[3]);
12672:  MOVLW  03
12674:  MOVLB  1
12676:  ADDWF  x9B,W
12678:  MOVWF  FE9
1267A:  MOVLW  00
1267C:  ADDWFC x9C,W
1267E:  MOVWF  FEA
12680:  MOVF   FEF,W
12682:  CLRF   xA9
12684:  CLRF   xA8
12686:  CLRF   xA7
12688:  MOVWF  xA6
1268A:  MOVFF  1A6,1A9
1268E:  CLRF   xA6
12690:  CLRF   xA7
12692:  CLRF   xA8
12694:  MOVLW  04
12696:  ADDWF  x9B,W
12698:  MOVWF  FE9
1269A:  MOVLW  00
1269C:  ADDWFC x9C,W
1269E:  MOVWF  FEA
126A0:  MOVF   FEF,W
126A2:  CLRF   xAE
126A4:  CLRF   xAD
126A6:  CLRF   xAC
126A8:  MOVWF  xAB
126AA:  MOVFF  1AC,03
126AE:  MOVFF  1AB,02
126B2:  CLRF   00
126B4:  CLRF   01
126B6:  MOVF   00,W
126B8:  IORWF  xA6,F
126BA:  MOVF   01,W
126BC:  IORWF  xA7,F
126BE:  MOVF   02,W
126C0:  IORWF  xA8,F
126C2:  MOVF   03,W
126C4:  IORWF  xA9,F
126C6:  MOVLW  05
126C8:  ADDWF  x9B,W
126CA:  MOVWF  FE9
126CC:  MOVLW  00
126CE:  ADDWFC x9C,W
126D0:  MOVWF  FEA
126D2:  MOVF   FEF,W
126D4:  CLRF   xAE
126D6:  CLRF   xAD
126D8:  CLRF   xAC
126DA:  MOVWF  xAB
126DC:  MOVFF  1AD,03
126E0:  MOVFF  1AC,02
126E4:  MOVFF  1AB,01
126E8:  CLRF   00
126EA:  MOVF   00,W
126EC:  IORWF  xA6,F
126EE:  MOVF   01,W
126F0:  IORWF  xA7,F
126F2:  MOVF   02,W
126F4:  IORWF  xA8,F
126F6:  MOVF   03,W
126F8:  IORWF  xA9,F
126FA:  MOVLW  06
126FC:  ADDWF  x9B,W
126FE:  MOVWF  FE9
12700:  MOVLW  00
12702:  ADDWFC x9C,W
12704:  MOVWF  FEA
12706:  MOVF   FEF,W
12708:  MOVWF  00
1270A:  CLRF   01
1270C:  CLRF   02
1270E:  CLRF   03
12710:  MOVF   00,W
12712:  IORWF  xA6,W
12714:  MOVWF  x9D
12716:  MOVF   01,W
12718:  IORWF  xA7,W
1271A:  MOVWF  x9E
1271C:  MOVF   02,W
1271E:  IORWF  xA8,W
12720:  MOVWF  x9F
12722:  MOVF   03,W
12724:  IORWF  xA9,W
12726:  MOVWF  xA0
.................... 
....................    set_current_sec(total_seconds);
12728:  MOVFF  1A0,1A9
1272C:  MOVFF  19F,1A8
12730:  MOVFF  19E,1A7
12734:  MOVFF  19D,1A6
12738:  MOVLB  0
1273A:  GOTO   FEFE
....................    unsigned int16 days;
....................    unsigned int8 hours, minutes, seconds;
....................    days    = total_seconds / 86400;
1273E:  BCF    FD8.1
12740:  MOVFF  1A0,215
12744:  MOVFF  19F,214
12748:  MOVFF  19E,213
1274C:  MOVFF  19D,212
12750:  MOVLB  2
12752:  CLRF   x19
12754:  MOVLW  01
12756:  MOVWF  x18
12758:  MOVLW  51
1275A:  MOVWF  x17
1275C:  MOVLW  80
1275E:  MOVWF  x16
12760:  MOVLB  0
12762:  CALL   61F8
12766:  MOVFF  01,1A2
1276A:  MOVFF  00,1A1
....................    hours   = (total_seconds % 86400) / 3600;
1276E:  BSF    FD8.1
12770:  MOVLW  01
12772:  MOVWF  FEA
12774:  MOVLW  A6
12776:  MOVWF  FE9
12778:  MOVFF  1A0,215
1277C:  MOVFF  19F,214
12780:  MOVFF  19E,213
12784:  MOVFF  19D,212
12788:  MOVLB  2
1278A:  CLRF   x19
1278C:  MOVLW  01
1278E:  MOVWF  x18
12790:  MOVLW  51
12792:  MOVWF  x17
12794:  MOVLW  80
12796:  MOVWF  x16
12798:  MOVLB  0
1279A:  CALL   61F8
1279E:  MOVFF  1A9,1AD
127A2:  MOVFF  1A8,1AC
127A6:  MOVFF  1A7,1AB
127AA:  MOVFF  1A6,1AA
127AE:  MOVFF  FEA,1AF
127B2:  MOVFF  FE9,1AE
127B6:  BCF    FD8.1
127B8:  MOVFF  1AD,215
127BC:  MOVFF  1AC,214
127C0:  MOVFF  1AB,213
127C4:  MOVFF  1AA,212
127C8:  MOVLB  2
127CA:  CLRF   x19
127CC:  CLRF   x18
127CE:  MOVLW  0E
127D0:  MOVWF  x17
127D2:  MOVLW  10
127D4:  MOVWF  x16
127D6:  MOVLB  0
127D8:  CALL   61F8
127DC:  MOVFF  1AF,FEA
127E0:  MOVFF  1AE,FE9
127E4:  MOVFF  00,1A3
....................    minutes = (total_seconds % 3600) / 60;
127E8:  BSF    FD8.1
127EA:  MOVLW  01
127EC:  MOVWF  FEA
127EE:  MOVLW  A6
127F0:  MOVWF  FE9
127F2:  MOVFF  1A0,215
127F6:  MOVFF  19F,214
127FA:  MOVFF  19E,213
127FE:  MOVFF  19D,212
12802:  MOVLB  2
12804:  CLRF   x19
12806:  CLRF   x18
12808:  MOVLW  0E
1280A:  MOVWF  x17
1280C:  MOVLW  10
1280E:  MOVWF  x16
12810:  MOVLB  0
12812:  CALL   61F8
12816:  MOVFF  1A9,1AD
1281A:  MOVFF  1A8,1AC
1281E:  MOVFF  1A7,1AB
12822:  MOVFF  1A6,1AA
12826:  MOVFF  FEA,1AF
1282A:  MOVFF  FE9,1AE
1282E:  BCF    FD8.1
12830:  MOVFF  1AD,215
12834:  MOVFF  1AC,214
12838:  MOVFF  1AB,213
1283C:  MOVFF  1AA,212
12840:  MOVLB  2
12842:  CLRF   x19
12844:  CLRF   x18
12846:  CLRF   x17
12848:  MOVLW  3C
1284A:  MOVWF  x16
1284C:  MOVLB  0
1284E:  CALL   61F8
12852:  MOVFF  1AF,FEA
12856:  MOVFF  1AE,FE9
1285A:  MOVFF  00,1A4
....................    seconds = total_seconds % 60;
1285E:  BSF    FD8.1
12860:  MOVLW  01
12862:  MOVWF  FEA
12864:  MOVLW  A6
12866:  MOVWF  FE9
12868:  MOVFF  1A0,215
1286C:  MOVFF  19F,214
12870:  MOVFF  19E,213
12874:  MOVFF  19D,212
12878:  MOVLB  2
1287A:  CLRF   x19
1287C:  CLRF   x18
1287E:  CLRF   x17
12880:  MOVLW  3C
12882:  MOVWF  x16
12884:  MOVLB  0
12886:  CALL   61F8
1288A:  MOVFF  1A6,1A5
.................... 
....................    fprintf(PC, "\t\t-> Set time to %lu days, %02u:%02u:%02u\r\n",
....................            days, hours, minutes, seconds);
1288E:  MOVLW  AE
12890:  MOVWF  FF6
12892:  MOVLW  14
12894:  MOVWF  FF7
12896:  MOVLW  00
12898:  MOVWF  FF8
1289A:  MOVLW  11
1289C:  MOVLB  9
1289E:  MOVWF  xC2
128A0:  MOVLB  0
128A2:  CALL   2312
128A6:  MOVLW  10
128A8:  MOVWF  FE9
128AA:  MOVFF  1A2,1EA
128AE:  MOVFF  1A1,1E9
128B2:  CALL   8E62
128B6:  MOVLW  C2
128B8:  MOVWF  FF6
128BA:  MOVLW  14
128BC:  MOVWF  FF7
128BE:  MOVLW  00
128C0:  MOVWF  FF8
128C2:  MOVLW  07
128C4:  MOVLB  9
128C6:  MOVWF  xC2
128C8:  MOVLB  0
128CA:  CALL   2312
128CE:  MOVFF  1A3,1AF
128D2:  MOVLW  01
128D4:  MOVLB  1
128D6:  MOVWF  xB0
128D8:  MOVLB  0
128DA:  CALL   F562
128DE:  MOVLW  3A
128E0:  BTFSS  FA6.6
128E2:  GOTO   128E0
128E6:  MOVLB  E
128E8:  MOVWF  xF9
128EA:  MOVFF  1A4,1AF
128EE:  MOVLW  01
128F0:  MOVLB  1
128F2:  MOVWF  xB0
128F4:  MOVLB  0
128F6:  CALL   F562
128FA:  MOVLW  3A
128FC:  BTFSS  FA6.6
128FE:  GOTO   128FC
12902:  MOVLB  E
12904:  MOVWF  xF9
12906:  MOVFF  1A5,1AF
1290A:  MOVLW  01
1290C:  MOVLB  1
1290E:  MOVWF  xB0
12910:  MOVLB  0
12912:  CALL   F562
12916:  MOVLW  0D
12918:  BTFSS  FA6.6
1291A:  GOTO   12918
1291E:  MOVLB  E
12920:  MOVWF  xF9
12922:  MOVLW  0A
12924:  MOVLB  0
12926:  BTFSS  FA6.6
12928:  GOTO   12926
1292C:  MOVLB  E
1292E:  MOVWF  xF9
12930:  MOVLB  0
12932:  GOTO   FF8E (RETURN)
.................... 
.................... }
.................... // End of file
.................... 
.................... #include "application/cigs_mode_mission.c"
.................... #include "cigs_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_PRINT 0xA3
.................... #define ID_MEAS_IV_PRINT 0xA4
.................... #define ID_MEAS_PD 0xA5
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_pd(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_1sweep(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_port1(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_port2(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int16 interval;
....................     unsigned int16 pd_threshold;
....................     unsigned int16 meas_time;
....................     unsigned int16 log_threshold;
....................     unsigned int16 sweep_limit;
.................... } meas_iv_param_t;
.................... 
.................... 
.................... // MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... meas_iv_param_t make_meas_iv_cmd(int8 *uplinkcmd_ptr);
.................... void print_meas_iv_cmd(meas_iv_param_t *cmd_ptr);
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/device/ad7490.h"                    // ADCライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... // === AD7490 Control Word ===
.................... // Bit[15]   : WRITE (常に0)
.................... // Bit[14:13]: SEQ mode (シーケンス設定)
.................... // Bit[12]   : SHADOW (0=disabled, 1=enabled)
.................... // Bit[11]   : Don't Care
.................... // Bit[10]   : PM1 (Power Management)
.................... // Bit[9]    : PM0
.................... // Bit[8]    : REFSEL (0=internal, 1=external)
.................... // Bit[7]    : Coding (0=straight binary, 1=twos complement)
.................... // Bit[6]    : Don't Care
.................... // Bit[5]    : ADD2
.................... // Bit[4]    : ADD1
.................... // Bit[3]    : ADD0
.................... // Bit[2]    : DIFF (0=single-ended, 1=differential)
.................... // Bit[1:0]  : Don't Care
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000011
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000000
.................... 
.................... 
.................... // ----------------------------
.................... // WRITE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_WRITE_DISABLE = 0,  // 書き込み無効
....................     AD7490_WRITE_ENABLE  = 1   // 書き込み有効
.................... } ad7490_write_t;
.................... 
.................... // ----------------------------
.................... // SEQ bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SEQ_DISABLE = 0,
....................     AD7490_SEQ_ENABLE  = 1
.................... } ad7490_seq_t;
.................... 
.................... // ----------------------------
.................... // CODING bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CODING_BINARY  = 0, // ストレートバイナリ
....................     AD7490_CODING_TWOS    = 1  // Two’s complement
.................... } ad7490_coding_t;
.................... 
.................... // ----------------------------
.................... // RANGE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_RANGE_2REF  = 0, // 0〜2*REFIN
....................     AD7490_RANGE_REF   = 1  // 0〜REFIN
.................... } ad7490_range_t;
.................... 
.................... // ----------------------------
.................... // WEAK/TRI bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_DOUT_TRI   = 0, // Three-state
....................     AD7490_DOUT_WEAK  = 1  // Weakly driven
.................... } ad7490_dout_t;
.................... 
.................... // ----------------------------
.................... // SHADOW bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SHADOW_DISABLE = 0,
....................     AD7490_SHADOW_ENABLE  = 1
.................... } ad7490_shadow_t;
.................... 
.................... // ----------------------------
.................... // Power Mode (PM1, PM0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_PWR_NORMAL    = 0, // 00
....................     AD7490_PWR_FULLDOWN  = 1, // 01
....................     AD7490_PWR_AUTO      = 2, // 10
....................     AD7490_PWR_SHUTDOWN  = 3  // 11
.................... } ad7490_pwr_mode_t;
.................... 
.................... // ----------------------------
.................... // Channel Address (ADD3–ADD0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CH0  = 0,
....................     AD7490_CH1  = 1,
....................     AD7490_CH2  = 2,
....................     AD7490_CH3  = 3,
....................     AD7490_CH4  = 4,
....................     AD7490_CH5  = 5,
....................     AD7490_CH6  = 6,
....................     AD7490_CH7  = 7,
....................     AD7490_CH8  = 8,
....................     AD7490_CH9  = 9,
....................     AD7490_CH10 = 10,
....................     AD7490_CH11 = 11,
....................     AD7490_CH12 = 12,
....................     AD7490_CH13 = 13,
....................     AD7490_CH14 = 14,
....................     AD7490_CH15 = 15
.................... } ad7490_channel_t;
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_flash.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void mode_meas_iv_1sweep(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS IV 1 SWEEP\r\n");
*
0E518:  MOVLW  DA
0E51A:  MOVWF  FF6
0E51C:  MOVLW  14
0E51E:  MOVWF  FF7
0E520:  MOVLW  00
0E522:  MOVWF  FF8
0E524:  CALL   22DC
.................... 
....................    mode_misf_erase_and_reset(uplinkcmd_ptr);
0E528:  MOVFF  1B0,1C9
0E52C:  MOVFF  1AF,1C8
0E530:  CALL   75D6
.................... 
....................    meas_iv_param_t cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0E534:  MOVFF  1B0,1E6
0E538:  MOVFF  1AF,1E5
0E53C:  CALL   8262
0E540:  MOVFF  02,03
0E544:  MOVF   01,W
0E546:  MOVWF  FE1
0E548:  MOVFF  03,FE2
0E54C:  MOVLW  01
0E54E:  MOVWF  FEA
0E550:  MOVLW  B1
0E552:  MOVWF  FE9
0E554:  MOVLW  0B
0E556:  MOVWF  01
0E558:  MOVFF  FE6,FEE
0E55C:  DECFSZ 01,F
0E55E:  GOTO   E558
....................    sweep(cmd.log_threshold, cmd.sweep_limit, cmd.pd_threshold);
0E562:  MOVFF  1B9,1E0
0E566:  MOVFF  1B8,1DF
0E56A:  MOVFF  1BB,1E2
0E56E:  MOVFF  1BA,1E1
0E572:  MOVFF  1B5,1E4
0E576:  MOVFF  1B4,1E3
0E57A:  CALL   9B48
.................... 
....................    FlashOperationStruct data = {0};
0E57E:  MOVLB  1
0E580:  CLRF   xBC
0E582:  CLRF   xBD
0E584:  CLRF   xBE
0E586:  CLRF   xBF
0E588:  CLRF   xC0
0E58A:  CLRF   xC1
0E58C:  CLRF   xC2
0E58E:  CLRF   xC3
0E590:  CLRF   xC4
0E592:  CLRF   xC5
0E594:  CLRF   xC6
0E596:  CLRF   xC7
....................    data.func_type = ENUM_SMF_WRITE;
0E598:  CLRF   xBD
....................    data.mission_id = CIGS_IV1_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0E59A:  MOVLW  04
0E59C:  MOVWF  xBC
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0E59E:  MOVLW  02
0E5A0:  MOVWF  xBE
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0E5A2:  BCF    xBF.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0E5A4:  MOVLW  F8
0E5A6:  MOVWF  FF6
0E5A8:  MOVLW  14
0E5AA:  MOVWF  FF7
0E5AC:  MOVLW  00
0E5AE:  MOVWF  FF8
0E5B0:  MOVLB  0
0E5B2:  CALL   22DC
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0E5B6:  MOVLW  0A
0E5B8:  MOVWF  FF6
0E5BA:  MOVLW  15
0E5BC:  MOVWF  FF7
0E5BE:  MOVLW  00
0E5C0:  MOVWF  FF8
0E5C2:  MOVLW  0F
0E5C4:  MOVLB  9
0E5C6:  MOVWF  xC2
0E5C8:  MOVLB  0
0E5CA:  CALL   2312
0E5CE:  MOVFF  1BC,9E8
0E5D2:  MOVLW  37
0E5D4:  MOVLB  9
0E5D6:  MOVWF  xE9
0E5D8:  MOVLB  0
0E5DA:  CALL   2542
0E5DE:  MOVLW  0D
0E5E0:  BTFSS  FA6.6
0E5E2:  GOTO   E5E0
0E5E6:  MOVLB  E
0E5E8:  MOVWF  xF9
0E5EA:  MOVLW  0A
0E5EC:  MOVLB  0
0E5EE:  BTFSS  FA6.6
0E5F0:  GOTO   E5EE
0E5F4:  MOVLB  E
0E5F6:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0E5F8:  MOVLW  20
0E5FA:  MOVWF  FF6
0E5FC:  MOVLW  15
0E5FE:  MOVWF  FF7
0E600:  MOVLW  00
0E602:  MOVWF  FF8
0E604:  MOVLW  0F
0E606:  MOVLB  9
0E608:  MOVWF  xC2
0E60A:  MOVLB  0
0E60C:  CALL   2312
0E610:  MOVFF  1BD,9E8
0E614:  MOVLW  37
0E616:  MOVLB  9
0E618:  MOVWF  xE9
0E61A:  MOVLB  0
0E61C:  CALL   2542
0E620:  MOVLW  0D
0E622:  BTFSS  FA6.6
0E624:  GOTO   E622
0E628:  MOVLB  E
0E62A:  MOVWF  xF9
0E62C:  MOVLW  0A
0E62E:  MOVLB  0
0E630:  BTFSS  FA6.6
0E632:  GOTO   E630
0E636:  MOVLB  E
0E638:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0E63A:  MOVLW  36
0E63C:  MOVWF  FF6
0E63E:  MOVLW  15
0E640:  MOVWF  FF7
0E642:  MOVLW  00
0E644:  MOVWF  FF8
0E646:  MOVLW  0F
0E648:  MOVLB  9
0E64A:  MOVWF  xC2
0E64C:  MOVLB  0
0E64E:  CALL   2312
0E652:  MOVFF  1BE,9E8
0E656:  MOVLW  37
0E658:  MOVLB  9
0E65A:  MOVWF  xE9
0E65C:  MOVLB  0
0E65E:  CALL   2542
0E662:  MOVLW  0D
0E664:  BTFSS  FA6.6
0E666:  GOTO   E664
0E66A:  MOVLB  E
0E66C:  MOVWF  xF9
0E66E:  MOVLW  0A
0E670:  MOVLB  0
0E672:  BTFSS  FA6.6
0E674:  GOTO   E672
0E678:  MOVLB  E
0E67A:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0E67C:  MOVLW  00
0E67E:  MOVLB  1
0E680:  BTFSC  xBF.0
0E682:  MOVLW  01
0E684:  MOVWF  xC8
0E686:  MOVLW  4C
0E688:  MOVWF  FF6
0E68A:  MOVLW  15
0E68C:  MOVWF  FF7
0E68E:  MOVLW  00
0E690:  MOVWF  FF8
0E692:  MOVLW  0F
0E694:  MOVLB  9
0E696:  MOVWF  xC2
0E698:  MOVLB  0
0E69A:  CALL   2312
0E69E:  MOVFF  1C8,9E8
0E6A2:  MOVLW  37
0E6A4:  MOVLB  9
0E6A6:  MOVWF  xE9
0E6A8:  MOVLB  0
0E6AA:  CALL   2542
0E6AE:  MOVLW  0D
0E6B0:  BTFSS  FA6.6
0E6B2:  GOTO   E6B0
0E6B6:  MOVLB  E
0E6B8:  MOVWF  xF9
0E6BA:  MOVLW  0A
0E6BC:  MOVLB  0
0E6BE:  BTFSS  FA6.6
0E6C0:  GOTO   E6BE
0E6C4:  MOVLB  E
0E6C6:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0E6C8:  MOVLW  62
0E6CA:  MOVWF  FF6
0E6CC:  MOVLW  15
0E6CE:  MOVWF  FF7
0E6D0:  MOVLW  00
0E6D2:  MOVWF  FF8
0E6D4:  MOVLW  0F
0E6D6:  MOVLB  9
0E6D8:  MOVWF  xC2
0E6DA:  MOVLB  0
0E6DC:  CALL   2312
0E6E0:  MOVLW  02
0E6E2:  MOVLB  1
0E6E4:  MOVWF  xC8
0E6E6:  MOVLB  0
0E6E8:  MOVLW  30
0E6EA:  BTFSS  FA6.6
0E6EC:  GOTO   E6EA
0E6F0:  MOVLB  E
0E6F2:  MOVWF  xF9
0E6F4:  MOVLB  1
0E6F6:  DECFSZ xC8,F
0E6F8:  BRA    E6FE
0E6FA:  BRA    E704
0E6FC:  MOVLB  0
0E6FE:  MOVLB  0
0E700:  GOTO   E6E8
0E704:  MOVFF  1C0,9E8
0E708:  MOVLW  37
0E70A:  MOVLB  9
0E70C:  MOVWF  xE9
0E70E:  MOVLB  0
0E710:  CALL   2542
0E714:  MOVLW  0D
0E716:  BTFSS  FA6.6
0E718:  GOTO   E716
0E71C:  MOVLB  E
0E71E:  MOVWF  xF9
0E720:  MOVLW  0A
0E722:  MOVLB  0
0E724:  BTFSS  FA6.6
0E726:  GOTO   E724
0E72A:  MOVLB  E
0E72C:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV1_DATA].uncopied_counter);
0E72E:  MOVLW  78
0E730:  MOVWF  FF6
0E732:  MOVLW  15
0E734:  MOVWF  FF7
0E736:  MOVLW  00
0E738:  MOVWF  FF8
0E73A:  MOVLW  0F
0E73C:  MOVLB  9
0E73E:  MOVWF  xC2
0E740:  MOVLB  0
0E742:  CALL   2312
0E746:  MOVLW  02
0E748:  MOVLB  1
0E74A:  MOVWF  xC8
0E74C:  MOVLB  0
0E74E:  MOVLW  30
0E750:  BTFSS  FA6.6
0E752:  GOTO   E750
0E756:  MOVLB  E
0E758:  MOVWF  xF9
0E75A:  MOVLB  1
0E75C:  DECFSZ xC8,F
0E75E:  BRA    E764
0E760:  BRA    E76A
0E762:  MOVLB  0
0E764:  MOVLB  0
0E766:  GOTO   E74E
0E76A:  MOVFF  14E,9E8
0E76E:  MOVLW  37
0E770:  MOVLB  9
0E772:  MOVWF  xE9
0E774:  MOVLB  0
0E776:  CALL   2542
0E77A:  MOVLW  0D
0E77C:  BTFSS  FA6.6
0E77E:  GOTO   E77C
0E782:  MOVLB  E
0E784:  MOVWF  xF9
0E786:  MOVLW  0A
0E788:  MOVLB  0
0E78A:  BTFSS  FA6.6
0E78C:  GOTO   E78A
0E790:  MOVLB  E
0E792:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0E794:  MOVLW  01
0E796:  MOVLB  1
0E798:  MOVWF  xE0
0E79A:  MOVLW  BC
0E79C:  MOVWF  xDF
0E79E:  MOVLB  0
0E7A0:  CALL   A82C
.................... 
.................... 
....................    data.func_type = ENUM_SMF_WRITE;
0E7A4:  MOVLB  1
0E7A6:  CLRF   xBD
....................    data.mission_id = CIGS_IV2_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0E7A8:  MOVLW  06
0E7AA:  MOVWF  xBC
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0E7AC:  MOVLW  02
0E7AE:  MOVWF  xBE
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0E7B0:  BCF    xBF.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0E7B2:  MOVLW  8E
0E7B4:  MOVWF  FF6
0E7B6:  MOVLW  15
0E7B8:  MOVWF  FF7
0E7BA:  MOVLW  00
0E7BC:  MOVWF  FF8
0E7BE:  MOVLB  0
0E7C0:  CALL   22DC
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0E7C4:  MOVLW  A0
0E7C6:  MOVWF  FF6
0E7C8:  MOVLW  15
0E7CA:  MOVWF  FF7
0E7CC:  MOVLW  00
0E7CE:  MOVWF  FF8
0E7D0:  MOVLW  0F
0E7D2:  MOVLB  9
0E7D4:  MOVWF  xC2
0E7D6:  MOVLB  0
0E7D8:  CALL   2312
0E7DC:  MOVFF  1BC,9E8
0E7E0:  MOVLW  37
0E7E2:  MOVLB  9
0E7E4:  MOVWF  xE9
0E7E6:  MOVLB  0
0E7E8:  CALL   2542
0E7EC:  MOVLW  0D
0E7EE:  BTFSS  FA6.6
0E7F0:  GOTO   E7EE
0E7F4:  MOVLB  E
0E7F6:  MOVWF  xF9
0E7F8:  MOVLW  0A
0E7FA:  MOVLB  0
0E7FC:  BTFSS  FA6.6
0E7FE:  GOTO   E7FC
0E802:  MOVLB  E
0E804:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0E806:  MOVLW  B6
0E808:  MOVWF  FF6
0E80A:  MOVLW  15
0E80C:  MOVWF  FF7
0E80E:  MOVLW  00
0E810:  MOVWF  FF8
0E812:  MOVLW  0F
0E814:  MOVLB  9
0E816:  MOVWF  xC2
0E818:  MOVLB  0
0E81A:  CALL   2312
0E81E:  MOVFF  1BD,9E8
0E822:  MOVLW  37
0E824:  MOVLB  9
0E826:  MOVWF  xE9
0E828:  MOVLB  0
0E82A:  CALL   2542
0E82E:  MOVLW  0D
0E830:  BTFSS  FA6.6
0E832:  GOTO   E830
0E836:  MOVLB  E
0E838:  MOVWF  xF9
0E83A:  MOVLW  0A
0E83C:  MOVLB  0
0E83E:  BTFSS  FA6.6
0E840:  GOTO   E83E
0E844:  MOVLB  E
0E846:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0E848:  MOVLW  CC
0E84A:  MOVWF  FF6
0E84C:  MOVLW  15
0E84E:  MOVWF  FF7
0E850:  MOVLW  00
0E852:  MOVWF  FF8
0E854:  MOVLW  0F
0E856:  MOVLB  9
0E858:  MOVWF  xC2
0E85A:  MOVLB  0
0E85C:  CALL   2312
0E860:  MOVFF  1BE,9E8
0E864:  MOVLW  37
0E866:  MOVLB  9
0E868:  MOVWF  xE9
0E86A:  MOVLB  0
0E86C:  CALL   2542
0E870:  MOVLW  0D
0E872:  BTFSS  FA6.6
0E874:  GOTO   E872
0E878:  MOVLB  E
0E87A:  MOVWF  xF9
0E87C:  MOVLW  0A
0E87E:  MOVLB  0
0E880:  BTFSS  FA6.6
0E882:  GOTO   E880
0E886:  MOVLB  E
0E888:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0E88A:  MOVLW  00
0E88C:  MOVLB  1
0E88E:  BTFSC  xBF.0
0E890:  MOVLW  01
0E892:  MOVWF  xC8
0E894:  MOVLW  E2
0E896:  MOVWF  FF6
0E898:  MOVLW  15
0E89A:  MOVWF  FF7
0E89C:  MOVLW  00
0E89E:  MOVWF  FF8
0E8A0:  MOVLW  0F
0E8A2:  MOVLB  9
0E8A4:  MOVWF  xC2
0E8A6:  MOVLB  0
0E8A8:  CALL   2312
0E8AC:  MOVFF  1C8,9E8
0E8B0:  MOVLW  37
0E8B2:  MOVLB  9
0E8B4:  MOVWF  xE9
0E8B6:  MOVLB  0
0E8B8:  CALL   2542
0E8BC:  MOVLW  0D
0E8BE:  BTFSS  FA6.6
0E8C0:  GOTO   E8BE
0E8C4:  MOVLB  E
0E8C6:  MOVWF  xF9
0E8C8:  MOVLW  0A
0E8CA:  MOVLB  0
0E8CC:  BTFSS  FA6.6
0E8CE:  GOTO   E8CC
0E8D2:  MOVLB  E
0E8D4:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0E8D6:  MOVLW  F8
0E8D8:  MOVWF  FF6
0E8DA:  MOVLW  15
0E8DC:  MOVWF  FF7
0E8DE:  MOVLW  00
0E8E0:  MOVWF  FF8
0E8E2:  MOVLW  0F
0E8E4:  MOVLB  9
0E8E6:  MOVWF  xC2
0E8E8:  MOVLB  0
0E8EA:  CALL   2312
0E8EE:  MOVLW  02
0E8F0:  MOVLB  1
0E8F2:  MOVWF  xC8
0E8F4:  MOVLB  0
0E8F6:  MOVLW  30
0E8F8:  BTFSS  FA6.6
0E8FA:  GOTO   E8F8
0E8FE:  MOVLB  E
0E900:  MOVWF  xF9
0E902:  MOVLB  1
0E904:  DECFSZ xC8,F
0E906:  BRA    E90C
0E908:  BRA    E912
0E90A:  MOVLB  0
0E90C:  MOVLB  0
0E90E:  GOTO   E8F6
0E912:  MOVFF  1C0,9E8
0E916:  MOVLW  37
0E918:  MOVLB  9
0E91A:  MOVWF  xE9
0E91C:  MOVLB  0
0E91E:  CALL   2542
0E922:  MOVLW  0D
0E924:  BTFSS  FA6.6
0E926:  GOTO   E924
0E92A:  MOVLB  E
0E92C:  MOVWF  xF9
0E92E:  MOVLW  0A
0E930:  MOVLB  0
0E932:  BTFSS  FA6.6
0E934:  GOTO   E932
0E938:  MOVLB  E
0E93A:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV2_DATA].uncopied_counter);
0E93C:  MOVLW  0E
0E93E:  MOVWF  FF6
0E940:  MOVLW  16
0E942:  MOVWF  FF7
0E944:  MOVLW  00
0E946:  MOVWF  FF8
0E948:  MOVLW  0F
0E94A:  MOVLB  9
0E94C:  MOVWF  xC2
0E94E:  MOVLB  0
0E950:  CALL   2312
0E954:  MOVLW  02
0E956:  MOVLB  1
0E958:  MOVWF  xC8
0E95A:  MOVLB  0
0E95C:  MOVLW  30
0E95E:  BTFSS  FA6.6
0E960:  GOTO   E95E
0E964:  MOVLB  E
0E966:  MOVWF  xF9
0E968:  MOVLB  1
0E96A:  DECFSZ xC8,F
0E96C:  BRA    E972
0E96E:  BRA    E978
0E970:  MOVLB  0
0E972:  MOVLB  0
0E974:  GOTO   E95C
0E978:  MOVFF  162,9E8
0E97C:  MOVLW  37
0E97E:  MOVLB  9
0E980:  MOVWF  xE9
0E982:  MOVLB  0
0E984:  CALL   2542
0E988:  MOVLW  0D
0E98A:  BTFSS  FA6.6
0E98C:  GOTO   E98A
0E990:  MOVLB  E
0E992:  MOVWF  xF9
0E994:  MOVLW  0A
0E996:  MOVLB  0
0E998:  BTFSS  FA6.6
0E99A:  GOTO   E998
0E99E:  MOVLB  E
0E9A0:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0E9A2:  MOVLW  01
0E9A4:  MOVLB  1
0E9A6:  MOVWF  xE0
0E9A8:  MOVLW  BC
0E9AA:  MOVWF  xDF
0E9AC:  MOVLB  0
0E9AE:  CALL   A82C
.................... 
....................    misf_update_address_area();
0E9B2:  CALL   505E
0E9B6:  GOTO   F9D2 (RETURN)
.................... 
.................... }
.................... 
.................... void mode_meas_iv_port1(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS IV PORT1\r\n");
*
0F012:  MOVLW  24
0F014:  MOVWF  FF6
0F016:  MOVLW  16
0F018:  MOVWF  FF7
0F01A:  MOVLW  00
0F01C:  MOVWF  FF8
0F01E:  CALL   22DC
.................... 
....................    mode_misf_erase_and_reset(uplinkcmd_ptr);
0F022:  MOVFF  1B0,1C9
0F026:  MOVFF  1AF,1C8
0F02A:  CALL   75D6
.................... 
....................    meas_iv_param_t cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0F02E:  MOVFF  1B0,1E6
0F032:  MOVFF  1AF,1E5
0F036:  CALL   8262
0F03A:  MOVFF  02,03
0F03E:  MOVF   01,W
0F040:  MOVWF  FE1
0F042:  MOVFF  03,FE2
0F046:  MOVLW  01
0F048:  MOVWF  FEA
0F04A:  MOVLW  B1
0F04C:  MOVWF  FE9
0F04E:  MOVLW  0B
0F050:  MOVWF  01
0F052:  MOVFF  FE6,FEE
0F056:  DECFSZ 01,F
0F058:  GOTO   F052
....................    sweep_port1(cmd.sweep_limit);
0F05C:  MOVFF  1BB,1C9
0F060:  MOVFF  1BA,1C8
0F064:  CALL   E9BA
.................... 
....................    FlashOperationStruct data = {0};
0F068:  MOVLB  1
0F06A:  CLRF   xBC
0F06C:  CLRF   xBD
0F06E:  CLRF   xBE
0F070:  CLRF   xBF
0F072:  CLRF   xC0
0F074:  CLRF   xC1
0F076:  CLRF   xC2
0F078:  CLRF   xC3
0F07A:  CLRF   xC4
0F07C:  CLRF   xC5
0F07E:  CLRF   xC6
0F080:  CLRF   xC7
....................    data.func_type = ENUM_SMF_WRITE;
0F082:  CLRF   xBD
....................    data.mission_id = CIGS_IV1_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0F084:  MOVLW  04
0F086:  MOVWF  xBC
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0F088:  MOVLW  02
0F08A:  MOVWF  xBE
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0F08C:  BCF    xBF.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0F08E:  MOVLW  40
0F090:  MOVWF  FF6
0F092:  MOVLW  16
0F094:  MOVWF  FF7
0F096:  MOVLW  00
0F098:  MOVWF  FF8
0F09A:  MOVLB  0
0F09C:  CALL   22DC
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0F0A0:  MOVLW  52
0F0A2:  MOVWF  FF6
0F0A4:  MOVLW  16
0F0A6:  MOVWF  FF7
0F0A8:  MOVLW  00
0F0AA:  MOVWF  FF8
0F0AC:  MOVLW  0F
0F0AE:  MOVLB  9
0F0B0:  MOVWF  xC2
0F0B2:  MOVLB  0
0F0B4:  CALL   2312
0F0B8:  MOVFF  1BC,9E8
0F0BC:  MOVLW  37
0F0BE:  MOVLB  9
0F0C0:  MOVWF  xE9
0F0C2:  MOVLB  0
0F0C4:  CALL   2542
0F0C8:  MOVLW  0D
0F0CA:  BTFSS  FA6.6
0F0CC:  GOTO   F0CA
0F0D0:  MOVLB  E
0F0D2:  MOVWF  xF9
0F0D4:  MOVLW  0A
0F0D6:  MOVLB  0
0F0D8:  BTFSS  FA6.6
0F0DA:  GOTO   F0D8
0F0DE:  MOVLB  E
0F0E0:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0F0E2:  MOVLW  68
0F0E4:  MOVWF  FF6
0F0E6:  MOVLW  16
0F0E8:  MOVWF  FF7
0F0EA:  MOVLW  00
0F0EC:  MOVWF  FF8
0F0EE:  MOVLW  0F
0F0F0:  MOVLB  9
0F0F2:  MOVWF  xC2
0F0F4:  MOVLB  0
0F0F6:  CALL   2312
0F0FA:  MOVFF  1BD,9E8
0F0FE:  MOVLW  37
0F100:  MOVLB  9
0F102:  MOVWF  xE9
0F104:  MOVLB  0
0F106:  CALL   2542
0F10A:  MOVLW  0D
0F10C:  BTFSS  FA6.6
0F10E:  GOTO   F10C
0F112:  MOVLB  E
0F114:  MOVWF  xF9
0F116:  MOVLW  0A
0F118:  MOVLB  0
0F11A:  BTFSS  FA6.6
0F11C:  GOTO   F11A
0F120:  MOVLB  E
0F122:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0F124:  MOVLW  7E
0F126:  MOVWF  FF6
0F128:  MOVLW  16
0F12A:  MOVWF  FF7
0F12C:  MOVLW  00
0F12E:  MOVWF  FF8
0F130:  MOVLW  0F
0F132:  MOVLB  9
0F134:  MOVWF  xC2
0F136:  MOVLB  0
0F138:  CALL   2312
0F13C:  MOVFF  1BE,9E8
0F140:  MOVLW  37
0F142:  MOVLB  9
0F144:  MOVWF  xE9
0F146:  MOVLB  0
0F148:  CALL   2542
0F14C:  MOVLW  0D
0F14E:  BTFSS  FA6.6
0F150:  GOTO   F14E
0F154:  MOVLB  E
0F156:  MOVWF  xF9
0F158:  MOVLW  0A
0F15A:  MOVLB  0
0F15C:  BTFSS  FA6.6
0F15E:  GOTO   F15C
0F162:  MOVLB  E
0F164:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0F166:  MOVLW  00
0F168:  MOVLB  1
0F16A:  BTFSC  xBF.0
0F16C:  MOVLW  01
0F16E:  MOVWF  xC8
0F170:  MOVLW  94
0F172:  MOVWF  FF6
0F174:  MOVLW  16
0F176:  MOVWF  FF7
0F178:  MOVLW  00
0F17A:  MOVWF  FF8
0F17C:  MOVLW  0F
0F17E:  MOVLB  9
0F180:  MOVWF  xC2
0F182:  MOVLB  0
0F184:  CALL   2312
0F188:  MOVFF  1C8,9E8
0F18C:  MOVLW  37
0F18E:  MOVLB  9
0F190:  MOVWF  xE9
0F192:  MOVLB  0
0F194:  CALL   2542
0F198:  MOVLW  0D
0F19A:  BTFSS  FA6.6
0F19C:  GOTO   F19A
0F1A0:  MOVLB  E
0F1A2:  MOVWF  xF9
0F1A4:  MOVLW  0A
0F1A6:  MOVLB  0
0F1A8:  BTFSS  FA6.6
0F1AA:  GOTO   F1A8
0F1AE:  MOVLB  E
0F1B0:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0F1B2:  MOVLW  AA
0F1B4:  MOVWF  FF6
0F1B6:  MOVLW  16
0F1B8:  MOVWF  FF7
0F1BA:  MOVLW  00
0F1BC:  MOVWF  FF8
0F1BE:  MOVLW  0F
0F1C0:  MOVLB  9
0F1C2:  MOVWF  xC2
0F1C4:  MOVLB  0
0F1C6:  CALL   2312
0F1CA:  MOVLW  02
0F1CC:  MOVLB  1
0F1CE:  MOVWF  xC8
0F1D0:  MOVLB  0
0F1D2:  MOVLW  30
0F1D4:  BTFSS  FA6.6
0F1D6:  GOTO   F1D4
0F1DA:  MOVLB  E
0F1DC:  MOVWF  xF9
0F1DE:  MOVLB  1
0F1E0:  DECFSZ xC8,F
0F1E2:  BRA    F1E8
0F1E4:  BRA    F1EE
0F1E6:  MOVLB  0
0F1E8:  MOVLB  0
0F1EA:  GOTO   F1D2
0F1EE:  MOVFF  1C0,9E8
0F1F2:  MOVLW  37
0F1F4:  MOVLB  9
0F1F6:  MOVWF  xE9
0F1F8:  MOVLB  0
0F1FA:  CALL   2542
0F1FE:  MOVLW  0D
0F200:  BTFSS  FA6.6
0F202:  GOTO   F200
0F206:  MOVLB  E
0F208:  MOVWF  xF9
0F20A:  MOVLW  0A
0F20C:  MOVLB  0
0F20E:  BTFSS  FA6.6
0F210:  GOTO   F20E
0F214:  MOVLB  E
0F216:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV1_DATA].uncopied_counter);
0F218:  MOVLW  C0
0F21A:  MOVWF  FF6
0F21C:  MOVLW  16
0F21E:  MOVWF  FF7
0F220:  MOVLW  00
0F222:  MOVWF  FF8
0F224:  MOVLW  0F
0F226:  MOVLB  9
0F228:  MOVWF  xC2
0F22A:  MOVLB  0
0F22C:  CALL   2312
0F230:  MOVLW  02
0F232:  MOVLB  1
0F234:  MOVWF  xC8
0F236:  MOVLB  0
0F238:  MOVLW  30
0F23A:  BTFSS  FA6.6
0F23C:  GOTO   F23A
0F240:  MOVLB  E
0F242:  MOVWF  xF9
0F244:  MOVLB  1
0F246:  DECFSZ xC8,F
0F248:  BRA    F24E
0F24A:  BRA    F254
0F24C:  MOVLB  0
0F24E:  MOVLB  0
0F250:  GOTO   F238
0F254:  MOVFF  14E,9E8
0F258:  MOVLW  37
0F25A:  MOVLB  9
0F25C:  MOVWF  xE9
0F25E:  MOVLB  0
0F260:  CALL   2542
0F264:  MOVLW  0D
0F266:  BTFSS  FA6.6
0F268:  GOTO   F266
0F26C:  MOVLB  E
0F26E:  MOVWF  xF9
0F270:  MOVLW  0A
0F272:  MOVLB  0
0F274:  BTFSS  FA6.6
0F276:  GOTO   F274
0F27A:  MOVLB  E
0F27C:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0F27E:  MOVLW  01
0F280:  MOVLB  1
0F282:  MOVWF  xE0
0F284:  MOVLW  BC
0F286:  MOVWF  xDF
0F288:  MOVLB  0
0F28A:  CALL   A82C
.................... 
....................    misf_update_address_area();
0F28E:  CALL   505E
0F292:  GOTO   F9EA (RETURN)
.................... }
.................... 
.................... void mode_meas_iv_port2(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS IV PORT2\r\n");
0F296:  MOVLW  D6
0F298:  MOVWF  FF6
0F29A:  MOVLW  16
0F29C:  MOVWF  FF7
0F29E:  MOVLW  00
0F2A0:  MOVWF  FF8
0F2A2:  CALL   22DC
.................... 
....................    mode_misf_erase_and_reset(uplinkcmd_ptr);
0F2A6:  MOVFF  1B0,1C9
0F2AA:  MOVFF  1AF,1C8
0F2AE:  CALL   75D6
....................    meas_iv_param_t cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0F2B2:  MOVFF  1B0,1E6
0F2B6:  MOVFF  1AF,1E5
0F2BA:  CALL   8262
0F2BE:  MOVFF  02,03
0F2C2:  MOVF   01,W
0F2C4:  MOVWF  FE1
0F2C6:  MOVFF  03,FE2
0F2CA:  MOVLW  01
0F2CC:  MOVWF  FEA
0F2CE:  MOVLW  B1
0F2D0:  MOVWF  FE9
0F2D2:  MOVLW  0B
0F2D4:  MOVWF  01
0F2D6:  MOVFF  FE6,FEE
0F2DA:  DECFSZ 01,F
0F2DC:  GOTO   F2D6
....................    sweep_port1(cmd.sweep_limit);
0F2E0:  MOVFF  1BB,1C9
0F2E4:  MOVFF  1BA,1C8
0F2E8:  CALL   E9BA
.................... 
....................    FlashOperationStruct data = {0};
0F2EC:  MOVLB  1
0F2EE:  CLRF   xBC
0F2F0:  CLRF   xBD
0F2F2:  CLRF   xBE
0F2F4:  CLRF   xBF
0F2F6:  CLRF   xC0
0F2F8:  CLRF   xC1
0F2FA:  CLRF   xC2
0F2FC:  CLRF   xC3
0F2FE:  CLRF   xC4
0F300:  CLRF   xC5
0F302:  CLRF   xC6
0F304:  CLRF   xC7
....................    data.func_type = ENUM_SMF_WRITE;
0F306:  CLRF   xBD
....................    data.mission_id = CIGS_IV2_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0F308:  MOVLW  06
0F30A:  MOVWF  xBC
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0F30C:  MOVLW  02
0F30E:  MOVWF  xBE
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0F310:  BCF    xBF.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0F312:  MOVLW  F2
0F314:  MOVWF  FF6
0F316:  MOVLW  16
0F318:  MOVWF  FF7
0F31A:  MOVLW  00
0F31C:  MOVWF  FF8
0F31E:  MOVLB  0
0F320:  CALL   22DC
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0F324:  MOVLW  04
0F326:  MOVWF  FF6
0F328:  MOVLW  17
0F32A:  MOVWF  FF7
0F32C:  MOVLW  00
0F32E:  MOVWF  FF8
0F330:  MOVLW  0F
0F332:  MOVLB  9
0F334:  MOVWF  xC2
0F336:  MOVLB  0
0F338:  CALL   2312
0F33C:  MOVFF  1BC,9E8
0F340:  MOVLW  37
0F342:  MOVLB  9
0F344:  MOVWF  xE9
0F346:  MOVLB  0
0F348:  CALL   2542
0F34C:  MOVLW  0D
0F34E:  BTFSS  FA6.6
0F350:  GOTO   F34E
0F354:  MOVLB  E
0F356:  MOVWF  xF9
0F358:  MOVLW  0A
0F35A:  MOVLB  0
0F35C:  BTFSS  FA6.6
0F35E:  GOTO   F35C
0F362:  MOVLB  E
0F364:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0F366:  MOVLW  1A
0F368:  MOVWF  FF6
0F36A:  MOVLW  17
0F36C:  MOVWF  FF7
0F36E:  MOVLW  00
0F370:  MOVWF  FF8
0F372:  MOVLW  0F
0F374:  MOVLB  9
0F376:  MOVWF  xC2
0F378:  MOVLB  0
0F37A:  CALL   2312
0F37E:  MOVFF  1BD,9E8
0F382:  MOVLW  37
0F384:  MOVLB  9
0F386:  MOVWF  xE9
0F388:  MOVLB  0
0F38A:  CALL   2542
0F38E:  MOVLW  0D
0F390:  BTFSS  FA6.6
0F392:  GOTO   F390
0F396:  MOVLB  E
0F398:  MOVWF  xF9
0F39A:  MOVLW  0A
0F39C:  MOVLB  0
0F39E:  BTFSS  FA6.6
0F3A0:  GOTO   F39E
0F3A4:  MOVLB  E
0F3A6:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0F3A8:  MOVLW  30
0F3AA:  MOVWF  FF6
0F3AC:  MOVLW  17
0F3AE:  MOVWF  FF7
0F3B0:  MOVLW  00
0F3B2:  MOVWF  FF8
0F3B4:  MOVLW  0F
0F3B6:  MOVLB  9
0F3B8:  MOVWF  xC2
0F3BA:  MOVLB  0
0F3BC:  CALL   2312
0F3C0:  MOVFF  1BE,9E8
0F3C4:  MOVLW  37
0F3C6:  MOVLB  9
0F3C8:  MOVWF  xE9
0F3CA:  MOVLB  0
0F3CC:  CALL   2542
0F3D0:  MOVLW  0D
0F3D2:  BTFSS  FA6.6
0F3D4:  GOTO   F3D2
0F3D8:  MOVLB  E
0F3DA:  MOVWF  xF9
0F3DC:  MOVLW  0A
0F3DE:  MOVLB  0
0F3E0:  BTFSS  FA6.6
0F3E2:  GOTO   F3E0
0F3E6:  MOVLB  E
0F3E8:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0F3EA:  MOVLW  00
0F3EC:  MOVLB  1
0F3EE:  BTFSC  xBF.0
0F3F0:  MOVLW  01
0F3F2:  MOVWF  xC8
0F3F4:  MOVLW  46
0F3F6:  MOVWF  FF6
0F3F8:  MOVLW  17
0F3FA:  MOVWF  FF7
0F3FC:  MOVLW  00
0F3FE:  MOVWF  FF8
0F400:  MOVLW  0F
0F402:  MOVLB  9
0F404:  MOVWF  xC2
0F406:  MOVLB  0
0F408:  CALL   2312
0F40C:  MOVFF  1C8,9E8
0F410:  MOVLW  37
0F412:  MOVLB  9
0F414:  MOVWF  xE9
0F416:  MOVLB  0
0F418:  CALL   2542
0F41C:  MOVLW  0D
0F41E:  BTFSS  FA6.6
0F420:  GOTO   F41E
0F424:  MOVLB  E
0F426:  MOVWF  xF9
0F428:  MOVLW  0A
0F42A:  MOVLB  0
0F42C:  BTFSS  FA6.6
0F42E:  GOTO   F42C
0F432:  MOVLB  E
0F434:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0F436:  MOVLW  5C
0F438:  MOVWF  FF6
0F43A:  MOVLW  17
0F43C:  MOVWF  FF7
0F43E:  MOVLW  00
0F440:  MOVWF  FF8
0F442:  MOVLW  0F
0F444:  MOVLB  9
0F446:  MOVWF  xC2
0F448:  MOVLB  0
0F44A:  CALL   2312
0F44E:  MOVLW  02
0F450:  MOVLB  1
0F452:  MOVWF  xC8
0F454:  MOVLB  0
0F456:  MOVLW  30
0F458:  BTFSS  FA6.6
0F45A:  GOTO   F458
0F45E:  MOVLB  E
0F460:  MOVWF  xF9
0F462:  MOVLB  1
0F464:  DECFSZ xC8,F
0F466:  BRA    F46C
0F468:  BRA    F472
0F46A:  MOVLB  0
0F46C:  MOVLB  0
0F46E:  GOTO   F456
0F472:  MOVFF  1C0,9E8
0F476:  MOVLW  37
0F478:  MOVLB  9
0F47A:  MOVWF  xE9
0F47C:  MOVLB  0
0F47E:  CALL   2542
0F482:  MOVLW  0D
0F484:  BTFSS  FA6.6
0F486:  GOTO   F484
0F48A:  MOVLB  E
0F48C:  MOVWF  xF9
0F48E:  MOVLW  0A
0F490:  MOVLB  0
0F492:  BTFSS  FA6.6
0F494:  GOTO   F492
0F498:  MOVLB  E
0F49A:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV2_DATA].uncopied_counter);
0F49C:  MOVLW  72
0F49E:  MOVWF  FF6
0F4A0:  MOVLW  17
0F4A2:  MOVWF  FF7
0F4A4:  MOVLW  00
0F4A6:  MOVWF  FF8
0F4A8:  MOVLW  0F
0F4AA:  MOVLB  9
0F4AC:  MOVWF  xC2
0F4AE:  MOVLB  0
0F4B0:  CALL   2312
0F4B4:  MOVLW  02
0F4B6:  MOVLB  1
0F4B8:  MOVWF  xC8
0F4BA:  MOVLB  0
0F4BC:  MOVLW  30
0F4BE:  BTFSS  FA6.6
0F4C0:  GOTO   F4BE
0F4C4:  MOVLB  E
0F4C6:  MOVWF  xF9
0F4C8:  MOVLB  1
0F4CA:  DECFSZ xC8,F
0F4CC:  BRA    F4D2
0F4CE:  BRA    F4D8
0F4D0:  MOVLB  0
0F4D2:  MOVLB  0
0F4D4:  GOTO   F4BC
0F4D8:  MOVFF  162,9E8
0F4DC:  MOVLW  37
0F4DE:  MOVLB  9
0F4E0:  MOVWF  xE9
0F4E2:  MOVLB  0
0F4E4:  CALL   2542
0F4E8:  MOVLW  0D
0F4EA:  BTFSS  FA6.6
0F4EC:  GOTO   F4EA
0F4F0:  MOVLB  E
0F4F2:  MOVWF  xF9
0F4F4:  MOVLW  0A
0F4F6:  MOVLB  0
0F4F8:  BTFSS  FA6.6
0F4FA:  GOTO   F4F8
0F4FE:  MOVLB  E
0F500:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0F502:  MOVLW  01
0F504:  MOVLB  1
0F506:  MOVWF  xE0
0F508:  MOVLW  BC
0F50A:  MOVWF  xDF
0F50C:  MOVLB  0
0F50E:  CALL   A82C
.................... 
....................    misf_update_address_area();
0F512:  CALL   505E
0F516:  GOTO   FA02 (RETURN)
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... }
.................... 
.................... 
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS IV\r\n");
*
0AA8C:  MOVLW  88
0AA8E:  MOVWF  FF6
0AA90:  MOVLW  17
0AA92:  MOVWF  FF7
0AA94:  MOVLW  00
0AA96:  MOVWF  FF8
0AA98:  CALL   22DC
....................    meas_iv_param_t cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0AA9C:  MOVFF  1B0,1E6
0AAA0:  MOVFF  1AF,1E5
0AAA4:  CALL   8262
0AAA8:  MOVFF  02,03
0AAAC:  MOVF   01,W
0AAAE:  MOVWF  FE1
0AAB0:  MOVFF  03,FE2
0AAB4:  MOVLW  01
0AAB6:  MOVWF  FEA
0AAB8:  MOVLW  B1
0AABA:  MOVWF  FE9
0AABC:  MOVLW  0B
0AABE:  MOVWF  01
0AAC0:  MOVFF  FE6,FEE
0AAC4:  DECFSZ 01,F
0AAC6:  GOTO   AAC0
....................    print_meas_iv_cmd(&cmd); // Print the command parameters for debugging
0AACA:  MOVLW  01
0AACC:  MOVLB  1
0AACE:  MOVWF  xE0
0AAD0:  MOVLW  B1
0AAD2:  MOVWF  xDF
0AAD4:  MOVLB  0
0AAD6:  GOTO   8F7E
....................    piclog_make(cmd.id, PICLOG_PARAM_START); // Log the start of the command execution
0AADA:  MOVFF  1B1,20F
0AADE:  MOVLB  2
0AAE0:  CLRF   x10
0AAE2:  MOVLB  0
0AAE4:  CALL   50EC
.................... 
....................    unsigned int32 start_time = get_current_sec();
....................    unsigned int32 current_sec = 0;
....................    unsigned int16 time_ms = 0;
....................    unsigned int8 counter = 0;
0AAE8:  CALL   3C18
0AAEC:  MOVFF  03,1BF
0AAF0:  MOVFF  02,1BE
0AAF4:  MOVFF  01,1BD
0AAF8:  MOVFF  00,1BC
0AAFC:  MOVLB  1
0AAFE:  CLRF   xC3
0AB00:  CLRF   xC2
0AB02:  CLRF   xC1
0AB04:  CLRF   xC0
0AB06:  CLRF   xC5
0AB08:  CLRF   xC4
0AB0A:  CLRF   xC6
0AB0C:  MOVLB  0
....................    do
....................    {
....................       sweep(cmd.log_threshold, cmd.sweep_limit, cmd.pd_threshold); 
0AB0E:  MOVFF  1B9,1E0
0AB12:  MOVFF  1B8,1DF
0AB16:  MOVFF  1BB,1E2
0AB1A:  MOVFF  1BA,1E1
0AB1E:  MOVFF  1B5,1E4
0AB22:  MOVFF  1B4,1E3
0AB26:  CALL   9B48
....................       if (cmd.interval > 0){
0AB2A:  MOVLB  1
0AB2C:  MOVF   xB2,F
0AB2E:  BTFSC  FD8.2
0AB30:  BRA    AB38
0AB32:  MOVLB  0
0AB34:  GOTO   AB4A
0AB38:  MOVLB  0
0AB3A:  MOVLB  1
0AB3C:  MOVF   xB3,F
0AB3E:  BTFSS  FD8.2
0AB40:  BRA    AB48
0AB42:  MOVLB  0
0AB44:  GOTO   AB72
0AB48:  MOVLB  0
....................          delay_ms(cmd.interval);
0AB4A:  MOVFF  1B3,1DF
0AB4E:  MOVLB  1
0AB50:  INCF   xDF,F
0AB52:  MOVLB  0
0AB54:  MOVLB  1
0AB56:  DECFSZ xDF,F
0AB58:  BRA    AB5E
0AB5A:  MOVLB  0
0AB5C:  BRA    AB6A
0AB5E:  MOVLB  B
0AB60:  SETF   x02
0AB62:  MOVLB  0
0AB64:  CALL   22AE
0AB68:  BRA    AB54
0AB6A:  MOVFF  1B2,B02
0AB6E:  CALL   22AE
....................       }
....................       check_and_respond_to_boss(); // Check for boss commands during the wait period
0AB72:  GOTO   A7EC
....................    } while (get_current_sec() - start_time < cmd.meas_time);
0AB76:  CALL   3C18
0AB7A:  MOVFF  03,1E2
0AB7E:  MOVFF  02,1E1
0AB82:  MOVFF  01,1E0
0AB86:  MOVFF  00,1DF
0AB8A:  MOVLB  1
0AB8C:  MOVF   xBC,W
0AB8E:  SUBWF  xDF,F
0AB90:  MOVF   xBD,W
0AB92:  SUBWFB xE0,F
0AB94:  MOVF   xBE,W
0AB96:  SUBWFB xE1,F
0AB98:  MOVF   xBF,W
0AB9A:  SUBWFB xE2,F
0AB9C:  MOVF   xE2,F
0AB9E:  BTFSC  FD8.2
0ABA0:  BRA    ABA8
0ABA2:  MOVLB  0
0ABA4:  GOTO   ABE4
0ABA8:  MOVLB  0
0ABAA:  MOVLB  1
0ABAC:  MOVF   xE1,F
0ABAE:  BTFSC  FD8.2
0ABB0:  BRA    ABB8
0ABB2:  MOVLB  0
0ABB4:  GOTO   ABE4
0ABB8:  MOVLB  0
0ABBA:  MOVLB  1
0ABBC:  MOVF   xE0,W
0ABBE:  SUBWF  xB7,W
0ABC0:  BTFSC  FD8.0
0ABC2:  BRA    ABCA
0ABC4:  MOVLB  0
0ABC6:  GOTO   ABE4
0ABCA:  MOVLB  0
0ABCC:  BTFSS  FD8.2
0ABCE:  GOTO   AB0E
0ABD2:  MOVLB  1
0ABD4:  MOVF   xB6,W
0ABD6:  SUBWF  xDF,W
0ABD8:  BTFSC  FD8.0
0ABDA:  BRA    ABE2
0ABDC:  MOVLB  0
0ABDE:  GOTO   AB0E
0ABE2:  MOVLB  0
....................    misf_update_address_area();
0ABE4:  CALL   505E
....................    piclog_make(cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
0ABE8:  MOVFF  1B1,20F
0ABEC:  MOVLB  2
0ABEE:  SETF   x10
0ABF0:  MOVLB  0
0ABF2:  CALL   50EC
.................... 
.................... 
.................... 
....................    FlashOperationStruct data = {0};
0ABF6:  MOVLB  1
0ABF8:  CLRF   xC7
0ABFA:  CLRF   xC8
0ABFC:  CLRF   xC9
0ABFE:  CLRF   xCA
0AC00:  CLRF   xCB
0AC02:  CLRF   xCC
0AC04:  CLRF   xCD
0AC06:  CLRF   xCE
0AC08:  CLRF   xCF
0AC0A:  CLRF   xD0
0AC0C:  CLRF   xD1
0AC0E:  CLRF   xD2
....................    data.func_type = ENUM_SMF_WRITE;
0AC10:  CLRF   xC8
....................    data.mission_id = CIGS_IV1_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0AC12:  MOVLW  04
0AC14:  MOVWF  xC7
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0AC16:  MOVLW  02
0AC18:  MOVWF  xC9
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0AC1A:  BCF    xCA.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0AC1C:  MOVLW  9E
0AC1E:  MOVWF  FF6
0AC20:  MOVLW  17
0AC22:  MOVWF  FF7
0AC24:  MOVLW  00
0AC26:  MOVWF  FF8
0AC28:  MOVLB  0
0AC2A:  CALL   22DC
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0AC2E:  MOVLW  B0
0AC30:  MOVWF  FF6
0AC32:  MOVLW  17
0AC34:  MOVWF  FF7
0AC36:  MOVLW  00
0AC38:  MOVWF  FF8
0AC3A:  MOVLW  0F
0AC3C:  MOVLB  9
0AC3E:  MOVWF  xC2
0AC40:  MOVLB  0
0AC42:  CALL   2312
0AC46:  MOVFF  1C7,9E8
0AC4A:  MOVLW  37
0AC4C:  MOVLB  9
0AC4E:  MOVWF  xE9
0AC50:  MOVLB  0
0AC52:  CALL   2542
0AC56:  MOVLW  0D
0AC58:  BTFSS  FA6.6
0AC5A:  GOTO   AC58
0AC5E:  MOVLB  E
0AC60:  MOVWF  xF9
0AC62:  MOVLW  0A
0AC64:  MOVLB  0
0AC66:  BTFSS  FA6.6
0AC68:  GOTO   AC66
0AC6C:  MOVLB  E
0AC6E:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0AC70:  MOVLW  C6
0AC72:  MOVWF  FF6
0AC74:  MOVLW  17
0AC76:  MOVWF  FF7
0AC78:  MOVLW  00
0AC7A:  MOVWF  FF8
0AC7C:  MOVLW  0F
0AC7E:  MOVLB  9
0AC80:  MOVWF  xC2
0AC82:  MOVLB  0
0AC84:  CALL   2312
0AC88:  MOVFF  1C8,9E8
0AC8C:  MOVLW  37
0AC8E:  MOVLB  9
0AC90:  MOVWF  xE9
0AC92:  MOVLB  0
0AC94:  CALL   2542
0AC98:  MOVLW  0D
0AC9A:  BTFSS  FA6.6
0AC9C:  GOTO   AC9A
0ACA0:  MOVLB  E
0ACA2:  MOVWF  xF9
0ACA4:  MOVLW  0A
0ACA6:  MOVLB  0
0ACA8:  BTFSS  FA6.6
0ACAA:  GOTO   ACA8
0ACAE:  MOVLB  E
0ACB0:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0ACB2:  MOVLW  DC
0ACB4:  MOVWF  FF6
0ACB6:  MOVLW  17
0ACB8:  MOVWF  FF7
0ACBA:  MOVLW  00
0ACBC:  MOVWF  FF8
0ACBE:  MOVLW  0F
0ACC0:  MOVLB  9
0ACC2:  MOVWF  xC2
0ACC4:  MOVLB  0
0ACC6:  CALL   2312
0ACCA:  MOVFF  1C9,9E8
0ACCE:  MOVLW  37
0ACD0:  MOVLB  9
0ACD2:  MOVWF  xE9
0ACD4:  MOVLB  0
0ACD6:  CALL   2542
0ACDA:  MOVLW  0D
0ACDC:  BTFSS  FA6.6
0ACDE:  GOTO   ACDC
0ACE2:  MOVLB  E
0ACE4:  MOVWF  xF9
0ACE6:  MOVLW  0A
0ACE8:  MOVLB  0
0ACEA:  BTFSS  FA6.6
0ACEC:  GOTO   ACEA
0ACF0:  MOVLB  E
0ACF2:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0ACF4:  MOVLW  00
0ACF6:  MOVLB  1
0ACF8:  BTFSC  xCA.0
0ACFA:  MOVLW  01
0ACFC:  MOVWF  xDF
0ACFE:  MOVLW  F2
0AD00:  MOVWF  FF6
0AD02:  MOVLW  17
0AD04:  MOVWF  FF7
0AD06:  MOVLW  00
0AD08:  MOVWF  FF8
0AD0A:  MOVLW  0F
0AD0C:  MOVLB  9
0AD0E:  MOVWF  xC2
0AD10:  MOVLB  0
0AD12:  CALL   2312
0AD16:  MOVFF  1DF,9E8
0AD1A:  MOVLW  37
0AD1C:  MOVLB  9
0AD1E:  MOVWF  xE9
0AD20:  MOVLB  0
0AD22:  CALL   2542
0AD26:  MOVLW  0D
0AD28:  BTFSS  FA6.6
0AD2A:  GOTO   AD28
0AD2E:  MOVLB  E
0AD30:  MOVWF  xF9
0AD32:  MOVLW  0A
0AD34:  MOVLB  0
0AD36:  BTFSS  FA6.6
0AD38:  GOTO   AD36
0AD3C:  MOVLB  E
0AD3E:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0AD40:  MOVLW  08
0AD42:  MOVWF  FF6
0AD44:  MOVLW  18
0AD46:  MOVWF  FF7
0AD48:  MOVLW  00
0AD4A:  MOVWF  FF8
0AD4C:  MOVLW  0F
0AD4E:  MOVLB  9
0AD50:  MOVWF  xC2
0AD52:  MOVLB  0
0AD54:  CALL   2312
0AD58:  MOVLW  02
0AD5A:  MOVLB  1
0AD5C:  MOVWF  xDF
0AD5E:  MOVLB  0
0AD60:  MOVLW  30
0AD62:  BTFSS  FA6.6
0AD64:  GOTO   AD62
0AD68:  MOVLB  E
0AD6A:  MOVWF  xF9
0AD6C:  MOVLB  1
0AD6E:  DECFSZ xDF,F
0AD70:  BRA    AD76
0AD72:  BRA    AD7C
0AD74:  MOVLB  0
0AD76:  MOVLB  0
0AD78:  GOTO   AD60
0AD7C:  MOVFF  1CB,9E8
0AD80:  MOVLW  37
0AD82:  MOVLB  9
0AD84:  MOVWF  xE9
0AD86:  MOVLB  0
0AD88:  CALL   2542
0AD8C:  MOVLW  0D
0AD8E:  BTFSS  FA6.6
0AD90:  GOTO   AD8E
0AD94:  MOVLB  E
0AD96:  MOVWF  xF9
0AD98:  MOVLW  0A
0AD9A:  MOVLB  0
0AD9C:  BTFSS  FA6.6
0AD9E:  GOTO   AD9C
0ADA2:  MOVLB  E
0ADA4:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV1_DATA].uncopied_counter);
0ADA6:  MOVLW  1E
0ADA8:  MOVWF  FF6
0ADAA:  MOVLW  18
0ADAC:  MOVWF  FF7
0ADAE:  MOVLW  00
0ADB0:  MOVWF  FF8
0ADB2:  MOVLW  0F
0ADB4:  MOVLB  9
0ADB6:  MOVWF  xC2
0ADB8:  MOVLB  0
0ADBA:  CALL   2312
0ADBE:  MOVLW  02
0ADC0:  MOVLB  1
0ADC2:  MOVWF  xDF
0ADC4:  MOVLB  0
0ADC6:  MOVLW  30
0ADC8:  BTFSS  FA6.6
0ADCA:  GOTO   ADC8
0ADCE:  MOVLB  E
0ADD0:  MOVWF  xF9
0ADD2:  MOVLB  1
0ADD4:  DECFSZ xDF,F
0ADD6:  BRA    ADDC
0ADD8:  BRA    ADE2
0ADDA:  MOVLB  0
0ADDC:  MOVLB  0
0ADDE:  GOTO   ADC6
0ADE2:  MOVFF  14E,9E8
0ADE6:  MOVLW  37
0ADE8:  MOVLB  9
0ADEA:  MOVWF  xE9
0ADEC:  MOVLB  0
0ADEE:  CALL   2542
0ADF2:  MOVLW  0D
0ADF4:  BTFSS  FA6.6
0ADF6:  GOTO   ADF4
0ADFA:  MOVLB  E
0ADFC:  MOVWF  xF9
0ADFE:  MOVLW  0A
0AE00:  MOVLB  0
0AE02:  BTFSS  FA6.6
0AE04:  GOTO   AE02
0AE08:  MOVLB  E
0AE0A:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0AE0C:  MOVLW  01
0AE0E:  MOVLB  1
0AE10:  MOVWF  xE0
0AE12:  MOVLW  C7
0AE14:  MOVWF  xDF
0AE16:  MOVLB  0
0AE18:  CALL   A82C
.................... 
.................... 
....................    data.func_type = ENUM_SMF_WRITE;
0AE1C:  MOVLB  1
0AE1E:  CLRF   xC8
....................    data.mission_id = CIGS_IV2_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0AE20:  MOVLW  06
0AE22:  MOVWF  xC7
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0AE24:  MOVLW  02
0AE26:  MOVWF  xC9
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0AE28:  BCF    xCA.0
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0AE2A:  MOVLW  34
0AE2C:  MOVWF  FF6
0AE2E:  MOVLW  18
0AE30:  MOVWF  FF7
0AE32:  MOVLW  00
0AE34:  MOVWF  FF8
0AE36:  MOVLB  0
0AE38:  CALL   22DC
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0AE3C:  MOVLW  46
0AE3E:  MOVWF  FF6
0AE40:  MOVLW  18
0AE42:  MOVWF  FF7
0AE44:  MOVLW  00
0AE46:  MOVWF  FF8
0AE48:  MOVLW  0F
0AE4A:  MOVLB  9
0AE4C:  MOVWF  xC2
0AE4E:  MOVLB  0
0AE50:  CALL   2312
0AE54:  MOVFF  1C7,9E8
0AE58:  MOVLW  37
0AE5A:  MOVLB  9
0AE5C:  MOVWF  xE9
0AE5E:  MOVLB  0
0AE60:  CALL   2542
0AE64:  MOVLW  0D
0AE66:  BTFSS  FA6.6
0AE68:  GOTO   AE66
0AE6C:  MOVLB  E
0AE6E:  MOVWF  xF9
0AE70:  MOVLW  0A
0AE72:  MOVLB  0
0AE74:  BTFSS  FA6.6
0AE76:  GOTO   AE74
0AE7A:  MOVLB  E
0AE7C:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0AE7E:  MOVLW  5C
0AE80:  MOVWF  FF6
0AE82:  MOVLW  18
0AE84:  MOVWF  FF7
0AE86:  MOVLW  00
0AE88:  MOVWF  FF8
0AE8A:  MOVLW  0F
0AE8C:  MOVLB  9
0AE8E:  MOVWF  xC2
0AE90:  MOVLB  0
0AE92:  CALL   2312
0AE96:  MOVFF  1C8,9E8
0AE9A:  MOVLW  37
0AE9C:  MOVLB  9
0AE9E:  MOVWF  xE9
0AEA0:  MOVLB  0
0AEA2:  CALL   2542
0AEA6:  MOVLW  0D
0AEA8:  BTFSS  FA6.6
0AEAA:  GOTO   AEA8
0AEAE:  MOVLB  E
0AEB0:  MOVWF  xF9
0AEB2:  MOVLW  0A
0AEB4:  MOVLB  0
0AEB6:  BTFSS  FA6.6
0AEB8:  GOTO   AEB6
0AEBC:  MOVLB  E
0AEBE:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0AEC0:  MOVLW  72
0AEC2:  MOVWF  FF6
0AEC4:  MOVLW  18
0AEC6:  MOVWF  FF7
0AEC8:  MOVLW  00
0AECA:  MOVWF  FF8
0AECC:  MOVLW  0F
0AECE:  MOVLB  9
0AED0:  MOVWF  xC2
0AED2:  MOVLB  0
0AED4:  CALL   2312
0AED8:  MOVFF  1C9,9E8
0AEDC:  MOVLW  37
0AEDE:  MOVLB  9
0AEE0:  MOVWF  xE9
0AEE2:  MOVLB  0
0AEE4:  CALL   2542
0AEE8:  MOVLW  0D
0AEEA:  BTFSS  FA6.6
0AEEC:  GOTO   AEEA
0AEF0:  MOVLB  E
0AEF2:  MOVWF  xF9
0AEF4:  MOVLW  0A
0AEF6:  MOVLB  0
0AEF8:  BTFSS  FA6.6
0AEFA:  GOTO   AEF8
0AEFE:  MOVLB  E
0AF00:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0AF02:  MOVLW  00
0AF04:  MOVLB  1
0AF06:  BTFSC  xCA.0
0AF08:  MOVLW  01
0AF0A:  MOVWF  xDF
0AF0C:  MOVLW  88
0AF0E:  MOVWF  FF6
0AF10:  MOVLW  18
0AF12:  MOVWF  FF7
0AF14:  MOVLW  00
0AF16:  MOVWF  FF8
0AF18:  MOVLW  0F
0AF1A:  MOVLB  9
0AF1C:  MOVWF  xC2
0AF1E:  MOVLB  0
0AF20:  CALL   2312
0AF24:  MOVFF  1DF,9E8
0AF28:  MOVLW  37
0AF2A:  MOVLB  9
0AF2C:  MOVWF  xE9
0AF2E:  MOVLB  0
0AF30:  CALL   2542
0AF34:  MOVLW  0D
0AF36:  BTFSS  FA6.6
0AF38:  GOTO   AF36
0AF3C:  MOVLB  E
0AF3E:  MOVWF  xF9
0AF40:  MOVLW  0A
0AF42:  MOVLB  0
0AF44:  BTFSS  FA6.6
0AF46:  GOTO   AF44
0AF4A:  MOVLB  E
0AF4C:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0AF4E:  MOVLW  9E
0AF50:  MOVWF  FF6
0AF52:  MOVLW  18
0AF54:  MOVWF  FF7
0AF56:  MOVLW  00
0AF58:  MOVWF  FF8
0AF5A:  MOVLW  0F
0AF5C:  MOVLB  9
0AF5E:  MOVWF  xC2
0AF60:  MOVLB  0
0AF62:  CALL   2312
0AF66:  MOVLW  02
0AF68:  MOVLB  1
0AF6A:  MOVWF  xDF
0AF6C:  MOVLB  0
0AF6E:  MOVLW  30
0AF70:  BTFSS  FA6.6
0AF72:  GOTO   AF70
0AF76:  MOVLB  E
0AF78:  MOVWF  xF9
0AF7A:  MOVLB  1
0AF7C:  DECFSZ xDF,F
0AF7E:  BRA    AF84
0AF80:  BRA    AF8A
0AF82:  MOVLB  0
0AF84:  MOVLB  0
0AF86:  GOTO   AF6E
0AF8A:  MOVFF  1CB,9E8
0AF8E:  MOVLW  37
0AF90:  MOVLB  9
0AF92:  MOVWF  xE9
0AF94:  MOVLB  0
0AF96:  CALL   2542
0AF9A:  MOVLW  0D
0AF9C:  BTFSS  FA6.6
0AF9E:  GOTO   AF9C
0AFA2:  MOVLB  E
0AFA4:  MOVWF  xF9
0AFA6:  MOVLW  0A
0AFA8:  MOVLB  0
0AFAA:  BTFSS  FA6.6
0AFAC:  GOTO   AFAA
0AFB0:  MOVLB  E
0AFB2:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV2_DATA].uncopied_counter);
0AFB4:  MOVLW  B4
0AFB6:  MOVWF  FF6
0AFB8:  MOVLW  18
0AFBA:  MOVWF  FF7
0AFBC:  MOVLW  00
0AFBE:  MOVWF  FF8
0AFC0:  MOVLW  0F
0AFC2:  MOVLB  9
0AFC4:  MOVWF  xC2
0AFC6:  MOVLB  0
0AFC8:  CALL   2312
0AFCC:  MOVLW  02
0AFCE:  MOVLB  1
0AFD0:  MOVWF  xDF
0AFD2:  MOVLB  0
0AFD4:  MOVLW  30
0AFD6:  BTFSS  FA6.6
0AFD8:  GOTO   AFD6
0AFDC:  MOVLB  E
0AFDE:  MOVWF  xF9
0AFE0:  MOVLB  1
0AFE2:  DECFSZ xDF,F
0AFE4:  BRA    AFEA
0AFE6:  BRA    AFF0
0AFE8:  MOVLB  0
0AFEA:  MOVLB  0
0AFEC:  GOTO   AFD4
0AFF0:  MOVFF  162,9E8
0AFF4:  MOVLW  37
0AFF6:  MOVLB  9
0AFF8:  MOVWF  xE9
0AFFA:  MOVLB  0
0AFFC:  CALL   2542
0B000:  MOVLW  0D
0B002:  BTFSS  FA6.6
0B004:  GOTO   B002
0B008:  MOVLB  E
0B00A:  MOVWF  xF9
0B00C:  MOVLW  0A
0B00E:  MOVLB  0
0B010:  BTFSS  FA6.6
0B012:  GOTO   B010
0B016:  MOVLB  E
0B018:  MOVWF  xF9
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0B01A:  MOVLW  01
0B01C:  MOVLB  1
0B01E:  MOVWF  xE0
0B020:  MOVLW  C7
0B022:  MOVWF  xDF
0B024:  MOVLB  0
0B026:  CALL   A82C
.................... 
.................... 
....................    FlashOperationStruct piclog = {0};
0B02A:  MOVLB  1
0B02C:  CLRF   xD3
0B02E:  CLRF   xD4
0B030:  CLRF   xD5
0B032:  CLRF   xD6
0B034:  CLRF   xD7
0B036:  CLRF   xD8
0B038:  CLRF   xD9
0B03A:  CLRF   xDA
0B03C:  CLRF   xDB
0B03E:  CLRF   xDC
0B040:  CLRF   xDD
0B042:  CLRF   xDE
....................    piclog.func_type = ENUM_SMF_WRITE;
0B044:  CLRF   xD4
....................    piclog.mission_id = FLASH_ID_PICLOG; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0B046:  MOVLW  01
0B048:  MOVWF  xD3
....................    piclog.write_mode = SMF_WRITE_CIRCULAR;
0B04A:  MOVLW  02
0B04C:  MOVWF  xD5
....................    piclog.source_type = SOURCE_MISF_UNCOPIED;
0B04E:  BCF    xD6.0
.................... 
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0B050:  MOVLW  CA
0B052:  MOVWF  FF6
0B054:  MOVLW  18
0B056:  MOVWF  FF7
0B058:  MOVLW  00
0B05A:  MOVWF  FF8
0B05C:  MOVLB  0
0B05E:  CALL   22DC
....................    fprintf(PC, "\tMission ID:   %02X\r\n", piclog.mission_id);
0B062:  MOVLW  DC
0B064:  MOVWF  FF6
0B066:  MOVLW  18
0B068:  MOVWF  FF7
0B06A:  MOVLW  00
0B06C:  MOVWF  FF8
0B06E:  MOVLW  0F
0B070:  MOVLB  9
0B072:  MOVWF  xC2
0B074:  MOVLB  0
0B076:  CALL   2312
0B07A:  MOVFF  1D3,9E8
0B07E:  MOVLW  37
0B080:  MOVLB  9
0B082:  MOVWF  xE9
0B084:  MOVLB  0
0B086:  CALL   2542
0B08A:  MOVLW  0D
0B08C:  BTFSS  FA6.6
0B08E:  GOTO   B08C
0B092:  MOVLB  E
0B094:  MOVWF  xF9
0B096:  MOVLW  0A
0B098:  MOVLB  0
0B09A:  BTFSS  FA6.6
0B09C:  GOTO   B09A
0B0A0:  MOVLB  E
0B0A2:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", piclog.func_type);
0B0A4:  MOVLW  F2
0B0A6:  MOVWF  FF6
0B0A8:  MOVLW  18
0B0AA:  MOVWF  FF7
0B0AC:  MOVLW  00
0B0AE:  MOVWF  FF8
0B0B0:  MOVLW  0F
0B0B2:  MOVLB  9
0B0B4:  MOVWF  xC2
0B0B6:  MOVLB  0
0B0B8:  CALL   2312
0B0BC:  MOVFF  1D4,9E8
0B0C0:  MOVLW  37
0B0C2:  MOVLB  9
0B0C4:  MOVWF  xE9
0B0C6:  MOVLB  0
0B0C8:  CALL   2542
0B0CC:  MOVLW  0D
0B0CE:  BTFSS  FA6.6
0B0D0:  GOTO   B0CE
0B0D4:  MOVLB  E
0B0D6:  MOVWF  xF9
0B0D8:  MOVLW  0A
0B0DA:  MOVLB  0
0B0DC:  BTFSS  FA6.6
0B0DE:  GOTO   B0DC
0B0E2:  MOVLB  E
0B0E4:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", piclog.write_mode);
0B0E6:  MOVLW  08
0B0E8:  MOVWF  FF6
0B0EA:  MOVLW  19
0B0EC:  MOVWF  FF7
0B0EE:  MOVLW  00
0B0F0:  MOVWF  FF8
0B0F2:  MOVLW  0F
0B0F4:  MOVLB  9
0B0F6:  MOVWF  xC2
0B0F8:  MOVLB  0
0B0FA:  CALL   2312
0B0FE:  MOVFF  1D5,9E8
0B102:  MOVLW  37
0B104:  MOVLB  9
0B106:  MOVWF  xE9
0B108:  MOVLB  0
0B10A:  CALL   2542
0B10E:  MOVLW  0D
0B110:  BTFSS  FA6.6
0B112:  GOTO   B110
0B116:  MOVLB  E
0B118:  MOVWF  xF9
0B11A:  MOVLW  0A
0B11C:  MOVLB  0
0B11E:  BTFSS  FA6.6
0B120:  GOTO   B11E
0B124:  MOVLB  E
0B126:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", piclog.source_type);
0B128:  MOVLW  00
0B12A:  MOVLB  1
0B12C:  BTFSC  xD6.0
0B12E:  MOVLW  01
0B130:  MOVWF  xDF
0B132:  MOVLW  1E
0B134:  MOVWF  FF6
0B136:  MOVLW  19
0B138:  MOVWF  FF7
0B13A:  MOVLW  00
0B13C:  MOVWF  FF8
0B13E:  MOVLW  0F
0B140:  MOVLB  9
0B142:  MOVWF  xC2
0B144:  MOVLB  0
0B146:  CALL   2312
0B14A:  MOVFF  1DF,9E8
0B14E:  MOVLW  37
0B150:  MOVLB  9
0B152:  MOVWF  xE9
0B154:  MOVLB  0
0B156:  CALL   2542
0B15A:  MOVLW  0D
0B15C:  BTFSS  FA6.6
0B15E:  GOTO   B15C
0B162:  MOVLB  E
0B164:  MOVWF  xF9
0B166:  MOVLW  0A
0B168:  MOVLB  0
0B16A:  BTFSS  FA6.6
0B16C:  GOTO   B16A
0B170:  MOVLB  E
0B172:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", piclog.misf_start_addr);
0B174:  MOVLW  34
0B176:  MOVWF  FF6
0B178:  MOVLW  19
0B17A:  MOVWF  FF7
0B17C:  MOVLW  00
0B17E:  MOVWF  FF8
0B180:  MOVLW  0F
0B182:  MOVLB  9
0B184:  MOVWF  xC2
0B186:  MOVLB  0
0B188:  CALL   2312
0B18C:  MOVLW  02
0B18E:  MOVLB  1
0B190:  MOVWF  xDF
0B192:  MOVLB  0
0B194:  MOVLW  30
0B196:  BTFSS  FA6.6
0B198:  GOTO   B196
0B19C:  MOVLB  E
0B19E:  MOVWF  xF9
0B1A0:  MOVLB  1
0B1A2:  DECFSZ xDF,F
0B1A4:  BRA    B1AA
0B1A6:  BRA    B1B0
0B1A8:  MOVLB  0
0B1AA:  MOVLB  0
0B1AC:  GOTO   B194
0B1B0:  MOVFF  1D7,9E8
0B1B4:  MOVLW  37
0B1B6:  MOVLB  9
0B1B8:  MOVWF  xE9
0B1BA:  MOVLB  0
0B1BC:  CALL   2542
0B1C0:  MOVLW  0D
0B1C2:  BTFSS  FA6.6
0B1C4:  GOTO   B1C2
0B1C8:  MOVLB  E
0B1CA:  MOVWF  xF9
0B1CC:  MOVLW  0A
0B1CE:  MOVLB  0
0B1D0:  BTFSS  FA6.6
0B1D2:  GOTO   B1D0
0B1D6:  MOVLB  E
0B1D8:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[FLASH_ID_PICLOG].uncopied_counter);
0B1DA:  MOVLW  4A
0B1DC:  MOVWF  FF6
0B1DE:  MOVLW  19
0B1E0:  MOVWF  FF7
0B1E2:  MOVLW  00
0B1E4:  MOVWF  FF8
0B1E6:  MOVLW  0F
0B1E8:  MOVLB  9
0B1EA:  MOVWF  xC2
0B1EC:  MOVLB  0
0B1EE:  CALL   2312
0B1F2:  MOVLW  02
0B1F4:  MOVLB  1
0B1F6:  MOVWF  xDF
0B1F8:  MOVLB  0
0B1FA:  MOVLW  30
0B1FC:  BTFSS  FA6.6
0B1FE:  GOTO   B1FC
0B202:  MOVLB  E
0B204:  MOVWF  xF9
0B206:  MOVLB  1
0B208:  DECFSZ xDF,F
0B20A:  BRA    B210
0B20C:  BRA    B216
0B20E:  MOVLB  0
0B210:  MOVLB  0
0B212:  GOTO   B1FA
0B216:  MOVFF  130,9E8
0B21A:  MOVLW  37
0B21C:  MOVLB  9
0B21E:  MOVWF  xE9
0B220:  MOVLB  0
0B222:  CALL   2542
0B226:  MOVLW  0D
0B228:  BTFSS  FA6.6
0B22A:  GOTO   B228
0B22E:  MOVLB  E
0B230:  MOVWF  xF9
0B232:  MOVLW  0A
0B234:  MOVLB  0
0B236:  BTFSS  FA6.6
0B238:  GOTO   B236
0B23C:  MOVLB  E
0B23E:  MOVWF  xF9
....................    enqueue_flash_operation(&piclog); // SMFへのデータコピーを実行する
0B240:  MOVLW  01
0B242:  MOVLB  1
0B244:  MOVWF  xE0
0B246:  MOVLW  D3
0B248:  MOVWF  xDF
0B24A:  MOVLB  0
0B24C:  CALL   A82C
....................    fprintf(PC, "End MODE MEAS IV mission\r\n");
0B250:  MOVLW  60
0B252:  MOVWF  FF6
0B254:  MOVLW  19
0B256:  MOVWF  FF7
0B258:  MOVLW  00
0B25A:  MOVWF  FF8
0B25C:  CALL   22DC
0B260:  GOTO   F8A0 (RETURN)
.................... }
.................... 
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE IV DEBUG\r\n");
*
0C7DA:  MOVLW  7C
0C7DC:  MOVWF  FF6
0C7DE:  MOVLW  19
0C7E0:  MOVWF  FF7
0C7E2:  MOVLW  00
0C7E4:  MOVWF  FF8
0C7E6:  CALL   22DC
.................... 
....................    MEAS_IV_CMD cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0C7EA:  MOVFF  1B0,1E6
0C7EE:  MOVFF  1AF,1E5
0C7F2:  CALL   8262
0C7F6:  MOVFF  02,03
0C7FA:  MOVF   01,W
0C7FC:  MOVWF  FE1
0C7FE:  MOVFF  03,FE2
0C802:  MOVLW  01
0C804:  MOVWF  FEA
0C806:  MOVLW  B1
0C808:  MOVWF  FE9
0C80A:  MOVLW  0C
0C80C:  MOVWF  01
0C80E:  MOVFF  FE6,FEE
0C812:  DECFSZ 01,F
0C814:  GOTO   C80E
....................    
....................    fprintf(PC, "\tID: %02X\r\n", cmd.id);
0C818:  MOVLW  92
0C81A:  MOVWF  FF6
0C81C:  MOVLW  19
0C81E:  MOVWF  FF7
0C820:  MOVLW  00
0C822:  MOVWF  FF8
0C824:  MOVLW  05
0C826:  MOVLB  9
0C828:  MOVWF  xC2
0C82A:  MOVLB  0
0C82C:  CALL   2312
0C830:  MOVFF  1B1,9E8
0C834:  MOVLW  37
0C836:  MOVLB  9
0C838:  MOVWF  xE9
0C83A:  MOVLB  0
0C83C:  CALL   2542
0C840:  MOVLW  0D
0C842:  BTFSS  FA6.6
0C844:  GOTO   C842
0C848:  MOVLB  E
0C84A:  MOVWF  xF9
0C84C:  MOVLW  0A
0C84E:  MOVLB  0
0C850:  BTFSS  FA6.6
0C852:  GOTO   C850
0C856:  MOVLB  E
0C858:  MOVWF  xF9
....................    fprintf(PC, "\tSleepTime:        0x%04X\r\n", cmd.sleep_time);
0C85A:  MOVLW  9E
0C85C:  MOVWF  FF6
0C85E:  MOVLW  19
0C860:  MOVWF  FF7
0C862:  MOVLW  00
0C864:  MOVWF  FF8
0C866:  MOVLW  15
0C868:  MOVLB  9
0C86A:  MOVWF  xC2
0C86C:  MOVLB  0
0C86E:  CALL   2312
0C872:  MOVLW  02
0C874:  MOVLB  1
0C876:  MOVWF  xC5
0C878:  MOVLB  0
0C87A:  MOVLW  30
0C87C:  BTFSS  FA6.6
0C87E:  GOTO   C87C
0C882:  MOVLB  E
0C884:  MOVWF  xF9
0C886:  MOVLB  1
0C888:  DECFSZ xC5,F
0C88A:  BRA    C890
0C88C:  BRA    C896
0C88E:  MOVLB  0
0C890:  MOVLB  0
0C892:  GOTO   C87A
0C896:  MOVFF  1B2,9E8
0C89A:  MOVLW  37
0C89C:  MOVLB  9
0C89E:  MOVWF  xE9
0C8A0:  MOVLB  0
0C8A2:  CALL   2542
0C8A6:  MOVLW  0D
0C8A8:  BTFSS  FA6.6
0C8AA:  GOTO   C8A8
0C8AE:  MOVLB  E
0C8B0:  MOVWF  xF9
0C8B2:  MOVLW  0A
0C8B4:  MOVLB  0
0C8B6:  BTFSS  FA6.6
0C8B8:  GOTO   C8B6
0C8BC:  MOVLB  E
0C8BE:  MOVWF  xF9
....................    fprintf(PC, "\tLogCurrThreshold: 0x%04X\r\n", cmd.curr_threshold);
0C8C0:  MOVLW  BA
0C8C2:  MOVWF  FF6
0C8C4:  MOVLW  19
0C8C6:  MOVWF  FF7
0C8C8:  MOVLW  00
0C8CA:  MOVWF  FF8
0C8CC:  MOVLW  15
0C8CE:  MOVLB  9
0C8D0:  MOVWF  xC2
0C8D2:  MOVLB  0
0C8D4:  CALL   2312
0C8D8:  MOVLW  02
0C8DA:  MOVLB  1
0C8DC:  MOVWF  xC5
0C8DE:  MOVLB  0
0C8E0:  MOVLW  30
0C8E2:  BTFSS  FA6.6
0C8E4:  GOTO   C8E2
0C8E8:  MOVLB  E
0C8EA:  MOVWF  xF9
0C8EC:  MOVLB  1
0C8EE:  DECFSZ xC5,F
0C8F0:  BRA    C8F6
0C8F2:  BRA    C8FC
0C8F4:  MOVLB  0
0C8F6:  MOVLB  0
0C8F8:  GOTO   C8E0
0C8FC:  MOVFF  1B4,9E8
0C900:  MOVLW  37
0C902:  MOVLB  9
0C904:  MOVWF  xE9
0C906:  MOVLB  0
0C908:  CALL   2542
0C90C:  MOVLW  0D
0C90E:  BTFSS  FA6.6
0C910:  GOTO   C90E
0C914:  MOVLB  E
0C916:  MOVWF  xF9
0C918:  MOVLW  0A
0C91A:  MOVLB  0
0C91C:  BTFSS  FA6.6
0C91E:  GOTO   C91C
0C922:  MOVLB  E
0C924:  MOVWF  xF9
....................    fprintf(PC, "\tPDThreshold:      0x%04X\r\n", cmd.pd_threshold);
0C926:  MOVLW  D6
0C928:  MOVWF  FF6
0C92A:  MOVLW  19
0C92C:  MOVWF  FF7
0C92E:  MOVLW  00
0C930:  MOVWF  FF8
0C932:  MOVLW  15
0C934:  MOVLB  9
0C936:  MOVWF  xC2
0C938:  MOVLB  0
0C93A:  CALL   2312
0C93E:  MOVLW  02
0C940:  MOVLB  1
0C942:  MOVWF  xC5
0C944:  MOVLB  0
0C946:  MOVLW  30
0C948:  BTFSS  FA6.6
0C94A:  GOTO   C948
0C94E:  MOVLB  E
0C950:  MOVWF  xF9
0C952:  MOVLB  1
0C954:  DECFSZ xC5,F
0C956:  BRA    C95C
0C958:  BRA    C962
0C95A:  MOVLB  0
0C95C:  MOVLB  0
0C95E:  GOTO   C946
0C962:  MOVFF  1B6,9E8
0C966:  MOVLW  37
0C968:  MOVLB  9
0C96A:  MOVWF  xE9
0C96C:  MOVLB  0
0C96E:  CALL   2542
0C972:  MOVLW  0D
0C974:  BTFSS  FA6.6
0C976:  GOTO   C974
0C97A:  MOVLB  E
0C97C:  MOVWF  xF9
0C97E:  MOVLW  0A
0C980:  MOVLB  0
0C982:  BTFSS  FA6.6
0C984:  GOTO   C982
0C988:  MOVLB  E
0C98A:  MOVWF  xF9
....................    fprintf(PC, "\tCurrentLimit:     0x%04X\r\n", cmd.curr_limit);
0C98C:  MOVLW  F2
0C98E:  MOVWF  FF6
0C990:  MOVLW  19
0C992:  MOVWF  FF7
0C994:  MOVLW  00
0C996:  MOVWF  FF8
0C998:  MOVLW  15
0C99A:  MOVLB  9
0C99C:  MOVWF  xC2
0C99E:  MOVLB  0
0C9A0:  CALL   2312
0C9A4:  MOVLW  02
0C9A6:  MOVLB  1
0C9A8:  MOVWF  xC5
0C9AA:  MOVLB  0
0C9AC:  MOVLW  30
0C9AE:  BTFSS  FA6.6
0C9B0:  GOTO   C9AE
0C9B4:  MOVLB  E
0C9B6:  MOVWF  xF9
0C9B8:  MOVLB  1
0C9BA:  DECFSZ xC5,F
0C9BC:  BRA    C9C2
0C9BE:  BRA    C9C8
0C9C0:  MOVLB  0
0C9C2:  MOVLB  0
0C9C4:  GOTO   C9AC
0C9C8:  MOVFF  1B8,9E8
0C9CC:  MOVLW  37
0C9CE:  MOVLB  9
0C9D0:  MOVWF  xE9
0C9D2:  MOVLB  0
0C9D4:  CALL   2542
0C9D8:  MOVLW  0D
0C9DA:  BTFSS  FA6.6
0C9DC:  GOTO   C9DA
0C9E0:  MOVLB  E
0C9E2:  MOVWF  xF9
0C9E4:  MOVLW  0A
0C9E6:  MOVLB  0
0C9E8:  BTFSS  FA6.6
0C9EA:  GOTO   C9E8
0C9EE:  MOVLB  E
0C9F0:  MOVWF  xF9
....................    fprintf(PC, "\tMeasurementTime:  0x%04X\r\n", cmd.meas_time);
0C9F2:  MOVLW  0E
0C9F4:  MOVWF  FF6
0C9F6:  MOVLW  1A
0C9F8:  MOVWF  FF7
0C9FA:  MOVLW  00
0C9FC:  MOVWF  FF8
0C9FE:  MOVLW  15
0CA00:  MOVLB  9
0CA02:  MOVWF  xC2
0CA04:  MOVLB  0
0CA06:  CALL   2312
0CA0A:  MOVLW  02
0CA0C:  MOVLB  1
0CA0E:  MOVWF  xC5
0CA10:  MOVLB  0
0CA12:  MOVLW  30
0CA14:  BTFSS  FA6.6
0CA16:  GOTO   CA14
0CA1A:  MOVLB  E
0CA1C:  MOVWF  xF9
0CA1E:  MOVLB  1
0CA20:  DECFSZ xC5,F
0CA22:  BRA    CA28
0CA24:  BRA    CA2E
0CA26:  MOVLB  0
0CA28:  MOVLB  0
0CA2A:  GOTO   CA12
0CA2E:  MOVFF  1BA,9E8
0CA32:  MOVLW  37
0CA34:  MOVLB  9
0CA36:  MOVWF  xE9
0CA38:  MOVLB  0
0CA3A:  CALL   2542
0CA3E:  MOVLW  0D
0CA40:  BTFSS  FA6.6
0CA42:  GOTO   CA40
0CA46:  MOVLB  E
0CA48:  MOVWF  xF9
0CA4A:  MOVLW  0A
0CA4C:  MOVLB  0
0CA4E:  BTFSS  FA6.6
0CA50:  GOTO   CA4E
0CA54:  MOVLB  E
0CA56:  MOVWF  xF9
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_START); // Log start
0CA58:  MOVFF  1B1,20F
0CA5C:  MOVLB  2
0CA5E:  CLRF   x10
0CA60:  MOVLB  0
0CA62:  CALL   50EC
.................... 
....................    unsigned int32 start_time = get_current_sec();
....................    unsigned int32 current_time = 0;
0CA66:  CALL   3C18
0CA6A:  MOVFF  03,1C0
0CA6E:  MOVFF  02,1BF
0CA72:  MOVFF  01,1BE
0CA76:  MOVFF  00,1BD
0CA7A:  MOVLB  1
0CA7C:  CLRF   xC4
0CA7E:  CLRF   xC3
0CA80:  CLRF   xC2
0CA82:  CLRF   xC1
....................    test_sweep(cmd.curr_threshold, cmd.curr_limit);
0CA84:  MOVFF  1B5,1C6
0CA88:  MOVFF  1B4,1C5
0CA8C:  MOVFF  1B9,1C8
0CA90:  MOVFF  1B8,1C7
0CA94:  MOVLB  0
0CA96:  GOTO   B264
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_END);
0CA9A:  MOVFF  1B1,20F
0CA9E:  MOVLB  2
0CAA0:  SETF   x10
0CAA2:  MOVLB  0
0CAA4:  CALL   50EC
....................    fprintf(PC, "[IVDBG] End MODE IV DEBUG\r\n");
0CAA8:  MOVLW  2A
0CAAA:  MOVWF  FF6
0CAAC:  MOVLW  1A
0CAAE:  MOVWF  FF7
0CAB0:  MOVLW  00
0CAB2:  MOVWF  FF8
0CAB4:  CALL   22DC
0CAB8:  GOTO   F8B0 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr)
0CABC:  MOVLB  1
0CABE:  CLRF   xB2
0CAC0:  MOVLW  64
0CAC2:  MOVWF  xB1
0CAC4:  SETF   xB4
0CAC6:  SETF   xB3
0CAC8:  MOVLB  0
0CACA:  CALL   3C18
0CACE:  MOVFF  03,1B8
0CAD2:  MOVFF  02,1B7
0CAD6:  MOVFF  01,1B6
0CADA:  MOVFF  00,1B5
0CADE:  MOVLB  1
0CAE0:  MOVF   xB1,W
0CAE2:  SUBWF  xB5,W
0CAE4:  MOVWF  xB9
0CAE6:  MOVF   xB2,W
0CAE8:  SUBWFB xB6,W
0CAEA:  MOVWF  xBA
0CAEC:  MOVLW  00
0CAEE:  SUBWFB xB7,W
0CAF0:  MOVWF  xBB
0CAF2:  MOVLW  00
0CAF4:  SUBWFB xB8,W
0CAF6:  MOVWF  xBC
.................... {
....................    unsigned int16 interval = 100;   // 測定間隔 [秒]
....................    unsigned int16 end_time = 0xFFFF;
.................... 
....................    unsigned int32 current_time = get_current_sec();
....................    unsigned int32 last_time = current_time - interval;  // 最初にすぐ測定するため
.................... 
....................    // loging data
....................    unsigned int8 logdata[6];
....................    unsigned int16 temp_top;
....................    unsigned int16 temp_bot;
....................    unsigned int16 temp_mis7;
....................    unsigned int16 PD;
.................... 
....................    // Flash Write 
....................    unsigned int32 write_address;
.................... 
....................    fprintf(PC, "temp_top, temp_bot, temp_mis7, pd\r\n");
0CAF8:  MOVLW  46
0CAFA:  MOVWF  FF6
0CAFC:  MOVLW  1A
0CAFE:  MOVWF  FF7
0CB00:  MOVLW  00
0CB02:  MOVWF  FF8
0CB04:  MOVLB  0
0CB06:  CALL   22DC
.................... 
....................    while (true) {
....................        current_time = get_current_sec();
0CB0A:  CALL   3C18
0CB0E:  MOVFF  03,1B8
0CB12:  MOVFF  02,1B7
0CB16:  MOVFF  01,1B6
0CB1A:  MOVFF  00,1B5
.................... 
....................        // intervalごとに測定
....................        if ((current_time - last_time) >= interval) {
0CB1E:  MOVLB  1
0CB20:  MOVF   xB9,W
0CB22:  SUBWF  xB5,W
0CB24:  MOVWF  xCF
0CB26:  MOVF   xBA,W
0CB28:  SUBWFB xB6,W
0CB2A:  MOVWF  xD0
0CB2C:  MOVF   xBB,W
0CB2E:  SUBWFB xB7,W
0CB30:  MOVWF  xD1
0CB32:  MOVF   xBC,W
0CB34:  SUBWFB xB8,W
0CB36:  MOVWF  xD2
0CB38:  MOVF   xD2,F
0CB3A:  BTFSC  FD8.2
0CB3C:  BRA    CB44
0CB3E:  MOVLB  0
0CB40:  GOTO   CB80
0CB44:  MOVLB  0
0CB46:  MOVLB  1
0CB48:  MOVF   xD1,F
0CB4A:  BTFSC  FD8.2
0CB4C:  BRA    CB54
0CB4E:  MOVLB  0
0CB50:  GOTO   CB80
0CB54:  MOVLB  0
0CB56:  MOVLB  1
0CB58:  MOVF   xB2,W
0CB5A:  SUBWF  xD0,W
0CB5C:  BTFSC  FD8.0
0CB5E:  BRA    CB66
0CB60:  MOVLB  0
0CB62:  GOTO   CB9C
0CB66:  MOVLB  0
0CB68:  BTFSS  FD8.2
0CB6A:  GOTO   CB80
0CB6E:  MOVLB  1
0CB70:  MOVF   xB1,W
0CB72:  SUBWF  xCF,W
0CB74:  BTFSC  FD8.0
0CB76:  BRA    CB7E
0CB78:  MOVLB  0
0CB7A:  GOTO   CB9C
0CB7E:  MOVLB  0
....................            last_time = current_time;
0CB80:  MOVFF  1B8,1BC
0CB84:  MOVFF  1B7,1BB
0CB88:  MOVFF  1B6,1BA
0CB8C:  MOVFF  1B5,1B9
....................          /*
....................            // 次の測定データ(6バイト)で64バイト境界を超えるか確認
....................            if (environment_data_ptr->reserve_counter1 + 6 > PACKET_SIZE) {
....................                unsigned int8 bankdata[4] = {0};
....................                write_address = MISF_CIGS_ENVIRO_START + environment_data_ptr->used_counter;
....................                write_data_bytes(mis_fm, write_address, bankdata, 4);
....................                environment_data_ptr->used_counter   += 4;
....................                environment_data_ptr->uncopied_counter += 4;
....................                environment_data_ptr->reserve_counter1 = 0;
....................                misf_update_address_area();
....................            }
.................... 
....................            // 環境データ読み取り
....................            temp_top  = ad7490_read(ADC_TEMP_PY_TOP);
....................            temp_bot  = ad7490_read(ADC_TEMP_PY_BOT);
....................            temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................            PD        = ad7490_read(ADC_PD);
.................... 
....................            logdata[0] = (temp_top >> 4) & 0xFF;
....................            logdata[1] = ((temp_top & 0x0F) << 4) | ((temp_bot >> 8) & 0x0F);
....................            logdata[2] = temp_bot & 0xFF;
....................            logdata[3] = (temp_mis7 >> 4) & 0xFF;
....................            logdata[4] = temp_mis7 & 0xFF;
....................            logdata[5] = PD & 0xFF;
.................... 
....................            // 書き込み
....................            write_address = MISF_CIGS_ENVIRO_START + environment_data_ptr->used_counter;
....................            write_data_bytes(mis_fm, write_address, logdata, 6);
....................            environment_data_ptr->used_counter   += 6;
....................            environment_data_ptr->uncopied_counter += 6;
....................            environment_data_ptr->reserve_counter1 += 6;
....................            fprintf(PC, "0x%04LX, 0x%04LX, 0x%04LX, 0x%04LX\r\n", temp_top, temp_bot, temp_mis7, PD);
....................        }
....................          */
....................        delay_ms(1);  // 過負荷防止用
0CB90:  MOVLW  01
0CB92:  MOVLB  B
0CB94:  MOVWF  x02
0CB96:  MOVLB  0
0CB98:  CALL   22AE
....................    }
0CB9C:  GOTO   CB0A
.................... }
0CBA0:  GOTO   F8C0 (RETURN)
.................... }
.................... // make cmd structure from uplink command
.................... meas_iv_param_t make_meas_iv_cmd(int8 *uplinkcmd_ptr)
.................... {
....................    meas_iv_param_t cmd;
....................    cmd.id = uplinkcmd_ptr[0];
*
08262:  MOVLB  1
08264:  MOVF   xE5,W
08266:  MOVWF  FE9
08268:  MOVF   xE6,W
0826A:  MOVWF  FEA
0826C:  MOVFF  FEF,1E7
....................    cmd.interval = ((unsigned int16)uplinkcmd_ptr[1] << 8) | ((unsigned int16)uplinkcmd_ptr[2]);
08270:  MOVLW  01
08272:  ADDWF  xE5,W
08274:  MOVWF  FE9
08276:  MOVLW  00
08278:  ADDWFC xE6,W
0827A:  MOVWF  FEA
0827C:  MOVF   FEF,W
0827E:  CLRF   xF3
08280:  MOVWF  xF2
08282:  MOVFF  1F2,1F3
08286:  CLRF   xF2
08288:  MOVLW  02
0828A:  ADDWF  xE5,W
0828C:  MOVWF  FE9
0828E:  MOVLW  00
08290:  ADDWFC xE6,W
08292:  MOVWF  FEA
08294:  MOVF   FEF,W
08296:  CLRF   03
08298:  IORWF  xF2,W
0829A:  MOVWF  xE8
0829C:  MOVF   03,W
0829E:  IORWF  xF3,W
082A0:  MOVWF  xE9
....................    cmd.log_threshold = (unsigned int16)uplinkcmd_ptr[3]<< 4;
082A2:  MOVLW  03
082A4:  ADDWF  xE5,W
082A6:  MOVWF  FE9
082A8:  MOVLW  00
082AA:  ADDWFC xE6,W
082AC:  MOVWF  FEA
082AE:  MOVF   FEF,W
082B0:  CLRF   xF3
082B2:  MOVWF  xF2
082B4:  RLCF   xF2,W
082B6:  MOVWF  xEE
082B8:  RLCF   xF3,W
082BA:  MOVWF  xEF
082BC:  RLCF   xEE,F
082BE:  RLCF   xEF,F
082C0:  RLCF   xEE,F
082C2:  RLCF   xEF,F
082C4:  RLCF   xEE,F
082C6:  RLCF   xEF,F
082C8:  MOVLW  F0
082CA:  ANDWF  xEE,F
....................    cmd.sweep_limit = (unsigned int16)uplinkcmd_ptr[4]<< 4;
082CC:  MOVLW  04
082CE:  ADDWF  xE5,W
082D0:  MOVWF  FE9
082D2:  MOVLW  00
082D4:  ADDWFC xE6,W
082D6:  MOVWF  FEA
082D8:  MOVF   FEF,W
082DA:  CLRF   xF3
082DC:  MOVWF  xF2
082DE:  RLCF   xF2,W
082E0:  MOVWF  xF0
082E2:  RLCF   xF3,W
082E4:  MOVWF  xF1
082E6:  RLCF   xF0,F
082E8:  RLCF   xF1,F
082EA:  RLCF   xF0,F
082EC:  RLCF   xF1,F
082EE:  RLCF   xF0,F
082F0:  RLCF   xF1,F
082F2:  MOVLW  F0
082F4:  ANDWF  xF0,F
....................    cmd.pd_threshold = (unsigned int16)uplinkcmd_ptr[5]<< 4;
082F6:  MOVLW  05
082F8:  ADDWF  xE5,W
082FA:  MOVWF  FE9
082FC:  MOVLW  00
082FE:  ADDWFC xE6,W
08300:  MOVWF  FEA
08302:  MOVF   FEF,W
08304:  CLRF   xF3
08306:  MOVWF  xF2
08308:  RLCF   xF2,W
0830A:  MOVWF  xEA
0830C:  RLCF   xF3,W
0830E:  MOVWF  xEB
08310:  RLCF   xEA,F
08312:  RLCF   xEB,F
08314:  RLCF   xEA,F
08316:  RLCF   xEB,F
08318:  RLCF   xEA,F
0831A:  RLCF   xEB,F
0831C:  MOVLW  F0
0831E:  ANDWF  xEA,F
....................    cmd.meas_time = (unsigned int16)uplinkcmd_ptr[6] *60; // 分 -> 秒
08320:  MOVLW  06
08322:  ADDWF  xE5,W
08324:  MOVWF  FE9
08326:  MOVLW  00
08328:  ADDWFC xE6,W
0832A:  MOVWF  FEA
0832C:  MOVF   FEF,W
0832E:  CLRF   xF3
08330:  MOVWF  xF2
08332:  MOVFF  1F3,A52
08336:  MOVFF  1F2,A51
0833A:  MOVLB  A
0833C:  CLRF   x54
0833E:  MOVLW  3C
08340:  MOVWF  x53
08342:  MOVLB  0
08344:  CALL   8240
08348:  MOVFF  02,1ED
0834C:  MOVFF  01,1EC
....................    return cmd;
08350:  MOVLW  E7
08352:  MOVWF  01
08354:  MOVLW  01
08356:  MOVWF  02
08358:  RETURN 0
.................... }
.................... 
.................... void print_meas_iv_cmd(meas_iv_param_t *cmd_ptr)
*
08F7E:  MOVLW  03
08F80:  MOVLB  1
08F82:  ADDWF  xDF,W
08F84:  MOVWF  FE9
08F86:  MOVLW  00
08F88:  ADDWFC xE0,W
08F8A:  MOVWF  FEA
08F8C:  MOVFF  FEC,1E8
08F90:  MOVF   FED,F
08F92:  MOVFF  FEF,1E7
08F96:  MOVFF  1E8,1EA
08F9A:  MOVFF  1E7,1E9
08F9E:  MOVLB  0
08FA0:  GOTO   835A
08FA4:  MOVFF  02,1E2
08FA8:  MOVFF  01,1E1
08FAC:  MOVLW  09
08FAE:  MOVLB  1
08FB0:  ADDWF  xDF,W
08FB2:  MOVWF  FE9
08FB4:  MOVLW  00
08FB6:  ADDWFC xE0,W
08FB8:  MOVWF  FEA
08FBA:  MOVFF  FEC,1E8
08FBE:  MOVF   FED,F
08FC0:  MOVFF  FEF,1E7
08FC4:  MOVFF  1E8,1EA
08FC8:  MOVFF  1E7,1E9
08FCC:  MOVLB  0
08FCE:  CALL   8D50
08FD2:  MOVFF  02,1E4
08FD6:  MOVFF  01,1E3
08FDA:  MOVLW  07
08FDC:  MOVLB  1
08FDE:  ADDWF  xDF,W
08FE0:  MOVWF  FE9
08FE2:  MOVLW  00
08FE4:  ADDWFC xE0,W
08FE6:  MOVWF  FEA
08FE8:  MOVFF  FEC,1E8
08FEC:  MOVF   FED,F
08FEE:  MOVFF  FEF,1E7
08FF2:  MOVFF  1E8,1EA
08FF6:  MOVFF  1E7,1E9
08FFA:  MOVLB  0
08FFC:  CALL   8D50
09000:  MOVFF  02,1E6
09004:  MOVFF  01,1E5
.................... {
....................    // Calc
....................    unsigned int16 pd_value = calc_pd_value(cmd_ptr->pd_threshold);
....................    int16 sweep_limit = calc_curr_value(cmd_ptr->sweep_limit);
....................    int16 log_threshold = calc_curr_value(cmd_ptr->log_threshold);
.................... 
....................    // Print
....................    fprintf(PC, "MEAS IV Command Parameters:\r\n");
09008:  MOVLW  6A
0900A:  MOVWF  FF6
0900C:  MOVLW  1A
0900E:  MOVWF  FF7
09010:  MOVLW  00
09012:  MOVWF  FF8
09014:  CALL   22DC
....................    fprintf(PC, "\tID: %02X\r\n", cmd_ptr->id);
09018:  MOVLB  1
0901A:  MOVF   xDF,W
0901C:  MOVWF  FE9
0901E:  MOVF   xE0,W
09020:  MOVWF  FEA
09022:  MOVFF  FEF,1E7
09026:  MOVLW  88
09028:  MOVWF  FF6
0902A:  MOVLW  1A
0902C:  MOVWF  FF7
0902E:  MOVLW  00
09030:  MOVWF  FF8
09032:  MOVLW  05
09034:  MOVLB  9
09036:  MOVWF  xC2
09038:  MOVLB  0
0903A:  CALL   2312
0903E:  MOVFF  1E7,9E8
09042:  MOVLW  37
09044:  MOVLB  9
09046:  MOVWF  xE9
09048:  MOVLB  0
0904A:  CALL   2542
0904E:  MOVLW  0D
09050:  BTFSS  FA6.6
09052:  GOTO   9050
09056:  MOVLB  E
09058:  MOVWF  xF9
0905A:  MOVLW  0A
0905C:  MOVLB  0
0905E:  BTFSS  FA6.6
09060:  GOTO   905E
09064:  MOVLB  E
09066:  MOVWF  xF9
....................    fprintf(PC, "\tSweepInterval   :%lu[ms]\r\n", cmd_ptr->interval);
09068:  MOVLW  01
0906A:  MOVLB  1
0906C:  ADDWF  xDF,W
0906E:  MOVWF  FE9
09070:  MOVLW  00
09072:  ADDWFC xE0,W
09074:  MOVWF  FEA
09076:  MOVFF  FEC,1E8
0907A:  MOVF   FED,F
0907C:  MOVFF  FEF,1E7
09080:  MOVLW  94
09082:  MOVWF  FF6
09084:  MOVLW  1A
09086:  MOVWF  FF7
09088:  MOVLW  00
0908A:  MOVWF  FF8
0908C:  MOVLW  12
0908E:  MOVLB  9
09090:  MOVWF  xC2
09092:  MOVLB  0
09094:  CALL   2312
09098:  MOVLW  10
0909A:  MOVWF  FE9
0909C:  MOVFF  1E8,1EA
090A0:  MOVFF  1E7,1E9
090A4:  CALL   8E62
090A8:  MOVLW  A9
090AA:  MOVWF  FF6
090AC:  MOVLW  1A
090AE:  MOVWF  FF7
090B0:  MOVLW  00
090B2:  MOVWF  FF8
090B4:  MOVLW  06
090B6:  MOVLB  9
090B8:  MOVWF  xC2
090BA:  MOVLB  0
090BC:  CALL   2312
....................    fprintf(PC, "\tPD Threshold    :%lu[W/m2]\r\n", pd_value);
090C0:  MOVLW  B0
090C2:  MOVWF  FF6
090C4:  MOVLW  1A
090C6:  MOVWF  FF7
090C8:  MOVLW  00
090CA:  MOVWF  FF8
090CC:  MOVLW  12
090CE:  MOVLB  9
090D0:  MOVWF  xC2
090D2:  MOVLB  0
090D4:  CALL   2312
090D8:  MOVLW  10
090DA:  MOVWF  FE9
090DC:  MOVFF  1E2,1EA
090E0:  MOVFF  1E1,1E9
090E4:  CALL   8E62
090E8:  MOVLW  C5
090EA:  MOVWF  FF6
090EC:  MOVLW  1A
090EE:  MOVWF  FF7
090F0:  MOVLW  00
090F2:  MOVWF  FF8
090F4:  MOVLW  08
090F6:  MOVLB  9
090F8:  MOVWF  xC2
090FA:  MOVLB  0
090FC:  CALL   2312
....................    fprintf(PC, "\tSweepLimit      :%lu[mA]\r\n", sweep_limit);
09100:  MOVLW  CE
09102:  MOVWF  FF6
09104:  MOVLW  1A
09106:  MOVWF  FF7
09108:  MOVLW  00
0910A:  MOVWF  FF8
0910C:  MOVLW  12
0910E:  MOVLB  9
09110:  MOVWF  xC2
09112:  MOVLB  0
09114:  CALL   2312
09118:  MOVLW  10
0911A:  MOVWF  FE9
0911C:  MOVFF  1E4,1EA
09120:  MOVFF  1E3,1E9
09124:  CALL   8E62
09128:  MOVLW  E3
0912A:  MOVWF  FF6
0912C:  MOVLW  1A
0912E:  MOVWF  FF7
09130:  MOVLW  00
09132:  MOVWF  FF8
09134:  MOVLW  06
09136:  MOVLB  9
09138:  MOVWF  xC2
0913A:  MOVLB  0
0913C:  CALL   2312
....................    fprintf(PC, "\tLogThreshold    :%lu[mA]\r\n", log_threshold);
09140:  MOVLW  EA
09142:  MOVWF  FF6
09144:  MOVLW  1A
09146:  MOVWF  FF7
09148:  MOVLW  00
0914A:  MOVWF  FF8
0914C:  MOVLW  12
0914E:  MOVLB  9
09150:  MOVWF  xC2
09152:  MOVLB  0
09154:  CALL   2312
09158:  MOVLW  10
0915A:  MOVWF  FE9
0915C:  MOVFF  1E6,1EA
09160:  MOVFF  1E5,1E9
09164:  CALL   8E62
09168:  MOVLW  FF
0916A:  MOVWF  FF6
0916C:  MOVLW  1A
0916E:  MOVWF  FF7
09170:  MOVLW  00
09172:  MOVWF  FF8
09174:  MOVLW  06
09176:  MOVLB  9
09178:  MOVWF  xC2
0917A:  MOVLB  0
0917C:  CALL   2312
....................    fprintf(PC, "\tMeasurementTime :%lu[s]\r\n\r\n", cmd_ptr->meas_time);
09180:  MOVLW  05
09182:  MOVLB  1
09184:  ADDWF  xDF,W
09186:  MOVWF  FE9
09188:  MOVLW  00
0918A:  ADDWFC xE0,W
0918C:  MOVWF  FEA
0918E:  MOVFF  FEC,1E8
09192:  MOVF   FED,F
09194:  MOVFF  FEF,1E7
09198:  MOVLW  06
0919A:  MOVWF  FF6
0919C:  MOVLW  1B
0919E:  MOVWF  FF7
091A0:  MOVLW  00
091A2:  MOVWF  FF8
091A4:  MOVLW  12
091A6:  MOVLB  9
091A8:  MOVWF  xC2
091AA:  MOVLB  0
091AC:  CALL   2312
091B0:  MOVLW  10
091B2:  MOVWF  FE9
091B4:  MOVFF  1E8,1EA
091B8:  MOVFF  1E7,1E9
091BC:  CALL   8E62
091C0:  MOVLW  1B
091C2:  MOVWF  FF6
091C4:  MOVLW  1B
091C6:  MOVWF  FF7
091C8:  MOVLW  00
091CA:  MOVWF  FF8
091CC:  MOVLW  07
091CE:  MOVLB  9
091D0:  MOVWF  xC2
091D2:  MOVLB  0
091D4:  CALL   2312
091D8:  GOTO   AADA (RETURN)
.................... }
.................... 
.................... void mode_meas_pd(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS PD\r\n");
*
0E320:  MOVLW  24
0E322:  MOVWF  FF6
0E324:  MOVLW  1B
0E326:  MOVWF  FF7
0E328:  MOVLW  00
0E32A:  MOVWF  FF8
0E32C:  CALL   22DC
.................... 
....................    // uplinkcmd_ptr から interval と測定時間を取り出す
....................    unsigned int16 interval_ms = ((unsigned int16)uplinkcmd_ptr[1] << 8) | uplinkcmd_ptr[2]; // ms
....................    unsigned int16 meas_time_s = (unsigned int16)uplinkcmd_ptr[6] * 60; // 秒
.................... 
....................    unsigned int32 start_time_ms   = get_current_msec();
....................    unsigned int32 current_time_ms = 0;
....................    unsigned int32 meas_time_ms    = (unsigned int32)meas_time_s * 1000; // ms に変換
0E330:  MOVLW  01
0E332:  MOVLB  1
0E334:  ADDWF  xAF,W
0E336:  MOVWF  FE9
0E338:  MOVLW  00
0E33A:  ADDWFC xB0,W
0E33C:  MOVWF  FEA
0E33E:  MOVF   FEF,W
0E340:  CLRF   xC4
0E342:  MOVWF  xC3
0E344:  MOVFF  1C3,1C4
0E348:  CLRF   xC3
0E34A:  MOVLW  02
0E34C:  ADDWF  xAF,W
0E34E:  MOVWF  FE9
0E350:  MOVLW  00
0E352:  ADDWFC xB0,W
0E354:  MOVWF  FEA
0E356:  MOVF   FEF,W
0E358:  IORWF  xC3,W
0E35A:  MOVWF  xB1
0E35C:  MOVF   xC4,W
0E35E:  MOVWF  xB2
0E360:  MOVLW  06
0E362:  ADDWF  xAF,W
0E364:  MOVWF  FE9
0E366:  MOVLW  00
0E368:  ADDWFC xB0,W
0E36A:  MOVWF  FEA
0E36C:  MOVF   FEF,W
0E36E:  CLRF   xC4
0E370:  MOVWF  xC3
0E372:  MOVFF  1C4,A52
0E376:  MOVFF  1C3,A51
0E37A:  MOVLB  A
0E37C:  CLRF   x54
0E37E:  MOVLW  3C
0E380:  MOVWF  x53
0E382:  MOVLB  0
0E384:  CALL   8240
0E388:  MOVFF  02,1B4
0E38C:  MOVFF  01,1B3
0E390:  CALL   9B3A
0E394:  MOVLB  1
0E396:  CLRF   xB8
0E398:  CLRF   xB7
0E39A:  MOVFF  02,1B6
0E39E:  MOVFF  01,1B5
0E3A2:  CLRF   xBC
0E3A4:  CLRF   xBB
0E3A6:  CLRF   xBA
0E3A8:  CLRF   xB9
0E3AA:  CLRF   xC6
0E3AC:  CLRF   xC5
0E3AE:  MOVFF  1B4,1C4
0E3B2:  MOVFF  1B3,1C3
0E3B6:  MOVFF  FEA,1C8
0E3BA:  MOVFF  FE9,1C7
0E3BE:  MOVFF  1C6,1CC
0E3C2:  MOVFF  1C5,1CB
0E3C6:  MOVFF  1C4,1CA
0E3CA:  MOVFF  1C3,1C9
0E3CE:  CLRF   xD0
0E3D0:  CLRF   xCF
0E3D2:  MOVLW  03
0E3D4:  MOVWF  xCE
0E3D6:  MOVLW  E8
0E3D8:  MOVWF  xCD
0E3DA:  MOVLB  0
0E3DC:  GOTO   E2AC
0E3E0:  MOVFF  1C8,FEA
0E3E4:  MOVFF  1C7,FE9
0E3E8:  MOVFF  03,1C0
0E3EC:  MOVFF  02,1BF
0E3F0:  MOVFF  01,1BE
0E3F4:  MOVFF  00,1BD
.................... 
....................    while (current_time_ms - start_time_ms < meas_time_ms) {
0E3F8:  MOVLB  1
0E3FA:  MOVF   xB5,W
0E3FC:  SUBWF  xB9,W
0E3FE:  MOVWF  xC3
0E400:  MOVF   xB6,W
0E402:  SUBWFB xBA,W
0E404:  MOVWF  xC4
0E406:  MOVF   xB7,W
0E408:  SUBWFB xBB,W
0E40A:  MOVWF  xC5
0E40C:  MOVF   xB8,W
0E40E:  SUBWFB xBC,W
0E410:  MOVWF  xC6
0E412:  MOVF   xC6,W
0E414:  SUBWF  xC0,W
0E416:  BTFSC  FD8.0
0E418:  BRA    E420
0E41A:  MOVLB  0
0E41C:  GOTO   E504
0E420:  MOVLB  0
0E422:  BTFSS  FD8.2
0E424:  GOTO   E46A
0E428:  MOVLB  1
0E42A:  MOVF   xC5,W
0E42C:  SUBWF  xBF,W
0E42E:  BTFSC  FD8.0
0E430:  BRA    E438
0E432:  MOVLB  0
0E434:  GOTO   E504
0E438:  MOVLB  0
0E43A:  BTFSS  FD8.2
0E43C:  GOTO   E46A
0E440:  MOVLB  1
0E442:  MOVF   xC4,W
0E444:  SUBWF  xBE,W
0E446:  BTFSC  FD8.0
0E448:  BRA    E450
0E44A:  MOVLB  0
0E44C:  GOTO   E504
0E450:  MOVLB  0
0E452:  BTFSS  FD8.2
0E454:  GOTO   E46A
0E458:  MOVLB  1
0E45A:  MOVF   xBD,W
0E45C:  SUBWF  xC3,W
0E45E:  BTFSS  FD8.0
0E460:  BRA    E468
0E462:  MOVLB  0
0E464:  GOTO   E504
0E468:  MOVLB  0
.................... 
....................       current_time_ms = get_current_msec();
0E46A:  CALL   9B3A
0E46E:  MOVLB  1
0E470:  CLRF   xBC
0E472:  CLRF   xBB
0E474:  MOVFF  02,1BA
0E478:  MOVFF  01,1B9
.................... 
....................       // interval ごとに実行
....................       static unsigned int32 last_meas_time = 0;
....................       if (current_time_ms - last_meas_time >= interval_ms) {
0E47C:  MOVF   x88,W
0E47E:  SUBWF  xB9,W
0E480:  MOVWF  xC3
0E482:  MOVF   x89,W
0E484:  SUBWFB xBA,W
0E486:  MOVWF  xC4
0E488:  MOVF   x8A,W
0E48A:  SUBWFB xBB,W
0E48C:  MOVWF  xC5
0E48E:  MOVF   x8B,W
0E490:  SUBWFB xBC,W
0E492:  MOVWF  xC6
0E494:  MOVF   xC6,F
0E496:  BTFSC  FD8.2
0E498:  BRA    E4A0
0E49A:  MOVLB  0
0E49C:  GOTO   E4DC
0E4A0:  MOVLB  0
0E4A2:  MOVLB  1
0E4A4:  MOVF   xC5,F
0E4A6:  BTFSC  FD8.2
0E4A8:  BRA    E4B0
0E4AA:  MOVLB  0
0E4AC:  GOTO   E4DC
0E4B0:  MOVLB  0
0E4B2:  MOVLB  1
0E4B4:  MOVF   xB2,W
0E4B6:  SUBWF  xC4,W
0E4B8:  BTFSC  FD8.0
0E4BA:  BRA    E4C2
0E4BC:  MOVLB  0
0E4BE:  GOTO   E500
0E4C2:  MOVLB  0
0E4C4:  BTFSS  FD8.2
0E4C6:  GOTO   E4DC
0E4CA:  MOVLB  1
0E4CC:  MOVF   xB1,W
0E4CE:  SUBWF  xC3,W
0E4D0:  BTFSC  FD8.0
0E4D2:  BRA    E4DA
0E4D4:  MOVLB  0
0E4D6:  GOTO   E500
0E4DA:  MOVLB  0
....................          last_meas_time = current_time_ms;
0E4DC:  MOVFF  1BC,18B
0E4E0:  MOVFF  1BB,18A
0E4E4:  MOVFF  1BA,189
0E4E8:  MOVFF  1B9,188
.................... 
....................          // PD センサー読み取り
....................          unsigned int16 pd = ad7490_read(ADC_PD);
0E4EC:  MOVLW  0F
0E4EE:  MOVLB  9
0E4F0:  MOVWF  xEE
0E4F2:  MOVLB  0
0E4F4:  CALL   24C2
0E4F8:  MOVFF  02,1C2
0E4FC:  MOVFF  01,1C1
.................... 
....................          // デバッグ出力
....................          // fprintf(PC, "Time:%lu ms, PD:%u\r\n", current_time_ms - start_time_ms, pd);
....................       }
0E500:  GOTO   E3F8
....................    }
.................... 
....................    fprintf(PC, "End MODE MEAS PD\r\n");
0E504:  MOVLW  3A
0E506:  MOVWF  FF6
0E508:  MOVLW  1B
0E50A:  MOVWF  FF7
0E50C:  MOVLW  00
0E50E:  MOVWF  FF8
0E510:  CALL   22DC
0E514:  GOTO   F8DC (RETURN)
.................... }
.................... 
.................... #include "application/cigs_mode_flash.c"
.................... #include "cigs_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../domain/cigs_flash.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... // Flash 操作用構造体
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/cigs_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... 
.................... // ========================== MISF Command ============================
.................... void mode_misf_erase_all(int8 parameter[])
.................... {
....................    printf("Start Flash Erase All\r\n");
*
05C76:  MOVLW  4E
05C78:  MOVWF  FF6
05C7A:  MOVLW  1B
05C7C:  MOVWF  FF7
05C7E:  MOVLW  00
05C80:  MOVWF  FF8
05C82:  CALL   22DC
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
05C86:  MOVLB  1
05C88:  MOVF   xCA,W
05C8A:  MOVWF  FE9
05C8C:  MOVF   xCB,W
05C8E:  MOVWF  FEA
05C90:  MOVFF  FEF,1CC
....................    piclog_make(cmd, 0x00); // Log the command execution
05C94:  MOVFF  1CC,20F
05C98:  MOVLB  2
05C9A:  CLRF   x10
05C9C:  MOVLB  0
05C9E:  CALL   50EC
....................    
....................    for (int32 address = MISF_START; address < MISF_END; address += SECTOR_64K_BYTE) {
05CA2:  MOVLB  1
05CA4:  CLRF   xD0
05CA6:  CLRF   xCF
05CA8:  CLRF   xCE
05CAA:  CLRF   xCD
05CAC:  MOVLB  0
05CAE:  MOVLB  1
05CB0:  MOVF   xD0,F
05CB2:  BTFSC  FD8.2
05CB4:  BRA    5CBC
05CB6:  MOVLB  0
05CB8:  GOTO   5D34
05CBC:  MOVLB  0
05CBE:  MOVLB  1
05CC0:  MOVF   xCF,W
05CC2:  SUBLW  BC
05CC4:  BTFSC  FD8.0
05CC6:  BRA    5CCE
05CC8:  MOVLB  0
05CCA:  GOTO   5D34
05CCE:  MOVLB  0
05CD0:  BTFSS  FD8.2
05CD2:  GOTO   5D00
05CD6:  MOVLB  1
05CD8:  MOVF   xCE,W
05CDA:  SUBLW  0F
05CDC:  BTFSC  FD8.0
05CDE:  BRA    5CE6
05CE0:  MOVLB  0
05CE2:  GOTO   5D34
05CE6:  MOVLB  0
05CE8:  BTFSS  FD8.2
05CEA:  GOTO   5D00
05CEE:  MOVLB  1
05CF0:  MOVF   xCD,W
05CF2:  SUBLW  FE
05CF4:  BTFSC  FD8.0
05CF6:  BRA    5CFE
05CF8:  MOVLB  0
05CFA:  GOTO   5D34
05CFE:  MOVLB  0
....................       sector_erase(mis_fm, address); // Erase each sector
05D00:  MOVFF  115,1F8
05D04:  MOVFF  114,1F7
05D08:  MOVFF  113,1F6
05D0C:  MOVFF  112,1F5
05D10:  MOVFF  1D0,1FC
05D14:  MOVFF  1CF,1FB
05D18:  MOVFF  1CE,1FA
05D1C:  MOVFF  1CD,1F9
05D20:  CALL   5914
05D24:  MOVLW  01
05D26:  MOVLB  1
05D28:  ADDWF  xCF,F
05D2A:  MOVLW  00
05D2C:  ADDWFC xD0,F
05D2E:  MOVLB  0
05D30:  GOTO   5CAE
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05D34:  MOVFF  1CC,20F
05D38:  MOVLB  2
05D3A:  SETF   x10
05D3C:  MOVLB  0
05D3E:  CALL   50EC
....................    printf("End Flash Erase All\r\n");
05D42:  MOVLW  66
05D44:  MOVWF  FF6
05D46:  MOVLW  1B
05D48:  MOVWF  FF7
05D4A:  MOVLW  00
05D4C:  MOVWF  FF8
05D4E:  CALL   22DC
05D52:  RETURN 0
.................... }
.................... 
.................... void mode_misf_erase_1sector(int8 parameter[])
.................... {
....................    printf("Start Flash Erase 1 Sector\r\n");
05D54:  MOVLW  7C
05D56:  MOVWF  FF6
05D58:  MOVLW  1B
05D5A:  MOVWF  FF7
05D5C:  MOVLW  00
05D5E:  MOVWF  FF8
05D60:  CALL   22DC
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    int32 sector_address = 
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
05D64:  MOVLB  1
05D66:  MOVF   xAF,W
05D68:  MOVWF  FE9
05D6A:  MOVF   xB0,W
05D6C:  MOVWF  FEA
05D6E:  MOVFF  FEF,1B1
05D72:  MOVLW  01
05D74:  ADDWF  xAF,W
05D76:  MOVWF  FE9
05D78:  MOVLW  00
05D7A:  ADDWFC xB0,W
05D7C:  MOVWF  FEA
05D7E:  MOVF   FEF,W
05D80:  CLRF   xB9
05D82:  CLRF   xB8
05D84:  CLRF   xB7
05D86:  MOVWF  xB6
05D88:  MOVFF  1B6,1B9
05D8C:  CLRF   xB6
05D8E:  CLRF   xB7
05D90:  CLRF   xB8
05D92:  MOVLW  02
05D94:  ADDWF  xAF,W
05D96:  MOVWF  FE9
05D98:  MOVLW  00
05D9A:  ADDWFC xB0,W
05D9C:  MOVWF  FEA
05D9E:  MOVF   FEF,W
05DA0:  CLRF   xBE
05DA2:  CLRF   xBD
05DA4:  CLRF   xBC
05DA6:  MOVWF  xBB
05DA8:  MOVFF  1BC,03
05DAC:  MOVFF  1BB,02
05DB0:  CLRF   00
05DB2:  CLRF   01
05DB4:  MOVF   00,W
05DB6:  IORWF  xB6,F
05DB8:  MOVF   01,W
05DBA:  IORWF  xB7,F
05DBC:  MOVF   02,W
05DBE:  IORWF  xB8,F
05DC0:  MOVF   03,W
05DC2:  IORWF  xB9,F
05DC4:  MOVLW  03
05DC6:  ADDWF  xAF,W
05DC8:  MOVWF  FE9
05DCA:  MOVLW  00
05DCC:  ADDWFC xB0,W
05DCE:  MOVWF  FEA
05DD0:  MOVF   FEF,W
05DD2:  CLRF   xBE
05DD4:  CLRF   xBD
05DD6:  CLRF   xBC
05DD8:  MOVWF  xBB
05DDA:  MOVFF  1BD,03
05DDE:  MOVFF  1BC,02
05DE2:  MOVFF  1BB,01
05DE6:  CLRF   00
05DE8:  MOVF   00,W
05DEA:  IORWF  xB6,F
05DEC:  MOVF   01,W
05DEE:  IORWF  xB7,F
05DF0:  MOVF   02,W
05DF2:  IORWF  xB8,F
05DF4:  MOVF   03,W
05DF6:  IORWF  xB9,F
05DF8:  MOVLW  04
05DFA:  ADDWF  xAF,W
05DFC:  MOVWF  FE9
05DFE:  MOVLW  00
05E00:  ADDWFC xB0,W
05E02:  MOVWF  FEA
05E04:  MOVF   FEF,W
05E06:  MOVWF  00
05E08:  CLRF   01
05E0A:  CLRF   02
05E0C:  CLRF   03
05E0E:  MOVF   00,W
05E10:  IORWF  xB6,W
05E12:  MOVWF  xB2
05E14:  MOVF   01,W
05E16:  IORWF  xB7,W
05E18:  MOVWF  xB3
05E1A:  MOVF   02,W
05E1C:  IORWF  xB8,W
05E1E:  MOVWF  xB4
05E20:  MOVF   03,W
05E22:  IORWF  xB9,W
05E24:  MOVWF  xB5
.................... 
....................    printf("\tSector Address: 0x%08LX\r\n", sector_address);
05E26:  MOVLW  9A
05E28:  MOVWF  FF6
05E2A:  MOVLW  1B
05E2C:  MOVWF  FF7
05E2E:  MOVLW  00
05E30:  MOVWF  FF8
05E32:  MOVLW  13
05E34:  MOVLB  9
05E36:  MOVWF  xC2
05E38:  MOVLB  0
05E3A:  CALL   2312
05E3E:  MOVFF  1B5,9E8
05E42:  MOVLW  37
05E44:  MOVLB  9
05E46:  MOVWF  xE9
05E48:  MOVLB  0
05E4A:  CALL   2542
05E4E:  MOVFF  1B4,9E8
05E52:  MOVLW  37
05E54:  MOVLB  9
05E56:  MOVWF  xE9
05E58:  MOVLB  0
05E5A:  CALL   2542
05E5E:  MOVFF  1B3,9E8
05E62:  MOVLW  37
05E64:  MOVLB  9
05E66:  MOVWF  xE9
05E68:  MOVLB  0
05E6A:  CALL   2542
05E6E:  MOVFF  1B2,9E8
05E72:  MOVLW  37
05E74:  MOVLB  9
05E76:  MOVWF  xE9
05E78:  MOVLB  0
05E7A:  CALL   2542
05E7E:  MOVLW  0D
05E80:  BTFSS  FA6.6
05E82:  GOTO   5E80
05E86:  MOVLB  E
05E88:  MOVWF  xF9
05E8A:  MOVLW  0A
05E8C:  MOVLB  0
05E8E:  BTFSS  FA6.6
05E90:  GOTO   5E8E
05E94:  MOVLB  E
05E96:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05E98:  MOVFF  1B1,20F
05E9C:  MOVLB  2
05E9E:  CLRF   x10
05EA0:  MOVLB  0
05EA2:  CALL   50EC
....................    
....................    sector_erase(mis_fm, sector_address);
05EA6:  MOVFF  115,1F8
05EAA:  MOVFF  114,1F7
05EAE:  MOVFF  113,1F6
05EB2:  MOVFF  112,1F5
05EB6:  MOVFF  1B5,1FC
05EBA:  MOVFF  1B4,1FB
05EBE:  MOVFF  1B3,1FA
05EC2:  MOVFF  1B2,1F9
05EC6:  CALL   5914
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05ECA:  MOVFF  1B1,20F
05ECE:  MOVLB  2
05ED0:  SETF   x10
05ED2:  MOVLB  0
05ED4:  CALL   50EC
....................    printf("End Flash Erase 1 Sector\r\n");
05ED8:  MOVLW  B6
05EDA:  MOVWF  FF6
05EDC:  MOVLW  1B
05EDE:  MOVWF  FF7
05EE0:  MOVLW  00
05EE2:  MOVWF  FF8
05EE4:  CALL   22DC
05EE8:  GOTO   F7B8 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_4kbyte_subsector(int8 parameter[])
.................... {
....................    printf("Start Flash Erase 4kByte Subsector\r\n");
05EEC:  MOVLW  D2
05EEE:  MOVWF  FF6
05EF0:  MOVLW  1B
05EF2:  MOVWF  FF7
05EF4:  MOVLW  00
05EF6:  MOVWF  FF8
05EF8:  CALL   22DC
....................    int8 cmd = parameter[0];
....................    int32 subsector_address =
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
05EFC:  MOVLB  1
05EFE:  MOVF   xAF,W
05F00:  MOVWF  FE9
05F02:  MOVF   xB0,W
05F04:  MOVWF  FEA
05F06:  MOVFF  FEF,1B1
05F0A:  MOVLW  01
05F0C:  ADDWF  xAF,W
05F0E:  MOVWF  FE9
05F10:  MOVLW  00
05F12:  ADDWFC xB0,W
05F14:  MOVWF  FEA
05F16:  MOVF   FEF,W
05F18:  CLRF   xB9
05F1A:  CLRF   xB8
05F1C:  CLRF   xB7
05F1E:  MOVWF  xB6
05F20:  MOVFF  1B6,1B9
05F24:  CLRF   xB6
05F26:  CLRF   xB7
05F28:  CLRF   xB8
05F2A:  MOVLW  02
05F2C:  ADDWF  xAF,W
05F2E:  MOVWF  FE9
05F30:  MOVLW  00
05F32:  ADDWFC xB0,W
05F34:  MOVWF  FEA
05F36:  MOVF   FEF,W
05F38:  CLRF   xBE
05F3A:  CLRF   xBD
05F3C:  CLRF   xBC
05F3E:  MOVWF  xBB
05F40:  MOVFF  1BC,03
05F44:  MOVFF  1BB,02
05F48:  CLRF   00
05F4A:  CLRF   01
05F4C:  MOVF   00,W
05F4E:  IORWF  xB6,F
05F50:  MOVF   01,W
05F52:  IORWF  xB7,F
05F54:  MOVF   02,W
05F56:  IORWF  xB8,F
05F58:  MOVF   03,W
05F5A:  IORWF  xB9,F
05F5C:  MOVLW  03
05F5E:  ADDWF  xAF,W
05F60:  MOVWF  FE9
05F62:  MOVLW  00
05F64:  ADDWFC xB0,W
05F66:  MOVWF  FEA
05F68:  MOVF   FEF,W
05F6A:  CLRF   xBE
05F6C:  CLRF   xBD
05F6E:  CLRF   xBC
05F70:  MOVWF  xBB
05F72:  MOVFF  1BD,03
05F76:  MOVFF  1BC,02
05F7A:  MOVFF  1BB,01
05F7E:  CLRF   00
05F80:  MOVF   00,W
05F82:  IORWF  xB6,F
05F84:  MOVF   01,W
05F86:  IORWF  xB7,F
05F88:  MOVF   02,W
05F8A:  IORWF  xB8,F
05F8C:  MOVF   03,W
05F8E:  IORWF  xB9,F
05F90:  MOVLW  04
05F92:  ADDWF  xAF,W
05F94:  MOVWF  FE9
05F96:  MOVLW  00
05F98:  ADDWFC xB0,W
05F9A:  MOVWF  FEA
05F9C:  MOVF   FEF,W
05F9E:  MOVWF  00
05FA0:  CLRF   01
05FA2:  CLRF   02
05FA4:  CLRF   03
05FA6:  MOVF   00,W
05FA8:  IORWF  xB6,W
05FAA:  MOVWF  xB2
05FAC:  MOVF   01,W
05FAE:  IORWF  xB7,W
05FB0:  MOVWF  xB3
05FB2:  MOVF   02,W
05FB4:  IORWF  xB8,W
05FB6:  MOVWF  xB4
05FB8:  MOVF   03,W
05FBA:  IORWF  xB9,W
05FBC:  MOVWF  xB5
....................    printf("\tSubsector Address: 0x%08LX\r\n", subsector_address);
05FBE:  MOVLW  F8
05FC0:  MOVWF  FF6
05FC2:  MOVLW  1B
05FC4:  MOVWF  FF7
05FC6:  MOVLW  00
05FC8:  MOVWF  FF8
05FCA:  MOVLW  16
05FCC:  MOVLB  9
05FCE:  MOVWF  xC2
05FD0:  MOVLB  0
05FD2:  CALL   2312
05FD6:  MOVFF  1B5,9E8
05FDA:  MOVLW  37
05FDC:  MOVLB  9
05FDE:  MOVWF  xE9
05FE0:  MOVLB  0
05FE2:  CALL   2542
05FE6:  MOVFF  1B4,9E8
05FEA:  MOVLW  37
05FEC:  MOVLB  9
05FEE:  MOVWF  xE9
05FF0:  MOVLB  0
05FF2:  CALL   2542
05FF6:  MOVFF  1B3,9E8
05FFA:  MOVLW  37
05FFC:  MOVLB  9
05FFE:  MOVWF  xE9
06000:  MOVLB  0
06002:  CALL   2542
06006:  MOVFF  1B2,9E8
0600A:  MOVLW  37
0600C:  MOVLB  9
0600E:  MOVWF  xE9
06010:  MOVLB  0
06012:  CALL   2542
06016:  MOVLW  0D
06018:  BTFSS  FA6.6
0601A:  GOTO   6018
0601E:  MOVLB  E
06020:  MOVWF  xF9
06022:  MOVLW  0A
06024:  MOVLB  0
06026:  BTFSS  FA6.6
06028:  GOTO   6026
0602C:  MOVLB  E
0602E:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START);
06030:  MOVFF  1B1,20F
06034:  MOVLB  2
06036:  CLRF   x10
06038:  MOVLB  0
0603A:  CALL   50EC
....................    subsector_4kByte_erase(mis_fm, subsector_address); // FIX: 固定0消去→指定アドレス
0603E:  MOVFF  115,A07
06042:  MOVFF  114,A06
06046:  MOVFF  113,A05
0604A:  MOVFF  112,A04
0604E:  MOVFF  1B5,A0B
06052:  MOVFF  1B4,A0A
06056:  MOVFF  1B3,A09
0605A:  MOVFF  1B2,A08
0605E:  CALL   4D3A
....................    piclog_make(cmd, PICLOG_PARAM_END);
06062:  MOVFF  1B1,20F
06066:  MOVLB  2
06068:  SETF   x10
0606A:  MOVLB  0
0606C:  CALL   50EC
....................    printf("End Flash Erase 4kByte Subsector\r\n");
06070:  MOVLW  16
06072:  MOVWF  FF6
06074:  MOVLW  1C
06076:  MOVWF  FF7
06078:  MOVLW  00
0607A:  MOVWF  FF8
0607C:  CALL   22DC
06080:  GOTO   F7C8 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 64kByte Subsector\r\n");
06084:  MOVLW  3A
06086:  MOVWF  FF6
06088:  MOVLW  1C
0608A:  MOVWF  FF7
0608C:  MOVLW  00
0608E:  MOVWF  FF8
06090:  CALL   22DC
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
06094:  MOVLB  1
06096:  MOVF   xAF,W
06098:  MOVWF  FE9
0609A:  MOVF   xB0,W
0609C:  MOVWF  FEA
0609E:  MOVFF  FEF,1B1
060A2:  MOVLW  01
060A4:  ADDWF  xAF,W
060A6:  MOVWF  FE9
060A8:  MOVLW  00
060AA:  ADDWFC xB0,W
060AC:  MOVWF  FEA
060AE:  MOVF   FEF,W
060B0:  CLRF   xB9
060B2:  CLRF   xB8
060B4:  CLRF   xB7
060B6:  MOVWF  xB6
060B8:  MOVFF  1B6,1B9
060BC:  CLRF   xB6
060BE:  CLRF   xB7
060C0:  CLRF   xB8
060C2:  MOVLW  02
060C4:  ADDWF  xAF,W
060C6:  MOVWF  FE9
060C8:  MOVLW  00
060CA:  ADDWFC xB0,W
060CC:  MOVWF  FEA
060CE:  MOVF   FEF,W
060D0:  CLRF   xBE
060D2:  CLRF   xBD
060D4:  CLRF   xBC
060D6:  MOVWF  xBB
060D8:  MOVFF  1BC,03
060DC:  MOVFF  1BB,02
060E0:  CLRF   00
060E2:  CLRF   01
060E4:  MOVF   00,W
060E6:  IORWF  xB6,F
060E8:  MOVF   01,W
060EA:  IORWF  xB7,F
060EC:  MOVF   02,W
060EE:  IORWF  xB8,F
060F0:  MOVF   03,W
060F2:  IORWF  xB9,F
060F4:  MOVLW  03
060F6:  ADDWF  xAF,W
060F8:  MOVWF  FE9
060FA:  MOVLW  00
060FC:  ADDWFC xB0,W
060FE:  MOVWF  FEA
06100:  MOVF   FEF,W
06102:  CLRF   xBE
06104:  CLRF   xBD
06106:  CLRF   xBC
06108:  MOVWF  xBB
0610A:  MOVFF  1BD,03
0610E:  MOVFF  1BC,02
06112:  MOVFF  1BB,01
06116:  CLRF   00
06118:  MOVF   00,W
0611A:  IORWF  xB6,F
0611C:  MOVF   01,W
0611E:  IORWF  xB7,F
06120:  MOVF   02,W
06122:  IORWF  xB8,F
06124:  MOVF   03,W
06126:  IORWF  xB9,F
06128:  MOVLW  04
0612A:  ADDWF  xAF,W
0612C:  MOVWF  FE9
0612E:  MOVLW  00
06130:  ADDWFC xB0,W
06132:  MOVWF  FEA
06134:  MOVF   FEF,W
06136:  MOVWF  00
06138:  CLRF   01
0613A:  CLRF   02
0613C:  CLRF   03
0613E:  MOVF   00,W
06140:  IORWF  xB6,W
06142:  MOVWF  xB2
06144:  MOVF   01,W
06146:  IORWF  xB7,W
06148:  MOVWF  xB3
0614A:  MOVF   02,W
0614C:  IORWF  xB8,W
0614E:  MOVWF  xB4
06150:  MOVF   03,W
06152:  IORWF  xB9,W
06154:  MOVWF  xB5
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
06156:  MOVLW  60
06158:  MOVWF  FF6
0615A:  MOVLW  1C
0615C:  MOVWF  FF7
0615E:  MOVLW  00
06160:  MOVWF  FF8
06162:  MOVLW  16
06164:  MOVLB  9
06166:  MOVWF  xC2
06168:  MOVLB  0
0616A:  CALL   2312
0616E:  MOVFF  1B5,9E8
06172:  MOVLW  37
06174:  MOVLB  9
06176:  MOVWF  xE9
06178:  MOVLB  0
0617A:  CALL   2542
0617E:  MOVFF  1B4,9E8
06182:  MOVLW  37
06184:  MOVLB  9
06186:  MOVWF  xE9
06188:  MOVLB  0
0618A:  CALL   2542
0618E:  MOVFF  1B3,9E8
06192:  MOVLW  37
06194:  MOVLB  9
06196:  MOVWF  xE9
06198:  MOVLB  0
0619A:  CALL   2542
0619E:  MOVFF  1B2,9E8
061A2:  MOVLW  37
061A4:  MOVLB  9
061A6:  MOVWF  xE9
061A8:  MOVLB  0
061AA:  CALL   2542
061AE:  MOVLW  0D
061B0:  BTFSS  FA6.6
061B2:  GOTO   61B0
061B6:  MOVLB  E
061B8:  MOVWF  xF9
061BA:  MOVLW  0A
061BC:  MOVLB  0
061BE:  BTFSS  FA6.6
061C0:  GOTO   61BE
061C4:  MOVLB  E
061C6:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
061C8:  MOVFF  1B1,20F
061CC:  MOVLB  2
061CE:  CLRF   x10
061D0:  MOVLB  0
061D2:  CALL   50EC
....................    
....................    //subsector_64kByte_erase(mis_fm, subsector_address);
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
061D6:  MOVFF  1B1,20F
061DA:  MOVLB  2
061DC:  SETF   x10
061DE:  MOVLB  0
061E0:  CALL   50EC
....................    fprintf(PC, "End Flash Erase 64kByte Subsector\r\n");
061E4:  MOVLW  7E
061E6:  MOVWF  FF6
061E8:  MOVLW  1C
061EA:  MOVWF  FF7
061EC:  MOVLW  00
061EE:  MOVWF  FF8
061F0:  CALL   22DC
061F4:  GOTO   F7D8 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
*
063D8:  MOVLW  A2
063DA:  MOVWF  FF6
063DC:  MOVLW  1C
063DE:  MOVWF  FF7
063E0:  MOVLW  00
063E2:  MOVWF  FF8
063E4:  CALL   22DC
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
063E8:  MOVLB  1
063EA:  MOVF   xAF,W
063EC:  MOVWF  FE9
063EE:  MOVF   xB0,W
063F0:  MOVWF  FEA
063F2:  MOVFF  FEF,205
063F6:  MOVFF  205,20F
063FA:  MOVLB  2
063FC:  CLRF   x10
063FE:  MOVLB  0
06400:  CALL   50EC
.................... 
....................    FLASH_WRITE_PARAM flash_write_param = {0};
06404:  MOVLB  1
06406:  CLRF   xB1
06408:  CLRF   xB2
0640A:  CLRF   xB3
0640C:  CLRF   xB4
0640E:  CLRF   xB5
06410:  CLRF   xB6
06412:  CLRF   xB7
....................    
....................    flash_write_param.id = parameter[0];
06414:  MOVF   xAF,W
06416:  MOVWF  FE9
06418:  MOVF   xB0,W
0641A:  MOVWF  FEA
0641C:  MOVFF  FEF,1B1
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
06420:  MOVLW  01
06422:  ADDWF  xAF,W
06424:  MOVWF  FE9
06426:  MOVLW  00
06428:  ADDWFC xB0,W
0642A:  MOVWF  FEA
0642C:  MOVF   FEF,W
0642E:  MOVLB  2
06430:  CLRF   x08
06432:  CLRF   x07
06434:  CLRF   x06
06436:  MOVWF  x05
06438:  MOVFF  205,208
0643C:  CLRF   x05
0643E:  CLRF   x06
06440:  CLRF   x07
06442:  MOVLW  02
06444:  MOVLB  1
06446:  ADDWF  xAF,W
06448:  MOVWF  FE9
0644A:  MOVLW  00
0644C:  ADDWFC xB0,W
0644E:  MOVWF  FEA
06450:  MOVF   FEF,W
06452:  MOVLB  2
06454:  CLRF   x0D
06456:  CLRF   x0C
06458:  CLRF   x0B
0645A:  MOVWF  x0A
0645C:  MOVFF  20B,03
06460:  MOVFF  20A,02
06464:  CLRF   00
06466:  CLRF   01
06468:  MOVF   00,W
0646A:  IORWF  x05,F
0646C:  MOVF   01,W
0646E:  IORWF  x06,F
06470:  MOVF   02,W
06472:  IORWF  x07,F
06474:  MOVF   03,W
06476:  IORWF  x08,F
06478:  MOVLW  03
0647A:  MOVLB  1
0647C:  ADDWF  xAF,W
0647E:  MOVWF  FE9
06480:  MOVLW  00
06482:  ADDWFC xB0,W
06484:  MOVWF  FEA
06486:  MOVF   FEF,W
06488:  MOVLB  2
0648A:  CLRF   x0D
0648C:  CLRF   x0C
0648E:  CLRF   x0B
06490:  MOVWF  x0A
06492:  MOVFF  20C,03
06496:  MOVFF  20B,02
0649A:  MOVFF  20A,01
0649E:  CLRF   00
064A0:  MOVF   00,W
064A2:  IORWF  x05,F
064A4:  MOVF   01,W
064A6:  IORWF  x06,F
064A8:  MOVF   02,W
064AA:  IORWF  x07,F
064AC:  MOVF   03,W
064AE:  IORWF  x08,F
064B0:  MOVLW  04
064B2:  MOVLB  1
064B4:  ADDWF  xAF,W
064B6:  MOVWF  FE9
064B8:  MOVLW  00
064BA:  ADDWFC xB0,W
064BC:  MOVWF  FEA
064BE:  MOVF   FEF,W
064C0:  MOVWF  00
064C2:  CLRF   01
064C4:  CLRF   02
064C6:  CLRF   03
064C8:  MOVF   00,W
064CA:  MOVLB  2
064CC:  IORWF  x05,W
064CE:  MOVLB  1
064D0:  MOVWF  xB2
064D2:  MOVF   01,W
064D4:  MOVLB  2
064D6:  IORWF  x06,W
064D8:  MOVLB  1
064DA:  MOVWF  xB3
064DC:  MOVF   02,W
064DE:  MOVLB  2
064E0:  IORWF  x07,W
064E2:  MOVLB  1
064E4:  MOVWF  xB4
064E6:  MOVF   03,W
064E8:  MOVLB  2
064EA:  IORWF  x08,W
064EC:  MOVLB  1
064EE:  MOVWF  xB5
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
064F0:  MOVLW  07
064F2:  ADDWF  xAF,W
064F4:  MOVWF  FE9
064F6:  MOVLW  00
064F8:  ADDWFC xB0,W
064FA:  MOVWF  FEA
064FC:  MOVF   FEF,W
064FE:  MOVLB  2
06500:  CLRF   x06
06502:  MOVWF  x05
06504:  MOVFF  205,206
06508:  CLRF   x05
0650A:  MOVLW  08
0650C:  MOVLB  1
0650E:  ADDWF  xAF,W
06510:  MOVWF  FE9
06512:  MOVLW  00
06514:  ADDWFC xB0,W
06516:  MOVWF  FEA
06518:  MOVF   FEF,W
0651A:  CLRF   03
0651C:  MOVLB  2
0651E:  IORWF  x05,W
06520:  MOVLB  1
06522:  MOVWF  xB6
06524:  MOVF   03,W
06526:  MOVLB  2
06528:  IORWF  x06,W
0652A:  MOVLB  1
0652C:  MOVWF  xB7
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
0652E:  MOVLW  BC
06530:  MOVWF  FF6
06532:  MOVLW  1C
06534:  MOVWF  FF7
06536:  MOVLW  00
06538:  MOVWF  FF8
0653A:  MOVLW  0C
0653C:  MOVLB  9
0653E:  MOVWF  xC2
06540:  MOVLB  0
06542:  CALL   2312
06546:  MOVFF  1B1,9E8
0654A:  MOVLW  37
0654C:  MOVLB  9
0654E:  MOVWF  xE9
06550:  MOVLB  0
06552:  CALL   2542
06556:  MOVLW  0D
06558:  BTFSS  FA6.6
0655A:  GOTO   6558
0655E:  MOVLB  E
06560:  MOVWF  xF9
06562:  MOVLW  0A
06564:  MOVLB  0
06566:  BTFSS  FA6.6
06568:  GOTO   6566
0656C:  MOVLB  E
0656E:  MOVWF  xF9
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
06570:  MOVLW  D0
06572:  MOVWF  FF6
06574:  MOVLW  1C
06576:  MOVWF  FF7
06578:  MOVLW  00
0657A:  MOVWF  FF8
0657C:  MOVLW  0E
0657E:  MOVLB  9
06580:  MOVWF  xC2
06582:  MOVLB  0
06584:  CALL   2312
06588:  MOVFF  1B5,9E8
0658C:  MOVLW  37
0658E:  MOVLB  9
06590:  MOVWF  xE9
06592:  MOVLB  0
06594:  CALL   2542
06598:  MOVFF  1B4,9E8
0659C:  MOVLW  37
0659E:  MOVLB  9
065A0:  MOVWF  xE9
065A2:  MOVLB  0
065A4:  CALL   2542
065A8:  MOVFF  1B3,9E8
065AC:  MOVLW  37
065AE:  MOVLB  9
065B0:  MOVWF  xE9
065B2:  MOVLB  0
065B4:  CALL   2542
065B8:  MOVFF  1B2,9E8
065BC:  MOVLW  37
065BE:  MOVLB  9
065C0:  MOVWF  xE9
065C2:  MOVLB  0
065C4:  CALL   2542
065C8:  MOVLW  0D
065CA:  BTFSS  FA6.6
065CC:  GOTO   65CA
065D0:  MOVLB  E
065D2:  MOVWF  xF9
065D4:  MOVLW  0A
065D6:  MOVLB  0
065D8:  BTFSS  FA6.6
065DA:  GOTO   65D8
065DE:  MOVLB  E
065E0:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
065E2:  MOVLW  E6
065E4:  MOVWF  FF6
065E6:  MOVLW  1C
065E8:  MOVWF  FF7
065EA:  MOVLW  00
065EC:  MOVWF  FF8
065EE:  MOVLW  0E
065F0:  MOVLB  9
065F2:  MOVWF  xC2
065F4:  MOVLB  0
065F6:  CALL   2312
065FA:  MOVFF  1B7,9E8
065FE:  MOVLW  37
06600:  MOVLB  9
06602:  MOVWF  xE9
06604:  MOVLB  0
06606:  CALL   2542
0660A:  MOVFF  1B6,9E8
0660E:  MOVLW  37
06610:  MOVLB  9
06612:  MOVWF  xE9
06614:  MOVLB  0
06616:  CALL   2542
0661A:  MOVLW  0D
0661C:  BTFSS  FA6.6
0661E:  GOTO   661C
06622:  MOVLB  E
06624:  MOVWF  xF9
06626:  MOVLW  0A
06628:  MOVLB  0
0662A:  BTFSS  FA6.6
0662C:  GOTO   662A
06630:  MOVLB  E
06632:  MOVWF  xF9
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
06634:  MOVFF  1B1,20F
06638:  MOVLB  2
0663A:  CLRF   x10
0663C:  MOVLB  0
0663E:  CALL   50EC
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
06642:  MOVLW  FC
06644:  MOVWF  FF6
06646:  MOVLW  1C
06648:  MOVWF  FF7
0664A:  MOVLW  00
0664C:  MOVWF  FF8
0664E:  CALL   22DC
....................    for (p = 0; p < flash_write_param.packetnum; p++)
06652:  MOVLB  1
06654:  CLRF   xF9
06656:  CLRF   xF8
06658:  MOVLB  0
0665A:  MOVLB  1
0665C:  MOVF   xF9,W
0665E:  SUBWF  xB7,W
06660:  BTFSC  FD8.0
06662:  BRA    666A
06664:  MOVLB  0
06666:  GOTO   69E4
0666A:  MOVLB  0
0666C:  BTFSS  FD8.2
0666E:  GOTO   6684
06672:  MOVLB  1
06674:  MOVF   xB6,W
06676:  SUBWF  xF8,W
06678:  BTFSS  FD8.0
0667A:  BRA    6682
0667C:  MOVLB  0
0667E:  GOTO   69E4
06682:  MOVLB  0
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
06684:  MOVLB  1
06686:  RLCF   xF8,W
06688:  MOVWF  xFA
0668A:  RLCF   xF9,W
0668C:  MOVWF  xFB
0668E:  RLCF   xFA,F
06690:  RLCF   xFB,F
06692:  RLCF   xFA,F
06694:  RLCF   xFB,F
06696:  RLCF   xFA,F
06698:  RLCF   xFB,F
0669A:  RLCF   xFA,F
0669C:  RLCF   xFB,F
0669E:  RLCF   xFA,F
066A0:  RLCF   xFB,F
066A2:  MOVLW  C0
066A4:  ANDWF  xFA,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
066A6:  CLRF   xFC
066A8:  MOVLB  0
066AA:  MOVLB  1
066AC:  MOVF   xFC,W
066AE:  SUBLW  3F
066B0:  BTFSC  FD8.0
066B2:  BRA    66BA
066B4:  MOVLB  0
066B6:  GOTO   6724
066BA:  MOVLB  0
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
066BC:  CLRF   03
066BE:  MOVLB  1
066C0:  MOVF   xFC,W
066C2:  ADDLW  B8
066C4:  MOVWF  FE9
066C6:  MOVLW  01
066C8:  ADDWFC 03,W
066CA:  MOVWF  FEA
066CC:  MOVF   xFC,W
066CE:  ADDWF  xFA,W
066D0:  MOVLB  2
066D2:  MOVWF  x07
066D4:  MOVLW  00
066D6:  MOVLB  1
066D8:  ADDWFC xFB,W
066DA:  MOVLB  2
066DC:  MOVWF  x08
066DE:  MOVF   x07,W
066E0:  MOVWF  00
066E2:  CLRF   03
066E4:  MOVF   00,W
066E6:  MOVWF  FEF
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
066E8:  CLRF   03
066EA:  MOVLB  1
066EC:  MOVF   xFC,W
066EE:  ADDLW  B8
066F0:  MOVWF  FE9
066F2:  MOVLW  01
066F4:  ADDWFC 03,W
066F6:  MOVWF  FEA
066F8:  MOVFF  FEF,205
066FC:  MOVFF  205,9E8
06700:  MOVLW  37
06702:  MOVLB  9
06704:  MOVWF  xE9
06706:  MOVLB  0
06708:  CALL   2542
0670C:  MOVLW  20
0670E:  BTFSS  FA6.6
06710:  GOTO   670E
06714:  MOVLB  E
06716:  MOVWF  xF9
06718:  MOVLB  0
0671A:  MOVLB  1
0671C:  INCF   xFC,F
0671E:  MOVLB  0
06720:  GOTO   66AA
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
06724:  MOVLB  1
06726:  RLCF   xF8,W
06728:  MOVWF  02
0672A:  RLCF   xF9,W
0672C:  MOVWF  03
0672E:  RLCF   02,F
06730:  RLCF   03,F
06732:  RLCF   02,F
06734:  RLCF   03,F
06736:  RLCF   02,F
06738:  RLCF   03,F
0673A:  RLCF   02,F
0673C:  RLCF   03,F
0673E:  RLCF   02,F
06740:  RLCF   03,F
06742:  MOVLW  C0
06744:  ANDWF  02,F
06746:  MOVF   02,W
06748:  ADDWF  xB2,W
0674A:  MOVWF  xFD
0674C:  MOVF   03,W
0674E:  ADDWFC xB3,W
06750:  MOVWF  xFE
06752:  MOVLW  00
06754:  ADDWFC xB4,W
06756:  MOVWF  xFF
06758:  MOVLW  00
0675A:  ADDWFC xB5,W
0675C:  MOVLB  2
0675E:  MOVWF  x00
....................       // FLASH 終端チェック (MISF_END は最終アドレス想定: inclusive)
....................       if(current_address > MISF_END){
06760:  MOVF   x00,F
06762:  BTFSC  FD8.2
06764:  BRA    676C
06766:  MOVLB  0
06768:  GOTO   679A
0676C:  MOVLB  0
0676E:  MOVLB  1
06770:  MOVF   xFF,W
06772:  SUBLW  BB
06774:  BTFSS  FD8.0
06776:  BRA    677E
06778:  MOVLB  0
0677A:  GOTO   6870
0677E:  MOVLB  0
06780:  XORLW  FF
06782:  BTFSS  FD8.2
06784:  GOTO   679A
06788:  MOVLB  1
0678A:  MOVF   xFE,W
0678C:  SUBLW  0F
0678E:  BTFSS  FD8.0
06790:  BRA    6798
06792:  MOVLB  0
06794:  GOTO   6870
06798:  MOVLB  0
....................          fprintf(PC, "\r\n[FLASH] Write address 0x%08LX exceeds device end 0x%08LX -> abort\r\n", current_address, (unsigned int32)MISF_END);
0679A:  MOVLW  0A
0679C:  MOVWF  FF6
0679E:  MOVLW  1D
067A0:  MOVWF  FF7
067A2:  MOVLW  00
067A4:  MOVWF  FF8
067A6:  MOVLW  1A
067A8:  MOVLB  9
067AA:  MOVWF  xC2
067AC:  MOVLB  0
067AE:  CALL   2312
067B2:  MOVFF  200,9E8
067B6:  MOVLW  37
067B8:  MOVLB  9
067BA:  MOVWF  xE9
067BC:  MOVLB  0
067BE:  CALL   2542
067C2:  MOVFF  1FF,9E8
067C6:  MOVLW  37
067C8:  MOVLB  9
067CA:  MOVWF  xE9
067CC:  MOVLB  0
067CE:  CALL   2542
067D2:  MOVFF  1FE,9E8
067D6:  MOVLW  37
067D8:  MOVLB  9
067DA:  MOVWF  xE9
067DC:  MOVLB  0
067DE:  CALL   2542
067E2:  MOVFF  1FD,9E8
067E6:  MOVLW  37
067E8:  MOVLB  9
067EA:  MOVWF  xE9
067EC:  MOVLB  0
067EE:  CALL   2542
067F2:  MOVLW  29
067F4:  MOVWF  FF6
067F6:  MOVLW  1D
067F8:  MOVWF  FF7
067FA:  MOVLW  00
067FC:  MOVWF  FF8
067FE:  MOVLW  16
06800:  MOVLB  9
06802:  MOVWF  xC2
06804:  MOVLB  0
06806:  CALL   2312
0680A:  MOVLB  9
0680C:  CLRF   xE8
0680E:  MOVLW  37
06810:  MOVWF  xE9
06812:  MOVLB  0
06814:  CALL   2542
06818:  MOVLW  BC
0681A:  MOVLB  9
0681C:  MOVWF  xE8
0681E:  MOVLW  37
06820:  MOVWF  xE9
06822:  MOVLB  0
06824:  CALL   2542
06828:  MOVLW  0F
0682A:  MOVLB  9
0682C:  MOVWF  xE8
0682E:  MOVLW  37
06830:  MOVWF  xE9
06832:  MOVLB  0
06834:  CALL   2542
06838:  MOVLB  9
0683A:  SETF   xE8
0683C:  MOVLW  37
0683E:  MOVWF  xE9
06840:  MOVLB  0
06842:  CALL   2542
06846:  MOVLW  44
06848:  MOVWF  FF6
0684A:  MOVLW  1D
0684C:  MOVWF  FF7
0684E:  MOVLW  00
06850:  MOVWF  FF8
06852:  MOVLW  0B
06854:  MOVLB  9
06856:  MOVWF  xC2
06858:  MOVLB  0
0685A:  CALL   2312
....................          piclog_make(flash_write_param.id, PICLOG_PARAM_END);
0685E:  MOVFF  1B1,20F
06862:  MOVLB  2
06864:  SETF   x10
06866:  MOVLB  0
06868:  CALL   50EC
....................          break;
0686C:  GOTO   69E4
....................       }
....................       if(current_address + (PACKET_SIZE - 1) > MISF_END){
06870:  MOVLW  3F
06872:  MOVLB  1
06874:  ADDWF  xFD,W
06876:  MOVLB  2
06878:  MOVWF  x05
0687A:  MOVLW  00
0687C:  MOVLB  1
0687E:  ADDWFC xFE,W
06880:  MOVLB  2
06882:  MOVWF  x06
06884:  MOVLW  00
06886:  MOVLB  1
06888:  ADDWFC xFF,W
0688A:  MOVLB  2
0688C:  MOVWF  x07
0688E:  MOVLW  00
06890:  ADDWFC x00,W
06892:  MOVWF  x08
06894:  MOVF   x08,F
06896:  BTFSC  FD8.2
06898:  BRA    68A0
0689A:  MOVLB  0
0689C:  GOTO   68CE
068A0:  MOVLB  0
068A2:  MOVLB  2
068A4:  MOVF   x07,W
068A6:  SUBLW  BB
068A8:  BTFSS  FD8.0
068AA:  BRA    68B2
068AC:  MOVLB  0
068AE:  GOTO   69A0
068B2:  MOVLB  0
068B4:  XORLW  FF
068B6:  BTFSS  FD8.2
068B8:  GOTO   68CE
068BC:  MOVLB  2
068BE:  MOVF   x06,W
068C0:  SUBLW  0F
068C2:  BTFSS  FD8.0
068C4:  BRA    68CC
068C6:  MOVLB  0
068C8:  GOTO   69A0
068CC:  MOVLB  0
....................          unsigned int32 remain = (MISF_END - current_address) + 1; // 書込可能残り
068CE:  MOVLW  FF
068D0:  BSF    FD8.0
068D2:  MOVLB  1
068D4:  SUBFWB xFD,W
068D6:  MOVLB  2
068D8:  MOVWF  x05
068DA:  MOVLW  0F
068DC:  MOVLB  1
068DE:  SUBFWB xFE,W
068E0:  MOVLB  2
068E2:  MOVWF  x06
068E4:  MOVLW  BC
068E6:  MOVLB  1
068E8:  SUBFWB xFF,W
068EA:  MOVLB  2
068EC:  MOVWF  x07
068EE:  MOVLW  00
068F0:  SUBFWB x00,W
068F2:  MOVWF  x08
068F4:  MOVLW  01
068F6:  ADDWF  x05,W
068F8:  MOVWF  x01
068FA:  MOVLW  00
068FC:  ADDWFC x06,W
068FE:  MOVWF  x02
06900:  MOVLW  00
06902:  ADDWFC x07,W
06904:  MOVWF  x03
06906:  MOVLW  00
06908:  ADDWFC x08,W
0690A:  MOVWF  x04
0690C:  MOVLB  0
....................          fprintf(PC, "\r\n[FLASH] Reached end. Partial write %lu bytes (packet truncated).\r\n", remain);
0690E:  MOVLW  50
06910:  MOVWF  FF6
06912:  MOVLW  1D
06914:  MOVWF  FF7
06916:  MOVLW  00
06918:  MOVWF  FF8
0691A:  MOVLW  25
0691C:  MOVLB  9
0691E:  MOVWF  xC2
06920:  MOVLB  0
06922:  CALL   2312
06926:  MOVLW  41
06928:  MOVWF  FE9
0692A:  MOVFF  204,209
0692E:  MOVFF  203,208
06932:  MOVFF  202,207
06936:  MOVFF  201,206
0693A:  CALL   62D2
0693E:  MOVLW  78
06940:  MOVWF  FF6
06942:  MOVLW  1D
06944:  MOVWF  FF7
06946:  MOVLW  00
06948:  MOVWF  FF8
0694A:  MOVLW  1C
0694C:  MOVLB  9
0694E:  MOVWF  xC2
06950:  MOVLB  0
06952:  CALL   2312
....................          write_data_bytes(mis_fm, current_address, writedata, (unsigned int16)remain);
06956:  MOVFF  115,AED
0695A:  MOVFF  114,AEC
0695E:  MOVFF  113,AEB
06962:  MOVFF  112,AEA
06966:  MOVFF  200,AF1
0696A:  MOVFF  1FF,AF0
0696E:  MOVFF  1FE,AEF
06972:  MOVFF  1FD,AEE
06976:  MOVLW  01
06978:  MOVLB  A
0697A:  MOVWF  xF3
0697C:  MOVLW  B8
0697E:  MOVWF  xF2
06980:  MOVFF  202,AF5
06984:  MOVFF  201,AF4
06988:  MOVLB  0
0698A:  CALL   3F36
....................          piclog_make(flash_write_param.id, PICLOG_PARAM_END);
0698E:  MOVFF  1B1,20F
06992:  MOVLB  2
06994:  SETF   x10
06996:  MOVLB  0
06998:  CALL   50EC
....................          break;
0699C:  GOTO   69E4
....................       }
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
069A0:  MOVFF  115,AED
069A4:  MOVFF  114,AEC
069A8:  MOVFF  113,AEB
069AC:  MOVFF  112,AEA
069B0:  MOVFF  200,AF1
069B4:  MOVFF  1FF,AF0
069B8:  MOVFF  1FE,AEF
069BC:  MOVFF  1FD,AEE
069C0:  MOVLW  01
069C2:  MOVLB  A
069C4:  MOVWF  xF3
069C6:  MOVLW  B8
069C8:  MOVWF  xF2
069CA:  CLRF   xF5
069CC:  MOVLW  40
069CE:  MOVWF  xF4
069D0:  MOVLB  0
069D2:  CALL   3F36
069D6:  MOVLB  1
069D8:  INCF   xF8,F
069DA:  BTFSC  FD8.2
069DC:  INCF   xF9,F
069DE:  MOVLB  0
069E0:  GOTO   665A
....................    }
.................... 
....................    piclog_make(flash_write_param.id, PICLOG_PARAM_END); // Log the end of the command execution
069E4:  MOVFF  1B1,20F
069E8:  MOVLB  2
069EA:  SETF   x10
069EC:  MOVLB  0
069EE:  CALL   50EC
....................    fprintf(PC, "\r\n");
069F2:  MOVLW  0D
069F4:  BTFSS  FA6.6
069F6:  GOTO   69F4
069FA:  MOVLB  E
069FC:  MOVWF  xF9
069FE:  MOVLW  0A
06A00:  MOVLB  0
06A02:  BTFSS  FA6.6
06A04:  GOTO   6A02
06A08:  MOVLB  E
06A0A:  MOVWF  xF9
....................    fprintf(PC, "End Flash Write Demo\r\n");
06A0C:  MOVLW  96
06A0E:  MOVWF  FF6
06A10:  MOVLW  1D
06A12:  MOVWF  FF7
06A14:  MOVLW  00
06A16:  MOVWF  FF8
06A18:  MOVLB  0
06A1A:  CALL   22DC
06A1E:  GOTO   F7E8 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
*
06A52:  MOVLW  AE
06A54:  MOVWF  FF6
06A56:  MOVLW  1D
06A58:  MOVWF  FF7
06A5A:  MOVLW  00
06A5C:  MOVWF  FF8
06A5E:  CALL   22DC
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
06A62:  MOVLB  1
06A64:  MOVF   xAF,W
06A66:  MOVWF  FE9
06A68:  MOVF   xB0,W
06A6A:  MOVWF  FEA
06A6C:  MOVFF  FEF,1B5
06A70:  MOVFF  1B5,20F
06A74:  MOVLB  2
06A76:  CLRF   x10
06A78:  MOVLB  0
06A7A:  CALL   50EC
....................    flash_setting(mis_fm);
06A7E:  MOVFF  115,2BD
06A82:  MOVFF  114,2BC
06A86:  MOVFF  113,2BB
06A8A:  MOVFF  112,2BA
06A8E:  CALL   6A22
....................    unsigned int32 write_address = 0x00000000;
06A92:  MOVLB  1
06A94:  CLRF   xB4
06A96:  CLRF   xB3
06A98:  CLRF   xB2
06A9A:  CLRF   xB1
....................    //int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
....................    //write_data_bytes(mis_fm, write_address, write_data, 256);
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06A9C:  MOVF   xAF,W
06A9E:  MOVWF  FE9
06AA0:  MOVF   xB0,W
06AA2:  MOVWF  FEA
06AA4:  MOVFF  FEF,1B5
06AA8:  MOVFF  1B5,20F
06AAC:  MOVLB  2
06AAE:  SETF   x10
06AB0:  MOVLB  0
06AB2:  CALL   50EC
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
06AB6:  MOVLW  D4
06AB8:  MOVWF  FF6
06ABA:  MOVLW  1D
06ABC:  MOVWF  FF7
06ABE:  MOVLW  00
06AC0:  MOVWF  FF8
06AC2:  CALL   22DC
06AC6:  GOTO   F7F8 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
06ACA:  MOVLW  F8
06ACC:  MOVWF  FF6
06ACE:  MOVLW  1D
06AD0:  MOVWF  FF7
06AD2:  MOVLW  00
06AD4:  MOVWF  FF8
06AD6:  CALL   22DC
.................... 
.................... 
....................    FLASH_PARAM flash_param = {0};
06ADA:  MOVLB  1
06ADC:  CLRF   xB1
06ADE:  CLRF   xB2
06AE0:  CLRF   xB3
06AE2:  CLRF   xB4
06AE4:  CLRF   xB5
06AE6:  CLRF   xB6
06AE8:  CLRF   xB7
....................    flash_param.id = uplinkcmd_ptr[0];
06AEA:  MOVF   xAF,W
06AEC:  MOVWF  FE9
06AEE:  MOVF   xB0,W
06AF0:  MOVWF  FEA
06AF2:  MOVFF  FEF,1B1
....................    flash_param.readaddress = -
....................       ((unsigned int32)uplinkcmd_ptr[1] << 24) |
....................       ((unsigned int32)uplinkcmd_ptr[2] << 16) |
....................       ((unsigned int32)uplinkcmd_ptr[3] << 8)  |
....................       ((unsigned int32)uplinkcmd_ptr[4]);
06AF6:  MOVLW  01
06AF8:  ADDWF  xAF,W
06AFA:  MOVWF  FE9
06AFC:  MOVLW  00
06AFE:  ADDWFC xB0,W
06B00:  MOVWF  FEA
06B02:  MOVF   FEF,W
06B04:  MOVLB  2
06B06:  CLRF   x09
06B08:  CLRF   x08
06B0A:  CLRF   x07
06B0C:  MOVWF  x06
06B0E:  MOVFF  206,03
06B12:  CLRF   00
06B14:  CLRF   01
06B16:  CLRF   02
06B18:  MOVLW  00
06B1A:  BSF    FD8.0
06B1C:  SUBFWB 00,W
06B1E:  MOVWF  x06
06B20:  MOVLW  00
06B22:  SUBFWB 01,W
06B24:  MOVWF  x07
06B26:  MOVLW  00
06B28:  SUBFWB 02,W
06B2A:  MOVWF  x08
06B2C:  MOVLW  00
06B2E:  SUBFWB 03,W
06B30:  MOVWF  x09
06B32:  MOVLW  02
06B34:  MOVLB  1
06B36:  ADDWF  xAF,W
06B38:  MOVWF  FE9
06B3A:  MOVLW  00
06B3C:  ADDWFC xB0,W
06B3E:  MOVWF  FEA
06B40:  MOVF   FEF,W
06B42:  MOVLB  2
06B44:  CLRF   x0E
06B46:  CLRF   x0D
06B48:  CLRF   x0C
06B4A:  MOVWF  x0B
06B4C:  MOVFF  20C,03
06B50:  MOVFF  20B,02
06B54:  CLRF   00
06B56:  CLRF   01
06B58:  MOVF   00,W
06B5A:  IORWF  x06,F
06B5C:  MOVF   01,W
06B5E:  IORWF  x07,F
06B60:  MOVF   02,W
06B62:  IORWF  x08,F
06B64:  MOVF   03,W
06B66:  IORWF  x09,F
06B68:  MOVLW  03
06B6A:  MOVLB  1
06B6C:  ADDWF  xAF,W
06B6E:  MOVWF  FE9
06B70:  MOVLW  00
06B72:  ADDWFC xB0,W
06B74:  MOVWF  FEA
06B76:  MOVF   FEF,W
06B78:  MOVLB  2
06B7A:  CLRF   x0E
06B7C:  CLRF   x0D
06B7E:  CLRF   x0C
06B80:  MOVWF  x0B
06B82:  MOVFF  20D,03
06B86:  MOVFF  20C,02
06B8A:  MOVFF  20B,01
06B8E:  CLRF   00
06B90:  MOVF   00,W
06B92:  IORWF  x06,F
06B94:  MOVF   01,W
06B96:  IORWF  x07,F
06B98:  MOVF   02,W
06B9A:  IORWF  x08,F
06B9C:  MOVF   03,W
06B9E:  IORWF  x09,F
06BA0:  MOVLW  04
06BA2:  MOVLB  1
06BA4:  ADDWF  xAF,W
06BA6:  MOVWF  FE9
06BA8:  MOVLW  00
06BAA:  ADDWFC xB0,W
06BAC:  MOVWF  FEA
06BAE:  MOVF   FEF,W
06BB0:  MOVWF  00
06BB2:  CLRF   01
06BB4:  CLRF   02
06BB6:  CLRF   03
06BB8:  MOVF   00,W
06BBA:  MOVLB  2
06BBC:  IORWF  x06,W
06BBE:  MOVLB  1
06BC0:  MOVWF  xB4
06BC2:  MOVF   01,W
06BC4:  MOVLB  2
06BC6:  IORWF  x07,W
06BC8:  MOVLB  1
06BCA:  MOVWF  xB5
06BCC:  MOVF   02,W
06BCE:  MOVLB  2
06BD0:  IORWF  x08,W
06BD2:  MOVLB  1
06BD4:  MOVWF  xB6
06BD6:  MOVF   03,W
06BD8:  MOVLB  2
06BDA:  IORWF  x09,W
06BDC:  MOVLB  1
06BDE:  MOVWF  xB7
....................    flash_param.readpacketnum = 
....................       ((unsigned int16)uplinkcmd_ptr[6] << 8) |
....................       ((unsigned int16)uplinkcmd_ptr[7]);
06BE0:  MOVLW  06
06BE2:  ADDWF  xAF,W
06BE4:  MOVWF  FE9
06BE6:  MOVLW  00
06BE8:  ADDWFC xB0,W
06BEA:  MOVWF  FEA
06BEC:  MOVF   FEF,W
06BEE:  MOVLB  2
06BF0:  CLRF   x07
06BF2:  MOVWF  x06
06BF4:  MOVFF  206,207
06BF8:  CLRF   x06
06BFA:  MOVLW  07
06BFC:  MOVLB  1
06BFE:  ADDWF  xAF,W
06C00:  MOVWF  FE9
06C02:  MOVLW  00
06C04:  ADDWFC xB0,W
06C06:  MOVWF  FEA
06C08:  MOVF   FEF,W
06C0A:  CLRF   03
06C0C:  MOVLB  2
06C0E:  IORWF  x06,W
06C10:  MOVLB  1
06C12:  MOVWF  xB2
06C14:  MOVF   03,W
06C16:  MOVLB  2
06C18:  IORWF  x07,W
06C1A:  MOVLB  1
06C1C:  MOVWF  xB3
....................       piclog_make(flash_param.id, PICLOG_PARAM_START); // Log the command execution
06C1E:  MOVFF  1B1,20F
06C22:  MOVLB  2
06C24:  CLRF   x10
06C26:  MOVLB  0
06C28:  CALL   50EC
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
06C2C:  MOVLW  0C
06C2E:  MOVWF  FF6
06C30:  MOVLW  1E
06C32:  MOVWF  FF7
06C34:  MOVLW  00
06C36:  MOVWF  FF8
06C38:  MOVLW  0C
06C3A:  MOVLB  9
06C3C:  MOVWF  xC2
06C3E:  MOVLB  0
06C40:  CALL   2312
06C44:  MOVFF  1B1,9E8
06C48:  MOVLW  37
06C4A:  MOVLB  9
06C4C:  MOVWF  xE9
06C4E:  MOVLB  0
06C50:  CALL   2542
06C54:  MOVLW  0D
06C56:  BTFSS  FA6.6
06C58:  GOTO   6C56
06C5C:  MOVLB  E
06C5E:  MOVWF  xF9
06C60:  MOVLW  0A
06C62:  MOVLB  0
06C64:  BTFSS  FA6.6
06C66:  GOTO   6C64
06C6A:  MOVLB  E
06C6C:  MOVWF  xF9
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
06C6E:  MOVLW  20
06C70:  MOVWF  FF6
06C72:  MOVLW  1E
06C74:  MOVWF  FF7
06C76:  MOVLW  00
06C78:  MOVWF  FF8
06C7A:  MOVLW  0E
06C7C:  MOVLB  9
06C7E:  MOVWF  xC2
06C80:  MOVLB  0
06C82:  CALL   2312
06C86:  MOVFF  1B7,9E8
06C8A:  MOVLW  37
06C8C:  MOVLB  9
06C8E:  MOVWF  xE9
06C90:  MOVLB  0
06C92:  CALL   2542
06C96:  MOVFF  1B6,9E8
06C9A:  MOVLW  37
06C9C:  MOVLB  9
06C9E:  MOVWF  xE9
06CA0:  MOVLB  0
06CA2:  CALL   2542
06CA6:  MOVFF  1B5,9E8
06CAA:  MOVLW  37
06CAC:  MOVLB  9
06CAE:  MOVWF  xE9
06CB0:  MOVLB  0
06CB2:  CALL   2542
06CB6:  MOVFF  1B4,9E8
06CBA:  MOVLW  37
06CBC:  MOVLB  9
06CBE:  MOVWF  xE9
06CC0:  MOVLB  0
06CC2:  CALL   2542
06CC6:  MOVLW  0D
06CC8:  BTFSS  FA6.6
06CCA:  GOTO   6CC8
06CCE:  MOVLB  E
06CD0:  MOVWF  xF9
06CD2:  MOVLW  0A
06CD4:  MOVLB  0
06CD6:  BTFSS  FA6.6
06CD8:  GOTO   6CD6
06CDC:  MOVLB  E
06CDE:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
06CE0:  MOVLW  36
06CE2:  MOVWF  FF6
06CE4:  MOVLW  1E
06CE6:  MOVWF  FF7
06CE8:  MOVLW  00
06CEA:  MOVWF  FF8
06CEC:  MOVLW  0E
06CEE:  MOVLB  9
06CF0:  MOVWF  xC2
06CF2:  MOVLB  0
06CF4:  CALL   2312
06CF8:  MOVFF  1B3,9E8
06CFC:  MOVLW  37
06CFE:  MOVLB  9
06D00:  MOVWF  xE9
06D02:  MOVLB  0
06D04:  CALL   2542
06D08:  MOVFF  1B2,9E8
06D0C:  MOVLW  37
06D0E:  MOVLB  9
06D10:  MOVWF  xE9
06D12:  MOVLB  0
06D14:  CALL   2542
06D18:  MOVLW  0D
06D1A:  BTFSS  FA6.6
06D1C:  GOTO   6D1A
06D20:  MOVLB  E
06D22:  MOVWF  xF9
06D24:  MOVLW  0A
06D26:  MOVLB  0
06D28:  BTFSS  FA6.6
06D2A:  GOTO   6D28
06D2E:  MOVLB  E
06D30:  MOVWF  xF9
....................    
....................    piclog_make(flash_param.id, 0x00);
06D32:  MOVFF  1B1,20F
06D36:  MOVLB  2
06D38:  CLRF   x10
06D3A:  MOVLB  0
06D3C:  CALL   50EC
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
06D40:  MOVLB  1
06D42:  CLRF   xB8
06D44:  CLRF   xB9
06D46:  CLRF   xBA
06D48:  CLRF   xBB
06D4A:  CLRF   xBC
06D4C:  CLRF   xBD
06D4E:  CLRF   xBE
06D50:  CLRF   xBF
06D52:  CLRF   xC0
06D54:  CLRF   xC1
06D56:  CLRF   xC2
06D58:  CLRF   xC3
06D5A:  CLRF   xC4
06D5C:  CLRF   xC5
06D5E:  CLRF   xC6
06D60:  CLRF   xC7
06D62:  CLRF   xC8
06D64:  CLRF   xC9
06D66:  CLRF   xCA
06D68:  CLRF   xCB
06D6A:  CLRF   xCC
06D6C:  CLRF   xCD
06D6E:  CLRF   xCE
06D70:  CLRF   xCF
06D72:  CLRF   xD0
06D74:  CLRF   xD1
06D76:  CLRF   xD2
06D78:  CLRF   xD3
06D7A:  CLRF   xD4
06D7C:  CLRF   xD5
06D7E:  CLRF   xD6
06D80:  CLRF   xD7
06D82:  CLRF   xD8
06D84:  CLRF   xD9
06D86:  CLRF   xDA
06D88:  CLRF   xDB
06D8A:  CLRF   xDC
06D8C:  CLRF   xDD
06D8E:  CLRF   xDE
06D90:  CLRF   xDF
06D92:  CLRF   xE0
06D94:  CLRF   xE1
06D96:  CLRF   xE2
06D98:  CLRF   xE3
06D9A:  CLRF   xE4
06D9C:  CLRF   xE5
06D9E:  CLRF   xE6
06DA0:  CLRF   xE7
06DA2:  CLRF   xE8
06DA4:  CLRF   xE9
06DA6:  CLRF   xEA
06DA8:  CLRF   xEB
06DAA:  CLRF   xEC
06DAC:  CLRF   xED
06DAE:  CLRF   xEE
06DB0:  CLRF   xEF
06DB2:  CLRF   xF0
06DB4:  CLRF   xF1
06DB6:  CLRF   xF2
06DB8:  CLRF   xF3
06DBA:  CLRF   xF4
06DBC:  CLRF   xF5
06DBE:  CLRF   xF6
06DC0:  CLRF   xF7
....................    unsigned int32 read_address;
....................    fprintf(PC, "ADDRESS  :\r\n");
06DC2:  MOVLW  4C
06DC4:  MOVWF  FF6
06DC6:  MOVLW  1E
06DC8:  MOVWF  FF7
06DCA:  MOVLW  00
06DCC:  MOVWF  FF8
06DCE:  MOVLB  0
06DD0:  CALL   22DC
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
06DD4:  MOVFF  115,253
06DD8:  MOVFF  114,252
06DDC:  MOVFF  113,251
06DE0:  MOVFF  112,250
06DE4:  CALL   2E02
06DE8:  MOVF   01,F
06DEA:  BTFSS  FD8.2
06DEC:  GOTO   6E12
....................       fprintf(PC, "Mission Flash is not connected\r\n");
06DF0:  MOVLW  5A
06DF2:  MOVWF  FF6
06DF4:  MOVLW  1E
06DF6:  MOVWF  FF7
06DF8:  MOVLW  00
06DFA:  MOVWF  FF8
06DFC:  CALL   22DC
....................       piclog_make(flash_param.id, PICLOG_PARAM_END);
06E00:  MOVFF  1B1,20F
06E04:  MOVLB  2
06E06:  SETF   x10
06E08:  MOVLB  0
06E0A:  CALL   50EC
....................       return; // FIX: 接続失敗時終了
06E0E:  GOTO   72CA
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
06E12:  MOVLB  1
06E14:  CLRF   xFF
06E16:  CLRF   xFE
06E18:  CLRF   xFD
06E1A:  CLRF   xFC
06E1C:  MOVLB  0
06E1E:  MOVLB  1
06E20:  MOVF   xFF,F
06E22:  BTFSC  FD8.2
06E24:  BRA    6E2C
06E26:  MOVLB  0
06E28:  GOTO   72AC
06E2C:  MOVLB  0
06E2E:  MOVLB  1
06E30:  MOVF   xFE,F
06E32:  BTFSC  FD8.2
06E34:  BRA    6E3C
06E36:  MOVLB  0
06E38:  GOTO   72AC
06E3C:  MOVLB  0
06E3E:  MOVLB  1
06E40:  MOVF   xFD,W
06E42:  SUBWF  xB3,W
06E44:  BTFSC  FD8.0
06E46:  BRA    6E4E
06E48:  MOVLB  0
06E4A:  GOTO   72AC
06E4E:  MOVLB  0
06E50:  BTFSS  FD8.2
06E52:  GOTO   6E68
06E56:  MOVLB  1
06E58:  MOVF   xB2,W
06E5A:  SUBWF  xFC,W
06E5C:  BTFSS  FD8.0
06E5E:  BRA    6E66
06E60:  MOVLB  0
06E62:  GOTO   72AC
06E66:  MOVLB  0
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
06E68:  MOVLB  1
06E6A:  RLCF   xFC,W
06E6C:  MOVWF  00
06E6E:  RLCF   xFD,W
06E70:  MOVWF  01
06E72:  RLCF   xFE,W
06E74:  MOVWF  02
06E76:  RLCF   xFF,W
06E78:  MOVWF  03
06E7A:  RLCF   00,F
06E7C:  RLCF   01,F
06E7E:  RLCF   02,F
06E80:  RLCF   03,F
06E82:  RLCF   00,F
06E84:  RLCF   01,F
06E86:  RLCF   02,F
06E88:  RLCF   03,F
06E8A:  RLCF   00,F
06E8C:  RLCF   01,F
06E8E:  RLCF   02,F
06E90:  RLCF   03,F
06E92:  RLCF   00,F
06E94:  RLCF   01,F
06E96:  RLCF   02,F
06E98:  RLCF   03,F
06E9A:  RLCF   00,F
06E9C:  RLCF   01,F
06E9E:  RLCF   02,F
06EA0:  RLCF   03,F
06EA2:  MOVLW  C0
06EA4:  ANDWF  00,F
06EA6:  MOVF   00,W
06EA8:  ADDWF  xB4,W
06EAA:  MOVWF  xF8
06EAC:  MOVF   01,W
06EAE:  ADDWFC xB5,W
06EB0:  MOVWF  xF9
06EB2:  MOVF   02,W
06EB4:  ADDWFC xB6,W
06EB6:  MOVWF  xFA
06EB8:  MOVF   03,W
06EBA:  ADDWFC xB7,W
06EBC:  MOVWF  xFB
....................       // fprintf(PC, "ADDRESS 0x%08LX DATA ",read_address);
....................       // 終端チェック
....................       if(read_address > MISF_END){
06EBE:  MOVF   xFB,F
06EC0:  BTFSC  FD8.2
06EC2:  BRA    6ECA
06EC4:  MOVLB  0
06EC6:  GOTO   6EF8
06ECA:  MOVLB  0
06ECC:  MOVLB  1
06ECE:  MOVF   xFA,W
06ED0:  SUBLW  BB
06ED2:  BTFSS  FD8.0
06ED4:  BRA    6EDC
06ED6:  MOVLB  0
06ED8:  GOTO   6FC0
06EDC:  MOVLB  0
06EDE:  XORLW  FF
06EE0:  BTFSS  FD8.2
06EE2:  GOTO   6EF8
06EE6:  MOVLB  1
06EE8:  MOVF   xF9,W
06EEA:  SUBLW  0F
06EEC:  BTFSS  FD8.0
06EEE:  BRA    6EF6
06EF0:  MOVLB  0
06EF2:  GOTO   6FC0
06EF6:  MOVLB  0
....................          fprintf(PC, "[FLASH] Read address 0x%08LX exceeds device end 0x%08LX -> stop\r\n", read_address, (unsigned int32)MISF_END);
06EF8:  MOVLW  7C
06EFA:  MOVWF  FF6
06EFC:  MOVLW  1E
06EFE:  MOVWF  FF7
06F00:  MOVLW  00
06F02:  MOVWF  FF8
06F04:  MOVLW  17
06F06:  MOVLB  9
06F08:  MOVWF  xC2
06F0A:  MOVLB  0
06F0C:  CALL   2312
06F10:  MOVFF  1FB,9E8
06F14:  MOVLW  37
06F16:  MOVLB  9
06F18:  MOVWF  xE9
06F1A:  MOVLB  0
06F1C:  CALL   2542
06F20:  MOVFF  1FA,9E8
06F24:  MOVLW  37
06F26:  MOVLB  9
06F28:  MOVWF  xE9
06F2A:  MOVLB  0
06F2C:  CALL   2542
06F30:  MOVFF  1F9,9E8
06F34:  MOVLW  37
06F36:  MOVLB  9
06F38:  MOVWF  xE9
06F3A:  MOVLB  0
06F3C:  CALL   2542
06F40:  MOVFF  1F8,9E8
06F44:  MOVLW  37
06F46:  MOVLB  9
06F48:  MOVWF  xE9
06F4A:  MOVLB  0
06F4C:  CALL   2542
06F50:  MOVLW  98
06F52:  MOVWF  FF6
06F54:  MOVLW  1E
06F56:  MOVWF  FF7
06F58:  MOVLW  00
06F5A:  MOVWF  FF8
06F5C:  MOVLW  16
06F5E:  MOVLB  9
06F60:  MOVWF  xC2
06F62:  MOVLB  0
06F64:  CALL   2312
06F68:  MOVLB  9
06F6A:  CLRF   xE8
06F6C:  MOVLW  37
06F6E:  MOVWF  xE9
06F70:  MOVLB  0
06F72:  CALL   2542
06F76:  MOVLW  BC
06F78:  MOVLB  9
06F7A:  MOVWF  xE8
06F7C:  MOVLW  37
06F7E:  MOVWF  xE9
06F80:  MOVLB  0
06F82:  CALL   2542
06F86:  MOVLW  0F
06F88:  MOVLB  9
06F8A:  MOVWF  xE8
06F8C:  MOVLW  37
06F8E:  MOVWF  xE9
06F90:  MOVLB  0
06F92:  CALL   2542
06F96:  MOVLB  9
06F98:  SETF   xE8
06F9A:  MOVLW  37
06F9C:  MOVWF  xE9
06F9E:  MOVLB  0
06FA0:  CALL   2542
06FA4:  MOVLW  B3
06FA6:  MOVWF  FF6
06FA8:  MOVLW  1E
06FAA:  MOVWF  FF7
06FAC:  MOVLW  00
06FAE:  MOVWF  FF8
06FB0:  MOVLW  0A
06FB2:  MOVLB  9
06FB4:  MOVWF  xC2
06FB6:  MOVLB  0
06FB8:  CALL   2312
....................          break;
06FBC:  GOTO   72AC
....................       }
....................       if(read_address + (PACKET_SIZE - 1) > MISF_END){
06FC0:  MOVLW  3F
06FC2:  MOVLB  1
06FC4:  ADDWF  xF8,W
06FC6:  MOVLB  2
06FC8:  MOVWF  x06
06FCA:  MOVLW  00
06FCC:  MOVLB  1
06FCE:  ADDWFC xF9,W
06FD0:  MOVLB  2
06FD2:  MOVWF  x07
06FD4:  MOVLW  00
06FD6:  MOVLB  1
06FD8:  ADDWFC xFA,W
06FDA:  MOVLB  2
06FDC:  MOVWF  x08
06FDE:  MOVLW  00
06FE0:  MOVLB  1
06FE2:  ADDWFC xFB,W
06FE4:  MOVLB  2
06FE6:  MOVWF  x09
06FE8:  MOVF   x09,F
06FEA:  BTFSC  FD8.2
06FEC:  BRA    6FF4
06FEE:  MOVLB  0
06FF0:  GOTO   7022
06FF4:  MOVLB  0
06FF6:  MOVLB  2
06FF8:  MOVF   x08,W
06FFA:  SUBLW  BB
06FFC:  BTFSS  FD8.0
06FFE:  BRA    7006
07000:  MOVLB  0
07002:  GOTO   7192
07006:  MOVLB  0
07008:  XORLW  FF
0700A:  BTFSS  FD8.2
0700C:  GOTO   7022
07010:  MOVLB  2
07012:  MOVF   x07,W
07014:  SUBLW  0F
07016:  BTFSS  FD8.0
07018:  BRA    7020
0701A:  MOVLB  0
0701C:  GOTO   7192
07020:  MOVLB  0
....................          unsigned int32 remain = (MISF_END - read_address) + 1;
07022:  MOVLW  FF
07024:  BSF    FD8.0
07026:  MOVLB  1
07028:  SUBFWB xF8,W
0702A:  MOVLB  2
0702C:  MOVWF  x06
0702E:  MOVLW  0F
07030:  MOVLB  1
07032:  SUBFWB xF9,W
07034:  MOVLB  2
07036:  MOVWF  x07
07038:  MOVLW  BC
0703A:  MOVLB  1
0703C:  SUBFWB xFA,W
0703E:  MOVLB  2
07040:  MOVWF  x08
07042:  MOVLW  00
07044:  MOVLB  1
07046:  SUBFWB xFB,W
07048:  MOVLB  2
0704A:  MOVWF  x09
0704C:  MOVLW  01
0704E:  ADDWF  x06,W
07050:  MOVWF  x00
07052:  MOVLW  00
07054:  ADDWFC x07,W
07056:  MOVWF  x01
07058:  MOVLW  00
0705A:  ADDWFC x08,W
0705C:  MOVWF  x02
0705E:  MOVLW  00
07060:  ADDWFC x09,W
07062:  MOVWF  x03
07064:  MOVLB  0
....................          fprintf(PC, "[FLASH] End reached. Partial read %lu bytes.\r\n", remain);
07066:  MOVLW  BE
07068:  MOVWF  FF6
0706A:  MOVLW  1E
0706C:  MOVWF  FF7
0706E:  MOVLW  00
07070:  MOVWF  FF8
07072:  MOVLW  22
07074:  MOVLB  9
07076:  MOVWF  xC2
07078:  MOVLB  0
0707A:  CALL   2312
0707E:  MOVLW  41
07080:  MOVWF  FE9
07082:  MOVFF  203,209
07086:  MOVFF  202,208
0708A:  MOVFF  201,207
0708E:  MOVFF  200,206
07092:  CALL   62D2
07096:  MOVLW  E3
07098:  MOVWF  FF6
0709A:  MOVLW  1E
0709C:  MOVWF  FF7
0709E:  MOVLW  00
070A0:  MOVWF  FF8
070A2:  MOVLW  09
070A4:  MOVLB  9
070A6:  MOVWF  xC2
070A8:  MOVLB  0
070AA:  CALL   2312
....................          read_data_bytes(mis_fm, read_address, readdata, remain);
070AE:  MOVFF  115,AED
070B2:  MOVFF  114,AEC
070B6:  MOVFF  113,AEB
070BA:  MOVFF  112,AEA
070BE:  MOVFF  1FB,AF1
070C2:  MOVFF  1FA,AF0
070C6:  MOVFF  1F9,AEF
070CA:  MOVFF  1F8,AEE
070CE:  MOVLW  01
070D0:  MOVLB  A
070D2:  MOVWF  xF3
070D4:  MOVLW  B8
070D6:  MOVWF  xF2
070D8:  MOVFF  203,AF7
070DC:  MOVFF  202,AF6
070E0:  MOVFF  201,AF5
070E4:  MOVFF  200,AF4
070E8:  MOVLB  0
070EA:  CALL   2ECA
....................          for (unsigned int8 bytecount = 0; bytecount < remain; bytecount++)
070EE:  MOVLB  2
070F0:  CLRF   x04
070F2:  MOVLB  0
070F4:  MOVLB  2
070F6:  MOVF   x03,F
070F8:  BTFSC  FD8.2
070FA:  BRA    7102
070FC:  MOVLB  0
070FE:  GOTO   7136
07102:  MOVLB  0
07104:  MOVLB  2
07106:  MOVF   x02,F
07108:  BTFSC  FD8.2
0710A:  BRA    7112
0710C:  MOVLB  0
0710E:  GOTO   7136
07112:  MOVLB  0
07114:  MOVLB  2
07116:  MOVF   x01,F
07118:  BTFSC  FD8.2
0711A:  BRA    7122
0711C:  MOVLB  0
0711E:  GOTO   7136
07122:  MOVLB  0
07124:  MOVLB  2
07126:  MOVF   x00,W
07128:  SUBWF  x04,W
0712A:  BTFSS  FD8.0
0712C:  BRA    7134
0712E:  MOVLB  0
07130:  GOTO   7172
07134:  MOVLB  0
....................             fprintf(PC, "%02X ", readdata[bytecount]);
07136:  CLRF   03
07138:  MOVLB  2
0713A:  MOVF   x04,W
0713C:  ADDLW  B8
0713E:  MOVWF  FE9
07140:  MOVLW  01
07142:  ADDWFC 03,W
07144:  MOVWF  FEA
07146:  MOVFF  FEF,206
0714A:  MOVFF  206,9E8
0714E:  MOVLW  37
07150:  MOVLB  9
07152:  MOVWF  xE9
07154:  MOVLB  0
07156:  CALL   2542
0715A:  MOVLW  20
0715C:  BTFSS  FA6.6
0715E:  GOTO   715C
07162:  MOVLB  E
07164:  MOVWF  xF9
07166:  MOVLB  0
07168:  MOVLB  2
0716A:  INCF   x04,F
0716C:  MOVLB  0
0716E:  GOTO   70F4
....................          fprintf(PC, "\r\n");
07172:  MOVLW  0D
07174:  BTFSS  FA6.6
07176:  GOTO   7174
0717A:  MOVLB  E
0717C:  MOVWF  xF9
0717E:  MOVLW  0A
07180:  MOVLB  0
07182:  BTFSS  FA6.6
07184:  GOTO   7182
07188:  MOVLB  E
0718A:  MOVWF  xF9
....................          break;
0718C:  MOVLB  0
0718E:  GOTO   72AC
....................       }
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
07192:  MOVFF  115,AED
07196:  MOVFF  114,AEC
0719A:  MOVFF  113,AEB
0719E:  MOVFF  112,AEA
071A2:  MOVFF  1FB,AF1
071A6:  MOVFF  1FA,AF0
071AA:  MOVFF  1F9,AEF
071AE:  MOVFF  1F8,AEE
071B2:  MOVLW  01
071B4:  MOVLB  A
071B6:  MOVWF  xF3
071B8:  MOVLW  B8
071BA:  MOVWF  xF2
071BC:  CLRF   xF7
071BE:  CLRF   xF6
071C0:  CLRF   xF5
071C2:  MOVLW  40
071C4:  MOVWF  xF4
071C6:  MOVLB  0
071C8:  CALL   2ECA
....................       fprintf(PC, "%08LX : ",read_address);
071CC:  MOVFF  1FB,9E8
071D0:  MOVLW  37
071D2:  MOVLB  9
071D4:  MOVWF  xE9
071D6:  MOVLB  0
071D8:  CALL   2542
071DC:  MOVFF  1FA,9E8
071E0:  MOVLW  37
071E2:  MOVLB  9
071E4:  MOVWF  xE9
071E6:  MOVLB  0
071E8:  CALL   2542
071EC:  MOVFF  1F9,9E8
071F0:  MOVLW  37
071F2:  MOVLB  9
071F4:  MOVWF  xE9
071F6:  MOVLB  0
071F8:  CALL   2542
071FC:  MOVFF  1F8,9E8
07200:  MOVLW  37
07202:  MOVLB  9
07204:  MOVWF  xE9
07206:  MOVLB  0
07208:  CALL   2542
0720C:  MOVLW  F3
0720E:  MOVWF  FF6
07210:  MOVLW  1E
07212:  MOVWF  FF7
07214:  MOVLW  00
07216:  MOVWF  FF8
07218:  MOVLW  03
0721A:  MOVLB  9
0721C:  MOVWF  xC2
0721E:  MOVLB  0
07220:  CALL   2312
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
07224:  MOVLB  2
07226:  CLRF   x05
07228:  MOVLB  0
0722A:  MOVLB  2
0722C:  MOVF   x05,W
0722E:  SUBLW  3F
07230:  BTFSC  FD8.0
07232:  BRA    723A
07234:  MOVLB  0
07236:  GOTO   7278
0723A:  MOVLB  0
....................          fprintf(PC,"%02X ",readdata[bytecount]);
0723C:  CLRF   03
0723E:  MOVLB  2
07240:  MOVF   x05,W
07242:  ADDLW  B8
07244:  MOVWF  FE9
07246:  MOVLW  01
07248:  ADDWFC 03,W
0724A:  MOVWF  FEA
0724C:  MOVFF  FEF,206
07250:  MOVFF  206,9E8
07254:  MOVLW  37
07256:  MOVLB  9
07258:  MOVWF  xE9
0725A:  MOVLB  0
0725C:  CALL   2542
07260:  MOVLW  20
07262:  BTFSS  FA6.6
07264:  GOTO   7262
07268:  MOVLB  E
0726A:  MOVWF  xF9
0726C:  MOVLB  0
0726E:  MOVLB  2
07270:  INCF   x05,F
07272:  MOVLB  0
07274:  GOTO   722A
....................       }
....................       fprintf(PC,"\r\n");
07278:  MOVLW  0D
0727A:  BTFSS  FA6.6
0727C:  GOTO   727A
07280:  MOVLB  E
07282:  MOVWF  xF9
07284:  MOVLW  0A
07286:  MOVLB  0
07288:  BTFSS  FA6.6
0728A:  GOTO   7288
0728E:  MOVLB  E
07290:  MOVWF  xF9
07292:  MOVLB  0
07294:  MOVLW  01
07296:  MOVLB  1
07298:  ADDWF  xFC,F
0729A:  BTFSC  FD8.0
0729C:  INCF   xFD,F
0729E:  BTFSC  FD8.2
072A0:  INCF   xFE,F
072A2:  BTFSC  FD8.2
072A4:  INCF   xFF,F
072A6:  MOVLB  0
072A8:  GOTO   6E1E
....................    }
....................    piclog_make(flash_param.id, PICLOG_PARAM_END); // Log the end of the command execution
072AC:  MOVFF  1B1,20F
072B0:  MOVLB  2
072B2:  SETF   x10
072B4:  MOVLB  0
072B6:  CALL   50EC
....................    fprintf(PC, "End Flash Read\r\n");
072BA:  MOVLW  F8
072BC:  MOVWF  FF6
072BE:  MOVLW  1E
072C0:  MOVWF  FF7
072C2:  MOVLW  00
072C4:  MOVWF  FF8
072C6:  CALL   22DC
072CA:  GOTO   F808 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
072CE:  MOVLW  0A
072D0:  MOVWF  FF6
072D2:  MOVLW  1F
072D4:  MOVWF  FF7
072D6:  MOVLW  00
072D8:  MOVWF  FF8
072DA:  CALL   22DC
....................    flash_setting(mis_fm);
072DE:  MOVFF  115,2BD
072E2:  MOVFF  114,2BC
072E6:  MOVFF  113,2BB
072EA:  MOVFF  112,2BA
072EE:  CALL   6A22
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
072F2:  MOVLB  1
072F4:  CLRF   xB4
072F6:  CLRF   xB3
072F8:  CLRF   xB2
072FA:  CLRF   xB1
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
072FC:  MOVFF  115,AED
07300:  MOVFF  114,AEC
07304:  MOVFF  113,AEB
07308:  MOVFF  112,AEA
0730C:  MOVFF  1B4,AF1
07310:  MOVFF  1B3,AF0
07314:  MOVFF  1B2,AEF
07318:  MOVFF  1B1,AEE
0731C:  MOVLW  01
0731E:  MOVLB  A
07320:  MOVWF  xF3
07322:  MOVLW  B5
07324:  MOVWF  xF2
07326:  CLRF   xF7
07328:  CLRF   xF6
0732A:  CLRF   xF5
0732C:  MOVLW  04
0732E:  MOVWF  xF4
07330:  MOVLB  0
07332:  CALL   2ECA
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
07336:  MOVLW  26
07338:  MOVWF  FF6
0733A:  MOVLW  1F
0733C:  MOVWF  FF7
0733E:  MOVLW  00
07340:  MOVWF  FF8
07342:  MOVLW  0B
07344:  MOVLB  9
07346:  MOVWF  xC2
07348:  MOVLB  0
0734A:  CALL   2312
0734E:  MOVFF  1B5,9E8
07352:  MOVLW  37
07354:  MOVLB  9
07356:  MOVWF  xE9
07358:  MOVLB  0
0735A:  CALL   2542
0735E:  MOVLW  20
07360:  BTFSS  FA6.6
07362:  GOTO   7360
07366:  MOVLB  E
07368:  MOVWF  xF9
0736A:  MOVFF  1B6,9E8
0736E:  MOVLW  37
07370:  MOVLB  9
07372:  MOVWF  xE9
07374:  MOVLB  0
07376:  CALL   2542
0737A:  MOVLW  20
0737C:  BTFSS  FA6.6
0737E:  GOTO   737C
07382:  MOVLB  E
07384:  MOVWF  xF9
07386:  MOVFF  1B7,9E8
0738A:  MOVLW  37
0738C:  MOVLB  9
0738E:  MOVWF  xE9
07390:  MOVLB  0
07392:  CALL   2542
07396:  MOVLW  20
07398:  BTFSS  FA6.6
0739A:  GOTO   7398
0739E:  MOVLB  E
073A0:  MOVWF  xF9
073A2:  MOVFF  1B8,9E8
073A6:  MOVLW  37
073A8:  MOVLB  9
073AA:  MOVWF  xE9
073AC:  MOVLB  0
073AE:  CALL   2542
073B2:  MOVLW  0D
073B4:  BTFSS  FA6.6
073B6:  GOTO   73B4
073BA:  MOVLB  E
073BC:  MOVWF  xF9
073BE:  MOVLW  0A
073C0:  MOVLB  0
073C2:  BTFSS  FA6.6
073C4:  GOTO   73C2
073C8:  MOVLB  E
073CA:  MOVWF  xF9
....................    fprintf(PC, "End Flash Read Address\r\n");
073CC:  MOVLW  48
073CE:  MOVWF  FF6
073D0:  MOVLW  1F
073D2:  MOVWF  FF7
073D4:  MOVLW  00
073D6:  MOVWF  FF8
073D8:  MOVLB  0
073DA:  CALL   22DC
073DE:  GOTO   F818 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase and Reset\r\n");
*
075D6:  MOVLW  62
075D8:  MOVWF  FF6
075DA:  MOVLW  1F
075DC:  MOVWF  FF7
075DE:  MOVLW  00
075E0:  MOVWF  FF8
075E2:  CALL   22DC
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
075E6:  MOVLB  1
075E8:  MOVF   xC8,W
075EA:  MOVWF  FE9
075EC:  MOVF   xC9,W
075EE:  MOVWF  FEA
075F0:  MOVFF  FEF,1CA
075F4:  MOVFF  1CA,20F
075F8:  MOVLB  2
075FA:  CLRF   x10
075FC:  MOVLB  0
075FE:  CALL   50EC
.................... 
....................    mode_misf_erase_all(parameter); // Erase all flash memory
07602:  MOVFF  1C9,1CB
07606:  MOVFF  1C8,1CA
0760A:  CALL   5C76
....................    mode_misf_address_reset(parameter); // Reset the address area
0760E:  MOVFF  1C9,1CB
07612:  MOVFF  1C8,1CA
07616:  GOTO   73E2
.................... 
....................    fprintf(PC, "End Flash Erase and Reset\r\n");
0761A:  MOVLW  80
0761C:  MOVWF  FF6
0761E:  MOVLW  1F
07620:  MOVWF  FF7
07622:  MOVLW  00
07624:  MOVWF  FF8
07626:  CALL   22DC
0762A:  RETURN 0
.................... }
.................... // ========================== SMF Command ============================
.................... void mode_smf_copy(int8 parameter[])
.................... {
....................    printf("Start Flash SMF Copy\r\n");
0762C:  MOVLW  9C
0762E:  MOVWF  FF6
07630:  MOVLW  1F
07632:  MOVWF  FF7
07634:  MOVLW  00
07636:  MOVWF  FF8
07638:  CALL   22DC
....................    flash_setting(mis_fm);
0763C:  MOVFF  115,2BD
07640:  MOVFF  114,2BC
07644:  MOVFF  113,2BB
07648:  MOVFF  112,2BA
0764C:  CALL   6A22
....................    flash_setting(smf);
07650:  MOVFF  119,2BD
07654:  MOVFF  118,2BC
07658:  MOVFF  117,2BB
0765C:  MOVFF  116,2BA
07660:  CALL   6A22
....................    
....................    // 統合管理システムを使用したコピー操作
....................    int8 mission_id = parameter[0];
....................    
....................    // 未コピーデータの自動転送をキューに追加
....................    //enqueue_auto_transfer(mission_id);
....................    
....................    // Example copy operation with integration system
....................    int32 src_address = 0x00000000;
....................    int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
07664:  MOVLB  1
07666:  MOVF   xAF,W
07668:  MOVWF  FE9
0766A:  MOVF   xB0,W
0766C:  MOVWF  FEA
0766E:  MOVFF  FEF,1B1
07672:  CLRF   xB5
07674:  CLRF   xB4
07676:  CLRF   xB3
07678:  CLRF   xB2
0767A:  CLRF   xB9
0767C:  CLRF   xB8
0767E:  MOVLW  10
07680:  MOVWF  xB7
07682:  CLRF   xB6
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
07684:  MOVFF  115,AED
07688:  MOVFF  114,AEC
0768C:  MOVFF  113,AEB
07690:  MOVFF  112,AEA
07694:  MOVFF  1B5,AF1
07698:  MOVFF  1B4,AF0
0769C:  MOVFF  1B3,AEF
076A0:  MOVFF  1B2,AEE
076A4:  MOVLW  01
076A6:  MOVLB  A
076A8:  MOVWF  xF3
076AA:  MOVLW  BA
076AC:  MOVWF  xF2
076AE:  CLRF   xF7
076B0:  CLRF   xF6
076B2:  MOVLW  01
076B4:  MOVWF  xF5
076B6:  CLRF   xF4
076B8:  MOVLB  0
076BA:  CALL   2ECA
....................    write_data_bytes(smf, dest_address, read_data, 256);
076BE:  MOVFF  119,AED
076C2:  MOVFF  118,AEC
076C6:  MOVFF  117,AEB
076CA:  MOVFF  116,AEA
076CE:  MOVFF  1B9,AF1
076D2:  MOVFF  1B8,AF0
076D6:  MOVFF  1B7,AEF
076DA:  MOVFF  1B6,AEE
076DE:  MOVLW  01
076E0:  MOVLB  A
076E2:  MOVWF  xF3
076E4:  MOVLW  BA
076E6:  MOVWF  xF2
076E8:  MOVLW  01
076EA:  MOVWF  xF5
076EC:  CLRF   xF4
076EE:  MOVLB  0
076F0:  CALL   3F36
....................    
....................    // 転送完了後のカウンタ更新
....................    //complete_transfer_and_update_counter(mission_id, 256);
....................    
....................    printf("End Flash SMF Copy\r\n");
076F4:  MOVLW  B4
076F6:  MOVWF  FF6
076F8:  MOVLW  1F
076FA:  MOVWF  FF7
076FC:  MOVLW  00
076FE:  MOVWF  FF8
07700:  CALL   22DC
07704:  GOTO   F838 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
07708:  MOVLW  CA
0770A:  MOVWF  FF6
0770C:  MOVLW  1F
0770E:  MOVWF  FF7
07710:  MOVLW  00
07712:  MOVWF  FF8
07714:  CALL   22DC
....................    unsigned int32 read_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
....................    unsigned int16 read_packetnum = 
....................       ((unsigned int16)parameter[6] << 8) |
....................       ((unsigned int16)parameter[7]);
....................    
....................    unsigned int8 read_data[PACKET_SIZE];
07718:  MOVLW  01
0771A:  MOVLB  1
0771C:  ADDWF  xAF,W
0771E:  MOVWF  FE9
07720:  MOVLW  00
07722:  ADDWFC xB0,W
07724:  MOVWF  FEA
07726:  MOVF   FEF,W
07728:  CLRF   xFB
0772A:  CLRF   xFA
0772C:  CLRF   xF9
0772E:  MOVWF  xF8
07730:  MOVFF  1F8,1FB
07734:  CLRF   xF8
07736:  CLRF   xF9
07738:  CLRF   xFA
0773A:  MOVLW  02
0773C:  ADDWF  xAF,W
0773E:  MOVWF  FE9
07740:  MOVLW  00
07742:  ADDWFC xB0,W
07744:  MOVWF  FEA
07746:  MOVF   FEF,W
07748:  MOVLB  2
0774A:  CLRF   x00
0774C:  MOVLB  1
0774E:  CLRF   xFF
07750:  CLRF   xFE
07752:  MOVWF  xFD
07754:  MOVFF  1FE,03
07758:  MOVFF  1FD,02
0775C:  CLRF   00
0775E:  CLRF   01
07760:  MOVF   00,W
07762:  IORWF  xF8,F
07764:  MOVF   01,W
07766:  IORWF  xF9,F
07768:  MOVF   02,W
0776A:  IORWF  xFA,F
0776C:  MOVF   03,W
0776E:  IORWF  xFB,F
07770:  MOVLW  03
07772:  ADDWF  xAF,W
07774:  MOVWF  FE9
07776:  MOVLW  00
07778:  ADDWFC xB0,W
0777A:  MOVWF  FEA
0777C:  MOVF   FEF,W
0777E:  MOVLB  2
07780:  CLRF   x00
07782:  MOVLB  1
07784:  CLRF   xFF
07786:  CLRF   xFE
07788:  MOVWF  xFD
0778A:  MOVFF  1FF,03
0778E:  MOVFF  1FE,02
07792:  MOVFF  1FD,01
07796:  CLRF   00
07798:  MOVF   00,W
0779A:  IORWF  xF8,F
0779C:  MOVF   01,W
0779E:  IORWF  xF9,F
077A0:  MOVF   02,W
077A2:  IORWF  xFA,F
077A4:  MOVF   03,W
077A6:  IORWF  xFB,F
077A8:  MOVLW  04
077AA:  ADDWF  xAF,W
077AC:  MOVWF  FE9
077AE:  MOVLW  00
077B0:  ADDWFC xB0,W
077B2:  MOVWF  FEA
077B4:  MOVF   FEF,W
077B6:  MOVWF  00
077B8:  CLRF   01
077BA:  CLRF   02
077BC:  CLRF   03
077BE:  MOVF   00,W
077C0:  IORWF  xF8,W
077C2:  MOVWF  xB1
077C4:  MOVF   01,W
077C6:  IORWF  xF9,W
077C8:  MOVWF  xB2
077CA:  MOVF   02,W
077CC:  IORWF  xFA,W
077CE:  MOVWF  xB3
077D0:  MOVF   03,W
077D2:  IORWF  xFB,W
077D4:  MOVWF  xB4
077D6:  MOVLW  06
077D8:  ADDWF  xAF,W
077DA:  MOVWF  FE9
077DC:  MOVLW  00
077DE:  ADDWFC xB0,W
077E0:  MOVWF  FEA
077E2:  MOVF   FEF,W
077E4:  CLRF   xF9
077E6:  MOVWF  xF8
077E8:  MOVFF  1F8,1F9
077EC:  CLRF   xF8
077EE:  MOVLW  07
077F0:  ADDWF  xAF,W
077F2:  MOVWF  FE9
077F4:  MOVLW  00
077F6:  ADDWFC xB0,W
077F8:  MOVWF  FEA
077FA:  MOVF   FEF,W
077FC:  CLRF   03
077FE:  IORWF  xF8,W
07800:  MOVWF  xB5
07802:  MOVF   03,W
07804:  IORWF  xF9,W
07806:  MOVWF  xB6
.................... 
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", read_address);
07808:  MOVLW  E2
0780A:  MOVWF  FF6
0780C:  MOVLW  1F
0780E:  MOVWF  FF7
07810:  MOVLW  00
07812:  MOVWF  FF8
07814:  MOVLW  0E
07816:  MOVLB  9
07818:  MOVWF  xC2
0781A:  MOVLB  0
0781C:  CALL   2312
07820:  MOVFF  1B4,9E8
07824:  MOVLW  37
07826:  MOVLB  9
07828:  MOVWF  xE9
0782A:  MOVLB  0
0782C:  CALL   2542
07830:  MOVFF  1B3,9E8
07834:  MOVLW  37
07836:  MOVLB  9
07838:  MOVWF  xE9
0783A:  MOVLB  0
0783C:  CALL   2542
07840:  MOVFF  1B2,9E8
07844:  MOVLW  37
07846:  MOVLB  9
07848:  MOVWF  xE9
0784A:  MOVLB  0
0784C:  CALL   2542
07850:  MOVFF  1B1,9E8
07854:  MOVLW  37
07856:  MOVLB  9
07858:  MOVWF  xE9
0785A:  MOVLB  0
0785C:  CALL   2542
07860:  MOVLW  0D
07862:  BTFSS  FA6.6
07864:  GOTO   7862
07868:  MOVLB  E
0786A:  MOVWF  xF9
0786C:  MOVLW  0A
0786E:  MOVLB  0
07870:  BTFSS  FA6.6
07872:  GOTO   7870
07876:  MOVLB  E
07878:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", read_packetnum);
0787A:  MOVLW  F8
0787C:  MOVWF  FF6
0787E:  MOVLW  1F
07880:  MOVWF  FF7
07882:  MOVLW  00
07884:  MOVWF  FF8
07886:  MOVLW  0E
07888:  MOVLB  9
0788A:  MOVWF  xC2
0788C:  MOVLB  0
0788E:  CALL   2312
07892:  MOVFF  1B6,9E8
07896:  MOVLW  37
07898:  MOVLB  9
0789A:  MOVWF  xE9
0789C:  MOVLB  0
0789E:  CALL   2542
078A2:  MOVFF  1B5,9E8
078A6:  MOVLW  37
078A8:  MOVLB  9
078AA:  MOVWF  xE9
078AC:  MOVLB  0
078AE:  CALL   2542
078B2:  MOVLW  0D
078B4:  BTFSS  FA6.6
078B6:  GOTO   78B4
078BA:  MOVLB  E
078BC:  MOVWF  xF9
078BE:  MOVLW  0A
078C0:  MOVLB  0
078C2:  BTFSS  FA6.6
078C4:  GOTO   78C2
078C8:  MOVLB  E
078CA:  MOVWF  xF9
....................    fprintf(PC, "Read Data\r\n");
078CC:  MOVLW  0E
078CE:  MOVWF  FF6
078D0:  MOVLW  20
078D2:  MOVWF  FF7
078D4:  MOVLW  00
078D6:  MOVWF  FF8
078D8:  MOVLB  0
078DA:  CALL   22DC
.................... 
....................    while (read_packetnum > 0) {
078DE:  MOVLB  1
078E0:  MOVF   xB5,F
078E2:  BTFSC  FD8.2
078E4:  BRA    78EC
078E6:  MOVLB  0
078E8:  GOTO   78FE
078EC:  MOVLB  0
078EE:  MOVLB  1
078F0:  MOVF   xB6,F
078F2:  BTFSS  FD8.2
078F4:  BRA    78FC
078F6:  MOVLB  0
078F8:  GOTO   79C6
078FC:  MOVLB  0
....................       read_data_bytes(smf, read_address, read_data, PACKET_SIZE);
078FE:  MOVFF  119,AED
07902:  MOVFF  118,AEC
07906:  MOVFF  117,AEB
0790A:  MOVFF  116,AEA
0790E:  MOVFF  1B4,AF1
07912:  MOVFF  1B3,AF0
07916:  MOVFF  1B2,AEF
0791A:  MOVFF  1B1,AEE
0791E:  MOVLW  01
07920:  MOVLB  A
07922:  MOVWF  xF3
07924:  MOVLW  B7
07926:  MOVWF  xF2
07928:  CLRF   xF7
0792A:  CLRF   xF6
0792C:  CLRF   xF5
0792E:  MOVLW  40
07930:  MOVWF  xF4
07932:  MOVLB  0
07934:  CALL   2ECA
.................... 
....................       for (int i = 0; i < PACKET_SIZE; i++) {
07938:  MOVLB  1
0793A:  CLRF   xF7
0793C:  MOVLB  0
0793E:  MOVLB  1
07940:  MOVF   xF7,W
07942:  SUBLW  3F
07944:  BTFSC  FD8.0
07946:  BRA    794E
07948:  MOVLB  0
0794A:  GOTO   798C
0794E:  MOVLB  0
....................          fprintf(PC, "%02X ", read_data[i]);
07950:  CLRF   03
07952:  MOVLB  1
07954:  MOVF   xF7,W
07956:  ADDLW  B7
07958:  MOVWF  FE9
0795A:  MOVLW  01
0795C:  ADDWFC 03,W
0795E:  MOVWF  FEA
07960:  MOVFF  FEF,1F8
07964:  MOVFF  1F8,9E8
07968:  MOVLW  37
0796A:  MOVLB  9
0796C:  MOVWF  xE9
0796E:  MOVLB  0
07970:  CALL   2542
07974:  MOVLW  20
07976:  BTFSS  FA6.6
07978:  GOTO   7976
0797C:  MOVLB  E
0797E:  MOVWF  xF9
07980:  MOVLB  0
07982:  MOVLB  1
07984:  INCF   xF7,F
07986:  MOVLB  0
07988:  GOTO   793E
....................       }
....................       fprintf(PC, "\r\n");
0798C:  MOVLW  0D
0798E:  BTFSS  FA6.6
07990:  GOTO   798E
07994:  MOVLB  E
07996:  MOVWF  xF9
07998:  MOVLW  0A
0799A:  MOVLB  0
0799C:  BTFSS  FA6.6
0799E:  GOTO   799C
079A2:  MOVLB  E
079A4:  MOVWF  xF9
....................       read_address += PACKET_SIZE;
079A6:  MOVLW  40
079A8:  MOVLB  1
079AA:  ADDWF  xB1,F
079AC:  MOVLW  00
079AE:  ADDWFC xB2,F
079B0:  MOVLW  00
079B2:  ADDWFC xB3,F
079B4:  MOVLW  00
079B6:  ADDWFC xB4,F
....................       read_packetnum--;
079B8:  MOVF   xB5,W
079BA:  BTFSC  FD8.2
079BC:  DECF   xB6,F
079BE:  DECF   xB5,F
079C0:  MOVLB  0
079C2:  GOTO   78DE
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
079C6:  MOVLW  1A
079C8:  MOVWF  FF6
079CA:  MOVLW  20
079CC:  MOVWF  FF7
079CE:  MOVLW  00
079D0:  MOVWF  FF8
079D2:  CALL   22DC
079D6:  GOTO   F848 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_smf_erase(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Erase\r\n");
079DA:  MOVLW  32
079DC:  MOVWF  FF6
079DE:  MOVLW  20
079E0:  MOVWF  FF7
079E2:  MOVLW  00
079E4:  MOVWF  FF8
079E6:  CALL   22DC
....................    flash_setting(smf);
079EA:  MOVFF  119,2BD
079EE:  MOVFF  118,2BC
079F2:  MOVFF  117,2BB
079F6:  MOVFF  116,2BA
079FA:  CALL   6A22
....................    unsigned int32 erase_address = 0x00000000; // Example address
079FE:  MOVLB  1
07A00:  CLRF   xB4
07A02:  CLRF   xB3
07A04:  CLRF   xB2
07A06:  CLRF   xB1
....................    sector_erase(smf, erase_address); // Erase the sector
07A08:  MOVFF  119,1F8
07A0C:  MOVFF  118,1F7
07A10:  MOVFF  117,1F6
07A14:  MOVFF  116,1F5
07A18:  MOVFF  1B4,1FC
07A1C:  MOVFF  1B3,1FB
07A20:  MOVFF  1B2,1FA
07A24:  MOVFF  1B1,1F9
07A28:  MOVLB  0
07A2A:  CALL   5914
....................    fprintf(PC, "End Flash SMF Erase\r\n");
07A2E:  MOVLW  4A
07A30:  MOVWF  FF6
07A32:  MOVLW  20
07A34:  MOVWF  FF7
07A36:  MOVLW  00
07A38:  MOVWF  FF8
07A3A:  CALL   22DC
07A3E:  GOTO   F858 (RETURN)
.................... }  
.................... 
.................... void mode_misf_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
*
073E2:  MOVLW  60
073E4:  MOVWF  FF6
073E6:  MOVLW  20
073E8:  MOVWF  FF7
073EA:  MOVLW  00
073EC:  MOVWF  FF8
073EE:  CALL   22DC
....................    piclog_make(parameter[0], PICLOG_PARAM_START); 
073F2:  MOVLB  1
073F4:  MOVF   xCA,W
073F6:  MOVWF  FE9
073F8:  MOVF   xCB,W
073FA:  MOVWF  FEA
073FC:  MOVFF  FEF,20E
07400:  MOVFF  20E,20F
07404:  MOVLB  2
07406:  CLRF   x10
07408:  MOVLB  0
0740A:  CALL   50EC
....................    FlashData_t flash_data;
....................    memset(flash_data.bytes, 0, PACKET_SIZE);
0740E:  MOVLW  01
07410:  MOVWF  FEA
07412:  MOVLW  CC
07414:  MOVWF  FE9
07416:  CLRF   00
07418:  CLRF   02
0741A:  MOVLW  40
0741C:  MOVWF  01
0741E:  CALL   234C
....................    /*
....................    for (int i = 0; i < PACKET_SIZE; i++) {
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
....................    }
....................    */
....................    fprintf(PC, "\r\n");
07422:  MOVLW  0D
07424:  BTFSS  FA6.6
07426:  GOTO   7424
0742A:  MOVLB  E
0742C:  MOVWF  xF9
0742E:  MOVLW  0A
07430:  MOVLB  0
07432:  BTFSS  FA6.6
07434:  GOTO   7432
07438:  MOVLB  E
0743A:  MOVWF  xF9
....................    flash_data.packet.crc = calc_crc8(flash_data.bytes, PACKET_SIZE-1);
0743C:  MOVLW  01
0743E:  MOVLB  A
07440:  MOVWF  xEB
07442:  MOVLW  CC
07444:  MOVWF  xEA
07446:  MOVLW  3F
07448:  MOVWF  xEC
0744A:  MOVLB  0
0744C:  CALL   30EA
07450:  MOVFF  01,20B
....................    for (int i = 0; i < PACKET_SIZE; i++) {
07454:  MOVLB  2
07456:  CLRF   x0C
07458:  MOVLB  0
0745A:  MOVLB  2
0745C:  MOVF   x0C,W
0745E:  SUBLW  3F
07460:  BTFSC  FD8.0
07462:  BRA    746A
07464:  MOVLB  0
07466:  GOTO   74A8
0746A:  MOVLB  0
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
0746C:  CLRF   03
0746E:  MOVLB  2
07470:  MOVF   x0C,W
07472:  ADDLW  CC
07474:  MOVWF  FE9
07476:  MOVLW  01
07478:  ADDWFC 03,W
0747A:  MOVWF  FEA
0747C:  MOVFF  FEF,20E
07480:  MOVFF  20E,9E8
07484:  MOVLW  37
07486:  MOVLB  9
07488:  MOVWF  xE9
0748A:  MOVLB  0
0748C:  CALL   2542
07490:  MOVLW  20
07492:  BTFSS  FA6.6
07494:  GOTO   7492
07498:  MOVLB  E
0749A:  MOVWF  xF9
0749C:  MOVLB  0
0749E:  MOVLB  2
074A0:  INCF   x0C,F
074A2:  MOVLB  0
074A4:  GOTO   745A
....................    }
....................    fprintf(PC, "\r\n");
074A8:  MOVLW  0D
074AA:  BTFSS  FA6.6
074AC:  GOTO   74AA
074B0:  MOVLB  E
074B2:  MOVWF  xF9
074B4:  MOVLW  0A
074B6:  MOVLB  0
074B8:  BTFSS  FA6.6
074BA:  GOTO   74B8
074BE:  MOVLB  E
074C0:  MOVWF  xF9
....................    write_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, flash_data.bytes, PACKET_SIZE);
074C2:  MOVFF  115,AED
074C6:  MOVFF  114,AEC
074CA:  MOVFF  113,AEB
074CE:  MOVFF  112,AEA
074D2:  MOVLB  A
074D4:  CLRF   xF1
074D6:  CLRF   xF0
074D8:  CLRF   xEF
074DA:  CLRF   xEE
074DC:  MOVLW  01
074DE:  MOVWF  xF3
074E0:  MOVLW  CC
074E2:  MOVWF  xF2
074E4:  CLRF   xF5
074E6:  MOVLW  40
074E8:  MOVWF  xF4
074EA:  MOVLB  0
074EC:  CALL   3F36
....................    memset(flash_data.bytes, 0, PACKET_SIZE);
074F0:  MOVLW  01
074F2:  MOVWF  FEA
074F4:  MOVLW  CC
074F6:  MOVWF  FE9
074F8:  CLRF   00
074FA:  CLRF   02
074FC:  MOVLW  40
074FE:  MOVWF  01
07500:  CALL   234C
....................    read_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, flash_data.bytes, PACKET_SIZE);
07504:  MOVFF  115,AED
07508:  MOVFF  114,AEC
0750C:  MOVFF  113,AEB
07510:  MOVFF  112,AEA
07514:  MOVLB  A
07516:  CLRF   xF1
07518:  CLRF   xF0
0751A:  CLRF   xEF
0751C:  CLRF   xEE
0751E:  MOVLW  01
07520:  MOVWF  xF3
07522:  MOVLW  CC
07524:  MOVWF  xF2
07526:  CLRF   xF7
07528:  CLRF   xF6
0752A:  CLRF   xF5
0752C:  MOVLW  40
0752E:  MOVWF  xF4
07530:  MOVLB  0
07532:  CALL   2ECA
....................    flash_data.packet.crc = calc_crc8(flash_data.bytes, PACKET_SIZE-1);
07536:  MOVLW  01
07538:  MOVLB  A
0753A:  MOVWF  xEB
0753C:  MOVLW  CC
0753E:  MOVWF  xEA
07540:  MOVLW  3F
07542:  MOVWF  xEC
07544:  MOVLB  0
07546:  CALL   30EA
0754A:  MOVFF  01,20B
....................    for (int i = 0; i < PACKET_SIZE; i++) {
0754E:  MOVLB  2
07550:  CLRF   x0D
07552:  MOVLB  0
07554:  MOVLB  2
07556:  MOVF   x0D,W
07558:  SUBLW  3F
0755A:  BTFSC  FD8.0
0755C:  BRA    7564
0755E:  MOVLB  0
07560:  GOTO   75A2
07564:  MOVLB  0
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
07566:  CLRF   03
07568:  MOVLB  2
0756A:  MOVF   x0D,W
0756C:  ADDLW  CC
0756E:  MOVWF  FE9
07570:  MOVLW  01
07572:  ADDWFC 03,W
07574:  MOVWF  FEA
07576:  MOVFF  FEF,20E
0757A:  MOVFF  20E,9E8
0757E:  MOVLW  37
07580:  MOVLB  9
07582:  MOVWF  xE9
07584:  MOVLB  0
07586:  CALL   2542
0758A:  MOVLW  20
0758C:  BTFSS  FA6.6
0758E:  GOTO   758C
07592:  MOVLB  E
07594:  MOVWF  xF9
07596:  MOVLB  0
07598:  MOVLB  2
0759A:  INCF   x0D,F
0759C:  MOVLB  0
0759E:  GOTO   7554
....................    }
....................    misf_init(); // Update the address area after writing
075A2:  CALL   3960
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
075A6:  MOVLB  1
075A8:  MOVF   xCA,W
075AA:  MOVWF  FE9
075AC:  MOVF   xCB,W
075AE:  MOVWF  FEA
075B0:  MOVFF  FEF,20E
075B4:  MOVFF  20E,20F
075B8:  MOVLB  2
075BA:  SETF   x10
075BC:  MOVLB  0
075BE:  CALL   50EC
....................    fprintf(PC, "End Flash Address Reset\r\n");
075C2:  MOVLW  7C
075C4:  MOVWF  FF6
075C6:  MOVLW  20
075C8:  MOVWF  FF7
075CA:  MOVLW  00
075CC:  MOVWF  FF8
075CE:  CALL   22DC
075D2:  GOTO   761A (RETURN)
.................... }
.................... 
.................... // ---------- SMF Command Functions ----------
.................... void mode_smf_read_force(int8 parameter[])
*
07D42:  MOVLW  01
07D44:  MOVLB  1
07D46:  ADDWF  xAF,W
07D48:  MOVWF  FE9
07D4A:  MOVLW  00
07D4C:  ADDWFC xB0,W
07D4E:  MOVWF  FEA
07D50:  MOVF   FEF,W
07D52:  MOVLB  2
07D54:  CLRF   x01
07D56:  CLRF   x00
07D58:  MOVLB  1
07D5A:  CLRF   xFF
07D5C:  MOVWF  xFE
07D5E:  MOVFF  1FE,201
07D62:  CLRF   xFE
07D64:  CLRF   xFF
07D66:  MOVLB  2
07D68:  CLRF   x00
07D6A:  MOVLW  02
07D6C:  MOVLB  1
07D6E:  ADDWF  xAF,W
07D70:  MOVWF  FE9
07D72:  MOVLW  00
07D74:  ADDWFC xB0,W
07D76:  MOVWF  FEA
07D78:  MOVF   FEF,W
07D7A:  MOVLB  2
07D7C:  CLRF   x06
07D7E:  CLRF   x05
07D80:  CLRF   x04
07D82:  MOVWF  x03
07D84:  MOVFF  204,03
07D88:  MOVFF  203,02
07D8C:  CLRF   00
07D8E:  CLRF   01
07D90:  MOVF   00,W
07D92:  MOVLB  1
07D94:  IORWF  xFE,F
07D96:  MOVF   01,W
07D98:  IORWF  xFF,F
07D9A:  MOVF   02,W
07D9C:  MOVLB  2
07D9E:  IORWF  x00,F
07DA0:  MOVF   03,W
07DA2:  IORWF  x01,F
07DA4:  MOVLW  03
07DA6:  MOVLB  1
07DA8:  ADDWF  xAF,W
07DAA:  MOVWF  FE9
07DAC:  MOVLW  00
07DAE:  ADDWFC xB0,W
07DB0:  MOVWF  FEA
07DB2:  MOVF   FEF,W
07DB4:  MOVLB  2
07DB6:  CLRF   x06
07DB8:  CLRF   x05
07DBA:  CLRF   x04
07DBC:  MOVWF  x03
07DBE:  MOVFF  205,03
07DC2:  MOVFF  204,02
07DC6:  MOVFF  203,01
07DCA:  CLRF   00
07DCC:  MOVF   00,W
07DCE:  MOVLB  1
07DD0:  IORWF  xFE,F
07DD2:  MOVF   01,W
07DD4:  IORWF  xFF,F
07DD6:  MOVF   02,W
07DD8:  MOVLB  2
07DDA:  IORWF  x00,F
07DDC:  MOVF   03,W
07DDE:  IORWF  x01,F
07DE0:  MOVLW  04
07DE2:  MOVLB  1
07DE4:  ADDWF  xAF,W
07DE6:  MOVWF  FE9
07DE8:  MOVLW  00
07DEA:  ADDWFC xB0,W
07DEC:  MOVWF  FEA
07DEE:  MOVF   FEF,W
07DF0:  MOVWF  00
07DF2:  CLRF   01
07DF4:  CLRF   02
07DF6:  CLRF   03
07DF8:  MOVF   00,W
07DFA:  IORWF  xFE,W
07DFC:  MOVWF  xB1
07DFE:  MOVF   01,W
07E00:  IORWF  xFF,W
07E02:  MOVWF  xB2
07E04:  MOVF   02,W
07E06:  MOVLB  2
07E08:  IORWF  x00,W
07E0A:  MOVLB  1
07E0C:  MOVWF  xB3
07E0E:  MOVF   03,W
07E10:  MOVLB  2
07E12:  IORWF  x01,W
07E14:  MOVLB  1
07E16:  MOVWF  xB4
07E18:  MOVLW  07
07E1A:  ADDWF  xAF,W
07E1C:  MOVWF  FE9
07E1E:  MOVLW  00
07E20:  ADDWFC xB0,W
07E22:  MOVWF  FEA
07E24:  MOVF   FEF,W
07E26:  CLRF   xFF
07E28:  MOVWF  xFE
07E2A:  MOVFF  1FE,1FF
07E2E:  CLRF   xFE
07E30:  MOVLW  08
07E32:  ADDWF  xAF,W
07E34:  MOVWF  FE9
07E36:  MOVLW  00
07E38:  ADDWFC xB0,W
07E3A:  MOVWF  FEA
07E3C:  MOVF   FEF,W
07E3E:  CLRF   03
07E40:  IORWF  xFE,W
07E42:  MOVWF  xB5
07E44:  MOVF   03,W
07E46:  IORWF  xFF,W
07E48:  MOVWF  xB6
.................... {
....................    int32 address = 
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
....................    
....................    int16 packet_num = 
....................       ((int16)parameter[7] << 8) |
....................       ((int16)parameter[8]);
....................       
....................    int8 read_data[PACKET_SIZE] = {0x00}; // Initialize read data buffer
07E4A:  CLRF   xB7
07E4C:  CLRF   xB8
07E4E:  CLRF   xB9
07E50:  CLRF   xBA
07E52:  CLRF   xBB
07E54:  CLRF   xBC
07E56:  CLRF   xBD
07E58:  CLRF   xBE
07E5A:  CLRF   xBF
07E5C:  CLRF   xC0
07E5E:  CLRF   xC1
07E60:  CLRF   xC2
07E62:  CLRF   xC3
07E64:  CLRF   xC4
07E66:  CLRF   xC5
07E68:  CLRF   xC6
07E6A:  CLRF   xC7
07E6C:  CLRF   xC8
07E6E:  CLRF   xC9
07E70:  CLRF   xCA
07E72:  CLRF   xCB
07E74:  CLRF   xCC
07E76:  CLRF   xCD
07E78:  CLRF   xCE
07E7A:  CLRF   xCF
07E7C:  CLRF   xD0
07E7E:  CLRF   xD1
07E80:  CLRF   xD2
07E82:  CLRF   xD3
07E84:  CLRF   xD4
07E86:  CLRF   xD5
07E88:  CLRF   xD6
07E8A:  CLRF   xD7
07E8C:  CLRF   xD8
07E8E:  CLRF   xD9
07E90:  CLRF   xDA
07E92:  CLRF   xDB
07E94:  CLRF   xDC
07E96:  CLRF   xDD
07E98:  CLRF   xDE
07E9A:  CLRF   xDF
07E9C:  CLRF   xE0
07E9E:  CLRF   xE1
07EA0:  CLRF   xE2
07EA2:  CLRF   xE3
07EA4:  CLRF   xE4
07EA6:  CLRF   xE5
07EA8:  CLRF   xE6
07EAA:  CLRF   xE7
07EAC:  CLRF   xE8
07EAE:  CLRF   xE9
07EB0:  CLRF   xEA
07EB2:  CLRF   xEB
07EB4:  CLRF   xEC
07EB6:  CLRF   xED
07EB8:  CLRF   xEE
07EBA:  CLRF   xEF
07EBC:  CLRF   xF0
07EBE:  CLRF   xF1
07EC0:  CLRF   xF2
07EC2:  CLRF   xF3
07EC4:  CLRF   xF4
07EC6:  CLRF   xF5
07EC8:  CLRF   xF6
....................    if(!is_connect(smf)) {
07ECA:  MOVFF  119,253
07ECE:  MOVFF  118,252
07ED2:  MOVFF  117,251
07ED6:  MOVFF  116,250
07EDA:  MOVLB  0
07EDC:  CALL   2E02
07EE0:  MOVF   01,F
07EE2:  BTFSS  FD8.2
07EE4:  GOTO   7EFC
....................       printf("SMF is not connected\r\n");
07EE8:  MOVLW  96
07EEA:  MOVWF  FF6
07EEC:  MOVLW  20
07EEE:  MOVWF  FF7
07EF0:  MOVLW  00
07EF2:  MOVWF  FF8
07EF4:  CALL   22DC
....................       return;
07EF8:  GOTO   8150
....................    }
....................    printf("Start Flash SMF Read Force\r\n");
07EFC:  MOVLW  AE
07EFE:  MOVWF  FF6
07F00:  MOVLW  20
07F02:  MOVWF  FF7
07F04:  MOVLW  00
07F06:  MOVWF  FF8
07F08:  CALL   22DC
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
07F0C:  MOVLB  1
07F0E:  MOVF   xAF,W
07F10:  MOVWF  FE9
07F12:  MOVF   xB0,W
07F14:  MOVWF  FEA
07F16:  MOVFF  FEF,1FE
07F1A:  MOVFF  1FE,20F
07F1E:  MOVLB  2
07F20:  CLRF   x10
07F22:  MOVLB  0
07F24:  CALL   50EC
.................... 
....................    // 統合管理システムからキューに追加
....................    // enqueue_read_data(address, packet_num * PACKET_SIZE);
.................... 
....................    printf("\tAddress  : 0x%08LX\r\n", address);
07F28:  MOVLW  CC
07F2A:  MOVWF  FF6
07F2C:  MOVLW  20
07F2E:  MOVWF  FF7
07F30:  MOVLW  00
07F32:  MOVWF  FF8
07F34:  MOVLW  0E
07F36:  MOVLB  9
07F38:  MOVWF  xC2
07F3A:  MOVLB  0
07F3C:  CALL   2312
07F40:  MOVFF  1B4,9E8
07F44:  MOVLW  37
07F46:  MOVLB  9
07F48:  MOVWF  xE9
07F4A:  MOVLB  0
07F4C:  CALL   2542
07F50:  MOVFF  1B3,9E8
07F54:  MOVLW  37
07F56:  MOVLB  9
07F58:  MOVWF  xE9
07F5A:  MOVLB  0
07F5C:  CALL   2542
07F60:  MOVFF  1B2,9E8
07F64:  MOVLW  37
07F66:  MOVLB  9
07F68:  MOVWF  xE9
07F6A:  MOVLB  0
07F6C:  CALL   2542
07F70:  MOVFF  1B1,9E8
07F74:  MOVLW  37
07F76:  MOVLB  9
07F78:  MOVWF  xE9
07F7A:  MOVLB  0
07F7C:  CALL   2542
07F80:  MOVLW  0D
07F82:  BTFSS  FA6.6
07F84:  GOTO   7F82
07F88:  MOVLB  E
07F8A:  MOVWF  xF9
07F8C:  MOVLW  0A
07F8E:  MOVLB  0
07F90:  BTFSS  FA6.6
07F92:  GOTO   7F90
07F96:  MOVLB  E
07F98:  MOVWF  xF9
....................    printf("\tPacketNum: 0x%04LX\r\n", packet_num);
07F9A:  MOVLW  E2
07F9C:  MOVWF  FF6
07F9E:  MOVLW  20
07FA0:  MOVWF  FF7
07FA2:  MOVLW  00
07FA4:  MOVWF  FF8
07FA6:  MOVLW  0E
07FA8:  MOVLB  9
07FAA:  MOVWF  xC2
07FAC:  MOVLB  0
07FAE:  CALL   2312
07FB2:  MOVFF  1B6,9E8
07FB6:  MOVLW  37
07FB8:  MOVLB  9
07FBA:  MOVWF  xE9
07FBC:  MOVLB  0
07FBE:  CALL   2542
07FC2:  MOVFF  1B5,9E8
07FC6:  MOVLW  37
07FC8:  MOVLB  9
07FCA:  MOVWF  xE9
07FCC:  MOVLB  0
07FCE:  CALL   2542
07FD2:  MOVLW  0D
07FD4:  BTFSS  FA6.6
07FD6:  GOTO   7FD4
07FDA:  MOVLB  E
07FDC:  MOVWF  xF9
07FDE:  MOVLW  0A
07FE0:  MOVLB  0
07FE2:  BTFSS  FA6.6
07FE4:  GOTO   7FE2
07FE8:  MOVLB  E
07FEA:  MOVWF  xF9
....................    printf("read data\r\n");
07FEC:  MOVLW  F8
07FEE:  MOVWF  FF6
07FF0:  MOVLW  20
07FF2:  MOVWF  FF7
07FF4:  MOVLW  00
07FF6:  MOVWF  FF8
07FF8:  MOVLB  0
07FFA:  CALL   22DC
....................    for (int16 packet_count = 0; packet_count < packet_num; packet_count++)
07FFE:  MOVLB  1
08000:  CLRF   xF8
08002:  CLRF   xF7
08004:  MOVLB  0
08006:  MOVLB  1
08008:  MOVF   xF8,W
0800A:  SUBWF  xB6,W
0800C:  BTFSC  FD8.0
0800E:  BRA    8016
08010:  MOVLB  0
08012:  GOTO   8124
08016:  MOVLB  0
08018:  BTFSS  FD8.2
0801A:  GOTO   8030
0801E:  MOVLB  1
08020:  MOVF   xB5,W
08022:  SUBWF  xF7,W
08024:  BTFSS  FD8.0
08026:  BRA    802E
08028:  MOVLB  0
0802A:  GOTO   8124
0802E:  MOVLB  0
....................    {
....................       int32 current_address = address + (packet_count * PACKET_SIZE);
08030:  MOVLB  1
08032:  RLCF   xF7,W
08034:  MOVWF  02
08036:  RLCF   xF8,W
08038:  MOVWF  03
0803A:  RLCF   02,F
0803C:  RLCF   03,F
0803E:  RLCF   02,F
08040:  RLCF   03,F
08042:  RLCF   02,F
08044:  RLCF   03,F
08046:  RLCF   02,F
08048:  RLCF   03,F
0804A:  RLCF   02,F
0804C:  RLCF   03,F
0804E:  MOVLW  C0
08050:  ANDWF  02,F
08052:  MOVF   02,W
08054:  ADDWF  xB1,W
08056:  MOVWF  xF9
08058:  MOVF   03,W
0805A:  ADDWFC xB2,W
0805C:  MOVWF  xFA
0805E:  MOVLW  00
08060:  ADDWFC xB3,W
08062:  MOVWF  xFB
08064:  MOVLW  00
08066:  ADDWFC xB4,W
08068:  MOVWF  xFC
0806A:  MOVLB  0
....................       read_data_bytes(smf, current_address, read_data, PACKET_SIZE);
0806C:  MOVFF  119,AED
08070:  MOVFF  118,AEC
08074:  MOVFF  117,AEB
08078:  MOVFF  116,AEA
0807C:  MOVFF  1FC,AF1
08080:  MOVFF  1FB,AF0
08084:  MOVFF  1FA,AEF
08088:  MOVFF  1F9,AEE
0808C:  MOVLW  01
0808E:  MOVLB  A
08090:  MOVWF  xF3
08092:  MOVLW  B7
08094:  MOVWF  xF2
08096:  CLRF   xF7
08098:  CLRF   xF6
0809A:  CLRF   xF5
0809C:  MOVLW  40
0809E:  MOVWF  xF4
080A0:  MOVLB  0
080A2:  CALL   2ECA
....................       for (int8 byte_count = 0; byte_count < PACKET_SIZE; byte_count++)
080A6:  MOVLB  1
080A8:  CLRF   xFD
080AA:  MOVLB  0
080AC:  MOVLB  1
080AE:  MOVF   xFD,W
080B0:  SUBLW  3F
080B2:  BTFSC  FD8.0
080B4:  BRA    80BC
080B6:  MOVLB  0
080B8:  GOTO   80FA
080BC:  MOVLB  0
....................       {
....................          printf("%02X ", read_data[byte_count]);
080BE:  CLRF   03
080C0:  MOVLB  1
080C2:  MOVF   xFD,W
080C4:  ADDLW  B7
080C6:  MOVWF  FE9
080C8:  MOVLW  01
080CA:  ADDWFC 03,W
080CC:  MOVWF  FEA
080CE:  MOVFF  FEF,1FE
080D2:  MOVFF  1FE,9E8
080D6:  MOVLW  37
080D8:  MOVLB  9
080DA:  MOVWF  xE9
080DC:  MOVLB  0
080DE:  CALL   2542
080E2:  MOVLW  20
080E4:  BTFSS  FA6.6
080E6:  GOTO   80E4
080EA:  MOVLB  E
080EC:  MOVWF  xF9
080EE:  MOVLB  0
080F0:  MOVLB  1
080F2:  INCF   xFD,F
080F4:  MOVLB  0
080F6:  GOTO   80AC
....................       }
....................       printf("\r\n");
080FA:  MOVLW  0D
080FC:  BTFSS  FA6.6
080FE:  GOTO   80FC
08102:  MOVLB  E
08104:  MOVWF  xF9
08106:  MOVLW  0A
08108:  MOVLB  0
0810A:  BTFSS  FA6.6
0810C:  GOTO   810A
08110:  MOVLB  E
08112:  MOVWF  xF9
08114:  MOVLB  0
08116:  MOVLB  1
08118:  INCF   xF7,F
0811A:  BTFSC  FD8.2
0811C:  INCF   xF8,F
0811E:  MOVLB  0
08120:  GOTO   8006
....................    }
.................... 
....................    printf("\r\nEnd Flash SMF Read Force\r\n");
08124:  MOVLW  04
08126:  MOVWF  FF6
08128:  MOVLW  21
0812A:  MOVWF  FF7
0812C:  MOVLW  00
0812E:  MOVWF  FF8
08130:  CALL   22DC
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
08134:  MOVLB  1
08136:  MOVF   xAF,W
08138:  MOVWF  FE9
0813A:  MOVF   xB0,W
0813C:  MOVWF  FEA
0813E:  MOVFF  FEF,1FE
08142:  MOVFF  1FE,20F
08146:  MOVLB  2
08148:  SETF   x10
0814A:  MOVLB  0
0814C:  CALL   50EC
08150:  GOTO   F878 (RETURN)
.................... }
.................... 
.................... void mode_smf_erase_force(int8 parameter[])
.................... {
....................    printf("Start SMF Erase All\r\n");
08154:  MOVLW  22
08156:  MOVWF  FF6
08158:  MOVLW  21
0815A:  MOVWF  FF7
0815C:  MOVLW  00
0815E:  MOVWF  FF8
08160:  CALL   22DC
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
08164:  MOVLB  1
08166:  MOVF   xAF,W
08168:  MOVWF  FE9
0816A:  MOVF   xB0,W
0816C:  MOVWF  FEA
0816E:  MOVFF  FEF,1B1
....................    piclog_make(cmd, 0x00); // Log the command execution
08172:  MOVFF  1B1,20F
08176:  MOVLB  2
08178:  CLRF   x10
0817A:  MOVLB  0
0817C:  CALL   50EC
....................    
.................... 
....................    
....................    for (int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_IV2_DATA_END_ADDRESS; address += SECTOR_64K_BYTE) {
08180:  MOVLW  06
08182:  MOVLB  1
08184:  MOVWF  xB5
08186:  MOVLW  AA
08188:  MOVWF  xB4
0818A:  CLRF   xB3
0818C:  CLRF   xB2
0818E:  MOVLB  0
08190:  MOVLB  1
08192:  MOVF   xB5,W
08194:  SUBLW  07
08196:  BTFSC  FD8.0
08198:  BRA    81A0
0819A:  MOVLB  0
0819C:  GOTO   821E
081A0:  MOVLB  0
081A2:  BTFSS  FD8.2
081A4:  GOTO   81EA
081A8:  MOVLB  1
081AA:  MOVF   xB4,W
081AC:  SUBLW  49
081AE:  BTFSC  FD8.0
081B0:  BRA    81B8
081B2:  MOVLB  0
081B4:  GOTO   821E
081B8:  MOVLB  0
081BA:  BTFSS  FD8.2
081BC:  GOTO   81EA
081C0:  MOVLB  1
081C2:  MOVF   xB3,W
081C4:  SUBLW  0F
081C6:  BTFSC  FD8.0
081C8:  BRA    81D0
081CA:  MOVLB  0
081CC:  GOTO   821E
081D0:  MOVLB  0
081D2:  BTFSS  FD8.2
081D4:  GOTO   81EA
081D8:  MOVLB  1
081DA:  MOVF   xB2,W
081DC:  SUBLW  FE
081DE:  BTFSC  FD8.0
081E0:  BRA    81E8
081E2:  MOVLB  0
081E4:  GOTO   821E
081E8:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
081EA:  MOVFF  119,1F8
081EE:  MOVFF  118,1F7
081F2:  MOVFF  117,1F6
081F6:  MOVFF  116,1F5
081FA:  MOVFF  1B5,1FC
081FE:  MOVFF  1B4,1FB
08202:  MOVFF  1B3,1FA
08206:  MOVFF  1B2,1F9
0820A:  CALL   5914
0820E:  MOVLW  01
08210:  MOVLB  1
08212:  ADDWF  xB4,F
08214:  MOVLW  00
08216:  ADDWFC xB5,F
08218:  MOVLB  0
0821A:  GOTO   8190
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
0821E:  MOVFF  1B1,20F
08222:  MOVLB  2
08224:  SETF   x10
08226:  MOVLB  0
08228:  CALL   50EC
....................    printf("End SMF Erase All\r\n");
0822C:  MOVLW  38
0822E:  MOVWF  FF6
08230:  MOVLW  21
08232:  MOVWF  FF7
08234:  MOVLW  00
08236:  MOVWF  FF8
08238:  CALL   22DC
0823C:  GOTO   F888 (RETURN)
.................... }
.................... 
.................... void mode_smf_address_reset(int8 parameter[])
.................... {
....................    printf("Start SMF Reset\r\n");
*
07BC4:  MOVLW  4C
07BC6:  MOVWF  FF6
07BC8:  MOVLW  21
07BCA:  MOVWF  FF7
07BCC:  MOVLW  00
07BCE:  MOVWF  FF8
07BD0:  CALL   22DC
....................    piclog_make(parameter[0], PICLOG_PARAM_START);
07BD4:  MOVLB  1
07BD6:  MOVF   xAF,W
07BD8:  MOVWF  FE9
07BDA:  MOVF   xB0,W
07BDC:  MOVWF  FEA
07BDE:  MOVFF  FEF,1F5
07BE2:  MOVFF  1F5,20F
07BE6:  MOVLB  2
07BE8:  CLRF   x10
07BEA:  MOVLB  0
07BEC:  CALL   50EC
....................    int8 writedata[PACKET_SIZE] = {0x00}; 
07BF0:  MOVLB  1
07BF2:  CLRF   xB1
07BF4:  CLRF   xB2
07BF6:  CLRF   xB3
07BF8:  CLRF   xB4
07BFA:  CLRF   xB5
07BFC:  CLRF   xB6
07BFE:  CLRF   xB7
07C00:  CLRF   xB8
07C02:  CLRF   xB9
07C04:  CLRF   xBA
07C06:  CLRF   xBB
07C08:  CLRF   xBC
07C0A:  CLRF   xBD
07C0C:  CLRF   xBE
07C0E:  CLRF   xBF
07C10:  CLRF   xC0
07C12:  CLRF   xC1
07C14:  CLRF   xC2
07C16:  CLRF   xC3
07C18:  CLRF   xC4
07C1A:  CLRF   xC5
07C1C:  CLRF   xC6
07C1E:  CLRF   xC7
07C20:  CLRF   xC8
07C22:  CLRF   xC9
07C24:  CLRF   xCA
07C26:  CLRF   xCB
07C28:  CLRF   xCC
07C2A:  CLRF   xCD
07C2C:  CLRF   xCE
07C2E:  CLRF   xCF
07C30:  CLRF   xD0
07C32:  CLRF   xD1
07C34:  CLRF   xD2
07C36:  CLRF   xD3
07C38:  CLRF   xD4
07C3A:  CLRF   xD5
07C3C:  CLRF   xD6
07C3E:  CLRF   xD7
07C40:  CLRF   xD8
07C42:  CLRF   xD9
07C44:  CLRF   xDA
07C46:  CLRF   xDB
07C48:  CLRF   xDC
07C4A:  CLRF   xDD
07C4C:  CLRF   xDE
07C4E:  CLRF   xDF
07C50:  CLRF   xE0
07C52:  CLRF   xE1
07C54:  CLRF   xE2
07C56:  CLRF   xE3
07C58:  CLRF   xE4
07C5A:  CLRF   xE5
07C5C:  CLRF   xE6
07C5E:  CLRF   xE7
07C60:  CLRF   xE8
07C62:  CLRF   xE9
07C64:  CLRF   xEA
07C66:  CLRF   xEB
07C68:  CLRF   xEC
07C6A:  CLRF   xED
07C6C:  CLRF   xEE
07C6E:  CLRF   xEF
07C70:  CLRF   xF0
....................    for (int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_IV2_DATA_END_ADDRESS; address += SECTOR_64K_BYTE) {
07C72:  MOVLW  06
07C74:  MOVWF  xF4
07C76:  MOVLW  AA
07C78:  MOVWF  xF3
07C7A:  CLRF   xF2
07C7C:  CLRF   xF1
07C7E:  MOVLB  0
07C80:  MOVLB  1
07C82:  MOVF   xF4,W
07C84:  SUBLW  07
07C86:  BTFSC  FD8.0
07C88:  BRA    7C90
07C8A:  MOVLB  0
07C8C:  GOTO   7D0E
07C90:  MOVLB  0
07C92:  BTFSS  FD8.2
07C94:  GOTO   7CDA
07C98:  MOVLB  1
07C9A:  MOVF   xF3,W
07C9C:  SUBLW  49
07C9E:  BTFSC  FD8.0
07CA0:  BRA    7CA8
07CA2:  MOVLB  0
07CA4:  GOTO   7D0E
07CA8:  MOVLB  0
07CAA:  BTFSS  FD8.2
07CAC:  GOTO   7CDA
07CB0:  MOVLB  1
07CB2:  MOVF   xF2,W
07CB4:  SUBLW  0F
07CB6:  BTFSC  FD8.0
07CB8:  BRA    7CC0
07CBA:  MOVLB  0
07CBC:  GOTO   7D0E
07CC0:  MOVLB  0
07CC2:  BTFSS  FD8.2
07CC4:  GOTO   7CDA
07CC8:  MOVLB  1
07CCA:  MOVF   xF1,W
07CCC:  SUBLW  FE
07CCE:  BTFSC  FD8.0
07CD0:  BRA    7CD8
07CD2:  MOVLB  0
07CD4:  GOTO   7D0E
07CD8:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
07CDA:  MOVFF  119,1F8
07CDE:  MOVFF  118,1F7
07CE2:  MOVFF  117,1F6
07CE6:  MOVFF  116,1F5
07CEA:  MOVFF  1F4,1FC
07CEE:  MOVFF  1F3,1FB
07CF2:  MOVFF  1F2,1FA
07CF6:  MOVFF  1F1,1F9
07CFA:  CALL   5914
07CFE:  MOVLW  01
07D00:  MOVLB  1
07D02:  ADDWF  xF3,F
07D04:  MOVLW  00
07D06:  ADDWFC xF4,F
07D08:  MOVLB  0
07D0A:  GOTO   7C80
....................    }
....................    smf_data_table_init(); // Update the address area after writing
07D0E:  CALL   7A42
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
07D12:  MOVLB  1
07D14:  MOVF   xAF,W
07D16:  MOVWF  FE9
07D18:  MOVF   xB0,W
07D1A:  MOVWF  FEA
07D1C:  MOVFF  FEF,1F5
07D20:  MOVFF  1F5,20F
07D24:  MOVLB  2
07D26:  SETF   x10
07D28:  MOVLB  0
07D2A:  CALL   50EC
....................    printf("End SMF Reset\r\n");
07D2E:  MOVLW  5E
07D30:  MOVWF  FF6
07D32:  MOVLW  21
07D34:  MOVWF  FF7
07D36:  MOVLW  00
07D38:  MOVWF  FF8
07D3A:  CALL   22DC
07D3E:  GOTO   F868 (RETURN)
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
12936:  CLRF   FF8
12938:  BCF    FF1.2
1293A:  BCF    F9F.0
1293C:  BCF    FA9.5
1293E:  BSF    FD0.7
12940:  BSF    07.7
12942:  MOVLB  E
12944:  MOVLW  55
12946:  MOVWF  F7E
12948:  MOVLW  AA
1294A:  MOVWF  F7E
1294C:  BCF    F66.6
1294E:  MOVLW  F9
12950:  MOVWF  x2C
12952:  MOVLW  F6
12954:  MOVWF  x2D
12956:  MOVLW  0F
12958:  MOVWF  x2E
1295A:  MOVLW  40
1295C:  MOVWF  x12
1295E:  MOVLW  30
12960:  MOVWF  x13
12962:  MOVLW  20
12964:  MOVWF  x22
12966:  MOVLW  30
12968:  MOVWF  x24
1296A:  MOVLW  55
1296C:  MOVWF  F7E
1296E:  MOVLW  AA
12970:  MOVWF  F7E
12972:  BSF    F66.6
12974:  CLRF   F9B
12976:  CLRF   F64
12978:  CLRF   F65
1297A:  CLRF   F66
1297C:  MOVLW  02
1297E:  MOVWF  FD3
12980:  CLRF   1B
12982:  MOVLB  F
12984:  BSF    x2D.3
12986:  MOVLW  A0
12988:  MOVWF  x2B
1298A:  MOVLW  01
1298C:  MOVWF  x2C
1298E:  MOVLW  A6
12990:  MOVWF  x2E
12992:  MOVLW  90
12994:  MOVWF  x2F
12996:  MOVLB  E
12998:  BSF    xFD.3
1299A:  MOVLW  A0
1299C:  MOVWF  xFB
1299E:  MOVLW  01
129A0:  MOVWF  xFC
129A2:  MOVLW  A6
129A4:  MOVWF  xFE
129A6:  MOVLW  90
129A8:  MOVWF  xFF
129AA:  BSF    F92.1
129AC:  BCF    F92.0
129AE:  BCF    F92.3
129B0:  BCF    F89.3
129B2:  BSF    F96.0
129B4:  BCF    F96.6
129B6:  BCF    F96.1
129B8:  BCF    F8D.1
129BA:  BSF    F93.4
129BC:  BCF    F93.5
129BE:  BCF    F93.2
129C0:  BSF    F8A.2
129C2:  BCF    F95.4
129C4:  BCF    F95.5
129C6:  BSF    F8C.5
129C8:  CLRF   1F
129CA:  CLRF   1E
129CC:  CLRF   1D
129CE:  CLRF   1C
129D0:  CLRF   23
129D2:  CLRF   22
129D4:  CLRF   21
129D6:  CLRF   20
129D8:  CLRF   27
129DA:  CLRF   26
129DC:  CLRF   25
129DE:  CLRF   24
129E0:  CLRF   29
129E2:  CLRF   28
129E4:  CLRF   4A
129E6:  BCF    4B.0
129E8:  MOVLW  1E
129EA:  MOVLB  1
129EC:  MOVWF  x7C
129EE:  CLRF   x81
129F0:  CLRF   x80
129F2:  CLRF   x7F
129F4:  CLRF   x7E
129F6:  CLRF   x85
129F8:  CLRF   x84
129FA:  CLRF   x83
129FC:  CLRF   x82
129FE:  CLRF   x87
12A00:  CLRF   x86
12A02:  MOVLB  E
12A04:  CLRF   xD9
12A06:  CLRF   xDA
12A08:  CLRF   xCE
12A0A:  CLRF   xCF
12A0C:  CLRF   xD0
12A0E:  CLRF   xD1
12A10:  CLRF   xD2
12A12:  CLRF   xD3
12A14:  CLRF   xD4
12A16:  CLRF   xD5
12A18:  CLRF   x45
12A1A:  CLRF   x46
12A1C:  CLRF   x47
12A1E:  BCF    x8D.7
12A20:  BCF    x8D.6
12A22:  BCF    x8D.5
12A24:  MOVLB  F
12A26:  CLRF   x53
12A28:  CLRF   x38
12A2A:  CLRF   x37
12A2C:  MOVLB  0
12A2E:  CLRF   2A
12A30:  CLRF   2B
12A32:  CLRF   2C
12A34:  CLRF   2D
12A36:  CLRF   2E
12A38:  CLRF   2F
12A3A:  CLRF   30
12A3C:  CLRF   31
12A3E:  CLRF   32
12A40:  CLRF   33
12A42:  CLRF   34
12A44:  CLRF   35
12A46:  CLRF   36
12A48:  CLRF   37
12A4A:  CLRF   38
12A4C:  CLRF   39
12A4E:  CLRF   3A
12A50:  CLRF   3B
12A52:  CLRF   3C
12A54:  CLRF   3D
12A56:  CLRF   3E
12A58:  CLRF   3F
12A5A:  CLRF   40
12A5C:  CLRF   41
12A5E:  CLRF   42
12A60:  CLRF   43
12A62:  CLRF   44
12A64:  CLRF   45
12A66:  CLRF   46
12A68:  CLRF   47
12A6A:  CLRF   48
12A6C:  CLRF   49
12A6E:  MOVLW  03
12A70:  MOVWF  4C
12A72:  CLRF   4D
12A74:  CLRF   4E
12A76:  CLRF   4F
12A78:  CLRF   50
12A7A:  CLRF   51
12A7C:  CLRF   52
12A7E:  CLRF   53
12A80:  CLRF   54
12A82:  CLRF   55
12A84:  CLRF   56
12A86:  CLRF   57
12A88:  CLRF   58
12A8A:  CLRF   59
12A8C:  CLRF   5A
12A8E:  CLRF   5B
12A90:  CLRF   5C
12A92:  CLRF   5D
12A94:  CLRF   5E
12A96:  CLRF   5F
12A98:  CLRF   x60
12A9A:  CLRF   x61
12A9C:  CLRF   x62
12A9E:  CLRF   x63
12AA0:  CLRF   x64
12AA2:  CLRF   x65
12AA4:  CLRF   x66
12AA6:  CLRF   x67
12AA8:  CLRF   x68
12AAA:  CLRF   x69
12AAC:  CLRF   x6A
12AAE:  CLRF   x6B
12AB0:  CLRF   x6C
12AB2:  CLRF   x6D
12AB4:  CLRF   x6E
12AB6:  CLRF   x6F
12AB8:  CLRF   x70
12ABA:  CLRF   x71
12ABC:  CLRF   x72
12ABE:  CLRF   x73
12AC0:  CLRF   x74
12AC2:  CLRF   x75
12AC4:  CLRF   x76
12AC6:  CLRF   x77
12AC8:  CLRF   x78
12ACA:  CLRF   x79
12ACC:  CLRF   x7A
12ACE:  CLRF   x7B
12AD0:  CLRF   x7C
12AD2:  CLRF   x7D
12AD4:  CLRF   x7E
12AD6:  CLRF   x7F
12AD8:  CLRF   x80
12ADA:  CLRF   x81
12ADC:  CLRF   x82
12ADE:  CLRF   x83
12AE0:  CLRF   x84
12AE2:  CLRF   x85
12AE4:  CLRF   x86
12AE6:  CLRF   x87
12AE8:  CLRF   x88
12AEA:  CLRF   x89
12AEC:  CLRF   x8A
12AEE:  CLRF   x8B
12AF0:  CLRF   x8C
12AF2:  CLRF   x8D
12AF4:  CLRF   x8E
12AF6:  CLRF   x8F
12AF8:  CLRF   x90
12AFA:  CLRF   x91
12AFC:  CLRF   x92
12AFE:  CLRF   x93
12B00:  CLRF   x94
12B02:  CLRF   x95
12B04:  CLRF   x96
12B06:  CLRF   x97
12B08:  CLRF   x98
12B0A:  CLRF   x99
12B0C:  CLRF   x9A
12B0E:  CLRF   x9B
12B10:  CLRF   x9C
12B12:  CLRF   x9D
12B14:  CLRF   x9E
12B16:  CLRF   x9F
12B18:  CLRF   xA0
12B1A:  CLRF   xA1
12B1C:  CLRF   xA2
12B1E:  CLRF   xA3
12B20:  CLRF   xA4
12B22:  CLRF   xA5
12B24:  CLRF   xA6
12B26:  CLRF   xA7
12B28:  CLRF   xA8
12B2A:  CLRF   xA9
12B2C:  CLRF   xAA
12B2E:  CLRF   xAB
12B30:  CLRF   xAC
12B32:  CLRF   xAD
12B34:  CLRF   xAE
12B36:  CLRF   xAF
12B38:  CLRF   xB0
12B3A:  CLRF   xB1
12B3C:  CLRF   xB2
12B3E:  CLRF   xB3
12B40:  CLRF   xB4
12B42:  CLRF   xB5
12B44:  CLRF   xB6
12B46:  CLRF   xB7
12B48:  CLRF   xB8
12B4A:  CLRF   xB9
12B4C:  CLRF   xBA
12B4E:  CLRF   xBB
12B50:  CLRF   xBC
12B52:  CLRF   xBD
12B54:  CLRF   xBE
12B56:  CLRF   xBF
12B58:  CLRF   xC0
12B5A:  CLRF   xC1
12B5C:  CLRF   xC2
12B5E:  CLRF   xC3
12B60:  CLRF   xC4
12B62:  CLRF   xC5
12B64:  CLRF   xC6
12B66:  CLRF   xC7
12B68:  CLRF   xC8
12B6A:  CLRF   xC9
12B6C:  CLRF   xCA
12B6E:  CLRF   xCB
12B70:  CLRF   xCC
12B72:  CLRF   xCD
12B74:  CLRF   xCE
12B76:  CLRF   xCF
12B78:  CLRF   xD0
12B7A:  CLRF   xD1
12B7C:  CLRF   xD2
12B7E:  CLRF   xD3
12B80:  CLRF   xD4
12B82:  CLRF   xD5
12B84:  CLRF   xD6
12B86:  CLRF   xD7
12B88:  CLRF   xD8
12B8A:  CLRF   xD9
12B8C:  CLRF   xDA
12B8E:  CLRF   xDB
12B90:  CLRF   xDC
12B92:  CLRF   xDD
12B94:  CLRF   xDE
12B96:  CLRF   xDF
12B98:  CLRF   xE0
12B9A:  CLRF   xE1
12B9C:  CLRF   xE2
12B9E:  CLRF   xE3
12BA0:  CLRF   xE4
12BA2:  CLRF   xE5
12BA4:  CLRF   xE6
12BA6:  CLRF   xE7
12BA8:  CLRF   xE8
12BAA:  CLRF   xE9
12BAC:  CLRF   xEA
12BAE:  CLRF   xEB
12BB0:  CLRF   xEC
12BB2:  CLRF   xED
12BB4:  CLRF   xEE
12BB6:  CLRF   xEF
12BB8:  CLRF   xF0
12BBA:  CLRF   xF1
12BBC:  CLRF   xF2
12BBE:  CLRF   xF3
12BC0:  CLRF   xF4
12BC2:  CLRF   xF5
12BC4:  CLRF   xF6
12BC6:  CLRF   xF7
12BC8:  CLRF   xF8
12BCA:  CLRF   xF9
12BCC:  CLRF   xFA
12BCE:  CLRF   xFB
12BD0:  CLRF   xFC
12BD2:  CLRF   xFD
12BD4:  CLRF   xFE
12BD6:  CLRF   xFF
12BD8:  MOVLB  1
12BDA:  CLRF   x00
12BDC:  CLRF   x01
12BDE:  CLRF   x02
12BE0:  CLRF   x03
12BE2:  CLRF   x04
12BE4:  CLRF   x05
12BE6:  CLRF   x06
12BE8:  CLRF   x07
12BEA:  CLRF   x08
12BEC:  CLRF   x09
12BEE:  CLRF   x0A
12BF0:  CLRF   x0B
12BF2:  CLRF   x0C
12BF4:  CLRF   x0D
12BF6:  CLRF   x0E
12BF8:  CLRF   x0F
12BFA:  CLRF   x10
12BFC:  CLRF   x11
12BFE:  CLRF   x12
12C00:  CLRF   x13
12C02:  MOVLW  30
12C04:  MOVWF  x14
12C06:  MOVLW  7C
12C08:  MOVWF  x15
12C0A:  MOVLW  01
12C0C:  MOVWF  x16
12C0E:  MOVLW  01
12C10:  MOVWF  x17
12C12:  MOVLW  02
12C14:  MOVWF  x18
12C16:  MOVLW  7C
12C18:  MOVWF  x19
12C1A:  CLRF   x1A
12C1C:  MOVLW  09
12C1E:  MOVWF  x1B
12C20:  MOVLW  01
12C22:  MOVWF  x1C
12C24:  CLRF   x1D
12C26:  MOVLW  02
12C28:  MOVWF  x1E
12C2A:  MOVLW  01
12C2C:  MOVWF  x1F
12C2E:  MOVLW  03
12C30:  MOVWF  x20
12C32:  MOVLW  04
12C34:  MOVWF  x21
12C36:  MOVLW  01
12C38:  MOVWF  x69
12C3A:  MOVLW  22
12C3C:  MOVWF  x68
12C3E:  MOVLW  01
12C40:  MOVWF  x6B
12C42:  MOVLW  2C
12C44:  MOVWF  x6A
12C46:  MOVLW  01
12C48:  MOVWF  x6D
12C4A:  MOVLW  36
12C4C:  MOVWF  x6C
12C4E:  MOVLW  01
12C50:  MOVWF  x6F
12C52:  MOVLW  40
12C54:  MOVWF  x6E
12C56:  MOVLW  01
12C58:  MOVWF  x71
12C5A:  MOVLW  4A
12C5C:  MOVWF  x70
12C5E:  MOVLW  01
12C60:  MOVWF  x73
12C62:  MOVLW  54
12C64:  MOVWF  x72
12C66:  MOVLW  01
12C68:  MOVWF  x75
12C6A:  MOVLW  5E
12C6C:  MOVWF  x74
12C6E:  CLRF   x88
12C70:  CLRF   x89
12C72:  CLRF   x8A
12C74:  CLRF   x8B
12C76:  MOVLB  0
.................... { 
....................    delay_ms(100); // wait for power stable
12C78:  MOVLW  64
12C7A:  MOVLB  B
12C7C:  MOVWF  x02
12C7E:  MOVLB  0
12C80:  CALL   22AE
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
12C84:  MOVLW  6E
12C86:  MOVWF  FF6
12C88:  MOVLW  21
12C8A:  MOVWF  FF7
12C8C:  MOVLW  00
12C8E:  MOVWF  FF8
12C90:  CALL   22DC
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM6.\r\n");
12C94:  MOVLW  B4
12C96:  MOVWF  FF6
12C98:  MOVLW  21
12C9A:  MOVWF  FF7
12C9C:  MOVLW  00
12C9E:  MOVWF  FF8
12CA0:  CALL   22DC
....................    fprintf(PC,"Last updated on %s %s, by Inoue.\r\n\r\n", __DATE__, __TIME__);
12CA4:  MOVLW  E2
12CA6:  MOVWF  FF6
12CA8:  MOVLW  21
12CAA:  MOVWF  FF7
12CAC:  MOVLW  00
12CAE:  MOVWF  FF8
12CB0:  MOVLW  10
12CB2:  MOVLB  9
12CB4:  MOVWF  xC2
12CB6:  MOVLB  0
12CB8:  CALL   2312
12CBC:  MOVLW  08
12CBE:  MOVWF  FF6
12CC0:  MOVLW  22
12CC2:  MOVWF  FF7
12CC4:  MOVLW  00
12CC6:  MOVWF  FF8
12CC8:  CALL   22DC
12CCC:  MOVLW  20
12CCE:  BTFSS  FA6.6
12CD0:  GOTO   12CCE
12CD4:  MOVLB  E
12CD6:  MOVWF  xF9
12CD8:  MOVLW  12
12CDA:  MOVWF  FF6
12CDC:  MOVLW  22
12CDE:  MOVWF  FF7
12CE0:  MOVLW  00
12CE2:  MOVWF  FF8
12CE4:  MOVLB  0
12CE6:  CALL   22DC
12CEA:  MOVLW  F7
12CEC:  MOVWF  FF6
12CEE:  MOVLW  21
12CF0:  MOVWF  FF7
12CF2:  MOVLW  00
12CF4:  MOVWF  FF8
12CF6:  MOVLW  0F
12CF8:  MOVLB  9
12CFA:  MOVWF  xC2
12CFC:  MOVLB  0
12CFE:  CALL   2312
....................    memset(smf_update_flag, 0, sizeof(smf_update_flag));
12D02:  MOVLW  01
12D04:  MOVWF  FEA
12D06:  MOVLW  7A
12D08:  MOVWF  FE9
12D0A:  CLRF   00
12D0C:  CLRF   02
12D0E:  MOVLW  02
12D10:  MOVWF  01
12D12:  CALL   234C
....................    // io_init();
....................    setup_uart_to_boss();
12D16:  GOTO   2370
....................    timer_init();
12D1A:  GOTO   239A
....................    ad7490_init();
12D1E:  GOTO   25BE
....................    mcp4901_init();
12D22:  GOTO   28EE
....................    misf_init();
12D26:  CALL   3960
....................    
....................    piclog_make(PICLOG_STARTUP,0x00);
12D2A:  MOVLB  2
12D2C:  CLRF   x0F
12D2E:  CLRF   x10
12D30:  MOVLB  0
12D32:  CALL   50EC
.................... 
....................    int1 is_finished = FALSE;
12D36:  MOVLB  1
12D38:  BCF    x8C.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
12D3A:  MOVLW  1C
12D3C:  MOVWF  FF6
12D3E:  MOVLW  22
12D40:  MOVWF  FF7
12D42:  MOVLW  00
12D44:  MOVWF  FF8
12D46:  MOVLB  0
12D48:  CALL   22DC
....................    
....................    //enable_negative_power();
....................    connect_port1();
12D4C:  CALL   5214
....................    connect_port2();
12D50:  CALL   521C
....................    mcp4901_1_write(0);
12D54:  MOVLB  9
12D56:  CLRF   xDD
12D58:  CLRF   xDC
12D5A:  MOVLB  0
12D5C:  CALL   2872
....................    mcp4901_2_write(0);
12D60:  MOVLB  9
12D62:  CLRF   xDD
12D64:  CLRF   xDC
12D66:  MOVLB  0
12D68:  CALL   28B0
....................    connect_negative_power1(TRUE); // CIGS1 Negative Power ON
12D6C:  MOVLW  01
12D6E:  MOVLB  1
12D70:  MOVWF  x99
12D72:  MOVLB  0
12D74:  GOTO   5224
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
12D78:  MOVLW  42
12D7A:  MOVWF  FF6
12D7C:  MOVLW  22
12D7E:  MOVWF  FF7
12D80:  MOVLW  00
12D82:  MOVWF  FF8
12D84:  CALL   22DC
.................... 
....................    //Start loop
....................    while(TRUE)
....................    {
....................       if(boss_receive_buffer_size > 0)
12D88:  MOVF   4A,F
12D8A:  BTFSC  FD8.2
12D8C:  GOTO   12E2E
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
12D90:  MOVLB  1
12D92:  CLRF   xA0
12D94:  MOVLW  2A
12D96:  MOVWF  x9F
12D98:  MOVFF  4A,1A1
12D9C:  MOVLB  0
12D9E:  GOTO   5560
12DA2:  MOVFF  02,03
12DA6:  MOVF   01,W
12DA8:  MOVWF  FE1
12DAA:  MOVFF  03,FE2
12DAE:  MOVLW  01
12DB0:  MOVWF  FEA
12DB2:  MOVLW  8D
12DB4:  MOVWF  FE9
12DB6:  MOVLW  0C
12DB8:  MOVWF  01
12DBA:  MOVFF  FE6,FEE
12DBE:  DECFSZ 01,F
12DC0:  GOTO   12DBA
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
12DC4:  MOVLB  1
12DC6:  CLRF   xE0
12DC8:  MOVLW  2A
12DCA:  MOVWF  xDF
12DCC:  CLRF   xE2
12DCE:  MOVLW  4A
12DD0:  MOVWF  xE1
12DD2:  MOVLB  0
12DD4:  CALL   5762
....................          
....................          if(recieve_cmd.is_exist){
12DD8:  MOVLB  1
12DDA:  BTFSC  x8F.0
12DDC:  BRA    12DE4
12DDE:  MOVLB  0
12DE0:  GOTO   12E2E
12DE4:  MOVLB  0
....................             is_finished = execute_command(&recieve_cmd); // FIX: 戻り値を保持
12DE6:  MOVLW  01
12DE8:  MOVLB  1
12DEA:  MOVWF  x9A
12DEC:  MOVLW  8D
12DEE:  MOVWF  x99
12DF0:  MOVLB  0
12DF2:  GOTO   FF12
12DF6:  MOVLB  1
12DF8:  BCF    x8C.0
12DFA:  BTFSC  01.0
12DFC:  BSF    x8C.0
....................             if (is_finished == TRUE)
12DFE:  BTFSC  x8C.0
12E00:  BRA    12E08
12E02:  MOVLB  0
12E04:  GOTO   12E1E
12E08:  MOVLB  0
....................             {
....................                fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\n");
12E0A:  MOVLW  60
12E0C:  MOVWF  FF6
12E0E:  MOVLW  22
12E10:  MOVWF  FF7
12E12:  MOVLW  00
12E14:  MOVWF  FF8
12E16:  CALL   22DC
....................                
.................... 
....................             }else{
12E1A:  GOTO   12E2E
....................                fprintf(PC,"\r\nwaiting for BOSS PIC command");
12E1E:  MOVLW  82
12E20:  MOVWF  FF6
12E22:  MOVLW  22
12E24:  MOVWF  FF7
12E26:  MOVLW  00
12E28:  MOVWF  FF8
12E2A:  CALL   22DC
....................             }
....................          }
....................       }
....................          
....................       delay_ms(500);
12E2E:  MOVLW  02
12E30:  MOVLB  1
12E32:  MOVWF  x99
12E34:  MOVLB  0
12E36:  MOVLW  FA
12E38:  MOVLB  B
12E3A:  MOVWF  x02
12E3C:  MOVLB  0
12E3E:  CALL   22AE
12E42:  MOVLB  1
12E44:  DECFSZ x99,F
12E46:  BRA    12E4C
12E48:  BRA    12E50
12E4A:  MOVLB  0
12E4C:  MOVLB  0
12E4E:  BRA    12E36
....................       fprintf(PC, ".");
12E50:  MOVLW  2E
12E52:  MOVLB  0
12E54:  BTFSS  FA6.6
12E56:  GOTO   12E54
12E5A:  MOVLB  E
12E5C:  MOVWF  xF9
12E5E:  MOVLB  0
12E60:  GOTO   12D88
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
12E64:  MOVLW  A2
12E66:  MOVWF  FF6
12E68:  MOVLW  22
12E6A:  MOVWF  FF7
12E6C:  MOVLW  00
12E6E:  MOVWF  FF8
12E70:  CALL   22DC
....................    
.................... }
.................... // End of files
12E74:  SLEEP 

Configuration Fuses:
   Word  1: F6A0   STVREN NOXINST NODEBUG NOBROWNOUT BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS NODSWDT DSWDTOSC_INT
